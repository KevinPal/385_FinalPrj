
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012c4c memsz 0x00012c4c flags r-x
    LOAD off    0x00013c6c vaddr 0x00012c6c paddr 0x0001475c align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x0001624c vaddr 0x0001624c paddr 0x0001624c align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011f0c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b24  00012148  00012148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  00012c6c  0001475c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  0001624c  0001624c  0001624c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000163c4  000163c4  0001575c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001575c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe0  00000000  00000000  00015780  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025ac9  00000000  00000000  00016760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ab1  00000000  00000000  0003c229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c245  00000000  00000000  00045cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002594  00000000  00000000  00051f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d76  00000000  00000000  000544b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017924  00000000  00000000  0005822a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006fb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001908  00000000  00000000  0006fb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00074a26  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00074a29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074a2e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074a2f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00074a30  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00074a3b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00074a3f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00074a4a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00074a53  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  00074a7b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007e538  00000000  00000000  000798d4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00012148 l    d  .rodata	00000000 .rodata
00012c6c l    d  .rwdata	00000000 .rwdata
0001624c l    d  .bss	00000000 .bss
000163c4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
0001624c l     O .bss	00000002 ctl_reg
0001624e l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00012c6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000129aa l     O .rodata	00000010 zeroes.4404
0000555c l     F .text	000000bc __sbprintf
000129ba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000576c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000072c4 l     F .text	00000008 __fp_unlock
000072d8 l     F .text	0000019c __sinit.part.1
00007474 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000134b8 l     O .rwdata	00000020 lc_ctype_charset
00013498 l     O .rwdata	00000020 lc_message_charset
000134d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000129e8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a0e8 l     F .text	000000fc __sprint_r.part.0
00012b0c l     O .rodata	00000010 zeroes.4349
0000b724 l     F .text	000000bc __sbprintf
00012b1c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f76c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f880 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f8ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f9a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fa88 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fb74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fd50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014750 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0000ffc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000100a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000101e4 l     F .text	00000034 alt_dev_reg
000136b8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000104d4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000106e0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010d18 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000110b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011510 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011670 l     F .text	0000003c alt_get_errno
000116ac l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016298 g     O .bss	00000004 alt_instruction_exception_handler
00009780 g     F .text	00000074 _mprec_log10
0000986c g     F .text	0000008c __any_on
0000bcd8 g     F .text	00000054 _isatty_r
000129f4 g     O .rodata	00000028 __mprec_tinytens
0000fc8c g     F .text	0000007c alt_main
0000309c g     F .text	000000c0 _puts_r
000162c4 g     O .bss	00000100 alt_irq
0000bd2c g     F .text	00000060 _lseek_r
0001475c g       *ABS*	00000000 __flash_rwdata_start
0000e144 g     F .text	00000088 .hidden __eqdf2
000163c4 g       *ABS*	00000000 __alt_heap_start
00003060 g     F .text	0000003c printf
0000bf44 g     F .text	0000009c _wcrtomb_r
0001471c g     O .rwdata	00000004 gpu
0001625a g     O .bss	00000002 usb_ctl_val
00009fa8 g     F .text	0000005c __sseek
00007624 g     F .text	00000010 __sinit
00016254 g     O .bss	00000004 keycode
0000bdec g     F .text	00000140 __swbuf_r
000080f8 g     F .text	0000007c _setlocale_r
0000747c g     F .text	00000078 __sfmoreglue
0000fd2c g     F .text	00000024 __malloc_unlock
000026a8 g     F .text	00000088 UsbGetRetryCnt
000085bc g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
0000760c g     F .text	00000018 _cleanup
00008840 g     F .text	000000a8 _Balloc
0000e1cc g     F .text	000000dc .hidden __gtdf2
00011a98 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00010000 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bc7c g     F .text	0000005c _fstat_r
00016270 g     O .bss	00000004 errno
00009f24 g     F .text	00000008 __seofread
00016284 g     O .bss	00000004 alt_argv
0001c718 g       *ABS*	00000000 _gp
00010078 g     F .text	00000030 usleep
00013538 g     O .rwdata	00000180 alt_fd_list
0000143c g     F .text	00000048 swap_buffers
00011abc g     F .text	00000090 alt_find_dev
00008474 g     F .text	00000148 memcpy
0000325c g     F .text	00000008 _times_r
000072cc g     F .text	0000000c _cleanup_r
0000f584 g     F .text	000000dc .hidden __floatsidf
000115f4 g     F .text	0000007c alt_io_redirect
0001625c g     O .bss	00000001 data_size
0000e2a8 g     F .text	000000f4 .hidden __ltdf2
00012148 g       *ABS*	00000000 __DTOR_END__
0000315c g     F .text	00000014 puts
00011d18 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009e5c g     F .text	00000074 __fpclassifyd
000096dc g     F .text	000000a4 __ratio
0000b708 g     F .text	0000001c __vfiprintf_internal
000108d8 g     F .text	0000021c altera_avalon_jtag_uart_read
000027fc g     F .text	00000014 malloc
00003030 g     F .text	00000030 _printf_r
0000cde4 g     F .text	00000064 .hidden __udivsi3
0000f9dc g     F .text	000000ac isatty
00012a44 g     O .rodata	000000c8 __mprec_tens
00008174 g     F .text	0000000c __locale_charset
0001626c g     O .bss	00000004 __malloc_top_pad
00001d34 g     F .text	00000268 UsbGetConfigDesc2
00014730 g     O .rwdata	00000004 __mb_cur_max
000081a4 g     F .text	0000000c _localeconv_r
00008c74 g     F .text	0000003c __i2b
00007aa8 g     F .text	000004c8 __sfvwrite_r
0001625e g     O .bss	00000002 intStat
00003170 g     F .text	00000054 _sbrk_r
0000bd8c g     F .text	00000060 _read_r
00014748 g     O .rwdata	00000004 alt_max_fd
0000b970 g     F .text	000000f0 _fclose_r
00007294 g     F .text	00000030 fflush
00016268 g     O .bss	00000004 __malloc_max_sbrked_mem
0000cec8 g     F .text	000008ac .hidden __adddf3
00009484 g     F .text	0000010c __b2d
0000c728 g     F .text	000005c4 .hidden __umoddi3
0000fbb0 g     F .text	000000dc lseek
00014720 g     O .rwdata	00000004 _global_impure_ptr
000098f8 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
000163c4 g       *ABS*	00000000 __bss_end
00011420 g     F .text	000000f0 alt_iic_isr_register
00011990 g     F .text	00000108 alt_tick
0000c12c g     F .text	000005fc .hidden __udivdi3
0000bbd8 g     F .text	00000024 _fputwc_r
00012a1c g     O .rodata	00000028 __mprec_bigtens
00008a58 g     F .text	00000104 __s2b
0000f660 g     F .text	000000a8 .hidden __floatunsidf
000091c4 g     F .text	00000060 __mcmp
00001784 g     F .text	00000100 UsbSetAddress
00007644 g     F .text	00000018 __fp_lock_all
000113d4 g     F .text	0000004c alt_ic_irq_enabled
000118f4 g     F .text	0000009c alt_alarm_stop
0001628c g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00013510 g     O .rwdata	00000028 alt_dev_null
00011090 g     F .text	00000020 alt_dcache_flush_all
00008b5c g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
0000f504 g     F .text	00000080 .hidden __fixdfsi
0001475c g       *ABS*	00000000 __ram_rwdata_end
00014740 g     O .rwdata	00000008 alt_dev_list
000100e4 g     F .text	00000100 write
00012c6c g       *ABS*	00000000 __ram_rodata_end
0000f8e8 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000e2a8 g     F .text	000000f4 .hidden __ledf2
00002730 g     F .text	00000080 UsbPrintMem
00008f3c g     F .text	00000140 __pow5mult
0000a1fc g     F .text	0000150c ___vfiprintf_internal_r
0001627c g     O .bss	00000004 __nlocale_changed
0000ce48 g     F .text	00000058 .hidden __umodsi3
000163c4 g       *ABS*	00000000 end
000012a8 g     F .text	00000110 draw_cube
00010414 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00012148 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
00010d90 g     F .text	0000007c alt_avalon_timer_sc_init
0000f708 g     F .text	00000064 .hidden __clzsi2
00010af4 g     F .text	00000224 altera_avalon_jtag_uart_write
00007634 g     F .text	00000004 __sfp_lock_acquire
00008390 g     F .text	000000e4 memchr
00003264 g     F .text	000022dc ___vfprintf_internal_r
0000209c g     F .text	00000100 UsbClassRequest
00007798 g     F .text	00000310 _free_r
00008180 g     F .text	00000010 __locale_mb_cur_max
00011f94 g     F .text	00000180 __call_exitprocs
00016278 g     O .bss	00000004 __mlocale_changed
00014728 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00016290 g     O .bss	00000004 _alt_tick_rate
0000907c g     F .text	00000148 __lshift
00016294 g     O .bss	00000004 _alt_nticks
0000fd8c g     F .text	00000104 read
00010250 g     F .text	00000060 alt_sys_init
00011e7c g     F .text	00000118 __register_exitproc
00008cb0 g     F .text	0000028c __multiply
00010780 g     F .text	00000068 altera_avalon_jtag_uart_close
0000cea0 g     F .text	00000028 .hidden __mulsi3
00012c6c g       *ABS*	00000000 __ram_rwdata_start
00012148 g       *ABS*	00000000 __ram_rodata_start
0001629c g     O .bss	00000028 __malloc_current_mallinfo
00009590 g     F .text	0000014c __d2b
00001884 g     F .text	00000148 UsbGetDeviceDesc1
000102b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011c54 g     F .text	000000c4 alt_get_fd
00010f38 g     F .text	00000158 alt_busy_sleep
0000b840 g     F .text	00000054 _close_r
00011e00 g     F .text	0000007c memcmp
00010370 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000163c4 g       *ABS*	00000000 __alt_stack_base
000103c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005618 g     F .text	00000154 __swsetup_r
0000d774 g     F .text	000009d0 .hidden __divdf3
000074f4 g     F .text	00000118 __sfp
000097f4 g     F .text	00000078 __copybits
00013090 g     O .rwdata	00000408 __malloc_av_
00007640 g     F .text	00000004 __sinit_lock_release
0000e39c g     F .text	0000086c .hidden __muldf3
00009ed0 g     F .text	00000054 __sread
00002624 g     F .text	00000084 UsbWaitTDListDone
00011b4c g     F .text	00000108 alt_find_file
000110ec g     F .text	000000a4 alt_dev_llist_insert
0000fd08 g     F .text	00000024 __malloc_lock
0000ff14 g     F .text	000000b0 sbrk
00007238 g     F .text	0000005c _fflush_r
0000b894 g     F .text	000000dc _calloc_r
00016260 g     O .bss	00000001 hot_plug_count
0001624c g       *ABS*	00000000 __bss_start
00008718 g     F .text	00000128 memset
00001484 g     F .text	000001b0 main
00016288 g     O .bss	00000004 alt_envp
00016264 g     O .bss	00000004 __malloc_max_total_mem
00010310 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001f9c g     F .text	00000100 UsbSetConfig
0000bf2c g     F .text	00000018 __swbuf
0000a004 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
0000ba60 g     F .text	00000014 fclose
00005994 g     F .text	00001688 _dtoa_r
00002824 g     F .text	0000080c _malloc_r
0000c0a0 g     F .text	00000030 __ascii_wctomb
0001474c g     O .rwdata	00000004 alt_errno
00007f70 g     F .text	000000c4 _fwalk
0000ccec g     F .text	00000084 .hidden __divsi3
00007674 g     F .text	00000124 _malloc_trim_r
0000219c g     F .text	00000148 UsbGetHidDesc
00012148 g       *ABS*	00000000 __CTOR_END__
0000a00c g     F .text	000000dc strcmp
00012148 g       *ABS*	00000000 __flash_rodata_start
00012148 g       *ABS*	00000000 __DTOR_LIST__
0000e144 g     F .text	00000088 .hidden __nedf2
0000168c g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
00010218 g     F .text	00000038 alt_irq_init
0000fe90 g     F .text	00000084 alt_release_fd
00012b2c g     O .rodata	00000100 .hidden __clz_tab
00016274 g     O .bss	00000004 _PathLocale
00011db4 g     F .text	00000014 atexit
0000b7e0 g     F .text	00000060 _write_r
000081b0 g     F .text	00000018 setlocale
00014724 g     O .rwdata	00000004 _impure_ptr
00016280 g     O .bss	00000004 alt_argc
0000701c g     F .text	0000021c __sflush_r
00014718 g     O .rwdata	00000004 vga_cont
000111f0 g     F .text	00000060 _do_dtors
0000819c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009420 g     F .text	00000064 __ulp
0000765c g     F .text	00000018 __fp_unlock_all
00016258 g     O .bss	00000001 toggle
00014738 g     O .rwdata	00000008 alt_fs_list
000022e4 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000081c8 g     F .text	0000000c localeconv
00011270 g     F .text	00000050 alt_ic_isr_register
0001475c g       *ABS*	00000000 _edata
000163c4 g       *ABS*	00000000 _end
00001634 g     F .text	00000058 UsbWrite
0000ba74 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
000107e8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00016262 g     O .bss	00000002 code
00011348 g     F .text	0000008c alt_ic_irq_disable
00009f2c g     F .text	0000007c __swrite
0001472c g     O .rwdata	00000004 __malloc_trim_threshold
00008190 g     F .text	0000000c __locale_msgcharset
00016250 g     O .bss	00000002 fs_device
00011dc8 g     F .text	00000038 exit
00008034 g     F .text	000000c4 _fwalk_reent
00009224 g     F .text	000001fc __mdiff
0000cd70 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007638 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
00012114 g     F .text	00000034 _exit
00010e0c g     F .text	0000012c alt_alarm_start
000081d4 g     F .text	000001bc __smakebuf_r
000031c4 g     F .text	00000098 strlen
00011798 g     F .text	0000015c open
0000e1cc g     F .text	000000dc .hidden __gedf2
000027b0 g     F .text	0000004c clock
00014734 g     O .rwdata	00000004 __wctomb
0000a1e4 g     F .text	00000018 __sprint_r
00011250 g     F .text	00000020 alt_icache_flush_all
000112c0 g     F .text	00000088 alt_ic_irq_enable
00005540 g     F .text	0000001c __vfprintf_internal
0000c0d0 g     F .text	0000005c _wctomb_r
000013b8 g     F .text	00000084 clear_screen
0000ec08 g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
00008bc4 g     F .text	000000b0 __lo0bits
00001ba4 g     F .text	00000190 UsbGetConfigDesc1
00014754 g     O .rwdata	00000008 alt_alarm_list
00011190 g     F .text	00000060 _do_ctors
000016d0 g     F .text	000000b4 UsbSoftReset
0000bfe0 g     F .text	000000c0 wcrtomb
0000f7a8 g     F .text	000000d8 close
000019cc g     F .text	000001d8 UsbGetDeviceDesc2
0000faf0 g     F .text	00000084 alt_load
0000bbfc g     F .text	00000080 fputwc
00002810 g     F .text	00000014 free
0000763c g     F .text	00000004 __sinit_lock_acquire
00008910 g     F .text	00000148 __multadd
000088e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	1098b104 	addi	r2,r2,25284
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	1098b104 	addi	r2,r2,25284
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6e017 	ldw	r2,-25728(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6e017 	ldw	r2,-25728(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6b1c614 	ori	gp,gp,50968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10989314 	ori	r2,r2,25164

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18d8f114 	ori	r3,r3,25540

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000faf00 	call	faf0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000fc8c0 	call	fc8c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820034 	movhi	r2,2048
     288:	108c0804 	addi	r2,r2,12320
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820034 	movhi	r2,2048
     298:	108c0c04 	addi	r2,r2,12336
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820034 	movhi	r2,2048
     2a8:	108c1404 	addi	r2,r2,12368
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820034 	movhi	r2,2048
     2b8:	108c1004 	addi	r2,r2,12352
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820034 	movhi	r2,2048
     2c8:	108c1c04 	addi	r2,r2,12400
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820034 	movhi	r2,2048
     2d4:	108c1804 	addi	r2,r2,12384
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820034 	movhi	r2,2048
     2e0:	108c0c04 	addi	r2,r2,12336
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820034 	movhi	r2,2048
     2ec:	108c0804 	addi	r2,r2,12320
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820034 	movhi	r2,2048
     2f8:	108c0804 	addi	r2,r2,12320
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820034 	movhi	r2,2048
     308:	108c0c04 	addi	r2,r2,12336
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820034 	movhi	r2,2048
     348:	108c1c04 	addi	r2,r2,12400
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820034 	movhi	r2,2048
     358:	108c1804 	addi	r2,r2,12384
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820034 	movhi	r2,2048
     368:	108c0c04 	addi	r2,r2,12336
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820034 	movhi	r2,2048
     374:	108c1004 	addi	r2,r2,12352
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820034 	movhi	r2,2048
     380:	108c1004 	addi	r2,r2,12352
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820034 	movhi	r2,2048
     390:	108c0c04 	addi	r2,r2,12336
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820034 	movhi	r2,2048
     3c8:	108c1c04 	addi	r2,r2,12400
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820034 	movhi	r2,2048
     3d8:	108c0c04 	addi	r2,r2,12336
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820034 	movhi	r2,2048
     3e4:	108c1404 	addi	r2,r2,12368
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820034 	movhi	r2,2048
     3f0:	108c1804 	addi	r2,r2,12384
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820034 	movhi	r2,2048
     400:	108c1404 	addi	r2,r2,12368
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820034 	movhi	r2,2048
     410:	108c0c04 	addi	r2,r2,12336
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a6d003 	ldbu	r2,-25792(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a6d005 	stb	r2,-25792(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a6d103 	ldbu	r2,-25788(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a6d003 	ldbu	r2,-25792(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	00016340 	call	1634 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a6d103 	ldbu	r2,-25788(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a6d003 	ldbu	r2,-25792(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	00016340 	call	1634 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	00100780 	call	10078 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	00026240 	call	2624 <UsbWaitTDListDone>
     58c:	d0a6d08d 	sth	r2,-25790(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	000168c0 	call	168c <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a6cf15 	stw	r2,-25796(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a6cf17 	ldw	r2,-25796(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	21085204 	addi	r4,r4,8520
     5b0:	00030600 	call	3060 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820034 	movhi	r2,2048
     5b8:	108c2004 	addi	r2,r2,12416
     5bc:	d0e6cf17 	ldw	r3,-25796(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a6cf17 	ldw	r2,-25796(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	00100780 	call	10078 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a6cd0b 	ldhu	r2,-25804(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	000168c0 	call	168c <UsbRead>
     5ec:	d0a6d08d 	sth	r2,-25790(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e6d08b 	ldhu	r3,-25790(gp)
     5f4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d026d205 	stb	zero,-25784(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	00100780 	call	10078 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a6cd0b 	ldhu	r2,-25804(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	000168c0 	call	168c <UsbRead>
     624:	d0a6d08d 	sth	r2,-25790(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e6d08b 	ldhu	r3,-25790(gp)
     62c:	d0a6cd8b 	ldhu	r2,-25802(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a6d203 	ldbu	r2,-25784(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a6d205 	stb	r2,-25784(gp)
     648:	d0a6d203 	ldbu	r2,-25784(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e6d08b 	ldhu	r3,-25790(gp)
     664:	d0a6cd8b 	ldhu	r2,-25802(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	21085b04 	addi	r4,r4,8556
     67c:	000315c0 	call	315c <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	21086604 	addi	r4,r4,8600
     688:	000315c0 	call	315c <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6cd0b 	ldhu	r2,-25804(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	000168c0 	call	168c <UsbRead>
     6a0:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	00100780 	call	10078 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a6cd0b 	ldhu	r2,-25804(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	000168c0 	call	168c <UsbRead>
     6bc:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	00100780 	call	10078 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a6cd0b 	ldhu	r2,-25804(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	000168c0 	call	168c <UsbRead>
     6d8:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	00100780 	call	10078 <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e6d08b 	ldhu	r3,-25790(gp)
     6e8:	d0a6cd8b 	ldhu	r2,-25802(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	00100780 	call	10078 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e6d08b 	ldhu	r3,-25790(gp)
     708:	d0a6cd8b 	ldhu	r2,-25802(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	21086e04 	addi	r4,r4,8632
     74c:	000315c0 	call	315c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	00016d00 	call	16d0 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	00016340 	call	1634 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	00016340 	call	1634 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	00016340 	call	1634 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a6d08d 	sth	r2,-25790(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a6d08b 	ldhu	r2,-25790(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	00016340 	call	1634 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a6d18d 	sth	r2,-25786(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a6d18b 	ldhu	r2,-25786(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	00016340 	call	1634 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	00016340 	call	1634 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	21087404 	addi	r4,r4,8656
     8a0:	00030600 	call	3060 <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	21087d04 	addi	r4,r4,8692
     8c4:	00030600 	call	3060 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	00016340 	call	1634 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	00016340 	call	1634 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	21087404 	addi	r4,r4,8656
     9b8:	00030600 	call	3060 <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a6cd0d 	sth	r2,-25804(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a6cd8d 	sth	r2,-25802(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a6ce0d 	sth	r2,-25800(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a6cd0b 	ldhu	r2,-25804(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	000168c0 	call	168c <UsbRead>
     9e8:	d0a6d08d 	sth	r2,-25790(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e6d08b 	ldhu	r3,-25790(gp)
     9f0:	d0a6cd8b 	ldhu	r2,-25802(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d026d205 	stb	zero,-25784(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	00100780 	call	10078 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a6cd0b 	ldhu	r2,-25804(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	000168c0 	call	168c <UsbRead>
     a20:	d0a6d08d 	sth	r2,-25790(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e6d08b 	ldhu	r3,-25790(gp)
     a28:	d0a6cd8b 	ldhu	r2,-25802(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a6d203 	ldbu	r2,-25784(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a6d205 	stb	r2,-25784(gp)
     a44:	d0a6d203 	ldbu	r2,-25784(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e6d08b 	ldhu	r3,-25790(gp)
     a60:	d0a6cd8b 	ldhu	r2,-25802(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	21088104 	addi	r4,r4,8708
     a78:	000315c0 	call	315c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	21088b04 	addi	r4,r4,8748
     a84:	000315c0 	call	315c <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a6cd0b 	ldhu	r2,-25804(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	000168c0 	call	168c <UsbRead>
     a9c:	d0a6d08d 	sth	r2,-25790(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e6d08b 	ldhu	r3,-25790(gp)
     aa4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	00100780 	call	10078 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e6d08b 	ldhu	r3,-25790(gp)
     ac4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e6d08b 	ldhu	r3,-25790(gp)
     adc:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	21089704 	addi	r4,r4,8796
     af4:	000315c0 	call	315c <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	21089e04 	addi	r4,r4,8824
     b04:	000315c0 	call	315c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	00017840 	call	1784 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	00017840 	call	1784 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	00100780 	call	10078 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	2108a504 	addi	r4,r4,8852
     b58:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a6d08b 	ldhu	r2,-25790(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	2108b004 	addi	r4,r4,8896
     b88:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a6d08b 	ldhu	r2,-25790(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	00026a80 	call	26a8 <UsbGetRetryCnt>
     ba4:	d0a6d08d 	sth	r2,-25790(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	2108bc04 	addi	r4,r4,8944
     bb4:	000315c0 	call	315c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	00018840 	call	1884 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	00100780 	call	10078 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	00018840 	call	1884 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	00100780 	call	10078 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	2108cb04 	addi	r4,r4,9004
     c10:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a6d08b 	ldhu	r2,-25790(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	2108d604 	addi	r4,r4,9048
     c40:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a6d08b 	ldhu	r2,-25790(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	00026a80 	call	26a8 <UsbGetRetryCnt>
     c5c:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	2108e204 	addi	r4,r4,9096
     c68:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	2108eb04 	addi	r4,r4,9132
     c78:	000315c0 	call	315c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	00019cc0 	call	19cc <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	00019cc0 	call	19cc <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	00100780 	call	10078 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	2108cb04 	addi	r4,r4,9004
     ccc:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a6d08b 	ldhu	r2,-25790(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	2108d604 	addi	r4,r4,9048
     cfc:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a6d08b 	ldhu	r2,-25790(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	00026a80 	call	26a8 <UsbGetRetryCnt>
     d18:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	2108e204 	addi	r4,r4,9096
     d24:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	2108ff04 	addi	r4,r4,9212
     d34:	000315c0 	call	315c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	0001ba40 	call	1ba4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	0001ba40 	call	1ba4 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	00100780 	call	10078 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	21091104 	addi	r4,r4,9284
     d88:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a6d08b 	ldhu	r2,-25790(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	21091c04 	addi	r4,r4,9328
     db8:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a6d08b 	ldhu	r2,-25790(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	00026a80 	call	26a8 <UsbGetRetryCnt>
     dd4:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	2108e204 	addi	r4,r4,9096
     de0:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	21092804 	addi	r4,r4,9376
     df0:	000315c0 	call	315c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	0001d340 	call	1d34 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	00100780 	call	10078 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	0001d340 	call	1d34 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	00100780 	call	10078 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	21093b04 	addi	r4,r4,9452
     e50:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a6d08b 	ldhu	r2,-25790(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	21094604 	addi	r4,r4,9496
     e80:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a6d08b 	ldhu	r2,-25790(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	00026a80 	call	26a8 <UsbGetRetryCnt>
     e9c:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	2108e204 	addi	r4,r4,9096
     ea8:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	21095204 	addi	r4,r4,9544
     eb8:	000315c0 	call	315c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a6d28d 	sth	r2,-25782(gp)
	code = code & 0x003;
     ed4:	d0a6d28b 	ldhu	r2,-25782(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a6d28d 	sth	r2,-25782(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a6d28b 	ldhu	r2,-25782(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	21096504 	addi	r4,r4,9620
     ef4:	00030600 	call	3060 <printf>

	if (code == 0x01)
     ef8:	d0a6d28b 	ldhu	r2,-25782(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	21096804 	addi	r4,r4,9632
     f10:	000315c0 	call	315c <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	21097704 	addi	r4,r4,9692
     f20:	000315c0 	call	315c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	00016340 	call	1634 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a6d105 	stb	r2,-25788(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a6d103 	ldbu	r2,-25788(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	21098004 	addi	r4,r4,9728
     fa4:	00030600 	call	3060 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	0001f9c0 	call	1f9c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	0001f9c0 	call	1f9c <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	00100780 	call	10078 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	21098a04 	addi	r4,r4,9768
     ff8:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a6d08b 	ldhu	r2,-25790(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	21099504 	addi	r4,r4,9812
    1028:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a6d08b 	ldhu	r2,-25790(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	00026a80 	call	26a8 <UsbGetRetryCnt>
    1044:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	2108e204 	addi	r4,r4,9096
    1050:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	2109a104 	addi	r4,r4,9860
    1060:	000315c0 	call	315c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	000209c0 	call	209c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	000209c0 	call	209c <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	00100780 	call	10078 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	2109b304 	addi	r4,r4,9932
    10b4:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a6d08b 	ldhu	r2,-25790(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	2109be04 	addi	r4,r4,9976
    10e4:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a6d08b 	ldhu	r2,-25790(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	00026a80 	call	26a8 <UsbGetRetryCnt>
    1100:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	2108e204 	addi	r4,r4,9096
    110c:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	2109ca04 	addi	r4,r4,10024
    111c:	000315c0 	call	315c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	000219c0 	call	219c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	000219c0 	call	219c <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	00100780 	call	10078 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	2109b304 	addi	r4,r4,9932
    1170:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a6d08b 	ldhu	r2,-25790(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	2109be04 	addi	r4,r4,9976
    11a0:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a6d08b 	ldhu	r2,-25790(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	00026a80 	call	26a8 <UsbGetRetryCnt>
    11bc:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	2108e204 	addi	r4,r4,9096
    11c8:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	2109dc04 	addi	r4,r4,10096
    11d8:	000315c0 	call	315c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	00022e40 	call	22e4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	00022e40 	call	22e4 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	00026240 	call	2624 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	2109f004 	addi	r4,r4,10176
    1224:	00030600 	call	3060 <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a6d08b 	ldhu	r2,-25790(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	2109fc04 	addi	r4,r4,10224
    1254:	00030600 	call	3060 <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a6d08b 	ldhu	r2,-25790(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	00026a80 	call	26a8 <UsbGetRetryCnt>
    1270:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	2108e204 	addi	r4,r4,9096
    127c:	000315c0 	call	315c <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	210a0804 	addi	r4,r4,10272
    128c:	000315c0 	call	315c <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <draw_cube>:
#include "keyboard.h"




void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z) {
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
	time_t start = clock();
    12c8:	00027b00 	call	27b0 <clock>
    12cc:	e0bffb15 	stw	r2,-20(fp)
	gpu->mode = GPU_MODE_RENDER;
    12d0:	e0bffc17 	ldw	r2,-16(fp)
    12d4:	00c00044 	movi	r3,1
    12d8:	10c00815 	stw	r3,32(r2)
	gpu->scale = scale * (FP_SCALE);
    12dc:	e0bffd17 	ldw	r2,-12(fp)
    12e0:	1006923a 	slli	r3,r2,8
    12e4:	e0bffc17 	ldw	r2,-16(fp)
    12e8:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    12ec:	e0bffe17 	ldw	r2,-8(fp)
    12f0:	1006923a 	slli	r3,r2,8
    12f4:	e0bffc17 	ldw	r2,-16(fp)
    12f8:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	1006923a 	slli	r3,r2,8
    1304:	e0bffc17 	ldw	r2,-16(fp)
    1308:	10c00615 	stw	r3,24(r2)
	gpu->z = z * (FP_SCALE);
    130c:	e0800217 	ldw	r2,8(fp)
    1310:	1006923a 	slli	r3,r2,8
    1314:	e0bffc17 	ldw	r2,-16(fp)
    1318:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    131c:	e0bffc17 	ldw	r2,-16(fp)
    1320:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1324:	e0bffc17 	ldw	r2,-16(fp)
    1328:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    132c:	e0bffc17 	ldw	r2,-16(fp)
    1330:	00c00044 	movi	r3,1
    1334:	10c00115 	stw	r3,4(r2)
	printf("Render Setup ticks %d\n", clock() - start);
    1338:	00027b00 	call	27b0 <clock>
    133c:	1007883a 	mov	r3,r2
    1340:	e0bffb17 	ldw	r2,-20(fp)
    1344:	1885c83a 	sub	r2,r3,r2
    1348:	100b883a 	mov	r5,r2
    134c:	01000074 	movhi	r4,1
    1350:	210a1c04 	addi	r4,r4,10352
    1354:	00030600 	call	3060 <printf>
	start = clock();
    1358:	00027b00 	call	27b0 <clock>
    135c:	e0bffb15 	stw	r2,-20(fp)
	while(gpu->done == 0) {
    1360:	0001883a 	nop
    1364:	e0bffc17 	ldw	r2,-16(fp)
    1368:	10800217 	ldw	r2,8(r2)
    136c:	103ffd26 	beq	r2,zero,1364 <__alt_exception_stack_pointer+0xf8001364>

	}
	printf("Render render ticks %d\n", clock() - start);
    1370:	00027b00 	call	27b0 <clock>
    1374:	1007883a 	mov	r3,r2
    1378:	e0bffb17 	ldw	r2,-20(fp)
    137c:	1885c83a 	sub	r2,r3,r2
    1380:	100b883a 	mov	r5,r2
    1384:	01000074 	movhi	r4,1
    1388:	210a2204 	addi	r4,r4,10376
    138c:	00030600 	call	3060 <printf>
	gpu->done = 0;
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    1398:	e0bffc17 	ldw	r2,-16(fp)
    139c:	10000815 	stw	zero,32(r2)

}
    13a0:	0001883a 	nop
    13a4:	e037883a 	mov	sp,fp
    13a8:	dfc00117 	ldw	ra,4(sp)
    13ac:	df000017 	ldw	fp,0(sp)
    13b0:	dec00204 	addi	sp,sp,8
    13b4:	f800283a 	ret

000013b8 <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    13b8:	defffc04 	addi	sp,sp,-16
    13bc:	dfc00315 	stw	ra,12(sp)
    13c0:	df000215 	stw	fp,8(sp)
    13c4:	df000204 	addi	fp,sp,8
    13c8:	e13ffe15 	stw	r4,-8(fp)
    13cc:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR;
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	00c00084 	movi	r3,2
    13d8:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    13dc:	e0bffe17 	ldw	r2,-8(fp)
    13e0:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    13e4:	e0bffe17 	ldw	r2,-8(fp)
    13e8:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    13ec:	e0bffe17 	ldw	r2,-8(fp)
    13f0:	00c00044 	movi	r3,1
    13f4:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if(should_wait == 1) {
    13f8:	e0bfff17 	ldw	r2,-4(fp)
    13fc:	10800058 	cmpnei	r2,r2,1
    1400:	1000061e 	bne	r2,zero,141c <clear_screen+0x64>
		while(gpu->done == 0) {
    1404:	00000206 	br	1410 <clear_screen+0x58>
			usleep(1);
    1408:	01000044 	movi	r4,1
    140c:	00100780 	call	10078 <usleep>
	gpu->done = 0;
	gpu->start = 0;
	gpu->start = 1;
	//printf("start clear");
	if(should_wait == 1) {
		while(gpu->done == 0) {
    1410:	e0bffe17 	ldw	r2,-8(fp)
    1414:	10800217 	ldw	r2,8(r2)
    1418:	103ffb26 	beq	r2,zero,1408 <__alt_exception_stack_pointer+0xf8001408>
			usleep(1);
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    141c:	e0bffe17 	ldw	r2,-8(fp)
    1420:	10000815 	stw	zero,32(r2)
}
    1424:	0001883a 	nop
    1428:	e037883a 	mov	sp,fp
    142c:	dfc00117 	ldw	ra,4(sp)
    1430:	df000017 	ldw	fp,0(sp)
    1434:	dec00204 	addi	sp,sp,8
    1438:	f800283a 	ret

0000143c <swap_buffers>:


volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;

void swap_buffers() {
    143c:	defffe04 	addi	sp,sp,-8
    1440:	df000115 	stw	fp,4(sp)
    1444:	df000104 	addi	fp,sp,4
	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
    1448:	d0a00017 	ldw	r2,-32768(gp)
    144c:	10800017 	ldw	r2,0(r2)
    1450:	e0bfff15 	stw	r2,-4(fp)
	vga_cont->frame_pointer = gpu->frame_pointer;
    1454:	d0a00017 	ldw	r2,-32768(gp)
    1458:	d0e00117 	ldw	r3,-32764(gp)
    145c:	18c00017 	ldw	r3,0(r3)
    1460:	10c00015 	stw	r3,0(r2)
	gpu->frame_pointer = temp;
    1464:	d0a00117 	ldw	r2,-32764(gp)
    1468:	e0ffff17 	ldw	r3,-4(fp)
    146c:	10c00015 	stw	r3,0(r2)
}
    1470:	0001883a 	nop
    1474:	e037883a 	mov	sp,fp
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00104 	addi	sp,sp,4
    1480:	f800283a 	ret

00001484 <main>:


int main()
{
    1484:	defff604 	addi	sp,sp,-40
    1488:	dfc00915 	stw	ra,36(sp)
    148c:	df000815 	stw	fp,32(sp)
    1490:	df000804 	addi	fp,sp,32

	printf("Starting up");
    1494:	01000074 	movhi	r4,1
    1498:	210a2804 	addi	r4,r4,10400
    149c:	00030600 	call	3060 <printf>

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
    14a0:	010004f4 	movhi	r4,19
    14a4:	21300004 	addi	r4,r4,-16384
    14a8:	00027fc0 	call	27fc <malloc>
    14ac:	e0bffb15 	stw	r2,-20(fp)
	union frame_buffer_t* frame2 =  malloc(sizeof(frame_buffer_t));
    14b0:	010004f4 	movhi	r4,19
    14b4:	21300004 	addi	r4,r4,-16384
    14b8:	00027fc0 	call	27fc <malloc>
    14bc:	e0bffc15 	stw	r2,-16(fp)

	gpu->frame_pointer = frame2;
    14c0:	d0a00117 	ldw	r2,-32764(gp)
    14c4:	e0fffc17 	ldw	r3,-16(fp)
    14c8:	10c00015 	stw	r3,0(r2)
	vga_cont->frame_pointer = frame1;
    14cc:	d0a00017 	ldw	r2,-32768(gp)
    14d0:	e0fffb17 	ldw	r3,-20(fp)
    14d4:	10c00015 	stw	r3,0(r2)

	printf("Done");
    14d8:	01000074 	movhi	r4,1
    14dc:	210a2b04 	addi	r4,r4,10412
    14e0:	00030600 	call	3060 <printf>
	int depth = 70;
    14e4:	00801184 	movi	r2,70
    14e8:	e0bffd15 	stw	r2,-12(fp)
	int x = 0;
    14ec:	e03ff915 	stw	zero,-28(fp)
	int y = 0;
    14f0:	e03ffa15 	stw	zero,-24(fp)
	clear_screen(gpu, 1);
    14f4:	d0a00117 	ldw	r2,-32764(gp)
    14f8:	01400044 	movi	r5,1
    14fc:	1009883a 	mov	r4,r2
    1500:	00013b80 	call	13b8 <clear_screen>
	printf("Initing keyboard");
    1504:	01000074 	movhi	r4,1
    1508:	210a2d04 	addi	r4,r4,10420
    150c:	00030600 	call	3060 <printf>
	init_keyboard();
    1510:	00007300 	call	730 <init_keyboard>

	int keycode = 0;
    1514:	e03fff15 	stw	zero,-4(fp)

	while(1) {
		time_t start_time = clock();
    1518:	00027b00 	call	27b0 <clock>
    151c:	e0bffe15 	stw	r2,-8(fp)
		clear_screen(gpu, 1);
    1520:	d0a00117 	ldw	r2,-32764(gp)
    1524:	01400044 	movi	r5,1
    1528:	1009883a 	mov	r4,r2
    152c:	00013b80 	call	13b8 <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    1530:	00027b00 	call	27b0 <clock>
    1534:	1007883a 	mov	r3,r2
    1538:	e0bffe17 	ldw	r2,-8(fp)
    153c:	1885c83a 	sub	r2,r3,r2
    1540:	100b883a 	mov	r5,r2
    1544:	01000074 	movhi	r4,1
    1548:	210a3204 	addi	r4,r4,10440
    154c:	00030600 	call	3060 <printf>
		start_time = clock();
    1550:	00027b00 	call	27b0 <clock>
    1554:	e0bffe15 	stw	r2,-8(fp)

		//draw_cube(gpu, 2, 0, 0, -depth);
		draw_cube(gpu, 12, -35+x, 30+y, -depth);
    1558:	d0e00117 	ldw	r3,-32764(gp)
    155c:	e0bff917 	ldw	r2,-28(fp)
    1560:	113ff744 	addi	r4,r2,-35
    1564:	e0bffa17 	ldw	r2,-24(fp)
    1568:	11400784 	addi	r5,r2,30
    156c:	e0bffd17 	ldw	r2,-12(fp)
    1570:	0085c83a 	sub	r2,zero,r2
    1574:	d8800015 	stw	r2,0(sp)
    1578:	280f883a 	mov	r7,r5
    157c:	200d883a 	mov	r6,r4
    1580:	01400304 	movi	r5,12
    1584:	1809883a 	mov	r4,r3
    1588:	00012a80 	call	12a8 <draw_cube>
		//draw_cube(gpu, 250, -25+x, -10+y, depth);

		printf("Render ticks %d\n", clock() - start_time);
    158c:	00027b00 	call	27b0 <clock>
    1590:	1007883a 	mov	r3,r2
    1594:	e0bffe17 	ldw	r2,-8(fp)
    1598:	1885c83a 	sub	r2,r3,r2
    159c:	100b883a 	mov	r5,r2
    15a0:	01000074 	movhi	r4,1
    15a4:	210a3604 	addi	r4,r4,10456
    15a8:	00030600 	call	3060 <printf>
		start_time = clock();
    15ac:	00027b00 	call	27b0 <clock>
    15b0:	e0bffe15 	stw	r2,-8(fp)
		//usleep(10);
		//printf("swaping");
		swap_buffers();
    15b4:	000143c0 	call	143c <swap_buffers>

		loop_keyboard(&keycode);
    15b8:	e0bfff04 	addi	r2,fp,-4
    15bc:	1009883a 	mov	r4,r2
    15c0:	00004300 	call	430 <loop_keyboard>
		if(keycode == 79) {
    15c4:	e0bfff17 	ldw	r2,-4(fp)
    15c8:	108013d8 	cmpnei	r2,r2,79
    15cc:	1000041e 	bne	r2,zero,15e0 <main+0x15c>
			x += 5;
    15d0:	e0bff917 	ldw	r2,-28(fp)
    15d4:	10800144 	addi	r2,r2,5
    15d8:	e0bff915 	stw	r2,-28(fp)
    15dc:	003fce06 	br	1518 <__alt_exception_stack_pointer+0xf8001518>
		} else if (keycode == 80) {
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	10801418 	cmpnei	r2,r2,80
    15e8:	1000041e 	bne	r2,zero,15fc <main+0x178>
			x -= 5;
    15ec:	e0bff917 	ldw	r2,-28(fp)
    15f0:	10bffec4 	addi	r2,r2,-5
    15f4:	e0bff915 	stw	r2,-28(fp)
    15f8:	003fc706 	br	1518 <__alt_exception_stack_pointer+0xf8001518>
		} else if(keycode == 82) {
    15fc:	e0bfff17 	ldw	r2,-4(fp)
    1600:	10801498 	cmpnei	r2,r2,82
    1604:	1000041e 	bne	r2,zero,1618 <main+0x194>
			y -= 5;
    1608:	e0bffa17 	ldw	r2,-24(fp)
    160c:	10bffec4 	addi	r2,r2,-5
    1610:	e0bffa15 	stw	r2,-24(fp)
    1614:	003fc006 	br	1518 <__alt_exception_stack_pointer+0xf8001518>
		} else if(keycode == 81) {
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	10801458 	cmpnei	r2,r2,81
    1620:	103fbd1e 	bne	r2,zero,1518 <__alt_exception_stack_pointer+0xf8001518>
			y += 5;
    1624:	e0bffa17 	ldw	r2,-24(fp)
    1628:	10800144 	addi	r2,r2,5
    162c:	e0bffa15 	stw	r2,-24(fp)
		}

	}
    1630:	003fb906 	br	1518 <__alt_exception_stack_pointer+0xf8001518>

00001634 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1634:	defffc04 	addi	sp,sp,-16
    1638:	dfc00315 	stw	ra,12(sp)
    163c:	df000215 	stw	fp,8(sp)
    1640:	df000204 	addi	fp,sp,8
    1644:	2007883a 	mov	r3,r4
    1648:	2805883a 	mov	r2,r5
    164c:	e0fffe0d 	sth	r3,-8(fp)
    1650:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1654:	e0bffe0b 	ldhu	r2,-8(fp)
    1658:	100b883a 	mov	r5,r2
    165c:	01000084 	movi	r4,2
    1660:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    1664:	e0bfff0b 	ldhu	r2,-4(fp)
    1668:	100b883a 	mov	r5,r2
    166c:	0009883a 	mov	r4,zero
    1670:	00003280 	call	328 <IO_write>
}
    1674:	0001883a 	nop
    1678:	e037883a 	mov	sp,fp
    167c:	dfc00117 	ldw	ra,4(sp)
    1680:	df000017 	ldw	fp,0(sp)
    1684:	dec00204 	addi	sp,sp,8
    1688:	f800283a 	ret

0000168c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    168c:	defffd04 	addi	sp,sp,-12
    1690:	dfc00215 	stw	ra,8(sp)
    1694:	df000115 	stw	fp,4(sp)
    1698:	df000104 	addi	fp,sp,4
    169c:	2005883a 	mov	r2,r4
    16a0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    16a4:	e0bfff0b 	ldhu	r2,-4(fp)
    16a8:	100b883a 	mov	r5,r2
    16ac:	01000084 	movi	r4,2
    16b0:	00003280 	call	328 <IO_write>
	return IO_read(0);
    16b4:	0009883a 	mov	r4,zero
    16b8:	00003b00 	call	3b0 <IO_read>

}
    16bc:	e037883a 	mov	sp,fp
    16c0:	dfc00117 	ldw	ra,4(sp)
    16c4:	df000017 	ldw	fp,0(sp)
    16c8:	dec00204 	addi	sp,sp,8
    16cc:	f800283a 	ret

000016d0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    16d0:	defffe04 	addi	sp,sp,-8
    16d4:	dfc00115 	stw	ra,4(sp)
    16d8:	df000015 	stw	fp,0(sp)
    16dc:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    16e0:	017e9414 	movui	r5,64080
    16e4:	01000044 	movi	r4,1
    16e8:	00003280 	call	328 <IO_write>
	usleep(100000);
    16ec:	010000b4 	movhi	r4,2
    16f0:	2121a804 	addi	r4,r4,-31072
    16f4:	00100780 	call	10078 <usleep>
	printf("[USB INIT]:reset finished!\n");
    16f8:	01000074 	movhi	r4,1
    16fc:	210a3b04 	addi	r4,r4,10476
    1700:	000315c0 	call	315c <puts>

	usleep(500000);
    1704:	01000234 	movhi	r4,8
    1708:	21284804 	addi	r4,r4,-24288
    170c:	00100780 	call	10078 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1710:	01000074 	movhi	r4,1
    1714:	210a4204 	addi	r4,r4,10504
    1718:	000315c0 	call	315c <puts>
	IO_read(HPI_MAILBOX);
    171c:	01000044 	movi	r4,1
    1720:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1724:	010000c4 	movi	r4,3
    1728:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    172c:	01005104 	movi	r4,324
    1730:	000168c0 	call	168c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1734:	000b883a 	mov	r5,zero
    1738:	01005104 	movi	r4,324
    173c:	00016340 	call	1634 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1740:	01005204 	movi	r4,328
    1744:	000168c0 	call	168c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1748:	000b883a 	mov	r5,zero
    174c:	01005204 	movi	r4,328
    1750:	00016340 	call	1634 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1754:	017fffd4 	movui	r5,65535
    1758:	01302414 	movui	r4,49296
    175c:	00016340 	call	1634 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1760:	017fffd4 	movui	r5,65535
    1764:	01302c14 	movui	r4,49328
    1768:	00016340 	call	1634 <UsbWrite>
}
    176c:	0001883a 	nop
    1770:	e037883a 	mov	sp,fp
    1774:	dfc00117 	ldw	ra,4(sp)
    1778:	df000017 	ldw	fp,0(sp)
    177c:	dec00204 	addi	sp,sp,8
    1780:	f800283a 	ret

00001784 <UsbSetAddress>:


void UsbSetAddress()
{
    1784:	defffe04 	addi	sp,sp,-8
    1788:	dfc00115 	stw	ra,4(sp)
    178c:	df000015 	stw	fp,0(sp)
    1790:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1794:	01414004 	movi	r5,1280
    1798:	01000084 	movi	r4,2
    179c:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    17a0:	01414304 	movi	r5,1292
    17a4:	0009883a 	mov	r4,zero
    17a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    17ac:	01400204 	movi	r5,8
    17b0:	0009883a 	mov	r4,zero
    17b4:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    17b8:	01403404 	movi	r5,208
    17bc:	0009883a 	mov	r4,zero
    17c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    17c4:	01400044 	movi	r5,1
    17c8:	0009883a 	mov	r4,zero
    17cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    17d0:	014004c4 	movi	r5,19
    17d4:	0009883a 	mov	r4,zero
    17d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    17dc:	01414504 	movi	r5,1300
    17e0:	0009883a 	mov	r4,zero
    17e4:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    17e8:	01414004 	movi	r5,1280
    17ec:	0009883a 	mov	r4,zero
    17f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    17f4:	01400084 	movi	r5,2
    17f8:	0009883a 	mov	r4,zero
    17fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1800:	000b883a 	mov	r5,zero
    1804:	0009883a 	mov	r4,zero
    1808:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    180c:	000b883a 	mov	r5,zero
    1810:	0009883a 	mov	r4,zero
    1814:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1818:	000b883a 	mov	r5,zero
    181c:	0009883a 	mov	r4,zero
    1820:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1824:	000b883a 	mov	r5,zero
    1828:	0009883a 	mov	r4,zero
    182c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1830:	01402404 	movi	r5,144
    1834:	0009883a 	mov	r4,zero
    1838:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    183c:	01401044 	movi	r5,65
    1840:	0009883a 	mov	r4,zero
    1844:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1848:	014004c4 	movi	r5,19
    184c:	0009883a 	mov	r4,zero
    1850:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1854:	000b883a 	mov	r5,zero
    1858:	0009883a 	mov	r4,zero
    185c:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1860:	01414004 	movi	r5,1280
    1864:	01006c04 	movi	r4,432
    1868:	00016340 	call	1634 <UsbWrite>
}
    186c:	0001883a 	nop
    1870:	e037883a 	mov	sp,fp
    1874:	dfc00117 	ldw	ra,4(sp)
    1878:	df000017 	ldw	fp,0(sp)
    187c:	dec00204 	addi	sp,sp,8
    1880:	f800283a 	ret

00001884 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1884:	defffe04 	addi	sp,sp,-8
    1888:	dfc00115 	stw	ra,4(sp)
    188c:	df000015 	stw	fp,0(sp)
    1890:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1894:	01414004 	movi	r5,1280
    1898:	01000084 	movi	r4,2
    189c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    18a0:	01414304 	movi	r5,1292
    18a4:	0009883a 	mov	r4,zero
    18a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    18ac:	01400204 	movi	r5,8
    18b0:	0009883a 	mov	r4,zero
    18b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    18b8:	0140b404 	movi	r5,720
    18bc:	0009883a 	mov	r4,zero
    18c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    18c4:	01400044 	movi	r5,1
    18c8:	0009883a 	mov	r4,zero
    18cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    18d0:	014004c4 	movi	r5,19
    18d4:	0009883a 	mov	r4,zero
    18d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    18dc:	01414504 	movi	r5,1300
    18e0:	0009883a 	mov	r4,zero
    18e4:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    18e8:	0141a004 	movi	r5,1664
    18ec:	0009883a 	mov	r4,zero
    18f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    18f4:	01404004 	movi	r5,256
    18f8:	0009883a 	mov	r4,zero
    18fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1900:	000b883a 	mov	r5,zero
    1904:	0009883a 	mov	r4,zero
    1908:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    190c:	01400204 	movi	r5,8
    1910:	0009883a 	mov	r4,zero
    1914:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1918:	01414b04 	movi	r5,1324
    191c:	0009883a 	mov	r4,zero
    1920:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1924:	01400204 	movi	r5,8
    1928:	0009883a 	mov	r4,zero
    192c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1930:	0140a404 	movi	r5,656
    1934:	0009883a 	mov	r4,zero
    1938:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    193c:	01401044 	movi	r5,65
    1940:	0009883a 	mov	r4,zero
    1944:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1948:	014004c4 	movi	r5,19
    194c:	0009883a 	mov	r4,zero
    1950:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1954:	01414804 	movi	r5,1312
    1958:	0009883a 	mov	r4,zero
    195c:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1960:	000b883a 	mov	r5,zero
    1964:	0009883a 	mov	r4,zero
    1968:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    196c:	000b883a 	mov	r5,zero
    1970:	0009883a 	mov	r4,zero
    1974:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1978:	01408404 	movi	r5,528
    197c:	0009883a 	mov	r4,zero
    1980:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1984:	01401044 	movi	r5,65
    1988:	0009883a 	mov	r4,zero
    198c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1990:	014004c4 	movi	r5,19
    1994:	0009883a 	mov	r4,zero
    1998:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    199c:	000b883a 	mov	r5,zero
    19a0:	0009883a 	mov	r4,zero
    19a4:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    19a8:	01414004 	movi	r5,1280
    19ac:	01006c04 	movi	r4,432
    19b0:	00016340 	call	1634 <UsbWrite>
}
    19b4:	0001883a 	nop
    19b8:	e037883a 	mov	sp,fp
    19bc:	dfc00117 	ldw	ra,4(sp)
    19c0:	df000017 	ldw	fp,0(sp)
    19c4:	dec00204 	addi	sp,sp,8
    19c8:	f800283a 	ret

000019cc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    19cc:	defffe04 	addi	sp,sp,-8
    19d0:	dfc00115 	stw	ra,4(sp)
    19d4:	df000015 	stw	fp,0(sp)
    19d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    19dc:	01414004 	movi	r5,1280
    19e0:	01000084 	movi	r4,2
    19e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    19e8:	01414304 	movi	r5,1292
    19ec:	0009883a 	mov	r4,zero
    19f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    19f4:	01400204 	movi	r5,8
    19f8:	0009883a 	mov	r4,zero
    19fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a00:	0140b404 	movi	r5,720
    1a04:	0009883a 	mov	r4,zero
    1a08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a0c:	01400044 	movi	r5,1
    1a10:	0009883a 	mov	r4,zero
    1a14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a18:	014004c4 	movi	r5,19
    1a1c:	0009883a 	mov	r4,zero
    1a20:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1a24:	01414504 	movi	r5,1300
    1a28:	0009883a 	mov	r4,zero
    1a2c:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1a30:	0141a004 	movi	r5,1664
    1a34:	0009883a 	mov	r4,zero
    1a38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1a3c:	01404004 	movi	r5,256
    1a40:	0009883a 	mov	r4,zero
    1a44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1a48:	000b883a 	mov	r5,zero
    1a4c:	0009883a 	mov	r4,zero
    1a50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1a54:	01400484 	movi	r5,18
    1a58:	0009883a 	mov	r4,zero
    1a5c:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1a60:	01415104 	movi	r5,1348
    1a64:	0009883a 	mov	r4,zero
    1a68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1a6c:	01400204 	movi	r5,8
    1a70:	0009883a 	mov	r4,zero
    1a74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1a78:	0140a404 	movi	r5,656
    1a7c:	0009883a 	mov	r4,zero
    1a80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1a84:	01401044 	movi	r5,65
    1a88:	0009883a 	mov	r4,zero
    1a8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1a90:	014004c4 	movi	r5,19
    1a94:	0009883a 	mov	r4,zero
    1a98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1a9c:	01414804 	movi	r5,1312
    1aa0:	0009883a 	mov	r4,zero
    1aa4:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1aa8:	01415304 	movi	r5,1356
    1aac:	0009883a 	mov	r4,zero
    1ab0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1ab4:	01400204 	movi	r5,8
    1ab8:	0009883a 	mov	r4,zero
    1abc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1ac0:	0140a404 	movi	r5,656
    1ac4:	0009883a 	mov	r4,zero
    1ac8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1acc:	01400044 	movi	r5,1
    1ad0:	0009883a 	mov	r4,zero
    1ad4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1ad8:	014004c4 	movi	r5,19
    1adc:	0009883a 	mov	r4,zero
    1ae0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ae4:	01414b04 	movi	r5,1324
    1ae8:	0009883a 	mov	r4,zero
    1aec:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1af0:	01415504 	movi	r5,1364
    1af4:	0009883a 	mov	r4,zero
    1af8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1afc:	01400084 	movi	r5,2
    1b00:	0009883a 	mov	r4,zero
    1b04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1b08:	0140a404 	movi	r5,656
    1b0c:	0009883a 	mov	r4,zero
    1b10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1b14:	01401044 	movi	r5,65
    1b18:	0009883a 	mov	r4,zero
    1b1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1b20:	014004c4 	movi	r5,19
    1b24:	0009883a 	mov	r4,zero
    1b28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1b2c:	01414e04 	movi	r5,1336
    1b30:	0009883a 	mov	r4,zero
    1b34:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1b38:	000b883a 	mov	r5,zero
    1b3c:	0009883a 	mov	r4,zero
    1b40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1b44:	000b883a 	mov	r5,zero
    1b48:	0009883a 	mov	r4,zero
    1b4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1b50:	01408404 	movi	r5,528
    1b54:	0009883a 	mov	r4,zero
    1b58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1b5c:	01401044 	movi	r5,65
    1b60:	0009883a 	mov	r4,zero
    1b64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1b68:	014004c4 	movi	r5,19
    1b6c:	0009883a 	mov	r4,zero
    1b70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1b74:	000b883a 	mov	r5,zero
    1b78:	0009883a 	mov	r4,zero
    1b7c:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b80:	01414004 	movi	r5,1280
    1b84:	01006c04 	movi	r4,432
    1b88:	00016340 	call	1634 <UsbWrite>
}
    1b8c:	0001883a 	nop
    1b90:	e037883a 	mov	sp,fp
    1b94:	dfc00117 	ldw	ra,4(sp)
    1b98:	df000017 	ldw	fp,0(sp)
    1b9c:	dec00204 	addi	sp,sp,8
    1ba0:	f800283a 	ret

00001ba4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1ba4:	defffe04 	addi	sp,sp,-8
    1ba8:	dfc00115 	stw	ra,4(sp)
    1bac:	df000015 	stw	fp,0(sp)
    1bb0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1bb4:	01414004 	movi	r5,1280
    1bb8:	01000084 	movi	r4,2
    1bbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1bc0:	01414304 	movi	r5,1292
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1bcc:	01400204 	movi	r5,8
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1bd8:	0140b404 	movi	r5,720
    1bdc:	0009883a 	mov	r4,zero
    1be0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1be4:	01400044 	movi	r5,1
    1be8:	0009883a 	mov	r4,zero
    1bec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bf0:	014004c4 	movi	r5,19
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bfc:	01414504 	movi	r5,1300
    1c00:	0009883a 	mov	r4,zero
    1c04:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1c08:	0141a004 	movi	r5,1664
    1c0c:	0009883a 	mov	r4,zero
    1c10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1c14:	01408004 	movi	r5,512
    1c18:	0009883a 	mov	r4,zero
    1c1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1c20:	000b883a 	mov	r5,zero
    1c24:	0009883a 	mov	r4,zero
    1c28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1c2c:	01400244 	movi	r5,9
    1c30:	0009883a 	mov	r4,zero
    1c34:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1c38:	01415104 	movi	r5,1348
    1c3c:	0009883a 	mov	r4,zero
    1c40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1c44:	01400204 	movi	r5,8
    1c48:	0009883a 	mov	r4,zero
    1c4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1c50:	0140a404 	movi	r5,656
    1c54:	0009883a 	mov	r4,zero
    1c58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1c5c:	01401044 	movi	r5,65
    1c60:	0009883a 	mov	r4,zero
    1c64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1c68:	014004c4 	movi	r5,19
    1c6c:	0009883a 	mov	r4,zero
    1c70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1c74:	01414804 	movi	r5,1312
    1c78:	0009883a 	mov	r4,zero
    1c7c:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1c80:	01415304 	movi	r5,1356
    1c84:	0009883a 	mov	r4,zero
    1c88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1c8c:	01400044 	movi	r5,1
    1c90:	0009883a 	mov	r4,zero
    1c94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1c98:	0140a404 	movi	r5,656
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1ca4:	01400044 	movi	r5,1
    1ca8:	0009883a 	mov	r4,zero
    1cac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1cb0:	014004c4 	movi	r5,19
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1cbc:	01414b04 	movi	r5,1324
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1cc8:	000b883a 	mov	r5,zero
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1cd4:	000b883a 	mov	r5,zero
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1ce0:	01408404 	movi	r5,528
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1cec:	01401044 	movi	r5,65
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1cf8:	014004c4 	movi	r5,19
    1cfc:	0009883a 	mov	r4,zero
    1d00:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1d04:	000b883a 	mov	r5,zero
    1d08:	0009883a 	mov	r4,zero
    1d0c:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d10:	01414004 	movi	r5,1280
    1d14:	01006c04 	movi	r4,432
    1d18:	00016340 	call	1634 <UsbWrite>
}
    1d1c:	0001883a 	nop
    1d20:	e037883a 	mov	sp,fp
    1d24:	dfc00117 	ldw	ra,4(sp)
    1d28:	df000017 	ldw	fp,0(sp)
    1d2c:	dec00204 	addi	sp,sp,8
    1d30:	f800283a 	ret

00001d34 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1d34:	defffe04 	addi	sp,sp,-8
    1d38:	dfc00115 	stw	ra,4(sp)
    1d3c:	df000015 	stw	fp,0(sp)
    1d40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d44:	01414004 	movi	r5,1280
    1d48:	01000084 	movi	r4,2
    1d4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d50:	01414304 	movi	r5,1292
    1d54:	0009883a 	mov	r4,zero
    1d58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d5c:	01400204 	movi	r5,8
    1d60:	0009883a 	mov	r4,zero
    1d64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d68:	0140b404 	movi	r5,720
    1d6c:	0009883a 	mov	r4,zero
    1d70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d74:	01400044 	movi	r5,1
    1d78:	0009883a 	mov	r4,zero
    1d7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d80:	014004c4 	movi	r5,19
    1d84:	0009883a 	mov	r4,zero
    1d88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d8c:	01414504 	movi	r5,1300
    1d90:	0009883a 	mov	r4,zero
    1d94:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1d98:	0141a004 	movi	r5,1664
    1d9c:	0009883a 	mov	r4,zero
    1da0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1da4:	01408004 	movi	r5,512
    1da8:	0009883a 	mov	r4,zero
    1dac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1db0:	000b883a 	mov	r5,zero
    1db4:	0009883a 	mov	r4,zero
    1db8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1dbc:	01403fc4 	movi	r5,255
    1dc0:	0009883a 	mov	r4,zero
    1dc4:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1dc8:	01415704 	movi	r5,1372
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1dd4:	01400204 	movi	r5,8
    1dd8:	0009883a 	mov	r4,zero
    1ddc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1de0:	0140a404 	movi	r5,656
    1de4:	0009883a 	mov	r4,zero
    1de8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1dec:	01401044 	movi	r5,65
    1df0:	0009883a 	mov	r4,zero
    1df4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1df8:	014004c4 	movi	r5,19
    1dfc:	0009883a 	mov	r4,zero
    1e00:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e04:	01414804 	movi	r5,1312
    1e08:	0009883a 	mov	r4,zero
    1e0c:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1e10:	01415904 	movi	r5,1380
    1e14:	0009883a 	mov	r4,zero
    1e18:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1e1c:	01400204 	movi	r5,8
    1e20:	0009883a 	mov	r4,zero
    1e24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1e28:	0140a404 	movi	r5,656
    1e2c:	0009883a 	mov	r4,zero
    1e30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1e34:	01400044 	movi	r5,1
    1e38:	0009883a 	mov	r4,zero
    1e3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e40:	014004c4 	movi	r5,19
    1e44:	0009883a 	mov	r4,zero
    1e48:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1e4c:	01414b04 	movi	r5,1324
    1e50:	0009883a 	mov	r4,zero
    1e54:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1e58:	01415b04 	movi	r5,1388
    1e5c:	0009883a 	mov	r4,zero
    1e60:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1e64:	01400204 	movi	r5,8
    1e68:	0009883a 	mov	r4,zero
    1e6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1e70:	0140a404 	movi	r5,656
    1e74:	0009883a 	mov	r4,zero
    1e78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1e7c:	01401044 	movi	r5,65
    1e80:	0009883a 	mov	r4,zero
    1e84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1e88:	014004c4 	movi	r5,19
    1e8c:	0009883a 	mov	r4,zero
    1e90:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1e94:	01414e04 	movi	r5,1336
    1e98:	0009883a 	mov	r4,zero
    1e9c:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1ea0:	01415d04 	movi	r5,1396
    1ea4:	0009883a 	mov	r4,zero
    1ea8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1eac:	01400204 	movi	r5,8
    1eb0:	0009883a 	mov	r4,zero
    1eb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1eb8:	0140a404 	movi	r5,656
    1ebc:	0009883a 	mov	r4,zero
    1ec0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1ec4:	01400044 	movi	r5,1
    1ec8:	0009883a 	mov	r4,zero
    1ecc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1ed0:	014004c4 	movi	r5,19
    1ed4:	0009883a 	mov	r4,zero
    1ed8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1edc:	01415104 	movi	r5,1348
    1ee0:	0009883a 	mov	r4,zero
    1ee4:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    1ee8:	01415f04 	movi	r5,1404
    1eec:	0009883a 	mov	r4,zero
    1ef0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    1ef4:	01400084 	movi	r5,2
    1ef8:	0009883a 	mov	r4,zero
    1efc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f00:	0140a404 	movi	r5,656
    1f04:	0009883a 	mov	r4,zero
    1f08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1f0c:	01401044 	movi	r5,65
    1f10:	0009883a 	mov	r4,zero
    1f14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f18:	014004c4 	movi	r5,19
    1f1c:	0009883a 	mov	r4,zero
    1f20:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1f24:	01415404 	movi	r5,1360
    1f28:	0009883a 	mov	r4,zero
    1f2c:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1f30:	000b883a 	mov	r5,zero
    1f34:	0009883a 	mov	r4,zero
    1f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1f3c:	000b883a 	mov	r5,zero
    1f40:	0009883a 	mov	r4,zero
    1f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1f48:	01408404 	movi	r5,528
    1f4c:	0009883a 	mov	r4,zero
    1f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1f54:	01401044 	movi	r5,65
    1f58:	0009883a 	mov	r4,zero
    1f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f60:	014004c4 	movi	r5,19
    1f64:	0009883a 	mov	r4,zero
    1f68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1f6c:	000b883a 	mov	r5,zero
    1f70:	0009883a 	mov	r4,zero
    1f74:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1f78:	01414004 	movi	r5,1280
    1f7c:	01006c04 	movi	r4,432
    1f80:	00016340 	call	1634 <UsbWrite>
}
    1f84:	0001883a 	nop
    1f88:	e037883a 	mov	sp,fp
    1f8c:	dfc00117 	ldw	ra,4(sp)
    1f90:	df000017 	ldw	fp,0(sp)
    1f94:	dec00204 	addi	sp,sp,8
    1f98:	f800283a 	ret

00001f9c <UsbSetConfig>:

void UsbSetConfig()
{
    1f9c:	defffe04 	addi	sp,sp,-8
    1fa0:	dfc00115 	stw	ra,4(sp)
    1fa4:	df000015 	stw	fp,0(sp)
    1fa8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1fac:	01414004 	movi	r5,1280
    1fb0:	01000084 	movi	r4,2
    1fb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1fb8:	01414304 	movi	r5,1292
    1fbc:	0009883a 	mov	r4,zero
    1fc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1fc4:	01400204 	movi	r5,8
    1fc8:	0009883a 	mov	r4,zero
    1fcc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1fd0:	0140b404 	movi	r5,720
    1fd4:	0009883a 	mov	r4,zero
    1fd8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1fdc:	01400044 	movi	r5,1
    1fe0:	0009883a 	mov	r4,zero
    1fe4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1fe8:	014004c4 	movi	r5,19
    1fec:	0009883a 	mov	r4,zero
    1ff0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ff4:	01414504 	movi	r5,1300
    1ff8:	0009883a 	mov	r4,zero
    1ffc:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    2000:	01424004 	movi	r5,2304
    2004:	0009883a 	mov	r4,zero
    2008:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    200c:	01400044 	movi	r5,1
    2010:	0009883a 	mov	r4,zero
    2014:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2018:	000b883a 	mov	r5,zero
    201c:	0009883a 	mov	r4,zero
    2020:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2024:	000b883a 	mov	r5,zero
    2028:	0009883a 	mov	r4,zero
    202c:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2030:	000b883a 	mov	r5,zero
    2034:	0009883a 	mov	r4,zero
    2038:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    203c:	000b883a 	mov	r5,zero
    2040:	0009883a 	mov	r4,zero
    2044:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2048:	0140a404 	movi	r5,656
    204c:	0009883a 	mov	r4,zero
    2050:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2054:	01401044 	movi	r5,65
    2058:	0009883a 	mov	r4,zero
    205c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2060:	014004c4 	movi	r5,19
    2064:	0009883a 	mov	r4,zero
    2068:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    206c:	000b883a 	mov	r5,zero
    2070:	0009883a 	mov	r4,zero
    2074:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2078:	01414004 	movi	r5,1280
    207c:	01006c04 	movi	r4,432
    2080:	00016340 	call	1634 <UsbWrite>

}
    2084:	0001883a 	nop
    2088:	e037883a 	mov	sp,fp
    208c:	dfc00117 	ldw	ra,4(sp)
    2090:	df000017 	ldw	fp,0(sp)
    2094:	dec00204 	addi	sp,sp,8
    2098:	f800283a 	ret

0000209c <UsbClassRequest>:

void UsbClassRequest()
{
    209c:	defffe04 	addi	sp,sp,-8
    20a0:	dfc00115 	stw	ra,4(sp)
    20a4:	df000015 	stw	fp,0(sp)
    20a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    20ac:	01414004 	movi	r5,1280
    20b0:	01000084 	movi	r4,2
    20b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    20b8:	01414304 	movi	r5,1292
    20bc:	0009883a 	mov	r4,zero
    20c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    20c4:	01400204 	movi	r5,8
    20c8:	0009883a 	mov	r4,zero
    20cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    20d0:	0140b404 	movi	r5,720
    20d4:	0009883a 	mov	r4,zero
    20d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    20dc:	01400044 	movi	r5,1
    20e0:	0009883a 	mov	r4,zero
    20e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20e8:	014004c4 	movi	r5,19
    20ec:	0009883a 	mov	r4,zero
    20f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    20f4:	01414504 	movi	r5,1300
    20f8:	0009883a 	mov	r4,zero
    20fc:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2100:	01428844 	movi	r5,2593
    2104:	0009883a 	mov	r4,zero
    2108:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    210c:	000b883a 	mov	r5,zero
    2110:	0009883a 	mov	r4,zero
    2114:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2118:	000b883a 	mov	r5,zero
    211c:	0009883a 	mov	r4,zero
    2120:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2124:	000b883a 	mov	r5,zero
    2128:	0009883a 	mov	r4,zero
    212c:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2130:	000b883a 	mov	r5,zero
    2134:	0009883a 	mov	r4,zero
    2138:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    213c:	000b883a 	mov	r5,zero
    2140:	0009883a 	mov	r4,zero
    2144:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2148:	0140a404 	movi	r5,656
    214c:	0009883a 	mov	r4,zero
    2150:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2154:	01401044 	movi	r5,65
    2158:	0009883a 	mov	r4,zero
    215c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2160:	014004c4 	movi	r5,19
    2164:	0009883a 	mov	r4,zero
    2168:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    216c:	000b883a 	mov	r5,zero
    2170:	0009883a 	mov	r4,zero
    2174:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2178:	01414004 	movi	r5,1280
    217c:	01006c04 	movi	r4,432
    2180:	00016340 	call	1634 <UsbWrite>
}
    2184:	0001883a 	nop
    2188:	e037883a 	mov	sp,fp
    218c:	dfc00117 	ldw	ra,4(sp)
    2190:	df000017 	ldw	fp,0(sp)
    2194:	dec00204 	addi	sp,sp,8
    2198:	f800283a 	ret

0000219c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    219c:	defffe04 	addi	sp,sp,-8
    21a0:	dfc00115 	stw	ra,4(sp)
    21a4:	df000015 	stw	fp,0(sp)
    21a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    21ac:	01414004 	movi	r5,1280
    21b0:	01000084 	movi	r4,2
    21b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    21b8:	01414304 	movi	r5,1292
    21bc:	0009883a 	mov	r4,zero
    21c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    21c4:	01400204 	movi	r5,8
    21c8:	0009883a 	mov	r4,zero
    21cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    21d0:	0140b404 	movi	r5,720
    21d4:	0009883a 	mov	r4,zero
    21d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    21dc:	01400044 	movi	r5,1
    21e0:	0009883a 	mov	r4,zero
    21e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21e8:	014004c4 	movi	r5,19
    21ec:	0009883a 	mov	r4,zero
    21f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    21f4:	01414504 	movi	r5,1300
    21f8:	0009883a 	mov	r4,zero
    21fc:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2200:	0141a044 	movi	r5,1665
    2204:	0009883a 	mov	r4,zero
    2208:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    220c:	01484004 	movi	r5,8448
    2210:	0009883a 	mov	r4,zero
    2214:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2218:	000b883a 	mov	r5,zero
    221c:	0009883a 	mov	r4,zero
    2220:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2224:	01401ec4 	movi	r5,123
    2228:	0009883a 	mov	r4,zero
    222c:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2230:	01415104 	movi	r5,1348
    2234:	0009883a 	mov	r4,zero
    2238:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    223c:	01400204 	movi	r5,8
    2240:	0009883a 	mov	r4,zero
    2244:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2248:	0140a404 	movi	r5,656
    224c:	0009883a 	mov	r4,zero
    2250:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2254:	01401044 	movi	r5,65
    2258:	0009883a 	mov	r4,zero
    225c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2260:	014004c4 	movi	r5,19
    2264:	0009883a 	mov	r4,zero
    2268:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    226c:	01414804 	movi	r5,1312
    2270:	0009883a 	mov	r4,zero
    2274:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2278:	000b883a 	mov	r5,zero
    227c:	0009883a 	mov	r4,zero
    2280:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2284:	000b883a 	mov	r5,zero
    2288:	0009883a 	mov	r4,zero
    228c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2290:	01408404 	movi	r5,528
    2294:	0009883a 	mov	r4,zero
    2298:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    229c:	01401044 	movi	r5,65
    22a0:	0009883a 	mov	r4,zero
    22a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    22a8:	014004c4 	movi	r5,19
    22ac:	0009883a 	mov	r4,zero
    22b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    22b4:	000b883a 	mov	r5,zero
    22b8:	0009883a 	mov	r4,zero
    22bc:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22c0:	01414004 	movi	r5,1280
    22c4:	01006c04 	movi	r4,432
    22c8:	00016340 	call	1634 <UsbWrite>

}
    22cc:	0001883a 	nop
    22d0:	e037883a 	mov	sp,fp
    22d4:	dfc00117 	ldw	ra,4(sp)
    22d8:	df000017 	ldw	fp,0(sp)
    22dc:	dec00204 	addi	sp,sp,8
    22e0:	f800283a 	ret

000022e4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    22e4:	defffe04 	addi	sp,sp,-8
    22e8:	dfc00115 	stw	ra,4(sp)
    22ec:	df000015 	stw	fp,0(sp)
    22f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    22f4:	01414004 	movi	r5,1280
    22f8:	01000084 	movi	r4,2
    22fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2300:	01414304 	movi	r5,1292
    2304:	0009883a 	mov	r4,zero
    2308:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    230c:	01400204 	movi	r5,8
    2310:	0009883a 	mov	r4,zero
    2314:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2318:	0140b404 	movi	r5,720
    231c:	0009883a 	mov	r4,zero
    2320:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2324:	01400044 	movi	r5,1
    2328:	0009883a 	mov	r4,zero
    232c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2330:	014004c4 	movi	r5,19
    2334:	0009883a 	mov	r4,zero
    2338:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    233c:	01414504 	movi	r5,1300
    2340:	0009883a 	mov	r4,zero
    2344:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2348:	0141a044 	movi	r5,1665
    234c:	0009883a 	mov	r4,zero
    2350:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2354:	01488004 	movi	r5,8704
    2358:	0009883a 	mov	r4,zero
    235c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2360:	000b883a 	mov	r5,zero
    2364:	0009883a 	mov	r4,zero
    2368:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    236c:	01401ec4 	movi	r5,123
    2370:	0009883a 	mov	r4,zero
    2374:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2378:	01416004 	movi	r5,1408
    237c:	0009883a 	mov	r4,zero
    2380:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2384:	01400204 	movi	r5,8
    2388:	0009883a 	mov	r4,zero
    238c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2390:	0140a404 	movi	r5,656
    2394:	0009883a 	mov	r4,zero
    2398:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    239c:	01401044 	movi	r5,65
    23a0:	0009883a 	mov	r4,zero
    23a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23a8:	014004c4 	movi	r5,19
    23ac:	0009883a 	mov	r4,zero
    23b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    23b4:	01414804 	movi	r5,1312
    23b8:	0009883a 	mov	r4,zero
    23bc:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    23c0:	01416204 	movi	r5,1416
    23c4:	0009883a 	mov	r4,zero
    23c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    23cc:	01400204 	movi	r5,8
    23d0:	0009883a 	mov	r4,zero
    23d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    23d8:	0140a404 	movi	r5,656
    23dc:	0009883a 	mov	r4,zero
    23e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    23e4:	01400044 	movi	r5,1
    23e8:	0009883a 	mov	r4,zero
    23ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    23f0:	014004c4 	movi	r5,19
    23f4:	0009883a 	mov	r4,zero
    23f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    23fc:	01414b04 	movi	r5,1324
    2400:	0009883a 	mov	r4,zero
    2404:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2408:	01416404 	movi	r5,1424
    240c:	0009883a 	mov	r4,zero
    2410:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2414:	01400204 	movi	r5,8
    2418:	0009883a 	mov	r4,zero
    241c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2420:	0140a404 	movi	r5,656
    2424:	0009883a 	mov	r4,zero
    2428:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    242c:	01401044 	movi	r5,65
    2430:	0009883a 	mov	r4,zero
    2434:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2438:	014004c4 	movi	r5,19
    243c:	0009883a 	mov	r4,zero
    2440:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2444:	01414e04 	movi	r5,1336
    2448:	0009883a 	mov	r4,zero
    244c:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2450:	01416604 	movi	r5,1432
    2454:	0009883a 	mov	r4,zero
    2458:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    245c:	01400204 	movi	r5,8
    2460:	0009883a 	mov	r4,zero
    2464:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2468:	0140a404 	movi	r5,656
    246c:	0009883a 	mov	r4,zero
    2470:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2474:	01400044 	movi	r5,1
    2478:	0009883a 	mov	r4,zero
    247c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2480:	014004c4 	movi	r5,19
    2484:	0009883a 	mov	r4,zero
    2488:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    248c:	01415104 	movi	r5,1348
    2490:	0009883a 	mov	r4,zero
    2494:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2498:	01416804 	movi	r5,1440
    249c:	0009883a 	mov	r4,zero
    24a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    24a4:	01400204 	movi	r5,8
    24a8:	0009883a 	mov	r4,zero
    24ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    24b0:	0140a404 	movi	r5,656
    24b4:	0009883a 	mov	r4,zero
    24b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    24bc:	01401044 	movi	r5,65
    24c0:	0009883a 	mov	r4,zero
    24c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    24c8:	014004c4 	movi	r5,19
    24cc:	0009883a 	mov	r4,zero
    24d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    24d4:	01415404 	movi	r5,1360
    24d8:	0009883a 	mov	r4,zero
    24dc:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    24e0:	01416a04 	movi	r5,1448
    24e4:	0009883a 	mov	r4,zero
    24e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    24ec:	01400204 	movi	r5,8
    24f0:	0009883a 	mov	r4,zero
    24f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    24f8:	0140a404 	movi	r5,656
    24fc:	0009883a 	mov	r4,zero
    2500:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2504:	01400044 	movi	r5,1
    2508:	0009883a 	mov	r4,zero
    250c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2510:	014004c4 	movi	r5,19
    2514:	0009883a 	mov	r4,zero
    2518:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    251c:	01415704 	movi	r5,1372
    2520:	0009883a 	mov	r4,zero
    2524:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2528:	01416c04 	movi	r5,1456
    252c:	0009883a 	mov	r4,zero
    2530:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2534:	01400204 	movi	r5,8
    2538:	0009883a 	mov	r4,zero
    253c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2540:	0140a404 	movi	r5,656
    2544:	0009883a 	mov	r4,zero
    2548:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    254c:	01401044 	movi	r5,65
    2550:	0009883a 	mov	r4,zero
    2554:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2558:	014004c4 	movi	r5,19
    255c:	0009883a 	mov	r4,zero
    2560:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2564:	01415a04 	movi	r5,1384
    2568:	0009883a 	mov	r4,zero
    256c:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2570:	01416e04 	movi	r5,1464
    2574:	0009883a 	mov	r4,zero
    2578:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    257c:	014000c4 	movi	r5,3
    2580:	0009883a 	mov	r4,zero
    2584:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2588:	0140a404 	movi	r5,656
    258c:	0009883a 	mov	r4,zero
    2590:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2594:	01400044 	movi	r5,1
    2598:	0009883a 	mov	r4,zero
    259c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    25a0:	014004c4 	movi	r5,19
    25a4:	0009883a 	mov	r4,zero
    25a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    25ac:	01415d04 	movi	r5,1396
    25b0:	0009883a 	mov	r4,zero
    25b4:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    25b8:	000b883a 	mov	r5,zero
    25bc:	0009883a 	mov	r4,zero
    25c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    25c4:	000b883a 	mov	r5,zero
    25c8:	0009883a 	mov	r4,zero
    25cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    25d0:	01408404 	movi	r5,528
    25d4:	0009883a 	mov	r4,zero
    25d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    25dc:	01401044 	movi	r5,65
    25e0:	0009883a 	mov	r4,zero
    25e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    25e8:	014004c4 	movi	r5,19
    25ec:	0009883a 	mov	r4,zero
    25f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    25f4:	000b883a 	mov	r5,zero
    25f8:	0009883a 	mov	r4,zero
    25fc:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2600:	01414004 	movi	r5,1280
    2604:	01006c04 	movi	r4,432
    2608:	00016340 	call	1634 <UsbWrite>

}
    260c:	0001883a 	nop
    2610:	e037883a 	mov	sp,fp
    2614:	dfc00117 	ldw	ra,4(sp)
    2618:	df000017 	ldw	fp,0(sp)
    261c:	dec00204 	addi	sp,sp,8
    2620:	f800283a 	ret

00002624 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2624:	defffd04 	addi	sp,sp,-12
    2628:	dfc00215 	stw	ra,8(sp)
    262c:	df000115 	stw	fp,4(sp)
    2630:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2634:	01005104 	movi	r4,324
    2638:	000168c0 	call	168c <UsbRead>
    263c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2640:	000b883a 	mov	r5,zero
    2644:	01005104 	movi	r4,324
    2648:	00016340 	call	1634 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    264c:	00000d06 	br	2684 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2650:	e0bfff0b 	ldhu	r2,-4(fp)
    2654:	10000526 	beq	r2,zero,266c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2658:	e0bfff0b 	ldhu	r2,-4(fp)
    265c:	100b883a 	mov	r5,r2
    2660:	01000074 	movhi	r4,1
    2664:	210a4b04 	addi	r4,r4,10540
    2668:	00030600 	call	3060 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    266c:	01005104 	movi	r4,324
    2670:	000168c0 	call	168c <UsbRead>
    2674:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2678:	000b883a 	mov	r5,zero
    267c:	01005104 	movi	r4,324
    2680:	00016340 	call	1634 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2684:	e0bfff0b 	ldhu	r2,-4(fp)
    2688:	10840018 	cmpnei	r2,r2,4096
    268c:	103ff01e 	bne	r2,zero,2650 <__alt_exception_stack_pointer+0xf8002650>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2690:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2694:	e037883a 	mov	sp,fp
    2698:	dfc00117 	ldw	ra,4(sp)
    269c:	df000017 	ldw	fp,0(sp)
    26a0:	dec00204 	addi	sp,sp,8
    26a4:	f800283a 	ret

000026a8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    26a8:	defffd04 	addi	sp,sp,-12
    26ac:	dfc00215 	stw	ra,8(sp)
    26b0:	df000115 	stw	fp,4(sp)
    26b4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    26b8:	010000c4 	movi	r4,3
    26bc:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    26c0:	01005104 	movi	r4,324
    26c4:	000168c0 	call	168c <UsbRead>
    26c8:	10bfffcc 	andi	r2,r2,65535
    26cc:	10840018 	cmpnei	r2,r2,4096
    26d0:	1000091e 	bne	r2,zero,26f8 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    26d4:	000b883a 	mov	r5,zero
    26d8:	01005104 	movi	r4,324
    26dc:	00016340 	call	1634 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    26e0:	0001883a 	nop
    26e4:	010000c4 	movi	r4,3
    26e8:	00003b00 	call	3b0 <IO_read>
    26ec:	10bfffcc 	andi	r2,r2,65535
    26f0:	1080040c 	andi	r2,r2,16
    26f4:	103ffb26 	beq	r2,zero,26e4 <__alt_exception_stack_pointer+0xf80026e4>
		{
		}
	}
	usleep(1000);
    26f8:	0100fa04 	movi	r4,1000
    26fc:	00100780 	call	10078 <usleep>
	IO_write(HPI_ADDR,0x0508);
    2700:	01414204 	movi	r5,1288
    2704:	01000084 	movi	r4,2
    2708:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    270c:	0009883a 	mov	r4,zero
    2710:	00003b00 	call	3b0 <IO_read>
    2714:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2718:	e0bfff0b 	ldhu	r2,-4(fp)
}
    271c:	e037883a 	mov	sp,fp
    2720:	dfc00117 	ldw	ra,4(sp)
    2724:	df000017 	ldw	fp,0(sp)
    2728:	dec00204 	addi	sp,sp,8
    272c:	f800283a 	ret

00002730 <UsbPrintMem>:


void UsbPrintMem()
{
    2730:	defffc04 	addi	sp,sp,-16
    2734:	dfc00315 	stw	ra,12(sp)
    2738:	df000215 	stw	fp,8(sp)
    273c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2740:	01414004 	movi	r5,1280
    2744:	01000084 	movi	r4,2
    2748:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    274c:	e03ffe15 	stw	zero,-8(fp)
    2750:	00000e06 	br	278c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2754:	0009883a 	mov	r4,zero
    2758:	00003b00 	call	3b0 <IO_read>
    275c:	10bfffcc 	andi	r2,r2,65535
    2760:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2764:	e0bffe17 	ldw	r2,-8(fp)
    2768:	10814004 	addi	r2,r2,1280
    276c:	e1bfff17 	ldw	r6,-4(fp)
    2770:	100b883a 	mov	r5,r2
    2774:	01000074 	movhi	r4,1
    2778:	210a5304 	addi	r4,r4,10572
    277c:	00030600 	call	3060 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2780:	e0bffe17 	ldw	r2,-8(fp)
    2784:	10800084 	addi	r2,r2,2
    2788:	e0bffe15 	stw	r2,-8(fp)
    278c:	e0bffe17 	ldw	r2,-8(fp)
    2790:	10803250 	cmplti	r2,r2,201
    2794:	103fef1e 	bne	r2,zero,2754 <__alt_exception_stack_pointer+0xf8002754>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2798:	0001883a 	nop
    279c:	e037883a 	mov	sp,fp
    27a0:	dfc00117 	ldw	ra,4(sp)
    27a4:	df000017 	ldw	fp,0(sp)
    27a8:	dec00204 	addi	sp,sp,8
    27ac:	f800283a 	ret

000027b0 <clock>:
    27b0:	00800074 	movhi	r2,1
    27b4:	1091c904 	addi	r2,r2,18212
    27b8:	11000017 	ldw	r4,0(r2)
    27bc:	defffb04 	addi	sp,sp,-20
    27c0:	d80b883a 	mov	r5,sp
    27c4:	dfc00415 	stw	ra,16(sp)
    27c8:	000325c0 	call	325c <_times_r>
    27cc:	00ffffc4 	movi	r3,-1
    27d0:	10c00726 	beq	r2,r3,27f0 <clock+0x40>
    27d4:	d8c00017 	ldw	r3,0(sp)
    27d8:	d8800117 	ldw	r2,4(sp)
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	d8c00217 	ldw	r3,8(sp)
    27e4:	10c7883a 	add	r3,r2,r3
    27e8:	d8800317 	ldw	r2,12(sp)
    27ec:	1885883a 	add	r2,r3,r2
    27f0:	dfc00417 	ldw	ra,16(sp)
    27f4:	dec00504 	addi	sp,sp,20
    27f8:	f800283a 	ret

000027fc <malloc>:
    27fc:	00800074 	movhi	r2,1
    2800:	1091c904 	addi	r2,r2,18212
    2804:	200b883a 	mov	r5,r4
    2808:	11000017 	ldw	r4,0(r2)
    280c:	00028241 	jmpi	2824 <_malloc_r>

00002810 <free>:
    2810:	00800074 	movhi	r2,1
    2814:	1091c904 	addi	r2,r2,18212
    2818:	200b883a 	mov	r5,r4
    281c:	11000017 	ldw	r4,0(r2)
    2820:	00077981 	jmpi	7798 <_free_r>

00002824 <_malloc_r>:
    2824:	defff504 	addi	sp,sp,-44
    2828:	dc800315 	stw	r18,12(sp)
    282c:	dfc00a15 	stw	ra,40(sp)
    2830:	df000915 	stw	fp,36(sp)
    2834:	ddc00815 	stw	r23,32(sp)
    2838:	dd800715 	stw	r22,28(sp)
    283c:	dd400615 	stw	r21,24(sp)
    2840:	dd000515 	stw	r20,20(sp)
    2844:	dcc00415 	stw	r19,16(sp)
    2848:	dc400215 	stw	r17,8(sp)
    284c:	dc000115 	stw	r16,4(sp)
    2850:	288002c4 	addi	r2,r5,11
    2854:	00c00584 	movi	r3,22
    2858:	2025883a 	mov	r18,r4
    285c:	18807f2e 	bgeu	r3,r2,2a5c <_malloc_r+0x238>
    2860:	047ffe04 	movi	r17,-8
    2864:	1462703a 	and	r17,r2,r17
    2868:	8800a316 	blt	r17,zero,2af8 <_malloc_r+0x2d4>
    286c:	8940a236 	bltu	r17,r5,2af8 <_malloc_r+0x2d4>
    2870:	000fd080 	call	fd08 <__malloc_lock>
    2874:	00807dc4 	movi	r2,503
    2878:	1441e92e 	bgeu	r2,r17,3020 <_malloc_r+0x7fc>
    287c:	8804d27a 	srli	r2,r17,9
    2880:	1000a126 	beq	r2,zero,2b08 <_malloc_r+0x2e4>
    2884:	00c00104 	movi	r3,4
    2888:	18811e36 	bltu	r3,r2,2d04 <_malloc_r+0x4e0>
    288c:	8804d1ba 	srli	r2,r17,6
    2890:	12000e44 	addi	r8,r2,57
    2894:	11c00e04 	addi	r7,r2,56
    2898:	4209883a 	add	r4,r8,r8
    289c:	04c00074 	movhi	r19,1
    28a0:	2109883a 	add	r4,r4,r4
    28a4:	9ccc2404 	addi	r19,r19,12432
    28a8:	2109883a 	add	r4,r4,r4
    28ac:	9909883a 	add	r4,r19,r4
    28b0:	24000117 	ldw	r16,4(r4)
    28b4:	213ffe04 	addi	r4,r4,-8
    28b8:	24009726 	beq	r4,r16,2b18 <_malloc_r+0x2f4>
    28bc:	80800117 	ldw	r2,4(r16)
    28c0:	01bfff04 	movi	r6,-4
    28c4:	014003c4 	movi	r5,15
    28c8:	1184703a 	and	r2,r2,r6
    28cc:	1447c83a 	sub	r3,r2,r17
    28d0:	28c00716 	blt	r5,r3,28f0 <_malloc_r+0xcc>
    28d4:	1800920e 	bge	r3,zero,2b20 <_malloc_r+0x2fc>
    28d8:	84000317 	ldw	r16,12(r16)
    28dc:	24008e26 	beq	r4,r16,2b18 <_malloc_r+0x2f4>
    28e0:	80800117 	ldw	r2,4(r16)
    28e4:	1184703a 	and	r2,r2,r6
    28e8:	1447c83a 	sub	r3,r2,r17
    28ec:	28fff90e 	bge	r5,r3,28d4 <__alt_exception_stack_pointer+0xf80028d4>
    28f0:	3809883a 	mov	r4,r7
    28f4:	01800074 	movhi	r6,1
    28f8:	9c000417 	ldw	r16,16(r19)
    28fc:	318c2404 	addi	r6,r6,12432
    2900:	32000204 	addi	r8,r6,8
    2904:	82013426 	beq	r16,r8,2dd8 <_malloc_r+0x5b4>
    2908:	80c00117 	ldw	r3,4(r16)
    290c:	00bfff04 	movi	r2,-4
    2910:	188e703a 	and	r7,r3,r2
    2914:	3c45c83a 	sub	r2,r7,r17
    2918:	00c003c4 	movi	r3,15
    291c:	18811f16 	blt	r3,r2,2d9c <_malloc_r+0x578>
    2920:	32000515 	stw	r8,20(r6)
    2924:	32000415 	stw	r8,16(r6)
    2928:	10007f0e 	bge	r2,zero,2b28 <_malloc_r+0x304>
    292c:	00807fc4 	movi	r2,511
    2930:	11c0fd36 	bltu	r2,r7,2d28 <_malloc_r+0x504>
    2934:	3806d0fa 	srli	r3,r7,3
    2938:	01c00044 	movi	r7,1
    293c:	30800117 	ldw	r2,4(r6)
    2940:	19400044 	addi	r5,r3,1
    2944:	294b883a 	add	r5,r5,r5
    2948:	1807d0ba 	srai	r3,r3,2
    294c:	294b883a 	add	r5,r5,r5
    2950:	294b883a 	add	r5,r5,r5
    2954:	298b883a 	add	r5,r5,r6
    2958:	38c6983a 	sll	r3,r7,r3
    295c:	29c00017 	ldw	r7,0(r5)
    2960:	2a7ffe04 	addi	r9,r5,-8
    2964:	1886b03a 	or	r3,r3,r2
    2968:	82400315 	stw	r9,12(r16)
    296c:	81c00215 	stw	r7,8(r16)
    2970:	30c00115 	stw	r3,4(r6)
    2974:	2c000015 	stw	r16,0(r5)
    2978:	3c000315 	stw	r16,12(r7)
    297c:	2005d0ba 	srai	r2,r4,2
    2980:	01400044 	movi	r5,1
    2984:	288a983a 	sll	r5,r5,r2
    2988:	19406f36 	bltu	r3,r5,2b48 <_malloc_r+0x324>
    298c:	28c4703a 	and	r2,r5,r3
    2990:	10000a1e 	bne	r2,zero,29bc <_malloc_r+0x198>
    2994:	00bfff04 	movi	r2,-4
    2998:	294b883a 	add	r5,r5,r5
    299c:	2088703a 	and	r4,r4,r2
    29a0:	28c4703a 	and	r2,r5,r3
    29a4:	21000104 	addi	r4,r4,4
    29a8:	1000041e 	bne	r2,zero,29bc <_malloc_r+0x198>
    29ac:	294b883a 	add	r5,r5,r5
    29b0:	28c4703a 	and	r2,r5,r3
    29b4:	21000104 	addi	r4,r4,4
    29b8:	103ffc26 	beq	r2,zero,29ac <__alt_exception_stack_pointer+0xf80029ac>
    29bc:	02bfff04 	movi	r10,-4
    29c0:	024003c4 	movi	r9,15
    29c4:	21800044 	addi	r6,r4,1
    29c8:	318d883a 	add	r6,r6,r6
    29cc:	318d883a 	add	r6,r6,r6
    29d0:	318d883a 	add	r6,r6,r6
    29d4:	998d883a 	add	r6,r19,r6
    29d8:	333ffe04 	addi	r12,r6,-8
    29dc:	2017883a 	mov	r11,r4
    29e0:	31800104 	addi	r6,r6,4
    29e4:	34000017 	ldw	r16,0(r6)
    29e8:	31fffd04 	addi	r7,r6,-12
    29ec:	81c0041e 	bne	r16,r7,2a00 <_malloc_r+0x1dc>
    29f0:	0000fb06 	br	2de0 <_malloc_r+0x5bc>
    29f4:	1801030e 	bge	r3,zero,2e04 <_malloc_r+0x5e0>
    29f8:	84000317 	ldw	r16,12(r16)
    29fc:	81c0f826 	beq	r16,r7,2de0 <_malloc_r+0x5bc>
    2a00:	80800117 	ldw	r2,4(r16)
    2a04:	1284703a 	and	r2,r2,r10
    2a08:	1447c83a 	sub	r3,r2,r17
    2a0c:	48fff90e 	bge	r9,r3,29f4 <__alt_exception_stack_pointer+0xf80029f4>
    2a10:	80800317 	ldw	r2,12(r16)
    2a14:	81000217 	ldw	r4,8(r16)
    2a18:	89400054 	ori	r5,r17,1
    2a1c:	81400115 	stw	r5,4(r16)
    2a20:	20800315 	stw	r2,12(r4)
    2a24:	11000215 	stw	r4,8(r2)
    2a28:	8463883a 	add	r17,r16,r17
    2a2c:	9c400515 	stw	r17,20(r19)
    2a30:	9c400415 	stw	r17,16(r19)
    2a34:	18800054 	ori	r2,r3,1
    2a38:	88800115 	stw	r2,4(r17)
    2a3c:	8a000315 	stw	r8,12(r17)
    2a40:	8a000215 	stw	r8,8(r17)
    2a44:	88e3883a 	add	r17,r17,r3
    2a48:	88c00015 	stw	r3,0(r17)
    2a4c:	9009883a 	mov	r4,r18
    2a50:	000fd2c0 	call	fd2c <__malloc_unlock>
    2a54:	80800204 	addi	r2,r16,8
    2a58:	00001b06 	br	2ac8 <_malloc_r+0x2a4>
    2a5c:	04400404 	movi	r17,16
    2a60:	89402536 	bltu	r17,r5,2af8 <_malloc_r+0x2d4>
    2a64:	000fd080 	call	fd08 <__malloc_lock>
    2a68:	00800184 	movi	r2,6
    2a6c:	01000084 	movi	r4,2
    2a70:	04c00074 	movhi	r19,1
    2a74:	1085883a 	add	r2,r2,r2
    2a78:	9ccc2404 	addi	r19,r19,12432
    2a7c:	1085883a 	add	r2,r2,r2
    2a80:	9885883a 	add	r2,r19,r2
    2a84:	14000117 	ldw	r16,4(r2)
    2a88:	10fffe04 	addi	r3,r2,-8
    2a8c:	80c0d926 	beq	r16,r3,2df4 <_malloc_r+0x5d0>
    2a90:	80c00117 	ldw	r3,4(r16)
    2a94:	81000317 	ldw	r4,12(r16)
    2a98:	00bfff04 	movi	r2,-4
    2a9c:	1884703a 	and	r2,r3,r2
    2aa0:	81400217 	ldw	r5,8(r16)
    2aa4:	8085883a 	add	r2,r16,r2
    2aa8:	10c00117 	ldw	r3,4(r2)
    2aac:	29000315 	stw	r4,12(r5)
    2ab0:	21400215 	stw	r5,8(r4)
    2ab4:	18c00054 	ori	r3,r3,1
    2ab8:	10c00115 	stw	r3,4(r2)
    2abc:	9009883a 	mov	r4,r18
    2ac0:	000fd2c0 	call	fd2c <__malloc_unlock>
    2ac4:	80800204 	addi	r2,r16,8
    2ac8:	dfc00a17 	ldw	ra,40(sp)
    2acc:	df000917 	ldw	fp,36(sp)
    2ad0:	ddc00817 	ldw	r23,32(sp)
    2ad4:	dd800717 	ldw	r22,28(sp)
    2ad8:	dd400617 	ldw	r21,24(sp)
    2adc:	dd000517 	ldw	r20,20(sp)
    2ae0:	dcc00417 	ldw	r19,16(sp)
    2ae4:	dc800317 	ldw	r18,12(sp)
    2ae8:	dc400217 	ldw	r17,8(sp)
    2aec:	dc000117 	ldw	r16,4(sp)
    2af0:	dec00b04 	addi	sp,sp,44
    2af4:	f800283a 	ret
    2af8:	00800304 	movi	r2,12
    2afc:	90800015 	stw	r2,0(r18)
    2b00:	0005883a 	mov	r2,zero
    2b04:	003ff006 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2b08:	01002004 	movi	r4,128
    2b0c:	02001004 	movi	r8,64
    2b10:	01c00fc4 	movi	r7,63
    2b14:	003f6106 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2b18:	4009883a 	mov	r4,r8
    2b1c:	003f7506 	br	28f4 <__alt_exception_stack_pointer+0xf80028f4>
    2b20:	81000317 	ldw	r4,12(r16)
    2b24:	003fde06 	br	2aa0 <__alt_exception_stack_pointer+0xf8002aa0>
    2b28:	81c5883a 	add	r2,r16,r7
    2b2c:	11400117 	ldw	r5,4(r2)
    2b30:	9009883a 	mov	r4,r18
    2b34:	29400054 	ori	r5,r5,1
    2b38:	11400115 	stw	r5,4(r2)
    2b3c:	000fd2c0 	call	fd2c <__malloc_unlock>
    2b40:	80800204 	addi	r2,r16,8
    2b44:	003fe006 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2b48:	9c000217 	ldw	r16,8(r19)
    2b4c:	00bfff04 	movi	r2,-4
    2b50:	85800117 	ldw	r22,4(r16)
    2b54:	b0ac703a 	and	r22,r22,r2
    2b58:	b4400336 	bltu	r22,r17,2b68 <_malloc_r+0x344>
    2b5c:	b445c83a 	sub	r2,r22,r17
    2b60:	00c003c4 	movi	r3,15
    2b64:	18805d16 	blt	r3,r2,2cdc <_malloc_r+0x4b8>
    2b68:	05c00074 	movhi	r23,1
    2b6c:	00800074 	movhi	r2,1
    2b70:	10989b04 	addi	r2,r2,25196
    2b74:	bdd1ca04 	addi	r23,r23,18216
    2b78:	15400017 	ldw	r21,0(r2)
    2b7c:	b8c00017 	ldw	r3,0(r23)
    2b80:	00bfffc4 	movi	r2,-1
    2b84:	858d883a 	add	r6,r16,r22
    2b88:	8d6b883a 	add	r21,r17,r21
    2b8c:	1880ea26 	beq	r3,r2,2f38 <_malloc_r+0x714>
    2b90:	ad4403c4 	addi	r21,r21,4111
    2b94:	00bc0004 	movi	r2,-4096
    2b98:	a8aa703a 	and	r21,r21,r2
    2b9c:	a80b883a 	mov	r5,r21
    2ba0:	9009883a 	mov	r4,r18
    2ba4:	d9800015 	stw	r6,0(sp)
    2ba8:	00031700 	call	3170 <_sbrk_r>
    2bac:	1029883a 	mov	r20,r2
    2bb0:	00bfffc4 	movi	r2,-1
    2bb4:	d9800017 	ldw	r6,0(sp)
    2bb8:	a080e826 	beq	r20,r2,2f5c <_malloc_r+0x738>
    2bbc:	a180a636 	bltu	r20,r6,2e58 <_malloc_r+0x634>
    2bc0:	07000074 	movhi	fp,1
    2bc4:	e718a704 	addi	fp,fp,25244
    2bc8:	e0800017 	ldw	r2,0(fp)
    2bcc:	a887883a 	add	r3,r21,r2
    2bd0:	e0c00015 	stw	r3,0(fp)
    2bd4:	3500e626 	beq	r6,r20,2f70 <_malloc_r+0x74c>
    2bd8:	b9000017 	ldw	r4,0(r23)
    2bdc:	00bfffc4 	movi	r2,-1
    2be0:	2080ee26 	beq	r4,r2,2f9c <_malloc_r+0x778>
    2be4:	a185c83a 	sub	r2,r20,r6
    2be8:	10c5883a 	add	r2,r2,r3
    2bec:	e0800015 	stw	r2,0(fp)
    2bf0:	a0c001cc 	andi	r3,r20,7
    2bf4:	1800bc26 	beq	r3,zero,2ee8 <_malloc_r+0x6c4>
    2bf8:	a0e9c83a 	sub	r20,r20,r3
    2bfc:	00840204 	movi	r2,4104
    2c00:	a5000204 	addi	r20,r20,8
    2c04:	10c7c83a 	sub	r3,r2,r3
    2c08:	a545883a 	add	r2,r20,r21
    2c0c:	1083ffcc 	andi	r2,r2,4095
    2c10:	18abc83a 	sub	r21,r3,r2
    2c14:	a80b883a 	mov	r5,r21
    2c18:	9009883a 	mov	r4,r18
    2c1c:	00031700 	call	3170 <_sbrk_r>
    2c20:	00ffffc4 	movi	r3,-1
    2c24:	10c0e126 	beq	r2,r3,2fac <_malloc_r+0x788>
    2c28:	1505c83a 	sub	r2,r2,r20
    2c2c:	1545883a 	add	r2,r2,r21
    2c30:	10800054 	ori	r2,r2,1
    2c34:	e0c00017 	ldw	r3,0(fp)
    2c38:	9d000215 	stw	r20,8(r19)
    2c3c:	a0800115 	stw	r2,4(r20)
    2c40:	a8c7883a 	add	r3,r21,r3
    2c44:	e0c00015 	stw	r3,0(fp)
    2c48:	84c00e26 	beq	r16,r19,2c84 <_malloc_r+0x460>
    2c4c:	018003c4 	movi	r6,15
    2c50:	3580a72e 	bgeu	r6,r22,2ef0 <_malloc_r+0x6cc>
    2c54:	81400117 	ldw	r5,4(r16)
    2c58:	013ffe04 	movi	r4,-8
    2c5c:	b0bffd04 	addi	r2,r22,-12
    2c60:	1104703a 	and	r2,r2,r4
    2c64:	2900004c 	andi	r4,r5,1
    2c68:	2088b03a 	or	r4,r4,r2
    2c6c:	81000115 	stw	r4,4(r16)
    2c70:	01400144 	movi	r5,5
    2c74:	8089883a 	add	r4,r16,r2
    2c78:	21400115 	stw	r5,4(r4)
    2c7c:	21400215 	stw	r5,8(r4)
    2c80:	3080cd36 	bltu	r6,r2,2fb8 <_malloc_r+0x794>
    2c84:	00800074 	movhi	r2,1
    2c88:	10989a04 	addi	r2,r2,25192
    2c8c:	11000017 	ldw	r4,0(r2)
    2c90:	20c0012e 	bgeu	r4,r3,2c98 <_malloc_r+0x474>
    2c94:	10c00015 	stw	r3,0(r2)
    2c98:	00800074 	movhi	r2,1
    2c9c:	10989904 	addi	r2,r2,25188
    2ca0:	11000017 	ldw	r4,0(r2)
    2ca4:	9c000217 	ldw	r16,8(r19)
    2ca8:	20c0012e 	bgeu	r4,r3,2cb0 <_malloc_r+0x48c>
    2cac:	10c00015 	stw	r3,0(r2)
    2cb0:	80c00117 	ldw	r3,4(r16)
    2cb4:	00bfff04 	movi	r2,-4
    2cb8:	1886703a 	and	r3,r3,r2
    2cbc:	1c45c83a 	sub	r2,r3,r17
    2cc0:	1c400236 	bltu	r3,r17,2ccc <_malloc_r+0x4a8>
    2cc4:	00c003c4 	movi	r3,15
    2cc8:	18800416 	blt	r3,r2,2cdc <_malloc_r+0x4b8>
    2ccc:	9009883a 	mov	r4,r18
    2cd0:	000fd2c0 	call	fd2c <__malloc_unlock>
    2cd4:	0005883a 	mov	r2,zero
    2cd8:	003f7b06 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2cdc:	88c00054 	ori	r3,r17,1
    2ce0:	80c00115 	stw	r3,4(r16)
    2ce4:	8463883a 	add	r17,r16,r17
    2ce8:	10800054 	ori	r2,r2,1
    2cec:	9c400215 	stw	r17,8(r19)
    2cf0:	88800115 	stw	r2,4(r17)
    2cf4:	9009883a 	mov	r4,r18
    2cf8:	000fd2c0 	call	fd2c <__malloc_unlock>
    2cfc:	80800204 	addi	r2,r16,8
    2d00:	003f7106 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2d04:	00c00504 	movi	r3,20
    2d08:	18804a2e 	bgeu	r3,r2,2e34 <_malloc_r+0x610>
    2d0c:	00c01504 	movi	r3,84
    2d10:	18806e36 	bltu	r3,r2,2ecc <_malloc_r+0x6a8>
    2d14:	8804d33a 	srli	r2,r17,12
    2d18:	12001bc4 	addi	r8,r2,111
    2d1c:	11c01b84 	addi	r7,r2,110
    2d20:	4209883a 	add	r4,r8,r8
    2d24:	003edd06 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2d28:	3804d27a 	srli	r2,r7,9
    2d2c:	00c00104 	movi	r3,4
    2d30:	1880442e 	bgeu	r3,r2,2e44 <_malloc_r+0x620>
    2d34:	00c00504 	movi	r3,20
    2d38:	18808136 	bltu	r3,r2,2f40 <_malloc_r+0x71c>
    2d3c:	11401704 	addi	r5,r2,92
    2d40:	10c016c4 	addi	r3,r2,91
    2d44:	294b883a 	add	r5,r5,r5
    2d48:	294b883a 	add	r5,r5,r5
    2d4c:	294b883a 	add	r5,r5,r5
    2d50:	994b883a 	add	r5,r19,r5
    2d54:	28800017 	ldw	r2,0(r5)
    2d58:	01800074 	movhi	r6,1
    2d5c:	297ffe04 	addi	r5,r5,-8
    2d60:	318c2404 	addi	r6,r6,12432
    2d64:	28806526 	beq	r5,r2,2efc <_malloc_r+0x6d8>
    2d68:	01bfff04 	movi	r6,-4
    2d6c:	10c00117 	ldw	r3,4(r2)
    2d70:	1986703a 	and	r3,r3,r6
    2d74:	38c0022e 	bgeu	r7,r3,2d80 <_malloc_r+0x55c>
    2d78:	10800217 	ldw	r2,8(r2)
    2d7c:	28bffb1e 	bne	r5,r2,2d6c <__alt_exception_stack_pointer+0xf8002d6c>
    2d80:	11400317 	ldw	r5,12(r2)
    2d84:	98c00117 	ldw	r3,4(r19)
    2d88:	81400315 	stw	r5,12(r16)
    2d8c:	80800215 	stw	r2,8(r16)
    2d90:	2c000215 	stw	r16,8(r5)
    2d94:	14000315 	stw	r16,12(r2)
    2d98:	003ef806 	br	297c <__alt_exception_stack_pointer+0xf800297c>
    2d9c:	88c00054 	ori	r3,r17,1
    2da0:	80c00115 	stw	r3,4(r16)
    2da4:	8463883a 	add	r17,r16,r17
    2da8:	34400515 	stw	r17,20(r6)
    2dac:	34400415 	stw	r17,16(r6)
    2db0:	10c00054 	ori	r3,r2,1
    2db4:	8a000315 	stw	r8,12(r17)
    2db8:	8a000215 	stw	r8,8(r17)
    2dbc:	88c00115 	stw	r3,4(r17)
    2dc0:	88a3883a 	add	r17,r17,r2
    2dc4:	88800015 	stw	r2,0(r17)
    2dc8:	9009883a 	mov	r4,r18
    2dcc:	000fd2c0 	call	fd2c <__malloc_unlock>
    2dd0:	80800204 	addi	r2,r16,8
    2dd4:	003f3c06 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2dd8:	30c00117 	ldw	r3,4(r6)
    2ddc:	003ee706 	br	297c <__alt_exception_stack_pointer+0xf800297c>
    2de0:	5ac00044 	addi	r11,r11,1
    2de4:	588000cc 	andi	r2,r11,3
    2de8:	31800204 	addi	r6,r6,8
    2dec:	103efd1e 	bne	r2,zero,29e4 <__alt_exception_stack_pointer+0xf80029e4>
    2df0:	00002406 	br	2e84 <_malloc_r+0x660>
    2df4:	14000317 	ldw	r16,12(r2)
    2df8:	143f251e 	bne	r2,r16,2a90 <__alt_exception_stack_pointer+0xf8002a90>
    2dfc:	21000084 	addi	r4,r4,2
    2e00:	003ebc06 	br	28f4 <__alt_exception_stack_pointer+0xf80028f4>
    2e04:	8085883a 	add	r2,r16,r2
    2e08:	10c00117 	ldw	r3,4(r2)
    2e0c:	81000317 	ldw	r4,12(r16)
    2e10:	81400217 	ldw	r5,8(r16)
    2e14:	18c00054 	ori	r3,r3,1
    2e18:	10c00115 	stw	r3,4(r2)
    2e1c:	29000315 	stw	r4,12(r5)
    2e20:	21400215 	stw	r5,8(r4)
    2e24:	9009883a 	mov	r4,r18
    2e28:	000fd2c0 	call	fd2c <__malloc_unlock>
    2e2c:	80800204 	addi	r2,r16,8
    2e30:	003f2506 	br	2ac8 <__alt_exception_stack_pointer+0xf8002ac8>
    2e34:	12001704 	addi	r8,r2,92
    2e38:	11c016c4 	addi	r7,r2,91
    2e3c:	4209883a 	add	r4,r8,r8
    2e40:	003e9606 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2e44:	3804d1ba 	srli	r2,r7,6
    2e48:	11400e44 	addi	r5,r2,57
    2e4c:	10c00e04 	addi	r3,r2,56
    2e50:	294b883a 	add	r5,r5,r5
    2e54:	003fbc06 	br	2d48 <__alt_exception_stack_pointer+0xf8002d48>
    2e58:	84ff5926 	beq	r16,r19,2bc0 <__alt_exception_stack_pointer+0xf8002bc0>
    2e5c:	00800074 	movhi	r2,1
    2e60:	108c2404 	addi	r2,r2,12432
    2e64:	14000217 	ldw	r16,8(r2)
    2e68:	00bfff04 	movi	r2,-4
    2e6c:	80c00117 	ldw	r3,4(r16)
    2e70:	1886703a 	and	r3,r3,r2
    2e74:	003f9106 	br	2cbc <__alt_exception_stack_pointer+0xf8002cbc>
    2e78:	60800217 	ldw	r2,8(r12)
    2e7c:	213fffc4 	addi	r4,r4,-1
    2e80:	1300651e 	bne	r2,r12,3018 <_malloc_r+0x7f4>
    2e84:	208000cc 	andi	r2,r4,3
    2e88:	633ffe04 	addi	r12,r12,-8
    2e8c:	103ffa1e 	bne	r2,zero,2e78 <__alt_exception_stack_pointer+0xf8002e78>
    2e90:	98800117 	ldw	r2,4(r19)
    2e94:	0146303a 	nor	r3,zero,r5
    2e98:	1884703a 	and	r2,r3,r2
    2e9c:	98800115 	stw	r2,4(r19)
    2ea0:	294b883a 	add	r5,r5,r5
    2ea4:	117f2836 	bltu	r2,r5,2b48 <__alt_exception_stack_pointer+0xf8002b48>
    2ea8:	283f2726 	beq	r5,zero,2b48 <__alt_exception_stack_pointer+0xf8002b48>
    2eac:	2886703a 	and	r3,r5,r2
    2eb0:	5809883a 	mov	r4,r11
    2eb4:	183ec31e 	bne	r3,zero,29c4 <__alt_exception_stack_pointer+0xf80029c4>
    2eb8:	294b883a 	add	r5,r5,r5
    2ebc:	2886703a 	and	r3,r5,r2
    2ec0:	21000104 	addi	r4,r4,4
    2ec4:	183ffc26 	beq	r3,zero,2eb8 <__alt_exception_stack_pointer+0xf8002eb8>
    2ec8:	003ebe06 	br	29c4 <__alt_exception_stack_pointer+0xf80029c4>
    2ecc:	00c05504 	movi	r3,340
    2ed0:	18801236 	bltu	r3,r2,2f1c <_malloc_r+0x6f8>
    2ed4:	8804d3fa 	srli	r2,r17,15
    2ed8:	12001e04 	addi	r8,r2,120
    2edc:	11c01dc4 	addi	r7,r2,119
    2ee0:	4209883a 	add	r4,r8,r8
    2ee4:	003e6d06 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2ee8:	00c40004 	movi	r3,4096
    2eec:	003f4606 	br	2c08 <__alt_exception_stack_pointer+0xf8002c08>
    2ef0:	00800044 	movi	r2,1
    2ef4:	a0800115 	stw	r2,4(r20)
    2ef8:	003f7406 	br	2ccc <__alt_exception_stack_pointer+0xf8002ccc>
    2efc:	1805d0ba 	srai	r2,r3,2
    2f00:	01c00044 	movi	r7,1
    2f04:	30c00117 	ldw	r3,4(r6)
    2f08:	388e983a 	sll	r7,r7,r2
    2f0c:	2805883a 	mov	r2,r5
    2f10:	38c6b03a 	or	r3,r7,r3
    2f14:	30c00115 	stw	r3,4(r6)
    2f18:	003f9b06 	br	2d88 <__alt_exception_stack_pointer+0xf8002d88>
    2f1c:	00c15504 	movi	r3,1364
    2f20:	18801a36 	bltu	r3,r2,2f8c <_malloc_r+0x768>
    2f24:	8804d4ba 	srli	r2,r17,18
    2f28:	12001f44 	addi	r8,r2,125
    2f2c:	11c01f04 	addi	r7,r2,124
    2f30:	4209883a 	add	r4,r8,r8
    2f34:	003e5906 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2f38:	ad400404 	addi	r21,r21,16
    2f3c:	003f1706 	br	2b9c <__alt_exception_stack_pointer+0xf8002b9c>
    2f40:	00c01504 	movi	r3,84
    2f44:	18802336 	bltu	r3,r2,2fd4 <_malloc_r+0x7b0>
    2f48:	3804d33a 	srli	r2,r7,12
    2f4c:	11401bc4 	addi	r5,r2,111
    2f50:	10c01b84 	addi	r3,r2,110
    2f54:	294b883a 	add	r5,r5,r5
    2f58:	003f7b06 	br	2d48 <__alt_exception_stack_pointer+0xf8002d48>
    2f5c:	9c000217 	ldw	r16,8(r19)
    2f60:	00bfff04 	movi	r2,-4
    2f64:	80c00117 	ldw	r3,4(r16)
    2f68:	1886703a 	and	r3,r3,r2
    2f6c:	003f5306 	br	2cbc <__alt_exception_stack_pointer+0xf8002cbc>
    2f70:	3083ffcc 	andi	r2,r6,4095
    2f74:	103f181e 	bne	r2,zero,2bd8 <__alt_exception_stack_pointer+0xf8002bd8>
    2f78:	99000217 	ldw	r4,8(r19)
    2f7c:	b545883a 	add	r2,r22,r21
    2f80:	10800054 	ori	r2,r2,1
    2f84:	20800115 	stw	r2,4(r4)
    2f88:	003f3e06 	br	2c84 <__alt_exception_stack_pointer+0xf8002c84>
    2f8c:	01003f84 	movi	r4,254
    2f90:	02001fc4 	movi	r8,127
    2f94:	01c01f84 	movi	r7,126
    2f98:	003e4006 	br	289c <__alt_exception_stack_pointer+0xf800289c>
    2f9c:	00800074 	movhi	r2,1
    2fa0:	1091ca04 	addi	r2,r2,18216
    2fa4:	15000015 	stw	r20,0(r2)
    2fa8:	003f1106 	br	2bf0 <__alt_exception_stack_pointer+0xf8002bf0>
    2fac:	00800044 	movi	r2,1
    2fb0:	002b883a 	mov	r21,zero
    2fb4:	003f1f06 	br	2c34 <__alt_exception_stack_pointer+0xf8002c34>
    2fb8:	81400204 	addi	r5,r16,8
    2fbc:	9009883a 	mov	r4,r18
    2fc0:	00077980 	call	7798 <_free_r>
    2fc4:	00800074 	movhi	r2,1
    2fc8:	1098a704 	addi	r2,r2,25244
    2fcc:	10c00017 	ldw	r3,0(r2)
    2fd0:	003f2c06 	br	2c84 <__alt_exception_stack_pointer+0xf8002c84>
    2fd4:	00c05504 	movi	r3,340
    2fd8:	18800536 	bltu	r3,r2,2ff0 <_malloc_r+0x7cc>
    2fdc:	3804d3fa 	srli	r2,r7,15
    2fe0:	11401e04 	addi	r5,r2,120
    2fe4:	10c01dc4 	addi	r3,r2,119
    2fe8:	294b883a 	add	r5,r5,r5
    2fec:	003f5606 	br	2d48 <__alt_exception_stack_pointer+0xf8002d48>
    2ff0:	00c15504 	movi	r3,1364
    2ff4:	18800536 	bltu	r3,r2,300c <_malloc_r+0x7e8>
    2ff8:	3804d4ba 	srli	r2,r7,18
    2ffc:	11401f44 	addi	r5,r2,125
    3000:	10c01f04 	addi	r3,r2,124
    3004:	294b883a 	add	r5,r5,r5
    3008:	003f4f06 	br	2d48 <__alt_exception_stack_pointer+0xf8002d48>
    300c:	01403f84 	movi	r5,254
    3010:	00c01f84 	movi	r3,126
    3014:	003f4c06 	br	2d48 <__alt_exception_stack_pointer+0xf8002d48>
    3018:	98800117 	ldw	r2,4(r19)
    301c:	003fa006 	br	2ea0 <__alt_exception_stack_pointer+0xf8002ea0>
    3020:	8808d0fa 	srli	r4,r17,3
    3024:	20800044 	addi	r2,r4,1
    3028:	1085883a 	add	r2,r2,r2
    302c:	003e9006 	br	2a70 <__alt_exception_stack_pointer+0xf8002a70>

00003030 <_printf_r>:
    3030:	defffd04 	addi	sp,sp,-12
    3034:	2805883a 	mov	r2,r5
    3038:	dfc00015 	stw	ra,0(sp)
    303c:	d9800115 	stw	r6,4(sp)
    3040:	d9c00215 	stw	r7,8(sp)
    3044:	21400217 	ldw	r5,8(r4)
    3048:	d9c00104 	addi	r7,sp,4
    304c:	100d883a 	mov	r6,r2
    3050:	00032640 	call	3264 <___vfprintf_internal_r>
    3054:	dfc00017 	ldw	ra,0(sp)
    3058:	dec00304 	addi	sp,sp,12
    305c:	f800283a 	ret

00003060 <printf>:
    3060:	defffc04 	addi	sp,sp,-16
    3064:	dfc00015 	stw	ra,0(sp)
    3068:	d9400115 	stw	r5,4(sp)
    306c:	d9800215 	stw	r6,8(sp)
    3070:	d9c00315 	stw	r7,12(sp)
    3074:	00800074 	movhi	r2,1
    3078:	1091c904 	addi	r2,r2,18212
    307c:	10800017 	ldw	r2,0(r2)
    3080:	200b883a 	mov	r5,r4
    3084:	d9800104 	addi	r6,sp,4
    3088:	11000217 	ldw	r4,8(r2)
    308c:	00055400 	call	5540 <__vfprintf_internal>
    3090:	dfc00017 	ldw	ra,0(sp)
    3094:	dec00404 	addi	sp,sp,16
    3098:	f800283a 	ret

0000309c <_puts_r>:
    309c:	defff604 	addi	sp,sp,-40
    30a0:	dc000715 	stw	r16,28(sp)
    30a4:	2021883a 	mov	r16,r4
    30a8:	2809883a 	mov	r4,r5
    30ac:	dc400815 	stw	r17,32(sp)
    30b0:	dfc00915 	stw	ra,36(sp)
    30b4:	2823883a 	mov	r17,r5
    30b8:	00031c40 	call	31c4 <strlen>
    30bc:	10c00044 	addi	r3,r2,1
    30c0:	d8800115 	stw	r2,4(sp)
    30c4:	00800074 	movhi	r2,1
    30c8:	108a5904 	addi	r2,r2,10596
    30cc:	d8800215 	stw	r2,8(sp)
    30d0:	00800044 	movi	r2,1
    30d4:	d8800315 	stw	r2,12(sp)
    30d8:	00800084 	movi	r2,2
    30dc:	dc400015 	stw	r17,0(sp)
    30e0:	d8c00615 	stw	r3,24(sp)
    30e4:	dec00415 	stw	sp,16(sp)
    30e8:	d8800515 	stw	r2,20(sp)
    30ec:	80000226 	beq	r16,zero,30f8 <_puts_r+0x5c>
    30f0:	80800e17 	ldw	r2,56(r16)
    30f4:	10001426 	beq	r2,zero,3148 <_puts_r+0xac>
    30f8:	81400217 	ldw	r5,8(r16)
    30fc:	2880030b 	ldhu	r2,12(r5)
    3100:	10c8000c 	andi	r3,r2,8192
    3104:	1800061e 	bne	r3,zero,3120 <_puts_r+0x84>
    3108:	29001917 	ldw	r4,100(r5)
    310c:	00f7ffc4 	movi	r3,-8193
    3110:	10880014 	ori	r2,r2,8192
    3114:	20c6703a 	and	r3,r4,r3
    3118:	2880030d 	sth	r2,12(r5)
    311c:	28c01915 	stw	r3,100(r5)
    3120:	d9800404 	addi	r6,sp,16
    3124:	8009883a 	mov	r4,r16
    3128:	0007aa80 	call	7aa8 <__sfvwrite_r>
    312c:	1000091e 	bne	r2,zero,3154 <_puts_r+0xb8>
    3130:	00800284 	movi	r2,10
    3134:	dfc00917 	ldw	ra,36(sp)
    3138:	dc400817 	ldw	r17,32(sp)
    313c:	dc000717 	ldw	r16,28(sp)
    3140:	dec00a04 	addi	sp,sp,40
    3144:	f800283a 	ret
    3148:	8009883a 	mov	r4,r16
    314c:	00076240 	call	7624 <__sinit>
    3150:	003fe906 	br	30f8 <__alt_exception_stack_pointer+0xf80030f8>
    3154:	00bfffc4 	movi	r2,-1
    3158:	003ff606 	br	3134 <__alt_exception_stack_pointer+0xf8003134>

0000315c <puts>:
    315c:	00800074 	movhi	r2,1
    3160:	1091c904 	addi	r2,r2,18212
    3164:	200b883a 	mov	r5,r4
    3168:	11000017 	ldw	r4,0(r2)
    316c:	000309c1 	jmpi	309c <_puts_r>

00003170 <_sbrk_r>:
    3170:	defffd04 	addi	sp,sp,-12
    3174:	dc000015 	stw	r16,0(sp)
    3178:	04000074 	movhi	r16,1
    317c:	dc400115 	stw	r17,4(sp)
    3180:	84189c04 	addi	r16,r16,25200
    3184:	2023883a 	mov	r17,r4
    3188:	2809883a 	mov	r4,r5
    318c:	dfc00215 	stw	ra,8(sp)
    3190:	80000015 	stw	zero,0(r16)
    3194:	000ff140 	call	ff14 <sbrk>
    3198:	00ffffc4 	movi	r3,-1
    319c:	10c00526 	beq	r2,r3,31b4 <_sbrk_r+0x44>
    31a0:	dfc00217 	ldw	ra,8(sp)
    31a4:	dc400117 	ldw	r17,4(sp)
    31a8:	dc000017 	ldw	r16,0(sp)
    31ac:	dec00304 	addi	sp,sp,12
    31b0:	f800283a 	ret
    31b4:	80c00017 	ldw	r3,0(r16)
    31b8:	183ff926 	beq	r3,zero,31a0 <__alt_exception_stack_pointer+0xf80031a0>
    31bc:	88c00015 	stw	r3,0(r17)
    31c0:	003ff706 	br	31a0 <__alt_exception_stack_pointer+0xf80031a0>

000031c4 <strlen>:
    31c4:	208000cc 	andi	r2,r4,3
    31c8:	10002026 	beq	r2,zero,324c <strlen+0x88>
    31cc:	20800007 	ldb	r2,0(r4)
    31d0:	10002026 	beq	r2,zero,3254 <strlen+0x90>
    31d4:	2005883a 	mov	r2,r4
    31d8:	00000206 	br	31e4 <strlen+0x20>
    31dc:	10c00007 	ldb	r3,0(r2)
    31e0:	18001826 	beq	r3,zero,3244 <strlen+0x80>
    31e4:	10800044 	addi	r2,r2,1
    31e8:	10c000cc 	andi	r3,r2,3
    31ec:	183ffb1e 	bne	r3,zero,31dc <__alt_exception_stack_pointer+0xf80031dc>
    31f0:	10c00017 	ldw	r3,0(r2)
    31f4:	01ffbff4 	movhi	r7,65279
    31f8:	39ffbfc4 	addi	r7,r7,-257
    31fc:	00ca303a 	nor	r5,zero,r3
    3200:	01a02074 	movhi	r6,32897
    3204:	19c7883a 	add	r3,r3,r7
    3208:	31a02004 	addi	r6,r6,-32640
    320c:	1946703a 	and	r3,r3,r5
    3210:	1986703a 	and	r3,r3,r6
    3214:	1800091e 	bne	r3,zero,323c <strlen+0x78>
    3218:	10800104 	addi	r2,r2,4
    321c:	10c00017 	ldw	r3,0(r2)
    3220:	19cb883a 	add	r5,r3,r7
    3224:	00c6303a 	nor	r3,zero,r3
    3228:	28c6703a 	and	r3,r5,r3
    322c:	1986703a 	and	r3,r3,r6
    3230:	183ff926 	beq	r3,zero,3218 <__alt_exception_stack_pointer+0xf8003218>
    3234:	00000106 	br	323c <strlen+0x78>
    3238:	10800044 	addi	r2,r2,1
    323c:	10c00007 	ldb	r3,0(r2)
    3240:	183ffd1e 	bne	r3,zero,3238 <__alt_exception_stack_pointer+0xf8003238>
    3244:	1105c83a 	sub	r2,r2,r4
    3248:	f800283a 	ret
    324c:	2005883a 	mov	r2,r4
    3250:	003fe706 	br	31f0 <__alt_exception_stack_pointer+0xf80031f0>
    3254:	0005883a 	mov	r2,zero
    3258:	f800283a 	ret

0000325c <_times_r>:
    325c:	2809883a 	mov	r4,r5
    3260:	00100001 	jmpi	10000 <times>

00003264 <___vfprintf_internal_r>:
    3264:	deffb804 	addi	sp,sp,-288
    3268:	dfc04715 	stw	ra,284(sp)
    326c:	ddc04515 	stw	r23,276(sp)
    3270:	dd404315 	stw	r21,268(sp)
    3274:	d9002d15 	stw	r4,180(sp)
    3278:	282f883a 	mov	r23,r5
    327c:	302b883a 	mov	r21,r6
    3280:	d9c02e15 	stw	r7,184(sp)
    3284:	df004615 	stw	fp,280(sp)
    3288:	dd804415 	stw	r22,272(sp)
    328c:	dd004215 	stw	r20,264(sp)
    3290:	dcc04115 	stw	r19,260(sp)
    3294:	dc804015 	stw	r18,256(sp)
    3298:	dc403f15 	stw	r17,252(sp)
    329c:	dc003e15 	stw	r16,248(sp)
    32a0:	00081a40 	call	81a4 <_localeconv_r>
    32a4:	10800017 	ldw	r2,0(r2)
    32a8:	1009883a 	mov	r4,r2
    32ac:	d8803415 	stw	r2,208(sp)
    32b0:	00031c40 	call	31c4 <strlen>
    32b4:	d8803715 	stw	r2,220(sp)
    32b8:	d8802d17 	ldw	r2,180(sp)
    32bc:	10000226 	beq	r2,zero,32c8 <___vfprintf_internal_r+0x64>
    32c0:	10800e17 	ldw	r2,56(r2)
    32c4:	1000fb26 	beq	r2,zero,36b4 <___vfprintf_internal_r+0x450>
    32c8:	b880030b 	ldhu	r2,12(r23)
    32cc:	10c8000c 	andi	r3,r2,8192
    32d0:	1800061e 	bne	r3,zero,32ec <___vfprintf_internal_r+0x88>
    32d4:	b9001917 	ldw	r4,100(r23)
    32d8:	00f7ffc4 	movi	r3,-8193
    32dc:	10880014 	ori	r2,r2,8192
    32e0:	20c6703a 	and	r3,r4,r3
    32e4:	b880030d 	sth	r2,12(r23)
    32e8:	b8c01915 	stw	r3,100(r23)
    32ec:	10c0020c 	andi	r3,r2,8
    32f0:	1800c326 	beq	r3,zero,3600 <___vfprintf_internal_r+0x39c>
    32f4:	b8c00417 	ldw	r3,16(r23)
    32f8:	1800c126 	beq	r3,zero,3600 <___vfprintf_internal_r+0x39c>
    32fc:	1080068c 	andi	r2,r2,26
    3300:	00c00284 	movi	r3,10
    3304:	10c0c626 	beq	r2,r3,3620 <___vfprintf_internal_r+0x3bc>
    3308:	d8c00404 	addi	r3,sp,16
    330c:	05000074 	movhi	r20,1
    3310:	d9001e04 	addi	r4,sp,120
    3314:	a50a6a84 	addi	r20,r20,10666
    3318:	d8c01e15 	stw	r3,120(sp)
    331c:	d8002015 	stw	zero,128(sp)
    3320:	d8001f15 	stw	zero,124(sp)
    3324:	d8003315 	stw	zero,204(sp)
    3328:	d8003615 	stw	zero,216(sp)
    332c:	d8003815 	stw	zero,224(sp)
    3330:	1811883a 	mov	r8,r3
    3334:	d8003915 	stw	zero,228(sp)
    3338:	d8003a15 	stw	zero,232(sp)
    333c:	d8002f15 	stw	zero,188(sp)
    3340:	d9002815 	stw	r4,160(sp)
    3344:	a8800007 	ldb	r2,0(r21)
    3348:	10028b26 	beq	r2,zero,3d78 <___vfprintf_internal_r+0xb14>
    334c:	00c00944 	movi	r3,37
    3350:	a823883a 	mov	r17,r21
    3354:	10c0021e 	bne	r2,r3,3360 <___vfprintf_internal_r+0xfc>
    3358:	00001406 	br	33ac <___vfprintf_internal_r+0x148>
    335c:	10c00326 	beq	r2,r3,336c <___vfprintf_internal_r+0x108>
    3360:	8c400044 	addi	r17,r17,1
    3364:	88800007 	ldb	r2,0(r17)
    3368:	103ffc1e 	bne	r2,zero,335c <__alt_exception_stack_pointer+0xf800335c>
    336c:	8d61c83a 	sub	r16,r17,r21
    3370:	80000e26 	beq	r16,zero,33ac <___vfprintf_internal_r+0x148>
    3374:	d8c02017 	ldw	r3,128(sp)
    3378:	d8801f17 	ldw	r2,124(sp)
    337c:	45400015 	stw	r21,0(r8)
    3380:	1c07883a 	add	r3,r3,r16
    3384:	10800044 	addi	r2,r2,1
    3388:	d8c02015 	stw	r3,128(sp)
    338c:	44000115 	stw	r16,4(r8)
    3390:	d8801f15 	stw	r2,124(sp)
    3394:	00c001c4 	movi	r3,7
    3398:	1880a916 	blt	r3,r2,3640 <___vfprintf_internal_r+0x3dc>
    339c:	42000204 	addi	r8,r8,8
    33a0:	d9402f17 	ldw	r5,188(sp)
    33a4:	2c0b883a 	add	r5,r5,r16
    33a8:	d9402f15 	stw	r5,188(sp)
    33ac:	88800007 	ldb	r2,0(r17)
    33b0:	1000aa26 	beq	r2,zero,365c <___vfprintf_internal_r+0x3f8>
    33b4:	8d400044 	addi	r21,r17,1
    33b8:	8c400047 	ldb	r17,1(r17)
    33bc:	0021883a 	mov	r16,zero
    33c0:	00bfffc4 	movi	r2,-1
    33c4:	0025883a 	mov	r18,zero
    33c8:	dc002905 	stb	r16,164(sp)
    33cc:	d8002785 	stb	zero,158(sp)
    33d0:	d8002b05 	stb	zero,172(sp)
    33d4:	d8802a15 	stw	r2,168(sp)
    33d8:	d8003115 	stw	zero,196(sp)
    33dc:	04c01604 	movi	r19,88
    33e0:	05800244 	movi	r22,9
    33e4:	9021883a 	mov	r16,r18
    33e8:	4039883a 	mov	fp,r8
    33ec:	ad400044 	addi	r21,r21,1
    33f0:	88bff804 	addi	r2,r17,-32
    33f4:	98833236 	bltu	r19,r2,40c0 <___vfprintf_internal_r+0xe5c>
    33f8:	100490ba 	slli	r2,r2,2
    33fc:	00c00034 	movhi	r3,0
    3400:	18cd0404 	addi	r3,r3,13328
    3404:	10c5883a 	add	r2,r2,r3
    3408:	10800017 	ldw	r2,0(r2)
    340c:	1000683a 	jmp	r2
    3410:	00003fb8 	rdprs	zero,zero,254
    3414:	000040c0 	call	40c <IO_read+0x5c>
    3418:	000040c0 	call	40c <IO_read+0x5c>
    341c:	00003fd8 	cmpnei	zero,zero,255
    3420:	000040c0 	call	40c <IO_read+0x5c>
    3424:	000040c0 	call	40c <IO_read+0x5c>
    3428:	000040c0 	call	40c <IO_read+0x5c>
    342c:	000040c0 	call	40c <IO_read+0x5c>
    3430:	000040c0 	call	40c <IO_read+0x5c>
    3434:	000040c0 	call	40c <IO_read+0x5c>
    3438:	000036c0 	call	36c <IO_write+0x44>
    343c:	00003ec8 	cmpgei	zero,zero,251
    3440:	000040c0 	call	40c <IO_read+0x5c>
    3444:	00003584 	movi	zero,214
    3448:	000036e4 	muli	zero,zero,219
    344c:	000040c0 	call	40c <IO_read+0x5c>
    3450:	00003734 	movhi	zero,220
    3454:	00003740 	call	374 <IO_write+0x4c>
    3458:	00003740 	call	374 <IO_write+0x4c>
    345c:	00003740 	call	374 <IO_write+0x4c>
    3460:	00003740 	call	374 <IO_write+0x4c>
    3464:	00003740 	call	374 <IO_write+0x4c>
    3468:	00003740 	call	374 <IO_write+0x4c>
    346c:	00003740 	call	374 <IO_write+0x4c>
    3470:	00003740 	call	374 <IO_write+0x4c>
    3474:	00003740 	call	374 <IO_write+0x4c>
    3478:	000040c0 	call	40c <IO_read+0x5c>
    347c:	000040c0 	call	40c <IO_read+0x5c>
    3480:	000040c0 	call	40c <IO_read+0x5c>
    3484:	000040c0 	call	40c <IO_read+0x5c>
    3488:	000040c0 	call	40c <IO_read+0x5c>
    348c:	000040c0 	call	40c <IO_read+0x5c>
    3490:	000040c0 	call	40c <IO_read+0x5c>
    3494:	000040c0 	call	40c <IO_read+0x5c>
    3498:	000040c0 	call	40c <IO_read+0x5c>
    349c:	000040c0 	call	40c <IO_read+0x5c>
    34a0:	0000377c 	xorhi	zero,zero,221
    34a4:	00003844 	movi	zero,225
    34a8:	000040c0 	call	40c <IO_read+0x5c>
    34ac:	00003844 	movi	zero,225
    34b0:	000040c0 	call	40c <IO_read+0x5c>
    34b4:	000040c0 	call	40c <IO_read+0x5c>
    34b8:	000040c0 	call	40c <IO_read+0x5c>
    34bc:	000040c0 	call	40c <IO_read+0x5c>
    34c0:	000038f0 	cmpltui	zero,zero,227
    34c4:	000040c0 	call	40c <IO_read+0x5c>
    34c8:	000040c0 	call	40c <IO_read+0x5c>
    34cc:	000038fc 	xorhi	zero,zero,227
    34d0:	000040c0 	call	40c <IO_read+0x5c>
    34d4:	000040c0 	call	40c <IO_read+0x5c>
    34d8:	000040c0 	call	40c <IO_read+0x5c>
    34dc:	000040c0 	call	40c <IO_read+0x5c>
    34e0:	000040c0 	call	40c <IO_read+0x5c>
    34e4:	00003d80 	call	3d8 <IO_read+0x28>
    34e8:	000040c0 	call	40c <IO_read+0x5c>
    34ec:	000040c0 	call	40c <IO_read+0x5c>
    34f0:	00003dec 	andhi	zero,zero,247
    34f4:	000040c0 	call	40c <IO_read+0x5c>
    34f8:	000040c0 	call	40c <IO_read+0x5c>
    34fc:	000040c0 	call	40c <IO_read+0x5c>
    3500:	000040c0 	call	40c <IO_read+0x5c>
    3504:	000040c0 	call	40c <IO_read+0x5c>
    3508:	000040c0 	call	40c <IO_read+0x5c>
    350c:	000040c0 	call	40c <IO_read+0x5c>
    3510:	000040c0 	call	40c <IO_read+0x5c>
    3514:	000040c0 	call	40c <IO_read+0x5c>
    3518:	000040c0 	call	40c <IO_read+0x5c>
    351c:	00004064 	muli	zero,zero,257
    3520:	00003fe4 	muli	zero,zero,255
    3524:	00003844 	movi	zero,225
    3528:	00003844 	movi	zero,225
    352c:	00003844 	movi	zero,225
    3530:	00004004 	movi	zero,256
    3534:	00003fe4 	muli	zero,zero,255
    3538:	000040c0 	call	40c <IO_read+0x5c>
    353c:	000040c0 	call	40c <IO_read+0x5c>
    3540:	00004010 	cmplti	zero,zero,256
    3544:	000040c0 	call	40c <IO_read+0x5c>
    3548:	00004024 	muli	zero,zero,256
    354c:	00003ea8 	cmpgeui	zero,zero,250
    3550:	00003590 	cmplti	zero,zero,214
    3554:	00003ee0 	cmpeqi	zero,zero,251
    3558:	000040c0 	call	40c <IO_read+0x5c>
    355c:	00003eec 	andhi	zero,zero,251
    3560:	000040c0 	call	40c <IO_read+0x5c>
    3564:	00003f50 	cmplti	zero,zero,253
    3568:	000040c0 	call	40c <IO_read+0x5c>
    356c:	000040c0 	call	40c <IO_read+0x5c>
    3570:	00003f70 	cmpltui	zero,zero,253
    3574:	d8c03117 	ldw	r3,196(sp)
    3578:	d8802e15 	stw	r2,184(sp)
    357c:	00c7c83a 	sub	r3,zero,r3
    3580:	d8c03115 	stw	r3,196(sp)
    3584:	84000114 	ori	r16,r16,4
    3588:	ac400007 	ldb	r17,0(r21)
    358c:	003f9706 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3590:	00800c04 	movi	r2,48
    3594:	d8802705 	stb	r2,156(sp)
    3598:	00801e04 	movi	r2,120
    359c:	d8802745 	stb	r2,157(sp)
    35a0:	d9002a17 	ldw	r4,168(sp)
    35a4:	d8802e17 	ldw	r2,184(sp)
    35a8:	d8002785 	stb	zero,158(sp)
    35ac:	e011883a 	mov	r8,fp
    35b0:	10c00104 	addi	r3,r2,4
    35b4:	14c00017 	ldw	r19,0(r2)
    35b8:	002d883a 	mov	r22,zero
    35bc:	80800094 	ori	r2,r16,2
    35c0:	2002ca16 	blt	r4,zero,40ec <___vfprintf_internal_r+0xe88>
    35c4:	00bfdfc4 	movi	r2,-129
    35c8:	80a4703a 	and	r18,r16,r2
    35cc:	d8c02e15 	stw	r3,184(sp)
    35d0:	94800094 	ori	r18,r18,2
    35d4:	9802b41e 	bne	r19,zero,40a8 <___vfprintf_internal_r+0xe44>
    35d8:	01400074 	movhi	r5,1
    35dc:	294a6304 	addi	r5,r5,10636
    35e0:	d9403915 	stw	r5,228(sp)
    35e4:	04401e04 	movi	r17,120
    35e8:	d8802a17 	ldw	r2,168(sp)
    35ec:	0039883a 	mov	fp,zero
    35f0:	1001fa26 	beq	r2,zero,3ddc <___vfprintf_internal_r+0xb78>
    35f4:	0027883a 	mov	r19,zero
    35f8:	002d883a 	mov	r22,zero
    35fc:	00021906 	br	3e64 <___vfprintf_internal_r+0xc00>
    3600:	d9002d17 	ldw	r4,180(sp)
    3604:	b80b883a 	mov	r5,r23
    3608:	00056180 	call	5618 <__swsetup_r>
    360c:	1005dc1e 	bne	r2,zero,4d80 <___vfprintf_internal_r+0x1b1c>
    3610:	b880030b 	ldhu	r2,12(r23)
    3614:	00c00284 	movi	r3,10
    3618:	1080068c 	andi	r2,r2,26
    361c:	10ff3a1e 	bne	r2,r3,3308 <__alt_exception_stack_pointer+0xf8003308>
    3620:	b880038f 	ldh	r2,14(r23)
    3624:	103f3816 	blt	r2,zero,3308 <__alt_exception_stack_pointer+0xf8003308>
    3628:	d9c02e17 	ldw	r7,184(sp)
    362c:	d9002d17 	ldw	r4,180(sp)
    3630:	a80d883a 	mov	r6,r21
    3634:	b80b883a 	mov	r5,r23
    3638:	000555c0 	call	555c <__sbprintf>
    363c:	00001106 	br	3684 <___vfprintf_internal_r+0x420>
    3640:	d9002d17 	ldw	r4,180(sp)
    3644:	d9801e04 	addi	r6,sp,120
    3648:	b80b883a 	mov	r5,r23
    364c:	000a1e40 	call	a1e4 <__sprint_r>
    3650:	1000081e 	bne	r2,zero,3674 <___vfprintf_internal_r+0x410>
    3654:	da000404 	addi	r8,sp,16
    3658:	003f5106 	br	33a0 <__alt_exception_stack_pointer+0xf80033a0>
    365c:	d8802017 	ldw	r2,128(sp)
    3660:	10000426 	beq	r2,zero,3674 <___vfprintf_internal_r+0x410>
    3664:	d9002d17 	ldw	r4,180(sp)
    3668:	d9801e04 	addi	r6,sp,120
    366c:	b80b883a 	mov	r5,r23
    3670:	000a1e40 	call	a1e4 <__sprint_r>
    3674:	b880030b 	ldhu	r2,12(r23)
    3678:	1080100c 	andi	r2,r2,64
    367c:	1005c01e 	bne	r2,zero,4d80 <___vfprintf_internal_r+0x1b1c>
    3680:	d8802f17 	ldw	r2,188(sp)
    3684:	dfc04717 	ldw	ra,284(sp)
    3688:	df004617 	ldw	fp,280(sp)
    368c:	ddc04517 	ldw	r23,276(sp)
    3690:	dd804417 	ldw	r22,272(sp)
    3694:	dd404317 	ldw	r21,268(sp)
    3698:	dd004217 	ldw	r20,264(sp)
    369c:	dcc04117 	ldw	r19,260(sp)
    36a0:	dc804017 	ldw	r18,256(sp)
    36a4:	dc403f17 	ldw	r17,252(sp)
    36a8:	dc003e17 	ldw	r16,248(sp)
    36ac:	dec04804 	addi	sp,sp,288
    36b0:	f800283a 	ret
    36b4:	d9002d17 	ldw	r4,180(sp)
    36b8:	00076240 	call	7624 <__sinit>
    36bc:	003f0206 	br	32c8 <__alt_exception_stack_pointer+0xf80032c8>
    36c0:	d9002e17 	ldw	r4,184(sp)
    36c4:	d9402e17 	ldw	r5,184(sp)
    36c8:	21000017 	ldw	r4,0(r4)
    36cc:	28800104 	addi	r2,r5,4
    36d0:	d9003115 	stw	r4,196(sp)
    36d4:	203fa716 	blt	r4,zero,3574 <__alt_exception_stack_pointer+0xf8003574>
    36d8:	d8802e15 	stw	r2,184(sp)
    36dc:	ac400007 	ldb	r17,0(r21)
    36e0:	003f4206 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    36e4:	ac400007 	ldb	r17,0(r21)
    36e8:	01000a84 	movi	r4,42
    36ec:	a8c00044 	addi	r3,r21,1
    36f0:	89075826 	beq	r17,r4,5454 <___vfprintf_internal_r+0x21f0>
    36f4:	8cbff404 	addi	r18,r17,-48
    36f8:	b486ae36 	bltu	r22,r18,51b4 <___vfprintf_internal_r+0x1f50>
    36fc:	0009883a 	mov	r4,zero
    3700:	1823883a 	mov	r17,r3
    3704:	01400284 	movi	r5,10
    3708:	000cea00 	call	cea0 <__mulsi3>
    370c:	88c00007 	ldb	r3,0(r17)
    3710:	1489883a 	add	r4,r2,r18
    3714:	8d400044 	addi	r21,r17,1
    3718:	1cbff404 	addi	r18,r3,-48
    371c:	a823883a 	mov	r17,r21
    3720:	b4bff82e 	bgeu	r22,r18,3704 <__alt_exception_stack_pointer+0xf8003704>
    3724:	1823883a 	mov	r17,r3
    3728:	2005f616 	blt	r4,zero,4f04 <___vfprintf_internal_r+0x1ca0>
    372c:	d9002a15 	stw	r4,168(sp)
    3730:	003f2f06 	br	33f0 <__alt_exception_stack_pointer+0xf80033f0>
    3734:	84002014 	ori	r16,r16,128
    3738:	ac400007 	ldb	r17,0(r21)
    373c:	003f2b06 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3740:	8cbff404 	addi	r18,r17,-48
    3744:	d8003115 	stw	zero,196(sp)
    3748:	0009883a 	mov	r4,zero
    374c:	a823883a 	mov	r17,r21
    3750:	01400284 	movi	r5,10
    3754:	000cea00 	call	cea0 <__mulsi3>
    3758:	88c00007 	ldb	r3,0(r17)
    375c:	9089883a 	add	r4,r18,r2
    3760:	ad400044 	addi	r21,r21,1
    3764:	1cbff404 	addi	r18,r3,-48
    3768:	a823883a 	mov	r17,r21
    376c:	b4bff82e 	bgeu	r22,r18,3750 <__alt_exception_stack_pointer+0xf8003750>
    3770:	1823883a 	mov	r17,r3
    3774:	d9003115 	stw	r4,196(sp)
    3778:	003f1d06 	br	33f0 <__alt_exception_stack_pointer+0xf80033f0>
    377c:	8025883a 	mov	r18,r16
    3780:	dc002903 	ldbu	r16,164(sp)
    3784:	e011883a 	mov	r8,fp
    3788:	84003fcc 	andi	r16,r16,255
    378c:	8007531e 	bne	r16,zero,54dc <___vfprintf_internal_r+0x2278>
    3790:	94800414 	ori	r18,r18,16
    3794:	9080080c 	andi	r2,r18,32
    3798:	1003a326 	beq	r2,zero,4628 <___vfprintf_internal_r+0x13c4>
    379c:	d9002e17 	ldw	r4,184(sp)
    37a0:	20800117 	ldw	r2,4(r4)
    37a4:	24c00017 	ldw	r19,0(r4)
    37a8:	21000204 	addi	r4,r4,8
    37ac:	d9002e15 	stw	r4,184(sp)
    37b0:	102d883a 	mov	r22,r2
    37b4:	10047316 	blt	r2,zero,4984 <___vfprintf_internal_r+0x1720>
    37b8:	d9002a17 	ldw	r4,168(sp)
    37bc:	df002783 	ldbu	fp,158(sp)
    37c0:	2003e416 	blt	r4,zero,4754 <___vfprintf_internal_r+0x14f0>
    37c4:	00ffdfc4 	movi	r3,-129
    37c8:	9d84b03a 	or	r2,r19,r22
    37cc:	90e4703a 	and	r18,r18,r3
    37d0:	10018026 	beq	r2,zero,3dd4 <___vfprintf_internal_r+0xb70>
    37d4:	b003ab26 	beq	r22,zero,4684 <___vfprintf_internal_r+0x1420>
    37d8:	dc402915 	stw	r17,164(sp)
    37dc:	dc001e04 	addi	r16,sp,120
    37e0:	b023883a 	mov	r17,r22
    37e4:	402d883a 	mov	r22,r8
    37e8:	9809883a 	mov	r4,r19
    37ec:	880b883a 	mov	r5,r17
    37f0:	01800284 	movi	r6,10
    37f4:	000f883a 	mov	r7,zero
    37f8:	000c7280 	call	c728 <__umoddi3>
    37fc:	10800c04 	addi	r2,r2,48
    3800:	843fffc4 	addi	r16,r16,-1
    3804:	9809883a 	mov	r4,r19
    3808:	880b883a 	mov	r5,r17
    380c:	80800005 	stb	r2,0(r16)
    3810:	01800284 	movi	r6,10
    3814:	000f883a 	mov	r7,zero
    3818:	000c12c0 	call	c12c <__udivdi3>
    381c:	1027883a 	mov	r19,r2
    3820:	10c4b03a 	or	r2,r2,r3
    3824:	1823883a 	mov	r17,r3
    3828:	103fef1e 	bne	r2,zero,37e8 <__alt_exception_stack_pointer+0xf80037e8>
    382c:	d8c02817 	ldw	r3,160(sp)
    3830:	dc402917 	ldw	r17,164(sp)
    3834:	b011883a 	mov	r8,r22
    3838:	1c07c83a 	sub	r3,r3,r16
    383c:	d8c02b15 	stw	r3,172(sp)
    3840:	00005f06 	br	39c0 <___vfprintf_internal_r+0x75c>
    3844:	8025883a 	mov	r18,r16
    3848:	dc002903 	ldbu	r16,164(sp)
    384c:	e011883a 	mov	r8,fp
    3850:	84003fcc 	andi	r16,r16,255
    3854:	80071e1e 	bne	r16,zero,54d0 <___vfprintf_internal_r+0x226c>
    3858:	9080020c 	andi	r2,r18,8
    385c:	1004af26 	beq	r2,zero,4b1c <___vfprintf_internal_r+0x18b8>
    3860:	d9002e17 	ldw	r4,184(sp)
    3864:	d9402e17 	ldw	r5,184(sp)
    3868:	d8802e17 	ldw	r2,184(sp)
    386c:	21000017 	ldw	r4,0(r4)
    3870:	29400117 	ldw	r5,4(r5)
    3874:	10800204 	addi	r2,r2,8
    3878:	d9003615 	stw	r4,216(sp)
    387c:	d9403815 	stw	r5,224(sp)
    3880:	d8802e15 	stw	r2,184(sp)
    3884:	d9003617 	ldw	r4,216(sp)
    3888:	d9403817 	ldw	r5,224(sp)
    388c:	da003d15 	stw	r8,244(sp)
    3890:	04000044 	movi	r16,1
    3894:	0009e5c0 	call	9e5c <__fpclassifyd>
    3898:	da003d17 	ldw	r8,244(sp)
    389c:	1404441e 	bne	r2,r16,49b0 <___vfprintf_internal_r+0x174c>
    38a0:	d9003617 	ldw	r4,216(sp)
    38a4:	d9403817 	ldw	r5,224(sp)
    38a8:	000d883a 	mov	r6,zero
    38ac:	000f883a 	mov	r7,zero
    38b0:	000e2a80 	call	e2a8 <__ledf2>
    38b4:	da003d17 	ldw	r8,244(sp)
    38b8:	1005e316 	blt	r2,zero,5048 <___vfprintf_internal_r+0x1de4>
    38bc:	df002783 	ldbu	fp,158(sp)
    38c0:	008011c4 	movi	r2,71
    38c4:	1445580e 	bge	r2,r17,4e28 <___vfprintf_internal_r+0x1bc4>
    38c8:	04000074 	movhi	r16,1
    38cc:	840a5b04 	addi	r16,r16,10604
    38d0:	00c000c4 	movi	r3,3
    38d4:	00bfdfc4 	movi	r2,-129
    38d8:	d8c02915 	stw	r3,164(sp)
    38dc:	90a4703a 	and	r18,r18,r2
    38e0:	d8c02b15 	stw	r3,172(sp)
    38e4:	d8002a15 	stw	zero,168(sp)
    38e8:	d8003215 	stw	zero,200(sp)
    38ec:	00003a06 	br	39d8 <___vfprintf_internal_r+0x774>
    38f0:	84000214 	ori	r16,r16,8
    38f4:	ac400007 	ldb	r17,0(r21)
    38f8:	003ebc06 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    38fc:	8025883a 	mov	r18,r16
    3900:	dc002903 	ldbu	r16,164(sp)
    3904:	e011883a 	mov	r8,fp
    3908:	84003fcc 	andi	r16,r16,255
    390c:	8007001e 	bne	r16,zero,5510 <___vfprintf_internal_r+0x22ac>
    3910:	94800414 	ori	r18,r18,16
    3914:	9080080c 	andi	r2,r18,32
    3918:	1002fa26 	beq	r2,zero,4504 <___vfprintf_internal_r+0x12a0>
    391c:	d9002e17 	ldw	r4,184(sp)
    3920:	d9402a17 	ldw	r5,168(sp)
    3924:	d8002785 	stb	zero,158(sp)
    3928:	20800204 	addi	r2,r4,8
    392c:	24c00017 	ldw	r19,0(r4)
    3930:	25800117 	ldw	r22,4(r4)
    3934:	2804b116 	blt	r5,zero,4bfc <___vfprintf_internal_r+0x1998>
    3938:	013fdfc4 	movi	r4,-129
    393c:	9d86b03a 	or	r3,r19,r22
    3940:	d8802e15 	stw	r2,184(sp)
    3944:	9124703a 	and	r18,r18,r4
    3948:	1802fb1e 	bne	r3,zero,4538 <___vfprintf_internal_r+0x12d4>
    394c:	d8c02a17 	ldw	r3,168(sp)
    3950:	0039883a 	mov	fp,zero
    3954:	1805e526 	beq	r3,zero,50ec <___vfprintf_internal_r+0x1e88>
    3958:	0027883a 	mov	r19,zero
    395c:	002d883a 	mov	r22,zero
    3960:	dc001e04 	addi	r16,sp,120
    3964:	9806d0fa 	srli	r3,r19,3
    3968:	b008977a 	slli	r4,r22,29
    396c:	b02cd0fa 	srli	r22,r22,3
    3970:	9cc001cc 	andi	r19,r19,7
    3974:	98800c04 	addi	r2,r19,48
    3978:	843fffc4 	addi	r16,r16,-1
    397c:	20e6b03a 	or	r19,r4,r3
    3980:	80800005 	stb	r2,0(r16)
    3984:	9d86b03a 	or	r3,r19,r22
    3988:	183ff61e 	bne	r3,zero,3964 <__alt_exception_stack_pointer+0xf8003964>
    398c:	90c0004c 	andi	r3,r18,1
    3990:	18014126 	beq	r3,zero,3e98 <___vfprintf_internal_r+0xc34>
    3994:	10803fcc 	andi	r2,r2,255
    3998:	1080201c 	xori	r2,r2,128
    399c:	10bfe004 	addi	r2,r2,-128
    39a0:	00c00c04 	movi	r3,48
    39a4:	10c13c26 	beq	r2,r3,3e98 <___vfprintf_internal_r+0xc34>
    39a8:	80ffffc5 	stb	r3,-1(r16)
    39ac:	d8c02817 	ldw	r3,160(sp)
    39b0:	80bfffc4 	addi	r2,r16,-1
    39b4:	1021883a 	mov	r16,r2
    39b8:	1887c83a 	sub	r3,r3,r2
    39bc:	d8c02b15 	stw	r3,172(sp)
    39c0:	d8802b17 	ldw	r2,172(sp)
    39c4:	d9002a17 	ldw	r4,168(sp)
    39c8:	1100010e 	bge	r2,r4,39d0 <___vfprintf_internal_r+0x76c>
    39cc:	2005883a 	mov	r2,r4
    39d0:	d8802915 	stw	r2,164(sp)
    39d4:	d8003215 	stw	zero,200(sp)
    39d8:	e7003fcc 	andi	fp,fp,255
    39dc:	e700201c 	xori	fp,fp,128
    39e0:	e73fe004 	addi	fp,fp,-128
    39e4:	e0000326 	beq	fp,zero,39f4 <___vfprintf_internal_r+0x790>
    39e8:	d8c02917 	ldw	r3,164(sp)
    39ec:	18c00044 	addi	r3,r3,1
    39f0:	d8c02915 	stw	r3,164(sp)
    39f4:	90c0008c 	andi	r3,r18,2
    39f8:	d8c02c15 	stw	r3,176(sp)
    39fc:	18000326 	beq	r3,zero,3a0c <___vfprintf_internal_r+0x7a8>
    3a00:	d8c02917 	ldw	r3,164(sp)
    3a04:	18c00084 	addi	r3,r3,2
    3a08:	d8c02915 	stw	r3,164(sp)
    3a0c:	90c0210c 	andi	r3,r18,132
    3a10:	d8c03015 	stw	r3,192(sp)
    3a14:	1801c51e 	bne	r3,zero,412c <___vfprintf_internal_r+0xec8>
    3a18:	d9003117 	ldw	r4,196(sp)
    3a1c:	d8c02917 	ldw	r3,164(sp)
    3a20:	20e7c83a 	sub	r19,r4,r3
    3a24:	04c1c10e 	bge	zero,r19,412c <___vfprintf_internal_r+0xec8>
    3a28:	02400404 	movi	r9,16
    3a2c:	d8c02017 	ldw	r3,128(sp)
    3a30:	d8801f17 	ldw	r2,124(sp)
    3a34:	4cc52f0e 	bge	r9,r19,4ef4 <___vfprintf_internal_r+0x1c90>
    3a38:	01400074 	movhi	r5,1
    3a3c:	294a6e84 	addi	r5,r5,10682
    3a40:	dc403b15 	stw	r17,236(sp)
    3a44:	d9403515 	stw	r5,212(sp)
    3a48:	9823883a 	mov	r17,r19
    3a4c:	482d883a 	mov	r22,r9
    3a50:	9027883a 	mov	r19,r18
    3a54:	070001c4 	movi	fp,7
    3a58:	8025883a 	mov	r18,r16
    3a5c:	dc002d17 	ldw	r16,180(sp)
    3a60:	00000306 	br	3a70 <___vfprintf_internal_r+0x80c>
    3a64:	8c7ffc04 	addi	r17,r17,-16
    3a68:	42000204 	addi	r8,r8,8
    3a6c:	b440130e 	bge	r22,r17,3abc <___vfprintf_internal_r+0x858>
    3a70:	01000074 	movhi	r4,1
    3a74:	18c00404 	addi	r3,r3,16
    3a78:	10800044 	addi	r2,r2,1
    3a7c:	210a6e84 	addi	r4,r4,10682
    3a80:	41000015 	stw	r4,0(r8)
    3a84:	45800115 	stw	r22,4(r8)
    3a88:	d8c02015 	stw	r3,128(sp)
    3a8c:	d8801f15 	stw	r2,124(sp)
    3a90:	e0bff40e 	bge	fp,r2,3a64 <__alt_exception_stack_pointer+0xf8003a64>
    3a94:	d9801e04 	addi	r6,sp,120
    3a98:	b80b883a 	mov	r5,r23
    3a9c:	8009883a 	mov	r4,r16
    3aa0:	000a1e40 	call	a1e4 <__sprint_r>
    3aa4:	103ef31e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    3aa8:	8c7ffc04 	addi	r17,r17,-16
    3aac:	d8c02017 	ldw	r3,128(sp)
    3ab0:	d8801f17 	ldw	r2,124(sp)
    3ab4:	da000404 	addi	r8,sp,16
    3ab8:	b47fed16 	blt	r22,r17,3a70 <__alt_exception_stack_pointer+0xf8003a70>
    3abc:	9021883a 	mov	r16,r18
    3ac0:	9825883a 	mov	r18,r19
    3ac4:	8827883a 	mov	r19,r17
    3ac8:	dc403b17 	ldw	r17,236(sp)
    3acc:	d9403517 	ldw	r5,212(sp)
    3ad0:	98c7883a 	add	r3,r19,r3
    3ad4:	10800044 	addi	r2,r2,1
    3ad8:	41400015 	stw	r5,0(r8)
    3adc:	44c00115 	stw	r19,4(r8)
    3ae0:	d8c02015 	stw	r3,128(sp)
    3ae4:	d8801f15 	stw	r2,124(sp)
    3ae8:	010001c4 	movi	r4,7
    3aec:	2082c516 	blt	r4,r2,4604 <___vfprintf_internal_r+0x13a0>
    3af0:	df002787 	ldb	fp,158(sp)
    3af4:	42000204 	addi	r8,r8,8
    3af8:	e0000c26 	beq	fp,zero,3b2c <___vfprintf_internal_r+0x8c8>
    3afc:	d8801f17 	ldw	r2,124(sp)
    3b00:	d9002784 	addi	r4,sp,158
    3b04:	18c00044 	addi	r3,r3,1
    3b08:	10800044 	addi	r2,r2,1
    3b0c:	41000015 	stw	r4,0(r8)
    3b10:	01000044 	movi	r4,1
    3b14:	41000115 	stw	r4,4(r8)
    3b18:	d8c02015 	stw	r3,128(sp)
    3b1c:	d8801f15 	stw	r2,124(sp)
    3b20:	010001c4 	movi	r4,7
    3b24:	20825e16 	blt	r4,r2,44a0 <___vfprintf_internal_r+0x123c>
    3b28:	42000204 	addi	r8,r8,8
    3b2c:	d8802c17 	ldw	r2,176(sp)
    3b30:	10000c26 	beq	r2,zero,3b64 <___vfprintf_internal_r+0x900>
    3b34:	d8801f17 	ldw	r2,124(sp)
    3b38:	d9002704 	addi	r4,sp,156
    3b3c:	18c00084 	addi	r3,r3,2
    3b40:	10800044 	addi	r2,r2,1
    3b44:	41000015 	stw	r4,0(r8)
    3b48:	01000084 	movi	r4,2
    3b4c:	41000115 	stw	r4,4(r8)
    3b50:	d8c02015 	stw	r3,128(sp)
    3b54:	d8801f15 	stw	r2,124(sp)
    3b58:	010001c4 	movi	r4,7
    3b5c:	20825816 	blt	r4,r2,44c0 <___vfprintf_internal_r+0x125c>
    3b60:	42000204 	addi	r8,r8,8
    3b64:	d9003017 	ldw	r4,192(sp)
    3b68:	00802004 	movi	r2,128
    3b6c:	2081bb26 	beq	r4,r2,425c <___vfprintf_internal_r+0xff8>
    3b70:	d9402a17 	ldw	r5,168(sp)
    3b74:	d8802b17 	ldw	r2,172(sp)
    3b78:	28adc83a 	sub	r22,r5,r2
    3b7c:	0580310e 	bge	zero,r22,3c44 <___vfprintf_internal_r+0x9e0>
    3b80:	07000404 	movi	fp,16
    3b84:	d8801f17 	ldw	r2,124(sp)
    3b88:	e584360e 	bge	fp,r22,4c64 <___vfprintf_internal_r+0x1a00>
    3b8c:	01400074 	movhi	r5,1
    3b90:	294a6a84 	addi	r5,r5,10666
    3b94:	dc402a15 	stw	r17,168(sp)
    3b98:	d9402c15 	stw	r5,176(sp)
    3b9c:	b023883a 	mov	r17,r22
    3ba0:	04c001c4 	movi	r19,7
    3ba4:	a82d883a 	mov	r22,r21
    3ba8:	902b883a 	mov	r21,r18
    3bac:	8025883a 	mov	r18,r16
    3bb0:	dc002d17 	ldw	r16,180(sp)
    3bb4:	00000306 	br	3bc4 <___vfprintf_internal_r+0x960>
    3bb8:	8c7ffc04 	addi	r17,r17,-16
    3bbc:	42000204 	addi	r8,r8,8
    3bc0:	e440110e 	bge	fp,r17,3c08 <___vfprintf_internal_r+0x9a4>
    3bc4:	18c00404 	addi	r3,r3,16
    3bc8:	10800044 	addi	r2,r2,1
    3bcc:	45000015 	stw	r20,0(r8)
    3bd0:	47000115 	stw	fp,4(r8)
    3bd4:	d8c02015 	stw	r3,128(sp)
    3bd8:	d8801f15 	stw	r2,124(sp)
    3bdc:	98bff60e 	bge	r19,r2,3bb8 <__alt_exception_stack_pointer+0xf8003bb8>
    3be0:	d9801e04 	addi	r6,sp,120
    3be4:	b80b883a 	mov	r5,r23
    3be8:	8009883a 	mov	r4,r16
    3bec:	000a1e40 	call	a1e4 <__sprint_r>
    3bf0:	103ea01e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    3bf4:	8c7ffc04 	addi	r17,r17,-16
    3bf8:	d8c02017 	ldw	r3,128(sp)
    3bfc:	d8801f17 	ldw	r2,124(sp)
    3c00:	da000404 	addi	r8,sp,16
    3c04:	e47fef16 	blt	fp,r17,3bc4 <__alt_exception_stack_pointer+0xf8003bc4>
    3c08:	9021883a 	mov	r16,r18
    3c0c:	a825883a 	mov	r18,r21
    3c10:	b02b883a 	mov	r21,r22
    3c14:	882d883a 	mov	r22,r17
    3c18:	dc402a17 	ldw	r17,168(sp)
    3c1c:	d9002c17 	ldw	r4,176(sp)
    3c20:	1d87883a 	add	r3,r3,r22
    3c24:	10800044 	addi	r2,r2,1
    3c28:	41000015 	stw	r4,0(r8)
    3c2c:	45800115 	stw	r22,4(r8)
    3c30:	d8c02015 	stw	r3,128(sp)
    3c34:	d8801f15 	stw	r2,124(sp)
    3c38:	010001c4 	movi	r4,7
    3c3c:	20821016 	blt	r4,r2,4480 <___vfprintf_internal_r+0x121c>
    3c40:	42000204 	addi	r8,r8,8
    3c44:	9080400c 	andi	r2,r18,256
    3c48:	10013a1e 	bne	r2,zero,4134 <___vfprintf_internal_r+0xed0>
    3c4c:	d9402b17 	ldw	r5,172(sp)
    3c50:	d8801f17 	ldw	r2,124(sp)
    3c54:	44000015 	stw	r16,0(r8)
    3c58:	1947883a 	add	r3,r3,r5
    3c5c:	10800044 	addi	r2,r2,1
    3c60:	41400115 	stw	r5,4(r8)
    3c64:	d8c02015 	stw	r3,128(sp)
    3c68:	d8801f15 	stw	r2,124(sp)
    3c6c:	010001c4 	movi	r4,7
    3c70:	2081f516 	blt	r4,r2,4448 <___vfprintf_internal_r+0x11e4>
    3c74:	42000204 	addi	r8,r8,8
    3c78:	9480010c 	andi	r18,r18,4
    3c7c:	90003226 	beq	r18,zero,3d48 <___vfprintf_internal_r+0xae4>
    3c80:	d9403117 	ldw	r5,196(sp)
    3c84:	d8802917 	ldw	r2,164(sp)
    3c88:	28a1c83a 	sub	r16,r5,r2
    3c8c:	04002e0e 	bge	zero,r16,3d48 <___vfprintf_internal_r+0xae4>
    3c90:	04400404 	movi	r17,16
    3c94:	d8801f17 	ldw	r2,124(sp)
    3c98:	8c04c40e 	bge	r17,r16,4fac <___vfprintf_internal_r+0x1d48>
    3c9c:	01400074 	movhi	r5,1
    3ca0:	294a6e84 	addi	r5,r5,10682
    3ca4:	d9403515 	stw	r5,212(sp)
    3ca8:	048001c4 	movi	r18,7
    3cac:	dcc02d17 	ldw	r19,180(sp)
    3cb0:	00000306 	br	3cc0 <___vfprintf_internal_r+0xa5c>
    3cb4:	843ffc04 	addi	r16,r16,-16
    3cb8:	42000204 	addi	r8,r8,8
    3cbc:	8c00130e 	bge	r17,r16,3d0c <___vfprintf_internal_r+0xaa8>
    3cc0:	01000074 	movhi	r4,1
    3cc4:	18c00404 	addi	r3,r3,16
    3cc8:	10800044 	addi	r2,r2,1
    3ccc:	210a6e84 	addi	r4,r4,10682
    3cd0:	41000015 	stw	r4,0(r8)
    3cd4:	44400115 	stw	r17,4(r8)
    3cd8:	d8c02015 	stw	r3,128(sp)
    3cdc:	d8801f15 	stw	r2,124(sp)
    3ce0:	90bff40e 	bge	r18,r2,3cb4 <__alt_exception_stack_pointer+0xf8003cb4>
    3ce4:	d9801e04 	addi	r6,sp,120
    3ce8:	b80b883a 	mov	r5,r23
    3cec:	9809883a 	mov	r4,r19
    3cf0:	000a1e40 	call	a1e4 <__sprint_r>
    3cf4:	103e5f1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    3cf8:	843ffc04 	addi	r16,r16,-16
    3cfc:	d8c02017 	ldw	r3,128(sp)
    3d00:	d8801f17 	ldw	r2,124(sp)
    3d04:	da000404 	addi	r8,sp,16
    3d08:	8c3fed16 	blt	r17,r16,3cc0 <__alt_exception_stack_pointer+0xf8003cc0>
    3d0c:	d9403517 	ldw	r5,212(sp)
    3d10:	1c07883a 	add	r3,r3,r16
    3d14:	10800044 	addi	r2,r2,1
    3d18:	41400015 	stw	r5,0(r8)
    3d1c:	44000115 	stw	r16,4(r8)
    3d20:	d8c02015 	stw	r3,128(sp)
    3d24:	d8801f15 	stw	r2,124(sp)
    3d28:	010001c4 	movi	r4,7
    3d2c:	2080060e 	bge	r4,r2,3d48 <___vfprintf_internal_r+0xae4>
    3d30:	d9002d17 	ldw	r4,180(sp)
    3d34:	d9801e04 	addi	r6,sp,120
    3d38:	b80b883a 	mov	r5,r23
    3d3c:	000a1e40 	call	a1e4 <__sprint_r>
    3d40:	103e4c1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    3d44:	d8c02017 	ldw	r3,128(sp)
    3d48:	d8803117 	ldw	r2,196(sp)
    3d4c:	d9002917 	ldw	r4,164(sp)
    3d50:	1100010e 	bge	r2,r4,3d58 <___vfprintf_internal_r+0xaf4>
    3d54:	2005883a 	mov	r2,r4
    3d58:	d9402f17 	ldw	r5,188(sp)
    3d5c:	288b883a 	add	r5,r5,r2
    3d60:	d9402f15 	stw	r5,188(sp)
    3d64:	1801c01e 	bne	r3,zero,4468 <___vfprintf_internal_r+0x1204>
    3d68:	a8800007 	ldb	r2,0(r21)
    3d6c:	d8001f15 	stw	zero,124(sp)
    3d70:	da000404 	addi	r8,sp,16
    3d74:	103d751e 	bne	r2,zero,334c <__alt_exception_stack_pointer+0xf800334c>
    3d78:	a823883a 	mov	r17,r21
    3d7c:	003d8b06 	br	33ac <__alt_exception_stack_pointer+0xf80033ac>
    3d80:	8025883a 	mov	r18,r16
    3d84:	dc002903 	ldbu	r16,164(sp)
    3d88:	e011883a 	mov	r8,fp
    3d8c:	84003fcc 	andi	r16,r16,255
    3d90:	8005e51e 	bne	r16,zero,5528 <___vfprintf_internal_r+0x22c4>
    3d94:	94800414 	ori	r18,r18,16
    3d98:	9080080c 	andi	r2,r18,32
    3d9c:	10022b26 	beq	r2,zero,464c <___vfprintf_internal_r+0x13e8>
    3da0:	d9002e17 	ldw	r4,184(sp)
    3da4:	d9402a17 	ldw	r5,168(sp)
    3da8:	d8002785 	stb	zero,158(sp)
    3dac:	20c00204 	addi	r3,r4,8
    3db0:	24c00017 	ldw	r19,0(r4)
    3db4:	25800117 	ldw	r22,4(r4)
    3db8:	28042e16 	blt	r5,zero,4e74 <___vfprintf_internal_r+0x1c10>
    3dbc:	013fdfc4 	movi	r4,-129
    3dc0:	9d84b03a 	or	r2,r19,r22
    3dc4:	d8c02e15 	stw	r3,184(sp)
    3dc8:	9124703a 	and	r18,r18,r4
    3dcc:	0039883a 	mov	fp,zero
    3dd0:	103e801e 	bne	r2,zero,37d4 <__alt_exception_stack_pointer+0xf80037d4>
    3dd4:	d9002a17 	ldw	r4,168(sp)
    3dd8:	2002e01e 	bne	r4,zero,495c <___vfprintf_internal_r+0x16f8>
    3ddc:	d8002a15 	stw	zero,168(sp)
    3de0:	d8002b15 	stw	zero,172(sp)
    3de4:	dc001e04 	addi	r16,sp,120
    3de8:	003ef506 	br	39c0 <__alt_exception_stack_pointer+0xf80039c0>
    3dec:	8025883a 	mov	r18,r16
    3df0:	dc002903 	ldbu	r16,164(sp)
    3df4:	e011883a 	mov	r8,fp
    3df8:	84003fcc 	andi	r16,r16,255
    3dfc:	8005ba1e 	bne	r16,zero,54e8 <___vfprintf_internal_r+0x2284>
    3e00:	01000074 	movhi	r4,1
    3e04:	210a5e04 	addi	r4,r4,10616
    3e08:	d9003915 	stw	r4,228(sp)
    3e0c:	9080080c 	andi	r2,r18,32
    3e10:	10006126 	beq	r2,zero,3f98 <___vfprintf_internal_r+0xd34>
    3e14:	d9402e17 	ldw	r5,184(sp)
    3e18:	2cc00017 	ldw	r19,0(r5)
    3e1c:	2d800117 	ldw	r22,4(r5)
    3e20:	29400204 	addi	r5,r5,8
    3e24:	d9402e15 	stw	r5,184(sp)
    3e28:	9080004c 	andi	r2,r18,1
    3e2c:	1001ac26 	beq	r2,zero,44e0 <___vfprintf_internal_r+0x127c>
    3e30:	9d84b03a 	or	r2,r19,r22
    3e34:	10038526 	beq	r2,zero,4c4c <___vfprintf_internal_r+0x19e8>
    3e38:	d8c02a17 	ldw	r3,168(sp)
    3e3c:	00800c04 	movi	r2,48
    3e40:	d8802705 	stb	r2,156(sp)
    3e44:	dc402745 	stb	r17,157(sp)
    3e48:	d8002785 	stb	zero,158(sp)
    3e4c:	90800094 	ori	r2,r18,2
    3e50:	18047916 	blt	r3,zero,5038 <___vfprintf_internal_r+0x1dd4>
    3e54:	00bfdfc4 	movi	r2,-129
    3e58:	90a4703a 	and	r18,r18,r2
    3e5c:	94800094 	ori	r18,r18,2
    3e60:	0039883a 	mov	fp,zero
    3e64:	d9003917 	ldw	r4,228(sp)
    3e68:	dc001e04 	addi	r16,sp,120
    3e6c:	988003cc 	andi	r2,r19,15
    3e70:	b006973a 	slli	r3,r22,28
    3e74:	2085883a 	add	r2,r4,r2
    3e78:	9826d13a 	srli	r19,r19,4
    3e7c:	10800003 	ldbu	r2,0(r2)
    3e80:	b02cd13a 	srli	r22,r22,4
    3e84:	843fffc4 	addi	r16,r16,-1
    3e88:	1ce6b03a 	or	r19,r3,r19
    3e8c:	80800005 	stb	r2,0(r16)
    3e90:	9d84b03a 	or	r2,r19,r22
    3e94:	103ff51e 	bne	r2,zero,3e6c <__alt_exception_stack_pointer+0xf8003e6c>
    3e98:	d8c02817 	ldw	r3,160(sp)
    3e9c:	1c07c83a 	sub	r3,r3,r16
    3ea0:	d8c02b15 	stw	r3,172(sp)
    3ea4:	003ec606 	br	39c0 <__alt_exception_stack_pointer+0xf80039c0>
    3ea8:	8025883a 	mov	r18,r16
    3eac:	dc002903 	ldbu	r16,164(sp)
    3eb0:	e011883a 	mov	r8,fp
    3eb4:	84003fcc 	andi	r16,r16,255
    3eb8:	803e9626 	beq	r16,zero,3914 <__alt_exception_stack_pointer+0xf8003914>
    3ebc:	d8c02b03 	ldbu	r3,172(sp)
    3ec0:	d8c02785 	stb	r3,158(sp)
    3ec4:	003e9306 	br	3914 <__alt_exception_stack_pointer+0xf8003914>
    3ec8:	00c00044 	movi	r3,1
    3ecc:	d8c02905 	stb	r3,164(sp)
    3ed0:	00c00ac4 	movi	r3,43
    3ed4:	d8c02b05 	stb	r3,172(sp)
    3ed8:	ac400007 	ldb	r17,0(r21)
    3edc:	003d4306 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3ee0:	84000814 	ori	r16,r16,32
    3ee4:	ac400007 	ldb	r17,0(r21)
    3ee8:	003d4006 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3eec:	d8802e17 	ldw	r2,184(sp)
    3ef0:	8025883a 	mov	r18,r16
    3ef4:	d8002785 	stb	zero,158(sp)
    3ef8:	14000017 	ldw	r16,0(r2)
    3efc:	e011883a 	mov	r8,fp
    3f00:	14c00104 	addi	r19,r2,4
    3f04:	80042d26 	beq	r16,zero,4fbc <___vfprintf_internal_r+0x1d58>
    3f08:	d8c02a17 	ldw	r3,168(sp)
    3f0c:	1803e416 	blt	r3,zero,4ea0 <___vfprintf_internal_r+0x1c3c>
    3f10:	180d883a 	mov	r6,r3
    3f14:	000b883a 	mov	r5,zero
    3f18:	8009883a 	mov	r4,r16
    3f1c:	df003d15 	stw	fp,244(sp)
    3f20:	00083900 	call	8390 <memchr>
    3f24:	da003d17 	ldw	r8,244(sp)
    3f28:	10046826 	beq	r2,zero,50cc <___vfprintf_internal_r+0x1e68>
    3f2c:	1405c83a 	sub	r2,r2,r16
    3f30:	d8802b15 	stw	r2,172(sp)
    3f34:	1003e016 	blt	r2,zero,4eb8 <___vfprintf_internal_r+0x1c54>
    3f38:	df002783 	ldbu	fp,158(sp)
    3f3c:	d8802915 	stw	r2,164(sp)
    3f40:	dcc02e15 	stw	r19,184(sp)
    3f44:	d8002a15 	stw	zero,168(sp)
    3f48:	d8003215 	stw	zero,200(sp)
    3f4c:	003ea206 	br	39d8 <__alt_exception_stack_pointer+0xf80039d8>
    3f50:	8025883a 	mov	r18,r16
    3f54:	dc002903 	ldbu	r16,164(sp)
    3f58:	e011883a 	mov	r8,fp
    3f5c:	84003fcc 	andi	r16,r16,255
    3f60:	803f8d26 	beq	r16,zero,3d98 <__alt_exception_stack_pointer+0xf8003d98>
    3f64:	d8c02b03 	ldbu	r3,172(sp)
    3f68:	d8c02785 	stb	r3,158(sp)
    3f6c:	003f8a06 	br	3d98 <__alt_exception_stack_pointer+0xf8003d98>
    3f70:	8025883a 	mov	r18,r16
    3f74:	dc002903 	ldbu	r16,164(sp)
    3f78:	e011883a 	mov	r8,fp
    3f7c:	84003fcc 	andi	r16,r16,255
    3f80:	8005661e 	bne	r16,zero,551c <___vfprintf_internal_r+0x22b8>
    3f84:	01000074 	movhi	r4,1
    3f88:	210a6304 	addi	r4,r4,10636
    3f8c:	d9003915 	stw	r4,228(sp)
    3f90:	9080080c 	andi	r2,r18,32
    3f94:	103f9f1e 	bne	r2,zero,3e14 <__alt_exception_stack_pointer+0xf8003e14>
    3f98:	9080040c 	andi	r2,r18,16
    3f9c:	1002eb26 	beq	r2,zero,4b4c <___vfprintf_internal_r+0x18e8>
    3fa0:	d8802e17 	ldw	r2,184(sp)
    3fa4:	002d883a 	mov	r22,zero
    3fa8:	14c00017 	ldw	r19,0(r2)
    3fac:	10800104 	addi	r2,r2,4
    3fb0:	d8802e15 	stw	r2,184(sp)
    3fb4:	003f9c06 	br	3e28 <__alt_exception_stack_pointer+0xf8003e28>
    3fb8:	d8802b07 	ldb	r2,172(sp)
    3fbc:	1002e11e 	bne	r2,zero,4b44 <___vfprintf_internal_r+0x18e0>
    3fc0:	00c00044 	movi	r3,1
    3fc4:	d8c02905 	stb	r3,164(sp)
    3fc8:	00c00804 	movi	r3,32
    3fcc:	d8c02b05 	stb	r3,172(sp)
    3fd0:	ac400007 	ldb	r17,0(r21)
    3fd4:	003d0506 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3fd8:	84000054 	ori	r16,r16,1
    3fdc:	ac400007 	ldb	r17,0(r21)
    3fe0:	003d0206 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    3fe4:	8025883a 	mov	r18,r16
    3fe8:	dc002903 	ldbu	r16,164(sp)
    3fec:	e011883a 	mov	r8,fp
    3ff0:	84003fcc 	andi	r16,r16,255
    3ff4:	803de726 	beq	r16,zero,3794 <__alt_exception_stack_pointer+0xf8003794>
    3ff8:	d8c02b03 	ldbu	r3,172(sp)
    3ffc:	d8c02785 	stb	r3,158(sp)
    4000:	003de406 	br	3794 <__alt_exception_stack_pointer+0xf8003794>
    4004:	84001014 	ori	r16,r16,64
    4008:	ac400007 	ldb	r17,0(r21)
    400c:	003cf706 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    4010:	ac400007 	ldb	r17,0(r21)
    4014:	00801b04 	movi	r2,108
    4018:	88838f26 	beq	r17,r2,4e58 <___vfprintf_internal_r+0x1bf4>
    401c:	84000414 	ori	r16,r16,16
    4020:	003cf206 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    4024:	8025883a 	mov	r18,r16
    4028:	dc002903 	ldbu	r16,164(sp)
    402c:	e011883a 	mov	r8,fp
    4030:	84003fcc 	andi	r16,r16,255
    4034:	80053f1e 	bne	r16,zero,5534 <___vfprintf_internal_r+0x22d0>
    4038:	9080080c 	andi	r2,r18,32
    403c:	1002d226 	beq	r2,zero,4b88 <___vfprintf_internal_r+0x1924>
    4040:	d9002e17 	ldw	r4,184(sp)
    4044:	d9402f17 	ldw	r5,188(sp)
    4048:	20800017 	ldw	r2,0(r4)
    404c:	2807d7fa 	srai	r3,r5,31
    4050:	21000104 	addi	r4,r4,4
    4054:	d9002e15 	stw	r4,184(sp)
    4058:	11400015 	stw	r5,0(r2)
    405c:	10c00115 	stw	r3,4(r2)
    4060:	003cb806 	br	3344 <__alt_exception_stack_pointer+0xf8003344>
    4064:	d8c02e17 	ldw	r3,184(sp)
    4068:	d9002e17 	ldw	r4,184(sp)
    406c:	8025883a 	mov	r18,r16
    4070:	18800017 	ldw	r2,0(r3)
    4074:	21000104 	addi	r4,r4,4
    4078:	00c00044 	movi	r3,1
    407c:	e011883a 	mov	r8,fp
    4080:	d8c02915 	stw	r3,164(sp)
    4084:	d8002785 	stb	zero,158(sp)
    4088:	d8801405 	stb	r2,80(sp)
    408c:	d9002e15 	stw	r4,184(sp)
    4090:	d8c02b15 	stw	r3,172(sp)
    4094:	d8002a15 	stw	zero,168(sp)
    4098:	d8003215 	stw	zero,200(sp)
    409c:	dc001404 	addi	r16,sp,80
    40a0:	0039883a 	mov	fp,zero
    40a4:	003e5306 	br	39f4 <__alt_exception_stack_pointer+0xf80039f4>
    40a8:	01000074 	movhi	r4,1
    40ac:	210a6304 	addi	r4,r4,10636
    40b0:	0039883a 	mov	fp,zero
    40b4:	d9003915 	stw	r4,228(sp)
    40b8:	04401e04 	movi	r17,120
    40bc:	003f6906 	br	3e64 <__alt_exception_stack_pointer+0xf8003e64>
    40c0:	8025883a 	mov	r18,r16
    40c4:	dc002903 	ldbu	r16,164(sp)
    40c8:	e011883a 	mov	r8,fp
    40cc:	84003fcc 	andi	r16,r16,255
    40d0:	8005081e 	bne	r16,zero,54f4 <___vfprintf_internal_r+0x2290>
    40d4:	883d6126 	beq	r17,zero,365c <__alt_exception_stack_pointer+0xf800365c>
    40d8:	00c00044 	movi	r3,1
    40dc:	d8c02915 	stw	r3,164(sp)
    40e0:	dc401405 	stb	r17,80(sp)
    40e4:	d8002785 	stb	zero,158(sp)
    40e8:	003fe906 	br	4090 <__alt_exception_stack_pointer+0xf8004090>
    40ec:	01400074 	movhi	r5,1
    40f0:	294a6304 	addi	r5,r5,10636
    40f4:	d9403915 	stw	r5,228(sp)
    40f8:	d8c02e15 	stw	r3,184(sp)
    40fc:	1025883a 	mov	r18,r2
    4100:	04401e04 	movi	r17,120
    4104:	9d84b03a 	or	r2,r19,r22
    4108:	1000fc1e 	bne	r2,zero,44fc <___vfprintf_internal_r+0x1298>
    410c:	0039883a 	mov	fp,zero
    4110:	00800084 	movi	r2,2
    4114:	10803fcc 	andi	r2,r2,255
    4118:	00c00044 	movi	r3,1
    411c:	10c20f26 	beq	r2,r3,495c <___vfprintf_internal_r+0x16f8>
    4120:	00c00084 	movi	r3,2
    4124:	10fd3326 	beq	r2,r3,35f4 <__alt_exception_stack_pointer+0xf80035f4>
    4128:	003e0b06 	br	3958 <__alt_exception_stack_pointer+0xf8003958>
    412c:	d8c02017 	ldw	r3,128(sp)
    4130:	003e7106 	br	3af8 <__alt_exception_stack_pointer+0xf8003af8>
    4134:	00801944 	movi	r2,101
    4138:	14407e0e 	bge	r2,r17,4334 <___vfprintf_internal_r+0x10d0>
    413c:	d9003617 	ldw	r4,216(sp)
    4140:	d9403817 	ldw	r5,224(sp)
    4144:	000d883a 	mov	r6,zero
    4148:	000f883a 	mov	r7,zero
    414c:	d8c03c15 	stw	r3,240(sp)
    4150:	da003d15 	stw	r8,244(sp)
    4154:	000e1440 	call	e144 <__eqdf2>
    4158:	d8c03c17 	ldw	r3,240(sp)
    415c:	da003d17 	ldw	r8,244(sp)
    4160:	1000f71e 	bne	r2,zero,4540 <___vfprintf_internal_r+0x12dc>
    4164:	d8801f17 	ldw	r2,124(sp)
    4168:	01000074 	movhi	r4,1
    416c:	210a6a04 	addi	r4,r4,10664
    4170:	18c00044 	addi	r3,r3,1
    4174:	10800044 	addi	r2,r2,1
    4178:	41000015 	stw	r4,0(r8)
    417c:	01000044 	movi	r4,1
    4180:	41000115 	stw	r4,4(r8)
    4184:	d8c02015 	stw	r3,128(sp)
    4188:	d8801f15 	stw	r2,124(sp)
    418c:	010001c4 	movi	r4,7
    4190:	2082b816 	blt	r4,r2,4c74 <___vfprintf_internal_r+0x1a10>
    4194:	42000204 	addi	r8,r8,8
    4198:	d8802617 	ldw	r2,152(sp)
    419c:	d9403317 	ldw	r5,204(sp)
    41a0:	11400216 	blt	r2,r5,41ac <___vfprintf_internal_r+0xf48>
    41a4:	9080004c 	andi	r2,r18,1
    41a8:	103eb326 	beq	r2,zero,3c78 <__alt_exception_stack_pointer+0xf8003c78>
    41ac:	d8803717 	ldw	r2,220(sp)
    41b0:	d9003417 	ldw	r4,208(sp)
    41b4:	d9403717 	ldw	r5,220(sp)
    41b8:	1887883a 	add	r3,r3,r2
    41bc:	d8801f17 	ldw	r2,124(sp)
    41c0:	41000015 	stw	r4,0(r8)
    41c4:	41400115 	stw	r5,4(r8)
    41c8:	10800044 	addi	r2,r2,1
    41cc:	d8c02015 	stw	r3,128(sp)
    41d0:	d8801f15 	stw	r2,124(sp)
    41d4:	010001c4 	movi	r4,7
    41d8:	20832916 	blt	r4,r2,4e80 <___vfprintf_internal_r+0x1c1c>
    41dc:	42000204 	addi	r8,r8,8
    41e0:	d8803317 	ldw	r2,204(sp)
    41e4:	143fffc4 	addi	r16,r2,-1
    41e8:	043ea30e 	bge	zero,r16,3c78 <__alt_exception_stack_pointer+0xf8003c78>
    41ec:	04400404 	movi	r17,16
    41f0:	d8801f17 	ldw	r2,124(sp)
    41f4:	8c00880e 	bge	r17,r16,4418 <___vfprintf_internal_r+0x11b4>
    41f8:	01400074 	movhi	r5,1
    41fc:	294a6a84 	addi	r5,r5,10666
    4200:	d9402c15 	stw	r5,176(sp)
    4204:	058001c4 	movi	r22,7
    4208:	dcc02d17 	ldw	r19,180(sp)
    420c:	00000306 	br	421c <___vfprintf_internal_r+0xfb8>
    4210:	42000204 	addi	r8,r8,8
    4214:	843ffc04 	addi	r16,r16,-16
    4218:	8c00820e 	bge	r17,r16,4424 <___vfprintf_internal_r+0x11c0>
    421c:	18c00404 	addi	r3,r3,16
    4220:	10800044 	addi	r2,r2,1
    4224:	45000015 	stw	r20,0(r8)
    4228:	44400115 	stw	r17,4(r8)
    422c:	d8c02015 	stw	r3,128(sp)
    4230:	d8801f15 	stw	r2,124(sp)
    4234:	b0bff60e 	bge	r22,r2,4210 <__alt_exception_stack_pointer+0xf8004210>
    4238:	d9801e04 	addi	r6,sp,120
    423c:	b80b883a 	mov	r5,r23
    4240:	9809883a 	mov	r4,r19
    4244:	000a1e40 	call	a1e4 <__sprint_r>
    4248:	103d0a1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    424c:	d8c02017 	ldw	r3,128(sp)
    4250:	d8801f17 	ldw	r2,124(sp)
    4254:	da000404 	addi	r8,sp,16
    4258:	003fee06 	br	4214 <__alt_exception_stack_pointer+0xf8004214>
    425c:	d9403117 	ldw	r5,196(sp)
    4260:	d8802917 	ldw	r2,164(sp)
    4264:	28adc83a 	sub	r22,r5,r2
    4268:	05be410e 	bge	zero,r22,3b70 <__alt_exception_stack_pointer+0xf8003b70>
    426c:	07000404 	movi	fp,16
    4270:	d8801f17 	ldw	r2,124(sp)
    4274:	e5838f0e 	bge	fp,r22,50b4 <___vfprintf_internal_r+0x1e50>
    4278:	01400074 	movhi	r5,1
    427c:	294a6a84 	addi	r5,r5,10666
    4280:	dc403015 	stw	r17,192(sp)
    4284:	d9402c15 	stw	r5,176(sp)
    4288:	b023883a 	mov	r17,r22
    428c:	04c001c4 	movi	r19,7
    4290:	a82d883a 	mov	r22,r21
    4294:	902b883a 	mov	r21,r18
    4298:	8025883a 	mov	r18,r16
    429c:	dc002d17 	ldw	r16,180(sp)
    42a0:	00000306 	br	42b0 <___vfprintf_internal_r+0x104c>
    42a4:	8c7ffc04 	addi	r17,r17,-16
    42a8:	42000204 	addi	r8,r8,8
    42ac:	e440110e 	bge	fp,r17,42f4 <___vfprintf_internal_r+0x1090>
    42b0:	18c00404 	addi	r3,r3,16
    42b4:	10800044 	addi	r2,r2,1
    42b8:	45000015 	stw	r20,0(r8)
    42bc:	47000115 	stw	fp,4(r8)
    42c0:	d8c02015 	stw	r3,128(sp)
    42c4:	d8801f15 	stw	r2,124(sp)
    42c8:	98bff60e 	bge	r19,r2,42a4 <__alt_exception_stack_pointer+0xf80042a4>
    42cc:	d9801e04 	addi	r6,sp,120
    42d0:	b80b883a 	mov	r5,r23
    42d4:	8009883a 	mov	r4,r16
    42d8:	000a1e40 	call	a1e4 <__sprint_r>
    42dc:	103ce51e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    42e0:	8c7ffc04 	addi	r17,r17,-16
    42e4:	d8c02017 	ldw	r3,128(sp)
    42e8:	d8801f17 	ldw	r2,124(sp)
    42ec:	da000404 	addi	r8,sp,16
    42f0:	e47fef16 	blt	fp,r17,42b0 <__alt_exception_stack_pointer+0xf80042b0>
    42f4:	9021883a 	mov	r16,r18
    42f8:	a825883a 	mov	r18,r21
    42fc:	b02b883a 	mov	r21,r22
    4300:	882d883a 	mov	r22,r17
    4304:	dc403017 	ldw	r17,192(sp)
    4308:	d9002c17 	ldw	r4,176(sp)
    430c:	1d87883a 	add	r3,r3,r22
    4310:	10800044 	addi	r2,r2,1
    4314:	41000015 	stw	r4,0(r8)
    4318:	45800115 	stw	r22,4(r8)
    431c:	d8c02015 	stw	r3,128(sp)
    4320:	d8801f15 	stw	r2,124(sp)
    4324:	010001c4 	movi	r4,7
    4328:	20818e16 	blt	r4,r2,4964 <___vfprintf_internal_r+0x1700>
    432c:	42000204 	addi	r8,r8,8
    4330:	003e0f06 	br	3b70 <__alt_exception_stack_pointer+0xf8003b70>
    4334:	d9403317 	ldw	r5,204(sp)
    4338:	00800044 	movi	r2,1
    433c:	18c00044 	addi	r3,r3,1
    4340:	1141530e 	bge	r2,r5,4890 <___vfprintf_internal_r+0x162c>
    4344:	dc401f17 	ldw	r17,124(sp)
    4348:	00800044 	movi	r2,1
    434c:	40800115 	stw	r2,4(r8)
    4350:	8c400044 	addi	r17,r17,1
    4354:	44000015 	stw	r16,0(r8)
    4358:	d8c02015 	stw	r3,128(sp)
    435c:	dc401f15 	stw	r17,124(sp)
    4360:	008001c4 	movi	r2,7
    4364:	14416b16 	blt	r2,r17,4914 <___vfprintf_internal_r+0x16b0>
    4368:	42000204 	addi	r8,r8,8
    436c:	d8803717 	ldw	r2,220(sp)
    4370:	d9003417 	ldw	r4,208(sp)
    4374:	8c400044 	addi	r17,r17,1
    4378:	10c7883a 	add	r3,r2,r3
    437c:	40800115 	stw	r2,4(r8)
    4380:	41000015 	stw	r4,0(r8)
    4384:	d8c02015 	stw	r3,128(sp)
    4388:	dc401f15 	stw	r17,124(sp)
    438c:	008001c4 	movi	r2,7
    4390:	14416916 	blt	r2,r17,4938 <___vfprintf_internal_r+0x16d4>
    4394:	45800204 	addi	r22,r8,8
    4398:	d9003617 	ldw	r4,216(sp)
    439c:	d9403817 	ldw	r5,224(sp)
    43a0:	000d883a 	mov	r6,zero
    43a4:	000f883a 	mov	r7,zero
    43a8:	d8c03c15 	stw	r3,240(sp)
    43ac:	000e1440 	call	e144 <__eqdf2>
    43b0:	d8c03c17 	ldw	r3,240(sp)
    43b4:	1000bc26 	beq	r2,zero,46a8 <___vfprintf_internal_r+0x1444>
    43b8:	d9403317 	ldw	r5,204(sp)
    43bc:	84000044 	addi	r16,r16,1
    43c0:	8c400044 	addi	r17,r17,1
    43c4:	28bfffc4 	addi	r2,r5,-1
    43c8:	1887883a 	add	r3,r3,r2
    43cc:	b0800115 	stw	r2,4(r22)
    43d0:	b4000015 	stw	r16,0(r22)
    43d4:	d8c02015 	stw	r3,128(sp)
    43d8:	dc401f15 	stw	r17,124(sp)
    43dc:	008001c4 	movi	r2,7
    43e0:	14414316 	blt	r2,r17,48f0 <___vfprintf_internal_r+0x168c>
    43e4:	b5800204 	addi	r22,r22,8
    43e8:	d9003a17 	ldw	r4,232(sp)
    43ec:	df0022c4 	addi	fp,sp,139
    43f0:	8c400044 	addi	r17,r17,1
    43f4:	20c7883a 	add	r3,r4,r3
    43f8:	b7000015 	stw	fp,0(r22)
    43fc:	b1000115 	stw	r4,4(r22)
    4400:	d8c02015 	stw	r3,128(sp)
    4404:	dc401f15 	stw	r17,124(sp)
    4408:	008001c4 	movi	r2,7
    440c:	14400e16 	blt	r2,r17,4448 <___vfprintf_internal_r+0x11e4>
    4410:	b2000204 	addi	r8,r22,8
    4414:	003e1806 	br	3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4418:	01000074 	movhi	r4,1
    441c:	210a6a84 	addi	r4,r4,10666
    4420:	d9002c15 	stw	r4,176(sp)
    4424:	d9002c17 	ldw	r4,176(sp)
    4428:	1c07883a 	add	r3,r3,r16
    442c:	44000115 	stw	r16,4(r8)
    4430:	41000015 	stw	r4,0(r8)
    4434:	10800044 	addi	r2,r2,1
    4438:	d8c02015 	stw	r3,128(sp)
    443c:	d8801f15 	stw	r2,124(sp)
    4440:	010001c4 	movi	r4,7
    4444:	20be0b0e 	bge	r4,r2,3c74 <__alt_exception_stack_pointer+0xf8003c74>
    4448:	d9002d17 	ldw	r4,180(sp)
    444c:	d9801e04 	addi	r6,sp,120
    4450:	b80b883a 	mov	r5,r23
    4454:	000a1e40 	call	a1e4 <__sprint_r>
    4458:	103c861e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    445c:	d8c02017 	ldw	r3,128(sp)
    4460:	da000404 	addi	r8,sp,16
    4464:	003e0406 	br	3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4468:	d9002d17 	ldw	r4,180(sp)
    446c:	d9801e04 	addi	r6,sp,120
    4470:	b80b883a 	mov	r5,r23
    4474:	000a1e40 	call	a1e4 <__sprint_r>
    4478:	103e3b26 	beq	r2,zero,3d68 <__alt_exception_stack_pointer+0xf8003d68>
    447c:	003c7d06 	br	3674 <__alt_exception_stack_pointer+0xf8003674>
    4480:	d9002d17 	ldw	r4,180(sp)
    4484:	d9801e04 	addi	r6,sp,120
    4488:	b80b883a 	mov	r5,r23
    448c:	000a1e40 	call	a1e4 <__sprint_r>
    4490:	103c781e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4494:	d8c02017 	ldw	r3,128(sp)
    4498:	da000404 	addi	r8,sp,16
    449c:	003de906 	br	3c44 <__alt_exception_stack_pointer+0xf8003c44>
    44a0:	d9002d17 	ldw	r4,180(sp)
    44a4:	d9801e04 	addi	r6,sp,120
    44a8:	b80b883a 	mov	r5,r23
    44ac:	000a1e40 	call	a1e4 <__sprint_r>
    44b0:	103c701e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    44b4:	d8c02017 	ldw	r3,128(sp)
    44b8:	da000404 	addi	r8,sp,16
    44bc:	003d9b06 	br	3b2c <__alt_exception_stack_pointer+0xf8003b2c>
    44c0:	d9002d17 	ldw	r4,180(sp)
    44c4:	d9801e04 	addi	r6,sp,120
    44c8:	b80b883a 	mov	r5,r23
    44cc:	000a1e40 	call	a1e4 <__sprint_r>
    44d0:	103c681e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    44d4:	d8c02017 	ldw	r3,128(sp)
    44d8:	da000404 	addi	r8,sp,16
    44dc:	003da106 	br	3b64 <__alt_exception_stack_pointer+0xf8003b64>
    44e0:	d9402a17 	ldw	r5,168(sp)
    44e4:	d8002785 	stb	zero,158(sp)
    44e8:	283f0616 	blt	r5,zero,4104 <__alt_exception_stack_pointer+0xf8004104>
    44ec:	00ffdfc4 	movi	r3,-129
    44f0:	9d84b03a 	or	r2,r19,r22
    44f4:	90e4703a 	and	r18,r18,r3
    44f8:	103c3b26 	beq	r2,zero,35e8 <__alt_exception_stack_pointer+0xf80035e8>
    44fc:	0039883a 	mov	fp,zero
    4500:	003e5806 	br	3e64 <__alt_exception_stack_pointer+0xf8003e64>
    4504:	9080040c 	andi	r2,r18,16
    4508:	1001b326 	beq	r2,zero,4bd8 <___vfprintf_internal_r+0x1974>
    450c:	d8c02e17 	ldw	r3,184(sp)
    4510:	d9002a17 	ldw	r4,168(sp)
    4514:	d8002785 	stb	zero,158(sp)
    4518:	18800104 	addi	r2,r3,4
    451c:	1cc00017 	ldw	r19,0(r3)
    4520:	002d883a 	mov	r22,zero
    4524:	2001b516 	blt	r4,zero,4bfc <___vfprintf_internal_r+0x1998>
    4528:	00ffdfc4 	movi	r3,-129
    452c:	d8802e15 	stw	r2,184(sp)
    4530:	90e4703a 	and	r18,r18,r3
    4534:	983d0526 	beq	r19,zero,394c <__alt_exception_stack_pointer+0xf800394c>
    4538:	0039883a 	mov	fp,zero
    453c:	003d0806 	br	3960 <__alt_exception_stack_pointer+0xf8003960>
    4540:	dc402617 	ldw	r17,152(sp)
    4544:	0441d30e 	bge	zero,r17,4c94 <___vfprintf_internal_r+0x1a30>
    4548:	dc403217 	ldw	r17,200(sp)
    454c:	d8803317 	ldw	r2,204(sp)
    4550:	1440010e 	bge	r2,r17,4558 <___vfprintf_internal_r+0x12f4>
    4554:	1023883a 	mov	r17,r2
    4558:	04400a0e 	bge	zero,r17,4584 <___vfprintf_internal_r+0x1320>
    455c:	d8801f17 	ldw	r2,124(sp)
    4560:	1c47883a 	add	r3,r3,r17
    4564:	44000015 	stw	r16,0(r8)
    4568:	10800044 	addi	r2,r2,1
    456c:	44400115 	stw	r17,4(r8)
    4570:	d8c02015 	stw	r3,128(sp)
    4574:	d8801f15 	stw	r2,124(sp)
    4578:	010001c4 	movi	r4,7
    457c:	20826516 	blt	r4,r2,4f14 <___vfprintf_internal_r+0x1cb0>
    4580:	42000204 	addi	r8,r8,8
    4584:	88026116 	blt	r17,zero,4f0c <___vfprintf_internal_r+0x1ca8>
    4588:	d9003217 	ldw	r4,200(sp)
    458c:	2463c83a 	sub	r17,r4,r17
    4590:	04407b0e 	bge	zero,r17,4780 <___vfprintf_internal_r+0x151c>
    4594:	05800404 	movi	r22,16
    4598:	d8801f17 	ldw	r2,124(sp)
    459c:	b4419d0e 	bge	r22,r17,4c14 <___vfprintf_internal_r+0x19b0>
    45a0:	01000074 	movhi	r4,1
    45a4:	210a6a84 	addi	r4,r4,10666
    45a8:	d9002c15 	stw	r4,176(sp)
    45ac:	070001c4 	movi	fp,7
    45b0:	dcc02d17 	ldw	r19,180(sp)
    45b4:	00000306 	br	45c4 <___vfprintf_internal_r+0x1360>
    45b8:	42000204 	addi	r8,r8,8
    45bc:	8c7ffc04 	addi	r17,r17,-16
    45c0:	b441970e 	bge	r22,r17,4c20 <___vfprintf_internal_r+0x19bc>
    45c4:	18c00404 	addi	r3,r3,16
    45c8:	10800044 	addi	r2,r2,1
    45cc:	45000015 	stw	r20,0(r8)
    45d0:	45800115 	stw	r22,4(r8)
    45d4:	d8c02015 	stw	r3,128(sp)
    45d8:	d8801f15 	stw	r2,124(sp)
    45dc:	e0bff60e 	bge	fp,r2,45b8 <__alt_exception_stack_pointer+0xf80045b8>
    45e0:	d9801e04 	addi	r6,sp,120
    45e4:	b80b883a 	mov	r5,r23
    45e8:	9809883a 	mov	r4,r19
    45ec:	000a1e40 	call	a1e4 <__sprint_r>
    45f0:	103c201e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    45f4:	d8c02017 	ldw	r3,128(sp)
    45f8:	d8801f17 	ldw	r2,124(sp)
    45fc:	da000404 	addi	r8,sp,16
    4600:	003fee06 	br	45bc <__alt_exception_stack_pointer+0xf80045bc>
    4604:	d9002d17 	ldw	r4,180(sp)
    4608:	d9801e04 	addi	r6,sp,120
    460c:	b80b883a 	mov	r5,r23
    4610:	000a1e40 	call	a1e4 <__sprint_r>
    4614:	103c171e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4618:	d8c02017 	ldw	r3,128(sp)
    461c:	df002787 	ldb	fp,158(sp)
    4620:	da000404 	addi	r8,sp,16
    4624:	003d3406 	br	3af8 <__alt_exception_stack_pointer+0xf8003af8>
    4628:	9080040c 	andi	r2,r18,16
    462c:	10016126 	beq	r2,zero,4bb4 <___vfprintf_internal_r+0x1950>
    4630:	d9402e17 	ldw	r5,184(sp)
    4634:	2cc00017 	ldw	r19,0(r5)
    4638:	29400104 	addi	r5,r5,4
    463c:	d9402e15 	stw	r5,184(sp)
    4640:	982dd7fa 	srai	r22,r19,31
    4644:	b005883a 	mov	r2,r22
    4648:	003c5a06 	br	37b4 <__alt_exception_stack_pointer+0xf80037b4>
    464c:	9080040c 	andi	r2,r18,16
    4650:	10003526 	beq	r2,zero,4728 <___vfprintf_internal_r+0x14c4>
    4654:	d8c02e17 	ldw	r3,184(sp)
    4658:	d9002a17 	ldw	r4,168(sp)
    465c:	d8002785 	stb	zero,158(sp)
    4660:	18800104 	addi	r2,r3,4
    4664:	1cc00017 	ldw	r19,0(r3)
    4668:	002d883a 	mov	r22,zero
    466c:	20003716 	blt	r4,zero,474c <___vfprintf_internal_r+0x14e8>
    4670:	00ffdfc4 	movi	r3,-129
    4674:	d8802e15 	stw	r2,184(sp)
    4678:	90e4703a 	and	r18,r18,r3
    467c:	0039883a 	mov	fp,zero
    4680:	983dd426 	beq	r19,zero,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    4684:	00800244 	movi	r2,9
    4688:	14fc5336 	bltu	r2,r19,37d8 <__alt_exception_stack_pointer+0xf80037d8>
    468c:	d8c02817 	ldw	r3,160(sp)
    4690:	dc001dc4 	addi	r16,sp,119
    4694:	9cc00c04 	addi	r19,r19,48
    4698:	1c07c83a 	sub	r3,r3,r16
    469c:	dcc01dc5 	stb	r19,119(sp)
    46a0:	d8c02b15 	stw	r3,172(sp)
    46a4:	003cc606 	br	39c0 <__alt_exception_stack_pointer+0xf80039c0>
    46a8:	d8803317 	ldw	r2,204(sp)
    46ac:	143fffc4 	addi	r16,r2,-1
    46b0:	043f4d0e 	bge	zero,r16,43e8 <__alt_exception_stack_pointer+0xf80043e8>
    46b4:	07000404 	movi	fp,16
    46b8:	e400810e 	bge	fp,r16,48c0 <___vfprintf_internal_r+0x165c>
    46bc:	01400074 	movhi	r5,1
    46c0:	294a6a84 	addi	r5,r5,10666
    46c4:	d9402c15 	stw	r5,176(sp)
    46c8:	01c001c4 	movi	r7,7
    46cc:	dcc02d17 	ldw	r19,180(sp)
    46d0:	00000306 	br	46e0 <___vfprintf_internal_r+0x147c>
    46d4:	b5800204 	addi	r22,r22,8
    46d8:	843ffc04 	addi	r16,r16,-16
    46dc:	e4007b0e 	bge	fp,r16,48cc <___vfprintf_internal_r+0x1668>
    46e0:	18c00404 	addi	r3,r3,16
    46e4:	8c400044 	addi	r17,r17,1
    46e8:	b5000015 	stw	r20,0(r22)
    46ec:	b7000115 	stw	fp,4(r22)
    46f0:	d8c02015 	stw	r3,128(sp)
    46f4:	dc401f15 	stw	r17,124(sp)
    46f8:	3c7ff60e 	bge	r7,r17,46d4 <__alt_exception_stack_pointer+0xf80046d4>
    46fc:	d9801e04 	addi	r6,sp,120
    4700:	b80b883a 	mov	r5,r23
    4704:	9809883a 	mov	r4,r19
    4708:	d9c03c15 	stw	r7,240(sp)
    470c:	000a1e40 	call	a1e4 <__sprint_r>
    4710:	d9c03c17 	ldw	r7,240(sp)
    4714:	103bd71e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4718:	d8c02017 	ldw	r3,128(sp)
    471c:	dc401f17 	ldw	r17,124(sp)
    4720:	dd800404 	addi	r22,sp,16
    4724:	003fec06 	br	46d8 <__alt_exception_stack_pointer+0xf80046d8>
    4728:	9080100c 	andi	r2,r18,64
    472c:	d8002785 	stb	zero,158(sp)
    4730:	10010e26 	beq	r2,zero,4b6c <___vfprintf_internal_r+0x1908>
    4734:	d9402e17 	ldw	r5,184(sp)
    4738:	d8c02a17 	ldw	r3,168(sp)
    473c:	002d883a 	mov	r22,zero
    4740:	28800104 	addi	r2,r5,4
    4744:	2cc0000b 	ldhu	r19,0(r5)
    4748:	183fc90e 	bge	r3,zero,4670 <__alt_exception_stack_pointer+0xf8004670>
    474c:	d8802e15 	stw	r2,184(sp)
    4750:	0039883a 	mov	fp,zero
    4754:	9d84b03a 	or	r2,r19,r22
    4758:	103c1e1e 	bne	r2,zero,37d4 <__alt_exception_stack_pointer+0xf80037d4>
    475c:	00800044 	movi	r2,1
    4760:	003e6c06 	br	4114 <__alt_exception_stack_pointer+0xf8004114>
    4764:	d9002d17 	ldw	r4,180(sp)
    4768:	d9801e04 	addi	r6,sp,120
    476c:	b80b883a 	mov	r5,r23
    4770:	000a1e40 	call	a1e4 <__sprint_r>
    4774:	103bbf1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4778:	d8c02017 	ldw	r3,128(sp)
    477c:	da000404 	addi	r8,sp,16
    4780:	d9003217 	ldw	r4,200(sp)
    4784:	d8802617 	ldw	r2,152(sp)
    4788:	d9403317 	ldw	r5,204(sp)
    478c:	8123883a 	add	r17,r16,r4
    4790:	11400216 	blt	r2,r5,479c <___vfprintf_internal_r+0x1538>
    4794:	9100004c 	andi	r4,r18,1
    4798:	20000d26 	beq	r4,zero,47d0 <___vfprintf_internal_r+0x156c>
    479c:	d9003717 	ldw	r4,220(sp)
    47a0:	d9403417 	ldw	r5,208(sp)
    47a4:	1907883a 	add	r3,r3,r4
    47a8:	d9001f17 	ldw	r4,124(sp)
    47ac:	41400015 	stw	r5,0(r8)
    47b0:	d9403717 	ldw	r5,220(sp)
    47b4:	21000044 	addi	r4,r4,1
    47b8:	d8c02015 	stw	r3,128(sp)
    47bc:	41400115 	stw	r5,4(r8)
    47c0:	d9001f15 	stw	r4,124(sp)
    47c4:	014001c4 	movi	r5,7
    47c8:	2901e816 	blt	r5,r4,4f6c <___vfprintf_internal_r+0x1d08>
    47cc:	42000204 	addi	r8,r8,8
    47d0:	d9003317 	ldw	r4,204(sp)
    47d4:	8121883a 	add	r16,r16,r4
    47d8:	2085c83a 	sub	r2,r4,r2
    47dc:	8461c83a 	sub	r16,r16,r17
    47e0:	1400010e 	bge	r2,r16,47e8 <___vfprintf_internal_r+0x1584>
    47e4:	1021883a 	mov	r16,r2
    47e8:	04000a0e 	bge	zero,r16,4814 <___vfprintf_internal_r+0x15b0>
    47ec:	d9001f17 	ldw	r4,124(sp)
    47f0:	1c07883a 	add	r3,r3,r16
    47f4:	44400015 	stw	r17,0(r8)
    47f8:	21000044 	addi	r4,r4,1
    47fc:	44000115 	stw	r16,4(r8)
    4800:	d8c02015 	stw	r3,128(sp)
    4804:	d9001f15 	stw	r4,124(sp)
    4808:	014001c4 	movi	r5,7
    480c:	2901fb16 	blt	r5,r4,4ffc <___vfprintf_internal_r+0x1d98>
    4810:	42000204 	addi	r8,r8,8
    4814:	8001f716 	blt	r16,zero,4ff4 <___vfprintf_internal_r+0x1d90>
    4818:	1421c83a 	sub	r16,r2,r16
    481c:	043d160e 	bge	zero,r16,3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4820:	04400404 	movi	r17,16
    4824:	d8801f17 	ldw	r2,124(sp)
    4828:	8c3efb0e 	bge	r17,r16,4418 <__alt_exception_stack_pointer+0xf8004418>
    482c:	01400074 	movhi	r5,1
    4830:	294a6a84 	addi	r5,r5,10666
    4834:	d9402c15 	stw	r5,176(sp)
    4838:	058001c4 	movi	r22,7
    483c:	dcc02d17 	ldw	r19,180(sp)
    4840:	00000306 	br	4850 <___vfprintf_internal_r+0x15ec>
    4844:	42000204 	addi	r8,r8,8
    4848:	843ffc04 	addi	r16,r16,-16
    484c:	8c3ef50e 	bge	r17,r16,4424 <__alt_exception_stack_pointer+0xf8004424>
    4850:	18c00404 	addi	r3,r3,16
    4854:	10800044 	addi	r2,r2,1
    4858:	45000015 	stw	r20,0(r8)
    485c:	44400115 	stw	r17,4(r8)
    4860:	d8c02015 	stw	r3,128(sp)
    4864:	d8801f15 	stw	r2,124(sp)
    4868:	b0bff60e 	bge	r22,r2,4844 <__alt_exception_stack_pointer+0xf8004844>
    486c:	d9801e04 	addi	r6,sp,120
    4870:	b80b883a 	mov	r5,r23
    4874:	9809883a 	mov	r4,r19
    4878:	000a1e40 	call	a1e4 <__sprint_r>
    487c:	103b7d1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4880:	d8c02017 	ldw	r3,128(sp)
    4884:	d8801f17 	ldw	r2,124(sp)
    4888:	da000404 	addi	r8,sp,16
    488c:	003fee06 	br	4848 <__alt_exception_stack_pointer+0xf8004848>
    4890:	9088703a 	and	r4,r18,r2
    4894:	203eab1e 	bne	r4,zero,4344 <__alt_exception_stack_pointer+0xf8004344>
    4898:	dc401f17 	ldw	r17,124(sp)
    489c:	40800115 	stw	r2,4(r8)
    48a0:	44000015 	stw	r16,0(r8)
    48a4:	8c400044 	addi	r17,r17,1
    48a8:	d8c02015 	stw	r3,128(sp)
    48ac:	dc401f15 	stw	r17,124(sp)
    48b0:	008001c4 	movi	r2,7
    48b4:	14400e16 	blt	r2,r17,48f0 <___vfprintf_internal_r+0x168c>
    48b8:	45800204 	addi	r22,r8,8
    48bc:	003eca06 	br	43e8 <__alt_exception_stack_pointer+0xf80043e8>
    48c0:	01000074 	movhi	r4,1
    48c4:	210a6a84 	addi	r4,r4,10666
    48c8:	d9002c15 	stw	r4,176(sp)
    48cc:	d8802c17 	ldw	r2,176(sp)
    48d0:	1c07883a 	add	r3,r3,r16
    48d4:	8c400044 	addi	r17,r17,1
    48d8:	b0800015 	stw	r2,0(r22)
    48dc:	b4000115 	stw	r16,4(r22)
    48e0:	d8c02015 	stw	r3,128(sp)
    48e4:	dc401f15 	stw	r17,124(sp)
    48e8:	008001c4 	movi	r2,7
    48ec:	147ebd0e 	bge	r2,r17,43e4 <__alt_exception_stack_pointer+0xf80043e4>
    48f0:	d9002d17 	ldw	r4,180(sp)
    48f4:	d9801e04 	addi	r6,sp,120
    48f8:	b80b883a 	mov	r5,r23
    48fc:	000a1e40 	call	a1e4 <__sprint_r>
    4900:	103b5c1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4904:	d8c02017 	ldw	r3,128(sp)
    4908:	dc401f17 	ldw	r17,124(sp)
    490c:	dd800404 	addi	r22,sp,16
    4910:	003eb506 	br	43e8 <__alt_exception_stack_pointer+0xf80043e8>
    4914:	d9002d17 	ldw	r4,180(sp)
    4918:	d9801e04 	addi	r6,sp,120
    491c:	b80b883a 	mov	r5,r23
    4920:	000a1e40 	call	a1e4 <__sprint_r>
    4924:	103b531e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4928:	d8c02017 	ldw	r3,128(sp)
    492c:	dc401f17 	ldw	r17,124(sp)
    4930:	da000404 	addi	r8,sp,16
    4934:	003e8d06 	br	436c <__alt_exception_stack_pointer+0xf800436c>
    4938:	d9002d17 	ldw	r4,180(sp)
    493c:	d9801e04 	addi	r6,sp,120
    4940:	b80b883a 	mov	r5,r23
    4944:	000a1e40 	call	a1e4 <__sprint_r>
    4948:	103b4a1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    494c:	d8c02017 	ldw	r3,128(sp)
    4950:	dc401f17 	ldw	r17,124(sp)
    4954:	dd800404 	addi	r22,sp,16
    4958:	003e8f06 	br	4398 <__alt_exception_stack_pointer+0xf8004398>
    495c:	0027883a 	mov	r19,zero
    4960:	003f4a06 	br	468c <__alt_exception_stack_pointer+0xf800468c>
    4964:	d9002d17 	ldw	r4,180(sp)
    4968:	d9801e04 	addi	r6,sp,120
    496c:	b80b883a 	mov	r5,r23
    4970:	000a1e40 	call	a1e4 <__sprint_r>
    4974:	103b3f1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4978:	d8c02017 	ldw	r3,128(sp)
    497c:	da000404 	addi	r8,sp,16
    4980:	003c7b06 	br	3b70 <__alt_exception_stack_pointer+0xf8003b70>
    4984:	d9402a17 	ldw	r5,168(sp)
    4988:	04e7c83a 	sub	r19,zero,r19
    498c:	07000b44 	movi	fp,45
    4990:	9804c03a 	cmpne	r2,r19,zero
    4994:	05adc83a 	sub	r22,zero,r22
    4998:	df002785 	stb	fp,158(sp)
    499c:	b0adc83a 	sub	r22,r22,r2
    49a0:	28017b16 	blt	r5,zero,4f90 <___vfprintf_internal_r+0x1d2c>
    49a4:	00bfdfc4 	movi	r2,-129
    49a8:	90a4703a 	and	r18,r18,r2
    49ac:	003b8906 	br	37d4 <__alt_exception_stack_pointer+0xf80037d4>
    49b0:	d9003617 	ldw	r4,216(sp)
    49b4:	d9403817 	ldw	r5,224(sp)
    49b8:	da003d15 	stw	r8,244(sp)
    49bc:	0009e5c0 	call	9e5c <__fpclassifyd>
    49c0:	da003d17 	ldw	r8,244(sp)
    49c4:	1000f026 	beq	r2,zero,4d88 <___vfprintf_internal_r+0x1b24>
    49c8:	d9002a17 	ldw	r4,168(sp)
    49cc:	05bff7c4 	movi	r22,-33
    49d0:	00bfffc4 	movi	r2,-1
    49d4:	8dac703a 	and	r22,r17,r22
    49d8:	20820026 	beq	r4,r2,51dc <___vfprintf_internal_r+0x1f78>
    49dc:	008011c4 	movi	r2,71
    49e0:	b081f726 	beq	r22,r2,51c0 <___vfprintf_internal_r+0x1f5c>
    49e4:	d9003817 	ldw	r4,224(sp)
    49e8:	90c04014 	ori	r3,r18,256
    49ec:	d8c02c15 	stw	r3,176(sp)
    49f0:	20021516 	blt	r4,zero,5248 <___vfprintf_internal_r+0x1fe4>
    49f4:	dcc03817 	ldw	r19,224(sp)
    49f8:	d8002905 	stb	zero,164(sp)
    49fc:	00801984 	movi	r2,102
    4a00:	8881f926 	beq	r17,r2,51e8 <___vfprintf_internal_r+0x1f84>
    4a04:	00801184 	movi	r2,70
    4a08:	88821c26 	beq	r17,r2,527c <___vfprintf_internal_r+0x2018>
    4a0c:	00801144 	movi	r2,69
    4a10:	b081ef26 	beq	r22,r2,51d0 <___vfprintf_internal_r+0x1f6c>
    4a14:	d8c02a17 	ldw	r3,168(sp)
    4a18:	d8802104 	addi	r2,sp,132
    4a1c:	d8800315 	stw	r2,12(sp)
    4a20:	d9403617 	ldw	r5,216(sp)
    4a24:	d8802504 	addi	r2,sp,148
    4a28:	d9002d17 	ldw	r4,180(sp)
    4a2c:	d8800215 	stw	r2,8(sp)
    4a30:	d8802604 	addi	r2,sp,152
    4a34:	d8c00015 	stw	r3,0(sp)
    4a38:	d8800115 	stw	r2,4(sp)
    4a3c:	01c00084 	movi	r7,2
    4a40:	980d883a 	mov	r6,r19
    4a44:	d8c03c15 	stw	r3,240(sp)
    4a48:	da003d15 	stw	r8,244(sp)
    4a4c:	00059940 	call	5994 <_dtoa_r>
    4a50:	1021883a 	mov	r16,r2
    4a54:	008019c4 	movi	r2,103
    4a58:	d8c03c17 	ldw	r3,240(sp)
    4a5c:	da003d17 	ldw	r8,244(sp)
    4a60:	88817126 	beq	r17,r2,5028 <___vfprintf_internal_r+0x1dc4>
    4a64:	008011c4 	movi	r2,71
    4a68:	88829126 	beq	r17,r2,54b0 <___vfprintf_internal_r+0x224c>
    4a6c:	80f9883a 	add	fp,r16,r3
    4a70:	d9003617 	ldw	r4,216(sp)
    4a74:	000d883a 	mov	r6,zero
    4a78:	000f883a 	mov	r7,zero
    4a7c:	980b883a 	mov	r5,r19
    4a80:	da003d15 	stw	r8,244(sp)
    4a84:	000e1440 	call	e144 <__eqdf2>
    4a88:	da003d17 	ldw	r8,244(sp)
    4a8c:	10018d26 	beq	r2,zero,50c4 <___vfprintf_internal_r+0x1e60>
    4a90:	d8802117 	ldw	r2,132(sp)
    4a94:	1700062e 	bgeu	r2,fp,4ab0 <___vfprintf_internal_r+0x184c>
    4a98:	01000c04 	movi	r4,48
    4a9c:	10c00044 	addi	r3,r2,1
    4aa0:	d8c02115 	stw	r3,132(sp)
    4aa4:	11000005 	stb	r4,0(r2)
    4aa8:	d8802117 	ldw	r2,132(sp)
    4aac:	173ffb36 	bltu	r2,fp,4a9c <__alt_exception_stack_pointer+0xf8004a9c>
    4ab0:	1405c83a 	sub	r2,r2,r16
    4ab4:	d8803315 	stw	r2,204(sp)
    4ab8:	008011c4 	movi	r2,71
    4abc:	b0817626 	beq	r22,r2,5098 <___vfprintf_internal_r+0x1e34>
    4ac0:	00801944 	movi	r2,101
    4ac4:	1442800e 	bge	r2,r17,54c8 <___vfprintf_internal_r+0x2264>
    4ac8:	d8c02617 	ldw	r3,152(sp)
    4acc:	00801984 	movi	r2,102
    4ad0:	d8c03215 	stw	r3,200(sp)
    4ad4:	8881fe26 	beq	r17,r2,52d0 <___vfprintf_internal_r+0x206c>
    4ad8:	d8c03217 	ldw	r3,200(sp)
    4adc:	d9003317 	ldw	r4,204(sp)
    4ae0:	1901dd16 	blt	r3,r4,5258 <___vfprintf_internal_r+0x1ff4>
    4ae4:	9480004c 	andi	r18,r18,1
    4ae8:	90022b1e 	bne	r18,zero,5398 <___vfprintf_internal_r+0x2134>
    4aec:	1805883a 	mov	r2,r3
    4af0:	18028316 	blt	r3,zero,5500 <___vfprintf_internal_r+0x229c>
    4af4:	d8c03217 	ldw	r3,200(sp)
    4af8:	044019c4 	movi	r17,103
    4afc:	d8c02b15 	stw	r3,172(sp)
    4b00:	df002907 	ldb	fp,164(sp)
    4b04:	e001531e 	bne	fp,zero,5054 <___vfprintf_internal_r+0x1df0>
    4b08:	df002783 	ldbu	fp,158(sp)
    4b0c:	d8802915 	stw	r2,164(sp)
    4b10:	dc802c17 	ldw	r18,176(sp)
    4b14:	d8002a15 	stw	zero,168(sp)
    4b18:	003baf06 	br	39d8 <__alt_exception_stack_pointer+0xf80039d8>
    4b1c:	d8c02e17 	ldw	r3,184(sp)
    4b20:	d9002e17 	ldw	r4,184(sp)
    4b24:	d9402e17 	ldw	r5,184(sp)
    4b28:	18c00017 	ldw	r3,0(r3)
    4b2c:	21000117 	ldw	r4,4(r4)
    4b30:	29400204 	addi	r5,r5,8
    4b34:	d8c03615 	stw	r3,216(sp)
    4b38:	d9003815 	stw	r4,224(sp)
    4b3c:	d9402e15 	stw	r5,184(sp)
    4b40:	003b5006 	br	3884 <__alt_exception_stack_pointer+0xf8003884>
    4b44:	ac400007 	ldb	r17,0(r21)
    4b48:	003a2806 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    4b4c:	9080100c 	andi	r2,r18,64
    4b50:	1000a826 	beq	r2,zero,4df4 <___vfprintf_internal_r+0x1b90>
    4b54:	d8c02e17 	ldw	r3,184(sp)
    4b58:	002d883a 	mov	r22,zero
    4b5c:	1cc0000b 	ldhu	r19,0(r3)
    4b60:	18c00104 	addi	r3,r3,4
    4b64:	d8c02e15 	stw	r3,184(sp)
    4b68:	003caf06 	br	3e28 <__alt_exception_stack_pointer+0xf8003e28>
    4b6c:	d9002e17 	ldw	r4,184(sp)
    4b70:	d9402a17 	ldw	r5,168(sp)
    4b74:	002d883a 	mov	r22,zero
    4b78:	20800104 	addi	r2,r4,4
    4b7c:	24c00017 	ldw	r19,0(r4)
    4b80:	283ebb0e 	bge	r5,zero,4670 <__alt_exception_stack_pointer+0xf8004670>
    4b84:	003ef106 	br	474c <__alt_exception_stack_pointer+0xf800474c>
    4b88:	9080040c 	andi	r2,r18,16
    4b8c:	1000921e 	bne	r2,zero,4dd8 <___vfprintf_internal_r+0x1b74>
    4b90:	9480100c 	andi	r18,r18,64
    4b94:	90013926 	beq	r18,zero,507c <___vfprintf_internal_r+0x1e18>
    4b98:	d9402e17 	ldw	r5,184(sp)
    4b9c:	d8c02f17 	ldw	r3,188(sp)
    4ba0:	28800017 	ldw	r2,0(r5)
    4ba4:	29400104 	addi	r5,r5,4
    4ba8:	d9402e15 	stw	r5,184(sp)
    4bac:	10c0000d 	sth	r3,0(r2)
    4bb0:	0039e406 	br	3344 <__alt_exception_stack_pointer+0xf8003344>
    4bb4:	9080100c 	andi	r2,r18,64
    4bb8:	10008026 	beq	r2,zero,4dbc <___vfprintf_internal_r+0x1b58>
    4bbc:	d8802e17 	ldw	r2,184(sp)
    4bc0:	14c0000f 	ldh	r19,0(r2)
    4bc4:	10800104 	addi	r2,r2,4
    4bc8:	d8802e15 	stw	r2,184(sp)
    4bcc:	982dd7fa 	srai	r22,r19,31
    4bd0:	b005883a 	mov	r2,r22
    4bd4:	003af706 	br	37b4 <__alt_exception_stack_pointer+0xf80037b4>
    4bd8:	9080100c 	andi	r2,r18,64
    4bdc:	d8002785 	stb	zero,158(sp)
    4be0:	10008a1e 	bne	r2,zero,4e0c <___vfprintf_internal_r+0x1ba8>
    4be4:	d9002e17 	ldw	r4,184(sp)
    4be8:	d9402a17 	ldw	r5,168(sp)
    4bec:	002d883a 	mov	r22,zero
    4bf0:	20800104 	addi	r2,r4,4
    4bf4:	24c00017 	ldw	r19,0(r4)
    4bf8:	283e4b0e 	bge	r5,zero,4528 <__alt_exception_stack_pointer+0xf8004528>
    4bfc:	9d86b03a 	or	r3,r19,r22
    4c00:	d8802e15 	stw	r2,184(sp)
    4c04:	183e4c1e 	bne	r3,zero,4538 <__alt_exception_stack_pointer+0xf8004538>
    4c08:	0039883a 	mov	fp,zero
    4c0c:	0005883a 	mov	r2,zero
    4c10:	003d4006 	br	4114 <__alt_exception_stack_pointer+0xf8004114>
    4c14:	01400074 	movhi	r5,1
    4c18:	294a6a84 	addi	r5,r5,10666
    4c1c:	d9402c15 	stw	r5,176(sp)
    4c20:	d9402c17 	ldw	r5,176(sp)
    4c24:	1c47883a 	add	r3,r3,r17
    4c28:	10800044 	addi	r2,r2,1
    4c2c:	41400015 	stw	r5,0(r8)
    4c30:	44400115 	stw	r17,4(r8)
    4c34:	d8c02015 	stw	r3,128(sp)
    4c38:	d8801f15 	stw	r2,124(sp)
    4c3c:	010001c4 	movi	r4,7
    4c40:	20bec816 	blt	r4,r2,4764 <__alt_exception_stack_pointer+0xf8004764>
    4c44:	42000204 	addi	r8,r8,8
    4c48:	003ecd06 	br	4780 <__alt_exception_stack_pointer+0xf8004780>
    4c4c:	d9002a17 	ldw	r4,168(sp)
    4c50:	d8002785 	stb	zero,158(sp)
    4c54:	203d2d16 	blt	r4,zero,410c <__alt_exception_stack_pointer+0xf800410c>
    4c58:	00bfdfc4 	movi	r2,-129
    4c5c:	90a4703a 	and	r18,r18,r2
    4c60:	003a6106 	br	35e8 <__alt_exception_stack_pointer+0xf80035e8>
    4c64:	01000074 	movhi	r4,1
    4c68:	210a6a84 	addi	r4,r4,10666
    4c6c:	d9002c15 	stw	r4,176(sp)
    4c70:	003bea06 	br	3c1c <__alt_exception_stack_pointer+0xf8003c1c>
    4c74:	d9002d17 	ldw	r4,180(sp)
    4c78:	d9801e04 	addi	r6,sp,120
    4c7c:	b80b883a 	mov	r5,r23
    4c80:	000a1e40 	call	a1e4 <__sprint_r>
    4c84:	103a7b1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4c88:	d8c02017 	ldw	r3,128(sp)
    4c8c:	da000404 	addi	r8,sp,16
    4c90:	003d4106 	br	4198 <__alt_exception_stack_pointer+0xf8004198>
    4c94:	d8801f17 	ldw	r2,124(sp)
    4c98:	01400074 	movhi	r5,1
    4c9c:	01000044 	movi	r4,1
    4ca0:	18c00044 	addi	r3,r3,1
    4ca4:	10800044 	addi	r2,r2,1
    4ca8:	294a6a04 	addi	r5,r5,10664
    4cac:	41000115 	stw	r4,4(r8)
    4cb0:	41400015 	stw	r5,0(r8)
    4cb4:	d8c02015 	stw	r3,128(sp)
    4cb8:	d8801f15 	stw	r2,124(sp)
    4cbc:	010001c4 	movi	r4,7
    4cc0:	20805c16 	blt	r4,r2,4e34 <___vfprintf_internal_r+0x1bd0>
    4cc4:	42000204 	addi	r8,r8,8
    4cc8:	8800041e 	bne	r17,zero,4cdc <___vfprintf_internal_r+0x1a78>
    4ccc:	d8803317 	ldw	r2,204(sp)
    4cd0:	1000021e 	bne	r2,zero,4cdc <___vfprintf_internal_r+0x1a78>
    4cd4:	9080004c 	andi	r2,r18,1
    4cd8:	103be726 	beq	r2,zero,3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4cdc:	d9003717 	ldw	r4,220(sp)
    4ce0:	d8801f17 	ldw	r2,124(sp)
    4ce4:	d9403417 	ldw	r5,208(sp)
    4ce8:	20c7883a 	add	r3,r4,r3
    4cec:	10800044 	addi	r2,r2,1
    4cf0:	41000115 	stw	r4,4(r8)
    4cf4:	41400015 	stw	r5,0(r8)
    4cf8:	d8c02015 	stw	r3,128(sp)
    4cfc:	d8801f15 	stw	r2,124(sp)
    4d00:	010001c4 	movi	r4,7
    4d04:	20812116 	blt	r4,r2,518c <___vfprintf_internal_r+0x1f28>
    4d08:	42000204 	addi	r8,r8,8
    4d0c:	0463c83a 	sub	r17,zero,r17
    4d10:	0440730e 	bge	zero,r17,4ee0 <___vfprintf_internal_r+0x1c7c>
    4d14:	05800404 	movi	r22,16
    4d18:	b440860e 	bge	r22,r17,4f34 <___vfprintf_internal_r+0x1cd0>
    4d1c:	01400074 	movhi	r5,1
    4d20:	294a6a84 	addi	r5,r5,10666
    4d24:	d9402c15 	stw	r5,176(sp)
    4d28:	070001c4 	movi	fp,7
    4d2c:	dcc02d17 	ldw	r19,180(sp)
    4d30:	00000306 	br	4d40 <___vfprintf_internal_r+0x1adc>
    4d34:	42000204 	addi	r8,r8,8
    4d38:	8c7ffc04 	addi	r17,r17,-16
    4d3c:	b440800e 	bge	r22,r17,4f40 <___vfprintf_internal_r+0x1cdc>
    4d40:	18c00404 	addi	r3,r3,16
    4d44:	10800044 	addi	r2,r2,1
    4d48:	45000015 	stw	r20,0(r8)
    4d4c:	45800115 	stw	r22,4(r8)
    4d50:	d8c02015 	stw	r3,128(sp)
    4d54:	d8801f15 	stw	r2,124(sp)
    4d58:	e0bff60e 	bge	fp,r2,4d34 <__alt_exception_stack_pointer+0xf8004d34>
    4d5c:	d9801e04 	addi	r6,sp,120
    4d60:	b80b883a 	mov	r5,r23
    4d64:	9809883a 	mov	r4,r19
    4d68:	000a1e40 	call	a1e4 <__sprint_r>
    4d6c:	103a411e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4d70:	d8c02017 	ldw	r3,128(sp)
    4d74:	d8801f17 	ldw	r2,124(sp)
    4d78:	da000404 	addi	r8,sp,16
    4d7c:	003fee06 	br	4d38 <__alt_exception_stack_pointer+0xf8004d38>
    4d80:	00bfffc4 	movi	r2,-1
    4d84:	003a3f06 	br	3684 <__alt_exception_stack_pointer+0xf8003684>
    4d88:	008011c4 	movi	r2,71
    4d8c:	1440b816 	blt	r2,r17,5070 <___vfprintf_internal_r+0x1e0c>
    4d90:	04000074 	movhi	r16,1
    4d94:	840a5c04 	addi	r16,r16,10608
    4d98:	00c000c4 	movi	r3,3
    4d9c:	00bfdfc4 	movi	r2,-129
    4da0:	d8c02915 	stw	r3,164(sp)
    4da4:	90a4703a 	and	r18,r18,r2
    4da8:	df002783 	ldbu	fp,158(sp)
    4dac:	d8c02b15 	stw	r3,172(sp)
    4db0:	d8002a15 	stw	zero,168(sp)
    4db4:	d8003215 	stw	zero,200(sp)
    4db8:	003b0706 	br	39d8 <__alt_exception_stack_pointer+0xf80039d8>
    4dbc:	d8c02e17 	ldw	r3,184(sp)
    4dc0:	1cc00017 	ldw	r19,0(r3)
    4dc4:	18c00104 	addi	r3,r3,4
    4dc8:	d8c02e15 	stw	r3,184(sp)
    4dcc:	982dd7fa 	srai	r22,r19,31
    4dd0:	b005883a 	mov	r2,r22
    4dd4:	003a7706 	br	37b4 <__alt_exception_stack_pointer+0xf80037b4>
    4dd8:	d8c02e17 	ldw	r3,184(sp)
    4ddc:	d9002f17 	ldw	r4,188(sp)
    4de0:	18800017 	ldw	r2,0(r3)
    4de4:	18c00104 	addi	r3,r3,4
    4de8:	d8c02e15 	stw	r3,184(sp)
    4dec:	11000015 	stw	r4,0(r2)
    4df0:	00395406 	br	3344 <__alt_exception_stack_pointer+0xf8003344>
    4df4:	d9002e17 	ldw	r4,184(sp)
    4df8:	002d883a 	mov	r22,zero
    4dfc:	24c00017 	ldw	r19,0(r4)
    4e00:	21000104 	addi	r4,r4,4
    4e04:	d9002e15 	stw	r4,184(sp)
    4e08:	003c0706 	br	3e28 <__alt_exception_stack_pointer+0xf8003e28>
    4e0c:	d9402e17 	ldw	r5,184(sp)
    4e10:	d8c02a17 	ldw	r3,168(sp)
    4e14:	002d883a 	mov	r22,zero
    4e18:	28800104 	addi	r2,r5,4
    4e1c:	2cc0000b 	ldhu	r19,0(r5)
    4e20:	183dc10e 	bge	r3,zero,4528 <__alt_exception_stack_pointer+0xf8004528>
    4e24:	003f7506 	br	4bfc <__alt_exception_stack_pointer+0xf8004bfc>
    4e28:	04000074 	movhi	r16,1
    4e2c:	840a5a04 	addi	r16,r16,10600
    4e30:	003aa706 	br	38d0 <__alt_exception_stack_pointer+0xf80038d0>
    4e34:	d9002d17 	ldw	r4,180(sp)
    4e38:	d9801e04 	addi	r6,sp,120
    4e3c:	b80b883a 	mov	r5,r23
    4e40:	000a1e40 	call	a1e4 <__sprint_r>
    4e44:	103a0b1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4e48:	dc402617 	ldw	r17,152(sp)
    4e4c:	d8c02017 	ldw	r3,128(sp)
    4e50:	da000404 	addi	r8,sp,16
    4e54:	003f9c06 	br	4cc8 <__alt_exception_stack_pointer+0xf8004cc8>
    4e58:	ac400043 	ldbu	r17,1(r21)
    4e5c:	84000814 	ori	r16,r16,32
    4e60:	ad400044 	addi	r21,r21,1
    4e64:	8c403fcc 	andi	r17,r17,255
    4e68:	8c40201c 	xori	r17,r17,128
    4e6c:	8c7fe004 	addi	r17,r17,-128
    4e70:	00395e06 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    4e74:	d8c02e15 	stw	r3,184(sp)
    4e78:	0039883a 	mov	fp,zero
    4e7c:	003e3506 	br	4754 <__alt_exception_stack_pointer+0xf8004754>
    4e80:	d9002d17 	ldw	r4,180(sp)
    4e84:	d9801e04 	addi	r6,sp,120
    4e88:	b80b883a 	mov	r5,r23
    4e8c:	000a1e40 	call	a1e4 <__sprint_r>
    4e90:	1039f81e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4e94:	d8c02017 	ldw	r3,128(sp)
    4e98:	da000404 	addi	r8,sp,16
    4e9c:	003cd006 	br	41e0 <__alt_exception_stack_pointer+0xf80041e0>
    4ea0:	8009883a 	mov	r4,r16
    4ea4:	df003d15 	stw	fp,244(sp)
    4ea8:	00031c40 	call	31c4 <strlen>
    4eac:	d8802b15 	stw	r2,172(sp)
    4eb0:	da003d17 	ldw	r8,244(sp)
    4eb4:	103c200e 	bge	r2,zero,3f38 <__alt_exception_stack_pointer+0xf8003f38>
    4eb8:	0005883a 	mov	r2,zero
    4ebc:	003c1e06 	br	3f38 <__alt_exception_stack_pointer+0xf8003f38>
    4ec0:	d9002d17 	ldw	r4,180(sp)
    4ec4:	d9801e04 	addi	r6,sp,120
    4ec8:	b80b883a 	mov	r5,r23
    4ecc:	000a1e40 	call	a1e4 <__sprint_r>
    4ed0:	1039e81e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4ed4:	d8c02017 	ldw	r3,128(sp)
    4ed8:	d8801f17 	ldw	r2,124(sp)
    4edc:	da000404 	addi	r8,sp,16
    4ee0:	d9403317 	ldw	r5,204(sp)
    4ee4:	10800044 	addi	r2,r2,1
    4ee8:	44000015 	stw	r16,0(r8)
    4eec:	28c7883a 	add	r3,r5,r3
    4ef0:	003b5b06 	br	3c60 <__alt_exception_stack_pointer+0xf8003c60>
    4ef4:	01000074 	movhi	r4,1
    4ef8:	210a6e84 	addi	r4,r4,10682
    4efc:	d9003515 	stw	r4,212(sp)
    4f00:	003af206 	br	3acc <__alt_exception_stack_pointer+0xf8003acc>
    4f04:	013fffc4 	movi	r4,-1
    4f08:	003a0806 	br	372c <__alt_exception_stack_pointer+0xf800372c>
    4f0c:	0023883a 	mov	r17,zero
    4f10:	003d9d06 	br	4588 <__alt_exception_stack_pointer+0xf8004588>
    4f14:	d9002d17 	ldw	r4,180(sp)
    4f18:	d9801e04 	addi	r6,sp,120
    4f1c:	b80b883a 	mov	r5,r23
    4f20:	000a1e40 	call	a1e4 <__sprint_r>
    4f24:	1039d31e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4f28:	d8c02017 	ldw	r3,128(sp)
    4f2c:	da000404 	addi	r8,sp,16
    4f30:	003d9406 	br	4584 <__alt_exception_stack_pointer+0xf8004584>
    4f34:	01000074 	movhi	r4,1
    4f38:	210a6a84 	addi	r4,r4,10666
    4f3c:	d9002c15 	stw	r4,176(sp)
    4f40:	d9002c17 	ldw	r4,176(sp)
    4f44:	1c47883a 	add	r3,r3,r17
    4f48:	10800044 	addi	r2,r2,1
    4f4c:	41000015 	stw	r4,0(r8)
    4f50:	44400115 	stw	r17,4(r8)
    4f54:	d8c02015 	stw	r3,128(sp)
    4f58:	d8801f15 	stw	r2,124(sp)
    4f5c:	010001c4 	movi	r4,7
    4f60:	20bfd716 	blt	r4,r2,4ec0 <__alt_exception_stack_pointer+0xf8004ec0>
    4f64:	42000204 	addi	r8,r8,8
    4f68:	003fdd06 	br	4ee0 <__alt_exception_stack_pointer+0xf8004ee0>
    4f6c:	d9002d17 	ldw	r4,180(sp)
    4f70:	d9801e04 	addi	r6,sp,120
    4f74:	b80b883a 	mov	r5,r23
    4f78:	000a1e40 	call	a1e4 <__sprint_r>
    4f7c:	1039bd1e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    4f80:	d8802617 	ldw	r2,152(sp)
    4f84:	d8c02017 	ldw	r3,128(sp)
    4f88:	da000404 	addi	r8,sp,16
    4f8c:	003e1006 	br	47d0 <__alt_exception_stack_pointer+0xf80047d0>
    4f90:	00800044 	movi	r2,1
    4f94:	10803fcc 	andi	r2,r2,255
    4f98:	00c00044 	movi	r3,1
    4f9c:	10fa0d26 	beq	r2,r3,37d4 <__alt_exception_stack_pointer+0xf80037d4>
    4fa0:	00c00084 	movi	r3,2
    4fa4:	10fbaf26 	beq	r2,r3,3e64 <__alt_exception_stack_pointer+0xf8003e64>
    4fa8:	003a6d06 	br	3960 <__alt_exception_stack_pointer+0xf8003960>
    4fac:	01000074 	movhi	r4,1
    4fb0:	210a6e84 	addi	r4,r4,10682
    4fb4:	d9003515 	stw	r4,212(sp)
    4fb8:	003b5406 	br	3d0c <__alt_exception_stack_pointer+0xf8003d0c>
    4fbc:	d8802a17 	ldw	r2,168(sp)
    4fc0:	00c00184 	movi	r3,6
    4fc4:	1880012e 	bgeu	r3,r2,4fcc <___vfprintf_internal_r+0x1d68>
    4fc8:	1805883a 	mov	r2,r3
    4fcc:	d8802b15 	stw	r2,172(sp)
    4fd0:	1000ef16 	blt	r2,zero,5390 <___vfprintf_internal_r+0x212c>
    4fd4:	04000074 	movhi	r16,1
    4fd8:	d8802915 	stw	r2,164(sp)
    4fdc:	dcc02e15 	stw	r19,184(sp)
    4fe0:	d8002a15 	stw	zero,168(sp)
    4fe4:	d8003215 	stw	zero,200(sp)
    4fe8:	840a6804 	addi	r16,r16,10656
    4fec:	0039883a 	mov	fp,zero
    4ff0:	003a8006 	br	39f4 <__alt_exception_stack_pointer+0xf80039f4>
    4ff4:	0021883a 	mov	r16,zero
    4ff8:	003e0706 	br	4818 <__alt_exception_stack_pointer+0xf8004818>
    4ffc:	d9002d17 	ldw	r4,180(sp)
    5000:	d9801e04 	addi	r6,sp,120
    5004:	b80b883a 	mov	r5,r23
    5008:	000a1e40 	call	a1e4 <__sprint_r>
    500c:	1039991e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    5010:	d8802617 	ldw	r2,152(sp)
    5014:	d9403317 	ldw	r5,204(sp)
    5018:	d8c02017 	ldw	r3,128(sp)
    501c:	da000404 	addi	r8,sp,16
    5020:	2885c83a 	sub	r2,r5,r2
    5024:	003dfb06 	br	4814 <__alt_exception_stack_pointer+0xf8004814>
    5028:	9080004c 	andi	r2,r18,1
    502c:	103e8f1e 	bne	r2,zero,4a6c <__alt_exception_stack_pointer+0xf8004a6c>
    5030:	d8802117 	ldw	r2,132(sp)
    5034:	003e9e06 	br	4ab0 <__alt_exception_stack_pointer+0xf8004ab0>
    5038:	1025883a 	mov	r18,r2
    503c:	0039883a 	mov	fp,zero
    5040:	00800084 	movi	r2,2
    5044:	003fd306 	br	4f94 <__alt_exception_stack_pointer+0xf8004f94>
    5048:	07000b44 	movi	fp,45
    504c:	df002785 	stb	fp,158(sp)
    5050:	003a1b06 	br	38c0 <__alt_exception_stack_pointer+0xf80038c0>
    5054:	00c00b44 	movi	r3,45
    5058:	d8c02785 	stb	r3,158(sp)
    505c:	d8802915 	stw	r2,164(sp)
    5060:	dc802c17 	ldw	r18,176(sp)
    5064:	d8002a15 	stw	zero,168(sp)
    5068:	07000b44 	movi	fp,45
    506c:	003a5e06 	br	39e8 <__alt_exception_stack_pointer+0xf80039e8>
    5070:	04000074 	movhi	r16,1
    5074:	840a5d04 	addi	r16,r16,10612
    5078:	003f4706 	br	4d98 <__alt_exception_stack_pointer+0xf8004d98>
    507c:	d9002e17 	ldw	r4,184(sp)
    5080:	d9402f17 	ldw	r5,188(sp)
    5084:	20800017 	ldw	r2,0(r4)
    5088:	21000104 	addi	r4,r4,4
    508c:	d9002e15 	stw	r4,184(sp)
    5090:	11400015 	stw	r5,0(r2)
    5094:	0038ab06 	br	3344 <__alt_exception_stack_pointer+0xf8003344>
    5098:	dd802617 	ldw	r22,152(sp)
    509c:	00bfff44 	movi	r2,-3
    50a0:	b0801c16 	blt	r22,r2,5114 <___vfprintf_internal_r+0x1eb0>
    50a4:	d9402a17 	ldw	r5,168(sp)
    50a8:	2d801a16 	blt	r5,r22,5114 <___vfprintf_internal_r+0x1eb0>
    50ac:	dd803215 	stw	r22,200(sp)
    50b0:	003e8906 	br	4ad8 <__alt_exception_stack_pointer+0xf8004ad8>
    50b4:	01000074 	movhi	r4,1
    50b8:	210a6a84 	addi	r4,r4,10666
    50bc:	d9002c15 	stw	r4,176(sp)
    50c0:	003c9106 	br	4308 <__alt_exception_stack_pointer+0xf8004308>
    50c4:	e005883a 	mov	r2,fp
    50c8:	003e7906 	br	4ab0 <__alt_exception_stack_pointer+0xf8004ab0>
    50cc:	d9002a17 	ldw	r4,168(sp)
    50d0:	df002783 	ldbu	fp,158(sp)
    50d4:	dcc02e15 	stw	r19,184(sp)
    50d8:	d9002915 	stw	r4,164(sp)
    50dc:	d9002b15 	stw	r4,172(sp)
    50e0:	d8002a15 	stw	zero,168(sp)
    50e4:	d8003215 	stw	zero,200(sp)
    50e8:	003a3b06 	br	39d8 <__alt_exception_stack_pointer+0xf80039d8>
    50ec:	9080004c 	andi	r2,r18,1
    50f0:	0039883a 	mov	fp,zero
    50f4:	10000426 	beq	r2,zero,5108 <___vfprintf_internal_r+0x1ea4>
    50f8:	00800c04 	movi	r2,48
    50fc:	dc001dc4 	addi	r16,sp,119
    5100:	d8801dc5 	stb	r2,119(sp)
    5104:	003b6406 	br	3e98 <__alt_exception_stack_pointer+0xf8003e98>
    5108:	d8002b15 	stw	zero,172(sp)
    510c:	dc001e04 	addi	r16,sp,120
    5110:	003a2b06 	br	39c0 <__alt_exception_stack_pointer+0xf80039c0>
    5114:	8c7fff84 	addi	r17,r17,-2
    5118:	b5bfffc4 	addi	r22,r22,-1
    511c:	dd802615 	stw	r22,152(sp)
    5120:	dc4022c5 	stb	r17,139(sp)
    5124:	b000bf16 	blt	r22,zero,5424 <___vfprintf_internal_r+0x21c0>
    5128:	00800ac4 	movi	r2,43
    512c:	d8802305 	stb	r2,140(sp)
    5130:	00800244 	movi	r2,9
    5134:	15807016 	blt	r2,r22,52f8 <___vfprintf_internal_r+0x2094>
    5138:	00800c04 	movi	r2,48
    513c:	b5800c04 	addi	r22,r22,48
    5140:	d8802345 	stb	r2,141(sp)
    5144:	dd802385 	stb	r22,142(sp)
    5148:	d88023c4 	addi	r2,sp,143
    514c:	df0022c4 	addi	fp,sp,139
    5150:	d8c03317 	ldw	r3,204(sp)
    5154:	1739c83a 	sub	fp,r2,fp
    5158:	d9003317 	ldw	r4,204(sp)
    515c:	e0c7883a 	add	r3,fp,r3
    5160:	df003a15 	stw	fp,232(sp)
    5164:	d8c02b15 	stw	r3,172(sp)
    5168:	00800044 	movi	r2,1
    516c:	1100b30e 	bge	r2,r4,543c <___vfprintf_internal_r+0x21d8>
    5170:	d8c02b17 	ldw	r3,172(sp)
    5174:	18c00044 	addi	r3,r3,1
    5178:	d8c02b15 	stw	r3,172(sp)
    517c:	1805883a 	mov	r2,r3
    5180:	1800ac16 	blt	r3,zero,5434 <___vfprintf_internal_r+0x21d0>
    5184:	d8003215 	stw	zero,200(sp)
    5188:	003e5d06 	br	4b00 <__alt_exception_stack_pointer+0xf8004b00>
    518c:	d9002d17 	ldw	r4,180(sp)
    5190:	d9801e04 	addi	r6,sp,120
    5194:	b80b883a 	mov	r5,r23
    5198:	000a1e40 	call	a1e4 <__sprint_r>
    519c:	1039351e 	bne	r2,zero,3674 <__alt_exception_stack_pointer+0xf8003674>
    51a0:	dc402617 	ldw	r17,152(sp)
    51a4:	d8c02017 	ldw	r3,128(sp)
    51a8:	d8801f17 	ldw	r2,124(sp)
    51ac:	da000404 	addi	r8,sp,16
    51b0:	003ed606 	br	4d0c <__alt_exception_stack_pointer+0xf8004d0c>
    51b4:	182b883a 	mov	r21,r3
    51b8:	d8002a15 	stw	zero,168(sp)
    51bc:	00388c06 	br	33f0 <__alt_exception_stack_pointer+0xf80033f0>
    51c0:	d8802a17 	ldw	r2,168(sp)
    51c4:	103e071e 	bne	r2,zero,49e4 <__alt_exception_stack_pointer+0xf80049e4>
    51c8:	dc002a15 	stw	r16,168(sp)
    51cc:	003e0506 	br	49e4 <__alt_exception_stack_pointer+0xf80049e4>
    51d0:	d9002a17 	ldw	r4,168(sp)
    51d4:	20c00044 	addi	r3,r4,1
    51d8:	003e0f06 	br	4a18 <__alt_exception_stack_pointer+0xf8004a18>
    51dc:	01400184 	movi	r5,6
    51e0:	d9402a15 	stw	r5,168(sp)
    51e4:	003dff06 	br	49e4 <__alt_exception_stack_pointer+0xf80049e4>
    51e8:	d8802104 	addi	r2,sp,132
    51ec:	d8800315 	stw	r2,12(sp)
    51f0:	d8802504 	addi	r2,sp,148
    51f4:	d8800215 	stw	r2,8(sp)
    51f8:	d8802604 	addi	r2,sp,152
    51fc:	d8800115 	stw	r2,4(sp)
    5200:	d8802a17 	ldw	r2,168(sp)
    5204:	d9403617 	ldw	r5,216(sp)
    5208:	d9002d17 	ldw	r4,180(sp)
    520c:	d8800015 	stw	r2,0(sp)
    5210:	01c000c4 	movi	r7,3
    5214:	980d883a 	mov	r6,r19
    5218:	da003d15 	stw	r8,244(sp)
    521c:	00059940 	call	5994 <_dtoa_r>
    5220:	d8c02a17 	ldw	r3,168(sp)
    5224:	da003d17 	ldw	r8,244(sp)
    5228:	1021883a 	mov	r16,r2
    522c:	10f9883a 	add	fp,r2,r3
    5230:	81000007 	ldb	r4,0(r16)
    5234:	00800c04 	movi	r2,48
    5238:	20805e26 	beq	r4,r2,53b4 <___vfprintf_internal_r+0x2150>
    523c:	d8c02617 	ldw	r3,152(sp)
    5240:	e0f9883a 	add	fp,fp,r3
    5244:	003e0a06 	br	4a70 <__alt_exception_stack_pointer+0xf8004a70>
    5248:	00c00b44 	movi	r3,45
    524c:	24e0003c 	xorhi	r19,r4,32768
    5250:	d8c02905 	stb	r3,164(sp)
    5254:	003de906 	br	49fc <__alt_exception_stack_pointer+0xf80049fc>
    5258:	d8c03217 	ldw	r3,200(sp)
    525c:	00c07a0e 	bge	zero,r3,5448 <___vfprintf_internal_r+0x21e4>
    5260:	00800044 	movi	r2,1
    5264:	d9003317 	ldw	r4,204(sp)
    5268:	1105883a 	add	r2,r2,r4
    526c:	d8802b15 	stw	r2,172(sp)
    5270:	10004e16 	blt	r2,zero,53ac <___vfprintf_internal_r+0x2148>
    5274:	044019c4 	movi	r17,103
    5278:	003e2106 	br	4b00 <__alt_exception_stack_pointer+0xf8004b00>
    527c:	d9002a17 	ldw	r4,168(sp)
    5280:	d8802104 	addi	r2,sp,132
    5284:	d8800315 	stw	r2,12(sp)
    5288:	d9000015 	stw	r4,0(sp)
    528c:	d8802504 	addi	r2,sp,148
    5290:	d9403617 	ldw	r5,216(sp)
    5294:	d9002d17 	ldw	r4,180(sp)
    5298:	d8800215 	stw	r2,8(sp)
    529c:	d8802604 	addi	r2,sp,152
    52a0:	d8800115 	stw	r2,4(sp)
    52a4:	01c000c4 	movi	r7,3
    52a8:	980d883a 	mov	r6,r19
    52ac:	da003d15 	stw	r8,244(sp)
    52b0:	00059940 	call	5994 <_dtoa_r>
    52b4:	d8c02a17 	ldw	r3,168(sp)
    52b8:	da003d17 	ldw	r8,244(sp)
    52bc:	1021883a 	mov	r16,r2
    52c0:	00801184 	movi	r2,70
    52c4:	80f9883a 	add	fp,r16,r3
    52c8:	88bfd926 	beq	r17,r2,5230 <__alt_exception_stack_pointer+0xf8005230>
    52cc:	003de806 	br	4a70 <__alt_exception_stack_pointer+0xf8004a70>
    52d0:	d9002a17 	ldw	r4,168(sp)
    52d4:	00c04d0e 	bge	zero,r3,540c <___vfprintf_internal_r+0x21a8>
    52d8:	2000441e 	bne	r4,zero,53ec <___vfprintf_internal_r+0x2188>
    52dc:	9480004c 	andi	r18,r18,1
    52e0:	9000421e 	bne	r18,zero,53ec <___vfprintf_internal_r+0x2188>
    52e4:	1805883a 	mov	r2,r3
    52e8:	18006f16 	blt	r3,zero,54a8 <___vfprintf_internal_r+0x2244>
    52ec:	d8c03217 	ldw	r3,200(sp)
    52f0:	d8c02b15 	stw	r3,172(sp)
    52f4:	003e0206 	br	4b00 <__alt_exception_stack_pointer+0xf8004b00>
    52f8:	df0022c4 	addi	fp,sp,139
    52fc:	dc002a15 	stw	r16,168(sp)
    5300:	4027883a 	mov	r19,r8
    5304:	e021883a 	mov	r16,fp
    5308:	b009883a 	mov	r4,r22
    530c:	01400284 	movi	r5,10
    5310:	000cd700 	call	cd70 <__modsi3>
    5314:	10800c04 	addi	r2,r2,48
    5318:	843fffc4 	addi	r16,r16,-1
    531c:	b009883a 	mov	r4,r22
    5320:	01400284 	movi	r5,10
    5324:	80800005 	stb	r2,0(r16)
    5328:	000ccec0 	call	ccec <__divsi3>
    532c:	102d883a 	mov	r22,r2
    5330:	00800244 	movi	r2,9
    5334:	15bff416 	blt	r2,r22,5308 <__alt_exception_stack_pointer+0xf8005308>
    5338:	9811883a 	mov	r8,r19
    533c:	b0800c04 	addi	r2,r22,48
    5340:	8027883a 	mov	r19,r16
    5344:	997fffc4 	addi	r5,r19,-1
    5348:	98bfffc5 	stb	r2,-1(r19)
    534c:	dc002a17 	ldw	r16,168(sp)
    5350:	2f006d2e 	bgeu	r5,fp,5508 <___vfprintf_internal_r+0x22a4>
    5354:	d9c02384 	addi	r7,sp,142
    5358:	3ccfc83a 	sub	r7,r7,r19
    535c:	d9002344 	addi	r4,sp,141
    5360:	e1cf883a 	add	r7,fp,r7
    5364:	00000106 	br	536c <___vfprintf_internal_r+0x2108>
    5368:	28800003 	ldbu	r2,0(r5)
    536c:	20800005 	stb	r2,0(r4)
    5370:	21000044 	addi	r4,r4,1
    5374:	29400044 	addi	r5,r5,1
    5378:	393ffb1e 	bne	r7,r4,5368 <__alt_exception_stack_pointer+0xf8005368>
    537c:	d8802304 	addi	r2,sp,140
    5380:	14c5c83a 	sub	r2,r2,r19
    5384:	d8c02344 	addi	r3,sp,141
    5388:	1885883a 	add	r2,r3,r2
    538c:	003f7006 	br	5150 <__alt_exception_stack_pointer+0xf8005150>
    5390:	0005883a 	mov	r2,zero
    5394:	003f0f06 	br	4fd4 <__alt_exception_stack_pointer+0xf8004fd4>
    5398:	d8c03217 	ldw	r3,200(sp)
    539c:	18c00044 	addi	r3,r3,1
    53a0:	d8c02b15 	stw	r3,172(sp)
    53a4:	1805883a 	mov	r2,r3
    53a8:	183fb20e 	bge	r3,zero,5274 <__alt_exception_stack_pointer+0xf8005274>
    53ac:	0005883a 	mov	r2,zero
    53b0:	003fb006 	br	5274 <__alt_exception_stack_pointer+0xf8005274>
    53b4:	d9003617 	ldw	r4,216(sp)
    53b8:	000d883a 	mov	r6,zero
    53bc:	000f883a 	mov	r7,zero
    53c0:	980b883a 	mov	r5,r19
    53c4:	d8c03c15 	stw	r3,240(sp)
    53c8:	da003d15 	stw	r8,244(sp)
    53cc:	000e1440 	call	e144 <__eqdf2>
    53d0:	d8c03c17 	ldw	r3,240(sp)
    53d4:	da003d17 	ldw	r8,244(sp)
    53d8:	103f9826 	beq	r2,zero,523c <__alt_exception_stack_pointer+0xf800523c>
    53dc:	00800044 	movi	r2,1
    53e0:	10c7c83a 	sub	r3,r2,r3
    53e4:	d8c02615 	stw	r3,152(sp)
    53e8:	003f9506 	br	5240 <__alt_exception_stack_pointer+0xf8005240>
    53ec:	d9002a17 	ldw	r4,168(sp)
    53f0:	d8c03217 	ldw	r3,200(sp)
    53f4:	20800044 	addi	r2,r4,1
    53f8:	1885883a 	add	r2,r3,r2
    53fc:	d8802b15 	stw	r2,172(sp)
    5400:	103dbf0e 	bge	r2,zero,4b00 <__alt_exception_stack_pointer+0xf8004b00>
    5404:	0005883a 	mov	r2,zero
    5408:	003dbd06 	br	4b00 <__alt_exception_stack_pointer+0xf8004b00>
    540c:	2000201e 	bne	r4,zero,5490 <___vfprintf_internal_r+0x222c>
    5410:	9480004c 	andi	r18,r18,1
    5414:	90001e1e 	bne	r18,zero,5490 <___vfprintf_internal_r+0x222c>
    5418:	00800044 	movi	r2,1
    541c:	d8802b15 	stw	r2,172(sp)
    5420:	003db706 	br	4b00 <__alt_exception_stack_pointer+0xf8004b00>
    5424:	00800b44 	movi	r2,45
    5428:	05adc83a 	sub	r22,zero,r22
    542c:	d8802305 	stb	r2,140(sp)
    5430:	003f3f06 	br	5130 <__alt_exception_stack_pointer+0xf8005130>
    5434:	0005883a 	mov	r2,zero
    5438:	003f5206 	br	5184 <__alt_exception_stack_pointer+0xf8005184>
    543c:	90a4703a 	and	r18,r18,r2
    5440:	903f4e26 	beq	r18,zero,517c <__alt_exception_stack_pointer+0xf800517c>
    5444:	003f4a06 	br	5170 <__alt_exception_stack_pointer+0xf8005170>
    5448:	00800084 	movi	r2,2
    544c:	10c5c83a 	sub	r2,r2,r3
    5450:	003f8406 	br	5264 <__alt_exception_stack_pointer+0xf8005264>
    5454:	d9402e17 	ldw	r5,184(sp)
    5458:	d9002e17 	ldw	r4,184(sp)
    545c:	ac400043 	ldbu	r17,1(r21)
    5460:	29400017 	ldw	r5,0(r5)
    5464:	20800104 	addi	r2,r4,4
    5468:	d8802e15 	stw	r2,184(sp)
    546c:	d9402a15 	stw	r5,168(sp)
    5470:	182b883a 	mov	r21,r3
    5474:	283e7b0e 	bge	r5,zero,4e64 <__alt_exception_stack_pointer+0xf8004e64>
    5478:	8c403fcc 	andi	r17,r17,255
    547c:	017fffc4 	movi	r5,-1
    5480:	8c40201c 	xori	r17,r17,128
    5484:	d9402a15 	stw	r5,168(sp)
    5488:	8c7fe004 	addi	r17,r17,-128
    548c:	0037d706 	br	33ec <__alt_exception_stack_pointer+0xf80033ec>
    5490:	d8c02a17 	ldw	r3,168(sp)
    5494:	18c00084 	addi	r3,r3,2
    5498:	d8c02b15 	stw	r3,172(sp)
    549c:	1805883a 	mov	r2,r3
    54a0:	183d970e 	bge	r3,zero,4b00 <__alt_exception_stack_pointer+0xf8004b00>
    54a4:	003fd706 	br	5404 <__alt_exception_stack_pointer+0xf8005404>
    54a8:	0005883a 	mov	r2,zero
    54ac:	003f8f06 	br	52ec <__alt_exception_stack_pointer+0xf80052ec>
    54b0:	9080004c 	andi	r2,r18,1
    54b4:	103f821e 	bne	r2,zero,52c0 <__alt_exception_stack_pointer+0xf80052c0>
    54b8:	d8802117 	ldw	r2,132(sp)
    54bc:	1405c83a 	sub	r2,r2,r16
    54c0:	d8803315 	stw	r2,204(sp)
    54c4:	b47ef426 	beq	r22,r17,5098 <__alt_exception_stack_pointer+0xf8005098>
    54c8:	dd802617 	ldw	r22,152(sp)
    54cc:	003f1206 	br	5118 <__alt_exception_stack_pointer+0xf8005118>
    54d0:	d8c02b03 	ldbu	r3,172(sp)
    54d4:	d8c02785 	stb	r3,158(sp)
    54d8:	0038df06 	br	3858 <__alt_exception_stack_pointer+0xf8003858>
    54dc:	d8c02b03 	ldbu	r3,172(sp)
    54e0:	d8c02785 	stb	r3,158(sp)
    54e4:	0038aa06 	br	3790 <__alt_exception_stack_pointer+0xf8003790>
    54e8:	d8c02b03 	ldbu	r3,172(sp)
    54ec:	d8c02785 	stb	r3,158(sp)
    54f0:	003a4306 	br	3e00 <__alt_exception_stack_pointer+0xf8003e00>
    54f4:	d8c02b03 	ldbu	r3,172(sp)
    54f8:	d8c02785 	stb	r3,158(sp)
    54fc:	003af506 	br	40d4 <__alt_exception_stack_pointer+0xf80040d4>
    5500:	0005883a 	mov	r2,zero
    5504:	003d7b06 	br	4af4 <__alt_exception_stack_pointer+0xf8004af4>
    5508:	d8802344 	addi	r2,sp,141
    550c:	003f1006 	br	5150 <__alt_exception_stack_pointer+0xf8005150>
    5510:	d8c02b03 	ldbu	r3,172(sp)
    5514:	d8c02785 	stb	r3,158(sp)
    5518:	0038fd06 	br	3910 <__alt_exception_stack_pointer+0xf8003910>
    551c:	d8c02b03 	ldbu	r3,172(sp)
    5520:	d8c02785 	stb	r3,158(sp)
    5524:	003a9706 	br	3f84 <__alt_exception_stack_pointer+0xf8003f84>
    5528:	d8c02b03 	ldbu	r3,172(sp)
    552c:	d8c02785 	stb	r3,158(sp)
    5530:	003a1806 	br	3d94 <__alt_exception_stack_pointer+0xf8003d94>
    5534:	d8c02b03 	ldbu	r3,172(sp)
    5538:	d8c02785 	stb	r3,158(sp)
    553c:	003abe06 	br	4038 <__alt_exception_stack_pointer+0xf8004038>

00005540 <__vfprintf_internal>:
    5540:	00800074 	movhi	r2,1
    5544:	1091c904 	addi	r2,r2,18212
    5548:	300f883a 	mov	r7,r6
    554c:	280d883a 	mov	r6,r5
    5550:	200b883a 	mov	r5,r4
    5554:	11000017 	ldw	r4,0(r2)
    5558:	00032641 	jmpi	3264 <___vfprintf_internal_r>

0000555c <__sbprintf>:
    555c:	2880030b 	ldhu	r2,12(r5)
    5560:	2ac01917 	ldw	r11,100(r5)
    5564:	2a80038b 	ldhu	r10,14(r5)
    5568:	2a400717 	ldw	r9,28(r5)
    556c:	2a000917 	ldw	r8,36(r5)
    5570:	defee204 	addi	sp,sp,-1144
    5574:	00c10004 	movi	r3,1024
    5578:	dc011a15 	stw	r16,1128(sp)
    557c:	10bfff4c 	andi	r2,r2,65533
    5580:	2821883a 	mov	r16,r5
    5584:	d8cb883a 	add	r5,sp,r3
    5588:	dc811c15 	stw	r18,1136(sp)
    558c:	dc411b15 	stw	r17,1132(sp)
    5590:	dfc11d15 	stw	ra,1140(sp)
    5594:	2025883a 	mov	r18,r4
    5598:	d881030d 	sth	r2,1036(sp)
    559c:	dac11915 	stw	r11,1124(sp)
    55a0:	da81038d 	sth	r10,1038(sp)
    55a4:	da410715 	stw	r9,1052(sp)
    55a8:	da010915 	stw	r8,1060(sp)
    55ac:	dec10015 	stw	sp,1024(sp)
    55b0:	dec10415 	stw	sp,1040(sp)
    55b4:	d8c10215 	stw	r3,1032(sp)
    55b8:	d8c10515 	stw	r3,1044(sp)
    55bc:	d8010615 	stw	zero,1048(sp)
    55c0:	00032640 	call	3264 <___vfprintf_internal_r>
    55c4:	1023883a 	mov	r17,r2
    55c8:	10000416 	blt	r2,zero,55dc <__sbprintf+0x80>
    55cc:	d9410004 	addi	r5,sp,1024
    55d0:	9009883a 	mov	r4,r18
    55d4:	00072380 	call	7238 <_fflush_r>
    55d8:	10000d1e 	bne	r2,zero,5610 <__sbprintf+0xb4>
    55dc:	d881030b 	ldhu	r2,1036(sp)
    55e0:	1080100c 	andi	r2,r2,64
    55e4:	10000326 	beq	r2,zero,55f4 <__sbprintf+0x98>
    55e8:	8080030b 	ldhu	r2,12(r16)
    55ec:	10801014 	ori	r2,r2,64
    55f0:	8080030d 	sth	r2,12(r16)
    55f4:	8805883a 	mov	r2,r17
    55f8:	dfc11d17 	ldw	ra,1140(sp)
    55fc:	dc811c17 	ldw	r18,1136(sp)
    5600:	dc411b17 	ldw	r17,1132(sp)
    5604:	dc011a17 	ldw	r16,1128(sp)
    5608:	dec11e04 	addi	sp,sp,1144
    560c:	f800283a 	ret
    5610:	047fffc4 	movi	r17,-1
    5614:	003ff106 	br	55dc <__alt_exception_stack_pointer+0xf80055dc>

00005618 <__swsetup_r>:
    5618:	00800074 	movhi	r2,1
    561c:	defffd04 	addi	sp,sp,-12
    5620:	1091c904 	addi	r2,r2,18212
    5624:	dc400115 	stw	r17,4(sp)
    5628:	2023883a 	mov	r17,r4
    562c:	11000017 	ldw	r4,0(r2)
    5630:	dc000015 	stw	r16,0(sp)
    5634:	dfc00215 	stw	ra,8(sp)
    5638:	2821883a 	mov	r16,r5
    563c:	20000226 	beq	r4,zero,5648 <__swsetup_r+0x30>
    5640:	20800e17 	ldw	r2,56(r4)
    5644:	10003126 	beq	r2,zero,570c <__swsetup_r+0xf4>
    5648:	8080030b 	ldhu	r2,12(r16)
    564c:	10c0020c 	andi	r3,r2,8
    5650:	1009883a 	mov	r4,r2
    5654:	18000f26 	beq	r3,zero,5694 <__swsetup_r+0x7c>
    5658:	80c00417 	ldw	r3,16(r16)
    565c:	18001526 	beq	r3,zero,56b4 <__swsetup_r+0x9c>
    5660:	1100004c 	andi	r4,r2,1
    5664:	20001c1e 	bne	r4,zero,56d8 <__swsetup_r+0xc0>
    5668:	1080008c 	andi	r2,r2,2
    566c:	1000291e 	bne	r2,zero,5714 <__swsetup_r+0xfc>
    5670:	80800517 	ldw	r2,20(r16)
    5674:	80800215 	stw	r2,8(r16)
    5678:	18001c26 	beq	r3,zero,56ec <__swsetup_r+0xd4>
    567c:	0005883a 	mov	r2,zero
    5680:	dfc00217 	ldw	ra,8(sp)
    5684:	dc400117 	ldw	r17,4(sp)
    5688:	dc000017 	ldw	r16,0(sp)
    568c:	dec00304 	addi	sp,sp,12
    5690:	f800283a 	ret
    5694:	2080040c 	andi	r2,r4,16
    5698:	10002e26 	beq	r2,zero,5754 <__swsetup_r+0x13c>
    569c:	2080010c 	andi	r2,r4,4
    56a0:	10001e1e 	bne	r2,zero,571c <__swsetup_r+0x104>
    56a4:	80c00417 	ldw	r3,16(r16)
    56a8:	20800214 	ori	r2,r4,8
    56ac:	8080030d 	sth	r2,12(r16)
    56b0:	183feb1e 	bne	r3,zero,5660 <__alt_exception_stack_pointer+0xf8005660>
    56b4:	1100a00c 	andi	r4,r2,640
    56b8:	01408004 	movi	r5,512
    56bc:	217fe826 	beq	r4,r5,5660 <__alt_exception_stack_pointer+0xf8005660>
    56c0:	800b883a 	mov	r5,r16
    56c4:	8809883a 	mov	r4,r17
    56c8:	00081d40 	call	81d4 <__smakebuf_r>
    56cc:	8080030b 	ldhu	r2,12(r16)
    56d0:	80c00417 	ldw	r3,16(r16)
    56d4:	003fe206 	br	5660 <__alt_exception_stack_pointer+0xf8005660>
    56d8:	80800517 	ldw	r2,20(r16)
    56dc:	80000215 	stw	zero,8(r16)
    56e0:	0085c83a 	sub	r2,zero,r2
    56e4:	80800615 	stw	r2,24(r16)
    56e8:	183fe41e 	bne	r3,zero,567c <__alt_exception_stack_pointer+0xf800567c>
    56ec:	80c0030b 	ldhu	r3,12(r16)
    56f0:	0005883a 	mov	r2,zero
    56f4:	1900200c 	andi	r4,r3,128
    56f8:	203fe126 	beq	r4,zero,5680 <__alt_exception_stack_pointer+0xf8005680>
    56fc:	18c01014 	ori	r3,r3,64
    5700:	80c0030d 	sth	r3,12(r16)
    5704:	00bfffc4 	movi	r2,-1
    5708:	003fdd06 	br	5680 <__alt_exception_stack_pointer+0xf8005680>
    570c:	00076240 	call	7624 <__sinit>
    5710:	003fcd06 	br	5648 <__alt_exception_stack_pointer+0xf8005648>
    5714:	0005883a 	mov	r2,zero
    5718:	003fd606 	br	5674 <__alt_exception_stack_pointer+0xf8005674>
    571c:	81400c17 	ldw	r5,48(r16)
    5720:	28000626 	beq	r5,zero,573c <__swsetup_r+0x124>
    5724:	80801004 	addi	r2,r16,64
    5728:	28800326 	beq	r5,r2,5738 <__swsetup_r+0x120>
    572c:	8809883a 	mov	r4,r17
    5730:	00077980 	call	7798 <_free_r>
    5734:	8100030b 	ldhu	r4,12(r16)
    5738:	80000c15 	stw	zero,48(r16)
    573c:	80c00417 	ldw	r3,16(r16)
    5740:	00bff6c4 	movi	r2,-37
    5744:	1108703a 	and	r4,r2,r4
    5748:	80000115 	stw	zero,4(r16)
    574c:	80c00015 	stw	r3,0(r16)
    5750:	003fd506 	br	56a8 <__alt_exception_stack_pointer+0xf80056a8>
    5754:	00800244 	movi	r2,9
    5758:	88800015 	stw	r2,0(r17)
    575c:	20801014 	ori	r2,r4,64
    5760:	8080030d 	sth	r2,12(r16)
    5764:	00bfffc4 	movi	r2,-1
    5768:	003fc506 	br	5680 <__alt_exception_stack_pointer+0xf8005680>

0000576c <quorem>:
    576c:	defff204 	addi	sp,sp,-56
    5770:	ddc00b15 	stw	r23,44(sp)
    5774:	20800417 	ldw	r2,16(r4)
    5778:	2dc00417 	ldw	r23,16(r5)
    577c:	dfc00d15 	stw	ra,52(sp)
    5780:	df000c15 	stw	fp,48(sp)
    5784:	dd800a15 	stw	r22,40(sp)
    5788:	dd400915 	stw	r21,36(sp)
    578c:	dd000815 	stw	r20,32(sp)
    5790:	dcc00715 	stw	r19,28(sp)
    5794:	dc800615 	stw	r18,24(sp)
    5798:	dc400515 	stw	r17,20(sp)
    579c:	dc000415 	stw	r16,16(sp)
    57a0:	15c07a16 	blt	r2,r23,598c <quorem+0x220>
    57a4:	bdffffc4 	addi	r23,r23,-1
    57a8:	bde9883a 	add	r20,r23,r23
    57ac:	28c00504 	addi	r3,r5,20
    57b0:	a529883a 	add	r20,r20,r20
    57b4:	1d39883a 	add	fp,r3,r20
    57b8:	24c00504 	addi	r19,r4,20
    57bc:	d9400215 	stw	r5,8(sp)
    57c0:	9d29883a 	add	r20,r19,r20
    57c4:	e1400017 	ldw	r5,0(fp)
    57c8:	d9000015 	stw	r4,0(sp)
    57cc:	a1000017 	ldw	r4,0(r20)
    57d0:	29400044 	addi	r5,r5,1
    57d4:	d8c00115 	stw	r3,4(sp)
    57d8:	dd000315 	stw	r20,12(sp)
    57dc:	000cde40 	call	cde4 <__udivsi3>
    57e0:	1025883a 	mov	r18,r2
    57e4:	10003026 	beq	r2,zero,58a8 <quorem+0x13c>
    57e8:	dc400117 	ldw	r17,4(sp)
    57ec:	9829883a 	mov	r20,r19
    57f0:	002d883a 	mov	r22,zero
    57f4:	0021883a 	mov	r16,zero
    57f8:	8d400017 	ldw	r21,0(r17)
    57fc:	900b883a 	mov	r5,r18
    5800:	8c400104 	addi	r17,r17,4
    5804:	a93fffcc 	andi	r4,r21,65535
    5808:	000cea00 	call	cea0 <__mulsi3>
    580c:	a808d43a 	srli	r4,r21,16
    5810:	900b883a 	mov	r5,r18
    5814:	15ad883a 	add	r22,r2,r22
    5818:	000cea00 	call	cea0 <__mulsi3>
    581c:	a1000017 	ldw	r4,0(r20)
    5820:	b00cd43a 	srli	r6,r22,16
    5824:	b0ffffcc 	andi	r3,r22,65535
    5828:	217fffcc 	andi	r5,r4,65535
    582c:	2c21883a 	add	r16,r5,r16
    5830:	80c7c83a 	sub	r3,r16,r3
    5834:	2008d43a 	srli	r4,r4,16
    5838:	1185883a 	add	r2,r2,r6
    583c:	1821d43a 	srai	r16,r3,16
    5840:	117fffcc 	andi	r5,r2,65535
    5844:	2149c83a 	sub	r4,r4,r5
    5848:	2421883a 	add	r16,r4,r16
    584c:	8008943a 	slli	r4,r16,16
    5850:	18ffffcc 	andi	r3,r3,65535
    5854:	102cd43a 	srli	r22,r2,16
    5858:	20c8b03a 	or	r4,r4,r3
    585c:	a1000015 	stw	r4,0(r20)
    5860:	8021d43a 	srai	r16,r16,16
    5864:	a5000104 	addi	r20,r20,4
    5868:	e47fe32e 	bgeu	fp,r17,57f8 <__alt_exception_stack_pointer+0xf80057f8>
    586c:	d8c00317 	ldw	r3,12(sp)
    5870:	18800017 	ldw	r2,0(r3)
    5874:	10000c1e 	bne	r2,zero,58a8 <quorem+0x13c>
    5878:	18bfff04 	addi	r2,r3,-4
    587c:	9880082e 	bgeu	r19,r2,58a0 <quorem+0x134>
    5880:	18ffff17 	ldw	r3,-4(r3)
    5884:	18000326 	beq	r3,zero,5894 <quorem+0x128>
    5888:	00000506 	br	58a0 <quorem+0x134>
    588c:	10c00017 	ldw	r3,0(r2)
    5890:	1800031e 	bne	r3,zero,58a0 <quorem+0x134>
    5894:	10bfff04 	addi	r2,r2,-4
    5898:	bdffffc4 	addi	r23,r23,-1
    589c:	98bffb36 	bltu	r19,r2,588c <__alt_exception_stack_pointer+0xf800588c>
    58a0:	d8c00017 	ldw	r3,0(sp)
    58a4:	1dc00415 	stw	r23,16(r3)
    58a8:	d9400217 	ldw	r5,8(sp)
    58ac:	d9000017 	ldw	r4,0(sp)
    58b0:	00091c40 	call	91c4 <__mcmp>
    58b4:	10002816 	blt	r2,zero,5958 <quorem+0x1ec>
    58b8:	dc400117 	ldw	r17,4(sp)
    58bc:	94800044 	addi	r18,r18,1
    58c0:	980d883a 	mov	r6,r19
    58c4:	0007883a 	mov	r3,zero
    58c8:	31000017 	ldw	r4,0(r6)
    58cc:	89400017 	ldw	r5,0(r17)
    58d0:	31800104 	addi	r6,r6,4
    58d4:	20bfffcc 	andi	r2,r4,65535
    58d8:	10c7883a 	add	r3,r2,r3
    58dc:	28bfffcc 	andi	r2,r5,65535
    58e0:	1885c83a 	sub	r2,r3,r2
    58e4:	280ad43a 	srli	r5,r5,16
    58e8:	2008d43a 	srli	r4,r4,16
    58ec:	1007d43a 	srai	r3,r2,16
    58f0:	10bfffcc 	andi	r2,r2,65535
    58f4:	2149c83a 	sub	r4,r4,r5
    58f8:	20c9883a 	add	r4,r4,r3
    58fc:	200a943a 	slli	r5,r4,16
    5900:	8c400104 	addi	r17,r17,4
    5904:	2007d43a 	srai	r3,r4,16
    5908:	2884b03a 	or	r2,r5,r2
    590c:	30bfff15 	stw	r2,-4(r6)
    5910:	e47fed2e 	bgeu	fp,r17,58c8 <__alt_exception_stack_pointer+0xf80058c8>
    5914:	bdc5883a 	add	r2,r23,r23
    5918:	1085883a 	add	r2,r2,r2
    591c:	9887883a 	add	r3,r19,r2
    5920:	18800017 	ldw	r2,0(r3)
    5924:	10000c1e 	bne	r2,zero,5958 <quorem+0x1ec>
    5928:	18bfff04 	addi	r2,r3,-4
    592c:	9880082e 	bgeu	r19,r2,5950 <quorem+0x1e4>
    5930:	18ffff17 	ldw	r3,-4(r3)
    5934:	18000326 	beq	r3,zero,5944 <quorem+0x1d8>
    5938:	00000506 	br	5950 <quorem+0x1e4>
    593c:	10c00017 	ldw	r3,0(r2)
    5940:	1800031e 	bne	r3,zero,5950 <quorem+0x1e4>
    5944:	10bfff04 	addi	r2,r2,-4
    5948:	bdffffc4 	addi	r23,r23,-1
    594c:	98bffb36 	bltu	r19,r2,593c <__alt_exception_stack_pointer+0xf800593c>
    5950:	d8c00017 	ldw	r3,0(sp)
    5954:	1dc00415 	stw	r23,16(r3)
    5958:	9005883a 	mov	r2,r18
    595c:	dfc00d17 	ldw	ra,52(sp)
    5960:	df000c17 	ldw	fp,48(sp)
    5964:	ddc00b17 	ldw	r23,44(sp)
    5968:	dd800a17 	ldw	r22,40(sp)
    596c:	dd400917 	ldw	r21,36(sp)
    5970:	dd000817 	ldw	r20,32(sp)
    5974:	dcc00717 	ldw	r19,28(sp)
    5978:	dc800617 	ldw	r18,24(sp)
    597c:	dc400517 	ldw	r17,20(sp)
    5980:	dc000417 	ldw	r16,16(sp)
    5984:	dec00e04 	addi	sp,sp,56
    5988:	f800283a 	ret
    598c:	0005883a 	mov	r2,zero
    5990:	003ff206 	br	595c <__alt_exception_stack_pointer+0xf800595c>

00005994 <_dtoa_r>:
    5994:	20801017 	ldw	r2,64(r4)
    5998:	deffde04 	addi	sp,sp,-136
    599c:	df002015 	stw	fp,128(sp)
    59a0:	dcc01b15 	stw	r19,108(sp)
    59a4:	dc801a15 	stw	r18,104(sp)
    59a8:	dc401915 	stw	r17,100(sp)
    59ac:	dc001815 	stw	r16,96(sp)
    59b0:	dfc02115 	stw	ra,132(sp)
    59b4:	ddc01f15 	stw	r23,124(sp)
    59b8:	dd801e15 	stw	r22,120(sp)
    59bc:	dd401d15 	stw	r21,116(sp)
    59c0:	dd001c15 	stw	r20,112(sp)
    59c4:	d9c00315 	stw	r7,12(sp)
    59c8:	2039883a 	mov	fp,r4
    59cc:	3023883a 	mov	r17,r6
    59d0:	2825883a 	mov	r18,r5
    59d4:	dc002417 	ldw	r16,144(sp)
    59d8:	3027883a 	mov	r19,r6
    59dc:	10000826 	beq	r2,zero,5a00 <_dtoa_r+0x6c>
    59e0:	21801117 	ldw	r6,68(r4)
    59e4:	00c00044 	movi	r3,1
    59e8:	100b883a 	mov	r5,r2
    59ec:	1986983a 	sll	r3,r3,r6
    59f0:	11800115 	stw	r6,4(r2)
    59f4:	10c00215 	stw	r3,8(r2)
    59f8:	00088e80 	call	88e8 <_Bfree>
    59fc:	e0001015 	stw	zero,64(fp)
    5a00:	88002e16 	blt	r17,zero,5abc <_dtoa_r+0x128>
    5a04:	80000015 	stw	zero,0(r16)
    5a08:	889ffc2c 	andhi	r2,r17,32752
    5a0c:	00dffc34 	movhi	r3,32752
    5a10:	10c01c26 	beq	r2,r3,5a84 <_dtoa_r+0xf0>
    5a14:	000d883a 	mov	r6,zero
    5a18:	000f883a 	mov	r7,zero
    5a1c:	9009883a 	mov	r4,r18
    5a20:	980b883a 	mov	r5,r19
    5a24:	000e1440 	call	e144 <__eqdf2>
    5a28:	10002b1e 	bne	r2,zero,5ad8 <_dtoa_r+0x144>
    5a2c:	d9c02317 	ldw	r7,140(sp)
    5a30:	00800044 	movi	r2,1
    5a34:	38800015 	stw	r2,0(r7)
    5a38:	d8802517 	ldw	r2,148(sp)
    5a3c:	10019e26 	beq	r2,zero,60b8 <_dtoa_r+0x724>
    5a40:	d8c02517 	ldw	r3,148(sp)
    5a44:	00800074 	movhi	r2,1
    5a48:	108a6a44 	addi	r2,r2,10665
    5a4c:	18800015 	stw	r2,0(r3)
    5a50:	10bfffc4 	addi	r2,r2,-1
    5a54:	dfc02117 	ldw	ra,132(sp)
    5a58:	df002017 	ldw	fp,128(sp)
    5a5c:	ddc01f17 	ldw	r23,124(sp)
    5a60:	dd801e17 	ldw	r22,120(sp)
    5a64:	dd401d17 	ldw	r21,116(sp)
    5a68:	dd001c17 	ldw	r20,112(sp)
    5a6c:	dcc01b17 	ldw	r19,108(sp)
    5a70:	dc801a17 	ldw	r18,104(sp)
    5a74:	dc401917 	ldw	r17,100(sp)
    5a78:	dc001817 	ldw	r16,96(sp)
    5a7c:	dec02204 	addi	sp,sp,136
    5a80:	f800283a 	ret
    5a84:	d8c02317 	ldw	r3,140(sp)
    5a88:	0089c3c4 	movi	r2,9999
    5a8c:	18800015 	stw	r2,0(r3)
    5a90:	90017726 	beq	r18,zero,6070 <_dtoa_r+0x6dc>
    5a94:	00800074 	movhi	r2,1
    5a98:	108a7604 	addi	r2,r2,10712
    5a9c:	d9002517 	ldw	r4,148(sp)
    5aa0:	203fec26 	beq	r4,zero,5a54 <__alt_exception_stack_pointer+0xf8005a54>
    5aa4:	10c000c7 	ldb	r3,3(r2)
    5aa8:	1801781e 	bne	r3,zero,608c <_dtoa_r+0x6f8>
    5aac:	10c000c4 	addi	r3,r2,3
    5ab0:	d9802517 	ldw	r6,148(sp)
    5ab4:	30c00015 	stw	r3,0(r6)
    5ab8:	003fe606 	br	5a54 <__alt_exception_stack_pointer+0xf8005a54>
    5abc:	04e00034 	movhi	r19,32768
    5ac0:	9cffffc4 	addi	r19,r19,-1
    5ac4:	00800044 	movi	r2,1
    5ac8:	8ce6703a 	and	r19,r17,r19
    5acc:	80800015 	stw	r2,0(r16)
    5ad0:	9823883a 	mov	r17,r19
    5ad4:	003fcc06 	br	5a08 <__alt_exception_stack_pointer+0xf8005a08>
    5ad8:	d8800204 	addi	r2,sp,8
    5adc:	d8800015 	stw	r2,0(sp)
    5ae0:	d9c00104 	addi	r7,sp,4
    5ae4:	900b883a 	mov	r5,r18
    5ae8:	980d883a 	mov	r6,r19
    5aec:	e009883a 	mov	r4,fp
    5af0:	8820d53a 	srli	r16,r17,20
    5af4:	00095900 	call	9590 <__d2b>
    5af8:	d8800915 	stw	r2,36(sp)
    5afc:	8001651e 	bne	r16,zero,6094 <_dtoa_r+0x700>
    5b00:	dd800217 	ldw	r22,8(sp)
    5b04:	dc000117 	ldw	r16,4(sp)
    5b08:	00800804 	movi	r2,32
    5b0c:	b421883a 	add	r16,r22,r16
    5b10:	80c10c84 	addi	r3,r16,1074
    5b14:	10c2d10e 	bge	r2,r3,665c <_dtoa_r+0xcc8>
    5b18:	00801004 	movi	r2,64
    5b1c:	81010484 	addi	r4,r16,1042
    5b20:	10c7c83a 	sub	r3,r2,r3
    5b24:	9108d83a 	srl	r4,r18,r4
    5b28:	88e2983a 	sll	r17,r17,r3
    5b2c:	2448b03a 	or	r4,r4,r17
    5b30:	000f6600 	call	f660 <__floatunsidf>
    5b34:	017f8434 	movhi	r5,65040
    5b38:	01800044 	movi	r6,1
    5b3c:	1009883a 	mov	r4,r2
    5b40:	194b883a 	add	r5,r3,r5
    5b44:	843fffc4 	addi	r16,r16,-1
    5b48:	d9801115 	stw	r6,68(sp)
    5b4c:	000d883a 	mov	r6,zero
    5b50:	01cffe34 	movhi	r7,16376
    5b54:	000ec080 	call	ec08 <__subdf3>
    5b58:	0198dbf4 	movhi	r6,25455
    5b5c:	01cff4f4 	movhi	r7,16339
    5b60:	3190d844 	addi	r6,r6,17249
    5b64:	39e1e9c4 	addi	r7,r7,-30809
    5b68:	1009883a 	mov	r4,r2
    5b6c:	180b883a 	mov	r5,r3
    5b70:	000e39c0 	call	e39c <__muldf3>
    5b74:	01a2d874 	movhi	r6,35681
    5b78:	01cff1f4 	movhi	r7,16327
    5b7c:	31b22cc4 	addi	r6,r6,-14157
    5b80:	39e28a04 	addi	r7,r7,-30168
    5b84:	180b883a 	mov	r5,r3
    5b88:	1009883a 	mov	r4,r2
    5b8c:	000cec80 	call	cec8 <__adddf3>
    5b90:	8009883a 	mov	r4,r16
    5b94:	1029883a 	mov	r20,r2
    5b98:	1823883a 	mov	r17,r3
    5b9c:	000f5840 	call	f584 <__floatsidf>
    5ba0:	019427f4 	movhi	r6,20639
    5ba4:	01cff4f4 	movhi	r7,16339
    5ba8:	319e7ec4 	addi	r6,r6,31227
    5bac:	39d104c4 	addi	r7,r7,17427
    5bb0:	1009883a 	mov	r4,r2
    5bb4:	180b883a 	mov	r5,r3
    5bb8:	000e39c0 	call	e39c <__muldf3>
    5bbc:	100d883a 	mov	r6,r2
    5bc0:	180f883a 	mov	r7,r3
    5bc4:	a009883a 	mov	r4,r20
    5bc8:	880b883a 	mov	r5,r17
    5bcc:	000cec80 	call	cec8 <__adddf3>
    5bd0:	1009883a 	mov	r4,r2
    5bd4:	180b883a 	mov	r5,r3
    5bd8:	1029883a 	mov	r20,r2
    5bdc:	1823883a 	mov	r17,r3
    5be0:	000f5040 	call	f504 <__fixdfsi>
    5be4:	000d883a 	mov	r6,zero
    5be8:	000f883a 	mov	r7,zero
    5bec:	a009883a 	mov	r4,r20
    5bf0:	880b883a 	mov	r5,r17
    5bf4:	d8800515 	stw	r2,20(sp)
    5bf8:	000e2a80 	call	e2a8 <__ledf2>
    5bfc:	10028716 	blt	r2,zero,661c <_dtoa_r+0xc88>
    5c00:	d8c00517 	ldw	r3,20(sp)
    5c04:	00800584 	movi	r2,22
    5c08:	10c27536 	bltu	r2,r3,65e0 <_dtoa_r+0xc4c>
    5c0c:	180490fa 	slli	r2,r3,3
    5c10:	00c00074 	movhi	r3,1
    5c14:	18ca9104 	addi	r3,r3,10820
    5c18:	1885883a 	add	r2,r3,r2
    5c1c:	11000017 	ldw	r4,0(r2)
    5c20:	11400117 	ldw	r5,4(r2)
    5c24:	900d883a 	mov	r6,r18
    5c28:	980f883a 	mov	r7,r19
    5c2c:	000e1cc0 	call	e1cc <__gedf2>
    5c30:	00828d0e 	bge	zero,r2,6668 <_dtoa_r+0xcd4>
    5c34:	d9000517 	ldw	r4,20(sp)
    5c38:	d8000e15 	stw	zero,56(sp)
    5c3c:	213fffc4 	addi	r4,r4,-1
    5c40:	d9000515 	stw	r4,20(sp)
    5c44:	b42dc83a 	sub	r22,r22,r16
    5c48:	b5bfffc4 	addi	r22,r22,-1
    5c4c:	b0026f16 	blt	r22,zero,660c <_dtoa_r+0xc78>
    5c50:	d8000815 	stw	zero,32(sp)
    5c54:	d9c00517 	ldw	r7,20(sp)
    5c58:	38026416 	blt	r7,zero,65ec <_dtoa_r+0xc58>
    5c5c:	b1ed883a 	add	r22,r22,r7
    5c60:	d9c00d15 	stw	r7,52(sp)
    5c64:	d8000a15 	stw	zero,40(sp)
    5c68:	d9800317 	ldw	r6,12(sp)
    5c6c:	00800244 	movi	r2,9
    5c70:	11811436 	bltu	r2,r6,60c4 <_dtoa_r+0x730>
    5c74:	00800144 	movi	r2,5
    5c78:	1184e10e 	bge	r2,r6,7000 <_dtoa_r+0x166c>
    5c7c:	31bfff04 	addi	r6,r6,-4
    5c80:	d9800315 	stw	r6,12(sp)
    5c84:	0023883a 	mov	r17,zero
    5c88:	d9800317 	ldw	r6,12(sp)
    5c8c:	008000c4 	movi	r2,3
    5c90:	30836726 	beq	r6,r2,6a30 <_dtoa_r+0x109c>
    5c94:	1183410e 	bge	r2,r6,699c <_dtoa_r+0x1008>
    5c98:	d9c00317 	ldw	r7,12(sp)
    5c9c:	00800104 	movi	r2,4
    5ca0:	38827c26 	beq	r7,r2,6694 <_dtoa_r+0xd00>
    5ca4:	00800144 	movi	r2,5
    5ca8:	3884c41e 	bne	r7,r2,6fbc <_dtoa_r+0x1628>
    5cac:	00800044 	movi	r2,1
    5cb0:	d8800b15 	stw	r2,44(sp)
    5cb4:	d8c00517 	ldw	r3,20(sp)
    5cb8:	d9002217 	ldw	r4,136(sp)
    5cbc:	1907883a 	add	r3,r3,r4
    5cc0:	19800044 	addi	r6,r3,1
    5cc4:	d8c00c15 	stw	r3,48(sp)
    5cc8:	d9800615 	stw	r6,24(sp)
    5ccc:	0183a40e 	bge	zero,r6,6b60 <_dtoa_r+0x11cc>
    5cd0:	d9800617 	ldw	r6,24(sp)
    5cd4:	3021883a 	mov	r16,r6
    5cd8:	e0001115 	stw	zero,68(fp)
    5cdc:	008005c4 	movi	r2,23
    5ce0:	1184c92e 	bgeu	r2,r6,7008 <_dtoa_r+0x1674>
    5ce4:	00c00044 	movi	r3,1
    5ce8:	00800104 	movi	r2,4
    5cec:	1085883a 	add	r2,r2,r2
    5cf0:	11000504 	addi	r4,r2,20
    5cf4:	180b883a 	mov	r5,r3
    5cf8:	18c00044 	addi	r3,r3,1
    5cfc:	313ffb2e 	bgeu	r6,r4,5cec <__alt_exception_stack_pointer+0xf8005cec>
    5d00:	e1401115 	stw	r5,68(fp)
    5d04:	e009883a 	mov	r4,fp
    5d08:	00088400 	call	8840 <_Balloc>
    5d0c:	d8800715 	stw	r2,28(sp)
    5d10:	e0801015 	stw	r2,64(fp)
    5d14:	00800384 	movi	r2,14
    5d18:	1400f736 	bltu	r2,r16,60f8 <_dtoa_r+0x764>
    5d1c:	8800f626 	beq	r17,zero,60f8 <_dtoa_r+0x764>
    5d20:	d9c00517 	ldw	r7,20(sp)
    5d24:	01c39a0e 	bge	zero,r7,6b90 <_dtoa_r+0x11fc>
    5d28:	388003cc 	andi	r2,r7,15
    5d2c:	100490fa 	slli	r2,r2,3
    5d30:	382bd13a 	srai	r21,r7,4
    5d34:	00c00074 	movhi	r3,1
    5d38:	18ca9104 	addi	r3,r3,10820
    5d3c:	1885883a 	add	r2,r3,r2
    5d40:	a8c0040c 	andi	r3,r21,16
    5d44:	12400017 	ldw	r9,0(r2)
    5d48:	12000117 	ldw	r8,4(r2)
    5d4c:	18037926 	beq	r3,zero,6b34 <_dtoa_r+0x11a0>
    5d50:	00800074 	movhi	r2,1
    5d54:	108a8704 	addi	r2,r2,10780
    5d58:	11800817 	ldw	r6,32(r2)
    5d5c:	11c00917 	ldw	r7,36(r2)
    5d60:	9009883a 	mov	r4,r18
    5d64:	980b883a 	mov	r5,r19
    5d68:	da001715 	stw	r8,92(sp)
    5d6c:	da401615 	stw	r9,88(sp)
    5d70:	000d7740 	call	d774 <__divdf3>
    5d74:	da001717 	ldw	r8,92(sp)
    5d78:	da401617 	ldw	r9,88(sp)
    5d7c:	ad4003cc 	andi	r21,r21,15
    5d80:	040000c4 	movi	r16,3
    5d84:	1023883a 	mov	r17,r2
    5d88:	1829883a 	mov	r20,r3
    5d8c:	a8001126 	beq	r21,zero,5dd4 <_dtoa_r+0x440>
    5d90:	05c00074 	movhi	r23,1
    5d94:	bdca8704 	addi	r23,r23,10780
    5d98:	4805883a 	mov	r2,r9
    5d9c:	4007883a 	mov	r3,r8
    5da0:	a980004c 	andi	r6,r21,1
    5da4:	1009883a 	mov	r4,r2
    5da8:	a82bd07a 	srai	r21,r21,1
    5dac:	180b883a 	mov	r5,r3
    5db0:	30000426 	beq	r6,zero,5dc4 <_dtoa_r+0x430>
    5db4:	b9800017 	ldw	r6,0(r23)
    5db8:	b9c00117 	ldw	r7,4(r23)
    5dbc:	84000044 	addi	r16,r16,1
    5dc0:	000e39c0 	call	e39c <__muldf3>
    5dc4:	bdc00204 	addi	r23,r23,8
    5dc8:	a83ff51e 	bne	r21,zero,5da0 <__alt_exception_stack_pointer+0xf8005da0>
    5dcc:	1013883a 	mov	r9,r2
    5dd0:	1811883a 	mov	r8,r3
    5dd4:	480d883a 	mov	r6,r9
    5dd8:	400f883a 	mov	r7,r8
    5ddc:	8809883a 	mov	r4,r17
    5de0:	a00b883a 	mov	r5,r20
    5de4:	000d7740 	call	d774 <__divdf3>
    5de8:	d8800f15 	stw	r2,60(sp)
    5dec:	d8c01015 	stw	r3,64(sp)
    5df0:	d8c00e17 	ldw	r3,56(sp)
    5df4:	18000626 	beq	r3,zero,5e10 <_dtoa_r+0x47c>
    5df8:	d9000f17 	ldw	r4,60(sp)
    5dfc:	d9401017 	ldw	r5,64(sp)
    5e00:	000d883a 	mov	r6,zero
    5e04:	01cffc34 	movhi	r7,16368
    5e08:	000e2a80 	call	e2a8 <__ledf2>
    5e0c:	10040b16 	blt	r2,zero,6e3c <_dtoa_r+0x14a8>
    5e10:	8009883a 	mov	r4,r16
    5e14:	000f5840 	call	f584 <__floatsidf>
    5e18:	d9800f17 	ldw	r6,60(sp)
    5e1c:	d9c01017 	ldw	r7,64(sp)
    5e20:	1009883a 	mov	r4,r2
    5e24:	180b883a 	mov	r5,r3
    5e28:	000e39c0 	call	e39c <__muldf3>
    5e2c:	000d883a 	mov	r6,zero
    5e30:	01d00734 	movhi	r7,16412
    5e34:	1009883a 	mov	r4,r2
    5e38:	180b883a 	mov	r5,r3
    5e3c:	000cec80 	call	cec8 <__adddf3>
    5e40:	1021883a 	mov	r16,r2
    5e44:	d8800617 	ldw	r2,24(sp)
    5e48:	047f3034 	movhi	r17,64704
    5e4c:	1c63883a 	add	r17,r3,r17
    5e50:	10031826 	beq	r2,zero,6ab4 <_dtoa_r+0x1120>
    5e54:	d8c00517 	ldw	r3,20(sp)
    5e58:	db000617 	ldw	r12,24(sp)
    5e5c:	d8c01315 	stw	r3,76(sp)
    5e60:	d9000b17 	ldw	r4,44(sp)
    5e64:	20038f26 	beq	r4,zero,6ca4 <_dtoa_r+0x1310>
    5e68:	60bfffc4 	addi	r2,r12,-1
    5e6c:	100490fa 	slli	r2,r2,3
    5e70:	00c00074 	movhi	r3,1
    5e74:	18ca9104 	addi	r3,r3,10820
    5e78:	1885883a 	add	r2,r3,r2
    5e7c:	11800017 	ldw	r6,0(r2)
    5e80:	11c00117 	ldw	r7,4(r2)
    5e84:	d8800717 	ldw	r2,28(sp)
    5e88:	0009883a 	mov	r4,zero
    5e8c:	014ff834 	movhi	r5,16352
    5e90:	db001615 	stw	r12,88(sp)
    5e94:	15c00044 	addi	r23,r2,1
    5e98:	000d7740 	call	d774 <__divdf3>
    5e9c:	800d883a 	mov	r6,r16
    5ea0:	880f883a 	mov	r7,r17
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	180b883a 	mov	r5,r3
    5eac:	000ec080 	call	ec08 <__subdf3>
    5eb0:	d9401017 	ldw	r5,64(sp)
    5eb4:	d9000f17 	ldw	r4,60(sp)
    5eb8:	102b883a 	mov	r21,r2
    5ebc:	d8c01215 	stw	r3,72(sp)
    5ec0:	000f5040 	call	f504 <__fixdfsi>
    5ec4:	1009883a 	mov	r4,r2
    5ec8:	1029883a 	mov	r20,r2
    5ecc:	000f5840 	call	f584 <__floatsidf>
    5ed0:	d9000f17 	ldw	r4,60(sp)
    5ed4:	d9401017 	ldw	r5,64(sp)
    5ed8:	100d883a 	mov	r6,r2
    5edc:	180f883a 	mov	r7,r3
    5ee0:	000ec080 	call	ec08 <__subdf3>
    5ee4:	1823883a 	mov	r17,r3
    5ee8:	d8c00717 	ldw	r3,28(sp)
    5eec:	d9401217 	ldw	r5,72(sp)
    5ef0:	a2000c04 	addi	r8,r20,48
    5ef4:	1021883a 	mov	r16,r2
    5ef8:	1a000005 	stb	r8,0(r3)
    5efc:	800d883a 	mov	r6,r16
    5f00:	880f883a 	mov	r7,r17
    5f04:	a809883a 	mov	r4,r21
    5f08:	4029883a 	mov	r20,r8
    5f0c:	000e1cc0 	call	e1cc <__gedf2>
    5f10:	00841d16 	blt	zero,r2,6f88 <_dtoa_r+0x15f4>
    5f14:	800d883a 	mov	r6,r16
    5f18:	880f883a 	mov	r7,r17
    5f1c:	0009883a 	mov	r4,zero
    5f20:	014ffc34 	movhi	r5,16368
    5f24:	000ec080 	call	ec08 <__subdf3>
    5f28:	d9401217 	ldw	r5,72(sp)
    5f2c:	100d883a 	mov	r6,r2
    5f30:	180f883a 	mov	r7,r3
    5f34:	a809883a 	mov	r4,r21
    5f38:	000e1cc0 	call	e1cc <__gedf2>
    5f3c:	db001617 	ldw	r12,88(sp)
    5f40:	00840e16 	blt	zero,r2,6f7c <_dtoa_r+0x15e8>
    5f44:	00800044 	movi	r2,1
    5f48:	13006b0e 	bge	r2,r12,60f8 <_dtoa_r+0x764>
    5f4c:	d9000717 	ldw	r4,28(sp)
    5f50:	dd800f15 	stw	r22,60(sp)
    5f54:	dcc01015 	stw	r19,64(sp)
    5f58:	2319883a 	add	r12,r4,r12
    5f5c:	dcc01217 	ldw	r19,72(sp)
    5f60:	602d883a 	mov	r22,r12
    5f64:	dc801215 	stw	r18,72(sp)
    5f68:	b825883a 	mov	r18,r23
    5f6c:	00000906 	br	5f94 <_dtoa_r+0x600>
    5f70:	000ec080 	call	ec08 <__subdf3>
    5f74:	a80d883a 	mov	r6,r21
    5f78:	980f883a 	mov	r7,r19
    5f7c:	1009883a 	mov	r4,r2
    5f80:	180b883a 	mov	r5,r3
    5f84:	000e2a80 	call	e2a8 <__ledf2>
    5f88:	1003e816 	blt	r2,zero,6f2c <_dtoa_r+0x1598>
    5f8c:	b825883a 	mov	r18,r23
    5f90:	bd83e926 	beq	r23,r22,6f38 <_dtoa_r+0x15a4>
    5f94:	a809883a 	mov	r4,r21
    5f98:	980b883a 	mov	r5,r19
    5f9c:	000d883a 	mov	r6,zero
    5fa0:	01d00934 	movhi	r7,16420
    5fa4:	000e39c0 	call	e39c <__muldf3>
    5fa8:	000d883a 	mov	r6,zero
    5fac:	01d00934 	movhi	r7,16420
    5fb0:	8009883a 	mov	r4,r16
    5fb4:	880b883a 	mov	r5,r17
    5fb8:	102b883a 	mov	r21,r2
    5fbc:	1827883a 	mov	r19,r3
    5fc0:	000e39c0 	call	e39c <__muldf3>
    5fc4:	180b883a 	mov	r5,r3
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	1821883a 	mov	r16,r3
    5fd0:	1023883a 	mov	r17,r2
    5fd4:	000f5040 	call	f504 <__fixdfsi>
    5fd8:	1009883a 	mov	r4,r2
    5fdc:	1029883a 	mov	r20,r2
    5fe0:	000f5840 	call	f584 <__floatsidf>
    5fe4:	8809883a 	mov	r4,r17
    5fe8:	800b883a 	mov	r5,r16
    5fec:	100d883a 	mov	r6,r2
    5ff0:	180f883a 	mov	r7,r3
    5ff4:	000ec080 	call	ec08 <__subdf3>
    5ff8:	a5000c04 	addi	r20,r20,48
    5ffc:	a80d883a 	mov	r6,r21
    6000:	980f883a 	mov	r7,r19
    6004:	1009883a 	mov	r4,r2
    6008:	180b883a 	mov	r5,r3
    600c:	95000005 	stb	r20,0(r18)
    6010:	1021883a 	mov	r16,r2
    6014:	1823883a 	mov	r17,r3
    6018:	000e2a80 	call	e2a8 <__ledf2>
    601c:	bdc00044 	addi	r23,r23,1
    6020:	800d883a 	mov	r6,r16
    6024:	880f883a 	mov	r7,r17
    6028:	0009883a 	mov	r4,zero
    602c:	014ffc34 	movhi	r5,16368
    6030:	103fcf0e 	bge	r2,zero,5f70 <__alt_exception_stack_pointer+0xf8005f70>
    6034:	d8c01317 	ldw	r3,76(sp)
    6038:	d8c00515 	stw	r3,20(sp)
    603c:	d9400917 	ldw	r5,36(sp)
    6040:	e009883a 	mov	r4,fp
    6044:	00088e80 	call	88e8 <_Bfree>
    6048:	d9000517 	ldw	r4,20(sp)
    604c:	d9802317 	ldw	r6,140(sp)
    6050:	d9c02517 	ldw	r7,148(sp)
    6054:	b8000005 	stb	zero,0(r23)
    6058:	20800044 	addi	r2,r4,1
    605c:	30800015 	stw	r2,0(r6)
    6060:	3802aa26 	beq	r7,zero,6b0c <_dtoa_r+0x1178>
    6064:	3dc00015 	stw	r23,0(r7)
    6068:	d8800717 	ldw	r2,28(sp)
    606c:	003e7906 	br	5a54 <__alt_exception_stack_pointer+0xf8005a54>
    6070:	00800434 	movhi	r2,16
    6074:	10bfffc4 	addi	r2,r2,-1
    6078:	88a2703a 	and	r17,r17,r2
    607c:	883e851e 	bne	r17,zero,5a94 <__alt_exception_stack_pointer+0xf8005a94>
    6080:	00800074 	movhi	r2,1
    6084:	108a7304 	addi	r2,r2,10700
    6088:	003e8406 	br	5a9c <__alt_exception_stack_pointer+0xf8005a9c>
    608c:	10c00204 	addi	r3,r2,8
    6090:	003e8706 	br	5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    6094:	01400434 	movhi	r5,16
    6098:	297fffc4 	addi	r5,r5,-1
    609c:	994a703a 	and	r5,r19,r5
    60a0:	9009883a 	mov	r4,r18
    60a4:	843f0044 	addi	r16,r16,-1023
    60a8:	294ffc34 	orhi	r5,r5,16368
    60ac:	dd800217 	ldw	r22,8(sp)
    60b0:	d8001115 	stw	zero,68(sp)
    60b4:	003ea506 	br	5b4c <__alt_exception_stack_pointer+0xf8005b4c>
    60b8:	00800074 	movhi	r2,1
    60bc:	108a6a04 	addi	r2,r2,10664
    60c0:	003e6406 	br	5a54 <__alt_exception_stack_pointer+0xf8005a54>
    60c4:	e0001115 	stw	zero,68(fp)
    60c8:	000b883a 	mov	r5,zero
    60cc:	e009883a 	mov	r4,fp
    60d0:	00088400 	call	8840 <_Balloc>
    60d4:	01bfffc4 	movi	r6,-1
    60d8:	01c00044 	movi	r7,1
    60dc:	d8800715 	stw	r2,28(sp)
    60e0:	d9800c15 	stw	r6,48(sp)
    60e4:	e0801015 	stw	r2,64(fp)
    60e8:	d8000315 	stw	zero,12(sp)
    60ec:	d9c00b15 	stw	r7,44(sp)
    60f0:	d9800615 	stw	r6,24(sp)
    60f4:	d8002215 	stw	zero,136(sp)
    60f8:	d8800117 	ldw	r2,4(sp)
    60fc:	10008916 	blt	r2,zero,6324 <_dtoa_r+0x990>
    6100:	d9000517 	ldw	r4,20(sp)
    6104:	00c00384 	movi	r3,14
    6108:	19008616 	blt	r3,r4,6324 <_dtoa_r+0x990>
    610c:	200490fa 	slli	r2,r4,3
    6110:	00c00074 	movhi	r3,1
    6114:	d9802217 	ldw	r6,136(sp)
    6118:	18ca9104 	addi	r3,r3,10820
    611c:	1885883a 	add	r2,r3,r2
    6120:	14000017 	ldw	r16,0(r2)
    6124:	14400117 	ldw	r17,4(r2)
    6128:	30016316 	blt	r6,zero,66b8 <_dtoa_r+0xd24>
    612c:	800d883a 	mov	r6,r16
    6130:	880f883a 	mov	r7,r17
    6134:	9009883a 	mov	r4,r18
    6138:	980b883a 	mov	r5,r19
    613c:	000d7740 	call	d774 <__divdf3>
    6140:	180b883a 	mov	r5,r3
    6144:	1009883a 	mov	r4,r2
    6148:	000f5040 	call	f504 <__fixdfsi>
    614c:	1009883a 	mov	r4,r2
    6150:	102b883a 	mov	r21,r2
    6154:	000f5840 	call	f584 <__floatsidf>
    6158:	800d883a 	mov	r6,r16
    615c:	880f883a 	mov	r7,r17
    6160:	1009883a 	mov	r4,r2
    6164:	180b883a 	mov	r5,r3
    6168:	000e39c0 	call	e39c <__muldf3>
    616c:	100d883a 	mov	r6,r2
    6170:	180f883a 	mov	r7,r3
    6174:	9009883a 	mov	r4,r18
    6178:	980b883a 	mov	r5,r19
    617c:	000ec080 	call	ec08 <__subdf3>
    6180:	d9c00717 	ldw	r7,28(sp)
    6184:	1009883a 	mov	r4,r2
    6188:	a8800c04 	addi	r2,r21,48
    618c:	38800005 	stb	r2,0(r7)
    6190:	3dc00044 	addi	r23,r7,1
    6194:	d9c00617 	ldw	r7,24(sp)
    6198:	01800044 	movi	r6,1
    619c:	180b883a 	mov	r5,r3
    61a0:	2005883a 	mov	r2,r4
    61a4:	39803826 	beq	r7,r6,6288 <_dtoa_r+0x8f4>
    61a8:	000d883a 	mov	r6,zero
    61ac:	01d00934 	movhi	r7,16420
    61b0:	000e39c0 	call	e39c <__muldf3>
    61b4:	000d883a 	mov	r6,zero
    61b8:	000f883a 	mov	r7,zero
    61bc:	1009883a 	mov	r4,r2
    61c0:	180b883a 	mov	r5,r3
    61c4:	1025883a 	mov	r18,r2
    61c8:	1827883a 	mov	r19,r3
    61cc:	000e1440 	call	e144 <__eqdf2>
    61d0:	103f9a26 	beq	r2,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    61d4:	d9c00617 	ldw	r7,24(sp)
    61d8:	d8c00717 	ldw	r3,28(sp)
    61dc:	b829883a 	mov	r20,r23
    61e0:	38bfffc4 	addi	r2,r7,-1
    61e4:	18ad883a 	add	r22,r3,r2
    61e8:	00000a06 	br	6214 <_dtoa_r+0x880>
    61ec:	000e39c0 	call	e39c <__muldf3>
    61f0:	000d883a 	mov	r6,zero
    61f4:	000f883a 	mov	r7,zero
    61f8:	1009883a 	mov	r4,r2
    61fc:	180b883a 	mov	r5,r3
    6200:	1025883a 	mov	r18,r2
    6204:	1827883a 	mov	r19,r3
    6208:	b829883a 	mov	r20,r23
    620c:	000e1440 	call	e144 <__eqdf2>
    6210:	103f8a26 	beq	r2,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    6214:	800d883a 	mov	r6,r16
    6218:	880f883a 	mov	r7,r17
    621c:	9009883a 	mov	r4,r18
    6220:	980b883a 	mov	r5,r19
    6224:	000d7740 	call	d774 <__divdf3>
    6228:	180b883a 	mov	r5,r3
    622c:	1009883a 	mov	r4,r2
    6230:	000f5040 	call	f504 <__fixdfsi>
    6234:	1009883a 	mov	r4,r2
    6238:	102b883a 	mov	r21,r2
    623c:	000f5840 	call	f584 <__floatsidf>
    6240:	800d883a 	mov	r6,r16
    6244:	880f883a 	mov	r7,r17
    6248:	1009883a 	mov	r4,r2
    624c:	180b883a 	mov	r5,r3
    6250:	000e39c0 	call	e39c <__muldf3>
    6254:	100d883a 	mov	r6,r2
    6258:	180f883a 	mov	r7,r3
    625c:	9009883a 	mov	r4,r18
    6260:	980b883a 	mov	r5,r19
    6264:	000ec080 	call	ec08 <__subdf3>
    6268:	aa000c04 	addi	r8,r21,48
    626c:	a2000005 	stb	r8,0(r20)
    6270:	000d883a 	mov	r6,zero
    6274:	01d00934 	movhi	r7,16420
    6278:	1009883a 	mov	r4,r2
    627c:	180b883a 	mov	r5,r3
    6280:	a5c00044 	addi	r23,r20,1
    6284:	b53fd91e 	bne	r22,r20,61ec <__alt_exception_stack_pointer+0xf80061ec>
    6288:	100d883a 	mov	r6,r2
    628c:	180f883a 	mov	r7,r3
    6290:	1009883a 	mov	r4,r2
    6294:	180b883a 	mov	r5,r3
    6298:	000cec80 	call	cec8 <__adddf3>
    629c:	100d883a 	mov	r6,r2
    62a0:	180f883a 	mov	r7,r3
    62a4:	8009883a 	mov	r4,r16
    62a8:	880b883a 	mov	r5,r17
    62ac:	1027883a 	mov	r19,r2
    62b0:	1825883a 	mov	r18,r3
    62b4:	000e2a80 	call	e2a8 <__ledf2>
    62b8:	10000816 	blt	r2,zero,62dc <_dtoa_r+0x948>
    62bc:	980d883a 	mov	r6,r19
    62c0:	900f883a 	mov	r7,r18
    62c4:	8009883a 	mov	r4,r16
    62c8:	880b883a 	mov	r5,r17
    62cc:	000e1440 	call	e144 <__eqdf2>
    62d0:	103f5a1e 	bne	r2,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    62d4:	ad40004c 	andi	r21,r21,1
    62d8:	a83f5826 	beq	r21,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    62dc:	bd3fffc3 	ldbu	r20,-1(r23)
    62e0:	b8bfffc4 	addi	r2,r23,-1
    62e4:	1007883a 	mov	r3,r2
    62e8:	01400e44 	movi	r5,57
    62ec:	d9800717 	ldw	r6,28(sp)
    62f0:	00000506 	br	6308 <_dtoa_r+0x974>
    62f4:	18ffffc4 	addi	r3,r3,-1
    62f8:	11824726 	beq	r2,r6,6c18 <_dtoa_r+0x1284>
    62fc:	1d000003 	ldbu	r20,0(r3)
    6300:	102f883a 	mov	r23,r2
    6304:	10bfffc4 	addi	r2,r2,-1
    6308:	a1003fcc 	andi	r4,r20,255
    630c:	2100201c 	xori	r4,r4,128
    6310:	213fe004 	addi	r4,r4,-128
    6314:	217ff726 	beq	r4,r5,62f4 <__alt_exception_stack_pointer+0xf80062f4>
    6318:	a2000044 	addi	r8,r20,1
    631c:	12000005 	stb	r8,0(r2)
    6320:	003f4606 	br	603c <__alt_exception_stack_pointer+0xf800603c>
    6324:	d9000b17 	ldw	r4,44(sp)
    6328:	2000c826 	beq	r4,zero,664c <_dtoa_r+0xcb8>
    632c:	d9800317 	ldw	r6,12(sp)
    6330:	00c00044 	movi	r3,1
    6334:	1980f90e 	bge	r3,r6,671c <_dtoa_r+0xd88>
    6338:	d8800617 	ldw	r2,24(sp)
    633c:	d8c00a17 	ldw	r3,40(sp)
    6340:	157fffc4 	addi	r21,r2,-1
    6344:	1d41f316 	blt	r3,r21,6b14 <_dtoa_r+0x1180>
    6348:	1d6bc83a 	sub	r21,r3,r21
    634c:	d9c00617 	ldw	r7,24(sp)
    6350:	3802aa16 	blt	r7,zero,6dfc <_dtoa_r+0x1468>
    6354:	dd000817 	ldw	r20,32(sp)
    6358:	d8800617 	ldw	r2,24(sp)
    635c:	d8c00817 	ldw	r3,32(sp)
    6360:	01400044 	movi	r5,1
    6364:	e009883a 	mov	r4,fp
    6368:	1887883a 	add	r3,r3,r2
    636c:	d8c00815 	stw	r3,32(sp)
    6370:	b0ad883a 	add	r22,r22,r2
    6374:	0008c740 	call	8c74 <__i2b>
    6378:	1023883a 	mov	r17,r2
    637c:	a0000826 	beq	r20,zero,63a0 <_dtoa_r+0xa0c>
    6380:	0580070e 	bge	zero,r22,63a0 <_dtoa_r+0xa0c>
    6384:	a005883a 	mov	r2,r20
    6388:	b500b916 	blt	r22,r20,6670 <_dtoa_r+0xcdc>
    638c:	d9000817 	ldw	r4,32(sp)
    6390:	a0a9c83a 	sub	r20,r20,r2
    6394:	b0adc83a 	sub	r22,r22,r2
    6398:	2089c83a 	sub	r4,r4,r2
    639c:	d9000815 	stw	r4,32(sp)
    63a0:	d9800a17 	ldw	r6,40(sp)
    63a4:	0181810e 	bge	zero,r6,69ac <_dtoa_r+0x1018>
    63a8:	d9c00b17 	ldw	r7,44(sp)
    63ac:	3800b326 	beq	r7,zero,667c <_dtoa_r+0xce8>
    63b0:	a800b226 	beq	r21,zero,667c <_dtoa_r+0xce8>
    63b4:	880b883a 	mov	r5,r17
    63b8:	a80d883a 	mov	r6,r21
    63bc:	e009883a 	mov	r4,fp
    63c0:	0008f3c0 	call	8f3c <__pow5mult>
    63c4:	d9800917 	ldw	r6,36(sp)
    63c8:	100b883a 	mov	r5,r2
    63cc:	e009883a 	mov	r4,fp
    63d0:	1023883a 	mov	r17,r2
    63d4:	0008cb00 	call	8cb0 <__multiply>
    63d8:	1021883a 	mov	r16,r2
    63dc:	d8800a17 	ldw	r2,40(sp)
    63e0:	d9400917 	ldw	r5,36(sp)
    63e4:	e009883a 	mov	r4,fp
    63e8:	1545c83a 	sub	r2,r2,r21
    63ec:	d8800a15 	stw	r2,40(sp)
    63f0:	00088e80 	call	88e8 <_Bfree>
    63f4:	d8c00a17 	ldw	r3,40(sp)
    63f8:	18009f1e 	bne	r3,zero,6678 <_dtoa_r+0xce4>
    63fc:	05c00044 	movi	r23,1
    6400:	e009883a 	mov	r4,fp
    6404:	b80b883a 	mov	r5,r23
    6408:	0008c740 	call	8c74 <__i2b>
    640c:	d9000d17 	ldw	r4,52(sp)
    6410:	102b883a 	mov	r21,r2
    6414:	2000ce26 	beq	r4,zero,6750 <_dtoa_r+0xdbc>
    6418:	200d883a 	mov	r6,r4
    641c:	100b883a 	mov	r5,r2
    6420:	e009883a 	mov	r4,fp
    6424:	0008f3c0 	call	8f3c <__pow5mult>
    6428:	d9800317 	ldw	r6,12(sp)
    642c:	102b883a 	mov	r21,r2
    6430:	b981810e 	bge	r23,r6,6a38 <_dtoa_r+0x10a4>
    6434:	0027883a 	mov	r19,zero
    6438:	a8800417 	ldw	r2,16(r21)
    643c:	05c00804 	movi	r23,32
    6440:	10800104 	addi	r2,r2,4
    6444:	1085883a 	add	r2,r2,r2
    6448:	1085883a 	add	r2,r2,r2
    644c:	a885883a 	add	r2,r21,r2
    6450:	11000017 	ldw	r4,0(r2)
    6454:	0008b5c0 	call	8b5c <__hi0bits>
    6458:	b885c83a 	sub	r2,r23,r2
    645c:	1585883a 	add	r2,r2,r22
    6460:	108007cc 	andi	r2,r2,31
    6464:	1000b326 	beq	r2,zero,6734 <_dtoa_r+0xda0>
    6468:	00c00804 	movi	r3,32
    646c:	1887c83a 	sub	r3,r3,r2
    6470:	01000104 	movi	r4,4
    6474:	20c2cd0e 	bge	r4,r3,6fac <_dtoa_r+0x1618>
    6478:	00c00704 	movi	r3,28
    647c:	1885c83a 	sub	r2,r3,r2
    6480:	d8c00817 	ldw	r3,32(sp)
    6484:	a0a9883a 	add	r20,r20,r2
    6488:	b0ad883a 	add	r22,r22,r2
    648c:	1887883a 	add	r3,r3,r2
    6490:	d8c00815 	stw	r3,32(sp)
    6494:	d9800817 	ldw	r6,32(sp)
    6498:	0180040e 	bge	zero,r6,64ac <_dtoa_r+0xb18>
    649c:	800b883a 	mov	r5,r16
    64a0:	e009883a 	mov	r4,fp
    64a4:	000907c0 	call	907c <__lshift>
    64a8:	1021883a 	mov	r16,r2
    64ac:	0580050e 	bge	zero,r22,64c4 <_dtoa_r+0xb30>
    64b0:	a80b883a 	mov	r5,r21
    64b4:	b00d883a 	mov	r6,r22
    64b8:	e009883a 	mov	r4,fp
    64bc:	000907c0 	call	907c <__lshift>
    64c0:	102b883a 	mov	r21,r2
    64c4:	d9c00e17 	ldw	r7,56(sp)
    64c8:	3801211e 	bne	r7,zero,6950 <_dtoa_r+0xfbc>
    64cc:	d9800617 	ldw	r6,24(sp)
    64d0:	0181380e 	bge	zero,r6,69b4 <_dtoa_r+0x1020>
    64d4:	d8c00b17 	ldw	r3,44(sp)
    64d8:	1800ab1e 	bne	r3,zero,6788 <_dtoa_r+0xdf4>
    64dc:	dc800717 	ldw	r18,28(sp)
    64e0:	dcc00617 	ldw	r19,24(sp)
    64e4:	9029883a 	mov	r20,r18
    64e8:	00000206 	br	64f4 <_dtoa_r+0xb60>
    64ec:	00089100 	call	8910 <__multadd>
    64f0:	1021883a 	mov	r16,r2
    64f4:	a80b883a 	mov	r5,r21
    64f8:	8009883a 	mov	r4,r16
    64fc:	000576c0 	call	576c <quorem>
    6500:	10800c04 	addi	r2,r2,48
    6504:	90800005 	stb	r2,0(r18)
    6508:	94800044 	addi	r18,r18,1
    650c:	9507c83a 	sub	r3,r18,r20
    6510:	000f883a 	mov	r7,zero
    6514:	01800284 	movi	r6,10
    6518:	800b883a 	mov	r5,r16
    651c:	e009883a 	mov	r4,fp
    6520:	1cfff216 	blt	r3,r19,64ec <__alt_exception_stack_pointer+0xf80064ec>
    6524:	1011883a 	mov	r8,r2
    6528:	d8800617 	ldw	r2,24(sp)
    652c:	0082370e 	bge	zero,r2,6e0c <_dtoa_r+0x1478>
    6530:	d9000717 	ldw	r4,28(sp)
    6534:	0025883a 	mov	r18,zero
    6538:	20af883a 	add	r23,r4,r2
    653c:	01800044 	movi	r6,1
    6540:	800b883a 	mov	r5,r16
    6544:	e009883a 	mov	r4,fp
    6548:	da001715 	stw	r8,92(sp)
    654c:	000907c0 	call	907c <__lshift>
    6550:	a80b883a 	mov	r5,r21
    6554:	1009883a 	mov	r4,r2
    6558:	d8800915 	stw	r2,36(sp)
    655c:	00091c40 	call	91c4 <__mcmp>
    6560:	da001717 	ldw	r8,92(sp)
    6564:	0081800e 	bge	zero,r2,6b68 <_dtoa_r+0x11d4>
    6568:	b93fffc3 	ldbu	r4,-1(r23)
    656c:	b8bfffc4 	addi	r2,r23,-1
    6570:	1007883a 	mov	r3,r2
    6574:	01800e44 	movi	r6,57
    6578:	d9c00717 	ldw	r7,28(sp)
    657c:	00000506 	br	6594 <_dtoa_r+0xc00>
    6580:	18ffffc4 	addi	r3,r3,-1
    6584:	11c12326 	beq	r2,r7,6a14 <_dtoa_r+0x1080>
    6588:	19000003 	ldbu	r4,0(r3)
    658c:	102f883a 	mov	r23,r2
    6590:	10bfffc4 	addi	r2,r2,-1
    6594:	21403fcc 	andi	r5,r4,255
    6598:	2940201c 	xori	r5,r5,128
    659c:	297fe004 	addi	r5,r5,-128
    65a0:	29bff726 	beq	r5,r6,6580 <__alt_exception_stack_pointer+0xf8006580>
    65a4:	21000044 	addi	r4,r4,1
    65a8:	11000005 	stb	r4,0(r2)
    65ac:	a80b883a 	mov	r5,r21
    65b0:	e009883a 	mov	r4,fp
    65b4:	00088e80 	call	88e8 <_Bfree>
    65b8:	883ea026 	beq	r17,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    65bc:	90000426 	beq	r18,zero,65d0 <_dtoa_r+0xc3c>
    65c0:	94400326 	beq	r18,r17,65d0 <_dtoa_r+0xc3c>
    65c4:	900b883a 	mov	r5,r18
    65c8:	e009883a 	mov	r4,fp
    65cc:	00088e80 	call	88e8 <_Bfree>
    65d0:	880b883a 	mov	r5,r17
    65d4:	e009883a 	mov	r4,fp
    65d8:	00088e80 	call	88e8 <_Bfree>
    65dc:	003e9706 	br	603c <__alt_exception_stack_pointer+0xf800603c>
    65e0:	01800044 	movi	r6,1
    65e4:	d9800e15 	stw	r6,56(sp)
    65e8:	003d9606 	br	5c44 <__alt_exception_stack_pointer+0xf8005c44>
    65ec:	d8800817 	ldw	r2,32(sp)
    65f0:	d8c00517 	ldw	r3,20(sp)
    65f4:	d8000d15 	stw	zero,52(sp)
    65f8:	10c5c83a 	sub	r2,r2,r3
    65fc:	00c9c83a 	sub	r4,zero,r3
    6600:	d8800815 	stw	r2,32(sp)
    6604:	d9000a15 	stw	r4,40(sp)
    6608:	003d9706 	br	5c68 <__alt_exception_stack_pointer+0xf8005c68>
    660c:	05adc83a 	sub	r22,zero,r22
    6610:	dd800815 	stw	r22,32(sp)
    6614:	002d883a 	mov	r22,zero
    6618:	003d8e06 	br	5c54 <__alt_exception_stack_pointer+0xf8005c54>
    661c:	d9000517 	ldw	r4,20(sp)
    6620:	000f5840 	call	f584 <__floatsidf>
    6624:	100d883a 	mov	r6,r2
    6628:	180f883a 	mov	r7,r3
    662c:	a009883a 	mov	r4,r20
    6630:	880b883a 	mov	r5,r17
    6634:	000e1440 	call	e144 <__eqdf2>
    6638:	103d7126 	beq	r2,zero,5c00 <__alt_exception_stack_pointer+0xf8005c00>
    663c:	d9c00517 	ldw	r7,20(sp)
    6640:	39ffffc4 	addi	r7,r7,-1
    6644:	d9c00515 	stw	r7,20(sp)
    6648:	003d6d06 	br	5c00 <__alt_exception_stack_pointer+0xf8005c00>
    664c:	dd400a17 	ldw	r21,40(sp)
    6650:	dd000817 	ldw	r20,32(sp)
    6654:	0023883a 	mov	r17,zero
    6658:	003f4806 	br	637c <__alt_exception_stack_pointer+0xf800637c>
    665c:	10e3c83a 	sub	r17,r2,r3
    6660:	9448983a 	sll	r4,r18,r17
    6664:	003d3206 	br	5b30 <__alt_exception_stack_pointer+0xf8005b30>
    6668:	d8000e15 	stw	zero,56(sp)
    666c:	003d7506 	br	5c44 <__alt_exception_stack_pointer+0xf8005c44>
    6670:	b005883a 	mov	r2,r22
    6674:	003f4506 	br	638c <__alt_exception_stack_pointer+0xf800638c>
    6678:	dc000915 	stw	r16,36(sp)
    667c:	d9800a17 	ldw	r6,40(sp)
    6680:	d9400917 	ldw	r5,36(sp)
    6684:	e009883a 	mov	r4,fp
    6688:	0008f3c0 	call	8f3c <__pow5mult>
    668c:	1021883a 	mov	r16,r2
    6690:	003f5a06 	br	63fc <__alt_exception_stack_pointer+0xf80063fc>
    6694:	01c00044 	movi	r7,1
    6698:	d9c00b15 	stw	r7,44(sp)
    669c:	d8802217 	ldw	r2,136(sp)
    66a0:	0081280e 	bge	zero,r2,6b44 <_dtoa_r+0x11b0>
    66a4:	100d883a 	mov	r6,r2
    66a8:	1021883a 	mov	r16,r2
    66ac:	d8800c15 	stw	r2,48(sp)
    66b0:	d8800615 	stw	r2,24(sp)
    66b4:	003d8806 	br	5cd8 <__alt_exception_stack_pointer+0xf8005cd8>
    66b8:	d8800617 	ldw	r2,24(sp)
    66bc:	00be9b16 	blt	zero,r2,612c <__alt_exception_stack_pointer+0xf800612c>
    66c0:	10010f1e 	bne	r2,zero,6b00 <_dtoa_r+0x116c>
    66c4:	880b883a 	mov	r5,r17
    66c8:	000d883a 	mov	r6,zero
    66cc:	01d00534 	movhi	r7,16404
    66d0:	8009883a 	mov	r4,r16
    66d4:	000e39c0 	call	e39c <__muldf3>
    66d8:	900d883a 	mov	r6,r18
    66dc:	980f883a 	mov	r7,r19
    66e0:	1009883a 	mov	r4,r2
    66e4:	180b883a 	mov	r5,r3
    66e8:	000e1cc0 	call	e1cc <__gedf2>
    66ec:	002b883a 	mov	r21,zero
    66f0:	0023883a 	mov	r17,zero
    66f4:	1000bf16 	blt	r2,zero,69f4 <_dtoa_r+0x1060>
    66f8:	d9802217 	ldw	r6,136(sp)
    66fc:	ddc00717 	ldw	r23,28(sp)
    6700:	018c303a 	nor	r6,zero,r6
    6704:	d9800515 	stw	r6,20(sp)
    6708:	a80b883a 	mov	r5,r21
    670c:	e009883a 	mov	r4,fp
    6710:	00088e80 	call	88e8 <_Bfree>
    6714:	883e4926 	beq	r17,zero,603c <__alt_exception_stack_pointer+0xf800603c>
    6718:	003fad06 	br	65d0 <__alt_exception_stack_pointer+0xf80065d0>
    671c:	d9c01117 	ldw	r7,68(sp)
    6720:	3801bc26 	beq	r7,zero,6e14 <_dtoa_r+0x1480>
    6724:	10810cc4 	addi	r2,r2,1075
    6728:	dd400a17 	ldw	r21,40(sp)
    672c:	dd000817 	ldw	r20,32(sp)
    6730:	003f0a06 	br	635c <__alt_exception_stack_pointer+0xf800635c>
    6734:	00800704 	movi	r2,28
    6738:	d9000817 	ldw	r4,32(sp)
    673c:	a0a9883a 	add	r20,r20,r2
    6740:	b0ad883a 	add	r22,r22,r2
    6744:	2089883a 	add	r4,r4,r2
    6748:	d9000815 	stw	r4,32(sp)
    674c:	003f5106 	br	6494 <__alt_exception_stack_pointer+0xf8006494>
    6750:	d8c00317 	ldw	r3,12(sp)
    6754:	b8c1fc0e 	bge	r23,r3,6f48 <_dtoa_r+0x15b4>
    6758:	0027883a 	mov	r19,zero
    675c:	b805883a 	mov	r2,r23
    6760:	003f3e06 	br	645c <__alt_exception_stack_pointer+0xf800645c>
    6764:	880b883a 	mov	r5,r17
    6768:	e009883a 	mov	r4,fp
    676c:	000f883a 	mov	r7,zero
    6770:	01800284 	movi	r6,10
    6774:	00089100 	call	8910 <__multadd>
    6778:	d9000c17 	ldw	r4,48(sp)
    677c:	1023883a 	mov	r17,r2
    6780:	0102040e 	bge	zero,r4,6f94 <_dtoa_r+0x1600>
    6784:	d9000615 	stw	r4,24(sp)
    6788:	0500050e 	bge	zero,r20,67a0 <_dtoa_r+0xe0c>
    678c:	880b883a 	mov	r5,r17
    6790:	a00d883a 	mov	r6,r20
    6794:	e009883a 	mov	r4,fp
    6798:	000907c0 	call	907c <__lshift>
    679c:	1023883a 	mov	r17,r2
    67a0:	9801241e 	bne	r19,zero,6c34 <_dtoa_r+0x12a0>
    67a4:	8829883a 	mov	r20,r17
    67a8:	d9000617 	ldw	r4,24(sp)
    67ac:	dcc00717 	ldw	r19,28(sp)
    67b0:	9480004c 	andi	r18,r18,1
    67b4:	20bfffc4 	addi	r2,r4,-1
    67b8:	9885883a 	add	r2,r19,r2
    67bc:	d8800415 	stw	r2,16(sp)
    67c0:	dc800615 	stw	r18,24(sp)
    67c4:	a80b883a 	mov	r5,r21
    67c8:	8009883a 	mov	r4,r16
    67cc:	000576c0 	call	576c <quorem>
    67d0:	880b883a 	mov	r5,r17
    67d4:	8009883a 	mov	r4,r16
    67d8:	102f883a 	mov	r23,r2
    67dc:	00091c40 	call	91c4 <__mcmp>
    67e0:	a80b883a 	mov	r5,r21
    67e4:	a00d883a 	mov	r6,r20
    67e8:	e009883a 	mov	r4,fp
    67ec:	102d883a 	mov	r22,r2
    67f0:	00092240 	call	9224 <__mdiff>
    67f4:	1007883a 	mov	r3,r2
    67f8:	10800317 	ldw	r2,12(r2)
    67fc:	bc800c04 	addi	r18,r23,48
    6800:	180b883a 	mov	r5,r3
    6804:	10004e1e 	bne	r2,zero,6940 <_dtoa_r+0xfac>
    6808:	8009883a 	mov	r4,r16
    680c:	d8c01615 	stw	r3,88(sp)
    6810:	00091c40 	call	91c4 <__mcmp>
    6814:	d8c01617 	ldw	r3,88(sp)
    6818:	e009883a 	mov	r4,fp
    681c:	d8801615 	stw	r2,88(sp)
    6820:	180b883a 	mov	r5,r3
    6824:	00088e80 	call	88e8 <_Bfree>
    6828:	d8801617 	ldw	r2,88(sp)
    682c:	1000041e 	bne	r2,zero,6840 <_dtoa_r+0xeac>
    6830:	d9800317 	ldw	r6,12(sp)
    6834:	3000021e 	bne	r6,zero,6840 <_dtoa_r+0xeac>
    6838:	d8c00617 	ldw	r3,24(sp)
    683c:	18003726 	beq	r3,zero,691c <_dtoa_r+0xf88>
    6840:	b0002016 	blt	r22,zero,68c4 <_dtoa_r+0xf30>
    6844:	b000041e 	bne	r22,zero,6858 <_dtoa_r+0xec4>
    6848:	d9000317 	ldw	r4,12(sp)
    684c:	2000021e 	bne	r4,zero,6858 <_dtoa_r+0xec4>
    6850:	d8c00617 	ldw	r3,24(sp)
    6854:	18001b26 	beq	r3,zero,68c4 <_dtoa_r+0xf30>
    6858:	00810716 	blt	zero,r2,6c78 <_dtoa_r+0x12e4>
    685c:	d8c00417 	ldw	r3,16(sp)
    6860:	9d800044 	addi	r22,r19,1
    6864:	9c800005 	stb	r18,0(r19)
    6868:	b02f883a 	mov	r23,r22
    686c:	98c10626 	beq	r19,r3,6c88 <_dtoa_r+0x12f4>
    6870:	800b883a 	mov	r5,r16
    6874:	000f883a 	mov	r7,zero
    6878:	01800284 	movi	r6,10
    687c:	e009883a 	mov	r4,fp
    6880:	00089100 	call	8910 <__multadd>
    6884:	1021883a 	mov	r16,r2
    6888:	000f883a 	mov	r7,zero
    688c:	01800284 	movi	r6,10
    6890:	880b883a 	mov	r5,r17
    6894:	e009883a 	mov	r4,fp
    6898:	8d002526 	beq	r17,r20,6930 <_dtoa_r+0xf9c>
    689c:	00089100 	call	8910 <__multadd>
    68a0:	a00b883a 	mov	r5,r20
    68a4:	000f883a 	mov	r7,zero
    68a8:	01800284 	movi	r6,10
    68ac:	e009883a 	mov	r4,fp
    68b0:	1023883a 	mov	r17,r2
    68b4:	00089100 	call	8910 <__multadd>
    68b8:	1029883a 	mov	r20,r2
    68bc:	b027883a 	mov	r19,r22
    68c0:	003fc006 	br	67c4 <__alt_exception_stack_pointer+0xf80067c4>
    68c4:	9011883a 	mov	r8,r18
    68c8:	00800e0e 	bge	zero,r2,6904 <_dtoa_r+0xf70>
    68cc:	800b883a 	mov	r5,r16
    68d0:	01800044 	movi	r6,1
    68d4:	e009883a 	mov	r4,fp
    68d8:	da001715 	stw	r8,92(sp)
    68dc:	000907c0 	call	907c <__lshift>
    68e0:	a80b883a 	mov	r5,r21
    68e4:	1009883a 	mov	r4,r2
    68e8:	1021883a 	mov	r16,r2
    68ec:	00091c40 	call	91c4 <__mcmp>
    68f0:	da001717 	ldw	r8,92(sp)
    68f4:	0081960e 	bge	zero,r2,6f50 <_dtoa_r+0x15bc>
    68f8:	00800e44 	movi	r2,57
    68fc:	40817026 	beq	r8,r2,6ec0 <_dtoa_r+0x152c>
    6900:	ba000c44 	addi	r8,r23,49
    6904:	8825883a 	mov	r18,r17
    6908:	9dc00044 	addi	r23,r19,1
    690c:	9a000005 	stb	r8,0(r19)
    6910:	a023883a 	mov	r17,r20
    6914:	dc000915 	stw	r16,36(sp)
    6918:	003f2406 	br	65ac <__alt_exception_stack_pointer+0xf80065ac>
    691c:	00800e44 	movi	r2,57
    6920:	9011883a 	mov	r8,r18
    6924:	90816626 	beq	r18,r2,6ec0 <_dtoa_r+0x152c>
    6928:	05bff516 	blt	zero,r22,6900 <__alt_exception_stack_pointer+0xf8006900>
    692c:	003ff506 	br	6904 <__alt_exception_stack_pointer+0xf8006904>
    6930:	00089100 	call	8910 <__multadd>
    6934:	1023883a 	mov	r17,r2
    6938:	1029883a 	mov	r20,r2
    693c:	003fdf06 	br	68bc <__alt_exception_stack_pointer+0xf80068bc>
    6940:	e009883a 	mov	r4,fp
    6944:	00088e80 	call	88e8 <_Bfree>
    6948:	00800044 	movi	r2,1
    694c:	003fbc06 	br	6840 <__alt_exception_stack_pointer+0xf8006840>
    6950:	a80b883a 	mov	r5,r21
    6954:	8009883a 	mov	r4,r16
    6958:	00091c40 	call	91c4 <__mcmp>
    695c:	103edb0e 	bge	r2,zero,64cc <__alt_exception_stack_pointer+0xf80064cc>
    6960:	800b883a 	mov	r5,r16
    6964:	000f883a 	mov	r7,zero
    6968:	01800284 	movi	r6,10
    696c:	e009883a 	mov	r4,fp
    6970:	00089100 	call	8910 <__multadd>
    6974:	1021883a 	mov	r16,r2
    6978:	d8800517 	ldw	r2,20(sp)
    697c:	d8c00b17 	ldw	r3,44(sp)
    6980:	10bfffc4 	addi	r2,r2,-1
    6984:	d8800515 	stw	r2,20(sp)
    6988:	183f761e 	bne	r3,zero,6764 <__alt_exception_stack_pointer+0xf8006764>
    698c:	d9000c17 	ldw	r4,48(sp)
    6990:	0101730e 	bge	zero,r4,6f60 <_dtoa_r+0x15cc>
    6994:	d9000615 	stw	r4,24(sp)
    6998:	003ed006 	br	64dc <__alt_exception_stack_pointer+0xf80064dc>
    699c:	00800084 	movi	r2,2
    69a0:	3081861e 	bne	r6,r2,6fbc <_dtoa_r+0x1628>
    69a4:	d8000b15 	stw	zero,44(sp)
    69a8:	003f3c06 	br	669c <__alt_exception_stack_pointer+0xf800669c>
    69ac:	dc000917 	ldw	r16,36(sp)
    69b0:	003e9206 	br	63fc <__alt_exception_stack_pointer+0xf80063fc>
    69b4:	d9c00317 	ldw	r7,12(sp)
    69b8:	00800084 	movi	r2,2
    69bc:	11fec50e 	bge	r2,r7,64d4 <__alt_exception_stack_pointer+0xf80064d4>
    69c0:	d9000617 	ldw	r4,24(sp)
    69c4:	20013c1e 	bne	r4,zero,6eb8 <_dtoa_r+0x1524>
    69c8:	a80b883a 	mov	r5,r21
    69cc:	000f883a 	mov	r7,zero
    69d0:	01800144 	movi	r6,5
    69d4:	e009883a 	mov	r4,fp
    69d8:	00089100 	call	8910 <__multadd>
    69dc:	100b883a 	mov	r5,r2
    69e0:	8009883a 	mov	r4,r16
    69e4:	102b883a 	mov	r21,r2
    69e8:	00091c40 	call	91c4 <__mcmp>
    69ec:	dc000915 	stw	r16,36(sp)
    69f0:	00bf410e 	bge	zero,r2,66f8 <__alt_exception_stack_pointer+0xf80066f8>
    69f4:	d9c00717 	ldw	r7,28(sp)
    69f8:	00800c44 	movi	r2,49
    69fc:	38800005 	stb	r2,0(r7)
    6a00:	d8800517 	ldw	r2,20(sp)
    6a04:	3dc00044 	addi	r23,r7,1
    6a08:	10800044 	addi	r2,r2,1
    6a0c:	d8800515 	stw	r2,20(sp)
    6a10:	003f3d06 	br	6708 <__alt_exception_stack_pointer+0xf8006708>
    6a14:	d9800517 	ldw	r6,20(sp)
    6a18:	d9c00717 	ldw	r7,28(sp)
    6a1c:	00800c44 	movi	r2,49
    6a20:	31800044 	addi	r6,r6,1
    6a24:	d9800515 	stw	r6,20(sp)
    6a28:	38800005 	stb	r2,0(r7)
    6a2c:	003edf06 	br	65ac <__alt_exception_stack_pointer+0xf80065ac>
    6a30:	d8000b15 	stw	zero,44(sp)
    6a34:	003c9f06 	br	5cb4 <__alt_exception_stack_pointer+0xf8005cb4>
    6a38:	903e7e1e 	bne	r18,zero,6434 <__alt_exception_stack_pointer+0xf8006434>
    6a3c:	00800434 	movhi	r2,16
    6a40:	10bfffc4 	addi	r2,r2,-1
    6a44:	9884703a 	and	r2,r19,r2
    6a48:	1000ea1e 	bne	r2,zero,6df4 <_dtoa_r+0x1460>
    6a4c:	9cdffc2c 	andhi	r19,r19,32752
    6a50:	9800e826 	beq	r19,zero,6df4 <_dtoa_r+0x1460>
    6a54:	d9c00817 	ldw	r7,32(sp)
    6a58:	b5800044 	addi	r22,r22,1
    6a5c:	04c00044 	movi	r19,1
    6a60:	39c00044 	addi	r7,r7,1
    6a64:	d9c00815 	stw	r7,32(sp)
    6a68:	d8800d17 	ldw	r2,52(sp)
    6a6c:	103e721e 	bne	r2,zero,6438 <__alt_exception_stack_pointer+0xf8006438>
    6a70:	00800044 	movi	r2,1
    6a74:	003e7906 	br	645c <__alt_exception_stack_pointer+0xf800645c>
    6a78:	8009883a 	mov	r4,r16
    6a7c:	000f5840 	call	f584 <__floatsidf>
    6a80:	d9800f17 	ldw	r6,60(sp)
    6a84:	d9c01017 	ldw	r7,64(sp)
    6a88:	1009883a 	mov	r4,r2
    6a8c:	180b883a 	mov	r5,r3
    6a90:	000e39c0 	call	e39c <__muldf3>
    6a94:	000d883a 	mov	r6,zero
    6a98:	01d00734 	movhi	r7,16412
    6a9c:	1009883a 	mov	r4,r2
    6aa0:	180b883a 	mov	r5,r3
    6aa4:	000cec80 	call	cec8 <__adddf3>
    6aa8:	047f3034 	movhi	r17,64704
    6aac:	1021883a 	mov	r16,r2
    6ab0:	1c63883a 	add	r17,r3,r17
    6ab4:	d9000f17 	ldw	r4,60(sp)
    6ab8:	d9401017 	ldw	r5,64(sp)
    6abc:	000d883a 	mov	r6,zero
    6ac0:	01d00534 	movhi	r7,16404
    6ac4:	000ec080 	call	ec08 <__subdf3>
    6ac8:	800d883a 	mov	r6,r16
    6acc:	880f883a 	mov	r7,r17
    6ad0:	1009883a 	mov	r4,r2
    6ad4:	180b883a 	mov	r5,r3
    6ad8:	102b883a 	mov	r21,r2
    6adc:	1829883a 	mov	r20,r3
    6ae0:	000e1cc0 	call	e1cc <__gedf2>
    6ae4:	00806c16 	blt	zero,r2,6c98 <_dtoa_r+0x1304>
    6ae8:	89e0003c 	xorhi	r7,r17,32768
    6aec:	800d883a 	mov	r6,r16
    6af0:	a809883a 	mov	r4,r21
    6af4:	a00b883a 	mov	r5,r20
    6af8:	000e2a80 	call	e2a8 <__ledf2>
    6afc:	103d7e0e 	bge	r2,zero,60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6b00:	002b883a 	mov	r21,zero
    6b04:	0023883a 	mov	r17,zero
    6b08:	003efb06 	br	66f8 <__alt_exception_stack_pointer+0xf80066f8>
    6b0c:	d8800717 	ldw	r2,28(sp)
    6b10:	003bd006 	br	5a54 <__alt_exception_stack_pointer+0xf8005a54>
    6b14:	d9000a17 	ldw	r4,40(sp)
    6b18:	d9800d17 	ldw	r6,52(sp)
    6b1c:	dd400a15 	stw	r21,40(sp)
    6b20:	a905c83a 	sub	r2,r21,r4
    6b24:	308d883a 	add	r6,r6,r2
    6b28:	d9800d15 	stw	r6,52(sp)
    6b2c:	002b883a 	mov	r21,zero
    6b30:	003e0606 	br	634c <__alt_exception_stack_pointer+0xf800634c>
    6b34:	9023883a 	mov	r17,r18
    6b38:	9829883a 	mov	r20,r19
    6b3c:	04000084 	movi	r16,2
    6b40:	003c9206 	br	5d8c <__alt_exception_stack_pointer+0xf8005d8c>
    6b44:	04000044 	movi	r16,1
    6b48:	dc000c15 	stw	r16,48(sp)
    6b4c:	dc000615 	stw	r16,24(sp)
    6b50:	dc002215 	stw	r16,136(sp)
    6b54:	e0001115 	stw	zero,68(fp)
    6b58:	000b883a 	mov	r5,zero
    6b5c:	003c6906 	br	5d04 <__alt_exception_stack_pointer+0xf8005d04>
    6b60:	3021883a 	mov	r16,r6
    6b64:	003ffb06 	br	6b54 <__alt_exception_stack_pointer+0xf8006b54>
    6b68:	1000021e 	bne	r2,zero,6b74 <_dtoa_r+0x11e0>
    6b6c:	4200004c 	andi	r8,r8,1
    6b70:	403e7d1e 	bne	r8,zero,6568 <__alt_exception_stack_pointer+0xf8006568>
    6b74:	01000c04 	movi	r4,48
    6b78:	00000106 	br	6b80 <_dtoa_r+0x11ec>
    6b7c:	102f883a 	mov	r23,r2
    6b80:	b8bfffc4 	addi	r2,r23,-1
    6b84:	10c00007 	ldb	r3,0(r2)
    6b88:	193ffc26 	beq	r3,r4,6b7c <__alt_exception_stack_pointer+0xf8006b7c>
    6b8c:	003e8706 	br	65ac <__alt_exception_stack_pointer+0xf80065ac>
    6b90:	d8800517 	ldw	r2,20(sp)
    6b94:	00a3c83a 	sub	r17,zero,r2
    6b98:	8800a426 	beq	r17,zero,6e2c <_dtoa_r+0x1498>
    6b9c:	888003cc 	andi	r2,r17,15
    6ba0:	100490fa 	slli	r2,r2,3
    6ba4:	00c00074 	movhi	r3,1
    6ba8:	18ca9104 	addi	r3,r3,10820
    6bac:	1885883a 	add	r2,r3,r2
    6bb0:	11800017 	ldw	r6,0(r2)
    6bb4:	11c00117 	ldw	r7,4(r2)
    6bb8:	9009883a 	mov	r4,r18
    6bbc:	980b883a 	mov	r5,r19
    6bc0:	8823d13a 	srai	r17,r17,4
    6bc4:	000e39c0 	call	e39c <__muldf3>
    6bc8:	d8800f15 	stw	r2,60(sp)
    6bcc:	d8c01015 	stw	r3,64(sp)
    6bd0:	8800e826 	beq	r17,zero,6f74 <_dtoa_r+0x15e0>
    6bd4:	05000074 	movhi	r20,1
    6bd8:	a50a8704 	addi	r20,r20,10780
    6bdc:	04000084 	movi	r16,2
    6be0:	8980004c 	andi	r6,r17,1
    6be4:	1009883a 	mov	r4,r2
    6be8:	8823d07a 	srai	r17,r17,1
    6bec:	180b883a 	mov	r5,r3
    6bf0:	30000426 	beq	r6,zero,6c04 <_dtoa_r+0x1270>
    6bf4:	a1800017 	ldw	r6,0(r20)
    6bf8:	a1c00117 	ldw	r7,4(r20)
    6bfc:	84000044 	addi	r16,r16,1
    6c00:	000e39c0 	call	e39c <__muldf3>
    6c04:	a5000204 	addi	r20,r20,8
    6c08:	883ff51e 	bne	r17,zero,6be0 <__alt_exception_stack_pointer+0xf8006be0>
    6c0c:	d8800f15 	stw	r2,60(sp)
    6c10:	d8c01015 	stw	r3,64(sp)
    6c14:	003c7606 	br	5df0 <__alt_exception_stack_pointer+0xf8005df0>
    6c18:	00c00c04 	movi	r3,48
    6c1c:	10c00005 	stb	r3,0(r2)
    6c20:	d8c00517 	ldw	r3,20(sp)
    6c24:	bd3fffc3 	ldbu	r20,-1(r23)
    6c28:	18c00044 	addi	r3,r3,1
    6c2c:	d8c00515 	stw	r3,20(sp)
    6c30:	003db906 	br	6318 <__alt_exception_stack_pointer+0xf8006318>
    6c34:	89400117 	ldw	r5,4(r17)
    6c38:	e009883a 	mov	r4,fp
    6c3c:	00088400 	call	8840 <_Balloc>
    6c40:	89800417 	ldw	r6,16(r17)
    6c44:	89400304 	addi	r5,r17,12
    6c48:	11000304 	addi	r4,r2,12
    6c4c:	31800084 	addi	r6,r6,2
    6c50:	318d883a 	add	r6,r6,r6
    6c54:	318d883a 	add	r6,r6,r6
    6c58:	1027883a 	mov	r19,r2
    6c5c:	00084740 	call	8474 <memcpy>
    6c60:	01800044 	movi	r6,1
    6c64:	980b883a 	mov	r5,r19
    6c68:	e009883a 	mov	r4,fp
    6c6c:	000907c0 	call	907c <__lshift>
    6c70:	1029883a 	mov	r20,r2
    6c74:	003ecc06 	br	67a8 <__alt_exception_stack_pointer+0xf80067a8>
    6c78:	00800e44 	movi	r2,57
    6c7c:	90809026 	beq	r18,r2,6ec0 <_dtoa_r+0x152c>
    6c80:	92000044 	addi	r8,r18,1
    6c84:	003f1f06 	br	6904 <__alt_exception_stack_pointer+0xf8006904>
    6c88:	9011883a 	mov	r8,r18
    6c8c:	8825883a 	mov	r18,r17
    6c90:	a023883a 	mov	r17,r20
    6c94:	003e2906 	br	653c <__alt_exception_stack_pointer+0xf800653c>
    6c98:	002b883a 	mov	r21,zero
    6c9c:	0023883a 	mov	r17,zero
    6ca0:	003f5406 	br	69f4 <__alt_exception_stack_pointer+0xf80069f4>
    6ca4:	61bfffc4 	addi	r6,r12,-1
    6ca8:	300490fa 	slli	r2,r6,3
    6cac:	00c00074 	movhi	r3,1
    6cb0:	18ca9104 	addi	r3,r3,10820
    6cb4:	1885883a 	add	r2,r3,r2
    6cb8:	11000017 	ldw	r4,0(r2)
    6cbc:	11400117 	ldw	r5,4(r2)
    6cc0:	d8800717 	ldw	r2,28(sp)
    6cc4:	880f883a 	mov	r7,r17
    6cc8:	d9801215 	stw	r6,72(sp)
    6ccc:	800d883a 	mov	r6,r16
    6cd0:	db001615 	stw	r12,88(sp)
    6cd4:	15c00044 	addi	r23,r2,1
    6cd8:	000e39c0 	call	e39c <__muldf3>
    6cdc:	d9401017 	ldw	r5,64(sp)
    6ce0:	d9000f17 	ldw	r4,60(sp)
    6ce4:	d8c01515 	stw	r3,84(sp)
    6ce8:	d8801415 	stw	r2,80(sp)
    6cec:	000f5040 	call	f504 <__fixdfsi>
    6cf0:	1009883a 	mov	r4,r2
    6cf4:	1021883a 	mov	r16,r2
    6cf8:	000f5840 	call	f584 <__floatsidf>
    6cfc:	d9000f17 	ldw	r4,60(sp)
    6d00:	d9401017 	ldw	r5,64(sp)
    6d04:	100d883a 	mov	r6,r2
    6d08:	180f883a 	mov	r7,r3
    6d0c:	000ec080 	call	ec08 <__subdf3>
    6d10:	1829883a 	mov	r20,r3
    6d14:	d8c00717 	ldw	r3,28(sp)
    6d18:	84000c04 	addi	r16,r16,48
    6d1c:	1023883a 	mov	r17,r2
    6d20:	1c000005 	stb	r16,0(r3)
    6d24:	db001617 	ldw	r12,88(sp)
    6d28:	00800044 	movi	r2,1
    6d2c:	60802226 	beq	r12,r2,6db8 <_dtoa_r+0x1424>
    6d30:	d9c00717 	ldw	r7,28(sp)
    6d34:	8805883a 	mov	r2,r17
    6d38:	b82b883a 	mov	r21,r23
    6d3c:	3b19883a 	add	r12,r7,r12
    6d40:	6023883a 	mov	r17,r12
    6d44:	a007883a 	mov	r3,r20
    6d48:	dc800f15 	stw	r18,60(sp)
    6d4c:	000d883a 	mov	r6,zero
    6d50:	01d00934 	movhi	r7,16420
    6d54:	1009883a 	mov	r4,r2
    6d58:	180b883a 	mov	r5,r3
    6d5c:	000e39c0 	call	e39c <__muldf3>
    6d60:	180b883a 	mov	r5,r3
    6d64:	1009883a 	mov	r4,r2
    6d68:	1829883a 	mov	r20,r3
    6d6c:	1025883a 	mov	r18,r2
    6d70:	000f5040 	call	f504 <__fixdfsi>
    6d74:	1009883a 	mov	r4,r2
    6d78:	1021883a 	mov	r16,r2
    6d7c:	000f5840 	call	f584 <__floatsidf>
    6d80:	100d883a 	mov	r6,r2
    6d84:	180f883a 	mov	r7,r3
    6d88:	9009883a 	mov	r4,r18
    6d8c:	a00b883a 	mov	r5,r20
    6d90:	84000c04 	addi	r16,r16,48
    6d94:	000ec080 	call	ec08 <__subdf3>
    6d98:	ad400044 	addi	r21,r21,1
    6d9c:	ac3fffc5 	stb	r16,-1(r21)
    6da0:	ac7fea1e 	bne	r21,r17,6d4c <__alt_exception_stack_pointer+0xf8006d4c>
    6da4:	1023883a 	mov	r17,r2
    6da8:	d8801217 	ldw	r2,72(sp)
    6dac:	dc800f17 	ldw	r18,60(sp)
    6db0:	1829883a 	mov	r20,r3
    6db4:	b8af883a 	add	r23,r23,r2
    6db8:	d9001417 	ldw	r4,80(sp)
    6dbc:	d9401517 	ldw	r5,84(sp)
    6dc0:	000d883a 	mov	r6,zero
    6dc4:	01cff834 	movhi	r7,16352
    6dc8:	000cec80 	call	cec8 <__adddf3>
    6dcc:	880d883a 	mov	r6,r17
    6dd0:	a00f883a 	mov	r7,r20
    6dd4:	1009883a 	mov	r4,r2
    6dd8:	180b883a 	mov	r5,r3
    6ddc:	000e2a80 	call	e2a8 <__ledf2>
    6de0:	10003e0e 	bge	r2,zero,6edc <_dtoa_r+0x1548>
    6de4:	d9001317 	ldw	r4,76(sp)
    6de8:	bd3fffc3 	ldbu	r20,-1(r23)
    6dec:	d9000515 	stw	r4,20(sp)
    6df0:	003d3b06 	br	62e0 <__alt_exception_stack_pointer+0xf80062e0>
    6df4:	0027883a 	mov	r19,zero
    6df8:	003f1b06 	br	6a68 <__alt_exception_stack_pointer+0xf8006a68>
    6dfc:	d8800817 	ldw	r2,32(sp)
    6e00:	11e9c83a 	sub	r20,r2,r7
    6e04:	0005883a 	mov	r2,zero
    6e08:	003d5406 	br	635c <__alt_exception_stack_pointer+0xf800635c>
    6e0c:	00800044 	movi	r2,1
    6e10:	003dc706 	br	6530 <__alt_exception_stack_pointer+0xf8006530>
    6e14:	d8c00217 	ldw	r3,8(sp)
    6e18:	00800d84 	movi	r2,54
    6e1c:	dd400a17 	ldw	r21,40(sp)
    6e20:	10c5c83a 	sub	r2,r2,r3
    6e24:	dd000817 	ldw	r20,32(sp)
    6e28:	003d4c06 	br	635c <__alt_exception_stack_pointer+0xf800635c>
    6e2c:	dc800f15 	stw	r18,60(sp)
    6e30:	dcc01015 	stw	r19,64(sp)
    6e34:	04000084 	movi	r16,2
    6e38:	003bed06 	br	5df0 <__alt_exception_stack_pointer+0xf8005df0>
    6e3c:	d9000617 	ldw	r4,24(sp)
    6e40:	203f0d26 	beq	r4,zero,6a78 <__alt_exception_stack_pointer+0xf8006a78>
    6e44:	d9800c17 	ldw	r6,48(sp)
    6e48:	01bcab0e 	bge	zero,r6,60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6e4c:	d9401017 	ldw	r5,64(sp)
    6e50:	d9000f17 	ldw	r4,60(sp)
    6e54:	000d883a 	mov	r6,zero
    6e58:	01d00934 	movhi	r7,16420
    6e5c:	000e39c0 	call	e39c <__muldf3>
    6e60:	81000044 	addi	r4,r16,1
    6e64:	d8800f15 	stw	r2,60(sp)
    6e68:	d8c01015 	stw	r3,64(sp)
    6e6c:	000f5840 	call	f584 <__floatsidf>
    6e70:	d9800f17 	ldw	r6,60(sp)
    6e74:	d9c01017 	ldw	r7,64(sp)
    6e78:	1009883a 	mov	r4,r2
    6e7c:	180b883a 	mov	r5,r3
    6e80:	000e39c0 	call	e39c <__muldf3>
    6e84:	01d00734 	movhi	r7,16412
    6e88:	000d883a 	mov	r6,zero
    6e8c:	1009883a 	mov	r4,r2
    6e90:	180b883a 	mov	r5,r3
    6e94:	000cec80 	call	cec8 <__adddf3>
    6e98:	d9c00517 	ldw	r7,20(sp)
    6e9c:	047f3034 	movhi	r17,64704
    6ea0:	1021883a 	mov	r16,r2
    6ea4:	39ffffc4 	addi	r7,r7,-1
    6ea8:	d9c01315 	stw	r7,76(sp)
    6eac:	1c63883a 	add	r17,r3,r17
    6eb0:	db000c17 	ldw	r12,48(sp)
    6eb4:	003bea06 	br	5e60 <__alt_exception_stack_pointer+0xf8005e60>
    6eb8:	dc000915 	stw	r16,36(sp)
    6ebc:	003e0e06 	br	66f8 <__alt_exception_stack_pointer+0xf80066f8>
    6ec0:	01000e44 	movi	r4,57
    6ec4:	8825883a 	mov	r18,r17
    6ec8:	9dc00044 	addi	r23,r19,1
    6ecc:	99000005 	stb	r4,0(r19)
    6ed0:	a023883a 	mov	r17,r20
    6ed4:	dc000915 	stw	r16,36(sp)
    6ed8:	003da406 	br	656c <__alt_exception_stack_pointer+0xf800656c>
    6edc:	d9801417 	ldw	r6,80(sp)
    6ee0:	d9c01517 	ldw	r7,84(sp)
    6ee4:	0009883a 	mov	r4,zero
    6ee8:	014ff834 	movhi	r5,16352
    6eec:	000ec080 	call	ec08 <__subdf3>
    6ef0:	880d883a 	mov	r6,r17
    6ef4:	a00f883a 	mov	r7,r20
    6ef8:	1009883a 	mov	r4,r2
    6efc:	180b883a 	mov	r5,r3
    6f00:	000e1cc0 	call	e1cc <__gedf2>
    6f04:	00bc7c0e 	bge	zero,r2,60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6f08:	01000c04 	movi	r4,48
    6f0c:	00000106 	br	6f14 <_dtoa_r+0x1580>
    6f10:	102f883a 	mov	r23,r2
    6f14:	b8bfffc4 	addi	r2,r23,-1
    6f18:	10c00007 	ldb	r3,0(r2)
    6f1c:	193ffc26 	beq	r3,r4,6f10 <__alt_exception_stack_pointer+0xf8006f10>
    6f20:	d9801317 	ldw	r6,76(sp)
    6f24:	d9800515 	stw	r6,20(sp)
    6f28:	003c4406 	br	603c <__alt_exception_stack_pointer+0xf800603c>
    6f2c:	d9801317 	ldw	r6,76(sp)
    6f30:	d9800515 	stw	r6,20(sp)
    6f34:	003cea06 	br	62e0 <__alt_exception_stack_pointer+0xf80062e0>
    6f38:	dd800f17 	ldw	r22,60(sp)
    6f3c:	dcc01017 	ldw	r19,64(sp)
    6f40:	dc801217 	ldw	r18,72(sp)
    6f44:	003c6c06 	br	60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6f48:	903e031e 	bne	r18,zero,6758 <__alt_exception_stack_pointer+0xf8006758>
    6f4c:	003ebb06 	br	6a3c <__alt_exception_stack_pointer+0xf8006a3c>
    6f50:	103e6c1e 	bne	r2,zero,6904 <__alt_exception_stack_pointer+0xf8006904>
    6f54:	4080004c 	andi	r2,r8,1
    6f58:	103e6a26 	beq	r2,zero,6904 <__alt_exception_stack_pointer+0xf8006904>
    6f5c:	003e6606 	br	68f8 <__alt_exception_stack_pointer+0xf80068f8>
    6f60:	d8c00317 	ldw	r3,12(sp)
    6f64:	00800084 	movi	r2,2
    6f68:	10c02916 	blt	r2,r3,7010 <_dtoa_r+0x167c>
    6f6c:	d9000c17 	ldw	r4,48(sp)
    6f70:	003e8806 	br	6994 <__alt_exception_stack_pointer+0xf8006994>
    6f74:	04000084 	movi	r16,2
    6f78:	003b9d06 	br	5df0 <__alt_exception_stack_pointer+0xf8005df0>
    6f7c:	d9001317 	ldw	r4,76(sp)
    6f80:	d9000515 	stw	r4,20(sp)
    6f84:	003cd606 	br	62e0 <__alt_exception_stack_pointer+0xf80062e0>
    6f88:	d8801317 	ldw	r2,76(sp)
    6f8c:	d8800515 	stw	r2,20(sp)
    6f90:	003c2a06 	br	603c <__alt_exception_stack_pointer+0xf800603c>
    6f94:	d9800317 	ldw	r6,12(sp)
    6f98:	00800084 	movi	r2,2
    6f9c:	11801516 	blt	r2,r6,6ff4 <_dtoa_r+0x1660>
    6fa0:	d9c00c17 	ldw	r7,48(sp)
    6fa4:	d9c00615 	stw	r7,24(sp)
    6fa8:	003df706 	br	6788 <__alt_exception_stack_pointer+0xf8006788>
    6fac:	193d3926 	beq	r3,r4,6494 <__alt_exception_stack_pointer+0xf8006494>
    6fb0:	00c00f04 	movi	r3,60
    6fb4:	1885c83a 	sub	r2,r3,r2
    6fb8:	003ddf06 	br	6738 <__alt_exception_stack_pointer+0xf8006738>
    6fbc:	e009883a 	mov	r4,fp
    6fc0:	e0001115 	stw	zero,68(fp)
    6fc4:	000b883a 	mov	r5,zero
    6fc8:	00088400 	call	8840 <_Balloc>
    6fcc:	d8800715 	stw	r2,28(sp)
    6fd0:	d8c00717 	ldw	r3,28(sp)
    6fd4:	00bfffc4 	movi	r2,-1
    6fd8:	01000044 	movi	r4,1
    6fdc:	d8800c15 	stw	r2,48(sp)
    6fe0:	e0c01015 	stw	r3,64(fp)
    6fe4:	d9000b15 	stw	r4,44(sp)
    6fe8:	d8800615 	stw	r2,24(sp)
    6fec:	d8002215 	stw	zero,136(sp)
    6ff0:	003c4106 	br	60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6ff4:	d8c00c17 	ldw	r3,48(sp)
    6ff8:	d8c00615 	stw	r3,24(sp)
    6ffc:	003e7006 	br	69c0 <__alt_exception_stack_pointer+0xf80069c0>
    7000:	04400044 	movi	r17,1
    7004:	003b2006 	br	5c88 <__alt_exception_stack_pointer+0xf8005c88>
    7008:	000b883a 	mov	r5,zero
    700c:	003b3d06 	br	5d04 <__alt_exception_stack_pointer+0xf8005d04>
    7010:	d8800c17 	ldw	r2,48(sp)
    7014:	d8800615 	stw	r2,24(sp)
    7018:	003e6906 	br	69c0 <__alt_exception_stack_pointer+0xf80069c0>

0000701c <__sflush_r>:
    701c:	2880030b 	ldhu	r2,12(r5)
    7020:	defffb04 	addi	sp,sp,-20
    7024:	dcc00315 	stw	r19,12(sp)
    7028:	dc400115 	stw	r17,4(sp)
    702c:	dfc00415 	stw	ra,16(sp)
    7030:	dc800215 	stw	r18,8(sp)
    7034:	dc000015 	stw	r16,0(sp)
    7038:	10c0020c 	andi	r3,r2,8
    703c:	2823883a 	mov	r17,r5
    7040:	2027883a 	mov	r19,r4
    7044:	1800311e 	bne	r3,zero,710c <__sflush_r+0xf0>
    7048:	28c00117 	ldw	r3,4(r5)
    704c:	10820014 	ori	r2,r2,2048
    7050:	2880030d 	sth	r2,12(r5)
    7054:	00c04b0e 	bge	zero,r3,7184 <__sflush_r+0x168>
    7058:	8a000a17 	ldw	r8,40(r17)
    705c:	40002326 	beq	r8,zero,70ec <__sflush_r+0xd0>
    7060:	9c000017 	ldw	r16,0(r19)
    7064:	10c4000c 	andi	r3,r2,4096
    7068:	98000015 	stw	zero,0(r19)
    706c:	18004826 	beq	r3,zero,7190 <__sflush_r+0x174>
    7070:	89801417 	ldw	r6,80(r17)
    7074:	10c0010c 	andi	r3,r2,4
    7078:	18000626 	beq	r3,zero,7094 <__sflush_r+0x78>
    707c:	88c00117 	ldw	r3,4(r17)
    7080:	88800c17 	ldw	r2,48(r17)
    7084:	30cdc83a 	sub	r6,r6,r3
    7088:	10000226 	beq	r2,zero,7094 <__sflush_r+0x78>
    708c:	88800f17 	ldw	r2,60(r17)
    7090:	308dc83a 	sub	r6,r6,r2
    7094:	89400717 	ldw	r5,28(r17)
    7098:	000f883a 	mov	r7,zero
    709c:	9809883a 	mov	r4,r19
    70a0:	403ee83a 	callr	r8
    70a4:	00ffffc4 	movi	r3,-1
    70a8:	10c04426 	beq	r2,r3,71bc <__sflush_r+0x1a0>
    70ac:	88c0030b 	ldhu	r3,12(r17)
    70b0:	89000417 	ldw	r4,16(r17)
    70b4:	88000115 	stw	zero,4(r17)
    70b8:	197dffcc 	andi	r5,r3,63487
    70bc:	8940030d 	sth	r5,12(r17)
    70c0:	89000015 	stw	r4,0(r17)
    70c4:	18c4000c 	andi	r3,r3,4096
    70c8:	18002c1e 	bne	r3,zero,717c <__sflush_r+0x160>
    70cc:	89400c17 	ldw	r5,48(r17)
    70d0:	9c000015 	stw	r16,0(r19)
    70d4:	28000526 	beq	r5,zero,70ec <__sflush_r+0xd0>
    70d8:	88801004 	addi	r2,r17,64
    70dc:	28800226 	beq	r5,r2,70e8 <__sflush_r+0xcc>
    70e0:	9809883a 	mov	r4,r19
    70e4:	00077980 	call	7798 <_free_r>
    70e8:	88000c15 	stw	zero,48(r17)
    70ec:	0005883a 	mov	r2,zero
    70f0:	dfc00417 	ldw	ra,16(sp)
    70f4:	dcc00317 	ldw	r19,12(sp)
    70f8:	dc800217 	ldw	r18,8(sp)
    70fc:	dc400117 	ldw	r17,4(sp)
    7100:	dc000017 	ldw	r16,0(sp)
    7104:	dec00504 	addi	sp,sp,20
    7108:	f800283a 	ret
    710c:	2c800417 	ldw	r18,16(r5)
    7110:	903ff626 	beq	r18,zero,70ec <__alt_exception_stack_pointer+0xf80070ec>
    7114:	2c000017 	ldw	r16,0(r5)
    7118:	108000cc 	andi	r2,r2,3
    711c:	2c800015 	stw	r18,0(r5)
    7120:	84a1c83a 	sub	r16,r16,r18
    7124:	1000131e 	bne	r2,zero,7174 <__sflush_r+0x158>
    7128:	28800517 	ldw	r2,20(r5)
    712c:	88800215 	stw	r2,8(r17)
    7130:	04000316 	blt	zero,r16,7140 <__sflush_r+0x124>
    7134:	003fed06 	br	70ec <__alt_exception_stack_pointer+0xf80070ec>
    7138:	90a5883a 	add	r18,r18,r2
    713c:	043feb0e 	bge	zero,r16,70ec <__alt_exception_stack_pointer+0xf80070ec>
    7140:	88800917 	ldw	r2,36(r17)
    7144:	89400717 	ldw	r5,28(r17)
    7148:	800f883a 	mov	r7,r16
    714c:	900d883a 	mov	r6,r18
    7150:	9809883a 	mov	r4,r19
    7154:	103ee83a 	callr	r2
    7158:	80a1c83a 	sub	r16,r16,r2
    715c:	00bff616 	blt	zero,r2,7138 <__alt_exception_stack_pointer+0xf8007138>
    7160:	88c0030b 	ldhu	r3,12(r17)
    7164:	00bfffc4 	movi	r2,-1
    7168:	18c01014 	ori	r3,r3,64
    716c:	88c0030d 	sth	r3,12(r17)
    7170:	003fdf06 	br	70f0 <__alt_exception_stack_pointer+0xf80070f0>
    7174:	0005883a 	mov	r2,zero
    7178:	003fec06 	br	712c <__alt_exception_stack_pointer+0xf800712c>
    717c:	88801415 	stw	r2,80(r17)
    7180:	003fd206 	br	70cc <__alt_exception_stack_pointer+0xf80070cc>
    7184:	28c00f17 	ldw	r3,60(r5)
    7188:	00ffb316 	blt	zero,r3,7058 <__alt_exception_stack_pointer+0xf8007058>
    718c:	003fd706 	br	70ec <__alt_exception_stack_pointer+0xf80070ec>
    7190:	89400717 	ldw	r5,28(r17)
    7194:	000d883a 	mov	r6,zero
    7198:	01c00044 	movi	r7,1
    719c:	9809883a 	mov	r4,r19
    71a0:	403ee83a 	callr	r8
    71a4:	100d883a 	mov	r6,r2
    71a8:	00bfffc4 	movi	r2,-1
    71ac:	30801426 	beq	r6,r2,7200 <__sflush_r+0x1e4>
    71b0:	8880030b 	ldhu	r2,12(r17)
    71b4:	8a000a17 	ldw	r8,40(r17)
    71b8:	003fae06 	br	7074 <__alt_exception_stack_pointer+0xf8007074>
    71bc:	98c00017 	ldw	r3,0(r19)
    71c0:	183fba26 	beq	r3,zero,70ac <__alt_exception_stack_pointer+0xf80070ac>
    71c4:	01000744 	movi	r4,29
    71c8:	19000626 	beq	r3,r4,71e4 <__sflush_r+0x1c8>
    71cc:	01000584 	movi	r4,22
    71d0:	19000426 	beq	r3,r4,71e4 <__sflush_r+0x1c8>
    71d4:	88c0030b 	ldhu	r3,12(r17)
    71d8:	18c01014 	ori	r3,r3,64
    71dc:	88c0030d 	sth	r3,12(r17)
    71e0:	003fc306 	br	70f0 <__alt_exception_stack_pointer+0xf80070f0>
    71e4:	8880030b 	ldhu	r2,12(r17)
    71e8:	88c00417 	ldw	r3,16(r17)
    71ec:	88000115 	stw	zero,4(r17)
    71f0:	10bdffcc 	andi	r2,r2,63487
    71f4:	8880030d 	sth	r2,12(r17)
    71f8:	88c00015 	stw	r3,0(r17)
    71fc:	003fb306 	br	70cc <__alt_exception_stack_pointer+0xf80070cc>
    7200:	98800017 	ldw	r2,0(r19)
    7204:	103fea26 	beq	r2,zero,71b0 <__alt_exception_stack_pointer+0xf80071b0>
    7208:	00c00744 	movi	r3,29
    720c:	10c00226 	beq	r2,r3,7218 <__sflush_r+0x1fc>
    7210:	00c00584 	movi	r3,22
    7214:	10c0031e 	bne	r2,r3,7224 <__sflush_r+0x208>
    7218:	9c000015 	stw	r16,0(r19)
    721c:	0005883a 	mov	r2,zero
    7220:	003fb306 	br	70f0 <__alt_exception_stack_pointer+0xf80070f0>
    7224:	88c0030b 	ldhu	r3,12(r17)
    7228:	3005883a 	mov	r2,r6
    722c:	18c01014 	ori	r3,r3,64
    7230:	88c0030d 	sth	r3,12(r17)
    7234:	003fae06 	br	70f0 <__alt_exception_stack_pointer+0xf80070f0>

00007238 <_fflush_r>:
    7238:	defffd04 	addi	sp,sp,-12
    723c:	dc000115 	stw	r16,4(sp)
    7240:	dfc00215 	stw	ra,8(sp)
    7244:	2021883a 	mov	r16,r4
    7248:	20000226 	beq	r4,zero,7254 <_fflush_r+0x1c>
    724c:	20800e17 	ldw	r2,56(r4)
    7250:	10000c26 	beq	r2,zero,7284 <_fflush_r+0x4c>
    7254:	2880030f 	ldh	r2,12(r5)
    7258:	1000051e 	bne	r2,zero,7270 <_fflush_r+0x38>
    725c:	0005883a 	mov	r2,zero
    7260:	dfc00217 	ldw	ra,8(sp)
    7264:	dc000117 	ldw	r16,4(sp)
    7268:	dec00304 	addi	sp,sp,12
    726c:	f800283a 	ret
    7270:	8009883a 	mov	r4,r16
    7274:	dfc00217 	ldw	ra,8(sp)
    7278:	dc000117 	ldw	r16,4(sp)
    727c:	dec00304 	addi	sp,sp,12
    7280:	000701c1 	jmpi	701c <__sflush_r>
    7284:	d9400015 	stw	r5,0(sp)
    7288:	00076240 	call	7624 <__sinit>
    728c:	d9400017 	ldw	r5,0(sp)
    7290:	003ff006 	br	7254 <__alt_exception_stack_pointer+0xf8007254>

00007294 <fflush>:
    7294:	20000526 	beq	r4,zero,72ac <fflush+0x18>
    7298:	00800074 	movhi	r2,1
    729c:	1091c904 	addi	r2,r2,18212
    72a0:	200b883a 	mov	r5,r4
    72a4:	11000017 	ldw	r4,0(r2)
    72a8:	00072381 	jmpi	7238 <_fflush_r>
    72ac:	00800074 	movhi	r2,1
    72b0:	1091c804 	addi	r2,r2,18208
    72b4:	11000017 	ldw	r4,0(r2)
    72b8:	01400034 	movhi	r5,0
    72bc:	295c8e04 	addi	r5,r5,29240
    72c0:	00080341 	jmpi	8034 <_fwalk_reent>

000072c4 <__fp_unlock>:
    72c4:	0005883a 	mov	r2,zero
    72c8:	f800283a 	ret

000072cc <_cleanup_r>:
    72cc:	01400074 	movhi	r5,1
    72d0:	296e5c04 	addi	r5,r5,-18064
    72d4:	00080341 	jmpi	8034 <_fwalk_reent>

000072d8 <__sinit.part.1>:
    72d8:	defff704 	addi	sp,sp,-36
    72dc:	00c00034 	movhi	r3,0
    72e0:	dfc00815 	stw	ra,32(sp)
    72e4:	ddc00715 	stw	r23,28(sp)
    72e8:	dd800615 	stw	r22,24(sp)
    72ec:	dd400515 	stw	r21,20(sp)
    72f0:	dd000415 	stw	r20,16(sp)
    72f4:	dcc00315 	stw	r19,12(sp)
    72f8:	dc800215 	stw	r18,8(sp)
    72fc:	dc400115 	stw	r17,4(sp)
    7300:	dc000015 	stw	r16,0(sp)
    7304:	18dcb304 	addi	r3,r3,29388
    7308:	24000117 	ldw	r16,4(r4)
    730c:	20c00f15 	stw	r3,60(r4)
    7310:	2080bb04 	addi	r2,r4,748
    7314:	00c000c4 	movi	r3,3
    7318:	20c0b915 	stw	r3,740(r4)
    731c:	2080ba15 	stw	r2,744(r4)
    7320:	2000b815 	stw	zero,736(r4)
    7324:	05c00204 	movi	r23,8
    7328:	00800104 	movi	r2,4
    732c:	2025883a 	mov	r18,r4
    7330:	b80d883a 	mov	r6,r23
    7334:	81001704 	addi	r4,r16,92
    7338:	000b883a 	mov	r5,zero
    733c:	80000015 	stw	zero,0(r16)
    7340:	80000115 	stw	zero,4(r16)
    7344:	80000215 	stw	zero,8(r16)
    7348:	8080030d 	sth	r2,12(r16)
    734c:	80001915 	stw	zero,100(r16)
    7350:	8000038d 	sth	zero,14(r16)
    7354:	80000415 	stw	zero,16(r16)
    7358:	80000515 	stw	zero,20(r16)
    735c:	80000615 	stw	zero,24(r16)
    7360:	00087180 	call	8718 <memset>
    7364:	05800074 	movhi	r22,1
    7368:	94400217 	ldw	r17,8(r18)
    736c:	05400074 	movhi	r21,1
    7370:	05000074 	movhi	r20,1
    7374:	04c00074 	movhi	r19,1
    7378:	b5a7b404 	addi	r22,r22,-24880
    737c:	ad67cb04 	addi	r21,r21,-24788
    7380:	a527ea04 	addi	r20,r20,-24664
    7384:	9ce80104 	addi	r19,r19,-24572
    7388:	85800815 	stw	r22,32(r16)
    738c:	85400915 	stw	r21,36(r16)
    7390:	85000a15 	stw	r20,40(r16)
    7394:	84c00b15 	stw	r19,44(r16)
    7398:	84000715 	stw	r16,28(r16)
    739c:	00800284 	movi	r2,10
    73a0:	8880030d 	sth	r2,12(r17)
    73a4:	00800044 	movi	r2,1
    73a8:	b80d883a 	mov	r6,r23
    73ac:	89001704 	addi	r4,r17,92
    73b0:	000b883a 	mov	r5,zero
    73b4:	88000015 	stw	zero,0(r17)
    73b8:	88000115 	stw	zero,4(r17)
    73bc:	88000215 	stw	zero,8(r17)
    73c0:	88001915 	stw	zero,100(r17)
    73c4:	8880038d 	sth	r2,14(r17)
    73c8:	88000415 	stw	zero,16(r17)
    73cc:	88000515 	stw	zero,20(r17)
    73d0:	88000615 	stw	zero,24(r17)
    73d4:	00087180 	call	8718 <memset>
    73d8:	94000317 	ldw	r16,12(r18)
    73dc:	00800484 	movi	r2,18
    73e0:	8c400715 	stw	r17,28(r17)
    73e4:	8d800815 	stw	r22,32(r17)
    73e8:	8d400915 	stw	r21,36(r17)
    73ec:	8d000a15 	stw	r20,40(r17)
    73f0:	8cc00b15 	stw	r19,44(r17)
    73f4:	8080030d 	sth	r2,12(r16)
    73f8:	00800084 	movi	r2,2
    73fc:	80000015 	stw	zero,0(r16)
    7400:	80000115 	stw	zero,4(r16)
    7404:	80000215 	stw	zero,8(r16)
    7408:	80001915 	stw	zero,100(r16)
    740c:	8080038d 	sth	r2,14(r16)
    7410:	80000415 	stw	zero,16(r16)
    7414:	80000515 	stw	zero,20(r16)
    7418:	80000615 	stw	zero,24(r16)
    741c:	b80d883a 	mov	r6,r23
    7420:	000b883a 	mov	r5,zero
    7424:	81001704 	addi	r4,r16,92
    7428:	00087180 	call	8718 <memset>
    742c:	00800044 	movi	r2,1
    7430:	84000715 	stw	r16,28(r16)
    7434:	85800815 	stw	r22,32(r16)
    7438:	85400915 	stw	r21,36(r16)
    743c:	85000a15 	stw	r20,40(r16)
    7440:	84c00b15 	stw	r19,44(r16)
    7444:	90800e15 	stw	r2,56(r18)
    7448:	dfc00817 	ldw	ra,32(sp)
    744c:	ddc00717 	ldw	r23,28(sp)
    7450:	dd800617 	ldw	r22,24(sp)
    7454:	dd400517 	ldw	r21,20(sp)
    7458:	dd000417 	ldw	r20,16(sp)
    745c:	dcc00317 	ldw	r19,12(sp)
    7460:	dc800217 	ldw	r18,8(sp)
    7464:	dc400117 	ldw	r17,4(sp)
    7468:	dc000017 	ldw	r16,0(sp)
    746c:	dec00904 	addi	sp,sp,36
    7470:	f800283a 	ret

00007474 <__fp_lock>:
    7474:	0005883a 	mov	r2,zero
    7478:	f800283a 	ret

0000747c <__sfmoreglue>:
    747c:	defffc04 	addi	sp,sp,-16
    7480:	dc800215 	stw	r18,8(sp)
    7484:	2825883a 	mov	r18,r5
    7488:	dc000015 	stw	r16,0(sp)
    748c:	01401a04 	movi	r5,104
    7490:	2021883a 	mov	r16,r4
    7494:	913fffc4 	addi	r4,r18,-1
    7498:	dfc00315 	stw	ra,12(sp)
    749c:	dc400115 	stw	r17,4(sp)
    74a0:	000cea00 	call	cea0 <__mulsi3>
    74a4:	8009883a 	mov	r4,r16
    74a8:	11401d04 	addi	r5,r2,116
    74ac:	1023883a 	mov	r17,r2
    74b0:	00028240 	call	2824 <_malloc_r>
    74b4:	1021883a 	mov	r16,r2
    74b8:	10000726 	beq	r2,zero,74d8 <__sfmoreglue+0x5c>
    74bc:	11000304 	addi	r4,r2,12
    74c0:	10000015 	stw	zero,0(r2)
    74c4:	14800115 	stw	r18,4(r2)
    74c8:	11000215 	stw	r4,8(r2)
    74cc:	89801a04 	addi	r6,r17,104
    74d0:	000b883a 	mov	r5,zero
    74d4:	00087180 	call	8718 <memset>
    74d8:	8005883a 	mov	r2,r16
    74dc:	dfc00317 	ldw	ra,12(sp)
    74e0:	dc800217 	ldw	r18,8(sp)
    74e4:	dc400117 	ldw	r17,4(sp)
    74e8:	dc000017 	ldw	r16,0(sp)
    74ec:	dec00404 	addi	sp,sp,16
    74f0:	f800283a 	ret

000074f4 <__sfp>:
    74f4:	defffb04 	addi	sp,sp,-20
    74f8:	dc000015 	stw	r16,0(sp)
    74fc:	04000074 	movhi	r16,1
    7500:	8411c804 	addi	r16,r16,18208
    7504:	dcc00315 	stw	r19,12(sp)
    7508:	2027883a 	mov	r19,r4
    750c:	81000017 	ldw	r4,0(r16)
    7510:	dfc00415 	stw	ra,16(sp)
    7514:	dc800215 	stw	r18,8(sp)
    7518:	20800e17 	ldw	r2,56(r4)
    751c:	dc400115 	stw	r17,4(sp)
    7520:	1000021e 	bne	r2,zero,752c <__sfp+0x38>
    7524:	00072d80 	call	72d8 <__sinit.part.1>
    7528:	81000017 	ldw	r4,0(r16)
    752c:	2480b804 	addi	r18,r4,736
    7530:	047fffc4 	movi	r17,-1
    7534:	91000117 	ldw	r4,4(r18)
    7538:	94000217 	ldw	r16,8(r18)
    753c:	213fffc4 	addi	r4,r4,-1
    7540:	20000a16 	blt	r4,zero,756c <__sfp+0x78>
    7544:	8080030f 	ldh	r2,12(r16)
    7548:	10000c26 	beq	r2,zero,757c <__sfp+0x88>
    754c:	80c01d04 	addi	r3,r16,116
    7550:	00000206 	br	755c <__sfp+0x68>
    7554:	18bfe60f 	ldh	r2,-104(r3)
    7558:	10000826 	beq	r2,zero,757c <__sfp+0x88>
    755c:	213fffc4 	addi	r4,r4,-1
    7560:	1c3ffd04 	addi	r16,r3,-12
    7564:	18c01a04 	addi	r3,r3,104
    7568:	247ffa1e 	bne	r4,r17,7554 <__alt_exception_stack_pointer+0xf8007554>
    756c:	90800017 	ldw	r2,0(r18)
    7570:	10001d26 	beq	r2,zero,75e8 <__sfp+0xf4>
    7574:	1025883a 	mov	r18,r2
    7578:	003fee06 	br	7534 <__alt_exception_stack_pointer+0xf8007534>
    757c:	00bfffc4 	movi	r2,-1
    7580:	8080038d 	sth	r2,14(r16)
    7584:	00800044 	movi	r2,1
    7588:	8080030d 	sth	r2,12(r16)
    758c:	80001915 	stw	zero,100(r16)
    7590:	80000015 	stw	zero,0(r16)
    7594:	80000215 	stw	zero,8(r16)
    7598:	80000115 	stw	zero,4(r16)
    759c:	80000415 	stw	zero,16(r16)
    75a0:	80000515 	stw	zero,20(r16)
    75a4:	80000615 	stw	zero,24(r16)
    75a8:	01800204 	movi	r6,8
    75ac:	000b883a 	mov	r5,zero
    75b0:	81001704 	addi	r4,r16,92
    75b4:	00087180 	call	8718 <memset>
    75b8:	8005883a 	mov	r2,r16
    75bc:	80000c15 	stw	zero,48(r16)
    75c0:	80000d15 	stw	zero,52(r16)
    75c4:	80001115 	stw	zero,68(r16)
    75c8:	80001215 	stw	zero,72(r16)
    75cc:	dfc00417 	ldw	ra,16(sp)
    75d0:	dcc00317 	ldw	r19,12(sp)
    75d4:	dc800217 	ldw	r18,8(sp)
    75d8:	dc400117 	ldw	r17,4(sp)
    75dc:	dc000017 	ldw	r16,0(sp)
    75e0:	dec00504 	addi	sp,sp,20
    75e4:	f800283a 	ret
    75e8:	01400104 	movi	r5,4
    75ec:	9809883a 	mov	r4,r19
    75f0:	000747c0 	call	747c <__sfmoreglue>
    75f4:	90800015 	stw	r2,0(r18)
    75f8:	103fde1e 	bne	r2,zero,7574 <__alt_exception_stack_pointer+0xf8007574>
    75fc:	00800304 	movi	r2,12
    7600:	98800015 	stw	r2,0(r19)
    7604:	0005883a 	mov	r2,zero
    7608:	003ff006 	br	75cc <__alt_exception_stack_pointer+0xf80075cc>

0000760c <_cleanup>:
    760c:	00800074 	movhi	r2,1
    7610:	1091c804 	addi	r2,r2,18208
    7614:	11000017 	ldw	r4,0(r2)
    7618:	01400074 	movhi	r5,1
    761c:	296e5c04 	addi	r5,r5,-18064
    7620:	00080341 	jmpi	8034 <_fwalk_reent>

00007624 <__sinit>:
    7624:	20800e17 	ldw	r2,56(r4)
    7628:	10000126 	beq	r2,zero,7630 <__sinit+0xc>
    762c:	f800283a 	ret
    7630:	00072d81 	jmpi	72d8 <__sinit.part.1>

00007634 <__sfp_lock_acquire>:
    7634:	f800283a 	ret

00007638 <__sfp_lock_release>:
    7638:	f800283a 	ret

0000763c <__sinit_lock_acquire>:
    763c:	f800283a 	ret

00007640 <__sinit_lock_release>:
    7640:	f800283a 	ret

00007644 <__fp_lock_all>:
    7644:	00800074 	movhi	r2,1
    7648:	1091c904 	addi	r2,r2,18212
    764c:	11000017 	ldw	r4,0(r2)
    7650:	01400034 	movhi	r5,0
    7654:	295d1d04 	addi	r5,r5,29812
    7658:	0007f701 	jmpi	7f70 <_fwalk>

0000765c <__fp_unlock_all>:
    765c:	00800074 	movhi	r2,1
    7660:	1091c904 	addi	r2,r2,18212
    7664:	11000017 	ldw	r4,0(r2)
    7668:	01400034 	movhi	r5,0
    766c:	295cb104 	addi	r5,r5,29380
    7670:	0007f701 	jmpi	7f70 <_fwalk>

00007674 <_malloc_trim_r>:
    7674:	defffb04 	addi	sp,sp,-20
    7678:	dcc00315 	stw	r19,12(sp)
    767c:	04c00074 	movhi	r19,1
    7680:	dc800215 	stw	r18,8(sp)
    7684:	dc400115 	stw	r17,4(sp)
    7688:	dc000015 	stw	r16,0(sp)
    768c:	dfc00415 	stw	ra,16(sp)
    7690:	2821883a 	mov	r16,r5
    7694:	9ccc2404 	addi	r19,r19,12432
    7698:	2025883a 	mov	r18,r4
    769c:	000fd080 	call	fd08 <__malloc_lock>
    76a0:	98800217 	ldw	r2,8(r19)
    76a4:	14400117 	ldw	r17,4(r2)
    76a8:	00bfff04 	movi	r2,-4
    76ac:	88a2703a 	and	r17,r17,r2
    76b0:	8c21c83a 	sub	r16,r17,r16
    76b4:	8403fbc4 	addi	r16,r16,4079
    76b8:	8020d33a 	srli	r16,r16,12
    76bc:	0083ffc4 	movi	r2,4095
    76c0:	843fffc4 	addi	r16,r16,-1
    76c4:	8020933a 	slli	r16,r16,12
    76c8:	1400060e 	bge	r2,r16,76e4 <_malloc_trim_r+0x70>
    76cc:	000b883a 	mov	r5,zero
    76d0:	9009883a 	mov	r4,r18
    76d4:	00031700 	call	3170 <_sbrk_r>
    76d8:	98c00217 	ldw	r3,8(r19)
    76dc:	1c47883a 	add	r3,r3,r17
    76e0:	10c00a26 	beq	r2,r3,770c <_malloc_trim_r+0x98>
    76e4:	9009883a 	mov	r4,r18
    76e8:	000fd2c0 	call	fd2c <__malloc_unlock>
    76ec:	0005883a 	mov	r2,zero
    76f0:	dfc00417 	ldw	ra,16(sp)
    76f4:	dcc00317 	ldw	r19,12(sp)
    76f8:	dc800217 	ldw	r18,8(sp)
    76fc:	dc400117 	ldw	r17,4(sp)
    7700:	dc000017 	ldw	r16,0(sp)
    7704:	dec00504 	addi	sp,sp,20
    7708:	f800283a 	ret
    770c:	040bc83a 	sub	r5,zero,r16
    7710:	9009883a 	mov	r4,r18
    7714:	00031700 	call	3170 <_sbrk_r>
    7718:	00ffffc4 	movi	r3,-1
    771c:	10c00d26 	beq	r2,r3,7754 <_malloc_trim_r+0xe0>
    7720:	00c00074 	movhi	r3,1
    7724:	18d8a704 	addi	r3,r3,25244
    7728:	18800017 	ldw	r2,0(r3)
    772c:	99000217 	ldw	r4,8(r19)
    7730:	8c23c83a 	sub	r17,r17,r16
    7734:	8c400054 	ori	r17,r17,1
    7738:	1421c83a 	sub	r16,r2,r16
    773c:	24400115 	stw	r17,4(r4)
    7740:	9009883a 	mov	r4,r18
    7744:	1c000015 	stw	r16,0(r3)
    7748:	000fd2c0 	call	fd2c <__malloc_unlock>
    774c:	00800044 	movi	r2,1
    7750:	003fe706 	br	76f0 <__alt_exception_stack_pointer+0xf80076f0>
    7754:	000b883a 	mov	r5,zero
    7758:	9009883a 	mov	r4,r18
    775c:	00031700 	call	3170 <_sbrk_r>
    7760:	99000217 	ldw	r4,8(r19)
    7764:	014003c4 	movi	r5,15
    7768:	1107c83a 	sub	r3,r2,r4
    776c:	28ffdd0e 	bge	r5,r3,76e4 <__alt_exception_stack_pointer+0xf80076e4>
    7770:	01400074 	movhi	r5,1
    7774:	2951ca04 	addi	r5,r5,18216
    7778:	29400017 	ldw	r5,0(r5)
    777c:	18c00054 	ori	r3,r3,1
    7780:	20c00115 	stw	r3,4(r4)
    7784:	00c00074 	movhi	r3,1
    7788:	1145c83a 	sub	r2,r2,r5
    778c:	18d8a704 	addi	r3,r3,25244
    7790:	18800015 	stw	r2,0(r3)
    7794:	003fd306 	br	76e4 <__alt_exception_stack_pointer+0xf80076e4>

00007798 <_free_r>:
    7798:	28004126 	beq	r5,zero,78a0 <_free_r+0x108>
    779c:	defffd04 	addi	sp,sp,-12
    77a0:	dc400115 	stw	r17,4(sp)
    77a4:	dc000015 	stw	r16,0(sp)
    77a8:	2023883a 	mov	r17,r4
    77ac:	2821883a 	mov	r16,r5
    77b0:	dfc00215 	stw	ra,8(sp)
    77b4:	000fd080 	call	fd08 <__malloc_lock>
    77b8:	81ffff17 	ldw	r7,-4(r16)
    77bc:	00bfff84 	movi	r2,-2
    77c0:	01000074 	movhi	r4,1
    77c4:	81bffe04 	addi	r6,r16,-8
    77c8:	3884703a 	and	r2,r7,r2
    77cc:	210c2404 	addi	r4,r4,12432
    77d0:	308b883a 	add	r5,r6,r2
    77d4:	2a400117 	ldw	r9,4(r5)
    77d8:	22000217 	ldw	r8,8(r4)
    77dc:	00ffff04 	movi	r3,-4
    77e0:	48c6703a 	and	r3,r9,r3
    77e4:	2a005726 	beq	r5,r8,7944 <_free_r+0x1ac>
    77e8:	28c00115 	stw	r3,4(r5)
    77ec:	39c0004c 	andi	r7,r7,1
    77f0:	3800091e 	bne	r7,zero,7818 <_free_r+0x80>
    77f4:	823ffe17 	ldw	r8,-8(r16)
    77f8:	22400204 	addi	r9,r4,8
    77fc:	320dc83a 	sub	r6,r6,r8
    7800:	31c00217 	ldw	r7,8(r6)
    7804:	1205883a 	add	r2,r2,r8
    7808:	3a406526 	beq	r7,r9,79a0 <_free_r+0x208>
    780c:	32000317 	ldw	r8,12(r6)
    7810:	3a000315 	stw	r8,12(r7)
    7814:	41c00215 	stw	r7,8(r8)
    7818:	28cf883a 	add	r7,r5,r3
    781c:	39c00117 	ldw	r7,4(r7)
    7820:	39c0004c 	andi	r7,r7,1
    7824:	38003a26 	beq	r7,zero,7910 <_free_r+0x178>
    7828:	10c00054 	ori	r3,r2,1
    782c:	30c00115 	stw	r3,4(r6)
    7830:	3087883a 	add	r3,r6,r2
    7834:	18800015 	stw	r2,0(r3)
    7838:	00c07fc4 	movi	r3,511
    783c:	18801936 	bltu	r3,r2,78a4 <_free_r+0x10c>
    7840:	1004d0fa 	srli	r2,r2,3
    7844:	01c00044 	movi	r7,1
    7848:	21400117 	ldw	r5,4(r4)
    784c:	10c00044 	addi	r3,r2,1
    7850:	18c7883a 	add	r3,r3,r3
    7854:	1005d0ba 	srai	r2,r2,2
    7858:	18c7883a 	add	r3,r3,r3
    785c:	18c7883a 	add	r3,r3,r3
    7860:	1907883a 	add	r3,r3,r4
    7864:	3884983a 	sll	r2,r7,r2
    7868:	19c00017 	ldw	r7,0(r3)
    786c:	1a3ffe04 	addi	r8,r3,-8
    7870:	1144b03a 	or	r2,r2,r5
    7874:	32000315 	stw	r8,12(r6)
    7878:	31c00215 	stw	r7,8(r6)
    787c:	20800115 	stw	r2,4(r4)
    7880:	19800015 	stw	r6,0(r3)
    7884:	39800315 	stw	r6,12(r7)
    7888:	8809883a 	mov	r4,r17
    788c:	dfc00217 	ldw	ra,8(sp)
    7890:	dc400117 	ldw	r17,4(sp)
    7894:	dc000017 	ldw	r16,0(sp)
    7898:	dec00304 	addi	sp,sp,12
    789c:	000fd2c1 	jmpi	fd2c <__malloc_unlock>
    78a0:	f800283a 	ret
    78a4:	100ad27a 	srli	r5,r2,9
    78a8:	00c00104 	movi	r3,4
    78ac:	19404a36 	bltu	r3,r5,79d8 <_free_r+0x240>
    78b0:	100ad1ba 	srli	r5,r2,6
    78b4:	28c00e44 	addi	r3,r5,57
    78b8:	18c7883a 	add	r3,r3,r3
    78bc:	29400e04 	addi	r5,r5,56
    78c0:	18c7883a 	add	r3,r3,r3
    78c4:	18c7883a 	add	r3,r3,r3
    78c8:	1909883a 	add	r4,r3,r4
    78cc:	20c00017 	ldw	r3,0(r4)
    78d0:	01c00074 	movhi	r7,1
    78d4:	213ffe04 	addi	r4,r4,-8
    78d8:	39cc2404 	addi	r7,r7,12432
    78dc:	20c04426 	beq	r4,r3,79f0 <_free_r+0x258>
    78e0:	01ffff04 	movi	r7,-4
    78e4:	19400117 	ldw	r5,4(r3)
    78e8:	29ca703a 	and	r5,r5,r7
    78ec:	1140022e 	bgeu	r2,r5,78f8 <_free_r+0x160>
    78f0:	18c00217 	ldw	r3,8(r3)
    78f4:	20fffb1e 	bne	r4,r3,78e4 <__alt_exception_stack_pointer+0xf80078e4>
    78f8:	19000317 	ldw	r4,12(r3)
    78fc:	31000315 	stw	r4,12(r6)
    7900:	30c00215 	stw	r3,8(r6)
    7904:	21800215 	stw	r6,8(r4)
    7908:	19800315 	stw	r6,12(r3)
    790c:	003fde06 	br	7888 <__alt_exception_stack_pointer+0xf8007888>
    7910:	29c00217 	ldw	r7,8(r5)
    7914:	10c5883a 	add	r2,r2,r3
    7918:	00c00074 	movhi	r3,1
    791c:	18cc2604 	addi	r3,r3,12440
    7920:	38c03b26 	beq	r7,r3,7a10 <_free_r+0x278>
    7924:	2a000317 	ldw	r8,12(r5)
    7928:	11400054 	ori	r5,r2,1
    792c:	3087883a 	add	r3,r6,r2
    7930:	3a000315 	stw	r8,12(r7)
    7934:	41c00215 	stw	r7,8(r8)
    7938:	31400115 	stw	r5,4(r6)
    793c:	18800015 	stw	r2,0(r3)
    7940:	003fbd06 	br	7838 <__alt_exception_stack_pointer+0xf8007838>
    7944:	39c0004c 	andi	r7,r7,1
    7948:	10c5883a 	add	r2,r2,r3
    794c:	3800071e 	bne	r7,zero,796c <_free_r+0x1d4>
    7950:	81fffe17 	ldw	r7,-8(r16)
    7954:	31cdc83a 	sub	r6,r6,r7
    7958:	30c00317 	ldw	r3,12(r6)
    795c:	31400217 	ldw	r5,8(r6)
    7960:	11c5883a 	add	r2,r2,r7
    7964:	28c00315 	stw	r3,12(r5)
    7968:	19400215 	stw	r5,8(r3)
    796c:	10c00054 	ori	r3,r2,1
    7970:	30c00115 	stw	r3,4(r6)
    7974:	00c00074 	movhi	r3,1
    7978:	18d1cb04 	addi	r3,r3,18220
    797c:	18c00017 	ldw	r3,0(r3)
    7980:	21800215 	stw	r6,8(r4)
    7984:	10ffc036 	bltu	r2,r3,7888 <__alt_exception_stack_pointer+0xf8007888>
    7988:	00800074 	movhi	r2,1
    798c:	10989b04 	addi	r2,r2,25196
    7990:	11400017 	ldw	r5,0(r2)
    7994:	8809883a 	mov	r4,r17
    7998:	00076740 	call	7674 <_malloc_trim_r>
    799c:	003fba06 	br	7888 <__alt_exception_stack_pointer+0xf8007888>
    79a0:	28c9883a 	add	r4,r5,r3
    79a4:	21000117 	ldw	r4,4(r4)
    79a8:	2100004c 	andi	r4,r4,1
    79ac:	2000391e 	bne	r4,zero,7a94 <_free_r+0x2fc>
    79b0:	29c00217 	ldw	r7,8(r5)
    79b4:	29000317 	ldw	r4,12(r5)
    79b8:	1885883a 	add	r2,r3,r2
    79bc:	10c00054 	ori	r3,r2,1
    79c0:	39000315 	stw	r4,12(r7)
    79c4:	21c00215 	stw	r7,8(r4)
    79c8:	30c00115 	stw	r3,4(r6)
    79cc:	308d883a 	add	r6,r6,r2
    79d0:	30800015 	stw	r2,0(r6)
    79d4:	003fac06 	br	7888 <__alt_exception_stack_pointer+0xf8007888>
    79d8:	00c00504 	movi	r3,20
    79dc:	19401536 	bltu	r3,r5,7a34 <_free_r+0x29c>
    79e0:	28c01704 	addi	r3,r5,92
    79e4:	18c7883a 	add	r3,r3,r3
    79e8:	294016c4 	addi	r5,r5,91
    79ec:	003fb406 	br	78c0 <__alt_exception_stack_pointer+0xf80078c0>
    79f0:	280bd0ba 	srai	r5,r5,2
    79f4:	00c00044 	movi	r3,1
    79f8:	38800117 	ldw	r2,4(r7)
    79fc:	194a983a 	sll	r5,r3,r5
    7a00:	2007883a 	mov	r3,r4
    7a04:	2884b03a 	or	r2,r5,r2
    7a08:	38800115 	stw	r2,4(r7)
    7a0c:	003fbb06 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    7a10:	21800515 	stw	r6,20(r4)
    7a14:	21800415 	stw	r6,16(r4)
    7a18:	10c00054 	ori	r3,r2,1
    7a1c:	31c00315 	stw	r7,12(r6)
    7a20:	31c00215 	stw	r7,8(r6)
    7a24:	30c00115 	stw	r3,4(r6)
    7a28:	308d883a 	add	r6,r6,r2
    7a2c:	30800015 	stw	r2,0(r6)
    7a30:	003f9506 	br	7888 <__alt_exception_stack_pointer+0xf8007888>
    7a34:	00c01504 	movi	r3,84
    7a38:	19400536 	bltu	r3,r5,7a50 <_free_r+0x2b8>
    7a3c:	100ad33a 	srli	r5,r2,12
    7a40:	28c01bc4 	addi	r3,r5,111
    7a44:	18c7883a 	add	r3,r3,r3
    7a48:	29401b84 	addi	r5,r5,110
    7a4c:	003f9c06 	br	78c0 <__alt_exception_stack_pointer+0xf80078c0>
    7a50:	00c05504 	movi	r3,340
    7a54:	19400536 	bltu	r3,r5,7a6c <_free_r+0x2d4>
    7a58:	100ad3fa 	srli	r5,r2,15
    7a5c:	28c01e04 	addi	r3,r5,120
    7a60:	18c7883a 	add	r3,r3,r3
    7a64:	29401dc4 	addi	r5,r5,119
    7a68:	003f9506 	br	78c0 <__alt_exception_stack_pointer+0xf80078c0>
    7a6c:	00c15504 	movi	r3,1364
    7a70:	19400536 	bltu	r3,r5,7a88 <_free_r+0x2f0>
    7a74:	100ad4ba 	srli	r5,r2,18
    7a78:	28c01f44 	addi	r3,r5,125
    7a7c:	18c7883a 	add	r3,r3,r3
    7a80:	29401f04 	addi	r5,r5,124
    7a84:	003f8e06 	br	78c0 <__alt_exception_stack_pointer+0xf80078c0>
    7a88:	00c03f84 	movi	r3,254
    7a8c:	01401f84 	movi	r5,126
    7a90:	003f8b06 	br	78c0 <__alt_exception_stack_pointer+0xf80078c0>
    7a94:	10c00054 	ori	r3,r2,1
    7a98:	30c00115 	stw	r3,4(r6)
    7a9c:	308d883a 	add	r6,r6,r2
    7aa0:	30800015 	stw	r2,0(r6)
    7aa4:	003f7806 	br	7888 <__alt_exception_stack_pointer+0xf8007888>

00007aa8 <__sfvwrite_r>:
    7aa8:	30800217 	ldw	r2,8(r6)
    7aac:	10006726 	beq	r2,zero,7c4c <__sfvwrite_r+0x1a4>
    7ab0:	28c0030b 	ldhu	r3,12(r5)
    7ab4:	defff404 	addi	sp,sp,-48
    7ab8:	dd400715 	stw	r21,28(sp)
    7abc:	dd000615 	stw	r20,24(sp)
    7ac0:	dc000215 	stw	r16,8(sp)
    7ac4:	dfc00b15 	stw	ra,44(sp)
    7ac8:	df000a15 	stw	fp,40(sp)
    7acc:	ddc00915 	stw	r23,36(sp)
    7ad0:	dd800815 	stw	r22,32(sp)
    7ad4:	dcc00515 	stw	r19,20(sp)
    7ad8:	dc800415 	stw	r18,16(sp)
    7adc:	dc400315 	stw	r17,12(sp)
    7ae0:	1880020c 	andi	r2,r3,8
    7ae4:	2821883a 	mov	r16,r5
    7ae8:	202b883a 	mov	r21,r4
    7aec:	3029883a 	mov	r20,r6
    7af0:	10002726 	beq	r2,zero,7b90 <__sfvwrite_r+0xe8>
    7af4:	28800417 	ldw	r2,16(r5)
    7af8:	10002526 	beq	r2,zero,7b90 <__sfvwrite_r+0xe8>
    7afc:	1880008c 	andi	r2,r3,2
    7b00:	a4400017 	ldw	r17,0(r20)
    7b04:	10002a26 	beq	r2,zero,7bb0 <__sfvwrite_r+0x108>
    7b08:	05a00034 	movhi	r22,32768
    7b0c:	0027883a 	mov	r19,zero
    7b10:	0025883a 	mov	r18,zero
    7b14:	b5bf0004 	addi	r22,r22,-1024
    7b18:	980d883a 	mov	r6,r19
    7b1c:	a809883a 	mov	r4,r21
    7b20:	90004626 	beq	r18,zero,7c3c <__sfvwrite_r+0x194>
    7b24:	900f883a 	mov	r7,r18
    7b28:	b480022e 	bgeu	r22,r18,7b34 <__sfvwrite_r+0x8c>
    7b2c:	01e00034 	movhi	r7,32768
    7b30:	39ff0004 	addi	r7,r7,-1024
    7b34:	80800917 	ldw	r2,36(r16)
    7b38:	81400717 	ldw	r5,28(r16)
    7b3c:	103ee83a 	callr	r2
    7b40:	00805a0e 	bge	zero,r2,7cac <__sfvwrite_r+0x204>
    7b44:	a0c00217 	ldw	r3,8(r20)
    7b48:	98a7883a 	add	r19,r19,r2
    7b4c:	90a5c83a 	sub	r18,r18,r2
    7b50:	1885c83a 	sub	r2,r3,r2
    7b54:	a0800215 	stw	r2,8(r20)
    7b58:	103fef1e 	bne	r2,zero,7b18 <__alt_exception_stack_pointer+0xf8007b18>
    7b5c:	0005883a 	mov	r2,zero
    7b60:	dfc00b17 	ldw	ra,44(sp)
    7b64:	df000a17 	ldw	fp,40(sp)
    7b68:	ddc00917 	ldw	r23,36(sp)
    7b6c:	dd800817 	ldw	r22,32(sp)
    7b70:	dd400717 	ldw	r21,28(sp)
    7b74:	dd000617 	ldw	r20,24(sp)
    7b78:	dcc00517 	ldw	r19,20(sp)
    7b7c:	dc800417 	ldw	r18,16(sp)
    7b80:	dc400317 	ldw	r17,12(sp)
    7b84:	dc000217 	ldw	r16,8(sp)
    7b88:	dec00c04 	addi	sp,sp,48
    7b8c:	f800283a 	ret
    7b90:	800b883a 	mov	r5,r16
    7b94:	a809883a 	mov	r4,r21
    7b98:	00056180 	call	5618 <__swsetup_r>
    7b9c:	1000ee1e 	bne	r2,zero,7f58 <__sfvwrite_r+0x4b0>
    7ba0:	80c0030b 	ldhu	r3,12(r16)
    7ba4:	a4400017 	ldw	r17,0(r20)
    7ba8:	1880008c 	andi	r2,r3,2
    7bac:	103fd61e 	bne	r2,zero,7b08 <__alt_exception_stack_pointer+0xf8007b08>
    7bb0:	1880004c 	andi	r2,r3,1
    7bb4:	1000421e 	bne	r2,zero,7cc0 <__sfvwrite_r+0x218>
    7bb8:	0039883a 	mov	fp,zero
    7bbc:	0025883a 	mov	r18,zero
    7bc0:	90001a26 	beq	r18,zero,7c2c <__sfvwrite_r+0x184>
    7bc4:	1880800c 	andi	r2,r3,512
    7bc8:	84c00217 	ldw	r19,8(r16)
    7bcc:	10002126 	beq	r2,zero,7c54 <__sfvwrite_r+0x1ac>
    7bd0:	982f883a 	mov	r23,r19
    7bd4:	94c09636 	bltu	r18,r19,7e30 <__sfvwrite_r+0x388>
    7bd8:	1881200c 	andi	r2,r3,1152
    7bdc:	1000a11e 	bne	r2,zero,7e64 <__sfvwrite_r+0x3bc>
    7be0:	81000017 	ldw	r4,0(r16)
    7be4:	b80d883a 	mov	r6,r23
    7be8:	e00b883a 	mov	r5,fp
    7bec:	00085bc0 	call	85bc <memmove>
    7bf0:	80c00217 	ldw	r3,8(r16)
    7bf4:	81000017 	ldw	r4,0(r16)
    7bf8:	9005883a 	mov	r2,r18
    7bfc:	1ce7c83a 	sub	r19,r3,r19
    7c00:	25cf883a 	add	r7,r4,r23
    7c04:	84c00215 	stw	r19,8(r16)
    7c08:	81c00015 	stw	r7,0(r16)
    7c0c:	a0c00217 	ldw	r3,8(r20)
    7c10:	e0b9883a 	add	fp,fp,r2
    7c14:	90a5c83a 	sub	r18,r18,r2
    7c18:	18a7c83a 	sub	r19,r3,r2
    7c1c:	a4c00215 	stw	r19,8(r20)
    7c20:	983fce26 	beq	r19,zero,7b5c <__alt_exception_stack_pointer+0xf8007b5c>
    7c24:	80c0030b 	ldhu	r3,12(r16)
    7c28:	903fe61e 	bne	r18,zero,7bc4 <__alt_exception_stack_pointer+0xf8007bc4>
    7c2c:	8f000017 	ldw	fp,0(r17)
    7c30:	8c800117 	ldw	r18,4(r17)
    7c34:	8c400204 	addi	r17,r17,8
    7c38:	003fe106 	br	7bc0 <__alt_exception_stack_pointer+0xf8007bc0>
    7c3c:	8cc00017 	ldw	r19,0(r17)
    7c40:	8c800117 	ldw	r18,4(r17)
    7c44:	8c400204 	addi	r17,r17,8
    7c48:	003fb306 	br	7b18 <__alt_exception_stack_pointer+0xf8007b18>
    7c4c:	0005883a 	mov	r2,zero
    7c50:	f800283a 	ret
    7c54:	81000017 	ldw	r4,0(r16)
    7c58:	80800417 	ldw	r2,16(r16)
    7c5c:	11005a36 	bltu	r2,r4,7dc8 <__sfvwrite_r+0x320>
    7c60:	85c00517 	ldw	r23,20(r16)
    7c64:	95c05836 	bltu	r18,r23,7dc8 <__sfvwrite_r+0x320>
    7c68:	00a00034 	movhi	r2,32768
    7c6c:	10bfffc4 	addi	r2,r2,-1
    7c70:	9009883a 	mov	r4,r18
    7c74:	1480012e 	bgeu	r2,r18,7c7c <__sfvwrite_r+0x1d4>
    7c78:	1009883a 	mov	r4,r2
    7c7c:	b80b883a 	mov	r5,r23
    7c80:	000ccec0 	call	ccec <__divsi3>
    7c84:	b80b883a 	mov	r5,r23
    7c88:	1009883a 	mov	r4,r2
    7c8c:	000cea00 	call	cea0 <__mulsi3>
    7c90:	81400717 	ldw	r5,28(r16)
    7c94:	80c00917 	ldw	r3,36(r16)
    7c98:	100f883a 	mov	r7,r2
    7c9c:	e00d883a 	mov	r6,fp
    7ca0:	a809883a 	mov	r4,r21
    7ca4:	183ee83a 	callr	r3
    7ca8:	00bfd816 	blt	zero,r2,7c0c <__alt_exception_stack_pointer+0xf8007c0c>
    7cac:	8080030b 	ldhu	r2,12(r16)
    7cb0:	10801014 	ori	r2,r2,64
    7cb4:	8080030d 	sth	r2,12(r16)
    7cb8:	00bfffc4 	movi	r2,-1
    7cbc:	003fa806 	br	7b60 <__alt_exception_stack_pointer+0xf8007b60>
    7cc0:	0027883a 	mov	r19,zero
    7cc4:	0011883a 	mov	r8,zero
    7cc8:	0039883a 	mov	fp,zero
    7ccc:	0025883a 	mov	r18,zero
    7cd0:	90001f26 	beq	r18,zero,7d50 <__sfvwrite_r+0x2a8>
    7cd4:	40005a26 	beq	r8,zero,7e40 <__sfvwrite_r+0x398>
    7cd8:	982d883a 	mov	r22,r19
    7cdc:	94c0012e 	bgeu	r18,r19,7ce4 <__sfvwrite_r+0x23c>
    7ce0:	902d883a 	mov	r22,r18
    7ce4:	81000017 	ldw	r4,0(r16)
    7ce8:	80800417 	ldw	r2,16(r16)
    7cec:	b02f883a 	mov	r23,r22
    7cf0:	81c00517 	ldw	r7,20(r16)
    7cf4:	1100032e 	bgeu	r2,r4,7d04 <__sfvwrite_r+0x25c>
    7cf8:	80c00217 	ldw	r3,8(r16)
    7cfc:	38c7883a 	add	r3,r7,r3
    7d00:	1d801816 	blt	r3,r22,7d64 <__sfvwrite_r+0x2bc>
    7d04:	b1c03e16 	blt	r22,r7,7e00 <__sfvwrite_r+0x358>
    7d08:	80800917 	ldw	r2,36(r16)
    7d0c:	81400717 	ldw	r5,28(r16)
    7d10:	e00d883a 	mov	r6,fp
    7d14:	da000115 	stw	r8,4(sp)
    7d18:	a809883a 	mov	r4,r21
    7d1c:	103ee83a 	callr	r2
    7d20:	102f883a 	mov	r23,r2
    7d24:	da000117 	ldw	r8,4(sp)
    7d28:	00bfe00e 	bge	zero,r2,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7d2c:	9de7c83a 	sub	r19,r19,r23
    7d30:	98001f26 	beq	r19,zero,7db0 <__sfvwrite_r+0x308>
    7d34:	a0800217 	ldw	r2,8(r20)
    7d38:	e5f9883a 	add	fp,fp,r23
    7d3c:	95e5c83a 	sub	r18,r18,r23
    7d40:	15efc83a 	sub	r23,r2,r23
    7d44:	a5c00215 	stw	r23,8(r20)
    7d48:	b83f8426 	beq	r23,zero,7b5c <__alt_exception_stack_pointer+0xf8007b5c>
    7d4c:	903fe11e 	bne	r18,zero,7cd4 <__alt_exception_stack_pointer+0xf8007cd4>
    7d50:	8f000017 	ldw	fp,0(r17)
    7d54:	8c800117 	ldw	r18,4(r17)
    7d58:	0011883a 	mov	r8,zero
    7d5c:	8c400204 	addi	r17,r17,8
    7d60:	003fdb06 	br	7cd0 <__alt_exception_stack_pointer+0xf8007cd0>
    7d64:	180d883a 	mov	r6,r3
    7d68:	e00b883a 	mov	r5,fp
    7d6c:	da000115 	stw	r8,4(sp)
    7d70:	d8c00015 	stw	r3,0(sp)
    7d74:	00085bc0 	call	85bc <memmove>
    7d78:	d8c00017 	ldw	r3,0(sp)
    7d7c:	80800017 	ldw	r2,0(r16)
    7d80:	800b883a 	mov	r5,r16
    7d84:	a809883a 	mov	r4,r21
    7d88:	10c5883a 	add	r2,r2,r3
    7d8c:	80800015 	stw	r2,0(r16)
    7d90:	d8c00015 	stw	r3,0(sp)
    7d94:	00072380 	call	7238 <_fflush_r>
    7d98:	d8c00017 	ldw	r3,0(sp)
    7d9c:	da000117 	ldw	r8,4(sp)
    7da0:	103fc21e 	bne	r2,zero,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7da4:	182f883a 	mov	r23,r3
    7da8:	9de7c83a 	sub	r19,r19,r23
    7dac:	983fe11e 	bne	r19,zero,7d34 <__alt_exception_stack_pointer+0xf8007d34>
    7db0:	800b883a 	mov	r5,r16
    7db4:	a809883a 	mov	r4,r21
    7db8:	00072380 	call	7238 <_fflush_r>
    7dbc:	103fbb1e 	bne	r2,zero,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7dc0:	0011883a 	mov	r8,zero
    7dc4:	003fdb06 	br	7d34 <__alt_exception_stack_pointer+0xf8007d34>
    7dc8:	94c0012e 	bgeu	r18,r19,7dd0 <__sfvwrite_r+0x328>
    7dcc:	9027883a 	mov	r19,r18
    7dd0:	980d883a 	mov	r6,r19
    7dd4:	e00b883a 	mov	r5,fp
    7dd8:	00085bc0 	call	85bc <memmove>
    7ddc:	80800217 	ldw	r2,8(r16)
    7de0:	80c00017 	ldw	r3,0(r16)
    7de4:	14c5c83a 	sub	r2,r2,r19
    7de8:	1cc7883a 	add	r3,r3,r19
    7dec:	80800215 	stw	r2,8(r16)
    7df0:	80c00015 	stw	r3,0(r16)
    7df4:	10004326 	beq	r2,zero,7f04 <__sfvwrite_r+0x45c>
    7df8:	9805883a 	mov	r2,r19
    7dfc:	003f8306 	br	7c0c <__alt_exception_stack_pointer+0xf8007c0c>
    7e00:	b00d883a 	mov	r6,r22
    7e04:	e00b883a 	mov	r5,fp
    7e08:	da000115 	stw	r8,4(sp)
    7e0c:	00085bc0 	call	85bc <memmove>
    7e10:	80800217 	ldw	r2,8(r16)
    7e14:	80c00017 	ldw	r3,0(r16)
    7e18:	da000117 	ldw	r8,4(sp)
    7e1c:	1585c83a 	sub	r2,r2,r22
    7e20:	1dad883a 	add	r22,r3,r22
    7e24:	80800215 	stw	r2,8(r16)
    7e28:	85800015 	stw	r22,0(r16)
    7e2c:	003fbf06 	br	7d2c <__alt_exception_stack_pointer+0xf8007d2c>
    7e30:	81000017 	ldw	r4,0(r16)
    7e34:	9027883a 	mov	r19,r18
    7e38:	902f883a 	mov	r23,r18
    7e3c:	003f6906 	br	7be4 <__alt_exception_stack_pointer+0xf8007be4>
    7e40:	900d883a 	mov	r6,r18
    7e44:	01400284 	movi	r5,10
    7e48:	e009883a 	mov	r4,fp
    7e4c:	00083900 	call	8390 <memchr>
    7e50:	10003e26 	beq	r2,zero,7f4c <__sfvwrite_r+0x4a4>
    7e54:	10800044 	addi	r2,r2,1
    7e58:	1727c83a 	sub	r19,r2,fp
    7e5c:	02000044 	movi	r8,1
    7e60:	003f9d06 	br	7cd8 <__alt_exception_stack_pointer+0xf8007cd8>
    7e64:	80800517 	ldw	r2,20(r16)
    7e68:	81400417 	ldw	r5,16(r16)
    7e6c:	81c00017 	ldw	r7,0(r16)
    7e70:	10a7883a 	add	r19,r2,r2
    7e74:	9885883a 	add	r2,r19,r2
    7e78:	1026d7fa 	srli	r19,r2,31
    7e7c:	396dc83a 	sub	r22,r7,r5
    7e80:	b1000044 	addi	r4,r22,1
    7e84:	9885883a 	add	r2,r19,r2
    7e88:	1027d07a 	srai	r19,r2,1
    7e8c:	2485883a 	add	r2,r4,r18
    7e90:	980d883a 	mov	r6,r19
    7e94:	9880022e 	bgeu	r19,r2,7ea0 <__sfvwrite_r+0x3f8>
    7e98:	1027883a 	mov	r19,r2
    7e9c:	100d883a 	mov	r6,r2
    7ea0:	18c1000c 	andi	r3,r3,1024
    7ea4:	18001c26 	beq	r3,zero,7f18 <__sfvwrite_r+0x470>
    7ea8:	300b883a 	mov	r5,r6
    7eac:	a809883a 	mov	r4,r21
    7eb0:	00028240 	call	2824 <_malloc_r>
    7eb4:	102f883a 	mov	r23,r2
    7eb8:	10002926 	beq	r2,zero,7f60 <__sfvwrite_r+0x4b8>
    7ebc:	81400417 	ldw	r5,16(r16)
    7ec0:	b00d883a 	mov	r6,r22
    7ec4:	1009883a 	mov	r4,r2
    7ec8:	00084740 	call	8474 <memcpy>
    7ecc:	8080030b 	ldhu	r2,12(r16)
    7ed0:	00fedfc4 	movi	r3,-1153
    7ed4:	10c4703a 	and	r2,r2,r3
    7ed8:	10802014 	ori	r2,r2,128
    7edc:	8080030d 	sth	r2,12(r16)
    7ee0:	bd89883a 	add	r4,r23,r22
    7ee4:	9d8fc83a 	sub	r7,r19,r22
    7ee8:	85c00415 	stw	r23,16(r16)
    7eec:	84c00515 	stw	r19,20(r16)
    7ef0:	81000015 	stw	r4,0(r16)
    7ef4:	9027883a 	mov	r19,r18
    7ef8:	81c00215 	stw	r7,8(r16)
    7efc:	902f883a 	mov	r23,r18
    7f00:	003f3806 	br	7be4 <__alt_exception_stack_pointer+0xf8007be4>
    7f04:	800b883a 	mov	r5,r16
    7f08:	a809883a 	mov	r4,r21
    7f0c:	00072380 	call	7238 <_fflush_r>
    7f10:	103fb926 	beq	r2,zero,7df8 <__alt_exception_stack_pointer+0xf8007df8>
    7f14:	003f6506 	br	7cac <__alt_exception_stack_pointer+0xf8007cac>
    7f18:	a809883a 	mov	r4,r21
    7f1c:	00098f80 	call	98f8 <_realloc_r>
    7f20:	102f883a 	mov	r23,r2
    7f24:	103fee1e 	bne	r2,zero,7ee0 <__alt_exception_stack_pointer+0xf8007ee0>
    7f28:	81400417 	ldw	r5,16(r16)
    7f2c:	a809883a 	mov	r4,r21
    7f30:	00077980 	call	7798 <_free_r>
    7f34:	8080030b 	ldhu	r2,12(r16)
    7f38:	00ffdfc4 	movi	r3,-129
    7f3c:	1884703a 	and	r2,r3,r2
    7f40:	00c00304 	movi	r3,12
    7f44:	a8c00015 	stw	r3,0(r21)
    7f48:	003f5906 	br	7cb0 <__alt_exception_stack_pointer+0xf8007cb0>
    7f4c:	94c00044 	addi	r19,r18,1
    7f50:	02000044 	movi	r8,1
    7f54:	003f6006 	br	7cd8 <__alt_exception_stack_pointer+0xf8007cd8>
    7f58:	00bfffc4 	movi	r2,-1
    7f5c:	003f0006 	br	7b60 <__alt_exception_stack_pointer+0xf8007b60>
    7f60:	00800304 	movi	r2,12
    7f64:	a8800015 	stw	r2,0(r21)
    7f68:	8080030b 	ldhu	r2,12(r16)
    7f6c:	003f5006 	br	7cb0 <__alt_exception_stack_pointer+0xf8007cb0>

00007f70 <_fwalk>:
    7f70:	defff704 	addi	sp,sp,-36
    7f74:	dd000415 	stw	r20,16(sp)
    7f78:	dfc00815 	stw	ra,32(sp)
    7f7c:	ddc00715 	stw	r23,28(sp)
    7f80:	dd800615 	stw	r22,24(sp)
    7f84:	dd400515 	stw	r21,20(sp)
    7f88:	dcc00315 	stw	r19,12(sp)
    7f8c:	dc800215 	stw	r18,8(sp)
    7f90:	dc400115 	stw	r17,4(sp)
    7f94:	dc000015 	stw	r16,0(sp)
    7f98:	2500b804 	addi	r20,r4,736
    7f9c:	a0002326 	beq	r20,zero,802c <_fwalk+0xbc>
    7fa0:	282b883a 	mov	r21,r5
    7fa4:	002f883a 	mov	r23,zero
    7fa8:	05800044 	movi	r22,1
    7fac:	04ffffc4 	movi	r19,-1
    7fb0:	a4400117 	ldw	r17,4(r20)
    7fb4:	a4800217 	ldw	r18,8(r20)
    7fb8:	8c7fffc4 	addi	r17,r17,-1
    7fbc:	88000d16 	blt	r17,zero,7ff4 <_fwalk+0x84>
    7fc0:	94000304 	addi	r16,r18,12
    7fc4:	94800384 	addi	r18,r18,14
    7fc8:	8080000b 	ldhu	r2,0(r16)
    7fcc:	8c7fffc4 	addi	r17,r17,-1
    7fd0:	813ffd04 	addi	r4,r16,-12
    7fd4:	b080042e 	bgeu	r22,r2,7fe8 <_fwalk+0x78>
    7fd8:	9080000f 	ldh	r2,0(r18)
    7fdc:	14c00226 	beq	r2,r19,7fe8 <_fwalk+0x78>
    7fe0:	a83ee83a 	callr	r21
    7fe4:	b8aeb03a 	or	r23,r23,r2
    7fe8:	84001a04 	addi	r16,r16,104
    7fec:	94801a04 	addi	r18,r18,104
    7ff0:	8cfff51e 	bne	r17,r19,7fc8 <__alt_exception_stack_pointer+0xf8007fc8>
    7ff4:	a5000017 	ldw	r20,0(r20)
    7ff8:	a03fed1e 	bne	r20,zero,7fb0 <__alt_exception_stack_pointer+0xf8007fb0>
    7ffc:	b805883a 	mov	r2,r23
    8000:	dfc00817 	ldw	ra,32(sp)
    8004:	ddc00717 	ldw	r23,28(sp)
    8008:	dd800617 	ldw	r22,24(sp)
    800c:	dd400517 	ldw	r21,20(sp)
    8010:	dd000417 	ldw	r20,16(sp)
    8014:	dcc00317 	ldw	r19,12(sp)
    8018:	dc800217 	ldw	r18,8(sp)
    801c:	dc400117 	ldw	r17,4(sp)
    8020:	dc000017 	ldw	r16,0(sp)
    8024:	dec00904 	addi	sp,sp,36
    8028:	f800283a 	ret
    802c:	002f883a 	mov	r23,zero
    8030:	003ff206 	br	7ffc <__alt_exception_stack_pointer+0xf8007ffc>

00008034 <_fwalk_reent>:
    8034:	defff704 	addi	sp,sp,-36
    8038:	dd000415 	stw	r20,16(sp)
    803c:	dfc00815 	stw	ra,32(sp)
    8040:	ddc00715 	stw	r23,28(sp)
    8044:	dd800615 	stw	r22,24(sp)
    8048:	dd400515 	stw	r21,20(sp)
    804c:	dcc00315 	stw	r19,12(sp)
    8050:	dc800215 	stw	r18,8(sp)
    8054:	dc400115 	stw	r17,4(sp)
    8058:	dc000015 	stw	r16,0(sp)
    805c:	2500b804 	addi	r20,r4,736
    8060:	a0002326 	beq	r20,zero,80f0 <_fwalk_reent+0xbc>
    8064:	282b883a 	mov	r21,r5
    8068:	2027883a 	mov	r19,r4
    806c:	002f883a 	mov	r23,zero
    8070:	05800044 	movi	r22,1
    8074:	04bfffc4 	movi	r18,-1
    8078:	a4400117 	ldw	r17,4(r20)
    807c:	a4000217 	ldw	r16,8(r20)
    8080:	8c7fffc4 	addi	r17,r17,-1
    8084:	88000c16 	blt	r17,zero,80b8 <_fwalk_reent+0x84>
    8088:	84000304 	addi	r16,r16,12
    808c:	8080000b 	ldhu	r2,0(r16)
    8090:	8c7fffc4 	addi	r17,r17,-1
    8094:	817ffd04 	addi	r5,r16,-12
    8098:	b080052e 	bgeu	r22,r2,80b0 <_fwalk_reent+0x7c>
    809c:	8080008f 	ldh	r2,2(r16)
    80a0:	9809883a 	mov	r4,r19
    80a4:	14800226 	beq	r2,r18,80b0 <_fwalk_reent+0x7c>
    80a8:	a83ee83a 	callr	r21
    80ac:	b8aeb03a 	or	r23,r23,r2
    80b0:	84001a04 	addi	r16,r16,104
    80b4:	8cbff51e 	bne	r17,r18,808c <__alt_exception_stack_pointer+0xf800808c>
    80b8:	a5000017 	ldw	r20,0(r20)
    80bc:	a03fee1e 	bne	r20,zero,8078 <__alt_exception_stack_pointer+0xf8008078>
    80c0:	b805883a 	mov	r2,r23
    80c4:	dfc00817 	ldw	ra,32(sp)
    80c8:	ddc00717 	ldw	r23,28(sp)
    80cc:	dd800617 	ldw	r22,24(sp)
    80d0:	dd400517 	ldw	r21,20(sp)
    80d4:	dd000417 	ldw	r20,16(sp)
    80d8:	dcc00317 	ldw	r19,12(sp)
    80dc:	dc800217 	ldw	r18,8(sp)
    80e0:	dc400117 	ldw	r17,4(sp)
    80e4:	dc000017 	ldw	r16,0(sp)
    80e8:	dec00904 	addi	sp,sp,36
    80ec:	f800283a 	ret
    80f0:	002f883a 	mov	r23,zero
    80f4:	003ff206 	br	80c0 <__alt_exception_stack_pointer+0xf80080c0>

000080f8 <_setlocale_r>:
    80f8:	30001b26 	beq	r6,zero,8168 <_setlocale_r+0x70>
    80fc:	01400074 	movhi	r5,1
    8100:	defffe04 	addi	sp,sp,-8
    8104:	294a7704 	addi	r5,r5,10716
    8108:	3009883a 	mov	r4,r6
    810c:	dc000015 	stw	r16,0(sp)
    8110:	dfc00115 	stw	ra,4(sp)
    8114:	3021883a 	mov	r16,r6
    8118:	000a00c0 	call	a00c <strcmp>
    811c:	1000061e 	bne	r2,zero,8138 <_setlocale_r+0x40>
    8120:	00800074 	movhi	r2,1
    8124:	108a5804 	addi	r2,r2,10592
    8128:	dfc00117 	ldw	ra,4(sp)
    812c:	dc000017 	ldw	r16,0(sp)
    8130:	dec00204 	addi	sp,sp,8
    8134:	f800283a 	ret
    8138:	01400074 	movhi	r5,1
    813c:	294a5804 	addi	r5,r5,10592
    8140:	8009883a 	mov	r4,r16
    8144:	000a00c0 	call	a00c <strcmp>
    8148:	103ff526 	beq	r2,zero,8120 <__alt_exception_stack_pointer+0xf8008120>
    814c:	01400074 	movhi	r5,1
    8150:	294a6204 	addi	r5,r5,10632
    8154:	8009883a 	mov	r4,r16
    8158:	000a00c0 	call	a00c <strcmp>
    815c:	103ff026 	beq	r2,zero,8120 <__alt_exception_stack_pointer+0xf8008120>
    8160:	0005883a 	mov	r2,zero
    8164:	003ff006 	br	8128 <__alt_exception_stack_pointer+0xf8008128>
    8168:	00800074 	movhi	r2,1
    816c:	108a5804 	addi	r2,r2,10592
    8170:	f800283a 	ret

00008174 <__locale_charset>:
    8174:	00800074 	movhi	r2,1
    8178:	108d2e04 	addi	r2,r2,13496
    817c:	f800283a 	ret

00008180 <__locale_mb_cur_max>:
    8180:	00800074 	movhi	r2,1
    8184:	1091cc04 	addi	r2,r2,18224
    8188:	10800017 	ldw	r2,0(r2)
    818c:	f800283a 	ret

00008190 <__locale_msgcharset>:
    8190:	00800074 	movhi	r2,1
    8194:	108d2604 	addi	r2,r2,13464
    8198:	f800283a 	ret

0000819c <__locale_cjk_lang>:
    819c:	0005883a 	mov	r2,zero
    81a0:	f800283a 	ret

000081a4 <_localeconv_r>:
    81a4:	00800074 	movhi	r2,1
    81a8:	108d3604 	addi	r2,r2,13528
    81ac:	f800283a 	ret

000081b0 <setlocale>:
    81b0:	00800074 	movhi	r2,1
    81b4:	1091c904 	addi	r2,r2,18212
    81b8:	280d883a 	mov	r6,r5
    81bc:	200b883a 	mov	r5,r4
    81c0:	11000017 	ldw	r4,0(r2)
    81c4:	00080f81 	jmpi	80f8 <_setlocale_r>

000081c8 <localeconv>:
    81c8:	00800074 	movhi	r2,1
    81cc:	108d3604 	addi	r2,r2,13528
    81d0:	f800283a 	ret

000081d4 <__smakebuf_r>:
    81d4:	2880030b 	ldhu	r2,12(r5)
    81d8:	10c0008c 	andi	r3,r2,2
    81dc:	1800411e 	bne	r3,zero,82e4 <__smakebuf_r+0x110>
    81e0:	deffec04 	addi	sp,sp,-80
    81e4:	dc000f15 	stw	r16,60(sp)
    81e8:	2821883a 	mov	r16,r5
    81ec:	2940038f 	ldh	r5,14(r5)
    81f0:	dc401015 	stw	r17,64(sp)
    81f4:	dfc01315 	stw	ra,76(sp)
    81f8:	dcc01215 	stw	r19,72(sp)
    81fc:	dc801115 	stw	r18,68(sp)
    8200:	2023883a 	mov	r17,r4
    8204:	28001c16 	blt	r5,zero,8278 <__smakebuf_r+0xa4>
    8208:	d80d883a 	mov	r6,sp
    820c:	000bc7c0 	call	bc7c <_fstat_r>
    8210:	10001816 	blt	r2,zero,8274 <__smakebuf_r+0xa0>
    8214:	d8800117 	ldw	r2,4(sp)
    8218:	00e00014 	movui	r3,32768
    821c:	10bc000c 	andi	r2,r2,61440
    8220:	14c80020 	cmpeqi	r19,r2,8192
    8224:	10c03726 	beq	r2,r3,8304 <__smakebuf_r+0x130>
    8228:	80c0030b 	ldhu	r3,12(r16)
    822c:	18c20014 	ori	r3,r3,2048
    8230:	80c0030d 	sth	r3,12(r16)
    8234:	00c80004 	movi	r3,8192
    8238:	10c0521e 	bne	r2,r3,8384 <__smakebuf_r+0x1b0>
    823c:	8140038f 	ldh	r5,14(r16)
    8240:	8809883a 	mov	r4,r17
    8244:	000bcd80 	call	bcd8 <_isatty_r>
    8248:	10004c26 	beq	r2,zero,837c <__smakebuf_r+0x1a8>
    824c:	8080030b 	ldhu	r2,12(r16)
    8250:	80c010c4 	addi	r3,r16,67
    8254:	80c00015 	stw	r3,0(r16)
    8258:	10800054 	ori	r2,r2,1
    825c:	8080030d 	sth	r2,12(r16)
    8260:	00800044 	movi	r2,1
    8264:	80c00415 	stw	r3,16(r16)
    8268:	80800515 	stw	r2,20(r16)
    826c:	04810004 	movi	r18,1024
    8270:	00000706 	br	8290 <__smakebuf_r+0xbc>
    8274:	8080030b 	ldhu	r2,12(r16)
    8278:	10c0200c 	andi	r3,r2,128
    827c:	18001f1e 	bne	r3,zero,82fc <__smakebuf_r+0x128>
    8280:	04810004 	movi	r18,1024
    8284:	10820014 	ori	r2,r2,2048
    8288:	8080030d 	sth	r2,12(r16)
    828c:	0027883a 	mov	r19,zero
    8290:	900b883a 	mov	r5,r18
    8294:	8809883a 	mov	r4,r17
    8298:	00028240 	call	2824 <_malloc_r>
    829c:	10002c26 	beq	r2,zero,8350 <__smakebuf_r+0x17c>
    82a0:	80c0030b 	ldhu	r3,12(r16)
    82a4:	01000034 	movhi	r4,0
    82a8:	211cb304 	addi	r4,r4,29388
    82ac:	89000f15 	stw	r4,60(r17)
    82b0:	18c02014 	ori	r3,r3,128
    82b4:	80c0030d 	sth	r3,12(r16)
    82b8:	80800015 	stw	r2,0(r16)
    82bc:	80800415 	stw	r2,16(r16)
    82c0:	84800515 	stw	r18,20(r16)
    82c4:	98001a1e 	bne	r19,zero,8330 <__smakebuf_r+0x15c>
    82c8:	dfc01317 	ldw	ra,76(sp)
    82cc:	dcc01217 	ldw	r19,72(sp)
    82d0:	dc801117 	ldw	r18,68(sp)
    82d4:	dc401017 	ldw	r17,64(sp)
    82d8:	dc000f17 	ldw	r16,60(sp)
    82dc:	dec01404 	addi	sp,sp,80
    82e0:	f800283a 	ret
    82e4:	288010c4 	addi	r2,r5,67
    82e8:	28800015 	stw	r2,0(r5)
    82ec:	28800415 	stw	r2,16(r5)
    82f0:	00800044 	movi	r2,1
    82f4:	28800515 	stw	r2,20(r5)
    82f8:	f800283a 	ret
    82fc:	04801004 	movi	r18,64
    8300:	003fe006 	br	8284 <__alt_exception_stack_pointer+0xf8008284>
    8304:	81000a17 	ldw	r4,40(r16)
    8308:	00c00074 	movhi	r3,1
    830c:	18e7ea04 	addi	r3,r3,-24664
    8310:	20ffc51e 	bne	r4,r3,8228 <__alt_exception_stack_pointer+0xf8008228>
    8314:	8080030b 	ldhu	r2,12(r16)
    8318:	04810004 	movi	r18,1024
    831c:	84801315 	stw	r18,76(r16)
    8320:	1484b03a 	or	r2,r2,r18
    8324:	8080030d 	sth	r2,12(r16)
    8328:	0027883a 	mov	r19,zero
    832c:	003fd806 	br	8290 <__alt_exception_stack_pointer+0xf8008290>
    8330:	8140038f 	ldh	r5,14(r16)
    8334:	8809883a 	mov	r4,r17
    8338:	000bcd80 	call	bcd8 <_isatty_r>
    833c:	103fe226 	beq	r2,zero,82c8 <__alt_exception_stack_pointer+0xf80082c8>
    8340:	8080030b 	ldhu	r2,12(r16)
    8344:	10800054 	ori	r2,r2,1
    8348:	8080030d 	sth	r2,12(r16)
    834c:	003fde06 	br	82c8 <__alt_exception_stack_pointer+0xf80082c8>
    8350:	8080030b 	ldhu	r2,12(r16)
    8354:	10c0800c 	andi	r3,r2,512
    8358:	183fdb1e 	bne	r3,zero,82c8 <__alt_exception_stack_pointer+0xf80082c8>
    835c:	10800094 	ori	r2,r2,2
    8360:	80c010c4 	addi	r3,r16,67
    8364:	8080030d 	sth	r2,12(r16)
    8368:	00800044 	movi	r2,1
    836c:	80c00015 	stw	r3,0(r16)
    8370:	80c00415 	stw	r3,16(r16)
    8374:	80800515 	stw	r2,20(r16)
    8378:	003fd306 	br	82c8 <__alt_exception_stack_pointer+0xf80082c8>
    837c:	04810004 	movi	r18,1024
    8380:	003fc306 	br	8290 <__alt_exception_stack_pointer+0xf8008290>
    8384:	0027883a 	mov	r19,zero
    8388:	04810004 	movi	r18,1024
    838c:	003fc006 	br	8290 <__alt_exception_stack_pointer+0xf8008290>

00008390 <memchr>:
    8390:	208000cc 	andi	r2,r4,3
    8394:	280f883a 	mov	r7,r5
    8398:	10003426 	beq	r2,zero,846c <memchr+0xdc>
    839c:	30bfffc4 	addi	r2,r6,-1
    83a0:	30001a26 	beq	r6,zero,840c <memchr+0x7c>
    83a4:	20c00003 	ldbu	r3,0(r4)
    83a8:	29803fcc 	andi	r6,r5,255
    83ac:	30c0051e 	bne	r6,r3,83c4 <memchr+0x34>
    83b0:	00001806 	br	8414 <memchr+0x84>
    83b4:	10001526 	beq	r2,zero,840c <memchr+0x7c>
    83b8:	20c00003 	ldbu	r3,0(r4)
    83bc:	10bfffc4 	addi	r2,r2,-1
    83c0:	30c01426 	beq	r6,r3,8414 <memchr+0x84>
    83c4:	21000044 	addi	r4,r4,1
    83c8:	20c000cc 	andi	r3,r4,3
    83cc:	183ff91e 	bne	r3,zero,83b4 <__alt_exception_stack_pointer+0xf80083b4>
    83d0:	020000c4 	movi	r8,3
    83d4:	40801136 	bltu	r8,r2,841c <memchr+0x8c>
    83d8:	10000c26 	beq	r2,zero,840c <memchr+0x7c>
    83dc:	20c00003 	ldbu	r3,0(r4)
    83e0:	29403fcc 	andi	r5,r5,255
    83e4:	28c00b26 	beq	r5,r3,8414 <memchr+0x84>
    83e8:	20c00044 	addi	r3,r4,1
    83ec:	39803fcc 	andi	r6,r7,255
    83f0:	2089883a 	add	r4,r4,r2
    83f4:	00000306 	br	8404 <memchr+0x74>
    83f8:	18c00044 	addi	r3,r3,1
    83fc:	197fffc3 	ldbu	r5,-1(r3)
    8400:	31400526 	beq	r6,r5,8418 <memchr+0x88>
    8404:	1805883a 	mov	r2,r3
    8408:	20fffb1e 	bne	r4,r3,83f8 <__alt_exception_stack_pointer+0xf80083f8>
    840c:	0005883a 	mov	r2,zero
    8410:	f800283a 	ret
    8414:	2005883a 	mov	r2,r4
    8418:	f800283a 	ret
    841c:	28c03fcc 	andi	r3,r5,255
    8420:	1812923a 	slli	r9,r3,8
    8424:	02ffbff4 	movhi	r11,65279
    8428:	02a02074 	movhi	r10,32897
    842c:	48d2b03a 	or	r9,r9,r3
    8430:	4806943a 	slli	r3,r9,16
    8434:	5affbfc4 	addi	r11,r11,-257
    8438:	52a02004 	addi	r10,r10,-32640
    843c:	48d2b03a 	or	r9,r9,r3
    8440:	20c00017 	ldw	r3,0(r4)
    8444:	48c6f03a 	xor	r3,r9,r3
    8448:	1acd883a 	add	r6,r3,r11
    844c:	00c6303a 	nor	r3,zero,r3
    8450:	30c6703a 	and	r3,r6,r3
    8454:	1a86703a 	and	r3,r3,r10
    8458:	183fe01e 	bne	r3,zero,83dc <__alt_exception_stack_pointer+0xf80083dc>
    845c:	10bfff04 	addi	r2,r2,-4
    8460:	21000104 	addi	r4,r4,4
    8464:	40bff636 	bltu	r8,r2,8440 <__alt_exception_stack_pointer+0xf8008440>
    8468:	003fdb06 	br	83d8 <__alt_exception_stack_pointer+0xf80083d8>
    846c:	3005883a 	mov	r2,r6
    8470:	003fd706 	br	83d0 <__alt_exception_stack_pointer+0xf80083d0>

00008474 <memcpy>:
    8474:	defffd04 	addi	sp,sp,-12
    8478:	dfc00215 	stw	ra,8(sp)
    847c:	dc400115 	stw	r17,4(sp)
    8480:	dc000015 	stw	r16,0(sp)
    8484:	00c003c4 	movi	r3,15
    8488:	2005883a 	mov	r2,r4
    848c:	1980452e 	bgeu	r3,r6,85a4 <memcpy+0x130>
    8490:	2906b03a 	or	r3,r5,r4
    8494:	18c000cc 	andi	r3,r3,3
    8498:	1800441e 	bne	r3,zero,85ac <memcpy+0x138>
    849c:	347ffc04 	addi	r17,r6,-16
    84a0:	8822d13a 	srli	r17,r17,4
    84a4:	28c00104 	addi	r3,r5,4
    84a8:	23400104 	addi	r13,r4,4
    84ac:	8820913a 	slli	r16,r17,4
    84b0:	2b000204 	addi	r12,r5,8
    84b4:	22c00204 	addi	r11,r4,8
    84b8:	84000504 	addi	r16,r16,20
    84bc:	2a800304 	addi	r10,r5,12
    84c0:	22400304 	addi	r9,r4,12
    84c4:	2c21883a 	add	r16,r5,r16
    84c8:	2811883a 	mov	r8,r5
    84cc:	200f883a 	mov	r7,r4
    84d0:	41000017 	ldw	r4,0(r8)
    84d4:	1fc00017 	ldw	ra,0(r3)
    84d8:	63c00017 	ldw	r15,0(r12)
    84dc:	39000015 	stw	r4,0(r7)
    84e0:	53800017 	ldw	r14,0(r10)
    84e4:	6fc00015 	stw	ra,0(r13)
    84e8:	5bc00015 	stw	r15,0(r11)
    84ec:	4b800015 	stw	r14,0(r9)
    84f0:	18c00404 	addi	r3,r3,16
    84f4:	39c00404 	addi	r7,r7,16
    84f8:	42000404 	addi	r8,r8,16
    84fc:	6b400404 	addi	r13,r13,16
    8500:	63000404 	addi	r12,r12,16
    8504:	5ac00404 	addi	r11,r11,16
    8508:	52800404 	addi	r10,r10,16
    850c:	4a400404 	addi	r9,r9,16
    8510:	1c3fef1e 	bne	r3,r16,84d0 <__alt_exception_stack_pointer+0xf80084d0>
    8514:	89c00044 	addi	r7,r17,1
    8518:	380e913a 	slli	r7,r7,4
    851c:	310003cc 	andi	r4,r6,15
    8520:	02c000c4 	movi	r11,3
    8524:	11c7883a 	add	r3,r2,r7
    8528:	29cb883a 	add	r5,r5,r7
    852c:	5900212e 	bgeu	r11,r4,85b4 <memcpy+0x140>
    8530:	1813883a 	mov	r9,r3
    8534:	2811883a 	mov	r8,r5
    8538:	200f883a 	mov	r7,r4
    853c:	42800017 	ldw	r10,0(r8)
    8540:	4a400104 	addi	r9,r9,4
    8544:	39ffff04 	addi	r7,r7,-4
    8548:	4abfff15 	stw	r10,-4(r9)
    854c:	42000104 	addi	r8,r8,4
    8550:	59fffa36 	bltu	r11,r7,853c <__alt_exception_stack_pointer+0xf800853c>
    8554:	213fff04 	addi	r4,r4,-4
    8558:	2008d0ba 	srli	r4,r4,2
    855c:	318000cc 	andi	r6,r6,3
    8560:	21000044 	addi	r4,r4,1
    8564:	2109883a 	add	r4,r4,r4
    8568:	2109883a 	add	r4,r4,r4
    856c:	1907883a 	add	r3,r3,r4
    8570:	290b883a 	add	r5,r5,r4
    8574:	30000626 	beq	r6,zero,8590 <memcpy+0x11c>
    8578:	198d883a 	add	r6,r3,r6
    857c:	29c00003 	ldbu	r7,0(r5)
    8580:	18c00044 	addi	r3,r3,1
    8584:	29400044 	addi	r5,r5,1
    8588:	19ffffc5 	stb	r7,-1(r3)
    858c:	19bffb1e 	bne	r3,r6,857c <__alt_exception_stack_pointer+0xf800857c>
    8590:	dfc00217 	ldw	ra,8(sp)
    8594:	dc400117 	ldw	r17,4(sp)
    8598:	dc000017 	ldw	r16,0(sp)
    859c:	dec00304 	addi	sp,sp,12
    85a0:	f800283a 	ret
    85a4:	2007883a 	mov	r3,r4
    85a8:	003ff206 	br	8574 <__alt_exception_stack_pointer+0xf8008574>
    85ac:	2007883a 	mov	r3,r4
    85b0:	003ff106 	br	8578 <__alt_exception_stack_pointer+0xf8008578>
    85b4:	200d883a 	mov	r6,r4
    85b8:	003fee06 	br	8574 <__alt_exception_stack_pointer+0xf8008574>

000085bc <memmove>:
    85bc:	2005883a 	mov	r2,r4
    85c0:	29000b2e 	bgeu	r5,r4,85f0 <memmove+0x34>
    85c4:	298f883a 	add	r7,r5,r6
    85c8:	21c0092e 	bgeu	r4,r7,85f0 <memmove+0x34>
    85cc:	2187883a 	add	r3,r4,r6
    85d0:	198bc83a 	sub	r5,r3,r6
    85d4:	30004826 	beq	r6,zero,86f8 <memmove+0x13c>
    85d8:	39ffffc4 	addi	r7,r7,-1
    85dc:	39000003 	ldbu	r4,0(r7)
    85e0:	18ffffc4 	addi	r3,r3,-1
    85e4:	19000005 	stb	r4,0(r3)
    85e8:	28fffb1e 	bne	r5,r3,85d8 <__alt_exception_stack_pointer+0xf80085d8>
    85ec:	f800283a 	ret
    85f0:	00c003c4 	movi	r3,15
    85f4:	1980412e 	bgeu	r3,r6,86fc <memmove+0x140>
    85f8:	2886b03a 	or	r3,r5,r2
    85fc:	18c000cc 	andi	r3,r3,3
    8600:	1800401e 	bne	r3,zero,8704 <memmove+0x148>
    8604:	33fffc04 	addi	r15,r6,-16
    8608:	781ed13a 	srli	r15,r15,4
    860c:	28c00104 	addi	r3,r5,4
    8610:	13400104 	addi	r13,r2,4
    8614:	781c913a 	slli	r14,r15,4
    8618:	2b000204 	addi	r12,r5,8
    861c:	12c00204 	addi	r11,r2,8
    8620:	73800504 	addi	r14,r14,20
    8624:	2a800304 	addi	r10,r5,12
    8628:	12400304 	addi	r9,r2,12
    862c:	2b9d883a 	add	r14,r5,r14
    8630:	2811883a 	mov	r8,r5
    8634:	100f883a 	mov	r7,r2
    8638:	41000017 	ldw	r4,0(r8)
    863c:	39c00404 	addi	r7,r7,16
    8640:	18c00404 	addi	r3,r3,16
    8644:	393ffc15 	stw	r4,-16(r7)
    8648:	193ffc17 	ldw	r4,-16(r3)
    864c:	6b400404 	addi	r13,r13,16
    8650:	5ac00404 	addi	r11,r11,16
    8654:	693ffc15 	stw	r4,-16(r13)
    8658:	61000017 	ldw	r4,0(r12)
    865c:	4a400404 	addi	r9,r9,16
    8660:	42000404 	addi	r8,r8,16
    8664:	593ffc15 	stw	r4,-16(r11)
    8668:	51000017 	ldw	r4,0(r10)
    866c:	63000404 	addi	r12,r12,16
    8670:	52800404 	addi	r10,r10,16
    8674:	493ffc15 	stw	r4,-16(r9)
    8678:	1bbfef1e 	bne	r3,r14,8638 <__alt_exception_stack_pointer+0xf8008638>
    867c:	79000044 	addi	r4,r15,1
    8680:	2008913a 	slli	r4,r4,4
    8684:	328003cc 	andi	r10,r6,15
    8688:	02c000c4 	movi	r11,3
    868c:	1107883a 	add	r3,r2,r4
    8690:	290b883a 	add	r5,r5,r4
    8694:	5a801e2e 	bgeu	r11,r10,8710 <memmove+0x154>
    8698:	1813883a 	mov	r9,r3
    869c:	2811883a 	mov	r8,r5
    86a0:	500f883a 	mov	r7,r10
    86a4:	41000017 	ldw	r4,0(r8)
    86a8:	4a400104 	addi	r9,r9,4
    86ac:	39ffff04 	addi	r7,r7,-4
    86b0:	493fff15 	stw	r4,-4(r9)
    86b4:	42000104 	addi	r8,r8,4
    86b8:	59fffa36 	bltu	r11,r7,86a4 <__alt_exception_stack_pointer+0xf80086a4>
    86bc:	513fff04 	addi	r4,r10,-4
    86c0:	2008d0ba 	srli	r4,r4,2
    86c4:	318000cc 	andi	r6,r6,3
    86c8:	21000044 	addi	r4,r4,1
    86cc:	2109883a 	add	r4,r4,r4
    86d0:	2109883a 	add	r4,r4,r4
    86d4:	1907883a 	add	r3,r3,r4
    86d8:	290b883a 	add	r5,r5,r4
    86dc:	30000b26 	beq	r6,zero,870c <memmove+0x150>
    86e0:	198d883a 	add	r6,r3,r6
    86e4:	29c00003 	ldbu	r7,0(r5)
    86e8:	18c00044 	addi	r3,r3,1
    86ec:	29400044 	addi	r5,r5,1
    86f0:	19ffffc5 	stb	r7,-1(r3)
    86f4:	19bffb1e 	bne	r3,r6,86e4 <__alt_exception_stack_pointer+0xf80086e4>
    86f8:	f800283a 	ret
    86fc:	1007883a 	mov	r3,r2
    8700:	003ff606 	br	86dc <__alt_exception_stack_pointer+0xf80086dc>
    8704:	1007883a 	mov	r3,r2
    8708:	003ff506 	br	86e0 <__alt_exception_stack_pointer+0xf80086e0>
    870c:	f800283a 	ret
    8710:	500d883a 	mov	r6,r10
    8714:	003ff106 	br	86dc <__alt_exception_stack_pointer+0xf80086dc>

00008718 <memset>:
    8718:	20c000cc 	andi	r3,r4,3
    871c:	2005883a 	mov	r2,r4
    8720:	18004426 	beq	r3,zero,8834 <memset+0x11c>
    8724:	31ffffc4 	addi	r7,r6,-1
    8728:	30004026 	beq	r6,zero,882c <memset+0x114>
    872c:	2813883a 	mov	r9,r5
    8730:	200d883a 	mov	r6,r4
    8734:	2007883a 	mov	r3,r4
    8738:	00000406 	br	874c <memset+0x34>
    873c:	3a3fffc4 	addi	r8,r7,-1
    8740:	31800044 	addi	r6,r6,1
    8744:	38003926 	beq	r7,zero,882c <memset+0x114>
    8748:	400f883a 	mov	r7,r8
    874c:	18c00044 	addi	r3,r3,1
    8750:	32400005 	stb	r9,0(r6)
    8754:	1a0000cc 	andi	r8,r3,3
    8758:	403ff81e 	bne	r8,zero,873c <__alt_exception_stack_pointer+0xf800873c>
    875c:	010000c4 	movi	r4,3
    8760:	21c02d2e 	bgeu	r4,r7,8818 <memset+0x100>
    8764:	29003fcc 	andi	r4,r5,255
    8768:	200c923a 	slli	r6,r4,8
    876c:	3108b03a 	or	r4,r6,r4
    8770:	200c943a 	slli	r6,r4,16
    8774:	218cb03a 	or	r6,r4,r6
    8778:	010003c4 	movi	r4,15
    877c:	21c0182e 	bgeu	r4,r7,87e0 <memset+0xc8>
    8780:	3b3ffc04 	addi	r12,r7,-16
    8784:	6018d13a 	srli	r12,r12,4
    8788:	1a000104 	addi	r8,r3,4
    878c:	1ac00204 	addi	r11,r3,8
    8790:	6008913a 	slli	r4,r12,4
    8794:	1a800304 	addi	r10,r3,12
    8798:	1813883a 	mov	r9,r3
    879c:	21000504 	addi	r4,r4,20
    87a0:	1909883a 	add	r4,r3,r4
    87a4:	49800015 	stw	r6,0(r9)
    87a8:	41800015 	stw	r6,0(r8)
    87ac:	59800015 	stw	r6,0(r11)
    87b0:	51800015 	stw	r6,0(r10)
    87b4:	42000404 	addi	r8,r8,16
    87b8:	4a400404 	addi	r9,r9,16
    87bc:	5ac00404 	addi	r11,r11,16
    87c0:	52800404 	addi	r10,r10,16
    87c4:	413ff71e 	bne	r8,r4,87a4 <__alt_exception_stack_pointer+0xf80087a4>
    87c8:	63000044 	addi	r12,r12,1
    87cc:	6018913a 	slli	r12,r12,4
    87d0:	39c003cc 	andi	r7,r7,15
    87d4:	010000c4 	movi	r4,3
    87d8:	1b07883a 	add	r3,r3,r12
    87dc:	21c00e2e 	bgeu	r4,r7,8818 <memset+0x100>
    87e0:	1813883a 	mov	r9,r3
    87e4:	3811883a 	mov	r8,r7
    87e8:	010000c4 	movi	r4,3
    87ec:	49800015 	stw	r6,0(r9)
    87f0:	423fff04 	addi	r8,r8,-4
    87f4:	4a400104 	addi	r9,r9,4
    87f8:	223ffc36 	bltu	r4,r8,87ec <__alt_exception_stack_pointer+0xf80087ec>
    87fc:	393fff04 	addi	r4,r7,-4
    8800:	2008d0ba 	srli	r4,r4,2
    8804:	39c000cc 	andi	r7,r7,3
    8808:	21000044 	addi	r4,r4,1
    880c:	2109883a 	add	r4,r4,r4
    8810:	2109883a 	add	r4,r4,r4
    8814:	1907883a 	add	r3,r3,r4
    8818:	38000526 	beq	r7,zero,8830 <memset+0x118>
    881c:	19cf883a 	add	r7,r3,r7
    8820:	19400005 	stb	r5,0(r3)
    8824:	18c00044 	addi	r3,r3,1
    8828:	38fffd1e 	bne	r7,r3,8820 <__alt_exception_stack_pointer+0xf8008820>
    882c:	f800283a 	ret
    8830:	f800283a 	ret
    8834:	2007883a 	mov	r3,r4
    8838:	300f883a 	mov	r7,r6
    883c:	003fc706 	br	875c <__alt_exception_stack_pointer+0xf800875c>

00008840 <_Balloc>:
    8840:	20801317 	ldw	r2,76(r4)
    8844:	defffc04 	addi	sp,sp,-16
    8848:	dc400115 	stw	r17,4(sp)
    884c:	dc000015 	stw	r16,0(sp)
    8850:	dfc00315 	stw	ra,12(sp)
    8854:	dc800215 	stw	r18,8(sp)
    8858:	2023883a 	mov	r17,r4
    885c:	2821883a 	mov	r16,r5
    8860:	10000f26 	beq	r2,zero,88a0 <_Balloc+0x60>
    8864:	8407883a 	add	r3,r16,r16
    8868:	18c7883a 	add	r3,r3,r3
    886c:	10c7883a 	add	r3,r2,r3
    8870:	18800017 	ldw	r2,0(r3)
    8874:	10001126 	beq	r2,zero,88bc <_Balloc+0x7c>
    8878:	11000017 	ldw	r4,0(r2)
    887c:	19000015 	stw	r4,0(r3)
    8880:	10000415 	stw	zero,16(r2)
    8884:	10000315 	stw	zero,12(r2)
    8888:	dfc00317 	ldw	ra,12(sp)
    888c:	dc800217 	ldw	r18,8(sp)
    8890:	dc400117 	ldw	r17,4(sp)
    8894:	dc000017 	ldw	r16,0(sp)
    8898:	dec00404 	addi	sp,sp,16
    889c:	f800283a 	ret
    88a0:	01800844 	movi	r6,33
    88a4:	01400104 	movi	r5,4
    88a8:	000b8940 	call	b894 <_calloc_r>
    88ac:	88801315 	stw	r2,76(r17)
    88b0:	103fec1e 	bne	r2,zero,8864 <__alt_exception_stack_pointer+0xf8008864>
    88b4:	0005883a 	mov	r2,zero
    88b8:	003ff306 	br	8888 <__alt_exception_stack_pointer+0xf8008888>
    88bc:	01400044 	movi	r5,1
    88c0:	2c24983a 	sll	r18,r5,r16
    88c4:	8809883a 	mov	r4,r17
    88c8:	91800144 	addi	r6,r18,5
    88cc:	318d883a 	add	r6,r6,r6
    88d0:	318d883a 	add	r6,r6,r6
    88d4:	000b8940 	call	b894 <_calloc_r>
    88d8:	103ff626 	beq	r2,zero,88b4 <__alt_exception_stack_pointer+0xf80088b4>
    88dc:	14000115 	stw	r16,4(r2)
    88e0:	14800215 	stw	r18,8(r2)
    88e4:	003fe606 	br	8880 <__alt_exception_stack_pointer+0xf8008880>

000088e8 <_Bfree>:
    88e8:	28000826 	beq	r5,zero,890c <_Bfree+0x24>
    88ec:	28c00117 	ldw	r3,4(r5)
    88f0:	20801317 	ldw	r2,76(r4)
    88f4:	18c7883a 	add	r3,r3,r3
    88f8:	18c7883a 	add	r3,r3,r3
    88fc:	10c5883a 	add	r2,r2,r3
    8900:	10c00017 	ldw	r3,0(r2)
    8904:	28c00015 	stw	r3,0(r5)
    8908:	11400015 	stw	r5,0(r2)
    890c:	f800283a 	ret

00008910 <__multadd>:
    8910:	defff704 	addi	sp,sp,-36
    8914:	dc800215 	stw	r18,8(sp)
    8918:	2c800417 	ldw	r18,16(r5)
    891c:	dd800615 	stw	r22,24(sp)
    8920:	dd400515 	stw	r21,20(sp)
    8924:	dd000415 	stw	r20,16(sp)
    8928:	dcc00315 	stw	r19,12(sp)
    892c:	dc400115 	stw	r17,4(sp)
    8930:	dc000015 	stw	r16,0(sp)
    8934:	dfc00815 	stw	ra,32(sp)
    8938:	ddc00715 	stw	r23,28(sp)
    893c:	2827883a 	mov	r19,r5
    8940:	2029883a 	mov	r20,r4
    8944:	3023883a 	mov	r17,r6
    8948:	3821883a 	mov	r16,r7
    894c:	2d400504 	addi	r21,r5,20
    8950:	002d883a 	mov	r22,zero
    8954:	adc00017 	ldw	r23,0(r21)
    8958:	880b883a 	mov	r5,r17
    895c:	ad400104 	addi	r21,r21,4
    8960:	b93fffcc 	andi	r4,r23,65535
    8964:	000cea00 	call	cea0 <__mulsi3>
    8968:	b808d43a 	srli	r4,r23,16
    896c:	880b883a 	mov	r5,r17
    8970:	1421883a 	add	r16,r2,r16
    8974:	000cea00 	call	cea0 <__mulsi3>
    8978:	800ed43a 	srli	r7,r16,16
    897c:	80ffffcc 	andi	r3,r16,65535
    8980:	b5800044 	addi	r22,r22,1
    8984:	11c5883a 	add	r2,r2,r7
    8988:	100e943a 	slli	r7,r2,16
    898c:	1020d43a 	srli	r16,r2,16
    8990:	38c7883a 	add	r3,r7,r3
    8994:	a8ffff15 	stw	r3,-4(r21)
    8998:	b4bfee16 	blt	r22,r18,8954 <__alt_exception_stack_pointer+0xf8008954>
    899c:	80000926 	beq	r16,zero,89c4 <__multadd+0xb4>
    89a0:	98800217 	ldw	r2,8(r19)
    89a4:	9080130e 	bge	r18,r2,89f4 <__multadd+0xe4>
    89a8:	90800144 	addi	r2,r18,5
    89ac:	1085883a 	add	r2,r2,r2
    89b0:	1085883a 	add	r2,r2,r2
    89b4:	9885883a 	add	r2,r19,r2
    89b8:	14000015 	stw	r16,0(r2)
    89bc:	94800044 	addi	r18,r18,1
    89c0:	9c800415 	stw	r18,16(r19)
    89c4:	9805883a 	mov	r2,r19
    89c8:	dfc00817 	ldw	ra,32(sp)
    89cc:	ddc00717 	ldw	r23,28(sp)
    89d0:	dd800617 	ldw	r22,24(sp)
    89d4:	dd400517 	ldw	r21,20(sp)
    89d8:	dd000417 	ldw	r20,16(sp)
    89dc:	dcc00317 	ldw	r19,12(sp)
    89e0:	dc800217 	ldw	r18,8(sp)
    89e4:	dc400117 	ldw	r17,4(sp)
    89e8:	dc000017 	ldw	r16,0(sp)
    89ec:	dec00904 	addi	sp,sp,36
    89f0:	f800283a 	ret
    89f4:	99400117 	ldw	r5,4(r19)
    89f8:	a009883a 	mov	r4,r20
    89fc:	29400044 	addi	r5,r5,1
    8a00:	00088400 	call	8840 <_Balloc>
    8a04:	99800417 	ldw	r6,16(r19)
    8a08:	99400304 	addi	r5,r19,12
    8a0c:	11000304 	addi	r4,r2,12
    8a10:	31800084 	addi	r6,r6,2
    8a14:	318d883a 	add	r6,r6,r6
    8a18:	318d883a 	add	r6,r6,r6
    8a1c:	1023883a 	mov	r17,r2
    8a20:	00084740 	call	8474 <memcpy>
    8a24:	98000a26 	beq	r19,zero,8a50 <__multadd+0x140>
    8a28:	98c00117 	ldw	r3,4(r19)
    8a2c:	a0801317 	ldw	r2,76(r20)
    8a30:	18c7883a 	add	r3,r3,r3
    8a34:	18c7883a 	add	r3,r3,r3
    8a38:	10c5883a 	add	r2,r2,r3
    8a3c:	10c00017 	ldw	r3,0(r2)
    8a40:	98c00015 	stw	r3,0(r19)
    8a44:	14c00015 	stw	r19,0(r2)
    8a48:	8827883a 	mov	r19,r17
    8a4c:	003fd606 	br	89a8 <__alt_exception_stack_pointer+0xf80089a8>
    8a50:	8827883a 	mov	r19,r17
    8a54:	003fd406 	br	89a8 <__alt_exception_stack_pointer+0xf80089a8>

00008a58 <__s2b>:
    8a58:	defff904 	addi	sp,sp,-28
    8a5c:	dc400115 	stw	r17,4(sp)
    8a60:	dc000015 	stw	r16,0(sp)
    8a64:	2023883a 	mov	r17,r4
    8a68:	2821883a 	mov	r16,r5
    8a6c:	39000204 	addi	r4,r7,8
    8a70:	01400244 	movi	r5,9
    8a74:	dcc00315 	stw	r19,12(sp)
    8a78:	dc800215 	stw	r18,8(sp)
    8a7c:	dfc00615 	stw	ra,24(sp)
    8a80:	dd400515 	stw	r21,20(sp)
    8a84:	dd000415 	stw	r20,16(sp)
    8a88:	3825883a 	mov	r18,r7
    8a8c:	3027883a 	mov	r19,r6
    8a90:	000ccec0 	call	ccec <__divsi3>
    8a94:	00c00044 	movi	r3,1
    8a98:	000b883a 	mov	r5,zero
    8a9c:	1880030e 	bge	r3,r2,8aac <__s2b+0x54>
    8aa0:	18c7883a 	add	r3,r3,r3
    8aa4:	29400044 	addi	r5,r5,1
    8aa8:	18bffd16 	blt	r3,r2,8aa0 <__alt_exception_stack_pointer+0xf8008aa0>
    8aac:	8809883a 	mov	r4,r17
    8ab0:	00088400 	call	8840 <_Balloc>
    8ab4:	d8c00717 	ldw	r3,28(sp)
    8ab8:	10c00515 	stw	r3,20(r2)
    8abc:	00c00044 	movi	r3,1
    8ac0:	10c00415 	stw	r3,16(r2)
    8ac4:	00c00244 	movi	r3,9
    8ac8:	1cc0210e 	bge	r3,r19,8b50 <__s2b+0xf8>
    8acc:	80eb883a 	add	r21,r16,r3
    8ad0:	a829883a 	mov	r20,r21
    8ad4:	84e1883a 	add	r16,r16,r19
    8ad8:	a1c00007 	ldb	r7,0(r20)
    8adc:	01800284 	movi	r6,10
    8ae0:	a5000044 	addi	r20,r20,1
    8ae4:	100b883a 	mov	r5,r2
    8ae8:	39fff404 	addi	r7,r7,-48
    8aec:	8809883a 	mov	r4,r17
    8af0:	00089100 	call	8910 <__multadd>
    8af4:	a43ff81e 	bne	r20,r16,8ad8 <__alt_exception_stack_pointer+0xf8008ad8>
    8af8:	ace1883a 	add	r16,r21,r19
    8afc:	843ffe04 	addi	r16,r16,-8
    8b00:	9c800a0e 	bge	r19,r18,8b2c <__s2b+0xd4>
    8b04:	94e5c83a 	sub	r18,r18,r19
    8b08:	84a5883a 	add	r18,r16,r18
    8b0c:	81c00007 	ldb	r7,0(r16)
    8b10:	01800284 	movi	r6,10
    8b14:	84000044 	addi	r16,r16,1
    8b18:	100b883a 	mov	r5,r2
    8b1c:	39fff404 	addi	r7,r7,-48
    8b20:	8809883a 	mov	r4,r17
    8b24:	00089100 	call	8910 <__multadd>
    8b28:	84bff81e 	bne	r16,r18,8b0c <__alt_exception_stack_pointer+0xf8008b0c>
    8b2c:	dfc00617 	ldw	ra,24(sp)
    8b30:	dd400517 	ldw	r21,20(sp)
    8b34:	dd000417 	ldw	r20,16(sp)
    8b38:	dcc00317 	ldw	r19,12(sp)
    8b3c:	dc800217 	ldw	r18,8(sp)
    8b40:	dc400117 	ldw	r17,4(sp)
    8b44:	dc000017 	ldw	r16,0(sp)
    8b48:	dec00704 	addi	sp,sp,28
    8b4c:	f800283a 	ret
    8b50:	84000284 	addi	r16,r16,10
    8b54:	1827883a 	mov	r19,r3
    8b58:	003fe906 	br	8b00 <__alt_exception_stack_pointer+0xf8008b00>

00008b5c <__hi0bits>:
    8b5c:	20bfffec 	andhi	r2,r4,65535
    8b60:	1000141e 	bne	r2,zero,8bb4 <__hi0bits+0x58>
    8b64:	2008943a 	slli	r4,r4,16
    8b68:	00800404 	movi	r2,16
    8b6c:	20ffc02c 	andhi	r3,r4,65280
    8b70:	1800021e 	bne	r3,zero,8b7c <__hi0bits+0x20>
    8b74:	2008923a 	slli	r4,r4,8
    8b78:	10800204 	addi	r2,r2,8
    8b7c:	20fc002c 	andhi	r3,r4,61440
    8b80:	1800021e 	bne	r3,zero,8b8c <__hi0bits+0x30>
    8b84:	2008913a 	slli	r4,r4,4
    8b88:	10800104 	addi	r2,r2,4
    8b8c:	20f0002c 	andhi	r3,r4,49152
    8b90:	1800031e 	bne	r3,zero,8ba0 <__hi0bits+0x44>
    8b94:	2109883a 	add	r4,r4,r4
    8b98:	10800084 	addi	r2,r2,2
    8b9c:	2109883a 	add	r4,r4,r4
    8ba0:	20000316 	blt	r4,zero,8bb0 <__hi0bits+0x54>
    8ba4:	2110002c 	andhi	r4,r4,16384
    8ba8:	2000041e 	bne	r4,zero,8bbc <__hi0bits+0x60>
    8bac:	00800804 	movi	r2,32
    8bb0:	f800283a 	ret
    8bb4:	0005883a 	mov	r2,zero
    8bb8:	003fec06 	br	8b6c <__alt_exception_stack_pointer+0xf8008b6c>
    8bbc:	10800044 	addi	r2,r2,1
    8bc0:	f800283a 	ret

00008bc4 <__lo0bits>:
    8bc4:	20c00017 	ldw	r3,0(r4)
    8bc8:	188001cc 	andi	r2,r3,7
    8bcc:	10000826 	beq	r2,zero,8bf0 <__lo0bits+0x2c>
    8bd0:	1880004c 	andi	r2,r3,1
    8bd4:	1000211e 	bne	r2,zero,8c5c <__lo0bits+0x98>
    8bd8:	1880008c 	andi	r2,r3,2
    8bdc:	1000211e 	bne	r2,zero,8c64 <__lo0bits+0xa0>
    8be0:	1806d0ba 	srli	r3,r3,2
    8be4:	00800084 	movi	r2,2
    8be8:	20c00015 	stw	r3,0(r4)
    8bec:	f800283a 	ret
    8bf0:	18bfffcc 	andi	r2,r3,65535
    8bf4:	10001326 	beq	r2,zero,8c44 <__lo0bits+0x80>
    8bf8:	0005883a 	mov	r2,zero
    8bfc:	19403fcc 	andi	r5,r3,255
    8c00:	2800021e 	bne	r5,zero,8c0c <__lo0bits+0x48>
    8c04:	1806d23a 	srli	r3,r3,8
    8c08:	10800204 	addi	r2,r2,8
    8c0c:	194003cc 	andi	r5,r3,15
    8c10:	2800021e 	bne	r5,zero,8c1c <__lo0bits+0x58>
    8c14:	1806d13a 	srli	r3,r3,4
    8c18:	10800104 	addi	r2,r2,4
    8c1c:	194000cc 	andi	r5,r3,3
    8c20:	2800021e 	bne	r5,zero,8c2c <__lo0bits+0x68>
    8c24:	1806d0ba 	srli	r3,r3,2
    8c28:	10800084 	addi	r2,r2,2
    8c2c:	1940004c 	andi	r5,r3,1
    8c30:	2800081e 	bne	r5,zero,8c54 <__lo0bits+0x90>
    8c34:	1806d07a 	srli	r3,r3,1
    8c38:	1800051e 	bne	r3,zero,8c50 <__lo0bits+0x8c>
    8c3c:	00800804 	movi	r2,32
    8c40:	f800283a 	ret
    8c44:	1806d43a 	srli	r3,r3,16
    8c48:	00800404 	movi	r2,16
    8c4c:	003feb06 	br	8bfc <__alt_exception_stack_pointer+0xf8008bfc>
    8c50:	10800044 	addi	r2,r2,1
    8c54:	20c00015 	stw	r3,0(r4)
    8c58:	f800283a 	ret
    8c5c:	0005883a 	mov	r2,zero
    8c60:	f800283a 	ret
    8c64:	1806d07a 	srli	r3,r3,1
    8c68:	00800044 	movi	r2,1
    8c6c:	20c00015 	stw	r3,0(r4)
    8c70:	f800283a 	ret

00008c74 <__i2b>:
    8c74:	defffd04 	addi	sp,sp,-12
    8c78:	dc000015 	stw	r16,0(sp)
    8c7c:	04000044 	movi	r16,1
    8c80:	dc400115 	stw	r17,4(sp)
    8c84:	2823883a 	mov	r17,r5
    8c88:	800b883a 	mov	r5,r16
    8c8c:	dfc00215 	stw	ra,8(sp)
    8c90:	00088400 	call	8840 <_Balloc>
    8c94:	14400515 	stw	r17,20(r2)
    8c98:	14000415 	stw	r16,16(r2)
    8c9c:	dfc00217 	ldw	ra,8(sp)
    8ca0:	dc400117 	ldw	r17,4(sp)
    8ca4:	dc000017 	ldw	r16,0(sp)
    8ca8:	dec00304 	addi	sp,sp,12
    8cac:	f800283a 	ret

00008cb0 <__multiply>:
    8cb0:	deffef04 	addi	sp,sp,-68
    8cb4:	dc400815 	stw	r17,32(sp)
    8cb8:	dc000715 	stw	r16,28(sp)
    8cbc:	34400417 	ldw	r17,16(r6)
    8cc0:	2c000417 	ldw	r16,16(r5)
    8cc4:	dd800d15 	stw	r22,52(sp)
    8cc8:	dc800915 	stw	r18,36(sp)
    8ccc:	dfc01015 	stw	ra,64(sp)
    8cd0:	df000f15 	stw	fp,60(sp)
    8cd4:	ddc00e15 	stw	r23,56(sp)
    8cd8:	dd400c15 	stw	r21,48(sp)
    8cdc:	dd000b15 	stw	r20,44(sp)
    8ce0:	dcc00a15 	stw	r19,40(sp)
    8ce4:	2825883a 	mov	r18,r5
    8ce8:	302d883a 	mov	r22,r6
    8cec:	8440050e 	bge	r16,r17,8d04 <__multiply+0x54>
    8cf0:	8007883a 	mov	r3,r16
    8cf4:	3025883a 	mov	r18,r6
    8cf8:	8821883a 	mov	r16,r17
    8cfc:	282d883a 	mov	r22,r5
    8d00:	1823883a 	mov	r17,r3
    8d04:	90800217 	ldw	r2,8(r18)
    8d08:	8447883a 	add	r3,r16,r17
    8d0c:	d8c00215 	stw	r3,8(sp)
    8d10:	91400117 	ldw	r5,4(r18)
    8d14:	10c0010e 	bge	r2,r3,8d1c <__multiply+0x6c>
    8d18:	29400044 	addi	r5,r5,1
    8d1c:	00088400 	call	8840 <_Balloc>
    8d20:	d8c00217 	ldw	r3,8(sp)
    8d24:	d8800615 	stw	r2,24(sp)
    8d28:	18eb883a 	add	r21,r3,r3
    8d2c:	ad6b883a 	add	r21,r21,r21
    8d30:	10c00504 	addi	r3,r2,20
    8d34:	1d6b883a 	add	r21,r3,r21
    8d38:	d8c00115 	stw	r3,4(sp)
    8d3c:	dd400315 	stw	r21,12(sp)
    8d40:	1805883a 	mov	r2,r3
    8d44:	1d40042e 	bgeu	r3,r21,8d58 <__multiply+0xa8>
    8d48:	d8c00317 	ldw	r3,12(sp)
    8d4c:	10000015 	stw	zero,0(r2)
    8d50:	10800104 	addi	r2,r2,4
    8d54:	10fffc36 	bltu	r2,r3,8d48 <__alt_exception_stack_pointer+0xf8008d48>
    8d58:	8c63883a 	add	r17,r17,r17
    8d5c:	b5800504 	addi	r22,r22,20
    8d60:	8c63883a 	add	r17,r17,r17
    8d64:	94800504 	addi	r18,r18,20
    8d68:	8421883a 	add	r16,r16,r16
    8d6c:	b463883a 	add	r17,r22,r17
    8d70:	8421883a 	add	r16,r16,r16
    8d74:	dd800015 	stw	r22,0(sp)
    8d78:	dc800415 	stw	r18,16(sp)
    8d7c:	dc400515 	stw	r17,20(sp)
    8d80:	9429883a 	add	r20,r18,r16
    8d84:	b4404f2e 	bgeu	r22,r17,8ec4 <__multiply+0x214>
    8d88:	d8c00017 	ldw	r3,0(sp)
    8d8c:	1c800017 	ldw	r18,0(r3)
    8d90:	947fffcc 	andi	r17,r18,65535
    8d94:	88001e26 	beq	r17,zero,8e10 <__multiply+0x160>
    8d98:	dd800117 	ldw	r22,4(sp)
    8d9c:	dd400417 	ldw	r21,16(sp)
    8da0:	0027883a 	mov	r19,zero
    8da4:	ac800017 	ldw	r18,0(r21)
    8da8:	b4000017 	ldw	r16,0(r22)
    8dac:	880b883a 	mov	r5,r17
    8db0:	913fffcc 	andi	r4,r18,65535
    8db4:	000cea00 	call	cea0 <__mulsi3>
    8db8:	9008d43a 	srli	r4,r18,16
    8dbc:	84bfffcc 	andi	r18,r16,65535
    8dc0:	1485883a 	add	r2,r2,r18
    8dc4:	14e5883a 	add	r18,r2,r19
    8dc8:	8020d43a 	srli	r16,r16,16
    8dcc:	9026d43a 	srli	r19,r18,16
    8dd0:	880b883a 	mov	r5,r17
    8dd4:	000cea00 	call	cea0 <__mulsi3>
    8dd8:	1405883a 	add	r2,r2,r16
    8ddc:	14e1883a 	add	r16,r2,r19
    8de0:	90ffffcc 	andi	r3,r18,65535
    8de4:	8024943a 	slli	r18,r16,16
    8de8:	ad400104 	addi	r21,r21,4
    8dec:	b005883a 	mov	r2,r22
    8df0:	90c6b03a 	or	r3,r18,r3
    8df4:	b0c00015 	stw	r3,0(r22)
    8df8:	8026d43a 	srli	r19,r16,16
    8dfc:	b5800104 	addi	r22,r22,4
    8e00:	ad3fe836 	bltu	r21,r20,8da4 <__alt_exception_stack_pointer+0xf8008da4>
    8e04:	d8c00017 	ldw	r3,0(sp)
    8e08:	14c00115 	stw	r19,4(r2)
    8e0c:	1c800017 	ldw	r18,0(r3)
    8e10:	9024d43a 	srli	r18,r18,16
    8e14:	90002226 	beq	r18,zero,8ea0 <__multiply+0x1f0>
    8e18:	d8c00117 	ldw	r3,4(sp)
    8e1c:	dd800417 	ldw	r22,16(sp)
    8e20:	002f883a 	mov	r23,zero
    8e24:	1f000017 	ldw	fp,0(r3)
    8e28:	1823883a 	mov	r17,r3
    8e2c:	182b883a 	mov	r21,r3
    8e30:	e021883a 	mov	r16,fp
    8e34:	00000106 	br	8e3c <__multiply+0x18c>
    8e38:	982b883a 	mov	r21,r19
    8e3c:	b100000b 	ldhu	r4,0(r22)
    8e40:	8020d43a 	srli	r16,r16,16
    8e44:	900b883a 	mov	r5,r18
    8e48:	000cea00 	call	cea0 <__mulsi3>
    8e4c:	1405883a 	add	r2,r2,r16
    8e50:	15ef883a 	add	r23,r2,r23
    8e54:	b804943a 	slli	r2,r23,16
    8e58:	e0ffffcc 	andi	r3,fp,65535
    8e5c:	8c400104 	addi	r17,r17,4
    8e60:	10c6b03a 	or	r3,r2,r3
    8e64:	88ffff15 	stw	r3,-4(r17)
    8e68:	b5800104 	addi	r22,r22,4
    8e6c:	b13fff17 	ldw	r4,-4(r22)
    8e70:	acc00104 	addi	r19,r21,4
    8e74:	900b883a 	mov	r5,r18
    8e78:	2008d43a 	srli	r4,r4,16
    8e7c:	9c000017 	ldw	r16,0(r19)
    8e80:	000cea00 	call	cea0 <__mulsi3>
    8e84:	b806d43a 	srli	r3,r23,16
    8e88:	813fffcc 	andi	r4,r16,65535
    8e8c:	1105883a 	add	r2,r2,r4
    8e90:	10f9883a 	add	fp,r2,r3
    8e94:	e02ed43a 	srli	r23,fp,16
    8e98:	b53fe736 	bltu	r22,r20,8e38 <__alt_exception_stack_pointer+0xf8008e38>
    8e9c:	af000115 	stw	fp,4(r21)
    8ea0:	d8c00017 	ldw	r3,0(sp)
    8ea4:	d9000517 	ldw	r4,20(sp)
    8ea8:	18c00104 	addi	r3,r3,4
    8eac:	d8c00015 	stw	r3,0(sp)
    8eb0:	d8c00117 	ldw	r3,4(sp)
    8eb4:	18c00104 	addi	r3,r3,4
    8eb8:	d8c00115 	stw	r3,4(sp)
    8ebc:	d8c00017 	ldw	r3,0(sp)
    8ec0:	193fb136 	bltu	r3,r4,8d88 <__alt_exception_stack_pointer+0xf8008d88>
    8ec4:	d8c00217 	ldw	r3,8(sp)
    8ec8:	00c00c0e 	bge	zero,r3,8efc <__multiply+0x24c>
    8ecc:	d8c00317 	ldw	r3,12(sp)
    8ed0:	18bfff17 	ldw	r2,-4(r3)
    8ed4:	1d7fff04 	addi	r21,r3,-4
    8ed8:	10000326 	beq	r2,zero,8ee8 <__multiply+0x238>
    8edc:	00000706 	br	8efc <__multiply+0x24c>
    8ee0:	a8800017 	ldw	r2,0(r21)
    8ee4:	1000051e 	bne	r2,zero,8efc <__multiply+0x24c>
    8ee8:	d8c00217 	ldw	r3,8(sp)
    8eec:	ad7fff04 	addi	r21,r21,-4
    8ef0:	18ffffc4 	addi	r3,r3,-1
    8ef4:	d8c00215 	stw	r3,8(sp)
    8ef8:	183ff91e 	bne	r3,zero,8ee0 <__alt_exception_stack_pointer+0xf8008ee0>
    8efc:	d8c00617 	ldw	r3,24(sp)
    8f00:	d9000217 	ldw	r4,8(sp)
    8f04:	1805883a 	mov	r2,r3
    8f08:	19000415 	stw	r4,16(r3)
    8f0c:	dfc01017 	ldw	ra,64(sp)
    8f10:	df000f17 	ldw	fp,60(sp)
    8f14:	ddc00e17 	ldw	r23,56(sp)
    8f18:	dd800d17 	ldw	r22,52(sp)
    8f1c:	dd400c17 	ldw	r21,48(sp)
    8f20:	dd000b17 	ldw	r20,44(sp)
    8f24:	dcc00a17 	ldw	r19,40(sp)
    8f28:	dc800917 	ldw	r18,36(sp)
    8f2c:	dc400817 	ldw	r17,32(sp)
    8f30:	dc000717 	ldw	r16,28(sp)
    8f34:	dec01104 	addi	sp,sp,68
    8f38:	f800283a 	ret

00008f3c <__pow5mult>:
    8f3c:	defffa04 	addi	sp,sp,-24
    8f40:	dcc00315 	stw	r19,12(sp)
    8f44:	dc000015 	stw	r16,0(sp)
    8f48:	dfc00515 	stw	ra,20(sp)
    8f4c:	dd000415 	stw	r20,16(sp)
    8f50:	dc800215 	stw	r18,8(sp)
    8f54:	dc400115 	stw	r17,4(sp)
    8f58:	308000cc 	andi	r2,r6,3
    8f5c:	3021883a 	mov	r16,r6
    8f60:	2027883a 	mov	r19,r4
    8f64:	10002f1e 	bne	r2,zero,9024 <__pow5mult+0xe8>
    8f68:	2825883a 	mov	r18,r5
    8f6c:	8021d0ba 	srai	r16,r16,2
    8f70:	80001a26 	beq	r16,zero,8fdc <__pow5mult+0xa0>
    8f74:	9c401217 	ldw	r17,72(r19)
    8f78:	8800061e 	bne	r17,zero,8f94 <__pow5mult+0x58>
    8f7c:	00003406 	br	9050 <__pow5mult+0x114>
    8f80:	8021d07a 	srai	r16,r16,1
    8f84:	80001526 	beq	r16,zero,8fdc <__pow5mult+0xa0>
    8f88:	88800017 	ldw	r2,0(r17)
    8f8c:	10001c26 	beq	r2,zero,9000 <__pow5mult+0xc4>
    8f90:	1023883a 	mov	r17,r2
    8f94:	8080004c 	andi	r2,r16,1
    8f98:	103ff926 	beq	r2,zero,8f80 <__alt_exception_stack_pointer+0xf8008f80>
    8f9c:	880d883a 	mov	r6,r17
    8fa0:	900b883a 	mov	r5,r18
    8fa4:	9809883a 	mov	r4,r19
    8fa8:	0008cb00 	call	8cb0 <__multiply>
    8fac:	90001b26 	beq	r18,zero,901c <__pow5mult+0xe0>
    8fb0:	91000117 	ldw	r4,4(r18)
    8fb4:	98c01317 	ldw	r3,76(r19)
    8fb8:	8021d07a 	srai	r16,r16,1
    8fbc:	2109883a 	add	r4,r4,r4
    8fc0:	2109883a 	add	r4,r4,r4
    8fc4:	1907883a 	add	r3,r3,r4
    8fc8:	19000017 	ldw	r4,0(r3)
    8fcc:	91000015 	stw	r4,0(r18)
    8fd0:	1c800015 	stw	r18,0(r3)
    8fd4:	1025883a 	mov	r18,r2
    8fd8:	803feb1e 	bne	r16,zero,8f88 <__alt_exception_stack_pointer+0xf8008f88>
    8fdc:	9005883a 	mov	r2,r18
    8fe0:	dfc00517 	ldw	ra,20(sp)
    8fe4:	dd000417 	ldw	r20,16(sp)
    8fe8:	dcc00317 	ldw	r19,12(sp)
    8fec:	dc800217 	ldw	r18,8(sp)
    8ff0:	dc400117 	ldw	r17,4(sp)
    8ff4:	dc000017 	ldw	r16,0(sp)
    8ff8:	dec00604 	addi	sp,sp,24
    8ffc:	f800283a 	ret
    9000:	880d883a 	mov	r6,r17
    9004:	880b883a 	mov	r5,r17
    9008:	9809883a 	mov	r4,r19
    900c:	0008cb00 	call	8cb0 <__multiply>
    9010:	88800015 	stw	r2,0(r17)
    9014:	10000015 	stw	zero,0(r2)
    9018:	003fdd06 	br	8f90 <__alt_exception_stack_pointer+0xf8008f90>
    901c:	1025883a 	mov	r18,r2
    9020:	003fd706 	br	8f80 <__alt_exception_stack_pointer+0xf8008f80>
    9024:	10bfffc4 	addi	r2,r2,-1
    9028:	1085883a 	add	r2,r2,r2
    902c:	00c00074 	movhi	r3,1
    9030:	18ca7a04 	addi	r3,r3,10728
    9034:	1085883a 	add	r2,r2,r2
    9038:	1885883a 	add	r2,r3,r2
    903c:	11800017 	ldw	r6,0(r2)
    9040:	000f883a 	mov	r7,zero
    9044:	00089100 	call	8910 <__multadd>
    9048:	1025883a 	mov	r18,r2
    904c:	003fc706 	br	8f6c <__alt_exception_stack_pointer+0xf8008f6c>
    9050:	05000044 	movi	r20,1
    9054:	a00b883a 	mov	r5,r20
    9058:	9809883a 	mov	r4,r19
    905c:	00088400 	call	8840 <_Balloc>
    9060:	1023883a 	mov	r17,r2
    9064:	00809c44 	movi	r2,625
    9068:	88800515 	stw	r2,20(r17)
    906c:	8d000415 	stw	r20,16(r17)
    9070:	9c401215 	stw	r17,72(r19)
    9074:	88000015 	stw	zero,0(r17)
    9078:	003fc606 	br	8f94 <__alt_exception_stack_pointer+0xf8008f94>

0000907c <__lshift>:
    907c:	defff904 	addi	sp,sp,-28
    9080:	dd400515 	stw	r21,20(sp)
    9084:	dcc00315 	stw	r19,12(sp)
    9088:	302bd17a 	srai	r21,r6,5
    908c:	2cc00417 	ldw	r19,16(r5)
    9090:	28800217 	ldw	r2,8(r5)
    9094:	dd000415 	stw	r20,16(sp)
    9098:	ace7883a 	add	r19,r21,r19
    909c:	dc800215 	stw	r18,8(sp)
    90a0:	dc400115 	stw	r17,4(sp)
    90a4:	dc000015 	stw	r16,0(sp)
    90a8:	dfc00615 	stw	ra,24(sp)
    90ac:	9c000044 	addi	r16,r19,1
    90b0:	2823883a 	mov	r17,r5
    90b4:	3029883a 	mov	r20,r6
    90b8:	2025883a 	mov	r18,r4
    90bc:	29400117 	ldw	r5,4(r5)
    90c0:	1400030e 	bge	r2,r16,90d0 <__lshift+0x54>
    90c4:	1085883a 	add	r2,r2,r2
    90c8:	29400044 	addi	r5,r5,1
    90cc:	143ffd16 	blt	r2,r16,90c4 <__alt_exception_stack_pointer+0xf80090c4>
    90d0:	9009883a 	mov	r4,r18
    90d4:	00088400 	call	8840 <_Balloc>
    90d8:	10c00504 	addi	r3,r2,20
    90dc:	0540070e 	bge	zero,r21,90fc <__lshift+0x80>
    90e0:	ad6b883a 	add	r21,r21,r21
    90e4:	ad6b883a 	add	r21,r21,r21
    90e8:	1809883a 	mov	r4,r3
    90ec:	1d47883a 	add	r3,r3,r21
    90f0:	20000015 	stw	zero,0(r4)
    90f4:	21000104 	addi	r4,r4,4
    90f8:	193ffd1e 	bne	r3,r4,90f0 <__alt_exception_stack_pointer+0xf80090f0>
    90fc:	8a000417 	ldw	r8,16(r17)
    9100:	89000504 	addi	r4,r17,20
    9104:	a18007cc 	andi	r6,r20,31
    9108:	4211883a 	add	r8,r8,r8
    910c:	4211883a 	add	r8,r8,r8
    9110:	2211883a 	add	r8,r4,r8
    9114:	30002326 	beq	r6,zero,91a4 <__lshift+0x128>
    9118:	02400804 	movi	r9,32
    911c:	4993c83a 	sub	r9,r9,r6
    9120:	000b883a 	mov	r5,zero
    9124:	21c00017 	ldw	r7,0(r4)
    9128:	1815883a 	mov	r10,r3
    912c:	18c00104 	addi	r3,r3,4
    9130:	398e983a 	sll	r7,r7,r6
    9134:	21000104 	addi	r4,r4,4
    9138:	394ab03a 	or	r5,r7,r5
    913c:	197fff15 	stw	r5,-4(r3)
    9140:	217fff17 	ldw	r5,-4(r4)
    9144:	2a4ad83a 	srl	r5,r5,r9
    9148:	223ff636 	bltu	r4,r8,9124 <__alt_exception_stack_pointer+0xf8009124>
    914c:	51400115 	stw	r5,4(r10)
    9150:	28001a1e 	bne	r5,zero,91bc <__lshift+0x140>
    9154:	843fffc4 	addi	r16,r16,-1
    9158:	14000415 	stw	r16,16(r2)
    915c:	88000826 	beq	r17,zero,9180 <__lshift+0x104>
    9160:	89000117 	ldw	r4,4(r17)
    9164:	90c01317 	ldw	r3,76(r18)
    9168:	2109883a 	add	r4,r4,r4
    916c:	2109883a 	add	r4,r4,r4
    9170:	1907883a 	add	r3,r3,r4
    9174:	19000017 	ldw	r4,0(r3)
    9178:	89000015 	stw	r4,0(r17)
    917c:	1c400015 	stw	r17,0(r3)
    9180:	dfc00617 	ldw	ra,24(sp)
    9184:	dd400517 	ldw	r21,20(sp)
    9188:	dd000417 	ldw	r20,16(sp)
    918c:	dcc00317 	ldw	r19,12(sp)
    9190:	dc800217 	ldw	r18,8(sp)
    9194:	dc400117 	ldw	r17,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00704 	addi	sp,sp,28
    91a0:	f800283a 	ret
    91a4:	21400017 	ldw	r5,0(r4)
    91a8:	18c00104 	addi	r3,r3,4
    91ac:	21000104 	addi	r4,r4,4
    91b0:	197fff15 	stw	r5,-4(r3)
    91b4:	223ffb36 	bltu	r4,r8,91a4 <__alt_exception_stack_pointer+0xf80091a4>
    91b8:	003fe606 	br	9154 <__alt_exception_stack_pointer+0xf8009154>
    91bc:	9c000084 	addi	r16,r19,2
    91c0:	003fe406 	br	9154 <__alt_exception_stack_pointer+0xf8009154>

000091c4 <__mcmp>:
    91c4:	20800417 	ldw	r2,16(r4)
    91c8:	28c00417 	ldw	r3,16(r5)
    91cc:	10c5c83a 	sub	r2,r2,r3
    91d0:	1000111e 	bne	r2,zero,9218 <__mcmp+0x54>
    91d4:	18c7883a 	add	r3,r3,r3
    91d8:	18c7883a 	add	r3,r3,r3
    91dc:	21000504 	addi	r4,r4,20
    91e0:	29400504 	addi	r5,r5,20
    91e4:	20c5883a 	add	r2,r4,r3
    91e8:	28cb883a 	add	r5,r5,r3
    91ec:	00000106 	br	91f4 <__mcmp+0x30>
    91f0:	20800a2e 	bgeu	r4,r2,921c <__mcmp+0x58>
    91f4:	10bfff04 	addi	r2,r2,-4
    91f8:	297fff04 	addi	r5,r5,-4
    91fc:	11800017 	ldw	r6,0(r2)
    9200:	28c00017 	ldw	r3,0(r5)
    9204:	30fffa26 	beq	r6,r3,91f0 <__alt_exception_stack_pointer+0xf80091f0>
    9208:	30c00236 	bltu	r6,r3,9214 <__mcmp+0x50>
    920c:	00800044 	movi	r2,1
    9210:	f800283a 	ret
    9214:	00bfffc4 	movi	r2,-1
    9218:	f800283a 	ret
    921c:	0005883a 	mov	r2,zero
    9220:	f800283a 	ret

00009224 <__mdiff>:
    9224:	28c00417 	ldw	r3,16(r5)
    9228:	30800417 	ldw	r2,16(r6)
    922c:	defffa04 	addi	sp,sp,-24
    9230:	dcc00315 	stw	r19,12(sp)
    9234:	dc800215 	stw	r18,8(sp)
    9238:	dfc00515 	stw	ra,20(sp)
    923c:	dd000415 	stw	r20,16(sp)
    9240:	dc400115 	stw	r17,4(sp)
    9244:	dc000015 	stw	r16,0(sp)
    9248:	1887c83a 	sub	r3,r3,r2
    924c:	2825883a 	mov	r18,r5
    9250:	3027883a 	mov	r19,r6
    9254:	1800141e 	bne	r3,zero,92a8 <__mdiff+0x84>
    9258:	1085883a 	add	r2,r2,r2
    925c:	1085883a 	add	r2,r2,r2
    9260:	2a000504 	addi	r8,r5,20
    9264:	34000504 	addi	r16,r6,20
    9268:	4087883a 	add	r3,r8,r2
    926c:	8085883a 	add	r2,r16,r2
    9270:	00000106 	br	9278 <__mdiff+0x54>
    9274:	40c0592e 	bgeu	r8,r3,93dc <__mdiff+0x1b8>
    9278:	18ffff04 	addi	r3,r3,-4
    927c:	10bfff04 	addi	r2,r2,-4
    9280:	19c00017 	ldw	r7,0(r3)
    9284:	11400017 	ldw	r5,0(r2)
    9288:	397ffa26 	beq	r7,r5,9274 <__alt_exception_stack_pointer+0xf8009274>
    928c:	3940592e 	bgeu	r7,r5,93f4 <__mdiff+0x1d0>
    9290:	9005883a 	mov	r2,r18
    9294:	4023883a 	mov	r17,r8
    9298:	9825883a 	mov	r18,r19
    929c:	05000044 	movi	r20,1
    92a0:	1027883a 	mov	r19,r2
    92a4:	00000406 	br	92b8 <__mdiff+0x94>
    92a8:	18005616 	blt	r3,zero,9404 <__mdiff+0x1e0>
    92ac:	34400504 	addi	r17,r6,20
    92b0:	2c000504 	addi	r16,r5,20
    92b4:	0029883a 	mov	r20,zero
    92b8:	91400117 	ldw	r5,4(r18)
    92bc:	00088400 	call	8840 <_Balloc>
    92c0:	92400417 	ldw	r9,16(r18)
    92c4:	9b000417 	ldw	r12,16(r19)
    92c8:	12c00504 	addi	r11,r2,20
    92cc:	4a51883a 	add	r8,r9,r9
    92d0:	6319883a 	add	r12,r12,r12
    92d4:	4211883a 	add	r8,r8,r8
    92d8:	6319883a 	add	r12,r12,r12
    92dc:	15000315 	stw	r20,12(r2)
    92e0:	8211883a 	add	r8,r16,r8
    92e4:	8b19883a 	add	r12,r17,r12
    92e8:	0007883a 	mov	r3,zero
    92ec:	81400017 	ldw	r5,0(r16)
    92f0:	89c00017 	ldw	r7,0(r17)
    92f4:	59800104 	addi	r6,r11,4
    92f8:	293fffcc 	andi	r4,r5,65535
    92fc:	20c7883a 	add	r3,r4,r3
    9300:	393fffcc 	andi	r4,r7,65535
    9304:	1909c83a 	sub	r4,r3,r4
    9308:	280ad43a 	srli	r5,r5,16
    930c:	380ed43a 	srli	r7,r7,16
    9310:	2007d43a 	srai	r3,r4,16
    9314:	213fffcc 	andi	r4,r4,65535
    9318:	29cbc83a 	sub	r5,r5,r7
    931c:	28c7883a 	add	r3,r5,r3
    9320:	180a943a 	slli	r5,r3,16
    9324:	8c400104 	addi	r17,r17,4
    9328:	84000104 	addi	r16,r16,4
    932c:	2908b03a 	or	r4,r5,r4
    9330:	59000015 	stw	r4,0(r11)
    9334:	1807d43a 	srai	r3,r3,16
    9338:	3015883a 	mov	r10,r6
    933c:	3017883a 	mov	r11,r6
    9340:	8b3fea36 	bltu	r17,r12,92ec <__alt_exception_stack_pointer+0xf80092ec>
    9344:	8200162e 	bgeu	r16,r8,93a0 <__mdiff+0x17c>
    9348:	8017883a 	mov	r11,r16
    934c:	59400017 	ldw	r5,0(r11)
    9350:	31800104 	addi	r6,r6,4
    9354:	5ac00104 	addi	r11,r11,4
    9358:	293fffcc 	andi	r4,r5,65535
    935c:	20c7883a 	add	r3,r4,r3
    9360:	280ed43a 	srli	r7,r5,16
    9364:	180bd43a 	srai	r5,r3,16
    9368:	193fffcc 	andi	r4,r3,65535
    936c:	3947883a 	add	r3,r7,r5
    9370:	180a943a 	slli	r5,r3,16
    9374:	1807d43a 	srai	r3,r3,16
    9378:	2908b03a 	or	r4,r5,r4
    937c:	313fff15 	stw	r4,-4(r6)
    9380:	5a3ff236 	bltu	r11,r8,934c <__alt_exception_stack_pointer+0xf800934c>
    9384:	0406303a 	nor	r3,zero,r16
    9388:	1a07883a 	add	r3,r3,r8
    938c:	1806d0ba 	srli	r3,r3,2
    9390:	18c00044 	addi	r3,r3,1
    9394:	18c7883a 	add	r3,r3,r3
    9398:	18c7883a 	add	r3,r3,r3
    939c:	50d5883a 	add	r10,r10,r3
    93a0:	50ffff04 	addi	r3,r10,-4
    93a4:	2000041e 	bne	r4,zero,93b8 <__mdiff+0x194>
    93a8:	18ffff04 	addi	r3,r3,-4
    93ac:	19000017 	ldw	r4,0(r3)
    93b0:	4a7fffc4 	addi	r9,r9,-1
    93b4:	203ffc26 	beq	r4,zero,93a8 <__alt_exception_stack_pointer+0xf80093a8>
    93b8:	12400415 	stw	r9,16(r2)
    93bc:	dfc00517 	ldw	ra,20(sp)
    93c0:	dd000417 	ldw	r20,16(sp)
    93c4:	dcc00317 	ldw	r19,12(sp)
    93c8:	dc800217 	ldw	r18,8(sp)
    93cc:	dc400117 	ldw	r17,4(sp)
    93d0:	dc000017 	ldw	r16,0(sp)
    93d4:	dec00604 	addi	sp,sp,24
    93d8:	f800283a 	ret
    93dc:	000b883a 	mov	r5,zero
    93e0:	00088400 	call	8840 <_Balloc>
    93e4:	00c00044 	movi	r3,1
    93e8:	10c00415 	stw	r3,16(r2)
    93ec:	10000515 	stw	zero,20(r2)
    93f0:	003ff206 	br	93bc <__alt_exception_stack_pointer+0xf80093bc>
    93f4:	8023883a 	mov	r17,r16
    93f8:	0029883a 	mov	r20,zero
    93fc:	4021883a 	mov	r16,r8
    9400:	003fad06 	br	92b8 <__alt_exception_stack_pointer+0xf80092b8>
    9404:	9005883a 	mov	r2,r18
    9408:	94400504 	addi	r17,r18,20
    940c:	9c000504 	addi	r16,r19,20
    9410:	9825883a 	mov	r18,r19
    9414:	05000044 	movi	r20,1
    9418:	1027883a 	mov	r19,r2
    941c:	003fa606 	br	92b8 <__alt_exception_stack_pointer+0xf80092b8>

00009420 <__ulp>:
    9420:	295ffc2c 	andhi	r5,r5,32752
    9424:	00bf3034 	movhi	r2,64704
    9428:	2887883a 	add	r3,r5,r2
    942c:	00c0020e 	bge	zero,r3,9438 <__ulp+0x18>
    9430:	0005883a 	mov	r2,zero
    9434:	f800283a 	ret
    9438:	00c7c83a 	sub	r3,zero,r3
    943c:	1807d53a 	srai	r3,r3,20
    9440:	008004c4 	movi	r2,19
    9444:	10c00b0e 	bge	r2,r3,9474 <__ulp+0x54>
    9448:	18bffb04 	addi	r2,r3,-20
    944c:	01000784 	movi	r4,30
    9450:	0007883a 	mov	r3,zero
    9454:	20800516 	blt	r4,r2,946c <__ulp+0x4c>
    9458:	010007c4 	movi	r4,31
    945c:	2089c83a 	sub	r4,r4,r2
    9460:	00800044 	movi	r2,1
    9464:	1104983a 	sll	r2,r2,r4
    9468:	f800283a 	ret
    946c:	00800044 	movi	r2,1
    9470:	f800283a 	ret
    9474:	01400234 	movhi	r5,8
    9478:	28c7d83a 	sra	r3,r5,r3
    947c:	0005883a 	mov	r2,zero
    9480:	f800283a 	ret

00009484 <__b2d>:
    9484:	defffa04 	addi	sp,sp,-24
    9488:	dc000015 	stw	r16,0(sp)
    948c:	24000417 	ldw	r16,16(r4)
    9490:	dc400115 	stw	r17,4(sp)
    9494:	24400504 	addi	r17,r4,20
    9498:	8421883a 	add	r16,r16,r16
    949c:	8421883a 	add	r16,r16,r16
    94a0:	8c21883a 	add	r16,r17,r16
    94a4:	dc800215 	stw	r18,8(sp)
    94a8:	84bfff17 	ldw	r18,-4(r16)
    94ac:	dd000415 	stw	r20,16(sp)
    94b0:	dcc00315 	stw	r19,12(sp)
    94b4:	9009883a 	mov	r4,r18
    94b8:	2829883a 	mov	r20,r5
    94bc:	dfc00515 	stw	ra,20(sp)
    94c0:	0008b5c0 	call	8b5c <__hi0bits>
    94c4:	00c00804 	movi	r3,32
    94c8:	1889c83a 	sub	r4,r3,r2
    94cc:	a1000015 	stw	r4,0(r20)
    94d0:	01000284 	movi	r4,10
    94d4:	84ffff04 	addi	r19,r16,-4
    94d8:	20801216 	blt	r4,r2,9524 <__b2d+0xa0>
    94dc:	018002c4 	movi	r6,11
    94e0:	308dc83a 	sub	r6,r6,r2
    94e4:	9186d83a 	srl	r3,r18,r6
    94e8:	18cffc34 	orhi	r3,r3,16368
    94ec:	8cc0212e 	bgeu	r17,r19,9574 <__b2d+0xf0>
    94f0:	813ffe17 	ldw	r4,-8(r16)
    94f4:	218cd83a 	srl	r6,r4,r6
    94f8:	10800544 	addi	r2,r2,21
    94fc:	9084983a 	sll	r2,r18,r2
    9500:	1184b03a 	or	r2,r2,r6
    9504:	dfc00517 	ldw	ra,20(sp)
    9508:	dd000417 	ldw	r20,16(sp)
    950c:	dcc00317 	ldw	r19,12(sp)
    9510:	dc800217 	ldw	r18,8(sp)
    9514:	dc400117 	ldw	r17,4(sp)
    9518:	dc000017 	ldw	r16,0(sp)
    951c:	dec00604 	addi	sp,sp,24
    9520:	f800283a 	ret
    9524:	8cc00f2e 	bgeu	r17,r19,9564 <__b2d+0xe0>
    9528:	117ffd44 	addi	r5,r2,-11
    952c:	80bffe17 	ldw	r2,-8(r16)
    9530:	28000e26 	beq	r5,zero,956c <__b2d+0xe8>
    9534:	1949c83a 	sub	r4,r3,r5
    9538:	9164983a 	sll	r18,r18,r5
    953c:	1106d83a 	srl	r3,r2,r4
    9540:	81bffe04 	addi	r6,r16,-8
    9544:	948ffc34 	orhi	r18,r18,16368
    9548:	90c6b03a 	or	r3,r18,r3
    954c:	89800e2e 	bgeu	r17,r6,9588 <__b2d+0x104>
    9550:	81bffd17 	ldw	r6,-12(r16)
    9554:	1144983a 	sll	r2,r2,r5
    9558:	310ad83a 	srl	r5,r6,r4
    955c:	2884b03a 	or	r2,r5,r2
    9560:	003fe806 	br	9504 <__alt_exception_stack_pointer+0xf8009504>
    9564:	10bffd44 	addi	r2,r2,-11
    9568:	1000041e 	bne	r2,zero,957c <__b2d+0xf8>
    956c:	90cffc34 	orhi	r3,r18,16368
    9570:	003fe406 	br	9504 <__alt_exception_stack_pointer+0xf8009504>
    9574:	000d883a 	mov	r6,zero
    9578:	003fdf06 	br	94f8 <__alt_exception_stack_pointer+0xf80094f8>
    957c:	90a4983a 	sll	r18,r18,r2
    9580:	0005883a 	mov	r2,zero
    9584:	003ff906 	br	956c <__alt_exception_stack_pointer+0xf800956c>
    9588:	1144983a 	sll	r2,r2,r5
    958c:	003fdd06 	br	9504 <__alt_exception_stack_pointer+0xf8009504>

00009590 <__d2b>:
    9590:	defff804 	addi	sp,sp,-32
    9594:	dc000215 	stw	r16,8(sp)
    9598:	3021883a 	mov	r16,r6
    959c:	dc400315 	stw	r17,12(sp)
    95a0:	8022907a 	slli	r17,r16,1
    95a4:	dd000615 	stw	r20,24(sp)
    95a8:	2829883a 	mov	r20,r5
    95ac:	01400044 	movi	r5,1
    95b0:	dcc00515 	stw	r19,20(sp)
    95b4:	dc800415 	stw	r18,16(sp)
    95b8:	dfc00715 	stw	ra,28(sp)
    95bc:	3825883a 	mov	r18,r7
    95c0:	8822d57a 	srli	r17,r17,21
    95c4:	00088400 	call	8840 <_Balloc>
    95c8:	1027883a 	mov	r19,r2
    95cc:	00800434 	movhi	r2,16
    95d0:	10bfffc4 	addi	r2,r2,-1
    95d4:	808c703a 	and	r6,r16,r2
    95d8:	88000126 	beq	r17,zero,95e0 <__d2b+0x50>
    95dc:	31800434 	orhi	r6,r6,16
    95e0:	d9800015 	stw	r6,0(sp)
    95e4:	a0002426 	beq	r20,zero,9678 <__d2b+0xe8>
    95e8:	d9000104 	addi	r4,sp,4
    95ec:	dd000115 	stw	r20,4(sp)
    95f0:	0008bc40 	call	8bc4 <__lo0bits>
    95f4:	d8c00017 	ldw	r3,0(sp)
    95f8:	10002f1e 	bne	r2,zero,96b8 <__d2b+0x128>
    95fc:	d9000117 	ldw	r4,4(sp)
    9600:	99000515 	stw	r4,20(r19)
    9604:	1821003a 	cmpeq	r16,r3,zero
    9608:	01000084 	movi	r4,2
    960c:	2421c83a 	sub	r16,r4,r16
    9610:	98c00615 	stw	r3,24(r19)
    9614:	9c000415 	stw	r16,16(r19)
    9618:	88001f1e 	bne	r17,zero,9698 <__d2b+0x108>
    961c:	10bef384 	addi	r2,r2,-1074
    9620:	90800015 	stw	r2,0(r18)
    9624:	00900034 	movhi	r2,16384
    9628:	10bfffc4 	addi	r2,r2,-1
    962c:	8085883a 	add	r2,r16,r2
    9630:	1085883a 	add	r2,r2,r2
    9634:	1085883a 	add	r2,r2,r2
    9638:	9885883a 	add	r2,r19,r2
    963c:	11000517 	ldw	r4,20(r2)
    9640:	8020917a 	slli	r16,r16,5
    9644:	0008b5c0 	call	8b5c <__hi0bits>
    9648:	d8c00817 	ldw	r3,32(sp)
    964c:	8085c83a 	sub	r2,r16,r2
    9650:	18800015 	stw	r2,0(r3)
    9654:	9805883a 	mov	r2,r19
    9658:	dfc00717 	ldw	ra,28(sp)
    965c:	dd000617 	ldw	r20,24(sp)
    9660:	dcc00517 	ldw	r19,20(sp)
    9664:	dc800417 	ldw	r18,16(sp)
    9668:	dc400317 	ldw	r17,12(sp)
    966c:	dc000217 	ldw	r16,8(sp)
    9670:	dec00804 	addi	sp,sp,32
    9674:	f800283a 	ret
    9678:	d809883a 	mov	r4,sp
    967c:	0008bc40 	call	8bc4 <__lo0bits>
    9680:	d8c00017 	ldw	r3,0(sp)
    9684:	04000044 	movi	r16,1
    9688:	9c000415 	stw	r16,16(r19)
    968c:	98c00515 	stw	r3,20(r19)
    9690:	10800804 	addi	r2,r2,32
    9694:	883fe126 	beq	r17,zero,961c <__alt_exception_stack_pointer+0xf800961c>
    9698:	00c00d44 	movi	r3,53
    969c:	8c7ef344 	addi	r17,r17,-1075
    96a0:	88a3883a 	add	r17,r17,r2
    96a4:	1885c83a 	sub	r2,r3,r2
    96a8:	d8c00817 	ldw	r3,32(sp)
    96ac:	94400015 	stw	r17,0(r18)
    96b0:	18800015 	stw	r2,0(r3)
    96b4:	003fe706 	br	9654 <__alt_exception_stack_pointer+0xf8009654>
    96b8:	01000804 	movi	r4,32
    96bc:	2089c83a 	sub	r4,r4,r2
    96c0:	1908983a 	sll	r4,r3,r4
    96c4:	d9400117 	ldw	r5,4(sp)
    96c8:	1886d83a 	srl	r3,r3,r2
    96cc:	2148b03a 	or	r4,r4,r5
    96d0:	99000515 	stw	r4,20(r19)
    96d4:	d8c00015 	stw	r3,0(sp)
    96d8:	003fca06 	br	9604 <__alt_exception_stack_pointer+0xf8009604>

000096dc <__ratio>:
    96dc:	defff904 	addi	sp,sp,-28
    96e0:	dc400315 	stw	r17,12(sp)
    96e4:	2823883a 	mov	r17,r5
    96e8:	d9400104 	addi	r5,sp,4
    96ec:	dfc00615 	stw	ra,24(sp)
    96f0:	dcc00515 	stw	r19,20(sp)
    96f4:	dc800415 	stw	r18,16(sp)
    96f8:	2027883a 	mov	r19,r4
    96fc:	dc000215 	stw	r16,8(sp)
    9700:	00094840 	call	9484 <__b2d>
    9704:	d80b883a 	mov	r5,sp
    9708:	8809883a 	mov	r4,r17
    970c:	1025883a 	mov	r18,r2
    9710:	1821883a 	mov	r16,r3
    9714:	00094840 	call	9484 <__b2d>
    9718:	8a000417 	ldw	r8,16(r17)
    971c:	99000417 	ldw	r4,16(r19)
    9720:	d9400117 	ldw	r5,4(sp)
    9724:	2209c83a 	sub	r4,r4,r8
    9728:	2010917a 	slli	r8,r4,5
    972c:	d9000017 	ldw	r4,0(sp)
    9730:	2909c83a 	sub	r4,r5,r4
    9734:	4109883a 	add	r4,r8,r4
    9738:	01000e0e 	bge	zero,r4,9774 <__ratio+0x98>
    973c:	2008953a 	slli	r4,r4,20
    9740:	2421883a 	add	r16,r4,r16
    9744:	100d883a 	mov	r6,r2
    9748:	180f883a 	mov	r7,r3
    974c:	9009883a 	mov	r4,r18
    9750:	800b883a 	mov	r5,r16
    9754:	000d7740 	call	d774 <__divdf3>
    9758:	dfc00617 	ldw	ra,24(sp)
    975c:	dcc00517 	ldw	r19,20(sp)
    9760:	dc800417 	ldw	r18,16(sp)
    9764:	dc400317 	ldw	r17,12(sp)
    9768:	dc000217 	ldw	r16,8(sp)
    976c:	dec00704 	addi	sp,sp,28
    9770:	f800283a 	ret
    9774:	2008953a 	slli	r4,r4,20
    9778:	1907c83a 	sub	r3,r3,r4
    977c:	003ff106 	br	9744 <__alt_exception_stack_pointer+0xf8009744>

00009780 <_mprec_log10>:
    9780:	defffe04 	addi	sp,sp,-8
    9784:	dc000015 	stw	r16,0(sp)
    9788:	dfc00115 	stw	ra,4(sp)
    978c:	008005c4 	movi	r2,23
    9790:	2021883a 	mov	r16,r4
    9794:	11000d0e 	bge	r2,r4,97cc <_mprec_log10+0x4c>
    9798:	0005883a 	mov	r2,zero
    979c:	00cffc34 	movhi	r3,16368
    97a0:	843fffc4 	addi	r16,r16,-1
    97a4:	000d883a 	mov	r6,zero
    97a8:	01d00934 	movhi	r7,16420
    97ac:	1009883a 	mov	r4,r2
    97b0:	180b883a 	mov	r5,r3
    97b4:	000e39c0 	call	e39c <__muldf3>
    97b8:	803ff91e 	bne	r16,zero,97a0 <__alt_exception_stack_pointer+0xf80097a0>
    97bc:	dfc00117 	ldw	ra,4(sp)
    97c0:	dc000017 	ldw	r16,0(sp)
    97c4:	dec00204 	addi	sp,sp,8
    97c8:	f800283a 	ret
    97cc:	202090fa 	slli	r16,r4,3
    97d0:	00800074 	movhi	r2,1
    97d4:	108a9104 	addi	r2,r2,10820
    97d8:	1421883a 	add	r16,r2,r16
    97dc:	80800017 	ldw	r2,0(r16)
    97e0:	80c00117 	ldw	r3,4(r16)
    97e4:	dfc00117 	ldw	ra,4(sp)
    97e8:	dc000017 	ldw	r16,0(sp)
    97ec:	dec00204 	addi	sp,sp,8
    97f0:	f800283a 	ret

000097f4 <__copybits>:
    97f4:	297fffc4 	addi	r5,r5,-1
    97f8:	280fd17a 	srai	r7,r5,5
    97fc:	30c00417 	ldw	r3,16(r6)
    9800:	30800504 	addi	r2,r6,20
    9804:	39c00044 	addi	r7,r7,1
    9808:	18c7883a 	add	r3,r3,r3
    980c:	39cf883a 	add	r7,r7,r7
    9810:	18c7883a 	add	r3,r3,r3
    9814:	39cf883a 	add	r7,r7,r7
    9818:	10c7883a 	add	r3,r2,r3
    981c:	21cf883a 	add	r7,r4,r7
    9820:	10c00d2e 	bgeu	r2,r3,9858 <__copybits+0x64>
    9824:	200b883a 	mov	r5,r4
    9828:	12000017 	ldw	r8,0(r2)
    982c:	29400104 	addi	r5,r5,4
    9830:	10800104 	addi	r2,r2,4
    9834:	2a3fff15 	stw	r8,-4(r5)
    9838:	10fffb36 	bltu	r2,r3,9828 <__alt_exception_stack_pointer+0xf8009828>
    983c:	1985c83a 	sub	r2,r3,r6
    9840:	10bffac4 	addi	r2,r2,-21
    9844:	1004d0ba 	srli	r2,r2,2
    9848:	10800044 	addi	r2,r2,1
    984c:	1085883a 	add	r2,r2,r2
    9850:	1085883a 	add	r2,r2,r2
    9854:	2089883a 	add	r4,r4,r2
    9858:	21c0032e 	bgeu	r4,r7,9868 <__copybits+0x74>
    985c:	20000015 	stw	zero,0(r4)
    9860:	21000104 	addi	r4,r4,4
    9864:	21fffd36 	bltu	r4,r7,985c <__alt_exception_stack_pointer+0xf800985c>
    9868:	f800283a 	ret

0000986c <__any_on>:
    986c:	20c00417 	ldw	r3,16(r4)
    9870:	2805d17a 	srai	r2,r5,5
    9874:	21000504 	addi	r4,r4,20
    9878:	18800d0e 	bge	r3,r2,98b0 <__any_on+0x44>
    987c:	18c7883a 	add	r3,r3,r3
    9880:	18c7883a 	add	r3,r3,r3
    9884:	20c7883a 	add	r3,r4,r3
    9888:	20c0192e 	bgeu	r4,r3,98f0 <__any_on+0x84>
    988c:	18bfff17 	ldw	r2,-4(r3)
    9890:	18ffff04 	addi	r3,r3,-4
    9894:	1000041e 	bne	r2,zero,98a8 <__any_on+0x3c>
    9898:	20c0142e 	bgeu	r4,r3,98ec <__any_on+0x80>
    989c:	18ffff04 	addi	r3,r3,-4
    98a0:	19400017 	ldw	r5,0(r3)
    98a4:	283ffc26 	beq	r5,zero,9898 <__alt_exception_stack_pointer+0xf8009898>
    98a8:	00800044 	movi	r2,1
    98ac:	f800283a 	ret
    98b0:	10c00a0e 	bge	r2,r3,98dc <__any_on+0x70>
    98b4:	1085883a 	add	r2,r2,r2
    98b8:	1085883a 	add	r2,r2,r2
    98bc:	294007cc 	andi	r5,r5,31
    98c0:	2087883a 	add	r3,r4,r2
    98c4:	283ff026 	beq	r5,zero,9888 <__alt_exception_stack_pointer+0xf8009888>
    98c8:	19800017 	ldw	r6,0(r3)
    98cc:	3144d83a 	srl	r2,r6,r5
    98d0:	114a983a 	sll	r5,r2,r5
    98d4:	317ff41e 	bne	r6,r5,98a8 <__alt_exception_stack_pointer+0xf80098a8>
    98d8:	003feb06 	br	9888 <__alt_exception_stack_pointer+0xf8009888>
    98dc:	1085883a 	add	r2,r2,r2
    98e0:	1085883a 	add	r2,r2,r2
    98e4:	2087883a 	add	r3,r4,r2
    98e8:	003fe706 	br	9888 <__alt_exception_stack_pointer+0xf8009888>
    98ec:	f800283a 	ret
    98f0:	0005883a 	mov	r2,zero
    98f4:	f800283a 	ret

000098f8 <_realloc_r>:
    98f8:	defff604 	addi	sp,sp,-40
    98fc:	dc800215 	stw	r18,8(sp)
    9900:	dfc00915 	stw	ra,36(sp)
    9904:	df000815 	stw	fp,32(sp)
    9908:	ddc00715 	stw	r23,28(sp)
    990c:	dd800615 	stw	r22,24(sp)
    9910:	dd400515 	stw	r21,20(sp)
    9914:	dd000415 	stw	r20,16(sp)
    9918:	dcc00315 	stw	r19,12(sp)
    991c:	dc400115 	stw	r17,4(sp)
    9920:	dc000015 	stw	r16,0(sp)
    9924:	3025883a 	mov	r18,r6
    9928:	2800b726 	beq	r5,zero,9c08 <_realloc_r+0x310>
    992c:	282b883a 	mov	r21,r5
    9930:	2029883a 	mov	r20,r4
    9934:	000fd080 	call	fd08 <__malloc_lock>
    9938:	a8bfff17 	ldw	r2,-4(r21)
    993c:	043fff04 	movi	r16,-4
    9940:	90c002c4 	addi	r3,r18,11
    9944:	01000584 	movi	r4,22
    9948:	acfffe04 	addi	r19,r21,-8
    994c:	1420703a 	and	r16,r2,r16
    9950:	20c0332e 	bgeu	r4,r3,9a20 <_realloc_r+0x128>
    9954:	047ffe04 	movi	r17,-8
    9958:	1c62703a 	and	r17,r3,r17
    995c:	8807883a 	mov	r3,r17
    9960:	88005816 	blt	r17,zero,9ac4 <_realloc_r+0x1cc>
    9964:	8c805736 	bltu	r17,r18,9ac4 <_realloc_r+0x1cc>
    9968:	80c0300e 	bge	r16,r3,9a2c <_realloc_r+0x134>
    996c:	07000074 	movhi	fp,1
    9970:	e70c2404 	addi	fp,fp,12432
    9974:	e1c00217 	ldw	r7,8(fp)
    9978:	9c09883a 	add	r4,r19,r16
    997c:	22000117 	ldw	r8,4(r4)
    9980:	21c06326 	beq	r4,r7,9b10 <_realloc_r+0x218>
    9984:	017fff84 	movi	r5,-2
    9988:	414a703a 	and	r5,r8,r5
    998c:	214b883a 	add	r5,r4,r5
    9990:	29800117 	ldw	r6,4(r5)
    9994:	3180004c 	andi	r6,r6,1
    9998:	30003f26 	beq	r6,zero,9a98 <_realloc_r+0x1a0>
    999c:	1080004c 	andi	r2,r2,1
    99a0:	10008326 	beq	r2,zero,9bb0 <_realloc_r+0x2b8>
    99a4:	900b883a 	mov	r5,r18
    99a8:	a009883a 	mov	r4,r20
    99ac:	00028240 	call	2824 <_malloc_r>
    99b0:	1025883a 	mov	r18,r2
    99b4:	10011e26 	beq	r2,zero,9e30 <_realloc_r+0x538>
    99b8:	a93fff17 	ldw	r4,-4(r21)
    99bc:	10fffe04 	addi	r3,r2,-8
    99c0:	00bfff84 	movi	r2,-2
    99c4:	2084703a 	and	r2,r4,r2
    99c8:	9885883a 	add	r2,r19,r2
    99cc:	1880ee26 	beq	r3,r2,9d88 <_realloc_r+0x490>
    99d0:	81bfff04 	addi	r6,r16,-4
    99d4:	00800904 	movi	r2,36
    99d8:	1180b836 	bltu	r2,r6,9cbc <_realloc_r+0x3c4>
    99dc:	00c004c4 	movi	r3,19
    99e0:	19809636 	bltu	r3,r6,9c3c <_realloc_r+0x344>
    99e4:	9005883a 	mov	r2,r18
    99e8:	a807883a 	mov	r3,r21
    99ec:	19000017 	ldw	r4,0(r3)
    99f0:	11000015 	stw	r4,0(r2)
    99f4:	19000117 	ldw	r4,4(r3)
    99f8:	11000115 	stw	r4,4(r2)
    99fc:	18c00217 	ldw	r3,8(r3)
    9a00:	10c00215 	stw	r3,8(r2)
    9a04:	a80b883a 	mov	r5,r21
    9a08:	a009883a 	mov	r4,r20
    9a0c:	00077980 	call	7798 <_free_r>
    9a10:	a009883a 	mov	r4,r20
    9a14:	000fd2c0 	call	fd2c <__malloc_unlock>
    9a18:	9005883a 	mov	r2,r18
    9a1c:	00001206 	br	9a68 <_realloc_r+0x170>
    9a20:	00c00404 	movi	r3,16
    9a24:	1823883a 	mov	r17,r3
    9a28:	003fce06 	br	9964 <__alt_exception_stack_pointer+0xf8009964>
    9a2c:	a825883a 	mov	r18,r21
    9a30:	8445c83a 	sub	r2,r16,r17
    9a34:	00c003c4 	movi	r3,15
    9a38:	18802636 	bltu	r3,r2,9ad4 <_realloc_r+0x1dc>
    9a3c:	99800117 	ldw	r6,4(r19)
    9a40:	9c07883a 	add	r3,r19,r16
    9a44:	3180004c 	andi	r6,r6,1
    9a48:	3420b03a 	or	r16,r6,r16
    9a4c:	9c000115 	stw	r16,4(r19)
    9a50:	18800117 	ldw	r2,4(r3)
    9a54:	10800054 	ori	r2,r2,1
    9a58:	18800115 	stw	r2,4(r3)
    9a5c:	a009883a 	mov	r4,r20
    9a60:	000fd2c0 	call	fd2c <__malloc_unlock>
    9a64:	9005883a 	mov	r2,r18
    9a68:	dfc00917 	ldw	ra,36(sp)
    9a6c:	df000817 	ldw	fp,32(sp)
    9a70:	ddc00717 	ldw	r23,28(sp)
    9a74:	dd800617 	ldw	r22,24(sp)
    9a78:	dd400517 	ldw	r21,20(sp)
    9a7c:	dd000417 	ldw	r20,16(sp)
    9a80:	dcc00317 	ldw	r19,12(sp)
    9a84:	dc800217 	ldw	r18,8(sp)
    9a88:	dc400117 	ldw	r17,4(sp)
    9a8c:	dc000017 	ldw	r16,0(sp)
    9a90:	dec00a04 	addi	sp,sp,40
    9a94:	f800283a 	ret
    9a98:	017fff04 	movi	r5,-4
    9a9c:	414a703a 	and	r5,r8,r5
    9aa0:	814d883a 	add	r6,r16,r5
    9aa4:	30c01f16 	blt	r6,r3,9b24 <_realloc_r+0x22c>
    9aa8:	20800317 	ldw	r2,12(r4)
    9aac:	20c00217 	ldw	r3,8(r4)
    9ab0:	a825883a 	mov	r18,r21
    9ab4:	3021883a 	mov	r16,r6
    9ab8:	18800315 	stw	r2,12(r3)
    9abc:	10c00215 	stw	r3,8(r2)
    9ac0:	003fdb06 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    9ac4:	00800304 	movi	r2,12
    9ac8:	a0800015 	stw	r2,0(r20)
    9acc:	0005883a 	mov	r2,zero
    9ad0:	003fe506 	br	9a68 <__alt_exception_stack_pointer+0xf8009a68>
    9ad4:	98c00117 	ldw	r3,4(r19)
    9ad8:	9c4b883a 	add	r5,r19,r17
    9adc:	11000054 	ori	r4,r2,1
    9ae0:	18c0004c 	andi	r3,r3,1
    9ae4:	1c62b03a 	or	r17,r3,r17
    9ae8:	9c400115 	stw	r17,4(r19)
    9aec:	29000115 	stw	r4,4(r5)
    9af0:	2885883a 	add	r2,r5,r2
    9af4:	10c00117 	ldw	r3,4(r2)
    9af8:	29400204 	addi	r5,r5,8
    9afc:	a009883a 	mov	r4,r20
    9b00:	18c00054 	ori	r3,r3,1
    9b04:	10c00115 	stw	r3,4(r2)
    9b08:	00077980 	call	7798 <_free_r>
    9b0c:	003fd306 	br	9a5c <__alt_exception_stack_pointer+0xf8009a5c>
    9b10:	017fff04 	movi	r5,-4
    9b14:	414a703a 	and	r5,r8,r5
    9b18:	89800404 	addi	r6,r17,16
    9b1c:	8151883a 	add	r8,r16,r5
    9b20:	4180590e 	bge	r8,r6,9c88 <_realloc_r+0x390>
    9b24:	1080004c 	andi	r2,r2,1
    9b28:	103f9e1e 	bne	r2,zero,99a4 <__alt_exception_stack_pointer+0xf80099a4>
    9b2c:	adbffe17 	ldw	r22,-8(r21)
    9b30:	00bfff04 	movi	r2,-4
    9b34:	9dadc83a 	sub	r22,r19,r22
    9b38:	b1800117 	ldw	r6,4(r22)
    9b3c:	3084703a 	and	r2,r6,r2
    9b40:	20002026 	beq	r4,zero,9bc4 <_realloc_r+0x2cc>
    9b44:	80af883a 	add	r23,r16,r2
    9b48:	b96f883a 	add	r23,r23,r5
    9b4c:	21c05f26 	beq	r4,r7,9ccc <_realloc_r+0x3d4>
    9b50:	b8c01c16 	blt	r23,r3,9bc4 <_realloc_r+0x2cc>
    9b54:	20800317 	ldw	r2,12(r4)
    9b58:	20c00217 	ldw	r3,8(r4)
    9b5c:	81bfff04 	addi	r6,r16,-4
    9b60:	01000904 	movi	r4,36
    9b64:	18800315 	stw	r2,12(r3)
    9b68:	10c00215 	stw	r3,8(r2)
    9b6c:	b0c00217 	ldw	r3,8(r22)
    9b70:	b0800317 	ldw	r2,12(r22)
    9b74:	b4800204 	addi	r18,r22,8
    9b78:	18800315 	stw	r2,12(r3)
    9b7c:	10c00215 	stw	r3,8(r2)
    9b80:	21801b36 	bltu	r4,r6,9bf0 <_realloc_r+0x2f8>
    9b84:	008004c4 	movi	r2,19
    9b88:	1180352e 	bgeu	r2,r6,9c60 <_realloc_r+0x368>
    9b8c:	a8800017 	ldw	r2,0(r21)
    9b90:	b0800215 	stw	r2,8(r22)
    9b94:	a8800117 	ldw	r2,4(r21)
    9b98:	b0800315 	stw	r2,12(r22)
    9b9c:	008006c4 	movi	r2,27
    9ba0:	11807f36 	bltu	r2,r6,9da0 <_realloc_r+0x4a8>
    9ba4:	b0800404 	addi	r2,r22,16
    9ba8:	ad400204 	addi	r21,r21,8
    9bac:	00002d06 	br	9c64 <_realloc_r+0x36c>
    9bb0:	adbffe17 	ldw	r22,-8(r21)
    9bb4:	00bfff04 	movi	r2,-4
    9bb8:	9dadc83a 	sub	r22,r19,r22
    9bbc:	b1000117 	ldw	r4,4(r22)
    9bc0:	2084703a 	and	r2,r4,r2
    9bc4:	b03f7726 	beq	r22,zero,99a4 <__alt_exception_stack_pointer+0xf80099a4>
    9bc8:	80af883a 	add	r23,r16,r2
    9bcc:	b8ff7516 	blt	r23,r3,99a4 <__alt_exception_stack_pointer+0xf80099a4>
    9bd0:	b0800317 	ldw	r2,12(r22)
    9bd4:	b0c00217 	ldw	r3,8(r22)
    9bd8:	81bfff04 	addi	r6,r16,-4
    9bdc:	01000904 	movi	r4,36
    9be0:	18800315 	stw	r2,12(r3)
    9be4:	10c00215 	stw	r3,8(r2)
    9be8:	b4800204 	addi	r18,r22,8
    9bec:	21bfe52e 	bgeu	r4,r6,9b84 <__alt_exception_stack_pointer+0xf8009b84>
    9bf0:	a80b883a 	mov	r5,r21
    9bf4:	9009883a 	mov	r4,r18
    9bf8:	00085bc0 	call	85bc <memmove>
    9bfc:	b821883a 	mov	r16,r23
    9c00:	b027883a 	mov	r19,r22
    9c04:	003f8a06 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    9c08:	300b883a 	mov	r5,r6
    9c0c:	dfc00917 	ldw	ra,36(sp)
    9c10:	df000817 	ldw	fp,32(sp)
    9c14:	ddc00717 	ldw	r23,28(sp)
    9c18:	dd800617 	ldw	r22,24(sp)
    9c1c:	dd400517 	ldw	r21,20(sp)
    9c20:	dd000417 	ldw	r20,16(sp)
    9c24:	dcc00317 	ldw	r19,12(sp)
    9c28:	dc800217 	ldw	r18,8(sp)
    9c2c:	dc400117 	ldw	r17,4(sp)
    9c30:	dc000017 	ldw	r16,0(sp)
    9c34:	dec00a04 	addi	sp,sp,40
    9c38:	00028241 	jmpi	2824 <_malloc_r>
    9c3c:	a8c00017 	ldw	r3,0(r21)
    9c40:	90c00015 	stw	r3,0(r18)
    9c44:	a8c00117 	ldw	r3,4(r21)
    9c48:	90c00115 	stw	r3,4(r18)
    9c4c:	00c006c4 	movi	r3,27
    9c50:	19804536 	bltu	r3,r6,9d68 <_realloc_r+0x470>
    9c54:	90800204 	addi	r2,r18,8
    9c58:	a8c00204 	addi	r3,r21,8
    9c5c:	003f6306 	br	99ec <__alt_exception_stack_pointer+0xf80099ec>
    9c60:	9005883a 	mov	r2,r18
    9c64:	a8c00017 	ldw	r3,0(r21)
    9c68:	b821883a 	mov	r16,r23
    9c6c:	b027883a 	mov	r19,r22
    9c70:	10c00015 	stw	r3,0(r2)
    9c74:	a8c00117 	ldw	r3,4(r21)
    9c78:	10c00115 	stw	r3,4(r2)
    9c7c:	a8c00217 	ldw	r3,8(r21)
    9c80:	10c00215 	stw	r3,8(r2)
    9c84:	003f6a06 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    9c88:	9c67883a 	add	r19,r19,r17
    9c8c:	4445c83a 	sub	r2,r8,r17
    9c90:	e4c00215 	stw	r19,8(fp)
    9c94:	10800054 	ori	r2,r2,1
    9c98:	98800115 	stw	r2,4(r19)
    9c9c:	a8bfff17 	ldw	r2,-4(r21)
    9ca0:	a009883a 	mov	r4,r20
    9ca4:	1080004c 	andi	r2,r2,1
    9ca8:	1462b03a 	or	r17,r2,r17
    9cac:	ac7fff15 	stw	r17,-4(r21)
    9cb0:	000fd2c0 	call	fd2c <__malloc_unlock>
    9cb4:	a805883a 	mov	r2,r21
    9cb8:	003f6b06 	br	9a68 <__alt_exception_stack_pointer+0xf8009a68>
    9cbc:	a80b883a 	mov	r5,r21
    9cc0:	9009883a 	mov	r4,r18
    9cc4:	00085bc0 	call	85bc <memmove>
    9cc8:	003f4e06 	br	9a04 <__alt_exception_stack_pointer+0xf8009a04>
    9ccc:	89000404 	addi	r4,r17,16
    9cd0:	b93fbc16 	blt	r23,r4,9bc4 <__alt_exception_stack_pointer+0xf8009bc4>
    9cd4:	b0800317 	ldw	r2,12(r22)
    9cd8:	b0c00217 	ldw	r3,8(r22)
    9cdc:	81bfff04 	addi	r6,r16,-4
    9ce0:	01000904 	movi	r4,36
    9ce4:	18800315 	stw	r2,12(r3)
    9ce8:	10c00215 	stw	r3,8(r2)
    9cec:	b4800204 	addi	r18,r22,8
    9cf0:	21804336 	bltu	r4,r6,9e00 <_realloc_r+0x508>
    9cf4:	008004c4 	movi	r2,19
    9cf8:	11803f2e 	bgeu	r2,r6,9df8 <_realloc_r+0x500>
    9cfc:	a8800017 	ldw	r2,0(r21)
    9d00:	b0800215 	stw	r2,8(r22)
    9d04:	a8800117 	ldw	r2,4(r21)
    9d08:	b0800315 	stw	r2,12(r22)
    9d0c:	008006c4 	movi	r2,27
    9d10:	11803f36 	bltu	r2,r6,9e10 <_realloc_r+0x518>
    9d14:	b0800404 	addi	r2,r22,16
    9d18:	ad400204 	addi	r21,r21,8
    9d1c:	a8c00017 	ldw	r3,0(r21)
    9d20:	10c00015 	stw	r3,0(r2)
    9d24:	a8c00117 	ldw	r3,4(r21)
    9d28:	10c00115 	stw	r3,4(r2)
    9d2c:	a8c00217 	ldw	r3,8(r21)
    9d30:	10c00215 	stw	r3,8(r2)
    9d34:	b447883a 	add	r3,r22,r17
    9d38:	bc45c83a 	sub	r2,r23,r17
    9d3c:	e0c00215 	stw	r3,8(fp)
    9d40:	10800054 	ori	r2,r2,1
    9d44:	18800115 	stw	r2,4(r3)
    9d48:	b0800117 	ldw	r2,4(r22)
    9d4c:	a009883a 	mov	r4,r20
    9d50:	1080004c 	andi	r2,r2,1
    9d54:	1462b03a 	or	r17,r2,r17
    9d58:	b4400115 	stw	r17,4(r22)
    9d5c:	000fd2c0 	call	fd2c <__malloc_unlock>
    9d60:	9005883a 	mov	r2,r18
    9d64:	003f4006 	br	9a68 <__alt_exception_stack_pointer+0xf8009a68>
    9d68:	a8c00217 	ldw	r3,8(r21)
    9d6c:	90c00215 	stw	r3,8(r18)
    9d70:	a8c00317 	ldw	r3,12(r21)
    9d74:	90c00315 	stw	r3,12(r18)
    9d78:	30801126 	beq	r6,r2,9dc0 <_realloc_r+0x4c8>
    9d7c:	90800404 	addi	r2,r18,16
    9d80:	a8c00404 	addi	r3,r21,16
    9d84:	003f1906 	br	99ec <__alt_exception_stack_pointer+0xf80099ec>
    9d88:	90ffff17 	ldw	r3,-4(r18)
    9d8c:	00bfff04 	movi	r2,-4
    9d90:	a825883a 	mov	r18,r21
    9d94:	1884703a 	and	r2,r3,r2
    9d98:	80a1883a 	add	r16,r16,r2
    9d9c:	003f2406 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    9da0:	a8800217 	ldw	r2,8(r21)
    9da4:	b0800415 	stw	r2,16(r22)
    9da8:	a8800317 	ldw	r2,12(r21)
    9dac:	b0800515 	stw	r2,20(r22)
    9db0:	31000a26 	beq	r6,r4,9ddc <_realloc_r+0x4e4>
    9db4:	b0800604 	addi	r2,r22,24
    9db8:	ad400404 	addi	r21,r21,16
    9dbc:	003fa906 	br	9c64 <__alt_exception_stack_pointer+0xf8009c64>
    9dc0:	a9000417 	ldw	r4,16(r21)
    9dc4:	90800604 	addi	r2,r18,24
    9dc8:	a8c00604 	addi	r3,r21,24
    9dcc:	91000415 	stw	r4,16(r18)
    9dd0:	a9000517 	ldw	r4,20(r21)
    9dd4:	91000515 	stw	r4,20(r18)
    9dd8:	003f0406 	br	99ec <__alt_exception_stack_pointer+0xf80099ec>
    9ddc:	a8c00417 	ldw	r3,16(r21)
    9de0:	ad400604 	addi	r21,r21,24
    9de4:	b0800804 	addi	r2,r22,32
    9de8:	b0c00615 	stw	r3,24(r22)
    9dec:	a8ffff17 	ldw	r3,-4(r21)
    9df0:	b0c00715 	stw	r3,28(r22)
    9df4:	003f9b06 	br	9c64 <__alt_exception_stack_pointer+0xf8009c64>
    9df8:	9005883a 	mov	r2,r18
    9dfc:	003fc706 	br	9d1c <__alt_exception_stack_pointer+0xf8009d1c>
    9e00:	a80b883a 	mov	r5,r21
    9e04:	9009883a 	mov	r4,r18
    9e08:	00085bc0 	call	85bc <memmove>
    9e0c:	003fc906 	br	9d34 <__alt_exception_stack_pointer+0xf8009d34>
    9e10:	a8800217 	ldw	r2,8(r21)
    9e14:	b0800415 	stw	r2,16(r22)
    9e18:	a8800317 	ldw	r2,12(r21)
    9e1c:	b0800515 	stw	r2,20(r22)
    9e20:	31000726 	beq	r6,r4,9e40 <_realloc_r+0x548>
    9e24:	b0800604 	addi	r2,r22,24
    9e28:	ad400404 	addi	r21,r21,16
    9e2c:	003fbb06 	br	9d1c <__alt_exception_stack_pointer+0xf8009d1c>
    9e30:	a009883a 	mov	r4,r20
    9e34:	000fd2c0 	call	fd2c <__malloc_unlock>
    9e38:	0005883a 	mov	r2,zero
    9e3c:	003f0a06 	br	9a68 <__alt_exception_stack_pointer+0xf8009a68>
    9e40:	a8c00417 	ldw	r3,16(r21)
    9e44:	ad400604 	addi	r21,r21,24
    9e48:	b0800804 	addi	r2,r22,32
    9e4c:	b0c00615 	stw	r3,24(r22)
    9e50:	a8ffff17 	ldw	r3,-4(r21)
    9e54:	b0c00715 	stw	r3,28(r22)
    9e58:	003fb006 	br	9d1c <__alt_exception_stack_pointer+0xf8009d1c>

00009e5c <__fpclassifyd>:
    9e5c:	00a00034 	movhi	r2,32768
    9e60:	10bfffc4 	addi	r2,r2,-1
    9e64:	2884703a 	and	r2,r5,r2
    9e68:	10000726 	beq	r2,zero,9e88 <__fpclassifyd+0x2c>
    9e6c:	00fffc34 	movhi	r3,65520
    9e70:	019ff834 	movhi	r6,32736
    9e74:	28c7883a 	add	r3,r5,r3
    9e78:	31bfffc4 	addi	r6,r6,-1
    9e7c:	30c00536 	bltu	r6,r3,9e94 <__fpclassifyd+0x38>
    9e80:	00800104 	movi	r2,4
    9e84:	f800283a 	ret
    9e88:	2000021e 	bne	r4,zero,9e94 <__fpclassifyd+0x38>
    9e8c:	00800084 	movi	r2,2
    9e90:	f800283a 	ret
    9e94:	00dffc34 	movhi	r3,32752
    9e98:	019ff834 	movhi	r6,32736
    9e9c:	28cb883a 	add	r5,r5,r3
    9ea0:	31bfffc4 	addi	r6,r6,-1
    9ea4:	317ff62e 	bgeu	r6,r5,9e80 <__alt_exception_stack_pointer+0xf8009e80>
    9ea8:	01400434 	movhi	r5,16
    9eac:	297fffc4 	addi	r5,r5,-1
    9eb0:	28800236 	bltu	r5,r2,9ebc <__fpclassifyd+0x60>
    9eb4:	008000c4 	movi	r2,3
    9eb8:	f800283a 	ret
    9ebc:	10c00226 	beq	r2,r3,9ec8 <__fpclassifyd+0x6c>
    9ec0:	0005883a 	mov	r2,zero
    9ec4:	f800283a 	ret
    9ec8:	2005003a 	cmpeq	r2,r4,zero
    9ecc:	f800283a 	ret

00009ed0 <__sread>:
    9ed0:	defffe04 	addi	sp,sp,-8
    9ed4:	dc000015 	stw	r16,0(sp)
    9ed8:	2821883a 	mov	r16,r5
    9edc:	2940038f 	ldh	r5,14(r5)
    9ee0:	dfc00115 	stw	ra,4(sp)
    9ee4:	000bd8c0 	call	bd8c <_read_r>
    9ee8:	10000716 	blt	r2,zero,9f08 <__sread+0x38>
    9eec:	80c01417 	ldw	r3,80(r16)
    9ef0:	1887883a 	add	r3,r3,r2
    9ef4:	80c01415 	stw	r3,80(r16)
    9ef8:	dfc00117 	ldw	ra,4(sp)
    9efc:	dc000017 	ldw	r16,0(sp)
    9f00:	dec00204 	addi	sp,sp,8
    9f04:	f800283a 	ret
    9f08:	80c0030b 	ldhu	r3,12(r16)
    9f0c:	18fbffcc 	andi	r3,r3,61439
    9f10:	80c0030d 	sth	r3,12(r16)
    9f14:	dfc00117 	ldw	ra,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00204 	addi	sp,sp,8
    9f20:	f800283a 	ret

00009f24 <__seofread>:
    9f24:	0005883a 	mov	r2,zero
    9f28:	f800283a 	ret

00009f2c <__swrite>:
    9f2c:	2880030b 	ldhu	r2,12(r5)
    9f30:	defffb04 	addi	sp,sp,-20
    9f34:	dcc00315 	stw	r19,12(sp)
    9f38:	dc800215 	stw	r18,8(sp)
    9f3c:	dc400115 	stw	r17,4(sp)
    9f40:	dc000015 	stw	r16,0(sp)
    9f44:	dfc00415 	stw	ra,16(sp)
    9f48:	10c0400c 	andi	r3,r2,256
    9f4c:	2821883a 	mov	r16,r5
    9f50:	2023883a 	mov	r17,r4
    9f54:	3025883a 	mov	r18,r6
    9f58:	3827883a 	mov	r19,r7
    9f5c:	18000526 	beq	r3,zero,9f74 <__swrite+0x48>
    9f60:	2940038f 	ldh	r5,14(r5)
    9f64:	01c00084 	movi	r7,2
    9f68:	000d883a 	mov	r6,zero
    9f6c:	000bd2c0 	call	bd2c <_lseek_r>
    9f70:	8080030b 	ldhu	r2,12(r16)
    9f74:	8140038f 	ldh	r5,14(r16)
    9f78:	10bbffcc 	andi	r2,r2,61439
    9f7c:	980f883a 	mov	r7,r19
    9f80:	900d883a 	mov	r6,r18
    9f84:	8809883a 	mov	r4,r17
    9f88:	8080030d 	sth	r2,12(r16)
    9f8c:	dfc00417 	ldw	ra,16(sp)
    9f90:	dcc00317 	ldw	r19,12(sp)
    9f94:	dc800217 	ldw	r18,8(sp)
    9f98:	dc400117 	ldw	r17,4(sp)
    9f9c:	dc000017 	ldw	r16,0(sp)
    9fa0:	dec00504 	addi	sp,sp,20
    9fa4:	000b7e01 	jmpi	b7e0 <_write_r>

00009fa8 <__sseek>:
    9fa8:	defffe04 	addi	sp,sp,-8
    9fac:	dc000015 	stw	r16,0(sp)
    9fb0:	2821883a 	mov	r16,r5
    9fb4:	2940038f 	ldh	r5,14(r5)
    9fb8:	dfc00115 	stw	ra,4(sp)
    9fbc:	000bd2c0 	call	bd2c <_lseek_r>
    9fc0:	00ffffc4 	movi	r3,-1
    9fc4:	10c00826 	beq	r2,r3,9fe8 <__sseek+0x40>
    9fc8:	80c0030b 	ldhu	r3,12(r16)
    9fcc:	80801415 	stw	r2,80(r16)
    9fd0:	18c40014 	ori	r3,r3,4096
    9fd4:	80c0030d 	sth	r3,12(r16)
    9fd8:	dfc00117 	ldw	ra,4(sp)
    9fdc:	dc000017 	ldw	r16,0(sp)
    9fe0:	dec00204 	addi	sp,sp,8
    9fe4:	f800283a 	ret
    9fe8:	80c0030b 	ldhu	r3,12(r16)
    9fec:	18fbffcc 	andi	r3,r3,61439
    9ff0:	80c0030d 	sth	r3,12(r16)
    9ff4:	dfc00117 	ldw	ra,4(sp)
    9ff8:	dc000017 	ldw	r16,0(sp)
    9ffc:	dec00204 	addi	sp,sp,8
    a000:	f800283a 	ret

0000a004 <__sclose>:
    a004:	2940038f 	ldh	r5,14(r5)
    a008:	000b8401 	jmpi	b840 <_close_r>

0000a00c <strcmp>:
    a00c:	2144b03a 	or	r2,r4,r5
    a010:	108000cc 	andi	r2,r2,3
    a014:	1000171e 	bne	r2,zero,a074 <strcmp+0x68>
    a018:	20800017 	ldw	r2,0(r4)
    a01c:	28c00017 	ldw	r3,0(r5)
    a020:	10c0141e 	bne	r2,r3,a074 <strcmp+0x68>
    a024:	027fbff4 	movhi	r9,65279
    a028:	4a7fbfc4 	addi	r9,r9,-257
    a02c:	0086303a 	nor	r3,zero,r2
    a030:	02202074 	movhi	r8,32897
    a034:	1245883a 	add	r2,r2,r9
    a038:	42202004 	addi	r8,r8,-32640
    a03c:	10c4703a 	and	r2,r2,r3
    a040:	1204703a 	and	r2,r2,r8
    a044:	10000226 	beq	r2,zero,a050 <strcmp+0x44>
    a048:	00002306 	br	a0d8 <strcmp+0xcc>
    a04c:	1000221e 	bne	r2,zero,a0d8 <strcmp+0xcc>
    a050:	21000104 	addi	r4,r4,4
    a054:	20c00017 	ldw	r3,0(r4)
    a058:	29400104 	addi	r5,r5,4
    a05c:	29800017 	ldw	r6,0(r5)
    a060:	1a4f883a 	add	r7,r3,r9
    a064:	00c4303a 	nor	r2,zero,r3
    a068:	3884703a 	and	r2,r7,r2
    a06c:	1204703a 	and	r2,r2,r8
    a070:	19bff626 	beq	r3,r6,a04c <__alt_exception_stack_pointer+0xf800a04c>
    a074:	20800003 	ldbu	r2,0(r4)
    a078:	10c03fcc 	andi	r3,r2,255
    a07c:	18c0201c 	xori	r3,r3,128
    a080:	18ffe004 	addi	r3,r3,-128
    a084:	18000c26 	beq	r3,zero,a0b8 <strcmp+0xac>
    a088:	29800007 	ldb	r6,0(r5)
    a08c:	19800326 	beq	r3,r6,a09c <strcmp+0x90>
    a090:	00001306 	br	a0e0 <strcmp+0xd4>
    a094:	29800007 	ldb	r6,0(r5)
    a098:	11800b1e 	bne	r2,r6,a0c8 <strcmp+0xbc>
    a09c:	21000044 	addi	r4,r4,1
    a0a0:	20c00003 	ldbu	r3,0(r4)
    a0a4:	29400044 	addi	r5,r5,1
    a0a8:	18803fcc 	andi	r2,r3,255
    a0ac:	1080201c 	xori	r2,r2,128
    a0b0:	10bfe004 	addi	r2,r2,-128
    a0b4:	103ff71e 	bne	r2,zero,a094 <__alt_exception_stack_pointer+0xf800a094>
    a0b8:	0007883a 	mov	r3,zero
    a0bc:	28800003 	ldbu	r2,0(r5)
    a0c0:	1885c83a 	sub	r2,r3,r2
    a0c4:	f800283a 	ret
    a0c8:	28800003 	ldbu	r2,0(r5)
    a0cc:	18c03fcc 	andi	r3,r3,255
    a0d0:	1885c83a 	sub	r2,r3,r2
    a0d4:	f800283a 	ret
    a0d8:	0005883a 	mov	r2,zero
    a0dc:	f800283a 	ret
    a0e0:	10c03fcc 	andi	r3,r2,255
    a0e4:	003ff506 	br	a0bc <__alt_exception_stack_pointer+0xf800a0bc>

0000a0e8 <__sprint_r.part.0>:
    a0e8:	28801917 	ldw	r2,100(r5)
    a0ec:	defff604 	addi	sp,sp,-40
    a0f0:	dd400515 	stw	r21,20(sp)
    a0f4:	dfc00915 	stw	ra,36(sp)
    a0f8:	df000815 	stw	fp,32(sp)
    a0fc:	ddc00715 	stw	r23,28(sp)
    a100:	dd800615 	stw	r22,24(sp)
    a104:	dd000415 	stw	r20,16(sp)
    a108:	dcc00315 	stw	r19,12(sp)
    a10c:	dc800215 	stw	r18,8(sp)
    a110:	dc400115 	stw	r17,4(sp)
    a114:	dc000015 	stw	r16,0(sp)
    a118:	1088000c 	andi	r2,r2,8192
    a11c:	302b883a 	mov	r21,r6
    a120:	10002e26 	beq	r2,zero,a1dc <__sprint_r.part.0+0xf4>
    a124:	30800217 	ldw	r2,8(r6)
    a128:	35800017 	ldw	r22,0(r6)
    a12c:	10002926 	beq	r2,zero,a1d4 <__sprint_r.part.0+0xec>
    a130:	2827883a 	mov	r19,r5
    a134:	2029883a 	mov	r20,r4
    a138:	b5c00104 	addi	r23,r22,4
    a13c:	04bfffc4 	movi	r18,-1
    a140:	bc400017 	ldw	r17,0(r23)
    a144:	b4000017 	ldw	r16,0(r22)
    a148:	0039883a 	mov	fp,zero
    a14c:	8822d0ba 	srli	r17,r17,2
    a150:	8800031e 	bne	r17,zero,a160 <__sprint_r.part.0+0x78>
    a154:	00001806 	br	a1b8 <__sprint_r.part.0+0xd0>
    a158:	84000104 	addi	r16,r16,4
    a15c:	8f001526 	beq	r17,fp,a1b4 <__sprint_r.part.0+0xcc>
    a160:	81400017 	ldw	r5,0(r16)
    a164:	980d883a 	mov	r6,r19
    a168:	a009883a 	mov	r4,r20
    a16c:	000bbd80 	call	bbd8 <_fputwc_r>
    a170:	e7000044 	addi	fp,fp,1
    a174:	14bff81e 	bne	r2,r18,a158 <__alt_exception_stack_pointer+0xf800a158>
    a178:	9005883a 	mov	r2,r18
    a17c:	a8000215 	stw	zero,8(r21)
    a180:	a8000115 	stw	zero,4(r21)
    a184:	dfc00917 	ldw	ra,36(sp)
    a188:	df000817 	ldw	fp,32(sp)
    a18c:	ddc00717 	ldw	r23,28(sp)
    a190:	dd800617 	ldw	r22,24(sp)
    a194:	dd400517 	ldw	r21,20(sp)
    a198:	dd000417 	ldw	r20,16(sp)
    a19c:	dcc00317 	ldw	r19,12(sp)
    a1a0:	dc800217 	ldw	r18,8(sp)
    a1a4:	dc400117 	ldw	r17,4(sp)
    a1a8:	dc000017 	ldw	r16,0(sp)
    a1ac:	dec00a04 	addi	sp,sp,40
    a1b0:	f800283a 	ret
    a1b4:	a8800217 	ldw	r2,8(r21)
    a1b8:	8c63883a 	add	r17,r17,r17
    a1bc:	8c63883a 	add	r17,r17,r17
    a1c0:	1445c83a 	sub	r2,r2,r17
    a1c4:	a8800215 	stw	r2,8(r21)
    a1c8:	b5800204 	addi	r22,r22,8
    a1cc:	bdc00204 	addi	r23,r23,8
    a1d0:	103fdb1e 	bne	r2,zero,a140 <__alt_exception_stack_pointer+0xf800a140>
    a1d4:	0005883a 	mov	r2,zero
    a1d8:	003fe806 	br	a17c <__alt_exception_stack_pointer+0xf800a17c>
    a1dc:	0007aa80 	call	7aa8 <__sfvwrite_r>
    a1e0:	003fe606 	br	a17c <__alt_exception_stack_pointer+0xf800a17c>

0000a1e4 <__sprint_r>:
    a1e4:	30c00217 	ldw	r3,8(r6)
    a1e8:	18000126 	beq	r3,zero,a1f0 <__sprint_r+0xc>
    a1ec:	000a0e81 	jmpi	a0e8 <__sprint_r.part.0>
    a1f0:	30000115 	stw	zero,4(r6)
    a1f4:	0005883a 	mov	r2,zero
    a1f8:	f800283a 	ret

0000a1fc <___vfiprintf_internal_r>:
    a1fc:	deffca04 	addi	sp,sp,-216
    a200:	dd403115 	stw	r21,196(sp)
    a204:	dfc03515 	stw	ra,212(sp)
    a208:	df003415 	stw	fp,208(sp)
    a20c:	ddc03315 	stw	r23,204(sp)
    a210:	dd803215 	stw	r22,200(sp)
    a214:	dd003015 	stw	r20,192(sp)
    a218:	dcc02f15 	stw	r19,188(sp)
    a21c:	dc802e15 	stw	r18,184(sp)
    a220:	dc402d15 	stw	r17,180(sp)
    a224:	dc002c15 	stw	r16,176(sp)
    a228:	d9002115 	stw	r4,132(sp)
    a22c:	d9402015 	stw	r5,128(sp)
    a230:	d9c02215 	stw	r7,136(sp)
    a234:	302b883a 	mov	r21,r6
    a238:	20000226 	beq	r4,zero,a244 <___vfiprintf_internal_r+0x48>
    a23c:	20800e17 	ldw	r2,56(r4)
    a240:	1000cf26 	beq	r2,zero,a580 <___vfiprintf_internal_r+0x384>
    a244:	d8c02017 	ldw	r3,128(sp)
    a248:	1880030b 	ldhu	r2,12(r3)
    a24c:	10c8000c 	andi	r3,r2,8192
    a250:	1800071e 	bne	r3,zero,a270 <___vfiprintf_internal_r+0x74>
    a254:	d9402017 	ldw	r5,128(sp)
    a258:	00f7ffc4 	movi	r3,-8193
    a25c:	10880014 	ori	r2,r2,8192
    a260:	29001917 	ldw	r4,100(r5)
    a264:	2880030d 	sth	r2,12(r5)
    a268:	20c6703a 	and	r3,r4,r3
    a26c:	28c01915 	stw	r3,100(r5)
    a270:	10c0020c 	andi	r3,r2,8
    a274:	1800a526 	beq	r3,zero,a50c <___vfiprintf_internal_r+0x310>
    a278:	d9002017 	ldw	r4,128(sp)
    a27c:	20c00417 	ldw	r3,16(r4)
    a280:	1800a226 	beq	r3,zero,a50c <___vfiprintf_internal_r+0x310>
    a284:	1080068c 	andi	r2,r2,26
    a288:	00c00284 	movi	r3,10
    a28c:	10c0a826 	beq	r2,r3,a530 <___vfiprintf_internal_r+0x334>
    a290:	d9001a04 	addi	r4,sp,104
    a294:	d94019c4 	addi	r5,sp,103
    a298:	04800074 	movhi	r18,1
    a29c:	2145c83a 	sub	r2,r4,r5
    a2a0:	948ac304 	addi	r18,r18,11020
    a2a4:	d9001e15 	stw	r4,120(sp)
    a2a8:	d9401f15 	stw	r5,124(sp)
    a2ac:	dec01a15 	stw	sp,104(sp)
    a2b0:	d8001c15 	stw	zero,112(sp)
    a2b4:	d8001b15 	stw	zero,108(sp)
    a2b8:	d811883a 	mov	r8,sp
    a2bc:	d8002615 	stw	zero,152(sp)
    a2c0:	d8002415 	stw	zero,144(sp)
    a2c4:	d8802815 	stw	r2,160(sp)
    a2c8:	a82d883a 	mov	r22,r21
    a2cc:	b0800007 	ldb	r2,0(r22)
    a2d0:	10040d26 	beq	r2,zero,b308 <___vfiprintf_internal_r+0x110c>
    a2d4:	00c00944 	movi	r3,37
    a2d8:	b029883a 	mov	r20,r22
    a2dc:	10c0021e 	bne	r2,r3,a2e8 <___vfiprintf_internal_r+0xec>
    a2e0:	00001606 	br	a33c <___vfiprintf_internal_r+0x140>
    a2e4:	10c00326 	beq	r2,r3,a2f4 <___vfiprintf_internal_r+0xf8>
    a2e8:	a5000044 	addi	r20,r20,1
    a2ec:	a0800007 	ldb	r2,0(r20)
    a2f0:	103ffc1e 	bne	r2,zero,a2e4 <__alt_exception_stack_pointer+0xf800a2e4>
    a2f4:	a5a1c83a 	sub	r16,r20,r22
    a2f8:	80001026 	beq	r16,zero,a33c <___vfiprintf_internal_r+0x140>
    a2fc:	d8c01c17 	ldw	r3,112(sp)
    a300:	d8801b17 	ldw	r2,108(sp)
    a304:	45800015 	stw	r22,0(r8)
    a308:	80c7883a 	add	r3,r16,r3
    a30c:	10800044 	addi	r2,r2,1
    a310:	44000115 	stw	r16,4(r8)
    a314:	d8c01c15 	stw	r3,112(sp)
    a318:	d8801b15 	stw	r2,108(sp)
    a31c:	010001c4 	movi	r4,7
    a320:	2080750e 	bge	r4,r2,a4f8 <___vfiprintf_internal_r+0x2fc>
    a324:	1803951e 	bne	r3,zero,b17c <___vfiprintf_internal_r+0xf80>
    a328:	d8c02417 	ldw	r3,144(sp)
    a32c:	d8001b15 	stw	zero,108(sp)
    a330:	d811883a 	mov	r8,sp
    a334:	1c07883a 	add	r3,r3,r16
    a338:	d8c02415 	stw	r3,144(sp)
    a33c:	a0800007 	ldb	r2,0(r20)
    a340:	1002e026 	beq	r2,zero,aec4 <___vfiprintf_internal_r+0xcc8>
    a344:	a5800044 	addi	r22,r20,1
    a348:	a0c00047 	ldb	r3,1(r20)
    a34c:	d8001d85 	stb	zero,118(sp)
    a350:	0027883a 	mov	r19,zero
    a354:	d8002305 	stb	zero,140(sp)
    a358:	043fffc4 	movi	r16,-1
    a35c:	d8002515 	stw	zero,148(sp)
    a360:	0023883a 	mov	r17,zero
    a364:	05001604 	movi	r20,88
    a368:	05400244 	movi	r21,9
    a36c:	402f883a 	mov	r23,r8
    a370:	b5800044 	addi	r22,r22,1
    a374:	18bff804 	addi	r2,r3,-32
    a378:	a0827736 	bltu	r20,r2,ad58 <___vfiprintf_internal_r+0xb5c>
    a37c:	100490ba 	slli	r2,r2,2
    a380:	01000074 	movhi	r4,1
    a384:	2128e504 	addi	r4,r4,-23660
    a388:	1105883a 	add	r2,r2,r4
    a38c:	10800017 	ldw	r2,0(r2)
    a390:	1000683a 	jmp	r2
    a394:	0000aa58 	cmpnei	zero,zero,681
    a398:	0000ad58 	cmpnei	zero,zero,693
    a39c:	0000ad58 	cmpnei	zero,zero,693
    a3a0:	0000aa74 	movhi	zero,681
    a3a4:	0000ad58 	cmpnei	zero,zero,693
    a3a8:	0000ad58 	cmpnei	zero,zero,693
    a3ac:	0000ad58 	cmpnei	zero,zero,693
    a3b0:	0000ad58 	cmpnei	zero,zero,693
    a3b4:	0000ad58 	cmpnei	zero,zero,693
    a3b8:	0000ad58 	cmpnei	zero,zero,693
    a3bc:	0000ac7c 	xorhi	zero,zero,689
    a3c0:	0000aca0 	cmpeqi	zero,zero,690
    a3c4:	0000ad58 	cmpnei	zero,zero,693
    a3c8:	0000a598 	cmpnei	zero,zero,662
    a3cc:	0000acb4 	movhi	zero,690
    a3d0:	0000ad58 	cmpnei	zero,zero,693
    a3d4:	0000aa80 	call	aa8 <init_keyboard+0x378>
    a3d8:	0000aa8c 	andi	zero,zero,682
    a3dc:	0000aa8c 	andi	zero,zero,682
    a3e0:	0000aa8c 	andi	zero,zero,682
    a3e4:	0000aa8c 	andi	zero,zero,682
    a3e8:	0000aa8c 	andi	zero,zero,682
    a3ec:	0000aa8c 	andi	zero,zero,682
    a3f0:	0000aa8c 	andi	zero,zero,682
    a3f4:	0000aa8c 	andi	zero,zero,682
    a3f8:	0000aa8c 	andi	zero,zero,682
    a3fc:	0000ad58 	cmpnei	zero,zero,693
    a400:	0000ad58 	cmpnei	zero,zero,693
    a404:	0000ad58 	cmpnei	zero,zero,693
    a408:	0000ad58 	cmpnei	zero,zero,693
    a40c:	0000ad58 	cmpnei	zero,zero,693
    a410:	0000ad58 	cmpnei	zero,zero,693
    a414:	0000ad58 	cmpnei	zero,zero,693
    a418:	0000ad58 	cmpnei	zero,zero,693
    a41c:	0000ad58 	cmpnei	zero,zero,693
    a420:	0000ad58 	cmpnei	zero,zero,693
    a424:	0000aacc 	andi	zero,zero,683
    a428:	0000ad58 	cmpnei	zero,zero,693
    a42c:	0000ad58 	cmpnei	zero,zero,693
    a430:	0000ad58 	cmpnei	zero,zero,693
    a434:	0000ad58 	cmpnei	zero,zero,693
    a438:	0000ad58 	cmpnei	zero,zero,693
    a43c:	0000ad58 	cmpnei	zero,zero,693
    a440:	0000ad58 	cmpnei	zero,zero,693
    a444:	0000ad58 	cmpnei	zero,zero,693
    a448:	0000ad58 	cmpnei	zero,zero,693
    a44c:	0000ad58 	cmpnei	zero,zero,693
    a450:	0000ab08 	cmpgei	zero,zero,684
    a454:	0000ad58 	cmpnei	zero,zero,693
    a458:	0000ad58 	cmpnei	zero,zero,693
    a45c:	0000ad58 	cmpnei	zero,zero,693
    a460:	0000ad58 	cmpnei	zero,zero,693
    a464:	0000ad58 	cmpnei	zero,zero,693
    a468:	0000ab64 	muli	zero,zero,685
    a46c:	0000ad58 	cmpnei	zero,zero,693
    a470:	0000ad58 	cmpnei	zero,zero,693
    a474:	0000abd8 	cmpnei	zero,zero,687
    a478:	0000ad58 	cmpnei	zero,zero,693
    a47c:	0000ad58 	cmpnei	zero,zero,693
    a480:	0000ad58 	cmpnei	zero,zero,693
    a484:	0000ad58 	cmpnei	zero,zero,693
    a488:	0000ad58 	cmpnei	zero,zero,693
    a48c:	0000ad58 	cmpnei	zero,zero,693
    a490:	0000ad58 	cmpnei	zero,zero,693
    a494:	0000ad58 	cmpnei	zero,zero,693
    a498:	0000ad58 	cmpnei	zero,zero,693
    a49c:	0000ad58 	cmpnei	zero,zero,693
    a4a0:	0000a980 	call	a98 <init_keyboard+0x368>
    a4a4:	0000a9b0 	cmpltui	zero,zero,678
    a4a8:	0000ad58 	cmpnei	zero,zero,693
    a4ac:	0000ad58 	cmpnei	zero,zero,693
    a4b0:	0000ad58 	cmpnei	zero,zero,693
    a4b4:	0000ad00 	call	ad0 <init_keyboard+0x3a0>
    a4b8:	0000a9b0 	cmpltui	zero,zero,678
    a4bc:	0000ad58 	cmpnei	zero,zero,693
    a4c0:	0000ad58 	cmpnei	zero,zero,693
    a4c4:	0000a858 	cmpnei	zero,zero,673
    a4c8:	0000ad58 	cmpnei	zero,zero,693
    a4cc:	0000a86c 	andhi	zero,zero,673
    a4d0:	0000a8a4 	muli	zero,zero,674
    a4d4:	0000a5a4 	muli	zero,zero,662
    a4d8:	0000a84c 	andi	zero,zero,673
    a4dc:	0000ad58 	cmpnei	zero,zero,693
    a4e0:	0000ac18 	cmpnei	zero,zero,688
    a4e4:	0000ad58 	cmpnei	zero,zero,693
    a4e8:	0000ac64 	muli	zero,zero,689
    a4ec:	0000ad58 	cmpnei	zero,zero,693
    a4f0:	0000ad58 	cmpnei	zero,zero,693
    a4f4:	0000a928 	cmpgeui	zero,zero,676
    a4f8:	42000204 	addi	r8,r8,8
    a4fc:	d8c02417 	ldw	r3,144(sp)
    a500:	1c07883a 	add	r3,r3,r16
    a504:	d8c02415 	stw	r3,144(sp)
    a508:	003f8c06 	br	a33c <__alt_exception_stack_pointer+0xf800a33c>
    a50c:	d9402017 	ldw	r5,128(sp)
    a510:	d9002117 	ldw	r4,132(sp)
    a514:	00056180 	call	5618 <__swsetup_r>
    a518:	1003c11e 	bne	r2,zero,b420 <___vfiprintf_internal_r+0x1224>
    a51c:	d9402017 	ldw	r5,128(sp)
    a520:	00c00284 	movi	r3,10
    a524:	2880030b 	ldhu	r2,12(r5)
    a528:	1080068c 	andi	r2,r2,26
    a52c:	10ff581e 	bne	r2,r3,a290 <__alt_exception_stack_pointer+0xf800a290>
    a530:	d8c02017 	ldw	r3,128(sp)
    a534:	1880038f 	ldh	r2,14(r3)
    a538:	103f5516 	blt	r2,zero,a290 <__alt_exception_stack_pointer+0xf800a290>
    a53c:	d9c02217 	ldw	r7,136(sp)
    a540:	d9002117 	ldw	r4,132(sp)
    a544:	a80d883a 	mov	r6,r21
    a548:	180b883a 	mov	r5,r3
    a54c:	000b7240 	call	b724 <__sbprintf>
    a550:	dfc03517 	ldw	ra,212(sp)
    a554:	df003417 	ldw	fp,208(sp)
    a558:	ddc03317 	ldw	r23,204(sp)
    a55c:	dd803217 	ldw	r22,200(sp)
    a560:	dd403117 	ldw	r21,196(sp)
    a564:	dd003017 	ldw	r20,192(sp)
    a568:	dcc02f17 	ldw	r19,188(sp)
    a56c:	dc802e17 	ldw	r18,184(sp)
    a570:	dc402d17 	ldw	r17,180(sp)
    a574:	dc002c17 	ldw	r16,176(sp)
    a578:	dec03604 	addi	sp,sp,216
    a57c:	f800283a 	ret
    a580:	00076240 	call	7624 <__sinit>
    a584:	003f2f06 	br	a244 <__alt_exception_stack_pointer+0xf800a244>
    a588:	d8c02517 	ldw	r3,148(sp)
    a58c:	d8802215 	stw	r2,136(sp)
    a590:	00c7c83a 	sub	r3,zero,r3
    a594:	d8c02515 	stw	r3,148(sp)
    a598:	8c400114 	ori	r17,r17,4
    a59c:	b0c00007 	ldb	r3,0(r22)
    a5a0:	003f7306 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    a5a4:	00800c04 	movi	r2,48
    a5a8:	d9402217 	ldw	r5,136(sp)
    a5ac:	d8801d05 	stb	r2,116(sp)
    a5b0:	00801e04 	movi	r2,120
    a5b4:	d8801d45 	stb	r2,117(sp)
    a5b8:	d8001d85 	stb	zero,118(sp)
    a5bc:	b811883a 	mov	r8,r23
    a5c0:	28c00104 	addi	r3,r5,4
    a5c4:	2cc00017 	ldw	r19,0(r5)
    a5c8:	0029883a 	mov	r20,zero
    a5cc:	88800094 	ori	r2,r17,2
    a5d0:	80032516 	blt	r16,zero,b268 <___vfiprintf_internal_r+0x106c>
    a5d4:	00bfdfc4 	movi	r2,-129
    a5d8:	88a2703a 	and	r17,r17,r2
    a5dc:	d8c02215 	stw	r3,136(sp)
    a5e0:	8c400094 	ori	r17,r17,2
    a5e4:	98032a1e 	bne	r19,zero,b290 <___vfiprintf_internal_r+0x1094>
    a5e8:	00800074 	movhi	r2,1
    a5ec:	108a6304 	addi	r2,r2,10636
    a5f0:	d8802615 	stw	r2,152(sp)
    a5f4:	002b883a 	mov	r21,zero
    a5f8:	8001741e 	bne	r16,zero,abcc <___vfiprintf_internal_r+0x9d0>
    a5fc:	0021883a 	mov	r16,zero
    a600:	0029883a 	mov	r20,zero
    a604:	ddc01a04 	addi	r23,sp,104
    a608:	8027883a 	mov	r19,r16
    a60c:	8500010e 	bge	r16,r20,a614 <___vfiprintf_internal_r+0x418>
    a610:	a027883a 	mov	r19,r20
    a614:	ad403fcc 	andi	r21,r21,255
    a618:	ad40201c 	xori	r21,r21,128
    a61c:	ad7fe004 	addi	r21,r21,-128
    a620:	a8000126 	beq	r21,zero,a628 <___vfiprintf_internal_r+0x42c>
    a624:	9cc00044 	addi	r19,r19,1
    a628:	89c0008c 	andi	r7,r17,2
    a62c:	38000126 	beq	r7,zero,a634 <___vfiprintf_internal_r+0x438>
    a630:	9cc00084 	addi	r19,r19,2
    a634:	88c0210c 	andi	r3,r17,132
    a638:	1801dd1e 	bne	r3,zero,adb0 <___vfiprintf_internal_r+0xbb4>
    a63c:	d9402517 	ldw	r5,148(sp)
    a640:	2cebc83a 	sub	r21,r5,r19
    a644:	0541da0e 	bge	zero,r21,adb0 <___vfiprintf_internal_r+0xbb4>
    a648:	07000404 	movi	fp,16
    a64c:	d8801c17 	ldw	r2,112(sp)
    a650:	e543be0e 	bge	fp,r21,b54c <___vfiprintf_internal_r+0x1350>
    a654:	01400074 	movhi	r5,1
    a658:	294ac704 	addi	r5,r5,11036
    a65c:	dc002715 	stw	r16,156(sp)
    a660:	d9801b17 	ldw	r6,108(sp)
    a664:	a821883a 	mov	r16,r21
    a668:	d9402315 	stw	r5,140(sp)
    a66c:	028001c4 	movi	r10,7
    a670:	d9c02915 	stw	r7,164(sp)
    a674:	182b883a 	mov	r21,r3
    a678:	00000506 	br	a690 <___vfiprintf_internal_r+0x494>
    a67c:	31000084 	addi	r4,r6,2
    a680:	42000204 	addi	r8,r8,8
    a684:	180d883a 	mov	r6,r3
    a688:	843ffc04 	addi	r16,r16,-16
    a68c:	e4000f0e 	bge	fp,r16,a6cc <___vfiprintf_internal_r+0x4d0>
    a690:	01000074 	movhi	r4,1
    a694:	10800404 	addi	r2,r2,16
    a698:	30c00044 	addi	r3,r6,1
    a69c:	210ac704 	addi	r4,r4,11036
    a6a0:	41000015 	stw	r4,0(r8)
    a6a4:	47000115 	stw	fp,4(r8)
    a6a8:	d8801c15 	stw	r2,112(sp)
    a6ac:	d8c01b15 	stw	r3,108(sp)
    a6b0:	50fff20e 	bge	r10,r3,a67c <__alt_exception_stack_pointer+0xf800a67c>
    a6b4:	1001b21e 	bne	r2,zero,ad80 <___vfiprintf_internal_r+0xb84>
    a6b8:	843ffc04 	addi	r16,r16,-16
    a6bc:	000d883a 	mov	r6,zero
    a6c0:	01000044 	movi	r4,1
    a6c4:	d811883a 	mov	r8,sp
    a6c8:	e43ff116 	blt	fp,r16,a690 <__alt_exception_stack_pointer+0xf800a690>
    a6cc:	a807883a 	mov	r3,r21
    a6d0:	d9c02917 	ldw	r7,164(sp)
    a6d4:	802b883a 	mov	r21,r16
    a6d8:	dc002717 	ldw	r16,156(sp)
    a6dc:	d9402317 	ldw	r5,140(sp)
    a6e0:	a885883a 	add	r2,r21,r2
    a6e4:	45400115 	stw	r21,4(r8)
    a6e8:	41400015 	stw	r5,0(r8)
    a6ec:	d8801c15 	stw	r2,112(sp)
    a6f0:	d9001b15 	stw	r4,108(sp)
    a6f4:	014001c4 	movi	r5,7
    a6f8:	29026216 	blt	r5,r4,b084 <___vfiprintf_internal_r+0xe88>
    a6fc:	d9801d87 	ldb	r6,118(sp)
    a700:	42000204 	addi	r8,r8,8
    a704:	21400044 	addi	r5,r4,1
    a708:	3001ae1e 	bne	r6,zero,adc4 <___vfiprintf_internal_r+0xbc8>
    a70c:	3801bb26 	beq	r7,zero,adfc <___vfiprintf_internal_r+0xc00>
    a710:	d9001d04 	addi	r4,sp,116
    a714:	10800084 	addi	r2,r2,2
    a718:	41000015 	stw	r4,0(r8)
    a71c:	01000084 	movi	r4,2
    a720:	41000115 	stw	r4,4(r8)
    a724:	d8801c15 	stw	r2,112(sp)
    a728:	d9401b15 	stw	r5,108(sp)
    a72c:	010001c4 	movi	r4,7
    a730:	2142680e 	bge	r4,r5,b0d4 <___vfiprintf_internal_r+0xed8>
    a734:	1002b11e 	bne	r2,zero,b1fc <___vfiprintf_internal_r+0x1000>
    a738:	01802004 	movi	r6,128
    a73c:	01400044 	movi	r5,1
    a740:	0009883a 	mov	r4,zero
    a744:	d811883a 	mov	r8,sp
    a748:	1981ae1e 	bne	r3,r6,ae04 <___vfiprintf_internal_r+0xc08>
    a74c:	d8c02517 	ldw	r3,148(sp)
    a750:	1cf9c83a 	sub	fp,r3,r19
    a754:	0701ab0e 	bge	zero,fp,ae04 <___vfiprintf_internal_r+0xc08>
    a758:	05400404 	movi	r21,16
    a75c:	af03a90e 	bge	r21,fp,b604 <___vfiprintf_internal_r+0x1408>
    a760:	01400074 	movhi	r5,1
    a764:	294ac304 	addi	r5,r5,11020
    a768:	d9402315 	stw	r5,140(sp)
    a76c:	01c001c4 	movi	r7,7
    a770:	00000506 	br	a788 <___vfiprintf_internal_r+0x58c>
    a774:	21800084 	addi	r6,r4,2
    a778:	42000204 	addi	r8,r8,8
    a77c:	1809883a 	mov	r4,r3
    a780:	e73ffc04 	addi	fp,fp,-16
    a784:	af000d0e 	bge	r21,fp,a7bc <___vfiprintf_internal_r+0x5c0>
    a788:	10800404 	addi	r2,r2,16
    a78c:	20c00044 	addi	r3,r4,1
    a790:	44800015 	stw	r18,0(r8)
    a794:	45400115 	stw	r21,4(r8)
    a798:	d8801c15 	stw	r2,112(sp)
    a79c:	d8c01b15 	stw	r3,108(sp)
    a7a0:	38fff40e 	bge	r7,r3,a774 <__alt_exception_stack_pointer+0xf800a774>
    a7a4:	10022b1e 	bne	r2,zero,b054 <___vfiprintf_internal_r+0xe58>
    a7a8:	e73ffc04 	addi	fp,fp,-16
    a7ac:	01800044 	movi	r6,1
    a7b0:	0009883a 	mov	r4,zero
    a7b4:	d811883a 	mov	r8,sp
    a7b8:	af3ff316 	blt	r21,fp,a788 <__alt_exception_stack_pointer+0xf800a788>
    a7bc:	d8c02317 	ldw	r3,140(sp)
    a7c0:	1705883a 	add	r2,r2,fp
    a7c4:	47000115 	stw	fp,4(r8)
    a7c8:	40c00015 	stw	r3,0(r8)
    a7cc:	d8801c15 	stw	r2,112(sp)
    a7d0:	d9801b15 	stw	r6,108(sp)
    a7d4:	00c001c4 	movi	r3,7
    a7d8:	19829416 	blt	r3,r6,b22c <___vfiprintf_internal_r+0x1030>
    a7dc:	8521c83a 	sub	r16,r16,r20
    a7e0:	42000204 	addi	r8,r8,8
    a7e4:	31400044 	addi	r5,r6,1
    a7e8:	3009883a 	mov	r4,r6
    a7ec:	04018716 	blt	zero,r16,ae0c <___vfiprintf_internal_r+0xc10>
    a7f0:	a085883a 	add	r2,r20,r2
    a7f4:	45c00015 	stw	r23,0(r8)
    a7f8:	45000115 	stw	r20,4(r8)
    a7fc:	d8801c15 	stw	r2,112(sp)
    a800:	d9401b15 	stw	r5,108(sp)
    a804:	00c001c4 	movi	r3,7
    a808:	1941c20e 	bge	r3,r5,af14 <___vfiprintf_internal_r+0xd18>
    a80c:	1002531e 	bne	r2,zero,b15c <___vfiprintf_internal_r+0xf60>
    a810:	d8001b15 	stw	zero,108(sp)
    a814:	8c40010c 	andi	r17,r17,4
    a818:	88023226 	beq	r17,zero,b0e4 <___vfiprintf_internal_r+0xee8>
    a81c:	d9002517 	ldw	r4,148(sp)
    a820:	24e3c83a 	sub	r17,r4,r19
    a824:	04432916 	blt	zero,r17,b4cc <___vfiprintf_internal_r+0x12d0>
    a828:	d8802517 	ldw	r2,148(sp)
    a82c:	14c0010e 	bge	r2,r19,a834 <___vfiprintf_internal_r+0x638>
    a830:	9805883a 	mov	r2,r19
    a834:	d8c02417 	ldw	r3,144(sp)
    a838:	1887883a 	add	r3,r3,r2
    a83c:	d8c02415 	stw	r3,144(sp)
    a840:	d8001b15 	stw	zero,108(sp)
    a844:	d811883a 	mov	r8,sp
    a848:	003ea006 	br	a2cc <__alt_exception_stack_pointer+0xf800a2cc>
    a84c:	8c400814 	ori	r17,r17,32
    a850:	b0c00007 	ldb	r3,0(r22)
    a854:	003ec606 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    a858:	b0c00007 	ldb	r3,0(r22)
    a85c:	00801b04 	movi	r2,108
    a860:	18832026 	beq	r3,r2,b4e4 <___vfiprintf_internal_r+0x12e8>
    a864:	8c400414 	ori	r17,r17,16
    a868:	003ec106 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    a86c:	9cc03fcc 	andi	r19,r19,255
    a870:	b811883a 	mov	r8,r23
    a874:	9803981e 	bne	r19,zero,b6d8 <___vfiprintf_internal_r+0x14dc>
    a878:	8880080c 	andi	r2,r17,32
    a87c:	1002be26 	beq	r2,zero,b378 <___vfiprintf_internal_r+0x117c>
    a880:	d9002217 	ldw	r4,136(sp)
    a884:	d9402417 	ldw	r5,144(sp)
    a888:	20800017 	ldw	r2,0(r4)
    a88c:	2807d7fa 	srai	r3,r5,31
    a890:	21000104 	addi	r4,r4,4
    a894:	d9002215 	stw	r4,136(sp)
    a898:	11400015 	stw	r5,0(r2)
    a89c:	10c00115 	stw	r3,4(r2)
    a8a0:	003e8a06 	br	a2cc <__alt_exception_stack_pointer+0xf800a2cc>
    a8a4:	9cc03fcc 	andi	r19,r19,255
    a8a8:	b811883a 	mov	r8,r23
    a8ac:	9803871e 	bne	r19,zero,b6cc <___vfiprintf_internal_r+0x14d0>
    a8b0:	8880080c 	andi	r2,r17,32
    a8b4:	10009a26 	beq	r2,zero,ab20 <___vfiprintf_internal_r+0x924>
    a8b8:	d9002217 	ldw	r4,136(sp)
    a8bc:	d8001d85 	stb	zero,118(sp)
    a8c0:	20800204 	addi	r2,r4,8
    a8c4:	24c00017 	ldw	r19,0(r4)
    a8c8:	25000117 	ldw	r20,4(r4)
    a8cc:	8002a416 	blt	r16,zero,b360 <___vfiprintf_internal_r+0x1164>
    a8d0:	013fdfc4 	movi	r4,-129
    a8d4:	9d06b03a 	or	r3,r19,r20
    a8d8:	d8802215 	stw	r2,136(sp)
    a8dc:	8922703a 	and	r17,r17,r4
    a8e0:	18009b26 	beq	r3,zero,ab50 <___vfiprintf_internal_r+0x954>
    a8e4:	002b883a 	mov	r21,zero
    a8e8:	ddc01a04 	addi	r23,sp,104
    a8ec:	9806d0fa 	srli	r3,r19,3
    a8f0:	a008977a 	slli	r4,r20,29
    a8f4:	a028d0fa 	srli	r20,r20,3
    a8f8:	9cc001cc 	andi	r19,r19,7
    a8fc:	98800c04 	addi	r2,r19,48
    a900:	bdffffc4 	addi	r23,r23,-1
    a904:	20e6b03a 	or	r19,r4,r3
    a908:	b8800005 	stb	r2,0(r23)
    a90c:	9d06b03a 	or	r3,r19,r20
    a910:	183ff61e 	bne	r3,zero,a8ec <__alt_exception_stack_pointer+0xf800a8ec>
    a914:	88c0004c 	andi	r3,r17,1
    a918:	18021f1e 	bne	r3,zero,b198 <___vfiprintf_internal_r+0xf9c>
    a91c:	d9401e17 	ldw	r5,120(sp)
    a920:	2de9c83a 	sub	r20,r5,r23
    a924:	003f3806 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    a928:	9cc03fcc 	andi	r19,r19,255
    a92c:	b811883a 	mov	r8,r23
    a930:	98034f1e 	bne	r19,zero,b670 <___vfiprintf_internal_r+0x1474>
    a934:	00800074 	movhi	r2,1
    a938:	108a6304 	addi	r2,r2,10636
    a93c:	d8802615 	stw	r2,152(sp)
    a940:	8880080c 	andi	r2,r17,32
    a944:	1000ac26 	beq	r2,zero,abf8 <___vfiprintf_internal_r+0x9fc>
    a948:	d9002217 	ldw	r4,136(sp)
    a94c:	24c00017 	ldw	r19,0(r4)
    a950:	25000117 	ldw	r20,4(r4)
    a954:	21000204 	addi	r4,r4,8
    a958:	d9002215 	stw	r4,136(sp)
    a95c:	8880004c 	andi	r2,r17,1
    a960:	1001e726 	beq	r2,zero,b100 <___vfiprintf_internal_r+0xf04>
    a964:	9d04b03a 	or	r2,r19,r20
    a968:	10025c1e 	bne	r2,zero,b2dc <___vfiprintf_internal_r+0x10e0>
    a96c:	d8001d85 	stb	zero,118(sp)
    a970:	80024416 	blt	r16,zero,b284 <___vfiprintf_internal_r+0x1088>
    a974:	00bfdfc4 	movi	r2,-129
    a978:	88a2703a 	and	r17,r17,r2
    a97c:	003f1d06 	br	a5f4 <__alt_exception_stack_pointer+0xf800a5f4>
    a980:	d8c02217 	ldw	r3,136(sp)
    a984:	04c00044 	movi	r19,1
    a988:	b811883a 	mov	r8,r23
    a98c:	18800017 	ldw	r2,0(r3)
    a990:	18c00104 	addi	r3,r3,4
    a994:	d8001d85 	stb	zero,118(sp)
    a998:	d8801005 	stb	r2,64(sp)
    a99c:	d8c02215 	stw	r3,136(sp)
    a9a0:	9829883a 	mov	r20,r19
    a9a4:	ddc01004 	addi	r23,sp,64
    a9a8:	0021883a 	mov	r16,zero
    a9ac:	003f1e06 	br	a628 <__alt_exception_stack_pointer+0xf800a628>
    a9b0:	9cc03fcc 	andi	r19,r19,255
    a9b4:	b811883a 	mov	r8,r23
    a9b8:	9803331e 	bne	r19,zero,b688 <___vfiprintf_internal_r+0x148c>
    a9bc:	8880080c 	andi	r2,r17,32
    a9c0:	10004826 	beq	r2,zero,aae4 <___vfiprintf_internal_r+0x8e8>
    a9c4:	d9002217 	ldw	r4,136(sp)
    a9c8:	20800117 	ldw	r2,4(r4)
    a9cc:	24c00017 	ldw	r19,0(r4)
    a9d0:	21000204 	addi	r4,r4,8
    a9d4:	d9002215 	stw	r4,136(sp)
    a9d8:	1029883a 	mov	r20,r2
    a9dc:	10024c16 	blt	r2,zero,b310 <___vfiprintf_internal_r+0x1114>
    a9e0:	dd401d83 	ldbu	r21,118(sp)
    a9e4:	80007116 	blt	r16,zero,abac <___vfiprintf_internal_r+0x9b0>
    a9e8:	00ffdfc4 	movi	r3,-129
    a9ec:	9d04b03a 	or	r2,r19,r20
    a9f0:	88e2703a 	and	r17,r17,r3
    a9f4:	1000d126 	beq	r2,zero,ad3c <___vfiprintf_internal_r+0xb40>
    a9f8:	a0023526 	beq	r20,zero,b2d0 <___vfiprintf_internal_r+0x10d4>
    a9fc:	ddc01a04 	addi	r23,sp,104
    aa00:	4039883a 	mov	fp,r8
    aa04:	9809883a 	mov	r4,r19
    aa08:	a00b883a 	mov	r5,r20
    aa0c:	01800284 	movi	r6,10
    aa10:	000f883a 	mov	r7,zero
    aa14:	000c7280 	call	c728 <__umoddi3>
    aa18:	10800c04 	addi	r2,r2,48
    aa1c:	bdffffc4 	addi	r23,r23,-1
    aa20:	9809883a 	mov	r4,r19
    aa24:	a00b883a 	mov	r5,r20
    aa28:	b8800005 	stb	r2,0(r23)
    aa2c:	01800284 	movi	r6,10
    aa30:	000f883a 	mov	r7,zero
    aa34:	000c12c0 	call	c12c <__udivdi3>
    aa38:	1027883a 	mov	r19,r2
    aa3c:	10c4b03a 	or	r2,r2,r3
    aa40:	1829883a 	mov	r20,r3
    aa44:	103fef1e 	bne	r2,zero,aa04 <__alt_exception_stack_pointer+0xf800aa04>
    aa48:	d9001e17 	ldw	r4,120(sp)
    aa4c:	e011883a 	mov	r8,fp
    aa50:	25e9c83a 	sub	r20,r4,r23
    aa54:	003eec06 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    aa58:	d8802307 	ldb	r2,140(sp)
    aa5c:	1002361e 	bne	r2,zero,b338 <___vfiprintf_internal_r+0x113c>
    aa60:	00c00804 	movi	r3,32
    aa64:	d8c02305 	stb	r3,140(sp)
    aa68:	04c00044 	movi	r19,1
    aa6c:	b0c00007 	ldb	r3,0(r22)
    aa70:	003e3f06 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    aa74:	8c400054 	ori	r17,r17,1
    aa78:	b0c00007 	ldb	r3,0(r22)
    aa7c:	003e3c06 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    aa80:	8c402014 	ori	r17,r17,128
    aa84:	b0c00007 	ldb	r3,0(r22)
    aa88:	003e3906 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    aa8c:	dc002715 	stw	r16,156(sp)
    aa90:	d8002515 	stw	zero,148(sp)
    aa94:	1f3ff404 	addi	fp,r3,-48
    aa98:	0009883a 	mov	r4,zero
    aa9c:	b021883a 	mov	r16,r22
    aaa0:	01400284 	movi	r5,10
    aaa4:	000cea00 	call	cea0 <__mulsi3>
    aaa8:	80c00007 	ldb	r3,0(r16)
    aaac:	e089883a 	add	r4,fp,r2
    aab0:	b5800044 	addi	r22,r22,1
    aab4:	1f3ff404 	addi	fp,r3,-48
    aab8:	b021883a 	mov	r16,r22
    aabc:	af3ff82e 	bgeu	r21,fp,aaa0 <__alt_exception_stack_pointer+0xf800aaa0>
    aac0:	d9002515 	stw	r4,148(sp)
    aac4:	dc002717 	ldw	r16,156(sp)
    aac8:	003e2a06 	br	a374 <__alt_exception_stack_pointer+0xf800a374>
    aacc:	9cc03fcc 	andi	r19,r19,255
    aad0:	b811883a 	mov	r8,r23
    aad4:	9802e91e 	bne	r19,zero,b67c <___vfiprintf_internal_r+0x1480>
    aad8:	8c400414 	ori	r17,r17,16
    aadc:	8880080c 	andi	r2,r17,32
    aae0:	103fb81e 	bne	r2,zero,a9c4 <__alt_exception_stack_pointer+0xf800a9c4>
    aae4:	8880040c 	andi	r2,r17,16
    aae8:	10022e26 	beq	r2,zero,b3a4 <___vfiprintf_internal_r+0x11a8>
    aaec:	d9402217 	ldw	r5,136(sp)
    aaf0:	2cc00017 	ldw	r19,0(r5)
    aaf4:	29400104 	addi	r5,r5,4
    aaf8:	d9402215 	stw	r5,136(sp)
    aafc:	9829d7fa 	srai	r20,r19,31
    ab00:	a005883a 	mov	r2,r20
    ab04:	003fb506 	br	a9dc <__alt_exception_stack_pointer+0xf800a9dc>
    ab08:	9cc03fcc 	andi	r19,r19,255
    ab0c:	b811883a 	mov	r8,r23
    ab10:	9802fa1e 	bne	r19,zero,b6fc <___vfiprintf_internal_r+0x1500>
    ab14:	8c400414 	ori	r17,r17,16
    ab18:	8880080c 	andi	r2,r17,32
    ab1c:	103f661e 	bne	r2,zero,a8b8 <__alt_exception_stack_pointer+0xf800a8b8>
    ab20:	8880040c 	andi	r2,r17,16
    ab24:	10020626 	beq	r2,zero,b340 <___vfiprintf_internal_r+0x1144>
    ab28:	d9402217 	ldw	r5,136(sp)
    ab2c:	d8001d85 	stb	zero,118(sp)
    ab30:	0029883a 	mov	r20,zero
    ab34:	28800104 	addi	r2,r5,4
    ab38:	2cc00017 	ldw	r19,0(r5)
    ab3c:	80020816 	blt	r16,zero,b360 <___vfiprintf_internal_r+0x1164>
    ab40:	00ffdfc4 	movi	r3,-129
    ab44:	d8802215 	stw	r2,136(sp)
    ab48:	88e2703a 	and	r17,r17,r3
    ab4c:	983f651e 	bne	r19,zero,a8e4 <__alt_exception_stack_pointer+0xf800a8e4>
    ab50:	002b883a 	mov	r21,zero
    ab54:	8002cf26 	beq	r16,zero,b694 <___vfiprintf_internal_r+0x1498>
    ab58:	0027883a 	mov	r19,zero
    ab5c:	0029883a 	mov	r20,zero
    ab60:	003f6106 	br	a8e8 <__alt_exception_stack_pointer+0xf800a8e8>
    ab64:	9cc03fcc 	andi	r19,r19,255
    ab68:	b811883a 	mov	r8,r23
    ab6c:	9802e01e 	bne	r19,zero,b6f0 <___vfiprintf_internal_r+0x14f4>
    ab70:	8c400414 	ori	r17,r17,16
    ab74:	8880080c 	andi	r2,r17,32
    ab78:	1000641e 	bne	r2,zero,ad0c <___vfiprintf_internal_r+0xb10>
    ab7c:	8880040c 	andi	r2,r17,16
    ab80:	1001c81e 	bne	r2,zero,b2a4 <___vfiprintf_internal_r+0x10a8>
    ab84:	8880100c 	andi	r2,r17,64
    ab88:	d8001d85 	stb	zero,118(sp)
    ab8c:	1002281e 	bne	r2,zero,b430 <___vfiprintf_internal_r+0x1234>
    ab90:	d9002217 	ldw	r4,136(sp)
    ab94:	0029883a 	mov	r20,zero
    ab98:	20800104 	addi	r2,r4,4
    ab9c:	24c00017 	ldw	r19,0(r4)
    aba0:	8001c60e 	bge	r16,zero,b2bc <___vfiprintf_internal_r+0x10c0>
    aba4:	d8802215 	stw	r2,136(sp)
    aba8:	002b883a 	mov	r21,zero
    abac:	9d04b03a 	or	r2,r19,r20
    abb0:	103f911e 	bne	r2,zero,a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    abb4:	00800044 	movi	r2,1
    abb8:	10803fcc 	andi	r2,r2,255
    abbc:	00c00044 	movi	r3,1
    abc0:	10c05f26 	beq	r2,r3,ad40 <___vfiprintf_internal_r+0xb44>
    abc4:	00c00084 	movi	r3,2
    abc8:	10ffe31e 	bne	r2,r3,ab58 <__alt_exception_stack_pointer+0xf800ab58>
    abcc:	0027883a 	mov	r19,zero
    abd0:	0029883a 	mov	r20,zero
    abd4:	00015106 	br	b11c <___vfiprintf_internal_r+0xf20>
    abd8:	9cc03fcc 	andi	r19,r19,255
    abdc:	b811883a 	mov	r8,r23
    abe0:	9802c01e 	bne	r19,zero,b6e4 <___vfiprintf_internal_r+0x14e8>
    abe4:	01400074 	movhi	r5,1
    abe8:	294a5e04 	addi	r5,r5,10616
    abec:	d9402615 	stw	r5,152(sp)
    abf0:	8880080c 	andi	r2,r17,32
    abf4:	103f541e 	bne	r2,zero,a948 <__alt_exception_stack_pointer+0xf800a948>
    abf8:	8880040c 	andi	r2,r17,16
    abfc:	1001f226 	beq	r2,zero,b3c8 <___vfiprintf_internal_r+0x11cc>
    ac00:	d9402217 	ldw	r5,136(sp)
    ac04:	0029883a 	mov	r20,zero
    ac08:	2cc00017 	ldw	r19,0(r5)
    ac0c:	29400104 	addi	r5,r5,4
    ac10:	d9402215 	stw	r5,136(sp)
    ac14:	003f5106 	br	a95c <__alt_exception_stack_pointer+0xf800a95c>
    ac18:	d8c02217 	ldw	r3,136(sp)
    ac1c:	b811883a 	mov	r8,r23
    ac20:	d8001d85 	stb	zero,118(sp)
    ac24:	1dc00017 	ldw	r23,0(r3)
    ac28:	1f000104 	addi	fp,r3,4
    ac2c:	b8025926 	beq	r23,zero,b594 <___vfiprintf_internal_r+0x1398>
    ac30:	80023316 	blt	r16,zero,b500 <___vfiprintf_internal_r+0x1304>
    ac34:	800d883a 	mov	r6,r16
    ac38:	000b883a 	mov	r5,zero
    ac3c:	b809883a 	mov	r4,r23
    ac40:	da002a15 	stw	r8,168(sp)
    ac44:	00083900 	call	8390 <memchr>
    ac48:	da002a17 	ldw	r8,168(sp)
    ac4c:	10026826 	beq	r2,zero,b5f0 <___vfiprintf_internal_r+0x13f4>
    ac50:	15e9c83a 	sub	r20,r2,r23
    ac54:	dd401d83 	ldbu	r21,118(sp)
    ac58:	df002215 	stw	fp,136(sp)
    ac5c:	0021883a 	mov	r16,zero
    ac60:	003e6906 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    ac64:	9cc03fcc 	andi	r19,r19,255
    ac68:	b811883a 	mov	r8,r23
    ac6c:	983fc126 	beq	r19,zero,ab74 <__alt_exception_stack_pointer+0xf800ab74>
    ac70:	d8c02303 	ldbu	r3,140(sp)
    ac74:	d8c01d85 	stb	r3,118(sp)
    ac78:	003fbe06 	br	ab74 <__alt_exception_stack_pointer+0xf800ab74>
    ac7c:	d9002217 	ldw	r4,136(sp)
    ac80:	d9402217 	ldw	r5,136(sp)
    ac84:	21000017 	ldw	r4,0(r4)
    ac88:	28800104 	addi	r2,r5,4
    ac8c:	d9002515 	stw	r4,148(sp)
    ac90:	203e3d16 	blt	r4,zero,a588 <__alt_exception_stack_pointer+0xf800a588>
    ac94:	d8802215 	stw	r2,136(sp)
    ac98:	b0c00007 	ldb	r3,0(r22)
    ac9c:	003db406 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    aca0:	00c00ac4 	movi	r3,43
    aca4:	d8c02305 	stb	r3,140(sp)
    aca8:	04c00044 	movi	r19,1
    acac:	b0c00007 	ldb	r3,0(r22)
    acb0:	003daf06 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    acb4:	b0c00007 	ldb	r3,0(r22)
    acb8:	01000a84 	movi	r4,42
    acbc:	b4000044 	addi	r16,r22,1
    acc0:	19025e26 	beq	r3,r4,b63c <___vfiprintf_internal_r+0x1440>
    acc4:	1f3ff404 	addi	fp,r3,-48
    acc8:	0009883a 	mov	r4,zero
    accc:	af025236 	bltu	r21,fp,b618 <___vfiprintf_internal_r+0x141c>
    acd0:	01400284 	movi	r5,10
    acd4:	000cea00 	call	cea0 <__mulsi3>
    acd8:	80c00007 	ldb	r3,0(r16)
    acdc:	1709883a 	add	r4,r2,fp
    ace0:	85800044 	addi	r22,r16,1
    ace4:	1f3ff404 	addi	fp,r3,-48
    ace8:	b021883a 	mov	r16,r22
    acec:	af3ff82e 	bgeu	r21,fp,acd0 <__alt_exception_stack_pointer+0xf800acd0>
    acf0:	2021883a 	mov	r16,r4
    acf4:	203d9f0e 	bge	r4,zero,a374 <__alt_exception_stack_pointer+0xf800a374>
    acf8:	043fffc4 	movi	r16,-1
    acfc:	003d9d06 	br	a374 <__alt_exception_stack_pointer+0xf800a374>
    ad00:	8c401014 	ori	r17,r17,64
    ad04:	b0c00007 	ldb	r3,0(r22)
    ad08:	003d9906 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    ad0c:	d9002217 	ldw	r4,136(sp)
    ad10:	d8001d85 	stb	zero,118(sp)
    ad14:	20c00204 	addi	r3,r4,8
    ad18:	24c00017 	ldw	r19,0(r4)
    ad1c:	25000117 	ldw	r20,4(r4)
    ad20:	8001e716 	blt	r16,zero,b4c0 <___vfiprintf_internal_r+0x12c4>
    ad24:	013fdfc4 	movi	r4,-129
    ad28:	9d04b03a 	or	r2,r19,r20
    ad2c:	d8c02215 	stw	r3,136(sp)
    ad30:	8922703a 	and	r17,r17,r4
    ad34:	002b883a 	mov	r21,zero
    ad38:	103f2f1e 	bne	r2,zero,a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    ad3c:	803e2f26 	beq	r16,zero,a5fc <__alt_exception_stack_pointer+0xf800a5fc>
    ad40:	0027883a 	mov	r19,zero
    ad44:	9cc00c04 	addi	r19,r19,48
    ad48:	dcc019c5 	stb	r19,103(sp)
    ad4c:	dd002817 	ldw	r20,160(sp)
    ad50:	ddc019c4 	addi	r23,sp,103
    ad54:	003e2c06 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    ad58:	9cc03fcc 	andi	r19,r19,255
    ad5c:	b811883a 	mov	r8,r23
    ad60:	9802571e 	bne	r19,zero,b6c0 <___vfiprintf_internal_r+0x14c4>
    ad64:	18005726 	beq	r3,zero,aec4 <___vfiprintf_internal_r+0xcc8>
    ad68:	04c00044 	movi	r19,1
    ad6c:	d8c01005 	stb	r3,64(sp)
    ad70:	d8001d85 	stb	zero,118(sp)
    ad74:	9829883a 	mov	r20,r19
    ad78:	ddc01004 	addi	r23,sp,64
    ad7c:	003f0a06 	br	a9a8 <__alt_exception_stack_pointer+0xf800a9a8>
    ad80:	d9402017 	ldw	r5,128(sp)
    ad84:	d9002117 	ldw	r4,132(sp)
    ad88:	d9801a04 	addi	r6,sp,104
    ad8c:	da802a15 	stw	r10,168(sp)
    ad90:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    ad94:	da802a17 	ldw	r10,168(sp)
    ad98:	1000501e 	bne	r2,zero,aedc <___vfiprintf_internal_r+0xce0>
    ad9c:	d9801b17 	ldw	r6,108(sp)
    ada0:	d8801c17 	ldw	r2,112(sp)
    ada4:	d811883a 	mov	r8,sp
    ada8:	31000044 	addi	r4,r6,1
    adac:	003e3606 	br	a688 <__alt_exception_stack_pointer+0xf800a688>
    adb0:	d9001b17 	ldw	r4,108(sp)
    adb4:	d8801c17 	ldw	r2,112(sp)
    adb8:	21400044 	addi	r5,r4,1
    adbc:	d9801d87 	ldb	r6,118(sp)
    adc0:	303e5226 	beq	r6,zero,a70c <__alt_exception_stack_pointer+0xf800a70c>
    adc4:	01800044 	movi	r6,1
    adc8:	d9001d84 	addi	r4,sp,118
    adcc:	1185883a 	add	r2,r2,r6
    add0:	41000015 	stw	r4,0(r8)
    add4:	41800115 	stw	r6,4(r8)
    add8:	d8801c15 	stw	r2,112(sp)
    addc:	d9401b15 	stw	r5,108(sp)
    ade0:	010001c4 	movi	r4,7
    ade4:	2140b00e 	bge	r4,r5,b0a8 <___vfiprintf_internal_r+0xeac>
    ade8:	1000f61e 	bne	r2,zero,b1c4 <___vfiprintf_internal_r+0xfc8>
    adec:	3800b31e 	bne	r7,zero,b0bc <___vfiprintf_internal_r+0xec0>
    adf0:	0009883a 	mov	r4,zero
    adf4:	300b883a 	mov	r5,r6
    adf8:	d811883a 	mov	r8,sp
    adfc:	01802004 	movi	r6,128
    ae00:	19be5226 	beq	r3,r6,a74c <__alt_exception_stack_pointer+0xf800a74c>
    ae04:	8521c83a 	sub	r16,r16,r20
    ae08:	043e790e 	bge	zero,r16,a7f0 <__alt_exception_stack_pointer+0xf800a7f0>
    ae0c:	05400404 	movi	r21,16
    ae10:	ac01b00e 	bge	r21,r16,b4d4 <___vfiprintf_internal_r+0x12d8>
    ae14:	01400074 	movhi	r5,1
    ae18:	294ac304 	addi	r5,r5,11020
    ae1c:	d9402315 	stw	r5,140(sp)
    ae20:	070001c4 	movi	fp,7
    ae24:	00000506 	br	ae3c <___vfiprintf_internal_r+0xc40>
    ae28:	21400084 	addi	r5,r4,2
    ae2c:	42000204 	addi	r8,r8,8
    ae30:	1809883a 	mov	r4,r3
    ae34:	843ffc04 	addi	r16,r16,-16
    ae38:	ac000d0e 	bge	r21,r16,ae70 <___vfiprintf_internal_r+0xc74>
    ae3c:	10800404 	addi	r2,r2,16
    ae40:	20c00044 	addi	r3,r4,1
    ae44:	44800015 	stw	r18,0(r8)
    ae48:	45400115 	stw	r21,4(r8)
    ae4c:	d8801c15 	stw	r2,112(sp)
    ae50:	d8c01b15 	stw	r3,108(sp)
    ae54:	e0fff40e 	bge	fp,r3,ae28 <__alt_exception_stack_pointer+0xf800ae28>
    ae58:	1000101e 	bne	r2,zero,ae9c <___vfiprintf_internal_r+0xca0>
    ae5c:	843ffc04 	addi	r16,r16,-16
    ae60:	01400044 	movi	r5,1
    ae64:	0009883a 	mov	r4,zero
    ae68:	d811883a 	mov	r8,sp
    ae6c:	ac3ff316 	blt	r21,r16,ae3c <__alt_exception_stack_pointer+0xf800ae3c>
    ae70:	d8c02317 	ldw	r3,140(sp)
    ae74:	1405883a 	add	r2,r2,r16
    ae78:	44000115 	stw	r16,4(r8)
    ae7c:	40c00015 	stw	r3,0(r8)
    ae80:	d8801c15 	stw	r2,112(sp)
    ae84:	d9401b15 	stw	r5,108(sp)
    ae88:	00c001c4 	movi	r3,7
    ae8c:	19401916 	blt	r3,r5,aef4 <___vfiprintf_internal_r+0xcf8>
    ae90:	42000204 	addi	r8,r8,8
    ae94:	29400044 	addi	r5,r5,1
    ae98:	003e5506 	br	a7f0 <__alt_exception_stack_pointer+0xf800a7f0>
    ae9c:	d9402017 	ldw	r5,128(sp)
    aea0:	d9002117 	ldw	r4,132(sp)
    aea4:	d9801a04 	addi	r6,sp,104
    aea8:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    aeac:	10000b1e 	bne	r2,zero,aedc <___vfiprintf_internal_r+0xce0>
    aeb0:	d9001b17 	ldw	r4,108(sp)
    aeb4:	d8801c17 	ldw	r2,112(sp)
    aeb8:	d811883a 	mov	r8,sp
    aebc:	21400044 	addi	r5,r4,1
    aec0:	003fdc06 	br	ae34 <__alt_exception_stack_pointer+0xf800ae34>
    aec4:	d8801c17 	ldw	r2,112(sp)
    aec8:	10000426 	beq	r2,zero,aedc <___vfiprintf_internal_r+0xce0>
    aecc:	d9402017 	ldw	r5,128(sp)
    aed0:	d9002117 	ldw	r4,132(sp)
    aed4:	d9801a04 	addi	r6,sp,104
    aed8:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    aedc:	d9402017 	ldw	r5,128(sp)
    aee0:	2880030b 	ldhu	r2,12(r5)
    aee4:	1080100c 	andi	r2,r2,64
    aee8:	10014d1e 	bne	r2,zero,b420 <___vfiprintf_internal_r+0x1224>
    aeec:	d8802417 	ldw	r2,144(sp)
    aef0:	003d9706 	br	a550 <__alt_exception_stack_pointer+0xf800a550>
    aef4:	1000d21e 	bne	r2,zero,b240 <___vfiprintf_internal_r+0x1044>
    aef8:	00c00044 	movi	r3,1
    aefc:	a005883a 	mov	r2,r20
    af00:	ddc00015 	stw	r23,0(sp)
    af04:	dd000115 	stw	r20,4(sp)
    af08:	dd001c15 	stw	r20,112(sp)
    af0c:	d8c01b15 	stw	r3,108(sp)
    af10:	d811883a 	mov	r8,sp
    af14:	42000204 	addi	r8,r8,8
    af18:	8c40010c 	andi	r17,r17,4
    af1c:	88004026 	beq	r17,zero,b020 <___vfiprintf_internal_r+0xe24>
    af20:	d9002517 	ldw	r4,148(sp)
    af24:	24e3c83a 	sub	r17,r4,r19
    af28:	04403d0e 	bge	zero,r17,b020 <___vfiprintf_internal_r+0xe24>
    af2c:	04000404 	movi	r16,16
    af30:	8441a90e 	bge	r16,r17,b5d8 <___vfiprintf_internal_r+0x13dc>
    af34:	00c00074 	movhi	r3,1
    af38:	18cac704 	addi	r3,r3,11036
    af3c:	d9001b17 	ldw	r4,108(sp)
    af40:	d8c02315 	stw	r3,140(sp)
    af44:	050001c4 	movi	r20,7
    af48:	dd402117 	ldw	r21,132(sp)
    af4c:	ddc02017 	ldw	r23,128(sp)
    af50:	00000506 	br	af68 <___vfiprintf_internal_r+0xd6c>
    af54:	21400084 	addi	r5,r4,2
    af58:	42000204 	addi	r8,r8,8
    af5c:	1809883a 	mov	r4,r3
    af60:	8c7ffc04 	addi	r17,r17,-16
    af64:	84400f0e 	bge	r16,r17,afa4 <___vfiprintf_internal_r+0xda8>
    af68:	01400074 	movhi	r5,1
    af6c:	10800404 	addi	r2,r2,16
    af70:	20c00044 	addi	r3,r4,1
    af74:	294ac704 	addi	r5,r5,11036
    af78:	41400015 	stw	r5,0(r8)
    af7c:	44000115 	stw	r16,4(r8)
    af80:	d8801c15 	stw	r2,112(sp)
    af84:	d8c01b15 	stw	r3,108(sp)
    af88:	a0fff20e 	bge	r20,r3,af54 <__alt_exception_stack_pointer+0xf800af54>
    af8c:	1000141e 	bne	r2,zero,afe0 <___vfiprintf_internal_r+0xde4>
    af90:	8c7ffc04 	addi	r17,r17,-16
    af94:	01400044 	movi	r5,1
    af98:	0009883a 	mov	r4,zero
    af9c:	d811883a 	mov	r8,sp
    afa0:	847ff116 	blt	r16,r17,af68 <__alt_exception_stack_pointer+0xf800af68>
    afa4:	d8c02317 	ldw	r3,140(sp)
    afa8:	1445883a 	add	r2,r2,r17
    afac:	44400115 	stw	r17,4(r8)
    afb0:	40c00015 	stw	r3,0(r8)
    afb4:	d8801c15 	stw	r2,112(sp)
    afb8:	d9401b15 	stw	r5,108(sp)
    afbc:	00c001c4 	movi	r3,7
    afc0:	1940170e 	bge	r3,r5,b020 <___vfiprintf_internal_r+0xe24>
    afc4:	1000101e 	bne	r2,zero,b008 <___vfiprintf_internal_r+0xe0c>
    afc8:	d8802517 	ldw	r2,148(sp)
    afcc:	14c11616 	blt	r2,r19,b428 <___vfiprintf_internal_r+0x122c>
    afd0:	d9002417 	ldw	r4,144(sp)
    afd4:	2089883a 	add	r4,r4,r2
    afd8:	d9002415 	stw	r4,144(sp)
    afdc:	003e1806 	br	a840 <__alt_exception_stack_pointer+0xf800a840>
    afe0:	d9801a04 	addi	r6,sp,104
    afe4:	b80b883a 	mov	r5,r23
    afe8:	a809883a 	mov	r4,r21
    afec:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    aff0:	103fba1e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    aff4:	d9001b17 	ldw	r4,108(sp)
    aff8:	d8801c17 	ldw	r2,112(sp)
    affc:	d811883a 	mov	r8,sp
    b000:	21400044 	addi	r5,r4,1
    b004:	003fd606 	br	af60 <__alt_exception_stack_pointer+0xf800af60>
    b008:	d9402017 	ldw	r5,128(sp)
    b00c:	d9002117 	ldw	r4,132(sp)
    b010:	d9801a04 	addi	r6,sp,104
    b014:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b018:	103fb01e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b01c:	d8801c17 	ldw	r2,112(sp)
    b020:	d8c02517 	ldw	r3,148(sp)
    b024:	1cc0010e 	bge	r3,r19,b02c <___vfiprintf_internal_r+0xe30>
    b028:	9807883a 	mov	r3,r19
    b02c:	d9002417 	ldw	r4,144(sp)
    b030:	20c9883a 	add	r4,r4,r3
    b034:	d9002415 	stw	r4,144(sp)
    b038:	103e0126 	beq	r2,zero,a840 <__alt_exception_stack_pointer+0xf800a840>
    b03c:	d9402017 	ldw	r5,128(sp)
    b040:	d9002117 	ldw	r4,132(sp)
    b044:	d9801a04 	addi	r6,sp,104
    b048:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b04c:	103dfc26 	beq	r2,zero,a840 <__alt_exception_stack_pointer+0xf800a840>
    b050:	003fa206 	br	aedc <__alt_exception_stack_pointer+0xf800aedc>
    b054:	d9402017 	ldw	r5,128(sp)
    b058:	d9002117 	ldw	r4,132(sp)
    b05c:	d9801a04 	addi	r6,sp,104
    b060:	d9c02b15 	stw	r7,172(sp)
    b064:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b068:	d9c02b17 	ldw	r7,172(sp)
    b06c:	103f9b1e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b070:	d9001b17 	ldw	r4,108(sp)
    b074:	d8801c17 	ldw	r2,112(sp)
    b078:	d811883a 	mov	r8,sp
    b07c:	21800044 	addi	r6,r4,1
    b080:	003dbf06 	br	a780 <__alt_exception_stack_pointer+0xf800a780>
    b084:	1000d81e 	bne	r2,zero,b3e8 <___vfiprintf_internal_r+0x11ec>
    b088:	d9001d87 	ldb	r4,118(sp)
    b08c:	20000a26 	beq	r4,zero,b0b8 <___vfiprintf_internal_r+0xebc>
    b090:	00800044 	movi	r2,1
    b094:	d9001d84 	addi	r4,sp,118
    b098:	100b883a 	mov	r5,r2
    b09c:	d9000015 	stw	r4,0(sp)
    b0a0:	d8800115 	stw	r2,4(sp)
    b0a4:	d811883a 	mov	r8,sp
    b0a8:	2809883a 	mov	r4,r5
    b0ac:	42000204 	addi	r8,r8,8
    b0b0:	29400044 	addi	r5,r5,1
    b0b4:	003d9506 	br	a70c <__alt_exception_stack_pointer+0xf800a70c>
    b0b8:	3800fd26 	beq	r7,zero,b4b0 <___vfiprintf_internal_r+0x12b4>
    b0bc:	00800084 	movi	r2,2
    b0c0:	d9001d04 	addi	r4,sp,116
    b0c4:	d9000015 	stw	r4,0(sp)
    b0c8:	d8800115 	stw	r2,4(sp)
    b0cc:	01400044 	movi	r5,1
    b0d0:	d811883a 	mov	r8,sp
    b0d4:	2809883a 	mov	r4,r5
    b0d8:	42000204 	addi	r8,r8,8
    b0dc:	29400044 	addi	r5,r5,1
    b0e0:	003f4606 	br	adfc <__alt_exception_stack_pointer+0xf800adfc>
    b0e4:	d8802517 	ldw	r2,148(sp)
    b0e8:	14c0010e 	bge	r2,r19,b0f0 <___vfiprintf_internal_r+0xef4>
    b0ec:	9805883a 	mov	r2,r19
    b0f0:	d9402417 	ldw	r5,144(sp)
    b0f4:	288b883a 	add	r5,r5,r2
    b0f8:	d9402415 	stw	r5,144(sp)
    b0fc:	003dd006 	br	a840 <__alt_exception_stack_pointer+0xf800a840>
    b100:	d8001d85 	stb	zero,118(sp)
    b104:	80005d16 	blt	r16,zero,b27c <___vfiprintf_internal_r+0x1080>
    b108:	00ffdfc4 	movi	r3,-129
    b10c:	9d04b03a 	or	r2,r19,r20
    b110:	88e2703a 	and	r17,r17,r3
    b114:	103d3726 	beq	r2,zero,a5f4 <__alt_exception_stack_pointer+0xf800a5f4>
    b118:	002b883a 	mov	r21,zero
    b11c:	d9002617 	ldw	r4,152(sp)
    b120:	ddc01a04 	addi	r23,sp,104
    b124:	988003cc 	andi	r2,r19,15
    b128:	a006973a 	slli	r3,r20,28
    b12c:	2085883a 	add	r2,r4,r2
    b130:	9826d13a 	srli	r19,r19,4
    b134:	10800003 	ldbu	r2,0(r2)
    b138:	a028d13a 	srli	r20,r20,4
    b13c:	bdffffc4 	addi	r23,r23,-1
    b140:	1ce6b03a 	or	r19,r3,r19
    b144:	b8800005 	stb	r2,0(r23)
    b148:	9d04b03a 	or	r2,r19,r20
    b14c:	103ff51e 	bne	r2,zero,b124 <__alt_exception_stack_pointer+0xf800b124>
    b150:	d8801e17 	ldw	r2,120(sp)
    b154:	15e9c83a 	sub	r20,r2,r23
    b158:	003d2b06 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b15c:	d9402017 	ldw	r5,128(sp)
    b160:	d9002117 	ldw	r4,132(sp)
    b164:	d9801a04 	addi	r6,sp,104
    b168:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b16c:	103f5b1e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b170:	d8801c17 	ldw	r2,112(sp)
    b174:	d811883a 	mov	r8,sp
    b178:	003f6706 	br	af18 <__alt_exception_stack_pointer+0xf800af18>
    b17c:	d9402017 	ldw	r5,128(sp)
    b180:	d9002117 	ldw	r4,132(sp)
    b184:	d9801a04 	addi	r6,sp,104
    b188:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b18c:	103f531e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b190:	d811883a 	mov	r8,sp
    b194:	003cd906 	br	a4fc <__alt_exception_stack_pointer+0xf800a4fc>
    b198:	10803fcc 	andi	r2,r2,255
    b19c:	1080201c 	xori	r2,r2,128
    b1a0:	10bfe004 	addi	r2,r2,-128
    b1a4:	00c00c04 	movi	r3,48
    b1a8:	10ffe926 	beq	r2,r3,b150 <__alt_exception_stack_pointer+0xf800b150>
    b1ac:	b8ffffc5 	stb	r3,-1(r23)
    b1b0:	d8c01e17 	ldw	r3,120(sp)
    b1b4:	b8bfffc4 	addi	r2,r23,-1
    b1b8:	102f883a 	mov	r23,r2
    b1bc:	18a9c83a 	sub	r20,r3,r2
    b1c0:	003d1106 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b1c4:	d9402017 	ldw	r5,128(sp)
    b1c8:	d9002117 	ldw	r4,132(sp)
    b1cc:	d9801a04 	addi	r6,sp,104
    b1d0:	d8c02a15 	stw	r3,168(sp)
    b1d4:	d9c02b15 	stw	r7,172(sp)
    b1d8:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b1dc:	d8c02a17 	ldw	r3,168(sp)
    b1e0:	d9c02b17 	ldw	r7,172(sp)
    b1e4:	103f3d1e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b1e8:	d9001b17 	ldw	r4,108(sp)
    b1ec:	d8801c17 	ldw	r2,112(sp)
    b1f0:	d811883a 	mov	r8,sp
    b1f4:	21400044 	addi	r5,r4,1
    b1f8:	003d4406 	br	a70c <__alt_exception_stack_pointer+0xf800a70c>
    b1fc:	d9402017 	ldw	r5,128(sp)
    b200:	d9002117 	ldw	r4,132(sp)
    b204:	d9801a04 	addi	r6,sp,104
    b208:	d8c02a15 	stw	r3,168(sp)
    b20c:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b210:	d8c02a17 	ldw	r3,168(sp)
    b214:	103f311e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b218:	d9001b17 	ldw	r4,108(sp)
    b21c:	d8801c17 	ldw	r2,112(sp)
    b220:	d811883a 	mov	r8,sp
    b224:	21400044 	addi	r5,r4,1
    b228:	003ef406 	br	adfc <__alt_exception_stack_pointer+0xf800adfc>
    b22c:	1000bd1e 	bne	r2,zero,b524 <___vfiprintf_internal_r+0x1328>
    b230:	01400044 	movi	r5,1
    b234:	0009883a 	mov	r4,zero
    b238:	d811883a 	mov	r8,sp
    b23c:	003ef106 	br	ae04 <__alt_exception_stack_pointer+0xf800ae04>
    b240:	d9402017 	ldw	r5,128(sp)
    b244:	d9002117 	ldw	r4,132(sp)
    b248:	d9801a04 	addi	r6,sp,104
    b24c:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b250:	103f221e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b254:	d9401b17 	ldw	r5,108(sp)
    b258:	d8801c17 	ldw	r2,112(sp)
    b25c:	d811883a 	mov	r8,sp
    b260:	29400044 	addi	r5,r5,1
    b264:	003d6206 	br	a7f0 <__alt_exception_stack_pointer+0xf800a7f0>
    b268:	01400074 	movhi	r5,1
    b26c:	294a6304 	addi	r5,r5,10636
    b270:	d9402615 	stw	r5,152(sp)
    b274:	d8c02215 	stw	r3,136(sp)
    b278:	1023883a 	mov	r17,r2
    b27c:	9d04b03a 	or	r2,r19,r20
    b280:	103fa51e 	bne	r2,zero,b118 <__alt_exception_stack_pointer+0xf800b118>
    b284:	002b883a 	mov	r21,zero
    b288:	00800084 	movi	r2,2
    b28c:	003e4a06 	br	abb8 <__alt_exception_stack_pointer+0xf800abb8>
    b290:	01400074 	movhi	r5,1
    b294:	294a6304 	addi	r5,r5,10636
    b298:	002b883a 	mov	r21,zero
    b29c:	d9402615 	stw	r5,152(sp)
    b2a0:	003f9e06 	br	b11c <__alt_exception_stack_pointer+0xf800b11c>
    b2a4:	d9402217 	ldw	r5,136(sp)
    b2a8:	d8001d85 	stb	zero,118(sp)
    b2ac:	0029883a 	mov	r20,zero
    b2b0:	28800104 	addi	r2,r5,4
    b2b4:	2cc00017 	ldw	r19,0(r5)
    b2b8:	803e3a16 	blt	r16,zero,aba4 <__alt_exception_stack_pointer+0xf800aba4>
    b2bc:	00ffdfc4 	movi	r3,-129
    b2c0:	d8802215 	stw	r2,136(sp)
    b2c4:	88e2703a 	and	r17,r17,r3
    b2c8:	002b883a 	mov	r21,zero
    b2cc:	983e9b26 	beq	r19,zero,ad3c <__alt_exception_stack_pointer+0xf800ad3c>
    b2d0:	00800244 	movi	r2,9
    b2d4:	14fdc936 	bltu	r2,r19,a9fc <__alt_exception_stack_pointer+0xf800a9fc>
    b2d8:	003e9a06 	br	ad44 <__alt_exception_stack_pointer+0xf800ad44>
    b2dc:	00800c04 	movi	r2,48
    b2e0:	d8c01d45 	stb	r3,117(sp)
    b2e4:	d8801d05 	stb	r2,116(sp)
    b2e8:	d8001d85 	stb	zero,118(sp)
    b2ec:	88c00094 	ori	r3,r17,2
    b2f0:	80009c16 	blt	r16,zero,b564 <___vfiprintf_internal_r+0x1368>
    b2f4:	00bfdfc4 	movi	r2,-129
    b2f8:	88a2703a 	and	r17,r17,r2
    b2fc:	8c400094 	ori	r17,r17,2
    b300:	002b883a 	mov	r21,zero
    b304:	003f8506 	br	b11c <__alt_exception_stack_pointer+0xf800b11c>
    b308:	b029883a 	mov	r20,r22
    b30c:	003c0b06 	br	a33c <__alt_exception_stack_pointer+0xf800a33c>
    b310:	04e7c83a 	sub	r19,zero,r19
    b314:	05400b44 	movi	r21,45
    b318:	9804c03a 	cmpne	r2,r19,zero
    b31c:	0529c83a 	sub	r20,zero,r20
    b320:	dd401d85 	stb	r21,118(sp)
    b324:	a0a9c83a 	sub	r20,r20,r2
    b328:	80009716 	blt	r16,zero,b588 <___vfiprintf_internal_r+0x138c>
    b32c:	00bfdfc4 	movi	r2,-129
    b330:	88a2703a 	and	r17,r17,r2
    b334:	003db006 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b338:	b0c00007 	ldb	r3,0(r22)
    b33c:	003c0c06 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    b340:	8880100c 	andi	r2,r17,64
    b344:	d8001d85 	stb	zero,118(sp)
    b348:	1000461e 	bne	r2,zero,b464 <___vfiprintf_internal_r+0x1268>
    b34c:	d9002217 	ldw	r4,136(sp)
    b350:	0029883a 	mov	r20,zero
    b354:	20800104 	addi	r2,r4,4
    b358:	24c00017 	ldw	r19,0(r4)
    b35c:	803df80e 	bge	r16,zero,ab40 <__alt_exception_stack_pointer+0xf800ab40>
    b360:	9d06b03a 	or	r3,r19,r20
    b364:	d8802215 	stw	r2,136(sp)
    b368:	183d5e1e 	bne	r3,zero,a8e4 <__alt_exception_stack_pointer+0xf800a8e4>
    b36c:	002b883a 	mov	r21,zero
    b370:	0005883a 	mov	r2,zero
    b374:	003e1006 	br	abb8 <__alt_exception_stack_pointer+0xf800abb8>
    b378:	8880040c 	andi	r2,r17,16
    b37c:	1000321e 	bne	r2,zero,b448 <___vfiprintf_internal_r+0x124c>
    b380:	8c40100c 	andi	r17,r17,64
    b384:	88008d26 	beq	r17,zero,b5bc <___vfiprintf_internal_r+0x13c0>
    b388:	d9402217 	ldw	r5,136(sp)
    b38c:	d8c02417 	ldw	r3,144(sp)
    b390:	28800017 	ldw	r2,0(r5)
    b394:	29400104 	addi	r5,r5,4
    b398:	d9402215 	stw	r5,136(sp)
    b39c:	10c0000d 	sth	r3,0(r2)
    b3a0:	003bca06 	br	a2cc <__alt_exception_stack_pointer+0xf800a2cc>
    b3a4:	8880100c 	andi	r2,r17,64
    b3a8:	10003a26 	beq	r2,zero,b494 <___vfiprintf_internal_r+0x1298>
    b3ac:	d8802217 	ldw	r2,136(sp)
    b3b0:	14c0000f 	ldh	r19,0(r2)
    b3b4:	10800104 	addi	r2,r2,4
    b3b8:	d8802215 	stw	r2,136(sp)
    b3bc:	9829d7fa 	srai	r20,r19,31
    b3c0:	a005883a 	mov	r2,r20
    b3c4:	003d8506 	br	a9dc <__alt_exception_stack_pointer+0xf800a9dc>
    b3c8:	8880100c 	andi	r2,r17,64
    b3cc:	10002b26 	beq	r2,zero,b47c <___vfiprintf_internal_r+0x1280>
    b3d0:	d8802217 	ldw	r2,136(sp)
    b3d4:	0029883a 	mov	r20,zero
    b3d8:	14c0000b 	ldhu	r19,0(r2)
    b3dc:	10800104 	addi	r2,r2,4
    b3e0:	d8802215 	stw	r2,136(sp)
    b3e4:	003d5d06 	br	a95c <__alt_exception_stack_pointer+0xf800a95c>
    b3e8:	d9402017 	ldw	r5,128(sp)
    b3ec:	d9002117 	ldw	r4,132(sp)
    b3f0:	d9801a04 	addi	r6,sp,104
    b3f4:	d8c02a15 	stw	r3,168(sp)
    b3f8:	d9c02b15 	stw	r7,172(sp)
    b3fc:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b400:	d8c02a17 	ldw	r3,168(sp)
    b404:	d9c02b17 	ldw	r7,172(sp)
    b408:	103eb41e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b40c:	d9001b17 	ldw	r4,108(sp)
    b410:	d8801c17 	ldw	r2,112(sp)
    b414:	d811883a 	mov	r8,sp
    b418:	21400044 	addi	r5,r4,1
    b41c:	003e6706 	br	adbc <__alt_exception_stack_pointer+0xf800adbc>
    b420:	00bfffc4 	movi	r2,-1
    b424:	003c4a06 	br	a550 <__alt_exception_stack_pointer+0xf800a550>
    b428:	9805883a 	mov	r2,r19
    b42c:	003ee806 	br	afd0 <__alt_exception_stack_pointer+0xf800afd0>
    b430:	d8c02217 	ldw	r3,136(sp)
    b434:	0029883a 	mov	r20,zero
    b438:	18800104 	addi	r2,r3,4
    b43c:	1cc0000b 	ldhu	r19,0(r3)
    b440:	803f9e0e 	bge	r16,zero,b2bc <__alt_exception_stack_pointer+0xf800b2bc>
    b444:	003dd706 	br	aba4 <__alt_exception_stack_pointer+0xf800aba4>
    b448:	d8c02217 	ldw	r3,136(sp)
    b44c:	d9002417 	ldw	r4,144(sp)
    b450:	18800017 	ldw	r2,0(r3)
    b454:	18c00104 	addi	r3,r3,4
    b458:	d8c02215 	stw	r3,136(sp)
    b45c:	11000015 	stw	r4,0(r2)
    b460:	003b9a06 	br	a2cc <__alt_exception_stack_pointer+0xf800a2cc>
    b464:	d8c02217 	ldw	r3,136(sp)
    b468:	0029883a 	mov	r20,zero
    b46c:	18800104 	addi	r2,r3,4
    b470:	1cc0000b 	ldhu	r19,0(r3)
    b474:	803db20e 	bge	r16,zero,ab40 <__alt_exception_stack_pointer+0xf800ab40>
    b478:	003fb906 	br	b360 <__alt_exception_stack_pointer+0xf800b360>
    b47c:	d9002217 	ldw	r4,136(sp)
    b480:	0029883a 	mov	r20,zero
    b484:	24c00017 	ldw	r19,0(r4)
    b488:	21000104 	addi	r4,r4,4
    b48c:	d9002215 	stw	r4,136(sp)
    b490:	003d3206 	br	a95c <__alt_exception_stack_pointer+0xf800a95c>
    b494:	d8c02217 	ldw	r3,136(sp)
    b498:	1cc00017 	ldw	r19,0(r3)
    b49c:	18c00104 	addi	r3,r3,4
    b4a0:	d8c02215 	stw	r3,136(sp)
    b4a4:	9829d7fa 	srai	r20,r19,31
    b4a8:	a005883a 	mov	r2,r20
    b4ac:	003d4b06 	br	a9dc <__alt_exception_stack_pointer+0xf800a9dc>
    b4b0:	0009883a 	mov	r4,zero
    b4b4:	01400044 	movi	r5,1
    b4b8:	d811883a 	mov	r8,sp
    b4bc:	003e4f06 	br	adfc <__alt_exception_stack_pointer+0xf800adfc>
    b4c0:	d8c02215 	stw	r3,136(sp)
    b4c4:	002b883a 	mov	r21,zero
    b4c8:	003db806 	br	abac <__alt_exception_stack_pointer+0xf800abac>
    b4cc:	d811883a 	mov	r8,sp
    b4d0:	003e9606 	br	af2c <__alt_exception_stack_pointer+0xf800af2c>
    b4d4:	01000074 	movhi	r4,1
    b4d8:	210ac304 	addi	r4,r4,11020
    b4dc:	d9002315 	stw	r4,140(sp)
    b4e0:	003e6306 	br	ae70 <__alt_exception_stack_pointer+0xf800ae70>
    b4e4:	b0c00043 	ldbu	r3,1(r22)
    b4e8:	8c400814 	ori	r17,r17,32
    b4ec:	b5800044 	addi	r22,r22,1
    b4f0:	18c03fcc 	andi	r3,r3,255
    b4f4:	18c0201c 	xori	r3,r3,128
    b4f8:	18ffe004 	addi	r3,r3,-128
    b4fc:	003b9c06 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    b500:	b809883a 	mov	r4,r23
    b504:	da002a15 	stw	r8,168(sp)
    b508:	00031c40 	call	31c4 <strlen>
    b50c:	1029883a 	mov	r20,r2
    b510:	dd401d83 	ldbu	r21,118(sp)
    b514:	df002215 	stw	fp,136(sp)
    b518:	0021883a 	mov	r16,zero
    b51c:	da002a17 	ldw	r8,168(sp)
    b520:	003c3906 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b524:	d9402017 	ldw	r5,128(sp)
    b528:	d9002117 	ldw	r4,132(sp)
    b52c:	d9801a04 	addi	r6,sp,104
    b530:	000a0e80 	call	a0e8 <__sprint_r.part.0>
    b534:	103e691e 	bne	r2,zero,aedc <__alt_exception_stack_pointer+0xf800aedc>
    b538:	d9001b17 	ldw	r4,108(sp)
    b53c:	d8801c17 	ldw	r2,112(sp)
    b540:	d811883a 	mov	r8,sp
    b544:	21400044 	addi	r5,r4,1
    b548:	003e2e06 	br	ae04 <__alt_exception_stack_pointer+0xf800ae04>
    b54c:	01000074 	movhi	r4,1
    b550:	210ac704 	addi	r4,r4,11036
    b554:	d9002315 	stw	r4,140(sp)
    b558:	d9001b17 	ldw	r4,108(sp)
    b55c:	21000044 	addi	r4,r4,1
    b560:	003c5e06 	br	a6dc <__alt_exception_stack_pointer+0xf800a6dc>
    b564:	002b883a 	mov	r21,zero
    b568:	00800084 	movi	r2,2
    b56c:	10803fcc 	andi	r2,r2,255
    b570:	01000044 	movi	r4,1
    b574:	11002b26 	beq	r2,r4,b624 <___vfiprintf_internal_r+0x1428>
    b578:	01000084 	movi	r4,2
    b57c:	11002b1e 	bne	r2,r4,b62c <___vfiprintf_internal_r+0x1430>
    b580:	1823883a 	mov	r17,r3
    b584:	003ee506 	br	b11c <__alt_exception_stack_pointer+0xf800b11c>
    b588:	8807883a 	mov	r3,r17
    b58c:	00800044 	movi	r2,1
    b590:	003ff606 	br	b56c <__alt_exception_stack_pointer+0xf800b56c>
    b594:	00800184 	movi	r2,6
    b598:	1400012e 	bgeu	r2,r16,b5a0 <___vfiprintf_internal_r+0x13a4>
    b59c:	1021883a 	mov	r16,r2
    b5a0:	8029883a 	mov	r20,r16
    b5a4:	8027883a 	mov	r19,r16
    b5a8:	80002216 	blt	r16,zero,b634 <___vfiprintf_internal_r+0x1438>
    b5ac:	05c00074 	movhi	r23,1
    b5b0:	df002215 	stw	fp,136(sp)
    b5b4:	bdca6804 	addi	r23,r23,10656
    b5b8:	003cfb06 	br	a9a8 <__alt_exception_stack_pointer+0xf800a9a8>
    b5bc:	d9002217 	ldw	r4,136(sp)
    b5c0:	d9402417 	ldw	r5,144(sp)
    b5c4:	20800017 	ldw	r2,0(r4)
    b5c8:	21000104 	addi	r4,r4,4
    b5cc:	d9002215 	stw	r4,136(sp)
    b5d0:	11400015 	stw	r5,0(r2)
    b5d4:	003b3d06 	br	a2cc <__alt_exception_stack_pointer+0xf800a2cc>
    b5d8:	01400074 	movhi	r5,1
    b5dc:	294ac704 	addi	r5,r5,11036
    b5e0:	d9402315 	stw	r5,140(sp)
    b5e4:	d9401b17 	ldw	r5,108(sp)
    b5e8:	29400044 	addi	r5,r5,1
    b5ec:	003e6d06 	br	afa4 <__alt_exception_stack_pointer+0xf800afa4>
    b5f0:	8029883a 	mov	r20,r16
    b5f4:	dd401d83 	ldbu	r21,118(sp)
    b5f8:	df002215 	stw	fp,136(sp)
    b5fc:	0021883a 	mov	r16,zero
    b600:	003c0106 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b604:	00c00074 	movhi	r3,1
    b608:	18cac304 	addi	r3,r3,11020
    b60c:	d8c02315 	stw	r3,140(sp)
    b610:	280d883a 	mov	r6,r5
    b614:	003c6906 	br	a7bc <__alt_exception_stack_pointer+0xf800a7bc>
    b618:	802d883a 	mov	r22,r16
    b61c:	0021883a 	mov	r16,zero
    b620:	003b5406 	br	a374 <__alt_exception_stack_pointer+0xf800a374>
    b624:	1823883a 	mov	r17,r3
    b628:	003cf306 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b62c:	1823883a 	mov	r17,r3
    b630:	003cad06 	br	a8e8 <__alt_exception_stack_pointer+0xf800a8e8>
    b634:	0027883a 	mov	r19,zero
    b638:	003fdc06 	br	b5ac <__alt_exception_stack_pointer+0xf800b5ac>
    b63c:	d9402217 	ldw	r5,136(sp)
    b640:	8005883a 	mov	r2,r16
    b644:	b0c00043 	ldbu	r3,1(r22)
    b648:	2c000017 	ldw	r16,0(r5)
    b64c:	29000104 	addi	r4,r5,4
    b650:	d9002215 	stw	r4,136(sp)
    b654:	102d883a 	mov	r22,r2
    b658:	803fa50e 	bge	r16,zero,b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    b65c:	18c03fcc 	andi	r3,r3,255
    b660:	18c0201c 	xori	r3,r3,128
    b664:	043fffc4 	movi	r16,-1
    b668:	18ffe004 	addi	r3,r3,-128
    b66c:	003b4006 	br	a370 <__alt_exception_stack_pointer+0xf800a370>
    b670:	d9402303 	ldbu	r5,140(sp)
    b674:	d9401d85 	stb	r5,118(sp)
    b678:	003cae06 	br	a934 <__alt_exception_stack_pointer+0xf800a934>
    b67c:	d8c02303 	ldbu	r3,140(sp)
    b680:	d8c01d85 	stb	r3,118(sp)
    b684:	003d1406 	br	aad8 <__alt_exception_stack_pointer+0xf800aad8>
    b688:	d8c02303 	ldbu	r3,140(sp)
    b68c:	d8c01d85 	stb	r3,118(sp)
    b690:	003cca06 	br	a9bc <__alt_exception_stack_pointer+0xf800a9bc>
    b694:	8880004c 	andi	r2,r17,1
    b698:	002b883a 	mov	r21,zero
    b69c:	10000526 	beq	r2,zero,b6b4 <___vfiprintf_internal_r+0x14b8>
    b6a0:	00800c04 	movi	r2,48
    b6a4:	d88019c5 	stb	r2,103(sp)
    b6a8:	dd002817 	ldw	r20,160(sp)
    b6ac:	ddc019c4 	addi	r23,sp,103
    b6b0:	003bd506 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b6b4:	0029883a 	mov	r20,zero
    b6b8:	ddc01a04 	addi	r23,sp,104
    b6bc:	003bd206 	br	a608 <__alt_exception_stack_pointer+0xf800a608>
    b6c0:	d9002303 	ldbu	r4,140(sp)
    b6c4:	d9001d85 	stb	r4,118(sp)
    b6c8:	003da606 	br	ad64 <__alt_exception_stack_pointer+0xf800ad64>
    b6cc:	d8c02303 	ldbu	r3,140(sp)
    b6d0:	d8c01d85 	stb	r3,118(sp)
    b6d4:	003c7606 	br	a8b0 <__alt_exception_stack_pointer+0xf800a8b0>
    b6d8:	d8c02303 	ldbu	r3,140(sp)
    b6dc:	d8c01d85 	stb	r3,118(sp)
    b6e0:	003c6506 	br	a878 <__alt_exception_stack_pointer+0xf800a878>
    b6e4:	d9002303 	ldbu	r4,140(sp)
    b6e8:	d9001d85 	stb	r4,118(sp)
    b6ec:	003d3d06 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b6f0:	d8c02303 	ldbu	r3,140(sp)
    b6f4:	d8c01d85 	stb	r3,118(sp)
    b6f8:	003d1d06 	br	ab70 <__alt_exception_stack_pointer+0xf800ab70>
    b6fc:	d8c02303 	ldbu	r3,140(sp)
    b700:	d8c01d85 	stb	r3,118(sp)
    b704:	003d0306 	br	ab14 <__alt_exception_stack_pointer+0xf800ab14>

0000b708 <__vfiprintf_internal>:
    b708:	00800074 	movhi	r2,1
    b70c:	1091c904 	addi	r2,r2,18212
    b710:	300f883a 	mov	r7,r6
    b714:	280d883a 	mov	r6,r5
    b718:	200b883a 	mov	r5,r4
    b71c:	11000017 	ldw	r4,0(r2)
    b720:	000a1fc1 	jmpi	a1fc <___vfiprintf_internal_r>

0000b724 <__sbprintf>:
    b724:	2880030b 	ldhu	r2,12(r5)
    b728:	2ac01917 	ldw	r11,100(r5)
    b72c:	2a80038b 	ldhu	r10,14(r5)
    b730:	2a400717 	ldw	r9,28(r5)
    b734:	2a000917 	ldw	r8,36(r5)
    b738:	defee204 	addi	sp,sp,-1144
    b73c:	00c10004 	movi	r3,1024
    b740:	dc011a15 	stw	r16,1128(sp)
    b744:	10bfff4c 	andi	r2,r2,65533
    b748:	2821883a 	mov	r16,r5
    b74c:	d8cb883a 	add	r5,sp,r3
    b750:	dc811c15 	stw	r18,1136(sp)
    b754:	dc411b15 	stw	r17,1132(sp)
    b758:	dfc11d15 	stw	ra,1140(sp)
    b75c:	2025883a 	mov	r18,r4
    b760:	d881030d 	sth	r2,1036(sp)
    b764:	dac11915 	stw	r11,1124(sp)
    b768:	da81038d 	sth	r10,1038(sp)
    b76c:	da410715 	stw	r9,1052(sp)
    b770:	da010915 	stw	r8,1060(sp)
    b774:	dec10015 	stw	sp,1024(sp)
    b778:	dec10415 	stw	sp,1040(sp)
    b77c:	d8c10215 	stw	r3,1032(sp)
    b780:	d8c10515 	stw	r3,1044(sp)
    b784:	d8010615 	stw	zero,1048(sp)
    b788:	000a1fc0 	call	a1fc <___vfiprintf_internal_r>
    b78c:	1023883a 	mov	r17,r2
    b790:	10000416 	blt	r2,zero,b7a4 <__sbprintf+0x80>
    b794:	d9410004 	addi	r5,sp,1024
    b798:	9009883a 	mov	r4,r18
    b79c:	00072380 	call	7238 <_fflush_r>
    b7a0:	10000d1e 	bne	r2,zero,b7d8 <__sbprintf+0xb4>
    b7a4:	d881030b 	ldhu	r2,1036(sp)
    b7a8:	1080100c 	andi	r2,r2,64
    b7ac:	10000326 	beq	r2,zero,b7bc <__sbprintf+0x98>
    b7b0:	8080030b 	ldhu	r2,12(r16)
    b7b4:	10801014 	ori	r2,r2,64
    b7b8:	8080030d 	sth	r2,12(r16)
    b7bc:	8805883a 	mov	r2,r17
    b7c0:	dfc11d17 	ldw	ra,1140(sp)
    b7c4:	dc811c17 	ldw	r18,1136(sp)
    b7c8:	dc411b17 	ldw	r17,1132(sp)
    b7cc:	dc011a17 	ldw	r16,1128(sp)
    b7d0:	dec11e04 	addi	sp,sp,1144
    b7d4:	f800283a 	ret
    b7d8:	047fffc4 	movi	r17,-1
    b7dc:	003ff106 	br	b7a4 <__alt_exception_stack_pointer+0xf800b7a4>

0000b7e0 <_write_r>:
    b7e0:	defffd04 	addi	sp,sp,-12
    b7e4:	2805883a 	mov	r2,r5
    b7e8:	dc000015 	stw	r16,0(sp)
    b7ec:	04000074 	movhi	r16,1
    b7f0:	dc400115 	stw	r17,4(sp)
    b7f4:	300b883a 	mov	r5,r6
    b7f8:	84189c04 	addi	r16,r16,25200
    b7fc:	2023883a 	mov	r17,r4
    b800:	380d883a 	mov	r6,r7
    b804:	1009883a 	mov	r4,r2
    b808:	dfc00215 	stw	ra,8(sp)
    b80c:	80000015 	stw	zero,0(r16)
    b810:	00100e40 	call	100e4 <write>
    b814:	00ffffc4 	movi	r3,-1
    b818:	10c00526 	beq	r2,r3,b830 <_write_r+0x50>
    b81c:	dfc00217 	ldw	ra,8(sp)
    b820:	dc400117 	ldw	r17,4(sp)
    b824:	dc000017 	ldw	r16,0(sp)
    b828:	dec00304 	addi	sp,sp,12
    b82c:	f800283a 	ret
    b830:	80c00017 	ldw	r3,0(r16)
    b834:	183ff926 	beq	r3,zero,b81c <__alt_exception_stack_pointer+0xf800b81c>
    b838:	88c00015 	stw	r3,0(r17)
    b83c:	003ff706 	br	b81c <__alt_exception_stack_pointer+0xf800b81c>

0000b840 <_close_r>:
    b840:	defffd04 	addi	sp,sp,-12
    b844:	dc000015 	stw	r16,0(sp)
    b848:	04000074 	movhi	r16,1
    b84c:	dc400115 	stw	r17,4(sp)
    b850:	84189c04 	addi	r16,r16,25200
    b854:	2023883a 	mov	r17,r4
    b858:	2809883a 	mov	r4,r5
    b85c:	dfc00215 	stw	ra,8(sp)
    b860:	80000015 	stw	zero,0(r16)
    b864:	000f7a80 	call	f7a8 <close>
    b868:	00ffffc4 	movi	r3,-1
    b86c:	10c00526 	beq	r2,r3,b884 <_close_r+0x44>
    b870:	dfc00217 	ldw	ra,8(sp)
    b874:	dc400117 	ldw	r17,4(sp)
    b878:	dc000017 	ldw	r16,0(sp)
    b87c:	dec00304 	addi	sp,sp,12
    b880:	f800283a 	ret
    b884:	80c00017 	ldw	r3,0(r16)
    b888:	183ff926 	beq	r3,zero,b870 <__alt_exception_stack_pointer+0xf800b870>
    b88c:	88c00015 	stw	r3,0(r17)
    b890:	003ff706 	br	b870 <__alt_exception_stack_pointer+0xf800b870>

0000b894 <_calloc_r>:
    b894:	defffe04 	addi	sp,sp,-8
    b898:	2805883a 	mov	r2,r5
    b89c:	dc000015 	stw	r16,0(sp)
    b8a0:	300b883a 	mov	r5,r6
    b8a4:	2021883a 	mov	r16,r4
    b8a8:	1009883a 	mov	r4,r2
    b8ac:	dfc00115 	stw	ra,4(sp)
    b8b0:	000cea00 	call	cea0 <__mulsi3>
    b8b4:	100b883a 	mov	r5,r2
    b8b8:	8009883a 	mov	r4,r16
    b8bc:	00028240 	call	2824 <_malloc_r>
    b8c0:	10002926 	beq	r2,zero,b968 <_calloc_r+0xd4>
    b8c4:	11bfff17 	ldw	r6,-4(r2)
    b8c8:	1021883a 	mov	r16,r2
    b8cc:	00bfff04 	movi	r2,-4
    b8d0:	308c703a 	and	r6,r6,r2
    b8d4:	00c00904 	movi	r3,36
    b8d8:	308d883a 	add	r6,r6,r2
    b8dc:	19801636 	bltu	r3,r6,b938 <_calloc_r+0xa4>
    b8e0:	008004c4 	movi	r2,19
    b8e4:	11800b2e 	bgeu	r2,r6,b914 <_calloc_r+0x80>
    b8e8:	80000015 	stw	zero,0(r16)
    b8ec:	80000115 	stw	zero,4(r16)
    b8f0:	008006c4 	movi	r2,27
    b8f4:	11801a2e 	bgeu	r2,r6,b960 <_calloc_r+0xcc>
    b8f8:	80000215 	stw	zero,8(r16)
    b8fc:	80000315 	stw	zero,12(r16)
    b900:	30c0151e 	bne	r6,r3,b958 <_calloc_r+0xc4>
    b904:	80000415 	stw	zero,16(r16)
    b908:	80800604 	addi	r2,r16,24
    b90c:	80000515 	stw	zero,20(r16)
    b910:	00000106 	br	b918 <_calloc_r+0x84>
    b914:	8005883a 	mov	r2,r16
    b918:	10000015 	stw	zero,0(r2)
    b91c:	10000115 	stw	zero,4(r2)
    b920:	10000215 	stw	zero,8(r2)
    b924:	8005883a 	mov	r2,r16
    b928:	dfc00117 	ldw	ra,4(sp)
    b92c:	dc000017 	ldw	r16,0(sp)
    b930:	dec00204 	addi	sp,sp,8
    b934:	f800283a 	ret
    b938:	000b883a 	mov	r5,zero
    b93c:	8009883a 	mov	r4,r16
    b940:	00087180 	call	8718 <memset>
    b944:	8005883a 	mov	r2,r16
    b948:	dfc00117 	ldw	ra,4(sp)
    b94c:	dc000017 	ldw	r16,0(sp)
    b950:	dec00204 	addi	sp,sp,8
    b954:	f800283a 	ret
    b958:	80800404 	addi	r2,r16,16
    b95c:	003fee06 	br	b918 <__alt_exception_stack_pointer+0xf800b918>
    b960:	80800204 	addi	r2,r16,8
    b964:	003fec06 	br	b918 <__alt_exception_stack_pointer+0xf800b918>
    b968:	0005883a 	mov	r2,zero
    b96c:	003fee06 	br	b928 <__alt_exception_stack_pointer+0xf800b928>

0000b970 <_fclose_r>:
    b970:	28003926 	beq	r5,zero,ba58 <_fclose_r+0xe8>
    b974:	defffc04 	addi	sp,sp,-16
    b978:	dc400115 	stw	r17,4(sp)
    b97c:	dc000015 	stw	r16,0(sp)
    b980:	dfc00315 	stw	ra,12(sp)
    b984:	dc800215 	stw	r18,8(sp)
    b988:	2023883a 	mov	r17,r4
    b98c:	2821883a 	mov	r16,r5
    b990:	20000226 	beq	r4,zero,b99c <_fclose_r+0x2c>
    b994:	20800e17 	ldw	r2,56(r4)
    b998:	10002726 	beq	r2,zero,ba38 <_fclose_r+0xc8>
    b99c:	8080030f 	ldh	r2,12(r16)
    b9a0:	1000071e 	bne	r2,zero,b9c0 <_fclose_r+0x50>
    b9a4:	0005883a 	mov	r2,zero
    b9a8:	dfc00317 	ldw	ra,12(sp)
    b9ac:	dc800217 	ldw	r18,8(sp)
    b9b0:	dc400117 	ldw	r17,4(sp)
    b9b4:	dc000017 	ldw	r16,0(sp)
    b9b8:	dec00404 	addi	sp,sp,16
    b9bc:	f800283a 	ret
    b9c0:	800b883a 	mov	r5,r16
    b9c4:	8809883a 	mov	r4,r17
    b9c8:	000701c0 	call	701c <__sflush_r>
    b9cc:	1025883a 	mov	r18,r2
    b9d0:	80800b17 	ldw	r2,44(r16)
    b9d4:	10000426 	beq	r2,zero,b9e8 <_fclose_r+0x78>
    b9d8:	81400717 	ldw	r5,28(r16)
    b9dc:	8809883a 	mov	r4,r17
    b9e0:	103ee83a 	callr	r2
    b9e4:	10001616 	blt	r2,zero,ba40 <_fclose_r+0xd0>
    b9e8:	8080030b 	ldhu	r2,12(r16)
    b9ec:	1080200c 	andi	r2,r2,128
    b9f0:	1000151e 	bne	r2,zero,ba48 <_fclose_r+0xd8>
    b9f4:	81400c17 	ldw	r5,48(r16)
    b9f8:	28000526 	beq	r5,zero,ba10 <_fclose_r+0xa0>
    b9fc:	80801004 	addi	r2,r16,64
    ba00:	28800226 	beq	r5,r2,ba0c <_fclose_r+0x9c>
    ba04:	8809883a 	mov	r4,r17
    ba08:	00077980 	call	7798 <_free_r>
    ba0c:	80000c15 	stw	zero,48(r16)
    ba10:	81401117 	ldw	r5,68(r16)
    ba14:	28000326 	beq	r5,zero,ba24 <_fclose_r+0xb4>
    ba18:	8809883a 	mov	r4,r17
    ba1c:	00077980 	call	7798 <_free_r>
    ba20:	80001115 	stw	zero,68(r16)
    ba24:	00076340 	call	7634 <__sfp_lock_acquire>
    ba28:	8000030d 	sth	zero,12(r16)
    ba2c:	00076380 	call	7638 <__sfp_lock_release>
    ba30:	9005883a 	mov	r2,r18
    ba34:	003fdc06 	br	b9a8 <__alt_exception_stack_pointer+0xf800b9a8>
    ba38:	00076240 	call	7624 <__sinit>
    ba3c:	003fd706 	br	b99c <__alt_exception_stack_pointer+0xf800b99c>
    ba40:	04bfffc4 	movi	r18,-1
    ba44:	003fe806 	br	b9e8 <__alt_exception_stack_pointer+0xf800b9e8>
    ba48:	81400417 	ldw	r5,16(r16)
    ba4c:	8809883a 	mov	r4,r17
    ba50:	00077980 	call	7798 <_free_r>
    ba54:	003fe706 	br	b9f4 <__alt_exception_stack_pointer+0xf800b9f4>
    ba58:	0005883a 	mov	r2,zero
    ba5c:	f800283a 	ret

0000ba60 <fclose>:
    ba60:	00800074 	movhi	r2,1
    ba64:	1091c904 	addi	r2,r2,18212
    ba68:	200b883a 	mov	r5,r4
    ba6c:	11000017 	ldw	r4,0(r2)
    ba70:	000b9701 	jmpi	b970 <_fclose_r>

0000ba74 <__fputwc>:
    ba74:	defff804 	addi	sp,sp,-32
    ba78:	dcc00415 	stw	r19,16(sp)
    ba7c:	dc800315 	stw	r18,12(sp)
    ba80:	dc000115 	stw	r16,4(sp)
    ba84:	dfc00715 	stw	ra,28(sp)
    ba88:	dd400615 	stw	r21,24(sp)
    ba8c:	dd000515 	stw	r20,20(sp)
    ba90:	dc400215 	stw	r17,8(sp)
    ba94:	2027883a 	mov	r19,r4
    ba98:	2825883a 	mov	r18,r5
    ba9c:	3021883a 	mov	r16,r6
    baa0:	00081800 	call	8180 <__locale_mb_cur_max>
    baa4:	00c00044 	movi	r3,1
    baa8:	10c03e26 	beq	r2,r3,bba4 <__fputwc+0x130>
    baac:	81c01704 	addi	r7,r16,92
    bab0:	900d883a 	mov	r6,r18
    bab4:	d80b883a 	mov	r5,sp
    bab8:	9809883a 	mov	r4,r19
    babc:	000bf440 	call	bf44 <_wcrtomb_r>
    bac0:	1029883a 	mov	r20,r2
    bac4:	00bfffc4 	movi	r2,-1
    bac8:	a0802026 	beq	r20,r2,bb4c <__fputwc+0xd8>
    bacc:	d9400003 	ldbu	r5,0(sp)
    bad0:	a0001c26 	beq	r20,zero,bb44 <__fputwc+0xd0>
    bad4:	0023883a 	mov	r17,zero
    bad8:	05400284 	movi	r21,10
    badc:	00000906 	br	bb04 <__fputwc+0x90>
    bae0:	80800017 	ldw	r2,0(r16)
    bae4:	11400005 	stb	r5,0(r2)
    bae8:	80c00017 	ldw	r3,0(r16)
    baec:	18c00044 	addi	r3,r3,1
    baf0:	80c00015 	stw	r3,0(r16)
    baf4:	8c400044 	addi	r17,r17,1
    baf8:	dc45883a 	add	r2,sp,r17
    bafc:	8d00112e 	bgeu	r17,r20,bb44 <__fputwc+0xd0>
    bb00:	11400003 	ldbu	r5,0(r2)
    bb04:	80c00217 	ldw	r3,8(r16)
    bb08:	18ffffc4 	addi	r3,r3,-1
    bb0c:	80c00215 	stw	r3,8(r16)
    bb10:	183ff30e 	bge	r3,zero,bae0 <__alt_exception_stack_pointer+0xf800bae0>
    bb14:	80800617 	ldw	r2,24(r16)
    bb18:	18801916 	blt	r3,r2,bb80 <__fputwc+0x10c>
    bb1c:	80800017 	ldw	r2,0(r16)
    bb20:	11400005 	stb	r5,0(r2)
    bb24:	80800017 	ldw	r2,0(r16)
    bb28:	10c00003 	ldbu	r3,0(r2)
    bb2c:	10800044 	addi	r2,r2,1
    bb30:	1d402326 	beq	r3,r21,bbc0 <__fputwc+0x14c>
    bb34:	80800015 	stw	r2,0(r16)
    bb38:	8c400044 	addi	r17,r17,1
    bb3c:	dc45883a 	add	r2,sp,r17
    bb40:	8d3fef36 	bltu	r17,r20,bb00 <__alt_exception_stack_pointer+0xf800bb00>
    bb44:	9005883a 	mov	r2,r18
    bb48:	00000406 	br	bb5c <__fputwc+0xe8>
    bb4c:	80c0030b 	ldhu	r3,12(r16)
    bb50:	a005883a 	mov	r2,r20
    bb54:	18c01014 	ori	r3,r3,64
    bb58:	80c0030d 	sth	r3,12(r16)
    bb5c:	dfc00717 	ldw	ra,28(sp)
    bb60:	dd400617 	ldw	r21,24(sp)
    bb64:	dd000517 	ldw	r20,20(sp)
    bb68:	dcc00417 	ldw	r19,16(sp)
    bb6c:	dc800317 	ldw	r18,12(sp)
    bb70:	dc400217 	ldw	r17,8(sp)
    bb74:	dc000117 	ldw	r16,4(sp)
    bb78:	dec00804 	addi	sp,sp,32
    bb7c:	f800283a 	ret
    bb80:	800d883a 	mov	r6,r16
    bb84:	29403fcc 	andi	r5,r5,255
    bb88:	9809883a 	mov	r4,r19
    bb8c:	000bdec0 	call	bdec <__swbuf_r>
    bb90:	10bfffe0 	cmpeqi	r2,r2,-1
    bb94:	10803fcc 	andi	r2,r2,255
    bb98:	103fd626 	beq	r2,zero,baf4 <__alt_exception_stack_pointer+0xf800baf4>
    bb9c:	00bfffc4 	movi	r2,-1
    bba0:	003fee06 	br	bb5c <__alt_exception_stack_pointer+0xf800bb5c>
    bba4:	90ffffc4 	addi	r3,r18,-1
    bba8:	01003f84 	movi	r4,254
    bbac:	20ffbf36 	bltu	r4,r3,baac <__alt_exception_stack_pointer+0xf800baac>
    bbb0:	900b883a 	mov	r5,r18
    bbb4:	dc800005 	stb	r18,0(sp)
    bbb8:	1029883a 	mov	r20,r2
    bbbc:	003fc506 	br	bad4 <__alt_exception_stack_pointer+0xf800bad4>
    bbc0:	800d883a 	mov	r6,r16
    bbc4:	a80b883a 	mov	r5,r21
    bbc8:	9809883a 	mov	r4,r19
    bbcc:	000bdec0 	call	bdec <__swbuf_r>
    bbd0:	10bfffe0 	cmpeqi	r2,r2,-1
    bbd4:	003fef06 	br	bb94 <__alt_exception_stack_pointer+0xf800bb94>

0000bbd8 <_fputwc_r>:
    bbd8:	3080030b 	ldhu	r2,12(r6)
    bbdc:	10c8000c 	andi	r3,r2,8192
    bbe0:	1800051e 	bne	r3,zero,bbf8 <_fputwc_r+0x20>
    bbe4:	30c01917 	ldw	r3,100(r6)
    bbe8:	10880014 	ori	r2,r2,8192
    bbec:	3080030d 	sth	r2,12(r6)
    bbf0:	18880014 	ori	r2,r3,8192
    bbf4:	30801915 	stw	r2,100(r6)
    bbf8:	000ba741 	jmpi	ba74 <__fputwc>

0000bbfc <fputwc>:
    bbfc:	00800074 	movhi	r2,1
    bc00:	defffc04 	addi	sp,sp,-16
    bc04:	1091c904 	addi	r2,r2,18212
    bc08:	dc000115 	stw	r16,4(sp)
    bc0c:	14000017 	ldw	r16,0(r2)
    bc10:	dc400215 	stw	r17,8(sp)
    bc14:	dfc00315 	stw	ra,12(sp)
    bc18:	2023883a 	mov	r17,r4
    bc1c:	80000226 	beq	r16,zero,bc28 <fputwc+0x2c>
    bc20:	80800e17 	ldw	r2,56(r16)
    bc24:	10001026 	beq	r2,zero,bc68 <fputwc+0x6c>
    bc28:	2880030b 	ldhu	r2,12(r5)
    bc2c:	10c8000c 	andi	r3,r2,8192
    bc30:	1800051e 	bne	r3,zero,bc48 <fputwc+0x4c>
    bc34:	28c01917 	ldw	r3,100(r5)
    bc38:	10880014 	ori	r2,r2,8192
    bc3c:	2880030d 	sth	r2,12(r5)
    bc40:	18880014 	ori	r2,r3,8192
    bc44:	28801915 	stw	r2,100(r5)
    bc48:	280d883a 	mov	r6,r5
    bc4c:	8009883a 	mov	r4,r16
    bc50:	880b883a 	mov	r5,r17
    bc54:	dfc00317 	ldw	ra,12(sp)
    bc58:	dc400217 	ldw	r17,8(sp)
    bc5c:	dc000117 	ldw	r16,4(sp)
    bc60:	dec00404 	addi	sp,sp,16
    bc64:	000ba741 	jmpi	ba74 <__fputwc>
    bc68:	8009883a 	mov	r4,r16
    bc6c:	d9400015 	stw	r5,0(sp)
    bc70:	00076240 	call	7624 <__sinit>
    bc74:	d9400017 	ldw	r5,0(sp)
    bc78:	003feb06 	br	bc28 <__alt_exception_stack_pointer+0xf800bc28>

0000bc7c <_fstat_r>:
    bc7c:	defffd04 	addi	sp,sp,-12
    bc80:	2805883a 	mov	r2,r5
    bc84:	dc000015 	stw	r16,0(sp)
    bc88:	04000074 	movhi	r16,1
    bc8c:	dc400115 	stw	r17,4(sp)
    bc90:	84189c04 	addi	r16,r16,25200
    bc94:	2023883a 	mov	r17,r4
    bc98:	300b883a 	mov	r5,r6
    bc9c:	1009883a 	mov	r4,r2
    bca0:	dfc00215 	stw	ra,8(sp)
    bca4:	80000015 	stw	zero,0(r16)
    bca8:	000f8e80 	call	f8e8 <fstat>
    bcac:	00ffffc4 	movi	r3,-1
    bcb0:	10c00526 	beq	r2,r3,bcc8 <_fstat_r+0x4c>
    bcb4:	dfc00217 	ldw	ra,8(sp)
    bcb8:	dc400117 	ldw	r17,4(sp)
    bcbc:	dc000017 	ldw	r16,0(sp)
    bcc0:	dec00304 	addi	sp,sp,12
    bcc4:	f800283a 	ret
    bcc8:	80c00017 	ldw	r3,0(r16)
    bccc:	183ff926 	beq	r3,zero,bcb4 <__alt_exception_stack_pointer+0xf800bcb4>
    bcd0:	88c00015 	stw	r3,0(r17)
    bcd4:	003ff706 	br	bcb4 <__alt_exception_stack_pointer+0xf800bcb4>

0000bcd8 <_isatty_r>:
    bcd8:	defffd04 	addi	sp,sp,-12
    bcdc:	dc000015 	stw	r16,0(sp)
    bce0:	04000074 	movhi	r16,1
    bce4:	dc400115 	stw	r17,4(sp)
    bce8:	84189c04 	addi	r16,r16,25200
    bcec:	2023883a 	mov	r17,r4
    bcf0:	2809883a 	mov	r4,r5
    bcf4:	dfc00215 	stw	ra,8(sp)
    bcf8:	80000015 	stw	zero,0(r16)
    bcfc:	000f9dc0 	call	f9dc <isatty>
    bd00:	00ffffc4 	movi	r3,-1
    bd04:	10c00526 	beq	r2,r3,bd1c <_isatty_r+0x44>
    bd08:	dfc00217 	ldw	ra,8(sp)
    bd0c:	dc400117 	ldw	r17,4(sp)
    bd10:	dc000017 	ldw	r16,0(sp)
    bd14:	dec00304 	addi	sp,sp,12
    bd18:	f800283a 	ret
    bd1c:	80c00017 	ldw	r3,0(r16)
    bd20:	183ff926 	beq	r3,zero,bd08 <__alt_exception_stack_pointer+0xf800bd08>
    bd24:	88c00015 	stw	r3,0(r17)
    bd28:	003ff706 	br	bd08 <__alt_exception_stack_pointer+0xf800bd08>

0000bd2c <_lseek_r>:
    bd2c:	defffd04 	addi	sp,sp,-12
    bd30:	2805883a 	mov	r2,r5
    bd34:	dc000015 	stw	r16,0(sp)
    bd38:	04000074 	movhi	r16,1
    bd3c:	dc400115 	stw	r17,4(sp)
    bd40:	300b883a 	mov	r5,r6
    bd44:	84189c04 	addi	r16,r16,25200
    bd48:	2023883a 	mov	r17,r4
    bd4c:	380d883a 	mov	r6,r7
    bd50:	1009883a 	mov	r4,r2
    bd54:	dfc00215 	stw	ra,8(sp)
    bd58:	80000015 	stw	zero,0(r16)
    bd5c:	000fbb00 	call	fbb0 <lseek>
    bd60:	00ffffc4 	movi	r3,-1
    bd64:	10c00526 	beq	r2,r3,bd7c <_lseek_r+0x50>
    bd68:	dfc00217 	ldw	ra,8(sp)
    bd6c:	dc400117 	ldw	r17,4(sp)
    bd70:	dc000017 	ldw	r16,0(sp)
    bd74:	dec00304 	addi	sp,sp,12
    bd78:	f800283a 	ret
    bd7c:	80c00017 	ldw	r3,0(r16)
    bd80:	183ff926 	beq	r3,zero,bd68 <__alt_exception_stack_pointer+0xf800bd68>
    bd84:	88c00015 	stw	r3,0(r17)
    bd88:	003ff706 	br	bd68 <__alt_exception_stack_pointer+0xf800bd68>

0000bd8c <_read_r>:
    bd8c:	defffd04 	addi	sp,sp,-12
    bd90:	2805883a 	mov	r2,r5
    bd94:	dc000015 	stw	r16,0(sp)
    bd98:	04000074 	movhi	r16,1
    bd9c:	dc400115 	stw	r17,4(sp)
    bda0:	300b883a 	mov	r5,r6
    bda4:	84189c04 	addi	r16,r16,25200
    bda8:	2023883a 	mov	r17,r4
    bdac:	380d883a 	mov	r6,r7
    bdb0:	1009883a 	mov	r4,r2
    bdb4:	dfc00215 	stw	ra,8(sp)
    bdb8:	80000015 	stw	zero,0(r16)
    bdbc:	000fd8c0 	call	fd8c <read>
    bdc0:	00ffffc4 	movi	r3,-1
    bdc4:	10c00526 	beq	r2,r3,bddc <_read_r+0x50>
    bdc8:	dfc00217 	ldw	ra,8(sp)
    bdcc:	dc400117 	ldw	r17,4(sp)
    bdd0:	dc000017 	ldw	r16,0(sp)
    bdd4:	dec00304 	addi	sp,sp,12
    bdd8:	f800283a 	ret
    bddc:	80c00017 	ldw	r3,0(r16)
    bde0:	183ff926 	beq	r3,zero,bdc8 <__alt_exception_stack_pointer+0xf800bdc8>
    bde4:	88c00015 	stw	r3,0(r17)
    bde8:	003ff706 	br	bdc8 <__alt_exception_stack_pointer+0xf800bdc8>

0000bdec <__swbuf_r>:
    bdec:	defffb04 	addi	sp,sp,-20
    bdf0:	dcc00315 	stw	r19,12(sp)
    bdf4:	dc800215 	stw	r18,8(sp)
    bdf8:	dc000015 	stw	r16,0(sp)
    bdfc:	dfc00415 	stw	ra,16(sp)
    be00:	dc400115 	stw	r17,4(sp)
    be04:	2025883a 	mov	r18,r4
    be08:	2827883a 	mov	r19,r5
    be0c:	3021883a 	mov	r16,r6
    be10:	20000226 	beq	r4,zero,be1c <__swbuf_r+0x30>
    be14:	20800e17 	ldw	r2,56(r4)
    be18:	10004226 	beq	r2,zero,bf24 <__swbuf_r+0x138>
    be1c:	80800617 	ldw	r2,24(r16)
    be20:	8100030b 	ldhu	r4,12(r16)
    be24:	80800215 	stw	r2,8(r16)
    be28:	2080020c 	andi	r2,r4,8
    be2c:	10003626 	beq	r2,zero,bf08 <__swbuf_r+0x11c>
    be30:	80c00417 	ldw	r3,16(r16)
    be34:	18003426 	beq	r3,zero,bf08 <__swbuf_r+0x11c>
    be38:	2088000c 	andi	r2,r4,8192
    be3c:	9c403fcc 	andi	r17,r19,255
    be40:	10001a26 	beq	r2,zero,beac <__swbuf_r+0xc0>
    be44:	80800017 	ldw	r2,0(r16)
    be48:	81000517 	ldw	r4,20(r16)
    be4c:	10c7c83a 	sub	r3,r2,r3
    be50:	1900200e 	bge	r3,r4,bed4 <__swbuf_r+0xe8>
    be54:	18c00044 	addi	r3,r3,1
    be58:	81000217 	ldw	r4,8(r16)
    be5c:	11400044 	addi	r5,r2,1
    be60:	81400015 	stw	r5,0(r16)
    be64:	213fffc4 	addi	r4,r4,-1
    be68:	81000215 	stw	r4,8(r16)
    be6c:	14c00005 	stb	r19,0(r2)
    be70:	80800517 	ldw	r2,20(r16)
    be74:	10c01e26 	beq	r2,r3,bef0 <__swbuf_r+0x104>
    be78:	8080030b 	ldhu	r2,12(r16)
    be7c:	1080004c 	andi	r2,r2,1
    be80:	10000226 	beq	r2,zero,be8c <__swbuf_r+0xa0>
    be84:	00800284 	movi	r2,10
    be88:	88801926 	beq	r17,r2,bef0 <__swbuf_r+0x104>
    be8c:	8805883a 	mov	r2,r17
    be90:	dfc00417 	ldw	ra,16(sp)
    be94:	dcc00317 	ldw	r19,12(sp)
    be98:	dc800217 	ldw	r18,8(sp)
    be9c:	dc400117 	ldw	r17,4(sp)
    bea0:	dc000017 	ldw	r16,0(sp)
    bea4:	dec00504 	addi	sp,sp,20
    bea8:	f800283a 	ret
    beac:	81401917 	ldw	r5,100(r16)
    beb0:	00b7ffc4 	movi	r2,-8193
    beb4:	21080014 	ori	r4,r4,8192
    beb8:	2884703a 	and	r2,r5,r2
    bebc:	80801915 	stw	r2,100(r16)
    bec0:	80800017 	ldw	r2,0(r16)
    bec4:	8100030d 	sth	r4,12(r16)
    bec8:	81000517 	ldw	r4,20(r16)
    becc:	10c7c83a 	sub	r3,r2,r3
    bed0:	193fe016 	blt	r3,r4,be54 <__alt_exception_stack_pointer+0xf800be54>
    bed4:	800b883a 	mov	r5,r16
    bed8:	9009883a 	mov	r4,r18
    bedc:	00072380 	call	7238 <_fflush_r>
    bee0:	1000071e 	bne	r2,zero,bf00 <__swbuf_r+0x114>
    bee4:	80800017 	ldw	r2,0(r16)
    bee8:	00c00044 	movi	r3,1
    beec:	003fda06 	br	be58 <__alt_exception_stack_pointer+0xf800be58>
    bef0:	800b883a 	mov	r5,r16
    bef4:	9009883a 	mov	r4,r18
    bef8:	00072380 	call	7238 <_fflush_r>
    befc:	103fe326 	beq	r2,zero,be8c <__alt_exception_stack_pointer+0xf800be8c>
    bf00:	00bfffc4 	movi	r2,-1
    bf04:	003fe206 	br	be90 <__alt_exception_stack_pointer+0xf800be90>
    bf08:	800b883a 	mov	r5,r16
    bf0c:	9009883a 	mov	r4,r18
    bf10:	00056180 	call	5618 <__swsetup_r>
    bf14:	103ffa1e 	bne	r2,zero,bf00 <__alt_exception_stack_pointer+0xf800bf00>
    bf18:	8100030b 	ldhu	r4,12(r16)
    bf1c:	80c00417 	ldw	r3,16(r16)
    bf20:	003fc506 	br	be38 <__alt_exception_stack_pointer+0xf800be38>
    bf24:	00076240 	call	7624 <__sinit>
    bf28:	003fbc06 	br	be1c <__alt_exception_stack_pointer+0xf800be1c>

0000bf2c <__swbuf>:
    bf2c:	00800074 	movhi	r2,1
    bf30:	1091c904 	addi	r2,r2,18212
    bf34:	280d883a 	mov	r6,r5
    bf38:	200b883a 	mov	r5,r4
    bf3c:	11000017 	ldw	r4,0(r2)
    bf40:	000bdec1 	jmpi	bdec <__swbuf_r>

0000bf44 <_wcrtomb_r>:
    bf44:	defff604 	addi	sp,sp,-40
    bf48:	00800074 	movhi	r2,1
    bf4c:	dc800815 	stw	r18,32(sp)
    bf50:	dc400715 	stw	r17,28(sp)
    bf54:	dc000615 	stw	r16,24(sp)
    bf58:	1091cd04 	addi	r2,r2,18228
    bf5c:	dfc00915 	stw	ra,36(sp)
    bf60:	2021883a 	mov	r16,r4
    bf64:	3823883a 	mov	r17,r7
    bf68:	14800017 	ldw	r18,0(r2)
    bf6c:	28001426 	beq	r5,zero,bfc0 <_wcrtomb_r+0x7c>
    bf70:	d9400415 	stw	r5,16(sp)
    bf74:	d9800515 	stw	r6,20(sp)
    bf78:	00081740 	call	8174 <__locale_charset>
    bf7c:	d9800517 	ldw	r6,20(sp)
    bf80:	d9400417 	ldw	r5,16(sp)
    bf84:	100f883a 	mov	r7,r2
    bf88:	dc400015 	stw	r17,0(sp)
    bf8c:	8009883a 	mov	r4,r16
    bf90:	903ee83a 	callr	r18
    bf94:	00ffffc4 	movi	r3,-1
    bf98:	10c0031e 	bne	r2,r3,bfa8 <_wcrtomb_r+0x64>
    bf9c:	88000015 	stw	zero,0(r17)
    bfa0:	00c02284 	movi	r3,138
    bfa4:	80c00015 	stw	r3,0(r16)
    bfa8:	dfc00917 	ldw	ra,36(sp)
    bfac:	dc800817 	ldw	r18,32(sp)
    bfb0:	dc400717 	ldw	r17,28(sp)
    bfb4:	dc000617 	ldw	r16,24(sp)
    bfb8:	dec00a04 	addi	sp,sp,40
    bfbc:	f800283a 	ret
    bfc0:	00081740 	call	8174 <__locale_charset>
    bfc4:	100f883a 	mov	r7,r2
    bfc8:	dc400015 	stw	r17,0(sp)
    bfcc:	000d883a 	mov	r6,zero
    bfd0:	d9400104 	addi	r5,sp,4
    bfd4:	8009883a 	mov	r4,r16
    bfd8:	903ee83a 	callr	r18
    bfdc:	003fed06 	br	bf94 <__alt_exception_stack_pointer+0xf800bf94>

0000bfe0 <wcrtomb>:
    bfe0:	defff604 	addi	sp,sp,-40
    bfe4:	00800074 	movhi	r2,1
    bfe8:	dc800615 	stw	r18,24(sp)
    bfec:	dc400515 	stw	r17,20(sp)
    bff0:	1091c904 	addi	r2,r2,18212
    bff4:	dfc00915 	stw	ra,36(sp)
    bff8:	dd000815 	stw	r20,32(sp)
    bffc:	dcc00715 	stw	r19,28(sp)
    c000:	dc000415 	stw	r16,16(sp)
    c004:	3025883a 	mov	r18,r6
    c008:	14400017 	ldw	r17,0(r2)
    c00c:	20001926 	beq	r4,zero,c074 <wcrtomb+0x94>
    c010:	00800074 	movhi	r2,1
    c014:	1091cd04 	addi	r2,r2,18228
    c018:	15000017 	ldw	r20,0(r2)
    c01c:	2021883a 	mov	r16,r4
    c020:	2827883a 	mov	r19,r5
    c024:	00081740 	call	8174 <__locale_charset>
    c028:	100f883a 	mov	r7,r2
    c02c:	dc800015 	stw	r18,0(sp)
    c030:	980d883a 	mov	r6,r19
    c034:	800b883a 	mov	r5,r16
    c038:	8809883a 	mov	r4,r17
    c03c:	a03ee83a 	callr	r20
    c040:	00ffffc4 	movi	r3,-1
    c044:	10c0031e 	bne	r2,r3,c054 <wcrtomb+0x74>
    c048:	90000015 	stw	zero,0(r18)
    c04c:	00c02284 	movi	r3,138
    c050:	88c00015 	stw	r3,0(r17)
    c054:	dfc00917 	ldw	ra,36(sp)
    c058:	dd000817 	ldw	r20,32(sp)
    c05c:	dcc00717 	ldw	r19,28(sp)
    c060:	dc800617 	ldw	r18,24(sp)
    c064:	dc400517 	ldw	r17,20(sp)
    c068:	dc000417 	ldw	r16,16(sp)
    c06c:	dec00a04 	addi	sp,sp,40
    c070:	f800283a 	ret
    c074:	00800074 	movhi	r2,1
    c078:	1091cd04 	addi	r2,r2,18228
    c07c:	14000017 	ldw	r16,0(r2)
    c080:	00081740 	call	8174 <__locale_charset>
    c084:	100f883a 	mov	r7,r2
    c088:	dc800015 	stw	r18,0(sp)
    c08c:	000d883a 	mov	r6,zero
    c090:	d9400104 	addi	r5,sp,4
    c094:	8809883a 	mov	r4,r17
    c098:	803ee83a 	callr	r16
    c09c:	003fe806 	br	c040 <__alt_exception_stack_pointer+0xf800c040>

0000c0a0 <__ascii_wctomb>:
    c0a0:	28000526 	beq	r5,zero,c0b8 <__ascii_wctomb+0x18>
    c0a4:	00803fc4 	movi	r2,255
    c0a8:	11800536 	bltu	r2,r6,c0c0 <__ascii_wctomb+0x20>
    c0ac:	29800005 	stb	r6,0(r5)
    c0b0:	00800044 	movi	r2,1
    c0b4:	f800283a 	ret
    c0b8:	0005883a 	mov	r2,zero
    c0bc:	f800283a 	ret
    c0c0:	00802284 	movi	r2,138
    c0c4:	20800015 	stw	r2,0(r4)
    c0c8:	00bfffc4 	movi	r2,-1
    c0cc:	f800283a 	ret

0000c0d0 <_wctomb_r>:
    c0d0:	00800074 	movhi	r2,1
    c0d4:	defff904 	addi	sp,sp,-28
    c0d8:	1091cd04 	addi	r2,r2,18228
    c0dc:	dfc00615 	stw	ra,24(sp)
    c0e0:	dc400515 	stw	r17,20(sp)
    c0e4:	dc000415 	stw	r16,16(sp)
    c0e8:	3823883a 	mov	r17,r7
    c0ec:	14000017 	ldw	r16,0(r2)
    c0f0:	d9000115 	stw	r4,4(sp)
    c0f4:	d9400215 	stw	r5,8(sp)
    c0f8:	d9800315 	stw	r6,12(sp)
    c0fc:	00081740 	call	8174 <__locale_charset>
    c100:	d9800317 	ldw	r6,12(sp)
    c104:	d9400217 	ldw	r5,8(sp)
    c108:	d9000117 	ldw	r4,4(sp)
    c10c:	100f883a 	mov	r7,r2
    c110:	dc400015 	stw	r17,0(sp)
    c114:	803ee83a 	callr	r16
    c118:	dfc00617 	ldw	ra,24(sp)
    c11c:	dc400517 	ldw	r17,20(sp)
    c120:	dc000417 	ldw	r16,16(sp)
    c124:	dec00704 	addi	sp,sp,28
    c128:	f800283a 	ret

0000c12c <__udivdi3>:
    c12c:	defff404 	addi	sp,sp,-48
    c130:	dcc00515 	stw	r19,20(sp)
    c134:	dc000215 	stw	r16,8(sp)
    c138:	dfc00b15 	stw	ra,44(sp)
    c13c:	df000a15 	stw	fp,40(sp)
    c140:	ddc00915 	stw	r23,36(sp)
    c144:	dd800815 	stw	r22,32(sp)
    c148:	dd400715 	stw	r21,28(sp)
    c14c:	dd000615 	stw	r20,24(sp)
    c150:	dc800415 	stw	r18,16(sp)
    c154:	dc400315 	stw	r17,12(sp)
    c158:	2027883a 	mov	r19,r4
    c15c:	2821883a 	mov	r16,r5
    c160:	3800461e 	bne	r7,zero,c27c <__udivdi3+0x150>
    c164:	3023883a 	mov	r17,r6
    c168:	2025883a 	mov	r18,r4
    c16c:	2980572e 	bgeu	r5,r6,c2cc <__udivdi3+0x1a0>
    c170:	00bfffd4 	movui	r2,65535
    c174:	282d883a 	mov	r22,r5
    c178:	1180b236 	bltu	r2,r6,c444 <__udivdi3+0x318>
    c17c:	00803fc4 	movi	r2,255
    c180:	1185803a 	cmpltu	r2,r2,r6
    c184:	100490fa 	slli	r2,r2,3
    c188:	3086d83a 	srl	r3,r6,r2
    c18c:	01000074 	movhi	r4,1
    c190:	210acb04 	addi	r4,r4,11052
    c194:	20c7883a 	add	r3,r4,r3
    c198:	18c00003 	ldbu	r3,0(r3)
    c19c:	1885883a 	add	r2,r3,r2
    c1a0:	00c00804 	movi	r3,32
    c1a4:	1887c83a 	sub	r3,r3,r2
    c1a8:	18000526 	beq	r3,zero,c1c0 <__udivdi3+0x94>
    c1ac:	80e0983a 	sll	r16,r16,r3
    c1b0:	9884d83a 	srl	r2,r19,r2
    c1b4:	30e2983a 	sll	r17,r6,r3
    c1b8:	98e4983a 	sll	r18,r19,r3
    c1bc:	142cb03a 	or	r22,r2,r16
    c1c0:	882ad43a 	srli	r21,r17,16
    c1c4:	b009883a 	mov	r4,r22
    c1c8:	8d3fffcc 	andi	r20,r17,65535
    c1cc:	a80b883a 	mov	r5,r21
    c1d0:	000ce480 	call	ce48 <__umodsi3>
    c1d4:	b009883a 	mov	r4,r22
    c1d8:	a80b883a 	mov	r5,r21
    c1dc:	1027883a 	mov	r19,r2
    c1e0:	000cde40 	call	cde4 <__udivsi3>
    c1e4:	100b883a 	mov	r5,r2
    c1e8:	a009883a 	mov	r4,r20
    c1ec:	102d883a 	mov	r22,r2
    c1f0:	000cea00 	call	cea0 <__mulsi3>
    c1f4:	9826943a 	slli	r19,r19,16
    c1f8:	9006d43a 	srli	r3,r18,16
    c1fc:	1cc6b03a 	or	r3,r3,r19
    c200:	1880052e 	bgeu	r3,r2,c218 <__udivdi3+0xec>
    c204:	1c47883a 	add	r3,r3,r17
    c208:	b13fffc4 	addi	r4,r22,-1
    c20c:	1c400136 	bltu	r3,r17,c214 <__udivdi3+0xe8>
    c210:	18814236 	bltu	r3,r2,c71c <__udivdi3+0x5f0>
    c214:	202d883a 	mov	r22,r4
    c218:	18a1c83a 	sub	r16,r3,r2
    c21c:	8009883a 	mov	r4,r16
    c220:	a80b883a 	mov	r5,r21
    c224:	000ce480 	call	ce48 <__umodsi3>
    c228:	1027883a 	mov	r19,r2
    c22c:	8009883a 	mov	r4,r16
    c230:	a80b883a 	mov	r5,r21
    c234:	9826943a 	slli	r19,r19,16
    c238:	000cde40 	call	cde4 <__udivsi3>
    c23c:	100b883a 	mov	r5,r2
    c240:	a009883a 	mov	r4,r20
    c244:	94bfffcc 	andi	r18,r18,65535
    c248:	1021883a 	mov	r16,r2
    c24c:	94e4b03a 	or	r18,r18,r19
    c250:	000cea00 	call	cea0 <__mulsi3>
    c254:	9080052e 	bgeu	r18,r2,c26c <__udivdi3+0x140>
    c258:	8ca5883a 	add	r18,r17,r18
    c25c:	80ffffc4 	addi	r3,r16,-1
    c260:	94410c36 	bltu	r18,r17,c694 <__udivdi3+0x568>
    c264:	90810b2e 	bgeu	r18,r2,c694 <__udivdi3+0x568>
    c268:	843fff84 	addi	r16,r16,-2
    c26c:	b004943a 	slli	r2,r22,16
    c270:	0007883a 	mov	r3,zero
    c274:	1404b03a 	or	r2,r2,r16
    c278:	00005e06 	br	c3f4 <__udivdi3+0x2c8>
    c27c:	29c05b36 	bltu	r5,r7,c3ec <__udivdi3+0x2c0>
    c280:	00bfffd4 	movui	r2,65535
    c284:	11c0672e 	bgeu	r2,r7,c424 <__udivdi3+0x2f8>
    c288:	00804034 	movhi	r2,256
    c28c:	10bfffc4 	addi	r2,r2,-1
    c290:	11c10a36 	bltu	r2,r7,c6bc <__udivdi3+0x590>
    c294:	00800404 	movi	r2,16
    c298:	3886d83a 	srl	r3,r7,r2
    c29c:	01000074 	movhi	r4,1
    c2a0:	210acb04 	addi	r4,r4,11052
    c2a4:	20c7883a 	add	r3,r4,r3
    c2a8:	18c00003 	ldbu	r3,0(r3)
    c2ac:	05c00804 	movi	r23,32
    c2b0:	1885883a 	add	r2,r3,r2
    c2b4:	b8afc83a 	sub	r23,r23,r2
    c2b8:	b800671e 	bne	r23,zero,c458 <__udivdi3+0x32c>
    c2bc:	3c010536 	bltu	r7,r16,c6d4 <__udivdi3+0x5a8>
    c2c0:	9985403a 	cmpgeu	r2,r19,r6
    c2c4:	0007883a 	mov	r3,zero
    c2c8:	00004a06 	br	c3f4 <__udivdi3+0x2c8>
    c2cc:	3000041e 	bne	r6,zero,c2e0 <__udivdi3+0x1b4>
    c2d0:	000b883a 	mov	r5,zero
    c2d4:	01000044 	movi	r4,1
    c2d8:	000cde40 	call	cde4 <__udivsi3>
    c2dc:	1023883a 	mov	r17,r2
    c2e0:	00bfffd4 	movui	r2,65535
    c2e4:	1440532e 	bgeu	r2,r17,c434 <__udivdi3+0x308>
    c2e8:	00804034 	movhi	r2,256
    c2ec:	10bfffc4 	addi	r2,r2,-1
    c2f0:	1440f436 	bltu	r2,r17,c6c4 <__udivdi3+0x598>
    c2f4:	00800404 	movi	r2,16
    c2f8:	8886d83a 	srl	r3,r17,r2
    c2fc:	01000074 	movhi	r4,1
    c300:	210acb04 	addi	r4,r4,11052
    c304:	20c7883a 	add	r3,r4,r3
    c308:	18c00003 	ldbu	r3,0(r3)
    c30c:	1885883a 	add	r2,r3,r2
    c310:	00c00804 	movi	r3,32
    c314:	1887c83a 	sub	r3,r3,r2
    c318:	1800a51e 	bne	r3,zero,c5b0 <__udivdi3+0x484>
    c31c:	882ad43a 	srli	r21,r17,16
    c320:	8461c83a 	sub	r16,r16,r17
    c324:	8d3fffcc 	andi	r20,r17,65535
    c328:	00c00044 	movi	r3,1
    c32c:	a80b883a 	mov	r5,r21
    c330:	8009883a 	mov	r4,r16
    c334:	d8c00115 	stw	r3,4(sp)
    c338:	000ce480 	call	ce48 <__umodsi3>
    c33c:	a80b883a 	mov	r5,r21
    c340:	8009883a 	mov	r4,r16
    c344:	1027883a 	mov	r19,r2
    c348:	000cde40 	call	cde4 <__udivsi3>
    c34c:	a00b883a 	mov	r5,r20
    c350:	1009883a 	mov	r4,r2
    c354:	102d883a 	mov	r22,r2
    c358:	000cea00 	call	cea0 <__mulsi3>
    c35c:	9826943a 	slli	r19,r19,16
    c360:	900ed43a 	srli	r7,r18,16
    c364:	d8c00117 	ldw	r3,4(sp)
    c368:	3cceb03a 	or	r7,r7,r19
    c36c:	3880052e 	bgeu	r7,r2,c384 <__udivdi3+0x258>
    c370:	3c4f883a 	add	r7,r7,r17
    c374:	b13fffc4 	addi	r4,r22,-1
    c378:	3c400136 	bltu	r7,r17,c380 <__udivdi3+0x254>
    c37c:	3880e436 	bltu	r7,r2,c710 <__udivdi3+0x5e4>
    c380:	202d883a 	mov	r22,r4
    c384:	38a1c83a 	sub	r16,r7,r2
    c388:	8009883a 	mov	r4,r16
    c38c:	a80b883a 	mov	r5,r21
    c390:	d8c00115 	stw	r3,4(sp)
    c394:	000ce480 	call	ce48 <__umodsi3>
    c398:	1027883a 	mov	r19,r2
    c39c:	8009883a 	mov	r4,r16
    c3a0:	a80b883a 	mov	r5,r21
    c3a4:	9826943a 	slli	r19,r19,16
    c3a8:	000cde40 	call	cde4 <__udivsi3>
    c3ac:	a00b883a 	mov	r5,r20
    c3b0:	1009883a 	mov	r4,r2
    c3b4:	94bfffcc 	andi	r18,r18,65535
    c3b8:	1021883a 	mov	r16,r2
    c3bc:	94e4b03a 	or	r18,r18,r19
    c3c0:	000cea00 	call	cea0 <__mulsi3>
    c3c4:	d8c00117 	ldw	r3,4(sp)
    c3c8:	9080052e 	bgeu	r18,r2,c3e0 <__udivdi3+0x2b4>
    c3cc:	8ca5883a 	add	r18,r17,r18
    c3d0:	813fffc4 	addi	r4,r16,-1
    c3d4:	9440ad36 	bltu	r18,r17,c68c <__udivdi3+0x560>
    c3d8:	9080ac2e 	bgeu	r18,r2,c68c <__udivdi3+0x560>
    c3dc:	843fff84 	addi	r16,r16,-2
    c3e0:	b004943a 	slli	r2,r22,16
    c3e4:	1404b03a 	or	r2,r2,r16
    c3e8:	00000206 	br	c3f4 <__udivdi3+0x2c8>
    c3ec:	0007883a 	mov	r3,zero
    c3f0:	0005883a 	mov	r2,zero
    c3f4:	dfc00b17 	ldw	ra,44(sp)
    c3f8:	df000a17 	ldw	fp,40(sp)
    c3fc:	ddc00917 	ldw	r23,36(sp)
    c400:	dd800817 	ldw	r22,32(sp)
    c404:	dd400717 	ldw	r21,28(sp)
    c408:	dd000617 	ldw	r20,24(sp)
    c40c:	dcc00517 	ldw	r19,20(sp)
    c410:	dc800417 	ldw	r18,16(sp)
    c414:	dc400317 	ldw	r17,12(sp)
    c418:	dc000217 	ldw	r16,8(sp)
    c41c:	dec00c04 	addi	sp,sp,48
    c420:	f800283a 	ret
    c424:	00803fc4 	movi	r2,255
    c428:	11c5803a 	cmpltu	r2,r2,r7
    c42c:	100490fa 	slli	r2,r2,3
    c430:	003f9906 	br	c298 <__alt_exception_stack_pointer+0xf800c298>
    c434:	00803fc4 	movi	r2,255
    c438:	1445803a 	cmpltu	r2,r2,r17
    c43c:	100490fa 	slli	r2,r2,3
    c440:	003fad06 	br	c2f8 <__alt_exception_stack_pointer+0xf800c2f8>
    c444:	00804034 	movhi	r2,256
    c448:	10bfffc4 	addi	r2,r2,-1
    c44c:	11809f36 	bltu	r2,r6,c6cc <__udivdi3+0x5a0>
    c450:	00800404 	movi	r2,16
    c454:	003f4c06 	br	c188 <__alt_exception_stack_pointer+0xf800c188>
    c458:	3dce983a 	sll	r7,r7,r23
    c45c:	30b8d83a 	srl	fp,r6,r2
    c460:	80a2d83a 	srl	r17,r16,r2
    c464:	35cc983a 	sll	r6,r6,r23
    c468:	3f38b03a 	or	fp,r7,fp
    c46c:	e024d43a 	srli	r18,fp,16
    c470:	9884d83a 	srl	r2,r19,r2
    c474:	85e0983a 	sll	r16,r16,r23
    c478:	8809883a 	mov	r4,r17
    c47c:	900b883a 	mov	r5,r18
    c480:	d9800015 	stw	r6,0(sp)
    c484:	1420b03a 	or	r16,r2,r16
    c488:	000ce480 	call	ce48 <__umodsi3>
    c48c:	900b883a 	mov	r5,r18
    c490:	8809883a 	mov	r4,r17
    c494:	1029883a 	mov	r20,r2
    c498:	e5bfffcc 	andi	r22,fp,65535
    c49c:	000cde40 	call	cde4 <__udivsi3>
    c4a0:	100b883a 	mov	r5,r2
    c4a4:	b009883a 	mov	r4,r22
    c4a8:	102b883a 	mov	r21,r2
    c4ac:	000cea00 	call	cea0 <__mulsi3>
    c4b0:	a028943a 	slli	r20,r20,16
    c4b4:	8006d43a 	srli	r3,r16,16
    c4b8:	1d06b03a 	or	r3,r3,r20
    c4bc:	1880042e 	bgeu	r3,r2,c4d0 <__udivdi3+0x3a4>
    c4c0:	1f07883a 	add	r3,r3,fp
    c4c4:	a93fffc4 	addi	r4,r21,-1
    c4c8:	1f00892e 	bgeu	r3,fp,c6f0 <__udivdi3+0x5c4>
    c4cc:	202b883a 	mov	r21,r4
    c4d0:	18a3c83a 	sub	r17,r3,r2
    c4d4:	8809883a 	mov	r4,r17
    c4d8:	900b883a 	mov	r5,r18
    c4dc:	000ce480 	call	ce48 <__umodsi3>
    c4e0:	1029883a 	mov	r20,r2
    c4e4:	8809883a 	mov	r4,r17
    c4e8:	900b883a 	mov	r5,r18
    c4ec:	a028943a 	slli	r20,r20,16
    c4f0:	000cde40 	call	cde4 <__udivsi3>
    c4f4:	100b883a 	mov	r5,r2
    c4f8:	b009883a 	mov	r4,r22
    c4fc:	843fffcc 	andi	r16,r16,65535
    c500:	1023883a 	mov	r17,r2
    c504:	8520b03a 	or	r16,r16,r20
    c508:	000cea00 	call	cea0 <__mulsi3>
    c50c:	8080042e 	bgeu	r16,r2,c520 <__udivdi3+0x3f4>
    c510:	8721883a 	add	r16,r16,fp
    c514:	88ffffc4 	addi	r3,r17,-1
    c518:	8700712e 	bgeu	r16,fp,c6e0 <__udivdi3+0x5b4>
    c51c:	1823883a 	mov	r17,r3
    c520:	a80e943a 	slli	r7,r21,16
    c524:	d8c00017 	ldw	r3,0(sp)
    c528:	80a1c83a 	sub	r16,r16,r2
    c52c:	3c64b03a 	or	r18,r7,r17
    c530:	1d3fffcc 	andi	r20,r3,65535
    c534:	9022d43a 	srli	r17,r18,16
    c538:	95bfffcc 	andi	r22,r18,65535
    c53c:	a00b883a 	mov	r5,r20
    c540:	b009883a 	mov	r4,r22
    c544:	182ad43a 	srli	r21,r3,16
    c548:	000cea00 	call	cea0 <__mulsi3>
    c54c:	a00b883a 	mov	r5,r20
    c550:	8809883a 	mov	r4,r17
    c554:	1039883a 	mov	fp,r2
    c558:	000cea00 	call	cea0 <__mulsi3>
    c55c:	8809883a 	mov	r4,r17
    c560:	a80b883a 	mov	r5,r21
    c564:	1029883a 	mov	r20,r2
    c568:	000cea00 	call	cea0 <__mulsi3>
    c56c:	a80b883a 	mov	r5,r21
    c570:	b009883a 	mov	r4,r22
    c574:	1023883a 	mov	r17,r2
    c578:	000cea00 	call	cea0 <__mulsi3>
    c57c:	e006d43a 	srli	r3,fp,16
    c580:	1505883a 	add	r2,r2,r20
    c584:	1887883a 	add	r3,r3,r2
    c588:	1d00022e 	bgeu	r3,r20,c594 <__udivdi3+0x468>
    c58c:	00800074 	movhi	r2,1
    c590:	88a3883a 	add	r17,r17,r2
    c594:	1804d43a 	srli	r2,r3,16
    c598:	1463883a 	add	r17,r2,r17
    c59c:	84404436 	bltu	r16,r17,c6b0 <__udivdi3+0x584>
    c5a0:	84403e26 	beq	r16,r17,c69c <__udivdi3+0x570>
    c5a4:	9005883a 	mov	r2,r18
    c5a8:	0007883a 	mov	r3,zero
    c5ac:	003f9106 	br	c3f4 <__alt_exception_stack_pointer+0xf800c3f4>
    c5b0:	88e2983a 	sll	r17,r17,r3
    c5b4:	80aed83a 	srl	r23,r16,r2
    c5b8:	80e0983a 	sll	r16,r16,r3
    c5bc:	882ad43a 	srli	r21,r17,16
    c5c0:	9884d83a 	srl	r2,r19,r2
    c5c4:	b809883a 	mov	r4,r23
    c5c8:	a80b883a 	mov	r5,r21
    c5cc:	98e4983a 	sll	r18,r19,r3
    c5d0:	142cb03a 	or	r22,r2,r16
    c5d4:	000ce480 	call	ce48 <__umodsi3>
    c5d8:	b809883a 	mov	r4,r23
    c5dc:	a80b883a 	mov	r5,r21
    c5e0:	1027883a 	mov	r19,r2
    c5e4:	8d3fffcc 	andi	r20,r17,65535
    c5e8:	000cde40 	call	cde4 <__udivsi3>
    c5ec:	a009883a 	mov	r4,r20
    c5f0:	100b883a 	mov	r5,r2
    c5f4:	102f883a 	mov	r23,r2
    c5f8:	000cea00 	call	cea0 <__mulsi3>
    c5fc:	9826943a 	slli	r19,r19,16
    c600:	b008d43a 	srli	r4,r22,16
    c604:	24c8b03a 	or	r4,r4,r19
    c608:	2080062e 	bgeu	r4,r2,c624 <__udivdi3+0x4f8>
    c60c:	2449883a 	add	r4,r4,r17
    c610:	b8ffffc4 	addi	r3,r23,-1
    c614:	24403c36 	bltu	r4,r17,c708 <__udivdi3+0x5dc>
    c618:	20803b2e 	bgeu	r4,r2,c708 <__udivdi3+0x5dc>
    c61c:	bdffff84 	addi	r23,r23,-2
    c620:	2449883a 	add	r4,r4,r17
    c624:	20a1c83a 	sub	r16,r4,r2
    c628:	a80b883a 	mov	r5,r21
    c62c:	8009883a 	mov	r4,r16
    c630:	000ce480 	call	ce48 <__umodsi3>
    c634:	a80b883a 	mov	r5,r21
    c638:	8009883a 	mov	r4,r16
    c63c:	1027883a 	mov	r19,r2
    c640:	000cde40 	call	cde4 <__udivsi3>
    c644:	a009883a 	mov	r4,r20
    c648:	100b883a 	mov	r5,r2
    c64c:	9826943a 	slli	r19,r19,16
    c650:	1039883a 	mov	fp,r2
    c654:	000cea00 	call	cea0 <__mulsi3>
    c658:	b13fffcc 	andi	r4,r22,65535
    c65c:	24c8b03a 	or	r4,r4,r19
    c660:	2080062e 	bgeu	r4,r2,c67c <__udivdi3+0x550>
    c664:	2449883a 	add	r4,r4,r17
    c668:	e0ffffc4 	addi	r3,fp,-1
    c66c:	24402436 	bltu	r4,r17,c700 <__udivdi3+0x5d4>
    c670:	2080232e 	bgeu	r4,r2,c700 <__udivdi3+0x5d4>
    c674:	e73fff84 	addi	fp,fp,-2
    c678:	2449883a 	add	r4,r4,r17
    c67c:	b82e943a 	slli	r23,r23,16
    c680:	20a1c83a 	sub	r16,r4,r2
    c684:	bf06b03a 	or	r3,r23,fp
    c688:	003f2806 	br	c32c <__alt_exception_stack_pointer+0xf800c32c>
    c68c:	2021883a 	mov	r16,r4
    c690:	003f5306 	br	c3e0 <__alt_exception_stack_pointer+0xf800c3e0>
    c694:	1821883a 	mov	r16,r3
    c698:	003ef406 	br	c26c <__alt_exception_stack_pointer+0xf800c26c>
    c69c:	1806943a 	slli	r3,r3,16
    c6a0:	9de6983a 	sll	r19,r19,r23
    c6a4:	e73fffcc 	andi	fp,fp,65535
    c6a8:	1f07883a 	add	r3,r3,fp
    c6ac:	98ffbd2e 	bgeu	r19,r3,c5a4 <__alt_exception_stack_pointer+0xf800c5a4>
    c6b0:	90bfffc4 	addi	r2,r18,-1
    c6b4:	0007883a 	mov	r3,zero
    c6b8:	003f4e06 	br	c3f4 <__alt_exception_stack_pointer+0xf800c3f4>
    c6bc:	00800604 	movi	r2,24
    c6c0:	003ef506 	br	c298 <__alt_exception_stack_pointer+0xf800c298>
    c6c4:	00800604 	movi	r2,24
    c6c8:	003f0b06 	br	c2f8 <__alt_exception_stack_pointer+0xf800c2f8>
    c6cc:	00800604 	movi	r2,24
    c6d0:	003ead06 	br	c188 <__alt_exception_stack_pointer+0xf800c188>
    c6d4:	0007883a 	mov	r3,zero
    c6d8:	00800044 	movi	r2,1
    c6dc:	003f4506 	br	c3f4 <__alt_exception_stack_pointer+0xf800c3f4>
    c6e0:	80bf8e2e 	bgeu	r16,r2,c51c <__alt_exception_stack_pointer+0xf800c51c>
    c6e4:	8c7fff84 	addi	r17,r17,-2
    c6e8:	8721883a 	add	r16,r16,fp
    c6ec:	003f8c06 	br	c520 <__alt_exception_stack_pointer+0xf800c520>
    c6f0:	18bf762e 	bgeu	r3,r2,c4cc <__alt_exception_stack_pointer+0xf800c4cc>
    c6f4:	ad7fff84 	addi	r21,r21,-2
    c6f8:	1f07883a 	add	r3,r3,fp
    c6fc:	003f7406 	br	c4d0 <__alt_exception_stack_pointer+0xf800c4d0>
    c700:	1839883a 	mov	fp,r3
    c704:	003fdd06 	br	c67c <__alt_exception_stack_pointer+0xf800c67c>
    c708:	182f883a 	mov	r23,r3
    c70c:	003fc506 	br	c624 <__alt_exception_stack_pointer+0xf800c624>
    c710:	b5bfff84 	addi	r22,r22,-2
    c714:	3c4f883a 	add	r7,r7,r17
    c718:	003f1a06 	br	c384 <__alt_exception_stack_pointer+0xf800c384>
    c71c:	b5bfff84 	addi	r22,r22,-2
    c720:	1c47883a 	add	r3,r3,r17
    c724:	003ebc06 	br	c218 <__alt_exception_stack_pointer+0xf800c218>

0000c728 <__umoddi3>:
    c728:	defff304 	addi	sp,sp,-52
    c72c:	df000b15 	stw	fp,44(sp)
    c730:	dc400415 	stw	r17,16(sp)
    c734:	dc000315 	stw	r16,12(sp)
    c738:	dfc00c15 	stw	ra,48(sp)
    c73c:	ddc00a15 	stw	r23,40(sp)
    c740:	dd800915 	stw	r22,36(sp)
    c744:	dd400815 	stw	r21,32(sp)
    c748:	dd000715 	stw	r20,28(sp)
    c74c:	dcc00615 	stw	r19,24(sp)
    c750:	dc800515 	stw	r18,20(sp)
    c754:	2021883a 	mov	r16,r4
    c758:	2823883a 	mov	r17,r5
    c75c:	2839883a 	mov	fp,r5
    c760:	3800401e 	bne	r7,zero,c864 <__umoddi3+0x13c>
    c764:	3027883a 	mov	r19,r6
    c768:	2029883a 	mov	r20,r4
    c76c:	2980552e 	bgeu	r5,r6,c8c4 <__umoddi3+0x19c>
    c770:	00bfffd4 	movui	r2,65535
    c774:	1180a236 	bltu	r2,r6,ca00 <__umoddi3+0x2d8>
    c778:	01003fc4 	movi	r4,255
    c77c:	2189803a 	cmpltu	r4,r4,r6
    c780:	200890fa 	slli	r4,r4,3
    c784:	3104d83a 	srl	r2,r6,r4
    c788:	00c00074 	movhi	r3,1
    c78c:	18cacb04 	addi	r3,r3,11052
    c790:	1885883a 	add	r2,r3,r2
    c794:	10c00003 	ldbu	r3,0(r2)
    c798:	00800804 	movi	r2,32
    c79c:	1909883a 	add	r4,r3,r4
    c7a0:	1125c83a 	sub	r18,r2,r4
    c7a4:	90000526 	beq	r18,zero,c7bc <__umoddi3+0x94>
    c7a8:	8ca2983a 	sll	r17,r17,r18
    c7ac:	8108d83a 	srl	r4,r16,r4
    c7b0:	34a6983a 	sll	r19,r6,r18
    c7b4:	84a8983a 	sll	r20,r16,r18
    c7b8:	2478b03a 	or	fp,r4,r17
    c7bc:	982cd43a 	srli	r22,r19,16
    c7c0:	e009883a 	mov	r4,fp
    c7c4:	9dffffcc 	andi	r23,r19,65535
    c7c8:	b00b883a 	mov	r5,r22
    c7cc:	000ce480 	call	ce48 <__umodsi3>
    c7d0:	b00b883a 	mov	r5,r22
    c7d4:	e009883a 	mov	r4,fp
    c7d8:	102b883a 	mov	r21,r2
    c7dc:	000cde40 	call	cde4 <__udivsi3>
    c7e0:	100b883a 	mov	r5,r2
    c7e4:	b809883a 	mov	r4,r23
    c7e8:	000cea00 	call	cea0 <__mulsi3>
    c7ec:	a82a943a 	slli	r21,r21,16
    c7f0:	a006d43a 	srli	r3,r20,16
    c7f4:	1d46b03a 	or	r3,r3,r21
    c7f8:	1880032e 	bgeu	r3,r2,c808 <__umoddi3+0xe0>
    c7fc:	1cc7883a 	add	r3,r3,r19
    c800:	1cc00136 	bltu	r3,r19,c808 <__umoddi3+0xe0>
    c804:	18813136 	bltu	r3,r2,cccc <__umoddi3+0x5a4>
    c808:	18a1c83a 	sub	r16,r3,r2
    c80c:	b00b883a 	mov	r5,r22
    c810:	8009883a 	mov	r4,r16
    c814:	000ce480 	call	ce48 <__umodsi3>
    c818:	b00b883a 	mov	r5,r22
    c81c:	8009883a 	mov	r4,r16
    c820:	1023883a 	mov	r17,r2
    c824:	000cde40 	call	cde4 <__udivsi3>
    c828:	100b883a 	mov	r5,r2
    c82c:	b809883a 	mov	r4,r23
    c830:	8822943a 	slli	r17,r17,16
    c834:	000cea00 	call	cea0 <__mulsi3>
    c838:	a0ffffcc 	andi	r3,r20,65535
    c83c:	1c46b03a 	or	r3,r3,r17
    c840:	1880042e 	bgeu	r3,r2,c854 <__umoddi3+0x12c>
    c844:	1cc7883a 	add	r3,r3,r19
    c848:	1cc00236 	bltu	r3,r19,c854 <__umoddi3+0x12c>
    c84c:	1880012e 	bgeu	r3,r2,c854 <__umoddi3+0x12c>
    c850:	1cc7883a 	add	r3,r3,r19
    c854:	1885c83a 	sub	r2,r3,r2
    c858:	1484d83a 	srl	r2,r2,r18
    c85c:	0007883a 	mov	r3,zero
    c860:	00005306 	br	c9b0 <__umoddi3+0x288>
    c864:	29c05036 	bltu	r5,r7,c9a8 <__umoddi3+0x280>
    c868:	00bfffd4 	movui	r2,65535
    c86c:	11c05c2e 	bgeu	r2,r7,c9e0 <__umoddi3+0x2b8>
    c870:	00804034 	movhi	r2,256
    c874:	10bfffc4 	addi	r2,r2,-1
    c878:	11c10636 	bltu	r2,r7,cc94 <__umoddi3+0x56c>
    c87c:	01000404 	movi	r4,16
    c880:	3904d83a 	srl	r2,r7,r4
    c884:	00c00074 	movhi	r3,1
    c888:	18cacb04 	addi	r3,r3,11052
    c88c:	1885883a 	add	r2,r3,r2
    c890:	14c00003 	ldbu	r19,0(r2)
    c894:	00c00804 	movi	r3,32
    c898:	9927883a 	add	r19,r19,r4
    c89c:	1ce9c83a 	sub	r20,r3,r19
    c8a0:	a0005c1e 	bne	r20,zero,ca14 <__umoddi3+0x2ec>
    c8a4:	3c400136 	bltu	r7,r17,c8ac <__umoddi3+0x184>
    c8a8:	81810a36 	bltu	r16,r6,ccd4 <__umoddi3+0x5ac>
    c8ac:	8185c83a 	sub	r2,r16,r6
    c8b0:	89e3c83a 	sub	r17,r17,r7
    c8b4:	8089803a 	cmpltu	r4,r16,r2
    c8b8:	8939c83a 	sub	fp,r17,r4
    c8bc:	e007883a 	mov	r3,fp
    c8c0:	00003b06 	br	c9b0 <__umoddi3+0x288>
    c8c4:	3000041e 	bne	r6,zero,c8d8 <__umoddi3+0x1b0>
    c8c8:	000b883a 	mov	r5,zero
    c8cc:	01000044 	movi	r4,1
    c8d0:	000cde40 	call	cde4 <__udivsi3>
    c8d4:	1027883a 	mov	r19,r2
    c8d8:	00bfffd4 	movui	r2,65535
    c8dc:	14c0442e 	bgeu	r2,r19,c9f0 <__umoddi3+0x2c8>
    c8e0:	00804034 	movhi	r2,256
    c8e4:	10bfffc4 	addi	r2,r2,-1
    c8e8:	14c0ec36 	bltu	r2,r19,cc9c <__umoddi3+0x574>
    c8ec:	00800404 	movi	r2,16
    c8f0:	9886d83a 	srl	r3,r19,r2
    c8f4:	01000074 	movhi	r4,1
    c8f8:	210acb04 	addi	r4,r4,11052
    c8fc:	20c7883a 	add	r3,r4,r3
    c900:	18c00003 	ldbu	r3,0(r3)
    c904:	1887883a 	add	r3,r3,r2
    c908:	00800804 	movi	r2,32
    c90c:	10e5c83a 	sub	r18,r2,r3
    c910:	9000ab1e 	bne	r18,zero,cbc0 <__umoddi3+0x498>
    c914:	982cd43a 	srli	r22,r19,16
    c918:	8ce3c83a 	sub	r17,r17,r19
    c91c:	9dffffcc 	andi	r23,r19,65535
    c920:	b00b883a 	mov	r5,r22
    c924:	8809883a 	mov	r4,r17
    c928:	000ce480 	call	ce48 <__umodsi3>
    c92c:	b00b883a 	mov	r5,r22
    c930:	8809883a 	mov	r4,r17
    c934:	102b883a 	mov	r21,r2
    c938:	000cde40 	call	cde4 <__udivsi3>
    c93c:	b80b883a 	mov	r5,r23
    c940:	1009883a 	mov	r4,r2
    c944:	000cea00 	call	cea0 <__mulsi3>
    c948:	a82a943a 	slli	r21,r21,16
    c94c:	a006d43a 	srli	r3,r20,16
    c950:	1d46b03a 	or	r3,r3,r21
    c954:	1880042e 	bgeu	r3,r2,c968 <__umoddi3+0x240>
    c958:	1cc7883a 	add	r3,r3,r19
    c95c:	1cc00236 	bltu	r3,r19,c968 <__umoddi3+0x240>
    c960:	1880012e 	bgeu	r3,r2,c968 <__umoddi3+0x240>
    c964:	1cc7883a 	add	r3,r3,r19
    c968:	18a1c83a 	sub	r16,r3,r2
    c96c:	b00b883a 	mov	r5,r22
    c970:	8009883a 	mov	r4,r16
    c974:	000ce480 	call	ce48 <__umodsi3>
    c978:	1023883a 	mov	r17,r2
    c97c:	b00b883a 	mov	r5,r22
    c980:	8009883a 	mov	r4,r16
    c984:	000cde40 	call	cde4 <__udivsi3>
    c988:	8822943a 	slli	r17,r17,16
    c98c:	b80b883a 	mov	r5,r23
    c990:	1009883a 	mov	r4,r2
    c994:	000cea00 	call	cea0 <__mulsi3>
    c998:	a53fffcc 	andi	r20,r20,65535
    c99c:	a446b03a 	or	r3,r20,r17
    c9a0:	18bfac2e 	bgeu	r3,r2,c854 <__alt_exception_stack_pointer+0xf800c854>
    c9a4:	003fa706 	br	c844 <__alt_exception_stack_pointer+0xf800c844>
    c9a8:	2005883a 	mov	r2,r4
    c9ac:	2807883a 	mov	r3,r5
    c9b0:	dfc00c17 	ldw	ra,48(sp)
    c9b4:	df000b17 	ldw	fp,44(sp)
    c9b8:	ddc00a17 	ldw	r23,40(sp)
    c9bc:	dd800917 	ldw	r22,36(sp)
    c9c0:	dd400817 	ldw	r21,32(sp)
    c9c4:	dd000717 	ldw	r20,28(sp)
    c9c8:	dcc00617 	ldw	r19,24(sp)
    c9cc:	dc800517 	ldw	r18,20(sp)
    c9d0:	dc400417 	ldw	r17,16(sp)
    c9d4:	dc000317 	ldw	r16,12(sp)
    c9d8:	dec00d04 	addi	sp,sp,52
    c9dc:	f800283a 	ret
    c9e0:	04c03fc4 	movi	r19,255
    c9e4:	99c9803a 	cmpltu	r4,r19,r7
    c9e8:	200890fa 	slli	r4,r4,3
    c9ec:	003fa406 	br	c880 <__alt_exception_stack_pointer+0xf800c880>
    c9f0:	00803fc4 	movi	r2,255
    c9f4:	14c5803a 	cmpltu	r2,r2,r19
    c9f8:	100490fa 	slli	r2,r2,3
    c9fc:	003fbc06 	br	c8f0 <__alt_exception_stack_pointer+0xf800c8f0>
    ca00:	00804034 	movhi	r2,256
    ca04:	10bfffc4 	addi	r2,r2,-1
    ca08:	1180a636 	bltu	r2,r6,cca4 <__umoddi3+0x57c>
    ca0c:	01000404 	movi	r4,16
    ca10:	003f5c06 	br	c784 <__alt_exception_stack_pointer+0xf800c784>
    ca14:	3d0e983a 	sll	r7,r7,r20
    ca18:	34ead83a 	srl	r21,r6,r19
    ca1c:	8cc6d83a 	srl	r3,r17,r19
    ca20:	8d10983a 	sll	r8,r17,r20
    ca24:	3d6ab03a 	or	r21,r7,r21
    ca28:	a82cd43a 	srli	r22,r21,16
    ca2c:	84e2d83a 	srl	r17,r16,r19
    ca30:	1809883a 	mov	r4,r3
    ca34:	b00b883a 	mov	r5,r22
    ca38:	8a22b03a 	or	r17,r17,r8
    ca3c:	3524983a 	sll	r18,r6,r20
    ca40:	dc400015 	stw	r17,0(sp)
    ca44:	d8c00115 	stw	r3,4(sp)
    ca48:	000ce480 	call	ce48 <__umodsi3>
    ca4c:	d8c00117 	ldw	r3,4(sp)
    ca50:	b00b883a 	mov	r5,r22
    ca54:	1039883a 	mov	fp,r2
    ca58:	1809883a 	mov	r4,r3
    ca5c:	000cde40 	call	cde4 <__udivsi3>
    ca60:	adffffcc 	andi	r23,r21,65535
    ca64:	100b883a 	mov	r5,r2
    ca68:	b809883a 	mov	r4,r23
    ca6c:	1023883a 	mov	r17,r2
    ca70:	000cea00 	call	cea0 <__mulsi3>
    ca74:	d9400017 	ldw	r5,0(sp)
    ca78:	e008943a 	slli	r4,fp,16
    ca7c:	8520983a 	sll	r16,r16,r20
    ca80:	2806d43a 	srli	r3,r5,16
    ca84:	1906b03a 	or	r3,r3,r4
    ca88:	1880042e 	bgeu	r3,r2,ca9c <__umoddi3+0x374>
    ca8c:	1d47883a 	add	r3,r3,r21
    ca90:	893fffc4 	addi	r4,r17,-1
    ca94:	1d40892e 	bgeu	r3,r21,ccbc <__umoddi3+0x594>
    ca98:	2023883a 	mov	r17,r4
    ca9c:	18b9c83a 	sub	fp,r3,r2
    caa0:	b00b883a 	mov	r5,r22
    caa4:	e009883a 	mov	r4,fp
    caa8:	000ce480 	call	ce48 <__umodsi3>
    caac:	b00b883a 	mov	r5,r22
    cab0:	e009883a 	mov	r4,fp
    cab4:	d8800215 	stw	r2,8(sp)
    cab8:	000cde40 	call	cde4 <__udivsi3>
    cabc:	100b883a 	mov	r5,r2
    cac0:	b809883a 	mov	r4,r23
    cac4:	102d883a 	mov	r22,r2
    cac8:	000cea00 	call	cea0 <__mulsi3>
    cacc:	d9800217 	ldw	r6,8(sp)
    cad0:	d8c00017 	ldw	r3,0(sp)
    cad4:	300c943a 	slli	r6,r6,16
    cad8:	1a3fffcc 	andi	r8,r3,65535
    cadc:	4190b03a 	or	r8,r8,r6
    cae0:	4080042e 	bgeu	r8,r2,caf4 <__umoddi3+0x3cc>
    cae4:	4551883a 	add	r8,r8,r21
    cae8:	b0ffffc4 	addi	r3,r22,-1
    caec:	45406f2e 	bgeu	r8,r21,ccac <__umoddi3+0x584>
    caf0:	182d883a 	mov	r22,r3
    caf4:	880e943a 	slli	r7,r17,16
    caf8:	9006d43a 	srli	r3,r18,16
    cafc:	91bfffcc 	andi	r6,r18,65535
    cb00:	3dacb03a 	or	r22,r7,r22
    cb04:	b02ed43a 	srli	r23,r22,16
    cb08:	b5bfffcc 	andi	r22,r22,65535
    cb0c:	300b883a 	mov	r5,r6
    cb10:	b009883a 	mov	r4,r22
    cb14:	40a3c83a 	sub	r17,r8,r2
    cb18:	d8c00115 	stw	r3,4(sp)
    cb1c:	d9800215 	stw	r6,8(sp)
    cb20:	000cea00 	call	cea0 <__mulsi3>
    cb24:	d9800217 	ldw	r6,8(sp)
    cb28:	b809883a 	mov	r4,r23
    cb2c:	1039883a 	mov	fp,r2
    cb30:	300b883a 	mov	r5,r6
    cb34:	000cea00 	call	cea0 <__mulsi3>
    cb38:	d8c00117 	ldw	r3,4(sp)
    cb3c:	b809883a 	mov	r4,r23
    cb40:	d8800215 	stw	r2,8(sp)
    cb44:	180b883a 	mov	r5,r3
    cb48:	000cea00 	call	cea0 <__mulsi3>
    cb4c:	d8c00117 	ldw	r3,4(sp)
    cb50:	b009883a 	mov	r4,r22
    cb54:	102f883a 	mov	r23,r2
    cb58:	180b883a 	mov	r5,r3
    cb5c:	000cea00 	call	cea0 <__mulsi3>
    cb60:	d9800217 	ldw	r6,8(sp)
    cb64:	e006d43a 	srli	r3,fp,16
    cb68:	1185883a 	add	r2,r2,r6
    cb6c:	1885883a 	add	r2,r3,r2
    cb70:	1180022e 	bgeu	r2,r6,cb7c <__umoddi3+0x454>
    cb74:	00c00074 	movhi	r3,1
    cb78:	b8ef883a 	add	r23,r23,r3
    cb7c:	1006d43a 	srli	r3,r2,16
    cb80:	1004943a 	slli	r2,r2,16
    cb84:	e73fffcc 	andi	fp,fp,65535
    cb88:	1dc7883a 	add	r3,r3,r23
    cb8c:	1739883a 	add	fp,r2,fp
    cb90:	88c03a36 	bltu	r17,r3,cc7c <__umoddi3+0x554>
    cb94:	88c05126 	beq	r17,r3,ccdc <__umoddi3+0x5b4>
    cb98:	88c9c83a 	sub	r4,r17,r3
    cb9c:	e00f883a 	mov	r7,fp
    cba0:	81cfc83a 	sub	r7,r16,r7
    cba4:	81c7803a 	cmpltu	r3,r16,r7
    cba8:	20c7c83a 	sub	r3,r4,r3
    cbac:	1cc4983a 	sll	r2,r3,r19
    cbb0:	3d0ed83a 	srl	r7,r7,r20
    cbb4:	1d06d83a 	srl	r3,r3,r20
    cbb8:	11c4b03a 	or	r2,r2,r7
    cbbc:	003f7c06 	br	c9b0 <__alt_exception_stack_pointer+0xf800c9b0>
    cbc0:	9ca6983a 	sll	r19,r19,r18
    cbc4:	88f8d83a 	srl	fp,r17,r3
    cbc8:	80c4d83a 	srl	r2,r16,r3
    cbcc:	982cd43a 	srli	r22,r19,16
    cbd0:	8ca2983a 	sll	r17,r17,r18
    cbd4:	e009883a 	mov	r4,fp
    cbd8:	b00b883a 	mov	r5,r22
    cbdc:	146ab03a 	or	r21,r2,r17
    cbe0:	000ce480 	call	ce48 <__umodsi3>
    cbe4:	b00b883a 	mov	r5,r22
    cbe8:	e009883a 	mov	r4,fp
    cbec:	1029883a 	mov	r20,r2
    cbf0:	9dffffcc 	andi	r23,r19,65535
    cbf4:	000cde40 	call	cde4 <__udivsi3>
    cbf8:	b809883a 	mov	r4,r23
    cbfc:	100b883a 	mov	r5,r2
    cc00:	000cea00 	call	cea0 <__mulsi3>
    cc04:	a008943a 	slli	r4,r20,16
    cc08:	a806d43a 	srli	r3,r21,16
    cc0c:	84a8983a 	sll	r20,r16,r18
    cc10:	1906b03a 	or	r3,r3,r4
    cc14:	1880042e 	bgeu	r3,r2,cc28 <__umoddi3+0x500>
    cc18:	1cc7883a 	add	r3,r3,r19
    cc1c:	1cc00236 	bltu	r3,r19,cc28 <__umoddi3+0x500>
    cc20:	1880012e 	bgeu	r3,r2,cc28 <__umoddi3+0x500>
    cc24:	1cc7883a 	add	r3,r3,r19
    cc28:	18a3c83a 	sub	r17,r3,r2
    cc2c:	b00b883a 	mov	r5,r22
    cc30:	8809883a 	mov	r4,r17
    cc34:	000ce480 	call	ce48 <__umodsi3>
    cc38:	b00b883a 	mov	r5,r22
    cc3c:	8809883a 	mov	r4,r17
    cc40:	1021883a 	mov	r16,r2
    cc44:	000cde40 	call	cde4 <__udivsi3>
    cc48:	100b883a 	mov	r5,r2
    cc4c:	b809883a 	mov	r4,r23
    cc50:	8020943a 	slli	r16,r16,16
    cc54:	000cea00 	call	cea0 <__mulsi3>
    cc58:	a8ffffcc 	andi	r3,r21,65535
    cc5c:	1c06b03a 	or	r3,r3,r16
    cc60:	1880042e 	bgeu	r3,r2,cc74 <__umoddi3+0x54c>
    cc64:	1cc7883a 	add	r3,r3,r19
    cc68:	1cc00236 	bltu	r3,r19,cc74 <__umoddi3+0x54c>
    cc6c:	1880012e 	bgeu	r3,r2,cc74 <__umoddi3+0x54c>
    cc70:	1cc7883a 	add	r3,r3,r19
    cc74:	18a3c83a 	sub	r17,r3,r2
    cc78:	003f2906 	br	c920 <__alt_exception_stack_pointer+0xf800c920>
    cc7c:	e48fc83a 	sub	r7,fp,r18
    cc80:	1d49c83a 	sub	r4,r3,r21
    cc84:	e1f9803a 	cmpltu	fp,fp,r7
    cc88:	2739c83a 	sub	fp,r4,fp
    cc8c:	8f09c83a 	sub	r4,r17,fp
    cc90:	003fc306 	br	cba0 <__alt_exception_stack_pointer+0xf800cba0>
    cc94:	01000604 	movi	r4,24
    cc98:	003ef906 	br	c880 <__alt_exception_stack_pointer+0xf800c880>
    cc9c:	00800604 	movi	r2,24
    cca0:	003f1306 	br	c8f0 <__alt_exception_stack_pointer+0xf800c8f0>
    cca4:	01000604 	movi	r4,24
    cca8:	003eb606 	br	c784 <__alt_exception_stack_pointer+0xf800c784>
    ccac:	40bf902e 	bgeu	r8,r2,caf0 <__alt_exception_stack_pointer+0xf800caf0>
    ccb0:	b5bfff84 	addi	r22,r22,-2
    ccb4:	4551883a 	add	r8,r8,r21
    ccb8:	003f8e06 	br	caf4 <__alt_exception_stack_pointer+0xf800caf4>
    ccbc:	18bf762e 	bgeu	r3,r2,ca98 <__alt_exception_stack_pointer+0xf800ca98>
    ccc0:	8c7fff84 	addi	r17,r17,-2
    ccc4:	1d47883a 	add	r3,r3,r21
    ccc8:	003f7406 	br	ca9c <__alt_exception_stack_pointer+0xf800ca9c>
    cccc:	1cc7883a 	add	r3,r3,r19
    ccd0:	003ecd06 	br	c808 <__alt_exception_stack_pointer+0xf800c808>
    ccd4:	8005883a 	mov	r2,r16
    ccd8:	003ef806 	br	c8bc <__alt_exception_stack_pointer+0xf800c8bc>
    ccdc:	873fe736 	bltu	r16,fp,cc7c <__alt_exception_stack_pointer+0xf800cc7c>
    cce0:	e00f883a 	mov	r7,fp
    cce4:	0009883a 	mov	r4,zero
    cce8:	003fad06 	br	cba0 <__alt_exception_stack_pointer+0xf800cba0>

0000ccec <__divsi3>:
    ccec:	20001b16 	blt	r4,zero,cd5c <__divsi3+0x70>
    ccf0:	000f883a 	mov	r7,zero
    ccf4:	28001616 	blt	r5,zero,cd50 <__divsi3+0x64>
    ccf8:	200d883a 	mov	r6,r4
    ccfc:	29001a2e 	bgeu	r5,r4,cd68 <__divsi3+0x7c>
    cd00:	00800804 	movi	r2,32
    cd04:	00c00044 	movi	r3,1
    cd08:	00000106 	br	cd10 <__divsi3+0x24>
    cd0c:	10000d26 	beq	r2,zero,cd44 <__divsi3+0x58>
    cd10:	294b883a 	add	r5,r5,r5
    cd14:	10bfffc4 	addi	r2,r2,-1
    cd18:	18c7883a 	add	r3,r3,r3
    cd1c:	293ffb36 	bltu	r5,r4,cd0c <__alt_exception_stack_pointer+0xf800cd0c>
    cd20:	0005883a 	mov	r2,zero
    cd24:	18000726 	beq	r3,zero,cd44 <__divsi3+0x58>
    cd28:	0005883a 	mov	r2,zero
    cd2c:	31400236 	bltu	r6,r5,cd38 <__divsi3+0x4c>
    cd30:	314dc83a 	sub	r6,r6,r5
    cd34:	10c4b03a 	or	r2,r2,r3
    cd38:	1806d07a 	srli	r3,r3,1
    cd3c:	280ad07a 	srli	r5,r5,1
    cd40:	183ffa1e 	bne	r3,zero,cd2c <__alt_exception_stack_pointer+0xf800cd2c>
    cd44:	38000126 	beq	r7,zero,cd4c <__divsi3+0x60>
    cd48:	0085c83a 	sub	r2,zero,r2
    cd4c:	f800283a 	ret
    cd50:	014bc83a 	sub	r5,zero,r5
    cd54:	39c0005c 	xori	r7,r7,1
    cd58:	003fe706 	br	ccf8 <__alt_exception_stack_pointer+0xf800ccf8>
    cd5c:	0109c83a 	sub	r4,zero,r4
    cd60:	01c00044 	movi	r7,1
    cd64:	003fe306 	br	ccf4 <__alt_exception_stack_pointer+0xf800ccf4>
    cd68:	00c00044 	movi	r3,1
    cd6c:	003fee06 	br	cd28 <__alt_exception_stack_pointer+0xf800cd28>

0000cd70 <__modsi3>:
    cd70:	20001716 	blt	r4,zero,cdd0 <__modsi3+0x60>
    cd74:	000f883a 	mov	r7,zero
    cd78:	2005883a 	mov	r2,r4
    cd7c:	28001216 	blt	r5,zero,cdc8 <__modsi3+0x58>
    cd80:	2900162e 	bgeu	r5,r4,cddc <__modsi3+0x6c>
    cd84:	01800804 	movi	r6,32
    cd88:	00c00044 	movi	r3,1
    cd8c:	00000106 	br	cd94 <__modsi3+0x24>
    cd90:	30000a26 	beq	r6,zero,cdbc <__modsi3+0x4c>
    cd94:	294b883a 	add	r5,r5,r5
    cd98:	31bfffc4 	addi	r6,r6,-1
    cd9c:	18c7883a 	add	r3,r3,r3
    cda0:	293ffb36 	bltu	r5,r4,cd90 <__alt_exception_stack_pointer+0xf800cd90>
    cda4:	18000526 	beq	r3,zero,cdbc <__modsi3+0x4c>
    cda8:	1806d07a 	srli	r3,r3,1
    cdac:	11400136 	bltu	r2,r5,cdb4 <__modsi3+0x44>
    cdb0:	1145c83a 	sub	r2,r2,r5
    cdb4:	280ad07a 	srli	r5,r5,1
    cdb8:	183ffb1e 	bne	r3,zero,cda8 <__alt_exception_stack_pointer+0xf800cda8>
    cdbc:	38000126 	beq	r7,zero,cdc4 <__modsi3+0x54>
    cdc0:	0085c83a 	sub	r2,zero,r2
    cdc4:	f800283a 	ret
    cdc8:	014bc83a 	sub	r5,zero,r5
    cdcc:	003fec06 	br	cd80 <__alt_exception_stack_pointer+0xf800cd80>
    cdd0:	0109c83a 	sub	r4,zero,r4
    cdd4:	01c00044 	movi	r7,1
    cdd8:	003fe706 	br	cd78 <__alt_exception_stack_pointer+0xf800cd78>
    cddc:	00c00044 	movi	r3,1
    cde0:	003ff106 	br	cda8 <__alt_exception_stack_pointer+0xf800cda8>

0000cde4 <__udivsi3>:
    cde4:	200d883a 	mov	r6,r4
    cde8:	2900152e 	bgeu	r5,r4,ce40 <__udivsi3+0x5c>
    cdec:	28001416 	blt	r5,zero,ce40 <__udivsi3+0x5c>
    cdf0:	00800804 	movi	r2,32
    cdf4:	00c00044 	movi	r3,1
    cdf8:	00000206 	br	ce04 <__udivsi3+0x20>
    cdfc:	10000e26 	beq	r2,zero,ce38 <__udivsi3+0x54>
    ce00:	28000516 	blt	r5,zero,ce18 <__udivsi3+0x34>
    ce04:	294b883a 	add	r5,r5,r5
    ce08:	10bfffc4 	addi	r2,r2,-1
    ce0c:	18c7883a 	add	r3,r3,r3
    ce10:	293ffa36 	bltu	r5,r4,cdfc <__alt_exception_stack_pointer+0xf800cdfc>
    ce14:	18000826 	beq	r3,zero,ce38 <__udivsi3+0x54>
    ce18:	0005883a 	mov	r2,zero
    ce1c:	31400236 	bltu	r6,r5,ce28 <__udivsi3+0x44>
    ce20:	314dc83a 	sub	r6,r6,r5
    ce24:	10c4b03a 	or	r2,r2,r3
    ce28:	1806d07a 	srli	r3,r3,1
    ce2c:	280ad07a 	srli	r5,r5,1
    ce30:	183ffa1e 	bne	r3,zero,ce1c <__alt_exception_stack_pointer+0xf800ce1c>
    ce34:	f800283a 	ret
    ce38:	0005883a 	mov	r2,zero
    ce3c:	f800283a 	ret
    ce40:	00c00044 	movi	r3,1
    ce44:	003ff406 	br	ce18 <__alt_exception_stack_pointer+0xf800ce18>

0000ce48 <__umodsi3>:
    ce48:	2005883a 	mov	r2,r4
    ce4c:	2900122e 	bgeu	r5,r4,ce98 <__umodsi3+0x50>
    ce50:	28001116 	blt	r5,zero,ce98 <__umodsi3+0x50>
    ce54:	01800804 	movi	r6,32
    ce58:	00c00044 	movi	r3,1
    ce5c:	00000206 	br	ce68 <__umodsi3+0x20>
    ce60:	30000c26 	beq	r6,zero,ce94 <__umodsi3+0x4c>
    ce64:	28000516 	blt	r5,zero,ce7c <__umodsi3+0x34>
    ce68:	294b883a 	add	r5,r5,r5
    ce6c:	31bfffc4 	addi	r6,r6,-1
    ce70:	18c7883a 	add	r3,r3,r3
    ce74:	293ffa36 	bltu	r5,r4,ce60 <__alt_exception_stack_pointer+0xf800ce60>
    ce78:	18000626 	beq	r3,zero,ce94 <__umodsi3+0x4c>
    ce7c:	1806d07a 	srli	r3,r3,1
    ce80:	11400136 	bltu	r2,r5,ce88 <__umodsi3+0x40>
    ce84:	1145c83a 	sub	r2,r2,r5
    ce88:	280ad07a 	srli	r5,r5,1
    ce8c:	183ffb1e 	bne	r3,zero,ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    ce90:	f800283a 	ret
    ce94:	f800283a 	ret
    ce98:	00c00044 	movi	r3,1
    ce9c:	003ff706 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>

0000cea0 <__mulsi3>:
    cea0:	0005883a 	mov	r2,zero
    cea4:	20000726 	beq	r4,zero,cec4 <__mulsi3+0x24>
    cea8:	20c0004c 	andi	r3,r4,1
    ceac:	2008d07a 	srli	r4,r4,1
    ceb0:	18000126 	beq	r3,zero,ceb8 <__mulsi3+0x18>
    ceb4:	1145883a 	add	r2,r2,r5
    ceb8:	294b883a 	add	r5,r5,r5
    cebc:	203ffa1e 	bne	r4,zero,cea8 <__alt_exception_stack_pointer+0xf800cea8>
    cec0:	f800283a 	ret
    cec4:	f800283a 	ret

0000cec8 <__adddf3>:
    cec8:	02c00434 	movhi	r11,16
    cecc:	5affffc4 	addi	r11,r11,-1
    ced0:	2806d7fa 	srli	r3,r5,31
    ced4:	2ad4703a 	and	r10,r5,r11
    ced8:	3ad2703a 	and	r9,r7,r11
    cedc:	3804d53a 	srli	r2,r7,20
    cee0:	3018d77a 	srli	r12,r6,29
    cee4:	280ad53a 	srli	r5,r5,20
    cee8:	501490fa 	slli	r10,r10,3
    ceec:	2010d77a 	srli	r8,r4,29
    cef0:	481290fa 	slli	r9,r9,3
    cef4:	380ed7fa 	srli	r7,r7,31
    cef8:	defffb04 	addi	sp,sp,-20
    cefc:	dc800215 	stw	r18,8(sp)
    cf00:	dc400115 	stw	r17,4(sp)
    cf04:	dc000015 	stw	r16,0(sp)
    cf08:	dfc00415 	stw	ra,16(sp)
    cf0c:	dcc00315 	stw	r19,12(sp)
    cf10:	1c803fcc 	andi	r18,r3,255
    cf14:	2c01ffcc 	andi	r16,r5,2047
    cf18:	5210b03a 	or	r8,r10,r8
    cf1c:	202290fa 	slli	r17,r4,3
    cf20:	1081ffcc 	andi	r2,r2,2047
    cf24:	4b12b03a 	or	r9,r9,r12
    cf28:	300c90fa 	slli	r6,r6,3
    cf2c:	91c07526 	beq	r18,r7,d104 <__adddf3+0x23c>
    cf30:	8087c83a 	sub	r3,r16,r2
    cf34:	00c0ab0e 	bge	zero,r3,d1e4 <__adddf3+0x31c>
    cf38:	10002a1e 	bne	r2,zero,cfe4 <__adddf3+0x11c>
    cf3c:	4984b03a 	or	r2,r9,r6
    cf40:	1000961e 	bne	r2,zero,d19c <__adddf3+0x2d4>
    cf44:	888001cc 	andi	r2,r17,7
    cf48:	10000726 	beq	r2,zero,cf68 <__adddf3+0xa0>
    cf4c:	888003cc 	andi	r2,r17,15
    cf50:	00c00104 	movi	r3,4
    cf54:	10c00426 	beq	r2,r3,cf68 <__adddf3+0xa0>
    cf58:	88c7883a 	add	r3,r17,r3
    cf5c:	1c63803a 	cmpltu	r17,r3,r17
    cf60:	4451883a 	add	r8,r8,r17
    cf64:	1823883a 	mov	r17,r3
    cf68:	4080202c 	andhi	r2,r8,128
    cf6c:	10005926 	beq	r2,zero,d0d4 <__adddf3+0x20c>
    cf70:	84000044 	addi	r16,r16,1
    cf74:	0081ffc4 	movi	r2,2047
    cf78:	8080ba26 	beq	r16,r2,d264 <__adddf3+0x39c>
    cf7c:	00bfe034 	movhi	r2,65408
    cf80:	10bfffc4 	addi	r2,r2,-1
    cf84:	4090703a 	and	r8,r8,r2
    cf88:	4004977a 	slli	r2,r8,29
    cf8c:	4010927a 	slli	r8,r8,9
    cf90:	8822d0fa 	srli	r17,r17,3
    cf94:	8401ffcc 	andi	r16,r16,2047
    cf98:	4010d33a 	srli	r8,r8,12
    cf9c:	9007883a 	mov	r3,r18
    cfa0:	1444b03a 	or	r2,r2,r17
    cfa4:	8401ffcc 	andi	r16,r16,2047
    cfa8:	8020953a 	slli	r16,r16,20
    cfac:	18c03fcc 	andi	r3,r3,255
    cfb0:	01000434 	movhi	r4,16
    cfb4:	213fffc4 	addi	r4,r4,-1
    cfb8:	180697fa 	slli	r3,r3,31
    cfbc:	4110703a 	and	r8,r8,r4
    cfc0:	4410b03a 	or	r8,r8,r16
    cfc4:	40c6b03a 	or	r3,r8,r3
    cfc8:	dfc00417 	ldw	ra,16(sp)
    cfcc:	dcc00317 	ldw	r19,12(sp)
    cfd0:	dc800217 	ldw	r18,8(sp)
    cfd4:	dc400117 	ldw	r17,4(sp)
    cfd8:	dc000017 	ldw	r16,0(sp)
    cfdc:	dec00504 	addi	sp,sp,20
    cfe0:	f800283a 	ret
    cfe4:	0081ffc4 	movi	r2,2047
    cfe8:	80bfd626 	beq	r16,r2,cf44 <__alt_exception_stack_pointer+0xf800cf44>
    cfec:	4a402034 	orhi	r9,r9,128
    cff0:	00800e04 	movi	r2,56
    cff4:	10c09f16 	blt	r2,r3,d274 <__adddf3+0x3ac>
    cff8:	008007c4 	movi	r2,31
    cffc:	10c0c216 	blt	r2,r3,d308 <__adddf3+0x440>
    d000:	00800804 	movi	r2,32
    d004:	10c5c83a 	sub	r2,r2,r3
    d008:	488a983a 	sll	r5,r9,r2
    d00c:	30c8d83a 	srl	r4,r6,r3
    d010:	3084983a 	sll	r2,r6,r2
    d014:	48c6d83a 	srl	r3,r9,r3
    d018:	290cb03a 	or	r6,r5,r4
    d01c:	1004c03a 	cmpne	r2,r2,zero
    d020:	308cb03a 	or	r6,r6,r2
    d024:	898dc83a 	sub	r6,r17,r6
    d028:	89a3803a 	cmpltu	r17,r17,r6
    d02c:	40d1c83a 	sub	r8,r8,r3
    d030:	4451c83a 	sub	r8,r8,r17
    d034:	3023883a 	mov	r17,r6
    d038:	4080202c 	andhi	r2,r8,128
    d03c:	10002326 	beq	r2,zero,d0cc <__adddf3+0x204>
    d040:	04c02034 	movhi	r19,128
    d044:	9cffffc4 	addi	r19,r19,-1
    d048:	44e6703a 	and	r19,r8,r19
    d04c:	98007626 	beq	r19,zero,d228 <__adddf3+0x360>
    d050:	9809883a 	mov	r4,r19
    d054:	000f7080 	call	f708 <__clzsi2>
    d058:	10fffe04 	addi	r3,r2,-8
    d05c:	010007c4 	movi	r4,31
    d060:	20c07716 	blt	r4,r3,d240 <__adddf3+0x378>
    d064:	00800804 	movi	r2,32
    d068:	10c5c83a 	sub	r2,r2,r3
    d06c:	8884d83a 	srl	r2,r17,r2
    d070:	98d0983a 	sll	r8,r19,r3
    d074:	88e2983a 	sll	r17,r17,r3
    d078:	1204b03a 	or	r2,r2,r8
    d07c:	1c007416 	blt	r3,r16,d250 <__adddf3+0x388>
    d080:	1c21c83a 	sub	r16,r3,r16
    d084:	82000044 	addi	r8,r16,1
    d088:	00c007c4 	movi	r3,31
    d08c:	1a009116 	blt	r3,r8,d2d4 <__adddf3+0x40c>
    d090:	00c00804 	movi	r3,32
    d094:	1a07c83a 	sub	r3,r3,r8
    d098:	8a08d83a 	srl	r4,r17,r8
    d09c:	88e2983a 	sll	r17,r17,r3
    d0a0:	10c6983a 	sll	r3,r2,r3
    d0a4:	1210d83a 	srl	r8,r2,r8
    d0a8:	8804c03a 	cmpne	r2,r17,zero
    d0ac:	1906b03a 	or	r3,r3,r4
    d0b0:	18a2b03a 	or	r17,r3,r2
    d0b4:	0021883a 	mov	r16,zero
    d0b8:	003fa206 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d0bc:	1890b03a 	or	r8,r3,r2
    d0c0:	40017d26 	beq	r8,zero,d6b8 <__adddf3+0x7f0>
    d0c4:	1011883a 	mov	r8,r2
    d0c8:	1823883a 	mov	r17,r3
    d0cc:	888001cc 	andi	r2,r17,7
    d0d0:	103f9e1e 	bne	r2,zero,cf4c <__alt_exception_stack_pointer+0xf800cf4c>
    d0d4:	4004977a 	slli	r2,r8,29
    d0d8:	8822d0fa 	srli	r17,r17,3
    d0dc:	4010d0fa 	srli	r8,r8,3
    d0e0:	9007883a 	mov	r3,r18
    d0e4:	1444b03a 	or	r2,r2,r17
    d0e8:	0101ffc4 	movi	r4,2047
    d0ec:	81002426 	beq	r16,r4,d180 <__adddf3+0x2b8>
    d0f0:	8120703a 	and	r16,r16,r4
    d0f4:	01000434 	movhi	r4,16
    d0f8:	213fffc4 	addi	r4,r4,-1
    d0fc:	4110703a 	and	r8,r8,r4
    d100:	003fa806 	br	cfa4 <__alt_exception_stack_pointer+0xf800cfa4>
    d104:	8089c83a 	sub	r4,r16,r2
    d108:	01005e0e 	bge	zero,r4,d284 <__adddf3+0x3bc>
    d10c:	10002b26 	beq	r2,zero,d1bc <__adddf3+0x2f4>
    d110:	0081ffc4 	movi	r2,2047
    d114:	80bf8b26 	beq	r16,r2,cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d118:	4a402034 	orhi	r9,r9,128
    d11c:	00800e04 	movi	r2,56
    d120:	1100a40e 	bge	r2,r4,d3b4 <__adddf3+0x4ec>
    d124:	498cb03a 	or	r6,r9,r6
    d128:	300ac03a 	cmpne	r5,r6,zero
    d12c:	0013883a 	mov	r9,zero
    d130:	2c4b883a 	add	r5,r5,r17
    d134:	2c63803a 	cmpltu	r17,r5,r17
    d138:	4a11883a 	add	r8,r9,r8
    d13c:	8a11883a 	add	r8,r17,r8
    d140:	2823883a 	mov	r17,r5
    d144:	4080202c 	andhi	r2,r8,128
    d148:	103fe026 	beq	r2,zero,d0cc <__alt_exception_stack_pointer+0xf800d0cc>
    d14c:	84000044 	addi	r16,r16,1
    d150:	0081ffc4 	movi	r2,2047
    d154:	8080d226 	beq	r16,r2,d4a0 <__adddf3+0x5d8>
    d158:	00bfe034 	movhi	r2,65408
    d15c:	10bfffc4 	addi	r2,r2,-1
    d160:	4090703a 	and	r8,r8,r2
    d164:	880ad07a 	srli	r5,r17,1
    d168:	400897fa 	slli	r4,r8,31
    d16c:	88c0004c 	andi	r3,r17,1
    d170:	28e2b03a 	or	r17,r5,r3
    d174:	4010d07a 	srli	r8,r8,1
    d178:	2462b03a 	or	r17,r4,r17
    d17c:	003f7106 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d180:	4088b03a 	or	r4,r8,r2
    d184:	20014526 	beq	r4,zero,d69c <__adddf3+0x7d4>
    d188:	01000434 	movhi	r4,16
    d18c:	42000234 	orhi	r8,r8,8
    d190:	213fffc4 	addi	r4,r4,-1
    d194:	4110703a 	and	r8,r8,r4
    d198:	003f8206 	br	cfa4 <__alt_exception_stack_pointer+0xf800cfa4>
    d19c:	18ffffc4 	addi	r3,r3,-1
    d1a0:	1800491e 	bne	r3,zero,d2c8 <__adddf3+0x400>
    d1a4:	898bc83a 	sub	r5,r17,r6
    d1a8:	8963803a 	cmpltu	r17,r17,r5
    d1ac:	4251c83a 	sub	r8,r8,r9
    d1b0:	4451c83a 	sub	r8,r8,r17
    d1b4:	2823883a 	mov	r17,r5
    d1b8:	003f9f06 	br	d038 <__alt_exception_stack_pointer+0xf800d038>
    d1bc:	4984b03a 	or	r2,r9,r6
    d1c0:	103f6026 	beq	r2,zero,cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d1c4:	213fffc4 	addi	r4,r4,-1
    d1c8:	2000931e 	bne	r4,zero,d418 <__adddf3+0x550>
    d1cc:	898d883a 	add	r6,r17,r6
    d1d0:	3463803a 	cmpltu	r17,r6,r17
    d1d4:	4251883a 	add	r8,r8,r9
    d1d8:	8a11883a 	add	r8,r17,r8
    d1dc:	3023883a 	mov	r17,r6
    d1e0:	003fd806 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d1e4:	1800541e 	bne	r3,zero,d338 <__adddf3+0x470>
    d1e8:	80800044 	addi	r2,r16,1
    d1ec:	1081ffcc 	andi	r2,r2,2047
    d1f0:	00c00044 	movi	r3,1
    d1f4:	1880a00e 	bge	r3,r2,d478 <__adddf3+0x5b0>
    d1f8:	8989c83a 	sub	r4,r17,r6
    d1fc:	8905803a 	cmpltu	r2,r17,r4
    d200:	4267c83a 	sub	r19,r8,r9
    d204:	98a7c83a 	sub	r19,r19,r2
    d208:	9880202c 	andhi	r2,r19,128
    d20c:	10006326 	beq	r2,zero,d39c <__adddf3+0x4d4>
    d210:	3463c83a 	sub	r17,r6,r17
    d214:	4a07c83a 	sub	r3,r9,r8
    d218:	344d803a 	cmpltu	r6,r6,r17
    d21c:	19a7c83a 	sub	r19,r3,r6
    d220:	3825883a 	mov	r18,r7
    d224:	983f8a1e 	bne	r19,zero,d050 <__alt_exception_stack_pointer+0xf800d050>
    d228:	8809883a 	mov	r4,r17
    d22c:	000f7080 	call	f708 <__clzsi2>
    d230:	10800804 	addi	r2,r2,32
    d234:	10fffe04 	addi	r3,r2,-8
    d238:	010007c4 	movi	r4,31
    d23c:	20ff890e 	bge	r4,r3,d064 <__alt_exception_stack_pointer+0xf800d064>
    d240:	10bff604 	addi	r2,r2,-40
    d244:	8884983a 	sll	r2,r17,r2
    d248:	0023883a 	mov	r17,zero
    d24c:	1c3f8c0e 	bge	r3,r16,d080 <__alt_exception_stack_pointer+0xf800d080>
    d250:	023fe034 	movhi	r8,65408
    d254:	423fffc4 	addi	r8,r8,-1
    d258:	80e1c83a 	sub	r16,r16,r3
    d25c:	1210703a 	and	r8,r2,r8
    d260:	003f3806 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d264:	9007883a 	mov	r3,r18
    d268:	0011883a 	mov	r8,zero
    d26c:	0005883a 	mov	r2,zero
    d270:	003f4c06 	br	cfa4 <__alt_exception_stack_pointer+0xf800cfa4>
    d274:	498cb03a 	or	r6,r9,r6
    d278:	300cc03a 	cmpne	r6,r6,zero
    d27c:	0007883a 	mov	r3,zero
    d280:	003f6806 	br	d024 <__alt_exception_stack_pointer+0xf800d024>
    d284:	20009c1e 	bne	r4,zero,d4f8 <__adddf3+0x630>
    d288:	80800044 	addi	r2,r16,1
    d28c:	1141ffcc 	andi	r5,r2,2047
    d290:	01000044 	movi	r4,1
    d294:	2140670e 	bge	r4,r5,d434 <__adddf3+0x56c>
    d298:	0101ffc4 	movi	r4,2047
    d29c:	11007f26 	beq	r2,r4,d49c <__adddf3+0x5d4>
    d2a0:	898d883a 	add	r6,r17,r6
    d2a4:	4247883a 	add	r3,r8,r9
    d2a8:	3451803a 	cmpltu	r8,r6,r17
    d2ac:	40d1883a 	add	r8,r8,r3
    d2b0:	402297fa 	slli	r17,r8,31
    d2b4:	300cd07a 	srli	r6,r6,1
    d2b8:	4010d07a 	srli	r8,r8,1
    d2bc:	1021883a 	mov	r16,r2
    d2c0:	89a2b03a 	or	r17,r17,r6
    d2c4:	003f1f06 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d2c8:	0081ffc4 	movi	r2,2047
    d2cc:	80bf481e 	bne	r16,r2,cff0 <__alt_exception_stack_pointer+0xf800cff0>
    d2d0:	003f1c06 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d2d4:	843ff844 	addi	r16,r16,-31
    d2d8:	01000804 	movi	r4,32
    d2dc:	1406d83a 	srl	r3,r2,r16
    d2e0:	41005026 	beq	r8,r4,d424 <__adddf3+0x55c>
    d2e4:	01001004 	movi	r4,64
    d2e8:	2211c83a 	sub	r8,r4,r8
    d2ec:	1204983a 	sll	r2,r2,r8
    d2f0:	88a2b03a 	or	r17,r17,r2
    d2f4:	8822c03a 	cmpne	r17,r17,zero
    d2f8:	1c62b03a 	or	r17,r3,r17
    d2fc:	0011883a 	mov	r8,zero
    d300:	0021883a 	mov	r16,zero
    d304:	003f7106 	br	d0cc <__alt_exception_stack_pointer+0xf800d0cc>
    d308:	193ff804 	addi	r4,r3,-32
    d30c:	00800804 	movi	r2,32
    d310:	4908d83a 	srl	r4,r9,r4
    d314:	18804526 	beq	r3,r2,d42c <__adddf3+0x564>
    d318:	00801004 	movi	r2,64
    d31c:	10c5c83a 	sub	r2,r2,r3
    d320:	4886983a 	sll	r3,r9,r2
    d324:	198cb03a 	or	r6,r3,r6
    d328:	300cc03a 	cmpne	r6,r6,zero
    d32c:	218cb03a 	or	r6,r4,r6
    d330:	0007883a 	mov	r3,zero
    d334:	003f3b06 	br	d024 <__alt_exception_stack_pointer+0xf800d024>
    d338:	80002a26 	beq	r16,zero,d3e4 <__adddf3+0x51c>
    d33c:	0101ffc4 	movi	r4,2047
    d340:	11006826 	beq	r2,r4,d4e4 <__adddf3+0x61c>
    d344:	00c7c83a 	sub	r3,zero,r3
    d348:	42002034 	orhi	r8,r8,128
    d34c:	01000e04 	movi	r4,56
    d350:	20c07c16 	blt	r4,r3,d544 <__adddf3+0x67c>
    d354:	010007c4 	movi	r4,31
    d358:	20c0da16 	blt	r4,r3,d6c4 <__adddf3+0x7fc>
    d35c:	01000804 	movi	r4,32
    d360:	20c9c83a 	sub	r4,r4,r3
    d364:	4114983a 	sll	r10,r8,r4
    d368:	88cad83a 	srl	r5,r17,r3
    d36c:	8908983a 	sll	r4,r17,r4
    d370:	40c6d83a 	srl	r3,r8,r3
    d374:	5162b03a 	or	r17,r10,r5
    d378:	2008c03a 	cmpne	r4,r4,zero
    d37c:	8922b03a 	or	r17,r17,r4
    d380:	3463c83a 	sub	r17,r6,r17
    d384:	48c7c83a 	sub	r3,r9,r3
    d388:	344d803a 	cmpltu	r6,r6,r17
    d38c:	1991c83a 	sub	r8,r3,r6
    d390:	1021883a 	mov	r16,r2
    d394:	3825883a 	mov	r18,r7
    d398:	003f2706 	br	d038 <__alt_exception_stack_pointer+0xf800d038>
    d39c:	24d0b03a 	or	r8,r4,r19
    d3a0:	40001b1e 	bne	r8,zero,d410 <__adddf3+0x548>
    d3a4:	0005883a 	mov	r2,zero
    d3a8:	0007883a 	mov	r3,zero
    d3ac:	0021883a 	mov	r16,zero
    d3b0:	003f4d06 	br	d0e8 <__alt_exception_stack_pointer+0xf800d0e8>
    d3b4:	008007c4 	movi	r2,31
    d3b8:	11003c16 	blt	r2,r4,d4ac <__adddf3+0x5e4>
    d3bc:	00800804 	movi	r2,32
    d3c0:	1105c83a 	sub	r2,r2,r4
    d3c4:	488e983a 	sll	r7,r9,r2
    d3c8:	310ad83a 	srl	r5,r6,r4
    d3cc:	3084983a 	sll	r2,r6,r2
    d3d0:	4912d83a 	srl	r9,r9,r4
    d3d4:	394ab03a 	or	r5,r7,r5
    d3d8:	1004c03a 	cmpne	r2,r2,zero
    d3dc:	288ab03a 	or	r5,r5,r2
    d3e0:	003f5306 	br	d130 <__alt_exception_stack_pointer+0xf800d130>
    d3e4:	4448b03a 	or	r4,r8,r17
    d3e8:	20003e26 	beq	r4,zero,d4e4 <__adddf3+0x61c>
    d3ec:	00c6303a 	nor	r3,zero,r3
    d3f0:	18003a1e 	bne	r3,zero,d4dc <__adddf3+0x614>
    d3f4:	3463c83a 	sub	r17,r6,r17
    d3f8:	4a07c83a 	sub	r3,r9,r8
    d3fc:	344d803a 	cmpltu	r6,r6,r17
    d400:	1991c83a 	sub	r8,r3,r6
    d404:	1021883a 	mov	r16,r2
    d408:	3825883a 	mov	r18,r7
    d40c:	003f0a06 	br	d038 <__alt_exception_stack_pointer+0xf800d038>
    d410:	2023883a 	mov	r17,r4
    d414:	003f0d06 	br	d04c <__alt_exception_stack_pointer+0xf800d04c>
    d418:	0081ffc4 	movi	r2,2047
    d41c:	80bf3f1e 	bne	r16,r2,d11c <__alt_exception_stack_pointer+0xf800d11c>
    d420:	003ec806 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d424:	0005883a 	mov	r2,zero
    d428:	003fb106 	br	d2f0 <__alt_exception_stack_pointer+0xf800d2f0>
    d42c:	0007883a 	mov	r3,zero
    d430:	003fbc06 	br	d324 <__alt_exception_stack_pointer+0xf800d324>
    d434:	4444b03a 	or	r2,r8,r17
    d438:	8000871e 	bne	r16,zero,d658 <__adddf3+0x790>
    d43c:	1000ba26 	beq	r2,zero,d728 <__adddf3+0x860>
    d440:	4984b03a 	or	r2,r9,r6
    d444:	103ebf26 	beq	r2,zero,cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d448:	8985883a 	add	r2,r17,r6
    d44c:	4247883a 	add	r3,r8,r9
    d450:	1451803a 	cmpltu	r8,r2,r17
    d454:	40d1883a 	add	r8,r8,r3
    d458:	40c0202c 	andhi	r3,r8,128
    d45c:	1023883a 	mov	r17,r2
    d460:	183f1a26 	beq	r3,zero,d0cc <__alt_exception_stack_pointer+0xf800d0cc>
    d464:	00bfe034 	movhi	r2,65408
    d468:	10bfffc4 	addi	r2,r2,-1
    d46c:	2021883a 	mov	r16,r4
    d470:	4090703a 	and	r8,r8,r2
    d474:	003eb306 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d478:	4444b03a 	or	r2,r8,r17
    d47c:	8000291e 	bne	r16,zero,d524 <__adddf3+0x65c>
    d480:	10004b1e 	bne	r2,zero,d5b0 <__adddf3+0x6e8>
    d484:	4990b03a 	or	r8,r9,r6
    d488:	40008b26 	beq	r8,zero,d6b8 <__adddf3+0x7f0>
    d48c:	4811883a 	mov	r8,r9
    d490:	3023883a 	mov	r17,r6
    d494:	3825883a 	mov	r18,r7
    d498:	003eaa06 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d49c:	1021883a 	mov	r16,r2
    d4a0:	0011883a 	mov	r8,zero
    d4a4:	0005883a 	mov	r2,zero
    d4a8:	003f0f06 	br	d0e8 <__alt_exception_stack_pointer+0xf800d0e8>
    d4ac:	217ff804 	addi	r5,r4,-32
    d4b0:	00800804 	movi	r2,32
    d4b4:	494ad83a 	srl	r5,r9,r5
    d4b8:	20807d26 	beq	r4,r2,d6b0 <__adddf3+0x7e8>
    d4bc:	00801004 	movi	r2,64
    d4c0:	1109c83a 	sub	r4,r2,r4
    d4c4:	4912983a 	sll	r9,r9,r4
    d4c8:	498cb03a 	or	r6,r9,r6
    d4cc:	300cc03a 	cmpne	r6,r6,zero
    d4d0:	298ab03a 	or	r5,r5,r6
    d4d4:	0013883a 	mov	r9,zero
    d4d8:	003f1506 	br	d130 <__alt_exception_stack_pointer+0xf800d130>
    d4dc:	0101ffc4 	movi	r4,2047
    d4e0:	113f9a1e 	bne	r2,r4,d34c <__alt_exception_stack_pointer+0xf800d34c>
    d4e4:	4811883a 	mov	r8,r9
    d4e8:	3023883a 	mov	r17,r6
    d4ec:	1021883a 	mov	r16,r2
    d4f0:	3825883a 	mov	r18,r7
    d4f4:	003e9306 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d4f8:	8000161e 	bne	r16,zero,d554 <__adddf3+0x68c>
    d4fc:	444ab03a 	or	r5,r8,r17
    d500:	28005126 	beq	r5,zero,d648 <__adddf3+0x780>
    d504:	0108303a 	nor	r4,zero,r4
    d508:	20004d1e 	bne	r4,zero,d640 <__adddf3+0x778>
    d50c:	89a3883a 	add	r17,r17,r6
    d510:	4253883a 	add	r9,r8,r9
    d514:	898d803a 	cmpltu	r6,r17,r6
    d518:	3251883a 	add	r8,r6,r9
    d51c:	1021883a 	mov	r16,r2
    d520:	003f0806 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d524:	1000301e 	bne	r2,zero,d5e8 <__adddf3+0x720>
    d528:	4984b03a 	or	r2,r9,r6
    d52c:	10007126 	beq	r2,zero,d6f4 <__adddf3+0x82c>
    d530:	4811883a 	mov	r8,r9
    d534:	3023883a 	mov	r17,r6
    d538:	3825883a 	mov	r18,r7
    d53c:	0401ffc4 	movi	r16,2047
    d540:	003e8006 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d544:	4462b03a 	or	r17,r8,r17
    d548:	8822c03a 	cmpne	r17,r17,zero
    d54c:	0007883a 	mov	r3,zero
    d550:	003f8b06 	br	d380 <__alt_exception_stack_pointer+0xf800d380>
    d554:	0141ffc4 	movi	r5,2047
    d558:	11403b26 	beq	r2,r5,d648 <__adddf3+0x780>
    d55c:	0109c83a 	sub	r4,zero,r4
    d560:	42002034 	orhi	r8,r8,128
    d564:	01400e04 	movi	r5,56
    d568:	29006716 	blt	r5,r4,d708 <__adddf3+0x840>
    d56c:	014007c4 	movi	r5,31
    d570:	29007016 	blt	r5,r4,d734 <__adddf3+0x86c>
    d574:	01400804 	movi	r5,32
    d578:	290bc83a 	sub	r5,r5,r4
    d57c:	4154983a 	sll	r10,r8,r5
    d580:	890ed83a 	srl	r7,r17,r4
    d584:	894a983a 	sll	r5,r17,r5
    d588:	4108d83a 	srl	r4,r8,r4
    d58c:	51e2b03a 	or	r17,r10,r7
    d590:	280ac03a 	cmpne	r5,r5,zero
    d594:	8962b03a 	or	r17,r17,r5
    d598:	89a3883a 	add	r17,r17,r6
    d59c:	2253883a 	add	r9,r4,r9
    d5a0:	898d803a 	cmpltu	r6,r17,r6
    d5a4:	3251883a 	add	r8,r6,r9
    d5a8:	1021883a 	mov	r16,r2
    d5ac:	003ee506 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d5b0:	4984b03a 	or	r2,r9,r6
    d5b4:	103e6326 	beq	r2,zero,cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d5b8:	8987c83a 	sub	r3,r17,r6
    d5bc:	88c9803a 	cmpltu	r4,r17,r3
    d5c0:	4245c83a 	sub	r2,r8,r9
    d5c4:	1105c83a 	sub	r2,r2,r4
    d5c8:	1100202c 	andhi	r4,r2,128
    d5cc:	203ebb26 	beq	r4,zero,d0bc <__alt_exception_stack_pointer+0xf800d0bc>
    d5d0:	3463c83a 	sub	r17,r6,r17
    d5d4:	4a07c83a 	sub	r3,r9,r8
    d5d8:	344d803a 	cmpltu	r6,r6,r17
    d5dc:	1991c83a 	sub	r8,r3,r6
    d5e0:	3825883a 	mov	r18,r7
    d5e4:	003e5706 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d5e8:	4984b03a 	or	r2,r9,r6
    d5ec:	10002e26 	beq	r2,zero,d6a8 <__adddf3+0x7e0>
    d5f0:	4004d0fa 	srli	r2,r8,3
    d5f4:	8822d0fa 	srli	r17,r17,3
    d5f8:	4010977a 	slli	r8,r8,29
    d5fc:	10c0022c 	andhi	r3,r2,8
    d600:	4462b03a 	or	r17,r8,r17
    d604:	18000826 	beq	r3,zero,d628 <__adddf3+0x760>
    d608:	4808d0fa 	srli	r4,r9,3
    d60c:	20c0022c 	andhi	r3,r4,8
    d610:	1800051e 	bne	r3,zero,d628 <__adddf3+0x760>
    d614:	300cd0fa 	srli	r6,r6,3
    d618:	4806977a 	slli	r3,r9,29
    d61c:	2005883a 	mov	r2,r4
    d620:	3825883a 	mov	r18,r7
    d624:	19a2b03a 	or	r17,r3,r6
    d628:	8810d77a 	srli	r8,r17,29
    d62c:	100490fa 	slli	r2,r2,3
    d630:	882290fa 	slli	r17,r17,3
    d634:	0401ffc4 	movi	r16,2047
    d638:	4090b03a 	or	r8,r8,r2
    d63c:	003e4106 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d640:	0141ffc4 	movi	r5,2047
    d644:	117fc71e 	bne	r2,r5,d564 <__alt_exception_stack_pointer+0xf800d564>
    d648:	4811883a 	mov	r8,r9
    d64c:	3023883a 	mov	r17,r6
    d650:	1021883a 	mov	r16,r2
    d654:	003e3b06 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d658:	10002f26 	beq	r2,zero,d718 <__adddf3+0x850>
    d65c:	4984b03a 	or	r2,r9,r6
    d660:	10001126 	beq	r2,zero,d6a8 <__adddf3+0x7e0>
    d664:	4004d0fa 	srli	r2,r8,3
    d668:	8822d0fa 	srli	r17,r17,3
    d66c:	4010977a 	slli	r8,r8,29
    d670:	10c0022c 	andhi	r3,r2,8
    d674:	4462b03a 	or	r17,r8,r17
    d678:	183feb26 	beq	r3,zero,d628 <__alt_exception_stack_pointer+0xf800d628>
    d67c:	4808d0fa 	srli	r4,r9,3
    d680:	20c0022c 	andhi	r3,r4,8
    d684:	183fe81e 	bne	r3,zero,d628 <__alt_exception_stack_pointer+0xf800d628>
    d688:	300cd0fa 	srli	r6,r6,3
    d68c:	4806977a 	slli	r3,r9,29
    d690:	2005883a 	mov	r2,r4
    d694:	19a2b03a 	or	r17,r3,r6
    d698:	003fe306 	br	d628 <__alt_exception_stack_pointer+0xf800d628>
    d69c:	0011883a 	mov	r8,zero
    d6a0:	0005883a 	mov	r2,zero
    d6a4:	003e3f06 	br	cfa4 <__alt_exception_stack_pointer+0xf800cfa4>
    d6a8:	0401ffc4 	movi	r16,2047
    d6ac:	003e2506 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d6b0:	0013883a 	mov	r9,zero
    d6b4:	003f8406 	br	d4c8 <__alt_exception_stack_pointer+0xf800d4c8>
    d6b8:	0005883a 	mov	r2,zero
    d6bc:	0007883a 	mov	r3,zero
    d6c0:	003e8906 	br	d0e8 <__alt_exception_stack_pointer+0xf800d0e8>
    d6c4:	197ff804 	addi	r5,r3,-32
    d6c8:	01000804 	movi	r4,32
    d6cc:	414ad83a 	srl	r5,r8,r5
    d6d0:	19002426 	beq	r3,r4,d764 <__adddf3+0x89c>
    d6d4:	01001004 	movi	r4,64
    d6d8:	20c7c83a 	sub	r3,r4,r3
    d6dc:	40c6983a 	sll	r3,r8,r3
    d6e0:	1c46b03a 	or	r3,r3,r17
    d6e4:	1806c03a 	cmpne	r3,r3,zero
    d6e8:	28e2b03a 	or	r17,r5,r3
    d6ec:	0007883a 	mov	r3,zero
    d6f0:	003f2306 	br	d380 <__alt_exception_stack_pointer+0xf800d380>
    d6f4:	0007883a 	mov	r3,zero
    d6f8:	5811883a 	mov	r8,r11
    d6fc:	00bfffc4 	movi	r2,-1
    d700:	0401ffc4 	movi	r16,2047
    d704:	003e7806 	br	d0e8 <__alt_exception_stack_pointer+0xf800d0e8>
    d708:	4462b03a 	or	r17,r8,r17
    d70c:	8822c03a 	cmpne	r17,r17,zero
    d710:	0009883a 	mov	r4,zero
    d714:	003fa006 	br	d598 <__alt_exception_stack_pointer+0xf800d598>
    d718:	4811883a 	mov	r8,r9
    d71c:	3023883a 	mov	r17,r6
    d720:	0401ffc4 	movi	r16,2047
    d724:	003e0706 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d728:	4811883a 	mov	r8,r9
    d72c:	3023883a 	mov	r17,r6
    d730:	003e0406 	br	cf44 <__alt_exception_stack_pointer+0xf800cf44>
    d734:	21fff804 	addi	r7,r4,-32
    d738:	01400804 	movi	r5,32
    d73c:	41ced83a 	srl	r7,r8,r7
    d740:	21400a26 	beq	r4,r5,d76c <__adddf3+0x8a4>
    d744:	01401004 	movi	r5,64
    d748:	2909c83a 	sub	r4,r5,r4
    d74c:	4108983a 	sll	r4,r8,r4
    d750:	2448b03a 	or	r4,r4,r17
    d754:	2008c03a 	cmpne	r4,r4,zero
    d758:	3922b03a 	or	r17,r7,r4
    d75c:	0009883a 	mov	r4,zero
    d760:	003f8d06 	br	d598 <__alt_exception_stack_pointer+0xf800d598>
    d764:	0007883a 	mov	r3,zero
    d768:	003fdd06 	br	d6e0 <__alt_exception_stack_pointer+0xf800d6e0>
    d76c:	0009883a 	mov	r4,zero
    d770:	003ff706 	br	d750 <__alt_exception_stack_pointer+0xf800d750>

0000d774 <__divdf3>:
    d774:	defff004 	addi	sp,sp,-64
    d778:	dc800815 	stw	r18,32(sp)
    d77c:	2824d53a 	srli	r18,r5,20
    d780:	dd800c15 	stw	r22,48(sp)
    d784:	282cd7fa 	srli	r22,r5,31
    d788:	dc000615 	stw	r16,24(sp)
    d78c:	04000434 	movhi	r16,16
    d790:	843fffc4 	addi	r16,r16,-1
    d794:	dfc00f15 	stw	ra,60(sp)
    d798:	df000e15 	stw	fp,56(sp)
    d79c:	ddc00d15 	stw	r23,52(sp)
    d7a0:	dd400b15 	stw	r21,44(sp)
    d7a4:	dd000a15 	stw	r20,40(sp)
    d7a8:	dcc00915 	stw	r19,36(sp)
    d7ac:	dc400715 	stw	r17,28(sp)
    d7b0:	9481ffcc 	andi	r18,r18,2047
    d7b4:	2c20703a 	and	r16,r5,r16
    d7b8:	b2003fcc 	andi	r8,r22,255
    d7bc:	90006126 	beq	r18,zero,d944 <__divdf3+0x1d0>
    d7c0:	0081ffc4 	movi	r2,2047
    d7c4:	202b883a 	mov	r21,r4
    d7c8:	90803726 	beq	r18,r2,d8a8 <__divdf3+0x134>
    d7cc:	80800434 	orhi	r2,r16,16
    d7d0:	100490fa 	slli	r2,r2,3
    d7d4:	2020d77a 	srli	r16,r4,29
    d7d8:	202a90fa 	slli	r21,r4,3
    d7dc:	94bf0044 	addi	r18,r18,-1023
    d7e0:	80a0b03a 	or	r16,r16,r2
    d7e4:	0013883a 	mov	r9,zero
    d7e8:	000b883a 	mov	r5,zero
    d7ec:	3806d53a 	srli	r3,r7,20
    d7f0:	382ed7fa 	srli	r23,r7,31
    d7f4:	04400434 	movhi	r17,16
    d7f8:	8c7fffc4 	addi	r17,r17,-1
    d7fc:	18c1ffcc 	andi	r3,r3,2047
    d800:	3029883a 	mov	r20,r6
    d804:	3c62703a 	and	r17,r7,r17
    d808:	bf003fcc 	andi	fp,r23,255
    d80c:	18006e26 	beq	r3,zero,d9c8 <__divdf3+0x254>
    d810:	0081ffc4 	movi	r2,2047
    d814:	18806626 	beq	r3,r2,d9b0 <__divdf3+0x23c>
    d818:	88800434 	orhi	r2,r17,16
    d81c:	100490fa 	slli	r2,r2,3
    d820:	3022d77a 	srli	r17,r6,29
    d824:	302890fa 	slli	r20,r6,3
    d828:	18ff0044 	addi	r3,r3,-1023
    d82c:	88a2b03a 	or	r17,r17,r2
    d830:	000f883a 	mov	r7,zero
    d834:	b5e6f03a 	xor	r19,r22,r23
    d838:	3a4cb03a 	or	r6,r7,r9
    d83c:	008003c4 	movi	r2,15
    d840:	9809883a 	mov	r4,r19
    d844:	90c7c83a 	sub	r3,r18,r3
    d848:	9cc03fcc 	andi	r19,r19,255
    d84c:	11809636 	bltu	r2,r6,daa8 <__divdf3+0x334>
    d850:	300c90ba 	slli	r6,r6,2
    d854:	00800074 	movhi	r2,1
    d858:	10b61a04 	addi	r2,r2,-10136
    d85c:	308d883a 	add	r6,r6,r2
    d860:	30800017 	ldw	r2,0(r6)
    d864:	1000683a 	jmp	r2
    d868:	0000daa8 	cmpgeui	zero,zero,874
    d86c:	0000d8e0 	cmpeqi	zero,zero,867
    d870:	0000da98 	cmpnei	zero,zero,874
    d874:	0000d8d4 	movui	zero,867
    d878:	0000da98 	cmpnei	zero,zero,874
    d87c:	0000da6c 	andhi	zero,zero,873
    d880:	0000da98 	cmpnei	zero,zero,874
    d884:	0000d8d4 	movui	zero,867
    d888:	0000d8e0 	cmpeqi	zero,zero,867
    d88c:	0000d8e0 	cmpeqi	zero,zero,867
    d890:	0000da6c 	andhi	zero,zero,873
    d894:	0000d8d4 	movui	zero,867
    d898:	0000d8c4 	movi	zero,867
    d89c:	0000d8c4 	movi	zero,867
    d8a0:	0000d8c4 	movi	zero,867
    d8a4:	0000de30 	cmpltui	zero,zero,888
    d8a8:	2404b03a 	or	r2,r4,r16
    d8ac:	10006c1e 	bne	r2,zero,da60 <__divdf3+0x2ec>
    d8b0:	02400204 	movi	r9,8
    d8b4:	0021883a 	mov	r16,zero
    d8b8:	002b883a 	mov	r21,zero
    d8bc:	01400084 	movi	r5,2
    d8c0:	003fca06 	br	d7ec <__alt_exception_stack_pointer+0xf800d7ec>
    d8c4:	8023883a 	mov	r17,r16
    d8c8:	a829883a 	mov	r20,r21
    d8cc:	4039883a 	mov	fp,r8
    d8d0:	280f883a 	mov	r7,r5
    d8d4:	00800084 	movi	r2,2
    d8d8:	3881601e 	bne	r7,r2,de5c <__divdf3+0x6e8>
    d8dc:	e027883a 	mov	r19,fp
    d8e0:	9900004c 	andi	r4,r19,1
    d8e4:	0081ffc4 	movi	r2,2047
    d8e8:	0021883a 	mov	r16,zero
    d8ec:	002b883a 	mov	r21,zero
    d8f0:	1004953a 	slli	r2,r2,20
    d8f4:	20c03fcc 	andi	r3,r4,255
    d8f8:	01400434 	movhi	r5,16
    d8fc:	297fffc4 	addi	r5,r5,-1
    d900:	180697fa 	slli	r3,r3,31
    d904:	8160703a 	and	r16,r16,r5
    d908:	80a0b03a 	or	r16,r16,r2
    d90c:	80c6b03a 	or	r3,r16,r3
    d910:	a805883a 	mov	r2,r21
    d914:	dfc00f17 	ldw	ra,60(sp)
    d918:	df000e17 	ldw	fp,56(sp)
    d91c:	ddc00d17 	ldw	r23,52(sp)
    d920:	dd800c17 	ldw	r22,48(sp)
    d924:	dd400b17 	ldw	r21,44(sp)
    d928:	dd000a17 	ldw	r20,40(sp)
    d92c:	dcc00917 	ldw	r19,36(sp)
    d930:	dc800817 	ldw	r18,32(sp)
    d934:	dc400717 	ldw	r17,28(sp)
    d938:	dc000617 	ldw	r16,24(sp)
    d93c:	dec01004 	addi	sp,sp,64
    d940:	f800283a 	ret
    d944:	2404b03a 	or	r2,r4,r16
    d948:	2023883a 	mov	r17,r4
    d94c:	10003f26 	beq	r2,zero,da4c <__divdf3+0x2d8>
    d950:	80015e26 	beq	r16,zero,decc <__divdf3+0x758>
    d954:	8009883a 	mov	r4,r16
    d958:	d9800215 	stw	r6,8(sp)
    d95c:	d9c00515 	stw	r7,20(sp)
    d960:	da000415 	stw	r8,16(sp)
    d964:	000f7080 	call	f708 <__clzsi2>
    d968:	d9800217 	ldw	r6,8(sp)
    d96c:	d9c00517 	ldw	r7,20(sp)
    d970:	da000417 	ldw	r8,16(sp)
    d974:	113ffd44 	addi	r4,r2,-11
    d978:	00c00704 	movi	r3,28
    d97c:	19014f16 	blt	r3,r4,debc <__divdf3+0x748>
    d980:	00c00744 	movi	r3,29
    d984:	157ffe04 	addi	r21,r2,-8
    d988:	1907c83a 	sub	r3,r3,r4
    d98c:	8560983a 	sll	r16,r16,r21
    d990:	88c6d83a 	srl	r3,r17,r3
    d994:	8d6a983a 	sll	r21,r17,r21
    d998:	1c20b03a 	or	r16,r3,r16
    d99c:	1080fcc4 	addi	r2,r2,1011
    d9a0:	00a5c83a 	sub	r18,zero,r2
    d9a4:	0013883a 	mov	r9,zero
    d9a8:	000b883a 	mov	r5,zero
    d9ac:	003f8f06 	br	d7ec <__alt_exception_stack_pointer+0xf800d7ec>
    d9b0:	3444b03a 	or	r2,r6,r17
    d9b4:	1000231e 	bne	r2,zero,da44 <__divdf3+0x2d0>
    d9b8:	0023883a 	mov	r17,zero
    d9bc:	0029883a 	mov	r20,zero
    d9c0:	01c00084 	movi	r7,2
    d9c4:	003f9b06 	br	d834 <__alt_exception_stack_pointer+0xf800d834>
    d9c8:	3444b03a 	or	r2,r6,r17
    d9cc:	10001926 	beq	r2,zero,da34 <__divdf3+0x2c0>
    d9d0:	88014b26 	beq	r17,zero,df00 <__divdf3+0x78c>
    d9d4:	8809883a 	mov	r4,r17
    d9d8:	d9400115 	stw	r5,4(sp)
    d9dc:	d9800215 	stw	r6,8(sp)
    d9e0:	da000415 	stw	r8,16(sp)
    d9e4:	da400315 	stw	r9,12(sp)
    d9e8:	000f7080 	call	f708 <__clzsi2>
    d9ec:	d9400117 	ldw	r5,4(sp)
    d9f0:	d9800217 	ldw	r6,8(sp)
    d9f4:	da000417 	ldw	r8,16(sp)
    d9f8:	da400317 	ldw	r9,12(sp)
    d9fc:	113ffd44 	addi	r4,r2,-11
    da00:	00c00704 	movi	r3,28
    da04:	19013a16 	blt	r3,r4,def0 <__divdf3+0x77c>
    da08:	00c00744 	movi	r3,29
    da0c:	153ffe04 	addi	r20,r2,-8
    da10:	1907c83a 	sub	r3,r3,r4
    da14:	8d22983a 	sll	r17,r17,r20
    da18:	30c6d83a 	srl	r3,r6,r3
    da1c:	3528983a 	sll	r20,r6,r20
    da20:	1c62b03a 	or	r17,r3,r17
    da24:	1080fcc4 	addi	r2,r2,1011
    da28:	0087c83a 	sub	r3,zero,r2
    da2c:	000f883a 	mov	r7,zero
    da30:	003f8006 	br	d834 <__alt_exception_stack_pointer+0xf800d834>
    da34:	0023883a 	mov	r17,zero
    da38:	0029883a 	mov	r20,zero
    da3c:	01c00044 	movi	r7,1
    da40:	003f7c06 	br	d834 <__alt_exception_stack_pointer+0xf800d834>
    da44:	01c000c4 	movi	r7,3
    da48:	003f7a06 	br	d834 <__alt_exception_stack_pointer+0xf800d834>
    da4c:	02400104 	movi	r9,4
    da50:	0021883a 	mov	r16,zero
    da54:	002b883a 	mov	r21,zero
    da58:	01400044 	movi	r5,1
    da5c:	003f6306 	br	d7ec <__alt_exception_stack_pointer+0xf800d7ec>
    da60:	02400304 	movi	r9,12
    da64:	014000c4 	movi	r5,3
    da68:	003f6006 	br	d7ec <__alt_exception_stack_pointer+0xf800d7ec>
    da6c:	04000434 	movhi	r16,16
    da70:	0009883a 	mov	r4,zero
    da74:	843fffc4 	addi	r16,r16,-1
    da78:	057fffc4 	movi	r21,-1
    da7c:	0081ffc4 	movi	r2,2047
    da80:	003f9b06 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    da84:	00c00044 	movi	r3,1
    da88:	1887c83a 	sub	r3,r3,r2
    da8c:	01000e04 	movi	r4,56
    da90:	20c1530e 	bge	r4,r3,dfe0 <__divdf3+0x86c>
    da94:	9900004c 	andi	r4,r19,1
    da98:	0005883a 	mov	r2,zero
    da9c:	0021883a 	mov	r16,zero
    daa0:	002b883a 	mov	r21,zero
    daa4:	003f9206 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    daa8:	8c012e36 	bltu	r17,r16,df64 <__divdf3+0x7f0>
    daac:	84412c26 	beq	r16,r17,df60 <__divdf3+0x7ec>
    dab0:	a82f883a 	mov	r23,r21
    dab4:	18ffffc4 	addi	r3,r3,-1
    dab8:	002b883a 	mov	r21,zero
    dabc:	a004d63a 	srli	r2,r20,24
    dac0:	8822923a 	slli	r17,r17,8
    dac4:	a028923a 	slli	r20,r20,8
    dac8:	8009883a 	mov	r4,r16
    dacc:	88acb03a 	or	r22,r17,r2
    dad0:	dd000015 	stw	r20,0(sp)
    dad4:	b028d43a 	srli	r20,r22,16
    dad8:	d8c00215 	stw	r3,8(sp)
    dadc:	b4bfffcc 	andi	r18,r22,65535
    dae0:	a00b883a 	mov	r5,r20
    dae4:	000cde40 	call	cde4 <__udivsi3>
    dae8:	100b883a 	mov	r5,r2
    daec:	9009883a 	mov	r4,r18
    daf0:	1023883a 	mov	r17,r2
    daf4:	000cea00 	call	cea0 <__mulsi3>
    daf8:	8009883a 	mov	r4,r16
    dafc:	a00b883a 	mov	r5,r20
    db00:	1039883a 	mov	fp,r2
    db04:	000ce480 	call	ce48 <__umodsi3>
    db08:	1004943a 	slli	r2,r2,16
    db0c:	b808d43a 	srli	r4,r23,16
    db10:	d8c00217 	ldw	r3,8(sp)
    db14:	2084b03a 	or	r2,r4,r2
    db18:	1700062e 	bgeu	r2,fp,db34 <__divdf3+0x3c0>
    db1c:	1585883a 	add	r2,r2,r22
    db20:	893fffc4 	addi	r4,r17,-1
    db24:	15811d36 	bltu	r2,r22,df9c <__divdf3+0x828>
    db28:	17011c2e 	bgeu	r2,fp,df9c <__divdf3+0x828>
    db2c:	8c7fff84 	addi	r17,r17,-2
    db30:	1585883a 	add	r2,r2,r22
    db34:	1739c83a 	sub	fp,r2,fp
    db38:	a00b883a 	mov	r5,r20
    db3c:	e009883a 	mov	r4,fp
    db40:	d8c00215 	stw	r3,8(sp)
    db44:	000cde40 	call	cde4 <__udivsi3>
    db48:	100b883a 	mov	r5,r2
    db4c:	9009883a 	mov	r4,r18
    db50:	1021883a 	mov	r16,r2
    db54:	000cea00 	call	cea0 <__mulsi3>
    db58:	a00b883a 	mov	r5,r20
    db5c:	e009883a 	mov	r4,fp
    db60:	d8800415 	stw	r2,16(sp)
    db64:	000ce480 	call	ce48 <__umodsi3>
    db68:	1004943a 	slli	r2,r2,16
    db6c:	da000417 	ldw	r8,16(sp)
    db70:	bdffffcc 	andi	r23,r23,65535
    db74:	b884b03a 	or	r2,r23,r2
    db78:	d8c00217 	ldw	r3,8(sp)
    db7c:	1200062e 	bgeu	r2,r8,db98 <__divdf3+0x424>
    db80:	1585883a 	add	r2,r2,r22
    db84:	813fffc4 	addi	r4,r16,-1
    db88:	15810236 	bltu	r2,r22,df94 <__divdf3+0x820>
    db8c:	1201012e 	bgeu	r2,r8,df94 <__divdf3+0x820>
    db90:	843fff84 	addi	r16,r16,-2
    db94:	1585883a 	add	r2,r2,r22
    db98:	8822943a 	slli	r17,r17,16
    db9c:	d9800017 	ldw	r6,0(sp)
    dba0:	1211c83a 	sub	r8,r2,r8
    dba4:	8c22b03a 	or	r17,r17,r16
    dba8:	373fffcc 	andi	fp,r6,65535
    dbac:	8abfffcc 	andi	r10,r17,65535
    dbb0:	8820d43a 	srli	r16,r17,16
    dbb4:	5009883a 	mov	r4,r10
    dbb8:	e00b883a 	mov	r5,fp
    dbbc:	302ed43a 	srli	r23,r6,16
    dbc0:	d8c00215 	stw	r3,8(sp)
    dbc4:	da000415 	stw	r8,16(sp)
    dbc8:	da800115 	stw	r10,4(sp)
    dbcc:	000cea00 	call	cea0 <__mulsi3>
    dbd0:	800b883a 	mov	r5,r16
    dbd4:	e009883a 	mov	r4,fp
    dbd8:	d8800515 	stw	r2,20(sp)
    dbdc:	000cea00 	call	cea0 <__mulsi3>
    dbe0:	8009883a 	mov	r4,r16
    dbe4:	b80b883a 	mov	r5,r23
    dbe8:	d8800315 	stw	r2,12(sp)
    dbec:	000cea00 	call	cea0 <__mulsi3>
    dbf0:	da800117 	ldw	r10,4(sp)
    dbf4:	b80b883a 	mov	r5,r23
    dbf8:	1021883a 	mov	r16,r2
    dbfc:	5009883a 	mov	r4,r10
    dc00:	000cea00 	call	cea0 <__mulsi3>
    dc04:	d9c00517 	ldw	r7,20(sp)
    dc08:	da400317 	ldw	r9,12(sp)
    dc0c:	d8c00217 	ldw	r3,8(sp)
    dc10:	3808d43a 	srli	r4,r7,16
    dc14:	1245883a 	add	r2,r2,r9
    dc18:	da000417 	ldw	r8,16(sp)
    dc1c:	2085883a 	add	r2,r4,r2
    dc20:	1240022e 	bgeu	r2,r9,dc2c <__divdf3+0x4b8>
    dc24:	01000074 	movhi	r4,1
    dc28:	8121883a 	add	r16,r16,r4
    dc2c:	1008d43a 	srli	r4,r2,16
    dc30:	1004943a 	slli	r2,r2,16
    dc34:	39ffffcc 	andi	r7,r7,65535
    dc38:	2409883a 	add	r4,r4,r16
    dc3c:	11c5883a 	add	r2,r2,r7
    dc40:	4100bb36 	bltu	r8,r4,df30 <__divdf3+0x7bc>
    dc44:	4100d726 	beq	r8,r4,dfa4 <__divdf3+0x830>
    dc48:	4109c83a 	sub	r4,r8,r4
    dc4c:	a8a1c83a 	sub	r16,r21,r2
    dc50:	ac2b803a 	cmpltu	r21,r21,r16
    dc54:	256bc83a 	sub	r21,r4,r21
    dc58:	b540d926 	beq	r22,r21,dfc0 <__divdf3+0x84c>
    dc5c:	a00b883a 	mov	r5,r20
    dc60:	a809883a 	mov	r4,r21
    dc64:	d8c00215 	stw	r3,8(sp)
    dc68:	000cde40 	call	cde4 <__udivsi3>
    dc6c:	100b883a 	mov	r5,r2
    dc70:	9009883a 	mov	r4,r18
    dc74:	d8800515 	stw	r2,20(sp)
    dc78:	000cea00 	call	cea0 <__mulsi3>
    dc7c:	a809883a 	mov	r4,r21
    dc80:	a00b883a 	mov	r5,r20
    dc84:	d8800415 	stw	r2,16(sp)
    dc88:	000ce480 	call	ce48 <__umodsi3>
    dc8c:	1004943a 	slli	r2,r2,16
    dc90:	8008d43a 	srli	r4,r16,16
    dc94:	da000417 	ldw	r8,16(sp)
    dc98:	d8c00217 	ldw	r3,8(sp)
    dc9c:	2084b03a 	or	r2,r4,r2
    dca0:	d9c00517 	ldw	r7,20(sp)
    dca4:	1200062e 	bgeu	r2,r8,dcc0 <__divdf3+0x54c>
    dca8:	1585883a 	add	r2,r2,r22
    dcac:	393fffc4 	addi	r4,r7,-1
    dcb0:	1580c536 	bltu	r2,r22,dfc8 <__divdf3+0x854>
    dcb4:	1200c42e 	bgeu	r2,r8,dfc8 <__divdf3+0x854>
    dcb8:	39ffff84 	addi	r7,r7,-2
    dcbc:	1585883a 	add	r2,r2,r22
    dcc0:	122bc83a 	sub	r21,r2,r8
    dcc4:	a00b883a 	mov	r5,r20
    dcc8:	a809883a 	mov	r4,r21
    dccc:	d8c00215 	stw	r3,8(sp)
    dcd0:	d9c00515 	stw	r7,20(sp)
    dcd4:	000cde40 	call	cde4 <__udivsi3>
    dcd8:	9009883a 	mov	r4,r18
    dcdc:	100b883a 	mov	r5,r2
    dce0:	d8800415 	stw	r2,16(sp)
    dce4:	000cea00 	call	cea0 <__mulsi3>
    dce8:	a809883a 	mov	r4,r21
    dcec:	a00b883a 	mov	r5,r20
    dcf0:	1025883a 	mov	r18,r2
    dcf4:	000ce480 	call	ce48 <__umodsi3>
    dcf8:	1004943a 	slli	r2,r2,16
    dcfc:	813fffcc 	andi	r4,r16,65535
    dd00:	d8c00217 	ldw	r3,8(sp)
    dd04:	20a0b03a 	or	r16,r4,r2
    dd08:	d9c00517 	ldw	r7,20(sp)
    dd0c:	da000417 	ldw	r8,16(sp)
    dd10:	8480062e 	bgeu	r16,r18,dd2c <__divdf3+0x5b8>
    dd14:	85a1883a 	add	r16,r16,r22
    dd18:	40bfffc4 	addi	r2,r8,-1
    dd1c:	8580ac36 	bltu	r16,r22,dfd0 <__divdf3+0x85c>
    dd20:	8480ab2e 	bgeu	r16,r18,dfd0 <__divdf3+0x85c>
    dd24:	423fff84 	addi	r8,r8,-2
    dd28:	85a1883a 	add	r16,r16,r22
    dd2c:	3804943a 	slli	r2,r7,16
    dd30:	84a1c83a 	sub	r16,r16,r18
    dd34:	e009883a 	mov	r4,fp
    dd38:	1228b03a 	or	r20,r2,r8
    dd3c:	a1ffffcc 	andi	r7,r20,65535
    dd40:	a024d43a 	srli	r18,r20,16
    dd44:	380b883a 	mov	r5,r7
    dd48:	d8c00215 	stw	r3,8(sp)
    dd4c:	d9c00515 	stw	r7,20(sp)
    dd50:	000cea00 	call	cea0 <__mulsi3>
    dd54:	900b883a 	mov	r5,r18
    dd58:	e009883a 	mov	r4,fp
    dd5c:	102b883a 	mov	r21,r2
    dd60:	000cea00 	call	cea0 <__mulsi3>
    dd64:	900b883a 	mov	r5,r18
    dd68:	b809883a 	mov	r4,r23
    dd6c:	1039883a 	mov	fp,r2
    dd70:	000cea00 	call	cea0 <__mulsi3>
    dd74:	d9c00517 	ldw	r7,20(sp)
    dd78:	b80b883a 	mov	r5,r23
    dd7c:	1025883a 	mov	r18,r2
    dd80:	3809883a 	mov	r4,r7
    dd84:	000cea00 	call	cea0 <__mulsi3>
    dd88:	a808d43a 	srli	r4,r21,16
    dd8c:	1705883a 	add	r2,r2,fp
    dd90:	d8c00217 	ldw	r3,8(sp)
    dd94:	2085883a 	add	r2,r4,r2
    dd98:	1700022e 	bgeu	r2,fp,dda4 <__divdf3+0x630>
    dd9c:	01000074 	movhi	r4,1
    dda0:	9125883a 	add	r18,r18,r4
    dda4:	1008d43a 	srli	r4,r2,16
    dda8:	1004943a 	slli	r2,r2,16
    ddac:	ad7fffcc 	andi	r21,r21,65535
    ddb0:	2489883a 	add	r4,r4,r18
    ddb4:	1545883a 	add	r2,r2,r21
    ddb8:	81003836 	bltu	r16,r4,de9c <__divdf3+0x728>
    ddbc:	81003626 	beq	r16,r4,de98 <__divdf3+0x724>
    ddc0:	a5000054 	ori	r20,r20,1
    ddc4:	1880ffc4 	addi	r2,r3,1023
    ddc8:	00bf2e0e 	bge	zero,r2,da84 <__alt_exception_stack_pointer+0xf800da84>
    ddcc:	a10001cc 	andi	r4,r20,7
    ddd0:	20000726 	beq	r4,zero,ddf0 <__divdf3+0x67c>
    ddd4:	a10003cc 	andi	r4,r20,15
    ddd8:	01400104 	movi	r5,4
    dddc:	21400426 	beq	r4,r5,ddf0 <__divdf3+0x67c>
    dde0:	a149883a 	add	r4,r20,r5
    dde4:	2529803a 	cmpltu	r20,r4,r20
    dde8:	8d23883a 	add	r17,r17,r20
    ddec:	2029883a 	mov	r20,r4
    ddf0:	8900402c 	andhi	r4,r17,256
    ddf4:	20000426 	beq	r4,zero,de08 <__divdf3+0x694>
    ddf8:	18810004 	addi	r2,r3,1024
    ddfc:	00ffc034 	movhi	r3,65280
    de00:	18ffffc4 	addi	r3,r3,-1
    de04:	88e2703a 	and	r17,r17,r3
    de08:	00c1ff84 	movi	r3,2046
    de0c:	18beb416 	blt	r3,r2,d8e0 <__alt_exception_stack_pointer+0xf800d8e0>
    de10:	a028d0fa 	srli	r20,r20,3
    de14:	882a977a 	slli	r21,r17,29
    de18:	8820927a 	slli	r16,r17,9
    de1c:	1081ffcc 	andi	r2,r2,2047
    de20:	ad2ab03a 	or	r21,r21,r20
    de24:	8020d33a 	srli	r16,r16,12
    de28:	9900004c 	andi	r4,r19,1
    de2c:	003eb006 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    de30:	8080022c 	andhi	r2,r16,8
    de34:	10001226 	beq	r2,zero,de80 <__divdf3+0x70c>
    de38:	8880022c 	andhi	r2,r17,8
    de3c:	1000101e 	bne	r2,zero,de80 <__divdf3+0x70c>
    de40:	00800434 	movhi	r2,16
    de44:	8c000234 	orhi	r16,r17,8
    de48:	10bfffc4 	addi	r2,r2,-1
    de4c:	b809883a 	mov	r4,r23
    de50:	80a0703a 	and	r16,r16,r2
    de54:	a02b883a 	mov	r21,r20
    de58:	003f0806 	br	da7c <__alt_exception_stack_pointer+0xf800da7c>
    de5c:	008000c4 	movi	r2,3
    de60:	3880b126 	beq	r7,r2,e128 <__divdf3+0x9b4>
    de64:	00800044 	movi	r2,1
    de68:	38805b1e 	bne	r7,r2,dfd8 <__divdf3+0x864>
    de6c:	e009883a 	mov	r4,fp
    de70:	0005883a 	mov	r2,zero
    de74:	0021883a 	mov	r16,zero
    de78:	002b883a 	mov	r21,zero
    de7c:	003e9c06 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    de80:	00800434 	movhi	r2,16
    de84:	84000234 	orhi	r16,r16,8
    de88:	10bfffc4 	addi	r2,r2,-1
    de8c:	b009883a 	mov	r4,r22
    de90:	80a0703a 	and	r16,r16,r2
    de94:	003ef906 	br	da7c <__alt_exception_stack_pointer+0xf800da7c>
    de98:	103fca26 	beq	r2,zero,ddc4 <__alt_exception_stack_pointer+0xf800ddc4>
    de9c:	b421883a 	add	r16,r22,r16
    dea0:	a17fffc4 	addi	r5,r20,-1
    dea4:	8580422e 	bgeu	r16,r22,dfb0 <__divdf3+0x83c>
    dea8:	2829883a 	mov	r20,r5
    deac:	813fc41e 	bne	r16,r4,ddc0 <__alt_exception_stack_pointer+0xf800ddc0>
    deb0:	d9800017 	ldw	r6,0(sp)
    deb4:	30bfc21e 	bne	r6,r2,ddc0 <__alt_exception_stack_pointer+0xf800ddc0>
    deb8:	003fc206 	br	ddc4 <__alt_exception_stack_pointer+0xf800ddc4>
    debc:	143ff604 	addi	r16,r2,-40
    dec0:	8c20983a 	sll	r16,r17,r16
    dec4:	002b883a 	mov	r21,zero
    dec8:	003eb406 	br	d99c <__alt_exception_stack_pointer+0xf800d99c>
    decc:	d9800215 	stw	r6,8(sp)
    ded0:	d9c00515 	stw	r7,20(sp)
    ded4:	da000415 	stw	r8,16(sp)
    ded8:	000f7080 	call	f708 <__clzsi2>
    dedc:	10800804 	addi	r2,r2,32
    dee0:	da000417 	ldw	r8,16(sp)
    dee4:	d9c00517 	ldw	r7,20(sp)
    dee8:	d9800217 	ldw	r6,8(sp)
    deec:	003ea106 	br	d974 <__alt_exception_stack_pointer+0xf800d974>
    def0:	147ff604 	addi	r17,r2,-40
    def4:	3462983a 	sll	r17,r6,r17
    def8:	0029883a 	mov	r20,zero
    defc:	003ec906 	br	da24 <__alt_exception_stack_pointer+0xf800da24>
    df00:	3009883a 	mov	r4,r6
    df04:	d9400115 	stw	r5,4(sp)
    df08:	d9800215 	stw	r6,8(sp)
    df0c:	da000415 	stw	r8,16(sp)
    df10:	da400315 	stw	r9,12(sp)
    df14:	000f7080 	call	f708 <__clzsi2>
    df18:	10800804 	addi	r2,r2,32
    df1c:	da400317 	ldw	r9,12(sp)
    df20:	da000417 	ldw	r8,16(sp)
    df24:	d9800217 	ldw	r6,8(sp)
    df28:	d9400117 	ldw	r5,4(sp)
    df2c:	003eb306 	br	d9fc <__alt_exception_stack_pointer+0xf800d9fc>
    df30:	d9800017 	ldw	r6,0(sp)
    df34:	a9ab883a 	add	r21,r21,r6
    df38:	a98b803a 	cmpltu	r5,r21,r6
    df3c:	2d8b883a 	add	r5,r5,r22
    df40:	2a11883a 	add	r8,r5,r8
    df44:	897fffc4 	addi	r5,r17,-1
    df48:	b2000c2e 	bgeu	r22,r8,df7c <__divdf3+0x808>
    df4c:	41003f36 	bltu	r8,r4,e04c <__divdf3+0x8d8>
    df50:	22006c26 	beq	r4,r8,e104 <__divdf3+0x990>
    df54:	4109c83a 	sub	r4,r8,r4
    df58:	2823883a 	mov	r17,r5
    df5c:	003f3b06 	br	dc4c <__alt_exception_stack_pointer+0xf800dc4c>
    df60:	ad3ed336 	bltu	r21,r20,dab0 <__alt_exception_stack_pointer+0xf800dab0>
    df64:	a804d07a 	srli	r2,r21,1
    df68:	802e97fa 	slli	r23,r16,31
    df6c:	a82a97fa 	slli	r21,r21,31
    df70:	8020d07a 	srli	r16,r16,1
    df74:	b8aeb03a 	or	r23,r23,r2
    df78:	003ed006 	br	dabc <__alt_exception_stack_pointer+0xf800dabc>
    df7c:	b23ff51e 	bne	r22,r8,df54 <__alt_exception_stack_pointer+0xf800df54>
    df80:	d9800017 	ldw	r6,0(sp)
    df84:	a9bff12e 	bgeu	r21,r6,df4c <__alt_exception_stack_pointer+0xf800df4c>
    df88:	b109c83a 	sub	r4,r22,r4
    df8c:	2823883a 	mov	r17,r5
    df90:	003f2e06 	br	dc4c <__alt_exception_stack_pointer+0xf800dc4c>
    df94:	2021883a 	mov	r16,r4
    df98:	003eff06 	br	db98 <__alt_exception_stack_pointer+0xf800db98>
    df9c:	2023883a 	mov	r17,r4
    dfa0:	003ee406 	br	db34 <__alt_exception_stack_pointer+0xf800db34>
    dfa4:	a8bfe236 	bltu	r21,r2,df30 <__alt_exception_stack_pointer+0xf800df30>
    dfa8:	0009883a 	mov	r4,zero
    dfac:	003f2706 	br	dc4c <__alt_exception_stack_pointer+0xf800dc4c>
    dfb0:	81002d36 	bltu	r16,r4,e068 <__divdf3+0x8f4>
    dfb4:	24005626 	beq	r4,r16,e110 <__divdf3+0x99c>
    dfb8:	2829883a 	mov	r20,r5
    dfbc:	003f8006 	br	ddc0 <__alt_exception_stack_pointer+0xf800ddc0>
    dfc0:	053fffc4 	movi	r20,-1
    dfc4:	003f7f06 	br	ddc4 <__alt_exception_stack_pointer+0xf800ddc4>
    dfc8:	200f883a 	mov	r7,r4
    dfcc:	003f3c06 	br	dcc0 <__alt_exception_stack_pointer+0xf800dcc0>
    dfd0:	1011883a 	mov	r8,r2
    dfd4:	003f5506 	br	dd2c <__alt_exception_stack_pointer+0xf800dd2c>
    dfd8:	e027883a 	mov	r19,fp
    dfdc:	003f7906 	br	ddc4 <__alt_exception_stack_pointer+0xf800ddc4>
    dfe0:	010007c4 	movi	r4,31
    dfe4:	20c02816 	blt	r4,r3,e088 <__divdf3+0x914>
    dfe8:	00800804 	movi	r2,32
    dfec:	10c5c83a 	sub	r2,r2,r3
    dff0:	888a983a 	sll	r5,r17,r2
    dff4:	a0c8d83a 	srl	r4,r20,r3
    dff8:	a084983a 	sll	r2,r20,r2
    dffc:	88e2d83a 	srl	r17,r17,r3
    e000:	2906b03a 	or	r3,r5,r4
    e004:	1004c03a 	cmpne	r2,r2,zero
    e008:	1886b03a 	or	r3,r3,r2
    e00c:	188001cc 	andi	r2,r3,7
    e010:	10000726 	beq	r2,zero,e030 <__divdf3+0x8bc>
    e014:	188003cc 	andi	r2,r3,15
    e018:	01000104 	movi	r4,4
    e01c:	11000426 	beq	r2,r4,e030 <__divdf3+0x8bc>
    e020:	1805883a 	mov	r2,r3
    e024:	10c00104 	addi	r3,r2,4
    e028:	1885803a 	cmpltu	r2,r3,r2
    e02c:	88a3883a 	add	r17,r17,r2
    e030:	8880202c 	andhi	r2,r17,128
    e034:	10002926 	beq	r2,zero,e0dc <__divdf3+0x968>
    e038:	9900004c 	andi	r4,r19,1
    e03c:	00800044 	movi	r2,1
    e040:	0021883a 	mov	r16,zero
    e044:	002b883a 	mov	r21,zero
    e048:	003e2906 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    e04c:	d9800017 	ldw	r6,0(sp)
    e050:	8c7fff84 	addi	r17,r17,-2
    e054:	a9ab883a 	add	r21,r21,r6
    e058:	a98b803a 	cmpltu	r5,r21,r6
    e05c:	2d8b883a 	add	r5,r5,r22
    e060:	2a11883a 	add	r8,r5,r8
    e064:	003ef806 	br	dc48 <__alt_exception_stack_pointer+0xf800dc48>
    e068:	d9800017 	ldw	r6,0(sp)
    e06c:	318f883a 	add	r7,r6,r6
    e070:	398b803a 	cmpltu	r5,r7,r6
    e074:	2d8d883a 	add	r6,r5,r22
    e078:	81a1883a 	add	r16,r16,r6
    e07c:	a17fff84 	addi	r5,r20,-2
    e080:	d9c00015 	stw	r7,0(sp)
    e084:	003f8806 	br	dea8 <__alt_exception_stack_pointer+0xf800dea8>
    e088:	013ff844 	movi	r4,-31
    e08c:	2085c83a 	sub	r2,r4,r2
    e090:	8888d83a 	srl	r4,r17,r2
    e094:	00800804 	movi	r2,32
    e098:	18802126 	beq	r3,r2,e120 <__divdf3+0x9ac>
    e09c:	04001004 	movi	r16,64
    e0a0:	80c7c83a 	sub	r3,r16,r3
    e0a4:	88e0983a 	sll	r16,r17,r3
    e0a8:	8504b03a 	or	r2,r16,r20
    e0ac:	1004c03a 	cmpne	r2,r2,zero
    e0b0:	2084b03a 	or	r2,r4,r2
    e0b4:	144001cc 	andi	r17,r2,7
    e0b8:	88000d1e 	bne	r17,zero,e0f0 <__divdf3+0x97c>
    e0bc:	0021883a 	mov	r16,zero
    e0c0:	102ad0fa 	srli	r21,r2,3
    e0c4:	9900004c 	andi	r4,r19,1
    e0c8:	0005883a 	mov	r2,zero
    e0cc:	ac6ab03a 	or	r21,r21,r17
    e0d0:	003e0706 	br	d8f0 <__alt_exception_stack_pointer+0xf800d8f0>
    e0d4:	1007883a 	mov	r3,r2
    e0d8:	0023883a 	mov	r17,zero
    e0dc:	8820927a 	slli	r16,r17,9
    e0e0:	1805883a 	mov	r2,r3
    e0e4:	8822977a 	slli	r17,r17,29
    e0e8:	8020d33a 	srli	r16,r16,12
    e0ec:	003ff406 	br	e0c0 <__alt_exception_stack_pointer+0xf800e0c0>
    e0f0:	10c003cc 	andi	r3,r2,15
    e0f4:	01000104 	movi	r4,4
    e0f8:	193ff626 	beq	r3,r4,e0d4 <__alt_exception_stack_pointer+0xf800e0d4>
    e0fc:	0023883a 	mov	r17,zero
    e100:	003fc806 	br	e024 <__alt_exception_stack_pointer+0xf800e024>
    e104:	a8bfd136 	bltu	r21,r2,e04c <__alt_exception_stack_pointer+0xf800e04c>
    e108:	2823883a 	mov	r17,r5
    e10c:	003fa606 	br	dfa8 <__alt_exception_stack_pointer+0xf800dfa8>
    e110:	d9800017 	ldw	r6,0(sp)
    e114:	30bfd436 	bltu	r6,r2,e068 <__alt_exception_stack_pointer+0xf800e068>
    e118:	2829883a 	mov	r20,r5
    e11c:	003f6406 	br	deb0 <__alt_exception_stack_pointer+0xf800deb0>
    e120:	0021883a 	mov	r16,zero
    e124:	003fe006 	br	e0a8 <__alt_exception_stack_pointer+0xf800e0a8>
    e128:	00800434 	movhi	r2,16
    e12c:	8c000234 	orhi	r16,r17,8
    e130:	10bfffc4 	addi	r2,r2,-1
    e134:	e009883a 	mov	r4,fp
    e138:	80a0703a 	and	r16,r16,r2
    e13c:	a02b883a 	mov	r21,r20
    e140:	003e4e06 	br	da7c <__alt_exception_stack_pointer+0xf800da7c>

0000e144 <__eqdf2>:
    e144:	2804d53a 	srli	r2,r5,20
    e148:	3806d53a 	srli	r3,r7,20
    e14c:	02000434 	movhi	r8,16
    e150:	423fffc4 	addi	r8,r8,-1
    e154:	1081ffcc 	andi	r2,r2,2047
    e158:	0281ffc4 	movi	r10,2047
    e15c:	2a12703a 	and	r9,r5,r8
    e160:	18c1ffcc 	andi	r3,r3,2047
    e164:	3a10703a 	and	r8,r7,r8
    e168:	280ad7fa 	srli	r5,r5,31
    e16c:	380ed7fa 	srli	r7,r7,31
    e170:	12801026 	beq	r2,r10,e1b4 <__eqdf2+0x70>
    e174:	0281ffc4 	movi	r10,2047
    e178:	1a800a26 	beq	r3,r10,e1a4 <__eqdf2+0x60>
    e17c:	10c00226 	beq	r2,r3,e188 <__eqdf2+0x44>
    e180:	00800044 	movi	r2,1
    e184:	f800283a 	ret
    e188:	4a3ffd1e 	bne	r9,r8,e180 <__alt_exception_stack_pointer+0xf800e180>
    e18c:	21bffc1e 	bne	r4,r6,e180 <__alt_exception_stack_pointer+0xf800e180>
    e190:	29c00c26 	beq	r5,r7,e1c4 <__eqdf2+0x80>
    e194:	103ffa1e 	bne	r2,zero,e180 <__alt_exception_stack_pointer+0xf800e180>
    e198:	2244b03a 	or	r2,r4,r9
    e19c:	1004c03a 	cmpne	r2,r2,zero
    e1a0:	f800283a 	ret
    e1a4:	3214b03a 	or	r10,r6,r8
    e1a8:	503ff426 	beq	r10,zero,e17c <__alt_exception_stack_pointer+0xf800e17c>
    e1ac:	00800044 	movi	r2,1
    e1b0:	f800283a 	ret
    e1b4:	2254b03a 	or	r10,r4,r9
    e1b8:	503fee26 	beq	r10,zero,e174 <__alt_exception_stack_pointer+0xf800e174>
    e1bc:	00800044 	movi	r2,1
    e1c0:	f800283a 	ret
    e1c4:	0005883a 	mov	r2,zero
    e1c8:	f800283a 	ret

0000e1cc <__gedf2>:
    e1cc:	2804d53a 	srli	r2,r5,20
    e1d0:	3806d53a 	srli	r3,r7,20
    e1d4:	02000434 	movhi	r8,16
    e1d8:	423fffc4 	addi	r8,r8,-1
    e1dc:	1081ffcc 	andi	r2,r2,2047
    e1e0:	0241ffc4 	movi	r9,2047
    e1e4:	2a14703a 	and	r10,r5,r8
    e1e8:	18c1ffcc 	andi	r3,r3,2047
    e1ec:	3a10703a 	and	r8,r7,r8
    e1f0:	280ad7fa 	srli	r5,r5,31
    e1f4:	380ed7fa 	srli	r7,r7,31
    e1f8:	12401d26 	beq	r2,r9,e270 <__gedf2+0xa4>
    e1fc:	0241ffc4 	movi	r9,2047
    e200:	1a401226 	beq	r3,r9,e24c <__gedf2+0x80>
    e204:	1000081e 	bne	r2,zero,e228 <__gedf2+0x5c>
    e208:	2296b03a 	or	r11,r4,r10
    e20c:	5813003a 	cmpeq	r9,r11,zero
    e210:	1800091e 	bne	r3,zero,e238 <__gedf2+0x6c>
    e214:	3218b03a 	or	r12,r6,r8
    e218:	6000071e 	bne	r12,zero,e238 <__gedf2+0x6c>
    e21c:	0005883a 	mov	r2,zero
    e220:	5800101e 	bne	r11,zero,e264 <__gedf2+0x98>
    e224:	f800283a 	ret
    e228:	18000c1e 	bne	r3,zero,e25c <__gedf2+0x90>
    e22c:	3212b03a 	or	r9,r6,r8
    e230:	48000c26 	beq	r9,zero,e264 <__gedf2+0x98>
    e234:	0013883a 	mov	r9,zero
    e238:	39c03fcc 	andi	r7,r7,255
    e23c:	48000826 	beq	r9,zero,e260 <__gedf2+0x94>
    e240:	38000926 	beq	r7,zero,e268 <__gedf2+0x9c>
    e244:	00800044 	movi	r2,1
    e248:	f800283a 	ret
    e24c:	3212b03a 	or	r9,r6,r8
    e250:	483fec26 	beq	r9,zero,e204 <__alt_exception_stack_pointer+0xf800e204>
    e254:	00bfff84 	movi	r2,-2
    e258:	f800283a 	ret
    e25c:	39c03fcc 	andi	r7,r7,255
    e260:	29c00626 	beq	r5,r7,e27c <__gedf2+0xb0>
    e264:	283ff726 	beq	r5,zero,e244 <__alt_exception_stack_pointer+0xf800e244>
    e268:	00bfffc4 	movi	r2,-1
    e26c:	f800283a 	ret
    e270:	2292b03a 	or	r9,r4,r10
    e274:	483fe126 	beq	r9,zero,e1fc <__alt_exception_stack_pointer+0xf800e1fc>
    e278:	003ff606 	br	e254 <__alt_exception_stack_pointer+0xf800e254>
    e27c:	18bff916 	blt	r3,r2,e264 <__alt_exception_stack_pointer+0xf800e264>
    e280:	10c00316 	blt	r2,r3,e290 <__gedf2+0xc4>
    e284:	42bff736 	bltu	r8,r10,e264 <__alt_exception_stack_pointer+0xf800e264>
    e288:	52000326 	beq	r10,r8,e298 <__gedf2+0xcc>
    e28c:	5200042e 	bgeu	r10,r8,e2a0 <__gedf2+0xd4>
    e290:	283fec1e 	bne	r5,zero,e244 <__alt_exception_stack_pointer+0xf800e244>
    e294:	003ff406 	br	e268 <__alt_exception_stack_pointer+0xf800e268>
    e298:	313ff236 	bltu	r6,r4,e264 <__alt_exception_stack_pointer+0xf800e264>
    e29c:	21bffc36 	bltu	r4,r6,e290 <__alt_exception_stack_pointer+0xf800e290>
    e2a0:	0005883a 	mov	r2,zero
    e2a4:	f800283a 	ret

0000e2a8 <__ledf2>:
    e2a8:	2804d53a 	srli	r2,r5,20
    e2ac:	3810d53a 	srli	r8,r7,20
    e2b0:	00c00434 	movhi	r3,16
    e2b4:	18ffffc4 	addi	r3,r3,-1
    e2b8:	1081ffcc 	andi	r2,r2,2047
    e2bc:	0241ffc4 	movi	r9,2047
    e2c0:	28d4703a 	and	r10,r5,r3
    e2c4:	4201ffcc 	andi	r8,r8,2047
    e2c8:	38c6703a 	and	r3,r7,r3
    e2cc:	280ad7fa 	srli	r5,r5,31
    e2d0:	380ed7fa 	srli	r7,r7,31
    e2d4:	12401f26 	beq	r2,r9,e354 <__ledf2+0xac>
    e2d8:	0241ffc4 	movi	r9,2047
    e2dc:	42401426 	beq	r8,r9,e330 <__ledf2+0x88>
    e2e0:	1000091e 	bne	r2,zero,e308 <__ledf2+0x60>
    e2e4:	2296b03a 	or	r11,r4,r10
    e2e8:	5813003a 	cmpeq	r9,r11,zero
    e2ec:	29403fcc 	andi	r5,r5,255
    e2f0:	40000a1e 	bne	r8,zero,e31c <__ledf2+0x74>
    e2f4:	30d8b03a 	or	r12,r6,r3
    e2f8:	6000081e 	bne	r12,zero,e31c <__ledf2+0x74>
    e2fc:	0005883a 	mov	r2,zero
    e300:	5800111e 	bne	r11,zero,e348 <__ledf2+0xa0>
    e304:	f800283a 	ret
    e308:	29403fcc 	andi	r5,r5,255
    e30c:	40000c1e 	bne	r8,zero,e340 <__ledf2+0x98>
    e310:	30d2b03a 	or	r9,r6,r3
    e314:	48000c26 	beq	r9,zero,e348 <__ledf2+0xa0>
    e318:	0013883a 	mov	r9,zero
    e31c:	39c03fcc 	andi	r7,r7,255
    e320:	48000826 	beq	r9,zero,e344 <__ledf2+0x9c>
    e324:	38001126 	beq	r7,zero,e36c <__ledf2+0xc4>
    e328:	00800044 	movi	r2,1
    e32c:	f800283a 	ret
    e330:	30d2b03a 	or	r9,r6,r3
    e334:	483fea26 	beq	r9,zero,e2e0 <__alt_exception_stack_pointer+0xf800e2e0>
    e338:	00800084 	movi	r2,2
    e33c:	f800283a 	ret
    e340:	39c03fcc 	andi	r7,r7,255
    e344:	39400726 	beq	r7,r5,e364 <__ledf2+0xbc>
    e348:	2800081e 	bne	r5,zero,e36c <__ledf2+0xc4>
    e34c:	00800044 	movi	r2,1
    e350:	f800283a 	ret
    e354:	2292b03a 	or	r9,r4,r10
    e358:	483fdf26 	beq	r9,zero,e2d8 <__alt_exception_stack_pointer+0xf800e2d8>
    e35c:	00800084 	movi	r2,2
    e360:	f800283a 	ret
    e364:	4080030e 	bge	r8,r2,e374 <__ledf2+0xcc>
    e368:	383fef26 	beq	r7,zero,e328 <__alt_exception_stack_pointer+0xf800e328>
    e36c:	00bfffc4 	movi	r2,-1
    e370:	f800283a 	ret
    e374:	123feb16 	blt	r2,r8,e324 <__alt_exception_stack_pointer+0xf800e324>
    e378:	1abff336 	bltu	r3,r10,e348 <__alt_exception_stack_pointer+0xf800e348>
    e37c:	50c00326 	beq	r10,r3,e38c <__ledf2+0xe4>
    e380:	50c0042e 	bgeu	r10,r3,e394 <__ledf2+0xec>
    e384:	283fe81e 	bne	r5,zero,e328 <__alt_exception_stack_pointer+0xf800e328>
    e388:	003ff806 	br	e36c <__alt_exception_stack_pointer+0xf800e36c>
    e38c:	313fee36 	bltu	r6,r4,e348 <__alt_exception_stack_pointer+0xf800e348>
    e390:	21bffc36 	bltu	r4,r6,e384 <__alt_exception_stack_pointer+0xf800e384>
    e394:	0005883a 	mov	r2,zero
    e398:	f800283a 	ret

0000e39c <__muldf3>:
    e39c:	deffee04 	addi	sp,sp,-72
    e3a0:	dd000c15 	stw	r20,48(sp)
    e3a4:	2828d53a 	srli	r20,r5,20
    e3a8:	ddc00f15 	stw	r23,60(sp)
    e3ac:	282ed7fa 	srli	r23,r5,31
    e3b0:	dc000815 	stw	r16,32(sp)
    e3b4:	04000434 	movhi	r16,16
    e3b8:	dcc00b15 	stw	r19,44(sp)
    e3bc:	843fffc4 	addi	r16,r16,-1
    e3c0:	dfc01115 	stw	ra,68(sp)
    e3c4:	df001015 	stw	fp,64(sp)
    e3c8:	dd800e15 	stw	r22,56(sp)
    e3cc:	dd400d15 	stw	r21,52(sp)
    e3d0:	dc800a15 	stw	r18,40(sp)
    e3d4:	dc400915 	stw	r17,36(sp)
    e3d8:	a501ffcc 	andi	r20,r20,2047
    e3dc:	2c20703a 	and	r16,r5,r16
    e3e0:	b827883a 	mov	r19,r23
    e3e4:	ba403fcc 	andi	r9,r23,255
    e3e8:	a0006026 	beq	r20,zero,e56c <__muldf3+0x1d0>
    e3ec:	0081ffc4 	movi	r2,2047
    e3f0:	202d883a 	mov	r22,r4
    e3f4:	a0803626 	beq	r20,r2,e4d0 <__muldf3+0x134>
    e3f8:	84000434 	orhi	r16,r16,16
    e3fc:	200ad77a 	srli	r5,r4,29
    e400:	800490fa 	slli	r2,r16,3
    e404:	202c90fa 	slli	r22,r4,3
    e408:	a53f0044 	addi	r20,r20,-1023
    e40c:	28a0b03a 	or	r16,r5,r2
    e410:	002b883a 	mov	r21,zero
    e414:	000b883a 	mov	r5,zero
    e418:	3804d53a 	srli	r2,r7,20
    e41c:	3838d7fa 	srli	fp,r7,31
    e420:	04400434 	movhi	r17,16
    e424:	8c7fffc4 	addi	r17,r17,-1
    e428:	1081ffcc 	andi	r2,r2,2047
    e42c:	3025883a 	mov	r18,r6
    e430:	3c62703a 	and	r17,r7,r17
    e434:	e2803fcc 	andi	r10,fp,255
    e438:	10006d26 	beq	r2,zero,e5f0 <__muldf3+0x254>
    e43c:	00c1ffc4 	movi	r3,2047
    e440:	10c06526 	beq	r2,r3,e5d8 <__muldf3+0x23c>
    e444:	8c400434 	orhi	r17,r17,16
    e448:	300ed77a 	srli	r7,r6,29
    e44c:	880690fa 	slli	r3,r17,3
    e450:	302490fa 	slli	r18,r6,3
    e454:	10bf0044 	addi	r2,r2,-1023
    e458:	38e2b03a 	or	r17,r7,r3
    e45c:	000f883a 	mov	r7,zero
    e460:	a087883a 	add	r3,r20,r2
    e464:	010003c4 	movi	r4,15
    e468:	3d44b03a 	or	r2,r7,r21
    e46c:	e5ccf03a 	xor	r6,fp,r23
    e470:	1a000044 	addi	r8,r3,1
    e474:	20809b36 	bltu	r4,r2,e6e4 <__muldf3+0x348>
    e478:	100490ba 	slli	r2,r2,2
    e47c:	01000074 	movhi	r4,1
    e480:	21392404 	addi	r4,r4,-7024
    e484:	1105883a 	add	r2,r2,r4
    e488:	10800017 	ldw	r2,0(r2)
    e48c:	1000683a 	jmp	r2
    e490:	0000e6e4 	muli	zero,zero,923
    e494:	0000e4f0 	cmpltui	zero,zero,915
    e498:	0000e4f0 	cmpltui	zero,zero,915
    e49c:	0000e4ec 	andhi	zero,zero,915
    e4a0:	0000e6c0 	call	e6c <init_keyboard+0x73c>
    e4a4:	0000e6c0 	call	e6c <init_keyboard+0x73c>
    e4a8:	0000e6a8 	cmpgeui	zero,zero,922
    e4ac:	0000e4ec 	andhi	zero,zero,915
    e4b0:	0000e6c0 	call	e6c <init_keyboard+0x73c>
    e4b4:	0000e6a8 	cmpgeui	zero,zero,922
    e4b8:	0000e6c0 	call	e6c <init_keyboard+0x73c>
    e4bc:	0000e4ec 	andhi	zero,zero,915
    e4c0:	0000e6d0 	cmplti	zero,zero,923
    e4c4:	0000e6d0 	cmplti	zero,zero,923
    e4c8:	0000e6d0 	cmplti	zero,zero,923
    e4cc:	0000ea30 	cmpltui	zero,zero,936
    e4d0:	2404b03a 	or	r2,r4,r16
    e4d4:	1000711e 	bne	r2,zero,e69c <__muldf3+0x300>
    e4d8:	05400204 	movi	r21,8
    e4dc:	0021883a 	mov	r16,zero
    e4e0:	002d883a 	mov	r22,zero
    e4e4:	01400084 	movi	r5,2
    e4e8:	003fcb06 	br	e418 <__alt_exception_stack_pointer+0xf800e418>
    e4ec:	500d883a 	mov	r6,r10
    e4f0:	00800084 	movi	r2,2
    e4f4:	38805926 	beq	r7,r2,e65c <__muldf3+0x2c0>
    e4f8:	008000c4 	movi	r2,3
    e4fc:	3881bb26 	beq	r7,r2,ebec <__muldf3+0x850>
    e500:	00800044 	movi	r2,1
    e504:	3881961e 	bne	r7,r2,eb60 <__muldf3+0x7c4>
    e508:	3027883a 	mov	r19,r6
    e50c:	0005883a 	mov	r2,zero
    e510:	0021883a 	mov	r16,zero
    e514:	002d883a 	mov	r22,zero
    e518:	1004953a 	slli	r2,r2,20
    e51c:	98c03fcc 	andi	r3,r19,255
    e520:	04400434 	movhi	r17,16
    e524:	8c7fffc4 	addi	r17,r17,-1
    e528:	180697fa 	slli	r3,r3,31
    e52c:	8460703a 	and	r16,r16,r17
    e530:	80a0b03a 	or	r16,r16,r2
    e534:	80c6b03a 	or	r3,r16,r3
    e538:	b005883a 	mov	r2,r22
    e53c:	dfc01117 	ldw	ra,68(sp)
    e540:	df001017 	ldw	fp,64(sp)
    e544:	ddc00f17 	ldw	r23,60(sp)
    e548:	dd800e17 	ldw	r22,56(sp)
    e54c:	dd400d17 	ldw	r21,52(sp)
    e550:	dd000c17 	ldw	r20,48(sp)
    e554:	dcc00b17 	ldw	r19,44(sp)
    e558:	dc800a17 	ldw	r18,40(sp)
    e55c:	dc400917 	ldw	r17,36(sp)
    e560:	dc000817 	ldw	r16,32(sp)
    e564:	dec01204 	addi	sp,sp,72
    e568:	f800283a 	ret
    e56c:	2404b03a 	or	r2,r4,r16
    e570:	202b883a 	mov	r21,r4
    e574:	10004426 	beq	r2,zero,e688 <__muldf3+0x2ec>
    e578:	80015126 	beq	r16,zero,eac0 <__muldf3+0x724>
    e57c:	8009883a 	mov	r4,r16
    e580:	d9800715 	stw	r6,28(sp)
    e584:	d9c00215 	stw	r7,8(sp)
    e588:	da400415 	stw	r9,16(sp)
    e58c:	000f7080 	call	f708 <__clzsi2>
    e590:	d9800717 	ldw	r6,28(sp)
    e594:	d9c00217 	ldw	r7,8(sp)
    e598:	da400417 	ldw	r9,16(sp)
    e59c:	113ffd44 	addi	r4,r2,-11
    e5a0:	00c00704 	movi	r3,28
    e5a4:	19014216 	blt	r3,r4,eab0 <__muldf3+0x714>
    e5a8:	00c00744 	movi	r3,29
    e5ac:	15bffe04 	addi	r22,r2,-8
    e5b0:	1907c83a 	sub	r3,r3,r4
    e5b4:	85a0983a 	sll	r16,r16,r22
    e5b8:	a8c6d83a 	srl	r3,r21,r3
    e5bc:	adac983a 	sll	r22,r21,r22
    e5c0:	1c20b03a 	or	r16,r3,r16
    e5c4:	1080fcc4 	addi	r2,r2,1011
    e5c8:	00a9c83a 	sub	r20,zero,r2
    e5cc:	002b883a 	mov	r21,zero
    e5d0:	000b883a 	mov	r5,zero
    e5d4:	003f9006 	br	e418 <__alt_exception_stack_pointer+0xf800e418>
    e5d8:	3446b03a 	or	r3,r6,r17
    e5dc:	1800281e 	bne	r3,zero,e680 <__muldf3+0x2e4>
    e5e0:	0023883a 	mov	r17,zero
    e5e4:	0025883a 	mov	r18,zero
    e5e8:	01c00084 	movi	r7,2
    e5ec:	003f9c06 	br	e460 <__alt_exception_stack_pointer+0xf800e460>
    e5f0:	3446b03a 	or	r3,r6,r17
    e5f4:	18001e26 	beq	r3,zero,e670 <__muldf3+0x2d4>
    e5f8:	88012126 	beq	r17,zero,ea80 <__muldf3+0x6e4>
    e5fc:	8809883a 	mov	r4,r17
    e600:	d9400215 	stw	r5,8(sp)
    e604:	d9800715 	stw	r6,28(sp)
    e608:	da400415 	stw	r9,16(sp)
    e60c:	da800315 	stw	r10,12(sp)
    e610:	000f7080 	call	f708 <__clzsi2>
    e614:	d9400217 	ldw	r5,8(sp)
    e618:	d9800717 	ldw	r6,28(sp)
    e61c:	da400417 	ldw	r9,16(sp)
    e620:	da800317 	ldw	r10,12(sp)
    e624:	113ffd44 	addi	r4,r2,-11
    e628:	00c00704 	movi	r3,28
    e62c:	19011016 	blt	r3,r4,ea70 <__muldf3+0x6d4>
    e630:	00c00744 	movi	r3,29
    e634:	14bffe04 	addi	r18,r2,-8
    e638:	1907c83a 	sub	r3,r3,r4
    e63c:	8ca2983a 	sll	r17,r17,r18
    e640:	30c6d83a 	srl	r3,r6,r3
    e644:	34a4983a 	sll	r18,r6,r18
    e648:	1c62b03a 	or	r17,r3,r17
    e64c:	1080fcc4 	addi	r2,r2,1011
    e650:	0085c83a 	sub	r2,zero,r2
    e654:	000f883a 	mov	r7,zero
    e658:	003f8106 	br	e460 <__alt_exception_stack_pointer+0xf800e460>
    e65c:	3027883a 	mov	r19,r6
    e660:	0081ffc4 	movi	r2,2047
    e664:	0021883a 	mov	r16,zero
    e668:	002d883a 	mov	r22,zero
    e66c:	003faa06 	br	e518 <__alt_exception_stack_pointer+0xf800e518>
    e670:	0023883a 	mov	r17,zero
    e674:	0025883a 	mov	r18,zero
    e678:	01c00044 	movi	r7,1
    e67c:	003f7806 	br	e460 <__alt_exception_stack_pointer+0xf800e460>
    e680:	01c000c4 	movi	r7,3
    e684:	003f7606 	br	e460 <__alt_exception_stack_pointer+0xf800e460>
    e688:	05400104 	movi	r21,4
    e68c:	0021883a 	mov	r16,zero
    e690:	002d883a 	mov	r22,zero
    e694:	01400044 	movi	r5,1
    e698:	003f5f06 	br	e418 <__alt_exception_stack_pointer+0xf800e418>
    e69c:	05400304 	movi	r21,12
    e6a0:	014000c4 	movi	r5,3
    e6a4:	003f5c06 	br	e418 <__alt_exception_stack_pointer+0xf800e418>
    e6a8:	04000434 	movhi	r16,16
    e6ac:	0027883a 	mov	r19,zero
    e6b0:	843fffc4 	addi	r16,r16,-1
    e6b4:	05bfffc4 	movi	r22,-1
    e6b8:	0081ffc4 	movi	r2,2047
    e6bc:	003f9606 	br	e518 <__alt_exception_stack_pointer+0xf800e518>
    e6c0:	8023883a 	mov	r17,r16
    e6c4:	b025883a 	mov	r18,r22
    e6c8:	280f883a 	mov	r7,r5
    e6cc:	003f8806 	br	e4f0 <__alt_exception_stack_pointer+0xf800e4f0>
    e6d0:	8023883a 	mov	r17,r16
    e6d4:	b025883a 	mov	r18,r22
    e6d8:	480d883a 	mov	r6,r9
    e6dc:	280f883a 	mov	r7,r5
    e6e0:	003f8306 	br	e4f0 <__alt_exception_stack_pointer+0xf800e4f0>
    e6e4:	b026d43a 	srli	r19,r22,16
    e6e8:	902ed43a 	srli	r23,r18,16
    e6ec:	b5bfffcc 	andi	r22,r22,65535
    e6f0:	94bfffcc 	andi	r18,r18,65535
    e6f4:	b00b883a 	mov	r5,r22
    e6f8:	9009883a 	mov	r4,r18
    e6fc:	d8c00515 	stw	r3,20(sp)
    e700:	d9800715 	stw	r6,28(sp)
    e704:	da000615 	stw	r8,24(sp)
    e708:	000cea00 	call	cea0 <__mulsi3>
    e70c:	980b883a 	mov	r5,r19
    e710:	9009883a 	mov	r4,r18
    e714:	1029883a 	mov	r20,r2
    e718:	000cea00 	call	cea0 <__mulsi3>
    e71c:	b80b883a 	mov	r5,r23
    e720:	9809883a 	mov	r4,r19
    e724:	102b883a 	mov	r21,r2
    e728:	000cea00 	call	cea0 <__mulsi3>
    e72c:	b809883a 	mov	r4,r23
    e730:	b00b883a 	mov	r5,r22
    e734:	1039883a 	mov	fp,r2
    e738:	000cea00 	call	cea0 <__mulsi3>
    e73c:	a008d43a 	srli	r4,r20,16
    e740:	1545883a 	add	r2,r2,r21
    e744:	d8c00517 	ldw	r3,20(sp)
    e748:	2085883a 	add	r2,r4,r2
    e74c:	d9800717 	ldw	r6,28(sp)
    e750:	da000617 	ldw	r8,24(sp)
    e754:	1540022e 	bgeu	r2,r21,e760 <__muldf3+0x3c4>
    e758:	01000074 	movhi	r4,1
    e75c:	e139883a 	add	fp,fp,r4
    e760:	100e943a 	slli	r7,r2,16
    e764:	1004d43a 	srli	r2,r2,16
    e768:	882ad43a 	srli	r21,r17,16
    e76c:	a53fffcc 	andi	r20,r20,65535
    e770:	8c7fffcc 	andi	r17,r17,65535
    e774:	3d29883a 	add	r20,r7,r20
    e778:	b00b883a 	mov	r5,r22
    e77c:	8809883a 	mov	r4,r17
    e780:	d8c00515 	stw	r3,20(sp)
    e784:	d9800715 	stw	r6,28(sp)
    e788:	da000615 	stw	r8,24(sp)
    e78c:	dd000115 	stw	r20,4(sp)
    e790:	d8800015 	stw	r2,0(sp)
    e794:	000cea00 	call	cea0 <__mulsi3>
    e798:	980b883a 	mov	r5,r19
    e79c:	8809883a 	mov	r4,r17
    e7a0:	d8800215 	stw	r2,8(sp)
    e7a4:	000cea00 	call	cea0 <__mulsi3>
    e7a8:	9809883a 	mov	r4,r19
    e7ac:	a80b883a 	mov	r5,r21
    e7b0:	1029883a 	mov	r20,r2
    e7b4:	000cea00 	call	cea0 <__mulsi3>
    e7b8:	b00b883a 	mov	r5,r22
    e7bc:	a809883a 	mov	r4,r21
    e7c0:	d8800415 	stw	r2,16(sp)
    e7c4:	000cea00 	call	cea0 <__mulsi3>
    e7c8:	d9c00217 	ldw	r7,8(sp)
    e7cc:	1505883a 	add	r2,r2,r20
    e7d0:	d8c00517 	ldw	r3,20(sp)
    e7d4:	3826d43a 	srli	r19,r7,16
    e7d8:	d9800717 	ldw	r6,28(sp)
    e7dc:	da000617 	ldw	r8,24(sp)
    e7e0:	9885883a 	add	r2,r19,r2
    e7e4:	da400417 	ldw	r9,16(sp)
    e7e8:	1500022e 	bgeu	r2,r20,e7f4 <__muldf3+0x458>
    e7ec:	01000074 	movhi	r4,1
    e7f0:	4913883a 	add	r9,r9,r4
    e7f4:	1028d43a 	srli	r20,r2,16
    e7f8:	1004943a 	slli	r2,r2,16
    e7fc:	802cd43a 	srli	r22,r16,16
    e800:	843fffcc 	andi	r16,r16,65535
    e804:	3cffffcc 	andi	r19,r7,65535
    e808:	9009883a 	mov	r4,r18
    e80c:	800b883a 	mov	r5,r16
    e810:	a269883a 	add	r20,r20,r9
    e814:	d8c00515 	stw	r3,20(sp)
    e818:	d9800715 	stw	r6,28(sp)
    e81c:	da000615 	stw	r8,24(sp)
    e820:	14e7883a 	add	r19,r2,r19
    e824:	000cea00 	call	cea0 <__mulsi3>
    e828:	9009883a 	mov	r4,r18
    e82c:	b00b883a 	mov	r5,r22
    e830:	d8800315 	stw	r2,12(sp)
    e834:	000cea00 	call	cea0 <__mulsi3>
    e838:	b809883a 	mov	r4,r23
    e83c:	b00b883a 	mov	r5,r22
    e840:	d8800215 	stw	r2,8(sp)
    e844:	000cea00 	call	cea0 <__mulsi3>
    e848:	b80b883a 	mov	r5,r23
    e84c:	8009883a 	mov	r4,r16
    e850:	d8800415 	stw	r2,16(sp)
    e854:	000cea00 	call	cea0 <__mulsi3>
    e858:	da800317 	ldw	r10,12(sp)
    e85c:	d9c00217 	ldw	r7,8(sp)
    e860:	d9000017 	ldw	r4,0(sp)
    e864:	502ed43a 	srli	r23,r10,16
    e868:	11c5883a 	add	r2,r2,r7
    e86c:	24e5883a 	add	r18,r4,r19
    e870:	b885883a 	add	r2,r23,r2
    e874:	d8c00517 	ldw	r3,20(sp)
    e878:	d9800717 	ldw	r6,28(sp)
    e87c:	da000617 	ldw	r8,24(sp)
    e880:	da400417 	ldw	r9,16(sp)
    e884:	11c0022e 	bgeu	r2,r7,e890 <__muldf3+0x4f4>
    e888:	01000074 	movhi	r4,1
    e88c:	4913883a 	add	r9,r9,r4
    e890:	100ed43a 	srli	r7,r2,16
    e894:	1004943a 	slli	r2,r2,16
    e898:	55ffffcc 	andi	r23,r10,65535
    e89c:	3a53883a 	add	r9,r7,r9
    e8a0:	8809883a 	mov	r4,r17
    e8a4:	800b883a 	mov	r5,r16
    e8a8:	d8c00515 	stw	r3,20(sp)
    e8ac:	d9800715 	stw	r6,28(sp)
    e8b0:	da000615 	stw	r8,24(sp)
    e8b4:	da400415 	stw	r9,16(sp)
    e8b8:	15ef883a 	add	r23,r2,r23
    e8bc:	000cea00 	call	cea0 <__mulsi3>
    e8c0:	8809883a 	mov	r4,r17
    e8c4:	b00b883a 	mov	r5,r22
    e8c8:	d8800215 	stw	r2,8(sp)
    e8cc:	000cea00 	call	cea0 <__mulsi3>
    e8d0:	b00b883a 	mov	r5,r22
    e8d4:	a809883a 	mov	r4,r21
    e8d8:	d8800315 	stw	r2,12(sp)
    e8dc:	000cea00 	call	cea0 <__mulsi3>
    e8e0:	8009883a 	mov	r4,r16
    e8e4:	a80b883a 	mov	r5,r21
    e8e8:	1023883a 	mov	r17,r2
    e8ec:	000cea00 	call	cea0 <__mulsi3>
    e8f0:	d9c00217 	ldw	r7,8(sp)
    e8f4:	da800317 	ldw	r10,12(sp)
    e8f8:	d8c00517 	ldw	r3,20(sp)
    e8fc:	3808d43a 	srli	r4,r7,16
    e900:	1285883a 	add	r2,r2,r10
    e904:	d9800717 	ldw	r6,28(sp)
    e908:	2085883a 	add	r2,r4,r2
    e90c:	da000617 	ldw	r8,24(sp)
    e910:	da400417 	ldw	r9,16(sp)
    e914:	1280022e 	bgeu	r2,r10,e920 <__muldf3+0x584>
    e918:	01000074 	movhi	r4,1
    e91c:	8923883a 	add	r17,r17,r4
    e920:	1008943a 	slli	r4,r2,16
    e924:	39ffffcc 	andi	r7,r7,65535
    e928:	e4b9883a 	add	fp,fp,r18
    e92c:	21cf883a 	add	r7,r4,r7
    e930:	e4e7803a 	cmpltu	r19,fp,r19
    e934:	3d0f883a 	add	r7,r7,r20
    e938:	bf39883a 	add	fp,r23,fp
    e93c:	99c9883a 	add	r4,r19,r7
    e940:	e5ef803a 	cmpltu	r23,fp,r23
    e944:	490b883a 	add	r5,r9,r4
    e948:	1004d43a 	srli	r2,r2,16
    e94c:	b965883a 	add	r18,r23,r5
    e950:	24c9803a 	cmpltu	r4,r4,r19
    e954:	3d29803a 	cmpltu	r20,r7,r20
    e958:	a128b03a 	or	r20,r20,r4
    e95c:	95ef803a 	cmpltu	r23,r18,r23
    e960:	2a53803a 	cmpltu	r9,r5,r9
    e964:	a0a9883a 	add	r20,r20,r2
    e968:	4deeb03a 	or	r23,r9,r23
    e96c:	a5ef883a 	add	r23,r20,r23
    e970:	bc63883a 	add	r17,r23,r17
    e974:	e004927a 	slli	r2,fp,9
    e978:	d9000117 	ldw	r4,4(sp)
    e97c:	882e927a 	slli	r23,r17,9
    e980:	9022d5fa 	srli	r17,r18,23
    e984:	e038d5fa 	srli	fp,fp,23
    e988:	1104b03a 	or	r2,r2,r4
    e98c:	9024927a 	slli	r18,r18,9
    e990:	1004c03a 	cmpne	r2,r2,zero
    e994:	bc62b03a 	or	r17,r23,r17
    e998:	1738b03a 	or	fp,r2,fp
    e99c:	8880402c 	andhi	r2,r17,256
    e9a0:	e4a4b03a 	or	r18,fp,r18
    e9a4:	10000726 	beq	r2,zero,e9c4 <__muldf3+0x628>
    e9a8:	9006d07a 	srli	r3,r18,1
    e9ac:	880497fa 	slli	r2,r17,31
    e9b0:	9480004c 	andi	r18,r18,1
    e9b4:	8822d07a 	srli	r17,r17,1
    e9b8:	1ca4b03a 	or	r18,r3,r18
    e9bc:	14a4b03a 	or	r18,r2,r18
    e9c0:	4007883a 	mov	r3,r8
    e9c4:	1880ffc4 	addi	r2,r3,1023
    e9c8:	0080460e 	bge	zero,r2,eae4 <__muldf3+0x748>
    e9cc:	910001cc 	andi	r4,r18,7
    e9d0:	20000726 	beq	r4,zero,e9f0 <__muldf3+0x654>
    e9d4:	910003cc 	andi	r4,r18,15
    e9d8:	01400104 	movi	r5,4
    e9dc:	21400426 	beq	r4,r5,e9f0 <__muldf3+0x654>
    e9e0:	9149883a 	add	r4,r18,r5
    e9e4:	24a5803a 	cmpltu	r18,r4,r18
    e9e8:	8ca3883a 	add	r17,r17,r18
    e9ec:	2025883a 	mov	r18,r4
    e9f0:	8900402c 	andhi	r4,r17,256
    e9f4:	20000426 	beq	r4,zero,ea08 <__muldf3+0x66c>
    e9f8:	18810004 	addi	r2,r3,1024
    e9fc:	00ffc034 	movhi	r3,65280
    ea00:	18ffffc4 	addi	r3,r3,-1
    ea04:	88e2703a 	and	r17,r17,r3
    ea08:	00c1ff84 	movi	r3,2046
    ea0c:	18bf1316 	blt	r3,r2,e65c <__alt_exception_stack_pointer+0xf800e65c>
    ea10:	882c977a 	slli	r22,r17,29
    ea14:	9024d0fa 	srli	r18,r18,3
    ea18:	8822927a 	slli	r17,r17,9
    ea1c:	1081ffcc 	andi	r2,r2,2047
    ea20:	b4acb03a 	or	r22,r22,r18
    ea24:	8820d33a 	srli	r16,r17,12
    ea28:	3027883a 	mov	r19,r6
    ea2c:	003eba06 	br	e518 <__alt_exception_stack_pointer+0xf800e518>
    ea30:	8080022c 	andhi	r2,r16,8
    ea34:	10000926 	beq	r2,zero,ea5c <__muldf3+0x6c0>
    ea38:	8880022c 	andhi	r2,r17,8
    ea3c:	1000071e 	bne	r2,zero,ea5c <__muldf3+0x6c0>
    ea40:	00800434 	movhi	r2,16
    ea44:	8c000234 	orhi	r16,r17,8
    ea48:	10bfffc4 	addi	r2,r2,-1
    ea4c:	e027883a 	mov	r19,fp
    ea50:	80a0703a 	and	r16,r16,r2
    ea54:	902d883a 	mov	r22,r18
    ea58:	003f1706 	br	e6b8 <__alt_exception_stack_pointer+0xf800e6b8>
    ea5c:	00800434 	movhi	r2,16
    ea60:	84000234 	orhi	r16,r16,8
    ea64:	10bfffc4 	addi	r2,r2,-1
    ea68:	80a0703a 	and	r16,r16,r2
    ea6c:	003f1206 	br	e6b8 <__alt_exception_stack_pointer+0xf800e6b8>
    ea70:	147ff604 	addi	r17,r2,-40
    ea74:	3462983a 	sll	r17,r6,r17
    ea78:	0025883a 	mov	r18,zero
    ea7c:	003ef306 	br	e64c <__alt_exception_stack_pointer+0xf800e64c>
    ea80:	3009883a 	mov	r4,r6
    ea84:	d9400215 	stw	r5,8(sp)
    ea88:	d9800715 	stw	r6,28(sp)
    ea8c:	da400415 	stw	r9,16(sp)
    ea90:	da800315 	stw	r10,12(sp)
    ea94:	000f7080 	call	f708 <__clzsi2>
    ea98:	10800804 	addi	r2,r2,32
    ea9c:	da800317 	ldw	r10,12(sp)
    eaa0:	da400417 	ldw	r9,16(sp)
    eaa4:	d9800717 	ldw	r6,28(sp)
    eaa8:	d9400217 	ldw	r5,8(sp)
    eaac:	003edd06 	br	e624 <__alt_exception_stack_pointer+0xf800e624>
    eab0:	143ff604 	addi	r16,r2,-40
    eab4:	ac20983a 	sll	r16,r21,r16
    eab8:	002d883a 	mov	r22,zero
    eabc:	003ec106 	br	e5c4 <__alt_exception_stack_pointer+0xf800e5c4>
    eac0:	d9800715 	stw	r6,28(sp)
    eac4:	d9c00215 	stw	r7,8(sp)
    eac8:	da400415 	stw	r9,16(sp)
    eacc:	000f7080 	call	f708 <__clzsi2>
    ead0:	10800804 	addi	r2,r2,32
    ead4:	da400417 	ldw	r9,16(sp)
    ead8:	d9c00217 	ldw	r7,8(sp)
    eadc:	d9800717 	ldw	r6,28(sp)
    eae0:	003eae06 	br	e59c <__alt_exception_stack_pointer+0xf800e59c>
    eae4:	00c00044 	movi	r3,1
    eae8:	1887c83a 	sub	r3,r3,r2
    eaec:	01000e04 	movi	r4,56
    eaf0:	20fe8516 	blt	r4,r3,e508 <__alt_exception_stack_pointer+0xf800e508>
    eaf4:	010007c4 	movi	r4,31
    eaf8:	20c01b16 	blt	r4,r3,eb68 <__muldf3+0x7cc>
    eafc:	00800804 	movi	r2,32
    eb00:	10c5c83a 	sub	r2,r2,r3
    eb04:	888a983a 	sll	r5,r17,r2
    eb08:	90c8d83a 	srl	r4,r18,r3
    eb0c:	9084983a 	sll	r2,r18,r2
    eb10:	88e2d83a 	srl	r17,r17,r3
    eb14:	2906b03a 	or	r3,r5,r4
    eb18:	1004c03a 	cmpne	r2,r2,zero
    eb1c:	1886b03a 	or	r3,r3,r2
    eb20:	188001cc 	andi	r2,r3,7
    eb24:	10000726 	beq	r2,zero,eb44 <__muldf3+0x7a8>
    eb28:	188003cc 	andi	r2,r3,15
    eb2c:	01000104 	movi	r4,4
    eb30:	11000426 	beq	r2,r4,eb44 <__muldf3+0x7a8>
    eb34:	1805883a 	mov	r2,r3
    eb38:	10c00104 	addi	r3,r2,4
    eb3c:	1885803a 	cmpltu	r2,r3,r2
    eb40:	88a3883a 	add	r17,r17,r2
    eb44:	8880202c 	andhi	r2,r17,128
    eb48:	10001c26 	beq	r2,zero,ebbc <__muldf3+0x820>
    eb4c:	3027883a 	mov	r19,r6
    eb50:	00800044 	movi	r2,1
    eb54:	0021883a 	mov	r16,zero
    eb58:	002d883a 	mov	r22,zero
    eb5c:	003e6e06 	br	e518 <__alt_exception_stack_pointer+0xf800e518>
    eb60:	4007883a 	mov	r3,r8
    eb64:	003f9706 	br	e9c4 <__alt_exception_stack_pointer+0xf800e9c4>
    eb68:	017ff844 	movi	r5,-31
    eb6c:	2885c83a 	sub	r2,r5,r2
    eb70:	888ad83a 	srl	r5,r17,r2
    eb74:	00800804 	movi	r2,32
    eb78:	18801a26 	beq	r3,r2,ebe4 <__muldf3+0x848>
    eb7c:	01001004 	movi	r4,64
    eb80:	20c7c83a 	sub	r3,r4,r3
    eb84:	88e2983a 	sll	r17,r17,r3
    eb88:	8ca4b03a 	or	r18,r17,r18
    eb8c:	9004c03a 	cmpne	r2,r18,zero
    eb90:	2884b03a 	or	r2,r5,r2
    eb94:	144001cc 	andi	r17,r2,7
    eb98:	88000d1e 	bne	r17,zero,ebd0 <__muldf3+0x834>
    eb9c:	0021883a 	mov	r16,zero
    eba0:	102cd0fa 	srli	r22,r2,3
    eba4:	3027883a 	mov	r19,r6
    eba8:	0005883a 	mov	r2,zero
    ebac:	b46cb03a 	or	r22,r22,r17
    ebb0:	003e5906 	br	e518 <__alt_exception_stack_pointer+0xf800e518>
    ebb4:	1007883a 	mov	r3,r2
    ebb8:	0023883a 	mov	r17,zero
    ebbc:	8820927a 	slli	r16,r17,9
    ebc0:	1805883a 	mov	r2,r3
    ebc4:	8822977a 	slli	r17,r17,29
    ebc8:	8020d33a 	srli	r16,r16,12
    ebcc:	003ff406 	br	eba0 <__alt_exception_stack_pointer+0xf800eba0>
    ebd0:	10c003cc 	andi	r3,r2,15
    ebd4:	01000104 	movi	r4,4
    ebd8:	193ff626 	beq	r3,r4,ebb4 <__alt_exception_stack_pointer+0xf800ebb4>
    ebdc:	0023883a 	mov	r17,zero
    ebe0:	003fd506 	br	eb38 <__alt_exception_stack_pointer+0xf800eb38>
    ebe4:	0023883a 	mov	r17,zero
    ebe8:	003fe706 	br	eb88 <__alt_exception_stack_pointer+0xf800eb88>
    ebec:	00800434 	movhi	r2,16
    ebf0:	8c000234 	orhi	r16,r17,8
    ebf4:	10bfffc4 	addi	r2,r2,-1
    ebf8:	3027883a 	mov	r19,r6
    ebfc:	80a0703a 	and	r16,r16,r2
    ec00:	902d883a 	mov	r22,r18
    ec04:	003eac06 	br	e6b8 <__alt_exception_stack_pointer+0xf800e6b8>

0000ec08 <__subdf3>:
    ec08:	02000434 	movhi	r8,16
    ec0c:	423fffc4 	addi	r8,r8,-1
    ec10:	defffb04 	addi	sp,sp,-20
    ec14:	2a14703a 	and	r10,r5,r8
    ec18:	3812d53a 	srli	r9,r7,20
    ec1c:	3a10703a 	and	r8,r7,r8
    ec20:	2006d77a 	srli	r3,r4,29
    ec24:	3004d77a 	srli	r2,r6,29
    ec28:	dc000015 	stw	r16,0(sp)
    ec2c:	501490fa 	slli	r10,r10,3
    ec30:	2820d53a 	srli	r16,r5,20
    ec34:	401090fa 	slli	r8,r8,3
    ec38:	dc800215 	stw	r18,8(sp)
    ec3c:	dc400115 	stw	r17,4(sp)
    ec40:	dfc00415 	stw	ra,16(sp)
    ec44:	202290fa 	slli	r17,r4,3
    ec48:	dcc00315 	stw	r19,12(sp)
    ec4c:	4a41ffcc 	andi	r9,r9,2047
    ec50:	0101ffc4 	movi	r4,2047
    ec54:	2824d7fa 	srli	r18,r5,31
    ec58:	8401ffcc 	andi	r16,r16,2047
    ec5c:	50c6b03a 	or	r3,r10,r3
    ec60:	380ed7fa 	srli	r7,r7,31
    ec64:	408ab03a 	or	r5,r8,r2
    ec68:	300c90fa 	slli	r6,r6,3
    ec6c:	49009626 	beq	r9,r4,eec8 <__subdf3+0x2c0>
    ec70:	39c0005c 	xori	r7,r7,1
    ec74:	8245c83a 	sub	r2,r16,r9
    ec78:	3c807426 	beq	r7,r18,ee4c <__subdf3+0x244>
    ec7c:	0080af0e 	bge	zero,r2,ef3c <__subdf3+0x334>
    ec80:	48002a1e 	bne	r9,zero,ed2c <__subdf3+0x124>
    ec84:	2988b03a 	or	r4,r5,r6
    ec88:	20009a1e 	bne	r4,zero,eef4 <__subdf3+0x2ec>
    ec8c:	888001cc 	andi	r2,r17,7
    ec90:	10000726 	beq	r2,zero,ecb0 <__subdf3+0xa8>
    ec94:	888003cc 	andi	r2,r17,15
    ec98:	01000104 	movi	r4,4
    ec9c:	11000426 	beq	r2,r4,ecb0 <__subdf3+0xa8>
    eca0:	890b883a 	add	r5,r17,r4
    eca4:	2c63803a 	cmpltu	r17,r5,r17
    eca8:	1c47883a 	add	r3,r3,r17
    ecac:	2823883a 	mov	r17,r5
    ecb0:	1880202c 	andhi	r2,r3,128
    ecb4:	10005926 	beq	r2,zero,ee1c <__subdf3+0x214>
    ecb8:	84000044 	addi	r16,r16,1
    ecbc:	0081ffc4 	movi	r2,2047
    ecc0:	8080be26 	beq	r16,r2,efbc <__subdf3+0x3b4>
    ecc4:	017fe034 	movhi	r5,65408
    ecc8:	297fffc4 	addi	r5,r5,-1
    eccc:	1946703a 	and	r3,r3,r5
    ecd0:	1804977a 	slli	r2,r3,29
    ecd4:	1806927a 	slli	r3,r3,9
    ecd8:	8822d0fa 	srli	r17,r17,3
    ecdc:	8401ffcc 	andi	r16,r16,2047
    ece0:	180ad33a 	srli	r5,r3,12
    ece4:	9100004c 	andi	r4,r18,1
    ece8:	1444b03a 	or	r2,r2,r17
    ecec:	80c1ffcc 	andi	r3,r16,2047
    ecf0:	1820953a 	slli	r16,r3,20
    ecf4:	20c03fcc 	andi	r3,r4,255
    ecf8:	180897fa 	slli	r4,r3,31
    ecfc:	00c00434 	movhi	r3,16
    ed00:	18ffffc4 	addi	r3,r3,-1
    ed04:	28c6703a 	and	r3,r5,r3
    ed08:	1c06b03a 	or	r3,r3,r16
    ed0c:	1906b03a 	or	r3,r3,r4
    ed10:	dfc00417 	ldw	ra,16(sp)
    ed14:	dcc00317 	ldw	r19,12(sp)
    ed18:	dc800217 	ldw	r18,8(sp)
    ed1c:	dc400117 	ldw	r17,4(sp)
    ed20:	dc000017 	ldw	r16,0(sp)
    ed24:	dec00504 	addi	sp,sp,20
    ed28:	f800283a 	ret
    ed2c:	0101ffc4 	movi	r4,2047
    ed30:	813fd626 	beq	r16,r4,ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    ed34:	29402034 	orhi	r5,r5,128
    ed38:	01000e04 	movi	r4,56
    ed3c:	2080a316 	blt	r4,r2,efcc <__subdf3+0x3c4>
    ed40:	010007c4 	movi	r4,31
    ed44:	2080c616 	blt	r4,r2,f060 <__subdf3+0x458>
    ed48:	01000804 	movi	r4,32
    ed4c:	2089c83a 	sub	r4,r4,r2
    ed50:	2910983a 	sll	r8,r5,r4
    ed54:	308ed83a 	srl	r7,r6,r2
    ed58:	3108983a 	sll	r4,r6,r4
    ed5c:	2884d83a 	srl	r2,r5,r2
    ed60:	41ccb03a 	or	r6,r8,r7
    ed64:	2008c03a 	cmpne	r4,r4,zero
    ed68:	310cb03a 	or	r6,r6,r4
    ed6c:	898dc83a 	sub	r6,r17,r6
    ed70:	89a3803a 	cmpltu	r17,r17,r6
    ed74:	1887c83a 	sub	r3,r3,r2
    ed78:	1c47c83a 	sub	r3,r3,r17
    ed7c:	3023883a 	mov	r17,r6
    ed80:	1880202c 	andhi	r2,r3,128
    ed84:	10002326 	beq	r2,zero,ee14 <__subdf3+0x20c>
    ed88:	04c02034 	movhi	r19,128
    ed8c:	9cffffc4 	addi	r19,r19,-1
    ed90:	1ce6703a 	and	r19,r3,r19
    ed94:	98007a26 	beq	r19,zero,ef80 <__subdf3+0x378>
    ed98:	9809883a 	mov	r4,r19
    ed9c:	000f7080 	call	f708 <__clzsi2>
    eda0:	113ffe04 	addi	r4,r2,-8
    eda4:	00c007c4 	movi	r3,31
    eda8:	19007b16 	blt	r3,r4,ef98 <__subdf3+0x390>
    edac:	00800804 	movi	r2,32
    edb0:	1105c83a 	sub	r2,r2,r4
    edb4:	8884d83a 	srl	r2,r17,r2
    edb8:	9906983a 	sll	r3,r19,r4
    edbc:	8922983a 	sll	r17,r17,r4
    edc0:	10c4b03a 	or	r2,r2,r3
    edc4:	24007816 	blt	r4,r16,efa8 <__subdf3+0x3a0>
    edc8:	2421c83a 	sub	r16,r4,r16
    edcc:	80c00044 	addi	r3,r16,1
    edd0:	010007c4 	movi	r4,31
    edd4:	20c09516 	blt	r4,r3,f02c <__subdf3+0x424>
    edd8:	01400804 	movi	r5,32
    eddc:	28cbc83a 	sub	r5,r5,r3
    ede0:	88c8d83a 	srl	r4,r17,r3
    ede4:	8962983a 	sll	r17,r17,r5
    ede8:	114a983a 	sll	r5,r2,r5
    edec:	10c6d83a 	srl	r3,r2,r3
    edf0:	8804c03a 	cmpne	r2,r17,zero
    edf4:	290ab03a 	or	r5,r5,r4
    edf8:	28a2b03a 	or	r17,r5,r2
    edfc:	0021883a 	mov	r16,zero
    ee00:	003fa206 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    ee04:	2090b03a 	or	r8,r4,r2
    ee08:	40018e26 	beq	r8,zero,f444 <__subdf3+0x83c>
    ee0c:	1007883a 	mov	r3,r2
    ee10:	2023883a 	mov	r17,r4
    ee14:	888001cc 	andi	r2,r17,7
    ee18:	103f9e1e 	bne	r2,zero,ec94 <__alt_exception_stack_pointer+0xf800ec94>
    ee1c:	1804977a 	slli	r2,r3,29
    ee20:	8822d0fa 	srli	r17,r17,3
    ee24:	1810d0fa 	srli	r8,r3,3
    ee28:	9100004c 	andi	r4,r18,1
    ee2c:	1444b03a 	or	r2,r2,r17
    ee30:	00c1ffc4 	movi	r3,2047
    ee34:	80c02826 	beq	r16,r3,eed8 <__subdf3+0x2d0>
    ee38:	01400434 	movhi	r5,16
    ee3c:	297fffc4 	addi	r5,r5,-1
    ee40:	80e0703a 	and	r16,r16,r3
    ee44:	414a703a 	and	r5,r8,r5
    ee48:	003fa806 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    ee4c:	0080630e 	bge	zero,r2,efdc <__subdf3+0x3d4>
    ee50:	48003026 	beq	r9,zero,ef14 <__subdf3+0x30c>
    ee54:	0101ffc4 	movi	r4,2047
    ee58:	813f8c26 	beq	r16,r4,ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    ee5c:	29402034 	orhi	r5,r5,128
    ee60:	01000e04 	movi	r4,56
    ee64:	2080a90e 	bge	r4,r2,f10c <__subdf3+0x504>
    ee68:	298cb03a 	or	r6,r5,r6
    ee6c:	3012c03a 	cmpne	r9,r6,zero
    ee70:	0005883a 	mov	r2,zero
    ee74:	4c53883a 	add	r9,r9,r17
    ee78:	4c63803a 	cmpltu	r17,r9,r17
    ee7c:	10c7883a 	add	r3,r2,r3
    ee80:	88c7883a 	add	r3,r17,r3
    ee84:	4823883a 	mov	r17,r9
    ee88:	1880202c 	andhi	r2,r3,128
    ee8c:	1000d026 	beq	r2,zero,f1d0 <__subdf3+0x5c8>
    ee90:	84000044 	addi	r16,r16,1
    ee94:	0081ffc4 	movi	r2,2047
    ee98:	8080fe26 	beq	r16,r2,f294 <__subdf3+0x68c>
    ee9c:	00bfe034 	movhi	r2,65408
    eea0:	10bfffc4 	addi	r2,r2,-1
    eea4:	1886703a 	and	r3,r3,r2
    eea8:	880ad07a 	srli	r5,r17,1
    eeac:	180497fa 	slli	r2,r3,31
    eeb0:	8900004c 	andi	r4,r17,1
    eeb4:	2922b03a 	or	r17,r5,r4
    eeb8:	1806d07a 	srli	r3,r3,1
    eebc:	1462b03a 	or	r17,r2,r17
    eec0:	3825883a 	mov	r18,r7
    eec4:	003f7106 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    eec8:	2984b03a 	or	r2,r5,r6
    eecc:	103f6826 	beq	r2,zero,ec70 <__alt_exception_stack_pointer+0xf800ec70>
    eed0:	39c03fcc 	andi	r7,r7,255
    eed4:	003f6706 	br	ec74 <__alt_exception_stack_pointer+0xf800ec74>
    eed8:	4086b03a 	or	r3,r8,r2
    eedc:	18015226 	beq	r3,zero,f428 <__subdf3+0x820>
    eee0:	00c00434 	movhi	r3,16
    eee4:	41400234 	orhi	r5,r8,8
    eee8:	18ffffc4 	addi	r3,r3,-1
    eeec:	28ca703a 	and	r5,r5,r3
    eef0:	003f7e06 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    eef4:	10bfffc4 	addi	r2,r2,-1
    eef8:	1000491e 	bne	r2,zero,f020 <__subdf3+0x418>
    eefc:	898fc83a 	sub	r7,r17,r6
    ef00:	89e3803a 	cmpltu	r17,r17,r7
    ef04:	1947c83a 	sub	r3,r3,r5
    ef08:	1c47c83a 	sub	r3,r3,r17
    ef0c:	3823883a 	mov	r17,r7
    ef10:	003f9b06 	br	ed80 <__alt_exception_stack_pointer+0xf800ed80>
    ef14:	2988b03a 	or	r4,r5,r6
    ef18:	203f5c26 	beq	r4,zero,ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    ef1c:	10bfffc4 	addi	r2,r2,-1
    ef20:	1000931e 	bne	r2,zero,f170 <__subdf3+0x568>
    ef24:	898d883a 	add	r6,r17,r6
    ef28:	3463803a 	cmpltu	r17,r6,r17
    ef2c:	1947883a 	add	r3,r3,r5
    ef30:	88c7883a 	add	r3,r17,r3
    ef34:	3023883a 	mov	r17,r6
    ef38:	003fd306 	br	ee88 <__alt_exception_stack_pointer+0xf800ee88>
    ef3c:	1000541e 	bne	r2,zero,f090 <__subdf3+0x488>
    ef40:	80800044 	addi	r2,r16,1
    ef44:	1081ffcc 	andi	r2,r2,2047
    ef48:	01000044 	movi	r4,1
    ef4c:	2080a20e 	bge	r4,r2,f1d8 <__subdf3+0x5d0>
    ef50:	8989c83a 	sub	r4,r17,r6
    ef54:	8905803a 	cmpltu	r2,r17,r4
    ef58:	1967c83a 	sub	r19,r3,r5
    ef5c:	98a7c83a 	sub	r19,r19,r2
    ef60:	9880202c 	andhi	r2,r19,128
    ef64:	10006326 	beq	r2,zero,f0f4 <__subdf3+0x4ec>
    ef68:	3463c83a 	sub	r17,r6,r17
    ef6c:	28c7c83a 	sub	r3,r5,r3
    ef70:	344d803a 	cmpltu	r6,r6,r17
    ef74:	19a7c83a 	sub	r19,r3,r6
    ef78:	3825883a 	mov	r18,r7
    ef7c:	983f861e 	bne	r19,zero,ed98 <__alt_exception_stack_pointer+0xf800ed98>
    ef80:	8809883a 	mov	r4,r17
    ef84:	000f7080 	call	f708 <__clzsi2>
    ef88:	10800804 	addi	r2,r2,32
    ef8c:	113ffe04 	addi	r4,r2,-8
    ef90:	00c007c4 	movi	r3,31
    ef94:	193f850e 	bge	r3,r4,edac <__alt_exception_stack_pointer+0xf800edac>
    ef98:	10bff604 	addi	r2,r2,-40
    ef9c:	8884983a 	sll	r2,r17,r2
    efa0:	0023883a 	mov	r17,zero
    efa4:	243f880e 	bge	r4,r16,edc8 <__alt_exception_stack_pointer+0xf800edc8>
    efa8:	00ffe034 	movhi	r3,65408
    efac:	18ffffc4 	addi	r3,r3,-1
    efb0:	8121c83a 	sub	r16,r16,r4
    efb4:	10c6703a 	and	r3,r2,r3
    efb8:	003f3406 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    efbc:	9100004c 	andi	r4,r18,1
    efc0:	000b883a 	mov	r5,zero
    efc4:	0005883a 	mov	r2,zero
    efc8:	003f4806 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    efcc:	298cb03a 	or	r6,r5,r6
    efd0:	300cc03a 	cmpne	r6,r6,zero
    efd4:	0005883a 	mov	r2,zero
    efd8:	003f6406 	br	ed6c <__alt_exception_stack_pointer+0xf800ed6c>
    efdc:	10009a1e 	bne	r2,zero,f248 <__subdf3+0x640>
    efe0:	82400044 	addi	r9,r16,1
    efe4:	4881ffcc 	andi	r2,r9,2047
    efe8:	02800044 	movi	r10,1
    efec:	5080670e 	bge	r10,r2,f18c <__subdf3+0x584>
    eff0:	0081ffc4 	movi	r2,2047
    eff4:	4880af26 	beq	r9,r2,f2b4 <__subdf3+0x6ac>
    eff8:	898d883a 	add	r6,r17,r6
    effc:	1945883a 	add	r2,r3,r5
    f000:	3447803a 	cmpltu	r3,r6,r17
    f004:	1887883a 	add	r3,r3,r2
    f008:	182297fa 	slli	r17,r3,31
    f00c:	300cd07a 	srli	r6,r6,1
    f010:	1806d07a 	srli	r3,r3,1
    f014:	4821883a 	mov	r16,r9
    f018:	89a2b03a 	or	r17,r17,r6
    f01c:	003f1b06 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f020:	0101ffc4 	movi	r4,2047
    f024:	813f441e 	bne	r16,r4,ed38 <__alt_exception_stack_pointer+0xf800ed38>
    f028:	003f1806 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f02c:	843ff844 	addi	r16,r16,-31
    f030:	01400804 	movi	r5,32
    f034:	1408d83a 	srl	r4,r2,r16
    f038:	19405026 	beq	r3,r5,f17c <__subdf3+0x574>
    f03c:	01401004 	movi	r5,64
    f040:	28c7c83a 	sub	r3,r5,r3
    f044:	10c4983a 	sll	r2,r2,r3
    f048:	88a2b03a 	or	r17,r17,r2
    f04c:	8822c03a 	cmpne	r17,r17,zero
    f050:	2462b03a 	or	r17,r4,r17
    f054:	0007883a 	mov	r3,zero
    f058:	0021883a 	mov	r16,zero
    f05c:	003f6d06 	br	ee14 <__alt_exception_stack_pointer+0xf800ee14>
    f060:	11fff804 	addi	r7,r2,-32
    f064:	01000804 	movi	r4,32
    f068:	29ced83a 	srl	r7,r5,r7
    f06c:	11004526 	beq	r2,r4,f184 <__subdf3+0x57c>
    f070:	01001004 	movi	r4,64
    f074:	2089c83a 	sub	r4,r4,r2
    f078:	2904983a 	sll	r2,r5,r4
    f07c:	118cb03a 	or	r6,r2,r6
    f080:	300cc03a 	cmpne	r6,r6,zero
    f084:	398cb03a 	or	r6,r7,r6
    f088:	0005883a 	mov	r2,zero
    f08c:	003f3706 	br	ed6c <__alt_exception_stack_pointer+0xf800ed6c>
    f090:	80002a26 	beq	r16,zero,f13c <__subdf3+0x534>
    f094:	0101ffc4 	movi	r4,2047
    f098:	49006626 	beq	r9,r4,f234 <__subdf3+0x62c>
    f09c:	0085c83a 	sub	r2,zero,r2
    f0a0:	18c02034 	orhi	r3,r3,128
    f0a4:	01000e04 	movi	r4,56
    f0a8:	20807e16 	blt	r4,r2,f2a4 <__subdf3+0x69c>
    f0ac:	010007c4 	movi	r4,31
    f0b0:	2080e716 	blt	r4,r2,f450 <__subdf3+0x848>
    f0b4:	01000804 	movi	r4,32
    f0b8:	2089c83a 	sub	r4,r4,r2
    f0bc:	1914983a 	sll	r10,r3,r4
    f0c0:	8890d83a 	srl	r8,r17,r2
    f0c4:	8908983a 	sll	r4,r17,r4
    f0c8:	1884d83a 	srl	r2,r3,r2
    f0cc:	5222b03a 	or	r17,r10,r8
    f0d0:	2006c03a 	cmpne	r3,r4,zero
    f0d4:	88e2b03a 	or	r17,r17,r3
    f0d8:	3463c83a 	sub	r17,r6,r17
    f0dc:	2885c83a 	sub	r2,r5,r2
    f0e0:	344d803a 	cmpltu	r6,r6,r17
    f0e4:	1187c83a 	sub	r3,r2,r6
    f0e8:	4821883a 	mov	r16,r9
    f0ec:	3825883a 	mov	r18,r7
    f0f0:	003f2306 	br	ed80 <__alt_exception_stack_pointer+0xf800ed80>
    f0f4:	24d0b03a 	or	r8,r4,r19
    f0f8:	40001b1e 	bne	r8,zero,f168 <__subdf3+0x560>
    f0fc:	0005883a 	mov	r2,zero
    f100:	0009883a 	mov	r4,zero
    f104:	0021883a 	mov	r16,zero
    f108:	003f4906 	br	ee30 <__alt_exception_stack_pointer+0xf800ee30>
    f10c:	010007c4 	movi	r4,31
    f110:	20803a16 	blt	r4,r2,f1fc <__subdf3+0x5f4>
    f114:	01000804 	movi	r4,32
    f118:	2089c83a 	sub	r4,r4,r2
    f11c:	2912983a 	sll	r9,r5,r4
    f120:	3090d83a 	srl	r8,r6,r2
    f124:	3108983a 	sll	r4,r6,r4
    f128:	2884d83a 	srl	r2,r5,r2
    f12c:	4a12b03a 	or	r9,r9,r8
    f130:	2008c03a 	cmpne	r4,r4,zero
    f134:	4912b03a 	or	r9,r9,r4
    f138:	003f4e06 	br	ee74 <__alt_exception_stack_pointer+0xf800ee74>
    f13c:	1c48b03a 	or	r4,r3,r17
    f140:	20003c26 	beq	r4,zero,f234 <__subdf3+0x62c>
    f144:	0084303a 	nor	r2,zero,r2
    f148:	1000381e 	bne	r2,zero,f22c <__subdf3+0x624>
    f14c:	3463c83a 	sub	r17,r6,r17
    f150:	28c5c83a 	sub	r2,r5,r3
    f154:	344d803a 	cmpltu	r6,r6,r17
    f158:	1187c83a 	sub	r3,r2,r6
    f15c:	4821883a 	mov	r16,r9
    f160:	3825883a 	mov	r18,r7
    f164:	003f0606 	br	ed80 <__alt_exception_stack_pointer+0xf800ed80>
    f168:	2023883a 	mov	r17,r4
    f16c:	003f0906 	br	ed94 <__alt_exception_stack_pointer+0xf800ed94>
    f170:	0101ffc4 	movi	r4,2047
    f174:	813f3a1e 	bne	r16,r4,ee60 <__alt_exception_stack_pointer+0xf800ee60>
    f178:	003ec406 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f17c:	0005883a 	mov	r2,zero
    f180:	003fb106 	br	f048 <__alt_exception_stack_pointer+0xf800f048>
    f184:	0005883a 	mov	r2,zero
    f188:	003fbc06 	br	f07c <__alt_exception_stack_pointer+0xf800f07c>
    f18c:	1c44b03a 	or	r2,r3,r17
    f190:	80008e1e 	bne	r16,zero,f3cc <__subdf3+0x7c4>
    f194:	1000c826 	beq	r2,zero,f4b8 <__subdf3+0x8b0>
    f198:	2984b03a 	or	r2,r5,r6
    f19c:	103ebb26 	beq	r2,zero,ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f1a0:	8989883a 	add	r4,r17,r6
    f1a4:	1945883a 	add	r2,r3,r5
    f1a8:	2447803a 	cmpltu	r3,r4,r17
    f1ac:	1887883a 	add	r3,r3,r2
    f1b0:	1880202c 	andhi	r2,r3,128
    f1b4:	2023883a 	mov	r17,r4
    f1b8:	103f1626 	beq	r2,zero,ee14 <__alt_exception_stack_pointer+0xf800ee14>
    f1bc:	00bfe034 	movhi	r2,65408
    f1c0:	10bfffc4 	addi	r2,r2,-1
    f1c4:	5021883a 	mov	r16,r10
    f1c8:	1886703a 	and	r3,r3,r2
    f1cc:	003eaf06 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f1d0:	3825883a 	mov	r18,r7
    f1d4:	003f0f06 	br	ee14 <__alt_exception_stack_pointer+0xf800ee14>
    f1d8:	1c44b03a 	or	r2,r3,r17
    f1dc:	8000251e 	bne	r16,zero,f274 <__subdf3+0x66c>
    f1e0:	1000661e 	bne	r2,zero,f37c <__subdf3+0x774>
    f1e4:	2990b03a 	or	r8,r5,r6
    f1e8:	40009626 	beq	r8,zero,f444 <__subdf3+0x83c>
    f1ec:	2807883a 	mov	r3,r5
    f1f0:	3023883a 	mov	r17,r6
    f1f4:	3825883a 	mov	r18,r7
    f1f8:	003ea406 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f1fc:	127ff804 	addi	r9,r2,-32
    f200:	01000804 	movi	r4,32
    f204:	2a52d83a 	srl	r9,r5,r9
    f208:	11008c26 	beq	r2,r4,f43c <__subdf3+0x834>
    f20c:	01001004 	movi	r4,64
    f210:	2085c83a 	sub	r2,r4,r2
    f214:	2884983a 	sll	r2,r5,r2
    f218:	118cb03a 	or	r6,r2,r6
    f21c:	300cc03a 	cmpne	r6,r6,zero
    f220:	4992b03a 	or	r9,r9,r6
    f224:	0005883a 	mov	r2,zero
    f228:	003f1206 	br	ee74 <__alt_exception_stack_pointer+0xf800ee74>
    f22c:	0101ffc4 	movi	r4,2047
    f230:	493f9c1e 	bne	r9,r4,f0a4 <__alt_exception_stack_pointer+0xf800f0a4>
    f234:	2807883a 	mov	r3,r5
    f238:	3023883a 	mov	r17,r6
    f23c:	4821883a 	mov	r16,r9
    f240:	3825883a 	mov	r18,r7
    f244:	003e9106 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f248:	80001f1e 	bne	r16,zero,f2c8 <__subdf3+0x6c0>
    f24c:	1c48b03a 	or	r4,r3,r17
    f250:	20005a26 	beq	r4,zero,f3bc <__subdf3+0x7b4>
    f254:	0084303a 	nor	r2,zero,r2
    f258:	1000561e 	bne	r2,zero,f3b4 <__subdf3+0x7ac>
    f25c:	89a3883a 	add	r17,r17,r6
    f260:	1945883a 	add	r2,r3,r5
    f264:	898d803a 	cmpltu	r6,r17,r6
    f268:	3087883a 	add	r3,r6,r2
    f26c:	4821883a 	mov	r16,r9
    f270:	003f0506 	br	ee88 <__alt_exception_stack_pointer+0xf800ee88>
    f274:	10002b1e 	bne	r2,zero,f324 <__subdf3+0x71c>
    f278:	2984b03a 	or	r2,r5,r6
    f27c:	10008026 	beq	r2,zero,f480 <__subdf3+0x878>
    f280:	2807883a 	mov	r3,r5
    f284:	3023883a 	mov	r17,r6
    f288:	3825883a 	mov	r18,r7
    f28c:	0401ffc4 	movi	r16,2047
    f290:	003e7e06 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f294:	3809883a 	mov	r4,r7
    f298:	0011883a 	mov	r8,zero
    f29c:	0005883a 	mov	r2,zero
    f2a0:	003ee306 	br	ee30 <__alt_exception_stack_pointer+0xf800ee30>
    f2a4:	1c62b03a 	or	r17,r3,r17
    f2a8:	8822c03a 	cmpne	r17,r17,zero
    f2ac:	0005883a 	mov	r2,zero
    f2b0:	003f8906 	br	f0d8 <__alt_exception_stack_pointer+0xf800f0d8>
    f2b4:	3809883a 	mov	r4,r7
    f2b8:	4821883a 	mov	r16,r9
    f2bc:	0011883a 	mov	r8,zero
    f2c0:	0005883a 	mov	r2,zero
    f2c4:	003eda06 	br	ee30 <__alt_exception_stack_pointer+0xf800ee30>
    f2c8:	0101ffc4 	movi	r4,2047
    f2cc:	49003b26 	beq	r9,r4,f3bc <__subdf3+0x7b4>
    f2d0:	0085c83a 	sub	r2,zero,r2
    f2d4:	18c02034 	orhi	r3,r3,128
    f2d8:	01000e04 	movi	r4,56
    f2dc:	20806e16 	blt	r4,r2,f498 <__subdf3+0x890>
    f2e0:	010007c4 	movi	r4,31
    f2e4:	20807716 	blt	r4,r2,f4c4 <__subdf3+0x8bc>
    f2e8:	01000804 	movi	r4,32
    f2ec:	2089c83a 	sub	r4,r4,r2
    f2f0:	1914983a 	sll	r10,r3,r4
    f2f4:	8890d83a 	srl	r8,r17,r2
    f2f8:	8908983a 	sll	r4,r17,r4
    f2fc:	1884d83a 	srl	r2,r3,r2
    f300:	5222b03a 	or	r17,r10,r8
    f304:	2006c03a 	cmpne	r3,r4,zero
    f308:	88e2b03a 	or	r17,r17,r3
    f30c:	89a3883a 	add	r17,r17,r6
    f310:	1145883a 	add	r2,r2,r5
    f314:	898d803a 	cmpltu	r6,r17,r6
    f318:	3087883a 	add	r3,r6,r2
    f31c:	4821883a 	mov	r16,r9
    f320:	003ed906 	br	ee88 <__alt_exception_stack_pointer+0xf800ee88>
    f324:	2984b03a 	or	r2,r5,r6
    f328:	10004226 	beq	r2,zero,f434 <__subdf3+0x82c>
    f32c:	1808d0fa 	srli	r4,r3,3
    f330:	8822d0fa 	srli	r17,r17,3
    f334:	1806977a 	slli	r3,r3,29
    f338:	2080022c 	andhi	r2,r4,8
    f33c:	1c62b03a 	or	r17,r3,r17
    f340:	10000826 	beq	r2,zero,f364 <__subdf3+0x75c>
    f344:	2812d0fa 	srli	r9,r5,3
    f348:	4880022c 	andhi	r2,r9,8
    f34c:	1000051e 	bne	r2,zero,f364 <__subdf3+0x75c>
    f350:	300cd0fa 	srli	r6,r6,3
    f354:	2804977a 	slli	r2,r5,29
    f358:	4809883a 	mov	r4,r9
    f35c:	3825883a 	mov	r18,r7
    f360:	11a2b03a 	or	r17,r2,r6
    f364:	8806d77a 	srli	r3,r17,29
    f368:	200890fa 	slli	r4,r4,3
    f36c:	882290fa 	slli	r17,r17,3
    f370:	0401ffc4 	movi	r16,2047
    f374:	1906b03a 	or	r3,r3,r4
    f378:	003e4406 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f37c:	2984b03a 	or	r2,r5,r6
    f380:	103e4226 	beq	r2,zero,ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f384:	8989c83a 	sub	r4,r17,r6
    f388:	8911803a 	cmpltu	r8,r17,r4
    f38c:	1945c83a 	sub	r2,r3,r5
    f390:	1205c83a 	sub	r2,r2,r8
    f394:	1200202c 	andhi	r8,r2,128
    f398:	403e9a26 	beq	r8,zero,ee04 <__alt_exception_stack_pointer+0xf800ee04>
    f39c:	3463c83a 	sub	r17,r6,r17
    f3a0:	28c5c83a 	sub	r2,r5,r3
    f3a4:	344d803a 	cmpltu	r6,r6,r17
    f3a8:	1187c83a 	sub	r3,r2,r6
    f3ac:	3825883a 	mov	r18,r7
    f3b0:	003e3606 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f3b4:	0101ffc4 	movi	r4,2047
    f3b8:	493fc71e 	bne	r9,r4,f2d8 <__alt_exception_stack_pointer+0xf800f2d8>
    f3bc:	2807883a 	mov	r3,r5
    f3c0:	3023883a 	mov	r17,r6
    f3c4:	4821883a 	mov	r16,r9
    f3c8:	003e3006 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f3cc:	10003626 	beq	r2,zero,f4a8 <__subdf3+0x8a0>
    f3d0:	2984b03a 	or	r2,r5,r6
    f3d4:	10001726 	beq	r2,zero,f434 <__subdf3+0x82c>
    f3d8:	1808d0fa 	srli	r4,r3,3
    f3dc:	8822d0fa 	srli	r17,r17,3
    f3e0:	1806977a 	slli	r3,r3,29
    f3e4:	2080022c 	andhi	r2,r4,8
    f3e8:	1c62b03a 	or	r17,r3,r17
    f3ec:	10000726 	beq	r2,zero,f40c <__subdf3+0x804>
    f3f0:	2812d0fa 	srli	r9,r5,3
    f3f4:	4880022c 	andhi	r2,r9,8
    f3f8:	1000041e 	bne	r2,zero,f40c <__subdf3+0x804>
    f3fc:	300cd0fa 	srli	r6,r6,3
    f400:	2804977a 	slli	r2,r5,29
    f404:	4809883a 	mov	r4,r9
    f408:	11a2b03a 	or	r17,r2,r6
    f40c:	8806d77a 	srli	r3,r17,29
    f410:	200890fa 	slli	r4,r4,3
    f414:	882290fa 	slli	r17,r17,3
    f418:	3825883a 	mov	r18,r7
    f41c:	1906b03a 	or	r3,r3,r4
    f420:	0401ffc4 	movi	r16,2047
    f424:	003e1906 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f428:	000b883a 	mov	r5,zero
    f42c:	0005883a 	mov	r2,zero
    f430:	003e2e06 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    f434:	0401ffc4 	movi	r16,2047
    f438:	003e1406 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f43c:	0005883a 	mov	r2,zero
    f440:	003f7506 	br	f218 <__alt_exception_stack_pointer+0xf800f218>
    f444:	0005883a 	mov	r2,zero
    f448:	0009883a 	mov	r4,zero
    f44c:	003e7806 	br	ee30 <__alt_exception_stack_pointer+0xf800ee30>
    f450:	123ff804 	addi	r8,r2,-32
    f454:	01000804 	movi	r4,32
    f458:	1a10d83a 	srl	r8,r3,r8
    f45c:	11002526 	beq	r2,r4,f4f4 <__subdf3+0x8ec>
    f460:	01001004 	movi	r4,64
    f464:	2085c83a 	sub	r2,r4,r2
    f468:	1884983a 	sll	r2,r3,r2
    f46c:	1444b03a 	or	r2,r2,r17
    f470:	1004c03a 	cmpne	r2,r2,zero
    f474:	40a2b03a 	or	r17,r8,r2
    f478:	0005883a 	mov	r2,zero
    f47c:	003f1606 	br	f0d8 <__alt_exception_stack_pointer+0xf800f0d8>
    f480:	02000434 	movhi	r8,16
    f484:	0009883a 	mov	r4,zero
    f488:	423fffc4 	addi	r8,r8,-1
    f48c:	00bfffc4 	movi	r2,-1
    f490:	0401ffc4 	movi	r16,2047
    f494:	003e6606 	br	ee30 <__alt_exception_stack_pointer+0xf800ee30>
    f498:	1c62b03a 	or	r17,r3,r17
    f49c:	8822c03a 	cmpne	r17,r17,zero
    f4a0:	0005883a 	mov	r2,zero
    f4a4:	003f9906 	br	f30c <__alt_exception_stack_pointer+0xf800f30c>
    f4a8:	2807883a 	mov	r3,r5
    f4ac:	3023883a 	mov	r17,r6
    f4b0:	0401ffc4 	movi	r16,2047
    f4b4:	003df506 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f4b8:	2807883a 	mov	r3,r5
    f4bc:	3023883a 	mov	r17,r6
    f4c0:	003df206 	br	ec8c <__alt_exception_stack_pointer+0xf800ec8c>
    f4c4:	123ff804 	addi	r8,r2,-32
    f4c8:	01000804 	movi	r4,32
    f4cc:	1a10d83a 	srl	r8,r3,r8
    f4d0:	11000a26 	beq	r2,r4,f4fc <__subdf3+0x8f4>
    f4d4:	01001004 	movi	r4,64
    f4d8:	2085c83a 	sub	r2,r4,r2
    f4dc:	1884983a 	sll	r2,r3,r2
    f4e0:	1444b03a 	or	r2,r2,r17
    f4e4:	1004c03a 	cmpne	r2,r2,zero
    f4e8:	40a2b03a 	or	r17,r8,r2
    f4ec:	0005883a 	mov	r2,zero
    f4f0:	003f8606 	br	f30c <__alt_exception_stack_pointer+0xf800f30c>
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	003fdc06 	br	f46c <__alt_exception_stack_pointer+0xf800f46c>
    f4fc:	0005883a 	mov	r2,zero
    f500:	003ff706 	br	f4e0 <__alt_exception_stack_pointer+0xf800f4e0>

0000f504 <__fixdfsi>:
    f504:	280cd53a 	srli	r6,r5,20
    f508:	00c00434 	movhi	r3,16
    f50c:	18ffffc4 	addi	r3,r3,-1
    f510:	3181ffcc 	andi	r6,r6,2047
    f514:	01c0ff84 	movi	r7,1022
    f518:	28c6703a 	and	r3,r5,r3
    f51c:	280ad7fa 	srli	r5,r5,31
    f520:	3980120e 	bge	r7,r6,f56c <__fixdfsi+0x68>
    f524:	00810744 	movi	r2,1053
    f528:	11800c16 	blt	r2,r6,f55c <__fixdfsi+0x58>
    f52c:	00810cc4 	movi	r2,1075
    f530:	1185c83a 	sub	r2,r2,r6
    f534:	01c007c4 	movi	r7,31
    f538:	18c00434 	orhi	r3,r3,16
    f53c:	38800d16 	blt	r7,r2,f574 <__fixdfsi+0x70>
    f540:	31befb44 	addi	r6,r6,-1043
    f544:	2084d83a 	srl	r2,r4,r2
    f548:	1986983a 	sll	r3,r3,r6
    f54c:	1884b03a 	or	r2,r3,r2
    f550:	28000726 	beq	r5,zero,f570 <__fixdfsi+0x6c>
    f554:	0085c83a 	sub	r2,zero,r2
    f558:	f800283a 	ret
    f55c:	00a00034 	movhi	r2,32768
    f560:	10bfffc4 	addi	r2,r2,-1
    f564:	2885883a 	add	r2,r5,r2
    f568:	f800283a 	ret
    f56c:	0005883a 	mov	r2,zero
    f570:	f800283a 	ret
    f574:	008104c4 	movi	r2,1043
    f578:	1185c83a 	sub	r2,r2,r6
    f57c:	1884d83a 	srl	r2,r3,r2
    f580:	003ff306 	br	f550 <__alt_exception_stack_pointer+0xf800f550>

0000f584 <__floatsidf>:
    f584:	defffd04 	addi	sp,sp,-12
    f588:	dfc00215 	stw	ra,8(sp)
    f58c:	dc400115 	stw	r17,4(sp)
    f590:	dc000015 	stw	r16,0(sp)
    f594:	20002b26 	beq	r4,zero,f644 <__floatsidf+0xc0>
    f598:	2023883a 	mov	r17,r4
    f59c:	2020d7fa 	srli	r16,r4,31
    f5a0:	20002d16 	blt	r4,zero,f658 <__floatsidf+0xd4>
    f5a4:	8809883a 	mov	r4,r17
    f5a8:	000f7080 	call	f708 <__clzsi2>
    f5ac:	01410784 	movi	r5,1054
    f5b0:	288bc83a 	sub	r5,r5,r2
    f5b4:	01010cc4 	movi	r4,1075
    f5b8:	2149c83a 	sub	r4,r4,r5
    f5bc:	00c007c4 	movi	r3,31
    f5c0:	1900160e 	bge	r3,r4,f61c <__floatsidf+0x98>
    f5c4:	00c104c4 	movi	r3,1043
    f5c8:	1947c83a 	sub	r3,r3,r5
    f5cc:	88c6983a 	sll	r3,r17,r3
    f5d0:	00800434 	movhi	r2,16
    f5d4:	10bfffc4 	addi	r2,r2,-1
    f5d8:	1886703a 	and	r3,r3,r2
    f5dc:	2941ffcc 	andi	r5,r5,2047
    f5e0:	800d883a 	mov	r6,r16
    f5e4:	0005883a 	mov	r2,zero
    f5e8:	280a953a 	slli	r5,r5,20
    f5ec:	31803fcc 	andi	r6,r6,255
    f5f0:	01000434 	movhi	r4,16
    f5f4:	300c97fa 	slli	r6,r6,31
    f5f8:	213fffc4 	addi	r4,r4,-1
    f5fc:	1906703a 	and	r3,r3,r4
    f600:	1946b03a 	or	r3,r3,r5
    f604:	1986b03a 	or	r3,r3,r6
    f608:	dfc00217 	ldw	ra,8(sp)
    f60c:	dc400117 	ldw	r17,4(sp)
    f610:	dc000017 	ldw	r16,0(sp)
    f614:	dec00304 	addi	sp,sp,12
    f618:	f800283a 	ret
    f61c:	00c002c4 	movi	r3,11
    f620:	1887c83a 	sub	r3,r3,r2
    f624:	88c6d83a 	srl	r3,r17,r3
    f628:	8904983a 	sll	r2,r17,r4
    f62c:	01000434 	movhi	r4,16
    f630:	213fffc4 	addi	r4,r4,-1
    f634:	2941ffcc 	andi	r5,r5,2047
    f638:	1906703a 	and	r3,r3,r4
    f63c:	800d883a 	mov	r6,r16
    f640:	003fe906 	br	f5e8 <__alt_exception_stack_pointer+0xf800f5e8>
    f644:	000d883a 	mov	r6,zero
    f648:	000b883a 	mov	r5,zero
    f64c:	0007883a 	mov	r3,zero
    f650:	0005883a 	mov	r2,zero
    f654:	003fe406 	br	f5e8 <__alt_exception_stack_pointer+0xf800f5e8>
    f658:	0123c83a 	sub	r17,zero,r4
    f65c:	003fd106 	br	f5a4 <__alt_exception_stack_pointer+0xf800f5a4>

0000f660 <__floatunsidf>:
    f660:	defffe04 	addi	sp,sp,-8
    f664:	dc000015 	stw	r16,0(sp)
    f668:	dfc00115 	stw	ra,4(sp)
    f66c:	2021883a 	mov	r16,r4
    f670:	20002226 	beq	r4,zero,f6fc <__floatunsidf+0x9c>
    f674:	000f7080 	call	f708 <__clzsi2>
    f678:	01010784 	movi	r4,1054
    f67c:	2089c83a 	sub	r4,r4,r2
    f680:	01810cc4 	movi	r6,1075
    f684:	310dc83a 	sub	r6,r6,r4
    f688:	00c007c4 	movi	r3,31
    f68c:	1980120e 	bge	r3,r6,f6d8 <__floatunsidf+0x78>
    f690:	00c104c4 	movi	r3,1043
    f694:	1907c83a 	sub	r3,r3,r4
    f698:	80ca983a 	sll	r5,r16,r3
    f69c:	00800434 	movhi	r2,16
    f6a0:	10bfffc4 	addi	r2,r2,-1
    f6a4:	2101ffcc 	andi	r4,r4,2047
    f6a8:	0021883a 	mov	r16,zero
    f6ac:	288a703a 	and	r5,r5,r2
    f6b0:	2008953a 	slli	r4,r4,20
    f6b4:	00c00434 	movhi	r3,16
    f6b8:	18ffffc4 	addi	r3,r3,-1
    f6bc:	28c6703a 	and	r3,r5,r3
    f6c0:	8005883a 	mov	r2,r16
    f6c4:	1906b03a 	or	r3,r3,r4
    f6c8:	dfc00117 	ldw	ra,4(sp)
    f6cc:	dc000017 	ldw	r16,0(sp)
    f6d0:	dec00204 	addi	sp,sp,8
    f6d4:	f800283a 	ret
    f6d8:	00c002c4 	movi	r3,11
    f6dc:	188bc83a 	sub	r5,r3,r2
    f6e0:	814ad83a 	srl	r5,r16,r5
    f6e4:	00c00434 	movhi	r3,16
    f6e8:	18ffffc4 	addi	r3,r3,-1
    f6ec:	81a0983a 	sll	r16,r16,r6
    f6f0:	2101ffcc 	andi	r4,r4,2047
    f6f4:	28ca703a 	and	r5,r5,r3
    f6f8:	003fed06 	br	f6b0 <__alt_exception_stack_pointer+0xf800f6b0>
    f6fc:	0009883a 	mov	r4,zero
    f700:	000b883a 	mov	r5,zero
    f704:	003fea06 	br	f6b0 <__alt_exception_stack_pointer+0xf800f6b0>

0000f708 <__clzsi2>:
    f708:	00bfffd4 	movui	r2,65535
    f70c:	11000536 	bltu	r2,r4,f724 <__clzsi2+0x1c>
    f710:	00803fc4 	movi	r2,255
    f714:	11000f36 	bltu	r2,r4,f754 <__clzsi2+0x4c>
    f718:	00800804 	movi	r2,32
    f71c:	0007883a 	mov	r3,zero
    f720:	00000506 	br	f738 <__clzsi2+0x30>
    f724:	00804034 	movhi	r2,256
    f728:	10bfffc4 	addi	r2,r2,-1
    f72c:	11000c2e 	bgeu	r2,r4,f760 <__clzsi2+0x58>
    f730:	00800204 	movi	r2,8
    f734:	00c00604 	movi	r3,24
    f738:	20c8d83a 	srl	r4,r4,r3
    f73c:	00c00074 	movhi	r3,1
    f740:	18cacb04 	addi	r3,r3,11052
    f744:	1909883a 	add	r4,r3,r4
    f748:	20c00003 	ldbu	r3,0(r4)
    f74c:	10c5c83a 	sub	r2,r2,r3
    f750:	f800283a 	ret
    f754:	00800604 	movi	r2,24
    f758:	00c00204 	movi	r3,8
    f75c:	003ff606 	br	f738 <__alt_exception_stack_pointer+0xf800f738>
    f760:	00800404 	movi	r2,16
    f764:	1007883a 	mov	r3,r2
    f768:	003ff306 	br	f738 <__alt_exception_stack_pointer+0xf800f738>

0000f76c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f76c:	defffe04 	addi	sp,sp,-8
    f770:	dfc00115 	stw	ra,4(sp)
    f774:	df000015 	stw	fp,0(sp)
    f778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f77c:	d0a00d17 	ldw	r2,-32716(gp)
    f780:	10000326 	beq	r2,zero,f790 <alt_get_errno+0x24>
    f784:	d0a00d17 	ldw	r2,-32716(gp)
    f788:	103ee83a 	callr	r2
    f78c:	00000106 	br	f794 <alt_get_errno+0x28>
    f790:	d0a6d604 	addi	r2,gp,-25768
}
    f794:	e037883a 	mov	sp,fp
    f798:	dfc00117 	ldw	ra,4(sp)
    f79c:	df000017 	ldw	fp,0(sp)
    f7a0:	dec00204 	addi	sp,sp,8
    f7a4:	f800283a 	ret

0000f7a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f7a8:	defffb04 	addi	sp,sp,-20
    f7ac:	dfc00415 	stw	ra,16(sp)
    f7b0:	df000315 	stw	fp,12(sp)
    f7b4:	df000304 	addi	fp,sp,12
    f7b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f7bc:	e0bfff17 	ldw	r2,-4(fp)
    f7c0:	10000816 	blt	r2,zero,f7e4 <close+0x3c>
    f7c4:	01400304 	movi	r5,12
    f7c8:	e13fff17 	ldw	r4,-4(fp)
    f7cc:	000cea00 	call	cea0 <__mulsi3>
    f7d0:	1007883a 	mov	r3,r2
    f7d4:	00800074 	movhi	r2,1
    f7d8:	108d4e04 	addi	r2,r2,13624
    f7dc:	1885883a 	add	r2,r3,r2
    f7e0:	00000106 	br	f7e8 <close+0x40>
    f7e4:	0005883a 	mov	r2,zero
    f7e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f7ec:	e0bffd17 	ldw	r2,-12(fp)
    f7f0:	10001926 	beq	r2,zero,f858 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f7f4:	e0bffd17 	ldw	r2,-12(fp)
    f7f8:	10800017 	ldw	r2,0(r2)
    f7fc:	10800417 	ldw	r2,16(r2)
    f800:	10000626 	beq	r2,zero,f81c <close+0x74>
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	10800017 	ldw	r2,0(r2)
    f80c:	10800417 	ldw	r2,16(r2)
    f810:	e13ffd17 	ldw	r4,-12(fp)
    f814:	103ee83a 	callr	r2
    f818:	00000106 	br	f820 <close+0x78>
    f81c:	0005883a 	mov	r2,zero
    f820:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f824:	e13fff17 	ldw	r4,-4(fp)
    f828:	000fe900 	call	fe90 <alt_release_fd>
    if (rval < 0)
    f82c:	e0bffe17 	ldw	r2,-8(fp)
    f830:	1000070e 	bge	r2,zero,f850 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f834:	000f76c0 	call	f76c <alt_get_errno>
    f838:	1007883a 	mov	r3,r2
    f83c:	e0bffe17 	ldw	r2,-8(fp)
    f840:	0085c83a 	sub	r2,zero,r2
    f844:	18800015 	stw	r2,0(r3)
      return -1;
    f848:	00bfffc4 	movi	r2,-1
    f84c:	00000706 	br	f86c <close+0xc4>
    }
    return 0;
    f850:	0005883a 	mov	r2,zero
    f854:	00000506 	br	f86c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f858:	000f76c0 	call	f76c <alt_get_errno>
    f85c:	1007883a 	mov	r3,r2
    f860:	00801444 	movi	r2,81
    f864:	18800015 	stw	r2,0(r3)
    return -1;
    f868:	00bfffc4 	movi	r2,-1
  }
}
    f86c:	e037883a 	mov	sp,fp
    f870:	dfc00117 	ldw	ra,4(sp)
    f874:	df000017 	ldw	fp,0(sp)
    f878:	dec00204 	addi	sp,sp,8
    f87c:	f800283a 	ret

0000f880 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f880:	defffc04 	addi	sp,sp,-16
    f884:	df000315 	stw	fp,12(sp)
    f888:	df000304 	addi	fp,sp,12
    f88c:	e13ffd15 	stw	r4,-12(fp)
    f890:	e17ffe15 	stw	r5,-8(fp)
    f894:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f898:	e0bfff17 	ldw	r2,-4(fp)
}
    f89c:	e037883a 	mov	sp,fp
    f8a0:	df000017 	ldw	fp,0(sp)
    f8a4:	dec00104 	addi	sp,sp,4
    f8a8:	f800283a 	ret

0000f8ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8ac:	defffe04 	addi	sp,sp,-8
    f8b0:	dfc00115 	stw	ra,4(sp)
    f8b4:	df000015 	stw	fp,0(sp)
    f8b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8bc:	d0a00d17 	ldw	r2,-32716(gp)
    f8c0:	10000326 	beq	r2,zero,f8d0 <alt_get_errno+0x24>
    f8c4:	d0a00d17 	ldw	r2,-32716(gp)
    f8c8:	103ee83a 	callr	r2
    f8cc:	00000106 	br	f8d4 <alt_get_errno+0x28>
    f8d0:	d0a6d604 	addi	r2,gp,-25768
}
    f8d4:	e037883a 	mov	sp,fp
    f8d8:	dfc00117 	ldw	ra,4(sp)
    f8dc:	df000017 	ldw	fp,0(sp)
    f8e0:	dec00204 	addi	sp,sp,8
    f8e4:	f800283a 	ret

0000f8e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f8e8:	defffb04 	addi	sp,sp,-20
    f8ec:	dfc00415 	stw	ra,16(sp)
    f8f0:	df000315 	stw	fp,12(sp)
    f8f4:	df000304 	addi	fp,sp,12
    f8f8:	e13ffe15 	stw	r4,-8(fp)
    f8fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	10000816 	blt	r2,zero,f928 <fstat+0x40>
    f908:	01400304 	movi	r5,12
    f90c:	e13ffe17 	ldw	r4,-8(fp)
    f910:	000cea00 	call	cea0 <__mulsi3>
    f914:	1007883a 	mov	r3,r2
    f918:	00800074 	movhi	r2,1
    f91c:	108d4e04 	addi	r2,r2,13624
    f920:	1885883a 	add	r2,r3,r2
    f924:	00000106 	br	f92c <fstat+0x44>
    f928:	0005883a 	mov	r2,zero
    f92c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	10001026 	beq	r2,zero,f978 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f938:	e0bffd17 	ldw	r2,-12(fp)
    f93c:	10800017 	ldw	r2,0(r2)
    f940:	10800817 	ldw	r2,32(r2)
    f944:	10000726 	beq	r2,zero,f964 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10800017 	ldw	r2,0(r2)
    f950:	10800817 	ldw	r2,32(r2)
    f954:	e17fff17 	ldw	r5,-4(fp)
    f958:	e13ffd17 	ldw	r4,-12(fp)
    f95c:	103ee83a 	callr	r2
    f960:	00000a06 	br	f98c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f964:	e0bfff17 	ldw	r2,-4(fp)
    f968:	00c80004 	movi	r3,8192
    f96c:	10c00115 	stw	r3,4(r2)
      return 0;
    f970:	0005883a 	mov	r2,zero
    f974:	00000506 	br	f98c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f978:	000f8ac0 	call	f8ac <alt_get_errno>
    f97c:	1007883a 	mov	r3,r2
    f980:	00801444 	movi	r2,81
    f984:	18800015 	stw	r2,0(r3)
    return -1;
    f988:	00bfffc4 	movi	r2,-1
  }
}
    f98c:	e037883a 	mov	sp,fp
    f990:	dfc00117 	ldw	ra,4(sp)
    f994:	df000017 	ldw	fp,0(sp)
    f998:	dec00204 	addi	sp,sp,8
    f99c:	f800283a 	ret

0000f9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9a0:	defffe04 	addi	sp,sp,-8
    f9a4:	dfc00115 	stw	ra,4(sp)
    f9a8:	df000015 	stw	fp,0(sp)
    f9ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9b0:	d0a00d17 	ldw	r2,-32716(gp)
    f9b4:	10000326 	beq	r2,zero,f9c4 <alt_get_errno+0x24>
    f9b8:	d0a00d17 	ldw	r2,-32716(gp)
    f9bc:	103ee83a 	callr	r2
    f9c0:	00000106 	br	f9c8 <alt_get_errno+0x28>
    f9c4:	d0a6d604 	addi	r2,gp,-25768
}
    f9c8:	e037883a 	mov	sp,fp
    f9cc:	dfc00117 	ldw	ra,4(sp)
    f9d0:	df000017 	ldw	fp,0(sp)
    f9d4:	dec00204 	addi	sp,sp,8
    f9d8:	f800283a 	ret

0000f9dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f9dc:	deffed04 	addi	sp,sp,-76
    f9e0:	dfc01215 	stw	ra,72(sp)
    f9e4:	df001115 	stw	fp,68(sp)
    f9e8:	df001104 	addi	fp,sp,68
    f9ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	10000816 	blt	r2,zero,fa18 <isatty+0x3c>
    f9f8:	01400304 	movi	r5,12
    f9fc:	e13fff17 	ldw	r4,-4(fp)
    fa00:	000cea00 	call	cea0 <__mulsi3>
    fa04:	1007883a 	mov	r3,r2
    fa08:	00800074 	movhi	r2,1
    fa0c:	108d4e04 	addi	r2,r2,13624
    fa10:	1885883a 	add	r2,r3,r2
    fa14:	00000106 	br	fa1c <isatty+0x40>
    fa18:	0005883a 	mov	r2,zero
    fa1c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fa20:	e0bfef17 	ldw	r2,-68(fp)
    fa24:	10000e26 	beq	r2,zero,fa60 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fa28:	e0bfef17 	ldw	r2,-68(fp)
    fa2c:	10800017 	ldw	r2,0(r2)
    fa30:	10800817 	ldw	r2,32(r2)
    fa34:	1000021e 	bne	r2,zero,fa40 <isatty+0x64>
    {
      return 1;
    fa38:	00800044 	movi	r2,1
    fa3c:	00000d06 	br	fa74 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fa40:	e0bff004 	addi	r2,fp,-64
    fa44:	100b883a 	mov	r5,r2
    fa48:	e13fff17 	ldw	r4,-4(fp)
    fa4c:	000f8e80 	call	f8e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fa50:	e0bff117 	ldw	r2,-60(fp)
    fa54:	10880020 	cmpeqi	r2,r2,8192
    fa58:	10803fcc 	andi	r2,r2,255
    fa5c:	00000506 	br	fa74 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fa60:	000f9a00 	call	f9a0 <alt_get_errno>
    fa64:	1007883a 	mov	r3,r2
    fa68:	00801444 	movi	r2,81
    fa6c:	18800015 	stw	r2,0(r3)
    return 0;
    fa70:	0005883a 	mov	r2,zero
  }
}
    fa74:	e037883a 	mov	sp,fp
    fa78:	dfc00117 	ldw	ra,4(sp)
    fa7c:	df000017 	ldw	fp,0(sp)
    fa80:	dec00204 	addi	sp,sp,8
    fa84:	f800283a 	ret

0000fa88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fa88:	defffc04 	addi	sp,sp,-16
    fa8c:	df000315 	stw	fp,12(sp)
    fa90:	df000304 	addi	fp,sp,12
    fa94:	e13ffd15 	stw	r4,-12(fp)
    fa98:	e17ffe15 	stw	r5,-8(fp)
    fa9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    faa0:	e0fffe17 	ldw	r3,-8(fp)
    faa4:	e0bffd17 	ldw	r2,-12(fp)
    faa8:	18800c26 	beq	r3,r2,fadc <alt_load_section+0x54>
  {
    while( to != end )
    faac:	00000806 	br	fad0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    fab0:	e0bffe17 	ldw	r2,-8(fp)
    fab4:	10c00104 	addi	r3,r2,4
    fab8:	e0fffe15 	stw	r3,-8(fp)
    fabc:	e0fffd17 	ldw	r3,-12(fp)
    fac0:	19000104 	addi	r4,r3,4
    fac4:	e13ffd15 	stw	r4,-12(fp)
    fac8:	18c00017 	ldw	r3,0(r3)
    facc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fad0:	e0fffe17 	ldw	r3,-8(fp)
    fad4:	e0bfff17 	ldw	r2,-4(fp)
    fad8:	18bff51e 	bne	r3,r2,fab0 <__alt_exception_stack_pointer+0xf800fab0>
    {
      *to++ = *from++;
    }
  }
}
    fadc:	0001883a 	nop
    fae0:	e037883a 	mov	sp,fp
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00104 	addi	sp,sp,4
    faec:	f800283a 	ret

0000faf0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    faf0:	defffe04 	addi	sp,sp,-8
    faf4:	dfc00115 	stw	ra,4(sp)
    faf8:	df000015 	stw	fp,0(sp)
    fafc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fb00:	01800074 	movhi	r6,1
    fb04:	3191d704 	addi	r6,r6,18268
    fb08:	01400074 	movhi	r5,1
    fb0c:	294b1b04 	addi	r5,r5,11372
    fb10:	01000074 	movhi	r4,1
    fb14:	2111d704 	addi	r4,r4,18268
    fb18:	000fa880 	call	fa88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fb1c:	01800034 	movhi	r6,0
    fb20:	31808f04 	addi	r6,r6,572
    fb24:	01400034 	movhi	r5,0
    fb28:	29400804 	addi	r5,r5,32
    fb2c:	01000034 	movhi	r4,0
    fb30:	21000804 	addi	r4,r4,32
    fb34:	000fa880 	call	fa88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fb38:	01800074 	movhi	r6,1
    fb3c:	318b1b04 	addi	r6,r6,11372
    fb40:	01400074 	movhi	r5,1
    fb44:	29485204 	addi	r5,r5,8520
    fb48:	01000074 	movhi	r4,1
    fb4c:	21085204 	addi	r4,r4,8520
    fb50:	000fa880 	call	fa88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fb54:	00110900 	call	11090 <alt_dcache_flush_all>
  alt_icache_flush_all();
    fb58:	00112500 	call	11250 <alt_icache_flush_all>
}
    fb5c:	0001883a 	nop
    fb60:	e037883a 	mov	sp,fp
    fb64:	dfc00117 	ldw	ra,4(sp)
    fb68:	df000017 	ldw	fp,0(sp)
    fb6c:	dec00204 	addi	sp,sp,8
    fb70:	f800283a 	ret

0000fb74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb74:	defffe04 	addi	sp,sp,-8
    fb78:	dfc00115 	stw	ra,4(sp)
    fb7c:	df000015 	stw	fp,0(sp)
    fb80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb84:	d0a00d17 	ldw	r2,-32716(gp)
    fb88:	10000326 	beq	r2,zero,fb98 <alt_get_errno+0x24>
    fb8c:	d0a00d17 	ldw	r2,-32716(gp)
    fb90:	103ee83a 	callr	r2
    fb94:	00000106 	br	fb9c <alt_get_errno+0x28>
    fb98:	d0a6d604 	addi	r2,gp,-25768
}
    fb9c:	e037883a 	mov	sp,fp
    fba0:	dfc00117 	ldw	ra,4(sp)
    fba4:	df000017 	ldw	fp,0(sp)
    fba8:	dec00204 	addi	sp,sp,8
    fbac:	f800283a 	ret

0000fbb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fbb0:	defff904 	addi	sp,sp,-28
    fbb4:	dfc00615 	stw	ra,24(sp)
    fbb8:	df000515 	stw	fp,20(sp)
    fbbc:	df000504 	addi	fp,sp,20
    fbc0:	e13ffd15 	stw	r4,-12(fp)
    fbc4:	e17ffe15 	stw	r5,-8(fp)
    fbc8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fbcc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fbd0:	e0bffd17 	ldw	r2,-12(fp)
    fbd4:	10000816 	blt	r2,zero,fbf8 <lseek+0x48>
    fbd8:	01400304 	movi	r5,12
    fbdc:	e13ffd17 	ldw	r4,-12(fp)
    fbe0:	000cea00 	call	cea0 <__mulsi3>
    fbe4:	1007883a 	mov	r3,r2
    fbe8:	00800074 	movhi	r2,1
    fbec:	108d4e04 	addi	r2,r2,13624
    fbf0:	1885883a 	add	r2,r3,r2
    fbf4:	00000106 	br	fbfc <lseek+0x4c>
    fbf8:	0005883a 	mov	r2,zero
    fbfc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fc00:	e0bffc17 	ldw	r2,-16(fp)
    fc04:	10001026 	beq	r2,zero,fc48 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fc08:	e0bffc17 	ldw	r2,-16(fp)
    fc0c:	10800017 	ldw	r2,0(r2)
    fc10:	10800717 	ldw	r2,28(r2)
    fc14:	10000926 	beq	r2,zero,fc3c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fc18:	e0bffc17 	ldw	r2,-16(fp)
    fc1c:	10800017 	ldw	r2,0(r2)
    fc20:	10800717 	ldw	r2,28(r2)
    fc24:	e1bfff17 	ldw	r6,-4(fp)
    fc28:	e17ffe17 	ldw	r5,-8(fp)
    fc2c:	e13ffc17 	ldw	r4,-16(fp)
    fc30:	103ee83a 	callr	r2
    fc34:	e0bffb15 	stw	r2,-20(fp)
    fc38:	00000506 	br	fc50 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fc3c:	00bfde84 	movi	r2,-134
    fc40:	e0bffb15 	stw	r2,-20(fp)
    fc44:	00000206 	br	fc50 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    fc48:	00bfebc4 	movi	r2,-81
    fc4c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fc50:	e0bffb17 	ldw	r2,-20(fp)
    fc54:	1000070e 	bge	r2,zero,fc74 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    fc58:	000fb740 	call	fb74 <alt_get_errno>
    fc5c:	1007883a 	mov	r3,r2
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	0085c83a 	sub	r2,zero,r2
    fc68:	18800015 	stw	r2,0(r3)
    rc = -1;
    fc6c:	00bfffc4 	movi	r2,-1
    fc70:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fc74:	e0bffb17 	ldw	r2,-20(fp)
}
    fc78:	e037883a 	mov	sp,fp
    fc7c:	dfc00117 	ldw	ra,4(sp)
    fc80:	df000017 	ldw	fp,0(sp)
    fc84:	dec00204 	addi	sp,sp,8
    fc88:	f800283a 	ret

0000fc8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fc8c:	defffd04 	addi	sp,sp,-12
    fc90:	dfc00215 	stw	ra,8(sp)
    fc94:	df000115 	stw	fp,4(sp)
    fc98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fc9c:	0009883a 	mov	r4,zero
    fca0:	00102180 	call	10218 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fca4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fca8:	00102500 	call	10250 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fcac:	01800074 	movhi	r6,1
    fcb0:	318b0e04 	addi	r6,r6,11320
    fcb4:	01400074 	movhi	r5,1
    fcb8:	294b1304 	addi	r5,r5,11340
    fcbc:	01000074 	movhi	r4,1
    fcc0:	210b0e04 	addi	r4,r4,11320
    fcc4:	00115f40 	call	115f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fcc8:	00111900 	call	11190 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fccc:	01000074 	movhi	r4,1
    fcd0:	21047c04 	addi	r4,r4,4592
    fcd4:	0011db40 	call	11db4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fcd8:	d0a6da17 	ldw	r2,-25752(gp)
    fcdc:	d0e6db17 	ldw	r3,-25748(gp)
    fce0:	d126dc17 	ldw	r4,-25744(gp)
    fce4:	200d883a 	mov	r6,r4
    fce8:	180b883a 	mov	r5,r3
    fcec:	1009883a 	mov	r4,r2
    fcf0:	00014840 	call	1484 <main>
    fcf4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fcf8:	01000044 	movi	r4,1
    fcfc:	000f7a80 	call	f7a8 <close>
  exit (result);
    fd00:	e13fff17 	ldw	r4,-4(fp)
    fd04:	0011dc80 	call	11dc8 <exit>

0000fd08 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fd08:	defffe04 	addi	sp,sp,-8
    fd0c:	df000115 	stw	fp,4(sp)
    fd10:	df000104 	addi	fp,sp,4
    fd14:	e13fff15 	stw	r4,-4(fp)
}
    fd18:	0001883a 	nop
    fd1c:	e037883a 	mov	sp,fp
    fd20:	df000017 	ldw	fp,0(sp)
    fd24:	dec00104 	addi	sp,sp,4
    fd28:	f800283a 	ret

0000fd2c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fd2c:	defffe04 	addi	sp,sp,-8
    fd30:	df000115 	stw	fp,4(sp)
    fd34:	df000104 	addi	fp,sp,4
    fd38:	e13fff15 	stw	r4,-4(fp)
}
    fd3c:	0001883a 	nop
    fd40:	e037883a 	mov	sp,fp
    fd44:	df000017 	ldw	fp,0(sp)
    fd48:	dec00104 	addi	sp,sp,4
    fd4c:	f800283a 	ret

0000fd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd50:	defffe04 	addi	sp,sp,-8
    fd54:	dfc00115 	stw	ra,4(sp)
    fd58:	df000015 	stw	fp,0(sp)
    fd5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd60:	d0a00d17 	ldw	r2,-32716(gp)
    fd64:	10000326 	beq	r2,zero,fd74 <alt_get_errno+0x24>
    fd68:	d0a00d17 	ldw	r2,-32716(gp)
    fd6c:	103ee83a 	callr	r2
    fd70:	00000106 	br	fd78 <alt_get_errno+0x28>
    fd74:	d0a6d604 	addi	r2,gp,-25768
}
    fd78:	e037883a 	mov	sp,fp
    fd7c:	dfc00117 	ldw	ra,4(sp)
    fd80:	df000017 	ldw	fp,0(sp)
    fd84:	dec00204 	addi	sp,sp,8
    fd88:	f800283a 	ret

0000fd8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fd8c:	defff904 	addi	sp,sp,-28
    fd90:	dfc00615 	stw	ra,24(sp)
    fd94:	df000515 	stw	fp,20(sp)
    fd98:	df000504 	addi	fp,sp,20
    fd9c:	e13ffd15 	stw	r4,-12(fp)
    fda0:	e17ffe15 	stw	r5,-8(fp)
    fda4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fda8:	e0bffd17 	ldw	r2,-12(fp)
    fdac:	10000816 	blt	r2,zero,fdd0 <read+0x44>
    fdb0:	01400304 	movi	r5,12
    fdb4:	e13ffd17 	ldw	r4,-12(fp)
    fdb8:	000cea00 	call	cea0 <__mulsi3>
    fdbc:	1007883a 	mov	r3,r2
    fdc0:	00800074 	movhi	r2,1
    fdc4:	108d4e04 	addi	r2,r2,13624
    fdc8:	1885883a 	add	r2,r3,r2
    fdcc:	00000106 	br	fdd4 <read+0x48>
    fdd0:	0005883a 	mov	r2,zero
    fdd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fdd8:	e0bffb17 	ldw	r2,-20(fp)
    fddc:	10002226 	beq	r2,zero,fe68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fde0:	e0bffb17 	ldw	r2,-20(fp)
    fde4:	10800217 	ldw	r2,8(r2)
    fde8:	108000cc 	andi	r2,r2,3
    fdec:	10800060 	cmpeqi	r2,r2,1
    fdf0:	1000181e 	bne	r2,zero,fe54 <read+0xc8>
        (fd->dev->read))
    fdf4:	e0bffb17 	ldw	r2,-20(fp)
    fdf8:	10800017 	ldw	r2,0(r2)
    fdfc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fe00:	10001426 	beq	r2,zero,fe54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fe04:	e0bffb17 	ldw	r2,-20(fp)
    fe08:	10800017 	ldw	r2,0(r2)
    fe0c:	10800517 	ldw	r2,20(r2)
    fe10:	e0ffff17 	ldw	r3,-4(fp)
    fe14:	180d883a 	mov	r6,r3
    fe18:	e17ffe17 	ldw	r5,-8(fp)
    fe1c:	e13ffb17 	ldw	r4,-20(fp)
    fe20:	103ee83a 	callr	r2
    fe24:	e0bffc15 	stw	r2,-16(fp)
    fe28:	e0bffc17 	ldw	r2,-16(fp)
    fe2c:	1000070e 	bge	r2,zero,fe4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    fe30:	000fd500 	call	fd50 <alt_get_errno>
    fe34:	1007883a 	mov	r3,r2
    fe38:	e0bffc17 	ldw	r2,-16(fp)
    fe3c:	0085c83a 	sub	r2,zero,r2
    fe40:	18800015 	stw	r2,0(r3)
          return -1;
    fe44:	00bfffc4 	movi	r2,-1
    fe48:	00000c06 	br	fe7c <read+0xf0>
        }
        return rval;
    fe4c:	e0bffc17 	ldw	r2,-16(fp)
    fe50:	00000a06 	br	fe7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fe54:	000fd500 	call	fd50 <alt_get_errno>
    fe58:	1007883a 	mov	r3,r2
    fe5c:	00800344 	movi	r2,13
    fe60:	18800015 	stw	r2,0(r3)
    fe64:	00000406 	br	fe78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fe68:	000fd500 	call	fd50 <alt_get_errno>
    fe6c:	1007883a 	mov	r3,r2
    fe70:	00801444 	movi	r2,81
    fe74:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fe78:	00bfffc4 	movi	r2,-1
}
    fe7c:	e037883a 	mov	sp,fp
    fe80:	dfc00117 	ldw	ra,4(sp)
    fe84:	df000017 	ldw	fp,0(sp)
    fe88:	dec00204 	addi	sp,sp,8
    fe8c:	f800283a 	ret

0000fe90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fe90:	defffc04 	addi	sp,sp,-16
    fe94:	dfc00315 	stw	ra,12(sp)
    fe98:	df000215 	stw	fp,8(sp)
    fe9c:	dc000115 	stw	r16,4(sp)
    fea0:	df000204 	addi	fp,sp,8
    fea4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fea8:	e0bffe17 	ldw	r2,-8(fp)
    feac:	108000d0 	cmplti	r2,r2,3
    feb0:	1000111e 	bne	r2,zero,fef8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    feb4:	04000074 	movhi	r16,1
    feb8:	840d4e04 	addi	r16,r16,13624
    febc:	e0bffe17 	ldw	r2,-8(fp)
    fec0:	01400304 	movi	r5,12
    fec4:	1009883a 	mov	r4,r2
    fec8:	000cea00 	call	cea0 <__mulsi3>
    fecc:	8085883a 	add	r2,r16,r2
    fed0:	10800204 	addi	r2,r2,8
    fed4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fed8:	04000074 	movhi	r16,1
    fedc:	840d4e04 	addi	r16,r16,13624
    fee0:	e0bffe17 	ldw	r2,-8(fp)
    fee4:	01400304 	movi	r5,12
    fee8:	1009883a 	mov	r4,r2
    feec:	000cea00 	call	cea0 <__mulsi3>
    fef0:	8085883a 	add	r2,r16,r2
    fef4:	10000015 	stw	zero,0(r2)
  }
}
    fef8:	0001883a 	nop
    fefc:	e6ffff04 	addi	sp,fp,-4
    ff00:	dfc00217 	ldw	ra,8(sp)
    ff04:	df000117 	ldw	fp,4(sp)
    ff08:	dc000017 	ldw	r16,0(sp)
    ff0c:	dec00304 	addi	sp,sp,12
    ff10:	f800283a 	ret

0000ff14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ff14:	defff904 	addi	sp,sp,-28
    ff18:	df000615 	stw	fp,24(sp)
    ff1c:	df000604 	addi	fp,sp,24
    ff20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff24:	0005303a 	rdctl	r2,status
    ff28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff2c:	e0fffe17 	ldw	r3,-8(fp)
    ff30:	00bfff84 	movi	r2,-2
    ff34:	1884703a 	and	r2,r3,r2
    ff38:	1001703a 	wrctl	status,r2
  
  return context;
    ff3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ff40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ff44:	d0a00e17 	ldw	r2,-32712(gp)
    ff48:	10c000c4 	addi	r3,r2,3
    ff4c:	00bfff04 	movi	r2,-4
    ff50:	1884703a 	and	r2,r3,r2
    ff54:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ff58:	d0e00e17 	ldw	r3,-32712(gp)
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	1887883a 	add	r3,r3,r2
    ff64:	00820034 	movhi	r2,2048
    ff68:	10bf0004 	addi	r2,r2,-1024
    ff6c:	10c0062e 	bgeu	r2,r3,ff88 <sbrk+0x74>
    ff70:	e0bffb17 	ldw	r2,-20(fp)
    ff74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff78:	e0bffa17 	ldw	r2,-24(fp)
    ff7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ff80:	00bfffc4 	movi	r2,-1
    ff84:	00000b06 	br	ffb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ff88:	d0a00e17 	ldw	r2,-32712(gp)
    ff8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ff90:	d0e00e17 	ldw	r3,-32712(gp)
    ff94:	e0bfff17 	ldw	r2,-4(fp)
    ff98:	1885883a 	add	r2,r3,r2
    ff9c:	d0a00e15 	stw	r2,-32712(gp)
    ffa0:	e0bffb17 	ldw	r2,-20(fp)
    ffa4:	e0bffc15 	stw	r2,-16(fp)
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ffb0:	e0bffd17 	ldw	r2,-12(fp)
} 
    ffb4:	e037883a 	mov	sp,fp
    ffb8:	df000017 	ldw	fp,0(sp)
    ffbc:	dec00104 	addi	sp,sp,4
    ffc0:	f800283a 	ret

0000ffc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ffc4:	defffe04 	addi	sp,sp,-8
    ffc8:	dfc00115 	stw	ra,4(sp)
    ffcc:	df000015 	stw	fp,0(sp)
    ffd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ffd4:	d0a00d17 	ldw	r2,-32716(gp)
    ffd8:	10000326 	beq	r2,zero,ffe8 <alt_get_errno+0x24>
    ffdc:	d0a00d17 	ldw	r2,-32716(gp)
    ffe0:	103ee83a 	callr	r2
    ffe4:	00000106 	br	ffec <alt_get_errno+0x28>
    ffe8:	d0a6d604 	addi	r2,gp,-25768
}
    ffec:	e037883a 	mov	sp,fp
    fff0:	dfc00117 	ldw	ra,4(sp)
    fff4:	df000017 	ldw	fp,0(sp)
    fff8:	dec00204 	addi	sp,sp,8
    fffc:	f800283a 	ret

00010000 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   10000:	defffc04 	addi	sp,sp,-16
   10004:	dfc00315 	stw	ra,12(sp)
   10008:	df000215 	stw	fp,8(sp)
   1000c:	df000204 	addi	fp,sp,8
   10010:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10014:	d0a6df17 	ldw	r2,-25732(gp)
  clock_t ticks = alt_nticks(); 
   10018:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1001c:	d0a6de17 	ldw	r2,-25736(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   10020:	1000061e 	bne	r2,zero,1003c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   10024:	000ffc40 	call	ffc4 <alt_get_errno>
   10028:	1007883a 	mov	r3,r2
   1002c:	00801604 	movi	r2,88
   10030:	18800015 	stw	r2,0(r3)
    return 0;
   10034:	0005883a 	mov	r2,zero
   10038:	00000a06 	br	10064 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1003c:	e0bfff17 	ldw	r2,-4(fp)
   10040:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   10044:	e0bfff17 	ldw	r2,-4(fp)
   10048:	e0fffe17 	ldw	r3,-8(fp)
   1004c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   10050:	e0bfff17 	ldw	r2,-4(fp)
   10054:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	10000315 	stw	zero,12(r2)

  return ticks;
   10060:	e0bffe17 	ldw	r2,-8(fp)
}
   10064:	e037883a 	mov	sp,fp
   10068:	dfc00117 	ldw	ra,4(sp)
   1006c:	df000017 	ldw	fp,0(sp)
   10070:	dec00204 	addi	sp,sp,8
   10074:	f800283a 	ret

00010078 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10078:	defffd04 	addi	sp,sp,-12
   1007c:	dfc00215 	stw	ra,8(sp)
   10080:	df000115 	stw	fp,4(sp)
   10084:	df000104 	addi	fp,sp,4
   10088:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1008c:	e13fff17 	ldw	r4,-4(fp)
   10090:	0010f380 	call	10f38 <alt_busy_sleep>
}
   10094:	e037883a 	mov	sp,fp
   10098:	dfc00117 	ldw	ra,4(sp)
   1009c:	df000017 	ldw	fp,0(sp)
   100a0:	dec00204 	addi	sp,sp,8
   100a4:	f800283a 	ret

000100a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100a8:	defffe04 	addi	sp,sp,-8
   100ac:	dfc00115 	stw	ra,4(sp)
   100b0:	df000015 	stw	fp,0(sp)
   100b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100b8:	d0a00d17 	ldw	r2,-32716(gp)
   100bc:	10000326 	beq	r2,zero,100cc <alt_get_errno+0x24>
   100c0:	d0a00d17 	ldw	r2,-32716(gp)
   100c4:	103ee83a 	callr	r2
   100c8:	00000106 	br	100d0 <alt_get_errno+0x28>
   100cc:	d0a6d604 	addi	r2,gp,-25768
}
   100d0:	e037883a 	mov	sp,fp
   100d4:	dfc00117 	ldw	ra,4(sp)
   100d8:	df000017 	ldw	fp,0(sp)
   100dc:	dec00204 	addi	sp,sp,8
   100e0:	f800283a 	ret

000100e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   100e4:	defff904 	addi	sp,sp,-28
   100e8:	dfc00615 	stw	ra,24(sp)
   100ec:	df000515 	stw	fp,20(sp)
   100f0:	df000504 	addi	fp,sp,20
   100f4:	e13ffd15 	stw	r4,-12(fp)
   100f8:	e17ffe15 	stw	r5,-8(fp)
   100fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10100:	e0bffd17 	ldw	r2,-12(fp)
   10104:	10000816 	blt	r2,zero,10128 <write+0x44>
   10108:	01400304 	movi	r5,12
   1010c:	e13ffd17 	ldw	r4,-12(fp)
   10110:	000cea00 	call	cea0 <__mulsi3>
   10114:	1007883a 	mov	r3,r2
   10118:	00800074 	movhi	r2,1
   1011c:	108d4e04 	addi	r2,r2,13624
   10120:	1885883a 	add	r2,r3,r2
   10124:	00000106 	br	1012c <write+0x48>
   10128:	0005883a 	mov	r2,zero
   1012c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10130:	e0bffb17 	ldw	r2,-20(fp)
   10134:	10002126 	beq	r2,zero,101bc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10138:	e0bffb17 	ldw	r2,-20(fp)
   1013c:	10800217 	ldw	r2,8(r2)
   10140:	108000cc 	andi	r2,r2,3
   10144:	10001826 	beq	r2,zero,101a8 <write+0xc4>
   10148:	e0bffb17 	ldw	r2,-20(fp)
   1014c:	10800017 	ldw	r2,0(r2)
   10150:	10800617 	ldw	r2,24(r2)
   10154:	10001426 	beq	r2,zero,101a8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10158:	e0bffb17 	ldw	r2,-20(fp)
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	10800617 	ldw	r2,24(r2)
   10164:	e0ffff17 	ldw	r3,-4(fp)
   10168:	180d883a 	mov	r6,r3
   1016c:	e17ffe17 	ldw	r5,-8(fp)
   10170:	e13ffb17 	ldw	r4,-20(fp)
   10174:	103ee83a 	callr	r2
   10178:	e0bffc15 	stw	r2,-16(fp)
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	1000070e 	bge	r2,zero,101a0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10184:	00100a80 	call	100a8 <alt_get_errno>
   10188:	1007883a 	mov	r3,r2
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	0085c83a 	sub	r2,zero,r2
   10194:	18800015 	stw	r2,0(r3)
        return -1;
   10198:	00bfffc4 	movi	r2,-1
   1019c:	00000c06 	br	101d0 <write+0xec>
      }
      return rval;
   101a0:	e0bffc17 	ldw	r2,-16(fp)
   101a4:	00000a06 	br	101d0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   101a8:	00100a80 	call	100a8 <alt_get_errno>
   101ac:	1007883a 	mov	r3,r2
   101b0:	00800344 	movi	r2,13
   101b4:	18800015 	stw	r2,0(r3)
   101b8:	00000406 	br	101cc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   101bc:	00100a80 	call	100a8 <alt_get_errno>
   101c0:	1007883a 	mov	r3,r2
   101c4:	00801444 	movi	r2,81
   101c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   101cc:	00bfffc4 	movi	r2,-1
}
   101d0:	e037883a 	mov	sp,fp
   101d4:	dfc00117 	ldw	ra,4(sp)
   101d8:	df000017 	ldw	fp,0(sp)
   101dc:	dec00204 	addi	sp,sp,8
   101e0:	f800283a 	ret

000101e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   101e4:	defffd04 	addi	sp,sp,-12
   101e8:	dfc00215 	stw	ra,8(sp)
   101ec:	df000115 	stw	fp,4(sp)
   101f0:	df000104 	addi	fp,sp,4
   101f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   101f8:	d1600a04 	addi	r5,gp,-32728
   101fc:	e13fff17 	ldw	r4,-4(fp)
   10200:	00110ec0 	call	110ec <alt_dev_llist_insert>
}
   10204:	e037883a 	mov	sp,fp
   10208:	dfc00117 	ldw	ra,4(sp)
   1020c:	df000017 	ldw	fp,0(sp)
   10210:	dec00204 	addi	sp,sp,8
   10214:	f800283a 	ret

00010218 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10218:	defffd04 	addi	sp,sp,-12
   1021c:	dfc00215 	stw	ra,8(sp)
   10220:	df000115 	stw	fp,4(sp)
   10224:	df000104 	addi	fp,sp,4
   10228:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   1022c:	0011a980 	call	11a98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10230:	00800044 	movi	r2,1
   10234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10238:	0001883a 	nop
   1023c:	e037883a 	mov	sp,fp
   10240:	dfc00117 	ldw	ra,4(sp)
   10244:	df000017 	ldw	fp,0(sp)
   10248:	dec00204 	addi	sp,sp,8
   1024c:	f800283a 	ret

00010250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10250:	defffe04 	addi	sp,sp,-8
   10254:	dfc00115 	stw	ra,4(sp)
   10258:	df000015 	stw	fp,0(sp)
   1025c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10260:	01c0fa04 	movi	r7,1000
   10264:	01800044 	movi	r6,1
   10268:	000b883a 	mov	r5,zero
   1026c:	01020034 	movhi	r4,2048
   10270:	210c0004 	addi	r4,r4,12288
   10274:	0010d900 	call	10d90 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10278:	000d883a 	mov	r6,zero
   1027c:	000b883a 	mov	r5,zero
   10280:	01000074 	movhi	r4,1
   10284:	210db804 	addi	r4,r4,14048
   10288:	00104140 	call	10414 <altera_avalon_jtag_uart_init>
   1028c:	01000074 	movhi	r4,1
   10290:	210dae04 	addi	r4,r4,14008
   10294:	00101e40 	call	101e4 <alt_dev_reg>
}
   10298:	0001883a 	nop
   1029c:	e037883a 	mov	sp,fp
   102a0:	dfc00117 	ldw	ra,4(sp)
   102a4:	df000017 	ldw	fp,0(sp)
   102a8:	dec00204 	addi	sp,sp,8
   102ac:	f800283a 	ret

000102b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   102b0:	defffa04 	addi	sp,sp,-24
   102b4:	dfc00515 	stw	ra,20(sp)
   102b8:	df000415 	stw	fp,16(sp)
   102bc:	df000404 	addi	fp,sp,16
   102c0:	e13ffd15 	stw	r4,-12(fp)
   102c4:	e17ffe15 	stw	r5,-8(fp)
   102c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   102cc:	e0bffd17 	ldw	r2,-12(fp)
   102d0:	10800017 	ldw	r2,0(r2)
   102d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   102d8:	e0bffc17 	ldw	r2,-16(fp)
   102dc:	10c00a04 	addi	r3,r2,40
   102e0:	e0bffd17 	ldw	r2,-12(fp)
   102e4:	10800217 	ldw	r2,8(r2)
   102e8:	100f883a 	mov	r7,r2
   102ec:	e1bfff17 	ldw	r6,-4(fp)
   102f0:	e17ffe17 	ldw	r5,-8(fp)
   102f4:	1809883a 	mov	r4,r3
   102f8:	00108d80 	call	108d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   102fc:	e037883a 	mov	sp,fp
   10300:	dfc00117 	ldw	ra,4(sp)
   10304:	df000017 	ldw	fp,0(sp)
   10308:	dec00204 	addi	sp,sp,8
   1030c:	f800283a 	ret

00010310 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10310:	defffa04 	addi	sp,sp,-24
   10314:	dfc00515 	stw	ra,20(sp)
   10318:	df000415 	stw	fp,16(sp)
   1031c:	df000404 	addi	fp,sp,16
   10320:	e13ffd15 	stw	r4,-12(fp)
   10324:	e17ffe15 	stw	r5,-8(fp)
   10328:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	10800017 	ldw	r2,0(r2)
   10334:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10c00a04 	addi	r3,r2,40
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	10800217 	ldw	r2,8(r2)
   10348:	100f883a 	mov	r7,r2
   1034c:	e1bfff17 	ldw	r6,-4(fp)
   10350:	e17ffe17 	ldw	r5,-8(fp)
   10354:	1809883a 	mov	r4,r3
   10358:	0010af40 	call	10af4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1035c:	e037883a 	mov	sp,fp
   10360:	dfc00117 	ldw	ra,4(sp)
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00204 	addi	sp,sp,8
   1036c:	f800283a 	ret

00010370 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10370:	defffc04 	addi	sp,sp,-16
   10374:	dfc00315 	stw	ra,12(sp)
   10378:	df000215 	stw	fp,8(sp)
   1037c:	df000204 	addi	fp,sp,8
   10380:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10384:	e0bfff17 	ldw	r2,-4(fp)
   10388:	10800017 	ldw	r2,0(r2)
   1038c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	10c00a04 	addi	r3,r2,40
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	10800217 	ldw	r2,8(r2)
   103a0:	100b883a 	mov	r5,r2
   103a4:	1809883a 	mov	r4,r3
   103a8:	00107800 	call	10780 <altera_avalon_jtag_uart_close>
}
   103ac:	e037883a 	mov	sp,fp
   103b0:	dfc00117 	ldw	ra,4(sp)
   103b4:	df000017 	ldw	fp,0(sp)
   103b8:	dec00204 	addi	sp,sp,8
   103bc:	f800283a 	ret

000103c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   103c0:	defffa04 	addi	sp,sp,-24
   103c4:	dfc00515 	stw	ra,20(sp)
   103c8:	df000415 	stw	fp,16(sp)
   103cc:	df000404 	addi	fp,sp,16
   103d0:	e13ffd15 	stw	r4,-12(fp)
   103d4:	e17ffe15 	stw	r5,-8(fp)
   103d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   103dc:	e0bffd17 	ldw	r2,-12(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10800a04 	addi	r2,r2,40
   103f0:	e1bfff17 	ldw	r6,-4(fp)
   103f4:	e17ffe17 	ldw	r5,-8(fp)
   103f8:	1009883a 	mov	r4,r2
   103fc:	00107e80 	call	107e8 <altera_avalon_jtag_uart_ioctl>
}
   10400:	e037883a 	mov	sp,fp
   10404:	dfc00117 	ldw	ra,4(sp)
   10408:	df000017 	ldw	fp,0(sp)
   1040c:	dec00204 	addi	sp,sp,8
   10410:	f800283a 	ret

00010414 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10414:	defffa04 	addi	sp,sp,-24
   10418:	dfc00515 	stw	ra,20(sp)
   1041c:	df000415 	stw	fp,16(sp)
   10420:	df000404 	addi	fp,sp,16
   10424:	e13ffd15 	stw	r4,-12(fp)
   10428:	e17ffe15 	stw	r5,-8(fp)
   1042c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10430:	e0bffd17 	ldw	r2,-12(fp)
   10434:	00c00044 	movi	r3,1
   10438:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1043c:	e0bffd17 	ldw	r2,-12(fp)
   10440:	10800017 	ldw	r2,0(r2)
   10444:	10800104 	addi	r2,r2,4
   10448:	1007883a 	mov	r3,r2
   1044c:	e0bffd17 	ldw	r2,-12(fp)
   10450:	10800817 	ldw	r2,32(r2)
   10454:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10458:	e0bffe17 	ldw	r2,-8(fp)
   1045c:	e0ffff17 	ldw	r3,-4(fp)
   10460:	d8000015 	stw	zero,0(sp)
   10464:	e1fffd17 	ldw	r7,-12(fp)
   10468:	01800074 	movhi	r6,1
   1046c:	31813504 	addi	r6,r6,1236
   10470:	180b883a 	mov	r5,r3
   10474:	1009883a 	mov	r4,r2
   10478:	00112700 	call	11270 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1047c:	e0bffd17 	ldw	r2,-12(fp)
   10480:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10484:	e0bffd17 	ldw	r2,-12(fp)
   10488:	10800204 	addi	r2,r2,8
   1048c:	d0e6de17 	ldw	r3,-25736(gp)
   10490:	e1fffd17 	ldw	r7,-12(fp)
   10494:	01800074 	movhi	r6,1
   10498:	3181b804 	addi	r6,r6,1760
   1049c:	180b883a 	mov	r5,r3
   104a0:	1009883a 	mov	r4,r2
   104a4:	0010e0c0 	call	10e0c <alt_alarm_start>
   104a8:	1000040e 	bge	r2,zero,104bc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   104ac:	e0fffd17 	ldw	r3,-12(fp)
   104b0:	00a00034 	movhi	r2,32768
   104b4:	10bfffc4 	addi	r2,r2,-1
   104b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   104bc:	0001883a 	nop
   104c0:	e037883a 	mov	sp,fp
   104c4:	dfc00117 	ldw	ra,4(sp)
   104c8:	df000017 	ldw	fp,0(sp)
   104cc:	dec00204 	addi	sp,sp,8
   104d0:	f800283a 	ret

000104d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   104d4:	defff804 	addi	sp,sp,-32
   104d8:	df000715 	stw	fp,28(sp)
   104dc:	df000704 	addi	fp,sp,28
   104e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   104e4:	e0bfff17 	ldw	r2,-4(fp)
   104e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   104ec:	e0bffb17 	ldw	r2,-20(fp)
   104f0:	10800017 	ldw	r2,0(r2)
   104f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   104f8:	e0bffc17 	ldw	r2,-16(fp)
   104fc:	10800104 	addi	r2,r2,4
   10500:	10800037 	ldwio	r2,0(r2)
   10504:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	1080c00c 	andi	r2,r2,768
   10510:	10006d26 	beq	r2,zero,106c8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10514:	e0bffd17 	ldw	r2,-12(fp)
   10518:	1080400c 	andi	r2,r2,256
   1051c:	10003526 	beq	r2,zero,105f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10520:	00800074 	movhi	r2,1
   10524:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10528:	e0bffb17 	ldw	r2,-20(fp)
   1052c:	10800a17 	ldw	r2,40(r2)
   10530:	10800044 	addi	r2,r2,1
   10534:	1081ffcc 	andi	r2,r2,2047
   10538:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1053c:	e0bffb17 	ldw	r2,-20(fp)
   10540:	10c00b17 	ldw	r3,44(r2)
   10544:	e0bffe17 	ldw	r2,-8(fp)
   10548:	18801526 	beq	r3,r2,105a0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1054c:	e0bffc17 	ldw	r2,-16(fp)
   10550:	10800037 	ldwio	r2,0(r2)
   10554:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10558:	e0bff917 	ldw	r2,-28(fp)
   1055c:	10a0000c 	andi	r2,r2,32768
   10560:	10001126 	beq	r2,zero,105a8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10564:	e0bffb17 	ldw	r2,-20(fp)
   10568:	10800a17 	ldw	r2,40(r2)
   1056c:	e0fff917 	ldw	r3,-28(fp)
   10570:	1809883a 	mov	r4,r3
   10574:	e0fffb17 	ldw	r3,-20(fp)
   10578:	1885883a 	add	r2,r3,r2
   1057c:	10800e04 	addi	r2,r2,56
   10580:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10584:	e0bffb17 	ldw	r2,-20(fp)
   10588:	10800a17 	ldw	r2,40(r2)
   1058c:	10800044 	addi	r2,r2,1
   10590:	10c1ffcc 	andi	r3,r2,2047
   10594:	e0bffb17 	ldw	r2,-20(fp)
   10598:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1059c:	003fe206 	br	10528 <__alt_exception_stack_pointer+0xf8010528>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   105a0:	0001883a 	nop
   105a4:	00000106 	br	105ac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   105a8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   105ac:	e0bff917 	ldw	r2,-28(fp)
   105b0:	10bfffec 	andhi	r2,r2,65535
   105b4:	10000f26 	beq	r2,zero,105f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   105b8:	e0bffb17 	ldw	r2,-20(fp)
   105bc:	10c00817 	ldw	r3,32(r2)
   105c0:	00bfff84 	movi	r2,-2
   105c4:	1886703a 	and	r3,r3,r2
   105c8:	e0bffb17 	ldw	r2,-20(fp)
   105cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   105d0:	e0bffc17 	ldw	r2,-16(fp)
   105d4:	10800104 	addi	r2,r2,4
   105d8:	1007883a 	mov	r3,r2
   105dc:	e0bffb17 	ldw	r2,-20(fp)
   105e0:	10800817 	ldw	r2,32(r2)
   105e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10800104 	addi	r2,r2,4
   105f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   105f4:	e0bffd17 	ldw	r2,-12(fp)
   105f8:	1080800c 	andi	r2,r2,512
   105fc:	103fbe26 	beq	r2,zero,104f8 <__alt_exception_stack_pointer+0xf80104f8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	1004d43a 	srli	r2,r2,16
   10608:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1060c:	00001406 	br	10660 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10610:	e0bffc17 	ldw	r2,-16(fp)
   10614:	e0fffb17 	ldw	r3,-20(fp)
   10618:	18c00d17 	ldw	r3,52(r3)
   1061c:	e13ffb17 	ldw	r4,-20(fp)
   10620:	20c7883a 	add	r3,r4,r3
   10624:	18c20e04 	addi	r3,r3,2104
   10628:	18c00003 	ldbu	r3,0(r3)
   1062c:	18c03fcc 	andi	r3,r3,255
   10630:	18c0201c 	xori	r3,r3,128
   10634:	18ffe004 	addi	r3,r3,-128
   10638:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1063c:	e0bffb17 	ldw	r2,-20(fp)
   10640:	10800d17 	ldw	r2,52(r2)
   10644:	10800044 	addi	r2,r2,1
   10648:	10c1ffcc 	andi	r3,r2,2047
   1064c:	e0bffb17 	ldw	r2,-20(fp)
   10650:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10654:	e0bffa17 	ldw	r2,-24(fp)
   10658:	10bfffc4 	addi	r2,r2,-1
   1065c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10660:	e0bffa17 	ldw	r2,-24(fp)
   10664:	10000526 	beq	r2,zero,1067c <altera_avalon_jtag_uart_irq+0x1a8>
   10668:	e0bffb17 	ldw	r2,-20(fp)
   1066c:	10c00d17 	ldw	r3,52(r2)
   10670:	e0bffb17 	ldw	r2,-20(fp)
   10674:	10800c17 	ldw	r2,48(r2)
   10678:	18bfe51e 	bne	r3,r2,10610 <__alt_exception_stack_pointer+0xf8010610>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1067c:	e0bffa17 	ldw	r2,-24(fp)
   10680:	103f9d26 	beq	r2,zero,104f8 <__alt_exception_stack_pointer+0xf80104f8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10684:	e0bffb17 	ldw	r2,-20(fp)
   10688:	10c00817 	ldw	r3,32(r2)
   1068c:	00bfff44 	movi	r2,-3
   10690:	1886703a 	and	r3,r3,r2
   10694:	e0bffb17 	ldw	r2,-20(fp)
   10698:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1069c:	e0bffb17 	ldw	r2,-20(fp)
   106a0:	10800017 	ldw	r2,0(r2)
   106a4:	10800104 	addi	r2,r2,4
   106a8:	1007883a 	mov	r3,r2
   106ac:	e0bffb17 	ldw	r2,-20(fp)
   106b0:	10800817 	ldw	r2,32(r2)
   106b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   106b8:	e0bffc17 	ldw	r2,-16(fp)
   106bc:	10800104 	addi	r2,r2,4
   106c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   106c4:	003f8c06 	br	104f8 <__alt_exception_stack_pointer+0xf80104f8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   106c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   106cc:	0001883a 	nop
   106d0:	e037883a 	mov	sp,fp
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00104 	addi	sp,sp,4
   106dc:	f800283a 	ret

000106e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   106e0:	defff804 	addi	sp,sp,-32
   106e4:	df000715 	stw	fp,28(sp)
   106e8:	df000704 	addi	fp,sp,28
   106ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   106f0:	e0bffb17 	ldw	r2,-20(fp)
   106f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   106f8:	e0bff917 	ldw	r2,-28(fp)
   106fc:	10800017 	ldw	r2,0(r2)
   10700:	10800104 	addi	r2,r2,4
   10704:	10800037 	ldwio	r2,0(r2)
   10708:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1070c:	e0bffa17 	ldw	r2,-24(fp)
   10710:	1081000c 	andi	r2,r2,1024
   10714:	10000b26 	beq	r2,zero,10744 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10718:	e0bff917 	ldw	r2,-28(fp)
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	10800104 	addi	r2,r2,4
   10724:	1007883a 	mov	r3,r2
   10728:	e0bff917 	ldw	r2,-28(fp)
   1072c:	10800817 	ldw	r2,32(r2)
   10730:	10810014 	ori	r2,r2,1024
   10734:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10738:	e0bff917 	ldw	r2,-28(fp)
   1073c:	10000915 	stw	zero,36(r2)
   10740:	00000a06 	br	1076c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10744:	e0bff917 	ldw	r2,-28(fp)
   10748:	10c00917 	ldw	r3,36(r2)
   1074c:	00a00034 	movhi	r2,32768
   10750:	10bfff04 	addi	r2,r2,-4
   10754:	10c00536 	bltu	r2,r3,1076c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	10800917 	ldw	r2,36(r2)
   10760:	10c00044 	addi	r3,r2,1
   10764:	e0bff917 	ldw	r2,-28(fp)
   10768:	10c00915 	stw	r3,36(r2)
   1076c:	d0a6de17 	ldw	r2,-25736(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10770:	e037883a 	mov	sp,fp
   10774:	df000017 	ldw	fp,0(sp)
   10778:	dec00104 	addi	sp,sp,4
   1077c:	f800283a 	ret

00010780 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10780:	defffd04 	addi	sp,sp,-12
   10784:	df000215 	stw	fp,8(sp)
   10788:	df000204 	addi	fp,sp,8
   1078c:	e13ffe15 	stw	r4,-8(fp)
   10790:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10794:	00000506 	br	107ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10798:	e0bfff17 	ldw	r2,-4(fp)
   1079c:	1090000c 	andi	r2,r2,16384
   107a0:	10000226 	beq	r2,zero,107ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   107a4:	00bffd44 	movi	r2,-11
   107a8:	00000b06 	br	107d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   107ac:	e0bffe17 	ldw	r2,-8(fp)
   107b0:	10c00d17 	ldw	r3,52(r2)
   107b4:	e0bffe17 	ldw	r2,-8(fp)
   107b8:	10800c17 	ldw	r2,48(r2)
   107bc:	18800526 	beq	r3,r2,107d4 <altera_avalon_jtag_uart_close+0x54>
   107c0:	e0bffe17 	ldw	r2,-8(fp)
   107c4:	10c00917 	ldw	r3,36(r2)
   107c8:	e0bffe17 	ldw	r2,-8(fp)
   107cc:	10800117 	ldw	r2,4(r2)
   107d0:	18bff136 	bltu	r3,r2,10798 <__alt_exception_stack_pointer+0xf8010798>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   107d4:	0005883a 	mov	r2,zero
}
   107d8:	e037883a 	mov	sp,fp
   107dc:	df000017 	ldw	fp,0(sp)
   107e0:	dec00104 	addi	sp,sp,4
   107e4:	f800283a 	ret

000107e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   107e8:	defffa04 	addi	sp,sp,-24
   107ec:	df000515 	stw	fp,20(sp)
   107f0:	df000504 	addi	fp,sp,20
   107f4:	e13ffd15 	stw	r4,-12(fp)
   107f8:	e17ffe15 	stw	r5,-8(fp)
   107fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10800:	00bff9c4 	movi	r2,-25
   10804:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10808:	e0bffe17 	ldw	r2,-8(fp)
   1080c:	10da8060 	cmpeqi	r3,r2,27137
   10810:	1800031e 	bne	r3,zero,10820 <altera_avalon_jtag_uart_ioctl+0x38>
   10814:	109a80a0 	cmpeqi	r2,r2,27138
   10818:	1000181e 	bne	r2,zero,1087c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1081c:	00002906 	br	108c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10820:	e0bffd17 	ldw	r2,-12(fp)
   10824:	10c00117 	ldw	r3,4(r2)
   10828:	00a00034 	movhi	r2,32768
   1082c:	10bfffc4 	addi	r2,r2,-1
   10830:	18802126 	beq	r3,r2,108b8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10834:	e0bfff17 	ldw	r2,-4(fp)
   10838:	10800017 	ldw	r2,0(r2)
   1083c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	10800090 	cmplti	r2,r2,2
   10848:	1000061e 	bne	r2,zero,10864 <altera_avalon_jtag_uart_ioctl+0x7c>
   1084c:	e0fffc17 	ldw	r3,-16(fp)
   10850:	00a00034 	movhi	r2,32768
   10854:	10bfffc4 	addi	r2,r2,-1
   10858:	18800226 	beq	r3,r2,10864 <altera_avalon_jtag_uart_ioctl+0x7c>
   1085c:	e0bffc17 	ldw	r2,-16(fp)
   10860:	00000206 	br	1086c <altera_avalon_jtag_uart_ioctl+0x84>
   10864:	00a00034 	movhi	r2,32768
   10868:	10bfff84 	addi	r2,r2,-2
   1086c:	e0fffd17 	ldw	r3,-12(fp)
   10870:	18800115 	stw	r2,4(r3)
      rc = 0;
   10874:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10878:	00000f06 	br	108b8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	10c00117 	ldw	r3,4(r2)
   10884:	00a00034 	movhi	r2,32768
   10888:	10bfffc4 	addi	r2,r2,-1
   1088c:	18800c26 	beq	r3,r2,108c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10c00917 	ldw	r3,36(r2)
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10800117 	ldw	r2,4(r2)
   108a0:	1885803a 	cmpltu	r2,r3,r2
   108a4:	10c03fcc 	andi	r3,r2,255
   108a8:	e0bfff17 	ldw	r2,-4(fp)
   108ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   108b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   108b4:	00000206 	br	108c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   108b8:	0001883a 	nop
   108bc:	00000106 	br	108c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   108c0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   108c4:	e0bffb17 	ldw	r2,-20(fp)
}
   108c8:	e037883a 	mov	sp,fp
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00104 	addi	sp,sp,4
   108d4:	f800283a 	ret

000108d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   108d8:	defff304 	addi	sp,sp,-52
   108dc:	dfc00c15 	stw	ra,48(sp)
   108e0:	df000b15 	stw	fp,44(sp)
   108e4:	df000b04 	addi	fp,sp,44
   108e8:	e13ffc15 	stw	r4,-16(fp)
   108ec:	e17ffd15 	stw	r5,-12(fp)
   108f0:	e1bffe15 	stw	r6,-8(fp)
   108f4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   108f8:	e0bffd17 	ldw	r2,-12(fp)
   108fc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10900:	00004706 	br	10a20 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	10800a17 	ldw	r2,40(r2)
   1090c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	10800b17 	ldw	r2,44(r2)
   10918:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1091c:	e0fff717 	ldw	r3,-36(fp)
   10920:	e0bff817 	ldw	r2,-32(fp)
   10924:	18800536 	bltu	r3,r2,1093c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10928:	e0fff717 	ldw	r3,-36(fp)
   1092c:	e0bff817 	ldw	r2,-32(fp)
   10930:	1885c83a 	sub	r2,r3,r2
   10934:	e0bff615 	stw	r2,-40(fp)
   10938:	00000406 	br	1094c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1093c:	00c20004 	movi	r3,2048
   10940:	e0bff817 	ldw	r2,-32(fp)
   10944:	1885c83a 	sub	r2,r3,r2
   10948:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1094c:	e0bff617 	ldw	r2,-40(fp)
   10950:	10001e26 	beq	r2,zero,109cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10954:	e0fffe17 	ldw	r3,-8(fp)
   10958:	e0bff617 	ldw	r2,-40(fp)
   1095c:	1880022e 	bgeu	r3,r2,10968 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10960:	e0bffe17 	ldw	r2,-8(fp)
   10964:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10968:	e0bffc17 	ldw	r2,-16(fp)
   1096c:	10c00e04 	addi	r3,r2,56
   10970:	e0bff817 	ldw	r2,-32(fp)
   10974:	1885883a 	add	r2,r3,r2
   10978:	e1bff617 	ldw	r6,-40(fp)
   1097c:	100b883a 	mov	r5,r2
   10980:	e13ff517 	ldw	r4,-44(fp)
   10984:	00084740 	call	8474 <memcpy>
      ptr   += n;
   10988:	e0fff517 	ldw	r3,-44(fp)
   1098c:	e0bff617 	ldw	r2,-40(fp)
   10990:	1885883a 	add	r2,r3,r2
   10994:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10998:	e0fffe17 	ldw	r3,-8(fp)
   1099c:	e0bff617 	ldw	r2,-40(fp)
   109a0:	1885c83a 	sub	r2,r3,r2
   109a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109a8:	e0fff817 	ldw	r3,-32(fp)
   109ac:	e0bff617 	ldw	r2,-40(fp)
   109b0:	1885883a 	add	r2,r3,r2
   109b4:	10c1ffcc 	andi	r3,r2,2047
   109b8:	e0bffc17 	ldw	r2,-16(fp)
   109bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	00bfcf16 	blt	zero,r2,10904 <__alt_exception_stack_pointer+0xf8010904>
   109c8:	00000106 	br	109d0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   109cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   109d0:	e0fff517 	ldw	r3,-44(fp)
   109d4:	e0bffd17 	ldw	r2,-12(fp)
   109d8:	1880141e 	bne	r3,r2,10a2c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   109dc:	e0bfff17 	ldw	r2,-4(fp)
   109e0:	1090000c 	andi	r2,r2,16384
   109e4:	1000131e 	bne	r2,zero,10a34 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   109e8:	0001883a 	nop
   109ec:	e0bffc17 	ldw	r2,-16(fp)
   109f0:	10c00a17 	ldw	r3,40(r2)
   109f4:	e0bff717 	ldw	r2,-36(fp)
   109f8:	1880051e 	bne	r3,r2,10a10 <altera_avalon_jtag_uart_read+0x138>
   109fc:	e0bffc17 	ldw	r2,-16(fp)
   10a00:	10c00917 	ldw	r3,36(r2)
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10800117 	ldw	r2,4(r2)
   10a0c:	18bff736 	bltu	r3,r2,109ec <__alt_exception_stack_pointer+0xf80109ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10a10:	e0bffc17 	ldw	r2,-16(fp)
   10a14:	10c00a17 	ldw	r3,40(r2)
   10a18:	e0bff717 	ldw	r2,-36(fp)
   10a1c:	18800726 	beq	r3,r2,10a3c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10a20:	e0bffe17 	ldw	r2,-8(fp)
   10a24:	00bfb716 	blt	zero,r2,10904 <__alt_exception_stack_pointer+0xf8010904>
   10a28:	00000506 	br	10a40 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10a2c:	0001883a 	nop
   10a30:	00000306 	br	10a40 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10a34:	0001883a 	nop
   10a38:	00000106 	br	10a40 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10a3c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10a40:	e0fff517 	ldw	r3,-44(fp)
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	18801826 	beq	r3,r2,10aac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a4c:	0005303a 	rdctl	r2,status
   10a50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a54:	e0fffb17 	ldw	r3,-20(fp)
   10a58:	00bfff84 	movi	r2,-2
   10a5c:	1884703a 	and	r2,r3,r2
   10a60:	1001703a 	wrctl	status,r2
  
  return context;
   10a64:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10a68:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10800817 	ldw	r2,32(r2)
   10a74:	10c00054 	ori	r3,r2,1
   10a78:	e0bffc17 	ldw	r2,-16(fp)
   10a7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10a80:	e0bffc17 	ldw	r2,-16(fp)
   10a84:	10800017 	ldw	r2,0(r2)
   10a88:	10800104 	addi	r2,r2,4
   10a8c:	1007883a 	mov	r3,r2
   10a90:	e0bffc17 	ldw	r2,-16(fp)
   10a94:	10800817 	ldw	r2,32(r2)
   10a98:	18800035 	stwio	r2,0(r3)
   10a9c:	e0bffa17 	ldw	r2,-24(fp)
   10aa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10aa4:	e0bff917 	ldw	r2,-28(fp)
   10aa8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10aac:	e0fff517 	ldw	r3,-44(fp)
   10ab0:	e0bffd17 	ldw	r2,-12(fp)
   10ab4:	18800426 	beq	r3,r2,10ac8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10ab8:	e0fff517 	ldw	r3,-44(fp)
   10abc:	e0bffd17 	ldw	r2,-12(fp)
   10ac0:	1885c83a 	sub	r2,r3,r2
   10ac4:	00000606 	br	10ae0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	1090000c 	andi	r2,r2,16384
   10ad0:	10000226 	beq	r2,zero,10adc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10ad4:	00bffd44 	movi	r2,-11
   10ad8:	00000106 	br	10ae0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10adc:	00bffec4 	movi	r2,-5
}
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	dfc00117 	ldw	ra,4(sp)
   10ae8:	df000017 	ldw	fp,0(sp)
   10aec:	dec00204 	addi	sp,sp,8
   10af0:	f800283a 	ret

00010af4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10af4:	defff304 	addi	sp,sp,-52
   10af8:	dfc00c15 	stw	ra,48(sp)
   10afc:	df000b15 	stw	fp,44(sp)
   10b00:	df000b04 	addi	fp,sp,44
   10b04:	e13ffc15 	stw	r4,-16(fp)
   10b08:	e17ffd15 	stw	r5,-12(fp)
   10b0c:	e1bffe15 	stw	r6,-8(fp)
   10b10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10b14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10b20:	00003706 	br	10c00 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10b24:	e0bffc17 	ldw	r2,-16(fp)
   10b28:	10800c17 	ldw	r2,48(r2)
   10b2c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10b30:	e0bffc17 	ldw	r2,-16(fp)
   10b34:	10800d17 	ldw	r2,52(r2)
   10b38:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10b3c:	e0fff917 	ldw	r3,-28(fp)
   10b40:	e0bff517 	ldw	r2,-44(fp)
   10b44:	1880062e 	bgeu	r3,r2,10b60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10b48:	e0fff517 	ldw	r3,-44(fp)
   10b4c:	e0bff917 	ldw	r2,-28(fp)
   10b50:	1885c83a 	sub	r2,r3,r2
   10b54:	10bfffc4 	addi	r2,r2,-1
   10b58:	e0bff615 	stw	r2,-40(fp)
   10b5c:	00000b06 	br	10b8c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10b60:	e0bff517 	ldw	r2,-44(fp)
   10b64:	10000526 	beq	r2,zero,10b7c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10b68:	00c20004 	movi	r3,2048
   10b6c:	e0bff917 	ldw	r2,-28(fp)
   10b70:	1885c83a 	sub	r2,r3,r2
   10b74:	e0bff615 	stw	r2,-40(fp)
   10b78:	00000406 	br	10b8c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10b7c:	00c1ffc4 	movi	r3,2047
   10b80:	e0bff917 	ldw	r2,-28(fp)
   10b84:	1885c83a 	sub	r2,r3,r2
   10b88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10b8c:	e0bff617 	ldw	r2,-40(fp)
   10b90:	10001e26 	beq	r2,zero,10c0c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10b94:	e0fffe17 	ldw	r3,-8(fp)
   10b98:	e0bff617 	ldw	r2,-40(fp)
   10b9c:	1880022e 	bgeu	r3,r2,10ba8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10ba0:	e0bffe17 	ldw	r2,-8(fp)
   10ba4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10ba8:	e0bffc17 	ldw	r2,-16(fp)
   10bac:	10c20e04 	addi	r3,r2,2104
   10bb0:	e0bff917 	ldw	r2,-28(fp)
   10bb4:	1885883a 	add	r2,r3,r2
   10bb8:	e1bff617 	ldw	r6,-40(fp)
   10bbc:	e17ffd17 	ldw	r5,-12(fp)
   10bc0:	1009883a 	mov	r4,r2
   10bc4:	00084740 	call	8474 <memcpy>
      ptr   += n;
   10bc8:	e0fffd17 	ldw	r3,-12(fp)
   10bcc:	e0bff617 	ldw	r2,-40(fp)
   10bd0:	1885883a 	add	r2,r3,r2
   10bd4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10bd8:	e0fffe17 	ldw	r3,-8(fp)
   10bdc:	e0bff617 	ldw	r2,-40(fp)
   10be0:	1885c83a 	sub	r2,r3,r2
   10be4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10be8:	e0fff917 	ldw	r3,-28(fp)
   10bec:	e0bff617 	ldw	r2,-40(fp)
   10bf0:	1885883a 	add	r2,r3,r2
   10bf4:	10c1ffcc 	andi	r3,r2,2047
   10bf8:	e0bffc17 	ldw	r2,-16(fp)
   10bfc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	00bfc716 	blt	zero,r2,10b24 <__alt_exception_stack_pointer+0xf8010b24>
   10c08:	00000106 	br	10c10 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10c0c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c10:	0005303a 	rdctl	r2,status
   10c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c18:	e0fffb17 	ldw	r3,-20(fp)
   10c1c:	00bfff84 	movi	r2,-2
   10c20:	1884703a 	and	r2,r3,r2
   10c24:	1001703a 	wrctl	status,r2
  
  return context;
   10c28:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10c2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	10800817 	ldw	r2,32(r2)
   10c38:	10c00094 	ori	r3,r2,2
   10c3c:	e0bffc17 	ldw	r2,-16(fp)
   10c40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10c44:	e0bffc17 	ldw	r2,-16(fp)
   10c48:	10800017 	ldw	r2,0(r2)
   10c4c:	10800104 	addi	r2,r2,4
   10c50:	1007883a 	mov	r3,r2
   10c54:	e0bffc17 	ldw	r2,-16(fp)
   10c58:	10800817 	ldw	r2,32(r2)
   10c5c:	18800035 	stwio	r2,0(r3)
   10c60:	e0bffa17 	ldw	r2,-24(fp)
   10c64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c68:	e0bff817 	ldw	r2,-32(fp)
   10c6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10c70:	e0bffe17 	ldw	r2,-8(fp)
   10c74:	0080100e 	bge	zero,r2,10cb8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10c78:	e0bfff17 	ldw	r2,-4(fp)
   10c7c:	1090000c 	andi	r2,r2,16384
   10c80:	1000101e 	bne	r2,zero,10cc4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10c84:	0001883a 	nop
   10c88:	e0bffc17 	ldw	r2,-16(fp)
   10c8c:	10c00d17 	ldw	r3,52(r2)
   10c90:	e0bff517 	ldw	r2,-44(fp)
   10c94:	1880051e 	bne	r3,r2,10cac <altera_avalon_jtag_uart_write+0x1b8>
   10c98:	e0bffc17 	ldw	r2,-16(fp)
   10c9c:	10c00917 	ldw	r3,36(r2)
   10ca0:	e0bffc17 	ldw	r2,-16(fp)
   10ca4:	10800117 	ldw	r2,4(r2)
   10ca8:	18bff736 	bltu	r3,r2,10c88 <__alt_exception_stack_pointer+0xf8010c88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10cac:	e0bffc17 	ldw	r2,-16(fp)
   10cb0:	10800917 	ldw	r2,36(r2)
   10cb4:	1000051e 	bne	r2,zero,10ccc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10cb8:	e0bffe17 	ldw	r2,-8(fp)
   10cbc:	00bfd016 	blt	zero,r2,10c00 <__alt_exception_stack_pointer+0xf8010c00>
   10cc0:	00000306 	br	10cd0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10cc4:	0001883a 	nop
   10cc8:	00000106 	br	10cd0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10ccc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10cd0:	e0fffd17 	ldw	r3,-12(fp)
   10cd4:	e0bff717 	ldw	r2,-36(fp)
   10cd8:	18800426 	beq	r3,r2,10cec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10cdc:	e0fffd17 	ldw	r3,-12(fp)
   10ce0:	e0bff717 	ldw	r2,-36(fp)
   10ce4:	1885c83a 	sub	r2,r3,r2
   10ce8:	00000606 	br	10d04 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10cec:	e0bfff17 	ldw	r2,-4(fp)
   10cf0:	1090000c 	andi	r2,r2,16384
   10cf4:	10000226 	beq	r2,zero,10d00 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10cf8:	00bffd44 	movi	r2,-11
   10cfc:	00000106 	br	10d04 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10d00:	00bffec4 	movi	r2,-5
}
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10d18:	defffa04 	addi	sp,sp,-24
   10d1c:	dfc00515 	stw	ra,20(sp)
   10d20:	df000415 	stw	fp,16(sp)
   10d24:	df000404 	addi	fp,sp,16
   10d28:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10d2c:	0007883a 	mov	r3,zero
   10d30:	e0bfff17 	ldw	r2,-4(fp)
   10d34:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	10800104 	addi	r2,r2,4
   10d40:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d44:	0005303a 	rdctl	r2,status
   10d48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d4c:	e0fffd17 	ldw	r3,-12(fp)
   10d50:	00bfff84 	movi	r2,-2
   10d54:	1884703a 	and	r2,r3,r2
   10d58:	1001703a 	wrctl	status,r2
  
  return context;
   10d5c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10d60:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10d64:	00119900 	call	11990 <alt_tick>
   10d68:	e0bffc17 	ldw	r2,-16(fp)
   10d6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d70:	e0bffe17 	ldw	r2,-8(fp)
   10d74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10d78:	0001883a 	nop
   10d7c:	e037883a 	mov	sp,fp
   10d80:	dfc00117 	ldw	ra,4(sp)
   10d84:	df000017 	ldw	fp,0(sp)
   10d88:	dec00204 	addi	sp,sp,8
   10d8c:	f800283a 	ret

00010d90 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10d90:	defff804 	addi	sp,sp,-32
   10d94:	dfc00715 	stw	ra,28(sp)
   10d98:	df000615 	stw	fp,24(sp)
   10d9c:	df000604 	addi	fp,sp,24
   10da0:	e13ffc15 	stw	r4,-16(fp)
   10da4:	e17ffd15 	stw	r5,-12(fp)
   10da8:	e1bffe15 	stw	r6,-8(fp)
   10dac:	e1ffff15 	stw	r7,-4(fp)
   10db0:	e0bfff17 	ldw	r2,-4(fp)
   10db4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10db8:	d0a6de17 	ldw	r2,-25736(gp)
   10dbc:	1000021e 	bne	r2,zero,10dc8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10dc0:	e0bffb17 	ldw	r2,-20(fp)
   10dc4:	d0a6de15 	stw	r2,-25736(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10dc8:	e0bffc17 	ldw	r2,-16(fp)
   10dcc:	10800104 	addi	r2,r2,4
   10dd0:	00c001c4 	movi	r3,7
   10dd4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10dd8:	d8000015 	stw	zero,0(sp)
   10ddc:	e1fffc17 	ldw	r7,-16(fp)
   10de0:	01800074 	movhi	r6,1
   10de4:	31834604 	addi	r6,r6,3352
   10de8:	e17ffe17 	ldw	r5,-8(fp)
   10dec:	e13ffd17 	ldw	r4,-12(fp)
   10df0:	00112700 	call	11270 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10df4:	0001883a 	nop
   10df8:	e037883a 	mov	sp,fp
   10dfc:	dfc00117 	ldw	ra,4(sp)
   10e00:	df000017 	ldw	fp,0(sp)
   10e04:	dec00204 	addi	sp,sp,8
   10e08:	f800283a 	ret

00010e0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10e0c:	defff504 	addi	sp,sp,-44
   10e10:	df000a15 	stw	fp,40(sp)
   10e14:	df000a04 	addi	fp,sp,40
   10e18:	e13ffc15 	stw	r4,-16(fp)
   10e1c:	e17ffd15 	stw	r5,-12(fp)
   10e20:	e1bffe15 	stw	r6,-8(fp)
   10e24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10e28:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e2c:	d0a6de17 	ldw	r2,-25736(gp)
  
  if (alt_ticks_per_second ())
   10e30:	10003c26 	beq	r2,zero,10f24 <alt_alarm_start+0x118>
  {
    if (alarm)
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10003826 	beq	r2,zero,10f1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	e0fffe17 	ldw	r3,-8(fp)
   10e44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	e0ffff17 	ldw	r3,-4(fp)
   10e50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e54:	0005303a 	rdctl	r2,status
   10e58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e5c:	e0fff917 	ldw	r3,-28(fp)
   10e60:	00bfff84 	movi	r2,-2
   10e64:	1884703a 	and	r2,r3,r2
   10e68:	1001703a 	wrctl	status,r2
  
  return context;
   10e6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10e70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10e74:	d0a6df17 	ldw	r2,-25732(gp)
      
      current_nticks = alt_nticks();
   10e78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10e7c:	e0fffd17 	ldw	r3,-12(fp)
   10e80:	e0bff617 	ldw	r2,-40(fp)
   10e84:	1885883a 	add	r2,r3,r2
   10e88:	10c00044 	addi	r3,r2,1
   10e8c:	e0bffc17 	ldw	r2,-16(fp)
   10e90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10e94:	e0bffc17 	ldw	r2,-16(fp)
   10e98:	10c00217 	ldw	r3,8(r2)
   10e9c:	e0bff617 	ldw	r2,-40(fp)
   10ea0:	1880042e 	bgeu	r3,r2,10eb4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	00c00044 	movi	r3,1
   10eac:	10c00405 	stb	r3,16(r2)
   10eb0:	00000206 	br	10ebc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10eb4:	e0bffc17 	ldw	r2,-16(fp)
   10eb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10ebc:	e0bffc17 	ldw	r2,-16(fp)
   10ec0:	d0e00f04 	addi	r3,gp,-32708
   10ec4:	e0fffa15 	stw	r3,-24(fp)
   10ec8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10ecc:	e0bffb17 	ldw	r2,-20(fp)
   10ed0:	e0fffa17 	ldw	r3,-24(fp)
   10ed4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10ed8:	e0bffa17 	ldw	r2,-24(fp)
   10edc:	10c00017 	ldw	r3,0(r2)
   10ee0:	e0bffb17 	ldw	r2,-20(fp)
   10ee4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ee8:	e0bffa17 	ldw	r2,-24(fp)
   10eec:	10800017 	ldw	r2,0(r2)
   10ef0:	e0fffb17 	ldw	r3,-20(fp)
   10ef4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10ef8:	e0bffa17 	ldw	r2,-24(fp)
   10efc:	e0fffb17 	ldw	r3,-20(fp)
   10f00:	10c00015 	stw	r3,0(r2)
   10f04:	e0bff817 	ldw	r2,-32(fp)
   10f08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f0c:	e0bff717 	ldw	r2,-36(fp)
   10f10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10f14:	0005883a 	mov	r2,zero
   10f18:	00000306 	br	10f28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10f1c:	00bffa84 	movi	r2,-22
   10f20:	00000106 	br	10f28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10f24:	00bfde84 	movi	r2,-134
  }
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	df000017 	ldw	fp,0(sp)
   10f30:	dec00104 	addi	sp,sp,4
   10f34:	f800283a 	ret

00010f38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10f38:	defffa04 	addi	sp,sp,-24
   10f3c:	dfc00515 	stw	ra,20(sp)
   10f40:	df000415 	stw	fp,16(sp)
   10f44:	df000404 	addi	fp,sp,16
   10f48:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10f4c:	00800244 	movi	r2,9
   10f50:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10f54:	014003f4 	movhi	r5,15
   10f58:	29509004 	addi	r5,r5,16960
   10f5c:	e13ffd17 	ldw	r4,-12(fp)
   10f60:	000cea00 	call	cea0 <__mulsi3>
   10f64:	100b883a 	mov	r5,r2
   10f68:	0100bef4 	movhi	r4,763
   10f6c:	213c2004 	addi	r4,r4,-3968
   10f70:	000cde40 	call	cde4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10f74:	100b883a 	mov	r5,r2
   10f78:	01200034 	movhi	r4,32768
   10f7c:	213fffc4 	addi	r4,r4,-1
   10f80:	000cde40 	call	cde4 <__udivsi3>
   10f84:	100b883a 	mov	r5,r2
   10f88:	e13fff17 	ldw	r4,-4(fp)
   10f8c:	000cde40 	call	cde4 <__udivsi3>
   10f90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10f94:	e0bffe17 	ldw	r2,-8(fp)
   10f98:	10002a26 	beq	r2,zero,11044 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10f9c:	e03ffc15 	stw	zero,-16(fp)
   10fa0:	00001706 	br	11000 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10fa4:	00a00034 	movhi	r2,32768
   10fa8:	10bfffc4 	addi	r2,r2,-1
   10fac:	10bfffc4 	addi	r2,r2,-1
   10fb0:	103ffe1e 	bne	r2,zero,10fac <__alt_exception_stack_pointer+0xf8010fac>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10fb4:	014003f4 	movhi	r5,15
   10fb8:	29509004 	addi	r5,r5,16960
   10fbc:	e13ffd17 	ldw	r4,-12(fp)
   10fc0:	000cea00 	call	cea0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10fc4:	100b883a 	mov	r5,r2
   10fc8:	0100bef4 	movhi	r4,763
   10fcc:	213c2004 	addi	r4,r4,-3968
   10fd0:	000cde40 	call	cde4 <__udivsi3>
   10fd4:	100b883a 	mov	r5,r2
   10fd8:	01200034 	movhi	r4,32768
   10fdc:	213fffc4 	addi	r4,r4,-1
   10fe0:	000cde40 	call	cde4 <__udivsi3>
   10fe4:	1007883a 	mov	r3,r2
   10fe8:	e0bfff17 	ldw	r2,-4(fp)
   10fec:	10c5c83a 	sub	r2,r2,r3
   10ff0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10ff4:	e0bffc17 	ldw	r2,-16(fp)
   10ff8:	10800044 	addi	r2,r2,1
   10ffc:	e0bffc15 	stw	r2,-16(fp)
   11000:	e0fffc17 	ldw	r3,-16(fp)
   11004:	e0bffe17 	ldw	r2,-8(fp)
   11008:	18bfe616 	blt	r3,r2,10fa4 <__alt_exception_stack_pointer+0xf8010fa4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1100c:	014003f4 	movhi	r5,15
   11010:	29509004 	addi	r5,r5,16960
   11014:	e13ffd17 	ldw	r4,-12(fp)
   11018:	000cea00 	call	cea0 <__mulsi3>
   1101c:	100b883a 	mov	r5,r2
   11020:	0100bef4 	movhi	r4,763
   11024:	213c2004 	addi	r4,r4,-3968
   11028:	000cde40 	call	cde4 <__udivsi3>
   1102c:	e17fff17 	ldw	r5,-4(fp)
   11030:	1009883a 	mov	r4,r2
   11034:	000cea00 	call	cea0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11038:	10bfffc4 	addi	r2,r2,-1
   1103c:	103ffe1e 	bne	r2,zero,11038 <__alt_exception_stack_pointer+0xf8011038>
   11040:	00000d06 	br	11078 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11044:	014003f4 	movhi	r5,15
   11048:	29509004 	addi	r5,r5,16960
   1104c:	e13ffd17 	ldw	r4,-12(fp)
   11050:	000cea00 	call	cea0 <__mulsi3>
   11054:	100b883a 	mov	r5,r2
   11058:	0100bef4 	movhi	r4,763
   1105c:	213c2004 	addi	r4,r4,-3968
   11060:	000cde40 	call	cde4 <__udivsi3>
   11064:	e17fff17 	ldw	r5,-4(fp)
   11068:	1009883a 	mov	r4,r2
   1106c:	000cea00 	call	cea0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11070:	10bfffc4 	addi	r2,r2,-1
   11074:	00bffe16 	blt	zero,r2,11070 <__alt_exception_stack_pointer+0xf8011070>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11078:	0005883a 	mov	r2,zero
}
   1107c:	e037883a 	mov	sp,fp
   11080:	dfc00117 	ldw	ra,4(sp)
   11084:	df000017 	ldw	fp,0(sp)
   11088:	dec00204 	addi	sp,sp,8
   1108c:	f800283a 	ret

00011090 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11090:	deffff04 	addi	sp,sp,-4
   11094:	df000015 	stw	fp,0(sp)
   11098:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1109c:	0001883a 	nop
   110a0:	e037883a 	mov	sp,fp
   110a4:	df000017 	ldw	fp,0(sp)
   110a8:	dec00104 	addi	sp,sp,4
   110ac:	f800283a 	ret

000110b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110b0:	defffe04 	addi	sp,sp,-8
   110b4:	dfc00115 	stw	ra,4(sp)
   110b8:	df000015 	stw	fp,0(sp)
   110bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   110c0:	d0a00d17 	ldw	r2,-32716(gp)
   110c4:	10000326 	beq	r2,zero,110d4 <alt_get_errno+0x24>
   110c8:	d0a00d17 	ldw	r2,-32716(gp)
   110cc:	103ee83a 	callr	r2
   110d0:	00000106 	br	110d8 <alt_get_errno+0x28>
   110d4:	d0a6d604 	addi	r2,gp,-25768
}
   110d8:	e037883a 	mov	sp,fp
   110dc:	dfc00117 	ldw	ra,4(sp)
   110e0:	df000017 	ldw	fp,0(sp)
   110e4:	dec00204 	addi	sp,sp,8
   110e8:	f800283a 	ret

000110ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   110ec:	defffa04 	addi	sp,sp,-24
   110f0:	dfc00515 	stw	ra,20(sp)
   110f4:	df000415 	stw	fp,16(sp)
   110f8:	df000404 	addi	fp,sp,16
   110fc:	e13ffe15 	stw	r4,-8(fp)
   11100:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11104:	e0bffe17 	ldw	r2,-8(fp)
   11108:	10000326 	beq	r2,zero,11118 <alt_dev_llist_insert+0x2c>
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	10800217 	ldw	r2,8(r2)
   11114:	1000061e 	bne	r2,zero,11130 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11118:	00110b00 	call	110b0 <alt_get_errno>
   1111c:	1007883a 	mov	r3,r2
   11120:	00800584 	movi	r2,22
   11124:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11128:	00bffa84 	movi	r2,-22
   1112c:	00001306 	br	1117c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	e0ffff17 	ldw	r3,-4(fp)
   11138:	e0fffc15 	stw	r3,-16(fp)
   1113c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11140:	e0bffd17 	ldw	r2,-12(fp)
   11144:	e0fffc17 	ldw	r3,-16(fp)
   11148:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	10c00017 	ldw	r3,0(r2)
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1115c:	e0bffc17 	ldw	r2,-16(fp)
   11160:	10800017 	ldw	r2,0(r2)
   11164:	e0fffd17 	ldw	r3,-12(fp)
   11168:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1116c:	e0bffc17 	ldw	r2,-16(fp)
   11170:	e0fffd17 	ldw	r3,-12(fp)
   11174:	10c00015 	stw	r3,0(r2)

  return 0;  
   11178:	0005883a 	mov	r2,zero
}
   1117c:	e037883a 	mov	sp,fp
   11180:	dfc00117 	ldw	ra,4(sp)
   11184:	df000017 	ldw	fp,0(sp)
   11188:	dec00204 	addi	sp,sp,8
   1118c:	f800283a 	ret

00011190 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11190:	defffd04 	addi	sp,sp,-12
   11194:	dfc00215 	stw	ra,8(sp)
   11198:	df000115 	stw	fp,4(sp)
   1119c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   111a0:	00800074 	movhi	r2,1
   111a4:	10885104 	addi	r2,r2,8516
   111a8:	e0bfff15 	stw	r2,-4(fp)
   111ac:	00000606 	br	111c8 <_do_ctors+0x38>
        (*ctor) (); 
   111b0:	e0bfff17 	ldw	r2,-4(fp)
   111b4:	10800017 	ldw	r2,0(r2)
   111b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   111bc:	e0bfff17 	ldw	r2,-4(fp)
   111c0:	10bfff04 	addi	r2,r2,-4
   111c4:	e0bfff15 	stw	r2,-4(fp)
   111c8:	e0ffff17 	ldw	r3,-4(fp)
   111cc:	00800074 	movhi	r2,1
   111d0:	10885204 	addi	r2,r2,8520
   111d4:	18bff62e 	bgeu	r3,r2,111b0 <__alt_exception_stack_pointer+0xf80111b0>
        (*ctor) (); 
}
   111d8:	0001883a 	nop
   111dc:	e037883a 	mov	sp,fp
   111e0:	dfc00117 	ldw	ra,4(sp)
   111e4:	df000017 	ldw	fp,0(sp)
   111e8:	dec00204 	addi	sp,sp,8
   111ec:	f800283a 	ret

000111f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   111f0:	defffd04 	addi	sp,sp,-12
   111f4:	dfc00215 	stw	ra,8(sp)
   111f8:	df000115 	stw	fp,4(sp)
   111fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11200:	00800074 	movhi	r2,1
   11204:	10885104 	addi	r2,r2,8516
   11208:	e0bfff15 	stw	r2,-4(fp)
   1120c:	00000606 	br	11228 <_do_dtors+0x38>
        (*dtor) (); 
   11210:	e0bfff17 	ldw	r2,-4(fp)
   11214:	10800017 	ldw	r2,0(r2)
   11218:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1121c:	e0bfff17 	ldw	r2,-4(fp)
   11220:	10bfff04 	addi	r2,r2,-4
   11224:	e0bfff15 	stw	r2,-4(fp)
   11228:	e0ffff17 	ldw	r3,-4(fp)
   1122c:	00800074 	movhi	r2,1
   11230:	10885204 	addi	r2,r2,8520
   11234:	18bff62e 	bgeu	r3,r2,11210 <__alt_exception_stack_pointer+0xf8011210>
        (*dtor) (); 
}
   11238:	0001883a 	nop
   1123c:	e037883a 	mov	sp,fp
   11240:	dfc00117 	ldw	ra,4(sp)
   11244:	df000017 	ldw	fp,0(sp)
   11248:	dec00204 	addi	sp,sp,8
   1124c:	f800283a 	ret

00011250 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11250:	deffff04 	addi	sp,sp,-4
   11254:	df000015 	stw	fp,0(sp)
   11258:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1125c:	0001883a 	nop
   11260:	e037883a 	mov	sp,fp
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00104 	addi	sp,sp,4
   1126c:	f800283a 	ret

00011270 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11270:	defff904 	addi	sp,sp,-28
   11274:	dfc00615 	stw	ra,24(sp)
   11278:	df000515 	stw	fp,20(sp)
   1127c:	df000504 	addi	fp,sp,20
   11280:	e13ffc15 	stw	r4,-16(fp)
   11284:	e17ffd15 	stw	r5,-12(fp)
   11288:	e1bffe15 	stw	r6,-8(fp)
   1128c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11290:	e0800217 	ldw	r2,8(fp)
   11294:	d8800015 	stw	r2,0(sp)
   11298:	e1ffff17 	ldw	r7,-4(fp)
   1129c:	e1bffe17 	ldw	r6,-8(fp)
   112a0:	e17ffd17 	ldw	r5,-12(fp)
   112a4:	e13ffc17 	ldw	r4,-16(fp)
   112a8:	00114200 	call	11420 <alt_iic_isr_register>
}  
   112ac:	e037883a 	mov	sp,fp
   112b0:	dfc00117 	ldw	ra,4(sp)
   112b4:	df000017 	ldw	fp,0(sp)
   112b8:	dec00204 	addi	sp,sp,8
   112bc:	f800283a 	ret

000112c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   112c0:	defff904 	addi	sp,sp,-28
   112c4:	df000615 	stw	fp,24(sp)
   112c8:	df000604 	addi	fp,sp,24
   112cc:	e13ffe15 	stw	r4,-8(fp)
   112d0:	e17fff15 	stw	r5,-4(fp)
   112d4:	e0bfff17 	ldw	r2,-4(fp)
   112d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112dc:	0005303a 	rdctl	r2,status
   112e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112e4:	e0fffb17 	ldw	r3,-20(fp)
   112e8:	00bfff84 	movi	r2,-2
   112ec:	1884703a 	and	r2,r3,r2
   112f0:	1001703a 	wrctl	status,r2
  
  return context;
   112f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   112f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   112fc:	00c00044 	movi	r3,1
   11300:	e0bffa17 	ldw	r2,-24(fp)
   11304:	1884983a 	sll	r2,r3,r2
   11308:	1007883a 	mov	r3,r2
   1130c:	d0a6dd17 	ldw	r2,-25740(gp)
   11310:	1884b03a 	or	r2,r3,r2
   11314:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11318:	d0a6dd17 	ldw	r2,-25740(gp)
   1131c:	100170fa 	wrctl	ienable,r2
   11320:	e0bffc17 	ldw	r2,-16(fp)
   11324:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11328:	e0bffd17 	ldw	r2,-12(fp)
   1132c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11330:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11334:	0001883a 	nop
}
   11338:	e037883a 	mov	sp,fp
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00104 	addi	sp,sp,4
   11344:	f800283a 	ret

00011348 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11348:	defff904 	addi	sp,sp,-28
   1134c:	df000615 	stw	fp,24(sp)
   11350:	df000604 	addi	fp,sp,24
   11354:	e13ffe15 	stw	r4,-8(fp)
   11358:	e17fff15 	stw	r5,-4(fp)
   1135c:	e0bfff17 	ldw	r2,-4(fp)
   11360:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11364:	0005303a 	rdctl	r2,status
   11368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1136c:	e0fffb17 	ldw	r3,-20(fp)
   11370:	00bfff84 	movi	r2,-2
   11374:	1884703a 	and	r2,r3,r2
   11378:	1001703a 	wrctl	status,r2
  
  return context;
   1137c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11380:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11384:	00c00044 	movi	r3,1
   11388:	e0bffa17 	ldw	r2,-24(fp)
   1138c:	1884983a 	sll	r2,r3,r2
   11390:	0084303a 	nor	r2,zero,r2
   11394:	1007883a 	mov	r3,r2
   11398:	d0a6dd17 	ldw	r2,-25740(gp)
   1139c:	1884703a 	and	r2,r3,r2
   113a0:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   113a4:	d0a6dd17 	ldw	r2,-25740(gp)
   113a8:	100170fa 	wrctl	ienable,r2
   113ac:	e0bffc17 	ldw	r2,-16(fp)
   113b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113b4:	e0bffd17 	ldw	r2,-12(fp)
   113b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   113bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   113c0:	0001883a 	nop
}
   113c4:	e037883a 	mov	sp,fp
   113c8:	df000017 	ldw	fp,0(sp)
   113cc:	dec00104 	addi	sp,sp,4
   113d0:	f800283a 	ret

000113d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   113d4:	defffc04 	addi	sp,sp,-16
   113d8:	df000315 	stw	fp,12(sp)
   113dc:	df000304 	addi	fp,sp,12
   113e0:	e13ffe15 	stw	r4,-8(fp)
   113e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   113e8:	000530fa 	rdctl	r2,ienable
   113ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   113f0:	00c00044 	movi	r3,1
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	1884983a 	sll	r2,r3,r2
   113fc:	1007883a 	mov	r3,r2
   11400:	e0bffd17 	ldw	r2,-12(fp)
   11404:	1884703a 	and	r2,r3,r2
   11408:	1004c03a 	cmpne	r2,r2,zero
   1140c:	10803fcc 	andi	r2,r2,255
}
   11410:	e037883a 	mov	sp,fp
   11414:	df000017 	ldw	fp,0(sp)
   11418:	dec00104 	addi	sp,sp,4
   1141c:	f800283a 	ret

00011420 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11420:	defff504 	addi	sp,sp,-44
   11424:	dfc00a15 	stw	ra,40(sp)
   11428:	df000915 	stw	fp,36(sp)
   1142c:	df000904 	addi	fp,sp,36
   11430:	e13ffc15 	stw	r4,-16(fp)
   11434:	e17ffd15 	stw	r5,-12(fp)
   11438:	e1bffe15 	stw	r6,-8(fp)
   1143c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11440:	00bffa84 	movi	r2,-22
   11444:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11450:	e0bff817 	ldw	r2,-32(fp)
   11454:	10800808 	cmpgei	r2,r2,32
   11458:	1000271e 	bne	r2,zero,114f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1145c:	0005303a 	rdctl	r2,status
   11460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11464:	e0fffb17 	ldw	r3,-20(fp)
   11468:	00bfff84 	movi	r2,-2
   1146c:	1884703a 	and	r2,r3,r2
   11470:	1001703a 	wrctl	status,r2
  
  return context;
   11474:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11478:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1147c:	00800074 	movhi	r2,1
   11480:	1098b104 	addi	r2,r2,25284
   11484:	e0fff817 	ldw	r3,-32(fp)
   11488:	180690fa 	slli	r3,r3,3
   1148c:	10c5883a 	add	r2,r2,r3
   11490:	e0fffe17 	ldw	r3,-8(fp)
   11494:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11498:	00800074 	movhi	r2,1
   1149c:	1098b104 	addi	r2,r2,25284
   114a0:	e0fff817 	ldw	r3,-32(fp)
   114a4:	180690fa 	slli	r3,r3,3
   114a8:	10c5883a 	add	r2,r2,r3
   114ac:	10800104 	addi	r2,r2,4
   114b0:	e0ffff17 	ldw	r3,-4(fp)
   114b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   114b8:	e0bffe17 	ldw	r2,-8(fp)
   114bc:	10000526 	beq	r2,zero,114d4 <alt_iic_isr_register+0xb4>
   114c0:	e0bff817 	ldw	r2,-32(fp)
   114c4:	100b883a 	mov	r5,r2
   114c8:	e13ffc17 	ldw	r4,-16(fp)
   114cc:	00112c00 	call	112c0 <alt_ic_irq_enable>
   114d0:	00000406 	br	114e4 <alt_iic_isr_register+0xc4>
   114d4:	e0bff817 	ldw	r2,-32(fp)
   114d8:	100b883a 	mov	r5,r2
   114dc:	e13ffc17 	ldw	r4,-16(fp)
   114e0:	00113480 	call	11348 <alt_ic_irq_disable>
   114e4:	e0bff715 	stw	r2,-36(fp)
   114e8:	e0bffa17 	ldw	r2,-24(fp)
   114ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114f0:	e0bff917 	ldw	r2,-28(fp)
   114f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   114f8:	e0bff717 	ldw	r2,-36(fp)
}
   114fc:	e037883a 	mov	sp,fp
   11500:	dfc00117 	ldw	ra,4(sp)
   11504:	df000017 	ldw	fp,0(sp)
   11508:	dec00204 	addi	sp,sp,8
   1150c:	f800283a 	ret

00011510 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11510:	defff804 	addi	sp,sp,-32
   11514:	dfc00715 	stw	ra,28(sp)
   11518:	df000615 	stw	fp,24(sp)
   1151c:	dc000515 	stw	r16,20(sp)
   11520:	df000604 	addi	fp,sp,24
   11524:	e13ffb15 	stw	r4,-20(fp)
   11528:	e17ffc15 	stw	r5,-16(fp)
   1152c:	e1bffd15 	stw	r6,-12(fp)
   11530:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11534:	e1bffe17 	ldw	r6,-8(fp)
   11538:	e17ffd17 	ldw	r5,-12(fp)
   1153c:	e13ffc17 	ldw	r4,-16(fp)
   11540:	00117980 	call	11798 <open>
   11544:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11548:	e0bffa17 	ldw	r2,-24(fp)
   1154c:	10002216 	blt	r2,zero,115d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11550:	04000074 	movhi	r16,1
   11554:	840d4e04 	addi	r16,r16,13624
   11558:	e0bffa17 	ldw	r2,-24(fp)
   1155c:	01400304 	movi	r5,12
   11560:	1009883a 	mov	r4,r2
   11564:	000cea00 	call	cea0 <__mulsi3>
   11568:	8085883a 	add	r2,r16,r2
   1156c:	10c00017 	ldw	r3,0(r2)
   11570:	e0bffb17 	ldw	r2,-20(fp)
   11574:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11578:	04000074 	movhi	r16,1
   1157c:	840d4e04 	addi	r16,r16,13624
   11580:	e0bffa17 	ldw	r2,-24(fp)
   11584:	01400304 	movi	r5,12
   11588:	1009883a 	mov	r4,r2
   1158c:	000cea00 	call	cea0 <__mulsi3>
   11590:	8085883a 	add	r2,r16,r2
   11594:	10800104 	addi	r2,r2,4
   11598:	10c00017 	ldw	r3,0(r2)
   1159c:	e0bffb17 	ldw	r2,-20(fp)
   115a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   115a4:	04000074 	movhi	r16,1
   115a8:	840d4e04 	addi	r16,r16,13624
   115ac:	e0bffa17 	ldw	r2,-24(fp)
   115b0:	01400304 	movi	r5,12
   115b4:	1009883a 	mov	r4,r2
   115b8:	000cea00 	call	cea0 <__mulsi3>
   115bc:	8085883a 	add	r2,r16,r2
   115c0:	10800204 	addi	r2,r2,8
   115c4:	10c00017 	ldw	r3,0(r2)
   115c8:	e0bffb17 	ldw	r2,-20(fp)
   115cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   115d0:	e13ffa17 	ldw	r4,-24(fp)
   115d4:	000fe900 	call	fe90 <alt_release_fd>
  }
} 
   115d8:	0001883a 	nop
   115dc:	e6ffff04 	addi	sp,fp,-4
   115e0:	dfc00217 	ldw	ra,8(sp)
   115e4:	df000117 	ldw	fp,4(sp)
   115e8:	dc000017 	ldw	r16,0(sp)
   115ec:	dec00304 	addi	sp,sp,12
   115f0:	f800283a 	ret

000115f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   115f4:	defffb04 	addi	sp,sp,-20
   115f8:	dfc00415 	stw	ra,16(sp)
   115fc:	df000315 	stw	fp,12(sp)
   11600:	df000304 	addi	fp,sp,12
   11604:	e13ffd15 	stw	r4,-12(fp)
   11608:	e17ffe15 	stw	r5,-8(fp)
   1160c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11610:	01c07fc4 	movi	r7,511
   11614:	01800044 	movi	r6,1
   11618:	e17ffd17 	ldw	r5,-12(fp)
   1161c:	01000074 	movhi	r4,1
   11620:	210d5104 	addi	r4,r4,13636
   11624:	00115100 	call	11510 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11628:	01c07fc4 	movi	r7,511
   1162c:	000d883a 	mov	r6,zero
   11630:	e17ffe17 	ldw	r5,-8(fp)
   11634:	01000074 	movhi	r4,1
   11638:	210d4e04 	addi	r4,r4,13624
   1163c:	00115100 	call	11510 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11640:	01c07fc4 	movi	r7,511
   11644:	01800044 	movi	r6,1
   11648:	e17fff17 	ldw	r5,-4(fp)
   1164c:	01000074 	movhi	r4,1
   11650:	210d5404 	addi	r4,r4,13648
   11654:	00115100 	call	11510 <alt_open_fd>
}  
   11658:	0001883a 	nop
   1165c:	e037883a 	mov	sp,fp
   11660:	dfc00117 	ldw	ra,4(sp)
   11664:	df000017 	ldw	fp,0(sp)
   11668:	dec00204 	addi	sp,sp,8
   1166c:	f800283a 	ret

00011670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11670:	defffe04 	addi	sp,sp,-8
   11674:	dfc00115 	stw	ra,4(sp)
   11678:	df000015 	stw	fp,0(sp)
   1167c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11680:	d0a00d17 	ldw	r2,-32716(gp)
   11684:	10000326 	beq	r2,zero,11694 <alt_get_errno+0x24>
   11688:	d0a00d17 	ldw	r2,-32716(gp)
   1168c:	103ee83a 	callr	r2
   11690:	00000106 	br	11698 <alt_get_errno+0x28>
   11694:	d0a6d604 	addi	r2,gp,-25768
}
   11698:	e037883a 	mov	sp,fp
   1169c:	dfc00117 	ldw	ra,4(sp)
   116a0:	df000017 	ldw	fp,0(sp)
   116a4:	dec00204 	addi	sp,sp,8
   116a8:	f800283a 	ret

000116ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   116ac:	defffb04 	addi	sp,sp,-20
   116b0:	dfc00415 	stw	ra,16(sp)
   116b4:	df000315 	stw	fp,12(sp)
   116b8:	dc000215 	stw	r16,8(sp)
   116bc:	df000304 	addi	fp,sp,12
   116c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   116c4:	e0bffe17 	ldw	r2,-8(fp)
   116c8:	10800217 	ldw	r2,8(r2)
   116cc:	10d00034 	orhi	r3,r2,16384
   116d0:	e0bffe17 	ldw	r2,-8(fp)
   116d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   116d8:	e03ffd15 	stw	zero,-12(fp)
   116dc:	00002306 	br	1176c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   116e0:	04000074 	movhi	r16,1
   116e4:	840d4e04 	addi	r16,r16,13624
   116e8:	e0bffd17 	ldw	r2,-12(fp)
   116ec:	01400304 	movi	r5,12
   116f0:	1009883a 	mov	r4,r2
   116f4:	000cea00 	call	cea0 <__mulsi3>
   116f8:	8085883a 	add	r2,r16,r2
   116fc:	10c00017 	ldw	r3,0(r2)
   11700:	e0bffe17 	ldw	r2,-8(fp)
   11704:	10800017 	ldw	r2,0(r2)
   11708:	1880151e 	bne	r3,r2,11760 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1170c:	04000074 	movhi	r16,1
   11710:	840d4e04 	addi	r16,r16,13624
   11714:	e0bffd17 	ldw	r2,-12(fp)
   11718:	01400304 	movi	r5,12
   1171c:	1009883a 	mov	r4,r2
   11720:	000cea00 	call	cea0 <__mulsi3>
   11724:	8085883a 	add	r2,r16,r2
   11728:	10800204 	addi	r2,r2,8
   1172c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11730:	10000b0e 	bge	r2,zero,11760 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11734:	01400304 	movi	r5,12
   11738:	e13ffd17 	ldw	r4,-12(fp)
   1173c:	000cea00 	call	cea0 <__mulsi3>
   11740:	1007883a 	mov	r3,r2
   11744:	00800074 	movhi	r2,1
   11748:	108d4e04 	addi	r2,r2,13624
   1174c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11750:	e0bffe17 	ldw	r2,-8(fp)
   11754:	18800226 	beq	r3,r2,11760 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11758:	00bffcc4 	movi	r2,-13
   1175c:	00000806 	br	11780 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11760:	e0bffd17 	ldw	r2,-12(fp)
   11764:	10800044 	addi	r2,r2,1
   11768:	e0bffd15 	stw	r2,-12(fp)
   1176c:	d0a00c17 	ldw	r2,-32720(gp)
   11770:	1007883a 	mov	r3,r2
   11774:	e0bffd17 	ldw	r2,-12(fp)
   11778:	18bfd92e 	bgeu	r3,r2,116e0 <__alt_exception_stack_pointer+0xf80116e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1177c:	0005883a 	mov	r2,zero
}
   11780:	e6ffff04 	addi	sp,fp,-4
   11784:	dfc00217 	ldw	ra,8(sp)
   11788:	df000117 	ldw	fp,4(sp)
   1178c:	dc000017 	ldw	r16,0(sp)
   11790:	dec00304 	addi	sp,sp,12
   11794:	f800283a 	ret

00011798 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11798:	defff604 	addi	sp,sp,-40
   1179c:	dfc00915 	stw	ra,36(sp)
   117a0:	df000815 	stw	fp,32(sp)
   117a4:	df000804 	addi	fp,sp,32
   117a8:	e13ffd15 	stw	r4,-12(fp)
   117ac:	e17ffe15 	stw	r5,-8(fp)
   117b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   117b4:	00bfffc4 	movi	r2,-1
   117b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   117bc:	00bffb44 	movi	r2,-19
   117c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   117c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   117c8:	d1600a04 	addi	r5,gp,-32728
   117cc:	e13ffd17 	ldw	r4,-12(fp)
   117d0:	0011abc0 	call	11abc <alt_find_dev>
   117d4:	e0bff815 	stw	r2,-32(fp)
   117d8:	e0bff817 	ldw	r2,-32(fp)
   117dc:	1000051e 	bne	r2,zero,117f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   117e0:	e13ffd17 	ldw	r4,-12(fp)
   117e4:	0011b4c0 	call	11b4c <alt_find_file>
   117e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   117ec:	00800044 	movi	r2,1
   117f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   117f4:	e0bff817 	ldw	r2,-32(fp)
   117f8:	10002b26 	beq	r2,zero,118a8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   117fc:	e13ff817 	ldw	r4,-32(fp)
   11800:	0011c540 	call	11c54 <alt_get_fd>
   11804:	e0bff915 	stw	r2,-28(fp)
   11808:	e0bff917 	ldw	r2,-28(fp)
   1180c:	1000030e 	bge	r2,zero,1181c <open+0x84>
    {
      status = index;
   11810:	e0bff917 	ldw	r2,-28(fp)
   11814:	e0bffa15 	stw	r2,-24(fp)
   11818:	00002506 	br	118b0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1181c:	01400304 	movi	r5,12
   11820:	e13ff917 	ldw	r4,-28(fp)
   11824:	000cea00 	call	cea0 <__mulsi3>
   11828:	1007883a 	mov	r3,r2
   1182c:	00800074 	movhi	r2,1
   11830:	108d4e04 	addi	r2,r2,13624
   11834:	1885883a 	add	r2,r3,r2
   11838:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1183c:	e0fffe17 	ldw	r3,-8(fp)
   11840:	00900034 	movhi	r2,16384
   11844:	10bfffc4 	addi	r2,r2,-1
   11848:	1886703a 	and	r3,r3,r2
   1184c:	e0bffc17 	ldw	r2,-16(fp)
   11850:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11854:	e0bffb17 	ldw	r2,-20(fp)
   11858:	1000051e 	bne	r2,zero,11870 <open+0xd8>
   1185c:	e13ffc17 	ldw	r4,-16(fp)
   11860:	00116ac0 	call	116ac <alt_file_locked>
   11864:	e0bffa15 	stw	r2,-24(fp)
   11868:	e0bffa17 	ldw	r2,-24(fp)
   1186c:	10001016 	blt	r2,zero,118b0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11870:	e0bff817 	ldw	r2,-32(fp)
   11874:	10800317 	ldw	r2,12(r2)
   11878:	10000826 	beq	r2,zero,1189c <open+0x104>
   1187c:	e0bff817 	ldw	r2,-32(fp)
   11880:	10800317 	ldw	r2,12(r2)
   11884:	e1ffff17 	ldw	r7,-4(fp)
   11888:	e1bffe17 	ldw	r6,-8(fp)
   1188c:	e17ffd17 	ldw	r5,-12(fp)
   11890:	e13ffc17 	ldw	r4,-16(fp)
   11894:	103ee83a 	callr	r2
   11898:	00000106 	br	118a0 <open+0x108>
   1189c:	0005883a 	mov	r2,zero
   118a0:	e0bffa15 	stw	r2,-24(fp)
   118a4:	00000206 	br	118b0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   118a8:	00bffb44 	movi	r2,-19
   118ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   118b0:	e0bffa17 	ldw	r2,-24(fp)
   118b4:	1000090e 	bge	r2,zero,118dc <open+0x144>
  {
    alt_release_fd (index);  
   118b8:	e13ff917 	ldw	r4,-28(fp)
   118bc:	000fe900 	call	fe90 <alt_release_fd>
    ALT_ERRNO = -status;
   118c0:	00116700 	call	11670 <alt_get_errno>
   118c4:	1007883a 	mov	r3,r2
   118c8:	e0bffa17 	ldw	r2,-24(fp)
   118cc:	0085c83a 	sub	r2,zero,r2
   118d0:	18800015 	stw	r2,0(r3)
    return -1;
   118d4:	00bfffc4 	movi	r2,-1
   118d8:	00000106 	br	118e0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   118dc:	e0bff917 	ldw	r2,-28(fp)
}
   118e0:	e037883a 	mov	sp,fp
   118e4:	dfc00117 	ldw	ra,4(sp)
   118e8:	df000017 	ldw	fp,0(sp)
   118ec:	dec00204 	addi	sp,sp,8
   118f0:	f800283a 	ret

000118f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   118f4:	defffa04 	addi	sp,sp,-24
   118f8:	df000515 	stw	fp,20(sp)
   118fc:	df000504 	addi	fp,sp,20
   11900:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11904:	0005303a 	rdctl	r2,status
   11908:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1190c:	e0fffc17 	ldw	r3,-16(fp)
   11910:	00bfff84 	movi	r2,-2
   11914:	1884703a 	and	r2,r3,r2
   11918:	1001703a 	wrctl	status,r2
  
  return context;
   1191c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11920:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11924:	e0bfff17 	ldw	r2,-4(fp)
   11928:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1192c:	e0bffd17 	ldw	r2,-12(fp)
   11930:	10800017 	ldw	r2,0(r2)
   11934:	e0fffd17 	ldw	r3,-12(fp)
   11938:	18c00117 	ldw	r3,4(r3)
   1193c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11940:	e0bffd17 	ldw	r2,-12(fp)
   11944:	10800117 	ldw	r2,4(r2)
   11948:	e0fffd17 	ldw	r3,-12(fp)
   1194c:	18c00017 	ldw	r3,0(r3)
   11950:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11954:	e0bffd17 	ldw	r2,-12(fp)
   11958:	e0fffd17 	ldw	r3,-12(fp)
   1195c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11960:	e0bffd17 	ldw	r2,-12(fp)
   11964:	e0fffd17 	ldw	r3,-12(fp)
   11968:	10c00015 	stw	r3,0(r2)
   1196c:	e0bffb17 	ldw	r2,-20(fp)
   11970:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11974:	e0bffe17 	ldw	r2,-8(fp)
   11978:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1197c:	0001883a 	nop
   11980:	e037883a 	mov	sp,fp
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00104 	addi	sp,sp,4
   1198c:	f800283a 	ret

00011990 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11990:	defffb04 	addi	sp,sp,-20
   11994:	dfc00415 	stw	ra,16(sp)
   11998:	df000315 	stw	fp,12(sp)
   1199c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   119a0:	d0a00f17 	ldw	r2,-32708(gp)
   119a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   119a8:	d0a6df17 	ldw	r2,-25732(gp)
   119ac:	10800044 	addi	r2,r2,1
   119b0:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   119b4:	00002e06 	br	11a70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   119b8:	e0bffd17 	ldw	r2,-12(fp)
   119bc:	10800017 	ldw	r2,0(r2)
   119c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   119c4:	e0bffd17 	ldw	r2,-12(fp)
   119c8:	10800403 	ldbu	r2,16(r2)
   119cc:	10803fcc 	andi	r2,r2,255
   119d0:	10000426 	beq	r2,zero,119e4 <alt_tick+0x54>
   119d4:	d0a6df17 	ldw	r2,-25732(gp)
   119d8:	1000021e 	bne	r2,zero,119e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   119dc:	e0bffd17 	ldw	r2,-12(fp)
   119e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   119e4:	e0bffd17 	ldw	r2,-12(fp)
   119e8:	10800217 	ldw	r2,8(r2)
   119ec:	d0e6df17 	ldw	r3,-25732(gp)
   119f0:	18801d36 	bltu	r3,r2,11a68 <alt_tick+0xd8>
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10800403 	ldbu	r2,16(r2)
   119fc:	10803fcc 	andi	r2,r2,255
   11a00:	1000191e 	bne	r2,zero,11a68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11a04:	e0bffd17 	ldw	r2,-12(fp)
   11a08:	10800317 	ldw	r2,12(r2)
   11a0c:	e0fffd17 	ldw	r3,-12(fp)
   11a10:	18c00517 	ldw	r3,20(r3)
   11a14:	1809883a 	mov	r4,r3
   11a18:	103ee83a 	callr	r2
   11a1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11a20:	e0bfff17 	ldw	r2,-4(fp)
   11a24:	1000031e 	bne	r2,zero,11a34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11a28:	e13ffd17 	ldw	r4,-12(fp)
   11a2c:	00118f40 	call	118f4 <alt_alarm_stop>
   11a30:	00000d06 	br	11a68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	10c00217 	ldw	r3,8(r2)
   11a3c:	e0bfff17 	ldw	r2,-4(fp)
   11a40:	1887883a 	add	r3,r3,r2
   11a44:	e0bffd17 	ldw	r2,-12(fp)
   11a48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11a4c:	e0bffd17 	ldw	r2,-12(fp)
   11a50:	10c00217 	ldw	r3,8(r2)
   11a54:	d0a6df17 	ldw	r2,-25732(gp)
   11a58:	1880032e 	bgeu	r3,r2,11a68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11a5c:	e0bffd17 	ldw	r2,-12(fp)
   11a60:	00c00044 	movi	r3,1
   11a64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11a68:	e0bffe17 	ldw	r2,-8(fp)
   11a6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a70:	e0fffd17 	ldw	r3,-12(fp)
   11a74:	d0a00f04 	addi	r2,gp,-32708
   11a78:	18bfcf1e 	bne	r3,r2,119b8 <__alt_exception_stack_pointer+0xf80119b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11a7c:	0001883a 	nop
}
   11a80:	0001883a 	nop
   11a84:	e037883a 	mov	sp,fp
   11a88:	dfc00117 	ldw	ra,4(sp)
   11a8c:	df000017 	ldw	fp,0(sp)
   11a90:	dec00204 	addi	sp,sp,8
   11a94:	f800283a 	ret

00011a98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11a98:	deffff04 	addi	sp,sp,-4
   11a9c:	df000015 	stw	fp,0(sp)
   11aa0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11aa4:	000170fa 	wrctl	ienable,zero
}
   11aa8:	0001883a 	nop
   11aac:	e037883a 	mov	sp,fp
   11ab0:	df000017 	ldw	fp,0(sp)
   11ab4:	dec00104 	addi	sp,sp,4
   11ab8:	f800283a 	ret

00011abc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11abc:	defffa04 	addi	sp,sp,-24
   11ac0:	dfc00515 	stw	ra,20(sp)
   11ac4:	df000415 	stw	fp,16(sp)
   11ac8:	df000404 	addi	fp,sp,16
   11acc:	e13ffe15 	stw	r4,-8(fp)
   11ad0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11ad4:	e0bfff17 	ldw	r2,-4(fp)
   11ad8:	10800017 	ldw	r2,0(r2)
   11adc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11ae0:	e13ffe17 	ldw	r4,-8(fp)
   11ae4:	00031c40 	call	31c4 <strlen>
   11ae8:	10800044 	addi	r2,r2,1
   11aec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11af0:	00000d06 	br	11b28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11af4:	e0bffc17 	ldw	r2,-16(fp)
   11af8:	10800217 	ldw	r2,8(r2)
   11afc:	e0fffd17 	ldw	r3,-12(fp)
   11b00:	180d883a 	mov	r6,r3
   11b04:	e17ffe17 	ldw	r5,-8(fp)
   11b08:	1009883a 	mov	r4,r2
   11b0c:	0011e000 	call	11e00 <memcmp>
   11b10:	1000021e 	bne	r2,zero,11b1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11b14:	e0bffc17 	ldw	r2,-16(fp)
   11b18:	00000706 	br	11b38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11b1c:	e0bffc17 	ldw	r2,-16(fp)
   11b20:	10800017 	ldw	r2,0(r2)
   11b24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11b28:	e0fffc17 	ldw	r3,-16(fp)
   11b2c:	e0bfff17 	ldw	r2,-4(fp)
   11b30:	18bff01e 	bne	r3,r2,11af4 <__alt_exception_stack_pointer+0xf8011af4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11b34:	0005883a 	mov	r2,zero
}
   11b38:	e037883a 	mov	sp,fp
   11b3c:	dfc00117 	ldw	ra,4(sp)
   11b40:	df000017 	ldw	fp,0(sp)
   11b44:	dec00204 	addi	sp,sp,8
   11b48:	f800283a 	ret

00011b4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11b4c:	defffb04 	addi	sp,sp,-20
   11b50:	dfc00415 	stw	ra,16(sp)
   11b54:	df000315 	stw	fp,12(sp)
   11b58:	df000304 	addi	fp,sp,12
   11b5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11b60:	d0a00817 	ldw	r2,-32736(gp)
   11b64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11b68:	00003106 	br	11c30 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11b6c:	e0bffd17 	ldw	r2,-12(fp)
   11b70:	10800217 	ldw	r2,8(r2)
   11b74:	1009883a 	mov	r4,r2
   11b78:	00031c40 	call	31c4 <strlen>
   11b7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11b80:	e0bffd17 	ldw	r2,-12(fp)
   11b84:	10c00217 	ldw	r3,8(r2)
   11b88:	e0bffe17 	ldw	r2,-8(fp)
   11b8c:	10bfffc4 	addi	r2,r2,-1
   11b90:	1885883a 	add	r2,r3,r2
   11b94:	10800003 	ldbu	r2,0(r2)
   11b98:	10803fcc 	andi	r2,r2,255
   11b9c:	1080201c 	xori	r2,r2,128
   11ba0:	10bfe004 	addi	r2,r2,-128
   11ba4:	10800bd8 	cmpnei	r2,r2,47
   11ba8:	1000031e 	bne	r2,zero,11bb8 <alt_find_file+0x6c>
    {
      len -= 1;
   11bac:	e0bffe17 	ldw	r2,-8(fp)
   11bb0:	10bfffc4 	addi	r2,r2,-1
   11bb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11bb8:	e0bffe17 	ldw	r2,-8(fp)
   11bbc:	e0ffff17 	ldw	r3,-4(fp)
   11bc0:	1885883a 	add	r2,r3,r2
   11bc4:	10800003 	ldbu	r2,0(r2)
   11bc8:	10803fcc 	andi	r2,r2,255
   11bcc:	1080201c 	xori	r2,r2,128
   11bd0:	10bfe004 	addi	r2,r2,-128
   11bd4:	10800be0 	cmpeqi	r2,r2,47
   11bd8:	1000081e 	bne	r2,zero,11bfc <alt_find_file+0xb0>
   11bdc:	e0bffe17 	ldw	r2,-8(fp)
   11be0:	e0ffff17 	ldw	r3,-4(fp)
   11be4:	1885883a 	add	r2,r3,r2
   11be8:	10800003 	ldbu	r2,0(r2)
   11bec:	10803fcc 	andi	r2,r2,255
   11bf0:	1080201c 	xori	r2,r2,128
   11bf4:	10bfe004 	addi	r2,r2,-128
   11bf8:	10000a1e 	bne	r2,zero,11c24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11bfc:	e0bffd17 	ldw	r2,-12(fp)
   11c00:	10800217 	ldw	r2,8(r2)
   11c04:	e0fffe17 	ldw	r3,-8(fp)
   11c08:	180d883a 	mov	r6,r3
   11c0c:	e17fff17 	ldw	r5,-4(fp)
   11c10:	1009883a 	mov	r4,r2
   11c14:	0011e000 	call	11e00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11c18:	1000021e 	bne	r2,zero,11c24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11c1c:	e0bffd17 	ldw	r2,-12(fp)
   11c20:	00000706 	br	11c40 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11c24:	e0bffd17 	ldw	r2,-12(fp)
   11c28:	10800017 	ldw	r2,0(r2)
   11c2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11c30:	e0fffd17 	ldw	r3,-12(fp)
   11c34:	d0a00804 	addi	r2,gp,-32736
   11c38:	18bfcc1e 	bne	r3,r2,11b6c <__alt_exception_stack_pointer+0xf8011b6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11c3c:	0005883a 	mov	r2,zero
}
   11c40:	e037883a 	mov	sp,fp
   11c44:	dfc00117 	ldw	ra,4(sp)
   11c48:	df000017 	ldw	fp,0(sp)
   11c4c:	dec00204 	addi	sp,sp,8
   11c50:	f800283a 	ret

00011c54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11c54:	defffa04 	addi	sp,sp,-24
   11c58:	dfc00515 	stw	ra,20(sp)
   11c5c:	df000415 	stw	fp,16(sp)
   11c60:	dc000315 	stw	r16,12(sp)
   11c64:	df000404 	addi	fp,sp,16
   11c68:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11c6c:	00bffa04 	movi	r2,-24
   11c70:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c74:	e03ffc15 	stw	zero,-16(fp)
   11c78:	00001d06 	br	11cf0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11c7c:	04000074 	movhi	r16,1
   11c80:	840d4e04 	addi	r16,r16,13624
   11c84:	e0bffc17 	ldw	r2,-16(fp)
   11c88:	01400304 	movi	r5,12
   11c8c:	1009883a 	mov	r4,r2
   11c90:	000cea00 	call	cea0 <__mulsi3>
   11c94:	8085883a 	add	r2,r16,r2
   11c98:	10800017 	ldw	r2,0(r2)
   11c9c:	1000111e 	bne	r2,zero,11ce4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11ca0:	04000074 	movhi	r16,1
   11ca4:	840d4e04 	addi	r16,r16,13624
   11ca8:	e0bffc17 	ldw	r2,-16(fp)
   11cac:	01400304 	movi	r5,12
   11cb0:	1009883a 	mov	r4,r2
   11cb4:	000cea00 	call	cea0 <__mulsi3>
   11cb8:	8085883a 	add	r2,r16,r2
   11cbc:	e0fffe17 	ldw	r3,-8(fp)
   11cc0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11cc4:	d0e00c17 	ldw	r3,-32720(gp)
   11cc8:	e0bffc17 	ldw	r2,-16(fp)
   11ccc:	1880020e 	bge	r3,r2,11cd8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11cd0:	e0bffc17 	ldw	r2,-16(fp)
   11cd4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   11cd8:	e0bffc17 	ldw	r2,-16(fp)
   11cdc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11ce0:	00000606 	br	11cfc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11ce4:	e0bffc17 	ldw	r2,-16(fp)
   11ce8:	10800044 	addi	r2,r2,1
   11cec:	e0bffc15 	stw	r2,-16(fp)
   11cf0:	e0bffc17 	ldw	r2,-16(fp)
   11cf4:	10800810 	cmplti	r2,r2,32
   11cf8:	103fe01e 	bne	r2,zero,11c7c <__alt_exception_stack_pointer+0xf8011c7c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11cfc:	e0bffd17 	ldw	r2,-12(fp)
}
   11d00:	e6ffff04 	addi	sp,fp,-4
   11d04:	dfc00217 	ldw	ra,8(sp)
   11d08:	df000117 	ldw	fp,4(sp)
   11d0c:	dc000017 	ldw	r16,0(sp)
   11d10:	dec00304 	addi	sp,sp,12
   11d14:	f800283a 	ret

00011d18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11d18:	defffe04 	addi	sp,sp,-8
   11d1c:	df000115 	stw	fp,4(sp)
   11d20:	df000104 	addi	fp,sp,4
   11d24:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11d28:	e0bfff17 	ldw	r2,-4(fp)
   11d2c:	10bffe84 	addi	r2,r2,-6
   11d30:	10c00428 	cmpgeui	r3,r2,16
   11d34:	18001a1e 	bne	r3,zero,11da0 <alt_exception_cause_generated_bad_addr+0x88>
   11d38:	100690ba 	slli	r3,r2,2
   11d3c:	00800074 	movhi	r2,1
   11d40:	10875404 	addi	r2,r2,7504
   11d44:	1885883a 	add	r2,r3,r2
   11d48:	10800017 	ldw	r2,0(r2)
   11d4c:	1000683a 	jmp	r2
   11d50:	00011d90 	cmplti	zero,zero,1142
   11d54:	00011d90 	cmplti	zero,zero,1142
   11d58:	00011da0 	cmpeqi	zero,zero,1142
   11d5c:	00011da0 	cmpeqi	zero,zero,1142
   11d60:	00011da0 	cmpeqi	zero,zero,1142
   11d64:	00011d90 	cmplti	zero,zero,1142
   11d68:	00011d98 	cmpnei	zero,zero,1142
   11d6c:	00011da0 	cmpeqi	zero,zero,1142
   11d70:	00011d90 	cmplti	zero,zero,1142
   11d74:	00011d90 	cmplti	zero,zero,1142
   11d78:	00011da0 	cmpeqi	zero,zero,1142
   11d7c:	00011d90 	cmplti	zero,zero,1142
   11d80:	00011d98 	cmpnei	zero,zero,1142
   11d84:	00011da0 	cmpeqi	zero,zero,1142
   11d88:	00011da0 	cmpeqi	zero,zero,1142
   11d8c:	00011d90 	cmplti	zero,zero,1142
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11d90:	00800044 	movi	r2,1
   11d94:	00000306 	br	11da4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11d98:	0005883a 	mov	r2,zero
   11d9c:	00000106 	br	11da4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11da0:	0005883a 	mov	r2,zero
  }
}
   11da4:	e037883a 	mov	sp,fp
   11da8:	df000017 	ldw	fp,0(sp)
   11dac:	dec00104 	addi	sp,sp,4
   11db0:	f800283a 	ret

00011db4 <atexit>:
   11db4:	200b883a 	mov	r5,r4
   11db8:	000f883a 	mov	r7,zero
   11dbc:	000d883a 	mov	r6,zero
   11dc0:	0009883a 	mov	r4,zero
   11dc4:	0011e7c1 	jmpi	11e7c <__register_exitproc>

00011dc8 <exit>:
   11dc8:	defffe04 	addi	sp,sp,-8
   11dcc:	000b883a 	mov	r5,zero
   11dd0:	dc000015 	stw	r16,0(sp)
   11dd4:	dfc00115 	stw	ra,4(sp)
   11dd8:	2021883a 	mov	r16,r4
   11ddc:	0011f940 	call	11f94 <__call_exitprocs>
   11de0:	00800074 	movhi	r2,1
   11de4:	1091c804 	addi	r2,r2,18208
   11de8:	11000017 	ldw	r4,0(r2)
   11dec:	20800f17 	ldw	r2,60(r4)
   11df0:	10000126 	beq	r2,zero,11df8 <exit+0x30>
   11df4:	103ee83a 	callr	r2
   11df8:	8009883a 	mov	r4,r16
   11dfc:	00121140 	call	12114 <_exit>

00011e00 <memcmp>:
   11e00:	01c000c4 	movi	r7,3
   11e04:	3980192e 	bgeu	r7,r6,11e6c <memcmp+0x6c>
   11e08:	2144b03a 	or	r2,r4,r5
   11e0c:	11c4703a 	and	r2,r2,r7
   11e10:	10000f26 	beq	r2,zero,11e50 <memcmp+0x50>
   11e14:	20800003 	ldbu	r2,0(r4)
   11e18:	28c00003 	ldbu	r3,0(r5)
   11e1c:	10c0151e 	bne	r2,r3,11e74 <memcmp+0x74>
   11e20:	31bfff84 	addi	r6,r6,-2
   11e24:	01ffffc4 	movi	r7,-1
   11e28:	00000406 	br	11e3c <memcmp+0x3c>
   11e2c:	20800003 	ldbu	r2,0(r4)
   11e30:	28c00003 	ldbu	r3,0(r5)
   11e34:	31bfffc4 	addi	r6,r6,-1
   11e38:	10c00e1e 	bne	r2,r3,11e74 <memcmp+0x74>
   11e3c:	21000044 	addi	r4,r4,1
   11e40:	29400044 	addi	r5,r5,1
   11e44:	31fff91e 	bne	r6,r7,11e2c <__alt_exception_stack_pointer+0xf8011e2c>
   11e48:	0005883a 	mov	r2,zero
   11e4c:	f800283a 	ret
   11e50:	20c00017 	ldw	r3,0(r4)
   11e54:	28800017 	ldw	r2,0(r5)
   11e58:	18bfee1e 	bne	r3,r2,11e14 <__alt_exception_stack_pointer+0xf8011e14>
   11e5c:	31bfff04 	addi	r6,r6,-4
   11e60:	21000104 	addi	r4,r4,4
   11e64:	29400104 	addi	r5,r5,4
   11e68:	39bff936 	bltu	r7,r6,11e50 <__alt_exception_stack_pointer+0xf8011e50>
   11e6c:	303fe91e 	bne	r6,zero,11e14 <__alt_exception_stack_pointer+0xf8011e14>
   11e70:	003ff506 	br	11e48 <__alt_exception_stack_pointer+0xf8011e48>
   11e74:	10c5c83a 	sub	r2,r2,r3
   11e78:	f800283a 	ret

00011e7c <__register_exitproc>:
   11e7c:	defffa04 	addi	sp,sp,-24
   11e80:	dc000315 	stw	r16,12(sp)
   11e84:	04000074 	movhi	r16,1
   11e88:	8411c804 	addi	r16,r16,18208
   11e8c:	80c00017 	ldw	r3,0(r16)
   11e90:	dc400415 	stw	r17,16(sp)
   11e94:	dfc00515 	stw	ra,20(sp)
   11e98:	18805217 	ldw	r2,328(r3)
   11e9c:	2023883a 	mov	r17,r4
   11ea0:	10003726 	beq	r2,zero,11f80 <__register_exitproc+0x104>
   11ea4:	10c00117 	ldw	r3,4(r2)
   11ea8:	010007c4 	movi	r4,31
   11eac:	20c00e16 	blt	r4,r3,11ee8 <__register_exitproc+0x6c>
   11eb0:	1a000044 	addi	r8,r3,1
   11eb4:	8800221e 	bne	r17,zero,11f40 <__register_exitproc+0xc4>
   11eb8:	18c00084 	addi	r3,r3,2
   11ebc:	18c7883a 	add	r3,r3,r3
   11ec0:	18c7883a 	add	r3,r3,r3
   11ec4:	12000115 	stw	r8,4(r2)
   11ec8:	10c7883a 	add	r3,r2,r3
   11ecc:	19400015 	stw	r5,0(r3)
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	dfc00517 	ldw	ra,20(sp)
   11ed8:	dc400417 	ldw	r17,16(sp)
   11edc:	dc000317 	ldw	r16,12(sp)
   11ee0:	dec00604 	addi	sp,sp,24
   11ee4:	f800283a 	ret
   11ee8:	00800034 	movhi	r2,0
   11eec:	1089ff04 	addi	r2,r2,10236
   11ef0:	10002626 	beq	r2,zero,11f8c <__register_exitproc+0x110>
   11ef4:	01006404 	movi	r4,400
   11ef8:	d9400015 	stw	r5,0(sp)
   11efc:	d9800115 	stw	r6,4(sp)
   11f00:	d9c00215 	stw	r7,8(sp)
   11f04:	00027fc0 	call	27fc <malloc>
   11f08:	d9400017 	ldw	r5,0(sp)
   11f0c:	d9800117 	ldw	r6,4(sp)
   11f10:	d9c00217 	ldw	r7,8(sp)
   11f14:	10001d26 	beq	r2,zero,11f8c <__register_exitproc+0x110>
   11f18:	81000017 	ldw	r4,0(r16)
   11f1c:	10000115 	stw	zero,4(r2)
   11f20:	02000044 	movi	r8,1
   11f24:	22405217 	ldw	r9,328(r4)
   11f28:	0007883a 	mov	r3,zero
   11f2c:	12400015 	stw	r9,0(r2)
   11f30:	20805215 	stw	r2,328(r4)
   11f34:	10006215 	stw	zero,392(r2)
   11f38:	10006315 	stw	zero,396(r2)
   11f3c:	883fde26 	beq	r17,zero,11eb8 <__alt_exception_stack_pointer+0xf8011eb8>
   11f40:	18c9883a 	add	r4,r3,r3
   11f44:	2109883a 	add	r4,r4,r4
   11f48:	1109883a 	add	r4,r2,r4
   11f4c:	21802215 	stw	r6,136(r4)
   11f50:	01800044 	movi	r6,1
   11f54:	12406217 	ldw	r9,392(r2)
   11f58:	30cc983a 	sll	r6,r6,r3
   11f5c:	4992b03a 	or	r9,r9,r6
   11f60:	12406215 	stw	r9,392(r2)
   11f64:	21c04215 	stw	r7,264(r4)
   11f68:	01000084 	movi	r4,2
   11f6c:	893fd21e 	bne	r17,r4,11eb8 <__alt_exception_stack_pointer+0xf8011eb8>
   11f70:	11006317 	ldw	r4,396(r2)
   11f74:	218cb03a 	or	r6,r4,r6
   11f78:	11806315 	stw	r6,396(r2)
   11f7c:	003fce06 	br	11eb8 <__alt_exception_stack_pointer+0xf8011eb8>
   11f80:	18805304 	addi	r2,r3,332
   11f84:	18805215 	stw	r2,328(r3)
   11f88:	003fc606 	br	11ea4 <__alt_exception_stack_pointer+0xf8011ea4>
   11f8c:	00bfffc4 	movi	r2,-1
   11f90:	003fd006 	br	11ed4 <__alt_exception_stack_pointer+0xf8011ed4>

00011f94 <__call_exitprocs>:
   11f94:	defff504 	addi	sp,sp,-44
   11f98:	df000915 	stw	fp,36(sp)
   11f9c:	dd400615 	stw	r21,24(sp)
   11fa0:	dc800315 	stw	r18,12(sp)
   11fa4:	dfc00a15 	stw	ra,40(sp)
   11fa8:	ddc00815 	stw	r23,32(sp)
   11fac:	dd800715 	stw	r22,28(sp)
   11fb0:	dd000515 	stw	r20,20(sp)
   11fb4:	dcc00415 	stw	r19,16(sp)
   11fb8:	dc400215 	stw	r17,8(sp)
   11fbc:	dc000115 	stw	r16,4(sp)
   11fc0:	d9000015 	stw	r4,0(sp)
   11fc4:	2839883a 	mov	fp,r5
   11fc8:	04800044 	movi	r18,1
   11fcc:	057fffc4 	movi	r21,-1
   11fd0:	00800074 	movhi	r2,1
   11fd4:	1091c804 	addi	r2,r2,18208
   11fd8:	12000017 	ldw	r8,0(r2)
   11fdc:	45005217 	ldw	r20,328(r8)
   11fe0:	44c05204 	addi	r19,r8,328
   11fe4:	a0001c26 	beq	r20,zero,12058 <__call_exitprocs+0xc4>
   11fe8:	a0800117 	ldw	r2,4(r20)
   11fec:	15ffffc4 	addi	r23,r2,-1
   11ff0:	b8000d16 	blt	r23,zero,12028 <__call_exitprocs+0x94>
   11ff4:	14000044 	addi	r16,r2,1
   11ff8:	8421883a 	add	r16,r16,r16
   11ffc:	8421883a 	add	r16,r16,r16
   12000:	84402004 	addi	r17,r16,128
   12004:	a463883a 	add	r17,r20,r17
   12008:	a421883a 	add	r16,r20,r16
   1200c:	e0001e26 	beq	fp,zero,12088 <__call_exitprocs+0xf4>
   12010:	80804017 	ldw	r2,256(r16)
   12014:	e0801c26 	beq	fp,r2,12088 <__call_exitprocs+0xf4>
   12018:	bdffffc4 	addi	r23,r23,-1
   1201c:	843fff04 	addi	r16,r16,-4
   12020:	8c7fff04 	addi	r17,r17,-4
   12024:	bd7ff91e 	bne	r23,r21,1200c <__alt_exception_stack_pointer+0xf801200c>
   12028:	00800034 	movhi	r2,0
   1202c:	108a0404 	addi	r2,r2,10256
   12030:	10000926 	beq	r2,zero,12058 <__call_exitprocs+0xc4>
   12034:	a0800117 	ldw	r2,4(r20)
   12038:	1000301e 	bne	r2,zero,120fc <__call_exitprocs+0x168>
   1203c:	a0800017 	ldw	r2,0(r20)
   12040:	10003226 	beq	r2,zero,1210c <__call_exitprocs+0x178>
   12044:	a009883a 	mov	r4,r20
   12048:	98800015 	stw	r2,0(r19)
   1204c:	00028100 	call	2810 <free>
   12050:	9d000017 	ldw	r20,0(r19)
   12054:	a03fe41e 	bne	r20,zero,11fe8 <__alt_exception_stack_pointer+0xf8011fe8>
   12058:	dfc00a17 	ldw	ra,40(sp)
   1205c:	df000917 	ldw	fp,36(sp)
   12060:	ddc00817 	ldw	r23,32(sp)
   12064:	dd800717 	ldw	r22,28(sp)
   12068:	dd400617 	ldw	r21,24(sp)
   1206c:	dd000517 	ldw	r20,20(sp)
   12070:	dcc00417 	ldw	r19,16(sp)
   12074:	dc800317 	ldw	r18,12(sp)
   12078:	dc400217 	ldw	r17,8(sp)
   1207c:	dc000117 	ldw	r16,4(sp)
   12080:	dec00b04 	addi	sp,sp,44
   12084:	f800283a 	ret
   12088:	a0800117 	ldw	r2,4(r20)
   1208c:	80c00017 	ldw	r3,0(r16)
   12090:	10bfffc4 	addi	r2,r2,-1
   12094:	15c01426 	beq	r2,r23,120e8 <__call_exitprocs+0x154>
   12098:	80000015 	stw	zero,0(r16)
   1209c:	183fde26 	beq	r3,zero,12018 <__alt_exception_stack_pointer+0xf8012018>
   120a0:	95c8983a 	sll	r4,r18,r23
   120a4:	a0806217 	ldw	r2,392(r20)
   120a8:	a5800117 	ldw	r22,4(r20)
   120ac:	2084703a 	and	r2,r4,r2
   120b0:	10000b26 	beq	r2,zero,120e0 <__call_exitprocs+0x14c>
   120b4:	a0806317 	ldw	r2,396(r20)
   120b8:	2088703a 	and	r4,r4,r2
   120bc:	20000c1e 	bne	r4,zero,120f0 <__call_exitprocs+0x15c>
   120c0:	89400017 	ldw	r5,0(r17)
   120c4:	d9000017 	ldw	r4,0(sp)
   120c8:	183ee83a 	callr	r3
   120cc:	a0800117 	ldw	r2,4(r20)
   120d0:	15bfbf1e 	bne	r2,r22,11fd0 <__alt_exception_stack_pointer+0xf8011fd0>
   120d4:	98800017 	ldw	r2,0(r19)
   120d8:	153fcf26 	beq	r2,r20,12018 <__alt_exception_stack_pointer+0xf8012018>
   120dc:	003fbc06 	br	11fd0 <__alt_exception_stack_pointer+0xf8011fd0>
   120e0:	183ee83a 	callr	r3
   120e4:	003ff906 	br	120cc <__alt_exception_stack_pointer+0xf80120cc>
   120e8:	a5c00115 	stw	r23,4(r20)
   120ec:	003feb06 	br	1209c <__alt_exception_stack_pointer+0xf801209c>
   120f0:	89000017 	ldw	r4,0(r17)
   120f4:	183ee83a 	callr	r3
   120f8:	003ff406 	br	120cc <__alt_exception_stack_pointer+0xf80120cc>
   120fc:	a0800017 	ldw	r2,0(r20)
   12100:	a027883a 	mov	r19,r20
   12104:	1029883a 	mov	r20,r2
   12108:	003fb606 	br	11fe4 <__alt_exception_stack_pointer+0xf8011fe4>
   1210c:	0005883a 	mov	r2,zero
   12110:	003ffb06 	br	12100 <__alt_exception_stack_pointer+0xf8012100>

00012114 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12114:	defffd04 	addi	sp,sp,-12
   12118:	df000215 	stw	fp,8(sp)
   1211c:	df000204 	addi	fp,sp,8
   12120:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12124:	0001883a 	nop
   12128:	e0bfff17 	ldw	r2,-4(fp)
   1212c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12130:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12134:	10000226 	beq	r2,zero,12140 <_exit+0x2c>
    ALT_SIM_FAIL();
   12138:	002af070 	cmpltui	zero,zero,43969
   1213c:	00000106 	br	12144 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12140:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12144:	003fff06 	br	12144 <__alt_exception_stack_pointer+0xf8012144>
