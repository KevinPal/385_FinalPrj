
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000157d4 memsz 0x000157d4 flags r-x
    LOAD off    0x000167f4 vaddr 0x000157f4 paddr 0x0001737c align 2**12
         filesz 0x00001b88 memsz 0x00001b88 flags rw-
    LOAD off    0x00018f04 vaddr 0x00018f04 paddr 0x00018f04 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014884  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d34  00014ac0  00014ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b88  000157f4  0001737c  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00018f04  00018f04  00018f04  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00019080  00019080  0001837c  2**0
                  CONTENTS
  7 .frame_buffer 00000000  08000000  08000000  0001837c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  000183a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000270d7  00000000  00000000  000194c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a3e8  00000000  00000000  00040597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d642  00000000  00000000  0004a97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000283c  00000000  00000000  00057fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004300  00000000  00000000  0005a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000198ba  00000000  00000000  0005eb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000783bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019c8  00000000  00000000  00078400  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007d66a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007d66d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007d672  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007d673  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0007d674  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0007d67f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0007d683  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  0007d68e  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0007d697  2**0
                  CONTENTS, READONLY
 27 .jdi          000061b4  00000000  00000000  0007d6bf  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0009f4ea  00000000  00000000  00083873  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00014ac0 l    d  .rodata	00000000 .rodata
000157f4 l    d  .rwdata	00000000 .rwdata
00018f04 l    d  .bss	00000000 .bss
00019080 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .frame_buffer	00000000 .frame_buffer
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00018f04 l     O .bss	00000002 ctl_reg
00018f06 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0001536c l     O .rodata	00000108 two_over_pi
000152ec l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
000154b4 l     O .rodata	00000010 init_jk
00015474 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000157f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001560e l     O .rodata	00000010 zeroes.4404
00009c74 l     F .text	000000bc __sbprintf
0001561e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00009e84 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000b9dc l     F .text	00000008 __fp_unlock
0000b9f0 l     F .text	0000019c __sinit.part.1
0000bb8c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00016040 l     O .rwdata	00000020 lc_ctype_charset
00016020 l     O .rwdata	00000020 lc_message_charset
00016060 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001564c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000e6b8 l     F .text	000000fc __sprint_r.part.0
00015770 l     O .rodata	00000010 zeroes.4349
0000fcf4 l     F .text	000000bc __sbprintf
00015780 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00011e28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011f3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011f68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001205c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012144 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012230 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001240c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017370 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00012680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00012764 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000128a0 l     F .text	00000034 alt_dev_reg
00016240 l     O .rwdata	00001060 jtag_uart_0
000172a0 l     O .rwdata	00000054 pixel_dma
000172f4 l     O .rwdata	00000044 vga_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012e4c l     F .text	0000020c altera_avalon_jtag_uart_irq
00013058 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013690 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013a28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013e88 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013fe8 l     F .text	0000003c alt_get_errno
00014024 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018f54 g     O .bss	00000004 alt_instruction_exception_handler
0000dd50 g     F .text	00000074 _mprec_log10
0000de3c g     F .text	0000008c __any_on
000102a8 g     F .text	00000054 _isatty_r
00015658 g     O .rodata	00000028 __mprec_tinytens
00012348 g     F .text	0000007c alt_main
000077b4 g     F .text	000000c0 _puts_r
00018f80 g     O .bss	00000100 alt_irq
00004ab4 g     F .text	00000014 fabs
000102fc g     F .text	00000060 _lseek_r
0001737c g       *ABS*	00000000 __flash_rwdata_start
000058f4 g     F .text	00000088 .hidden __eqdf2
00019080 g       *ABS*	00000000 __alt_heap_start
0001733c g     O .rwdata	00000004 dma
00007778 g     F .text	0000003c printf
00010514 g     F .text	0000009c _wcrtomb_r
00017338 g     O .rwdata	00000004 gpu
00018f12 g     O .bss	00000002 usb_ctl_val
0000e578 g     F .text	0000005c __sseek
0000bd3c g     F .text	00000010 __sinit
00018f0c g     O .bss	00000004 keycode
000103bc g     F .text	00000140 __swbuf_r
0000c810 g     F .text	0000007c _setlocale_r
0000bb94 g     F .text	00000078 __sfmoreglue
000123e8 g     F .text	00000024 __malloc_unlock
00002b5c g     F .text	00000088 UsbGetRetryCnt
0000cb8c g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
0000bd24 g     F .text	00000018 _cleanup
0000ce10 g     F .text	000000a8 _Balloc
0000597c g     F .text	000000dc .hidden __gtdf2
00014410 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
000126bc g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001024c g     F .text	0000005c _fstat_r
00018f2c g     O .bss	00000004 errno
00004ac8 g     F .text	000001ec floor
0000e4f4 g     F .text	00000008 __seofread
00018f40 g     O .bss	00000004 alt_argv
0001f338 g       *ABS*	00000000 _gp
00012734 g     F .text	00000030 usleep
000160c0 g     O .rwdata	00000180 alt_fd_list
00002e40 g     F .text	0000076c __ieee754_rem_pio2
00014434 g     F .text	00000090 alt_find_dev
00007974 g     F .text	00000008 _times_r
00007600 g     F .text	00000148 memcpy
0000b9e4 g     F .text	0000000c _cleanup_r
00006c40 g     F .text	000000dc .hidden __floatsidf
00013f6c g     F .text	0000007c alt_io_redirect
00018f14 g     O .bss	00000001 data_size
00011c8c g     F .text	000000f4 .hidden __ltdf2
00014ac0 g       *ABS*	00000000 __DTOR_END__
00007874 g     F .text	00000014 puts
00014690 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e42c g     F .text	00000074 __fpclassifyd
0000dcac g     F .text	000000a4 __ratio
0000fcd8 g     F .text	0000001c __vfiprintf_internal
00013250 g     F .text	0000021c altera_avalon_jtag_uart_read
00006dcc g     F .text	00000014 malloc
00007748 g     F .text	00000030 _printf_r
00004f64 g     F .text	00000064 .hidden __udivsi3
00012098 g     F .text	000000ac isatty
000156a8 g     O .rodata	000000c8 __mprec_tens
0000c88c g     F .text	0000000c __locale_charset
000035ac g     F .text	000004a4 __kernel_cos
00018f28 g     O .bss	00000004 __malloc_top_pad
000021e8 g     F .text	00000268 UsbGetConfigDesc2
000013f8 g     F .text	00000074 clear_depth
00017350 g     O .rwdata	00000004 __mb_cur_max
0000c8bc g     F .text	0000000c _localeconv_r
0000d244 g     F .text	0000003c __i2b
0000c1c0 g     F .text	000004c8 __sfvwrite_r
00018f16 g     O .bss	00000002 intStat
00007888 g     F .text	00000054 _sbrk_r
0001035c g     F .text	00000060 _read_r
00017368 g     O .rwdata	00000004 alt_max_fd
0000ff40 g     F .text	000000f0 _fclose_r
0000b9ac g     F .text	00000030 fflush
00018f24 g     O .bss	00000004 __malloc_max_sbrked_mem
000047e8 g     F .text	000002cc __kernel_sin
00005048 g     F .text	000008ac .hidden __adddf3
0000da54 g     F .text	0000010c __b2d
00010cf8 g     F .text	000005c4 .hidden __umoddi3
0001226c g     F .text	000000dc lseek
00017340 g     O .rwdata	00000004 _global_impure_ptr
0000dec8 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00019080 g       *ABS*	00000000 __bss_end
00013d98 g     F .text	000000f0 alt_iic_isr_register
00014308 g     F .text	00000108 alt_tick
000106fc g     F .text	000005fc .hidden __udivdi3
000101a8 g     F .text	00000024 _fputwc_r
00015680 g     O .rodata	00000028 __mprec_bigtens
0000d028 g     F .text	00000104 __s2b
00011d80 g     F .text	000000a8 .hidden __floatunsidf
0000d794 g     F .text	00000060 __mcmp
00001c38 g     F .text	00000100 UsbSetAddress
0000bd5c g     F .text	00000018 __fp_lock_all
00013d4c g     F .text	0000004c alt_ic_irq_enabled
0001426c g     F .text	0000009c alt_alarm_stop
00018f48 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00016098 g     O .rwdata	00000028 alt_dev_null
00003a50 g     F .text	00000d98 __kernel_rem_pio2
00013a08 g     F .text	00000020 alt_dcache_flush_all
0000d12c g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
00006bc0 g     F .text	00000080 .hidden __fixdfsi
0001737c g       *ABS*	00000000 __ram_rwdata_end
00017360 g     O .rwdata	00000008 alt_dev_list
000127a0 g     F .text	00000100 write
000157f4 g       *ABS*	00000000 __ram_rodata_end
00011fa4 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011c8c g     F .text	000000f4 .hidden __ledf2
00002be4 g     F .text	00000080 UsbPrintMem
0000d50c g     F .text	00000140 __pow5mult
0000e7cc g     F .text	0000150c ___vfiprintf_internal_r
00018f38 g     O .bss	00000004 __nlocale_changed
00004fc8 g     F .text	00000058 .hidden __umodsi3
00019080 g       *ABS*	00000000 end
000012a8 g     F .text	000000dc draw_cube
00012d8c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00014ac0 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
00013708 g     F .text	0000007c alt_avalon_timer_sc_init
00006d1c g     F .text	00000064 .hidden __clzsi2
0001346c g     F .text	00000224 altera_avalon_jtag_uart_write
00002c64 g     F .text	000000ec cos
0000bd4c g     F .text	00000004 __sfp_lock_acquire
0000caa8 g     F .text	000000e4 memchr
0000797c g     F .text	000022dc ___vfprintf_internal_r
00002550 g     F .text	00000100 UsbClassRequest
0000beb0 g     F .text	00000310 _free_r
0000c898 g     F .text	00000010 __locale_mb_cur_max
0001490c g     F .text	00000180 __call_exitprocs
00018f34 g     O .bss	00000004 __mlocale_changed
00017348 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00018f4c g     O .bss	00000004 _alt_tick_rate
00002d50 g     F .text	000000f0 sin
0000d64c g     F .text	00000148 __lshift
00018f50 g     O .bss	00000004 _alt_nticks
00012448 g     F .text	00000104 read
0001290c g     F .text	0000031c alt_sys_init
000147f4 g     F .text	00000118 __register_exitproc
0000d280 g     F .text	0000028c __multiply
000130f8 g     F .text	00000068 altera_avalon_jtag_uart_close
00005020 g     F .text	00000028 .hidden __mulsi3
000157f4 g       *ABS*	00000000 __ram_rwdata_start
00014ac0 g       *ABS*	00000000 __ram_rodata_start
00018f58 g     O .bss	00000028 __malloc_current_mallinfo
0000db60 g     F .text	0000014c __d2b
08000000 g       *ABS*	00000000 __alt_mem_frame_buffer
00001d38 g     F .text	00000148 UsbGetDeviceDesc1
00012c28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000145cc g     F .text	000000c4 alt_get_fd
000138b0 g     F .text	00000158 alt_busy_sleep
0000fe10 g     F .text	00000054 _close_r
00014778 g     F .text	0000007c memcmp
00012ce8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019080 g       *ABS*	00000000 __alt_stack_base
00012d38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009d30 g     F .text	00000154 __swsetup_r
000112bc g     F .text	000009d0 .hidden __divdf3
0000bc0c g     F .text	00000118 __sfp
0000ddc4 g     F .text	00000078 __copybits
00015c18 g     O .rwdata	00000408 __malloc_av_
0000bd58 g     F .text	00000004 __sinit_lock_release
00005a58 g     F .text	0000086c .hidden __muldf3
0000e4a0 g     F .text	00000054 __sread
00002ad8 g     F .text	00000084 UsbWaitTDListDone
000144c4 g     F .text	00000108 alt_find_file
00013a64 g     F .text	000000a4 alt_dev_llist_insert
000123c4 g     F .text	00000024 __malloc_lock
000125d0 g     F .text	000000b0 sbrk
0000b950 g     F .text	0000005c _fflush_r
0000fe64 g     F .text	000000dc _calloc_r
00018f18 g     O .bss	00000001 hot_plug_count
00018f04 g       *ABS*	00000000 __bss_start
0000cce8 g     F .text	00000128 memset
0000146c g     F .text	0000067c main
00018f44 g     O .bss	00000004 alt_envp
00018f20 g     O .bss	00000004 __malloc_max_total_mem
00012c88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002450 g     F .text	00000100 UsbSetConfig
000104fc g     F .text	00000018 __swbuf
0000e5d4 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
00010030 g     F .text	00000014 fclose
0000a0ac g     F .text	00001688 _dtoa_r
00006df4 g     F .text	0000080c _malloc_r
00010670 g     F .text	00000030 __ascii_wctomb
0001736c g     O .rwdata	00000004 alt_errno
0000c688 g     F .text	000000c4 _fwalk
00004e6c g     F .text	00000084 .hidden __divsi3
0000bd8c g     F .text	00000124 _malloc_trim_r
00002650 g     F .text	00000148 UsbGetHidDesc
00014ac0 g       *ABS*	00000000 __CTOR_END__
0000e5dc g     F .text	000000dc strcmp
00014ac0 g       *ABS*	00000000 __flash_rodata_start
00014ac0 g       *ABS*	00000000 __DTOR_LIST__
00004e50 g     F .text	0000001c copysign
000058f4 g     F .text	00000088 .hidden __nedf2
00001b40 g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
000128d4 g     F .text	00000038 alt_irq_init
0001254c g     F .text	00000084 alt_release_fd
000154c4 g     O .rodata	00000100 .hidden __clz_tab
00018f30 g     O .bss	00000004 _PathLocale
0001472c g     F .text	00000014 atexit
0000fdb0 g     F .text	00000060 _write_r
0000c8c8 g     F .text	00000018 setlocale
00017344 g     O .rwdata	00000004 _impure_ptr
00018f3c g     O .bss	00000004 alt_argc
0000b734 g     F .text	0000021c __sflush_r
00004cb4 g     F .text	0000019c scalbn
00013b68 g     F .text	00000060 _do_dtors
0000c8b4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000d9f0 g     F .text	00000064 __ulp
0000bd74 g     F .text	00000018 __fp_unlock_all
00018f10 g     O .bss	00000001 toggle
00017358 g     O .rwdata	00000008 alt_fs_list
00018f1c g     O .bss	00000004 offset
00002798 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000c8e0 g     F .text	0000000c localeconv
00013be8 g     F .text	00000050 alt_ic_isr_register
0001737c g       *ABS*	00000000 _edata
00019080 g       *ABS*	00000000 _end
00001ae8 g     F .text	00000058 UsbWrite
00010044 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00013160 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00018f1a g     O .bss	00000002 code
00013cc0 g     F .text	0000008c alt_ic_irq_disable
0000e4fc g     F .text	0000007c __swrite
0001734c g     O .rwdata	00000004 __malloc_trim_threshold
0000c8a8 g     F .text	0000000c __locale_msgcharset
00018f08 g     O .bss	00000002 fs_device
00014740 g     F .text	00000038 exit
0000c74c g     F .text	000000c4 _fwalk_reent
0000d7f4 g     F .text	000001fc __mdiff
00004ef0 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000bd50 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
00014a8c g     F .text	00000034 _exit
00013784 g     F .text	0000012c alt_alarm_start
0000c8ec g     F .text	000001bc __smakebuf_r
000078dc g     F .text	00000098 strlen
00014110 g     F .text	0000015c open
0000597c g     F .text	000000dc .hidden __gedf2
00006d80 g     F .text	0000004c clock
00017354 g     O .rwdata	00000004 __wctomb
0000e7b4 g     F .text	00000018 __sprint_r
00013bc8 g     F .text	00000020 alt_icache_flush_all
00013c38 g     F .text	00000088 alt_ic_irq_enable
00009c58 g     F .text	0000001c __vfprintf_internal
000106a0 g     F .text	0000005c _wctomb_r
00001384 g     F .text	00000074 clear_screen
000062c4 g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
0000d194 g     F .text	000000b0 __lo0bits
00002058 g     F .text	00000190 UsbGetConfigDesc1
00017374 g     O .rwdata	00000008 alt_alarm_list
00013b08 g     F .text	00000060 _do_ctors
00001b84 g     F .text	000000b4 UsbSoftReset
000105b0 g     F .text	000000c0 wcrtomb
00011e64 g     F .text	000000d8 close
00001e80 g     F .text	000001d8 UsbGetDeviceDesc2
000121ac g     F .text	00000084 alt_load
000101cc g     F .text	00000080 fputwc
00006de0 g     F .text	00000014 free
0000bd54 g     F .text	00000004 __sinit_lock_acquire
0000cee0 g     F .text	00000148 __multadd
0000ceb8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008000b4 	movhi	r2,2
 14c:	10a3e004 	addi	r2,r2,-28800
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008000b4 	movhi	r2,2
 164:	10a3e004 	addi	r2,r2,-28800
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a70717 	ldw	r2,-25572(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a70717 	ldw	r2,-25572(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6bcce14 	ori	gp,gp,62264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10a3c114 	ori	r2,r2,36612

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18e42014 	ori	r3,r3,36992

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00121ac0 	call	121ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00123480 	call	12348 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820234 	movhi	r2,2056
     288:	108c0c04 	addi	r2,r2,12336
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820234 	movhi	r2,2056
     298:	108c1004 	addi	r2,r2,12352
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820234 	movhi	r2,2056
     2a8:	108c1804 	addi	r2,r2,12384
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820234 	movhi	r2,2056
     2b8:	108c1404 	addi	r2,r2,12368
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820234 	movhi	r2,2056
     2c8:	108c2004 	addi	r2,r2,12416
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820234 	movhi	r2,2056
     2d4:	108c1c04 	addi	r2,r2,12400
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820234 	movhi	r2,2056
     2e0:	108c1004 	addi	r2,r2,12352
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820234 	movhi	r2,2056
     2ec:	108c0c04 	addi	r2,r2,12336
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820234 	movhi	r2,2056
     2f8:	108c0c04 	addi	r2,r2,12336
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820234 	movhi	r2,2056
     308:	108c1004 	addi	r2,r2,12352
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820234 	movhi	r2,2056
     348:	108c2004 	addi	r2,r2,12416
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820234 	movhi	r2,2056
     358:	108c1c04 	addi	r2,r2,12400
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820234 	movhi	r2,2056
     368:	108c1004 	addi	r2,r2,12352
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820234 	movhi	r2,2056
     374:	108c1404 	addi	r2,r2,12368
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820234 	movhi	r2,2056
     380:	108c1404 	addi	r2,r2,12368
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820234 	movhi	r2,2056
     390:	108c1004 	addi	r2,r2,12352
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820234 	movhi	r2,2056
     3c8:	108c2004 	addi	r2,r2,12416
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820234 	movhi	r2,2056
     3d8:	108c1004 	addi	r2,r2,12352
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820234 	movhi	r2,2056
     3e4:	108c1804 	addi	r2,r2,12384
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820234 	movhi	r2,2056
     3f0:	108c1c04 	addi	r2,r2,12400
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820234 	movhi	r2,2056
     400:	108c1804 	addi	r2,r2,12384
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820234 	movhi	r2,2056
     410:	108c1004 	addi	r2,r2,12352
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a6f603 	ldbu	r2,-25640(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a6f605 	stb	r2,-25640(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a6f703 	ldbu	r2,-25636(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a6f603 	ldbu	r2,-25640(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	0001ae80 	call	1ae8 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a6f703 	ldbu	r2,-25636(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a6f603 	ldbu	r2,-25640(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	0001ae80 	call	1ae8 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	00127340 	call	12734 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	0002ad80 	call	2ad8 <UsbWaitTDListDone>
     58c:	d0a6f68d 	sth	r2,-25638(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	0001b400 	call	1b40 <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a6f515 	stw	r2,-25644(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a6f517 	ldw	r2,-25644(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	2112b004 	addi	r4,r4,19136
     5b0:	00077780 	call	7778 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820234 	movhi	r2,2056
     5b8:	108c2404 	addi	r2,r2,12432
     5bc:	d0e6f517 	ldw	r3,-25644(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a6f517 	ldw	r2,-25644(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	00127340 	call	12734 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a6f30b 	ldhu	r2,-25652(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	0001b400 	call	1b40 <UsbRead>
     5ec:	d0a6f68d 	sth	r2,-25638(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e6f68b 	ldhu	r3,-25638(gp)
     5f4:	d0a6f38b 	ldhu	r2,-25650(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d026f805 	stb	zero,-25632(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	00127340 	call	12734 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a6f30b 	ldhu	r2,-25652(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	0001b400 	call	1b40 <UsbRead>
     624:	d0a6f68d 	sth	r2,-25638(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e6f68b 	ldhu	r3,-25638(gp)
     62c:	d0a6f38b 	ldhu	r2,-25650(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a6f803 	ldbu	r2,-25632(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a6f805 	stb	r2,-25632(gp)
     648:	d0a6f803 	ldbu	r2,-25632(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e6f68b 	ldhu	r3,-25638(gp)
     664:	d0a6f38b 	ldhu	r2,-25650(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	2112b904 	addi	r4,r4,19172
     67c:	00078740 	call	7874 <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	2112c404 	addi	r4,r4,19216
     688:	00078740 	call	7874 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6f30b 	ldhu	r2,-25652(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	0001b400 	call	1b40 <UsbRead>
     6a0:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	00127340 	call	12734 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a6f30b 	ldhu	r2,-25652(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	0001b400 	call	1b40 <UsbRead>
     6bc:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	00127340 	call	12734 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a6f30b 	ldhu	r2,-25652(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	0001b400 	call	1b40 <UsbRead>
     6d8:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	00127340 	call	12734 <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e6f68b 	ldhu	r3,-25638(gp)
     6e8:	d0a6f38b 	ldhu	r2,-25650(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	00127340 	call	12734 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e6f68b 	ldhu	r3,-25638(gp)
     708:	d0a6f38b 	ldhu	r2,-25650(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	2112cc04 	addi	r4,r4,19248
     74c:	00078740 	call	7874 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	0001b840 	call	1b84 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	0001ae80 	call	1ae8 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	0001ae80 	call	1ae8 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a6f68d 	sth	r2,-25638(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a6f68b 	ldhu	r2,-25638(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	0001ae80 	call	1ae8 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a6f78d 	sth	r2,-25634(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a6f78b 	ldhu	r2,-25634(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	0001ae80 	call	1ae8 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	0001ae80 	call	1ae8 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	2112d204 	addi	r4,r4,19272
     8a0:	00077780 	call	7778 <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	2112db04 	addi	r4,r4,19308
     8c4:	00077780 	call	7778 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	0001ae80 	call	1ae8 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	2112d204 	addi	r4,r4,19272
     9b8:	00077780 	call	7778 <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a6f30d 	sth	r2,-25652(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a6f38d 	sth	r2,-25650(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a6f40d 	sth	r2,-25648(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a6f30b 	ldhu	r2,-25652(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	0001b400 	call	1b40 <UsbRead>
     9e8:	d0a6f68d 	sth	r2,-25638(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e6f68b 	ldhu	r3,-25638(gp)
     9f0:	d0a6f38b 	ldhu	r2,-25650(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d026f805 	stb	zero,-25632(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	00127340 	call	12734 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a6f30b 	ldhu	r2,-25652(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	0001b400 	call	1b40 <UsbRead>
     a20:	d0a6f68d 	sth	r2,-25638(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e6f68b 	ldhu	r3,-25638(gp)
     a28:	d0a6f38b 	ldhu	r2,-25650(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a6f803 	ldbu	r2,-25632(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a6f805 	stb	r2,-25632(gp)
     a44:	d0a6f803 	ldbu	r2,-25632(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e6f68b 	ldhu	r3,-25638(gp)
     a60:	d0a6f38b 	ldhu	r2,-25650(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	2112df04 	addi	r4,r4,19324
     a78:	00078740 	call	7874 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	2112e904 	addi	r4,r4,19364
     a84:	00078740 	call	7874 <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a6f30b 	ldhu	r2,-25652(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	0001b400 	call	1b40 <UsbRead>
     a9c:	d0a6f68d 	sth	r2,-25638(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e6f68b 	ldhu	r3,-25638(gp)
     aa4:	d0a6f38b 	ldhu	r2,-25650(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	00127340 	call	12734 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e6f68b 	ldhu	r3,-25638(gp)
     ac4:	d0a6f38b 	ldhu	r2,-25650(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e6f68b 	ldhu	r3,-25638(gp)
     adc:	d0a6f40b 	ldhu	r2,-25648(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	2112f504 	addi	r4,r4,19412
     af4:	00078740 	call	7874 <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	2112fc04 	addi	r4,r4,19440
     b04:	00078740 	call	7874 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	0001c380 	call	1c38 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	0001c380 	call	1c38 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	00127340 	call	12734 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	21130304 	addi	r4,r4,19468
     b58:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a6f68b 	ldhu	r2,-25638(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	21130e04 	addi	r4,r4,19512
     b88:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a6f68b 	ldhu	r2,-25638(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
     ba4:	d0a6f68d 	sth	r2,-25638(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	21131a04 	addi	r4,r4,19560
     bb4:	00078740 	call	7874 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	0001d380 	call	1d38 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	00127340 	call	12734 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	0001d380 	call	1d38 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	00127340 	call	12734 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	21132904 	addi	r4,r4,19620
     c10:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a6f68b 	ldhu	r2,-25638(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	21133404 	addi	r4,r4,19664
     c40:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a6f68b 	ldhu	r2,-25638(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
     c5c:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	21134004 	addi	r4,r4,19712
     c68:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	21134904 	addi	r4,r4,19748
     c78:	00078740 	call	7874 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	0001e800 	call	1e80 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	0001e800 	call	1e80 <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	00127340 	call	12734 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	21132904 	addi	r4,r4,19620
     ccc:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a6f68b 	ldhu	r2,-25638(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	21133404 	addi	r4,r4,19664
     cfc:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a6f68b 	ldhu	r2,-25638(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
     d18:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	21134004 	addi	r4,r4,19712
     d24:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	21135d04 	addi	r4,r4,19828
     d34:	00078740 	call	7874 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	00020580 	call	2058 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	00020580 	call	2058 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	00127340 	call	12734 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	21136f04 	addi	r4,r4,19900
     d88:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a6f68b 	ldhu	r2,-25638(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	21137a04 	addi	r4,r4,19944
     db8:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a6f68b 	ldhu	r2,-25638(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
     dd4:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	21134004 	addi	r4,r4,19712
     de0:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	21138604 	addi	r4,r4,19992
     df0:	00078740 	call	7874 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	00021e80 	call	21e8 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	00127340 	call	12734 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	00021e80 	call	21e8 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	00127340 	call	12734 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	21139904 	addi	r4,r4,20068
     e50:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a6f68b 	ldhu	r2,-25638(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	2113a404 	addi	r4,r4,20112
     e80:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a6f68b 	ldhu	r2,-25638(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
     e9c:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	21134004 	addi	r4,r4,19712
     ea8:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	2113b004 	addi	r4,r4,20160
     eb8:	00078740 	call	7874 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a6f88d 	sth	r2,-25630(gp)
	code = code & 0x003;
     ed4:	d0a6f88b 	ldhu	r2,-25630(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a6f88d 	sth	r2,-25630(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a6f88b 	ldhu	r2,-25630(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	2113c304 	addi	r4,r4,20236
     ef4:	00077780 	call	7778 <printf>

	if (code == 0x01)
     ef8:	d0a6f88b 	ldhu	r2,-25630(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	2113c604 	addi	r4,r4,20248
     f10:	00078740 	call	7874 <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	2113d504 	addi	r4,r4,20308
     f20:	00078740 	call	7874 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	0001ae80 	call	1ae8 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a6f705 	stb	r2,-25636(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a6f703 	ldbu	r2,-25636(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	2113de04 	addi	r4,r4,20344
     fa4:	00077780 	call	7778 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	00024500 	call	2450 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	00024500 	call	2450 <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	00127340 	call	12734 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	2113e804 	addi	r4,r4,20384
     ff8:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a6f68b 	ldhu	r2,-25638(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	2113f304 	addi	r4,r4,20428
    1028:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a6f68b 	ldhu	r2,-25638(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
    1044:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	21134004 	addi	r4,r4,19712
    1050:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	2113ff04 	addi	r4,r4,20476
    1060:	00078740 	call	7874 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	00025500 	call	2550 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	00025500 	call	2550 <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	00127340 	call	12734 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	21141104 	addi	r4,r4,20548
    10b4:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a6f68b 	ldhu	r2,-25638(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	21141c04 	addi	r4,r4,20592
    10e4:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a6f68b 	ldhu	r2,-25638(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
    1100:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	21134004 	addi	r4,r4,19712
    110c:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	21142804 	addi	r4,r4,20640
    111c:	00078740 	call	7874 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	00026500 	call	2650 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	00026500 	call	2650 <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	00127340 	call	12734 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	21141104 	addi	r4,r4,20548
    1170:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a6f68b 	ldhu	r2,-25638(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	21141c04 	addi	r4,r4,20592
    11a0:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a6f68b 	ldhu	r2,-25638(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
    11bc:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	21134004 	addi	r4,r4,19712
    11c8:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	21143a04 	addi	r4,r4,20712
    11d8:	00078740 	call	7874 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	00027980 	call	2798 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	00027980 	call	2798 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	0002ad80 	call	2ad8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	21144e04 	addi	r4,r4,20792
    1224:	00077780 	call	7778 <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a6f68b 	ldhu	r2,-25638(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	21145a04 	addi	r4,r4,20840
    1254:	00077780 	call	7778 <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a6f68b 	ldhu	r2,-25638(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	0002b5c0 	call	2b5c <UsbGetRetryCnt>
    1270:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	21134004 	addi	r4,r4,19712
    127c:	00078740 	call	7874 <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	21146604 	addi	r4,r4,20888
    128c:	00078740 	call	7874 <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <draw_cube>:
#include "math.h"

int offset = 0;

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
    12c8:	e0bffc17 	ldw	r2,-16(fp)
    12cc:	00c00044 	movi	r3,1
    12d0:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
    12d4:	e0bffc17 	ldw	r2,-16(fp)
    12d8:	e0c00317 	ldw	r3,12(fp)
    12dc:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	1006923a 	slli	r3,r2,8
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    12f0:	e0bffe17 	ldw	r2,-8(fp)
    12f4:	1006923a 	slli	r3,r2,8
    12f8:	e0bffc17 	ldw	r2,-16(fp)
    12fc:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	1006923a 	slli	r3,r2,8
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10c00615 	stw	r3,24(r2)
	gpu->z = (z-offset) * (FP_SCALE);
    1310:	d0a6f917 	ldw	r2,-25628(gp)
    1314:	e0c00217 	ldw	r3,8(fp)
    1318:	1885c83a 	sub	r2,r3,r2
    131c:	1006923a 	slli	r3,r2,8
    1320:	e0bffc17 	ldw	r2,-16(fp)
    1324:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	00c00044 	movi	r3,1
    1340:	10c00115 	stw	r3,4(r2)
	time_t start = clock();
    1344:	0006d800 	call	6d80 <clock>
    1348:	e0bffb15 	stw	r2,-20(fp)
	while (gpu->done == 0) {
    134c:	0001883a 	nop
    1350:	e0bffc17 	ldw	r2,-16(fp)
    1354:	10800217 	ldw	r2,8(r2)
    1358:	103ffd26 	beq	r2,zero,1350 <__alt_exception_stack_pointer+0xf8001350>
	}
//	time_t delta = clock() - start;
//	if (delta > 100) {
//		printf("Render ticks %d\n", delta);
//	}
	gpu->done = 0;
    135c:	e0bffc17 	ldw	r2,-16(fp)
    1360:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    1364:	e0bffc17 	ldw	r2,-16(fp)
    1368:	10000815 	stw	zero,32(r2)

}
    136c:	0001883a 	nop
    1370:	e037883a 	mov	sp,fp
    1374:	dfc00117 	ldw	ra,4(sp)
    1378:	df000017 	ldw	fp,0(sp)
    137c:	dec00204 	addi	sp,sp,8
    1380:	f800283a 	ret

00001384 <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    1384:	defffd04 	addi	sp,sp,-12
    1388:	df000215 	stw	fp,8(sp)
    138c:	df000204 	addi	fp,sp,8
    1390:	e13ffe15 	stw	r4,-8(fp)
    1394:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
    1398:	e0bffe17 	ldw	r2,-8(fp)
    139c:	00c00084 	movi	r3,2
    13a0:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    13b4:	e0bffe17 	ldw	r2,-8(fp)
    13b8:	00c00044 	movi	r3,1
    13bc:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10800058 	cmpnei	r2,r2,1
    13c8:	1000041e 	bne	r2,zero,13dc <clear_screen+0x58>
		while (gpu->done == 0) {
    13cc:	0001883a 	nop
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	10800217 	ldw	r2,8(r2)
    13d8:	103ffd26 	beq	r2,zero,13d0 <__alt_exception_stack_pointer+0xf80013d0>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    13dc:	e0bffe17 	ldw	r2,-8(fp)
    13e0:	10000815 	stw	zero,32(r2)
}
    13e4:	0001883a 	nop
    13e8:	e037883a 	mov	sp,fp
    13ec:	df000017 	ldw	fp,0(sp)
    13f0:	dec00104 	addi	sp,sp,4
    13f4:	f800283a 	ret

000013f8 <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
    13f8:	defffd04 	addi	sp,sp,-12
    13fc:	df000215 	stw	fp,8(sp)
    1400:	df000204 	addi	fp,sp,8
    1404:	e13ffe15 	stw	r4,-8(fp)
    1408:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
    140c:	e0bffe17 	ldw	r2,-8(fp)
    1410:	00c000c4 	movi	r3,3
    1414:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1428:	e0bffe17 	ldw	r2,-8(fp)
    142c:	00c00044 	movi	r3,1
    1430:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800058 	cmpnei	r2,r2,1
    143c:	1000041e 	bne	r2,zero,1450 <clear_depth+0x58>
		while (gpu->done == 0) {
    1440:	0001883a 	nop
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	10800217 	ldw	r2,8(r2)
    144c:	103ffd26 	beq	r2,zero,1444 <__alt_exception_stack_pointer+0xf8001444>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	10000815 	stw	zero,32(r2)
}
    1458:	0001883a 	nop
    145c:	e037883a 	mov	sp,fp
    1460:	df000017 	ldw	fp,0(sp)
    1464:	dec00104 	addi	sp,sp,4
    1468:	f800283a 	ret

0000146c <main>:
//	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
//	vga_cont->frame_pointer = gpu->frame_pointer;
//	gpu->frame_pointer = temp;
//}

int main() {
    146c:	deffea04 	addi	sp,sp,-88
    1470:	dfc01515 	stw	ra,84(sp)
    1474:	df001415 	stw	fp,80(sp)
    1478:	dc001315 	stw	r16,76(sp)
    147c:	df001404 	addi	fp,sp,80

	printf("Starting up");
    1480:	01000074 	movhi	r4,1
    1484:	21147a04 	addi	r4,r4,20968
    1488:	00077780 	call	7778 <printf>

	union frame_buffer_t* frame1 = (frame_buffer_t*) FRAME_BUFFER_BASE;
    148c:	00820034 	movhi	r2,2048
    1490:	e0bff615 	stw	r2,-40(fp)
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    1494:	01000174 	movhi	r4,5
    1498:	212c0004 	addi	r4,r4,-20480
    149c:	0006dcc0 	call	6dcc <malloc>
    14a0:	e0bff715 	stw	r2,-36(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    14a4:	01000174 	movhi	r4,5
    14a8:	212c0004 	addi	r4,r4,-20480
    14ac:	0006dcc0 	call	6dcc <malloc>
    14b0:	e0bff815 	stw	r2,-32(fp)

	dma->back_buffer = frame1;
    14b4:	d0a00117 	ldw	r2,-32764(gp)
    14b8:	e0fff617 	ldw	r3,-40(fp)
    14bc:	10c00115 	stw	r3,4(r2)
	dma->front_buffer = 0; //swap
    14c0:	d0a00117 	ldw	r2,-32764(gp)
    14c4:	10000015 	stw	zero,0(r2)

	gpu->frame_pointer = frame2;
    14c8:	d0a00017 	ldw	r2,-32768(gp)
    14cc:	e0fff717 	ldw	r3,-36(fp)
    14d0:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    14d4:	d0a00017 	ldw	r2,-32768(gp)
    14d8:	e0fff817 	ldw	r3,-32(fp)
    14dc:	10c00315 	stw	r3,12(r2)
	//vga_cont->frame_pointer = frame1;

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    14e0:	e1fff817 	ldw	r7,-32(fp)
    14e4:	e1bff717 	ldw	r6,-36(fp)
    14e8:	e17ff617 	ldw	r5,-40(fp)
    14ec:	01000074 	movhi	r4,1
    14f0:	21147d04 	addi	r4,r4,20980
    14f4:	00077780 	call	7778 <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    14f8:	01000074 	movhi	r4,1
    14fc:	21148b04 	addi	r4,r4,21036
    1500:	00078740 	call	7874 <puts>
	init_keyboard();
    1504:	00007300 	call	730 <init_keyboard>

	double theta = 0;
    1508:	e03fee15 	stw	zero,-72(fp)
    150c:	e03fef15 	stw	zero,-68(fp)
	double phi = 0;
    1510:	e03ff015 	stw	zero,-64(fp)
    1514:	e03ff115 	stw	zero,-60(fp)

	int keycode = 0;
    1518:	e03ffe15 	stw	zero,-8(fp)
	while (1) {
		time_t start_time = clock();
    151c:	0006d800 	call	6d80 <clock>
    1520:	e0bff915 	stw	r2,-28(fp)
		clear_depth(gpu, 1);
    1524:	d0a00017 	ldw	r2,-32768(gp)
    1528:	01400044 	movi	r5,1
    152c:	1009883a 	mov	r4,r2
    1530:	00013f80 	call	13f8 <clear_depth>
		clear_screen(gpu, 1);
    1534:	d0a00017 	ldw	r2,-32768(gp)
    1538:	01400044 	movi	r5,1
    153c:	1009883a 	mov	r4,r2
    1540:	00013840 	call	1384 <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    1544:	0006d800 	call	6d80 <clock>
    1548:	1007883a 	mov	r3,r2
    154c:	e0bff917 	ldw	r2,-28(fp)
    1550:	1885c83a 	sub	r2,r3,r2
    1554:	100b883a 	mov	r5,r2
    1558:	01000074 	movhi	r4,1
    155c:	21149504 	addi	r4,r4,21076
    1560:	00077780 	call	7778 <printf>
		start_time = clock();
    1564:	0006d800 	call	6d80 <clock>
    1568:	e0bff915 	stw	r2,-28(fp)

		for(int z = 4; z > 0; z--) {
    156c:	00800104 	movi	r2,4
    1570:	e0bff215 	stw	r2,-56(fp)
    1574:	00001a06 	br	15e0 <main+0x174>
		for(int x = 10; x > -5; x--) {
    1578:	00800284 	movi	r2,10
    157c:	e0bff315 	stw	r2,-52(fp)
    1580:	00001106 	br	15c8 <main+0x15c>
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
    1584:	d0e00017 	ldw	r3,-32768(gp)
    1588:	e0bff317 	ldw	r2,-52(fp)
    158c:	10bfff84 	addi	r2,r2,-2
    1590:	100890fa 	slli	r4,r2,3
    1594:	e0bff217 	ldw	r2,-56(fp)
    1598:	10bffe04 	addi	r2,r2,-8
    159c:	100490fa 	slli	r2,r2,3
    15a0:	d8000115 	stw	zero,4(sp)
    15a4:	d8800015 	stw	r2,0(sp)
    15a8:	01fffc04 	movi	r7,-16
    15ac:	200d883a 	mov	r6,r4
    15b0:	01400204 	movi	r5,8
    15b4:	1809883a 	mov	r4,r3
    15b8:	00012a80 	call	12a8 <draw_cube>
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 4; z > 0; z--) {
		for(int x = 10; x > -5; x--) {
    15bc:	e0bff317 	ldw	r2,-52(fp)
    15c0:	10bfffc4 	addi	r2,r2,-1
    15c4:	e0bff315 	stw	r2,-52(fp)
    15c8:	e0bff317 	ldw	r2,-52(fp)
    15cc:	10bfff08 	cmpgei	r2,r2,-4
    15d0:	103fec1e 	bne	r2,zero,1584 <__alt_exception_stack_pointer+0xf8001584>
		clear_depth(gpu, 1);
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 4; z > 0; z--) {
    15d4:	e0bff217 	ldw	r2,-56(fp)
    15d8:	10bfffc4 	addi	r2,r2,-1
    15dc:	e0bff215 	stw	r2,-56(fp)
    15e0:	e0bff217 	ldw	r2,-56(fp)
    15e4:	00bfe416 	blt	zero,r2,1578 <__alt_exception_stack_pointer+0xf8001578>
		for(int x = 10; x > -5; x--) {
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
			}
		}

		for(int y = 1; y < 6; y++) {
    15e8:	00800044 	movi	r2,1
    15ec:	e0bff415 	stw	r2,-48(fp)
    15f0:	00001006 	br	1634 <main+0x1c8>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
    15f4:	d0e00017 	ldw	r3,-32768(gp)
    15f8:	e0bff417 	ldw	r2,-48(fp)
    15fc:	10bfff84 	addi	r2,r2,-2
    1600:	100890fa 	slli	r4,r2,3
    1604:	00800084 	movi	r2,2
    1608:	d8800115 	stw	r2,4(sp)
    160c:	00bff404 	movi	r2,-48
    1610:	d8800015 	stw	r2,0(sp)
    1614:	200f883a 	mov	r7,r4
    1618:	01bffc04 	movi	r6,-16
    161c:	01400204 	movi	r5,8
    1620:	1809883a 	mov	r4,r3
    1624:	00012a80 	call	12a8 <draw_cube>
		for(int x = 10; x > -5; x--) {
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
			}
		}

		for(int y = 1; y < 6; y++) {
    1628:	e0bff417 	ldw	r2,-48(fp)
    162c:	10800044 	addi	r2,r2,1
    1630:	e0bff415 	stw	r2,-48(fp)
    1634:	e0bff417 	ldw	r2,-48(fp)
    1638:	10800190 	cmplti	r2,r2,6
    163c:	103fed1e 	bne	r2,zero,15f4 <__alt_exception_stack_pointer+0xf80015f4>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1640:	00800044 	movi	r2,1
    1644:	e0bff515 	stw	r2,-44(fp)
    1648:	00001006 	br	168c <main+0x220>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
    164c:	d0e00017 	ldw	r3,-32768(gp)
    1650:	e0bff517 	ldw	r2,-44(fp)
    1654:	10bfff84 	addi	r2,r2,-2
    1658:	100890fa 	slli	r4,r2,3
    165c:	00800084 	movi	r2,2
    1660:	d8800115 	stw	r2,4(sp)
    1664:	00bff004 	movi	r2,-64
    1668:	d8800015 	stw	r2,0(sp)
    166c:	200f883a 	mov	r7,r4
    1670:	000d883a 	mov	r6,zero
    1674:	01400204 	movi	r5,8
    1678:	1809883a 	mov	r4,r3
    167c:	00012a80 	call	12a8 <draw_cube>

		for(int y = 1; y < 6; y++) {
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1680:	e0bff517 	ldw	r2,-44(fp)
    1684:	10800044 	addi	r2,r2,1
    1688:	e0bff515 	stw	r2,-44(fp)
    168c:	e0bff517 	ldw	r2,-44(fp)
    1690:	10800190 	cmplti	r2,r2,6
    1694:	103fed1e 	bne	r2,zero,164c <__alt_exception_stack_pointer+0xf800164c>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
		}

		draw_cube(gpu, 8, 16, -8, -40, 3);
    1698:	d0e00017 	ldw	r3,-32768(gp)
    169c:	008000c4 	movi	r2,3
    16a0:	d8800115 	stw	r2,4(sp)
    16a4:	00bff604 	movi	r2,-40
    16a8:	d8800015 	stw	r2,0(sp)
    16ac:	01fffe04 	movi	r7,-8
    16b0:	01800404 	movi	r6,16
    16b4:	01400204 	movi	r5,8
    16b8:	1809883a 	mov	r4,r3
    16bc:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 8, -8, -40, 3);
    16c0:	d0e00017 	ldw	r3,-32768(gp)
    16c4:	008000c4 	movi	r2,3
    16c8:	d8800115 	stw	r2,4(sp)
    16cc:	00bff604 	movi	r2,-40
    16d0:	d8800015 	stw	r2,0(sp)
    16d4:	01fffe04 	movi	r7,-8
    16d8:	01800204 	movi	r6,8
    16dc:	01400204 	movi	r5,8
    16e0:	1809883a 	mov	r4,r3
    16e4:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 24, -8, -40, 3);
    16e8:	d0e00017 	ldw	r3,-32768(gp)
    16ec:	008000c4 	movi	r2,3
    16f0:	d8800115 	stw	r2,4(sp)
    16f4:	00bff604 	movi	r2,-40
    16f8:	d8800015 	stw	r2,0(sp)
    16fc:	01fffe04 	movi	r7,-8
    1700:	01800604 	movi	r6,24
    1704:	01400204 	movi	r5,8
    1708:	1809883a 	mov	r4,r3
    170c:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40-8, 3);
    1710:	d0e00017 	ldw	r3,-32768(gp)
    1714:	008000c4 	movi	r2,3
    1718:	d8800115 	stw	r2,4(sp)
    171c:	00bff404 	movi	r2,-48
    1720:	d8800015 	stw	r2,0(sp)
    1724:	01fffe04 	movi	r7,-8
    1728:	01800404 	movi	r6,16
    172c:	01400204 	movi	r5,8
    1730:	1809883a 	mov	r4,r3
    1734:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40+8, 3);
    1738:	d0e00017 	ldw	r3,-32768(gp)
    173c:	008000c4 	movi	r2,3
    1740:	d8800115 	stw	r2,4(sp)
    1744:	00bff804 	movi	r2,-32
    1748:	d8800015 	stw	r2,0(sp)
    174c:	01fffe04 	movi	r7,-8
    1750:	01800404 	movi	r6,16
    1754:	01400204 	movi	r5,8
    1758:	1809883a 	mov	r4,r3
    175c:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, 0, -40, 6);
    1760:	d0e00017 	ldw	r3,-32768(gp)
    1764:	00800184 	movi	r2,6
    1768:	d8800115 	stw	r2,4(sp)
    176c:	00bff604 	movi	r2,-40
    1770:	d8800015 	stw	r2,0(sp)
    1774:	000f883a 	mov	r7,zero
    1778:	01800404 	movi	r6,16
    177c:	01400204 	movi	r5,8
    1780:	1809883a 	mov	r4,r3
    1784:	00012a80 	call	12a8 <draw_cube>


		memcpy(frame1, frame2, sizeof(frame1->D1));
    1788:	01800174 	movhi	r6,5
    178c:	31ac0004 	addi	r6,r6,-20480
    1790:	e17ff717 	ldw	r5,-36(fp)
    1794:	e13ff617 	ldw	r4,-40(fp)
    1798:	00076000 	call	7600 <memcpy>

		printf("Render ticks %d\n", clock() - start_time);
    179c:	0006d800 	call	6d80 <clock>
    17a0:	1007883a 	mov	r3,r2
    17a4:	e0bff917 	ldw	r2,-28(fp)
    17a8:	1885c83a 	sub	r2,r3,r2
    17ac:	100b883a 	mov	r5,r2
    17b0:	01000074 	movhi	r4,1
    17b4:	21149904 	addi	r4,r4,21092
    17b8:	00077780 	call	7778 <printf>
		start_time = clock();
    17bc:	0006d800 	call	6d80 <clock>
    17c0:	e0bff915 	stw	r2,-28(fp)

		loop_keyboard(&keycode);
    17c4:	e0bffe04 	addi	r2,fp,-8
    17c8:	1009883a 	mov	r4,r2
    17cc:	00004300 	call	430 <loop_keyboard>
		if(keycode == KEY_S) {
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	10800598 	cmpnei	r2,r2,22
    17d8:	1000061e 	bne	r2,zero,17f4 <main+0x388>
			gpu->cam_pos.z += 1;
    17dc:	d0a00017 	ldw	r2,-32768(gp)
    17e0:	d0e00017 	ldw	r3,-32768(gp)
    17e4:	18c01517 	ldw	r3,84(r3)
    17e8:	18c00044 	addi	r3,r3,1
    17ec:	10c01515 	stw	r3,84(r2)
    17f0:	00000806 	br	1814 <main+0x3a8>
		} else if (keycode == KEY_W) {
    17f4:	e0bffe17 	ldw	r2,-8(fp)
    17f8:	10800698 	cmpnei	r2,r2,26
    17fc:	1000051e 	bne	r2,zero,1814 <main+0x3a8>
			gpu->cam_pos.z -= 1;
    1800:	d0a00017 	ldw	r2,-32768(gp)
    1804:	d0e00017 	ldw	r3,-32768(gp)
    1808:	18c01517 	ldw	r3,84(r3)
    180c:	18ffffc4 	addi	r3,r3,-1
    1810:	10c01515 	stw	r3,84(r2)
		}

		if(keycode == KEY_UP) {
    1814:	e0bffe17 	ldw	r2,-8(fp)
    1818:	10801498 	cmpnei	r2,r2,82
    181c:	10000c1e 	bne	r2,zero,1850 <main+0x3e4>
			theta += 0.01;
    1820:	0191ebb4 	movhi	r6,18350
    1824:	31851ec4 	addi	r6,r6,5243
    1828:	01cfe134 	movhi	r7,16260
    182c:	39deb844 	addi	r7,r7,31457
    1830:	e13fee17 	ldw	r4,-72(fp)
    1834:	e17fef17 	ldw	r5,-68(fp)
    1838:	00050480 	call	5048 <__adddf3>
    183c:	1009883a 	mov	r4,r2
    1840:	180b883a 	mov	r5,r3
    1844:	e13fee15 	stw	r4,-72(fp)
    1848:	e17fef15 	stw	r5,-68(fp)
    184c:	00000e06 	br	1888 <main+0x41c>
		} else if(keycode == KEY_DOWN) {
    1850:	e0bffe17 	ldw	r2,-8(fp)
    1854:	10801458 	cmpnei	r2,r2,81
    1858:	10000b1e 	bne	r2,zero,1888 <main+0x41c>
			theta -= 0.01;
    185c:	0191ebb4 	movhi	r6,18350
    1860:	31851ec4 	addi	r6,r6,5243
    1864:	01cfe134 	movhi	r7,16260
    1868:	39deb844 	addi	r7,r7,31457
    186c:	e13fee17 	ldw	r4,-72(fp)
    1870:	e17fef17 	ldw	r5,-68(fp)
    1874:	00062c40 	call	62c4 <__subdf3>
    1878:	1009883a 	mov	r4,r2
    187c:	180b883a 	mov	r5,r3
    1880:	e13fee15 	stw	r4,-72(fp)
    1884:	e17fef15 	stw	r5,-68(fp)
		}

		if(keycode == KEY_LEFT) {
    1888:	e0bffe17 	ldw	r2,-8(fp)
    188c:	10801418 	cmpnei	r2,r2,80
    1890:	10000c1e 	bne	r2,zero,18c4 <main+0x458>
			phi += 0.01;
    1894:	0191ebb4 	movhi	r6,18350
    1898:	31851ec4 	addi	r6,r6,5243
    189c:	01cfe134 	movhi	r7,16260
    18a0:	39deb844 	addi	r7,r7,31457
    18a4:	e13ff017 	ldw	r4,-64(fp)
    18a8:	e17ff117 	ldw	r5,-60(fp)
    18ac:	00050480 	call	5048 <__adddf3>
    18b0:	1009883a 	mov	r4,r2
    18b4:	180b883a 	mov	r5,r3
    18b8:	e13ff015 	stw	r4,-64(fp)
    18bc:	e17ff115 	stw	r5,-60(fp)
    18c0:	00000e06 	br	18fc <main+0x490>
		} else if(keycode == KEY_RIGHT) {
    18c4:	e0bffe17 	ldw	r2,-8(fp)
    18c8:	108013d8 	cmpnei	r2,r2,79
    18cc:	10000b1e 	bne	r2,zero,18fc <main+0x490>
			phi -= 0.01;
    18d0:	0191ebb4 	movhi	r6,18350
    18d4:	31851ec4 	addi	r6,r6,5243
    18d8:	01cfe134 	movhi	r7,16260
    18dc:	39deb844 	addi	r7,r7,31457
    18e0:	e13ff017 	ldw	r4,-64(fp)
    18e4:	e17ff117 	ldw	r5,-60(fp)
    18e8:	00062c40 	call	62c4 <__subdf3>
    18ec:	1009883a 	mov	r4,r2
    18f0:	180b883a 	mov	r5,r3
    18f4:	e13ff015 	stw	r4,-64(fp)
    18f8:	e17ff115 	stw	r5,-60(fp)
		}


		int s_t = (int)(sin(theta) * (1<<8));
    18fc:	e13fee17 	ldw	r4,-72(fp)
    1900:	e17fef17 	ldw	r5,-68(fp)
    1904:	0002d500 	call	2d50 <sin>
    1908:	1011883a 	mov	r8,r2
    190c:	1813883a 	mov	r9,r3
    1910:	000d883a 	mov	r6,zero
    1914:	01d01c34 	movhi	r7,16496
    1918:	4009883a 	mov	r4,r8
    191c:	480b883a 	mov	r5,r9
    1920:	0005a580 	call	5a58 <__muldf3>
    1924:	1009883a 	mov	r4,r2
    1928:	180b883a 	mov	r5,r3
    192c:	2005883a 	mov	r2,r4
    1930:	2807883a 	mov	r3,r5
    1934:	1009883a 	mov	r4,r2
    1938:	180b883a 	mov	r5,r3
    193c:	0006bc00 	call	6bc0 <__fixdfsi>
    1940:	e0bffa15 	stw	r2,-24(fp)
		int c_t = (int)(cos(theta) * (1<<8));
    1944:	e13fee17 	ldw	r4,-72(fp)
    1948:	e17fef17 	ldw	r5,-68(fp)
    194c:	0002c640 	call	2c64 <cos>
    1950:	1011883a 	mov	r8,r2
    1954:	1813883a 	mov	r9,r3
    1958:	000d883a 	mov	r6,zero
    195c:	01d01c34 	movhi	r7,16496
    1960:	4009883a 	mov	r4,r8
    1964:	480b883a 	mov	r5,r9
    1968:	0005a580 	call	5a58 <__muldf3>
    196c:	1009883a 	mov	r4,r2
    1970:	180b883a 	mov	r5,r3
    1974:	2005883a 	mov	r2,r4
    1978:	2807883a 	mov	r3,r5
    197c:	1009883a 	mov	r4,r2
    1980:	180b883a 	mov	r5,r3
    1984:	0006bc00 	call	6bc0 <__fixdfsi>
    1988:	e0bffb15 	stw	r2,-20(fp)

		int s_p = (int)(sin(phi) * (1<<8));
    198c:	e13ff017 	ldw	r4,-64(fp)
    1990:	e17ff117 	ldw	r5,-60(fp)
    1994:	0002d500 	call	2d50 <sin>
    1998:	1011883a 	mov	r8,r2
    199c:	1813883a 	mov	r9,r3
    19a0:	000d883a 	mov	r6,zero
    19a4:	01d01c34 	movhi	r7,16496
    19a8:	4009883a 	mov	r4,r8
    19ac:	480b883a 	mov	r5,r9
    19b0:	0005a580 	call	5a58 <__muldf3>
    19b4:	1009883a 	mov	r4,r2
    19b8:	180b883a 	mov	r5,r3
    19bc:	2005883a 	mov	r2,r4
    19c0:	2807883a 	mov	r3,r5
    19c4:	1009883a 	mov	r4,r2
    19c8:	180b883a 	mov	r5,r3
    19cc:	0006bc00 	call	6bc0 <__fixdfsi>
    19d0:	e0bffc15 	stw	r2,-16(fp)
		int c_p = (int)(cos(phi) * (1<<8));
    19d4:	e13ff017 	ldw	r4,-64(fp)
    19d8:	e17ff117 	ldw	r5,-60(fp)
    19dc:	0002c640 	call	2c64 <cos>
    19e0:	1011883a 	mov	r8,r2
    19e4:	1813883a 	mov	r9,r3
    19e8:	000d883a 	mov	r6,zero
    19ec:	01d01c34 	movhi	r7,16496
    19f0:	4009883a 	mov	r4,r8
    19f4:	480b883a 	mov	r5,r9
    19f8:	0005a580 	call	5a58 <__muldf3>
    19fc:	1009883a 	mov	r4,r2
    1a00:	180b883a 	mov	r5,r3
    1a04:	2005883a 	mov	r2,r4
    1a08:	2807883a 	mov	r3,r5
    1a0c:	1009883a 	mov	r4,r2
    1a10:	180b883a 	mov	r5,r3
    1a14:	0006bc00 	call	6bc0 <__fixdfsi>
    1a18:	e0bffd15 	stw	r2,-12(fp)

		//        Matrix([[cos(phi), 			0,			 sin(phi), 0],
		//                [sin(phi)*sin(theta), cos(theta), -sin(theta)*cos(phi), 0],
		//                [-sin(phi)*cos(theta), sin(theta), cos(phi)*cos(theta), 0], [0, 0, 0, 1]]

		gpu->cam_x_axis.x = c_p;
    1a1c:	d0a00017 	ldw	r2,-32768(gp)
    1a20:	e0fffd17 	ldw	r3,-12(fp)
    1a24:	10c00a15 	stw	r3,40(r2)
		gpu->cam_x_axis.y = s_p*s_t/(1<<8);
    1a28:	d4200017 	ldw	r16,-32768(gp)
    1a2c:	e17ffa17 	ldw	r5,-24(fp)
    1a30:	e13ffc17 	ldw	r4,-16(fp)
    1a34:	00050200 	call	5020 <__mulsi3>
    1a38:	1000010e 	bge	r2,zero,1a40 <main+0x5d4>
    1a3c:	10803fc4 	addi	r2,r2,255
    1a40:	1005d23a 	srai	r2,r2,8
    1a44:	80800b15 	stw	r2,44(r16)
		gpu->cam_x_axis.z = -s_p*c_t/(1<<8);
    1a48:	d4200017 	ldw	r16,-32768(gp)
    1a4c:	e0bffc17 	ldw	r2,-16(fp)
    1a50:	0085c83a 	sub	r2,zero,r2
    1a54:	e17ffb17 	ldw	r5,-20(fp)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	00050200 	call	5020 <__mulsi3>
    1a60:	1000010e 	bge	r2,zero,1a68 <main+0x5fc>
    1a64:	10803fc4 	addi	r2,r2,255
    1a68:	1005d23a 	srai	r2,r2,8
    1a6c:	80800c15 	stw	r2,48(r16)

		gpu->cam_y_axis.x = 0;
    1a70:	d0a00017 	ldw	r2,-32768(gp)
    1a74:	10000d15 	stw	zero,52(r2)
		gpu->cam_y_axis.y = c_t;
    1a78:	d0a00017 	ldw	r2,-32768(gp)
    1a7c:	e0fffb17 	ldw	r3,-20(fp)
    1a80:	10c00e15 	stw	r3,56(r2)
		gpu->cam_y_axis.z = s_t;
    1a84:	d0a00017 	ldw	r2,-32768(gp)
    1a88:	e0fffa17 	ldw	r3,-24(fp)
    1a8c:	10c00f15 	stw	r3,60(r2)

		gpu->cam_z_axis.x = s_p;
    1a90:	d0a00017 	ldw	r2,-32768(gp)
    1a94:	e0fffc17 	ldw	r3,-16(fp)
    1a98:	10c01015 	stw	r3,64(r2)
		gpu->cam_z_axis.y = -s_t*c_p/(1<<8);
    1a9c:	d4200017 	ldw	r16,-32768(gp)
    1aa0:	e0bffa17 	ldw	r2,-24(fp)
    1aa4:	0085c83a 	sub	r2,zero,r2
    1aa8:	e17ffd17 	ldw	r5,-12(fp)
    1aac:	1009883a 	mov	r4,r2
    1ab0:	00050200 	call	5020 <__mulsi3>
    1ab4:	1000010e 	bge	r2,zero,1abc <main+0x650>
    1ab8:	10803fc4 	addi	r2,r2,255
    1abc:	1005d23a 	srai	r2,r2,8
    1ac0:	80801115 	stw	r2,68(r16)
		gpu->cam_z_axis.z = c_p*c_t/(1<<8);
    1ac4:	d4200017 	ldw	r16,-32768(gp)
    1ac8:	e17ffb17 	ldw	r5,-20(fp)
    1acc:	e13ffd17 	ldw	r4,-12(fp)
    1ad0:	00050200 	call	5020 <__mulsi3>
    1ad4:	1000010e 	bge	r2,zero,1adc <main+0x670>
    1ad8:	10803fc4 	addi	r2,r2,255
    1adc:	1005d23a 	srai	r2,r2,8
    1ae0:	80801215 	stw	r2,72(r16)
	}
    1ae4:	003e8d06 	br	151c <__alt_exception_stack_pointer+0xf800151c>

00001ae8 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1ae8:	defffc04 	addi	sp,sp,-16
    1aec:	dfc00315 	stw	ra,12(sp)
    1af0:	df000215 	stw	fp,8(sp)
    1af4:	df000204 	addi	fp,sp,8
    1af8:	2007883a 	mov	r3,r4
    1afc:	2805883a 	mov	r2,r5
    1b00:	e0fffe0d 	sth	r3,-8(fp)
    1b04:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1b08:	e0bffe0b 	ldhu	r2,-8(fp)
    1b0c:	100b883a 	mov	r5,r2
    1b10:	01000084 	movi	r4,2
    1b14:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    1b18:	e0bfff0b 	ldhu	r2,-4(fp)
    1b1c:	100b883a 	mov	r5,r2
    1b20:	0009883a 	mov	r4,zero
    1b24:	00003280 	call	328 <IO_write>
}
    1b28:	0001883a 	nop
    1b2c:	e037883a 	mov	sp,fp
    1b30:	dfc00117 	ldw	ra,4(sp)
    1b34:	df000017 	ldw	fp,0(sp)
    1b38:	dec00204 	addi	sp,sp,8
    1b3c:	f800283a 	ret

00001b40 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1b40:	defffd04 	addi	sp,sp,-12
    1b44:	dfc00215 	stw	ra,8(sp)
    1b48:	df000115 	stw	fp,4(sp)
    1b4c:	df000104 	addi	fp,sp,4
    1b50:	2005883a 	mov	r2,r4
    1b54:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1b58:	e0bfff0b 	ldhu	r2,-4(fp)
    1b5c:	100b883a 	mov	r5,r2
    1b60:	01000084 	movi	r4,2
    1b64:	00003280 	call	328 <IO_write>
	return IO_read(0);
    1b68:	0009883a 	mov	r4,zero
    1b6c:	00003b00 	call	3b0 <IO_read>

}
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1b84:	defffe04 	addi	sp,sp,-8
    1b88:	dfc00115 	stw	ra,4(sp)
    1b8c:	df000015 	stw	fp,0(sp)
    1b90:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1b94:	017e9414 	movui	r5,64080
    1b98:	01000044 	movi	r4,1
    1b9c:	00003280 	call	328 <IO_write>
	usleep(100000);
    1ba0:	010000b4 	movhi	r4,2
    1ba4:	2121a804 	addi	r4,r4,-31072
    1ba8:	00127340 	call	12734 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1bac:	01000074 	movhi	r4,1
    1bb0:	21149e04 	addi	r4,r4,21112
    1bb4:	00078740 	call	7874 <puts>

	usleep(500000);
    1bb8:	01000234 	movhi	r4,8
    1bbc:	21284804 	addi	r4,r4,-24288
    1bc0:	00127340 	call	12734 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1bc4:	01000074 	movhi	r4,1
    1bc8:	2114a504 	addi	r4,r4,21140
    1bcc:	00078740 	call	7874 <puts>
	IO_read(HPI_MAILBOX);
    1bd0:	01000044 	movi	r4,1
    1bd4:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1bd8:	010000c4 	movi	r4,3
    1bdc:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1be0:	01005104 	movi	r4,324
    1be4:	0001b400 	call	1b40 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1be8:	000b883a 	mov	r5,zero
    1bec:	01005104 	movi	r4,324
    1bf0:	0001ae80 	call	1ae8 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1bf4:	01005204 	movi	r4,328
    1bf8:	0001b400 	call	1b40 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1bfc:	000b883a 	mov	r5,zero
    1c00:	01005204 	movi	r4,328
    1c04:	0001ae80 	call	1ae8 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1c08:	017fffd4 	movui	r5,65535
    1c0c:	01302414 	movui	r4,49296
    1c10:	0001ae80 	call	1ae8 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1c14:	017fffd4 	movui	r5,65535
    1c18:	01302c14 	movui	r4,49328
    1c1c:	0001ae80 	call	1ae8 <UsbWrite>
}
    1c20:	0001883a 	nop
    1c24:	e037883a 	mov	sp,fp
    1c28:	dfc00117 	ldw	ra,4(sp)
    1c2c:	df000017 	ldw	fp,0(sp)
    1c30:	dec00204 	addi	sp,sp,8
    1c34:	f800283a 	ret

00001c38 <UsbSetAddress>:


void UsbSetAddress()
{
    1c38:	defffe04 	addi	sp,sp,-8
    1c3c:	dfc00115 	stw	ra,4(sp)
    1c40:	df000015 	stw	fp,0(sp)
    1c44:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c48:	01414004 	movi	r5,1280
    1c4c:	01000084 	movi	r4,2
    1c50:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1c54:	01414304 	movi	r5,1292
    1c58:	0009883a 	mov	r4,zero
    1c5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c60:	01400204 	movi	r5,8
    1c64:	0009883a 	mov	r4,zero
    1c68:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1c6c:	01403404 	movi	r5,208
    1c70:	0009883a 	mov	r4,zero
    1c74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c78:	01400044 	movi	r5,1
    1c7c:	0009883a 	mov	r4,zero
    1c80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c84:	014004c4 	movi	r5,19
    1c88:	0009883a 	mov	r4,zero
    1c8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c90:	01414504 	movi	r5,1300
    1c94:	0009883a 	mov	r4,zero
    1c98:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1c9c:	01414004 	movi	r5,1280
    1ca0:	0009883a 	mov	r4,zero
    1ca4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1ca8:	01400084 	movi	r5,2
    1cac:	0009883a 	mov	r4,zero
    1cb0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cb4:	000b883a 	mov	r5,zero
    1cb8:	0009883a 	mov	r4,zero
    1cbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cc0:	000b883a 	mov	r5,zero
    1cc4:	0009883a 	mov	r4,zero
    1cc8:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1ccc:	000b883a 	mov	r5,zero
    1cd0:	0009883a 	mov	r4,zero
    1cd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1cd8:	000b883a 	mov	r5,zero
    1cdc:	0009883a 	mov	r4,zero
    1ce0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1ce4:	01402404 	movi	r5,144
    1ce8:	0009883a 	mov	r4,zero
    1cec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1cf0:	01401044 	movi	r5,65
    1cf4:	0009883a 	mov	r4,zero
    1cf8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cfc:	014004c4 	movi	r5,19
    1d00:	0009883a 	mov	r4,zero
    1d04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d08:	000b883a 	mov	r5,zero
    1d0c:	0009883a 	mov	r4,zero
    1d10:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d14:	01414004 	movi	r5,1280
    1d18:	01006c04 	movi	r4,432
    1d1c:	0001ae80 	call	1ae8 <UsbWrite>
}
    1d20:	0001883a 	nop
    1d24:	e037883a 	mov	sp,fp
    1d28:	dfc00117 	ldw	ra,4(sp)
    1d2c:	df000017 	ldw	fp,0(sp)
    1d30:	dec00204 	addi	sp,sp,8
    1d34:	f800283a 	ret

00001d38 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1d38:	defffe04 	addi	sp,sp,-8
    1d3c:	dfc00115 	stw	ra,4(sp)
    1d40:	df000015 	stw	fp,0(sp)
    1d44:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d48:	01414004 	movi	r5,1280
    1d4c:	01000084 	movi	r4,2
    1d50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d54:	01414304 	movi	r5,1292
    1d58:	0009883a 	mov	r4,zero
    1d5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d60:	01400204 	movi	r5,8
    1d64:	0009883a 	mov	r4,zero
    1d68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d6c:	0140b404 	movi	r5,720
    1d70:	0009883a 	mov	r4,zero
    1d74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d78:	01400044 	movi	r5,1
    1d7c:	0009883a 	mov	r4,zero
    1d80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d84:	014004c4 	movi	r5,19
    1d88:	0009883a 	mov	r4,zero
    1d8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d90:	01414504 	movi	r5,1300
    1d94:	0009883a 	mov	r4,zero
    1d98:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1d9c:	0141a004 	movi	r5,1664
    1da0:	0009883a 	mov	r4,zero
    1da4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1da8:	01404004 	movi	r5,256
    1dac:	0009883a 	mov	r4,zero
    1db0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1db4:	000b883a 	mov	r5,zero
    1db8:	0009883a 	mov	r4,zero
    1dbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1dc0:	01400204 	movi	r5,8
    1dc4:	0009883a 	mov	r4,zero
    1dc8:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1dcc:	01414b04 	movi	r5,1324
    1dd0:	0009883a 	mov	r4,zero
    1dd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1dd8:	01400204 	movi	r5,8
    1ddc:	0009883a 	mov	r4,zero
    1de0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1de4:	0140a404 	movi	r5,656
    1de8:	0009883a 	mov	r4,zero
    1dec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1df0:	01401044 	movi	r5,65
    1df4:	0009883a 	mov	r4,zero
    1df8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1dfc:	014004c4 	movi	r5,19
    1e00:	0009883a 	mov	r4,zero
    1e04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1e08:	01414804 	movi	r5,1312
    1e0c:	0009883a 	mov	r4,zero
    1e10:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1e14:	000b883a 	mov	r5,zero
    1e18:	0009883a 	mov	r4,zero
    1e1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1e20:	000b883a 	mov	r5,zero
    1e24:	0009883a 	mov	r4,zero
    1e28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1e2c:	01408404 	movi	r5,528
    1e30:	0009883a 	mov	r4,zero
    1e34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1e38:	01401044 	movi	r5,65
    1e3c:	0009883a 	mov	r4,zero
    1e40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e44:	014004c4 	movi	r5,19
    1e48:	0009883a 	mov	r4,zero
    1e4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1e50:	000b883a 	mov	r5,zero
    1e54:	0009883a 	mov	r4,zero
    1e58:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e5c:	01414004 	movi	r5,1280
    1e60:	01006c04 	movi	r4,432
    1e64:	0001ae80 	call	1ae8 <UsbWrite>
}
    1e68:	0001883a 	nop
    1e6c:	e037883a 	mov	sp,fp
    1e70:	dfc00117 	ldw	ra,4(sp)
    1e74:	df000017 	ldw	fp,0(sp)
    1e78:	dec00204 	addi	sp,sp,8
    1e7c:	f800283a 	ret

00001e80 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1e80:	defffe04 	addi	sp,sp,-8
    1e84:	dfc00115 	stw	ra,4(sp)
    1e88:	df000015 	stw	fp,0(sp)
    1e8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1e90:	01414004 	movi	r5,1280
    1e94:	01000084 	movi	r4,2
    1e98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1e9c:	01414304 	movi	r5,1292
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ea8:	01400204 	movi	r5,8
    1eac:	0009883a 	mov	r4,zero
    1eb0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1eb4:	0140b404 	movi	r5,720
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ec0:	01400044 	movi	r5,1
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ecc:	014004c4 	movi	r5,19
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ed8:	01414504 	movi	r5,1300
    1edc:	0009883a 	mov	r4,zero
    1ee0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1ee4:	0141a004 	movi	r5,1664
    1ee8:	0009883a 	mov	r4,zero
    1eec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1ef0:	01404004 	movi	r5,256
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1efc:	000b883a 	mov	r5,zero
    1f00:	0009883a 	mov	r4,zero
    1f04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1f08:	01400484 	movi	r5,18
    1f0c:	0009883a 	mov	r4,zero
    1f10:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1f14:	01415104 	movi	r5,1348
    1f18:	0009883a 	mov	r4,zero
    1f1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f20:	01400204 	movi	r5,8
    1f24:	0009883a 	mov	r4,zero
    1f28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f2c:	0140a404 	movi	r5,656
    1f30:	0009883a 	mov	r4,zero
    1f34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f38:	01401044 	movi	r5,65
    1f3c:	0009883a 	mov	r4,zero
    1f40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f44:	014004c4 	movi	r5,19
    1f48:	0009883a 	mov	r4,zero
    1f4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f50:	01414804 	movi	r5,1312
    1f54:	0009883a 	mov	r4,zero
    1f58:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1f5c:	01415304 	movi	r5,1356
    1f60:	0009883a 	mov	r4,zero
    1f64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1f68:	01400204 	movi	r5,8
    1f6c:	0009883a 	mov	r4,zero
    1f70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1f74:	0140a404 	movi	r5,656
    1f78:	0009883a 	mov	r4,zero
    1f7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1f80:	01400044 	movi	r5,1
    1f84:	0009883a 	mov	r4,zero
    1f88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f8c:	014004c4 	movi	r5,19
    1f90:	0009883a 	mov	r4,zero
    1f94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1f98:	01414b04 	movi	r5,1324
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1fa4:	01415504 	movi	r5,1364
    1fa8:	0009883a 	mov	r4,zero
    1fac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1fb0:	01400084 	movi	r5,2
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1fbc:	0140a404 	movi	r5,656
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1fc8:	01401044 	movi	r5,65
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1fd4:	014004c4 	movi	r5,19
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1fe0:	01414e04 	movi	r5,1336
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1fec:	000b883a 	mov	r5,zero
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1ff8:	000b883a 	mov	r5,zero
    1ffc:	0009883a 	mov	r4,zero
    2000:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    2004:	01408404 	movi	r5,528
    2008:	0009883a 	mov	r4,zero
    200c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    2010:	01401044 	movi	r5,65
    2014:	0009883a 	mov	r4,zero
    2018:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    201c:	014004c4 	movi	r5,19
    2020:	0009883a 	mov	r4,zero
    2024:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2028:	000b883a 	mov	r5,zero
    202c:	0009883a 	mov	r4,zero
    2030:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2034:	01414004 	movi	r5,1280
    2038:	01006c04 	movi	r4,432
    203c:	0001ae80 	call	1ae8 <UsbWrite>
}
    2040:	0001883a 	nop
    2044:	e037883a 	mov	sp,fp
    2048:	dfc00117 	ldw	ra,4(sp)
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00204 	addi	sp,sp,8
    2054:	f800283a 	ret

00002058 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2058:	defffe04 	addi	sp,sp,-8
    205c:	dfc00115 	stw	ra,4(sp)
    2060:	df000015 	stw	fp,0(sp)
    2064:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2068:	01414004 	movi	r5,1280
    206c:	01000084 	movi	r4,2
    2070:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2074:	01414304 	movi	r5,1292
    2078:	0009883a 	mov	r4,zero
    207c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2080:	01400204 	movi	r5,8
    2084:	0009883a 	mov	r4,zero
    2088:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    208c:	0140b404 	movi	r5,720
    2090:	0009883a 	mov	r4,zero
    2094:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2098:	01400044 	movi	r5,1
    209c:	0009883a 	mov	r4,zero
    20a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20a4:	014004c4 	movi	r5,19
    20a8:	0009883a 	mov	r4,zero
    20ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    20b0:	01414504 	movi	r5,1300
    20b4:	0009883a 	mov	r4,zero
    20b8:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    20bc:	0141a004 	movi	r5,1664
    20c0:	0009883a 	mov	r4,zero
    20c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    20c8:	01408004 	movi	r5,512
    20cc:	0009883a 	mov	r4,zero
    20d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    20d4:	000b883a 	mov	r5,zero
    20d8:	0009883a 	mov	r4,zero
    20dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    20e0:	01400244 	movi	r5,9
    20e4:	0009883a 	mov	r4,zero
    20e8:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    20ec:	01415104 	movi	r5,1348
    20f0:	0009883a 	mov	r4,zero
    20f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    20f8:	01400204 	movi	r5,8
    20fc:	0009883a 	mov	r4,zero
    2100:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2104:	0140a404 	movi	r5,656
    2108:	0009883a 	mov	r4,zero
    210c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2110:	01401044 	movi	r5,65
    2114:	0009883a 	mov	r4,zero
    2118:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    211c:	014004c4 	movi	r5,19
    2120:	0009883a 	mov	r4,zero
    2124:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2128:	01414804 	movi	r5,1312
    212c:	0009883a 	mov	r4,zero
    2130:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2134:	01415304 	movi	r5,1356
    2138:	0009883a 	mov	r4,zero
    213c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    2140:	01400044 	movi	r5,1
    2144:	0009883a 	mov	r4,zero
    2148:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    214c:	0140a404 	movi	r5,656
    2150:	0009883a 	mov	r4,zero
    2154:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2158:	01400044 	movi	r5,1
    215c:	0009883a 	mov	r4,zero
    2160:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2164:	014004c4 	movi	r5,19
    2168:	0009883a 	mov	r4,zero
    216c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2170:	01414b04 	movi	r5,1324
    2174:	0009883a 	mov	r4,zero
    2178:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    217c:	000b883a 	mov	r5,zero
    2180:	0009883a 	mov	r4,zero
    2184:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2188:	000b883a 	mov	r5,zero
    218c:	0009883a 	mov	r4,zero
    2190:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2194:	01408404 	movi	r5,528
    2198:	0009883a 	mov	r4,zero
    219c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    21a0:	01401044 	movi	r5,65
    21a4:	0009883a 	mov	r4,zero
    21a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    21ac:	014004c4 	movi	r5,19
    21b0:	0009883a 	mov	r4,zero
    21b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    21b8:	000b883a 	mov	r5,zero
    21bc:	0009883a 	mov	r4,zero
    21c0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21c4:	01414004 	movi	r5,1280
    21c8:	01006c04 	movi	r4,432
    21cc:	0001ae80 	call	1ae8 <UsbWrite>
}
    21d0:	0001883a 	nop
    21d4:	e037883a 	mov	sp,fp
    21d8:	dfc00117 	ldw	ra,4(sp)
    21dc:	df000017 	ldw	fp,0(sp)
    21e0:	dec00204 	addi	sp,sp,8
    21e4:	f800283a 	ret

000021e8 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    21e8:	defffe04 	addi	sp,sp,-8
    21ec:	dfc00115 	stw	ra,4(sp)
    21f0:	df000015 	stw	fp,0(sp)
    21f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    21f8:	01414004 	movi	r5,1280
    21fc:	01000084 	movi	r4,2
    2200:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2204:	01414304 	movi	r5,1292
    2208:	0009883a 	mov	r4,zero
    220c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2210:	01400204 	movi	r5,8
    2214:	0009883a 	mov	r4,zero
    2218:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    221c:	0140b404 	movi	r5,720
    2220:	0009883a 	mov	r4,zero
    2224:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2228:	01400044 	movi	r5,1
    222c:	0009883a 	mov	r4,zero
    2230:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2234:	014004c4 	movi	r5,19
    2238:	0009883a 	mov	r4,zero
    223c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2240:	01414504 	movi	r5,1300
    2244:	0009883a 	mov	r4,zero
    2248:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    224c:	0141a004 	movi	r5,1664
    2250:	0009883a 	mov	r4,zero
    2254:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2258:	01408004 	movi	r5,512
    225c:	0009883a 	mov	r4,zero
    2260:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2264:	000b883a 	mov	r5,zero
    2268:	0009883a 	mov	r4,zero
    226c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2270:	01403fc4 	movi	r5,255
    2274:	0009883a 	mov	r4,zero
    2278:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    227c:	01415704 	movi	r5,1372
    2280:	0009883a 	mov	r4,zero
    2284:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2288:	01400204 	movi	r5,8
    228c:	0009883a 	mov	r4,zero
    2290:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2294:	0140a404 	movi	r5,656
    2298:	0009883a 	mov	r4,zero
    229c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    22a0:	01401044 	movi	r5,65
    22a4:	0009883a 	mov	r4,zero
    22a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    22ac:	014004c4 	movi	r5,19
    22b0:	0009883a 	mov	r4,zero
    22b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    22b8:	01414804 	movi	r5,1312
    22bc:	0009883a 	mov	r4,zero
    22c0:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    22c4:	01415904 	movi	r5,1380
    22c8:	0009883a 	mov	r4,zero
    22cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    22d0:	01400204 	movi	r5,8
    22d4:	0009883a 	mov	r4,zero
    22d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    22dc:	0140a404 	movi	r5,656
    22e0:	0009883a 	mov	r4,zero
    22e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    22e8:	01400044 	movi	r5,1
    22ec:	0009883a 	mov	r4,zero
    22f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    22f4:	014004c4 	movi	r5,19
    22f8:	0009883a 	mov	r4,zero
    22fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2300:	01414b04 	movi	r5,1324
    2304:	0009883a 	mov	r4,zero
    2308:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    230c:	01415b04 	movi	r5,1388
    2310:	0009883a 	mov	r4,zero
    2314:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2318:	01400204 	movi	r5,8
    231c:	0009883a 	mov	r4,zero
    2320:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2324:	0140a404 	movi	r5,656
    2328:	0009883a 	mov	r4,zero
    232c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2330:	01401044 	movi	r5,65
    2334:	0009883a 	mov	r4,zero
    2338:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    233c:	014004c4 	movi	r5,19
    2340:	0009883a 	mov	r4,zero
    2344:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2348:	01414e04 	movi	r5,1336
    234c:	0009883a 	mov	r4,zero
    2350:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2354:	01415d04 	movi	r5,1396
    2358:	0009883a 	mov	r4,zero
    235c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2360:	01400204 	movi	r5,8
    2364:	0009883a 	mov	r4,zero
    2368:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    236c:	0140a404 	movi	r5,656
    2370:	0009883a 	mov	r4,zero
    2374:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2378:	01400044 	movi	r5,1
    237c:	0009883a 	mov	r4,zero
    2380:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2384:	014004c4 	movi	r5,19
    2388:	0009883a 	mov	r4,zero
    238c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2390:	01415104 	movi	r5,1348
    2394:	0009883a 	mov	r4,zero
    2398:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    239c:	01415f04 	movi	r5,1404
    23a0:	0009883a 	mov	r4,zero
    23a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    23a8:	01400084 	movi	r5,2
    23ac:	0009883a 	mov	r4,zero
    23b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    23b4:	0140a404 	movi	r5,656
    23b8:	0009883a 	mov	r4,zero
    23bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    23c0:	01401044 	movi	r5,65
    23c4:	0009883a 	mov	r4,zero
    23c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23cc:	014004c4 	movi	r5,19
    23d0:	0009883a 	mov	r4,zero
    23d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    23d8:	01415404 	movi	r5,1360
    23dc:	0009883a 	mov	r4,zero
    23e0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    23e4:	000b883a 	mov	r5,zero
    23e8:	0009883a 	mov	r4,zero
    23ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    23f0:	000b883a 	mov	r5,zero
    23f4:	0009883a 	mov	r4,zero
    23f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    23fc:	01408404 	movi	r5,528
    2400:	0009883a 	mov	r4,zero
    2404:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2408:	01401044 	movi	r5,65
    240c:	0009883a 	mov	r4,zero
    2410:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2414:	014004c4 	movi	r5,19
    2418:	0009883a 	mov	r4,zero
    241c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2420:	000b883a 	mov	r5,zero
    2424:	0009883a 	mov	r4,zero
    2428:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    242c:	01414004 	movi	r5,1280
    2430:	01006c04 	movi	r4,432
    2434:	0001ae80 	call	1ae8 <UsbWrite>
}
    2438:	0001883a 	nop
    243c:	e037883a 	mov	sp,fp
    2440:	dfc00117 	ldw	ra,4(sp)
    2444:	df000017 	ldw	fp,0(sp)
    2448:	dec00204 	addi	sp,sp,8
    244c:	f800283a 	ret

00002450 <UsbSetConfig>:

void UsbSetConfig()
{
    2450:	defffe04 	addi	sp,sp,-8
    2454:	dfc00115 	stw	ra,4(sp)
    2458:	df000015 	stw	fp,0(sp)
    245c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2460:	01414004 	movi	r5,1280
    2464:	01000084 	movi	r4,2
    2468:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    246c:	01414304 	movi	r5,1292
    2470:	0009883a 	mov	r4,zero
    2474:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2478:	01400204 	movi	r5,8
    247c:	0009883a 	mov	r4,zero
    2480:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2484:	0140b404 	movi	r5,720
    2488:	0009883a 	mov	r4,zero
    248c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2490:	01400044 	movi	r5,1
    2494:	0009883a 	mov	r4,zero
    2498:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    249c:	014004c4 	movi	r5,19
    24a0:	0009883a 	mov	r4,zero
    24a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24a8:	01414504 	movi	r5,1300
    24ac:	0009883a 	mov	r4,zero
    24b0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    24b4:	01424004 	movi	r5,2304
    24b8:	0009883a 	mov	r4,zero
    24bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    24c0:	01400044 	movi	r5,1
    24c4:	0009883a 	mov	r4,zero
    24c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24cc:	000b883a 	mov	r5,zero
    24d0:	0009883a 	mov	r4,zero
    24d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24d8:	000b883a 	mov	r5,zero
    24dc:	0009883a 	mov	r4,zero
    24e0:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    24e4:	000b883a 	mov	r5,zero
    24e8:	0009883a 	mov	r4,zero
    24ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    24f0:	000b883a 	mov	r5,zero
    24f4:	0009883a 	mov	r4,zero
    24f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    24fc:	0140a404 	movi	r5,656
    2500:	0009883a 	mov	r4,zero
    2504:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2508:	01401044 	movi	r5,65
    250c:	0009883a 	mov	r4,zero
    2510:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2514:	014004c4 	movi	r5,19
    2518:	0009883a 	mov	r4,zero
    251c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2520:	000b883a 	mov	r5,zero
    2524:	0009883a 	mov	r4,zero
    2528:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    252c:	01414004 	movi	r5,1280
    2530:	01006c04 	movi	r4,432
    2534:	0001ae80 	call	1ae8 <UsbWrite>

}
    2538:	0001883a 	nop
    253c:	e037883a 	mov	sp,fp
    2540:	dfc00117 	ldw	ra,4(sp)
    2544:	df000017 	ldw	fp,0(sp)
    2548:	dec00204 	addi	sp,sp,8
    254c:	f800283a 	ret

00002550 <UsbClassRequest>:

void UsbClassRequest()
{
    2550:	defffe04 	addi	sp,sp,-8
    2554:	dfc00115 	stw	ra,4(sp)
    2558:	df000015 	stw	fp,0(sp)
    255c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2560:	01414004 	movi	r5,1280
    2564:	01000084 	movi	r4,2
    2568:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    256c:	01414304 	movi	r5,1292
    2570:	0009883a 	mov	r4,zero
    2574:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2578:	01400204 	movi	r5,8
    257c:	0009883a 	mov	r4,zero
    2580:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2584:	0140b404 	movi	r5,720
    2588:	0009883a 	mov	r4,zero
    258c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2590:	01400044 	movi	r5,1
    2594:	0009883a 	mov	r4,zero
    2598:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    259c:	014004c4 	movi	r5,19
    25a0:	0009883a 	mov	r4,zero
    25a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    25a8:	01414504 	movi	r5,1300
    25ac:	0009883a 	mov	r4,zero
    25b0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    25b4:	01428844 	movi	r5,2593
    25b8:	0009883a 	mov	r4,zero
    25bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    25c0:	000b883a 	mov	r5,zero
    25c4:	0009883a 	mov	r4,zero
    25c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    25cc:	000b883a 	mov	r5,zero
    25d0:	0009883a 	mov	r4,zero
    25d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    25d8:	000b883a 	mov	r5,zero
    25dc:	0009883a 	mov	r4,zero
    25e0:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    25e4:	000b883a 	mov	r5,zero
    25e8:	0009883a 	mov	r4,zero
    25ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    25f0:	000b883a 	mov	r5,zero
    25f4:	0009883a 	mov	r4,zero
    25f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    25fc:	0140a404 	movi	r5,656
    2600:	0009883a 	mov	r4,zero
    2604:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2608:	01401044 	movi	r5,65
    260c:	0009883a 	mov	r4,zero
    2610:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2614:	014004c4 	movi	r5,19
    2618:	0009883a 	mov	r4,zero
    261c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2620:	000b883a 	mov	r5,zero
    2624:	0009883a 	mov	r4,zero
    2628:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    262c:	01414004 	movi	r5,1280
    2630:	01006c04 	movi	r4,432
    2634:	0001ae80 	call	1ae8 <UsbWrite>
}
    2638:	0001883a 	nop
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2650:	defffe04 	addi	sp,sp,-8
    2654:	dfc00115 	stw	ra,4(sp)
    2658:	df000015 	stw	fp,0(sp)
    265c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2660:	01414004 	movi	r5,1280
    2664:	01000084 	movi	r4,2
    2668:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    266c:	01414304 	movi	r5,1292
    2670:	0009883a 	mov	r4,zero
    2674:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2678:	01400204 	movi	r5,8
    267c:	0009883a 	mov	r4,zero
    2680:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2684:	0140b404 	movi	r5,720
    2688:	0009883a 	mov	r4,zero
    268c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2690:	01400044 	movi	r5,1
    2694:	0009883a 	mov	r4,zero
    2698:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    269c:	014004c4 	movi	r5,19
    26a0:	0009883a 	mov	r4,zero
    26a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    26a8:	01414504 	movi	r5,1300
    26ac:	0009883a 	mov	r4,zero
    26b0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    26b4:	0141a044 	movi	r5,1665
    26b8:	0009883a 	mov	r4,zero
    26bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    26c0:	01484004 	movi	r5,8448
    26c4:	0009883a 	mov	r4,zero
    26c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    26cc:	000b883a 	mov	r5,zero
    26d0:	0009883a 	mov	r4,zero
    26d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    26d8:	01401ec4 	movi	r5,123
    26dc:	0009883a 	mov	r4,zero
    26e0:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    26e4:	01415104 	movi	r5,1348
    26e8:	0009883a 	mov	r4,zero
    26ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    26f0:	01400204 	movi	r5,8
    26f4:	0009883a 	mov	r4,zero
    26f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    26fc:	0140a404 	movi	r5,656
    2700:	0009883a 	mov	r4,zero
    2704:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2708:	01401044 	movi	r5,65
    270c:	0009883a 	mov	r4,zero
    2710:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2714:	014004c4 	movi	r5,19
    2718:	0009883a 	mov	r4,zero
    271c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2720:	01414804 	movi	r5,1312
    2724:	0009883a 	mov	r4,zero
    2728:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    272c:	000b883a 	mov	r5,zero
    2730:	0009883a 	mov	r4,zero
    2734:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2738:	000b883a 	mov	r5,zero
    273c:	0009883a 	mov	r4,zero
    2740:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2744:	01408404 	movi	r5,528
    2748:	0009883a 	mov	r4,zero
    274c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2750:	01401044 	movi	r5,65
    2754:	0009883a 	mov	r4,zero
    2758:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    275c:	014004c4 	movi	r5,19
    2760:	0009883a 	mov	r4,zero
    2764:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2768:	000b883a 	mov	r5,zero
    276c:	0009883a 	mov	r4,zero
    2770:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2774:	01414004 	movi	r5,1280
    2778:	01006c04 	movi	r4,432
    277c:	0001ae80 	call	1ae8 <UsbWrite>

}
    2780:	0001883a 	nop
    2784:	e037883a 	mov	sp,fp
    2788:	dfc00117 	ldw	ra,4(sp)
    278c:	df000017 	ldw	fp,0(sp)
    2790:	dec00204 	addi	sp,sp,8
    2794:	f800283a 	ret

00002798 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2798:	defffe04 	addi	sp,sp,-8
    279c:	dfc00115 	stw	ra,4(sp)
    27a0:	df000015 	stw	fp,0(sp)
    27a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    27a8:	01414004 	movi	r5,1280
    27ac:	01000084 	movi	r4,2
    27b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    27b4:	01414304 	movi	r5,1292
    27b8:	0009883a 	mov	r4,zero
    27bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    27c0:	01400204 	movi	r5,8
    27c4:	0009883a 	mov	r4,zero
    27c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    27cc:	0140b404 	movi	r5,720
    27d0:	0009883a 	mov	r4,zero
    27d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    27d8:	01400044 	movi	r5,1
    27dc:	0009883a 	mov	r4,zero
    27e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    27e4:	014004c4 	movi	r5,19
    27e8:	0009883a 	mov	r4,zero
    27ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    27f0:	01414504 	movi	r5,1300
    27f4:	0009883a 	mov	r4,zero
    27f8:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    27fc:	0141a044 	movi	r5,1665
    2800:	0009883a 	mov	r4,zero
    2804:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2808:	01488004 	movi	r5,8704
    280c:	0009883a 	mov	r4,zero
    2810:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2814:	000b883a 	mov	r5,zero
    2818:	0009883a 	mov	r4,zero
    281c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2820:	01401ec4 	movi	r5,123
    2824:	0009883a 	mov	r4,zero
    2828:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    282c:	01416004 	movi	r5,1408
    2830:	0009883a 	mov	r4,zero
    2834:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2838:	01400204 	movi	r5,8
    283c:	0009883a 	mov	r4,zero
    2840:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2844:	0140a404 	movi	r5,656
    2848:	0009883a 	mov	r4,zero
    284c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2850:	01401044 	movi	r5,65
    2854:	0009883a 	mov	r4,zero
    2858:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    285c:	014004c4 	movi	r5,19
    2860:	0009883a 	mov	r4,zero
    2864:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2868:	01414804 	movi	r5,1312
    286c:	0009883a 	mov	r4,zero
    2870:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2874:	01416204 	movi	r5,1416
    2878:	0009883a 	mov	r4,zero
    287c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2880:	01400204 	movi	r5,8
    2884:	0009883a 	mov	r4,zero
    2888:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    288c:	0140a404 	movi	r5,656
    2890:	0009883a 	mov	r4,zero
    2894:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2898:	01400044 	movi	r5,1
    289c:	0009883a 	mov	r4,zero
    28a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    28a4:	014004c4 	movi	r5,19
    28a8:	0009883a 	mov	r4,zero
    28ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    28b0:	01414b04 	movi	r5,1324
    28b4:	0009883a 	mov	r4,zero
    28b8:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    28bc:	01416404 	movi	r5,1424
    28c0:	0009883a 	mov	r4,zero
    28c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    28c8:	01400204 	movi	r5,8
    28cc:	0009883a 	mov	r4,zero
    28d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    28d4:	0140a404 	movi	r5,656
    28d8:	0009883a 	mov	r4,zero
    28dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    28e0:	01401044 	movi	r5,65
    28e4:	0009883a 	mov	r4,zero
    28e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    28ec:	014004c4 	movi	r5,19
    28f0:	0009883a 	mov	r4,zero
    28f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    28f8:	01414e04 	movi	r5,1336
    28fc:	0009883a 	mov	r4,zero
    2900:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2904:	01416604 	movi	r5,1432
    2908:	0009883a 	mov	r4,zero
    290c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2910:	01400204 	movi	r5,8
    2914:	0009883a 	mov	r4,zero
    2918:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    291c:	0140a404 	movi	r5,656
    2920:	0009883a 	mov	r4,zero
    2924:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2928:	01400044 	movi	r5,1
    292c:	0009883a 	mov	r4,zero
    2930:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2934:	014004c4 	movi	r5,19
    2938:	0009883a 	mov	r4,zero
    293c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2940:	01415104 	movi	r5,1348
    2944:	0009883a 	mov	r4,zero
    2948:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    294c:	01416804 	movi	r5,1440
    2950:	0009883a 	mov	r4,zero
    2954:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2958:	01400204 	movi	r5,8
    295c:	0009883a 	mov	r4,zero
    2960:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2964:	0140a404 	movi	r5,656
    2968:	0009883a 	mov	r4,zero
    296c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2970:	01401044 	movi	r5,65
    2974:	0009883a 	mov	r4,zero
    2978:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    297c:	014004c4 	movi	r5,19
    2980:	0009883a 	mov	r4,zero
    2984:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2988:	01415404 	movi	r5,1360
    298c:	0009883a 	mov	r4,zero
    2990:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2994:	01416a04 	movi	r5,1448
    2998:	0009883a 	mov	r4,zero
    299c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    29a0:	01400204 	movi	r5,8
    29a4:	0009883a 	mov	r4,zero
    29a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    29ac:	0140a404 	movi	r5,656
    29b0:	0009883a 	mov	r4,zero
    29b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    29b8:	01400044 	movi	r5,1
    29bc:	0009883a 	mov	r4,zero
    29c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    29c4:	014004c4 	movi	r5,19
    29c8:	0009883a 	mov	r4,zero
    29cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    29d0:	01415704 	movi	r5,1372
    29d4:	0009883a 	mov	r4,zero
    29d8:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    29dc:	01416c04 	movi	r5,1456
    29e0:	0009883a 	mov	r4,zero
    29e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    29e8:	01400204 	movi	r5,8
    29ec:	0009883a 	mov	r4,zero
    29f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    29f4:	0140a404 	movi	r5,656
    29f8:	0009883a 	mov	r4,zero
    29fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2a00:	01401044 	movi	r5,65
    2a04:	0009883a 	mov	r4,zero
    2a08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2a0c:	014004c4 	movi	r5,19
    2a10:	0009883a 	mov	r4,zero
    2a14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2a18:	01415a04 	movi	r5,1384
    2a1c:	0009883a 	mov	r4,zero
    2a20:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2a24:	01416e04 	movi	r5,1464
    2a28:	0009883a 	mov	r4,zero
    2a2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2a30:	014000c4 	movi	r5,3
    2a34:	0009883a 	mov	r4,zero
    2a38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2a3c:	0140a404 	movi	r5,656
    2a40:	0009883a 	mov	r4,zero
    2a44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2a48:	01400044 	movi	r5,1
    2a4c:	0009883a 	mov	r4,zero
    2a50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2a54:	014004c4 	movi	r5,19
    2a58:	0009883a 	mov	r4,zero
    2a5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2a60:	01415d04 	movi	r5,1396
    2a64:	0009883a 	mov	r4,zero
    2a68:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2a6c:	000b883a 	mov	r5,zero
    2a70:	0009883a 	mov	r4,zero
    2a74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2a78:	000b883a 	mov	r5,zero
    2a7c:	0009883a 	mov	r4,zero
    2a80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2a84:	01408404 	movi	r5,528
    2a88:	0009883a 	mov	r4,zero
    2a8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2a90:	01401044 	movi	r5,65
    2a94:	0009883a 	mov	r4,zero
    2a98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2a9c:	014004c4 	movi	r5,19
    2aa0:	0009883a 	mov	r4,zero
    2aa4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2aa8:	000b883a 	mov	r5,zero
    2aac:	0009883a 	mov	r4,zero
    2ab0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2ab4:	01414004 	movi	r5,1280
    2ab8:	01006c04 	movi	r4,432
    2abc:	0001ae80 	call	1ae8 <UsbWrite>

}
    2ac0:	0001883a 	nop
    2ac4:	e037883a 	mov	sp,fp
    2ac8:	dfc00117 	ldw	ra,4(sp)
    2acc:	df000017 	ldw	fp,0(sp)
    2ad0:	dec00204 	addi	sp,sp,8
    2ad4:	f800283a 	ret

00002ad8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2ad8:	defffd04 	addi	sp,sp,-12
    2adc:	dfc00215 	stw	ra,8(sp)
    2ae0:	df000115 	stw	fp,4(sp)
    2ae4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2ae8:	01005104 	movi	r4,324
    2aec:	0001b400 	call	1b40 <UsbRead>
    2af0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2af4:	000b883a 	mov	r5,zero
    2af8:	01005104 	movi	r4,324
    2afc:	0001ae80 	call	1ae8 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2b00:	00000d06 	br	2b38 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2b04:	e0bfff0b 	ldhu	r2,-4(fp)
    2b08:	10000526 	beq	r2,zero,2b20 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2b0c:	e0bfff0b 	ldhu	r2,-4(fp)
    2b10:	100b883a 	mov	r5,r2
    2b14:	01000074 	movhi	r4,1
    2b18:	2114ae04 	addi	r4,r4,21176
    2b1c:	00077780 	call	7778 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2b20:	01005104 	movi	r4,324
    2b24:	0001b400 	call	1b40 <UsbRead>
    2b28:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b2c:	000b883a 	mov	r5,zero
    2b30:	01005104 	movi	r4,324
    2b34:	0001ae80 	call	1ae8 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2b38:	e0bfff0b 	ldhu	r2,-4(fp)
    2b3c:	10840018 	cmpnei	r2,r2,4096
    2b40:	103ff01e 	bne	r2,zero,2b04 <__alt_exception_stack_pointer+0xf8002b04>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2b44:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2b48:	e037883a 	mov	sp,fp
    2b4c:	dfc00117 	ldw	ra,4(sp)
    2b50:	df000017 	ldw	fp,0(sp)
    2b54:	dec00204 	addi	sp,sp,8
    2b58:	f800283a 	ret

00002b5c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2b5c:	defffd04 	addi	sp,sp,-12
    2b60:	dfc00215 	stw	ra,8(sp)
    2b64:	df000115 	stw	fp,4(sp)
    2b68:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2b6c:	010000c4 	movi	r4,3
    2b70:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2b74:	01005104 	movi	r4,324
    2b78:	0001b400 	call	1b40 <UsbRead>
    2b7c:	10bfffcc 	andi	r2,r2,65535
    2b80:	10840018 	cmpnei	r2,r2,4096
    2b84:	1000091e 	bne	r2,zero,2bac <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b88:	000b883a 	mov	r5,zero
    2b8c:	01005104 	movi	r4,324
    2b90:	0001ae80 	call	1ae8 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2b94:	0001883a 	nop
    2b98:	010000c4 	movi	r4,3
    2b9c:	00003b00 	call	3b0 <IO_read>
    2ba0:	10bfffcc 	andi	r2,r2,65535
    2ba4:	1080040c 	andi	r2,r2,16
    2ba8:	103ffb26 	beq	r2,zero,2b98 <__alt_exception_stack_pointer+0xf8002b98>
		{
		}
	}
	usleep(1000);
    2bac:	0100fa04 	movi	r4,1000
    2bb0:	00127340 	call	12734 <usleep>
	IO_write(HPI_ADDR,0x0508);
    2bb4:	01414204 	movi	r5,1288
    2bb8:	01000084 	movi	r4,2
    2bbc:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2bc0:	0009883a 	mov	r4,zero
    2bc4:	00003b00 	call	3b0 <IO_read>
    2bc8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2bcc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2bd0:	e037883a 	mov	sp,fp
    2bd4:	dfc00117 	ldw	ra,4(sp)
    2bd8:	df000017 	ldw	fp,0(sp)
    2bdc:	dec00204 	addi	sp,sp,8
    2be0:	f800283a 	ret

00002be4 <UsbPrintMem>:


void UsbPrintMem()
{
    2be4:	defffc04 	addi	sp,sp,-16
    2be8:	dfc00315 	stw	ra,12(sp)
    2bec:	df000215 	stw	fp,8(sp)
    2bf0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2bf4:	01414004 	movi	r5,1280
    2bf8:	01000084 	movi	r4,2
    2bfc:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2c00:	e03ffe15 	stw	zero,-8(fp)
    2c04:	00000e06 	br	2c40 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2c08:	0009883a 	mov	r4,zero
    2c0c:	00003b00 	call	3b0 <IO_read>
    2c10:	10bfffcc 	andi	r2,r2,65535
    2c14:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2c18:	e0bffe17 	ldw	r2,-8(fp)
    2c1c:	10814004 	addi	r2,r2,1280
    2c20:	e1bfff17 	ldw	r6,-4(fp)
    2c24:	100b883a 	mov	r5,r2
    2c28:	01000074 	movhi	r4,1
    2c2c:	2114b604 	addi	r4,r4,21208
    2c30:	00077780 	call	7778 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2c34:	e0bffe17 	ldw	r2,-8(fp)
    2c38:	10800084 	addi	r2,r2,2
    2c3c:	e0bffe15 	stw	r2,-8(fp)
    2c40:	e0bffe17 	ldw	r2,-8(fp)
    2c44:	10803250 	cmplti	r2,r2,201
    2c48:	103fef1e 	bne	r2,zero,2c08 <__alt_exception_stack_pointer+0xf8002c08>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2c4c:	0001883a 	nop
    2c50:	e037883a 	mov	sp,fp
    2c54:	dfc00117 	ldw	ra,4(sp)
    2c58:	df000017 	ldw	fp,0(sp)
    2c5c:	dec00204 	addi	sp,sp,8
    2c60:	f800283a 	ret

00002c64 <cos>:
    2c64:	00a00034 	movhi	r2,32768
    2c68:	defffa04 	addi	sp,sp,-24
    2c6c:	10bfffc4 	addi	r2,r2,-1
    2c70:	00cffa74 	movhi	r3,16361
    2c74:	dfc00515 	stw	ra,20(sp)
    2c78:	2884703a 	and	r2,r5,r2
    2c7c:	18c87ec4 	addi	r3,r3,8699
    2c80:	1880180e 	bge	r3,r2,2ce4 <cos+0x80>
    2c84:	00dffc34 	movhi	r3,32752
    2c88:	18ffffc4 	addi	r3,r3,-1
    2c8c:	1880060e 	bge	r3,r2,2ca8 <cos+0x44>
    2c90:	280f883a 	mov	r7,r5
    2c94:	200d883a 	mov	r6,r4
    2c98:	00062c40 	call	62c4 <__subdf3>
    2c9c:	dfc00517 	ldw	ra,20(sp)
    2ca0:	dec00604 	addi	sp,sp,24
    2ca4:	f800283a 	ret
    2ca8:	d9800104 	addi	r6,sp,4
    2cac:	0002e400 	call	2e40 <__ieee754_rem_pio2>
    2cb0:	108000cc 	andi	r2,r2,3
    2cb4:	00c00044 	movi	r3,1
    2cb8:	10c01726 	beq	r2,r3,2d18 <cos+0xb4>
    2cbc:	01000084 	movi	r4,2
    2cc0:	11000e26 	beq	r2,r4,2cfc <cos+0x98>
    2cc4:	10001c26 	beq	r2,zero,2d38 <cos+0xd4>
    2cc8:	d9800317 	ldw	r6,12(sp)
    2ccc:	d9c00417 	ldw	r7,16(sp)
    2cd0:	d9000117 	ldw	r4,4(sp)
    2cd4:	d9400217 	ldw	r5,8(sp)
    2cd8:	d8c00015 	stw	r3,0(sp)
    2cdc:	00047e80 	call	47e8 <__kernel_sin>
    2ce0:	003fee06 	br	2c9c <__alt_exception_stack_pointer+0xf8002c9c>
    2ce4:	000d883a 	mov	r6,zero
    2ce8:	000f883a 	mov	r7,zero
    2cec:	00035ac0 	call	35ac <__kernel_cos>
    2cf0:	dfc00517 	ldw	ra,20(sp)
    2cf4:	dec00604 	addi	sp,sp,24
    2cf8:	f800283a 	ret
    2cfc:	d9800317 	ldw	r6,12(sp)
    2d00:	d9c00417 	ldw	r7,16(sp)
    2d04:	d9000117 	ldw	r4,4(sp)
    2d08:	d9400217 	ldw	r5,8(sp)
    2d0c:	00035ac0 	call	35ac <__kernel_cos>
    2d10:	18e0003c 	xorhi	r3,r3,32768
    2d14:	003fe106 	br	2c9c <__alt_exception_stack_pointer+0xf8002c9c>
    2d18:	d9800317 	ldw	r6,12(sp)
    2d1c:	d9c00417 	ldw	r7,16(sp)
    2d20:	d9000117 	ldw	r4,4(sp)
    2d24:	d9400217 	ldw	r5,8(sp)
    2d28:	d8800015 	stw	r2,0(sp)
    2d2c:	00047e80 	call	47e8 <__kernel_sin>
    2d30:	18e0003c 	xorhi	r3,r3,32768
    2d34:	003fd906 	br	2c9c <__alt_exception_stack_pointer+0xf8002c9c>
    2d38:	d9800317 	ldw	r6,12(sp)
    2d3c:	d9c00417 	ldw	r7,16(sp)
    2d40:	d9000117 	ldw	r4,4(sp)
    2d44:	d9400217 	ldw	r5,8(sp)
    2d48:	00035ac0 	call	35ac <__kernel_cos>
    2d4c:	003fd306 	br	2c9c <__alt_exception_stack_pointer+0xf8002c9c>

00002d50 <sin>:
    2d50:	00a00034 	movhi	r2,32768
    2d54:	defffa04 	addi	sp,sp,-24
    2d58:	10bfffc4 	addi	r2,r2,-1
    2d5c:	00cffa74 	movhi	r3,16361
    2d60:	dfc00515 	stw	ra,20(sp)
    2d64:	2884703a 	and	r2,r5,r2
    2d68:	18c87ec4 	addi	r3,r3,8699
    2d6c:	1880180e 	bge	r3,r2,2dd0 <sin+0x80>
    2d70:	00dffc34 	movhi	r3,32752
    2d74:	18ffffc4 	addi	r3,r3,-1
    2d78:	1880060e 	bge	r3,r2,2d94 <sin+0x44>
    2d7c:	280f883a 	mov	r7,r5
    2d80:	200d883a 	mov	r6,r4
    2d84:	00062c40 	call	62c4 <__subdf3>
    2d88:	dfc00517 	ldw	ra,20(sp)
    2d8c:	dec00604 	addi	sp,sp,24
    2d90:	f800283a 	ret
    2d94:	d9800104 	addi	r6,sp,4
    2d98:	0002e400 	call	2e40 <__ieee754_rem_pio2>
    2d9c:	108000cc 	andi	r2,r2,3
    2da0:	00c00044 	movi	r3,1
    2da4:	10c01926 	beq	r2,r3,2e0c <sin+0xbc>
    2da8:	01000084 	movi	r4,2
    2dac:	11000f26 	beq	r2,r4,2dec <sin+0x9c>
    2db0:	10001c26 	beq	r2,zero,2e24 <sin+0xd4>
    2db4:	d9800317 	ldw	r6,12(sp)
    2db8:	d9c00417 	ldw	r7,16(sp)
    2dbc:	d9000117 	ldw	r4,4(sp)
    2dc0:	d9400217 	ldw	r5,8(sp)
    2dc4:	00035ac0 	call	35ac <__kernel_cos>
    2dc8:	18e0003c 	xorhi	r3,r3,32768
    2dcc:	003fee06 	br	2d88 <__alt_exception_stack_pointer+0xf8002d88>
    2dd0:	d8000015 	stw	zero,0(sp)
    2dd4:	000d883a 	mov	r6,zero
    2dd8:	000f883a 	mov	r7,zero
    2ddc:	00047e80 	call	47e8 <__kernel_sin>
    2de0:	dfc00517 	ldw	ra,20(sp)
    2de4:	dec00604 	addi	sp,sp,24
    2de8:	f800283a 	ret
    2dec:	d9800317 	ldw	r6,12(sp)
    2df0:	d9c00417 	ldw	r7,16(sp)
    2df4:	d9000117 	ldw	r4,4(sp)
    2df8:	d9400217 	ldw	r5,8(sp)
    2dfc:	d8c00015 	stw	r3,0(sp)
    2e00:	00047e80 	call	47e8 <__kernel_sin>
    2e04:	18e0003c 	xorhi	r3,r3,32768
    2e08:	003fdf06 	br	2d88 <__alt_exception_stack_pointer+0xf8002d88>
    2e0c:	d9800317 	ldw	r6,12(sp)
    2e10:	d9c00417 	ldw	r7,16(sp)
    2e14:	d9000117 	ldw	r4,4(sp)
    2e18:	d9400217 	ldw	r5,8(sp)
    2e1c:	00035ac0 	call	35ac <__kernel_cos>
    2e20:	003fd906 	br	2d88 <__alt_exception_stack_pointer+0xf8002d88>
    2e24:	d9800317 	ldw	r6,12(sp)
    2e28:	d9c00417 	ldw	r7,16(sp)
    2e2c:	d9000117 	ldw	r4,4(sp)
    2e30:	d9400217 	ldw	r5,8(sp)
    2e34:	d8c00015 	stw	r3,0(sp)
    2e38:	00047e80 	call	47e8 <__kernel_sin>
    2e3c:	003fd206 	br	2d88 <__alt_exception_stack_pointer+0xf8002d88>

00002e40 <__ieee754_rem_pio2>:
    2e40:	02200034 	movhi	r8,32768
    2e44:	deffea04 	addi	sp,sp,-88
    2e48:	423fffc4 	addi	r8,r8,-1
    2e4c:	00cffa74 	movhi	r3,16361
    2e50:	ddc01315 	stw	r23,76(sp)
    2e54:	dc400d15 	stw	r17,52(sp)
    2e58:	dfc01515 	stw	ra,84(sp)
    2e5c:	df001415 	stw	fp,80(sp)
    2e60:	dd801215 	stw	r22,72(sp)
    2e64:	dd401115 	stw	r21,68(sp)
    2e68:	dd001015 	stw	r20,64(sp)
    2e6c:	dcc00f15 	stw	r19,60(sp)
    2e70:	dc800e15 	stw	r18,56(sp)
    2e74:	dc000c15 	stw	r16,48(sp)
    2e78:	2a2e703a 	and	r23,r5,r8
    2e7c:	18c87ec4 	addi	r3,r3,8699
    2e80:	2823883a 	mov	r17,r5
    2e84:	1dc0790e 	bge	r3,r23,306c <__ieee754_rem_pio2+0x22c>
    2e88:	009000f4 	movhi	r2,16387
    2e8c:	10b65ec4 	addi	r2,r2,-9861
    2e90:	3021883a 	mov	r16,r6
    2e94:	2027883a 	mov	r19,r4
    2e98:	15c02316 	blt	r2,r23,2f28 <__ieee754_rem_pio2+0xe8>
    2e9c:	01cffe74 	movhi	r7,16377
    2ea0:	39c87ec4 	addi	r7,r7,8699
    2ea4:	01951034 	movhi	r6,21568
    2ea8:	01417a0e 	bge	zero,r5,3494 <__ieee754_rem_pio2+0x654>
    2eac:	00062c40 	call	62c4 <__subdf3>
    2eb0:	1025883a 	mov	r18,r2
    2eb4:	008ffe74 	movhi	r2,16377
    2eb8:	10887ec4 	addi	r2,r2,8699
    2ebc:	1823883a 	mov	r17,r3
    2ec0:	b8808426 	beq	r23,r2,30d4 <__ieee754_rem_pio2+0x294>
    2ec4:	018698b4 	movhi	r6,6754
    2ec8:	01cf7474 	movhi	r7,15825
    2ecc:	3198cc44 	addi	r6,r6,25393
    2ed0:	39ed1844 	addi	r7,r7,-19359
    2ed4:	9009883a 	mov	r4,r18
    2ed8:	180b883a 	mov	r5,r3
    2edc:	00062c40 	call	62c4 <__subdf3>
    2ee0:	100d883a 	mov	r6,r2
    2ee4:	180f883a 	mov	r7,r3
    2ee8:	9009883a 	mov	r4,r18
    2eec:	880b883a 	mov	r5,r17
    2ef0:	80800015 	stw	r2,0(r16)
    2ef4:	80c00115 	stw	r3,4(r16)
    2ef8:	00062c40 	call	62c4 <__subdf3>
    2efc:	018698b4 	movhi	r6,6754
    2f00:	01cf7474 	movhi	r7,15825
    2f04:	3198cc44 	addi	r6,r6,25393
    2f08:	39ed1844 	addi	r7,r7,-19359
    2f0c:	1009883a 	mov	r4,r2
    2f10:	180b883a 	mov	r5,r3
    2f14:	00062c40 	call	62c4 <__subdf3>
    2f18:	80800215 	stw	r2,8(r16)
    2f1c:	80c00315 	stw	r3,12(r16)
    2f20:	00800044 	movi	r2,1
    2f24:	00005606 	br	3080 <__ieee754_rem_pio2+0x240>
    2f28:	00904e74 	movhi	r2,16697
    2f2c:	10887ec4 	addi	r2,r2,8699
    2f30:	15c0830e 	bge	r2,r23,3140 <__ieee754_rem_pio2+0x300>
    2f34:	009ffc34 	movhi	r2,32752
    2f38:	10bfffc4 	addi	r2,r2,-1
    2f3c:	15c05c16 	blt	r2,r23,30b0 <__ieee754_rem_pio2+0x270>
    2f40:	b829d53a 	srai	r20,r23,20
    2f44:	a53efa84 	addi	r20,r20,-1046
    2f48:	a024953a 	slli	r18,r20,20
    2f4c:	bca5c83a 	sub	r18,r23,r18
    2f50:	900b883a 	mov	r5,r18
    2f54:	0006bc00 	call	6bc0 <__fixdfsi>
    2f58:	1009883a 	mov	r4,r2
    2f5c:	0006c400 	call	6c40 <__floatsidf>
    2f60:	9809883a 	mov	r4,r19
    2f64:	900b883a 	mov	r5,r18
    2f68:	100d883a 	mov	r6,r2
    2f6c:	180f883a 	mov	r7,r3
    2f70:	d8800215 	stw	r2,8(sp)
    2f74:	d8c00315 	stw	r3,12(sp)
    2f78:	00062c40 	call	62c4 <__subdf3>
    2f7c:	000d883a 	mov	r6,zero
    2f80:	01d05c34 	movhi	r7,16752
    2f84:	1009883a 	mov	r4,r2
    2f88:	180b883a 	mov	r5,r3
    2f8c:	0005a580 	call	5a58 <__muldf3>
    2f90:	180b883a 	mov	r5,r3
    2f94:	1009883a 	mov	r4,r2
    2f98:	182b883a 	mov	r21,r3
    2f9c:	102d883a 	mov	r22,r2
    2fa0:	0006bc00 	call	6bc0 <__fixdfsi>
    2fa4:	1009883a 	mov	r4,r2
    2fa8:	0006c400 	call	6c40 <__floatsidf>
    2fac:	100d883a 	mov	r6,r2
    2fb0:	180f883a 	mov	r7,r3
    2fb4:	b009883a 	mov	r4,r22
    2fb8:	a80b883a 	mov	r5,r21
    2fbc:	1027883a 	mov	r19,r2
    2fc0:	1825883a 	mov	r18,r3
    2fc4:	d8800415 	stw	r2,16(sp)
    2fc8:	d8c00515 	stw	r3,20(sp)
    2fcc:	00062c40 	call	62c4 <__subdf3>
    2fd0:	000d883a 	mov	r6,zero
    2fd4:	01d05c34 	movhi	r7,16752
    2fd8:	1009883a 	mov	r4,r2
    2fdc:	180b883a 	mov	r5,r3
    2fe0:	0005a580 	call	5a58 <__muldf3>
    2fe4:	000d883a 	mov	r6,zero
    2fe8:	000f883a 	mov	r7,zero
    2fec:	1009883a 	mov	r4,r2
    2ff0:	180b883a 	mov	r5,r3
    2ff4:	d8800615 	stw	r2,24(sp)
    2ff8:	d8c00715 	stw	r3,28(sp)
    2ffc:	00058f40 	call	58f4 <__eqdf2>
    3000:	1001431e 	bne	r2,zero,3510 <__ieee754_rem_pio2+0x6d0>
    3004:	000f883a 	mov	r7,zero
    3008:	000d883a 	mov	r6,zero
    300c:	9809883a 	mov	r4,r19
    3010:	900b883a 	mov	r5,r18
    3014:	00058f40 	call	58f4 <__eqdf2>
    3018:	100f003a 	cmpeq	r7,r2,zero
    301c:	00800084 	movi	r2,2
    3020:	11cfc83a 	sub	r7,r2,r7
    3024:	00800084 	movi	r2,2
    3028:	d8800015 	stw	r2,0(sp)
    302c:	00800074 	movhi	r2,1
    3030:	1094db04 	addi	r2,r2,21356
    3034:	d8800115 	stw	r2,4(sp)
    3038:	a00d883a 	mov	r6,r20
    303c:	800b883a 	mov	r5,r16
    3040:	d9000204 	addi	r4,sp,8
    3044:	0003a500 	call	3a50 <__kernel_rem_pio2>
    3048:	88000d0e 	bge	r17,zero,3080 <__ieee754_rem_pio2+0x240>
    304c:	81000117 	ldw	r4,4(r16)
    3050:	80c00317 	ldw	r3,12(r16)
    3054:	0085c83a 	sub	r2,zero,r2
    3058:	2120003c 	xorhi	r4,r4,32768
    305c:	18e0003c 	xorhi	r3,r3,32768
    3060:	81000115 	stw	r4,4(r16)
    3064:	80c00315 	stw	r3,12(r16)
    3068:	00000506 	br	3080 <__ieee754_rem_pio2+0x240>
    306c:	31000015 	stw	r4,0(r6)
    3070:	31400115 	stw	r5,4(r6)
    3074:	30000215 	stw	zero,8(r6)
    3078:	30000315 	stw	zero,12(r6)
    307c:	0005883a 	mov	r2,zero
    3080:	dfc01517 	ldw	ra,84(sp)
    3084:	df001417 	ldw	fp,80(sp)
    3088:	ddc01317 	ldw	r23,76(sp)
    308c:	dd801217 	ldw	r22,72(sp)
    3090:	dd401117 	ldw	r21,68(sp)
    3094:	dd001017 	ldw	r20,64(sp)
    3098:	dcc00f17 	ldw	r19,60(sp)
    309c:	dc800e17 	ldw	r18,56(sp)
    30a0:	dc400d17 	ldw	r17,52(sp)
    30a4:	dc000c17 	ldw	r16,48(sp)
    30a8:	dec01604 	addi	sp,sp,88
    30ac:	f800283a 	ret
    30b0:	200d883a 	mov	r6,r4
    30b4:	280f883a 	mov	r7,r5
    30b8:	00062c40 	call	62c4 <__subdf3>
    30bc:	80800215 	stw	r2,8(r16)
    30c0:	80800015 	stw	r2,0(r16)
    30c4:	80c00315 	stw	r3,12(r16)
    30c8:	80c00115 	stw	r3,4(r16)
    30cc:	0005883a 	mov	r2,zero
    30d0:	003feb06 	br	3080 <__alt_exception_stack_pointer+0xf8003080>
    30d4:	01cf7474 	movhi	r7,15825
    30d8:	9009883a 	mov	r4,r18
    30dc:	39ed1844 	addi	r7,r7,-19359
    30e0:	01869834 	movhi	r6,6752
    30e4:	180b883a 	mov	r5,r3
    30e8:	00062c40 	call	62c4 <__subdf3>
    30ec:	018b80f4 	movhi	r6,11779
    30f0:	01cee8f4 	movhi	r7,15267
    30f4:	319c1cc4 	addi	r6,r6,28787
    30f8:	39c66284 	addi	r7,r7,6538
    30fc:	1009883a 	mov	r4,r2
    3100:	180b883a 	mov	r5,r3
    3104:	1025883a 	mov	r18,r2
    3108:	1823883a 	mov	r17,r3
    310c:	00062c40 	call	62c4 <__subdf3>
    3110:	100d883a 	mov	r6,r2
    3114:	180f883a 	mov	r7,r3
    3118:	9009883a 	mov	r4,r18
    311c:	880b883a 	mov	r5,r17
    3120:	80800015 	stw	r2,0(r16)
    3124:	80c00115 	stw	r3,4(r16)
    3128:	00062c40 	call	62c4 <__subdf3>
    312c:	018b80f4 	movhi	r6,11779
    3130:	01cee8f4 	movhi	r7,15267
    3134:	319c1cc4 	addi	r6,r6,28787
    3138:	39c66284 	addi	r7,r7,6538
    313c:	003f7306 	br	2f0c <__alt_exception_stack_pointer+0xf8002f0c>
    3140:	0004ab40 	call	4ab4 <fabs>
    3144:	019b72b4 	movhi	r6,28106
    3148:	01cff934 	movhi	r7,16356
    314c:	31b220c4 	addi	r6,r6,-14205
    3150:	39d7cc04 	addi	r7,r7,24368
    3154:	1009883a 	mov	r4,r2
    3158:	180b883a 	mov	r5,r3
    315c:	102d883a 	mov	r22,r2
    3160:	182b883a 	mov	r21,r3
    3164:	0005a580 	call	5a58 <__muldf3>
    3168:	000d883a 	mov	r6,zero
    316c:	01cff834 	movhi	r7,16352
    3170:	1009883a 	mov	r4,r2
    3174:	180b883a 	mov	r5,r3
    3178:	00050480 	call	5048 <__adddf3>
    317c:	180b883a 	mov	r5,r3
    3180:	1009883a 	mov	r4,r2
    3184:	0006bc00 	call	6bc0 <__fixdfsi>
    3188:	1009883a 	mov	r4,r2
    318c:	1025883a 	mov	r18,r2
    3190:	0006c400 	call	6c40 <__floatsidf>
    3194:	01cffe74 	movhi	r7,16377
    3198:	39c87ec4 	addi	r7,r7,8699
    319c:	01951034 	movhi	r6,21568
    31a0:	1009883a 	mov	r4,r2
    31a4:	180b883a 	mov	r5,r3
    31a8:	1029883a 	mov	r20,r2
    31ac:	1827883a 	mov	r19,r3
    31b0:	0005a580 	call	5a58 <__muldf3>
    31b4:	b009883a 	mov	r4,r22
    31b8:	a80b883a 	mov	r5,r21
    31bc:	100d883a 	mov	r6,r2
    31c0:	180f883a 	mov	r7,r3
    31c4:	00062c40 	call	62c4 <__subdf3>
    31c8:	018698b4 	movhi	r6,6754
    31cc:	01cf7474 	movhi	r7,15825
    31d0:	a009883a 	mov	r4,r20
    31d4:	3198cc44 	addi	r6,r6,25393
    31d8:	39ed1844 	addi	r7,r7,-19359
    31dc:	980b883a 	mov	r5,r19
    31e0:	1039883a 	mov	fp,r2
    31e4:	d8c00815 	stw	r3,32(sp)
    31e8:	0005a580 	call	5a58 <__muldf3>
    31ec:	010007c4 	movi	r4,31
    31f0:	e017883a 	mov	r11,fp
    31f4:	da800817 	ldw	r10,32(sp)
    31f8:	102d883a 	mov	r22,r2
    31fc:	182b883a 	mov	r21,r3
    3200:	24802816 	blt	r4,r18,32a4 <__ieee754_rem_pio2+0x464>
    3204:	913fffc4 	addi	r4,r18,-1
    3208:	2109883a 	add	r4,r4,r4
    320c:	01400074 	movhi	r5,1
    3210:	2109883a 	add	r4,r4,r4
    3214:	2954bb04 	addi	r5,r5,21228
    3218:	2909883a 	add	r4,r5,r4
    321c:	21000017 	ldw	r4,0(r4)
    3220:	b9002026 	beq	r23,r4,32a4 <__ieee754_rem_pio2+0x464>
    3224:	100d883a 	mov	r6,r2
    3228:	180f883a 	mov	r7,r3
    322c:	e009883a 	mov	r4,fp
    3230:	500b883a 	mov	r5,r10
    3234:	da800b15 	stw	r10,44(sp)
    3238:	df000a15 	stw	fp,40(sp)
    323c:	00062c40 	call	62c4 <__subdf3>
    3240:	da800b17 	ldw	r10,44(sp)
    3244:	dac00a17 	ldw	r11,40(sp)
    3248:	1019883a 	mov	r12,r2
    324c:	1813883a 	mov	r9,r3
    3250:	80800015 	stw	r2,0(r16)
    3254:	80c00115 	stw	r3,4(r16)
    3258:	600d883a 	mov	r6,r12
    325c:	480f883a 	mov	r7,r9
    3260:	5809883a 	mov	r4,r11
    3264:	500b883a 	mov	r5,r10
    3268:	da400b15 	stw	r9,44(sp)
    326c:	db000a15 	stw	r12,40(sp)
    3270:	00062c40 	call	62c4 <__subdf3>
    3274:	b00d883a 	mov	r6,r22
    3278:	a80f883a 	mov	r7,r21
    327c:	1009883a 	mov	r4,r2
    3280:	180b883a 	mov	r5,r3
    3284:	00062c40 	call	62c4 <__subdf3>
    3288:	80800215 	stw	r2,8(r16)
    328c:	80c00315 	stw	r3,12(r16)
    3290:	da400b17 	ldw	r9,44(sp)
    3294:	db000a17 	ldw	r12,40(sp)
    3298:	88009f16 	blt	r17,zero,3518 <__ieee754_rem_pio2+0x6d8>
    329c:	9005883a 	mov	r2,r18
    32a0:	003f7706 	br	3080 <__alt_exception_stack_pointer+0xf8003080>
    32a4:	d9400817 	ldw	r5,32(sp)
    32a8:	100d883a 	mov	r6,r2
    32ac:	180f883a 	mov	r7,r3
    32b0:	e009883a 	mov	r4,fp
    32b4:	da800b15 	stw	r10,44(sp)
    32b8:	dac00a15 	stw	r11,40(sp)
    32bc:	00062c40 	call	62c4 <__subdf3>
    32c0:	1019883a 	mov	r12,r2
    32c4:	1804d53a 	srli	r2,r3,20
    32c8:	b811d53a 	srai	r8,r23,20
    32cc:	1813883a 	mov	r9,r3
    32d0:	1081ffcc 	andi	r2,r2,2047
    32d4:	80c00115 	stw	r3,4(r16)
    32d8:	83000015 	stw	r12,0(r16)
    32dc:	4085c83a 	sub	r2,r8,r2
    32e0:	00c00404 	movi	r3,16
    32e4:	da800b17 	ldw	r10,44(sp)
    32e8:	dac00a17 	ldw	r11,40(sp)
    32ec:	18bfda0e 	bge	r3,r2,3258 <__alt_exception_stack_pointer+0xf8003258>
    32f0:	01cf7474 	movhi	r7,15825
    32f4:	39ed1844 	addi	r7,r7,-19359
    32f8:	01869834 	movhi	r6,6752
    32fc:	a009883a 	mov	r4,r20
    3300:	980b883a 	mov	r5,r19
    3304:	da000a15 	stw	r8,40(sp)
    3308:	0005a580 	call	5a58 <__muldf3>
    330c:	d9400817 	ldw	r5,32(sp)
    3310:	100d883a 	mov	r6,r2
    3314:	180f883a 	mov	r7,r3
    3318:	e009883a 	mov	r4,fp
    331c:	102d883a 	mov	r22,r2
    3320:	182b883a 	mov	r21,r3
    3324:	00062c40 	call	62c4 <__subdf3>
    3328:	d9400817 	ldw	r5,32(sp)
    332c:	100d883a 	mov	r6,r2
    3330:	180f883a 	mov	r7,r3
    3334:	e009883a 	mov	r4,fp
    3338:	182f883a 	mov	r23,r3
    333c:	d8800915 	stw	r2,36(sp)
    3340:	00062c40 	call	62c4 <__subdf3>
    3344:	b00d883a 	mov	r6,r22
    3348:	a80f883a 	mov	r7,r21
    334c:	1009883a 	mov	r4,r2
    3350:	180b883a 	mov	r5,r3
    3354:	00062c40 	call	62c4 <__subdf3>
    3358:	018b80f4 	movhi	r6,11779
    335c:	01cee8f4 	movhi	r7,15267
    3360:	319c1cc4 	addi	r6,r6,28787
    3364:	39c66284 	addi	r7,r7,6538
    3368:	a009883a 	mov	r4,r20
    336c:	980b883a 	mov	r5,r19
    3370:	102d883a 	mov	r22,r2
    3374:	182b883a 	mov	r21,r3
    3378:	0005a580 	call	5a58 <__muldf3>
    337c:	b00d883a 	mov	r6,r22
    3380:	a80f883a 	mov	r7,r21
    3384:	1009883a 	mov	r4,r2
    3388:	180b883a 	mov	r5,r3
    338c:	00062c40 	call	62c4 <__subdf3>
    3390:	d9000917 	ldw	r4,36(sp)
    3394:	100d883a 	mov	r6,r2
    3398:	180f883a 	mov	r7,r3
    339c:	b80b883a 	mov	r5,r23
    33a0:	102d883a 	mov	r22,r2
    33a4:	182b883a 	mov	r21,r3
    33a8:	00062c40 	call	62c4 <__subdf3>
    33ac:	1019883a 	mov	r12,r2
    33b0:	1804d53a 	srli	r2,r3,20
    33b4:	da000a17 	ldw	r8,40(sp)
    33b8:	83000015 	stw	r12,0(r16)
    33bc:	1081ffcc 	andi	r2,r2,2047
    33c0:	4091c83a 	sub	r8,r8,r2
    33c4:	80c00115 	stw	r3,4(r16)
    33c8:	00800c44 	movi	r2,49
    33cc:	1813883a 	mov	r9,r3
    33d0:	1200730e 	bge	r2,r8,35a0 <__ieee754_rem_pio2+0x760>
    33d4:	01cee8f4 	movhi	r7,15267
    33d8:	39c66284 	addi	r7,r7,6538
    33dc:	018b8034 	movhi	r6,11776
    33e0:	a009883a 	mov	r4,r20
    33e4:	980b883a 	mov	r5,r19
    33e8:	0005a580 	call	5a58 <__muldf3>
    33ec:	d9000917 	ldw	r4,36(sp)
    33f0:	100d883a 	mov	r6,r2
    33f4:	180f883a 	mov	r7,r3
    33f8:	b80b883a 	mov	r5,r23
    33fc:	102d883a 	mov	r22,r2
    3400:	182b883a 	mov	r21,r3
    3404:	00062c40 	call	62c4 <__subdf3>
    3408:	d9000917 	ldw	r4,36(sp)
    340c:	100d883a 	mov	r6,r2
    3410:	180f883a 	mov	r7,r3
    3414:	b80b883a 	mov	r5,r23
    3418:	d8c00b15 	stw	r3,44(sp)
    341c:	d8800a15 	stw	r2,40(sp)
    3420:	00062c40 	call	62c4 <__subdf3>
    3424:	b00d883a 	mov	r6,r22
    3428:	a80f883a 	mov	r7,r21
    342c:	1009883a 	mov	r4,r2
    3430:	180b883a 	mov	r5,r3
    3434:	00062c40 	call	62c4 <__subdf3>
    3438:	01894834 	movhi	r6,9504
    343c:	01ce5f34 	movhi	r7,14716
    3440:	31927044 	addi	r6,r6,18881
    3444:	39e0e684 	addi	r7,r7,-31846
    3448:	a009883a 	mov	r4,r20
    344c:	980b883a 	mov	r5,r19
    3450:	102d883a 	mov	r22,r2
    3454:	182b883a 	mov	r21,r3
    3458:	0005a580 	call	5a58 <__muldf3>
    345c:	b00d883a 	mov	r6,r22
    3460:	a80f883a 	mov	r7,r21
    3464:	1009883a 	mov	r4,r2
    3468:	180b883a 	mov	r5,r3
    346c:	00062c40 	call	62c4 <__subdf3>
    3470:	dac00a17 	ldw	r11,40(sp)
    3474:	da800b17 	ldw	r10,44(sp)
    3478:	102d883a 	mov	r22,r2
    347c:	182b883a 	mov	r21,r3
    3480:	100d883a 	mov	r6,r2
    3484:	180f883a 	mov	r7,r3
    3488:	5809883a 	mov	r4,r11
    348c:	500b883a 	mov	r5,r10
    3490:	003f6a06 	br	323c <__alt_exception_stack_pointer+0xf800323c>
    3494:	00050480 	call	5048 <__adddf3>
    3498:	1025883a 	mov	r18,r2
    349c:	008ffe74 	movhi	r2,16377
    34a0:	10887ec4 	addi	r2,r2,8699
    34a4:	1823883a 	mov	r17,r3
    34a8:	b8802226 	beq	r23,r2,3534 <__ieee754_rem_pio2+0x6f4>
    34ac:	018698b4 	movhi	r6,6754
    34b0:	01cf7474 	movhi	r7,15825
    34b4:	3198cc44 	addi	r6,r6,25393
    34b8:	39ed1844 	addi	r7,r7,-19359
    34bc:	9009883a 	mov	r4,r18
    34c0:	180b883a 	mov	r5,r3
    34c4:	00050480 	call	5048 <__adddf3>
    34c8:	100d883a 	mov	r6,r2
    34cc:	180f883a 	mov	r7,r3
    34d0:	9009883a 	mov	r4,r18
    34d4:	880b883a 	mov	r5,r17
    34d8:	80800015 	stw	r2,0(r16)
    34dc:	80c00115 	stw	r3,4(r16)
    34e0:	00062c40 	call	62c4 <__subdf3>
    34e4:	018698b4 	movhi	r6,6754
    34e8:	01cf7474 	movhi	r7,15825
    34ec:	3198cc44 	addi	r6,r6,25393
    34f0:	39ed1844 	addi	r7,r7,-19359
    34f4:	1009883a 	mov	r4,r2
    34f8:	180b883a 	mov	r5,r3
    34fc:	00050480 	call	5048 <__adddf3>
    3500:	80800215 	stw	r2,8(r16)
    3504:	80c00315 	stw	r3,12(r16)
    3508:	00bfffc4 	movi	r2,-1
    350c:	003edc06 	br	3080 <__alt_exception_stack_pointer+0xf8003080>
    3510:	01c000c4 	movi	r7,3
    3514:	003ec306 	br	3024 <__alt_exception_stack_pointer+0xf8003024>
    3518:	4a60003c 	xorhi	r9,r9,32768
    351c:	18e0003c 	xorhi	r3,r3,32768
    3520:	83000015 	stw	r12,0(r16)
    3524:	82400115 	stw	r9,4(r16)
    3528:	80c00315 	stw	r3,12(r16)
    352c:	0485c83a 	sub	r2,zero,r18
    3530:	003ed306 	br	3080 <__alt_exception_stack_pointer+0xf8003080>
    3534:	01cf7474 	movhi	r7,15825
    3538:	9009883a 	mov	r4,r18
    353c:	39ed1844 	addi	r7,r7,-19359
    3540:	01869834 	movhi	r6,6752
    3544:	180b883a 	mov	r5,r3
    3548:	00050480 	call	5048 <__adddf3>
    354c:	018b80f4 	movhi	r6,11779
    3550:	01cee8f4 	movhi	r7,15267
    3554:	319c1cc4 	addi	r6,r6,28787
    3558:	39c66284 	addi	r7,r7,6538
    355c:	1009883a 	mov	r4,r2
    3560:	180b883a 	mov	r5,r3
    3564:	1025883a 	mov	r18,r2
    3568:	1823883a 	mov	r17,r3
    356c:	00050480 	call	5048 <__adddf3>
    3570:	100d883a 	mov	r6,r2
    3574:	180f883a 	mov	r7,r3
    3578:	9009883a 	mov	r4,r18
    357c:	880b883a 	mov	r5,r17
    3580:	80800015 	stw	r2,0(r16)
    3584:	80c00115 	stw	r3,4(r16)
    3588:	00062c40 	call	62c4 <__subdf3>
    358c:	018b80f4 	movhi	r6,11779
    3590:	01cee8f4 	movhi	r7,15267
    3594:	319c1cc4 	addi	r6,r6,28787
    3598:	39c66284 	addi	r7,r7,6538
    359c:	003fd506 	br	34f4 <__alt_exception_stack_pointer+0xf80034f4>
    35a0:	dac00917 	ldw	r11,36(sp)
    35a4:	b815883a 	mov	r10,r23
    35a8:	003f2b06 	br	3258 <__alt_exception_stack_pointer+0xf8003258>

000035ac <__kernel_cos>:
    35ac:	defff304 	addi	sp,sp,-52
    35b0:	dc000315 	stw	r16,12(sp)
    35b4:	04200034 	movhi	r16,32768
    35b8:	843fffc4 	addi	r16,r16,-1
    35bc:	008f9034 	movhi	r2,15936
    35c0:	df000b15 	stw	fp,44(sp)
    35c4:	ddc00a15 	stw	r23,40(sp)
    35c8:	dd800915 	stw	r22,36(sp)
    35cc:	dcc00615 	stw	r19,24(sp)
    35d0:	dfc00c15 	stw	ra,48(sp)
    35d4:	dd400815 	stw	r21,32(sp)
    35d8:	dd000715 	stw	r20,28(sp)
    35dc:	dc800515 	stw	r18,20(sp)
    35e0:	dc400415 	stw	r17,16(sp)
    35e4:	2c20703a 	and	r16,r5,r16
    35e8:	10bfffc4 	addi	r2,r2,-1
    35ec:	2827883a 	mov	r19,r5
    35f0:	202d883a 	mov	r22,r4
    35f4:	302f883a 	mov	r23,r6
    35f8:	3839883a 	mov	fp,r7
    35fc:	14007516 	blt	r2,r16,37d4 <__kernel_cos+0x228>
    3600:	0006bc00 	call	6bc0 <__fixdfsi>
    3604:	10010f26 	beq	r2,zero,3a44 <__kernel_cos+0x498>
    3608:	b00d883a 	mov	r6,r22
    360c:	980f883a 	mov	r7,r19
    3610:	b009883a 	mov	r4,r22
    3614:	980b883a 	mov	r5,r19
    3618:	0005a580 	call	5a58 <__muldf3>
    361c:	01afa234 	movhi	r6,48776
    3620:	01ef6a74 	movhi	r7,48553
    3624:	318e3504 	addi	r6,r6,14548
    3628:	39feba44 	addi	r7,r7,-1303
    362c:	1009883a 	mov	r4,r2
    3630:	180b883a 	mov	r5,r3
    3634:	102b883a 	mov	r21,r2
    3638:	1829883a 	mov	r20,r3
    363c:	0005a580 	call	5a58 <__muldf3>
    3640:	01af6d74 	movhi	r6,48565
    3644:	01cf88b4 	movhi	r7,15906
    3648:	31ac7104 	addi	r6,r6,-20028
    364c:	39fba784 	addi	r7,r7,-4450
    3650:	1009883a 	mov	r4,r2
    3654:	180b883a 	mov	r5,r3
    3658:	00050480 	call	5048 <__adddf3>
    365c:	a80d883a 	mov	r6,r21
    3660:	a00f883a 	mov	r7,r20
    3664:	1009883a 	mov	r4,r2
    3668:	180b883a 	mov	r5,r3
    366c:	0005a580 	call	5a58 <__muldf3>
    3670:	01a02734 	movhi	r6,32924
    3674:	01cfa4b4 	movhi	r7,16018
    3678:	3194ab44 	addi	r6,r6,21165
    367c:	39df93c4 	addi	r7,r7,32335
    3680:	1009883a 	mov	r4,r2
    3684:	180b883a 	mov	r5,r3
    3688:	00062c40 	call	62c4 <__subdf3>
    368c:	a80d883a 	mov	r6,r21
    3690:	a00f883a 	mov	r7,r20
    3694:	1009883a 	mov	r4,r2
    3698:	180b883a 	mov	r5,r3
    369c:	0005a580 	call	5a58 <__muldf3>
    36a0:	018672f4 	movhi	r6,6603
    36a4:	01cfbeb4 	movhi	r7,16122
    36a8:	31856404 	addi	r6,r6,5520
    36ac:	39c06804 	addi	r7,r7,416
    36b0:	1009883a 	mov	r4,r2
    36b4:	180b883a 	mov	r5,r3
    36b8:	00050480 	call	5048 <__adddf3>
    36bc:	a80d883a 	mov	r6,r21
    36c0:	a00f883a 	mov	r7,r20
    36c4:	1009883a 	mov	r4,r2
    36c8:	180b883a 	mov	r5,r3
    36cc:	0005a580 	call	5a58 <__muldf3>
    36d0:	0185b074 	movhi	r6,5825
    36d4:	01cfd5f4 	movhi	r7,16215
    36d8:	31945dc4 	addi	r6,r6,20855
    36dc:	39f05b04 	addi	r7,r7,-16020
    36e0:	1009883a 	mov	r4,r2
    36e4:	180b883a 	mov	r5,r3
    36e8:	00062c40 	call	62c4 <__subdf3>
    36ec:	a80d883a 	mov	r6,r21
    36f0:	a00f883a 	mov	r7,r20
    36f4:	1009883a 	mov	r4,r2
    36f8:	180b883a 	mov	r5,r3
    36fc:	0005a580 	call	5a58 <__muldf3>
    3700:	01955574 	movhi	r6,21845
    3704:	01cfe974 	movhi	r7,16293
    3708:	31955304 	addi	r6,r6,21836
    370c:	39d55544 	addi	r7,r7,21845
    3710:	1009883a 	mov	r4,r2
    3714:	180b883a 	mov	r5,r3
    3718:	00050480 	call	5048 <__adddf3>
    371c:	a80d883a 	mov	r6,r21
    3720:	a00f883a 	mov	r7,r20
    3724:	1009883a 	mov	r4,r2
    3728:	180b883a 	mov	r5,r3
    372c:	0005a580 	call	5a58 <__muldf3>
    3730:	1017883a 	mov	r11,r2
    3734:	1815883a 	mov	r10,r3
    3738:	a809883a 	mov	r4,r21
    373c:	a00b883a 	mov	r5,r20
    3740:	000d883a 	mov	r6,zero
    3744:	01cff834 	movhi	r7,16352
    3748:	da800215 	stw	r10,8(sp)
    374c:	dac00115 	stw	r11,4(sp)
    3750:	0005a580 	call	5a58 <__muldf3>
    3754:	dac00117 	ldw	r11,4(sp)
    3758:	da800217 	ldw	r10,8(sp)
    375c:	a809883a 	mov	r4,r21
    3760:	580d883a 	mov	r6,r11
    3764:	500f883a 	mov	r7,r10
    3768:	a00b883a 	mov	r5,r20
    376c:	1023883a 	mov	r17,r2
    3770:	1821883a 	mov	r16,r3
    3774:	0005a580 	call	5a58 <__muldf3>
    3778:	b80d883a 	mov	r6,r23
    377c:	e00f883a 	mov	r7,fp
    3780:	b009883a 	mov	r4,r22
    3784:	980b883a 	mov	r5,r19
    3788:	1029883a 	mov	r20,r2
    378c:	1825883a 	mov	r18,r3
    3790:	0005a580 	call	5a58 <__muldf3>
    3794:	a009883a 	mov	r4,r20
    3798:	900b883a 	mov	r5,r18
    379c:	100d883a 	mov	r6,r2
    37a0:	180f883a 	mov	r7,r3
    37a4:	00062c40 	call	62c4 <__subdf3>
    37a8:	8809883a 	mov	r4,r17
    37ac:	800b883a 	mov	r5,r16
    37b0:	100d883a 	mov	r6,r2
    37b4:	180f883a 	mov	r7,r3
    37b8:	00062c40 	call	62c4 <__subdf3>
    37bc:	100d883a 	mov	r6,r2
    37c0:	180f883a 	mov	r7,r3
    37c4:	0009883a 	mov	r4,zero
    37c8:	014ffc34 	movhi	r5,16368
    37cc:	00062c40 	call	62c4 <__subdf3>
    37d0:	00008b06 	br	3a00 <__kernel_cos+0x454>
    37d4:	200d883a 	mov	r6,r4
    37d8:	280f883a 	mov	r7,r5
    37dc:	0005a580 	call	5a58 <__muldf3>
    37e0:	01afa234 	movhi	r6,48776
    37e4:	01ef6a74 	movhi	r7,48553
    37e8:	318e3504 	addi	r6,r6,14548
    37ec:	39feba44 	addi	r7,r7,-1303
    37f0:	1009883a 	mov	r4,r2
    37f4:	180b883a 	mov	r5,r3
    37f8:	1025883a 	mov	r18,r2
    37fc:	1823883a 	mov	r17,r3
    3800:	0005a580 	call	5a58 <__muldf3>
    3804:	01af6d74 	movhi	r6,48565
    3808:	01cf88b4 	movhi	r7,15906
    380c:	31ac7104 	addi	r6,r6,-20028
    3810:	39fba784 	addi	r7,r7,-4450
    3814:	1009883a 	mov	r4,r2
    3818:	180b883a 	mov	r5,r3
    381c:	00050480 	call	5048 <__adddf3>
    3820:	900d883a 	mov	r6,r18
    3824:	880f883a 	mov	r7,r17
    3828:	1009883a 	mov	r4,r2
    382c:	180b883a 	mov	r5,r3
    3830:	0005a580 	call	5a58 <__muldf3>
    3834:	01a02734 	movhi	r6,32924
    3838:	01cfa4b4 	movhi	r7,16018
    383c:	3194ab44 	addi	r6,r6,21165
    3840:	39df93c4 	addi	r7,r7,32335
    3844:	1009883a 	mov	r4,r2
    3848:	180b883a 	mov	r5,r3
    384c:	00062c40 	call	62c4 <__subdf3>
    3850:	900d883a 	mov	r6,r18
    3854:	880f883a 	mov	r7,r17
    3858:	1009883a 	mov	r4,r2
    385c:	180b883a 	mov	r5,r3
    3860:	0005a580 	call	5a58 <__muldf3>
    3864:	018672f4 	movhi	r6,6603
    3868:	01cfbeb4 	movhi	r7,16122
    386c:	31856404 	addi	r6,r6,5520
    3870:	39c06804 	addi	r7,r7,416
    3874:	1009883a 	mov	r4,r2
    3878:	180b883a 	mov	r5,r3
    387c:	00050480 	call	5048 <__adddf3>
    3880:	900d883a 	mov	r6,r18
    3884:	880f883a 	mov	r7,r17
    3888:	1009883a 	mov	r4,r2
    388c:	180b883a 	mov	r5,r3
    3890:	0005a580 	call	5a58 <__muldf3>
    3894:	0185b074 	movhi	r6,5825
    3898:	01cfd5f4 	movhi	r7,16215
    389c:	31945dc4 	addi	r6,r6,20855
    38a0:	39f05b04 	addi	r7,r7,-16020
    38a4:	1009883a 	mov	r4,r2
    38a8:	180b883a 	mov	r5,r3
    38ac:	00062c40 	call	62c4 <__subdf3>
    38b0:	900d883a 	mov	r6,r18
    38b4:	880f883a 	mov	r7,r17
    38b8:	1009883a 	mov	r4,r2
    38bc:	180b883a 	mov	r5,r3
    38c0:	0005a580 	call	5a58 <__muldf3>
    38c4:	01955574 	movhi	r6,21845
    38c8:	01cfe974 	movhi	r7,16293
    38cc:	31955304 	addi	r6,r6,21836
    38d0:	39d55544 	addi	r7,r7,21845
    38d4:	1009883a 	mov	r4,r2
    38d8:	180b883a 	mov	r5,r3
    38dc:	00050480 	call	5048 <__adddf3>
    38e0:	900d883a 	mov	r6,r18
    38e4:	880f883a 	mov	r7,r17
    38e8:	1009883a 	mov	r4,r2
    38ec:	180b883a 	mov	r5,r3
    38f0:	0005a580 	call	5a58 <__muldf3>
    38f4:	1013883a 	mov	r9,r2
    38f8:	1017883a 	mov	r11,r2
    38fc:	008ff4f4 	movhi	r2,16339
    3900:	108ccc84 	addi	r2,r2,13106
    3904:	1811883a 	mov	r8,r3
    3908:	902b883a 	mov	r21,r18
    390c:	8829883a 	mov	r20,r17
    3910:	1815883a 	mov	r10,r3
    3914:	143f880e 	bge	r2,r16,3738 <__alt_exception_stack_pointer+0xf8003738>
    3918:	008ffa74 	movhi	r2,16361
    391c:	14004416 	blt	r2,r16,3a30 <__kernel_cos+0x484>
    3920:	00bff834 	movhi	r2,65504
    3924:	80a1883a 	add	r16,r16,r2
    3928:	000d883a 	mov	r6,zero
    392c:	800f883a 	mov	r7,r16
    3930:	0009883a 	mov	r4,zero
    3934:	014ffc34 	movhi	r5,16368
    3938:	da400115 	stw	r9,4(sp)
    393c:	d8c00215 	stw	r3,8(sp)
    3940:	00062c40 	call	62c4 <__subdf3>
    3944:	da000217 	ldw	r8,8(sp)
    3948:	da400117 	ldw	r9,4(sp)
    394c:	102b883a 	mov	r21,r2
    3950:	d8c00015 	stw	r3,0(sp)
    3954:	9009883a 	mov	r4,r18
    3958:	880b883a 	mov	r5,r17
    395c:	000d883a 	mov	r6,zero
    3960:	01cff834 	movhi	r7,16352
    3964:	da000215 	stw	r8,8(sp)
    3968:	da400115 	stw	r9,4(sp)
    396c:	0005a580 	call	5a58 <__muldf3>
    3970:	800f883a 	mov	r7,r16
    3974:	000d883a 	mov	r6,zero
    3978:	1009883a 	mov	r4,r2
    397c:	180b883a 	mov	r5,r3
    3980:	00062c40 	call	62c4 <__subdf3>
    3984:	da400117 	ldw	r9,4(sp)
    3988:	da000217 	ldw	r8,8(sp)
    398c:	9009883a 	mov	r4,r18
    3990:	480d883a 	mov	r6,r9
    3994:	400f883a 	mov	r7,r8
    3998:	880b883a 	mov	r5,r17
    399c:	1029883a 	mov	r20,r2
    39a0:	1821883a 	mov	r16,r3
    39a4:	0005a580 	call	5a58 <__muldf3>
    39a8:	b80d883a 	mov	r6,r23
    39ac:	e00f883a 	mov	r7,fp
    39b0:	b009883a 	mov	r4,r22
    39b4:	980b883a 	mov	r5,r19
    39b8:	1025883a 	mov	r18,r2
    39bc:	1823883a 	mov	r17,r3
    39c0:	0005a580 	call	5a58 <__muldf3>
    39c4:	100d883a 	mov	r6,r2
    39c8:	180f883a 	mov	r7,r3
    39cc:	9009883a 	mov	r4,r18
    39d0:	880b883a 	mov	r5,r17
    39d4:	00062c40 	call	62c4 <__subdf3>
    39d8:	100d883a 	mov	r6,r2
    39dc:	180f883a 	mov	r7,r3
    39e0:	a009883a 	mov	r4,r20
    39e4:	800b883a 	mov	r5,r16
    39e8:	00062c40 	call	62c4 <__subdf3>
    39ec:	d9400017 	ldw	r5,0(sp)
    39f0:	100d883a 	mov	r6,r2
    39f4:	180f883a 	mov	r7,r3
    39f8:	a809883a 	mov	r4,r21
    39fc:	00062c40 	call	62c4 <__subdf3>
    3a00:	dfc00c17 	ldw	ra,48(sp)
    3a04:	df000b17 	ldw	fp,44(sp)
    3a08:	ddc00a17 	ldw	r23,40(sp)
    3a0c:	dd800917 	ldw	r22,36(sp)
    3a10:	dd400817 	ldw	r21,32(sp)
    3a14:	dd000717 	ldw	r20,28(sp)
    3a18:	dcc00617 	ldw	r19,24(sp)
    3a1c:	dc800517 	ldw	r18,20(sp)
    3a20:	dc400417 	ldw	r17,16(sp)
    3a24:	dc000317 	ldw	r16,12(sp)
    3a28:	dec00d04 	addi	sp,sp,52
    3a2c:	f800283a 	ret
    3a30:	008ff9f4 	movhi	r2,16359
    3a34:	002b883a 	mov	r21,zero
    3a38:	d8800015 	stw	r2,0(sp)
    3a3c:	040ff4b4 	movhi	r16,16338
    3a40:	003fc406 	br	3954 <__alt_exception_stack_pointer+0xf8003954>
    3a44:	0005883a 	mov	r2,zero
    3a48:	00cffc34 	movhi	r3,16368
    3a4c:	003fec06 	br	3a00 <__alt_exception_stack_pointer+0xf8003a00>

00003a50 <__kernel_rem_pio2>:
    3a50:	deff5a04 	addi	sp,sp,-664
    3a54:	da00a617 	ldw	r8,664(sp)
    3a58:	00c00074 	movhi	r3,1
    3a5c:	18d52d04 	addi	r3,r3,21684
    3a60:	4205883a 	add	r2,r8,r8
    3a64:	1085883a 	add	r2,r2,r2
    3a68:	1885883a 	add	r2,r3,r2
    3a6c:	d9008e15 	stw	r4,568(sp)
    3a70:	d9408f15 	stw	r5,572(sp)
    3a74:	313fff44 	addi	r4,r6,-3
    3a78:	01400604 	movi	r5,24
    3a7c:	dd80a215 	stw	r22,648(sp)
    3a80:	dc009c15 	stw	r16,624(sp)
    3a84:	dfc0a515 	stw	ra,660(sp)
    3a88:	df00a415 	stw	fp,656(sp)
    3a8c:	ddc0a315 	stw	r23,652(sp)
    3a90:	dd40a115 	stw	r21,644(sp)
    3a94:	dd00a015 	stw	r20,640(sp)
    3a98:	dcc09f15 	stw	r19,636(sp)
    3a9c:	dc809e15 	stw	r18,632(sp)
    3aa0:	dc409d15 	stw	r17,628(sp)
    3aa4:	3021883a 	mov	r16,r6
    3aa8:	d9c09315 	stw	r7,588(sp)
    3aac:	15800017 	ldw	r22,0(r2)
    3ab0:	0004e6c0 	call	4e6c <__divsi3>
    3ab4:	da009317 	ldw	r8,588(sp)
    3ab8:	d8809215 	stw	r2,584(sp)
    3abc:	423fffc4 	addi	r8,r8,-1
    3ac0:	da008d15 	stw	r8,564(sp)
    3ac4:	10033d16 	blt	r2,zero,47bc <__kernel_rem_pio2+0xd6c>
    3ac8:	da009217 	ldw	r8,584(sp)
    3acc:	017ffa04 	movi	r5,-24
    3ad0:	42000044 	addi	r8,r8,1
    3ad4:	4009883a 	mov	r4,r8
    3ad8:	da009515 	stw	r8,596(sp)
    3adc:	00050200 	call	5020 <__mulsi3>
    3ae0:	da008d17 	ldw	r8,564(sp)
    3ae4:	1421883a 	add	r16,r2,r16
    3ae8:	d8809217 	ldw	r2,584(sp)
    3aec:	b207883a 	add	r3,r22,r8
    3af0:	dc009015 	stw	r16,576(sp)
    3af4:	1223c83a 	sub	r17,r2,r8
    3af8:	18001016 	blt	r3,zero,3b3c <__kernel_rem_pio2+0xec>
    3afc:	da00a717 	ldw	r8,668(sp)
    3b00:	8c65883a 	add	r18,r17,r17
    3b04:	94a5883a 	add	r18,r18,r18
    3b08:	1c47883a 	add	r3,r3,r17
    3b0c:	dcc05004 	addi	r19,sp,320
    3b10:	44a5883a 	add	r18,r8,r18
    3b14:	1c000044 	addi	r16,r3,1
    3b18:	88015316 	blt	r17,zero,4068 <__kernel_rem_pio2+0x618>
    3b1c:	91000017 	ldw	r4,0(r18)
    3b20:	0006c400 	call	6c40 <__floatsidf>
    3b24:	98800015 	stw	r2,0(r19)
    3b28:	98c00115 	stw	r3,4(r19)
    3b2c:	8c400044 	addi	r17,r17,1
    3b30:	9cc00204 	addi	r19,r19,8
    3b34:	94800104 	addi	r18,r18,4
    3b38:	8c3ff71e 	bne	r17,r16,3b18 <__alt_exception_stack_pointer+0xf8003b18>
    3b3c:	b0002816 	blt	r22,zero,3be0 <__kernel_rem_pio2+0x190>
    3b40:	da008d17 	ldw	r8,564(sp)
    3b44:	b4c00044 	addi	r19,r22,1
    3b48:	982690fa 	slli	r19,r19,3
    3b4c:	402490fa 	slli	r18,r8,3
    3b50:	da008e17 	ldw	r8,568(sp)
    3b54:	d8805004 	addi	r2,sp,320
    3b58:	94000204 	addi	r16,r18,8
    3b5c:	d823883a 	mov	r17,sp
    3b60:	14a5883a 	add	r18,r2,r18
    3b64:	dcef883a 	add	r23,sp,r19
    3b68:	4421883a 	add	r16,r8,r16
    3b6c:	dd809115 	stw	r22,580(sp)
    3b70:	4039883a 	mov	fp,r8
    3b74:	da008d17 	ldw	r8,564(sp)
    3b78:	40016016 	blt	r8,zero,40fc <__kernel_rem_pio2+0x6ac>
    3b7c:	e027883a 	mov	r19,fp
    3b80:	9029883a 	mov	r20,r18
    3b84:	002d883a 	mov	r22,zero
    3b88:	002b883a 	mov	r21,zero
    3b8c:	a1800017 	ldw	r6,0(r20)
    3b90:	a1c00117 	ldw	r7,4(r20)
    3b94:	99000017 	ldw	r4,0(r19)
    3b98:	99400117 	ldw	r5,4(r19)
    3b9c:	9cc00204 	addi	r19,r19,8
    3ba0:	a53ffe04 	addi	r20,r20,-8
    3ba4:	0005a580 	call	5a58 <__muldf3>
    3ba8:	b009883a 	mov	r4,r22
    3bac:	a80b883a 	mov	r5,r21
    3bb0:	100d883a 	mov	r6,r2
    3bb4:	180f883a 	mov	r7,r3
    3bb8:	00050480 	call	5048 <__adddf3>
    3bbc:	102d883a 	mov	r22,r2
    3bc0:	182b883a 	mov	r21,r3
    3bc4:	9c3ff11e 	bne	r19,r16,3b8c <__alt_exception_stack_pointer+0xf8003b8c>
    3bc8:	8d800015 	stw	r22,0(r17)
    3bcc:	8d400115 	stw	r21,4(r17)
    3bd0:	8c400204 	addi	r17,r17,8
    3bd4:	94800204 	addi	r18,r18,8
    3bd8:	8dffe61e 	bne	r17,r23,3b74 <__alt_exception_stack_pointer+0xf8003b74>
    3bdc:	dd809117 	ldw	r22,580(sp)
    3be0:	00d00034 	movhi	r3,16384
    3be4:	da009317 	ldw	r8,588(sp)
    3be8:	18ffff84 	addi	r3,r3,-2
    3bec:	b0c7883a 	add	r3,r22,r3
    3bf0:	18c7883a 	add	r3,r3,r3
    3bf4:	402090fa 	slli	r16,r8,3
    3bf8:	18c7883a 	add	r3,r3,r3
    3bfc:	da007804 	addi	r8,sp,480
    3c00:	40d1883a 	add	r8,r8,r3
    3c04:	b0bfffc4 	addi	r2,r22,-1
    3c08:	da009615 	stw	r8,600(sp)
    3c0c:	da008e17 	ldw	r8,568(sp)
    3c10:	1085883a 	add	r2,r2,r2
    3c14:	1085883a 	add	r2,r2,r2
    3c18:	19000104 	addi	r4,r3,4
    3c1c:	d885883a 	add	r2,sp,r2
    3c20:	4421883a 	add	r16,r8,r16
    3c24:	da007804 	addi	r8,sp,480
    3c28:	4111883a 	add	r8,r8,r4
    3c2c:	10807804 	addi	r2,r2,480
    3c30:	da009715 	stw	r8,604(sp)
    3c34:	b025883a 	mov	r18,r22
    3c38:	d8809815 	stw	r2,608(sp)
    3c3c:	dd809415 	stw	r22,592(sp)
    3c40:	900490fa 	slli	r2,r18,3
    3c44:	d885883a 	add	r2,sp,r2
    3c48:	17000017 	ldw	fp,0(r2)
    3c4c:	15400117 	ldw	r21,4(r2)
    3c50:	04802b0e 	bge	zero,r18,3d00 <__kernel_rem_pio2+0x2b0>
    3c54:	00880034 	movhi	r2,8192
    3c58:	10bfffc4 	addi	r2,r2,-1
    3c5c:	90a9883a 	add	r20,r18,r2
    3c60:	a02890fa 	slli	r20,r20,3
    3c64:	dc407804 	addi	r17,sp,480
    3c68:	dcfffe04 	addi	r19,sp,-8
    3c6c:	dd29883a 	add	r20,sp,r20
    3c70:	000d883a 	mov	r6,zero
    3c74:	01cf9c34 	movhi	r7,15984
    3c78:	e009883a 	mov	r4,fp
    3c7c:	a80b883a 	mov	r5,r21
    3c80:	0005a580 	call	5a58 <__muldf3>
    3c84:	180b883a 	mov	r5,r3
    3c88:	1009883a 	mov	r4,r2
    3c8c:	0006bc00 	call	6bc0 <__fixdfsi>
    3c90:	1009883a 	mov	r4,r2
    3c94:	0006c400 	call	6c40 <__floatsidf>
    3c98:	000d883a 	mov	r6,zero
    3c9c:	01d05c34 	movhi	r7,16752
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	180b883a 	mov	r5,r3
    3ca8:	102f883a 	mov	r23,r2
    3cac:	182d883a 	mov	r22,r3
    3cb0:	0005a580 	call	5a58 <__muldf3>
    3cb4:	100d883a 	mov	r6,r2
    3cb8:	180f883a 	mov	r7,r3
    3cbc:	e009883a 	mov	r4,fp
    3cc0:	a80b883a 	mov	r5,r21
    3cc4:	00062c40 	call	62c4 <__subdf3>
    3cc8:	180b883a 	mov	r5,r3
    3ccc:	1009883a 	mov	r4,r2
    3cd0:	0006bc00 	call	6bc0 <__fixdfsi>
    3cd4:	a1800017 	ldw	r6,0(r20)
    3cd8:	a1c00117 	ldw	r7,4(r20)
    3cdc:	88800015 	stw	r2,0(r17)
    3ce0:	b809883a 	mov	r4,r23
    3ce4:	b00b883a 	mov	r5,r22
    3ce8:	00050480 	call	5048 <__adddf3>
    3cec:	a53ffe04 	addi	r20,r20,-8
    3cf0:	1039883a 	mov	fp,r2
    3cf4:	182b883a 	mov	r21,r3
    3cf8:	8c400104 	addi	r17,r17,4
    3cfc:	a4ffdc1e 	bne	r20,r19,3c70 <__alt_exception_stack_pointer+0xf8003c70>
    3d00:	d9809017 	ldw	r6,576(sp)
    3d04:	a80b883a 	mov	r5,r21
    3d08:	e009883a 	mov	r4,fp
    3d0c:	0004cb40 	call	4cb4 <scalbn>
    3d10:	000d883a 	mov	r6,zero
    3d14:	01cff034 	movhi	r7,16320
    3d18:	1009883a 	mov	r4,r2
    3d1c:	180b883a 	mov	r5,r3
    3d20:	1027883a 	mov	r19,r2
    3d24:	1823883a 	mov	r17,r3
    3d28:	0005a580 	call	5a58 <__muldf3>
    3d2c:	1009883a 	mov	r4,r2
    3d30:	180b883a 	mov	r5,r3
    3d34:	0004ac80 	call	4ac8 <floor>
    3d38:	000d883a 	mov	r6,zero
    3d3c:	01d00834 	movhi	r7,16416
    3d40:	1009883a 	mov	r4,r2
    3d44:	180b883a 	mov	r5,r3
    3d48:	0005a580 	call	5a58 <__muldf3>
    3d4c:	100d883a 	mov	r6,r2
    3d50:	180f883a 	mov	r7,r3
    3d54:	9809883a 	mov	r4,r19
    3d58:	880b883a 	mov	r5,r17
    3d5c:	00062c40 	call	62c4 <__subdf3>
    3d60:	180b883a 	mov	r5,r3
    3d64:	1009883a 	mov	r4,r2
    3d68:	1827883a 	mov	r19,r3
    3d6c:	1029883a 	mov	r20,r2
    3d70:	0006bc00 	call	6bc0 <__fixdfsi>
    3d74:	1009883a 	mov	r4,r2
    3d78:	1023883a 	mov	r17,r2
    3d7c:	0006c400 	call	6c40 <__floatsidf>
    3d80:	a009883a 	mov	r4,r20
    3d84:	100d883a 	mov	r6,r2
    3d88:	180f883a 	mov	r7,r3
    3d8c:	980b883a 	mov	r5,r19
    3d90:	00062c40 	call	62c4 <__subdf3>
    3d94:	d9009017 	ldw	r4,576(sp)
    3d98:	1013883a 	mov	r9,r2
    3d9c:	102b883a 	mov	r21,r2
    3da0:	1811883a 	mov	r8,r3
    3da4:	0100b30e 	bge	zero,r4,4074 <__kernel_rem_pio2+0x624>
    3da8:	90bfffc4 	addi	r2,r18,-1
    3dac:	1085883a 	add	r2,r2,r2
    3db0:	1085883a 	add	r2,r2,r2
    3db4:	d885883a 	add	r2,sp,r2
    3db8:	10807804 	addi	r2,r2,480
    3dbc:	d9809017 	ldw	r6,576(sp)
    3dc0:	11400017 	ldw	r5,0(r2)
    3dc4:	01000604 	movi	r4,24
    3dc8:	2189c83a 	sub	r4,r4,r6
    3dcc:	290dd83a 	sra	r6,r5,r4
    3dd0:	d9c09017 	ldw	r7,576(sp)
    3dd4:	04c005c4 	movi	r19,23
    3dd8:	3108983a 	sll	r4,r6,r4
    3ddc:	99e7c83a 	sub	r19,r19,r7
    3de0:	89a3883a 	add	r17,r17,r6
    3de4:	2909c83a 	sub	r4,r5,r4
    3de8:	24e7d83a 	sra	r19,r4,r19
    3dec:	11000015 	stw	r4,0(r2)
    3df0:	04c02a0e 	bge	zero,r19,3e9c <__kernel_rem_pio2+0x44c>
    3df4:	8c400044 	addi	r17,r17,1
    3df8:	0481570e 	bge	zero,r18,4358 <__kernel_rem_pio2+0x908>
    3dfc:	02804034 	movhi	r10,256
    3e00:	52bfffc4 	addi	r10,r10,-1
    3e04:	d8807804 	addi	r2,sp,480
    3e08:	000b883a 	mov	r5,zero
    3e0c:	0029883a 	mov	r20,zero
    3e10:	01c04034 	movhi	r7,256
    3e14:	00000706 	br	3e34 <__kernel_rem_pio2+0x3e4>
    3e18:	390dc83a 	sub	r6,r7,r4
    3e1c:	20000226 	beq	r4,zero,3e28 <__kernel_rem_pio2+0x3d8>
    3e20:	11800015 	stw	r6,0(r2)
    3e24:	05000044 	movi	r20,1
    3e28:	29400044 	addi	r5,r5,1
    3e2c:	10800104 	addi	r2,r2,4
    3e30:	2c80080e 	bge	r5,r18,3e54 <__kernel_rem_pio2+0x404>
    3e34:	11000017 	ldw	r4,0(r2)
    3e38:	a03ff726 	beq	r20,zero,3e18 <__alt_exception_stack_pointer+0xf8003e18>
    3e3c:	5109c83a 	sub	r4,r10,r4
    3e40:	11000015 	stw	r4,0(r2)
    3e44:	29400044 	addi	r5,r5,1
    3e48:	05000044 	movi	r20,1
    3e4c:	10800104 	addi	r2,r2,4
    3e50:	2cbff816 	blt	r5,r18,3e34 <__alt_exception_stack_pointer+0xf8003e34>
    3e54:	d9009017 	ldw	r4,576(sp)
    3e58:	01000e0e 	bge	zero,r4,3e94 <__kernel_rem_pio2+0x444>
    3e5c:	00800044 	movi	r2,1
    3e60:	20808d26 	beq	r4,r2,4098 <__kernel_rem_pio2+0x648>
    3e64:	00800084 	movi	r2,2
    3e68:	20800a1e 	bne	r4,r2,3e94 <__kernel_rem_pio2+0x444>
    3e6c:	90bfffc4 	addi	r2,r18,-1
    3e70:	1085883a 	add	r2,r2,r2
    3e74:	1085883a 	add	r2,r2,r2
    3e78:	d885883a 	add	r2,sp,r2
    3e7c:	10807804 	addi	r2,r2,480
    3e80:	11400017 	ldw	r5,0(r2)
    3e84:	01001034 	movhi	r4,64
    3e88:	213fffc4 	addi	r4,r4,-1
    3e8c:	2908703a 	and	r4,r5,r4
    3e90:	11000015 	stw	r4,0(r2)
    3e94:	00800084 	movi	r2,2
    3e98:	98805d26 	beq	r19,r2,4010 <__kernel_rem_pio2+0x5c0>
    3e9c:	400b883a 	mov	r5,r8
    3ea0:	000d883a 	mov	r6,zero
    3ea4:	000f883a 	mov	r7,zero
    3ea8:	a809883a 	mov	r4,r21
    3eac:	da009b15 	stw	r8,620(sp)
    3eb0:	00058f40 	call	58f4 <__eqdf2>
    3eb4:	da009b17 	ldw	r8,620(sp)
    3eb8:	10012b1e 	bne	r2,zero,4368 <__kernel_rem_pio2+0x918>
    3ebc:	da009417 	ldw	r8,592(sp)
    3ec0:	917fffc4 	addi	r5,r18,-1
    3ec4:	2a000e16 	blt	r5,r8,3f00 <__kernel_rem_pio2+0x4b0>
    3ec8:	00900034 	movhi	r2,16384
    3ecc:	10bfffc4 	addi	r2,r2,-1
    3ed0:	9085883a 	add	r2,r18,r2
    3ed4:	1085883a 	add	r2,r2,r2
    3ed8:	d9809717 	ldw	r6,604(sp)
    3edc:	1085883a 	add	r2,r2,r2
    3ee0:	d9007804 	addi	r4,sp,480
    3ee4:	0007883a 	mov	r3,zero
    3ee8:	2085883a 	add	r2,r4,r2
    3eec:	11000017 	ldw	r4,0(r2)
    3ef0:	10bfff04 	addi	r2,r2,-4
    3ef4:	1906b03a 	or	r3,r3,r4
    3ef8:	11bffc1e 	bne	r2,r6,3eec <__alt_exception_stack_pointer+0xf8003eec>
    3efc:	1800821e 	bne	r3,zero,4108 <__kernel_rem_pio2+0x6b8>
    3f00:	da009817 	ldw	r8,608(sp)
    3f04:	40800017 	ldw	r2,0(r8)
    3f08:	1001151e 	bne	r2,zero,4360 <__kernel_rem_pio2+0x910>
    3f0c:	d8809617 	ldw	r2,600(sp)
    3f10:	05000044 	movi	r20,1
    3f14:	10bfff04 	addi	r2,r2,-4
    3f18:	10c00117 	ldw	r3,4(r2)
    3f1c:	a5000044 	addi	r20,r20,1
    3f20:	183ffc26 	beq	r3,zero,3f14 <__alt_exception_stack_pointer+0xf8003f14>
    3f24:	9529883a 	add	r20,r18,r20
    3f28:	90800044 	addi	r2,r18,1
    3f2c:	dd009115 	stw	r20,580(sp)
    3f30:	a0803216 	blt	r20,r2,3ffc <__kernel_rem_pio2+0x5ac>
    3f34:	da009317 	ldw	r8,588(sp)
    3f38:	d8c09117 	ldw	r3,580(sp)
    3f3c:	44a3883a 	add	r17,r8,r18
    3f40:	da009217 	ldw	r8,584(sp)
    3f44:	882290fa 	slli	r17,r17,3
    3f48:	40a5883a 	add	r18,r8,r2
    3f4c:	da009517 	ldw	r8,596(sp)
    3f50:	100490fa 	slli	r2,r2,3
    3f54:	94a5883a 	add	r18,r18,r18
    3f58:	40eb883a 	add	r21,r8,r3
    3f5c:	da00a717 	ldw	r8,668(sp)
    3f60:	ad6b883a 	add	r21,r21,r21
    3f64:	94a5883a 	add	r18,r18,r18
    3f68:	ad6b883a 	add	r21,r21,r21
    3f6c:	d8c05004 	addi	r3,sp,320
    3f70:	44a5883a 	add	r18,r8,r18
    3f74:	1c63883a 	add	r17,r3,r17
    3f78:	d8a7883a 	add	r19,sp,r2
    3f7c:	456b883a 	add	r21,r8,r21
    3f80:	91000017 	ldw	r4,0(r18)
    3f84:	0006c400 	call	6c40 <__floatsidf>
    3f88:	da008d17 	ldw	r8,564(sp)
    3f8c:	88800015 	stw	r2,0(r17)
    3f90:	88c00115 	stw	r3,4(r17)
    3f94:	40001b16 	blt	r8,zero,4004 <__kernel_rem_pio2+0x5b4>
    3f98:	dd008e17 	ldw	r20,568(sp)
    3f9c:	882d883a 	mov	r22,r17
    3fa0:	002f883a 	mov	r23,zero
    3fa4:	0039883a 	mov	fp,zero
    3fa8:	b1800017 	ldw	r6,0(r22)
    3fac:	b1c00117 	ldw	r7,4(r22)
    3fb0:	a1000017 	ldw	r4,0(r20)
    3fb4:	a1400117 	ldw	r5,4(r20)
    3fb8:	a5000204 	addi	r20,r20,8
    3fbc:	b5bffe04 	addi	r22,r22,-8
    3fc0:	0005a580 	call	5a58 <__muldf3>
    3fc4:	b809883a 	mov	r4,r23
    3fc8:	e00b883a 	mov	r5,fp
    3fcc:	100d883a 	mov	r6,r2
    3fd0:	180f883a 	mov	r7,r3
    3fd4:	00050480 	call	5048 <__adddf3>
    3fd8:	102f883a 	mov	r23,r2
    3fdc:	1839883a 	mov	fp,r3
    3fe0:	a43ff11e 	bne	r20,r16,3fa8 <__alt_exception_stack_pointer+0xf8003fa8>
    3fe4:	9dc00015 	stw	r23,0(r19)
    3fe8:	9f000115 	stw	fp,4(r19)
    3fec:	94800104 	addi	r18,r18,4
    3ff0:	8c400204 	addi	r17,r17,8
    3ff4:	9cc00204 	addi	r19,r19,8
    3ff8:	957fe11e 	bne	r18,r21,3f80 <__alt_exception_stack_pointer+0xf8003f80>
    3ffc:	dc809117 	ldw	r18,580(sp)
    4000:	003f0f06 	br	3c40 <__alt_exception_stack_pointer+0xf8003c40>
    4004:	002f883a 	mov	r23,zero
    4008:	0039883a 	mov	fp,zero
    400c:	003ff506 	br	3fe4 <__alt_exception_stack_pointer+0xf8003fe4>
    4010:	480d883a 	mov	r6,r9
    4014:	180f883a 	mov	r7,r3
    4018:	0009883a 	mov	r4,zero
    401c:	014ffc34 	movhi	r5,16368
    4020:	00062c40 	call	62c4 <__subdf3>
    4024:	102b883a 	mov	r21,r2
    4028:	1811883a 	mov	r8,r3
    402c:	a03f9b26 	beq	r20,zero,3e9c <__alt_exception_stack_pointer+0xf8003e9c>
    4030:	d9809017 	ldw	r6,576(sp)
    4034:	0009883a 	mov	r4,zero
    4038:	014ffc34 	movhi	r5,16368
    403c:	d8c09b15 	stw	r3,620(sp)
    4040:	0004cb40 	call	4cb4 <scalbn>
    4044:	da009b17 	ldw	r8,620(sp)
    4048:	a809883a 	mov	r4,r21
    404c:	100d883a 	mov	r6,r2
    4050:	400b883a 	mov	r5,r8
    4054:	180f883a 	mov	r7,r3
    4058:	00062c40 	call	62c4 <__subdf3>
    405c:	102b883a 	mov	r21,r2
    4060:	1811883a 	mov	r8,r3
    4064:	003f8d06 	br	3e9c <__alt_exception_stack_pointer+0xf8003e9c>
    4068:	0005883a 	mov	r2,zero
    406c:	0007883a 	mov	r3,zero
    4070:	003eac06 	br	3b24 <__alt_exception_stack_pointer+0xf8003b24>
    4074:	d8809017 	ldw	r2,576(sp)
    4078:	1000121e 	bne	r2,zero,40c4 <__kernel_rem_pio2+0x674>
    407c:	90bfffc4 	addi	r2,r18,-1
    4080:	1085883a 	add	r2,r2,r2
    4084:	1085883a 	add	r2,r2,r2
    4088:	d885883a 	add	r2,sp,r2
    408c:	14c07817 	ldw	r19,480(r2)
    4090:	9827d5fa 	srai	r19,r19,23
    4094:	003f5606 	br	3df0 <__alt_exception_stack_pointer+0xf8003df0>
    4098:	90bfffc4 	addi	r2,r18,-1
    409c:	1085883a 	add	r2,r2,r2
    40a0:	1085883a 	add	r2,r2,r2
    40a4:	d885883a 	add	r2,sp,r2
    40a8:	10807804 	addi	r2,r2,480
    40ac:	11000017 	ldw	r4,0(r2)
    40b0:	01402034 	movhi	r5,128
    40b4:	297fffc4 	addi	r5,r5,-1
    40b8:	2148703a 	and	r4,r4,r5
    40bc:	11000015 	stw	r4,0(r2)
    40c0:	003f7406 	br	3e94 <__alt_exception_stack_pointer+0xf8003e94>
    40c4:	4809883a 	mov	r4,r9
    40c8:	180b883a 	mov	r5,r3
    40cc:	000d883a 	mov	r6,zero
    40d0:	01cff834 	movhi	r7,16352
    40d4:	d8c09a15 	stw	r3,616(sp)
    40d8:	d8c09b15 	stw	r3,620(sp)
    40dc:	da409915 	stw	r9,612(sp)
    40e0:	000597c0 	call	597c <__gedf2>
    40e4:	d8c09a17 	ldw	r3,616(sp)
    40e8:	da009b17 	ldw	r8,620(sp)
    40ec:	da409917 	ldw	r9,612(sp)
    40f0:	1000920e 	bge	r2,zero,433c <__kernel_rem_pio2+0x8ec>
    40f4:	0027883a 	mov	r19,zero
    40f8:	003f6806 	br	3e9c <__alt_exception_stack_pointer+0xf8003e9c>
    40fc:	002d883a 	mov	r22,zero
    4100:	002b883a 	mov	r21,zero
    4104:	003eb006 	br	3bc8 <__alt_exception_stack_pointer+0xf8003bc8>
    4108:	2945883a 	add	r2,r5,r5
    410c:	da009017 	ldw	r8,576(sp)
    4110:	1085883a 	add	r2,r2,r2
    4114:	d885883a 	add	r2,sp,r2
    4118:	10807817 	ldw	r2,480(r2)
    411c:	423ffa04 	addi	r8,r8,-24
    4120:	dc409115 	stw	r17,580(sp)
    4124:	dcc08d15 	stw	r19,564(sp)
    4128:	da009015 	stw	r8,576(sp)
    412c:	dd809417 	ldw	r22,592(sp)
    4130:	2823883a 	mov	r17,r5
    4134:	10000e1e 	bne	r2,zero,4170 <__kernel_rem_pio2+0x720>
    4138:	00900034 	movhi	r2,16384
    413c:	10bfffc4 	addi	r2,r2,-1
    4140:	2885883a 	add	r2,r5,r2
    4144:	1085883a 	add	r2,r2,r2
    4148:	d8c07804 	addi	r3,sp,480
    414c:	1085883a 	add	r2,r2,r2
    4150:	1885883a 	add	r2,r3,r2
    4154:	4007883a 	mov	r3,r8
    4158:	10bfff04 	addi	r2,r2,-4
    415c:	11000117 	ldw	r4,4(r2)
    4160:	8c7fffc4 	addi	r17,r17,-1
    4164:	18fffa04 	addi	r3,r3,-24
    4168:	203ffb26 	beq	r4,zero,4158 <__alt_exception_stack_pointer+0xf8004158>
    416c:	d8c09015 	stw	r3,576(sp)
    4170:	d9809017 	ldw	r6,576(sp)
    4174:	0009883a 	mov	r4,zero
    4178:	014ffc34 	movhi	r5,16368
    417c:	0004cb40 	call	4cb4 <scalbn>
    4180:	1029883a 	mov	r20,r2
    4184:	182b883a 	mov	r21,r3
    4188:	88018416 	blt	r17,zero,479c <__kernel_rem_pio2+0xd4c>
    418c:	881090fa 	slli	r8,r17,3
    4190:	d8c07804 	addi	r3,sp,480
    4194:	da008e15 	stw	r8,568(sp)
    4198:	d8808e17 	ldw	r2,568(sp)
    419c:	8c51883a 	add	r8,r17,r17
    41a0:	4211883a 	add	r8,r8,r8
    41a4:	d8a1883a 	add	r16,sp,r2
    41a8:	1a25883a 	add	r18,r3,r8
    41ac:	da3ffe04 	addi	r8,sp,-8
    41b0:	da008c15 	stw	r8,560(sp)
    41b4:	8039883a 	mov	fp,r16
    41b8:	91000017 	ldw	r4,0(r18)
    41bc:	e73ffe04 	addi	fp,fp,-8
    41c0:	94bfff04 	addi	r18,r18,-4
    41c4:	0006c400 	call	6c40 <__floatsidf>
    41c8:	a00d883a 	mov	r6,r20
    41cc:	a80f883a 	mov	r7,r21
    41d0:	1009883a 	mov	r4,r2
    41d4:	180b883a 	mov	r5,r3
    41d8:	0005a580 	call	5a58 <__muldf3>
    41dc:	a009883a 	mov	r4,r20
    41e0:	a80b883a 	mov	r5,r21
    41e4:	e0800215 	stw	r2,8(fp)
    41e8:	e0c00315 	stw	r3,12(fp)
    41ec:	000d883a 	mov	r6,zero
    41f0:	01cf9c34 	movhi	r7,15984
    41f4:	0005a580 	call	5a58 <__muldf3>
    41f8:	da008c17 	ldw	r8,560(sp)
    41fc:	1029883a 	mov	r20,r2
    4200:	182b883a 	mov	r21,r3
    4204:	e23fec1e 	bne	fp,r8,41b8 <__alt_exception_stack_pointer+0xf80041b8>
    4208:	0029883a 	mov	r20,zero
    420c:	b0004f16 	blt	r22,zero,434c <__kernel_rem_pio2+0x8fc>
    4210:	05400074 	movhi	r21,1
    4214:	014ffe74 	movhi	r5,16377
    4218:	ad551f04 	addi	r21,r21,21628
    421c:	8027883a 	mov	r19,r16
    4220:	01100034 	movhi	r4,16384
    4224:	29487ec4 	addi	r5,r5,8699
    4228:	0039883a 	mov	fp,zero
    422c:	002f883a 	mov	r23,zero
    4230:	0025883a 	mov	r18,zero
    4234:	00000506 	br	424c <__kernel_rem_pio2+0x7fc>
    4238:	9cc00204 	addi	r19,r19,8
    423c:	a4800f16 	blt	r20,r18,427c <__kernel_rem_pio2+0x82c>
    4240:	a9000017 	ldw	r4,0(r21)
    4244:	a9400117 	ldw	r5,4(r21)
    4248:	ad400204 	addi	r21,r21,8
    424c:	99800017 	ldw	r6,0(r19)
    4250:	99c00117 	ldw	r7,4(r19)
    4254:	94800044 	addi	r18,r18,1
    4258:	0005a580 	call	5a58 <__muldf3>
    425c:	e009883a 	mov	r4,fp
    4260:	b80b883a 	mov	r5,r23
    4264:	100d883a 	mov	r6,r2
    4268:	180f883a 	mov	r7,r3
    426c:	00050480 	call	5048 <__adddf3>
    4270:	1039883a 	mov	fp,r2
    4274:	182f883a 	mov	r23,r3
    4278:	b4bfef0e 	bge	r22,r18,4238 <__alt_exception_stack_pointer+0xf8004238>
    427c:	a00490fa 	slli	r2,r20,3
    4280:	da008c17 	ldw	r8,560(sp)
    4284:	843ffe04 	addi	r16,r16,-8
    4288:	d885883a 	add	r2,sp,r2
    428c:	10802804 	addi	r2,r2,160
    4290:	17000015 	stw	fp,0(r2)
    4294:	15c00115 	stw	r23,4(r2)
    4298:	a5000044 	addi	r20,r20,1
    429c:	823fdb1e 	bne	r16,r8,420c <__alt_exception_stack_pointer+0xf800420c>
    42a0:	da00a617 	ldw	r8,664(sp)
    42a4:	00800084 	movi	r2,2
    42a8:	12006616 	blt	r2,r8,4444 <__kernel_rem_pio2+0x9f4>
    42ac:	0200de16 	blt	zero,r8,4628 <__kernel_rem_pio2+0xbd8>
    42b0:	4000141e 	bne	r8,zero,4304 <__kernel_rem_pio2+0x8b4>
    42b4:	da008e17 	ldw	r8,568(sp)
    42b8:	d8802804 	addi	r2,sp,160
    42bc:	0007883a 	mov	r3,zero
    42c0:	1225883a 	add	r18,r2,r8
    42c4:	043fffc4 	movi	r16,-1
    42c8:	0005883a 	mov	r2,zero
    42cc:	91800017 	ldw	r6,0(r18)
    42d0:	91c00117 	ldw	r7,4(r18)
    42d4:	1009883a 	mov	r4,r2
    42d8:	180b883a 	mov	r5,r3
    42dc:	8c7fffc4 	addi	r17,r17,-1
    42e0:	00050480 	call	5048 <__adddf3>
    42e4:	94bffe04 	addi	r18,r18,-8
    42e8:	8c3ff81e 	bne	r17,r16,42cc <__alt_exception_stack_pointer+0xf80042cc>
    42ec:	da008d17 	ldw	r8,564(sp)
    42f0:	40000126 	beq	r8,zero,42f8 <__kernel_rem_pio2+0x8a8>
    42f4:	18e0003c 	xorhi	r3,r3,32768
    42f8:	da008f17 	ldw	r8,572(sp)
    42fc:	40800015 	stw	r2,0(r8)
    4300:	40c00115 	stw	r3,4(r8)
    4304:	da009117 	ldw	r8,580(sp)
    4308:	408001cc 	andi	r2,r8,7
    430c:	dfc0a517 	ldw	ra,660(sp)
    4310:	df00a417 	ldw	fp,656(sp)
    4314:	ddc0a317 	ldw	r23,652(sp)
    4318:	dd80a217 	ldw	r22,648(sp)
    431c:	dd40a117 	ldw	r21,644(sp)
    4320:	dd00a017 	ldw	r20,640(sp)
    4324:	dcc09f17 	ldw	r19,636(sp)
    4328:	dc809e17 	ldw	r18,632(sp)
    432c:	dc409d17 	ldw	r17,628(sp)
    4330:	dc009c17 	ldw	r16,624(sp)
    4334:	dec0a604 	addi	sp,sp,664
    4338:	f800283a 	ret
    433c:	8c400044 	addi	r17,r17,1
    4340:	04810d0e 	bge	zero,r18,4778 <__kernel_rem_pio2+0xd28>
    4344:	04c00084 	movi	r19,2
    4348:	003eac06 	br	3dfc <__alt_exception_stack_pointer+0xf8003dfc>
    434c:	0039883a 	mov	fp,zero
    4350:	002f883a 	mov	r23,zero
    4354:	003fc906 	br	427c <__alt_exception_stack_pointer+0xf800427c>
    4358:	0029883a 	mov	r20,zero
    435c:	003ebd06 	br	3e54 <__alt_exception_stack_pointer+0xf8003e54>
    4360:	05000044 	movi	r20,1
    4364:	003eef06 	br	3f24 <__alt_exception_stack_pointer+0xf8003f24>
    4368:	4029883a 	mov	r20,r8
    436c:	da009017 	ldw	r8,576(sp)
    4370:	a809883a 	mov	r4,r21
    4374:	a00b883a 	mov	r5,r20
    4378:	020dc83a 	sub	r6,zero,r8
    437c:	dc409115 	stw	r17,580(sp)
    4380:	dd809417 	ldw	r22,592(sp)
    4384:	dcc08d15 	stw	r19,564(sp)
    4388:	0004cb40 	call	4cb4 <scalbn>
    438c:	000d883a 	mov	r6,zero
    4390:	01d05c34 	movhi	r7,16752
    4394:	1009883a 	mov	r4,r2
    4398:	180b883a 	mov	r5,r3
    439c:	102b883a 	mov	r21,r2
    43a0:	1823883a 	mov	r17,r3
    43a4:	000597c0 	call	597c <__gedf2>
    43a8:	1000e916 	blt	r2,zero,4750 <__kernel_rem_pio2+0xd00>
    43ac:	000d883a 	mov	r6,zero
    43b0:	01cf9c34 	movhi	r7,15984
    43b4:	880b883a 	mov	r5,r17
    43b8:	a809883a 	mov	r4,r21
    43bc:	0005a580 	call	5a58 <__muldf3>
    43c0:	180b883a 	mov	r5,r3
    43c4:	1009883a 	mov	r4,r2
    43c8:	0006bc00 	call	6bc0 <__fixdfsi>
    43cc:	1029883a 	mov	r20,r2
    43d0:	9485883a 	add	r2,r18,r18
    43d4:	1085883a 	add	r2,r2,r2
    43d8:	a009883a 	mov	r4,r20
    43dc:	d8a1883a 	add	r16,sp,r2
    43e0:	0006c400 	call	6c40 <__floatsidf>
    43e4:	000d883a 	mov	r6,zero
    43e8:	01d05c34 	movhi	r7,16752
    43ec:	1009883a 	mov	r4,r2
    43f0:	180b883a 	mov	r5,r3
    43f4:	0005a580 	call	5a58 <__muldf3>
    43f8:	880b883a 	mov	r5,r17
    43fc:	100d883a 	mov	r6,r2
    4400:	180f883a 	mov	r7,r3
    4404:	a809883a 	mov	r4,r21
    4408:	00062c40 	call	62c4 <__subdf3>
    440c:	180b883a 	mov	r5,r3
    4410:	1009883a 	mov	r4,r2
    4414:	0006bc00 	call	6bc0 <__fixdfsi>
    4418:	da009017 	ldw	r8,576(sp)
    441c:	94400044 	addi	r17,r18,1
    4420:	8c47883a 	add	r3,r17,r17
    4424:	84007804 	addi	r16,r16,480
    4428:	18c7883a 	add	r3,r3,r3
    442c:	80800015 	stw	r2,0(r16)
    4430:	d8c7883a 	add	r3,sp,r3
    4434:	42000604 	addi	r8,r8,24
    4438:	da009015 	stw	r8,576(sp)
    443c:	1d007815 	stw	r20,480(r3)
    4440:	003f4b06 	br	4170 <__alt_exception_stack_pointer+0xf8004170>
    4444:	da00a617 	ldw	r8,664(sp)
    4448:	008000c4 	movi	r2,3
    444c:	40bfad1e 	bne	r8,r2,4304 <__alt_exception_stack_pointer+0xf8004304>
    4450:	0440bc0e 	bge	zero,r17,4744 <__kernel_rem_pio2+0xcf4>
    4454:	da008e17 	ldw	r8,568(sp)
    4458:	882090fa 	slli	r16,r17,3
    445c:	dd402804 	addi	r21,sp,160
    4460:	da05883a 	add	r2,sp,r8
    4464:	10802804 	addi	r2,r2,160
    4468:	15c00017 	ldw	r23,0(r2)
    446c:	15800117 	ldw	r22,4(r2)
    4470:	8029883a 	mov	r20,r16
    4474:	843ffe04 	addi	r16,r16,-8
    4478:	ac21883a 	add	r16,r21,r16
    447c:	ad29883a 	add	r20,r21,r20
    4480:	dac02604 	addi	r11,sp,152
    4484:	8811883a 	mov	r8,r17
    4488:	84400017 	ldw	r17,0(r16)
    448c:	87000117 	ldw	fp,4(r16)
    4490:	b80d883a 	mov	r6,r23
    4494:	b00f883a 	mov	r7,r22
    4498:	8809883a 	mov	r4,r17
    449c:	e00b883a 	mov	r5,fp
    44a0:	da009b15 	stw	r8,620(sp)
    44a4:	dac09915 	stw	r11,612(sp)
    44a8:	00050480 	call	5048 <__adddf3>
    44ac:	100d883a 	mov	r6,r2
    44b0:	180f883a 	mov	r7,r3
    44b4:	8809883a 	mov	r4,r17
    44b8:	e00b883a 	mov	r5,fp
    44bc:	1027883a 	mov	r19,r2
    44c0:	1825883a 	mov	r18,r3
    44c4:	00062c40 	call	62c4 <__subdf3>
    44c8:	b80d883a 	mov	r6,r23
    44cc:	b00f883a 	mov	r7,r22
    44d0:	1009883a 	mov	r4,r2
    44d4:	180b883a 	mov	r5,r3
    44d8:	00050480 	call	5048 <__adddf3>
    44dc:	dac09917 	ldw	r11,612(sp)
    44e0:	a0800015 	stw	r2,0(r20)
    44e4:	a0c00115 	stw	r3,4(r20)
    44e8:	84c00015 	stw	r19,0(r16)
    44ec:	84800115 	stw	r18,4(r16)
    44f0:	843ffe04 	addi	r16,r16,-8
    44f4:	a53ffe04 	addi	r20,r20,-8
    44f8:	982f883a 	mov	r23,r19
    44fc:	902d883a 	mov	r22,r18
    4500:	da009b17 	ldw	r8,620(sp)
    4504:	5c3fe01e 	bne	r11,r16,4488 <__alt_exception_stack_pointer+0xf8004488>
    4508:	00800044 	movi	r2,1
    450c:	12008d0e 	bge	r2,r8,4744 <__kernel_rem_pio2+0xcf4>
    4510:	402090fa 	slli	r16,r8,3
    4514:	da008e17 	ldw	r8,568(sp)
    4518:	8023883a 	mov	r17,r16
    451c:	da05883a 	add	r2,sp,r8
    4520:	10802804 	addi	r2,r2,160
    4524:	15800017 	ldw	r22,0(r2)
    4528:	15000117 	ldw	r20,4(r2)
    452c:	ac63883a 	add	r17,r21,r17
    4530:	843ffe04 	addi	r16,r16,-8
    4534:	ac21883a 	add	r16,r21,r16
    4538:	8825883a 	mov	r18,r17
    453c:	8811883a 	mov	r8,r17
    4540:	84400017 	ldw	r17,0(r16)
    4544:	87000117 	ldw	fp,4(r16)
    4548:	b009883a 	mov	r4,r22
    454c:	a00b883a 	mov	r5,r20
    4550:	880d883a 	mov	r6,r17
    4554:	e00f883a 	mov	r7,fp
    4558:	da009b15 	stw	r8,620(sp)
    455c:	00050480 	call	5048 <__adddf3>
    4560:	100d883a 	mov	r6,r2
    4564:	180f883a 	mov	r7,r3
    4568:	8809883a 	mov	r4,r17
    456c:	e00b883a 	mov	r5,fp
    4570:	102f883a 	mov	r23,r2
    4574:	1827883a 	mov	r19,r3
    4578:	00062c40 	call	62c4 <__subdf3>
    457c:	b00d883a 	mov	r6,r22
    4580:	a00f883a 	mov	r7,r20
    4584:	1009883a 	mov	r4,r2
    4588:	180b883a 	mov	r5,r3
    458c:	00050480 	call	5048 <__adddf3>
    4590:	90800015 	stw	r2,0(r18)
    4594:	90c00115 	stw	r3,4(r18)
    4598:	85c00015 	stw	r23,0(r16)
    459c:	84c00115 	stw	r19,4(r16)
    45a0:	843ffe04 	addi	r16,r16,-8
    45a4:	94bffe04 	addi	r18,r18,-8
    45a8:	b82d883a 	mov	r22,r23
    45ac:	9829883a 	mov	r20,r19
    45b0:	da009b17 	ldw	r8,620(sp)
    45b4:	ac3fe21e 	bne	r21,r16,4540 <__alt_exception_stack_pointer+0xf8004540>
    45b8:	4023883a 	mov	r17,r8
    45bc:	dc002a04 	addi	r16,sp,168
    45c0:	0005883a 	mov	r2,zero
    45c4:	0007883a 	mov	r3,zero
    45c8:	89800017 	ldw	r6,0(r17)
    45cc:	89c00117 	ldw	r7,4(r17)
    45d0:	1009883a 	mov	r4,r2
    45d4:	8c7ffe04 	addi	r17,r17,-8
    45d8:	180b883a 	mov	r5,r3
    45dc:	00050480 	call	5048 <__adddf3>
    45e0:	847ff91e 	bne	r16,r17,45c8 <__alt_exception_stack_pointer+0xf80045c8>
    45e4:	da008d17 	ldw	r8,564(sp)
    45e8:	40004726 	beq	r8,zero,4708 <__kernel_rem_pio2+0xcb8>
    45ec:	d9002b17 	ldw	r4,172(sp)
    45f0:	d9402917 	ldw	r5,164(sp)
    45f4:	d9802a17 	ldw	r6,168(sp)
    45f8:	da008f17 	ldw	r8,572(sp)
    45fc:	d9c02817 	ldw	r7,160(sp)
    4600:	2960003c 	xorhi	r5,r5,32768
    4604:	2120003c 	xorhi	r4,r4,32768
    4608:	18e0003c 	xorhi	r3,r3,32768
    460c:	41c00015 	stw	r7,0(r8)
    4610:	41400115 	stw	r5,4(r8)
    4614:	41800215 	stw	r6,8(r8)
    4618:	41000315 	stw	r4,12(r8)
    461c:	40800415 	stw	r2,16(r8)
    4620:	40c00515 	stw	r3,20(r8)
    4624:	003f3706 	br	4304 <__alt_exception_stack_pointer+0xf8004304>
    4628:	da008e17 	ldw	r8,568(sp)
    462c:	d8802804 	addi	r2,sp,160
    4630:	dc002604 	addi	r16,sp,152
    4634:	1225883a 	add	r18,r2,r8
    4638:	0007883a 	mov	r3,zero
    463c:	0005883a 	mov	r2,zero
    4640:	91800017 	ldw	r6,0(r18)
    4644:	91c00117 	ldw	r7,4(r18)
    4648:	1009883a 	mov	r4,r2
    464c:	94bffe04 	addi	r18,r18,-8
    4650:	180b883a 	mov	r5,r3
    4654:	00050480 	call	5048 <__adddf3>
    4658:	943ff91e 	bne	r18,r16,4640 <__alt_exception_stack_pointer+0xf8004640>
    465c:	da008d17 	ldw	r8,564(sp)
    4660:	d9002817 	ldw	r4,160(sp)
    4664:	d9402917 	ldw	r5,164(sp)
    4668:	40001a26 	beq	r8,zero,46d4 <__kernel_rem_pio2+0xc84>
    466c:	da008f17 	ldw	r8,572(sp)
    4670:	19a0003c 	xorhi	r6,r3,32768
    4674:	180f883a 	mov	r7,r3
    4678:	41800115 	stw	r6,4(r8)
    467c:	40800015 	stw	r2,0(r8)
    4680:	100d883a 	mov	r6,r2
    4684:	00062c40 	call	62c4 <__subdf3>
    4688:	04400c0e 	bge	zero,r17,46bc <__kernel_rem_pio2+0xc6c>
    468c:	dc002a04 	addi	r16,sp,168
    4690:	04800044 	movi	r18,1
    4694:	81800017 	ldw	r6,0(r16)
    4698:	81c00117 	ldw	r7,4(r16)
    469c:	1009883a 	mov	r4,r2
    46a0:	180b883a 	mov	r5,r3
    46a4:	94800044 	addi	r18,r18,1
    46a8:	00050480 	call	5048 <__adddf3>
    46ac:	84000204 	addi	r16,r16,8
    46b0:	8cbff80e 	bge	r17,r18,4694 <__alt_exception_stack_pointer+0xf8004694>
    46b4:	da008d17 	ldw	r8,564(sp)
    46b8:	40004226 	beq	r8,zero,47c4 <__kernel_rem_pio2+0xd74>
    46bc:	da008f17 	ldw	r8,572(sp)
    46c0:	1009883a 	mov	r4,r2
    46c4:	18a0003c 	xorhi	r2,r3,32768
    46c8:	41000215 	stw	r4,8(r8)
    46cc:	40800315 	stw	r2,12(r8)
    46d0:	003f0c06 	br	4304 <__alt_exception_stack_pointer+0xf8004304>
    46d4:	da008f17 	ldw	r8,572(sp)
    46d8:	100d883a 	mov	r6,r2
    46dc:	180f883a 	mov	r7,r3
    46e0:	40800015 	stw	r2,0(r8)
    46e4:	40c00115 	stw	r3,4(r8)
    46e8:	00062c40 	call	62c4 <__subdf3>
    46ec:	047fe716 	blt	zero,r17,468c <__alt_exception_stack_pointer+0xf800468c>
    46f0:	da008f17 	ldw	r8,572(sp)
    46f4:	1009883a 	mov	r4,r2
    46f8:	1805883a 	mov	r2,r3
    46fc:	41000215 	stw	r4,8(r8)
    4700:	40800315 	stw	r2,12(r8)
    4704:	003eff06 	br	4304 <__alt_exception_stack_pointer+0xf8004304>
    4708:	da008f17 	ldw	r8,572(sp)
    470c:	d9802817 	ldw	r6,160(sp)
    4710:	d9402a17 	ldw	r5,168(sp)
    4714:	d9002b17 	ldw	r4,172(sp)
    4718:	41800015 	stw	r6,0(r8)
    471c:	d9802917 	ldw	r6,164(sp)
    4720:	41400215 	stw	r5,8(r8)
    4724:	41000315 	stw	r4,12(r8)
    4728:	41800115 	stw	r6,4(r8)
    472c:	40800415 	stw	r2,16(r8)
    4730:	40c00515 	stw	r3,20(r8)
    4734:	003ef306 	br	4304 <__alt_exception_stack_pointer+0xf8004304>
    4738:	da00a617 	ldw	r8,664(sp)
    473c:	008000c4 	movi	r2,3
    4740:	40bef01e 	bne	r8,r2,4304 <__alt_exception_stack_pointer+0xf8004304>
    4744:	0005883a 	mov	r2,zero
    4748:	0007883a 	mov	r3,zero
    474c:	003fa506 	br	45e4 <__alt_exception_stack_pointer+0xf80045e4>
    4750:	9485883a 	add	r2,r18,r18
    4754:	1085883a 	add	r2,r2,r2
    4758:	d8a1883a 	add	r16,sp,r2
    475c:	880b883a 	mov	r5,r17
    4760:	a809883a 	mov	r4,r21
    4764:	84007804 	addi	r16,r16,480
    4768:	0006bc00 	call	6bc0 <__fixdfsi>
    476c:	80800015 	stw	r2,0(r16)
    4770:	9023883a 	mov	r17,r18
    4774:	003e7e06 	br	4170 <__alt_exception_stack_pointer+0xf8004170>
    4778:	a80d883a 	mov	r6,r21
    477c:	400f883a 	mov	r7,r8
    4780:	0009883a 	mov	r4,zero
    4784:	014ffc34 	movhi	r5,16368
    4788:	00062c40 	call	62c4 <__subdf3>
    478c:	102b883a 	mov	r21,r2
    4790:	1811883a 	mov	r8,r3
    4794:	04c00084 	movi	r19,2
    4798:	003dc006 	br	3e9c <__alt_exception_stack_pointer+0xf8003e9c>
    479c:	da00a617 	ldw	r8,664(sp)
    47a0:	00800084 	movi	r2,2
    47a4:	123fe416 	blt	r2,r8,4738 <__alt_exception_stack_pointer+0xf8004738>
    47a8:	02000c16 	blt	zero,r8,47dc <__kernel_rem_pio2+0xd8c>
    47ac:	403ed51e 	bne	r8,zero,4304 <__alt_exception_stack_pointer+0xf8004304>
    47b0:	0005883a 	mov	r2,zero
    47b4:	0007883a 	mov	r3,zero
    47b8:	003ecc06 	br	42ec <__alt_exception_stack_pointer+0xf80042ec>
    47bc:	d8009215 	stw	zero,584(sp)
    47c0:	003cc106 	br	3ac8 <__alt_exception_stack_pointer+0xf8003ac8>
    47c4:	da008f17 	ldw	r8,572(sp)
    47c8:	1009883a 	mov	r4,r2
    47cc:	1805883a 	mov	r2,r3
    47d0:	41000215 	stw	r4,8(r8)
    47d4:	40800315 	stw	r2,12(r8)
    47d8:	003eca06 	br	4304 <__alt_exception_stack_pointer+0xf8004304>
    47dc:	0005883a 	mov	r2,zero
    47e0:	0007883a 	mov	r3,zero
    47e4:	003f9d06 	br	465c <__alt_exception_stack_pointer+0xf800465c>

000047e8 <__kernel_sin>:
    47e8:	00a00034 	movhi	r2,32768
    47ec:	defff404 	addi	sp,sp,-48
    47f0:	10bfffc4 	addi	r2,r2,-1
    47f4:	00cf9034 	movhi	r3,15936
    47f8:	ddc00915 	stw	r23,36(sp)
    47fc:	dd800815 	stw	r22,32(sp)
    4800:	dc400315 	stw	r17,12(sp)
    4804:	dc000215 	stw	r16,8(sp)
    4808:	dfc00b15 	stw	ra,44(sp)
    480c:	df000a15 	stw	fp,40(sp)
    4810:	dd400715 	stw	r21,28(sp)
    4814:	dd000615 	stw	r20,24(sp)
    4818:	dcc00515 	stw	r19,20(sp)
    481c:	dc800415 	stw	r18,16(sp)
    4820:	2884703a 	and	r2,r5,r2
    4824:	18ffffc4 	addi	r3,r3,-1
    4828:	2821883a 	mov	r16,r5
    482c:	2023883a 	mov	r17,r4
    4830:	302f883a 	mov	r23,r6
    4834:	382d883a 	mov	r22,r7
    4838:	18800216 	blt	r3,r2,4844 <__kernel_sin+0x5c>
    483c:	0006bc00 	call	6bc0 <__fixdfsi>
    4840:	10009926 	beq	r2,zero,4aa8 <__kernel_sin+0x2c0>
    4844:	880d883a 	mov	r6,r17
    4848:	800f883a 	mov	r7,r16
    484c:	8809883a 	mov	r4,r17
    4850:	800b883a 	mov	r5,r16
    4854:	0005a580 	call	5a58 <__muldf3>
    4858:	100d883a 	mov	r6,r2
    485c:	180f883a 	mov	r7,r3
    4860:	8809883a 	mov	r4,r17
    4864:	800b883a 	mov	r5,r16
    4868:	1027883a 	mov	r19,r2
    486c:	1825883a 	mov	r18,r3
    4870:	0005a580 	call	5a58 <__muldf3>
    4874:	0196b434 	movhi	r6,23248
    4878:	01cf79b4 	movhi	r7,15846
    487c:	31b55f04 	addi	r6,r6,-10884
    4880:	39f64e84 	addi	r7,r7,-9926
    4884:	9809883a 	mov	r4,r19
    4888:	900b883a 	mov	r5,r18
    488c:	102b883a 	mov	r21,r2
    4890:	1829883a 	mov	r20,r3
    4894:	0005a580 	call	5a58 <__muldf3>
    4898:	01a28b34 	movhi	r6,35372
    489c:	01cf96f4 	movhi	r7,15963
    48a0:	31a73ac4 	addi	r6,r6,-25365
    48a4:	39f97984 	addi	r7,r7,-6682
    48a8:	1009883a 	mov	r4,r2
    48ac:	180b883a 	mov	r5,r3
    48b0:	00062c40 	call	62c4 <__subdf3>
    48b4:	980d883a 	mov	r6,r19
    48b8:	900f883a 	mov	r7,r18
    48bc:	1009883a 	mov	r4,r2
    48c0:	180b883a 	mov	r5,r3
    48c4:	0005a580 	call	5a58 <__muldf3>
    48c8:	0195ecb4 	movhi	r6,22450
    48cc:	01cfb1f4 	movhi	r7,16071
    48d0:	31bf9f44 	addi	r6,r6,-387
    48d4:	39c778c4 	addi	r7,r7,7651
    48d8:	1009883a 	mov	r4,r2
    48dc:	180b883a 	mov	r5,r3
    48e0:	00050480 	call	5048 <__adddf3>
    48e4:	980d883a 	mov	r6,r19
    48e8:	900f883a 	mov	r7,r18
    48ec:	1009883a 	mov	r4,r2
    48f0:	180b883a 	mov	r5,r3
    48f4:	0005a580 	call	5a58 <__muldf3>
    48f8:	01867074 	movhi	r6,6593
    48fc:	01cfcab4 	movhi	r7,16170
    4900:	31987544 	addi	r6,r6,25045
    4904:	39c06804 	addi	r7,r7,416
    4908:	1009883a 	mov	r4,r2
    490c:	180b883a 	mov	r5,r3
    4910:	00062c40 	call	62c4 <__subdf3>
    4914:	980d883a 	mov	r6,r19
    4918:	900f883a 	mov	r7,r18
    491c:	1009883a 	mov	r4,r2
    4920:	180b883a 	mov	r5,r3
    4924:	0005a580 	call	5a58 <__muldf3>
    4928:	01844474 	movhi	r6,4369
    492c:	01cfe074 	movhi	r7,16257
    4930:	31be2984 	addi	r6,r6,-1882
    4934:	39c44444 	addi	r7,r7,4369
    4938:	1009883a 	mov	r4,r2
    493c:	180b883a 	mov	r5,r3
    4940:	00050480 	call	5048 <__adddf3>
    4944:	1011883a 	mov	r8,r2
    4948:	d8800c17 	ldw	r2,48(sp)
    494c:	1839883a 	mov	fp,r3
    4950:	10003e26 	beq	r2,zero,4a4c <__kernel_sin+0x264>
    4954:	000d883a 	mov	r6,zero
    4958:	01cff834 	movhi	r7,16352
    495c:	b809883a 	mov	r4,r23
    4960:	b00b883a 	mov	r5,r22
    4964:	da000015 	stw	r8,0(sp)
    4968:	0005a580 	call	5a58 <__muldf3>
    496c:	da000017 	ldw	r8,0(sp)
    4970:	e00f883a 	mov	r7,fp
    4974:	a809883a 	mov	r4,r21
    4978:	400d883a 	mov	r6,r8
    497c:	a00b883a 	mov	r5,r20
    4980:	d8c00115 	stw	r3,4(sp)
    4984:	d8800015 	stw	r2,0(sp)
    4988:	0005a580 	call	5a58 <__muldf3>
    498c:	da800017 	ldw	r10,0(sp)
    4990:	da400117 	ldw	r9,4(sp)
    4994:	100d883a 	mov	r6,r2
    4998:	5009883a 	mov	r4,r10
    499c:	480b883a 	mov	r5,r9
    49a0:	180f883a 	mov	r7,r3
    49a4:	00062c40 	call	62c4 <__subdf3>
    49a8:	980d883a 	mov	r6,r19
    49ac:	900f883a 	mov	r7,r18
    49b0:	1009883a 	mov	r4,r2
    49b4:	180b883a 	mov	r5,r3
    49b8:	0005a580 	call	5a58 <__muldf3>
    49bc:	b80d883a 	mov	r6,r23
    49c0:	b00f883a 	mov	r7,r22
    49c4:	1009883a 	mov	r4,r2
    49c8:	180b883a 	mov	r5,r3
    49cc:	00062c40 	call	62c4 <__subdf3>
    49d0:	01955574 	movhi	r6,21845
    49d4:	01cff174 	movhi	r7,16325
    49d8:	31955244 	addi	r6,r6,21833
    49dc:	39d55544 	addi	r7,r7,21845
    49e0:	a809883a 	mov	r4,r21
    49e4:	a00b883a 	mov	r5,r20
    49e8:	1027883a 	mov	r19,r2
    49ec:	1825883a 	mov	r18,r3
    49f0:	0005a580 	call	5a58 <__muldf3>
    49f4:	100d883a 	mov	r6,r2
    49f8:	180f883a 	mov	r7,r3
    49fc:	9809883a 	mov	r4,r19
    4a00:	900b883a 	mov	r5,r18
    4a04:	00050480 	call	5048 <__adddf3>
    4a08:	100d883a 	mov	r6,r2
    4a0c:	180f883a 	mov	r7,r3
    4a10:	8809883a 	mov	r4,r17
    4a14:	800b883a 	mov	r5,r16
    4a18:	00062c40 	call	62c4 <__subdf3>
    4a1c:	dfc00b17 	ldw	ra,44(sp)
    4a20:	df000a17 	ldw	fp,40(sp)
    4a24:	ddc00917 	ldw	r23,36(sp)
    4a28:	dd800817 	ldw	r22,32(sp)
    4a2c:	dd400717 	ldw	r21,28(sp)
    4a30:	dd000617 	ldw	r20,24(sp)
    4a34:	dcc00517 	ldw	r19,20(sp)
    4a38:	dc800417 	ldw	r18,16(sp)
    4a3c:	dc400317 	ldw	r17,12(sp)
    4a40:	dc000217 	ldw	r16,8(sp)
    4a44:	dec00c04 	addi	sp,sp,48
    4a48:	f800283a 	ret
    4a4c:	400d883a 	mov	r6,r8
    4a50:	9809883a 	mov	r4,r19
    4a54:	900b883a 	mov	r5,r18
    4a58:	180f883a 	mov	r7,r3
    4a5c:	0005a580 	call	5a58 <__muldf3>
    4a60:	01955574 	movhi	r6,21845
    4a64:	01cff174 	movhi	r7,16325
    4a68:	31955244 	addi	r6,r6,21833
    4a6c:	39d55544 	addi	r7,r7,21845
    4a70:	1009883a 	mov	r4,r2
    4a74:	180b883a 	mov	r5,r3
    4a78:	00062c40 	call	62c4 <__subdf3>
    4a7c:	a80d883a 	mov	r6,r21
    4a80:	a00f883a 	mov	r7,r20
    4a84:	1009883a 	mov	r4,r2
    4a88:	180b883a 	mov	r5,r3
    4a8c:	0005a580 	call	5a58 <__muldf3>
    4a90:	880d883a 	mov	r6,r17
    4a94:	800f883a 	mov	r7,r16
    4a98:	1009883a 	mov	r4,r2
    4a9c:	180b883a 	mov	r5,r3
    4aa0:	00050480 	call	5048 <__adddf3>
    4aa4:	003fdd06 	br	4a1c <__alt_exception_stack_pointer+0xf8004a1c>
    4aa8:	8805883a 	mov	r2,r17
    4aac:	8007883a 	mov	r3,r16
    4ab0:	003fda06 	br	4a1c <__alt_exception_stack_pointer+0xf8004a1c>

00004ab4 <fabs>:
    4ab4:	00e00034 	movhi	r3,32768
    4ab8:	18ffffc4 	addi	r3,r3,-1
    4abc:	2005883a 	mov	r2,r4
    4ac0:	28c6703a 	and	r3,r5,r3
    4ac4:	f800283a 	ret

00004ac8 <floor>:
    4ac8:	2811d53a 	srai	r8,r5,20
    4acc:	defffa04 	addi	sp,sp,-24
    4ad0:	dcc00315 	stw	r19,12(sp)
    4ad4:	4201ffcc 	andi	r8,r8,2047
    4ad8:	dc800215 	stw	r18,8(sp)
    4adc:	dc400115 	stw	r17,4(sp)
    4ae0:	dc000015 	stw	r16,0(sp)
    4ae4:	dfc00515 	stw	ra,20(sp)
    4ae8:	dd000415 	stw	r20,16(sp)
    4aec:	44bf0044 	addi	r18,r8,-1023
    4af0:	018004c4 	movi	r6,19
    4af4:	2821883a 	mov	r16,r5
    4af8:	2005883a 	mov	r2,r4
    4afc:	280f883a 	mov	r7,r5
    4b00:	2827883a 	mov	r19,r5
    4b04:	2023883a 	mov	r17,r4
    4b08:	34801916 	blt	r6,r18,4b70 <floor+0xa8>
    4b0c:	90003c16 	blt	r18,zero,4c00 <floor+0x138>
    4b10:	05000434 	movhi	r20,16
    4b14:	a53fffc4 	addi	r20,r20,-1
    4b18:	a4a9d83a 	sra	r20,r20,r18
    4b1c:	2d0c703a 	and	r6,r5,r20
    4b20:	310cb03a 	or	r6,r6,r4
    4b24:	30001626 	beq	r6,zero,4b80 <floor+0xb8>
    4b28:	01a20034 	movhi	r6,34816
    4b2c:	01df8e34 	movhi	r7,32312
    4b30:	319d6704 	addi	r6,r6,30108
    4b34:	39f90f04 	addi	r7,r7,-7108
    4b38:	00050480 	call	5048 <__adddf3>
    4b3c:	000d883a 	mov	r6,zero
    4b40:	000f883a 	mov	r7,zero
    4b44:	1009883a 	mov	r4,r2
    4b48:	180b883a 	mov	r5,r3
    4b4c:	000597c0 	call	597c <__gedf2>
    4b50:	0080040e 	bge	zero,r2,4b64 <floor+0x9c>
    4b54:	80003c16 	blt	r16,zero,4c48 <floor+0x180>
    4b58:	0520303a 	nor	r16,zero,r20
    4b5c:	84e0703a 	and	r16,r16,r19
    4b60:	0023883a 	mov	r17,zero
    4b64:	8805883a 	mov	r2,r17
    4b68:	8007883a 	mov	r3,r16
    4b6c:	00000506 	br	4b84 <floor+0xbc>
    4b70:	01800cc4 	movi	r6,51
    4b74:	34800b0e 	bge	r6,r18,4ba4 <floor+0xdc>
    4b78:	01810004 	movi	r6,1024
    4b7c:	91802f26 	beq	r18,r6,4c3c <floor+0x174>
    4b80:	3807883a 	mov	r3,r7
    4b84:	dfc00517 	ldw	ra,20(sp)
    4b88:	dd000417 	ldw	r20,16(sp)
    4b8c:	dcc00317 	ldw	r19,12(sp)
    4b90:	dc800217 	ldw	r18,8(sp)
    4b94:	dc400117 	ldw	r17,4(sp)
    4b98:	dc000017 	ldw	r16,0(sp)
    4b9c:	dec00604 	addi	sp,sp,24
    4ba0:	f800283a 	ret
    4ba4:	423efb44 	addi	r8,r8,-1043
    4ba8:	053fffc4 	movi	r20,-1
    4bac:	a228d83a 	srl	r20,r20,r8
    4bb0:	250c703a 	and	r6,r4,r20
    4bb4:	303ff226 	beq	r6,zero,4b80 <__alt_exception_stack_pointer+0xf8004b80>
    4bb8:	01a20034 	movhi	r6,34816
    4bbc:	01df8e34 	movhi	r7,32312
    4bc0:	319d6704 	addi	r6,r6,30108
    4bc4:	39f90f04 	addi	r7,r7,-7108
    4bc8:	00050480 	call	5048 <__adddf3>
    4bcc:	000d883a 	mov	r6,zero
    4bd0:	000f883a 	mov	r7,zero
    4bd4:	1009883a 	mov	r4,r2
    4bd8:	180b883a 	mov	r5,r3
    4bdc:	000597c0 	call	597c <__gedf2>
    4be0:	00bfe00e 	bge	zero,r2,4b64 <__alt_exception_stack_pointer+0xf8004b64>
    4be4:	80001c16 	blt	r16,zero,4c58 <floor+0x190>
    4be8:	0510303a 	nor	r8,zero,r20
    4bec:	9821883a 	mov	r16,r19
    4bf0:	8a22703a 	and	r17,r17,r8
    4bf4:	8805883a 	mov	r2,r17
    4bf8:	8007883a 	mov	r3,r16
    4bfc:	003fe106 	br	4b84 <__alt_exception_stack_pointer+0xf8004b84>
    4c00:	01a20034 	movhi	r6,34816
    4c04:	01df8e34 	movhi	r7,32312
    4c08:	319d6704 	addi	r6,r6,30108
    4c0c:	39f90f04 	addi	r7,r7,-7108
    4c10:	00050480 	call	5048 <__adddf3>
    4c14:	000d883a 	mov	r6,zero
    4c18:	000f883a 	mov	r7,zero
    4c1c:	1009883a 	mov	r4,r2
    4c20:	180b883a 	mov	r5,r3
    4c24:	000597c0 	call	597c <__gedf2>
    4c28:	00bfce0e 	bge	zero,r2,4b64 <__alt_exception_stack_pointer+0xf8004b64>
    4c2c:	80001516 	blt	r16,zero,4c84 <floor+0x1bc>
    4c30:	0023883a 	mov	r17,zero
    4c34:	0021883a 	mov	r16,zero
    4c38:	003fca06 	br	4b64 <__alt_exception_stack_pointer+0xf8004b64>
    4c3c:	200d883a 	mov	r6,r4
    4c40:	00050480 	call	5048 <__adddf3>
    4c44:	003fcf06 	br	4b84 <__alt_exception_stack_pointer+0xf8004b84>
    4c48:	00800434 	movhi	r2,16
    4c4c:	14a5d83a 	sra	r18,r2,r18
    4c50:	84a7883a 	add	r19,r16,r18
    4c54:	003fc006 	br	4b58 <__alt_exception_stack_pointer+0xf8004b58>
    4c58:	00800504 	movi	r2,20
    4c5c:	90801326 	beq	r18,r2,4cac <floor+0x1e4>
    4c60:	00800d04 	movi	r2,52
    4c64:	14a5c83a 	sub	r18,r2,r18
    4c68:	00800044 	movi	r2,1
    4c6c:	1484983a 	sll	r2,r2,r18
    4c70:	1445883a 	add	r2,r2,r17
    4c74:	14400b2e 	bgeu	r2,r17,4ca4 <floor+0x1dc>
    4c78:	84c00044 	addi	r19,r16,1
    4c7c:	1023883a 	mov	r17,r2
    4c80:	003fd906 	br	4be8 <__alt_exception_stack_pointer+0xf8004be8>
    4c84:	00a00034 	movhi	r2,32768
    4c88:	10bfffc4 	addi	r2,r2,-1
    4c8c:	8084703a 	and	r2,r16,r2
    4c90:	1462b03a 	or	r17,r2,r17
    4c94:	883fb326 	beq	r17,zero,4b64 <__alt_exception_stack_pointer+0xf8004b64>
    4c98:	0023883a 	mov	r17,zero
    4c9c:	042ffc34 	movhi	r16,49136
    4ca0:	003fb006 	br	4b64 <__alt_exception_stack_pointer+0xf8004b64>
    4ca4:	1023883a 	mov	r17,r2
    4ca8:	003fcf06 	br	4be8 <__alt_exception_stack_pointer+0xf8004be8>
    4cac:	84c00044 	addi	r19,r16,1
    4cb0:	003fcd06 	br	4be8 <__alt_exception_stack_pointer+0xf8004be8>

00004cb4 <scalbn>:
    4cb4:	2a1ffc2c 	andhi	r8,r5,32752
    4cb8:	4011d53a 	srai	r8,r8,20
    4cbc:	defffe04 	addi	sp,sp,-8
    4cc0:	dc000015 	stw	r16,0(sp)
    4cc4:	dfc00115 	stw	ra,4(sp)
    4cc8:	280f883a 	mov	r7,r5
    4ccc:	2015883a 	mov	r10,r4
    4cd0:	3021883a 	mov	r16,r6
    4cd4:	40001e1e 	bne	r8,zero,4d50 <scalbn+0x9c>
    4cd8:	00a00034 	movhi	r2,32768
    4cdc:	10bfffc4 	addi	r2,r2,-1
    4ce0:	2884703a 	and	r2,r5,r2
    4ce4:	1104b03a 	or	r2,r2,r4
    4ce8:	10002226 	beq	r2,zero,4d74 <scalbn+0xc0>
    4cec:	01d0d434 	movhi	r7,17232
    4cf0:	000d883a 	mov	r6,zero
    4cf4:	0005a580 	call	5a58 <__muldf3>
    4cf8:	013ffff4 	movhi	r4,65535
    4cfc:	210f2c04 	addi	r4,r4,15536
    4d00:	1015883a 	mov	r10,r2
    4d04:	180f883a 	mov	r7,r3
    4d08:	81002a16 	blt	r16,r4,4db4 <scalbn+0x100>
    4d0c:	191ffc2c 	andhi	r4,r3,32752
    4d10:	2009d53a 	srai	r4,r4,20
    4d14:	223ff284 	addi	r8,r4,-54
    4d18:	8211883a 	add	r8,r16,r8
    4d1c:	0081ff84 	movi	r2,2046
    4d20:	12002f16 	blt	r2,r8,4de0 <scalbn+0x12c>
    4d24:	0200190e 	bge	zero,r8,4d8c <scalbn+0xd8>
    4d28:	4010953a 	slli	r8,r8,20
    4d2c:	01600434 	movhi	r5,32784
    4d30:	297fffc4 	addi	r5,r5,-1
    4d34:	194e703a 	and	r7,r3,r5
    4d38:	5005883a 	mov	r2,r10
    4d3c:	3a06b03a 	or	r3,r7,r8
    4d40:	dfc00117 	ldw	ra,4(sp)
    4d44:	dc000017 	ldw	r16,0(sp)
    4d48:	dec00204 	addi	sp,sp,8
    4d4c:	f800283a 	ret
    4d50:	0081ffc4 	movi	r2,2047
    4d54:	2807883a 	mov	r3,r5
    4d58:	40bfef1e 	bne	r8,r2,4d18 <__alt_exception_stack_pointer+0xf8004d18>
    4d5c:	200d883a 	mov	r6,r4
    4d60:	00050480 	call	5048 <__adddf3>
    4d64:	dfc00117 	ldw	ra,4(sp)
    4d68:	dc000017 	ldw	r16,0(sp)
    4d6c:	dec00204 	addi	sp,sp,8
    4d70:	f800283a 	ret
    4d74:	2005883a 	mov	r2,r4
    4d78:	2807883a 	mov	r3,r5
    4d7c:	dfc00117 	ldw	ra,4(sp)
    4d80:	dc000017 	ldw	r16,0(sp)
    4d84:	dec00204 	addi	sp,sp,8
    4d88:	f800283a 	ret
    4d8c:	00bff2c4 	movi	r2,-53
    4d90:	4080240e 	bge	r8,r2,4e24 <scalbn+0x170>
    4d94:	00b0d414 	movui	r2,50000
    4d98:	14001116 	blt	r2,r16,4de0 <scalbn+0x12c>
    4d9c:	0130be74 	movhi	r4,49913
    4da0:	01406974 	movhi	r5,421
    4da4:	213cd644 	addi	r4,r4,-3239
    4da8:	295b87c4 	addi	r5,r5,28191
    4dac:	500d883a 	mov	r6,r10
    4db0:	0004e500 	call	4e50 <copysign>
    4db4:	01b0be74 	movhi	r6,49913
    4db8:	01c06974 	movhi	r7,421
    4dbc:	31bcd644 	addi	r6,r6,-3239
    4dc0:	39db87c4 	addi	r7,r7,28191
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	180b883a 	mov	r5,r3
    4dcc:	0005a580 	call	5a58 <__muldf3>
    4dd0:	dfc00117 	ldw	ra,4(sp)
    4dd4:	dc000017 	ldw	r16,0(sp)
    4dd8:	dec00204 	addi	sp,sp,8
    4ddc:	f800283a 	ret
    4de0:	01220034 	movhi	r4,34816
    4de4:	015f8e34 	movhi	r5,32312
    4de8:	500d883a 	mov	r6,r10
    4dec:	211d6704 	addi	r4,r4,30108
    4df0:	29790f04 	addi	r5,r5,-7108
    4df4:	0004e500 	call	4e50 <copysign>
    4df8:	01a20034 	movhi	r6,34816
    4dfc:	01df8e34 	movhi	r7,32312
    4e00:	319d6704 	addi	r6,r6,30108
    4e04:	39f90f04 	addi	r7,r7,-7108
    4e08:	1009883a 	mov	r4,r2
    4e0c:	180b883a 	mov	r5,r3
    4e10:	0005a580 	call	5a58 <__muldf3>
    4e14:	dfc00117 	ldw	ra,4(sp)
    4e18:	dc000017 	ldw	r16,0(sp)
    4e1c:	dec00204 	addi	sp,sp,8
    4e20:	f800283a 	ret
    4e24:	42000d84 	addi	r8,r8,54
    4e28:	4012953a 	slli	r9,r8,20
    4e2c:	01e00434 	movhi	r7,32784
    4e30:	39ffffc4 	addi	r7,r7,-1
    4e34:	19ca703a 	and	r5,r3,r7
    4e38:	000d883a 	mov	r6,zero
    4e3c:	01cf2434 	movhi	r7,15504
    4e40:	5009883a 	mov	r4,r10
    4e44:	494ab03a 	or	r5,r9,r5
    4e48:	0005a580 	call	5a58 <__muldf3>
    4e4c:	003fbc06 	br	4d40 <__alt_exception_stack_pointer+0xf8004d40>

00004e50 <copysign>:
    4e50:	2005883a 	mov	r2,r4
    4e54:	01200034 	movhi	r4,32768
    4e58:	213fffc4 	addi	r4,r4,-1
    4e5c:	38e0002c 	andhi	r3,r7,32768
    4e60:	290a703a 	and	r5,r5,r4
    4e64:	28c6b03a 	or	r3,r5,r3
    4e68:	f800283a 	ret

00004e6c <__divsi3>:
    4e6c:	20001b16 	blt	r4,zero,4edc <__divsi3+0x70>
    4e70:	000f883a 	mov	r7,zero
    4e74:	28001616 	blt	r5,zero,4ed0 <__divsi3+0x64>
    4e78:	200d883a 	mov	r6,r4
    4e7c:	29001a2e 	bgeu	r5,r4,4ee8 <__divsi3+0x7c>
    4e80:	00800804 	movi	r2,32
    4e84:	00c00044 	movi	r3,1
    4e88:	00000106 	br	4e90 <__divsi3+0x24>
    4e8c:	10000d26 	beq	r2,zero,4ec4 <__divsi3+0x58>
    4e90:	294b883a 	add	r5,r5,r5
    4e94:	10bfffc4 	addi	r2,r2,-1
    4e98:	18c7883a 	add	r3,r3,r3
    4e9c:	293ffb36 	bltu	r5,r4,4e8c <__alt_exception_stack_pointer+0xf8004e8c>
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	18000726 	beq	r3,zero,4ec4 <__divsi3+0x58>
    4ea8:	0005883a 	mov	r2,zero
    4eac:	31400236 	bltu	r6,r5,4eb8 <__divsi3+0x4c>
    4eb0:	314dc83a 	sub	r6,r6,r5
    4eb4:	10c4b03a 	or	r2,r2,r3
    4eb8:	1806d07a 	srli	r3,r3,1
    4ebc:	280ad07a 	srli	r5,r5,1
    4ec0:	183ffa1e 	bne	r3,zero,4eac <__alt_exception_stack_pointer+0xf8004eac>
    4ec4:	38000126 	beq	r7,zero,4ecc <__divsi3+0x60>
    4ec8:	0085c83a 	sub	r2,zero,r2
    4ecc:	f800283a 	ret
    4ed0:	014bc83a 	sub	r5,zero,r5
    4ed4:	39c0005c 	xori	r7,r7,1
    4ed8:	003fe706 	br	4e78 <__alt_exception_stack_pointer+0xf8004e78>
    4edc:	0109c83a 	sub	r4,zero,r4
    4ee0:	01c00044 	movi	r7,1
    4ee4:	003fe306 	br	4e74 <__alt_exception_stack_pointer+0xf8004e74>
    4ee8:	00c00044 	movi	r3,1
    4eec:	003fee06 	br	4ea8 <__alt_exception_stack_pointer+0xf8004ea8>

00004ef0 <__modsi3>:
    4ef0:	20001716 	blt	r4,zero,4f50 <__modsi3+0x60>
    4ef4:	000f883a 	mov	r7,zero
    4ef8:	2005883a 	mov	r2,r4
    4efc:	28001216 	blt	r5,zero,4f48 <__modsi3+0x58>
    4f00:	2900162e 	bgeu	r5,r4,4f5c <__modsi3+0x6c>
    4f04:	01800804 	movi	r6,32
    4f08:	00c00044 	movi	r3,1
    4f0c:	00000106 	br	4f14 <__modsi3+0x24>
    4f10:	30000a26 	beq	r6,zero,4f3c <__modsi3+0x4c>
    4f14:	294b883a 	add	r5,r5,r5
    4f18:	31bfffc4 	addi	r6,r6,-1
    4f1c:	18c7883a 	add	r3,r3,r3
    4f20:	293ffb36 	bltu	r5,r4,4f10 <__alt_exception_stack_pointer+0xf8004f10>
    4f24:	18000526 	beq	r3,zero,4f3c <__modsi3+0x4c>
    4f28:	1806d07a 	srli	r3,r3,1
    4f2c:	11400136 	bltu	r2,r5,4f34 <__modsi3+0x44>
    4f30:	1145c83a 	sub	r2,r2,r5
    4f34:	280ad07a 	srli	r5,r5,1
    4f38:	183ffb1e 	bne	r3,zero,4f28 <__alt_exception_stack_pointer+0xf8004f28>
    4f3c:	38000126 	beq	r7,zero,4f44 <__modsi3+0x54>
    4f40:	0085c83a 	sub	r2,zero,r2
    4f44:	f800283a 	ret
    4f48:	014bc83a 	sub	r5,zero,r5
    4f4c:	003fec06 	br	4f00 <__alt_exception_stack_pointer+0xf8004f00>
    4f50:	0109c83a 	sub	r4,zero,r4
    4f54:	01c00044 	movi	r7,1
    4f58:	003fe706 	br	4ef8 <__alt_exception_stack_pointer+0xf8004ef8>
    4f5c:	00c00044 	movi	r3,1
    4f60:	003ff106 	br	4f28 <__alt_exception_stack_pointer+0xf8004f28>

00004f64 <__udivsi3>:
    4f64:	200d883a 	mov	r6,r4
    4f68:	2900152e 	bgeu	r5,r4,4fc0 <__udivsi3+0x5c>
    4f6c:	28001416 	blt	r5,zero,4fc0 <__udivsi3+0x5c>
    4f70:	00800804 	movi	r2,32
    4f74:	00c00044 	movi	r3,1
    4f78:	00000206 	br	4f84 <__udivsi3+0x20>
    4f7c:	10000e26 	beq	r2,zero,4fb8 <__udivsi3+0x54>
    4f80:	28000516 	blt	r5,zero,4f98 <__udivsi3+0x34>
    4f84:	294b883a 	add	r5,r5,r5
    4f88:	10bfffc4 	addi	r2,r2,-1
    4f8c:	18c7883a 	add	r3,r3,r3
    4f90:	293ffa36 	bltu	r5,r4,4f7c <__alt_exception_stack_pointer+0xf8004f7c>
    4f94:	18000826 	beq	r3,zero,4fb8 <__udivsi3+0x54>
    4f98:	0005883a 	mov	r2,zero
    4f9c:	31400236 	bltu	r6,r5,4fa8 <__udivsi3+0x44>
    4fa0:	314dc83a 	sub	r6,r6,r5
    4fa4:	10c4b03a 	or	r2,r2,r3
    4fa8:	1806d07a 	srli	r3,r3,1
    4fac:	280ad07a 	srli	r5,r5,1
    4fb0:	183ffa1e 	bne	r3,zero,4f9c <__alt_exception_stack_pointer+0xf8004f9c>
    4fb4:	f800283a 	ret
    4fb8:	0005883a 	mov	r2,zero
    4fbc:	f800283a 	ret
    4fc0:	00c00044 	movi	r3,1
    4fc4:	003ff406 	br	4f98 <__alt_exception_stack_pointer+0xf8004f98>

00004fc8 <__umodsi3>:
    4fc8:	2005883a 	mov	r2,r4
    4fcc:	2900122e 	bgeu	r5,r4,5018 <__umodsi3+0x50>
    4fd0:	28001116 	blt	r5,zero,5018 <__umodsi3+0x50>
    4fd4:	01800804 	movi	r6,32
    4fd8:	00c00044 	movi	r3,1
    4fdc:	00000206 	br	4fe8 <__umodsi3+0x20>
    4fe0:	30000c26 	beq	r6,zero,5014 <__umodsi3+0x4c>
    4fe4:	28000516 	blt	r5,zero,4ffc <__umodsi3+0x34>
    4fe8:	294b883a 	add	r5,r5,r5
    4fec:	31bfffc4 	addi	r6,r6,-1
    4ff0:	18c7883a 	add	r3,r3,r3
    4ff4:	293ffa36 	bltu	r5,r4,4fe0 <__alt_exception_stack_pointer+0xf8004fe0>
    4ff8:	18000626 	beq	r3,zero,5014 <__umodsi3+0x4c>
    4ffc:	1806d07a 	srli	r3,r3,1
    5000:	11400136 	bltu	r2,r5,5008 <__umodsi3+0x40>
    5004:	1145c83a 	sub	r2,r2,r5
    5008:	280ad07a 	srli	r5,r5,1
    500c:	183ffb1e 	bne	r3,zero,4ffc <__alt_exception_stack_pointer+0xf8004ffc>
    5010:	f800283a 	ret
    5014:	f800283a 	ret
    5018:	00c00044 	movi	r3,1
    501c:	003ff706 	br	4ffc <__alt_exception_stack_pointer+0xf8004ffc>

00005020 <__mulsi3>:
    5020:	0005883a 	mov	r2,zero
    5024:	20000726 	beq	r4,zero,5044 <__mulsi3+0x24>
    5028:	20c0004c 	andi	r3,r4,1
    502c:	2008d07a 	srli	r4,r4,1
    5030:	18000126 	beq	r3,zero,5038 <__mulsi3+0x18>
    5034:	1145883a 	add	r2,r2,r5
    5038:	294b883a 	add	r5,r5,r5
    503c:	203ffa1e 	bne	r4,zero,5028 <__alt_exception_stack_pointer+0xf8005028>
    5040:	f800283a 	ret
    5044:	f800283a 	ret

00005048 <__adddf3>:
    5048:	02c00434 	movhi	r11,16
    504c:	5affffc4 	addi	r11,r11,-1
    5050:	2806d7fa 	srli	r3,r5,31
    5054:	2ad4703a 	and	r10,r5,r11
    5058:	3ad2703a 	and	r9,r7,r11
    505c:	3804d53a 	srli	r2,r7,20
    5060:	3018d77a 	srli	r12,r6,29
    5064:	280ad53a 	srli	r5,r5,20
    5068:	501490fa 	slli	r10,r10,3
    506c:	2010d77a 	srli	r8,r4,29
    5070:	481290fa 	slli	r9,r9,3
    5074:	380ed7fa 	srli	r7,r7,31
    5078:	defffb04 	addi	sp,sp,-20
    507c:	dc800215 	stw	r18,8(sp)
    5080:	dc400115 	stw	r17,4(sp)
    5084:	dc000015 	stw	r16,0(sp)
    5088:	dfc00415 	stw	ra,16(sp)
    508c:	dcc00315 	stw	r19,12(sp)
    5090:	1c803fcc 	andi	r18,r3,255
    5094:	2c01ffcc 	andi	r16,r5,2047
    5098:	5210b03a 	or	r8,r10,r8
    509c:	202290fa 	slli	r17,r4,3
    50a0:	1081ffcc 	andi	r2,r2,2047
    50a4:	4b12b03a 	or	r9,r9,r12
    50a8:	300c90fa 	slli	r6,r6,3
    50ac:	91c07526 	beq	r18,r7,5284 <__adddf3+0x23c>
    50b0:	8087c83a 	sub	r3,r16,r2
    50b4:	00c0ab0e 	bge	zero,r3,5364 <__adddf3+0x31c>
    50b8:	10002a1e 	bne	r2,zero,5164 <__adddf3+0x11c>
    50bc:	4984b03a 	or	r2,r9,r6
    50c0:	1000961e 	bne	r2,zero,531c <__adddf3+0x2d4>
    50c4:	888001cc 	andi	r2,r17,7
    50c8:	10000726 	beq	r2,zero,50e8 <__adddf3+0xa0>
    50cc:	888003cc 	andi	r2,r17,15
    50d0:	00c00104 	movi	r3,4
    50d4:	10c00426 	beq	r2,r3,50e8 <__adddf3+0xa0>
    50d8:	88c7883a 	add	r3,r17,r3
    50dc:	1c63803a 	cmpltu	r17,r3,r17
    50e0:	4451883a 	add	r8,r8,r17
    50e4:	1823883a 	mov	r17,r3
    50e8:	4080202c 	andhi	r2,r8,128
    50ec:	10005926 	beq	r2,zero,5254 <__adddf3+0x20c>
    50f0:	84000044 	addi	r16,r16,1
    50f4:	0081ffc4 	movi	r2,2047
    50f8:	8080ba26 	beq	r16,r2,53e4 <__adddf3+0x39c>
    50fc:	00bfe034 	movhi	r2,65408
    5100:	10bfffc4 	addi	r2,r2,-1
    5104:	4090703a 	and	r8,r8,r2
    5108:	4004977a 	slli	r2,r8,29
    510c:	4010927a 	slli	r8,r8,9
    5110:	8822d0fa 	srli	r17,r17,3
    5114:	8401ffcc 	andi	r16,r16,2047
    5118:	4010d33a 	srli	r8,r8,12
    511c:	9007883a 	mov	r3,r18
    5120:	1444b03a 	or	r2,r2,r17
    5124:	8401ffcc 	andi	r16,r16,2047
    5128:	8020953a 	slli	r16,r16,20
    512c:	18c03fcc 	andi	r3,r3,255
    5130:	01000434 	movhi	r4,16
    5134:	213fffc4 	addi	r4,r4,-1
    5138:	180697fa 	slli	r3,r3,31
    513c:	4110703a 	and	r8,r8,r4
    5140:	4410b03a 	or	r8,r8,r16
    5144:	40c6b03a 	or	r3,r8,r3
    5148:	dfc00417 	ldw	ra,16(sp)
    514c:	dcc00317 	ldw	r19,12(sp)
    5150:	dc800217 	ldw	r18,8(sp)
    5154:	dc400117 	ldw	r17,4(sp)
    5158:	dc000017 	ldw	r16,0(sp)
    515c:	dec00504 	addi	sp,sp,20
    5160:	f800283a 	ret
    5164:	0081ffc4 	movi	r2,2047
    5168:	80bfd626 	beq	r16,r2,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    516c:	4a402034 	orhi	r9,r9,128
    5170:	00800e04 	movi	r2,56
    5174:	10c09f16 	blt	r2,r3,53f4 <__adddf3+0x3ac>
    5178:	008007c4 	movi	r2,31
    517c:	10c0c216 	blt	r2,r3,5488 <__adddf3+0x440>
    5180:	00800804 	movi	r2,32
    5184:	10c5c83a 	sub	r2,r2,r3
    5188:	488a983a 	sll	r5,r9,r2
    518c:	30c8d83a 	srl	r4,r6,r3
    5190:	3084983a 	sll	r2,r6,r2
    5194:	48c6d83a 	srl	r3,r9,r3
    5198:	290cb03a 	or	r6,r5,r4
    519c:	1004c03a 	cmpne	r2,r2,zero
    51a0:	308cb03a 	or	r6,r6,r2
    51a4:	898dc83a 	sub	r6,r17,r6
    51a8:	89a3803a 	cmpltu	r17,r17,r6
    51ac:	40d1c83a 	sub	r8,r8,r3
    51b0:	4451c83a 	sub	r8,r8,r17
    51b4:	3023883a 	mov	r17,r6
    51b8:	4080202c 	andhi	r2,r8,128
    51bc:	10002326 	beq	r2,zero,524c <__adddf3+0x204>
    51c0:	04c02034 	movhi	r19,128
    51c4:	9cffffc4 	addi	r19,r19,-1
    51c8:	44e6703a 	and	r19,r8,r19
    51cc:	98007626 	beq	r19,zero,53a8 <__adddf3+0x360>
    51d0:	9809883a 	mov	r4,r19
    51d4:	0006d1c0 	call	6d1c <__clzsi2>
    51d8:	10fffe04 	addi	r3,r2,-8
    51dc:	010007c4 	movi	r4,31
    51e0:	20c07716 	blt	r4,r3,53c0 <__adddf3+0x378>
    51e4:	00800804 	movi	r2,32
    51e8:	10c5c83a 	sub	r2,r2,r3
    51ec:	8884d83a 	srl	r2,r17,r2
    51f0:	98d0983a 	sll	r8,r19,r3
    51f4:	88e2983a 	sll	r17,r17,r3
    51f8:	1204b03a 	or	r2,r2,r8
    51fc:	1c007416 	blt	r3,r16,53d0 <__adddf3+0x388>
    5200:	1c21c83a 	sub	r16,r3,r16
    5204:	82000044 	addi	r8,r16,1
    5208:	00c007c4 	movi	r3,31
    520c:	1a009116 	blt	r3,r8,5454 <__adddf3+0x40c>
    5210:	00c00804 	movi	r3,32
    5214:	1a07c83a 	sub	r3,r3,r8
    5218:	8a08d83a 	srl	r4,r17,r8
    521c:	88e2983a 	sll	r17,r17,r3
    5220:	10c6983a 	sll	r3,r2,r3
    5224:	1210d83a 	srl	r8,r2,r8
    5228:	8804c03a 	cmpne	r2,r17,zero
    522c:	1906b03a 	or	r3,r3,r4
    5230:	18a2b03a 	or	r17,r3,r2
    5234:	0021883a 	mov	r16,zero
    5238:	003fa206 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    523c:	1890b03a 	or	r8,r3,r2
    5240:	40017d26 	beq	r8,zero,5838 <__adddf3+0x7f0>
    5244:	1011883a 	mov	r8,r2
    5248:	1823883a 	mov	r17,r3
    524c:	888001cc 	andi	r2,r17,7
    5250:	103f9e1e 	bne	r2,zero,50cc <__alt_exception_stack_pointer+0xf80050cc>
    5254:	4004977a 	slli	r2,r8,29
    5258:	8822d0fa 	srli	r17,r17,3
    525c:	4010d0fa 	srli	r8,r8,3
    5260:	9007883a 	mov	r3,r18
    5264:	1444b03a 	or	r2,r2,r17
    5268:	0101ffc4 	movi	r4,2047
    526c:	81002426 	beq	r16,r4,5300 <__adddf3+0x2b8>
    5270:	8120703a 	and	r16,r16,r4
    5274:	01000434 	movhi	r4,16
    5278:	213fffc4 	addi	r4,r4,-1
    527c:	4110703a 	and	r8,r8,r4
    5280:	003fa806 	br	5124 <__alt_exception_stack_pointer+0xf8005124>
    5284:	8089c83a 	sub	r4,r16,r2
    5288:	01005e0e 	bge	zero,r4,5404 <__adddf3+0x3bc>
    528c:	10002b26 	beq	r2,zero,533c <__adddf3+0x2f4>
    5290:	0081ffc4 	movi	r2,2047
    5294:	80bf8b26 	beq	r16,r2,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5298:	4a402034 	orhi	r9,r9,128
    529c:	00800e04 	movi	r2,56
    52a0:	1100a40e 	bge	r2,r4,5534 <__adddf3+0x4ec>
    52a4:	498cb03a 	or	r6,r9,r6
    52a8:	300ac03a 	cmpne	r5,r6,zero
    52ac:	0013883a 	mov	r9,zero
    52b0:	2c4b883a 	add	r5,r5,r17
    52b4:	2c63803a 	cmpltu	r17,r5,r17
    52b8:	4a11883a 	add	r8,r9,r8
    52bc:	8a11883a 	add	r8,r17,r8
    52c0:	2823883a 	mov	r17,r5
    52c4:	4080202c 	andhi	r2,r8,128
    52c8:	103fe026 	beq	r2,zero,524c <__alt_exception_stack_pointer+0xf800524c>
    52cc:	84000044 	addi	r16,r16,1
    52d0:	0081ffc4 	movi	r2,2047
    52d4:	8080d226 	beq	r16,r2,5620 <__adddf3+0x5d8>
    52d8:	00bfe034 	movhi	r2,65408
    52dc:	10bfffc4 	addi	r2,r2,-1
    52e0:	4090703a 	and	r8,r8,r2
    52e4:	880ad07a 	srli	r5,r17,1
    52e8:	400897fa 	slli	r4,r8,31
    52ec:	88c0004c 	andi	r3,r17,1
    52f0:	28e2b03a 	or	r17,r5,r3
    52f4:	4010d07a 	srli	r8,r8,1
    52f8:	2462b03a 	or	r17,r4,r17
    52fc:	003f7106 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5300:	4088b03a 	or	r4,r8,r2
    5304:	20014526 	beq	r4,zero,581c <__adddf3+0x7d4>
    5308:	01000434 	movhi	r4,16
    530c:	42000234 	orhi	r8,r8,8
    5310:	213fffc4 	addi	r4,r4,-1
    5314:	4110703a 	and	r8,r8,r4
    5318:	003f8206 	br	5124 <__alt_exception_stack_pointer+0xf8005124>
    531c:	18ffffc4 	addi	r3,r3,-1
    5320:	1800491e 	bne	r3,zero,5448 <__adddf3+0x400>
    5324:	898bc83a 	sub	r5,r17,r6
    5328:	8963803a 	cmpltu	r17,r17,r5
    532c:	4251c83a 	sub	r8,r8,r9
    5330:	4451c83a 	sub	r8,r8,r17
    5334:	2823883a 	mov	r17,r5
    5338:	003f9f06 	br	51b8 <__alt_exception_stack_pointer+0xf80051b8>
    533c:	4984b03a 	or	r2,r9,r6
    5340:	103f6026 	beq	r2,zero,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5344:	213fffc4 	addi	r4,r4,-1
    5348:	2000931e 	bne	r4,zero,5598 <__adddf3+0x550>
    534c:	898d883a 	add	r6,r17,r6
    5350:	3463803a 	cmpltu	r17,r6,r17
    5354:	4251883a 	add	r8,r8,r9
    5358:	8a11883a 	add	r8,r17,r8
    535c:	3023883a 	mov	r17,r6
    5360:	003fd806 	br	52c4 <__alt_exception_stack_pointer+0xf80052c4>
    5364:	1800541e 	bne	r3,zero,54b8 <__adddf3+0x470>
    5368:	80800044 	addi	r2,r16,1
    536c:	1081ffcc 	andi	r2,r2,2047
    5370:	00c00044 	movi	r3,1
    5374:	1880a00e 	bge	r3,r2,55f8 <__adddf3+0x5b0>
    5378:	8989c83a 	sub	r4,r17,r6
    537c:	8905803a 	cmpltu	r2,r17,r4
    5380:	4267c83a 	sub	r19,r8,r9
    5384:	98a7c83a 	sub	r19,r19,r2
    5388:	9880202c 	andhi	r2,r19,128
    538c:	10006326 	beq	r2,zero,551c <__adddf3+0x4d4>
    5390:	3463c83a 	sub	r17,r6,r17
    5394:	4a07c83a 	sub	r3,r9,r8
    5398:	344d803a 	cmpltu	r6,r6,r17
    539c:	19a7c83a 	sub	r19,r3,r6
    53a0:	3825883a 	mov	r18,r7
    53a4:	983f8a1e 	bne	r19,zero,51d0 <__alt_exception_stack_pointer+0xf80051d0>
    53a8:	8809883a 	mov	r4,r17
    53ac:	0006d1c0 	call	6d1c <__clzsi2>
    53b0:	10800804 	addi	r2,r2,32
    53b4:	10fffe04 	addi	r3,r2,-8
    53b8:	010007c4 	movi	r4,31
    53bc:	20ff890e 	bge	r4,r3,51e4 <__alt_exception_stack_pointer+0xf80051e4>
    53c0:	10bff604 	addi	r2,r2,-40
    53c4:	8884983a 	sll	r2,r17,r2
    53c8:	0023883a 	mov	r17,zero
    53cc:	1c3f8c0e 	bge	r3,r16,5200 <__alt_exception_stack_pointer+0xf8005200>
    53d0:	023fe034 	movhi	r8,65408
    53d4:	423fffc4 	addi	r8,r8,-1
    53d8:	80e1c83a 	sub	r16,r16,r3
    53dc:	1210703a 	and	r8,r2,r8
    53e0:	003f3806 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    53e4:	9007883a 	mov	r3,r18
    53e8:	0011883a 	mov	r8,zero
    53ec:	0005883a 	mov	r2,zero
    53f0:	003f4c06 	br	5124 <__alt_exception_stack_pointer+0xf8005124>
    53f4:	498cb03a 	or	r6,r9,r6
    53f8:	300cc03a 	cmpne	r6,r6,zero
    53fc:	0007883a 	mov	r3,zero
    5400:	003f6806 	br	51a4 <__alt_exception_stack_pointer+0xf80051a4>
    5404:	20009c1e 	bne	r4,zero,5678 <__adddf3+0x630>
    5408:	80800044 	addi	r2,r16,1
    540c:	1141ffcc 	andi	r5,r2,2047
    5410:	01000044 	movi	r4,1
    5414:	2140670e 	bge	r4,r5,55b4 <__adddf3+0x56c>
    5418:	0101ffc4 	movi	r4,2047
    541c:	11007f26 	beq	r2,r4,561c <__adddf3+0x5d4>
    5420:	898d883a 	add	r6,r17,r6
    5424:	4247883a 	add	r3,r8,r9
    5428:	3451803a 	cmpltu	r8,r6,r17
    542c:	40d1883a 	add	r8,r8,r3
    5430:	402297fa 	slli	r17,r8,31
    5434:	300cd07a 	srli	r6,r6,1
    5438:	4010d07a 	srli	r8,r8,1
    543c:	1021883a 	mov	r16,r2
    5440:	89a2b03a 	or	r17,r17,r6
    5444:	003f1f06 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5448:	0081ffc4 	movi	r2,2047
    544c:	80bf481e 	bne	r16,r2,5170 <__alt_exception_stack_pointer+0xf8005170>
    5450:	003f1c06 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5454:	843ff844 	addi	r16,r16,-31
    5458:	01000804 	movi	r4,32
    545c:	1406d83a 	srl	r3,r2,r16
    5460:	41005026 	beq	r8,r4,55a4 <__adddf3+0x55c>
    5464:	01001004 	movi	r4,64
    5468:	2211c83a 	sub	r8,r4,r8
    546c:	1204983a 	sll	r2,r2,r8
    5470:	88a2b03a 	or	r17,r17,r2
    5474:	8822c03a 	cmpne	r17,r17,zero
    5478:	1c62b03a 	or	r17,r3,r17
    547c:	0011883a 	mov	r8,zero
    5480:	0021883a 	mov	r16,zero
    5484:	003f7106 	br	524c <__alt_exception_stack_pointer+0xf800524c>
    5488:	193ff804 	addi	r4,r3,-32
    548c:	00800804 	movi	r2,32
    5490:	4908d83a 	srl	r4,r9,r4
    5494:	18804526 	beq	r3,r2,55ac <__adddf3+0x564>
    5498:	00801004 	movi	r2,64
    549c:	10c5c83a 	sub	r2,r2,r3
    54a0:	4886983a 	sll	r3,r9,r2
    54a4:	198cb03a 	or	r6,r3,r6
    54a8:	300cc03a 	cmpne	r6,r6,zero
    54ac:	218cb03a 	or	r6,r4,r6
    54b0:	0007883a 	mov	r3,zero
    54b4:	003f3b06 	br	51a4 <__alt_exception_stack_pointer+0xf80051a4>
    54b8:	80002a26 	beq	r16,zero,5564 <__adddf3+0x51c>
    54bc:	0101ffc4 	movi	r4,2047
    54c0:	11006826 	beq	r2,r4,5664 <__adddf3+0x61c>
    54c4:	00c7c83a 	sub	r3,zero,r3
    54c8:	42002034 	orhi	r8,r8,128
    54cc:	01000e04 	movi	r4,56
    54d0:	20c07c16 	blt	r4,r3,56c4 <__adddf3+0x67c>
    54d4:	010007c4 	movi	r4,31
    54d8:	20c0da16 	blt	r4,r3,5844 <__adddf3+0x7fc>
    54dc:	01000804 	movi	r4,32
    54e0:	20c9c83a 	sub	r4,r4,r3
    54e4:	4114983a 	sll	r10,r8,r4
    54e8:	88cad83a 	srl	r5,r17,r3
    54ec:	8908983a 	sll	r4,r17,r4
    54f0:	40c6d83a 	srl	r3,r8,r3
    54f4:	5162b03a 	or	r17,r10,r5
    54f8:	2008c03a 	cmpne	r4,r4,zero
    54fc:	8922b03a 	or	r17,r17,r4
    5500:	3463c83a 	sub	r17,r6,r17
    5504:	48c7c83a 	sub	r3,r9,r3
    5508:	344d803a 	cmpltu	r6,r6,r17
    550c:	1991c83a 	sub	r8,r3,r6
    5510:	1021883a 	mov	r16,r2
    5514:	3825883a 	mov	r18,r7
    5518:	003f2706 	br	51b8 <__alt_exception_stack_pointer+0xf80051b8>
    551c:	24d0b03a 	or	r8,r4,r19
    5520:	40001b1e 	bne	r8,zero,5590 <__adddf3+0x548>
    5524:	0005883a 	mov	r2,zero
    5528:	0007883a 	mov	r3,zero
    552c:	0021883a 	mov	r16,zero
    5530:	003f4d06 	br	5268 <__alt_exception_stack_pointer+0xf8005268>
    5534:	008007c4 	movi	r2,31
    5538:	11003c16 	blt	r2,r4,562c <__adddf3+0x5e4>
    553c:	00800804 	movi	r2,32
    5540:	1105c83a 	sub	r2,r2,r4
    5544:	488e983a 	sll	r7,r9,r2
    5548:	310ad83a 	srl	r5,r6,r4
    554c:	3084983a 	sll	r2,r6,r2
    5550:	4912d83a 	srl	r9,r9,r4
    5554:	394ab03a 	or	r5,r7,r5
    5558:	1004c03a 	cmpne	r2,r2,zero
    555c:	288ab03a 	or	r5,r5,r2
    5560:	003f5306 	br	52b0 <__alt_exception_stack_pointer+0xf80052b0>
    5564:	4448b03a 	or	r4,r8,r17
    5568:	20003e26 	beq	r4,zero,5664 <__adddf3+0x61c>
    556c:	00c6303a 	nor	r3,zero,r3
    5570:	18003a1e 	bne	r3,zero,565c <__adddf3+0x614>
    5574:	3463c83a 	sub	r17,r6,r17
    5578:	4a07c83a 	sub	r3,r9,r8
    557c:	344d803a 	cmpltu	r6,r6,r17
    5580:	1991c83a 	sub	r8,r3,r6
    5584:	1021883a 	mov	r16,r2
    5588:	3825883a 	mov	r18,r7
    558c:	003f0a06 	br	51b8 <__alt_exception_stack_pointer+0xf80051b8>
    5590:	2023883a 	mov	r17,r4
    5594:	003f0d06 	br	51cc <__alt_exception_stack_pointer+0xf80051cc>
    5598:	0081ffc4 	movi	r2,2047
    559c:	80bf3f1e 	bne	r16,r2,529c <__alt_exception_stack_pointer+0xf800529c>
    55a0:	003ec806 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    55a4:	0005883a 	mov	r2,zero
    55a8:	003fb106 	br	5470 <__alt_exception_stack_pointer+0xf8005470>
    55ac:	0007883a 	mov	r3,zero
    55b0:	003fbc06 	br	54a4 <__alt_exception_stack_pointer+0xf80054a4>
    55b4:	4444b03a 	or	r2,r8,r17
    55b8:	8000871e 	bne	r16,zero,57d8 <__adddf3+0x790>
    55bc:	1000ba26 	beq	r2,zero,58a8 <__adddf3+0x860>
    55c0:	4984b03a 	or	r2,r9,r6
    55c4:	103ebf26 	beq	r2,zero,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    55c8:	8985883a 	add	r2,r17,r6
    55cc:	4247883a 	add	r3,r8,r9
    55d0:	1451803a 	cmpltu	r8,r2,r17
    55d4:	40d1883a 	add	r8,r8,r3
    55d8:	40c0202c 	andhi	r3,r8,128
    55dc:	1023883a 	mov	r17,r2
    55e0:	183f1a26 	beq	r3,zero,524c <__alt_exception_stack_pointer+0xf800524c>
    55e4:	00bfe034 	movhi	r2,65408
    55e8:	10bfffc4 	addi	r2,r2,-1
    55ec:	2021883a 	mov	r16,r4
    55f0:	4090703a 	and	r8,r8,r2
    55f4:	003eb306 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    55f8:	4444b03a 	or	r2,r8,r17
    55fc:	8000291e 	bne	r16,zero,56a4 <__adddf3+0x65c>
    5600:	10004b1e 	bne	r2,zero,5730 <__adddf3+0x6e8>
    5604:	4990b03a 	or	r8,r9,r6
    5608:	40008b26 	beq	r8,zero,5838 <__adddf3+0x7f0>
    560c:	4811883a 	mov	r8,r9
    5610:	3023883a 	mov	r17,r6
    5614:	3825883a 	mov	r18,r7
    5618:	003eaa06 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    561c:	1021883a 	mov	r16,r2
    5620:	0011883a 	mov	r8,zero
    5624:	0005883a 	mov	r2,zero
    5628:	003f0f06 	br	5268 <__alt_exception_stack_pointer+0xf8005268>
    562c:	217ff804 	addi	r5,r4,-32
    5630:	00800804 	movi	r2,32
    5634:	494ad83a 	srl	r5,r9,r5
    5638:	20807d26 	beq	r4,r2,5830 <__adddf3+0x7e8>
    563c:	00801004 	movi	r2,64
    5640:	1109c83a 	sub	r4,r2,r4
    5644:	4912983a 	sll	r9,r9,r4
    5648:	498cb03a 	or	r6,r9,r6
    564c:	300cc03a 	cmpne	r6,r6,zero
    5650:	298ab03a 	or	r5,r5,r6
    5654:	0013883a 	mov	r9,zero
    5658:	003f1506 	br	52b0 <__alt_exception_stack_pointer+0xf80052b0>
    565c:	0101ffc4 	movi	r4,2047
    5660:	113f9a1e 	bne	r2,r4,54cc <__alt_exception_stack_pointer+0xf80054cc>
    5664:	4811883a 	mov	r8,r9
    5668:	3023883a 	mov	r17,r6
    566c:	1021883a 	mov	r16,r2
    5670:	3825883a 	mov	r18,r7
    5674:	003e9306 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5678:	8000161e 	bne	r16,zero,56d4 <__adddf3+0x68c>
    567c:	444ab03a 	or	r5,r8,r17
    5680:	28005126 	beq	r5,zero,57c8 <__adddf3+0x780>
    5684:	0108303a 	nor	r4,zero,r4
    5688:	20004d1e 	bne	r4,zero,57c0 <__adddf3+0x778>
    568c:	89a3883a 	add	r17,r17,r6
    5690:	4253883a 	add	r9,r8,r9
    5694:	898d803a 	cmpltu	r6,r17,r6
    5698:	3251883a 	add	r8,r6,r9
    569c:	1021883a 	mov	r16,r2
    56a0:	003f0806 	br	52c4 <__alt_exception_stack_pointer+0xf80052c4>
    56a4:	1000301e 	bne	r2,zero,5768 <__adddf3+0x720>
    56a8:	4984b03a 	or	r2,r9,r6
    56ac:	10007126 	beq	r2,zero,5874 <__adddf3+0x82c>
    56b0:	4811883a 	mov	r8,r9
    56b4:	3023883a 	mov	r17,r6
    56b8:	3825883a 	mov	r18,r7
    56bc:	0401ffc4 	movi	r16,2047
    56c0:	003e8006 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    56c4:	4462b03a 	or	r17,r8,r17
    56c8:	8822c03a 	cmpne	r17,r17,zero
    56cc:	0007883a 	mov	r3,zero
    56d0:	003f8b06 	br	5500 <__alt_exception_stack_pointer+0xf8005500>
    56d4:	0141ffc4 	movi	r5,2047
    56d8:	11403b26 	beq	r2,r5,57c8 <__adddf3+0x780>
    56dc:	0109c83a 	sub	r4,zero,r4
    56e0:	42002034 	orhi	r8,r8,128
    56e4:	01400e04 	movi	r5,56
    56e8:	29006716 	blt	r5,r4,5888 <__adddf3+0x840>
    56ec:	014007c4 	movi	r5,31
    56f0:	29007016 	blt	r5,r4,58b4 <__adddf3+0x86c>
    56f4:	01400804 	movi	r5,32
    56f8:	290bc83a 	sub	r5,r5,r4
    56fc:	4154983a 	sll	r10,r8,r5
    5700:	890ed83a 	srl	r7,r17,r4
    5704:	894a983a 	sll	r5,r17,r5
    5708:	4108d83a 	srl	r4,r8,r4
    570c:	51e2b03a 	or	r17,r10,r7
    5710:	280ac03a 	cmpne	r5,r5,zero
    5714:	8962b03a 	or	r17,r17,r5
    5718:	89a3883a 	add	r17,r17,r6
    571c:	2253883a 	add	r9,r4,r9
    5720:	898d803a 	cmpltu	r6,r17,r6
    5724:	3251883a 	add	r8,r6,r9
    5728:	1021883a 	mov	r16,r2
    572c:	003ee506 	br	52c4 <__alt_exception_stack_pointer+0xf80052c4>
    5730:	4984b03a 	or	r2,r9,r6
    5734:	103e6326 	beq	r2,zero,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5738:	8987c83a 	sub	r3,r17,r6
    573c:	88c9803a 	cmpltu	r4,r17,r3
    5740:	4245c83a 	sub	r2,r8,r9
    5744:	1105c83a 	sub	r2,r2,r4
    5748:	1100202c 	andhi	r4,r2,128
    574c:	203ebb26 	beq	r4,zero,523c <__alt_exception_stack_pointer+0xf800523c>
    5750:	3463c83a 	sub	r17,r6,r17
    5754:	4a07c83a 	sub	r3,r9,r8
    5758:	344d803a 	cmpltu	r6,r6,r17
    575c:	1991c83a 	sub	r8,r3,r6
    5760:	3825883a 	mov	r18,r7
    5764:	003e5706 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5768:	4984b03a 	or	r2,r9,r6
    576c:	10002e26 	beq	r2,zero,5828 <__adddf3+0x7e0>
    5770:	4004d0fa 	srli	r2,r8,3
    5774:	8822d0fa 	srli	r17,r17,3
    5778:	4010977a 	slli	r8,r8,29
    577c:	10c0022c 	andhi	r3,r2,8
    5780:	4462b03a 	or	r17,r8,r17
    5784:	18000826 	beq	r3,zero,57a8 <__adddf3+0x760>
    5788:	4808d0fa 	srli	r4,r9,3
    578c:	20c0022c 	andhi	r3,r4,8
    5790:	1800051e 	bne	r3,zero,57a8 <__adddf3+0x760>
    5794:	300cd0fa 	srli	r6,r6,3
    5798:	4806977a 	slli	r3,r9,29
    579c:	2005883a 	mov	r2,r4
    57a0:	3825883a 	mov	r18,r7
    57a4:	19a2b03a 	or	r17,r3,r6
    57a8:	8810d77a 	srli	r8,r17,29
    57ac:	100490fa 	slli	r2,r2,3
    57b0:	882290fa 	slli	r17,r17,3
    57b4:	0401ffc4 	movi	r16,2047
    57b8:	4090b03a 	or	r8,r8,r2
    57bc:	003e4106 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    57c0:	0141ffc4 	movi	r5,2047
    57c4:	117fc71e 	bne	r2,r5,56e4 <__alt_exception_stack_pointer+0xf80056e4>
    57c8:	4811883a 	mov	r8,r9
    57cc:	3023883a 	mov	r17,r6
    57d0:	1021883a 	mov	r16,r2
    57d4:	003e3b06 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    57d8:	10002f26 	beq	r2,zero,5898 <__adddf3+0x850>
    57dc:	4984b03a 	or	r2,r9,r6
    57e0:	10001126 	beq	r2,zero,5828 <__adddf3+0x7e0>
    57e4:	4004d0fa 	srli	r2,r8,3
    57e8:	8822d0fa 	srli	r17,r17,3
    57ec:	4010977a 	slli	r8,r8,29
    57f0:	10c0022c 	andhi	r3,r2,8
    57f4:	4462b03a 	or	r17,r8,r17
    57f8:	183feb26 	beq	r3,zero,57a8 <__alt_exception_stack_pointer+0xf80057a8>
    57fc:	4808d0fa 	srli	r4,r9,3
    5800:	20c0022c 	andhi	r3,r4,8
    5804:	183fe81e 	bne	r3,zero,57a8 <__alt_exception_stack_pointer+0xf80057a8>
    5808:	300cd0fa 	srli	r6,r6,3
    580c:	4806977a 	slli	r3,r9,29
    5810:	2005883a 	mov	r2,r4
    5814:	19a2b03a 	or	r17,r3,r6
    5818:	003fe306 	br	57a8 <__alt_exception_stack_pointer+0xf80057a8>
    581c:	0011883a 	mov	r8,zero
    5820:	0005883a 	mov	r2,zero
    5824:	003e3f06 	br	5124 <__alt_exception_stack_pointer+0xf8005124>
    5828:	0401ffc4 	movi	r16,2047
    582c:	003e2506 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    5830:	0013883a 	mov	r9,zero
    5834:	003f8406 	br	5648 <__alt_exception_stack_pointer+0xf8005648>
    5838:	0005883a 	mov	r2,zero
    583c:	0007883a 	mov	r3,zero
    5840:	003e8906 	br	5268 <__alt_exception_stack_pointer+0xf8005268>
    5844:	197ff804 	addi	r5,r3,-32
    5848:	01000804 	movi	r4,32
    584c:	414ad83a 	srl	r5,r8,r5
    5850:	19002426 	beq	r3,r4,58e4 <__adddf3+0x89c>
    5854:	01001004 	movi	r4,64
    5858:	20c7c83a 	sub	r3,r4,r3
    585c:	40c6983a 	sll	r3,r8,r3
    5860:	1c46b03a 	or	r3,r3,r17
    5864:	1806c03a 	cmpne	r3,r3,zero
    5868:	28e2b03a 	or	r17,r5,r3
    586c:	0007883a 	mov	r3,zero
    5870:	003f2306 	br	5500 <__alt_exception_stack_pointer+0xf8005500>
    5874:	0007883a 	mov	r3,zero
    5878:	5811883a 	mov	r8,r11
    587c:	00bfffc4 	movi	r2,-1
    5880:	0401ffc4 	movi	r16,2047
    5884:	003e7806 	br	5268 <__alt_exception_stack_pointer+0xf8005268>
    5888:	4462b03a 	or	r17,r8,r17
    588c:	8822c03a 	cmpne	r17,r17,zero
    5890:	0009883a 	mov	r4,zero
    5894:	003fa006 	br	5718 <__alt_exception_stack_pointer+0xf8005718>
    5898:	4811883a 	mov	r8,r9
    589c:	3023883a 	mov	r17,r6
    58a0:	0401ffc4 	movi	r16,2047
    58a4:	003e0706 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    58a8:	4811883a 	mov	r8,r9
    58ac:	3023883a 	mov	r17,r6
    58b0:	003e0406 	br	50c4 <__alt_exception_stack_pointer+0xf80050c4>
    58b4:	21fff804 	addi	r7,r4,-32
    58b8:	01400804 	movi	r5,32
    58bc:	41ced83a 	srl	r7,r8,r7
    58c0:	21400a26 	beq	r4,r5,58ec <__adddf3+0x8a4>
    58c4:	01401004 	movi	r5,64
    58c8:	2909c83a 	sub	r4,r5,r4
    58cc:	4108983a 	sll	r4,r8,r4
    58d0:	2448b03a 	or	r4,r4,r17
    58d4:	2008c03a 	cmpne	r4,r4,zero
    58d8:	3922b03a 	or	r17,r7,r4
    58dc:	0009883a 	mov	r4,zero
    58e0:	003f8d06 	br	5718 <__alt_exception_stack_pointer+0xf8005718>
    58e4:	0007883a 	mov	r3,zero
    58e8:	003fdd06 	br	5860 <__alt_exception_stack_pointer+0xf8005860>
    58ec:	0009883a 	mov	r4,zero
    58f0:	003ff706 	br	58d0 <__alt_exception_stack_pointer+0xf80058d0>

000058f4 <__eqdf2>:
    58f4:	2804d53a 	srli	r2,r5,20
    58f8:	3806d53a 	srli	r3,r7,20
    58fc:	02000434 	movhi	r8,16
    5900:	423fffc4 	addi	r8,r8,-1
    5904:	1081ffcc 	andi	r2,r2,2047
    5908:	0281ffc4 	movi	r10,2047
    590c:	2a12703a 	and	r9,r5,r8
    5910:	18c1ffcc 	andi	r3,r3,2047
    5914:	3a10703a 	and	r8,r7,r8
    5918:	280ad7fa 	srli	r5,r5,31
    591c:	380ed7fa 	srli	r7,r7,31
    5920:	12801026 	beq	r2,r10,5964 <__eqdf2+0x70>
    5924:	0281ffc4 	movi	r10,2047
    5928:	1a800a26 	beq	r3,r10,5954 <__eqdf2+0x60>
    592c:	10c00226 	beq	r2,r3,5938 <__eqdf2+0x44>
    5930:	00800044 	movi	r2,1
    5934:	f800283a 	ret
    5938:	4a3ffd1e 	bne	r9,r8,5930 <__alt_exception_stack_pointer+0xf8005930>
    593c:	21bffc1e 	bne	r4,r6,5930 <__alt_exception_stack_pointer+0xf8005930>
    5940:	29c00c26 	beq	r5,r7,5974 <__eqdf2+0x80>
    5944:	103ffa1e 	bne	r2,zero,5930 <__alt_exception_stack_pointer+0xf8005930>
    5948:	2244b03a 	or	r2,r4,r9
    594c:	1004c03a 	cmpne	r2,r2,zero
    5950:	f800283a 	ret
    5954:	3214b03a 	or	r10,r6,r8
    5958:	503ff426 	beq	r10,zero,592c <__alt_exception_stack_pointer+0xf800592c>
    595c:	00800044 	movi	r2,1
    5960:	f800283a 	ret
    5964:	2254b03a 	or	r10,r4,r9
    5968:	503fee26 	beq	r10,zero,5924 <__alt_exception_stack_pointer+0xf8005924>
    596c:	00800044 	movi	r2,1
    5970:	f800283a 	ret
    5974:	0005883a 	mov	r2,zero
    5978:	f800283a 	ret

0000597c <__gedf2>:
    597c:	2804d53a 	srli	r2,r5,20
    5980:	3806d53a 	srli	r3,r7,20
    5984:	02000434 	movhi	r8,16
    5988:	423fffc4 	addi	r8,r8,-1
    598c:	1081ffcc 	andi	r2,r2,2047
    5990:	0241ffc4 	movi	r9,2047
    5994:	2a14703a 	and	r10,r5,r8
    5998:	18c1ffcc 	andi	r3,r3,2047
    599c:	3a10703a 	and	r8,r7,r8
    59a0:	280ad7fa 	srli	r5,r5,31
    59a4:	380ed7fa 	srli	r7,r7,31
    59a8:	12401d26 	beq	r2,r9,5a20 <__gedf2+0xa4>
    59ac:	0241ffc4 	movi	r9,2047
    59b0:	1a401226 	beq	r3,r9,59fc <__gedf2+0x80>
    59b4:	1000081e 	bne	r2,zero,59d8 <__gedf2+0x5c>
    59b8:	2296b03a 	or	r11,r4,r10
    59bc:	5813003a 	cmpeq	r9,r11,zero
    59c0:	1800091e 	bne	r3,zero,59e8 <__gedf2+0x6c>
    59c4:	3218b03a 	or	r12,r6,r8
    59c8:	6000071e 	bne	r12,zero,59e8 <__gedf2+0x6c>
    59cc:	0005883a 	mov	r2,zero
    59d0:	5800101e 	bne	r11,zero,5a14 <__gedf2+0x98>
    59d4:	f800283a 	ret
    59d8:	18000c1e 	bne	r3,zero,5a0c <__gedf2+0x90>
    59dc:	3212b03a 	or	r9,r6,r8
    59e0:	48000c26 	beq	r9,zero,5a14 <__gedf2+0x98>
    59e4:	0013883a 	mov	r9,zero
    59e8:	39c03fcc 	andi	r7,r7,255
    59ec:	48000826 	beq	r9,zero,5a10 <__gedf2+0x94>
    59f0:	38000926 	beq	r7,zero,5a18 <__gedf2+0x9c>
    59f4:	00800044 	movi	r2,1
    59f8:	f800283a 	ret
    59fc:	3212b03a 	or	r9,r6,r8
    5a00:	483fec26 	beq	r9,zero,59b4 <__alt_exception_stack_pointer+0xf80059b4>
    5a04:	00bfff84 	movi	r2,-2
    5a08:	f800283a 	ret
    5a0c:	39c03fcc 	andi	r7,r7,255
    5a10:	29c00626 	beq	r5,r7,5a2c <__gedf2+0xb0>
    5a14:	283ff726 	beq	r5,zero,59f4 <__alt_exception_stack_pointer+0xf80059f4>
    5a18:	00bfffc4 	movi	r2,-1
    5a1c:	f800283a 	ret
    5a20:	2292b03a 	or	r9,r4,r10
    5a24:	483fe126 	beq	r9,zero,59ac <__alt_exception_stack_pointer+0xf80059ac>
    5a28:	003ff606 	br	5a04 <__alt_exception_stack_pointer+0xf8005a04>
    5a2c:	18bff916 	blt	r3,r2,5a14 <__alt_exception_stack_pointer+0xf8005a14>
    5a30:	10c00316 	blt	r2,r3,5a40 <__gedf2+0xc4>
    5a34:	42bff736 	bltu	r8,r10,5a14 <__alt_exception_stack_pointer+0xf8005a14>
    5a38:	52000326 	beq	r10,r8,5a48 <__gedf2+0xcc>
    5a3c:	5200042e 	bgeu	r10,r8,5a50 <__gedf2+0xd4>
    5a40:	283fec1e 	bne	r5,zero,59f4 <__alt_exception_stack_pointer+0xf80059f4>
    5a44:	003ff406 	br	5a18 <__alt_exception_stack_pointer+0xf8005a18>
    5a48:	313ff236 	bltu	r6,r4,5a14 <__alt_exception_stack_pointer+0xf8005a14>
    5a4c:	21bffc36 	bltu	r4,r6,5a40 <__alt_exception_stack_pointer+0xf8005a40>
    5a50:	0005883a 	mov	r2,zero
    5a54:	f800283a 	ret

00005a58 <__muldf3>:
    5a58:	deffee04 	addi	sp,sp,-72
    5a5c:	dd000c15 	stw	r20,48(sp)
    5a60:	2828d53a 	srli	r20,r5,20
    5a64:	ddc00f15 	stw	r23,60(sp)
    5a68:	282ed7fa 	srli	r23,r5,31
    5a6c:	dc000815 	stw	r16,32(sp)
    5a70:	04000434 	movhi	r16,16
    5a74:	dcc00b15 	stw	r19,44(sp)
    5a78:	843fffc4 	addi	r16,r16,-1
    5a7c:	dfc01115 	stw	ra,68(sp)
    5a80:	df001015 	stw	fp,64(sp)
    5a84:	dd800e15 	stw	r22,56(sp)
    5a88:	dd400d15 	stw	r21,52(sp)
    5a8c:	dc800a15 	stw	r18,40(sp)
    5a90:	dc400915 	stw	r17,36(sp)
    5a94:	a501ffcc 	andi	r20,r20,2047
    5a98:	2c20703a 	and	r16,r5,r16
    5a9c:	b827883a 	mov	r19,r23
    5aa0:	ba403fcc 	andi	r9,r23,255
    5aa4:	a0006026 	beq	r20,zero,5c28 <__muldf3+0x1d0>
    5aa8:	0081ffc4 	movi	r2,2047
    5aac:	202d883a 	mov	r22,r4
    5ab0:	a0803626 	beq	r20,r2,5b8c <__muldf3+0x134>
    5ab4:	84000434 	orhi	r16,r16,16
    5ab8:	200ad77a 	srli	r5,r4,29
    5abc:	800490fa 	slli	r2,r16,3
    5ac0:	202c90fa 	slli	r22,r4,3
    5ac4:	a53f0044 	addi	r20,r20,-1023
    5ac8:	28a0b03a 	or	r16,r5,r2
    5acc:	002b883a 	mov	r21,zero
    5ad0:	000b883a 	mov	r5,zero
    5ad4:	3804d53a 	srli	r2,r7,20
    5ad8:	3838d7fa 	srli	fp,r7,31
    5adc:	04400434 	movhi	r17,16
    5ae0:	8c7fffc4 	addi	r17,r17,-1
    5ae4:	1081ffcc 	andi	r2,r2,2047
    5ae8:	3025883a 	mov	r18,r6
    5aec:	3c62703a 	and	r17,r7,r17
    5af0:	e2803fcc 	andi	r10,fp,255
    5af4:	10006d26 	beq	r2,zero,5cac <__muldf3+0x254>
    5af8:	00c1ffc4 	movi	r3,2047
    5afc:	10c06526 	beq	r2,r3,5c94 <__muldf3+0x23c>
    5b00:	8c400434 	orhi	r17,r17,16
    5b04:	300ed77a 	srli	r7,r6,29
    5b08:	880690fa 	slli	r3,r17,3
    5b0c:	302490fa 	slli	r18,r6,3
    5b10:	10bf0044 	addi	r2,r2,-1023
    5b14:	38e2b03a 	or	r17,r7,r3
    5b18:	000f883a 	mov	r7,zero
    5b1c:	a087883a 	add	r3,r20,r2
    5b20:	010003c4 	movi	r4,15
    5b24:	3d44b03a 	or	r2,r7,r21
    5b28:	e5ccf03a 	xor	r6,fp,r23
    5b2c:	1a000044 	addi	r8,r3,1
    5b30:	20809b36 	bltu	r4,r2,5da0 <__muldf3+0x348>
    5b34:	100490ba 	slli	r2,r2,2
    5b38:	01000034 	movhi	r4,0
    5b3c:	2116d304 	addi	r4,r4,23372
    5b40:	1105883a 	add	r2,r2,r4
    5b44:	10800017 	ldw	r2,0(r2)
    5b48:	1000683a 	jmp	r2
    5b4c:	00005da0 	cmpeqi	zero,zero,374
    5b50:	00005bac 	andhi	zero,zero,366
    5b54:	00005bac 	andhi	zero,zero,366
    5b58:	00005ba8 	cmpgeui	zero,zero,366
    5b5c:	00005d7c 	xorhi	zero,zero,373
    5b60:	00005d7c 	xorhi	zero,zero,373
    5b64:	00005d64 	muli	zero,zero,373
    5b68:	00005ba8 	cmpgeui	zero,zero,366
    5b6c:	00005d7c 	xorhi	zero,zero,373
    5b70:	00005d64 	muli	zero,zero,373
    5b74:	00005d7c 	xorhi	zero,zero,373
    5b78:	00005ba8 	cmpgeui	zero,zero,366
    5b7c:	00005d8c 	andi	zero,zero,374
    5b80:	00005d8c 	andi	zero,zero,374
    5b84:	00005d8c 	andi	zero,zero,374
    5b88:	000060ec 	andhi	zero,zero,387
    5b8c:	2404b03a 	or	r2,r4,r16
    5b90:	1000711e 	bne	r2,zero,5d58 <__muldf3+0x300>
    5b94:	05400204 	movi	r21,8
    5b98:	0021883a 	mov	r16,zero
    5b9c:	002d883a 	mov	r22,zero
    5ba0:	01400084 	movi	r5,2
    5ba4:	003fcb06 	br	5ad4 <__alt_exception_stack_pointer+0xf8005ad4>
    5ba8:	500d883a 	mov	r6,r10
    5bac:	00800084 	movi	r2,2
    5bb0:	38805926 	beq	r7,r2,5d18 <__muldf3+0x2c0>
    5bb4:	008000c4 	movi	r2,3
    5bb8:	3881bb26 	beq	r7,r2,62a8 <__muldf3+0x850>
    5bbc:	00800044 	movi	r2,1
    5bc0:	3881961e 	bne	r7,r2,621c <__muldf3+0x7c4>
    5bc4:	3027883a 	mov	r19,r6
    5bc8:	0005883a 	mov	r2,zero
    5bcc:	0021883a 	mov	r16,zero
    5bd0:	002d883a 	mov	r22,zero
    5bd4:	1004953a 	slli	r2,r2,20
    5bd8:	98c03fcc 	andi	r3,r19,255
    5bdc:	04400434 	movhi	r17,16
    5be0:	8c7fffc4 	addi	r17,r17,-1
    5be4:	180697fa 	slli	r3,r3,31
    5be8:	8460703a 	and	r16,r16,r17
    5bec:	80a0b03a 	or	r16,r16,r2
    5bf0:	80c6b03a 	or	r3,r16,r3
    5bf4:	b005883a 	mov	r2,r22
    5bf8:	dfc01117 	ldw	ra,68(sp)
    5bfc:	df001017 	ldw	fp,64(sp)
    5c00:	ddc00f17 	ldw	r23,60(sp)
    5c04:	dd800e17 	ldw	r22,56(sp)
    5c08:	dd400d17 	ldw	r21,52(sp)
    5c0c:	dd000c17 	ldw	r20,48(sp)
    5c10:	dcc00b17 	ldw	r19,44(sp)
    5c14:	dc800a17 	ldw	r18,40(sp)
    5c18:	dc400917 	ldw	r17,36(sp)
    5c1c:	dc000817 	ldw	r16,32(sp)
    5c20:	dec01204 	addi	sp,sp,72
    5c24:	f800283a 	ret
    5c28:	2404b03a 	or	r2,r4,r16
    5c2c:	202b883a 	mov	r21,r4
    5c30:	10004426 	beq	r2,zero,5d44 <__muldf3+0x2ec>
    5c34:	80015126 	beq	r16,zero,617c <__muldf3+0x724>
    5c38:	8009883a 	mov	r4,r16
    5c3c:	d9800715 	stw	r6,28(sp)
    5c40:	d9c00215 	stw	r7,8(sp)
    5c44:	da400415 	stw	r9,16(sp)
    5c48:	0006d1c0 	call	6d1c <__clzsi2>
    5c4c:	d9800717 	ldw	r6,28(sp)
    5c50:	d9c00217 	ldw	r7,8(sp)
    5c54:	da400417 	ldw	r9,16(sp)
    5c58:	113ffd44 	addi	r4,r2,-11
    5c5c:	00c00704 	movi	r3,28
    5c60:	19014216 	blt	r3,r4,616c <__muldf3+0x714>
    5c64:	00c00744 	movi	r3,29
    5c68:	15bffe04 	addi	r22,r2,-8
    5c6c:	1907c83a 	sub	r3,r3,r4
    5c70:	85a0983a 	sll	r16,r16,r22
    5c74:	a8c6d83a 	srl	r3,r21,r3
    5c78:	adac983a 	sll	r22,r21,r22
    5c7c:	1c20b03a 	or	r16,r3,r16
    5c80:	1080fcc4 	addi	r2,r2,1011
    5c84:	00a9c83a 	sub	r20,zero,r2
    5c88:	002b883a 	mov	r21,zero
    5c8c:	000b883a 	mov	r5,zero
    5c90:	003f9006 	br	5ad4 <__alt_exception_stack_pointer+0xf8005ad4>
    5c94:	3446b03a 	or	r3,r6,r17
    5c98:	1800281e 	bne	r3,zero,5d3c <__muldf3+0x2e4>
    5c9c:	0023883a 	mov	r17,zero
    5ca0:	0025883a 	mov	r18,zero
    5ca4:	01c00084 	movi	r7,2
    5ca8:	003f9c06 	br	5b1c <__alt_exception_stack_pointer+0xf8005b1c>
    5cac:	3446b03a 	or	r3,r6,r17
    5cb0:	18001e26 	beq	r3,zero,5d2c <__muldf3+0x2d4>
    5cb4:	88012126 	beq	r17,zero,613c <__muldf3+0x6e4>
    5cb8:	8809883a 	mov	r4,r17
    5cbc:	d9400215 	stw	r5,8(sp)
    5cc0:	d9800715 	stw	r6,28(sp)
    5cc4:	da400415 	stw	r9,16(sp)
    5cc8:	da800315 	stw	r10,12(sp)
    5ccc:	0006d1c0 	call	6d1c <__clzsi2>
    5cd0:	d9400217 	ldw	r5,8(sp)
    5cd4:	d9800717 	ldw	r6,28(sp)
    5cd8:	da400417 	ldw	r9,16(sp)
    5cdc:	da800317 	ldw	r10,12(sp)
    5ce0:	113ffd44 	addi	r4,r2,-11
    5ce4:	00c00704 	movi	r3,28
    5ce8:	19011016 	blt	r3,r4,612c <__muldf3+0x6d4>
    5cec:	00c00744 	movi	r3,29
    5cf0:	14bffe04 	addi	r18,r2,-8
    5cf4:	1907c83a 	sub	r3,r3,r4
    5cf8:	8ca2983a 	sll	r17,r17,r18
    5cfc:	30c6d83a 	srl	r3,r6,r3
    5d00:	34a4983a 	sll	r18,r6,r18
    5d04:	1c62b03a 	or	r17,r3,r17
    5d08:	1080fcc4 	addi	r2,r2,1011
    5d0c:	0085c83a 	sub	r2,zero,r2
    5d10:	000f883a 	mov	r7,zero
    5d14:	003f8106 	br	5b1c <__alt_exception_stack_pointer+0xf8005b1c>
    5d18:	3027883a 	mov	r19,r6
    5d1c:	0081ffc4 	movi	r2,2047
    5d20:	0021883a 	mov	r16,zero
    5d24:	002d883a 	mov	r22,zero
    5d28:	003faa06 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    5d2c:	0023883a 	mov	r17,zero
    5d30:	0025883a 	mov	r18,zero
    5d34:	01c00044 	movi	r7,1
    5d38:	003f7806 	br	5b1c <__alt_exception_stack_pointer+0xf8005b1c>
    5d3c:	01c000c4 	movi	r7,3
    5d40:	003f7606 	br	5b1c <__alt_exception_stack_pointer+0xf8005b1c>
    5d44:	05400104 	movi	r21,4
    5d48:	0021883a 	mov	r16,zero
    5d4c:	002d883a 	mov	r22,zero
    5d50:	01400044 	movi	r5,1
    5d54:	003f5f06 	br	5ad4 <__alt_exception_stack_pointer+0xf8005ad4>
    5d58:	05400304 	movi	r21,12
    5d5c:	014000c4 	movi	r5,3
    5d60:	003f5c06 	br	5ad4 <__alt_exception_stack_pointer+0xf8005ad4>
    5d64:	04000434 	movhi	r16,16
    5d68:	0027883a 	mov	r19,zero
    5d6c:	843fffc4 	addi	r16,r16,-1
    5d70:	05bfffc4 	movi	r22,-1
    5d74:	0081ffc4 	movi	r2,2047
    5d78:	003f9606 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    5d7c:	8023883a 	mov	r17,r16
    5d80:	b025883a 	mov	r18,r22
    5d84:	280f883a 	mov	r7,r5
    5d88:	003f8806 	br	5bac <__alt_exception_stack_pointer+0xf8005bac>
    5d8c:	8023883a 	mov	r17,r16
    5d90:	b025883a 	mov	r18,r22
    5d94:	480d883a 	mov	r6,r9
    5d98:	280f883a 	mov	r7,r5
    5d9c:	003f8306 	br	5bac <__alt_exception_stack_pointer+0xf8005bac>
    5da0:	b026d43a 	srli	r19,r22,16
    5da4:	902ed43a 	srli	r23,r18,16
    5da8:	b5bfffcc 	andi	r22,r22,65535
    5dac:	94bfffcc 	andi	r18,r18,65535
    5db0:	b00b883a 	mov	r5,r22
    5db4:	9009883a 	mov	r4,r18
    5db8:	d8c00515 	stw	r3,20(sp)
    5dbc:	d9800715 	stw	r6,28(sp)
    5dc0:	da000615 	stw	r8,24(sp)
    5dc4:	00050200 	call	5020 <__mulsi3>
    5dc8:	980b883a 	mov	r5,r19
    5dcc:	9009883a 	mov	r4,r18
    5dd0:	1029883a 	mov	r20,r2
    5dd4:	00050200 	call	5020 <__mulsi3>
    5dd8:	b80b883a 	mov	r5,r23
    5ddc:	9809883a 	mov	r4,r19
    5de0:	102b883a 	mov	r21,r2
    5de4:	00050200 	call	5020 <__mulsi3>
    5de8:	b809883a 	mov	r4,r23
    5dec:	b00b883a 	mov	r5,r22
    5df0:	1039883a 	mov	fp,r2
    5df4:	00050200 	call	5020 <__mulsi3>
    5df8:	a008d43a 	srli	r4,r20,16
    5dfc:	1545883a 	add	r2,r2,r21
    5e00:	d8c00517 	ldw	r3,20(sp)
    5e04:	2085883a 	add	r2,r4,r2
    5e08:	d9800717 	ldw	r6,28(sp)
    5e0c:	da000617 	ldw	r8,24(sp)
    5e10:	1540022e 	bgeu	r2,r21,5e1c <__muldf3+0x3c4>
    5e14:	01000074 	movhi	r4,1
    5e18:	e139883a 	add	fp,fp,r4
    5e1c:	100e943a 	slli	r7,r2,16
    5e20:	1004d43a 	srli	r2,r2,16
    5e24:	882ad43a 	srli	r21,r17,16
    5e28:	a53fffcc 	andi	r20,r20,65535
    5e2c:	8c7fffcc 	andi	r17,r17,65535
    5e30:	3d29883a 	add	r20,r7,r20
    5e34:	b00b883a 	mov	r5,r22
    5e38:	8809883a 	mov	r4,r17
    5e3c:	d8c00515 	stw	r3,20(sp)
    5e40:	d9800715 	stw	r6,28(sp)
    5e44:	da000615 	stw	r8,24(sp)
    5e48:	dd000115 	stw	r20,4(sp)
    5e4c:	d8800015 	stw	r2,0(sp)
    5e50:	00050200 	call	5020 <__mulsi3>
    5e54:	980b883a 	mov	r5,r19
    5e58:	8809883a 	mov	r4,r17
    5e5c:	d8800215 	stw	r2,8(sp)
    5e60:	00050200 	call	5020 <__mulsi3>
    5e64:	9809883a 	mov	r4,r19
    5e68:	a80b883a 	mov	r5,r21
    5e6c:	1029883a 	mov	r20,r2
    5e70:	00050200 	call	5020 <__mulsi3>
    5e74:	b00b883a 	mov	r5,r22
    5e78:	a809883a 	mov	r4,r21
    5e7c:	d8800415 	stw	r2,16(sp)
    5e80:	00050200 	call	5020 <__mulsi3>
    5e84:	d9c00217 	ldw	r7,8(sp)
    5e88:	1505883a 	add	r2,r2,r20
    5e8c:	d8c00517 	ldw	r3,20(sp)
    5e90:	3826d43a 	srli	r19,r7,16
    5e94:	d9800717 	ldw	r6,28(sp)
    5e98:	da000617 	ldw	r8,24(sp)
    5e9c:	9885883a 	add	r2,r19,r2
    5ea0:	da400417 	ldw	r9,16(sp)
    5ea4:	1500022e 	bgeu	r2,r20,5eb0 <__muldf3+0x458>
    5ea8:	01000074 	movhi	r4,1
    5eac:	4913883a 	add	r9,r9,r4
    5eb0:	1028d43a 	srli	r20,r2,16
    5eb4:	1004943a 	slli	r2,r2,16
    5eb8:	802cd43a 	srli	r22,r16,16
    5ebc:	843fffcc 	andi	r16,r16,65535
    5ec0:	3cffffcc 	andi	r19,r7,65535
    5ec4:	9009883a 	mov	r4,r18
    5ec8:	800b883a 	mov	r5,r16
    5ecc:	a269883a 	add	r20,r20,r9
    5ed0:	d8c00515 	stw	r3,20(sp)
    5ed4:	d9800715 	stw	r6,28(sp)
    5ed8:	da000615 	stw	r8,24(sp)
    5edc:	14e7883a 	add	r19,r2,r19
    5ee0:	00050200 	call	5020 <__mulsi3>
    5ee4:	9009883a 	mov	r4,r18
    5ee8:	b00b883a 	mov	r5,r22
    5eec:	d8800315 	stw	r2,12(sp)
    5ef0:	00050200 	call	5020 <__mulsi3>
    5ef4:	b809883a 	mov	r4,r23
    5ef8:	b00b883a 	mov	r5,r22
    5efc:	d8800215 	stw	r2,8(sp)
    5f00:	00050200 	call	5020 <__mulsi3>
    5f04:	b80b883a 	mov	r5,r23
    5f08:	8009883a 	mov	r4,r16
    5f0c:	d8800415 	stw	r2,16(sp)
    5f10:	00050200 	call	5020 <__mulsi3>
    5f14:	da800317 	ldw	r10,12(sp)
    5f18:	d9c00217 	ldw	r7,8(sp)
    5f1c:	d9000017 	ldw	r4,0(sp)
    5f20:	502ed43a 	srli	r23,r10,16
    5f24:	11c5883a 	add	r2,r2,r7
    5f28:	24e5883a 	add	r18,r4,r19
    5f2c:	b885883a 	add	r2,r23,r2
    5f30:	d8c00517 	ldw	r3,20(sp)
    5f34:	d9800717 	ldw	r6,28(sp)
    5f38:	da000617 	ldw	r8,24(sp)
    5f3c:	da400417 	ldw	r9,16(sp)
    5f40:	11c0022e 	bgeu	r2,r7,5f4c <__muldf3+0x4f4>
    5f44:	01000074 	movhi	r4,1
    5f48:	4913883a 	add	r9,r9,r4
    5f4c:	100ed43a 	srli	r7,r2,16
    5f50:	1004943a 	slli	r2,r2,16
    5f54:	55ffffcc 	andi	r23,r10,65535
    5f58:	3a53883a 	add	r9,r7,r9
    5f5c:	8809883a 	mov	r4,r17
    5f60:	800b883a 	mov	r5,r16
    5f64:	d8c00515 	stw	r3,20(sp)
    5f68:	d9800715 	stw	r6,28(sp)
    5f6c:	da000615 	stw	r8,24(sp)
    5f70:	da400415 	stw	r9,16(sp)
    5f74:	15ef883a 	add	r23,r2,r23
    5f78:	00050200 	call	5020 <__mulsi3>
    5f7c:	8809883a 	mov	r4,r17
    5f80:	b00b883a 	mov	r5,r22
    5f84:	d8800215 	stw	r2,8(sp)
    5f88:	00050200 	call	5020 <__mulsi3>
    5f8c:	b00b883a 	mov	r5,r22
    5f90:	a809883a 	mov	r4,r21
    5f94:	d8800315 	stw	r2,12(sp)
    5f98:	00050200 	call	5020 <__mulsi3>
    5f9c:	8009883a 	mov	r4,r16
    5fa0:	a80b883a 	mov	r5,r21
    5fa4:	1023883a 	mov	r17,r2
    5fa8:	00050200 	call	5020 <__mulsi3>
    5fac:	d9c00217 	ldw	r7,8(sp)
    5fb0:	da800317 	ldw	r10,12(sp)
    5fb4:	d8c00517 	ldw	r3,20(sp)
    5fb8:	3808d43a 	srli	r4,r7,16
    5fbc:	1285883a 	add	r2,r2,r10
    5fc0:	d9800717 	ldw	r6,28(sp)
    5fc4:	2085883a 	add	r2,r4,r2
    5fc8:	da000617 	ldw	r8,24(sp)
    5fcc:	da400417 	ldw	r9,16(sp)
    5fd0:	1280022e 	bgeu	r2,r10,5fdc <__muldf3+0x584>
    5fd4:	01000074 	movhi	r4,1
    5fd8:	8923883a 	add	r17,r17,r4
    5fdc:	1008943a 	slli	r4,r2,16
    5fe0:	39ffffcc 	andi	r7,r7,65535
    5fe4:	e4b9883a 	add	fp,fp,r18
    5fe8:	21cf883a 	add	r7,r4,r7
    5fec:	e4e7803a 	cmpltu	r19,fp,r19
    5ff0:	3d0f883a 	add	r7,r7,r20
    5ff4:	bf39883a 	add	fp,r23,fp
    5ff8:	99c9883a 	add	r4,r19,r7
    5ffc:	e5ef803a 	cmpltu	r23,fp,r23
    6000:	490b883a 	add	r5,r9,r4
    6004:	1004d43a 	srli	r2,r2,16
    6008:	b965883a 	add	r18,r23,r5
    600c:	24c9803a 	cmpltu	r4,r4,r19
    6010:	3d29803a 	cmpltu	r20,r7,r20
    6014:	a128b03a 	or	r20,r20,r4
    6018:	95ef803a 	cmpltu	r23,r18,r23
    601c:	2a53803a 	cmpltu	r9,r5,r9
    6020:	a0a9883a 	add	r20,r20,r2
    6024:	4deeb03a 	or	r23,r9,r23
    6028:	a5ef883a 	add	r23,r20,r23
    602c:	bc63883a 	add	r17,r23,r17
    6030:	e004927a 	slli	r2,fp,9
    6034:	d9000117 	ldw	r4,4(sp)
    6038:	882e927a 	slli	r23,r17,9
    603c:	9022d5fa 	srli	r17,r18,23
    6040:	e038d5fa 	srli	fp,fp,23
    6044:	1104b03a 	or	r2,r2,r4
    6048:	9024927a 	slli	r18,r18,9
    604c:	1004c03a 	cmpne	r2,r2,zero
    6050:	bc62b03a 	or	r17,r23,r17
    6054:	1738b03a 	or	fp,r2,fp
    6058:	8880402c 	andhi	r2,r17,256
    605c:	e4a4b03a 	or	r18,fp,r18
    6060:	10000726 	beq	r2,zero,6080 <__muldf3+0x628>
    6064:	9006d07a 	srli	r3,r18,1
    6068:	880497fa 	slli	r2,r17,31
    606c:	9480004c 	andi	r18,r18,1
    6070:	8822d07a 	srli	r17,r17,1
    6074:	1ca4b03a 	or	r18,r3,r18
    6078:	14a4b03a 	or	r18,r2,r18
    607c:	4007883a 	mov	r3,r8
    6080:	1880ffc4 	addi	r2,r3,1023
    6084:	0080460e 	bge	zero,r2,61a0 <__muldf3+0x748>
    6088:	910001cc 	andi	r4,r18,7
    608c:	20000726 	beq	r4,zero,60ac <__muldf3+0x654>
    6090:	910003cc 	andi	r4,r18,15
    6094:	01400104 	movi	r5,4
    6098:	21400426 	beq	r4,r5,60ac <__muldf3+0x654>
    609c:	9149883a 	add	r4,r18,r5
    60a0:	24a5803a 	cmpltu	r18,r4,r18
    60a4:	8ca3883a 	add	r17,r17,r18
    60a8:	2025883a 	mov	r18,r4
    60ac:	8900402c 	andhi	r4,r17,256
    60b0:	20000426 	beq	r4,zero,60c4 <__muldf3+0x66c>
    60b4:	18810004 	addi	r2,r3,1024
    60b8:	00ffc034 	movhi	r3,65280
    60bc:	18ffffc4 	addi	r3,r3,-1
    60c0:	88e2703a 	and	r17,r17,r3
    60c4:	00c1ff84 	movi	r3,2046
    60c8:	18bf1316 	blt	r3,r2,5d18 <__alt_exception_stack_pointer+0xf8005d18>
    60cc:	882c977a 	slli	r22,r17,29
    60d0:	9024d0fa 	srli	r18,r18,3
    60d4:	8822927a 	slli	r17,r17,9
    60d8:	1081ffcc 	andi	r2,r2,2047
    60dc:	b4acb03a 	or	r22,r22,r18
    60e0:	8820d33a 	srli	r16,r17,12
    60e4:	3027883a 	mov	r19,r6
    60e8:	003eba06 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    60ec:	8080022c 	andhi	r2,r16,8
    60f0:	10000926 	beq	r2,zero,6118 <__muldf3+0x6c0>
    60f4:	8880022c 	andhi	r2,r17,8
    60f8:	1000071e 	bne	r2,zero,6118 <__muldf3+0x6c0>
    60fc:	00800434 	movhi	r2,16
    6100:	8c000234 	orhi	r16,r17,8
    6104:	10bfffc4 	addi	r2,r2,-1
    6108:	e027883a 	mov	r19,fp
    610c:	80a0703a 	and	r16,r16,r2
    6110:	902d883a 	mov	r22,r18
    6114:	003f1706 	br	5d74 <__alt_exception_stack_pointer+0xf8005d74>
    6118:	00800434 	movhi	r2,16
    611c:	84000234 	orhi	r16,r16,8
    6120:	10bfffc4 	addi	r2,r2,-1
    6124:	80a0703a 	and	r16,r16,r2
    6128:	003f1206 	br	5d74 <__alt_exception_stack_pointer+0xf8005d74>
    612c:	147ff604 	addi	r17,r2,-40
    6130:	3462983a 	sll	r17,r6,r17
    6134:	0025883a 	mov	r18,zero
    6138:	003ef306 	br	5d08 <__alt_exception_stack_pointer+0xf8005d08>
    613c:	3009883a 	mov	r4,r6
    6140:	d9400215 	stw	r5,8(sp)
    6144:	d9800715 	stw	r6,28(sp)
    6148:	da400415 	stw	r9,16(sp)
    614c:	da800315 	stw	r10,12(sp)
    6150:	0006d1c0 	call	6d1c <__clzsi2>
    6154:	10800804 	addi	r2,r2,32
    6158:	da800317 	ldw	r10,12(sp)
    615c:	da400417 	ldw	r9,16(sp)
    6160:	d9800717 	ldw	r6,28(sp)
    6164:	d9400217 	ldw	r5,8(sp)
    6168:	003edd06 	br	5ce0 <__alt_exception_stack_pointer+0xf8005ce0>
    616c:	143ff604 	addi	r16,r2,-40
    6170:	ac20983a 	sll	r16,r21,r16
    6174:	002d883a 	mov	r22,zero
    6178:	003ec106 	br	5c80 <__alt_exception_stack_pointer+0xf8005c80>
    617c:	d9800715 	stw	r6,28(sp)
    6180:	d9c00215 	stw	r7,8(sp)
    6184:	da400415 	stw	r9,16(sp)
    6188:	0006d1c0 	call	6d1c <__clzsi2>
    618c:	10800804 	addi	r2,r2,32
    6190:	da400417 	ldw	r9,16(sp)
    6194:	d9c00217 	ldw	r7,8(sp)
    6198:	d9800717 	ldw	r6,28(sp)
    619c:	003eae06 	br	5c58 <__alt_exception_stack_pointer+0xf8005c58>
    61a0:	00c00044 	movi	r3,1
    61a4:	1887c83a 	sub	r3,r3,r2
    61a8:	01000e04 	movi	r4,56
    61ac:	20fe8516 	blt	r4,r3,5bc4 <__alt_exception_stack_pointer+0xf8005bc4>
    61b0:	010007c4 	movi	r4,31
    61b4:	20c01b16 	blt	r4,r3,6224 <__muldf3+0x7cc>
    61b8:	00800804 	movi	r2,32
    61bc:	10c5c83a 	sub	r2,r2,r3
    61c0:	888a983a 	sll	r5,r17,r2
    61c4:	90c8d83a 	srl	r4,r18,r3
    61c8:	9084983a 	sll	r2,r18,r2
    61cc:	88e2d83a 	srl	r17,r17,r3
    61d0:	2906b03a 	or	r3,r5,r4
    61d4:	1004c03a 	cmpne	r2,r2,zero
    61d8:	1886b03a 	or	r3,r3,r2
    61dc:	188001cc 	andi	r2,r3,7
    61e0:	10000726 	beq	r2,zero,6200 <__muldf3+0x7a8>
    61e4:	188003cc 	andi	r2,r3,15
    61e8:	01000104 	movi	r4,4
    61ec:	11000426 	beq	r2,r4,6200 <__muldf3+0x7a8>
    61f0:	1805883a 	mov	r2,r3
    61f4:	10c00104 	addi	r3,r2,4
    61f8:	1885803a 	cmpltu	r2,r3,r2
    61fc:	88a3883a 	add	r17,r17,r2
    6200:	8880202c 	andhi	r2,r17,128
    6204:	10001c26 	beq	r2,zero,6278 <__muldf3+0x820>
    6208:	3027883a 	mov	r19,r6
    620c:	00800044 	movi	r2,1
    6210:	0021883a 	mov	r16,zero
    6214:	002d883a 	mov	r22,zero
    6218:	003e6e06 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    621c:	4007883a 	mov	r3,r8
    6220:	003f9706 	br	6080 <__alt_exception_stack_pointer+0xf8006080>
    6224:	017ff844 	movi	r5,-31
    6228:	2885c83a 	sub	r2,r5,r2
    622c:	888ad83a 	srl	r5,r17,r2
    6230:	00800804 	movi	r2,32
    6234:	18801a26 	beq	r3,r2,62a0 <__muldf3+0x848>
    6238:	01001004 	movi	r4,64
    623c:	20c7c83a 	sub	r3,r4,r3
    6240:	88e2983a 	sll	r17,r17,r3
    6244:	8ca4b03a 	or	r18,r17,r18
    6248:	9004c03a 	cmpne	r2,r18,zero
    624c:	2884b03a 	or	r2,r5,r2
    6250:	144001cc 	andi	r17,r2,7
    6254:	88000d1e 	bne	r17,zero,628c <__muldf3+0x834>
    6258:	0021883a 	mov	r16,zero
    625c:	102cd0fa 	srli	r22,r2,3
    6260:	3027883a 	mov	r19,r6
    6264:	0005883a 	mov	r2,zero
    6268:	b46cb03a 	or	r22,r22,r17
    626c:	003e5906 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    6270:	1007883a 	mov	r3,r2
    6274:	0023883a 	mov	r17,zero
    6278:	8820927a 	slli	r16,r17,9
    627c:	1805883a 	mov	r2,r3
    6280:	8822977a 	slli	r17,r17,29
    6284:	8020d33a 	srli	r16,r16,12
    6288:	003ff406 	br	625c <__alt_exception_stack_pointer+0xf800625c>
    628c:	10c003cc 	andi	r3,r2,15
    6290:	01000104 	movi	r4,4
    6294:	193ff626 	beq	r3,r4,6270 <__alt_exception_stack_pointer+0xf8006270>
    6298:	0023883a 	mov	r17,zero
    629c:	003fd506 	br	61f4 <__alt_exception_stack_pointer+0xf80061f4>
    62a0:	0023883a 	mov	r17,zero
    62a4:	003fe706 	br	6244 <__alt_exception_stack_pointer+0xf8006244>
    62a8:	00800434 	movhi	r2,16
    62ac:	8c000234 	orhi	r16,r17,8
    62b0:	10bfffc4 	addi	r2,r2,-1
    62b4:	3027883a 	mov	r19,r6
    62b8:	80a0703a 	and	r16,r16,r2
    62bc:	902d883a 	mov	r22,r18
    62c0:	003eac06 	br	5d74 <__alt_exception_stack_pointer+0xf8005d74>

000062c4 <__subdf3>:
    62c4:	02000434 	movhi	r8,16
    62c8:	423fffc4 	addi	r8,r8,-1
    62cc:	defffb04 	addi	sp,sp,-20
    62d0:	2a14703a 	and	r10,r5,r8
    62d4:	3812d53a 	srli	r9,r7,20
    62d8:	3a10703a 	and	r8,r7,r8
    62dc:	2006d77a 	srli	r3,r4,29
    62e0:	3004d77a 	srli	r2,r6,29
    62e4:	dc000015 	stw	r16,0(sp)
    62e8:	501490fa 	slli	r10,r10,3
    62ec:	2820d53a 	srli	r16,r5,20
    62f0:	401090fa 	slli	r8,r8,3
    62f4:	dc800215 	stw	r18,8(sp)
    62f8:	dc400115 	stw	r17,4(sp)
    62fc:	dfc00415 	stw	ra,16(sp)
    6300:	202290fa 	slli	r17,r4,3
    6304:	dcc00315 	stw	r19,12(sp)
    6308:	4a41ffcc 	andi	r9,r9,2047
    630c:	0101ffc4 	movi	r4,2047
    6310:	2824d7fa 	srli	r18,r5,31
    6314:	8401ffcc 	andi	r16,r16,2047
    6318:	50c6b03a 	or	r3,r10,r3
    631c:	380ed7fa 	srli	r7,r7,31
    6320:	408ab03a 	or	r5,r8,r2
    6324:	300c90fa 	slli	r6,r6,3
    6328:	49009626 	beq	r9,r4,6584 <__subdf3+0x2c0>
    632c:	39c0005c 	xori	r7,r7,1
    6330:	8245c83a 	sub	r2,r16,r9
    6334:	3c807426 	beq	r7,r18,6508 <__subdf3+0x244>
    6338:	0080af0e 	bge	zero,r2,65f8 <__subdf3+0x334>
    633c:	48002a1e 	bne	r9,zero,63e8 <__subdf3+0x124>
    6340:	2988b03a 	or	r4,r5,r6
    6344:	20009a1e 	bne	r4,zero,65b0 <__subdf3+0x2ec>
    6348:	888001cc 	andi	r2,r17,7
    634c:	10000726 	beq	r2,zero,636c <__subdf3+0xa8>
    6350:	888003cc 	andi	r2,r17,15
    6354:	01000104 	movi	r4,4
    6358:	11000426 	beq	r2,r4,636c <__subdf3+0xa8>
    635c:	890b883a 	add	r5,r17,r4
    6360:	2c63803a 	cmpltu	r17,r5,r17
    6364:	1c47883a 	add	r3,r3,r17
    6368:	2823883a 	mov	r17,r5
    636c:	1880202c 	andhi	r2,r3,128
    6370:	10005926 	beq	r2,zero,64d8 <__subdf3+0x214>
    6374:	84000044 	addi	r16,r16,1
    6378:	0081ffc4 	movi	r2,2047
    637c:	8080be26 	beq	r16,r2,6678 <__subdf3+0x3b4>
    6380:	017fe034 	movhi	r5,65408
    6384:	297fffc4 	addi	r5,r5,-1
    6388:	1946703a 	and	r3,r3,r5
    638c:	1804977a 	slli	r2,r3,29
    6390:	1806927a 	slli	r3,r3,9
    6394:	8822d0fa 	srli	r17,r17,3
    6398:	8401ffcc 	andi	r16,r16,2047
    639c:	180ad33a 	srli	r5,r3,12
    63a0:	9100004c 	andi	r4,r18,1
    63a4:	1444b03a 	or	r2,r2,r17
    63a8:	80c1ffcc 	andi	r3,r16,2047
    63ac:	1820953a 	slli	r16,r3,20
    63b0:	20c03fcc 	andi	r3,r4,255
    63b4:	180897fa 	slli	r4,r3,31
    63b8:	00c00434 	movhi	r3,16
    63bc:	18ffffc4 	addi	r3,r3,-1
    63c0:	28c6703a 	and	r3,r5,r3
    63c4:	1c06b03a 	or	r3,r3,r16
    63c8:	1906b03a 	or	r3,r3,r4
    63cc:	dfc00417 	ldw	ra,16(sp)
    63d0:	dcc00317 	ldw	r19,12(sp)
    63d4:	dc800217 	ldw	r18,8(sp)
    63d8:	dc400117 	ldw	r17,4(sp)
    63dc:	dc000017 	ldw	r16,0(sp)
    63e0:	dec00504 	addi	sp,sp,20
    63e4:	f800283a 	ret
    63e8:	0101ffc4 	movi	r4,2047
    63ec:	813fd626 	beq	r16,r4,6348 <__alt_exception_stack_pointer+0xf8006348>
    63f0:	29402034 	orhi	r5,r5,128
    63f4:	01000e04 	movi	r4,56
    63f8:	2080a316 	blt	r4,r2,6688 <__subdf3+0x3c4>
    63fc:	010007c4 	movi	r4,31
    6400:	2080c616 	blt	r4,r2,671c <__subdf3+0x458>
    6404:	01000804 	movi	r4,32
    6408:	2089c83a 	sub	r4,r4,r2
    640c:	2910983a 	sll	r8,r5,r4
    6410:	308ed83a 	srl	r7,r6,r2
    6414:	3108983a 	sll	r4,r6,r4
    6418:	2884d83a 	srl	r2,r5,r2
    641c:	41ccb03a 	or	r6,r8,r7
    6420:	2008c03a 	cmpne	r4,r4,zero
    6424:	310cb03a 	or	r6,r6,r4
    6428:	898dc83a 	sub	r6,r17,r6
    642c:	89a3803a 	cmpltu	r17,r17,r6
    6430:	1887c83a 	sub	r3,r3,r2
    6434:	1c47c83a 	sub	r3,r3,r17
    6438:	3023883a 	mov	r17,r6
    643c:	1880202c 	andhi	r2,r3,128
    6440:	10002326 	beq	r2,zero,64d0 <__subdf3+0x20c>
    6444:	04c02034 	movhi	r19,128
    6448:	9cffffc4 	addi	r19,r19,-1
    644c:	1ce6703a 	and	r19,r3,r19
    6450:	98007a26 	beq	r19,zero,663c <__subdf3+0x378>
    6454:	9809883a 	mov	r4,r19
    6458:	0006d1c0 	call	6d1c <__clzsi2>
    645c:	113ffe04 	addi	r4,r2,-8
    6460:	00c007c4 	movi	r3,31
    6464:	19007b16 	blt	r3,r4,6654 <__subdf3+0x390>
    6468:	00800804 	movi	r2,32
    646c:	1105c83a 	sub	r2,r2,r4
    6470:	8884d83a 	srl	r2,r17,r2
    6474:	9906983a 	sll	r3,r19,r4
    6478:	8922983a 	sll	r17,r17,r4
    647c:	10c4b03a 	or	r2,r2,r3
    6480:	24007816 	blt	r4,r16,6664 <__subdf3+0x3a0>
    6484:	2421c83a 	sub	r16,r4,r16
    6488:	80c00044 	addi	r3,r16,1
    648c:	010007c4 	movi	r4,31
    6490:	20c09516 	blt	r4,r3,66e8 <__subdf3+0x424>
    6494:	01400804 	movi	r5,32
    6498:	28cbc83a 	sub	r5,r5,r3
    649c:	88c8d83a 	srl	r4,r17,r3
    64a0:	8962983a 	sll	r17,r17,r5
    64a4:	114a983a 	sll	r5,r2,r5
    64a8:	10c6d83a 	srl	r3,r2,r3
    64ac:	8804c03a 	cmpne	r2,r17,zero
    64b0:	290ab03a 	or	r5,r5,r4
    64b4:	28a2b03a 	or	r17,r5,r2
    64b8:	0021883a 	mov	r16,zero
    64bc:	003fa206 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    64c0:	2090b03a 	or	r8,r4,r2
    64c4:	40018e26 	beq	r8,zero,6b00 <__subdf3+0x83c>
    64c8:	1007883a 	mov	r3,r2
    64cc:	2023883a 	mov	r17,r4
    64d0:	888001cc 	andi	r2,r17,7
    64d4:	103f9e1e 	bne	r2,zero,6350 <__alt_exception_stack_pointer+0xf8006350>
    64d8:	1804977a 	slli	r2,r3,29
    64dc:	8822d0fa 	srli	r17,r17,3
    64e0:	1810d0fa 	srli	r8,r3,3
    64e4:	9100004c 	andi	r4,r18,1
    64e8:	1444b03a 	or	r2,r2,r17
    64ec:	00c1ffc4 	movi	r3,2047
    64f0:	80c02826 	beq	r16,r3,6594 <__subdf3+0x2d0>
    64f4:	01400434 	movhi	r5,16
    64f8:	297fffc4 	addi	r5,r5,-1
    64fc:	80e0703a 	and	r16,r16,r3
    6500:	414a703a 	and	r5,r8,r5
    6504:	003fa806 	br	63a8 <__alt_exception_stack_pointer+0xf80063a8>
    6508:	0080630e 	bge	zero,r2,6698 <__subdf3+0x3d4>
    650c:	48003026 	beq	r9,zero,65d0 <__subdf3+0x30c>
    6510:	0101ffc4 	movi	r4,2047
    6514:	813f8c26 	beq	r16,r4,6348 <__alt_exception_stack_pointer+0xf8006348>
    6518:	29402034 	orhi	r5,r5,128
    651c:	01000e04 	movi	r4,56
    6520:	2080a90e 	bge	r4,r2,67c8 <__subdf3+0x504>
    6524:	298cb03a 	or	r6,r5,r6
    6528:	3012c03a 	cmpne	r9,r6,zero
    652c:	0005883a 	mov	r2,zero
    6530:	4c53883a 	add	r9,r9,r17
    6534:	4c63803a 	cmpltu	r17,r9,r17
    6538:	10c7883a 	add	r3,r2,r3
    653c:	88c7883a 	add	r3,r17,r3
    6540:	4823883a 	mov	r17,r9
    6544:	1880202c 	andhi	r2,r3,128
    6548:	1000d026 	beq	r2,zero,688c <__subdf3+0x5c8>
    654c:	84000044 	addi	r16,r16,1
    6550:	0081ffc4 	movi	r2,2047
    6554:	8080fe26 	beq	r16,r2,6950 <__subdf3+0x68c>
    6558:	00bfe034 	movhi	r2,65408
    655c:	10bfffc4 	addi	r2,r2,-1
    6560:	1886703a 	and	r3,r3,r2
    6564:	880ad07a 	srli	r5,r17,1
    6568:	180497fa 	slli	r2,r3,31
    656c:	8900004c 	andi	r4,r17,1
    6570:	2922b03a 	or	r17,r5,r4
    6574:	1806d07a 	srli	r3,r3,1
    6578:	1462b03a 	or	r17,r2,r17
    657c:	3825883a 	mov	r18,r7
    6580:	003f7106 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6584:	2984b03a 	or	r2,r5,r6
    6588:	103f6826 	beq	r2,zero,632c <__alt_exception_stack_pointer+0xf800632c>
    658c:	39c03fcc 	andi	r7,r7,255
    6590:	003f6706 	br	6330 <__alt_exception_stack_pointer+0xf8006330>
    6594:	4086b03a 	or	r3,r8,r2
    6598:	18015226 	beq	r3,zero,6ae4 <__subdf3+0x820>
    659c:	00c00434 	movhi	r3,16
    65a0:	41400234 	orhi	r5,r8,8
    65a4:	18ffffc4 	addi	r3,r3,-1
    65a8:	28ca703a 	and	r5,r5,r3
    65ac:	003f7e06 	br	63a8 <__alt_exception_stack_pointer+0xf80063a8>
    65b0:	10bfffc4 	addi	r2,r2,-1
    65b4:	1000491e 	bne	r2,zero,66dc <__subdf3+0x418>
    65b8:	898fc83a 	sub	r7,r17,r6
    65bc:	89e3803a 	cmpltu	r17,r17,r7
    65c0:	1947c83a 	sub	r3,r3,r5
    65c4:	1c47c83a 	sub	r3,r3,r17
    65c8:	3823883a 	mov	r17,r7
    65cc:	003f9b06 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    65d0:	2988b03a 	or	r4,r5,r6
    65d4:	203f5c26 	beq	r4,zero,6348 <__alt_exception_stack_pointer+0xf8006348>
    65d8:	10bfffc4 	addi	r2,r2,-1
    65dc:	1000931e 	bne	r2,zero,682c <__subdf3+0x568>
    65e0:	898d883a 	add	r6,r17,r6
    65e4:	3463803a 	cmpltu	r17,r6,r17
    65e8:	1947883a 	add	r3,r3,r5
    65ec:	88c7883a 	add	r3,r17,r3
    65f0:	3023883a 	mov	r17,r6
    65f4:	003fd306 	br	6544 <__alt_exception_stack_pointer+0xf8006544>
    65f8:	1000541e 	bne	r2,zero,674c <__subdf3+0x488>
    65fc:	80800044 	addi	r2,r16,1
    6600:	1081ffcc 	andi	r2,r2,2047
    6604:	01000044 	movi	r4,1
    6608:	2080a20e 	bge	r4,r2,6894 <__subdf3+0x5d0>
    660c:	8989c83a 	sub	r4,r17,r6
    6610:	8905803a 	cmpltu	r2,r17,r4
    6614:	1967c83a 	sub	r19,r3,r5
    6618:	98a7c83a 	sub	r19,r19,r2
    661c:	9880202c 	andhi	r2,r19,128
    6620:	10006326 	beq	r2,zero,67b0 <__subdf3+0x4ec>
    6624:	3463c83a 	sub	r17,r6,r17
    6628:	28c7c83a 	sub	r3,r5,r3
    662c:	344d803a 	cmpltu	r6,r6,r17
    6630:	19a7c83a 	sub	r19,r3,r6
    6634:	3825883a 	mov	r18,r7
    6638:	983f861e 	bne	r19,zero,6454 <__alt_exception_stack_pointer+0xf8006454>
    663c:	8809883a 	mov	r4,r17
    6640:	0006d1c0 	call	6d1c <__clzsi2>
    6644:	10800804 	addi	r2,r2,32
    6648:	113ffe04 	addi	r4,r2,-8
    664c:	00c007c4 	movi	r3,31
    6650:	193f850e 	bge	r3,r4,6468 <__alt_exception_stack_pointer+0xf8006468>
    6654:	10bff604 	addi	r2,r2,-40
    6658:	8884983a 	sll	r2,r17,r2
    665c:	0023883a 	mov	r17,zero
    6660:	243f880e 	bge	r4,r16,6484 <__alt_exception_stack_pointer+0xf8006484>
    6664:	00ffe034 	movhi	r3,65408
    6668:	18ffffc4 	addi	r3,r3,-1
    666c:	8121c83a 	sub	r16,r16,r4
    6670:	10c6703a 	and	r3,r2,r3
    6674:	003f3406 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6678:	9100004c 	andi	r4,r18,1
    667c:	000b883a 	mov	r5,zero
    6680:	0005883a 	mov	r2,zero
    6684:	003f4806 	br	63a8 <__alt_exception_stack_pointer+0xf80063a8>
    6688:	298cb03a 	or	r6,r5,r6
    668c:	300cc03a 	cmpne	r6,r6,zero
    6690:	0005883a 	mov	r2,zero
    6694:	003f6406 	br	6428 <__alt_exception_stack_pointer+0xf8006428>
    6698:	10009a1e 	bne	r2,zero,6904 <__subdf3+0x640>
    669c:	82400044 	addi	r9,r16,1
    66a0:	4881ffcc 	andi	r2,r9,2047
    66a4:	02800044 	movi	r10,1
    66a8:	5080670e 	bge	r10,r2,6848 <__subdf3+0x584>
    66ac:	0081ffc4 	movi	r2,2047
    66b0:	4880af26 	beq	r9,r2,6970 <__subdf3+0x6ac>
    66b4:	898d883a 	add	r6,r17,r6
    66b8:	1945883a 	add	r2,r3,r5
    66bc:	3447803a 	cmpltu	r3,r6,r17
    66c0:	1887883a 	add	r3,r3,r2
    66c4:	182297fa 	slli	r17,r3,31
    66c8:	300cd07a 	srli	r6,r6,1
    66cc:	1806d07a 	srli	r3,r3,1
    66d0:	4821883a 	mov	r16,r9
    66d4:	89a2b03a 	or	r17,r17,r6
    66d8:	003f1b06 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    66dc:	0101ffc4 	movi	r4,2047
    66e0:	813f441e 	bne	r16,r4,63f4 <__alt_exception_stack_pointer+0xf80063f4>
    66e4:	003f1806 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    66e8:	843ff844 	addi	r16,r16,-31
    66ec:	01400804 	movi	r5,32
    66f0:	1408d83a 	srl	r4,r2,r16
    66f4:	19405026 	beq	r3,r5,6838 <__subdf3+0x574>
    66f8:	01401004 	movi	r5,64
    66fc:	28c7c83a 	sub	r3,r5,r3
    6700:	10c4983a 	sll	r2,r2,r3
    6704:	88a2b03a 	or	r17,r17,r2
    6708:	8822c03a 	cmpne	r17,r17,zero
    670c:	2462b03a 	or	r17,r4,r17
    6710:	0007883a 	mov	r3,zero
    6714:	0021883a 	mov	r16,zero
    6718:	003f6d06 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    671c:	11fff804 	addi	r7,r2,-32
    6720:	01000804 	movi	r4,32
    6724:	29ced83a 	srl	r7,r5,r7
    6728:	11004526 	beq	r2,r4,6840 <__subdf3+0x57c>
    672c:	01001004 	movi	r4,64
    6730:	2089c83a 	sub	r4,r4,r2
    6734:	2904983a 	sll	r2,r5,r4
    6738:	118cb03a 	or	r6,r2,r6
    673c:	300cc03a 	cmpne	r6,r6,zero
    6740:	398cb03a 	or	r6,r7,r6
    6744:	0005883a 	mov	r2,zero
    6748:	003f3706 	br	6428 <__alt_exception_stack_pointer+0xf8006428>
    674c:	80002a26 	beq	r16,zero,67f8 <__subdf3+0x534>
    6750:	0101ffc4 	movi	r4,2047
    6754:	49006626 	beq	r9,r4,68f0 <__subdf3+0x62c>
    6758:	0085c83a 	sub	r2,zero,r2
    675c:	18c02034 	orhi	r3,r3,128
    6760:	01000e04 	movi	r4,56
    6764:	20807e16 	blt	r4,r2,6960 <__subdf3+0x69c>
    6768:	010007c4 	movi	r4,31
    676c:	2080e716 	blt	r4,r2,6b0c <__subdf3+0x848>
    6770:	01000804 	movi	r4,32
    6774:	2089c83a 	sub	r4,r4,r2
    6778:	1914983a 	sll	r10,r3,r4
    677c:	8890d83a 	srl	r8,r17,r2
    6780:	8908983a 	sll	r4,r17,r4
    6784:	1884d83a 	srl	r2,r3,r2
    6788:	5222b03a 	or	r17,r10,r8
    678c:	2006c03a 	cmpne	r3,r4,zero
    6790:	88e2b03a 	or	r17,r17,r3
    6794:	3463c83a 	sub	r17,r6,r17
    6798:	2885c83a 	sub	r2,r5,r2
    679c:	344d803a 	cmpltu	r6,r6,r17
    67a0:	1187c83a 	sub	r3,r2,r6
    67a4:	4821883a 	mov	r16,r9
    67a8:	3825883a 	mov	r18,r7
    67ac:	003f2306 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    67b0:	24d0b03a 	or	r8,r4,r19
    67b4:	40001b1e 	bne	r8,zero,6824 <__subdf3+0x560>
    67b8:	0005883a 	mov	r2,zero
    67bc:	0009883a 	mov	r4,zero
    67c0:	0021883a 	mov	r16,zero
    67c4:	003f4906 	br	64ec <__alt_exception_stack_pointer+0xf80064ec>
    67c8:	010007c4 	movi	r4,31
    67cc:	20803a16 	blt	r4,r2,68b8 <__subdf3+0x5f4>
    67d0:	01000804 	movi	r4,32
    67d4:	2089c83a 	sub	r4,r4,r2
    67d8:	2912983a 	sll	r9,r5,r4
    67dc:	3090d83a 	srl	r8,r6,r2
    67e0:	3108983a 	sll	r4,r6,r4
    67e4:	2884d83a 	srl	r2,r5,r2
    67e8:	4a12b03a 	or	r9,r9,r8
    67ec:	2008c03a 	cmpne	r4,r4,zero
    67f0:	4912b03a 	or	r9,r9,r4
    67f4:	003f4e06 	br	6530 <__alt_exception_stack_pointer+0xf8006530>
    67f8:	1c48b03a 	or	r4,r3,r17
    67fc:	20003c26 	beq	r4,zero,68f0 <__subdf3+0x62c>
    6800:	0084303a 	nor	r2,zero,r2
    6804:	1000381e 	bne	r2,zero,68e8 <__subdf3+0x624>
    6808:	3463c83a 	sub	r17,r6,r17
    680c:	28c5c83a 	sub	r2,r5,r3
    6810:	344d803a 	cmpltu	r6,r6,r17
    6814:	1187c83a 	sub	r3,r2,r6
    6818:	4821883a 	mov	r16,r9
    681c:	3825883a 	mov	r18,r7
    6820:	003f0606 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    6824:	2023883a 	mov	r17,r4
    6828:	003f0906 	br	6450 <__alt_exception_stack_pointer+0xf8006450>
    682c:	0101ffc4 	movi	r4,2047
    6830:	813f3a1e 	bne	r16,r4,651c <__alt_exception_stack_pointer+0xf800651c>
    6834:	003ec406 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6838:	0005883a 	mov	r2,zero
    683c:	003fb106 	br	6704 <__alt_exception_stack_pointer+0xf8006704>
    6840:	0005883a 	mov	r2,zero
    6844:	003fbc06 	br	6738 <__alt_exception_stack_pointer+0xf8006738>
    6848:	1c44b03a 	or	r2,r3,r17
    684c:	80008e1e 	bne	r16,zero,6a88 <__subdf3+0x7c4>
    6850:	1000c826 	beq	r2,zero,6b74 <__subdf3+0x8b0>
    6854:	2984b03a 	or	r2,r5,r6
    6858:	103ebb26 	beq	r2,zero,6348 <__alt_exception_stack_pointer+0xf8006348>
    685c:	8989883a 	add	r4,r17,r6
    6860:	1945883a 	add	r2,r3,r5
    6864:	2447803a 	cmpltu	r3,r4,r17
    6868:	1887883a 	add	r3,r3,r2
    686c:	1880202c 	andhi	r2,r3,128
    6870:	2023883a 	mov	r17,r4
    6874:	103f1626 	beq	r2,zero,64d0 <__alt_exception_stack_pointer+0xf80064d0>
    6878:	00bfe034 	movhi	r2,65408
    687c:	10bfffc4 	addi	r2,r2,-1
    6880:	5021883a 	mov	r16,r10
    6884:	1886703a 	and	r3,r3,r2
    6888:	003eaf06 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    688c:	3825883a 	mov	r18,r7
    6890:	003f0f06 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    6894:	1c44b03a 	or	r2,r3,r17
    6898:	8000251e 	bne	r16,zero,6930 <__subdf3+0x66c>
    689c:	1000661e 	bne	r2,zero,6a38 <__subdf3+0x774>
    68a0:	2990b03a 	or	r8,r5,r6
    68a4:	40009626 	beq	r8,zero,6b00 <__subdf3+0x83c>
    68a8:	2807883a 	mov	r3,r5
    68ac:	3023883a 	mov	r17,r6
    68b0:	3825883a 	mov	r18,r7
    68b4:	003ea406 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    68b8:	127ff804 	addi	r9,r2,-32
    68bc:	01000804 	movi	r4,32
    68c0:	2a52d83a 	srl	r9,r5,r9
    68c4:	11008c26 	beq	r2,r4,6af8 <__subdf3+0x834>
    68c8:	01001004 	movi	r4,64
    68cc:	2085c83a 	sub	r2,r4,r2
    68d0:	2884983a 	sll	r2,r5,r2
    68d4:	118cb03a 	or	r6,r2,r6
    68d8:	300cc03a 	cmpne	r6,r6,zero
    68dc:	4992b03a 	or	r9,r9,r6
    68e0:	0005883a 	mov	r2,zero
    68e4:	003f1206 	br	6530 <__alt_exception_stack_pointer+0xf8006530>
    68e8:	0101ffc4 	movi	r4,2047
    68ec:	493f9c1e 	bne	r9,r4,6760 <__alt_exception_stack_pointer+0xf8006760>
    68f0:	2807883a 	mov	r3,r5
    68f4:	3023883a 	mov	r17,r6
    68f8:	4821883a 	mov	r16,r9
    68fc:	3825883a 	mov	r18,r7
    6900:	003e9106 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6904:	80001f1e 	bne	r16,zero,6984 <__subdf3+0x6c0>
    6908:	1c48b03a 	or	r4,r3,r17
    690c:	20005a26 	beq	r4,zero,6a78 <__subdf3+0x7b4>
    6910:	0084303a 	nor	r2,zero,r2
    6914:	1000561e 	bne	r2,zero,6a70 <__subdf3+0x7ac>
    6918:	89a3883a 	add	r17,r17,r6
    691c:	1945883a 	add	r2,r3,r5
    6920:	898d803a 	cmpltu	r6,r17,r6
    6924:	3087883a 	add	r3,r6,r2
    6928:	4821883a 	mov	r16,r9
    692c:	003f0506 	br	6544 <__alt_exception_stack_pointer+0xf8006544>
    6930:	10002b1e 	bne	r2,zero,69e0 <__subdf3+0x71c>
    6934:	2984b03a 	or	r2,r5,r6
    6938:	10008026 	beq	r2,zero,6b3c <__subdf3+0x878>
    693c:	2807883a 	mov	r3,r5
    6940:	3023883a 	mov	r17,r6
    6944:	3825883a 	mov	r18,r7
    6948:	0401ffc4 	movi	r16,2047
    694c:	003e7e06 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6950:	3809883a 	mov	r4,r7
    6954:	0011883a 	mov	r8,zero
    6958:	0005883a 	mov	r2,zero
    695c:	003ee306 	br	64ec <__alt_exception_stack_pointer+0xf80064ec>
    6960:	1c62b03a 	or	r17,r3,r17
    6964:	8822c03a 	cmpne	r17,r17,zero
    6968:	0005883a 	mov	r2,zero
    696c:	003f8906 	br	6794 <__alt_exception_stack_pointer+0xf8006794>
    6970:	3809883a 	mov	r4,r7
    6974:	4821883a 	mov	r16,r9
    6978:	0011883a 	mov	r8,zero
    697c:	0005883a 	mov	r2,zero
    6980:	003eda06 	br	64ec <__alt_exception_stack_pointer+0xf80064ec>
    6984:	0101ffc4 	movi	r4,2047
    6988:	49003b26 	beq	r9,r4,6a78 <__subdf3+0x7b4>
    698c:	0085c83a 	sub	r2,zero,r2
    6990:	18c02034 	orhi	r3,r3,128
    6994:	01000e04 	movi	r4,56
    6998:	20806e16 	blt	r4,r2,6b54 <__subdf3+0x890>
    699c:	010007c4 	movi	r4,31
    69a0:	20807716 	blt	r4,r2,6b80 <__subdf3+0x8bc>
    69a4:	01000804 	movi	r4,32
    69a8:	2089c83a 	sub	r4,r4,r2
    69ac:	1914983a 	sll	r10,r3,r4
    69b0:	8890d83a 	srl	r8,r17,r2
    69b4:	8908983a 	sll	r4,r17,r4
    69b8:	1884d83a 	srl	r2,r3,r2
    69bc:	5222b03a 	or	r17,r10,r8
    69c0:	2006c03a 	cmpne	r3,r4,zero
    69c4:	88e2b03a 	or	r17,r17,r3
    69c8:	89a3883a 	add	r17,r17,r6
    69cc:	1145883a 	add	r2,r2,r5
    69d0:	898d803a 	cmpltu	r6,r17,r6
    69d4:	3087883a 	add	r3,r6,r2
    69d8:	4821883a 	mov	r16,r9
    69dc:	003ed906 	br	6544 <__alt_exception_stack_pointer+0xf8006544>
    69e0:	2984b03a 	or	r2,r5,r6
    69e4:	10004226 	beq	r2,zero,6af0 <__subdf3+0x82c>
    69e8:	1808d0fa 	srli	r4,r3,3
    69ec:	8822d0fa 	srli	r17,r17,3
    69f0:	1806977a 	slli	r3,r3,29
    69f4:	2080022c 	andhi	r2,r4,8
    69f8:	1c62b03a 	or	r17,r3,r17
    69fc:	10000826 	beq	r2,zero,6a20 <__subdf3+0x75c>
    6a00:	2812d0fa 	srli	r9,r5,3
    6a04:	4880022c 	andhi	r2,r9,8
    6a08:	1000051e 	bne	r2,zero,6a20 <__subdf3+0x75c>
    6a0c:	300cd0fa 	srli	r6,r6,3
    6a10:	2804977a 	slli	r2,r5,29
    6a14:	4809883a 	mov	r4,r9
    6a18:	3825883a 	mov	r18,r7
    6a1c:	11a2b03a 	or	r17,r2,r6
    6a20:	8806d77a 	srli	r3,r17,29
    6a24:	200890fa 	slli	r4,r4,3
    6a28:	882290fa 	slli	r17,r17,3
    6a2c:	0401ffc4 	movi	r16,2047
    6a30:	1906b03a 	or	r3,r3,r4
    6a34:	003e4406 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6a38:	2984b03a 	or	r2,r5,r6
    6a3c:	103e4226 	beq	r2,zero,6348 <__alt_exception_stack_pointer+0xf8006348>
    6a40:	8989c83a 	sub	r4,r17,r6
    6a44:	8911803a 	cmpltu	r8,r17,r4
    6a48:	1945c83a 	sub	r2,r3,r5
    6a4c:	1205c83a 	sub	r2,r2,r8
    6a50:	1200202c 	andhi	r8,r2,128
    6a54:	403e9a26 	beq	r8,zero,64c0 <__alt_exception_stack_pointer+0xf80064c0>
    6a58:	3463c83a 	sub	r17,r6,r17
    6a5c:	28c5c83a 	sub	r2,r5,r3
    6a60:	344d803a 	cmpltu	r6,r6,r17
    6a64:	1187c83a 	sub	r3,r2,r6
    6a68:	3825883a 	mov	r18,r7
    6a6c:	003e3606 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6a70:	0101ffc4 	movi	r4,2047
    6a74:	493fc71e 	bne	r9,r4,6994 <__alt_exception_stack_pointer+0xf8006994>
    6a78:	2807883a 	mov	r3,r5
    6a7c:	3023883a 	mov	r17,r6
    6a80:	4821883a 	mov	r16,r9
    6a84:	003e3006 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6a88:	10003626 	beq	r2,zero,6b64 <__subdf3+0x8a0>
    6a8c:	2984b03a 	or	r2,r5,r6
    6a90:	10001726 	beq	r2,zero,6af0 <__subdf3+0x82c>
    6a94:	1808d0fa 	srli	r4,r3,3
    6a98:	8822d0fa 	srli	r17,r17,3
    6a9c:	1806977a 	slli	r3,r3,29
    6aa0:	2080022c 	andhi	r2,r4,8
    6aa4:	1c62b03a 	or	r17,r3,r17
    6aa8:	10000726 	beq	r2,zero,6ac8 <__subdf3+0x804>
    6aac:	2812d0fa 	srli	r9,r5,3
    6ab0:	4880022c 	andhi	r2,r9,8
    6ab4:	1000041e 	bne	r2,zero,6ac8 <__subdf3+0x804>
    6ab8:	300cd0fa 	srli	r6,r6,3
    6abc:	2804977a 	slli	r2,r5,29
    6ac0:	4809883a 	mov	r4,r9
    6ac4:	11a2b03a 	or	r17,r2,r6
    6ac8:	8806d77a 	srli	r3,r17,29
    6acc:	200890fa 	slli	r4,r4,3
    6ad0:	882290fa 	slli	r17,r17,3
    6ad4:	3825883a 	mov	r18,r7
    6ad8:	1906b03a 	or	r3,r3,r4
    6adc:	0401ffc4 	movi	r16,2047
    6ae0:	003e1906 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6ae4:	000b883a 	mov	r5,zero
    6ae8:	0005883a 	mov	r2,zero
    6aec:	003e2e06 	br	63a8 <__alt_exception_stack_pointer+0xf80063a8>
    6af0:	0401ffc4 	movi	r16,2047
    6af4:	003e1406 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6af8:	0005883a 	mov	r2,zero
    6afc:	003f7506 	br	68d4 <__alt_exception_stack_pointer+0xf80068d4>
    6b00:	0005883a 	mov	r2,zero
    6b04:	0009883a 	mov	r4,zero
    6b08:	003e7806 	br	64ec <__alt_exception_stack_pointer+0xf80064ec>
    6b0c:	123ff804 	addi	r8,r2,-32
    6b10:	01000804 	movi	r4,32
    6b14:	1a10d83a 	srl	r8,r3,r8
    6b18:	11002526 	beq	r2,r4,6bb0 <__subdf3+0x8ec>
    6b1c:	01001004 	movi	r4,64
    6b20:	2085c83a 	sub	r2,r4,r2
    6b24:	1884983a 	sll	r2,r3,r2
    6b28:	1444b03a 	or	r2,r2,r17
    6b2c:	1004c03a 	cmpne	r2,r2,zero
    6b30:	40a2b03a 	or	r17,r8,r2
    6b34:	0005883a 	mov	r2,zero
    6b38:	003f1606 	br	6794 <__alt_exception_stack_pointer+0xf8006794>
    6b3c:	02000434 	movhi	r8,16
    6b40:	0009883a 	mov	r4,zero
    6b44:	423fffc4 	addi	r8,r8,-1
    6b48:	00bfffc4 	movi	r2,-1
    6b4c:	0401ffc4 	movi	r16,2047
    6b50:	003e6606 	br	64ec <__alt_exception_stack_pointer+0xf80064ec>
    6b54:	1c62b03a 	or	r17,r3,r17
    6b58:	8822c03a 	cmpne	r17,r17,zero
    6b5c:	0005883a 	mov	r2,zero
    6b60:	003f9906 	br	69c8 <__alt_exception_stack_pointer+0xf80069c8>
    6b64:	2807883a 	mov	r3,r5
    6b68:	3023883a 	mov	r17,r6
    6b6c:	0401ffc4 	movi	r16,2047
    6b70:	003df506 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6b74:	2807883a 	mov	r3,r5
    6b78:	3023883a 	mov	r17,r6
    6b7c:	003df206 	br	6348 <__alt_exception_stack_pointer+0xf8006348>
    6b80:	123ff804 	addi	r8,r2,-32
    6b84:	01000804 	movi	r4,32
    6b88:	1a10d83a 	srl	r8,r3,r8
    6b8c:	11000a26 	beq	r2,r4,6bb8 <__subdf3+0x8f4>
    6b90:	01001004 	movi	r4,64
    6b94:	2085c83a 	sub	r2,r4,r2
    6b98:	1884983a 	sll	r2,r3,r2
    6b9c:	1444b03a 	or	r2,r2,r17
    6ba0:	1004c03a 	cmpne	r2,r2,zero
    6ba4:	40a2b03a 	or	r17,r8,r2
    6ba8:	0005883a 	mov	r2,zero
    6bac:	003f8606 	br	69c8 <__alt_exception_stack_pointer+0xf80069c8>
    6bb0:	0005883a 	mov	r2,zero
    6bb4:	003fdc06 	br	6b28 <__alt_exception_stack_pointer+0xf8006b28>
    6bb8:	0005883a 	mov	r2,zero
    6bbc:	003ff706 	br	6b9c <__alt_exception_stack_pointer+0xf8006b9c>

00006bc0 <__fixdfsi>:
    6bc0:	280cd53a 	srli	r6,r5,20
    6bc4:	00c00434 	movhi	r3,16
    6bc8:	18ffffc4 	addi	r3,r3,-1
    6bcc:	3181ffcc 	andi	r6,r6,2047
    6bd0:	01c0ff84 	movi	r7,1022
    6bd4:	28c6703a 	and	r3,r5,r3
    6bd8:	280ad7fa 	srli	r5,r5,31
    6bdc:	3980120e 	bge	r7,r6,6c28 <__fixdfsi+0x68>
    6be0:	00810744 	movi	r2,1053
    6be4:	11800c16 	blt	r2,r6,6c18 <__fixdfsi+0x58>
    6be8:	00810cc4 	movi	r2,1075
    6bec:	1185c83a 	sub	r2,r2,r6
    6bf0:	01c007c4 	movi	r7,31
    6bf4:	18c00434 	orhi	r3,r3,16
    6bf8:	38800d16 	blt	r7,r2,6c30 <__fixdfsi+0x70>
    6bfc:	31befb44 	addi	r6,r6,-1043
    6c00:	2084d83a 	srl	r2,r4,r2
    6c04:	1986983a 	sll	r3,r3,r6
    6c08:	1884b03a 	or	r2,r3,r2
    6c0c:	28000726 	beq	r5,zero,6c2c <__fixdfsi+0x6c>
    6c10:	0085c83a 	sub	r2,zero,r2
    6c14:	f800283a 	ret
    6c18:	00a00034 	movhi	r2,32768
    6c1c:	10bfffc4 	addi	r2,r2,-1
    6c20:	2885883a 	add	r2,r5,r2
    6c24:	f800283a 	ret
    6c28:	0005883a 	mov	r2,zero
    6c2c:	f800283a 	ret
    6c30:	008104c4 	movi	r2,1043
    6c34:	1185c83a 	sub	r2,r2,r6
    6c38:	1884d83a 	srl	r2,r3,r2
    6c3c:	003ff306 	br	6c0c <__alt_exception_stack_pointer+0xf8006c0c>

00006c40 <__floatsidf>:
    6c40:	defffd04 	addi	sp,sp,-12
    6c44:	dfc00215 	stw	ra,8(sp)
    6c48:	dc400115 	stw	r17,4(sp)
    6c4c:	dc000015 	stw	r16,0(sp)
    6c50:	20002b26 	beq	r4,zero,6d00 <__floatsidf+0xc0>
    6c54:	2023883a 	mov	r17,r4
    6c58:	2020d7fa 	srli	r16,r4,31
    6c5c:	20002d16 	blt	r4,zero,6d14 <__floatsidf+0xd4>
    6c60:	8809883a 	mov	r4,r17
    6c64:	0006d1c0 	call	6d1c <__clzsi2>
    6c68:	01410784 	movi	r5,1054
    6c6c:	288bc83a 	sub	r5,r5,r2
    6c70:	01010cc4 	movi	r4,1075
    6c74:	2149c83a 	sub	r4,r4,r5
    6c78:	00c007c4 	movi	r3,31
    6c7c:	1900160e 	bge	r3,r4,6cd8 <__floatsidf+0x98>
    6c80:	00c104c4 	movi	r3,1043
    6c84:	1947c83a 	sub	r3,r3,r5
    6c88:	88c6983a 	sll	r3,r17,r3
    6c8c:	00800434 	movhi	r2,16
    6c90:	10bfffc4 	addi	r2,r2,-1
    6c94:	1886703a 	and	r3,r3,r2
    6c98:	2941ffcc 	andi	r5,r5,2047
    6c9c:	800d883a 	mov	r6,r16
    6ca0:	0005883a 	mov	r2,zero
    6ca4:	280a953a 	slli	r5,r5,20
    6ca8:	31803fcc 	andi	r6,r6,255
    6cac:	01000434 	movhi	r4,16
    6cb0:	300c97fa 	slli	r6,r6,31
    6cb4:	213fffc4 	addi	r4,r4,-1
    6cb8:	1906703a 	and	r3,r3,r4
    6cbc:	1946b03a 	or	r3,r3,r5
    6cc0:	1986b03a 	or	r3,r3,r6
    6cc4:	dfc00217 	ldw	ra,8(sp)
    6cc8:	dc400117 	ldw	r17,4(sp)
    6ccc:	dc000017 	ldw	r16,0(sp)
    6cd0:	dec00304 	addi	sp,sp,12
    6cd4:	f800283a 	ret
    6cd8:	00c002c4 	movi	r3,11
    6cdc:	1887c83a 	sub	r3,r3,r2
    6ce0:	88c6d83a 	srl	r3,r17,r3
    6ce4:	8904983a 	sll	r2,r17,r4
    6ce8:	01000434 	movhi	r4,16
    6cec:	213fffc4 	addi	r4,r4,-1
    6cf0:	2941ffcc 	andi	r5,r5,2047
    6cf4:	1906703a 	and	r3,r3,r4
    6cf8:	800d883a 	mov	r6,r16
    6cfc:	003fe906 	br	6ca4 <__alt_exception_stack_pointer+0xf8006ca4>
    6d00:	000d883a 	mov	r6,zero
    6d04:	000b883a 	mov	r5,zero
    6d08:	0007883a 	mov	r3,zero
    6d0c:	0005883a 	mov	r2,zero
    6d10:	003fe406 	br	6ca4 <__alt_exception_stack_pointer+0xf8006ca4>
    6d14:	0123c83a 	sub	r17,zero,r4
    6d18:	003fd106 	br	6c60 <__alt_exception_stack_pointer+0xf8006c60>

00006d1c <__clzsi2>:
    6d1c:	00bfffd4 	movui	r2,65535
    6d20:	11000536 	bltu	r2,r4,6d38 <__clzsi2+0x1c>
    6d24:	00803fc4 	movi	r2,255
    6d28:	11000f36 	bltu	r2,r4,6d68 <__clzsi2+0x4c>
    6d2c:	00800804 	movi	r2,32
    6d30:	0007883a 	mov	r3,zero
    6d34:	00000506 	br	6d4c <__clzsi2+0x30>
    6d38:	00804034 	movhi	r2,256
    6d3c:	10bfffc4 	addi	r2,r2,-1
    6d40:	11000c2e 	bgeu	r2,r4,6d74 <__clzsi2+0x58>
    6d44:	00800204 	movi	r2,8
    6d48:	00c00604 	movi	r3,24
    6d4c:	20c8d83a 	srl	r4,r4,r3
    6d50:	00c00074 	movhi	r3,1
    6d54:	18d53104 	addi	r3,r3,21700
    6d58:	1909883a 	add	r4,r3,r4
    6d5c:	20c00003 	ldbu	r3,0(r4)
    6d60:	10c5c83a 	sub	r2,r2,r3
    6d64:	f800283a 	ret
    6d68:	00800604 	movi	r2,24
    6d6c:	00c00204 	movi	r3,8
    6d70:	003ff606 	br	6d4c <__alt_exception_stack_pointer+0xf8006d4c>
    6d74:	00800404 	movi	r2,16
    6d78:	1007883a 	mov	r3,r2
    6d7c:	003ff306 	br	6d4c <__alt_exception_stack_pointer+0xf8006d4c>

00006d80 <clock>:
    6d80:	00800074 	movhi	r2,1
    6d84:	109cd104 	addi	r2,r2,29508
    6d88:	11000017 	ldw	r4,0(r2)
    6d8c:	defffb04 	addi	sp,sp,-20
    6d90:	d80b883a 	mov	r5,sp
    6d94:	dfc00415 	stw	ra,16(sp)
    6d98:	00079740 	call	7974 <_times_r>
    6d9c:	00ffffc4 	movi	r3,-1
    6da0:	10c00726 	beq	r2,r3,6dc0 <clock+0x40>
    6da4:	d8c00017 	ldw	r3,0(sp)
    6da8:	d8800117 	ldw	r2,4(sp)
    6dac:	1885883a 	add	r2,r3,r2
    6db0:	d8c00217 	ldw	r3,8(sp)
    6db4:	10c7883a 	add	r3,r2,r3
    6db8:	d8800317 	ldw	r2,12(sp)
    6dbc:	1885883a 	add	r2,r3,r2
    6dc0:	dfc00417 	ldw	ra,16(sp)
    6dc4:	dec00504 	addi	sp,sp,20
    6dc8:	f800283a 	ret

00006dcc <malloc>:
    6dcc:	00800074 	movhi	r2,1
    6dd0:	109cd104 	addi	r2,r2,29508
    6dd4:	200b883a 	mov	r5,r4
    6dd8:	11000017 	ldw	r4,0(r2)
    6ddc:	0006df41 	jmpi	6df4 <_malloc_r>

00006de0 <free>:
    6de0:	00800074 	movhi	r2,1
    6de4:	109cd104 	addi	r2,r2,29508
    6de8:	200b883a 	mov	r5,r4
    6dec:	11000017 	ldw	r4,0(r2)
    6df0:	000beb01 	jmpi	beb0 <_free_r>

00006df4 <_malloc_r>:
    6df4:	defff504 	addi	sp,sp,-44
    6df8:	dc800315 	stw	r18,12(sp)
    6dfc:	dfc00a15 	stw	ra,40(sp)
    6e00:	df000915 	stw	fp,36(sp)
    6e04:	ddc00815 	stw	r23,32(sp)
    6e08:	dd800715 	stw	r22,28(sp)
    6e0c:	dd400615 	stw	r21,24(sp)
    6e10:	dd000515 	stw	r20,20(sp)
    6e14:	dcc00415 	stw	r19,16(sp)
    6e18:	dc400215 	stw	r17,8(sp)
    6e1c:	dc000115 	stw	r16,4(sp)
    6e20:	288002c4 	addi	r2,r5,11
    6e24:	00c00584 	movi	r3,22
    6e28:	2025883a 	mov	r18,r4
    6e2c:	18807f2e 	bgeu	r3,r2,702c <_malloc_r+0x238>
    6e30:	047ffe04 	movi	r17,-8
    6e34:	1462703a 	and	r17,r2,r17
    6e38:	8800a316 	blt	r17,zero,70c8 <_malloc_r+0x2d4>
    6e3c:	8940a236 	bltu	r17,r5,70c8 <_malloc_r+0x2d4>
    6e40:	00123c40 	call	123c4 <__malloc_lock>
    6e44:	00807dc4 	movi	r2,503
    6e48:	1441e92e 	bgeu	r2,r17,75f0 <_malloc_r+0x7fc>
    6e4c:	8804d27a 	srli	r2,r17,9
    6e50:	1000a126 	beq	r2,zero,70d8 <_malloc_r+0x2e4>
    6e54:	00c00104 	movi	r3,4
    6e58:	18811e36 	bltu	r3,r2,72d4 <_malloc_r+0x4e0>
    6e5c:	8804d1ba 	srli	r2,r17,6
    6e60:	12000e44 	addi	r8,r2,57
    6e64:	11c00e04 	addi	r7,r2,56
    6e68:	4209883a 	add	r4,r8,r8
    6e6c:	04c00074 	movhi	r19,1
    6e70:	2109883a 	add	r4,r4,r4
    6e74:	9cd70604 	addi	r19,r19,23576
    6e78:	2109883a 	add	r4,r4,r4
    6e7c:	9909883a 	add	r4,r19,r4
    6e80:	24000117 	ldw	r16,4(r4)
    6e84:	213ffe04 	addi	r4,r4,-8
    6e88:	24009726 	beq	r4,r16,70e8 <_malloc_r+0x2f4>
    6e8c:	80800117 	ldw	r2,4(r16)
    6e90:	01bfff04 	movi	r6,-4
    6e94:	014003c4 	movi	r5,15
    6e98:	1184703a 	and	r2,r2,r6
    6e9c:	1447c83a 	sub	r3,r2,r17
    6ea0:	28c00716 	blt	r5,r3,6ec0 <_malloc_r+0xcc>
    6ea4:	1800920e 	bge	r3,zero,70f0 <_malloc_r+0x2fc>
    6ea8:	84000317 	ldw	r16,12(r16)
    6eac:	24008e26 	beq	r4,r16,70e8 <_malloc_r+0x2f4>
    6eb0:	80800117 	ldw	r2,4(r16)
    6eb4:	1184703a 	and	r2,r2,r6
    6eb8:	1447c83a 	sub	r3,r2,r17
    6ebc:	28fff90e 	bge	r5,r3,6ea4 <__alt_exception_stack_pointer+0xf8006ea4>
    6ec0:	3809883a 	mov	r4,r7
    6ec4:	01800074 	movhi	r6,1
    6ec8:	9c000417 	ldw	r16,16(r19)
    6ecc:	31970604 	addi	r6,r6,23576
    6ed0:	32000204 	addi	r8,r6,8
    6ed4:	82013426 	beq	r16,r8,73a8 <_malloc_r+0x5b4>
    6ed8:	80c00117 	ldw	r3,4(r16)
    6edc:	00bfff04 	movi	r2,-4
    6ee0:	188e703a 	and	r7,r3,r2
    6ee4:	3c45c83a 	sub	r2,r7,r17
    6ee8:	00c003c4 	movi	r3,15
    6eec:	18811f16 	blt	r3,r2,736c <_malloc_r+0x578>
    6ef0:	32000515 	stw	r8,20(r6)
    6ef4:	32000415 	stw	r8,16(r6)
    6ef8:	10007f0e 	bge	r2,zero,70f8 <_malloc_r+0x304>
    6efc:	00807fc4 	movi	r2,511
    6f00:	11c0fd36 	bltu	r2,r7,72f8 <_malloc_r+0x504>
    6f04:	3806d0fa 	srli	r3,r7,3
    6f08:	01c00044 	movi	r7,1
    6f0c:	30800117 	ldw	r2,4(r6)
    6f10:	19400044 	addi	r5,r3,1
    6f14:	294b883a 	add	r5,r5,r5
    6f18:	1807d0ba 	srai	r3,r3,2
    6f1c:	294b883a 	add	r5,r5,r5
    6f20:	294b883a 	add	r5,r5,r5
    6f24:	298b883a 	add	r5,r5,r6
    6f28:	38c6983a 	sll	r3,r7,r3
    6f2c:	29c00017 	ldw	r7,0(r5)
    6f30:	2a7ffe04 	addi	r9,r5,-8
    6f34:	1886b03a 	or	r3,r3,r2
    6f38:	82400315 	stw	r9,12(r16)
    6f3c:	81c00215 	stw	r7,8(r16)
    6f40:	30c00115 	stw	r3,4(r6)
    6f44:	2c000015 	stw	r16,0(r5)
    6f48:	3c000315 	stw	r16,12(r7)
    6f4c:	2005d0ba 	srai	r2,r4,2
    6f50:	01400044 	movi	r5,1
    6f54:	288a983a 	sll	r5,r5,r2
    6f58:	19406f36 	bltu	r3,r5,7118 <_malloc_r+0x324>
    6f5c:	28c4703a 	and	r2,r5,r3
    6f60:	10000a1e 	bne	r2,zero,6f8c <_malloc_r+0x198>
    6f64:	00bfff04 	movi	r2,-4
    6f68:	294b883a 	add	r5,r5,r5
    6f6c:	2088703a 	and	r4,r4,r2
    6f70:	28c4703a 	and	r2,r5,r3
    6f74:	21000104 	addi	r4,r4,4
    6f78:	1000041e 	bne	r2,zero,6f8c <_malloc_r+0x198>
    6f7c:	294b883a 	add	r5,r5,r5
    6f80:	28c4703a 	and	r2,r5,r3
    6f84:	21000104 	addi	r4,r4,4
    6f88:	103ffc26 	beq	r2,zero,6f7c <__alt_exception_stack_pointer+0xf8006f7c>
    6f8c:	02bfff04 	movi	r10,-4
    6f90:	024003c4 	movi	r9,15
    6f94:	21800044 	addi	r6,r4,1
    6f98:	318d883a 	add	r6,r6,r6
    6f9c:	318d883a 	add	r6,r6,r6
    6fa0:	318d883a 	add	r6,r6,r6
    6fa4:	998d883a 	add	r6,r19,r6
    6fa8:	333ffe04 	addi	r12,r6,-8
    6fac:	2017883a 	mov	r11,r4
    6fb0:	31800104 	addi	r6,r6,4
    6fb4:	34000017 	ldw	r16,0(r6)
    6fb8:	31fffd04 	addi	r7,r6,-12
    6fbc:	81c0041e 	bne	r16,r7,6fd0 <_malloc_r+0x1dc>
    6fc0:	0000fb06 	br	73b0 <_malloc_r+0x5bc>
    6fc4:	1801030e 	bge	r3,zero,73d4 <_malloc_r+0x5e0>
    6fc8:	84000317 	ldw	r16,12(r16)
    6fcc:	81c0f826 	beq	r16,r7,73b0 <_malloc_r+0x5bc>
    6fd0:	80800117 	ldw	r2,4(r16)
    6fd4:	1284703a 	and	r2,r2,r10
    6fd8:	1447c83a 	sub	r3,r2,r17
    6fdc:	48fff90e 	bge	r9,r3,6fc4 <__alt_exception_stack_pointer+0xf8006fc4>
    6fe0:	80800317 	ldw	r2,12(r16)
    6fe4:	81000217 	ldw	r4,8(r16)
    6fe8:	89400054 	ori	r5,r17,1
    6fec:	81400115 	stw	r5,4(r16)
    6ff0:	20800315 	stw	r2,12(r4)
    6ff4:	11000215 	stw	r4,8(r2)
    6ff8:	8463883a 	add	r17,r16,r17
    6ffc:	9c400515 	stw	r17,20(r19)
    7000:	9c400415 	stw	r17,16(r19)
    7004:	18800054 	ori	r2,r3,1
    7008:	88800115 	stw	r2,4(r17)
    700c:	8a000315 	stw	r8,12(r17)
    7010:	8a000215 	stw	r8,8(r17)
    7014:	88e3883a 	add	r17,r17,r3
    7018:	88c00015 	stw	r3,0(r17)
    701c:	9009883a 	mov	r4,r18
    7020:	00123e80 	call	123e8 <__malloc_unlock>
    7024:	80800204 	addi	r2,r16,8
    7028:	00001b06 	br	7098 <_malloc_r+0x2a4>
    702c:	04400404 	movi	r17,16
    7030:	89402536 	bltu	r17,r5,70c8 <_malloc_r+0x2d4>
    7034:	00123c40 	call	123c4 <__malloc_lock>
    7038:	00800184 	movi	r2,6
    703c:	01000084 	movi	r4,2
    7040:	04c00074 	movhi	r19,1
    7044:	1085883a 	add	r2,r2,r2
    7048:	9cd70604 	addi	r19,r19,23576
    704c:	1085883a 	add	r2,r2,r2
    7050:	9885883a 	add	r2,r19,r2
    7054:	14000117 	ldw	r16,4(r2)
    7058:	10fffe04 	addi	r3,r2,-8
    705c:	80c0d926 	beq	r16,r3,73c4 <_malloc_r+0x5d0>
    7060:	80c00117 	ldw	r3,4(r16)
    7064:	81000317 	ldw	r4,12(r16)
    7068:	00bfff04 	movi	r2,-4
    706c:	1884703a 	and	r2,r3,r2
    7070:	81400217 	ldw	r5,8(r16)
    7074:	8085883a 	add	r2,r16,r2
    7078:	10c00117 	ldw	r3,4(r2)
    707c:	29000315 	stw	r4,12(r5)
    7080:	21400215 	stw	r5,8(r4)
    7084:	18c00054 	ori	r3,r3,1
    7088:	10c00115 	stw	r3,4(r2)
    708c:	9009883a 	mov	r4,r18
    7090:	00123e80 	call	123e8 <__malloc_unlock>
    7094:	80800204 	addi	r2,r16,8
    7098:	dfc00a17 	ldw	ra,40(sp)
    709c:	df000917 	ldw	fp,36(sp)
    70a0:	ddc00817 	ldw	r23,32(sp)
    70a4:	dd800717 	ldw	r22,28(sp)
    70a8:	dd400617 	ldw	r21,24(sp)
    70ac:	dd000517 	ldw	r20,20(sp)
    70b0:	dcc00417 	ldw	r19,16(sp)
    70b4:	dc800317 	ldw	r18,12(sp)
    70b8:	dc400217 	ldw	r17,8(sp)
    70bc:	dc000117 	ldw	r16,4(sp)
    70c0:	dec00b04 	addi	sp,sp,44
    70c4:	f800283a 	ret
    70c8:	00800304 	movi	r2,12
    70cc:	90800015 	stw	r2,0(r18)
    70d0:	0005883a 	mov	r2,zero
    70d4:	003ff006 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    70d8:	01002004 	movi	r4,128
    70dc:	02001004 	movi	r8,64
    70e0:	01c00fc4 	movi	r7,63
    70e4:	003f6106 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    70e8:	4009883a 	mov	r4,r8
    70ec:	003f7506 	br	6ec4 <__alt_exception_stack_pointer+0xf8006ec4>
    70f0:	81000317 	ldw	r4,12(r16)
    70f4:	003fde06 	br	7070 <__alt_exception_stack_pointer+0xf8007070>
    70f8:	81c5883a 	add	r2,r16,r7
    70fc:	11400117 	ldw	r5,4(r2)
    7100:	9009883a 	mov	r4,r18
    7104:	29400054 	ori	r5,r5,1
    7108:	11400115 	stw	r5,4(r2)
    710c:	00123e80 	call	123e8 <__malloc_unlock>
    7110:	80800204 	addi	r2,r16,8
    7114:	003fe006 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    7118:	9c000217 	ldw	r16,8(r19)
    711c:	00bfff04 	movi	r2,-4
    7120:	85800117 	ldw	r22,4(r16)
    7124:	b0ac703a 	and	r22,r22,r2
    7128:	b4400336 	bltu	r22,r17,7138 <_malloc_r+0x344>
    712c:	b445c83a 	sub	r2,r22,r17
    7130:	00c003c4 	movi	r3,15
    7134:	18805d16 	blt	r3,r2,72ac <_malloc_r+0x4b8>
    7138:	05c00074 	movhi	r23,1
    713c:	008000b4 	movhi	r2,2
    7140:	10a3ca04 	addi	r2,r2,-28888
    7144:	bddcd204 	addi	r23,r23,29512
    7148:	15400017 	ldw	r21,0(r2)
    714c:	b8c00017 	ldw	r3,0(r23)
    7150:	00bfffc4 	movi	r2,-1
    7154:	858d883a 	add	r6,r16,r22
    7158:	8d6b883a 	add	r21,r17,r21
    715c:	1880ea26 	beq	r3,r2,7508 <_malloc_r+0x714>
    7160:	ad4403c4 	addi	r21,r21,4111
    7164:	00bc0004 	movi	r2,-4096
    7168:	a8aa703a 	and	r21,r21,r2
    716c:	a80b883a 	mov	r5,r21
    7170:	9009883a 	mov	r4,r18
    7174:	d9800015 	stw	r6,0(sp)
    7178:	00078880 	call	7888 <_sbrk_r>
    717c:	1029883a 	mov	r20,r2
    7180:	00bfffc4 	movi	r2,-1
    7184:	d9800017 	ldw	r6,0(sp)
    7188:	a080e826 	beq	r20,r2,752c <_malloc_r+0x738>
    718c:	a180a636 	bltu	r20,r6,7428 <_malloc_r+0x634>
    7190:	070000b4 	movhi	fp,2
    7194:	e723d604 	addi	fp,fp,-28840
    7198:	e0800017 	ldw	r2,0(fp)
    719c:	a887883a 	add	r3,r21,r2
    71a0:	e0c00015 	stw	r3,0(fp)
    71a4:	3500e626 	beq	r6,r20,7540 <_malloc_r+0x74c>
    71a8:	b9000017 	ldw	r4,0(r23)
    71ac:	00bfffc4 	movi	r2,-1
    71b0:	2080ee26 	beq	r4,r2,756c <_malloc_r+0x778>
    71b4:	a185c83a 	sub	r2,r20,r6
    71b8:	10c5883a 	add	r2,r2,r3
    71bc:	e0800015 	stw	r2,0(fp)
    71c0:	a0c001cc 	andi	r3,r20,7
    71c4:	1800bc26 	beq	r3,zero,74b8 <_malloc_r+0x6c4>
    71c8:	a0e9c83a 	sub	r20,r20,r3
    71cc:	00840204 	movi	r2,4104
    71d0:	a5000204 	addi	r20,r20,8
    71d4:	10c7c83a 	sub	r3,r2,r3
    71d8:	a545883a 	add	r2,r20,r21
    71dc:	1083ffcc 	andi	r2,r2,4095
    71e0:	18abc83a 	sub	r21,r3,r2
    71e4:	a80b883a 	mov	r5,r21
    71e8:	9009883a 	mov	r4,r18
    71ec:	00078880 	call	7888 <_sbrk_r>
    71f0:	00ffffc4 	movi	r3,-1
    71f4:	10c0e126 	beq	r2,r3,757c <_malloc_r+0x788>
    71f8:	1505c83a 	sub	r2,r2,r20
    71fc:	1545883a 	add	r2,r2,r21
    7200:	10800054 	ori	r2,r2,1
    7204:	e0c00017 	ldw	r3,0(fp)
    7208:	9d000215 	stw	r20,8(r19)
    720c:	a0800115 	stw	r2,4(r20)
    7210:	a8c7883a 	add	r3,r21,r3
    7214:	e0c00015 	stw	r3,0(fp)
    7218:	84c00e26 	beq	r16,r19,7254 <_malloc_r+0x460>
    721c:	018003c4 	movi	r6,15
    7220:	3580a72e 	bgeu	r6,r22,74c0 <_malloc_r+0x6cc>
    7224:	81400117 	ldw	r5,4(r16)
    7228:	013ffe04 	movi	r4,-8
    722c:	b0bffd04 	addi	r2,r22,-12
    7230:	1104703a 	and	r2,r2,r4
    7234:	2900004c 	andi	r4,r5,1
    7238:	2088b03a 	or	r4,r4,r2
    723c:	81000115 	stw	r4,4(r16)
    7240:	01400144 	movi	r5,5
    7244:	8089883a 	add	r4,r16,r2
    7248:	21400115 	stw	r5,4(r4)
    724c:	21400215 	stw	r5,8(r4)
    7250:	3080cd36 	bltu	r6,r2,7588 <_malloc_r+0x794>
    7254:	008000b4 	movhi	r2,2
    7258:	10a3c904 	addi	r2,r2,-28892
    725c:	11000017 	ldw	r4,0(r2)
    7260:	20c0012e 	bgeu	r4,r3,7268 <_malloc_r+0x474>
    7264:	10c00015 	stw	r3,0(r2)
    7268:	008000b4 	movhi	r2,2
    726c:	10a3c804 	addi	r2,r2,-28896
    7270:	11000017 	ldw	r4,0(r2)
    7274:	9c000217 	ldw	r16,8(r19)
    7278:	20c0012e 	bgeu	r4,r3,7280 <_malloc_r+0x48c>
    727c:	10c00015 	stw	r3,0(r2)
    7280:	80c00117 	ldw	r3,4(r16)
    7284:	00bfff04 	movi	r2,-4
    7288:	1886703a 	and	r3,r3,r2
    728c:	1c45c83a 	sub	r2,r3,r17
    7290:	1c400236 	bltu	r3,r17,729c <_malloc_r+0x4a8>
    7294:	00c003c4 	movi	r3,15
    7298:	18800416 	blt	r3,r2,72ac <_malloc_r+0x4b8>
    729c:	9009883a 	mov	r4,r18
    72a0:	00123e80 	call	123e8 <__malloc_unlock>
    72a4:	0005883a 	mov	r2,zero
    72a8:	003f7b06 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    72ac:	88c00054 	ori	r3,r17,1
    72b0:	80c00115 	stw	r3,4(r16)
    72b4:	8463883a 	add	r17,r16,r17
    72b8:	10800054 	ori	r2,r2,1
    72bc:	9c400215 	stw	r17,8(r19)
    72c0:	88800115 	stw	r2,4(r17)
    72c4:	9009883a 	mov	r4,r18
    72c8:	00123e80 	call	123e8 <__malloc_unlock>
    72cc:	80800204 	addi	r2,r16,8
    72d0:	003f7106 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    72d4:	00c00504 	movi	r3,20
    72d8:	18804a2e 	bgeu	r3,r2,7404 <_malloc_r+0x610>
    72dc:	00c01504 	movi	r3,84
    72e0:	18806e36 	bltu	r3,r2,749c <_malloc_r+0x6a8>
    72e4:	8804d33a 	srli	r2,r17,12
    72e8:	12001bc4 	addi	r8,r2,111
    72ec:	11c01b84 	addi	r7,r2,110
    72f0:	4209883a 	add	r4,r8,r8
    72f4:	003edd06 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    72f8:	3804d27a 	srli	r2,r7,9
    72fc:	00c00104 	movi	r3,4
    7300:	1880442e 	bgeu	r3,r2,7414 <_malloc_r+0x620>
    7304:	00c00504 	movi	r3,20
    7308:	18808136 	bltu	r3,r2,7510 <_malloc_r+0x71c>
    730c:	11401704 	addi	r5,r2,92
    7310:	10c016c4 	addi	r3,r2,91
    7314:	294b883a 	add	r5,r5,r5
    7318:	294b883a 	add	r5,r5,r5
    731c:	294b883a 	add	r5,r5,r5
    7320:	994b883a 	add	r5,r19,r5
    7324:	28800017 	ldw	r2,0(r5)
    7328:	01800074 	movhi	r6,1
    732c:	297ffe04 	addi	r5,r5,-8
    7330:	31970604 	addi	r6,r6,23576
    7334:	28806526 	beq	r5,r2,74cc <_malloc_r+0x6d8>
    7338:	01bfff04 	movi	r6,-4
    733c:	10c00117 	ldw	r3,4(r2)
    7340:	1986703a 	and	r3,r3,r6
    7344:	38c0022e 	bgeu	r7,r3,7350 <_malloc_r+0x55c>
    7348:	10800217 	ldw	r2,8(r2)
    734c:	28bffb1e 	bne	r5,r2,733c <__alt_exception_stack_pointer+0xf800733c>
    7350:	11400317 	ldw	r5,12(r2)
    7354:	98c00117 	ldw	r3,4(r19)
    7358:	81400315 	stw	r5,12(r16)
    735c:	80800215 	stw	r2,8(r16)
    7360:	2c000215 	stw	r16,8(r5)
    7364:	14000315 	stw	r16,12(r2)
    7368:	003ef806 	br	6f4c <__alt_exception_stack_pointer+0xf8006f4c>
    736c:	88c00054 	ori	r3,r17,1
    7370:	80c00115 	stw	r3,4(r16)
    7374:	8463883a 	add	r17,r16,r17
    7378:	34400515 	stw	r17,20(r6)
    737c:	34400415 	stw	r17,16(r6)
    7380:	10c00054 	ori	r3,r2,1
    7384:	8a000315 	stw	r8,12(r17)
    7388:	8a000215 	stw	r8,8(r17)
    738c:	88c00115 	stw	r3,4(r17)
    7390:	88a3883a 	add	r17,r17,r2
    7394:	88800015 	stw	r2,0(r17)
    7398:	9009883a 	mov	r4,r18
    739c:	00123e80 	call	123e8 <__malloc_unlock>
    73a0:	80800204 	addi	r2,r16,8
    73a4:	003f3c06 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    73a8:	30c00117 	ldw	r3,4(r6)
    73ac:	003ee706 	br	6f4c <__alt_exception_stack_pointer+0xf8006f4c>
    73b0:	5ac00044 	addi	r11,r11,1
    73b4:	588000cc 	andi	r2,r11,3
    73b8:	31800204 	addi	r6,r6,8
    73bc:	103efd1e 	bne	r2,zero,6fb4 <__alt_exception_stack_pointer+0xf8006fb4>
    73c0:	00002406 	br	7454 <_malloc_r+0x660>
    73c4:	14000317 	ldw	r16,12(r2)
    73c8:	143f251e 	bne	r2,r16,7060 <__alt_exception_stack_pointer+0xf8007060>
    73cc:	21000084 	addi	r4,r4,2
    73d0:	003ebc06 	br	6ec4 <__alt_exception_stack_pointer+0xf8006ec4>
    73d4:	8085883a 	add	r2,r16,r2
    73d8:	10c00117 	ldw	r3,4(r2)
    73dc:	81000317 	ldw	r4,12(r16)
    73e0:	81400217 	ldw	r5,8(r16)
    73e4:	18c00054 	ori	r3,r3,1
    73e8:	10c00115 	stw	r3,4(r2)
    73ec:	29000315 	stw	r4,12(r5)
    73f0:	21400215 	stw	r5,8(r4)
    73f4:	9009883a 	mov	r4,r18
    73f8:	00123e80 	call	123e8 <__malloc_unlock>
    73fc:	80800204 	addi	r2,r16,8
    7400:	003f2506 	br	7098 <__alt_exception_stack_pointer+0xf8007098>
    7404:	12001704 	addi	r8,r2,92
    7408:	11c016c4 	addi	r7,r2,91
    740c:	4209883a 	add	r4,r8,r8
    7410:	003e9606 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    7414:	3804d1ba 	srli	r2,r7,6
    7418:	11400e44 	addi	r5,r2,57
    741c:	10c00e04 	addi	r3,r2,56
    7420:	294b883a 	add	r5,r5,r5
    7424:	003fbc06 	br	7318 <__alt_exception_stack_pointer+0xf8007318>
    7428:	84ff5926 	beq	r16,r19,7190 <__alt_exception_stack_pointer+0xf8007190>
    742c:	00800074 	movhi	r2,1
    7430:	10970604 	addi	r2,r2,23576
    7434:	14000217 	ldw	r16,8(r2)
    7438:	00bfff04 	movi	r2,-4
    743c:	80c00117 	ldw	r3,4(r16)
    7440:	1886703a 	and	r3,r3,r2
    7444:	003f9106 	br	728c <__alt_exception_stack_pointer+0xf800728c>
    7448:	60800217 	ldw	r2,8(r12)
    744c:	213fffc4 	addi	r4,r4,-1
    7450:	1300651e 	bne	r2,r12,75e8 <_malloc_r+0x7f4>
    7454:	208000cc 	andi	r2,r4,3
    7458:	633ffe04 	addi	r12,r12,-8
    745c:	103ffa1e 	bne	r2,zero,7448 <__alt_exception_stack_pointer+0xf8007448>
    7460:	98800117 	ldw	r2,4(r19)
    7464:	0146303a 	nor	r3,zero,r5
    7468:	1884703a 	and	r2,r3,r2
    746c:	98800115 	stw	r2,4(r19)
    7470:	294b883a 	add	r5,r5,r5
    7474:	117f2836 	bltu	r2,r5,7118 <__alt_exception_stack_pointer+0xf8007118>
    7478:	283f2726 	beq	r5,zero,7118 <__alt_exception_stack_pointer+0xf8007118>
    747c:	2886703a 	and	r3,r5,r2
    7480:	5809883a 	mov	r4,r11
    7484:	183ec31e 	bne	r3,zero,6f94 <__alt_exception_stack_pointer+0xf8006f94>
    7488:	294b883a 	add	r5,r5,r5
    748c:	2886703a 	and	r3,r5,r2
    7490:	21000104 	addi	r4,r4,4
    7494:	183ffc26 	beq	r3,zero,7488 <__alt_exception_stack_pointer+0xf8007488>
    7498:	003ebe06 	br	6f94 <__alt_exception_stack_pointer+0xf8006f94>
    749c:	00c05504 	movi	r3,340
    74a0:	18801236 	bltu	r3,r2,74ec <_malloc_r+0x6f8>
    74a4:	8804d3fa 	srli	r2,r17,15
    74a8:	12001e04 	addi	r8,r2,120
    74ac:	11c01dc4 	addi	r7,r2,119
    74b0:	4209883a 	add	r4,r8,r8
    74b4:	003e6d06 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    74b8:	00c40004 	movi	r3,4096
    74bc:	003f4606 	br	71d8 <__alt_exception_stack_pointer+0xf80071d8>
    74c0:	00800044 	movi	r2,1
    74c4:	a0800115 	stw	r2,4(r20)
    74c8:	003f7406 	br	729c <__alt_exception_stack_pointer+0xf800729c>
    74cc:	1805d0ba 	srai	r2,r3,2
    74d0:	01c00044 	movi	r7,1
    74d4:	30c00117 	ldw	r3,4(r6)
    74d8:	388e983a 	sll	r7,r7,r2
    74dc:	2805883a 	mov	r2,r5
    74e0:	38c6b03a 	or	r3,r7,r3
    74e4:	30c00115 	stw	r3,4(r6)
    74e8:	003f9b06 	br	7358 <__alt_exception_stack_pointer+0xf8007358>
    74ec:	00c15504 	movi	r3,1364
    74f0:	18801a36 	bltu	r3,r2,755c <_malloc_r+0x768>
    74f4:	8804d4ba 	srli	r2,r17,18
    74f8:	12001f44 	addi	r8,r2,125
    74fc:	11c01f04 	addi	r7,r2,124
    7500:	4209883a 	add	r4,r8,r8
    7504:	003e5906 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    7508:	ad400404 	addi	r21,r21,16
    750c:	003f1706 	br	716c <__alt_exception_stack_pointer+0xf800716c>
    7510:	00c01504 	movi	r3,84
    7514:	18802336 	bltu	r3,r2,75a4 <_malloc_r+0x7b0>
    7518:	3804d33a 	srli	r2,r7,12
    751c:	11401bc4 	addi	r5,r2,111
    7520:	10c01b84 	addi	r3,r2,110
    7524:	294b883a 	add	r5,r5,r5
    7528:	003f7b06 	br	7318 <__alt_exception_stack_pointer+0xf8007318>
    752c:	9c000217 	ldw	r16,8(r19)
    7530:	00bfff04 	movi	r2,-4
    7534:	80c00117 	ldw	r3,4(r16)
    7538:	1886703a 	and	r3,r3,r2
    753c:	003f5306 	br	728c <__alt_exception_stack_pointer+0xf800728c>
    7540:	3083ffcc 	andi	r2,r6,4095
    7544:	103f181e 	bne	r2,zero,71a8 <__alt_exception_stack_pointer+0xf80071a8>
    7548:	99000217 	ldw	r4,8(r19)
    754c:	b545883a 	add	r2,r22,r21
    7550:	10800054 	ori	r2,r2,1
    7554:	20800115 	stw	r2,4(r4)
    7558:	003f3e06 	br	7254 <__alt_exception_stack_pointer+0xf8007254>
    755c:	01003f84 	movi	r4,254
    7560:	02001fc4 	movi	r8,127
    7564:	01c01f84 	movi	r7,126
    7568:	003e4006 	br	6e6c <__alt_exception_stack_pointer+0xf8006e6c>
    756c:	00800074 	movhi	r2,1
    7570:	109cd204 	addi	r2,r2,29512
    7574:	15000015 	stw	r20,0(r2)
    7578:	003f1106 	br	71c0 <__alt_exception_stack_pointer+0xf80071c0>
    757c:	00800044 	movi	r2,1
    7580:	002b883a 	mov	r21,zero
    7584:	003f1f06 	br	7204 <__alt_exception_stack_pointer+0xf8007204>
    7588:	81400204 	addi	r5,r16,8
    758c:	9009883a 	mov	r4,r18
    7590:	000beb00 	call	beb0 <_free_r>
    7594:	008000b4 	movhi	r2,2
    7598:	10a3d604 	addi	r2,r2,-28840
    759c:	10c00017 	ldw	r3,0(r2)
    75a0:	003f2c06 	br	7254 <__alt_exception_stack_pointer+0xf8007254>
    75a4:	00c05504 	movi	r3,340
    75a8:	18800536 	bltu	r3,r2,75c0 <_malloc_r+0x7cc>
    75ac:	3804d3fa 	srli	r2,r7,15
    75b0:	11401e04 	addi	r5,r2,120
    75b4:	10c01dc4 	addi	r3,r2,119
    75b8:	294b883a 	add	r5,r5,r5
    75bc:	003f5606 	br	7318 <__alt_exception_stack_pointer+0xf8007318>
    75c0:	00c15504 	movi	r3,1364
    75c4:	18800536 	bltu	r3,r2,75dc <_malloc_r+0x7e8>
    75c8:	3804d4ba 	srli	r2,r7,18
    75cc:	11401f44 	addi	r5,r2,125
    75d0:	10c01f04 	addi	r3,r2,124
    75d4:	294b883a 	add	r5,r5,r5
    75d8:	003f4f06 	br	7318 <__alt_exception_stack_pointer+0xf8007318>
    75dc:	01403f84 	movi	r5,254
    75e0:	00c01f84 	movi	r3,126
    75e4:	003f4c06 	br	7318 <__alt_exception_stack_pointer+0xf8007318>
    75e8:	98800117 	ldw	r2,4(r19)
    75ec:	003fa006 	br	7470 <__alt_exception_stack_pointer+0xf8007470>
    75f0:	8808d0fa 	srli	r4,r17,3
    75f4:	20800044 	addi	r2,r4,1
    75f8:	1085883a 	add	r2,r2,r2
    75fc:	003e9006 	br	7040 <__alt_exception_stack_pointer+0xf8007040>

00007600 <memcpy>:
    7600:	defffd04 	addi	sp,sp,-12
    7604:	dfc00215 	stw	ra,8(sp)
    7608:	dc400115 	stw	r17,4(sp)
    760c:	dc000015 	stw	r16,0(sp)
    7610:	00c003c4 	movi	r3,15
    7614:	2005883a 	mov	r2,r4
    7618:	1980452e 	bgeu	r3,r6,7730 <memcpy+0x130>
    761c:	2906b03a 	or	r3,r5,r4
    7620:	18c000cc 	andi	r3,r3,3
    7624:	1800441e 	bne	r3,zero,7738 <memcpy+0x138>
    7628:	347ffc04 	addi	r17,r6,-16
    762c:	8822d13a 	srli	r17,r17,4
    7630:	28c00104 	addi	r3,r5,4
    7634:	23400104 	addi	r13,r4,4
    7638:	8820913a 	slli	r16,r17,4
    763c:	2b000204 	addi	r12,r5,8
    7640:	22c00204 	addi	r11,r4,8
    7644:	84000504 	addi	r16,r16,20
    7648:	2a800304 	addi	r10,r5,12
    764c:	22400304 	addi	r9,r4,12
    7650:	2c21883a 	add	r16,r5,r16
    7654:	2811883a 	mov	r8,r5
    7658:	200f883a 	mov	r7,r4
    765c:	41000017 	ldw	r4,0(r8)
    7660:	1fc00017 	ldw	ra,0(r3)
    7664:	63c00017 	ldw	r15,0(r12)
    7668:	39000015 	stw	r4,0(r7)
    766c:	53800017 	ldw	r14,0(r10)
    7670:	6fc00015 	stw	ra,0(r13)
    7674:	5bc00015 	stw	r15,0(r11)
    7678:	4b800015 	stw	r14,0(r9)
    767c:	18c00404 	addi	r3,r3,16
    7680:	39c00404 	addi	r7,r7,16
    7684:	42000404 	addi	r8,r8,16
    7688:	6b400404 	addi	r13,r13,16
    768c:	63000404 	addi	r12,r12,16
    7690:	5ac00404 	addi	r11,r11,16
    7694:	52800404 	addi	r10,r10,16
    7698:	4a400404 	addi	r9,r9,16
    769c:	1c3fef1e 	bne	r3,r16,765c <__alt_exception_stack_pointer+0xf800765c>
    76a0:	89c00044 	addi	r7,r17,1
    76a4:	380e913a 	slli	r7,r7,4
    76a8:	310003cc 	andi	r4,r6,15
    76ac:	02c000c4 	movi	r11,3
    76b0:	11c7883a 	add	r3,r2,r7
    76b4:	29cb883a 	add	r5,r5,r7
    76b8:	5900212e 	bgeu	r11,r4,7740 <memcpy+0x140>
    76bc:	1813883a 	mov	r9,r3
    76c0:	2811883a 	mov	r8,r5
    76c4:	200f883a 	mov	r7,r4
    76c8:	42800017 	ldw	r10,0(r8)
    76cc:	4a400104 	addi	r9,r9,4
    76d0:	39ffff04 	addi	r7,r7,-4
    76d4:	4abfff15 	stw	r10,-4(r9)
    76d8:	42000104 	addi	r8,r8,4
    76dc:	59fffa36 	bltu	r11,r7,76c8 <__alt_exception_stack_pointer+0xf80076c8>
    76e0:	213fff04 	addi	r4,r4,-4
    76e4:	2008d0ba 	srli	r4,r4,2
    76e8:	318000cc 	andi	r6,r6,3
    76ec:	21000044 	addi	r4,r4,1
    76f0:	2109883a 	add	r4,r4,r4
    76f4:	2109883a 	add	r4,r4,r4
    76f8:	1907883a 	add	r3,r3,r4
    76fc:	290b883a 	add	r5,r5,r4
    7700:	30000626 	beq	r6,zero,771c <memcpy+0x11c>
    7704:	198d883a 	add	r6,r3,r6
    7708:	29c00003 	ldbu	r7,0(r5)
    770c:	18c00044 	addi	r3,r3,1
    7710:	29400044 	addi	r5,r5,1
    7714:	19ffffc5 	stb	r7,-1(r3)
    7718:	19bffb1e 	bne	r3,r6,7708 <__alt_exception_stack_pointer+0xf8007708>
    771c:	dfc00217 	ldw	ra,8(sp)
    7720:	dc400117 	ldw	r17,4(sp)
    7724:	dc000017 	ldw	r16,0(sp)
    7728:	dec00304 	addi	sp,sp,12
    772c:	f800283a 	ret
    7730:	2007883a 	mov	r3,r4
    7734:	003ff206 	br	7700 <__alt_exception_stack_pointer+0xf8007700>
    7738:	2007883a 	mov	r3,r4
    773c:	003ff106 	br	7704 <__alt_exception_stack_pointer+0xf8007704>
    7740:	200d883a 	mov	r6,r4
    7744:	003fee06 	br	7700 <__alt_exception_stack_pointer+0xf8007700>

00007748 <_printf_r>:
    7748:	defffd04 	addi	sp,sp,-12
    774c:	2805883a 	mov	r2,r5
    7750:	dfc00015 	stw	ra,0(sp)
    7754:	d9800115 	stw	r6,4(sp)
    7758:	d9c00215 	stw	r7,8(sp)
    775c:	21400217 	ldw	r5,8(r4)
    7760:	d9c00104 	addi	r7,sp,4
    7764:	100d883a 	mov	r6,r2
    7768:	000797c0 	call	797c <___vfprintf_internal_r>
    776c:	dfc00017 	ldw	ra,0(sp)
    7770:	dec00304 	addi	sp,sp,12
    7774:	f800283a 	ret

00007778 <printf>:
    7778:	defffc04 	addi	sp,sp,-16
    777c:	dfc00015 	stw	ra,0(sp)
    7780:	d9400115 	stw	r5,4(sp)
    7784:	d9800215 	stw	r6,8(sp)
    7788:	d9c00315 	stw	r7,12(sp)
    778c:	00800074 	movhi	r2,1
    7790:	109cd104 	addi	r2,r2,29508
    7794:	10800017 	ldw	r2,0(r2)
    7798:	200b883a 	mov	r5,r4
    779c:	d9800104 	addi	r6,sp,4
    77a0:	11000217 	ldw	r4,8(r2)
    77a4:	0009c580 	call	9c58 <__vfprintf_internal>
    77a8:	dfc00017 	ldw	ra,0(sp)
    77ac:	dec00404 	addi	sp,sp,16
    77b0:	f800283a 	ret

000077b4 <_puts_r>:
    77b4:	defff604 	addi	sp,sp,-40
    77b8:	dc000715 	stw	r16,28(sp)
    77bc:	2021883a 	mov	r16,r4
    77c0:	2809883a 	mov	r4,r5
    77c4:	dc400815 	stw	r17,32(sp)
    77c8:	dfc00915 	stw	ra,36(sp)
    77cc:	2823883a 	mov	r17,r5
    77d0:	00078dc0 	call	78dc <strlen>
    77d4:	10c00044 	addi	r3,r2,1
    77d8:	d8800115 	stw	r2,4(sp)
    77dc:	00800074 	movhi	r2,1
    77e0:	10957204 	addi	r2,r2,21960
    77e4:	d8800215 	stw	r2,8(sp)
    77e8:	00800044 	movi	r2,1
    77ec:	d8800315 	stw	r2,12(sp)
    77f0:	00800084 	movi	r2,2
    77f4:	dc400015 	stw	r17,0(sp)
    77f8:	d8c00615 	stw	r3,24(sp)
    77fc:	dec00415 	stw	sp,16(sp)
    7800:	d8800515 	stw	r2,20(sp)
    7804:	80000226 	beq	r16,zero,7810 <_puts_r+0x5c>
    7808:	80800e17 	ldw	r2,56(r16)
    780c:	10001426 	beq	r2,zero,7860 <_puts_r+0xac>
    7810:	81400217 	ldw	r5,8(r16)
    7814:	2880030b 	ldhu	r2,12(r5)
    7818:	10c8000c 	andi	r3,r2,8192
    781c:	1800061e 	bne	r3,zero,7838 <_puts_r+0x84>
    7820:	29001917 	ldw	r4,100(r5)
    7824:	00f7ffc4 	movi	r3,-8193
    7828:	10880014 	ori	r2,r2,8192
    782c:	20c6703a 	and	r3,r4,r3
    7830:	2880030d 	sth	r2,12(r5)
    7834:	28c01915 	stw	r3,100(r5)
    7838:	d9800404 	addi	r6,sp,16
    783c:	8009883a 	mov	r4,r16
    7840:	000c1c00 	call	c1c0 <__sfvwrite_r>
    7844:	1000091e 	bne	r2,zero,786c <_puts_r+0xb8>
    7848:	00800284 	movi	r2,10
    784c:	dfc00917 	ldw	ra,36(sp)
    7850:	dc400817 	ldw	r17,32(sp)
    7854:	dc000717 	ldw	r16,28(sp)
    7858:	dec00a04 	addi	sp,sp,40
    785c:	f800283a 	ret
    7860:	8009883a 	mov	r4,r16
    7864:	000bd3c0 	call	bd3c <__sinit>
    7868:	003fe906 	br	7810 <__alt_exception_stack_pointer+0xf8007810>
    786c:	00bfffc4 	movi	r2,-1
    7870:	003ff606 	br	784c <__alt_exception_stack_pointer+0xf800784c>

00007874 <puts>:
    7874:	00800074 	movhi	r2,1
    7878:	109cd104 	addi	r2,r2,29508
    787c:	200b883a 	mov	r5,r4
    7880:	11000017 	ldw	r4,0(r2)
    7884:	00077b41 	jmpi	77b4 <_puts_r>

00007888 <_sbrk_r>:
    7888:	defffd04 	addi	sp,sp,-12
    788c:	dc000015 	stw	r16,0(sp)
    7890:	040000b4 	movhi	r16,2
    7894:	dc400115 	stw	r17,4(sp)
    7898:	8423cb04 	addi	r16,r16,-28884
    789c:	2023883a 	mov	r17,r4
    78a0:	2809883a 	mov	r4,r5
    78a4:	dfc00215 	stw	ra,8(sp)
    78a8:	80000015 	stw	zero,0(r16)
    78ac:	00125d00 	call	125d0 <sbrk>
    78b0:	00ffffc4 	movi	r3,-1
    78b4:	10c00526 	beq	r2,r3,78cc <_sbrk_r+0x44>
    78b8:	dfc00217 	ldw	ra,8(sp)
    78bc:	dc400117 	ldw	r17,4(sp)
    78c0:	dc000017 	ldw	r16,0(sp)
    78c4:	dec00304 	addi	sp,sp,12
    78c8:	f800283a 	ret
    78cc:	80c00017 	ldw	r3,0(r16)
    78d0:	183ff926 	beq	r3,zero,78b8 <__alt_exception_stack_pointer+0xf80078b8>
    78d4:	88c00015 	stw	r3,0(r17)
    78d8:	003ff706 	br	78b8 <__alt_exception_stack_pointer+0xf80078b8>

000078dc <strlen>:
    78dc:	208000cc 	andi	r2,r4,3
    78e0:	10002026 	beq	r2,zero,7964 <strlen+0x88>
    78e4:	20800007 	ldb	r2,0(r4)
    78e8:	10002026 	beq	r2,zero,796c <strlen+0x90>
    78ec:	2005883a 	mov	r2,r4
    78f0:	00000206 	br	78fc <strlen+0x20>
    78f4:	10c00007 	ldb	r3,0(r2)
    78f8:	18001826 	beq	r3,zero,795c <strlen+0x80>
    78fc:	10800044 	addi	r2,r2,1
    7900:	10c000cc 	andi	r3,r2,3
    7904:	183ffb1e 	bne	r3,zero,78f4 <__alt_exception_stack_pointer+0xf80078f4>
    7908:	10c00017 	ldw	r3,0(r2)
    790c:	01ffbff4 	movhi	r7,65279
    7910:	39ffbfc4 	addi	r7,r7,-257
    7914:	00ca303a 	nor	r5,zero,r3
    7918:	01a02074 	movhi	r6,32897
    791c:	19c7883a 	add	r3,r3,r7
    7920:	31a02004 	addi	r6,r6,-32640
    7924:	1946703a 	and	r3,r3,r5
    7928:	1986703a 	and	r3,r3,r6
    792c:	1800091e 	bne	r3,zero,7954 <strlen+0x78>
    7930:	10800104 	addi	r2,r2,4
    7934:	10c00017 	ldw	r3,0(r2)
    7938:	19cb883a 	add	r5,r3,r7
    793c:	00c6303a 	nor	r3,zero,r3
    7940:	28c6703a 	and	r3,r5,r3
    7944:	1986703a 	and	r3,r3,r6
    7948:	183ff926 	beq	r3,zero,7930 <__alt_exception_stack_pointer+0xf8007930>
    794c:	00000106 	br	7954 <strlen+0x78>
    7950:	10800044 	addi	r2,r2,1
    7954:	10c00007 	ldb	r3,0(r2)
    7958:	183ffd1e 	bne	r3,zero,7950 <__alt_exception_stack_pointer+0xf8007950>
    795c:	1105c83a 	sub	r2,r2,r4
    7960:	f800283a 	ret
    7964:	2005883a 	mov	r2,r4
    7968:	003fe706 	br	7908 <__alt_exception_stack_pointer+0xf8007908>
    796c:	0005883a 	mov	r2,zero
    7970:	f800283a 	ret

00007974 <_times_r>:
    7974:	2809883a 	mov	r4,r5
    7978:	00126bc1 	jmpi	126bc <times>

0000797c <___vfprintf_internal_r>:
    797c:	deffb804 	addi	sp,sp,-288
    7980:	dfc04715 	stw	ra,284(sp)
    7984:	ddc04515 	stw	r23,276(sp)
    7988:	dd404315 	stw	r21,268(sp)
    798c:	d9002d15 	stw	r4,180(sp)
    7990:	282f883a 	mov	r23,r5
    7994:	302b883a 	mov	r21,r6
    7998:	d9c02e15 	stw	r7,184(sp)
    799c:	df004615 	stw	fp,280(sp)
    79a0:	dd804415 	stw	r22,272(sp)
    79a4:	dd004215 	stw	r20,264(sp)
    79a8:	dcc04115 	stw	r19,260(sp)
    79ac:	dc804015 	stw	r18,256(sp)
    79b0:	dc403f15 	stw	r17,252(sp)
    79b4:	dc003e15 	stw	r16,248(sp)
    79b8:	000c8bc0 	call	c8bc <_localeconv_r>
    79bc:	10800017 	ldw	r2,0(r2)
    79c0:	1009883a 	mov	r4,r2
    79c4:	d8803415 	stw	r2,208(sp)
    79c8:	00078dc0 	call	78dc <strlen>
    79cc:	d8803715 	stw	r2,220(sp)
    79d0:	d8802d17 	ldw	r2,180(sp)
    79d4:	10000226 	beq	r2,zero,79e0 <___vfprintf_internal_r+0x64>
    79d8:	10800e17 	ldw	r2,56(r2)
    79dc:	1000fb26 	beq	r2,zero,7dcc <___vfprintf_internal_r+0x450>
    79e0:	b880030b 	ldhu	r2,12(r23)
    79e4:	10c8000c 	andi	r3,r2,8192
    79e8:	1800061e 	bne	r3,zero,7a04 <___vfprintf_internal_r+0x88>
    79ec:	b9001917 	ldw	r4,100(r23)
    79f0:	00f7ffc4 	movi	r3,-8193
    79f4:	10880014 	ori	r2,r2,8192
    79f8:	20c6703a 	and	r3,r4,r3
    79fc:	b880030d 	sth	r2,12(r23)
    7a00:	b8c01915 	stw	r3,100(r23)
    7a04:	10c0020c 	andi	r3,r2,8
    7a08:	1800c326 	beq	r3,zero,7d18 <___vfprintf_internal_r+0x39c>
    7a0c:	b8c00417 	ldw	r3,16(r23)
    7a10:	1800c126 	beq	r3,zero,7d18 <___vfprintf_internal_r+0x39c>
    7a14:	1080068c 	andi	r2,r2,26
    7a18:	00c00284 	movi	r3,10
    7a1c:	10c0c626 	beq	r2,r3,7d38 <___vfprintf_internal_r+0x3bc>
    7a20:	d8c00404 	addi	r3,sp,16
    7a24:	05000074 	movhi	r20,1
    7a28:	d9001e04 	addi	r4,sp,120
    7a2c:	a5158384 	addi	r20,r20,22030
    7a30:	d8c01e15 	stw	r3,120(sp)
    7a34:	d8002015 	stw	zero,128(sp)
    7a38:	d8001f15 	stw	zero,124(sp)
    7a3c:	d8003315 	stw	zero,204(sp)
    7a40:	d8003615 	stw	zero,216(sp)
    7a44:	d8003815 	stw	zero,224(sp)
    7a48:	1811883a 	mov	r8,r3
    7a4c:	d8003915 	stw	zero,228(sp)
    7a50:	d8003a15 	stw	zero,232(sp)
    7a54:	d8002f15 	stw	zero,188(sp)
    7a58:	d9002815 	stw	r4,160(sp)
    7a5c:	a8800007 	ldb	r2,0(r21)
    7a60:	10028b26 	beq	r2,zero,8490 <___vfprintf_internal_r+0xb14>
    7a64:	00c00944 	movi	r3,37
    7a68:	a823883a 	mov	r17,r21
    7a6c:	10c0021e 	bne	r2,r3,7a78 <___vfprintf_internal_r+0xfc>
    7a70:	00001406 	br	7ac4 <___vfprintf_internal_r+0x148>
    7a74:	10c00326 	beq	r2,r3,7a84 <___vfprintf_internal_r+0x108>
    7a78:	8c400044 	addi	r17,r17,1
    7a7c:	88800007 	ldb	r2,0(r17)
    7a80:	103ffc1e 	bne	r2,zero,7a74 <__alt_exception_stack_pointer+0xf8007a74>
    7a84:	8d61c83a 	sub	r16,r17,r21
    7a88:	80000e26 	beq	r16,zero,7ac4 <___vfprintf_internal_r+0x148>
    7a8c:	d8c02017 	ldw	r3,128(sp)
    7a90:	d8801f17 	ldw	r2,124(sp)
    7a94:	45400015 	stw	r21,0(r8)
    7a98:	1c07883a 	add	r3,r3,r16
    7a9c:	10800044 	addi	r2,r2,1
    7aa0:	d8c02015 	stw	r3,128(sp)
    7aa4:	44000115 	stw	r16,4(r8)
    7aa8:	d8801f15 	stw	r2,124(sp)
    7aac:	00c001c4 	movi	r3,7
    7ab0:	1880a916 	blt	r3,r2,7d58 <___vfprintf_internal_r+0x3dc>
    7ab4:	42000204 	addi	r8,r8,8
    7ab8:	d9402f17 	ldw	r5,188(sp)
    7abc:	2c0b883a 	add	r5,r5,r16
    7ac0:	d9402f15 	stw	r5,188(sp)
    7ac4:	88800007 	ldb	r2,0(r17)
    7ac8:	1000aa26 	beq	r2,zero,7d74 <___vfprintf_internal_r+0x3f8>
    7acc:	8d400044 	addi	r21,r17,1
    7ad0:	8c400047 	ldb	r17,1(r17)
    7ad4:	0021883a 	mov	r16,zero
    7ad8:	00bfffc4 	movi	r2,-1
    7adc:	0025883a 	mov	r18,zero
    7ae0:	dc002905 	stb	r16,164(sp)
    7ae4:	d8002785 	stb	zero,158(sp)
    7ae8:	d8002b05 	stb	zero,172(sp)
    7aec:	d8802a15 	stw	r2,168(sp)
    7af0:	d8003115 	stw	zero,196(sp)
    7af4:	04c01604 	movi	r19,88
    7af8:	05800244 	movi	r22,9
    7afc:	9021883a 	mov	r16,r18
    7b00:	4039883a 	mov	fp,r8
    7b04:	ad400044 	addi	r21,r21,1
    7b08:	88bff804 	addi	r2,r17,-32
    7b0c:	98833236 	bltu	r19,r2,87d8 <___vfprintf_internal_r+0xe5c>
    7b10:	100490ba 	slli	r2,r2,2
    7b14:	00c00034 	movhi	r3,0
    7b18:	18deca04 	addi	r3,r3,31528
    7b1c:	10c5883a 	add	r2,r2,r3
    7b20:	10800017 	ldw	r2,0(r2)
    7b24:	1000683a 	jmp	r2
    7b28:	000086d0 	cmplti	zero,zero,539
    7b2c:	000087d8 	cmpnei	zero,zero,543
    7b30:	000087d8 	cmpnei	zero,zero,543
    7b34:	000086f0 	cmpltui	zero,zero,539
    7b38:	000087d8 	cmpnei	zero,zero,543
    7b3c:	000087d8 	cmpnei	zero,zero,543
    7b40:	000087d8 	cmpnei	zero,zero,543
    7b44:	000087d8 	cmpnei	zero,zero,543
    7b48:	000087d8 	cmpnei	zero,zero,543
    7b4c:	000087d8 	cmpnei	zero,zero,543
    7b50:	00007dd8 	cmpnei	zero,zero,503
    7b54:	000085e0 	cmpeqi	zero,zero,535
    7b58:	000087d8 	cmpnei	zero,zero,543
    7b5c:	00007c9c 	xori	zero,zero,498
    7b60:	00007dfc 	xorhi	zero,zero,503
    7b64:	000087d8 	cmpnei	zero,zero,543
    7b68:	00007e4c 	andi	zero,zero,505
    7b6c:	00007e58 	cmpnei	zero,zero,505
    7b70:	00007e58 	cmpnei	zero,zero,505
    7b74:	00007e58 	cmpnei	zero,zero,505
    7b78:	00007e58 	cmpnei	zero,zero,505
    7b7c:	00007e58 	cmpnei	zero,zero,505
    7b80:	00007e58 	cmpnei	zero,zero,505
    7b84:	00007e58 	cmpnei	zero,zero,505
    7b88:	00007e58 	cmpnei	zero,zero,505
    7b8c:	00007e58 	cmpnei	zero,zero,505
    7b90:	000087d8 	cmpnei	zero,zero,543
    7b94:	000087d8 	cmpnei	zero,zero,543
    7b98:	000087d8 	cmpnei	zero,zero,543
    7b9c:	000087d8 	cmpnei	zero,zero,543
    7ba0:	000087d8 	cmpnei	zero,zero,543
    7ba4:	000087d8 	cmpnei	zero,zero,543
    7ba8:	000087d8 	cmpnei	zero,zero,543
    7bac:	000087d8 	cmpnei	zero,zero,543
    7bb0:	000087d8 	cmpnei	zero,zero,543
    7bb4:	000087d8 	cmpnei	zero,zero,543
    7bb8:	00007e94 	movui	zero,506
    7bbc:	00007f5c 	xori	zero,zero,509
    7bc0:	000087d8 	cmpnei	zero,zero,543
    7bc4:	00007f5c 	xori	zero,zero,509
    7bc8:	000087d8 	cmpnei	zero,zero,543
    7bcc:	000087d8 	cmpnei	zero,zero,543
    7bd0:	000087d8 	cmpnei	zero,zero,543
    7bd4:	000087d8 	cmpnei	zero,zero,543
    7bd8:	00008008 	cmpgei	zero,zero,512
    7bdc:	000087d8 	cmpnei	zero,zero,543
    7be0:	000087d8 	cmpnei	zero,zero,543
    7be4:	00008014 	movui	zero,512
    7be8:	000087d8 	cmpnei	zero,zero,543
    7bec:	000087d8 	cmpnei	zero,zero,543
    7bf0:	000087d8 	cmpnei	zero,zero,543
    7bf4:	000087d8 	cmpnei	zero,zero,543
    7bf8:	000087d8 	cmpnei	zero,zero,543
    7bfc:	00008498 	cmpnei	zero,zero,530
    7c00:	000087d8 	cmpnei	zero,zero,543
    7c04:	000087d8 	cmpnei	zero,zero,543
    7c08:	00008504 	movi	zero,532
    7c0c:	000087d8 	cmpnei	zero,zero,543
    7c10:	000087d8 	cmpnei	zero,zero,543
    7c14:	000087d8 	cmpnei	zero,zero,543
    7c18:	000087d8 	cmpnei	zero,zero,543
    7c1c:	000087d8 	cmpnei	zero,zero,543
    7c20:	000087d8 	cmpnei	zero,zero,543
    7c24:	000087d8 	cmpnei	zero,zero,543
    7c28:	000087d8 	cmpnei	zero,zero,543
    7c2c:	000087d8 	cmpnei	zero,zero,543
    7c30:	000087d8 	cmpnei	zero,zero,543
    7c34:	0000877c 	xorhi	zero,zero,541
    7c38:	000086fc 	xorhi	zero,zero,539
    7c3c:	00007f5c 	xori	zero,zero,509
    7c40:	00007f5c 	xori	zero,zero,509
    7c44:	00007f5c 	xori	zero,zero,509
    7c48:	0000871c 	xori	zero,zero,540
    7c4c:	000086fc 	xorhi	zero,zero,539
    7c50:	000087d8 	cmpnei	zero,zero,543
    7c54:	000087d8 	cmpnei	zero,zero,543
    7c58:	00008728 	cmpgeui	zero,zero,540
    7c5c:	000087d8 	cmpnei	zero,zero,543
    7c60:	0000873c 	xorhi	zero,zero,540
    7c64:	000085c0 	call	85c <init_keyboard+0x12c>
    7c68:	00007ca8 	cmpgeui	zero,zero,498
    7c6c:	000085f8 	rdprs	zero,zero,535
    7c70:	000087d8 	cmpnei	zero,zero,543
    7c74:	00008604 	movi	zero,536
    7c78:	000087d8 	cmpnei	zero,zero,543
    7c7c:	00008668 	cmpgeui	zero,zero,537
    7c80:	000087d8 	cmpnei	zero,zero,543
    7c84:	000087d8 	cmpnei	zero,zero,543
    7c88:	00008688 	cmpgei	zero,zero,538
    7c8c:	d8c03117 	ldw	r3,196(sp)
    7c90:	d8802e15 	stw	r2,184(sp)
    7c94:	00c7c83a 	sub	r3,zero,r3
    7c98:	d8c03115 	stw	r3,196(sp)
    7c9c:	84000114 	ori	r16,r16,4
    7ca0:	ac400007 	ldb	r17,0(r21)
    7ca4:	003f9706 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    7ca8:	00800c04 	movi	r2,48
    7cac:	d8802705 	stb	r2,156(sp)
    7cb0:	00801e04 	movi	r2,120
    7cb4:	d8802745 	stb	r2,157(sp)
    7cb8:	d9002a17 	ldw	r4,168(sp)
    7cbc:	d8802e17 	ldw	r2,184(sp)
    7cc0:	d8002785 	stb	zero,158(sp)
    7cc4:	e011883a 	mov	r8,fp
    7cc8:	10c00104 	addi	r3,r2,4
    7ccc:	14c00017 	ldw	r19,0(r2)
    7cd0:	002d883a 	mov	r22,zero
    7cd4:	80800094 	ori	r2,r16,2
    7cd8:	2002ca16 	blt	r4,zero,8804 <___vfprintf_internal_r+0xe88>
    7cdc:	00bfdfc4 	movi	r2,-129
    7ce0:	80a4703a 	and	r18,r16,r2
    7ce4:	d8c02e15 	stw	r3,184(sp)
    7ce8:	94800094 	ori	r18,r18,2
    7cec:	9802b41e 	bne	r19,zero,87c0 <___vfprintf_internal_r+0xe44>
    7cf0:	01400074 	movhi	r5,1
    7cf4:	29557c04 	addi	r5,r5,22000
    7cf8:	d9403915 	stw	r5,228(sp)
    7cfc:	04401e04 	movi	r17,120
    7d00:	d8802a17 	ldw	r2,168(sp)
    7d04:	0039883a 	mov	fp,zero
    7d08:	1001fa26 	beq	r2,zero,84f4 <___vfprintf_internal_r+0xb78>
    7d0c:	0027883a 	mov	r19,zero
    7d10:	002d883a 	mov	r22,zero
    7d14:	00021906 	br	857c <___vfprintf_internal_r+0xc00>
    7d18:	d9002d17 	ldw	r4,180(sp)
    7d1c:	b80b883a 	mov	r5,r23
    7d20:	0009d300 	call	9d30 <__swsetup_r>
    7d24:	1005dc1e 	bne	r2,zero,9498 <___vfprintf_internal_r+0x1b1c>
    7d28:	b880030b 	ldhu	r2,12(r23)
    7d2c:	00c00284 	movi	r3,10
    7d30:	1080068c 	andi	r2,r2,26
    7d34:	10ff3a1e 	bne	r2,r3,7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7d38:	b880038f 	ldh	r2,14(r23)
    7d3c:	103f3816 	blt	r2,zero,7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7d40:	d9c02e17 	ldw	r7,184(sp)
    7d44:	d9002d17 	ldw	r4,180(sp)
    7d48:	a80d883a 	mov	r6,r21
    7d4c:	b80b883a 	mov	r5,r23
    7d50:	0009c740 	call	9c74 <__sbprintf>
    7d54:	00001106 	br	7d9c <___vfprintf_internal_r+0x420>
    7d58:	d9002d17 	ldw	r4,180(sp)
    7d5c:	d9801e04 	addi	r6,sp,120
    7d60:	b80b883a 	mov	r5,r23
    7d64:	000e7b40 	call	e7b4 <__sprint_r>
    7d68:	1000081e 	bne	r2,zero,7d8c <___vfprintf_internal_r+0x410>
    7d6c:	da000404 	addi	r8,sp,16
    7d70:	003f5106 	br	7ab8 <__alt_exception_stack_pointer+0xf8007ab8>
    7d74:	d8802017 	ldw	r2,128(sp)
    7d78:	10000426 	beq	r2,zero,7d8c <___vfprintf_internal_r+0x410>
    7d7c:	d9002d17 	ldw	r4,180(sp)
    7d80:	d9801e04 	addi	r6,sp,120
    7d84:	b80b883a 	mov	r5,r23
    7d88:	000e7b40 	call	e7b4 <__sprint_r>
    7d8c:	b880030b 	ldhu	r2,12(r23)
    7d90:	1080100c 	andi	r2,r2,64
    7d94:	1005c01e 	bne	r2,zero,9498 <___vfprintf_internal_r+0x1b1c>
    7d98:	d8802f17 	ldw	r2,188(sp)
    7d9c:	dfc04717 	ldw	ra,284(sp)
    7da0:	df004617 	ldw	fp,280(sp)
    7da4:	ddc04517 	ldw	r23,276(sp)
    7da8:	dd804417 	ldw	r22,272(sp)
    7dac:	dd404317 	ldw	r21,268(sp)
    7db0:	dd004217 	ldw	r20,264(sp)
    7db4:	dcc04117 	ldw	r19,260(sp)
    7db8:	dc804017 	ldw	r18,256(sp)
    7dbc:	dc403f17 	ldw	r17,252(sp)
    7dc0:	dc003e17 	ldw	r16,248(sp)
    7dc4:	dec04804 	addi	sp,sp,288
    7dc8:	f800283a 	ret
    7dcc:	d9002d17 	ldw	r4,180(sp)
    7dd0:	000bd3c0 	call	bd3c <__sinit>
    7dd4:	003f0206 	br	79e0 <__alt_exception_stack_pointer+0xf80079e0>
    7dd8:	d9002e17 	ldw	r4,184(sp)
    7ddc:	d9402e17 	ldw	r5,184(sp)
    7de0:	21000017 	ldw	r4,0(r4)
    7de4:	28800104 	addi	r2,r5,4
    7de8:	d9003115 	stw	r4,196(sp)
    7dec:	203fa716 	blt	r4,zero,7c8c <__alt_exception_stack_pointer+0xf8007c8c>
    7df0:	d8802e15 	stw	r2,184(sp)
    7df4:	ac400007 	ldb	r17,0(r21)
    7df8:	003f4206 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    7dfc:	ac400007 	ldb	r17,0(r21)
    7e00:	01000a84 	movi	r4,42
    7e04:	a8c00044 	addi	r3,r21,1
    7e08:	89075826 	beq	r17,r4,9b6c <___vfprintf_internal_r+0x21f0>
    7e0c:	8cbff404 	addi	r18,r17,-48
    7e10:	b486ae36 	bltu	r22,r18,98cc <___vfprintf_internal_r+0x1f50>
    7e14:	0009883a 	mov	r4,zero
    7e18:	1823883a 	mov	r17,r3
    7e1c:	01400284 	movi	r5,10
    7e20:	00050200 	call	5020 <__mulsi3>
    7e24:	88c00007 	ldb	r3,0(r17)
    7e28:	1489883a 	add	r4,r2,r18
    7e2c:	8d400044 	addi	r21,r17,1
    7e30:	1cbff404 	addi	r18,r3,-48
    7e34:	a823883a 	mov	r17,r21
    7e38:	b4bff82e 	bgeu	r22,r18,7e1c <__alt_exception_stack_pointer+0xf8007e1c>
    7e3c:	1823883a 	mov	r17,r3
    7e40:	2005f616 	blt	r4,zero,961c <___vfprintf_internal_r+0x1ca0>
    7e44:	d9002a15 	stw	r4,168(sp)
    7e48:	003f2f06 	br	7b08 <__alt_exception_stack_pointer+0xf8007b08>
    7e4c:	84002014 	ori	r16,r16,128
    7e50:	ac400007 	ldb	r17,0(r21)
    7e54:	003f2b06 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    7e58:	8cbff404 	addi	r18,r17,-48
    7e5c:	d8003115 	stw	zero,196(sp)
    7e60:	0009883a 	mov	r4,zero
    7e64:	a823883a 	mov	r17,r21
    7e68:	01400284 	movi	r5,10
    7e6c:	00050200 	call	5020 <__mulsi3>
    7e70:	88c00007 	ldb	r3,0(r17)
    7e74:	9089883a 	add	r4,r18,r2
    7e78:	ad400044 	addi	r21,r21,1
    7e7c:	1cbff404 	addi	r18,r3,-48
    7e80:	a823883a 	mov	r17,r21
    7e84:	b4bff82e 	bgeu	r22,r18,7e68 <__alt_exception_stack_pointer+0xf8007e68>
    7e88:	1823883a 	mov	r17,r3
    7e8c:	d9003115 	stw	r4,196(sp)
    7e90:	003f1d06 	br	7b08 <__alt_exception_stack_pointer+0xf8007b08>
    7e94:	8025883a 	mov	r18,r16
    7e98:	dc002903 	ldbu	r16,164(sp)
    7e9c:	e011883a 	mov	r8,fp
    7ea0:	84003fcc 	andi	r16,r16,255
    7ea4:	8007531e 	bne	r16,zero,9bf4 <___vfprintf_internal_r+0x2278>
    7ea8:	94800414 	ori	r18,r18,16
    7eac:	9080080c 	andi	r2,r18,32
    7eb0:	1003a326 	beq	r2,zero,8d40 <___vfprintf_internal_r+0x13c4>
    7eb4:	d9002e17 	ldw	r4,184(sp)
    7eb8:	20800117 	ldw	r2,4(r4)
    7ebc:	24c00017 	ldw	r19,0(r4)
    7ec0:	21000204 	addi	r4,r4,8
    7ec4:	d9002e15 	stw	r4,184(sp)
    7ec8:	102d883a 	mov	r22,r2
    7ecc:	10047316 	blt	r2,zero,909c <___vfprintf_internal_r+0x1720>
    7ed0:	d9002a17 	ldw	r4,168(sp)
    7ed4:	df002783 	ldbu	fp,158(sp)
    7ed8:	2003e416 	blt	r4,zero,8e6c <___vfprintf_internal_r+0x14f0>
    7edc:	00ffdfc4 	movi	r3,-129
    7ee0:	9d84b03a 	or	r2,r19,r22
    7ee4:	90e4703a 	and	r18,r18,r3
    7ee8:	10018026 	beq	r2,zero,84ec <___vfprintf_internal_r+0xb70>
    7eec:	b003ab26 	beq	r22,zero,8d9c <___vfprintf_internal_r+0x1420>
    7ef0:	dc402915 	stw	r17,164(sp)
    7ef4:	dc001e04 	addi	r16,sp,120
    7ef8:	b023883a 	mov	r17,r22
    7efc:	402d883a 	mov	r22,r8
    7f00:	9809883a 	mov	r4,r19
    7f04:	880b883a 	mov	r5,r17
    7f08:	01800284 	movi	r6,10
    7f0c:	000f883a 	mov	r7,zero
    7f10:	0010cf80 	call	10cf8 <__umoddi3>
    7f14:	10800c04 	addi	r2,r2,48
    7f18:	843fffc4 	addi	r16,r16,-1
    7f1c:	9809883a 	mov	r4,r19
    7f20:	880b883a 	mov	r5,r17
    7f24:	80800005 	stb	r2,0(r16)
    7f28:	01800284 	movi	r6,10
    7f2c:	000f883a 	mov	r7,zero
    7f30:	00106fc0 	call	106fc <__udivdi3>
    7f34:	1027883a 	mov	r19,r2
    7f38:	10c4b03a 	or	r2,r2,r3
    7f3c:	1823883a 	mov	r17,r3
    7f40:	103fef1e 	bne	r2,zero,7f00 <__alt_exception_stack_pointer+0xf8007f00>
    7f44:	d8c02817 	ldw	r3,160(sp)
    7f48:	dc402917 	ldw	r17,164(sp)
    7f4c:	b011883a 	mov	r8,r22
    7f50:	1c07c83a 	sub	r3,r3,r16
    7f54:	d8c02b15 	stw	r3,172(sp)
    7f58:	00005f06 	br	80d8 <___vfprintf_internal_r+0x75c>
    7f5c:	8025883a 	mov	r18,r16
    7f60:	dc002903 	ldbu	r16,164(sp)
    7f64:	e011883a 	mov	r8,fp
    7f68:	84003fcc 	andi	r16,r16,255
    7f6c:	80071e1e 	bne	r16,zero,9be8 <___vfprintf_internal_r+0x226c>
    7f70:	9080020c 	andi	r2,r18,8
    7f74:	1004af26 	beq	r2,zero,9234 <___vfprintf_internal_r+0x18b8>
    7f78:	d9002e17 	ldw	r4,184(sp)
    7f7c:	d9402e17 	ldw	r5,184(sp)
    7f80:	d8802e17 	ldw	r2,184(sp)
    7f84:	21000017 	ldw	r4,0(r4)
    7f88:	29400117 	ldw	r5,4(r5)
    7f8c:	10800204 	addi	r2,r2,8
    7f90:	d9003615 	stw	r4,216(sp)
    7f94:	d9403815 	stw	r5,224(sp)
    7f98:	d8802e15 	stw	r2,184(sp)
    7f9c:	d9003617 	ldw	r4,216(sp)
    7fa0:	d9403817 	ldw	r5,224(sp)
    7fa4:	da003d15 	stw	r8,244(sp)
    7fa8:	04000044 	movi	r16,1
    7fac:	000e42c0 	call	e42c <__fpclassifyd>
    7fb0:	da003d17 	ldw	r8,244(sp)
    7fb4:	1404441e 	bne	r2,r16,90c8 <___vfprintf_internal_r+0x174c>
    7fb8:	d9003617 	ldw	r4,216(sp)
    7fbc:	d9403817 	ldw	r5,224(sp)
    7fc0:	000d883a 	mov	r6,zero
    7fc4:	000f883a 	mov	r7,zero
    7fc8:	0011c8c0 	call	11c8c <__ledf2>
    7fcc:	da003d17 	ldw	r8,244(sp)
    7fd0:	1005e316 	blt	r2,zero,9760 <___vfprintf_internal_r+0x1de4>
    7fd4:	df002783 	ldbu	fp,158(sp)
    7fd8:	008011c4 	movi	r2,71
    7fdc:	1445580e 	bge	r2,r17,9540 <___vfprintf_internal_r+0x1bc4>
    7fe0:	04000074 	movhi	r16,1
    7fe4:	84157404 	addi	r16,r16,21968
    7fe8:	00c000c4 	movi	r3,3
    7fec:	00bfdfc4 	movi	r2,-129
    7ff0:	d8c02915 	stw	r3,164(sp)
    7ff4:	90a4703a 	and	r18,r18,r2
    7ff8:	d8c02b15 	stw	r3,172(sp)
    7ffc:	d8002a15 	stw	zero,168(sp)
    8000:	d8003215 	stw	zero,200(sp)
    8004:	00003a06 	br	80f0 <___vfprintf_internal_r+0x774>
    8008:	84000214 	ori	r16,r16,8
    800c:	ac400007 	ldb	r17,0(r21)
    8010:	003ebc06 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    8014:	8025883a 	mov	r18,r16
    8018:	dc002903 	ldbu	r16,164(sp)
    801c:	e011883a 	mov	r8,fp
    8020:	84003fcc 	andi	r16,r16,255
    8024:	8007001e 	bne	r16,zero,9c28 <___vfprintf_internal_r+0x22ac>
    8028:	94800414 	ori	r18,r18,16
    802c:	9080080c 	andi	r2,r18,32
    8030:	1002fa26 	beq	r2,zero,8c1c <___vfprintf_internal_r+0x12a0>
    8034:	d9002e17 	ldw	r4,184(sp)
    8038:	d9402a17 	ldw	r5,168(sp)
    803c:	d8002785 	stb	zero,158(sp)
    8040:	20800204 	addi	r2,r4,8
    8044:	24c00017 	ldw	r19,0(r4)
    8048:	25800117 	ldw	r22,4(r4)
    804c:	2804b116 	blt	r5,zero,9314 <___vfprintf_internal_r+0x1998>
    8050:	013fdfc4 	movi	r4,-129
    8054:	9d86b03a 	or	r3,r19,r22
    8058:	d8802e15 	stw	r2,184(sp)
    805c:	9124703a 	and	r18,r18,r4
    8060:	1802fb1e 	bne	r3,zero,8c50 <___vfprintf_internal_r+0x12d4>
    8064:	d8c02a17 	ldw	r3,168(sp)
    8068:	0039883a 	mov	fp,zero
    806c:	1805e526 	beq	r3,zero,9804 <___vfprintf_internal_r+0x1e88>
    8070:	0027883a 	mov	r19,zero
    8074:	002d883a 	mov	r22,zero
    8078:	dc001e04 	addi	r16,sp,120
    807c:	9806d0fa 	srli	r3,r19,3
    8080:	b008977a 	slli	r4,r22,29
    8084:	b02cd0fa 	srli	r22,r22,3
    8088:	9cc001cc 	andi	r19,r19,7
    808c:	98800c04 	addi	r2,r19,48
    8090:	843fffc4 	addi	r16,r16,-1
    8094:	20e6b03a 	or	r19,r4,r3
    8098:	80800005 	stb	r2,0(r16)
    809c:	9d86b03a 	or	r3,r19,r22
    80a0:	183ff61e 	bne	r3,zero,807c <__alt_exception_stack_pointer+0xf800807c>
    80a4:	90c0004c 	andi	r3,r18,1
    80a8:	18014126 	beq	r3,zero,85b0 <___vfprintf_internal_r+0xc34>
    80ac:	10803fcc 	andi	r2,r2,255
    80b0:	1080201c 	xori	r2,r2,128
    80b4:	10bfe004 	addi	r2,r2,-128
    80b8:	00c00c04 	movi	r3,48
    80bc:	10c13c26 	beq	r2,r3,85b0 <___vfprintf_internal_r+0xc34>
    80c0:	80ffffc5 	stb	r3,-1(r16)
    80c4:	d8c02817 	ldw	r3,160(sp)
    80c8:	80bfffc4 	addi	r2,r16,-1
    80cc:	1021883a 	mov	r16,r2
    80d0:	1887c83a 	sub	r3,r3,r2
    80d4:	d8c02b15 	stw	r3,172(sp)
    80d8:	d8802b17 	ldw	r2,172(sp)
    80dc:	d9002a17 	ldw	r4,168(sp)
    80e0:	1100010e 	bge	r2,r4,80e8 <___vfprintf_internal_r+0x76c>
    80e4:	2005883a 	mov	r2,r4
    80e8:	d8802915 	stw	r2,164(sp)
    80ec:	d8003215 	stw	zero,200(sp)
    80f0:	e7003fcc 	andi	fp,fp,255
    80f4:	e700201c 	xori	fp,fp,128
    80f8:	e73fe004 	addi	fp,fp,-128
    80fc:	e0000326 	beq	fp,zero,810c <___vfprintf_internal_r+0x790>
    8100:	d8c02917 	ldw	r3,164(sp)
    8104:	18c00044 	addi	r3,r3,1
    8108:	d8c02915 	stw	r3,164(sp)
    810c:	90c0008c 	andi	r3,r18,2
    8110:	d8c02c15 	stw	r3,176(sp)
    8114:	18000326 	beq	r3,zero,8124 <___vfprintf_internal_r+0x7a8>
    8118:	d8c02917 	ldw	r3,164(sp)
    811c:	18c00084 	addi	r3,r3,2
    8120:	d8c02915 	stw	r3,164(sp)
    8124:	90c0210c 	andi	r3,r18,132
    8128:	d8c03015 	stw	r3,192(sp)
    812c:	1801c51e 	bne	r3,zero,8844 <___vfprintf_internal_r+0xec8>
    8130:	d9003117 	ldw	r4,196(sp)
    8134:	d8c02917 	ldw	r3,164(sp)
    8138:	20e7c83a 	sub	r19,r4,r3
    813c:	04c1c10e 	bge	zero,r19,8844 <___vfprintf_internal_r+0xec8>
    8140:	02400404 	movi	r9,16
    8144:	d8c02017 	ldw	r3,128(sp)
    8148:	d8801f17 	ldw	r2,124(sp)
    814c:	4cc52f0e 	bge	r9,r19,960c <___vfprintf_internal_r+0x1c90>
    8150:	01400074 	movhi	r5,1
    8154:	29558784 	addi	r5,r5,22046
    8158:	dc403b15 	stw	r17,236(sp)
    815c:	d9403515 	stw	r5,212(sp)
    8160:	9823883a 	mov	r17,r19
    8164:	482d883a 	mov	r22,r9
    8168:	9027883a 	mov	r19,r18
    816c:	070001c4 	movi	fp,7
    8170:	8025883a 	mov	r18,r16
    8174:	dc002d17 	ldw	r16,180(sp)
    8178:	00000306 	br	8188 <___vfprintf_internal_r+0x80c>
    817c:	8c7ffc04 	addi	r17,r17,-16
    8180:	42000204 	addi	r8,r8,8
    8184:	b440130e 	bge	r22,r17,81d4 <___vfprintf_internal_r+0x858>
    8188:	01000074 	movhi	r4,1
    818c:	18c00404 	addi	r3,r3,16
    8190:	10800044 	addi	r2,r2,1
    8194:	21158784 	addi	r4,r4,22046
    8198:	41000015 	stw	r4,0(r8)
    819c:	45800115 	stw	r22,4(r8)
    81a0:	d8c02015 	stw	r3,128(sp)
    81a4:	d8801f15 	stw	r2,124(sp)
    81a8:	e0bff40e 	bge	fp,r2,817c <__alt_exception_stack_pointer+0xf800817c>
    81ac:	d9801e04 	addi	r6,sp,120
    81b0:	b80b883a 	mov	r5,r23
    81b4:	8009883a 	mov	r4,r16
    81b8:	000e7b40 	call	e7b4 <__sprint_r>
    81bc:	103ef31e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    81c0:	8c7ffc04 	addi	r17,r17,-16
    81c4:	d8c02017 	ldw	r3,128(sp)
    81c8:	d8801f17 	ldw	r2,124(sp)
    81cc:	da000404 	addi	r8,sp,16
    81d0:	b47fed16 	blt	r22,r17,8188 <__alt_exception_stack_pointer+0xf8008188>
    81d4:	9021883a 	mov	r16,r18
    81d8:	9825883a 	mov	r18,r19
    81dc:	8827883a 	mov	r19,r17
    81e0:	dc403b17 	ldw	r17,236(sp)
    81e4:	d9403517 	ldw	r5,212(sp)
    81e8:	98c7883a 	add	r3,r19,r3
    81ec:	10800044 	addi	r2,r2,1
    81f0:	41400015 	stw	r5,0(r8)
    81f4:	44c00115 	stw	r19,4(r8)
    81f8:	d8c02015 	stw	r3,128(sp)
    81fc:	d8801f15 	stw	r2,124(sp)
    8200:	010001c4 	movi	r4,7
    8204:	2082c516 	blt	r4,r2,8d1c <___vfprintf_internal_r+0x13a0>
    8208:	df002787 	ldb	fp,158(sp)
    820c:	42000204 	addi	r8,r8,8
    8210:	e0000c26 	beq	fp,zero,8244 <___vfprintf_internal_r+0x8c8>
    8214:	d8801f17 	ldw	r2,124(sp)
    8218:	d9002784 	addi	r4,sp,158
    821c:	18c00044 	addi	r3,r3,1
    8220:	10800044 	addi	r2,r2,1
    8224:	41000015 	stw	r4,0(r8)
    8228:	01000044 	movi	r4,1
    822c:	41000115 	stw	r4,4(r8)
    8230:	d8c02015 	stw	r3,128(sp)
    8234:	d8801f15 	stw	r2,124(sp)
    8238:	010001c4 	movi	r4,7
    823c:	20825e16 	blt	r4,r2,8bb8 <___vfprintf_internal_r+0x123c>
    8240:	42000204 	addi	r8,r8,8
    8244:	d8802c17 	ldw	r2,176(sp)
    8248:	10000c26 	beq	r2,zero,827c <___vfprintf_internal_r+0x900>
    824c:	d8801f17 	ldw	r2,124(sp)
    8250:	d9002704 	addi	r4,sp,156
    8254:	18c00084 	addi	r3,r3,2
    8258:	10800044 	addi	r2,r2,1
    825c:	41000015 	stw	r4,0(r8)
    8260:	01000084 	movi	r4,2
    8264:	41000115 	stw	r4,4(r8)
    8268:	d8c02015 	stw	r3,128(sp)
    826c:	d8801f15 	stw	r2,124(sp)
    8270:	010001c4 	movi	r4,7
    8274:	20825816 	blt	r4,r2,8bd8 <___vfprintf_internal_r+0x125c>
    8278:	42000204 	addi	r8,r8,8
    827c:	d9003017 	ldw	r4,192(sp)
    8280:	00802004 	movi	r2,128
    8284:	2081bb26 	beq	r4,r2,8974 <___vfprintf_internal_r+0xff8>
    8288:	d9402a17 	ldw	r5,168(sp)
    828c:	d8802b17 	ldw	r2,172(sp)
    8290:	28adc83a 	sub	r22,r5,r2
    8294:	0580310e 	bge	zero,r22,835c <___vfprintf_internal_r+0x9e0>
    8298:	07000404 	movi	fp,16
    829c:	d8801f17 	ldw	r2,124(sp)
    82a0:	e584360e 	bge	fp,r22,937c <___vfprintf_internal_r+0x1a00>
    82a4:	01400074 	movhi	r5,1
    82a8:	29558384 	addi	r5,r5,22030
    82ac:	dc402a15 	stw	r17,168(sp)
    82b0:	d9402c15 	stw	r5,176(sp)
    82b4:	b023883a 	mov	r17,r22
    82b8:	04c001c4 	movi	r19,7
    82bc:	a82d883a 	mov	r22,r21
    82c0:	902b883a 	mov	r21,r18
    82c4:	8025883a 	mov	r18,r16
    82c8:	dc002d17 	ldw	r16,180(sp)
    82cc:	00000306 	br	82dc <___vfprintf_internal_r+0x960>
    82d0:	8c7ffc04 	addi	r17,r17,-16
    82d4:	42000204 	addi	r8,r8,8
    82d8:	e440110e 	bge	fp,r17,8320 <___vfprintf_internal_r+0x9a4>
    82dc:	18c00404 	addi	r3,r3,16
    82e0:	10800044 	addi	r2,r2,1
    82e4:	45000015 	stw	r20,0(r8)
    82e8:	47000115 	stw	fp,4(r8)
    82ec:	d8c02015 	stw	r3,128(sp)
    82f0:	d8801f15 	stw	r2,124(sp)
    82f4:	98bff60e 	bge	r19,r2,82d0 <__alt_exception_stack_pointer+0xf80082d0>
    82f8:	d9801e04 	addi	r6,sp,120
    82fc:	b80b883a 	mov	r5,r23
    8300:	8009883a 	mov	r4,r16
    8304:	000e7b40 	call	e7b4 <__sprint_r>
    8308:	103ea01e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    830c:	8c7ffc04 	addi	r17,r17,-16
    8310:	d8c02017 	ldw	r3,128(sp)
    8314:	d8801f17 	ldw	r2,124(sp)
    8318:	da000404 	addi	r8,sp,16
    831c:	e47fef16 	blt	fp,r17,82dc <__alt_exception_stack_pointer+0xf80082dc>
    8320:	9021883a 	mov	r16,r18
    8324:	a825883a 	mov	r18,r21
    8328:	b02b883a 	mov	r21,r22
    832c:	882d883a 	mov	r22,r17
    8330:	dc402a17 	ldw	r17,168(sp)
    8334:	d9002c17 	ldw	r4,176(sp)
    8338:	1d87883a 	add	r3,r3,r22
    833c:	10800044 	addi	r2,r2,1
    8340:	41000015 	stw	r4,0(r8)
    8344:	45800115 	stw	r22,4(r8)
    8348:	d8c02015 	stw	r3,128(sp)
    834c:	d8801f15 	stw	r2,124(sp)
    8350:	010001c4 	movi	r4,7
    8354:	20821016 	blt	r4,r2,8b98 <___vfprintf_internal_r+0x121c>
    8358:	42000204 	addi	r8,r8,8
    835c:	9080400c 	andi	r2,r18,256
    8360:	10013a1e 	bne	r2,zero,884c <___vfprintf_internal_r+0xed0>
    8364:	d9402b17 	ldw	r5,172(sp)
    8368:	d8801f17 	ldw	r2,124(sp)
    836c:	44000015 	stw	r16,0(r8)
    8370:	1947883a 	add	r3,r3,r5
    8374:	10800044 	addi	r2,r2,1
    8378:	41400115 	stw	r5,4(r8)
    837c:	d8c02015 	stw	r3,128(sp)
    8380:	d8801f15 	stw	r2,124(sp)
    8384:	010001c4 	movi	r4,7
    8388:	2081f516 	blt	r4,r2,8b60 <___vfprintf_internal_r+0x11e4>
    838c:	42000204 	addi	r8,r8,8
    8390:	9480010c 	andi	r18,r18,4
    8394:	90003226 	beq	r18,zero,8460 <___vfprintf_internal_r+0xae4>
    8398:	d9403117 	ldw	r5,196(sp)
    839c:	d8802917 	ldw	r2,164(sp)
    83a0:	28a1c83a 	sub	r16,r5,r2
    83a4:	04002e0e 	bge	zero,r16,8460 <___vfprintf_internal_r+0xae4>
    83a8:	04400404 	movi	r17,16
    83ac:	d8801f17 	ldw	r2,124(sp)
    83b0:	8c04c40e 	bge	r17,r16,96c4 <___vfprintf_internal_r+0x1d48>
    83b4:	01400074 	movhi	r5,1
    83b8:	29558784 	addi	r5,r5,22046
    83bc:	d9403515 	stw	r5,212(sp)
    83c0:	048001c4 	movi	r18,7
    83c4:	dcc02d17 	ldw	r19,180(sp)
    83c8:	00000306 	br	83d8 <___vfprintf_internal_r+0xa5c>
    83cc:	843ffc04 	addi	r16,r16,-16
    83d0:	42000204 	addi	r8,r8,8
    83d4:	8c00130e 	bge	r17,r16,8424 <___vfprintf_internal_r+0xaa8>
    83d8:	01000074 	movhi	r4,1
    83dc:	18c00404 	addi	r3,r3,16
    83e0:	10800044 	addi	r2,r2,1
    83e4:	21158784 	addi	r4,r4,22046
    83e8:	41000015 	stw	r4,0(r8)
    83ec:	44400115 	stw	r17,4(r8)
    83f0:	d8c02015 	stw	r3,128(sp)
    83f4:	d8801f15 	stw	r2,124(sp)
    83f8:	90bff40e 	bge	r18,r2,83cc <__alt_exception_stack_pointer+0xf80083cc>
    83fc:	d9801e04 	addi	r6,sp,120
    8400:	b80b883a 	mov	r5,r23
    8404:	9809883a 	mov	r4,r19
    8408:	000e7b40 	call	e7b4 <__sprint_r>
    840c:	103e5f1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8410:	843ffc04 	addi	r16,r16,-16
    8414:	d8c02017 	ldw	r3,128(sp)
    8418:	d8801f17 	ldw	r2,124(sp)
    841c:	da000404 	addi	r8,sp,16
    8420:	8c3fed16 	blt	r17,r16,83d8 <__alt_exception_stack_pointer+0xf80083d8>
    8424:	d9403517 	ldw	r5,212(sp)
    8428:	1c07883a 	add	r3,r3,r16
    842c:	10800044 	addi	r2,r2,1
    8430:	41400015 	stw	r5,0(r8)
    8434:	44000115 	stw	r16,4(r8)
    8438:	d8c02015 	stw	r3,128(sp)
    843c:	d8801f15 	stw	r2,124(sp)
    8440:	010001c4 	movi	r4,7
    8444:	2080060e 	bge	r4,r2,8460 <___vfprintf_internal_r+0xae4>
    8448:	d9002d17 	ldw	r4,180(sp)
    844c:	d9801e04 	addi	r6,sp,120
    8450:	b80b883a 	mov	r5,r23
    8454:	000e7b40 	call	e7b4 <__sprint_r>
    8458:	103e4c1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    845c:	d8c02017 	ldw	r3,128(sp)
    8460:	d8803117 	ldw	r2,196(sp)
    8464:	d9002917 	ldw	r4,164(sp)
    8468:	1100010e 	bge	r2,r4,8470 <___vfprintf_internal_r+0xaf4>
    846c:	2005883a 	mov	r2,r4
    8470:	d9402f17 	ldw	r5,188(sp)
    8474:	288b883a 	add	r5,r5,r2
    8478:	d9402f15 	stw	r5,188(sp)
    847c:	1801c01e 	bne	r3,zero,8b80 <___vfprintf_internal_r+0x1204>
    8480:	a8800007 	ldb	r2,0(r21)
    8484:	d8001f15 	stw	zero,124(sp)
    8488:	da000404 	addi	r8,sp,16
    848c:	103d751e 	bne	r2,zero,7a64 <__alt_exception_stack_pointer+0xf8007a64>
    8490:	a823883a 	mov	r17,r21
    8494:	003d8b06 	br	7ac4 <__alt_exception_stack_pointer+0xf8007ac4>
    8498:	8025883a 	mov	r18,r16
    849c:	dc002903 	ldbu	r16,164(sp)
    84a0:	e011883a 	mov	r8,fp
    84a4:	84003fcc 	andi	r16,r16,255
    84a8:	8005e51e 	bne	r16,zero,9c40 <___vfprintf_internal_r+0x22c4>
    84ac:	94800414 	ori	r18,r18,16
    84b0:	9080080c 	andi	r2,r18,32
    84b4:	10022b26 	beq	r2,zero,8d64 <___vfprintf_internal_r+0x13e8>
    84b8:	d9002e17 	ldw	r4,184(sp)
    84bc:	d9402a17 	ldw	r5,168(sp)
    84c0:	d8002785 	stb	zero,158(sp)
    84c4:	20c00204 	addi	r3,r4,8
    84c8:	24c00017 	ldw	r19,0(r4)
    84cc:	25800117 	ldw	r22,4(r4)
    84d0:	28042e16 	blt	r5,zero,958c <___vfprintf_internal_r+0x1c10>
    84d4:	013fdfc4 	movi	r4,-129
    84d8:	9d84b03a 	or	r2,r19,r22
    84dc:	d8c02e15 	stw	r3,184(sp)
    84e0:	9124703a 	and	r18,r18,r4
    84e4:	0039883a 	mov	fp,zero
    84e8:	103e801e 	bne	r2,zero,7eec <__alt_exception_stack_pointer+0xf8007eec>
    84ec:	d9002a17 	ldw	r4,168(sp)
    84f0:	2002e01e 	bne	r4,zero,9074 <___vfprintf_internal_r+0x16f8>
    84f4:	d8002a15 	stw	zero,168(sp)
    84f8:	d8002b15 	stw	zero,172(sp)
    84fc:	dc001e04 	addi	r16,sp,120
    8500:	003ef506 	br	80d8 <__alt_exception_stack_pointer+0xf80080d8>
    8504:	8025883a 	mov	r18,r16
    8508:	dc002903 	ldbu	r16,164(sp)
    850c:	e011883a 	mov	r8,fp
    8510:	84003fcc 	andi	r16,r16,255
    8514:	8005ba1e 	bne	r16,zero,9c00 <___vfprintf_internal_r+0x2284>
    8518:	01000074 	movhi	r4,1
    851c:	21157704 	addi	r4,r4,21980
    8520:	d9003915 	stw	r4,228(sp)
    8524:	9080080c 	andi	r2,r18,32
    8528:	10006126 	beq	r2,zero,86b0 <___vfprintf_internal_r+0xd34>
    852c:	d9402e17 	ldw	r5,184(sp)
    8530:	2cc00017 	ldw	r19,0(r5)
    8534:	2d800117 	ldw	r22,4(r5)
    8538:	29400204 	addi	r5,r5,8
    853c:	d9402e15 	stw	r5,184(sp)
    8540:	9080004c 	andi	r2,r18,1
    8544:	1001ac26 	beq	r2,zero,8bf8 <___vfprintf_internal_r+0x127c>
    8548:	9d84b03a 	or	r2,r19,r22
    854c:	10038526 	beq	r2,zero,9364 <___vfprintf_internal_r+0x19e8>
    8550:	d8c02a17 	ldw	r3,168(sp)
    8554:	00800c04 	movi	r2,48
    8558:	d8802705 	stb	r2,156(sp)
    855c:	dc402745 	stb	r17,157(sp)
    8560:	d8002785 	stb	zero,158(sp)
    8564:	90800094 	ori	r2,r18,2
    8568:	18047916 	blt	r3,zero,9750 <___vfprintf_internal_r+0x1dd4>
    856c:	00bfdfc4 	movi	r2,-129
    8570:	90a4703a 	and	r18,r18,r2
    8574:	94800094 	ori	r18,r18,2
    8578:	0039883a 	mov	fp,zero
    857c:	d9003917 	ldw	r4,228(sp)
    8580:	dc001e04 	addi	r16,sp,120
    8584:	988003cc 	andi	r2,r19,15
    8588:	b006973a 	slli	r3,r22,28
    858c:	2085883a 	add	r2,r4,r2
    8590:	9826d13a 	srli	r19,r19,4
    8594:	10800003 	ldbu	r2,0(r2)
    8598:	b02cd13a 	srli	r22,r22,4
    859c:	843fffc4 	addi	r16,r16,-1
    85a0:	1ce6b03a 	or	r19,r3,r19
    85a4:	80800005 	stb	r2,0(r16)
    85a8:	9d84b03a 	or	r2,r19,r22
    85ac:	103ff51e 	bne	r2,zero,8584 <__alt_exception_stack_pointer+0xf8008584>
    85b0:	d8c02817 	ldw	r3,160(sp)
    85b4:	1c07c83a 	sub	r3,r3,r16
    85b8:	d8c02b15 	stw	r3,172(sp)
    85bc:	003ec606 	br	80d8 <__alt_exception_stack_pointer+0xf80080d8>
    85c0:	8025883a 	mov	r18,r16
    85c4:	dc002903 	ldbu	r16,164(sp)
    85c8:	e011883a 	mov	r8,fp
    85cc:	84003fcc 	andi	r16,r16,255
    85d0:	803e9626 	beq	r16,zero,802c <__alt_exception_stack_pointer+0xf800802c>
    85d4:	d8c02b03 	ldbu	r3,172(sp)
    85d8:	d8c02785 	stb	r3,158(sp)
    85dc:	003e9306 	br	802c <__alt_exception_stack_pointer+0xf800802c>
    85e0:	00c00044 	movi	r3,1
    85e4:	d8c02905 	stb	r3,164(sp)
    85e8:	00c00ac4 	movi	r3,43
    85ec:	d8c02b05 	stb	r3,172(sp)
    85f0:	ac400007 	ldb	r17,0(r21)
    85f4:	003d4306 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    85f8:	84000814 	ori	r16,r16,32
    85fc:	ac400007 	ldb	r17,0(r21)
    8600:	003d4006 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    8604:	d8802e17 	ldw	r2,184(sp)
    8608:	8025883a 	mov	r18,r16
    860c:	d8002785 	stb	zero,158(sp)
    8610:	14000017 	ldw	r16,0(r2)
    8614:	e011883a 	mov	r8,fp
    8618:	14c00104 	addi	r19,r2,4
    861c:	80042d26 	beq	r16,zero,96d4 <___vfprintf_internal_r+0x1d58>
    8620:	d8c02a17 	ldw	r3,168(sp)
    8624:	1803e416 	blt	r3,zero,95b8 <___vfprintf_internal_r+0x1c3c>
    8628:	180d883a 	mov	r6,r3
    862c:	000b883a 	mov	r5,zero
    8630:	8009883a 	mov	r4,r16
    8634:	df003d15 	stw	fp,244(sp)
    8638:	000caa80 	call	caa8 <memchr>
    863c:	da003d17 	ldw	r8,244(sp)
    8640:	10046826 	beq	r2,zero,97e4 <___vfprintf_internal_r+0x1e68>
    8644:	1405c83a 	sub	r2,r2,r16
    8648:	d8802b15 	stw	r2,172(sp)
    864c:	1003e016 	blt	r2,zero,95d0 <___vfprintf_internal_r+0x1c54>
    8650:	df002783 	ldbu	fp,158(sp)
    8654:	d8802915 	stw	r2,164(sp)
    8658:	dcc02e15 	stw	r19,184(sp)
    865c:	d8002a15 	stw	zero,168(sp)
    8660:	d8003215 	stw	zero,200(sp)
    8664:	003ea206 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    8668:	8025883a 	mov	r18,r16
    866c:	dc002903 	ldbu	r16,164(sp)
    8670:	e011883a 	mov	r8,fp
    8674:	84003fcc 	andi	r16,r16,255
    8678:	803f8d26 	beq	r16,zero,84b0 <__alt_exception_stack_pointer+0xf80084b0>
    867c:	d8c02b03 	ldbu	r3,172(sp)
    8680:	d8c02785 	stb	r3,158(sp)
    8684:	003f8a06 	br	84b0 <__alt_exception_stack_pointer+0xf80084b0>
    8688:	8025883a 	mov	r18,r16
    868c:	dc002903 	ldbu	r16,164(sp)
    8690:	e011883a 	mov	r8,fp
    8694:	84003fcc 	andi	r16,r16,255
    8698:	8005661e 	bne	r16,zero,9c34 <___vfprintf_internal_r+0x22b8>
    869c:	01000074 	movhi	r4,1
    86a0:	21157c04 	addi	r4,r4,22000
    86a4:	d9003915 	stw	r4,228(sp)
    86a8:	9080080c 	andi	r2,r18,32
    86ac:	103f9f1e 	bne	r2,zero,852c <__alt_exception_stack_pointer+0xf800852c>
    86b0:	9080040c 	andi	r2,r18,16
    86b4:	1002eb26 	beq	r2,zero,9264 <___vfprintf_internal_r+0x18e8>
    86b8:	d8802e17 	ldw	r2,184(sp)
    86bc:	002d883a 	mov	r22,zero
    86c0:	14c00017 	ldw	r19,0(r2)
    86c4:	10800104 	addi	r2,r2,4
    86c8:	d8802e15 	stw	r2,184(sp)
    86cc:	003f9c06 	br	8540 <__alt_exception_stack_pointer+0xf8008540>
    86d0:	d8802b07 	ldb	r2,172(sp)
    86d4:	1002e11e 	bne	r2,zero,925c <___vfprintf_internal_r+0x18e0>
    86d8:	00c00044 	movi	r3,1
    86dc:	d8c02905 	stb	r3,164(sp)
    86e0:	00c00804 	movi	r3,32
    86e4:	d8c02b05 	stb	r3,172(sp)
    86e8:	ac400007 	ldb	r17,0(r21)
    86ec:	003d0506 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    86f0:	84000054 	ori	r16,r16,1
    86f4:	ac400007 	ldb	r17,0(r21)
    86f8:	003d0206 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    86fc:	8025883a 	mov	r18,r16
    8700:	dc002903 	ldbu	r16,164(sp)
    8704:	e011883a 	mov	r8,fp
    8708:	84003fcc 	andi	r16,r16,255
    870c:	803de726 	beq	r16,zero,7eac <__alt_exception_stack_pointer+0xf8007eac>
    8710:	d8c02b03 	ldbu	r3,172(sp)
    8714:	d8c02785 	stb	r3,158(sp)
    8718:	003de406 	br	7eac <__alt_exception_stack_pointer+0xf8007eac>
    871c:	84001014 	ori	r16,r16,64
    8720:	ac400007 	ldb	r17,0(r21)
    8724:	003cf706 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    8728:	ac400007 	ldb	r17,0(r21)
    872c:	00801b04 	movi	r2,108
    8730:	88838f26 	beq	r17,r2,9570 <___vfprintf_internal_r+0x1bf4>
    8734:	84000414 	ori	r16,r16,16
    8738:	003cf206 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    873c:	8025883a 	mov	r18,r16
    8740:	dc002903 	ldbu	r16,164(sp)
    8744:	e011883a 	mov	r8,fp
    8748:	84003fcc 	andi	r16,r16,255
    874c:	80053f1e 	bne	r16,zero,9c4c <___vfprintf_internal_r+0x22d0>
    8750:	9080080c 	andi	r2,r18,32
    8754:	1002d226 	beq	r2,zero,92a0 <___vfprintf_internal_r+0x1924>
    8758:	d9002e17 	ldw	r4,184(sp)
    875c:	d9402f17 	ldw	r5,188(sp)
    8760:	20800017 	ldw	r2,0(r4)
    8764:	2807d7fa 	srai	r3,r5,31
    8768:	21000104 	addi	r4,r4,4
    876c:	d9002e15 	stw	r4,184(sp)
    8770:	11400015 	stw	r5,0(r2)
    8774:	10c00115 	stw	r3,4(r2)
    8778:	003cb806 	br	7a5c <__alt_exception_stack_pointer+0xf8007a5c>
    877c:	d8c02e17 	ldw	r3,184(sp)
    8780:	d9002e17 	ldw	r4,184(sp)
    8784:	8025883a 	mov	r18,r16
    8788:	18800017 	ldw	r2,0(r3)
    878c:	21000104 	addi	r4,r4,4
    8790:	00c00044 	movi	r3,1
    8794:	e011883a 	mov	r8,fp
    8798:	d8c02915 	stw	r3,164(sp)
    879c:	d8002785 	stb	zero,158(sp)
    87a0:	d8801405 	stb	r2,80(sp)
    87a4:	d9002e15 	stw	r4,184(sp)
    87a8:	d8c02b15 	stw	r3,172(sp)
    87ac:	d8002a15 	stw	zero,168(sp)
    87b0:	d8003215 	stw	zero,200(sp)
    87b4:	dc001404 	addi	r16,sp,80
    87b8:	0039883a 	mov	fp,zero
    87bc:	003e5306 	br	810c <__alt_exception_stack_pointer+0xf800810c>
    87c0:	01000074 	movhi	r4,1
    87c4:	21157c04 	addi	r4,r4,22000
    87c8:	0039883a 	mov	fp,zero
    87cc:	d9003915 	stw	r4,228(sp)
    87d0:	04401e04 	movi	r17,120
    87d4:	003f6906 	br	857c <__alt_exception_stack_pointer+0xf800857c>
    87d8:	8025883a 	mov	r18,r16
    87dc:	dc002903 	ldbu	r16,164(sp)
    87e0:	e011883a 	mov	r8,fp
    87e4:	84003fcc 	andi	r16,r16,255
    87e8:	8005081e 	bne	r16,zero,9c0c <___vfprintf_internal_r+0x2290>
    87ec:	883d6126 	beq	r17,zero,7d74 <__alt_exception_stack_pointer+0xf8007d74>
    87f0:	00c00044 	movi	r3,1
    87f4:	d8c02915 	stw	r3,164(sp)
    87f8:	dc401405 	stb	r17,80(sp)
    87fc:	d8002785 	stb	zero,158(sp)
    8800:	003fe906 	br	87a8 <__alt_exception_stack_pointer+0xf80087a8>
    8804:	01400074 	movhi	r5,1
    8808:	29557c04 	addi	r5,r5,22000
    880c:	d9403915 	stw	r5,228(sp)
    8810:	d8c02e15 	stw	r3,184(sp)
    8814:	1025883a 	mov	r18,r2
    8818:	04401e04 	movi	r17,120
    881c:	9d84b03a 	or	r2,r19,r22
    8820:	1000fc1e 	bne	r2,zero,8c14 <___vfprintf_internal_r+0x1298>
    8824:	0039883a 	mov	fp,zero
    8828:	00800084 	movi	r2,2
    882c:	10803fcc 	andi	r2,r2,255
    8830:	00c00044 	movi	r3,1
    8834:	10c20f26 	beq	r2,r3,9074 <___vfprintf_internal_r+0x16f8>
    8838:	00c00084 	movi	r3,2
    883c:	10fd3326 	beq	r2,r3,7d0c <__alt_exception_stack_pointer+0xf8007d0c>
    8840:	003e0b06 	br	8070 <__alt_exception_stack_pointer+0xf8008070>
    8844:	d8c02017 	ldw	r3,128(sp)
    8848:	003e7106 	br	8210 <__alt_exception_stack_pointer+0xf8008210>
    884c:	00801944 	movi	r2,101
    8850:	14407e0e 	bge	r2,r17,8a4c <___vfprintf_internal_r+0x10d0>
    8854:	d9003617 	ldw	r4,216(sp)
    8858:	d9403817 	ldw	r5,224(sp)
    885c:	000d883a 	mov	r6,zero
    8860:	000f883a 	mov	r7,zero
    8864:	d8c03c15 	stw	r3,240(sp)
    8868:	da003d15 	stw	r8,244(sp)
    886c:	00058f40 	call	58f4 <__eqdf2>
    8870:	d8c03c17 	ldw	r3,240(sp)
    8874:	da003d17 	ldw	r8,244(sp)
    8878:	1000f71e 	bne	r2,zero,8c58 <___vfprintf_internal_r+0x12dc>
    887c:	d8801f17 	ldw	r2,124(sp)
    8880:	01000074 	movhi	r4,1
    8884:	21158304 	addi	r4,r4,22028
    8888:	18c00044 	addi	r3,r3,1
    888c:	10800044 	addi	r2,r2,1
    8890:	41000015 	stw	r4,0(r8)
    8894:	01000044 	movi	r4,1
    8898:	41000115 	stw	r4,4(r8)
    889c:	d8c02015 	stw	r3,128(sp)
    88a0:	d8801f15 	stw	r2,124(sp)
    88a4:	010001c4 	movi	r4,7
    88a8:	2082b816 	blt	r4,r2,938c <___vfprintf_internal_r+0x1a10>
    88ac:	42000204 	addi	r8,r8,8
    88b0:	d8802617 	ldw	r2,152(sp)
    88b4:	d9403317 	ldw	r5,204(sp)
    88b8:	11400216 	blt	r2,r5,88c4 <___vfprintf_internal_r+0xf48>
    88bc:	9080004c 	andi	r2,r18,1
    88c0:	103eb326 	beq	r2,zero,8390 <__alt_exception_stack_pointer+0xf8008390>
    88c4:	d8803717 	ldw	r2,220(sp)
    88c8:	d9003417 	ldw	r4,208(sp)
    88cc:	d9403717 	ldw	r5,220(sp)
    88d0:	1887883a 	add	r3,r3,r2
    88d4:	d8801f17 	ldw	r2,124(sp)
    88d8:	41000015 	stw	r4,0(r8)
    88dc:	41400115 	stw	r5,4(r8)
    88e0:	10800044 	addi	r2,r2,1
    88e4:	d8c02015 	stw	r3,128(sp)
    88e8:	d8801f15 	stw	r2,124(sp)
    88ec:	010001c4 	movi	r4,7
    88f0:	20832916 	blt	r4,r2,9598 <___vfprintf_internal_r+0x1c1c>
    88f4:	42000204 	addi	r8,r8,8
    88f8:	d8803317 	ldw	r2,204(sp)
    88fc:	143fffc4 	addi	r16,r2,-1
    8900:	043ea30e 	bge	zero,r16,8390 <__alt_exception_stack_pointer+0xf8008390>
    8904:	04400404 	movi	r17,16
    8908:	d8801f17 	ldw	r2,124(sp)
    890c:	8c00880e 	bge	r17,r16,8b30 <___vfprintf_internal_r+0x11b4>
    8910:	01400074 	movhi	r5,1
    8914:	29558384 	addi	r5,r5,22030
    8918:	d9402c15 	stw	r5,176(sp)
    891c:	058001c4 	movi	r22,7
    8920:	dcc02d17 	ldw	r19,180(sp)
    8924:	00000306 	br	8934 <___vfprintf_internal_r+0xfb8>
    8928:	42000204 	addi	r8,r8,8
    892c:	843ffc04 	addi	r16,r16,-16
    8930:	8c00820e 	bge	r17,r16,8b3c <___vfprintf_internal_r+0x11c0>
    8934:	18c00404 	addi	r3,r3,16
    8938:	10800044 	addi	r2,r2,1
    893c:	45000015 	stw	r20,0(r8)
    8940:	44400115 	stw	r17,4(r8)
    8944:	d8c02015 	stw	r3,128(sp)
    8948:	d8801f15 	stw	r2,124(sp)
    894c:	b0bff60e 	bge	r22,r2,8928 <__alt_exception_stack_pointer+0xf8008928>
    8950:	d9801e04 	addi	r6,sp,120
    8954:	b80b883a 	mov	r5,r23
    8958:	9809883a 	mov	r4,r19
    895c:	000e7b40 	call	e7b4 <__sprint_r>
    8960:	103d0a1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8964:	d8c02017 	ldw	r3,128(sp)
    8968:	d8801f17 	ldw	r2,124(sp)
    896c:	da000404 	addi	r8,sp,16
    8970:	003fee06 	br	892c <__alt_exception_stack_pointer+0xf800892c>
    8974:	d9403117 	ldw	r5,196(sp)
    8978:	d8802917 	ldw	r2,164(sp)
    897c:	28adc83a 	sub	r22,r5,r2
    8980:	05be410e 	bge	zero,r22,8288 <__alt_exception_stack_pointer+0xf8008288>
    8984:	07000404 	movi	fp,16
    8988:	d8801f17 	ldw	r2,124(sp)
    898c:	e5838f0e 	bge	fp,r22,97cc <___vfprintf_internal_r+0x1e50>
    8990:	01400074 	movhi	r5,1
    8994:	29558384 	addi	r5,r5,22030
    8998:	dc403015 	stw	r17,192(sp)
    899c:	d9402c15 	stw	r5,176(sp)
    89a0:	b023883a 	mov	r17,r22
    89a4:	04c001c4 	movi	r19,7
    89a8:	a82d883a 	mov	r22,r21
    89ac:	902b883a 	mov	r21,r18
    89b0:	8025883a 	mov	r18,r16
    89b4:	dc002d17 	ldw	r16,180(sp)
    89b8:	00000306 	br	89c8 <___vfprintf_internal_r+0x104c>
    89bc:	8c7ffc04 	addi	r17,r17,-16
    89c0:	42000204 	addi	r8,r8,8
    89c4:	e440110e 	bge	fp,r17,8a0c <___vfprintf_internal_r+0x1090>
    89c8:	18c00404 	addi	r3,r3,16
    89cc:	10800044 	addi	r2,r2,1
    89d0:	45000015 	stw	r20,0(r8)
    89d4:	47000115 	stw	fp,4(r8)
    89d8:	d8c02015 	stw	r3,128(sp)
    89dc:	d8801f15 	stw	r2,124(sp)
    89e0:	98bff60e 	bge	r19,r2,89bc <__alt_exception_stack_pointer+0xf80089bc>
    89e4:	d9801e04 	addi	r6,sp,120
    89e8:	b80b883a 	mov	r5,r23
    89ec:	8009883a 	mov	r4,r16
    89f0:	000e7b40 	call	e7b4 <__sprint_r>
    89f4:	103ce51e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    89f8:	8c7ffc04 	addi	r17,r17,-16
    89fc:	d8c02017 	ldw	r3,128(sp)
    8a00:	d8801f17 	ldw	r2,124(sp)
    8a04:	da000404 	addi	r8,sp,16
    8a08:	e47fef16 	blt	fp,r17,89c8 <__alt_exception_stack_pointer+0xf80089c8>
    8a0c:	9021883a 	mov	r16,r18
    8a10:	a825883a 	mov	r18,r21
    8a14:	b02b883a 	mov	r21,r22
    8a18:	882d883a 	mov	r22,r17
    8a1c:	dc403017 	ldw	r17,192(sp)
    8a20:	d9002c17 	ldw	r4,176(sp)
    8a24:	1d87883a 	add	r3,r3,r22
    8a28:	10800044 	addi	r2,r2,1
    8a2c:	41000015 	stw	r4,0(r8)
    8a30:	45800115 	stw	r22,4(r8)
    8a34:	d8c02015 	stw	r3,128(sp)
    8a38:	d8801f15 	stw	r2,124(sp)
    8a3c:	010001c4 	movi	r4,7
    8a40:	20818e16 	blt	r4,r2,907c <___vfprintf_internal_r+0x1700>
    8a44:	42000204 	addi	r8,r8,8
    8a48:	003e0f06 	br	8288 <__alt_exception_stack_pointer+0xf8008288>
    8a4c:	d9403317 	ldw	r5,204(sp)
    8a50:	00800044 	movi	r2,1
    8a54:	18c00044 	addi	r3,r3,1
    8a58:	1141530e 	bge	r2,r5,8fa8 <___vfprintf_internal_r+0x162c>
    8a5c:	dc401f17 	ldw	r17,124(sp)
    8a60:	00800044 	movi	r2,1
    8a64:	40800115 	stw	r2,4(r8)
    8a68:	8c400044 	addi	r17,r17,1
    8a6c:	44000015 	stw	r16,0(r8)
    8a70:	d8c02015 	stw	r3,128(sp)
    8a74:	dc401f15 	stw	r17,124(sp)
    8a78:	008001c4 	movi	r2,7
    8a7c:	14416b16 	blt	r2,r17,902c <___vfprintf_internal_r+0x16b0>
    8a80:	42000204 	addi	r8,r8,8
    8a84:	d8803717 	ldw	r2,220(sp)
    8a88:	d9003417 	ldw	r4,208(sp)
    8a8c:	8c400044 	addi	r17,r17,1
    8a90:	10c7883a 	add	r3,r2,r3
    8a94:	40800115 	stw	r2,4(r8)
    8a98:	41000015 	stw	r4,0(r8)
    8a9c:	d8c02015 	stw	r3,128(sp)
    8aa0:	dc401f15 	stw	r17,124(sp)
    8aa4:	008001c4 	movi	r2,7
    8aa8:	14416916 	blt	r2,r17,9050 <___vfprintf_internal_r+0x16d4>
    8aac:	45800204 	addi	r22,r8,8
    8ab0:	d9003617 	ldw	r4,216(sp)
    8ab4:	d9403817 	ldw	r5,224(sp)
    8ab8:	000d883a 	mov	r6,zero
    8abc:	000f883a 	mov	r7,zero
    8ac0:	d8c03c15 	stw	r3,240(sp)
    8ac4:	00058f40 	call	58f4 <__eqdf2>
    8ac8:	d8c03c17 	ldw	r3,240(sp)
    8acc:	1000bc26 	beq	r2,zero,8dc0 <___vfprintf_internal_r+0x1444>
    8ad0:	d9403317 	ldw	r5,204(sp)
    8ad4:	84000044 	addi	r16,r16,1
    8ad8:	8c400044 	addi	r17,r17,1
    8adc:	28bfffc4 	addi	r2,r5,-1
    8ae0:	1887883a 	add	r3,r3,r2
    8ae4:	b0800115 	stw	r2,4(r22)
    8ae8:	b4000015 	stw	r16,0(r22)
    8aec:	d8c02015 	stw	r3,128(sp)
    8af0:	dc401f15 	stw	r17,124(sp)
    8af4:	008001c4 	movi	r2,7
    8af8:	14414316 	blt	r2,r17,9008 <___vfprintf_internal_r+0x168c>
    8afc:	b5800204 	addi	r22,r22,8
    8b00:	d9003a17 	ldw	r4,232(sp)
    8b04:	df0022c4 	addi	fp,sp,139
    8b08:	8c400044 	addi	r17,r17,1
    8b0c:	20c7883a 	add	r3,r4,r3
    8b10:	b7000015 	stw	fp,0(r22)
    8b14:	b1000115 	stw	r4,4(r22)
    8b18:	d8c02015 	stw	r3,128(sp)
    8b1c:	dc401f15 	stw	r17,124(sp)
    8b20:	008001c4 	movi	r2,7
    8b24:	14400e16 	blt	r2,r17,8b60 <___vfprintf_internal_r+0x11e4>
    8b28:	b2000204 	addi	r8,r22,8
    8b2c:	003e1806 	br	8390 <__alt_exception_stack_pointer+0xf8008390>
    8b30:	01000074 	movhi	r4,1
    8b34:	21158384 	addi	r4,r4,22030
    8b38:	d9002c15 	stw	r4,176(sp)
    8b3c:	d9002c17 	ldw	r4,176(sp)
    8b40:	1c07883a 	add	r3,r3,r16
    8b44:	44000115 	stw	r16,4(r8)
    8b48:	41000015 	stw	r4,0(r8)
    8b4c:	10800044 	addi	r2,r2,1
    8b50:	d8c02015 	stw	r3,128(sp)
    8b54:	d8801f15 	stw	r2,124(sp)
    8b58:	010001c4 	movi	r4,7
    8b5c:	20be0b0e 	bge	r4,r2,838c <__alt_exception_stack_pointer+0xf800838c>
    8b60:	d9002d17 	ldw	r4,180(sp)
    8b64:	d9801e04 	addi	r6,sp,120
    8b68:	b80b883a 	mov	r5,r23
    8b6c:	000e7b40 	call	e7b4 <__sprint_r>
    8b70:	103c861e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8b74:	d8c02017 	ldw	r3,128(sp)
    8b78:	da000404 	addi	r8,sp,16
    8b7c:	003e0406 	br	8390 <__alt_exception_stack_pointer+0xf8008390>
    8b80:	d9002d17 	ldw	r4,180(sp)
    8b84:	d9801e04 	addi	r6,sp,120
    8b88:	b80b883a 	mov	r5,r23
    8b8c:	000e7b40 	call	e7b4 <__sprint_r>
    8b90:	103e3b26 	beq	r2,zero,8480 <__alt_exception_stack_pointer+0xf8008480>
    8b94:	003c7d06 	br	7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8b98:	d9002d17 	ldw	r4,180(sp)
    8b9c:	d9801e04 	addi	r6,sp,120
    8ba0:	b80b883a 	mov	r5,r23
    8ba4:	000e7b40 	call	e7b4 <__sprint_r>
    8ba8:	103c781e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8bac:	d8c02017 	ldw	r3,128(sp)
    8bb0:	da000404 	addi	r8,sp,16
    8bb4:	003de906 	br	835c <__alt_exception_stack_pointer+0xf800835c>
    8bb8:	d9002d17 	ldw	r4,180(sp)
    8bbc:	d9801e04 	addi	r6,sp,120
    8bc0:	b80b883a 	mov	r5,r23
    8bc4:	000e7b40 	call	e7b4 <__sprint_r>
    8bc8:	103c701e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8bcc:	d8c02017 	ldw	r3,128(sp)
    8bd0:	da000404 	addi	r8,sp,16
    8bd4:	003d9b06 	br	8244 <__alt_exception_stack_pointer+0xf8008244>
    8bd8:	d9002d17 	ldw	r4,180(sp)
    8bdc:	d9801e04 	addi	r6,sp,120
    8be0:	b80b883a 	mov	r5,r23
    8be4:	000e7b40 	call	e7b4 <__sprint_r>
    8be8:	103c681e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8bec:	d8c02017 	ldw	r3,128(sp)
    8bf0:	da000404 	addi	r8,sp,16
    8bf4:	003da106 	br	827c <__alt_exception_stack_pointer+0xf800827c>
    8bf8:	d9402a17 	ldw	r5,168(sp)
    8bfc:	d8002785 	stb	zero,158(sp)
    8c00:	283f0616 	blt	r5,zero,881c <__alt_exception_stack_pointer+0xf800881c>
    8c04:	00ffdfc4 	movi	r3,-129
    8c08:	9d84b03a 	or	r2,r19,r22
    8c0c:	90e4703a 	and	r18,r18,r3
    8c10:	103c3b26 	beq	r2,zero,7d00 <__alt_exception_stack_pointer+0xf8007d00>
    8c14:	0039883a 	mov	fp,zero
    8c18:	003e5806 	br	857c <__alt_exception_stack_pointer+0xf800857c>
    8c1c:	9080040c 	andi	r2,r18,16
    8c20:	1001b326 	beq	r2,zero,92f0 <___vfprintf_internal_r+0x1974>
    8c24:	d8c02e17 	ldw	r3,184(sp)
    8c28:	d9002a17 	ldw	r4,168(sp)
    8c2c:	d8002785 	stb	zero,158(sp)
    8c30:	18800104 	addi	r2,r3,4
    8c34:	1cc00017 	ldw	r19,0(r3)
    8c38:	002d883a 	mov	r22,zero
    8c3c:	2001b516 	blt	r4,zero,9314 <___vfprintf_internal_r+0x1998>
    8c40:	00ffdfc4 	movi	r3,-129
    8c44:	d8802e15 	stw	r2,184(sp)
    8c48:	90e4703a 	and	r18,r18,r3
    8c4c:	983d0526 	beq	r19,zero,8064 <__alt_exception_stack_pointer+0xf8008064>
    8c50:	0039883a 	mov	fp,zero
    8c54:	003d0806 	br	8078 <__alt_exception_stack_pointer+0xf8008078>
    8c58:	dc402617 	ldw	r17,152(sp)
    8c5c:	0441d30e 	bge	zero,r17,93ac <___vfprintf_internal_r+0x1a30>
    8c60:	dc403217 	ldw	r17,200(sp)
    8c64:	d8803317 	ldw	r2,204(sp)
    8c68:	1440010e 	bge	r2,r17,8c70 <___vfprintf_internal_r+0x12f4>
    8c6c:	1023883a 	mov	r17,r2
    8c70:	04400a0e 	bge	zero,r17,8c9c <___vfprintf_internal_r+0x1320>
    8c74:	d8801f17 	ldw	r2,124(sp)
    8c78:	1c47883a 	add	r3,r3,r17
    8c7c:	44000015 	stw	r16,0(r8)
    8c80:	10800044 	addi	r2,r2,1
    8c84:	44400115 	stw	r17,4(r8)
    8c88:	d8c02015 	stw	r3,128(sp)
    8c8c:	d8801f15 	stw	r2,124(sp)
    8c90:	010001c4 	movi	r4,7
    8c94:	20826516 	blt	r4,r2,962c <___vfprintf_internal_r+0x1cb0>
    8c98:	42000204 	addi	r8,r8,8
    8c9c:	88026116 	blt	r17,zero,9624 <___vfprintf_internal_r+0x1ca8>
    8ca0:	d9003217 	ldw	r4,200(sp)
    8ca4:	2463c83a 	sub	r17,r4,r17
    8ca8:	04407b0e 	bge	zero,r17,8e98 <___vfprintf_internal_r+0x151c>
    8cac:	05800404 	movi	r22,16
    8cb0:	d8801f17 	ldw	r2,124(sp)
    8cb4:	b4419d0e 	bge	r22,r17,932c <___vfprintf_internal_r+0x19b0>
    8cb8:	01000074 	movhi	r4,1
    8cbc:	21158384 	addi	r4,r4,22030
    8cc0:	d9002c15 	stw	r4,176(sp)
    8cc4:	070001c4 	movi	fp,7
    8cc8:	dcc02d17 	ldw	r19,180(sp)
    8ccc:	00000306 	br	8cdc <___vfprintf_internal_r+0x1360>
    8cd0:	42000204 	addi	r8,r8,8
    8cd4:	8c7ffc04 	addi	r17,r17,-16
    8cd8:	b441970e 	bge	r22,r17,9338 <___vfprintf_internal_r+0x19bc>
    8cdc:	18c00404 	addi	r3,r3,16
    8ce0:	10800044 	addi	r2,r2,1
    8ce4:	45000015 	stw	r20,0(r8)
    8ce8:	45800115 	stw	r22,4(r8)
    8cec:	d8c02015 	stw	r3,128(sp)
    8cf0:	d8801f15 	stw	r2,124(sp)
    8cf4:	e0bff60e 	bge	fp,r2,8cd0 <__alt_exception_stack_pointer+0xf8008cd0>
    8cf8:	d9801e04 	addi	r6,sp,120
    8cfc:	b80b883a 	mov	r5,r23
    8d00:	9809883a 	mov	r4,r19
    8d04:	000e7b40 	call	e7b4 <__sprint_r>
    8d08:	103c201e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8d0c:	d8c02017 	ldw	r3,128(sp)
    8d10:	d8801f17 	ldw	r2,124(sp)
    8d14:	da000404 	addi	r8,sp,16
    8d18:	003fee06 	br	8cd4 <__alt_exception_stack_pointer+0xf8008cd4>
    8d1c:	d9002d17 	ldw	r4,180(sp)
    8d20:	d9801e04 	addi	r6,sp,120
    8d24:	b80b883a 	mov	r5,r23
    8d28:	000e7b40 	call	e7b4 <__sprint_r>
    8d2c:	103c171e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8d30:	d8c02017 	ldw	r3,128(sp)
    8d34:	df002787 	ldb	fp,158(sp)
    8d38:	da000404 	addi	r8,sp,16
    8d3c:	003d3406 	br	8210 <__alt_exception_stack_pointer+0xf8008210>
    8d40:	9080040c 	andi	r2,r18,16
    8d44:	10016126 	beq	r2,zero,92cc <___vfprintf_internal_r+0x1950>
    8d48:	d9402e17 	ldw	r5,184(sp)
    8d4c:	2cc00017 	ldw	r19,0(r5)
    8d50:	29400104 	addi	r5,r5,4
    8d54:	d9402e15 	stw	r5,184(sp)
    8d58:	982dd7fa 	srai	r22,r19,31
    8d5c:	b005883a 	mov	r2,r22
    8d60:	003c5a06 	br	7ecc <__alt_exception_stack_pointer+0xf8007ecc>
    8d64:	9080040c 	andi	r2,r18,16
    8d68:	10003526 	beq	r2,zero,8e40 <___vfprintf_internal_r+0x14c4>
    8d6c:	d8c02e17 	ldw	r3,184(sp)
    8d70:	d9002a17 	ldw	r4,168(sp)
    8d74:	d8002785 	stb	zero,158(sp)
    8d78:	18800104 	addi	r2,r3,4
    8d7c:	1cc00017 	ldw	r19,0(r3)
    8d80:	002d883a 	mov	r22,zero
    8d84:	20003716 	blt	r4,zero,8e64 <___vfprintf_internal_r+0x14e8>
    8d88:	00ffdfc4 	movi	r3,-129
    8d8c:	d8802e15 	stw	r2,184(sp)
    8d90:	90e4703a 	and	r18,r18,r3
    8d94:	0039883a 	mov	fp,zero
    8d98:	983dd426 	beq	r19,zero,84ec <__alt_exception_stack_pointer+0xf80084ec>
    8d9c:	00800244 	movi	r2,9
    8da0:	14fc5336 	bltu	r2,r19,7ef0 <__alt_exception_stack_pointer+0xf8007ef0>
    8da4:	d8c02817 	ldw	r3,160(sp)
    8da8:	dc001dc4 	addi	r16,sp,119
    8dac:	9cc00c04 	addi	r19,r19,48
    8db0:	1c07c83a 	sub	r3,r3,r16
    8db4:	dcc01dc5 	stb	r19,119(sp)
    8db8:	d8c02b15 	stw	r3,172(sp)
    8dbc:	003cc606 	br	80d8 <__alt_exception_stack_pointer+0xf80080d8>
    8dc0:	d8803317 	ldw	r2,204(sp)
    8dc4:	143fffc4 	addi	r16,r2,-1
    8dc8:	043f4d0e 	bge	zero,r16,8b00 <__alt_exception_stack_pointer+0xf8008b00>
    8dcc:	07000404 	movi	fp,16
    8dd0:	e400810e 	bge	fp,r16,8fd8 <___vfprintf_internal_r+0x165c>
    8dd4:	01400074 	movhi	r5,1
    8dd8:	29558384 	addi	r5,r5,22030
    8ddc:	d9402c15 	stw	r5,176(sp)
    8de0:	01c001c4 	movi	r7,7
    8de4:	dcc02d17 	ldw	r19,180(sp)
    8de8:	00000306 	br	8df8 <___vfprintf_internal_r+0x147c>
    8dec:	b5800204 	addi	r22,r22,8
    8df0:	843ffc04 	addi	r16,r16,-16
    8df4:	e4007b0e 	bge	fp,r16,8fe4 <___vfprintf_internal_r+0x1668>
    8df8:	18c00404 	addi	r3,r3,16
    8dfc:	8c400044 	addi	r17,r17,1
    8e00:	b5000015 	stw	r20,0(r22)
    8e04:	b7000115 	stw	fp,4(r22)
    8e08:	d8c02015 	stw	r3,128(sp)
    8e0c:	dc401f15 	stw	r17,124(sp)
    8e10:	3c7ff60e 	bge	r7,r17,8dec <__alt_exception_stack_pointer+0xf8008dec>
    8e14:	d9801e04 	addi	r6,sp,120
    8e18:	b80b883a 	mov	r5,r23
    8e1c:	9809883a 	mov	r4,r19
    8e20:	d9c03c15 	stw	r7,240(sp)
    8e24:	000e7b40 	call	e7b4 <__sprint_r>
    8e28:	d9c03c17 	ldw	r7,240(sp)
    8e2c:	103bd71e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8e30:	d8c02017 	ldw	r3,128(sp)
    8e34:	dc401f17 	ldw	r17,124(sp)
    8e38:	dd800404 	addi	r22,sp,16
    8e3c:	003fec06 	br	8df0 <__alt_exception_stack_pointer+0xf8008df0>
    8e40:	9080100c 	andi	r2,r18,64
    8e44:	d8002785 	stb	zero,158(sp)
    8e48:	10010e26 	beq	r2,zero,9284 <___vfprintf_internal_r+0x1908>
    8e4c:	d9402e17 	ldw	r5,184(sp)
    8e50:	d8c02a17 	ldw	r3,168(sp)
    8e54:	002d883a 	mov	r22,zero
    8e58:	28800104 	addi	r2,r5,4
    8e5c:	2cc0000b 	ldhu	r19,0(r5)
    8e60:	183fc90e 	bge	r3,zero,8d88 <__alt_exception_stack_pointer+0xf8008d88>
    8e64:	d8802e15 	stw	r2,184(sp)
    8e68:	0039883a 	mov	fp,zero
    8e6c:	9d84b03a 	or	r2,r19,r22
    8e70:	103c1e1e 	bne	r2,zero,7eec <__alt_exception_stack_pointer+0xf8007eec>
    8e74:	00800044 	movi	r2,1
    8e78:	003e6c06 	br	882c <__alt_exception_stack_pointer+0xf800882c>
    8e7c:	d9002d17 	ldw	r4,180(sp)
    8e80:	d9801e04 	addi	r6,sp,120
    8e84:	b80b883a 	mov	r5,r23
    8e88:	000e7b40 	call	e7b4 <__sprint_r>
    8e8c:	103bbf1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8e90:	d8c02017 	ldw	r3,128(sp)
    8e94:	da000404 	addi	r8,sp,16
    8e98:	d9003217 	ldw	r4,200(sp)
    8e9c:	d8802617 	ldw	r2,152(sp)
    8ea0:	d9403317 	ldw	r5,204(sp)
    8ea4:	8123883a 	add	r17,r16,r4
    8ea8:	11400216 	blt	r2,r5,8eb4 <___vfprintf_internal_r+0x1538>
    8eac:	9100004c 	andi	r4,r18,1
    8eb0:	20000d26 	beq	r4,zero,8ee8 <___vfprintf_internal_r+0x156c>
    8eb4:	d9003717 	ldw	r4,220(sp)
    8eb8:	d9403417 	ldw	r5,208(sp)
    8ebc:	1907883a 	add	r3,r3,r4
    8ec0:	d9001f17 	ldw	r4,124(sp)
    8ec4:	41400015 	stw	r5,0(r8)
    8ec8:	d9403717 	ldw	r5,220(sp)
    8ecc:	21000044 	addi	r4,r4,1
    8ed0:	d8c02015 	stw	r3,128(sp)
    8ed4:	41400115 	stw	r5,4(r8)
    8ed8:	d9001f15 	stw	r4,124(sp)
    8edc:	014001c4 	movi	r5,7
    8ee0:	2901e816 	blt	r5,r4,9684 <___vfprintf_internal_r+0x1d08>
    8ee4:	42000204 	addi	r8,r8,8
    8ee8:	d9003317 	ldw	r4,204(sp)
    8eec:	8121883a 	add	r16,r16,r4
    8ef0:	2085c83a 	sub	r2,r4,r2
    8ef4:	8461c83a 	sub	r16,r16,r17
    8ef8:	1400010e 	bge	r2,r16,8f00 <___vfprintf_internal_r+0x1584>
    8efc:	1021883a 	mov	r16,r2
    8f00:	04000a0e 	bge	zero,r16,8f2c <___vfprintf_internal_r+0x15b0>
    8f04:	d9001f17 	ldw	r4,124(sp)
    8f08:	1c07883a 	add	r3,r3,r16
    8f0c:	44400015 	stw	r17,0(r8)
    8f10:	21000044 	addi	r4,r4,1
    8f14:	44000115 	stw	r16,4(r8)
    8f18:	d8c02015 	stw	r3,128(sp)
    8f1c:	d9001f15 	stw	r4,124(sp)
    8f20:	014001c4 	movi	r5,7
    8f24:	2901fb16 	blt	r5,r4,9714 <___vfprintf_internal_r+0x1d98>
    8f28:	42000204 	addi	r8,r8,8
    8f2c:	8001f716 	blt	r16,zero,970c <___vfprintf_internal_r+0x1d90>
    8f30:	1421c83a 	sub	r16,r2,r16
    8f34:	043d160e 	bge	zero,r16,8390 <__alt_exception_stack_pointer+0xf8008390>
    8f38:	04400404 	movi	r17,16
    8f3c:	d8801f17 	ldw	r2,124(sp)
    8f40:	8c3efb0e 	bge	r17,r16,8b30 <__alt_exception_stack_pointer+0xf8008b30>
    8f44:	01400074 	movhi	r5,1
    8f48:	29558384 	addi	r5,r5,22030
    8f4c:	d9402c15 	stw	r5,176(sp)
    8f50:	058001c4 	movi	r22,7
    8f54:	dcc02d17 	ldw	r19,180(sp)
    8f58:	00000306 	br	8f68 <___vfprintf_internal_r+0x15ec>
    8f5c:	42000204 	addi	r8,r8,8
    8f60:	843ffc04 	addi	r16,r16,-16
    8f64:	8c3ef50e 	bge	r17,r16,8b3c <__alt_exception_stack_pointer+0xf8008b3c>
    8f68:	18c00404 	addi	r3,r3,16
    8f6c:	10800044 	addi	r2,r2,1
    8f70:	45000015 	stw	r20,0(r8)
    8f74:	44400115 	stw	r17,4(r8)
    8f78:	d8c02015 	stw	r3,128(sp)
    8f7c:	d8801f15 	stw	r2,124(sp)
    8f80:	b0bff60e 	bge	r22,r2,8f5c <__alt_exception_stack_pointer+0xf8008f5c>
    8f84:	d9801e04 	addi	r6,sp,120
    8f88:	b80b883a 	mov	r5,r23
    8f8c:	9809883a 	mov	r4,r19
    8f90:	000e7b40 	call	e7b4 <__sprint_r>
    8f94:	103b7d1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    8f98:	d8c02017 	ldw	r3,128(sp)
    8f9c:	d8801f17 	ldw	r2,124(sp)
    8fa0:	da000404 	addi	r8,sp,16
    8fa4:	003fee06 	br	8f60 <__alt_exception_stack_pointer+0xf8008f60>
    8fa8:	9088703a 	and	r4,r18,r2
    8fac:	203eab1e 	bne	r4,zero,8a5c <__alt_exception_stack_pointer+0xf8008a5c>
    8fb0:	dc401f17 	ldw	r17,124(sp)
    8fb4:	40800115 	stw	r2,4(r8)
    8fb8:	44000015 	stw	r16,0(r8)
    8fbc:	8c400044 	addi	r17,r17,1
    8fc0:	d8c02015 	stw	r3,128(sp)
    8fc4:	dc401f15 	stw	r17,124(sp)
    8fc8:	008001c4 	movi	r2,7
    8fcc:	14400e16 	blt	r2,r17,9008 <___vfprintf_internal_r+0x168c>
    8fd0:	45800204 	addi	r22,r8,8
    8fd4:	003eca06 	br	8b00 <__alt_exception_stack_pointer+0xf8008b00>
    8fd8:	01000074 	movhi	r4,1
    8fdc:	21158384 	addi	r4,r4,22030
    8fe0:	d9002c15 	stw	r4,176(sp)
    8fe4:	d8802c17 	ldw	r2,176(sp)
    8fe8:	1c07883a 	add	r3,r3,r16
    8fec:	8c400044 	addi	r17,r17,1
    8ff0:	b0800015 	stw	r2,0(r22)
    8ff4:	b4000115 	stw	r16,4(r22)
    8ff8:	d8c02015 	stw	r3,128(sp)
    8ffc:	dc401f15 	stw	r17,124(sp)
    9000:	008001c4 	movi	r2,7
    9004:	147ebd0e 	bge	r2,r17,8afc <__alt_exception_stack_pointer+0xf8008afc>
    9008:	d9002d17 	ldw	r4,180(sp)
    900c:	d9801e04 	addi	r6,sp,120
    9010:	b80b883a 	mov	r5,r23
    9014:	000e7b40 	call	e7b4 <__sprint_r>
    9018:	103b5c1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    901c:	d8c02017 	ldw	r3,128(sp)
    9020:	dc401f17 	ldw	r17,124(sp)
    9024:	dd800404 	addi	r22,sp,16
    9028:	003eb506 	br	8b00 <__alt_exception_stack_pointer+0xf8008b00>
    902c:	d9002d17 	ldw	r4,180(sp)
    9030:	d9801e04 	addi	r6,sp,120
    9034:	b80b883a 	mov	r5,r23
    9038:	000e7b40 	call	e7b4 <__sprint_r>
    903c:	103b531e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9040:	d8c02017 	ldw	r3,128(sp)
    9044:	dc401f17 	ldw	r17,124(sp)
    9048:	da000404 	addi	r8,sp,16
    904c:	003e8d06 	br	8a84 <__alt_exception_stack_pointer+0xf8008a84>
    9050:	d9002d17 	ldw	r4,180(sp)
    9054:	d9801e04 	addi	r6,sp,120
    9058:	b80b883a 	mov	r5,r23
    905c:	000e7b40 	call	e7b4 <__sprint_r>
    9060:	103b4a1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9064:	d8c02017 	ldw	r3,128(sp)
    9068:	dc401f17 	ldw	r17,124(sp)
    906c:	dd800404 	addi	r22,sp,16
    9070:	003e8f06 	br	8ab0 <__alt_exception_stack_pointer+0xf8008ab0>
    9074:	0027883a 	mov	r19,zero
    9078:	003f4a06 	br	8da4 <__alt_exception_stack_pointer+0xf8008da4>
    907c:	d9002d17 	ldw	r4,180(sp)
    9080:	d9801e04 	addi	r6,sp,120
    9084:	b80b883a 	mov	r5,r23
    9088:	000e7b40 	call	e7b4 <__sprint_r>
    908c:	103b3f1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9090:	d8c02017 	ldw	r3,128(sp)
    9094:	da000404 	addi	r8,sp,16
    9098:	003c7b06 	br	8288 <__alt_exception_stack_pointer+0xf8008288>
    909c:	d9402a17 	ldw	r5,168(sp)
    90a0:	04e7c83a 	sub	r19,zero,r19
    90a4:	07000b44 	movi	fp,45
    90a8:	9804c03a 	cmpne	r2,r19,zero
    90ac:	05adc83a 	sub	r22,zero,r22
    90b0:	df002785 	stb	fp,158(sp)
    90b4:	b0adc83a 	sub	r22,r22,r2
    90b8:	28017b16 	blt	r5,zero,96a8 <___vfprintf_internal_r+0x1d2c>
    90bc:	00bfdfc4 	movi	r2,-129
    90c0:	90a4703a 	and	r18,r18,r2
    90c4:	003b8906 	br	7eec <__alt_exception_stack_pointer+0xf8007eec>
    90c8:	d9003617 	ldw	r4,216(sp)
    90cc:	d9403817 	ldw	r5,224(sp)
    90d0:	da003d15 	stw	r8,244(sp)
    90d4:	000e42c0 	call	e42c <__fpclassifyd>
    90d8:	da003d17 	ldw	r8,244(sp)
    90dc:	1000f026 	beq	r2,zero,94a0 <___vfprintf_internal_r+0x1b24>
    90e0:	d9002a17 	ldw	r4,168(sp)
    90e4:	05bff7c4 	movi	r22,-33
    90e8:	00bfffc4 	movi	r2,-1
    90ec:	8dac703a 	and	r22,r17,r22
    90f0:	20820026 	beq	r4,r2,98f4 <___vfprintf_internal_r+0x1f78>
    90f4:	008011c4 	movi	r2,71
    90f8:	b081f726 	beq	r22,r2,98d8 <___vfprintf_internal_r+0x1f5c>
    90fc:	d9003817 	ldw	r4,224(sp)
    9100:	90c04014 	ori	r3,r18,256
    9104:	d8c02c15 	stw	r3,176(sp)
    9108:	20021516 	blt	r4,zero,9960 <___vfprintf_internal_r+0x1fe4>
    910c:	dcc03817 	ldw	r19,224(sp)
    9110:	d8002905 	stb	zero,164(sp)
    9114:	00801984 	movi	r2,102
    9118:	8881f926 	beq	r17,r2,9900 <___vfprintf_internal_r+0x1f84>
    911c:	00801184 	movi	r2,70
    9120:	88821c26 	beq	r17,r2,9994 <___vfprintf_internal_r+0x2018>
    9124:	00801144 	movi	r2,69
    9128:	b081ef26 	beq	r22,r2,98e8 <___vfprintf_internal_r+0x1f6c>
    912c:	d8c02a17 	ldw	r3,168(sp)
    9130:	d8802104 	addi	r2,sp,132
    9134:	d8800315 	stw	r2,12(sp)
    9138:	d9403617 	ldw	r5,216(sp)
    913c:	d8802504 	addi	r2,sp,148
    9140:	d9002d17 	ldw	r4,180(sp)
    9144:	d8800215 	stw	r2,8(sp)
    9148:	d8802604 	addi	r2,sp,152
    914c:	d8c00015 	stw	r3,0(sp)
    9150:	d8800115 	stw	r2,4(sp)
    9154:	01c00084 	movi	r7,2
    9158:	980d883a 	mov	r6,r19
    915c:	d8c03c15 	stw	r3,240(sp)
    9160:	da003d15 	stw	r8,244(sp)
    9164:	000a0ac0 	call	a0ac <_dtoa_r>
    9168:	1021883a 	mov	r16,r2
    916c:	008019c4 	movi	r2,103
    9170:	d8c03c17 	ldw	r3,240(sp)
    9174:	da003d17 	ldw	r8,244(sp)
    9178:	88817126 	beq	r17,r2,9740 <___vfprintf_internal_r+0x1dc4>
    917c:	008011c4 	movi	r2,71
    9180:	88829126 	beq	r17,r2,9bc8 <___vfprintf_internal_r+0x224c>
    9184:	80f9883a 	add	fp,r16,r3
    9188:	d9003617 	ldw	r4,216(sp)
    918c:	000d883a 	mov	r6,zero
    9190:	000f883a 	mov	r7,zero
    9194:	980b883a 	mov	r5,r19
    9198:	da003d15 	stw	r8,244(sp)
    919c:	00058f40 	call	58f4 <__eqdf2>
    91a0:	da003d17 	ldw	r8,244(sp)
    91a4:	10018d26 	beq	r2,zero,97dc <___vfprintf_internal_r+0x1e60>
    91a8:	d8802117 	ldw	r2,132(sp)
    91ac:	1700062e 	bgeu	r2,fp,91c8 <___vfprintf_internal_r+0x184c>
    91b0:	01000c04 	movi	r4,48
    91b4:	10c00044 	addi	r3,r2,1
    91b8:	d8c02115 	stw	r3,132(sp)
    91bc:	11000005 	stb	r4,0(r2)
    91c0:	d8802117 	ldw	r2,132(sp)
    91c4:	173ffb36 	bltu	r2,fp,91b4 <__alt_exception_stack_pointer+0xf80091b4>
    91c8:	1405c83a 	sub	r2,r2,r16
    91cc:	d8803315 	stw	r2,204(sp)
    91d0:	008011c4 	movi	r2,71
    91d4:	b0817626 	beq	r22,r2,97b0 <___vfprintf_internal_r+0x1e34>
    91d8:	00801944 	movi	r2,101
    91dc:	1442800e 	bge	r2,r17,9be0 <___vfprintf_internal_r+0x2264>
    91e0:	d8c02617 	ldw	r3,152(sp)
    91e4:	00801984 	movi	r2,102
    91e8:	d8c03215 	stw	r3,200(sp)
    91ec:	8881fe26 	beq	r17,r2,99e8 <___vfprintf_internal_r+0x206c>
    91f0:	d8c03217 	ldw	r3,200(sp)
    91f4:	d9003317 	ldw	r4,204(sp)
    91f8:	1901dd16 	blt	r3,r4,9970 <___vfprintf_internal_r+0x1ff4>
    91fc:	9480004c 	andi	r18,r18,1
    9200:	90022b1e 	bne	r18,zero,9ab0 <___vfprintf_internal_r+0x2134>
    9204:	1805883a 	mov	r2,r3
    9208:	18028316 	blt	r3,zero,9c18 <___vfprintf_internal_r+0x229c>
    920c:	d8c03217 	ldw	r3,200(sp)
    9210:	044019c4 	movi	r17,103
    9214:	d8c02b15 	stw	r3,172(sp)
    9218:	df002907 	ldb	fp,164(sp)
    921c:	e001531e 	bne	fp,zero,976c <___vfprintf_internal_r+0x1df0>
    9220:	df002783 	ldbu	fp,158(sp)
    9224:	d8802915 	stw	r2,164(sp)
    9228:	dc802c17 	ldw	r18,176(sp)
    922c:	d8002a15 	stw	zero,168(sp)
    9230:	003baf06 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    9234:	d8c02e17 	ldw	r3,184(sp)
    9238:	d9002e17 	ldw	r4,184(sp)
    923c:	d9402e17 	ldw	r5,184(sp)
    9240:	18c00017 	ldw	r3,0(r3)
    9244:	21000117 	ldw	r4,4(r4)
    9248:	29400204 	addi	r5,r5,8
    924c:	d8c03615 	stw	r3,216(sp)
    9250:	d9003815 	stw	r4,224(sp)
    9254:	d9402e15 	stw	r5,184(sp)
    9258:	003b5006 	br	7f9c <__alt_exception_stack_pointer+0xf8007f9c>
    925c:	ac400007 	ldb	r17,0(r21)
    9260:	003a2806 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    9264:	9080100c 	andi	r2,r18,64
    9268:	1000a826 	beq	r2,zero,950c <___vfprintf_internal_r+0x1b90>
    926c:	d8c02e17 	ldw	r3,184(sp)
    9270:	002d883a 	mov	r22,zero
    9274:	1cc0000b 	ldhu	r19,0(r3)
    9278:	18c00104 	addi	r3,r3,4
    927c:	d8c02e15 	stw	r3,184(sp)
    9280:	003caf06 	br	8540 <__alt_exception_stack_pointer+0xf8008540>
    9284:	d9002e17 	ldw	r4,184(sp)
    9288:	d9402a17 	ldw	r5,168(sp)
    928c:	002d883a 	mov	r22,zero
    9290:	20800104 	addi	r2,r4,4
    9294:	24c00017 	ldw	r19,0(r4)
    9298:	283ebb0e 	bge	r5,zero,8d88 <__alt_exception_stack_pointer+0xf8008d88>
    929c:	003ef106 	br	8e64 <__alt_exception_stack_pointer+0xf8008e64>
    92a0:	9080040c 	andi	r2,r18,16
    92a4:	1000921e 	bne	r2,zero,94f0 <___vfprintf_internal_r+0x1b74>
    92a8:	9480100c 	andi	r18,r18,64
    92ac:	90013926 	beq	r18,zero,9794 <___vfprintf_internal_r+0x1e18>
    92b0:	d9402e17 	ldw	r5,184(sp)
    92b4:	d8c02f17 	ldw	r3,188(sp)
    92b8:	28800017 	ldw	r2,0(r5)
    92bc:	29400104 	addi	r5,r5,4
    92c0:	d9402e15 	stw	r5,184(sp)
    92c4:	10c0000d 	sth	r3,0(r2)
    92c8:	0039e406 	br	7a5c <__alt_exception_stack_pointer+0xf8007a5c>
    92cc:	9080100c 	andi	r2,r18,64
    92d0:	10008026 	beq	r2,zero,94d4 <___vfprintf_internal_r+0x1b58>
    92d4:	d8802e17 	ldw	r2,184(sp)
    92d8:	14c0000f 	ldh	r19,0(r2)
    92dc:	10800104 	addi	r2,r2,4
    92e0:	d8802e15 	stw	r2,184(sp)
    92e4:	982dd7fa 	srai	r22,r19,31
    92e8:	b005883a 	mov	r2,r22
    92ec:	003af706 	br	7ecc <__alt_exception_stack_pointer+0xf8007ecc>
    92f0:	9080100c 	andi	r2,r18,64
    92f4:	d8002785 	stb	zero,158(sp)
    92f8:	10008a1e 	bne	r2,zero,9524 <___vfprintf_internal_r+0x1ba8>
    92fc:	d9002e17 	ldw	r4,184(sp)
    9300:	d9402a17 	ldw	r5,168(sp)
    9304:	002d883a 	mov	r22,zero
    9308:	20800104 	addi	r2,r4,4
    930c:	24c00017 	ldw	r19,0(r4)
    9310:	283e4b0e 	bge	r5,zero,8c40 <__alt_exception_stack_pointer+0xf8008c40>
    9314:	9d86b03a 	or	r3,r19,r22
    9318:	d8802e15 	stw	r2,184(sp)
    931c:	183e4c1e 	bne	r3,zero,8c50 <__alt_exception_stack_pointer+0xf8008c50>
    9320:	0039883a 	mov	fp,zero
    9324:	0005883a 	mov	r2,zero
    9328:	003d4006 	br	882c <__alt_exception_stack_pointer+0xf800882c>
    932c:	01400074 	movhi	r5,1
    9330:	29558384 	addi	r5,r5,22030
    9334:	d9402c15 	stw	r5,176(sp)
    9338:	d9402c17 	ldw	r5,176(sp)
    933c:	1c47883a 	add	r3,r3,r17
    9340:	10800044 	addi	r2,r2,1
    9344:	41400015 	stw	r5,0(r8)
    9348:	44400115 	stw	r17,4(r8)
    934c:	d8c02015 	stw	r3,128(sp)
    9350:	d8801f15 	stw	r2,124(sp)
    9354:	010001c4 	movi	r4,7
    9358:	20bec816 	blt	r4,r2,8e7c <__alt_exception_stack_pointer+0xf8008e7c>
    935c:	42000204 	addi	r8,r8,8
    9360:	003ecd06 	br	8e98 <__alt_exception_stack_pointer+0xf8008e98>
    9364:	d9002a17 	ldw	r4,168(sp)
    9368:	d8002785 	stb	zero,158(sp)
    936c:	203d2d16 	blt	r4,zero,8824 <__alt_exception_stack_pointer+0xf8008824>
    9370:	00bfdfc4 	movi	r2,-129
    9374:	90a4703a 	and	r18,r18,r2
    9378:	003a6106 	br	7d00 <__alt_exception_stack_pointer+0xf8007d00>
    937c:	01000074 	movhi	r4,1
    9380:	21158384 	addi	r4,r4,22030
    9384:	d9002c15 	stw	r4,176(sp)
    9388:	003bea06 	br	8334 <__alt_exception_stack_pointer+0xf8008334>
    938c:	d9002d17 	ldw	r4,180(sp)
    9390:	d9801e04 	addi	r6,sp,120
    9394:	b80b883a 	mov	r5,r23
    9398:	000e7b40 	call	e7b4 <__sprint_r>
    939c:	103a7b1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    93a0:	d8c02017 	ldw	r3,128(sp)
    93a4:	da000404 	addi	r8,sp,16
    93a8:	003d4106 	br	88b0 <__alt_exception_stack_pointer+0xf80088b0>
    93ac:	d8801f17 	ldw	r2,124(sp)
    93b0:	01400074 	movhi	r5,1
    93b4:	01000044 	movi	r4,1
    93b8:	18c00044 	addi	r3,r3,1
    93bc:	10800044 	addi	r2,r2,1
    93c0:	29558304 	addi	r5,r5,22028
    93c4:	41000115 	stw	r4,4(r8)
    93c8:	41400015 	stw	r5,0(r8)
    93cc:	d8c02015 	stw	r3,128(sp)
    93d0:	d8801f15 	stw	r2,124(sp)
    93d4:	010001c4 	movi	r4,7
    93d8:	20805c16 	blt	r4,r2,954c <___vfprintf_internal_r+0x1bd0>
    93dc:	42000204 	addi	r8,r8,8
    93e0:	8800041e 	bne	r17,zero,93f4 <___vfprintf_internal_r+0x1a78>
    93e4:	d8803317 	ldw	r2,204(sp)
    93e8:	1000021e 	bne	r2,zero,93f4 <___vfprintf_internal_r+0x1a78>
    93ec:	9080004c 	andi	r2,r18,1
    93f0:	103be726 	beq	r2,zero,8390 <__alt_exception_stack_pointer+0xf8008390>
    93f4:	d9003717 	ldw	r4,220(sp)
    93f8:	d8801f17 	ldw	r2,124(sp)
    93fc:	d9403417 	ldw	r5,208(sp)
    9400:	20c7883a 	add	r3,r4,r3
    9404:	10800044 	addi	r2,r2,1
    9408:	41000115 	stw	r4,4(r8)
    940c:	41400015 	stw	r5,0(r8)
    9410:	d8c02015 	stw	r3,128(sp)
    9414:	d8801f15 	stw	r2,124(sp)
    9418:	010001c4 	movi	r4,7
    941c:	20812116 	blt	r4,r2,98a4 <___vfprintf_internal_r+0x1f28>
    9420:	42000204 	addi	r8,r8,8
    9424:	0463c83a 	sub	r17,zero,r17
    9428:	0440730e 	bge	zero,r17,95f8 <___vfprintf_internal_r+0x1c7c>
    942c:	05800404 	movi	r22,16
    9430:	b440860e 	bge	r22,r17,964c <___vfprintf_internal_r+0x1cd0>
    9434:	01400074 	movhi	r5,1
    9438:	29558384 	addi	r5,r5,22030
    943c:	d9402c15 	stw	r5,176(sp)
    9440:	070001c4 	movi	fp,7
    9444:	dcc02d17 	ldw	r19,180(sp)
    9448:	00000306 	br	9458 <___vfprintf_internal_r+0x1adc>
    944c:	42000204 	addi	r8,r8,8
    9450:	8c7ffc04 	addi	r17,r17,-16
    9454:	b440800e 	bge	r22,r17,9658 <___vfprintf_internal_r+0x1cdc>
    9458:	18c00404 	addi	r3,r3,16
    945c:	10800044 	addi	r2,r2,1
    9460:	45000015 	stw	r20,0(r8)
    9464:	45800115 	stw	r22,4(r8)
    9468:	d8c02015 	stw	r3,128(sp)
    946c:	d8801f15 	stw	r2,124(sp)
    9470:	e0bff60e 	bge	fp,r2,944c <__alt_exception_stack_pointer+0xf800944c>
    9474:	d9801e04 	addi	r6,sp,120
    9478:	b80b883a 	mov	r5,r23
    947c:	9809883a 	mov	r4,r19
    9480:	000e7b40 	call	e7b4 <__sprint_r>
    9484:	103a411e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9488:	d8c02017 	ldw	r3,128(sp)
    948c:	d8801f17 	ldw	r2,124(sp)
    9490:	da000404 	addi	r8,sp,16
    9494:	003fee06 	br	9450 <__alt_exception_stack_pointer+0xf8009450>
    9498:	00bfffc4 	movi	r2,-1
    949c:	003a3f06 	br	7d9c <__alt_exception_stack_pointer+0xf8007d9c>
    94a0:	008011c4 	movi	r2,71
    94a4:	1440b816 	blt	r2,r17,9788 <___vfprintf_internal_r+0x1e0c>
    94a8:	04000074 	movhi	r16,1
    94ac:	84157504 	addi	r16,r16,21972
    94b0:	00c000c4 	movi	r3,3
    94b4:	00bfdfc4 	movi	r2,-129
    94b8:	d8c02915 	stw	r3,164(sp)
    94bc:	90a4703a 	and	r18,r18,r2
    94c0:	df002783 	ldbu	fp,158(sp)
    94c4:	d8c02b15 	stw	r3,172(sp)
    94c8:	d8002a15 	stw	zero,168(sp)
    94cc:	d8003215 	stw	zero,200(sp)
    94d0:	003b0706 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    94d4:	d8c02e17 	ldw	r3,184(sp)
    94d8:	1cc00017 	ldw	r19,0(r3)
    94dc:	18c00104 	addi	r3,r3,4
    94e0:	d8c02e15 	stw	r3,184(sp)
    94e4:	982dd7fa 	srai	r22,r19,31
    94e8:	b005883a 	mov	r2,r22
    94ec:	003a7706 	br	7ecc <__alt_exception_stack_pointer+0xf8007ecc>
    94f0:	d8c02e17 	ldw	r3,184(sp)
    94f4:	d9002f17 	ldw	r4,188(sp)
    94f8:	18800017 	ldw	r2,0(r3)
    94fc:	18c00104 	addi	r3,r3,4
    9500:	d8c02e15 	stw	r3,184(sp)
    9504:	11000015 	stw	r4,0(r2)
    9508:	00395406 	br	7a5c <__alt_exception_stack_pointer+0xf8007a5c>
    950c:	d9002e17 	ldw	r4,184(sp)
    9510:	002d883a 	mov	r22,zero
    9514:	24c00017 	ldw	r19,0(r4)
    9518:	21000104 	addi	r4,r4,4
    951c:	d9002e15 	stw	r4,184(sp)
    9520:	003c0706 	br	8540 <__alt_exception_stack_pointer+0xf8008540>
    9524:	d9402e17 	ldw	r5,184(sp)
    9528:	d8c02a17 	ldw	r3,168(sp)
    952c:	002d883a 	mov	r22,zero
    9530:	28800104 	addi	r2,r5,4
    9534:	2cc0000b 	ldhu	r19,0(r5)
    9538:	183dc10e 	bge	r3,zero,8c40 <__alt_exception_stack_pointer+0xf8008c40>
    953c:	003f7506 	br	9314 <__alt_exception_stack_pointer+0xf8009314>
    9540:	04000074 	movhi	r16,1
    9544:	84157304 	addi	r16,r16,21964
    9548:	003aa706 	br	7fe8 <__alt_exception_stack_pointer+0xf8007fe8>
    954c:	d9002d17 	ldw	r4,180(sp)
    9550:	d9801e04 	addi	r6,sp,120
    9554:	b80b883a 	mov	r5,r23
    9558:	000e7b40 	call	e7b4 <__sprint_r>
    955c:	103a0b1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9560:	dc402617 	ldw	r17,152(sp)
    9564:	d8c02017 	ldw	r3,128(sp)
    9568:	da000404 	addi	r8,sp,16
    956c:	003f9c06 	br	93e0 <__alt_exception_stack_pointer+0xf80093e0>
    9570:	ac400043 	ldbu	r17,1(r21)
    9574:	84000814 	ori	r16,r16,32
    9578:	ad400044 	addi	r21,r21,1
    957c:	8c403fcc 	andi	r17,r17,255
    9580:	8c40201c 	xori	r17,r17,128
    9584:	8c7fe004 	addi	r17,r17,-128
    9588:	00395e06 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    958c:	d8c02e15 	stw	r3,184(sp)
    9590:	0039883a 	mov	fp,zero
    9594:	003e3506 	br	8e6c <__alt_exception_stack_pointer+0xf8008e6c>
    9598:	d9002d17 	ldw	r4,180(sp)
    959c:	d9801e04 	addi	r6,sp,120
    95a0:	b80b883a 	mov	r5,r23
    95a4:	000e7b40 	call	e7b4 <__sprint_r>
    95a8:	1039f81e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    95ac:	d8c02017 	ldw	r3,128(sp)
    95b0:	da000404 	addi	r8,sp,16
    95b4:	003cd006 	br	88f8 <__alt_exception_stack_pointer+0xf80088f8>
    95b8:	8009883a 	mov	r4,r16
    95bc:	df003d15 	stw	fp,244(sp)
    95c0:	00078dc0 	call	78dc <strlen>
    95c4:	d8802b15 	stw	r2,172(sp)
    95c8:	da003d17 	ldw	r8,244(sp)
    95cc:	103c200e 	bge	r2,zero,8650 <__alt_exception_stack_pointer+0xf8008650>
    95d0:	0005883a 	mov	r2,zero
    95d4:	003c1e06 	br	8650 <__alt_exception_stack_pointer+0xf8008650>
    95d8:	d9002d17 	ldw	r4,180(sp)
    95dc:	d9801e04 	addi	r6,sp,120
    95e0:	b80b883a 	mov	r5,r23
    95e4:	000e7b40 	call	e7b4 <__sprint_r>
    95e8:	1039e81e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    95ec:	d8c02017 	ldw	r3,128(sp)
    95f0:	d8801f17 	ldw	r2,124(sp)
    95f4:	da000404 	addi	r8,sp,16
    95f8:	d9403317 	ldw	r5,204(sp)
    95fc:	10800044 	addi	r2,r2,1
    9600:	44000015 	stw	r16,0(r8)
    9604:	28c7883a 	add	r3,r5,r3
    9608:	003b5b06 	br	8378 <__alt_exception_stack_pointer+0xf8008378>
    960c:	01000074 	movhi	r4,1
    9610:	21158784 	addi	r4,r4,22046
    9614:	d9003515 	stw	r4,212(sp)
    9618:	003af206 	br	81e4 <__alt_exception_stack_pointer+0xf80081e4>
    961c:	013fffc4 	movi	r4,-1
    9620:	003a0806 	br	7e44 <__alt_exception_stack_pointer+0xf8007e44>
    9624:	0023883a 	mov	r17,zero
    9628:	003d9d06 	br	8ca0 <__alt_exception_stack_pointer+0xf8008ca0>
    962c:	d9002d17 	ldw	r4,180(sp)
    9630:	d9801e04 	addi	r6,sp,120
    9634:	b80b883a 	mov	r5,r23
    9638:	000e7b40 	call	e7b4 <__sprint_r>
    963c:	1039d31e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9640:	d8c02017 	ldw	r3,128(sp)
    9644:	da000404 	addi	r8,sp,16
    9648:	003d9406 	br	8c9c <__alt_exception_stack_pointer+0xf8008c9c>
    964c:	01000074 	movhi	r4,1
    9650:	21158384 	addi	r4,r4,22030
    9654:	d9002c15 	stw	r4,176(sp)
    9658:	d9002c17 	ldw	r4,176(sp)
    965c:	1c47883a 	add	r3,r3,r17
    9660:	10800044 	addi	r2,r2,1
    9664:	41000015 	stw	r4,0(r8)
    9668:	44400115 	stw	r17,4(r8)
    966c:	d8c02015 	stw	r3,128(sp)
    9670:	d8801f15 	stw	r2,124(sp)
    9674:	010001c4 	movi	r4,7
    9678:	20bfd716 	blt	r4,r2,95d8 <__alt_exception_stack_pointer+0xf80095d8>
    967c:	42000204 	addi	r8,r8,8
    9680:	003fdd06 	br	95f8 <__alt_exception_stack_pointer+0xf80095f8>
    9684:	d9002d17 	ldw	r4,180(sp)
    9688:	d9801e04 	addi	r6,sp,120
    968c:	b80b883a 	mov	r5,r23
    9690:	000e7b40 	call	e7b4 <__sprint_r>
    9694:	1039bd1e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9698:	d8802617 	ldw	r2,152(sp)
    969c:	d8c02017 	ldw	r3,128(sp)
    96a0:	da000404 	addi	r8,sp,16
    96a4:	003e1006 	br	8ee8 <__alt_exception_stack_pointer+0xf8008ee8>
    96a8:	00800044 	movi	r2,1
    96ac:	10803fcc 	andi	r2,r2,255
    96b0:	00c00044 	movi	r3,1
    96b4:	10fa0d26 	beq	r2,r3,7eec <__alt_exception_stack_pointer+0xf8007eec>
    96b8:	00c00084 	movi	r3,2
    96bc:	10fbaf26 	beq	r2,r3,857c <__alt_exception_stack_pointer+0xf800857c>
    96c0:	003a6d06 	br	8078 <__alt_exception_stack_pointer+0xf8008078>
    96c4:	01000074 	movhi	r4,1
    96c8:	21158784 	addi	r4,r4,22046
    96cc:	d9003515 	stw	r4,212(sp)
    96d0:	003b5406 	br	8424 <__alt_exception_stack_pointer+0xf8008424>
    96d4:	d8802a17 	ldw	r2,168(sp)
    96d8:	00c00184 	movi	r3,6
    96dc:	1880012e 	bgeu	r3,r2,96e4 <___vfprintf_internal_r+0x1d68>
    96e0:	1805883a 	mov	r2,r3
    96e4:	d8802b15 	stw	r2,172(sp)
    96e8:	1000ef16 	blt	r2,zero,9aa8 <___vfprintf_internal_r+0x212c>
    96ec:	04000074 	movhi	r16,1
    96f0:	d8802915 	stw	r2,164(sp)
    96f4:	dcc02e15 	stw	r19,184(sp)
    96f8:	d8002a15 	stw	zero,168(sp)
    96fc:	d8003215 	stw	zero,200(sp)
    9700:	84158104 	addi	r16,r16,22020
    9704:	0039883a 	mov	fp,zero
    9708:	003a8006 	br	810c <__alt_exception_stack_pointer+0xf800810c>
    970c:	0021883a 	mov	r16,zero
    9710:	003e0706 	br	8f30 <__alt_exception_stack_pointer+0xf8008f30>
    9714:	d9002d17 	ldw	r4,180(sp)
    9718:	d9801e04 	addi	r6,sp,120
    971c:	b80b883a 	mov	r5,r23
    9720:	000e7b40 	call	e7b4 <__sprint_r>
    9724:	1039991e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    9728:	d8802617 	ldw	r2,152(sp)
    972c:	d9403317 	ldw	r5,204(sp)
    9730:	d8c02017 	ldw	r3,128(sp)
    9734:	da000404 	addi	r8,sp,16
    9738:	2885c83a 	sub	r2,r5,r2
    973c:	003dfb06 	br	8f2c <__alt_exception_stack_pointer+0xf8008f2c>
    9740:	9080004c 	andi	r2,r18,1
    9744:	103e8f1e 	bne	r2,zero,9184 <__alt_exception_stack_pointer+0xf8009184>
    9748:	d8802117 	ldw	r2,132(sp)
    974c:	003e9e06 	br	91c8 <__alt_exception_stack_pointer+0xf80091c8>
    9750:	1025883a 	mov	r18,r2
    9754:	0039883a 	mov	fp,zero
    9758:	00800084 	movi	r2,2
    975c:	003fd306 	br	96ac <__alt_exception_stack_pointer+0xf80096ac>
    9760:	07000b44 	movi	fp,45
    9764:	df002785 	stb	fp,158(sp)
    9768:	003a1b06 	br	7fd8 <__alt_exception_stack_pointer+0xf8007fd8>
    976c:	00c00b44 	movi	r3,45
    9770:	d8c02785 	stb	r3,158(sp)
    9774:	d8802915 	stw	r2,164(sp)
    9778:	dc802c17 	ldw	r18,176(sp)
    977c:	d8002a15 	stw	zero,168(sp)
    9780:	07000b44 	movi	fp,45
    9784:	003a5e06 	br	8100 <__alt_exception_stack_pointer+0xf8008100>
    9788:	04000074 	movhi	r16,1
    978c:	84157604 	addi	r16,r16,21976
    9790:	003f4706 	br	94b0 <__alt_exception_stack_pointer+0xf80094b0>
    9794:	d9002e17 	ldw	r4,184(sp)
    9798:	d9402f17 	ldw	r5,188(sp)
    979c:	20800017 	ldw	r2,0(r4)
    97a0:	21000104 	addi	r4,r4,4
    97a4:	d9002e15 	stw	r4,184(sp)
    97a8:	11400015 	stw	r5,0(r2)
    97ac:	0038ab06 	br	7a5c <__alt_exception_stack_pointer+0xf8007a5c>
    97b0:	dd802617 	ldw	r22,152(sp)
    97b4:	00bfff44 	movi	r2,-3
    97b8:	b0801c16 	blt	r22,r2,982c <___vfprintf_internal_r+0x1eb0>
    97bc:	d9402a17 	ldw	r5,168(sp)
    97c0:	2d801a16 	blt	r5,r22,982c <___vfprintf_internal_r+0x1eb0>
    97c4:	dd803215 	stw	r22,200(sp)
    97c8:	003e8906 	br	91f0 <__alt_exception_stack_pointer+0xf80091f0>
    97cc:	01000074 	movhi	r4,1
    97d0:	21158384 	addi	r4,r4,22030
    97d4:	d9002c15 	stw	r4,176(sp)
    97d8:	003c9106 	br	8a20 <__alt_exception_stack_pointer+0xf8008a20>
    97dc:	e005883a 	mov	r2,fp
    97e0:	003e7906 	br	91c8 <__alt_exception_stack_pointer+0xf80091c8>
    97e4:	d9002a17 	ldw	r4,168(sp)
    97e8:	df002783 	ldbu	fp,158(sp)
    97ec:	dcc02e15 	stw	r19,184(sp)
    97f0:	d9002915 	stw	r4,164(sp)
    97f4:	d9002b15 	stw	r4,172(sp)
    97f8:	d8002a15 	stw	zero,168(sp)
    97fc:	d8003215 	stw	zero,200(sp)
    9800:	003a3b06 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    9804:	9080004c 	andi	r2,r18,1
    9808:	0039883a 	mov	fp,zero
    980c:	10000426 	beq	r2,zero,9820 <___vfprintf_internal_r+0x1ea4>
    9810:	00800c04 	movi	r2,48
    9814:	dc001dc4 	addi	r16,sp,119
    9818:	d8801dc5 	stb	r2,119(sp)
    981c:	003b6406 	br	85b0 <__alt_exception_stack_pointer+0xf80085b0>
    9820:	d8002b15 	stw	zero,172(sp)
    9824:	dc001e04 	addi	r16,sp,120
    9828:	003a2b06 	br	80d8 <__alt_exception_stack_pointer+0xf80080d8>
    982c:	8c7fff84 	addi	r17,r17,-2
    9830:	b5bfffc4 	addi	r22,r22,-1
    9834:	dd802615 	stw	r22,152(sp)
    9838:	dc4022c5 	stb	r17,139(sp)
    983c:	b000bf16 	blt	r22,zero,9b3c <___vfprintf_internal_r+0x21c0>
    9840:	00800ac4 	movi	r2,43
    9844:	d8802305 	stb	r2,140(sp)
    9848:	00800244 	movi	r2,9
    984c:	15807016 	blt	r2,r22,9a10 <___vfprintf_internal_r+0x2094>
    9850:	00800c04 	movi	r2,48
    9854:	b5800c04 	addi	r22,r22,48
    9858:	d8802345 	stb	r2,141(sp)
    985c:	dd802385 	stb	r22,142(sp)
    9860:	d88023c4 	addi	r2,sp,143
    9864:	df0022c4 	addi	fp,sp,139
    9868:	d8c03317 	ldw	r3,204(sp)
    986c:	1739c83a 	sub	fp,r2,fp
    9870:	d9003317 	ldw	r4,204(sp)
    9874:	e0c7883a 	add	r3,fp,r3
    9878:	df003a15 	stw	fp,232(sp)
    987c:	d8c02b15 	stw	r3,172(sp)
    9880:	00800044 	movi	r2,1
    9884:	1100b30e 	bge	r2,r4,9b54 <___vfprintf_internal_r+0x21d8>
    9888:	d8c02b17 	ldw	r3,172(sp)
    988c:	18c00044 	addi	r3,r3,1
    9890:	d8c02b15 	stw	r3,172(sp)
    9894:	1805883a 	mov	r2,r3
    9898:	1800ac16 	blt	r3,zero,9b4c <___vfprintf_internal_r+0x21d0>
    989c:	d8003215 	stw	zero,200(sp)
    98a0:	003e5d06 	br	9218 <__alt_exception_stack_pointer+0xf8009218>
    98a4:	d9002d17 	ldw	r4,180(sp)
    98a8:	d9801e04 	addi	r6,sp,120
    98ac:	b80b883a 	mov	r5,r23
    98b0:	000e7b40 	call	e7b4 <__sprint_r>
    98b4:	1039351e 	bne	r2,zero,7d8c <__alt_exception_stack_pointer+0xf8007d8c>
    98b8:	dc402617 	ldw	r17,152(sp)
    98bc:	d8c02017 	ldw	r3,128(sp)
    98c0:	d8801f17 	ldw	r2,124(sp)
    98c4:	da000404 	addi	r8,sp,16
    98c8:	003ed606 	br	9424 <__alt_exception_stack_pointer+0xf8009424>
    98cc:	182b883a 	mov	r21,r3
    98d0:	d8002a15 	stw	zero,168(sp)
    98d4:	00388c06 	br	7b08 <__alt_exception_stack_pointer+0xf8007b08>
    98d8:	d8802a17 	ldw	r2,168(sp)
    98dc:	103e071e 	bne	r2,zero,90fc <__alt_exception_stack_pointer+0xf80090fc>
    98e0:	dc002a15 	stw	r16,168(sp)
    98e4:	003e0506 	br	90fc <__alt_exception_stack_pointer+0xf80090fc>
    98e8:	d9002a17 	ldw	r4,168(sp)
    98ec:	20c00044 	addi	r3,r4,1
    98f0:	003e0f06 	br	9130 <__alt_exception_stack_pointer+0xf8009130>
    98f4:	01400184 	movi	r5,6
    98f8:	d9402a15 	stw	r5,168(sp)
    98fc:	003dff06 	br	90fc <__alt_exception_stack_pointer+0xf80090fc>
    9900:	d8802104 	addi	r2,sp,132
    9904:	d8800315 	stw	r2,12(sp)
    9908:	d8802504 	addi	r2,sp,148
    990c:	d8800215 	stw	r2,8(sp)
    9910:	d8802604 	addi	r2,sp,152
    9914:	d8800115 	stw	r2,4(sp)
    9918:	d8802a17 	ldw	r2,168(sp)
    991c:	d9403617 	ldw	r5,216(sp)
    9920:	d9002d17 	ldw	r4,180(sp)
    9924:	d8800015 	stw	r2,0(sp)
    9928:	01c000c4 	movi	r7,3
    992c:	980d883a 	mov	r6,r19
    9930:	da003d15 	stw	r8,244(sp)
    9934:	000a0ac0 	call	a0ac <_dtoa_r>
    9938:	d8c02a17 	ldw	r3,168(sp)
    993c:	da003d17 	ldw	r8,244(sp)
    9940:	1021883a 	mov	r16,r2
    9944:	10f9883a 	add	fp,r2,r3
    9948:	81000007 	ldb	r4,0(r16)
    994c:	00800c04 	movi	r2,48
    9950:	20805e26 	beq	r4,r2,9acc <___vfprintf_internal_r+0x2150>
    9954:	d8c02617 	ldw	r3,152(sp)
    9958:	e0f9883a 	add	fp,fp,r3
    995c:	003e0a06 	br	9188 <__alt_exception_stack_pointer+0xf8009188>
    9960:	00c00b44 	movi	r3,45
    9964:	24e0003c 	xorhi	r19,r4,32768
    9968:	d8c02905 	stb	r3,164(sp)
    996c:	003de906 	br	9114 <__alt_exception_stack_pointer+0xf8009114>
    9970:	d8c03217 	ldw	r3,200(sp)
    9974:	00c07a0e 	bge	zero,r3,9b60 <___vfprintf_internal_r+0x21e4>
    9978:	00800044 	movi	r2,1
    997c:	d9003317 	ldw	r4,204(sp)
    9980:	1105883a 	add	r2,r2,r4
    9984:	d8802b15 	stw	r2,172(sp)
    9988:	10004e16 	blt	r2,zero,9ac4 <___vfprintf_internal_r+0x2148>
    998c:	044019c4 	movi	r17,103
    9990:	003e2106 	br	9218 <__alt_exception_stack_pointer+0xf8009218>
    9994:	d9002a17 	ldw	r4,168(sp)
    9998:	d8802104 	addi	r2,sp,132
    999c:	d8800315 	stw	r2,12(sp)
    99a0:	d9000015 	stw	r4,0(sp)
    99a4:	d8802504 	addi	r2,sp,148
    99a8:	d9403617 	ldw	r5,216(sp)
    99ac:	d9002d17 	ldw	r4,180(sp)
    99b0:	d8800215 	stw	r2,8(sp)
    99b4:	d8802604 	addi	r2,sp,152
    99b8:	d8800115 	stw	r2,4(sp)
    99bc:	01c000c4 	movi	r7,3
    99c0:	980d883a 	mov	r6,r19
    99c4:	da003d15 	stw	r8,244(sp)
    99c8:	000a0ac0 	call	a0ac <_dtoa_r>
    99cc:	d8c02a17 	ldw	r3,168(sp)
    99d0:	da003d17 	ldw	r8,244(sp)
    99d4:	1021883a 	mov	r16,r2
    99d8:	00801184 	movi	r2,70
    99dc:	80f9883a 	add	fp,r16,r3
    99e0:	88bfd926 	beq	r17,r2,9948 <__alt_exception_stack_pointer+0xf8009948>
    99e4:	003de806 	br	9188 <__alt_exception_stack_pointer+0xf8009188>
    99e8:	d9002a17 	ldw	r4,168(sp)
    99ec:	00c04d0e 	bge	zero,r3,9b24 <___vfprintf_internal_r+0x21a8>
    99f0:	2000441e 	bne	r4,zero,9b04 <___vfprintf_internal_r+0x2188>
    99f4:	9480004c 	andi	r18,r18,1
    99f8:	9000421e 	bne	r18,zero,9b04 <___vfprintf_internal_r+0x2188>
    99fc:	1805883a 	mov	r2,r3
    9a00:	18006f16 	blt	r3,zero,9bc0 <___vfprintf_internal_r+0x2244>
    9a04:	d8c03217 	ldw	r3,200(sp)
    9a08:	d8c02b15 	stw	r3,172(sp)
    9a0c:	003e0206 	br	9218 <__alt_exception_stack_pointer+0xf8009218>
    9a10:	df0022c4 	addi	fp,sp,139
    9a14:	dc002a15 	stw	r16,168(sp)
    9a18:	4027883a 	mov	r19,r8
    9a1c:	e021883a 	mov	r16,fp
    9a20:	b009883a 	mov	r4,r22
    9a24:	01400284 	movi	r5,10
    9a28:	0004ef00 	call	4ef0 <__modsi3>
    9a2c:	10800c04 	addi	r2,r2,48
    9a30:	843fffc4 	addi	r16,r16,-1
    9a34:	b009883a 	mov	r4,r22
    9a38:	01400284 	movi	r5,10
    9a3c:	80800005 	stb	r2,0(r16)
    9a40:	0004e6c0 	call	4e6c <__divsi3>
    9a44:	102d883a 	mov	r22,r2
    9a48:	00800244 	movi	r2,9
    9a4c:	15bff416 	blt	r2,r22,9a20 <__alt_exception_stack_pointer+0xf8009a20>
    9a50:	9811883a 	mov	r8,r19
    9a54:	b0800c04 	addi	r2,r22,48
    9a58:	8027883a 	mov	r19,r16
    9a5c:	997fffc4 	addi	r5,r19,-1
    9a60:	98bfffc5 	stb	r2,-1(r19)
    9a64:	dc002a17 	ldw	r16,168(sp)
    9a68:	2f006d2e 	bgeu	r5,fp,9c20 <___vfprintf_internal_r+0x22a4>
    9a6c:	d9c02384 	addi	r7,sp,142
    9a70:	3ccfc83a 	sub	r7,r7,r19
    9a74:	d9002344 	addi	r4,sp,141
    9a78:	e1cf883a 	add	r7,fp,r7
    9a7c:	00000106 	br	9a84 <___vfprintf_internal_r+0x2108>
    9a80:	28800003 	ldbu	r2,0(r5)
    9a84:	20800005 	stb	r2,0(r4)
    9a88:	21000044 	addi	r4,r4,1
    9a8c:	29400044 	addi	r5,r5,1
    9a90:	393ffb1e 	bne	r7,r4,9a80 <__alt_exception_stack_pointer+0xf8009a80>
    9a94:	d8802304 	addi	r2,sp,140
    9a98:	14c5c83a 	sub	r2,r2,r19
    9a9c:	d8c02344 	addi	r3,sp,141
    9aa0:	1885883a 	add	r2,r3,r2
    9aa4:	003f7006 	br	9868 <__alt_exception_stack_pointer+0xf8009868>
    9aa8:	0005883a 	mov	r2,zero
    9aac:	003f0f06 	br	96ec <__alt_exception_stack_pointer+0xf80096ec>
    9ab0:	d8c03217 	ldw	r3,200(sp)
    9ab4:	18c00044 	addi	r3,r3,1
    9ab8:	d8c02b15 	stw	r3,172(sp)
    9abc:	1805883a 	mov	r2,r3
    9ac0:	183fb20e 	bge	r3,zero,998c <__alt_exception_stack_pointer+0xf800998c>
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	003fb006 	br	998c <__alt_exception_stack_pointer+0xf800998c>
    9acc:	d9003617 	ldw	r4,216(sp)
    9ad0:	000d883a 	mov	r6,zero
    9ad4:	000f883a 	mov	r7,zero
    9ad8:	980b883a 	mov	r5,r19
    9adc:	d8c03c15 	stw	r3,240(sp)
    9ae0:	da003d15 	stw	r8,244(sp)
    9ae4:	00058f40 	call	58f4 <__eqdf2>
    9ae8:	d8c03c17 	ldw	r3,240(sp)
    9aec:	da003d17 	ldw	r8,244(sp)
    9af0:	103f9826 	beq	r2,zero,9954 <__alt_exception_stack_pointer+0xf8009954>
    9af4:	00800044 	movi	r2,1
    9af8:	10c7c83a 	sub	r3,r2,r3
    9afc:	d8c02615 	stw	r3,152(sp)
    9b00:	003f9506 	br	9958 <__alt_exception_stack_pointer+0xf8009958>
    9b04:	d9002a17 	ldw	r4,168(sp)
    9b08:	d8c03217 	ldw	r3,200(sp)
    9b0c:	20800044 	addi	r2,r4,1
    9b10:	1885883a 	add	r2,r3,r2
    9b14:	d8802b15 	stw	r2,172(sp)
    9b18:	103dbf0e 	bge	r2,zero,9218 <__alt_exception_stack_pointer+0xf8009218>
    9b1c:	0005883a 	mov	r2,zero
    9b20:	003dbd06 	br	9218 <__alt_exception_stack_pointer+0xf8009218>
    9b24:	2000201e 	bne	r4,zero,9ba8 <___vfprintf_internal_r+0x222c>
    9b28:	9480004c 	andi	r18,r18,1
    9b2c:	90001e1e 	bne	r18,zero,9ba8 <___vfprintf_internal_r+0x222c>
    9b30:	00800044 	movi	r2,1
    9b34:	d8802b15 	stw	r2,172(sp)
    9b38:	003db706 	br	9218 <__alt_exception_stack_pointer+0xf8009218>
    9b3c:	00800b44 	movi	r2,45
    9b40:	05adc83a 	sub	r22,zero,r22
    9b44:	d8802305 	stb	r2,140(sp)
    9b48:	003f3f06 	br	9848 <__alt_exception_stack_pointer+0xf8009848>
    9b4c:	0005883a 	mov	r2,zero
    9b50:	003f5206 	br	989c <__alt_exception_stack_pointer+0xf800989c>
    9b54:	90a4703a 	and	r18,r18,r2
    9b58:	903f4e26 	beq	r18,zero,9894 <__alt_exception_stack_pointer+0xf8009894>
    9b5c:	003f4a06 	br	9888 <__alt_exception_stack_pointer+0xf8009888>
    9b60:	00800084 	movi	r2,2
    9b64:	10c5c83a 	sub	r2,r2,r3
    9b68:	003f8406 	br	997c <__alt_exception_stack_pointer+0xf800997c>
    9b6c:	d9402e17 	ldw	r5,184(sp)
    9b70:	d9002e17 	ldw	r4,184(sp)
    9b74:	ac400043 	ldbu	r17,1(r21)
    9b78:	29400017 	ldw	r5,0(r5)
    9b7c:	20800104 	addi	r2,r4,4
    9b80:	d8802e15 	stw	r2,184(sp)
    9b84:	d9402a15 	stw	r5,168(sp)
    9b88:	182b883a 	mov	r21,r3
    9b8c:	283e7b0e 	bge	r5,zero,957c <__alt_exception_stack_pointer+0xf800957c>
    9b90:	8c403fcc 	andi	r17,r17,255
    9b94:	017fffc4 	movi	r5,-1
    9b98:	8c40201c 	xori	r17,r17,128
    9b9c:	d9402a15 	stw	r5,168(sp)
    9ba0:	8c7fe004 	addi	r17,r17,-128
    9ba4:	0037d706 	br	7b04 <__alt_exception_stack_pointer+0xf8007b04>
    9ba8:	d8c02a17 	ldw	r3,168(sp)
    9bac:	18c00084 	addi	r3,r3,2
    9bb0:	d8c02b15 	stw	r3,172(sp)
    9bb4:	1805883a 	mov	r2,r3
    9bb8:	183d970e 	bge	r3,zero,9218 <__alt_exception_stack_pointer+0xf8009218>
    9bbc:	003fd706 	br	9b1c <__alt_exception_stack_pointer+0xf8009b1c>
    9bc0:	0005883a 	mov	r2,zero
    9bc4:	003f8f06 	br	9a04 <__alt_exception_stack_pointer+0xf8009a04>
    9bc8:	9080004c 	andi	r2,r18,1
    9bcc:	103f821e 	bne	r2,zero,99d8 <__alt_exception_stack_pointer+0xf80099d8>
    9bd0:	d8802117 	ldw	r2,132(sp)
    9bd4:	1405c83a 	sub	r2,r2,r16
    9bd8:	d8803315 	stw	r2,204(sp)
    9bdc:	b47ef426 	beq	r22,r17,97b0 <__alt_exception_stack_pointer+0xf80097b0>
    9be0:	dd802617 	ldw	r22,152(sp)
    9be4:	003f1206 	br	9830 <__alt_exception_stack_pointer+0xf8009830>
    9be8:	d8c02b03 	ldbu	r3,172(sp)
    9bec:	d8c02785 	stb	r3,158(sp)
    9bf0:	0038df06 	br	7f70 <__alt_exception_stack_pointer+0xf8007f70>
    9bf4:	d8c02b03 	ldbu	r3,172(sp)
    9bf8:	d8c02785 	stb	r3,158(sp)
    9bfc:	0038aa06 	br	7ea8 <__alt_exception_stack_pointer+0xf8007ea8>
    9c00:	d8c02b03 	ldbu	r3,172(sp)
    9c04:	d8c02785 	stb	r3,158(sp)
    9c08:	003a4306 	br	8518 <__alt_exception_stack_pointer+0xf8008518>
    9c0c:	d8c02b03 	ldbu	r3,172(sp)
    9c10:	d8c02785 	stb	r3,158(sp)
    9c14:	003af506 	br	87ec <__alt_exception_stack_pointer+0xf80087ec>
    9c18:	0005883a 	mov	r2,zero
    9c1c:	003d7b06 	br	920c <__alt_exception_stack_pointer+0xf800920c>
    9c20:	d8802344 	addi	r2,sp,141
    9c24:	003f1006 	br	9868 <__alt_exception_stack_pointer+0xf8009868>
    9c28:	d8c02b03 	ldbu	r3,172(sp)
    9c2c:	d8c02785 	stb	r3,158(sp)
    9c30:	0038fd06 	br	8028 <__alt_exception_stack_pointer+0xf8008028>
    9c34:	d8c02b03 	ldbu	r3,172(sp)
    9c38:	d8c02785 	stb	r3,158(sp)
    9c3c:	003a9706 	br	869c <__alt_exception_stack_pointer+0xf800869c>
    9c40:	d8c02b03 	ldbu	r3,172(sp)
    9c44:	d8c02785 	stb	r3,158(sp)
    9c48:	003a1806 	br	84ac <__alt_exception_stack_pointer+0xf80084ac>
    9c4c:	d8c02b03 	ldbu	r3,172(sp)
    9c50:	d8c02785 	stb	r3,158(sp)
    9c54:	003abe06 	br	8750 <__alt_exception_stack_pointer+0xf8008750>

00009c58 <__vfprintf_internal>:
    9c58:	00800074 	movhi	r2,1
    9c5c:	109cd104 	addi	r2,r2,29508
    9c60:	300f883a 	mov	r7,r6
    9c64:	280d883a 	mov	r6,r5
    9c68:	200b883a 	mov	r5,r4
    9c6c:	11000017 	ldw	r4,0(r2)
    9c70:	000797c1 	jmpi	797c <___vfprintf_internal_r>

00009c74 <__sbprintf>:
    9c74:	2880030b 	ldhu	r2,12(r5)
    9c78:	2ac01917 	ldw	r11,100(r5)
    9c7c:	2a80038b 	ldhu	r10,14(r5)
    9c80:	2a400717 	ldw	r9,28(r5)
    9c84:	2a000917 	ldw	r8,36(r5)
    9c88:	defee204 	addi	sp,sp,-1144
    9c8c:	00c10004 	movi	r3,1024
    9c90:	dc011a15 	stw	r16,1128(sp)
    9c94:	10bfff4c 	andi	r2,r2,65533
    9c98:	2821883a 	mov	r16,r5
    9c9c:	d8cb883a 	add	r5,sp,r3
    9ca0:	dc811c15 	stw	r18,1136(sp)
    9ca4:	dc411b15 	stw	r17,1132(sp)
    9ca8:	dfc11d15 	stw	ra,1140(sp)
    9cac:	2025883a 	mov	r18,r4
    9cb0:	d881030d 	sth	r2,1036(sp)
    9cb4:	dac11915 	stw	r11,1124(sp)
    9cb8:	da81038d 	sth	r10,1038(sp)
    9cbc:	da410715 	stw	r9,1052(sp)
    9cc0:	da010915 	stw	r8,1060(sp)
    9cc4:	dec10015 	stw	sp,1024(sp)
    9cc8:	dec10415 	stw	sp,1040(sp)
    9ccc:	d8c10215 	stw	r3,1032(sp)
    9cd0:	d8c10515 	stw	r3,1044(sp)
    9cd4:	d8010615 	stw	zero,1048(sp)
    9cd8:	000797c0 	call	797c <___vfprintf_internal_r>
    9cdc:	1023883a 	mov	r17,r2
    9ce0:	10000416 	blt	r2,zero,9cf4 <__sbprintf+0x80>
    9ce4:	d9410004 	addi	r5,sp,1024
    9ce8:	9009883a 	mov	r4,r18
    9cec:	000b9500 	call	b950 <_fflush_r>
    9cf0:	10000d1e 	bne	r2,zero,9d28 <__sbprintf+0xb4>
    9cf4:	d881030b 	ldhu	r2,1036(sp)
    9cf8:	1080100c 	andi	r2,r2,64
    9cfc:	10000326 	beq	r2,zero,9d0c <__sbprintf+0x98>
    9d00:	8080030b 	ldhu	r2,12(r16)
    9d04:	10801014 	ori	r2,r2,64
    9d08:	8080030d 	sth	r2,12(r16)
    9d0c:	8805883a 	mov	r2,r17
    9d10:	dfc11d17 	ldw	ra,1140(sp)
    9d14:	dc811c17 	ldw	r18,1136(sp)
    9d18:	dc411b17 	ldw	r17,1132(sp)
    9d1c:	dc011a17 	ldw	r16,1128(sp)
    9d20:	dec11e04 	addi	sp,sp,1144
    9d24:	f800283a 	ret
    9d28:	047fffc4 	movi	r17,-1
    9d2c:	003ff106 	br	9cf4 <__alt_exception_stack_pointer+0xf8009cf4>

00009d30 <__swsetup_r>:
    9d30:	00800074 	movhi	r2,1
    9d34:	defffd04 	addi	sp,sp,-12
    9d38:	109cd104 	addi	r2,r2,29508
    9d3c:	dc400115 	stw	r17,4(sp)
    9d40:	2023883a 	mov	r17,r4
    9d44:	11000017 	ldw	r4,0(r2)
    9d48:	dc000015 	stw	r16,0(sp)
    9d4c:	dfc00215 	stw	ra,8(sp)
    9d50:	2821883a 	mov	r16,r5
    9d54:	20000226 	beq	r4,zero,9d60 <__swsetup_r+0x30>
    9d58:	20800e17 	ldw	r2,56(r4)
    9d5c:	10003126 	beq	r2,zero,9e24 <__swsetup_r+0xf4>
    9d60:	8080030b 	ldhu	r2,12(r16)
    9d64:	10c0020c 	andi	r3,r2,8
    9d68:	1009883a 	mov	r4,r2
    9d6c:	18000f26 	beq	r3,zero,9dac <__swsetup_r+0x7c>
    9d70:	80c00417 	ldw	r3,16(r16)
    9d74:	18001526 	beq	r3,zero,9dcc <__swsetup_r+0x9c>
    9d78:	1100004c 	andi	r4,r2,1
    9d7c:	20001c1e 	bne	r4,zero,9df0 <__swsetup_r+0xc0>
    9d80:	1080008c 	andi	r2,r2,2
    9d84:	1000291e 	bne	r2,zero,9e2c <__swsetup_r+0xfc>
    9d88:	80800517 	ldw	r2,20(r16)
    9d8c:	80800215 	stw	r2,8(r16)
    9d90:	18001c26 	beq	r3,zero,9e04 <__swsetup_r+0xd4>
    9d94:	0005883a 	mov	r2,zero
    9d98:	dfc00217 	ldw	ra,8(sp)
    9d9c:	dc400117 	ldw	r17,4(sp)
    9da0:	dc000017 	ldw	r16,0(sp)
    9da4:	dec00304 	addi	sp,sp,12
    9da8:	f800283a 	ret
    9dac:	2080040c 	andi	r2,r4,16
    9db0:	10002e26 	beq	r2,zero,9e6c <__swsetup_r+0x13c>
    9db4:	2080010c 	andi	r2,r4,4
    9db8:	10001e1e 	bne	r2,zero,9e34 <__swsetup_r+0x104>
    9dbc:	80c00417 	ldw	r3,16(r16)
    9dc0:	20800214 	ori	r2,r4,8
    9dc4:	8080030d 	sth	r2,12(r16)
    9dc8:	183feb1e 	bne	r3,zero,9d78 <__alt_exception_stack_pointer+0xf8009d78>
    9dcc:	1100a00c 	andi	r4,r2,640
    9dd0:	01408004 	movi	r5,512
    9dd4:	217fe826 	beq	r4,r5,9d78 <__alt_exception_stack_pointer+0xf8009d78>
    9dd8:	800b883a 	mov	r5,r16
    9ddc:	8809883a 	mov	r4,r17
    9de0:	000c8ec0 	call	c8ec <__smakebuf_r>
    9de4:	8080030b 	ldhu	r2,12(r16)
    9de8:	80c00417 	ldw	r3,16(r16)
    9dec:	003fe206 	br	9d78 <__alt_exception_stack_pointer+0xf8009d78>
    9df0:	80800517 	ldw	r2,20(r16)
    9df4:	80000215 	stw	zero,8(r16)
    9df8:	0085c83a 	sub	r2,zero,r2
    9dfc:	80800615 	stw	r2,24(r16)
    9e00:	183fe41e 	bne	r3,zero,9d94 <__alt_exception_stack_pointer+0xf8009d94>
    9e04:	80c0030b 	ldhu	r3,12(r16)
    9e08:	0005883a 	mov	r2,zero
    9e0c:	1900200c 	andi	r4,r3,128
    9e10:	203fe126 	beq	r4,zero,9d98 <__alt_exception_stack_pointer+0xf8009d98>
    9e14:	18c01014 	ori	r3,r3,64
    9e18:	80c0030d 	sth	r3,12(r16)
    9e1c:	00bfffc4 	movi	r2,-1
    9e20:	003fdd06 	br	9d98 <__alt_exception_stack_pointer+0xf8009d98>
    9e24:	000bd3c0 	call	bd3c <__sinit>
    9e28:	003fcd06 	br	9d60 <__alt_exception_stack_pointer+0xf8009d60>
    9e2c:	0005883a 	mov	r2,zero
    9e30:	003fd606 	br	9d8c <__alt_exception_stack_pointer+0xf8009d8c>
    9e34:	81400c17 	ldw	r5,48(r16)
    9e38:	28000626 	beq	r5,zero,9e54 <__swsetup_r+0x124>
    9e3c:	80801004 	addi	r2,r16,64
    9e40:	28800326 	beq	r5,r2,9e50 <__swsetup_r+0x120>
    9e44:	8809883a 	mov	r4,r17
    9e48:	000beb00 	call	beb0 <_free_r>
    9e4c:	8100030b 	ldhu	r4,12(r16)
    9e50:	80000c15 	stw	zero,48(r16)
    9e54:	80c00417 	ldw	r3,16(r16)
    9e58:	00bff6c4 	movi	r2,-37
    9e5c:	1108703a 	and	r4,r2,r4
    9e60:	80000115 	stw	zero,4(r16)
    9e64:	80c00015 	stw	r3,0(r16)
    9e68:	003fd506 	br	9dc0 <__alt_exception_stack_pointer+0xf8009dc0>
    9e6c:	00800244 	movi	r2,9
    9e70:	88800015 	stw	r2,0(r17)
    9e74:	20801014 	ori	r2,r4,64
    9e78:	8080030d 	sth	r2,12(r16)
    9e7c:	00bfffc4 	movi	r2,-1
    9e80:	003fc506 	br	9d98 <__alt_exception_stack_pointer+0xf8009d98>

00009e84 <quorem>:
    9e84:	defff204 	addi	sp,sp,-56
    9e88:	ddc00b15 	stw	r23,44(sp)
    9e8c:	20800417 	ldw	r2,16(r4)
    9e90:	2dc00417 	ldw	r23,16(r5)
    9e94:	dfc00d15 	stw	ra,52(sp)
    9e98:	df000c15 	stw	fp,48(sp)
    9e9c:	dd800a15 	stw	r22,40(sp)
    9ea0:	dd400915 	stw	r21,36(sp)
    9ea4:	dd000815 	stw	r20,32(sp)
    9ea8:	dcc00715 	stw	r19,28(sp)
    9eac:	dc800615 	stw	r18,24(sp)
    9eb0:	dc400515 	stw	r17,20(sp)
    9eb4:	dc000415 	stw	r16,16(sp)
    9eb8:	15c07a16 	blt	r2,r23,a0a4 <quorem+0x220>
    9ebc:	bdffffc4 	addi	r23,r23,-1
    9ec0:	bde9883a 	add	r20,r23,r23
    9ec4:	28c00504 	addi	r3,r5,20
    9ec8:	a529883a 	add	r20,r20,r20
    9ecc:	1d39883a 	add	fp,r3,r20
    9ed0:	24c00504 	addi	r19,r4,20
    9ed4:	d9400215 	stw	r5,8(sp)
    9ed8:	9d29883a 	add	r20,r19,r20
    9edc:	e1400017 	ldw	r5,0(fp)
    9ee0:	d9000015 	stw	r4,0(sp)
    9ee4:	a1000017 	ldw	r4,0(r20)
    9ee8:	29400044 	addi	r5,r5,1
    9eec:	d8c00115 	stw	r3,4(sp)
    9ef0:	dd000315 	stw	r20,12(sp)
    9ef4:	0004f640 	call	4f64 <__udivsi3>
    9ef8:	1025883a 	mov	r18,r2
    9efc:	10003026 	beq	r2,zero,9fc0 <quorem+0x13c>
    9f00:	dc400117 	ldw	r17,4(sp)
    9f04:	9829883a 	mov	r20,r19
    9f08:	002d883a 	mov	r22,zero
    9f0c:	0021883a 	mov	r16,zero
    9f10:	8d400017 	ldw	r21,0(r17)
    9f14:	900b883a 	mov	r5,r18
    9f18:	8c400104 	addi	r17,r17,4
    9f1c:	a93fffcc 	andi	r4,r21,65535
    9f20:	00050200 	call	5020 <__mulsi3>
    9f24:	a808d43a 	srli	r4,r21,16
    9f28:	900b883a 	mov	r5,r18
    9f2c:	15ad883a 	add	r22,r2,r22
    9f30:	00050200 	call	5020 <__mulsi3>
    9f34:	a1000017 	ldw	r4,0(r20)
    9f38:	b00cd43a 	srli	r6,r22,16
    9f3c:	b0ffffcc 	andi	r3,r22,65535
    9f40:	217fffcc 	andi	r5,r4,65535
    9f44:	2c21883a 	add	r16,r5,r16
    9f48:	80c7c83a 	sub	r3,r16,r3
    9f4c:	2008d43a 	srli	r4,r4,16
    9f50:	1185883a 	add	r2,r2,r6
    9f54:	1821d43a 	srai	r16,r3,16
    9f58:	117fffcc 	andi	r5,r2,65535
    9f5c:	2149c83a 	sub	r4,r4,r5
    9f60:	2421883a 	add	r16,r4,r16
    9f64:	8008943a 	slli	r4,r16,16
    9f68:	18ffffcc 	andi	r3,r3,65535
    9f6c:	102cd43a 	srli	r22,r2,16
    9f70:	20c8b03a 	or	r4,r4,r3
    9f74:	a1000015 	stw	r4,0(r20)
    9f78:	8021d43a 	srai	r16,r16,16
    9f7c:	a5000104 	addi	r20,r20,4
    9f80:	e47fe32e 	bgeu	fp,r17,9f10 <__alt_exception_stack_pointer+0xf8009f10>
    9f84:	d8c00317 	ldw	r3,12(sp)
    9f88:	18800017 	ldw	r2,0(r3)
    9f8c:	10000c1e 	bne	r2,zero,9fc0 <quorem+0x13c>
    9f90:	18bfff04 	addi	r2,r3,-4
    9f94:	9880082e 	bgeu	r19,r2,9fb8 <quorem+0x134>
    9f98:	18ffff17 	ldw	r3,-4(r3)
    9f9c:	18000326 	beq	r3,zero,9fac <quorem+0x128>
    9fa0:	00000506 	br	9fb8 <quorem+0x134>
    9fa4:	10c00017 	ldw	r3,0(r2)
    9fa8:	1800031e 	bne	r3,zero,9fb8 <quorem+0x134>
    9fac:	10bfff04 	addi	r2,r2,-4
    9fb0:	bdffffc4 	addi	r23,r23,-1
    9fb4:	98bffb36 	bltu	r19,r2,9fa4 <__alt_exception_stack_pointer+0xf8009fa4>
    9fb8:	d8c00017 	ldw	r3,0(sp)
    9fbc:	1dc00415 	stw	r23,16(r3)
    9fc0:	d9400217 	ldw	r5,8(sp)
    9fc4:	d9000017 	ldw	r4,0(sp)
    9fc8:	000d7940 	call	d794 <__mcmp>
    9fcc:	10002816 	blt	r2,zero,a070 <quorem+0x1ec>
    9fd0:	dc400117 	ldw	r17,4(sp)
    9fd4:	94800044 	addi	r18,r18,1
    9fd8:	980d883a 	mov	r6,r19
    9fdc:	0007883a 	mov	r3,zero
    9fe0:	31000017 	ldw	r4,0(r6)
    9fe4:	89400017 	ldw	r5,0(r17)
    9fe8:	31800104 	addi	r6,r6,4
    9fec:	20bfffcc 	andi	r2,r4,65535
    9ff0:	10c7883a 	add	r3,r2,r3
    9ff4:	28bfffcc 	andi	r2,r5,65535
    9ff8:	1885c83a 	sub	r2,r3,r2
    9ffc:	280ad43a 	srli	r5,r5,16
    a000:	2008d43a 	srli	r4,r4,16
    a004:	1007d43a 	srai	r3,r2,16
    a008:	10bfffcc 	andi	r2,r2,65535
    a00c:	2149c83a 	sub	r4,r4,r5
    a010:	20c9883a 	add	r4,r4,r3
    a014:	200a943a 	slli	r5,r4,16
    a018:	8c400104 	addi	r17,r17,4
    a01c:	2007d43a 	srai	r3,r4,16
    a020:	2884b03a 	or	r2,r5,r2
    a024:	30bfff15 	stw	r2,-4(r6)
    a028:	e47fed2e 	bgeu	fp,r17,9fe0 <__alt_exception_stack_pointer+0xf8009fe0>
    a02c:	bdc5883a 	add	r2,r23,r23
    a030:	1085883a 	add	r2,r2,r2
    a034:	9887883a 	add	r3,r19,r2
    a038:	18800017 	ldw	r2,0(r3)
    a03c:	10000c1e 	bne	r2,zero,a070 <quorem+0x1ec>
    a040:	18bfff04 	addi	r2,r3,-4
    a044:	9880082e 	bgeu	r19,r2,a068 <quorem+0x1e4>
    a048:	18ffff17 	ldw	r3,-4(r3)
    a04c:	18000326 	beq	r3,zero,a05c <quorem+0x1d8>
    a050:	00000506 	br	a068 <quorem+0x1e4>
    a054:	10c00017 	ldw	r3,0(r2)
    a058:	1800031e 	bne	r3,zero,a068 <quorem+0x1e4>
    a05c:	10bfff04 	addi	r2,r2,-4
    a060:	bdffffc4 	addi	r23,r23,-1
    a064:	98bffb36 	bltu	r19,r2,a054 <__alt_exception_stack_pointer+0xf800a054>
    a068:	d8c00017 	ldw	r3,0(sp)
    a06c:	1dc00415 	stw	r23,16(r3)
    a070:	9005883a 	mov	r2,r18
    a074:	dfc00d17 	ldw	ra,52(sp)
    a078:	df000c17 	ldw	fp,48(sp)
    a07c:	ddc00b17 	ldw	r23,44(sp)
    a080:	dd800a17 	ldw	r22,40(sp)
    a084:	dd400917 	ldw	r21,36(sp)
    a088:	dd000817 	ldw	r20,32(sp)
    a08c:	dcc00717 	ldw	r19,28(sp)
    a090:	dc800617 	ldw	r18,24(sp)
    a094:	dc400517 	ldw	r17,20(sp)
    a098:	dc000417 	ldw	r16,16(sp)
    a09c:	dec00e04 	addi	sp,sp,56
    a0a0:	f800283a 	ret
    a0a4:	0005883a 	mov	r2,zero
    a0a8:	003ff206 	br	a074 <__alt_exception_stack_pointer+0xf800a074>

0000a0ac <_dtoa_r>:
    a0ac:	20801017 	ldw	r2,64(r4)
    a0b0:	deffde04 	addi	sp,sp,-136
    a0b4:	df002015 	stw	fp,128(sp)
    a0b8:	dcc01b15 	stw	r19,108(sp)
    a0bc:	dc801a15 	stw	r18,104(sp)
    a0c0:	dc401915 	stw	r17,100(sp)
    a0c4:	dc001815 	stw	r16,96(sp)
    a0c8:	dfc02115 	stw	ra,132(sp)
    a0cc:	ddc01f15 	stw	r23,124(sp)
    a0d0:	dd801e15 	stw	r22,120(sp)
    a0d4:	dd401d15 	stw	r21,116(sp)
    a0d8:	dd001c15 	stw	r20,112(sp)
    a0dc:	d9c00315 	stw	r7,12(sp)
    a0e0:	2039883a 	mov	fp,r4
    a0e4:	3023883a 	mov	r17,r6
    a0e8:	2825883a 	mov	r18,r5
    a0ec:	dc002417 	ldw	r16,144(sp)
    a0f0:	3027883a 	mov	r19,r6
    a0f4:	10000826 	beq	r2,zero,a118 <_dtoa_r+0x6c>
    a0f8:	21801117 	ldw	r6,68(r4)
    a0fc:	00c00044 	movi	r3,1
    a100:	100b883a 	mov	r5,r2
    a104:	1986983a 	sll	r3,r3,r6
    a108:	11800115 	stw	r6,4(r2)
    a10c:	10c00215 	stw	r3,8(r2)
    a110:	000ceb80 	call	ceb8 <_Bfree>
    a114:	e0001015 	stw	zero,64(fp)
    a118:	88002e16 	blt	r17,zero,a1d4 <_dtoa_r+0x128>
    a11c:	80000015 	stw	zero,0(r16)
    a120:	889ffc2c 	andhi	r2,r17,32752
    a124:	00dffc34 	movhi	r3,32752
    a128:	10c01c26 	beq	r2,r3,a19c <_dtoa_r+0xf0>
    a12c:	000d883a 	mov	r6,zero
    a130:	000f883a 	mov	r7,zero
    a134:	9009883a 	mov	r4,r18
    a138:	980b883a 	mov	r5,r19
    a13c:	00058f40 	call	58f4 <__eqdf2>
    a140:	10002b1e 	bne	r2,zero,a1f0 <_dtoa_r+0x144>
    a144:	d9c02317 	ldw	r7,140(sp)
    a148:	00800044 	movi	r2,1
    a14c:	38800015 	stw	r2,0(r7)
    a150:	d8802517 	ldw	r2,148(sp)
    a154:	10019e26 	beq	r2,zero,a7d0 <_dtoa_r+0x724>
    a158:	d8c02517 	ldw	r3,148(sp)
    a15c:	00800074 	movhi	r2,1
    a160:	10958344 	addi	r2,r2,22029
    a164:	18800015 	stw	r2,0(r3)
    a168:	10bfffc4 	addi	r2,r2,-1
    a16c:	dfc02117 	ldw	ra,132(sp)
    a170:	df002017 	ldw	fp,128(sp)
    a174:	ddc01f17 	ldw	r23,124(sp)
    a178:	dd801e17 	ldw	r22,120(sp)
    a17c:	dd401d17 	ldw	r21,116(sp)
    a180:	dd001c17 	ldw	r20,112(sp)
    a184:	dcc01b17 	ldw	r19,108(sp)
    a188:	dc801a17 	ldw	r18,104(sp)
    a18c:	dc401917 	ldw	r17,100(sp)
    a190:	dc001817 	ldw	r16,96(sp)
    a194:	dec02204 	addi	sp,sp,136
    a198:	f800283a 	ret
    a19c:	d8c02317 	ldw	r3,140(sp)
    a1a0:	0089c3c4 	movi	r2,9999
    a1a4:	18800015 	stw	r2,0(r3)
    a1a8:	90017726 	beq	r18,zero,a788 <_dtoa_r+0x6dc>
    a1ac:	00800074 	movhi	r2,1
    a1b0:	10958f04 	addi	r2,r2,22076
    a1b4:	d9002517 	ldw	r4,148(sp)
    a1b8:	203fec26 	beq	r4,zero,a16c <__alt_exception_stack_pointer+0xf800a16c>
    a1bc:	10c000c7 	ldb	r3,3(r2)
    a1c0:	1801781e 	bne	r3,zero,a7a4 <_dtoa_r+0x6f8>
    a1c4:	10c000c4 	addi	r3,r2,3
    a1c8:	d9802517 	ldw	r6,148(sp)
    a1cc:	30c00015 	stw	r3,0(r6)
    a1d0:	003fe606 	br	a16c <__alt_exception_stack_pointer+0xf800a16c>
    a1d4:	04e00034 	movhi	r19,32768
    a1d8:	9cffffc4 	addi	r19,r19,-1
    a1dc:	00800044 	movi	r2,1
    a1e0:	8ce6703a 	and	r19,r17,r19
    a1e4:	80800015 	stw	r2,0(r16)
    a1e8:	9823883a 	mov	r17,r19
    a1ec:	003fcc06 	br	a120 <__alt_exception_stack_pointer+0xf800a120>
    a1f0:	d8800204 	addi	r2,sp,8
    a1f4:	d8800015 	stw	r2,0(sp)
    a1f8:	d9c00104 	addi	r7,sp,4
    a1fc:	900b883a 	mov	r5,r18
    a200:	980d883a 	mov	r6,r19
    a204:	e009883a 	mov	r4,fp
    a208:	8820d53a 	srli	r16,r17,20
    a20c:	000db600 	call	db60 <__d2b>
    a210:	d8800915 	stw	r2,36(sp)
    a214:	8001651e 	bne	r16,zero,a7ac <_dtoa_r+0x700>
    a218:	dd800217 	ldw	r22,8(sp)
    a21c:	dc000117 	ldw	r16,4(sp)
    a220:	00800804 	movi	r2,32
    a224:	b421883a 	add	r16,r22,r16
    a228:	80c10c84 	addi	r3,r16,1074
    a22c:	10c2d10e 	bge	r2,r3,ad74 <_dtoa_r+0xcc8>
    a230:	00801004 	movi	r2,64
    a234:	81010484 	addi	r4,r16,1042
    a238:	10c7c83a 	sub	r3,r2,r3
    a23c:	9108d83a 	srl	r4,r18,r4
    a240:	88e2983a 	sll	r17,r17,r3
    a244:	2448b03a 	or	r4,r4,r17
    a248:	0011d800 	call	11d80 <__floatunsidf>
    a24c:	017f8434 	movhi	r5,65040
    a250:	01800044 	movi	r6,1
    a254:	1009883a 	mov	r4,r2
    a258:	194b883a 	add	r5,r3,r5
    a25c:	843fffc4 	addi	r16,r16,-1
    a260:	d9801115 	stw	r6,68(sp)
    a264:	000d883a 	mov	r6,zero
    a268:	01cffe34 	movhi	r7,16376
    a26c:	00062c40 	call	62c4 <__subdf3>
    a270:	0198dbf4 	movhi	r6,25455
    a274:	01cff4f4 	movhi	r7,16339
    a278:	3190d844 	addi	r6,r6,17249
    a27c:	39e1e9c4 	addi	r7,r7,-30809
    a280:	1009883a 	mov	r4,r2
    a284:	180b883a 	mov	r5,r3
    a288:	0005a580 	call	5a58 <__muldf3>
    a28c:	01a2d874 	movhi	r6,35681
    a290:	01cff1f4 	movhi	r7,16327
    a294:	31b22cc4 	addi	r6,r6,-14157
    a298:	39e28a04 	addi	r7,r7,-30168
    a29c:	180b883a 	mov	r5,r3
    a2a0:	1009883a 	mov	r4,r2
    a2a4:	00050480 	call	5048 <__adddf3>
    a2a8:	8009883a 	mov	r4,r16
    a2ac:	1029883a 	mov	r20,r2
    a2b0:	1823883a 	mov	r17,r3
    a2b4:	0006c400 	call	6c40 <__floatsidf>
    a2b8:	019427f4 	movhi	r6,20639
    a2bc:	01cff4f4 	movhi	r7,16339
    a2c0:	319e7ec4 	addi	r6,r6,31227
    a2c4:	39d104c4 	addi	r7,r7,17427
    a2c8:	1009883a 	mov	r4,r2
    a2cc:	180b883a 	mov	r5,r3
    a2d0:	0005a580 	call	5a58 <__muldf3>
    a2d4:	100d883a 	mov	r6,r2
    a2d8:	180f883a 	mov	r7,r3
    a2dc:	a009883a 	mov	r4,r20
    a2e0:	880b883a 	mov	r5,r17
    a2e4:	00050480 	call	5048 <__adddf3>
    a2e8:	1009883a 	mov	r4,r2
    a2ec:	180b883a 	mov	r5,r3
    a2f0:	1029883a 	mov	r20,r2
    a2f4:	1823883a 	mov	r17,r3
    a2f8:	0006bc00 	call	6bc0 <__fixdfsi>
    a2fc:	000d883a 	mov	r6,zero
    a300:	000f883a 	mov	r7,zero
    a304:	a009883a 	mov	r4,r20
    a308:	880b883a 	mov	r5,r17
    a30c:	d8800515 	stw	r2,20(sp)
    a310:	0011c8c0 	call	11c8c <__ledf2>
    a314:	10028716 	blt	r2,zero,ad34 <_dtoa_r+0xc88>
    a318:	d8c00517 	ldw	r3,20(sp)
    a31c:	00800584 	movi	r2,22
    a320:	10c27536 	bltu	r2,r3,acf8 <_dtoa_r+0xc4c>
    a324:	180490fa 	slli	r2,r3,3
    a328:	00c00074 	movhi	r3,1
    a32c:	18d5aa04 	addi	r3,r3,22184
    a330:	1885883a 	add	r2,r3,r2
    a334:	11000017 	ldw	r4,0(r2)
    a338:	11400117 	ldw	r5,4(r2)
    a33c:	900d883a 	mov	r6,r18
    a340:	980f883a 	mov	r7,r19
    a344:	000597c0 	call	597c <__gedf2>
    a348:	00828d0e 	bge	zero,r2,ad80 <_dtoa_r+0xcd4>
    a34c:	d9000517 	ldw	r4,20(sp)
    a350:	d8000e15 	stw	zero,56(sp)
    a354:	213fffc4 	addi	r4,r4,-1
    a358:	d9000515 	stw	r4,20(sp)
    a35c:	b42dc83a 	sub	r22,r22,r16
    a360:	b5bfffc4 	addi	r22,r22,-1
    a364:	b0026f16 	blt	r22,zero,ad24 <_dtoa_r+0xc78>
    a368:	d8000815 	stw	zero,32(sp)
    a36c:	d9c00517 	ldw	r7,20(sp)
    a370:	38026416 	blt	r7,zero,ad04 <_dtoa_r+0xc58>
    a374:	b1ed883a 	add	r22,r22,r7
    a378:	d9c00d15 	stw	r7,52(sp)
    a37c:	d8000a15 	stw	zero,40(sp)
    a380:	d9800317 	ldw	r6,12(sp)
    a384:	00800244 	movi	r2,9
    a388:	11811436 	bltu	r2,r6,a7dc <_dtoa_r+0x730>
    a38c:	00800144 	movi	r2,5
    a390:	1184e10e 	bge	r2,r6,b718 <_dtoa_r+0x166c>
    a394:	31bfff04 	addi	r6,r6,-4
    a398:	d9800315 	stw	r6,12(sp)
    a39c:	0023883a 	mov	r17,zero
    a3a0:	d9800317 	ldw	r6,12(sp)
    a3a4:	008000c4 	movi	r2,3
    a3a8:	30836726 	beq	r6,r2,b148 <_dtoa_r+0x109c>
    a3ac:	1183410e 	bge	r2,r6,b0b4 <_dtoa_r+0x1008>
    a3b0:	d9c00317 	ldw	r7,12(sp)
    a3b4:	00800104 	movi	r2,4
    a3b8:	38827c26 	beq	r7,r2,adac <_dtoa_r+0xd00>
    a3bc:	00800144 	movi	r2,5
    a3c0:	3884c41e 	bne	r7,r2,b6d4 <_dtoa_r+0x1628>
    a3c4:	00800044 	movi	r2,1
    a3c8:	d8800b15 	stw	r2,44(sp)
    a3cc:	d8c00517 	ldw	r3,20(sp)
    a3d0:	d9002217 	ldw	r4,136(sp)
    a3d4:	1907883a 	add	r3,r3,r4
    a3d8:	19800044 	addi	r6,r3,1
    a3dc:	d8c00c15 	stw	r3,48(sp)
    a3e0:	d9800615 	stw	r6,24(sp)
    a3e4:	0183a40e 	bge	zero,r6,b278 <_dtoa_r+0x11cc>
    a3e8:	d9800617 	ldw	r6,24(sp)
    a3ec:	3021883a 	mov	r16,r6
    a3f0:	e0001115 	stw	zero,68(fp)
    a3f4:	008005c4 	movi	r2,23
    a3f8:	1184c92e 	bgeu	r2,r6,b720 <_dtoa_r+0x1674>
    a3fc:	00c00044 	movi	r3,1
    a400:	00800104 	movi	r2,4
    a404:	1085883a 	add	r2,r2,r2
    a408:	11000504 	addi	r4,r2,20
    a40c:	180b883a 	mov	r5,r3
    a410:	18c00044 	addi	r3,r3,1
    a414:	313ffb2e 	bgeu	r6,r4,a404 <__alt_exception_stack_pointer+0xf800a404>
    a418:	e1401115 	stw	r5,68(fp)
    a41c:	e009883a 	mov	r4,fp
    a420:	000ce100 	call	ce10 <_Balloc>
    a424:	d8800715 	stw	r2,28(sp)
    a428:	e0801015 	stw	r2,64(fp)
    a42c:	00800384 	movi	r2,14
    a430:	1400f736 	bltu	r2,r16,a810 <_dtoa_r+0x764>
    a434:	8800f626 	beq	r17,zero,a810 <_dtoa_r+0x764>
    a438:	d9c00517 	ldw	r7,20(sp)
    a43c:	01c39a0e 	bge	zero,r7,b2a8 <_dtoa_r+0x11fc>
    a440:	388003cc 	andi	r2,r7,15
    a444:	100490fa 	slli	r2,r2,3
    a448:	382bd13a 	srai	r21,r7,4
    a44c:	00c00074 	movhi	r3,1
    a450:	18d5aa04 	addi	r3,r3,22184
    a454:	1885883a 	add	r2,r3,r2
    a458:	a8c0040c 	andi	r3,r21,16
    a45c:	12400017 	ldw	r9,0(r2)
    a460:	12000117 	ldw	r8,4(r2)
    a464:	18037926 	beq	r3,zero,b24c <_dtoa_r+0x11a0>
    a468:	00800074 	movhi	r2,1
    a46c:	1095a004 	addi	r2,r2,22144
    a470:	11800817 	ldw	r6,32(r2)
    a474:	11c00917 	ldw	r7,36(r2)
    a478:	9009883a 	mov	r4,r18
    a47c:	980b883a 	mov	r5,r19
    a480:	da001715 	stw	r8,92(sp)
    a484:	da401615 	stw	r9,88(sp)
    a488:	00112bc0 	call	112bc <__divdf3>
    a48c:	da001717 	ldw	r8,92(sp)
    a490:	da401617 	ldw	r9,88(sp)
    a494:	ad4003cc 	andi	r21,r21,15
    a498:	040000c4 	movi	r16,3
    a49c:	1023883a 	mov	r17,r2
    a4a0:	1829883a 	mov	r20,r3
    a4a4:	a8001126 	beq	r21,zero,a4ec <_dtoa_r+0x440>
    a4a8:	05c00074 	movhi	r23,1
    a4ac:	bdd5a004 	addi	r23,r23,22144
    a4b0:	4805883a 	mov	r2,r9
    a4b4:	4007883a 	mov	r3,r8
    a4b8:	a980004c 	andi	r6,r21,1
    a4bc:	1009883a 	mov	r4,r2
    a4c0:	a82bd07a 	srai	r21,r21,1
    a4c4:	180b883a 	mov	r5,r3
    a4c8:	30000426 	beq	r6,zero,a4dc <_dtoa_r+0x430>
    a4cc:	b9800017 	ldw	r6,0(r23)
    a4d0:	b9c00117 	ldw	r7,4(r23)
    a4d4:	84000044 	addi	r16,r16,1
    a4d8:	0005a580 	call	5a58 <__muldf3>
    a4dc:	bdc00204 	addi	r23,r23,8
    a4e0:	a83ff51e 	bne	r21,zero,a4b8 <__alt_exception_stack_pointer+0xf800a4b8>
    a4e4:	1013883a 	mov	r9,r2
    a4e8:	1811883a 	mov	r8,r3
    a4ec:	480d883a 	mov	r6,r9
    a4f0:	400f883a 	mov	r7,r8
    a4f4:	8809883a 	mov	r4,r17
    a4f8:	a00b883a 	mov	r5,r20
    a4fc:	00112bc0 	call	112bc <__divdf3>
    a500:	d8800f15 	stw	r2,60(sp)
    a504:	d8c01015 	stw	r3,64(sp)
    a508:	d8c00e17 	ldw	r3,56(sp)
    a50c:	18000626 	beq	r3,zero,a528 <_dtoa_r+0x47c>
    a510:	d9000f17 	ldw	r4,60(sp)
    a514:	d9401017 	ldw	r5,64(sp)
    a518:	000d883a 	mov	r6,zero
    a51c:	01cffc34 	movhi	r7,16368
    a520:	0011c8c0 	call	11c8c <__ledf2>
    a524:	10040b16 	blt	r2,zero,b554 <_dtoa_r+0x14a8>
    a528:	8009883a 	mov	r4,r16
    a52c:	0006c400 	call	6c40 <__floatsidf>
    a530:	d9800f17 	ldw	r6,60(sp)
    a534:	d9c01017 	ldw	r7,64(sp)
    a538:	1009883a 	mov	r4,r2
    a53c:	180b883a 	mov	r5,r3
    a540:	0005a580 	call	5a58 <__muldf3>
    a544:	000d883a 	mov	r6,zero
    a548:	01d00734 	movhi	r7,16412
    a54c:	1009883a 	mov	r4,r2
    a550:	180b883a 	mov	r5,r3
    a554:	00050480 	call	5048 <__adddf3>
    a558:	1021883a 	mov	r16,r2
    a55c:	d8800617 	ldw	r2,24(sp)
    a560:	047f3034 	movhi	r17,64704
    a564:	1c63883a 	add	r17,r3,r17
    a568:	10031826 	beq	r2,zero,b1cc <_dtoa_r+0x1120>
    a56c:	d8c00517 	ldw	r3,20(sp)
    a570:	db000617 	ldw	r12,24(sp)
    a574:	d8c01315 	stw	r3,76(sp)
    a578:	d9000b17 	ldw	r4,44(sp)
    a57c:	20038f26 	beq	r4,zero,b3bc <_dtoa_r+0x1310>
    a580:	60bfffc4 	addi	r2,r12,-1
    a584:	100490fa 	slli	r2,r2,3
    a588:	00c00074 	movhi	r3,1
    a58c:	18d5aa04 	addi	r3,r3,22184
    a590:	1885883a 	add	r2,r3,r2
    a594:	11800017 	ldw	r6,0(r2)
    a598:	11c00117 	ldw	r7,4(r2)
    a59c:	d8800717 	ldw	r2,28(sp)
    a5a0:	0009883a 	mov	r4,zero
    a5a4:	014ff834 	movhi	r5,16352
    a5a8:	db001615 	stw	r12,88(sp)
    a5ac:	15c00044 	addi	r23,r2,1
    a5b0:	00112bc0 	call	112bc <__divdf3>
    a5b4:	800d883a 	mov	r6,r16
    a5b8:	880f883a 	mov	r7,r17
    a5bc:	1009883a 	mov	r4,r2
    a5c0:	180b883a 	mov	r5,r3
    a5c4:	00062c40 	call	62c4 <__subdf3>
    a5c8:	d9401017 	ldw	r5,64(sp)
    a5cc:	d9000f17 	ldw	r4,60(sp)
    a5d0:	102b883a 	mov	r21,r2
    a5d4:	d8c01215 	stw	r3,72(sp)
    a5d8:	0006bc00 	call	6bc0 <__fixdfsi>
    a5dc:	1009883a 	mov	r4,r2
    a5e0:	1029883a 	mov	r20,r2
    a5e4:	0006c400 	call	6c40 <__floatsidf>
    a5e8:	d9000f17 	ldw	r4,60(sp)
    a5ec:	d9401017 	ldw	r5,64(sp)
    a5f0:	100d883a 	mov	r6,r2
    a5f4:	180f883a 	mov	r7,r3
    a5f8:	00062c40 	call	62c4 <__subdf3>
    a5fc:	1823883a 	mov	r17,r3
    a600:	d8c00717 	ldw	r3,28(sp)
    a604:	d9401217 	ldw	r5,72(sp)
    a608:	a2000c04 	addi	r8,r20,48
    a60c:	1021883a 	mov	r16,r2
    a610:	1a000005 	stb	r8,0(r3)
    a614:	800d883a 	mov	r6,r16
    a618:	880f883a 	mov	r7,r17
    a61c:	a809883a 	mov	r4,r21
    a620:	4029883a 	mov	r20,r8
    a624:	000597c0 	call	597c <__gedf2>
    a628:	00841d16 	blt	zero,r2,b6a0 <_dtoa_r+0x15f4>
    a62c:	800d883a 	mov	r6,r16
    a630:	880f883a 	mov	r7,r17
    a634:	0009883a 	mov	r4,zero
    a638:	014ffc34 	movhi	r5,16368
    a63c:	00062c40 	call	62c4 <__subdf3>
    a640:	d9401217 	ldw	r5,72(sp)
    a644:	100d883a 	mov	r6,r2
    a648:	180f883a 	mov	r7,r3
    a64c:	a809883a 	mov	r4,r21
    a650:	000597c0 	call	597c <__gedf2>
    a654:	db001617 	ldw	r12,88(sp)
    a658:	00840e16 	blt	zero,r2,b694 <_dtoa_r+0x15e8>
    a65c:	00800044 	movi	r2,1
    a660:	13006b0e 	bge	r2,r12,a810 <_dtoa_r+0x764>
    a664:	d9000717 	ldw	r4,28(sp)
    a668:	dd800f15 	stw	r22,60(sp)
    a66c:	dcc01015 	stw	r19,64(sp)
    a670:	2319883a 	add	r12,r4,r12
    a674:	dcc01217 	ldw	r19,72(sp)
    a678:	602d883a 	mov	r22,r12
    a67c:	dc801215 	stw	r18,72(sp)
    a680:	b825883a 	mov	r18,r23
    a684:	00000906 	br	a6ac <_dtoa_r+0x600>
    a688:	00062c40 	call	62c4 <__subdf3>
    a68c:	a80d883a 	mov	r6,r21
    a690:	980f883a 	mov	r7,r19
    a694:	1009883a 	mov	r4,r2
    a698:	180b883a 	mov	r5,r3
    a69c:	0011c8c0 	call	11c8c <__ledf2>
    a6a0:	1003e816 	blt	r2,zero,b644 <_dtoa_r+0x1598>
    a6a4:	b825883a 	mov	r18,r23
    a6a8:	bd83e926 	beq	r23,r22,b650 <_dtoa_r+0x15a4>
    a6ac:	a809883a 	mov	r4,r21
    a6b0:	980b883a 	mov	r5,r19
    a6b4:	000d883a 	mov	r6,zero
    a6b8:	01d00934 	movhi	r7,16420
    a6bc:	0005a580 	call	5a58 <__muldf3>
    a6c0:	000d883a 	mov	r6,zero
    a6c4:	01d00934 	movhi	r7,16420
    a6c8:	8009883a 	mov	r4,r16
    a6cc:	880b883a 	mov	r5,r17
    a6d0:	102b883a 	mov	r21,r2
    a6d4:	1827883a 	mov	r19,r3
    a6d8:	0005a580 	call	5a58 <__muldf3>
    a6dc:	180b883a 	mov	r5,r3
    a6e0:	1009883a 	mov	r4,r2
    a6e4:	1821883a 	mov	r16,r3
    a6e8:	1023883a 	mov	r17,r2
    a6ec:	0006bc00 	call	6bc0 <__fixdfsi>
    a6f0:	1009883a 	mov	r4,r2
    a6f4:	1029883a 	mov	r20,r2
    a6f8:	0006c400 	call	6c40 <__floatsidf>
    a6fc:	8809883a 	mov	r4,r17
    a700:	800b883a 	mov	r5,r16
    a704:	100d883a 	mov	r6,r2
    a708:	180f883a 	mov	r7,r3
    a70c:	00062c40 	call	62c4 <__subdf3>
    a710:	a5000c04 	addi	r20,r20,48
    a714:	a80d883a 	mov	r6,r21
    a718:	980f883a 	mov	r7,r19
    a71c:	1009883a 	mov	r4,r2
    a720:	180b883a 	mov	r5,r3
    a724:	95000005 	stb	r20,0(r18)
    a728:	1021883a 	mov	r16,r2
    a72c:	1823883a 	mov	r17,r3
    a730:	0011c8c0 	call	11c8c <__ledf2>
    a734:	bdc00044 	addi	r23,r23,1
    a738:	800d883a 	mov	r6,r16
    a73c:	880f883a 	mov	r7,r17
    a740:	0009883a 	mov	r4,zero
    a744:	014ffc34 	movhi	r5,16368
    a748:	103fcf0e 	bge	r2,zero,a688 <__alt_exception_stack_pointer+0xf800a688>
    a74c:	d8c01317 	ldw	r3,76(sp)
    a750:	d8c00515 	stw	r3,20(sp)
    a754:	d9400917 	ldw	r5,36(sp)
    a758:	e009883a 	mov	r4,fp
    a75c:	000ceb80 	call	ceb8 <_Bfree>
    a760:	d9000517 	ldw	r4,20(sp)
    a764:	d9802317 	ldw	r6,140(sp)
    a768:	d9c02517 	ldw	r7,148(sp)
    a76c:	b8000005 	stb	zero,0(r23)
    a770:	20800044 	addi	r2,r4,1
    a774:	30800015 	stw	r2,0(r6)
    a778:	3802aa26 	beq	r7,zero,b224 <_dtoa_r+0x1178>
    a77c:	3dc00015 	stw	r23,0(r7)
    a780:	d8800717 	ldw	r2,28(sp)
    a784:	003e7906 	br	a16c <__alt_exception_stack_pointer+0xf800a16c>
    a788:	00800434 	movhi	r2,16
    a78c:	10bfffc4 	addi	r2,r2,-1
    a790:	88a2703a 	and	r17,r17,r2
    a794:	883e851e 	bne	r17,zero,a1ac <__alt_exception_stack_pointer+0xf800a1ac>
    a798:	00800074 	movhi	r2,1
    a79c:	10958c04 	addi	r2,r2,22064
    a7a0:	003e8406 	br	a1b4 <__alt_exception_stack_pointer+0xf800a1b4>
    a7a4:	10c00204 	addi	r3,r2,8
    a7a8:	003e8706 	br	a1c8 <__alt_exception_stack_pointer+0xf800a1c8>
    a7ac:	01400434 	movhi	r5,16
    a7b0:	297fffc4 	addi	r5,r5,-1
    a7b4:	994a703a 	and	r5,r19,r5
    a7b8:	9009883a 	mov	r4,r18
    a7bc:	843f0044 	addi	r16,r16,-1023
    a7c0:	294ffc34 	orhi	r5,r5,16368
    a7c4:	dd800217 	ldw	r22,8(sp)
    a7c8:	d8001115 	stw	zero,68(sp)
    a7cc:	003ea506 	br	a264 <__alt_exception_stack_pointer+0xf800a264>
    a7d0:	00800074 	movhi	r2,1
    a7d4:	10958304 	addi	r2,r2,22028
    a7d8:	003e6406 	br	a16c <__alt_exception_stack_pointer+0xf800a16c>
    a7dc:	e0001115 	stw	zero,68(fp)
    a7e0:	000b883a 	mov	r5,zero
    a7e4:	e009883a 	mov	r4,fp
    a7e8:	000ce100 	call	ce10 <_Balloc>
    a7ec:	01bfffc4 	movi	r6,-1
    a7f0:	01c00044 	movi	r7,1
    a7f4:	d8800715 	stw	r2,28(sp)
    a7f8:	d9800c15 	stw	r6,48(sp)
    a7fc:	e0801015 	stw	r2,64(fp)
    a800:	d8000315 	stw	zero,12(sp)
    a804:	d9c00b15 	stw	r7,44(sp)
    a808:	d9800615 	stw	r6,24(sp)
    a80c:	d8002215 	stw	zero,136(sp)
    a810:	d8800117 	ldw	r2,4(sp)
    a814:	10008916 	blt	r2,zero,aa3c <_dtoa_r+0x990>
    a818:	d9000517 	ldw	r4,20(sp)
    a81c:	00c00384 	movi	r3,14
    a820:	19008616 	blt	r3,r4,aa3c <_dtoa_r+0x990>
    a824:	200490fa 	slli	r2,r4,3
    a828:	00c00074 	movhi	r3,1
    a82c:	d9802217 	ldw	r6,136(sp)
    a830:	18d5aa04 	addi	r3,r3,22184
    a834:	1885883a 	add	r2,r3,r2
    a838:	14000017 	ldw	r16,0(r2)
    a83c:	14400117 	ldw	r17,4(r2)
    a840:	30016316 	blt	r6,zero,add0 <_dtoa_r+0xd24>
    a844:	800d883a 	mov	r6,r16
    a848:	880f883a 	mov	r7,r17
    a84c:	9009883a 	mov	r4,r18
    a850:	980b883a 	mov	r5,r19
    a854:	00112bc0 	call	112bc <__divdf3>
    a858:	180b883a 	mov	r5,r3
    a85c:	1009883a 	mov	r4,r2
    a860:	0006bc00 	call	6bc0 <__fixdfsi>
    a864:	1009883a 	mov	r4,r2
    a868:	102b883a 	mov	r21,r2
    a86c:	0006c400 	call	6c40 <__floatsidf>
    a870:	800d883a 	mov	r6,r16
    a874:	880f883a 	mov	r7,r17
    a878:	1009883a 	mov	r4,r2
    a87c:	180b883a 	mov	r5,r3
    a880:	0005a580 	call	5a58 <__muldf3>
    a884:	100d883a 	mov	r6,r2
    a888:	180f883a 	mov	r7,r3
    a88c:	9009883a 	mov	r4,r18
    a890:	980b883a 	mov	r5,r19
    a894:	00062c40 	call	62c4 <__subdf3>
    a898:	d9c00717 	ldw	r7,28(sp)
    a89c:	1009883a 	mov	r4,r2
    a8a0:	a8800c04 	addi	r2,r21,48
    a8a4:	38800005 	stb	r2,0(r7)
    a8a8:	3dc00044 	addi	r23,r7,1
    a8ac:	d9c00617 	ldw	r7,24(sp)
    a8b0:	01800044 	movi	r6,1
    a8b4:	180b883a 	mov	r5,r3
    a8b8:	2005883a 	mov	r2,r4
    a8bc:	39803826 	beq	r7,r6,a9a0 <_dtoa_r+0x8f4>
    a8c0:	000d883a 	mov	r6,zero
    a8c4:	01d00934 	movhi	r7,16420
    a8c8:	0005a580 	call	5a58 <__muldf3>
    a8cc:	000d883a 	mov	r6,zero
    a8d0:	000f883a 	mov	r7,zero
    a8d4:	1009883a 	mov	r4,r2
    a8d8:	180b883a 	mov	r5,r3
    a8dc:	1025883a 	mov	r18,r2
    a8e0:	1827883a 	mov	r19,r3
    a8e4:	00058f40 	call	58f4 <__eqdf2>
    a8e8:	103f9a26 	beq	r2,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    a8ec:	d9c00617 	ldw	r7,24(sp)
    a8f0:	d8c00717 	ldw	r3,28(sp)
    a8f4:	b829883a 	mov	r20,r23
    a8f8:	38bfffc4 	addi	r2,r7,-1
    a8fc:	18ad883a 	add	r22,r3,r2
    a900:	00000a06 	br	a92c <_dtoa_r+0x880>
    a904:	0005a580 	call	5a58 <__muldf3>
    a908:	000d883a 	mov	r6,zero
    a90c:	000f883a 	mov	r7,zero
    a910:	1009883a 	mov	r4,r2
    a914:	180b883a 	mov	r5,r3
    a918:	1025883a 	mov	r18,r2
    a91c:	1827883a 	mov	r19,r3
    a920:	b829883a 	mov	r20,r23
    a924:	00058f40 	call	58f4 <__eqdf2>
    a928:	103f8a26 	beq	r2,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    a92c:	800d883a 	mov	r6,r16
    a930:	880f883a 	mov	r7,r17
    a934:	9009883a 	mov	r4,r18
    a938:	980b883a 	mov	r5,r19
    a93c:	00112bc0 	call	112bc <__divdf3>
    a940:	180b883a 	mov	r5,r3
    a944:	1009883a 	mov	r4,r2
    a948:	0006bc00 	call	6bc0 <__fixdfsi>
    a94c:	1009883a 	mov	r4,r2
    a950:	102b883a 	mov	r21,r2
    a954:	0006c400 	call	6c40 <__floatsidf>
    a958:	800d883a 	mov	r6,r16
    a95c:	880f883a 	mov	r7,r17
    a960:	1009883a 	mov	r4,r2
    a964:	180b883a 	mov	r5,r3
    a968:	0005a580 	call	5a58 <__muldf3>
    a96c:	100d883a 	mov	r6,r2
    a970:	180f883a 	mov	r7,r3
    a974:	9009883a 	mov	r4,r18
    a978:	980b883a 	mov	r5,r19
    a97c:	00062c40 	call	62c4 <__subdf3>
    a980:	aa000c04 	addi	r8,r21,48
    a984:	a2000005 	stb	r8,0(r20)
    a988:	000d883a 	mov	r6,zero
    a98c:	01d00934 	movhi	r7,16420
    a990:	1009883a 	mov	r4,r2
    a994:	180b883a 	mov	r5,r3
    a998:	a5c00044 	addi	r23,r20,1
    a99c:	b53fd91e 	bne	r22,r20,a904 <__alt_exception_stack_pointer+0xf800a904>
    a9a0:	100d883a 	mov	r6,r2
    a9a4:	180f883a 	mov	r7,r3
    a9a8:	1009883a 	mov	r4,r2
    a9ac:	180b883a 	mov	r5,r3
    a9b0:	00050480 	call	5048 <__adddf3>
    a9b4:	100d883a 	mov	r6,r2
    a9b8:	180f883a 	mov	r7,r3
    a9bc:	8009883a 	mov	r4,r16
    a9c0:	880b883a 	mov	r5,r17
    a9c4:	1027883a 	mov	r19,r2
    a9c8:	1825883a 	mov	r18,r3
    a9cc:	0011c8c0 	call	11c8c <__ledf2>
    a9d0:	10000816 	blt	r2,zero,a9f4 <_dtoa_r+0x948>
    a9d4:	980d883a 	mov	r6,r19
    a9d8:	900f883a 	mov	r7,r18
    a9dc:	8009883a 	mov	r4,r16
    a9e0:	880b883a 	mov	r5,r17
    a9e4:	00058f40 	call	58f4 <__eqdf2>
    a9e8:	103f5a1e 	bne	r2,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    a9ec:	ad40004c 	andi	r21,r21,1
    a9f0:	a83f5826 	beq	r21,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    a9f4:	bd3fffc3 	ldbu	r20,-1(r23)
    a9f8:	b8bfffc4 	addi	r2,r23,-1
    a9fc:	1007883a 	mov	r3,r2
    aa00:	01400e44 	movi	r5,57
    aa04:	d9800717 	ldw	r6,28(sp)
    aa08:	00000506 	br	aa20 <_dtoa_r+0x974>
    aa0c:	18ffffc4 	addi	r3,r3,-1
    aa10:	11824726 	beq	r2,r6,b330 <_dtoa_r+0x1284>
    aa14:	1d000003 	ldbu	r20,0(r3)
    aa18:	102f883a 	mov	r23,r2
    aa1c:	10bfffc4 	addi	r2,r2,-1
    aa20:	a1003fcc 	andi	r4,r20,255
    aa24:	2100201c 	xori	r4,r4,128
    aa28:	213fe004 	addi	r4,r4,-128
    aa2c:	217ff726 	beq	r4,r5,aa0c <__alt_exception_stack_pointer+0xf800aa0c>
    aa30:	a2000044 	addi	r8,r20,1
    aa34:	12000005 	stb	r8,0(r2)
    aa38:	003f4606 	br	a754 <__alt_exception_stack_pointer+0xf800a754>
    aa3c:	d9000b17 	ldw	r4,44(sp)
    aa40:	2000c826 	beq	r4,zero,ad64 <_dtoa_r+0xcb8>
    aa44:	d9800317 	ldw	r6,12(sp)
    aa48:	00c00044 	movi	r3,1
    aa4c:	1980f90e 	bge	r3,r6,ae34 <_dtoa_r+0xd88>
    aa50:	d8800617 	ldw	r2,24(sp)
    aa54:	d8c00a17 	ldw	r3,40(sp)
    aa58:	157fffc4 	addi	r21,r2,-1
    aa5c:	1d41f316 	blt	r3,r21,b22c <_dtoa_r+0x1180>
    aa60:	1d6bc83a 	sub	r21,r3,r21
    aa64:	d9c00617 	ldw	r7,24(sp)
    aa68:	3802aa16 	blt	r7,zero,b514 <_dtoa_r+0x1468>
    aa6c:	dd000817 	ldw	r20,32(sp)
    aa70:	d8800617 	ldw	r2,24(sp)
    aa74:	d8c00817 	ldw	r3,32(sp)
    aa78:	01400044 	movi	r5,1
    aa7c:	e009883a 	mov	r4,fp
    aa80:	1887883a 	add	r3,r3,r2
    aa84:	d8c00815 	stw	r3,32(sp)
    aa88:	b0ad883a 	add	r22,r22,r2
    aa8c:	000d2440 	call	d244 <__i2b>
    aa90:	1023883a 	mov	r17,r2
    aa94:	a0000826 	beq	r20,zero,aab8 <_dtoa_r+0xa0c>
    aa98:	0580070e 	bge	zero,r22,aab8 <_dtoa_r+0xa0c>
    aa9c:	a005883a 	mov	r2,r20
    aaa0:	b500b916 	blt	r22,r20,ad88 <_dtoa_r+0xcdc>
    aaa4:	d9000817 	ldw	r4,32(sp)
    aaa8:	a0a9c83a 	sub	r20,r20,r2
    aaac:	b0adc83a 	sub	r22,r22,r2
    aab0:	2089c83a 	sub	r4,r4,r2
    aab4:	d9000815 	stw	r4,32(sp)
    aab8:	d9800a17 	ldw	r6,40(sp)
    aabc:	0181810e 	bge	zero,r6,b0c4 <_dtoa_r+0x1018>
    aac0:	d9c00b17 	ldw	r7,44(sp)
    aac4:	3800b326 	beq	r7,zero,ad94 <_dtoa_r+0xce8>
    aac8:	a800b226 	beq	r21,zero,ad94 <_dtoa_r+0xce8>
    aacc:	880b883a 	mov	r5,r17
    aad0:	a80d883a 	mov	r6,r21
    aad4:	e009883a 	mov	r4,fp
    aad8:	000d50c0 	call	d50c <__pow5mult>
    aadc:	d9800917 	ldw	r6,36(sp)
    aae0:	100b883a 	mov	r5,r2
    aae4:	e009883a 	mov	r4,fp
    aae8:	1023883a 	mov	r17,r2
    aaec:	000d2800 	call	d280 <__multiply>
    aaf0:	1021883a 	mov	r16,r2
    aaf4:	d8800a17 	ldw	r2,40(sp)
    aaf8:	d9400917 	ldw	r5,36(sp)
    aafc:	e009883a 	mov	r4,fp
    ab00:	1545c83a 	sub	r2,r2,r21
    ab04:	d8800a15 	stw	r2,40(sp)
    ab08:	000ceb80 	call	ceb8 <_Bfree>
    ab0c:	d8c00a17 	ldw	r3,40(sp)
    ab10:	18009f1e 	bne	r3,zero,ad90 <_dtoa_r+0xce4>
    ab14:	05c00044 	movi	r23,1
    ab18:	e009883a 	mov	r4,fp
    ab1c:	b80b883a 	mov	r5,r23
    ab20:	000d2440 	call	d244 <__i2b>
    ab24:	d9000d17 	ldw	r4,52(sp)
    ab28:	102b883a 	mov	r21,r2
    ab2c:	2000ce26 	beq	r4,zero,ae68 <_dtoa_r+0xdbc>
    ab30:	200d883a 	mov	r6,r4
    ab34:	100b883a 	mov	r5,r2
    ab38:	e009883a 	mov	r4,fp
    ab3c:	000d50c0 	call	d50c <__pow5mult>
    ab40:	d9800317 	ldw	r6,12(sp)
    ab44:	102b883a 	mov	r21,r2
    ab48:	b981810e 	bge	r23,r6,b150 <_dtoa_r+0x10a4>
    ab4c:	0027883a 	mov	r19,zero
    ab50:	a8800417 	ldw	r2,16(r21)
    ab54:	05c00804 	movi	r23,32
    ab58:	10800104 	addi	r2,r2,4
    ab5c:	1085883a 	add	r2,r2,r2
    ab60:	1085883a 	add	r2,r2,r2
    ab64:	a885883a 	add	r2,r21,r2
    ab68:	11000017 	ldw	r4,0(r2)
    ab6c:	000d12c0 	call	d12c <__hi0bits>
    ab70:	b885c83a 	sub	r2,r23,r2
    ab74:	1585883a 	add	r2,r2,r22
    ab78:	108007cc 	andi	r2,r2,31
    ab7c:	1000b326 	beq	r2,zero,ae4c <_dtoa_r+0xda0>
    ab80:	00c00804 	movi	r3,32
    ab84:	1887c83a 	sub	r3,r3,r2
    ab88:	01000104 	movi	r4,4
    ab8c:	20c2cd0e 	bge	r4,r3,b6c4 <_dtoa_r+0x1618>
    ab90:	00c00704 	movi	r3,28
    ab94:	1885c83a 	sub	r2,r3,r2
    ab98:	d8c00817 	ldw	r3,32(sp)
    ab9c:	a0a9883a 	add	r20,r20,r2
    aba0:	b0ad883a 	add	r22,r22,r2
    aba4:	1887883a 	add	r3,r3,r2
    aba8:	d8c00815 	stw	r3,32(sp)
    abac:	d9800817 	ldw	r6,32(sp)
    abb0:	0180040e 	bge	zero,r6,abc4 <_dtoa_r+0xb18>
    abb4:	800b883a 	mov	r5,r16
    abb8:	e009883a 	mov	r4,fp
    abbc:	000d64c0 	call	d64c <__lshift>
    abc0:	1021883a 	mov	r16,r2
    abc4:	0580050e 	bge	zero,r22,abdc <_dtoa_r+0xb30>
    abc8:	a80b883a 	mov	r5,r21
    abcc:	b00d883a 	mov	r6,r22
    abd0:	e009883a 	mov	r4,fp
    abd4:	000d64c0 	call	d64c <__lshift>
    abd8:	102b883a 	mov	r21,r2
    abdc:	d9c00e17 	ldw	r7,56(sp)
    abe0:	3801211e 	bne	r7,zero,b068 <_dtoa_r+0xfbc>
    abe4:	d9800617 	ldw	r6,24(sp)
    abe8:	0181380e 	bge	zero,r6,b0cc <_dtoa_r+0x1020>
    abec:	d8c00b17 	ldw	r3,44(sp)
    abf0:	1800ab1e 	bne	r3,zero,aea0 <_dtoa_r+0xdf4>
    abf4:	dc800717 	ldw	r18,28(sp)
    abf8:	dcc00617 	ldw	r19,24(sp)
    abfc:	9029883a 	mov	r20,r18
    ac00:	00000206 	br	ac0c <_dtoa_r+0xb60>
    ac04:	000cee00 	call	cee0 <__multadd>
    ac08:	1021883a 	mov	r16,r2
    ac0c:	a80b883a 	mov	r5,r21
    ac10:	8009883a 	mov	r4,r16
    ac14:	0009e840 	call	9e84 <quorem>
    ac18:	10800c04 	addi	r2,r2,48
    ac1c:	90800005 	stb	r2,0(r18)
    ac20:	94800044 	addi	r18,r18,1
    ac24:	9507c83a 	sub	r3,r18,r20
    ac28:	000f883a 	mov	r7,zero
    ac2c:	01800284 	movi	r6,10
    ac30:	800b883a 	mov	r5,r16
    ac34:	e009883a 	mov	r4,fp
    ac38:	1cfff216 	blt	r3,r19,ac04 <__alt_exception_stack_pointer+0xf800ac04>
    ac3c:	1011883a 	mov	r8,r2
    ac40:	d8800617 	ldw	r2,24(sp)
    ac44:	0082370e 	bge	zero,r2,b524 <_dtoa_r+0x1478>
    ac48:	d9000717 	ldw	r4,28(sp)
    ac4c:	0025883a 	mov	r18,zero
    ac50:	20af883a 	add	r23,r4,r2
    ac54:	01800044 	movi	r6,1
    ac58:	800b883a 	mov	r5,r16
    ac5c:	e009883a 	mov	r4,fp
    ac60:	da001715 	stw	r8,92(sp)
    ac64:	000d64c0 	call	d64c <__lshift>
    ac68:	a80b883a 	mov	r5,r21
    ac6c:	1009883a 	mov	r4,r2
    ac70:	d8800915 	stw	r2,36(sp)
    ac74:	000d7940 	call	d794 <__mcmp>
    ac78:	da001717 	ldw	r8,92(sp)
    ac7c:	0081800e 	bge	zero,r2,b280 <_dtoa_r+0x11d4>
    ac80:	b93fffc3 	ldbu	r4,-1(r23)
    ac84:	b8bfffc4 	addi	r2,r23,-1
    ac88:	1007883a 	mov	r3,r2
    ac8c:	01800e44 	movi	r6,57
    ac90:	d9c00717 	ldw	r7,28(sp)
    ac94:	00000506 	br	acac <_dtoa_r+0xc00>
    ac98:	18ffffc4 	addi	r3,r3,-1
    ac9c:	11c12326 	beq	r2,r7,b12c <_dtoa_r+0x1080>
    aca0:	19000003 	ldbu	r4,0(r3)
    aca4:	102f883a 	mov	r23,r2
    aca8:	10bfffc4 	addi	r2,r2,-1
    acac:	21403fcc 	andi	r5,r4,255
    acb0:	2940201c 	xori	r5,r5,128
    acb4:	297fe004 	addi	r5,r5,-128
    acb8:	29bff726 	beq	r5,r6,ac98 <__alt_exception_stack_pointer+0xf800ac98>
    acbc:	21000044 	addi	r4,r4,1
    acc0:	11000005 	stb	r4,0(r2)
    acc4:	a80b883a 	mov	r5,r21
    acc8:	e009883a 	mov	r4,fp
    accc:	000ceb80 	call	ceb8 <_Bfree>
    acd0:	883ea026 	beq	r17,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    acd4:	90000426 	beq	r18,zero,ace8 <_dtoa_r+0xc3c>
    acd8:	94400326 	beq	r18,r17,ace8 <_dtoa_r+0xc3c>
    acdc:	900b883a 	mov	r5,r18
    ace0:	e009883a 	mov	r4,fp
    ace4:	000ceb80 	call	ceb8 <_Bfree>
    ace8:	880b883a 	mov	r5,r17
    acec:	e009883a 	mov	r4,fp
    acf0:	000ceb80 	call	ceb8 <_Bfree>
    acf4:	003e9706 	br	a754 <__alt_exception_stack_pointer+0xf800a754>
    acf8:	01800044 	movi	r6,1
    acfc:	d9800e15 	stw	r6,56(sp)
    ad00:	003d9606 	br	a35c <__alt_exception_stack_pointer+0xf800a35c>
    ad04:	d8800817 	ldw	r2,32(sp)
    ad08:	d8c00517 	ldw	r3,20(sp)
    ad0c:	d8000d15 	stw	zero,52(sp)
    ad10:	10c5c83a 	sub	r2,r2,r3
    ad14:	00c9c83a 	sub	r4,zero,r3
    ad18:	d8800815 	stw	r2,32(sp)
    ad1c:	d9000a15 	stw	r4,40(sp)
    ad20:	003d9706 	br	a380 <__alt_exception_stack_pointer+0xf800a380>
    ad24:	05adc83a 	sub	r22,zero,r22
    ad28:	dd800815 	stw	r22,32(sp)
    ad2c:	002d883a 	mov	r22,zero
    ad30:	003d8e06 	br	a36c <__alt_exception_stack_pointer+0xf800a36c>
    ad34:	d9000517 	ldw	r4,20(sp)
    ad38:	0006c400 	call	6c40 <__floatsidf>
    ad3c:	100d883a 	mov	r6,r2
    ad40:	180f883a 	mov	r7,r3
    ad44:	a009883a 	mov	r4,r20
    ad48:	880b883a 	mov	r5,r17
    ad4c:	00058f40 	call	58f4 <__eqdf2>
    ad50:	103d7126 	beq	r2,zero,a318 <__alt_exception_stack_pointer+0xf800a318>
    ad54:	d9c00517 	ldw	r7,20(sp)
    ad58:	39ffffc4 	addi	r7,r7,-1
    ad5c:	d9c00515 	stw	r7,20(sp)
    ad60:	003d6d06 	br	a318 <__alt_exception_stack_pointer+0xf800a318>
    ad64:	dd400a17 	ldw	r21,40(sp)
    ad68:	dd000817 	ldw	r20,32(sp)
    ad6c:	0023883a 	mov	r17,zero
    ad70:	003f4806 	br	aa94 <__alt_exception_stack_pointer+0xf800aa94>
    ad74:	10e3c83a 	sub	r17,r2,r3
    ad78:	9448983a 	sll	r4,r18,r17
    ad7c:	003d3206 	br	a248 <__alt_exception_stack_pointer+0xf800a248>
    ad80:	d8000e15 	stw	zero,56(sp)
    ad84:	003d7506 	br	a35c <__alt_exception_stack_pointer+0xf800a35c>
    ad88:	b005883a 	mov	r2,r22
    ad8c:	003f4506 	br	aaa4 <__alt_exception_stack_pointer+0xf800aaa4>
    ad90:	dc000915 	stw	r16,36(sp)
    ad94:	d9800a17 	ldw	r6,40(sp)
    ad98:	d9400917 	ldw	r5,36(sp)
    ad9c:	e009883a 	mov	r4,fp
    ada0:	000d50c0 	call	d50c <__pow5mult>
    ada4:	1021883a 	mov	r16,r2
    ada8:	003f5a06 	br	ab14 <__alt_exception_stack_pointer+0xf800ab14>
    adac:	01c00044 	movi	r7,1
    adb0:	d9c00b15 	stw	r7,44(sp)
    adb4:	d8802217 	ldw	r2,136(sp)
    adb8:	0081280e 	bge	zero,r2,b25c <_dtoa_r+0x11b0>
    adbc:	100d883a 	mov	r6,r2
    adc0:	1021883a 	mov	r16,r2
    adc4:	d8800c15 	stw	r2,48(sp)
    adc8:	d8800615 	stw	r2,24(sp)
    adcc:	003d8806 	br	a3f0 <__alt_exception_stack_pointer+0xf800a3f0>
    add0:	d8800617 	ldw	r2,24(sp)
    add4:	00be9b16 	blt	zero,r2,a844 <__alt_exception_stack_pointer+0xf800a844>
    add8:	10010f1e 	bne	r2,zero,b218 <_dtoa_r+0x116c>
    addc:	880b883a 	mov	r5,r17
    ade0:	000d883a 	mov	r6,zero
    ade4:	01d00534 	movhi	r7,16404
    ade8:	8009883a 	mov	r4,r16
    adec:	0005a580 	call	5a58 <__muldf3>
    adf0:	900d883a 	mov	r6,r18
    adf4:	980f883a 	mov	r7,r19
    adf8:	1009883a 	mov	r4,r2
    adfc:	180b883a 	mov	r5,r3
    ae00:	000597c0 	call	597c <__gedf2>
    ae04:	002b883a 	mov	r21,zero
    ae08:	0023883a 	mov	r17,zero
    ae0c:	1000bf16 	blt	r2,zero,b10c <_dtoa_r+0x1060>
    ae10:	d9802217 	ldw	r6,136(sp)
    ae14:	ddc00717 	ldw	r23,28(sp)
    ae18:	018c303a 	nor	r6,zero,r6
    ae1c:	d9800515 	stw	r6,20(sp)
    ae20:	a80b883a 	mov	r5,r21
    ae24:	e009883a 	mov	r4,fp
    ae28:	000ceb80 	call	ceb8 <_Bfree>
    ae2c:	883e4926 	beq	r17,zero,a754 <__alt_exception_stack_pointer+0xf800a754>
    ae30:	003fad06 	br	ace8 <__alt_exception_stack_pointer+0xf800ace8>
    ae34:	d9c01117 	ldw	r7,68(sp)
    ae38:	3801bc26 	beq	r7,zero,b52c <_dtoa_r+0x1480>
    ae3c:	10810cc4 	addi	r2,r2,1075
    ae40:	dd400a17 	ldw	r21,40(sp)
    ae44:	dd000817 	ldw	r20,32(sp)
    ae48:	003f0a06 	br	aa74 <__alt_exception_stack_pointer+0xf800aa74>
    ae4c:	00800704 	movi	r2,28
    ae50:	d9000817 	ldw	r4,32(sp)
    ae54:	a0a9883a 	add	r20,r20,r2
    ae58:	b0ad883a 	add	r22,r22,r2
    ae5c:	2089883a 	add	r4,r4,r2
    ae60:	d9000815 	stw	r4,32(sp)
    ae64:	003f5106 	br	abac <__alt_exception_stack_pointer+0xf800abac>
    ae68:	d8c00317 	ldw	r3,12(sp)
    ae6c:	b8c1fc0e 	bge	r23,r3,b660 <_dtoa_r+0x15b4>
    ae70:	0027883a 	mov	r19,zero
    ae74:	b805883a 	mov	r2,r23
    ae78:	003f3e06 	br	ab74 <__alt_exception_stack_pointer+0xf800ab74>
    ae7c:	880b883a 	mov	r5,r17
    ae80:	e009883a 	mov	r4,fp
    ae84:	000f883a 	mov	r7,zero
    ae88:	01800284 	movi	r6,10
    ae8c:	000cee00 	call	cee0 <__multadd>
    ae90:	d9000c17 	ldw	r4,48(sp)
    ae94:	1023883a 	mov	r17,r2
    ae98:	0102040e 	bge	zero,r4,b6ac <_dtoa_r+0x1600>
    ae9c:	d9000615 	stw	r4,24(sp)
    aea0:	0500050e 	bge	zero,r20,aeb8 <_dtoa_r+0xe0c>
    aea4:	880b883a 	mov	r5,r17
    aea8:	a00d883a 	mov	r6,r20
    aeac:	e009883a 	mov	r4,fp
    aeb0:	000d64c0 	call	d64c <__lshift>
    aeb4:	1023883a 	mov	r17,r2
    aeb8:	9801241e 	bne	r19,zero,b34c <_dtoa_r+0x12a0>
    aebc:	8829883a 	mov	r20,r17
    aec0:	d9000617 	ldw	r4,24(sp)
    aec4:	dcc00717 	ldw	r19,28(sp)
    aec8:	9480004c 	andi	r18,r18,1
    aecc:	20bfffc4 	addi	r2,r4,-1
    aed0:	9885883a 	add	r2,r19,r2
    aed4:	d8800415 	stw	r2,16(sp)
    aed8:	dc800615 	stw	r18,24(sp)
    aedc:	a80b883a 	mov	r5,r21
    aee0:	8009883a 	mov	r4,r16
    aee4:	0009e840 	call	9e84 <quorem>
    aee8:	880b883a 	mov	r5,r17
    aeec:	8009883a 	mov	r4,r16
    aef0:	102f883a 	mov	r23,r2
    aef4:	000d7940 	call	d794 <__mcmp>
    aef8:	a80b883a 	mov	r5,r21
    aefc:	a00d883a 	mov	r6,r20
    af00:	e009883a 	mov	r4,fp
    af04:	102d883a 	mov	r22,r2
    af08:	000d7f40 	call	d7f4 <__mdiff>
    af0c:	1007883a 	mov	r3,r2
    af10:	10800317 	ldw	r2,12(r2)
    af14:	bc800c04 	addi	r18,r23,48
    af18:	180b883a 	mov	r5,r3
    af1c:	10004e1e 	bne	r2,zero,b058 <_dtoa_r+0xfac>
    af20:	8009883a 	mov	r4,r16
    af24:	d8c01615 	stw	r3,88(sp)
    af28:	000d7940 	call	d794 <__mcmp>
    af2c:	d8c01617 	ldw	r3,88(sp)
    af30:	e009883a 	mov	r4,fp
    af34:	d8801615 	stw	r2,88(sp)
    af38:	180b883a 	mov	r5,r3
    af3c:	000ceb80 	call	ceb8 <_Bfree>
    af40:	d8801617 	ldw	r2,88(sp)
    af44:	1000041e 	bne	r2,zero,af58 <_dtoa_r+0xeac>
    af48:	d9800317 	ldw	r6,12(sp)
    af4c:	3000021e 	bne	r6,zero,af58 <_dtoa_r+0xeac>
    af50:	d8c00617 	ldw	r3,24(sp)
    af54:	18003726 	beq	r3,zero,b034 <_dtoa_r+0xf88>
    af58:	b0002016 	blt	r22,zero,afdc <_dtoa_r+0xf30>
    af5c:	b000041e 	bne	r22,zero,af70 <_dtoa_r+0xec4>
    af60:	d9000317 	ldw	r4,12(sp)
    af64:	2000021e 	bne	r4,zero,af70 <_dtoa_r+0xec4>
    af68:	d8c00617 	ldw	r3,24(sp)
    af6c:	18001b26 	beq	r3,zero,afdc <_dtoa_r+0xf30>
    af70:	00810716 	blt	zero,r2,b390 <_dtoa_r+0x12e4>
    af74:	d8c00417 	ldw	r3,16(sp)
    af78:	9d800044 	addi	r22,r19,1
    af7c:	9c800005 	stb	r18,0(r19)
    af80:	b02f883a 	mov	r23,r22
    af84:	98c10626 	beq	r19,r3,b3a0 <_dtoa_r+0x12f4>
    af88:	800b883a 	mov	r5,r16
    af8c:	000f883a 	mov	r7,zero
    af90:	01800284 	movi	r6,10
    af94:	e009883a 	mov	r4,fp
    af98:	000cee00 	call	cee0 <__multadd>
    af9c:	1021883a 	mov	r16,r2
    afa0:	000f883a 	mov	r7,zero
    afa4:	01800284 	movi	r6,10
    afa8:	880b883a 	mov	r5,r17
    afac:	e009883a 	mov	r4,fp
    afb0:	8d002526 	beq	r17,r20,b048 <_dtoa_r+0xf9c>
    afb4:	000cee00 	call	cee0 <__multadd>
    afb8:	a00b883a 	mov	r5,r20
    afbc:	000f883a 	mov	r7,zero
    afc0:	01800284 	movi	r6,10
    afc4:	e009883a 	mov	r4,fp
    afc8:	1023883a 	mov	r17,r2
    afcc:	000cee00 	call	cee0 <__multadd>
    afd0:	1029883a 	mov	r20,r2
    afd4:	b027883a 	mov	r19,r22
    afd8:	003fc006 	br	aedc <__alt_exception_stack_pointer+0xf800aedc>
    afdc:	9011883a 	mov	r8,r18
    afe0:	00800e0e 	bge	zero,r2,b01c <_dtoa_r+0xf70>
    afe4:	800b883a 	mov	r5,r16
    afe8:	01800044 	movi	r6,1
    afec:	e009883a 	mov	r4,fp
    aff0:	da001715 	stw	r8,92(sp)
    aff4:	000d64c0 	call	d64c <__lshift>
    aff8:	a80b883a 	mov	r5,r21
    affc:	1009883a 	mov	r4,r2
    b000:	1021883a 	mov	r16,r2
    b004:	000d7940 	call	d794 <__mcmp>
    b008:	da001717 	ldw	r8,92(sp)
    b00c:	0081960e 	bge	zero,r2,b668 <_dtoa_r+0x15bc>
    b010:	00800e44 	movi	r2,57
    b014:	40817026 	beq	r8,r2,b5d8 <_dtoa_r+0x152c>
    b018:	ba000c44 	addi	r8,r23,49
    b01c:	8825883a 	mov	r18,r17
    b020:	9dc00044 	addi	r23,r19,1
    b024:	9a000005 	stb	r8,0(r19)
    b028:	a023883a 	mov	r17,r20
    b02c:	dc000915 	stw	r16,36(sp)
    b030:	003f2406 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    b034:	00800e44 	movi	r2,57
    b038:	9011883a 	mov	r8,r18
    b03c:	90816626 	beq	r18,r2,b5d8 <_dtoa_r+0x152c>
    b040:	05bff516 	blt	zero,r22,b018 <__alt_exception_stack_pointer+0xf800b018>
    b044:	003ff506 	br	b01c <__alt_exception_stack_pointer+0xf800b01c>
    b048:	000cee00 	call	cee0 <__multadd>
    b04c:	1023883a 	mov	r17,r2
    b050:	1029883a 	mov	r20,r2
    b054:	003fdf06 	br	afd4 <__alt_exception_stack_pointer+0xf800afd4>
    b058:	e009883a 	mov	r4,fp
    b05c:	000ceb80 	call	ceb8 <_Bfree>
    b060:	00800044 	movi	r2,1
    b064:	003fbc06 	br	af58 <__alt_exception_stack_pointer+0xf800af58>
    b068:	a80b883a 	mov	r5,r21
    b06c:	8009883a 	mov	r4,r16
    b070:	000d7940 	call	d794 <__mcmp>
    b074:	103edb0e 	bge	r2,zero,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b078:	800b883a 	mov	r5,r16
    b07c:	000f883a 	mov	r7,zero
    b080:	01800284 	movi	r6,10
    b084:	e009883a 	mov	r4,fp
    b088:	000cee00 	call	cee0 <__multadd>
    b08c:	1021883a 	mov	r16,r2
    b090:	d8800517 	ldw	r2,20(sp)
    b094:	d8c00b17 	ldw	r3,44(sp)
    b098:	10bfffc4 	addi	r2,r2,-1
    b09c:	d8800515 	stw	r2,20(sp)
    b0a0:	183f761e 	bne	r3,zero,ae7c <__alt_exception_stack_pointer+0xf800ae7c>
    b0a4:	d9000c17 	ldw	r4,48(sp)
    b0a8:	0101730e 	bge	zero,r4,b678 <_dtoa_r+0x15cc>
    b0ac:	d9000615 	stw	r4,24(sp)
    b0b0:	003ed006 	br	abf4 <__alt_exception_stack_pointer+0xf800abf4>
    b0b4:	00800084 	movi	r2,2
    b0b8:	3081861e 	bne	r6,r2,b6d4 <_dtoa_r+0x1628>
    b0bc:	d8000b15 	stw	zero,44(sp)
    b0c0:	003f3c06 	br	adb4 <__alt_exception_stack_pointer+0xf800adb4>
    b0c4:	dc000917 	ldw	r16,36(sp)
    b0c8:	003e9206 	br	ab14 <__alt_exception_stack_pointer+0xf800ab14>
    b0cc:	d9c00317 	ldw	r7,12(sp)
    b0d0:	00800084 	movi	r2,2
    b0d4:	11fec50e 	bge	r2,r7,abec <__alt_exception_stack_pointer+0xf800abec>
    b0d8:	d9000617 	ldw	r4,24(sp)
    b0dc:	20013c1e 	bne	r4,zero,b5d0 <_dtoa_r+0x1524>
    b0e0:	a80b883a 	mov	r5,r21
    b0e4:	000f883a 	mov	r7,zero
    b0e8:	01800144 	movi	r6,5
    b0ec:	e009883a 	mov	r4,fp
    b0f0:	000cee00 	call	cee0 <__multadd>
    b0f4:	100b883a 	mov	r5,r2
    b0f8:	8009883a 	mov	r4,r16
    b0fc:	102b883a 	mov	r21,r2
    b100:	000d7940 	call	d794 <__mcmp>
    b104:	dc000915 	stw	r16,36(sp)
    b108:	00bf410e 	bge	zero,r2,ae10 <__alt_exception_stack_pointer+0xf800ae10>
    b10c:	d9c00717 	ldw	r7,28(sp)
    b110:	00800c44 	movi	r2,49
    b114:	38800005 	stb	r2,0(r7)
    b118:	d8800517 	ldw	r2,20(sp)
    b11c:	3dc00044 	addi	r23,r7,1
    b120:	10800044 	addi	r2,r2,1
    b124:	d8800515 	stw	r2,20(sp)
    b128:	003f3d06 	br	ae20 <__alt_exception_stack_pointer+0xf800ae20>
    b12c:	d9800517 	ldw	r6,20(sp)
    b130:	d9c00717 	ldw	r7,28(sp)
    b134:	00800c44 	movi	r2,49
    b138:	31800044 	addi	r6,r6,1
    b13c:	d9800515 	stw	r6,20(sp)
    b140:	38800005 	stb	r2,0(r7)
    b144:	003edf06 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    b148:	d8000b15 	stw	zero,44(sp)
    b14c:	003c9f06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    b150:	903e7e1e 	bne	r18,zero,ab4c <__alt_exception_stack_pointer+0xf800ab4c>
    b154:	00800434 	movhi	r2,16
    b158:	10bfffc4 	addi	r2,r2,-1
    b15c:	9884703a 	and	r2,r19,r2
    b160:	1000ea1e 	bne	r2,zero,b50c <_dtoa_r+0x1460>
    b164:	9cdffc2c 	andhi	r19,r19,32752
    b168:	9800e826 	beq	r19,zero,b50c <_dtoa_r+0x1460>
    b16c:	d9c00817 	ldw	r7,32(sp)
    b170:	b5800044 	addi	r22,r22,1
    b174:	04c00044 	movi	r19,1
    b178:	39c00044 	addi	r7,r7,1
    b17c:	d9c00815 	stw	r7,32(sp)
    b180:	d8800d17 	ldw	r2,52(sp)
    b184:	103e721e 	bne	r2,zero,ab50 <__alt_exception_stack_pointer+0xf800ab50>
    b188:	00800044 	movi	r2,1
    b18c:	003e7906 	br	ab74 <__alt_exception_stack_pointer+0xf800ab74>
    b190:	8009883a 	mov	r4,r16
    b194:	0006c400 	call	6c40 <__floatsidf>
    b198:	d9800f17 	ldw	r6,60(sp)
    b19c:	d9c01017 	ldw	r7,64(sp)
    b1a0:	1009883a 	mov	r4,r2
    b1a4:	180b883a 	mov	r5,r3
    b1a8:	0005a580 	call	5a58 <__muldf3>
    b1ac:	000d883a 	mov	r6,zero
    b1b0:	01d00734 	movhi	r7,16412
    b1b4:	1009883a 	mov	r4,r2
    b1b8:	180b883a 	mov	r5,r3
    b1bc:	00050480 	call	5048 <__adddf3>
    b1c0:	047f3034 	movhi	r17,64704
    b1c4:	1021883a 	mov	r16,r2
    b1c8:	1c63883a 	add	r17,r3,r17
    b1cc:	d9000f17 	ldw	r4,60(sp)
    b1d0:	d9401017 	ldw	r5,64(sp)
    b1d4:	000d883a 	mov	r6,zero
    b1d8:	01d00534 	movhi	r7,16404
    b1dc:	00062c40 	call	62c4 <__subdf3>
    b1e0:	800d883a 	mov	r6,r16
    b1e4:	880f883a 	mov	r7,r17
    b1e8:	1009883a 	mov	r4,r2
    b1ec:	180b883a 	mov	r5,r3
    b1f0:	102b883a 	mov	r21,r2
    b1f4:	1829883a 	mov	r20,r3
    b1f8:	000597c0 	call	597c <__gedf2>
    b1fc:	00806c16 	blt	zero,r2,b3b0 <_dtoa_r+0x1304>
    b200:	89e0003c 	xorhi	r7,r17,32768
    b204:	800d883a 	mov	r6,r16
    b208:	a809883a 	mov	r4,r21
    b20c:	a00b883a 	mov	r5,r20
    b210:	0011c8c0 	call	11c8c <__ledf2>
    b214:	103d7e0e 	bge	r2,zero,a810 <__alt_exception_stack_pointer+0xf800a810>
    b218:	002b883a 	mov	r21,zero
    b21c:	0023883a 	mov	r17,zero
    b220:	003efb06 	br	ae10 <__alt_exception_stack_pointer+0xf800ae10>
    b224:	d8800717 	ldw	r2,28(sp)
    b228:	003bd006 	br	a16c <__alt_exception_stack_pointer+0xf800a16c>
    b22c:	d9000a17 	ldw	r4,40(sp)
    b230:	d9800d17 	ldw	r6,52(sp)
    b234:	dd400a15 	stw	r21,40(sp)
    b238:	a905c83a 	sub	r2,r21,r4
    b23c:	308d883a 	add	r6,r6,r2
    b240:	d9800d15 	stw	r6,52(sp)
    b244:	002b883a 	mov	r21,zero
    b248:	003e0606 	br	aa64 <__alt_exception_stack_pointer+0xf800aa64>
    b24c:	9023883a 	mov	r17,r18
    b250:	9829883a 	mov	r20,r19
    b254:	04000084 	movi	r16,2
    b258:	003c9206 	br	a4a4 <__alt_exception_stack_pointer+0xf800a4a4>
    b25c:	04000044 	movi	r16,1
    b260:	dc000c15 	stw	r16,48(sp)
    b264:	dc000615 	stw	r16,24(sp)
    b268:	dc002215 	stw	r16,136(sp)
    b26c:	e0001115 	stw	zero,68(fp)
    b270:	000b883a 	mov	r5,zero
    b274:	003c6906 	br	a41c <__alt_exception_stack_pointer+0xf800a41c>
    b278:	3021883a 	mov	r16,r6
    b27c:	003ffb06 	br	b26c <__alt_exception_stack_pointer+0xf800b26c>
    b280:	1000021e 	bne	r2,zero,b28c <_dtoa_r+0x11e0>
    b284:	4200004c 	andi	r8,r8,1
    b288:	403e7d1e 	bne	r8,zero,ac80 <__alt_exception_stack_pointer+0xf800ac80>
    b28c:	01000c04 	movi	r4,48
    b290:	00000106 	br	b298 <_dtoa_r+0x11ec>
    b294:	102f883a 	mov	r23,r2
    b298:	b8bfffc4 	addi	r2,r23,-1
    b29c:	10c00007 	ldb	r3,0(r2)
    b2a0:	193ffc26 	beq	r3,r4,b294 <__alt_exception_stack_pointer+0xf800b294>
    b2a4:	003e8706 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    b2a8:	d8800517 	ldw	r2,20(sp)
    b2ac:	00a3c83a 	sub	r17,zero,r2
    b2b0:	8800a426 	beq	r17,zero,b544 <_dtoa_r+0x1498>
    b2b4:	888003cc 	andi	r2,r17,15
    b2b8:	100490fa 	slli	r2,r2,3
    b2bc:	00c00074 	movhi	r3,1
    b2c0:	18d5aa04 	addi	r3,r3,22184
    b2c4:	1885883a 	add	r2,r3,r2
    b2c8:	11800017 	ldw	r6,0(r2)
    b2cc:	11c00117 	ldw	r7,4(r2)
    b2d0:	9009883a 	mov	r4,r18
    b2d4:	980b883a 	mov	r5,r19
    b2d8:	8823d13a 	srai	r17,r17,4
    b2dc:	0005a580 	call	5a58 <__muldf3>
    b2e0:	d8800f15 	stw	r2,60(sp)
    b2e4:	d8c01015 	stw	r3,64(sp)
    b2e8:	8800e826 	beq	r17,zero,b68c <_dtoa_r+0x15e0>
    b2ec:	05000074 	movhi	r20,1
    b2f0:	a515a004 	addi	r20,r20,22144
    b2f4:	04000084 	movi	r16,2
    b2f8:	8980004c 	andi	r6,r17,1
    b2fc:	1009883a 	mov	r4,r2
    b300:	8823d07a 	srai	r17,r17,1
    b304:	180b883a 	mov	r5,r3
    b308:	30000426 	beq	r6,zero,b31c <_dtoa_r+0x1270>
    b30c:	a1800017 	ldw	r6,0(r20)
    b310:	a1c00117 	ldw	r7,4(r20)
    b314:	84000044 	addi	r16,r16,1
    b318:	0005a580 	call	5a58 <__muldf3>
    b31c:	a5000204 	addi	r20,r20,8
    b320:	883ff51e 	bne	r17,zero,b2f8 <__alt_exception_stack_pointer+0xf800b2f8>
    b324:	d8800f15 	stw	r2,60(sp)
    b328:	d8c01015 	stw	r3,64(sp)
    b32c:	003c7606 	br	a508 <__alt_exception_stack_pointer+0xf800a508>
    b330:	00c00c04 	movi	r3,48
    b334:	10c00005 	stb	r3,0(r2)
    b338:	d8c00517 	ldw	r3,20(sp)
    b33c:	bd3fffc3 	ldbu	r20,-1(r23)
    b340:	18c00044 	addi	r3,r3,1
    b344:	d8c00515 	stw	r3,20(sp)
    b348:	003db906 	br	aa30 <__alt_exception_stack_pointer+0xf800aa30>
    b34c:	89400117 	ldw	r5,4(r17)
    b350:	e009883a 	mov	r4,fp
    b354:	000ce100 	call	ce10 <_Balloc>
    b358:	89800417 	ldw	r6,16(r17)
    b35c:	89400304 	addi	r5,r17,12
    b360:	11000304 	addi	r4,r2,12
    b364:	31800084 	addi	r6,r6,2
    b368:	318d883a 	add	r6,r6,r6
    b36c:	318d883a 	add	r6,r6,r6
    b370:	1027883a 	mov	r19,r2
    b374:	00076000 	call	7600 <memcpy>
    b378:	01800044 	movi	r6,1
    b37c:	980b883a 	mov	r5,r19
    b380:	e009883a 	mov	r4,fp
    b384:	000d64c0 	call	d64c <__lshift>
    b388:	1029883a 	mov	r20,r2
    b38c:	003ecc06 	br	aec0 <__alt_exception_stack_pointer+0xf800aec0>
    b390:	00800e44 	movi	r2,57
    b394:	90809026 	beq	r18,r2,b5d8 <_dtoa_r+0x152c>
    b398:	92000044 	addi	r8,r18,1
    b39c:	003f1f06 	br	b01c <__alt_exception_stack_pointer+0xf800b01c>
    b3a0:	9011883a 	mov	r8,r18
    b3a4:	8825883a 	mov	r18,r17
    b3a8:	a023883a 	mov	r17,r20
    b3ac:	003e2906 	br	ac54 <__alt_exception_stack_pointer+0xf800ac54>
    b3b0:	002b883a 	mov	r21,zero
    b3b4:	0023883a 	mov	r17,zero
    b3b8:	003f5406 	br	b10c <__alt_exception_stack_pointer+0xf800b10c>
    b3bc:	61bfffc4 	addi	r6,r12,-1
    b3c0:	300490fa 	slli	r2,r6,3
    b3c4:	00c00074 	movhi	r3,1
    b3c8:	18d5aa04 	addi	r3,r3,22184
    b3cc:	1885883a 	add	r2,r3,r2
    b3d0:	11000017 	ldw	r4,0(r2)
    b3d4:	11400117 	ldw	r5,4(r2)
    b3d8:	d8800717 	ldw	r2,28(sp)
    b3dc:	880f883a 	mov	r7,r17
    b3e0:	d9801215 	stw	r6,72(sp)
    b3e4:	800d883a 	mov	r6,r16
    b3e8:	db001615 	stw	r12,88(sp)
    b3ec:	15c00044 	addi	r23,r2,1
    b3f0:	0005a580 	call	5a58 <__muldf3>
    b3f4:	d9401017 	ldw	r5,64(sp)
    b3f8:	d9000f17 	ldw	r4,60(sp)
    b3fc:	d8c01515 	stw	r3,84(sp)
    b400:	d8801415 	stw	r2,80(sp)
    b404:	0006bc00 	call	6bc0 <__fixdfsi>
    b408:	1009883a 	mov	r4,r2
    b40c:	1021883a 	mov	r16,r2
    b410:	0006c400 	call	6c40 <__floatsidf>
    b414:	d9000f17 	ldw	r4,60(sp)
    b418:	d9401017 	ldw	r5,64(sp)
    b41c:	100d883a 	mov	r6,r2
    b420:	180f883a 	mov	r7,r3
    b424:	00062c40 	call	62c4 <__subdf3>
    b428:	1829883a 	mov	r20,r3
    b42c:	d8c00717 	ldw	r3,28(sp)
    b430:	84000c04 	addi	r16,r16,48
    b434:	1023883a 	mov	r17,r2
    b438:	1c000005 	stb	r16,0(r3)
    b43c:	db001617 	ldw	r12,88(sp)
    b440:	00800044 	movi	r2,1
    b444:	60802226 	beq	r12,r2,b4d0 <_dtoa_r+0x1424>
    b448:	d9c00717 	ldw	r7,28(sp)
    b44c:	8805883a 	mov	r2,r17
    b450:	b82b883a 	mov	r21,r23
    b454:	3b19883a 	add	r12,r7,r12
    b458:	6023883a 	mov	r17,r12
    b45c:	a007883a 	mov	r3,r20
    b460:	dc800f15 	stw	r18,60(sp)
    b464:	000d883a 	mov	r6,zero
    b468:	01d00934 	movhi	r7,16420
    b46c:	1009883a 	mov	r4,r2
    b470:	180b883a 	mov	r5,r3
    b474:	0005a580 	call	5a58 <__muldf3>
    b478:	180b883a 	mov	r5,r3
    b47c:	1009883a 	mov	r4,r2
    b480:	1829883a 	mov	r20,r3
    b484:	1025883a 	mov	r18,r2
    b488:	0006bc00 	call	6bc0 <__fixdfsi>
    b48c:	1009883a 	mov	r4,r2
    b490:	1021883a 	mov	r16,r2
    b494:	0006c400 	call	6c40 <__floatsidf>
    b498:	100d883a 	mov	r6,r2
    b49c:	180f883a 	mov	r7,r3
    b4a0:	9009883a 	mov	r4,r18
    b4a4:	a00b883a 	mov	r5,r20
    b4a8:	84000c04 	addi	r16,r16,48
    b4ac:	00062c40 	call	62c4 <__subdf3>
    b4b0:	ad400044 	addi	r21,r21,1
    b4b4:	ac3fffc5 	stb	r16,-1(r21)
    b4b8:	ac7fea1e 	bne	r21,r17,b464 <__alt_exception_stack_pointer+0xf800b464>
    b4bc:	1023883a 	mov	r17,r2
    b4c0:	d8801217 	ldw	r2,72(sp)
    b4c4:	dc800f17 	ldw	r18,60(sp)
    b4c8:	1829883a 	mov	r20,r3
    b4cc:	b8af883a 	add	r23,r23,r2
    b4d0:	d9001417 	ldw	r4,80(sp)
    b4d4:	d9401517 	ldw	r5,84(sp)
    b4d8:	000d883a 	mov	r6,zero
    b4dc:	01cff834 	movhi	r7,16352
    b4e0:	00050480 	call	5048 <__adddf3>
    b4e4:	880d883a 	mov	r6,r17
    b4e8:	a00f883a 	mov	r7,r20
    b4ec:	1009883a 	mov	r4,r2
    b4f0:	180b883a 	mov	r5,r3
    b4f4:	0011c8c0 	call	11c8c <__ledf2>
    b4f8:	10003e0e 	bge	r2,zero,b5f4 <_dtoa_r+0x1548>
    b4fc:	d9001317 	ldw	r4,76(sp)
    b500:	bd3fffc3 	ldbu	r20,-1(r23)
    b504:	d9000515 	stw	r4,20(sp)
    b508:	003d3b06 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b50c:	0027883a 	mov	r19,zero
    b510:	003f1b06 	br	b180 <__alt_exception_stack_pointer+0xf800b180>
    b514:	d8800817 	ldw	r2,32(sp)
    b518:	11e9c83a 	sub	r20,r2,r7
    b51c:	0005883a 	mov	r2,zero
    b520:	003d5406 	br	aa74 <__alt_exception_stack_pointer+0xf800aa74>
    b524:	00800044 	movi	r2,1
    b528:	003dc706 	br	ac48 <__alt_exception_stack_pointer+0xf800ac48>
    b52c:	d8c00217 	ldw	r3,8(sp)
    b530:	00800d84 	movi	r2,54
    b534:	dd400a17 	ldw	r21,40(sp)
    b538:	10c5c83a 	sub	r2,r2,r3
    b53c:	dd000817 	ldw	r20,32(sp)
    b540:	003d4c06 	br	aa74 <__alt_exception_stack_pointer+0xf800aa74>
    b544:	dc800f15 	stw	r18,60(sp)
    b548:	dcc01015 	stw	r19,64(sp)
    b54c:	04000084 	movi	r16,2
    b550:	003bed06 	br	a508 <__alt_exception_stack_pointer+0xf800a508>
    b554:	d9000617 	ldw	r4,24(sp)
    b558:	203f0d26 	beq	r4,zero,b190 <__alt_exception_stack_pointer+0xf800b190>
    b55c:	d9800c17 	ldw	r6,48(sp)
    b560:	01bcab0e 	bge	zero,r6,a810 <__alt_exception_stack_pointer+0xf800a810>
    b564:	d9401017 	ldw	r5,64(sp)
    b568:	d9000f17 	ldw	r4,60(sp)
    b56c:	000d883a 	mov	r6,zero
    b570:	01d00934 	movhi	r7,16420
    b574:	0005a580 	call	5a58 <__muldf3>
    b578:	81000044 	addi	r4,r16,1
    b57c:	d8800f15 	stw	r2,60(sp)
    b580:	d8c01015 	stw	r3,64(sp)
    b584:	0006c400 	call	6c40 <__floatsidf>
    b588:	d9800f17 	ldw	r6,60(sp)
    b58c:	d9c01017 	ldw	r7,64(sp)
    b590:	1009883a 	mov	r4,r2
    b594:	180b883a 	mov	r5,r3
    b598:	0005a580 	call	5a58 <__muldf3>
    b59c:	01d00734 	movhi	r7,16412
    b5a0:	000d883a 	mov	r6,zero
    b5a4:	1009883a 	mov	r4,r2
    b5a8:	180b883a 	mov	r5,r3
    b5ac:	00050480 	call	5048 <__adddf3>
    b5b0:	d9c00517 	ldw	r7,20(sp)
    b5b4:	047f3034 	movhi	r17,64704
    b5b8:	1021883a 	mov	r16,r2
    b5bc:	39ffffc4 	addi	r7,r7,-1
    b5c0:	d9c01315 	stw	r7,76(sp)
    b5c4:	1c63883a 	add	r17,r3,r17
    b5c8:	db000c17 	ldw	r12,48(sp)
    b5cc:	003bea06 	br	a578 <__alt_exception_stack_pointer+0xf800a578>
    b5d0:	dc000915 	stw	r16,36(sp)
    b5d4:	003e0e06 	br	ae10 <__alt_exception_stack_pointer+0xf800ae10>
    b5d8:	01000e44 	movi	r4,57
    b5dc:	8825883a 	mov	r18,r17
    b5e0:	9dc00044 	addi	r23,r19,1
    b5e4:	99000005 	stb	r4,0(r19)
    b5e8:	a023883a 	mov	r17,r20
    b5ec:	dc000915 	stw	r16,36(sp)
    b5f0:	003da406 	br	ac84 <__alt_exception_stack_pointer+0xf800ac84>
    b5f4:	d9801417 	ldw	r6,80(sp)
    b5f8:	d9c01517 	ldw	r7,84(sp)
    b5fc:	0009883a 	mov	r4,zero
    b600:	014ff834 	movhi	r5,16352
    b604:	00062c40 	call	62c4 <__subdf3>
    b608:	880d883a 	mov	r6,r17
    b60c:	a00f883a 	mov	r7,r20
    b610:	1009883a 	mov	r4,r2
    b614:	180b883a 	mov	r5,r3
    b618:	000597c0 	call	597c <__gedf2>
    b61c:	00bc7c0e 	bge	zero,r2,a810 <__alt_exception_stack_pointer+0xf800a810>
    b620:	01000c04 	movi	r4,48
    b624:	00000106 	br	b62c <_dtoa_r+0x1580>
    b628:	102f883a 	mov	r23,r2
    b62c:	b8bfffc4 	addi	r2,r23,-1
    b630:	10c00007 	ldb	r3,0(r2)
    b634:	193ffc26 	beq	r3,r4,b628 <__alt_exception_stack_pointer+0xf800b628>
    b638:	d9801317 	ldw	r6,76(sp)
    b63c:	d9800515 	stw	r6,20(sp)
    b640:	003c4406 	br	a754 <__alt_exception_stack_pointer+0xf800a754>
    b644:	d9801317 	ldw	r6,76(sp)
    b648:	d9800515 	stw	r6,20(sp)
    b64c:	003cea06 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b650:	dd800f17 	ldw	r22,60(sp)
    b654:	dcc01017 	ldw	r19,64(sp)
    b658:	dc801217 	ldw	r18,72(sp)
    b65c:	003c6c06 	br	a810 <__alt_exception_stack_pointer+0xf800a810>
    b660:	903e031e 	bne	r18,zero,ae70 <__alt_exception_stack_pointer+0xf800ae70>
    b664:	003ebb06 	br	b154 <__alt_exception_stack_pointer+0xf800b154>
    b668:	103e6c1e 	bne	r2,zero,b01c <__alt_exception_stack_pointer+0xf800b01c>
    b66c:	4080004c 	andi	r2,r8,1
    b670:	103e6a26 	beq	r2,zero,b01c <__alt_exception_stack_pointer+0xf800b01c>
    b674:	003e6606 	br	b010 <__alt_exception_stack_pointer+0xf800b010>
    b678:	d8c00317 	ldw	r3,12(sp)
    b67c:	00800084 	movi	r2,2
    b680:	10c02916 	blt	r2,r3,b728 <_dtoa_r+0x167c>
    b684:	d9000c17 	ldw	r4,48(sp)
    b688:	003e8806 	br	b0ac <__alt_exception_stack_pointer+0xf800b0ac>
    b68c:	04000084 	movi	r16,2
    b690:	003b9d06 	br	a508 <__alt_exception_stack_pointer+0xf800a508>
    b694:	d9001317 	ldw	r4,76(sp)
    b698:	d9000515 	stw	r4,20(sp)
    b69c:	003cd606 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b6a0:	d8801317 	ldw	r2,76(sp)
    b6a4:	d8800515 	stw	r2,20(sp)
    b6a8:	003c2a06 	br	a754 <__alt_exception_stack_pointer+0xf800a754>
    b6ac:	d9800317 	ldw	r6,12(sp)
    b6b0:	00800084 	movi	r2,2
    b6b4:	11801516 	blt	r2,r6,b70c <_dtoa_r+0x1660>
    b6b8:	d9c00c17 	ldw	r7,48(sp)
    b6bc:	d9c00615 	stw	r7,24(sp)
    b6c0:	003df706 	br	aea0 <__alt_exception_stack_pointer+0xf800aea0>
    b6c4:	193d3926 	beq	r3,r4,abac <__alt_exception_stack_pointer+0xf800abac>
    b6c8:	00c00f04 	movi	r3,60
    b6cc:	1885c83a 	sub	r2,r3,r2
    b6d0:	003ddf06 	br	ae50 <__alt_exception_stack_pointer+0xf800ae50>
    b6d4:	e009883a 	mov	r4,fp
    b6d8:	e0001115 	stw	zero,68(fp)
    b6dc:	000b883a 	mov	r5,zero
    b6e0:	000ce100 	call	ce10 <_Balloc>
    b6e4:	d8800715 	stw	r2,28(sp)
    b6e8:	d8c00717 	ldw	r3,28(sp)
    b6ec:	00bfffc4 	movi	r2,-1
    b6f0:	01000044 	movi	r4,1
    b6f4:	d8800c15 	stw	r2,48(sp)
    b6f8:	e0c01015 	stw	r3,64(fp)
    b6fc:	d9000b15 	stw	r4,44(sp)
    b700:	d8800615 	stw	r2,24(sp)
    b704:	d8002215 	stw	zero,136(sp)
    b708:	003c4106 	br	a810 <__alt_exception_stack_pointer+0xf800a810>
    b70c:	d8c00c17 	ldw	r3,48(sp)
    b710:	d8c00615 	stw	r3,24(sp)
    b714:	003e7006 	br	b0d8 <__alt_exception_stack_pointer+0xf800b0d8>
    b718:	04400044 	movi	r17,1
    b71c:	003b2006 	br	a3a0 <__alt_exception_stack_pointer+0xf800a3a0>
    b720:	000b883a 	mov	r5,zero
    b724:	003b3d06 	br	a41c <__alt_exception_stack_pointer+0xf800a41c>
    b728:	d8800c17 	ldw	r2,48(sp)
    b72c:	d8800615 	stw	r2,24(sp)
    b730:	003e6906 	br	b0d8 <__alt_exception_stack_pointer+0xf800b0d8>

0000b734 <__sflush_r>:
    b734:	2880030b 	ldhu	r2,12(r5)
    b738:	defffb04 	addi	sp,sp,-20
    b73c:	dcc00315 	stw	r19,12(sp)
    b740:	dc400115 	stw	r17,4(sp)
    b744:	dfc00415 	stw	ra,16(sp)
    b748:	dc800215 	stw	r18,8(sp)
    b74c:	dc000015 	stw	r16,0(sp)
    b750:	10c0020c 	andi	r3,r2,8
    b754:	2823883a 	mov	r17,r5
    b758:	2027883a 	mov	r19,r4
    b75c:	1800311e 	bne	r3,zero,b824 <__sflush_r+0xf0>
    b760:	28c00117 	ldw	r3,4(r5)
    b764:	10820014 	ori	r2,r2,2048
    b768:	2880030d 	sth	r2,12(r5)
    b76c:	00c04b0e 	bge	zero,r3,b89c <__sflush_r+0x168>
    b770:	8a000a17 	ldw	r8,40(r17)
    b774:	40002326 	beq	r8,zero,b804 <__sflush_r+0xd0>
    b778:	9c000017 	ldw	r16,0(r19)
    b77c:	10c4000c 	andi	r3,r2,4096
    b780:	98000015 	stw	zero,0(r19)
    b784:	18004826 	beq	r3,zero,b8a8 <__sflush_r+0x174>
    b788:	89801417 	ldw	r6,80(r17)
    b78c:	10c0010c 	andi	r3,r2,4
    b790:	18000626 	beq	r3,zero,b7ac <__sflush_r+0x78>
    b794:	88c00117 	ldw	r3,4(r17)
    b798:	88800c17 	ldw	r2,48(r17)
    b79c:	30cdc83a 	sub	r6,r6,r3
    b7a0:	10000226 	beq	r2,zero,b7ac <__sflush_r+0x78>
    b7a4:	88800f17 	ldw	r2,60(r17)
    b7a8:	308dc83a 	sub	r6,r6,r2
    b7ac:	89400717 	ldw	r5,28(r17)
    b7b0:	000f883a 	mov	r7,zero
    b7b4:	9809883a 	mov	r4,r19
    b7b8:	403ee83a 	callr	r8
    b7bc:	00ffffc4 	movi	r3,-1
    b7c0:	10c04426 	beq	r2,r3,b8d4 <__sflush_r+0x1a0>
    b7c4:	88c0030b 	ldhu	r3,12(r17)
    b7c8:	89000417 	ldw	r4,16(r17)
    b7cc:	88000115 	stw	zero,4(r17)
    b7d0:	197dffcc 	andi	r5,r3,63487
    b7d4:	8940030d 	sth	r5,12(r17)
    b7d8:	89000015 	stw	r4,0(r17)
    b7dc:	18c4000c 	andi	r3,r3,4096
    b7e0:	18002c1e 	bne	r3,zero,b894 <__sflush_r+0x160>
    b7e4:	89400c17 	ldw	r5,48(r17)
    b7e8:	9c000015 	stw	r16,0(r19)
    b7ec:	28000526 	beq	r5,zero,b804 <__sflush_r+0xd0>
    b7f0:	88801004 	addi	r2,r17,64
    b7f4:	28800226 	beq	r5,r2,b800 <__sflush_r+0xcc>
    b7f8:	9809883a 	mov	r4,r19
    b7fc:	000beb00 	call	beb0 <_free_r>
    b800:	88000c15 	stw	zero,48(r17)
    b804:	0005883a 	mov	r2,zero
    b808:	dfc00417 	ldw	ra,16(sp)
    b80c:	dcc00317 	ldw	r19,12(sp)
    b810:	dc800217 	ldw	r18,8(sp)
    b814:	dc400117 	ldw	r17,4(sp)
    b818:	dc000017 	ldw	r16,0(sp)
    b81c:	dec00504 	addi	sp,sp,20
    b820:	f800283a 	ret
    b824:	2c800417 	ldw	r18,16(r5)
    b828:	903ff626 	beq	r18,zero,b804 <__alt_exception_stack_pointer+0xf800b804>
    b82c:	2c000017 	ldw	r16,0(r5)
    b830:	108000cc 	andi	r2,r2,3
    b834:	2c800015 	stw	r18,0(r5)
    b838:	84a1c83a 	sub	r16,r16,r18
    b83c:	1000131e 	bne	r2,zero,b88c <__sflush_r+0x158>
    b840:	28800517 	ldw	r2,20(r5)
    b844:	88800215 	stw	r2,8(r17)
    b848:	04000316 	blt	zero,r16,b858 <__sflush_r+0x124>
    b84c:	003fed06 	br	b804 <__alt_exception_stack_pointer+0xf800b804>
    b850:	90a5883a 	add	r18,r18,r2
    b854:	043feb0e 	bge	zero,r16,b804 <__alt_exception_stack_pointer+0xf800b804>
    b858:	88800917 	ldw	r2,36(r17)
    b85c:	89400717 	ldw	r5,28(r17)
    b860:	800f883a 	mov	r7,r16
    b864:	900d883a 	mov	r6,r18
    b868:	9809883a 	mov	r4,r19
    b86c:	103ee83a 	callr	r2
    b870:	80a1c83a 	sub	r16,r16,r2
    b874:	00bff616 	blt	zero,r2,b850 <__alt_exception_stack_pointer+0xf800b850>
    b878:	88c0030b 	ldhu	r3,12(r17)
    b87c:	00bfffc4 	movi	r2,-1
    b880:	18c01014 	ori	r3,r3,64
    b884:	88c0030d 	sth	r3,12(r17)
    b888:	003fdf06 	br	b808 <__alt_exception_stack_pointer+0xf800b808>
    b88c:	0005883a 	mov	r2,zero
    b890:	003fec06 	br	b844 <__alt_exception_stack_pointer+0xf800b844>
    b894:	88801415 	stw	r2,80(r17)
    b898:	003fd206 	br	b7e4 <__alt_exception_stack_pointer+0xf800b7e4>
    b89c:	28c00f17 	ldw	r3,60(r5)
    b8a0:	00ffb316 	blt	zero,r3,b770 <__alt_exception_stack_pointer+0xf800b770>
    b8a4:	003fd706 	br	b804 <__alt_exception_stack_pointer+0xf800b804>
    b8a8:	89400717 	ldw	r5,28(r17)
    b8ac:	000d883a 	mov	r6,zero
    b8b0:	01c00044 	movi	r7,1
    b8b4:	9809883a 	mov	r4,r19
    b8b8:	403ee83a 	callr	r8
    b8bc:	100d883a 	mov	r6,r2
    b8c0:	00bfffc4 	movi	r2,-1
    b8c4:	30801426 	beq	r6,r2,b918 <__sflush_r+0x1e4>
    b8c8:	8880030b 	ldhu	r2,12(r17)
    b8cc:	8a000a17 	ldw	r8,40(r17)
    b8d0:	003fae06 	br	b78c <__alt_exception_stack_pointer+0xf800b78c>
    b8d4:	98c00017 	ldw	r3,0(r19)
    b8d8:	183fba26 	beq	r3,zero,b7c4 <__alt_exception_stack_pointer+0xf800b7c4>
    b8dc:	01000744 	movi	r4,29
    b8e0:	19000626 	beq	r3,r4,b8fc <__sflush_r+0x1c8>
    b8e4:	01000584 	movi	r4,22
    b8e8:	19000426 	beq	r3,r4,b8fc <__sflush_r+0x1c8>
    b8ec:	88c0030b 	ldhu	r3,12(r17)
    b8f0:	18c01014 	ori	r3,r3,64
    b8f4:	88c0030d 	sth	r3,12(r17)
    b8f8:	003fc306 	br	b808 <__alt_exception_stack_pointer+0xf800b808>
    b8fc:	8880030b 	ldhu	r2,12(r17)
    b900:	88c00417 	ldw	r3,16(r17)
    b904:	88000115 	stw	zero,4(r17)
    b908:	10bdffcc 	andi	r2,r2,63487
    b90c:	8880030d 	sth	r2,12(r17)
    b910:	88c00015 	stw	r3,0(r17)
    b914:	003fb306 	br	b7e4 <__alt_exception_stack_pointer+0xf800b7e4>
    b918:	98800017 	ldw	r2,0(r19)
    b91c:	103fea26 	beq	r2,zero,b8c8 <__alt_exception_stack_pointer+0xf800b8c8>
    b920:	00c00744 	movi	r3,29
    b924:	10c00226 	beq	r2,r3,b930 <__sflush_r+0x1fc>
    b928:	00c00584 	movi	r3,22
    b92c:	10c0031e 	bne	r2,r3,b93c <__sflush_r+0x208>
    b930:	9c000015 	stw	r16,0(r19)
    b934:	0005883a 	mov	r2,zero
    b938:	003fb306 	br	b808 <__alt_exception_stack_pointer+0xf800b808>
    b93c:	88c0030b 	ldhu	r3,12(r17)
    b940:	3005883a 	mov	r2,r6
    b944:	18c01014 	ori	r3,r3,64
    b948:	88c0030d 	sth	r3,12(r17)
    b94c:	003fae06 	br	b808 <__alt_exception_stack_pointer+0xf800b808>

0000b950 <_fflush_r>:
    b950:	defffd04 	addi	sp,sp,-12
    b954:	dc000115 	stw	r16,4(sp)
    b958:	dfc00215 	stw	ra,8(sp)
    b95c:	2021883a 	mov	r16,r4
    b960:	20000226 	beq	r4,zero,b96c <_fflush_r+0x1c>
    b964:	20800e17 	ldw	r2,56(r4)
    b968:	10000c26 	beq	r2,zero,b99c <_fflush_r+0x4c>
    b96c:	2880030f 	ldh	r2,12(r5)
    b970:	1000051e 	bne	r2,zero,b988 <_fflush_r+0x38>
    b974:	0005883a 	mov	r2,zero
    b978:	dfc00217 	ldw	ra,8(sp)
    b97c:	dc000117 	ldw	r16,4(sp)
    b980:	dec00304 	addi	sp,sp,12
    b984:	f800283a 	ret
    b988:	8009883a 	mov	r4,r16
    b98c:	dfc00217 	ldw	ra,8(sp)
    b990:	dc000117 	ldw	r16,4(sp)
    b994:	dec00304 	addi	sp,sp,12
    b998:	000b7341 	jmpi	b734 <__sflush_r>
    b99c:	d9400015 	stw	r5,0(sp)
    b9a0:	000bd3c0 	call	bd3c <__sinit>
    b9a4:	d9400017 	ldw	r5,0(sp)
    b9a8:	003ff006 	br	b96c <__alt_exception_stack_pointer+0xf800b96c>

0000b9ac <fflush>:
    b9ac:	20000526 	beq	r4,zero,b9c4 <fflush+0x18>
    b9b0:	00800074 	movhi	r2,1
    b9b4:	109cd104 	addi	r2,r2,29508
    b9b8:	200b883a 	mov	r5,r4
    b9bc:	11000017 	ldw	r4,0(r2)
    b9c0:	000b9501 	jmpi	b950 <_fflush_r>
    b9c4:	00800074 	movhi	r2,1
    b9c8:	109cd004 	addi	r2,r2,29504
    b9cc:	11000017 	ldw	r4,0(r2)
    b9d0:	01400074 	movhi	r5,1
    b9d4:	296e5404 	addi	r5,r5,-18096
    b9d8:	000c74c1 	jmpi	c74c <_fwalk_reent>

0000b9dc <__fp_unlock>:
    b9dc:	0005883a 	mov	r2,zero
    b9e0:	f800283a 	ret

0000b9e4 <_cleanup_r>:
    b9e4:	01400074 	movhi	r5,1
    b9e8:	297fd004 	addi	r5,r5,-192
    b9ec:	000c74c1 	jmpi	c74c <_fwalk_reent>

0000b9f0 <__sinit.part.1>:
    b9f0:	defff704 	addi	sp,sp,-36
    b9f4:	00c00074 	movhi	r3,1
    b9f8:	dfc00815 	stw	ra,32(sp)
    b9fc:	ddc00715 	stw	r23,28(sp)
    ba00:	dd800615 	stw	r22,24(sp)
    ba04:	dd400515 	stw	r21,20(sp)
    ba08:	dd000415 	stw	r20,16(sp)
    ba0c:	dcc00315 	stw	r19,12(sp)
    ba10:	dc800215 	stw	r18,8(sp)
    ba14:	dc400115 	stw	r17,4(sp)
    ba18:	dc000015 	stw	r16,0(sp)
    ba1c:	18ee7904 	addi	r3,r3,-17948
    ba20:	24000117 	ldw	r16,4(r4)
    ba24:	20c00f15 	stw	r3,60(r4)
    ba28:	2080bb04 	addi	r2,r4,748
    ba2c:	00c000c4 	movi	r3,3
    ba30:	20c0b915 	stw	r3,740(r4)
    ba34:	2080ba15 	stw	r2,744(r4)
    ba38:	2000b815 	stw	zero,736(r4)
    ba3c:	05c00204 	movi	r23,8
    ba40:	00800104 	movi	r2,4
    ba44:	2025883a 	mov	r18,r4
    ba48:	b80d883a 	mov	r6,r23
    ba4c:	81001704 	addi	r4,r16,92
    ba50:	000b883a 	mov	r5,zero
    ba54:	80000015 	stw	zero,0(r16)
    ba58:	80000115 	stw	zero,4(r16)
    ba5c:	80000215 	stw	zero,8(r16)
    ba60:	8080030d 	sth	r2,12(r16)
    ba64:	80001915 	stw	zero,100(r16)
    ba68:	8000038d 	sth	zero,14(r16)
    ba6c:	80000415 	stw	zero,16(r16)
    ba70:	80000515 	stw	zero,20(r16)
    ba74:	80000615 	stw	zero,24(r16)
    ba78:	000cce80 	call	cce8 <memset>
    ba7c:	05800074 	movhi	r22,1
    ba80:	94400217 	ldw	r17,8(r18)
    ba84:	05400074 	movhi	r21,1
    ba88:	05000074 	movhi	r20,1
    ba8c:	04c00074 	movhi	r19,1
    ba90:	b5b92804 	addi	r22,r22,-7008
    ba94:	ad793f04 	addi	r21,r21,-6916
    ba98:	a5395e04 	addi	r20,r20,-6792
    ba9c:	9cf97504 	addi	r19,r19,-6700
    baa0:	85800815 	stw	r22,32(r16)
    baa4:	85400915 	stw	r21,36(r16)
    baa8:	85000a15 	stw	r20,40(r16)
    baac:	84c00b15 	stw	r19,44(r16)
    bab0:	84000715 	stw	r16,28(r16)
    bab4:	00800284 	movi	r2,10
    bab8:	8880030d 	sth	r2,12(r17)
    babc:	00800044 	movi	r2,1
    bac0:	b80d883a 	mov	r6,r23
    bac4:	89001704 	addi	r4,r17,92
    bac8:	000b883a 	mov	r5,zero
    bacc:	88000015 	stw	zero,0(r17)
    bad0:	88000115 	stw	zero,4(r17)
    bad4:	88000215 	stw	zero,8(r17)
    bad8:	88001915 	stw	zero,100(r17)
    badc:	8880038d 	sth	r2,14(r17)
    bae0:	88000415 	stw	zero,16(r17)
    bae4:	88000515 	stw	zero,20(r17)
    bae8:	88000615 	stw	zero,24(r17)
    baec:	000cce80 	call	cce8 <memset>
    baf0:	94000317 	ldw	r16,12(r18)
    baf4:	00800484 	movi	r2,18
    baf8:	8c400715 	stw	r17,28(r17)
    bafc:	8d800815 	stw	r22,32(r17)
    bb00:	8d400915 	stw	r21,36(r17)
    bb04:	8d000a15 	stw	r20,40(r17)
    bb08:	8cc00b15 	stw	r19,44(r17)
    bb0c:	8080030d 	sth	r2,12(r16)
    bb10:	00800084 	movi	r2,2
    bb14:	80000015 	stw	zero,0(r16)
    bb18:	80000115 	stw	zero,4(r16)
    bb1c:	80000215 	stw	zero,8(r16)
    bb20:	80001915 	stw	zero,100(r16)
    bb24:	8080038d 	sth	r2,14(r16)
    bb28:	80000415 	stw	zero,16(r16)
    bb2c:	80000515 	stw	zero,20(r16)
    bb30:	80000615 	stw	zero,24(r16)
    bb34:	b80d883a 	mov	r6,r23
    bb38:	000b883a 	mov	r5,zero
    bb3c:	81001704 	addi	r4,r16,92
    bb40:	000cce80 	call	cce8 <memset>
    bb44:	00800044 	movi	r2,1
    bb48:	84000715 	stw	r16,28(r16)
    bb4c:	85800815 	stw	r22,32(r16)
    bb50:	85400915 	stw	r21,36(r16)
    bb54:	85000a15 	stw	r20,40(r16)
    bb58:	84c00b15 	stw	r19,44(r16)
    bb5c:	90800e15 	stw	r2,56(r18)
    bb60:	dfc00817 	ldw	ra,32(sp)
    bb64:	ddc00717 	ldw	r23,28(sp)
    bb68:	dd800617 	ldw	r22,24(sp)
    bb6c:	dd400517 	ldw	r21,20(sp)
    bb70:	dd000417 	ldw	r20,16(sp)
    bb74:	dcc00317 	ldw	r19,12(sp)
    bb78:	dc800217 	ldw	r18,8(sp)
    bb7c:	dc400117 	ldw	r17,4(sp)
    bb80:	dc000017 	ldw	r16,0(sp)
    bb84:	dec00904 	addi	sp,sp,36
    bb88:	f800283a 	ret

0000bb8c <__fp_lock>:
    bb8c:	0005883a 	mov	r2,zero
    bb90:	f800283a 	ret

0000bb94 <__sfmoreglue>:
    bb94:	defffc04 	addi	sp,sp,-16
    bb98:	dc800215 	stw	r18,8(sp)
    bb9c:	2825883a 	mov	r18,r5
    bba0:	dc000015 	stw	r16,0(sp)
    bba4:	01401a04 	movi	r5,104
    bba8:	2021883a 	mov	r16,r4
    bbac:	913fffc4 	addi	r4,r18,-1
    bbb0:	dfc00315 	stw	ra,12(sp)
    bbb4:	dc400115 	stw	r17,4(sp)
    bbb8:	00050200 	call	5020 <__mulsi3>
    bbbc:	8009883a 	mov	r4,r16
    bbc0:	11401d04 	addi	r5,r2,116
    bbc4:	1023883a 	mov	r17,r2
    bbc8:	0006df40 	call	6df4 <_malloc_r>
    bbcc:	1021883a 	mov	r16,r2
    bbd0:	10000726 	beq	r2,zero,bbf0 <__sfmoreglue+0x5c>
    bbd4:	11000304 	addi	r4,r2,12
    bbd8:	10000015 	stw	zero,0(r2)
    bbdc:	14800115 	stw	r18,4(r2)
    bbe0:	11000215 	stw	r4,8(r2)
    bbe4:	89801a04 	addi	r6,r17,104
    bbe8:	000b883a 	mov	r5,zero
    bbec:	000cce80 	call	cce8 <memset>
    bbf0:	8005883a 	mov	r2,r16
    bbf4:	dfc00317 	ldw	ra,12(sp)
    bbf8:	dc800217 	ldw	r18,8(sp)
    bbfc:	dc400117 	ldw	r17,4(sp)
    bc00:	dc000017 	ldw	r16,0(sp)
    bc04:	dec00404 	addi	sp,sp,16
    bc08:	f800283a 	ret

0000bc0c <__sfp>:
    bc0c:	defffb04 	addi	sp,sp,-20
    bc10:	dc000015 	stw	r16,0(sp)
    bc14:	04000074 	movhi	r16,1
    bc18:	841cd004 	addi	r16,r16,29504
    bc1c:	dcc00315 	stw	r19,12(sp)
    bc20:	2027883a 	mov	r19,r4
    bc24:	81000017 	ldw	r4,0(r16)
    bc28:	dfc00415 	stw	ra,16(sp)
    bc2c:	dc800215 	stw	r18,8(sp)
    bc30:	20800e17 	ldw	r2,56(r4)
    bc34:	dc400115 	stw	r17,4(sp)
    bc38:	1000021e 	bne	r2,zero,bc44 <__sfp+0x38>
    bc3c:	000b9f00 	call	b9f0 <__sinit.part.1>
    bc40:	81000017 	ldw	r4,0(r16)
    bc44:	2480b804 	addi	r18,r4,736
    bc48:	047fffc4 	movi	r17,-1
    bc4c:	91000117 	ldw	r4,4(r18)
    bc50:	94000217 	ldw	r16,8(r18)
    bc54:	213fffc4 	addi	r4,r4,-1
    bc58:	20000a16 	blt	r4,zero,bc84 <__sfp+0x78>
    bc5c:	8080030f 	ldh	r2,12(r16)
    bc60:	10000c26 	beq	r2,zero,bc94 <__sfp+0x88>
    bc64:	80c01d04 	addi	r3,r16,116
    bc68:	00000206 	br	bc74 <__sfp+0x68>
    bc6c:	18bfe60f 	ldh	r2,-104(r3)
    bc70:	10000826 	beq	r2,zero,bc94 <__sfp+0x88>
    bc74:	213fffc4 	addi	r4,r4,-1
    bc78:	1c3ffd04 	addi	r16,r3,-12
    bc7c:	18c01a04 	addi	r3,r3,104
    bc80:	247ffa1e 	bne	r4,r17,bc6c <__alt_exception_stack_pointer+0xf800bc6c>
    bc84:	90800017 	ldw	r2,0(r18)
    bc88:	10001d26 	beq	r2,zero,bd00 <__sfp+0xf4>
    bc8c:	1025883a 	mov	r18,r2
    bc90:	003fee06 	br	bc4c <__alt_exception_stack_pointer+0xf800bc4c>
    bc94:	00bfffc4 	movi	r2,-1
    bc98:	8080038d 	sth	r2,14(r16)
    bc9c:	00800044 	movi	r2,1
    bca0:	8080030d 	sth	r2,12(r16)
    bca4:	80001915 	stw	zero,100(r16)
    bca8:	80000015 	stw	zero,0(r16)
    bcac:	80000215 	stw	zero,8(r16)
    bcb0:	80000115 	stw	zero,4(r16)
    bcb4:	80000415 	stw	zero,16(r16)
    bcb8:	80000515 	stw	zero,20(r16)
    bcbc:	80000615 	stw	zero,24(r16)
    bcc0:	01800204 	movi	r6,8
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	81001704 	addi	r4,r16,92
    bccc:	000cce80 	call	cce8 <memset>
    bcd0:	8005883a 	mov	r2,r16
    bcd4:	80000c15 	stw	zero,48(r16)
    bcd8:	80000d15 	stw	zero,52(r16)
    bcdc:	80001115 	stw	zero,68(r16)
    bce0:	80001215 	stw	zero,72(r16)
    bce4:	dfc00417 	ldw	ra,16(sp)
    bce8:	dcc00317 	ldw	r19,12(sp)
    bcec:	dc800217 	ldw	r18,8(sp)
    bcf0:	dc400117 	ldw	r17,4(sp)
    bcf4:	dc000017 	ldw	r16,0(sp)
    bcf8:	dec00504 	addi	sp,sp,20
    bcfc:	f800283a 	ret
    bd00:	01400104 	movi	r5,4
    bd04:	9809883a 	mov	r4,r19
    bd08:	000bb940 	call	bb94 <__sfmoreglue>
    bd0c:	90800015 	stw	r2,0(r18)
    bd10:	103fde1e 	bne	r2,zero,bc8c <__alt_exception_stack_pointer+0xf800bc8c>
    bd14:	00800304 	movi	r2,12
    bd18:	98800015 	stw	r2,0(r19)
    bd1c:	0005883a 	mov	r2,zero
    bd20:	003ff006 	br	bce4 <__alt_exception_stack_pointer+0xf800bce4>

0000bd24 <_cleanup>:
    bd24:	00800074 	movhi	r2,1
    bd28:	109cd004 	addi	r2,r2,29504
    bd2c:	11000017 	ldw	r4,0(r2)
    bd30:	01400074 	movhi	r5,1
    bd34:	297fd004 	addi	r5,r5,-192
    bd38:	000c74c1 	jmpi	c74c <_fwalk_reent>

0000bd3c <__sinit>:
    bd3c:	20800e17 	ldw	r2,56(r4)
    bd40:	10000126 	beq	r2,zero,bd48 <__sinit+0xc>
    bd44:	f800283a 	ret
    bd48:	000b9f01 	jmpi	b9f0 <__sinit.part.1>

0000bd4c <__sfp_lock_acquire>:
    bd4c:	f800283a 	ret

0000bd50 <__sfp_lock_release>:
    bd50:	f800283a 	ret

0000bd54 <__sinit_lock_acquire>:
    bd54:	f800283a 	ret

0000bd58 <__sinit_lock_release>:
    bd58:	f800283a 	ret

0000bd5c <__fp_lock_all>:
    bd5c:	00800074 	movhi	r2,1
    bd60:	109cd104 	addi	r2,r2,29508
    bd64:	11000017 	ldw	r4,0(r2)
    bd68:	01400074 	movhi	r5,1
    bd6c:	296ee304 	addi	r5,r5,-17524
    bd70:	000c6881 	jmpi	c688 <_fwalk>

0000bd74 <__fp_unlock_all>:
    bd74:	00800074 	movhi	r2,1
    bd78:	109cd104 	addi	r2,r2,29508
    bd7c:	11000017 	ldw	r4,0(r2)
    bd80:	01400074 	movhi	r5,1
    bd84:	296e7704 	addi	r5,r5,-17956
    bd88:	000c6881 	jmpi	c688 <_fwalk>

0000bd8c <_malloc_trim_r>:
    bd8c:	defffb04 	addi	sp,sp,-20
    bd90:	dcc00315 	stw	r19,12(sp)
    bd94:	04c00074 	movhi	r19,1
    bd98:	dc800215 	stw	r18,8(sp)
    bd9c:	dc400115 	stw	r17,4(sp)
    bda0:	dc000015 	stw	r16,0(sp)
    bda4:	dfc00415 	stw	ra,16(sp)
    bda8:	2821883a 	mov	r16,r5
    bdac:	9cd70604 	addi	r19,r19,23576
    bdb0:	2025883a 	mov	r18,r4
    bdb4:	00123c40 	call	123c4 <__malloc_lock>
    bdb8:	98800217 	ldw	r2,8(r19)
    bdbc:	14400117 	ldw	r17,4(r2)
    bdc0:	00bfff04 	movi	r2,-4
    bdc4:	88a2703a 	and	r17,r17,r2
    bdc8:	8c21c83a 	sub	r16,r17,r16
    bdcc:	8403fbc4 	addi	r16,r16,4079
    bdd0:	8020d33a 	srli	r16,r16,12
    bdd4:	0083ffc4 	movi	r2,4095
    bdd8:	843fffc4 	addi	r16,r16,-1
    bddc:	8020933a 	slli	r16,r16,12
    bde0:	1400060e 	bge	r2,r16,bdfc <_malloc_trim_r+0x70>
    bde4:	000b883a 	mov	r5,zero
    bde8:	9009883a 	mov	r4,r18
    bdec:	00078880 	call	7888 <_sbrk_r>
    bdf0:	98c00217 	ldw	r3,8(r19)
    bdf4:	1c47883a 	add	r3,r3,r17
    bdf8:	10c00a26 	beq	r2,r3,be24 <_malloc_trim_r+0x98>
    bdfc:	9009883a 	mov	r4,r18
    be00:	00123e80 	call	123e8 <__malloc_unlock>
    be04:	0005883a 	mov	r2,zero
    be08:	dfc00417 	ldw	ra,16(sp)
    be0c:	dcc00317 	ldw	r19,12(sp)
    be10:	dc800217 	ldw	r18,8(sp)
    be14:	dc400117 	ldw	r17,4(sp)
    be18:	dc000017 	ldw	r16,0(sp)
    be1c:	dec00504 	addi	sp,sp,20
    be20:	f800283a 	ret
    be24:	040bc83a 	sub	r5,zero,r16
    be28:	9009883a 	mov	r4,r18
    be2c:	00078880 	call	7888 <_sbrk_r>
    be30:	00ffffc4 	movi	r3,-1
    be34:	10c00d26 	beq	r2,r3,be6c <_malloc_trim_r+0xe0>
    be38:	00c000b4 	movhi	r3,2
    be3c:	18e3d604 	addi	r3,r3,-28840
    be40:	18800017 	ldw	r2,0(r3)
    be44:	99000217 	ldw	r4,8(r19)
    be48:	8c23c83a 	sub	r17,r17,r16
    be4c:	8c400054 	ori	r17,r17,1
    be50:	1421c83a 	sub	r16,r2,r16
    be54:	24400115 	stw	r17,4(r4)
    be58:	9009883a 	mov	r4,r18
    be5c:	1c000015 	stw	r16,0(r3)
    be60:	00123e80 	call	123e8 <__malloc_unlock>
    be64:	00800044 	movi	r2,1
    be68:	003fe706 	br	be08 <__alt_exception_stack_pointer+0xf800be08>
    be6c:	000b883a 	mov	r5,zero
    be70:	9009883a 	mov	r4,r18
    be74:	00078880 	call	7888 <_sbrk_r>
    be78:	99000217 	ldw	r4,8(r19)
    be7c:	014003c4 	movi	r5,15
    be80:	1107c83a 	sub	r3,r2,r4
    be84:	28ffdd0e 	bge	r5,r3,bdfc <__alt_exception_stack_pointer+0xf800bdfc>
    be88:	01400074 	movhi	r5,1
    be8c:	295cd204 	addi	r5,r5,29512
    be90:	29400017 	ldw	r5,0(r5)
    be94:	18c00054 	ori	r3,r3,1
    be98:	20c00115 	stw	r3,4(r4)
    be9c:	00c000b4 	movhi	r3,2
    bea0:	1145c83a 	sub	r2,r2,r5
    bea4:	18e3d604 	addi	r3,r3,-28840
    bea8:	18800015 	stw	r2,0(r3)
    beac:	003fd306 	br	bdfc <__alt_exception_stack_pointer+0xf800bdfc>

0000beb0 <_free_r>:
    beb0:	28004126 	beq	r5,zero,bfb8 <_free_r+0x108>
    beb4:	defffd04 	addi	sp,sp,-12
    beb8:	dc400115 	stw	r17,4(sp)
    bebc:	dc000015 	stw	r16,0(sp)
    bec0:	2023883a 	mov	r17,r4
    bec4:	2821883a 	mov	r16,r5
    bec8:	dfc00215 	stw	ra,8(sp)
    becc:	00123c40 	call	123c4 <__malloc_lock>
    bed0:	81ffff17 	ldw	r7,-4(r16)
    bed4:	00bfff84 	movi	r2,-2
    bed8:	01000074 	movhi	r4,1
    bedc:	81bffe04 	addi	r6,r16,-8
    bee0:	3884703a 	and	r2,r7,r2
    bee4:	21170604 	addi	r4,r4,23576
    bee8:	308b883a 	add	r5,r6,r2
    beec:	2a400117 	ldw	r9,4(r5)
    bef0:	22000217 	ldw	r8,8(r4)
    bef4:	00ffff04 	movi	r3,-4
    bef8:	48c6703a 	and	r3,r9,r3
    befc:	2a005726 	beq	r5,r8,c05c <_free_r+0x1ac>
    bf00:	28c00115 	stw	r3,4(r5)
    bf04:	39c0004c 	andi	r7,r7,1
    bf08:	3800091e 	bne	r7,zero,bf30 <_free_r+0x80>
    bf0c:	823ffe17 	ldw	r8,-8(r16)
    bf10:	22400204 	addi	r9,r4,8
    bf14:	320dc83a 	sub	r6,r6,r8
    bf18:	31c00217 	ldw	r7,8(r6)
    bf1c:	1205883a 	add	r2,r2,r8
    bf20:	3a406526 	beq	r7,r9,c0b8 <_free_r+0x208>
    bf24:	32000317 	ldw	r8,12(r6)
    bf28:	3a000315 	stw	r8,12(r7)
    bf2c:	41c00215 	stw	r7,8(r8)
    bf30:	28cf883a 	add	r7,r5,r3
    bf34:	39c00117 	ldw	r7,4(r7)
    bf38:	39c0004c 	andi	r7,r7,1
    bf3c:	38003a26 	beq	r7,zero,c028 <_free_r+0x178>
    bf40:	10c00054 	ori	r3,r2,1
    bf44:	30c00115 	stw	r3,4(r6)
    bf48:	3087883a 	add	r3,r6,r2
    bf4c:	18800015 	stw	r2,0(r3)
    bf50:	00c07fc4 	movi	r3,511
    bf54:	18801936 	bltu	r3,r2,bfbc <_free_r+0x10c>
    bf58:	1004d0fa 	srli	r2,r2,3
    bf5c:	01c00044 	movi	r7,1
    bf60:	21400117 	ldw	r5,4(r4)
    bf64:	10c00044 	addi	r3,r2,1
    bf68:	18c7883a 	add	r3,r3,r3
    bf6c:	1005d0ba 	srai	r2,r2,2
    bf70:	18c7883a 	add	r3,r3,r3
    bf74:	18c7883a 	add	r3,r3,r3
    bf78:	1907883a 	add	r3,r3,r4
    bf7c:	3884983a 	sll	r2,r7,r2
    bf80:	19c00017 	ldw	r7,0(r3)
    bf84:	1a3ffe04 	addi	r8,r3,-8
    bf88:	1144b03a 	or	r2,r2,r5
    bf8c:	32000315 	stw	r8,12(r6)
    bf90:	31c00215 	stw	r7,8(r6)
    bf94:	20800115 	stw	r2,4(r4)
    bf98:	19800015 	stw	r6,0(r3)
    bf9c:	39800315 	stw	r6,12(r7)
    bfa0:	8809883a 	mov	r4,r17
    bfa4:	dfc00217 	ldw	ra,8(sp)
    bfa8:	dc400117 	ldw	r17,4(sp)
    bfac:	dc000017 	ldw	r16,0(sp)
    bfb0:	dec00304 	addi	sp,sp,12
    bfb4:	00123e81 	jmpi	123e8 <__malloc_unlock>
    bfb8:	f800283a 	ret
    bfbc:	100ad27a 	srli	r5,r2,9
    bfc0:	00c00104 	movi	r3,4
    bfc4:	19404a36 	bltu	r3,r5,c0f0 <_free_r+0x240>
    bfc8:	100ad1ba 	srli	r5,r2,6
    bfcc:	28c00e44 	addi	r3,r5,57
    bfd0:	18c7883a 	add	r3,r3,r3
    bfd4:	29400e04 	addi	r5,r5,56
    bfd8:	18c7883a 	add	r3,r3,r3
    bfdc:	18c7883a 	add	r3,r3,r3
    bfe0:	1909883a 	add	r4,r3,r4
    bfe4:	20c00017 	ldw	r3,0(r4)
    bfe8:	01c00074 	movhi	r7,1
    bfec:	213ffe04 	addi	r4,r4,-8
    bff0:	39d70604 	addi	r7,r7,23576
    bff4:	20c04426 	beq	r4,r3,c108 <_free_r+0x258>
    bff8:	01ffff04 	movi	r7,-4
    bffc:	19400117 	ldw	r5,4(r3)
    c000:	29ca703a 	and	r5,r5,r7
    c004:	1140022e 	bgeu	r2,r5,c010 <_free_r+0x160>
    c008:	18c00217 	ldw	r3,8(r3)
    c00c:	20fffb1e 	bne	r4,r3,bffc <__alt_exception_stack_pointer+0xf800bffc>
    c010:	19000317 	ldw	r4,12(r3)
    c014:	31000315 	stw	r4,12(r6)
    c018:	30c00215 	stw	r3,8(r6)
    c01c:	21800215 	stw	r6,8(r4)
    c020:	19800315 	stw	r6,12(r3)
    c024:	003fde06 	br	bfa0 <__alt_exception_stack_pointer+0xf800bfa0>
    c028:	29c00217 	ldw	r7,8(r5)
    c02c:	10c5883a 	add	r2,r2,r3
    c030:	00c00074 	movhi	r3,1
    c034:	18d70804 	addi	r3,r3,23584
    c038:	38c03b26 	beq	r7,r3,c128 <_free_r+0x278>
    c03c:	2a000317 	ldw	r8,12(r5)
    c040:	11400054 	ori	r5,r2,1
    c044:	3087883a 	add	r3,r6,r2
    c048:	3a000315 	stw	r8,12(r7)
    c04c:	41c00215 	stw	r7,8(r8)
    c050:	31400115 	stw	r5,4(r6)
    c054:	18800015 	stw	r2,0(r3)
    c058:	003fbd06 	br	bf50 <__alt_exception_stack_pointer+0xf800bf50>
    c05c:	39c0004c 	andi	r7,r7,1
    c060:	10c5883a 	add	r2,r2,r3
    c064:	3800071e 	bne	r7,zero,c084 <_free_r+0x1d4>
    c068:	81fffe17 	ldw	r7,-8(r16)
    c06c:	31cdc83a 	sub	r6,r6,r7
    c070:	30c00317 	ldw	r3,12(r6)
    c074:	31400217 	ldw	r5,8(r6)
    c078:	11c5883a 	add	r2,r2,r7
    c07c:	28c00315 	stw	r3,12(r5)
    c080:	19400215 	stw	r5,8(r3)
    c084:	10c00054 	ori	r3,r2,1
    c088:	30c00115 	stw	r3,4(r6)
    c08c:	00c00074 	movhi	r3,1
    c090:	18dcd304 	addi	r3,r3,29516
    c094:	18c00017 	ldw	r3,0(r3)
    c098:	21800215 	stw	r6,8(r4)
    c09c:	10ffc036 	bltu	r2,r3,bfa0 <__alt_exception_stack_pointer+0xf800bfa0>
    c0a0:	008000b4 	movhi	r2,2
    c0a4:	10a3ca04 	addi	r2,r2,-28888
    c0a8:	11400017 	ldw	r5,0(r2)
    c0ac:	8809883a 	mov	r4,r17
    c0b0:	000bd8c0 	call	bd8c <_malloc_trim_r>
    c0b4:	003fba06 	br	bfa0 <__alt_exception_stack_pointer+0xf800bfa0>
    c0b8:	28c9883a 	add	r4,r5,r3
    c0bc:	21000117 	ldw	r4,4(r4)
    c0c0:	2100004c 	andi	r4,r4,1
    c0c4:	2000391e 	bne	r4,zero,c1ac <_free_r+0x2fc>
    c0c8:	29c00217 	ldw	r7,8(r5)
    c0cc:	29000317 	ldw	r4,12(r5)
    c0d0:	1885883a 	add	r2,r3,r2
    c0d4:	10c00054 	ori	r3,r2,1
    c0d8:	39000315 	stw	r4,12(r7)
    c0dc:	21c00215 	stw	r7,8(r4)
    c0e0:	30c00115 	stw	r3,4(r6)
    c0e4:	308d883a 	add	r6,r6,r2
    c0e8:	30800015 	stw	r2,0(r6)
    c0ec:	003fac06 	br	bfa0 <__alt_exception_stack_pointer+0xf800bfa0>
    c0f0:	00c00504 	movi	r3,20
    c0f4:	19401536 	bltu	r3,r5,c14c <_free_r+0x29c>
    c0f8:	28c01704 	addi	r3,r5,92
    c0fc:	18c7883a 	add	r3,r3,r3
    c100:	294016c4 	addi	r5,r5,91
    c104:	003fb406 	br	bfd8 <__alt_exception_stack_pointer+0xf800bfd8>
    c108:	280bd0ba 	srai	r5,r5,2
    c10c:	00c00044 	movi	r3,1
    c110:	38800117 	ldw	r2,4(r7)
    c114:	194a983a 	sll	r5,r3,r5
    c118:	2007883a 	mov	r3,r4
    c11c:	2884b03a 	or	r2,r5,r2
    c120:	38800115 	stw	r2,4(r7)
    c124:	003fbb06 	br	c014 <__alt_exception_stack_pointer+0xf800c014>
    c128:	21800515 	stw	r6,20(r4)
    c12c:	21800415 	stw	r6,16(r4)
    c130:	10c00054 	ori	r3,r2,1
    c134:	31c00315 	stw	r7,12(r6)
    c138:	31c00215 	stw	r7,8(r6)
    c13c:	30c00115 	stw	r3,4(r6)
    c140:	308d883a 	add	r6,r6,r2
    c144:	30800015 	stw	r2,0(r6)
    c148:	003f9506 	br	bfa0 <__alt_exception_stack_pointer+0xf800bfa0>
    c14c:	00c01504 	movi	r3,84
    c150:	19400536 	bltu	r3,r5,c168 <_free_r+0x2b8>
    c154:	100ad33a 	srli	r5,r2,12
    c158:	28c01bc4 	addi	r3,r5,111
    c15c:	18c7883a 	add	r3,r3,r3
    c160:	29401b84 	addi	r5,r5,110
    c164:	003f9c06 	br	bfd8 <__alt_exception_stack_pointer+0xf800bfd8>
    c168:	00c05504 	movi	r3,340
    c16c:	19400536 	bltu	r3,r5,c184 <_free_r+0x2d4>
    c170:	100ad3fa 	srli	r5,r2,15
    c174:	28c01e04 	addi	r3,r5,120
    c178:	18c7883a 	add	r3,r3,r3
    c17c:	29401dc4 	addi	r5,r5,119
    c180:	003f9506 	br	bfd8 <__alt_exception_stack_pointer+0xf800bfd8>
    c184:	00c15504 	movi	r3,1364
    c188:	19400536 	bltu	r3,r5,c1a0 <_free_r+0x2f0>
    c18c:	100ad4ba 	srli	r5,r2,18
    c190:	28c01f44 	addi	r3,r5,125
    c194:	18c7883a 	add	r3,r3,r3
    c198:	29401f04 	addi	r5,r5,124
    c19c:	003f8e06 	br	bfd8 <__alt_exception_stack_pointer+0xf800bfd8>
    c1a0:	00c03f84 	movi	r3,254
    c1a4:	01401f84 	movi	r5,126
    c1a8:	003f8b06 	br	bfd8 <__alt_exception_stack_pointer+0xf800bfd8>
    c1ac:	10c00054 	ori	r3,r2,1
    c1b0:	30c00115 	stw	r3,4(r6)
    c1b4:	308d883a 	add	r6,r6,r2
    c1b8:	30800015 	stw	r2,0(r6)
    c1bc:	003f7806 	br	bfa0 <__alt_exception_stack_pointer+0xf800bfa0>

0000c1c0 <__sfvwrite_r>:
    c1c0:	30800217 	ldw	r2,8(r6)
    c1c4:	10006726 	beq	r2,zero,c364 <__sfvwrite_r+0x1a4>
    c1c8:	28c0030b 	ldhu	r3,12(r5)
    c1cc:	defff404 	addi	sp,sp,-48
    c1d0:	dd400715 	stw	r21,28(sp)
    c1d4:	dd000615 	stw	r20,24(sp)
    c1d8:	dc000215 	stw	r16,8(sp)
    c1dc:	dfc00b15 	stw	ra,44(sp)
    c1e0:	df000a15 	stw	fp,40(sp)
    c1e4:	ddc00915 	stw	r23,36(sp)
    c1e8:	dd800815 	stw	r22,32(sp)
    c1ec:	dcc00515 	stw	r19,20(sp)
    c1f0:	dc800415 	stw	r18,16(sp)
    c1f4:	dc400315 	stw	r17,12(sp)
    c1f8:	1880020c 	andi	r2,r3,8
    c1fc:	2821883a 	mov	r16,r5
    c200:	202b883a 	mov	r21,r4
    c204:	3029883a 	mov	r20,r6
    c208:	10002726 	beq	r2,zero,c2a8 <__sfvwrite_r+0xe8>
    c20c:	28800417 	ldw	r2,16(r5)
    c210:	10002526 	beq	r2,zero,c2a8 <__sfvwrite_r+0xe8>
    c214:	1880008c 	andi	r2,r3,2
    c218:	a4400017 	ldw	r17,0(r20)
    c21c:	10002a26 	beq	r2,zero,c2c8 <__sfvwrite_r+0x108>
    c220:	05a00034 	movhi	r22,32768
    c224:	0027883a 	mov	r19,zero
    c228:	0025883a 	mov	r18,zero
    c22c:	b5bf0004 	addi	r22,r22,-1024
    c230:	980d883a 	mov	r6,r19
    c234:	a809883a 	mov	r4,r21
    c238:	90004626 	beq	r18,zero,c354 <__sfvwrite_r+0x194>
    c23c:	900f883a 	mov	r7,r18
    c240:	b480022e 	bgeu	r22,r18,c24c <__sfvwrite_r+0x8c>
    c244:	01e00034 	movhi	r7,32768
    c248:	39ff0004 	addi	r7,r7,-1024
    c24c:	80800917 	ldw	r2,36(r16)
    c250:	81400717 	ldw	r5,28(r16)
    c254:	103ee83a 	callr	r2
    c258:	00805a0e 	bge	zero,r2,c3c4 <__sfvwrite_r+0x204>
    c25c:	a0c00217 	ldw	r3,8(r20)
    c260:	98a7883a 	add	r19,r19,r2
    c264:	90a5c83a 	sub	r18,r18,r2
    c268:	1885c83a 	sub	r2,r3,r2
    c26c:	a0800215 	stw	r2,8(r20)
    c270:	103fef1e 	bne	r2,zero,c230 <__alt_exception_stack_pointer+0xf800c230>
    c274:	0005883a 	mov	r2,zero
    c278:	dfc00b17 	ldw	ra,44(sp)
    c27c:	df000a17 	ldw	fp,40(sp)
    c280:	ddc00917 	ldw	r23,36(sp)
    c284:	dd800817 	ldw	r22,32(sp)
    c288:	dd400717 	ldw	r21,28(sp)
    c28c:	dd000617 	ldw	r20,24(sp)
    c290:	dcc00517 	ldw	r19,20(sp)
    c294:	dc800417 	ldw	r18,16(sp)
    c298:	dc400317 	ldw	r17,12(sp)
    c29c:	dc000217 	ldw	r16,8(sp)
    c2a0:	dec00c04 	addi	sp,sp,48
    c2a4:	f800283a 	ret
    c2a8:	800b883a 	mov	r5,r16
    c2ac:	a809883a 	mov	r4,r21
    c2b0:	0009d300 	call	9d30 <__swsetup_r>
    c2b4:	1000ee1e 	bne	r2,zero,c670 <__sfvwrite_r+0x4b0>
    c2b8:	80c0030b 	ldhu	r3,12(r16)
    c2bc:	a4400017 	ldw	r17,0(r20)
    c2c0:	1880008c 	andi	r2,r3,2
    c2c4:	103fd61e 	bne	r2,zero,c220 <__alt_exception_stack_pointer+0xf800c220>
    c2c8:	1880004c 	andi	r2,r3,1
    c2cc:	1000421e 	bne	r2,zero,c3d8 <__sfvwrite_r+0x218>
    c2d0:	0039883a 	mov	fp,zero
    c2d4:	0025883a 	mov	r18,zero
    c2d8:	90001a26 	beq	r18,zero,c344 <__sfvwrite_r+0x184>
    c2dc:	1880800c 	andi	r2,r3,512
    c2e0:	84c00217 	ldw	r19,8(r16)
    c2e4:	10002126 	beq	r2,zero,c36c <__sfvwrite_r+0x1ac>
    c2e8:	982f883a 	mov	r23,r19
    c2ec:	94c09636 	bltu	r18,r19,c548 <__sfvwrite_r+0x388>
    c2f0:	1881200c 	andi	r2,r3,1152
    c2f4:	1000a11e 	bne	r2,zero,c57c <__sfvwrite_r+0x3bc>
    c2f8:	81000017 	ldw	r4,0(r16)
    c2fc:	b80d883a 	mov	r6,r23
    c300:	e00b883a 	mov	r5,fp
    c304:	000cb8c0 	call	cb8c <memmove>
    c308:	80c00217 	ldw	r3,8(r16)
    c30c:	81000017 	ldw	r4,0(r16)
    c310:	9005883a 	mov	r2,r18
    c314:	1ce7c83a 	sub	r19,r3,r19
    c318:	25cf883a 	add	r7,r4,r23
    c31c:	84c00215 	stw	r19,8(r16)
    c320:	81c00015 	stw	r7,0(r16)
    c324:	a0c00217 	ldw	r3,8(r20)
    c328:	e0b9883a 	add	fp,fp,r2
    c32c:	90a5c83a 	sub	r18,r18,r2
    c330:	18a7c83a 	sub	r19,r3,r2
    c334:	a4c00215 	stw	r19,8(r20)
    c338:	983fce26 	beq	r19,zero,c274 <__alt_exception_stack_pointer+0xf800c274>
    c33c:	80c0030b 	ldhu	r3,12(r16)
    c340:	903fe61e 	bne	r18,zero,c2dc <__alt_exception_stack_pointer+0xf800c2dc>
    c344:	8f000017 	ldw	fp,0(r17)
    c348:	8c800117 	ldw	r18,4(r17)
    c34c:	8c400204 	addi	r17,r17,8
    c350:	003fe106 	br	c2d8 <__alt_exception_stack_pointer+0xf800c2d8>
    c354:	8cc00017 	ldw	r19,0(r17)
    c358:	8c800117 	ldw	r18,4(r17)
    c35c:	8c400204 	addi	r17,r17,8
    c360:	003fb306 	br	c230 <__alt_exception_stack_pointer+0xf800c230>
    c364:	0005883a 	mov	r2,zero
    c368:	f800283a 	ret
    c36c:	81000017 	ldw	r4,0(r16)
    c370:	80800417 	ldw	r2,16(r16)
    c374:	11005a36 	bltu	r2,r4,c4e0 <__sfvwrite_r+0x320>
    c378:	85c00517 	ldw	r23,20(r16)
    c37c:	95c05836 	bltu	r18,r23,c4e0 <__sfvwrite_r+0x320>
    c380:	00a00034 	movhi	r2,32768
    c384:	10bfffc4 	addi	r2,r2,-1
    c388:	9009883a 	mov	r4,r18
    c38c:	1480012e 	bgeu	r2,r18,c394 <__sfvwrite_r+0x1d4>
    c390:	1009883a 	mov	r4,r2
    c394:	b80b883a 	mov	r5,r23
    c398:	0004e6c0 	call	4e6c <__divsi3>
    c39c:	b80b883a 	mov	r5,r23
    c3a0:	1009883a 	mov	r4,r2
    c3a4:	00050200 	call	5020 <__mulsi3>
    c3a8:	81400717 	ldw	r5,28(r16)
    c3ac:	80c00917 	ldw	r3,36(r16)
    c3b0:	100f883a 	mov	r7,r2
    c3b4:	e00d883a 	mov	r6,fp
    c3b8:	a809883a 	mov	r4,r21
    c3bc:	183ee83a 	callr	r3
    c3c0:	00bfd816 	blt	zero,r2,c324 <__alt_exception_stack_pointer+0xf800c324>
    c3c4:	8080030b 	ldhu	r2,12(r16)
    c3c8:	10801014 	ori	r2,r2,64
    c3cc:	8080030d 	sth	r2,12(r16)
    c3d0:	00bfffc4 	movi	r2,-1
    c3d4:	003fa806 	br	c278 <__alt_exception_stack_pointer+0xf800c278>
    c3d8:	0027883a 	mov	r19,zero
    c3dc:	0011883a 	mov	r8,zero
    c3e0:	0039883a 	mov	fp,zero
    c3e4:	0025883a 	mov	r18,zero
    c3e8:	90001f26 	beq	r18,zero,c468 <__sfvwrite_r+0x2a8>
    c3ec:	40005a26 	beq	r8,zero,c558 <__sfvwrite_r+0x398>
    c3f0:	982d883a 	mov	r22,r19
    c3f4:	94c0012e 	bgeu	r18,r19,c3fc <__sfvwrite_r+0x23c>
    c3f8:	902d883a 	mov	r22,r18
    c3fc:	81000017 	ldw	r4,0(r16)
    c400:	80800417 	ldw	r2,16(r16)
    c404:	b02f883a 	mov	r23,r22
    c408:	81c00517 	ldw	r7,20(r16)
    c40c:	1100032e 	bgeu	r2,r4,c41c <__sfvwrite_r+0x25c>
    c410:	80c00217 	ldw	r3,8(r16)
    c414:	38c7883a 	add	r3,r7,r3
    c418:	1d801816 	blt	r3,r22,c47c <__sfvwrite_r+0x2bc>
    c41c:	b1c03e16 	blt	r22,r7,c518 <__sfvwrite_r+0x358>
    c420:	80800917 	ldw	r2,36(r16)
    c424:	81400717 	ldw	r5,28(r16)
    c428:	e00d883a 	mov	r6,fp
    c42c:	da000115 	stw	r8,4(sp)
    c430:	a809883a 	mov	r4,r21
    c434:	103ee83a 	callr	r2
    c438:	102f883a 	mov	r23,r2
    c43c:	da000117 	ldw	r8,4(sp)
    c440:	00bfe00e 	bge	zero,r2,c3c4 <__alt_exception_stack_pointer+0xf800c3c4>
    c444:	9de7c83a 	sub	r19,r19,r23
    c448:	98001f26 	beq	r19,zero,c4c8 <__sfvwrite_r+0x308>
    c44c:	a0800217 	ldw	r2,8(r20)
    c450:	e5f9883a 	add	fp,fp,r23
    c454:	95e5c83a 	sub	r18,r18,r23
    c458:	15efc83a 	sub	r23,r2,r23
    c45c:	a5c00215 	stw	r23,8(r20)
    c460:	b83f8426 	beq	r23,zero,c274 <__alt_exception_stack_pointer+0xf800c274>
    c464:	903fe11e 	bne	r18,zero,c3ec <__alt_exception_stack_pointer+0xf800c3ec>
    c468:	8f000017 	ldw	fp,0(r17)
    c46c:	8c800117 	ldw	r18,4(r17)
    c470:	0011883a 	mov	r8,zero
    c474:	8c400204 	addi	r17,r17,8
    c478:	003fdb06 	br	c3e8 <__alt_exception_stack_pointer+0xf800c3e8>
    c47c:	180d883a 	mov	r6,r3
    c480:	e00b883a 	mov	r5,fp
    c484:	da000115 	stw	r8,4(sp)
    c488:	d8c00015 	stw	r3,0(sp)
    c48c:	000cb8c0 	call	cb8c <memmove>
    c490:	d8c00017 	ldw	r3,0(sp)
    c494:	80800017 	ldw	r2,0(r16)
    c498:	800b883a 	mov	r5,r16
    c49c:	a809883a 	mov	r4,r21
    c4a0:	10c5883a 	add	r2,r2,r3
    c4a4:	80800015 	stw	r2,0(r16)
    c4a8:	d8c00015 	stw	r3,0(sp)
    c4ac:	000b9500 	call	b950 <_fflush_r>
    c4b0:	d8c00017 	ldw	r3,0(sp)
    c4b4:	da000117 	ldw	r8,4(sp)
    c4b8:	103fc21e 	bne	r2,zero,c3c4 <__alt_exception_stack_pointer+0xf800c3c4>
    c4bc:	182f883a 	mov	r23,r3
    c4c0:	9de7c83a 	sub	r19,r19,r23
    c4c4:	983fe11e 	bne	r19,zero,c44c <__alt_exception_stack_pointer+0xf800c44c>
    c4c8:	800b883a 	mov	r5,r16
    c4cc:	a809883a 	mov	r4,r21
    c4d0:	000b9500 	call	b950 <_fflush_r>
    c4d4:	103fbb1e 	bne	r2,zero,c3c4 <__alt_exception_stack_pointer+0xf800c3c4>
    c4d8:	0011883a 	mov	r8,zero
    c4dc:	003fdb06 	br	c44c <__alt_exception_stack_pointer+0xf800c44c>
    c4e0:	94c0012e 	bgeu	r18,r19,c4e8 <__sfvwrite_r+0x328>
    c4e4:	9027883a 	mov	r19,r18
    c4e8:	980d883a 	mov	r6,r19
    c4ec:	e00b883a 	mov	r5,fp
    c4f0:	000cb8c0 	call	cb8c <memmove>
    c4f4:	80800217 	ldw	r2,8(r16)
    c4f8:	80c00017 	ldw	r3,0(r16)
    c4fc:	14c5c83a 	sub	r2,r2,r19
    c500:	1cc7883a 	add	r3,r3,r19
    c504:	80800215 	stw	r2,8(r16)
    c508:	80c00015 	stw	r3,0(r16)
    c50c:	10004326 	beq	r2,zero,c61c <__sfvwrite_r+0x45c>
    c510:	9805883a 	mov	r2,r19
    c514:	003f8306 	br	c324 <__alt_exception_stack_pointer+0xf800c324>
    c518:	b00d883a 	mov	r6,r22
    c51c:	e00b883a 	mov	r5,fp
    c520:	da000115 	stw	r8,4(sp)
    c524:	000cb8c0 	call	cb8c <memmove>
    c528:	80800217 	ldw	r2,8(r16)
    c52c:	80c00017 	ldw	r3,0(r16)
    c530:	da000117 	ldw	r8,4(sp)
    c534:	1585c83a 	sub	r2,r2,r22
    c538:	1dad883a 	add	r22,r3,r22
    c53c:	80800215 	stw	r2,8(r16)
    c540:	85800015 	stw	r22,0(r16)
    c544:	003fbf06 	br	c444 <__alt_exception_stack_pointer+0xf800c444>
    c548:	81000017 	ldw	r4,0(r16)
    c54c:	9027883a 	mov	r19,r18
    c550:	902f883a 	mov	r23,r18
    c554:	003f6906 	br	c2fc <__alt_exception_stack_pointer+0xf800c2fc>
    c558:	900d883a 	mov	r6,r18
    c55c:	01400284 	movi	r5,10
    c560:	e009883a 	mov	r4,fp
    c564:	000caa80 	call	caa8 <memchr>
    c568:	10003e26 	beq	r2,zero,c664 <__sfvwrite_r+0x4a4>
    c56c:	10800044 	addi	r2,r2,1
    c570:	1727c83a 	sub	r19,r2,fp
    c574:	02000044 	movi	r8,1
    c578:	003f9d06 	br	c3f0 <__alt_exception_stack_pointer+0xf800c3f0>
    c57c:	80800517 	ldw	r2,20(r16)
    c580:	81400417 	ldw	r5,16(r16)
    c584:	81c00017 	ldw	r7,0(r16)
    c588:	10a7883a 	add	r19,r2,r2
    c58c:	9885883a 	add	r2,r19,r2
    c590:	1026d7fa 	srli	r19,r2,31
    c594:	396dc83a 	sub	r22,r7,r5
    c598:	b1000044 	addi	r4,r22,1
    c59c:	9885883a 	add	r2,r19,r2
    c5a0:	1027d07a 	srai	r19,r2,1
    c5a4:	2485883a 	add	r2,r4,r18
    c5a8:	980d883a 	mov	r6,r19
    c5ac:	9880022e 	bgeu	r19,r2,c5b8 <__sfvwrite_r+0x3f8>
    c5b0:	1027883a 	mov	r19,r2
    c5b4:	100d883a 	mov	r6,r2
    c5b8:	18c1000c 	andi	r3,r3,1024
    c5bc:	18001c26 	beq	r3,zero,c630 <__sfvwrite_r+0x470>
    c5c0:	300b883a 	mov	r5,r6
    c5c4:	a809883a 	mov	r4,r21
    c5c8:	0006df40 	call	6df4 <_malloc_r>
    c5cc:	102f883a 	mov	r23,r2
    c5d0:	10002926 	beq	r2,zero,c678 <__sfvwrite_r+0x4b8>
    c5d4:	81400417 	ldw	r5,16(r16)
    c5d8:	b00d883a 	mov	r6,r22
    c5dc:	1009883a 	mov	r4,r2
    c5e0:	00076000 	call	7600 <memcpy>
    c5e4:	8080030b 	ldhu	r2,12(r16)
    c5e8:	00fedfc4 	movi	r3,-1153
    c5ec:	10c4703a 	and	r2,r2,r3
    c5f0:	10802014 	ori	r2,r2,128
    c5f4:	8080030d 	sth	r2,12(r16)
    c5f8:	bd89883a 	add	r4,r23,r22
    c5fc:	9d8fc83a 	sub	r7,r19,r22
    c600:	85c00415 	stw	r23,16(r16)
    c604:	84c00515 	stw	r19,20(r16)
    c608:	81000015 	stw	r4,0(r16)
    c60c:	9027883a 	mov	r19,r18
    c610:	81c00215 	stw	r7,8(r16)
    c614:	902f883a 	mov	r23,r18
    c618:	003f3806 	br	c2fc <__alt_exception_stack_pointer+0xf800c2fc>
    c61c:	800b883a 	mov	r5,r16
    c620:	a809883a 	mov	r4,r21
    c624:	000b9500 	call	b950 <_fflush_r>
    c628:	103fb926 	beq	r2,zero,c510 <__alt_exception_stack_pointer+0xf800c510>
    c62c:	003f6506 	br	c3c4 <__alt_exception_stack_pointer+0xf800c3c4>
    c630:	a809883a 	mov	r4,r21
    c634:	000dec80 	call	dec8 <_realloc_r>
    c638:	102f883a 	mov	r23,r2
    c63c:	103fee1e 	bne	r2,zero,c5f8 <__alt_exception_stack_pointer+0xf800c5f8>
    c640:	81400417 	ldw	r5,16(r16)
    c644:	a809883a 	mov	r4,r21
    c648:	000beb00 	call	beb0 <_free_r>
    c64c:	8080030b 	ldhu	r2,12(r16)
    c650:	00ffdfc4 	movi	r3,-129
    c654:	1884703a 	and	r2,r3,r2
    c658:	00c00304 	movi	r3,12
    c65c:	a8c00015 	stw	r3,0(r21)
    c660:	003f5906 	br	c3c8 <__alt_exception_stack_pointer+0xf800c3c8>
    c664:	94c00044 	addi	r19,r18,1
    c668:	02000044 	movi	r8,1
    c66c:	003f6006 	br	c3f0 <__alt_exception_stack_pointer+0xf800c3f0>
    c670:	00bfffc4 	movi	r2,-1
    c674:	003f0006 	br	c278 <__alt_exception_stack_pointer+0xf800c278>
    c678:	00800304 	movi	r2,12
    c67c:	a8800015 	stw	r2,0(r21)
    c680:	8080030b 	ldhu	r2,12(r16)
    c684:	003f5006 	br	c3c8 <__alt_exception_stack_pointer+0xf800c3c8>

0000c688 <_fwalk>:
    c688:	defff704 	addi	sp,sp,-36
    c68c:	dd000415 	stw	r20,16(sp)
    c690:	dfc00815 	stw	ra,32(sp)
    c694:	ddc00715 	stw	r23,28(sp)
    c698:	dd800615 	stw	r22,24(sp)
    c69c:	dd400515 	stw	r21,20(sp)
    c6a0:	dcc00315 	stw	r19,12(sp)
    c6a4:	dc800215 	stw	r18,8(sp)
    c6a8:	dc400115 	stw	r17,4(sp)
    c6ac:	dc000015 	stw	r16,0(sp)
    c6b0:	2500b804 	addi	r20,r4,736
    c6b4:	a0002326 	beq	r20,zero,c744 <_fwalk+0xbc>
    c6b8:	282b883a 	mov	r21,r5
    c6bc:	002f883a 	mov	r23,zero
    c6c0:	05800044 	movi	r22,1
    c6c4:	04ffffc4 	movi	r19,-1
    c6c8:	a4400117 	ldw	r17,4(r20)
    c6cc:	a4800217 	ldw	r18,8(r20)
    c6d0:	8c7fffc4 	addi	r17,r17,-1
    c6d4:	88000d16 	blt	r17,zero,c70c <_fwalk+0x84>
    c6d8:	94000304 	addi	r16,r18,12
    c6dc:	94800384 	addi	r18,r18,14
    c6e0:	8080000b 	ldhu	r2,0(r16)
    c6e4:	8c7fffc4 	addi	r17,r17,-1
    c6e8:	813ffd04 	addi	r4,r16,-12
    c6ec:	b080042e 	bgeu	r22,r2,c700 <_fwalk+0x78>
    c6f0:	9080000f 	ldh	r2,0(r18)
    c6f4:	14c00226 	beq	r2,r19,c700 <_fwalk+0x78>
    c6f8:	a83ee83a 	callr	r21
    c6fc:	b8aeb03a 	or	r23,r23,r2
    c700:	84001a04 	addi	r16,r16,104
    c704:	94801a04 	addi	r18,r18,104
    c708:	8cfff51e 	bne	r17,r19,c6e0 <__alt_exception_stack_pointer+0xf800c6e0>
    c70c:	a5000017 	ldw	r20,0(r20)
    c710:	a03fed1e 	bne	r20,zero,c6c8 <__alt_exception_stack_pointer+0xf800c6c8>
    c714:	b805883a 	mov	r2,r23
    c718:	dfc00817 	ldw	ra,32(sp)
    c71c:	ddc00717 	ldw	r23,28(sp)
    c720:	dd800617 	ldw	r22,24(sp)
    c724:	dd400517 	ldw	r21,20(sp)
    c728:	dd000417 	ldw	r20,16(sp)
    c72c:	dcc00317 	ldw	r19,12(sp)
    c730:	dc800217 	ldw	r18,8(sp)
    c734:	dc400117 	ldw	r17,4(sp)
    c738:	dc000017 	ldw	r16,0(sp)
    c73c:	dec00904 	addi	sp,sp,36
    c740:	f800283a 	ret
    c744:	002f883a 	mov	r23,zero
    c748:	003ff206 	br	c714 <__alt_exception_stack_pointer+0xf800c714>

0000c74c <_fwalk_reent>:
    c74c:	defff704 	addi	sp,sp,-36
    c750:	dd000415 	stw	r20,16(sp)
    c754:	dfc00815 	stw	ra,32(sp)
    c758:	ddc00715 	stw	r23,28(sp)
    c75c:	dd800615 	stw	r22,24(sp)
    c760:	dd400515 	stw	r21,20(sp)
    c764:	dcc00315 	stw	r19,12(sp)
    c768:	dc800215 	stw	r18,8(sp)
    c76c:	dc400115 	stw	r17,4(sp)
    c770:	dc000015 	stw	r16,0(sp)
    c774:	2500b804 	addi	r20,r4,736
    c778:	a0002326 	beq	r20,zero,c808 <_fwalk_reent+0xbc>
    c77c:	282b883a 	mov	r21,r5
    c780:	2027883a 	mov	r19,r4
    c784:	002f883a 	mov	r23,zero
    c788:	05800044 	movi	r22,1
    c78c:	04bfffc4 	movi	r18,-1
    c790:	a4400117 	ldw	r17,4(r20)
    c794:	a4000217 	ldw	r16,8(r20)
    c798:	8c7fffc4 	addi	r17,r17,-1
    c79c:	88000c16 	blt	r17,zero,c7d0 <_fwalk_reent+0x84>
    c7a0:	84000304 	addi	r16,r16,12
    c7a4:	8080000b 	ldhu	r2,0(r16)
    c7a8:	8c7fffc4 	addi	r17,r17,-1
    c7ac:	817ffd04 	addi	r5,r16,-12
    c7b0:	b080052e 	bgeu	r22,r2,c7c8 <_fwalk_reent+0x7c>
    c7b4:	8080008f 	ldh	r2,2(r16)
    c7b8:	9809883a 	mov	r4,r19
    c7bc:	14800226 	beq	r2,r18,c7c8 <_fwalk_reent+0x7c>
    c7c0:	a83ee83a 	callr	r21
    c7c4:	b8aeb03a 	or	r23,r23,r2
    c7c8:	84001a04 	addi	r16,r16,104
    c7cc:	8cbff51e 	bne	r17,r18,c7a4 <__alt_exception_stack_pointer+0xf800c7a4>
    c7d0:	a5000017 	ldw	r20,0(r20)
    c7d4:	a03fee1e 	bne	r20,zero,c790 <__alt_exception_stack_pointer+0xf800c790>
    c7d8:	b805883a 	mov	r2,r23
    c7dc:	dfc00817 	ldw	ra,32(sp)
    c7e0:	ddc00717 	ldw	r23,28(sp)
    c7e4:	dd800617 	ldw	r22,24(sp)
    c7e8:	dd400517 	ldw	r21,20(sp)
    c7ec:	dd000417 	ldw	r20,16(sp)
    c7f0:	dcc00317 	ldw	r19,12(sp)
    c7f4:	dc800217 	ldw	r18,8(sp)
    c7f8:	dc400117 	ldw	r17,4(sp)
    c7fc:	dc000017 	ldw	r16,0(sp)
    c800:	dec00904 	addi	sp,sp,36
    c804:	f800283a 	ret
    c808:	002f883a 	mov	r23,zero
    c80c:	003ff206 	br	c7d8 <__alt_exception_stack_pointer+0xf800c7d8>

0000c810 <_setlocale_r>:
    c810:	30001b26 	beq	r6,zero,c880 <_setlocale_r+0x70>
    c814:	01400074 	movhi	r5,1
    c818:	defffe04 	addi	sp,sp,-8
    c81c:	29559004 	addi	r5,r5,22080
    c820:	3009883a 	mov	r4,r6
    c824:	dc000015 	stw	r16,0(sp)
    c828:	dfc00115 	stw	ra,4(sp)
    c82c:	3021883a 	mov	r16,r6
    c830:	000e5dc0 	call	e5dc <strcmp>
    c834:	1000061e 	bne	r2,zero,c850 <_setlocale_r+0x40>
    c838:	00800074 	movhi	r2,1
    c83c:	10957104 	addi	r2,r2,21956
    c840:	dfc00117 	ldw	ra,4(sp)
    c844:	dc000017 	ldw	r16,0(sp)
    c848:	dec00204 	addi	sp,sp,8
    c84c:	f800283a 	ret
    c850:	01400074 	movhi	r5,1
    c854:	29557104 	addi	r5,r5,21956
    c858:	8009883a 	mov	r4,r16
    c85c:	000e5dc0 	call	e5dc <strcmp>
    c860:	103ff526 	beq	r2,zero,c838 <__alt_exception_stack_pointer+0xf800c838>
    c864:	01400074 	movhi	r5,1
    c868:	29557b04 	addi	r5,r5,21996
    c86c:	8009883a 	mov	r4,r16
    c870:	000e5dc0 	call	e5dc <strcmp>
    c874:	103ff026 	beq	r2,zero,c838 <__alt_exception_stack_pointer+0xf800c838>
    c878:	0005883a 	mov	r2,zero
    c87c:	003ff006 	br	c840 <__alt_exception_stack_pointer+0xf800c840>
    c880:	00800074 	movhi	r2,1
    c884:	10957104 	addi	r2,r2,21956
    c888:	f800283a 	ret

0000c88c <__locale_charset>:
    c88c:	00800074 	movhi	r2,1
    c890:	10981004 	addi	r2,r2,24640
    c894:	f800283a 	ret

0000c898 <__locale_mb_cur_max>:
    c898:	00800074 	movhi	r2,1
    c89c:	109cd404 	addi	r2,r2,29520
    c8a0:	10800017 	ldw	r2,0(r2)
    c8a4:	f800283a 	ret

0000c8a8 <__locale_msgcharset>:
    c8a8:	00800074 	movhi	r2,1
    c8ac:	10980804 	addi	r2,r2,24608
    c8b0:	f800283a 	ret

0000c8b4 <__locale_cjk_lang>:
    c8b4:	0005883a 	mov	r2,zero
    c8b8:	f800283a 	ret

0000c8bc <_localeconv_r>:
    c8bc:	00800074 	movhi	r2,1
    c8c0:	10981804 	addi	r2,r2,24672
    c8c4:	f800283a 	ret

0000c8c8 <setlocale>:
    c8c8:	00800074 	movhi	r2,1
    c8cc:	109cd104 	addi	r2,r2,29508
    c8d0:	280d883a 	mov	r6,r5
    c8d4:	200b883a 	mov	r5,r4
    c8d8:	11000017 	ldw	r4,0(r2)
    c8dc:	000c8101 	jmpi	c810 <_setlocale_r>

0000c8e0 <localeconv>:
    c8e0:	00800074 	movhi	r2,1
    c8e4:	10981804 	addi	r2,r2,24672
    c8e8:	f800283a 	ret

0000c8ec <__smakebuf_r>:
    c8ec:	2880030b 	ldhu	r2,12(r5)
    c8f0:	10c0008c 	andi	r3,r2,2
    c8f4:	1800411e 	bne	r3,zero,c9fc <__smakebuf_r+0x110>
    c8f8:	deffec04 	addi	sp,sp,-80
    c8fc:	dc000f15 	stw	r16,60(sp)
    c900:	2821883a 	mov	r16,r5
    c904:	2940038f 	ldh	r5,14(r5)
    c908:	dc401015 	stw	r17,64(sp)
    c90c:	dfc01315 	stw	ra,76(sp)
    c910:	dcc01215 	stw	r19,72(sp)
    c914:	dc801115 	stw	r18,68(sp)
    c918:	2023883a 	mov	r17,r4
    c91c:	28001c16 	blt	r5,zero,c990 <__smakebuf_r+0xa4>
    c920:	d80d883a 	mov	r6,sp
    c924:	001024c0 	call	1024c <_fstat_r>
    c928:	10001816 	blt	r2,zero,c98c <__smakebuf_r+0xa0>
    c92c:	d8800117 	ldw	r2,4(sp)
    c930:	00e00014 	movui	r3,32768
    c934:	10bc000c 	andi	r2,r2,61440
    c938:	14c80020 	cmpeqi	r19,r2,8192
    c93c:	10c03726 	beq	r2,r3,ca1c <__smakebuf_r+0x130>
    c940:	80c0030b 	ldhu	r3,12(r16)
    c944:	18c20014 	ori	r3,r3,2048
    c948:	80c0030d 	sth	r3,12(r16)
    c94c:	00c80004 	movi	r3,8192
    c950:	10c0521e 	bne	r2,r3,ca9c <__smakebuf_r+0x1b0>
    c954:	8140038f 	ldh	r5,14(r16)
    c958:	8809883a 	mov	r4,r17
    c95c:	00102a80 	call	102a8 <_isatty_r>
    c960:	10004c26 	beq	r2,zero,ca94 <__smakebuf_r+0x1a8>
    c964:	8080030b 	ldhu	r2,12(r16)
    c968:	80c010c4 	addi	r3,r16,67
    c96c:	80c00015 	stw	r3,0(r16)
    c970:	10800054 	ori	r2,r2,1
    c974:	8080030d 	sth	r2,12(r16)
    c978:	00800044 	movi	r2,1
    c97c:	80c00415 	stw	r3,16(r16)
    c980:	80800515 	stw	r2,20(r16)
    c984:	04810004 	movi	r18,1024
    c988:	00000706 	br	c9a8 <__smakebuf_r+0xbc>
    c98c:	8080030b 	ldhu	r2,12(r16)
    c990:	10c0200c 	andi	r3,r2,128
    c994:	18001f1e 	bne	r3,zero,ca14 <__smakebuf_r+0x128>
    c998:	04810004 	movi	r18,1024
    c99c:	10820014 	ori	r2,r2,2048
    c9a0:	8080030d 	sth	r2,12(r16)
    c9a4:	0027883a 	mov	r19,zero
    c9a8:	900b883a 	mov	r5,r18
    c9ac:	8809883a 	mov	r4,r17
    c9b0:	0006df40 	call	6df4 <_malloc_r>
    c9b4:	10002c26 	beq	r2,zero,ca68 <__smakebuf_r+0x17c>
    c9b8:	80c0030b 	ldhu	r3,12(r16)
    c9bc:	01000074 	movhi	r4,1
    c9c0:	212e7904 	addi	r4,r4,-17948
    c9c4:	89000f15 	stw	r4,60(r17)
    c9c8:	18c02014 	ori	r3,r3,128
    c9cc:	80c0030d 	sth	r3,12(r16)
    c9d0:	80800015 	stw	r2,0(r16)
    c9d4:	80800415 	stw	r2,16(r16)
    c9d8:	84800515 	stw	r18,20(r16)
    c9dc:	98001a1e 	bne	r19,zero,ca48 <__smakebuf_r+0x15c>
    c9e0:	dfc01317 	ldw	ra,76(sp)
    c9e4:	dcc01217 	ldw	r19,72(sp)
    c9e8:	dc801117 	ldw	r18,68(sp)
    c9ec:	dc401017 	ldw	r17,64(sp)
    c9f0:	dc000f17 	ldw	r16,60(sp)
    c9f4:	dec01404 	addi	sp,sp,80
    c9f8:	f800283a 	ret
    c9fc:	288010c4 	addi	r2,r5,67
    ca00:	28800015 	stw	r2,0(r5)
    ca04:	28800415 	stw	r2,16(r5)
    ca08:	00800044 	movi	r2,1
    ca0c:	28800515 	stw	r2,20(r5)
    ca10:	f800283a 	ret
    ca14:	04801004 	movi	r18,64
    ca18:	003fe006 	br	c99c <__alt_exception_stack_pointer+0xf800c99c>
    ca1c:	81000a17 	ldw	r4,40(r16)
    ca20:	00c00074 	movhi	r3,1
    ca24:	18f95e04 	addi	r3,r3,-6792
    ca28:	20ffc51e 	bne	r4,r3,c940 <__alt_exception_stack_pointer+0xf800c940>
    ca2c:	8080030b 	ldhu	r2,12(r16)
    ca30:	04810004 	movi	r18,1024
    ca34:	84801315 	stw	r18,76(r16)
    ca38:	1484b03a 	or	r2,r2,r18
    ca3c:	8080030d 	sth	r2,12(r16)
    ca40:	0027883a 	mov	r19,zero
    ca44:	003fd806 	br	c9a8 <__alt_exception_stack_pointer+0xf800c9a8>
    ca48:	8140038f 	ldh	r5,14(r16)
    ca4c:	8809883a 	mov	r4,r17
    ca50:	00102a80 	call	102a8 <_isatty_r>
    ca54:	103fe226 	beq	r2,zero,c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    ca58:	8080030b 	ldhu	r2,12(r16)
    ca5c:	10800054 	ori	r2,r2,1
    ca60:	8080030d 	sth	r2,12(r16)
    ca64:	003fde06 	br	c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    ca68:	8080030b 	ldhu	r2,12(r16)
    ca6c:	10c0800c 	andi	r3,r2,512
    ca70:	183fdb1e 	bne	r3,zero,c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    ca74:	10800094 	ori	r2,r2,2
    ca78:	80c010c4 	addi	r3,r16,67
    ca7c:	8080030d 	sth	r2,12(r16)
    ca80:	00800044 	movi	r2,1
    ca84:	80c00015 	stw	r3,0(r16)
    ca88:	80c00415 	stw	r3,16(r16)
    ca8c:	80800515 	stw	r2,20(r16)
    ca90:	003fd306 	br	c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    ca94:	04810004 	movi	r18,1024
    ca98:	003fc306 	br	c9a8 <__alt_exception_stack_pointer+0xf800c9a8>
    ca9c:	0027883a 	mov	r19,zero
    caa0:	04810004 	movi	r18,1024
    caa4:	003fc006 	br	c9a8 <__alt_exception_stack_pointer+0xf800c9a8>

0000caa8 <memchr>:
    caa8:	208000cc 	andi	r2,r4,3
    caac:	280f883a 	mov	r7,r5
    cab0:	10003426 	beq	r2,zero,cb84 <memchr+0xdc>
    cab4:	30bfffc4 	addi	r2,r6,-1
    cab8:	30001a26 	beq	r6,zero,cb24 <memchr+0x7c>
    cabc:	20c00003 	ldbu	r3,0(r4)
    cac0:	29803fcc 	andi	r6,r5,255
    cac4:	30c0051e 	bne	r6,r3,cadc <memchr+0x34>
    cac8:	00001806 	br	cb2c <memchr+0x84>
    cacc:	10001526 	beq	r2,zero,cb24 <memchr+0x7c>
    cad0:	20c00003 	ldbu	r3,0(r4)
    cad4:	10bfffc4 	addi	r2,r2,-1
    cad8:	30c01426 	beq	r6,r3,cb2c <memchr+0x84>
    cadc:	21000044 	addi	r4,r4,1
    cae0:	20c000cc 	andi	r3,r4,3
    cae4:	183ff91e 	bne	r3,zero,cacc <__alt_exception_stack_pointer+0xf800cacc>
    cae8:	020000c4 	movi	r8,3
    caec:	40801136 	bltu	r8,r2,cb34 <memchr+0x8c>
    caf0:	10000c26 	beq	r2,zero,cb24 <memchr+0x7c>
    caf4:	20c00003 	ldbu	r3,0(r4)
    caf8:	29403fcc 	andi	r5,r5,255
    cafc:	28c00b26 	beq	r5,r3,cb2c <memchr+0x84>
    cb00:	20c00044 	addi	r3,r4,1
    cb04:	39803fcc 	andi	r6,r7,255
    cb08:	2089883a 	add	r4,r4,r2
    cb0c:	00000306 	br	cb1c <memchr+0x74>
    cb10:	18c00044 	addi	r3,r3,1
    cb14:	197fffc3 	ldbu	r5,-1(r3)
    cb18:	31400526 	beq	r6,r5,cb30 <memchr+0x88>
    cb1c:	1805883a 	mov	r2,r3
    cb20:	20fffb1e 	bne	r4,r3,cb10 <__alt_exception_stack_pointer+0xf800cb10>
    cb24:	0005883a 	mov	r2,zero
    cb28:	f800283a 	ret
    cb2c:	2005883a 	mov	r2,r4
    cb30:	f800283a 	ret
    cb34:	28c03fcc 	andi	r3,r5,255
    cb38:	1812923a 	slli	r9,r3,8
    cb3c:	02ffbff4 	movhi	r11,65279
    cb40:	02a02074 	movhi	r10,32897
    cb44:	48d2b03a 	or	r9,r9,r3
    cb48:	4806943a 	slli	r3,r9,16
    cb4c:	5affbfc4 	addi	r11,r11,-257
    cb50:	52a02004 	addi	r10,r10,-32640
    cb54:	48d2b03a 	or	r9,r9,r3
    cb58:	20c00017 	ldw	r3,0(r4)
    cb5c:	48c6f03a 	xor	r3,r9,r3
    cb60:	1acd883a 	add	r6,r3,r11
    cb64:	00c6303a 	nor	r3,zero,r3
    cb68:	30c6703a 	and	r3,r6,r3
    cb6c:	1a86703a 	and	r3,r3,r10
    cb70:	183fe01e 	bne	r3,zero,caf4 <__alt_exception_stack_pointer+0xf800caf4>
    cb74:	10bfff04 	addi	r2,r2,-4
    cb78:	21000104 	addi	r4,r4,4
    cb7c:	40bff636 	bltu	r8,r2,cb58 <__alt_exception_stack_pointer+0xf800cb58>
    cb80:	003fdb06 	br	caf0 <__alt_exception_stack_pointer+0xf800caf0>
    cb84:	3005883a 	mov	r2,r6
    cb88:	003fd706 	br	cae8 <__alt_exception_stack_pointer+0xf800cae8>

0000cb8c <memmove>:
    cb8c:	2005883a 	mov	r2,r4
    cb90:	29000b2e 	bgeu	r5,r4,cbc0 <memmove+0x34>
    cb94:	298f883a 	add	r7,r5,r6
    cb98:	21c0092e 	bgeu	r4,r7,cbc0 <memmove+0x34>
    cb9c:	2187883a 	add	r3,r4,r6
    cba0:	198bc83a 	sub	r5,r3,r6
    cba4:	30004826 	beq	r6,zero,ccc8 <memmove+0x13c>
    cba8:	39ffffc4 	addi	r7,r7,-1
    cbac:	39000003 	ldbu	r4,0(r7)
    cbb0:	18ffffc4 	addi	r3,r3,-1
    cbb4:	19000005 	stb	r4,0(r3)
    cbb8:	28fffb1e 	bne	r5,r3,cba8 <__alt_exception_stack_pointer+0xf800cba8>
    cbbc:	f800283a 	ret
    cbc0:	00c003c4 	movi	r3,15
    cbc4:	1980412e 	bgeu	r3,r6,cccc <memmove+0x140>
    cbc8:	2886b03a 	or	r3,r5,r2
    cbcc:	18c000cc 	andi	r3,r3,3
    cbd0:	1800401e 	bne	r3,zero,ccd4 <memmove+0x148>
    cbd4:	33fffc04 	addi	r15,r6,-16
    cbd8:	781ed13a 	srli	r15,r15,4
    cbdc:	28c00104 	addi	r3,r5,4
    cbe0:	13400104 	addi	r13,r2,4
    cbe4:	781c913a 	slli	r14,r15,4
    cbe8:	2b000204 	addi	r12,r5,8
    cbec:	12c00204 	addi	r11,r2,8
    cbf0:	73800504 	addi	r14,r14,20
    cbf4:	2a800304 	addi	r10,r5,12
    cbf8:	12400304 	addi	r9,r2,12
    cbfc:	2b9d883a 	add	r14,r5,r14
    cc00:	2811883a 	mov	r8,r5
    cc04:	100f883a 	mov	r7,r2
    cc08:	41000017 	ldw	r4,0(r8)
    cc0c:	39c00404 	addi	r7,r7,16
    cc10:	18c00404 	addi	r3,r3,16
    cc14:	393ffc15 	stw	r4,-16(r7)
    cc18:	193ffc17 	ldw	r4,-16(r3)
    cc1c:	6b400404 	addi	r13,r13,16
    cc20:	5ac00404 	addi	r11,r11,16
    cc24:	693ffc15 	stw	r4,-16(r13)
    cc28:	61000017 	ldw	r4,0(r12)
    cc2c:	4a400404 	addi	r9,r9,16
    cc30:	42000404 	addi	r8,r8,16
    cc34:	593ffc15 	stw	r4,-16(r11)
    cc38:	51000017 	ldw	r4,0(r10)
    cc3c:	63000404 	addi	r12,r12,16
    cc40:	52800404 	addi	r10,r10,16
    cc44:	493ffc15 	stw	r4,-16(r9)
    cc48:	1bbfef1e 	bne	r3,r14,cc08 <__alt_exception_stack_pointer+0xf800cc08>
    cc4c:	79000044 	addi	r4,r15,1
    cc50:	2008913a 	slli	r4,r4,4
    cc54:	328003cc 	andi	r10,r6,15
    cc58:	02c000c4 	movi	r11,3
    cc5c:	1107883a 	add	r3,r2,r4
    cc60:	290b883a 	add	r5,r5,r4
    cc64:	5a801e2e 	bgeu	r11,r10,cce0 <memmove+0x154>
    cc68:	1813883a 	mov	r9,r3
    cc6c:	2811883a 	mov	r8,r5
    cc70:	500f883a 	mov	r7,r10
    cc74:	41000017 	ldw	r4,0(r8)
    cc78:	4a400104 	addi	r9,r9,4
    cc7c:	39ffff04 	addi	r7,r7,-4
    cc80:	493fff15 	stw	r4,-4(r9)
    cc84:	42000104 	addi	r8,r8,4
    cc88:	59fffa36 	bltu	r11,r7,cc74 <__alt_exception_stack_pointer+0xf800cc74>
    cc8c:	513fff04 	addi	r4,r10,-4
    cc90:	2008d0ba 	srli	r4,r4,2
    cc94:	318000cc 	andi	r6,r6,3
    cc98:	21000044 	addi	r4,r4,1
    cc9c:	2109883a 	add	r4,r4,r4
    cca0:	2109883a 	add	r4,r4,r4
    cca4:	1907883a 	add	r3,r3,r4
    cca8:	290b883a 	add	r5,r5,r4
    ccac:	30000b26 	beq	r6,zero,ccdc <memmove+0x150>
    ccb0:	198d883a 	add	r6,r3,r6
    ccb4:	29c00003 	ldbu	r7,0(r5)
    ccb8:	18c00044 	addi	r3,r3,1
    ccbc:	29400044 	addi	r5,r5,1
    ccc0:	19ffffc5 	stb	r7,-1(r3)
    ccc4:	19bffb1e 	bne	r3,r6,ccb4 <__alt_exception_stack_pointer+0xf800ccb4>
    ccc8:	f800283a 	ret
    cccc:	1007883a 	mov	r3,r2
    ccd0:	003ff606 	br	ccac <__alt_exception_stack_pointer+0xf800ccac>
    ccd4:	1007883a 	mov	r3,r2
    ccd8:	003ff506 	br	ccb0 <__alt_exception_stack_pointer+0xf800ccb0>
    ccdc:	f800283a 	ret
    cce0:	500d883a 	mov	r6,r10
    cce4:	003ff106 	br	ccac <__alt_exception_stack_pointer+0xf800ccac>

0000cce8 <memset>:
    cce8:	20c000cc 	andi	r3,r4,3
    ccec:	2005883a 	mov	r2,r4
    ccf0:	18004426 	beq	r3,zero,ce04 <memset+0x11c>
    ccf4:	31ffffc4 	addi	r7,r6,-1
    ccf8:	30004026 	beq	r6,zero,cdfc <memset+0x114>
    ccfc:	2813883a 	mov	r9,r5
    cd00:	200d883a 	mov	r6,r4
    cd04:	2007883a 	mov	r3,r4
    cd08:	00000406 	br	cd1c <memset+0x34>
    cd0c:	3a3fffc4 	addi	r8,r7,-1
    cd10:	31800044 	addi	r6,r6,1
    cd14:	38003926 	beq	r7,zero,cdfc <memset+0x114>
    cd18:	400f883a 	mov	r7,r8
    cd1c:	18c00044 	addi	r3,r3,1
    cd20:	32400005 	stb	r9,0(r6)
    cd24:	1a0000cc 	andi	r8,r3,3
    cd28:	403ff81e 	bne	r8,zero,cd0c <__alt_exception_stack_pointer+0xf800cd0c>
    cd2c:	010000c4 	movi	r4,3
    cd30:	21c02d2e 	bgeu	r4,r7,cde8 <memset+0x100>
    cd34:	29003fcc 	andi	r4,r5,255
    cd38:	200c923a 	slli	r6,r4,8
    cd3c:	3108b03a 	or	r4,r6,r4
    cd40:	200c943a 	slli	r6,r4,16
    cd44:	218cb03a 	or	r6,r4,r6
    cd48:	010003c4 	movi	r4,15
    cd4c:	21c0182e 	bgeu	r4,r7,cdb0 <memset+0xc8>
    cd50:	3b3ffc04 	addi	r12,r7,-16
    cd54:	6018d13a 	srli	r12,r12,4
    cd58:	1a000104 	addi	r8,r3,4
    cd5c:	1ac00204 	addi	r11,r3,8
    cd60:	6008913a 	slli	r4,r12,4
    cd64:	1a800304 	addi	r10,r3,12
    cd68:	1813883a 	mov	r9,r3
    cd6c:	21000504 	addi	r4,r4,20
    cd70:	1909883a 	add	r4,r3,r4
    cd74:	49800015 	stw	r6,0(r9)
    cd78:	41800015 	stw	r6,0(r8)
    cd7c:	59800015 	stw	r6,0(r11)
    cd80:	51800015 	stw	r6,0(r10)
    cd84:	42000404 	addi	r8,r8,16
    cd88:	4a400404 	addi	r9,r9,16
    cd8c:	5ac00404 	addi	r11,r11,16
    cd90:	52800404 	addi	r10,r10,16
    cd94:	413ff71e 	bne	r8,r4,cd74 <__alt_exception_stack_pointer+0xf800cd74>
    cd98:	63000044 	addi	r12,r12,1
    cd9c:	6018913a 	slli	r12,r12,4
    cda0:	39c003cc 	andi	r7,r7,15
    cda4:	010000c4 	movi	r4,3
    cda8:	1b07883a 	add	r3,r3,r12
    cdac:	21c00e2e 	bgeu	r4,r7,cde8 <memset+0x100>
    cdb0:	1813883a 	mov	r9,r3
    cdb4:	3811883a 	mov	r8,r7
    cdb8:	010000c4 	movi	r4,3
    cdbc:	49800015 	stw	r6,0(r9)
    cdc0:	423fff04 	addi	r8,r8,-4
    cdc4:	4a400104 	addi	r9,r9,4
    cdc8:	223ffc36 	bltu	r4,r8,cdbc <__alt_exception_stack_pointer+0xf800cdbc>
    cdcc:	393fff04 	addi	r4,r7,-4
    cdd0:	2008d0ba 	srli	r4,r4,2
    cdd4:	39c000cc 	andi	r7,r7,3
    cdd8:	21000044 	addi	r4,r4,1
    cddc:	2109883a 	add	r4,r4,r4
    cde0:	2109883a 	add	r4,r4,r4
    cde4:	1907883a 	add	r3,r3,r4
    cde8:	38000526 	beq	r7,zero,ce00 <memset+0x118>
    cdec:	19cf883a 	add	r7,r3,r7
    cdf0:	19400005 	stb	r5,0(r3)
    cdf4:	18c00044 	addi	r3,r3,1
    cdf8:	38fffd1e 	bne	r7,r3,cdf0 <__alt_exception_stack_pointer+0xf800cdf0>
    cdfc:	f800283a 	ret
    ce00:	f800283a 	ret
    ce04:	2007883a 	mov	r3,r4
    ce08:	300f883a 	mov	r7,r6
    ce0c:	003fc706 	br	cd2c <__alt_exception_stack_pointer+0xf800cd2c>

0000ce10 <_Balloc>:
    ce10:	20801317 	ldw	r2,76(r4)
    ce14:	defffc04 	addi	sp,sp,-16
    ce18:	dc400115 	stw	r17,4(sp)
    ce1c:	dc000015 	stw	r16,0(sp)
    ce20:	dfc00315 	stw	ra,12(sp)
    ce24:	dc800215 	stw	r18,8(sp)
    ce28:	2023883a 	mov	r17,r4
    ce2c:	2821883a 	mov	r16,r5
    ce30:	10000f26 	beq	r2,zero,ce70 <_Balloc+0x60>
    ce34:	8407883a 	add	r3,r16,r16
    ce38:	18c7883a 	add	r3,r3,r3
    ce3c:	10c7883a 	add	r3,r2,r3
    ce40:	18800017 	ldw	r2,0(r3)
    ce44:	10001126 	beq	r2,zero,ce8c <_Balloc+0x7c>
    ce48:	11000017 	ldw	r4,0(r2)
    ce4c:	19000015 	stw	r4,0(r3)
    ce50:	10000415 	stw	zero,16(r2)
    ce54:	10000315 	stw	zero,12(r2)
    ce58:	dfc00317 	ldw	ra,12(sp)
    ce5c:	dc800217 	ldw	r18,8(sp)
    ce60:	dc400117 	ldw	r17,4(sp)
    ce64:	dc000017 	ldw	r16,0(sp)
    ce68:	dec00404 	addi	sp,sp,16
    ce6c:	f800283a 	ret
    ce70:	01800844 	movi	r6,33
    ce74:	01400104 	movi	r5,4
    ce78:	000fe640 	call	fe64 <_calloc_r>
    ce7c:	88801315 	stw	r2,76(r17)
    ce80:	103fec1e 	bne	r2,zero,ce34 <__alt_exception_stack_pointer+0xf800ce34>
    ce84:	0005883a 	mov	r2,zero
    ce88:	003ff306 	br	ce58 <__alt_exception_stack_pointer+0xf800ce58>
    ce8c:	01400044 	movi	r5,1
    ce90:	2c24983a 	sll	r18,r5,r16
    ce94:	8809883a 	mov	r4,r17
    ce98:	91800144 	addi	r6,r18,5
    ce9c:	318d883a 	add	r6,r6,r6
    cea0:	318d883a 	add	r6,r6,r6
    cea4:	000fe640 	call	fe64 <_calloc_r>
    cea8:	103ff626 	beq	r2,zero,ce84 <__alt_exception_stack_pointer+0xf800ce84>
    ceac:	14000115 	stw	r16,4(r2)
    ceb0:	14800215 	stw	r18,8(r2)
    ceb4:	003fe606 	br	ce50 <__alt_exception_stack_pointer+0xf800ce50>

0000ceb8 <_Bfree>:
    ceb8:	28000826 	beq	r5,zero,cedc <_Bfree+0x24>
    cebc:	28c00117 	ldw	r3,4(r5)
    cec0:	20801317 	ldw	r2,76(r4)
    cec4:	18c7883a 	add	r3,r3,r3
    cec8:	18c7883a 	add	r3,r3,r3
    cecc:	10c5883a 	add	r2,r2,r3
    ced0:	10c00017 	ldw	r3,0(r2)
    ced4:	28c00015 	stw	r3,0(r5)
    ced8:	11400015 	stw	r5,0(r2)
    cedc:	f800283a 	ret

0000cee0 <__multadd>:
    cee0:	defff704 	addi	sp,sp,-36
    cee4:	dc800215 	stw	r18,8(sp)
    cee8:	2c800417 	ldw	r18,16(r5)
    ceec:	dd800615 	stw	r22,24(sp)
    cef0:	dd400515 	stw	r21,20(sp)
    cef4:	dd000415 	stw	r20,16(sp)
    cef8:	dcc00315 	stw	r19,12(sp)
    cefc:	dc400115 	stw	r17,4(sp)
    cf00:	dc000015 	stw	r16,0(sp)
    cf04:	dfc00815 	stw	ra,32(sp)
    cf08:	ddc00715 	stw	r23,28(sp)
    cf0c:	2827883a 	mov	r19,r5
    cf10:	2029883a 	mov	r20,r4
    cf14:	3023883a 	mov	r17,r6
    cf18:	3821883a 	mov	r16,r7
    cf1c:	2d400504 	addi	r21,r5,20
    cf20:	002d883a 	mov	r22,zero
    cf24:	adc00017 	ldw	r23,0(r21)
    cf28:	880b883a 	mov	r5,r17
    cf2c:	ad400104 	addi	r21,r21,4
    cf30:	b93fffcc 	andi	r4,r23,65535
    cf34:	00050200 	call	5020 <__mulsi3>
    cf38:	b808d43a 	srli	r4,r23,16
    cf3c:	880b883a 	mov	r5,r17
    cf40:	1421883a 	add	r16,r2,r16
    cf44:	00050200 	call	5020 <__mulsi3>
    cf48:	800ed43a 	srli	r7,r16,16
    cf4c:	80ffffcc 	andi	r3,r16,65535
    cf50:	b5800044 	addi	r22,r22,1
    cf54:	11c5883a 	add	r2,r2,r7
    cf58:	100e943a 	slli	r7,r2,16
    cf5c:	1020d43a 	srli	r16,r2,16
    cf60:	38c7883a 	add	r3,r7,r3
    cf64:	a8ffff15 	stw	r3,-4(r21)
    cf68:	b4bfee16 	blt	r22,r18,cf24 <__alt_exception_stack_pointer+0xf800cf24>
    cf6c:	80000926 	beq	r16,zero,cf94 <__multadd+0xb4>
    cf70:	98800217 	ldw	r2,8(r19)
    cf74:	9080130e 	bge	r18,r2,cfc4 <__multadd+0xe4>
    cf78:	90800144 	addi	r2,r18,5
    cf7c:	1085883a 	add	r2,r2,r2
    cf80:	1085883a 	add	r2,r2,r2
    cf84:	9885883a 	add	r2,r19,r2
    cf88:	14000015 	stw	r16,0(r2)
    cf8c:	94800044 	addi	r18,r18,1
    cf90:	9c800415 	stw	r18,16(r19)
    cf94:	9805883a 	mov	r2,r19
    cf98:	dfc00817 	ldw	ra,32(sp)
    cf9c:	ddc00717 	ldw	r23,28(sp)
    cfa0:	dd800617 	ldw	r22,24(sp)
    cfa4:	dd400517 	ldw	r21,20(sp)
    cfa8:	dd000417 	ldw	r20,16(sp)
    cfac:	dcc00317 	ldw	r19,12(sp)
    cfb0:	dc800217 	ldw	r18,8(sp)
    cfb4:	dc400117 	ldw	r17,4(sp)
    cfb8:	dc000017 	ldw	r16,0(sp)
    cfbc:	dec00904 	addi	sp,sp,36
    cfc0:	f800283a 	ret
    cfc4:	99400117 	ldw	r5,4(r19)
    cfc8:	a009883a 	mov	r4,r20
    cfcc:	29400044 	addi	r5,r5,1
    cfd0:	000ce100 	call	ce10 <_Balloc>
    cfd4:	99800417 	ldw	r6,16(r19)
    cfd8:	99400304 	addi	r5,r19,12
    cfdc:	11000304 	addi	r4,r2,12
    cfe0:	31800084 	addi	r6,r6,2
    cfe4:	318d883a 	add	r6,r6,r6
    cfe8:	318d883a 	add	r6,r6,r6
    cfec:	1023883a 	mov	r17,r2
    cff0:	00076000 	call	7600 <memcpy>
    cff4:	98000a26 	beq	r19,zero,d020 <__multadd+0x140>
    cff8:	98c00117 	ldw	r3,4(r19)
    cffc:	a0801317 	ldw	r2,76(r20)
    d000:	18c7883a 	add	r3,r3,r3
    d004:	18c7883a 	add	r3,r3,r3
    d008:	10c5883a 	add	r2,r2,r3
    d00c:	10c00017 	ldw	r3,0(r2)
    d010:	98c00015 	stw	r3,0(r19)
    d014:	14c00015 	stw	r19,0(r2)
    d018:	8827883a 	mov	r19,r17
    d01c:	003fd606 	br	cf78 <__alt_exception_stack_pointer+0xf800cf78>
    d020:	8827883a 	mov	r19,r17
    d024:	003fd406 	br	cf78 <__alt_exception_stack_pointer+0xf800cf78>

0000d028 <__s2b>:
    d028:	defff904 	addi	sp,sp,-28
    d02c:	dc400115 	stw	r17,4(sp)
    d030:	dc000015 	stw	r16,0(sp)
    d034:	2023883a 	mov	r17,r4
    d038:	2821883a 	mov	r16,r5
    d03c:	39000204 	addi	r4,r7,8
    d040:	01400244 	movi	r5,9
    d044:	dcc00315 	stw	r19,12(sp)
    d048:	dc800215 	stw	r18,8(sp)
    d04c:	dfc00615 	stw	ra,24(sp)
    d050:	dd400515 	stw	r21,20(sp)
    d054:	dd000415 	stw	r20,16(sp)
    d058:	3825883a 	mov	r18,r7
    d05c:	3027883a 	mov	r19,r6
    d060:	0004e6c0 	call	4e6c <__divsi3>
    d064:	00c00044 	movi	r3,1
    d068:	000b883a 	mov	r5,zero
    d06c:	1880030e 	bge	r3,r2,d07c <__s2b+0x54>
    d070:	18c7883a 	add	r3,r3,r3
    d074:	29400044 	addi	r5,r5,1
    d078:	18bffd16 	blt	r3,r2,d070 <__alt_exception_stack_pointer+0xf800d070>
    d07c:	8809883a 	mov	r4,r17
    d080:	000ce100 	call	ce10 <_Balloc>
    d084:	d8c00717 	ldw	r3,28(sp)
    d088:	10c00515 	stw	r3,20(r2)
    d08c:	00c00044 	movi	r3,1
    d090:	10c00415 	stw	r3,16(r2)
    d094:	00c00244 	movi	r3,9
    d098:	1cc0210e 	bge	r3,r19,d120 <__s2b+0xf8>
    d09c:	80eb883a 	add	r21,r16,r3
    d0a0:	a829883a 	mov	r20,r21
    d0a4:	84e1883a 	add	r16,r16,r19
    d0a8:	a1c00007 	ldb	r7,0(r20)
    d0ac:	01800284 	movi	r6,10
    d0b0:	a5000044 	addi	r20,r20,1
    d0b4:	100b883a 	mov	r5,r2
    d0b8:	39fff404 	addi	r7,r7,-48
    d0bc:	8809883a 	mov	r4,r17
    d0c0:	000cee00 	call	cee0 <__multadd>
    d0c4:	a43ff81e 	bne	r20,r16,d0a8 <__alt_exception_stack_pointer+0xf800d0a8>
    d0c8:	ace1883a 	add	r16,r21,r19
    d0cc:	843ffe04 	addi	r16,r16,-8
    d0d0:	9c800a0e 	bge	r19,r18,d0fc <__s2b+0xd4>
    d0d4:	94e5c83a 	sub	r18,r18,r19
    d0d8:	84a5883a 	add	r18,r16,r18
    d0dc:	81c00007 	ldb	r7,0(r16)
    d0e0:	01800284 	movi	r6,10
    d0e4:	84000044 	addi	r16,r16,1
    d0e8:	100b883a 	mov	r5,r2
    d0ec:	39fff404 	addi	r7,r7,-48
    d0f0:	8809883a 	mov	r4,r17
    d0f4:	000cee00 	call	cee0 <__multadd>
    d0f8:	84bff81e 	bne	r16,r18,d0dc <__alt_exception_stack_pointer+0xf800d0dc>
    d0fc:	dfc00617 	ldw	ra,24(sp)
    d100:	dd400517 	ldw	r21,20(sp)
    d104:	dd000417 	ldw	r20,16(sp)
    d108:	dcc00317 	ldw	r19,12(sp)
    d10c:	dc800217 	ldw	r18,8(sp)
    d110:	dc400117 	ldw	r17,4(sp)
    d114:	dc000017 	ldw	r16,0(sp)
    d118:	dec00704 	addi	sp,sp,28
    d11c:	f800283a 	ret
    d120:	84000284 	addi	r16,r16,10
    d124:	1827883a 	mov	r19,r3
    d128:	003fe906 	br	d0d0 <__alt_exception_stack_pointer+0xf800d0d0>

0000d12c <__hi0bits>:
    d12c:	20bfffec 	andhi	r2,r4,65535
    d130:	1000141e 	bne	r2,zero,d184 <__hi0bits+0x58>
    d134:	2008943a 	slli	r4,r4,16
    d138:	00800404 	movi	r2,16
    d13c:	20ffc02c 	andhi	r3,r4,65280
    d140:	1800021e 	bne	r3,zero,d14c <__hi0bits+0x20>
    d144:	2008923a 	slli	r4,r4,8
    d148:	10800204 	addi	r2,r2,8
    d14c:	20fc002c 	andhi	r3,r4,61440
    d150:	1800021e 	bne	r3,zero,d15c <__hi0bits+0x30>
    d154:	2008913a 	slli	r4,r4,4
    d158:	10800104 	addi	r2,r2,4
    d15c:	20f0002c 	andhi	r3,r4,49152
    d160:	1800031e 	bne	r3,zero,d170 <__hi0bits+0x44>
    d164:	2109883a 	add	r4,r4,r4
    d168:	10800084 	addi	r2,r2,2
    d16c:	2109883a 	add	r4,r4,r4
    d170:	20000316 	blt	r4,zero,d180 <__hi0bits+0x54>
    d174:	2110002c 	andhi	r4,r4,16384
    d178:	2000041e 	bne	r4,zero,d18c <__hi0bits+0x60>
    d17c:	00800804 	movi	r2,32
    d180:	f800283a 	ret
    d184:	0005883a 	mov	r2,zero
    d188:	003fec06 	br	d13c <__alt_exception_stack_pointer+0xf800d13c>
    d18c:	10800044 	addi	r2,r2,1
    d190:	f800283a 	ret

0000d194 <__lo0bits>:
    d194:	20c00017 	ldw	r3,0(r4)
    d198:	188001cc 	andi	r2,r3,7
    d19c:	10000826 	beq	r2,zero,d1c0 <__lo0bits+0x2c>
    d1a0:	1880004c 	andi	r2,r3,1
    d1a4:	1000211e 	bne	r2,zero,d22c <__lo0bits+0x98>
    d1a8:	1880008c 	andi	r2,r3,2
    d1ac:	1000211e 	bne	r2,zero,d234 <__lo0bits+0xa0>
    d1b0:	1806d0ba 	srli	r3,r3,2
    d1b4:	00800084 	movi	r2,2
    d1b8:	20c00015 	stw	r3,0(r4)
    d1bc:	f800283a 	ret
    d1c0:	18bfffcc 	andi	r2,r3,65535
    d1c4:	10001326 	beq	r2,zero,d214 <__lo0bits+0x80>
    d1c8:	0005883a 	mov	r2,zero
    d1cc:	19403fcc 	andi	r5,r3,255
    d1d0:	2800021e 	bne	r5,zero,d1dc <__lo0bits+0x48>
    d1d4:	1806d23a 	srli	r3,r3,8
    d1d8:	10800204 	addi	r2,r2,8
    d1dc:	194003cc 	andi	r5,r3,15
    d1e0:	2800021e 	bne	r5,zero,d1ec <__lo0bits+0x58>
    d1e4:	1806d13a 	srli	r3,r3,4
    d1e8:	10800104 	addi	r2,r2,4
    d1ec:	194000cc 	andi	r5,r3,3
    d1f0:	2800021e 	bne	r5,zero,d1fc <__lo0bits+0x68>
    d1f4:	1806d0ba 	srli	r3,r3,2
    d1f8:	10800084 	addi	r2,r2,2
    d1fc:	1940004c 	andi	r5,r3,1
    d200:	2800081e 	bne	r5,zero,d224 <__lo0bits+0x90>
    d204:	1806d07a 	srli	r3,r3,1
    d208:	1800051e 	bne	r3,zero,d220 <__lo0bits+0x8c>
    d20c:	00800804 	movi	r2,32
    d210:	f800283a 	ret
    d214:	1806d43a 	srli	r3,r3,16
    d218:	00800404 	movi	r2,16
    d21c:	003feb06 	br	d1cc <__alt_exception_stack_pointer+0xf800d1cc>
    d220:	10800044 	addi	r2,r2,1
    d224:	20c00015 	stw	r3,0(r4)
    d228:	f800283a 	ret
    d22c:	0005883a 	mov	r2,zero
    d230:	f800283a 	ret
    d234:	1806d07a 	srli	r3,r3,1
    d238:	00800044 	movi	r2,1
    d23c:	20c00015 	stw	r3,0(r4)
    d240:	f800283a 	ret

0000d244 <__i2b>:
    d244:	defffd04 	addi	sp,sp,-12
    d248:	dc000015 	stw	r16,0(sp)
    d24c:	04000044 	movi	r16,1
    d250:	dc400115 	stw	r17,4(sp)
    d254:	2823883a 	mov	r17,r5
    d258:	800b883a 	mov	r5,r16
    d25c:	dfc00215 	stw	ra,8(sp)
    d260:	000ce100 	call	ce10 <_Balloc>
    d264:	14400515 	stw	r17,20(r2)
    d268:	14000415 	stw	r16,16(r2)
    d26c:	dfc00217 	ldw	ra,8(sp)
    d270:	dc400117 	ldw	r17,4(sp)
    d274:	dc000017 	ldw	r16,0(sp)
    d278:	dec00304 	addi	sp,sp,12
    d27c:	f800283a 	ret

0000d280 <__multiply>:
    d280:	deffef04 	addi	sp,sp,-68
    d284:	dc400815 	stw	r17,32(sp)
    d288:	dc000715 	stw	r16,28(sp)
    d28c:	34400417 	ldw	r17,16(r6)
    d290:	2c000417 	ldw	r16,16(r5)
    d294:	dd800d15 	stw	r22,52(sp)
    d298:	dc800915 	stw	r18,36(sp)
    d29c:	dfc01015 	stw	ra,64(sp)
    d2a0:	df000f15 	stw	fp,60(sp)
    d2a4:	ddc00e15 	stw	r23,56(sp)
    d2a8:	dd400c15 	stw	r21,48(sp)
    d2ac:	dd000b15 	stw	r20,44(sp)
    d2b0:	dcc00a15 	stw	r19,40(sp)
    d2b4:	2825883a 	mov	r18,r5
    d2b8:	302d883a 	mov	r22,r6
    d2bc:	8440050e 	bge	r16,r17,d2d4 <__multiply+0x54>
    d2c0:	8007883a 	mov	r3,r16
    d2c4:	3025883a 	mov	r18,r6
    d2c8:	8821883a 	mov	r16,r17
    d2cc:	282d883a 	mov	r22,r5
    d2d0:	1823883a 	mov	r17,r3
    d2d4:	90800217 	ldw	r2,8(r18)
    d2d8:	8447883a 	add	r3,r16,r17
    d2dc:	d8c00215 	stw	r3,8(sp)
    d2e0:	91400117 	ldw	r5,4(r18)
    d2e4:	10c0010e 	bge	r2,r3,d2ec <__multiply+0x6c>
    d2e8:	29400044 	addi	r5,r5,1
    d2ec:	000ce100 	call	ce10 <_Balloc>
    d2f0:	d8c00217 	ldw	r3,8(sp)
    d2f4:	d8800615 	stw	r2,24(sp)
    d2f8:	18eb883a 	add	r21,r3,r3
    d2fc:	ad6b883a 	add	r21,r21,r21
    d300:	10c00504 	addi	r3,r2,20
    d304:	1d6b883a 	add	r21,r3,r21
    d308:	d8c00115 	stw	r3,4(sp)
    d30c:	dd400315 	stw	r21,12(sp)
    d310:	1805883a 	mov	r2,r3
    d314:	1d40042e 	bgeu	r3,r21,d328 <__multiply+0xa8>
    d318:	d8c00317 	ldw	r3,12(sp)
    d31c:	10000015 	stw	zero,0(r2)
    d320:	10800104 	addi	r2,r2,4
    d324:	10fffc36 	bltu	r2,r3,d318 <__alt_exception_stack_pointer+0xf800d318>
    d328:	8c63883a 	add	r17,r17,r17
    d32c:	b5800504 	addi	r22,r22,20
    d330:	8c63883a 	add	r17,r17,r17
    d334:	94800504 	addi	r18,r18,20
    d338:	8421883a 	add	r16,r16,r16
    d33c:	b463883a 	add	r17,r22,r17
    d340:	8421883a 	add	r16,r16,r16
    d344:	dd800015 	stw	r22,0(sp)
    d348:	dc800415 	stw	r18,16(sp)
    d34c:	dc400515 	stw	r17,20(sp)
    d350:	9429883a 	add	r20,r18,r16
    d354:	b4404f2e 	bgeu	r22,r17,d494 <__multiply+0x214>
    d358:	d8c00017 	ldw	r3,0(sp)
    d35c:	1c800017 	ldw	r18,0(r3)
    d360:	947fffcc 	andi	r17,r18,65535
    d364:	88001e26 	beq	r17,zero,d3e0 <__multiply+0x160>
    d368:	dd800117 	ldw	r22,4(sp)
    d36c:	dd400417 	ldw	r21,16(sp)
    d370:	0027883a 	mov	r19,zero
    d374:	ac800017 	ldw	r18,0(r21)
    d378:	b4000017 	ldw	r16,0(r22)
    d37c:	880b883a 	mov	r5,r17
    d380:	913fffcc 	andi	r4,r18,65535
    d384:	00050200 	call	5020 <__mulsi3>
    d388:	9008d43a 	srli	r4,r18,16
    d38c:	84bfffcc 	andi	r18,r16,65535
    d390:	1485883a 	add	r2,r2,r18
    d394:	14e5883a 	add	r18,r2,r19
    d398:	8020d43a 	srli	r16,r16,16
    d39c:	9026d43a 	srli	r19,r18,16
    d3a0:	880b883a 	mov	r5,r17
    d3a4:	00050200 	call	5020 <__mulsi3>
    d3a8:	1405883a 	add	r2,r2,r16
    d3ac:	14e1883a 	add	r16,r2,r19
    d3b0:	90ffffcc 	andi	r3,r18,65535
    d3b4:	8024943a 	slli	r18,r16,16
    d3b8:	ad400104 	addi	r21,r21,4
    d3bc:	b005883a 	mov	r2,r22
    d3c0:	90c6b03a 	or	r3,r18,r3
    d3c4:	b0c00015 	stw	r3,0(r22)
    d3c8:	8026d43a 	srli	r19,r16,16
    d3cc:	b5800104 	addi	r22,r22,4
    d3d0:	ad3fe836 	bltu	r21,r20,d374 <__alt_exception_stack_pointer+0xf800d374>
    d3d4:	d8c00017 	ldw	r3,0(sp)
    d3d8:	14c00115 	stw	r19,4(r2)
    d3dc:	1c800017 	ldw	r18,0(r3)
    d3e0:	9024d43a 	srli	r18,r18,16
    d3e4:	90002226 	beq	r18,zero,d470 <__multiply+0x1f0>
    d3e8:	d8c00117 	ldw	r3,4(sp)
    d3ec:	dd800417 	ldw	r22,16(sp)
    d3f0:	002f883a 	mov	r23,zero
    d3f4:	1f000017 	ldw	fp,0(r3)
    d3f8:	1823883a 	mov	r17,r3
    d3fc:	182b883a 	mov	r21,r3
    d400:	e021883a 	mov	r16,fp
    d404:	00000106 	br	d40c <__multiply+0x18c>
    d408:	982b883a 	mov	r21,r19
    d40c:	b100000b 	ldhu	r4,0(r22)
    d410:	8020d43a 	srli	r16,r16,16
    d414:	900b883a 	mov	r5,r18
    d418:	00050200 	call	5020 <__mulsi3>
    d41c:	1405883a 	add	r2,r2,r16
    d420:	15ef883a 	add	r23,r2,r23
    d424:	b804943a 	slli	r2,r23,16
    d428:	e0ffffcc 	andi	r3,fp,65535
    d42c:	8c400104 	addi	r17,r17,4
    d430:	10c6b03a 	or	r3,r2,r3
    d434:	88ffff15 	stw	r3,-4(r17)
    d438:	b5800104 	addi	r22,r22,4
    d43c:	b13fff17 	ldw	r4,-4(r22)
    d440:	acc00104 	addi	r19,r21,4
    d444:	900b883a 	mov	r5,r18
    d448:	2008d43a 	srli	r4,r4,16
    d44c:	9c000017 	ldw	r16,0(r19)
    d450:	00050200 	call	5020 <__mulsi3>
    d454:	b806d43a 	srli	r3,r23,16
    d458:	813fffcc 	andi	r4,r16,65535
    d45c:	1105883a 	add	r2,r2,r4
    d460:	10f9883a 	add	fp,r2,r3
    d464:	e02ed43a 	srli	r23,fp,16
    d468:	b53fe736 	bltu	r22,r20,d408 <__alt_exception_stack_pointer+0xf800d408>
    d46c:	af000115 	stw	fp,4(r21)
    d470:	d8c00017 	ldw	r3,0(sp)
    d474:	d9000517 	ldw	r4,20(sp)
    d478:	18c00104 	addi	r3,r3,4
    d47c:	d8c00015 	stw	r3,0(sp)
    d480:	d8c00117 	ldw	r3,4(sp)
    d484:	18c00104 	addi	r3,r3,4
    d488:	d8c00115 	stw	r3,4(sp)
    d48c:	d8c00017 	ldw	r3,0(sp)
    d490:	193fb136 	bltu	r3,r4,d358 <__alt_exception_stack_pointer+0xf800d358>
    d494:	d8c00217 	ldw	r3,8(sp)
    d498:	00c00c0e 	bge	zero,r3,d4cc <__multiply+0x24c>
    d49c:	d8c00317 	ldw	r3,12(sp)
    d4a0:	18bfff17 	ldw	r2,-4(r3)
    d4a4:	1d7fff04 	addi	r21,r3,-4
    d4a8:	10000326 	beq	r2,zero,d4b8 <__multiply+0x238>
    d4ac:	00000706 	br	d4cc <__multiply+0x24c>
    d4b0:	a8800017 	ldw	r2,0(r21)
    d4b4:	1000051e 	bne	r2,zero,d4cc <__multiply+0x24c>
    d4b8:	d8c00217 	ldw	r3,8(sp)
    d4bc:	ad7fff04 	addi	r21,r21,-4
    d4c0:	18ffffc4 	addi	r3,r3,-1
    d4c4:	d8c00215 	stw	r3,8(sp)
    d4c8:	183ff91e 	bne	r3,zero,d4b0 <__alt_exception_stack_pointer+0xf800d4b0>
    d4cc:	d8c00617 	ldw	r3,24(sp)
    d4d0:	d9000217 	ldw	r4,8(sp)
    d4d4:	1805883a 	mov	r2,r3
    d4d8:	19000415 	stw	r4,16(r3)
    d4dc:	dfc01017 	ldw	ra,64(sp)
    d4e0:	df000f17 	ldw	fp,60(sp)
    d4e4:	ddc00e17 	ldw	r23,56(sp)
    d4e8:	dd800d17 	ldw	r22,52(sp)
    d4ec:	dd400c17 	ldw	r21,48(sp)
    d4f0:	dd000b17 	ldw	r20,44(sp)
    d4f4:	dcc00a17 	ldw	r19,40(sp)
    d4f8:	dc800917 	ldw	r18,36(sp)
    d4fc:	dc400817 	ldw	r17,32(sp)
    d500:	dc000717 	ldw	r16,28(sp)
    d504:	dec01104 	addi	sp,sp,68
    d508:	f800283a 	ret

0000d50c <__pow5mult>:
    d50c:	defffa04 	addi	sp,sp,-24
    d510:	dcc00315 	stw	r19,12(sp)
    d514:	dc000015 	stw	r16,0(sp)
    d518:	dfc00515 	stw	ra,20(sp)
    d51c:	dd000415 	stw	r20,16(sp)
    d520:	dc800215 	stw	r18,8(sp)
    d524:	dc400115 	stw	r17,4(sp)
    d528:	308000cc 	andi	r2,r6,3
    d52c:	3021883a 	mov	r16,r6
    d530:	2027883a 	mov	r19,r4
    d534:	10002f1e 	bne	r2,zero,d5f4 <__pow5mult+0xe8>
    d538:	2825883a 	mov	r18,r5
    d53c:	8021d0ba 	srai	r16,r16,2
    d540:	80001a26 	beq	r16,zero,d5ac <__pow5mult+0xa0>
    d544:	9c401217 	ldw	r17,72(r19)
    d548:	8800061e 	bne	r17,zero,d564 <__pow5mult+0x58>
    d54c:	00003406 	br	d620 <__pow5mult+0x114>
    d550:	8021d07a 	srai	r16,r16,1
    d554:	80001526 	beq	r16,zero,d5ac <__pow5mult+0xa0>
    d558:	88800017 	ldw	r2,0(r17)
    d55c:	10001c26 	beq	r2,zero,d5d0 <__pow5mult+0xc4>
    d560:	1023883a 	mov	r17,r2
    d564:	8080004c 	andi	r2,r16,1
    d568:	103ff926 	beq	r2,zero,d550 <__alt_exception_stack_pointer+0xf800d550>
    d56c:	880d883a 	mov	r6,r17
    d570:	900b883a 	mov	r5,r18
    d574:	9809883a 	mov	r4,r19
    d578:	000d2800 	call	d280 <__multiply>
    d57c:	90001b26 	beq	r18,zero,d5ec <__pow5mult+0xe0>
    d580:	91000117 	ldw	r4,4(r18)
    d584:	98c01317 	ldw	r3,76(r19)
    d588:	8021d07a 	srai	r16,r16,1
    d58c:	2109883a 	add	r4,r4,r4
    d590:	2109883a 	add	r4,r4,r4
    d594:	1907883a 	add	r3,r3,r4
    d598:	19000017 	ldw	r4,0(r3)
    d59c:	91000015 	stw	r4,0(r18)
    d5a0:	1c800015 	stw	r18,0(r3)
    d5a4:	1025883a 	mov	r18,r2
    d5a8:	803feb1e 	bne	r16,zero,d558 <__alt_exception_stack_pointer+0xf800d558>
    d5ac:	9005883a 	mov	r2,r18
    d5b0:	dfc00517 	ldw	ra,20(sp)
    d5b4:	dd000417 	ldw	r20,16(sp)
    d5b8:	dcc00317 	ldw	r19,12(sp)
    d5bc:	dc800217 	ldw	r18,8(sp)
    d5c0:	dc400117 	ldw	r17,4(sp)
    d5c4:	dc000017 	ldw	r16,0(sp)
    d5c8:	dec00604 	addi	sp,sp,24
    d5cc:	f800283a 	ret
    d5d0:	880d883a 	mov	r6,r17
    d5d4:	880b883a 	mov	r5,r17
    d5d8:	9809883a 	mov	r4,r19
    d5dc:	000d2800 	call	d280 <__multiply>
    d5e0:	88800015 	stw	r2,0(r17)
    d5e4:	10000015 	stw	zero,0(r2)
    d5e8:	003fdd06 	br	d560 <__alt_exception_stack_pointer+0xf800d560>
    d5ec:	1025883a 	mov	r18,r2
    d5f0:	003fd706 	br	d550 <__alt_exception_stack_pointer+0xf800d550>
    d5f4:	10bfffc4 	addi	r2,r2,-1
    d5f8:	1085883a 	add	r2,r2,r2
    d5fc:	00c00074 	movhi	r3,1
    d600:	18d59304 	addi	r3,r3,22092
    d604:	1085883a 	add	r2,r2,r2
    d608:	1885883a 	add	r2,r3,r2
    d60c:	11800017 	ldw	r6,0(r2)
    d610:	000f883a 	mov	r7,zero
    d614:	000cee00 	call	cee0 <__multadd>
    d618:	1025883a 	mov	r18,r2
    d61c:	003fc706 	br	d53c <__alt_exception_stack_pointer+0xf800d53c>
    d620:	05000044 	movi	r20,1
    d624:	a00b883a 	mov	r5,r20
    d628:	9809883a 	mov	r4,r19
    d62c:	000ce100 	call	ce10 <_Balloc>
    d630:	1023883a 	mov	r17,r2
    d634:	00809c44 	movi	r2,625
    d638:	88800515 	stw	r2,20(r17)
    d63c:	8d000415 	stw	r20,16(r17)
    d640:	9c401215 	stw	r17,72(r19)
    d644:	88000015 	stw	zero,0(r17)
    d648:	003fc606 	br	d564 <__alt_exception_stack_pointer+0xf800d564>

0000d64c <__lshift>:
    d64c:	defff904 	addi	sp,sp,-28
    d650:	dd400515 	stw	r21,20(sp)
    d654:	dcc00315 	stw	r19,12(sp)
    d658:	302bd17a 	srai	r21,r6,5
    d65c:	2cc00417 	ldw	r19,16(r5)
    d660:	28800217 	ldw	r2,8(r5)
    d664:	dd000415 	stw	r20,16(sp)
    d668:	ace7883a 	add	r19,r21,r19
    d66c:	dc800215 	stw	r18,8(sp)
    d670:	dc400115 	stw	r17,4(sp)
    d674:	dc000015 	stw	r16,0(sp)
    d678:	dfc00615 	stw	ra,24(sp)
    d67c:	9c000044 	addi	r16,r19,1
    d680:	2823883a 	mov	r17,r5
    d684:	3029883a 	mov	r20,r6
    d688:	2025883a 	mov	r18,r4
    d68c:	29400117 	ldw	r5,4(r5)
    d690:	1400030e 	bge	r2,r16,d6a0 <__lshift+0x54>
    d694:	1085883a 	add	r2,r2,r2
    d698:	29400044 	addi	r5,r5,1
    d69c:	143ffd16 	blt	r2,r16,d694 <__alt_exception_stack_pointer+0xf800d694>
    d6a0:	9009883a 	mov	r4,r18
    d6a4:	000ce100 	call	ce10 <_Balloc>
    d6a8:	10c00504 	addi	r3,r2,20
    d6ac:	0540070e 	bge	zero,r21,d6cc <__lshift+0x80>
    d6b0:	ad6b883a 	add	r21,r21,r21
    d6b4:	ad6b883a 	add	r21,r21,r21
    d6b8:	1809883a 	mov	r4,r3
    d6bc:	1d47883a 	add	r3,r3,r21
    d6c0:	20000015 	stw	zero,0(r4)
    d6c4:	21000104 	addi	r4,r4,4
    d6c8:	193ffd1e 	bne	r3,r4,d6c0 <__alt_exception_stack_pointer+0xf800d6c0>
    d6cc:	8a000417 	ldw	r8,16(r17)
    d6d0:	89000504 	addi	r4,r17,20
    d6d4:	a18007cc 	andi	r6,r20,31
    d6d8:	4211883a 	add	r8,r8,r8
    d6dc:	4211883a 	add	r8,r8,r8
    d6e0:	2211883a 	add	r8,r4,r8
    d6e4:	30002326 	beq	r6,zero,d774 <__lshift+0x128>
    d6e8:	02400804 	movi	r9,32
    d6ec:	4993c83a 	sub	r9,r9,r6
    d6f0:	000b883a 	mov	r5,zero
    d6f4:	21c00017 	ldw	r7,0(r4)
    d6f8:	1815883a 	mov	r10,r3
    d6fc:	18c00104 	addi	r3,r3,4
    d700:	398e983a 	sll	r7,r7,r6
    d704:	21000104 	addi	r4,r4,4
    d708:	394ab03a 	or	r5,r7,r5
    d70c:	197fff15 	stw	r5,-4(r3)
    d710:	217fff17 	ldw	r5,-4(r4)
    d714:	2a4ad83a 	srl	r5,r5,r9
    d718:	223ff636 	bltu	r4,r8,d6f4 <__alt_exception_stack_pointer+0xf800d6f4>
    d71c:	51400115 	stw	r5,4(r10)
    d720:	28001a1e 	bne	r5,zero,d78c <__lshift+0x140>
    d724:	843fffc4 	addi	r16,r16,-1
    d728:	14000415 	stw	r16,16(r2)
    d72c:	88000826 	beq	r17,zero,d750 <__lshift+0x104>
    d730:	89000117 	ldw	r4,4(r17)
    d734:	90c01317 	ldw	r3,76(r18)
    d738:	2109883a 	add	r4,r4,r4
    d73c:	2109883a 	add	r4,r4,r4
    d740:	1907883a 	add	r3,r3,r4
    d744:	19000017 	ldw	r4,0(r3)
    d748:	89000015 	stw	r4,0(r17)
    d74c:	1c400015 	stw	r17,0(r3)
    d750:	dfc00617 	ldw	ra,24(sp)
    d754:	dd400517 	ldw	r21,20(sp)
    d758:	dd000417 	ldw	r20,16(sp)
    d75c:	dcc00317 	ldw	r19,12(sp)
    d760:	dc800217 	ldw	r18,8(sp)
    d764:	dc400117 	ldw	r17,4(sp)
    d768:	dc000017 	ldw	r16,0(sp)
    d76c:	dec00704 	addi	sp,sp,28
    d770:	f800283a 	ret
    d774:	21400017 	ldw	r5,0(r4)
    d778:	18c00104 	addi	r3,r3,4
    d77c:	21000104 	addi	r4,r4,4
    d780:	197fff15 	stw	r5,-4(r3)
    d784:	223ffb36 	bltu	r4,r8,d774 <__alt_exception_stack_pointer+0xf800d774>
    d788:	003fe606 	br	d724 <__alt_exception_stack_pointer+0xf800d724>
    d78c:	9c000084 	addi	r16,r19,2
    d790:	003fe406 	br	d724 <__alt_exception_stack_pointer+0xf800d724>

0000d794 <__mcmp>:
    d794:	20800417 	ldw	r2,16(r4)
    d798:	28c00417 	ldw	r3,16(r5)
    d79c:	10c5c83a 	sub	r2,r2,r3
    d7a0:	1000111e 	bne	r2,zero,d7e8 <__mcmp+0x54>
    d7a4:	18c7883a 	add	r3,r3,r3
    d7a8:	18c7883a 	add	r3,r3,r3
    d7ac:	21000504 	addi	r4,r4,20
    d7b0:	29400504 	addi	r5,r5,20
    d7b4:	20c5883a 	add	r2,r4,r3
    d7b8:	28cb883a 	add	r5,r5,r3
    d7bc:	00000106 	br	d7c4 <__mcmp+0x30>
    d7c0:	20800a2e 	bgeu	r4,r2,d7ec <__mcmp+0x58>
    d7c4:	10bfff04 	addi	r2,r2,-4
    d7c8:	297fff04 	addi	r5,r5,-4
    d7cc:	11800017 	ldw	r6,0(r2)
    d7d0:	28c00017 	ldw	r3,0(r5)
    d7d4:	30fffa26 	beq	r6,r3,d7c0 <__alt_exception_stack_pointer+0xf800d7c0>
    d7d8:	30c00236 	bltu	r6,r3,d7e4 <__mcmp+0x50>
    d7dc:	00800044 	movi	r2,1
    d7e0:	f800283a 	ret
    d7e4:	00bfffc4 	movi	r2,-1
    d7e8:	f800283a 	ret
    d7ec:	0005883a 	mov	r2,zero
    d7f0:	f800283a 	ret

0000d7f4 <__mdiff>:
    d7f4:	28c00417 	ldw	r3,16(r5)
    d7f8:	30800417 	ldw	r2,16(r6)
    d7fc:	defffa04 	addi	sp,sp,-24
    d800:	dcc00315 	stw	r19,12(sp)
    d804:	dc800215 	stw	r18,8(sp)
    d808:	dfc00515 	stw	ra,20(sp)
    d80c:	dd000415 	stw	r20,16(sp)
    d810:	dc400115 	stw	r17,4(sp)
    d814:	dc000015 	stw	r16,0(sp)
    d818:	1887c83a 	sub	r3,r3,r2
    d81c:	2825883a 	mov	r18,r5
    d820:	3027883a 	mov	r19,r6
    d824:	1800141e 	bne	r3,zero,d878 <__mdiff+0x84>
    d828:	1085883a 	add	r2,r2,r2
    d82c:	1085883a 	add	r2,r2,r2
    d830:	2a000504 	addi	r8,r5,20
    d834:	34000504 	addi	r16,r6,20
    d838:	4087883a 	add	r3,r8,r2
    d83c:	8085883a 	add	r2,r16,r2
    d840:	00000106 	br	d848 <__mdiff+0x54>
    d844:	40c0592e 	bgeu	r8,r3,d9ac <__mdiff+0x1b8>
    d848:	18ffff04 	addi	r3,r3,-4
    d84c:	10bfff04 	addi	r2,r2,-4
    d850:	19c00017 	ldw	r7,0(r3)
    d854:	11400017 	ldw	r5,0(r2)
    d858:	397ffa26 	beq	r7,r5,d844 <__alt_exception_stack_pointer+0xf800d844>
    d85c:	3940592e 	bgeu	r7,r5,d9c4 <__mdiff+0x1d0>
    d860:	9005883a 	mov	r2,r18
    d864:	4023883a 	mov	r17,r8
    d868:	9825883a 	mov	r18,r19
    d86c:	05000044 	movi	r20,1
    d870:	1027883a 	mov	r19,r2
    d874:	00000406 	br	d888 <__mdiff+0x94>
    d878:	18005616 	blt	r3,zero,d9d4 <__mdiff+0x1e0>
    d87c:	34400504 	addi	r17,r6,20
    d880:	2c000504 	addi	r16,r5,20
    d884:	0029883a 	mov	r20,zero
    d888:	91400117 	ldw	r5,4(r18)
    d88c:	000ce100 	call	ce10 <_Balloc>
    d890:	92400417 	ldw	r9,16(r18)
    d894:	9b000417 	ldw	r12,16(r19)
    d898:	12c00504 	addi	r11,r2,20
    d89c:	4a51883a 	add	r8,r9,r9
    d8a0:	6319883a 	add	r12,r12,r12
    d8a4:	4211883a 	add	r8,r8,r8
    d8a8:	6319883a 	add	r12,r12,r12
    d8ac:	15000315 	stw	r20,12(r2)
    d8b0:	8211883a 	add	r8,r16,r8
    d8b4:	8b19883a 	add	r12,r17,r12
    d8b8:	0007883a 	mov	r3,zero
    d8bc:	81400017 	ldw	r5,0(r16)
    d8c0:	89c00017 	ldw	r7,0(r17)
    d8c4:	59800104 	addi	r6,r11,4
    d8c8:	293fffcc 	andi	r4,r5,65535
    d8cc:	20c7883a 	add	r3,r4,r3
    d8d0:	393fffcc 	andi	r4,r7,65535
    d8d4:	1909c83a 	sub	r4,r3,r4
    d8d8:	280ad43a 	srli	r5,r5,16
    d8dc:	380ed43a 	srli	r7,r7,16
    d8e0:	2007d43a 	srai	r3,r4,16
    d8e4:	213fffcc 	andi	r4,r4,65535
    d8e8:	29cbc83a 	sub	r5,r5,r7
    d8ec:	28c7883a 	add	r3,r5,r3
    d8f0:	180a943a 	slli	r5,r3,16
    d8f4:	8c400104 	addi	r17,r17,4
    d8f8:	84000104 	addi	r16,r16,4
    d8fc:	2908b03a 	or	r4,r5,r4
    d900:	59000015 	stw	r4,0(r11)
    d904:	1807d43a 	srai	r3,r3,16
    d908:	3015883a 	mov	r10,r6
    d90c:	3017883a 	mov	r11,r6
    d910:	8b3fea36 	bltu	r17,r12,d8bc <__alt_exception_stack_pointer+0xf800d8bc>
    d914:	8200162e 	bgeu	r16,r8,d970 <__mdiff+0x17c>
    d918:	8017883a 	mov	r11,r16
    d91c:	59400017 	ldw	r5,0(r11)
    d920:	31800104 	addi	r6,r6,4
    d924:	5ac00104 	addi	r11,r11,4
    d928:	293fffcc 	andi	r4,r5,65535
    d92c:	20c7883a 	add	r3,r4,r3
    d930:	280ed43a 	srli	r7,r5,16
    d934:	180bd43a 	srai	r5,r3,16
    d938:	193fffcc 	andi	r4,r3,65535
    d93c:	3947883a 	add	r3,r7,r5
    d940:	180a943a 	slli	r5,r3,16
    d944:	1807d43a 	srai	r3,r3,16
    d948:	2908b03a 	or	r4,r5,r4
    d94c:	313fff15 	stw	r4,-4(r6)
    d950:	5a3ff236 	bltu	r11,r8,d91c <__alt_exception_stack_pointer+0xf800d91c>
    d954:	0406303a 	nor	r3,zero,r16
    d958:	1a07883a 	add	r3,r3,r8
    d95c:	1806d0ba 	srli	r3,r3,2
    d960:	18c00044 	addi	r3,r3,1
    d964:	18c7883a 	add	r3,r3,r3
    d968:	18c7883a 	add	r3,r3,r3
    d96c:	50d5883a 	add	r10,r10,r3
    d970:	50ffff04 	addi	r3,r10,-4
    d974:	2000041e 	bne	r4,zero,d988 <__mdiff+0x194>
    d978:	18ffff04 	addi	r3,r3,-4
    d97c:	19000017 	ldw	r4,0(r3)
    d980:	4a7fffc4 	addi	r9,r9,-1
    d984:	203ffc26 	beq	r4,zero,d978 <__alt_exception_stack_pointer+0xf800d978>
    d988:	12400415 	stw	r9,16(r2)
    d98c:	dfc00517 	ldw	ra,20(sp)
    d990:	dd000417 	ldw	r20,16(sp)
    d994:	dcc00317 	ldw	r19,12(sp)
    d998:	dc800217 	ldw	r18,8(sp)
    d99c:	dc400117 	ldw	r17,4(sp)
    d9a0:	dc000017 	ldw	r16,0(sp)
    d9a4:	dec00604 	addi	sp,sp,24
    d9a8:	f800283a 	ret
    d9ac:	000b883a 	mov	r5,zero
    d9b0:	000ce100 	call	ce10 <_Balloc>
    d9b4:	00c00044 	movi	r3,1
    d9b8:	10c00415 	stw	r3,16(r2)
    d9bc:	10000515 	stw	zero,20(r2)
    d9c0:	003ff206 	br	d98c <__alt_exception_stack_pointer+0xf800d98c>
    d9c4:	8023883a 	mov	r17,r16
    d9c8:	0029883a 	mov	r20,zero
    d9cc:	4021883a 	mov	r16,r8
    d9d0:	003fad06 	br	d888 <__alt_exception_stack_pointer+0xf800d888>
    d9d4:	9005883a 	mov	r2,r18
    d9d8:	94400504 	addi	r17,r18,20
    d9dc:	9c000504 	addi	r16,r19,20
    d9e0:	9825883a 	mov	r18,r19
    d9e4:	05000044 	movi	r20,1
    d9e8:	1027883a 	mov	r19,r2
    d9ec:	003fa606 	br	d888 <__alt_exception_stack_pointer+0xf800d888>

0000d9f0 <__ulp>:
    d9f0:	295ffc2c 	andhi	r5,r5,32752
    d9f4:	00bf3034 	movhi	r2,64704
    d9f8:	2887883a 	add	r3,r5,r2
    d9fc:	00c0020e 	bge	zero,r3,da08 <__ulp+0x18>
    da00:	0005883a 	mov	r2,zero
    da04:	f800283a 	ret
    da08:	00c7c83a 	sub	r3,zero,r3
    da0c:	1807d53a 	srai	r3,r3,20
    da10:	008004c4 	movi	r2,19
    da14:	10c00b0e 	bge	r2,r3,da44 <__ulp+0x54>
    da18:	18bffb04 	addi	r2,r3,-20
    da1c:	01000784 	movi	r4,30
    da20:	0007883a 	mov	r3,zero
    da24:	20800516 	blt	r4,r2,da3c <__ulp+0x4c>
    da28:	010007c4 	movi	r4,31
    da2c:	2089c83a 	sub	r4,r4,r2
    da30:	00800044 	movi	r2,1
    da34:	1104983a 	sll	r2,r2,r4
    da38:	f800283a 	ret
    da3c:	00800044 	movi	r2,1
    da40:	f800283a 	ret
    da44:	01400234 	movhi	r5,8
    da48:	28c7d83a 	sra	r3,r5,r3
    da4c:	0005883a 	mov	r2,zero
    da50:	f800283a 	ret

0000da54 <__b2d>:
    da54:	defffa04 	addi	sp,sp,-24
    da58:	dc000015 	stw	r16,0(sp)
    da5c:	24000417 	ldw	r16,16(r4)
    da60:	dc400115 	stw	r17,4(sp)
    da64:	24400504 	addi	r17,r4,20
    da68:	8421883a 	add	r16,r16,r16
    da6c:	8421883a 	add	r16,r16,r16
    da70:	8c21883a 	add	r16,r17,r16
    da74:	dc800215 	stw	r18,8(sp)
    da78:	84bfff17 	ldw	r18,-4(r16)
    da7c:	dd000415 	stw	r20,16(sp)
    da80:	dcc00315 	stw	r19,12(sp)
    da84:	9009883a 	mov	r4,r18
    da88:	2829883a 	mov	r20,r5
    da8c:	dfc00515 	stw	ra,20(sp)
    da90:	000d12c0 	call	d12c <__hi0bits>
    da94:	00c00804 	movi	r3,32
    da98:	1889c83a 	sub	r4,r3,r2
    da9c:	a1000015 	stw	r4,0(r20)
    daa0:	01000284 	movi	r4,10
    daa4:	84ffff04 	addi	r19,r16,-4
    daa8:	20801216 	blt	r4,r2,daf4 <__b2d+0xa0>
    daac:	018002c4 	movi	r6,11
    dab0:	308dc83a 	sub	r6,r6,r2
    dab4:	9186d83a 	srl	r3,r18,r6
    dab8:	18cffc34 	orhi	r3,r3,16368
    dabc:	8cc0212e 	bgeu	r17,r19,db44 <__b2d+0xf0>
    dac0:	813ffe17 	ldw	r4,-8(r16)
    dac4:	218cd83a 	srl	r6,r4,r6
    dac8:	10800544 	addi	r2,r2,21
    dacc:	9084983a 	sll	r2,r18,r2
    dad0:	1184b03a 	or	r2,r2,r6
    dad4:	dfc00517 	ldw	ra,20(sp)
    dad8:	dd000417 	ldw	r20,16(sp)
    dadc:	dcc00317 	ldw	r19,12(sp)
    dae0:	dc800217 	ldw	r18,8(sp)
    dae4:	dc400117 	ldw	r17,4(sp)
    dae8:	dc000017 	ldw	r16,0(sp)
    daec:	dec00604 	addi	sp,sp,24
    daf0:	f800283a 	ret
    daf4:	8cc00f2e 	bgeu	r17,r19,db34 <__b2d+0xe0>
    daf8:	117ffd44 	addi	r5,r2,-11
    dafc:	80bffe17 	ldw	r2,-8(r16)
    db00:	28000e26 	beq	r5,zero,db3c <__b2d+0xe8>
    db04:	1949c83a 	sub	r4,r3,r5
    db08:	9164983a 	sll	r18,r18,r5
    db0c:	1106d83a 	srl	r3,r2,r4
    db10:	81bffe04 	addi	r6,r16,-8
    db14:	948ffc34 	orhi	r18,r18,16368
    db18:	90c6b03a 	or	r3,r18,r3
    db1c:	89800e2e 	bgeu	r17,r6,db58 <__b2d+0x104>
    db20:	81bffd17 	ldw	r6,-12(r16)
    db24:	1144983a 	sll	r2,r2,r5
    db28:	310ad83a 	srl	r5,r6,r4
    db2c:	2884b03a 	or	r2,r5,r2
    db30:	003fe806 	br	dad4 <__alt_exception_stack_pointer+0xf800dad4>
    db34:	10bffd44 	addi	r2,r2,-11
    db38:	1000041e 	bne	r2,zero,db4c <__b2d+0xf8>
    db3c:	90cffc34 	orhi	r3,r18,16368
    db40:	003fe406 	br	dad4 <__alt_exception_stack_pointer+0xf800dad4>
    db44:	000d883a 	mov	r6,zero
    db48:	003fdf06 	br	dac8 <__alt_exception_stack_pointer+0xf800dac8>
    db4c:	90a4983a 	sll	r18,r18,r2
    db50:	0005883a 	mov	r2,zero
    db54:	003ff906 	br	db3c <__alt_exception_stack_pointer+0xf800db3c>
    db58:	1144983a 	sll	r2,r2,r5
    db5c:	003fdd06 	br	dad4 <__alt_exception_stack_pointer+0xf800dad4>

0000db60 <__d2b>:
    db60:	defff804 	addi	sp,sp,-32
    db64:	dc000215 	stw	r16,8(sp)
    db68:	3021883a 	mov	r16,r6
    db6c:	dc400315 	stw	r17,12(sp)
    db70:	8022907a 	slli	r17,r16,1
    db74:	dd000615 	stw	r20,24(sp)
    db78:	2829883a 	mov	r20,r5
    db7c:	01400044 	movi	r5,1
    db80:	dcc00515 	stw	r19,20(sp)
    db84:	dc800415 	stw	r18,16(sp)
    db88:	dfc00715 	stw	ra,28(sp)
    db8c:	3825883a 	mov	r18,r7
    db90:	8822d57a 	srli	r17,r17,21
    db94:	000ce100 	call	ce10 <_Balloc>
    db98:	1027883a 	mov	r19,r2
    db9c:	00800434 	movhi	r2,16
    dba0:	10bfffc4 	addi	r2,r2,-1
    dba4:	808c703a 	and	r6,r16,r2
    dba8:	88000126 	beq	r17,zero,dbb0 <__d2b+0x50>
    dbac:	31800434 	orhi	r6,r6,16
    dbb0:	d9800015 	stw	r6,0(sp)
    dbb4:	a0002426 	beq	r20,zero,dc48 <__d2b+0xe8>
    dbb8:	d9000104 	addi	r4,sp,4
    dbbc:	dd000115 	stw	r20,4(sp)
    dbc0:	000d1940 	call	d194 <__lo0bits>
    dbc4:	d8c00017 	ldw	r3,0(sp)
    dbc8:	10002f1e 	bne	r2,zero,dc88 <__d2b+0x128>
    dbcc:	d9000117 	ldw	r4,4(sp)
    dbd0:	99000515 	stw	r4,20(r19)
    dbd4:	1821003a 	cmpeq	r16,r3,zero
    dbd8:	01000084 	movi	r4,2
    dbdc:	2421c83a 	sub	r16,r4,r16
    dbe0:	98c00615 	stw	r3,24(r19)
    dbe4:	9c000415 	stw	r16,16(r19)
    dbe8:	88001f1e 	bne	r17,zero,dc68 <__d2b+0x108>
    dbec:	10bef384 	addi	r2,r2,-1074
    dbf0:	90800015 	stw	r2,0(r18)
    dbf4:	00900034 	movhi	r2,16384
    dbf8:	10bfffc4 	addi	r2,r2,-1
    dbfc:	8085883a 	add	r2,r16,r2
    dc00:	1085883a 	add	r2,r2,r2
    dc04:	1085883a 	add	r2,r2,r2
    dc08:	9885883a 	add	r2,r19,r2
    dc0c:	11000517 	ldw	r4,20(r2)
    dc10:	8020917a 	slli	r16,r16,5
    dc14:	000d12c0 	call	d12c <__hi0bits>
    dc18:	d8c00817 	ldw	r3,32(sp)
    dc1c:	8085c83a 	sub	r2,r16,r2
    dc20:	18800015 	stw	r2,0(r3)
    dc24:	9805883a 	mov	r2,r19
    dc28:	dfc00717 	ldw	ra,28(sp)
    dc2c:	dd000617 	ldw	r20,24(sp)
    dc30:	dcc00517 	ldw	r19,20(sp)
    dc34:	dc800417 	ldw	r18,16(sp)
    dc38:	dc400317 	ldw	r17,12(sp)
    dc3c:	dc000217 	ldw	r16,8(sp)
    dc40:	dec00804 	addi	sp,sp,32
    dc44:	f800283a 	ret
    dc48:	d809883a 	mov	r4,sp
    dc4c:	000d1940 	call	d194 <__lo0bits>
    dc50:	d8c00017 	ldw	r3,0(sp)
    dc54:	04000044 	movi	r16,1
    dc58:	9c000415 	stw	r16,16(r19)
    dc5c:	98c00515 	stw	r3,20(r19)
    dc60:	10800804 	addi	r2,r2,32
    dc64:	883fe126 	beq	r17,zero,dbec <__alt_exception_stack_pointer+0xf800dbec>
    dc68:	00c00d44 	movi	r3,53
    dc6c:	8c7ef344 	addi	r17,r17,-1075
    dc70:	88a3883a 	add	r17,r17,r2
    dc74:	1885c83a 	sub	r2,r3,r2
    dc78:	d8c00817 	ldw	r3,32(sp)
    dc7c:	94400015 	stw	r17,0(r18)
    dc80:	18800015 	stw	r2,0(r3)
    dc84:	003fe706 	br	dc24 <__alt_exception_stack_pointer+0xf800dc24>
    dc88:	01000804 	movi	r4,32
    dc8c:	2089c83a 	sub	r4,r4,r2
    dc90:	1908983a 	sll	r4,r3,r4
    dc94:	d9400117 	ldw	r5,4(sp)
    dc98:	1886d83a 	srl	r3,r3,r2
    dc9c:	2148b03a 	or	r4,r4,r5
    dca0:	99000515 	stw	r4,20(r19)
    dca4:	d8c00015 	stw	r3,0(sp)
    dca8:	003fca06 	br	dbd4 <__alt_exception_stack_pointer+0xf800dbd4>

0000dcac <__ratio>:
    dcac:	defff904 	addi	sp,sp,-28
    dcb0:	dc400315 	stw	r17,12(sp)
    dcb4:	2823883a 	mov	r17,r5
    dcb8:	d9400104 	addi	r5,sp,4
    dcbc:	dfc00615 	stw	ra,24(sp)
    dcc0:	dcc00515 	stw	r19,20(sp)
    dcc4:	dc800415 	stw	r18,16(sp)
    dcc8:	2027883a 	mov	r19,r4
    dccc:	dc000215 	stw	r16,8(sp)
    dcd0:	000da540 	call	da54 <__b2d>
    dcd4:	d80b883a 	mov	r5,sp
    dcd8:	8809883a 	mov	r4,r17
    dcdc:	1025883a 	mov	r18,r2
    dce0:	1821883a 	mov	r16,r3
    dce4:	000da540 	call	da54 <__b2d>
    dce8:	8a000417 	ldw	r8,16(r17)
    dcec:	99000417 	ldw	r4,16(r19)
    dcf0:	d9400117 	ldw	r5,4(sp)
    dcf4:	2209c83a 	sub	r4,r4,r8
    dcf8:	2010917a 	slli	r8,r4,5
    dcfc:	d9000017 	ldw	r4,0(sp)
    dd00:	2909c83a 	sub	r4,r5,r4
    dd04:	4109883a 	add	r4,r8,r4
    dd08:	01000e0e 	bge	zero,r4,dd44 <__ratio+0x98>
    dd0c:	2008953a 	slli	r4,r4,20
    dd10:	2421883a 	add	r16,r4,r16
    dd14:	100d883a 	mov	r6,r2
    dd18:	180f883a 	mov	r7,r3
    dd1c:	9009883a 	mov	r4,r18
    dd20:	800b883a 	mov	r5,r16
    dd24:	00112bc0 	call	112bc <__divdf3>
    dd28:	dfc00617 	ldw	ra,24(sp)
    dd2c:	dcc00517 	ldw	r19,20(sp)
    dd30:	dc800417 	ldw	r18,16(sp)
    dd34:	dc400317 	ldw	r17,12(sp)
    dd38:	dc000217 	ldw	r16,8(sp)
    dd3c:	dec00704 	addi	sp,sp,28
    dd40:	f800283a 	ret
    dd44:	2008953a 	slli	r4,r4,20
    dd48:	1907c83a 	sub	r3,r3,r4
    dd4c:	003ff106 	br	dd14 <__alt_exception_stack_pointer+0xf800dd14>

0000dd50 <_mprec_log10>:
    dd50:	defffe04 	addi	sp,sp,-8
    dd54:	dc000015 	stw	r16,0(sp)
    dd58:	dfc00115 	stw	ra,4(sp)
    dd5c:	008005c4 	movi	r2,23
    dd60:	2021883a 	mov	r16,r4
    dd64:	11000d0e 	bge	r2,r4,dd9c <_mprec_log10+0x4c>
    dd68:	0005883a 	mov	r2,zero
    dd6c:	00cffc34 	movhi	r3,16368
    dd70:	843fffc4 	addi	r16,r16,-1
    dd74:	000d883a 	mov	r6,zero
    dd78:	01d00934 	movhi	r7,16420
    dd7c:	1009883a 	mov	r4,r2
    dd80:	180b883a 	mov	r5,r3
    dd84:	0005a580 	call	5a58 <__muldf3>
    dd88:	803ff91e 	bne	r16,zero,dd70 <__alt_exception_stack_pointer+0xf800dd70>
    dd8c:	dfc00117 	ldw	ra,4(sp)
    dd90:	dc000017 	ldw	r16,0(sp)
    dd94:	dec00204 	addi	sp,sp,8
    dd98:	f800283a 	ret
    dd9c:	202090fa 	slli	r16,r4,3
    dda0:	00800074 	movhi	r2,1
    dda4:	1095aa04 	addi	r2,r2,22184
    dda8:	1421883a 	add	r16,r2,r16
    ddac:	80800017 	ldw	r2,0(r16)
    ddb0:	80c00117 	ldw	r3,4(r16)
    ddb4:	dfc00117 	ldw	ra,4(sp)
    ddb8:	dc000017 	ldw	r16,0(sp)
    ddbc:	dec00204 	addi	sp,sp,8
    ddc0:	f800283a 	ret

0000ddc4 <__copybits>:
    ddc4:	297fffc4 	addi	r5,r5,-1
    ddc8:	280fd17a 	srai	r7,r5,5
    ddcc:	30c00417 	ldw	r3,16(r6)
    ddd0:	30800504 	addi	r2,r6,20
    ddd4:	39c00044 	addi	r7,r7,1
    ddd8:	18c7883a 	add	r3,r3,r3
    dddc:	39cf883a 	add	r7,r7,r7
    dde0:	18c7883a 	add	r3,r3,r3
    dde4:	39cf883a 	add	r7,r7,r7
    dde8:	10c7883a 	add	r3,r2,r3
    ddec:	21cf883a 	add	r7,r4,r7
    ddf0:	10c00d2e 	bgeu	r2,r3,de28 <__copybits+0x64>
    ddf4:	200b883a 	mov	r5,r4
    ddf8:	12000017 	ldw	r8,0(r2)
    ddfc:	29400104 	addi	r5,r5,4
    de00:	10800104 	addi	r2,r2,4
    de04:	2a3fff15 	stw	r8,-4(r5)
    de08:	10fffb36 	bltu	r2,r3,ddf8 <__alt_exception_stack_pointer+0xf800ddf8>
    de0c:	1985c83a 	sub	r2,r3,r6
    de10:	10bffac4 	addi	r2,r2,-21
    de14:	1004d0ba 	srli	r2,r2,2
    de18:	10800044 	addi	r2,r2,1
    de1c:	1085883a 	add	r2,r2,r2
    de20:	1085883a 	add	r2,r2,r2
    de24:	2089883a 	add	r4,r4,r2
    de28:	21c0032e 	bgeu	r4,r7,de38 <__copybits+0x74>
    de2c:	20000015 	stw	zero,0(r4)
    de30:	21000104 	addi	r4,r4,4
    de34:	21fffd36 	bltu	r4,r7,de2c <__alt_exception_stack_pointer+0xf800de2c>
    de38:	f800283a 	ret

0000de3c <__any_on>:
    de3c:	20c00417 	ldw	r3,16(r4)
    de40:	2805d17a 	srai	r2,r5,5
    de44:	21000504 	addi	r4,r4,20
    de48:	18800d0e 	bge	r3,r2,de80 <__any_on+0x44>
    de4c:	18c7883a 	add	r3,r3,r3
    de50:	18c7883a 	add	r3,r3,r3
    de54:	20c7883a 	add	r3,r4,r3
    de58:	20c0192e 	bgeu	r4,r3,dec0 <__any_on+0x84>
    de5c:	18bfff17 	ldw	r2,-4(r3)
    de60:	18ffff04 	addi	r3,r3,-4
    de64:	1000041e 	bne	r2,zero,de78 <__any_on+0x3c>
    de68:	20c0142e 	bgeu	r4,r3,debc <__any_on+0x80>
    de6c:	18ffff04 	addi	r3,r3,-4
    de70:	19400017 	ldw	r5,0(r3)
    de74:	283ffc26 	beq	r5,zero,de68 <__alt_exception_stack_pointer+0xf800de68>
    de78:	00800044 	movi	r2,1
    de7c:	f800283a 	ret
    de80:	10c00a0e 	bge	r2,r3,deac <__any_on+0x70>
    de84:	1085883a 	add	r2,r2,r2
    de88:	1085883a 	add	r2,r2,r2
    de8c:	294007cc 	andi	r5,r5,31
    de90:	2087883a 	add	r3,r4,r2
    de94:	283ff026 	beq	r5,zero,de58 <__alt_exception_stack_pointer+0xf800de58>
    de98:	19800017 	ldw	r6,0(r3)
    de9c:	3144d83a 	srl	r2,r6,r5
    dea0:	114a983a 	sll	r5,r2,r5
    dea4:	317ff41e 	bne	r6,r5,de78 <__alt_exception_stack_pointer+0xf800de78>
    dea8:	003feb06 	br	de58 <__alt_exception_stack_pointer+0xf800de58>
    deac:	1085883a 	add	r2,r2,r2
    deb0:	1085883a 	add	r2,r2,r2
    deb4:	2087883a 	add	r3,r4,r2
    deb8:	003fe706 	br	de58 <__alt_exception_stack_pointer+0xf800de58>
    debc:	f800283a 	ret
    dec0:	0005883a 	mov	r2,zero
    dec4:	f800283a 	ret

0000dec8 <_realloc_r>:
    dec8:	defff604 	addi	sp,sp,-40
    decc:	dc800215 	stw	r18,8(sp)
    ded0:	dfc00915 	stw	ra,36(sp)
    ded4:	df000815 	stw	fp,32(sp)
    ded8:	ddc00715 	stw	r23,28(sp)
    dedc:	dd800615 	stw	r22,24(sp)
    dee0:	dd400515 	stw	r21,20(sp)
    dee4:	dd000415 	stw	r20,16(sp)
    dee8:	dcc00315 	stw	r19,12(sp)
    deec:	dc400115 	stw	r17,4(sp)
    def0:	dc000015 	stw	r16,0(sp)
    def4:	3025883a 	mov	r18,r6
    def8:	2800b726 	beq	r5,zero,e1d8 <_realloc_r+0x310>
    defc:	282b883a 	mov	r21,r5
    df00:	2029883a 	mov	r20,r4
    df04:	00123c40 	call	123c4 <__malloc_lock>
    df08:	a8bfff17 	ldw	r2,-4(r21)
    df0c:	043fff04 	movi	r16,-4
    df10:	90c002c4 	addi	r3,r18,11
    df14:	01000584 	movi	r4,22
    df18:	acfffe04 	addi	r19,r21,-8
    df1c:	1420703a 	and	r16,r2,r16
    df20:	20c0332e 	bgeu	r4,r3,dff0 <_realloc_r+0x128>
    df24:	047ffe04 	movi	r17,-8
    df28:	1c62703a 	and	r17,r3,r17
    df2c:	8807883a 	mov	r3,r17
    df30:	88005816 	blt	r17,zero,e094 <_realloc_r+0x1cc>
    df34:	8c805736 	bltu	r17,r18,e094 <_realloc_r+0x1cc>
    df38:	80c0300e 	bge	r16,r3,dffc <_realloc_r+0x134>
    df3c:	07000074 	movhi	fp,1
    df40:	e7170604 	addi	fp,fp,23576
    df44:	e1c00217 	ldw	r7,8(fp)
    df48:	9c09883a 	add	r4,r19,r16
    df4c:	22000117 	ldw	r8,4(r4)
    df50:	21c06326 	beq	r4,r7,e0e0 <_realloc_r+0x218>
    df54:	017fff84 	movi	r5,-2
    df58:	414a703a 	and	r5,r8,r5
    df5c:	214b883a 	add	r5,r4,r5
    df60:	29800117 	ldw	r6,4(r5)
    df64:	3180004c 	andi	r6,r6,1
    df68:	30003f26 	beq	r6,zero,e068 <_realloc_r+0x1a0>
    df6c:	1080004c 	andi	r2,r2,1
    df70:	10008326 	beq	r2,zero,e180 <_realloc_r+0x2b8>
    df74:	900b883a 	mov	r5,r18
    df78:	a009883a 	mov	r4,r20
    df7c:	0006df40 	call	6df4 <_malloc_r>
    df80:	1025883a 	mov	r18,r2
    df84:	10011e26 	beq	r2,zero,e400 <_realloc_r+0x538>
    df88:	a93fff17 	ldw	r4,-4(r21)
    df8c:	10fffe04 	addi	r3,r2,-8
    df90:	00bfff84 	movi	r2,-2
    df94:	2084703a 	and	r2,r4,r2
    df98:	9885883a 	add	r2,r19,r2
    df9c:	1880ee26 	beq	r3,r2,e358 <_realloc_r+0x490>
    dfa0:	81bfff04 	addi	r6,r16,-4
    dfa4:	00800904 	movi	r2,36
    dfa8:	1180b836 	bltu	r2,r6,e28c <_realloc_r+0x3c4>
    dfac:	00c004c4 	movi	r3,19
    dfb0:	19809636 	bltu	r3,r6,e20c <_realloc_r+0x344>
    dfb4:	9005883a 	mov	r2,r18
    dfb8:	a807883a 	mov	r3,r21
    dfbc:	19000017 	ldw	r4,0(r3)
    dfc0:	11000015 	stw	r4,0(r2)
    dfc4:	19000117 	ldw	r4,4(r3)
    dfc8:	11000115 	stw	r4,4(r2)
    dfcc:	18c00217 	ldw	r3,8(r3)
    dfd0:	10c00215 	stw	r3,8(r2)
    dfd4:	a80b883a 	mov	r5,r21
    dfd8:	a009883a 	mov	r4,r20
    dfdc:	000beb00 	call	beb0 <_free_r>
    dfe0:	a009883a 	mov	r4,r20
    dfe4:	00123e80 	call	123e8 <__malloc_unlock>
    dfe8:	9005883a 	mov	r2,r18
    dfec:	00001206 	br	e038 <_realloc_r+0x170>
    dff0:	00c00404 	movi	r3,16
    dff4:	1823883a 	mov	r17,r3
    dff8:	003fce06 	br	df34 <__alt_exception_stack_pointer+0xf800df34>
    dffc:	a825883a 	mov	r18,r21
    e000:	8445c83a 	sub	r2,r16,r17
    e004:	00c003c4 	movi	r3,15
    e008:	18802636 	bltu	r3,r2,e0a4 <_realloc_r+0x1dc>
    e00c:	99800117 	ldw	r6,4(r19)
    e010:	9c07883a 	add	r3,r19,r16
    e014:	3180004c 	andi	r6,r6,1
    e018:	3420b03a 	or	r16,r6,r16
    e01c:	9c000115 	stw	r16,4(r19)
    e020:	18800117 	ldw	r2,4(r3)
    e024:	10800054 	ori	r2,r2,1
    e028:	18800115 	stw	r2,4(r3)
    e02c:	a009883a 	mov	r4,r20
    e030:	00123e80 	call	123e8 <__malloc_unlock>
    e034:	9005883a 	mov	r2,r18
    e038:	dfc00917 	ldw	ra,36(sp)
    e03c:	df000817 	ldw	fp,32(sp)
    e040:	ddc00717 	ldw	r23,28(sp)
    e044:	dd800617 	ldw	r22,24(sp)
    e048:	dd400517 	ldw	r21,20(sp)
    e04c:	dd000417 	ldw	r20,16(sp)
    e050:	dcc00317 	ldw	r19,12(sp)
    e054:	dc800217 	ldw	r18,8(sp)
    e058:	dc400117 	ldw	r17,4(sp)
    e05c:	dc000017 	ldw	r16,0(sp)
    e060:	dec00a04 	addi	sp,sp,40
    e064:	f800283a 	ret
    e068:	017fff04 	movi	r5,-4
    e06c:	414a703a 	and	r5,r8,r5
    e070:	814d883a 	add	r6,r16,r5
    e074:	30c01f16 	blt	r6,r3,e0f4 <_realloc_r+0x22c>
    e078:	20800317 	ldw	r2,12(r4)
    e07c:	20c00217 	ldw	r3,8(r4)
    e080:	a825883a 	mov	r18,r21
    e084:	3021883a 	mov	r16,r6
    e088:	18800315 	stw	r2,12(r3)
    e08c:	10c00215 	stw	r3,8(r2)
    e090:	003fdb06 	br	e000 <__alt_exception_stack_pointer+0xf800e000>
    e094:	00800304 	movi	r2,12
    e098:	a0800015 	stw	r2,0(r20)
    e09c:	0005883a 	mov	r2,zero
    e0a0:	003fe506 	br	e038 <__alt_exception_stack_pointer+0xf800e038>
    e0a4:	98c00117 	ldw	r3,4(r19)
    e0a8:	9c4b883a 	add	r5,r19,r17
    e0ac:	11000054 	ori	r4,r2,1
    e0b0:	18c0004c 	andi	r3,r3,1
    e0b4:	1c62b03a 	or	r17,r3,r17
    e0b8:	9c400115 	stw	r17,4(r19)
    e0bc:	29000115 	stw	r4,4(r5)
    e0c0:	2885883a 	add	r2,r5,r2
    e0c4:	10c00117 	ldw	r3,4(r2)
    e0c8:	29400204 	addi	r5,r5,8
    e0cc:	a009883a 	mov	r4,r20
    e0d0:	18c00054 	ori	r3,r3,1
    e0d4:	10c00115 	stw	r3,4(r2)
    e0d8:	000beb00 	call	beb0 <_free_r>
    e0dc:	003fd306 	br	e02c <__alt_exception_stack_pointer+0xf800e02c>
    e0e0:	017fff04 	movi	r5,-4
    e0e4:	414a703a 	and	r5,r8,r5
    e0e8:	89800404 	addi	r6,r17,16
    e0ec:	8151883a 	add	r8,r16,r5
    e0f0:	4180590e 	bge	r8,r6,e258 <_realloc_r+0x390>
    e0f4:	1080004c 	andi	r2,r2,1
    e0f8:	103f9e1e 	bne	r2,zero,df74 <__alt_exception_stack_pointer+0xf800df74>
    e0fc:	adbffe17 	ldw	r22,-8(r21)
    e100:	00bfff04 	movi	r2,-4
    e104:	9dadc83a 	sub	r22,r19,r22
    e108:	b1800117 	ldw	r6,4(r22)
    e10c:	3084703a 	and	r2,r6,r2
    e110:	20002026 	beq	r4,zero,e194 <_realloc_r+0x2cc>
    e114:	80af883a 	add	r23,r16,r2
    e118:	b96f883a 	add	r23,r23,r5
    e11c:	21c05f26 	beq	r4,r7,e29c <_realloc_r+0x3d4>
    e120:	b8c01c16 	blt	r23,r3,e194 <_realloc_r+0x2cc>
    e124:	20800317 	ldw	r2,12(r4)
    e128:	20c00217 	ldw	r3,8(r4)
    e12c:	81bfff04 	addi	r6,r16,-4
    e130:	01000904 	movi	r4,36
    e134:	18800315 	stw	r2,12(r3)
    e138:	10c00215 	stw	r3,8(r2)
    e13c:	b0c00217 	ldw	r3,8(r22)
    e140:	b0800317 	ldw	r2,12(r22)
    e144:	b4800204 	addi	r18,r22,8
    e148:	18800315 	stw	r2,12(r3)
    e14c:	10c00215 	stw	r3,8(r2)
    e150:	21801b36 	bltu	r4,r6,e1c0 <_realloc_r+0x2f8>
    e154:	008004c4 	movi	r2,19
    e158:	1180352e 	bgeu	r2,r6,e230 <_realloc_r+0x368>
    e15c:	a8800017 	ldw	r2,0(r21)
    e160:	b0800215 	stw	r2,8(r22)
    e164:	a8800117 	ldw	r2,4(r21)
    e168:	b0800315 	stw	r2,12(r22)
    e16c:	008006c4 	movi	r2,27
    e170:	11807f36 	bltu	r2,r6,e370 <_realloc_r+0x4a8>
    e174:	b0800404 	addi	r2,r22,16
    e178:	ad400204 	addi	r21,r21,8
    e17c:	00002d06 	br	e234 <_realloc_r+0x36c>
    e180:	adbffe17 	ldw	r22,-8(r21)
    e184:	00bfff04 	movi	r2,-4
    e188:	9dadc83a 	sub	r22,r19,r22
    e18c:	b1000117 	ldw	r4,4(r22)
    e190:	2084703a 	and	r2,r4,r2
    e194:	b03f7726 	beq	r22,zero,df74 <__alt_exception_stack_pointer+0xf800df74>
    e198:	80af883a 	add	r23,r16,r2
    e19c:	b8ff7516 	blt	r23,r3,df74 <__alt_exception_stack_pointer+0xf800df74>
    e1a0:	b0800317 	ldw	r2,12(r22)
    e1a4:	b0c00217 	ldw	r3,8(r22)
    e1a8:	81bfff04 	addi	r6,r16,-4
    e1ac:	01000904 	movi	r4,36
    e1b0:	18800315 	stw	r2,12(r3)
    e1b4:	10c00215 	stw	r3,8(r2)
    e1b8:	b4800204 	addi	r18,r22,8
    e1bc:	21bfe52e 	bgeu	r4,r6,e154 <__alt_exception_stack_pointer+0xf800e154>
    e1c0:	a80b883a 	mov	r5,r21
    e1c4:	9009883a 	mov	r4,r18
    e1c8:	000cb8c0 	call	cb8c <memmove>
    e1cc:	b821883a 	mov	r16,r23
    e1d0:	b027883a 	mov	r19,r22
    e1d4:	003f8a06 	br	e000 <__alt_exception_stack_pointer+0xf800e000>
    e1d8:	300b883a 	mov	r5,r6
    e1dc:	dfc00917 	ldw	ra,36(sp)
    e1e0:	df000817 	ldw	fp,32(sp)
    e1e4:	ddc00717 	ldw	r23,28(sp)
    e1e8:	dd800617 	ldw	r22,24(sp)
    e1ec:	dd400517 	ldw	r21,20(sp)
    e1f0:	dd000417 	ldw	r20,16(sp)
    e1f4:	dcc00317 	ldw	r19,12(sp)
    e1f8:	dc800217 	ldw	r18,8(sp)
    e1fc:	dc400117 	ldw	r17,4(sp)
    e200:	dc000017 	ldw	r16,0(sp)
    e204:	dec00a04 	addi	sp,sp,40
    e208:	0006df41 	jmpi	6df4 <_malloc_r>
    e20c:	a8c00017 	ldw	r3,0(r21)
    e210:	90c00015 	stw	r3,0(r18)
    e214:	a8c00117 	ldw	r3,4(r21)
    e218:	90c00115 	stw	r3,4(r18)
    e21c:	00c006c4 	movi	r3,27
    e220:	19804536 	bltu	r3,r6,e338 <_realloc_r+0x470>
    e224:	90800204 	addi	r2,r18,8
    e228:	a8c00204 	addi	r3,r21,8
    e22c:	003f6306 	br	dfbc <__alt_exception_stack_pointer+0xf800dfbc>
    e230:	9005883a 	mov	r2,r18
    e234:	a8c00017 	ldw	r3,0(r21)
    e238:	b821883a 	mov	r16,r23
    e23c:	b027883a 	mov	r19,r22
    e240:	10c00015 	stw	r3,0(r2)
    e244:	a8c00117 	ldw	r3,4(r21)
    e248:	10c00115 	stw	r3,4(r2)
    e24c:	a8c00217 	ldw	r3,8(r21)
    e250:	10c00215 	stw	r3,8(r2)
    e254:	003f6a06 	br	e000 <__alt_exception_stack_pointer+0xf800e000>
    e258:	9c67883a 	add	r19,r19,r17
    e25c:	4445c83a 	sub	r2,r8,r17
    e260:	e4c00215 	stw	r19,8(fp)
    e264:	10800054 	ori	r2,r2,1
    e268:	98800115 	stw	r2,4(r19)
    e26c:	a8bfff17 	ldw	r2,-4(r21)
    e270:	a009883a 	mov	r4,r20
    e274:	1080004c 	andi	r2,r2,1
    e278:	1462b03a 	or	r17,r2,r17
    e27c:	ac7fff15 	stw	r17,-4(r21)
    e280:	00123e80 	call	123e8 <__malloc_unlock>
    e284:	a805883a 	mov	r2,r21
    e288:	003f6b06 	br	e038 <__alt_exception_stack_pointer+0xf800e038>
    e28c:	a80b883a 	mov	r5,r21
    e290:	9009883a 	mov	r4,r18
    e294:	000cb8c0 	call	cb8c <memmove>
    e298:	003f4e06 	br	dfd4 <__alt_exception_stack_pointer+0xf800dfd4>
    e29c:	89000404 	addi	r4,r17,16
    e2a0:	b93fbc16 	blt	r23,r4,e194 <__alt_exception_stack_pointer+0xf800e194>
    e2a4:	b0800317 	ldw	r2,12(r22)
    e2a8:	b0c00217 	ldw	r3,8(r22)
    e2ac:	81bfff04 	addi	r6,r16,-4
    e2b0:	01000904 	movi	r4,36
    e2b4:	18800315 	stw	r2,12(r3)
    e2b8:	10c00215 	stw	r3,8(r2)
    e2bc:	b4800204 	addi	r18,r22,8
    e2c0:	21804336 	bltu	r4,r6,e3d0 <_realloc_r+0x508>
    e2c4:	008004c4 	movi	r2,19
    e2c8:	11803f2e 	bgeu	r2,r6,e3c8 <_realloc_r+0x500>
    e2cc:	a8800017 	ldw	r2,0(r21)
    e2d0:	b0800215 	stw	r2,8(r22)
    e2d4:	a8800117 	ldw	r2,4(r21)
    e2d8:	b0800315 	stw	r2,12(r22)
    e2dc:	008006c4 	movi	r2,27
    e2e0:	11803f36 	bltu	r2,r6,e3e0 <_realloc_r+0x518>
    e2e4:	b0800404 	addi	r2,r22,16
    e2e8:	ad400204 	addi	r21,r21,8
    e2ec:	a8c00017 	ldw	r3,0(r21)
    e2f0:	10c00015 	stw	r3,0(r2)
    e2f4:	a8c00117 	ldw	r3,4(r21)
    e2f8:	10c00115 	stw	r3,4(r2)
    e2fc:	a8c00217 	ldw	r3,8(r21)
    e300:	10c00215 	stw	r3,8(r2)
    e304:	b447883a 	add	r3,r22,r17
    e308:	bc45c83a 	sub	r2,r23,r17
    e30c:	e0c00215 	stw	r3,8(fp)
    e310:	10800054 	ori	r2,r2,1
    e314:	18800115 	stw	r2,4(r3)
    e318:	b0800117 	ldw	r2,4(r22)
    e31c:	a009883a 	mov	r4,r20
    e320:	1080004c 	andi	r2,r2,1
    e324:	1462b03a 	or	r17,r2,r17
    e328:	b4400115 	stw	r17,4(r22)
    e32c:	00123e80 	call	123e8 <__malloc_unlock>
    e330:	9005883a 	mov	r2,r18
    e334:	003f4006 	br	e038 <__alt_exception_stack_pointer+0xf800e038>
    e338:	a8c00217 	ldw	r3,8(r21)
    e33c:	90c00215 	stw	r3,8(r18)
    e340:	a8c00317 	ldw	r3,12(r21)
    e344:	90c00315 	stw	r3,12(r18)
    e348:	30801126 	beq	r6,r2,e390 <_realloc_r+0x4c8>
    e34c:	90800404 	addi	r2,r18,16
    e350:	a8c00404 	addi	r3,r21,16
    e354:	003f1906 	br	dfbc <__alt_exception_stack_pointer+0xf800dfbc>
    e358:	90ffff17 	ldw	r3,-4(r18)
    e35c:	00bfff04 	movi	r2,-4
    e360:	a825883a 	mov	r18,r21
    e364:	1884703a 	and	r2,r3,r2
    e368:	80a1883a 	add	r16,r16,r2
    e36c:	003f2406 	br	e000 <__alt_exception_stack_pointer+0xf800e000>
    e370:	a8800217 	ldw	r2,8(r21)
    e374:	b0800415 	stw	r2,16(r22)
    e378:	a8800317 	ldw	r2,12(r21)
    e37c:	b0800515 	stw	r2,20(r22)
    e380:	31000a26 	beq	r6,r4,e3ac <_realloc_r+0x4e4>
    e384:	b0800604 	addi	r2,r22,24
    e388:	ad400404 	addi	r21,r21,16
    e38c:	003fa906 	br	e234 <__alt_exception_stack_pointer+0xf800e234>
    e390:	a9000417 	ldw	r4,16(r21)
    e394:	90800604 	addi	r2,r18,24
    e398:	a8c00604 	addi	r3,r21,24
    e39c:	91000415 	stw	r4,16(r18)
    e3a0:	a9000517 	ldw	r4,20(r21)
    e3a4:	91000515 	stw	r4,20(r18)
    e3a8:	003f0406 	br	dfbc <__alt_exception_stack_pointer+0xf800dfbc>
    e3ac:	a8c00417 	ldw	r3,16(r21)
    e3b0:	ad400604 	addi	r21,r21,24
    e3b4:	b0800804 	addi	r2,r22,32
    e3b8:	b0c00615 	stw	r3,24(r22)
    e3bc:	a8ffff17 	ldw	r3,-4(r21)
    e3c0:	b0c00715 	stw	r3,28(r22)
    e3c4:	003f9b06 	br	e234 <__alt_exception_stack_pointer+0xf800e234>
    e3c8:	9005883a 	mov	r2,r18
    e3cc:	003fc706 	br	e2ec <__alt_exception_stack_pointer+0xf800e2ec>
    e3d0:	a80b883a 	mov	r5,r21
    e3d4:	9009883a 	mov	r4,r18
    e3d8:	000cb8c0 	call	cb8c <memmove>
    e3dc:	003fc906 	br	e304 <__alt_exception_stack_pointer+0xf800e304>
    e3e0:	a8800217 	ldw	r2,8(r21)
    e3e4:	b0800415 	stw	r2,16(r22)
    e3e8:	a8800317 	ldw	r2,12(r21)
    e3ec:	b0800515 	stw	r2,20(r22)
    e3f0:	31000726 	beq	r6,r4,e410 <_realloc_r+0x548>
    e3f4:	b0800604 	addi	r2,r22,24
    e3f8:	ad400404 	addi	r21,r21,16
    e3fc:	003fbb06 	br	e2ec <__alt_exception_stack_pointer+0xf800e2ec>
    e400:	a009883a 	mov	r4,r20
    e404:	00123e80 	call	123e8 <__malloc_unlock>
    e408:	0005883a 	mov	r2,zero
    e40c:	003f0a06 	br	e038 <__alt_exception_stack_pointer+0xf800e038>
    e410:	a8c00417 	ldw	r3,16(r21)
    e414:	ad400604 	addi	r21,r21,24
    e418:	b0800804 	addi	r2,r22,32
    e41c:	b0c00615 	stw	r3,24(r22)
    e420:	a8ffff17 	ldw	r3,-4(r21)
    e424:	b0c00715 	stw	r3,28(r22)
    e428:	003fb006 	br	e2ec <__alt_exception_stack_pointer+0xf800e2ec>

0000e42c <__fpclassifyd>:
    e42c:	00a00034 	movhi	r2,32768
    e430:	10bfffc4 	addi	r2,r2,-1
    e434:	2884703a 	and	r2,r5,r2
    e438:	10000726 	beq	r2,zero,e458 <__fpclassifyd+0x2c>
    e43c:	00fffc34 	movhi	r3,65520
    e440:	019ff834 	movhi	r6,32736
    e444:	28c7883a 	add	r3,r5,r3
    e448:	31bfffc4 	addi	r6,r6,-1
    e44c:	30c00536 	bltu	r6,r3,e464 <__fpclassifyd+0x38>
    e450:	00800104 	movi	r2,4
    e454:	f800283a 	ret
    e458:	2000021e 	bne	r4,zero,e464 <__fpclassifyd+0x38>
    e45c:	00800084 	movi	r2,2
    e460:	f800283a 	ret
    e464:	00dffc34 	movhi	r3,32752
    e468:	019ff834 	movhi	r6,32736
    e46c:	28cb883a 	add	r5,r5,r3
    e470:	31bfffc4 	addi	r6,r6,-1
    e474:	317ff62e 	bgeu	r6,r5,e450 <__alt_exception_stack_pointer+0xf800e450>
    e478:	01400434 	movhi	r5,16
    e47c:	297fffc4 	addi	r5,r5,-1
    e480:	28800236 	bltu	r5,r2,e48c <__fpclassifyd+0x60>
    e484:	008000c4 	movi	r2,3
    e488:	f800283a 	ret
    e48c:	10c00226 	beq	r2,r3,e498 <__fpclassifyd+0x6c>
    e490:	0005883a 	mov	r2,zero
    e494:	f800283a 	ret
    e498:	2005003a 	cmpeq	r2,r4,zero
    e49c:	f800283a 	ret

0000e4a0 <__sread>:
    e4a0:	defffe04 	addi	sp,sp,-8
    e4a4:	dc000015 	stw	r16,0(sp)
    e4a8:	2821883a 	mov	r16,r5
    e4ac:	2940038f 	ldh	r5,14(r5)
    e4b0:	dfc00115 	stw	ra,4(sp)
    e4b4:	001035c0 	call	1035c <_read_r>
    e4b8:	10000716 	blt	r2,zero,e4d8 <__sread+0x38>
    e4bc:	80c01417 	ldw	r3,80(r16)
    e4c0:	1887883a 	add	r3,r3,r2
    e4c4:	80c01415 	stw	r3,80(r16)
    e4c8:	dfc00117 	ldw	ra,4(sp)
    e4cc:	dc000017 	ldw	r16,0(sp)
    e4d0:	dec00204 	addi	sp,sp,8
    e4d4:	f800283a 	ret
    e4d8:	80c0030b 	ldhu	r3,12(r16)
    e4dc:	18fbffcc 	andi	r3,r3,61439
    e4e0:	80c0030d 	sth	r3,12(r16)
    e4e4:	dfc00117 	ldw	ra,4(sp)
    e4e8:	dc000017 	ldw	r16,0(sp)
    e4ec:	dec00204 	addi	sp,sp,8
    e4f0:	f800283a 	ret

0000e4f4 <__seofread>:
    e4f4:	0005883a 	mov	r2,zero
    e4f8:	f800283a 	ret

0000e4fc <__swrite>:
    e4fc:	2880030b 	ldhu	r2,12(r5)
    e500:	defffb04 	addi	sp,sp,-20
    e504:	dcc00315 	stw	r19,12(sp)
    e508:	dc800215 	stw	r18,8(sp)
    e50c:	dc400115 	stw	r17,4(sp)
    e510:	dc000015 	stw	r16,0(sp)
    e514:	dfc00415 	stw	ra,16(sp)
    e518:	10c0400c 	andi	r3,r2,256
    e51c:	2821883a 	mov	r16,r5
    e520:	2023883a 	mov	r17,r4
    e524:	3025883a 	mov	r18,r6
    e528:	3827883a 	mov	r19,r7
    e52c:	18000526 	beq	r3,zero,e544 <__swrite+0x48>
    e530:	2940038f 	ldh	r5,14(r5)
    e534:	01c00084 	movi	r7,2
    e538:	000d883a 	mov	r6,zero
    e53c:	00102fc0 	call	102fc <_lseek_r>
    e540:	8080030b 	ldhu	r2,12(r16)
    e544:	8140038f 	ldh	r5,14(r16)
    e548:	10bbffcc 	andi	r2,r2,61439
    e54c:	980f883a 	mov	r7,r19
    e550:	900d883a 	mov	r6,r18
    e554:	8809883a 	mov	r4,r17
    e558:	8080030d 	sth	r2,12(r16)
    e55c:	dfc00417 	ldw	ra,16(sp)
    e560:	dcc00317 	ldw	r19,12(sp)
    e564:	dc800217 	ldw	r18,8(sp)
    e568:	dc400117 	ldw	r17,4(sp)
    e56c:	dc000017 	ldw	r16,0(sp)
    e570:	dec00504 	addi	sp,sp,20
    e574:	000fdb01 	jmpi	fdb0 <_write_r>

0000e578 <__sseek>:
    e578:	defffe04 	addi	sp,sp,-8
    e57c:	dc000015 	stw	r16,0(sp)
    e580:	2821883a 	mov	r16,r5
    e584:	2940038f 	ldh	r5,14(r5)
    e588:	dfc00115 	stw	ra,4(sp)
    e58c:	00102fc0 	call	102fc <_lseek_r>
    e590:	00ffffc4 	movi	r3,-1
    e594:	10c00826 	beq	r2,r3,e5b8 <__sseek+0x40>
    e598:	80c0030b 	ldhu	r3,12(r16)
    e59c:	80801415 	stw	r2,80(r16)
    e5a0:	18c40014 	ori	r3,r3,4096
    e5a4:	80c0030d 	sth	r3,12(r16)
    e5a8:	dfc00117 	ldw	ra,4(sp)
    e5ac:	dc000017 	ldw	r16,0(sp)
    e5b0:	dec00204 	addi	sp,sp,8
    e5b4:	f800283a 	ret
    e5b8:	80c0030b 	ldhu	r3,12(r16)
    e5bc:	18fbffcc 	andi	r3,r3,61439
    e5c0:	80c0030d 	sth	r3,12(r16)
    e5c4:	dfc00117 	ldw	ra,4(sp)
    e5c8:	dc000017 	ldw	r16,0(sp)
    e5cc:	dec00204 	addi	sp,sp,8
    e5d0:	f800283a 	ret

0000e5d4 <__sclose>:
    e5d4:	2940038f 	ldh	r5,14(r5)
    e5d8:	000fe101 	jmpi	fe10 <_close_r>

0000e5dc <strcmp>:
    e5dc:	2144b03a 	or	r2,r4,r5
    e5e0:	108000cc 	andi	r2,r2,3
    e5e4:	1000171e 	bne	r2,zero,e644 <strcmp+0x68>
    e5e8:	20800017 	ldw	r2,0(r4)
    e5ec:	28c00017 	ldw	r3,0(r5)
    e5f0:	10c0141e 	bne	r2,r3,e644 <strcmp+0x68>
    e5f4:	027fbff4 	movhi	r9,65279
    e5f8:	4a7fbfc4 	addi	r9,r9,-257
    e5fc:	0086303a 	nor	r3,zero,r2
    e600:	02202074 	movhi	r8,32897
    e604:	1245883a 	add	r2,r2,r9
    e608:	42202004 	addi	r8,r8,-32640
    e60c:	10c4703a 	and	r2,r2,r3
    e610:	1204703a 	and	r2,r2,r8
    e614:	10000226 	beq	r2,zero,e620 <strcmp+0x44>
    e618:	00002306 	br	e6a8 <strcmp+0xcc>
    e61c:	1000221e 	bne	r2,zero,e6a8 <strcmp+0xcc>
    e620:	21000104 	addi	r4,r4,4
    e624:	20c00017 	ldw	r3,0(r4)
    e628:	29400104 	addi	r5,r5,4
    e62c:	29800017 	ldw	r6,0(r5)
    e630:	1a4f883a 	add	r7,r3,r9
    e634:	00c4303a 	nor	r2,zero,r3
    e638:	3884703a 	and	r2,r7,r2
    e63c:	1204703a 	and	r2,r2,r8
    e640:	19bff626 	beq	r3,r6,e61c <__alt_exception_stack_pointer+0xf800e61c>
    e644:	20800003 	ldbu	r2,0(r4)
    e648:	10c03fcc 	andi	r3,r2,255
    e64c:	18c0201c 	xori	r3,r3,128
    e650:	18ffe004 	addi	r3,r3,-128
    e654:	18000c26 	beq	r3,zero,e688 <strcmp+0xac>
    e658:	29800007 	ldb	r6,0(r5)
    e65c:	19800326 	beq	r3,r6,e66c <strcmp+0x90>
    e660:	00001306 	br	e6b0 <strcmp+0xd4>
    e664:	29800007 	ldb	r6,0(r5)
    e668:	11800b1e 	bne	r2,r6,e698 <strcmp+0xbc>
    e66c:	21000044 	addi	r4,r4,1
    e670:	20c00003 	ldbu	r3,0(r4)
    e674:	29400044 	addi	r5,r5,1
    e678:	18803fcc 	andi	r2,r3,255
    e67c:	1080201c 	xori	r2,r2,128
    e680:	10bfe004 	addi	r2,r2,-128
    e684:	103ff71e 	bne	r2,zero,e664 <__alt_exception_stack_pointer+0xf800e664>
    e688:	0007883a 	mov	r3,zero
    e68c:	28800003 	ldbu	r2,0(r5)
    e690:	1885c83a 	sub	r2,r3,r2
    e694:	f800283a 	ret
    e698:	28800003 	ldbu	r2,0(r5)
    e69c:	18c03fcc 	andi	r3,r3,255
    e6a0:	1885c83a 	sub	r2,r3,r2
    e6a4:	f800283a 	ret
    e6a8:	0005883a 	mov	r2,zero
    e6ac:	f800283a 	ret
    e6b0:	10c03fcc 	andi	r3,r2,255
    e6b4:	003ff506 	br	e68c <__alt_exception_stack_pointer+0xf800e68c>

0000e6b8 <__sprint_r.part.0>:
    e6b8:	28801917 	ldw	r2,100(r5)
    e6bc:	defff604 	addi	sp,sp,-40
    e6c0:	dd400515 	stw	r21,20(sp)
    e6c4:	dfc00915 	stw	ra,36(sp)
    e6c8:	df000815 	stw	fp,32(sp)
    e6cc:	ddc00715 	stw	r23,28(sp)
    e6d0:	dd800615 	stw	r22,24(sp)
    e6d4:	dd000415 	stw	r20,16(sp)
    e6d8:	dcc00315 	stw	r19,12(sp)
    e6dc:	dc800215 	stw	r18,8(sp)
    e6e0:	dc400115 	stw	r17,4(sp)
    e6e4:	dc000015 	stw	r16,0(sp)
    e6e8:	1088000c 	andi	r2,r2,8192
    e6ec:	302b883a 	mov	r21,r6
    e6f0:	10002e26 	beq	r2,zero,e7ac <__sprint_r.part.0+0xf4>
    e6f4:	30800217 	ldw	r2,8(r6)
    e6f8:	35800017 	ldw	r22,0(r6)
    e6fc:	10002926 	beq	r2,zero,e7a4 <__sprint_r.part.0+0xec>
    e700:	2827883a 	mov	r19,r5
    e704:	2029883a 	mov	r20,r4
    e708:	b5c00104 	addi	r23,r22,4
    e70c:	04bfffc4 	movi	r18,-1
    e710:	bc400017 	ldw	r17,0(r23)
    e714:	b4000017 	ldw	r16,0(r22)
    e718:	0039883a 	mov	fp,zero
    e71c:	8822d0ba 	srli	r17,r17,2
    e720:	8800031e 	bne	r17,zero,e730 <__sprint_r.part.0+0x78>
    e724:	00001806 	br	e788 <__sprint_r.part.0+0xd0>
    e728:	84000104 	addi	r16,r16,4
    e72c:	8f001526 	beq	r17,fp,e784 <__sprint_r.part.0+0xcc>
    e730:	81400017 	ldw	r5,0(r16)
    e734:	980d883a 	mov	r6,r19
    e738:	a009883a 	mov	r4,r20
    e73c:	00101a80 	call	101a8 <_fputwc_r>
    e740:	e7000044 	addi	fp,fp,1
    e744:	14bff81e 	bne	r2,r18,e728 <__alt_exception_stack_pointer+0xf800e728>
    e748:	9005883a 	mov	r2,r18
    e74c:	a8000215 	stw	zero,8(r21)
    e750:	a8000115 	stw	zero,4(r21)
    e754:	dfc00917 	ldw	ra,36(sp)
    e758:	df000817 	ldw	fp,32(sp)
    e75c:	ddc00717 	ldw	r23,28(sp)
    e760:	dd800617 	ldw	r22,24(sp)
    e764:	dd400517 	ldw	r21,20(sp)
    e768:	dd000417 	ldw	r20,16(sp)
    e76c:	dcc00317 	ldw	r19,12(sp)
    e770:	dc800217 	ldw	r18,8(sp)
    e774:	dc400117 	ldw	r17,4(sp)
    e778:	dc000017 	ldw	r16,0(sp)
    e77c:	dec00a04 	addi	sp,sp,40
    e780:	f800283a 	ret
    e784:	a8800217 	ldw	r2,8(r21)
    e788:	8c63883a 	add	r17,r17,r17
    e78c:	8c63883a 	add	r17,r17,r17
    e790:	1445c83a 	sub	r2,r2,r17
    e794:	a8800215 	stw	r2,8(r21)
    e798:	b5800204 	addi	r22,r22,8
    e79c:	bdc00204 	addi	r23,r23,8
    e7a0:	103fdb1e 	bne	r2,zero,e710 <__alt_exception_stack_pointer+0xf800e710>
    e7a4:	0005883a 	mov	r2,zero
    e7a8:	003fe806 	br	e74c <__alt_exception_stack_pointer+0xf800e74c>
    e7ac:	000c1c00 	call	c1c0 <__sfvwrite_r>
    e7b0:	003fe606 	br	e74c <__alt_exception_stack_pointer+0xf800e74c>

0000e7b4 <__sprint_r>:
    e7b4:	30c00217 	ldw	r3,8(r6)
    e7b8:	18000126 	beq	r3,zero,e7c0 <__sprint_r+0xc>
    e7bc:	000e6b81 	jmpi	e6b8 <__sprint_r.part.0>
    e7c0:	30000115 	stw	zero,4(r6)
    e7c4:	0005883a 	mov	r2,zero
    e7c8:	f800283a 	ret

0000e7cc <___vfiprintf_internal_r>:
    e7cc:	deffca04 	addi	sp,sp,-216
    e7d0:	dd403115 	stw	r21,196(sp)
    e7d4:	dfc03515 	stw	ra,212(sp)
    e7d8:	df003415 	stw	fp,208(sp)
    e7dc:	ddc03315 	stw	r23,204(sp)
    e7e0:	dd803215 	stw	r22,200(sp)
    e7e4:	dd003015 	stw	r20,192(sp)
    e7e8:	dcc02f15 	stw	r19,188(sp)
    e7ec:	dc802e15 	stw	r18,184(sp)
    e7f0:	dc402d15 	stw	r17,180(sp)
    e7f4:	dc002c15 	stw	r16,176(sp)
    e7f8:	d9002115 	stw	r4,132(sp)
    e7fc:	d9402015 	stw	r5,128(sp)
    e800:	d9c02215 	stw	r7,136(sp)
    e804:	302b883a 	mov	r21,r6
    e808:	20000226 	beq	r4,zero,e814 <___vfiprintf_internal_r+0x48>
    e80c:	20800e17 	ldw	r2,56(r4)
    e810:	1000cf26 	beq	r2,zero,eb50 <___vfiprintf_internal_r+0x384>
    e814:	d8c02017 	ldw	r3,128(sp)
    e818:	1880030b 	ldhu	r2,12(r3)
    e81c:	10c8000c 	andi	r3,r2,8192
    e820:	1800071e 	bne	r3,zero,e840 <___vfiprintf_internal_r+0x74>
    e824:	d9402017 	ldw	r5,128(sp)
    e828:	00f7ffc4 	movi	r3,-8193
    e82c:	10880014 	ori	r2,r2,8192
    e830:	29001917 	ldw	r4,100(r5)
    e834:	2880030d 	sth	r2,12(r5)
    e838:	20c6703a 	and	r3,r4,r3
    e83c:	28c01915 	stw	r3,100(r5)
    e840:	10c0020c 	andi	r3,r2,8
    e844:	1800a526 	beq	r3,zero,eadc <___vfiprintf_internal_r+0x310>
    e848:	d9002017 	ldw	r4,128(sp)
    e84c:	20c00417 	ldw	r3,16(r4)
    e850:	1800a226 	beq	r3,zero,eadc <___vfiprintf_internal_r+0x310>
    e854:	1080068c 	andi	r2,r2,26
    e858:	00c00284 	movi	r3,10
    e85c:	10c0a826 	beq	r2,r3,eb00 <___vfiprintf_internal_r+0x334>
    e860:	d9001a04 	addi	r4,sp,104
    e864:	d94019c4 	addi	r5,sp,103
    e868:	04800074 	movhi	r18,1
    e86c:	2145c83a 	sub	r2,r4,r5
    e870:	9495dc04 	addi	r18,r18,22384
    e874:	d9001e15 	stw	r4,120(sp)
    e878:	d9401f15 	stw	r5,124(sp)
    e87c:	dec01a15 	stw	sp,104(sp)
    e880:	d8001c15 	stw	zero,112(sp)
    e884:	d8001b15 	stw	zero,108(sp)
    e888:	d811883a 	mov	r8,sp
    e88c:	d8002615 	stw	zero,152(sp)
    e890:	d8002415 	stw	zero,144(sp)
    e894:	d8802815 	stw	r2,160(sp)
    e898:	a82d883a 	mov	r22,r21
    e89c:	b0800007 	ldb	r2,0(r22)
    e8a0:	10040d26 	beq	r2,zero,f8d8 <___vfiprintf_internal_r+0x110c>
    e8a4:	00c00944 	movi	r3,37
    e8a8:	b029883a 	mov	r20,r22
    e8ac:	10c0021e 	bne	r2,r3,e8b8 <___vfiprintf_internal_r+0xec>
    e8b0:	00001606 	br	e90c <___vfiprintf_internal_r+0x140>
    e8b4:	10c00326 	beq	r2,r3,e8c4 <___vfiprintf_internal_r+0xf8>
    e8b8:	a5000044 	addi	r20,r20,1
    e8bc:	a0800007 	ldb	r2,0(r20)
    e8c0:	103ffc1e 	bne	r2,zero,e8b4 <__alt_exception_stack_pointer+0xf800e8b4>
    e8c4:	a5a1c83a 	sub	r16,r20,r22
    e8c8:	80001026 	beq	r16,zero,e90c <___vfiprintf_internal_r+0x140>
    e8cc:	d8c01c17 	ldw	r3,112(sp)
    e8d0:	d8801b17 	ldw	r2,108(sp)
    e8d4:	45800015 	stw	r22,0(r8)
    e8d8:	80c7883a 	add	r3,r16,r3
    e8dc:	10800044 	addi	r2,r2,1
    e8e0:	44000115 	stw	r16,4(r8)
    e8e4:	d8c01c15 	stw	r3,112(sp)
    e8e8:	d8801b15 	stw	r2,108(sp)
    e8ec:	010001c4 	movi	r4,7
    e8f0:	2080750e 	bge	r4,r2,eac8 <___vfiprintf_internal_r+0x2fc>
    e8f4:	1803951e 	bne	r3,zero,f74c <___vfiprintf_internal_r+0xf80>
    e8f8:	d8c02417 	ldw	r3,144(sp)
    e8fc:	d8001b15 	stw	zero,108(sp)
    e900:	d811883a 	mov	r8,sp
    e904:	1c07883a 	add	r3,r3,r16
    e908:	d8c02415 	stw	r3,144(sp)
    e90c:	a0800007 	ldb	r2,0(r20)
    e910:	1002e026 	beq	r2,zero,f494 <___vfiprintf_internal_r+0xcc8>
    e914:	a5800044 	addi	r22,r20,1
    e918:	a0c00047 	ldb	r3,1(r20)
    e91c:	d8001d85 	stb	zero,118(sp)
    e920:	0027883a 	mov	r19,zero
    e924:	d8002305 	stb	zero,140(sp)
    e928:	043fffc4 	movi	r16,-1
    e92c:	d8002515 	stw	zero,148(sp)
    e930:	0023883a 	mov	r17,zero
    e934:	05001604 	movi	r20,88
    e938:	05400244 	movi	r21,9
    e93c:	402f883a 	mov	r23,r8
    e940:	b5800044 	addi	r22,r22,1
    e944:	18bff804 	addi	r2,r3,-32
    e948:	a0827736 	bltu	r20,r2,f328 <___vfiprintf_internal_r+0xb5c>
    e94c:	100490ba 	slli	r2,r2,2
    e950:	01000074 	movhi	r4,1
    e954:	213a5904 	addi	r4,r4,-5788
    e958:	1105883a 	add	r2,r2,r4
    e95c:	10800017 	ldw	r2,0(r2)
    e960:	1000683a 	jmp	r2
    e964:	0000f028 	cmpgeui	zero,zero,960
    e968:	0000f328 	cmpgeui	zero,zero,972
    e96c:	0000f328 	cmpgeui	zero,zero,972
    e970:	0000f044 	movi	zero,961
    e974:	0000f328 	cmpgeui	zero,zero,972
    e978:	0000f328 	cmpgeui	zero,zero,972
    e97c:	0000f328 	cmpgeui	zero,zero,972
    e980:	0000f328 	cmpgeui	zero,zero,972
    e984:	0000f328 	cmpgeui	zero,zero,972
    e988:	0000f328 	cmpgeui	zero,zero,972
    e98c:	0000f24c 	andi	zero,zero,969
    e990:	0000f270 	cmpltui	zero,zero,969
    e994:	0000f328 	cmpgeui	zero,zero,972
    e998:	0000eb68 	cmpgeui	zero,zero,941
    e99c:	0000f284 	movi	zero,970
    e9a0:	0000f328 	cmpgeui	zero,zero,972
    e9a4:	0000f050 	cmplti	zero,zero,961
    e9a8:	0000f05c 	xori	zero,zero,961
    e9ac:	0000f05c 	xori	zero,zero,961
    e9b0:	0000f05c 	xori	zero,zero,961
    e9b4:	0000f05c 	xori	zero,zero,961
    e9b8:	0000f05c 	xori	zero,zero,961
    e9bc:	0000f05c 	xori	zero,zero,961
    e9c0:	0000f05c 	xori	zero,zero,961
    e9c4:	0000f05c 	xori	zero,zero,961
    e9c8:	0000f05c 	xori	zero,zero,961
    e9cc:	0000f328 	cmpgeui	zero,zero,972
    e9d0:	0000f328 	cmpgeui	zero,zero,972
    e9d4:	0000f328 	cmpgeui	zero,zero,972
    e9d8:	0000f328 	cmpgeui	zero,zero,972
    e9dc:	0000f328 	cmpgeui	zero,zero,972
    e9e0:	0000f328 	cmpgeui	zero,zero,972
    e9e4:	0000f328 	cmpgeui	zero,zero,972
    e9e8:	0000f328 	cmpgeui	zero,zero,972
    e9ec:	0000f328 	cmpgeui	zero,zero,972
    e9f0:	0000f328 	cmpgeui	zero,zero,972
    e9f4:	0000f09c 	xori	zero,zero,962
    e9f8:	0000f328 	cmpgeui	zero,zero,972
    e9fc:	0000f328 	cmpgeui	zero,zero,972
    ea00:	0000f328 	cmpgeui	zero,zero,972
    ea04:	0000f328 	cmpgeui	zero,zero,972
    ea08:	0000f328 	cmpgeui	zero,zero,972
    ea0c:	0000f328 	cmpgeui	zero,zero,972
    ea10:	0000f328 	cmpgeui	zero,zero,972
    ea14:	0000f328 	cmpgeui	zero,zero,972
    ea18:	0000f328 	cmpgeui	zero,zero,972
    ea1c:	0000f328 	cmpgeui	zero,zero,972
    ea20:	0000f0d8 	cmpnei	zero,zero,963
    ea24:	0000f328 	cmpgeui	zero,zero,972
    ea28:	0000f328 	cmpgeui	zero,zero,972
    ea2c:	0000f328 	cmpgeui	zero,zero,972
    ea30:	0000f328 	cmpgeui	zero,zero,972
    ea34:	0000f328 	cmpgeui	zero,zero,972
    ea38:	0000f134 	movhi	zero,964
    ea3c:	0000f328 	cmpgeui	zero,zero,972
    ea40:	0000f328 	cmpgeui	zero,zero,972
    ea44:	0000f1a8 	cmpgeui	zero,zero,966
    ea48:	0000f328 	cmpgeui	zero,zero,972
    ea4c:	0000f328 	cmpgeui	zero,zero,972
    ea50:	0000f328 	cmpgeui	zero,zero,972
    ea54:	0000f328 	cmpgeui	zero,zero,972
    ea58:	0000f328 	cmpgeui	zero,zero,972
    ea5c:	0000f328 	cmpgeui	zero,zero,972
    ea60:	0000f328 	cmpgeui	zero,zero,972
    ea64:	0000f328 	cmpgeui	zero,zero,972
    ea68:	0000f328 	cmpgeui	zero,zero,972
    ea6c:	0000f328 	cmpgeui	zero,zero,972
    ea70:	0000ef50 	cmplti	zero,zero,957
    ea74:	0000ef80 	call	ef8 <init_keyboard+0x7c8>
    ea78:	0000f328 	cmpgeui	zero,zero,972
    ea7c:	0000f328 	cmpgeui	zero,zero,972
    ea80:	0000f328 	cmpgeui	zero,zero,972
    ea84:	0000f2d0 	cmplti	zero,zero,971
    ea88:	0000ef80 	call	ef8 <init_keyboard+0x7c8>
    ea8c:	0000f328 	cmpgeui	zero,zero,972
    ea90:	0000f328 	cmpgeui	zero,zero,972
    ea94:	0000ee28 	cmpgeui	zero,zero,952
    ea98:	0000f328 	cmpgeui	zero,zero,972
    ea9c:	0000ee3c 	xorhi	zero,zero,952
    eaa0:	0000ee74 	movhi	zero,953
    eaa4:	0000eb74 	movhi	zero,941
    eaa8:	0000ee1c 	xori	zero,zero,952
    eaac:	0000f328 	cmpgeui	zero,zero,972
    eab0:	0000f1e8 	cmpgeui	zero,zero,967
    eab4:	0000f328 	cmpgeui	zero,zero,972
    eab8:	0000f234 	movhi	zero,968
    eabc:	0000f328 	cmpgeui	zero,zero,972
    eac0:	0000f328 	cmpgeui	zero,zero,972
    eac4:	0000eef8 	rdprs	zero,zero,955
    eac8:	42000204 	addi	r8,r8,8
    eacc:	d8c02417 	ldw	r3,144(sp)
    ead0:	1c07883a 	add	r3,r3,r16
    ead4:	d8c02415 	stw	r3,144(sp)
    ead8:	003f8c06 	br	e90c <__alt_exception_stack_pointer+0xf800e90c>
    eadc:	d9402017 	ldw	r5,128(sp)
    eae0:	d9002117 	ldw	r4,132(sp)
    eae4:	0009d300 	call	9d30 <__swsetup_r>
    eae8:	1003c11e 	bne	r2,zero,f9f0 <___vfiprintf_internal_r+0x1224>
    eaec:	d9402017 	ldw	r5,128(sp)
    eaf0:	00c00284 	movi	r3,10
    eaf4:	2880030b 	ldhu	r2,12(r5)
    eaf8:	1080068c 	andi	r2,r2,26
    eafc:	10ff581e 	bne	r2,r3,e860 <__alt_exception_stack_pointer+0xf800e860>
    eb00:	d8c02017 	ldw	r3,128(sp)
    eb04:	1880038f 	ldh	r2,14(r3)
    eb08:	103f5516 	blt	r2,zero,e860 <__alt_exception_stack_pointer+0xf800e860>
    eb0c:	d9c02217 	ldw	r7,136(sp)
    eb10:	d9002117 	ldw	r4,132(sp)
    eb14:	a80d883a 	mov	r6,r21
    eb18:	180b883a 	mov	r5,r3
    eb1c:	000fcf40 	call	fcf4 <__sbprintf>
    eb20:	dfc03517 	ldw	ra,212(sp)
    eb24:	df003417 	ldw	fp,208(sp)
    eb28:	ddc03317 	ldw	r23,204(sp)
    eb2c:	dd803217 	ldw	r22,200(sp)
    eb30:	dd403117 	ldw	r21,196(sp)
    eb34:	dd003017 	ldw	r20,192(sp)
    eb38:	dcc02f17 	ldw	r19,188(sp)
    eb3c:	dc802e17 	ldw	r18,184(sp)
    eb40:	dc402d17 	ldw	r17,180(sp)
    eb44:	dc002c17 	ldw	r16,176(sp)
    eb48:	dec03604 	addi	sp,sp,216
    eb4c:	f800283a 	ret
    eb50:	000bd3c0 	call	bd3c <__sinit>
    eb54:	003f2f06 	br	e814 <__alt_exception_stack_pointer+0xf800e814>
    eb58:	d8c02517 	ldw	r3,148(sp)
    eb5c:	d8802215 	stw	r2,136(sp)
    eb60:	00c7c83a 	sub	r3,zero,r3
    eb64:	d8c02515 	stw	r3,148(sp)
    eb68:	8c400114 	ori	r17,r17,4
    eb6c:	b0c00007 	ldb	r3,0(r22)
    eb70:	003f7306 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    eb74:	00800c04 	movi	r2,48
    eb78:	d9402217 	ldw	r5,136(sp)
    eb7c:	d8801d05 	stb	r2,116(sp)
    eb80:	00801e04 	movi	r2,120
    eb84:	d8801d45 	stb	r2,117(sp)
    eb88:	d8001d85 	stb	zero,118(sp)
    eb8c:	b811883a 	mov	r8,r23
    eb90:	28c00104 	addi	r3,r5,4
    eb94:	2cc00017 	ldw	r19,0(r5)
    eb98:	0029883a 	mov	r20,zero
    eb9c:	88800094 	ori	r2,r17,2
    eba0:	80032516 	blt	r16,zero,f838 <___vfiprintf_internal_r+0x106c>
    eba4:	00bfdfc4 	movi	r2,-129
    eba8:	88a2703a 	and	r17,r17,r2
    ebac:	d8c02215 	stw	r3,136(sp)
    ebb0:	8c400094 	ori	r17,r17,2
    ebb4:	98032a1e 	bne	r19,zero,f860 <___vfiprintf_internal_r+0x1094>
    ebb8:	00800074 	movhi	r2,1
    ebbc:	10957c04 	addi	r2,r2,22000
    ebc0:	d8802615 	stw	r2,152(sp)
    ebc4:	002b883a 	mov	r21,zero
    ebc8:	8001741e 	bne	r16,zero,f19c <___vfiprintf_internal_r+0x9d0>
    ebcc:	0021883a 	mov	r16,zero
    ebd0:	0029883a 	mov	r20,zero
    ebd4:	ddc01a04 	addi	r23,sp,104
    ebd8:	8027883a 	mov	r19,r16
    ebdc:	8500010e 	bge	r16,r20,ebe4 <___vfiprintf_internal_r+0x418>
    ebe0:	a027883a 	mov	r19,r20
    ebe4:	ad403fcc 	andi	r21,r21,255
    ebe8:	ad40201c 	xori	r21,r21,128
    ebec:	ad7fe004 	addi	r21,r21,-128
    ebf0:	a8000126 	beq	r21,zero,ebf8 <___vfiprintf_internal_r+0x42c>
    ebf4:	9cc00044 	addi	r19,r19,1
    ebf8:	89c0008c 	andi	r7,r17,2
    ebfc:	38000126 	beq	r7,zero,ec04 <___vfiprintf_internal_r+0x438>
    ec00:	9cc00084 	addi	r19,r19,2
    ec04:	88c0210c 	andi	r3,r17,132
    ec08:	1801dd1e 	bne	r3,zero,f380 <___vfiprintf_internal_r+0xbb4>
    ec0c:	d9402517 	ldw	r5,148(sp)
    ec10:	2cebc83a 	sub	r21,r5,r19
    ec14:	0541da0e 	bge	zero,r21,f380 <___vfiprintf_internal_r+0xbb4>
    ec18:	07000404 	movi	fp,16
    ec1c:	d8801c17 	ldw	r2,112(sp)
    ec20:	e543be0e 	bge	fp,r21,fb1c <___vfiprintf_internal_r+0x1350>
    ec24:	01400074 	movhi	r5,1
    ec28:	2955e004 	addi	r5,r5,22400
    ec2c:	dc002715 	stw	r16,156(sp)
    ec30:	d9801b17 	ldw	r6,108(sp)
    ec34:	a821883a 	mov	r16,r21
    ec38:	d9402315 	stw	r5,140(sp)
    ec3c:	028001c4 	movi	r10,7
    ec40:	d9c02915 	stw	r7,164(sp)
    ec44:	182b883a 	mov	r21,r3
    ec48:	00000506 	br	ec60 <___vfiprintf_internal_r+0x494>
    ec4c:	31000084 	addi	r4,r6,2
    ec50:	42000204 	addi	r8,r8,8
    ec54:	180d883a 	mov	r6,r3
    ec58:	843ffc04 	addi	r16,r16,-16
    ec5c:	e4000f0e 	bge	fp,r16,ec9c <___vfiprintf_internal_r+0x4d0>
    ec60:	01000074 	movhi	r4,1
    ec64:	10800404 	addi	r2,r2,16
    ec68:	30c00044 	addi	r3,r6,1
    ec6c:	2115e004 	addi	r4,r4,22400
    ec70:	41000015 	stw	r4,0(r8)
    ec74:	47000115 	stw	fp,4(r8)
    ec78:	d8801c15 	stw	r2,112(sp)
    ec7c:	d8c01b15 	stw	r3,108(sp)
    ec80:	50fff20e 	bge	r10,r3,ec4c <__alt_exception_stack_pointer+0xf800ec4c>
    ec84:	1001b21e 	bne	r2,zero,f350 <___vfiprintf_internal_r+0xb84>
    ec88:	843ffc04 	addi	r16,r16,-16
    ec8c:	000d883a 	mov	r6,zero
    ec90:	01000044 	movi	r4,1
    ec94:	d811883a 	mov	r8,sp
    ec98:	e43ff116 	blt	fp,r16,ec60 <__alt_exception_stack_pointer+0xf800ec60>
    ec9c:	a807883a 	mov	r3,r21
    eca0:	d9c02917 	ldw	r7,164(sp)
    eca4:	802b883a 	mov	r21,r16
    eca8:	dc002717 	ldw	r16,156(sp)
    ecac:	d9402317 	ldw	r5,140(sp)
    ecb0:	a885883a 	add	r2,r21,r2
    ecb4:	45400115 	stw	r21,4(r8)
    ecb8:	41400015 	stw	r5,0(r8)
    ecbc:	d8801c15 	stw	r2,112(sp)
    ecc0:	d9001b15 	stw	r4,108(sp)
    ecc4:	014001c4 	movi	r5,7
    ecc8:	29026216 	blt	r5,r4,f654 <___vfiprintf_internal_r+0xe88>
    eccc:	d9801d87 	ldb	r6,118(sp)
    ecd0:	42000204 	addi	r8,r8,8
    ecd4:	21400044 	addi	r5,r4,1
    ecd8:	3001ae1e 	bne	r6,zero,f394 <___vfiprintf_internal_r+0xbc8>
    ecdc:	3801bb26 	beq	r7,zero,f3cc <___vfiprintf_internal_r+0xc00>
    ece0:	d9001d04 	addi	r4,sp,116
    ece4:	10800084 	addi	r2,r2,2
    ece8:	41000015 	stw	r4,0(r8)
    ecec:	01000084 	movi	r4,2
    ecf0:	41000115 	stw	r4,4(r8)
    ecf4:	d8801c15 	stw	r2,112(sp)
    ecf8:	d9401b15 	stw	r5,108(sp)
    ecfc:	010001c4 	movi	r4,7
    ed00:	2142680e 	bge	r4,r5,f6a4 <___vfiprintf_internal_r+0xed8>
    ed04:	1002b11e 	bne	r2,zero,f7cc <___vfiprintf_internal_r+0x1000>
    ed08:	01802004 	movi	r6,128
    ed0c:	01400044 	movi	r5,1
    ed10:	0009883a 	mov	r4,zero
    ed14:	d811883a 	mov	r8,sp
    ed18:	1981ae1e 	bne	r3,r6,f3d4 <___vfiprintf_internal_r+0xc08>
    ed1c:	d8c02517 	ldw	r3,148(sp)
    ed20:	1cf9c83a 	sub	fp,r3,r19
    ed24:	0701ab0e 	bge	zero,fp,f3d4 <___vfiprintf_internal_r+0xc08>
    ed28:	05400404 	movi	r21,16
    ed2c:	af03a90e 	bge	r21,fp,fbd4 <___vfiprintf_internal_r+0x1408>
    ed30:	01400074 	movhi	r5,1
    ed34:	2955dc04 	addi	r5,r5,22384
    ed38:	d9402315 	stw	r5,140(sp)
    ed3c:	01c001c4 	movi	r7,7
    ed40:	00000506 	br	ed58 <___vfiprintf_internal_r+0x58c>
    ed44:	21800084 	addi	r6,r4,2
    ed48:	42000204 	addi	r8,r8,8
    ed4c:	1809883a 	mov	r4,r3
    ed50:	e73ffc04 	addi	fp,fp,-16
    ed54:	af000d0e 	bge	r21,fp,ed8c <___vfiprintf_internal_r+0x5c0>
    ed58:	10800404 	addi	r2,r2,16
    ed5c:	20c00044 	addi	r3,r4,1
    ed60:	44800015 	stw	r18,0(r8)
    ed64:	45400115 	stw	r21,4(r8)
    ed68:	d8801c15 	stw	r2,112(sp)
    ed6c:	d8c01b15 	stw	r3,108(sp)
    ed70:	38fff40e 	bge	r7,r3,ed44 <__alt_exception_stack_pointer+0xf800ed44>
    ed74:	10022b1e 	bne	r2,zero,f624 <___vfiprintf_internal_r+0xe58>
    ed78:	e73ffc04 	addi	fp,fp,-16
    ed7c:	01800044 	movi	r6,1
    ed80:	0009883a 	mov	r4,zero
    ed84:	d811883a 	mov	r8,sp
    ed88:	af3ff316 	blt	r21,fp,ed58 <__alt_exception_stack_pointer+0xf800ed58>
    ed8c:	d8c02317 	ldw	r3,140(sp)
    ed90:	1705883a 	add	r2,r2,fp
    ed94:	47000115 	stw	fp,4(r8)
    ed98:	40c00015 	stw	r3,0(r8)
    ed9c:	d8801c15 	stw	r2,112(sp)
    eda0:	d9801b15 	stw	r6,108(sp)
    eda4:	00c001c4 	movi	r3,7
    eda8:	19829416 	blt	r3,r6,f7fc <___vfiprintf_internal_r+0x1030>
    edac:	8521c83a 	sub	r16,r16,r20
    edb0:	42000204 	addi	r8,r8,8
    edb4:	31400044 	addi	r5,r6,1
    edb8:	3009883a 	mov	r4,r6
    edbc:	04018716 	blt	zero,r16,f3dc <___vfiprintf_internal_r+0xc10>
    edc0:	a085883a 	add	r2,r20,r2
    edc4:	45c00015 	stw	r23,0(r8)
    edc8:	45000115 	stw	r20,4(r8)
    edcc:	d8801c15 	stw	r2,112(sp)
    edd0:	d9401b15 	stw	r5,108(sp)
    edd4:	00c001c4 	movi	r3,7
    edd8:	1941c20e 	bge	r3,r5,f4e4 <___vfiprintf_internal_r+0xd18>
    eddc:	1002531e 	bne	r2,zero,f72c <___vfiprintf_internal_r+0xf60>
    ede0:	d8001b15 	stw	zero,108(sp)
    ede4:	8c40010c 	andi	r17,r17,4
    ede8:	88023226 	beq	r17,zero,f6b4 <___vfiprintf_internal_r+0xee8>
    edec:	d9002517 	ldw	r4,148(sp)
    edf0:	24e3c83a 	sub	r17,r4,r19
    edf4:	04432916 	blt	zero,r17,fa9c <___vfiprintf_internal_r+0x12d0>
    edf8:	d8802517 	ldw	r2,148(sp)
    edfc:	14c0010e 	bge	r2,r19,ee04 <___vfiprintf_internal_r+0x638>
    ee00:	9805883a 	mov	r2,r19
    ee04:	d8c02417 	ldw	r3,144(sp)
    ee08:	1887883a 	add	r3,r3,r2
    ee0c:	d8c02415 	stw	r3,144(sp)
    ee10:	d8001b15 	stw	zero,108(sp)
    ee14:	d811883a 	mov	r8,sp
    ee18:	003ea006 	br	e89c <__alt_exception_stack_pointer+0xf800e89c>
    ee1c:	8c400814 	ori	r17,r17,32
    ee20:	b0c00007 	ldb	r3,0(r22)
    ee24:	003ec606 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    ee28:	b0c00007 	ldb	r3,0(r22)
    ee2c:	00801b04 	movi	r2,108
    ee30:	18832026 	beq	r3,r2,fab4 <___vfiprintf_internal_r+0x12e8>
    ee34:	8c400414 	ori	r17,r17,16
    ee38:	003ec106 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    ee3c:	9cc03fcc 	andi	r19,r19,255
    ee40:	b811883a 	mov	r8,r23
    ee44:	9803981e 	bne	r19,zero,fca8 <___vfiprintf_internal_r+0x14dc>
    ee48:	8880080c 	andi	r2,r17,32
    ee4c:	1002be26 	beq	r2,zero,f948 <___vfiprintf_internal_r+0x117c>
    ee50:	d9002217 	ldw	r4,136(sp)
    ee54:	d9402417 	ldw	r5,144(sp)
    ee58:	20800017 	ldw	r2,0(r4)
    ee5c:	2807d7fa 	srai	r3,r5,31
    ee60:	21000104 	addi	r4,r4,4
    ee64:	d9002215 	stw	r4,136(sp)
    ee68:	11400015 	stw	r5,0(r2)
    ee6c:	10c00115 	stw	r3,4(r2)
    ee70:	003e8a06 	br	e89c <__alt_exception_stack_pointer+0xf800e89c>
    ee74:	9cc03fcc 	andi	r19,r19,255
    ee78:	b811883a 	mov	r8,r23
    ee7c:	9803871e 	bne	r19,zero,fc9c <___vfiprintf_internal_r+0x14d0>
    ee80:	8880080c 	andi	r2,r17,32
    ee84:	10009a26 	beq	r2,zero,f0f0 <___vfiprintf_internal_r+0x924>
    ee88:	d9002217 	ldw	r4,136(sp)
    ee8c:	d8001d85 	stb	zero,118(sp)
    ee90:	20800204 	addi	r2,r4,8
    ee94:	24c00017 	ldw	r19,0(r4)
    ee98:	25000117 	ldw	r20,4(r4)
    ee9c:	8002a416 	blt	r16,zero,f930 <___vfiprintf_internal_r+0x1164>
    eea0:	013fdfc4 	movi	r4,-129
    eea4:	9d06b03a 	or	r3,r19,r20
    eea8:	d8802215 	stw	r2,136(sp)
    eeac:	8922703a 	and	r17,r17,r4
    eeb0:	18009b26 	beq	r3,zero,f120 <___vfiprintf_internal_r+0x954>
    eeb4:	002b883a 	mov	r21,zero
    eeb8:	ddc01a04 	addi	r23,sp,104
    eebc:	9806d0fa 	srli	r3,r19,3
    eec0:	a008977a 	slli	r4,r20,29
    eec4:	a028d0fa 	srli	r20,r20,3
    eec8:	9cc001cc 	andi	r19,r19,7
    eecc:	98800c04 	addi	r2,r19,48
    eed0:	bdffffc4 	addi	r23,r23,-1
    eed4:	20e6b03a 	or	r19,r4,r3
    eed8:	b8800005 	stb	r2,0(r23)
    eedc:	9d06b03a 	or	r3,r19,r20
    eee0:	183ff61e 	bne	r3,zero,eebc <__alt_exception_stack_pointer+0xf800eebc>
    eee4:	88c0004c 	andi	r3,r17,1
    eee8:	18021f1e 	bne	r3,zero,f768 <___vfiprintf_internal_r+0xf9c>
    eeec:	d9401e17 	ldw	r5,120(sp)
    eef0:	2de9c83a 	sub	r20,r5,r23
    eef4:	003f3806 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    eef8:	9cc03fcc 	andi	r19,r19,255
    eefc:	b811883a 	mov	r8,r23
    ef00:	98034f1e 	bne	r19,zero,fc40 <___vfiprintf_internal_r+0x1474>
    ef04:	00800074 	movhi	r2,1
    ef08:	10957c04 	addi	r2,r2,22000
    ef0c:	d8802615 	stw	r2,152(sp)
    ef10:	8880080c 	andi	r2,r17,32
    ef14:	1000ac26 	beq	r2,zero,f1c8 <___vfiprintf_internal_r+0x9fc>
    ef18:	d9002217 	ldw	r4,136(sp)
    ef1c:	24c00017 	ldw	r19,0(r4)
    ef20:	25000117 	ldw	r20,4(r4)
    ef24:	21000204 	addi	r4,r4,8
    ef28:	d9002215 	stw	r4,136(sp)
    ef2c:	8880004c 	andi	r2,r17,1
    ef30:	1001e726 	beq	r2,zero,f6d0 <___vfiprintf_internal_r+0xf04>
    ef34:	9d04b03a 	or	r2,r19,r20
    ef38:	10025c1e 	bne	r2,zero,f8ac <___vfiprintf_internal_r+0x10e0>
    ef3c:	d8001d85 	stb	zero,118(sp)
    ef40:	80024416 	blt	r16,zero,f854 <___vfiprintf_internal_r+0x1088>
    ef44:	00bfdfc4 	movi	r2,-129
    ef48:	88a2703a 	and	r17,r17,r2
    ef4c:	003f1d06 	br	ebc4 <__alt_exception_stack_pointer+0xf800ebc4>
    ef50:	d8c02217 	ldw	r3,136(sp)
    ef54:	04c00044 	movi	r19,1
    ef58:	b811883a 	mov	r8,r23
    ef5c:	18800017 	ldw	r2,0(r3)
    ef60:	18c00104 	addi	r3,r3,4
    ef64:	d8001d85 	stb	zero,118(sp)
    ef68:	d8801005 	stb	r2,64(sp)
    ef6c:	d8c02215 	stw	r3,136(sp)
    ef70:	9829883a 	mov	r20,r19
    ef74:	ddc01004 	addi	r23,sp,64
    ef78:	0021883a 	mov	r16,zero
    ef7c:	003f1e06 	br	ebf8 <__alt_exception_stack_pointer+0xf800ebf8>
    ef80:	9cc03fcc 	andi	r19,r19,255
    ef84:	b811883a 	mov	r8,r23
    ef88:	9803331e 	bne	r19,zero,fc58 <___vfiprintf_internal_r+0x148c>
    ef8c:	8880080c 	andi	r2,r17,32
    ef90:	10004826 	beq	r2,zero,f0b4 <___vfiprintf_internal_r+0x8e8>
    ef94:	d9002217 	ldw	r4,136(sp)
    ef98:	20800117 	ldw	r2,4(r4)
    ef9c:	24c00017 	ldw	r19,0(r4)
    efa0:	21000204 	addi	r4,r4,8
    efa4:	d9002215 	stw	r4,136(sp)
    efa8:	1029883a 	mov	r20,r2
    efac:	10024c16 	blt	r2,zero,f8e0 <___vfiprintf_internal_r+0x1114>
    efb0:	dd401d83 	ldbu	r21,118(sp)
    efb4:	80007116 	blt	r16,zero,f17c <___vfiprintf_internal_r+0x9b0>
    efb8:	00ffdfc4 	movi	r3,-129
    efbc:	9d04b03a 	or	r2,r19,r20
    efc0:	88e2703a 	and	r17,r17,r3
    efc4:	1000d126 	beq	r2,zero,f30c <___vfiprintf_internal_r+0xb40>
    efc8:	a0023526 	beq	r20,zero,f8a0 <___vfiprintf_internal_r+0x10d4>
    efcc:	ddc01a04 	addi	r23,sp,104
    efd0:	4039883a 	mov	fp,r8
    efd4:	9809883a 	mov	r4,r19
    efd8:	a00b883a 	mov	r5,r20
    efdc:	01800284 	movi	r6,10
    efe0:	000f883a 	mov	r7,zero
    efe4:	0010cf80 	call	10cf8 <__umoddi3>
    efe8:	10800c04 	addi	r2,r2,48
    efec:	bdffffc4 	addi	r23,r23,-1
    eff0:	9809883a 	mov	r4,r19
    eff4:	a00b883a 	mov	r5,r20
    eff8:	b8800005 	stb	r2,0(r23)
    effc:	01800284 	movi	r6,10
    f000:	000f883a 	mov	r7,zero
    f004:	00106fc0 	call	106fc <__udivdi3>
    f008:	1027883a 	mov	r19,r2
    f00c:	10c4b03a 	or	r2,r2,r3
    f010:	1829883a 	mov	r20,r3
    f014:	103fef1e 	bne	r2,zero,efd4 <__alt_exception_stack_pointer+0xf800efd4>
    f018:	d9001e17 	ldw	r4,120(sp)
    f01c:	e011883a 	mov	r8,fp
    f020:	25e9c83a 	sub	r20,r4,r23
    f024:	003eec06 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f028:	d8802307 	ldb	r2,140(sp)
    f02c:	1002361e 	bne	r2,zero,f908 <___vfiprintf_internal_r+0x113c>
    f030:	00c00804 	movi	r3,32
    f034:	d8c02305 	stb	r3,140(sp)
    f038:	04c00044 	movi	r19,1
    f03c:	b0c00007 	ldb	r3,0(r22)
    f040:	003e3f06 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f044:	8c400054 	ori	r17,r17,1
    f048:	b0c00007 	ldb	r3,0(r22)
    f04c:	003e3c06 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f050:	8c402014 	ori	r17,r17,128
    f054:	b0c00007 	ldb	r3,0(r22)
    f058:	003e3906 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f05c:	dc002715 	stw	r16,156(sp)
    f060:	d8002515 	stw	zero,148(sp)
    f064:	1f3ff404 	addi	fp,r3,-48
    f068:	0009883a 	mov	r4,zero
    f06c:	b021883a 	mov	r16,r22
    f070:	01400284 	movi	r5,10
    f074:	00050200 	call	5020 <__mulsi3>
    f078:	80c00007 	ldb	r3,0(r16)
    f07c:	e089883a 	add	r4,fp,r2
    f080:	b5800044 	addi	r22,r22,1
    f084:	1f3ff404 	addi	fp,r3,-48
    f088:	b021883a 	mov	r16,r22
    f08c:	af3ff82e 	bgeu	r21,fp,f070 <__alt_exception_stack_pointer+0xf800f070>
    f090:	d9002515 	stw	r4,148(sp)
    f094:	dc002717 	ldw	r16,156(sp)
    f098:	003e2a06 	br	e944 <__alt_exception_stack_pointer+0xf800e944>
    f09c:	9cc03fcc 	andi	r19,r19,255
    f0a0:	b811883a 	mov	r8,r23
    f0a4:	9802e91e 	bne	r19,zero,fc4c <___vfiprintf_internal_r+0x1480>
    f0a8:	8c400414 	ori	r17,r17,16
    f0ac:	8880080c 	andi	r2,r17,32
    f0b0:	103fb81e 	bne	r2,zero,ef94 <__alt_exception_stack_pointer+0xf800ef94>
    f0b4:	8880040c 	andi	r2,r17,16
    f0b8:	10022e26 	beq	r2,zero,f974 <___vfiprintf_internal_r+0x11a8>
    f0bc:	d9402217 	ldw	r5,136(sp)
    f0c0:	2cc00017 	ldw	r19,0(r5)
    f0c4:	29400104 	addi	r5,r5,4
    f0c8:	d9402215 	stw	r5,136(sp)
    f0cc:	9829d7fa 	srai	r20,r19,31
    f0d0:	a005883a 	mov	r2,r20
    f0d4:	003fb506 	br	efac <__alt_exception_stack_pointer+0xf800efac>
    f0d8:	9cc03fcc 	andi	r19,r19,255
    f0dc:	b811883a 	mov	r8,r23
    f0e0:	9802fa1e 	bne	r19,zero,fccc <___vfiprintf_internal_r+0x1500>
    f0e4:	8c400414 	ori	r17,r17,16
    f0e8:	8880080c 	andi	r2,r17,32
    f0ec:	103f661e 	bne	r2,zero,ee88 <__alt_exception_stack_pointer+0xf800ee88>
    f0f0:	8880040c 	andi	r2,r17,16
    f0f4:	10020626 	beq	r2,zero,f910 <___vfiprintf_internal_r+0x1144>
    f0f8:	d9402217 	ldw	r5,136(sp)
    f0fc:	d8001d85 	stb	zero,118(sp)
    f100:	0029883a 	mov	r20,zero
    f104:	28800104 	addi	r2,r5,4
    f108:	2cc00017 	ldw	r19,0(r5)
    f10c:	80020816 	blt	r16,zero,f930 <___vfiprintf_internal_r+0x1164>
    f110:	00ffdfc4 	movi	r3,-129
    f114:	d8802215 	stw	r2,136(sp)
    f118:	88e2703a 	and	r17,r17,r3
    f11c:	983f651e 	bne	r19,zero,eeb4 <__alt_exception_stack_pointer+0xf800eeb4>
    f120:	002b883a 	mov	r21,zero
    f124:	8002cf26 	beq	r16,zero,fc64 <___vfiprintf_internal_r+0x1498>
    f128:	0027883a 	mov	r19,zero
    f12c:	0029883a 	mov	r20,zero
    f130:	003f6106 	br	eeb8 <__alt_exception_stack_pointer+0xf800eeb8>
    f134:	9cc03fcc 	andi	r19,r19,255
    f138:	b811883a 	mov	r8,r23
    f13c:	9802e01e 	bne	r19,zero,fcc0 <___vfiprintf_internal_r+0x14f4>
    f140:	8c400414 	ori	r17,r17,16
    f144:	8880080c 	andi	r2,r17,32
    f148:	1000641e 	bne	r2,zero,f2dc <___vfiprintf_internal_r+0xb10>
    f14c:	8880040c 	andi	r2,r17,16
    f150:	1001c81e 	bne	r2,zero,f874 <___vfiprintf_internal_r+0x10a8>
    f154:	8880100c 	andi	r2,r17,64
    f158:	d8001d85 	stb	zero,118(sp)
    f15c:	1002281e 	bne	r2,zero,fa00 <___vfiprintf_internal_r+0x1234>
    f160:	d9002217 	ldw	r4,136(sp)
    f164:	0029883a 	mov	r20,zero
    f168:	20800104 	addi	r2,r4,4
    f16c:	24c00017 	ldw	r19,0(r4)
    f170:	8001c60e 	bge	r16,zero,f88c <___vfiprintf_internal_r+0x10c0>
    f174:	d8802215 	stw	r2,136(sp)
    f178:	002b883a 	mov	r21,zero
    f17c:	9d04b03a 	or	r2,r19,r20
    f180:	103f911e 	bne	r2,zero,efc8 <__alt_exception_stack_pointer+0xf800efc8>
    f184:	00800044 	movi	r2,1
    f188:	10803fcc 	andi	r2,r2,255
    f18c:	00c00044 	movi	r3,1
    f190:	10c05f26 	beq	r2,r3,f310 <___vfiprintf_internal_r+0xb44>
    f194:	00c00084 	movi	r3,2
    f198:	10ffe31e 	bne	r2,r3,f128 <__alt_exception_stack_pointer+0xf800f128>
    f19c:	0027883a 	mov	r19,zero
    f1a0:	0029883a 	mov	r20,zero
    f1a4:	00015106 	br	f6ec <___vfiprintf_internal_r+0xf20>
    f1a8:	9cc03fcc 	andi	r19,r19,255
    f1ac:	b811883a 	mov	r8,r23
    f1b0:	9802c01e 	bne	r19,zero,fcb4 <___vfiprintf_internal_r+0x14e8>
    f1b4:	01400074 	movhi	r5,1
    f1b8:	29557704 	addi	r5,r5,21980
    f1bc:	d9402615 	stw	r5,152(sp)
    f1c0:	8880080c 	andi	r2,r17,32
    f1c4:	103f541e 	bne	r2,zero,ef18 <__alt_exception_stack_pointer+0xf800ef18>
    f1c8:	8880040c 	andi	r2,r17,16
    f1cc:	1001f226 	beq	r2,zero,f998 <___vfiprintf_internal_r+0x11cc>
    f1d0:	d9402217 	ldw	r5,136(sp)
    f1d4:	0029883a 	mov	r20,zero
    f1d8:	2cc00017 	ldw	r19,0(r5)
    f1dc:	29400104 	addi	r5,r5,4
    f1e0:	d9402215 	stw	r5,136(sp)
    f1e4:	003f5106 	br	ef2c <__alt_exception_stack_pointer+0xf800ef2c>
    f1e8:	d8c02217 	ldw	r3,136(sp)
    f1ec:	b811883a 	mov	r8,r23
    f1f0:	d8001d85 	stb	zero,118(sp)
    f1f4:	1dc00017 	ldw	r23,0(r3)
    f1f8:	1f000104 	addi	fp,r3,4
    f1fc:	b8025926 	beq	r23,zero,fb64 <___vfiprintf_internal_r+0x1398>
    f200:	80023316 	blt	r16,zero,fad0 <___vfiprintf_internal_r+0x1304>
    f204:	800d883a 	mov	r6,r16
    f208:	000b883a 	mov	r5,zero
    f20c:	b809883a 	mov	r4,r23
    f210:	da002a15 	stw	r8,168(sp)
    f214:	000caa80 	call	caa8 <memchr>
    f218:	da002a17 	ldw	r8,168(sp)
    f21c:	10026826 	beq	r2,zero,fbc0 <___vfiprintf_internal_r+0x13f4>
    f220:	15e9c83a 	sub	r20,r2,r23
    f224:	dd401d83 	ldbu	r21,118(sp)
    f228:	df002215 	stw	fp,136(sp)
    f22c:	0021883a 	mov	r16,zero
    f230:	003e6906 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f234:	9cc03fcc 	andi	r19,r19,255
    f238:	b811883a 	mov	r8,r23
    f23c:	983fc126 	beq	r19,zero,f144 <__alt_exception_stack_pointer+0xf800f144>
    f240:	d8c02303 	ldbu	r3,140(sp)
    f244:	d8c01d85 	stb	r3,118(sp)
    f248:	003fbe06 	br	f144 <__alt_exception_stack_pointer+0xf800f144>
    f24c:	d9002217 	ldw	r4,136(sp)
    f250:	d9402217 	ldw	r5,136(sp)
    f254:	21000017 	ldw	r4,0(r4)
    f258:	28800104 	addi	r2,r5,4
    f25c:	d9002515 	stw	r4,148(sp)
    f260:	203e3d16 	blt	r4,zero,eb58 <__alt_exception_stack_pointer+0xf800eb58>
    f264:	d8802215 	stw	r2,136(sp)
    f268:	b0c00007 	ldb	r3,0(r22)
    f26c:	003db406 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f270:	00c00ac4 	movi	r3,43
    f274:	d8c02305 	stb	r3,140(sp)
    f278:	04c00044 	movi	r19,1
    f27c:	b0c00007 	ldb	r3,0(r22)
    f280:	003daf06 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f284:	b0c00007 	ldb	r3,0(r22)
    f288:	01000a84 	movi	r4,42
    f28c:	b4000044 	addi	r16,r22,1
    f290:	19025e26 	beq	r3,r4,fc0c <___vfiprintf_internal_r+0x1440>
    f294:	1f3ff404 	addi	fp,r3,-48
    f298:	0009883a 	mov	r4,zero
    f29c:	af025236 	bltu	r21,fp,fbe8 <___vfiprintf_internal_r+0x141c>
    f2a0:	01400284 	movi	r5,10
    f2a4:	00050200 	call	5020 <__mulsi3>
    f2a8:	80c00007 	ldb	r3,0(r16)
    f2ac:	1709883a 	add	r4,r2,fp
    f2b0:	85800044 	addi	r22,r16,1
    f2b4:	1f3ff404 	addi	fp,r3,-48
    f2b8:	b021883a 	mov	r16,r22
    f2bc:	af3ff82e 	bgeu	r21,fp,f2a0 <__alt_exception_stack_pointer+0xf800f2a0>
    f2c0:	2021883a 	mov	r16,r4
    f2c4:	203d9f0e 	bge	r4,zero,e944 <__alt_exception_stack_pointer+0xf800e944>
    f2c8:	043fffc4 	movi	r16,-1
    f2cc:	003d9d06 	br	e944 <__alt_exception_stack_pointer+0xf800e944>
    f2d0:	8c401014 	ori	r17,r17,64
    f2d4:	b0c00007 	ldb	r3,0(r22)
    f2d8:	003d9906 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f2dc:	d9002217 	ldw	r4,136(sp)
    f2e0:	d8001d85 	stb	zero,118(sp)
    f2e4:	20c00204 	addi	r3,r4,8
    f2e8:	24c00017 	ldw	r19,0(r4)
    f2ec:	25000117 	ldw	r20,4(r4)
    f2f0:	8001e716 	blt	r16,zero,fa90 <___vfiprintf_internal_r+0x12c4>
    f2f4:	013fdfc4 	movi	r4,-129
    f2f8:	9d04b03a 	or	r2,r19,r20
    f2fc:	d8c02215 	stw	r3,136(sp)
    f300:	8922703a 	and	r17,r17,r4
    f304:	002b883a 	mov	r21,zero
    f308:	103f2f1e 	bne	r2,zero,efc8 <__alt_exception_stack_pointer+0xf800efc8>
    f30c:	803e2f26 	beq	r16,zero,ebcc <__alt_exception_stack_pointer+0xf800ebcc>
    f310:	0027883a 	mov	r19,zero
    f314:	9cc00c04 	addi	r19,r19,48
    f318:	dcc019c5 	stb	r19,103(sp)
    f31c:	dd002817 	ldw	r20,160(sp)
    f320:	ddc019c4 	addi	r23,sp,103
    f324:	003e2c06 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f328:	9cc03fcc 	andi	r19,r19,255
    f32c:	b811883a 	mov	r8,r23
    f330:	9802571e 	bne	r19,zero,fc90 <___vfiprintf_internal_r+0x14c4>
    f334:	18005726 	beq	r3,zero,f494 <___vfiprintf_internal_r+0xcc8>
    f338:	04c00044 	movi	r19,1
    f33c:	d8c01005 	stb	r3,64(sp)
    f340:	d8001d85 	stb	zero,118(sp)
    f344:	9829883a 	mov	r20,r19
    f348:	ddc01004 	addi	r23,sp,64
    f34c:	003f0a06 	br	ef78 <__alt_exception_stack_pointer+0xf800ef78>
    f350:	d9402017 	ldw	r5,128(sp)
    f354:	d9002117 	ldw	r4,132(sp)
    f358:	d9801a04 	addi	r6,sp,104
    f35c:	da802a15 	stw	r10,168(sp)
    f360:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f364:	da802a17 	ldw	r10,168(sp)
    f368:	1000501e 	bne	r2,zero,f4ac <___vfiprintf_internal_r+0xce0>
    f36c:	d9801b17 	ldw	r6,108(sp)
    f370:	d8801c17 	ldw	r2,112(sp)
    f374:	d811883a 	mov	r8,sp
    f378:	31000044 	addi	r4,r6,1
    f37c:	003e3606 	br	ec58 <__alt_exception_stack_pointer+0xf800ec58>
    f380:	d9001b17 	ldw	r4,108(sp)
    f384:	d8801c17 	ldw	r2,112(sp)
    f388:	21400044 	addi	r5,r4,1
    f38c:	d9801d87 	ldb	r6,118(sp)
    f390:	303e5226 	beq	r6,zero,ecdc <__alt_exception_stack_pointer+0xf800ecdc>
    f394:	01800044 	movi	r6,1
    f398:	d9001d84 	addi	r4,sp,118
    f39c:	1185883a 	add	r2,r2,r6
    f3a0:	41000015 	stw	r4,0(r8)
    f3a4:	41800115 	stw	r6,4(r8)
    f3a8:	d8801c15 	stw	r2,112(sp)
    f3ac:	d9401b15 	stw	r5,108(sp)
    f3b0:	010001c4 	movi	r4,7
    f3b4:	2140b00e 	bge	r4,r5,f678 <___vfiprintf_internal_r+0xeac>
    f3b8:	1000f61e 	bne	r2,zero,f794 <___vfiprintf_internal_r+0xfc8>
    f3bc:	3800b31e 	bne	r7,zero,f68c <___vfiprintf_internal_r+0xec0>
    f3c0:	0009883a 	mov	r4,zero
    f3c4:	300b883a 	mov	r5,r6
    f3c8:	d811883a 	mov	r8,sp
    f3cc:	01802004 	movi	r6,128
    f3d0:	19be5226 	beq	r3,r6,ed1c <__alt_exception_stack_pointer+0xf800ed1c>
    f3d4:	8521c83a 	sub	r16,r16,r20
    f3d8:	043e790e 	bge	zero,r16,edc0 <__alt_exception_stack_pointer+0xf800edc0>
    f3dc:	05400404 	movi	r21,16
    f3e0:	ac01b00e 	bge	r21,r16,faa4 <___vfiprintf_internal_r+0x12d8>
    f3e4:	01400074 	movhi	r5,1
    f3e8:	2955dc04 	addi	r5,r5,22384
    f3ec:	d9402315 	stw	r5,140(sp)
    f3f0:	070001c4 	movi	fp,7
    f3f4:	00000506 	br	f40c <___vfiprintf_internal_r+0xc40>
    f3f8:	21400084 	addi	r5,r4,2
    f3fc:	42000204 	addi	r8,r8,8
    f400:	1809883a 	mov	r4,r3
    f404:	843ffc04 	addi	r16,r16,-16
    f408:	ac000d0e 	bge	r21,r16,f440 <___vfiprintf_internal_r+0xc74>
    f40c:	10800404 	addi	r2,r2,16
    f410:	20c00044 	addi	r3,r4,1
    f414:	44800015 	stw	r18,0(r8)
    f418:	45400115 	stw	r21,4(r8)
    f41c:	d8801c15 	stw	r2,112(sp)
    f420:	d8c01b15 	stw	r3,108(sp)
    f424:	e0fff40e 	bge	fp,r3,f3f8 <__alt_exception_stack_pointer+0xf800f3f8>
    f428:	1000101e 	bne	r2,zero,f46c <___vfiprintf_internal_r+0xca0>
    f42c:	843ffc04 	addi	r16,r16,-16
    f430:	01400044 	movi	r5,1
    f434:	0009883a 	mov	r4,zero
    f438:	d811883a 	mov	r8,sp
    f43c:	ac3ff316 	blt	r21,r16,f40c <__alt_exception_stack_pointer+0xf800f40c>
    f440:	d8c02317 	ldw	r3,140(sp)
    f444:	1405883a 	add	r2,r2,r16
    f448:	44000115 	stw	r16,4(r8)
    f44c:	40c00015 	stw	r3,0(r8)
    f450:	d8801c15 	stw	r2,112(sp)
    f454:	d9401b15 	stw	r5,108(sp)
    f458:	00c001c4 	movi	r3,7
    f45c:	19401916 	blt	r3,r5,f4c4 <___vfiprintf_internal_r+0xcf8>
    f460:	42000204 	addi	r8,r8,8
    f464:	29400044 	addi	r5,r5,1
    f468:	003e5506 	br	edc0 <__alt_exception_stack_pointer+0xf800edc0>
    f46c:	d9402017 	ldw	r5,128(sp)
    f470:	d9002117 	ldw	r4,132(sp)
    f474:	d9801a04 	addi	r6,sp,104
    f478:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f47c:	10000b1e 	bne	r2,zero,f4ac <___vfiprintf_internal_r+0xce0>
    f480:	d9001b17 	ldw	r4,108(sp)
    f484:	d8801c17 	ldw	r2,112(sp)
    f488:	d811883a 	mov	r8,sp
    f48c:	21400044 	addi	r5,r4,1
    f490:	003fdc06 	br	f404 <__alt_exception_stack_pointer+0xf800f404>
    f494:	d8801c17 	ldw	r2,112(sp)
    f498:	10000426 	beq	r2,zero,f4ac <___vfiprintf_internal_r+0xce0>
    f49c:	d9402017 	ldw	r5,128(sp)
    f4a0:	d9002117 	ldw	r4,132(sp)
    f4a4:	d9801a04 	addi	r6,sp,104
    f4a8:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f4ac:	d9402017 	ldw	r5,128(sp)
    f4b0:	2880030b 	ldhu	r2,12(r5)
    f4b4:	1080100c 	andi	r2,r2,64
    f4b8:	10014d1e 	bne	r2,zero,f9f0 <___vfiprintf_internal_r+0x1224>
    f4bc:	d8802417 	ldw	r2,144(sp)
    f4c0:	003d9706 	br	eb20 <__alt_exception_stack_pointer+0xf800eb20>
    f4c4:	1000d21e 	bne	r2,zero,f810 <___vfiprintf_internal_r+0x1044>
    f4c8:	00c00044 	movi	r3,1
    f4cc:	a005883a 	mov	r2,r20
    f4d0:	ddc00015 	stw	r23,0(sp)
    f4d4:	dd000115 	stw	r20,4(sp)
    f4d8:	dd001c15 	stw	r20,112(sp)
    f4dc:	d8c01b15 	stw	r3,108(sp)
    f4e0:	d811883a 	mov	r8,sp
    f4e4:	42000204 	addi	r8,r8,8
    f4e8:	8c40010c 	andi	r17,r17,4
    f4ec:	88004026 	beq	r17,zero,f5f0 <___vfiprintf_internal_r+0xe24>
    f4f0:	d9002517 	ldw	r4,148(sp)
    f4f4:	24e3c83a 	sub	r17,r4,r19
    f4f8:	04403d0e 	bge	zero,r17,f5f0 <___vfiprintf_internal_r+0xe24>
    f4fc:	04000404 	movi	r16,16
    f500:	8441a90e 	bge	r16,r17,fba8 <___vfiprintf_internal_r+0x13dc>
    f504:	00c00074 	movhi	r3,1
    f508:	18d5e004 	addi	r3,r3,22400
    f50c:	d9001b17 	ldw	r4,108(sp)
    f510:	d8c02315 	stw	r3,140(sp)
    f514:	050001c4 	movi	r20,7
    f518:	dd402117 	ldw	r21,132(sp)
    f51c:	ddc02017 	ldw	r23,128(sp)
    f520:	00000506 	br	f538 <___vfiprintf_internal_r+0xd6c>
    f524:	21400084 	addi	r5,r4,2
    f528:	42000204 	addi	r8,r8,8
    f52c:	1809883a 	mov	r4,r3
    f530:	8c7ffc04 	addi	r17,r17,-16
    f534:	84400f0e 	bge	r16,r17,f574 <___vfiprintf_internal_r+0xda8>
    f538:	01400074 	movhi	r5,1
    f53c:	10800404 	addi	r2,r2,16
    f540:	20c00044 	addi	r3,r4,1
    f544:	2955e004 	addi	r5,r5,22400
    f548:	41400015 	stw	r5,0(r8)
    f54c:	44000115 	stw	r16,4(r8)
    f550:	d8801c15 	stw	r2,112(sp)
    f554:	d8c01b15 	stw	r3,108(sp)
    f558:	a0fff20e 	bge	r20,r3,f524 <__alt_exception_stack_pointer+0xf800f524>
    f55c:	1000141e 	bne	r2,zero,f5b0 <___vfiprintf_internal_r+0xde4>
    f560:	8c7ffc04 	addi	r17,r17,-16
    f564:	01400044 	movi	r5,1
    f568:	0009883a 	mov	r4,zero
    f56c:	d811883a 	mov	r8,sp
    f570:	847ff116 	blt	r16,r17,f538 <__alt_exception_stack_pointer+0xf800f538>
    f574:	d8c02317 	ldw	r3,140(sp)
    f578:	1445883a 	add	r2,r2,r17
    f57c:	44400115 	stw	r17,4(r8)
    f580:	40c00015 	stw	r3,0(r8)
    f584:	d8801c15 	stw	r2,112(sp)
    f588:	d9401b15 	stw	r5,108(sp)
    f58c:	00c001c4 	movi	r3,7
    f590:	1940170e 	bge	r3,r5,f5f0 <___vfiprintf_internal_r+0xe24>
    f594:	1000101e 	bne	r2,zero,f5d8 <___vfiprintf_internal_r+0xe0c>
    f598:	d8802517 	ldw	r2,148(sp)
    f59c:	14c11616 	blt	r2,r19,f9f8 <___vfiprintf_internal_r+0x122c>
    f5a0:	d9002417 	ldw	r4,144(sp)
    f5a4:	2089883a 	add	r4,r4,r2
    f5a8:	d9002415 	stw	r4,144(sp)
    f5ac:	003e1806 	br	ee10 <__alt_exception_stack_pointer+0xf800ee10>
    f5b0:	d9801a04 	addi	r6,sp,104
    f5b4:	b80b883a 	mov	r5,r23
    f5b8:	a809883a 	mov	r4,r21
    f5bc:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f5c0:	103fba1e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f5c4:	d9001b17 	ldw	r4,108(sp)
    f5c8:	d8801c17 	ldw	r2,112(sp)
    f5cc:	d811883a 	mov	r8,sp
    f5d0:	21400044 	addi	r5,r4,1
    f5d4:	003fd606 	br	f530 <__alt_exception_stack_pointer+0xf800f530>
    f5d8:	d9402017 	ldw	r5,128(sp)
    f5dc:	d9002117 	ldw	r4,132(sp)
    f5e0:	d9801a04 	addi	r6,sp,104
    f5e4:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f5e8:	103fb01e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f5ec:	d8801c17 	ldw	r2,112(sp)
    f5f0:	d8c02517 	ldw	r3,148(sp)
    f5f4:	1cc0010e 	bge	r3,r19,f5fc <___vfiprintf_internal_r+0xe30>
    f5f8:	9807883a 	mov	r3,r19
    f5fc:	d9002417 	ldw	r4,144(sp)
    f600:	20c9883a 	add	r4,r4,r3
    f604:	d9002415 	stw	r4,144(sp)
    f608:	103e0126 	beq	r2,zero,ee10 <__alt_exception_stack_pointer+0xf800ee10>
    f60c:	d9402017 	ldw	r5,128(sp)
    f610:	d9002117 	ldw	r4,132(sp)
    f614:	d9801a04 	addi	r6,sp,104
    f618:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f61c:	103dfc26 	beq	r2,zero,ee10 <__alt_exception_stack_pointer+0xf800ee10>
    f620:	003fa206 	br	f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f624:	d9402017 	ldw	r5,128(sp)
    f628:	d9002117 	ldw	r4,132(sp)
    f62c:	d9801a04 	addi	r6,sp,104
    f630:	d9c02b15 	stw	r7,172(sp)
    f634:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f638:	d9c02b17 	ldw	r7,172(sp)
    f63c:	103f9b1e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f640:	d9001b17 	ldw	r4,108(sp)
    f644:	d8801c17 	ldw	r2,112(sp)
    f648:	d811883a 	mov	r8,sp
    f64c:	21800044 	addi	r6,r4,1
    f650:	003dbf06 	br	ed50 <__alt_exception_stack_pointer+0xf800ed50>
    f654:	1000d81e 	bne	r2,zero,f9b8 <___vfiprintf_internal_r+0x11ec>
    f658:	d9001d87 	ldb	r4,118(sp)
    f65c:	20000a26 	beq	r4,zero,f688 <___vfiprintf_internal_r+0xebc>
    f660:	00800044 	movi	r2,1
    f664:	d9001d84 	addi	r4,sp,118
    f668:	100b883a 	mov	r5,r2
    f66c:	d9000015 	stw	r4,0(sp)
    f670:	d8800115 	stw	r2,4(sp)
    f674:	d811883a 	mov	r8,sp
    f678:	2809883a 	mov	r4,r5
    f67c:	42000204 	addi	r8,r8,8
    f680:	29400044 	addi	r5,r5,1
    f684:	003d9506 	br	ecdc <__alt_exception_stack_pointer+0xf800ecdc>
    f688:	3800fd26 	beq	r7,zero,fa80 <___vfiprintf_internal_r+0x12b4>
    f68c:	00800084 	movi	r2,2
    f690:	d9001d04 	addi	r4,sp,116
    f694:	d9000015 	stw	r4,0(sp)
    f698:	d8800115 	stw	r2,4(sp)
    f69c:	01400044 	movi	r5,1
    f6a0:	d811883a 	mov	r8,sp
    f6a4:	2809883a 	mov	r4,r5
    f6a8:	42000204 	addi	r8,r8,8
    f6ac:	29400044 	addi	r5,r5,1
    f6b0:	003f4606 	br	f3cc <__alt_exception_stack_pointer+0xf800f3cc>
    f6b4:	d8802517 	ldw	r2,148(sp)
    f6b8:	14c0010e 	bge	r2,r19,f6c0 <___vfiprintf_internal_r+0xef4>
    f6bc:	9805883a 	mov	r2,r19
    f6c0:	d9402417 	ldw	r5,144(sp)
    f6c4:	288b883a 	add	r5,r5,r2
    f6c8:	d9402415 	stw	r5,144(sp)
    f6cc:	003dd006 	br	ee10 <__alt_exception_stack_pointer+0xf800ee10>
    f6d0:	d8001d85 	stb	zero,118(sp)
    f6d4:	80005d16 	blt	r16,zero,f84c <___vfiprintf_internal_r+0x1080>
    f6d8:	00ffdfc4 	movi	r3,-129
    f6dc:	9d04b03a 	or	r2,r19,r20
    f6e0:	88e2703a 	and	r17,r17,r3
    f6e4:	103d3726 	beq	r2,zero,ebc4 <__alt_exception_stack_pointer+0xf800ebc4>
    f6e8:	002b883a 	mov	r21,zero
    f6ec:	d9002617 	ldw	r4,152(sp)
    f6f0:	ddc01a04 	addi	r23,sp,104
    f6f4:	988003cc 	andi	r2,r19,15
    f6f8:	a006973a 	slli	r3,r20,28
    f6fc:	2085883a 	add	r2,r4,r2
    f700:	9826d13a 	srli	r19,r19,4
    f704:	10800003 	ldbu	r2,0(r2)
    f708:	a028d13a 	srli	r20,r20,4
    f70c:	bdffffc4 	addi	r23,r23,-1
    f710:	1ce6b03a 	or	r19,r3,r19
    f714:	b8800005 	stb	r2,0(r23)
    f718:	9d04b03a 	or	r2,r19,r20
    f71c:	103ff51e 	bne	r2,zero,f6f4 <__alt_exception_stack_pointer+0xf800f6f4>
    f720:	d8801e17 	ldw	r2,120(sp)
    f724:	15e9c83a 	sub	r20,r2,r23
    f728:	003d2b06 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f72c:	d9402017 	ldw	r5,128(sp)
    f730:	d9002117 	ldw	r4,132(sp)
    f734:	d9801a04 	addi	r6,sp,104
    f738:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f73c:	103f5b1e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f740:	d8801c17 	ldw	r2,112(sp)
    f744:	d811883a 	mov	r8,sp
    f748:	003f6706 	br	f4e8 <__alt_exception_stack_pointer+0xf800f4e8>
    f74c:	d9402017 	ldw	r5,128(sp)
    f750:	d9002117 	ldw	r4,132(sp)
    f754:	d9801a04 	addi	r6,sp,104
    f758:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f75c:	103f531e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f760:	d811883a 	mov	r8,sp
    f764:	003cd906 	br	eacc <__alt_exception_stack_pointer+0xf800eacc>
    f768:	10803fcc 	andi	r2,r2,255
    f76c:	1080201c 	xori	r2,r2,128
    f770:	10bfe004 	addi	r2,r2,-128
    f774:	00c00c04 	movi	r3,48
    f778:	10ffe926 	beq	r2,r3,f720 <__alt_exception_stack_pointer+0xf800f720>
    f77c:	b8ffffc5 	stb	r3,-1(r23)
    f780:	d8c01e17 	ldw	r3,120(sp)
    f784:	b8bfffc4 	addi	r2,r23,-1
    f788:	102f883a 	mov	r23,r2
    f78c:	18a9c83a 	sub	r20,r3,r2
    f790:	003d1106 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f794:	d9402017 	ldw	r5,128(sp)
    f798:	d9002117 	ldw	r4,132(sp)
    f79c:	d9801a04 	addi	r6,sp,104
    f7a0:	d8c02a15 	stw	r3,168(sp)
    f7a4:	d9c02b15 	stw	r7,172(sp)
    f7a8:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f7ac:	d8c02a17 	ldw	r3,168(sp)
    f7b0:	d9c02b17 	ldw	r7,172(sp)
    f7b4:	103f3d1e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f7b8:	d9001b17 	ldw	r4,108(sp)
    f7bc:	d8801c17 	ldw	r2,112(sp)
    f7c0:	d811883a 	mov	r8,sp
    f7c4:	21400044 	addi	r5,r4,1
    f7c8:	003d4406 	br	ecdc <__alt_exception_stack_pointer+0xf800ecdc>
    f7cc:	d9402017 	ldw	r5,128(sp)
    f7d0:	d9002117 	ldw	r4,132(sp)
    f7d4:	d9801a04 	addi	r6,sp,104
    f7d8:	d8c02a15 	stw	r3,168(sp)
    f7dc:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f7e0:	d8c02a17 	ldw	r3,168(sp)
    f7e4:	103f311e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f7e8:	d9001b17 	ldw	r4,108(sp)
    f7ec:	d8801c17 	ldw	r2,112(sp)
    f7f0:	d811883a 	mov	r8,sp
    f7f4:	21400044 	addi	r5,r4,1
    f7f8:	003ef406 	br	f3cc <__alt_exception_stack_pointer+0xf800f3cc>
    f7fc:	1000bd1e 	bne	r2,zero,faf4 <___vfiprintf_internal_r+0x1328>
    f800:	01400044 	movi	r5,1
    f804:	0009883a 	mov	r4,zero
    f808:	d811883a 	mov	r8,sp
    f80c:	003ef106 	br	f3d4 <__alt_exception_stack_pointer+0xf800f3d4>
    f810:	d9402017 	ldw	r5,128(sp)
    f814:	d9002117 	ldw	r4,132(sp)
    f818:	d9801a04 	addi	r6,sp,104
    f81c:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f820:	103f221e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f824:	d9401b17 	ldw	r5,108(sp)
    f828:	d8801c17 	ldw	r2,112(sp)
    f82c:	d811883a 	mov	r8,sp
    f830:	29400044 	addi	r5,r5,1
    f834:	003d6206 	br	edc0 <__alt_exception_stack_pointer+0xf800edc0>
    f838:	01400074 	movhi	r5,1
    f83c:	29557c04 	addi	r5,r5,22000
    f840:	d9402615 	stw	r5,152(sp)
    f844:	d8c02215 	stw	r3,136(sp)
    f848:	1023883a 	mov	r17,r2
    f84c:	9d04b03a 	or	r2,r19,r20
    f850:	103fa51e 	bne	r2,zero,f6e8 <__alt_exception_stack_pointer+0xf800f6e8>
    f854:	002b883a 	mov	r21,zero
    f858:	00800084 	movi	r2,2
    f85c:	003e4a06 	br	f188 <__alt_exception_stack_pointer+0xf800f188>
    f860:	01400074 	movhi	r5,1
    f864:	29557c04 	addi	r5,r5,22000
    f868:	002b883a 	mov	r21,zero
    f86c:	d9402615 	stw	r5,152(sp)
    f870:	003f9e06 	br	f6ec <__alt_exception_stack_pointer+0xf800f6ec>
    f874:	d9402217 	ldw	r5,136(sp)
    f878:	d8001d85 	stb	zero,118(sp)
    f87c:	0029883a 	mov	r20,zero
    f880:	28800104 	addi	r2,r5,4
    f884:	2cc00017 	ldw	r19,0(r5)
    f888:	803e3a16 	blt	r16,zero,f174 <__alt_exception_stack_pointer+0xf800f174>
    f88c:	00ffdfc4 	movi	r3,-129
    f890:	d8802215 	stw	r2,136(sp)
    f894:	88e2703a 	and	r17,r17,r3
    f898:	002b883a 	mov	r21,zero
    f89c:	983e9b26 	beq	r19,zero,f30c <__alt_exception_stack_pointer+0xf800f30c>
    f8a0:	00800244 	movi	r2,9
    f8a4:	14fdc936 	bltu	r2,r19,efcc <__alt_exception_stack_pointer+0xf800efcc>
    f8a8:	003e9a06 	br	f314 <__alt_exception_stack_pointer+0xf800f314>
    f8ac:	00800c04 	movi	r2,48
    f8b0:	d8c01d45 	stb	r3,117(sp)
    f8b4:	d8801d05 	stb	r2,116(sp)
    f8b8:	d8001d85 	stb	zero,118(sp)
    f8bc:	88c00094 	ori	r3,r17,2
    f8c0:	80009c16 	blt	r16,zero,fb34 <___vfiprintf_internal_r+0x1368>
    f8c4:	00bfdfc4 	movi	r2,-129
    f8c8:	88a2703a 	and	r17,r17,r2
    f8cc:	8c400094 	ori	r17,r17,2
    f8d0:	002b883a 	mov	r21,zero
    f8d4:	003f8506 	br	f6ec <__alt_exception_stack_pointer+0xf800f6ec>
    f8d8:	b029883a 	mov	r20,r22
    f8dc:	003c0b06 	br	e90c <__alt_exception_stack_pointer+0xf800e90c>
    f8e0:	04e7c83a 	sub	r19,zero,r19
    f8e4:	05400b44 	movi	r21,45
    f8e8:	9804c03a 	cmpne	r2,r19,zero
    f8ec:	0529c83a 	sub	r20,zero,r20
    f8f0:	dd401d85 	stb	r21,118(sp)
    f8f4:	a0a9c83a 	sub	r20,r20,r2
    f8f8:	80009716 	blt	r16,zero,fb58 <___vfiprintf_internal_r+0x138c>
    f8fc:	00bfdfc4 	movi	r2,-129
    f900:	88a2703a 	and	r17,r17,r2
    f904:	003db006 	br	efc8 <__alt_exception_stack_pointer+0xf800efc8>
    f908:	b0c00007 	ldb	r3,0(r22)
    f90c:	003c0c06 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    f910:	8880100c 	andi	r2,r17,64
    f914:	d8001d85 	stb	zero,118(sp)
    f918:	1000461e 	bne	r2,zero,fa34 <___vfiprintf_internal_r+0x1268>
    f91c:	d9002217 	ldw	r4,136(sp)
    f920:	0029883a 	mov	r20,zero
    f924:	20800104 	addi	r2,r4,4
    f928:	24c00017 	ldw	r19,0(r4)
    f92c:	803df80e 	bge	r16,zero,f110 <__alt_exception_stack_pointer+0xf800f110>
    f930:	9d06b03a 	or	r3,r19,r20
    f934:	d8802215 	stw	r2,136(sp)
    f938:	183d5e1e 	bne	r3,zero,eeb4 <__alt_exception_stack_pointer+0xf800eeb4>
    f93c:	002b883a 	mov	r21,zero
    f940:	0005883a 	mov	r2,zero
    f944:	003e1006 	br	f188 <__alt_exception_stack_pointer+0xf800f188>
    f948:	8880040c 	andi	r2,r17,16
    f94c:	1000321e 	bne	r2,zero,fa18 <___vfiprintf_internal_r+0x124c>
    f950:	8c40100c 	andi	r17,r17,64
    f954:	88008d26 	beq	r17,zero,fb8c <___vfiprintf_internal_r+0x13c0>
    f958:	d9402217 	ldw	r5,136(sp)
    f95c:	d8c02417 	ldw	r3,144(sp)
    f960:	28800017 	ldw	r2,0(r5)
    f964:	29400104 	addi	r5,r5,4
    f968:	d9402215 	stw	r5,136(sp)
    f96c:	10c0000d 	sth	r3,0(r2)
    f970:	003bca06 	br	e89c <__alt_exception_stack_pointer+0xf800e89c>
    f974:	8880100c 	andi	r2,r17,64
    f978:	10003a26 	beq	r2,zero,fa64 <___vfiprintf_internal_r+0x1298>
    f97c:	d8802217 	ldw	r2,136(sp)
    f980:	14c0000f 	ldh	r19,0(r2)
    f984:	10800104 	addi	r2,r2,4
    f988:	d8802215 	stw	r2,136(sp)
    f98c:	9829d7fa 	srai	r20,r19,31
    f990:	a005883a 	mov	r2,r20
    f994:	003d8506 	br	efac <__alt_exception_stack_pointer+0xf800efac>
    f998:	8880100c 	andi	r2,r17,64
    f99c:	10002b26 	beq	r2,zero,fa4c <___vfiprintf_internal_r+0x1280>
    f9a0:	d8802217 	ldw	r2,136(sp)
    f9a4:	0029883a 	mov	r20,zero
    f9a8:	14c0000b 	ldhu	r19,0(r2)
    f9ac:	10800104 	addi	r2,r2,4
    f9b0:	d8802215 	stw	r2,136(sp)
    f9b4:	003d5d06 	br	ef2c <__alt_exception_stack_pointer+0xf800ef2c>
    f9b8:	d9402017 	ldw	r5,128(sp)
    f9bc:	d9002117 	ldw	r4,132(sp)
    f9c0:	d9801a04 	addi	r6,sp,104
    f9c4:	d8c02a15 	stw	r3,168(sp)
    f9c8:	d9c02b15 	stw	r7,172(sp)
    f9cc:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    f9d0:	d8c02a17 	ldw	r3,168(sp)
    f9d4:	d9c02b17 	ldw	r7,172(sp)
    f9d8:	103eb41e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    f9dc:	d9001b17 	ldw	r4,108(sp)
    f9e0:	d8801c17 	ldw	r2,112(sp)
    f9e4:	d811883a 	mov	r8,sp
    f9e8:	21400044 	addi	r5,r4,1
    f9ec:	003e6706 	br	f38c <__alt_exception_stack_pointer+0xf800f38c>
    f9f0:	00bfffc4 	movi	r2,-1
    f9f4:	003c4a06 	br	eb20 <__alt_exception_stack_pointer+0xf800eb20>
    f9f8:	9805883a 	mov	r2,r19
    f9fc:	003ee806 	br	f5a0 <__alt_exception_stack_pointer+0xf800f5a0>
    fa00:	d8c02217 	ldw	r3,136(sp)
    fa04:	0029883a 	mov	r20,zero
    fa08:	18800104 	addi	r2,r3,4
    fa0c:	1cc0000b 	ldhu	r19,0(r3)
    fa10:	803f9e0e 	bge	r16,zero,f88c <__alt_exception_stack_pointer+0xf800f88c>
    fa14:	003dd706 	br	f174 <__alt_exception_stack_pointer+0xf800f174>
    fa18:	d8c02217 	ldw	r3,136(sp)
    fa1c:	d9002417 	ldw	r4,144(sp)
    fa20:	18800017 	ldw	r2,0(r3)
    fa24:	18c00104 	addi	r3,r3,4
    fa28:	d8c02215 	stw	r3,136(sp)
    fa2c:	11000015 	stw	r4,0(r2)
    fa30:	003b9a06 	br	e89c <__alt_exception_stack_pointer+0xf800e89c>
    fa34:	d8c02217 	ldw	r3,136(sp)
    fa38:	0029883a 	mov	r20,zero
    fa3c:	18800104 	addi	r2,r3,4
    fa40:	1cc0000b 	ldhu	r19,0(r3)
    fa44:	803db20e 	bge	r16,zero,f110 <__alt_exception_stack_pointer+0xf800f110>
    fa48:	003fb906 	br	f930 <__alt_exception_stack_pointer+0xf800f930>
    fa4c:	d9002217 	ldw	r4,136(sp)
    fa50:	0029883a 	mov	r20,zero
    fa54:	24c00017 	ldw	r19,0(r4)
    fa58:	21000104 	addi	r4,r4,4
    fa5c:	d9002215 	stw	r4,136(sp)
    fa60:	003d3206 	br	ef2c <__alt_exception_stack_pointer+0xf800ef2c>
    fa64:	d8c02217 	ldw	r3,136(sp)
    fa68:	1cc00017 	ldw	r19,0(r3)
    fa6c:	18c00104 	addi	r3,r3,4
    fa70:	d8c02215 	stw	r3,136(sp)
    fa74:	9829d7fa 	srai	r20,r19,31
    fa78:	a005883a 	mov	r2,r20
    fa7c:	003d4b06 	br	efac <__alt_exception_stack_pointer+0xf800efac>
    fa80:	0009883a 	mov	r4,zero
    fa84:	01400044 	movi	r5,1
    fa88:	d811883a 	mov	r8,sp
    fa8c:	003e4f06 	br	f3cc <__alt_exception_stack_pointer+0xf800f3cc>
    fa90:	d8c02215 	stw	r3,136(sp)
    fa94:	002b883a 	mov	r21,zero
    fa98:	003db806 	br	f17c <__alt_exception_stack_pointer+0xf800f17c>
    fa9c:	d811883a 	mov	r8,sp
    faa0:	003e9606 	br	f4fc <__alt_exception_stack_pointer+0xf800f4fc>
    faa4:	01000074 	movhi	r4,1
    faa8:	2115dc04 	addi	r4,r4,22384
    faac:	d9002315 	stw	r4,140(sp)
    fab0:	003e6306 	br	f440 <__alt_exception_stack_pointer+0xf800f440>
    fab4:	b0c00043 	ldbu	r3,1(r22)
    fab8:	8c400814 	ori	r17,r17,32
    fabc:	b5800044 	addi	r22,r22,1
    fac0:	18c03fcc 	andi	r3,r3,255
    fac4:	18c0201c 	xori	r3,r3,128
    fac8:	18ffe004 	addi	r3,r3,-128
    facc:	003b9c06 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    fad0:	b809883a 	mov	r4,r23
    fad4:	da002a15 	stw	r8,168(sp)
    fad8:	00078dc0 	call	78dc <strlen>
    fadc:	1029883a 	mov	r20,r2
    fae0:	dd401d83 	ldbu	r21,118(sp)
    fae4:	df002215 	stw	fp,136(sp)
    fae8:	0021883a 	mov	r16,zero
    faec:	da002a17 	ldw	r8,168(sp)
    faf0:	003c3906 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    faf4:	d9402017 	ldw	r5,128(sp)
    faf8:	d9002117 	ldw	r4,132(sp)
    fafc:	d9801a04 	addi	r6,sp,104
    fb00:	000e6b80 	call	e6b8 <__sprint_r.part.0>
    fb04:	103e691e 	bne	r2,zero,f4ac <__alt_exception_stack_pointer+0xf800f4ac>
    fb08:	d9001b17 	ldw	r4,108(sp)
    fb0c:	d8801c17 	ldw	r2,112(sp)
    fb10:	d811883a 	mov	r8,sp
    fb14:	21400044 	addi	r5,r4,1
    fb18:	003e2e06 	br	f3d4 <__alt_exception_stack_pointer+0xf800f3d4>
    fb1c:	01000074 	movhi	r4,1
    fb20:	2115e004 	addi	r4,r4,22400
    fb24:	d9002315 	stw	r4,140(sp)
    fb28:	d9001b17 	ldw	r4,108(sp)
    fb2c:	21000044 	addi	r4,r4,1
    fb30:	003c5e06 	br	ecac <__alt_exception_stack_pointer+0xf800ecac>
    fb34:	002b883a 	mov	r21,zero
    fb38:	00800084 	movi	r2,2
    fb3c:	10803fcc 	andi	r2,r2,255
    fb40:	01000044 	movi	r4,1
    fb44:	11002b26 	beq	r2,r4,fbf4 <___vfiprintf_internal_r+0x1428>
    fb48:	01000084 	movi	r4,2
    fb4c:	11002b1e 	bne	r2,r4,fbfc <___vfiprintf_internal_r+0x1430>
    fb50:	1823883a 	mov	r17,r3
    fb54:	003ee506 	br	f6ec <__alt_exception_stack_pointer+0xf800f6ec>
    fb58:	8807883a 	mov	r3,r17
    fb5c:	00800044 	movi	r2,1
    fb60:	003ff606 	br	fb3c <__alt_exception_stack_pointer+0xf800fb3c>
    fb64:	00800184 	movi	r2,6
    fb68:	1400012e 	bgeu	r2,r16,fb70 <___vfiprintf_internal_r+0x13a4>
    fb6c:	1021883a 	mov	r16,r2
    fb70:	8029883a 	mov	r20,r16
    fb74:	8027883a 	mov	r19,r16
    fb78:	80002216 	blt	r16,zero,fc04 <___vfiprintf_internal_r+0x1438>
    fb7c:	05c00074 	movhi	r23,1
    fb80:	df002215 	stw	fp,136(sp)
    fb84:	bdd58104 	addi	r23,r23,22020
    fb88:	003cfb06 	br	ef78 <__alt_exception_stack_pointer+0xf800ef78>
    fb8c:	d9002217 	ldw	r4,136(sp)
    fb90:	d9402417 	ldw	r5,144(sp)
    fb94:	20800017 	ldw	r2,0(r4)
    fb98:	21000104 	addi	r4,r4,4
    fb9c:	d9002215 	stw	r4,136(sp)
    fba0:	11400015 	stw	r5,0(r2)
    fba4:	003b3d06 	br	e89c <__alt_exception_stack_pointer+0xf800e89c>
    fba8:	01400074 	movhi	r5,1
    fbac:	2955e004 	addi	r5,r5,22400
    fbb0:	d9402315 	stw	r5,140(sp)
    fbb4:	d9401b17 	ldw	r5,108(sp)
    fbb8:	29400044 	addi	r5,r5,1
    fbbc:	003e6d06 	br	f574 <__alt_exception_stack_pointer+0xf800f574>
    fbc0:	8029883a 	mov	r20,r16
    fbc4:	dd401d83 	ldbu	r21,118(sp)
    fbc8:	df002215 	stw	fp,136(sp)
    fbcc:	0021883a 	mov	r16,zero
    fbd0:	003c0106 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    fbd4:	00c00074 	movhi	r3,1
    fbd8:	18d5dc04 	addi	r3,r3,22384
    fbdc:	d8c02315 	stw	r3,140(sp)
    fbe0:	280d883a 	mov	r6,r5
    fbe4:	003c6906 	br	ed8c <__alt_exception_stack_pointer+0xf800ed8c>
    fbe8:	802d883a 	mov	r22,r16
    fbec:	0021883a 	mov	r16,zero
    fbf0:	003b5406 	br	e944 <__alt_exception_stack_pointer+0xf800e944>
    fbf4:	1823883a 	mov	r17,r3
    fbf8:	003cf306 	br	efc8 <__alt_exception_stack_pointer+0xf800efc8>
    fbfc:	1823883a 	mov	r17,r3
    fc00:	003cad06 	br	eeb8 <__alt_exception_stack_pointer+0xf800eeb8>
    fc04:	0027883a 	mov	r19,zero
    fc08:	003fdc06 	br	fb7c <__alt_exception_stack_pointer+0xf800fb7c>
    fc0c:	d9402217 	ldw	r5,136(sp)
    fc10:	8005883a 	mov	r2,r16
    fc14:	b0c00043 	ldbu	r3,1(r22)
    fc18:	2c000017 	ldw	r16,0(r5)
    fc1c:	29000104 	addi	r4,r5,4
    fc20:	d9002215 	stw	r4,136(sp)
    fc24:	102d883a 	mov	r22,r2
    fc28:	803fa50e 	bge	r16,zero,fac0 <__alt_exception_stack_pointer+0xf800fac0>
    fc2c:	18c03fcc 	andi	r3,r3,255
    fc30:	18c0201c 	xori	r3,r3,128
    fc34:	043fffc4 	movi	r16,-1
    fc38:	18ffe004 	addi	r3,r3,-128
    fc3c:	003b4006 	br	e940 <__alt_exception_stack_pointer+0xf800e940>
    fc40:	d9402303 	ldbu	r5,140(sp)
    fc44:	d9401d85 	stb	r5,118(sp)
    fc48:	003cae06 	br	ef04 <__alt_exception_stack_pointer+0xf800ef04>
    fc4c:	d8c02303 	ldbu	r3,140(sp)
    fc50:	d8c01d85 	stb	r3,118(sp)
    fc54:	003d1406 	br	f0a8 <__alt_exception_stack_pointer+0xf800f0a8>
    fc58:	d8c02303 	ldbu	r3,140(sp)
    fc5c:	d8c01d85 	stb	r3,118(sp)
    fc60:	003cca06 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    fc64:	8880004c 	andi	r2,r17,1
    fc68:	002b883a 	mov	r21,zero
    fc6c:	10000526 	beq	r2,zero,fc84 <___vfiprintf_internal_r+0x14b8>
    fc70:	00800c04 	movi	r2,48
    fc74:	d88019c5 	stb	r2,103(sp)
    fc78:	dd002817 	ldw	r20,160(sp)
    fc7c:	ddc019c4 	addi	r23,sp,103
    fc80:	003bd506 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    fc84:	0029883a 	mov	r20,zero
    fc88:	ddc01a04 	addi	r23,sp,104
    fc8c:	003bd206 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    fc90:	d9002303 	ldbu	r4,140(sp)
    fc94:	d9001d85 	stb	r4,118(sp)
    fc98:	003da606 	br	f334 <__alt_exception_stack_pointer+0xf800f334>
    fc9c:	d8c02303 	ldbu	r3,140(sp)
    fca0:	d8c01d85 	stb	r3,118(sp)
    fca4:	003c7606 	br	ee80 <__alt_exception_stack_pointer+0xf800ee80>
    fca8:	d8c02303 	ldbu	r3,140(sp)
    fcac:	d8c01d85 	stb	r3,118(sp)
    fcb0:	003c6506 	br	ee48 <__alt_exception_stack_pointer+0xf800ee48>
    fcb4:	d9002303 	ldbu	r4,140(sp)
    fcb8:	d9001d85 	stb	r4,118(sp)
    fcbc:	003d3d06 	br	f1b4 <__alt_exception_stack_pointer+0xf800f1b4>
    fcc0:	d8c02303 	ldbu	r3,140(sp)
    fcc4:	d8c01d85 	stb	r3,118(sp)
    fcc8:	003d1d06 	br	f140 <__alt_exception_stack_pointer+0xf800f140>
    fccc:	d8c02303 	ldbu	r3,140(sp)
    fcd0:	d8c01d85 	stb	r3,118(sp)
    fcd4:	003d0306 	br	f0e4 <__alt_exception_stack_pointer+0xf800f0e4>

0000fcd8 <__vfiprintf_internal>:
    fcd8:	00800074 	movhi	r2,1
    fcdc:	109cd104 	addi	r2,r2,29508
    fce0:	300f883a 	mov	r7,r6
    fce4:	280d883a 	mov	r6,r5
    fce8:	200b883a 	mov	r5,r4
    fcec:	11000017 	ldw	r4,0(r2)
    fcf0:	000e7cc1 	jmpi	e7cc <___vfiprintf_internal_r>

0000fcf4 <__sbprintf>:
    fcf4:	2880030b 	ldhu	r2,12(r5)
    fcf8:	2ac01917 	ldw	r11,100(r5)
    fcfc:	2a80038b 	ldhu	r10,14(r5)
    fd00:	2a400717 	ldw	r9,28(r5)
    fd04:	2a000917 	ldw	r8,36(r5)
    fd08:	defee204 	addi	sp,sp,-1144
    fd0c:	00c10004 	movi	r3,1024
    fd10:	dc011a15 	stw	r16,1128(sp)
    fd14:	10bfff4c 	andi	r2,r2,65533
    fd18:	2821883a 	mov	r16,r5
    fd1c:	d8cb883a 	add	r5,sp,r3
    fd20:	dc811c15 	stw	r18,1136(sp)
    fd24:	dc411b15 	stw	r17,1132(sp)
    fd28:	dfc11d15 	stw	ra,1140(sp)
    fd2c:	2025883a 	mov	r18,r4
    fd30:	d881030d 	sth	r2,1036(sp)
    fd34:	dac11915 	stw	r11,1124(sp)
    fd38:	da81038d 	sth	r10,1038(sp)
    fd3c:	da410715 	stw	r9,1052(sp)
    fd40:	da010915 	stw	r8,1060(sp)
    fd44:	dec10015 	stw	sp,1024(sp)
    fd48:	dec10415 	stw	sp,1040(sp)
    fd4c:	d8c10215 	stw	r3,1032(sp)
    fd50:	d8c10515 	stw	r3,1044(sp)
    fd54:	d8010615 	stw	zero,1048(sp)
    fd58:	000e7cc0 	call	e7cc <___vfiprintf_internal_r>
    fd5c:	1023883a 	mov	r17,r2
    fd60:	10000416 	blt	r2,zero,fd74 <__sbprintf+0x80>
    fd64:	d9410004 	addi	r5,sp,1024
    fd68:	9009883a 	mov	r4,r18
    fd6c:	000b9500 	call	b950 <_fflush_r>
    fd70:	10000d1e 	bne	r2,zero,fda8 <__sbprintf+0xb4>
    fd74:	d881030b 	ldhu	r2,1036(sp)
    fd78:	1080100c 	andi	r2,r2,64
    fd7c:	10000326 	beq	r2,zero,fd8c <__sbprintf+0x98>
    fd80:	8080030b 	ldhu	r2,12(r16)
    fd84:	10801014 	ori	r2,r2,64
    fd88:	8080030d 	sth	r2,12(r16)
    fd8c:	8805883a 	mov	r2,r17
    fd90:	dfc11d17 	ldw	ra,1140(sp)
    fd94:	dc811c17 	ldw	r18,1136(sp)
    fd98:	dc411b17 	ldw	r17,1132(sp)
    fd9c:	dc011a17 	ldw	r16,1128(sp)
    fda0:	dec11e04 	addi	sp,sp,1144
    fda4:	f800283a 	ret
    fda8:	047fffc4 	movi	r17,-1
    fdac:	003ff106 	br	fd74 <__alt_exception_stack_pointer+0xf800fd74>

0000fdb0 <_write_r>:
    fdb0:	defffd04 	addi	sp,sp,-12
    fdb4:	2805883a 	mov	r2,r5
    fdb8:	dc000015 	stw	r16,0(sp)
    fdbc:	040000b4 	movhi	r16,2
    fdc0:	dc400115 	stw	r17,4(sp)
    fdc4:	300b883a 	mov	r5,r6
    fdc8:	8423cb04 	addi	r16,r16,-28884
    fdcc:	2023883a 	mov	r17,r4
    fdd0:	380d883a 	mov	r6,r7
    fdd4:	1009883a 	mov	r4,r2
    fdd8:	dfc00215 	stw	ra,8(sp)
    fddc:	80000015 	stw	zero,0(r16)
    fde0:	00127a00 	call	127a0 <write>
    fde4:	00ffffc4 	movi	r3,-1
    fde8:	10c00526 	beq	r2,r3,fe00 <_write_r+0x50>
    fdec:	dfc00217 	ldw	ra,8(sp)
    fdf0:	dc400117 	ldw	r17,4(sp)
    fdf4:	dc000017 	ldw	r16,0(sp)
    fdf8:	dec00304 	addi	sp,sp,12
    fdfc:	f800283a 	ret
    fe00:	80c00017 	ldw	r3,0(r16)
    fe04:	183ff926 	beq	r3,zero,fdec <__alt_exception_stack_pointer+0xf800fdec>
    fe08:	88c00015 	stw	r3,0(r17)
    fe0c:	003ff706 	br	fdec <__alt_exception_stack_pointer+0xf800fdec>

0000fe10 <_close_r>:
    fe10:	defffd04 	addi	sp,sp,-12
    fe14:	dc000015 	stw	r16,0(sp)
    fe18:	040000b4 	movhi	r16,2
    fe1c:	dc400115 	stw	r17,4(sp)
    fe20:	8423cb04 	addi	r16,r16,-28884
    fe24:	2023883a 	mov	r17,r4
    fe28:	2809883a 	mov	r4,r5
    fe2c:	dfc00215 	stw	ra,8(sp)
    fe30:	80000015 	stw	zero,0(r16)
    fe34:	0011e640 	call	11e64 <close>
    fe38:	00ffffc4 	movi	r3,-1
    fe3c:	10c00526 	beq	r2,r3,fe54 <_close_r+0x44>
    fe40:	dfc00217 	ldw	ra,8(sp)
    fe44:	dc400117 	ldw	r17,4(sp)
    fe48:	dc000017 	ldw	r16,0(sp)
    fe4c:	dec00304 	addi	sp,sp,12
    fe50:	f800283a 	ret
    fe54:	80c00017 	ldw	r3,0(r16)
    fe58:	183ff926 	beq	r3,zero,fe40 <__alt_exception_stack_pointer+0xf800fe40>
    fe5c:	88c00015 	stw	r3,0(r17)
    fe60:	003ff706 	br	fe40 <__alt_exception_stack_pointer+0xf800fe40>

0000fe64 <_calloc_r>:
    fe64:	defffe04 	addi	sp,sp,-8
    fe68:	2805883a 	mov	r2,r5
    fe6c:	dc000015 	stw	r16,0(sp)
    fe70:	300b883a 	mov	r5,r6
    fe74:	2021883a 	mov	r16,r4
    fe78:	1009883a 	mov	r4,r2
    fe7c:	dfc00115 	stw	ra,4(sp)
    fe80:	00050200 	call	5020 <__mulsi3>
    fe84:	100b883a 	mov	r5,r2
    fe88:	8009883a 	mov	r4,r16
    fe8c:	0006df40 	call	6df4 <_malloc_r>
    fe90:	10002926 	beq	r2,zero,ff38 <_calloc_r+0xd4>
    fe94:	11bfff17 	ldw	r6,-4(r2)
    fe98:	1021883a 	mov	r16,r2
    fe9c:	00bfff04 	movi	r2,-4
    fea0:	308c703a 	and	r6,r6,r2
    fea4:	00c00904 	movi	r3,36
    fea8:	308d883a 	add	r6,r6,r2
    feac:	19801636 	bltu	r3,r6,ff08 <_calloc_r+0xa4>
    feb0:	008004c4 	movi	r2,19
    feb4:	11800b2e 	bgeu	r2,r6,fee4 <_calloc_r+0x80>
    feb8:	80000015 	stw	zero,0(r16)
    febc:	80000115 	stw	zero,4(r16)
    fec0:	008006c4 	movi	r2,27
    fec4:	11801a2e 	bgeu	r2,r6,ff30 <_calloc_r+0xcc>
    fec8:	80000215 	stw	zero,8(r16)
    fecc:	80000315 	stw	zero,12(r16)
    fed0:	30c0151e 	bne	r6,r3,ff28 <_calloc_r+0xc4>
    fed4:	80000415 	stw	zero,16(r16)
    fed8:	80800604 	addi	r2,r16,24
    fedc:	80000515 	stw	zero,20(r16)
    fee0:	00000106 	br	fee8 <_calloc_r+0x84>
    fee4:	8005883a 	mov	r2,r16
    fee8:	10000015 	stw	zero,0(r2)
    feec:	10000115 	stw	zero,4(r2)
    fef0:	10000215 	stw	zero,8(r2)
    fef4:	8005883a 	mov	r2,r16
    fef8:	dfc00117 	ldw	ra,4(sp)
    fefc:	dc000017 	ldw	r16,0(sp)
    ff00:	dec00204 	addi	sp,sp,8
    ff04:	f800283a 	ret
    ff08:	000b883a 	mov	r5,zero
    ff0c:	8009883a 	mov	r4,r16
    ff10:	000cce80 	call	cce8 <memset>
    ff14:	8005883a 	mov	r2,r16
    ff18:	dfc00117 	ldw	ra,4(sp)
    ff1c:	dc000017 	ldw	r16,0(sp)
    ff20:	dec00204 	addi	sp,sp,8
    ff24:	f800283a 	ret
    ff28:	80800404 	addi	r2,r16,16
    ff2c:	003fee06 	br	fee8 <__alt_exception_stack_pointer+0xf800fee8>
    ff30:	80800204 	addi	r2,r16,8
    ff34:	003fec06 	br	fee8 <__alt_exception_stack_pointer+0xf800fee8>
    ff38:	0005883a 	mov	r2,zero
    ff3c:	003fee06 	br	fef8 <__alt_exception_stack_pointer+0xf800fef8>

0000ff40 <_fclose_r>:
    ff40:	28003926 	beq	r5,zero,10028 <_fclose_r+0xe8>
    ff44:	defffc04 	addi	sp,sp,-16
    ff48:	dc400115 	stw	r17,4(sp)
    ff4c:	dc000015 	stw	r16,0(sp)
    ff50:	dfc00315 	stw	ra,12(sp)
    ff54:	dc800215 	stw	r18,8(sp)
    ff58:	2023883a 	mov	r17,r4
    ff5c:	2821883a 	mov	r16,r5
    ff60:	20000226 	beq	r4,zero,ff6c <_fclose_r+0x2c>
    ff64:	20800e17 	ldw	r2,56(r4)
    ff68:	10002726 	beq	r2,zero,10008 <_fclose_r+0xc8>
    ff6c:	8080030f 	ldh	r2,12(r16)
    ff70:	1000071e 	bne	r2,zero,ff90 <_fclose_r+0x50>
    ff74:	0005883a 	mov	r2,zero
    ff78:	dfc00317 	ldw	ra,12(sp)
    ff7c:	dc800217 	ldw	r18,8(sp)
    ff80:	dc400117 	ldw	r17,4(sp)
    ff84:	dc000017 	ldw	r16,0(sp)
    ff88:	dec00404 	addi	sp,sp,16
    ff8c:	f800283a 	ret
    ff90:	800b883a 	mov	r5,r16
    ff94:	8809883a 	mov	r4,r17
    ff98:	000b7340 	call	b734 <__sflush_r>
    ff9c:	1025883a 	mov	r18,r2
    ffa0:	80800b17 	ldw	r2,44(r16)
    ffa4:	10000426 	beq	r2,zero,ffb8 <_fclose_r+0x78>
    ffa8:	81400717 	ldw	r5,28(r16)
    ffac:	8809883a 	mov	r4,r17
    ffb0:	103ee83a 	callr	r2
    ffb4:	10001616 	blt	r2,zero,10010 <_fclose_r+0xd0>
    ffb8:	8080030b 	ldhu	r2,12(r16)
    ffbc:	1080200c 	andi	r2,r2,128
    ffc0:	1000151e 	bne	r2,zero,10018 <_fclose_r+0xd8>
    ffc4:	81400c17 	ldw	r5,48(r16)
    ffc8:	28000526 	beq	r5,zero,ffe0 <_fclose_r+0xa0>
    ffcc:	80801004 	addi	r2,r16,64
    ffd0:	28800226 	beq	r5,r2,ffdc <_fclose_r+0x9c>
    ffd4:	8809883a 	mov	r4,r17
    ffd8:	000beb00 	call	beb0 <_free_r>
    ffdc:	80000c15 	stw	zero,48(r16)
    ffe0:	81401117 	ldw	r5,68(r16)
    ffe4:	28000326 	beq	r5,zero,fff4 <_fclose_r+0xb4>
    ffe8:	8809883a 	mov	r4,r17
    ffec:	000beb00 	call	beb0 <_free_r>
    fff0:	80001115 	stw	zero,68(r16)
    fff4:	000bd4c0 	call	bd4c <__sfp_lock_acquire>
    fff8:	8000030d 	sth	zero,12(r16)
    fffc:	000bd500 	call	bd50 <__sfp_lock_release>
   10000:	9005883a 	mov	r2,r18
   10004:	003fdc06 	br	ff78 <__alt_exception_stack_pointer+0xf800ff78>
   10008:	000bd3c0 	call	bd3c <__sinit>
   1000c:	003fd706 	br	ff6c <__alt_exception_stack_pointer+0xf800ff6c>
   10010:	04bfffc4 	movi	r18,-1
   10014:	003fe806 	br	ffb8 <__alt_exception_stack_pointer+0xf800ffb8>
   10018:	81400417 	ldw	r5,16(r16)
   1001c:	8809883a 	mov	r4,r17
   10020:	000beb00 	call	beb0 <_free_r>
   10024:	003fe706 	br	ffc4 <__alt_exception_stack_pointer+0xf800ffc4>
   10028:	0005883a 	mov	r2,zero
   1002c:	f800283a 	ret

00010030 <fclose>:
   10030:	00800074 	movhi	r2,1
   10034:	109cd104 	addi	r2,r2,29508
   10038:	200b883a 	mov	r5,r4
   1003c:	11000017 	ldw	r4,0(r2)
   10040:	000ff401 	jmpi	ff40 <_fclose_r>

00010044 <__fputwc>:
   10044:	defff804 	addi	sp,sp,-32
   10048:	dcc00415 	stw	r19,16(sp)
   1004c:	dc800315 	stw	r18,12(sp)
   10050:	dc000115 	stw	r16,4(sp)
   10054:	dfc00715 	stw	ra,28(sp)
   10058:	dd400615 	stw	r21,24(sp)
   1005c:	dd000515 	stw	r20,20(sp)
   10060:	dc400215 	stw	r17,8(sp)
   10064:	2027883a 	mov	r19,r4
   10068:	2825883a 	mov	r18,r5
   1006c:	3021883a 	mov	r16,r6
   10070:	000c8980 	call	c898 <__locale_mb_cur_max>
   10074:	00c00044 	movi	r3,1
   10078:	10c03e26 	beq	r2,r3,10174 <__fputwc+0x130>
   1007c:	81c01704 	addi	r7,r16,92
   10080:	900d883a 	mov	r6,r18
   10084:	d80b883a 	mov	r5,sp
   10088:	9809883a 	mov	r4,r19
   1008c:	00105140 	call	10514 <_wcrtomb_r>
   10090:	1029883a 	mov	r20,r2
   10094:	00bfffc4 	movi	r2,-1
   10098:	a0802026 	beq	r20,r2,1011c <__fputwc+0xd8>
   1009c:	d9400003 	ldbu	r5,0(sp)
   100a0:	a0001c26 	beq	r20,zero,10114 <__fputwc+0xd0>
   100a4:	0023883a 	mov	r17,zero
   100a8:	05400284 	movi	r21,10
   100ac:	00000906 	br	100d4 <__fputwc+0x90>
   100b0:	80800017 	ldw	r2,0(r16)
   100b4:	11400005 	stb	r5,0(r2)
   100b8:	80c00017 	ldw	r3,0(r16)
   100bc:	18c00044 	addi	r3,r3,1
   100c0:	80c00015 	stw	r3,0(r16)
   100c4:	8c400044 	addi	r17,r17,1
   100c8:	dc45883a 	add	r2,sp,r17
   100cc:	8d00112e 	bgeu	r17,r20,10114 <__fputwc+0xd0>
   100d0:	11400003 	ldbu	r5,0(r2)
   100d4:	80c00217 	ldw	r3,8(r16)
   100d8:	18ffffc4 	addi	r3,r3,-1
   100dc:	80c00215 	stw	r3,8(r16)
   100e0:	183ff30e 	bge	r3,zero,100b0 <__alt_exception_stack_pointer+0xf80100b0>
   100e4:	80800617 	ldw	r2,24(r16)
   100e8:	18801916 	blt	r3,r2,10150 <__fputwc+0x10c>
   100ec:	80800017 	ldw	r2,0(r16)
   100f0:	11400005 	stb	r5,0(r2)
   100f4:	80800017 	ldw	r2,0(r16)
   100f8:	10c00003 	ldbu	r3,0(r2)
   100fc:	10800044 	addi	r2,r2,1
   10100:	1d402326 	beq	r3,r21,10190 <__fputwc+0x14c>
   10104:	80800015 	stw	r2,0(r16)
   10108:	8c400044 	addi	r17,r17,1
   1010c:	dc45883a 	add	r2,sp,r17
   10110:	8d3fef36 	bltu	r17,r20,100d0 <__alt_exception_stack_pointer+0xf80100d0>
   10114:	9005883a 	mov	r2,r18
   10118:	00000406 	br	1012c <__fputwc+0xe8>
   1011c:	80c0030b 	ldhu	r3,12(r16)
   10120:	a005883a 	mov	r2,r20
   10124:	18c01014 	ori	r3,r3,64
   10128:	80c0030d 	sth	r3,12(r16)
   1012c:	dfc00717 	ldw	ra,28(sp)
   10130:	dd400617 	ldw	r21,24(sp)
   10134:	dd000517 	ldw	r20,20(sp)
   10138:	dcc00417 	ldw	r19,16(sp)
   1013c:	dc800317 	ldw	r18,12(sp)
   10140:	dc400217 	ldw	r17,8(sp)
   10144:	dc000117 	ldw	r16,4(sp)
   10148:	dec00804 	addi	sp,sp,32
   1014c:	f800283a 	ret
   10150:	800d883a 	mov	r6,r16
   10154:	29403fcc 	andi	r5,r5,255
   10158:	9809883a 	mov	r4,r19
   1015c:	00103bc0 	call	103bc <__swbuf_r>
   10160:	10bfffe0 	cmpeqi	r2,r2,-1
   10164:	10803fcc 	andi	r2,r2,255
   10168:	103fd626 	beq	r2,zero,100c4 <__alt_exception_stack_pointer+0xf80100c4>
   1016c:	00bfffc4 	movi	r2,-1
   10170:	003fee06 	br	1012c <__alt_exception_stack_pointer+0xf801012c>
   10174:	90ffffc4 	addi	r3,r18,-1
   10178:	01003f84 	movi	r4,254
   1017c:	20ffbf36 	bltu	r4,r3,1007c <__alt_exception_stack_pointer+0xf801007c>
   10180:	900b883a 	mov	r5,r18
   10184:	dc800005 	stb	r18,0(sp)
   10188:	1029883a 	mov	r20,r2
   1018c:	003fc506 	br	100a4 <__alt_exception_stack_pointer+0xf80100a4>
   10190:	800d883a 	mov	r6,r16
   10194:	a80b883a 	mov	r5,r21
   10198:	9809883a 	mov	r4,r19
   1019c:	00103bc0 	call	103bc <__swbuf_r>
   101a0:	10bfffe0 	cmpeqi	r2,r2,-1
   101a4:	003fef06 	br	10164 <__alt_exception_stack_pointer+0xf8010164>

000101a8 <_fputwc_r>:
   101a8:	3080030b 	ldhu	r2,12(r6)
   101ac:	10c8000c 	andi	r3,r2,8192
   101b0:	1800051e 	bne	r3,zero,101c8 <_fputwc_r+0x20>
   101b4:	30c01917 	ldw	r3,100(r6)
   101b8:	10880014 	ori	r2,r2,8192
   101bc:	3080030d 	sth	r2,12(r6)
   101c0:	18880014 	ori	r2,r3,8192
   101c4:	30801915 	stw	r2,100(r6)
   101c8:	00100441 	jmpi	10044 <__fputwc>

000101cc <fputwc>:
   101cc:	00800074 	movhi	r2,1
   101d0:	defffc04 	addi	sp,sp,-16
   101d4:	109cd104 	addi	r2,r2,29508
   101d8:	dc000115 	stw	r16,4(sp)
   101dc:	14000017 	ldw	r16,0(r2)
   101e0:	dc400215 	stw	r17,8(sp)
   101e4:	dfc00315 	stw	ra,12(sp)
   101e8:	2023883a 	mov	r17,r4
   101ec:	80000226 	beq	r16,zero,101f8 <fputwc+0x2c>
   101f0:	80800e17 	ldw	r2,56(r16)
   101f4:	10001026 	beq	r2,zero,10238 <fputwc+0x6c>
   101f8:	2880030b 	ldhu	r2,12(r5)
   101fc:	10c8000c 	andi	r3,r2,8192
   10200:	1800051e 	bne	r3,zero,10218 <fputwc+0x4c>
   10204:	28c01917 	ldw	r3,100(r5)
   10208:	10880014 	ori	r2,r2,8192
   1020c:	2880030d 	sth	r2,12(r5)
   10210:	18880014 	ori	r2,r3,8192
   10214:	28801915 	stw	r2,100(r5)
   10218:	280d883a 	mov	r6,r5
   1021c:	8009883a 	mov	r4,r16
   10220:	880b883a 	mov	r5,r17
   10224:	dfc00317 	ldw	ra,12(sp)
   10228:	dc400217 	ldw	r17,8(sp)
   1022c:	dc000117 	ldw	r16,4(sp)
   10230:	dec00404 	addi	sp,sp,16
   10234:	00100441 	jmpi	10044 <__fputwc>
   10238:	8009883a 	mov	r4,r16
   1023c:	d9400015 	stw	r5,0(sp)
   10240:	000bd3c0 	call	bd3c <__sinit>
   10244:	d9400017 	ldw	r5,0(sp)
   10248:	003feb06 	br	101f8 <__alt_exception_stack_pointer+0xf80101f8>

0001024c <_fstat_r>:
   1024c:	defffd04 	addi	sp,sp,-12
   10250:	2805883a 	mov	r2,r5
   10254:	dc000015 	stw	r16,0(sp)
   10258:	040000b4 	movhi	r16,2
   1025c:	dc400115 	stw	r17,4(sp)
   10260:	8423cb04 	addi	r16,r16,-28884
   10264:	2023883a 	mov	r17,r4
   10268:	300b883a 	mov	r5,r6
   1026c:	1009883a 	mov	r4,r2
   10270:	dfc00215 	stw	ra,8(sp)
   10274:	80000015 	stw	zero,0(r16)
   10278:	0011fa40 	call	11fa4 <fstat>
   1027c:	00ffffc4 	movi	r3,-1
   10280:	10c00526 	beq	r2,r3,10298 <_fstat_r+0x4c>
   10284:	dfc00217 	ldw	ra,8(sp)
   10288:	dc400117 	ldw	r17,4(sp)
   1028c:	dc000017 	ldw	r16,0(sp)
   10290:	dec00304 	addi	sp,sp,12
   10294:	f800283a 	ret
   10298:	80c00017 	ldw	r3,0(r16)
   1029c:	183ff926 	beq	r3,zero,10284 <__alt_exception_stack_pointer+0xf8010284>
   102a0:	88c00015 	stw	r3,0(r17)
   102a4:	003ff706 	br	10284 <__alt_exception_stack_pointer+0xf8010284>

000102a8 <_isatty_r>:
   102a8:	defffd04 	addi	sp,sp,-12
   102ac:	dc000015 	stw	r16,0(sp)
   102b0:	040000b4 	movhi	r16,2
   102b4:	dc400115 	stw	r17,4(sp)
   102b8:	8423cb04 	addi	r16,r16,-28884
   102bc:	2023883a 	mov	r17,r4
   102c0:	2809883a 	mov	r4,r5
   102c4:	dfc00215 	stw	ra,8(sp)
   102c8:	80000015 	stw	zero,0(r16)
   102cc:	00120980 	call	12098 <isatty>
   102d0:	00ffffc4 	movi	r3,-1
   102d4:	10c00526 	beq	r2,r3,102ec <_isatty_r+0x44>
   102d8:	dfc00217 	ldw	ra,8(sp)
   102dc:	dc400117 	ldw	r17,4(sp)
   102e0:	dc000017 	ldw	r16,0(sp)
   102e4:	dec00304 	addi	sp,sp,12
   102e8:	f800283a 	ret
   102ec:	80c00017 	ldw	r3,0(r16)
   102f0:	183ff926 	beq	r3,zero,102d8 <__alt_exception_stack_pointer+0xf80102d8>
   102f4:	88c00015 	stw	r3,0(r17)
   102f8:	003ff706 	br	102d8 <__alt_exception_stack_pointer+0xf80102d8>

000102fc <_lseek_r>:
   102fc:	defffd04 	addi	sp,sp,-12
   10300:	2805883a 	mov	r2,r5
   10304:	dc000015 	stw	r16,0(sp)
   10308:	040000b4 	movhi	r16,2
   1030c:	dc400115 	stw	r17,4(sp)
   10310:	300b883a 	mov	r5,r6
   10314:	8423cb04 	addi	r16,r16,-28884
   10318:	2023883a 	mov	r17,r4
   1031c:	380d883a 	mov	r6,r7
   10320:	1009883a 	mov	r4,r2
   10324:	dfc00215 	stw	ra,8(sp)
   10328:	80000015 	stw	zero,0(r16)
   1032c:	001226c0 	call	1226c <lseek>
   10330:	00ffffc4 	movi	r3,-1
   10334:	10c00526 	beq	r2,r3,1034c <_lseek_r+0x50>
   10338:	dfc00217 	ldw	ra,8(sp)
   1033c:	dc400117 	ldw	r17,4(sp)
   10340:	dc000017 	ldw	r16,0(sp)
   10344:	dec00304 	addi	sp,sp,12
   10348:	f800283a 	ret
   1034c:	80c00017 	ldw	r3,0(r16)
   10350:	183ff926 	beq	r3,zero,10338 <__alt_exception_stack_pointer+0xf8010338>
   10354:	88c00015 	stw	r3,0(r17)
   10358:	003ff706 	br	10338 <__alt_exception_stack_pointer+0xf8010338>

0001035c <_read_r>:
   1035c:	defffd04 	addi	sp,sp,-12
   10360:	2805883a 	mov	r2,r5
   10364:	dc000015 	stw	r16,0(sp)
   10368:	040000b4 	movhi	r16,2
   1036c:	dc400115 	stw	r17,4(sp)
   10370:	300b883a 	mov	r5,r6
   10374:	8423cb04 	addi	r16,r16,-28884
   10378:	2023883a 	mov	r17,r4
   1037c:	380d883a 	mov	r6,r7
   10380:	1009883a 	mov	r4,r2
   10384:	dfc00215 	stw	ra,8(sp)
   10388:	80000015 	stw	zero,0(r16)
   1038c:	00124480 	call	12448 <read>
   10390:	00ffffc4 	movi	r3,-1
   10394:	10c00526 	beq	r2,r3,103ac <_read_r+0x50>
   10398:	dfc00217 	ldw	ra,8(sp)
   1039c:	dc400117 	ldw	r17,4(sp)
   103a0:	dc000017 	ldw	r16,0(sp)
   103a4:	dec00304 	addi	sp,sp,12
   103a8:	f800283a 	ret
   103ac:	80c00017 	ldw	r3,0(r16)
   103b0:	183ff926 	beq	r3,zero,10398 <__alt_exception_stack_pointer+0xf8010398>
   103b4:	88c00015 	stw	r3,0(r17)
   103b8:	003ff706 	br	10398 <__alt_exception_stack_pointer+0xf8010398>

000103bc <__swbuf_r>:
   103bc:	defffb04 	addi	sp,sp,-20
   103c0:	dcc00315 	stw	r19,12(sp)
   103c4:	dc800215 	stw	r18,8(sp)
   103c8:	dc000015 	stw	r16,0(sp)
   103cc:	dfc00415 	stw	ra,16(sp)
   103d0:	dc400115 	stw	r17,4(sp)
   103d4:	2025883a 	mov	r18,r4
   103d8:	2827883a 	mov	r19,r5
   103dc:	3021883a 	mov	r16,r6
   103e0:	20000226 	beq	r4,zero,103ec <__swbuf_r+0x30>
   103e4:	20800e17 	ldw	r2,56(r4)
   103e8:	10004226 	beq	r2,zero,104f4 <__swbuf_r+0x138>
   103ec:	80800617 	ldw	r2,24(r16)
   103f0:	8100030b 	ldhu	r4,12(r16)
   103f4:	80800215 	stw	r2,8(r16)
   103f8:	2080020c 	andi	r2,r4,8
   103fc:	10003626 	beq	r2,zero,104d8 <__swbuf_r+0x11c>
   10400:	80c00417 	ldw	r3,16(r16)
   10404:	18003426 	beq	r3,zero,104d8 <__swbuf_r+0x11c>
   10408:	2088000c 	andi	r2,r4,8192
   1040c:	9c403fcc 	andi	r17,r19,255
   10410:	10001a26 	beq	r2,zero,1047c <__swbuf_r+0xc0>
   10414:	80800017 	ldw	r2,0(r16)
   10418:	81000517 	ldw	r4,20(r16)
   1041c:	10c7c83a 	sub	r3,r2,r3
   10420:	1900200e 	bge	r3,r4,104a4 <__swbuf_r+0xe8>
   10424:	18c00044 	addi	r3,r3,1
   10428:	81000217 	ldw	r4,8(r16)
   1042c:	11400044 	addi	r5,r2,1
   10430:	81400015 	stw	r5,0(r16)
   10434:	213fffc4 	addi	r4,r4,-1
   10438:	81000215 	stw	r4,8(r16)
   1043c:	14c00005 	stb	r19,0(r2)
   10440:	80800517 	ldw	r2,20(r16)
   10444:	10c01e26 	beq	r2,r3,104c0 <__swbuf_r+0x104>
   10448:	8080030b 	ldhu	r2,12(r16)
   1044c:	1080004c 	andi	r2,r2,1
   10450:	10000226 	beq	r2,zero,1045c <__swbuf_r+0xa0>
   10454:	00800284 	movi	r2,10
   10458:	88801926 	beq	r17,r2,104c0 <__swbuf_r+0x104>
   1045c:	8805883a 	mov	r2,r17
   10460:	dfc00417 	ldw	ra,16(sp)
   10464:	dcc00317 	ldw	r19,12(sp)
   10468:	dc800217 	ldw	r18,8(sp)
   1046c:	dc400117 	ldw	r17,4(sp)
   10470:	dc000017 	ldw	r16,0(sp)
   10474:	dec00504 	addi	sp,sp,20
   10478:	f800283a 	ret
   1047c:	81401917 	ldw	r5,100(r16)
   10480:	00b7ffc4 	movi	r2,-8193
   10484:	21080014 	ori	r4,r4,8192
   10488:	2884703a 	and	r2,r5,r2
   1048c:	80801915 	stw	r2,100(r16)
   10490:	80800017 	ldw	r2,0(r16)
   10494:	8100030d 	sth	r4,12(r16)
   10498:	81000517 	ldw	r4,20(r16)
   1049c:	10c7c83a 	sub	r3,r2,r3
   104a0:	193fe016 	blt	r3,r4,10424 <__alt_exception_stack_pointer+0xf8010424>
   104a4:	800b883a 	mov	r5,r16
   104a8:	9009883a 	mov	r4,r18
   104ac:	000b9500 	call	b950 <_fflush_r>
   104b0:	1000071e 	bne	r2,zero,104d0 <__swbuf_r+0x114>
   104b4:	80800017 	ldw	r2,0(r16)
   104b8:	00c00044 	movi	r3,1
   104bc:	003fda06 	br	10428 <__alt_exception_stack_pointer+0xf8010428>
   104c0:	800b883a 	mov	r5,r16
   104c4:	9009883a 	mov	r4,r18
   104c8:	000b9500 	call	b950 <_fflush_r>
   104cc:	103fe326 	beq	r2,zero,1045c <__alt_exception_stack_pointer+0xf801045c>
   104d0:	00bfffc4 	movi	r2,-1
   104d4:	003fe206 	br	10460 <__alt_exception_stack_pointer+0xf8010460>
   104d8:	800b883a 	mov	r5,r16
   104dc:	9009883a 	mov	r4,r18
   104e0:	0009d300 	call	9d30 <__swsetup_r>
   104e4:	103ffa1e 	bne	r2,zero,104d0 <__alt_exception_stack_pointer+0xf80104d0>
   104e8:	8100030b 	ldhu	r4,12(r16)
   104ec:	80c00417 	ldw	r3,16(r16)
   104f0:	003fc506 	br	10408 <__alt_exception_stack_pointer+0xf8010408>
   104f4:	000bd3c0 	call	bd3c <__sinit>
   104f8:	003fbc06 	br	103ec <__alt_exception_stack_pointer+0xf80103ec>

000104fc <__swbuf>:
   104fc:	00800074 	movhi	r2,1
   10500:	109cd104 	addi	r2,r2,29508
   10504:	280d883a 	mov	r6,r5
   10508:	200b883a 	mov	r5,r4
   1050c:	11000017 	ldw	r4,0(r2)
   10510:	00103bc1 	jmpi	103bc <__swbuf_r>

00010514 <_wcrtomb_r>:
   10514:	defff604 	addi	sp,sp,-40
   10518:	00800074 	movhi	r2,1
   1051c:	dc800815 	stw	r18,32(sp)
   10520:	dc400715 	stw	r17,28(sp)
   10524:	dc000615 	stw	r16,24(sp)
   10528:	109cd504 	addi	r2,r2,29524
   1052c:	dfc00915 	stw	ra,36(sp)
   10530:	2021883a 	mov	r16,r4
   10534:	3823883a 	mov	r17,r7
   10538:	14800017 	ldw	r18,0(r2)
   1053c:	28001426 	beq	r5,zero,10590 <_wcrtomb_r+0x7c>
   10540:	d9400415 	stw	r5,16(sp)
   10544:	d9800515 	stw	r6,20(sp)
   10548:	000c88c0 	call	c88c <__locale_charset>
   1054c:	d9800517 	ldw	r6,20(sp)
   10550:	d9400417 	ldw	r5,16(sp)
   10554:	100f883a 	mov	r7,r2
   10558:	dc400015 	stw	r17,0(sp)
   1055c:	8009883a 	mov	r4,r16
   10560:	903ee83a 	callr	r18
   10564:	00ffffc4 	movi	r3,-1
   10568:	10c0031e 	bne	r2,r3,10578 <_wcrtomb_r+0x64>
   1056c:	88000015 	stw	zero,0(r17)
   10570:	00c02284 	movi	r3,138
   10574:	80c00015 	stw	r3,0(r16)
   10578:	dfc00917 	ldw	ra,36(sp)
   1057c:	dc800817 	ldw	r18,32(sp)
   10580:	dc400717 	ldw	r17,28(sp)
   10584:	dc000617 	ldw	r16,24(sp)
   10588:	dec00a04 	addi	sp,sp,40
   1058c:	f800283a 	ret
   10590:	000c88c0 	call	c88c <__locale_charset>
   10594:	100f883a 	mov	r7,r2
   10598:	dc400015 	stw	r17,0(sp)
   1059c:	000d883a 	mov	r6,zero
   105a0:	d9400104 	addi	r5,sp,4
   105a4:	8009883a 	mov	r4,r16
   105a8:	903ee83a 	callr	r18
   105ac:	003fed06 	br	10564 <__alt_exception_stack_pointer+0xf8010564>

000105b0 <wcrtomb>:
   105b0:	defff604 	addi	sp,sp,-40
   105b4:	00800074 	movhi	r2,1
   105b8:	dc800615 	stw	r18,24(sp)
   105bc:	dc400515 	stw	r17,20(sp)
   105c0:	109cd104 	addi	r2,r2,29508
   105c4:	dfc00915 	stw	ra,36(sp)
   105c8:	dd000815 	stw	r20,32(sp)
   105cc:	dcc00715 	stw	r19,28(sp)
   105d0:	dc000415 	stw	r16,16(sp)
   105d4:	3025883a 	mov	r18,r6
   105d8:	14400017 	ldw	r17,0(r2)
   105dc:	20001926 	beq	r4,zero,10644 <wcrtomb+0x94>
   105e0:	00800074 	movhi	r2,1
   105e4:	109cd504 	addi	r2,r2,29524
   105e8:	15000017 	ldw	r20,0(r2)
   105ec:	2021883a 	mov	r16,r4
   105f0:	2827883a 	mov	r19,r5
   105f4:	000c88c0 	call	c88c <__locale_charset>
   105f8:	100f883a 	mov	r7,r2
   105fc:	dc800015 	stw	r18,0(sp)
   10600:	980d883a 	mov	r6,r19
   10604:	800b883a 	mov	r5,r16
   10608:	8809883a 	mov	r4,r17
   1060c:	a03ee83a 	callr	r20
   10610:	00ffffc4 	movi	r3,-1
   10614:	10c0031e 	bne	r2,r3,10624 <wcrtomb+0x74>
   10618:	90000015 	stw	zero,0(r18)
   1061c:	00c02284 	movi	r3,138
   10620:	88c00015 	stw	r3,0(r17)
   10624:	dfc00917 	ldw	ra,36(sp)
   10628:	dd000817 	ldw	r20,32(sp)
   1062c:	dcc00717 	ldw	r19,28(sp)
   10630:	dc800617 	ldw	r18,24(sp)
   10634:	dc400517 	ldw	r17,20(sp)
   10638:	dc000417 	ldw	r16,16(sp)
   1063c:	dec00a04 	addi	sp,sp,40
   10640:	f800283a 	ret
   10644:	00800074 	movhi	r2,1
   10648:	109cd504 	addi	r2,r2,29524
   1064c:	14000017 	ldw	r16,0(r2)
   10650:	000c88c0 	call	c88c <__locale_charset>
   10654:	100f883a 	mov	r7,r2
   10658:	dc800015 	stw	r18,0(sp)
   1065c:	000d883a 	mov	r6,zero
   10660:	d9400104 	addi	r5,sp,4
   10664:	8809883a 	mov	r4,r17
   10668:	803ee83a 	callr	r16
   1066c:	003fe806 	br	10610 <__alt_exception_stack_pointer+0xf8010610>

00010670 <__ascii_wctomb>:
   10670:	28000526 	beq	r5,zero,10688 <__ascii_wctomb+0x18>
   10674:	00803fc4 	movi	r2,255
   10678:	11800536 	bltu	r2,r6,10690 <__ascii_wctomb+0x20>
   1067c:	29800005 	stb	r6,0(r5)
   10680:	00800044 	movi	r2,1
   10684:	f800283a 	ret
   10688:	0005883a 	mov	r2,zero
   1068c:	f800283a 	ret
   10690:	00802284 	movi	r2,138
   10694:	20800015 	stw	r2,0(r4)
   10698:	00bfffc4 	movi	r2,-1
   1069c:	f800283a 	ret

000106a0 <_wctomb_r>:
   106a0:	00800074 	movhi	r2,1
   106a4:	defff904 	addi	sp,sp,-28
   106a8:	109cd504 	addi	r2,r2,29524
   106ac:	dfc00615 	stw	ra,24(sp)
   106b0:	dc400515 	stw	r17,20(sp)
   106b4:	dc000415 	stw	r16,16(sp)
   106b8:	3823883a 	mov	r17,r7
   106bc:	14000017 	ldw	r16,0(r2)
   106c0:	d9000115 	stw	r4,4(sp)
   106c4:	d9400215 	stw	r5,8(sp)
   106c8:	d9800315 	stw	r6,12(sp)
   106cc:	000c88c0 	call	c88c <__locale_charset>
   106d0:	d9800317 	ldw	r6,12(sp)
   106d4:	d9400217 	ldw	r5,8(sp)
   106d8:	d9000117 	ldw	r4,4(sp)
   106dc:	100f883a 	mov	r7,r2
   106e0:	dc400015 	stw	r17,0(sp)
   106e4:	803ee83a 	callr	r16
   106e8:	dfc00617 	ldw	ra,24(sp)
   106ec:	dc400517 	ldw	r17,20(sp)
   106f0:	dc000417 	ldw	r16,16(sp)
   106f4:	dec00704 	addi	sp,sp,28
   106f8:	f800283a 	ret

000106fc <__udivdi3>:
   106fc:	defff404 	addi	sp,sp,-48
   10700:	dcc00515 	stw	r19,20(sp)
   10704:	dc000215 	stw	r16,8(sp)
   10708:	dfc00b15 	stw	ra,44(sp)
   1070c:	df000a15 	stw	fp,40(sp)
   10710:	ddc00915 	stw	r23,36(sp)
   10714:	dd800815 	stw	r22,32(sp)
   10718:	dd400715 	stw	r21,28(sp)
   1071c:	dd000615 	stw	r20,24(sp)
   10720:	dc800415 	stw	r18,16(sp)
   10724:	dc400315 	stw	r17,12(sp)
   10728:	2027883a 	mov	r19,r4
   1072c:	2821883a 	mov	r16,r5
   10730:	3800461e 	bne	r7,zero,1084c <__udivdi3+0x150>
   10734:	3023883a 	mov	r17,r6
   10738:	2025883a 	mov	r18,r4
   1073c:	2980572e 	bgeu	r5,r6,1089c <__udivdi3+0x1a0>
   10740:	00bfffd4 	movui	r2,65535
   10744:	282d883a 	mov	r22,r5
   10748:	1180b236 	bltu	r2,r6,10a14 <__udivdi3+0x318>
   1074c:	00803fc4 	movi	r2,255
   10750:	1185803a 	cmpltu	r2,r2,r6
   10754:	100490fa 	slli	r2,r2,3
   10758:	3086d83a 	srl	r3,r6,r2
   1075c:	01000074 	movhi	r4,1
   10760:	21153104 	addi	r4,r4,21700
   10764:	20c7883a 	add	r3,r4,r3
   10768:	18c00003 	ldbu	r3,0(r3)
   1076c:	1885883a 	add	r2,r3,r2
   10770:	00c00804 	movi	r3,32
   10774:	1887c83a 	sub	r3,r3,r2
   10778:	18000526 	beq	r3,zero,10790 <__udivdi3+0x94>
   1077c:	80e0983a 	sll	r16,r16,r3
   10780:	9884d83a 	srl	r2,r19,r2
   10784:	30e2983a 	sll	r17,r6,r3
   10788:	98e4983a 	sll	r18,r19,r3
   1078c:	142cb03a 	or	r22,r2,r16
   10790:	882ad43a 	srli	r21,r17,16
   10794:	b009883a 	mov	r4,r22
   10798:	8d3fffcc 	andi	r20,r17,65535
   1079c:	a80b883a 	mov	r5,r21
   107a0:	0004fc80 	call	4fc8 <__umodsi3>
   107a4:	b009883a 	mov	r4,r22
   107a8:	a80b883a 	mov	r5,r21
   107ac:	1027883a 	mov	r19,r2
   107b0:	0004f640 	call	4f64 <__udivsi3>
   107b4:	100b883a 	mov	r5,r2
   107b8:	a009883a 	mov	r4,r20
   107bc:	102d883a 	mov	r22,r2
   107c0:	00050200 	call	5020 <__mulsi3>
   107c4:	9826943a 	slli	r19,r19,16
   107c8:	9006d43a 	srli	r3,r18,16
   107cc:	1cc6b03a 	or	r3,r3,r19
   107d0:	1880052e 	bgeu	r3,r2,107e8 <__udivdi3+0xec>
   107d4:	1c47883a 	add	r3,r3,r17
   107d8:	b13fffc4 	addi	r4,r22,-1
   107dc:	1c400136 	bltu	r3,r17,107e4 <__udivdi3+0xe8>
   107e0:	18814236 	bltu	r3,r2,10cec <__udivdi3+0x5f0>
   107e4:	202d883a 	mov	r22,r4
   107e8:	18a1c83a 	sub	r16,r3,r2
   107ec:	8009883a 	mov	r4,r16
   107f0:	a80b883a 	mov	r5,r21
   107f4:	0004fc80 	call	4fc8 <__umodsi3>
   107f8:	1027883a 	mov	r19,r2
   107fc:	8009883a 	mov	r4,r16
   10800:	a80b883a 	mov	r5,r21
   10804:	9826943a 	slli	r19,r19,16
   10808:	0004f640 	call	4f64 <__udivsi3>
   1080c:	100b883a 	mov	r5,r2
   10810:	a009883a 	mov	r4,r20
   10814:	94bfffcc 	andi	r18,r18,65535
   10818:	1021883a 	mov	r16,r2
   1081c:	94e4b03a 	or	r18,r18,r19
   10820:	00050200 	call	5020 <__mulsi3>
   10824:	9080052e 	bgeu	r18,r2,1083c <__udivdi3+0x140>
   10828:	8ca5883a 	add	r18,r17,r18
   1082c:	80ffffc4 	addi	r3,r16,-1
   10830:	94410c36 	bltu	r18,r17,10c64 <__udivdi3+0x568>
   10834:	90810b2e 	bgeu	r18,r2,10c64 <__udivdi3+0x568>
   10838:	843fff84 	addi	r16,r16,-2
   1083c:	b004943a 	slli	r2,r22,16
   10840:	0007883a 	mov	r3,zero
   10844:	1404b03a 	or	r2,r2,r16
   10848:	00005e06 	br	109c4 <__udivdi3+0x2c8>
   1084c:	29c05b36 	bltu	r5,r7,109bc <__udivdi3+0x2c0>
   10850:	00bfffd4 	movui	r2,65535
   10854:	11c0672e 	bgeu	r2,r7,109f4 <__udivdi3+0x2f8>
   10858:	00804034 	movhi	r2,256
   1085c:	10bfffc4 	addi	r2,r2,-1
   10860:	11c10a36 	bltu	r2,r7,10c8c <__udivdi3+0x590>
   10864:	00800404 	movi	r2,16
   10868:	3886d83a 	srl	r3,r7,r2
   1086c:	01000074 	movhi	r4,1
   10870:	21153104 	addi	r4,r4,21700
   10874:	20c7883a 	add	r3,r4,r3
   10878:	18c00003 	ldbu	r3,0(r3)
   1087c:	05c00804 	movi	r23,32
   10880:	1885883a 	add	r2,r3,r2
   10884:	b8afc83a 	sub	r23,r23,r2
   10888:	b800671e 	bne	r23,zero,10a28 <__udivdi3+0x32c>
   1088c:	3c010536 	bltu	r7,r16,10ca4 <__udivdi3+0x5a8>
   10890:	9985403a 	cmpgeu	r2,r19,r6
   10894:	0007883a 	mov	r3,zero
   10898:	00004a06 	br	109c4 <__udivdi3+0x2c8>
   1089c:	3000041e 	bne	r6,zero,108b0 <__udivdi3+0x1b4>
   108a0:	000b883a 	mov	r5,zero
   108a4:	01000044 	movi	r4,1
   108a8:	0004f640 	call	4f64 <__udivsi3>
   108ac:	1023883a 	mov	r17,r2
   108b0:	00bfffd4 	movui	r2,65535
   108b4:	1440532e 	bgeu	r2,r17,10a04 <__udivdi3+0x308>
   108b8:	00804034 	movhi	r2,256
   108bc:	10bfffc4 	addi	r2,r2,-1
   108c0:	1440f436 	bltu	r2,r17,10c94 <__udivdi3+0x598>
   108c4:	00800404 	movi	r2,16
   108c8:	8886d83a 	srl	r3,r17,r2
   108cc:	01000074 	movhi	r4,1
   108d0:	21153104 	addi	r4,r4,21700
   108d4:	20c7883a 	add	r3,r4,r3
   108d8:	18c00003 	ldbu	r3,0(r3)
   108dc:	1885883a 	add	r2,r3,r2
   108e0:	00c00804 	movi	r3,32
   108e4:	1887c83a 	sub	r3,r3,r2
   108e8:	1800a51e 	bne	r3,zero,10b80 <__udivdi3+0x484>
   108ec:	882ad43a 	srli	r21,r17,16
   108f0:	8461c83a 	sub	r16,r16,r17
   108f4:	8d3fffcc 	andi	r20,r17,65535
   108f8:	00c00044 	movi	r3,1
   108fc:	a80b883a 	mov	r5,r21
   10900:	8009883a 	mov	r4,r16
   10904:	d8c00115 	stw	r3,4(sp)
   10908:	0004fc80 	call	4fc8 <__umodsi3>
   1090c:	a80b883a 	mov	r5,r21
   10910:	8009883a 	mov	r4,r16
   10914:	1027883a 	mov	r19,r2
   10918:	0004f640 	call	4f64 <__udivsi3>
   1091c:	a00b883a 	mov	r5,r20
   10920:	1009883a 	mov	r4,r2
   10924:	102d883a 	mov	r22,r2
   10928:	00050200 	call	5020 <__mulsi3>
   1092c:	9826943a 	slli	r19,r19,16
   10930:	900ed43a 	srli	r7,r18,16
   10934:	d8c00117 	ldw	r3,4(sp)
   10938:	3cceb03a 	or	r7,r7,r19
   1093c:	3880052e 	bgeu	r7,r2,10954 <__udivdi3+0x258>
   10940:	3c4f883a 	add	r7,r7,r17
   10944:	b13fffc4 	addi	r4,r22,-1
   10948:	3c400136 	bltu	r7,r17,10950 <__udivdi3+0x254>
   1094c:	3880e436 	bltu	r7,r2,10ce0 <__udivdi3+0x5e4>
   10950:	202d883a 	mov	r22,r4
   10954:	38a1c83a 	sub	r16,r7,r2
   10958:	8009883a 	mov	r4,r16
   1095c:	a80b883a 	mov	r5,r21
   10960:	d8c00115 	stw	r3,4(sp)
   10964:	0004fc80 	call	4fc8 <__umodsi3>
   10968:	1027883a 	mov	r19,r2
   1096c:	8009883a 	mov	r4,r16
   10970:	a80b883a 	mov	r5,r21
   10974:	9826943a 	slli	r19,r19,16
   10978:	0004f640 	call	4f64 <__udivsi3>
   1097c:	a00b883a 	mov	r5,r20
   10980:	1009883a 	mov	r4,r2
   10984:	94bfffcc 	andi	r18,r18,65535
   10988:	1021883a 	mov	r16,r2
   1098c:	94e4b03a 	or	r18,r18,r19
   10990:	00050200 	call	5020 <__mulsi3>
   10994:	d8c00117 	ldw	r3,4(sp)
   10998:	9080052e 	bgeu	r18,r2,109b0 <__udivdi3+0x2b4>
   1099c:	8ca5883a 	add	r18,r17,r18
   109a0:	813fffc4 	addi	r4,r16,-1
   109a4:	9440ad36 	bltu	r18,r17,10c5c <__udivdi3+0x560>
   109a8:	9080ac2e 	bgeu	r18,r2,10c5c <__udivdi3+0x560>
   109ac:	843fff84 	addi	r16,r16,-2
   109b0:	b004943a 	slli	r2,r22,16
   109b4:	1404b03a 	or	r2,r2,r16
   109b8:	00000206 	br	109c4 <__udivdi3+0x2c8>
   109bc:	0007883a 	mov	r3,zero
   109c0:	0005883a 	mov	r2,zero
   109c4:	dfc00b17 	ldw	ra,44(sp)
   109c8:	df000a17 	ldw	fp,40(sp)
   109cc:	ddc00917 	ldw	r23,36(sp)
   109d0:	dd800817 	ldw	r22,32(sp)
   109d4:	dd400717 	ldw	r21,28(sp)
   109d8:	dd000617 	ldw	r20,24(sp)
   109dc:	dcc00517 	ldw	r19,20(sp)
   109e0:	dc800417 	ldw	r18,16(sp)
   109e4:	dc400317 	ldw	r17,12(sp)
   109e8:	dc000217 	ldw	r16,8(sp)
   109ec:	dec00c04 	addi	sp,sp,48
   109f0:	f800283a 	ret
   109f4:	00803fc4 	movi	r2,255
   109f8:	11c5803a 	cmpltu	r2,r2,r7
   109fc:	100490fa 	slli	r2,r2,3
   10a00:	003f9906 	br	10868 <__alt_exception_stack_pointer+0xf8010868>
   10a04:	00803fc4 	movi	r2,255
   10a08:	1445803a 	cmpltu	r2,r2,r17
   10a0c:	100490fa 	slli	r2,r2,3
   10a10:	003fad06 	br	108c8 <__alt_exception_stack_pointer+0xf80108c8>
   10a14:	00804034 	movhi	r2,256
   10a18:	10bfffc4 	addi	r2,r2,-1
   10a1c:	11809f36 	bltu	r2,r6,10c9c <__udivdi3+0x5a0>
   10a20:	00800404 	movi	r2,16
   10a24:	003f4c06 	br	10758 <__alt_exception_stack_pointer+0xf8010758>
   10a28:	3dce983a 	sll	r7,r7,r23
   10a2c:	30b8d83a 	srl	fp,r6,r2
   10a30:	80a2d83a 	srl	r17,r16,r2
   10a34:	35cc983a 	sll	r6,r6,r23
   10a38:	3f38b03a 	or	fp,r7,fp
   10a3c:	e024d43a 	srli	r18,fp,16
   10a40:	9884d83a 	srl	r2,r19,r2
   10a44:	85e0983a 	sll	r16,r16,r23
   10a48:	8809883a 	mov	r4,r17
   10a4c:	900b883a 	mov	r5,r18
   10a50:	d9800015 	stw	r6,0(sp)
   10a54:	1420b03a 	or	r16,r2,r16
   10a58:	0004fc80 	call	4fc8 <__umodsi3>
   10a5c:	900b883a 	mov	r5,r18
   10a60:	8809883a 	mov	r4,r17
   10a64:	1029883a 	mov	r20,r2
   10a68:	e5bfffcc 	andi	r22,fp,65535
   10a6c:	0004f640 	call	4f64 <__udivsi3>
   10a70:	100b883a 	mov	r5,r2
   10a74:	b009883a 	mov	r4,r22
   10a78:	102b883a 	mov	r21,r2
   10a7c:	00050200 	call	5020 <__mulsi3>
   10a80:	a028943a 	slli	r20,r20,16
   10a84:	8006d43a 	srli	r3,r16,16
   10a88:	1d06b03a 	or	r3,r3,r20
   10a8c:	1880042e 	bgeu	r3,r2,10aa0 <__udivdi3+0x3a4>
   10a90:	1f07883a 	add	r3,r3,fp
   10a94:	a93fffc4 	addi	r4,r21,-1
   10a98:	1f00892e 	bgeu	r3,fp,10cc0 <__udivdi3+0x5c4>
   10a9c:	202b883a 	mov	r21,r4
   10aa0:	18a3c83a 	sub	r17,r3,r2
   10aa4:	8809883a 	mov	r4,r17
   10aa8:	900b883a 	mov	r5,r18
   10aac:	0004fc80 	call	4fc8 <__umodsi3>
   10ab0:	1029883a 	mov	r20,r2
   10ab4:	8809883a 	mov	r4,r17
   10ab8:	900b883a 	mov	r5,r18
   10abc:	a028943a 	slli	r20,r20,16
   10ac0:	0004f640 	call	4f64 <__udivsi3>
   10ac4:	100b883a 	mov	r5,r2
   10ac8:	b009883a 	mov	r4,r22
   10acc:	843fffcc 	andi	r16,r16,65535
   10ad0:	1023883a 	mov	r17,r2
   10ad4:	8520b03a 	or	r16,r16,r20
   10ad8:	00050200 	call	5020 <__mulsi3>
   10adc:	8080042e 	bgeu	r16,r2,10af0 <__udivdi3+0x3f4>
   10ae0:	8721883a 	add	r16,r16,fp
   10ae4:	88ffffc4 	addi	r3,r17,-1
   10ae8:	8700712e 	bgeu	r16,fp,10cb0 <__udivdi3+0x5b4>
   10aec:	1823883a 	mov	r17,r3
   10af0:	a80e943a 	slli	r7,r21,16
   10af4:	d8c00017 	ldw	r3,0(sp)
   10af8:	80a1c83a 	sub	r16,r16,r2
   10afc:	3c64b03a 	or	r18,r7,r17
   10b00:	1d3fffcc 	andi	r20,r3,65535
   10b04:	9022d43a 	srli	r17,r18,16
   10b08:	95bfffcc 	andi	r22,r18,65535
   10b0c:	a00b883a 	mov	r5,r20
   10b10:	b009883a 	mov	r4,r22
   10b14:	182ad43a 	srli	r21,r3,16
   10b18:	00050200 	call	5020 <__mulsi3>
   10b1c:	a00b883a 	mov	r5,r20
   10b20:	8809883a 	mov	r4,r17
   10b24:	1039883a 	mov	fp,r2
   10b28:	00050200 	call	5020 <__mulsi3>
   10b2c:	8809883a 	mov	r4,r17
   10b30:	a80b883a 	mov	r5,r21
   10b34:	1029883a 	mov	r20,r2
   10b38:	00050200 	call	5020 <__mulsi3>
   10b3c:	a80b883a 	mov	r5,r21
   10b40:	b009883a 	mov	r4,r22
   10b44:	1023883a 	mov	r17,r2
   10b48:	00050200 	call	5020 <__mulsi3>
   10b4c:	e006d43a 	srli	r3,fp,16
   10b50:	1505883a 	add	r2,r2,r20
   10b54:	1887883a 	add	r3,r3,r2
   10b58:	1d00022e 	bgeu	r3,r20,10b64 <__udivdi3+0x468>
   10b5c:	00800074 	movhi	r2,1
   10b60:	88a3883a 	add	r17,r17,r2
   10b64:	1804d43a 	srli	r2,r3,16
   10b68:	1463883a 	add	r17,r2,r17
   10b6c:	84404436 	bltu	r16,r17,10c80 <__udivdi3+0x584>
   10b70:	84403e26 	beq	r16,r17,10c6c <__udivdi3+0x570>
   10b74:	9005883a 	mov	r2,r18
   10b78:	0007883a 	mov	r3,zero
   10b7c:	003f9106 	br	109c4 <__alt_exception_stack_pointer+0xf80109c4>
   10b80:	88e2983a 	sll	r17,r17,r3
   10b84:	80aed83a 	srl	r23,r16,r2
   10b88:	80e0983a 	sll	r16,r16,r3
   10b8c:	882ad43a 	srli	r21,r17,16
   10b90:	9884d83a 	srl	r2,r19,r2
   10b94:	b809883a 	mov	r4,r23
   10b98:	a80b883a 	mov	r5,r21
   10b9c:	98e4983a 	sll	r18,r19,r3
   10ba0:	142cb03a 	or	r22,r2,r16
   10ba4:	0004fc80 	call	4fc8 <__umodsi3>
   10ba8:	b809883a 	mov	r4,r23
   10bac:	a80b883a 	mov	r5,r21
   10bb0:	1027883a 	mov	r19,r2
   10bb4:	8d3fffcc 	andi	r20,r17,65535
   10bb8:	0004f640 	call	4f64 <__udivsi3>
   10bbc:	a009883a 	mov	r4,r20
   10bc0:	100b883a 	mov	r5,r2
   10bc4:	102f883a 	mov	r23,r2
   10bc8:	00050200 	call	5020 <__mulsi3>
   10bcc:	9826943a 	slli	r19,r19,16
   10bd0:	b008d43a 	srli	r4,r22,16
   10bd4:	24c8b03a 	or	r4,r4,r19
   10bd8:	2080062e 	bgeu	r4,r2,10bf4 <__udivdi3+0x4f8>
   10bdc:	2449883a 	add	r4,r4,r17
   10be0:	b8ffffc4 	addi	r3,r23,-1
   10be4:	24403c36 	bltu	r4,r17,10cd8 <__udivdi3+0x5dc>
   10be8:	20803b2e 	bgeu	r4,r2,10cd8 <__udivdi3+0x5dc>
   10bec:	bdffff84 	addi	r23,r23,-2
   10bf0:	2449883a 	add	r4,r4,r17
   10bf4:	20a1c83a 	sub	r16,r4,r2
   10bf8:	a80b883a 	mov	r5,r21
   10bfc:	8009883a 	mov	r4,r16
   10c00:	0004fc80 	call	4fc8 <__umodsi3>
   10c04:	a80b883a 	mov	r5,r21
   10c08:	8009883a 	mov	r4,r16
   10c0c:	1027883a 	mov	r19,r2
   10c10:	0004f640 	call	4f64 <__udivsi3>
   10c14:	a009883a 	mov	r4,r20
   10c18:	100b883a 	mov	r5,r2
   10c1c:	9826943a 	slli	r19,r19,16
   10c20:	1039883a 	mov	fp,r2
   10c24:	00050200 	call	5020 <__mulsi3>
   10c28:	b13fffcc 	andi	r4,r22,65535
   10c2c:	24c8b03a 	or	r4,r4,r19
   10c30:	2080062e 	bgeu	r4,r2,10c4c <__udivdi3+0x550>
   10c34:	2449883a 	add	r4,r4,r17
   10c38:	e0ffffc4 	addi	r3,fp,-1
   10c3c:	24402436 	bltu	r4,r17,10cd0 <__udivdi3+0x5d4>
   10c40:	2080232e 	bgeu	r4,r2,10cd0 <__udivdi3+0x5d4>
   10c44:	e73fff84 	addi	fp,fp,-2
   10c48:	2449883a 	add	r4,r4,r17
   10c4c:	b82e943a 	slli	r23,r23,16
   10c50:	20a1c83a 	sub	r16,r4,r2
   10c54:	bf06b03a 	or	r3,r23,fp
   10c58:	003f2806 	br	108fc <__alt_exception_stack_pointer+0xf80108fc>
   10c5c:	2021883a 	mov	r16,r4
   10c60:	003f5306 	br	109b0 <__alt_exception_stack_pointer+0xf80109b0>
   10c64:	1821883a 	mov	r16,r3
   10c68:	003ef406 	br	1083c <__alt_exception_stack_pointer+0xf801083c>
   10c6c:	1806943a 	slli	r3,r3,16
   10c70:	9de6983a 	sll	r19,r19,r23
   10c74:	e73fffcc 	andi	fp,fp,65535
   10c78:	1f07883a 	add	r3,r3,fp
   10c7c:	98ffbd2e 	bgeu	r19,r3,10b74 <__alt_exception_stack_pointer+0xf8010b74>
   10c80:	90bfffc4 	addi	r2,r18,-1
   10c84:	0007883a 	mov	r3,zero
   10c88:	003f4e06 	br	109c4 <__alt_exception_stack_pointer+0xf80109c4>
   10c8c:	00800604 	movi	r2,24
   10c90:	003ef506 	br	10868 <__alt_exception_stack_pointer+0xf8010868>
   10c94:	00800604 	movi	r2,24
   10c98:	003f0b06 	br	108c8 <__alt_exception_stack_pointer+0xf80108c8>
   10c9c:	00800604 	movi	r2,24
   10ca0:	003ead06 	br	10758 <__alt_exception_stack_pointer+0xf8010758>
   10ca4:	0007883a 	mov	r3,zero
   10ca8:	00800044 	movi	r2,1
   10cac:	003f4506 	br	109c4 <__alt_exception_stack_pointer+0xf80109c4>
   10cb0:	80bf8e2e 	bgeu	r16,r2,10aec <__alt_exception_stack_pointer+0xf8010aec>
   10cb4:	8c7fff84 	addi	r17,r17,-2
   10cb8:	8721883a 	add	r16,r16,fp
   10cbc:	003f8c06 	br	10af0 <__alt_exception_stack_pointer+0xf8010af0>
   10cc0:	18bf762e 	bgeu	r3,r2,10a9c <__alt_exception_stack_pointer+0xf8010a9c>
   10cc4:	ad7fff84 	addi	r21,r21,-2
   10cc8:	1f07883a 	add	r3,r3,fp
   10ccc:	003f7406 	br	10aa0 <__alt_exception_stack_pointer+0xf8010aa0>
   10cd0:	1839883a 	mov	fp,r3
   10cd4:	003fdd06 	br	10c4c <__alt_exception_stack_pointer+0xf8010c4c>
   10cd8:	182f883a 	mov	r23,r3
   10cdc:	003fc506 	br	10bf4 <__alt_exception_stack_pointer+0xf8010bf4>
   10ce0:	b5bfff84 	addi	r22,r22,-2
   10ce4:	3c4f883a 	add	r7,r7,r17
   10ce8:	003f1a06 	br	10954 <__alt_exception_stack_pointer+0xf8010954>
   10cec:	b5bfff84 	addi	r22,r22,-2
   10cf0:	1c47883a 	add	r3,r3,r17
   10cf4:	003ebc06 	br	107e8 <__alt_exception_stack_pointer+0xf80107e8>

00010cf8 <__umoddi3>:
   10cf8:	defff304 	addi	sp,sp,-52
   10cfc:	df000b15 	stw	fp,44(sp)
   10d00:	dc400415 	stw	r17,16(sp)
   10d04:	dc000315 	stw	r16,12(sp)
   10d08:	dfc00c15 	stw	ra,48(sp)
   10d0c:	ddc00a15 	stw	r23,40(sp)
   10d10:	dd800915 	stw	r22,36(sp)
   10d14:	dd400815 	stw	r21,32(sp)
   10d18:	dd000715 	stw	r20,28(sp)
   10d1c:	dcc00615 	stw	r19,24(sp)
   10d20:	dc800515 	stw	r18,20(sp)
   10d24:	2021883a 	mov	r16,r4
   10d28:	2823883a 	mov	r17,r5
   10d2c:	2839883a 	mov	fp,r5
   10d30:	3800401e 	bne	r7,zero,10e34 <__umoddi3+0x13c>
   10d34:	3027883a 	mov	r19,r6
   10d38:	2029883a 	mov	r20,r4
   10d3c:	2980552e 	bgeu	r5,r6,10e94 <__umoddi3+0x19c>
   10d40:	00bfffd4 	movui	r2,65535
   10d44:	1180a236 	bltu	r2,r6,10fd0 <__umoddi3+0x2d8>
   10d48:	01003fc4 	movi	r4,255
   10d4c:	2189803a 	cmpltu	r4,r4,r6
   10d50:	200890fa 	slli	r4,r4,3
   10d54:	3104d83a 	srl	r2,r6,r4
   10d58:	00c00074 	movhi	r3,1
   10d5c:	18d53104 	addi	r3,r3,21700
   10d60:	1885883a 	add	r2,r3,r2
   10d64:	10c00003 	ldbu	r3,0(r2)
   10d68:	00800804 	movi	r2,32
   10d6c:	1909883a 	add	r4,r3,r4
   10d70:	1125c83a 	sub	r18,r2,r4
   10d74:	90000526 	beq	r18,zero,10d8c <__umoddi3+0x94>
   10d78:	8ca2983a 	sll	r17,r17,r18
   10d7c:	8108d83a 	srl	r4,r16,r4
   10d80:	34a6983a 	sll	r19,r6,r18
   10d84:	84a8983a 	sll	r20,r16,r18
   10d88:	2478b03a 	or	fp,r4,r17
   10d8c:	982cd43a 	srli	r22,r19,16
   10d90:	e009883a 	mov	r4,fp
   10d94:	9dffffcc 	andi	r23,r19,65535
   10d98:	b00b883a 	mov	r5,r22
   10d9c:	0004fc80 	call	4fc8 <__umodsi3>
   10da0:	b00b883a 	mov	r5,r22
   10da4:	e009883a 	mov	r4,fp
   10da8:	102b883a 	mov	r21,r2
   10dac:	0004f640 	call	4f64 <__udivsi3>
   10db0:	100b883a 	mov	r5,r2
   10db4:	b809883a 	mov	r4,r23
   10db8:	00050200 	call	5020 <__mulsi3>
   10dbc:	a82a943a 	slli	r21,r21,16
   10dc0:	a006d43a 	srli	r3,r20,16
   10dc4:	1d46b03a 	or	r3,r3,r21
   10dc8:	1880032e 	bgeu	r3,r2,10dd8 <__umoddi3+0xe0>
   10dcc:	1cc7883a 	add	r3,r3,r19
   10dd0:	1cc00136 	bltu	r3,r19,10dd8 <__umoddi3+0xe0>
   10dd4:	18813136 	bltu	r3,r2,1129c <__umoddi3+0x5a4>
   10dd8:	18a1c83a 	sub	r16,r3,r2
   10ddc:	b00b883a 	mov	r5,r22
   10de0:	8009883a 	mov	r4,r16
   10de4:	0004fc80 	call	4fc8 <__umodsi3>
   10de8:	b00b883a 	mov	r5,r22
   10dec:	8009883a 	mov	r4,r16
   10df0:	1023883a 	mov	r17,r2
   10df4:	0004f640 	call	4f64 <__udivsi3>
   10df8:	100b883a 	mov	r5,r2
   10dfc:	b809883a 	mov	r4,r23
   10e00:	8822943a 	slli	r17,r17,16
   10e04:	00050200 	call	5020 <__mulsi3>
   10e08:	a0ffffcc 	andi	r3,r20,65535
   10e0c:	1c46b03a 	or	r3,r3,r17
   10e10:	1880042e 	bgeu	r3,r2,10e24 <__umoddi3+0x12c>
   10e14:	1cc7883a 	add	r3,r3,r19
   10e18:	1cc00236 	bltu	r3,r19,10e24 <__umoddi3+0x12c>
   10e1c:	1880012e 	bgeu	r3,r2,10e24 <__umoddi3+0x12c>
   10e20:	1cc7883a 	add	r3,r3,r19
   10e24:	1885c83a 	sub	r2,r3,r2
   10e28:	1484d83a 	srl	r2,r2,r18
   10e2c:	0007883a 	mov	r3,zero
   10e30:	00005306 	br	10f80 <__umoddi3+0x288>
   10e34:	29c05036 	bltu	r5,r7,10f78 <__umoddi3+0x280>
   10e38:	00bfffd4 	movui	r2,65535
   10e3c:	11c05c2e 	bgeu	r2,r7,10fb0 <__umoddi3+0x2b8>
   10e40:	00804034 	movhi	r2,256
   10e44:	10bfffc4 	addi	r2,r2,-1
   10e48:	11c10636 	bltu	r2,r7,11264 <__umoddi3+0x56c>
   10e4c:	01000404 	movi	r4,16
   10e50:	3904d83a 	srl	r2,r7,r4
   10e54:	00c00074 	movhi	r3,1
   10e58:	18d53104 	addi	r3,r3,21700
   10e5c:	1885883a 	add	r2,r3,r2
   10e60:	14c00003 	ldbu	r19,0(r2)
   10e64:	00c00804 	movi	r3,32
   10e68:	9927883a 	add	r19,r19,r4
   10e6c:	1ce9c83a 	sub	r20,r3,r19
   10e70:	a0005c1e 	bne	r20,zero,10fe4 <__umoddi3+0x2ec>
   10e74:	3c400136 	bltu	r7,r17,10e7c <__umoddi3+0x184>
   10e78:	81810a36 	bltu	r16,r6,112a4 <__umoddi3+0x5ac>
   10e7c:	8185c83a 	sub	r2,r16,r6
   10e80:	89e3c83a 	sub	r17,r17,r7
   10e84:	8089803a 	cmpltu	r4,r16,r2
   10e88:	8939c83a 	sub	fp,r17,r4
   10e8c:	e007883a 	mov	r3,fp
   10e90:	00003b06 	br	10f80 <__umoddi3+0x288>
   10e94:	3000041e 	bne	r6,zero,10ea8 <__umoddi3+0x1b0>
   10e98:	000b883a 	mov	r5,zero
   10e9c:	01000044 	movi	r4,1
   10ea0:	0004f640 	call	4f64 <__udivsi3>
   10ea4:	1027883a 	mov	r19,r2
   10ea8:	00bfffd4 	movui	r2,65535
   10eac:	14c0442e 	bgeu	r2,r19,10fc0 <__umoddi3+0x2c8>
   10eb0:	00804034 	movhi	r2,256
   10eb4:	10bfffc4 	addi	r2,r2,-1
   10eb8:	14c0ec36 	bltu	r2,r19,1126c <__umoddi3+0x574>
   10ebc:	00800404 	movi	r2,16
   10ec0:	9886d83a 	srl	r3,r19,r2
   10ec4:	01000074 	movhi	r4,1
   10ec8:	21153104 	addi	r4,r4,21700
   10ecc:	20c7883a 	add	r3,r4,r3
   10ed0:	18c00003 	ldbu	r3,0(r3)
   10ed4:	1887883a 	add	r3,r3,r2
   10ed8:	00800804 	movi	r2,32
   10edc:	10e5c83a 	sub	r18,r2,r3
   10ee0:	9000ab1e 	bne	r18,zero,11190 <__umoddi3+0x498>
   10ee4:	982cd43a 	srli	r22,r19,16
   10ee8:	8ce3c83a 	sub	r17,r17,r19
   10eec:	9dffffcc 	andi	r23,r19,65535
   10ef0:	b00b883a 	mov	r5,r22
   10ef4:	8809883a 	mov	r4,r17
   10ef8:	0004fc80 	call	4fc8 <__umodsi3>
   10efc:	b00b883a 	mov	r5,r22
   10f00:	8809883a 	mov	r4,r17
   10f04:	102b883a 	mov	r21,r2
   10f08:	0004f640 	call	4f64 <__udivsi3>
   10f0c:	b80b883a 	mov	r5,r23
   10f10:	1009883a 	mov	r4,r2
   10f14:	00050200 	call	5020 <__mulsi3>
   10f18:	a82a943a 	slli	r21,r21,16
   10f1c:	a006d43a 	srli	r3,r20,16
   10f20:	1d46b03a 	or	r3,r3,r21
   10f24:	1880042e 	bgeu	r3,r2,10f38 <__umoddi3+0x240>
   10f28:	1cc7883a 	add	r3,r3,r19
   10f2c:	1cc00236 	bltu	r3,r19,10f38 <__umoddi3+0x240>
   10f30:	1880012e 	bgeu	r3,r2,10f38 <__umoddi3+0x240>
   10f34:	1cc7883a 	add	r3,r3,r19
   10f38:	18a1c83a 	sub	r16,r3,r2
   10f3c:	b00b883a 	mov	r5,r22
   10f40:	8009883a 	mov	r4,r16
   10f44:	0004fc80 	call	4fc8 <__umodsi3>
   10f48:	1023883a 	mov	r17,r2
   10f4c:	b00b883a 	mov	r5,r22
   10f50:	8009883a 	mov	r4,r16
   10f54:	0004f640 	call	4f64 <__udivsi3>
   10f58:	8822943a 	slli	r17,r17,16
   10f5c:	b80b883a 	mov	r5,r23
   10f60:	1009883a 	mov	r4,r2
   10f64:	00050200 	call	5020 <__mulsi3>
   10f68:	a53fffcc 	andi	r20,r20,65535
   10f6c:	a446b03a 	or	r3,r20,r17
   10f70:	18bfac2e 	bgeu	r3,r2,10e24 <__alt_exception_stack_pointer+0xf8010e24>
   10f74:	003fa706 	br	10e14 <__alt_exception_stack_pointer+0xf8010e14>
   10f78:	2005883a 	mov	r2,r4
   10f7c:	2807883a 	mov	r3,r5
   10f80:	dfc00c17 	ldw	ra,48(sp)
   10f84:	df000b17 	ldw	fp,44(sp)
   10f88:	ddc00a17 	ldw	r23,40(sp)
   10f8c:	dd800917 	ldw	r22,36(sp)
   10f90:	dd400817 	ldw	r21,32(sp)
   10f94:	dd000717 	ldw	r20,28(sp)
   10f98:	dcc00617 	ldw	r19,24(sp)
   10f9c:	dc800517 	ldw	r18,20(sp)
   10fa0:	dc400417 	ldw	r17,16(sp)
   10fa4:	dc000317 	ldw	r16,12(sp)
   10fa8:	dec00d04 	addi	sp,sp,52
   10fac:	f800283a 	ret
   10fb0:	04c03fc4 	movi	r19,255
   10fb4:	99c9803a 	cmpltu	r4,r19,r7
   10fb8:	200890fa 	slli	r4,r4,3
   10fbc:	003fa406 	br	10e50 <__alt_exception_stack_pointer+0xf8010e50>
   10fc0:	00803fc4 	movi	r2,255
   10fc4:	14c5803a 	cmpltu	r2,r2,r19
   10fc8:	100490fa 	slli	r2,r2,3
   10fcc:	003fbc06 	br	10ec0 <__alt_exception_stack_pointer+0xf8010ec0>
   10fd0:	00804034 	movhi	r2,256
   10fd4:	10bfffc4 	addi	r2,r2,-1
   10fd8:	1180a636 	bltu	r2,r6,11274 <__umoddi3+0x57c>
   10fdc:	01000404 	movi	r4,16
   10fe0:	003f5c06 	br	10d54 <__alt_exception_stack_pointer+0xf8010d54>
   10fe4:	3d0e983a 	sll	r7,r7,r20
   10fe8:	34ead83a 	srl	r21,r6,r19
   10fec:	8cc6d83a 	srl	r3,r17,r19
   10ff0:	8d10983a 	sll	r8,r17,r20
   10ff4:	3d6ab03a 	or	r21,r7,r21
   10ff8:	a82cd43a 	srli	r22,r21,16
   10ffc:	84e2d83a 	srl	r17,r16,r19
   11000:	1809883a 	mov	r4,r3
   11004:	b00b883a 	mov	r5,r22
   11008:	8a22b03a 	or	r17,r17,r8
   1100c:	3524983a 	sll	r18,r6,r20
   11010:	dc400015 	stw	r17,0(sp)
   11014:	d8c00115 	stw	r3,4(sp)
   11018:	0004fc80 	call	4fc8 <__umodsi3>
   1101c:	d8c00117 	ldw	r3,4(sp)
   11020:	b00b883a 	mov	r5,r22
   11024:	1039883a 	mov	fp,r2
   11028:	1809883a 	mov	r4,r3
   1102c:	0004f640 	call	4f64 <__udivsi3>
   11030:	adffffcc 	andi	r23,r21,65535
   11034:	100b883a 	mov	r5,r2
   11038:	b809883a 	mov	r4,r23
   1103c:	1023883a 	mov	r17,r2
   11040:	00050200 	call	5020 <__mulsi3>
   11044:	d9400017 	ldw	r5,0(sp)
   11048:	e008943a 	slli	r4,fp,16
   1104c:	8520983a 	sll	r16,r16,r20
   11050:	2806d43a 	srli	r3,r5,16
   11054:	1906b03a 	or	r3,r3,r4
   11058:	1880042e 	bgeu	r3,r2,1106c <__umoddi3+0x374>
   1105c:	1d47883a 	add	r3,r3,r21
   11060:	893fffc4 	addi	r4,r17,-1
   11064:	1d40892e 	bgeu	r3,r21,1128c <__umoddi3+0x594>
   11068:	2023883a 	mov	r17,r4
   1106c:	18b9c83a 	sub	fp,r3,r2
   11070:	b00b883a 	mov	r5,r22
   11074:	e009883a 	mov	r4,fp
   11078:	0004fc80 	call	4fc8 <__umodsi3>
   1107c:	b00b883a 	mov	r5,r22
   11080:	e009883a 	mov	r4,fp
   11084:	d8800215 	stw	r2,8(sp)
   11088:	0004f640 	call	4f64 <__udivsi3>
   1108c:	100b883a 	mov	r5,r2
   11090:	b809883a 	mov	r4,r23
   11094:	102d883a 	mov	r22,r2
   11098:	00050200 	call	5020 <__mulsi3>
   1109c:	d9800217 	ldw	r6,8(sp)
   110a0:	d8c00017 	ldw	r3,0(sp)
   110a4:	300c943a 	slli	r6,r6,16
   110a8:	1a3fffcc 	andi	r8,r3,65535
   110ac:	4190b03a 	or	r8,r8,r6
   110b0:	4080042e 	bgeu	r8,r2,110c4 <__umoddi3+0x3cc>
   110b4:	4551883a 	add	r8,r8,r21
   110b8:	b0ffffc4 	addi	r3,r22,-1
   110bc:	45406f2e 	bgeu	r8,r21,1127c <__umoddi3+0x584>
   110c0:	182d883a 	mov	r22,r3
   110c4:	880e943a 	slli	r7,r17,16
   110c8:	9006d43a 	srli	r3,r18,16
   110cc:	91bfffcc 	andi	r6,r18,65535
   110d0:	3dacb03a 	or	r22,r7,r22
   110d4:	b02ed43a 	srli	r23,r22,16
   110d8:	b5bfffcc 	andi	r22,r22,65535
   110dc:	300b883a 	mov	r5,r6
   110e0:	b009883a 	mov	r4,r22
   110e4:	40a3c83a 	sub	r17,r8,r2
   110e8:	d8c00115 	stw	r3,4(sp)
   110ec:	d9800215 	stw	r6,8(sp)
   110f0:	00050200 	call	5020 <__mulsi3>
   110f4:	d9800217 	ldw	r6,8(sp)
   110f8:	b809883a 	mov	r4,r23
   110fc:	1039883a 	mov	fp,r2
   11100:	300b883a 	mov	r5,r6
   11104:	00050200 	call	5020 <__mulsi3>
   11108:	d8c00117 	ldw	r3,4(sp)
   1110c:	b809883a 	mov	r4,r23
   11110:	d8800215 	stw	r2,8(sp)
   11114:	180b883a 	mov	r5,r3
   11118:	00050200 	call	5020 <__mulsi3>
   1111c:	d8c00117 	ldw	r3,4(sp)
   11120:	b009883a 	mov	r4,r22
   11124:	102f883a 	mov	r23,r2
   11128:	180b883a 	mov	r5,r3
   1112c:	00050200 	call	5020 <__mulsi3>
   11130:	d9800217 	ldw	r6,8(sp)
   11134:	e006d43a 	srli	r3,fp,16
   11138:	1185883a 	add	r2,r2,r6
   1113c:	1885883a 	add	r2,r3,r2
   11140:	1180022e 	bgeu	r2,r6,1114c <__umoddi3+0x454>
   11144:	00c00074 	movhi	r3,1
   11148:	b8ef883a 	add	r23,r23,r3
   1114c:	1006d43a 	srli	r3,r2,16
   11150:	1004943a 	slli	r2,r2,16
   11154:	e73fffcc 	andi	fp,fp,65535
   11158:	1dc7883a 	add	r3,r3,r23
   1115c:	1739883a 	add	fp,r2,fp
   11160:	88c03a36 	bltu	r17,r3,1124c <__umoddi3+0x554>
   11164:	88c05126 	beq	r17,r3,112ac <__umoddi3+0x5b4>
   11168:	88c9c83a 	sub	r4,r17,r3
   1116c:	e00f883a 	mov	r7,fp
   11170:	81cfc83a 	sub	r7,r16,r7
   11174:	81c7803a 	cmpltu	r3,r16,r7
   11178:	20c7c83a 	sub	r3,r4,r3
   1117c:	1cc4983a 	sll	r2,r3,r19
   11180:	3d0ed83a 	srl	r7,r7,r20
   11184:	1d06d83a 	srl	r3,r3,r20
   11188:	11c4b03a 	or	r2,r2,r7
   1118c:	003f7c06 	br	10f80 <__alt_exception_stack_pointer+0xf8010f80>
   11190:	9ca6983a 	sll	r19,r19,r18
   11194:	88f8d83a 	srl	fp,r17,r3
   11198:	80c4d83a 	srl	r2,r16,r3
   1119c:	982cd43a 	srli	r22,r19,16
   111a0:	8ca2983a 	sll	r17,r17,r18
   111a4:	e009883a 	mov	r4,fp
   111a8:	b00b883a 	mov	r5,r22
   111ac:	146ab03a 	or	r21,r2,r17
   111b0:	0004fc80 	call	4fc8 <__umodsi3>
   111b4:	b00b883a 	mov	r5,r22
   111b8:	e009883a 	mov	r4,fp
   111bc:	1029883a 	mov	r20,r2
   111c0:	9dffffcc 	andi	r23,r19,65535
   111c4:	0004f640 	call	4f64 <__udivsi3>
   111c8:	b809883a 	mov	r4,r23
   111cc:	100b883a 	mov	r5,r2
   111d0:	00050200 	call	5020 <__mulsi3>
   111d4:	a008943a 	slli	r4,r20,16
   111d8:	a806d43a 	srli	r3,r21,16
   111dc:	84a8983a 	sll	r20,r16,r18
   111e0:	1906b03a 	or	r3,r3,r4
   111e4:	1880042e 	bgeu	r3,r2,111f8 <__umoddi3+0x500>
   111e8:	1cc7883a 	add	r3,r3,r19
   111ec:	1cc00236 	bltu	r3,r19,111f8 <__umoddi3+0x500>
   111f0:	1880012e 	bgeu	r3,r2,111f8 <__umoddi3+0x500>
   111f4:	1cc7883a 	add	r3,r3,r19
   111f8:	18a3c83a 	sub	r17,r3,r2
   111fc:	b00b883a 	mov	r5,r22
   11200:	8809883a 	mov	r4,r17
   11204:	0004fc80 	call	4fc8 <__umodsi3>
   11208:	b00b883a 	mov	r5,r22
   1120c:	8809883a 	mov	r4,r17
   11210:	1021883a 	mov	r16,r2
   11214:	0004f640 	call	4f64 <__udivsi3>
   11218:	100b883a 	mov	r5,r2
   1121c:	b809883a 	mov	r4,r23
   11220:	8020943a 	slli	r16,r16,16
   11224:	00050200 	call	5020 <__mulsi3>
   11228:	a8ffffcc 	andi	r3,r21,65535
   1122c:	1c06b03a 	or	r3,r3,r16
   11230:	1880042e 	bgeu	r3,r2,11244 <__umoddi3+0x54c>
   11234:	1cc7883a 	add	r3,r3,r19
   11238:	1cc00236 	bltu	r3,r19,11244 <__umoddi3+0x54c>
   1123c:	1880012e 	bgeu	r3,r2,11244 <__umoddi3+0x54c>
   11240:	1cc7883a 	add	r3,r3,r19
   11244:	18a3c83a 	sub	r17,r3,r2
   11248:	003f2906 	br	10ef0 <__alt_exception_stack_pointer+0xf8010ef0>
   1124c:	e48fc83a 	sub	r7,fp,r18
   11250:	1d49c83a 	sub	r4,r3,r21
   11254:	e1f9803a 	cmpltu	fp,fp,r7
   11258:	2739c83a 	sub	fp,r4,fp
   1125c:	8f09c83a 	sub	r4,r17,fp
   11260:	003fc306 	br	11170 <__alt_exception_stack_pointer+0xf8011170>
   11264:	01000604 	movi	r4,24
   11268:	003ef906 	br	10e50 <__alt_exception_stack_pointer+0xf8010e50>
   1126c:	00800604 	movi	r2,24
   11270:	003f1306 	br	10ec0 <__alt_exception_stack_pointer+0xf8010ec0>
   11274:	01000604 	movi	r4,24
   11278:	003eb606 	br	10d54 <__alt_exception_stack_pointer+0xf8010d54>
   1127c:	40bf902e 	bgeu	r8,r2,110c0 <__alt_exception_stack_pointer+0xf80110c0>
   11280:	b5bfff84 	addi	r22,r22,-2
   11284:	4551883a 	add	r8,r8,r21
   11288:	003f8e06 	br	110c4 <__alt_exception_stack_pointer+0xf80110c4>
   1128c:	18bf762e 	bgeu	r3,r2,11068 <__alt_exception_stack_pointer+0xf8011068>
   11290:	8c7fff84 	addi	r17,r17,-2
   11294:	1d47883a 	add	r3,r3,r21
   11298:	003f7406 	br	1106c <__alt_exception_stack_pointer+0xf801106c>
   1129c:	1cc7883a 	add	r3,r3,r19
   112a0:	003ecd06 	br	10dd8 <__alt_exception_stack_pointer+0xf8010dd8>
   112a4:	8005883a 	mov	r2,r16
   112a8:	003ef806 	br	10e8c <__alt_exception_stack_pointer+0xf8010e8c>
   112ac:	873fe736 	bltu	r16,fp,1124c <__alt_exception_stack_pointer+0xf801124c>
   112b0:	e00f883a 	mov	r7,fp
   112b4:	0009883a 	mov	r4,zero
   112b8:	003fad06 	br	11170 <__alt_exception_stack_pointer+0xf8011170>

000112bc <__divdf3>:
   112bc:	defff004 	addi	sp,sp,-64
   112c0:	dc800815 	stw	r18,32(sp)
   112c4:	2824d53a 	srli	r18,r5,20
   112c8:	dd800c15 	stw	r22,48(sp)
   112cc:	282cd7fa 	srli	r22,r5,31
   112d0:	dc000615 	stw	r16,24(sp)
   112d4:	04000434 	movhi	r16,16
   112d8:	843fffc4 	addi	r16,r16,-1
   112dc:	dfc00f15 	stw	ra,60(sp)
   112e0:	df000e15 	stw	fp,56(sp)
   112e4:	ddc00d15 	stw	r23,52(sp)
   112e8:	dd400b15 	stw	r21,44(sp)
   112ec:	dd000a15 	stw	r20,40(sp)
   112f0:	dcc00915 	stw	r19,36(sp)
   112f4:	dc400715 	stw	r17,28(sp)
   112f8:	9481ffcc 	andi	r18,r18,2047
   112fc:	2c20703a 	and	r16,r5,r16
   11300:	b2003fcc 	andi	r8,r22,255
   11304:	90006126 	beq	r18,zero,1148c <__divdf3+0x1d0>
   11308:	0081ffc4 	movi	r2,2047
   1130c:	202b883a 	mov	r21,r4
   11310:	90803726 	beq	r18,r2,113f0 <__divdf3+0x134>
   11314:	80800434 	orhi	r2,r16,16
   11318:	100490fa 	slli	r2,r2,3
   1131c:	2020d77a 	srli	r16,r4,29
   11320:	202a90fa 	slli	r21,r4,3
   11324:	94bf0044 	addi	r18,r18,-1023
   11328:	80a0b03a 	or	r16,r16,r2
   1132c:	0013883a 	mov	r9,zero
   11330:	000b883a 	mov	r5,zero
   11334:	3806d53a 	srli	r3,r7,20
   11338:	382ed7fa 	srli	r23,r7,31
   1133c:	04400434 	movhi	r17,16
   11340:	8c7fffc4 	addi	r17,r17,-1
   11344:	18c1ffcc 	andi	r3,r3,2047
   11348:	3029883a 	mov	r20,r6
   1134c:	3c62703a 	and	r17,r7,r17
   11350:	bf003fcc 	andi	fp,r23,255
   11354:	18006e26 	beq	r3,zero,11510 <__divdf3+0x254>
   11358:	0081ffc4 	movi	r2,2047
   1135c:	18806626 	beq	r3,r2,114f8 <__divdf3+0x23c>
   11360:	88800434 	orhi	r2,r17,16
   11364:	100490fa 	slli	r2,r2,3
   11368:	3022d77a 	srli	r17,r6,29
   1136c:	302890fa 	slli	r20,r6,3
   11370:	18ff0044 	addi	r3,r3,-1023
   11374:	88a2b03a 	or	r17,r17,r2
   11378:	000f883a 	mov	r7,zero
   1137c:	b5e6f03a 	xor	r19,r22,r23
   11380:	3a4cb03a 	or	r6,r7,r9
   11384:	008003c4 	movi	r2,15
   11388:	9809883a 	mov	r4,r19
   1138c:	90c7c83a 	sub	r3,r18,r3
   11390:	9cc03fcc 	andi	r19,r19,255
   11394:	11809636 	bltu	r2,r6,115f0 <__divdf3+0x334>
   11398:	300c90ba 	slli	r6,r6,2
   1139c:	00800074 	movhi	r2,1
   113a0:	1084ec04 	addi	r2,r2,5040
   113a4:	308d883a 	add	r6,r6,r2
   113a8:	30800017 	ldw	r2,0(r6)
   113ac:	1000683a 	jmp	r2
   113b0:	000115f0 	cmpltui	zero,zero,1111
   113b4:	00011428 	cmpgeui	zero,zero,1104
   113b8:	000115e0 	cmpeqi	zero,zero,1111
   113bc:	0001141c 	xori	zero,zero,1104
   113c0:	000115e0 	cmpeqi	zero,zero,1111
   113c4:	000115b4 	movhi	zero,1110
   113c8:	000115e0 	cmpeqi	zero,zero,1111
   113cc:	0001141c 	xori	zero,zero,1104
   113d0:	00011428 	cmpgeui	zero,zero,1104
   113d4:	00011428 	cmpgeui	zero,zero,1104
   113d8:	000115b4 	movhi	zero,1110
   113dc:	0001141c 	xori	zero,zero,1104
   113e0:	0001140c 	andi	zero,zero,1104
   113e4:	0001140c 	andi	zero,zero,1104
   113e8:	0001140c 	andi	zero,zero,1104
   113ec:	00011978 	rdprs	zero,zero,1125
   113f0:	2404b03a 	or	r2,r4,r16
   113f4:	10006c1e 	bne	r2,zero,115a8 <__divdf3+0x2ec>
   113f8:	02400204 	movi	r9,8
   113fc:	0021883a 	mov	r16,zero
   11400:	002b883a 	mov	r21,zero
   11404:	01400084 	movi	r5,2
   11408:	003fca06 	br	11334 <__alt_exception_stack_pointer+0xf8011334>
   1140c:	8023883a 	mov	r17,r16
   11410:	a829883a 	mov	r20,r21
   11414:	4039883a 	mov	fp,r8
   11418:	280f883a 	mov	r7,r5
   1141c:	00800084 	movi	r2,2
   11420:	3881601e 	bne	r7,r2,119a4 <__divdf3+0x6e8>
   11424:	e027883a 	mov	r19,fp
   11428:	9900004c 	andi	r4,r19,1
   1142c:	0081ffc4 	movi	r2,2047
   11430:	0021883a 	mov	r16,zero
   11434:	002b883a 	mov	r21,zero
   11438:	1004953a 	slli	r2,r2,20
   1143c:	20c03fcc 	andi	r3,r4,255
   11440:	01400434 	movhi	r5,16
   11444:	297fffc4 	addi	r5,r5,-1
   11448:	180697fa 	slli	r3,r3,31
   1144c:	8160703a 	and	r16,r16,r5
   11450:	80a0b03a 	or	r16,r16,r2
   11454:	80c6b03a 	or	r3,r16,r3
   11458:	a805883a 	mov	r2,r21
   1145c:	dfc00f17 	ldw	ra,60(sp)
   11460:	df000e17 	ldw	fp,56(sp)
   11464:	ddc00d17 	ldw	r23,52(sp)
   11468:	dd800c17 	ldw	r22,48(sp)
   1146c:	dd400b17 	ldw	r21,44(sp)
   11470:	dd000a17 	ldw	r20,40(sp)
   11474:	dcc00917 	ldw	r19,36(sp)
   11478:	dc800817 	ldw	r18,32(sp)
   1147c:	dc400717 	ldw	r17,28(sp)
   11480:	dc000617 	ldw	r16,24(sp)
   11484:	dec01004 	addi	sp,sp,64
   11488:	f800283a 	ret
   1148c:	2404b03a 	or	r2,r4,r16
   11490:	2023883a 	mov	r17,r4
   11494:	10003f26 	beq	r2,zero,11594 <__divdf3+0x2d8>
   11498:	80015e26 	beq	r16,zero,11a14 <__divdf3+0x758>
   1149c:	8009883a 	mov	r4,r16
   114a0:	d9800215 	stw	r6,8(sp)
   114a4:	d9c00515 	stw	r7,20(sp)
   114a8:	da000415 	stw	r8,16(sp)
   114ac:	0006d1c0 	call	6d1c <__clzsi2>
   114b0:	d9800217 	ldw	r6,8(sp)
   114b4:	d9c00517 	ldw	r7,20(sp)
   114b8:	da000417 	ldw	r8,16(sp)
   114bc:	113ffd44 	addi	r4,r2,-11
   114c0:	00c00704 	movi	r3,28
   114c4:	19014f16 	blt	r3,r4,11a04 <__divdf3+0x748>
   114c8:	00c00744 	movi	r3,29
   114cc:	157ffe04 	addi	r21,r2,-8
   114d0:	1907c83a 	sub	r3,r3,r4
   114d4:	8560983a 	sll	r16,r16,r21
   114d8:	88c6d83a 	srl	r3,r17,r3
   114dc:	8d6a983a 	sll	r21,r17,r21
   114e0:	1c20b03a 	or	r16,r3,r16
   114e4:	1080fcc4 	addi	r2,r2,1011
   114e8:	00a5c83a 	sub	r18,zero,r2
   114ec:	0013883a 	mov	r9,zero
   114f0:	000b883a 	mov	r5,zero
   114f4:	003f8f06 	br	11334 <__alt_exception_stack_pointer+0xf8011334>
   114f8:	3444b03a 	or	r2,r6,r17
   114fc:	1000231e 	bne	r2,zero,1158c <__divdf3+0x2d0>
   11500:	0023883a 	mov	r17,zero
   11504:	0029883a 	mov	r20,zero
   11508:	01c00084 	movi	r7,2
   1150c:	003f9b06 	br	1137c <__alt_exception_stack_pointer+0xf801137c>
   11510:	3444b03a 	or	r2,r6,r17
   11514:	10001926 	beq	r2,zero,1157c <__divdf3+0x2c0>
   11518:	88014b26 	beq	r17,zero,11a48 <__divdf3+0x78c>
   1151c:	8809883a 	mov	r4,r17
   11520:	d9400115 	stw	r5,4(sp)
   11524:	d9800215 	stw	r6,8(sp)
   11528:	da000415 	stw	r8,16(sp)
   1152c:	da400315 	stw	r9,12(sp)
   11530:	0006d1c0 	call	6d1c <__clzsi2>
   11534:	d9400117 	ldw	r5,4(sp)
   11538:	d9800217 	ldw	r6,8(sp)
   1153c:	da000417 	ldw	r8,16(sp)
   11540:	da400317 	ldw	r9,12(sp)
   11544:	113ffd44 	addi	r4,r2,-11
   11548:	00c00704 	movi	r3,28
   1154c:	19013a16 	blt	r3,r4,11a38 <__divdf3+0x77c>
   11550:	00c00744 	movi	r3,29
   11554:	153ffe04 	addi	r20,r2,-8
   11558:	1907c83a 	sub	r3,r3,r4
   1155c:	8d22983a 	sll	r17,r17,r20
   11560:	30c6d83a 	srl	r3,r6,r3
   11564:	3528983a 	sll	r20,r6,r20
   11568:	1c62b03a 	or	r17,r3,r17
   1156c:	1080fcc4 	addi	r2,r2,1011
   11570:	0087c83a 	sub	r3,zero,r2
   11574:	000f883a 	mov	r7,zero
   11578:	003f8006 	br	1137c <__alt_exception_stack_pointer+0xf801137c>
   1157c:	0023883a 	mov	r17,zero
   11580:	0029883a 	mov	r20,zero
   11584:	01c00044 	movi	r7,1
   11588:	003f7c06 	br	1137c <__alt_exception_stack_pointer+0xf801137c>
   1158c:	01c000c4 	movi	r7,3
   11590:	003f7a06 	br	1137c <__alt_exception_stack_pointer+0xf801137c>
   11594:	02400104 	movi	r9,4
   11598:	0021883a 	mov	r16,zero
   1159c:	002b883a 	mov	r21,zero
   115a0:	01400044 	movi	r5,1
   115a4:	003f6306 	br	11334 <__alt_exception_stack_pointer+0xf8011334>
   115a8:	02400304 	movi	r9,12
   115ac:	014000c4 	movi	r5,3
   115b0:	003f6006 	br	11334 <__alt_exception_stack_pointer+0xf8011334>
   115b4:	04000434 	movhi	r16,16
   115b8:	0009883a 	mov	r4,zero
   115bc:	843fffc4 	addi	r16,r16,-1
   115c0:	057fffc4 	movi	r21,-1
   115c4:	0081ffc4 	movi	r2,2047
   115c8:	003f9b06 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   115cc:	00c00044 	movi	r3,1
   115d0:	1887c83a 	sub	r3,r3,r2
   115d4:	01000e04 	movi	r4,56
   115d8:	20c1530e 	bge	r4,r3,11b28 <__divdf3+0x86c>
   115dc:	9900004c 	andi	r4,r19,1
   115e0:	0005883a 	mov	r2,zero
   115e4:	0021883a 	mov	r16,zero
   115e8:	002b883a 	mov	r21,zero
   115ec:	003f9206 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   115f0:	8c012e36 	bltu	r17,r16,11aac <__divdf3+0x7f0>
   115f4:	84412c26 	beq	r16,r17,11aa8 <__divdf3+0x7ec>
   115f8:	a82f883a 	mov	r23,r21
   115fc:	18ffffc4 	addi	r3,r3,-1
   11600:	002b883a 	mov	r21,zero
   11604:	a004d63a 	srli	r2,r20,24
   11608:	8822923a 	slli	r17,r17,8
   1160c:	a028923a 	slli	r20,r20,8
   11610:	8009883a 	mov	r4,r16
   11614:	88acb03a 	or	r22,r17,r2
   11618:	dd000015 	stw	r20,0(sp)
   1161c:	b028d43a 	srli	r20,r22,16
   11620:	d8c00215 	stw	r3,8(sp)
   11624:	b4bfffcc 	andi	r18,r22,65535
   11628:	a00b883a 	mov	r5,r20
   1162c:	0004f640 	call	4f64 <__udivsi3>
   11630:	100b883a 	mov	r5,r2
   11634:	9009883a 	mov	r4,r18
   11638:	1023883a 	mov	r17,r2
   1163c:	00050200 	call	5020 <__mulsi3>
   11640:	8009883a 	mov	r4,r16
   11644:	a00b883a 	mov	r5,r20
   11648:	1039883a 	mov	fp,r2
   1164c:	0004fc80 	call	4fc8 <__umodsi3>
   11650:	1004943a 	slli	r2,r2,16
   11654:	b808d43a 	srli	r4,r23,16
   11658:	d8c00217 	ldw	r3,8(sp)
   1165c:	2084b03a 	or	r2,r4,r2
   11660:	1700062e 	bgeu	r2,fp,1167c <__divdf3+0x3c0>
   11664:	1585883a 	add	r2,r2,r22
   11668:	893fffc4 	addi	r4,r17,-1
   1166c:	15811d36 	bltu	r2,r22,11ae4 <__divdf3+0x828>
   11670:	17011c2e 	bgeu	r2,fp,11ae4 <__divdf3+0x828>
   11674:	8c7fff84 	addi	r17,r17,-2
   11678:	1585883a 	add	r2,r2,r22
   1167c:	1739c83a 	sub	fp,r2,fp
   11680:	a00b883a 	mov	r5,r20
   11684:	e009883a 	mov	r4,fp
   11688:	d8c00215 	stw	r3,8(sp)
   1168c:	0004f640 	call	4f64 <__udivsi3>
   11690:	100b883a 	mov	r5,r2
   11694:	9009883a 	mov	r4,r18
   11698:	1021883a 	mov	r16,r2
   1169c:	00050200 	call	5020 <__mulsi3>
   116a0:	a00b883a 	mov	r5,r20
   116a4:	e009883a 	mov	r4,fp
   116a8:	d8800415 	stw	r2,16(sp)
   116ac:	0004fc80 	call	4fc8 <__umodsi3>
   116b0:	1004943a 	slli	r2,r2,16
   116b4:	da000417 	ldw	r8,16(sp)
   116b8:	bdffffcc 	andi	r23,r23,65535
   116bc:	b884b03a 	or	r2,r23,r2
   116c0:	d8c00217 	ldw	r3,8(sp)
   116c4:	1200062e 	bgeu	r2,r8,116e0 <__divdf3+0x424>
   116c8:	1585883a 	add	r2,r2,r22
   116cc:	813fffc4 	addi	r4,r16,-1
   116d0:	15810236 	bltu	r2,r22,11adc <__divdf3+0x820>
   116d4:	1201012e 	bgeu	r2,r8,11adc <__divdf3+0x820>
   116d8:	843fff84 	addi	r16,r16,-2
   116dc:	1585883a 	add	r2,r2,r22
   116e0:	8822943a 	slli	r17,r17,16
   116e4:	d9800017 	ldw	r6,0(sp)
   116e8:	1211c83a 	sub	r8,r2,r8
   116ec:	8c22b03a 	or	r17,r17,r16
   116f0:	373fffcc 	andi	fp,r6,65535
   116f4:	8abfffcc 	andi	r10,r17,65535
   116f8:	8820d43a 	srli	r16,r17,16
   116fc:	5009883a 	mov	r4,r10
   11700:	e00b883a 	mov	r5,fp
   11704:	302ed43a 	srli	r23,r6,16
   11708:	d8c00215 	stw	r3,8(sp)
   1170c:	da000415 	stw	r8,16(sp)
   11710:	da800115 	stw	r10,4(sp)
   11714:	00050200 	call	5020 <__mulsi3>
   11718:	800b883a 	mov	r5,r16
   1171c:	e009883a 	mov	r4,fp
   11720:	d8800515 	stw	r2,20(sp)
   11724:	00050200 	call	5020 <__mulsi3>
   11728:	8009883a 	mov	r4,r16
   1172c:	b80b883a 	mov	r5,r23
   11730:	d8800315 	stw	r2,12(sp)
   11734:	00050200 	call	5020 <__mulsi3>
   11738:	da800117 	ldw	r10,4(sp)
   1173c:	b80b883a 	mov	r5,r23
   11740:	1021883a 	mov	r16,r2
   11744:	5009883a 	mov	r4,r10
   11748:	00050200 	call	5020 <__mulsi3>
   1174c:	d9c00517 	ldw	r7,20(sp)
   11750:	da400317 	ldw	r9,12(sp)
   11754:	d8c00217 	ldw	r3,8(sp)
   11758:	3808d43a 	srli	r4,r7,16
   1175c:	1245883a 	add	r2,r2,r9
   11760:	da000417 	ldw	r8,16(sp)
   11764:	2085883a 	add	r2,r4,r2
   11768:	1240022e 	bgeu	r2,r9,11774 <__divdf3+0x4b8>
   1176c:	01000074 	movhi	r4,1
   11770:	8121883a 	add	r16,r16,r4
   11774:	1008d43a 	srli	r4,r2,16
   11778:	1004943a 	slli	r2,r2,16
   1177c:	39ffffcc 	andi	r7,r7,65535
   11780:	2409883a 	add	r4,r4,r16
   11784:	11c5883a 	add	r2,r2,r7
   11788:	4100bb36 	bltu	r8,r4,11a78 <__divdf3+0x7bc>
   1178c:	4100d726 	beq	r8,r4,11aec <__divdf3+0x830>
   11790:	4109c83a 	sub	r4,r8,r4
   11794:	a8a1c83a 	sub	r16,r21,r2
   11798:	ac2b803a 	cmpltu	r21,r21,r16
   1179c:	256bc83a 	sub	r21,r4,r21
   117a0:	b540d926 	beq	r22,r21,11b08 <__divdf3+0x84c>
   117a4:	a00b883a 	mov	r5,r20
   117a8:	a809883a 	mov	r4,r21
   117ac:	d8c00215 	stw	r3,8(sp)
   117b0:	0004f640 	call	4f64 <__udivsi3>
   117b4:	100b883a 	mov	r5,r2
   117b8:	9009883a 	mov	r4,r18
   117bc:	d8800515 	stw	r2,20(sp)
   117c0:	00050200 	call	5020 <__mulsi3>
   117c4:	a809883a 	mov	r4,r21
   117c8:	a00b883a 	mov	r5,r20
   117cc:	d8800415 	stw	r2,16(sp)
   117d0:	0004fc80 	call	4fc8 <__umodsi3>
   117d4:	1004943a 	slli	r2,r2,16
   117d8:	8008d43a 	srli	r4,r16,16
   117dc:	da000417 	ldw	r8,16(sp)
   117e0:	d8c00217 	ldw	r3,8(sp)
   117e4:	2084b03a 	or	r2,r4,r2
   117e8:	d9c00517 	ldw	r7,20(sp)
   117ec:	1200062e 	bgeu	r2,r8,11808 <__divdf3+0x54c>
   117f0:	1585883a 	add	r2,r2,r22
   117f4:	393fffc4 	addi	r4,r7,-1
   117f8:	1580c536 	bltu	r2,r22,11b10 <__divdf3+0x854>
   117fc:	1200c42e 	bgeu	r2,r8,11b10 <__divdf3+0x854>
   11800:	39ffff84 	addi	r7,r7,-2
   11804:	1585883a 	add	r2,r2,r22
   11808:	122bc83a 	sub	r21,r2,r8
   1180c:	a00b883a 	mov	r5,r20
   11810:	a809883a 	mov	r4,r21
   11814:	d8c00215 	stw	r3,8(sp)
   11818:	d9c00515 	stw	r7,20(sp)
   1181c:	0004f640 	call	4f64 <__udivsi3>
   11820:	9009883a 	mov	r4,r18
   11824:	100b883a 	mov	r5,r2
   11828:	d8800415 	stw	r2,16(sp)
   1182c:	00050200 	call	5020 <__mulsi3>
   11830:	a809883a 	mov	r4,r21
   11834:	a00b883a 	mov	r5,r20
   11838:	1025883a 	mov	r18,r2
   1183c:	0004fc80 	call	4fc8 <__umodsi3>
   11840:	1004943a 	slli	r2,r2,16
   11844:	813fffcc 	andi	r4,r16,65535
   11848:	d8c00217 	ldw	r3,8(sp)
   1184c:	20a0b03a 	or	r16,r4,r2
   11850:	d9c00517 	ldw	r7,20(sp)
   11854:	da000417 	ldw	r8,16(sp)
   11858:	8480062e 	bgeu	r16,r18,11874 <__divdf3+0x5b8>
   1185c:	85a1883a 	add	r16,r16,r22
   11860:	40bfffc4 	addi	r2,r8,-1
   11864:	8580ac36 	bltu	r16,r22,11b18 <__divdf3+0x85c>
   11868:	8480ab2e 	bgeu	r16,r18,11b18 <__divdf3+0x85c>
   1186c:	423fff84 	addi	r8,r8,-2
   11870:	85a1883a 	add	r16,r16,r22
   11874:	3804943a 	slli	r2,r7,16
   11878:	84a1c83a 	sub	r16,r16,r18
   1187c:	e009883a 	mov	r4,fp
   11880:	1228b03a 	or	r20,r2,r8
   11884:	a1ffffcc 	andi	r7,r20,65535
   11888:	a024d43a 	srli	r18,r20,16
   1188c:	380b883a 	mov	r5,r7
   11890:	d8c00215 	stw	r3,8(sp)
   11894:	d9c00515 	stw	r7,20(sp)
   11898:	00050200 	call	5020 <__mulsi3>
   1189c:	900b883a 	mov	r5,r18
   118a0:	e009883a 	mov	r4,fp
   118a4:	102b883a 	mov	r21,r2
   118a8:	00050200 	call	5020 <__mulsi3>
   118ac:	900b883a 	mov	r5,r18
   118b0:	b809883a 	mov	r4,r23
   118b4:	1039883a 	mov	fp,r2
   118b8:	00050200 	call	5020 <__mulsi3>
   118bc:	d9c00517 	ldw	r7,20(sp)
   118c0:	b80b883a 	mov	r5,r23
   118c4:	1025883a 	mov	r18,r2
   118c8:	3809883a 	mov	r4,r7
   118cc:	00050200 	call	5020 <__mulsi3>
   118d0:	a808d43a 	srli	r4,r21,16
   118d4:	1705883a 	add	r2,r2,fp
   118d8:	d8c00217 	ldw	r3,8(sp)
   118dc:	2085883a 	add	r2,r4,r2
   118e0:	1700022e 	bgeu	r2,fp,118ec <__divdf3+0x630>
   118e4:	01000074 	movhi	r4,1
   118e8:	9125883a 	add	r18,r18,r4
   118ec:	1008d43a 	srli	r4,r2,16
   118f0:	1004943a 	slli	r2,r2,16
   118f4:	ad7fffcc 	andi	r21,r21,65535
   118f8:	2489883a 	add	r4,r4,r18
   118fc:	1545883a 	add	r2,r2,r21
   11900:	81003836 	bltu	r16,r4,119e4 <__divdf3+0x728>
   11904:	81003626 	beq	r16,r4,119e0 <__divdf3+0x724>
   11908:	a5000054 	ori	r20,r20,1
   1190c:	1880ffc4 	addi	r2,r3,1023
   11910:	00bf2e0e 	bge	zero,r2,115cc <__alt_exception_stack_pointer+0xf80115cc>
   11914:	a10001cc 	andi	r4,r20,7
   11918:	20000726 	beq	r4,zero,11938 <__divdf3+0x67c>
   1191c:	a10003cc 	andi	r4,r20,15
   11920:	01400104 	movi	r5,4
   11924:	21400426 	beq	r4,r5,11938 <__divdf3+0x67c>
   11928:	a149883a 	add	r4,r20,r5
   1192c:	2529803a 	cmpltu	r20,r4,r20
   11930:	8d23883a 	add	r17,r17,r20
   11934:	2029883a 	mov	r20,r4
   11938:	8900402c 	andhi	r4,r17,256
   1193c:	20000426 	beq	r4,zero,11950 <__divdf3+0x694>
   11940:	18810004 	addi	r2,r3,1024
   11944:	00ffc034 	movhi	r3,65280
   11948:	18ffffc4 	addi	r3,r3,-1
   1194c:	88e2703a 	and	r17,r17,r3
   11950:	00c1ff84 	movi	r3,2046
   11954:	18beb416 	blt	r3,r2,11428 <__alt_exception_stack_pointer+0xf8011428>
   11958:	a028d0fa 	srli	r20,r20,3
   1195c:	882a977a 	slli	r21,r17,29
   11960:	8820927a 	slli	r16,r17,9
   11964:	1081ffcc 	andi	r2,r2,2047
   11968:	ad2ab03a 	or	r21,r21,r20
   1196c:	8020d33a 	srli	r16,r16,12
   11970:	9900004c 	andi	r4,r19,1
   11974:	003eb006 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   11978:	8080022c 	andhi	r2,r16,8
   1197c:	10001226 	beq	r2,zero,119c8 <__divdf3+0x70c>
   11980:	8880022c 	andhi	r2,r17,8
   11984:	1000101e 	bne	r2,zero,119c8 <__divdf3+0x70c>
   11988:	00800434 	movhi	r2,16
   1198c:	8c000234 	orhi	r16,r17,8
   11990:	10bfffc4 	addi	r2,r2,-1
   11994:	b809883a 	mov	r4,r23
   11998:	80a0703a 	and	r16,r16,r2
   1199c:	a02b883a 	mov	r21,r20
   119a0:	003f0806 	br	115c4 <__alt_exception_stack_pointer+0xf80115c4>
   119a4:	008000c4 	movi	r2,3
   119a8:	3880b126 	beq	r7,r2,11c70 <__divdf3+0x9b4>
   119ac:	00800044 	movi	r2,1
   119b0:	38805b1e 	bne	r7,r2,11b20 <__divdf3+0x864>
   119b4:	e009883a 	mov	r4,fp
   119b8:	0005883a 	mov	r2,zero
   119bc:	0021883a 	mov	r16,zero
   119c0:	002b883a 	mov	r21,zero
   119c4:	003e9c06 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   119c8:	00800434 	movhi	r2,16
   119cc:	84000234 	orhi	r16,r16,8
   119d0:	10bfffc4 	addi	r2,r2,-1
   119d4:	b009883a 	mov	r4,r22
   119d8:	80a0703a 	and	r16,r16,r2
   119dc:	003ef906 	br	115c4 <__alt_exception_stack_pointer+0xf80115c4>
   119e0:	103fca26 	beq	r2,zero,1190c <__alt_exception_stack_pointer+0xf801190c>
   119e4:	b421883a 	add	r16,r22,r16
   119e8:	a17fffc4 	addi	r5,r20,-1
   119ec:	8580422e 	bgeu	r16,r22,11af8 <__divdf3+0x83c>
   119f0:	2829883a 	mov	r20,r5
   119f4:	813fc41e 	bne	r16,r4,11908 <__alt_exception_stack_pointer+0xf8011908>
   119f8:	d9800017 	ldw	r6,0(sp)
   119fc:	30bfc21e 	bne	r6,r2,11908 <__alt_exception_stack_pointer+0xf8011908>
   11a00:	003fc206 	br	1190c <__alt_exception_stack_pointer+0xf801190c>
   11a04:	143ff604 	addi	r16,r2,-40
   11a08:	8c20983a 	sll	r16,r17,r16
   11a0c:	002b883a 	mov	r21,zero
   11a10:	003eb406 	br	114e4 <__alt_exception_stack_pointer+0xf80114e4>
   11a14:	d9800215 	stw	r6,8(sp)
   11a18:	d9c00515 	stw	r7,20(sp)
   11a1c:	da000415 	stw	r8,16(sp)
   11a20:	0006d1c0 	call	6d1c <__clzsi2>
   11a24:	10800804 	addi	r2,r2,32
   11a28:	da000417 	ldw	r8,16(sp)
   11a2c:	d9c00517 	ldw	r7,20(sp)
   11a30:	d9800217 	ldw	r6,8(sp)
   11a34:	003ea106 	br	114bc <__alt_exception_stack_pointer+0xf80114bc>
   11a38:	147ff604 	addi	r17,r2,-40
   11a3c:	3462983a 	sll	r17,r6,r17
   11a40:	0029883a 	mov	r20,zero
   11a44:	003ec906 	br	1156c <__alt_exception_stack_pointer+0xf801156c>
   11a48:	3009883a 	mov	r4,r6
   11a4c:	d9400115 	stw	r5,4(sp)
   11a50:	d9800215 	stw	r6,8(sp)
   11a54:	da000415 	stw	r8,16(sp)
   11a58:	da400315 	stw	r9,12(sp)
   11a5c:	0006d1c0 	call	6d1c <__clzsi2>
   11a60:	10800804 	addi	r2,r2,32
   11a64:	da400317 	ldw	r9,12(sp)
   11a68:	da000417 	ldw	r8,16(sp)
   11a6c:	d9800217 	ldw	r6,8(sp)
   11a70:	d9400117 	ldw	r5,4(sp)
   11a74:	003eb306 	br	11544 <__alt_exception_stack_pointer+0xf8011544>
   11a78:	d9800017 	ldw	r6,0(sp)
   11a7c:	a9ab883a 	add	r21,r21,r6
   11a80:	a98b803a 	cmpltu	r5,r21,r6
   11a84:	2d8b883a 	add	r5,r5,r22
   11a88:	2a11883a 	add	r8,r5,r8
   11a8c:	897fffc4 	addi	r5,r17,-1
   11a90:	b2000c2e 	bgeu	r22,r8,11ac4 <__divdf3+0x808>
   11a94:	41003f36 	bltu	r8,r4,11b94 <__divdf3+0x8d8>
   11a98:	22006c26 	beq	r4,r8,11c4c <__divdf3+0x990>
   11a9c:	4109c83a 	sub	r4,r8,r4
   11aa0:	2823883a 	mov	r17,r5
   11aa4:	003f3b06 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   11aa8:	ad3ed336 	bltu	r21,r20,115f8 <__alt_exception_stack_pointer+0xf80115f8>
   11aac:	a804d07a 	srli	r2,r21,1
   11ab0:	802e97fa 	slli	r23,r16,31
   11ab4:	a82a97fa 	slli	r21,r21,31
   11ab8:	8020d07a 	srli	r16,r16,1
   11abc:	b8aeb03a 	or	r23,r23,r2
   11ac0:	003ed006 	br	11604 <__alt_exception_stack_pointer+0xf8011604>
   11ac4:	b23ff51e 	bne	r22,r8,11a9c <__alt_exception_stack_pointer+0xf8011a9c>
   11ac8:	d9800017 	ldw	r6,0(sp)
   11acc:	a9bff12e 	bgeu	r21,r6,11a94 <__alt_exception_stack_pointer+0xf8011a94>
   11ad0:	b109c83a 	sub	r4,r22,r4
   11ad4:	2823883a 	mov	r17,r5
   11ad8:	003f2e06 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   11adc:	2021883a 	mov	r16,r4
   11ae0:	003eff06 	br	116e0 <__alt_exception_stack_pointer+0xf80116e0>
   11ae4:	2023883a 	mov	r17,r4
   11ae8:	003ee406 	br	1167c <__alt_exception_stack_pointer+0xf801167c>
   11aec:	a8bfe236 	bltu	r21,r2,11a78 <__alt_exception_stack_pointer+0xf8011a78>
   11af0:	0009883a 	mov	r4,zero
   11af4:	003f2706 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   11af8:	81002d36 	bltu	r16,r4,11bb0 <__divdf3+0x8f4>
   11afc:	24005626 	beq	r4,r16,11c58 <__divdf3+0x99c>
   11b00:	2829883a 	mov	r20,r5
   11b04:	003f8006 	br	11908 <__alt_exception_stack_pointer+0xf8011908>
   11b08:	053fffc4 	movi	r20,-1
   11b0c:	003f7f06 	br	1190c <__alt_exception_stack_pointer+0xf801190c>
   11b10:	200f883a 	mov	r7,r4
   11b14:	003f3c06 	br	11808 <__alt_exception_stack_pointer+0xf8011808>
   11b18:	1011883a 	mov	r8,r2
   11b1c:	003f5506 	br	11874 <__alt_exception_stack_pointer+0xf8011874>
   11b20:	e027883a 	mov	r19,fp
   11b24:	003f7906 	br	1190c <__alt_exception_stack_pointer+0xf801190c>
   11b28:	010007c4 	movi	r4,31
   11b2c:	20c02816 	blt	r4,r3,11bd0 <__divdf3+0x914>
   11b30:	00800804 	movi	r2,32
   11b34:	10c5c83a 	sub	r2,r2,r3
   11b38:	888a983a 	sll	r5,r17,r2
   11b3c:	a0c8d83a 	srl	r4,r20,r3
   11b40:	a084983a 	sll	r2,r20,r2
   11b44:	88e2d83a 	srl	r17,r17,r3
   11b48:	2906b03a 	or	r3,r5,r4
   11b4c:	1004c03a 	cmpne	r2,r2,zero
   11b50:	1886b03a 	or	r3,r3,r2
   11b54:	188001cc 	andi	r2,r3,7
   11b58:	10000726 	beq	r2,zero,11b78 <__divdf3+0x8bc>
   11b5c:	188003cc 	andi	r2,r3,15
   11b60:	01000104 	movi	r4,4
   11b64:	11000426 	beq	r2,r4,11b78 <__divdf3+0x8bc>
   11b68:	1805883a 	mov	r2,r3
   11b6c:	10c00104 	addi	r3,r2,4
   11b70:	1885803a 	cmpltu	r2,r3,r2
   11b74:	88a3883a 	add	r17,r17,r2
   11b78:	8880202c 	andhi	r2,r17,128
   11b7c:	10002926 	beq	r2,zero,11c24 <__divdf3+0x968>
   11b80:	9900004c 	andi	r4,r19,1
   11b84:	00800044 	movi	r2,1
   11b88:	0021883a 	mov	r16,zero
   11b8c:	002b883a 	mov	r21,zero
   11b90:	003e2906 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   11b94:	d9800017 	ldw	r6,0(sp)
   11b98:	8c7fff84 	addi	r17,r17,-2
   11b9c:	a9ab883a 	add	r21,r21,r6
   11ba0:	a98b803a 	cmpltu	r5,r21,r6
   11ba4:	2d8b883a 	add	r5,r5,r22
   11ba8:	2a11883a 	add	r8,r5,r8
   11bac:	003ef806 	br	11790 <__alt_exception_stack_pointer+0xf8011790>
   11bb0:	d9800017 	ldw	r6,0(sp)
   11bb4:	318f883a 	add	r7,r6,r6
   11bb8:	398b803a 	cmpltu	r5,r7,r6
   11bbc:	2d8d883a 	add	r6,r5,r22
   11bc0:	81a1883a 	add	r16,r16,r6
   11bc4:	a17fff84 	addi	r5,r20,-2
   11bc8:	d9c00015 	stw	r7,0(sp)
   11bcc:	003f8806 	br	119f0 <__alt_exception_stack_pointer+0xf80119f0>
   11bd0:	013ff844 	movi	r4,-31
   11bd4:	2085c83a 	sub	r2,r4,r2
   11bd8:	8888d83a 	srl	r4,r17,r2
   11bdc:	00800804 	movi	r2,32
   11be0:	18802126 	beq	r3,r2,11c68 <__divdf3+0x9ac>
   11be4:	04001004 	movi	r16,64
   11be8:	80c7c83a 	sub	r3,r16,r3
   11bec:	88e0983a 	sll	r16,r17,r3
   11bf0:	8504b03a 	or	r2,r16,r20
   11bf4:	1004c03a 	cmpne	r2,r2,zero
   11bf8:	2084b03a 	or	r2,r4,r2
   11bfc:	144001cc 	andi	r17,r2,7
   11c00:	88000d1e 	bne	r17,zero,11c38 <__divdf3+0x97c>
   11c04:	0021883a 	mov	r16,zero
   11c08:	102ad0fa 	srli	r21,r2,3
   11c0c:	9900004c 	andi	r4,r19,1
   11c10:	0005883a 	mov	r2,zero
   11c14:	ac6ab03a 	or	r21,r21,r17
   11c18:	003e0706 	br	11438 <__alt_exception_stack_pointer+0xf8011438>
   11c1c:	1007883a 	mov	r3,r2
   11c20:	0023883a 	mov	r17,zero
   11c24:	8820927a 	slli	r16,r17,9
   11c28:	1805883a 	mov	r2,r3
   11c2c:	8822977a 	slli	r17,r17,29
   11c30:	8020d33a 	srli	r16,r16,12
   11c34:	003ff406 	br	11c08 <__alt_exception_stack_pointer+0xf8011c08>
   11c38:	10c003cc 	andi	r3,r2,15
   11c3c:	01000104 	movi	r4,4
   11c40:	193ff626 	beq	r3,r4,11c1c <__alt_exception_stack_pointer+0xf8011c1c>
   11c44:	0023883a 	mov	r17,zero
   11c48:	003fc806 	br	11b6c <__alt_exception_stack_pointer+0xf8011b6c>
   11c4c:	a8bfd136 	bltu	r21,r2,11b94 <__alt_exception_stack_pointer+0xf8011b94>
   11c50:	2823883a 	mov	r17,r5
   11c54:	003fa606 	br	11af0 <__alt_exception_stack_pointer+0xf8011af0>
   11c58:	d9800017 	ldw	r6,0(sp)
   11c5c:	30bfd436 	bltu	r6,r2,11bb0 <__alt_exception_stack_pointer+0xf8011bb0>
   11c60:	2829883a 	mov	r20,r5
   11c64:	003f6406 	br	119f8 <__alt_exception_stack_pointer+0xf80119f8>
   11c68:	0021883a 	mov	r16,zero
   11c6c:	003fe006 	br	11bf0 <__alt_exception_stack_pointer+0xf8011bf0>
   11c70:	00800434 	movhi	r2,16
   11c74:	8c000234 	orhi	r16,r17,8
   11c78:	10bfffc4 	addi	r2,r2,-1
   11c7c:	e009883a 	mov	r4,fp
   11c80:	80a0703a 	and	r16,r16,r2
   11c84:	a02b883a 	mov	r21,r20
   11c88:	003e4e06 	br	115c4 <__alt_exception_stack_pointer+0xf80115c4>

00011c8c <__ledf2>:
   11c8c:	2804d53a 	srli	r2,r5,20
   11c90:	3810d53a 	srli	r8,r7,20
   11c94:	00c00434 	movhi	r3,16
   11c98:	18ffffc4 	addi	r3,r3,-1
   11c9c:	1081ffcc 	andi	r2,r2,2047
   11ca0:	0241ffc4 	movi	r9,2047
   11ca4:	28d4703a 	and	r10,r5,r3
   11ca8:	4201ffcc 	andi	r8,r8,2047
   11cac:	38c6703a 	and	r3,r7,r3
   11cb0:	280ad7fa 	srli	r5,r5,31
   11cb4:	380ed7fa 	srli	r7,r7,31
   11cb8:	12401f26 	beq	r2,r9,11d38 <__ledf2+0xac>
   11cbc:	0241ffc4 	movi	r9,2047
   11cc0:	42401426 	beq	r8,r9,11d14 <__ledf2+0x88>
   11cc4:	1000091e 	bne	r2,zero,11cec <__ledf2+0x60>
   11cc8:	2296b03a 	or	r11,r4,r10
   11ccc:	5813003a 	cmpeq	r9,r11,zero
   11cd0:	29403fcc 	andi	r5,r5,255
   11cd4:	40000a1e 	bne	r8,zero,11d00 <__ledf2+0x74>
   11cd8:	30d8b03a 	or	r12,r6,r3
   11cdc:	6000081e 	bne	r12,zero,11d00 <__ledf2+0x74>
   11ce0:	0005883a 	mov	r2,zero
   11ce4:	5800111e 	bne	r11,zero,11d2c <__ledf2+0xa0>
   11ce8:	f800283a 	ret
   11cec:	29403fcc 	andi	r5,r5,255
   11cf0:	40000c1e 	bne	r8,zero,11d24 <__ledf2+0x98>
   11cf4:	30d2b03a 	or	r9,r6,r3
   11cf8:	48000c26 	beq	r9,zero,11d2c <__ledf2+0xa0>
   11cfc:	0013883a 	mov	r9,zero
   11d00:	39c03fcc 	andi	r7,r7,255
   11d04:	48000826 	beq	r9,zero,11d28 <__ledf2+0x9c>
   11d08:	38001126 	beq	r7,zero,11d50 <__ledf2+0xc4>
   11d0c:	00800044 	movi	r2,1
   11d10:	f800283a 	ret
   11d14:	30d2b03a 	or	r9,r6,r3
   11d18:	483fea26 	beq	r9,zero,11cc4 <__alt_exception_stack_pointer+0xf8011cc4>
   11d1c:	00800084 	movi	r2,2
   11d20:	f800283a 	ret
   11d24:	39c03fcc 	andi	r7,r7,255
   11d28:	39400726 	beq	r7,r5,11d48 <__ledf2+0xbc>
   11d2c:	2800081e 	bne	r5,zero,11d50 <__ledf2+0xc4>
   11d30:	00800044 	movi	r2,1
   11d34:	f800283a 	ret
   11d38:	2292b03a 	or	r9,r4,r10
   11d3c:	483fdf26 	beq	r9,zero,11cbc <__alt_exception_stack_pointer+0xf8011cbc>
   11d40:	00800084 	movi	r2,2
   11d44:	f800283a 	ret
   11d48:	4080030e 	bge	r8,r2,11d58 <__ledf2+0xcc>
   11d4c:	383fef26 	beq	r7,zero,11d0c <__alt_exception_stack_pointer+0xf8011d0c>
   11d50:	00bfffc4 	movi	r2,-1
   11d54:	f800283a 	ret
   11d58:	123feb16 	blt	r2,r8,11d08 <__alt_exception_stack_pointer+0xf8011d08>
   11d5c:	1abff336 	bltu	r3,r10,11d2c <__alt_exception_stack_pointer+0xf8011d2c>
   11d60:	50c00326 	beq	r10,r3,11d70 <__ledf2+0xe4>
   11d64:	50c0042e 	bgeu	r10,r3,11d78 <__ledf2+0xec>
   11d68:	283fe81e 	bne	r5,zero,11d0c <__alt_exception_stack_pointer+0xf8011d0c>
   11d6c:	003ff806 	br	11d50 <__alt_exception_stack_pointer+0xf8011d50>
   11d70:	313fee36 	bltu	r6,r4,11d2c <__alt_exception_stack_pointer+0xf8011d2c>
   11d74:	21bffc36 	bltu	r4,r6,11d68 <__alt_exception_stack_pointer+0xf8011d68>
   11d78:	0005883a 	mov	r2,zero
   11d7c:	f800283a 	ret

00011d80 <__floatunsidf>:
   11d80:	defffe04 	addi	sp,sp,-8
   11d84:	dc000015 	stw	r16,0(sp)
   11d88:	dfc00115 	stw	ra,4(sp)
   11d8c:	2021883a 	mov	r16,r4
   11d90:	20002226 	beq	r4,zero,11e1c <__floatunsidf+0x9c>
   11d94:	0006d1c0 	call	6d1c <__clzsi2>
   11d98:	01010784 	movi	r4,1054
   11d9c:	2089c83a 	sub	r4,r4,r2
   11da0:	01810cc4 	movi	r6,1075
   11da4:	310dc83a 	sub	r6,r6,r4
   11da8:	00c007c4 	movi	r3,31
   11dac:	1980120e 	bge	r3,r6,11df8 <__floatunsidf+0x78>
   11db0:	00c104c4 	movi	r3,1043
   11db4:	1907c83a 	sub	r3,r3,r4
   11db8:	80ca983a 	sll	r5,r16,r3
   11dbc:	00800434 	movhi	r2,16
   11dc0:	10bfffc4 	addi	r2,r2,-1
   11dc4:	2101ffcc 	andi	r4,r4,2047
   11dc8:	0021883a 	mov	r16,zero
   11dcc:	288a703a 	and	r5,r5,r2
   11dd0:	2008953a 	slli	r4,r4,20
   11dd4:	00c00434 	movhi	r3,16
   11dd8:	18ffffc4 	addi	r3,r3,-1
   11ddc:	28c6703a 	and	r3,r5,r3
   11de0:	8005883a 	mov	r2,r16
   11de4:	1906b03a 	or	r3,r3,r4
   11de8:	dfc00117 	ldw	ra,4(sp)
   11dec:	dc000017 	ldw	r16,0(sp)
   11df0:	dec00204 	addi	sp,sp,8
   11df4:	f800283a 	ret
   11df8:	00c002c4 	movi	r3,11
   11dfc:	188bc83a 	sub	r5,r3,r2
   11e00:	814ad83a 	srl	r5,r16,r5
   11e04:	00c00434 	movhi	r3,16
   11e08:	18ffffc4 	addi	r3,r3,-1
   11e0c:	81a0983a 	sll	r16,r16,r6
   11e10:	2101ffcc 	andi	r4,r4,2047
   11e14:	28ca703a 	and	r5,r5,r3
   11e18:	003fed06 	br	11dd0 <__alt_exception_stack_pointer+0xf8011dd0>
   11e1c:	0009883a 	mov	r4,zero
   11e20:	000b883a 	mov	r5,zero
   11e24:	003fea06 	br	11dd0 <__alt_exception_stack_pointer+0xf8011dd0>

00011e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e28:	defffe04 	addi	sp,sp,-8
   11e2c:	dfc00115 	stw	ra,4(sp)
   11e30:	df000015 	stw	fp,0(sp)
   11e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e38:	d0a00d17 	ldw	r2,-32716(gp)
   11e3c:	10000326 	beq	r2,zero,11e4c <alt_get_errno+0x24>
   11e40:	d0a00d17 	ldw	r2,-32716(gp)
   11e44:	103ee83a 	callr	r2
   11e48:	00000106 	br	11e50 <alt_get_errno+0x28>
   11e4c:	d0a6fd04 	addi	r2,gp,-25612
}
   11e50:	e037883a 	mov	sp,fp
   11e54:	dfc00117 	ldw	ra,4(sp)
   11e58:	df000017 	ldw	fp,0(sp)
   11e5c:	dec00204 	addi	sp,sp,8
   11e60:	f800283a 	ret

00011e64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11e64:	defffb04 	addi	sp,sp,-20
   11e68:	dfc00415 	stw	ra,16(sp)
   11e6c:	df000315 	stw	fp,12(sp)
   11e70:	df000304 	addi	fp,sp,12
   11e74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11e78:	e0bfff17 	ldw	r2,-4(fp)
   11e7c:	10000816 	blt	r2,zero,11ea0 <close+0x3c>
   11e80:	01400304 	movi	r5,12
   11e84:	e13fff17 	ldw	r4,-4(fp)
   11e88:	00050200 	call	5020 <__mulsi3>
   11e8c:	1007883a 	mov	r3,r2
   11e90:	00800074 	movhi	r2,1
   11e94:	10983004 	addi	r2,r2,24768
   11e98:	1885883a 	add	r2,r3,r2
   11e9c:	00000106 	br	11ea4 <close+0x40>
   11ea0:	0005883a 	mov	r2,zero
   11ea4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11ea8:	e0bffd17 	ldw	r2,-12(fp)
   11eac:	10001926 	beq	r2,zero,11f14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11eb0:	e0bffd17 	ldw	r2,-12(fp)
   11eb4:	10800017 	ldw	r2,0(r2)
   11eb8:	10800417 	ldw	r2,16(r2)
   11ebc:	10000626 	beq	r2,zero,11ed8 <close+0x74>
   11ec0:	e0bffd17 	ldw	r2,-12(fp)
   11ec4:	10800017 	ldw	r2,0(r2)
   11ec8:	10800417 	ldw	r2,16(r2)
   11ecc:	e13ffd17 	ldw	r4,-12(fp)
   11ed0:	103ee83a 	callr	r2
   11ed4:	00000106 	br	11edc <close+0x78>
   11ed8:	0005883a 	mov	r2,zero
   11edc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11ee0:	e13fff17 	ldw	r4,-4(fp)
   11ee4:	001254c0 	call	1254c <alt_release_fd>
    if (rval < 0)
   11ee8:	e0bffe17 	ldw	r2,-8(fp)
   11eec:	1000070e 	bge	r2,zero,11f0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11ef0:	0011e280 	call	11e28 <alt_get_errno>
   11ef4:	1007883a 	mov	r3,r2
   11ef8:	e0bffe17 	ldw	r2,-8(fp)
   11efc:	0085c83a 	sub	r2,zero,r2
   11f00:	18800015 	stw	r2,0(r3)
      return -1;
   11f04:	00bfffc4 	movi	r2,-1
   11f08:	00000706 	br	11f28 <close+0xc4>
    }
    return 0;
   11f0c:	0005883a 	mov	r2,zero
   11f10:	00000506 	br	11f28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11f14:	0011e280 	call	11e28 <alt_get_errno>
   11f18:	1007883a 	mov	r3,r2
   11f1c:	00801444 	movi	r2,81
   11f20:	18800015 	stw	r2,0(r3)
    return -1;
   11f24:	00bfffc4 	movi	r2,-1
  }
}
   11f28:	e037883a 	mov	sp,fp
   11f2c:	dfc00117 	ldw	ra,4(sp)
   11f30:	df000017 	ldw	fp,0(sp)
   11f34:	dec00204 	addi	sp,sp,8
   11f38:	f800283a 	ret

00011f3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11f3c:	defffc04 	addi	sp,sp,-16
   11f40:	df000315 	stw	fp,12(sp)
   11f44:	df000304 	addi	fp,sp,12
   11f48:	e13ffd15 	stw	r4,-12(fp)
   11f4c:	e17ffe15 	stw	r5,-8(fp)
   11f50:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11f54:	e0bfff17 	ldw	r2,-4(fp)
}
   11f58:	e037883a 	mov	sp,fp
   11f5c:	df000017 	ldw	fp,0(sp)
   11f60:	dec00104 	addi	sp,sp,4
   11f64:	f800283a 	ret

00011f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f68:	defffe04 	addi	sp,sp,-8
   11f6c:	dfc00115 	stw	ra,4(sp)
   11f70:	df000015 	stw	fp,0(sp)
   11f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11f78:	d0a00d17 	ldw	r2,-32716(gp)
   11f7c:	10000326 	beq	r2,zero,11f8c <alt_get_errno+0x24>
   11f80:	d0a00d17 	ldw	r2,-32716(gp)
   11f84:	103ee83a 	callr	r2
   11f88:	00000106 	br	11f90 <alt_get_errno+0x28>
   11f8c:	d0a6fd04 	addi	r2,gp,-25612
}
   11f90:	e037883a 	mov	sp,fp
   11f94:	dfc00117 	ldw	ra,4(sp)
   11f98:	df000017 	ldw	fp,0(sp)
   11f9c:	dec00204 	addi	sp,sp,8
   11fa0:	f800283a 	ret

00011fa4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11fa4:	defffb04 	addi	sp,sp,-20
   11fa8:	dfc00415 	stw	ra,16(sp)
   11fac:	df000315 	stw	fp,12(sp)
   11fb0:	df000304 	addi	fp,sp,12
   11fb4:	e13ffe15 	stw	r4,-8(fp)
   11fb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11fbc:	e0bffe17 	ldw	r2,-8(fp)
   11fc0:	10000816 	blt	r2,zero,11fe4 <fstat+0x40>
   11fc4:	01400304 	movi	r5,12
   11fc8:	e13ffe17 	ldw	r4,-8(fp)
   11fcc:	00050200 	call	5020 <__mulsi3>
   11fd0:	1007883a 	mov	r3,r2
   11fd4:	00800074 	movhi	r2,1
   11fd8:	10983004 	addi	r2,r2,24768
   11fdc:	1885883a 	add	r2,r3,r2
   11fe0:	00000106 	br	11fe8 <fstat+0x44>
   11fe4:	0005883a 	mov	r2,zero
   11fe8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11fec:	e0bffd17 	ldw	r2,-12(fp)
   11ff0:	10001026 	beq	r2,zero,12034 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11ff4:	e0bffd17 	ldw	r2,-12(fp)
   11ff8:	10800017 	ldw	r2,0(r2)
   11ffc:	10800817 	ldw	r2,32(r2)
   12000:	10000726 	beq	r2,zero,12020 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   12004:	e0bffd17 	ldw	r2,-12(fp)
   12008:	10800017 	ldw	r2,0(r2)
   1200c:	10800817 	ldw	r2,32(r2)
   12010:	e17fff17 	ldw	r5,-4(fp)
   12014:	e13ffd17 	ldw	r4,-12(fp)
   12018:	103ee83a 	callr	r2
   1201c:	00000a06 	br	12048 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12020:	e0bfff17 	ldw	r2,-4(fp)
   12024:	00c80004 	movi	r3,8192
   12028:	10c00115 	stw	r3,4(r2)
      return 0;
   1202c:	0005883a 	mov	r2,zero
   12030:	00000506 	br	12048 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12034:	0011f680 	call	11f68 <alt_get_errno>
   12038:	1007883a 	mov	r3,r2
   1203c:	00801444 	movi	r2,81
   12040:	18800015 	stw	r2,0(r3)
    return -1;
   12044:	00bfffc4 	movi	r2,-1
  }
}
   12048:	e037883a 	mov	sp,fp
   1204c:	dfc00117 	ldw	ra,4(sp)
   12050:	df000017 	ldw	fp,0(sp)
   12054:	dec00204 	addi	sp,sp,8
   12058:	f800283a 	ret

0001205c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1205c:	defffe04 	addi	sp,sp,-8
   12060:	dfc00115 	stw	ra,4(sp)
   12064:	df000015 	stw	fp,0(sp)
   12068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1206c:	d0a00d17 	ldw	r2,-32716(gp)
   12070:	10000326 	beq	r2,zero,12080 <alt_get_errno+0x24>
   12074:	d0a00d17 	ldw	r2,-32716(gp)
   12078:	103ee83a 	callr	r2
   1207c:	00000106 	br	12084 <alt_get_errno+0x28>
   12080:	d0a6fd04 	addi	r2,gp,-25612
}
   12084:	e037883a 	mov	sp,fp
   12088:	dfc00117 	ldw	ra,4(sp)
   1208c:	df000017 	ldw	fp,0(sp)
   12090:	dec00204 	addi	sp,sp,8
   12094:	f800283a 	ret

00012098 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12098:	deffed04 	addi	sp,sp,-76
   1209c:	dfc01215 	stw	ra,72(sp)
   120a0:	df001115 	stw	fp,68(sp)
   120a4:	df001104 	addi	fp,sp,68
   120a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   120ac:	e0bfff17 	ldw	r2,-4(fp)
   120b0:	10000816 	blt	r2,zero,120d4 <isatty+0x3c>
   120b4:	01400304 	movi	r5,12
   120b8:	e13fff17 	ldw	r4,-4(fp)
   120bc:	00050200 	call	5020 <__mulsi3>
   120c0:	1007883a 	mov	r3,r2
   120c4:	00800074 	movhi	r2,1
   120c8:	10983004 	addi	r2,r2,24768
   120cc:	1885883a 	add	r2,r3,r2
   120d0:	00000106 	br	120d8 <isatty+0x40>
   120d4:	0005883a 	mov	r2,zero
   120d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   120dc:	e0bfef17 	ldw	r2,-68(fp)
   120e0:	10000e26 	beq	r2,zero,1211c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   120e4:	e0bfef17 	ldw	r2,-68(fp)
   120e8:	10800017 	ldw	r2,0(r2)
   120ec:	10800817 	ldw	r2,32(r2)
   120f0:	1000021e 	bne	r2,zero,120fc <isatty+0x64>
    {
      return 1;
   120f4:	00800044 	movi	r2,1
   120f8:	00000d06 	br	12130 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   120fc:	e0bff004 	addi	r2,fp,-64
   12100:	100b883a 	mov	r5,r2
   12104:	e13fff17 	ldw	r4,-4(fp)
   12108:	0011fa40 	call	11fa4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1210c:	e0bff117 	ldw	r2,-60(fp)
   12110:	10880020 	cmpeqi	r2,r2,8192
   12114:	10803fcc 	andi	r2,r2,255
   12118:	00000506 	br	12130 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1211c:	001205c0 	call	1205c <alt_get_errno>
   12120:	1007883a 	mov	r3,r2
   12124:	00801444 	movi	r2,81
   12128:	18800015 	stw	r2,0(r3)
    return 0;
   1212c:	0005883a 	mov	r2,zero
  }
}
   12130:	e037883a 	mov	sp,fp
   12134:	dfc00117 	ldw	ra,4(sp)
   12138:	df000017 	ldw	fp,0(sp)
   1213c:	dec00204 	addi	sp,sp,8
   12140:	f800283a 	ret

00012144 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12144:	defffc04 	addi	sp,sp,-16
   12148:	df000315 	stw	fp,12(sp)
   1214c:	df000304 	addi	fp,sp,12
   12150:	e13ffd15 	stw	r4,-12(fp)
   12154:	e17ffe15 	stw	r5,-8(fp)
   12158:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1215c:	e0fffe17 	ldw	r3,-8(fp)
   12160:	e0bffd17 	ldw	r2,-12(fp)
   12164:	18800c26 	beq	r3,r2,12198 <alt_load_section+0x54>
  {
    while( to != end )
   12168:	00000806 	br	1218c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1216c:	e0bffe17 	ldw	r2,-8(fp)
   12170:	10c00104 	addi	r3,r2,4
   12174:	e0fffe15 	stw	r3,-8(fp)
   12178:	e0fffd17 	ldw	r3,-12(fp)
   1217c:	19000104 	addi	r4,r3,4
   12180:	e13ffd15 	stw	r4,-12(fp)
   12184:	18c00017 	ldw	r3,0(r3)
   12188:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1218c:	e0fffe17 	ldw	r3,-8(fp)
   12190:	e0bfff17 	ldw	r2,-4(fp)
   12194:	18bff51e 	bne	r3,r2,1216c <__alt_exception_stack_pointer+0xf801216c>
    {
      *to++ = *from++;
    }
  }
}
   12198:	0001883a 	nop
   1219c:	e037883a 	mov	sp,fp
   121a0:	df000017 	ldw	fp,0(sp)
   121a4:	dec00104 	addi	sp,sp,4
   121a8:	f800283a 	ret

000121ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   121ac:	defffe04 	addi	sp,sp,-8
   121b0:	dfc00115 	stw	ra,4(sp)
   121b4:	df000015 	stw	fp,0(sp)
   121b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   121bc:	01800074 	movhi	r6,1
   121c0:	319cdf04 	addi	r6,r6,29564
   121c4:	01400074 	movhi	r5,1
   121c8:	2955fd04 	addi	r5,r5,22516
   121cc:	01000074 	movhi	r4,1
   121d0:	211cdf04 	addi	r4,r4,29564
   121d4:	00121440 	call	12144 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   121d8:	01800034 	movhi	r6,0
   121dc:	31808f04 	addi	r6,r6,572
   121e0:	01400034 	movhi	r5,0
   121e4:	29400804 	addi	r5,r5,32
   121e8:	01000034 	movhi	r4,0
   121ec:	21000804 	addi	r4,r4,32
   121f0:	00121440 	call	12144 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   121f4:	01800074 	movhi	r6,1
   121f8:	3195fd04 	addi	r6,r6,22516
   121fc:	01400074 	movhi	r5,1
   12200:	2952b004 	addi	r5,r5,19136
   12204:	01000074 	movhi	r4,1
   12208:	2112b004 	addi	r4,r4,19136
   1220c:	00121440 	call	12144 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12210:	0013a080 	call	13a08 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12214:	0013bc80 	call	13bc8 <alt_icache_flush_all>
}
   12218:	0001883a 	nop
   1221c:	e037883a 	mov	sp,fp
   12220:	dfc00117 	ldw	ra,4(sp)
   12224:	df000017 	ldw	fp,0(sp)
   12228:	dec00204 	addi	sp,sp,8
   1222c:	f800283a 	ret

00012230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12230:	defffe04 	addi	sp,sp,-8
   12234:	dfc00115 	stw	ra,4(sp)
   12238:	df000015 	stw	fp,0(sp)
   1223c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12240:	d0a00d17 	ldw	r2,-32716(gp)
   12244:	10000326 	beq	r2,zero,12254 <alt_get_errno+0x24>
   12248:	d0a00d17 	ldw	r2,-32716(gp)
   1224c:	103ee83a 	callr	r2
   12250:	00000106 	br	12258 <alt_get_errno+0x28>
   12254:	d0a6fd04 	addi	r2,gp,-25612
}
   12258:	e037883a 	mov	sp,fp
   1225c:	dfc00117 	ldw	ra,4(sp)
   12260:	df000017 	ldw	fp,0(sp)
   12264:	dec00204 	addi	sp,sp,8
   12268:	f800283a 	ret

0001226c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1226c:	defff904 	addi	sp,sp,-28
   12270:	dfc00615 	stw	ra,24(sp)
   12274:	df000515 	stw	fp,20(sp)
   12278:	df000504 	addi	fp,sp,20
   1227c:	e13ffd15 	stw	r4,-12(fp)
   12280:	e17ffe15 	stw	r5,-8(fp)
   12284:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12288:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1228c:	e0bffd17 	ldw	r2,-12(fp)
   12290:	10000816 	blt	r2,zero,122b4 <lseek+0x48>
   12294:	01400304 	movi	r5,12
   12298:	e13ffd17 	ldw	r4,-12(fp)
   1229c:	00050200 	call	5020 <__mulsi3>
   122a0:	1007883a 	mov	r3,r2
   122a4:	00800074 	movhi	r2,1
   122a8:	10983004 	addi	r2,r2,24768
   122ac:	1885883a 	add	r2,r3,r2
   122b0:	00000106 	br	122b8 <lseek+0x4c>
   122b4:	0005883a 	mov	r2,zero
   122b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   122bc:	e0bffc17 	ldw	r2,-16(fp)
   122c0:	10001026 	beq	r2,zero,12304 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   122c4:	e0bffc17 	ldw	r2,-16(fp)
   122c8:	10800017 	ldw	r2,0(r2)
   122cc:	10800717 	ldw	r2,28(r2)
   122d0:	10000926 	beq	r2,zero,122f8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   122d4:	e0bffc17 	ldw	r2,-16(fp)
   122d8:	10800017 	ldw	r2,0(r2)
   122dc:	10800717 	ldw	r2,28(r2)
   122e0:	e1bfff17 	ldw	r6,-4(fp)
   122e4:	e17ffe17 	ldw	r5,-8(fp)
   122e8:	e13ffc17 	ldw	r4,-16(fp)
   122ec:	103ee83a 	callr	r2
   122f0:	e0bffb15 	stw	r2,-20(fp)
   122f4:	00000506 	br	1230c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   122f8:	00bfde84 	movi	r2,-134
   122fc:	e0bffb15 	stw	r2,-20(fp)
   12300:	00000206 	br	1230c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   12304:	00bfebc4 	movi	r2,-81
   12308:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1230c:	e0bffb17 	ldw	r2,-20(fp)
   12310:	1000070e 	bge	r2,zero,12330 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   12314:	00122300 	call	12230 <alt_get_errno>
   12318:	1007883a 	mov	r3,r2
   1231c:	e0bffb17 	ldw	r2,-20(fp)
   12320:	0085c83a 	sub	r2,zero,r2
   12324:	18800015 	stw	r2,0(r3)
    rc = -1;
   12328:	00bfffc4 	movi	r2,-1
   1232c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12330:	e0bffb17 	ldw	r2,-20(fp)
}
   12334:	e037883a 	mov	sp,fp
   12338:	dfc00117 	ldw	ra,4(sp)
   1233c:	df000017 	ldw	fp,0(sp)
   12340:	dec00204 	addi	sp,sp,8
   12344:	f800283a 	ret

00012348 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12348:	defffd04 	addi	sp,sp,-12
   1234c:	dfc00215 	stw	ra,8(sp)
   12350:	df000115 	stw	fp,4(sp)
   12354:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12358:	0009883a 	mov	r4,zero
   1235c:	00128d40 	call	128d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12360:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12364:	001290c0 	call	1290c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12368:	01800074 	movhi	r6,1
   1236c:	3195e704 	addi	r6,r6,22428
   12370:	01400074 	movhi	r5,1
   12374:	2955ec04 	addi	r5,r5,22448
   12378:	01000074 	movhi	r4,1
   1237c:	2115e704 	addi	r4,r4,22428
   12380:	0013f6c0 	call	13f6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12384:	0013b080 	call	13b08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12388:	01000074 	movhi	r4,1
   1238c:	210eda04 	addi	r4,r4,15208
   12390:	001472c0 	call	1472c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12394:	d0a70117 	ldw	r2,-25596(gp)
   12398:	d0e70217 	ldw	r3,-25592(gp)
   1239c:	d1270317 	ldw	r4,-25588(gp)
   123a0:	200d883a 	mov	r6,r4
   123a4:	180b883a 	mov	r5,r3
   123a8:	1009883a 	mov	r4,r2
   123ac:	000146c0 	call	146c <main>
   123b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   123b4:	01000044 	movi	r4,1
   123b8:	0011e640 	call	11e64 <close>
  exit (result);
   123bc:	e13fff17 	ldw	r4,-4(fp)
   123c0:	00147400 	call	14740 <exit>

000123c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   123c4:	defffe04 	addi	sp,sp,-8
   123c8:	df000115 	stw	fp,4(sp)
   123cc:	df000104 	addi	fp,sp,4
   123d0:	e13fff15 	stw	r4,-4(fp)
}
   123d4:	0001883a 	nop
   123d8:	e037883a 	mov	sp,fp
   123dc:	df000017 	ldw	fp,0(sp)
   123e0:	dec00104 	addi	sp,sp,4
   123e4:	f800283a 	ret

000123e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   123e8:	defffe04 	addi	sp,sp,-8
   123ec:	df000115 	stw	fp,4(sp)
   123f0:	df000104 	addi	fp,sp,4
   123f4:	e13fff15 	stw	r4,-4(fp)
}
   123f8:	0001883a 	nop
   123fc:	e037883a 	mov	sp,fp
   12400:	df000017 	ldw	fp,0(sp)
   12404:	dec00104 	addi	sp,sp,4
   12408:	f800283a 	ret

0001240c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1240c:	defffe04 	addi	sp,sp,-8
   12410:	dfc00115 	stw	ra,4(sp)
   12414:	df000015 	stw	fp,0(sp)
   12418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1241c:	d0a00d17 	ldw	r2,-32716(gp)
   12420:	10000326 	beq	r2,zero,12430 <alt_get_errno+0x24>
   12424:	d0a00d17 	ldw	r2,-32716(gp)
   12428:	103ee83a 	callr	r2
   1242c:	00000106 	br	12434 <alt_get_errno+0x28>
   12430:	d0a6fd04 	addi	r2,gp,-25612
}
   12434:	e037883a 	mov	sp,fp
   12438:	dfc00117 	ldw	ra,4(sp)
   1243c:	df000017 	ldw	fp,0(sp)
   12440:	dec00204 	addi	sp,sp,8
   12444:	f800283a 	ret

00012448 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12448:	defff904 	addi	sp,sp,-28
   1244c:	dfc00615 	stw	ra,24(sp)
   12450:	df000515 	stw	fp,20(sp)
   12454:	df000504 	addi	fp,sp,20
   12458:	e13ffd15 	stw	r4,-12(fp)
   1245c:	e17ffe15 	stw	r5,-8(fp)
   12460:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12464:	e0bffd17 	ldw	r2,-12(fp)
   12468:	10000816 	blt	r2,zero,1248c <read+0x44>
   1246c:	01400304 	movi	r5,12
   12470:	e13ffd17 	ldw	r4,-12(fp)
   12474:	00050200 	call	5020 <__mulsi3>
   12478:	1007883a 	mov	r3,r2
   1247c:	00800074 	movhi	r2,1
   12480:	10983004 	addi	r2,r2,24768
   12484:	1885883a 	add	r2,r3,r2
   12488:	00000106 	br	12490 <read+0x48>
   1248c:	0005883a 	mov	r2,zero
   12490:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12494:	e0bffb17 	ldw	r2,-20(fp)
   12498:	10002226 	beq	r2,zero,12524 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1249c:	e0bffb17 	ldw	r2,-20(fp)
   124a0:	10800217 	ldw	r2,8(r2)
   124a4:	108000cc 	andi	r2,r2,3
   124a8:	10800060 	cmpeqi	r2,r2,1
   124ac:	1000181e 	bne	r2,zero,12510 <read+0xc8>
        (fd->dev->read))
   124b0:	e0bffb17 	ldw	r2,-20(fp)
   124b4:	10800017 	ldw	r2,0(r2)
   124b8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   124bc:	10001426 	beq	r2,zero,12510 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   124c0:	e0bffb17 	ldw	r2,-20(fp)
   124c4:	10800017 	ldw	r2,0(r2)
   124c8:	10800517 	ldw	r2,20(r2)
   124cc:	e0ffff17 	ldw	r3,-4(fp)
   124d0:	180d883a 	mov	r6,r3
   124d4:	e17ffe17 	ldw	r5,-8(fp)
   124d8:	e13ffb17 	ldw	r4,-20(fp)
   124dc:	103ee83a 	callr	r2
   124e0:	e0bffc15 	stw	r2,-16(fp)
   124e4:	e0bffc17 	ldw	r2,-16(fp)
   124e8:	1000070e 	bge	r2,zero,12508 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   124ec:	001240c0 	call	1240c <alt_get_errno>
   124f0:	1007883a 	mov	r3,r2
   124f4:	e0bffc17 	ldw	r2,-16(fp)
   124f8:	0085c83a 	sub	r2,zero,r2
   124fc:	18800015 	stw	r2,0(r3)
          return -1;
   12500:	00bfffc4 	movi	r2,-1
   12504:	00000c06 	br	12538 <read+0xf0>
        }
        return rval;
   12508:	e0bffc17 	ldw	r2,-16(fp)
   1250c:	00000a06 	br	12538 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12510:	001240c0 	call	1240c <alt_get_errno>
   12514:	1007883a 	mov	r3,r2
   12518:	00800344 	movi	r2,13
   1251c:	18800015 	stw	r2,0(r3)
   12520:	00000406 	br	12534 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12524:	001240c0 	call	1240c <alt_get_errno>
   12528:	1007883a 	mov	r3,r2
   1252c:	00801444 	movi	r2,81
   12530:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12534:	00bfffc4 	movi	r2,-1
}
   12538:	e037883a 	mov	sp,fp
   1253c:	dfc00117 	ldw	ra,4(sp)
   12540:	df000017 	ldw	fp,0(sp)
   12544:	dec00204 	addi	sp,sp,8
   12548:	f800283a 	ret

0001254c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1254c:	defffc04 	addi	sp,sp,-16
   12550:	dfc00315 	stw	ra,12(sp)
   12554:	df000215 	stw	fp,8(sp)
   12558:	dc000115 	stw	r16,4(sp)
   1255c:	df000204 	addi	fp,sp,8
   12560:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12564:	e0bffe17 	ldw	r2,-8(fp)
   12568:	108000d0 	cmplti	r2,r2,3
   1256c:	1000111e 	bne	r2,zero,125b4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12570:	04000074 	movhi	r16,1
   12574:	84183004 	addi	r16,r16,24768
   12578:	e0bffe17 	ldw	r2,-8(fp)
   1257c:	01400304 	movi	r5,12
   12580:	1009883a 	mov	r4,r2
   12584:	00050200 	call	5020 <__mulsi3>
   12588:	8085883a 	add	r2,r16,r2
   1258c:	10800204 	addi	r2,r2,8
   12590:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12594:	04000074 	movhi	r16,1
   12598:	84183004 	addi	r16,r16,24768
   1259c:	e0bffe17 	ldw	r2,-8(fp)
   125a0:	01400304 	movi	r5,12
   125a4:	1009883a 	mov	r4,r2
   125a8:	00050200 	call	5020 <__mulsi3>
   125ac:	8085883a 	add	r2,r16,r2
   125b0:	10000015 	stw	zero,0(r2)
  }
}
   125b4:	0001883a 	nop
   125b8:	e6ffff04 	addi	sp,fp,-4
   125bc:	dfc00217 	ldw	ra,8(sp)
   125c0:	df000117 	ldw	fp,4(sp)
   125c4:	dc000017 	ldw	r16,0(sp)
   125c8:	dec00304 	addi	sp,sp,12
   125cc:	f800283a 	ret

000125d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   125d0:	defff904 	addi	sp,sp,-28
   125d4:	df000615 	stw	fp,24(sp)
   125d8:	df000604 	addi	fp,sp,24
   125dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125e0:	0005303a 	rdctl	r2,status
   125e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125e8:	e0fffe17 	ldw	r3,-8(fp)
   125ec:	00bfff84 	movi	r2,-2
   125f0:	1884703a 	and	r2,r3,r2
   125f4:	1001703a 	wrctl	status,r2
  
  return context;
   125f8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   125fc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12600:	d0a00e17 	ldw	r2,-32712(gp)
   12604:	10c000c4 	addi	r3,r2,3
   12608:	00bfff04 	movi	r2,-4
   1260c:	1884703a 	and	r2,r3,r2
   12610:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12614:	d0e00e17 	ldw	r3,-32712(gp)
   12618:	e0bfff17 	ldw	r2,-4(fp)
   1261c:	1887883a 	add	r3,r3,r2
   12620:	00820034 	movhi	r2,2048
   12624:	10bf0004 	addi	r2,r2,-1024
   12628:	10c0062e 	bgeu	r2,r3,12644 <sbrk+0x74>
   1262c:	e0bffb17 	ldw	r2,-20(fp)
   12630:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12634:	e0bffa17 	ldw	r2,-24(fp)
   12638:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1263c:	00bfffc4 	movi	r2,-1
   12640:	00000b06 	br	12670 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12644:	d0a00e17 	ldw	r2,-32712(gp)
   12648:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1264c:	d0e00e17 	ldw	r3,-32712(gp)
   12650:	e0bfff17 	ldw	r2,-4(fp)
   12654:	1885883a 	add	r2,r3,r2
   12658:	d0a00e15 	stw	r2,-32712(gp)
   1265c:	e0bffb17 	ldw	r2,-20(fp)
   12660:	e0bffc15 	stw	r2,-16(fp)
   12664:	e0bffc17 	ldw	r2,-16(fp)
   12668:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1266c:	e0bffd17 	ldw	r2,-12(fp)
} 
   12670:	e037883a 	mov	sp,fp
   12674:	df000017 	ldw	fp,0(sp)
   12678:	dec00104 	addi	sp,sp,4
   1267c:	f800283a 	ret

00012680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12680:	defffe04 	addi	sp,sp,-8
   12684:	dfc00115 	stw	ra,4(sp)
   12688:	df000015 	stw	fp,0(sp)
   1268c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12690:	d0a00d17 	ldw	r2,-32716(gp)
   12694:	10000326 	beq	r2,zero,126a4 <alt_get_errno+0x24>
   12698:	d0a00d17 	ldw	r2,-32716(gp)
   1269c:	103ee83a 	callr	r2
   126a0:	00000106 	br	126a8 <alt_get_errno+0x28>
   126a4:	d0a6fd04 	addi	r2,gp,-25612
}
   126a8:	e037883a 	mov	sp,fp
   126ac:	dfc00117 	ldw	ra,4(sp)
   126b0:	df000017 	ldw	fp,0(sp)
   126b4:	dec00204 	addi	sp,sp,8
   126b8:	f800283a 	ret

000126bc <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   126bc:	defffc04 	addi	sp,sp,-16
   126c0:	dfc00315 	stw	ra,12(sp)
   126c4:	df000215 	stw	fp,8(sp)
   126c8:	df000204 	addi	fp,sp,8
   126cc:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   126d0:	d0a70617 	ldw	r2,-25576(gp)
  clock_t ticks = alt_nticks(); 
   126d4:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   126d8:	d0a70517 	ldw	r2,-25580(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   126dc:	1000061e 	bne	r2,zero,126f8 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   126e0:	00126800 	call	12680 <alt_get_errno>
   126e4:	1007883a 	mov	r3,r2
   126e8:	00801604 	movi	r2,88
   126ec:	18800015 	stw	r2,0(r3)
    return 0;
   126f0:	0005883a 	mov	r2,zero
   126f4:	00000a06 	br	12720 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   126f8:	e0bfff17 	ldw	r2,-4(fp)
   126fc:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   12700:	e0bfff17 	ldw	r2,-4(fp)
   12704:	e0fffe17 	ldw	r3,-8(fp)
   12708:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1270c:	e0bfff17 	ldw	r2,-4(fp)
   12710:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   12714:	e0bfff17 	ldw	r2,-4(fp)
   12718:	10000315 	stw	zero,12(r2)

  return ticks;
   1271c:	e0bffe17 	ldw	r2,-8(fp)
}
   12720:	e037883a 	mov	sp,fp
   12724:	dfc00117 	ldw	ra,4(sp)
   12728:	df000017 	ldw	fp,0(sp)
   1272c:	dec00204 	addi	sp,sp,8
   12730:	f800283a 	ret

00012734 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   12734:	defffd04 	addi	sp,sp,-12
   12738:	dfc00215 	stw	ra,8(sp)
   1273c:	df000115 	stw	fp,4(sp)
   12740:	df000104 	addi	fp,sp,4
   12744:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   12748:	e13fff17 	ldw	r4,-4(fp)
   1274c:	00138b00 	call	138b0 <alt_busy_sleep>
}
   12750:	e037883a 	mov	sp,fp
   12754:	dfc00117 	ldw	ra,4(sp)
   12758:	df000017 	ldw	fp,0(sp)
   1275c:	dec00204 	addi	sp,sp,8
   12760:	f800283a 	ret

00012764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12764:	defffe04 	addi	sp,sp,-8
   12768:	dfc00115 	stw	ra,4(sp)
   1276c:	df000015 	stw	fp,0(sp)
   12770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12774:	d0a00d17 	ldw	r2,-32716(gp)
   12778:	10000326 	beq	r2,zero,12788 <alt_get_errno+0x24>
   1277c:	d0a00d17 	ldw	r2,-32716(gp)
   12780:	103ee83a 	callr	r2
   12784:	00000106 	br	1278c <alt_get_errno+0x28>
   12788:	d0a6fd04 	addi	r2,gp,-25612
}
   1278c:	e037883a 	mov	sp,fp
   12790:	dfc00117 	ldw	ra,4(sp)
   12794:	df000017 	ldw	fp,0(sp)
   12798:	dec00204 	addi	sp,sp,8
   1279c:	f800283a 	ret

000127a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   127a0:	defff904 	addi	sp,sp,-28
   127a4:	dfc00615 	stw	ra,24(sp)
   127a8:	df000515 	stw	fp,20(sp)
   127ac:	df000504 	addi	fp,sp,20
   127b0:	e13ffd15 	stw	r4,-12(fp)
   127b4:	e17ffe15 	stw	r5,-8(fp)
   127b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   127bc:	e0bffd17 	ldw	r2,-12(fp)
   127c0:	10000816 	blt	r2,zero,127e4 <write+0x44>
   127c4:	01400304 	movi	r5,12
   127c8:	e13ffd17 	ldw	r4,-12(fp)
   127cc:	00050200 	call	5020 <__mulsi3>
   127d0:	1007883a 	mov	r3,r2
   127d4:	00800074 	movhi	r2,1
   127d8:	10983004 	addi	r2,r2,24768
   127dc:	1885883a 	add	r2,r3,r2
   127e0:	00000106 	br	127e8 <write+0x48>
   127e4:	0005883a 	mov	r2,zero
   127e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   127ec:	e0bffb17 	ldw	r2,-20(fp)
   127f0:	10002126 	beq	r2,zero,12878 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   127f4:	e0bffb17 	ldw	r2,-20(fp)
   127f8:	10800217 	ldw	r2,8(r2)
   127fc:	108000cc 	andi	r2,r2,3
   12800:	10001826 	beq	r2,zero,12864 <write+0xc4>
   12804:	e0bffb17 	ldw	r2,-20(fp)
   12808:	10800017 	ldw	r2,0(r2)
   1280c:	10800617 	ldw	r2,24(r2)
   12810:	10001426 	beq	r2,zero,12864 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12814:	e0bffb17 	ldw	r2,-20(fp)
   12818:	10800017 	ldw	r2,0(r2)
   1281c:	10800617 	ldw	r2,24(r2)
   12820:	e0ffff17 	ldw	r3,-4(fp)
   12824:	180d883a 	mov	r6,r3
   12828:	e17ffe17 	ldw	r5,-8(fp)
   1282c:	e13ffb17 	ldw	r4,-20(fp)
   12830:	103ee83a 	callr	r2
   12834:	e0bffc15 	stw	r2,-16(fp)
   12838:	e0bffc17 	ldw	r2,-16(fp)
   1283c:	1000070e 	bge	r2,zero,1285c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   12840:	00127640 	call	12764 <alt_get_errno>
   12844:	1007883a 	mov	r3,r2
   12848:	e0bffc17 	ldw	r2,-16(fp)
   1284c:	0085c83a 	sub	r2,zero,r2
   12850:	18800015 	stw	r2,0(r3)
        return -1;
   12854:	00bfffc4 	movi	r2,-1
   12858:	00000c06 	br	1288c <write+0xec>
      }
      return rval;
   1285c:	e0bffc17 	ldw	r2,-16(fp)
   12860:	00000a06 	br	1288c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12864:	00127640 	call	12764 <alt_get_errno>
   12868:	1007883a 	mov	r3,r2
   1286c:	00800344 	movi	r2,13
   12870:	18800015 	stw	r2,0(r3)
   12874:	00000406 	br	12888 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12878:	00127640 	call	12764 <alt_get_errno>
   1287c:	1007883a 	mov	r3,r2
   12880:	00801444 	movi	r2,81
   12884:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12888:	00bfffc4 	movi	r2,-1
}
   1288c:	e037883a 	mov	sp,fp
   12890:	dfc00117 	ldw	ra,4(sp)
   12894:	df000017 	ldw	fp,0(sp)
   12898:	dec00204 	addi	sp,sp,8
   1289c:	f800283a 	ret

000128a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   128a0:	defffd04 	addi	sp,sp,-12
   128a4:	dfc00215 	stw	ra,8(sp)
   128a8:	df000115 	stw	fp,4(sp)
   128ac:	df000104 	addi	fp,sp,4
   128b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   128b4:	d1600a04 	addi	r5,gp,-32728
   128b8:	e13fff17 	ldw	r4,-4(fp)
   128bc:	0013a640 	call	13a64 <alt_dev_llist_insert>
}
   128c0:	e037883a 	mov	sp,fp
   128c4:	dfc00117 	ldw	ra,4(sp)
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00204 	addi	sp,sp,8
   128d0:	f800283a 	ret

000128d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   128d4:	defffd04 	addi	sp,sp,-12
   128d8:	dfc00215 	stw	ra,8(sp)
   128dc:	df000115 	stw	fp,4(sp)
   128e0:	df000104 	addi	fp,sp,4
   128e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   128e8:	00144100 	call	14410 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   128ec:	00800044 	movi	r2,1
   128f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   128f4:	0001883a 	nop
   128f8:	e037883a 	mov	sp,fp
   128fc:	dfc00117 	ldw	ra,4(sp)
   12900:	df000017 	ldw	fp,0(sp)
   12904:	dec00204 	addi	sp,sp,8
   12908:	f800283a 	ret

0001290c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1290c:	defffd04 	addi	sp,sp,-12
   12910:	dfc00215 	stw	ra,8(sp)
   12914:	df000115 	stw	fp,4(sp)
   12918:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1291c:	01c0fa04 	movi	r7,1000
   12920:	01800044 	movi	r6,1
   12924:	000b883a 	mov	r5,zero
   12928:	01020234 	movhi	r4,2056
   1292c:	210c0004 	addi	r4,r4,12288
   12930:	00137080 	call	13708 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   12934:	000d883a 	mov	r6,zero
   12938:	000b883a 	mov	r5,zero
   1293c:	01000074 	movhi	r4,1
   12940:	21189a04 	addi	r4,r4,25192
   12944:	0012d8c0 	call	12d8c <altera_avalon_jtag_uart_init>
   12948:	01000074 	movhi	r4,1
   1294c:	21189004 	addi	r4,r4,25152
   12950:	00128a00 	call	128a0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   12954:	00800074 	movhi	r2,1
   12958:	109ca804 	addi	r2,r2,29344
   1295c:	10800a17 	ldw	r2,40(r2)
   12960:	10800017 	ldw	r2,0(r2)
   12964:	1007883a 	mov	r3,r2
   12968:	00800074 	movhi	r2,1
   1296c:	109ca804 	addi	r2,r2,29344
   12970:	10c00b15 	stw	r3,44(r2)
   12974:	00800074 	movhi	r2,1
   12978:	109ca804 	addi	r2,r2,29344
   1297c:	10800a17 	ldw	r2,40(r2)
   12980:	10800104 	addi	r2,r2,4
   12984:	10800017 	ldw	r2,0(r2)
   12988:	1007883a 	mov	r3,r2
   1298c:	00800074 	movhi	r2,1
   12990:	109ca804 	addi	r2,r2,29344
   12994:	10c00c15 	stw	r3,48(r2)
   12998:	00800074 	movhi	r2,1
   1299c:	109ca804 	addi	r2,r2,29344
   129a0:	10800a17 	ldw	r2,40(r2)
   129a4:	10800204 	addi	r2,r2,8
   129a8:	10800017 	ldw	r2,0(r2)
   129ac:	10ffffcc 	andi	r3,r2,65535
   129b0:	00800074 	movhi	r2,1
   129b4:	109ca804 	addi	r2,r2,29344
   129b8:	10c00f15 	stw	r3,60(r2)
   129bc:	00800074 	movhi	r2,1
   129c0:	109ca804 	addi	r2,r2,29344
   129c4:	10800a17 	ldw	r2,40(r2)
   129c8:	10800204 	addi	r2,r2,8
   129cc:	10800017 	ldw	r2,0(r2)
   129d0:	1006d43a 	srli	r3,r2,16
   129d4:	00800074 	movhi	r2,1
   129d8:	109ca804 	addi	r2,r2,29344
   129dc:	10c01015 	stw	r3,64(r2)
   129e0:	00800074 	movhi	r2,1
   129e4:	109ca804 	addi	r2,r2,29344
   129e8:	10800a17 	ldw	r2,40(r2)
   129ec:	10800304 	addi	r2,r2,12
   129f0:	10800017 	ldw	r2,0(r2)
   129f4:	1005d07a 	srai	r2,r2,1
   129f8:	10c0004c 	andi	r3,r2,1
   129fc:	00800074 	movhi	r2,1
   12a00:	109ca804 	addi	r2,r2,29344
   12a04:	10c00d15 	stw	r3,52(r2)
   12a08:	00800074 	movhi	r2,1
   12a0c:	109ca804 	addi	r2,r2,29344
   12a10:	10800a17 	ldw	r2,40(r2)
   12a14:	10800304 	addi	r2,r2,12
   12a18:	10800017 	ldw	r2,0(r2)
   12a1c:	1005d13a 	srai	r2,r2,4
   12a20:	10c003cc 	andi	r3,r2,15
   12a24:	00800074 	movhi	r2,1
   12a28:	109ca804 	addi	r2,r2,29344
   12a2c:	10c00e15 	stw	r3,56(r2)
   12a30:	00800074 	movhi	r2,1
   12a34:	109ca804 	addi	r2,r2,29344
   12a38:	10800a17 	ldw	r2,40(r2)
   12a3c:	10800304 	addi	r2,r2,12
   12a40:	10800017 	ldw	r2,0(r2)
   12a44:	1005d43a 	srai	r2,r2,16
   12a48:	e0bfff05 	stb	r2,-4(fp)
   12a4c:	00800074 	movhi	r2,1
   12a50:	109ca804 	addi	r2,r2,29344
   12a54:	10800a17 	ldw	r2,40(r2)
   12a58:	10800304 	addi	r2,r2,12
   12a5c:	10800017 	ldw	r2,0(r2)
   12a60:	1004d63a 	srli	r2,r2,24
   12a64:	e0bfff45 	stb	r2,-3(fp)
   12a68:	00800074 	movhi	r2,1
   12a6c:	109ca804 	addi	r2,r2,29344
   12a70:	10800e17 	ldw	r2,56(r2)
   12a74:	10800058 	cmpnei	r2,r2,1
   12a78:	1000041e 	bne	r2,zero,12a8c <alt_sys_init+0x180>
   12a7c:	00800074 	movhi	r2,1
   12a80:	109ca804 	addi	r2,r2,29344
   12a84:	10001115 	stw	zero,68(r2)
   12a88:	00000e06 	br	12ac4 <alt_sys_init+0x1b8>
   12a8c:	00800074 	movhi	r2,1
   12a90:	109ca804 	addi	r2,r2,29344
   12a94:	10800e17 	ldw	r2,56(r2)
   12a98:	10800098 	cmpnei	r2,r2,2
   12a9c:	1000051e 	bne	r2,zero,12ab4 <alt_sys_init+0x1a8>
   12aa0:	00800074 	movhi	r2,1
   12aa4:	109ca804 	addi	r2,r2,29344
   12aa8:	00c00044 	movi	r3,1
   12aac:	10c01115 	stw	r3,68(r2)
   12ab0:	00000406 	br	12ac4 <alt_sys_init+0x1b8>
   12ab4:	00800074 	movhi	r2,1
   12ab8:	109ca804 	addi	r2,r2,29344
   12abc:	00c00084 	movi	r3,2
   12ac0:	10c01115 	stw	r3,68(r2)
   12ac4:	e0bfff03 	ldbu	r2,-4(fp)
   12ac8:	00c00804 	movi	r3,32
   12acc:	1885c83a 	sub	r2,r3,r2
   12ad0:	00ffffc4 	movi	r3,-1
   12ad4:	1886d83a 	srl	r3,r3,r2
   12ad8:	00800074 	movhi	r2,1
   12adc:	109ca804 	addi	r2,r2,29344
   12ae0:	10c01215 	stw	r3,72(r2)
   12ae4:	e0ffff03 	ldbu	r3,-4(fp)
   12ae8:	00800074 	movhi	r2,1
   12aec:	109ca804 	addi	r2,r2,29344
   12af0:	10801117 	ldw	r2,68(r2)
   12af4:	1887883a 	add	r3,r3,r2
   12af8:	00800074 	movhi	r2,1
   12afc:	109ca804 	addi	r2,r2,29344
   12b00:	10c01315 	stw	r3,76(r2)
   12b04:	e0bfff43 	ldbu	r2,-3(fp)
   12b08:	00c00804 	movi	r3,32
   12b0c:	1885c83a 	sub	r2,r3,r2
   12b10:	00ffffc4 	movi	r3,-1
   12b14:	1886d83a 	srl	r3,r3,r2
   12b18:	00800074 	movhi	r2,1
   12b1c:	109ca804 	addi	r2,r2,29344
   12b20:	10c01415 	stw	r3,80(r2)
   12b24:	01000074 	movhi	r4,1
   12b28:	211ca804 	addi	r4,r4,29344
   12b2c:	00128a00 	call	128a0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_RESAMPLER, vga_resampler);
   12b30:	00800074 	movhi	r2,1
   12b34:	109cbd04 	addi	r2,r2,29428
   12b38:	10800a17 	ldw	r2,40(r2)
   12b3c:	10800017 	ldw	r2,0(r2)
   12b40:	10c003cc 	andi	r3,r2,15
   12b44:	00800074 	movhi	r2,1
   12b48:	109cbd04 	addi	r2,r2,29428
   12b4c:	10c00b15 	stw	r3,44(r2)
   12b50:	00800074 	movhi	r2,1
   12b54:	109cbd04 	addi	r2,r2,29428
   12b58:	10800a17 	ldw	r2,40(r2)
   12b5c:	10800017 	ldw	r2,0(r2)
   12b60:	1005d13a 	srai	r2,r2,4
   12b64:	10c0004c 	andi	r3,r2,1
   12b68:	00800074 	movhi	r2,1
   12b6c:	109cbd04 	addi	r2,r2,29428
   12b70:	10c00c15 	stw	r3,48(r2)
   12b74:	00800074 	movhi	r2,1
   12b78:	109cbd04 	addi	r2,r2,29428
   12b7c:	10800a17 	ldw	r2,40(r2)
   12b80:	10800017 	ldw	r2,0(r2)
   12b84:	1005d17a 	srai	r2,r2,5
   12b88:	10c0004c 	andi	r3,r2,1
   12b8c:	00800074 	movhi	r2,1
   12b90:	109cbd04 	addi	r2,r2,29428
   12b94:	10c00d15 	stw	r3,52(r2)
   12b98:	00800074 	movhi	r2,1
   12b9c:	109cbd04 	addi	r2,r2,29428
   12ba0:	10800a17 	ldw	r2,40(r2)
   12ba4:	10800017 	ldw	r2,0(r2)
   12ba8:	1005d43a 	srai	r2,r2,16
   12bac:	10c003cc 	andi	r3,r2,15
   12bb0:	00800074 	movhi	r2,1
   12bb4:	109cbd04 	addi	r2,r2,29428
   12bb8:	10c00e15 	stw	r3,56(r2)
   12bbc:	00800074 	movhi	r2,1
   12bc0:	109cbd04 	addi	r2,r2,29428
   12bc4:	10800a17 	ldw	r2,40(r2)
   12bc8:	10800017 	ldw	r2,0(r2)
   12bcc:	1005d53a 	srai	r2,r2,20
   12bd0:	10c0004c 	andi	r3,r2,1
   12bd4:	00800074 	movhi	r2,1
   12bd8:	109cbd04 	addi	r2,r2,29428
   12bdc:	10c00f15 	stw	r3,60(r2)
   12be0:	00800074 	movhi	r2,1
   12be4:	109cbd04 	addi	r2,r2,29428
   12be8:	10800a17 	ldw	r2,40(r2)
   12bec:	10800017 	ldw	r2,0(r2)
   12bf0:	1005d57a 	srai	r2,r2,21
   12bf4:	10c0004c 	andi	r3,r2,1
   12bf8:	00800074 	movhi	r2,1
   12bfc:	109cbd04 	addi	r2,r2,29428
   12c00:	10c01015 	stw	r3,64(r2)
   12c04:	01000074 	movhi	r4,1
   12c08:	211cbd04 	addi	r4,r4,29428
   12c0c:	00128a00 	call	128a0 <alt_dev_reg>
}
   12c10:	0001883a 	nop
   12c14:	e037883a 	mov	sp,fp
   12c18:	dfc00117 	ldw	ra,4(sp)
   12c1c:	df000017 	ldw	fp,0(sp)
   12c20:	dec00204 	addi	sp,sp,8
   12c24:	f800283a 	ret

00012c28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12c28:	defffa04 	addi	sp,sp,-24
   12c2c:	dfc00515 	stw	ra,20(sp)
   12c30:	df000415 	stw	fp,16(sp)
   12c34:	df000404 	addi	fp,sp,16
   12c38:	e13ffd15 	stw	r4,-12(fp)
   12c3c:	e17ffe15 	stw	r5,-8(fp)
   12c40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12c44:	e0bffd17 	ldw	r2,-12(fp)
   12c48:	10800017 	ldw	r2,0(r2)
   12c4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12c50:	e0bffc17 	ldw	r2,-16(fp)
   12c54:	10c00a04 	addi	r3,r2,40
   12c58:	e0bffd17 	ldw	r2,-12(fp)
   12c5c:	10800217 	ldw	r2,8(r2)
   12c60:	100f883a 	mov	r7,r2
   12c64:	e1bfff17 	ldw	r6,-4(fp)
   12c68:	e17ffe17 	ldw	r5,-8(fp)
   12c6c:	1809883a 	mov	r4,r3
   12c70:	00132500 	call	13250 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12c74:	e037883a 	mov	sp,fp
   12c78:	dfc00117 	ldw	ra,4(sp)
   12c7c:	df000017 	ldw	fp,0(sp)
   12c80:	dec00204 	addi	sp,sp,8
   12c84:	f800283a 	ret

00012c88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12c88:	defffa04 	addi	sp,sp,-24
   12c8c:	dfc00515 	stw	ra,20(sp)
   12c90:	df000415 	stw	fp,16(sp)
   12c94:	df000404 	addi	fp,sp,16
   12c98:	e13ffd15 	stw	r4,-12(fp)
   12c9c:	e17ffe15 	stw	r5,-8(fp)
   12ca0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12ca4:	e0bffd17 	ldw	r2,-12(fp)
   12ca8:	10800017 	ldw	r2,0(r2)
   12cac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12cb0:	e0bffc17 	ldw	r2,-16(fp)
   12cb4:	10c00a04 	addi	r3,r2,40
   12cb8:	e0bffd17 	ldw	r2,-12(fp)
   12cbc:	10800217 	ldw	r2,8(r2)
   12cc0:	100f883a 	mov	r7,r2
   12cc4:	e1bfff17 	ldw	r6,-4(fp)
   12cc8:	e17ffe17 	ldw	r5,-8(fp)
   12ccc:	1809883a 	mov	r4,r3
   12cd0:	001346c0 	call	1346c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12cd4:	e037883a 	mov	sp,fp
   12cd8:	dfc00117 	ldw	ra,4(sp)
   12cdc:	df000017 	ldw	fp,0(sp)
   12ce0:	dec00204 	addi	sp,sp,8
   12ce4:	f800283a 	ret

00012ce8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12ce8:	defffc04 	addi	sp,sp,-16
   12cec:	dfc00315 	stw	ra,12(sp)
   12cf0:	df000215 	stw	fp,8(sp)
   12cf4:	df000204 	addi	fp,sp,8
   12cf8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12cfc:	e0bfff17 	ldw	r2,-4(fp)
   12d00:	10800017 	ldw	r2,0(r2)
   12d04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   12d08:	e0bffe17 	ldw	r2,-8(fp)
   12d0c:	10c00a04 	addi	r3,r2,40
   12d10:	e0bfff17 	ldw	r2,-4(fp)
   12d14:	10800217 	ldw	r2,8(r2)
   12d18:	100b883a 	mov	r5,r2
   12d1c:	1809883a 	mov	r4,r3
   12d20:	00130f80 	call	130f8 <altera_avalon_jtag_uart_close>
}
   12d24:	e037883a 	mov	sp,fp
   12d28:	dfc00117 	ldw	ra,4(sp)
   12d2c:	df000017 	ldw	fp,0(sp)
   12d30:	dec00204 	addi	sp,sp,8
   12d34:	f800283a 	ret

00012d38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12d38:	defffa04 	addi	sp,sp,-24
   12d3c:	dfc00515 	stw	ra,20(sp)
   12d40:	df000415 	stw	fp,16(sp)
   12d44:	df000404 	addi	fp,sp,16
   12d48:	e13ffd15 	stw	r4,-12(fp)
   12d4c:	e17ffe15 	stw	r5,-8(fp)
   12d50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12d54:	e0bffd17 	ldw	r2,-12(fp)
   12d58:	10800017 	ldw	r2,0(r2)
   12d5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   12d60:	e0bffc17 	ldw	r2,-16(fp)
   12d64:	10800a04 	addi	r2,r2,40
   12d68:	e1bfff17 	ldw	r6,-4(fp)
   12d6c:	e17ffe17 	ldw	r5,-8(fp)
   12d70:	1009883a 	mov	r4,r2
   12d74:	00131600 	call	13160 <altera_avalon_jtag_uart_ioctl>
}
   12d78:	e037883a 	mov	sp,fp
   12d7c:	dfc00117 	ldw	ra,4(sp)
   12d80:	df000017 	ldw	fp,0(sp)
   12d84:	dec00204 	addi	sp,sp,8
   12d88:	f800283a 	ret

00012d8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12d8c:	defffa04 	addi	sp,sp,-24
   12d90:	dfc00515 	stw	ra,20(sp)
   12d94:	df000415 	stw	fp,16(sp)
   12d98:	df000404 	addi	fp,sp,16
   12d9c:	e13ffd15 	stw	r4,-12(fp)
   12da0:	e17ffe15 	stw	r5,-8(fp)
   12da4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12da8:	e0bffd17 	ldw	r2,-12(fp)
   12dac:	00c00044 	movi	r3,1
   12db0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12db4:	e0bffd17 	ldw	r2,-12(fp)
   12db8:	10800017 	ldw	r2,0(r2)
   12dbc:	10800104 	addi	r2,r2,4
   12dc0:	1007883a 	mov	r3,r2
   12dc4:	e0bffd17 	ldw	r2,-12(fp)
   12dc8:	10800817 	ldw	r2,32(r2)
   12dcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12dd0:	e0bffe17 	ldw	r2,-8(fp)
   12dd4:	e0ffff17 	ldw	r3,-4(fp)
   12dd8:	d8000015 	stw	zero,0(sp)
   12ddc:	e1fffd17 	ldw	r7,-12(fp)
   12de0:	01800074 	movhi	r6,1
   12de4:	318b9304 	addi	r6,r6,11852
   12de8:	180b883a 	mov	r5,r3
   12dec:	1009883a 	mov	r4,r2
   12df0:	0013be80 	call	13be8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12df4:	e0bffd17 	ldw	r2,-12(fp)
   12df8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12dfc:	e0bffd17 	ldw	r2,-12(fp)
   12e00:	10800204 	addi	r2,r2,8
   12e04:	d0e70517 	ldw	r3,-25580(gp)
   12e08:	e1fffd17 	ldw	r7,-12(fp)
   12e0c:	01800074 	movhi	r6,1
   12e10:	318c1604 	addi	r6,r6,12376
   12e14:	180b883a 	mov	r5,r3
   12e18:	1009883a 	mov	r4,r2
   12e1c:	00137840 	call	13784 <alt_alarm_start>
   12e20:	1000040e 	bge	r2,zero,12e34 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12e24:	e0fffd17 	ldw	r3,-12(fp)
   12e28:	00a00034 	movhi	r2,32768
   12e2c:	10bfffc4 	addi	r2,r2,-1
   12e30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12e34:	0001883a 	nop
   12e38:	e037883a 	mov	sp,fp
   12e3c:	dfc00117 	ldw	ra,4(sp)
   12e40:	df000017 	ldw	fp,0(sp)
   12e44:	dec00204 	addi	sp,sp,8
   12e48:	f800283a 	ret

00012e4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12e4c:	defff804 	addi	sp,sp,-32
   12e50:	df000715 	stw	fp,28(sp)
   12e54:	df000704 	addi	fp,sp,28
   12e58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12e5c:	e0bfff17 	ldw	r2,-4(fp)
   12e60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12e64:	e0bffb17 	ldw	r2,-20(fp)
   12e68:	10800017 	ldw	r2,0(r2)
   12e6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12e70:	e0bffc17 	ldw	r2,-16(fp)
   12e74:	10800104 	addi	r2,r2,4
   12e78:	10800037 	ldwio	r2,0(r2)
   12e7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12e80:	e0bffd17 	ldw	r2,-12(fp)
   12e84:	1080c00c 	andi	r2,r2,768
   12e88:	10006d26 	beq	r2,zero,13040 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12e8c:	e0bffd17 	ldw	r2,-12(fp)
   12e90:	1080400c 	andi	r2,r2,256
   12e94:	10003526 	beq	r2,zero,12f6c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12e98:	00800074 	movhi	r2,1
   12e9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12ea0:	e0bffb17 	ldw	r2,-20(fp)
   12ea4:	10800a17 	ldw	r2,40(r2)
   12ea8:	10800044 	addi	r2,r2,1
   12eac:	1081ffcc 	andi	r2,r2,2047
   12eb0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12eb4:	e0bffb17 	ldw	r2,-20(fp)
   12eb8:	10c00b17 	ldw	r3,44(r2)
   12ebc:	e0bffe17 	ldw	r2,-8(fp)
   12ec0:	18801526 	beq	r3,r2,12f18 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12ec4:	e0bffc17 	ldw	r2,-16(fp)
   12ec8:	10800037 	ldwio	r2,0(r2)
   12ecc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12ed0:	e0bff917 	ldw	r2,-28(fp)
   12ed4:	10a0000c 	andi	r2,r2,32768
   12ed8:	10001126 	beq	r2,zero,12f20 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12edc:	e0bffb17 	ldw	r2,-20(fp)
   12ee0:	10800a17 	ldw	r2,40(r2)
   12ee4:	e0fff917 	ldw	r3,-28(fp)
   12ee8:	1809883a 	mov	r4,r3
   12eec:	e0fffb17 	ldw	r3,-20(fp)
   12ef0:	1885883a 	add	r2,r3,r2
   12ef4:	10800e04 	addi	r2,r2,56
   12ef8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12efc:	e0bffb17 	ldw	r2,-20(fp)
   12f00:	10800a17 	ldw	r2,40(r2)
   12f04:	10800044 	addi	r2,r2,1
   12f08:	10c1ffcc 	andi	r3,r2,2047
   12f0c:	e0bffb17 	ldw	r2,-20(fp)
   12f10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12f14:	003fe206 	br	12ea0 <__alt_exception_stack_pointer+0xf8012ea0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   12f18:	0001883a 	nop
   12f1c:	00000106 	br	12f24 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   12f20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12f24:	e0bff917 	ldw	r2,-28(fp)
   12f28:	10bfffec 	andhi	r2,r2,65535
   12f2c:	10000f26 	beq	r2,zero,12f6c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12f30:	e0bffb17 	ldw	r2,-20(fp)
   12f34:	10c00817 	ldw	r3,32(r2)
   12f38:	00bfff84 	movi	r2,-2
   12f3c:	1886703a 	and	r3,r3,r2
   12f40:	e0bffb17 	ldw	r2,-20(fp)
   12f44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12f48:	e0bffc17 	ldw	r2,-16(fp)
   12f4c:	10800104 	addi	r2,r2,4
   12f50:	1007883a 	mov	r3,r2
   12f54:	e0bffb17 	ldw	r2,-20(fp)
   12f58:	10800817 	ldw	r2,32(r2)
   12f5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12f60:	e0bffc17 	ldw	r2,-16(fp)
   12f64:	10800104 	addi	r2,r2,4
   12f68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12f6c:	e0bffd17 	ldw	r2,-12(fp)
   12f70:	1080800c 	andi	r2,r2,512
   12f74:	103fbe26 	beq	r2,zero,12e70 <__alt_exception_stack_pointer+0xf8012e70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12f78:	e0bffd17 	ldw	r2,-12(fp)
   12f7c:	1004d43a 	srli	r2,r2,16
   12f80:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12f84:	00001406 	br	12fd8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12f88:	e0bffc17 	ldw	r2,-16(fp)
   12f8c:	e0fffb17 	ldw	r3,-20(fp)
   12f90:	18c00d17 	ldw	r3,52(r3)
   12f94:	e13ffb17 	ldw	r4,-20(fp)
   12f98:	20c7883a 	add	r3,r4,r3
   12f9c:	18c20e04 	addi	r3,r3,2104
   12fa0:	18c00003 	ldbu	r3,0(r3)
   12fa4:	18c03fcc 	andi	r3,r3,255
   12fa8:	18c0201c 	xori	r3,r3,128
   12fac:	18ffe004 	addi	r3,r3,-128
   12fb0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12fb4:	e0bffb17 	ldw	r2,-20(fp)
   12fb8:	10800d17 	ldw	r2,52(r2)
   12fbc:	10800044 	addi	r2,r2,1
   12fc0:	10c1ffcc 	andi	r3,r2,2047
   12fc4:	e0bffb17 	ldw	r2,-20(fp)
   12fc8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12fcc:	e0bffa17 	ldw	r2,-24(fp)
   12fd0:	10bfffc4 	addi	r2,r2,-1
   12fd4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12fd8:	e0bffa17 	ldw	r2,-24(fp)
   12fdc:	10000526 	beq	r2,zero,12ff4 <altera_avalon_jtag_uart_irq+0x1a8>
   12fe0:	e0bffb17 	ldw	r2,-20(fp)
   12fe4:	10c00d17 	ldw	r3,52(r2)
   12fe8:	e0bffb17 	ldw	r2,-20(fp)
   12fec:	10800c17 	ldw	r2,48(r2)
   12ff0:	18bfe51e 	bne	r3,r2,12f88 <__alt_exception_stack_pointer+0xf8012f88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12ff4:	e0bffa17 	ldw	r2,-24(fp)
   12ff8:	103f9d26 	beq	r2,zero,12e70 <__alt_exception_stack_pointer+0xf8012e70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12ffc:	e0bffb17 	ldw	r2,-20(fp)
   13000:	10c00817 	ldw	r3,32(r2)
   13004:	00bfff44 	movi	r2,-3
   13008:	1886703a 	and	r3,r3,r2
   1300c:	e0bffb17 	ldw	r2,-20(fp)
   13010:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13014:	e0bffb17 	ldw	r2,-20(fp)
   13018:	10800017 	ldw	r2,0(r2)
   1301c:	10800104 	addi	r2,r2,4
   13020:	1007883a 	mov	r3,r2
   13024:	e0bffb17 	ldw	r2,-20(fp)
   13028:	10800817 	ldw	r2,32(r2)
   1302c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13030:	e0bffc17 	ldw	r2,-16(fp)
   13034:	10800104 	addi	r2,r2,4
   13038:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1303c:	003f8c06 	br	12e70 <__alt_exception_stack_pointer+0xf8012e70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13040:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13044:	0001883a 	nop
   13048:	e037883a 	mov	sp,fp
   1304c:	df000017 	ldw	fp,0(sp)
   13050:	dec00104 	addi	sp,sp,4
   13054:	f800283a 	ret

00013058 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13058:	defff804 	addi	sp,sp,-32
   1305c:	df000715 	stw	fp,28(sp)
   13060:	df000704 	addi	fp,sp,28
   13064:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13068:	e0bffb17 	ldw	r2,-20(fp)
   1306c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13070:	e0bff917 	ldw	r2,-28(fp)
   13074:	10800017 	ldw	r2,0(r2)
   13078:	10800104 	addi	r2,r2,4
   1307c:	10800037 	ldwio	r2,0(r2)
   13080:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13084:	e0bffa17 	ldw	r2,-24(fp)
   13088:	1081000c 	andi	r2,r2,1024
   1308c:	10000b26 	beq	r2,zero,130bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13090:	e0bff917 	ldw	r2,-28(fp)
   13094:	10800017 	ldw	r2,0(r2)
   13098:	10800104 	addi	r2,r2,4
   1309c:	1007883a 	mov	r3,r2
   130a0:	e0bff917 	ldw	r2,-28(fp)
   130a4:	10800817 	ldw	r2,32(r2)
   130a8:	10810014 	ori	r2,r2,1024
   130ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   130b0:	e0bff917 	ldw	r2,-28(fp)
   130b4:	10000915 	stw	zero,36(r2)
   130b8:	00000a06 	br	130e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   130bc:	e0bff917 	ldw	r2,-28(fp)
   130c0:	10c00917 	ldw	r3,36(r2)
   130c4:	00a00034 	movhi	r2,32768
   130c8:	10bfff04 	addi	r2,r2,-4
   130cc:	10c00536 	bltu	r2,r3,130e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   130d0:	e0bff917 	ldw	r2,-28(fp)
   130d4:	10800917 	ldw	r2,36(r2)
   130d8:	10c00044 	addi	r3,r2,1
   130dc:	e0bff917 	ldw	r2,-28(fp)
   130e0:	10c00915 	stw	r3,36(r2)
   130e4:	d0a70517 	ldw	r2,-25580(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   130e8:	e037883a 	mov	sp,fp
   130ec:	df000017 	ldw	fp,0(sp)
   130f0:	dec00104 	addi	sp,sp,4
   130f4:	f800283a 	ret

000130f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   130f8:	defffd04 	addi	sp,sp,-12
   130fc:	df000215 	stw	fp,8(sp)
   13100:	df000204 	addi	fp,sp,8
   13104:	e13ffe15 	stw	r4,-8(fp)
   13108:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1310c:	00000506 	br	13124 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13110:	e0bfff17 	ldw	r2,-4(fp)
   13114:	1090000c 	andi	r2,r2,16384
   13118:	10000226 	beq	r2,zero,13124 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1311c:	00bffd44 	movi	r2,-11
   13120:	00000b06 	br	13150 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13124:	e0bffe17 	ldw	r2,-8(fp)
   13128:	10c00d17 	ldw	r3,52(r2)
   1312c:	e0bffe17 	ldw	r2,-8(fp)
   13130:	10800c17 	ldw	r2,48(r2)
   13134:	18800526 	beq	r3,r2,1314c <altera_avalon_jtag_uart_close+0x54>
   13138:	e0bffe17 	ldw	r2,-8(fp)
   1313c:	10c00917 	ldw	r3,36(r2)
   13140:	e0bffe17 	ldw	r2,-8(fp)
   13144:	10800117 	ldw	r2,4(r2)
   13148:	18bff136 	bltu	r3,r2,13110 <__alt_exception_stack_pointer+0xf8013110>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1314c:	0005883a 	mov	r2,zero
}
   13150:	e037883a 	mov	sp,fp
   13154:	df000017 	ldw	fp,0(sp)
   13158:	dec00104 	addi	sp,sp,4
   1315c:	f800283a 	ret

00013160 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13160:	defffa04 	addi	sp,sp,-24
   13164:	df000515 	stw	fp,20(sp)
   13168:	df000504 	addi	fp,sp,20
   1316c:	e13ffd15 	stw	r4,-12(fp)
   13170:	e17ffe15 	stw	r5,-8(fp)
   13174:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13178:	00bff9c4 	movi	r2,-25
   1317c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13180:	e0bffe17 	ldw	r2,-8(fp)
   13184:	10da8060 	cmpeqi	r3,r2,27137
   13188:	1800031e 	bne	r3,zero,13198 <altera_avalon_jtag_uart_ioctl+0x38>
   1318c:	109a80a0 	cmpeqi	r2,r2,27138
   13190:	1000181e 	bne	r2,zero,131f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   13194:	00002906 	br	1323c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13198:	e0bffd17 	ldw	r2,-12(fp)
   1319c:	10c00117 	ldw	r3,4(r2)
   131a0:	00a00034 	movhi	r2,32768
   131a4:	10bfffc4 	addi	r2,r2,-1
   131a8:	18802126 	beq	r3,r2,13230 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	10800017 	ldw	r2,0(r2)
   131b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   131b8:	e0bffc17 	ldw	r2,-16(fp)
   131bc:	10800090 	cmplti	r2,r2,2
   131c0:	1000061e 	bne	r2,zero,131dc <altera_avalon_jtag_uart_ioctl+0x7c>
   131c4:	e0fffc17 	ldw	r3,-16(fp)
   131c8:	00a00034 	movhi	r2,32768
   131cc:	10bfffc4 	addi	r2,r2,-1
   131d0:	18800226 	beq	r3,r2,131dc <altera_avalon_jtag_uart_ioctl+0x7c>
   131d4:	e0bffc17 	ldw	r2,-16(fp)
   131d8:	00000206 	br	131e4 <altera_avalon_jtag_uart_ioctl+0x84>
   131dc:	00a00034 	movhi	r2,32768
   131e0:	10bfff84 	addi	r2,r2,-2
   131e4:	e0fffd17 	ldw	r3,-12(fp)
   131e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   131ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   131f0:	00000f06 	br	13230 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   131f4:	e0bffd17 	ldw	r2,-12(fp)
   131f8:	10c00117 	ldw	r3,4(r2)
   131fc:	00a00034 	movhi	r2,32768
   13200:	10bfffc4 	addi	r2,r2,-1
   13204:	18800c26 	beq	r3,r2,13238 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13208:	e0bffd17 	ldw	r2,-12(fp)
   1320c:	10c00917 	ldw	r3,36(r2)
   13210:	e0bffd17 	ldw	r2,-12(fp)
   13214:	10800117 	ldw	r2,4(r2)
   13218:	1885803a 	cmpltu	r2,r3,r2
   1321c:	10c03fcc 	andi	r3,r2,255
   13220:	e0bfff17 	ldw	r2,-4(fp)
   13224:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13228:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1322c:	00000206 	br	13238 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   13230:	0001883a 	nop
   13234:	00000106 	br	1323c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13238:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1323c:	e0bffb17 	ldw	r2,-20(fp)
}
   13240:	e037883a 	mov	sp,fp
   13244:	df000017 	ldw	fp,0(sp)
   13248:	dec00104 	addi	sp,sp,4
   1324c:	f800283a 	ret

00013250 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13250:	defff304 	addi	sp,sp,-52
   13254:	dfc00c15 	stw	ra,48(sp)
   13258:	df000b15 	stw	fp,44(sp)
   1325c:	df000b04 	addi	fp,sp,44
   13260:	e13ffc15 	stw	r4,-16(fp)
   13264:	e17ffd15 	stw	r5,-12(fp)
   13268:	e1bffe15 	stw	r6,-8(fp)
   1326c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13270:	e0bffd17 	ldw	r2,-12(fp)
   13274:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13278:	00004706 	br	13398 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1327c:	e0bffc17 	ldw	r2,-16(fp)
   13280:	10800a17 	ldw	r2,40(r2)
   13284:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13288:	e0bffc17 	ldw	r2,-16(fp)
   1328c:	10800b17 	ldw	r2,44(r2)
   13290:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   13294:	e0fff717 	ldw	r3,-36(fp)
   13298:	e0bff817 	ldw	r2,-32(fp)
   1329c:	18800536 	bltu	r3,r2,132b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   132a0:	e0fff717 	ldw	r3,-36(fp)
   132a4:	e0bff817 	ldw	r2,-32(fp)
   132a8:	1885c83a 	sub	r2,r3,r2
   132ac:	e0bff615 	stw	r2,-40(fp)
   132b0:	00000406 	br	132c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   132b4:	00c20004 	movi	r3,2048
   132b8:	e0bff817 	ldw	r2,-32(fp)
   132bc:	1885c83a 	sub	r2,r3,r2
   132c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   132c4:	e0bff617 	ldw	r2,-40(fp)
   132c8:	10001e26 	beq	r2,zero,13344 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   132cc:	e0fffe17 	ldw	r3,-8(fp)
   132d0:	e0bff617 	ldw	r2,-40(fp)
   132d4:	1880022e 	bgeu	r3,r2,132e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   132d8:	e0bffe17 	ldw	r2,-8(fp)
   132dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   132e0:	e0bffc17 	ldw	r2,-16(fp)
   132e4:	10c00e04 	addi	r3,r2,56
   132e8:	e0bff817 	ldw	r2,-32(fp)
   132ec:	1885883a 	add	r2,r3,r2
   132f0:	e1bff617 	ldw	r6,-40(fp)
   132f4:	100b883a 	mov	r5,r2
   132f8:	e13ff517 	ldw	r4,-44(fp)
   132fc:	00076000 	call	7600 <memcpy>
      ptr   += n;
   13300:	e0fff517 	ldw	r3,-44(fp)
   13304:	e0bff617 	ldw	r2,-40(fp)
   13308:	1885883a 	add	r2,r3,r2
   1330c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13310:	e0fffe17 	ldw	r3,-8(fp)
   13314:	e0bff617 	ldw	r2,-40(fp)
   13318:	1885c83a 	sub	r2,r3,r2
   1331c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13320:	e0fff817 	ldw	r3,-32(fp)
   13324:	e0bff617 	ldw	r2,-40(fp)
   13328:	1885883a 	add	r2,r3,r2
   1332c:	10c1ffcc 	andi	r3,r2,2047
   13330:	e0bffc17 	ldw	r2,-16(fp)
   13334:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13338:	e0bffe17 	ldw	r2,-8(fp)
   1333c:	00bfcf16 	blt	zero,r2,1327c <__alt_exception_stack_pointer+0xf801327c>
   13340:	00000106 	br	13348 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   13344:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   13348:	e0fff517 	ldw	r3,-44(fp)
   1334c:	e0bffd17 	ldw	r2,-12(fp)
   13350:	1880141e 	bne	r3,r2,133a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13354:	e0bfff17 	ldw	r2,-4(fp)
   13358:	1090000c 	andi	r2,r2,16384
   1335c:	1000131e 	bne	r2,zero,133ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13360:	0001883a 	nop
   13364:	e0bffc17 	ldw	r2,-16(fp)
   13368:	10c00a17 	ldw	r3,40(r2)
   1336c:	e0bff717 	ldw	r2,-36(fp)
   13370:	1880051e 	bne	r3,r2,13388 <altera_avalon_jtag_uart_read+0x138>
   13374:	e0bffc17 	ldw	r2,-16(fp)
   13378:	10c00917 	ldw	r3,36(r2)
   1337c:	e0bffc17 	ldw	r2,-16(fp)
   13380:	10800117 	ldw	r2,4(r2)
   13384:	18bff736 	bltu	r3,r2,13364 <__alt_exception_stack_pointer+0xf8013364>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13388:	e0bffc17 	ldw	r2,-16(fp)
   1338c:	10c00a17 	ldw	r3,40(r2)
   13390:	e0bff717 	ldw	r2,-36(fp)
   13394:	18800726 	beq	r3,r2,133b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13398:	e0bffe17 	ldw	r2,-8(fp)
   1339c:	00bfb716 	blt	zero,r2,1327c <__alt_exception_stack_pointer+0xf801327c>
   133a0:	00000506 	br	133b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   133a4:	0001883a 	nop
   133a8:	00000306 	br	133b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   133ac:	0001883a 	nop
   133b0:	00000106 	br	133b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   133b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   133b8:	e0fff517 	ldw	r3,-44(fp)
   133bc:	e0bffd17 	ldw	r2,-12(fp)
   133c0:	18801826 	beq	r3,r2,13424 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133c4:	0005303a 	rdctl	r2,status
   133c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133cc:	e0fffb17 	ldw	r3,-20(fp)
   133d0:	00bfff84 	movi	r2,-2
   133d4:	1884703a 	and	r2,r3,r2
   133d8:	1001703a 	wrctl	status,r2
  
  return context;
   133dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   133e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   133e4:	e0bffc17 	ldw	r2,-16(fp)
   133e8:	10800817 	ldw	r2,32(r2)
   133ec:	10c00054 	ori	r3,r2,1
   133f0:	e0bffc17 	ldw	r2,-16(fp)
   133f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   133f8:	e0bffc17 	ldw	r2,-16(fp)
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	10800104 	addi	r2,r2,4
   13404:	1007883a 	mov	r3,r2
   13408:	e0bffc17 	ldw	r2,-16(fp)
   1340c:	10800817 	ldw	r2,32(r2)
   13410:	18800035 	stwio	r2,0(r3)
   13414:	e0bffa17 	ldw	r2,-24(fp)
   13418:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1341c:	e0bff917 	ldw	r2,-28(fp)
   13420:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13424:	e0fff517 	ldw	r3,-44(fp)
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	18800426 	beq	r3,r2,13440 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   13430:	e0fff517 	ldw	r3,-44(fp)
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	1885c83a 	sub	r2,r3,r2
   1343c:	00000606 	br	13458 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   13440:	e0bfff17 	ldw	r2,-4(fp)
   13444:	1090000c 	andi	r2,r2,16384
   13448:	10000226 	beq	r2,zero,13454 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1344c:	00bffd44 	movi	r2,-11
   13450:	00000106 	br	13458 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   13454:	00bffec4 	movi	r2,-5
}
   13458:	e037883a 	mov	sp,fp
   1345c:	dfc00117 	ldw	ra,4(sp)
   13460:	df000017 	ldw	fp,0(sp)
   13464:	dec00204 	addi	sp,sp,8
   13468:	f800283a 	ret

0001346c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1346c:	defff304 	addi	sp,sp,-52
   13470:	dfc00c15 	stw	ra,48(sp)
   13474:	df000b15 	stw	fp,44(sp)
   13478:	df000b04 	addi	fp,sp,44
   1347c:	e13ffc15 	stw	r4,-16(fp)
   13480:	e17ffd15 	stw	r5,-12(fp)
   13484:	e1bffe15 	stw	r6,-8(fp)
   13488:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1348c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13490:	e0bffd17 	ldw	r2,-12(fp)
   13494:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13498:	00003706 	br	13578 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1349c:	e0bffc17 	ldw	r2,-16(fp)
   134a0:	10800c17 	ldw	r2,48(r2)
   134a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   134a8:	e0bffc17 	ldw	r2,-16(fp)
   134ac:	10800d17 	ldw	r2,52(r2)
   134b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   134b4:	e0fff917 	ldw	r3,-28(fp)
   134b8:	e0bff517 	ldw	r2,-44(fp)
   134bc:	1880062e 	bgeu	r3,r2,134d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   134c0:	e0fff517 	ldw	r3,-44(fp)
   134c4:	e0bff917 	ldw	r2,-28(fp)
   134c8:	1885c83a 	sub	r2,r3,r2
   134cc:	10bfffc4 	addi	r2,r2,-1
   134d0:	e0bff615 	stw	r2,-40(fp)
   134d4:	00000b06 	br	13504 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   134d8:	e0bff517 	ldw	r2,-44(fp)
   134dc:	10000526 	beq	r2,zero,134f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   134e0:	00c20004 	movi	r3,2048
   134e4:	e0bff917 	ldw	r2,-28(fp)
   134e8:	1885c83a 	sub	r2,r3,r2
   134ec:	e0bff615 	stw	r2,-40(fp)
   134f0:	00000406 	br	13504 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   134f4:	00c1ffc4 	movi	r3,2047
   134f8:	e0bff917 	ldw	r2,-28(fp)
   134fc:	1885c83a 	sub	r2,r3,r2
   13500:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13504:	e0bff617 	ldw	r2,-40(fp)
   13508:	10001e26 	beq	r2,zero,13584 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1350c:	e0fffe17 	ldw	r3,-8(fp)
   13510:	e0bff617 	ldw	r2,-40(fp)
   13514:	1880022e 	bgeu	r3,r2,13520 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   13518:	e0bffe17 	ldw	r2,-8(fp)
   1351c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13520:	e0bffc17 	ldw	r2,-16(fp)
   13524:	10c20e04 	addi	r3,r2,2104
   13528:	e0bff917 	ldw	r2,-28(fp)
   1352c:	1885883a 	add	r2,r3,r2
   13530:	e1bff617 	ldw	r6,-40(fp)
   13534:	e17ffd17 	ldw	r5,-12(fp)
   13538:	1009883a 	mov	r4,r2
   1353c:	00076000 	call	7600 <memcpy>
      ptr   += n;
   13540:	e0fffd17 	ldw	r3,-12(fp)
   13544:	e0bff617 	ldw	r2,-40(fp)
   13548:	1885883a 	add	r2,r3,r2
   1354c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   13550:	e0fffe17 	ldw	r3,-8(fp)
   13554:	e0bff617 	ldw	r2,-40(fp)
   13558:	1885c83a 	sub	r2,r3,r2
   1355c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13560:	e0fff917 	ldw	r3,-28(fp)
   13564:	e0bff617 	ldw	r2,-40(fp)
   13568:	1885883a 	add	r2,r3,r2
   1356c:	10c1ffcc 	andi	r3,r2,2047
   13570:	e0bffc17 	ldw	r2,-16(fp)
   13574:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13578:	e0bffe17 	ldw	r2,-8(fp)
   1357c:	00bfc716 	blt	zero,r2,1349c <__alt_exception_stack_pointer+0xf801349c>
   13580:	00000106 	br	13588 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   13584:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13588:	0005303a 	rdctl	r2,status
   1358c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13590:	e0fffb17 	ldw	r3,-20(fp)
   13594:	00bfff84 	movi	r2,-2
   13598:	1884703a 	and	r2,r3,r2
   1359c:	1001703a 	wrctl	status,r2
  
  return context;
   135a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   135a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   135a8:	e0bffc17 	ldw	r2,-16(fp)
   135ac:	10800817 	ldw	r2,32(r2)
   135b0:	10c00094 	ori	r3,r2,2
   135b4:	e0bffc17 	ldw	r2,-16(fp)
   135b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   135bc:	e0bffc17 	ldw	r2,-16(fp)
   135c0:	10800017 	ldw	r2,0(r2)
   135c4:	10800104 	addi	r2,r2,4
   135c8:	1007883a 	mov	r3,r2
   135cc:	e0bffc17 	ldw	r2,-16(fp)
   135d0:	10800817 	ldw	r2,32(r2)
   135d4:	18800035 	stwio	r2,0(r3)
   135d8:	e0bffa17 	ldw	r2,-24(fp)
   135dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135e0:	e0bff817 	ldw	r2,-32(fp)
   135e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   135e8:	e0bffe17 	ldw	r2,-8(fp)
   135ec:	0080100e 	bge	zero,r2,13630 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   135f0:	e0bfff17 	ldw	r2,-4(fp)
   135f4:	1090000c 	andi	r2,r2,16384
   135f8:	1000101e 	bne	r2,zero,1363c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   135fc:	0001883a 	nop
   13600:	e0bffc17 	ldw	r2,-16(fp)
   13604:	10c00d17 	ldw	r3,52(r2)
   13608:	e0bff517 	ldw	r2,-44(fp)
   1360c:	1880051e 	bne	r3,r2,13624 <altera_avalon_jtag_uart_write+0x1b8>
   13610:	e0bffc17 	ldw	r2,-16(fp)
   13614:	10c00917 	ldw	r3,36(r2)
   13618:	e0bffc17 	ldw	r2,-16(fp)
   1361c:	10800117 	ldw	r2,4(r2)
   13620:	18bff736 	bltu	r3,r2,13600 <__alt_exception_stack_pointer+0xf8013600>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   13624:	e0bffc17 	ldw	r2,-16(fp)
   13628:	10800917 	ldw	r2,36(r2)
   1362c:	1000051e 	bne	r2,zero,13644 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	00bfd016 	blt	zero,r2,13578 <__alt_exception_stack_pointer+0xf8013578>
   13638:	00000306 	br	13648 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1363c:	0001883a 	nop
   13640:	00000106 	br	13648 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   13644:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   13648:	e0fffd17 	ldw	r3,-12(fp)
   1364c:	e0bff717 	ldw	r2,-36(fp)
   13650:	18800426 	beq	r3,r2,13664 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   13654:	e0fffd17 	ldw	r3,-12(fp)
   13658:	e0bff717 	ldw	r2,-36(fp)
   1365c:	1885c83a 	sub	r2,r3,r2
   13660:	00000606 	br	1367c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   13664:	e0bfff17 	ldw	r2,-4(fp)
   13668:	1090000c 	andi	r2,r2,16384
   1366c:	10000226 	beq	r2,zero,13678 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   13670:	00bffd44 	movi	r2,-11
   13674:	00000106 	br	1367c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13678:	00bffec4 	movi	r2,-5
}
   1367c:	e037883a 	mov	sp,fp
   13680:	dfc00117 	ldw	ra,4(sp)
   13684:	df000017 	ldw	fp,0(sp)
   13688:	dec00204 	addi	sp,sp,8
   1368c:	f800283a 	ret

00013690 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13690:	defffa04 	addi	sp,sp,-24
   13694:	dfc00515 	stw	ra,20(sp)
   13698:	df000415 	stw	fp,16(sp)
   1369c:	df000404 	addi	fp,sp,16
   136a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   136a4:	0007883a 	mov	r3,zero
   136a8:	e0bfff17 	ldw	r2,-4(fp)
   136ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   136b0:	e0bfff17 	ldw	r2,-4(fp)
   136b4:	10800104 	addi	r2,r2,4
   136b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136bc:	0005303a 	rdctl	r2,status
   136c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136c4:	e0fffd17 	ldw	r3,-12(fp)
   136c8:	00bfff84 	movi	r2,-2
   136cc:	1884703a 	and	r2,r3,r2
   136d0:	1001703a 	wrctl	status,r2
  
  return context;
   136d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   136d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   136dc:	00143080 	call	14308 <alt_tick>
   136e0:	e0bffc17 	ldw	r2,-16(fp)
   136e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136e8:	e0bffe17 	ldw	r2,-8(fp)
   136ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   136f0:	0001883a 	nop
   136f4:	e037883a 	mov	sp,fp
   136f8:	dfc00117 	ldw	ra,4(sp)
   136fc:	df000017 	ldw	fp,0(sp)
   13700:	dec00204 	addi	sp,sp,8
   13704:	f800283a 	ret

00013708 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13708:	defff804 	addi	sp,sp,-32
   1370c:	dfc00715 	stw	ra,28(sp)
   13710:	df000615 	stw	fp,24(sp)
   13714:	df000604 	addi	fp,sp,24
   13718:	e13ffc15 	stw	r4,-16(fp)
   1371c:	e17ffd15 	stw	r5,-12(fp)
   13720:	e1bffe15 	stw	r6,-8(fp)
   13724:	e1ffff15 	stw	r7,-4(fp)
   13728:	e0bfff17 	ldw	r2,-4(fp)
   1372c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13730:	d0a70517 	ldw	r2,-25580(gp)
   13734:	1000021e 	bne	r2,zero,13740 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13738:	e0bffb17 	ldw	r2,-20(fp)
   1373c:	d0a70515 	stw	r2,-25580(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13740:	e0bffc17 	ldw	r2,-16(fp)
   13744:	10800104 	addi	r2,r2,4
   13748:	00c001c4 	movi	r3,7
   1374c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   13750:	d8000015 	stw	zero,0(sp)
   13754:	e1fffc17 	ldw	r7,-16(fp)
   13758:	01800074 	movhi	r6,1
   1375c:	318da404 	addi	r6,r6,13968
   13760:	e17ffe17 	ldw	r5,-8(fp)
   13764:	e13ffd17 	ldw	r4,-12(fp)
   13768:	0013be80 	call	13be8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1376c:	0001883a 	nop
   13770:	e037883a 	mov	sp,fp
   13774:	dfc00117 	ldw	ra,4(sp)
   13778:	df000017 	ldw	fp,0(sp)
   1377c:	dec00204 	addi	sp,sp,8
   13780:	f800283a 	ret

00013784 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   13784:	defff504 	addi	sp,sp,-44
   13788:	df000a15 	stw	fp,40(sp)
   1378c:	df000a04 	addi	fp,sp,40
   13790:	e13ffc15 	stw	r4,-16(fp)
   13794:	e17ffd15 	stw	r5,-12(fp)
   13798:	e1bffe15 	stw	r6,-8(fp)
   1379c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   137a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   137a4:	d0a70517 	ldw	r2,-25580(gp)
  
  if (alt_ticks_per_second ())
   137a8:	10003c26 	beq	r2,zero,1389c <alt_alarm_start+0x118>
  {
    if (alarm)
   137ac:	e0bffc17 	ldw	r2,-16(fp)
   137b0:	10003826 	beq	r2,zero,13894 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   137b4:	e0bffc17 	ldw	r2,-16(fp)
   137b8:	e0fffe17 	ldw	r3,-8(fp)
   137bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   137c0:	e0bffc17 	ldw	r2,-16(fp)
   137c4:	e0ffff17 	ldw	r3,-4(fp)
   137c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137cc:	0005303a 	rdctl	r2,status
   137d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137d4:	e0fff917 	ldw	r3,-28(fp)
   137d8:	00bfff84 	movi	r2,-2
   137dc:	1884703a 	and	r2,r3,r2
   137e0:	1001703a 	wrctl	status,r2
  
  return context;
   137e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   137e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   137ec:	d0a70617 	ldw	r2,-25576(gp)
      
      current_nticks = alt_nticks();
   137f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   137f4:	e0fffd17 	ldw	r3,-12(fp)
   137f8:	e0bff617 	ldw	r2,-40(fp)
   137fc:	1885883a 	add	r2,r3,r2
   13800:	10c00044 	addi	r3,r2,1
   13804:	e0bffc17 	ldw	r2,-16(fp)
   13808:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1380c:	e0bffc17 	ldw	r2,-16(fp)
   13810:	10c00217 	ldw	r3,8(r2)
   13814:	e0bff617 	ldw	r2,-40(fp)
   13818:	1880042e 	bgeu	r3,r2,1382c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1381c:	e0bffc17 	ldw	r2,-16(fp)
   13820:	00c00044 	movi	r3,1
   13824:	10c00405 	stb	r3,16(r2)
   13828:	00000206 	br	13834 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1382c:	e0bffc17 	ldw	r2,-16(fp)
   13830:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   13834:	e0bffc17 	ldw	r2,-16(fp)
   13838:	d0e00f04 	addi	r3,gp,-32708
   1383c:	e0fffa15 	stw	r3,-24(fp)
   13840:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13844:	e0bffb17 	ldw	r2,-20(fp)
   13848:	e0fffa17 	ldw	r3,-24(fp)
   1384c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13850:	e0bffa17 	ldw	r2,-24(fp)
   13854:	10c00017 	ldw	r3,0(r2)
   13858:	e0bffb17 	ldw	r2,-20(fp)
   1385c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13860:	e0bffa17 	ldw	r2,-24(fp)
   13864:	10800017 	ldw	r2,0(r2)
   13868:	e0fffb17 	ldw	r3,-20(fp)
   1386c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13870:	e0bffa17 	ldw	r2,-24(fp)
   13874:	e0fffb17 	ldw	r3,-20(fp)
   13878:	10c00015 	stw	r3,0(r2)
   1387c:	e0bff817 	ldw	r2,-32(fp)
   13880:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13884:	e0bff717 	ldw	r2,-36(fp)
   13888:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1388c:	0005883a 	mov	r2,zero
   13890:	00000306 	br	138a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   13894:	00bffa84 	movi	r2,-22
   13898:	00000106 	br	138a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1389c:	00bfde84 	movi	r2,-134
  }
}
   138a0:	e037883a 	mov	sp,fp
   138a4:	df000017 	ldw	fp,0(sp)
   138a8:	dec00104 	addi	sp,sp,4
   138ac:	f800283a 	ret

000138b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   138b0:	defffa04 	addi	sp,sp,-24
   138b4:	dfc00515 	stw	ra,20(sp)
   138b8:	df000415 	stw	fp,16(sp)
   138bc:	df000404 	addi	fp,sp,16
   138c0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   138c4:	00800244 	movi	r2,9
   138c8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   138cc:	014003f4 	movhi	r5,15
   138d0:	29509004 	addi	r5,r5,16960
   138d4:	e13ffd17 	ldw	r4,-12(fp)
   138d8:	00050200 	call	5020 <__mulsi3>
   138dc:	100b883a 	mov	r5,r2
   138e0:	0100bef4 	movhi	r4,763
   138e4:	213c2004 	addi	r4,r4,-3968
   138e8:	0004f640 	call	4f64 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   138ec:	100b883a 	mov	r5,r2
   138f0:	01200034 	movhi	r4,32768
   138f4:	213fffc4 	addi	r4,r4,-1
   138f8:	0004f640 	call	4f64 <__udivsi3>
   138fc:	100b883a 	mov	r5,r2
   13900:	e13fff17 	ldw	r4,-4(fp)
   13904:	0004f640 	call	4f64 <__udivsi3>
   13908:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1390c:	e0bffe17 	ldw	r2,-8(fp)
   13910:	10002a26 	beq	r2,zero,139bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   13914:	e03ffc15 	stw	zero,-16(fp)
   13918:	00001706 	br	13978 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1391c:	00a00034 	movhi	r2,32768
   13920:	10bfffc4 	addi	r2,r2,-1
   13924:	10bfffc4 	addi	r2,r2,-1
   13928:	103ffe1e 	bne	r2,zero,13924 <__alt_exception_stack_pointer+0xf8013924>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1392c:	014003f4 	movhi	r5,15
   13930:	29509004 	addi	r5,r5,16960
   13934:	e13ffd17 	ldw	r4,-12(fp)
   13938:	00050200 	call	5020 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1393c:	100b883a 	mov	r5,r2
   13940:	0100bef4 	movhi	r4,763
   13944:	213c2004 	addi	r4,r4,-3968
   13948:	0004f640 	call	4f64 <__udivsi3>
   1394c:	100b883a 	mov	r5,r2
   13950:	01200034 	movhi	r4,32768
   13954:	213fffc4 	addi	r4,r4,-1
   13958:	0004f640 	call	4f64 <__udivsi3>
   1395c:	1007883a 	mov	r3,r2
   13960:	e0bfff17 	ldw	r2,-4(fp)
   13964:	10c5c83a 	sub	r2,r2,r3
   13968:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1396c:	e0bffc17 	ldw	r2,-16(fp)
   13970:	10800044 	addi	r2,r2,1
   13974:	e0bffc15 	stw	r2,-16(fp)
   13978:	e0fffc17 	ldw	r3,-16(fp)
   1397c:	e0bffe17 	ldw	r2,-8(fp)
   13980:	18bfe616 	blt	r3,r2,1391c <__alt_exception_stack_pointer+0xf801391c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13984:	014003f4 	movhi	r5,15
   13988:	29509004 	addi	r5,r5,16960
   1398c:	e13ffd17 	ldw	r4,-12(fp)
   13990:	00050200 	call	5020 <__mulsi3>
   13994:	100b883a 	mov	r5,r2
   13998:	0100bef4 	movhi	r4,763
   1399c:	213c2004 	addi	r4,r4,-3968
   139a0:	0004f640 	call	4f64 <__udivsi3>
   139a4:	e17fff17 	ldw	r5,-4(fp)
   139a8:	1009883a 	mov	r4,r2
   139ac:	00050200 	call	5020 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   139b0:	10bfffc4 	addi	r2,r2,-1
   139b4:	103ffe1e 	bne	r2,zero,139b0 <__alt_exception_stack_pointer+0xf80139b0>
   139b8:	00000d06 	br	139f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   139bc:	014003f4 	movhi	r5,15
   139c0:	29509004 	addi	r5,r5,16960
   139c4:	e13ffd17 	ldw	r4,-12(fp)
   139c8:	00050200 	call	5020 <__mulsi3>
   139cc:	100b883a 	mov	r5,r2
   139d0:	0100bef4 	movhi	r4,763
   139d4:	213c2004 	addi	r4,r4,-3968
   139d8:	0004f640 	call	4f64 <__udivsi3>
   139dc:	e17fff17 	ldw	r5,-4(fp)
   139e0:	1009883a 	mov	r4,r2
   139e4:	00050200 	call	5020 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   139e8:	10bfffc4 	addi	r2,r2,-1
   139ec:	00bffe16 	blt	zero,r2,139e8 <__alt_exception_stack_pointer+0xf80139e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   139f0:	0005883a 	mov	r2,zero
}
   139f4:	e037883a 	mov	sp,fp
   139f8:	dfc00117 	ldw	ra,4(sp)
   139fc:	df000017 	ldw	fp,0(sp)
   13a00:	dec00204 	addi	sp,sp,8
   13a04:	f800283a 	ret

00013a08 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13a08:	deffff04 	addi	sp,sp,-4
   13a0c:	df000015 	stw	fp,0(sp)
   13a10:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13a14:	0001883a 	nop
   13a18:	e037883a 	mov	sp,fp
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00104 	addi	sp,sp,4
   13a24:	f800283a 	ret

00013a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a28:	defffe04 	addi	sp,sp,-8
   13a2c:	dfc00115 	stw	ra,4(sp)
   13a30:	df000015 	stw	fp,0(sp)
   13a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a38:	d0a00d17 	ldw	r2,-32716(gp)
   13a3c:	10000326 	beq	r2,zero,13a4c <alt_get_errno+0x24>
   13a40:	d0a00d17 	ldw	r2,-32716(gp)
   13a44:	103ee83a 	callr	r2
   13a48:	00000106 	br	13a50 <alt_get_errno+0x28>
   13a4c:	d0a6fd04 	addi	r2,gp,-25612
}
   13a50:	e037883a 	mov	sp,fp
   13a54:	dfc00117 	ldw	ra,4(sp)
   13a58:	df000017 	ldw	fp,0(sp)
   13a5c:	dec00204 	addi	sp,sp,8
   13a60:	f800283a 	ret

00013a64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13a64:	defffa04 	addi	sp,sp,-24
   13a68:	dfc00515 	stw	ra,20(sp)
   13a6c:	df000415 	stw	fp,16(sp)
   13a70:	df000404 	addi	fp,sp,16
   13a74:	e13ffe15 	stw	r4,-8(fp)
   13a78:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13a7c:	e0bffe17 	ldw	r2,-8(fp)
   13a80:	10000326 	beq	r2,zero,13a90 <alt_dev_llist_insert+0x2c>
   13a84:	e0bffe17 	ldw	r2,-8(fp)
   13a88:	10800217 	ldw	r2,8(r2)
   13a8c:	1000061e 	bne	r2,zero,13aa8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13a90:	0013a280 	call	13a28 <alt_get_errno>
   13a94:	1007883a 	mov	r3,r2
   13a98:	00800584 	movi	r2,22
   13a9c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13aa0:	00bffa84 	movi	r2,-22
   13aa4:	00001306 	br	13af4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13aa8:	e0bffe17 	ldw	r2,-8(fp)
   13aac:	e0ffff17 	ldw	r3,-4(fp)
   13ab0:	e0fffc15 	stw	r3,-16(fp)
   13ab4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13ab8:	e0bffd17 	ldw	r2,-12(fp)
   13abc:	e0fffc17 	ldw	r3,-16(fp)
   13ac0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13ac4:	e0bffc17 	ldw	r2,-16(fp)
   13ac8:	10c00017 	ldw	r3,0(r2)
   13acc:	e0bffd17 	ldw	r2,-12(fp)
   13ad0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	10800017 	ldw	r2,0(r2)
   13adc:	e0fffd17 	ldw	r3,-12(fp)
   13ae0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13ae4:	e0bffc17 	ldw	r2,-16(fp)
   13ae8:	e0fffd17 	ldw	r3,-12(fp)
   13aec:	10c00015 	stw	r3,0(r2)

  return 0;  
   13af0:	0005883a 	mov	r2,zero
}
   13af4:	e037883a 	mov	sp,fp
   13af8:	dfc00117 	ldw	ra,4(sp)
   13afc:	df000017 	ldw	fp,0(sp)
   13b00:	dec00204 	addi	sp,sp,8
   13b04:	f800283a 	ret

00013b08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13b08:	defffd04 	addi	sp,sp,-12
   13b0c:	dfc00215 	stw	ra,8(sp)
   13b10:	df000115 	stw	fp,4(sp)
   13b14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13b18:	00800074 	movhi	r2,1
   13b1c:	1092af04 	addi	r2,r2,19132
   13b20:	e0bfff15 	stw	r2,-4(fp)
   13b24:	00000606 	br	13b40 <_do_ctors+0x38>
        (*ctor) (); 
   13b28:	e0bfff17 	ldw	r2,-4(fp)
   13b2c:	10800017 	ldw	r2,0(r2)
   13b30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13b34:	e0bfff17 	ldw	r2,-4(fp)
   13b38:	10bfff04 	addi	r2,r2,-4
   13b3c:	e0bfff15 	stw	r2,-4(fp)
   13b40:	e0ffff17 	ldw	r3,-4(fp)
   13b44:	00800074 	movhi	r2,1
   13b48:	1092b004 	addi	r2,r2,19136
   13b4c:	18bff62e 	bgeu	r3,r2,13b28 <__alt_exception_stack_pointer+0xf8013b28>
        (*ctor) (); 
}
   13b50:	0001883a 	nop
   13b54:	e037883a 	mov	sp,fp
   13b58:	dfc00117 	ldw	ra,4(sp)
   13b5c:	df000017 	ldw	fp,0(sp)
   13b60:	dec00204 	addi	sp,sp,8
   13b64:	f800283a 	ret

00013b68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13b68:	defffd04 	addi	sp,sp,-12
   13b6c:	dfc00215 	stw	ra,8(sp)
   13b70:	df000115 	stw	fp,4(sp)
   13b74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13b78:	00800074 	movhi	r2,1
   13b7c:	1092af04 	addi	r2,r2,19132
   13b80:	e0bfff15 	stw	r2,-4(fp)
   13b84:	00000606 	br	13ba0 <_do_dtors+0x38>
        (*dtor) (); 
   13b88:	e0bfff17 	ldw	r2,-4(fp)
   13b8c:	10800017 	ldw	r2,0(r2)
   13b90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13b94:	e0bfff17 	ldw	r2,-4(fp)
   13b98:	10bfff04 	addi	r2,r2,-4
   13b9c:	e0bfff15 	stw	r2,-4(fp)
   13ba0:	e0ffff17 	ldw	r3,-4(fp)
   13ba4:	00800074 	movhi	r2,1
   13ba8:	1092b004 	addi	r2,r2,19136
   13bac:	18bff62e 	bgeu	r3,r2,13b88 <__alt_exception_stack_pointer+0xf8013b88>
        (*dtor) (); 
}
   13bb0:	0001883a 	nop
   13bb4:	e037883a 	mov	sp,fp
   13bb8:	dfc00117 	ldw	ra,4(sp)
   13bbc:	df000017 	ldw	fp,0(sp)
   13bc0:	dec00204 	addi	sp,sp,8
   13bc4:	f800283a 	ret

00013bc8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13bc8:	deffff04 	addi	sp,sp,-4
   13bcc:	df000015 	stw	fp,0(sp)
   13bd0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13bd4:	0001883a 	nop
   13bd8:	e037883a 	mov	sp,fp
   13bdc:	df000017 	ldw	fp,0(sp)
   13be0:	dec00104 	addi	sp,sp,4
   13be4:	f800283a 	ret

00013be8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13be8:	defff904 	addi	sp,sp,-28
   13bec:	dfc00615 	stw	ra,24(sp)
   13bf0:	df000515 	stw	fp,20(sp)
   13bf4:	df000504 	addi	fp,sp,20
   13bf8:	e13ffc15 	stw	r4,-16(fp)
   13bfc:	e17ffd15 	stw	r5,-12(fp)
   13c00:	e1bffe15 	stw	r6,-8(fp)
   13c04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13c08:	e0800217 	ldw	r2,8(fp)
   13c0c:	d8800015 	stw	r2,0(sp)
   13c10:	e1ffff17 	ldw	r7,-4(fp)
   13c14:	e1bffe17 	ldw	r6,-8(fp)
   13c18:	e17ffd17 	ldw	r5,-12(fp)
   13c1c:	e13ffc17 	ldw	r4,-16(fp)
   13c20:	0013d980 	call	13d98 <alt_iic_isr_register>
}  
   13c24:	e037883a 	mov	sp,fp
   13c28:	dfc00117 	ldw	ra,4(sp)
   13c2c:	df000017 	ldw	fp,0(sp)
   13c30:	dec00204 	addi	sp,sp,8
   13c34:	f800283a 	ret

00013c38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13c38:	defff904 	addi	sp,sp,-28
   13c3c:	df000615 	stw	fp,24(sp)
   13c40:	df000604 	addi	fp,sp,24
   13c44:	e13ffe15 	stw	r4,-8(fp)
   13c48:	e17fff15 	stw	r5,-4(fp)
   13c4c:	e0bfff17 	ldw	r2,-4(fp)
   13c50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c54:	0005303a 	rdctl	r2,status
   13c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c5c:	e0fffb17 	ldw	r3,-20(fp)
   13c60:	00bfff84 	movi	r2,-2
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	1001703a 	wrctl	status,r2
  
  return context;
   13c6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13c70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13c74:	00c00044 	movi	r3,1
   13c78:	e0bffa17 	ldw	r2,-24(fp)
   13c7c:	1884983a 	sll	r2,r3,r2
   13c80:	1007883a 	mov	r3,r2
   13c84:	d0a70417 	ldw	r2,-25584(gp)
   13c88:	1884b03a 	or	r2,r3,r2
   13c8c:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13c90:	d0a70417 	ldw	r2,-25584(gp)
   13c94:	100170fa 	wrctl	ienable,r2
   13c98:	e0bffc17 	ldw	r2,-16(fp)
   13c9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ca0:	e0bffd17 	ldw	r2,-12(fp)
   13ca4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13ca8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   13cac:	0001883a 	nop
}
   13cb0:	e037883a 	mov	sp,fp
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00104 	addi	sp,sp,4
   13cbc:	f800283a 	ret

00013cc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13cc0:	defff904 	addi	sp,sp,-28
   13cc4:	df000615 	stw	fp,24(sp)
   13cc8:	df000604 	addi	fp,sp,24
   13ccc:	e13ffe15 	stw	r4,-8(fp)
   13cd0:	e17fff15 	stw	r5,-4(fp)
   13cd4:	e0bfff17 	ldw	r2,-4(fp)
   13cd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cdc:	0005303a 	rdctl	r2,status
   13ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ce4:	e0fffb17 	ldw	r3,-20(fp)
   13ce8:	00bfff84 	movi	r2,-2
   13cec:	1884703a 	and	r2,r3,r2
   13cf0:	1001703a 	wrctl	status,r2
  
  return context;
   13cf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13cf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13cfc:	00c00044 	movi	r3,1
   13d00:	e0bffa17 	ldw	r2,-24(fp)
   13d04:	1884983a 	sll	r2,r3,r2
   13d08:	0084303a 	nor	r2,zero,r2
   13d0c:	1007883a 	mov	r3,r2
   13d10:	d0a70417 	ldw	r2,-25584(gp)
   13d14:	1884703a 	and	r2,r3,r2
   13d18:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13d1c:	d0a70417 	ldw	r2,-25584(gp)
   13d20:	100170fa 	wrctl	ienable,r2
   13d24:	e0bffc17 	ldw	r2,-16(fp)
   13d28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d2c:	e0bffd17 	ldw	r2,-12(fp)
   13d30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13d34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13d38:	0001883a 	nop
}
   13d3c:	e037883a 	mov	sp,fp
   13d40:	df000017 	ldw	fp,0(sp)
   13d44:	dec00104 	addi	sp,sp,4
   13d48:	f800283a 	ret

00013d4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13d4c:	defffc04 	addi	sp,sp,-16
   13d50:	df000315 	stw	fp,12(sp)
   13d54:	df000304 	addi	fp,sp,12
   13d58:	e13ffe15 	stw	r4,-8(fp)
   13d5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13d60:	000530fa 	rdctl	r2,ienable
   13d64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13d68:	00c00044 	movi	r3,1
   13d6c:	e0bfff17 	ldw	r2,-4(fp)
   13d70:	1884983a 	sll	r2,r3,r2
   13d74:	1007883a 	mov	r3,r2
   13d78:	e0bffd17 	ldw	r2,-12(fp)
   13d7c:	1884703a 	and	r2,r3,r2
   13d80:	1004c03a 	cmpne	r2,r2,zero
   13d84:	10803fcc 	andi	r2,r2,255
}
   13d88:	e037883a 	mov	sp,fp
   13d8c:	df000017 	ldw	fp,0(sp)
   13d90:	dec00104 	addi	sp,sp,4
   13d94:	f800283a 	ret

00013d98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13d98:	defff504 	addi	sp,sp,-44
   13d9c:	dfc00a15 	stw	ra,40(sp)
   13da0:	df000915 	stw	fp,36(sp)
   13da4:	df000904 	addi	fp,sp,36
   13da8:	e13ffc15 	stw	r4,-16(fp)
   13dac:	e17ffd15 	stw	r5,-12(fp)
   13db0:	e1bffe15 	stw	r6,-8(fp)
   13db4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13db8:	00bffa84 	movi	r2,-22
   13dbc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13dc0:	e0bffd17 	ldw	r2,-12(fp)
   13dc4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13dc8:	e0bff817 	ldw	r2,-32(fp)
   13dcc:	10800808 	cmpgei	r2,r2,32
   13dd0:	1000271e 	bne	r2,zero,13e70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dd4:	0005303a 	rdctl	r2,status
   13dd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ddc:	e0fffb17 	ldw	r3,-20(fp)
   13de0:	00bfff84 	movi	r2,-2
   13de4:	1884703a 	and	r2,r3,r2
   13de8:	1001703a 	wrctl	status,r2
  
  return context;
   13dec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13df0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13df4:	008000b4 	movhi	r2,2
   13df8:	10a3e004 	addi	r2,r2,-28800
   13dfc:	e0fff817 	ldw	r3,-32(fp)
   13e00:	180690fa 	slli	r3,r3,3
   13e04:	10c5883a 	add	r2,r2,r3
   13e08:	e0fffe17 	ldw	r3,-8(fp)
   13e0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13e10:	008000b4 	movhi	r2,2
   13e14:	10a3e004 	addi	r2,r2,-28800
   13e18:	e0fff817 	ldw	r3,-32(fp)
   13e1c:	180690fa 	slli	r3,r3,3
   13e20:	10c5883a 	add	r2,r2,r3
   13e24:	10800104 	addi	r2,r2,4
   13e28:	e0ffff17 	ldw	r3,-4(fp)
   13e2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13e30:	e0bffe17 	ldw	r2,-8(fp)
   13e34:	10000526 	beq	r2,zero,13e4c <alt_iic_isr_register+0xb4>
   13e38:	e0bff817 	ldw	r2,-32(fp)
   13e3c:	100b883a 	mov	r5,r2
   13e40:	e13ffc17 	ldw	r4,-16(fp)
   13e44:	0013c380 	call	13c38 <alt_ic_irq_enable>
   13e48:	00000406 	br	13e5c <alt_iic_isr_register+0xc4>
   13e4c:	e0bff817 	ldw	r2,-32(fp)
   13e50:	100b883a 	mov	r5,r2
   13e54:	e13ffc17 	ldw	r4,-16(fp)
   13e58:	0013cc00 	call	13cc0 <alt_ic_irq_disable>
   13e5c:	e0bff715 	stw	r2,-36(fp)
   13e60:	e0bffa17 	ldw	r2,-24(fp)
   13e64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e68:	e0bff917 	ldw	r2,-28(fp)
   13e6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13e70:	e0bff717 	ldw	r2,-36(fp)
}
   13e74:	e037883a 	mov	sp,fp
   13e78:	dfc00117 	ldw	ra,4(sp)
   13e7c:	df000017 	ldw	fp,0(sp)
   13e80:	dec00204 	addi	sp,sp,8
   13e84:	f800283a 	ret

00013e88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13e88:	defff804 	addi	sp,sp,-32
   13e8c:	dfc00715 	stw	ra,28(sp)
   13e90:	df000615 	stw	fp,24(sp)
   13e94:	dc000515 	stw	r16,20(sp)
   13e98:	df000604 	addi	fp,sp,24
   13e9c:	e13ffb15 	stw	r4,-20(fp)
   13ea0:	e17ffc15 	stw	r5,-16(fp)
   13ea4:	e1bffd15 	stw	r6,-12(fp)
   13ea8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13eac:	e1bffe17 	ldw	r6,-8(fp)
   13eb0:	e17ffd17 	ldw	r5,-12(fp)
   13eb4:	e13ffc17 	ldw	r4,-16(fp)
   13eb8:	00141100 	call	14110 <open>
   13ebc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13ec0:	e0bffa17 	ldw	r2,-24(fp)
   13ec4:	10002216 	blt	r2,zero,13f50 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13ec8:	04000074 	movhi	r16,1
   13ecc:	84183004 	addi	r16,r16,24768
   13ed0:	e0bffa17 	ldw	r2,-24(fp)
   13ed4:	01400304 	movi	r5,12
   13ed8:	1009883a 	mov	r4,r2
   13edc:	00050200 	call	5020 <__mulsi3>
   13ee0:	8085883a 	add	r2,r16,r2
   13ee4:	10c00017 	ldw	r3,0(r2)
   13ee8:	e0bffb17 	ldw	r2,-20(fp)
   13eec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13ef0:	04000074 	movhi	r16,1
   13ef4:	84183004 	addi	r16,r16,24768
   13ef8:	e0bffa17 	ldw	r2,-24(fp)
   13efc:	01400304 	movi	r5,12
   13f00:	1009883a 	mov	r4,r2
   13f04:	00050200 	call	5020 <__mulsi3>
   13f08:	8085883a 	add	r2,r16,r2
   13f0c:	10800104 	addi	r2,r2,4
   13f10:	10c00017 	ldw	r3,0(r2)
   13f14:	e0bffb17 	ldw	r2,-20(fp)
   13f18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13f1c:	04000074 	movhi	r16,1
   13f20:	84183004 	addi	r16,r16,24768
   13f24:	e0bffa17 	ldw	r2,-24(fp)
   13f28:	01400304 	movi	r5,12
   13f2c:	1009883a 	mov	r4,r2
   13f30:	00050200 	call	5020 <__mulsi3>
   13f34:	8085883a 	add	r2,r16,r2
   13f38:	10800204 	addi	r2,r2,8
   13f3c:	10c00017 	ldw	r3,0(r2)
   13f40:	e0bffb17 	ldw	r2,-20(fp)
   13f44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13f48:	e13ffa17 	ldw	r4,-24(fp)
   13f4c:	001254c0 	call	1254c <alt_release_fd>
  }
} 
   13f50:	0001883a 	nop
   13f54:	e6ffff04 	addi	sp,fp,-4
   13f58:	dfc00217 	ldw	ra,8(sp)
   13f5c:	df000117 	ldw	fp,4(sp)
   13f60:	dc000017 	ldw	r16,0(sp)
   13f64:	dec00304 	addi	sp,sp,12
   13f68:	f800283a 	ret

00013f6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13f6c:	defffb04 	addi	sp,sp,-20
   13f70:	dfc00415 	stw	ra,16(sp)
   13f74:	df000315 	stw	fp,12(sp)
   13f78:	df000304 	addi	fp,sp,12
   13f7c:	e13ffd15 	stw	r4,-12(fp)
   13f80:	e17ffe15 	stw	r5,-8(fp)
   13f84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13f88:	01c07fc4 	movi	r7,511
   13f8c:	01800044 	movi	r6,1
   13f90:	e17ffd17 	ldw	r5,-12(fp)
   13f94:	01000074 	movhi	r4,1
   13f98:	21183304 	addi	r4,r4,24780
   13f9c:	0013e880 	call	13e88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13fa0:	01c07fc4 	movi	r7,511
   13fa4:	000d883a 	mov	r6,zero
   13fa8:	e17ffe17 	ldw	r5,-8(fp)
   13fac:	01000074 	movhi	r4,1
   13fb0:	21183004 	addi	r4,r4,24768
   13fb4:	0013e880 	call	13e88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13fb8:	01c07fc4 	movi	r7,511
   13fbc:	01800044 	movi	r6,1
   13fc0:	e17fff17 	ldw	r5,-4(fp)
   13fc4:	01000074 	movhi	r4,1
   13fc8:	21183604 	addi	r4,r4,24792
   13fcc:	0013e880 	call	13e88 <alt_open_fd>
}  
   13fd0:	0001883a 	nop
   13fd4:	e037883a 	mov	sp,fp
   13fd8:	dfc00117 	ldw	ra,4(sp)
   13fdc:	df000017 	ldw	fp,0(sp)
   13fe0:	dec00204 	addi	sp,sp,8
   13fe4:	f800283a 	ret

00013fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13fe8:	defffe04 	addi	sp,sp,-8
   13fec:	dfc00115 	stw	ra,4(sp)
   13ff0:	df000015 	stw	fp,0(sp)
   13ff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ff8:	d0a00d17 	ldw	r2,-32716(gp)
   13ffc:	10000326 	beq	r2,zero,1400c <alt_get_errno+0x24>
   14000:	d0a00d17 	ldw	r2,-32716(gp)
   14004:	103ee83a 	callr	r2
   14008:	00000106 	br	14010 <alt_get_errno+0x28>
   1400c:	d0a6fd04 	addi	r2,gp,-25612
}
   14010:	e037883a 	mov	sp,fp
   14014:	dfc00117 	ldw	ra,4(sp)
   14018:	df000017 	ldw	fp,0(sp)
   1401c:	dec00204 	addi	sp,sp,8
   14020:	f800283a 	ret

00014024 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14024:	defffb04 	addi	sp,sp,-20
   14028:	dfc00415 	stw	ra,16(sp)
   1402c:	df000315 	stw	fp,12(sp)
   14030:	dc000215 	stw	r16,8(sp)
   14034:	df000304 	addi	fp,sp,12
   14038:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1403c:	e0bffe17 	ldw	r2,-8(fp)
   14040:	10800217 	ldw	r2,8(r2)
   14044:	10d00034 	orhi	r3,r2,16384
   14048:	e0bffe17 	ldw	r2,-8(fp)
   1404c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14050:	e03ffd15 	stw	zero,-12(fp)
   14054:	00002306 	br	140e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14058:	04000074 	movhi	r16,1
   1405c:	84183004 	addi	r16,r16,24768
   14060:	e0bffd17 	ldw	r2,-12(fp)
   14064:	01400304 	movi	r5,12
   14068:	1009883a 	mov	r4,r2
   1406c:	00050200 	call	5020 <__mulsi3>
   14070:	8085883a 	add	r2,r16,r2
   14074:	10c00017 	ldw	r3,0(r2)
   14078:	e0bffe17 	ldw	r2,-8(fp)
   1407c:	10800017 	ldw	r2,0(r2)
   14080:	1880151e 	bne	r3,r2,140d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14084:	04000074 	movhi	r16,1
   14088:	84183004 	addi	r16,r16,24768
   1408c:	e0bffd17 	ldw	r2,-12(fp)
   14090:	01400304 	movi	r5,12
   14094:	1009883a 	mov	r4,r2
   14098:	00050200 	call	5020 <__mulsi3>
   1409c:	8085883a 	add	r2,r16,r2
   140a0:	10800204 	addi	r2,r2,8
   140a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   140a8:	10000b0e 	bge	r2,zero,140d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   140ac:	01400304 	movi	r5,12
   140b0:	e13ffd17 	ldw	r4,-12(fp)
   140b4:	00050200 	call	5020 <__mulsi3>
   140b8:	1007883a 	mov	r3,r2
   140bc:	00800074 	movhi	r2,1
   140c0:	10983004 	addi	r2,r2,24768
   140c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   140c8:	e0bffe17 	ldw	r2,-8(fp)
   140cc:	18800226 	beq	r3,r2,140d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   140d0:	00bffcc4 	movi	r2,-13
   140d4:	00000806 	br	140f8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   140d8:	e0bffd17 	ldw	r2,-12(fp)
   140dc:	10800044 	addi	r2,r2,1
   140e0:	e0bffd15 	stw	r2,-12(fp)
   140e4:	d0a00c17 	ldw	r2,-32720(gp)
   140e8:	1007883a 	mov	r3,r2
   140ec:	e0bffd17 	ldw	r2,-12(fp)
   140f0:	18bfd92e 	bgeu	r3,r2,14058 <__alt_exception_stack_pointer+0xf8014058>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   140f4:	0005883a 	mov	r2,zero
}
   140f8:	e6ffff04 	addi	sp,fp,-4
   140fc:	dfc00217 	ldw	ra,8(sp)
   14100:	df000117 	ldw	fp,4(sp)
   14104:	dc000017 	ldw	r16,0(sp)
   14108:	dec00304 	addi	sp,sp,12
   1410c:	f800283a 	ret

00014110 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14110:	defff604 	addi	sp,sp,-40
   14114:	dfc00915 	stw	ra,36(sp)
   14118:	df000815 	stw	fp,32(sp)
   1411c:	df000804 	addi	fp,sp,32
   14120:	e13ffd15 	stw	r4,-12(fp)
   14124:	e17ffe15 	stw	r5,-8(fp)
   14128:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1412c:	00bfffc4 	movi	r2,-1
   14130:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14134:	00bffb44 	movi	r2,-19
   14138:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1413c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14140:	d1600a04 	addi	r5,gp,-32728
   14144:	e13ffd17 	ldw	r4,-12(fp)
   14148:	00144340 	call	14434 <alt_find_dev>
   1414c:	e0bff815 	stw	r2,-32(fp)
   14150:	e0bff817 	ldw	r2,-32(fp)
   14154:	1000051e 	bne	r2,zero,1416c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14158:	e13ffd17 	ldw	r4,-12(fp)
   1415c:	00144c40 	call	144c4 <alt_find_file>
   14160:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14164:	00800044 	movi	r2,1
   14168:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1416c:	e0bff817 	ldw	r2,-32(fp)
   14170:	10002b26 	beq	r2,zero,14220 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14174:	e13ff817 	ldw	r4,-32(fp)
   14178:	00145cc0 	call	145cc <alt_get_fd>
   1417c:	e0bff915 	stw	r2,-28(fp)
   14180:	e0bff917 	ldw	r2,-28(fp)
   14184:	1000030e 	bge	r2,zero,14194 <open+0x84>
    {
      status = index;
   14188:	e0bff917 	ldw	r2,-28(fp)
   1418c:	e0bffa15 	stw	r2,-24(fp)
   14190:	00002506 	br	14228 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   14194:	01400304 	movi	r5,12
   14198:	e13ff917 	ldw	r4,-28(fp)
   1419c:	00050200 	call	5020 <__mulsi3>
   141a0:	1007883a 	mov	r3,r2
   141a4:	00800074 	movhi	r2,1
   141a8:	10983004 	addi	r2,r2,24768
   141ac:	1885883a 	add	r2,r3,r2
   141b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   141b4:	e0fffe17 	ldw	r3,-8(fp)
   141b8:	00900034 	movhi	r2,16384
   141bc:	10bfffc4 	addi	r2,r2,-1
   141c0:	1886703a 	and	r3,r3,r2
   141c4:	e0bffc17 	ldw	r2,-16(fp)
   141c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   141cc:	e0bffb17 	ldw	r2,-20(fp)
   141d0:	1000051e 	bne	r2,zero,141e8 <open+0xd8>
   141d4:	e13ffc17 	ldw	r4,-16(fp)
   141d8:	00140240 	call	14024 <alt_file_locked>
   141dc:	e0bffa15 	stw	r2,-24(fp)
   141e0:	e0bffa17 	ldw	r2,-24(fp)
   141e4:	10001016 	blt	r2,zero,14228 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   141e8:	e0bff817 	ldw	r2,-32(fp)
   141ec:	10800317 	ldw	r2,12(r2)
   141f0:	10000826 	beq	r2,zero,14214 <open+0x104>
   141f4:	e0bff817 	ldw	r2,-32(fp)
   141f8:	10800317 	ldw	r2,12(r2)
   141fc:	e1ffff17 	ldw	r7,-4(fp)
   14200:	e1bffe17 	ldw	r6,-8(fp)
   14204:	e17ffd17 	ldw	r5,-12(fp)
   14208:	e13ffc17 	ldw	r4,-16(fp)
   1420c:	103ee83a 	callr	r2
   14210:	00000106 	br	14218 <open+0x108>
   14214:	0005883a 	mov	r2,zero
   14218:	e0bffa15 	stw	r2,-24(fp)
   1421c:	00000206 	br	14228 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14220:	00bffb44 	movi	r2,-19
   14224:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14228:	e0bffa17 	ldw	r2,-24(fp)
   1422c:	1000090e 	bge	r2,zero,14254 <open+0x144>
  {
    alt_release_fd (index);  
   14230:	e13ff917 	ldw	r4,-28(fp)
   14234:	001254c0 	call	1254c <alt_release_fd>
    ALT_ERRNO = -status;
   14238:	0013fe80 	call	13fe8 <alt_get_errno>
   1423c:	1007883a 	mov	r3,r2
   14240:	e0bffa17 	ldw	r2,-24(fp)
   14244:	0085c83a 	sub	r2,zero,r2
   14248:	18800015 	stw	r2,0(r3)
    return -1;
   1424c:	00bfffc4 	movi	r2,-1
   14250:	00000106 	br	14258 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   14254:	e0bff917 	ldw	r2,-28(fp)
}
   14258:	e037883a 	mov	sp,fp
   1425c:	dfc00117 	ldw	ra,4(sp)
   14260:	df000017 	ldw	fp,0(sp)
   14264:	dec00204 	addi	sp,sp,8
   14268:	f800283a 	ret

0001426c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1426c:	defffa04 	addi	sp,sp,-24
   14270:	df000515 	stw	fp,20(sp)
   14274:	df000504 	addi	fp,sp,20
   14278:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1427c:	0005303a 	rdctl	r2,status
   14280:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14284:	e0fffc17 	ldw	r3,-16(fp)
   14288:	00bfff84 	movi	r2,-2
   1428c:	1884703a 	and	r2,r3,r2
   14290:	1001703a 	wrctl	status,r2
  
  return context;
   14294:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14298:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1429c:	e0bfff17 	ldw	r2,-4(fp)
   142a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   142a4:	e0bffd17 	ldw	r2,-12(fp)
   142a8:	10800017 	ldw	r2,0(r2)
   142ac:	e0fffd17 	ldw	r3,-12(fp)
   142b0:	18c00117 	ldw	r3,4(r3)
   142b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   142b8:	e0bffd17 	ldw	r2,-12(fp)
   142bc:	10800117 	ldw	r2,4(r2)
   142c0:	e0fffd17 	ldw	r3,-12(fp)
   142c4:	18c00017 	ldw	r3,0(r3)
   142c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   142cc:	e0bffd17 	ldw	r2,-12(fp)
   142d0:	e0fffd17 	ldw	r3,-12(fp)
   142d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   142d8:	e0bffd17 	ldw	r2,-12(fp)
   142dc:	e0fffd17 	ldw	r3,-12(fp)
   142e0:	10c00015 	stw	r3,0(r2)
   142e4:	e0bffb17 	ldw	r2,-20(fp)
   142e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142ec:	e0bffe17 	ldw	r2,-8(fp)
   142f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   142f4:	0001883a 	nop
   142f8:	e037883a 	mov	sp,fp
   142fc:	df000017 	ldw	fp,0(sp)
   14300:	dec00104 	addi	sp,sp,4
   14304:	f800283a 	ret

00014308 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14308:	defffb04 	addi	sp,sp,-20
   1430c:	dfc00415 	stw	ra,16(sp)
   14310:	df000315 	stw	fp,12(sp)
   14314:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14318:	d0a00f17 	ldw	r2,-32708(gp)
   1431c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14320:	d0a70617 	ldw	r2,-25576(gp)
   14324:	10800044 	addi	r2,r2,1
   14328:	d0a70615 	stw	r2,-25576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1432c:	00002e06 	br	143e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	10800017 	ldw	r2,0(r2)
   14338:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10800403 	ldbu	r2,16(r2)
   14344:	10803fcc 	andi	r2,r2,255
   14348:	10000426 	beq	r2,zero,1435c <alt_tick+0x54>
   1434c:	d0a70617 	ldw	r2,-25576(gp)
   14350:	1000021e 	bne	r2,zero,1435c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14354:	e0bffd17 	ldw	r2,-12(fp)
   14358:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	10800217 	ldw	r2,8(r2)
   14364:	d0e70617 	ldw	r3,-25576(gp)
   14368:	18801d36 	bltu	r3,r2,143e0 <alt_tick+0xd8>
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800403 	ldbu	r2,16(r2)
   14374:	10803fcc 	andi	r2,r2,255
   14378:	1000191e 	bne	r2,zero,143e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1437c:	e0bffd17 	ldw	r2,-12(fp)
   14380:	10800317 	ldw	r2,12(r2)
   14384:	e0fffd17 	ldw	r3,-12(fp)
   14388:	18c00517 	ldw	r3,20(r3)
   1438c:	1809883a 	mov	r4,r3
   14390:	103ee83a 	callr	r2
   14394:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14398:	e0bfff17 	ldw	r2,-4(fp)
   1439c:	1000031e 	bne	r2,zero,143ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   143a0:	e13ffd17 	ldw	r4,-12(fp)
   143a4:	001426c0 	call	1426c <alt_alarm_stop>
   143a8:	00000d06 	br	143e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   143ac:	e0bffd17 	ldw	r2,-12(fp)
   143b0:	10c00217 	ldw	r3,8(r2)
   143b4:	e0bfff17 	ldw	r2,-4(fp)
   143b8:	1887883a 	add	r3,r3,r2
   143bc:	e0bffd17 	ldw	r2,-12(fp)
   143c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   143c4:	e0bffd17 	ldw	r2,-12(fp)
   143c8:	10c00217 	ldw	r3,8(r2)
   143cc:	d0a70617 	ldw	r2,-25576(gp)
   143d0:	1880032e 	bgeu	r3,r2,143e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   143d4:	e0bffd17 	ldw	r2,-12(fp)
   143d8:	00c00044 	movi	r3,1
   143dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   143e0:	e0bffe17 	ldw	r2,-8(fp)
   143e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   143e8:	e0fffd17 	ldw	r3,-12(fp)
   143ec:	d0a00f04 	addi	r2,gp,-32708
   143f0:	18bfcf1e 	bne	r3,r2,14330 <__alt_exception_stack_pointer+0xf8014330>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   143f4:	0001883a 	nop
}
   143f8:	0001883a 	nop
   143fc:	e037883a 	mov	sp,fp
   14400:	dfc00117 	ldw	ra,4(sp)
   14404:	df000017 	ldw	fp,0(sp)
   14408:	dec00204 	addi	sp,sp,8
   1440c:	f800283a 	ret

00014410 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14410:	deffff04 	addi	sp,sp,-4
   14414:	df000015 	stw	fp,0(sp)
   14418:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1441c:	000170fa 	wrctl	ienable,zero
}
   14420:	0001883a 	nop
   14424:	e037883a 	mov	sp,fp
   14428:	df000017 	ldw	fp,0(sp)
   1442c:	dec00104 	addi	sp,sp,4
   14430:	f800283a 	ret

00014434 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14434:	defffa04 	addi	sp,sp,-24
   14438:	dfc00515 	stw	ra,20(sp)
   1443c:	df000415 	stw	fp,16(sp)
   14440:	df000404 	addi	fp,sp,16
   14444:	e13ffe15 	stw	r4,-8(fp)
   14448:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1444c:	e0bfff17 	ldw	r2,-4(fp)
   14450:	10800017 	ldw	r2,0(r2)
   14454:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14458:	e13ffe17 	ldw	r4,-8(fp)
   1445c:	00078dc0 	call	78dc <strlen>
   14460:	10800044 	addi	r2,r2,1
   14464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14468:	00000d06 	br	144a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	10800217 	ldw	r2,8(r2)
   14474:	e0fffd17 	ldw	r3,-12(fp)
   14478:	180d883a 	mov	r6,r3
   1447c:	e17ffe17 	ldw	r5,-8(fp)
   14480:	1009883a 	mov	r4,r2
   14484:	00147780 	call	14778 <memcmp>
   14488:	1000021e 	bne	r2,zero,14494 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1448c:	e0bffc17 	ldw	r2,-16(fp)
   14490:	00000706 	br	144b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14494:	e0bffc17 	ldw	r2,-16(fp)
   14498:	10800017 	ldw	r2,0(r2)
   1449c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   144a0:	e0fffc17 	ldw	r3,-16(fp)
   144a4:	e0bfff17 	ldw	r2,-4(fp)
   144a8:	18bff01e 	bne	r3,r2,1446c <__alt_exception_stack_pointer+0xf801446c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   144ac:	0005883a 	mov	r2,zero
}
   144b0:	e037883a 	mov	sp,fp
   144b4:	dfc00117 	ldw	ra,4(sp)
   144b8:	df000017 	ldw	fp,0(sp)
   144bc:	dec00204 	addi	sp,sp,8
   144c0:	f800283a 	ret

000144c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   144c4:	defffb04 	addi	sp,sp,-20
   144c8:	dfc00415 	stw	ra,16(sp)
   144cc:	df000315 	stw	fp,12(sp)
   144d0:	df000304 	addi	fp,sp,12
   144d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   144d8:	d0a00817 	ldw	r2,-32736(gp)
   144dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   144e0:	00003106 	br	145a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   144e4:	e0bffd17 	ldw	r2,-12(fp)
   144e8:	10800217 	ldw	r2,8(r2)
   144ec:	1009883a 	mov	r4,r2
   144f0:	00078dc0 	call	78dc <strlen>
   144f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   144f8:	e0bffd17 	ldw	r2,-12(fp)
   144fc:	10c00217 	ldw	r3,8(r2)
   14500:	e0bffe17 	ldw	r2,-8(fp)
   14504:	10bfffc4 	addi	r2,r2,-1
   14508:	1885883a 	add	r2,r3,r2
   1450c:	10800003 	ldbu	r2,0(r2)
   14510:	10803fcc 	andi	r2,r2,255
   14514:	1080201c 	xori	r2,r2,128
   14518:	10bfe004 	addi	r2,r2,-128
   1451c:	10800bd8 	cmpnei	r2,r2,47
   14520:	1000031e 	bne	r2,zero,14530 <alt_find_file+0x6c>
    {
      len -= 1;
   14524:	e0bffe17 	ldw	r2,-8(fp)
   14528:	10bfffc4 	addi	r2,r2,-1
   1452c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14530:	e0bffe17 	ldw	r2,-8(fp)
   14534:	e0ffff17 	ldw	r3,-4(fp)
   14538:	1885883a 	add	r2,r3,r2
   1453c:	10800003 	ldbu	r2,0(r2)
   14540:	10803fcc 	andi	r2,r2,255
   14544:	1080201c 	xori	r2,r2,128
   14548:	10bfe004 	addi	r2,r2,-128
   1454c:	10800be0 	cmpeqi	r2,r2,47
   14550:	1000081e 	bne	r2,zero,14574 <alt_find_file+0xb0>
   14554:	e0bffe17 	ldw	r2,-8(fp)
   14558:	e0ffff17 	ldw	r3,-4(fp)
   1455c:	1885883a 	add	r2,r3,r2
   14560:	10800003 	ldbu	r2,0(r2)
   14564:	10803fcc 	andi	r2,r2,255
   14568:	1080201c 	xori	r2,r2,128
   1456c:	10bfe004 	addi	r2,r2,-128
   14570:	10000a1e 	bne	r2,zero,1459c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   14574:	e0bffd17 	ldw	r2,-12(fp)
   14578:	10800217 	ldw	r2,8(r2)
   1457c:	e0fffe17 	ldw	r3,-8(fp)
   14580:	180d883a 	mov	r6,r3
   14584:	e17fff17 	ldw	r5,-4(fp)
   14588:	1009883a 	mov	r4,r2
   1458c:	00147780 	call	14778 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14590:	1000021e 	bne	r2,zero,1459c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14594:	e0bffd17 	ldw	r2,-12(fp)
   14598:	00000706 	br	145b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1459c:	e0bffd17 	ldw	r2,-12(fp)
   145a0:	10800017 	ldw	r2,0(r2)
   145a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   145a8:	e0fffd17 	ldw	r3,-12(fp)
   145ac:	d0a00804 	addi	r2,gp,-32736
   145b0:	18bfcc1e 	bne	r3,r2,144e4 <__alt_exception_stack_pointer+0xf80144e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   145b4:	0005883a 	mov	r2,zero
}
   145b8:	e037883a 	mov	sp,fp
   145bc:	dfc00117 	ldw	ra,4(sp)
   145c0:	df000017 	ldw	fp,0(sp)
   145c4:	dec00204 	addi	sp,sp,8
   145c8:	f800283a 	ret

000145cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   145cc:	defffa04 	addi	sp,sp,-24
   145d0:	dfc00515 	stw	ra,20(sp)
   145d4:	df000415 	stw	fp,16(sp)
   145d8:	dc000315 	stw	r16,12(sp)
   145dc:	df000404 	addi	fp,sp,16
   145e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   145e4:	00bffa04 	movi	r2,-24
   145e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   145ec:	e03ffc15 	stw	zero,-16(fp)
   145f0:	00001d06 	br	14668 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   145f4:	04000074 	movhi	r16,1
   145f8:	84183004 	addi	r16,r16,24768
   145fc:	e0bffc17 	ldw	r2,-16(fp)
   14600:	01400304 	movi	r5,12
   14604:	1009883a 	mov	r4,r2
   14608:	00050200 	call	5020 <__mulsi3>
   1460c:	8085883a 	add	r2,r16,r2
   14610:	10800017 	ldw	r2,0(r2)
   14614:	1000111e 	bne	r2,zero,1465c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   14618:	04000074 	movhi	r16,1
   1461c:	84183004 	addi	r16,r16,24768
   14620:	e0bffc17 	ldw	r2,-16(fp)
   14624:	01400304 	movi	r5,12
   14628:	1009883a 	mov	r4,r2
   1462c:	00050200 	call	5020 <__mulsi3>
   14630:	8085883a 	add	r2,r16,r2
   14634:	e0fffe17 	ldw	r3,-8(fp)
   14638:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1463c:	d0e00c17 	ldw	r3,-32720(gp)
   14640:	e0bffc17 	ldw	r2,-16(fp)
   14644:	1880020e 	bge	r3,r2,14650 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   14648:	e0bffc17 	ldw	r2,-16(fp)
   1464c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   14650:	e0bffc17 	ldw	r2,-16(fp)
   14654:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14658:	00000606 	br	14674 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1465c:	e0bffc17 	ldw	r2,-16(fp)
   14660:	10800044 	addi	r2,r2,1
   14664:	e0bffc15 	stw	r2,-16(fp)
   14668:	e0bffc17 	ldw	r2,-16(fp)
   1466c:	10800810 	cmplti	r2,r2,32
   14670:	103fe01e 	bne	r2,zero,145f4 <__alt_exception_stack_pointer+0xf80145f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14674:	e0bffd17 	ldw	r2,-12(fp)
}
   14678:	e6ffff04 	addi	sp,fp,-4
   1467c:	dfc00217 	ldw	ra,8(sp)
   14680:	df000117 	ldw	fp,4(sp)
   14684:	dc000017 	ldw	r16,0(sp)
   14688:	dec00304 	addi	sp,sp,12
   1468c:	f800283a 	ret

00014690 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   14690:	defffe04 	addi	sp,sp,-8
   14694:	df000115 	stw	fp,4(sp)
   14698:	df000104 	addi	fp,sp,4
   1469c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   146a0:	e0bfff17 	ldw	r2,-4(fp)
   146a4:	10bffe84 	addi	r2,r2,-6
   146a8:	10c00428 	cmpgeui	r3,r2,16
   146ac:	18001a1e 	bne	r3,zero,14718 <alt_exception_cause_generated_bad_addr+0x88>
   146b0:	100690ba 	slli	r3,r2,2
   146b4:	00800074 	movhi	r2,1
   146b8:	1091b204 	addi	r2,r2,18120
   146bc:	1885883a 	add	r2,r3,r2
   146c0:	10800017 	ldw	r2,0(r2)
   146c4:	1000683a 	jmp	r2
   146c8:	00014708 	cmpgei	zero,zero,1308
   146cc:	00014708 	cmpgei	zero,zero,1308
   146d0:	00014718 	cmpnei	zero,zero,1308
   146d4:	00014718 	cmpnei	zero,zero,1308
   146d8:	00014718 	cmpnei	zero,zero,1308
   146dc:	00014708 	cmpgei	zero,zero,1308
   146e0:	00014710 	cmplti	zero,zero,1308
   146e4:	00014718 	cmpnei	zero,zero,1308
   146e8:	00014708 	cmpgei	zero,zero,1308
   146ec:	00014708 	cmpgei	zero,zero,1308
   146f0:	00014718 	cmpnei	zero,zero,1308
   146f4:	00014708 	cmpgei	zero,zero,1308
   146f8:	00014710 	cmplti	zero,zero,1308
   146fc:	00014718 	cmpnei	zero,zero,1308
   14700:	00014718 	cmpnei	zero,zero,1308
   14704:	00014708 	cmpgei	zero,zero,1308
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14708:	00800044 	movi	r2,1
   1470c:	00000306 	br	1471c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   14710:	0005883a 	mov	r2,zero
   14714:	00000106 	br	1471c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   14718:	0005883a 	mov	r2,zero
  }
}
   1471c:	e037883a 	mov	sp,fp
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00104 	addi	sp,sp,4
   14728:	f800283a 	ret

0001472c <atexit>:
   1472c:	200b883a 	mov	r5,r4
   14730:	000f883a 	mov	r7,zero
   14734:	000d883a 	mov	r6,zero
   14738:	0009883a 	mov	r4,zero
   1473c:	00147f41 	jmpi	147f4 <__register_exitproc>

00014740 <exit>:
   14740:	defffe04 	addi	sp,sp,-8
   14744:	000b883a 	mov	r5,zero
   14748:	dc000015 	stw	r16,0(sp)
   1474c:	dfc00115 	stw	ra,4(sp)
   14750:	2021883a 	mov	r16,r4
   14754:	001490c0 	call	1490c <__call_exitprocs>
   14758:	00800074 	movhi	r2,1
   1475c:	109cd004 	addi	r2,r2,29504
   14760:	11000017 	ldw	r4,0(r2)
   14764:	20800f17 	ldw	r2,60(r4)
   14768:	10000126 	beq	r2,zero,14770 <exit+0x30>
   1476c:	103ee83a 	callr	r2
   14770:	8009883a 	mov	r4,r16
   14774:	0014a8c0 	call	14a8c <_exit>

00014778 <memcmp>:
   14778:	01c000c4 	movi	r7,3
   1477c:	3980192e 	bgeu	r7,r6,147e4 <memcmp+0x6c>
   14780:	2144b03a 	or	r2,r4,r5
   14784:	11c4703a 	and	r2,r2,r7
   14788:	10000f26 	beq	r2,zero,147c8 <memcmp+0x50>
   1478c:	20800003 	ldbu	r2,0(r4)
   14790:	28c00003 	ldbu	r3,0(r5)
   14794:	10c0151e 	bne	r2,r3,147ec <memcmp+0x74>
   14798:	31bfff84 	addi	r6,r6,-2
   1479c:	01ffffc4 	movi	r7,-1
   147a0:	00000406 	br	147b4 <memcmp+0x3c>
   147a4:	20800003 	ldbu	r2,0(r4)
   147a8:	28c00003 	ldbu	r3,0(r5)
   147ac:	31bfffc4 	addi	r6,r6,-1
   147b0:	10c00e1e 	bne	r2,r3,147ec <memcmp+0x74>
   147b4:	21000044 	addi	r4,r4,1
   147b8:	29400044 	addi	r5,r5,1
   147bc:	31fff91e 	bne	r6,r7,147a4 <__alt_exception_stack_pointer+0xf80147a4>
   147c0:	0005883a 	mov	r2,zero
   147c4:	f800283a 	ret
   147c8:	20c00017 	ldw	r3,0(r4)
   147cc:	28800017 	ldw	r2,0(r5)
   147d0:	18bfee1e 	bne	r3,r2,1478c <__alt_exception_stack_pointer+0xf801478c>
   147d4:	31bfff04 	addi	r6,r6,-4
   147d8:	21000104 	addi	r4,r4,4
   147dc:	29400104 	addi	r5,r5,4
   147e0:	39bff936 	bltu	r7,r6,147c8 <__alt_exception_stack_pointer+0xf80147c8>
   147e4:	303fe91e 	bne	r6,zero,1478c <__alt_exception_stack_pointer+0xf801478c>
   147e8:	003ff506 	br	147c0 <__alt_exception_stack_pointer+0xf80147c0>
   147ec:	10c5c83a 	sub	r2,r2,r3
   147f0:	f800283a 	ret

000147f4 <__register_exitproc>:
   147f4:	defffa04 	addi	sp,sp,-24
   147f8:	dc000315 	stw	r16,12(sp)
   147fc:	04000074 	movhi	r16,1
   14800:	841cd004 	addi	r16,r16,29504
   14804:	80c00017 	ldw	r3,0(r16)
   14808:	dc400415 	stw	r17,16(sp)
   1480c:	dfc00515 	stw	ra,20(sp)
   14810:	18805217 	ldw	r2,328(r3)
   14814:	2023883a 	mov	r17,r4
   14818:	10003726 	beq	r2,zero,148f8 <__register_exitproc+0x104>
   1481c:	10c00117 	ldw	r3,4(r2)
   14820:	010007c4 	movi	r4,31
   14824:	20c00e16 	blt	r4,r3,14860 <__register_exitproc+0x6c>
   14828:	1a000044 	addi	r8,r3,1
   1482c:	8800221e 	bne	r17,zero,148b8 <__register_exitproc+0xc4>
   14830:	18c00084 	addi	r3,r3,2
   14834:	18c7883a 	add	r3,r3,r3
   14838:	18c7883a 	add	r3,r3,r3
   1483c:	12000115 	stw	r8,4(r2)
   14840:	10c7883a 	add	r3,r2,r3
   14844:	19400015 	stw	r5,0(r3)
   14848:	0005883a 	mov	r2,zero
   1484c:	dfc00517 	ldw	ra,20(sp)
   14850:	dc400417 	ldw	r17,16(sp)
   14854:	dc000317 	ldw	r16,12(sp)
   14858:	dec00604 	addi	sp,sp,24
   1485c:	f800283a 	ret
   14860:	00800034 	movhi	r2,0
   14864:	109b7304 	addi	r2,r2,28108
   14868:	10002626 	beq	r2,zero,14904 <__register_exitproc+0x110>
   1486c:	01006404 	movi	r4,400
   14870:	d9400015 	stw	r5,0(sp)
   14874:	d9800115 	stw	r6,4(sp)
   14878:	d9c00215 	stw	r7,8(sp)
   1487c:	0006dcc0 	call	6dcc <malloc>
   14880:	d9400017 	ldw	r5,0(sp)
   14884:	d9800117 	ldw	r6,4(sp)
   14888:	d9c00217 	ldw	r7,8(sp)
   1488c:	10001d26 	beq	r2,zero,14904 <__register_exitproc+0x110>
   14890:	81000017 	ldw	r4,0(r16)
   14894:	10000115 	stw	zero,4(r2)
   14898:	02000044 	movi	r8,1
   1489c:	22405217 	ldw	r9,328(r4)
   148a0:	0007883a 	mov	r3,zero
   148a4:	12400015 	stw	r9,0(r2)
   148a8:	20805215 	stw	r2,328(r4)
   148ac:	10006215 	stw	zero,392(r2)
   148b0:	10006315 	stw	zero,396(r2)
   148b4:	883fde26 	beq	r17,zero,14830 <__alt_exception_stack_pointer+0xf8014830>
   148b8:	18c9883a 	add	r4,r3,r3
   148bc:	2109883a 	add	r4,r4,r4
   148c0:	1109883a 	add	r4,r2,r4
   148c4:	21802215 	stw	r6,136(r4)
   148c8:	01800044 	movi	r6,1
   148cc:	12406217 	ldw	r9,392(r2)
   148d0:	30cc983a 	sll	r6,r6,r3
   148d4:	4992b03a 	or	r9,r9,r6
   148d8:	12406215 	stw	r9,392(r2)
   148dc:	21c04215 	stw	r7,264(r4)
   148e0:	01000084 	movi	r4,2
   148e4:	893fd21e 	bne	r17,r4,14830 <__alt_exception_stack_pointer+0xf8014830>
   148e8:	11006317 	ldw	r4,396(r2)
   148ec:	218cb03a 	or	r6,r4,r6
   148f0:	11806315 	stw	r6,396(r2)
   148f4:	003fce06 	br	14830 <__alt_exception_stack_pointer+0xf8014830>
   148f8:	18805304 	addi	r2,r3,332
   148fc:	18805215 	stw	r2,328(r3)
   14900:	003fc606 	br	1481c <__alt_exception_stack_pointer+0xf801481c>
   14904:	00bfffc4 	movi	r2,-1
   14908:	003fd006 	br	1484c <__alt_exception_stack_pointer+0xf801484c>

0001490c <__call_exitprocs>:
   1490c:	defff504 	addi	sp,sp,-44
   14910:	df000915 	stw	fp,36(sp)
   14914:	dd400615 	stw	r21,24(sp)
   14918:	dc800315 	stw	r18,12(sp)
   1491c:	dfc00a15 	stw	ra,40(sp)
   14920:	ddc00815 	stw	r23,32(sp)
   14924:	dd800715 	stw	r22,28(sp)
   14928:	dd000515 	stw	r20,20(sp)
   1492c:	dcc00415 	stw	r19,16(sp)
   14930:	dc400215 	stw	r17,8(sp)
   14934:	dc000115 	stw	r16,4(sp)
   14938:	d9000015 	stw	r4,0(sp)
   1493c:	2839883a 	mov	fp,r5
   14940:	04800044 	movi	r18,1
   14944:	057fffc4 	movi	r21,-1
   14948:	00800074 	movhi	r2,1
   1494c:	109cd004 	addi	r2,r2,29504
   14950:	12000017 	ldw	r8,0(r2)
   14954:	45005217 	ldw	r20,328(r8)
   14958:	44c05204 	addi	r19,r8,328
   1495c:	a0001c26 	beq	r20,zero,149d0 <__call_exitprocs+0xc4>
   14960:	a0800117 	ldw	r2,4(r20)
   14964:	15ffffc4 	addi	r23,r2,-1
   14968:	b8000d16 	blt	r23,zero,149a0 <__call_exitprocs+0x94>
   1496c:	14000044 	addi	r16,r2,1
   14970:	8421883a 	add	r16,r16,r16
   14974:	8421883a 	add	r16,r16,r16
   14978:	84402004 	addi	r17,r16,128
   1497c:	a463883a 	add	r17,r20,r17
   14980:	a421883a 	add	r16,r20,r16
   14984:	e0001e26 	beq	fp,zero,14a00 <__call_exitprocs+0xf4>
   14988:	80804017 	ldw	r2,256(r16)
   1498c:	e0801c26 	beq	fp,r2,14a00 <__call_exitprocs+0xf4>
   14990:	bdffffc4 	addi	r23,r23,-1
   14994:	843fff04 	addi	r16,r16,-4
   14998:	8c7fff04 	addi	r17,r17,-4
   1499c:	bd7ff91e 	bne	r23,r21,14984 <__alt_exception_stack_pointer+0xf8014984>
   149a0:	00800034 	movhi	r2,0
   149a4:	109b7804 	addi	r2,r2,28128
   149a8:	10000926 	beq	r2,zero,149d0 <__call_exitprocs+0xc4>
   149ac:	a0800117 	ldw	r2,4(r20)
   149b0:	1000301e 	bne	r2,zero,14a74 <__call_exitprocs+0x168>
   149b4:	a0800017 	ldw	r2,0(r20)
   149b8:	10003226 	beq	r2,zero,14a84 <__call_exitprocs+0x178>
   149bc:	a009883a 	mov	r4,r20
   149c0:	98800015 	stw	r2,0(r19)
   149c4:	0006de00 	call	6de0 <free>
   149c8:	9d000017 	ldw	r20,0(r19)
   149cc:	a03fe41e 	bne	r20,zero,14960 <__alt_exception_stack_pointer+0xf8014960>
   149d0:	dfc00a17 	ldw	ra,40(sp)
   149d4:	df000917 	ldw	fp,36(sp)
   149d8:	ddc00817 	ldw	r23,32(sp)
   149dc:	dd800717 	ldw	r22,28(sp)
   149e0:	dd400617 	ldw	r21,24(sp)
   149e4:	dd000517 	ldw	r20,20(sp)
   149e8:	dcc00417 	ldw	r19,16(sp)
   149ec:	dc800317 	ldw	r18,12(sp)
   149f0:	dc400217 	ldw	r17,8(sp)
   149f4:	dc000117 	ldw	r16,4(sp)
   149f8:	dec00b04 	addi	sp,sp,44
   149fc:	f800283a 	ret
   14a00:	a0800117 	ldw	r2,4(r20)
   14a04:	80c00017 	ldw	r3,0(r16)
   14a08:	10bfffc4 	addi	r2,r2,-1
   14a0c:	15c01426 	beq	r2,r23,14a60 <__call_exitprocs+0x154>
   14a10:	80000015 	stw	zero,0(r16)
   14a14:	183fde26 	beq	r3,zero,14990 <__alt_exception_stack_pointer+0xf8014990>
   14a18:	95c8983a 	sll	r4,r18,r23
   14a1c:	a0806217 	ldw	r2,392(r20)
   14a20:	a5800117 	ldw	r22,4(r20)
   14a24:	2084703a 	and	r2,r4,r2
   14a28:	10000b26 	beq	r2,zero,14a58 <__call_exitprocs+0x14c>
   14a2c:	a0806317 	ldw	r2,396(r20)
   14a30:	2088703a 	and	r4,r4,r2
   14a34:	20000c1e 	bne	r4,zero,14a68 <__call_exitprocs+0x15c>
   14a38:	89400017 	ldw	r5,0(r17)
   14a3c:	d9000017 	ldw	r4,0(sp)
   14a40:	183ee83a 	callr	r3
   14a44:	a0800117 	ldw	r2,4(r20)
   14a48:	15bfbf1e 	bne	r2,r22,14948 <__alt_exception_stack_pointer+0xf8014948>
   14a4c:	98800017 	ldw	r2,0(r19)
   14a50:	153fcf26 	beq	r2,r20,14990 <__alt_exception_stack_pointer+0xf8014990>
   14a54:	003fbc06 	br	14948 <__alt_exception_stack_pointer+0xf8014948>
   14a58:	183ee83a 	callr	r3
   14a5c:	003ff906 	br	14a44 <__alt_exception_stack_pointer+0xf8014a44>
   14a60:	a5c00115 	stw	r23,4(r20)
   14a64:	003feb06 	br	14a14 <__alt_exception_stack_pointer+0xf8014a14>
   14a68:	89000017 	ldw	r4,0(r17)
   14a6c:	183ee83a 	callr	r3
   14a70:	003ff406 	br	14a44 <__alt_exception_stack_pointer+0xf8014a44>
   14a74:	a0800017 	ldw	r2,0(r20)
   14a78:	a027883a 	mov	r19,r20
   14a7c:	1029883a 	mov	r20,r2
   14a80:	003fb606 	br	1495c <__alt_exception_stack_pointer+0xf801495c>
   14a84:	0005883a 	mov	r2,zero
   14a88:	003ffb06 	br	14a78 <__alt_exception_stack_pointer+0xf8014a78>

00014a8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14a8c:	defffd04 	addi	sp,sp,-12
   14a90:	df000215 	stw	fp,8(sp)
   14a94:	df000204 	addi	fp,sp,8
   14a98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14a9c:	0001883a 	nop
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
   14aa4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14aa8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14aac:	10000226 	beq	r2,zero,14ab8 <_exit+0x2c>
    ALT_SIM_FAIL();
   14ab0:	002af070 	cmpltui	zero,zero,43969
   14ab4:	00000106 	br	14abc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14ab8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14abc:	003fff06 	br	14abc <__alt_exception_stack_pointer+0xf8014abc>
