
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001565c memsz 0x0001565c flags r-x
    LOAD off    0x0001667c vaddr 0x0001567c paddr 0x00017204 align 2**12
         filesz 0x00001b88 memsz 0x00001b88 flags rw-
    LOAD off    0x00018d8c vaddr 0x00018d8c paddr 0x00018d8c align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001470c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d34  00014948  00014948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b88  0001567c  00017204  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00018d8c  00018d8c  00018d8c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00018f08  00018f08  00018204  2**0
                  CONTENTS
  7 .frame_buffer 00000000  08000000  08000000  00018204  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018204  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  00018228  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000270a7  00000000  00000000  00019348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a3e8  00000000  00000000  000403ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d62a  00000000  00000000  0004a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002838  00000000  00000000  00057e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004300  00000000  00000000  0005a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000198ba  00000000  00000000  0005e93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000781f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019c8  00000000  00000000  00078238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007d4a2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007d4a5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007d4aa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007d4ab  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0007d4ac  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0007d4b7  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0007d4bb  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  0007d4c6  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0007d4cf  2**0
                  CONTENTS, READONLY
 27 .jdi          000061b4  00000000  00000000  0007d4f7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0009f4ea  00000000  00000000  000836ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00014948 l    d  .rodata	00000000 .rodata
0001567c l    d  .rwdata	00000000 .rwdata
00018d8c l    d  .bss	00000000 .bss
00018f08 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .frame_buffer	00000000 .frame_buffer
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00018d8c l     O .bss	00000002 ctl_reg
00018d8e l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000151f4 l     O .rodata	00000108 two_over_pi
00015174 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001533c l     O .rodata	00000010 init_jk
000152fc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0001567c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015496 l     O .rodata	00000010 zeroes.4404
00009afc l     F .text	000000bc __sbprintf
000154a6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00009d0c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000b864 l     F .text	00000008 __fp_unlock
0000b878 l     F .text	0000019c __sinit.part.1
0000ba14 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00015ec8 l     O .rwdata	00000020 lc_ctype_charset
00015ea8 l     O .rwdata	00000020 lc_message_charset
00015ee8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000154d4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000e540 l     F .text	000000fc __sprint_r.part.0
000155f8 l     O .rodata	00000010 zeroes.4349
0000fb7c l     F .text	000000bc __sbprintf
00015608 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00011cb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011dc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011df0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011ee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011fcc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000120b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00012294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000171f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00012508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000125ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012728 l     F .text	00000034 alt_dev_reg
000160c8 l     O .rwdata	00001060 jtag_uart_0
00017128 l     O .rwdata	00000054 pixel_dma
0001717c l     O .rwdata	00000044 vga_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012cd4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00012ee0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013518 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000138b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013d10 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013e70 l     F .text	0000003c alt_get_errno
00013eac l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018ddc g     O .bss	00000004 alt_instruction_exception_handler
0000dbd8 g     F .text	00000074 _mprec_log10
0000dcc4 g     F .text	0000008c __any_on
00010130 g     F .text	00000054 _isatty_r
000154e0 g     O .rodata	00000028 __mprec_tinytens
000121d0 g     F .text	0000007c alt_main
0000763c g     F .text	000000c0 _puts_r
00018e08 g     O .bss	00000100 alt_irq
0000493c g     F .text	00000014 fabs
00010184 g     F .text	00000060 _lseek_r
00017204 g       *ABS*	00000000 __flash_rwdata_start
0000577c g     F .text	00000088 .hidden __eqdf2
00018f08 g       *ABS*	00000000 __alt_heap_start
000171c4 g     O .rwdata	00000004 dma
00007600 g     F .text	0000003c printf
0001039c g     F .text	0000009c _wcrtomb_r
000171c0 g     O .rwdata	00000004 gpu
00018d9a g     O .bss	00000002 usb_ctl_val
0000e400 g     F .text	0000005c __sseek
0000bbc4 g     F .text	00000010 __sinit
00018d94 g     O .bss	00000004 keycode
00010244 g     F .text	00000140 __swbuf_r
0000c698 g     F .text	0000007c _setlocale_r
0000ba1c g     F .text	00000078 __sfmoreglue
00012270 g     F .text	00000024 __malloc_unlock
000029e4 g     F .text	00000088 UsbGetRetryCnt
0000ca14 g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
0000bbac g     F .text	00000018 _cleanup
0000cc98 g     F .text	000000a8 _Balloc
00005804 g     F .text	000000dc .hidden __gtdf2
00014298 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00012544 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
000100d4 g     F .text	0000005c _fstat_r
00018db4 g     O .bss	00000004 errno
00004950 g     F .text	000001ec floor
0000e37c g     F .text	00000008 __seofread
00018dc8 g     O .bss	00000004 alt_argv
0001f1c0 g       *ABS*	00000000 _gp
000125bc g     F .text	00000030 usleep
00015f48 g     O .rwdata	00000180 alt_fd_list
00002cc8 g     F .text	0000076c __ieee754_rem_pio2
000142bc g     F .text	00000090 alt_find_dev
000077fc g     F .text	00000008 _times_r
00007488 g     F .text	00000148 memcpy
0000b86c g     F .text	0000000c _cleanup_r
00006ac8 g     F .text	000000dc .hidden __floatsidf
00013df4 g     F .text	0000007c alt_io_redirect
00018d9c g     O .bss	00000001 data_size
00011b14 g     F .text	000000f4 .hidden __ltdf2
00014948 g       *ABS*	00000000 __DTOR_END__
000076fc g     F .text	00000014 puts
00014518 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e2b4 g     F .text	00000074 __fpclassifyd
0000db34 g     F .text	000000a4 __ratio
0000fb60 g     F .text	0000001c __vfiprintf_internal
000130d8 g     F .text	0000021c altera_avalon_jtag_uart_read
00006c54 g     F .text	00000014 malloc
000075d0 g     F .text	00000030 _printf_r
00004dec g     F .text	00000064 .hidden __udivsi3
00011f20 g     F .text	000000ac isatty
00015530 g     O .rodata	000000c8 __mprec_tens
0000c714 g     F .text	0000000c __locale_charset
00003434 g     F .text	000004a4 __kernel_cos
00018db0 g     O .bss	00000004 __malloc_top_pad
00002070 g     F .text	00000268 UsbGetConfigDesc2
000013f8 g     F .text	00000074 clear_depth
000171d8 g     O .rwdata	00000004 __mb_cur_max
0000c744 g     F .text	0000000c _localeconv_r
0000d0cc g     F .text	0000003c __i2b
0000c048 g     F .text	000004c8 __sfvwrite_r
00018d9e g     O .bss	00000002 intStat
00007710 g     F .text	00000054 _sbrk_r
000101e4 g     F .text	00000060 _read_r
000171f0 g     O .rwdata	00000004 alt_max_fd
0000fdc8 g     F .text	000000f0 _fclose_r
0000b834 g     F .text	00000030 fflush
00018dac g     O .bss	00000004 __malloc_max_sbrked_mem
00004670 g     F .text	000002cc __kernel_sin
00004ed0 g     F .text	000008ac .hidden __adddf3
0000d8dc g     F .text	0000010c __b2d
00010b80 g     F .text	000005c4 .hidden __umoddi3
000120f4 g     F .text	000000dc lseek
000171c8 g     O .rwdata	00000004 _global_impure_ptr
0000dd50 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00018f08 g       *ABS*	00000000 __bss_end
00013c20 g     F .text	000000f0 alt_iic_isr_register
00014190 g     F .text	00000108 alt_tick
00010584 g     F .text	000005fc .hidden __udivdi3
00010030 g     F .text	00000024 _fputwc_r
00015508 g     O .rodata	00000028 __mprec_bigtens
0000ceb0 g     F .text	00000104 __s2b
00011c08 g     F .text	000000a8 .hidden __floatunsidf
0000d61c g     F .text	00000060 __mcmp
00001ac0 g     F .text	00000100 UsbSetAddress
0000bbe4 g     F .text	00000018 __fp_lock_all
00013bd4 g     F .text	0000004c alt_ic_irq_enabled
000140f4 g     F .text	0000009c alt_alarm_stop
00018dd0 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00015f20 g     O .rwdata	00000028 alt_dev_null
000038d8 g     F .text	00000d98 __kernel_rem_pio2
00013890 g     F .text	00000020 alt_dcache_flush_all
0000cfb4 g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
00006a48 g     F .text	00000080 .hidden __fixdfsi
00017204 g       *ABS*	00000000 __ram_rwdata_end
000171e8 g     O .rwdata	00000008 alt_dev_list
00012628 g     F .text	00000100 write
0001567c g       *ABS*	00000000 __ram_rodata_end
00011e2c g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011b14 g     F .text	000000f4 .hidden __ledf2
00002a6c g     F .text	00000080 UsbPrintMem
0000d394 g     F .text	00000140 __pow5mult
0000e654 g     F .text	0000150c ___vfiprintf_internal_r
00018dc0 g     O .bss	00000004 __nlocale_changed
00004e50 g     F .text	00000058 .hidden __umodsi3
00018f08 g       *ABS*	00000000 end
000012a8 g     F .text	000000dc draw_cube
00012c14 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00014948 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
00013590 g     F .text	0000007c alt_avalon_timer_sc_init
00006ba4 g     F .text	00000064 .hidden __clzsi2
000132f4 g     F .text	00000224 altera_avalon_jtag_uart_write
00002aec g     F .text	000000ec cos
0000bbd4 g     F .text	00000004 __sfp_lock_acquire
0000c930 g     F .text	000000e4 memchr
00007804 g     F .text	000022dc ___vfprintf_internal_r
000023d8 g     F .text	00000100 UsbClassRequest
0000bd38 g     F .text	00000310 _free_r
0000c720 g     F .text	00000010 __locale_mb_cur_max
00014794 g     F .text	00000180 __call_exitprocs
00018dbc g     O .bss	00000004 __mlocale_changed
000171d0 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00018dd4 g     O .bss	00000004 _alt_tick_rate
00002bd8 g     F .text	000000f0 sin
0000d4d4 g     F .text	00000148 __lshift
00018dd8 g     O .bss	00000004 _alt_nticks
000122d0 g     F .text	00000104 read
00012794 g     F .text	0000031c alt_sys_init
0001467c g     F .text	00000118 __register_exitproc
0000d108 g     F .text	0000028c __multiply
00012f80 g     F .text	00000068 altera_avalon_jtag_uart_close
00004ea8 g     F .text	00000028 .hidden __mulsi3
0001567c g       *ABS*	00000000 __ram_rwdata_start
00014948 g       *ABS*	00000000 __ram_rodata_start
00018de0 g     O .bss	00000028 __malloc_current_mallinfo
0000d9e8 g     F .text	0000014c __d2b
08000000 g       *ABS*	00000000 __alt_mem_frame_buffer
00001bc0 g     F .text	00000148 UsbGetDeviceDesc1
00012ab0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00014454 g     F .text	000000c4 alt_get_fd
00013738 g     F .text	00000158 alt_busy_sleep
0000fc98 g     F .text	00000054 _close_r
00014600 g     F .text	0000007c memcmp
00012b70 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018f08 g       *ABS*	00000000 __alt_stack_base
00012bc0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009bb8 g     F .text	00000154 __swsetup_r
00011144 g     F .text	000009d0 .hidden __divdf3
0000ba94 g     F .text	00000118 __sfp
0000dc4c g     F .text	00000078 __copybits
00015aa0 g     O .rwdata	00000408 __malloc_av_
0000bbe0 g     F .text	00000004 __sinit_lock_release
000058e0 g     F .text	0000086c .hidden __muldf3
0000e328 g     F .text	00000054 __sread
00002960 g     F .text	00000084 UsbWaitTDListDone
0001434c g     F .text	00000108 alt_find_file
000138ec g     F .text	000000a4 alt_dev_llist_insert
0001224c g     F .text	00000024 __malloc_lock
00012458 g     F .text	000000b0 sbrk
0000b7d8 g     F .text	0000005c _fflush_r
0000fcec g     F .text	000000dc _calloc_r
00018da0 g     O .bss	00000001 hot_plug_count
00018d8c g       *ABS*	00000000 __bss_start
0000cb70 g     F .text	00000128 memset
0000146c g     F .text	00000504 main
00018dcc g     O .bss	00000004 alt_envp
00018da8 g     O .bss	00000004 __malloc_max_total_mem
00012b10 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000022d8 g     F .text	00000100 UsbSetConfig
00010384 g     F .text	00000018 __swbuf
0000e45c g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
0000feb8 g     F .text	00000014 fclose
00009f34 g     F .text	00001688 _dtoa_r
00006c7c g     F .text	0000080c _malloc_r
000104f8 g     F .text	00000030 __ascii_wctomb
000171f4 g     O .rwdata	00000004 alt_errno
0000c510 g     F .text	000000c4 _fwalk
00004cf4 g     F .text	00000084 .hidden __divsi3
0000bc14 g     F .text	00000124 _malloc_trim_r
000024d8 g     F .text	00000148 UsbGetHidDesc
00014948 g       *ABS*	00000000 __CTOR_END__
0000e464 g     F .text	000000dc strcmp
00014948 g       *ABS*	00000000 __flash_rodata_start
00014948 g       *ABS*	00000000 __DTOR_LIST__
00004cd8 g     F .text	0000001c copysign
0000577c g     F .text	00000088 .hidden __nedf2
000019c8 g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
0001275c g     F .text	00000038 alt_irq_init
000123d4 g     F .text	00000084 alt_release_fd
0001534c g     O .rodata	00000100 .hidden __clz_tab
00018db8 g     O .bss	00000004 _PathLocale
000145b4 g     F .text	00000014 atexit
0000fc38 g     F .text	00000060 _write_r
0000c750 g     F .text	00000018 setlocale
000171cc g     O .rwdata	00000004 _impure_ptr
00018dc4 g     O .bss	00000004 alt_argc
0000b5bc g     F .text	0000021c __sflush_r
00004b3c g     F .text	0000019c scalbn
000139f0 g     F .text	00000060 _do_dtors
0000c73c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000d878 g     F .text	00000064 __ulp
0000bbfc g     F .text	00000018 __fp_unlock_all
00018d98 g     O .bss	00000001 toggle
000171e0 g     O .rwdata	00000008 alt_fs_list
00018da4 g     O .bss	00000004 offset
00002620 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000c768 g     F .text	0000000c localeconv
00013a70 g     F .text	00000050 alt_ic_isr_register
00017204 g       *ABS*	00000000 _edata
00018f08 g       *ABS*	00000000 _end
00001970 g     F .text	00000058 UsbWrite
0000fecc g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00012fe8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00018da2 g     O .bss	00000002 code
00013b48 g     F .text	0000008c alt_ic_irq_disable
0000e384 g     F .text	0000007c __swrite
000171d4 g     O .rwdata	00000004 __malloc_trim_threshold
0000c730 g     F .text	0000000c __locale_msgcharset
00018d90 g     O .bss	00000002 fs_device
000145c8 g     F .text	00000038 exit
0000c5d4 g     F .text	000000c4 _fwalk_reent
0000d67c g     F .text	000001fc __mdiff
00004d78 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000bbd8 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
00014914 g     F .text	00000034 _exit
0001360c g     F .text	0000012c alt_alarm_start
0000c774 g     F .text	000001bc __smakebuf_r
00007764 g     F .text	00000098 strlen
00013f98 g     F .text	0000015c open
00005804 g     F .text	000000dc .hidden __gedf2
00006c08 g     F .text	0000004c clock
000171dc g     O .rwdata	00000004 __wctomb
0000e63c g     F .text	00000018 __sprint_r
00013a50 g     F .text	00000020 alt_icache_flush_all
00013ac0 g     F .text	00000088 alt_ic_irq_enable
00009ae0 g     F .text	0000001c __vfprintf_internal
00010528 g     F .text	0000005c _wctomb_r
00001384 g     F .text	00000074 clear_screen
0000614c g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
0000d01c g     F .text	000000b0 __lo0bits
00001ee0 g     F .text	00000190 UsbGetConfigDesc1
000171fc g     O .rwdata	00000008 alt_alarm_list
00013990 g     F .text	00000060 _do_ctors
00001a0c g     F .text	000000b4 UsbSoftReset
00010438 g     F .text	000000c0 wcrtomb
00011cec g     F .text	000000d8 close
00001d08 g     F .text	000001d8 UsbGetDeviceDesc2
00012034 g     F .text	00000084 alt_load
00010054 g     F .text	00000080 fputwc
00006c68 g     F .text	00000014 free
0000bbdc g     F .text	00000004 __sinit_lock_acquire
0000cd68 g     F .text	00000148 __multadd
0000cd40 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008000b4 	movhi	r2,2
 14c:	10a38204 	addi	r2,r2,-29176
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008000b4 	movhi	r2,2
 164:	10a38204 	addi	r2,r2,-29176
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a70717 	ldw	r2,-25572(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a70717 	ldw	r2,-25572(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6bc7014 	ori	gp,gp,61888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10a36314 	ori	r2,r2,36236

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18e3c214 	ori	r3,r3,36616

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00120340 	call	12034 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00121d00 	call	121d0 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820234 	movhi	r2,2056
     288:	108c0c04 	addi	r2,r2,12336
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820234 	movhi	r2,2056
     298:	108c1004 	addi	r2,r2,12352
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820234 	movhi	r2,2056
     2a8:	108c1804 	addi	r2,r2,12384
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820234 	movhi	r2,2056
     2b8:	108c1404 	addi	r2,r2,12368
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820234 	movhi	r2,2056
     2c8:	108c2004 	addi	r2,r2,12416
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820234 	movhi	r2,2056
     2d4:	108c1c04 	addi	r2,r2,12400
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820234 	movhi	r2,2056
     2e0:	108c1004 	addi	r2,r2,12352
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820234 	movhi	r2,2056
     2ec:	108c0c04 	addi	r2,r2,12336
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820234 	movhi	r2,2056
     2f8:	108c0c04 	addi	r2,r2,12336
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820234 	movhi	r2,2056
     308:	108c1004 	addi	r2,r2,12352
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820234 	movhi	r2,2056
     348:	108c2004 	addi	r2,r2,12416
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820234 	movhi	r2,2056
     358:	108c1c04 	addi	r2,r2,12400
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820234 	movhi	r2,2056
     368:	108c1004 	addi	r2,r2,12352
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820234 	movhi	r2,2056
     374:	108c1404 	addi	r2,r2,12368
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820234 	movhi	r2,2056
     380:	108c1404 	addi	r2,r2,12368
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820234 	movhi	r2,2056
     390:	108c1004 	addi	r2,r2,12352
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820234 	movhi	r2,2056
     3c8:	108c2004 	addi	r2,r2,12416
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820234 	movhi	r2,2056
     3d8:	108c1004 	addi	r2,r2,12352
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820234 	movhi	r2,2056
     3e4:	108c1804 	addi	r2,r2,12384
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820234 	movhi	r2,2056
     3f0:	108c1c04 	addi	r2,r2,12400
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820234 	movhi	r2,2056
     400:	108c1804 	addi	r2,r2,12384
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820234 	movhi	r2,2056
     410:	108c1004 	addi	r2,r2,12352
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a6f603 	ldbu	r2,-25640(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a6f605 	stb	r2,-25640(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a6f703 	ldbu	r2,-25636(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a6f603 	ldbu	r2,-25640(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	00019700 	call	1970 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a6f703 	ldbu	r2,-25636(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a6f603 	ldbu	r2,-25640(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	00019700 	call	1970 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	00125bc0 	call	125bc <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	00029600 	call	2960 <UsbWaitTDListDone>
     58c:	d0a6f68d 	sth	r2,-25638(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	00019c80 	call	19c8 <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a6f515 	stw	r2,-25644(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a6f517 	ldw	r2,-25644(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	21125204 	addi	r4,r4,18760
     5b0:	00076000 	call	7600 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820234 	movhi	r2,2056
     5b8:	108c2404 	addi	r2,r2,12432
     5bc:	d0e6f517 	ldw	r3,-25644(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a6f517 	ldw	r2,-25644(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	00125bc0 	call	125bc <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a6f30b 	ldhu	r2,-25652(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	00019c80 	call	19c8 <UsbRead>
     5ec:	d0a6f68d 	sth	r2,-25638(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e6f68b 	ldhu	r3,-25638(gp)
     5f4:	d0a6f38b 	ldhu	r2,-25650(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d026f805 	stb	zero,-25632(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	00125bc0 	call	125bc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a6f30b 	ldhu	r2,-25652(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	00019c80 	call	19c8 <UsbRead>
     624:	d0a6f68d 	sth	r2,-25638(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e6f68b 	ldhu	r3,-25638(gp)
     62c:	d0a6f38b 	ldhu	r2,-25650(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a6f803 	ldbu	r2,-25632(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a6f805 	stb	r2,-25632(gp)
     648:	d0a6f803 	ldbu	r2,-25632(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e6f68b 	ldhu	r3,-25638(gp)
     664:	d0a6f38b 	ldhu	r2,-25650(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	21125b04 	addi	r4,r4,18796
     67c:	00076fc0 	call	76fc <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	21126604 	addi	r4,r4,18840
     688:	00076fc0 	call	76fc <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6f30b 	ldhu	r2,-25652(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	00019c80 	call	19c8 <UsbRead>
     6a0:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	00125bc0 	call	125bc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a6f30b 	ldhu	r2,-25652(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	00019c80 	call	19c8 <UsbRead>
     6bc:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	00125bc0 	call	125bc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a6f30b 	ldhu	r2,-25652(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	00019c80 	call	19c8 <UsbRead>
     6d8:	d0a6f68d 	sth	r2,-25638(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	00125bc0 	call	125bc <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e6f68b 	ldhu	r3,-25638(gp)
     6e8:	d0a6f38b 	ldhu	r2,-25650(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	00125bc0 	call	125bc <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e6f68b 	ldhu	r3,-25638(gp)
     708:	d0a6f38b 	ldhu	r2,-25650(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	21126e04 	addi	r4,r4,18872
     74c:	00076fc0 	call	76fc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	0001a0c0 	call	1a0c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	00019700 	call	1970 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	00019700 	call	1970 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	00019700 	call	1970 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a6f68d 	sth	r2,-25638(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a6f68b 	ldhu	r2,-25638(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	00019700 	call	1970 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a6f78d 	sth	r2,-25634(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a6f78b 	ldhu	r2,-25634(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	00019700 	call	1970 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	00019700 	call	1970 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	21127404 	addi	r4,r4,18896
     8a0:	00076000 	call	7600 <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	21127d04 	addi	r4,r4,18932
     8c4:	00076000 	call	7600 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	00019700 	call	1970 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	00019700 	call	1970 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	21127404 	addi	r4,r4,18896
     9b8:	00076000 	call	7600 <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a6f30d 	sth	r2,-25652(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a6f38d 	sth	r2,-25650(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a6f40d 	sth	r2,-25648(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a6f30b 	ldhu	r2,-25652(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	00019c80 	call	19c8 <UsbRead>
     9e8:	d0a6f68d 	sth	r2,-25638(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e6f68b 	ldhu	r3,-25638(gp)
     9f0:	d0a6f38b 	ldhu	r2,-25650(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d026f805 	stb	zero,-25632(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	00125bc0 	call	125bc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a6f30b 	ldhu	r2,-25652(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	00019c80 	call	19c8 <UsbRead>
     a20:	d0a6f68d 	sth	r2,-25638(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e6f68b 	ldhu	r3,-25638(gp)
     a28:	d0a6f38b 	ldhu	r2,-25650(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a6f803 	ldbu	r2,-25632(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a6f805 	stb	r2,-25632(gp)
     a44:	d0a6f803 	ldbu	r2,-25632(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e6f68b 	ldhu	r3,-25638(gp)
     a60:	d0a6f38b 	ldhu	r2,-25650(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	21128104 	addi	r4,r4,18948
     a78:	00076fc0 	call	76fc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	21128b04 	addi	r4,r4,18988
     a84:	00076fc0 	call	76fc <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a6f30b 	ldhu	r2,-25652(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	00019c80 	call	19c8 <UsbRead>
     a9c:	d0a6f68d 	sth	r2,-25638(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e6f68b 	ldhu	r3,-25638(gp)
     aa4:	d0a6f38b 	ldhu	r2,-25650(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	00125bc0 	call	125bc <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e6f68b 	ldhu	r3,-25638(gp)
     ac4:	d0a6f38b 	ldhu	r2,-25650(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e6f68b 	ldhu	r3,-25638(gp)
     adc:	d0a6f40b 	ldhu	r2,-25648(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	21129704 	addi	r4,r4,19036
     af4:	00076fc0 	call	76fc <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	21129e04 	addi	r4,r4,19064
     b04:	00076fc0 	call	76fc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	0001ac00 	call	1ac0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	0001ac00 	call	1ac0 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	00125bc0 	call	125bc <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	2112a504 	addi	r4,r4,19092
     b58:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a6f68b 	ldhu	r2,-25638(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	2112b004 	addi	r4,r4,19136
     b88:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a6f68b 	ldhu	r2,-25638(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	00029e40 	call	29e4 <UsbGetRetryCnt>
     ba4:	d0a6f68d 	sth	r2,-25638(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	2112bc04 	addi	r4,r4,19184
     bb4:	00076fc0 	call	76fc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	0001bc00 	call	1bc0 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	00125bc0 	call	125bc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	0001bc00 	call	1bc0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	00125bc0 	call	125bc <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	2112cb04 	addi	r4,r4,19244
     c10:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a6f68b 	ldhu	r2,-25638(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	2112d604 	addi	r4,r4,19288
     c40:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a6f68b 	ldhu	r2,-25638(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	00029e40 	call	29e4 <UsbGetRetryCnt>
     c5c:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	2112e204 	addi	r4,r4,19336
     c68:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	2112eb04 	addi	r4,r4,19372
     c78:	00076fc0 	call	76fc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	0001d080 	call	1d08 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	0001d080 	call	1d08 <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	00125bc0 	call	125bc <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	2112cb04 	addi	r4,r4,19244
     ccc:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a6f68b 	ldhu	r2,-25638(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	2112d604 	addi	r4,r4,19288
     cfc:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a6f68b 	ldhu	r2,-25638(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	00029e40 	call	29e4 <UsbGetRetryCnt>
     d18:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	2112e204 	addi	r4,r4,19336
     d24:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	2112ff04 	addi	r4,r4,19452
     d34:	00076fc0 	call	76fc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	0001ee00 	call	1ee0 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	0001ee00 	call	1ee0 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	00125bc0 	call	125bc <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	21131104 	addi	r4,r4,19524
     d88:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a6f68b 	ldhu	r2,-25638(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	21131c04 	addi	r4,r4,19568
     db8:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a6f68b 	ldhu	r2,-25638(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	00029e40 	call	29e4 <UsbGetRetryCnt>
     dd4:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	2112e204 	addi	r4,r4,19336
     de0:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	21132804 	addi	r4,r4,19616
     df0:	00076fc0 	call	76fc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	00020700 	call	2070 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	00125bc0 	call	125bc <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	00020700 	call	2070 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	00125bc0 	call	125bc <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	21133b04 	addi	r4,r4,19692
     e50:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a6f68b 	ldhu	r2,-25638(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	21134604 	addi	r4,r4,19736
     e80:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a6f68b 	ldhu	r2,-25638(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	00029e40 	call	29e4 <UsbGetRetryCnt>
     e9c:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	2112e204 	addi	r4,r4,19336
     ea8:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	21135204 	addi	r4,r4,19784
     eb8:	00076fc0 	call	76fc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a6f88d 	sth	r2,-25630(gp)
	code = code & 0x003;
     ed4:	d0a6f88b 	ldhu	r2,-25630(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a6f88d 	sth	r2,-25630(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a6f88b 	ldhu	r2,-25630(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	21136504 	addi	r4,r4,19860
     ef4:	00076000 	call	7600 <printf>

	if (code == 0x01)
     ef8:	d0a6f88b 	ldhu	r2,-25630(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	21136804 	addi	r4,r4,19872
     f10:	00076fc0 	call	76fc <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	21137704 	addi	r4,r4,19932
     f20:	00076fc0 	call	76fc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	00019700 	call	1970 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a6f705 	stb	r2,-25636(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a6f703 	ldbu	r2,-25636(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	21138004 	addi	r4,r4,19968
     fa4:	00076000 	call	7600 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	00022d80 	call	22d8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	00022d80 	call	22d8 <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	00125bc0 	call	125bc <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	21138a04 	addi	r4,r4,20008
     ff8:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a6f68b 	ldhu	r2,-25638(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	21139504 	addi	r4,r4,20052
    1028:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a6f68b 	ldhu	r2,-25638(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	00029e40 	call	29e4 <UsbGetRetryCnt>
    1044:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	2112e204 	addi	r4,r4,19336
    1050:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	2113a104 	addi	r4,r4,20100
    1060:	00076fc0 	call	76fc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	00023d80 	call	23d8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	00023d80 	call	23d8 <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	00125bc0 	call	125bc <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	2113b304 	addi	r4,r4,20172
    10b4:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a6f68b 	ldhu	r2,-25638(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	2113be04 	addi	r4,r4,20216
    10e4:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a6f68b 	ldhu	r2,-25638(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	00029e40 	call	29e4 <UsbGetRetryCnt>
    1100:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	2112e204 	addi	r4,r4,19336
    110c:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	2113ca04 	addi	r4,r4,20264
    111c:	00076fc0 	call	76fc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	00024d80 	call	24d8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	00024d80 	call	24d8 <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	00125bc0 	call	125bc <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	2113b304 	addi	r4,r4,20172
    1170:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a6f68b 	ldhu	r2,-25638(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	2113be04 	addi	r4,r4,20216
    11a0:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a6f68b 	ldhu	r2,-25638(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	00029e40 	call	29e4 <UsbGetRetryCnt>
    11bc:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	2112e204 	addi	r4,r4,19336
    11c8:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	2113dc04 	addi	r4,r4,20336
    11d8:	00076fc0 	call	76fc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	00026200 	call	2620 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	00026200 	call	2620 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	00029600 	call	2960 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	2113f004 	addi	r4,r4,20416
    1224:	00076000 	call	7600 <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a6f68d 	sth	r2,-25638(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a6f68b 	ldhu	r2,-25638(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	2113fc04 	addi	r4,r4,20464
    1254:	00076000 	call	7600 <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a6f68b 	ldhu	r2,-25638(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	00029e40 	call	29e4 <UsbGetRetryCnt>
    1270:	d0a6f68d 	sth	r2,-25638(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	2112e204 	addi	r4,r4,19336
    127c:	00076fc0 	call	76fc <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	21140804 	addi	r4,r4,20512
    128c:	00076fc0 	call	76fc <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <draw_cube>:
#include "math.h"

int offset = 0;

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
    12c8:	e0bffc17 	ldw	r2,-16(fp)
    12cc:	00c00044 	movi	r3,1
    12d0:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
    12d4:	e0bffc17 	ldw	r2,-16(fp)
    12d8:	e0c00317 	ldw	r3,12(fp)
    12dc:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	1006923a 	slli	r3,r2,8
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    12f0:	e0bffe17 	ldw	r2,-8(fp)
    12f4:	1006923a 	slli	r3,r2,8
    12f8:	e0bffc17 	ldw	r2,-16(fp)
    12fc:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	1006923a 	slli	r3,r2,8
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10c00615 	stw	r3,24(r2)
	gpu->z = (z-offset) * (FP_SCALE);
    1310:	d0a6f917 	ldw	r2,-25628(gp)
    1314:	e0c00217 	ldw	r3,8(fp)
    1318:	1885c83a 	sub	r2,r3,r2
    131c:	1006923a 	slli	r3,r2,8
    1320:	e0bffc17 	ldw	r2,-16(fp)
    1324:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	00c00044 	movi	r3,1
    1340:	10c00115 	stw	r3,4(r2)
	time_t start = clock();
    1344:	0006c080 	call	6c08 <clock>
    1348:	e0bffb15 	stw	r2,-20(fp)
	while (gpu->done == 0) {
    134c:	0001883a 	nop
    1350:	e0bffc17 	ldw	r2,-16(fp)
    1354:	10800217 	ldw	r2,8(r2)
    1358:	103ffd26 	beq	r2,zero,1350 <__alt_exception_stack_pointer+0xf8001350>
	}
//	time_t delta = clock() - start;
//	if (delta > 100) {
//		printf("Render ticks %d\n", delta);
//	}
	gpu->done = 0;
    135c:	e0bffc17 	ldw	r2,-16(fp)
    1360:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    1364:	e0bffc17 	ldw	r2,-16(fp)
    1368:	10000815 	stw	zero,32(r2)

}
    136c:	0001883a 	nop
    1370:	e037883a 	mov	sp,fp
    1374:	dfc00117 	ldw	ra,4(sp)
    1378:	df000017 	ldw	fp,0(sp)
    137c:	dec00204 	addi	sp,sp,8
    1380:	f800283a 	ret

00001384 <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    1384:	defffd04 	addi	sp,sp,-12
    1388:	df000215 	stw	fp,8(sp)
    138c:	df000204 	addi	fp,sp,8
    1390:	e13ffe15 	stw	r4,-8(fp)
    1394:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
    1398:	e0bffe17 	ldw	r2,-8(fp)
    139c:	00c00084 	movi	r3,2
    13a0:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    13b4:	e0bffe17 	ldw	r2,-8(fp)
    13b8:	00c00044 	movi	r3,1
    13bc:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10800058 	cmpnei	r2,r2,1
    13c8:	1000041e 	bne	r2,zero,13dc <clear_screen+0x58>
		while (gpu->done == 0) {
    13cc:	0001883a 	nop
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	10800217 	ldw	r2,8(r2)
    13d8:	103ffd26 	beq	r2,zero,13d0 <__alt_exception_stack_pointer+0xf80013d0>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    13dc:	e0bffe17 	ldw	r2,-8(fp)
    13e0:	10000815 	stw	zero,32(r2)
}
    13e4:	0001883a 	nop
    13e8:	e037883a 	mov	sp,fp
    13ec:	df000017 	ldw	fp,0(sp)
    13f0:	dec00104 	addi	sp,sp,4
    13f4:	f800283a 	ret

000013f8 <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
    13f8:	defffd04 	addi	sp,sp,-12
    13fc:	df000215 	stw	fp,8(sp)
    1400:	df000204 	addi	fp,sp,8
    1404:	e13ffe15 	stw	r4,-8(fp)
    1408:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
    140c:	e0bffe17 	ldw	r2,-8(fp)
    1410:	00c000c4 	movi	r3,3
    1414:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1428:	e0bffe17 	ldw	r2,-8(fp)
    142c:	00c00044 	movi	r3,1
    1430:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800058 	cmpnei	r2,r2,1
    143c:	1000041e 	bne	r2,zero,1450 <clear_depth+0x58>
		while (gpu->done == 0) {
    1440:	0001883a 	nop
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	10800217 	ldw	r2,8(r2)
    144c:	103ffd26 	beq	r2,zero,1444 <__alt_exception_stack_pointer+0xf8001444>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	10000815 	stw	zero,32(r2)
}
    1458:	0001883a 	nop
    145c:	e037883a 	mov	sp,fp
    1460:	df000017 	ldw	fp,0(sp)
    1464:	dec00104 	addi	sp,sp,4
    1468:	f800283a 	ret

0000146c <main>:
//	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
//	vga_cont->frame_pointer = gpu->frame_pointer;
//	gpu->frame_pointer = temp;
//}

int main() {
    146c:	deffef04 	addi	sp,sp,-68
    1470:	dfc01015 	stw	ra,64(sp)
    1474:	df000f15 	stw	fp,60(sp)
    1478:	df000f04 	addi	fp,sp,60

	printf("Starting up");
    147c:	01000074 	movhi	r4,1
    1480:	21141c04 	addi	r4,r4,20592
    1484:	00076000 	call	7600 <printf>

	union frame_buffer_t* frame1 = (frame_buffer_t*) FRAME_BUFFER_BASE;
    1488:	00820034 	movhi	r2,2048
    148c:	e0bff915 	stw	r2,-28(fp)
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    1490:	01000174 	movhi	r4,5
    1494:	212c0004 	addi	r4,r4,-20480
    1498:	0006c540 	call	6c54 <malloc>
    149c:	e0bffa15 	stw	r2,-24(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    14a0:	01000174 	movhi	r4,5
    14a4:	212c0004 	addi	r4,r4,-20480
    14a8:	0006c540 	call	6c54 <malloc>
    14ac:	e0bffb15 	stw	r2,-20(fp)

	dma->back_buffer = frame1;
    14b0:	d0a00117 	ldw	r2,-32764(gp)
    14b4:	e0fff917 	ldw	r3,-28(fp)
    14b8:	10c00115 	stw	r3,4(r2)
	dma->front_buffer = 0; //swap
    14bc:	d0a00117 	ldw	r2,-32764(gp)
    14c0:	10000015 	stw	zero,0(r2)

	gpu->frame_pointer = frame2;
    14c4:	d0a00017 	ldw	r2,-32768(gp)
    14c8:	e0fffa17 	ldw	r3,-24(fp)
    14cc:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    14d0:	d0a00017 	ldw	r2,-32768(gp)
    14d4:	e0fffb17 	ldw	r3,-20(fp)
    14d8:	10c00315 	stw	r3,12(r2)
	//vga_cont->frame_pointer = frame1;

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    14dc:	e1fffb17 	ldw	r7,-20(fp)
    14e0:	e1bffa17 	ldw	r6,-24(fp)
    14e4:	e17ff917 	ldw	r5,-28(fp)
    14e8:	01000074 	movhi	r4,1
    14ec:	21141f04 	addi	r4,r4,20604
    14f0:	00076000 	call	7600 <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    14f4:	01000074 	movhi	r4,1
    14f8:	21142d04 	addi	r4,r4,20660
    14fc:	00076fc0 	call	76fc <puts>
	init_keyboard();
    1500:	00007300 	call	730 <init_keyboard>

	double theta = 0;
    1504:	e03ff315 	stw	zero,-52(fp)
    1508:	e03ff415 	stw	zero,-48(fp)




	int keycode = 0;
    150c:	e03fff15 	stw	zero,-4(fp)
	while (1) {
		time_t start_time = clock();
    1510:	0006c080 	call	6c08 <clock>
    1514:	e0bffc15 	stw	r2,-16(fp)
		clear_depth(gpu, 1);
    1518:	d0a00017 	ldw	r2,-32768(gp)
    151c:	01400044 	movi	r5,1
    1520:	1009883a 	mov	r4,r2
    1524:	00013f80 	call	13f8 <clear_depth>
		clear_screen(gpu, 1);
    1528:	d0a00017 	ldw	r2,-32768(gp)
    152c:	01400044 	movi	r5,1
    1530:	1009883a 	mov	r4,r2
    1534:	00013840 	call	1384 <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    1538:	0006c080 	call	6c08 <clock>
    153c:	1007883a 	mov	r3,r2
    1540:	e0bffc17 	ldw	r2,-16(fp)
    1544:	1885c83a 	sub	r2,r3,r2
    1548:	100b883a 	mov	r5,r2
    154c:	01000074 	movhi	r4,1
    1550:	21143704 	addi	r4,r4,20700
    1554:	00076000 	call	7600 <printf>
		start_time = clock();
    1558:	0006c080 	call	6c08 <clock>
    155c:	e0bffc15 	stw	r2,-16(fp)

		for(int z = 5; z > 0; z--) {
    1560:	00800144 	movi	r2,5
    1564:	e0bff515 	stw	r2,-44(fp)
    1568:	00001a06 	br	15d4 <main+0x168>
		for(int x = 10; x > -30; x--) {
    156c:	00800284 	movi	r2,10
    1570:	e0bff615 	stw	r2,-40(fp)
    1574:	00001106 	br	15bc <main+0x150>
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
    1578:	d0e00017 	ldw	r3,-32768(gp)
    157c:	e0bff617 	ldw	r2,-40(fp)
    1580:	10bfff84 	addi	r2,r2,-2
    1584:	100890fa 	slli	r4,r2,3
    1588:	e0bff517 	ldw	r2,-44(fp)
    158c:	10bffe04 	addi	r2,r2,-8
    1590:	100490fa 	slli	r2,r2,3
    1594:	d8000115 	stw	zero,4(sp)
    1598:	d8800015 	stw	r2,0(sp)
    159c:	01fffc04 	movi	r7,-16
    15a0:	200d883a 	mov	r6,r4
    15a4:	01400204 	movi	r5,8
    15a8:	1809883a 	mov	r4,r3
    15ac:	00012a80 	call	12a8 <draw_cube>
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 5; z > 0; z--) {
		for(int x = 10; x > -30; x--) {
    15b0:	e0bff617 	ldw	r2,-40(fp)
    15b4:	10bfffc4 	addi	r2,r2,-1
    15b8:	e0bff615 	stw	r2,-40(fp)
    15bc:	e0bff617 	ldw	r2,-40(fp)
    15c0:	10bff8c8 	cmpgei	r2,r2,-29
    15c4:	103fec1e 	bne	r2,zero,1578 <__alt_exception_stack_pointer+0xf8001578>
		clear_depth(gpu, 1);
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 5; z > 0; z--) {
    15c8:	e0bff517 	ldw	r2,-44(fp)
    15cc:	10bfffc4 	addi	r2,r2,-1
    15d0:	e0bff515 	stw	r2,-44(fp)
    15d4:	e0bff517 	ldw	r2,-44(fp)
    15d8:	00bfe416 	blt	zero,r2,156c <__alt_exception_stack_pointer+0xf800156c>
		for(int x = 10; x > -30; x--) {
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
			}
		}

		for(int y = 1; y < 6; y++) {
    15dc:	00800044 	movi	r2,1
    15e0:	e0bff715 	stw	r2,-36(fp)
    15e4:	00001006 	br	1628 <main+0x1bc>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
    15e8:	d0e00017 	ldw	r3,-32768(gp)
    15ec:	e0bff717 	ldw	r2,-36(fp)
    15f0:	10bfff84 	addi	r2,r2,-2
    15f4:	100890fa 	slli	r4,r2,3
    15f8:	00800084 	movi	r2,2
    15fc:	d8800115 	stw	r2,4(sp)
    1600:	00bff404 	movi	r2,-48
    1604:	d8800015 	stw	r2,0(sp)
    1608:	200f883a 	mov	r7,r4
    160c:	01bffc04 	movi	r6,-16
    1610:	01400204 	movi	r5,8
    1614:	1809883a 	mov	r4,r3
    1618:	00012a80 	call	12a8 <draw_cube>
		for(int x = 10; x > -30; x--) {
					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
			}
		}

		for(int y = 1; y < 6; y++) {
    161c:	e0bff717 	ldw	r2,-36(fp)
    1620:	10800044 	addi	r2,r2,1
    1624:	e0bff715 	stw	r2,-36(fp)
    1628:	e0bff717 	ldw	r2,-36(fp)
    162c:	10800190 	cmplti	r2,r2,6
    1630:	103fed1e 	bne	r2,zero,15e8 <__alt_exception_stack_pointer+0xf80015e8>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1634:	00800044 	movi	r2,1
    1638:	e0bff815 	stw	r2,-32(fp)
    163c:	00001006 	br	1680 <main+0x214>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
    1640:	d0e00017 	ldw	r3,-32768(gp)
    1644:	e0bff817 	ldw	r2,-32(fp)
    1648:	10bfff84 	addi	r2,r2,-2
    164c:	100890fa 	slli	r4,r2,3
    1650:	00800084 	movi	r2,2
    1654:	d8800115 	stw	r2,4(sp)
    1658:	00bff004 	movi	r2,-64
    165c:	d8800015 	stw	r2,0(sp)
    1660:	200f883a 	mov	r7,r4
    1664:	000d883a 	mov	r6,zero
    1668:	01400204 	movi	r5,8
    166c:	1809883a 	mov	r4,r3
    1670:	00012a80 	call	12a8 <draw_cube>

		for(int y = 1; y < 6; y++) {
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1674:	e0bff817 	ldw	r2,-32(fp)
    1678:	10800044 	addi	r2,r2,1
    167c:	e0bff815 	stw	r2,-32(fp)
    1680:	e0bff817 	ldw	r2,-32(fp)
    1684:	10800190 	cmplti	r2,r2,6
    1688:	103fed1e 	bne	r2,zero,1640 <__alt_exception_stack_pointer+0xf8001640>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
		}

		draw_cube(gpu, 8, 16, -8, -40, 3);
    168c:	d0e00017 	ldw	r3,-32768(gp)
    1690:	008000c4 	movi	r2,3
    1694:	d8800115 	stw	r2,4(sp)
    1698:	00bff604 	movi	r2,-40
    169c:	d8800015 	stw	r2,0(sp)
    16a0:	01fffe04 	movi	r7,-8
    16a4:	01800404 	movi	r6,16
    16a8:	01400204 	movi	r5,8
    16ac:	1809883a 	mov	r4,r3
    16b0:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 8, -8, -40, 3);
    16b4:	d0e00017 	ldw	r3,-32768(gp)
    16b8:	008000c4 	movi	r2,3
    16bc:	d8800115 	stw	r2,4(sp)
    16c0:	00bff604 	movi	r2,-40
    16c4:	d8800015 	stw	r2,0(sp)
    16c8:	01fffe04 	movi	r7,-8
    16cc:	01800204 	movi	r6,8
    16d0:	01400204 	movi	r5,8
    16d4:	1809883a 	mov	r4,r3
    16d8:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 24, -8, -40, 3);
    16dc:	d0e00017 	ldw	r3,-32768(gp)
    16e0:	008000c4 	movi	r2,3
    16e4:	d8800115 	stw	r2,4(sp)
    16e8:	00bff604 	movi	r2,-40
    16ec:	d8800015 	stw	r2,0(sp)
    16f0:	01fffe04 	movi	r7,-8
    16f4:	01800604 	movi	r6,24
    16f8:	01400204 	movi	r5,8
    16fc:	1809883a 	mov	r4,r3
    1700:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40-8, 3);
    1704:	d0e00017 	ldw	r3,-32768(gp)
    1708:	008000c4 	movi	r2,3
    170c:	d8800115 	stw	r2,4(sp)
    1710:	00bff404 	movi	r2,-48
    1714:	d8800015 	stw	r2,0(sp)
    1718:	01fffe04 	movi	r7,-8
    171c:	01800404 	movi	r6,16
    1720:	01400204 	movi	r5,8
    1724:	1809883a 	mov	r4,r3
    1728:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40+8, 3);
    172c:	d0e00017 	ldw	r3,-32768(gp)
    1730:	008000c4 	movi	r2,3
    1734:	d8800115 	stw	r2,4(sp)
    1738:	00bff804 	movi	r2,-32
    173c:	d8800015 	stw	r2,0(sp)
    1740:	01fffe04 	movi	r7,-8
    1744:	01800404 	movi	r6,16
    1748:	01400204 	movi	r5,8
    174c:	1809883a 	mov	r4,r3
    1750:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, 0, -40, 6);
    1754:	d0e00017 	ldw	r3,-32768(gp)
    1758:	00800184 	movi	r2,6
    175c:	d8800115 	stw	r2,4(sp)
    1760:	00bff604 	movi	r2,-40
    1764:	d8800015 	stw	r2,0(sp)
    1768:	000f883a 	mov	r7,zero
    176c:	01800404 	movi	r6,16
    1770:	01400204 	movi	r5,8
    1774:	1809883a 	mov	r4,r3
    1778:	00012a80 	call	12a8 <draw_cube>


		memcpy(frame1, frame2, sizeof(frame1->D1));
    177c:	01800174 	movhi	r6,5
    1780:	31ac0004 	addi	r6,r6,-20480
    1784:	e17ffa17 	ldw	r5,-24(fp)
    1788:	e13ff917 	ldw	r4,-28(fp)
    178c:	00074880 	call	7488 <memcpy>


		printf("Render ticks %d\n", clock() - start_time);
    1790:	0006c080 	call	6c08 <clock>
    1794:	1007883a 	mov	r3,r2
    1798:	e0bffc17 	ldw	r2,-16(fp)
    179c:	1885c83a 	sub	r2,r3,r2
    17a0:	100b883a 	mov	r5,r2
    17a4:	01000074 	movhi	r4,1
    17a8:	21143b04 	addi	r4,r4,20716
    17ac:	00076000 	call	7600 <printf>
		start_time = clock();
    17b0:	0006c080 	call	6c08 <clock>
    17b4:	e0bffc15 	stw	r2,-16(fp)
		//usleep(500000);
		//printf("swaping");
		//swap_buffers();

		loop_keyboard(&keycode);
    17b8:	e0bfff04 	addi	r2,fp,-4
    17bc:	1009883a 	mov	r4,r2
    17c0:	00004300 	call	430 <loop_keyboard>
		if(keycode == KEY_S) {
    17c4:	e0bfff17 	ldw	r2,-4(fp)
    17c8:	10800598 	cmpnei	r2,r2,22
    17cc:	1000061e 	bne	r2,zero,17e8 <main+0x37c>
			gpu->cam_pos.z += 1;
    17d0:	d0a00017 	ldw	r2,-32768(gp)
    17d4:	d0e00017 	ldw	r3,-32768(gp)
    17d8:	18c01517 	ldw	r3,84(r3)
    17dc:	18c00044 	addi	r3,r3,1
    17e0:	10c01515 	stw	r3,84(r2)
    17e4:	00000806 	br	1808 <main+0x39c>
		} else if (keycode == KEY_W) {
    17e8:	e0bfff17 	ldw	r2,-4(fp)
    17ec:	10800698 	cmpnei	r2,r2,26
    17f0:	1000051e 	bne	r2,zero,1808 <main+0x39c>
			gpu->cam_pos.z -= 1;
    17f4:	d0a00017 	ldw	r2,-32768(gp)
    17f8:	d0e00017 	ldw	r3,-32768(gp)
    17fc:	18c01517 	ldw	r3,84(r3)
    1800:	18ffffc4 	addi	r3,r3,-1
    1804:	10c01515 	stw	r3,84(r2)
		}
		if(keycode == KEY_A) {
    1808:	e0bfff17 	ldw	r2,-4(fp)
    180c:	10800118 	cmpnei	r2,r2,4
    1810:	10000c1e 	bne	r2,zero,1844 <main+0x3d8>
			//gpu->cam_pos.y += 1;
			theta += 0.01;
    1814:	0191ebb4 	movhi	r6,18350
    1818:	31851ec4 	addi	r6,r6,5243
    181c:	01cfe134 	movhi	r7,16260
    1820:	39deb844 	addi	r7,r7,31457
    1824:	e13ff317 	ldw	r4,-52(fp)
    1828:	e17ff417 	ldw	r5,-48(fp)
    182c:	0004ed00 	call	4ed0 <__adddf3>
    1830:	1009883a 	mov	r4,r2
    1834:	180b883a 	mov	r5,r3
    1838:	e13ff315 	stw	r4,-52(fp)
    183c:	e17ff415 	stw	r5,-48(fp)
    1840:	00000e06 	br	187c <main+0x410>
		} else if(keycode == KEY_D) {
    1844:	e0bfff17 	ldw	r2,-4(fp)
    1848:	108001d8 	cmpnei	r2,r2,7
    184c:	10000b1e 	bne	r2,zero,187c <main+0x410>
			theta -= 0.01;
    1850:	0191ebb4 	movhi	r6,18350
    1854:	31851ec4 	addi	r6,r6,5243
    1858:	01cfe134 	movhi	r7,16260
    185c:	39deb844 	addi	r7,r7,31457
    1860:	e13ff317 	ldw	r4,-52(fp)
    1864:	e17ff417 	ldw	r5,-48(fp)
    1868:	000614c0 	call	614c <__subdf3>
    186c:	1009883a 	mov	r4,r2
    1870:	180b883a 	mov	r5,r3
    1874:	e13ff315 	stw	r4,-52(fp)
    1878:	e17ff415 	stw	r5,-48(fp)
			//gpu->cam_pos.y -= 1;
			//printf("moving %d", gpu->cam_pos.y);
		}

		int s = (int)(sin(theta) * (1<<8));
    187c:	e13ff317 	ldw	r4,-52(fp)
    1880:	e17ff417 	ldw	r5,-48(fp)
    1884:	0002bd80 	call	2bd8 <sin>
    1888:	1011883a 	mov	r8,r2
    188c:	1813883a 	mov	r9,r3
    1890:	000d883a 	mov	r6,zero
    1894:	01d01c34 	movhi	r7,16496
    1898:	4009883a 	mov	r4,r8
    189c:	480b883a 	mov	r5,r9
    18a0:	00058e00 	call	58e0 <__muldf3>
    18a4:	1009883a 	mov	r4,r2
    18a8:	180b883a 	mov	r5,r3
    18ac:	2005883a 	mov	r2,r4
    18b0:	2807883a 	mov	r3,r5
    18b4:	1009883a 	mov	r4,r2
    18b8:	180b883a 	mov	r5,r3
    18bc:	0006a480 	call	6a48 <__fixdfsi>
    18c0:	e0bffd15 	stw	r2,-12(fp)
		int c = (int)(cos(theta) * (1<<8));
    18c4:	e13ff317 	ldw	r4,-52(fp)
    18c8:	e17ff417 	ldw	r5,-48(fp)
    18cc:	0002aec0 	call	2aec <cos>
    18d0:	1011883a 	mov	r8,r2
    18d4:	1813883a 	mov	r9,r3
    18d8:	000d883a 	mov	r6,zero
    18dc:	01d01c34 	movhi	r7,16496
    18e0:	4009883a 	mov	r4,r8
    18e4:	480b883a 	mov	r5,r9
    18e8:	00058e00 	call	58e0 <__muldf3>
    18ec:	1009883a 	mov	r4,r2
    18f0:	180b883a 	mov	r5,r3
    18f4:	2005883a 	mov	r2,r4
    18f8:	2807883a 	mov	r3,r5
    18fc:	1009883a 	mov	r4,r2
    1900:	180b883a 	mov	r5,r3
    1904:	0006a480 	call	6a48 <__fixdfsi>
    1908:	e0bffe15 	stw	r2,-8(fp)

		gpu->cam_x_axis.x = c;
    190c:	d0a00017 	ldw	r2,-32768(gp)
    1910:	e0fffe17 	ldw	r3,-8(fp)
    1914:	10c00a15 	stw	r3,40(r2)
		gpu->cam_x_axis.y = 0;
    1918:	d0a00017 	ldw	r2,-32768(gp)
    191c:	10000b15 	stw	zero,44(r2)
		gpu->cam_x_axis.z = -s;
    1920:	d0a00017 	ldw	r2,-32768(gp)
    1924:	e0fffd17 	ldw	r3,-12(fp)
    1928:	00c7c83a 	sub	r3,zero,r3
    192c:	10c00c15 	stw	r3,48(r2)

		gpu->cam_y_axis.x = 0;
    1930:	d0a00017 	ldw	r2,-32768(gp)
    1934:	10000d15 	stw	zero,52(r2)
		gpu->cam_y_axis.y = 1<<8;
    1938:	d0a00017 	ldw	r2,-32768(gp)
    193c:	00c04004 	movi	r3,256
    1940:	10c00e15 	stw	r3,56(r2)
		gpu->cam_y_axis.z = 0;
    1944:	d0a00017 	ldw	r2,-32768(gp)
    1948:	10000f15 	stw	zero,60(r2)

		gpu->cam_z_axis.x = s;
    194c:	d0a00017 	ldw	r2,-32768(gp)
    1950:	e0fffd17 	ldw	r3,-12(fp)
    1954:	10c01015 	stw	r3,64(r2)
		gpu->cam_z_axis.y = 0;
    1958:	d0a00017 	ldw	r2,-32768(gp)
    195c:	10001115 	stw	zero,68(r2)
		gpu->cam_z_axis.z = c;
    1960:	d0a00017 	ldw	r2,-32768(gp)
    1964:	e0fffe17 	ldw	r3,-8(fp)
    1968:	10c01215 	stw	r3,72(r2)

	}
    196c:	003ee806 	br	1510 <__alt_exception_stack_pointer+0xf8001510>

00001970 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1970:	defffc04 	addi	sp,sp,-16
    1974:	dfc00315 	stw	ra,12(sp)
    1978:	df000215 	stw	fp,8(sp)
    197c:	df000204 	addi	fp,sp,8
    1980:	2007883a 	mov	r3,r4
    1984:	2805883a 	mov	r2,r5
    1988:	e0fffe0d 	sth	r3,-8(fp)
    198c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1990:	e0bffe0b 	ldhu	r2,-8(fp)
    1994:	100b883a 	mov	r5,r2
    1998:	01000084 	movi	r4,2
    199c:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    19a0:	e0bfff0b 	ldhu	r2,-4(fp)
    19a4:	100b883a 	mov	r5,r2
    19a8:	0009883a 	mov	r4,zero
    19ac:	00003280 	call	328 <IO_write>
}
    19b0:	0001883a 	nop
    19b4:	e037883a 	mov	sp,fp
    19b8:	dfc00117 	ldw	ra,4(sp)
    19bc:	df000017 	ldw	fp,0(sp)
    19c0:	dec00204 	addi	sp,sp,8
    19c4:	f800283a 	ret

000019c8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    19c8:	defffd04 	addi	sp,sp,-12
    19cc:	dfc00215 	stw	ra,8(sp)
    19d0:	df000115 	stw	fp,4(sp)
    19d4:	df000104 	addi	fp,sp,4
    19d8:	2005883a 	mov	r2,r4
    19dc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    19e0:	e0bfff0b 	ldhu	r2,-4(fp)
    19e4:	100b883a 	mov	r5,r2
    19e8:	01000084 	movi	r4,2
    19ec:	00003280 	call	328 <IO_write>
	return IO_read(0);
    19f0:	0009883a 	mov	r4,zero
    19f4:	00003b00 	call	3b0 <IO_read>

}
    19f8:	e037883a 	mov	sp,fp
    19fc:	dfc00117 	ldw	ra,4(sp)
    1a00:	df000017 	ldw	fp,0(sp)
    1a04:	dec00204 	addi	sp,sp,8
    1a08:	f800283a 	ret

00001a0c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1a0c:	defffe04 	addi	sp,sp,-8
    1a10:	dfc00115 	stw	ra,4(sp)
    1a14:	df000015 	stw	fp,0(sp)
    1a18:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1a1c:	017e9414 	movui	r5,64080
    1a20:	01000044 	movi	r4,1
    1a24:	00003280 	call	328 <IO_write>
	usleep(100000);
    1a28:	010000b4 	movhi	r4,2
    1a2c:	2121a804 	addi	r4,r4,-31072
    1a30:	00125bc0 	call	125bc <usleep>
	printf("[USB INIT]:reset finished!\n");
    1a34:	01000074 	movhi	r4,1
    1a38:	21144004 	addi	r4,r4,20736
    1a3c:	00076fc0 	call	76fc <puts>

	usleep(500000);
    1a40:	01000234 	movhi	r4,8
    1a44:	21284804 	addi	r4,r4,-24288
    1a48:	00125bc0 	call	125bc <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1a4c:	01000074 	movhi	r4,1
    1a50:	21144704 	addi	r4,r4,20764
    1a54:	00076fc0 	call	76fc <puts>
	IO_read(HPI_MAILBOX);
    1a58:	01000044 	movi	r4,1
    1a5c:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1a60:	010000c4 	movi	r4,3
    1a64:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1a68:	01005104 	movi	r4,324
    1a6c:	00019c80 	call	19c8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1a70:	000b883a 	mov	r5,zero
    1a74:	01005104 	movi	r4,324
    1a78:	00019700 	call	1970 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1a7c:	01005204 	movi	r4,328
    1a80:	00019c80 	call	19c8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1a84:	000b883a 	mov	r5,zero
    1a88:	01005204 	movi	r4,328
    1a8c:	00019700 	call	1970 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1a90:	017fffd4 	movui	r5,65535
    1a94:	01302414 	movui	r4,49296
    1a98:	00019700 	call	1970 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1a9c:	017fffd4 	movui	r5,65535
    1aa0:	01302c14 	movui	r4,49328
    1aa4:	00019700 	call	1970 <UsbWrite>
}
    1aa8:	0001883a 	nop
    1aac:	e037883a 	mov	sp,fp
    1ab0:	dfc00117 	ldw	ra,4(sp)
    1ab4:	df000017 	ldw	fp,0(sp)
    1ab8:	dec00204 	addi	sp,sp,8
    1abc:	f800283a 	ret

00001ac0 <UsbSetAddress>:


void UsbSetAddress()
{
    1ac0:	defffe04 	addi	sp,sp,-8
    1ac4:	dfc00115 	stw	ra,4(sp)
    1ac8:	df000015 	stw	fp,0(sp)
    1acc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ad0:	01414004 	movi	r5,1280
    1ad4:	01000084 	movi	r4,2
    1ad8:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1adc:	01414304 	movi	r5,1292
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ae8:	01400204 	movi	r5,8
    1aec:	0009883a 	mov	r4,zero
    1af0:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1af4:	01403404 	movi	r5,208
    1af8:	0009883a 	mov	r4,zero
    1afc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1b00:	01400044 	movi	r5,1
    1b04:	0009883a 	mov	r4,zero
    1b08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b0c:	014004c4 	movi	r5,19
    1b10:	0009883a 	mov	r4,zero
    1b14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1b18:	01414504 	movi	r5,1300
    1b1c:	0009883a 	mov	r4,zero
    1b20:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1b24:	01414004 	movi	r5,1280
    1b28:	0009883a 	mov	r4,zero
    1b2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1b30:	01400084 	movi	r5,2
    1b34:	0009883a 	mov	r4,zero
    1b38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b3c:	000b883a 	mov	r5,zero
    1b40:	0009883a 	mov	r4,zero
    1b44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b48:	000b883a 	mov	r5,zero
    1b4c:	0009883a 	mov	r4,zero
    1b50:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1b54:	000b883a 	mov	r5,zero
    1b58:	0009883a 	mov	r4,zero
    1b5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1b60:	000b883a 	mov	r5,zero
    1b64:	0009883a 	mov	r4,zero
    1b68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1b6c:	01402404 	movi	r5,144
    1b70:	0009883a 	mov	r4,zero
    1b74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b78:	01401044 	movi	r5,65
    1b7c:	0009883a 	mov	r4,zero
    1b80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b84:	014004c4 	movi	r5,19
    1b88:	0009883a 	mov	r4,zero
    1b8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b90:	000b883a 	mov	r5,zero
    1b94:	0009883a 	mov	r4,zero
    1b98:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b9c:	01414004 	movi	r5,1280
    1ba0:	01006c04 	movi	r4,432
    1ba4:	00019700 	call	1970 <UsbWrite>
}
    1ba8:	0001883a 	nop
    1bac:	e037883a 	mov	sp,fp
    1bb0:	dfc00117 	ldw	ra,4(sp)
    1bb4:	df000017 	ldw	fp,0(sp)
    1bb8:	dec00204 	addi	sp,sp,8
    1bbc:	f800283a 	ret

00001bc0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1bc0:	defffe04 	addi	sp,sp,-8
    1bc4:	dfc00115 	stw	ra,4(sp)
    1bc8:	df000015 	stw	fp,0(sp)
    1bcc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1bd0:	01414004 	movi	r5,1280
    1bd4:	01000084 	movi	r4,2
    1bd8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1bdc:	01414304 	movi	r5,1292
    1be0:	0009883a 	mov	r4,zero
    1be4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1be8:	01400204 	movi	r5,8
    1bec:	0009883a 	mov	r4,zero
    1bf0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1bf4:	0140b404 	movi	r5,720
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c00:	01400044 	movi	r5,1
    1c04:	0009883a 	mov	r4,zero
    1c08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c0c:	014004c4 	movi	r5,19
    1c10:	0009883a 	mov	r4,zero
    1c14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c18:	01414504 	movi	r5,1300
    1c1c:	0009883a 	mov	r4,zero
    1c20:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1c24:	0141a004 	movi	r5,1664
    1c28:	0009883a 	mov	r4,zero
    1c2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1c30:	01404004 	movi	r5,256
    1c34:	0009883a 	mov	r4,zero
    1c38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c3c:	000b883a 	mov	r5,zero
    1c40:	0009883a 	mov	r4,zero
    1c44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1c48:	01400204 	movi	r5,8
    1c4c:	0009883a 	mov	r4,zero
    1c50:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1c54:	01414b04 	movi	r5,1324
    1c58:	0009883a 	mov	r4,zero
    1c5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1c60:	01400204 	movi	r5,8
    1c64:	0009883a 	mov	r4,zero
    1c68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1c6c:	0140a404 	movi	r5,656
    1c70:	0009883a 	mov	r4,zero
    1c74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1c78:	01401044 	movi	r5,65
    1c7c:	0009883a 	mov	r4,zero
    1c80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c84:	014004c4 	movi	r5,19
    1c88:	0009883a 	mov	r4,zero
    1c8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1c90:	01414804 	movi	r5,1312
    1c94:	0009883a 	mov	r4,zero
    1c98:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1c9c:	000b883a 	mov	r5,zero
    1ca0:	0009883a 	mov	r4,zero
    1ca4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1ca8:	000b883a 	mov	r5,zero
    1cac:	0009883a 	mov	r4,zero
    1cb0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1cb4:	01408404 	movi	r5,528
    1cb8:	0009883a 	mov	r4,zero
    1cbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1cc0:	01401044 	movi	r5,65
    1cc4:	0009883a 	mov	r4,zero
    1cc8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ccc:	014004c4 	movi	r5,19
    1cd0:	0009883a 	mov	r4,zero
    1cd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cd8:	000b883a 	mov	r5,zero
    1cdc:	0009883a 	mov	r4,zero
    1ce0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ce4:	01414004 	movi	r5,1280
    1ce8:	01006c04 	movi	r4,432
    1cec:	00019700 	call	1970 <UsbWrite>
}
    1cf0:	0001883a 	nop
    1cf4:	e037883a 	mov	sp,fp
    1cf8:	dfc00117 	ldw	ra,4(sp)
    1cfc:	df000017 	ldw	fp,0(sp)
    1d00:	dec00204 	addi	sp,sp,8
    1d04:	f800283a 	ret

00001d08 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1d08:	defffe04 	addi	sp,sp,-8
    1d0c:	dfc00115 	stw	ra,4(sp)
    1d10:	df000015 	stw	fp,0(sp)
    1d14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d18:	01414004 	movi	r5,1280
    1d1c:	01000084 	movi	r4,2
    1d20:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d24:	01414304 	movi	r5,1292
    1d28:	0009883a 	mov	r4,zero
    1d2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d30:	01400204 	movi	r5,8
    1d34:	0009883a 	mov	r4,zero
    1d38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d3c:	0140b404 	movi	r5,720
    1d40:	0009883a 	mov	r4,zero
    1d44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d48:	01400044 	movi	r5,1
    1d4c:	0009883a 	mov	r4,zero
    1d50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d54:	014004c4 	movi	r5,19
    1d58:	0009883a 	mov	r4,zero
    1d5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d60:	01414504 	movi	r5,1300
    1d64:	0009883a 	mov	r4,zero
    1d68:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1d6c:	0141a004 	movi	r5,1664
    1d70:	0009883a 	mov	r4,zero
    1d74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1d78:	01404004 	movi	r5,256
    1d7c:	0009883a 	mov	r4,zero
    1d80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1d84:	000b883a 	mov	r5,zero
    1d88:	0009883a 	mov	r4,zero
    1d8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1d90:	01400484 	movi	r5,18
    1d94:	0009883a 	mov	r4,zero
    1d98:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d9c:	01415104 	movi	r5,1348
    1da0:	0009883a 	mov	r4,zero
    1da4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1da8:	01400204 	movi	r5,8
    1dac:	0009883a 	mov	r4,zero
    1db0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1db4:	0140a404 	movi	r5,656
    1db8:	0009883a 	mov	r4,zero
    1dbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1dc0:	01401044 	movi	r5,65
    1dc4:	0009883a 	mov	r4,zero
    1dc8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1dcc:	014004c4 	movi	r5,19
    1dd0:	0009883a 	mov	r4,zero
    1dd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1dd8:	01414804 	movi	r5,1312
    1ddc:	0009883a 	mov	r4,zero
    1de0:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1de4:	01415304 	movi	r5,1356
    1de8:	0009883a 	mov	r4,zero
    1dec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1df0:	01400204 	movi	r5,8
    1df4:	0009883a 	mov	r4,zero
    1df8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1dfc:	0140a404 	movi	r5,656
    1e00:	0009883a 	mov	r4,zero
    1e04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1e08:	01400044 	movi	r5,1
    1e0c:	0009883a 	mov	r4,zero
    1e10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e14:	014004c4 	movi	r5,19
    1e18:	0009883a 	mov	r4,zero
    1e1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1e20:	01414b04 	movi	r5,1324
    1e24:	0009883a 	mov	r4,zero
    1e28:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1e2c:	01415504 	movi	r5,1364
    1e30:	0009883a 	mov	r4,zero
    1e34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1e38:	01400084 	movi	r5,2
    1e3c:	0009883a 	mov	r4,zero
    1e40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1e44:	0140a404 	movi	r5,656
    1e48:	0009883a 	mov	r4,zero
    1e4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1e50:	01401044 	movi	r5,65
    1e54:	0009883a 	mov	r4,zero
    1e58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1e5c:	014004c4 	movi	r5,19
    1e60:	0009883a 	mov	r4,zero
    1e64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1e68:	01414e04 	movi	r5,1336
    1e6c:	0009883a 	mov	r4,zero
    1e70:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1e74:	000b883a 	mov	r5,zero
    1e78:	0009883a 	mov	r4,zero
    1e7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1e80:	000b883a 	mov	r5,zero
    1e84:	0009883a 	mov	r4,zero
    1e88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1e8c:	01408404 	movi	r5,528
    1e90:	0009883a 	mov	r4,zero
    1e94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1e98:	01401044 	movi	r5,65
    1e9c:	0009883a 	mov	r4,zero
    1ea0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1ea4:	014004c4 	movi	r5,19
    1ea8:	0009883a 	mov	r4,zero
    1eac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1eb0:	000b883a 	mov	r5,zero
    1eb4:	0009883a 	mov	r4,zero
    1eb8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ebc:	01414004 	movi	r5,1280
    1ec0:	01006c04 	movi	r4,432
    1ec4:	00019700 	call	1970 <UsbWrite>
}
    1ec8:	0001883a 	nop
    1ecc:	e037883a 	mov	sp,fp
    1ed0:	dfc00117 	ldw	ra,4(sp)
    1ed4:	df000017 	ldw	fp,0(sp)
    1ed8:	dec00204 	addi	sp,sp,8
    1edc:	f800283a 	ret

00001ee0 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1ee0:	defffe04 	addi	sp,sp,-8
    1ee4:	dfc00115 	stw	ra,4(sp)
    1ee8:	df000015 	stw	fp,0(sp)
    1eec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ef0:	01414004 	movi	r5,1280
    1ef4:	01000084 	movi	r4,2
    1ef8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1efc:	01414304 	movi	r5,1292
    1f00:	0009883a 	mov	r4,zero
    1f04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1f08:	01400204 	movi	r5,8
    1f0c:	0009883a 	mov	r4,zero
    1f10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1f14:	0140b404 	movi	r5,720
    1f18:	0009883a 	mov	r4,zero
    1f1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f20:	01400044 	movi	r5,1
    1f24:	0009883a 	mov	r4,zero
    1f28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f2c:	014004c4 	movi	r5,19
    1f30:	0009883a 	mov	r4,zero
    1f34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f38:	01414504 	movi	r5,1300
    1f3c:	0009883a 	mov	r4,zero
    1f40:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1f44:	0141a004 	movi	r5,1664
    1f48:	0009883a 	mov	r4,zero
    1f4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1f50:	01408004 	movi	r5,512
    1f54:	0009883a 	mov	r4,zero
    1f58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f5c:	000b883a 	mov	r5,zero
    1f60:	0009883a 	mov	r4,zero
    1f64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1f68:	01400244 	movi	r5,9
    1f6c:	0009883a 	mov	r4,zero
    1f70:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1f74:	01415104 	movi	r5,1348
    1f78:	0009883a 	mov	r4,zero
    1f7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f80:	01400204 	movi	r5,8
    1f84:	0009883a 	mov	r4,zero
    1f88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f8c:	0140a404 	movi	r5,656
    1f90:	0009883a 	mov	r4,zero
    1f94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f98:	01401044 	movi	r5,65
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1fa4:	014004c4 	movi	r5,19
    1fa8:	0009883a 	mov	r4,zero
    1fac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1fb0:	01414804 	movi	r5,1312
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1fbc:	01415304 	movi	r5,1356
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1fc8:	01400044 	movi	r5,1
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fd4:	0140a404 	movi	r5,656
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fe0:	01400044 	movi	r5,1
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fec:	014004c4 	movi	r5,19
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ff8:	01414b04 	movi	r5,1324
    1ffc:	0009883a 	mov	r4,zero
    2000:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2004:	000b883a 	mov	r5,zero
    2008:	0009883a 	mov	r4,zero
    200c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2010:	000b883a 	mov	r5,zero
    2014:	0009883a 	mov	r4,zero
    2018:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    201c:	01408404 	movi	r5,528
    2020:	0009883a 	mov	r4,zero
    2024:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2028:	01401044 	movi	r5,65
    202c:	0009883a 	mov	r4,zero
    2030:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2034:	014004c4 	movi	r5,19
    2038:	0009883a 	mov	r4,zero
    203c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2040:	000b883a 	mov	r5,zero
    2044:	0009883a 	mov	r4,zero
    2048:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    204c:	01414004 	movi	r5,1280
    2050:	01006c04 	movi	r4,432
    2054:	00019700 	call	1970 <UsbWrite>
}
    2058:	0001883a 	nop
    205c:	e037883a 	mov	sp,fp
    2060:	dfc00117 	ldw	ra,4(sp)
    2064:	df000017 	ldw	fp,0(sp)
    2068:	dec00204 	addi	sp,sp,8
    206c:	f800283a 	ret

00002070 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    2070:	defffe04 	addi	sp,sp,-8
    2074:	dfc00115 	stw	ra,4(sp)
    2078:	df000015 	stw	fp,0(sp)
    207c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2080:	01414004 	movi	r5,1280
    2084:	01000084 	movi	r4,2
    2088:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    208c:	01414304 	movi	r5,1292
    2090:	0009883a 	mov	r4,zero
    2094:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2098:	01400204 	movi	r5,8
    209c:	0009883a 	mov	r4,zero
    20a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    20a4:	0140b404 	movi	r5,720
    20a8:	0009883a 	mov	r4,zero
    20ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    20b0:	01400044 	movi	r5,1
    20b4:	0009883a 	mov	r4,zero
    20b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20bc:	014004c4 	movi	r5,19
    20c0:	0009883a 	mov	r4,zero
    20c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    20c8:	01414504 	movi	r5,1300
    20cc:	0009883a 	mov	r4,zero
    20d0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    20d4:	0141a004 	movi	r5,1664
    20d8:	0009883a 	mov	r4,zero
    20dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    20e0:	01408004 	movi	r5,512
    20e4:	0009883a 	mov	r4,zero
    20e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    20ec:	000b883a 	mov	r5,zero
    20f0:	0009883a 	mov	r4,zero
    20f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    20f8:	01403fc4 	movi	r5,255
    20fc:	0009883a 	mov	r4,zero
    2100:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2104:	01415704 	movi	r5,1372
    2108:	0009883a 	mov	r4,zero
    210c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2110:	01400204 	movi	r5,8
    2114:	0009883a 	mov	r4,zero
    2118:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    211c:	0140a404 	movi	r5,656
    2120:	0009883a 	mov	r4,zero
    2124:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2128:	01401044 	movi	r5,65
    212c:	0009883a 	mov	r4,zero
    2130:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2134:	014004c4 	movi	r5,19
    2138:	0009883a 	mov	r4,zero
    213c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2140:	01414804 	movi	r5,1312
    2144:	0009883a 	mov	r4,zero
    2148:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    214c:	01415904 	movi	r5,1380
    2150:	0009883a 	mov	r4,zero
    2154:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2158:	01400204 	movi	r5,8
    215c:	0009883a 	mov	r4,zero
    2160:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2164:	0140a404 	movi	r5,656
    2168:	0009883a 	mov	r4,zero
    216c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2170:	01400044 	movi	r5,1
    2174:	0009883a 	mov	r4,zero
    2178:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    217c:	014004c4 	movi	r5,19
    2180:	0009883a 	mov	r4,zero
    2184:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2188:	01414b04 	movi	r5,1324
    218c:	0009883a 	mov	r4,zero
    2190:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2194:	01415b04 	movi	r5,1388
    2198:	0009883a 	mov	r4,zero
    219c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    21a0:	01400204 	movi	r5,8
    21a4:	0009883a 	mov	r4,zero
    21a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    21ac:	0140a404 	movi	r5,656
    21b0:	0009883a 	mov	r4,zero
    21b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    21b8:	01401044 	movi	r5,65
    21bc:	0009883a 	mov	r4,zero
    21c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    21c4:	014004c4 	movi	r5,19
    21c8:	0009883a 	mov	r4,zero
    21cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    21d0:	01414e04 	movi	r5,1336
    21d4:	0009883a 	mov	r4,zero
    21d8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    21dc:	01415d04 	movi	r5,1396
    21e0:	0009883a 	mov	r4,zero
    21e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    21e8:	01400204 	movi	r5,8
    21ec:	0009883a 	mov	r4,zero
    21f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    21f4:	0140a404 	movi	r5,656
    21f8:	0009883a 	mov	r4,zero
    21fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2200:	01400044 	movi	r5,1
    2204:	0009883a 	mov	r4,zero
    2208:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    220c:	014004c4 	movi	r5,19
    2210:	0009883a 	mov	r4,zero
    2214:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2218:	01415104 	movi	r5,1348
    221c:	0009883a 	mov	r4,zero
    2220:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2224:	01415f04 	movi	r5,1404
    2228:	0009883a 	mov	r4,zero
    222c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2230:	01400084 	movi	r5,2
    2234:	0009883a 	mov	r4,zero
    2238:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    223c:	0140a404 	movi	r5,656
    2240:	0009883a 	mov	r4,zero
    2244:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2248:	01401044 	movi	r5,65
    224c:	0009883a 	mov	r4,zero
    2250:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2254:	014004c4 	movi	r5,19
    2258:	0009883a 	mov	r4,zero
    225c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2260:	01415404 	movi	r5,1360
    2264:	0009883a 	mov	r4,zero
    2268:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    226c:	000b883a 	mov	r5,zero
    2270:	0009883a 	mov	r4,zero
    2274:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2278:	000b883a 	mov	r5,zero
    227c:	0009883a 	mov	r4,zero
    2280:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2284:	01408404 	movi	r5,528
    2288:	0009883a 	mov	r4,zero
    228c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2290:	01401044 	movi	r5,65
    2294:	0009883a 	mov	r4,zero
    2298:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    229c:	014004c4 	movi	r5,19
    22a0:	0009883a 	mov	r4,zero
    22a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    22a8:	000b883a 	mov	r5,zero
    22ac:	0009883a 	mov	r4,zero
    22b0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22b4:	01414004 	movi	r5,1280
    22b8:	01006c04 	movi	r4,432
    22bc:	00019700 	call	1970 <UsbWrite>
}
    22c0:	0001883a 	nop
    22c4:	e037883a 	mov	sp,fp
    22c8:	dfc00117 	ldw	ra,4(sp)
    22cc:	df000017 	ldw	fp,0(sp)
    22d0:	dec00204 	addi	sp,sp,8
    22d4:	f800283a 	ret

000022d8 <UsbSetConfig>:

void UsbSetConfig()
{
    22d8:	defffe04 	addi	sp,sp,-8
    22dc:	dfc00115 	stw	ra,4(sp)
    22e0:	df000015 	stw	fp,0(sp)
    22e4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    22e8:	01414004 	movi	r5,1280
    22ec:	01000084 	movi	r4,2
    22f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    22f4:	01414304 	movi	r5,1292
    22f8:	0009883a 	mov	r4,zero
    22fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2300:	01400204 	movi	r5,8
    2304:	0009883a 	mov	r4,zero
    2308:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    230c:	0140b404 	movi	r5,720
    2310:	0009883a 	mov	r4,zero
    2314:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2318:	01400044 	movi	r5,1
    231c:	0009883a 	mov	r4,zero
    2320:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2324:	014004c4 	movi	r5,19
    2328:	0009883a 	mov	r4,zero
    232c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2330:	01414504 	movi	r5,1300
    2334:	0009883a 	mov	r4,zero
    2338:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    233c:	01424004 	movi	r5,2304
    2340:	0009883a 	mov	r4,zero
    2344:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2348:	01400044 	movi	r5,1
    234c:	0009883a 	mov	r4,zero
    2350:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2354:	000b883a 	mov	r5,zero
    2358:	0009883a 	mov	r4,zero
    235c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2360:	000b883a 	mov	r5,zero
    2364:	0009883a 	mov	r4,zero
    2368:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    236c:	000b883a 	mov	r5,zero
    2370:	0009883a 	mov	r4,zero
    2374:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2378:	000b883a 	mov	r5,zero
    237c:	0009883a 	mov	r4,zero
    2380:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2384:	0140a404 	movi	r5,656
    2388:	0009883a 	mov	r4,zero
    238c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2390:	01401044 	movi	r5,65
    2394:	0009883a 	mov	r4,zero
    2398:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    239c:	014004c4 	movi	r5,19
    23a0:	0009883a 	mov	r4,zero
    23a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    23a8:	000b883a 	mov	r5,zero
    23ac:	0009883a 	mov	r4,zero
    23b0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    23b4:	01414004 	movi	r5,1280
    23b8:	01006c04 	movi	r4,432
    23bc:	00019700 	call	1970 <UsbWrite>

}
    23c0:	0001883a 	nop
    23c4:	e037883a 	mov	sp,fp
    23c8:	dfc00117 	ldw	ra,4(sp)
    23cc:	df000017 	ldw	fp,0(sp)
    23d0:	dec00204 	addi	sp,sp,8
    23d4:	f800283a 	ret

000023d8 <UsbClassRequest>:

void UsbClassRequest()
{
    23d8:	defffe04 	addi	sp,sp,-8
    23dc:	dfc00115 	stw	ra,4(sp)
    23e0:	df000015 	stw	fp,0(sp)
    23e4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    23e8:	01414004 	movi	r5,1280
    23ec:	01000084 	movi	r4,2
    23f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    23f4:	01414304 	movi	r5,1292
    23f8:	0009883a 	mov	r4,zero
    23fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2400:	01400204 	movi	r5,8
    2404:	0009883a 	mov	r4,zero
    2408:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    240c:	0140b404 	movi	r5,720
    2410:	0009883a 	mov	r4,zero
    2414:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2418:	01400044 	movi	r5,1
    241c:	0009883a 	mov	r4,zero
    2420:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2424:	014004c4 	movi	r5,19
    2428:	0009883a 	mov	r4,zero
    242c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2430:	01414504 	movi	r5,1300
    2434:	0009883a 	mov	r4,zero
    2438:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    243c:	01428844 	movi	r5,2593
    2440:	0009883a 	mov	r4,zero
    2444:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2448:	000b883a 	mov	r5,zero
    244c:	0009883a 	mov	r4,zero
    2450:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2454:	000b883a 	mov	r5,zero
    2458:	0009883a 	mov	r4,zero
    245c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2460:	000b883a 	mov	r5,zero
    2464:	0009883a 	mov	r4,zero
    2468:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    246c:	000b883a 	mov	r5,zero
    2470:	0009883a 	mov	r4,zero
    2474:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2478:	000b883a 	mov	r5,zero
    247c:	0009883a 	mov	r4,zero
    2480:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2484:	0140a404 	movi	r5,656
    2488:	0009883a 	mov	r4,zero
    248c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2490:	01401044 	movi	r5,65
    2494:	0009883a 	mov	r4,zero
    2498:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    249c:	014004c4 	movi	r5,19
    24a0:	0009883a 	mov	r4,zero
    24a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24a8:	000b883a 	mov	r5,zero
    24ac:	0009883a 	mov	r4,zero
    24b0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    24b4:	01414004 	movi	r5,1280
    24b8:	01006c04 	movi	r4,432
    24bc:	00019700 	call	1970 <UsbWrite>
}
    24c0:	0001883a 	nop
    24c4:	e037883a 	mov	sp,fp
    24c8:	dfc00117 	ldw	ra,4(sp)
    24cc:	df000017 	ldw	fp,0(sp)
    24d0:	dec00204 	addi	sp,sp,8
    24d4:	f800283a 	ret

000024d8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    24d8:	defffe04 	addi	sp,sp,-8
    24dc:	dfc00115 	stw	ra,4(sp)
    24e0:	df000015 	stw	fp,0(sp)
    24e4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    24e8:	01414004 	movi	r5,1280
    24ec:	01000084 	movi	r4,2
    24f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    24f4:	01414304 	movi	r5,1292
    24f8:	0009883a 	mov	r4,zero
    24fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2500:	01400204 	movi	r5,8
    2504:	0009883a 	mov	r4,zero
    2508:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    250c:	0140b404 	movi	r5,720
    2510:	0009883a 	mov	r4,zero
    2514:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2518:	01400044 	movi	r5,1
    251c:	0009883a 	mov	r4,zero
    2520:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2524:	014004c4 	movi	r5,19
    2528:	0009883a 	mov	r4,zero
    252c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2530:	01414504 	movi	r5,1300
    2534:	0009883a 	mov	r4,zero
    2538:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    253c:	0141a044 	movi	r5,1665
    2540:	0009883a 	mov	r4,zero
    2544:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2548:	01484004 	movi	r5,8448
    254c:	0009883a 	mov	r4,zero
    2550:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2554:	000b883a 	mov	r5,zero
    2558:	0009883a 	mov	r4,zero
    255c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2560:	01401ec4 	movi	r5,123
    2564:	0009883a 	mov	r4,zero
    2568:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    256c:	01415104 	movi	r5,1348
    2570:	0009883a 	mov	r4,zero
    2574:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2578:	01400204 	movi	r5,8
    257c:	0009883a 	mov	r4,zero
    2580:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2584:	0140a404 	movi	r5,656
    2588:	0009883a 	mov	r4,zero
    258c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2590:	01401044 	movi	r5,65
    2594:	0009883a 	mov	r4,zero
    2598:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    259c:	014004c4 	movi	r5,19
    25a0:	0009883a 	mov	r4,zero
    25a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    25a8:	01414804 	movi	r5,1312
    25ac:	0009883a 	mov	r4,zero
    25b0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    25b4:	000b883a 	mov	r5,zero
    25b8:	0009883a 	mov	r4,zero
    25bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    25c0:	000b883a 	mov	r5,zero
    25c4:	0009883a 	mov	r4,zero
    25c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    25cc:	01408404 	movi	r5,528
    25d0:	0009883a 	mov	r4,zero
    25d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    25d8:	01401044 	movi	r5,65
    25dc:	0009883a 	mov	r4,zero
    25e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    25e4:	014004c4 	movi	r5,19
    25e8:	0009883a 	mov	r4,zero
    25ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    25f0:	000b883a 	mov	r5,zero
    25f4:	0009883a 	mov	r4,zero
    25f8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    25fc:	01414004 	movi	r5,1280
    2600:	01006c04 	movi	r4,432
    2604:	00019700 	call	1970 <UsbWrite>

}
    2608:	0001883a 	nop
    260c:	e037883a 	mov	sp,fp
    2610:	dfc00117 	ldw	ra,4(sp)
    2614:	df000017 	ldw	fp,0(sp)
    2618:	dec00204 	addi	sp,sp,8
    261c:	f800283a 	ret

00002620 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2620:	defffe04 	addi	sp,sp,-8
    2624:	dfc00115 	stw	ra,4(sp)
    2628:	df000015 	stw	fp,0(sp)
    262c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2630:	01414004 	movi	r5,1280
    2634:	01000084 	movi	r4,2
    2638:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    263c:	01414304 	movi	r5,1292
    2640:	0009883a 	mov	r4,zero
    2644:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2648:	01400204 	movi	r5,8
    264c:	0009883a 	mov	r4,zero
    2650:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2654:	0140b404 	movi	r5,720
    2658:	0009883a 	mov	r4,zero
    265c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2660:	01400044 	movi	r5,1
    2664:	0009883a 	mov	r4,zero
    2668:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    266c:	014004c4 	movi	r5,19
    2670:	0009883a 	mov	r4,zero
    2674:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2678:	01414504 	movi	r5,1300
    267c:	0009883a 	mov	r4,zero
    2680:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2684:	0141a044 	movi	r5,1665
    2688:	0009883a 	mov	r4,zero
    268c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2690:	01488004 	movi	r5,8704
    2694:	0009883a 	mov	r4,zero
    2698:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    269c:	000b883a 	mov	r5,zero
    26a0:	0009883a 	mov	r4,zero
    26a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    26a8:	01401ec4 	movi	r5,123
    26ac:	0009883a 	mov	r4,zero
    26b0:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    26b4:	01416004 	movi	r5,1408
    26b8:	0009883a 	mov	r4,zero
    26bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    26c0:	01400204 	movi	r5,8
    26c4:	0009883a 	mov	r4,zero
    26c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    26cc:	0140a404 	movi	r5,656
    26d0:	0009883a 	mov	r4,zero
    26d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    26d8:	01401044 	movi	r5,65
    26dc:	0009883a 	mov	r4,zero
    26e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    26e4:	014004c4 	movi	r5,19
    26e8:	0009883a 	mov	r4,zero
    26ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    26f0:	01414804 	movi	r5,1312
    26f4:	0009883a 	mov	r4,zero
    26f8:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    26fc:	01416204 	movi	r5,1416
    2700:	0009883a 	mov	r4,zero
    2704:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2708:	01400204 	movi	r5,8
    270c:	0009883a 	mov	r4,zero
    2710:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2714:	0140a404 	movi	r5,656
    2718:	0009883a 	mov	r4,zero
    271c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2720:	01400044 	movi	r5,1
    2724:	0009883a 	mov	r4,zero
    2728:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    272c:	014004c4 	movi	r5,19
    2730:	0009883a 	mov	r4,zero
    2734:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2738:	01414b04 	movi	r5,1324
    273c:	0009883a 	mov	r4,zero
    2740:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2744:	01416404 	movi	r5,1424
    2748:	0009883a 	mov	r4,zero
    274c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2750:	01400204 	movi	r5,8
    2754:	0009883a 	mov	r4,zero
    2758:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    275c:	0140a404 	movi	r5,656
    2760:	0009883a 	mov	r4,zero
    2764:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2768:	01401044 	movi	r5,65
    276c:	0009883a 	mov	r4,zero
    2770:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2774:	014004c4 	movi	r5,19
    2778:	0009883a 	mov	r4,zero
    277c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2780:	01414e04 	movi	r5,1336
    2784:	0009883a 	mov	r4,zero
    2788:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    278c:	01416604 	movi	r5,1432
    2790:	0009883a 	mov	r4,zero
    2794:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2798:	01400204 	movi	r5,8
    279c:	0009883a 	mov	r4,zero
    27a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    27a4:	0140a404 	movi	r5,656
    27a8:	0009883a 	mov	r4,zero
    27ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    27b0:	01400044 	movi	r5,1
    27b4:	0009883a 	mov	r4,zero
    27b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    27bc:	014004c4 	movi	r5,19
    27c0:	0009883a 	mov	r4,zero
    27c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    27c8:	01415104 	movi	r5,1348
    27cc:	0009883a 	mov	r4,zero
    27d0:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    27d4:	01416804 	movi	r5,1440
    27d8:	0009883a 	mov	r4,zero
    27dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    27e0:	01400204 	movi	r5,8
    27e4:	0009883a 	mov	r4,zero
    27e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    27ec:	0140a404 	movi	r5,656
    27f0:	0009883a 	mov	r4,zero
    27f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    27f8:	01401044 	movi	r5,65
    27fc:	0009883a 	mov	r4,zero
    2800:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2804:	014004c4 	movi	r5,19
    2808:	0009883a 	mov	r4,zero
    280c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2810:	01415404 	movi	r5,1360
    2814:	0009883a 	mov	r4,zero
    2818:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    281c:	01416a04 	movi	r5,1448
    2820:	0009883a 	mov	r4,zero
    2824:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2828:	01400204 	movi	r5,8
    282c:	0009883a 	mov	r4,zero
    2830:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2834:	0140a404 	movi	r5,656
    2838:	0009883a 	mov	r4,zero
    283c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2840:	01400044 	movi	r5,1
    2844:	0009883a 	mov	r4,zero
    2848:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    284c:	014004c4 	movi	r5,19
    2850:	0009883a 	mov	r4,zero
    2854:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2858:	01415704 	movi	r5,1372
    285c:	0009883a 	mov	r4,zero
    2860:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2864:	01416c04 	movi	r5,1456
    2868:	0009883a 	mov	r4,zero
    286c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2870:	01400204 	movi	r5,8
    2874:	0009883a 	mov	r4,zero
    2878:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    287c:	0140a404 	movi	r5,656
    2880:	0009883a 	mov	r4,zero
    2884:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2888:	01401044 	movi	r5,65
    288c:	0009883a 	mov	r4,zero
    2890:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2894:	014004c4 	movi	r5,19
    2898:	0009883a 	mov	r4,zero
    289c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    28a0:	01415a04 	movi	r5,1384
    28a4:	0009883a 	mov	r4,zero
    28a8:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    28ac:	01416e04 	movi	r5,1464
    28b0:	0009883a 	mov	r4,zero
    28b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    28b8:	014000c4 	movi	r5,3
    28bc:	0009883a 	mov	r4,zero
    28c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    28c4:	0140a404 	movi	r5,656
    28c8:	0009883a 	mov	r4,zero
    28cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    28d0:	01400044 	movi	r5,1
    28d4:	0009883a 	mov	r4,zero
    28d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    28dc:	014004c4 	movi	r5,19
    28e0:	0009883a 	mov	r4,zero
    28e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    28e8:	01415d04 	movi	r5,1396
    28ec:	0009883a 	mov	r4,zero
    28f0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    28f4:	000b883a 	mov	r5,zero
    28f8:	0009883a 	mov	r4,zero
    28fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2900:	000b883a 	mov	r5,zero
    2904:	0009883a 	mov	r4,zero
    2908:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    290c:	01408404 	movi	r5,528
    2910:	0009883a 	mov	r4,zero
    2914:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2918:	01401044 	movi	r5,65
    291c:	0009883a 	mov	r4,zero
    2920:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2924:	014004c4 	movi	r5,19
    2928:	0009883a 	mov	r4,zero
    292c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2930:	000b883a 	mov	r5,zero
    2934:	0009883a 	mov	r4,zero
    2938:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    293c:	01414004 	movi	r5,1280
    2940:	01006c04 	movi	r4,432
    2944:	00019700 	call	1970 <UsbWrite>

}
    2948:	0001883a 	nop
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2960:	defffd04 	addi	sp,sp,-12
    2964:	dfc00215 	stw	ra,8(sp)
    2968:	df000115 	stw	fp,4(sp)
    296c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2970:	01005104 	movi	r4,324
    2974:	00019c80 	call	19c8 <UsbRead>
    2978:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    297c:	000b883a 	mov	r5,zero
    2980:	01005104 	movi	r4,324
    2984:	00019700 	call	1970 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2988:	00000d06 	br	29c0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    298c:	e0bfff0b 	ldhu	r2,-4(fp)
    2990:	10000526 	beq	r2,zero,29a8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2994:	e0bfff0b 	ldhu	r2,-4(fp)
    2998:	100b883a 	mov	r5,r2
    299c:	01000074 	movhi	r4,1
    29a0:	21145004 	addi	r4,r4,20800
    29a4:	00076000 	call	7600 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    29a8:	01005104 	movi	r4,324
    29ac:	00019c80 	call	19c8 <UsbRead>
    29b0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    29b4:	000b883a 	mov	r5,zero
    29b8:	01005104 	movi	r4,324
    29bc:	00019700 	call	1970 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    29c0:	e0bfff0b 	ldhu	r2,-4(fp)
    29c4:	10840018 	cmpnei	r2,r2,4096
    29c8:	103ff01e 	bne	r2,zero,298c <__alt_exception_stack_pointer+0xf800298c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    29cc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    29d0:	e037883a 	mov	sp,fp
    29d4:	dfc00117 	ldw	ra,4(sp)
    29d8:	df000017 	ldw	fp,0(sp)
    29dc:	dec00204 	addi	sp,sp,8
    29e0:	f800283a 	ret

000029e4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    29e4:	defffd04 	addi	sp,sp,-12
    29e8:	dfc00215 	stw	ra,8(sp)
    29ec:	df000115 	stw	fp,4(sp)
    29f0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    29f4:	010000c4 	movi	r4,3
    29f8:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    29fc:	01005104 	movi	r4,324
    2a00:	00019c80 	call	19c8 <UsbRead>
    2a04:	10bfffcc 	andi	r2,r2,65535
    2a08:	10840018 	cmpnei	r2,r2,4096
    2a0c:	1000091e 	bne	r2,zero,2a34 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2a10:	000b883a 	mov	r5,zero
    2a14:	01005104 	movi	r4,324
    2a18:	00019700 	call	1970 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2a1c:	0001883a 	nop
    2a20:	010000c4 	movi	r4,3
    2a24:	00003b00 	call	3b0 <IO_read>
    2a28:	10bfffcc 	andi	r2,r2,65535
    2a2c:	1080040c 	andi	r2,r2,16
    2a30:	103ffb26 	beq	r2,zero,2a20 <__alt_exception_stack_pointer+0xf8002a20>
		{
		}
	}
	usleep(1000);
    2a34:	0100fa04 	movi	r4,1000
    2a38:	00125bc0 	call	125bc <usleep>
	IO_write(HPI_ADDR,0x0508);
    2a3c:	01414204 	movi	r5,1288
    2a40:	01000084 	movi	r4,2
    2a44:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2a48:	0009883a 	mov	r4,zero
    2a4c:	00003b00 	call	3b0 <IO_read>
    2a50:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2a54:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2a58:	e037883a 	mov	sp,fp
    2a5c:	dfc00117 	ldw	ra,4(sp)
    2a60:	df000017 	ldw	fp,0(sp)
    2a64:	dec00204 	addi	sp,sp,8
    2a68:	f800283a 	ret

00002a6c <UsbPrintMem>:


void UsbPrintMem()
{
    2a6c:	defffc04 	addi	sp,sp,-16
    2a70:	dfc00315 	stw	ra,12(sp)
    2a74:	df000215 	stw	fp,8(sp)
    2a78:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2a7c:	01414004 	movi	r5,1280
    2a80:	01000084 	movi	r4,2
    2a84:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2a88:	e03ffe15 	stw	zero,-8(fp)
    2a8c:	00000e06 	br	2ac8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2a90:	0009883a 	mov	r4,zero
    2a94:	00003b00 	call	3b0 <IO_read>
    2a98:	10bfffcc 	andi	r2,r2,65535
    2a9c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2aa0:	e0bffe17 	ldw	r2,-8(fp)
    2aa4:	10814004 	addi	r2,r2,1280
    2aa8:	e1bfff17 	ldw	r6,-4(fp)
    2aac:	100b883a 	mov	r5,r2
    2ab0:	01000074 	movhi	r4,1
    2ab4:	21145804 	addi	r4,r4,20832
    2ab8:	00076000 	call	7600 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2abc:	e0bffe17 	ldw	r2,-8(fp)
    2ac0:	10800084 	addi	r2,r2,2
    2ac4:	e0bffe15 	stw	r2,-8(fp)
    2ac8:	e0bffe17 	ldw	r2,-8(fp)
    2acc:	10803250 	cmplti	r2,r2,201
    2ad0:	103fef1e 	bne	r2,zero,2a90 <__alt_exception_stack_pointer+0xf8002a90>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2ad4:	0001883a 	nop
    2ad8:	e037883a 	mov	sp,fp
    2adc:	dfc00117 	ldw	ra,4(sp)
    2ae0:	df000017 	ldw	fp,0(sp)
    2ae4:	dec00204 	addi	sp,sp,8
    2ae8:	f800283a 	ret

00002aec <cos>:
    2aec:	00a00034 	movhi	r2,32768
    2af0:	defffa04 	addi	sp,sp,-24
    2af4:	10bfffc4 	addi	r2,r2,-1
    2af8:	00cffa74 	movhi	r3,16361
    2afc:	dfc00515 	stw	ra,20(sp)
    2b00:	2884703a 	and	r2,r5,r2
    2b04:	18c87ec4 	addi	r3,r3,8699
    2b08:	1880180e 	bge	r3,r2,2b6c <cos+0x80>
    2b0c:	00dffc34 	movhi	r3,32752
    2b10:	18ffffc4 	addi	r3,r3,-1
    2b14:	1880060e 	bge	r3,r2,2b30 <cos+0x44>
    2b18:	280f883a 	mov	r7,r5
    2b1c:	200d883a 	mov	r6,r4
    2b20:	000614c0 	call	614c <__subdf3>
    2b24:	dfc00517 	ldw	ra,20(sp)
    2b28:	dec00604 	addi	sp,sp,24
    2b2c:	f800283a 	ret
    2b30:	d9800104 	addi	r6,sp,4
    2b34:	0002cc80 	call	2cc8 <__ieee754_rem_pio2>
    2b38:	108000cc 	andi	r2,r2,3
    2b3c:	00c00044 	movi	r3,1
    2b40:	10c01726 	beq	r2,r3,2ba0 <cos+0xb4>
    2b44:	01000084 	movi	r4,2
    2b48:	11000e26 	beq	r2,r4,2b84 <cos+0x98>
    2b4c:	10001c26 	beq	r2,zero,2bc0 <cos+0xd4>
    2b50:	d9800317 	ldw	r6,12(sp)
    2b54:	d9c00417 	ldw	r7,16(sp)
    2b58:	d9000117 	ldw	r4,4(sp)
    2b5c:	d9400217 	ldw	r5,8(sp)
    2b60:	d8c00015 	stw	r3,0(sp)
    2b64:	00046700 	call	4670 <__kernel_sin>
    2b68:	003fee06 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2b6c:	000d883a 	mov	r6,zero
    2b70:	000f883a 	mov	r7,zero
    2b74:	00034340 	call	3434 <__kernel_cos>
    2b78:	dfc00517 	ldw	ra,20(sp)
    2b7c:	dec00604 	addi	sp,sp,24
    2b80:	f800283a 	ret
    2b84:	d9800317 	ldw	r6,12(sp)
    2b88:	d9c00417 	ldw	r7,16(sp)
    2b8c:	d9000117 	ldw	r4,4(sp)
    2b90:	d9400217 	ldw	r5,8(sp)
    2b94:	00034340 	call	3434 <__kernel_cos>
    2b98:	18e0003c 	xorhi	r3,r3,32768
    2b9c:	003fe106 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2ba0:	d9800317 	ldw	r6,12(sp)
    2ba4:	d9c00417 	ldw	r7,16(sp)
    2ba8:	d9000117 	ldw	r4,4(sp)
    2bac:	d9400217 	ldw	r5,8(sp)
    2bb0:	d8800015 	stw	r2,0(sp)
    2bb4:	00046700 	call	4670 <__kernel_sin>
    2bb8:	18e0003c 	xorhi	r3,r3,32768
    2bbc:	003fd906 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2bc0:	d9800317 	ldw	r6,12(sp)
    2bc4:	d9c00417 	ldw	r7,16(sp)
    2bc8:	d9000117 	ldw	r4,4(sp)
    2bcc:	d9400217 	ldw	r5,8(sp)
    2bd0:	00034340 	call	3434 <__kernel_cos>
    2bd4:	003fd306 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>

00002bd8 <sin>:
    2bd8:	00a00034 	movhi	r2,32768
    2bdc:	defffa04 	addi	sp,sp,-24
    2be0:	10bfffc4 	addi	r2,r2,-1
    2be4:	00cffa74 	movhi	r3,16361
    2be8:	dfc00515 	stw	ra,20(sp)
    2bec:	2884703a 	and	r2,r5,r2
    2bf0:	18c87ec4 	addi	r3,r3,8699
    2bf4:	1880180e 	bge	r3,r2,2c58 <sin+0x80>
    2bf8:	00dffc34 	movhi	r3,32752
    2bfc:	18ffffc4 	addi	r3,r3,-1
    2c00:	1880060e 	bge	r3,r2,2c1c <sin+0x44>
    2c04:	280f883a 	mov	r7,r5
    2c08:	200d883a 	mov	r6,r4
    2c0c:	000614c0 	call	614c <__subdf3>
    2c10:	dfc00517 	ldw	ra,20(sp)
    2c14:	dec00604 	addi	sp,sp,24
    2c18:	f800283a 	ret
    2c1c:	d9800104 	addi	r6,sp,4
    2c20:	0002cc80 	call	2cc8 <__ieee754_rem_pio2>
    2c24:	108000cc 	andi	r2,r2,3
    2c28:	00c00044 	movi	r3,1
    2c2c:	10c01926 	beq	r2,r3,2c94 <sin+0xbc>
    2c30:	01000084 	movi	r4,2
    2c34:	11000f26 	beq	r2,r4,2c74 <sin+0x9c>
    2c38:	10001c26 	beq	r2,zero,2cac <sin+0xd4>
    2c3c:	d9800317 	ldw	r6,12(sp)
    2c40:	d9c00417 	ldw	r7,16(sp)
    2c44:	d9000117 	ldw	r4,4(sp)
    2c48:	d9400217 	ldw	r5,8(sp)
    2c4c:	00034340 	call	3434 <__kernel_cos>
    2c50:	18e0003c 	xorhi	r3,r3,32768
    2c54:	003fee06 	br	2c10 <__alt_exception_stack_pointer+0xf8002c10>
    2c58:	d8000015 	stw	zero,0(sp)
    2c5c:	000d883a 	mov	r6,zero
    2c60:	000f883a 	mov	r7,zero
    2c64:	00046700 	call	4670 <__kernel_sin>
    2c68:	dfc00517 	ldw	ra,20(sp)
    2c6c:	dec00604 	addi	sp,sp,24
    2c70:	f800283a 	ret
    2c74:	d9800317 	ldw	r6,12(sp)
    2c78:	d9c00417 	ldw	r7,16(sp)
    2c7c:	d9000117 	ldw	r4,4(sp)
    2c80:	d9400217 	ldw	r5,8(sp)
    2c84:	d8c00015 	stw	r3,0(sp)
    2c88:	00046700 	call	4670 <__kernel_sin>
    2c8c:	18e0003c 	xorhi	r3,r3,32768
    2c90:	003fdf06 	br	2c10 <__alt_exception_stack_pointer+0xf8002c10>
    2c94:	d9800317 	ldw	r6,12(sp)
    2c98:	d9c00417 	ldw	r7,16(sp)
    2c9c:	d9000117 	ldw	r4,4(sp)
    2ca0:	d9400217 	ldw	r5,8(sp)
    2ca4:	00034340 	call	3434 <__kernel_cos>
    2ca8:	003fd906 	br	2c10 <__alt_exception_stack_pointer+0xf8002c10>
    2cac:	d9800317 	ldw	r6,12(sp)
    2cb0:	d9c00417 	ldw	r7,16(sp)
    2cb4:	d9000117 	ldw	r4,4(sp)
    2cb8:	d9400217 	ldw	r5,8(sp)
    2cbc:	d8c00015 	stw	r3,0(sp)
    2cc0:	00046700 	call	4670 <__kernel_sin>
    2cc4:	003fd206 	br	2c10 <__alt_exception_stack_pointer+0xf8002c10>

00002cc8 <__ieee754_rem_pio2>:
    2cc8:	02200034 	movhi	r8,32768
    2ccc:	deffea04 	addi	sp,sp,-88
    2cd0:	423fffc4 	addi	r8,r8,-1
    2cd4:	00cffa74 	movhi	r3,16361
    2cd8:	ddc01315 	stw	r23,76(sp)
    2cdc:	dc400d15 	stw	r17,52(sp)
    2ce0:	dfc01515 	stw	ra,84(sp)
    2ce4:	df001415 	stw	fp,80(sp)
    2ce8:	dd801215 	stw	r22,72(sp)
    2cec:	dd401115 	stw	r21,68(sp)
    2cf0:	dd001015 	stw	r20,64(sp)
    2cf4:	dcc00f15 	stw	r19,60(sp)
    2cf8:	dc800e15 	stw	r18,56(sp)
    2cfc:	dc000c15 	stw	r16,48(sp)
    2d00:	2a2e703a 	and	r23,r5,r8
    2d04:	18c87ec4 	addi	r3,r3,8699
    2d08:	2823883a 	mov	r17,r5
    2d0c:	1dc0790e 	bge	r3,r23,2ef4 <__ieee754_rem_pio2+0x22c>
    2d10:	009000f4 	movhi	r2,16387
    2d14:	10b65ec4 	addi	r2,r2,-9861
    2d18:	3021883a 	mov	r16,r6
    2d1c:	2027883a 	mov	r19,r4
    2d20:	15c02316 	blt	r2,r23,2db0 <__ieee754_rem_pio2+0xe8>
    2d24:	01cffe74 	movhi	r7,16377
    2d28:	39c87ec4 	addi	r7,r7,8699
    2d2c:	01951034 	movhi	r6,21568
    2d30:	01417a0e 	bge	zero,r5,331c <__ieee754_rem_pio2+0x654>
    2d34:	000614c0 	call	614c <__subdf3>
    2d38:	1025883a 	mov	r18,r2
    2d3c:	008ffe74 	movhi	r2,16377
    2d40:	10887ec4 	addi	r2,r2,8699
    2d44:	1823883a 	mov	r17,r3
    2d48:	b8808426 	beq	r23,r2,2f5c <__ieee754_rem_pio2+0x294>
    2d4c:	018698b4 	movhi	r6,6754
    2d50:	01cf7474 	movhi	r7,15825
    2d54:	3198cc44 	addi	r6,r6,25393
    2d58:	39ed1844 	addi	r7,r7,-19359
    2d5c:	9009883a 	mov	r4,r18
    2d60:	180b883a 	mov	r5,r3
    2d64:	000614c0 	call	614c <__subdf3>
    2d68:	100d883a 	mov	r6,r2
    2d6c:	180f883a 	mov	r7,r3
    2d70:	9009883a 	mov	r4,r18
    2d74:	880b883a 	mov	r5,r17
    2d78:	80800015 	stw	r2,0(r16)
    2d7c:	80c00115 	stw	r3,4(r16)
    2d80:	000614c0 	call	614c <__subdf3>
    2d84:	018698b4 	movhi	r6,6754
    2d88:	01cf7474 	movhi	r7,15825
    2d8c:	3198cc44 	addi	r6,r6,25393
    2d90:	39ed1844 	addi	r7,r7,-19359
    2d94:	1009883a 	mov	r4,r2
    2d98:	180b883a 	mov	r5,r3
    2d9c:	000614c0 	call	614c <__subdf3>
    2da0:	80800215 	stw	r2,8(r16)
    2da4:	80c00315 	stw	r3,12(r16)
    2da8:	00800044 	movi	r2,1
    2dac:	00005606 	br	2f08 <__ieee754_rem_pio2+0x240>
    2db0:	00904e74 	movhi	r2,16697
    2db4:	10887ec4 	addi	r2,r2,8699
    2db8:	15c0830e 	bge	r2,r23,2fc8 <__ieee754_rem_pio2+0x300>
    2dbc:	009ffc34 	movhi	r2,32752
    2dc0:	10bfffc4 	addi	r2,r2,-1
    2dc4:	15c05c16 	blt	r2,r23,2f38 <__ieee754_rem_pio2+0x270>
    2dc8:	b829d53a 	srai	r20,r23,20
    2dcc:	a53efa84 	addi	r20,r20,-1046
    2dd0:	a024953a 	slli	r18,r20,20
    2dd4:	bca5c83a 	sub	r18,r23,r18
    2dd8:	900b883a 	mov	r5,r18
    2ddc:	0006a480 	call	6a48 <__fixdfsi>
    2de0:	1009883a 	mov	r4,r2
    2de4:	0006ac80 	call	6ac8 <__floatsidf>
    2de8:	9809883a 	mov	r4,r19
    2dec:	900b883a 	mov	r5,r18
    2df0:	100d883a 	mov	r6,r2
    2df4:	180f883a 	mov	r7,r3
    2df8:	d8800215 	stw	r2,8(sp)
    2dfc:	d8c00315 	stw	r3,12(sp)
    2e00:	000614c0 	call	614c <__subdf3>
    2e04:	000d883a 	mov	r6,zero
    2e08:	01d05c34 	movhi	r7,16752
    2e0c:	1009883a 	mov	r4,r2
    2e10:	180b883a 	mov	r5,r3
    2e14:	00058e00 	call	58e0 <__muldf3>
    2e18:	180b883a 	mov	r5,r3
    2e1c:	1009883a 	mov	r4,r2
    2e20:	182b883a 	mov	r21,r3
    2e24:	102d883a 	mov	r22,r2
    2e28:	0006a480 	call	6a48 <__fixdfsi>
    2e2c:	1009883a 	mov	r4,r2
    2e30:	0006ac80 	call	6ac8 <__floatsidf>
    2e34:	100d883a 	mov	r6,r2
    2e38:	180f883a 	mov	r7,r3
    2e3c:	b009883a 	mov	r4,r22
    2e40:	a80b883a 	mov	r5,r21
    2e44:	1027883a 	mov	r19,r2
    2e48:	1825883a 	mov	r18,r3
    2e4c:	d8800415 	stw	r2,16(sp)
    2e50:	d8c00515 	stw	r3,20(sp)
    2e54:	000614c0 	call	614c <__subdf3>
    2e58:	000d883a 	mov	r6,zero
    2e5c:	01d05c34 	movhi	r7,16752
    2e60:	1009883a 	mov	r4,r2
    2e64:	180b883a 	mov	r5,r3
    2e68:	00058e00 	call	58e0 <__muldf3>
    2e6c:	000d883a 	mov	r6,zero
    2e70:	000f883a 	mov	r7,zero
    2e74:	1009883a 	mov	r4,r2
    2e78:	180b883a 	mov	r5,r3
    2e7c:	d8800615 	stw	r2,24(sp)
    2e80:	d8c00715 	stw	r3,28(sp)
    2e84:	000577c0 	call	577c <__eqdf2>
    2e88:	1001431e 	bne	r2,zero,3398 <__ieee754_rem_pio2+0x6d0>
    2e8c:	000f883a 	mov	r7,zero
    2e90:	000d883a 	mov	r6,zero
    2e94:	9809883a 	mov	r4,r19
    2e98:	900b883a 	mov	r5,r18
    2e9c:	000577c0 	call	577c <__eqdf2>
    2ea0:	100f003a 	cmpeq	r7,r2,zero
    2ea4:	00800084 	movi	r2,2
    2ea8:	11cfc83a 	sub	r7,r2,r7
    2eac:	00800084 	movi	r2,2
    2eb0:	d8800015 	stw	r2,0(sp)
    2eb4:	00800074 	movhi	r2,1
    2eb8:	10947d04 	addi	r2,r2,20980
    2ebc:	d8800115 	stw	r2,4(sp)
    2ec0:	a00d883a 	mov	r6,r20
    2ec4:	800b883a 	mov	r5,r16
    2ec8:	d9000204 	addi	r4,sp,8
    2ecc:	00038d80 	call	38d8 <__kernel_rem_pio2>
    2ed0:	88000d0e 	bge	r17,zero,2f08 <__ieee754_rem_pio2+0x240>
    2ed4:	81000117 	ldw	r4,4(r16)
    2ed8:	80c00317 	ldw	r3,12(r16)
    2edc:	0085c83a 	sub	r2,zero,r2
    2ee0:	2120003c 	xorhi	r4,r4,32768
    2ee4:	18e0003c 	xorhi	r3,r3,32768
    2ee8:	81000115 	stw	r4,4(r16)
    2eec:	80c00315 	stw	r3,12(r16)
    2ef0:	00000506 	br	2f08 <__ieee754_rem_pio2+0x240>
    2ef4:	31000015 	stw	r4,0(r6)
    2ef8:	31400115 	stw	r5,4(r6)
    2efc:	30000215 	stw	zero,8(r6)
    2f00:	30000315 	stw	zero,12(r6)
    2f04:	0005883a 	mov	r2,zero
    2f08:	dfc01517 	ldw	ra,84(sp)
    2f0c:	df001417 	ldw	fp,80(sp)
    2f10:	ddc01317 	ldw	r23,76(sp)
    2f14:	dd801217 	ldw	r22,72(sp)
    2f18:	dd401117 	ldw	r21,68(sp)
    2f1c:	dd001017 	ldw	r20,64(sp)
    2f20:	dcc00f17 	ldw	r19,60(sp)
    2f24:	dc800e17 	ldw	r18,56(sp)
    2f28:	dc400d17 	ldw	r17,52(sp)
    2f2c:	dc000c17 	ldw	r16,48(sp)
    2f30:	dec01604 	addi	sp,sp,88
    2f34:	f800283a 	ret
    2f38:	200d883a 	mov	r6,r4
    2f3c:	280f883a 	mov	r7,r5
    2f40:	000614c0 	call	614c <__subdf3>
    2f44:	80800215 	stw	r2,8(r16)
    2f48:	80800015 	stw	r2,0(r16)
    2f4c:	80c00315 	stw	r3,12(r16)
    2f50:	80c00115 	stw	r3,4(r16)
    2f54:	0005883a 	mov	r2,zero
    2f58:	003feb06 	br	2f08 <__alt_exception_stack_pointer+0xf8002f08>
    2f5c:	01cf7474 	movhi	r7,15825
    2f60:	9009883a 	mov	r4,r18
    2f64:	39ed1844 	addi	r7,r7,-19359
    2f68:	01869834 	movhi	r6,6752
    2f6c:	180b883a 	mov	r5,r3
    2f70:	000614c0 	call	614c <__subdf3>
    2f74:	018b80f4 	movhi	r6,11779
    2f78:	01cee8f4 	movhi	r7,15267
    2f7c:	319c1cc4 	addi	r6,r6,28787
    2f80:	39c66284 	addi	r7,r7,6538
    2f84:	1009883a 	mov	r4,r2
    2f88:	180b883a 	mov	r5,r3
    2f8c:	1025883a 	mov	r18,r2
    2f90:	1823883a 	mov	r17,r3
    2f94:	000614c0 	call	614c <__subdf3>
    2f98:	100d883a 	mov	r6,r2
    2f9c:	180f883a 	mov	r7,r3
    2fa0:	9009883a 	mov	r4,r18
    2fa4:	880b883a 	mov	r5,r17
    2fa8:	80800015 	stw	r2,0(r16)
    2fac:	80c00115 	stw	r3,4(r16)
    2fb0:	000614c0 	call	614c <__subdf3>
    2fb4:	018b80f4 	movhi	r6,11779
    2fb8:	01cee8f4 	movhi	r7,15267
    2fbc:	319c1cc4 	addi	r6,r6,28787
    2fc0:	39c66284 	addi	r7,r7,6538
    2fc4:	003f7306 	br	2d94 <__alt_exception_stack_pointer+0xf8002d94>
    2fc8:	000493c0 	call	493c <fabs>
    2fcc:	019b72b4 	movhi	r6,28106
    2fd0:	01cff934 	movhi	r7,16356
    2fd4:	31b220c4 	addi	r6,r6,-14205
    2fd8:	39d7cc04 	addi	r7,r7,24368
    2fdc:	1009883a 	mov	r4,r2
    2fe0:	180b883a 	mov	r5,r3
    2fe4:	102d883a 	mov	r22,r2
    2fe8:	182b883a 	mov	r21,r3
    2fec:	00058e00 	call	58e0 <__muldf3>
    2ff0:	000d883a 	mov	r6,zero
    2ff4:	01cff834 	movhi	r7,16352
    2ff8:	1009883a 	mov	r4,r2
    2ffc:	180b883a 	mov	r5,r3
    3000:	0004ed00 	call	4ed0 <__adddf3>
    3004:	180b883a 	mov	r5,r3
    3008:	1009883a 	mov	r4,r2
    300c:	0006a480 	call	6a48 <__fixdfsi>
    3010:	1009883a 	mov	r4,r2
    3014:	1025883a 	mov	r18,r2
    3018:	0006ac80 	call	6ac8 <__floatsidf>
    301c:	01cffe74 	movhi	r7,16377
    3020:	39c87ec4 	addi	r7,r7,8699
    3024:	01951034 	movhi	r6,21568
    3028:	1009883a 	mov	r4,r2
    302c:	180b883a 	mov	r5,r3
    3030:	1029883a 	mov	r20,r2
    3034:	1827883a 	mov	r19,r3
    3038:	00058e00 	call	58e0 <__muldf3>
    303c:	b009883a 	mov	r4,r22
    3040:	a80b883a 	mov	r5,r21
    3044:	100d883a 	mov	r6,r2
    3048:	180f883a 	mov	r7,r3
    304c:	000614c0 	call	614c <__subdf3>
    3050:	018698b4 	movhi	r6,6754
    3054:	01cf7474 	movhi	r7,15825
    3058:	a009883a 	mov	r4,r20
    305c:	3198cc44 	addi	r6,r6,25393
    3060:	39ed1844 	addi	r7,r7,-19359
    3064:	980b883a 	mov	r5,r19
    3068:	1039883a 	mov	fp,r2
    306c:	d8c00815 	stw	r3,32(sp)
    3070:	00058e00 	call	58e0 <__muldf3>
    3074:	010007c4 	movi	r4,31
    3078:	e017883a 	mov	r11,fp
    307c:	da800817 	ldw	r10,32(sp)
    3080:	102d883a 	mov	r22,r2
    3084:	182b883a 	mov	r21,r3
    3088:	24802816 	blt	r4,r18,312c <__ieee754_rem_pio2+0x464>
    308c:	913fffc4 	addi	r4,r18,-1
    3090:	2109883a 	add	r4,r4,r4
    3094:	01400074 	movhi	r5,1
    3098:	2109883a 	add	r4,r4,r4
    309c:	29545d04 	addi	r5,r5,20852
    30a0:	2909883a 	add	r4,r5,r4
    30a4:	21000017 	ldw	r4,0(r4)
    30a8:	b9002026 	beq	r23,r4,312c <__ieee754_rem_pio2+0x464>
    30ac:	100d883a 	mov	r6,r2
    30b0:	180f883a 	mov	r7,r3
    30b4:	e009883a 	mov	r4,fp
    30b8:	500b883a 	mov	r5,r10
    30bc:	da800b15 	stw	r10,44(sp)
    30c0:	df000a15 	stw	fp,40(sp)
    30c4:	000614c0 	call	614c <__subdf3>
    30c8:	da800b17 	ldw	r10,44(sp)
    30cc:	dac00a17 	ldw	r11,40(sp)
    30d0:	1019883a 	mov	r12,r2
    30d4:	1813883a 	mov	r9,r3
    30d8:	80800015 	stw	r2,0(r16)
    30dc:	80c00115 	stw	r3,4(r16)
    30e0:	600d883a 	mov	r6,r12
    30e4:	480f883a 	mov	r7,r9
    30e8:	5809883a 	mov	r4,r11
    30ec:	500b883a 	mov	r5,r10
    30f0:	da400b15 	stw	r9,44(sp)
    30f4:	db000a15 	stw	r12,40(sp)
    30f8:	000614c0 	call	614c <__subdf3>
    30fc:	b00d883a 	mov	r6,r22
    3100:	a80f883a 	mov	r7,r21
    3104:	1009883a 	mov	r4,r2
    3108:	180b883a 	mov	r5,r3
    310c:	000614c0 	call	614c <__subdf3>
    3110:	80800215 	stw	r2,8(r16)
    3114:	80c00315 	stw	r3,12(r16)
    3118:	da400b17 	ldw	r9,44(sp)
    311c:	db000a17 	ldw	r12,40(sp)
    3120:	88009f16 	blt	r17,zero,33a0 <__ieee754_rem_pio2+0x6d8>
    3124:	9005883a 	mov	r2,r18
    3128:	003f7706 	br	2f08 <__alt_exception_stack_pointer+0xf8002f08>
    312c:	d9400817 	ldw	r5,32(sp)
    3130:	100d883a 	mov	r6,r2
    3134:	180f883a 	mov	r7,r3
    3138:	e009883a 	mov	r4,fp
    313c:	da800b15 	stw	r10,44(sp)
    3140:	dac00a15 	stw	r11,40(sp)
    3144:	000614c0 	call	614c <__subdf3>
    3148:	1019883a 	mov	r12,r2
    314c:	1804d53a 	srli	r2,r3,20
    3150:	b811d53a 	srai	r8,r23,20
    3154:	1813883a 	mov	r9,r3
    3158:	1081ffcc 	andi	r2,r2,2047
    315c:	80c00115 	stw	r3,4(r16)
    3160:	83000015 	stw	r12,0(r16)
    3164:	4085c83a 	sub	r2,r8,r2
    3168:	00c00404 	movi	r3,16
    316c:	da800b17 	ldw	r10,44(sp)
    3170:	dac00a17 	ldw	r11,40(sp)
    3174:	18bfda0e 	bge	r3,r2,30e0 <__alt_exception_stack_pointer+0xf80030e0>
    3178:	01cf7474 	movhi	r7,15825
    317c:	39ed1844 	addi	r7,r7,-19359
    3180:	01869834 	movhi	r6,6752
    3184:	a009883a 	mov	r4,r20
    3188:	980b883a 	mov	r5,r19
    318c:	da000a15 	stw	r8,40(sp)
    3190:	00058e00 	call	58e0 <__muldf3>
    3194:	d9400817 	ldw	r5,32(sp)
    3198:	100d883a 	mov	r6,r2
    319c:	180f883a 	mov	r7,r3
    31a0:	e009883a 	mov	r4,fp
    31a4:	102d883a 	mov	r22,r2
    31a8:	182b883a 	mov	r21,r3
    31ac:	000614c0 	call	614c <__subdf3>
    31b0:	d9400817 	ldw	r5,32(sp)
    31b4:	100d883a 	mov	r6,r2
    31b8:	180f883a 	mov	r7,r3
    31bc:	e009883a 	mov	r4,fp
    31c0:	182f883a 	mov	r23,r3
    31c4:	d8800915 	stw	r2,36(sp)
    31c8:	000614c0 	call	614c <__subdf3>
    31cc:	b00d883a 	mov	r6,r22
    31d0:	a80f883a 	mov	r7,r21
    31d4:	1009883a 	mov	r4,r2
    31d8:	180b883a 	mov	r5,r3
    31dc:	000614c0 	call	614c <__subdf3>
    31e0:	018b80f4 	movhi	r6,11779
    31e4:	01cee8f4 	movhi	r7,15267
    31e8:	319c1cc4 	addi	r6,r6,28787
    31ec:	39c66284 	addi	r7,r7,6538
    31f0:	a009883a 	mov	r4,r20
    31f4:	980b883a 	mov	r5,r19
    31f8:	102d883a 	mov	r22,r2
    31fc:	182b883a 	mov	r21,r3
    3200:	00058e00 	call	58e0 <__muldf3>
    3204:	b00d883a 	mov	r6,r22
    3208:	a80f883a 	mov	r7,r21
    320c:	1009883a 	mov	r4,r2
    3210:	180b883a 	mov	r5,r3
    3214:	000614c0 	call	614c <__subdf3>
    3218:	d9000917 	ldw	r4,36(sp)
    321c:	100d883a 	mov	r6,r2
    3220:	180f883a 	mov	r7,r3
    3224:	b80b883a 	mov	r5,r23
    3228:	102d883a 	mov	r22,r2
    322c:	182b883a 	mov	r21,r3
    3230:	000614c0 	call	614c <__subdf3>
    3234:	1019883a 	mov	r12,r2
    3238:	1804d53a 	srli	r2,r3,20
    323c:	da000a17 	ldw	r8,40(sp)
    3240:	83000015 	stw	r12,0(r16)
    3244:	1081ffcc 	andi	r2,r2,2047
    3248:	4091c83a 	sub	r8,r8,r2
    324c:	80c00115 	stw	r3,4(r16)
    3250:	00800c44 	movi	r2,49
    3254:	1813883a 	mov	r9,r3
    3258:	1200730e 	bge	r2,r8,3428 <__ieee754_rem_pio2+0x760>
    325c:	01cee8f4 	movhi	r7,15267
    3260:	39c66284 	addi	r7,r7,6538
    3264:	018b8034 	movhi	r6,11776
    3268:	a009883a 	mov	r4,r20
    326c:	980b883a 	mov	r5,r19
    3270:	00058e00 	call	58e0 <__muldf3>
    3274:	d9000917 	ldw	r4,36(sp)
    3278:	100d883a 	mov	r6,r2
    327c:	180f883a 	mov	r7,r3
    3280:	b80b883a 	mov	r5,r23
    3284:	102d883a 	mov	r22,r2
    3288:	182b883a 	mov	r21,r3
    328c:	000614c0 	call	614c <__subdf3>
    3290:	d9000917 	ldw	r4,36(sp)
    3294:	100d883a 	mov	r6,r2
    3298:	180f883a 	mov	r7,r3
    329c:	b80b883a 	mov	r5,r23
    32a0:	d8c00b15 	stw	r3,44(sp)
    32a4:	d8800a15 	stw	r2,40(sp)
    32a8:	000614c0 	call	614c <__subdf3>
    32ac:	b00d883a 	mov	r6,r22
    32b0:	a80f883a 	mov	r7,r21
    32b4:	1009883a 	mov	r4,r2
    32b8:	180b883a 	mov	r5,r3
    32bc:	000614c0 	call	614c <__subdf3>
    32c0:	01894834 	movhi	r6,9504
    32c4:	01ce5f34 	movhi	r7,14716
    32c8:	31927044 	addi	r6,r6,18881
    32cc:	39e0e684 	addi	r7,r7,-31846
    32d0:	a009883a 	mov	r4,r20
    32d4:	980b883a 	mov	r5,r19
    32d8:	102d883a 	mov	r22,r2
    32dc:	182b883a 	mov	r21,r3
    32e0:	00058e00 	call	58e0 <__muldf3>
    32e4:	b00d883a 	mov	r6,r22
    32e8:	a80f883a 	mov	r7,r21
    32ec:	1009883a 	mov	r4,r2
    32f0:	180b883a 	mov	r5,r3
    32f4:	000614c0 	call	614c <__subdf3>
    32f8:	dac00a17 	ldw	r11,40(sp)
    32fc:	da800b17 	ldw	r10,44(sp)
    3300:	102d883a 	mov	r22,r2
    3304:	182b883a 	mov	r21,r3
    3308:	100d883a 	mov	r6,r2
    330c:	180f883a 	mov	r7,r3
    3310:	5809883a 	mov	r4,r11
    3314:	500b883a 	mov	r5,r10
    3318:	003f6a06 	br	30c4 <__alt_exception_stack_pointer+0xf80030c4>
    331c:	0004ed00 	call	4ed0 <__adddf3>
    3320:	1025883a 	mov	r18,r2
    3324:	008ffe74 	movhi	r2,16377
    3328:	10887ec4 	addi	r2,r2,8699
    332c:	1823883a 	mov	r17,r3
    3330:	b8802226 	beq	r23,r2,33bc <__ieee754_rem_pio2+0x6f4>
    3334:	018698b4 	movhi	r6,6754
    3338:	01cf7474 	movhi	r7,15825
    333c:	3198cc44 	addi	r6,r6,25393
    3340:	39ed1844 	addi	r7,r7,-19359
    3344:	9009883a 	mov	r4,r18
    3348:	180b883a 	mov	r5,r3
    334c:	0004ed00 	call	4ed0 <__adddf3>
    3350:	100d883a 	mov	r6,r2
    3354:	180f883a 	mov	r7,r3
    3358:	9009883a 	mov	r4,r18
    335c:	880b883a 	mov	r5,r17
    3360:	80800015 	stw	r2,0(r16)
    3364:	80c00115 	stw	r3,4(r16)
    3368:	000614c0 	call	614c <__subdf3>
    336c:	018698b4 	movhi	r6,6754
    3370:	01cf7474 	movhi	r7,15825
    3374:	3198cc44 	addi	r6,r6,25393
    3378:	39ed1844 	addi	r7,r7,-19359
    337c:	1009883a 	mov	r4,r2
    3380:	180b883a 	mov	r5,r3
    3384:	0004ed00 	call	4ed0 <__adddf3>
    3388:	80800215 	stw	r2,8(r16)
    338c:	80c00315 	stw	r3,12(r16)
    3390:	00bfffc4 	movi	r2,-1
    3394:	003edc06 	br	2f08 <__alt_exception_stack_pointer+0xf8002f08>
    3398:	01c000c4 	movi	r7,3
    339c:	003ec306 	br	2eac <__alt_exception_stack_pointer+0xf8002eac>
    33a0:	4a60003c 	xorhi	r9,r9,32768
    33a4:	18e0003c 	xorhi	r3,r3,32768
    33a8:	83000015 	stw	r12,0(r16)
    33ac:	82400115 	stw	r9,4(r16)
    33b0:	80c00315 	stw	r3,12(r16)
    33b4:	0485c83a 	sub	r2,zero,r18
    33b8:	003ed306 	br	2f08 <__alt_exception_stack_pointer+0xf8002f08>
    33bc:	01cf7474 	movhi	r7,15825
    33c0:	9009883a 	mov	r4,r18
    33c4:	39ed1844 	addi	r7,r7,-19359
    33c8:	01869834 	movhi	r6,6752
    33cc:	180b883a 	mov	r5,r3
    33d0:	0004ed00 	call	4ed0 <__adddf3>
    33d4:	018b80f4 	movhi	r6,11779
    33d8:	01cee8f4 	movhi	r7,15267
    33dc:	319c1cc4 	addi	r6,r6,28787
    33e0:	39c66284 	addi	r7,r7,6538
    33e4:	1009883a 	mov	r4,r2
    33e8:	180b883a 	mov	r5,r3
    33ec:	1025883a 	mov	r18,r2
    33f0:	1823883a 	mov	r17,r3
    33f4:	0004ed00 	call	4ed0 <__adddf3>
    33f8:	100d883a 	mov	r6,r2
    33fc:	180f883a 	mov	r7,r3
    3400:	9009883a 	mov	r4,r18
    3404:	880b883a 	mov	r5,r17
    3408:	80800015 	stw	r2,0(r16)
    340c:	80c00115 	stw	r3,4(r16)
    3410:	000614c0 	call	614c <__subdf3>
    3414:	018b80f4 	movhi	r6,11779
    3418:	01cee8f4 	movhi	r7,15267
    341c:	319c1cc4 	addi	r6,r6,28787
    3420:	39c66284 	addi	r7,r7,6538
    3424:	003fd506 	br	337c <__alt_exception_stack_pointer+0xf800337c>
    3428:	dac00917 	ldw	r11,36(sp)
    342c:	b815883a 	mov	r10,r23
    3430:	003f2b06 	br	30e0 <__alt_exception_stack_pointer+0xf80030e0>

00003434 <__kernel_cos>:
    3434:	defff304 	addi	sp,sp,-52
    3438:	dc000315 	stw	r16,12(sp)
    343c:	04200034 	movhi	r16,32768
    3440:	843fffc4 	addi	r16,r16,-1
    3444:	008f9034 	movhi	r2,15936
    3448:	df000b15 	stw	fp,44(sp)
    344c:	ddc00a15 	stw	r23,40(sp)
    3450:	dd800915 	stw	r22,36(sp)
    3454:	dcc00615 	stw	r19,24(sp)
    3458:	dfc00c15 	stw	ra,48(sp)
    345c:	dd400815 	stw	r21,32(sp)
    3460:	dd000715 	stw	r20,28(sp)
    3464:	dc800515 	stw	r18,20(sp)
    3468:	dc400415 	stw	r17,16(sp)
    346c:	2c20703a 	and	r16,r5,r16
    3470:	10bfffc4 	addi	r2,r2,-1
    3474:	2827883a 	mov	r19,r5
    3478:	202d883a 	mov	r22,r4
    347c:	302f883a 	mov	r23,r6
    3480:	3839883a 	mov	fp,r7
    3484:	14007516 	blt	r2,r16,365c <__kernel_cos+0x228>
    3488:	0006a480 	call	6a48 <__fixdfsi>
    348c:	10010f26 	beq	r2,zero,38cc <__kernel_cos+0x498>
    3490:	b00d883a 	mov	r6,r22
    3494:	980f883a 	mov	r7,r19
    3498:	b009883a 	mov	r4,r22
    349c:	980b883a 	mov	r5,r19
    34a0:	00058e00 	call	58e0 <__muldf3>
    34a4:	01afa234 	movhi	r6,48776
    34a8:	01ef6a74 	movhi	r7,48553
    34ac:	318e3504 	addi	r6,r6,14548
    34b0:	39feba44 	addi	r7,r7,-1303
    34b4:	1009883a 	mov	r4,r2
    34b8:	180b883a 	mov	r5,r3
    34bc:	102b883a 	mov	r21,r2
    34c0:	1829883a 	mov	r20,r3
    34c4:	00058e00 	call	58e0 <__muldf3>
    34c8:	01af6d74 	movhi	r6,48565
    34cc:	01cf88b4 	movhi	r7,15906
    34d0:	31ac7104 	addi	r6,r6,-20028
    34d4:	39fba784 	addi	r7,r7,-4450
    34d8:	1009883a 	mov	r4,r2
    34dc:	180b883a 	mov	r5,r3
    34e0:	0004ed00 	call	4ed0 <__adddf3>
    34e4:	a80d883a 	mov	r6,r21
    34e8:	a00f883a 	mov	r7,r20
    34ec:	1009883a 	mov	r4,r2
    34f0:	180b883a 	mov	r5,r3
    34f4:	00058e00 	call	58e0 <__muldf3>
    34f8:	01a02734 	movhi	r6,32924
    34fc:	01cfa4b4 	movhi	r7,16018
    3500:	3194ab44 	addi	r6,r6,21165
    3504:	39df93c4 	addi	r7,r7,32335
    3508:	1009883a 	mov	r4,r2
    350c:	180b883a 	mov	r5,r3
    3510:	000614c0 	call	614c <__subdf3>
    3514:	a80d883a 	mov	r6,r21
    3518:	a00f883a 	mov	r7,r20
    351c:	1009883a 	mov	r4,r2
    3520:	180b883a 	mov	r5,r3
    3524:	00058e00 	call	58e0 <__muldf3>
    3528:	018672f4 	movhi	r6,6603
    352c:	01cfbeb4 	movhi	r7,16122
    3530:	31856404 	addi	r6,r6,5520
    3534:	39c06804 	addi	r7,r7,416
    3538:	1009883a 	mov	r4,r2
    353c:	180b883a 	mov	r5,r3
    3540:	0004ed00 	call	4ed0 <__adddf3>
    3544:	a80d883a 	mov	r6,r21
    3548:	a00f883a 	mov	r7,r20
    354c:	1009883a 	mov	r4,r2
    3550:	180b883a 	mov	r5,r3
    3554:	00058e00 	call	58e0 <__muldf3>
    3558:	0185b074 	movhi	r6,5825
    355c:	01cfd5f4 	movhi	r7,16215
    3560:	31945dc4 	addi	r6,r6,20855
    3564:	39f05b04 	addi	r7,r7,-16020
    3568:	1009883a 	mov	r4,r2
    356c:	180b883a 	mov	r5,r3
    3570:	000614c0 	call	614c <__subdf3>
    3574:	a80d883a 	mov	r6,r21
    3578:	a00f883a 	mov	r7,r20
    357c:	1009883a 	mov	r4,r2
    3580:	180b883a 	mov	r5,r3
    3584:	00058e00 	call	58e0 <__muldf3>
    3588:	01955574 	movhi	r6,21845
    358c:	01cfe974 	movhi	r7,16293
    3590:	31955304 	addi	r6,r6,21836
    3594:	39d55544 	addi	r7,r7,21845
    3598:	1009883a 	mov	r4,r2
    359c:	180b883a 	mov	r5,r3
    35a0:	0004ed00 	call	4ed0 <__adddf3>
    35a4:	a80d883a 	mov	r6,r21
    35a8:	a00f883a 	mov	r7,r20
    35ac:	1009883a 	mov	r4,r2
    35b0:	180b883a 	mov	r5,r3
    35b4:	00058e00 	call	58e0 <__muldf3>
    35b8:	1017883a 	mov	r11,r2
    35bc:	1815883a 	mov	r10,r3
    35c0:	a809883a 	mov	r4,r21
    35c4:	a00b883a 	mov	r5,r20
    35c8:	000d883a 	mov	r6,zero
    35cc:	01cff834 	movhi	r7,16352
    35d0:	da800215 	stw	r10,8(sp)
    35d4:	dac00115 	stw	r11,4(sp)
    35d8:	00058e00 	call	58e0 <__muldf3>
    35dc:	dac00117 	ldw	r11,4(sp)
    35e0:	da800217 	ldw	r10,8(sp)
    35e4:	a809883a 	mov	r4,r21
    35e8:	580d883a 	mov	r6,r11
    35ec:	500f883a 	mov	r7,r10
    35f0:	a00b883a 	mov	r5,r20
    35f4:	1023883a 	mov	r17,r2
    35f8:	1821883a 	mov	r16,r3
    35fc:	00058e00 	call	58e0 <__muldf3>
    3600:	b80d883a 	mov	r6,r23
    3604:	e00f883a 	mov	r7,fp
    3608:	b009883a 	mov	r4,r22
    360c:	980b883a 	mov	r5,r19
    3610:	1029883a 	mov	r20,r2
    3614:	1825883a 	mov	r18,r3
    3618:	00058e00 	call	58e0 <__muldf3>
    361c:	a009883a 	mov	r4,r20
    3620:	900b883a 	mov	r5,r18
    3624:	100d883a 	mov	r6,r2
    3628:	180f883a 	mov	r7,r3
    362c:	000614c0 	call	614c <__subdf3>
    3630:	8809883a 	mov	r4,r17
    3634:	800b883a 	mov	r5,r16
    3638:	100d883a 	mov	r6,r2
    363c:	180f883a 	mov	r7,r3
    3640:	000614c0 	call	614c <__subdf3>
    3644:	100d883a 	mov	r6,r2
    3648:	180f883a 	mov	r7,r3
    364c:	0009883a 	mov	r4,zero
    3650:	014ffc34 	movhi	r5,16368
    3654:	000614c0 	call	614c <__subdf3>
    3658:	00008b06 	br	3888 <__kernel_cos+0x454>
    365c:	200d883a 	mov	r6,r4
    3660:	280f883a 	mov	r7,r5
    3664:	00058e00 	call	58e0 <__muldf3>
    3668:	01afa234 	movhi	r6,48776
    366c:	01ef6a74 	movhi	r7,48553
    3670:	318e3504 	addi	r6,r6,14548
    3674:	39feba44 	addi	r7,r7,-1303
    3678:	1009883a 	mov	r4,r2
    367c:	180b883a 	mov	r5,r3
    3680:	1025883a 	mov	r18,r2
    3684:	1823883a 	mov	r17,r3
    3688:	00058e00 	call	58e0 <__muldf3>
    368c:	01af6d74 	movhi	r6,48565
    3690:	01cf88b4 	movhi	r7,15906
    3694:	31ac7104 	addi	r6,r6,-20028
    3698:	39fba784 	addi	r7,r7,-4450
    369c:	1009883a 	mov	r4,r2
    36a0:	180b883a 	mov	r5,r3
    36a4:	0004ed00 	call	4ed0 <__adddf3>
    36a8:	900d883a 	mov	r6,r18
    36ac:	880f883a 	mov	r7,r17
    36b0:	1009883a 	mov	r4,r2
    36b4:	180b883a 	mov	r5,r3
    36b8:	00058e00 	call	58e0 <__muldf3>
    36bc:	01a02734 	movhi	r6,32924
    36c0:	01cfa4b4 	movhi	r7,16018
    36c4:	3194ab44 	addi	r6,r6,21165
    36c8:	39df93c4 	addi	r7,r7,32335
    36cc:	1009883a 	mov	r4,r2
    36d0:	180b883a 	mov	r5,r3
    36d4:	000614c0 	call	614c <__subdf3>
    36d8:	900d883a 	mov	r6,r18
    36dc:	880f883a 	mov	r7,r17
    36e0:	1009883a 	mov	r4,r2
    36e4:	180b883a 	mov	r5,r3
    36e8:	00058e00 	call	58e0 <__muldf3>
    36ec:	018672f4 	movhi	r6,6603
    36f0:	01cfbeb4 	movhi	r7,16122
    36f4:	31856404 	addi	r6,r6,5520
    36f8:	39c06804 	addi	r7,r7,416
    36fc:	1009883a 	mov	r4,r2
    3700:	180b883a 	mov	r5,r3
    3704:	0004ed00 	call	4ed0 <__adddf3>
    3708:	900d883a 	mov	r6,r18
    370c:	880f883a 	mov	r7,r17
    3710:	1009883a 	mov	r4,r2
    3714:	180b883a 	mov	r5,r3
    3718:	00058e00 	call	58e0 <__muldf3>
    371c:	0185b074 	movhi	r6,5825
    3720:	01cfd5f4 	movhi	r7,16215
    3724:	31945dc4 	addi	r6,r6,20855
    3728:	39f05b04 	addi	r7,r7,-16020
    372c:	1009883a 	mov	r4,r2
    3730:	180b883a 	mov	r5,r3
    3734:	000614c0 	call	614c <__subdf3>
    3738:	900d883a 	mov	r6,r18
    373c:	880f883a 	mov	r7,r17
    3740:	1009883a 	mov	r4,r2
    3744:	180b883a 	mov	r5,r3
    3748:	00058e00 	call	58e0 <__muldf3>
    374c:	01955574 	movhi	r6,21845
    3750:	01cfe974 	movhi	r7,16293
    3754:	31955304 	addi	r6,r6,21836
    3758:	39d55544 	addi	r7,r7,21845
    375c:	1009883a 	mov	r4,r2
    3760:	180b883a 	mov	r5,r3
    3764:	0004ed00 	call	4ed0 <__adddf3>
    3768:	900d883a 	mov	r6,r18
    376c:	880f883a 	mov	r7,r17
    3770:	1009883a 	mov	r4,r2
    3774:	180b883a 	mov	r5,r3
    3778:	00058e00 	call	58e0 <__muldf3>
    377c:	1013883a 	mov	r9,r2
    3780:	1017883a 	mov	r11,r2
    3784:	008ff4f4 	movhi	r2,16339
    3788:	108ccc84 	addi	r2,r2,13106
    378c:	1811883a 	mov	r8,r3
    3790:	902b883a 	mov	r21,r18
    3794:	8829883a 	mov	r20,r17
    3798:	1815883a 	mov	r10,r3
    379c:	143f880e 	bge	r2,r16,35c0 <__alt_exception_stack_pointer+0xf80035c0>
    37a0:	008ffa74 	movhi	r2,16361
    37a4:	14004416 	blt	r2,r16,38b8 <__kernel_cos+0x484>
    37a8:	00bff834 	movhi	r2,65504
    37ac:	80a1883a 	add	r16,r16,r2
    37b0:	000d883a 	mov	r6,zero
    37b4:	800f883a 	mov	r7,r16
    37b8:	0009883a 	mov	r4,zero
    37bc:	014ffc34 	movhi	r5,16368
    37c0:	da400115 	stw	r9,4(sp)
    37c4:	d8c00215 	stw	r3,8(sp)
    37c8:	000614c0 	call	614c <__subdf3>
    37cc:	da000217 	ldw	r8,8(sp)
    37d0:	da400117 	ldw	r9,4(sp)
    37d4:	102b883a 	mov	r21,r2
    37d8:	d8c00015 	stw	r3,0(sp)
    37dc:	9009883a 	mov	r4,r18
    37e0:	880b883a 	mov	r5,r17
    37e4:	000d883a 	mov	r6,zero
    37e8:	01cff834 	movhi	r7,16352
    37ec:	da000215 	stw	r8,8(sp)
    37f0:	da400115 	stw	r9,4(sp)
    37f4:	00058e00 	call	58e0 <__muldf3>
    37f8:	800f883a 	mov	r7,r16
    37fc:	000d883a 	mov	r6,zero
    3800:	1009883a 	mov	r4,r2
    3804:	180b883a 	mov	r5,r3
    3808:	000614c0 	call	614c <__subdf3>
    380c:	da400117 	ldw	r9,4(sp)
    3810:	da000217 	ldw	r8,8(sp)
    3814:	9009883a 	mov	r4,r18
    3818:	480d883a 	mov	r6,r9
    381c:	400f883a 	mov	r7,r8
    3820:	880b883a 	mov	r5,r17
    3824:	1029883a 	mov	r20,r2
    3828:	1821883a 	mov	r16,r3
    382c:	00058e00 	call	58e0 <__muldf3>
    3830:	b80d883a 	mov	r6,r23
    3834:	e00f883a 	mov	r7,fp
    3838:	b009883a 	mov	r4,r22
    383c:	980b883a 	mov	r5,r19
    3840:	1025883a 	mov	r18,r2
    3844:	1823883a 	mov	r17,r3
    3848:	00058e00 	call	58e0 <__muldf3>
    384c:	100d883a 	mov	r6,r2
    3850:	180f883a 	mov	r7,r3
    3854:	9009883a 	mov	r4,r18
    3858:	880b883a 	mov	r5,r17
    385c:	000614c0 	call	614c <__subdf3>
    3860:	100d883a 	mov	r6,r2
    3864:	180f883a 	mov	r7,r3
    3868:	a009883a 	mov	r4,r20
    386c:	800b883a 	mov	r5,r16
    3870:	000614c0 	call	614c <__subdf3>
    3874:	d9400017 	ldw	r5,0(sp)
    3878:	100d883a 	mov	r6,r2
    387c:	180f883a 	mov	r7,r3
    3880:	a809883a 	mov	r4,r21
    3884:	000614c0 	call	614c <__subdf3>
    3888:	dfc00c17 	ldw	ra,48(sp)
    388c:	df000b17 	ldw	fp,44(sp)
    3890:	ddc00a17 	ldw	r23,40(sp)
    3894:	dd800917 	ldw	r22,36(sp)
    3898:	dd400817 	ldw	r21,32(sp)
    389c:	dd000717 	ldw	r20,28(sp)
    38a0:	dcc00617 	ldw	r19,24(sp)
    38a4:	dc800517 	ldw	r18,20(sp)
    38a8:	dc400417 	ldw	r17,16(sp)
    38ac:	dc000317 	ldw	r16,12(sp)
    38b0:	dec00d04 	addi	sp,sp,52
    38b4:	f800283a 	ret
    38b8:	008ff9f4 	movhi	r2,16359
    38bc:	002b883a 	mov	r21,zero
    38c0:	d8800015 	stw	r2,0(sp)
    38c4:	040ff4b4 	movhi	r16,16338
    38c8:	003fc406 	br	37dc <__alt_exception_stack_pointer+0xf80037dc>
    38cc:	0005883a 	mov	r2,zero
    38d0:	00cffc34 	movhi	r3,16368
    38d4:	003fec06 	br	3888 <__alt_exception_stack_pointer+0xf8003888>

000038d8 <__kernel_rem_pio2>:
    38d8:	deff5a04 	addi	sp,sp,-664
    38dc:	da00a617 	ldw	r8,664(sp)
    38e0:	00c00074 	movhi	r3,1
    38e4:	18d4cf04 	addi	r3,r3,21308
    38e8:	4205883a 	add	r2,r8,r8
    38ec:	1085883a 	add	r2,r2,r2
    38f0:	1885883a 	add	r2,r3,r2
    38f4:	d9008e15 	stw	r4,568(sp)
    38f8:	d9408f15 	stw	r5,572(sp)
    38fc:	313fff44 	addi	r4,r6,-3
    3900:	01400604 	movi	r5,24
    3904:	dd80a215 	stw	r22,648(sp)
    3908:	dc009c15 	stw	r16,624(sp)
    390c:	dfc0a515 	stw	ra,660(sp)
    3910:	df00a415 	stw	fp,656(sp)
    3914:	ddc0a315 	stw	r23,652(sp)
    3918:	dd40a115 	stw	r21,644(sp)
    391c:	dd00a015 	stw	r20,640(sp)
    3920:	dcc09f15 	stw	r19,636(sp)
    3924:	dc809e15 	stw	r18,632(sp)
    3928:	dc409d15 	stw	r17,628(sp)
    392c:	3021883a 	mov	r16,r6
    3930:	d9c09315 	stw	r7,588(sp)
    3934:	15800017 	ldw	r22,0(r2)
    3938:	0004cf40 	call	4cf4 <__divsi3>
    393c:	da009317 	ldw	r8,588(sp)
    3940:	d8809215 	stw	r2,584(sp)
    3944:	423fffc4 	addi	r8,r8,-1
    3948:	da008d15 	stw	r8,564(sp)
    394c:	10033d16 	blt	r2,zero,4644 <__kernel_rem_pio2+0xd6c>
    3950:	da009217 	ldw	r8,584(sp)
    3954:	017ffa04 	movi	r5,-24
    3958:	42000044 	addi	r8,r8,1
    395c:	4009883a 	mov	r4,r8
    3960:	da009515 	stw	r8,596(sp)
    3964:	0004ea80 	call	4ea8 <__mulsi3>
    3968:	da008d17 	ldw	r8,564(sp)
    396c:	1421883a 	add	r16,r2,r16
    3970:	d8809217 	ldw	r2,584(sp)
    3974:	b207883a 	add	r3,r22,r8
    3978:	dc009015 	stw	r16,576(sp)
    397c:	1223c83a 	sub	r17,r2,r8
    3980:	18001016 	blt	r3,zero,39c4 <__kernel_rem_pio2+0xec>
    3984:	da00a717 	ldw	r8,668(sp)
    3988:	8c65883a 	add	r18,r17,r17
    398c:	94a5883a 	add	r18,r18,r18
    3990:	1c47883a 	add	r3,r3,r17
    3994:	dcc05004 	addi	r19,sp,320
    3998:	44a5883a 	add	r18,r8,r18
    399c:	1c000044 	addi	r16,r3,1
    39a0:	88015316 	blt	r17,zero,3ef0 <__kernel_rem_pio2+0x618>
    39a4:	91000017 	ldw	r4,0(r18)
    39a8:	0006ac80 	call	6ac8 <__floatsidf>
    39ac:	98800015 	stw	r2,0(r19)
    39b0:	98c00115 	stw	r3,4(r19)
    39b4:	8c400044 	addi	r17,r17,1
    39b8:	9cc00204 	addi	r19,r19,8
    39bc:	94800104 	addi	r18,r18,4
    39c0:	8c3ff71e 	bne	r17,r16,39a0 <__alt_exception_stack_pointer+0xf80039a0>
    39c4:	b0002816 	blt	r22,zero,3a68 <__kernel_rem_pio2+0x190>
    39c8:	da008d17 	ldw	r8,564(sp)
    39cc:	b4c00044 	addi	r19,r22,1
    39d0:	982690fa 	slli	r19,r19,3
    39d4:	402490fa 	slli	r18,r8,3
    39d8:	da008e17 	ldw	r8,568(sp)
    39dc:	d8805004 	addi	r2,sp,320
    39e0:	94000204 	addi	r16,r18,8
    39e4:	d823883a 	mov	r17,sp
    39e8:	14a5883a 	add	r18,r2,r18
    39ec:	dcef883a 	add	r23,sp,r19
    39f0:	4421883a 	add	r16,r8,r16
    39f4:	dd809115 	stw	r22,580(sp)
    39f8:	4039883a 	mov	fp,r8
    39fc:	da008d17 	ldw	r8,564(sp)
    3a00:	40016016 	blt	r8,zero,3f84 <__kernel_rem_pio2+0x6ac>
    3a04:	e027883a 	mov	r19,fp
    3a08:	9029883a 	mov	r20,r18
    3a0c:	002d883a 	mov	r22,zero
    3a10:	002b883a 	mov	r21,zero
    3a14:	a1800017 	ldw	r6,0(r20)
    3a18:	a1c00117 	ldw	r7,4(r20)
    3a1c:	99000017 	ldw	r4,0(r19)
    3a20:	99400117 	ldw	r5,4(r19)
    3a24:	9cc00204 	addi	r19,r19,8
    3a28:	a53ffe04 	addi	r20,r20,-8
    3a2c:	00058e00 	call	58e0 <__muldf3>
    3a30:	b009883a 	mov	r4,r22
    3a34:	a80b883a 	mov	r5,r21
    3a38:	100d883a 	mov	r6,r2
    3a3c:	180f883a 	mov	r7,r3
    3a40:	0004ed00 	call	4ed0 <__adddf3>
    3a44:	102d883a 	mov	r22,r2
    3a48:	182b883a 	mov	r21,r3
    3a4c:	9c3ff11e 	bne	r19,r16,3a14 <__alt_exception_stack_pointer+0xf8003a14>
    3a50:	8d800015 	stw	r22,0(r17)
    3a54:	8d400115 	stw	r21,4(r17)
    3a58:	8c400204 	addi	r17,r17,8
    3a5c:	94800204 	addi	r18,r18,8
    3a60:	8dffe61e 	bne	r17,r23,39fc <__alt_exception_stack_pointer+0xf80039fc>
    3a64:	dd809117 	ldw	r22,580(sp)
    3a68:	00d00034 	movhi	r3,16384
    3a6c:	da009317 	ldw	r8,588(sp)
    3a70:	18ffff84 	addi	r3,r3,-2
    3a74:	b0c7883a 	add	r3,r22,r3
    3a78:	18c7883a 	add	r3,r3,r3
    3a7c:	402090fa 	slli	r16,r8,3
    3a80:	18c7883a 	add	r3,r3,r3
    3a84:	da007804 	addi	r8,sp,480
    3a88:	40d1883a 	add	r8,r8,r3
    3a8c:	b0bfffc4 	addi	r2,r22,-1
    3a90:	da009615 	stw	r8,600(sp)
    3a94:	da008e17 	ldw	r8,568(sp)
    3a98:	1085883a 	add	r2,r2,r2
    3a9c:	1085883a 	add	r2,r2,r2
    3aa0:	19000104 	addi	r4,r3,4
    3aa4:	d885883a 	add	r2,sp,r2
    3aa8:	4421883a 	add	r16,r8,r16
    3aac:	da007804 	addi	r8,sp,480
    3ab0:	4111883a 	add	r8,r8,r4
    3ab4:	10807804 	addi	r2,r2,480
    3ab8:	da009715 	stw	r8,604(sp)
    3abc:	b025883a 	mov	r18,r22
    3ac0:	d8809815 	stw	r2,608(sp)
    3ac4:	dd809415 	stw	r22,592(sp)
    3ac8:	900490fa 	slli	r2,r18,3
    3acc:	d885883a 	add	r2,sp,r2
    3ad0:	17000017 	ldw	fp,0(r2)
    3ad4:	15400117 	ldw	r21,4(r2)
    3ad8:	04802b0e 	bge	zero,r18,3b88 <__kernel_rem_pio2+0x2b0>
    3adc:	00880034 	movhi	r2,8192
    3ae0:	10bfffc4 	addi	r2,r2,-1
    3ae4:	90a9883a 	add	r20,r18,r2
    3ae8:	a02890fa 	slli	r20,r20,3
    3aec:	dc407804 	addi	r17,sp,480
    3af0:	dcfffe04 	addi	r19,sp,-8
    3af4:	dd29883a 	add	r20,sp,r20
    3af8:	000d883a 	mov	r6,zero
    3afc:	01cf9c34 	movhi	r7,15984
    3b00:	e009883a 	mov	r4,fp
    3b04:	a80b883a 	mov	r5,r21
    3b08:	00058e00 	call	58e0 <__muldf3>
    3b0c:	180b883a 	mov	r5,r3
    3b10:	1009883a 	mov	r4,r2
    3b14:	0006a480 	call	6a48 <__fixdfsi>
    3b18:	1009883a 	mov	r4,r2
    3b1c:	0006ac80 	call	6ac8 <__floatsidf>
    3b20:	000d883a 	mov	r6,zero
    3b24:	01d05c34 	movhi	r7,16752
    3b28:	1009883a 	mov	r4,r2
    3b2c:	180b883a 	mov	r5,r3
    3b30:	102f883a 	mov	r23,r2
    3b34:	182d883a 	mov	r22,r3
    3b38:	00058e00 	call	58e0 <__muldf3>
    3b3c:	100d883a 	mov	r6,r2
    3b40:	180f883a 	mov	r7,r3
    3b44:	e009883a 	mov	r4,fp
    3b48:	a80b883a 	mov	r5,r21
    3b4c:	000614c0 	call	614c <__subdf3>
    3b50:	180b883a 	mov	r5,r3
    3b54:	1009883a 	mov	r4,r2
    3b58:	0006a480 	call	6a48 <__fixdfsi>
    3b5c:	a1800017 	ldw	r6,0(r20)
    3b60:	a1c00117 	ldw	r7,4(r20)
    3b64:	88800015 	stw	r2,0(r17)
    3b68:	b809883a 	mov	r4,r23
    3b6c:	b00b883a 	mov	r5,r22
    3b70:	0004ed00 	call	4ed0 <__adddf3>
    3b74:	a53ffe04 	addi	r20,r20,-8
    3b78:	1039883a 	mov	fp,r2
    3b7c:	182b883a 	mov	r21,r3
    3b80:	8c400104 	addi	r17,r17,4
    3b84:	a4ffdc1e 	bne	r20,r19,3af8 <__alt_exception_stack_pointer+0xf8003af8>
    3b88:	d9809017 	ldw	r6,576(sp)
    3b8c:	a80b883a 	mov	r5,r21
    3b90:	e009883a 	mov	r4,fp
    3b94:	0004b3c0 	call	4b3c <scalbn>
    3b98:	000d883a 	mov	r6,zero
    3b9c:	01cff034 	movhi	r7,16320
    3ba0:	1009883a 	mov	r4,r2
    3ba4:	180b883a 	mov	r5,r3
    3ba8:	1027883a 	mov	r19,r2
    3bac:	1823883a 	mov	r17,r3
    3bb0:	00058e00 	call	58e0 <__muldf3>
    3bb4:	1009883a 	mov	r4,r2
    3bb8:	180b883a 	mov	r5,r3
    3bbc:	00049500 	call	4950 <floor>
    3bc0:	000d883a 	mov	r6,zero
    3bc4:	01d00834 	movhi	r7,16416
    3bc8:	1009883a 	mov	r4,r2
    3bcc:	180b883a 	mov	r5,r3
    3bd0:	00058e00 	call	58e0 <__muldf3>
    3bd4:	100d883a 	mov	r6,r2
    3bd8:	180f883a 	mov	r7,r3
    3bdc:	9809883a 	mov	r4,r19
    3be0:	880b883a 	mov	r5,r17
    3be4:	000614c0 	call	614c <__subdf3>
    3be8:	180b883a 	mov	r5,r3
    3bec:	1009883a 	mov	r4,r2
    3bf0:	1827883a 	mov	r19,r3
    3bf4:	1029883a 	mov	r20,r2
    3bf8:	0006a480 	call	6a48 <__fixdfsi>
    3bfc:	1009883a 	mov	r4,r2
    3c00:	1023883a 	mov	r17,r2
    3c04:	0006ac80 	call	6ac8 <__floatsidf>
    3c08:	a009883a 	mov	r4,r20
    3c0c:	100d883a 	mov	r6,r2
    3c10:	180f883a 	mov	r7,r3
    3c14:	980b883a 	mov	r5,r19
    3c18:	000614c0 	call	614c <__subdf3>
    3c1c:	d9009017 	ldw	r4,576(sp)
    3c20:	1013883a 	mov	r9,r2
    3c24:	102b883a 	mov	r21,r2
    3c28:	1811883a 	mov	r8,r3
    3c2c:	0100b30e 	bge	zero,r4,3efc <__kernel_rem_pio2+0x624>
    3c30:	90bfffc4 	addi	r2,r18,-1
    3c34:	1085883a 	add	r2,r2,r2
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	d885883a 	add	r2,sp,r2
    3c40:	10807804 	addi	r2,r2,480
    3c44:	d9809017 	ldw	r6,576(sp)
    3c48:	11400017 	ldw	r5,0(r2)
    3c4c:	01000604 	movi	r4,24
    3c50:	2189c83a 	sub	r4,r4,r6
    3c54:	290dd83a 	sra	r6,r5,r4
    3c58:	d9c09017 	ldw	r7,576(sp)
    3c5c:	04c005c4 	movi	r19,23
    3c60:	3108983a 	sll	r4,r6,r4
    3c64:	99e7c83a 	sub	r19,r19,r7
    3c68:	89a3883a 	add	r17,r17,r6
    3c6c:	2909c83a 	sub	r4,r5,r4
    3c70:	24e7d83a 	sra	r19,r4,r19
    3c74:	11000015 	stw	r4,0(r2)
    3c78:	04c02a0e 	bge	zero,r19,3d24 <__kernel_rem_pio2+0x44c>
    3c7c:	8c400044 	addi	r17,r17,1
    3c80:	0481570e 	bge	zero,r18,41e0 <__kernel_rem_pio2+0x908>
    3c84:	02804034 	movhi	r10,256
    3c88:	52bfffc4 	addi	r10,r10,-1
    3c8c:	d8807804 	addi	r2,sp,480
    3c90:	000b883a 	mov	r5,zero
    3c94:	0029883a 	mov	r20,zero
    3c98:	01c04034 	movhi	r7,256
    3c9c:	00000706 	br	3cbc <__kernel_rem_pio2+0x3e4>
    3ca0:	390dc83a 	sub	r6,r7,r4
    3ca4:	20000226 	beq	r4,zero,3cb0 <__kernel_rem_pio2+0x3d8>
    3ca8:	11800015 	stw	r6,0(r2)
    3cac:	05000044 	movi	r20,1
    3cb0:	29400044 	addi	r5,r5,1
    3cb4:	10800104 	addi	r2,r2,4
    3cb8:	2c80080e 	bge	r5,r18,3cdc <__kernel_rem_pio2+0x404>
    3cbc:	11000017 	ldw	r4,0(r2)
    3cc0:	a03ff726 	beq	r20,zero,3ca0 <__alt_exception_stack_pointer+0xf8003ca0>
    3cc4:	5109c83a 	sub	r4,r10,r4
    3cc8:	11000015 	stw	r4,0(r2)
    3ccc:	29400044 	addi	r5,r5,1
    3cd0:	05000044 	movi	r20,1
    3cd4:	10800104 	addi	r2,r2,4
    3cd8:	2cbff816 	blt	r5,r18,3cbc <__alt_exception_stack_pointer+0xf8003cbc>
    3cdc:	d9009017 	ldw	r4,576(sp)
    3ce0:	01000e0e 	bge	zero,r4,3d1c <__kernel_rem_pio2+0x444>
    3ce4:	00800044 	movi	r2,1
    3ce8:	20808d26 	beq	r4,r2,3f20 <__kernel_rem_pio2+0x648>
    3cec:	00800084 	movi	r2,2
    3cf0:	20800a1e 	bne	r4,r2,3d1c <__kernel_rem_pio2+0x444>
    3cf4:	90bfffc4 	addi	r2,r18,-1
    3cf8:	1085883a 	add	r2,r2,r2
    3cfc:	1085883a 	add	r2,r2,r2
    3d00:	d885883a 	add	r2,sp,r2
    3d04:	10807804 	addi	r2,r2,480
    3d08:	11400017 	ldw	r5,0(r2)
    3d0c:	01001034 	movhi	r4,64
    3d10:	213fffc4 	addi	r4,r4,-1
    3d14:	2908703a 	and	r4,r5,r4
    3d18:	11000015 	stw	r4,0(r2)
    3d1c:	00800084 	movi	r2,2
    3d20:	98805d26 	beq	r19,r2,3e98 <__kernel_rem_pio2+0x5c0>
    3d24:	400b883a 	mov	r5,r8
    3d28:	000d883a 	mov	r6,zero
    3d2c:	000f883a 	mov	r7,zero
    3d30:	a809883a 	mov	r4,r21
    3d34:	da009b15 	stw	r8,620(sp)
    3d38:	000577c0 	call	577c <__eqdf2>
    3d3c:	da009b17 	ldw	r8,620(sp)
    3d40:	10012b1e 	bne	r2,zero,41f0 <__kernel_rem_pio2+0x918>
    3d44:	da009417 	ldw	r8,592(sp)
    3d48:	917fffc4 	addi	r5,r18,-1
    3d4c:	2a000e16 	blt	r5,r8,3d88 <__kernel_rem_pio2+0x4b0>
    3d50:	00900034 	movhi	r2,16384
    3d54:	10bfffc4 	addi	r2,r2,-1
    3d58:	9085883a 	add	r2,r18,r2
    3d5c:	1085883a 	add	r2,r2,r2
    3d60:	d9809717 	ldw	r6,604(sp)
    3d64:	1085883a 	add	r2,r2,r2
    3d68:	d9007804 	addi	r4,sp,480
    3d6c:	0007883a 	mov	r3,zero
    3d70:	2085883a 	add	r2,r4,r2
    3d74:	11000017 	ldw	r4,0(r2)
    3d78:	10bfff04 	addi	r2,r2,-4
    3d7c:	1906b03a 	or	r3,r3,r4
    3d80:	11bffc1e 	bne	r2,r6,3d74 <__alt_exception_stack_pointer+0xf8003d74>
    3d84:	1800821e 	bne	r3,zero,3f90 <__kernel_rem_pio2+0x6b8>
    3d88:	da009817 	ldw	r8,608(sp)
    3d8c:	40800017 	ldw	r2,0(r8)
    3d90:	1001151e 	bne	r2,zero,41e8 <__kernel_rem_pio2+0x910>
    3d94:	d8809617 	ldw	r2,600(sp)
    3d98:	05000044 	movi	r20,1
    3d9c:	10bfff04 	addi	r2,r2,-4
    3da0:	10c00117 	ldw	r3,4(r2)
    3da4:	a5000044 	addi	r20,r20,1
    3da8:	183ffc26 	beq	r3,zero,3d9c <__alt_exception_stack_pointer+0xf8003d9c>
    3dac:	9529883a 	add	r20,r18,r20
    3db0:	90800044 	addi	r2,r18,1
    3db4:	dd009115 	stw	r20,580(sp)
    3db8:	a0803216 	blt	r20,r2,3e84 <__kernel_rem_pio2+0x5ac>
    3dbc:	da009317 	ldw	r8,588(sp)
    3dc0:	d8c09117 	ldw	r3,580(sp)
    3dc4:	44a3883a 	add	r17,r8,r18
    3dc8:	da009217 	ldw	r8,584(sp)
    3dcc:	882290fa 	slli	r17,r17,3
    3dd0:	40a5883a 	add	r18,r8,r2
    3dd4:	da009517 	ldw	r8,596(sp)
    3dd8:	100490fa 	slli	r2,r2,3
    3ddc:	94a5883a 	add	r18,r18,r18
    3de0:	40eb883a 	add	r21,r8,r3
    3de4:	da00a717 	ldw	r8,668(sp)
    3de8:	ad6b883a 	add	r21,r21,r21
    3dec:	94a5883a 	add	r18,r18,r18
    3df0:	ad6b883a 	add	r21,r21,r21
    3df4:	d8c05004 	addi	r3,sp,320
    3df8:	44a5883a 	add	r18,r8,r18
    3dfc:	1c63883a 	add	r17,r3,r17
    3e00:	d8a7883a 	add	r19,sp,r2
    3e04:	456b883a 	add	r21,r8,r21
    3e08:	91000017 	ldw	r4,0(r18)
    3e0c:	0006ac80 	call	6ac8 <__floatsidf>
    3e10:	da008d17 	ldw	r8,564(sp)
    3e14:	88800015 	stw	r2,0(r17)
    3e18:	88c00115 	stw	r3,4(r17)
    3e1c:	40001b16 	blt	r8,zero,3e8c <__kernel_rem_pio2+0x5b4>
    3e20:	dd008e17 	ldw	r20,568(sp)
    3e24:	882d883a 	mov	r22,r17
    3e28:	002f883a 	mov	r23,zero
    3e2c:	0039883a 	mov	fp,zero
    3e30:	b1800017 	ldw	r6,0(r22)
    3e34:	b1c00117 	ldw	r7,4(r22)
    3e38:	a1000017 	ldw	r4,0(r20)
    3e3c:	a1400117 	ldw	r5,4(r20)
    3e40:	a5000204 	addi	r20,r20,8
    3e44:	b5bffe04 	addi	r22,r22,-8
    3e48:	00058e00 	call	58e0 <__muldf3>
    3e4c:	b809883a 	mov	r4,r23
    3e50:	e00b883a 	mov	r5,fp
    3e54:	100d883a 	mov	r6,r2
    3e58:	180f883a 	mov	r7,r3
    3e5c:	0004ed00 	call	4ed0 <__adddf3>
    3e60:	102f883a 	mov	r23,r2
    3e64:	1839883a 	mov	fp,r3
    3e68:	a43ff11e 	bne	r20,r16,3e30 <__alt_exception_stack_pointer+0xf8003e30>
    3e6c:	9dc00015 	stw	r23,0(r19)
    3e70:	9f000115 	stw	fp,4(r19)
    3e74:	94800104 	addi	r18,r18,4
    3e78:	8c400204 	addi	r17,r17,8
    3e7c:	9cc00204 	addi	r19,r19,8
    3e80:	957fe11e 	bne	r18,r21,3e08 <__alt_exception_stack_pointer+0xf8003e08>
    3e84:	dc809117 	ldw	r18,580(sp)
    3e88:	003f0f06 	br	3ac8 <__alt_exception_stack_pointer+0xf8003ac8>
    3e8c:	002f883a 	mov	r23,zero
    3e90:	0039883a 	mov	fp,zero
    3e94:	003ff506 	br	3e6c <__alt_exception_stack_pointer+0xf8003e6c>
    3e98:	480d883a 	mov	r6,r9
    3e9c:	180f883a 	mov	r7,r3
    3ea0:	0009883a 	mov	r4,zero
    3ea4:	014ffc34 	movhi	r5,16368
    3ea8:	000614c0 	call	614c <__subdf3>
    3eac:	102b883a 	mov	r21,r2
    3eb0:	1811883a 	mov	r8,r3
    3eb4:	a03f9b26 	beq	r20,zero,3d24 <__alt_exception_stack_pointer+0xf8003d24>
    3eb8:	d9809017 	ldw	r6,576(sp)
    3ebc:	0009883a 	mov	r4,zero
    3ec0:	014ffc34 	movhi	r5,16368
    3ec4:	d8c09b15 	stw	r3,620(sp)
    3ec8:	0004b3c0 	call	4b3c <scalbn>
    3ecc:	da009b17 	ldw	r8,620(sp)
    3ed0:	a809883a 	mov	r4,r21
    3ed4:	100d883a 	mov	r6,r2
    3ed8:	400b883a 	mov	r5,r8
    3edc:	180f883a 	mov	r7,r3
    3ee0:	000614c0 	call	614c <__subdf3>
    3ee4:	102b883a 	mov	r21,r2
    3ee8:	1811883a 	mov	r8,r3
    3eec:	003f8d06 	br	3d24 <__alt_exception_stack_pointer+0xf8003d24>
    3ef0:	0005883a 	mov	r2,zero
    3ef4:	0007883a 	mov	r3,zero
    3ef8:	003eac06 	br	39ac <__alt_exception_stack_pointer+0xf80039ac>
    3efc:	d8809017 	ldw	r2,576(sp)
    3f00:	1000121e 	bne	r2,zero,3f4c <__kernel_rem_pio2+0x674>
    3f04:	90bfffc4 	addi	r2,r18,-1
    3f08:	1085883a 	add	r2,r2,r2
    3f0c:	1085883a 	add	r2,r2,r2
    3f10:	d885883a 	add	r2,sp,r2
    3f14:	14c07817 	ldw	r19,480(r2)
    3f18:	9827d5fa 	srai	r19,r19,23
    3f1c:	003f5606 	br	3c78 <__alt_exception_stack_pointer+0xf8003c78>
    3f20:	90bfffc4 	addi	r2,r18,-1
    3f24:	1085883a 	add	r2,r2,r2
    3f28:	1085883a 	add	r2,r2,r2
    3f2c:	d885883a 	add	r2,sp,r2
    3f30:	10807804 	addi	r2,r2,480
    3f34:	11000017 	ldw	r4,0(r2)
    3f38:	01402034 	movhi	r5,128
    3f3c:	297fffc4 	addi	r5,r5,-1
    3f40:	2148703a 	and	r4,r4,r5
    3f44:	11000015 	stw	r4,0(r2)
    3f48:	003f7406 	br	3d1c <__alt_exception_stack_pointer+0xf8003d1c>
    3f4c:	4809883a 	mov	r4,r9
    3f50:	180b883a 	mov	r5,r3
    3f54:	000d883a 	mov	r6,zero
    3f58:	01cff834 	movhi	r7,16352
    3f5c:	d8c09a15 	stw	r3,616(sp)
    3f60:	d8c09b15 	stw	r3,620(sp)
    3f64:	da409915 	stw	r9,612(sp)
    3f68:	00058040 	call	5804 <__gedf2>
    3f6c:	d8c09a17 	ldw	r3,616(sp)
    3f70:	da009b17 	ldw	r8,620(sp)
    3f74:	da409917 	ldw	r9,612(sp)
    3f78:	1000920e 	bge	r2,zero,41c4 <__kernel_rem_pio2+0x8ec>
    3f7c:	0027883a 	mov	r19,zero
    3f80:	003f6806 	br	3d24 <__alt_exception_stack_pointer+0xf8003d24>
    3f84:	002d883a 	mov	r22,zero
    3f88:	002b883a 	mov	r21,zero
    3f8c:	003eb006 	br	3a50 <__alt_exception_stack_pointer+0xf8003a50>
    3f90:	2945883a 	add	r2,r5,r5
    3f94:	da009017 	ldw	r8,576(sp)
    3f98:	1085883a 	add	r2,r2,r2
    3f9c:	d885883a 	add	r2,sp,r2
    3fa0:	10807817 	ldw	r2,480(r2)
    3fa4:	423ffa04 	addi	r8,r8,-24
    3fa8:	dc409115 	stw	r17,580(sp)
    3fac:	dcc08d15 	stw	r19,564(sp)
    3fb0:	da009015 	stw	r8,576(sp)
    3fb4:	dd809417 	ldw	r22,592(sp)
    3fb8:	2823883a 	mov	r17,r5
    3fbc:	10000e1e 	bne	r2,zero,3ff8 <__kernel_rem_pio2+0x720>
    3fc0:	00900034 	movhi	r2,16384
    3fc4:	10bfffc4 	addi	r2,r2,-1
    3fc8:	2885883a 	add	r2,r5,r2
    3fcc:	1085883a 	add	r2,r2,r2
    3fd0:	d8c07804 	addi	r3,sp,480
    3fd4:	1085883a 	add	r2,r2,r2
    3fd8:	1885883a 	add	r2,r3,r2
    3fdc:	4007883a 	mov	r3,r8
    3fe0:	10bfff04 	addi	r2,r2,-4
    3fe4:	11000117 	ldw	r4,4(r2)
    3fe8:	8c7fffc4 	addi	r17,r17,-1
    3fec:	18fffa04 	addi	r3,r3,-24
    3ff0:	203ffb26 	beq	r4,zero,3fe0 <__alt_exception_stack_pointer+0xf8003fe0>
    3ff4:	d8c09015 	stw	r3,576(sp)
    3ff8:	d9809017 	ldw	r6,576(sp)
    3ffc:	0009883a 	mov	r4,zero
    4000:	014ffc34 	movhi	r5,16368
    4004:	0004b3c0 	call	4b3c <scalbn>
    4008:	1029883a 	mov	r20,r2
    400c:	182b883a 	mov	r21,r3
    4010:	88018416 	blt	r17,zero,4624 <__kernel_rem_pio2+0xd4c>
    4014:	881090fa 	slli	r8,r17,3
    4018:	d8c07804 	addi	r3,sp,480
    401c:	da008e15 	stw	r8,568(sp)
    4020:	d8808e17 	ldw	r2,568(sp)
    4024:	8c51883a 	add	r8,r17,r17
    4028:	4211883a 	add	r8,r8,r8
    402c:	d8a1883a 	add	r16,sp,r2
    4030:	1a25883a 	add	r18,r3,r8
    4034:	da3ffe04 	addi	r8,sp,-8
    4038:	da008c15 	stw	r8,560(sp)
    403c:	8039883a 	mov	fp,r16
    4040:	91000017 	ldw	r4,0(r18)
    4044:	e73ffe04 	addi	fp,fp,-8
    4048:	94bfff04 	addi	r18,r18,-4
    404c:	0006ac80 	call	6ac8 <__floatsidf>
    4050:	a00d883a 	mov	r6,r20
    4054:	a80f883a 	mov	r7,r21
    4058:	1009883a 	mov	r4,r2
    405c:	180b883a 	mov	r5,r3
    4060:	00058e00 	call	58e0 <__muldf3>
    4064:	a009883a 	mov	r4,r20
    4068:	a80b883a 	mov	r5,r21
    406c:	e0800215 	stw	r2,8(fp)
    4070:	e0c00315 	stw	r3,12(fp)
    4074:	000d883a 	mov	r6,zero
    4078:	01cf9c34 	movhi	r7,15984
    407c:	00058e00 	call	58e0 <__muldf3>
    4080:	da008c17 	ldw	r8,560(sp)
    4084:	1029883a 	mov	r20,r2
    4088:	182b883a 	mov	r21,r3
    408c:	e23fec1e 	bne	fp,r8,4040 <__alt_exception_stack_pointer+0xf8004040>
    4090:	0029883a 	mov	r20,zero
    4094:	b0004f16 	blt	r22,zero,41d4 <__kernel_rem_pio2+0x8fc>
    4098:	05400074 	movhi	r21,1
    409c:	014ffe74 	movhi	r5,16377
    40a0:	ad54c104 	addi	r21,r21,21252
    40a4:	8027883a 	mov	r19,r16
    40a8:	01100034 	movhi	r4,16384
    40ac:	29487ec4 	addi	r5,r5,8699
    40b0:	0039883a 	mov	fp,zero
    40b4:	002f883a 	mov	r23,zero
    40b8:	0025883a 	mov	r18,zero
    40bc:	00000506 	br	40d4 <__kernel_rem_pio2+0x7fc>
    40c0:	9cc00204 	addi	r19,r19,8
    40c4:	a4800f16 	blt	r20,r18,4104 <__kernel_rem_pio2+0x82c>
    40c8:	a9000017 	ldw	r4,0(r21)
    40cc:	a9400117 	ldw	r5,4(r21)
    40d0:	ad400204 	addi	r21,r21,8
    40d4:	99800017 	ldw	r6,0(r19)
    40d8:	99c00117 	ldw	r7,4(r19)
    40dc:	94800044 	addi	r18,r18,1
    40e0:	00058e00 	call	58e0 <__muldf3>
    40e4:	e009883a 	mov	r4,fp
    40e8:	b80b883a 	mov	r5,r23
    40ec:	100d883a 	mov	r6,r2
    40f0:	180f883a 	mov	r7,r3
    40f4:	0004ed00 	call	4ed0 <__adddf3>
    40f8:	1039883a 	mov	fp,r2
    40fc:	182f883a 	mov	r23,r3
    4100:	b4bfef0e 	bge	r22,r18,40c0 <__alt_exception_stack_pointer+0xf80040c0>
    4104:	a00490fa 	slli	r2,r20,3
    4108:	da008c17 	ldw	r8,560(sp)
    410c:	843ffe04 	addi	r16,r16,-8
    4110:	d885883a 	add	r2,sp,r2
    4114:	10802804 	addi	r2,r2,160
    4118:	17000015 	stw	fp,0(r2)
    411c:	15c00115 	stw	r23,4(r2)
    4120:	a5000044 	addi	r20,r20,1
    4124:	823fdb1e 	bne	r16,r8,4094 <__alt_exception_stack_pointer+0xf8004094>
    4128:	da00a617 	ldw	r8,664(sp)
    412c:	00800084 	movi	r2,2
    4130:	12006616 	blt	r2,r8,42cc <__kernel_rem_pio2+0x9f4>
    4134:	0200de16 	blt	zero,r8,44b0 <__kernel_rem_pio2+0xbd8>
    4138:	4000141e 	bne	r8,zero,418c <__kernel_rem_pio2+0x8b4>
    413c:	da008e17 	ldw	r8,568(sp)
    4140:	d8802804 	addi	r2,sp,160
    4144:	0007883a 	mov	r3,zero
    4148:	1225883a 	add	r18,r2,r8
    414c:	043fffc4 	movi	r16,-1
    4150:	0005883a 	mov	r2,zero
    4154:	91800017 	ldw	r6,0(r18)
    4158:	91c00117 	ldw	r7,4(r18)
    415c:	1009883a 	mov	r4,r2
    4160:	180b883a 	mov	r5,r3
    4164:	8c7fffc4 	addi	r17,r17,-1
    4168:	0004ed00 	call	4ed0 <__adddf3>
    416c:	94bffe04 	addi	r18,r18,-8
    4170:	8c3ff81e 	bne	r17,r16,4154 <__alt_exception_stack_pointer+0xf8004154>
    4174:	da008d17 	ldw	r8,564(sp)
    4178:	40000126 	beq	r8,zero,4180 <__kernel_rem_pio2+0x8a8>
    417c:	18e0003c 	xorhi	r3,r3,32768
    4180:	da008f17 	ldw	r8,572(sp)
    4184:	40800015 	stw	r2,0(r8)
    4188:	40c00115 	stw	r3,4(r8)
    418c:	da009117 	ldw	r8,580(sp)
    4190:	408001cc 	andi	r2,r8,7
    4194:	dfc0a517 	ldw	ra,660(sp)
    4198:	df00a417 	ldw	fp,656(sp)
    419c:	ddc0a317 	ldw	r23,652(sp)
    41a0:	dd80a217 	ldw	r22,648(sp)
    41a4:	dd40a117 	ldw	r21,644(sp)
    41a8:	dd00a017 	ldw	r20,640(sp)
    41ac:	dcc09f17 	ldw	r19,636(sp)
    41b0:	dc809e17 	ldw	r18,632(sp)
    41b4:	dc409d17 	ldw	r17,628(sp)
    41b8:	dc009c17 	ldw	r16,624(sp)
    41bc:	dec0a604 	addi	sp,sp,664
    41c0:	f800283a 	ret
    41c4:	8c400044 	addi	r17,r17,1
    41c8:	04810d0e 	bge	zero,r18,4600 <__kernel_rem_pio2+0xd28>
    41cc:	04c00084 	movi	r19,2
    41d0:	003eac06 	br	3c84 <__alt_exception_stack_pointer+0xf8003c84>
    41d4:	0039883a 	mov	fp,zero
    41d8:	002f883a 	mov	r23,zero
    41dc:	003fc906 	br	4104 <__alt_exception_stack_pointer+0xf8004104>
    41e0:	0029883a 	mov	r20,zero
    41e4:	003ebd06 	br	3cdc <__alt_exception_stack_pointer+0xf8003cdc>
    41e8:	05000044 	movi	r20,1
    41ec:	003eef06 	br	3dac <__alt_exception_stack_pointer+0xf8003dac>
    41f0:	4029883a 	mov	r20,r8
    41f4:	da009017 	ldw	r8,576(sp)
    41f8:	a809883a 	mov	r4,r21
    41fc:	a00b883a 	mov	r5,r20
    4200:	020dc83a 	sub	r6,zero,r8
    4204:	dc409115 	stw	r17,580(sp)
    4208:	dd809417 	ldw	r22,592(sp)
    420c:	dcc08d15 	stw	r19,564(sp)
    4210:	0004b3c0 	call	4b3c <scalbn>
    4214:	000d883a 	mov	r6,zero
    4218:	01d05c34 	movhi	r7,16752
    421c:	1009883a 	mov	r4,r2
    4220:	180b883a 	mov	r5,r3
    4224:	102b883a 	mov	r21,r2
    4228:	1823883a 	mov	r17,r3
    422c:	00058040 	call	5804 <__gedf2>
    4230:	1000e916 	blt	r2,zero,45d8 <__kernel_rem_pio2+0xd00>
    4234:	000d883a 	mov	r6,zero
    4238:	01cf9c34 	movhi	r7,15984
    423c:	880b883a 	mov	r5,r17
    4240:	a809883a 	mov	r4,r21
    4244:	00058e00 	call	58e0 <__muldf3>
    4248:	180b883a 	mov	r5,r3
    424c:	1009883a 	mov	r4,r2
    4250:	0006a480 	call	6a48 <__fixdfsi>
    4254:	1029883a 	mov	r20,r2
    4258:	9485883a 	add	r2,r18,r18
    425c:	1085883a 	add	r2,r2,r2
    4260:	a009883a 	mov	r4,r20
    4264:	d8a1883a 	add	r16,sp,r2
    4268:	0006ac80 	call	6ac8 <__floatsidf>
    426c:	000d883a 	mov	r6,zero
    4270:	01d05c34 	movhi	r7,16752
    4274:	1009883a 	mov	r4,r2
    4278:	180b883a 	mov	r5,r3
    427c:	00058e00 	call	58e0 <__muldf3>
    4280:	880b883a 	mov	r5,r17
    4284:	100d883a 	mov	r6,r2
    4288:	180f883a 	mov	r7,r3
    428c:	a809883a 	mov	r4,r21
    4290:	000614c0 	call	614c <__subdf3>
    4294:	180b883a 	mov	r5,r3
    4298:	1009883a 	mov	r4,r2
    429c:	0006a480 	call	6a48 <__fixdfsi>
    42a0:	da009017 	ldw	r8,576(sp)
    42a4:	94400044 	addi	r17,r18,1
    42a8:	8c47883a 	add	r3,r17,r17
    42ac:	84007804 	addi	r16,r16,480
    42b0:	18c7883a 	add	r3,r3,r3
    42b4:	80800015 	stw	r2,0(r16)
    42b8:	d8c7883a 	add	r3,sp,r3
    42bc:	42000604 	addi	r8,r8,24
    42c0:	da009015 	stw	r8,576(sp)
    42c4:	1d007815 	stw	r20,480(r3)
    42c8:	003f4b06 	br	3ff8 <__alt_exception_stack_pointer+0xf8003ff8>
    42cc:	da00a617 	ldw	r8,664(sp)
    42d0:	008000c4 	movi	r2,3
    42d4:	40bfad1e 	bne	r8,r2,418c <__alt_exception_stack_pointer+0xf800418c>
    42d8:	0440bc0e 	bge	zero,r17,45cc <__kernel_rem_pio2+0xcf4>
    42dc:	da008e17 	ldw	r8,568(sp)
    42e0:	882090fa 	slli	r16,r17,3
    42e4:	dd402804 	addi	r21,sp,160
    42e8:	da05883a 	add	r2,sp,r8
    42ec:	10802804 	addi	r2,r2,160
    42f0:	15c00017 	ldw	r23,0(r2)
    42f4:	15800117 	ldw	r22,4(r2)
    42f8:	8029883a 	mov	r20,r16
    42fc:	843ffe04 	addi	r16,r16,-8
    4300:	ac21883a 	add	r16,r21,r16
    4304:	ad29883a 	add	r20,r21,r20
    4308:	dac02604 	addi	r11,sp,152
    430c:	8811883a 	mov	r8,r17
    4310:	84400017 	ldw	r17,0(r16)
    4314:	87000117 	ldw	fp,4(r16)
    4318:	b80d883a 	mov	r6,r23
    431c:	b00f883a 	mov	r7,r22
    4320:	8809883a 	mov	r4,r17
    4324:	e00b883a 	mov	r5,fp
    4328:	da009b15 	stw	r8,620(sp)
    432c:	dac09915 	stw	r11,612(sp)
    4330:	0004ed00 	call	4ed0 <__adddf3>
    4334:	100d883a 	mov	r6,r2
    4338:	180f883a 	mov	r7,r3
    433c:	8809883a 	mov	r4,r17
    4340:	e00b883a 	mov	r5,fp
    4344:	1027883a 	mov	r19,r2
    4348:	1825883a 	mov	r18,r3
    434c:	000614c0 	call	614c <__subdf3>
    4350:	b80d883a 	mov	r6,r23
    4354:	b00f883a 	mov	r7,r22
    4358:	1009883a 	mov	r4,r2
    435c:	180b883a 	mov	r5,r3
    4360:	0004ed00 	call	4ed0 <__adddf3>
    4364:	dac09917 	ldw	r11,612(sp)
    4368:	a0800015 	stw	r2,0(r20)
    436c:	a0c00115 	stw	r3,4(r20)
    4370:	84c00015 	stw	r19,0(r16)
    4374:	84800115 	stw	r18,4(r16)
    4378:	843ffe04 	addi	r16,r16,-8
    437c:	a53ffe04 	addi	r20,r20,-8
    4380:	982f883a 	mov	r23,r19
    4384:	902d883a 	mov	r22,r18
    4388:	da009b17 	ldw	r8,620(sp)
    438c:	5c3fe01e 	bne	r11,r16,4310 <__alt_exception_stack_pointer+0xf8004310>
    4390:	00800044 	movi	r2,1
    4394:	12008d0e 	bge	r2,r8,45cc <__kernel_rem_pio2+0xcf4>
    4398:	402090fa 	slli	r16,r8,3
    439c:	da008e17 	ldw	r8,568(sp)
    43a0:	8023883a 	mov	r17,r16
    43a4:	da05883a 	add	r2,sp,r8
    43a8:	10802804 	addi	r2,r2,160
    43ac:	15800017 	ldw	r22,0(r2)
    43b0:	15000117 	ldw	r20,4(r2)
    43b4:	ac63883a 	add	r17,r21,r17
    43b8:	843ffe04 	addi	r16,r16,-8
    43bc:	ac21883a 	add	r16,r21,r16
    43c0:	8825883a 	mov	r18,r17
    43c4:	8811883a 	mov	r8,r17
    43c8:	84400017 	ldw	r17,0(r16)
    43cc:	87000117 	ldw	fp,4(r16)
    43d0:	b009883a 	mov	r4,r22
    43d4:	a00b883a 	mov	r5,r20
    43d8:	880d883a 	mov	r6,r17
    43dc:	e00f883a 	mov	r7,fp
    43e0:	da009b15 	stw	r8,620(sp)
    43e4:	0004ed00 	call	4ed0 <__adddf3>
    43e8:	100d883a 	mov	r6,r2
    43ec:	180f883a 	mov	r7,r3
    43f0:	8809883a 	mov	r4,r17
    43f4:	e00b883a 	mov	r5,fp
    43f8:	102f883a 	mov	r23,r2
    43fc:	1827883a 	mov	r19,r3
    4400:	000614c0 	call	614c <__subdf3>
    4404:	b00d883a 	mov	r6,r22
    4408:	a00f883a 	mov	r7,r20
    440c:	1009883a 	mov	r4,r2
    4410:	180b883a 	mov	r5,r3
    4414:	0004ed00 	call	4ed0 <__adddf3>
    4418:	90800015 	stw	r2,0(r18)
    441c:	90c00115 	stw	r3,4(r18)
    4420:	85c00015 	stw	r23,0(r16)
    4424:	84c00115 	stw	r19,4(r16)
    4428:	843ffe04 	addi	r16,r16,-8
    442c:	94bffe04 	addi	r18,r18,-8
    4430:	b82d883a 	mov	r22,r23
    4434:	9829883a 	mov	r20,r19
    4438:	da009b17 	ldw	r8,620(sp)
    443c:	ac3fe21e 	bne	r21,r16,43c8 <__alt_exception_stack_pointer+0xf80043c8>
    4440:	4023883a 	mov	r17,r8
    4444:	dc002a04 	addi	r16,sp,168
    4448:	0005883a 	mov	r2,zero
    444c:	0007883a 	mov	r3,zero
    4450:	89800017 	ldw	r6,0(r17)
    4454:	89c00117 	ldw	r7,4(r17)
    4458:	1009883a 	mov	r4,r2
    445c:	8c7ffe04 	addi	r17,r17,-8
    4460:	180b883a 	mov	r5,r3
    4464:	0004ed00 	call	4ed0 <__adddf3>
    4468:	847ff91e 	bne	r16,r17,4450 <__alt_exception_stack_pointer+0xf8004450>
    446c:	da008d17 	ldw	r8,564(sp)
    4470:	40004726 	beq	r8,zero,4590 <__kernel_rem_pio2+0xcb8>
    4474:	d9002b17 	ldw	r4,172(sp)
    4478:	d9402917 	ldw	r5,164(sp)
    447c:	d9802a17 	ldw	r6,168(sp)
    4480:	da008f17 	ldw	r8,572(sp)
    4484:	d9c02817 	ldw	r7,160(sp)
    4488:	2960003c 	xorhi	r5,r5,32768
    448c:	2120003c 	xorhi	r4,r4,32768
    4490:	18e0003c 	xorhi	r3,r3,32768
    4494:	41c00015 	stw	r7,0(r8)
    4498:	41400115 	stw	r5,4(r8)
    449c:	41800215 	stw	r6,8(r8)
    44a0:	41000315 	stw	r4,12(r8)
    44a4:	40800415 	stw	r2,16(r8)
    44a8:	40c00515 	stw	r3,20(r8)
    44ac:	003f3706 	br	418c <__alt_exception_stack_pointer+0xf800418c>
    44b0:	da008e17 	ldw	r8,568(sp)
    44b4:	d8802804 	addi	r2,sp,160
    44b8:	dc002604 	addi	r16,sp,152
    44bc:	1225883a 	add	r18,r2,r8
    44c0:	0007883a 	mov	r3,zero
    44c4:	0005883a 	mov	r2,zero
    44c8:	91800017 	ldw	r6,0(r18)
    44cc:	91c00117 	ldw	r7,4(r18)
    44d0:	1009883a 	mov	r4,r2
    44d4:	94bffe04 	addi	r18,r18,-8
    44d8:	180b883a 	mov	r5,r3
    44dc:	0004ed00 	call	4ed0 <__adddf3>
    44e0:	943ff91e 	bne	r18,r16,44c8 <__alt_exception_stack_pointer+0xf80044c8>
    44e4:	da008d17 	ldw	r8,564(sp)
    44e8:	d9002817 	ldw	r4,160(sp)
    44ec:	d9402917 	ldw	r5,164(sp)
    44f0:	40001a26 	beq	r8,zero,455c <__kernel_rem_pio2+0xc84>
    44f4:	da008f17 	ldw	r8,572(sp)
    44f8:	19a0003c 	xorhi	r6,r3,32768
    44fc:	180f883a 	mov	r7,r3
    4500:	41800115 	stw	r6,4(r8)
    4504:	40800015 	stw	r2,0(r8)
    4508:	100d883a 	mov	r6,r2
    450c:	000614c0 	call	614c <__subdf3>
    4510:	04400c0e 	bge	zero,r17,4544 <__kernel_rem_pio2+0xc6c>
    4514:	dc002a04 	addi	r16,sp,168
    4518:	04800044 	movi	r18,1
    451c:	81800017 	ldw	r6,0(r16)
    4520:	81c00117 	ldw	r7,4(r16)
    4524:	1009883a 	mov	r4,r2
    4528:	180b883a 	mov	r5,r3
    452c:	94800044 	addi	r18,r18,1
    4530:	0004ed00 	call	4ed0 <__adddf3>
    4534:	84000204 	addi	r16,r16,8
    4538:	8cbff80e 	bge	r17,r18,451c <__alt_exception_stack_pointer+0xf800451c>
    453c:	da008d17 	ldw	r8,564(sp)
    4540:	40004226 	beq	r8,zero,464c <__kernel_rem_pio2+0xd74>
    4544:	da008f17 	ldw	r8,572(sp)
    4548:	1009883a 	mov	r4,r2
    454c:	18a0003c 	xorhi	r2,r3,32768
    4550:	41000215 	stw	r4,8(r8)
    4554:	40800315 	stw	r2,12(r8)
    4558:	003f0c06 	br	418c <__alt_exception_stack_pointer+0xf800418c>
    455c:	da008f17 	ldw	r8,572(sp)
    4560:	100d883a 	mov	r6,r2
    4564:	180f883a 	mov	r7,r3
    4568:	40800015 	stw	r2,0(r8)
    456c:	40c00115 	stw	r3,4(r8)
    4570:	000614c0 	call	614c <__subdf3>
    4574:	047fe716 	blt	zero,r17,4514 <__alt_exception_stack_pointer+0xf8004514>
    4578:	da008f17 	ldw	r8,572(sp)
    457c:	1009883a 	mov	r4,r2
    4580:	1805883a 	mov	r2,r3
    4584:	41000215 	stw	r4,8(r8)
    4588:	40800315 	stw	r2,12(r8)
    458c:	003eff06 	br	418c <__alt_exception_stack_pointer+0xf800418c>
    4590:	da008f17 	ldw	r8,572(sp)
    4594:	d9802817 	ldw	r6,160(sp)
    4598:	d9402a17 	ldw	r5,168(sp)
    459c:	d9002b17 	ldw	r4,172(sp)
    45a0:	41800015 	stw	r6,0(r8)
    45a4:	d9802917 	ldw	r6,164(sp)
    45a8:	41400215 	stw	r5,8(r8)
    45ac:	41000315 	stw	r4,12(r8)
    45b0:	41800115 	stw	r6,4(r8)
    45b4:	40800415 	stw	r2,16(r8)
    45b8:	40c00515 	stw	r3,20(r8)
    45bc:	003ef306 	br	418c <__alt_exception_stack_pointer+0xf800418c>
    45c0:	da00a617 	ldw	r8,664(sp)
    45c4:	008000c4 	movi	r2,3
    45c8:	40bef01e 	bne	r8,r2,418c <__alt_exception_stack_pointer+0xf800418c>
    45cc:	0005883a 	mov	r2,zero
    45d0:	0007883a 	mov	r3,zero
    45d4:	003fa506 	br	446c <__alt_exception_stack_pointer+0xf800446c>
    45d8:	9485883a 	add	r2,r18,r18
    45dc:	1085883a 	add	r2,r2,r2
    45e0:	d8a1883a 	add	r16,sp,r2
    45e4:	880b883a 	mov	r5,r17
    45e8:	a809883a 	mov	r4,r21
    45ec:	84007804 	addi	r16,r16,480
    45f0:	0006a480 	call	6a48 <__fixdfsi>
    45f4:	80800015 	stw	r2,0(r16)
    45f8:	9023883a 	mov	r17,r18
    45fc:	003e7e06 	br	3ff8 <__alt_exception_stack_pointer+0xf8003ff8>
    4600:	a80d883a 	mov	r6,r21
    4604:	400f883a 	mov	r7,r8
    4608:	0009883a 	mov	r4,zero
    460c:	014ffc34 	movhi	r5,16368
    4610:	000614c0 	call	614c <__subdf3>
    4614:	102b883a 	mov	r21,r2
    4618:	1811883a 	mov	r8,r3
    461c:	04c00084 	movi	r19,2
    4620:	003dc006 	br	3d24 <__alt_exception_stack_pointer+0xf8003d24>
    4624:	da00a617 	ldw	r8,664(sp)
    4628:	00800084 	movi	r2,2
    462c:	123fe416 	blt	r2,r8,45c0 <__alt_exception_stack_pointer+0xf80045c0>
    4630:	02000c16 	blt	zero,r8,4664 <__kernel_rem_pio2+0xd8c>
    4634:	403ed51e 	bne	r8,zero,418c <__alt_exception_stack_pointer+0xf800418c>
    4638:	0005883a 	mov	r2,zero
    463c:	0007883a 	mov	r3,zero
    4640:	003ecc06 	br	4174 <__alt_exception_stack_pointer+0xf8004174>
    4644:	d8009215 	stw	zero,584(sp)
    4648:	003cc106 	br	3950 <__alt_exception_stack_pointer+0xf8003950>
    464c:	da008f17 	ldw	r8,572(sp)
    4650:	1009883a 	mov	r4,r2
    4654:	1805883a 	mov	r2,r3
    4658:	41000215 	stw	r4,8(r8)
    465c:	40800315 	stw	r2,12(r8)
    4660:	003eca06 	br	418c <__alt_exception_stack_pointer+0xf800418c>
    4664:	0005883a 	mov	r2,zero
    4668:	0007883a 	mov	r3,zero
    466c:	003f9d06 	br	44e4 <__alt_exception_stack_pointer+0xf80044e4>

00004670 <__kernel_sin>:
    4670:	00a00034 	movhi	r2,32768
    4674:	defff404 	addi	sp,sp,-48
    4678:	10bfffc4 	addi	r2,r2,-1
    467c:	00cf9034 	movhi	r3,15936
    4680:	ddc00915 	stw	r23,36(sp)
    4684:	dd800815 	stw	r22,32(sp)
    4688:	dc400315 	stw	r17,12(sp)
    468c:	dc000215 	stw	r16,8(sp)
    4690:	dfc00b15 	stw	ra,44(sp)
    4694:	df000a15 	stw	fp,40(sp)
    4698:	dd400715 	stw	r21,28(sp)
    469c:	dd000615 	stw	r20,24(sp)
    46a0:	dcc00515 	stw	r19,20(sp)
    46a4:	dc800415 	stw	r18,16(sp)
    46a8:	2884703a 	and	r2,r5,r2
    46ac:	18ffffc4 	addi	r3,r3,-1
    46b0:	2821883a 	mov	r16,r5
    46b4:	2023883a 	mov	r17,r4
    46b8:	302f883a 	mov	r23,r6
    46bc:	382d883a 	mov	r22,r7
    46c0:	18800216 	blt	r3,r2,46cc <__kernel_sin+0x5c>
    46c4:	0006a480 	call	6a48 <__fixdfsi>
    46c8:	10009926 	beq	r2,zero,4930 <__kernel_sin+0x2c0>
    46cc:	880d883a 	mov	r6,r17
    46d0:	800f883a 	mov	r7,r16
    46d4:	8809883a 	mov	r4,r17
    46d8:	800b883a 	mov	r5,r16
    46dc:	00058e00 	call	58e0 <__muldf3>
    46e0:	100d883a 	mov	r6,r2
    46e4:	180f883a 	mov	r7,r3
    46e8:	8809883a 	mov	r4,r17
    46ec:	800b883a 	mov	r5,r16
    46f0:	1027883a 	mov	r19,r2
    46f4:	1825883a 	mov	r18,r3
    46f8:	00058e00 	call	58e0 <__muldf3>
    46fc:	0196b434 	movhi	r6,23248
    4700:	01cf79b4 	movhi	r7,15846
    4704:	31b55f04 	addi	r6,r6,-10884
    4708:	39f64e84 	addi	r7,r7,-9926
    470c:	9809883a 	mov	r4,r19
    4710:	900b883a 	mov	r5,r18
    4714:	102b883a 	mov	r21,r2
    4718:	1829883a 	mov	r20,r3
    471c:	00058e00 	call	58e0 <__muldf3>
    4720:	01a28b34 	movhi	r6,35372
    4724:	01cf96f4 	movhi	r7,15963
    4728:	31a73ac4 	addi	r6,r6,-25365
    472c:	39f97984 	addi	r7,r7,-6682
    4730:	1009883a 	mov	r4,r2
    4734:	180b883a 	mov	r5,r3
    4738:	000614c0 	call	614c <__subdf3>
    473c:	980d883a 	mov	r6,r19
    4740:	900f883a 	mov	r7,r18
    4744:	1009883a 	mov	r4,r2
    4748:	180b883a 	mov	r5,r3
    474c:	00058e00 	call	58e0 <__muldf3>
    4750:	0195ecb4 	movhi	r6,22450
    4754:	01cfb1f4 	movhi	r7,16071
    4758:	31bf9f44 	addi	r6,r6,-387
    475c:	39c778c4 	addi	r7,r7,7651
    4760:	1009883a 	mov	r4,r2
    4764:	180b883a 	mov	r5,r3
    4768:	0004ed00 	call	4ed0 <__adddf3>
    476c:	980d883a 	mov	r6,r19
    4770:	900f883a 	mov	r7,r18
    4774:	1009883a 	mov	r4,r2
    4778:	180b883a 	mov	r5,r3
    477c:	00058e00 	call	58e0 <__muldf3>
    4780:	01867074 	movhi	r6,6593
    4784:	01cfcab4 	movhi	r7,16170
    4788:	31987544 	addi	r6,r6,25045
    478c:	39c06804 	addi	r7,r7,416
    4790:	1009883a 	mov	r4,r2
    4794:	180b883a 	mov	r5,r3
    4798:	000614c0 	call	614c <__subdf3>
    479c:	980d883a 	mov	r6,r19
    47a0:	900f883a 	mov	r7,r18
    47a4:	1009883a 	mov	r4,r2
    47a8:	180b883a 	mov	r5,r3
    47ac:	00058e00 	call	58e0 <__muldf3>
    47b0:	01844474 	movhi	r6,4369
    47b4:	01cfe074 	movhi	r7,16257
    47b8:	31be2984 	addi	r6,r6,-1882
    47bc:	39c44444 	addi	r7,r7,4369
    47c0:	1009883a 	mov	r4,r2
    47c4:	180b883a 	mov	r5,r3
    47c8:	0004ed00 	call	4ed0 <__adddf3>
    47cc:	1011883a 	mov	r8,r2
    47d0:	d8800c17 	ldw	r2,48(sp)
    47d4:	1839883a 	mov	fp,r3
    47d8:	10003e26 	beq	r2,zero,48d4 <__kernel_sin+0x264>
    47dc:	000d883a 	mov	r6,zero
    47e0:	01cff834 	movhi	r7,16352
    47e4:	b809883a 	mov	r4,r23
    47e8:	b00b883a 	mov	r5,r22
    47ec:	da000015 	stw	r8,0(sp)
    47f0:	00058e00 	call	58e0 <__muldf3>
    47f4:	da000017 	ldw	r8,0(sp)
    47f8:	e00f883a 	mov	r7,fp
    47fc:	a809883a 	mov	r4,r21
    4800:	400d883a 	mov	r6,r8
    4804:	a00b883a 	mov	r5,r20
    4808:	d8c00115 	stw	r3,4(sp)
    480c:	d8800015 	stw	r2,0(sp)
    4810:	00058e00 	call	58e0 <__muldf3>
    4814:	da800017 	ldw	r10,0(sp)
    4818:	da400117 	ldw	r9,4(sp)
    481c:	100d883a 	mov	r6,r2
    4820:	5009883a 	mov	r4,r10
    4824:	480b883a 	mov	r5,r9
    4828:	180f883a 	mov	r7,r3
    482c:	000614c0 	call	614c <__subdf3>
    4830:	980d883a 	mov	r6,r19
    4834:	900f883a 	mov	r7,r18
    4838:	1009883a 	mov	r4,r2
    483c:	180b883a 	mov	r5,r3
    4840:	00058e00 	call	58e0 <__muldf3>
    4844:	b80d883a 	mov	r6,r23
    4848:	b00f883a 	mov	r7,r22
    484c:	1009883a 	mov	r4,r2
    4850:	180b883a 	mov	r5,r3
    4854:	000614c0 	call	614c <__subdf3>
    4858:	01955574 	movhi	r6,21845
    485c:	01cff174 	movhi	r7,16325
    4860:	31955244 	addi	r6,r6,21833
    4864:	39d55544 	addi	r7,r7,21845
    4868:	a809883a 	mov	r4,r21
    486c:	a00b883a 	mov	r5,r20
    4870:	1027883a 	mov	r19,r2
    4874:	1825883a 	mov	r18,r3
    4878:	00058e00 	call	58e0 <__muldf3>
    487c:	100d883a 	mov	r6,r2
    4880:	180f883a 	mov	r7,r3
    4884:	9809883a 	mov	r4,r19
    4888:	900b883a 	mov	r5,r18
    488c:	0004ed00 	call	4ed0 <__adddf3>
    4890:	100d883a 	mov	r6,r2
    4894:	180f883a 	mov	r7,r3
    4898:	8809883a 	mov	r4,r17
    489c:	800b883a 	mov	r5,r16
    48a0:	000614c0 	call	614c <__subdf3>
    48a4:	dfc00b17 	ldw	ra,44(sp)
    48a8:	df000a17 	ldw	fp,40(sp)
    48ac:	ddc00917 	ldw	r23,36(sp)
    48b0:	dd800817 	ldw	r22,32(sp)
    48b4:	dd400717 	ldw	r21,28(sp)
    48b8:	dd000617 	ldw	r20,24(sp)
    48bc:	dcc00517 	ldw	r19,20(sp)
    48c0:	dc800417 	ldw	r18,16(sp)
    48c4:	dc400317 	ldw	r17,12(sp)
    48c8:	dc000217 	ldw	r16,8(sp)
    48cc:	dec00c04 	addi	sp,sp,48
    48d0:	f800283a 	ret
    48d4:	400d883a 	mov	r6,r8
    48d8:	9809883a 	mov	r4,r19
    48dc:	900b883a 	mov	r5,r18
    48e0:	180f883a 	mov	r7,r3
    48e4:	00058e00 	call	58e0 <__muldf3>
    48e8:	01955574 	movhi	r6,21845
    48ec:	01cff174 	movhi	r7,16325
    48f0:	31955244 	addi	r6,r6,21833
    48f4:	39d55544 	addi	r7,r7,21845
    48f8:	1009883a 	mov	r4,r2
    48fc:	180b883a 	mov	r5,r3
    4900:	000614c0 	call	614c <__subdf3>
    4904:	a80d883a 	mov	r6,r21
    4908:	a00f883a 	mov	r7,r20
    490c:	1009883a 	mov	r4,r2
    4910:	180b883a 	mov	r5,r3
    4914:	00058e00 	call	58e0 <__muldf3>
    4918:	880d883a 	mov	r6,r17
    491c:	800f883a 	mov	r7,r16
    4920:	1009883a 	mov	r4,r2
    4924:	180b883a 	mov	r5,r3
    4928:	0004ed00 	call	4ed0 <__adddf3>
    492c:	003fdd06 	br	48a4 <__alt_exception_stack_pointer+0xf80048a4>
    4930:	8805883a 	mov	r2,r17
    4934:	8007883a 	mov	r3,r16
    4938:	003fda06 	br	48a4 <__alt_exception_stack_pointer+0xf80048a4>

0000493c <fabs>:
    493c:	00e00034 	movhi	r3,32768
    4940:	18ffffc4 	addi	r3,r3,-1
    4944:	2005883a 	mov	r2,r4
    4948:	28c6703a 	and	r3,r5,r3
    494c:	f800283a 	ret

00004950 <floor>:
    4950:	2811d53a 	srai	r8,r5,20
    4954:	defffa04 	addi	sp,sp,-24
    4958:	dcc00315 	stw	r19,12(sp)
    495c:	4201ffcc 	andi	r8,r8,2047
    4960:	dc800215 	stw	r18,8(sp)
    4964:	dc400115 	stw	r17,4(sp)
    4968:	dc000015 	stw	r16,0(sp)
    496c:	dfc00515 	stw	ra,20(sp)
    4970:	dd000415 	stw	r20,16(sp)
    4974:	44bf0044 	addi	r18,r8,-1023
    4978:	018004c4 	movi	r6,19
    497c:	2821883a 	mov	r16,r5
    4980:	2005883a 	mov	r2,r4
    4984:	280f883a 	mov	r7,r5
    4988:	2827883a 	mov	r19,r5
    498c:	2023883a 	mov	r17,r4
    4990:	34801916 	blt	r6,r18,49f8 <floor+0xa8>
    4994:	90003c16 	blt	r18,zero,4a88 <floor+0x138>
    4998:	05000434 	movhi	r20,16
    499c:	a53fffc4 	addi	r20,r20,-1
    49a0:	a4a9d83a 	sra	r20,r20,r18
    49a4:	2d0c703a 	and	r6,r5,r20
    49a8:	310cb03a 	or	r6,r6,r4
    49ac:	30001626 	beq	r6,zero,4a08 <floor+0xb8>
    49b0:	01a20034 	movhi	r6,34816
    49b4:	01df8e34 	movhi	r7,32312
    49b8:	319d6704 	addi	r6,r6,30108
    49bc:	39f90f04 	addi	r7,r7,-7108
    49c0:	0004ed00 	call	4ed0 <__adddf3>
    49c4:	000d883a 	mov	r6,zero
    49c8:	000f883a 	mov	r7,zero
    49cc:	1009883a 	mov	r4,r2
    49d0:	180b883a 	mov	r5,r3
    49d4:	00058040 	call	5804 <__gedf2>
    49d8:	0080040e 	bge	zero,r2,49ec <floor+0x9c>
    49dc:	80003c16 	blt	r16,zero,4ad0 <floor+0x180>
    49e0:	0520303a 	nor	r16,zero,r20
    49e4:	84e0703a 	and	r16,r16,r19
    49e8:	0023883a 	mov	r17,zero
    49ec:	8805883a 	mov	r2,r17
    49f0:	8007883a 	mov	r3,r16
    49f4:	00000506 	br	4a0c <floor+0xbc>
    49f8:	01800cc4 	movi	r6,51
    49fc:	34800b0e 	bge	r6,r18,4a2c <floor+0xdc>
    4a00:	01810004 	movi	r6,1024
    4a04:	91802f26 	beq	r18,r6,4ac4 <floor+0x174>
    4a08:	3807883a 	mov	r3,r7
    4a0c:	dfc00517 	ldw	ra,20(sp)
    4a10:	dd000417 	ldw	r20,16(sp)
    4a14:	dcc00317 	ldw	r19,12(sp)
    4a18:	dc800217 	ldw	r18,8(sp)
    4a1c:	dc400117 	ldw	r17,4(sp)
    4a20:	dc000017 	ldw	r16,0(sp)
    4a24:	dec00604 	addi	sp,sp,24
    4a28:	f800283a 	ret
    4a2c:	423efb44 	addi	r8,r8,-1043
    4a30:	053fffc4 	movi	r20,-1
    4a34:	a228d83a 	srl	r20,r20,r8
    4a38:	250c703a 	and	r6,r4,r20
    4a3c:	303ff226 	beq	r6,zero,4a08 <__alt_exception_stack_pointer+0xf8004a08>
    4a40:	01a20034 	movhi	r6,34816
    4a44:	01df8e34 	movhi	r7,32312
    4a48:	319d6704 	addi	r6,r6,30108
    4a4c:	39f90f04 	addi	r7,r7,-7108
    4a50:	0004ed00 	call	4ed0 <__adddf3>
    4a54:	000d883a 	mov	r6,zero
    4a58:	000f883a 	mov	r7,zero
    4a5c:	1009883a 	mov	r4,r2
    4a60:	180b883a 	mov	r5,r3
    4a64:	00058040 	call	5804 <__gedf2>
    4a68:	00bfe00e 	bge	zero,r2,49ec <__alt_exception_stack_pointer+0xf80049ec>
    4a6c:	80001c16 	blt	r16,zero,4ae0 <floor+0x190>
    4a70:	0510303a 	nor	r8,zero,r20
    4a74:	9821883a 	mov	r16,r19
    4a78:	8a22703a 	and	r17,r17,r8
    4a7c:	8805883a 	mov	r2,r17
    4a80:	8007883a 	mov	r3,r16
    4a84:	003fe106 	br	4a0c <__alt_exception_stack_pointer+0xf8004a0c>
    4a88:	01a20034 	movhi	r6,34816
    4a8c:	01df8e34 	movhi	r7,32312
    4a90:	319d6704 	addi	r6,r6,30108
    4a94:	39f90f04 	addi	r7,r7,-7108
    4a98:	0004ed00 	call	4ed0 <__adddf3>
    4a9c:	000d883a 	mov	r6,zero
    4aa0:	000f883a 	mov	r7,zero
    4aa4:	1009883a 	mov	r4,r2
    4aa8:	180b883a 	mov	r5,r3
    4aac:	00058040 	call	5804 <__gedf2>
    4ab0:	00bfce0e 	bge	zero,r2,49ec <__alt_exception_stack_pointer+0xf80049ec>
    4ab4:	80001516 	blt	r16,zero,4b0c <floor+0x1bc>
    4ab8:	0023883a 	mov	r17,zero
    4abc:	0021883a 	mov	r16,zero
    4ac0:	003fca06 	br	49ec <__alt_exception_stack_pointer+0xf80049ec>
    4ac4:	200d883a 	mov	r6,r4
    4ac8:	0004ed00 	call	4ed0 <__adddf3>
    4acc:	003fcf06 	br	4a0c <__alt_exception_stack_pointer+0xf8004a0c>
    4ad0:	00800434 	movhi	r2,16
    4ad4:	14a5d83a 	sra	r18,r2,r18
    4ad8:	84a7883a 	add	r19,r16,r18
    4adc:	003fc006 	br	49e0 <__alt_exception_stack_pointer+0xf80049e0>
    4ae0:	00800504 	movi	r2,20
    4ae4:	90801326 	beq	r18,r2,4b34 <floor+0x1e4>
    4ae8:	00800d04 	movi	r2,52
    4aec:	14a5c83a 	sub	r18,r2,r18
    4af0:	00800044 	movi	r2,1
    4af4:	1484983a 	sll	r2,r2,r18
    4af8:	1445883a 	add	r2,r2,r17
    4afc:	14400b2e 	bgeu	r2,r17,4b2c <floor+0x1dc>
    4b00:	84c00044 	addi	r19,r16,1
    4b04:	1023883a 	mov	r17,r2
    4b08:	003fd906 	br	4a70 <__alt_exception_stack_pointer+0xf8004a70>
    4b0c:	00a00034 	movhi	r2,32768
    4b10:	10bfffc4 	addi	r2,r2,-1
    4b14:	8084703a 	and	r2,r16,r2
    4b18:	1462b03a 	or	r17,r2,r17
    4b1c:	883fb326 	beq	r17,zero,49ec <__alt_exception_stack_pointer+0xf80049ec>
    4b20:	0023883a 	mov	r17,zero
    4b24:	042ffc34 	movhi	r16,49136
    4b28:	003fb006 	br	49ec <__alt_exception_stack_pointer+0xf80049ec>
    4b2c:	1023883a 	mov	r17,r2
    4b30:	003fcf06 	br	4a70 <__alt_exception_stack_pointer+0xf8004a70>
    4b34:	84c00044 	addi	r19,r16,1
    4b38:	003fcd06 	br	4a70 <__alt_exception_stack_pointer+0xf8004a70>

00004b3c <scalbn>:
    4b3c:	2a1ffc2c 	andhi	r8,r5,32752
    4b40:	4011d53a 	srai	r8,r8,20
    4b44:	defffe04 	addi	sp,sp,-8
    4b48:	dc000015 	stw	r16,0(sp)
    4b4c:	dfc00115 	stw	ra,4(sp)
    4b50:	280f883a 	mov	r7,r5
    4b54:	2015883a 	mov	r10,r4
    4b58:	3021883a 	mov	r16,r6
    4b5c:	40001e1e 	bne	r8,zero,4bd8 <scalbn+0x9c>
    4b60:	00a00034 	movhi	r2,32768
    4b64:	10bfffc4 	addi	r2,r2,-1
    4b68:	2884703a 	and	r2,r5,r2
    4b6c:	1104b03a 	or	r2,r2,r4
    4b70:	10002226 	beq	r2,zero,4bfc <scalbn+0xc0>
    4b74:	01d0d434 	movhi	r7,17232
    4b78:	000d883a 	mov	r6,zero
    4b7c:	00058e00 	call	58e0 <__muldf3>
    4b80:	013ffff4 	movhi	r4,65535
    4b84:	210f2c04 	addi	r4,r4,15536
    4b88:	1015883a 	mov	r10,r2
    4b8c:	180f883a 	mov	r7,r3
    4b90:	81002a16 	blt	r16,r4,4c3c <scalbn+0x100>
    4b94:	191ffc2c 	andhi	r4,r3,32752
    4b98:	2009d53a 	srai	r4,r4,20
    4b9c:	223ff284 	addi	r8,r4,-54
    4ba0:	8211883a 	add	r8,r16,r8
    4ba4:	0081ff84 	movi	r2,2046
    4ba8:	12002f16 	blt	r2,r8,4c68 <scalbn+0x12c>
    4bac:	0200190e 	bge	zero,r8,4c14 <scalbn+0xd8>
    4bb0:	4010953a 	slli	r8,r8,20
    4bb4:	01600434 	movhi	r5,32784
    4bb8:	297fffc4 	addi	r5,r5,-1
    4bbc:	194e703a 	and	r7,r3,r5
    4bc0:	5005883a 	mov	r2,r10
    4bc4:	3a06b03a 	or	r3,r7,r8
    4bc8:	dfc00117 	ldw	ra,4(sp)
    4bcc:	dc000017 	ldw	r16,0(sp)
    4bd0:	dec00204 	addi	sp,sp,8
    4bd4:	f800283a 	ret
    4bd8:	0081ffc4 	movi	r2,2047
    4bdc:	2807883a 	mov	r3,r5
    4be0:	40bfef1e 	bne	r8,r2,4ba0 <__alt_exception_stack_pointer+0xf8004ba0>
    4be4:	200d883a 	mov	r6,r4
    4be8:	0004ed00 	call	4ed0 <__adddf3>
    4bec:	dfc00117 	ldw	ra,4(sp)
    4bf0:	dc000017 	ldw	r16,0(sp)
    4bf4:	dec00204 	addi	sp,sp,8
    4bf8:	f800283a 	ret
    4bfc:	2005883a 	mov	r2,r4
    4c00:	2807883a 	mov	r3,r5
    4c04:	dfc00117 	ldw	ra,4(sp)
    4c08:	dc000017 	ldw	r16,0(sp)
    4c0c:	dec00204 	addi	sp,sp,8
    4c10:	f800283a 	ret
    4c14:	00bff2c4 	movi	r2,-53
    4c18:	4080240e 	bge	r8,r2,4cac <scalbn+0x170>
    4c1c:	00b0d414 	movui	r2,50000
    4c20:	14001116 	blt	r2,r16,4c68 <scalbn+0x12c>
    4c24:	0130be74 	movhi	r4,49913
    4c28:	01406974 	movhi	r5,421
    4c2c:	213cd644 	addi	r4,r4,-3239
    4c30:	295b87c4 	addi	r5,r5,28191
    4c34:	500d883a 	mov	r6,r10
    4c38:	0004cd80 	call	4cd8 <copysign>
    4c3c:	01b0be74 	movhi	r6,49913
    4c40:	01c06974 	movhi	r7,421
    4c44:	31bcd644 	addi	r6,r6,-3239
    4c48:	39db87c4 	addi	r7,r7,28191
    4c4c:	1009883a 	mov	r4,r2
    4c50:	180b883a 	mov	r5,r3
    4c54:	00058e00 	call	58e0 <__muldf3>
    4c58:	dfc00117 	ldw	ra,4(sp)
    4c5c:	dc000017 	ldw	r16,0(sp)
    4c60:	dec00204 	addi	sp,sp,8
    4c64:	f800283a 	ret
    4c68:	01220034 	movhi	r4,34816
    4c6c:	015f8e34 	movhi	r5,32312
    4c70:	500d883a 	mov	r6,r10
    4c74:	211d6704 	addi	r4,r4,30108
    4c78:	29790f04 	addi	r5,r5,-7108
    4c7c:	0004cd80 	call	4cd8 <copysign>
    4c80:	01a20034 	movhi	r6,34816
    4c84:	01df8e34 	movhi	r7,32312
    4c88:	319d6704 	addi	r6,r6,30108
    4c8c:	39f90f04 	addi	r7,r7,-7108
    4c90:	1009883a 	mov	r4,r2
    4c94:	180b883a 	mov	r5,r3
    4c98:	00058e00 	call	58e0 <__muldf3>
    4c9c:	dfc00117 	ldw	ra,4(sp)
    4ca0:	dc000017 	ldw	r16,0(sp)
    4ca4:	dec00204 	addi	sp,sp,8
    4ca8:	f800283a 	ret
    4cac:	42000d84 	addi	r8,r8,54
    4cb0:	4012953a 	slli	r9,r8,20
    4cb4:	01e00434 	movhi	r7,32784
    4cb8:	39ffffc4 	addi	r7,r7,-1
    4cbc:	19ca703a 	and	r5,r3,r7
    4cc0:	000d883a 	mov	r6,zero
    4cc4:	01cf2434 	movhi	r7,15504
    4cc8:	5009883a 	mov	r4,r10
    4ccc:	494ab03a 	or	r5,r9,r5
    4cd0:	00058e00 	call	58e0 <__muldf3>
    4cd4:	003fbc06 	br	4bc8 <__alt_exception_stack_pointer+0xf8004bc8>

00004cd8 <copysign>:
    4cd8:	2005883a 	mov	r2,r4
    4cdc:	01200034 	movhi	r4,32768
    4ce0:	213fffc4 	addi	r4,r4,-1
    4ce4:	38e0002c 	andhi	r3,r7,32768
    4ce8:	290a703a 	and	r5,r5,r4
    4cec:	28c6b03a 	or	r3,r5,r3
    4cf0:	f800283a 	ret

00004cf4 <__divsi3>:
    4cf4:	20001b16 	blt	r4,zero,4d64 <__divsi3+0x70>
    4cf8:	000f883a 	mov	r7,zero
    4cfc:	28001616 	blt	r5,zero,4d58 <__divsi3+0x64>
    4d00:	200d883a 	mov	r6,r4
    4d04:	29001a2e 	bgeu	r5,r4,4d70 <__divsi3+0x7c>
    4d08:	00800804 	movi	r2,32
    4d0c:	00c00044 	movi	r3,1
    4d10:	00000106 	br	4d18 <__divsi3+0x24>
    4d14:	10000d26 	beq	r2,zero,4d4c <__divsi3+0x58>
    4d18:	294b883a 	add	r5,r5,r5
    4d1c:	10bfffc4 	addi	r2,r2,-1
    4d20:	18c7883a 	add	r3,r3,r3
    4d24:	293ffb36 	bltu	r5,r4,4d14 <__alt_exception_stack_pointer+0xf8004d14>
    4d28:	0005883a 	mov	r2,zero
    4d2c:	18000726 	beq	r3,zero,4d4c <__divsi3+0x58>
    4d30:	0005883a 	mov	r2,zero
    4d34:	31400236 	bltu	r6,r5,4d40 <__divsi3+0x4c>
    4d38:	314dc83a 	sub	r6,r6,r5
    4d3c:	10c4b03a 	or	r2,r2,r3
    4d40:	1806d07a 	srli	r3,r3,1
    4d44:	280ad07a 	srli	r5,r5,1
    4d48:	183ffa1e 	bne	r3,zero,4d34 <__alt_exception_stack_pointer+0xf8004d34>
    4d4c:	38000126 	beq	r7,zero,4d54 <__divsi3+0x60>
    4d50:	0085c83a 	sub	r2,zero,r2
    4d54:	f800283a 	ret
    4d58:	014bc83a 	sub	r5,zero,r5
    4d5c:	39c0005c 	xori	r7,r7,1
    4d60:	003fe706 	br	4d00 <__alt_exception_stack_pointer+0xf8004d00>
    4d64:	0109c83a 	sub	r4,zero,r4
    4d68:	01c00044 	movi	r7,1
    4d6c:	003fe306 	br	4cfc <__alt_exception_stack_pointer+0xf8004cfc>
    4d70:	00c00044 	movi	r3,1
    4d74:	003fee06 	br	4d30 <__alt_exception_stack_pointer+0xf8004d30>

00004d78 <__modsi3>:
    4d78:	20001716 	blt	r4,zero,4dd8 <__modsi3+0x60>
    4d7c:	000f883a 	mov	r7,zero
    4d80:	2005883a 	mov	r2,r4
    4d84:	28001216 	blt	r5,zero,4dd0 <__modsi3+0x58>
    4d88:	2900162e 	bgeu	r5,r4,4de4 <__modsi3+0x6c>
    4d8c:	01800804 	movi	r6,32
    4d90:	00c00044 	movi	r3,1
    4d94:	00000106 	br	4d9c <__modsi3+0x24>
    4d98:	30000a26 	beq	r6,zero,4dc4 <__modsi3+0x4c>
    4d9c:	294b883a 	add	r5,r5,r5
    4da0:	31bfffc4 	addi	r6,r6,-1
    4da4:	18c7883a 	add	r3,r3,r3
    4da8:	293ffb36 	bltu	r5,r4,4d98 <__alt_exception_stack_pointer+0xf8004d98>
    4dac:	18000526 	beq	r3,zero,4dc4 <__modsi3+0x4c>
    4db0:	1806d07a 	srli	r3,r3,1
    4db4:	11400136 	bltu	r2,r5,4dbc <__modsi3+0x44>
    4db8:	1145c83a 	sub	r2,r2,r5
    4dbc:	280ad07a 	srli	r5,r5,1
    4dc0:	183ffb1e 	bne	r3,zero,4db0 <__alt_exception_stack_pointer+0xf8004db0>
    4dc4:	38000126 	beq	r7,zero,4dcc <__modsi3+0x54>
    4dc8:	0085c83a 	sub	r2,zero,r2
    4dcc:	f800283a 	ret
    4dd0:	014bc83a 	sub	r5,zero,r5
    4dd4:	003fec06 	br	4d88 <__alt_exception_stack_pointer+0xf8004d88>
    4dd8:	0109c83a 	sub	r4,zero,r4
    4ddc:	01c00044 	movi	r7,1
    4de0:	003fe706 	br	4d80 <__alt_exception_stack_pointer+0xf8004d80>
    4de4:	00c00044 	movi	r3,1
    4de8:	003ff106 	br	4db0 <__alt_exception_stack_pointer+0xf8004db0>

00004dec <__udivsi3>:
    4dec:	200d883a 	mov	r6,r4
    4df0:	2900152e 	bgeu	r5,r4,4e48 <__udivsi3+0x5c>
    4df4:	28001416 	blt	r5,zero,4e48 <__udivsi3+0x5c>
    4df8:	00800804 	movi	r2,32
    4dfc:	00c00044 	movi	r3,1
    4e00:	00000206 	br	4e0c <__udivsi3+0x20>
    4e04:	10000e26 	beq	r2,zero,4e40 <__udivsi3+0x54>
    4e08:	28000516 	blt	r5,zero,4e20 <__udivsi3+0x34>
    4e0c:	294b883a 	add	r5,r5,r5
    4e10:	10bfffc4 	addi	r2,r2,-1
    4e14:	18c7883a 	add	r3,r3,r3
    4e18:	293ffa36 	bltu	r5,r4,4e04 <__alt_exception_stack_pointer+0xf8004e04>
    4e1c:	18000826 	beq	r3,zero,4e40 <__udivsi3+0x54>
    4e20:	0005883a 	mov	r2,zero
    4e24:	31400236 	bltu	r6,r5,4e30 <__udivsi3+0x44>
    4e28:	314dc83a 	sub	r6,r6,r5
    4e2c:	10c4b03a 	or	r2,r2,r3
    4e30:	1806d07a 	srli	r3,r3,1
    4e34:	280ad07a 	srli	r5,r5,1
    4e38:	183ffa1e 	bne	r3,zero,4e24 <__alt_exception_stack_pointer+0xf8004e24>
    4e3c:	f800283a 	ret
    4e40:	0005883a 	mov	r2,zero
    4e44:	f800283a 	ret
    4e48:	00c00044 	movi	r3,1
    4e4c:	003ff406 	br	4e20 <__alt_exception_stack_pointer+0xf8004e20>

00004e50 <__umodsi3>:
    4e50:	2005883a 	mov	r2,r4
    4e54:	2900122e 	bgeu	r5,r4,4ea0 <__umodsi3+0x50>
    4e58:	28001116 	blt	r5,zero,4ea0 <__umodsi3+0x50>
    4e5c:	01800804 	movi	r6,32
    4e60:	00c00044 	movi	r3,1
    4e64:	00000206 	br	4e70 <__umodsi3+0x20>
    4e68:	30000c26 	beq	r6,zero,4e9c <__umodsi3+0x4c>
    4e6c:	28000516 	blt	r5,zero,4e84 <__umodsi3+0x34>
    4e70:	294b883a 	add	r5,r5,r5
    4e74:	31bfffc4 	addi	r6,r6,-1
    4e78:	18c7883a 	add	r3,r3,r3
    4e7c:	293ffa36 	bltu	r5,r4,4e68 <__alt_exception_stack_pointer+0xf8004e68>
    4e80:	18000626 	beq	r3,zero,4e9c <__umodsi3+0x4c>
    4e84:	1806d07a 	srli	r3,r3,1
    4e88:	11400136 	bltu	r2,r5,4e90 <__umodsi3+0x40>
    4e8c:	1145c83a 	sub	r2,r2,r5
    4e90:	280ad07a 	srli	r5,r5,1
    4e94:	183ffb1e 	bne	r3,zero,4e84 <__alt_exception_stack_pointer+0xf8004e84>
    4e98:	f800283a 	ret
    4e9c:	f800283a 	ret
    4ea0:	00c00044 	movi	r3,1
    4ea4:	003ff706 	br	4e84 <__alt_exception_stack_pointer+0xf8004e84>

00004ea8 <__mulsi3>:
    4ea8:	0005883a 	mov	r2,zero
    4eac:	20000726 	beq	r4,zero,4ecc <__mulsi3+0x24>
    4eb0:	20c0004c 	andi	r3,r4,1
    4eb4:	2008d07a 	srli	r4,r4,1
    4eb8:	18000126 	beq	r3,zero,4ec0 <__mulsi3+0x18>
    4ebc:	1145883a 	add	r2,r2,r5
    4ec0:	294b883a 	add	r5,r5,r5
    4ec4:	203ffa1e 	bne	r4,zero,4eb0 <__alt_exception_stack_pointer+0xf8004eb0>
    4ec8:	f800283a 	ret
    4ecc:	f800283a 	ret

00004ed0 <__adddf3>:
    4ed0:	02c00434 	movhi	r11,16
    4ed4:	5affffc4 	addi	r11,r11,-1
    4ed8:	2806d7fa 	srli	r3,r5,31
    4edc:	2ad4703a 	and	r10,r5,r11
    4ee0:	3ad2703a 	and	r9,r7,r11
    4ee4:	3804d53a 	srli	r2,r7,20
    4ee8:	3018d77a 	srli	r12,r6,29
    4eec:	280ad53a 	srli	r5,r5,20
    4ef0:	501490fa 	slli	r10,r10,3
    4ef4:	2010d77a 	srli	r8,r4,29
    4ef8:	481290fa 	slli	r9,r9,3
    4efc:	380ed7fa 	srli	r7,r7,31
    4f00:	defffb04 	addi	sp,sp,-20
    4f04:	dc800215 	stw	r18,8(sp)
    4f08:	dc400115 	stw	r17,4(sp)
    4f0c:	dc000015 	stw	r16,0(sp)
    4f10:	dfc00415 	stw	ra,16(sp)
    4f14:	dcc00315 	stw	r19,12(sp)
    4f18:	1c803fcc 	andi	r18,r3,255
    4f1c:	2c01ffcc 	andi	r16,r5,2047
    4f20:	5210b03a 	or	r8,r10,r8
    4f24:	202290fa 	slli	r17,r4,3
    4f28:	1081ffcc 	andi	r2,r2,2047
    4f2c:	4b12b03a 	or	r9,r9,r12
    4f30:	300c90fa 	slli	r6,r6,3
    4f34:	91c07526 	beq	r18,r7,510c <__adddf3+0x23c>
    4f38:	8087c83a 	sub	r3,r16,r2
    4f3c:	00c0ab0e 	bge	zero,r3,51ec <__adddf3+0x31c>
    4f40:	10002a1e 	bne	r2,zero,4fec <__adddf3+0x11c>
    4f44:	4984b03a 	or	r2,r9,r6
    4f48:	1000961e 	bne	r2,zero,51a4 <__adddf3+0x2d4>
    4f4c:	888001cc 	andi	r2,r17,7
    4f50:	10000726 	beq	r2,zero,4f70 <__adddf3+0xa0>
    4f54:	888003cc 	andi	r2,r17,15
    4f58:	00c00104 	movi	r3,4
    4f5c:	10c00426 	beq	r2,r3,4f70 <__adddf3+0xa0>
    4f60:	88c7883a 	add	r3,r17,r3
    4f64:	1c63803a 	cmpltu	r17,r3,r17
    4f68:	4451883a 	add	r8,r8,r17
    4f6c:	1823883a 	mov	r17,r3
    4f70:	4080202c 	andhi	r2,r8,128
    4f74:	10005926 	beq	r2,zero,50dc <__adddf3+0x20c>
    4f78:	84000044 	addi	r16,r16,1
    4f7c:	0081ffc4 	movi	r2,2047
    4f80:	8080ba26 	beq	r16,r2,526c <__adddf3+0x39c>
    4f84:	00bfe034 	movhi	r2,65408
    4f88:	10bfffc4 	addi	r2,r2,-1
    4f8c:	4090703a 	and	r8,r8,r2
    4f90:	4004977a 	slli	r2,r8,29
    4f94:	4010927a 	slli	r8,r8,9
    4f98:	8822d0fa 	srli	r17,r17,3
    4f9c:	8401ffcc 	andi	r16,r16,2047
    4fa0:	4010d33a 	srli	r8,r8,12
    4fa4:	9007883a 	mov	r3,r18
    4fa8:	1444b03a 	or	r2,r2,r17
    4fac:	8401ffcc 	andi	r16,r16,2047
    4fb0:	8020953a 	slli	r16,r16,20
    4fb4:	18c03fcc 	andi	r3,r3,255
    4fb8:	01000434 	movhi	r4,16
    4fbc:	213fffc4 	addi	r4,r4,-1
    4fc0:	180697fa 	slli	r3,r3,31
    4fc4:	4110703a 	and	r8,r8,r4
    4fc8:	4410b03a 	or	r8,r8,r16
    4fcc:	40c6b03a 	or	r3,r8,r3
    4fd0:	dfc00417 	ldw	ra,16(sp)
    4fd4:	dcc00317 	ldw	r19,12(sp)
    4fd8:	dc800217 	ldw	r18,8(sp)
    4fdc:	dc400117 	ldw	r17,4(sp)
    4fe0:	dc000017 	ldw	r16,0(sp)
    4fe4:	dec00504 	addi	sp,sp,20
    4fe8:	f800283a 	ret
    4fec:	0081ffc4 	movi	r2,2047
    4ff0:	80bfd626 	beq	r16,r2,4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    4ff4:	4a402034 	orhi	r9,r9,128
    4ff8:	00800e04 	movi	r2,56
    4ffc:	10c09f16 	blt	r2,r3,527c <__adddf3+0x3ac>
    5000:	008007c4 	movi	r2,31
    5004:	10c0c216 	blt	r2,r3,5310 <__adddf3+0x440>
    5008:	00800804 	movi	r2,32
    500c:	10c5c83a 	sub	r2,r2,r3
    5010:	488a983a 	sll	r5,r9,r2
    5014:	30c8d83a 	srl	r4,r6,r3
    5018:	3084983a 	sll	r2,r6,r2
    501c:	48c6d83a 	srl	r3,r9,r3
    5020:	290cb03a 	or	r6,r5,r4
    5024:	1004c03a 	cmpne	r2,r2,zero
    5028:	308cb03a 	or	r6,r6,r2
    502c:	898dc83a 	sub	r6,r17,r6
    5030:	89a3803a 	cmpltu	r17,r17,r6
    5034:	40d1c83a 	sub	r8,r8,r3
    5038:	4451c83a 	sub	r8,r8,r17
    503c:	3023883a 	mov	r17,r6
    5040:	4080202c 	andhi	r2,r8,128
    5044:	10002326 	beq	r2,zero,50d4 <__adddf3+0x204>
    5048:	04c02034 	movhi	r19,128
    504c:	9cffffc4 	addi	r19,r19,-1
    5050:	44e6703a 	and	r19,r8,r19
    5054:	98007626 	beq	r19,zero,5230 <__adddf3+0x360>
    5058:	9809883a 	mov	r4,r19
    505c:	0006ba40 	call	6ba4 <__clzsi2>
    5060:	10fffe04 	addi	r3,r2,-8
    5064:	010007c4 	movi	r4,31
    5068:	20c07716 	blt	r4,r3,5248 <__adddf3+0x378>
    506c:	00800804 	movi	r2,32
    5070:	10c5c83a 	sub	r2,r2,r3
    5074:	8884d83a 	srl	r2,r17,r2
    5078:	98d0983a 	sll	r8,r19,r3
    507c:	88e2983a 	sll	r17,r17,r3
    5080:	1204b03a 	or	r2,r2,r8
    5084:	1c007416 	blt	r3,r16,5258 <__adddf3+0x388>
    5088:	1c21c83a 	sub	r16,r3,r16
    508c:	82000044 	addi	r8,r16,1
    5090:	00c007c4 	movi	r3,31
    5094:	1a009116 	blt	r3,r8,52dc <__adddf3+0x40c>
    5098:	00c00804 	movi	r3,32
    509c:	1a07c83a 	sub	r3,r3,r8
    50a0:	8a08d83a 	srl	r4,r17,r8
    50a4:	88e2983a 	sll	r17,r17,r3
    50a8:	10c6983a 	sll	r3,r2,r3
    50ac:	1210d83a 	srl	r8,r2,r8
    50b0:	8804c03a 	cmpne	r2,r17,zero
    50b4:	1906b03a 	or	r3,r3,r4
    50b8:	18a2b03a 	or	r17,r3,r2
    50bc:	0021883a 	mov	r16,zero
    50c0:	003fa206 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    50c4:	1890b03a 	or	r8,r3,r2
    50c8:	40017d26 	beq	r8,zero,56c0 <__adddf3+0x7f0>
    50cc:	1011883a 	mov	r8,r2
    50d0:	1823883a 	mov	r17,r3
    50d4:	888001cc 	andi	r2,r17,7
    50d8:	103f9e1e 	bne	r2,zero,4f54 <__alt_exception_stack_pointer+0xf8004f54>
    50dc:	4004977a 	slli	r2,r8,29
    50e0:	8822d0fa 	srli	r17,r17,3
    50e4:	4010d0fa 	srli	r8,r8,3
    50e8:	9007883a 	mov	r3,r18
    50ec:	1444b03a 	or	r2,r2,r17
    50f0:	0101ffc4 	movi	r4,2047
    50f4:	81002426 	beq	r16,r4,5188 <__adddf3+0x2b8>
    50f8:	8120703a 	and	r16,r16,r4
    50fc:	01000434 	movhi	r4,16
    5100:	213fffc4 	addi	r4,r4,-1
    5104:	4110703a 	and	r8,r8,r4
    5108:	003fa806 	br	4fac <__alt_exception_stack_pointer+0xf8004fac>
    510c:	8089c83a 	sub	r4,r16,r2
    5110:	01005e0e 	bge	zero,r4,528c <__adddf3+0x3bc>
    5114:	10002b26 	beq	r2,zero,51c4 <__adddf3+0x2f4>
    5118:	0081ffc4 	movi	r2,2047
    511c:	80bf8b26 	beq	r16,r2,4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5120:	4a402034 	orhi	r9,r9,128
    5124:	00800e04 	movi	r2,56
    5128:	1100a40e 	bge	r2,r4,53bc <__adddf3+0x4ec>
    512c:	498cb03a 	or	r6,r9,r6
    5130:	300ac03a 	cmpne	r5,r6,zero
    5134:	0013883a 	mov	r9,zero
    5138:	2c4b883a 	add	r5,r5,r17
    513c:	2c63803a 	cmpltu	r17,r5,r17
    5140:	4a11883a 	add	r8,r9,r8
    5144:	8a11883a 	add	r8,r17,r8
    5148:	2823883a 	mov	r17,r5
    514c:	4080202c 	andhi	r2,r8,128
    5150:	103fe026 	beq	r2,zero,50d4 <__alt_exception_stack_pointer+0xf80050d4>
    5154:	84000044 	addi	r16,r16,1
    5158:	0081ffc4 	movi	r2,2047
    515c:	8080d226 	beq	r16,r2,54a8 <__adddf3+0x5d8>
    5160:	00bfe034 	movhi	r2,65408
    5164:	10bfffc4 	addi	r2,r2,-1
    5168:	4090703a 	and	r8,r8,r2
    516c:	880ad07a 	srli	r5,r17,1
    5170:	400897fa 	slli	r4,r8,31
    5174:	88c0004c 	andi	r3,r17,1
    5178:	28e2b03a 	or	r17,r5,r3
    517c:	4010d07a 	srli	r8,r8,1
    5180:	2462b03a 	or	r17,r4,r17
    5184:	003f7106 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5188:	4088b03a 	or	r4,r8,r2
    518c:	20014526 	beq	r4,zero,56a4 <__adddf3+0x7d4>
    5190:	01000434 	movhi	r4,16
    5194:	42000234 	orhi	r8,r8,8
    5198:	213fffc4 	addi	r4,r4,-1
    519c:	4110703a 	and	r8,r8,r4
    51a0:	003f8206 	br	4fac <__alt_exception_stack_pointer+0xf8004fac>
    51a4:	18ffffc4 	addi	r3,r3,-1
    51a8:	1800491e 	bne	r3,zero,52d0 <__adddf3+0x400>
    51ac:	898bc83a 	sub	r5,r17,r6
    51b0:	8963803a 	cmpltu	r17,r17,r5
    51b4:	4251c83a 	sub	r8,r8,r9
    51b8:	4451c83a 	sub	r8,r8,r17
    51bc:	2823883a 	mov	r17,r5
    51c0:	003f9f06 	br	5040 <__alt_exception_stack_pointer+0xf8005040>
    51c4:	4984b03a 	or	r2,r9,r6
    51c8:	103f6026 	beq	r2,zero,4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    51cc:	213fffc4 	addi	r4,r4,-1
    51d0:	2000931e 	bne	r4,zero,5420 <__adddf3+0x550>
    51d4:	898d883a 	add	r6,r17,r6
    51d8:	3463803a 	cmpltu	r17,r6,r17
    51dc:	4251883a 	add	r8,r8,r9
    51e0:	8a11883a 	add	r8,r17,r8
    51e4:	3023883a 	mov	r17,r6
    51e8:	003fd806 	br	514c <__alt_exception_stack_pointer+0xf800514c>
    51ec:	1800541e 	bne	r3,zero,5340 <__adddf3+0x470>
    51f0:	80800044 	addi	r2,r16,1
    51f4:	1081ffcc 	andi	r2,r2,2047
    51f8:	00c00044 	movi	r3,1
    51fc:	1880a00e 	bge	r3,r2,5480 <__adddf3+0x5b0>
    5200:	8989c83a 	sub	r4,r17,r6
    5204:	8905803a 	cmpltu	r2,r17,r4
    5208:	4267c83a 	sub	r19,r8,r9
    520c:	98a7c83a 	sub	r19,r19,r2
    5210:	9880202c 	andhi	r2,r19,128
    5214:	10006326 	beq	r2,zero,53a4 <__adddf3+0x4d4>
    5218:	3463c83a 	sub	r17,r6,r17
    521c:	4a07c83a 	sub	r3,r9,r8
    5220:	344d803a 	cmpltu	r6,r6,r17
    5224:	19a7c83a 	sub	r19,r3,r6
    5228:	3825883a 	mov	r18,r7
    522c:	983f8a1e 	bne	r19,zero,5058 <__alt_exception_stack_pointer+0xf8005058>
    5230:	8809883a 	mov	r4,r17
    5234:	0006ba40 	call	6ba4 <__clzsi2>
    5238:	10800804 	addi	r2,r2,32
    523c:	10fffe04 	addi	r3,r2,-8
    5240:	010007c4 	movi	r4,31
    5244:	20ff890e 	bge	r4,r3,506c <__alt_exception_stack_pointer+0xf800506c>
    5248:	10bff604 	addi	r2,r2,-40
    524c:	8884983a 	sll	r2,r17,r2
    5250:	0023883a 	mov	r17,zero
    5254:	1c3f8c0e 	bge	r3,r16,5088 <__alt_exception_stack_pointer+0xf8005088>
    5258:	023fe034 	movhi	r8,65408
    525c:	423fffc4 	addi	r8,r8,-1
    5260:	80e1c83a 	sub	r16,r16,r3
    5264:	1210703a 	and	r8,r2,r8
    5268:	003f3806 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    526c:	9007883a 	mov	r3,r18
    5270:	0011883a 	mov	r8,zero
    5274:	0005883a 	mov	r2,zero
    5278:	003f4c06 	br	4fac <__alt_exception_stack_pointer+0xf8004fac>
    527c:	498cb03a 	or	r6,r9,r6
    5280:	300cc03a 	cmpne	r6,r6,zero
    5284:	0007883a 	mov	r3,zero
    5288:	003f6806 	br	502c <__alt_exception_stack_pointer+0xf800502c>
    528c:	20009c1e 	bne	r4,zero,5500 <__adddf3+0x630>
    5290:	80800044 	addi	r2,r16,1
    5294:	1141ffcc 	andi	r5,r2,2047
    5298:	01000044 	movi	r4,1
    529c:	2140670e 	bge	r4,r5,543c <__adddf3+0x56c>
    52a0:	0101ffc4 	movi	r4,2047
    52a4:	11007f26 	beq	r2,r4,54a4 <__adddf3+0x5d4>
    52a8:	898d883a 	add	r6,r17,r6
    52ac:	4247883a 	add	r3,r8,r9
    52b0:	3451803a 	cmpltu	r8,r6,r17
    52b4:	40d1883a 	add	r8,r8,r3
    52b8:	402297fa 	slli	r17,r8,31
    52bc:	300cd07a 	srli	r6,r6,1
    52c0:	4010d07a 	srli	r8,r8,1
    52c4:	1021883a 	mov	r16,r2
    52c8:	89a2b03a 	or	r17,r17,r6
    52cc:	003f1f06 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    52d0:	0081ffc4 	movi	r2,2047
    52d4:	80bf481e 	bne	r16,r2,4ff8 <__alt_exception_stack_pointer+0xf8004ff8>
    52d8:	003f1c06 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    52dc:	843ff844 	addi	r16,r16,-31
    52e0:	01000804 	movi	r4,32
    52e4:	1406d83a 	srl	r3,r2,r16
    52e8:	41005026 	beq	r8,r4,542c <__adddf3+0x55c>
    52ec:	01001004 	movi	r4,64
    52f0:	2211c83a 	sub	r8,r4,r8
    52f4:	1204983a 	sll	r2,r2,r8
    52f8:	88a2b03a 	or	r17,r17,r2
    52fc:	8822c03a 	cmpne	r17,r17,zero
    5300:	1c62b03a 	or	r17,r3,r17
    5304:	0011883a 	mov	r8,zero
    5308:	0021883a 	mov	r16,zero
    530c:	003f7106 	br	50d4 <__alt_exception_stack_pointer+0xf80050d4>
    5310:	193ff804 	addi	r4,r3,-32
    5314:	00800804 	movi	r2,32
    5318:	4908d83a 	srl	r4,r9,r4
    531c:	18804526 	beq	r3,r2,5434 <__adddf3+0x564>
    5320:	00801004 	movi	r2,64
    5324:	10c5c83a 	sub	r2,r2,r3
    5328:	4886983a 	sll	r3,r9,r2
    532c:	198cb03a 	or	r6,r3,r6
    5330:	300cc03a 	cmpne	r6,r6,zero
    5334:	218cb03a 	or	r6,r4,r6
    5338:	0007883a 	mov	r3,zero
    533c:	003f3b06 	br	502c <__alt_exception_stack_pointer+0xf800502c>
    5340:	80002a26 	beq	r16,zero,53ec <__adddf3+0x51c>
    5344:	0101ffc4 	movi	r4,2047
    5348:	11006826 	beq	r2,r4,54ec <__adddf3+0x61c>
    534c:	00c7c83a 	sub	r3,zero,r3
    5350:	42002034 	orhi	r8,r8,128
    5354:	01000e04 	movi	r4,56
    5358:	20c07c16 	blt	r4,r3,554c <__adddf3+0x67c>
    535c:	010007c4 	movi	r4,31
    5360:	20c0da16 	blt	r4,r3,56cc <__adddf3+0x7fc>
    5364:	01000804 	movi	r4,32
    5368:	20c9c83a 	sub	r4,r4,r3
    536c:	4114983a 	sll	r10,r8,r4
    5370:	88cad83a 	srl	r5,r17,r3
    5374:	8908983a 	sll	r4,r17,r4
    5378:	40c6d83a 	srl	r3,r8,r3
    537c:	5162b03a 	or	r17,r10,r5
    5380:	2008c03a 	cmpne	r4,r4,zero
    5384:	8922b03a 	or	r17,r17,r4
    5388:	3463c83a 	sub	r17,r6,r17
    538c:	48c7c83a 	sub	r3,r9,r3
    5390:	344d803a 	cmpltu	r6,r6,r17
    5394:	1991c83a 	sub	r8,r3,r6
    5398:	1021883a 	mov	r16,r2
    539c:	3825883a 	mov	r18,r7
    53a0:	003f2706 	br	5040 <__alt_exception_stack_pointer+0xf8005040>
    53a4:	24d0b03a 	or	r8,r4,r19
    53a8:	40001b1e 	bne	r8,zero,5418 <__adddf3+0x548>
    53ac:	0005883a 	mov	r2,zero
    53b0:	0007883a 	mov	r3,zero
    53b4:	0021883a 	mov	r16,zero
    53b8:	003f4d06 	br	50f0 <__alt_exception_stack_pointer+0xf80050f0>
    53bc:	008007c4 	movi	r2,31
    53c0:	11003c16 	blt	r2,r4,54b4 <__adddf3+0x5e4>
    53c4:	00800804 	movi	r2,32
    53c8:	1105c83a 	sub	r2,r2,r4
    53cc:	488e983a 	sll	r7,r9,r2
    53d0:	310ad83a 	srl	r5,r6,r4
    53d4:	3084983a 	sll	r2,r6,r2
    53d8:	4912d83a 	srl	r9,r9,r4
    53dc:	394ab03a 	or	r5,r7,r5
    53e0:	1004c03a 	cmpne	r2,r2,zero
    53e4:	288ab03a 	or	r5,r5,r2
    53e8:	003f5306 	br	5138 <__alt_exception_stack_pointer+0xf8005138>
    53ec:	4448b03a 	or	r4,r8,r17
    53f0:	20003e26 	beq	r4,zero,54ec <__adddf3+0x61c>
    53f4:	00c6303a 	nor	r3,zero,r3
    53f8:	18003a1e 	bne	r3,zero,54e4 <__adddf3+0x614>
    53fc:	3463c83a 	sub	r17,r6,r17
    5400:	4a07c83a 	sub	r3,r9,r8
    5404:	344d803a 	cmpltu	r6,r6,r17
    5408:	1991c83a 	sub	r8,r3,r6
    540c:	1021883a 	mov	r16,r2
    5410:	3825883a 	mov	r18,r7
    5414:	003f0a06 	br	5040 <__alt_exception_stack_pointer+0xf8005040>
    5418:	2023883a 	mov	r17,r4
    541c:	003f0d06 	br	5054 <__alt_exception_stack_pointer+0xf8005054>
    5420:	0081ffc4 	movi	r2,2047
    5424:	80bf3f1e 	bne	r16,r2,5124 <__alt_exception_stack_pointer+0xf8005124>
    5428:	003ec806 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    542c:	0005883a 	mov	r2,zero
    5430:	003fb106 	br	52f8 <__alt_exception_stack_pointer+0xf80052f8>
    5434:	0007883a 	mov	r3,zero
    5438:	003fbc06 	br	532c <__alt_exception_stack_pointer+0xf800532c>
    543c:	4444b03a 	or	r2,r8,r17
    5440:	8000871e 	bne	r16,zero,5660 <__adddf3+0x790>
    5444:	1000ba26 	beq	r2,zero,5730 <__adddf3+0x860>
    5448:	4984b03a 	or	r2,r9,r6
    544c:	103ebf26 	beq	r2,zero,4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5450:	8985883a 	add	r2,r17,r6
    5454:	4247883a 	add	r3,r8,r9
    5458:	1451803a 	cmpltu	r8,r2,r17
    545c:	40d1883a 	add	r8,r8,r3
    5460:	40c0202c 	andhi	r3,r8,128
    5464:	1023883a 	mov	r17,r2
    5468:	183f1a26 	beq	r3,zero,50d4 <__alt_exception_stack_pointer+0xf80050d4>
    546c:	00bfe034 	movhi	r2,65408
    5470:	10bfffc4 	addi	r2,r2,-1
    5474:	2021883a 	mov	r16,r4
    5478:	4090703a 	and	r8,r8,r2
    547c:	003eb306 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5480:	4444b03a 	or	r2,r8,r17
    5484:	8000291e 	bne	r16,zero,552c <__adddf3+0x65c>
    5488:	10004b1e 	bne	r2,zero,55b8 <__adddf3+0x6e8>
    548c:	4990b03a 	or	r8,r9,r6
    5490:	40008b26 	beq	r8,zero,56c0 <__adddf3+0x7f0>
    5494:	4811883a 	mov	r8,r9
    5498:	3023883a 	mov	r17,r6
    549c:	3825883a 	mov	r18,r7
    54a0:	003eaa06 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    54a4:	1021883a 	mov	r16,r2
    54a8:	0011883a 	mov	r8,zero
    54ac:	0005883a 	mov	r2,zero
    54b0:	003f0f06 	br	50f0 <__alt_exception_stack_pointer+0xf80050f0>
    54b4:	217ff804 	addi	r5,r4,-32
    54b8:	00800804 	movi	r2,32
    54bc:	494ad83a 	srl	r5,r9,r5
    54c0:	20807d26 	beq	r4,r2,56b8 <__adddf3+0x7e8>
    54c4:	00801004 	movi	r2,64
    54c8:	1109c83a 	sub	r4,r2,r4
    54cc:	4912983a 	sll	r9,r9,r4
    54d0:	498cb03a 	or	r6,r9,r6
    54d4:	300cc03a 	cmpne	r6,r6,zero
    54d8:	298ab03a 	or	r5,r5,r6
    54dc:	0013883a 	mov	r9,zero
    54e0:	003f1506 	br	5138 <__alt_exception_stack_pointer+0xf8005138>
    54e4:	0101ffc4 	movi	r4,2047
    54e8:	113f9a1e 	bne	r2,r4,5354 <__alt_exception_stack_pointer+0xf8005354>
    54ec:	4811883a 	mov	r8,r9
    54f0:	3023883a 	mov	r17,r6
    54f4:	1021883a 	mov	r16,r2
    54f8:	3825883a 	mov	r18,r7
    54fc:	003e9306 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5500:	8000161e 	bne	r16,zero,555c <__adddf3+0x68c>
    5504:	444ab03a 	or	r5,r8,r17
    5508:	28005126 	beq	r5,zero,5650 <__adddf3+0x780>
    550c:	0108303a 	nor	r4,zero,r4
    5510:	20004d1e 	bne	r4,zero,5648 <__adddf3+0x778>
    5514:	89a3883a 	add	r17,r17,r6
    5518:	4253883a 	add	r9,r8,r9
    551c:	898d803a 	cmpltu	r6,r17,r6
    5520:	3251883a 	add	r8,r6,r9
    5524:	1021883a 	mov	r16,r2
    5528:	003f0806 	br	514c <__alt_exception_stack_pointer+0xf800514c>
    552c:	1000301e 	bne	r2,zero,55f0 <__adddf3+0x720>
    5530:	4984b03a 	or	r2,r9,r6
    5534:	10007126 	beq	r2,zero,56fc <__adddf3+0x82c>
    5538:	4811883a 	mov	r8,r9
    553c:	3023883a 	mov	r17,r6
    5540:	3825883a 	mov	r18,r7
    5544:	0401ffc4 	movi	r16,2047
    5548:	003e8006 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    554c:	4462b03a 	or	r17,r8,r17
    5550:	8822c03a 	cmpne	r17,r17,zero
    5554:	0007883a 	mov	r3,zero
    5558:	003f8b06 	br	5388 <__alt_exception_stack_pointer+0xf8005388>
    555c:	0141ffc4 	movi	r5,2047
    5560:	11403b26 	beq	r2,r5,5650 <__adddf3+0x780>
    5564:	0109c83a 	sub	r4,zero,r4
    5568:	42002034 	orhi	r8,r8,128
    556c:	01400e04 	movi	r5,56
    5570:	29006716 	blt	r5,r4,5710 <__adddf3+0x840>
    5574:	014007c4 	movi	r5,31
    5578:	29007016 	blt	r5,r4,573c <__adddf3+0x86c>
    557c:	01400804 	movi	r5,32
    5580:	290bc83a 	sub	r5,r5,r4
    5584:	4154983a 	sll	r10,r8,r5
    5588:	890ed83a 	srl	r7,r17,r4
    558c:	894a983a 	sll	r5,r17,r5
    5590:	4108d83a 	srl	r4,r8,r4
    5594:	51e2b03a 	or	r17,r10,r7
    5598:	280ac03a 	cmpne	r5,r5,zero
    559c:	8962b03a 	or	r17,r17,r5
    55a0:	89a3883a 	add	r17,r17,r6
    55a4:	2253883a 	add	r9,r4,r9
    55a8:	898d803a 	cmpltu	r6,r17,r6
    55ac:	3251883a 	add	r8,r6,r9
    55b0:	1021883a 	mov	r16,r2
    55b4:	003ee506 	br	514c <__alt_exception_stack_pointer+0xf800514c>
    55b8:	4984b03a 	or	r2,r9,r6
    55bc:	103e6326 	beq	r2,zero,4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    55c0:	8987c83a 	sub	r3,r17,r6
    55c4:	88c9803a 	cmpltu	r4,r17,r3
    55c8:	4245c83a 	sub	r2,r8,r9
    55cc:	1105c83a 	sub	r2,r2,r4
    55d0:	1100202c 	andhi	r4,r2,128
    55d4:	203ebb26 	beq	r4,zero,50c4 <__alt_exception_stack_pointer+0xf80050c4>
    55d8:	3463c83a 	sub	r17,r6,r17
    55dc:	4a07c83a 	sub	r3,r9,r8
    55e0:	344d803a 	cmpltu	r6,r6,r17
    55e4:	1991c83a 	sub	r8,r3,r6
    55e8:	3825883a 	mov	r18,r7
    55ec:	003e5706 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    55f0:	4984b03a 	or	r2,r9,r6
    55f4:	10002e26 	beq	r2,zero,56b0 <__adddf3+0x7e0>
    55f8:	4004d0fa 	srli	r2,r8,3
    55fc:	8822d0fa 	srli	r17,r17,3
    5600:	4010977a 	slli	r8,r8,29
    5604:	10c0022c 	andhi	r3,r2,8
    5608:	4462b03a 	or	r17,r8,r17
    560c:	18000826 	beq	r3,zero,5630 <__adddf3+0x760>
    5610:	4808d0fa 	srli	r4,r9,3
    5614:	20c0022c 	andhi	r3,r4,8
    5618:	1800051e 	bne	r3,zero,5630 <__adddf3+0x760>
    561c:	300cd0fa 	srli	r6,r6,3
    5620:	4806977a 	slli	r3,r9,29
    5624:	2005883a 	mov	r2,r4
    5628:	3825883a 	mov	r18,r7
    562c:	19a2b03a 	or	r17,r3,r6
    5630:	8810d77a 	srli	r8,r17,29
    5634:	100490fa 	slli	r2,r2,3
    5638:	882290fa 	slli	r17,r17,3
    563c:	0401ffc4 	movi	r16,2047
    5640:	4090b03a 	or	r8,r8,r2
    5644:	003e4106 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5648:	0141ffc4 	movi	r5,2047
    564c:	117fc71e 	bne	r2,r5,556c <__alt_exception_stack_pointer+0xf800556c>
    5650:	4811883a 	mov	r8,r9
    5654:	3023883a 	mov	r17,r6
    5658:	1021883a 	mov	r16,r2
    565c:	003e3b06 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5660:	10002f26 	beq	r2,zero,5720 <__adddf3+0x850>
    5664:	4984b03a 	or	r2,r9,r6
    5668:	10001126 	beq	r2,zero,56b0 <__adddf3+0x7e0>
    566c:	4004d0fa 	srli	r2,r8,3
    5670:	8822d0fa 	srli	r17,r17,3
    5674:	4010977a 	slli	r8,r8,29
    5678:	10c0022c 	andhi	r3,r2,8
    567c:	4462b03a 	or	r17,r8,r17
    5680:	183feb26 	beq	r3,zero,5630 <__alt_exception_stack_pointer+0xf8005630>
    5684:	4808d0fa 	srli	r4,r9,3
    5688:	20c0022c 	andhi	r3,r4,8
    568c:	183fe81e 	bne	r3,zero,5630 <__alt_exception_stack_pointer+0xf8005630>
    5690:	300cd0fa 	srli	r6,r6,3
    5694:	4806977a 	slli	r3,r9,29
    5698:	2005883a 	mov	r2,r4
    569c:	19a2b03a 	or	r17,r3,r6
    56a0:	003fe306 	br	5630 <__alt_exception_stack_pointer+0xf8005630>
    56a4:	0011883a 	mov	r8,zero
    56a8:	0005883a 	mov	r2,zero
    56ac:	003e3f06 	br	4fac <__alt_exception_stack_pointer+0xf8004fac>
    56b0:	0401ffc4 	movi	r16,2047
    56b4:	003e2506 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    56b8:	0013883a 	mov	r9,zero
    56bc:	003f8406 	br	54d0 <__alt_exception_stack_pointer+0xf80054d0>
    56c0:	0005883a 	mov	r2,zero
    56c4:	0007883a 	mov	r3,zero
    56c8:	003e8906 	br	50f0 <__alt_exception_stack_pointer+0xf80050f0>
    56cc:	197ff804 	addi	r5,r3,-32
    56d0:	01000804 	movi	r4,32
    56d4:	414ad83a 	srl	r5,r8,r5
    56d8:	19002426 	beq	r3,r4,576c <__adddf3+0x89c>
    56dc:	01001004 	movi	r4,64
    56e0:	20c7c83a 	sub	r3,r4,r3
    56e4:	40c6983a 	sll	r3,r8,r3
    56e8:	1c46b03a 	or	r3,r3,r17
    56ec:	1806c03a 	cmpne	r3,r3,zero
    56f0:	28e2b03a 	or	r17,r5,r3
    56f4:	0007883a 	mov	r3,zero
    56f8:	003f2306 	br	5388 <__alt_exception_stack_pointer+0xf8005388>
    56fc:	0007883a 	mov	r3,zero
    5700:	5811883a 	mov	r8,r11
    5704:	00bfffc4 	movi	r2,-1
    5708:	0401ffc4 	movi	r16,2047
    570c:	003e7806 	br	50f0 <__alt_exception_stack_pointer+0xf80050f0>
    5710:	4462b03a 	or	r17,r8,r17
    5714:	8822c03a 	cmpne	r17,r17,zero
    5718:	0009883a 	mov	r4,zero
    571c:	003fa006 	br	55a0 <__alt_exception_stack_pointer+0xf80055a0>
    5720:	4811883a 	mov	r8,r9
    5724:	3023883a 	mov	r17,r6
    5728:	0401ffc4 	movi	r16,2047
    572c:	003e0706 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    5730:	4811883a 	mov	r8,r9
    5734:	3023883a 	mov	r17,r6
    5738:	003e0406 	br	4f4c <__alt_exception_stack_pointer+0xf8004f4c>
    573c:	21fff804 	addi	r7,r4,-32
    5740:	01400804 	movi	r5,32
    5744:	41ced83a 	srl	r7,r8,r7
    5748:	21400a26 	beq	r4,r5,5774 <__adddf3+0x8a4>
    574c:	01401004 	movi	r5,64
    5750:	2909c83a 	sub	r4,r5,r4
    5754:	4108983a 	sll	r4,r8,r4
    5758:	2448b03a 	or	r4,r4,r17
    575c:	2008c03a 	cmpne	r4,r4,zero
    5760:	3922b03a 	or	r17,r7,r4
    5764:	0009883a 	mov	r4,zero
    5768:	003f8d06 	br	55a0 <__alt_exception_stack_pointer+0xf80055a0>
    576c:	0007883a 	mov	r3,zero
    5770:	003fdd06 	br	56e8 <__alt_exception_stack_pointer+0xf80056e8>
    5774:	0009883a 	mov	r4,zero
    5778:	003ff706 	br	5758 <__alt_exception_stack_pointer+0xf8005758>

0000577c <__eqdf2>:
    577c:	2804d53a 	srli	r2,r5,20
    5780:	3806d53a 	srli	r3,r7,20
    5784:	02000434 	movhi	r8,16
    5788:	423fffc4 	addi	r8,r8,-1
    578c:	1081ffcc 	andi	r2,r2,2047
    5790:	0281ffc4 	movi	r10,2047
    5794:	2a12703a 	and	r9,r5,r8
    5798:	18c1ffcc 	andi	r3,r3,2047
    579c:	3a10703a 	and	r8,r7,r8
    57a0:	280ad7fa 	srli	r5,r5,31
    57a4:	380ed7fa 	srli	r7,r7,31
    57a8:	12801026 	beq	r2,r10,57ec <__eqdf2+0x70>
    57ac:	0281ffc4 	movi	r10,2047
    57b0:	1a800a26 	beq	r3,r10,57dc <__eqdf2+0x60>
    57b4:	10c00226 	beq	r2,r3,57c0 <__eqdf2+0x44>
    57b8:	00800044 	movi	r2,1
    57bc:	f800283a 	ret
    57c0:	4a3ffd1e 	bne	r9,r8,57b8 <__alt_exception_stack_pointer+0xf80057b8>
    57c4:	21bffc1e 	bne	r4,r6,57b8 <__alt_exception_stack_pointer+0xf80057b8>
    57c8:	29c00c26 	beq	r5,r7,57fc <__eqdf2+0x80>
    57cc:	103ffa1e 	bne	r2,zero,57b8 <__alt_exception_stack_pointer+0xf80057b8>
    57d0:	2244b03a 	or	r2,r4,r9
    57d4:	1004c03a 	cmpne	r2,r2,zero
    57d8:	f800283a 	ret
    57dc:	3214b03a 	or	r10,r6,r8
    57e0:	503ff426 	beq	r10,zero,57b4 <__alt_exception_stack_pointer+0xf80057b4>
    57e4:	00800044 	movi	r2,1
    57e8:	f800283a 	ret
    57ec:	2254b03a 	or	r10,r4,r9
    57f0:	503fee26 	beq	r10,zero,57ac <__alt_exception_stack_pointer+0xf80057ac>
    57f4:	00800044 	movi	r2,1
    57f8:	f800283a 	ret
    57fc:	0005883a 	mov	r2,zero
    5800:	f800283a 	ret

00005804 <__gedf2>:
    5804:	2804d53a 	srli	r2,r5,20
    5808:	3806d53a 	srli	r3,r7,20
    580c:	02000434 	movhi	r8,16
    5810:	423fffc4 	addi	r8,r8,-1
    5814:	1081ffcc 	andi	r2,r2,2047
    5818:	0241ffc4 	movi	r9,2047
    581c:	2a14703a 	and	r10,r5,r8
    5820:	18c1ffcc 	andi	r3,r3,2047
    5824:	3a10703a 	and	r8,r7,r8
    5828:	280ad7fa 	srli	r5,r5,31
    582c:	380ed7fa 	srli	r7,r7,31
    5830:	12401d26 	beq	r2,r9,58a8 <__gedf2+0xa4>
    5834:	0241ffc4 	movi	r9,2047
    5838:	1a401226 	beq	r3,r9,5884 <__gedf2+0x80>
    583c:	1000081e 	bne	r2,zero,5860 <__gedf2+0x5c>
    5840:	2296b03a 	or	r11,r4,r10
    5844:	5813003a 	cmpeq	r9,r11,zero
    5848:	1800091e 	bne	r3,zero,5870 <__gedf2+0x6c>
    584c:	3218b03a 	or	r12,r6,r8
    5850:	6000071e 	bne	r12,zero,5870 <__gedf2+0x6c>
    5854:	0005883a 	mov	r2,zero
    5858:	5800101e 	bne	r11,zero,589c <__gedf2+0x98>
    585c:	f800283a 	ret
    5860:	18000c1e 	bne	r3,zero,5894 <__gedf2+0x90>
    5864:	3212b03a 	or	r9,r6,r8
    5868:	48000c26 	beq	r9,zero,589c <__gedf2+0x98>
    586c:	0013883a 	mov	r9,zero
    5870:	39c03fcc 	andi	r7,r7,255
    5874:	48000826 	beq	r9,zero,5898 <__gedf2+0x94>
    5878:	38000926 	beq	r7,zero,58a0 <__gedf2+0x9c>
    587c:	00800044 	movi	r2,1
    5880:	f800283a 	ret
    5884:	3212b03a 	or	r9,r6,r8
    5888:	483fec26 	beq	r9,zero,583c <__alt_exception_stack_pointer+0xf800583c>
    588c:	00bfff84 	movi	r2,-2
    5890:	f800283a 	ret
    5894:	39c03fcc 	andi	r7,r7,255
    5898:	29c00626 	beq	r5,r7,58b4 <__gedf2+0xb0>
    589c:	283ff726 	beq	r5,zero,587c <__alt_exception_stack_pointer+0xf800587c>
    58a0:	00bfffc4 	movi	r2,-1
    58a4:	f800283a 	ret
    58a8:	2292b03a 	or	r9,r4,r10
    58ac:	483fe126 	beq	r9,zero,5834 <__alt_exception_stack_pointer+0xf8005834>
    58b0:	003ff606 	br	588c <__alt_exception_stack_pointer+0xf800588c>
    58b4:	18bff916 	blt	r3,r2,589c <__alt_exception_stack_pointer+0xf800589c>
    58b8:	10c00316 	blt	r2,r3,58c8 <__gedf2+0xc4>
    58bc:	42bff736 	bltu	r8,r10,589c <__alt_exception_stack_pointer+0xf800589c>
    58c0:	52000326 	beq	r10,r8,58d0 <__gedf2+0xcc>
    58c4:	5200042e 	bgeu	r10,r8,58d8 <__gedf2+0xd4>
    58c8:	283fec1e 	bne	r5,zero,587c <__alt_exception_stack_pointer+0xf800587c>
    58cc:	003ff406 	br	58a0 <__alt_exception_stack_pointer+0xf80058a0>
    58d0:	313ff236 	bltu	r6,r4,589c <__alt_exception_stack_pointer+0xf800589c>
    58d4:	21bffc36 	bltu	r4,r6,58c8 <__alt_exception_stack_pointer+0xf80058c8>
    58d8:	0005883a 	mov	r2,zero
    58dc:	f800283a 	ret

000058e0 <__muldf3>:
    58e0:	deffee04 	addi	sp,sp,-72
    58e4:	dd000c15 	stw	r20,48(sp)
    58e8:	2828d53a 	srli	r20,r5,20
    58ec:	ddc00f15 	stw	r23,60(sp)
    58f0:	282ed7fa 	srli	r23,r5,31
    58f4:	dc000815 	stw	r16,32(sp)
    58f8:	04000434 	movhi	r16,16
    58fc:	dcc00b15 	stw	r19,44(sp)
    5900:	843fffc4 	addi	r16,r16,-1
    5904:	dfc01115 	stw	ra,68(sp)
    5908:	df001015 	stw	fp,64(sp)
    590c:	dd800e15 	stw	r22,56(sp)
    5910:	dd400d15 	stw	r21,52(sp)
    5914:	dc800a15 	stw	r18,40(sp)
    5918:	dc400915 	stw	r17,36(sp)
    591c:	a501ffcc 	andi	r20,r20,2047
    5920:	2c20703a 	and	r16,r5,r16
    5924:	b827883a 	mov	r19,r23
    5928:	ba403fcc 	andi	r9,r23,255
    592c:	a0006026 	beq	r20,zero,5ab0 <__muldf3+0x1d0>
    5930:	0081ffc4 	movi	r2,2047
    5934:	202d883a 	mov	r22,r4
    5938:	a0803626 	beq	r20,r2,5a14 <__muldf3+0x134>
    593c:	84000434 	orhi	r16,r16,16
    5940:	200ad77a 	srli	r5,r4,29
    5944:	800490fa 	slli	r2,r16,3
    5948:	202c90fa 	slli	r22,r4,3
    594c:	a53f0044 	addi	r20,r20,-1023
    5950:	28a0b03a 	or	r16,r5,r2
    5954:	002b883a 	mov	r21,zero
    5958:	000b883a 	mov	r5,zero
    595c:	3804d53a 	srli	r2,r7,20
    5960:	3838d7fa 	srli	fp,r7,31
    5964:	04400434 	movhi	r17,16
    5968:	8c7fffc4 	addi	r17,r17,-1
    596c:	1081ffcc 	andi	r2,r2,2047
    5970:	3025883a 	mov	r18,r6
    5974:	3c62703a 	and	r17,r7,r17
    5978:	e2803fcc 	andi	r10,fp,255
    597c:	10006d26 	beq	r2,zero,5b34 <__muldf3+0x254>
    5980:	00c1ffc4 	movi	r3,2047
    5984:	10c06526 	beq	r2,r3,5b1c <__muldf3+0x23c>
    5988:	8c400434 	orhi	r17,r17,16
    598c:	300ed77a 	srli	r7,r6,29
    5990:	880690fa 	slli	r3,r17,3
    5994:	302490fa 	slli	r18,r6,3
    5998:	10bf0044 	addi	r2,r2,-1023
    599c:	38e2b03a 	or	r17,r7,r3
    59a0:	000f883a 	mov	r7,zero
    59a4:	a087883a 	add	r3,r20,r2
    59a8:	010003c4 	movi	r4,15
    59ac:	3d44b03a 	or	r2,r7,r21
    59b0:	e5ccf03a 	xor	r6,fp,r23
    59b4:	1a000044 	addi	r8,r3,1
    59b8:	20809b36 	bltu	r4,r2,5c28 <__muldf3+0x348>
    59bc:	100490ba 	slli	r2,r2,2
    59c0:	01000034 	movhi	r4,0
    59c4:	21167504 	addi	r4,r4,22996
    59c8:	1105883a 	add	r2,r2,r4
    59cc:	10800017 	ldw	r2,0(r2)
    59d0:	1000683a 	jmp	r2
    59d4:	00005c28 	cmpgeui	zero,zero,368
    59d8:	00005a34 	movhi	zero,360
    59dc:	00005a34 	movhi	zero,360
    59e0:	00005a30 	cmpltui	zero,zero,360
    59e4:	00005c04 	movi	zero,368
    59e8:	00005c04 	movi	zero,368
    59ec:	00005bec 	andhi	zero,zero,367
    59f0:	00005a30 	cmpltui	zero,zero,360
    59f4:	00005c04 	movi	zero,368
    59f8:	00005bec 	andhi	zero,zero,367
    59fc:	00005c04 	movi	zero,368
    5a00:	00005a30 	cmpltui	zero,zero,360
    5a04:	00005c14 	movui	zero,368
    5a08:	00005c14 	movui	zero,368
    5a0c:	00005c14 	movui	zero,368
    5a10:	00005f74 	movhi	zero,381
    5a14:	2404b03a 	or	r2,r4,r16
    5a18:	1000711e 	bne	r2,zero,5be0 <__muldf3+0x300>
    5a1c:	05400204 	movi	r21,8
    5a20:	0021883a 	mov	r16,zero
    5a24:	002d883a 	mov	r22,zero
    5a28:	01400084 	movi	r5,2
    5a2c:	003fcb06 	br	595c <__alt_exception_stack_pointer+0xf800595c>
    5a30:	500d883a 	mov	r6,r10
    5a34:	00800084 	movi	r2,2
    5a38:	38805926 	beq	r7,r2,5ba0 <__muldf3+0x2c0>
    5a3c:	008000c4 	movi	r2,3
    5a40:	3881bb26 	beq	r7,r2,6130 <__muldf3+0x850>
    5a44:	00800044 	movi	r2,1
    5a48:	3881961e 	bne	r7,r2,60a4 <__muldf3+0x7c4>
    5a4c:	3027883a 	mov	r19,r6
    5a50:	0005883a 	mov	r2,zero
    5a54:	0021883a 	mov	r16,zero
    5a58:	002d883a 	mov	r22,zero
    5a5c:	1004953a 	slli	r2,r2,20
    5a60:	98c03fcc 	andi	r3,r19,255
    5a64:	04400434 	movhi	r17,16
    5a68:	8c7fffc4 	addi	r17,r17,-1
    5a6c:	180697fa 	slli	r3,r3,31
    5a70:	8460703a 	and	r16,r16,r17
    5a74:	80a0b03a 	or	r16,r16,r2
    5a78:	80c6b03a 	or	r3,r16,r3
    5a7c:	b005883a 	mov	r2,r22
    5a80:	dfc01117 	ldw	ra,68(sp)
    5a84:	df001017 	ldw	fp,64(sp)
    5a88:	ddc00f17 	ldw	r23,60(sp)
    5a8c:	dd800e17 	ldw	r22,56(sp)
    5a90:	dd400d17 	ldw	r21,52(sp)
    5a94:	dd000c17 	ldw	r20,48(sp)
    5a98:	dcc00b17 	ldw	r19,44(sp)
    5a9c:	dc800a17 	ldw	r18,40(sp)
    5aa0:	dc400917 	ldw	r17,36(sp)
    5aa4:	dc000817 	ldw	r16,32(sp)
    5aa8:	dec01204 	addi	sp,sp,72
    5aac:	f800283a 	ret
    5ab0:	2404b03a 	or	r2,r4,r16
    5ab4:	202b883a 	mov	r21,r4
    5ab8:	10004426 	beq	r2,zero,5bcc <__muldf3+0x2ec>
    5abc:	80015126 	beq	r16,zero,6004 <__muldf3+0x724>
    5ac0:	8009883a 	mov	r4,r16
    5ac4:	d9800715 	stw	r6,28(sp)
    5ac8:	d9c00215 	stw	r7,8(sp)
    5acc:	da400415 	stw	r9,16(sp)
    5ad0:	0006ba40 	call	6ba4 <__clzsi2>
    5ad4:	d9800717 	ldw	r6,28(sp)
    5ad8:	d9c00217 	ldw	r7,8(sp)
    5adc:	da400417 	ldw	r9,16(sp)
    5ae0:	113ffd44 	addi	r4,r2,-11
    5ae4:	00c00704 	movi	r3,28
    5ae8:	19014216 	blt	r3,r4,5ff4 <__muldf3+0x714>
    5aec:	00c00744 	movi	r3,29
    5af0:	15bffe04 	addi	r22,r2,-8
    5af4:	1907c83a 	sub	r3,r3,r4
    5af8:	85a0983a 	sll	r16,r16,r22
    5afc:	a8c6d83a 	srl	r3,r21,r3
    5b00:	adac983a 	sll	r22,r21,r22
    5b04:	1c20b03a 	or	r16,r3,r16
    5b08:	1080fcc4 	addi	r2,r2,1011
    5b0c:	00a9c83a 	sub	r20,zero,r2
    5b10:	002b883a 	mov	r21,zero
    5b14:	000b883a 	mov	r5,zero
    5b18:	003f9006 	br	595c <__alt_exception_stack_pointer+0xf800595c>
    5b1c:	3446b03a 	or	r3,r6,r17
    5b20:	1800281e 	bne	r3,zero,5bc4 <__muldf3+0x2e4>
    5b24:	0023883a 	mov	r17,zero
    5b28:	0025883a 	mov	r18,zero
    5b2c:	01c00084 	movi	r7,2
    5b30:	003f9c06 	br	59a4 <__alt_exception_stack_pointer+0xf80059a4>
    5b34:	3446b03a 	or	r3,r6,r17
    5b38:	18001e26 	beq	r3,zero,5bb4 <__muldf3+0x2d4>
    5b3c:	88012126 	beq	r17,zero,5fc4 <__muldf3+0x6e4>
    5b40:	8809883a 	mov	r4,r17
    5b44:	d9400215 	stw	r5,8(sp)
    5b48:	d9800715 	stw	r6,28(sp)
    5b4c:	da400415 	stw	r9,16(sp)
    5b50:	da800315 	stw	r10,12(sp)
    5b54:	0006ba40 	call	6ba4 <__clzsi2>
    5b58:	d9400217 	ldw	r5,8(sp)
    5b5c:	d9800717 	ldw	r6,28(sp)
    5b60:	da400417 	ldw	r9,16(sp)
    5b64:	da800317 	ldw	r10,12(sp)
    5b68:	113ffd44 	addi	r4,r2,-11
    5b6c:	00c00704 	movi	r3,28
    5b70:	19011016 	blt	r3,r4,5fb4 <__muldf3+0x6d4>
    5b74:	00c00744 	movi	r3,29
    5b78:	14bffe04 	addi	r18,r2,-8
    5b7c:	1907c83a 	sub	r3,r3,r4
    5b80:	8ca2983a 	sll	r17,r17,r18
    5b84:	30c6d83a 	srl	r3,r6,r3
    5b88:	34a4983a 	sll	r18,r6,r18
    5b8c:	1c62b03a 	or	r17,r3,r17
    5b90:	1080fcc4 	addi	r2,r2,1011
    5b94:	0085c83a 	sub	r2,zero,r2
    5b98:	000f883a 	mov	r7,zero
    5b9c:	003f8106 	br	59a4 <__alt_exception_stack_pointer+0xf80059a4>
    5ba0:	3027883a 	mov	r19,r6
    5ba4:	0081ffc4 	movi	r2,2047
    5ba8:	0021883a 	mov	r16,zero
    5bac:	002d883a 	mov	r22,zero
    5bb0:	003faa06 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    5bb4:	0023883a 	mov	r17,zero
    5bb8:	0025883a 	mov	r18,zero
    5bbc:	01c00044 	movi	r7,1
    5bc0:	003f7806 	br	59a4 <__alt_exception_stack_pointer+0xf80059a4>
    5bc4:	01c000c4 	movi	r7,3
    5bc8:	003f7606 	br	59a4 <__alt_exception_stack_pointer+0xf80059a4>
    5bcc:	05400104 	movi	r21,4
    5bd0:	0021883a 	mov	r16,zero
    5bd4:	002d883a 	mov	r22,zero
    5bd8:	01400044 	movi	r5,1
    5bdc:	003f5f06 	br	595c <__alt_exception_stack_pointer+0xf800595c>
    5be0:	05400304 	movi	r21,12
    5be4:	014000c4 	movi	r5,3
    5be8:	003f5c06 	br	595c <__alt_exception_stack_pointer+0xf800595c>
    5bec:	04000434 	movhi	r16,16
    5bf0:	0027883a 	mov	r19,zero
    5bf4:	843fffc4 	addi	r16,r16,-1
    5bf8:	05bfffc4 	movi	r22,-1
    5bfc:	0081ffc4 	movi	r2,2047
    5c00:	003f9606 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    5c04:	8023883a 	mov	r17,r16
    5c08:	b025883a 	mov	r18,r22
    5c0c:	280f883a 	mov	r7,r5
    5c10:	003f8806 	br	5a34 <__alt_exception_stack_pointer+0xf8005a34>
    5c14:	8023883a 	mov	r17,r16
    5c18:	b025883a 	mov	r18,r22
    5c1c:	480d883a 	mov	r6,r9
    5c20:	280f883a 	mov	r7,r5
    5c24:	003f8306 	br	5a34 <__alt_exception_stack_pointer+0xf8005a34>
    5c28:	b026d43a 	srli	r19,r22,16
    5c2c:	902ed43a 	srli	r23,r18,16
    5c30:	b5bfffcc 	andi	r22,r22,65535
    5c34:	94bfffcc 	andi	r18,r18,65535
    5c38:	b00b883a 	mov	r5,r22
    5c3c:	9009883a 	mov	r4,r18
    5c40:	d8c00515 	stw	r3,20(sp)
    5c44:	d9800715 	stw	r6,28(sp)
    5c48:	da000615 	stw	r8,24(sp)
    5c4c:	0004ea80 	call	4ea8 <__mulsi3>
    5c50:	980b883a 	mov	r5,r19
    5c54:	9009883a 	mov	r4,r18
    5c58:	1029883a 	mov	r20,r2
    5c5c:	0004ea80 	call	4ea8 <__mulsi3>
    5c60:	b80b883a 	mov	r5,r23
    5c64:	9809883a 	mov	r4,r19
    5c68:	102b883a 	mov	r21,r2
    5c6c:	0004ea80 	call	4ea8 <__mulsi3>
    5c70:	b809883a 	mov	r4,r23
    5c74:	b00b883a 	mov	r5,r22
    5c78:	1039883a 	mov	fp,r2
    5c7c:	0004ea80 	call	4ea8 <__mulsi3>
    5c80:	a008d43a 	srli	r4,r20,16
    5c84:	1545883a 	add	r2,r2,r21
    5c88:	d8c00517 	ldw	r3,20(sp)
    5c8c:	2085883a 	add	r2,r4,r2
    5c90:	d9800717 	ldw	r6,28(sp)
    5c94:	da000617 	ldw	r8,24(sp)
    5c98:	1540022e 	bgeu	r2,r21,5ca4 <__muldf3+0x3c4>
    5c9c:	01000074 	movhi	r4,1
    5ca0:	e139883a 	add	fp,fp,r4
    5ca4:	100e943a 	slli	r7,r2,16
    5ca8:	1004d43a 	srli	r2,r2,16
    5cac:	882ad43a 	srli	r21,r17,16
    5cb0:	a53fffcc 	andi	r20,r20,65535
    5cb4:	8c7fffcc 	andi	r17,r17,65535
    5cb8:	3d29883a 	add	r20,r7,r20
    5cbc:	b00b883a 	mov	r5,r22
    5cc0:	8809883a 	mov	r4,r17
    5cc4:	d8c00515 	stw	r3,20(sp)
    5cc8:	d9800715 	stw	r6,28(sp)
    5ccc:	da000615 	stw	r8,24(sp)
    5cd0:	dd000115 	stw	r20,4(sp)
    5cd4:	d8800015 	stw	r2,0(sp)
    5cd8:	0004ea80 	call	4ea8 <__mulsi3>
    5cdc:	980b883a 	mov	r5,r19
    5ce0:	8809883a 	mov	r4,r17
    5ce4:	d8800215 	stw	r2,8(sp)
    5ce8:	0004ea80 	call	4ea8 <__mulsi3>
    5cec:	9809883a 	mov	r4,r19
    5cf0:	a80b883a 	mov	r5,r21
    5cf4:	1029883a 	mov	r20,r2
    5cf8:	0004ea80 	call	4ea8 <__mulsi3>
    5cfc:	b00b883a 	mov	r5,r22
    5d00:	a809883a 	mov	r4,r21
    5d04:	d8800415 	stw	r2,16(sp)
    5d08:	0004ea80 	call	4ea8 <__mulsi3>
    5d0c:	d9c00217 	ldw	r7,8(sp)
    5d10:	1505883a 	add	r2,r2,r20
    5d14:	d8c00517 	ldw	r3,20(sp)
    5d18:	3826d43a 	srli	r19,r7,16
    5d1c:	d9800717 	ldw	r6,28(sp)
    5d20:	da000617 	ldw	r8,24(sp)
    5d24:	9885883a 	add	r2,r19,r2
    5d28:	da400417 	ldw	r9,16(sp)
    5d2c:	1500022e 	bgeu	r2,r20,5d38 <__muldf3+0x458>
    5d30:	01000074 	movhi	r4,1
    5d34:	4913883a 	add	r9,r9,r4
    5d38:	1028d43a 	srli	r20,r2,16
    5d3c:	1004943a 	slli	r2,r2,16
    5d40:	802cd43a 	srli	r22,r16,16
    5d44:	843fffcc 	andi	r16,r16,65535
    5d48:	3cffffcc 	andi	r19,r7,65535
    5d4c:	9009883a 	mov	r4,r18
    5d50:	800b883a 	mov	r5,r16
    5d54:	a269883a 	add	r20,r20,r9
    5d58:	d8c00515 	stw	r3,20(sp)
    5d5c:	d9800715 	stw	r6,28(sp)
    5d60:	da000615 	stw	r8,24(sp)
    5d64:	14e7883a 	add	r19,r2,r19
    5d68:	0004ea80 	call	4ea8 <__mulsi3>
    5d6c:	9009883a 	mov	r4,r18
    5d70:	b00b883a 	mov	r5,r22
    5d74:	d8800315 	stw	r2,12(sp)
    5d78:	0004ea80 	call	4ea8 <__mulsi3>
    5d7c:	b809883a 	mov	r4,r23
    5d80:	b00b883a 	mov	r5,r22
    5d84:	d8800215 	stw	r2,8(sp)
    5d88:	0004ea80 	call	4ea8 <__mulsi3>
    5d8c:	b80b883a 	mov	r5,r23
    5d90:	8009883a 	mov	r4,r16
    5d94:	d8800415 	stw	r2,16(sp)
    5d98:	0004ea80 	call	4ea8 <__mulsi3>
    5d9c:	da800317 	ldw	r10,12(sp)
    5da0:	d9c00217 	ldw	r7,8(sp)
    5da4:	d9000017 	ldw	r4,0(sp)
    5da8:	502ed43a 	srli	r23,r10,16
    5dac:	11c5883a 	add	r2,r2,r7
    5db0:	24e5883a 	add	r18,r4,r19
    5db4:	b885883a 	add	r2,r23,r2
    5db8:	d8c00517 	ldw	r3,20(sp)
    5dbc:	d9800717 	ldw	r6,28(sp)
    5dc0:	da000617 	ldw	r8,24(sp)
    5dc4:	da400417 	ldw	r9,16(sp)
    5dc8:	11c0022e 	bgeu	r2,r7,5dd4 <__muldf3+0x4f4>
    5dcc:	01000074 	movhi	r4,1
    5dd0:	4913883a 	add	r9,r9,r4
    5dd4:	100ed43a 	srli	r7,r2,16
    5dd8:	1004943a 	slli	r2,r2,16
    5ddc:	55ffffcc 	andi	r23,r10,65535
    5de0:	3a53883a 	add	r9,r7,r9
    5de4:	8809883a 	mov	r4,r17
    5de8:	800b883a 	mov	r5,r16
    5dec:	d8c00515 	stw	r3,20(sp)
    5df0:	d9800715 	stw	r6,28(sp)
    5df4:	da000615 	stw	r8,24(sp)
    5df8:	da400415 	stw	r9,16(sp)
    5dfc:	15ef883a 	add	r23,r2,r23
    5e00:	0004ea80 	call	4ea8 <__mulsi3>
    5e04:	8809883a 	mov	r4,r17
    5e08:	b00b883a 	mov	r5,r22
    5e0c:	d8800215 	stw	r2,8(sp)
    5e10:	0004ea80 	call	4ea8 <__mulsi3>
    5e14:	b00b883a 	mov	r5,r22
    5e18:	a809883a 	mov	r4,r21
    5e1c:	d8800315 	stw	r2,12(sp)
    5e20:	0004ea80 	call	4ea8 <__mulsi3>
    5e24:	8009883a 	mov	r4,r16
    5e28:	a80b883a 	mov	r5,r21
    5e2c:	1023883a 	mov	r17,r2
    5e30:	0004ea80 	call	4ea8 <__mulsi3>
    5e34:	d9c00217 	ldw	r7,8(sp)
    5e38:	da800317 	ldw	r10,12(sp)
    5e3c:	d8c00517 	ldw	r3,20(sp)
    5e40:	3808d43a 	srli	r4,r7,16
    5e44:	1285883a 	add	r2,r2,r10
    5e48:	d9800717 	ldw	r6,28(sp)
    5e4c:	2085883a 	add	r2,r4,r2
    5e50:	da000617 	ldw	r8,24(sp)
    5e54:	da400417 	ldw	r9,16(sp)
    5e58:	1280022e 	bgeu	r2,r10,5e64 <__muldf3+0x584>
    5e5c:	01000074 	movhi	r4,1
    5e60:	8923883a 	add	r17,r17,r4
    5e64:	1008943a 	slli	r4,r2,16
    5e68:	39ffffcc 	andi	r7,r7,65535
    5e6c:	e4b9883a 	add	fp,fp,r18
    5e70:	21cf883a 	add	r7,r4,r7
    5e74:	e4e7803a 	cmpltu	r19,fp,r19
    5e78:	3d0f883a 	add	r7,r7,r20
    5e7c:	bf39883a 	add	fp,r23,fp
    5e80:	99c9883a 	add	r4,r19,r7
    5e84:	e5ef803a 	cmpltu	r23,fp,r23
    5e88:	490b883a 	add	r5,r9,r4
    5e8c:	1004d43a 	srli	r2,r2,16
    5e90:	b965883a 	add	r18,r23,r5
    5e94:	24c9803a 	cmpltu	r4,r4,r19
    5e98:	3d29803a 	cmpltu	r20,r7,r20
    5e9c:	a128b03a 	or	r20,r20,r4
    5ea0:	95ef803a 	cmpltu	r23,r18,r23
    5ea4:	2a53803a 	cmpltu	r9,r5,r9
    5ea8:	a0a9883a 	add	r20,r20,r2
    5eac:	4deeb03a 	or	r23,r9,r23
    5eb0:	a5ef883a 	add	r23,r20,r23
    5eb4:	bc63883a 	add	r17,r23,r17
    5eb8:	e004927a 	slli	r2,fp,9
    5ebc:	d9000117 	ldw	r4,4(sp)
    5ec0:	882e927a 	slli	r23,r17,9
    5ec4:	9022d5fa 	srli	r17,r18,23
    5ec8:	e038d5fa 	srli	fp,fp,23
    5ecc:	1104b03a 	or	r2,r2,r4
    5ed0:	9024927a 	slli	r18,r18,9
    5ed4:	1004c03a 	cmpne	r2,r2,zero
    5ed8:	bc62b03a 	or	r17,r23,r17
    5edc:	1738b03a 	or	fp,r2,fp
    5ee0:	8880402c 	andhi	r2,r17,256
    5ee4:	e4a4b03a 	or	r18,fp,r18
    5ee8:	10000726 	beq	r2,zero,5f08 <__muldf3+0x628>
    5eec:	9006d07a 	srli	r3,r18,1
    5ef0:	880497fa 	slli	r2,r17,31
    5ef4:	9480004c 	andi	r18,r18,1
    5ef8:	8822d07a 	srli	r17,r17,1
    5efc:	1ca4b03a 	or	r18,r3,r18
    5f00:	14a4b03a 	or	r18,r2,r18
    5f04:	4007883a 	mov	r3,r8
    5f08:	1880ffc4 	addi	r2,r3,1023
    5f0c:	0080460e 	bge	zero,r2,6028 <__muldf3+0x748>
    5f10:	910001cc 	andi	r4,r18,7
    5f14:	20000726 	beq	r4,zero,5f34 <__muldf3+0x654>
    5f18:	910003cc 	andi	r4,r18,15
    5f1c:	01400104 	movi	r5,4
    5f20:	21400426 	beq	r4,r5,5f34 <__muldf3+0x654>
    5f24:	9149883a 	add	r4,r18,r5
    5f28:	24a5803a 	cmpltu	r18,r4,r18
    5f2c:	8ca3883a 	add	r17,r17,r18
    5f30:	2025883a 	mov	r18,r4
    5f34:	8900402c 	andhi	r4,r17,256
    5f38:	20000426 	beq	r4,zero,5f4c <__muldf3+0x66c>
    5f3c:	18810004 	addi	r2,r3,1024
    5f40:	00ffc034 	movhi	r3,65280
    5f44:	18ffffc4 	addi	r3,r3,-1
    5f48:	88e2703a 	and	r17,r17,r3
    5f4c:	00c1ff84 	movi	r3,2046
    5f50:	18bf1316 	blt	r3,r2,5ba0 <__alt_exception_stack_pointer+0xf8005ba0>
    5f54:	882c977a 	slli	r22,r17,29
    5f58:	9024d0fa 	srli	r18,r18,3
    5f5c:	8822927a 	slli	r17,r17,9
    5f60:	1081ffcc 	andi	r2,r2,2047
    5f64:	b4acb03a 	or	r22,r22,r18
    5f68:	8820d33a 	srli	r16,r17,12
    5f6c:	3027883a 	mov	r19,r6
    5f70:	003eba06 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    5f74:	8080022c 	andhi	r2,r16,8
    5f78:	10000926 	beq	r2,zero,5fa0 <__muldf3+0x6c0>
    5f7c:	8880022c 	andhi	r2,r17,8
    5f80:	1000071e 	bne	r2,zero,5fa0 <__muldf3+0x6c0>
    5f84:	00800434 	movhi	r2,16
    5f88:	8c000234 	orhi	r16,r17,8
    5f8c:	10bfffc4 	addi	r2,r2,-1
    5f90:	e027883a 	mov	r19,fp
    5f94:	80a0703a 	and	r16,r16,r2
    5f98:	902d883a 	mov	r22,r18
    5f9c:	003f1706 	br	5bfc <__alt_exception_stack_pointer+0xf8005bfc>
    5fa0:	00800434 	movhi	r2,16
    5fa4:	84000234 	orhi	r16,r16,8
    5fa8:	10bfffc4 	addi	r2,r2,-1
    5fac:	80a0703a 	and	r16,r16,r2
    5fb0:	003f1206 	br	5bfc <__alt_exception_stack_pointer+0xf8005bfc>
    5fb4:	147ff604 	addi	r17,r2,-40
    5fb8:	3462983a 	sll	r17,r6,r17
    5fbc:	0025883a 	mov	r18,zero
    5fc0:	003ef306 	br	5b90 <__alt_exception_stack_pointer+0xf8005b90>
    5fc4:	3009883a 	mov	r4,r6
    5fc8:	d9400215 	stw	r5,8(sp)
    5fcc:	d9800715 	stw	r6,28(sp)
    5fd0:	da400415 	stw	r9,16(sp)
    5fd4:	da800315 	stw	r10,12(sp)
    5fd8:	0006ba40 	call	6ba4 <__clzsi2>
    5fdc:	10800804 	addi	r2,r2,32
    5fe0:	da800317 	ldw	r10,12(sp)
    5fe4:	da400417 	ldw	r9,16(sp)
    5fe8:	d9800717 	ldw	r6,28(sp)
    5fec:	d9400217 	ldw	r5,8(sp)
    5ff0:	003edd06 	br	5b68 <__alt_exception_stack_pointer+0xf8005b68>
    5ff4:	143ff604 	addi	r16,r2,-40
    5ff8:	ac20983a 	sll	r16,r21,r16
    5ffc:	002d883a 	mov	r22,zero
    6000:	003ec106 	br	5b08 <__alt_exception_stack_pointer+0xf8005b08>
    6004:	d9800715 	stw	r6,28(sp)
    6008:	d9c00215 	stw	r7,8(sp)
    600c:	da400415 	stw	r9,16(sp)
    6010:	0006ba40 	call	6ba4 <__clzsi2>
    6014:	10800804 	addi	r2,r2,32
    6018:	da400417 	ldw	r9,16(sp)
    601c:	d9c00217 	ldw	r7,8(sp)
    6020:	d9800717 	ldw	r6,28(sp)
    6024:	003eae06 	br	5ae0 <__alt_exception_stack_pointer+0xf8005ae0>
    6028:	00c00044 	movi	r3,1
    602c:	1887c83a 	sub	r3,r3,r2
    6030:	01000e04 	movi	r4,56
    6034:	20fe8516 	blt	r4,r3,5a4c <__alt_exception_stack_pointer+0xf8005a4c>
    6038:	010007c4 	movi	r4,31
    603c:	20c01b16 	blt	r4,r3,60ac <__muldf3+0x7cc>
    6040:	00800804 	movi	r2,32
    6044:	10c5c83a 	sub	r2,r2,r3
    6048:	888a983a 	sll	r5,r17,r2
    604c:	90c8d83a 	srl	r4,r18,r3
    6050:	9084983a 	sll	r2,r18,r2
    6054:	88e2d83a 	srl	r17,r17,r3
    6058:	2906b03a 	or	r3,r5,r4
    605c:	1004c03a 	cmpne	r2,r2,zero
    6060:	1886b03a 	or	r3,r3,r2
    6064:	188001cc 	andi	r2,r3,7
    6068:	10000726 	beq	r2,zero,6088 <__muldf3+0x7a8>
    606c:	188003cc 	andi	r2,r3,15
    6070:	01000104 	movi	r4,4
    6074:	11000426 	beq	r2,r4,6088 <__muldf3+0x7a8>
    6078:	1805883a 	mov	r2,r3
    607c:	10c00104 	addi	r3,r2,4
    6080:	1885803a 	cmpltu	r2,r3,r2
    6084:	88a3883a 	add	r17,r17,r2
    6088:	8880202c 	andhi	r2,r17,128
    608c:	10001c26 	beq	r2,zero,6100 <__muldf3+0x820>
    6090:	3027883a 	mov	r19,r6
    6094:	00800044 	movi	r2,1
    6098:	0021883a 	mov	r16,zero
    609c:	002d883a 	mov	r22,zero
    60a0:	003e6e06 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    60a4:	4007883a 	mov	r3,r8
    60a8:	003f9706 	br	5f08 <__alt_exception_stack_pointer+0xf8005f08>
    60ac:	017ff844 	movi	r5,-31
    60b0:	2885c83a 	sub	r2,r5,r2
    60b4:	888ad83a 	srl	r5,r17,r2
    60b8:	00800804 	movi	r2,32
    60bc:	18801a26 	beq	r3,r2,6128 <__muldf3+0x848>
    60c0:	01001004 	movi	r4,64
    60c4:	20c7c83a 	sub	r3,r4,r3
    60c8:	88e2983a 	sll	r17,r17,r3
    60cc:	8ca4b03a 	or	r18,r17,r18
    60d0:	9004c03a 	cmpne	r2,r18,zero
    60d4:	2884b03a 	or	r2,r5,r2
    60d8:	144001cc 	andi	r17,r2,7
    60dc:	88000d1e 	bne	r17,zero,6114 <__muldf3+0x834>
    60e0:	0021883a 	mov	r16,zero
    60e4:	102cd0fa 	srli	r22,r2,3
    60e8:	3027883a 	mov	r19,r6
    60ec:	0005883a 	mov	r2,zero
    60f0:	b46cb03a 	or	r22,r22,r17
    60f4:	003e5906 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    60f8:	1007883a 	mov	r3,r2
    60fc:	0023883a 	mov	r17,zero
    6100:	8820927a 	slli	r16,r17,9
    6104:	1805883a 	mov	r2,r3
    6108:	8822977a 	slli	r17,r17,29
    610c:	8020d33a 	srli	r16,r16,12
    6110:	003ff406 	br	60e4 <__alt_exception_stack_pointer+0xf80060e4>
    6114:	10c003cc 	andi	r3,r2,15
    6118:	01000104 	movi	r4,4
    611c:	193ff626 	beq	r3,r4,60f8 <__alt_exception_stack_pointer+0xf80060f8>
    6120:	0023883a 	mov	r17,zero
    6124:	003fd506 	br	607c <__alt_exception_stack_pointer+0xf800607c>
    6128:	0023883a 	mov	r17,zero
    612c:	003fe706 	br	60cc <__alt_exception_stack_pointer+0xf80060cc>
    6130:	00800434 	movhi	r2,16
    6134:	8c000234 	orhi	r16,r17,8
    6138:	10bfffc4 	addi	r2,r2,-1
    613c:	3027883a 	mov	r19,r6
    6140:	80a0703a 	and	r16,r16,r2
    6144:	902d883a 	mov	r22,r18
    6148:	003eac06 	br	5bfc <__alt_exception_stack_pointer+0xf8005bfc>

0000614c <__subdf3>:
    614c:	02000434 	movhi	r8,16
    6150:	423fffc4 	addi	r8,r8,-1
    6154:	defffb04 	addi	sp,sp,-20
    6158:	2a14703a 	and	r10,r5,r8
    615c:	3812d53a 	srli	r9,r7,20
    6160:	3a10703a 	and	r8,r7,r8
    6164:	2006d77a 	srli	r3,r4,29
    6168:	3004d77a 	srli	r2,r6,29
    616c:	dc000015 	stw	r16,0(sp)
    6170:	501490fa 	slli	r10,r10,3
    6174:	2820d53a 	srli	r16,r5,20
    6178:	401090fa 	slli	r8,r8,3
    617c:	dc800215 	stw	r18,8(sp)
    6180:	dc400115 	stw	r17,4(sp)
    6184:	dfc00415 	stw	ra,16(sp)
    6188:	202290fa 	slli	r17,r4,3
    618c:	dcc00315 	stw	r19,12(sp)
    6190:	4a41ffcc 	andi	r9,r9,2047
    6194:	0101ffc4 	movi	r4,2047
    6198:	2824d7fa 	srli	r18,r5,31
    619c:	8401ffcc 	andi	r16,r16,2047
    61a0:	50c6b03a 	or	r3,r10,r3
    61a4:	380ed7fa 	srli	r7,r7,31
    61a8:	408ab03a 	or	r5,r8,r2
    61ac:	300c90fa 	slli	r6,r6,3
    61b0:	49009626 	beq	r9,r4,640c <__subdf3+0x2c0>
    61b4:	39c0005c 	xori	r7,r7,1
    61b8:	8245c83a 	sub	r2,r16,r9
    61bc:	3c807426 	beq	r7,r18,6390 <__subdf3+0x244>
    61c0:	0080af0e 	bge	zero,r2,6480 <__subdf3+0x334>
    61c4:	48002a1e 	bne	r9,zero,6270 <__subdf3+0x124>
    61c8:	2988b03a 	or	r4,r5,r6
    61cc:	20009a1e 	bne	r4,zero,6438 <__subdf3+0x2ec>
    61d0:	888001cc 	andi	r2,r17,7
    61d4:	10000726 	beq	r2,zero,61f4 <__subdf3+0xa8>
    61d8:	888003cc 	andi	r2,r17,15
    61dc:	01000104 	movi	r4,4
    61e0:	11000426 	beq	r2,r4,61f4 <__subdf3+0xa8>
    61e4:	890b883a 	add	r5,r17,r4
    61e8:	2c63803a 	cmpltu	r17,r5,r17
    61ec:	1c47883a 	add	r3,r3,r17
    61f0:	2823883a 	mov	r17,r5
    61f4:	1880202c 	andhi	r2,r3,128
    61f8:	10005926 	beq	r2,zero,6360 <__subdf3+0x214>
    61fc:	84000044 	addi	r16,r16,1
    6200:	0081ffc4 	movi	r2,2047
    6204:	8080be26 	beq	r16,r2,6500 <__subdf3+0x3b4>
    6208:	017fe034 	movhi	r5,65408
    620c:	297fffc4 	addi	r5,r5,-1
    6210:	1946703a 	and	r3,r3,r5
    6214:	1804977a 	slli	r2,r3,29
    6218:	1806927a 	slli	r3,r3,9
    621c:	8822d0fa 	srli	r17,r17,3
    6220:	8401ffcc 	andi	r16,r16,2047
    6224:	180ad33a 	srli	r5,r3,12
    6228:	9100004c 	andi	r4,r18,1
    622c:	1444b03a 	or	r2,r2,r17
    6230:	80c1ffcc 	andi	r3,r16,2047
    6234:	1820953a 	slli	r16,r3,20
    6238:	20c03fcc 	andi	r3,r4,255
    623c:	180897fa 	slli	r4,r3,31
    6240:	00c00434 	movhi	r3,16
    6244:	18ffffc4 	addi	r3,r3,-1
    6248:	28c6703a 	and	r3,r5,r3
    624c:	1c06b03a 	or	r3,r3,r16
    6250:	1906b03a 	or	r3,r3,r4
    6254:	dfc00417 	ldw	ra,16(sp)
    6258:	dcc00317 	ldw	r19,12(sp)
    625c:	dc800217 	ldw	r18,8(sp)
    6260:	dc400117 	ldw	r17,4(sp)
    6264:	dc000017 	ldw	r16,0(sp)
    6268:	dec00504 	addi	sp,sp,20
    626c:	f800283a 	ret
    6270:	0101ffc4 	movi	r4,2047
    6274:	813fd626 	beq	r16,r4,61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6278:	29402034 	orhi	r5,r5,128
    627c:	01000e04 	movi	r4,56
    6280:	2080a316 	blt	r4,r2,6510 <__subdf3+0x3c4>
    6284:	010007c4 	movi	r4,31
    6288:	2080c616 	blt	r4,r2,65a4 <__subdf3+0x458>
    628c:	01000804 	movi	r4,32
    6290:	2089c83a 	sub	r4,r4,r2
    6294:	2910983a 	sll	r8,r5,r4
    6298:	308ed83a 	srl	r7,r6,r2
    629c:	3108983a 	sll	r4,r6,r4
    62a0:	2884d83a 	srl	r2,r5,r2
    62a4:	41ccb03a 	or	r6,r8,r7
    62a8:	2008c03a 	cmpne	r4,r4,zero
    62ac:	310cb03a 	or	r6,r6,r4
    62b0:	898dc83a 	sub	r6,r17,r6
    62b4:	89a3803a 	cmpltu	r17,r17,r6
    62b8:	1887c83a 	sub	r3,r3,r2
    62bc:	1c47c83a 	sub	r3,r3,r17
    62c0:	3023883a 	mov	r17,r6
    62c4:	1880202c 	andhi	r2,r3,128
    62c8:	10002326 	beq	r2,zero,6358 <__subdf3+0x20c>
    62cc:	04c02034 	movhi	r19,128
    62d0:	9cffffc4 	addi	r19,r19,-1
    62d4:	1ce6703a 	and	r19,r3,r19
    62d8:	98007a26 	beq	r19,zero,64c4 <__subdf3+0x378>
    62dc:	9809883a 	mov	r4,r19
    62e0:	0006ba40 	call	6ba4 <__clzsi2>
    62e4:	113ffe04 	addi	r4,r2,-8
    62e8:	00c007c4 	movi	r3,31
    62ec:	19007b16 	blt	r3,r4,64dc <__subdf3+0x390>
    62f0:	00800804 	movi	r2,32
    62f4:	1105c83a 	sub	r2,r2,r4
    62f8:	8884d83a 	srl	r2,r17,r2
    62fc:	9906983a 	sll	r3,r19,r4
    6300:	8922983a 	sll	r17,r17,r4
    6304:	10c4b03a 	or	r2,r2,r3
    6308:	24007816 	blt	r4,r16,64ec <__subdf3+0x3a0>
    630c:	2421c83a 	sub	r16,r4,r16
    6310:	80c00044 	addi	r3,r16,1
    6314:	010007c4 	movi	r4,31
    6318:	20c09516 	blt	r4,r3,6570 <__subdf3+0x424>
    631c:	01400804 	movi	r5,32
    6320:	28cbc83a 	sub	r5,r5,r3
    6324:	88c8d83a 	srl	r4,r17,r3
    6328:	8962983a 	sll	r17,r17,r5
    632c:	114a983a 	sll	r5,r2,r5
    6330:	10c6d83a 	srl	r3,r2,r3
    6334:	8804c03a 	cmpne	r2,r17,zero
    6338:	290ab03a 	or	r5,r5,r4
    633c:	28a2b03a 	or	r17,r5,r2
    6340:	0021883a 	mov	r16,zero
    6344:	003fa206 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6348:	2090b03a 	or	r8,r4,r2
    634c:	40018e26 	beq	r8,zero,6988 <__subdf3+0x83c>
    6350:	1007883a 	mov	r3,r2
    6354:	2023883a 	mov	r17,r4
    6358:	888001cc 	andi	r2,r17,7
    635c:	103f9e1e 	bne	r2,zero,61d8 <__alt_exception_stack_pointer+0xf80061d8>
    6360:	1804977a 	slli	r2,r3,29
    6364:	8822d0fa 	srli	r17,r17,3
    6368:	1810d0fa 	srli	r8,r3,3
    636c:	9100004c 	andi	r4,r18,1
    6370:	1444b03a 	or	r2,r2,r17
    6374:	00c1ffc4 	movi	r3,2047
    6378:	80c02826 	beq	r16,r3,641c <__subdf3+0x2d0>
    637c:	01400434 	movhi	r5,16
    6380:	297fffc4 	addi	r5,r5,-1
    6384:	80e0703a 	and	r16,r16,r3
    6388:	414a703a 	and	r5,r8,r5
    638c:	003fa806 	br	6230 <__alt_exception_stack_pointer+0xf8006230>
    6390:	0080630e 	bge	zero,r2,6520 <__subdf3+0x3d4>
    6394:	48003026 	beq	r9,zero,6458 <__subdf3+0x30c>
    6398:	0101ffc4 	movi	r4,2047
    639c:	813f8c26 	beq	r16,r4,61d0 <__alt_exception_stack_pointer+0xf80061d0>
    63a0:	29402034 	orhi	r5,r5,128
    63a4:	01000e04 	movi	r4,56
    63a8:	2080a90e 	bge	r4,r2,6650 <__subdf3+0x504>
    63ac:	298cb03a 	or	r6,r5,r6
    63b0:	3012c03a 	cmpne	r9,r6,zero
    63b4:	0005883a 	mov	r2,zero
    63b8:	4c53883a 	add	r9,r9,r17
    63bc:	4c63803a 	cmpltu	r17,r9,r17
    63c0:	10c7883a 	add	r3,r2,r3
    63c4:	88c7883a 	add	r3,r17,r3
    63c8:	4823883a 	mov	r17,r9
    63cc:	1880202c 	andhi	r2,r3,128
    63d0:	1000d026 	beq	r2,zero,6714 <__subdf3+0x5c8>
    63d4:	84000044 	addi	r16,r16,1
    63d8:	0081ffc4 	movi	r2,2047
    63dc:	8080fe26 	beq	r16,r2,67d8 <__subdf3+0x68c>
    63e0:	00bfe034 	movhi	r2,65408
    63e4:	10bfffc4 	addi	r2,r2,-1
    63e8:	1886703a 	and	r3,r3,r2
    63ec:	880ad07a 	srli	r5,r17,1
    63f0:	180497fa 	slli	r2,r3,31
    63f4:	8900004c 	andi	r4,r17,1
    63f8:	2922b03a 	or	r17,r5,r4
    63fc:	1806d07a 	srli	r3,r3,1
    6400:	1462b03a 	or	r17,r2,r17
    6404:	3825883a 	mov	r18,r7
    6408:	003f7106 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    640c:	2984b03a 	or	r2,r5,r6
    6410:	103f6826 	beq	r2,zero,61b4 <__alt_exception_stack_pointer+0xf80061b4>
    6414:	39c03fcc 	andi	r7,r7,255
    6418:	003f6706 	br	61b8 <__alt_exception_stack_pointer+0xf80061b8>
    641c:	4086b03a 	or	r3,r8,r2
    6420:	18015226 	beq	r3,zero,696c <__subdf3+0x820>
    6424:	00c00434 	movhi	r3,16
    6428:	41400234 	orhi	r5,r8,8
    642c:	18ffffc4 	addi	r3,r3,-1
    6430:	28ca703a 	and	r5,r5,r3
    6434:	003f7e06 	br	6230 <__alt_exception_stack_pointer+0xf8006230>
    6438:	10bfffc4 	addi	r2,r2,-1
    643c:	1000491e 	bne	r2,zero,6564 <__subdf3+0x418>
    6440:	898fc83a 	sub	r7,r17,r6
    6444:	89e3803a 	cmpltu	r17,r17,r7
    6448:	1947c83a 	sub	r3,r3,r5
    644c:	1c47c83a 	sub	r3,r3,r17
    6450:	3823883a 	mov	r17,r7
    6454:	003f9b06 	br	62c4 <__alt_exception_stack_pointer+0xf80062c4>
    6458:	2988b03a 	or	r4,r5,r6
    645c:	203f5c26 	beq	r4,zero,61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6460:	10bfffc4 	addi	r2,r2,-1
    6464:	1000931e 	bne	r2,zero,66b4 <__subdf3+0x568>
    6468:	898d883a 	add	r6,r17,r6
    646c:	3463803a 	cmpltu	r17,r6,r17
    6470:	1947883a 	add	r3,r3,r5
    6474:	88c7883a 	add	r3,r17,r3
    6478:	3023883a 	mov	r17,r6
    647c:	003fd306 	br	63cc <__alt_exception_stack_pointer+0xf80063cc>
    6480:	1000541e 	bne	r2,zero,65d4 <__subdf3+0x488>
    6484:	80800044 	addi	r2,r16,1
    6488:	1081ffcc 	andi	r2,r2,2047
    648c:	01000044 	movi	r4,1
    6490:	2080a20e 	bge	r4,r2,671c <__subdf3+0x5d0>
    6494:	8989c83a 	sub	r4,r17,r6
    6498:	8905803a 	cmpltu	r2,r17,r4
    649c:	1967c83a 	sub	r19,r3,r5
    64a0:	98a7c83a 	sub	r19,r19,r2
    64a4:	9880202c 	andhi	r2,r19,128
    64a8:	10006326 	beq	r2,zero,6638 <__subdf3+0x4ec>
    64ac:	3463c83a 	sub	r17,r6,r17
    64b0:	28c7c83a 	sub	r3,r5,r3
    64b4:	344d803a 	cmpltu	r6,r6,r17
    64b8:	19a7c83a 	sub	r19,r3,r6
    64bc:	3825883a 	mov	r18,r7
    64c0:	983f861e 	bne	r19,zero,62dc <__alt_exception_stack_pointer+0xf80062dc>
    64c4:	8809883a 	mov	r4,r17
    64c8:	0006ba40 	call	6ba4 <__clzsi2>
    64cc:	10800804 	addi	r2,r2,32
    64d0:	113ffe04 	addi	r4,r2,-8
    64d4:	00c007c4 	movi	r3,31
    64d8:	193f850e 	bge	r3,r4,62f0 <__alt_exception_stack_pointer+0xf80062f0>
    64dc:	10bff604 	addi	r2,r2,-40
    64e0:	8884983a 	sll	r2,r17,r2
    64e4:	0023883a 	mov	r17,zero
    64e8:	243f880e 	bge	r4,r16,630c <__alt_exception_stack_pointer+0xf800630c>
    64ec:	00ffe034 	movhi	r3,65408
    64f0:	18ffffc4 	addi	r3,r3,-1
    64f4:	8121c83a 	sub	r16,r16,r4
    64f8:	10c6703a 	and	r3,r2,r3
    64fc:	003f3406 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6500:	9100004c 	andi	r4,r18,1
    6504:	000b883a 	mov	r5,zero
    6508:	0005883a 	mov	r2,zero
    650c:	003f4806 	br	6230 <__alt_exception_stack_pointer+0xf8006230>
    6510:	298cb03a 	or	r6,r5,r6
    6514:	300cc03a 	cmpne	r6,r6,zero
    6518:	0005883a 	mov	r2,zero
    651c:	003f6406 	br	62b0 <__alt_exception_stack_pointer+0xf80062b0>
    6520:	10009a1e 	bne	r2,zero,678c <__subdf3+0x640>
    6524:	82400044 	addi	r9,r16,1
    6528:	4881ffcc 	andi	r2,r9,2047
    652c:	02800044 	movi	r10,1
    6530:	5080670e 	bge	r10,r2,66d0 <__subdf3+0x584>
    6534:	0081ffc4 	movi	r2,2047
    6538:	4880af26 	beq	r9,r2,67f8 <__subdf3+0x6ac>
    653c:	898d883a 	add	r6,r17,r6
    6540:	1945883a 	add	r2,r3,r5
    6544:	3447803a 	cmpltu	r3,r6,r17
    6548:	1887883a 	add	r3,r3,r2
    654c:	182297fa 	slli	r17,r3,31
    6550:	300cd07a 	srli	r6,r6,1
    6554:	1806d07a 	srli	r3,r3,1
    6558:	4821883a 	mov	r16,r9
    655c:	89a2b03a 	or	r17,r17,r6
    6560:	003f1b06 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6564:	0101ffc4 	movi	r4,2047
    6568:	813f441e 	bne	r16,r4,627c <__alt_exception_stack_pointer+0xf800627c>
    656c:	003f1806 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6570:	843ff844 	addi	r16,r16,-31
    6574:	01400804 	movi	r5,32
    6578:	1408d83a 	srl	r4,r2,r16
    657c:	19405026 	beq	r3,r5,66c0 <__subdf3+0x574>
    6580:	01401004 	movi	r5,64
    6584:	28c7c83a 	sub	r3,r5,r3
    6588:	10c4983a 	sll	r2,r2,r3
    658c:	88a2b03a 	or	r17,r17,r2
    6590:	8822c03a 	cmpne	r17,r17,zero
    6594:	2462b03a 	or	r17,r4,r17
    6598:	0007883a 	mov	r3,zero
    659c:	0021883a 	mov	r16,zero
    65a0:	003f6d06 	br	6358 <__alt_exception_stack_pointer+0xf8006358>
    65a4:	11fff804 	addi	r7,r2,-32
    65a8:	01000804 	movi	r4,32
    65ac:	29ced83a 	srl	r7,r5,r7
    65b0:	11004526 	beq	r2,r4,66c8 <__subdf3+0x57c>
    65b4:	01001004 	movi	r4,64
    65b8:	2089c83a 	sub	r4,r4,r2
    65bc:	2904983a 	sll	r2,r5,r4
    65c0:	118cb03a 	or	r6,r2,r6
    65c4:	300cc03a 	cmpne	r6,r6,zero
    65c8:	398cb03a 	or	r6,r7,r6
    65cc:	0005883a 	mov	r2,zero
    65d0:	003f3706 	br	62b0 <__alt_exception_stack_pointer+0xf80062b0>
    65d4:	80002a26 	beq	r16,zero,6680 <__subdf3+0x534>
    65d8:	0101ffc4 	movi	r4,2047
    65dc:	49006626 	beq	r9,r4,6778 <__subdf3+0x62c>
    65e0:	0085c83a 	sub	r2,zero,r2
    65e4:	18c02034 	orhi	r3,r3,128
    65e8:	01000e04 	movi	r4,56
    65ec:	20807e16 	blt	r4,r2,67e8 <__subdf3+0x69c>
    65f0:	010007c4 	movi	r4,31
    65f4:	2080e716 	blt	r4,r2,6994 <__subdf3+0x848>
    65f8:	01000804 	movi	r4,32
    65fc:	2089c83a 	sub	r4,r4,r2
    6600:	1914983a 	sll	r10,r3,r4
    6604:	8890d83a 	srl	r8,r17,r2
    6608:	8908983a 	sll	r4,r17,r4
    660c:	1884d83a 	srl	r2,r3,r2
    6610:	5222b03a 	or	r17,r10,r8
    6614:	2006c03a 	cmpne	r3,r4,zero
    6618:	88e2b03a 	or	r17,r17,r3
    661c:	3463c83a 	sub	r17,r6,r17
    6620:	2885c83a 	sub	r2,r5,r2
    6624:	344d803a 	cmpltu	r6,r6,r17
    6628:	1187c83a 	sub	r3,r2,r6
    662c:	4821883a 	mov	r16,r9
    6630:	3825883a 	mov	r18,r7
    6634:	003f2306 	br	62c4 <__alt_exception_stack_pointer+0xf80062c4>
    6638:	24d0b03a 	or	r8,r4,r19
    663c:	40001b1e 	bne	r8,zero,66ac <__subdf3+0x560>
    6640:	0005883a 	mov	r2,zero
    6644:	0009883a 	mov	r4,zero
    6648:	0021883a 	mov	r16,zero
    664c:	003f4906 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    6650:	010007c4 	movi	r4,31
    6654:	20803a16 	blt	r4,r2,6740 <__subdf3+0x5f4>
    6658:	01000804 	movi	r4,32
    665c:	2089c83a 	sub	r4,r4,r2
    6660:	2912983a 	sll	r9,r5,r4
    6664:	3090d83a 	srl	r8,r6,r2
    6668:	3108983a 	sll	r4,r6,r4
    666c:	2884d83a 	srl	r2,r5,r2
    6670:	4a12b03a 	or	r9,r9,r8
    6674:	2008c03a 	cmpne	r4,r4,zero
    6678:	4912b03a 	or	r9,r9,r4
    667c:	003f4e06 	br	63b8 <__alt_exception_stack_pointer+0xf80063b8>
    6680:	1c48b03a 	or	r4,r3,r17
    6684:	20003c26 	beq	r4,zero,6778 <__subdf3+0x62c>
    6688:	0084303a 	nor	r2,zero,r2
    668c:	1000381e 	bne	r2,zero,6770 <__subdf3+0x624>
    6690:	3463c83a 	sub	r17,r6,r17
    6694:	28c5c83a 	sub	r2,r5,r3
    6698:	344d803a 	cmpltu	r6,r6,r17
    669c:	1187c83a 	sub	r3,r2,r6
    66a0:	4821883a 	mov	r16,r9
    66a4:	3825883a 	mov	r18,r7
    66a8:	003f0606 	br	62c4 <__alt_exception_stack_pointer+0xf80062c4>
    66ac:	2023883a 	mov	r17,r4
    66b0:	003f0906 	br	62d8 <__alt_exception_stack_pointer+0xf80062d8>
    66b4:	0101ffc4 	movi	r4,2047
    66b8:	813f3a1e 	bne	r16,r4,63a4 <__alt_exception_stack_pointer+0xf80063a4>
    66bc:	003ec406 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    66c0:	0005883a 	mov	r2,zero
    66c4:	003fb106 	br	658c <__alt_exception_stack_pointer+0xf800658c>
    66c8:	0005883a 	mov	r2,zero
    66cc:	003fbc06 	br	65c0 <__alt_exception_stack_pointer+0xf80065c0>
    66d0:	1c44b03a 	or	r2,r3,r17
    66d4:	80008e1e 	bne	r16,zero,6910 <__subdf3+0x7c4>
    66d8:	1000c826 	beq	r2,zero,69fc <__subdf3+0x8b0>
    66dc:	2984b03a 	or	r2,r5,r6
    66e0:	103ebb26 	beq	r2,zero,61d0 <__alt_exception_stack_pointer+0xf80061d0>
    66e4:	8989883a 	add	r4,r17,r6
    66e8:	1945883a 	add	r2,r3,r5
    66ec:	2447803a 	cmpltu	r3,r4,r17
    66f0:	1887883a 	add	r3,r3,r2
    66f4:	1880202c 	andhi	r2,r3,128
    66f8:	2023883a 	mov	r17,r4
    66fc:	103f1626 	beq	r2,zero,6358 <__alt_exception_stack_pointer+0xf8006358>
    6700:	00bfe034 	movhi	r2,65408
    6704:	10bfffc4 	addi	r2,r2,-1
    6708:	5021883a 	mov	r16,r10
    670c:	1886703a 	and	r3,r3,r2
    6710:	003eaf06 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6714:	3825883a 	mov	r18,r7
    6718:	003f0f06 	br	6358 <__alt_exception_stack_pointer+0xf8006358>
    671c:	1c44b03a 	or	r2,r3,r17
    6720:	8000251e 	bne	r16,zero,67b8 <__subdf3+0x66c>
    6724:	1000661e 	bne	r2,zero,68c0 <__subdf3+0x774>
    6728:	2990b03a 	or	r8,r5,r6
    672c:	40009626 	beq	r8,zero,6988 <__subdf3+0x83c>
    6730:	2807883a 	mov	r3,r5
    6734:	3023883a 	mov	r17,r6
    6738:	3825883a 	mov	r18,r7
    673c:	003ea406 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6740:	127ff804 	addi	r9,r2,-32
    6744:	01000804 	movi	r4,32
    6748:	2a52d83a 	srl	r9,r5,r9
    674c:	11008c26 	beq	r2,r4,6980 <__subdf3+0x834>
    6750:	01001004 	movi	r4,64
    6754:	2085c83a 	sub	r2,r4,r2
    6758:	2884983a 	sll	r2,r5,r2
    675c:	118cb03a 	or	r6,r2,r6
    6760:	300cc03a 	cmpne	r6,r6,zero
    6764:	4992b03a 	or	r9,r9,r6
    6768:	0005883a 	mov	r2,zero
    676c:	003f1206 	br	63b8 <__alt_exception_stack_pointer+0xf80063b8>
    6770:	0101ffc4 	movi	r4,2047
    6774:	493f9c1e 	bne	r9,r4,65e8 <__alt_exception_stack_pointer+0xf80065e8>
    6778:	2807883a 	mov	r3,r5
    677c:	3023883a 	mov	r17,r6
    6780:	4821883a 	mov	r16,r9
    6784:	3825883a 	mov	r18,r7
    6788:	003e9106 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    678c:	80001f1e 	bne	r16,zero,680c <__subdf3+0x6c0>
    6790:	1c48b03a 	or	r4,r3,r17
    6794:	20005a26 	beq	r4,zero,6900 <__subdf3+0x7b4>
    6798:	0084303a 	nor	r2,zero,r2
    679c:	1000561e 	bne	r2,zero,68f8 <__subdf3+0x7ac>
    67a0:	89a3883a 	add	r17,r17,r6
    67a4:	1945883a 	add	r2,r3,r5
    67a8:	898d803a 	cmpltu	r6,r17,r6
    67ac:	3087883a 	add	r3,r6,r2
    67b0:	4821883a 	mov	r16,r9
    67b4:	003f0506 	br	63cc <__alt_exception_stack_pointer+0xf80063cc>
    67b8:	10002b1e 	bne	r2,zero,6868 <__subdf3+0x71c>
    67bc:	2984b03a 	or	r2,r5,r6
    67c0:	10008026 	beq	r2,zero,69c4 <__subdf3+0x878>
    67c4:	2807883a 	mov	r3,r5
    67c8:	3023883a 	mov	r17,r6
    67cc:	3825883a 	mov	r18,r7
    67d0:	0401ffc4 	movi	r16,2047
    67d4:	003e7e06 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    67d8:	3809883a 	mov	r4,r7
    67dc:	0011883a 	mov	r8,zero
    67e0:	0005883a 	mov	r2,zero
    67e4:	003ee306 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    67e8:	1c62b03a 	or	r17,r3,r17
    67ec:	8822c03a 	cmpne	r17,r17,zero
    67f0:	0005883a 	mov	r2,zero
    67f4:	003f8906 	br	661c <__alt_exception_stack_pointer+0xf800661c>
    67f8:	3809883a 	mov	r4,r7
    67fc:	4821883a 	mov	r16,r9
    6800:	0011883a 	mov	r8,zero
    6804:	0005883a 	mov	r2,zero
    6808:	003eda06 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    680c:	0101ffc4 	movi	r4,2047
    6810:	49003b26 	beq	r9,r4,6900 <__subdf3+0x7b4>
    6814:	0085c83a 	sub	r2,zero,r2
    6818:	18c02034 	orhi	r3,r3,128
    681c:	01000e04 	movi	r4,56
    6820:	20806e16 	blt	r4,r2,69dc <__subdf3+0x890>
    6824:	010007c4 	movi	r4,31
    6828:	20807716 	blt	r4,r2,6a08 <__subdf3+0x8bc>
    682c:	01000804 	movi	r4,32
    6830:	2089c83a 	sub	r4,r4,r2
    6834:	1914983a 	sll	r10,r3,r4
    6838:	8890d83a 	srl	r8,r17,r2
    683c:	8908983a 	sll	r4,r17,r4
    6840:	1884d83a 	srl	r2,r3,r2
    6844:	5222b03a 	or	r17,r10,r8
    6848:	2006c03a 	cmpne	r3,r4,zero
    684c:	88e2b03a 	or	r17,r17,r3
    6850:	89a3883a 	add	r17,r17,r6
    6854:	1145883a 	add	r2,r2,r5
    6858:	898d803a 	cmpltu	r6,r17,r6
    685c:	3087883a 	add	r3,r6,r2
    6860:	4821883a 	mov	r16,r9
    6864:	003ed906 	br	63cc <__alt_exception_stack_pointer+0xf80063cc>
    6868:	2984b03a 	or	r2,r5,r6
    686c:	10004226 	beq	r2,zero,6978 <__subdf3+0x82c>
    6870:	1808d0fa 	srli	r4,r3,3
    6874:	8822d0fa 	srli	r17,r17,3
    6878:	1806977a 	slli	r3,r3,29
    687c:	2080022c 	andhi	r2,r4,8
    6880:	1c62b03a 	or	r17,r3,r17
    6884:	10000826 	beq	r2,zero,68a8 <__subdf3+0x75c>
    6888:	2812d0fa 	srli	r9,r5,3
    688c:	4880022c 	andhi	r2,r9,8
    6890:	1000051e 	bne	r2,zero,68a8 <__subdf3+0x75c>
    6894:	300cd0fa 	srli	r6,r6,3
    6898:	2804977a 	slli	r2,r5,29
    689c:	4809883a 	mov	r4,r9
    68a0:	3825883a 	mov	r18,r7
    68a4:	11a2b03a 	or	r17,r2,r6
    68a8:	8806d77a 	srli	r3,r17,29
    68ac:	200890fa 	slli	r4,r4,3
    68b0:	882290fa 	slli	r17,r17,3
    68b4:	0401ffc4 	movi	r16,2047
    68b8:	1906b03a 	or	r3,r3,r4
    68bc:	003e4406 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    68c0:	2984b03a 	or	r2,r5,r6
    68c4:	103e4226 	beq	r2,zero,61d0 <__alt_exception_stack_pointer+0xf80061d0>
    68c8:	8989c83a 	sub	r4,r17,r6
    68cc:	8911803a 	cmpltu	r8,r17,r4
    68d0:	1945c83a 	sub	r2,r3,r5
    68d4:	1205c83a 	sub	r2,r2,r8
    68d8:	1200202c 	andhi	r8,r2,128
    68dc:	403e9a26 	beq	r8,zero,6348 <__alt_exception_stack_pointer+0xf8006348>
    68e0:	3463c83a 	sub	r17,r6,r17
    68e4:	28c5c83a 	sub	r2,r5,r3
    68e8:	344d803a 	cmpltu	r6,r6,r17
    68ec:	1187c83a 	sub	r3,r2,r6
    68f0:	3825883a 	mov	r18,r7
    68f4:	003e3606 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    68f8:	0101ffc4 	movi	r4,2047
    68fc:	493fc71e 	bne	r9,r4,681c <__alt_exception_stack_pointer+0xf800681c>
    6900:	2807883a 	mov	r3,r5
    6904:	3023883a 	mov	r17,r6
    6908:	4821883a 	mov	r16,r9
    690c:	003e3006 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6910:	10003626 	beq	r2,zero,69ec <__subdf3+0x8a0>
    6914:	2984b03a 	or	r2,r5,r6
    6918:	10001726 	beq	r2,zero,6978 <__subdf3+0x82c>
    691c:	1808d0fa 	srli	r4,r3,3
    6920:	8822d0fa 	srli	r17,r17,3
    6924:	1806977a 	slli	r3,r3,29
    6928:	2080022c 	andhi	r2,r4,8
    692c:	1c62b03a 	or	r17,r3,r17
    6930:	10000726 	beq	r2,zero,6950 <__subdf3+0x804>
    6934:	2812d0fa 	srli	r9,r5,3
    6938:	4880022c 	andhi	r2,r9,8
    693c:	1000041e 	bne	r2,zero,6950 <__subdf3+0x804>
    6940:	300cd0fa 	srli	r6,r6,3
    6944:	2804977a 	slli	r2,r5,29
    6948:	4809883a 	mov	r4,r9
    694c:	11a2b03a 	or	r17,r2,r6
    6950:	8806d77a 	srli	r3,r17,29
    6954:	200890fa 	slli	r4,r4,3
    6958:	882290fa 	slli	r17,r17,3
    695c:	3825883a 	mov	r18,r7
    6960:	1906b03a 	or	r3,r3,r4
    6964:	0401ffc4 	movi	r16,2047
    6968:	003e1906 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    696c:	000b883a 	mov	r5,zero
    6970:	0005883a 	mov	r2,zero
    6974:	003e2e06 	br	6230 <__alt_exception_stack_pointer+0xf8006230>
    6978:	0401ffc4 	movi	r16,2047
    697c:	003e1406 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6980:	0005883a 	mov	r2,zero
    6984:	003f7506 	br	675c <__alt_exception_stack_pointer+0xf800675c>
    6988:	0005883a 	mov	r2,zero
    698c:	0009883a 	mov	r4,zero
    6990:	003e7806 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    6994:	123ff804 	addi	r8,r2,-32
    6998:	01000804 	movi	r4,32
    699c:	1a10d83a 	srl	r8,r3,r8
    69a0:	11002526 	beq	r2,r4,6a38 <__subdf3+0x8ec>
    69a4:	01001004 	movi	r4,64
    69a8:	2085c83a 	sub	r2,r4,r2
    69ac:	1884983a 	sll	r2,r3,r2
    69b0:	1444b03a 	or	r2,r2,r17
    69b4:	1004c03a 	cmpne	r2,r2,zero
    69b8:	40a2b03a 	or	r17,r8,r2
    69bc:	0005883a 	mov	r2,zero
    69c0:	003f1606 	br	661c <__alt_exception_stack_pointer+0xf800661c>
    69c4:	02000434 	movhi	r8,16
    69c8:	0009883a 	mov	r4,zero
    69cc:	423fffc4 	addi	r8,r8,-1
    69d0:	00bfffc4 	movi	r2,-1
    69d4:	0401ffc4 	movi	r16,2047
    69d8:	003e6606 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    69dc:	1c62b03a 	or	r17,r3,r17
    69e0:	8822c03a 	cmpne	r17,r17,zero
    69e4:	0005883a 	mov	r2,zero
    69e8:	003f9906 	br	6850 <__alt_exception_stack_pointer+0xf8006850>
    69ec:	2807883a 	mov	r3,r5
    69f0:	3023883a 	mov	r17,r6
    69f4:	0401ffc4 	movi	r16,2047
    69f8:	003df506 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    69fc:	2807883a 	mov	r3,r5
    6a00:	3023883a 	mov	r17,r6
    6a04:	003df206 	br	61d0 <__alt_exception_stack_pointer+0xf80061d0>
    6a08:	123ff804 	addi	r8,r2,-32
    6a0c:	01000804 	movi	r4,32
    6a10:	1a10d83a 	srl	r8,r3,r8
    6a14:	11000a26 	beq	r2,r4,6a40 <__subdf3+0x8f4>
    6a18:	01001004 	movi	r4,64
    6a1c:	2085c83a 	sub	r2,r4,r2
    6a20:	1884983a 	sll	r2,r3,r2
    6a24:	1444b03a 	or	r2,r2,r17
    6a28:	1004c03a 	cmpne	r2,r2,zero
    6a2c:	40a2b03a 	or	r17,r8,r2
    6a30:	0005883a 	mov	r2,zero
    6a34:	003f8606 	br	6850 <__alt_exception_stack_pointer+0xf8006850>
    6a38:	0005883a 	mov	r2,zero
    6a3c:	003fdc06 	br	69b0 <__alt_exception_stack_pointer+0xf80069b0>
    6a40:	0005883a 	mov	r2,zero
    6a44:	003ff706 	br	6a24 <__alt_exception_stack_pointer+0xf8006a24>

00006a48 <__fixdfsi>:
    6a48:	280cd53a 	srli	r6,r5,20
    6a4c:	00c00434 	movhi	r3,16
    6a50:	18ffffc4 	addi	r3,r3,-1
    6a54:	3181ffcc 	andi	r6,r6,2047
    6a58:	01c0ff84 	movi	r7,1022
    6a5c:	28c6703a 	and	r3,r5,r3
    6a60:	280ad7fa 	srli	r5,r5,31
    6a64:	3980120e 	bge	r7,r6,6ab0 <__fixdfsi+0x68>
    6a68:	00810744 	movi	r2,1053
    6a6c:	11800c16 	blt	r2,r6,6aa0 <__fixdfsi+0x58>
    6a70:	00810cc4 	movi	r2,1075
    6a74:	1185c83a 	sub	r2,r2,r6
    6a78:	01c007c4 	movi	r7,31
    6a7c:	18c00434 	orhi	r3,r3,16
    6a80:	38800d16 	blt	r7,r2,6ab8 <__fixdfsi+0x70>
    6a84:	31befb44 	addi	r6,r6,-1043
    6a88:	2084d83a 	srl	r2,r4,r2
    6a8c:	1986983a 	sll	r3,r3,r6
    6a90:	1884b03a 	or	r2,r3,r2
    6a94:	28000726 	beq	r5,zero,6ab4 <__fixdfsi+0x6c>
    6a98:	0085c83a 	sub	r2,zero,r2
    6a9c:	f800283a 	ret
    6aa0:	00a00034 	movhi	r2,32768
    6aa4:	10bfffc4 	addi	r2,r2,-1
    6aa8:	2885883a 	add	r2,r5,r2
    6aac:	f800283a 	ret
    6ab0:	0005883a 	mov	r2,zero
    6ab4:	f800283a 	ret
    6ab8:	008104c4 	movi	r2,1043
    6abc:	1185c83a 	sub	r2,r2,r6
    6ac0:	1884d83a 	srl	r2,r3,r2
    6ac4:	003ff306 	br	6a94 <__alt_exception_stack_pointer+0xf8006a94>

00006ac8 <__floatsidf>:
    6ac8:	defffd04 	addi	sp,sp,-12
    6acc:	dfc00215 	stw	ra,8(sp)
    6ad0:	dc400115 	stw	r17,4(sp)
    6ad4:	dc000015 	stw	r16,0(sp)
    6ad8:	20002b26 	beq	r4,zero,6b88 <__floatsidf+0xc0>
    6adc:	2023883a 	mov	r17,r4
    6ae0:	2020d7fa 	srli	r16,r4,31
    6ae4:	20002d16 	blt	r4,zero,6b9c <__floatsidf+0xd4>
    6ae8:	8809883a 	mov	r4,r17
    6aec:	0006ba40 	call	6ba4 <__clzsi2>
    6af0:	01410784 	movi	r5,1054
    6af4:	288bc83a 	sub	r5,r5,r2
    6af8:	01010cc4 	movi	r4,1075
    6afc:	2149c83a 	sub	r4,r4,r5
    6b00:	00c007c4 	movi	r3,31
    6b04:	1900160e 	bge	r3,r4,6b60 <__floatsidf+0x98>
    6b08:	00c104c4 	movi	r3,1043
    6b0c:	1947c83a 	sub	r3,r3,r5
    6b10:	88c6983a 	sll	r3,r17,r3
    6b14:	00800434 	movhi	r2,16
    6b18:	10bfffc4 	addi	r2,r2,-1
    6b1c:	1886703a 	and	r3,r3,r2
    6b20:	2941ffcc 	andi	r5,r5,2047
    6b24:	800d883a 	mov	r6,r16
    6b28:	0005883a 	mov	r2,zero
    6b2c:	280a953a 	slli	r5,r5,20
    6b30:	31803fcc 	andi	r6,r6,255
    6b34:	01000434 	movhi	r4,16
    6b38:	300c97fa 	slli	r6,r6,31
    6b3c:	213fffc4 	addi	r4,r4,-1
    6b40:	1906703a 	and	r3,r3,r4
    6b44:	1946b03a 	or	r3,r3,r5
    6b48:	1986b03a 	or	r3,r3,r6
    6b4c:	dfc00217 	ldw	ra,8(sp)
    6b50:	dc400117 	ldw	r17,4(sp)
    6b54:	dc000017 	ldw	r16,0(sp)
    6b58:	dec00304 	addi	sp,sp,12
    6b5c:	f800283a 	ret
    6b60:	00c002c4 	movi	r3,11
    6b64:	1887c83a 	sub	r3,r3,r2
    6b68:	88c6d83a 	srl	r3,r17,r3
    6b6c:	8904983a 	sll	r2,r17,r4
    6b70:	01000434 	movhi	r4,16
    6b74:	213fffc4 	addi	r4,r4,-1
    6b78:	2941ffcc 	andi	r5,r5,2047
    6b7c:	1906703a 	and	r3,r3,r4
    6b80:	800d883a 	mov	r6,r16
    6b84:	003fe906 	br	6b2c <__alt_exception_stack_pointer+0xf8006b2c>
    6b88:	000d883a 	mov	r6,zero
    6b8c:	000b883a 	mov	r5,zero
    6b90:	0007883a 	mov	r3,zero
    6b94:	0005883a 	mov	r2,zero
    6b98:	003fe406 	br	6b2c <__alt_exception_stack_pointer+0xf8006b2c>
    6b9c:	0123c83a 	sub	r17,zero,r4
    6ba0:	003fd106 	br	6ae8 <__alt_exception_stack_pointer+0xf8006ae8>

00006ba4 <__clzsi2>:
    6ba4:	00bfffd4 	movui	r2,65535
    6ba8:	11000536 	bltu	r2,r4,6bc0 <__clzsi2+0x1c>
    6bac:	00803fc4 	movi	r2,255
    6bb0:	11000f36 	bltu	r2,r4,6bf0 <__clzsi2+0x4c>
    6bb4:	00800804 	movi	r2,32
    6bb8:	0007883a 	mov	r3,zero
    6bbc:	00000506 	br	6bd4 <__clzsi2+0x30>
    6bc0:	00804034 	movhi	r2,256
    6bc4:	10bfffc4 	addi	r2,r2,-1
    6bc8:	11000c2e 	bgeu	r2,r4,6bfc <__clzsi2+0x58>
    6bcc:	00800204 	movi	r2,8
    6bd0:	00c00604 	movi	r3,24
    6bd4:	20c8d83a 	srl	r4,r4,r3
    6bd8:	00c00074 	movhi	r3,1
    6bdc:	18d4d304 	addi	r3,r3,21324
    6be0:	1909883a 	add	r4,r3,r4
    6be4:	20c00003 	ldbu	r3,0(r4)
    6be8:	10c5c83a 	sub	r2,r2,r3
    6bec:	f800283a 	ret
    6bf0:	00800604 	movi	r2,24
    6bf4:	00c00204 	movi	r3,8
    6bf8:	003ff606 	br	6bd4 <__alt_exception_stack_pointer+0xf8006bd4>
    6bfc:	00800404 	movi	r2,16
    6c00:	1007883a 	mov	r3,r2
    6c04:	003ff306 	br	6bd4 <__alt_exception_stack_pointer+0xf8006bd4>

00006c08 <clock>:
    6c08:	00800074 	movhi	r2,1
    6c0c:	109c7304 	addi	r2,r2,29132
    6c10:	11000017 	ldw	r4,0(r2)
    6c14:	defffb04 	addi	sp,sp,-20
    6c18:	d80b883a 	mov	r5,sp
    6c1c:	dfc00415 	stw	ra,16(sp)
    6c20:	00077fc0 	call	77fc <_times_r>
    6c24:	00ffffc4 	movi	r3,-1
    6c28:	10c00726 	beq	r2,r3,6c48 <clock+0x40>
    6c2c:	d8c00017 	ldw	r3,0(sp)
    6c30:	d8800117 	ldw	r2,4(sp)
    6c34:	1885883a 	add	r2,r3,r2
    6c38:	d8c00217 	ldw	r3,8(sp)
    6c3c:	10c7883a 	add	r3,r2,r3
    6c40:	d8800317 	ldw	r2,12(sp)
    6c44:	1885883a 	add	r2,r3,r2
    6c48:	dfc00417 	ldw	ra,16(sp)
    6c4c:	dec00504 	addi	sp,sp,20
    6c50:	f800283a 	ret

00006c54 <malloc>:
    6c54:	00800074 	movhi	r2,1
    6c58:	109c7304 	addi	r2,r2,29132
    6c5c:	200b883a 	mov	r5,r4
    6c60:	11000017 	ldw	r4,0(r2)
    6c64:	0006c7c1 	jmpi	6c7c <_malloc_r>

00006c68 <free>:
    6c68:	00800074 	movhi	r2,1
    6c6c:	109c7304 	addi	r2,r2,29132
    6c70:	200b883a 	mov	r5,r4
    6c74:	11000017 	ldw	r4,0(r2)
    6c78:	000bd381 	jmpi	bd38 <_free_r>

00006c7c <_malloc_r>:
    6c7c:	defff504 	addi	sp,sp,-44
    6c80:	dc800315 	stw	r18,12(sp)
    6c84:	dfc00a15 	stw	ra,40(sp)
    6c88:	df000915 	stw	fp,36(sp)
    6c8c:	ddc00815 	stw	r23,32(sp)
    6c90:	dd800715 	stw	r22,28(sp)
    6c94:	dd400615 	stw	r21,24(sp)
    6c98:	dd000515 	stw	r20,20(sp)
    6c9c:	dcc00415 	stw	r19,16(sp)
    6ca0:	dc400215 	stw	r17,8(sp)
    6ca4:	dc000115 	stw	r16,4(sp)
    6ca8:	288002c4 	addi	r2,r5,11
    6cac:	00c00584 	movi	r3,22
    6cb0:	2025883a 	mov	r18,r4
    6cb4:	18807f2e 	bgeu	r3,r2,6eb4 <_malloc_r+0x238>
    6cb8:	047ffe04 	movi	r17,-8
    6cbc:	1462703a 	and	r17,r2,r17
    6cc0:	8800a316 	blt	r17,zero,6f50 <_malloc_r+0x2d4>
    6cc4:	8940a236 	bltu	r17,r5,6f50 <_malloc_r+0x2d4>
    6cc8:	001224c0 	call	1224c <__malloc_lock>
    6ccc:	00807dc4 	movi	r2,503
    6cd0:	1441e92e 	bgeu	r2,r17,7478 <_malloc_r+0x7fc>
    6cd4:	8804d27a 	srli	r2,r17,9
    6cd8:	1000a126 	beq	r2,zero,6f60 <_malloc_r+0x2e4>
    6cdc:	00c00104 	movi	r3,4
    6ce0:	18811e36 	bltu	r3,r2,715c <_malloc_r+0x4e0>
    6ce4:	8804d1ba 	srli	r2,r17,6
    6ce8:	12000e44 	addi	r8,r2,57
    6cec:	11c00e04 	addi	r7,r2,56
    6cf0:	4209883a 	add	r4,r8,r8
    6cf4:	04c00074 	movhi	r19,1
    6cf8:	2109883a 	add	r4,r4,r4
    6cfc:	9cd6a804 	addi	r19,r19,23200
    6d00:	2109883a 	add	r4,r4,r4
    6d04:	9909883a 	add	r4,r19,r4
    6d08:	24000117 	ldw	r16,4(r4)
    6d0c:	213ffe04 	addi	r4,r4,-8
    6d10:	24009726 	beq	r4,r16,6f70 <_malloc_r+0x2f4>
    6d14:	80800117 	ldw	r2,4(r16)
    6d18:	01bfff04 	movi	r6,-4
    6d1c:	014003c4 	movi	r5,15
    6d20:	1184703a 	and	r2,r2,r6
    6d24:	1447c83a 	sub	r3,r2,r17
    6d28:	28c00716 	blt	r5,r3,6d48 <_malloc_r+0xcc>
    6d2c:	1800920e 	bge	r3,zero,6f78 <_malloc_r+0x2fc>
    6d30:	84000317 	ldw	r16,12(r16)
    6d34:	24008e26 	beq	r4,r16,6f70 <_malloc_r+0x2f4>
    6d38:	80800117 	ldw	r2,4(r16)
    6d3c:	1184703a 	and	r2,r2,r6
    6d40:	1447c83a 	sub	r3,r2,r17
    6d44:	28fff90e 	bge	r5,r3,6d2c <__alt_exception_stack_pointer+0xf8006d2c>
    6d48:	3809883a 	mov	r4,r7
    6d4c:	01800074 	movhi	r6,1
    6d50:	9c000417 	ldw	r16,16(r19)
    6d54:	3196a804 	addi	r6,r6,23200
    6d58:	32000204 	addi	r8,r6,8
    6d5c:	82013426 	beq	r16,r8,7230 <_malloc_r+0x5b4>
    6d60:	80c00117 	ldw	r3,4(r16)
    6d64:	00bfff04 	movi	r2,-4
    6d68:	188e703a 	and	r7,r3,r2
    6d6c:	3c45c83a 	sub	r2,r7,r17
    6d70:	00c003c4 	movi	r3,15
    6d74:	18811f16 	blt	r3,r2,71f4 <_malloc_r+0x578>
    6d78:	32000515 	stw	r8,20(r6)
    6d7c:	32000415 	stw	r8,16(r6)
    6d80:	10007f0e 	bge	r2,zero,6f80 <_malloc_r+0x304>
    6d84:	00807fc4 	movi	r2,511
    6d88:	11c0fd36 	bltu	r2,r7,7180 <_malloc_r+0x504>
    6d8c:	3806d0fa 	srli	r3,r7,3
    6d90:	01c00044 	movi	r7,1
    6d94:	30800117 	ldw	r2,4(r6)
    6d98:	19400044 	addi	r5,r3,1
    6d9c:	294b883a 	add	r5,r5,r5
    6da0:	1807d0ba 	srai	r3,r3,2
    6da4:	294b883a 	add	r5,r5,r5
    6da8:	294b883a 	add	r5,r5,r5
    6dac:	298b883a 	add	r5,r5,r6
    6db0:	38c6983a 	sll	r3,r7,r3
    6db4:	29c00017 	ldw	r7,0(r5)
    6db8:	2a7ffe04 	addi	r9,r5,-8
    6dbc:	1886b03a 	or	r3,r3,r2
    6dc0:	82400315 	stw	r9,12(r16)
    6dc4:	81c00215 	stw	r7,8(r16)
    6dc8:	30c00115 	stw	r3,4(r6)
    6dcc:	2c000015 	stw	r16,0(r5)
    6dd0:	3c000315 	stw	r16,12(r7)
    6dd4:	2005d0ba 	srai	r2,r4,2
    6dd8:	01400044 	movi	r5,1
    6ddc:	288a983a 	sll	r5,r5,r2
    6de0:	19406f36 	bltu	r3,r5,6fa0 <_malloc_r+0x324>
    6de4:	28c4703a 	and	r2,r5,r3
    6de8:	10000a1e 	bne	r2,zero,6e14 <_malloc_r+0x198>
    6dec:	00bfff04 	movi	r2,-4
    6df0:	294b883a 	add	r5,r5,r5
    6df4:	2088703a 	and	r4,r4,r2
    6df8:	28c4703a 	and	r2,r5,r3
    6dfc:	21000104 	addi	r4,r4,4
    6e00:	1000041e 	bne	r2,zero,6e14 <_malloc_r+0x198>
    6e04:	294b883a 	add	r5,r5,r5
    6e08:	28c4703a 	and	r2,r5,r3
    6e0c:	21000104 	addi	r4,r4,4
    6e10:	103ffc26 	beq	r2,zero,6e04 <__alt_exception_stack_pointer+0xf8006e04>
    6e14:	02bfff04 	movi	r10,-4
    6e18:	024003c4 	movi	r9,15
    6e1c:	21800044 	addi	r6,r4,1
    6e20:	318d883a 	add	r6,r6,r6
    6e24:	318d883a 	add	r6,r6,r6
    6e28:	318d883a 	add	r6,r6,r6
    6e2c:	998d883a 	add	r6,r19,r6
    6e30:	333ffe04 	addi	r12,r6,-8
    6e34:	2017883a 	mov	r11,r4
    6e38:	31800104 	addi	r6,r6,4
    6e3c:	34000017 	ldw	r16,0(r6)
    6e40:	31fffd04 	addi	r7,r6,-12
    6e44:	81c0041e 	bne	r16,r7,6e58 <_malloc_r+0x1dc>
    6e48:	0000fb06 	br	7238 <_malloc_r+0x5bc>
    6e4c:	1801030e 	bge	r3,zero,725c <_malloc_r+0x5e0>
    6e50:	84000317 	ldw	r16,12(r16)
    6e54:	81c0f826 	beq	r16,r7,7238 <_malloc_r+0x5bc>
    6e58:	80800117 	ldw	r2,4(r16)
    6e5c:	1284703a 	and	r2,r2,r10
    6e60:	1447c83a 	sub	r3,r2,r17
    6e64:	48fff90e 	bge	r9,r3,6e4c <__alt_exception_stack_pointer+0xf8006e4c>
    6e68:	80800317 	ldw	r2,12(r16)
    6e6c:	81000217 	ldw	r4,8(r16)
    6e70:	89400054 	ori	r5,r17,1
    6e74:	81400115 	stw	r5,4(r16)
    6e78:	20800315 	stw	r2,12(r4)
    6e7c:	11000215 	stw	r4,8(r2)
    6e80:	8463883a 	add	r17,r16,r17
    6e84:	9c400515 	stw	r17,20(r19)
    6e88:	9c400415 	stw	r17,16(r19)
    6e8c:	18800054 	ori	r2,r3,1
    6e90:	88800115 	stw	r2,4(r17)
    6e94:	8a000315 	stw	r8,12(r17)
    6e98:	8a000215 	stw	r8,8(r17)
    6e9c:	88e3883a 	add	r17,r17,r3
    6ea0:	88c00015 	stw	r3,0(r17)
    6ea4:	9009883a 	mov	r4,r18
    6ea8:	00122700 	call	12270 <__malloc_unlock>
    6eac:	80800204 	addi	r2,r16,8
    6eb0:	00001b06 	br	6f20 <_malloc_r+0x2a4>
    6eb4:	04400404 	movi	r17,16
    6eb8:	89402536 	bltu	r17,r5,6f50 <_malloc_r+0x2d4>
    6ebc:	001224c0 	call	1224c <__malloc_lock>
    6ec0:	00800184 	movi	r2,6
    6ec4:	01000084 	movi	r4,2
    6ec8:	04c00074 	movhi	r19,1
    6ecc:	1085883a 	add	r2,r2,r2
    6ed0:	9cd6a804 	addi	r19,r19,23200
    6ed4:	1085883a 	add	r2,r2,r2
    6ed8:	9885883a 	add	r2,r19,r2
    6edc:	14000117 	ldw	r16,4(r2)
    6ee0:	10fffe04 	addi	r3,r2,-8
    6ee4:	80c0d926 	beq	r16,r3,724c <_malloc_r+0x5d0>
    6ee8:	80c00117 	ldw	r3,4(r16)
    6eec:	81000317 	ldw	r4,12(r16)
    6ef0:	00bfff04 	movi	r2,-4
    6ef4:	1884703a 	and	r2,r3,r2
    6ef8:	81400217 	ldw	r5,8(r16)
    6efc:	8085883a 	add	r2,r16,r2
    6f00:	10c00117 	ldw	r3,4(r2)
    6f04:	29000315 	stw	r4,12(r5)
    6f08:	21400215 	stw	r5,8(r4)
    6f0c:	18c00054 	ori	r3,r3,1
    6f10:	10c00115 	stw	r3,4(r2)
    6f14:	9009883a 	mov	r4,r18
    6f18:	00122700 	call	12270 <__malloc_unlock>
    6f1c:	80800204 	addi	r2,r16,8
    6f20:	dfc00a17 	ldw	ra,40(sp)
    6f24:	df000917 	ldw	fp,36(sp)
    6f28:	ddc00817 	ldw	r23,32(sp)
    6f2c:	dd800717 	ldw	r22,28(sp)
    6f30:	dd400617 	ldw	r21,24(sp)
    6f34:	dd000517 	ldw	r20,20(sp)
    6f38:	dcc00417 	ldw	r19,16(sp)
    6f3c:	dc800317 	ldw	r18,12(sp)
    6f40:	dc400217 	ldw	r17,8(sp)
    6f44:	dc000117 	ldw	r16,4(sp)
    6f48:	dec00b04 	addi	sp,sp,44
    6f4c:	f800283a 	ret
    6f50:	00800304 	movi	r2,12
    6f54:	90800015 	stw	r2,0(r18)
    6f58:	0005883a 	mov	r2,zero
    6f5c:	003ff006 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    6f60:	01002004 	movi	r4,128
    6f64:	02001004 	movi	r8,64
    6f68:	01c00fc4 	movi	r7,63
    6f6c:	003f6106 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    6f70:	4009883a 	mov	r4,r8
    6f74:	003f7506 	br	6d4c <__alt_exception_stack_pointer+0xf8006d4c>
    6f78:	81000317 	ldw	r4,12(r16)
    6f7c:	003fde06 	br	6ef8 <__alt_exception_stack_pointer+0xf8006ef8>
    6f80:	81c5883a 	add	r2,r16,r7
    6f84:	11400117 	ldw	r5,4(r2)
    6f88:	9009883a 	mov	r4,r18
    6f8c:	29400054 	ori	r5,r5,1
    6f90:	11400115 	stw	r5,4(r2)
    6f94:	00122700 	call	12270 <__malloc_unlock>
    6f98:	80800204 	addi	r2,r16,8
    6f9c:	003fe006 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    6fa0:	9c000217 	ldw	r16,8(r19)
    6fa4:	00bfff04 	movi	r2,-4
    6fa8:	85800117 	ldw	r22,4(r16)
    6fac:	b0ac703a 	and	r22,r22,r2
    6fb0:	b4400336 	bltu	r22,r17,6fc0 <_malloc_r+0x344>
    6fb4:	b445c83a 	sub	r2,r22,r17
    6fb8:	00c003c4 	movi	r3,15
    6fbc:	18805d16 	blt	r3,r2,7134 <_malloc_r+0x4b8>
    6fc0:	05c00074 	movhi	r23,1
    6fc4:	008000b4 	movhi	r2,2
    6fc8:	10a36c04 	addi	r2,r2,-29264
    6fcc:	bddc7404 	addi	r23,r23,29136
    6fd0:	15400017 	ldw	r21,0(r2)
    6fd4:	b8c00017 	ldw	r3,0(r23)
    6fd8:	00bfffc4 	movi	r2,-1
    6fdc:	858d883a 	add	r6,r16,r22
    6fe0:	8d6b883a 	add	r21,r17,r21
    6fe4:	1880ea26 	beq	r3,r2,7390 <_malloc_r+0x714>
    6fe8:	ad4403c4 	addi	r21,r21,4111
    6fec:	00bc0004 	movi	r2,-4096
    6ff0:	a8aa703a 	and	r21,r21,r2
    6ff4:	a80b883a 	mov	r5,r21
    6ff8:	9009883a 	mov	r4,r18
    6ffc:	d9800015 	stw	r6,0(sp)
    7000:	00077100 	call	7710 <_sbrk_r>
    7004:	1029883a 	mov	r20,r2
    7008:	00bfffc4 	movi	r2,-1
    700c:	d9800017 	ldw	r6,0(sp)
    7010:	a080e826 	beq	r20,r2,73b4 <_malloc_r+0x738>
    7014:	a180a636 	bltu	r20,r6,72b0 <_malloc_r+0x634>
    7018:	070000b4 	movhi	fp,2
    701c:	e7237804 	addi	fp,fp,-29216
    7020:	e0800017 	ldw	r2,0(fp)
    7024:	a887883a 	add	r3,r21,r2
    7028:	e0c00015 	stw	r3,0(fp)
    702c:	3500e626 	beq	r6,r20,73c8 <_malloc_r+0x74c>
    7030:	b9000017 	ldw	r4,0(r23)
    7034:	00bfffc4 	movi	r2,-1
    7038:	2080ee26 	beq	r4,r2,73f4 <_malloc_r+0x778>
    703c:	a185c83a 	sub	r2,r20,r6
    7040:	10c5883a 	add	r2,r2,r3
    7044:	e0800015 	stw	r2,0(fp)
    7048:	a0c001cc 	andi	r3,r20,7
    704c:	1800bc26 	beq	r3,zero,7340 <_malloc_r+0x6c4>
    7050:	a0e9c83a 	sub	r20,r20,r3
    7054:	00840204 	movi	r2,4104
    7058:	a5000204 	addi	r20,r20,8
    705c:	10c7c83a 	sub	r3,r2,r3
    7060:	a545883a 	add	r2,r20,r21
    7064:	1083ffcc 	andi	r2,r2,4095
    7068:	18abc83a 	sub	r21,r3,r2
    706c:	a80b883a 	mov	r5,r21
    7070:	9009883a 	mov	r4,r18
    7074:	00077100 	call	7710 <_sbrk_r>
    7078:	00ffffc4 	movi	r3,-1
    707c:	10c0e126 	beq	r2,r3,7404 <_malloc_r+0x788>
    7080:	1505c83a 	sub	r2,r2,r20
    7084:	1545883a 	add	r2,r2,r21
    7088:	10800054 	ori	r2,r2,1
    708c:	e0c00017 	ldw	r3,0(fp)
    7090:	9d000215 	stw	r20,8(r19)
    7094:	a0800115 	stw	r2,4(r20)
    7098:	a8c7883a 	add	r3,r21,r3
    709c:	e0c00015 	stw	r3,0(fp)
    70a0:	84c00e26 	beq	r16,r19,70dc <_malloc_r+0x460>
    70a4:	018003c4 	movi	r6,15
    70a8:	3580a72e 	bgeu	r6,r22,7348 <_malloc_r+0x6cc>
    70ac:	81400117 	ldw	r5,4(r16)
    70b0:	013ffe04 	movi	r4,-8
    70b4:	b0bffd04 	addi	r2,r22,-12
    70b8:	1104703a 	and	r2,r2,r4
    70bc:	2900004c 	andi	r4,r5,1
    70c0:	2088b03a 	or	r4,r4,r2
    70c4:	81000115 	stw	r4,4(r16)
    70c8:	01400144 	movi	r5,5
    70cc:	8089883a 	add	r4,r16,r2
    70d0:	21400115 	stw	r5,4(r4)
    70d4:	21400215 	stw	r5,8(r4)
    70d8:	3080cd36 	bltu	r6,r2,7410 <_malloc_r+0x794>
    70dc:	008000b4 	movhi	r2,2
    70e0:	10a36b04 	addi	r2,r2,-29268
    70e4:	11000017 	ldw	r4,0(r2)
    70e8:	20c0012e 	bgeu	r4,r3,70f0 <_malloc_r+0x474>
    70ec:	10c00015 	stw	r3,0(r2)
    70f0:	008000b4 	movhi	r2,2
    70f4:	10a36a04 	addi	r2,r2,-29272
    70f8:	11000017 	ldw	r4,0(r2)
    70fc:	9c000217 	ldw	r16,8(r19)
    7100:	20c0012e 	bgeu	r4,r3,7108 <_malloc_r+0x48c>
    7104:	10c00015 	stw	r3,0(r2)
    7108:	80c00117 	ldw	r3,4(r16)
    710c:	00bfff04 	movi	r2,-4
    7110:	1886703a 	and	r3,r3,r2
    7114:	1c45c83a 	sub	r2,r3,r17
    7118:	1c400236 	bltu	r3,r17,7124 <_malloc_r+0x4a8>
    711c:	00c003c4 	movi	r3,15
    7120:	18800416 	blt	r3,r2,7134 <_malloc_r+0x4b8>
    7124:	9009883a 	mov	r4,r18
    7128:	00122700 	call	12270 <__malloc_unlock>
    712c:	0005883a 	mov	r2,zero
    7130:	003f7b06 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    7134:	88c00054 	ori	r3,r17,1
    7138:	80c00115 	stw	r3,4(r16)
    713c:	8463883a 	add	r17,r16,r17
    7140:	10800054 	ori	r2,r2,1
    7144:	9c400215 	stw	r17,8(r19)
    7148:	88800115 	stw	r2,4(r17)
    714c:	9009883a 	mov	r4,r18
    7150:	00122700 	call	12270 <__malloc_unlock>
    7154:	80800204 	addi	r2,r16,8
    7158:	003f7106 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    715c:	00c00504 	movi	r3,20
    7160:	18804a2e 	bgeu	r3,r2,728c <_malloc_r+0x610>
    7164:	00c01504 	movi	r3,84
    7168:	18806e36 	bltu	r3,r2,7324 <_malloc_r+0x6a8>
    716c:	8804d33a 	srli	r2,r17,12
    7170:	12001bc4 	addi	r8,r2,111
    7174:	11c01b84 	addi	r7,r2,110
    7178:	4209883a 	add	r4,r8,r8
    717c:	003edd06 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    7180:	3804d27a 	srli	r2,r7,9
    7184:	00c00104 	movi	r3,4
    7188:	1880442e 	bgeu	r3,r2,729c <_malloc_r+0x620>
    718c:	00c00504 	movi	r3,20
    7190:	18808136 	bltu	r3,r2,7398 <_malloc_r+0x71c>
    7194:	11401704 	addi	r5,r2,92
    7198:	10c016c4 	addi	r3,r2,91
    719c:	294b883a 	add	r5,r5,r5
    71a0:	294b883a 	add	r5,r5,r5
    71a4:	294b883a 	add	r5,r5,r5
    71a8:	994b883a 	add	r5,r19,r5
    71ac:	28800017 	ldw	r2,0(r5)
    71b0:	01800074 	movhi	r6,1
    71b4:	297ffe04 	addi	r5,r5,-8
    71b8:	3196a804 	addi	r6,r6,23200
    71bc:	28806526 	beq	r5,r2,7354 <_malloc_r+0x6d8>
    71c0:	01bfff04 	movi	r6,-4
    71c4:	10c00117 	ldw	r3,4(r2)
    71c8:	1986703a 	and	r3,r3,r6
    71cc:	38c0022e 	bgeu	r7,r3,71d8 <_malloc_r+0x55c>
    71d0:	10800217 	ldw	r2,8(r2)
    71d4:	28bffb1e 	bne	r5,r2,71c4 <__alt_exception_stack_pointer+0xf80071c4>
    71d8:	11400317 	ldw	r5,12(r2)
    71dc:	98c00117 	ldw	r3,4(r19)
    71e0:	81400315 	stw	r5,12(r16)
    71e4:	80800215 	stw	r2,8(r16)
    71e8:	2c000215 	stw	r16,8(r5)
    71ec:	14000315 	stw	r16,12(r2)
    71f0:	003ef806 	br	6dd4 <__alt_exception_stack_pointer+0xf8006dd4>
    71f4:	88c00054 	ori	r3,r17,1
    71f8:	80c00115 	stw	r3,4(r16)
    71fc:	8463883a 	add	r17,r16,r17
    7200:	34400515 	stw	r17,20(r6)
    7204:	34400415 	stw	r17,16(r6)
    7208:	10c00054 	ori	r3,r2,1
    720c:	8a000315 	stw	r8,12(r17)
    7210:	8a000215 	stw	r8,8(r17)
    7214:	88c00115 	stw	r3,4(r17)
    7218:	88a3883a 	add	r17,r17,r2
    721c:	88800015 	stw	r2,0(r17)
    7220:	9009883a 	mov	r4,r18
    7224:	00122700 	call	12270 <__malloc_unlock>
    7228:	80800204 	addi	r2,r16,8
    722c:	003f3c06 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    7230:	30c00117 	ldw	r3,4(r6)
    7234:	003ee706 	br	6dd4 <__alt_exception_stack_pointer+0xf8006dd4>
    7238:	5ac00044 	addi	r11,r11,1
    723c:	588000cc 	andi	r2,r11,3
    7240:	31800204 	addi	r6,r6,8
    7244:	103efd1e 	bne	r2,zero,6e3c <__alt_exception_stack_pointer+0xf8006e3c>
    7248:	00002406 	br	72dc <_malloc_r+0x660>
    724c:	14000317 	ldw	r16,12(r2)
    7250:	143f251e 	bne	r2,r16,6ee8 <__alt_exception_stack_pointer+0xf8006ee8>
    7254:	21000084 	addi	r4,r4,2
    7258:	003ebc06 	br	6d4c <__alt_exception_stack_pointer+0xf8006d4c>
    725c:	8085883a 	add	r2,r16,r2
    7260:	10c00117 	ldw	r3,4(r2)
    7264:	81000317 	ldw	r4,12(r16)
    7268:	81400217 	ldw	r5,8(r16)
    726c:	18c00054 	ori	r3,r3,1
    7270:	10c00115 	stw	r3,4(r2)
    7274:	29000315 	stw	r4,12(r5)
    7278:	21400215 	stw	r5,8(r4)
    727c:	9009883a 	mov	r4,r18
    7280:	00122700 	call	12270 <__malloc_unlock>
    7284:	80800204 	addi	r2,r16,8
    7288:	003f2506 	br	6f20 <__alt_exception_stack_pointer+0xf8006f20>
    728c:	12001704 	addi	r8,r2,92
    7290:	11c016c4 	addi	r7,r2,91
    7294:	4209883a 	add	r4,r8,r8
    7298:	003e9606 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    729c:	3804d1ba 	srli	r2,r7,6
    72a0:	11400e44 	addi	r5,r2,57
    72a4:	10c00e04 	addi	r3,r2,56
    72a8:	294b883a 	add	r5,r5,r5
    72ac:	003fbc06 	br	71a0 <__alt_exception_stack_pointer+0xf80071a0>
    72b0:	84ff5926 	beq	r16,r19,7018 <__alt_exception_stack_pointer+0xf8007018>
    72b4:	00800074 	movhi	r2,1
    72b8:	1096a804 	addi	r2,r2,23200
    72bc:	14000217 	ldw	r16,8(r2)
    72c0:	00bfff04 	movi	r2,-4
    72c4:	80c00117 	ldw	r3,4(r16)
    72c8:	1886703a 	and	r3,r3,r2
    72cc:	003f9106 	br	7114 <__alt_exception_stack_pointer+0xf8007114>
    72d0:	60800217 	ldw	r2,8(r12)
    72d4:	213fffc4 	addi	r4,r4,-1
    72d8:	1300651e 	bne	r2,r12,7470 <_malloc_r+0x7f4>
    72dc:	208000cc 	andi	r2,r4,3
    72e0:	633ffe04 	addi	r12,r12,-8
    72e4:	103ffa1e 	bne	r2,zero,72d0 <__alt_exception_stack_pointer+0xf80072d0>
    72e8:	98800117 	ldw	r2,4(r19)
    72ec:	0146303a 	nor	r3,zero,r5
    72f0:	1884703a 	and	r2,r3,r2
    72f4:	98800115 	stw	r2,4(r19)
    72f8:	294b883a 	add	r5,r5,r5
    72fc:	117f2836 	bltu	r2,r5,6fa0 <__alt_exception_stack_pointer+0xf8006fa0>
    7300:	283f2726 	beq	r5,zero,6fa0 <__alt_exception_stack_pointer+0xf8006fa0>
    7304:	2886703a 	and	r3,r5,r2
    7308:	5809883a 	mov	r4,r11
    730c:	183ec31e 	bne	r3,zero,6e1c <__alt_exception_stack_pointer+0xf8006e1c>
    7310:	294b883a 	add	r5,r5,r5
    7314:	2886703a 	and	r3,r5,r2
    7318:	21000104 	addi	r4,r4,4
    731c:	183ffc26 	beq	r3,zero,7310 <__alt_exception_stack_pointer+0xf8007310>
    7320:	003ebe06 	br	6e1c <__alt_exception_stack_pointer+0xf8006e1c>
    7324:	00c05504 	movi	r3,340
    7328:	18801236 	bltu	r3,r2,7374 <_malloc_r+0x6f8>
    732c:	8804d3fa 	srli	r2,r17,15
    7330:	12001e04 	addi	r8,r2,120
    7334:	11c01dc4 	addi	r7,r2,119
    7338:	4209883a 	add	r4,r8,r8
    733c:	003e6d06 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    7340:	00c40004 	movi	r3,4096
    7344:	003f4606 	br	7060 <__alt_exception_stack_pointer+0xf8007060>
    7348:	00800044 	movi	r2,1
    734c:	a0800115 	stw	r2,4(r20)
    7350:	003f7406 	br	7124 <__alt_exception_stack_pointer+0xf8007124>
    7354:	1805d0ba 	srai	r2,r3,2
    7358:	01c00044 	movi	r7,1
    735c:	30c00117 	ldw	r3,4(r6)
    7360:	388e983a 	sll	r7,r7,r2
    7364:	2805883a 	mov	r2,r5
    7368:	38c6b03a 	or	r3,r7,r3
    736c:	30c00115 	stw	r3,4(r6)
    7370:	003f9b06 	br	71e0 <__alt_exception_stack_pointer+0xf80071e0>
    7374:	00c15504 	movi	r3,1364
    7378:	18801a36 	bltu	r3,r2,73e4 <_malloc_r+0x768>
    737c:	8804d4ba 	srli	r2,r17,18
    7380:	12001f44 	addi	r8,r2,125
    7384:	11c01f04 	addi	r7,r2,124
    7388:	4209883a 	add	r4,r8,r8
    738c:	003e5906 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    7390:	ad400404 	addi	r21,r21,16
    7394:	003f1706 	br	6ff4 <__alt_exception_stack_pointer+0xf8006ff4>
    7398:	00c01504 	movi	r3,84
    739c:	18802336 	bltu	r3,r2,742c <_malloc_r+0x7b0>
    73a0:	3804d33a 	srli	r2,r7,12
    73a4:	11401bc4 	addi	r5,r2,111
    73a8:	10c01b84 	addi	r3,r2,110
    73ac:	294b883a 	add	r5,r5,r5
    73b0:	003f7b06 	br	71a0 <__alt_exception_stack_pointer+0xf80071a0>
    73b4:	9c000217 	ldw	r16,8(r19)
    73b8:	00bfff04 	movi	r2,-4
    73bc:	80c00117 	ldw	r3,4(r16)
    73c0:	1886703a 	and	r3,r3,r2
    73c4:	003f5306 	br	7114 <__alt_exception_stack_pointer+0xf8007114>
    73c8:	3083ffcc 	andi	r2,r6,4095
    73cc:	103f181e 	bne	r2,zero,7030 <__alt_exception_stack_pointer+0xf8007030>
    73d0:	99000217 	ldw	r4,8(r19)
    73d4:	b545883a 	add	r2,r22,r21
    73d8:	10800054 	ori	r2,r2,1
    73dc:	20800115 	stw	r2,4(r4)
    73e0:	003f3e06 	br	70dc <__alt_exception_stack_pointer+0xf80070dc>
    73e4:	01003f84 	movi	r4,254
    73e8:	02001fc4 	movi	r8,127
    73ec:	01c01f84 	movi	r7,126
    73f0:	003e4006 	br	6cf4 <__alt_exception_stack_pointer+0xf8006cf4>
    73f4:	00800074 	movhi	r2,1
    73f8:	109c7404 	addi	r2,r2,29136
    73fc:	15000015 	stw	r20,0(r2)
    7400:	003f1106 	br	7048 <__alt_exception_stack_pointer+0xf8007048>
    7404:	00800044 	movi	r2,1
    7408:	002b883a 	mov	r21,zero
    740c:	003f1f06 	br	708c <__alt_exception_stack_pointer+0xf800708c>
    7410:	81400204 	addi	r5,r16,8
    7414:	9009883a 	mov	r4,r18
    7418:	000bd380 	call	bd38 <_free_r>
    741c:	008000b4 	movhi	r2,2
    7420:	10a37804 	addi	r2,r2,-29216
    7424:	10c00017 	ldw	r3,0(r2)
    7428:	003f2c06 	br	70dc <__alt_exception_stack_pointer+0xf80070dc>
    742c:	00c05504 	movi	r3,340
    7430:	18800536 	bltu	r3,r2,7448 <_malloc_r+0x7cc>
    7434:	3804d3fa 	srli	r2,r7,15
    7438:	11401e04 	addi	r5,r2,120
    743c:	10c01dc4 	addi	r3,r2,119
    7440:	294b883a 	add	r5,r5,r5
    7444:	003f5606 	br	71a0 <__alt_exception_stack_pointer+0xf80071a0>
    7448:	00c15504 	movi	r3,1364
    744c:	18800536 	bltu	r3,r2,7464 <_malloc_r+0x7e8>
    7450:	3804d4ba 	srli	r2,r7,18
    7454:	11401f44 	addi	r5,r2,125
    7458:	10c01f04 	addi	r3,r2,124
    745c:	294b883a 	add	r5,r5,r5
    7460:	003f4f06 	br	71a0 <__alt_exception_stack_pointer+0xf80071a0>
    7464:	01403f84 	movi	r5,254
    7468:	00c01f84 	movi	r3,126
    746c:	003f4c06 	br	71a0 <__alt_exception_stack_pointer+0xf80071a0>
    7470:	98800117 	ldw	r2,4(r19)
    7474:	003fa006 	br	72f8 <__alt_exception_stack_pointer+0xf80072f8>
    7478:	8808d0fa 	srli	r4,r17,3
    747c:	20800044 	addi	r2,r4,1
    7480:	1085883a 	add	r2,r2,r2
    7484:	003e9006 	br	6ec8 <__alt_exception_stack_pointer+0xf8006ec8>

00007488 <memcpy>:
    7488:	defffd04 	addi	sp,sp,-12
    748c:	dfc00215 	stw	ra,8(sp)
    7490:	dc400115 	stw	r17,4(sp)
    7494:	dc000015 	stw	r16,0(sp)
    7498:	00c003c4 	movi	r3,15
    749c:	2005883a 	mov	r2,r4
    74a0:	1980452e 	bgeu	r3,r6,75b8 <memcpy+0x130>
    74a4:	2906b03a 	or	r3,r5,r4
    74a8:	18c000cc 	andi	r3,r3,3
    74ac:	1800441e 	bne	r3,zero,75c0 <memcpy+0x138>
    74b0:	347ffc04 	addi	r17,r6,-16
    74b4:	8822d13a 	srli	r17,r17,4
    74b8:	28c00104 	addi	r3,r5,4
    74bc:	23400104 	addi	r13,r4,4
    74c0:	8820913a 	slli	r16,r17,4
    74c4:	2b000204 	addi	r12,r5,8
    74c8:	22c00204 	addi	r11,r4,8
    74cc:	84000504 	addi	r16,r16,20
    74d0:	2a800304 	addi	r10,r5,12
    74d4:	22400304 	addi	r9,r4,12
    74d8:	2c21883a 	add	r16,r5,r16
    74dc:	2811883a 	mov	r8,r5
    74e0:	200f883a 	mov	r7,r4
    74e4:	41000017 	ldw	r4,0(r8)
    74e8:	1fc00017 	ldw	ra,0(r3)
    74ec:	63c00017 	ldw	r15,0(r12)
    74f0:	39000015 	stw	r4,0(r7)
    74f4:	53800017 	ldw	r14,0(r10)
    74f8:	6fc00015 	stw	ra,0(r13)
    74fc:	5bc00015 	stw	r15,0(r11)
    7500:	4b800015 	stw	r14,0(r9)
    7504:	18c00404 	addi	r3,r3,16
    7508:	39c00404 	addi	r7,r7,16
    750c:	42000404 	addi	r8,r8,16
    7510:	6b400404 	addi	r13,r13,16
    7514:	63000404 	addi	r12,r12,16
    7518:	5ac00404 	addi	r11,r11,16
    751c:	52800404 	addi	r10,r10,16
    7520:	4a400404 	addi	r9,r9,16
    7524:	1c3fef1e 	bne	r3,r16,74e4 <__alt_exception_stack_pointer+0xf80074e4>
    7528:	89c00044 	addi	r7,r17,1
    752c:	380e913a 	slli	r7,r7,4
    7530:	310003cc 	andi	r4,r6,15
    7534:	02c000c4 	movi	r11,3
    7538:	11c7883a 	add	r3,r2,r7
    753c:	29cb883a 	add	r5,r5,r7
    7540:	5900212e 	bgeu	r11,r4,75c8 <memcpy+0x140>
    7544:	1813883a 	mov	r9,r3
    7548:	2811883a 	mov	r8,r5
    754c:	200f883a 	mov	r7,r4
    7550:	42800017 	ldw	r10,0(r8)
    7554:	4a400104 	addi	r9,r9,4
    7558:	39ffff04 	addi	r7,r7,-4
    755c:	4abfff15 	stw	r10,-4(r9)
    7560:	42000104 	addi	r8,r8,4
    7564:	59fffa36 	bltu	r11,r7,7550 <__alt_exception_stack_pointer+0xf8007550>
    7568:	213fff04 	addi	r4,r4,-4
    756c:	2008d0ba 	srli	r4,r4,2
    7570:	318000cc 	andi	r6,r6,3
    7574:	21000044 	addi	r4,r4,1
    7578:	2109883a 	add	r4,r4,r4
    757c:	2109883a 	add	r4,r4,r4
    7580:	1907883a 	add	r3,r3,r4
    7584:	290b883a 	add	r5,r5,r4
    7588:	30000626 	beq	r6,zero,75a4 <memcpy+0x11c>
    758c:	198d883a 	add	r6,r3,r6
    7590:	29c00003 	ldbu	r7,0(r5)
    7594:	18c00044 	addi	r3,r3,1
    7598:	29400044 	addi	r5,r5,1
    759c:	19ffffc5 	stb	r7,-1(r3)
    75a0:	19bffb1e 	bne	r3,r6,7590 <__alt_exception_stack_pointer+0xf8007590>
    75a4:	dfc00217 	ldw	ra,8(sp)
    75a8:	dc400117 	ldw	r17,4(sp)
    75ac:	dc000017 	ldw	r16,0(sp)
    75b0:	dec00304 	addi	sp,sp,12
    75b4:	f800283a 	ret
    75b8:	2007883a 	mov	r3,r4
    75bc:	003ff206 	br	7588 <__alt_exception_stack_pointer+0xf8007588>
    75c0:	2007883a 	mov	r3,r4
    75c4:	003ff106 	br	758c <__alt_exception_stack_pointer+0xf800758c>
    75c8:	200d883a 	mov	r6,r4
    75cc:	003fee06 	br	7588 <__alt_exception_stack_pointer+0xf8007588>

000075d0 <_printf_r>:
    75d0:	defffd04 	addi	sp,sp,-12
    75d4:	2805883a 	mov	r2,r5
    75d8:	dfc00015 	stw	ra,0(sp)
    75dc:	d9800115 	stw	r6,4(sp)
    75e0:	d9c00215 	stw	r7,8(sp)
    75e4:	21400217 	ldw	r5,8(r4)
    75e8:	d9c00104 	addi	r7,sp,4
    75ec:	100d883a 	mov	r6,r2
    75f0:	00078040 	call	7804 <___vfprintf_internal_r>
    75f4:	dfc00017 	ldw	ra,0(sp)
    75f8:	dec00304 	addi	sp,sp,12
    75fc:	f800283a 	ret

00007600 <printf>:
    7600:	defffc04 	addi	sp,sp,-16
    7604:	dfc00015 	stw	ra,0(sp)
    7608:	d9400115 	stw	r5,4(sp)
    760c:	d9800215 	stw	r6,8(sp)
    7610:	d9c00315 	stw	r7,12(sp)
    7614:	00800074 	movhi	r2,1
    7618:	109c7304 	addi	r2,r2,29132
    761c:	10800017 	ldw	r2,0(r2)
    7620:	200b883a 	mov	r5,r4
    7624:	d9800104 	addi	r6,sp,4
    7628:	11000217 	ldw	r4,8(r2)
    762c:	0009ae00 	call	9ae0 <__vfprintf_internal>
    7630:	dfc00017 	ldw	ra,0(sp)
    7634:	dec00404 	addi	sp,sp,16
    7638:	f800283a 	ret

0000763c <_puts_r>:
    763c:	defff604 	addi	sp,sp,-40
    7640:	dc000715 	stw	r16,28(sp)
    7644:	2021883a 	mov	r16,r4
    7648:	2809883a 	mov	r4,r5
    764c:	dc400815 	stw	r17,32(sp)
    7650:	dfc00915 	stw	ra,36(sp)
    7654:	2823883a 	mov	r17,r5
    7658:	00077640 	call	7764 <strlen>
    765c:	10c00044 	addi	r3,r2,1
    7660:	d8800115 	stw	r2,4(sp)
    7664:	00800074 	movhi	r2,1
    7668:	10951404 	addi	r2,r2,21584
    766c:	d8800215 	stw	r2,8(sp)
    7670:	00800044 	movi	r2,1
    7674:	d8800315 	stw	r2,12(sp)
    7678:	00800084 	movi	r2,2
    767c:	dc400015 	stw	r17,0(sp)
    7680:	d8c00615 	stw	r3,24(sp)
    7684:	dec00415 	stw	sp,16(sp)
    7688:	d8800515 	stw	r2,20(sp)
    768c:	80000226 	beq	r16,zero,7698 <_puts_r+0x5c>
    7690:	80800e17 	ldw	r2,56(r16)
    7694:	10001426 	beq	r2,zero,76e8 <_puts_r+0xac>
    7698:	81400217 	ldw	r5,8(r16)
    769c:	2880030b 	ldhu	r2,12(r5)
    76a0:	10c8000c 	andi	r3,r2,8192
    76a4:	1800061e 	bne	r3,zero,76c0 <_puts_r+0x84>
    76a8:	29001917 	ldw	r4,100(r5)
    76ac:	00f7ffc4 	movi	r3,-8193
    76b0:	10880014 	ori	r2,r2,8192
    76b4:	20c6703a 	and	r3,r4,r3
    76b8:	2880030d 	sth	r2,12(r5)
    76bc:	28c01915 	stw	r3,100(r5)
    76c0:	d9800404 	addi	r6,sp,16
    76c4:	8009883a 	mov	r4,r16
    76c8:	000c0480 	call	c048 <__sfvwrite_r>
    76cc:	1000091e 	bne	r2,zero,76f4 <_puts_r+0xb8>
    76d0:	00800284 	movi	r2,10
    76d4:	dfc00917 	ldw	ra,36(sp)
    76d8:	dc400817 	ldw	r17,32(sp)
    76dc:	dc000717 	ldw	r16,28(sp)
    76e0:	dec00a04 	addi	sp,sp,40
    76e4:	f800283a 	ret
    76e8:	8009883a 	mov	r4,r16
    76ec:	000bbc40 	call	bbc4 <__sinit>
    76f0:	003fe906 	br	7698 <__alt_exception_stack_pointer+0xf8007698>
    76f4:	00bfffc4 	movi	r2,-1
    76f8:	003ff606 	br	76d4 <__alt_exception_stack_pointer+0xf80076d4>

000076fc <puts>:
    76fc:	00800074 	movhi	r2,1
    7700:	109c7304 	addi	r2,r2,29132
    7704:	200b883a 	mov	r5,r4
    7708:	11000017 	ldw	r4,0(r2)
    770c:	000763c1 	jmpi	763c <_puts_r>

00007710 <_sbrk_r>:
    7710:	defffd04 	addi	sp,sp,-12
    7714:	dc000015 	stw	r16,0(sp)
    7718:	040000b4 	movhi	r16,2
    771c:	dc400115 	stw	r17,4(sp)
    7720:	84236d04 	addi	r16,r16,-29260
    7724:	2023883a 	mov	r17,r4
    7728:	2809883a 	mov	r4,r5
    772c:	dfc00215 	stw	ra,8(sp)
    7730:	80000015 	stw	zero,0(r16)
    7734:	00124580 	call	12458 <sbrk>
    7738:	00ffffc4 	movi	r3,-1
    773c:	10c00526 	beq	r2,r3,7754 <_sbrk_r+0x44>
    7740:	dfc00217 	ldw	ra,8(sp)
    7744:	dc400117 	ldw	r17,4(sp)
    7748:	dc000017 	ldw	r16,0(sp)
    774c:	dec00304 	addi	sp,sp,12
    7750:	f800283a 	ret
    7754:	80c00017 	ldw	r3,0(r16)
    7758:	183ff926 	beq	r3,zero,7740 <__alt_exception_stack_pointer+0xf8007740>
    775c:	88c00015 	stw	r3,0(r17)
    7760:	003ff706 	br	7740 <__alt_exception_stack_pointer+0xf8007740>

00007764 <strlen>:
    7764:	208000cc 	andi	r2,r4,3
    7768:	10002026 	beq	r2,zero,77ec <strlen+0x88>
    776c:	20800007 	ldb	r2,0(r4)
    7770:	10002026 	beq	r2,zero,77f4 <strlen+0x90>
    7774:	2005883a 	mov	r2,r4
    7778:	00000206 	br	7784 <strlen+0x20>
    777c:	10c00007 	ldb	r3,0(r2)
    7780:	18001826 	beq	r3,zero,77e4 <strlen+0x80>
    7784:	10800044 	addi	r2,r2,1
    7788:	10c000cc 	andi	r3,r2,3
    778c:	183ffb1e 	bne	r3,zero,777c <__alt_exception_stack_pointer+0xf800777c>
    7790:	10c00017 	ldw	r3,0(r2)
    7794:	01ffbff4 	movhi	r7,65279
    7798:	39ffbfc4 	addi	r7,r7,-257
    779c:	00ca303a 	nor	r5,zero,r3
    77a0:	01a02074 	movhi	r6,32897
    77a4:	19c7883a 	add	r3,r3,r7
    77a8:	31a02004 	addi	r6,r6,-32640
    77ac:	1946703a 	and	r3,r3,r5
    77b0:	1986703a 	and	r3,r3,r6
    77b4:	1800091e 	bne	r3,zero,77dc <strlen+0x78>
    77b8:	10800104 	addi	r2,r2,4
    77bc:	10c00017 	ldw	r3,0(r2)
    77c0:	19cb883a 	add	r5,r3,r7
    77c4:	00c6303a 	nor	r3,zero,r3
    77c8:	28c6703a 	and	r3,r5,r3
    77cc:	1986703a 	and	r3,r3,r6
    77d0:	183ff926 	beq	r3,zero,77b8 <__alt_exception_stack_pointer+0xf80077b8>
    77d4:	00000106 	br	77dc <strlen+0x78>
    77d8:	10800044 	addi	r2,r2,1
    77dc:	10c00007 	ldb	r3,0(r2)
    77e0:	183ffd1e 	bne	r3,zero,77d8 <__alt_exception_stack_pointer+0xf80077d8>
    77e4:	1105c83a 	sub	r2,r2,r4
    77e8:	f800283a 	ret
    77ec:	2005883a 	mov	r2,r4
    77f0:	003fe706 	br	7790 <__alt_exception_stack_pointer+0xf8007790>
    77f4:	0005883a 	mov	r2,zero
    77f8:	f800283a 	ret

000077fc <_times_r>:
    77fc:	2809883a 	mov	r4,r5
    7800:	00125441 	jmpi	12544 <times>

00007804 <___vfprintf_internal_r>:
    7804:	deffb804 	addi	sp,sp,-288
    7808:	dfc04715 	stw	ra,284(sp)
    780c:	ddc04515 	stw	r23,276(sp)
    7810:	dd404315 	stw	r21,268(sp)
    7814:	d9002d15 	stw	r4,180(sp)
    7818:	282f883a 	mov	r23,r5
    781c:	302b883a 	mov	r21,r6
    7820:	d9c02e15 	stw	r7,184(sp)
    7824:	df004615 	stw	fp,280(sp)
    7828:	dd804415 	stw	r22,272(sp)
    782c:	dd004215 	stw	r20,264(sp)
    7830:	dcc04115 	stw	r19,260(sp)
    7834:	dc804015 	stw	r18,256(sp)
    7838:	dc403f15 	stw	r17,252(sp)
    783c:	dc003e15 	stw	r16,248(sp)
    7840:	000c7440 	call	c744 <_localeconv_r>
    7844:	10800017 	ldw	r2,0(r2)
    7848:	1009883a 	mov	r4,r2
    784c:	d8803415 	stw	r2,208(sp)
    7850:	00077640 	call	7764 <strlen>
    7854:	d8803715 	stw	r2,220(sp)
    7858:	d8802d17 	ldw	r2,180(sp)
    785c:	10000226 	beq	r2,zero,7868 <___vfprintf_internal_r+0x64>
    7860:	10800e17 	ldw	r2,56(r2)
    7864:	1000fb26 	beq	r2,zero,7c54 <___vfprintf_internal_r+0x450>
    7868:	b880030b 	ldhu	r2,12(r23)
    786c:	10c8000c 	andi	r3,r2,8192
    7870:	1800061e 	bne	r3,zero,788c <___vfprintf_internal_r+0x88>
    7874:	b9001917 	ldw	r4,100(r23)
    7878:	00f7ffc4 	movi	r3,-8193
    787c:	10880014 	ori	r2,r2,8192
    7880:	20c6703a 	and	r3,r4,r3
    7884:	b880030d 	sth	r2,12(r23)
    7888:	b8c01915 	stw	r3,100(r23)
    788c:	10c0020c 	andi	r3,r2,8
    7890:	1800c326 	beq	r3,zero,7ba0 <___vfprintf_internal_r+0x39c>
    7894:	b8c00417 	ldw	r3,16(r23)
    7898:	1800c126 	beq	r3,zero,7ba0 <___vfprintf_internal_r+0x39c>
    789c:	1080068c 	andi	r2,r2,26
    78a0:	00c00284 	movi	r3,10
    78a4:	10c0c626 	beq	r2,r3,7bc0 <___vfprintf_internal_r+0x3bc>
    78a8:	d8c00404 	addi	r3,sp,16
    78ac:	05000074 	movhi	r20,1
    78b0:	d9001e04 	addi	r4,sp,120
    78b4:	a5152584 	addi	r20,r20,21654
    78b8:	d8c01e15 	stw	r3,120(sp)
    78bc:	d8002015 	stw	zero,128(sp)
    78c0:	d8001f15 	stw	zero,124(sp)
    78c4:	d8003315 	stw	zero,204(sp)
    78c8:	d8003615 	stw	zero,216(sp)
    78cc:	d8003815 	stw	zero,224(sp)
    78d0:	1811883a 	mov	r8,r3
    78d4:	d8003915 	stw	zero,228(sp)
    78d8:	d8003a15 	stw	zero,232(sp)
    78dc:	d8002f15 	stw	zero,188(sp)
    78e0:	d9002815 	stw	r4,160(sp)
    78e4:	a8800007 	ldb	r2,0(r21)
    78e8:	10028b26 	beq	r2,zero,8318 <___vfprintf_internal_r+0xb14>
    78ec:	00c00944 	movi	r3,37
    78f0:	a823883a 	mov	r17,r21
    78f4:	10c0021e 	bne	r2,r3,7900 <___vfprintf_internal_r+0xfc>
    78f8:	00001406 	br	794c <___vfprintf_internal_r+0x148>
    78fc:	10c00326 	beq	r2,r3,790c <___vfprintf_internal_r+0x108>
    7900:	8c400044 	addi	r17,r17,1
    7904:	88800007 	ldb	r2,0(r17)
    7908:	103ffc1e 	bne	r2,zero,78fc <__alt_exception_stack_pointer+0xf80078fc>
    790c:	8d61c83a 	sub	r16,r17,r21
    7910:	80000e26 	beq	r16,zero,794c <___vfprintf_internal_r+0x148>
    7914:	d8c02017 	ldw	r3,128(sp)
    7918:	d8801f17 	ldw	r2,124(sp)
    791c:	45400015 	stw	r21,0(r8)
    7920:	1c07883a 	add	r3,r3,r16
    7924:	10800044 	addi	r2,r2,1
    7928:	d8c02015 	stw	r3,128(sp)
    792c:	44000115 	stw	r16,4(r8)
    7930:	d8801f15 	stw	r2,124(sp)
    7934:	00c001c4 	movi	r3,7
    7938:	1880a916 	blt	r3,r2,7be0 <___vfprintf_internal_r+0x3dc>
    793c:	42000204 	addi	r8,r8,8
    7940:	d9402f17 	ldw	r5,188(sp)
    7944:	2c0b883a 	add	r5,r5,r16
    7948:	d9402f15 	stw	r5,188(sp)
    794c:	88800007 	ldb	r2,0(r17)
    7950:	1000aa26 	beq	r2,zero,7bfc <___vfprintf_internal_r+0x3f8>
    7954:	8d400044 	addi	r21,r17,1
    7958:	8c400047 	ldb	r17,1(r17)
    795c:	0021883a 	mov	r16,zero
    7960:	00bfffc4 	movi	r2,-1
    7964:	0025883a 	mov	r18,zero
    7968:	dc002905 	stb	r16,164(sp)
    796c:	d8002785 	stb	zero,158(sp)
    7970:	d8002b05 	stb	zero,172(sp)
    7974:	d8802a15 	stw	r2,168(sp)
    7978:	d8003115 	stw	zero,196(sp)
    797c:	04c01604 	movi	r19,88
    7980:	05800244 	movi	r22,9
    7984:	9021883a 	mov	r16,r18
    7988:	4039883a 	mov	fp,r8
    798c:	ad400044 	addi	r21,r21,1
    7990:	88bff804 	addi	r2,r17,-32
    7994:	98833236 	bltu	r19,r2,8660 <___vfprintf_internal_r+0xe5c>
    7998:	100490ba 	slli	r2,r2,2
    799c:	00c00034 	movhi	r3,0
    79a0:	18de6c04 	addi	r3,r3,31152
    79a4:	10c5883a 	add	r2,r2,r3
    79a8:	10800017 	ldw	r2,0(r2)
    79ac:	1000683a 	jmp	r2
    79b0:	00008558 	cmpnei	zero,zero,533
    79b4:	00008660 	cmpeqi	zero,zero,537
    79b8:	00008660 	cmpeqi	zero,zero,537
    79bc:	00008578 	rdprs	zero,zero,533
    79c0:	00008660 	cmpeqi	zero,zero,537
    79c4:	00008660 	cmpeqi	zero,zero,537
    79c8:	00008660 	cmpeqi	zero,zero,537
    79cc:	00008660 	cmpeqi	zero,zero,537
    79d0:	00008660 	cmpeqi	zero,zero,537
    79d4:	00008660 	cmpeqi	zero,zero,537
    79d8:	00007c60 	cmpeqi	zero,zero,497
    79dc:	00008468 	cmpgeui	zero,zero,529
    79e0:	00008660 	cmpeqi	zero,zero,537
    79e4:	00007b24 	muli	zero,zero,492
    79e8:	00007c84 	movi	zero,498
    79ec:	00008660 	cmpeqi	zero,zero,537
    79f0:	00007cd4 	movui	zero,499
    79f4:	00007ce0 	cmpeqi	zero,zero,499
    79f8:	00007ce0 	cmpeqi	zero,zero,499
    79fc:	00007ce0 	cmpeqi	zero,zero,499
    7a00:	00007ce0 	cmpeqi	zero,zero,499
    7a04:	00007ce0 	cmpeqi	zero,zero,499
    7a08:	00007ce0 	cmpeqi	zero,zero,499
    7a0c:	00007ce0 	cmpeqi	zero,zero,499
    7a10:	00007ce0 	cmpeqi	zero,zero,499
    7a14:	00007ce0 	cmpeqi	zero,zero,499
    7a18:	00008660 	cmpeqi	zero,zero,537
    7a1c:	00008660 	cmpeqi	zero,zero,537
    7a20:	00008660 	cmpeqi	zero,zero,537
    7a24:	00008660 	cmpeqi	zero,zero,537
    7a28:	00008660 	cmpeqi	zero,zero,537
    7a2c:	00008660 	cmpeqi	zero,zero,537
    7a30:	00008660 	cmpeqi	zero,zero,537
    7a34:	00008660 	cmpeqi	zero,zero,537
    7a38:	00008660 	cmpeqi	zero,zero,537
    7a3c:	00008660 	cmpeqi	zero,zero,537
    7a40:	00007d1c 	xori	zero,zero,500
    7a44:	00007de4 	muli	zero,zero,503
    7a48:	00008660 	cmpeqi	zero,zero,537
    7a4c:	00007de4 	muli	zero,zero,503
    7a50:	00008660 	cmpeqi	zero,zero,537
    7a54:	00008660 	cmpeqi	zero,zero,537
    7a58:	00008660 	cmpeqi	zero,zero,537
    7a5c:	00008660 	cmpeqi	zero,zero,537
    7a60:	00007e90 	cmplti	zero,zero,506
    7a64:	00008660 	cmpeqi	zero,zero,537
    7a68:	00008660 	cmpeqi	zero,zero,537
    7a6c:	00007e9c 	xori	zero,zero,506
    7a70:	00008660 	cmpeqi	zero,zero,537
    7a74:	00008660 	cmpeqi	zero,zero,537
    7a78:	00008660 	cmpeqi	zero,zero,537
    7a7c:	00008660 	cmpeqi	zero,zero,537
    7a80:	00008660 	cmpeqi	zero,zero,537
    7a84:	00008320 	cmpeqi	zero,zero,524
    7a88:	00008660 	cmpeqi	zero,zero,537
    7a8c:	00008660 	cmpeqi	zero,zero,537
    7a90:	0000838c 	andi	zero,zero,526
    7a94:	00008660 	cmpeqi	zero,zero,537
    7a98:	00008660 	cmpeqi	zero,zero,537
    7a9c:	00008660 	cmpeqi	zero,zero,537
    7aa0:	00008660 	cmpeqi	zero,zero,537
    7aa4:	00008660 	cmpeqi	zero,zero,537
    7aa8:	00008660 	cmpeqi	zero,zero,537
    7aac:	00008660 	cmpeqi	zero,zero,537
    7ab0:	00008660 	cmpeqi	zero,zero,537
    7ab4:	00008660 	cmpeqi	zero,zero,537
    7ab8:	00008660 	cmpeqi	zero,zero,537
    7abc:	00008604 	movi	zero,536
    7ac0:	00008584 	movi	zero,534
    7ac4:	00007de4 	muli	zero,zero,503
    7ac8:	00007de4 	muli	zero,zero,503
    7acc:	00007de4 	muli	zero,zero,503
    7ad0:	000085a4 	muli	zero,zero,534
    7ad4:	00008584 	movi	zero,534
    7ad8:	00008660 	cmpeqi	zero,zero,537
    7adc:	00008660 	cmpeqi	zero,zero,537
    7ae0:	000085b0 	cmpltui	zero,zero,534
    7ae4:	00008660 	cmpeqi	zero,zero,537
    7ae8:	000085c4 	movi	zero,535
    7aec:	00008448 	cmpgei	zero,zero,529
    7af0:	00007b30 	cmpltui	zero,zero,492
    7af4:	00008480 	call	848 <init_keyboard+0x118>
    7af8:	00008660 	cmpeqi	zero,zero,537
    7afc:	0000848c 	andi	zero,zero,530
    7b00:	00008660 	cmpeqi	zero,zero,537
    7b04:	000084f0 	cmpltui	zero,zero,531
    7b08:	00008660 	cmpeqi	zero,zero,537
    7b0c:	00008660 	cmpeqi	zero,zero,537
    7b10:	00008510 	cmplti	zero,zero,532
    7b14:	d8c03117 	ldw	r3,196(sp)
    7b18:	d8802e15 	stw	r2,184(sp)
    7b1c:	00c7c83a 	sub	r3,zero,r3
    7b20:	d8c03115 	stw	r3,196(sp)
    7b24:	84000114 	ori	r16,r16,4
    7b28:	ac400007 	ldb	r17,0(r21)
    7b2c:	003f9706 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    7b30:	00800c04 	movi	r2,48
    7b34:	d8802705 	stb	r2,156(sp)
    7b38:	00801e04 	movi	r2,120
    7b3c:	d8802745 	stb	r2,157(sp)
    7b40:	d9002a17 	ldw	r4,168(sp)
    7b44:	d8802e17 	ldw	r2,184(sp)
    7b48:	d8002785 	stb	zero,158(sp)
    7b4c:	e011883a 	mov	r8,fp
    7b50:	10c00104 	addi	r3,r2,4
    7b54:	14c00017 	ldw	r19,0(r2)
    7b58:	002d883a 	mov	r22,zero
    7b5c:	80800094 	ori	r2,r16,2
    7b60:	2002ca16 	blt	r4,zero,868c <___vfprintf_internal_r+0xe88>
    7b64:	00bfdfc4 	movi	r2,-129
    7b68:	80a4703a 	and	r18,r16,r2
    7b6c:	d8c02e15 	stw	r3,184(sp)
    7b70:	94800094 	ori	r18,r18,2
    7b74:	9802b41e 	bne	r19,zero,8648 <___vfprintf_internal_r+0xe44>
    7b78:	01400074 	movhi	r5,1
    7b7c:	29551e04 	addi	r5,r5,21624
    7b80:	d9403915 	stw	r5,228(sp)
    7b84:	04401e04 	movi	r17,120
    7b88:	d8802a17 	ldw	r2,168(sp)
    7b8c:	0039883a 	mov	fp,zero
    7b90:	1001fa26 	beq	r2,zero,837c <___vfprintf_internal_r+0xb78>
    7b94:	0027883a 	mov	r19,zero
    7b98:	002d883a 	mov	r22,zero
    7b9c:	00021906 	br	8404 <___vfprintf_internal_r+0xc00>
    7ba0:	d9002d17 	ldw	r4,180(sp)
    7ba4:	b80b883a 	mov	r5,r23
    7ba8:	0009bb80 	call	9bb8 <__swsetup_r>
    7bac:	1005dc1e 	bne	r2,zero,9320 <___vfprintf_internal_r+0x1b1c>
    7bb0:	b880030b 	ldhu	r2,12(r23)
    7bb4:	00c00284 	movi	r3,10
    7bb8:	1080068c 	andi	r2,r2,26
    7bbc:	10ff3a1e 	bne	r2,r3,78a8 <__alt_exception_stack_pointer+0xf80078a8>
    7bc0:	b880038f 	ldh	r2,14(r23)
    7bc4:	103f3816 	blt	r2,zero,78a8 <__alt_exception_stack_pointer+0xf80078a8>
    7bc8:	d9c02e17 	ldw	r7,184(sp)
    7bcc:	d9002d17 	ldw	r4,180(sp)
    7bd0:	a80d883a 	mov	r6,r21
    7bd4:	b80b883a 	mov	r5,r23
    7bd8:	0009afc0 	call	9afc <__sbprintf>
    7bdc:	00001106 	br	7c24 <___vfprintf_internal_r+0x420>
    7be0:	d9002d17 	ldw	r4,180(sp)
    7be4:	d9801e04 	addi	r6,sp,120
    7be8:	b80b883a 	mov	r5,r23
    7bec:	000e63c0 	call	e63c <__sprint_r>
    7bf0:	1000081e 	bne	r2,zero,7c14 <___vfprintf_internal_r+0x410>
    7bf4:	da000404 	addi	r8,sp,16
    7bf8:	003f5106 	br	7940 <__alt_exception_stack_pointer+0xf8007940>
    7bfc:	d8802017 	ldw	r2,128(sp)
    7c00:	10000426 	beq	r2,zero,7c14 <___vfprintf_internal_r+0x410>
    7c04:	d9002d17 	ldw	r4,180(sp)
    7c08:	d9801e04 	addi	r6,sp,120
    7c0c:	b80b883a 	mov	r5,r23
    7c10:	000e63c0 	call	e63c <__sprint_r>
    7c14:	b880030b 	ldhu	r2,12(r23)
    7c18:	1080100c 	andi	r2,r2,64
    7c1c:	1005c01e 	bne	r2,zero,9320 <___vfprintf_internal_r+0x1b1c>
    7c20:	d8802f17 	ldw	r2,188(sp)
    7c24:	dfc04717 	ldw	ra,284(sp)
    7c28:	df004617 	ldw	fp,280(sp)
    7c2c:	ddc04517 	ldw	r23,276(sp)
    7c30:	dd804417 	ldw	r22,272(sp)
    7c34:	dd404317 	ldw	r21,268(sp)
    7c38:	dd004217 	ldw	r20,264(sp)
    7c3c:	dcc04117 	ldw	r19,260(sp)
    7c40:	dc804017 	ldw	r18,256(sp)
    7c44:	dc403f17 	ldw	r17,252(sp)
    7c48:	dc003e17 	ldw	r16,248(sp)
    7c4c:	dec04804 	addi	sp,sp,288
    7c50:	f800283a 	ret
    7c54:	d9002d17 	ldw	r4,180(sp)
    7c58:	000bbc40 	call	bbc4 <__sinit>
    7c5c:	003f0206 	br	7868 <__alt_exception_stack_pointer+0xf8007868>
    7c60:	d9002e17 	ldw	r4,184(sp)
    7c64:	d9402e17 	ldw	r5,184(sp)
    7c68:	21000017 	ldw	r4,0(r4)
    7c6c:	28800104 	addi	r2,r5,4
    7c70:	d9003115 	stw	r4,196(sp)
    7c74:	203fa716 	blt	r4,zero,7b14 <__alt_exception_stack_pointer+0xf8007b14>
    7c78:	d8802e15 	stw	r2,184(sp)
    7c7c:	ac400007 	ldb	r17,0(r21)
    7c80:	003f4206 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    7c84:	ac400007 	ldb	r17,0(r21)
    7c88:	01000a84 	movi	r4,42
    7c8c:	a8c00044 	addi	r3,r21,1
    7c90:	89075826 	beq	r17,r4,99f4 <___vfprintf_internal_r+0x21f0>
    7c94:	8cbff404 	addi	r18,r17,-48
    7c98:	b486ae36 	bltu	r22,r18,9754 <___vfprintf_internal_r+0x1f50>
    7c9c:	0009883a 	mov	r4,zero
    7ca0:	1823883a 	mov	r17,r3
    7ca4:	01400284 	movi	r5,10
    7ca8:	0004ea80 	call	4ea8 <__mulsi3>
    7cac:	88c00007 	ldb	r3,0(r17)
    7cb0:	1489883a 	add	r4,r2,r18
    7cb4:	8d400044 	addi	r21,r17,1
    7cb8:	1cbff404 	addi	r18,r3,-48
    7cbc:	a823883a 	mov	r17,r21
    7cc0:	b4bff82e 	bgeu	r22,r18,7ca4 <__alt_exception_stack_pointer+0xf8007ca4>
    7cc4:	1823883a 	mov	r17,r3
    7cc8:	2005f616 	blt	r4,zero,94a4 <___vfprintf_internal_r+0x1ca0>
    7ccc:	d9002a15 	stw	r4,168(sp)
    7cd0:	003f2f06 	br	7990 <__alt_exception_stack_pointer+0xf8007990>
    7cd4:	84002014 	ori	r16,r16,128
    7cd8:	ac400007 	ldb	r17,0(r21)
    7cdc:	003f2b06 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    7ce0:	8cbff404 	addi	r18,r17,-48
    7ce4:	d8003115 	stw	zero,196(sp)
    7ce8:	0009883a 	mov	r4,zero
    7cec:	a823883a 	mov	r17,r21
    7cf0:	01400284 	movi	r5,10
    7cf4:	0004ea80 	call	4ea8 <__mulsi3>
    7cf8:	88c00007 	ldb	r3,0(r17)
    7cfc:	9089883a 	add	r4,r18,r2
    7d00:	ad400044 	addi	r21,r21,1
    7d04:	1cbff404 	addi	r18,r3,-48
    7d08:	a823883a 	mov	r17,r21
    7d0c:	b4bff82e 	bgeu	r22,r18,7cf0 <__alt_exception_stack_pointer+0xf8007cf0>
    7d10:	1823883a 	mov	r17,r3
    7d14:	d9003115 	stw	r4,196(sp)
    7d18:	003f1d06 	br	7990 <__alt_exception_stack_pointer+0xf8007990>
    7d1c:	8025883a 	mov	r18,r16
    7d20:	dc002903 	ldbu	r16,164(sp)
    7d24:	e011883a 	mov	r8,fp
    7d28:	84003fcc 	andi	r16,r16,255
    7d2c:	8007531e 	bne	r16,zero,9a7c <___vfprintf_internal_r+0x2278>
    7d30:	94800414 	ori	r18,r18,16
    7d34:	9080080c 	andi	r2,r18,32
    7d38:	1003a326 	beq	r2,zero,8bc8 <___vfprintf_internal_r+0x13c4>
    7d3c:	d9002e17 	ldw	r4,184(sp)
    7d40:	20800117 	ldw	r2,4(r4)
    7d44:	24c00017 	ldw	r19,0(r4)
    7d48:	21000204 	addi	r4,r4,8
    7d4c:	d9002e15 	stw	r4,184(sp)
    7d50:	102d883a 	mov	r22,r2
    7d54:	10047316 	blt	r2,zero,8f24 <___vfprintf_internal_r+0x1720>
    7d58:	d9002a17 	ldw	r4,168(sp)
    7d5c:	df002783 	ldbu	fp,158(sp)
    7d60:	2003e416 	blt	r4,zero,8cf4 <___vfprintf_internal_r+0x14f0>
    7d64:	00ffdfc4 	movi	r3,-129
    7d68:	9d84b03a 	or	r2,r19,r22
    7d6c:	90e4703a 	and	r18,r18,r3
    7d70:	10018026 	beq	r2,zero,8374 <___vfprintf_internal_r+0xb70>
    7d74:	b003ab26 	beq	r22,zero,8c24 <___vfprintf_internal_r+0x1420>
    7d78:	dc402915 	stw	r17,164(sp)
    7d7c:	dc001e04 	addi	r16,sp,120
    7d80:	b023883a 	mov	r17,r22
    7d84:	402d883a 	mov	r22,r8
    7d88:	9809883a 	mov	r4,r19
    7d8c:	880b883a 	mov	r5,r17
    7d90:	01800284 	movi	r6,10
    7d94:	000f883a 	mov	r7,zero
    7d98:	0010b800 	call	10b80 <__umoddi3>
    7d9c:	10800c04 	addi	r2,r2,48
    7da0:	843fffc4 	addi	r16,r16,-1
    7da4:	9809883a 	mov	r4,r19
    7da8:	880b883a 	mov	r5,r17
    7dac:	80800005 	stb	r2,0(r16)
    7db0:	01800284 	movi	r6,10
    7db4:	000f883a 	mov	r7,zero
    7db8:	00105840 	call	10584 <__udivdi3>
    7dbc:	1027883a 	mov	r19,r2
    7dc0:	10c4b03a 	or	r2,r2,r3
    7dc4:	1823883a 	mov	r17,r3
    7dc8:	103fef1e 	bne	r2,zero,7d88 <__alt_exception_stack_pointer+0xf8007d88>
    7dcc:	d8c02817 	ldw	r3,160(sp)
    7dd0:	dc402917 	ldw	r17,164(sp)
    7dd4:	b011883a 	mov	r8,r22
    7dd8:	1c07c83a 	sub	r3,r3,r16
    7ddc:	d8c02b15 	stw	r3,172(sp)
    7de0:	00005f06 	br	7f60 <___vfprintf_internal_r+0x75c>
    7de4:	8025883a 	mov	r18,r16
    7de8:	dc002903 	ldbu	r16,164(sp)
    7dec:	e011883a 	mov	r8,fp
    7df0:	84003fcc 	andi	r16,r16,255
    7df4:	80071e1e 	bne	r16,zero,9a70 <___vfprintf_internal_r+0x226c>
    7df8:	9080020c 	andi	r2,r18,8
    7dfc:	1004af26 	beq	r2,zero,90bc <___vfprintf_internal_r+0x18b8>
    7e00:	d9002e17 	ldw	r4,184(sp)
    7e04:	d9402e17 	ldw	r5,184(sp)
    7e08:	d8802e17 	ldw	r2,184(sp)
    7e0c:	21000017 	ldw	r4,0(r4)
    7e10:	29400117 	ldw	r5,4(r5)
    7e14:	10800204 	addi	r2,r2,8
    7e18:	d9003615 	stw	r4,216(sp)
    7e1c:	d9403815 	stw	r5,224(sp)
    7e20:	d8802e15 	stw	r2,184(sp)
    7e24:	d9003617 	ldw	r4,216(sp)
    7e28:	d9403817 	ldw	r5,224(sp)
    7e2c:	da003d15 	stw	r8,244(sp)
    7e30:	04000044 	movi	r16,1
    7e34:	000e2b40 	call	e2b4 <__fpclassifyd>
    7e38:	da003d17 	ldw	r8,244(sp)
    7e3c:	1404441e 	bne	r2,r16,8f50 <___vfprintf_internal_r+0x174c>
    7e40:	d9003617 	ldw	r4,216(sp)
    7e44:	d9403817 	ldw	r5,224(sp)
    7e48:	000d883a 	mov	r6,zero
    7e4c:	000f883a 	mov	r7,zero
    7e50:	0011b140 	call	11b14 <__ledf2>
    7e54:	da003d17 	ldw	r8,244(sp)
    7e58:	1005e316 	blt	r2,zero,95e8 <___vfprintf_internal_r+0x1de4>
    7e5c:	df002783 	ldbu	fp,158(sp)
    7e60:	008011c4 	movi	r2,71
    7e64:	1445580e 	bge	r2,r17,93c8 <___vfprintf_internal_r+0x1bc4>
    7e68:	04000074 	movhi	r16,1
    7e6c:	84151604 	addi	r16,r16,21592
    7e70:	00c000c4 	movi	r3,3
    7e74:	00bfdfc4 	movi	r2,-129
    7e78:	d8c02915 	stw	r3,164(sp)
    7e7c:	90a4703a 	and	r18,r18,r2
    7e80:	d8c02b15 	stw	r3,172(sp)
    7e84:	d8002a15 	stw	zero,168(sp)
    7e88:	d8003215 	stw	zero,200(sp)
    7e8c:	00003a06 	br	7f78 <___vfprintf_internal_r+0x774>
    7e90:	84000214 	ori	r16,r16,8
    7e94:	ac400007 	ldb	r17,0(r21)
    7e98:	003ebc06 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    7e9c:	8025883a 	mov	r18,r16
    7ea0:	dc002903 	ldbu	r16,164(sp)
    7ea4:	e011883a 	mov	r8,fp
    7ea8:	84003fcc 	andi	r16,r16,255
    7eac:	8007001e 	bne	r16,zero,9ab0 <___vfprintf_internal_r+0x22ac>
    7eb0:	94800414 	ori	r18,r18,16
    7eb4:	9080080c 	andi	r2,r18,32
    7eb8:	1002fa26 	beq	r2,zero,8aa4 <___vfprintf_internal_r+0x12a0>
    7ebc:	d9002e17 	ldw	r4,184(sp)
    7ec0:	d9402a17 	ldw	r5,168(sp)
    7ec4:	d8002785 	stb	zero,158(sp)
    7ec8:	20800204 	addi	r2,r4,8
    7ecc:	24c00017 	ldw	r19,0(r4)
    7ed0:	25800117 	ldw	r22,4(r4)
    7ed4:	2804b116 	blt	r5,zero,919c <___vfprintf_internal_r+0x1998>
    7ed8:	013fdfc4 	movi	r4,-129
    7edc:	9d86b03a 	or	r3,r19,r22
    7ee0:	d8802e15 	stw	r2,184(sp)
    7ee4:	9124703a 	and	r18,r18,r4
    7ee8:	1802fb1e 	bne	r3,zero,8ad8 <___vfprintf_internal_r+0x12d4>
    7eec:	d8c02a17 	ldw	r3,168(sp)
    7ef0:	0039883a 	mov	fp,zero
    7ef4:	1805e526 	beq	r3,zero,968c <___vfprintf_internal_r+0x1e88>
    7ef8:	0027883a 	mov	r19,zero
    7efc:	002d883a 	mov	r22,zero
    7f00:	dc001e04 	addi	r16,sp,120
    7f04:	9806d0fa 	srli	r3,r19,3
    7f08:	b008977a 	slli	r4,r22,29
    7f0c:	b02cd0fa 	srli	r22,r22,3
    7f10:	9cc001cc 	andi	r19,r19,7
    7f14:	98800c04 	addi	r2,r19,48
    7f18:	843fffc4 	addi	r16,r16,-1
    7f1c:	20e6b03a 	or	r19,r4,r3
    7f20:	80800005 	stb	r2,0(r16)
    7f24:	9d86b03a 	or	r3,r19,r22
    7f28:	183ff61e 	bne	r3,zero,7f04 <__alt_exception_stack_pointer+0xf8007f04>
    7f2c:	90c0004c 	andi	r3,r18,1
    7f30:	18014126 	beq	r3,zero,8438 <___vfprintf_internal_r+0xc34>
    7f34:	10803fcc 	andi	r2,r2,255
    7f38:	1080201c 	xori	r2,r2,128
    7f3c:	10bfe004 	addi	r2,r2,-128
    7f40:	00c00c04 	movi	r3,48
    7f44:	10c13c26 	beq	r2,r3,8438 <___vfprintf_internal_r+0xc34>
    7f48:	80ffffc5 	stb	r3,-1(r16)
    7f4c:	d8c02817 	ldw	r3,160(sp)
    7f50:	80bfffc4 	addi	r2,r16,-1
    7f54:	1021883a 	mov	r16,r2
    7f58:	1887c83a 	sub	r3,r3,r2
    7f5c:	d8c02b15 	stw	r3,172(sp)
    7f60:	d8802b17 	ldw	r2,172(sp)
    7f64:	d9002a17 	ldw	r4,168(sp)
    7f68:	1100010e 	bge	r2,r4,7f70 <___vfprintf_internal_r+0x76c>
    7f6c:	2005883a 	mov	r2,r4
    7f70:	d8802915 	stw	r2,164(sp)
    7f74:	d8003215 	stw	zero,200(sp)
    7f78:	e7003fcc 	andi	fp,fp,255
    7f7c:	e700201c 	xori	fp,fp,128
    7f80:	e73fe004 	addi	fp,fp,-128
    7f84:	e0000326 	beq	fp,zero,7f94 <___vfprintf_internal_r+0x790>
    7f88:	d8c02917 	ldw	r3,164(sp)
    7f8c:	18c00044 	addi	r3,r3,1
    7f90:	d8c02915 	stw	r3,164(sp)
    7f94:	90c0008c 	andi	r3,r18,2
    7f98:	d8c02c15 	stw	r3,176(sp)
    7f9c:	18000326 	beq	r3,zero,7fac <___vfprintf_internal_r+0x7a8>
    7fa0:	d8c02917 	ldw	r3,164(sp)
    7fa4:	18c00084 	addi	r3,r3,2
    7fa8:	d8c02915 	stw	r3,164(sp)
    7fac:	90c0210c 	andi	r3,r18,132
    7fb0:	d8c03015 	stw	r3,192(sp)
    7fb4:	1801c51e 	bne	r3,zero,86cc <___vfprintf_internal_r+0xec8>
    7fb8:	d9003117 	ldw	r4,196(sp)
    7fbc:	d8c02917 	ldw	r3,164(sp)
    7fc0:	20e7c83a 	sub	r19,r4,r3
    7fc4:	04c1c10e 	bge	zero,r19,86cc <___vfprintf_internal_r+0xec8>
    7fc8:	02400404 	movi	r9,16
    7fcc:	d8c02017 	ldw	r3,128(sp)
    7fd0:	d8801f17 	ldw	r2,124(sp)
    7fd4:	4cc52f0e 	bge	r9,r19,9494 <___vfprintf_internal_r+0x1c90>
    7fd8:	01400074 	movhi	r5,1
    7fdc:	29552984 	addi	r5,r5,21670
    7fe0:	dc403b15 	stw	r17,236(sp)
    7fe4:	d9403515 	stw	r5,212(sp)
    7fe8:	9823883a 	mov	r17,r19
    7fec:	482d883a 	mov	r22,r9
    7ff0:	9027883a 	mov	r19,r18
    7ff4:	070001c4 	movi	fp,7
    7ff8:	8025883a 	mov	r18,r16
    7ffc:	dc002d17 	ldw	r16,180(sp)
    8000:	00000306 	br	8010 <___vfprintf_internal_r+0x80c>
    8004:	8c7ffc04 	addi	r17,r17,-16
    8008:	42000204 	addi	r8,r8,8
    800c:	b440130e 	bge	r22,r17,805c <___vfprintf_internal_r+0x858>
    8010:	01000074 	movhi	r4,1
    8014:	18c00404 	addi	r3,r3,16
    8018:	10800044 	addi	r2,r2,1
    801c:	21152984 	addi	r4,r4,21670
    8020:	41000015 	stw	r4,0(r8)
    8024:	45800115 	stw	r22,4(r8)
    8028:	d8c02015 	stw	r3,128(sp)
    802c:	d8801f15 	stw	r2,124(sp)
    8030:	e0bff40e 	bge	fp,r2,8004 <__alt_exception_stack_pointer+0xf8008004>
    8034:	d9801e04 	addi	r6,sp,120
    8038:	b80b883a 	mov	r5,r23
    803c:	8009883a 	mov	r4,r16
    8040:	000e63c0 	call	e63c <__sprint_r>
    8044:	103ef31e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8048:	8c7ffc04 	addi	r17,r17,-16
    804c:	d8c02017 	ldw	r3,128(sp)
    8050:	d8801f17 	ldw	r2,124(sp)
    8054:	da000404 	addi	r8,sp,16
    8058:	b47fed16 	blt	r22,r17,8010 <__alt_exception_stack_pointer+0xf8008010>
    805c:	9021883a 	mov	r16,r18
    8060:	9825883a 	mov	r18,r19
    8064:	8827883a 	mov	r19,r17
    8068:	dc403b17 	ldw	r17,236(sp)
    806c:	d9403517 	ldw	r5,212(sp)
    8070:	98c7883a 	add	r3,r19,r3
    8074:	10800044 	addi	r2,r2,1
    8078:	41400015 	stw	r5,0(r8)
    807c:	44c00115 	stw	r19,4(r8)
    8080:	d8c02015 	stw	r3,128(sp)
    8084:	d8801f15 	stw	r2,124(sp)
    8088:	010001c4 	movi	r4,7
    808c:	2082c516 	blt	r4,r2,8ba4 <___vfprintf_internal_r+0x13a0>
    8090:	df002787 	ldb	fp,158(sp)
    8094:	42000204 	addi	r8,r8,8
    8098:	e0000c26 	beq	fp,zero,80cc <___vfprintf_internal_r+0x8c8>
    809c:	d8801f17 	ldw	r2,124(sp)
    80a0:	d9002784 	addi	r4,sp,158
    80a4:	18c00044 	addi	r3,r3,1
    80a8:	10800044 	addi	r2,r2,1
    80ac:	41000015 	stw	r4,0(r8)
    80b0:	01000044 	movi	r4,1
    80b4:	41000115 	stw	r4,4(r8)
    80b8:	d8c02015 	stw	r3,128(sp)
    80bc:	d8801f15 	stw	r2,124(sp)
    80c0:	010001c4 	movi	r4,7
    80c4:	20825e16 	blt	r4,r2,8a40 <___vfprintf_internal_r+0x123c>
    80c8:	42000204 	addi	r8,r8,8
    80cc:	d8802c17 	ldw	r2,176(sp)
    80d0:	10000c26 	beq	r2,zero,8104 <___vfprintf_internal_r+0x900>
    80d4:	d8801f17 	ldw	r2,124(sp)
    80d8:	d9002704 	addi	r4,sp,156
    80dc:	18c00084 	addi	r3,r3,2
    80e0:	10800044 	addi	r2,r2,1
    80e4:	41000015 	stw	r4,0(r8)
    80e8:	01000084 	movi	r4,2
    80ec:	41000115 	stw	r4,4(r8)
    80f0:	d8c02015 	stw	r3,128(sp)
    80f4:	d8801f15 	stw	r2,124(sp)
    80f8:	010001c4 	movi	r4,7
    80fc:	20825816 	blt	r4,r2,8a60 <___vfprintf_internal_r+0x125c>
    8100:	42000204 	addi	r8,r8,8
    8104:	d9003017 	ldw	r4,192(sp)
    8108:	00802004 	movi	r2,128
    810c:	2081bb26 	beq	r4,r2,87fc <___vfprintf_internal_r+0xff8>
    8110:	d9402a17 	ldw	r5,168(sp)
    8114:	d8802b17 	ldw	r2,172(sp)
    8118:	28adc83a 	sub	r22,r5,r2
    811c:	0580310e 	bge	zero,r22,81e4 <___vfprintf_internal_r+0x9e0>
    8120:	07000404 	movi	fp,16
    8124:	d8801f17 	ldw	r2,124(sp)
    8128:	e584360e 	bge	fp,r22,9204 <___vfprintf_internal_r+0x1a00>
    812c:	01400074 	movhi	r5,1
    8130:	29552584 	addi	r5,r5,21654
    8134:	dc402a15 	stw	r17,168(sp)
    8138:	d9402c15 	stw	r5,176(sp)
    813c:	b023883a 	mov	r17,r22
    8140:	04c001c4 	movi	r19,7
    8144:	a82d883a 	mov	r22,r21
    8148:	902b883a 	mov	r21,r18
    814c:	8025883a 	mov	r18,r16
    8150:	dc002d17 	ldw	r16,180(sp)
    8154:	00000306 	br	8164 <___vfprintf_internal_r+0x960>
    8158:	8c7ffc04 	addi	r17,r17,-16
    815c:	42000204 	addi	r8,r8,8
    8160:	e440110e 	bge	fp,r17,81a8 <___vfprintf_internal_r+0x9a4>
    8164:	18c00404 	addi	r3,r3,16
    8168:	10800044 	addi	r2,r2,1
    816c:	45000015 	stw	r20,0(r8)
    8170:	47000115 	stw	fp,4(r8)
    8174:	d8c02015 	stw	r3,128(sp)
    8178:	d8801f15 	stw	r2,124(sp)
    817c:	98bff60e 	bge	r19,r2,8158 <__alt_exception_stack_pointer+0xf8008158>
    8180:	d9801e04 	addi	r6,sp,120
    8184:	b80b883a 	mov	r5,r23
    8188:	8009883a 	mov	r4,r16
    818c:	000e63c0 	call	e63c <__sprint_r>
    8190:	103ea01e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8194:	8c7ffc04 	addi	r17,r17,-16
    8198:	d8c02017 	ldw	r3,128(sp)
    819c:	d8801f17 	ldw	r2,124(sp)
    81a0:	da000404 	addi	r8,sp,16
    81a4:	e47fef16 	blt	fp,r17,8164 <__alt_exception_stack_pointer+0xf8008164>
    81a8:	9021883a 	mov	r16,r18
    81ac:	a825883a 	mov	r18,r21
    81b0:	b02b883a 	mov	r21,r22
    81b4:	882d883a 	mov	r22,r17
    81b8:	dc402a17 	ldw	r17,168(sp)
    81bc:	d9002c17 	ldw	r4,176(sp)
    81c0:	1d87883a 	add	r3,r3,r22
    81c4:	10800044 	addi	r2,r2,1
    81c8:	41000015 	stw	r4,0(r8)
    81cc:	45800115 	stw	r22,4(r8)
    81d0:	d8c02015 	stw	r3,128(sp)
    81d4:	d8801f15 	stw	r2,124(sp)
    81d8:	010001c4 	movi	r4,7
    81dc:	20821016 	blt	r4,r2,8a20 <___vfprintf_internal_r+0x121c>
    81e0:	42000204 	addi	r8,r8,8
    81e4:	9080400c 	andi	r2,r18,256
    81e8:	10013a1e 	bne	r2,zero,86d4 <___vfprintf_internal_r+0xed0>
    81ec:	d9402b17 	ldw	r5,172(sp)
    81f0:	d8801f17 	ldw	r2,124(sp)
    81f4:	44000015 	stw	r16,0(r8)
    81f8:	1947883a 	add	r3,r3,r5
    81fc:	10800044 	addi	r2,r2,1
    8200:	41400115 	stw	r5,4(r8)
    8204:	d8c02015 	stw	r3,128(sp)
    8208:	d8801f15 	stw	r2,124(sp)
    820c:	010001c4 	movi	r4,7
    8210:	2081f516 	blt	r4,r2,89e8 <___vfprintf_internal_r+0x11e4>
    8214:	42000204 	addi	r8,r8,8
    8218:	9480010c 	andi	r18,r18,4
    821c:	90003226 	beq	r18,zero,82e8 <___vfprintf_internal_r+0xae4>
    8220:	d9403117 	ldw	r5,196(sp)
    8224:	d8802917 	ldw	r2,164(sp)
    8228:	28a1c83a 	sub	r16,r5,r2
    822c:	04002e0e 	bge	zero,r16,82e8 <___vfprintf_internal_r+0xae4>
    8230:	04400404 	movi	r17,16
    8234:	d8801f17 	ldw	r2,124(sp)
    8238:	8c04c40e 	bge	r17,r16,954c <___vfprintf_internal_r+0x1d48>
    823c:	01400074 	movhi	r5,1
    8240:	29552984 	addi	r5,r5,21670
    8244:	d9403515 	stw	r5,212(sp)
    8248:	048001c4 	movi	r18,7
    824c:	dcc02d17 	ldw	r19,180(sp)
    8250:	00000306 	br	8260 <___vfprintf_internal_r+0xa5c>
    8254:	843ffc04 	addi	r16,r16,-16
    8258:	42000204 	addi	r8,r8,8
    825c:	8c00130e 	bge	r17,r16,82ac <___vfprintf_internal_r+0xaa8>
    8260:	01000074 	movhi	r4,1
    8264:	18c00404 	addi	r3,r3,16
    8268:	10800044 	addi	r2,r2,1
    826c:	21152984 	addi	r4,r4,21670
    8270:	41000015 	stw	r4,0(r8)
    8274:	44400115 	stw	r17,4(r8)
    8278:	d8c02015 	stw	r3,128(sp)
    827c:	d8801f15 	stw	r2,124(sp)
    8280:	90bff40e 	bge	r18,r2,8254 <__alt_exception_stack_pointer+0xf8008254>
    8284:	d9801e04 	addi	r6,sp,120
    8288:	b80b883a 	mov	r5,r23
    828c:	9809883a 	mov	r4,r19
    8290:	000e63c0 	call	e63c <__sprint_r>
    8294:	103e5f1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8298:	843ffc04 	addi	r16,r16,-16
    829c:	d8c02017 	ldw	r3,128(sp)
    82a0:	d8801f17 	ldw	r2,124(sp)
    82a4:	da000404 	addi	r8,sp,16
    82a8:	8c3fed16 	blt	r17,r16,8260 <__alt_exception_stack_pointer+0xf8008260>
    82ac:	d9403517 	ldw	r5,212(sp)
    82b0:	1c07883a 	add	r3,r3,r16
    82b4:	10800044 	addi	r2,r2,1
    82b8:	41400015 	stw	r5,0(r8)
    82bc:	44000115 	stw	r16,4(r8)
    82c0:	d8c02015 	stw	r3,128(sp)
    82c4:	d8801f15 	stw	r2,124(sp)
    82c8:	010001c4 	movi	r4,7
    82cc:	2080060e 	bge	r4,r2,82e8 <___vfprintf_internal_r+0xae4>
    82d0:	d9002d17 	ldw	r4,180(sp)
    82d4:	d9801e04 	addi	r6,sp,120
    82d8:	b80b883a 	mov	r5,r23
    82dc:	000e63c0 	call	e63c <__sprint_r>
    82e0:	103e4c1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    82e4:	d8c02017 	ldw	r3,128(sp)
    82e8:	d8803117 	ldw	r2,196(sp)
    82ec:	d9002917 	ldw	r4,164(sp)
    82f0:	1100010e 	bge	r2,r4,82f8 <___vfprintf_internal_r+0xaf4>
    82f4:	2005883a 	mov	r2,r4
    82f8:	d9402f17 	ldw	r5,188(sp)
    82fc:	288b883a 	add	r5,r5,r2
    8300:	d9402f15 	stw	r5,188(sp)
    8304:	1801c01e 	bne	r3,zero,8a08 <___vfprintf_internal_r+0x1204>
    8308:	a8800007 	ldb	r2,0(r21)
    830c:	d8001f15 	stw	zero,124(sp)
    8310:	da000404 	addi	r8,sp,16
    8314:	103d751e 	bne	r2,zero,78ec <__alt_exception_stack_pointer+0xf80078ec>
    8318:	a823883a 	mov	r17,r21
    831c:	003d8b06 	br	794c <__alt_exception_stack_pointer+0xf800794c>
    8320:	8025883a 	mov	r18,r16
    8324:	dc002903 	ldbu	r16,164(sp)
    8328:	e011883a 	mov	r8,fp
    832c:	84003fcc 	andi	r16,r16,255
    8330:	8005e51e 	bne	r16,zero,9ac8 <___vfprintf_internal_r+0x22c4>
    8334:	94800414 	ori	r18,r18,16
    8338:	9080080c 	andi	r2,r18,32
    833c:	10022b26 	beq	r2,zero,8bec <___vfprintf_internal_r+0x13e8>
    8340:	d9002e17 	ldw	r4,184(sp)
    8344:	d9402a17 	ldw	r5,168(sp)
    8348:	d8002785 	stb	zero,158(sp)
    834c:	20c00204 	addi	r3,r4,8
    8350:	24c00017 	ldw	r19,0(r4)
    8354:	25800117 	ldw	r22,4(r4)
    8358:	28042e16 	blt	r5,zero,9414 <___vfprintf_internal_r+0x1c10>
    835c:	013fdfc4 	movi	r4,-129
    8360:	9d84b03a 	or	r2,r19,r22
    8364:	d8c02e15 	stw	r3,184(sp)
    8368:	9124703a 	and	r18,r18,r4
    836c:	0039883a 	mov	fp,zero
    8370:	103e801e 	bne	r2,zero,7d74 <__alt_exception_stack_pointer+0xf8007d74>
    8374:	d9002a17 	ldw	r4,168(sp)
    8378:	2002e01e 	bne	r4,zero,8efc <___vfprintf_internal_r+0x16f8>
    837c:	d8002a15 	stw	zero,168(sp)
    8380:	d8002b15 	stw	zero,172(sp)
    8384:	dc001e04 	addi	r16,sp,120
    8388:	003ef506 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    838c:	8025883a 	mov	r18,r16
    8390:	dc002903 	ldbu	r16,164(sp)
    8394:	e011883a 	mov	r8,fp
    8398:	84003fcc 	andi	r16,r16,255
    839c:	8005ba1e 	bne	r16,zero,9a88 <___vfprintf_internal_r+0x2284>
    83a0:	01000074 	movhi	r4,1
    83a4:	21151904 	addi	r4,r4,21604
    83a8:	d9003915 	stw	r4,228(sp)
    83ac:	9080080c 	andi	r2,r18,32
    83b0:	10006126 	beq	r2,zero,8538 <___vfprintf_internal_r+0xd34>
    83b4:	d9402e17 	ldw	r5,184(sp)
    83b8:	2cc00017 	ldw	r19,0(r5)
    83bc:	2d800117 	ldw	r22,4(r5)
    83c0:	29400204 	addi	r5,r5,8
    83c4:	d9402e15 	stw	r5,184(sp)
    83c8:	9080004c 	andi	r2,r18,1
    83cc:	1001ac26 	beq	r2,zero,8a80 <___vfprintf_internal_r+0x127c>
    83d0:	9d84b03a 	or	r2,r19,r22
    83d4:	10038526 	beq	r2,zero,91ec <___vfprintf_internal_r+0x19e8>
    83d8:	d8c02a17 	ldw	r3,168(sp)
    83dc:	00800c04 	movi	r2,48
    83e0:	d8802705 	stb	r2,156(sp)
    83e4:	dc402745 	stb	r17,157(sp)
    83e8:	d8002785 	stb	zero,158(sp)
    83ec:	90800094 	ori	r2,r18,2
    83f0:	18047916 	blt	r3,zero,95d8 <___vfprintf_internal_r+0x1dd4>
    83f4:	00bfdfc4 	movi	r2,-129
    83f8:	90a4703a 	and	r18,r18,r2
    83fc:	94800094 	ori	r18,r18,2
    8400:	0039883a 	mov	fp,zero
    8404:	d9003917 	ldw	r4,228(sp)
    8408:	dc001e04 	addi	r16,sp,120
    840c:	988003cc 	andi	r2,r19,15
    8410:	b006973a 	slli	r3,r22,28
    8414:	2085883a 	add	r2,r4,r2
    8418:	9826d13a 	srli	r19,r19,4
    841c:	10800003 	ldbu	r2,0(r2)
    8420:	b02cd13a 	srli	r22,r22,4
    8424:	843fffc4 	addi	r16,r16,-1
    8428:	1ce6b03a 	or	r19,r3,r19
    842c:	80800005 	stb	r2,0(r16)
    8430:	9d84b03a 	or	r2,r19,r22
    8434:	103ff51e 	bne	r2,zero,840c <__alt_exception_stack_pointer+0xf800840c>
    8438:	d8c02817 	ldw	r3,160(sp)
    843c:	1c07c83a 	sub	r3,r3,r16
    8440:	d8c02b15 	stw	r3,172(sp)
    8444:	003ec606 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    8448:	8025883a 	mov	r18,r16
    844c:	dc002903 	ldbu	r16,164(sp)
    8450:	e011883a 	mov	r8,fp
    8454:	84003fcc 	andi	r16,r16,255
    8458:	803e9626 	beq	r16,zero,7eb4 <__alt_exception_stack_pointer+0xf8007eb4>
    845c:	d8c02b03 	ldbu	r3,172(sp)
    8460:	d8c02785 	stb	r3,158(sp)
    8464:	003e9306 	br	7eb4 <__alt_exception_stack_pointer+0xf8007eb4>
    8468:	00c00044 	movi	r3,1
    846c:	d8c02905 	stb	r3,164(sp)
    8470:	00c00ac4 	movi	r3,43
    8474:	d8c02b05 	stb	r3,172(sp)
    8478:	ac400007 	ldb	r17,0(r21)
    847c:	003d4306 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    8480:	84000814 	ori	r16,r16,32
    8484:	ac400007 	ldb	r17,0(r21)
    8488:	003d4006 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    848c:	d8802e17 	ldw	r2,184(sp)
    8490:	8025883a 	mov	r18,r16
    8494:	d8002785 	stb	zero,158(sp)
    8498:	14000017 	ldw	r16,0(r2)
    849c:	e011883a 	mov	r8,fp
    84a0:	14c00104 	addi	r19,r2,4
    84a4:	80042d26 	beq	r16,zero,955c <___vfprintf_internal_r+0x1d58>
    84a8:	d8c02a17 	ldw	r3,168(sp)
    84ac:	1803e416 	blt	r3,zero,9440 <___vfprintf_internal_r+0x1c3c>
    84b0:	180d883a 	mov	r6,r3
    84b4:	000b883a 	mov	r5,zero
    84b8:	8009883a 	mov	r4,r16
    84bc:	df003d15 	stw	fp,244(sp)
    84c0:	000c9300 	call	c930 <memchr>
    84c4:	da003d17 	ldw	r8,244(sp)
    84c8:	10046826 	beq	r2,zero,966c <___vfprintf_internal_r+0x1e68>
    84cc:	1405c83a 	sub	r2,r2,r16
    84d0:	d8802b15 	stw	r2,172(sp)
    84d4:	1003e016 	blt	r2,zero,9458 <___vfprintf_internal_r+0x1c54>
    84d8:	df002783 	ldbu	fp,158(sp)
    84dc:	d8802915 	stw	r2,164(sp)
    84e0:	dcc02e15 	stw	r19,184(sp)
    84e4:	d8002a15 	stw	zero,168(sp)
    84e8:	d8003215 	stw	zero,200(sp)
    84ec:	003ea206 	br	7f78 <__alt_exception_stack_pointer+0xf8007f78>
    84f0:	8025883a 	mov	r18,r16
    84f4:	dc002903 	ldbu	r16,164(sp)
    84f8:	e011883a 	mov	r8,fp
    84fc:	84003fcc 	andi	r16,r16,255
    8500:	803f8d26 	beq	r16,zero,8338 <__alt_exception_stack_pointer+0xf8008338>
    8504:	d8c02b03 	ldbu	r3,172(sp)
    8508:	d8c02785 	stb	r3,158(sp)
    850c:	003f8a06 	br	8338 <__alt_exception_stack_pointer+0xf8008338>
    8510:	8025883a 	mov	r18,r16
    8514:	dc002903 	ldbu	r16,164(sp)
    8518:	e011883a 	mov	r8,fp
    851c:	84003fcc 	andi	r16,r16,255
    8520:	8005661e 	bne	r16,zero,9abc <___vfprintf_internal_r+0x22b8>
    8524:	01000074 	movhi	r4,1
    8528:	21151e04 	addi	r4,r4,21624
    852c:	d9003915 	stw	r4,228(sp)
    8530:	9080080c 	andi	r2,r18,32
    8534:	103f9f1e 	bne	r2,zero,83b4 <__alt_exception_stack_pointer+0xf80083b4>
    8538:	9080040c 	andi	r2,r18,16
    853c:	1002eb26 	beq	r2,zero,90ec <___vfprintf_internal_r+0x18e8>
    8540:	d8802e17 	ldw	r2,184(sp)
    8544:	002d883a 	mov	r22,zero
    8548:	14c00017 	ldw	r19,0(r2)
    854c:	10800104 	addi	r2,r2,4
    8550:	d8802e15 	stw	r2,184(sp)
    8554:	003f9c06 	br	83c8 <__alt_exception_stack_pointer+0xf80083c8>
    8558:	d8802b07 	ldb	r2,172(sp)
    855c:	1002e11e 	bne	r2,zero,90e4 <___vfprintf_internal_r+0x18e0>
    8560:	00c00044 	movi	r3,1
    8564:	d8c02905 	stb	r3,164(sp)
    8568:	00c00804 	movi	r3,32
    856c:	d8c02b05 	stb	r3,172(sp)
    8570:	ac400007 	ldb	r17,0(r21)
    8574:	003d0506 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    8578:	84000054 	ori	r16,r16,1
    857c:	ac400007 	ldb	r17,0(r21)
    8580:	003d0206 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    8584:	8025883a 	mov	r18,r16
    8588:	dc002903 	ldbu	r16,164(sp)
    858c:	e011883a 	mov	r8,fp
    8590:	84003fcc 	andi	r16,r16,255
    8594:	803de726 	beq	r16,zero,7d34 <__alt_exception_stack_pointer+0xf8007d34>
    8598:	d8c02b03 	ldbu	r3,172(sp)
    859c:	d8c02785 	stb	r3,158(sp)
    85a0:	003de406 	br	7d34 <__alt_exception_stack_pointer+0xf8007d34>
    85a4:	84001014 	ori	r16,r16,64
    85a8:	ac400007 	ldb	r17,0(r21)
    85ac:	003cf706 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    85b0:	ac400007 	ldb	r17,0(r21)
    85b4:	00801b04 	movi	r2,108
    85b8:	88838f26 	beq	r17,r2,93f8 <___vfprintf_internal_r+0x1bf4>
    85bc:	84000414 	ori	r16,r16,16
    85c0:	003cf206 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    85c4:	8025883a 	mov	r18,r16
    85c8:	dc002903 	ldbu	r16,164(sp)
    85cc:	e011883a 	mov	r8,fp
    85d0:	84003fcc 	andi	r16,r16,255
    85d4:	80053f1e 	bne	r16,zero,9ad4 <___vfprintf_internal_r+0x22d0>
    85d8:	9080080c 	andi	r2,r18,32
    85dc:	1002d226 	beq	r2,zero,9128 <___vfprintf_internal_r+0x1924>
    85e0:	d9002e17 	ldw	r4,184(sp)
    85e4:	d9402f17 	ldw	r5,188(sp)
    85e8:	20800017 	ldw	r2,0(r4)
    85ec:	2807d7fa 	srai	r3,r5,31
    85f0:	21000104 	addi	r4,r4,4
    85f4:	d9002e15 	stw	r4,184(sp)
    85f8:	11400015 	stw	r5,0(r2)
    85fc:	10c00115 	stw	r3,4(r2)
    8600:	003cb806 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    8604:	d8c02e17 	ldw	r3,184(sp)
    8608:	d9002e17 	ldw	r4,184(sp)
    860c:	8025883a 	mov	r18,r16
    8610:	18800017 	ldw	r2,0(r3)
    8614:	21000104 	addi	r4,r4,4
    8618:	00c00044 	movi	r3,1
    861c:	e011883a 	mov	r8,fp
    8620:	d8c02915 	stw	r3,164(sp)
    8624:	d8002785 	stb	zero,158(sp)
    8628:	d8801405 	stb	r2,80(sp)
    862c:	d9002e15 	stw	r4,184(sp)
    8630:	d8c02b15 	stw	r3,172(sp)
    8634:	d8002a15 	stw	zero,168(sp)
    8638:	d8003215 	stw	zero,200(sp)
    863c:	dc001404 	addi	r16,sp,80
    8640:	0039883a 	mov	fp,zero
    8644:	003e5306 	br	7f94 <__alt_exception_stack_pointer+0xf8007f94>
    8648:	01000074 	movhi	r4,1
    864c:	21151e04 	addi	r4,r4,21624
    8650:	0039883a 	mov	fp,zero
    8654:	d9003915 	stw	r4,228(sp)
    8658:	04401e04 	movi	r17,120
    865c:	003f6906 	br	8404 <__alt_exception_stack_pointer+0xf8008404>
    8660:	8025883a 	mov	r18,r16
    8664:	dc002903 	ldbu	r16,164(sp)
    8668:	e011883a 	mov	r8,fp
    866c:	84003fcc 	andi	r16,r16,255
    8670:	8005081e 	bne	r16,zero,9a94 <___vfprintf_internal_r+0x2290>
    8674:	883d6126 	beq	r17,zero,7bfc <__alt_exception_stack_pointer+0xf8007bfc>
    8678:	00c00044 	movi	r3,1
    867c:	d8c02915 	stw	r3,164(sp)
    8680:	dc401405 	stb	r17,80(sp)
    8684:	d8002785 	stb	zero,158(sp)
    8688:	003fe906 	br	8630 <__alt_exception_stack_pointer+0xf8008630>
    868c:	01400074 	movhi	r5,1
    8690:	29551e04 	addi	r5,r5,21624
    8694:	d9403915 	stw	r5,228(sp)
    8698:	d8c02e15 	stw	r3,184(sp)
    869c:	1025883a 	mov	r18,r2
    86a0:	04401e04 	movi	r17,120
    86a4:	9d84b03a 	or	r2,r19,r22
    86a8:	1000fc1e 	bne	r2,zero,8a9c <___vfprintf_internal_r+0x1298>
    86ac:	0039883a 	mov	fp,zero
    86b0:	00800084 	movi	r2,2
    86b4:	10803fcc 	andi	r2,r2,255
    86b8:	00c00044 	movi	r3,1
    86bc:	10c20f26 	beq	r2,r3,8efc <___vfprintf_internal_r+0x16f8>
    86c0:	00c00084 	movi	r3,2
    86c4:	10fd3326 	beq	r2,r3,7b94 <__alt_exception_stack_pointer+0xf8007b94>
    86c8:	003e0b06 	br	7ef8 <__alt_exception_stack_pointer+0xf8007ef8>
    86cc:	d8c02017 	ldw	r3,128(sp)
    86d0:	003e7106 	br	8098 <__alt_exception_stack_pointer+0xf8008098>
    86d4:	00801944 	movi	r2,101
    86d8:	14407e0e 	bge	r2,r17,88d4 <___vfprintf_internal_r+0x10d0>
    86dc:	d9003617 	ldw	r4,216(sp)
    86e0:	d9403817 	ldw	r5,224(sp)
    86e4:	000d883a 	mov	r6,zero
    86e8:	000f883a 	mov	r7,zero
    86ec:	d8c03c15 	stw	r3,240(sp)
    86f0:	da003d15 	stw	r8,244(sp)
    86f4:	000577c0 	call	577c <__eqdf2>
    86f8:	d8c03c17 	ldw	r3,240(sp)
    86fc:	da003d17 	ldw	r8,244(sp)
    8700:	1000f71e 	bne	r2,zero,8ae0 <___vfprintf_internal_r+0x12dc>
    8704:	d8801f17 	ldw	r2,124(sp)
    8708:	01000074 	movhi	r4,1
    870c:	21152504 	addi	r4,r4,21652
    8710:	18c00044 	addi	r3,r3,1
    8714:	10800044 	addi	r2,r2,1
    8718:	41000015 	stw	r4,0(r8)
    871c:	01000044 	movi	r4,1
    8720:	41000115 	stw	r4,4(r8)
    8724:	d8c02015 	stw	r3,128(sp)
    8728:	d8801f15 	stw	r2,124(sp)
    872c:	010001c4 	movi	r4,7
    8730:	2082b816 	blt	r4,r2,9214 <___vfprintf_internal_r+0x1a10>
    8734:	42000204 	addi	r8,r8,8
    8738:	d8802617 	ldw	r2,152(sp)
    873c:	d9403317 	ldw	r5,204(sp)
    8740:	11400216 	blt	r2,r5,874c <___vfprintf_internal_r+0xf48>
    8744:	9080004c 	andi	r2,r18,1
    8748:	103eb326 	beq	r2,zero,8218 <__alt_exception_stack_pointer+0xf8008218>
    874c:	d8803717 	ldw	r2,220(sp)
    8750:	d9003417 	ldw	r4,208(sp)
    8754:	d9403717 	ldw	r5,220(sp)
    8758:	1887883a 	add	r3,r3,r2
    875c:	d8801f17 	ldw	r2,124(sp)
    8760:	41000015 	stw	r4,0(r8)
    8764:	41400115 	stw	r5,4(r8)
    8768:	10800044 	addi	r2,r2,1
    876c:	d8c02015 	stw	r3,128(sp)
    8770:	d8801f15 	stw	r2,124(sp)
    8774:	010001c4 	movi	r4,7
    8778:	20832916 	blt	r4,r2,9420 <___vfprintf_internal_r+0x1c1c>
    877c:	42000204 	addi	r8,r8,8
    8780:	d8803317 	ldw	r2,204(sp)
    8784:	143fffc4 	addi	r16,r2,-1
    8788:	043ea30e 	bge	zero,r16,8218 <__alt_exception_stack_pointer+0xf8008218>
    878c:	04400404 	movi	r17,16
    8790:	d8801f17 	ldw	r2,124(sp)
    8794:	8c00880e 	bge	r17,r16,89b8 <___vfprintf_internal_r+0x11b4>
    8798:	01400074 	movhi	r5,1
    879c:	29552584 	addi	r5,r5,21654
    87a0:	d9402c15 	stw	r5,176(sp)
    87a4:	058001c4 	movi	r22,7
    87a8:	dcc02d17 	ldw	r19,180(sp)
    87ac:	00000306 	br	87bc <___vfprintf_internal_r+0xfb8>
    87b0:	42000204 	addi	r8,r8,8
    87b4:	843ffc04 	addi	r16,r16,-16
    87b8:	8c00820e 	bge	r17,r16,89c4 <___vfprintf_internal_r+0x11c0>
    87bc:	18c00404 	addi	r3,r3,16
    87c0:	10800044 	addi	r2,r2,1
    87c4:	45000015 	stw	r20,0(r8)
    87c8:	44400115 	stw	r17,4(r8)
    87cc:	d8c02015 	stw	r3,128(sp)
    87d0:	d8801f15 	stw	r2,124(sp)
    87d4:	b0bff60e 	bge	r22,r2,87b0 <__alt_exception_stack_pointer+0xf80087b0>
    87d8:	d9801e04 	addi	r6,sp,120
    87dc:	b80b883a 	mov	r5,r23
    87e0:	9809883a 	mov	r4,r19
    87e4:	000e63c0 	call	e63c <__sprint_r>
    87e8:	103d0a1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    87ec:	d8c02017 	ldw	r3,128(sp)
    87f0:	d8801f17 	ldw	r2,124(sp)
    87f4:	da000404 	addi	r8,sp,16
    87f8:	003fee06 	br	87b4 <__alt_exception_stack_pointer+0xf80087b4>
    87fc:	d9403117 	ldw	r5,196(sp)
    8800:	d8802917 	ldw	r2,164(sp)
    8804:	28adc83a 	sub	r22,r5,r2
    8808:	05be410e 	bge	zero,r22,8110 <__alt_exception_stack_pointer+0xf8008110>
    880c:	07000404 	movi	fp,16
    8810:	d8801f17 	ldw	r2,124(sp)
    8814:	e5838f0e 	bge	fp,r22,9654 <___vfprintf_internal_r+0x1e50>
    8818:	01400074 	movhi	r5,1
    881c:	29552584 	addi	r5,r5,21654
    8820:	dc403015 	stw	r17,192(sp)
    8824:	d9402c15 	stw	r5,176(sp)
    8828:	b023883a 	mov	r17,r22
    882c:	04c001c4 	movi	r19,7
    8830:	a82d883a 	mov	r22,r21
    8834:	902b883a 	mov	r21,r18
    8838:	8025883a 	mov	r18,r16
    883c:	dc002d17 	ldw	r16,180(sp)
    8840:	00000306 	br	8850 <___vfprintf_internal_r+0x104c>
    8844:	8c7ffc04 	addi	r17,r17,-16
    8848:	42000204 	addi	r8,r8,8
    884c:	e440110e 	bge	fp,r17,8894 <___vfprintf_internal_r+0x1090>
    8850:	18c00404 	addi	r3,r3,16
    8854:	10800044 	addi	r2,r2,1
    8858:	45000015 	stw	r20,0(r8)
    885c:	47000115 	stw	fp,4(r8)
    8860:	d8c02015 	stw	r3,128(sp)
    8864:	d8801f15 	stw	r2,124(sp)
    8868:	98bff60e 	bge	r19,r2,8844 <__alt_exception_stack_pointer+0xf8008844>
    886c:	d9801e04 	addi	r6,sp,120
    8870:	b80b883a 	mov	r5,r23
    8874:	8009883a 	mov	r4,r16
    8878:	000e63c0 	call	e63c <__sprint_r>
    887c:	103ce51e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8880:	8c7ffc04 	addi	r17,r17,-16
    8884:	d8c02017 	ldw	r3,128(sp)
    8888:	d8801f17 	ldw	r2,124(sp)
    888c:	da000404 	addi	r8,sp,16
    8890:	e47fef16 	blt	fp,r17,8850 <__alt_exception_stack_pointer+0xf8008850>
    8894:	9021883a 	mov	r16,r18
    8898:	a825883a 	mov	r18,r21
    889c:	b02b883a 	mov	r21,r22
    88a0:	882d883a 	mov	r22,r17
    88a4:	dc403017 	ldw	r17,192(sp)
    88a8:	d9002c17 	ldw	r4,176(sp)
    88ac:	1d87883a 	add	r3,r3,r22
    88b0:	10800044 	addi	r2,r2,1
    88b4:	41000015 	stw	r4,0(r8)
    88b8:	45800115 	stw	r22,4(r8)
    88bc:	d8c02015 	stw	r3,128(sp)
    88c0:	d8801f15 	stw	r2,124(sp)
    88c4:	010001c4 	movi	r4,7
    88c8:	20818e16 	blt	r4,r2,8f04 <___vfprintf_internal_r+0x1700>
    88cc:	42000204 	addi	r8,r8,8
    88d0:	003e0f06 	br	8110 <__alt_exception_stack_pointer+0xf8008110>
    88d4:	d9403317 	ldw	r5,204(sp)
    88d8:	00800044 	movi	r2,1
    88dc:	18c00044 	addi	r3,r3,1
    88e0:	1141530e 	bge	r2,r5,8e30 <___vfprintf_internal_r+0x162c>
    88e4:	dc401f17 	ldw	r17,124(sp)
    88e8:	00800044 	movi	r2,1
    88ec:	40800115 	stw	r2,4(r8)
    88f0:	8c400044 	addi	r17,r17,1
    88f4:	44000015 	stw	r16,0(r8)
    88f8:	d8c02015 	stw	r3,128(sp)
    88fc:	dc401f15 	stw	r17,124(sp)
    8900:	008001c4 	movi	r2,7
    8904:	14416b16 	blt	r2,r17,8eb4 <___vfprintf_internal_r+0x16b0>
    8908:	42000204 	addi	r8,r8,8
    890c:	d8803717 	ldw	r2,220(sp)
    8910:	d9003417 	ldw	r4,208(sp)
    8914:	8c400044 	addi	r17,r17,1
    8918:	10c7883a 	add	r3,r2,r3
    891c:	40800115 	stw	r2,4(r8)
    8920:	41000015 	stw	r4,0(r8)
    8924:	d8c02015 	stw	r3,128(sp)
    8928:	dc401f15 	stw	r17,124(sp)
    892c:	008001c4 	movi	r2,7
    8930:	14416916 	blt	r2,r17,8ed8 <___vfprintf_internal_r+0x16d4>
    8934:	45800204 	addi	r22,r8,8
    8938:	d9003617 	ldw	r4,216(sp)
    893c:	d9403817 	ldw	r5,224(sp)
    8940:	000d883a 	mov	r6,zero
    8944:	000f883a 	mov	r7,zero
    8948:	d8c03c15 	stw	r3,240(sp)
    894c:	000577c0 	call	577c <__eqdf2>
    8950:	d8c03c17 	ldw	r3,240(sp)
    8954:	1000bc26 	beq	r2,zero,8c48 <___vfprintf_internal_r+0x1444>
    8958:	d9403317 	ldw	r5,204(sp)
    895c:	84000044 	addi	r16,r16,1
    8960:	8c400044 	addi	r17,r17,1
    8964:	28bfffc4 	addi	r2,r5,-1
    8968:	1887883a 	add	r3,r3,r2
    896c:	b0800115 	stw	r2,4(r22)
    8970:	b4000015 	stw	r16,0(r22)
    8974:	d8c02015 	stw	r3,128(sp)
    8978:	dc401f15 	stw	r17,124(sp)
    897c:	008001c4 	movi	r2,7
    8980:	14414316 	blt	r2,r17,8e90 <___vfprintf_internal_r+0x168c>
    8984:	b5800204 	addi	r22,r22,8
    8988:	d9003a17 	ldw	r4,232(sp)
    898c:	df0022c4 	addi	fp,sp,139
    8990:	8c400044 	addi	r17,r17,1
    8994:	20c7883a 	add	r3,r4,r3
    8998:	b7000015 	stw	fp,0(r22)
    899c:	b1000115 	stw	r4,4(r22)
    89a0:	d8c02015 	stw	r3,128(sp)
    89a4:	dc401f15 	stw	r17,124(sp)
    89a8:	008001c4 	movi	r2,7
    89ac:	14400e16 	blt	r2,r17,89e8 <___vfprintf_internal_r+0x11e4>
    89b0:	b2000204 	addi	r8,r22,8
    89b4:	003e1806 	br	8218 <__alt_exception_stack_pointer+0xf8008218>
    89b8:	01000074 	movhi	r4,1
    89bc:	21152584 	addi	r4,r4,21654
    89c0:	d9002c15 	stw	r4,176(sp)
    89c4:	d9002c17 	ldw	r4,176(sp)
    89c8:	1c07883a 	add	r3,r3,r16
    89cc:	44000115 	stw	r16,4(r8)
    89d0:	41000015 	stw	r4,0(r8)
    89d4:	10800044 	addi	r2,r2,1
    89d8:	d8c02015 	stw	r3,128(sp)
    89dc:	d8801f15 	stw	r2,124(sp)
    89e0:	010001c4 	movi	r4,7
    89e4:	20be0b0e 	bge	r4,r2,8214 <__alt_exception_stack_pointer+0xf8008214>
    89e8:	d9002d17 	ldw	r4,180(sp)
    89ec:	d9801e04 	addi	r6,sp,120
    89f0:	b80b883a 	mov	r5,r23
    89f4:	000e63c0 	call	e63c <__sprint_r>
    89f8:	103c861e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    89fc:	d8c02017 	ldw	r3,128(sp)
    8a00:	da000404 	addi	r8,sp,16
    8a04:	003e0406 	br	8218 <__alt_exception_stack_pointer+0xf8008218>
    8a08:	d9002d17 	ldw	r4,180(sp)
    8a0c:	d9801e04 	addi	r6,sp,120
    8a10:	b80b883a 	mov	r5,r23
    8a14:	000e63c0 	call	e63c <__sprint_r>
    8a18:	103e3b26 	beq	r2,zero,8308 <__alt_exception_stack_pointer+0xf8008308>
    8a1c:	003c7d06 	br	7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8a20:	d9002d17 	ldw	r4,180(sp)
    8a24:	d9801e04 	addi	r6,sp,120
    8a28:	b80b883a 	mov	r5,r23
    8a2c:	000e63c0 	call	e63c <__sprint_r>
    8a30:	103c781e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8a34:	d8c02017 	ldw	r3,128(sp)
    8a38:	da000404 	addi	r8,sp,16
    8a3c:	003de906 	br	81e4 <__alt_exception_stack_pointer+0xf80081e4>
    8a40:	d9002d17 	ldw	r4,180(sp)
    8a44:	d9801e04 	addi	r6,sp,120
    8a48:	b80b883a 	mov	r5,r23
    8a4c:	000e63c0 	call	e63c <__sprint_r>
    8a50:	103c701e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8a54:	d8c02017 	ldw	r3,128(sp)
    8a58:	da000404 	addi	r8,sp,16
    8a5c:	003d9b06 	br	80cc <__alt_exception_stack_pointer+0xf80080cc>
    8a60:	d9002d17 	ldw	r4,180(sp)
    8a64:	d9801e04 	addi	r6,sp,120
    8a68:	b80b883a 	mov	r5,r23
    8a6c:	000e63c0 	call	e63c <__sprint_r>
    8a70:	103c681e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8a74:	d8c02017 	ldw	r3,128(sp)
    8a78:	da000404 	addi	r8,sp,16
    8a7c:	003da106 	br	8104 <__alt_exception_stack_pointer+0xf8008104>
    8a80:	d9402a17 	ldw	r5,168(sp)
    8a84:	d8002785 	stb	zero,158(sp)
    8a88:	283f0616 	blt	r5,zero,86a4 <__alt_exception_stack_pointer+0xf80086a4>
    8a8c:	00ffdfc4 	movi	r3,-129
    8a90:	9d84b03a 	or	r2,r19,r22
    8a94:	90e4703a 	and	r18,r18,r3
    8a98:	103c3b26 	beq	r2,zero,7b88 <__alt_exception_stack_pointer+0xf8007b88>
    8a9c:	0039883a 	mov	fp,zero
    8aa0:	003e5806 	br	8404 <__alt_exception_stack_pointer+0xf8008404>
    8aa4:	9080040c 	andi	r2,r18,16
    8aa8:	1001b326 	beq	r2,zero,9178 <___vfprintf_internal_r+0x1974>
    8aac:	d8c02e17 	ldw	r3,184(sp)
    8ab0:	d9002a17 	ldw	r4,168(sp)
    8ab4:	d8002785 	stb	zero,158(sp)
    8ab8:	18800104 	addi	r2,r3,4
    8abc:	1cc00017 	ldw	r19,0(r3)
    8ac0:	002d883a 	mov	r22,zero
    8ac4:	2001b516 	blt	r4,zero,919c <___vfprintf_internal_r+0x1998>
    8ac8:	00ffdfc4 	movi	r3,-129
    8acc:	d8802e15 	stw	r2,184(sp)
    8ad0:	90e4703a 	and	r18,r18,r3
    8ad4:	983d0526 	beq	r19,zero,7eec <__alt_exception_stack_pointer+0xf8007eec>
    8ad8:	0039883a 	mov	fp,zero
    8adc:	003d0806 	br	7f00 <__alt_exception_stack_pointer+0xf8007f00>
    8ae0:	dc402617 	ldw	r17,152(sp)
    8ae4:	0441d30e 	bge	zero,r17,9234 <___vfprintf_internal_r+0x1a30>
    8ae8:	dc403217 	ldw	r17,200(sp)
    8aec:	d8803317 	ldw	r2,204(sp)
    8af0:	1440010e 	bge	r2,r17,8af8 <___vfprintf_internal_r+0x12f4>
    8af4:	1023883a 	mov	r17,r2
    8af8:	04400a0e 	bge	zero,r17,8b24 <___vfprintf_internal_r+0x1320>
    8afc:	d8801f17 	ldw	r2,124(sp)
    8b00:	1c47883a 	add	r3,r3,r17
    8b04:	44000015 	stw	r16,0(r8)
    8b08:	10800044 	addi	r2,r2,1
    8b0c:	44400115 	stw	r17,4(r8)
    8b10:	d8c02015 	stw	r3,128(sp)
    8b14:	d8801f15 	stw	r2,124(sp)
    8b18:	010001c4 	movi	r4,7
    8b1c:	20826516 	blt	r4,r2,94b4 <___vfprintf_internal_r+0x1cb0>
    8b20:	42000204 	addi	r8,r8,8
    8b24:	88026116 	blt	r17,zero,94ac <___vfprintf_internal_r+0x1ca8>
    8b28:	d9003217 	ldw	r4,200(sp)
    8b2c:	2463c83a 	sub	r17,r4,r17
    8b30:	04407b0e 	bge	zero,r17,8d20 <___vfprintf_internal_r+0x151c>
    8b34:	05800404 	movi	r22,16
    8b38:	d8801f17 	ldw	r2,124(sp)
    8b3c:	b4419d0e 	bge	r22,r17,91b4 <___vfprintf_internal_r+0x19b0>
    8b40:	01000074 	movhi	r4,1
    8b44:	21152584 	addi	r4,r4,21654
    8b48:	d9002c15 	stw	r4,176(sp)
    8b4c:	070001c4 	movi	fp,7
    8b50:	dcc02d17 	ldw	r19,180(sp)
    8b54:	00000306 	br	8b64 <___vfprintf_internal_r+0x1360>
    8b58:	42000204 	addi	r8,r8,8
    8b5c:	8c7ffc04 	addi	r17,r17,-16
    8b60:	b441970e 	bge	r22,r17,91c0 <___vfprintf_internal_r+0x19bc>
    8b64:	18c00404 	addi	r3,r3,16
    8b68:	10800044 	addi	r2,r2,1
    8b6c:	45000015 	stw	r20,0(r8)
    8b70:	45800115 	stw	r22,4(r8)
    8b74:	d8c02015 	stw	r3,128(sp)
    8b78:	d8801f15 	stw	r2,124(sp)
    8b7c:	e0bff60e 	bge	fp,r2,8b58 <__alt_exception_stack_pointer+0xf8008b58>
    8b80:	d9801e04 	addi	r6,sp,120
    8b84:	b80b883a 	mov	r5,r23
    8b88:	9809883a 	mov	r4,r19
    8b8c:	000e63c0 	call	e63c <__sprint_r>
    8b90:	103c201e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8b94:	d8c02017 	ldw	r3,128(sp)
    8b98:	d8801f17 	ldw	r2,124(sp)
    8b9c:	da000404 	addi	r8,sp,16
    8ba0:	003fee06 	br	8b5c <__alt_exception_stack_pointer+0xf8008b5c>
    8ba4:	d9002d17 	ldw	r4,180(sp)
    8ba8:	d9801e04 	addi	r6,sp,120
    8bac:	b80b883a 	mov	r5,r23
    8bb0:	000e63c0 	call	e63c <__sprint_r>
    8bb4:	103c171e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8bb8:	d8c02017 	ldw	r3,128(sp)
    8bbc:	df002787 	ldb	fp,158(sp)
    8bc0:	da000404 	addi	r8,sp,16
    8bc4:	003d3406 	br	8098 <__alt_exception_stack_pointer+0xf8008098>
    8bc8:	9080040c 	andi	r2,r18,16
    8bcc:	10016126 	beq	r2,zero,9154 <___vfprintf_internal_r+0x1950>
    8bd0:	d9402e17 	ldw	r5,184(sp)
    8bd4:	2cc00017 	ldw	r19,0(r5)
    8bd8:	29400104 	addi	r5,r5,4
    8bdc:	d9402e15 	stw	r5,184(sp)
    8be0:	982dd7fa 	srai	r22,r19,31
    8be4:	b005883a 	mov	r2,r22
    8be8:	003c5a06 	br	7d54 <__alt_exception_stack_pointer+0xf8007d54>
    8bec:	9080040c 	andi	r2,r18,16
    8bf0:	10003526 	beq	r2,zero,8cc8 <___vfprintf_internal_r+0x14c4>
    8bf4:	d8c02e17 	ldw	r3,184(sp)
    8bf8:	d9002a17 	ldw	r4,168(sp)
    8bfc:	d8002785 	stb	zero,158(sp)
    8c00:	18800104 	addi	r2,r3,4
    8c04:	1cc00017 	ldw	r19,0(r3)
    8c08:	002d883a 	mov	r22,zero
    8c0c:	20003716 	blt	r4,zero,8cec <___vfprintf_internal_r+0x14e8>
    8c10:	00ffdfc4 	movi	r3,-129
    8c14:	d8802e15 	stw	r2,184(sp)
    8c18:	90e4703a 	and	r18,r18,r3
    8c1c:	0039883a 	mov	fp,zero
    8c20:	983dd426 	beq	r19,zero,8374 <__alt_exception_stack_pointer+0xf8008374>
    8c24:	00800244 	movi	r2,9
    8c28:	14fc5336 	bltu	r2,r19,7d78 <__alt_exception_stack_pointer+0xf8007d78>
    8c2c:	d8c02817 	ldw	r3,160(sp)
    8c30:	dc001dc4 	addi	r16,sp,119
    8c34:	9cc00c04 	addi	r19,r19,48
    8c38:	1c07c83a 	sub	r3,r3,r16
    8c3c:	dcc01dc5 	stb	r19,119(sp)
    8c40:	d8c02b15 	stw	r3,172(sp)
    8c44:	003cc606 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    8c48:	d8803317 	ldw	r2,204(sp)
    8c4c:	143fffc4 	addi	r16,r2,-1
    8c50:	043f4d0e 	bge	zero,r16,8988 <__alt_exception_stack_pointer+0xf8008988>
    8c54:	07000404 	movi	fp,16
    8c58:	e400810e 	bge	fp,r16,8e60 <___vfprintf_internal_r+0x165c>
    8c5c:	01400074 	movhi	r5,1
    8c60:	29552584 	addi	r5,r5,21654
    8c64:	d9402c15 	stw	r5,176(sp)
    8c68:	01c001c4 	movi	r7,7
    8c6c:	dcc02d17 	ldw	r19,180(sp)
    8c70:	00000306 	br	8c80 <___vfprintf_internal_r+0x147c>
    8c74:	b5800204 	addi	r22,r22,8
    8c78:	843ffc04 	addi	r16,r16,-16
    8c7c:	e4007b0e 	bge	fp,r16,8e6c <___vfprintf_internal_r+0x1668>
    8c80:	18c00404 	addi	r3,r3,16
    8c84:	8c400044 	addi	r17,r17,1
    8c88:	b5000015 	stw	r20,0(r22)
    8c8c:	b7000115 	stw	fp,4(r22)
    8c90:	d8c02015 	stw	r3,128(sp)
    8c94:	dc401f15 	stw	r17,124(sp)
    8c98:	3c7ff60e 	bge	r7,r17,8c74 <__alt_exception_stack_pointer+0xf8008c74>
    8c9c:	d9801e04 	addi	r6,sp,120
    8ca0:	b80b883a 	mov	r5,r23
    8ca4:	9809883a 	mov	r4,r19
    8ca8:	d9c03c15 	stw	r7,240(sp)
    8cac:	000e63c0 	call	e63c <__sprint_r>
    8cb0:	d9c03c17 	ldw	r7,240(sp)
    8cb4:	103bd71e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8cb8:	d8c02017 	ldw	r3,128(sp)
    8cbc:	dc401f17 	ldw	r17,124(sp)
    8cc0:	dd800404 	addi	r22,sp,16
    8cc4:	003fec06 	br	8c78 <__alt_exception_stack_pointer+0xf8008c78>
    8cc8:	9080100c 	andi	r2,r18,64
    8ccc:	d8002785 	stb	zero,158(sp)
    8cd0:	10010e26 	beq	r2,zero,910c <___vfprintf_internal_r+0x1908>
    8cd4:	d9402e17 	ldw	r5,184(sp)
    8cd8:	d8c02a17 	ldw	r3,168(sp)
    8cdc:	002d883a 	mov	r22,zero
    8ce0:	28800104 	addi	r2,r5,4
    8ce4:	2cc0000b 	ldhu	r19,0(r5)
    8ce8:	183fc90e 	bge	r3,zero,8c10 <__alt_exception_stack_pointer+0xf8008c10>
    8cec:	d8802e15 	stw	r2,184(sp)
    8cf0:	0039883a 	mov	fp,zero
    8cf4:	9d84b03a 	or	r2,r19,r22
    8cf8:	103c1e1e 	bne	r2,zero,7d74 <__alt_exception_stack_pointer+0xf8007d74>
    8cfc:	00800044 	movi	r2,1
    8d00:	003e6c06 	br	86b4 <__alt_exception_stack_pointer+0xf80086b4>
    8d04:	d9002d17 	ldw	r4,180(sp)
    8d08:	d9801e04 	addi	r6,sp,120
    8d0c:	b80b883a 	mov	r5,r23
    8d10:	000e63c0 	call	e63c <__sprint_r>
    8d14:	103bbf1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8d18:	d8c02017 	ldw	r3,128(sp)
    8d1c:	da000404 	addi	r8,sp,16
    8d20:	d9003217 	ldw	r4,200(sp)
    8d24:	d8802617 	ldw	r2,152(sp)
    8d28:	d9403317 	ldw	r5,204(sp)
    8d2c:	8123883a 	add	r17,r16,r4
    8d30:	11400216 	blt	r2,r5,8d3c <___vfprintf_internal_r+0x1538>
    8d34:	9100004c 	andi	r4,r18,1
    8d38:	20000d26 	beq	r4,zero,8d70 <___vfprintf_internal_r+0x156c>
    8d3c:	d9003717 	ldw	r4,220(sp)
    8d40:	d9403417 	ldw	r5,208(sp)
    8d44:	1907883a 	add	r3,r3,r4
    8d48:	d9001f17 	ldw	r4,124(sp)
    8d4c:	41400015 	stw	r5,0(r8)
    8d50:	d9403717 	ldw	r5,220(sp)
    8d54:	21000044 	addi	r4,r4,1
    8d58:	d8c02015 	stw	r3,128(sp)
    8d5c:	41400115 	stw	r5,4(r8)
    8d60:	d9001f15 	stw	r4,124(sp)
    8d64:	014001c4 	movi	r5,7
    8d68:	2901e816 	blt	r5,r4,950c <___vfprintf_internal_r+0x1d08>
    8d6c:	42000204 	addi	r8,r8,8
    8d70:	d9003317 	ldw	r4,204(sp)
    8d74:	8121883a 	add	r16,r16,r4
    8d78:	2085c83a 	sub	r2,r4,r2
    8d7c:	8461c83a 	sub	r16,r16,r17
    8d80:	1400010e 	bge	r2,r16,8d88 <___vfprintf_internal_r+0x1584>
    8d84:	1021883a 	mov	r16,r2
    8d88:	04000a0e 	bge	zero,r16,8db4 <___vfprintf_internal_r+0x15b0>
    8d8c:	d9001f17 	ldw	r4,124(sp)
    8d90:	1c07883a 	add	r3,r3,r16
    8d94:	44400015 	stw	r17,0(r8)
    8d98:	21000044 	addi	r4,r4,1
    8d9c:	44000115 	stw	r16,4(r8)
    8da0:	d8c02015 	stw	r3,128(sp)
    8da4:	d9001f15 	stw	r4,124(sp)
    8da8:	014001c4 	movi	r5,7
    8dac:	2901fb16 	blt	r5,r4,959c <___vfprintf_internal_r+0x1d98>
    8db0:	42000204 	addi	r8,r8,8
    8db4:	8001f716 	blt	r16,zero,9594 <___vfprintf_internal_r+0x1d90>
    8db8:	1421c83a 	sub	r16,r2,r16
    8dbc:	043d160e 	bge	zero,r16,8218 <__alt_exception_stack_pointer+0xf8008218>
    8dc0:	04400404 	movi	r17,16
    8dc4:	d8801f17 	ldw	r2,124(sp)
    8dc8:	8c3efb0e 	bge	r17,r16,89b8 <__alt_exception_stack_pointer+0xf80089b8>
    8dcc:	01400074 	movhi	r5,1
    8dd0:	29552584 	addi	r5,r5,21654
    8dd4:	d9402c15 	stw	r5,176(sp)
    8dd8:	058001c4 	movi	r22,7
    8ddc:	dcc02d17 	ldw	r19,180(sp)
    8de0:	00000306 	br	8df0 <___vfprintf_internal_r+0x15ec>
    8de4:	42000204 	addi	r8,r8,8
    8de8:	843ffc04 	addi	r16,r16,-16
    8dec:	8c3ef50e 	bge	r17,r16,89c4 <__alt_exception_stack_pointer+0xf80089c4>
    8df0:	18c00404 	addi	r3,r3,16
    8df4:	10800044 	addi	r2,r2,1
    8df8:	45000015 	stw	r20,0(r8)
    8dfc:	44400115 	stw	r17,4(r8)
    8e00:	d8c02015 	stw	r3,128(sp)
    8e04:	d8801f15 	stw	r2,124(sp)
    8e08:	b0bff60e 	bge	r22,r2,8de4 <__alt_exception_stack_pointer+0xf8008de4>
    8e0c:	d9801e04 	addi	r6,sp,120
    8e10:	b80b883a 	mov	r5,r23
    8e14:	9809883a 	mov	r4,r19
    8e18:	000e63c0 	call	e63c <__sprint_r>
    8e1c:	103b7d1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8e20:	d8c02017 	ldw	r3,128(sp)
    8e24:	d8801f17 	ldw	r2,124(sp)
    8e28:	da000404 	addi	r8,sp,16
    8e2c:	003fee06 	br	8de8 <__alt_exception_stack_pointer+0xf8008de8>
    8e30:	9088703a 	and	r4,r18,r2
    8e34:	203eab1e 	bne	r4,zero,88e4 <__alt_exception_stack_pointer+0xf80088e4>
    8e38:	dc401f17 	ldw	r17,124(sp)
    8e3c:	40800115 	stw	r2,4(r8)
    8e40:	44000015 	stw	r16,0(r8)
    8e44:	8c400044 	addi	r17,r17,1
    8e48:	d8c02015 	stw	r3,128(sp)
    8e4c:	dc401f15 	stw	r17,124(sp)
    8e50:	008001c4 	movi	r2,7
    8e54:	14400e16 	blt	r2,r17,8e90 <___vfprintf_internal_r+0x168c>
    8e58:	45800204 	addi	r22,r8,8
    8e5c:	003eca06 	br	8988 <__alt_exception_stack_pointer+0xf8008988>
    8e60:	01000074 	movhi	r4,1
    8e64:	21152584 	addi	r4,r4,21654
    8e68:	d9002c15 	stw	r4,176(sp)
    8e6c:	d8802c17 	ldw	r2,176(sp)
    8e70:	1c07883a 	add	r3,r3,r16
    8e74:	8c400044 	addi	r17,r17,1
    8e78:	b0800015 	stw	r2,0(r22)
    8e7c:	b4000115 	stw	r16,4(r22)
    8e80:	d8c02015 	stw	r3,128(sp)
    8e84:	dc401f15 	stw	r17,124(sp)
    8e88:	008001c4 	movi	r2,7
    8e8c:	147ebd0e 	bge	r2,r17,8984 <__alt_exception_stack_pointer+0xf8008984>
    8e90:	d9002d17 	ldw	r4,180(sp)
    8e94:	d9801e04 	addi	r6,sp,120
    8e98:	b80b883a 	mov	r5,r23
    8e9c:	000e63c0 	call	e63c <__sprint_r>
    8ea0:	103b5c1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8ea4:	d8c02017 	ldw	r3,128(sp)
    8ea8:	dc401f17 	ldw	r17,124(sp)
    8eac:	dd800404 	addi	r22,sp,16
    8eb0:	003eb506 	br	8988 <__alt_exception_stack_pointer+0xf8008988>
    8eb4:	d9002d17 	ldw	r4,180(sp)
    8eb8:	d9801e04 	addi	r6,sp,120
    8ebc:	b80b883a 	mov	r5,r23
    8ec0:	000e63c0 	call	e63c <__sprint_r>
    8ec4:	103b531e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8ec8:	d8c02017 	ldw	r3,128(sp)
    8ecc:	dc401f17 	ldw	r17,124(sp)
    8ed0:	da000404 	addi	r8,sp,16
    8ed4:	003e8d06 	br	890c <__alt_exception_stack_pointer+0xf800890c>
    8ed8:	d9002d17 	ldw	r4,180(sp)
    8edc:	d9801e04 	addi	r6,sp,120
    8ee0:	b80b883a 	mov	r5,r23
    8ee4:	000e63c0 	call	e63c <__sprint_r>
    8ee8:	103b4a1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8eec:	d8c02017 	ldw	r3,128(sp)
    8ef0:	dc401f17 	ldw	r17,124(sp)
    8ef4:	dd800404 	addi	r22,sp,16
    8ef8:	003e8f06 	br	8938 <__alt_exception_stack_pointer+0xf8008938>
    8efc:	0027883a 	mov	r19,zero
    8f00:	003f4a06 	br	8c2c <__alt_exception_stack_pointer+0xf8008c2c>
    8f04:	d9002d17 	ldw	r4,180(sp)
    8f08:	d9801e04 	addi	r6,sp,120
    8f0c:	b80b883a 	mov	r5,r23
    8f10:	000e63c0 	call	e63c <__sprint_r>
    8f14:	103b3f1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    8f18:	d8c02017 	ldw	r3,128(sp)
    8f1c:	da000404 	addi	r8,sp,16
    8f20:	003c7b06 	br	8110 <__alt_exception_stack_pointer+0xf8008110>
    8f24:	d9402a17 	ldw	r5,168(sp)
    8f28:	04e7c83a 	sub	r19,zero,r19
    8f2c:	07000b44 	movi	fp,45
    8f30:	9804c03a 	cmpne	r2,r19,zero
    8f34:	05adc83a 	sub	r22,zero,r22
    8f38:	df002785 	stb	fp,158(sp)
    8f3c:	b0adc83a 	sub	r22,r22,r2
    8f40:	28017b16 	blt	r5,zero,9530 <___vfprintf_internal_r+0x1d2c>
    8f44:	00bfdfc4 	movi	r2,-129
    8f48:	90a4703a 	and	r18,r18,r2
    8f4c:	003b8906 	br	7d74 <__alt_exception_stack_pointer+0xf8007d74>
    8f50:	d9003617 	ldw	r4,216(sp)
    8f54:	d9403817 	ldw	r5,224(sp)
    8f58:	da003d15 	stw	r8,244(sp)
    8f5c:	000e2b40 	call	e2b4 <__fpclassifyd>
    8f60:	da003d17 	ldw	r8,244(sp)
    8f64:	1000f026 	beq	r2,zero,9328 <___vfprintf_internal_r+0x1b24>
    8f68:	d9002a17 	ldw	r4,168(sp)
    8f6c:	05bff7c4 	movi	r22,-33
    8f70:	00bfffc4 	movi	r2,-1
    8f74:	8dac703a 	and	r22,r17,r22
    8f78:	20820026 	beq	r4,r2,977c <___vfprintf_internal_r+0x1f78>
    8f7c:	008011c4 	movi	r2,71
    8f80:	b081f726 	beq	r22,r2,9760 <___vfprintf_internal_r+0x1f5c>
    8f84:	d9003817 	ldw	r4,224(sp)
    8f88:	90c04014 	ori	r3,r18,256
    8f8c:	d8c02c15 	stw	r3,176(sp)
    8f90:	20021516 	blt	r4,zero,97e8 <___vfprintf_internal_r+0x1fe4>
    8f94:	dcc03817 	ldw	r19,224(sp)
    8f98:	d8002905 	stb	zero,164(sp)
    8f9c:	00801984 	movi	r2,102
    8fa0:	8881f926 	beq	r17,r2,9788 <___vfprintf_internal_r+0x1f84>
    8fa4:	00801184 	movi	r2,70
    8fa8:	88821c26 	beq	r17,r2,981c <___vfprintf_internal_r+0x2018>
    8fac:	00801144 	movi	r2,69
    8fb0:	b081ef26 	beq	r22,r2,9770 <___vfprintf_internal_r+0x1f6c>
    8fb4:	d8c02a17 	ldw	r3,168(sp)
    8fb8:	d8802104 	addi	r2,sp,132
    8fbc:	d8800315 	stw	r2,12(sp)
    8fc0:	d9403617 	ldw	r5,216(sp)
    8fc4:	d8802504 	addi	r2,sp,148
    8fc8:	d9002d17 	ldw	r4,180(sp)
    8fcc:	d8800215 	stw	r2,8(sp)
    8fd0:	d8802604 	addi	r2,sp,152
    8fd4:	d8c00015 	stw	r3,0(sp)
    8fd8:	d8800115 	stw	r2,4(sp)
    8fdc:	01c00084 	movi	r7,2
    8fe0:	980d883a 	mov	r6,r19
    8fe4:	d8c03c15 	stw	r3,240(sp)
    8fe8:	da003d15 	stw	r8,244(sp)
    8fec:	0009f340 	call	9f34 <_dtoa_r>
    8ff0:	1021883a 	mov	r16,r2
    8ff4:	008019c4 	movi	r2,103
    8ff8:	d8c03c17 	ldw	r3,240(sp)
    8ffc:	da003d17 	ldw	r8,244(sp)
    9000:	88817126 	beq	r17,r2,95c8 <___vfprintf_internal_r+0x1dc4>
    9004:	008011c4 	movi	r2,71
    9008:	88829126 	beq	r17,r2,9a50 <___vfprintf_internal_r+0x224c>
    900c:	80f9883a 	add	fp,r16,r3
    9010:	d9003617 	ldw	r4,216(sp)
    9014:	000d883a 	mov	r6,zero
    9018:	000f883a 	mov	r7,zero
    901c:	980b883a 	mov	r5,r19
    9020:	da003d15 	stw	r8,244(sp)
    9024:	000577c0 	call	577c <__eqdf2>
    9028:	da003d17 	ldw	r8,244(sp)
    902c:	10018d26 	beq	r2,zero,9664 <___vfprintf_internal_r+0x1e60>
    9030:	d8802117 	ldw	r2,132(sp)
    9034:	1700062e 	bgeu	r2,fp,9050 <___vfprintf_internal_r+0x184c>
    9038:	01000c04 	movi	r4,48
    903c:	10c00044 	addi	r3,r2,1
    9040:	d8c02115 	stw	r3,132(sp)
    9044:	11000005 	stb	r4,0(r2)
    9048:	d8802117 	ldw	r2,132(sp)
    904c:	173ffb36 	bltu	r2,fp,903c <__alt_exception_stack_pointer+0xf800903c>
    9050:	1405c83a 	sub	r2,r2,r16
    9054:	d8803315 	stw	r2,204(sp)
    9058:	008011c4 	movi	r2,71
    905c:	b0817626 	beq	r22,r2,9638 <___vfprintf_internal_r+0x1e34>
    9060:	00801944 	movi	r2,101
    9064:	1442800e 	bge	r2,r17,9a68 <___vfprintf_internal_r+0x2264>
    9068:	d8c02617 	ldw	r3,152(sp)
    906c:	00801984 	movi	r2,102
    9070:	d8c03215 	stw	r3,200(sp)
    9074:	8881fe26 	beq	r17,r2,9870 <___vfprintf_internal_r+0x206c>
    9078:	d8c03217 	ldw	r3,200(sp)
    907c:	d9003317 	ldw	r4,204(sp)
    9080:	1901dd16 	blt	r3,r4,97f8 <___vfprintf_internal_r+0x1ff4>
    9084:	9480004c 	andi	r18,r18,1
    9088:	90022b1e 	bne	r18,zero,9938 <___vfprintf_internal_r+0x2134>
    908c:	1805883a 	mov	r2,r3
    9090:	18028316 	blt	r3,zero,9aa0 <___vfprintf_internal_r+0x229c>
    9094:	d8c03217 	ldw	r3,200(sp)
    9098:	044019c4 	movi	r17,103
    909c:	d8c02b15 	stw	r3,172(sp)
    90a0:	df002907 	ldb	fp,164(sp)
    90a4:	e001531e 	bne	fp,zero,95f4 <___vfprintf_internal_r+0x1df0>
    90a8:	df002783 	ldbu	fp,158(sp)
    90ac:	d8802915 	stw	r2,164(sp)
    90b0:	dc802c17 	ldw	r18,176(sp)
    90b4:	d8002a15 	stw	zero,168(sp)
    90b8:	003baf06 	br	7f78 <__alt_exception_stack_pointer+0xf8007f78>
    90bc:	d8c02e17 	ldw	r3,184(sp)
    90c0:	d9002e17 	ldw	r4,184(sp)
    90c4:	d9402e17 	ldw	r5,184(sp)
    90c8:	18c00017 	ldw	r3,0(r3)
    90cc:	21000117 	ldw	r4,4(r4)
    90d0:	29400204 	addi	r5,r5,8
    90d4:	d8c03615 	stw	r3,216(sp)
    90d8:	d9003815 	stw	r4,224(sp)
    90dc:	d9402e15 	stw	r5,184(sp)
    90e0:	003b5006 	br	7e24 <__alt_exception_stack_pointer+0xf8007e24>
    90e4:	ac400007 	ldb	r17,0(r21)
    90e8:	003a2806 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    90ec:	9080100c 	andi	r2,r18,64
    90f0:	1000a826 	beq	r2,zero,9394 <___vfprintf_internal_r+0x1b90>
    90f4:	d8c02e17 	ldw	r3,184(sp)
    90f8:	002d883a 	mov	r22,zero
    90fc:	1cc0000b 	ldhu	r19,0(r3)
    9100:	18c00104 	addi	r3,r3,4
    9104:	d8c02e15 	stw	r3,184(sp)
    9108:	003caf06 	br	83c8 <__alt_exception_stack_pointer+0xf80083c8>
    910c:	d9002e17 	ldw	r4,184(sp)
    9110:	d9402a17 	ldw	r5,168(sp)
    9114:	002d883a 	mov	r22,zero
    9118:	20800104 	addi	r2,r4,4
    911c:	24c00017 	ldw	r19,0(r4)
    9120:	283ebb0e 	bge	r5,zero,8c10 <__alt_exception_stack_pointer+0xf8008c10>
    9124:	003ef106 	br	8cec <__alt_exception_stack_pointer+0xf8008cec>
    9128:	9080040c 	andi	r2,r18,16
    912c:	1000921e 	bne	r2,zero,9378 <___vfprintf_internal_r+0x1b74>
    9130:	9480100c 	andi	r18,r18,64
    9134:	90013926 	beq	r18,zero,961c <___vfprintf_internal_r+0x1e18>
    9138:	d9402e17 	ldw	r5,184(sp)
    913c:	d8c02f17 	ldw	r3,188(sp)
    9140:	28800017 	ldw	r2,0(r5)
    9144:	29400104 	addi	r5,r5,4
    9148:	d9402e15 	stw	r5,184(sp)
    914c:	10c0000d 	sth	r3,0(r2)
    9150:	0039e406 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    9154:	9080100c 	andi	r2,r18,64
    9158:	10008026 	beq	r2,zero,935c <___vfprintf_internal_r+0x1b58>
    915c:	d8802e17 	ldw	r2,184(sp)
    9160:	14c0000f 	ldh	r19,0(r2)
    9164:	10800104 	addi	r2,r2,4
    9168:	d8802e15 	stw	r2,184(sp)
    916c:	982dd7fa 	srai	r22,r19,31
    9170:	b005883a 	mov	r2,r22
    9174:	003af706 	br	7d54 <__alt_exception_stack_pointer+0xf8007d54>
    9178:	9080100c 	andi	r2,r18,64
    917c:	d8002785 	stb	zero,158(sp)
    9180:	10008a1e 	bne	r2,zero,93ac <___vfprintf_internal_r+0x1ba8>
    9184:	d9002e17 	ldw	r4,184(sp)
    9188:	d9402a17 	ldw	r5,168(sp)
    918c:	002d883a 	mov	r22,zero
    9190:	20800104 	addi	r2,r4,4
    9194:	24c00017 	ldw	r19,0(r4)
    9198:	283e4b0e 	bge	r5,zero,8ac8 <__alt_exception_stack_pointer+0xf8008ac8>
    919c:	9d86b03a 	or	r3,r19,r22
    91a0:	d8802e15 	stw	r2,184(sp)
    91a4:	183e4c1e 	bne	r3,zero,8ad8 <__alt_exception_stack_pointer+0xf8008ad8>
    91a8:	0039883a 	mov	fp,zero
    91ac:	0005883a 	mov	r2,zero
    91b0:	003d4006 	br	86b4 <__alt_exception_stack_pointer+0xf80086b4>
    91b4:	01400074 	movhi	r5,1
    91b8:	29552584 	addi	r5,r5,21654
    91bc:	d9402c15 	stw	r5,176(sp)
    91c0:	d9402c17 	ldw	r5,176(sp)
    91c4:	1c47883a 	add	r3,r3,r17
    91c8:	10800044 	addi	r2,r2,1
    91cc:	41400015 	stw	r5,0(r8)
    91d0:	44400115 	stw	r17,4(r8)
    91d4:	d8c02015 	stw	r3,128(sp)
    91d8:	d8801f15 	stw	r2,124(sp)
    91dc:	010001c4 	movi	r4,7
    91e0:	20bec816 	blt	r4,r2,8d04 <__alt_exception_stack_pointer+0xf8008d04>
    91e4:	42000204 	addi	r8,r8,8
    91e8:	003ecd06 	br	8d20 <__alt_exception_stack_pointer+0xf8008d20>
    91ec:	d9002a17 	ldw	r4,168(sp)
    91f0:	d8002785 	stb	zero,158(sp)
    91f4:	203d2d16 	blt	r4,zero,86ac <__alt_exception_stack_pointer+0xf80086ac>
    91f8:	00bfdfc4 	movi	r2,-129
    91fc:	90a4703a 	and	r18,r18,r2
    9200:	003a6106 	br	7b88 <__alt_exception_stack_pointer+0xf8007b88>
    9204:	01000074 	movhi	r4,1
    9208:	21152584 	addi	r4,r4,21654
    920c:	d9002c15 	stw	r4,176(sp)
    9210:	003bea06 	br	81bc <__alt_exception_stack_pointer+0xf80081bc>
    9214:	d9002d17 	ldw	r4,180(sp)
    9218:	d9801e04 	addi	r6,sp,120
    921c:	b80b883a 	mov	r5,r23
    9220:	000e63c0 	call	e63c <__sprint_r>
    9224:	103a7b1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9228:	d8c02017 	ldw	r3,128(sp)
    922c:	da000404 	addi	r8,sp,16
    9230:	003d4106 	br	8738 <__alt_exception_stack_pointer+0xf8008738>
    9234:	d8801f17 	ldw	r2,124(sp)
    9238:	01400074 	movhi	r5,1
    923c:	01000044 	movi	r4,1
    9240:	18c00044 	addi	r3,r3,1
    9244:	10800044 	addi	r2,r2,1
    9248:	29552504 	addi	r5,r5,21652
    924c:	41000115 	stw	r4,4(r8)
    9250:	41400015 	stw	r5,0(r8)
    9254:	d8c02015 	stw	r3,128(sp)
    9258:	d8801f15 	stw	r2,124(sp)
    925c:	010001c4 	movi	r4,7
    9260:	20805c16 	blt	r4,r2,93d4 <___vfprintf_internal_r+0x1bd0>
    9264:	42000204 	addi	r8,r8,8
    9268:	8800041e 	bne	r17,zero,927c <___vfprintf_internal_r+0x1a78>
    926c:	d8803317 	ldw	r2,204(sp)
    9270:	1000021e 	bne	r2,zero,927c <___vfprintf_internal_r+0x1a78>
    9274:	9080004c 	andi	r2,r18,1
    9278:	103be726 	beq	r2,zero,8218 <__alt_exception_stack_pointer+0xf8008218>
    927c:	d9003717 	ldw	r4,220(sp)
    9280:	d8801f17 	ldw	r2,124(sp)
    9284:	d9403417 	ldw	r5,208(sp)
    9288:	20c7883a 	add	r3,r4,r3
    928c:	10800044 	addi	r2,r2,1
    9290:	41000115 	stw	r4,4(r8)
    9294:	41400015 	stw	r5,0(r8)
    9298:	d8c02015 	stw	r3,128(sp)
    929c:	d8801f15 	stw	r2,124(sp)
    92a0:	010001c4 	movi	r4,7
    92a4:	20812116 	blt	r4,r2,972c <___vfprintf_internal_r+0x1f28>
    92a8:	42000204 	addi	r8,r8,8
    92ac:	0463c83a 	sub	r17,zero,r17
    92b0:	0440730e 	bge	zero,r17,9480 <___vfprintf_internal_r+0x1c7c>
    92b4:	05800404 	movi	r22,16
    92b8:	b440860e 	bge	r22,r17,94d4 <___vfprintf_internal_r+0x1cd0>
    92bc:	01400074 	movhi	r5,1
    92c0:	29552584 	addi	r5,r5,21654
    92c4:	d9402c15 	stw	r5,176(sp)
    92c8:	070001c4 	movi	fp,7
    92cc:	dcc02d17 	ldw	r19,180(sp)
    92d0:	00000306 	br	92e0 <___vfprintf_internal_r+0x1adc>
    92d4:	42000204 	addi	r8,r8,8
    92d8:	8c7ffc04 	addi	r17,r17,-16
    92dc:	b440800e 	bge	r22,r17,94e0 <___vfprintf_internal_r+0x1cdc>
    92e0:	18c00404 	addi	r3,r3,16
    92e4:	10800044 	addi	r2,r2,1
    92e8:	45000015 	stw	r20,0(r8)
    92ec:	45800115 	stw	r22,4(r8)
    92f0:	d8c02015 	stw	r3,128(sp)
    92f4:	d8801f15 	stw	r2,124(sp)
    92f8:	e0bff60e 	bge	fp,r2,92d4 <__alt_exception_stack_pointer+0xf80092d4>
    92fc:	d9801e04 	addi	r6,sp,120
    9300:	b80b883a 	mov	r5,r23
    9304:	9809883a 	mov	r4,r19
    9308:	000e63c0 	call	e63c <__sprint_r>
    930c:	103a411e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9310:	d8c02017 	ldw	r3,128(sp)
    9314:	d8801f17 	ldw	r2,124(sp)
    9318:	da000404 	addi	r8,sp,16
    931c:	003fee06 	br	92d8 <__alt_exception_stack_pointer+0xf80092d8>
    9320:	00bfffc4 	movi	r2,-1
    9324:	003a3f06 	br	7c24 <__alt_exception_stack_pointer+0xf8007c24>
    9328:	008011c4 	movi	r2,71
    932c:	1440b816 	blt	r2,r17,9610 <___vfprintf_internal_r+0x1e0c>
    9330:	04000074 	movhi	r16,1
    9334:	84151704 	addi	r16,r16,21596
    9338:	00c000c4 	movi	r3,3
    933c:	00bfdfc4 	movi	r2,-129
    9340:	d8c02915 	stw	r3,164(sp)
    9344:	90a4703a 	and	r18,r18,r2
    9348:	df002783 	ldbu	fp,158(sp)
    934c:	d8c02b15 	stw	r3,172(sp)
    9350:	d8002a15 	stw	zero,168(sp)
    9354:	d8003215 	stw	zero,200(sp)
    9358:	003b0706 	br	7f78 <__alt_exception_stack_pointer+0xf8007f78>
    935c:	d8c02e17 	ldw	r3,184(sp)
    9360:	1cc00017 	ldw	r19,0(r3)
    9364:	18c00104 	addi	r3,r3,4
    9368:	d8c02e15 	stw	r3,184(sp)
    936c:	982dd7fa 	srai	r22,r19,31
    9370:	b005883a 	mov	r2,r22
    9374:	003a7706 	br	7d54 <__alt_exception_stack_pointer+0xf8007d54>
    9378:	d8c02e17 	ldw	r3,184(sp)
    937c:	d9002f17 	ldw	r4,188(sp)
    9380:	18800017 	ldw	r2,0(r3)
    9384:	18c00104 	addi	r3,r3,4
    9388:	d8c02e15 	stw	r3,184(sp)
    938c:	11000015 	stw	r4,0(r2)
    9390:	00395406 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    9394:	d9002e17 	ldw	r4,184(sp)
    9398:	002d883a 	mov	r22,zero
    939c:	24c00017 	ldw	r19,0(r4)
    93a0:	21000104 	addi	r4,r4,4
    93a4:	d9002e15 	stw	r4,184(sp)
    93a8:	003c0706 	br	83c8 <__alt_exception_stack_pointer+0xf80083c8>
    93ac:	d9402e17 	ldw	r5,184(sp)
    93b0:	d8c02a17 	ldw	r3,168(sp)
    93b4:	002d883a 	mov	r22,zero
    93b8:	28800104 	addi	r2,r5,4
    93bc:	2cc0000b 	ldhu	r19,0(r5)
    93c0:	183dc10e 	bge	r3,zero,8ac8 <__alt_exception_stack_pointer+0xf8008ac8>
    93c4:	003f7506 	br	919c <__alt_exception_stack_pointer+0xf800919c>
    93c8:	04000074 	movhi	r16,1
    93cc:	84151504 	addi	r16,r16,21588
    93d0:	003aa706 	br	7e70 <__alt_exception_stack_pointer+0xf8007e70>
    93d4:	d9002d17 	ldw	r4,180(sp)
    93d8:	d9801e04 	addi	r6,sp,120
    93dc:	b80b883a 	mov	r5,r23
    93e0:	000e63c0 	call	e63c <__sprint_r>
    93e4:	103a0b1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    93e8:	dc402617 	ldw	r17,152(sp)
    93ec:	d8c02017 	ldw	r3,128(sp)
    93f0:	da000404 	addi	r8,sp,16
    93f4:	003f9c06 	br	9268 <__alt_exception_stack_pointer+0xf8009268>
    93f8:	ac400043 	ldbu	r17,1(r21)
    93fc:	84000814 	ori	r16,r16,32
    9400:	ad400044 	addi	r21,r21,1
    9404:	8c403fcc 	andi	r17,r17,255
    9408:	8c40201c 	xori	r17,r17,128
    940c:	8c7fe004 	addi	r17,r17,-128
    9410:	00395e06 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    9414:	d8c02e15 	stw	r3,184(sp)
    9418:	0039883a 	mov	fp,zero
    941c:	003e3506 	br	8cf4 <__alt_exception_stack_pointer+0xf8008cf4>
    9420:	d9002d17 	ldw	r4,180(sp)
    9424:	d9801e04 	addi	r6,sp,120
    9428:	b80b883a 	mov	r5,r23
    942c:	000e63c0 	call	e63c <__sprint_r>
    9430:	1039f81e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9434:	d8c02017 	ldw	r3,128(sp)
    9438:	da000404 	addi	r8,sp,16
    943c:	003cd006 	br	8780 <__alt_exception_stack_pointer+0xf8008780>
    9440:	8009883a 	mov	r4,r16
    9444:	df003d15 	stw	fp,244(sp)
    9448:	00077640 	call	7764 <strlen>
    944c:	d8802b15 	stw	r2,172(sp)
    9450:	da003d17 	ldw	r8,244(sp)
    9454:	103c200e 	bge	r2,zero,84d8 <__alt_exception_stack_pointer+0xf80084d8>
    9458:	0005883a 	mov	r2,zero
    945c:	003c1e06 	br	84d8 <__alt_exception_stack_pointer+0xf80084d8>
    9460:	d9002d17 	ldw	r4,180(sp)
    9464:	d9801e04 	addi	r6,sp,120
    9468:	b80b883a 	mov	r5,r23
    946c:	000e63c0 	call	e63c <__sprint_r>
    9470:	1039e81e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9474:	d8c02017 	ldw	r3,128(sp)
    9478:	d8801f17 	ldw	r2,124(sp)
    947c:	da000404 	addi	r8,sp,16
    9480:	d9403317 	ldw	r5,204(sp)
    9484:	10800044 	addi	r2,r2,1
    9488:	44000015 	stw	r16,0(r8)
    948c:	28c7883a 	add	r3,r5,r3
    9490:	003b5b06 	br	8200 <__alt_exception_stack_pointer+0xf8008200>
    9494:	01000074 	movhi	r4,1
    9498:	21152984 	addi	r4,r4,21670
    949c:	d9003515 	stw	r4,212(sp)
    94a0:	003af206 	br	806c <__alt_exception_stack_pointer+0xf800806c>
    94a4:	013fffc4 	movi	r4,-1
    94a8:	003a0806 	br	7ccc <__alt_exception_stack_pointer+0xf8007ccc>
    94ac:	0023883a 	mov	r17,zero
    94b0:	003d9d06 	br	8b28 <__alt_exception_stack_pointer+0xf8008b28>
    94b4:	d9002d17 	ldw	r4,180(sp)
    94b8:	d9801e04 	addi	r6,sp,120
    94bc:	b80b883a 	mov	r5,r23
    94c0:	000e63c0 	call	e63c <__sprint_r>
    94c4:	1039d31e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    94c8:	d8c02017 	ldw	r3,128(sp)
    94cc:	da000404 	addi	r8,sp,16
    94d0:	003d9406 	br	8b24 <__alt_exception_stack_pointer+0xf8008b24>
    94d4:	01000074 	movhi	r4,1
    94d8:	21152584 	addi	r4,r4,21654
    94dc:	d9002c15 	stw	r4,176(sp)
    94e0:	d9002c17 	ldw	r4,176(sp)
    94e4:	1c47883a 	add	r3,r3,r17
    94e8:	10800044 	addi	r2,r2,1
    94ec:	41000015 	stw	r4,0(r8)
    94f0:	44400115 	stw	r17,4(r8)
    94f4:	d8c02015 	stw	r3,128(sp)
    94f8:	d8801f15 	stw	r2,124(sp)
    94fc:	010001c4 	movi	r4,7
    9500:	20bfd716 	blt	r4,r2,9460 <__alt_exception_stack_pointer+0xf8009460>
    9504:	42000204 	addi	r8,r8,8
    9508:	003fdd06 	br	9480 <__alt_exception_stack_pointer+0xf8009480>
    950c:	d9002d17 	ldw	r4,180(sp)
    9510:	d9801e04 	addi	r6,sp,120
    9514:	b80b883a 	mov	r5,r23
    9518:	000e63c0 	call	e63c <__sprint_r>
    951c:	1039bd1e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9520:	d8802617 	ldw	r2,152(sp)
    9524:	d8c02017 	ldw	r3,128(sp)
    9528:	da000404 	addi	r8,sp,16
    952c:	003e1006 	br	8d70 <__alt_exception_stack_pointer+0xf8008d70>
    9530:	00800044 	movi	r2,1
    9534:	10803fcc 	andi	r2,r2,255
    9538:	00c00044 	movi	r3,1
    953c:	10fa0d26 	beq	r2,r3,7d74 <__alt_exception_stack_pointer+0xf8007d74>
    9540:	00c00084 	movi	r3,2
    9544:	10fbaf26 	beq	r2,r3,8404 <__alt_exception_stack_pointer+0xf8008404>
    9548:	003a6d06 	br	7f00 <__alt_exception_stack_pointer+0xf8007f00>
    954c:	01000074 	movhi	r4,1
    9550:	21152984 	addi	r4,r4,21670
    9554:	d9003515 	stw	r4,212(sp)
    9558:	003b5406 	br	82ac <__alt_exception_stack_pointer+0xf80082ac>
    955c:	d8802a17 	ldw	r2,168(sp)
    9560:	00c00184 	movi	r3,6
    9564:	1880012e 	bgeu	r3,r2,956c <___vfprintf_internal_r+0x1d68>
    9568:	1805883a 	mov	r2,r3
    956c:	d8802b15 	stw	r2,172(sp)
    9570:	1000ef16 	blt	r2,zero,9930 <___vfprintf_internal_r+0x212c>
    9574:	04000074 	movhi	r16,1
    9578:	d8802915 	stw	r2,164(sp)
    957c:	dcc02e15 	stw	r19,184(sp)
    9580:	d8002a15 	stw	zero,168(sp)
    9584:	d8003215 	stw	zero,200(sp)
    9588:	84152304 	addi	r16,r16,21644
    958c:	0039883a 	mov	fp,zero
    9590:	003a8006 	br	7f94 <__alt_exception_stack_pointer+0xf8007f94>
    9594:	0021883a 	mov	r16,zero
    9598:	003e0706 	br	8db8 <__alt_exception_stack_pointer+0xf8008db8>
    959c:	d9002d17 	ldw	r4,180(sp)
    95a0:	d9801e04 	addi	r6,sp,120
    95a4:	b80b883a 	mov	r5,r23
    95a8:	000e63c0 	call	e63c <__sprint_r>
    95ac:	1039991e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    95b0:	d8802617 	ldw	r2,152(sp)
    95b4:	d9403317 	ldw	r5,204(sp)
    95b8:	d8c02017 	ldw	r3,128(sp)
    95bc:	da000404 	addi	r8,sp,16
    95c0:	2885c83a 	sub	r2,r5,r2
    95c4:	003dfb06 	br	8db4 <__alt_exception_stack_pointer+0xf8008db4>
    95c8:	9080004c 	andi	r2,r18,1
    95cc:	103e8f1e 	bne	r2,zero,900c <__alt_exception_stack_pointer+0xf800900c>
    95d0:	d8802117 	ldw	r2,132(sp)
    95d4:	003e9e06 	br	9050 <__alt_exception_stack_pointer+0xf8009050>
    95d8:	1025883a 	mov	r18,r2
    95dc:	0039883a 	mov	fp,zero
    95e0:	00800084 	movi	r2,2
    95e4:	003fd306 	br	9534 <__alt_exception_stack_pointer+0xf8009534>
    95e8:	07000b44 	movi	fp,45
    95ec:	df002785 	stb	fp,158(sp)
    95f0:	003a1b06 	br	7e60 <__alt_exception_stack_pointer+0xf8007e60>
    95f4:	00c00b44 	movi	r3,45
    95f8:	d8c02785 	stb	r3,158(sp)
    95fc:	d8802915 	stw	r2,164(sp)
    9600:	dc802c17 	ldw	r18,176(sp)
    9604:	d8002a15 	stw	zero,168(sp)
    9608:	07000b44 	movi	fp,45
    960c:	003a5e06 	br	7f88 <__alt_exception_stack_pointer+0xf8007f88>
    9610:	04000074 	movhi	r16,1
    9614:	84151804 	addi	r16,r16,21600
    9618:	003f4706 	br	9338 <__alt_exception_stack_pointer+0xf8009338>
    961c:	d9002e17 	ldw	r4,184(sp)
    9620:	d9402f17 	ldw	r5,188(sp)
    9624:	20800017 	ldw	r2,0(r4)
    9628:	21000104 	addi	r4,r4,4
    962c:	d9002e15 	stw	r4,184(sp)
    9630:	11400015 	stw	r5,0(r2)
    9634:	0038ab06 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    9638:	dd802617 	ldw	r22,152(sp)
    963c:	00bfff44 	movi	r2,-3
    9640:	b0801c16 	blt	r22,r2,96b4 <___vfprintf_internal_r+0x1eb0>
    9644:	d9402a17 	ldw	r5,168(sp)
    9648:	2d801a16 	blt	r5,r22,96b4 <___vfprintf_internal_r+0x1eb0>
    964c:	dd803215 	stw	r22,200(sp)
    9650:	003e8906 	br	9078 <__alt_exception_stack_pointer+0xf8009078>
    9654:	01000074 	movhi	r4,1
    9658:	21152584 	addi	r4,r4,21654
    965c:	d9002c15 	stw	r4,176(sp)
    9660:	003c9106 	br	88a8 <__alt_exception_stack_pointer+0xf80088a8>
    9664:	e005883a 	mov	r2,fp
    9668:	003e7906 	br	9050 <__alt_exception_stack_pointer+0xf8009050>
    966c:	d9002a17 	ldw	r4,168(sp)
    9670:	df002783 	ldbu	fp,158(sp)
    9674:	dcc02e15 	stw	r19,184(sp)
    9678:	d9002915 	stw	r4,164(sp)
    967c:	d9002b15 	stw	r4,172(sp)
    9680:	d8002a15 	stw	zero,168(sp)
    9684:	d8003215 	stw	zero,200(sp)
    9688:	003a3b06 	br	7f78 <__alt_exception_stack_pointer+0xf8007f78>
    968c:	9080004c 	andi	r2,r18,1
    9690:	0039883a 	mov	fp,zero
    9694:	10000426 	beq	r2,zero,96a8 <___vfprintf_internal_r+0x1ea4>
    9698:	00800c04 	movi	r2,48
    969c:	dc001dc4 	addi	r16,sp,119
    96a0:	d8801dc5 	stb	r2,119(sp)
    96a4:	003b6406 	br	8438 <__alt_exception_stack_pointer+0xf8008438>
    96a8:	d8002b15 	stw	zero,172(sp)
    96ac:	dc001e04 	addi	r16,sp,120
    96b0:	003a2b06 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    96b4:	8c7fff84 	addi	r17,r17,-2
    96b8:	b5bfffc4 	addi	r22,r22,-1
    96bc:	dd802615 	stw	r22,152(sp)
    96c0:	dc4022c5 	stb	r17,139(sp)
    96c4:	b000bf16 	blt	r22,zero,99c4 <___vfprintf_internal_r+0x21c0>
    96c8:	00800ac4 	movi	r2,43
    96cc:	d8802305 	stb	r2,140(sp)
    96d0:	00800244 	movi	r2,9
    96d4:	15807016 	blt	r2,r22,9898 <___vfprintf_internal_r+0x2094>
    96d8:	00800c04 	movi	r2,48
    96dc:	b5800c04 	addi	r22,r22,48
    96e0:	d8802345 	stb	r2,141(sp)
    96e4:	dd802385 	stb	r22,142(sp)
    96e8:	d88023c4 	addi	r2,sp,143
    96ec:	df0022c4 	addi	fp,sp,139
    96f0:	d8c03317 	ldw	r3,204(sp)
    96f4:	1739c83a 	sub	fp,r2,fp
    96f8:	d9003317 	ldw	r4,204(sp)
    96fc:	e0c7883a 	add	r3,fp,r3
    9700:	df003a15 	stw	fp,232(sp)
    9704:	d8c02b15 	stw	r3,172(sp)
    9708:	00800044 	movi	r2,1
    970c:	1100b30e 	bge	r2,r4,99dc <___vfprintf_internal_r+0x21d8>
    9710:	d8c02b17 	ldw	r3,172(sp)
    9714:	18c00044 	addi	r3,r3,1
    9718:	d8c02b15 	stw	r3,172(sp)
    971c:	1805883a 	mov	r2,r3
    9720:	1800ac16 	blt	r3,zero,99d4 <___vfprintf_internal_r+0x21d0>
    9724:	d8003215 	stw	zero,200(sp)
    9728:	003e5d06 	br	90a0 <__alt_exception_stack_pointer+0xf80090a0>
    972c:	d9002d17 	ldw	r4,180(sp)
    9730:	d9801e04 	addi	r6,sp,120
    9734:	b80b883a 	mov	r5,r23
    9738:	000e63c0 	call	e63c <__sprint_r>
    973c:	1039351e 	bne	r2,zero,7c14 <__alt_exception_stack_pointer+0xf8007c14>
    9740:	dc402617 	ldw	r17,152(sp)
    9744:	d8c02017 	ldw	r3,128(sp)
    9748:	d8801f17 	ldw	r2,124(sp)
    974c:	da000404 	addi	r8,sp,16
    9750:	003ed606 	br	92ac <__alt_exception_stack_pointer+0xf80092ac>
    9754:	182b883a 	mov	r21,r3
    9758:	d8002a15 	stw	zero,168(sp)
    975c:	00388c06 	br	7990 <__alt_exception_stack_pointer+0xf8007990>
    9760:	d8802a17 	ldw	r2,168(sp)
    9764:	103e071e 	bne	r2,zero,8f84 <__alt_exception_stack_pointer+0xf8008f84>
    9768:	dc002a15 	stw	r16,168(sp)
    976c:	003e0506 	br	8f84 <__alt_exception_stack_pointer+0xf8008f84>
    9770:	d9002a17 	ldw	r4,168(sp)
    9774:	20c00044 	addi	r3,r4,1
    9778:	003e0f06 	br	8fb8 <__alt_exception_stack_pointer+0xf8008fb8>
    977c:	01400184 	movi	r5,6
    9780:	d9402a15 	stw	r5,168(sp)
    9784:	003dff06 	br	8f84 <__alt_exception_stack_pointer+0xf8008f84>
    9788:	d8802104 	addi	r2,sp,132
    978c:	d8800315 	stw	r2,12(sp)
    9790:	d8802504 	addi	r2,sp,148
    9794:	d8800215 	stw	r2,8(sp)
    9798:	d8802604 	addi	r2,sp,152
    979c:	d8800115 	stw	r2,4(sp)
    97a0:	d8802a17 	ldw	r2,168(sp)
    97a4:	d9403617 	ldw	r5,216(sp)
    97a8:	d9002d17 	ldw	r4,180(sp)
    97ac:	d8800015 	stw	r2,0(sp)
    97b0:	01c000c4 	movi	r7,3
    97b4:	980d883a 	mov	r6,r19
    97b8:	da003d15 	stw	r8,244(sp)
    97bc:	0009f340 	call	9f34 <_dtoa_r>
    97c0:	d8c02a17 	ldw	r3,168(sp)
    97c4:	da003d17 	ldw	r8,244(sp)
    97c8:	1021883a 	mov	r16,r2
    97cc:	10f9883a 	add	fp,r2,r3
    97d0:	81000007 	ldb	r4,0(r16)
    97d4:	00800c04 	movi	r2,48
    97d8:	20805e26 	beq	r4,r2,9954 <___vfprintf_internal_r+0x2150>
    97dc:	d8c02617 	ldw	r3,152(sp)
    97e0:	e0f9883a 	add	fp,fp,r3
    97e4:	003e0a06 	br	9010 <__alt_exception_stack_pointer+0xf8009010>
    97e8:	00c00b44 	movi	r3,45
    97ec:	24e0003c 	xorhi	r19,r4,32768
    97f0:	d8c02905 	stb	r3,164(sp)
    97f4:	003de906 	br	8f9c <__alt_exception_stack_pointer+0xf8008f9c>
    97f8:	d8c03217 	ldw	r3,200(sp)
    97fc:	00c07a0e 	bge	zero,r3,99e8 <___vfprintf_internal_r+0x21e4>
    9800:	00800044 	movi	r2,1
    9804:	d9003317 	ldw	r4,204(sp)
    9808:	1105883a 	add	r2,r2,r4
    980c:	d8802b15 	stw	r2,172(sp)
    9810:	10004e16 	blt	r2,zero,994c <___vfprintf_internal_r+0x2148>
    9814:	044019c4 	movi	r17,103
    9818:	003e2106 	br	90a0 <__alt_exception_stack_pointer+0xf80090a0>
    981c:	d9002a17 	ldw	r4,168(sp)
    9820:	d8802104 	addi	r2,sp,132
    9824:	d8800315 	stw	r2,12(sp)
    9828:	d9000015 	stw	r4,0(sp)
    982c:	d8802504 	addi	r2,sp,148
    9830:	d9403617 	ldw	r5,216(sp)
    9834:	d9002d17 	ldw	r4,180(sp)
    9838:	d8800215 	stw	r2,8(sp)
    983c:	d8802604 	addi	r2,sp,152
    9840:	d8800115 	stw	r2,4(sp)
    9844:	01c000c4 	movi	r7,3
    9848:	980d883a 	mov	r6,r19
    984c:	da003d15 	stw	r8,244(sp)
    9850:	0009f340 	call	9f34 <_dtoa_r>
    9854:	d8c02a17 	ldw	r3,168(sp)
    9858:	da003d17 	ldw	r8,244(sp)
    985c:	1021883a 	mov	r16,r2
    9860:	00801184 	movi	r2,70
    9864:	80f9883a 	add	fp,r16,r3
    9868:	88bfd926 	beq	r17,r2,97d0 <__alt_exception_stack_pointer+0xf80097d0>
    986c:	003de806 	br	9010 <__alt_exception_stack_pointer+0xf8009010>
    9870:	d9002a17 	ldw	r4,168(sp)
    9874:	00c04d0e 	bge	zero,r3,99ac <___vfprintf_internal_r+0x21a8>
    9878:	2000441e 	bne	r4,zero,998c <___vfprintf_internal_r+0x2188>
    987c:	9480004c 	andi	r18,r18,1
    9880:	9000421e 	bne	r18,zero,998c <___vfprintf_internal_r+0x2188>
    9884:	1805883a 	mov	r2,r3
    9888:	18006f16 	blt	r3,zero,9a48 <___vfprintf_internal_r+0x2244>
    988c:	d8c03217 	ldw	r3,200(sp)
    9890:	d8c02b15 	stw	r3,172(sp)
    9894:	003e0206 	br	90a0 <__alt_exception_stack_pointer+0xf80090a0>
    9898:	df0022c4 	addi	fp,sp,139
    989c:	dc002a15 	stw	r16,168(sp)
    98a0:	4027883a 	mov	r19,r8
    98a4:	e021883a 	mov	r16,fp
    98a8:	b009883a 	mov	r4,r22
    98ac:	01400284 	movi	r5,10
    98b0:	0004d780 	call	4d78 <__modsi3>
    98b4:	10800c04 	addi	r2,r2,48
    98b8:	843fffc4 	addi	r16,r16,-1
    98bc:	b009883a 	mov	r4,r22
    98c0:	01400284 	movi	r5,10
    98c4:	80800005 	stb	r2,0(r16)
    98c8:	0004cf40 	call	4cf4 <__divsi3>
    98cc:	102d883a 	mov	r22,r2
    98d0:	00800244 	movi	r2,9
    98d4:	15bff416 	blt	r2,r22,98a8 <__alt_exception_stack_pointer+0xf80098a8>
    98d8:	9811883a 	mov	r8,r19
    98dc:	b0800c04 	addi	r2,r22,48
    98e0:	8027883a 	mov	r19,r16
    98e4:	997fffc4 	addi	r5,r19,-1
    98e8:	98bfffc5 	stb	r2,-1(r19)
    98ec:	dc002a17 	ldw	r16,168(sp)
    98f0:	2f006d2e 	bgeu	r5,fp,9aa8 <___vfprintf_internal_r+0x22a4>
    98f4:	d9c02384 	addi	r7,sp,142
    98f8:	3ccfc83a 	sub	r7,r7,r19
    98fc:	d9002344 	addi	r4,sp,141
    9900:	e1cf883a 	add	r7,fp,r7
    9904:	00000106 	br	990c <___vfprintf_internal_r+0x2108>
    9908:	28800003 	ldbu	r2,0(r5)
    990c:	20800005 	stb	r2,0(r4)
    9910:	21000044 	addi	r4,r4,1
    9914:	29400044 	addi	r5,r5,1
    9918:	393ffb1e 	bne	r7,r4,9908 <__alt_exception_stack_pointer+0xf8009908>
    991c:	d8802304 	addi	r2,sp,140
    9920:	14c5c83a 	sub	r2,r2,r19
    9924:	d8c02344 	addi	r3,sp,141
    9928:	1885883a 	add	r2,r3,r2
    992c:	003f7006 	br	96f0 <__alt_exception_stack_pointer+0xf80096f0>
    9930:	0005883a 	mov	r2,zero
    9934:	003f0f06 	br	9574 <__alt_exception_stack_pointer+0xf8009574>
    9938:	d8c03217 	ldw	r3,200(sp)
    993c:	18c00044 	addi	r3,r3,1
    9940:	d8c02b15 	stw	r3,172(sp)
    9944:	1805883a 	mov	r2,r3
    9948:	183fb20e 	bge	r3,zero,9814 <__alt_exception_stack_pointer+0xf8009814>
    994c:	0005883a 	mov	r2,zero
    9950:	003fb006 	br	9814 <__alt_exception_stack_pointer+0xf8009814>
    9954:	d9003617 	ldw	r4,216(sp)
    9958:	000d883a 	mov	r6,zero
    995c:	000f883a 	mov	r7,zero
    9960:	980b883a 	mov	r5,r19
    9964:	d8c03c15 	stw	r3,240(sp)
    9968:	da003d15 	stw	r8,244(sp)
    996c:	000577c0 	call	577c <__eqdf2>
    9970:	d8c03c17 	ldw	r3,240(sp)
    9974:	da003d17 	ldw	r8,244(sp)
    9978:	103f9826 	beq	r2,zero,97dc <__alt_exception_stack_pointer+0xf80097dc>
    997c:	00800044 	movi	r2,1
    9980:	10c7c83a 	sub	r3,r2,r3
    9984:	d8c02615 	stw	r3,152(sp)
    9988:	003f9506 	br	97e0 <__alt_exception_stack_pointer+0xf80097e0>
    998c:	d9002a17 	ldw	r4,168(sp)
    9990:	d8c03217 	ldw	r3,200(sp)
    9994:	20800044 	addi	r2,r4,1
    9998:	1885883a 	add	r2,r3,r2
    999c:	d8802b15 	stw	r2,172(sp)
    99a0:	103dbf0e 	bge	r2,zero,90a0 <__alt_exception_stack_pointer+0xf80090a0>
    99a4:	0005883a 	mov	r2,zero
    99a8:	003dbd06 	br	90a0 <__alt_exception_stack_pointer+0xf80090a0>
    99ac:	2000201e 	bne	r4,zero,9a30 <___vfprintf_internal_r+0x222c>
    99b0:	9480004c 	andi	r18,r18,1
    99b4:	90001e1e 	bne	r18,zero,9a30 <___vfprintf_internal_r+0x222c>
    99b8:	00800044 	movi	r2,1
    99bc:	d8802b15 	stw	r2,172(sp)
    99c0:	003db706 	br	90a0 <__alt_exception_stack_pointer+0xf80090a0>
    99c4:	00800b44 	movi	r2,45
    99c8:	05adc83a 	sub	r22,zero,r22
    99cc:	d8802305 	stb	r2,140(sp)
    99d0:	003f3f06 	br	96d0 <__alt_exception_stack_pointer+0xf80096d0>
    99d4:	0005883a 	mov	r2,zero
    99d8:	003f5206 	br	9724 <__alt_exception_stack_pointer+0xf8009724>
    99dc:	90a4703a 	and	r18,r18,r2
    99e0:	903f4e26 	beq	r18,zero,971c <__alt_exception_stack_pointer+0xf800971c>
    99e4:	003f4a06 	br	9710 <__alt_exception_stack_pointer+0xf8009710>
    99e8:	00800084 	movi	r2,2
    99ec:	10c5c83a 	sub	r2,r2,r3
    99f0:	003f8406 	br	9804 <__alt_exception_stack_pointer+0xf8009804>
    99f4:	d9402e17 	ldw	r5,184(sp)
    99f8:	d9002e17 	ldw	r4,184(sp)
    99fc:	ac400043 	ldbu	r17,1(r21)
    9a00:	29400017 	ldw	r5,0(r5)
    9a04:	20800104 	addi	r2,r4,4
    9a08:	d8802e15 	stw	r2,184(sp)
    9a0c:	d9402a15 	stw	r5,168(sp)
    9a10:	182b883a 	mov	r21,r3
    9a14:	283e7b0e 	bge	r5,zero,9404 <__alt_exception_stack_pointer+0xf8009404>
    9a18:	8c403fcc 	andi	r17,r17,255
    9a1c:	017fffc4 	movi	r5,-1
    9a20:	8c40201c 	xori	r17,r17,128
    9a24:	d9402a15 	stw	r5,168(sp)
    9a28:	8c7fe004 	addi	r17,r17,-128
    9a2c:	0037d706 	br	798c <__alt_exception_stack_pointer+0xf800798c>
    9a30:	d8c02a17 	ldw	r3,168(sp)
    9a34:	18c00084 	addi	r3,r3,2
    9a38:	d8c02b15 	stw	r3,172(sp)
    9a3c:	1805883a 	mov	r2,r3
    9a40:	183d970e 	bge	r3,zero,90a0 <__alt_exception_stack_pointer+0xf80090a0>
    9a44:	003fd706 	br	99a4 <__alt_exception_stack_pointer+0xf80099a4>
    9a48:	0005883a 	mov	r2,zero
    9a4c:	003f8f06 	br	988c <__alt_exception_stack_pointer+0xf800988c>
    9a50:	9080004c 	andi	r2,r18,1
    9a54:	103f821e 	bne	r2,zero,9860 <__alt_exception_stack_pointer+0xf8009860>
    9a58:	d8802117 	ldw	r2,132(sp)
    9a5c:	1405c83a 	sub	r2,r2,r16
    9a60:	d8803315 	stw	r2,204(sp)
    9a64:	b47ef426 	beq	r22,r17,9638 <__alt_exception_stack_pointer+0xf8009638>
    9a68:	dd802617 	ldw	r22,152(sp)
    9a6c:	003f1206 	br	96b8 <__alt_exception_stack_pointer+0xf80096b8>
    9a70:	d8c02b03 	ldbu	r3,172(sp)
    9a74:	d8c02785 	stb	r3,158(sp)
    9a78:	0038df06 	br	7df8 <__alt_exception_stack_pointer+0xf8007df8>
    9a7c:	d8c02b03 	ldbu	r3,172(sp)
    9a80:	d8c02785 	stb	r3,158(sp)
    9a84:	0038aa06 	br	7d30 <__alt_exception_stack_pointer+0xf8007d30>
    9a88:	d8c02b03 	ldbu	r3,172(sp)
    9a8c:	d8c02785 	stb	r3,158(sp)
    9a90:	003a4306 	br	83a0 <__alt_exception_stack_pointer+0xf80083a0>
    9a94:	d8c02b03 	ldbu	r3,172(sp)
    9a98:	d8c02785 	stb	r3,158(sp)
    9a9c:	003af506 	br	8674 <__alt_exception_stack_pointer+0xf8008674>
    9aa0:	0005883a 	mov	r2,zero
    9aa4:	003d7b06 	br	9094 <__alt_exception_stack_pointer+0xf8009094>
    9aa8:	d8802344 	addi	r2,sp,141
    9aac:	003f1006 	br	96f0 <__alt_exception_stack_pointer+0xf80096f0>
    9ab0:	d8c02b03 	ldbu	r3,172(sp)
    9ab4:	d8c02785 	stb	r3,158(sp)
    9ab8:	0038fd06 	br	7eb0 <__alt_exception_stack_pointer+0xf8007eb0>
    9abc:	d8c02b03 	ldbu	r3,172(sp)
    9ac0:	d8c02785 	stb	r3,158(sp)
    9ac4:	003a9706 	br	8524 <__alt_exception_stack_pointer+0xf8008524>
    9ac8:	d8c02b03 	ldbu	r3,172(sp)
    9acc:	d8c02785 	stb	r3,158(sp)
    9ad0:	003a1806 	br	8334 <__alt_exception_stack_pointer+0xf8008334>
    9ad4:	d8c02b03 	ldbu	r3,172(sp)
    9ad8:	d8c02785 	stb	r3,158(sp)
    9adc:	003abe06 	br	85d8 <__alt_exception_stack_pointer+0xf80085d8>

00009ae0 <__vfprintf_internal>:
    9ae0:	00800074 	movhi	r2,1
    9ae4:	109c7304 	addi	r2,r2,29132
    9ae8:	300f883a 	mov	r7,r6
    9aec:	280d883a 	mov	r6,r5
    9af0:	200b883a 	mov	r5,r4
    9af4:	11000017 	ldw	r4,0(r2)
    9af8:	00078041 	jmpi	7804 <___vfprintf_internal_r>

00009afc <__sbprintf>:
    9afc:	2880030b 	ldhu	r2,12(r5)
    9b00:	2ac01917 	ldw	r11,100(r5)
    9b04:	2a80038b 	ldhu	r10,14(r5)
    9b08:	2a400717 	ldw	r9,28(r5)
    9b0c:	2a000917 	ldw	r8,36(r5)
    9b10:	defee204 	addi	sp,sp,-1144
    9b14:	00c10004 	movi	r3,1024
    9b18:	dc011a15 	stw	r16,1128(sp)
    9b1c:	10bfff4c 	andi	r2,r2,65533
    9b20:	2821883a 	mov	r16,r5
    9b24:	d8cb883a 	add	r5,sp,r3
    9b28:	dc811c15 	stw	r18,1136(sp)
    9b2c:	dc411b15 	stw	r17,1132(sp)
    9b30:	dfc11d15 	stw	ra,1140(sp)
    9b34:	2025883a 	mov	r18,r4
    9b38:	d881030d 	sth	r2,1036(sp)
    9b3c:	dac11915 	stw	r11,1124(sp)
    9b40:	da81038d 	sth	r10,1038(sp)
    9b44:	da410715 	stw	r9,1052(sp)
    9b48:	da010915 	stw	r8,1060(sp)
    9b4c:	dec10015 	stw	sp,1024(sp)
    9b50:	dec10415 	stw	sp,1040(sp)
    9b54:	d8c10215 	stw	r3,1032(sp)
    9b58:	d8c10515 	stw	r3,1044(sp)
    9b5c:	d8010615 	stw	zero,1048(sp)
    9b60:	00078040 	call	7804 <___vfprintf_internal_r>
    9b64:	1023883a 	mov	r17,r2
    9b68:	10000416 	blt	r2,zero,9b7c <__sbprintf+0x80>
    9b6c:	d9410004 	addi	r5,sp,1024
    9b70:	9009883a 	mov	r4,r18
    9b74:	000b7d80 	call	b7d8 <_fflush_r>
    9b78:	10000d1e 	bne	r2,zero,9bb0 <__sbprintf+0xb4>
    9b7c:	d881030b 	ldhu	r2,1036(sp)
    9b80:	1080100c 	andi	r2,r2,64
    9b84:	10000326 	beq	r2,zero,9b94 <__sbprintf+0x98>
    9b88:	8080030b 	ldhu	r2,12(r16)
    9b8c:	10801014 	ori	r2,r2,64
    9b90:	8080030d 	sth	r2,12(r16)
    9b94:	8805883a 	mov	r2,r17
    9b98:	dfc11d17 	ldw	ra,1140(sp)
    9b9c:	dc811c17 	ldw	r18,1136(sp)
    9ba0:	dc411b17 	ldw	r17,1132(sp)
    9ba4:	dc011a17 	ldw	r16,1128(sp)
    9ba8:	dec11e04 	addi	sp,sp,1144
    9bac:	f800283a 	ret
    9bb0:	047fffc4 	movi	r17,-1
    9bb4:	003ff106 	br	9b7c <__alt_exception_stack_pointer+0xf8009b7c>

00009bb8 <__swsetup_r>:
    9bb8:	00800074 	movhi	r2,1
    9bbc:	defffd04 	addi	sp,sp,-12
    9bc0:	109c7304 	addi	r2,r2,29132
    9bc4:	dc400115 	stw	r17,4(sp)
    9bc8:	2023883a 	mov	r17,r4
    9bcc:	11000017 	ldw	r4,0(r2)
    9bd0:	dc000015 	stw	r16,0(sp)
    9bd4:	dfc00215 	stw	ra,8(sp)
    9bd8:	2821883a 	mov	r16,r5
    9bdc:	20000226 	beq	r4,zero,9be8 <__swsetup_r+0x30>
    9be0:	20800e17 	ldw	r2,56(r4)
    9be4:	10003126 	beq	r2,zero,9cac <__swsetup_r+0xf4>
    9be8:	8080030b 	ldhu	r2,12(r16)
    9bec:	10c0020c 	andi	r3,r2,8
    9bf0:	1009883a 	mov	r4,r2
    9bf4:	18000f26 	beq	r3,zero,9c34 <__swsetup_r+0x7c>
    9bf8:	80c00417 	ldw	r3,16(r16)
    9bfc:	18001526 	beq	r3,zero,9c54 <__swsetup_r+0x9c>
    9c00:	1100004c 	andi	r4,r2,1
    9c04:	20001c1e 	bne	r4,zero,9c78 <__swsetup_r+0xc0>
    9c08:	1080008c 	andi	r2,r2,2
    9c0c:	1000291e 	bne	r2,zero,9cb4 <__swsetup_r+0xfc>
    9c10:	80800517 	ldw	r2,20(r16)
    9c14:	80800215 	stw	r2,8(r16)
    9c18:	18001c26 	beq	r3,zero,9c8c <__swsetup_r+0xd4>
    9c1c:	0005883a 	mov	r2,zero
    9c20:	dfc00217 	ldw	ra,8(sp)
    9c24:	dc400117 	ldw	r17,4(sp)
    9c28:	dc000017 	ldw	r16,0(sp)
    9c2c:	dec00304 	addi	sp,sp,12
    9c30:	f800283a 	ret
    9c34:	2080040c 	andi	r2,r4,16
    9c38:	10002e26 	beq	r2,zero,9cf4 <__swsetup_r+0x13c>
    9c3c:	2080010c 	andi	r2,r4,4
    9c40:	10001e1e 	bne	r2,zero,9cbc <__swsetup_r+0x104>
    9c44:	80c00417 	ldw	r3,16(r16)
    9c48:	20800214 	ori	r2,r4,8
    9c4c:	8080030d 	sth	r2,12(r16)
    9c50:	183feb1e 	bne	r3,zero,9c00 <__alt_exception_stack_pointer+0xf8009c00>
    9c54:	1100a00c 	andi	r4,r2,640
    9c58:	01408004 	movi	r5,512
    9c5c:	217fe826 	beq	r4,r5,9c00 <__alt_exception_stack_pointer+0xf8009c00>
    9c60:	800b883a 	mov	r5,r16
    9c64:	8809883a 	mov	r4,r17
    9c68:	000c7740 	call	c774 <__smakebuf_r>
    9c6c:	8080030b 	ldhu	r2,12(r16)
    9c70:	80c00417 	ldw	r3,16(r16)
    9c74:	003fe206 	br	9c00 <__alt_exception_stack_pointer+0xf8009c00>
    9c78:	80800517 	ldw	r2,20(r16)
    9c7c:	80000215 	stw	zero,8(r16)
    9c80:	0085c83a 	sub	r2,zero,r2
    9c84:	80800615 	stw	r2,24(r16)
    9c88:	183fe41e 	bne	r3,zero,9c1c <__alt_exception_stack_pointer+0xf8009c1c>
    9c8c:	80c0030b 	ldhu	r3,12(r16)
    9c90:	0005883a 	mov	r2,zero
    9c94:	1900200c 	andi	r4,r3,128
    9c98:	203fe126 	beq	r4,zero,9c20 <__alt_exception_stack_pointer+0xf8009c20>
    9c9c:	18c01014 	ori	r3,r3,64
    9ca0:	80c0030d 	sth	r3,12(r16)
    9ca4:	00bfffc4 	movi	r2,-1
    9ca8:	003fdd06 	br	9c20 <__alt_exception_stack_pointer+0xf8009c20>
    9cac:	000bbc40 	call	bbc4 <__sinit>
    9cb0:	003fcd06 	br	9be8 <__alt_exception_stack_pointer+0xf8009be8>
    9cb4:	0005883a 	mov	r2,zero
    9cb8:	003fd606 	br	9c14 <__alt_exception_stack_pointer+0xf8009c14>
    9cbc:	81400c17 	ldw	r5,48(r16)
    9cc0:	28000626 	beq	r5,zero,9cdc <__swsetup_r+0x124>
    9cc4:	80801004 	addi	r2,r16,64
    9cc8:	28800326 	beq	r5,r2,9cd8 <__swsetup_r+0x120>
    9ccc:	8809883a 	mov	r4,r17
    9cd0:	000bd380 	call	bd38 <_free_r>
    9cd4:	8100030b 	ldhu	r4,12(r16)
    9cd8:	80000c15 	stw	zero,48(r16)
    9cdc:	80c00417 	ldw	r3,16(r16)
    9ce0:	00bff6c4 	movi	r2,-37
    9ce4:	1108703a 	and	r4,r2,r4
    9ce8:	80000115 	stw	zero,4(r16)
    9cec:	80c00015 	stw	r3,0(r16)
    9cf0:	003fd506 	br	9c48 <__alt_exception_stack_pointer+0xf8009c48>
    9cf4:	00800244 	movi	r2,9
    9cf8:	88800015 	stw	r2,0(r17)
    9cfc:	20801014 	ori	r2,r4,64
    9d00:	8080030d 	sth	r2,12(r16)
    9d04:	00bfffc4 	movi	r2,-1
    9d08:	003fc506 	br	9c20 <__alt_exception_stack_pointer+0xf8009c20>

00009d0c <quorem>:
    9d0c:	defff204 	addi	sp,sp,-56
    9d10:	ddc00b15 	stw	r23,44(sp)
    9d14:	20800417 	ldw	r2,16(r4)
    9d18:	2dc00417 	ldw	r23,16(r5)
    9d1c:	dfc00d15 	stw	ra,52(sp)
    9d20:	df000c15 	stw	fp,48(sp)
    9d24:	dd800a15 	stw	r22,40(sp)
    9d28:	dd400915 	stw	r21,36(sp)
    9d2c:	dd000815 	stw	r20,32(sp)
    9d30:	dcc00715 	stw	r19,28(sp)
    9d34:	dc800615 	stw	r18,24(sp)
    9d38:	dc400515 	stw	r17,20(sp)
    9d3c:	dc000415 	stw	r16,16(sp)
    9d40:	15c07a16 	blt	r2,r23,9f2c <quorem+0x220>
    9d44:	bdffffc4 	addi	r23,r23,-1
    9d48:	bde9883a 	add	r20,r23,r23
    9d4c:	28c00504 	addi	r3,r5,20
    9d50:	a529883a 	add	r20,r20,r20
    9d54:	1d39883a 	add	fp,r3,r20
    9d58:	24c00504 	addi	r19,r4,20
    9d5c:	d9400215 	stw	r5,8(sp)
    9d60:	9d29883a 	add	r20,r19,r20
    9d64:	e1400017 	ldw	r5,0(fp)
    9d68:	d9000015 	stw	r4,0(sp)
    9d6c:	a1000017 	ldw	r4,0(r20)
    9d70:	29400044 	addi	r5,r5,1
    9d74:	d8c00115 	stw	r3,4(sp)
    9d78:	dd000315 	stw	r20,12(sp)
    9d7c:	0004dec0 	call	4dec <__udivsi3>
    9d80:	1025883a 	mov	r18,r2
    9d84:	10003026 	beq	r2,zero,9e48 <quorem+0x13c>
    9d88:	dc400117 	ldw	r17,4(sp)
    9d8c:	9829883a 	mov	r20,r19
    9d90:	002d883a 	mov	r22,zero
    9d94:	0021883a 	mov	r16,zero
    9d98:	8d400017 	ldw	r21,0(r17)
    9d9c:	900b883a 	mov	r5,r18
    9da0:	8c400104 	addi	r17,r17,4
    9da4:	a93fffcc 	andi	r4,r21,65535
    9da8:	0004ea80 	call	4ea8 <__mulsi3>
    9dac:	a808d43a 	srli	r4,r21,16
    9db0:	900b883a 	mov	r5,r18
    9db4:	15ad883a 	add	r22,r2,r22
    9db8:	0004ea80 	call	4ea8 <__mulsi3>
    9dbc:	a1000017 	ldw	r4,0(r20)
    9dc0:	b00cd43a 	srli	r6,r22,16
    9dc4:	b0ffffcc 	andi	r3,r22,65535
    9dc8:	217fffcc 	andi	r5,r4,65535
    9dcc:	2c21883a 	add	r16,r5,r16
    9dd0:	80c7c83a 	sub	r3,r16,r3
    9dd4:	2008d43a 	srli	r4,r4,16
    9dd8:	1185883a 	add	r2,r2,r6
    9ddc:	1821d43a 	srai	r16,r3,16
    9de0:	117fffcc 	andi	r5,r2,65535
    9de4:	2149c83a 	sub	r4,r4,r5
    9de8:	2421883a 	add	r16,r4,r16
    9dec:	8008943a 	slli	r4,r16,16
    9df0:	18ffffcc 	andi	r3,r3,65535
    9df4:	102cd43a 	srli	r22,r2,16
    9df8:	20c8b03a 	or	r4,r4,r3
    9dfc:	a1000015 	stw	r4,0(r20)
    9e00:	8021d43a 	srai	r16,r16,16
    9e04:	a5000104 	addi	r20,r20,4
    9e08:	e47fe32e 	bgeu	fp,r17,9d98 <__alt_exception_stack_pointer+0xf8009d98>
    9e0c:	d8c00317 	ldw	r3,12(sp)
    9e10:	18800017 	ldw	r2,0(r3)
    9e14:	10000c1e 	bne	r2,zero,9e48 <quorem+0x13c>
    9e18:	18bfff04 	addi	r2,r3,-4
    9e1c:	9880082e 	bgeu	r19,r2,9e40 <quorem+0x134>
    9e20:	18ffff17 	ldw	r3,-4(r3)
    9e24:	18000326 	beq	r3,zero,9e34 <quorem+0x128>
    9e28:	00000506 	br	9e40 <quorem+0x134>
    9e2c:	10c00017 	ldw	r3,0(r2)
    9e30:	1800031e 	bne	r3,zero,9e40 <quorem+0x134>
    9e34:	10bfff04 	addi	r2,r2,-4
    9e38:	bdffffc4 	addi	r23,r23,-1
    9e3c:	98bffb36 	bltu	r19,r2,9e2c <__alt_exception_stack_pointer+0xf8009e2c>
    9e40:	d8c00017 	ldw	r3,0(sp)
    9e44:	1dc00415 	stw	r23,16(r3)
    9e48:	d9400217 	ldw	r5,8(sp)
    9e4c:	d9000017 	ldw	r4,0(sp)
    9e50:	000d61c0 	call	d61c <__mcmp>
    9e54:	10002816 	blt	r2,zero,9ef8 <quorem+0x1ec>
    9e58:	dc400117 	ldw	r17,4(sp)
    9e5c:	94800044 	addi	r18,r18,1
    9e60:	980d883a 	mov	r6,r19
    9e64:	0007883a 	mov	r3,zero
    9e68:	31000017 	ldw	r4,0(r6)
    9e6c:	89400017 	ldw	r5,0(r17)
    9e70:	31800104 	addi	r6,r6,4
    9e74:	20bfffcc 	andi	r2,r4,65535
    9e78:	10c7883a 	add	r3,r2,r3
    9e7c:	28bfffcc 	andi	r2,r5,65535
    9e80:	1885c83a 	sub	r2,r3,r2
    9e84:	280ad43a 	srli	r5,r5,16
    9e88:	2008d43a 	srli	r4,r4,16
    9e8c:	1007d43a 	srai	r3,r2,16
    9e90:	10bfffcc 	andi	r2,r2,65535
    9e94:	2149c83a 	sub	r4,r4,r5
    9e98:	20c9883a 	add	r4,r4,r3
    9e9c:	200a943a 	slli	r5,r4,16
    9ea0:	8c400104 	addi	r17,r17,4
    9ea4:	2007d43a 	srai	r3,r4,16
    9ea8:	2884b03a 	or	r2,r5,r2
    9eac:	30bfff15 	stw	r2,-4(r6)
    9eb0:	e47fed2e 	bgeu	fp,r17,9e68 <__alt_exception_stack_pointer+0xf8009e68>
    9eb4:	bdc5883a 	add	r2,r23,r23
    9eb8:	1085883a 	add	r2,r2,r2
    9ebc:	9887883a 	add	r3,r19,r2
    9ec0:	18800017 	ldw	r2,0(r3)
    9ec4:	10000c1e 	bne	r2,zero,9ef8 <quorem+0x1ec>
    9ec8:	18bfff04 	addi	r2,r3,-4
    9ecc:	9880082e 	bgeu	r19,r2,9ef0 <quorem+0x1e4>
    9ed0:	18ffff17 	ldw	r3,-4(r3)
    9ed4:	18000326 	beq	r3,zero,9ee4 <quorem+0x1d8>
    9ed8:	00000506 	br	9ef0 <quorem+0x1e4>
    9edc:	10c00017 	ldw	r3,0(r2)
    9ee0:	1800031e 	bne	r3,zero,9ef0 <quorem+0x1e4>
    9ee4:	10bfff04 	addi	r2,r2,-4
    9ee8:	bdffffc4 	addi	r23,r23,-1
    9eec:	98bffb36 	bltu	r19,r2,9edc <__alt_exception_stack_pointer+0xf8009edc>
    9ef0:	d8c00017 	ldw	r3,0(sp)
    9ef4:	1dc00415 	stw	r23,16(r3)
    9ef8:	9005883a 	mov	r2,r18
    9efc:	dfc00d17 	ldw	ra,52(sp)
    9f00:	df000c17 	ldw	fp,48(sp)
    9f04:	ddc00b17 	ldw	r23,44(sp)
    9f08:	dd800a17 	ldw	r22,40(sp)
    9f0c:	dd400917 	ldw	r21,36(sp)
    9f10:	dd000817 	ldw	r20,32(sp)
    9f14:	dcc00717 	ldw	r19,28(sp)
    9f18:	dc800617 	ldw	r18,24(sp)
    9f1c:	dc400517 	ldw	r17,20(sp)
    9f20:	dc000417 	ldw	r16,16(sp)
    9f24:	dec00e04 	addi	sp,sp,56
    9f28:	f800283a 	ret
    9f2c:	0005883a 	mov	r2,zero
    9f30:	003ff206 	br	9efc <__alt_exception_stack_pointer+0xf8009efc>

00009f34 <_dtoa_r>:
    9f34:	20801017 	ldw	r2,64(r4)
    9f38:	deffde04 	addi	sp,sp,-136
    9f3c:	df002015 	stw	fp,128(sp)
    9f40:	dcc01b15 	stw	r19,108(sp)
    9f44:	dc801a15 	stw	r18,104(sp)
    9f48:	dc401915 	stw	r17,100(sp)
    9f4c:	dc001815 	stw	r16,96(sp)
    9f50:	dfc02115 	stw	ra,132(sp)
    9f54:	ddc01f15 	stw	r23,124(sp)
    9f58:	dd801e15 	stw	r22,120(sp)
    9f5c:	dd401d15 	stw	r21,116(sp)
    9f60:	dd001c15 	stw	r20,112(sp)
    9f64:	d9c00315 	stw	r7,12(sp)
    9f68:	2039883a 	mov	fp,r4
    9f6c:	3023883a 	mov	r17,r6
    9f70:	2825883a 	mov	r18,r5
    9f74:	dc002417 	ldw	r16,144(sp)
    9f78:	3027883a 	mov	r19,r6
    9f7c:	10000826 	beq	r2,zero,9fa0 <_dtoa_r+0x6c>
    9f80:	21801117 	ldw	r6,68(r4)
    9f84:	00c00044 	movi	r3,1
    9f88:	100b883a 	mov	r5,r2
    9f8c:	1986983a 	sll	r3,r3,r6
    9f90:	11800115 	stw	r6,4(r2)
    9f94:	10c00215 	stw	r3,8(r2)
    9f98:	000cd400 	call	cd40 <_Bfree>
    9f9c:	e0001015 	stw	zero,64(fp)
    9fa0:	88002e16 	blt	r17,zero,a05c <_dtoa_r+0x128>
    9fa4:	80000015 	stw	zero,0(r16)
    9fa8:	889ffc2c 	andhi	r2,r17,32752
    9fac:	00dffc34 	movhi	r3,32752
    9fb0:	10c01c26 	beq	r2,r3,a024 <_dtoa_r+0xf0>
    9fb4:	000d883a 	mov	r6,zero
    9fb8:	000f883a 	mov	r7,zero
    9fbc:	9009883a 	mov	r4,r18
    9fc0:	980b883a 	mov	r5,r19
    9fc4:	000577c0 	call	577c <__eqdf2>
    9fc8:	10002b1e 	bne	r2,zero,a078 <_dtoa_r+0x144>
    9fcc:	d9c02317 	ldw	r7,140(sp)
    9fd0:	00800044 	movi	r2,1
    9fd4:	38800015 	stw	r2,0(r7)
    9fd8:	d8802517 	ldw	r2,148(sp)
    9fdc:	10019e26 	beq	r2,zero,a658 <_dtoa_r+0x724>
    9fe0:	d8c02517 	ldw	r3,148(sp)
    9fe4:	00800074 	movhi	r2,1
    9fe8:	10952544 	addi	r2,r2,21653
    9fec:	18800015 	stw	r2,0(r3)
    9ff0:	10bfffc4 	addi	r2,r2,-1
    9ff4:	dfc02117 	ldw	ra,132(sp)
    9ff8:	df002017 	ldw	fp,128(sp)
    9ffc:	ddc01f17 	ldw	r23,124(sp)
    a000:	dd801e17 	ldw	r22,120(sp)
    a004:	dd401d17 	ldw	r21,116(sp)
    a008:	dd001c17 	ldw	r20,112(sp)
    a00c:	dcc01b17 	ldw	r19,108(sp)
    a010:	dc801a17 	ldw	r18,104(sp)
    a014:	dc401917 	ldw	r17,100(sp)
    a018:	dc001817 	ldw	r16,96(sp)
    a01c:	dec02204 	addi	sp,sp,136
    a020:	f800283a 	ret
    a024:	d8c02317 	ldw	r3,140(sp)
    a028:	0089c3c4 	movi	r2,9999
    a02c:	18800015 	stw	r2,0(r3)
    a030:	90017726 	beq	r18,zero,a610 <_dtoa_r+0x6dc>
    a034:	00800074 	movhi	r2,1
    a038:	10953104 	addi	r2,r2,21700
    a03c:	d9002517 	ldw	r4,148(sp)
    a040:	203fec26 	beq	r4,zero,9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a044:	10c000c7 	ldb	r3,3(r2)
    a048:	1801781e 	bne	r3,zero,a62c <_dtoa_r+0x6f8>
    a04c:	10c000c4 	addi	r3,r2,3
    a050:	d9802517 	ldw	r6,148(sp)
    a054:	30c00015 	stw	r3,0(r6)
    a058:	003fe606 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a05c:	04e00034 	movhi	r19,32768
    a060:	9cffffc4 	addi	r19,r19,-1
    a064:	00800044 	movi	r2,1
    a068:	8ce6703a 	and	r19,r17,r19
    a06c:	80800015 	stw	r2,0(r16)
    a070:	9823883a 	mov	r17,r19
    a074:	003fcc06 	br	9fa8 <__alt_exception_stack_pointer+0xf8009fa8>
    a078:	d8800204 	addi	r2,sp,8
    a07c:	d8800015 	stw	r2,0(sp)
    a080:	d9c00104 	addi	r7,sp,4
    a084:	900b883a 	mov	r5,r18
    a088:	980d883a 	mov	r6,r19
    a08c:	e009883a 	mov	r4,fp
    a090:	8820d53a 	srli	r16,r17,20
    a094:	000d9e80 	call	d9e8 <__d2b>
    a098:	d8800915 	stw	r2,36(sp)
    a09c:	8001651e 	bne	r16,zero,a634 <_dtoa_r+0x700>
    a0a0:	dd800217 	ldw	r22,8(sp)
    a0a4:	dc000117 	ldw	r16,4(sp)
    a0a8:	00800804 	movi	r2,32
    a0ac:	b421883a 	add	r16,r22,r16
    a0b0:	80c10c84 	addi	r3,r16,1074
    a0b4:	10c2d10e 	bge	r2,r3,abfc <_dtoa_r+0xcc8>
    a0b8:	00801004 	movi	r2,64
    a0bc:	81010484 	addi	r4,r16,1042
    a0c0:	10c7c83a 	sub	r3,r2,r3
    a0c4:	9108d83a 	srl	r4,r18,r4
    a0c8:	88e2983a 	sll	r17,r17,r3
    a0cc:	2448b03a 	or	r4,r4,r17
    a0d0:	0011c080 	call	11c08 <__floatunsidf>
    a0d4:	017f8434 	movhi	r5,65040
    a0d8:	01800044 	movi	r6,1
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	194b883a 	add	r5,r3,r5
    a0e4:	843fffc4 	addi	r16,r16,-1
    a0e8:	d9801115 	stw	r6,68(sp)
    a0ec:	000d883a 	mov	r6,zero
    a0f0:	01cffe34 	movhi	r7,16376
    a0f4:	000614c0 	call	614c <__subdf3>
    a0f8:	0198dbf4 	movhi	r6,25455
    a0fc:	01cff4f4 	movhi	r7,16339
    a100:	3190d844 	addi	r6,r6,17249
    a104:	39e1e9c4 	addi	r7,r7,-30809
    a108:	1009883a 	mov	r4,r2
    a10c:	180b883a 	mov	r5,r3
    a110:	00058e00 	call	58e0 <__muldf3>
    a114:	01a2d874 	movhi	r6,35681
    a118:	01cff1f4 	movhi	r7,16327
    a11c:	31b22cc4 	addi	r6,r6,-14157
    a120:	39e28a04 	addi	r7,r7,-30168
    a124:	180b883a 	mov	r5,r3
    a128:	1009883a 	mov	r4,r2
    a12c:	0004ed00 	call	4ed0 <__adddf3>
    a130:	8009883a 	mov	r4,r16
    a134:	1029883a 	mov	r20,r2
    a138:	1823883a 	mov	r17,r3
    a13c:	0006ac80 	call	6ac8 <__floatsidf>
    a140:	019427f4 	movhi	r6,20639
    a144:	01cff4f4 	movhi	r7,16339
    a148:	319e7ec4 	addi	r6,r6,31227
    a14c:	39d104c4 	addi	r7,r7,17427
    a150:	1009883a 	mov	r4,r2
    a154:	180b883a 	mov	r5,r3
    a158:	00058e00 	call	58e0 <__muldf3>
    a15c:	100d883a 	mov	r6,r2
    a160:	180f883a 	mov	r7,r3
    a164:	a009883a 	mov	r4,r20
    a168:	880b883a 	mov	r5,r17
    a16c:	0004ed00 	call	4ed0 <__adddf3>
    a170:	1009883a 	mov	r4,r2
    a174:	180b883a 	mov	r5,r3
    a178:	1029883a 	mov	r20,r2
    a17c:	1823883a 	mov	r17,r3
    a180:	0006a480 	call	6a48 <__fixdfsi>
    a184:	000d883a 	mov	r6,zero
    a188:	000f883a 	mov	r7,zero
    a18c:	a009883a 	mov	r4,r20
    a190:	880b883a 	mov	r5,r17
    a194:	d8800515 	stw	r2,20(sp)
    a198:	0011b140 	call	11b14 <__ledf2>
    a19c:	10028716 	blt	r2,zero,abbc <_dtoa_r+0xc88>
    a1a0:	d8c00517 	ldw	r3,20(sp)
    a1a4:	00800584 	movi	r2,22
    a1a8:	10c27536 	bltu	r2,r3,ab80 <_dtoa_r+0xc4c>
    a1ac:	180490fa 	slli	r2,r3,3
    a1b0:	00c00074 	movhi	r3,1
    a1b4:	18d54c04 	addi	r3,r3,21808
    a1b8:	1885883a 	add	r2,r3,r2
    a1bc:	11000017 	ldw	r4,0(r2)
    a1c0:	11400117 	ldw	r5,4(r2)
    a1c4:	900d883a 	mov	r6,r18
    a1c8:	980f883a 	mov	r7,r19
    a1cc:	00058040 	call	5804 <__gedf2>
    a1d0:	00828d0e 	bge	zero,r2,ac08 <_dtoa_r+0xcd4>
    a1d4:	d9000517 	ldw	r4,20(sp)
    a1d8:	d8000e15 	stw	zero,56(sp)
    a1dc:	213fffc4 	addi	r4,r4,-1
    a1e0:	d9000515 	stw	r4,20(sp)
    a1e4:	b42dc83a 	sub	r22,r22,r16
    a1e8:	b5bfffc4 	addi	r22,r22,-1
    a1ec:	b0026f16 	blt	r22,zero,abac <_dtoa_r+0xc78>
    a1f0:	d8000815 	stw	zero,32(sp)
    a1f4:	d9c00517 	ldw	r7,20(sp)
    a1f8:	38026416 	blt	r7,zero,ab8c <_dtoa_r+0xc58>
    a1fc:	b1ed883a 	add	r22,r22,r7
    a200:	d9c00d15 	stw	r7,52(sp)
    a204:	d8000a15 	stw	zero,40(sp)
    a208:	d9800317 	ldw	r6,12(sp)
    a20c:	00800244 	movi	r2,9
    a210:	11811436 	bltu	r2,r6,a664 <_dtoa_r+0x730>
    a214:	00800144 	movi	r2,5
    a218:	1184e10e 	bge	r2,r6,b5a0 <_dtoa_r+0x166c>
    a21c:	31bfff04 	addi	r6,r6,-4
    a220:	d9800315 	stw	r6,12(sp)
    a224:	0023883a 	mov	r17,zero
    a228:	d9800317 	ldw	r6,12(sp)
    a22c:	008000c4 	movi	r2,3
    a230:	30836726 	beq	r6,r2,afd0 <_dtoa_r+0x109c>
    a234:	1183410e 	bge	r2,r6,af3c <_dtoa_r+0x1008>
    a238:	d9c00317 	ldw	r7,12(sp)
    a23c:	00800104 	movi	r2,4
    a240:	38827c26 	beq	r7,r2,ac34 <_dtoa_r+0xd00>
    a244:	00800144 	movi	r2,5
    a248:	3884c41e 	bne	r7,r2,b55c <_dtoa_r+0x1628>
    a24c:	00800044 	movi	r2,1
    a250:	d8800b15 	stw	r2,44(sp)
    a254:	d8c00517 	ldw	r3,20(sp)
    a258:	d9002217 	ldw	r4,136(sp)
    a25c:	1907883a 	add	r3,r3,r4
    a260:	19800044 	addi	r6,r3,1
    a264:	d8c00c15 	stw	r3,48(sp)
    a268:	d9800615 	stw	r6,24(sp)
    a26c:	0183a40e 	bge	zero,r6,b100 <_dtoa_r+0x11cc>
    a270:	d9800617 	ldw	r6,24(sp)
    a274:	3021883a 	mov	r16,r6
    a278:	e0001115 	stw	zero,68(fp)
    a27c:	008005c4 	movi	r2,23
    a280:	1184c92e 	bgeu	r2,r6,b5a8 <_dtoa_r+0x1674>
    a284:	00c00044 	movi	r3,1
    a288:	00800104 	movi	r2,4
    a28c:	1085883a 	add	r2,r2,r2
    a290:	11000504 	addi	r4,r2,20
    a294:	180b883a 	mov	r5,r3
    a298:	18c00044 	addi	r3,r3,1
    a29c:	313ffb2e 	bgeu	r6,r4,a28c <__alt_exception_stack_pointer+0xf800a28c>
    a2a0:	e1401115 	stw	r5,68(fp)
    a2a4:	e009883a 	mov	r4,fp
    a2a8:	000cc980 	call	cc98 <_Balloc>
    a2ac:	d8800715 	stw	r2,28(sp)
    a2b0:	e0801015 	stw	r2,64(fp)
    a2b4:	00800384 	movi	r2,14
    a2b8:	1400f736 	bltu	r2,r16,a698 <_dtoa_r+0x764>
    a2bc:	8800f626 	beq	r17,zero,a698 <_dtoa_r+0x764>
    a2c0:	d9c00517 	ldw	r7,20(sp)
    a2c4:	01c39a0e 	bge	zero,r7,b130 <_dtoa_r+0x11fc>
    a2c8:	388003cc 	andi	r2,r7,15
    a2cc:	100490fa 	slli	r2,r2,3
    a2d0:	382bd13a 	srai	r21,r7,4
    a2d4:	00c00074 	movhi	r3,1
    a2d8:	18d54c04 	addi	r3,r3,21808
    a2dc:	1885883a 	add	r2,r3,r2
    a2e0:	a8c0040c 	andi	r3,r21,16
    a2e4:	12400017 	ldw	r9,0(r2)
    a2e8:	12000117 	ldw	r8,4(r2)
    a2ec:	18037926 	beq	r3,zero,b0d4 <_dtoa_r+0x11a0>
    a2f0:	00800074 	movhi	r2,1
    a2f4:	10954204 	addi	r2,r2,21768
    a2f8:	11800817 	ldw	r6,32(r2)
    a2fc:	11c00917 	ldw	r7,36(r2)
    a300:	9009883a 	mov	r4,r18
    a304:	980b883a 	mov	r5,r19
    a308:	da001715 	stw	r8,92(sp)
    a30c:	da401615 	stw	r9,88(sp)
    a310:	00111440 	call	11144 <__divdf3>
    a314:	da001717 	ldw	r8,92(sp)
    a318:	da401617 	ldw	r9,88(sp)
    a31c:	ad4003cc 	andi	r21,r21,15
    a320:	040000c4 	movi	r16,3
    a324:	1023883a 	mov	r17,r2
    a328:	1829883a 	mov	r20,r3
    a32c:	a8001126 	beq	r21,zero,a374 <_dtoa_r+0x440>
    a330:	05c00074 	movhi	r23,1
    a334:	bdd54204 	addi	r23,r23,21768
    a338:	4805883a 	mov	r2,r9
    a33c:	4007883a 	mov	r3,r8
    a340:	a980004c 	andi	r6,r21,1
    a344:	1009883a 	mov	r4,r2
    a348:	a82bd07a 	srai	r21,r21,1
    a34c:	180b883a 	mov	r5,r3
    a350:	30000426 	beq	r6,zero,a364 <_dtoa_r+0x430>
    a354:	b9800017 	ldw	r6,0(r23)
    a358:	b9c00117 	ldw	r7,4(r23)
    a35c:	84000044 	addi	r16,r16,1
    a360:	00058e00 	call	58e0 <__muldf3>
    a364:	bdc00204 	addi	r23,r23,8
    a368:	a83ff51e 	bne	r21,zero,a340 <__alt_exception_stack_pointer+0xf800a340>
    a36c:	1013883a 	mov	r9,r2
    a370:	1811883a 	mov	r8,r3
    a374:	480d883a 	mov	r6,r9
    a378:	400f883a 	mov	r7,r8
    a37c:	8809883a 	mov	r4,r17
    a380:	a00b883a 	mov	r5,r20
    a384:	00111440 	call	11144 <__divdf3>
    a388:	d8800f15 	stw	r2,60(sp)
    a38c:	d8c01015 	stw	r3,64(sp)
    a390:	d8c00e17 	ldw	r3,56(sp)
    a394:	18000626 	beq	r3,zero,a3b0 <_dtoa_r+0x47c>
    a398:	d9000f17 	ldw	r4,60(sp)
    a39c:	d9401017 	ldw	r5,64(sp)
    a3a0:	000d883a 	mov	r6,zero
    a3a4:	01cffc34 	movhi	r7,16368
    a3a8:	0011b140 	call	11b14 <__ledf2>
    a3ac:	10040b16 	blt	r2,zero,b3dc <_dtoa_r+0x14a8>
    a3b0:	8009883a 	mov	r4,r16
    a3b4:	0006ac80 	call	6ac8 <__floatsidf>
    a3b8:	d9800f17 	ldw	r6,60(sp)
    a3bc:	d9c01017 	ldw	r7,64(sp)
    a3c0:	1009883a 	mov	r4,r2
    a3c4:	180b883a 	mov	r5,r3
    a3c8:	00058e00 	call	58e0 <__muldf3>
    a3cc:	000d883a 	mov	r6,zero
    a3d0:	01d00734 	movhi	r7,16412
    a3d4:	1009883a 	mov	r4,r2
    a3d8:	180b883a 	mov	r5,r3
    a3dc:	0004ed00 	call	4ed0 <__adddf3>
    a3e0:	1021883a 	mov	r16,r2
    a3e4:	d8800617 	ldw	r2,24(sp)
    a3e8:	047f3034 	movhi	r17,64704
    a3ec:	1c63883a 	add	r17,r3,r17
    a3f0:	10031826 	beq	r2,zero,b054 <_dtoa_r+0x1120>
    a3f4:	d8c00517 	ldw	r3,20(sp)
    a3f8:	db000617 	ldw	r12,24(sp)
    a3fc:	d8c01315 	stw	r3,76(sp)
    a400:	d9000b17 	ldw	r4,44(sp)
    a404:	20038f26 	beq	r4,zero,b244 <_dtoa_r+0x1310>
    a408:	60bfffc4 	addi	r2,r12,-1
    a40c:	100490fa 	slli	r2,r2,3
    a410:	00c00074 	movhi	r3,1
    a414:	18d54c04 	addi	r3,r3,21808
    a418:	1885883a 	add	r2,r3,r2
    a41c:	11800017 	ldw	r6,0(r2)
    a420:	11c00117 	ldw	r7,4(r2)
    a424:	d8800717 	ldw	r2,28(sp)
    a428:	0009883a 	mov	r4,zero
    a42c:	014ff834 	movhi	r5,16352
    a430:	db001615 	stw	r12,88(sp)
    a434:	15c00044 	addi	r23,r2,1
    a438:	00111440 	call	11144 <__divdf3>
    a43c:	800d883a 	mov	r6,r16
    a440:	880f883a 	mov	r7,r17
    a444:	1009883a 	mov	r4,r2
    a448:	180b883a 	mov	r5,r3
    a44c:	000614c0 	call	614c <__subdf3>
    a450:	d9401017 	ldw	r5,64(sp)
    a454:	d9000f17 	ldw	r4,60(sp)
    a458:	102b883a 	mov	r21,r2
    a45c:	d8c01215 	stw	r3,72(sp)
    a460:	0006a480 	call	6a48 <__fixdfsi>
    a464:	1009883a 	mov	r4,r2
    a468:	1029883a 	mov	r20,r2
    a46c:	0006ac80 	call	6ac8 <__floatsidf>
    a470:	d9000f17 	ldw	r4,60(sp)
    a474:	d9401017 	ldw	r5,64(sp)
    a478:	100d883a 	mov	r6,r2
    a47c:	180f883a 	mov	r7,r3
    a480:	000614c0 	call	614c <__subdf3>
    a484:	1823883a 	mov	r17,r3
    a488:	d8c00717 	ldw	r3,28(sp)
    a48c:	d9401217 	ldw	r5,72(sp)
    a490:	a2000c04 	addi	r8,r20,48
    a494:	1021883a 	mov	r16,r2
    a498:	1a000005 	stb	r8,0(r3)
    a49c:	800d883a 	mov	r6,r16
    a4a0:	880f883a 	mov	r7,r17
    a4a4:	a809883a 	mov	r4,r21
    a4a8:	4029883a 	mov	r20,r8
    a4ac:	00058040 	call	5804 <__gedf2>
    a4b0:	00841d16 	blt	zero,r2,b528 <_dtoa_r+0x15f4>
    a4b4:	800d883a 	mov	r6,r16
    a4b8:	880f883a 	mov	r7,r17
    a4bc:	0009883a 	mov	r4,zero
    a4c0:	014ffc34 	movhi	r5,16368
    a4c4:	000614c0 	call	614c <__subdf3>
    a4c8:	d9401217 	ldw	r5,72(sp)
    a4cc:	100d883a 	mov	r6,r2
    a4d0:	180f883a 	mov	r7,r3
    a4d4:	a809883a 	mov	r4,r21
    a4d8:	00058040 	call	5804 <__gedf2>
    a4dc:	db001617 	ldw	r12,88(sp)
    a4e0:	00840e16 	blt	zero,r2,b51c <_dtoa_r+0x15e8>
    a4e4:	00800044 	movi	r2,1
    a4e8:	13006b0e 	bge	r2,r12,a698 <_dtoa_r+0x764>
    a4ec:	d9000717 	ldw	r4,28(sp)
    a4f0:	dd800f15 	stw	r22,60(sp)
    a4f4:	dcc01015 	stw	r19,64(sp)
    a4f8:	2319883a 	add	r12,r4,r12
    a4fc:	dcc01217 	ldw	r19,72(sp)
    a500:	602d883a 	mov	r22,r12
    a504:	dc801215 	stw	r18,72(sp)
    a508:	b825883a 	mov	r18,r23
    a50c:	00000906 	br	a534 <_dtoa_r+0x600>
    a510:	000614c0 	call	614c <__subdf3>
    a514:	a80d883a 	mov	r6,r21
    a518:	980f883a 	mov	r7,r19
    a51c:	1009883a 	mov	r4,r2
    a520:	180b883a 	mov	r5,r3
    a524:	0011b140 	call	11b14 <__ledf2>
    a528:	1003e816 	blt	r2,zero,b4cc <_dtoa_r+0x1598>
    a52c:	b825883a 	mov	r18,r23
    a530:	bd83e926 	beq	r23,r22,b4d8 <_dtoa_r+0x15a4>
    a534:	a809883a 	mov	r4,r21
    a538:	980b883a 	mov	r5,r19
    a53c:	000d883a 	mov	r6,zero
    a540:	01d00934 	movhi	r7,16420
    a544:	00058e00 	call	58e0 <__muldf3>
    a548:	000d883a 	mov	r6,zero
    a54c:	01d00934 	movhi	r7,16420
    a550:	8009883a 	mov	r4,r16
    a554:	880b883a 	mov	r5,r17
    a558:	102b883a 	mov	r21,r2
    a55c:	1827883a 	mov	r19,r3
    a560:	00058e00 	call	58e0 <__muldf3>
    a564:	180b883a 	mov	r5,r3
    a568:	1009883a 	mov	r4,r2
    a56c:	1821883a 	mov	r16,r3
    a570:	1023883a 	mov	r17,r2
    a574:	0006a480 	call	6a48 <__fixdfsi>
    a578:	1009883a 	mov	r4,r2
    a57c:	1029883a 	mov	r20,r2
    a580:	0006ac80 	call	6ac8 <__floatsidf>
    a584:	8809883a 	mov	r4,r17
    a588:	800b883a 	mov	r5,r16
    a58c:	100d883a 	mov	r6,r2
    a590:	180f883a 	mov	r7,r3
    a594:	000614c0 	call	614c <__subdf3>
    a598:	a5000c04 	addi	r20,r20,48
    a59c:	a80d883a 	mov	r6,r21
    a5a0:	980f883a 	mov	r7,r19
    a5a4:	1009883a 	mov	r4,r2
    a5a8:	180b883a 	mov	r5,r3
    a5ac:	95000005 	stb	r20,0(r18)
    a5b0:	1021883a 	mov	r16,r2
    a5b4:	1823883a 	mov	r17,r3
    a5b8:	0011b140 	call	11b14 <__ledf2>
    a5bc:	bdc00044 	addi	r23,r23,1
    a5c0:	800d883a 	mov	r6,r16
    a5c4:	880f883a 	mov	r7,r17
    a5c8:	0009883a 	mov	r4,zero
    a5cc:	014ffc34 	movhi	r5,16368
    a5d0:	103fcf0e 	bge	r2,zero,a510 <__alt_exception_stack_pointer+0xf800a510>
    a5d4:	d8c01317 	ldw	r3,76(sp)
    a5d8:	d8c00515 	stw	r3,20(sp)
    a5dc:	d9400917 	ldw	r5,36(sp)
    a5e0:	e009883a 	mov	r4,fp
    a5e4:	000cd400 	call	cd40 <_Bfree>
    a5e8:	d9000517 	ldw	r4,20(sp)
    a5ec:	d9802317 	ldw	r6,140(sp)
    a5f0:	d9c02517 	ldw	r7,148(sp)
    a5f4:	b8000005 	stb	zero,0(r23)
    a5f8:	20800044 	addi	r2,r4,1
    a5fc:	30800015 	stw	r2,0(r6)
    a600:	3802aa26 	beq	r7,zero,b0ac <_dtoa_r+0x1178>
    a604:	3dc00015 	stw	r23,0(r7)
    a608:	d8800717 	ldw	r2,28(sp)
    a60c:	003e7906 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a610:	00800434 	movhi	r2,16
    a614:	10bfffc4 	addi	r2,r2,-1
    a618:	88a2703a 	and	r17,r17,r2
    a61c:	883e851e 	bne	r17,zero,a034 <__alt_exception_stack_pointer+0xf800a034>
    a620:	00800074 	movhi	r2,1
    a624:	10952e04 	addi	r2,r2,21688
    a628:	003e8406 	br	a03c <__alt_exception_stack_pointer+0xf800a03c>
    a62c:	10c00204 	addi	r3,r2,8
    a630:	003e8706 	br	a050 <__alt_exception_stack_pointer+0xf800a050>
    a634:	01400434 	movhi	r5,16
    a638:	297fffc4 	addi	r5,r5,-1
    a63c:	994a703a 	and	r5,r19,r5
    a640:	9009883a 	mov	r4,r18
    a644:	843f0044 	addi	r16,r16,-1023
    a648:	294ffc34 	orhi	r5,r5,16368
    a64c:	dd800217 	ldw	r22,8(sp)
    a650:	d8001115 	stw	zero,68(sp)
    a654:	003ea506 	br	a0ec <__alt_exception_stack_pointer+0xf800a0ec>
    a658:	00800074 	movhi	r2,1
    a65c:	10952504 	addi	r2,r2,21652
    a660:	003e6406 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a664:	e0001115 	stw	zero,68(fp)
    a668:	000b883a 	mov	r5,zero
    a66c:	e009883a 	mov	r4,fp
    a670:	000cc980 	call	cc98 <_Balloc>
    a674:	01bfffc4 	movi	r6,-1
    a678:	01c00044 	movi	r7,1
    a67c:	d8800715 	stw	r2,28(sp)
    a680:	d9800c15 	stw	r6,48(sp)
    a684:	e0801015 	stw	r2,64(fp)
    a688:	d8000315 	stw	zero,12(sp)
    a68c:	d9c00b15 	stw	r7,44(sp)
    a690:	d9800615 	stw	r6,24(sp)
    a694:	d8002215 	stw	zero,136(sp)
    a698:	d8800117 	ldw	r2,4(sp)
    a69c:	10008916 	blt	r2,zero,a8c4 <_dtoa_r+0x990>
    a6a0:	d9000517 	ldw	r4,20(sp)
    a6a4:	00c00384 	movi	r3,14
    a6a8:	19008616 	blt	r3,r4,a8c4 <_dtoa_r+0x990>
    a6ac:	200490fa 	slli	r2,r4,3
    a6b0:	00c00074 	movhi	r3,1
    a6b4:	d9802217 	ldw	r6,136(sp)
    a6b8:	18d54c04 	addi	r3,r3,21808
    a6bc:	1885883a 	add	r2,r3,r2
    a6c0:	14000017 	ldw	r16,0(r2)
    a6c4:	14400117 	ldw	r17,4(r2)
    a6c8:	30016316 	blt	r6,zero,ac58 <_dtoa_r+0xd24>
    a6cc:	800d883a 	mov	r6,r16
    a6d0:	880f883a 	mov	r7,r17
    a6d4:	9009883a 	mov	r4,r18
    a6d8:	980b883a 	mov	r5,r19
    a6dc:	00111440 	call	11144 <__divdf3>
    a6e0:	180b883a 	mov	r5,r3
    a6e4:	1009883a 	mov	r4,r2
    a6e8:	0006a480 	call	6a48 <__fixdfsi>
    a6ec:	1009883a 	mov	r4,r2
    a6f0:	102b883a 	mov	r21,r2
    a6f4:	0006ac80 	call	6ac8 <__floatsidf>
    a6f8:	800d883a 	mov	r6,r16
    a6fc:	880f883a 	mov	r7,r17
    a700:	1009883a 	mov	r4,r2
    a704:	180b883a 	mov	r5,r3
    a708:	00058e00 	call	58e0 <__muldf3>
    a70c:	100d883a 	mov	r6,r2
    a710:	180f883a 	mov	r7,r3
    a714:	9009883a 	mov	r4,r18
    a718:	980b883a 	mov	r5,r19
    a71c:	000614c0 	call	614c <__subdf3>
    a720:	d9c00717 	ldw	r7,28(sp)
    a724:	1009883a 	mov	r4,r2
    a728:	a8800c04 	addi	r2,r21,48
    a72c:	38800005 	stb	r2,0(r7)
    a730:	3dc00044 	addi	r23,r7,1
    a734:	d9c00617 	ldw	r7,24(sp)
    a738:	01800044 	movi	r6,1
    a73c:	180b883a 	mov	r5,r3
    a740:	2005883a 	mov	r2,r4
    a744:	39803826 	beq	r7,r6,a828 <_dtoa_r+0x8f4>
    a748:	000d883a 	mov	r6,zero
    a74c:	01d00934 	movhi	r7,16420
    a750:	00058e00 	call	58e0 <__muldf3>
    a754:	000d883a 	mov	r6,zero
    a758:	000f883a 	mov	r7,zero
    a75c:	1009883a 	mov	r4,r2
    a760:	180b883a 	mov	r5,r3
    a764:	1025883a 	mov	r18,r2
    a768:	1827883a 	mov	r19,r3
    a76c:	000577c0 	call	577c <__eqdf2>
    a770:	103f9a26 	beq	r2,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    a774:	d9c00617 	ldw	r7,24(sp)
    a778:	d8c00717 	ldw	r3,28(sp)
    a77c:	b829883a 	mov	r20,r23
    a780:	38bfffc4 	addi	r2,r7,-1
    a784:	18ad883a 	add	r22,r3,r2
    a788:	00000a06 	br	a7b4 <_dtoa_r+0x880>
    a78c:	00058e00 	call	58e0 <__muldf3>
    a790:	000d883a 	mov	r6,zero
    a794:	000f883a 	mov	r7,zero
    a798:	1009883a 	mov	r4,r2
    a79c:	180b883a 	mov	r5,r3
    a7a0:	1025883a 	mov	r18,r2
    a7a4:	1827883a 	mov	r19,r3
    a7a8:	b829883a 	mov	r20,r23
    a7ac:	000577c0 	call	577c <__eqdf2>
    a7b0:	103f8a26 	beq	r2,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    a7b4:	800d883a 	mov	r6,r16
    a7b8:	880f883a 	mov	r7,r17
    a7bc:	9009883a 	mov	r4,r18
    a7c0:	980b883a 	mov	r5,r19
    a7c4:	00111440 	call	11144 <__divdf3>
    a7c8:	180b883a 	mov	r5,r3
    a7cc:	1009883a 	mov	r4,r2
    a7d0:	0006a480 	call	6a48 <__fixdfsi>
    a7d4:	1009883a 	mov	r4,r2
    a7d8:	102b883a 	mov	r21,r2
    a7dc:	0006ac80 	call	6ac8 <__floatsidf>
    a7e0:	800d883a 	mov	r6,r16
    a7e4:	880f883a 	mov	r7,r17
    a7e8:	1009883a 	mov	r4,r2
    a7ec:	180b883a 	mov	r5,r3
    a7f0:	00058e00 	call	58e0 <__muldf3>
    a7f4:	100d883a 	mov	r6,r2
    a7f8:	180f883a 	mov	r7,r3
    a7fc:	9009883a 	mov	r4,r18
    a800:	980b883a 	mov	r5,r19
    a804:	000614c0 	call	614c <__subdf3>
    a808:	aa000c04 	addi	r8,r21,48
    a80c:	a2000005 	stb	r8,0(r20)
    a810:	000d883a 	mov	r6,zero
    a814:	01d00934 	movhi	r7,16420
    a818:	1009883a 	mov	r4,r2
    a81c:	180b883a 	mov	r5,r3
    a820:	a5c00044 	addi	r23,r20,1
    a824:	b53fd91e 	bne	r22,r20,a78c <__alt_exception_stack_pointer+0xf800a78c>
    a828:	100d883a 	mov	r6,r2
    a82c:	180f883a 	mov	r7,r3
    a830:	1009883a 	mov	r4,r2
    a834:	180b883a 	mov	r5,r3
    a838:	0004ed00 	call	4ed0 <__adddf3>
    a83c:	100d883a 	mov	r6,r2
    a840:	180f883a 	mov	r7,r3
    a844:	8009883a 	mov	r4,r16
    a848:	880b883a 	mov	r5,r17
    a84c:	1027883a 	mov	r19,r2
    a850:	1825883a 	mov	r18,r3
    a854:	0011b140 	call	11b14 <__ledf2>
    a858:	10000816 	blt	r2,zero,a87c <_dtoa_r+0x948>
    a85c:	980d883a 	mov	r6,r19
    a860:	900f883a 	mov	r7,r18
    a864:	8009883a 	mov	r4,r16
    a868:	880b883a 	mov	r5,r17
    a86c:	000577c0 	call	577c <__eqdf2>
    a870:	103f5a1e 	bne	r2,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    a874:	ad40004c 	andi	r21,r21,1
    a878:	a83f5826 	beq	r21,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    a87c:	bd3fffc3 	ldbu	r20,-1(r23)
    a880:	b8bfffc4 	addi	r2,r23,-1
    a884:	1007883a 	mov	r3,r2
    a888:	01400e44 	movi	r5,57
    a88c:	d9800717 	ldw	r6,28(sp)
    a890:	00000506 	br	a8a8 <_dtoa_r+0x974>
    a894:	18ffffc4 	addi	r3,r3,-1
    a898:	11824726 	beq	r2,r6,b1b8 <_dtoa_r+0x1284>
    a89c:	1d000003 	ldbu	r20,0(r3)
    a8a0:	102f883a 	mov	r23,r2
    a8a4:	10bfffc4 	addi	r2,r2,-1
    a8a8:	a1003fcc 	andi	r4,r20,255
    a8ac:	2100201c 	xori	r4,r4,128
    a8b0:	213fe004 	addi	r4,r4,-128
    a8b4:	217ff726 	beq	r4,r5,a894 <__alt_exception_stack_pointer+0xf800a894>
    a8b8:	a2000044 	addi	r8,r20,1
    a8bc:	12000005 	stb	r8,0(r2)
    a8c0:	003f4606 	br	a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    a8c4:	d9000b17 	ldw	r4,44(sp)
    a8c8:	2000c826 	beq	r4,zero,abec <_dtoa_r+0xcb8>
    a8cc:	d9800317 	ldw	r6,12(sp)
    a8d0:	00c00044 	movi	r3,1
    a8d4:	1980f90e 	bge	r3,r6,acbc <_dtoa_r+0xd88>
    a8d8:	d8800617 	ldw	r2,24(sp)
    a8dc:	d8c00a17 	ldw	r3,40(sp)
    a8e0:	157fffc4 	addi	r21,r2,-1
    a8e4:	1d41f316 	blt	r3,r21,b0b4 <_dtoa_r+0x1180>
    a8e8:	1d6bc83a 	sub	r21,r3,r21
    a8ec:	d9c00617 	ldw	r7,24(sp)
    a8f0:	3802aa16 	blt	r7,zero,b39c <_dtoa_r+0x1468>
    a8f4:	dd000817 	ldw	r20,32(sp)
    a8f8:	d8800617 	ldw	r2,24(sp)
    a8fc:	d8c00817 	ldw	r3,32(sp)
    a900:	01400044 	movi	r5,1
    a904:	e009883a 	mov	r4,fp
    a908:	1887883a 	add	r3,r3,r2
    a90c:	d8c00815 	stw	r3,32(sp)
    a910:	b0ad883a 	add	r22,r22,r2
    a914:	000d0cc0 	call	d0cc <__i2b>
    a918:	1023883a 	mov	r17,r2
    a91c:	a0000826 	beq	r20,zero,a940 <_dtoa_r+0xa0c>
    a920:	0580070e 	bge	zero,r22,a940 <_dtoa_r+0xa0c>
    a924:	a005883a 	mov	r2,r20
    a928:	b500b916 	blt	r22,r20,ac10 <_dtoa_r+0xcdc>
    a92c:	d9000817 	ldw	r4,32(sp)
    a930:	a0a9c83a 	sub	r20,r20,r2
    a934:	b0adc83a 	sub	r22,r22,r2
    a938:	2089c83a 	sub	r4,r4,r2
    a93c:	d9000815 	stw	r4,32(sp)
    a940:	d9800a17 	ldw	r6,40(sp)
    a944:	0181810e 	bge	zero,r6,af4c <_dtoa_r+0x1018>
    a948:	d9c00b17 	ldw	r7,44(sp)
    a94c:	3800b326 	beq	r7,zero,ac1c <_dtoa_r+0xce8>
    a950:	a800b226 	beq	r21,zero,ac1c <_dtoa_r+0xce8>
    a954:	880b883a 	mov	r5,r17
    a958:	a80d883a 	mov	r6,r21
    a95c:	e009883a 	mov	r4,fp
    a960:	000d3940 	call	d394 <__pow5mult>
    a964:	d9800917 	ldw	r6,36(sp)
    a968:	100b883a 	mov	r5,r2
    a96c:	e009883a 	mov	r4,fp
    a970:	1023883a 	mov	r17,r2
    a974:	000d1080 	call	d108 <__multiply>
    a978:	1021883a 	mov	r16,r2
    a97c:	d8800a17 	ldw	r2,40(sp)
    a980:	d9400917 	ldw	r5,36(sp)
    a984:	e009883a 	mov	r4,fp
    a988:	1545c83a 	sub	r2,r2,r21
    a98c:	d8800a15 	stw	r2,40(sp)
    a990:	000cd400 	call	cd40 <_Bfree>
    a994:	d8c00a17 	ldw	r3,40(sp)
    a998:	18009f1e 	bne	r3,zero,ac18 <_dtoa_r+0xce4>
    a99c:	05c00044 	movi	r23,1
    a9a0:	e009883a 	mov	r4,fp
    a9a4:	b80b883a 	mov	r5,r23
    a9a8:	000d0cc0 	call	d0cc <__i2b>
    a9ac:	d9000d17 	ldw	r4,52(sp)
    a9b0:	102b883a 	mov	r21,r2
    a9b4:	2000ce26 	beq	r4,zero,acf0 <_dtoa_r+0xdbc>
    a9b8:	200d883a 	mov	r6,r4
    a9bc:	100b883a 	mov	r5,r2
    a9c0:	e009883a 	mov	r4,fp
    a9c4:	000d3940 	call	d394 <__pow5mult>
    a9c8:	d9800317 	ldw	r6,12(sp)
    a9cc:	102b883a 	mov	r21,r2
    a9d0:	b981810e 	bge	r23,r6,afd8 <_dtoa_r+0x10a4>
    a9d4:	0027883a 	mov	r19,zero
    a9d8:	a8800417 	ldw	r2,16(r21)
    a9dc:	05c00804 	movi	r23,32
    a9e0:	10800104 	addi	r2,r2,4
    a9e4:	1085883a 	add	r2,r2,r2
    a9e8:	1085883a 	add	r2,r2,r2
    a9ec:	a885883a 	add	r2,r21,r2
    a9f0:	11000017 	ldw	r4,0(r2)
    a9f4:	000cfb40 	call	cfb4 <__hi0bits>
    a9f8:	b885c83a 	sub	r2,r23,r2
    a9fc:	1585883a 	add	r2,r2,r22
    aa00:	108007cc 	andi	r2,r2,31
    aa04:	1000b326 	beq	r2,zero,acd4 <_dtoa_r+0xda0>
    aa08:	00c00804 	movi	r3,32
    aa0c:	1887c83a 	sub	r3,r3,r2
    aa10:	01000104 	movi	r4,4
    aa14:	20c2cd0e 	bge	r4,r3,b54c <_dtoa_r+0x1618>
    aa18:	00c00704 	movi	r3,28
    aa1c:	1885c83a 	sub	r2,r3,r2
    aa20:	d8c00817 	ldw	r3,32(sp)
    aa24:	a0a9883a 	add	r20,r20,r2
    aa28:	b0ad883a 	add	r22,r22,r2
    aa2c:	1887883a 	add	r3,r3,r2
    aa30:	d8c00815 	stw	r3,32(sp)
    aa34:	d9800817 	ldw	r6,32(sp)
    aa38:	0180040e 	bge	zero,r6,aa4c <_dtoa_r+0xb18>
    aa3c:	800b883a 	mov	r5,r16
    aa40:	e009883a 	mov	r4,fp
    aa44:	000d4d40 	call	d4d4 <__lshift>
    aa48:	1021883a 	mov	r16,r2
    aa4c:	0580050e 	bge	zero,r22,aa64 <_dtoa_r+0xb30>
    aa50:	a80b883a 	mov	r5,r21
    aa54:	b00d883a 	mov	r6,r22
    aa58:	e009883a 	mov	r4,fp
    aa5c:	000d4d40 	call	d4d4 <__lshift>
    aa60:	102b883a 	mov	r21,r2
    aa64:	d9c00e17 	ldw	r7,56(sp)
    aa68:	3801211e 	bne	r7,zero,aef0 <_dtoa_r+0xfbc>
    aa6c:	d9800617 	ldw	r6,24(sp)
    aa70:	0181380e 	bge	zero,r6,af54 <_dtoa_r+0x1020>
    aa74:	d8c00b17 	ldw	r3,44(sp)
    aa78:	1800ab1e 	bne	r3,zero,ad28 <_dtoa_r+0xdf4>
    aa7c:	dc800717 	ldw	r18,28(sp)
    aa80:	dcc00617 	ldw	r19,24(sp)
    aa84:	9029883a 	mov	r20,r18
    aa88:	00000206 	br	aa94 <_dtoa_r+0xb60>
    aa8c:	000cd680 	call	cd68 <__multadd>
    aa90:	1021883a 	mov	r16,r2
    aa94:	a80b883a 	mov	r5,r21
    aa98:	8009883a 	mov	r4,r16
    aa9c:	0009d0c0 	call	9d0c <quorem>
    aaa0:	10800c04 	addi	r2,r2,48
    aaa4:	90800005 	stb	r2,0(r18)
    aaa8:	94800044 	addi	r18,r18,1
    aaac:	9507c83a 	sub	r3,r18,r20
    aab0:	000f883a 	mov	r7,zero
    aab4:	01800284 	movi	r6,10
    aab8:	800b883a 	mov	r5,r16
    aabc:	e009883a 	mov	r4,fp
    aac0:	1cfff216 	blt	r3,r19,aa8c <__alt_exception_stack_pointer+0xf800aa8c>
    aac4:	1011883a 	mov	r8,r2
    aac8:	d8800617 	ldw	r2,24(sp)
    aacc:	0082370e 	bge	zero,r2,b3ac <_dtoa_r+0x1478>
    aad0:	d9000717 	ldw	r4,28(sp)
    aad4:	0025883a 	mov	r18,zero
    aad8:	20af883a 	add	r23,r4,r2
    aadc:	01800044 	movi	r6,1
    aae0:	800b883a 	mov	r5,r16
    aae4:	e009883a 	mov	r4,fp
    aae8:	da001715 	stw	r8,92(sp)
    aaec:	000d4d40 	call	d4d4 <__lshift>
    aaf0:	a80b883a 	mov	r5,r21
    aaf4:	1009883a 	mov	r4,r2
    aaf8:	d8800915 	stw	r2,36(sp)
    aafc:	000d61c0 	call	d61c <__mcmp>
    ab00:	da001717 	ldw	r8,92(sp)
    ab04:	0081800e 	bge	zero,r2,b108 <_dtoa_r+0x11d4>
    ab08:	b93fffc3 	ldbu	r4,-1(r23)
    ab0c:	b8bfffc4 	addi	r2,r23,-1
    ab10:	1007883a 	mov	r3,r2
    ab14:	01800e44 	movi	r6,57
    ab18:	d9c00717 	ldw	r7,28(sp)
    ab1c:	00000506 	br	ab34 <_dtoa_r+0xc00>
    ab20:	18ffffc4 	addi	r3,r3,-1
    ab24:	11c12326 	beq	r2,r7,afb4 <_dtoa_r+0x1080>
    ab28:	19000003 	ldbu	r4,0(r3)
    ab2c:	102f883a 	mov	r23,r2
    ab30:	10bfffc4 	addi	r2,r2,-1
    ab34:	21403fcc 	andi	r5,r4,255
    ab38:	2940201c 	xori	r5,r5,128
    ab3c:	297fe004 	addi	r5,r5,-128
    ab40:	29bff726 	beq	r5,r6,ab20 <__alt_exception_stack_pointer+0xf800ab20>
    ab44:	21000044 	addi	r4,r4,1
    ab48:	11000005 	stb	r4,0(r2)
    ab4c:	a80b883a 	mov	r5,r21
    ab50:	e009883a 	mov	r4,fp
    ab54:	000cd400 	call	cd40 <_Bfree>
    ab58:	883ea026 	beq	r17,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    ab5c:	90000426 	beq	r18,zero,ab70 <_dtoa_r+0xc3c>
    ab60:	94400326 	beq	r18,r17,ab70 <_dtoa_r+0xc3c>
    ab64:	900b883a 	mov	r5,r18
    ab68:	e009883a 	mov	r4,fp
    ab6c:	000cd400 	call	cd40 <_Bfree>
    ab70:	880b883a 	mov	r5,r17
    ab74:	e009883a 	mov	r4,fp
    ab78:	000cd400 	call	cd40 <_Bfree>
    ab7c:	003e9706 	br	a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    ab80:	01800044 	movi	r6,1
    ab84:	d9800e15 	stw	r6,56(sp)
    ab88:	003d9606 	br	a1e4 <__alt_exception_stack_pointer+0xf800a1e4>
    ab8c:	d8800817 	ldw	r2,32(sp)
    ab90:	d8c00517 	ldw	r3,20(sp)
    ab94:	d8000d15 	stw	zero,52(sp)
    ab98:	10c5c83a 	sub	r2,r2,r3
    ab9c:	00c9c83a 	sub	r4,zero,r3
    aba0:	d8800815 	stw	r2,32(sp)
    aba4:	d9000a15 	stw	r4,40(sp)
    aba8:	003d9706 	br	a208 <__alt_exception_stack_pointer+0xf800a208>
    abac:	05adc83a 	sub	r22,zero,r22
    abb0:	dd800815 	stw	r22,32(sp)
    abb4:	002d883a 	mov	r22,zero
    abb8:	003d8e06 	br	a1f4 <__alt_exception_stack_pointer+0xf800a1f4>
    abbc:	d9000517 	ldw	r4,20(sp)
    abc0:	0006ac80 	call	6ac8 <__floatsidf>
    abc4:	100d883a 	mov	r6,r2
    abc8:	180f883a 	mov	r7,r3
    abcc:	a009883a 	mov	r4,r20
    abd0:	880b883a 	mov	r5,r17
    abd4:	000577c0 	call	577c <__eqdf2>
    abd8:	103d7126 	beq	r2,zero,a1a0 <__alt_exception_stack_pointer+0xf800a1a0>
    abdc:	d9c00517 	ldw	r7,20(sp)
    abe0:	39ffffc4 	addi	r7,r7,-1
    abe4:	d9c00515 	stw	r7,20(sp)
    abe8:	003d6d06 	br	a1a0 <__alt_exception_stack_pointer+0xf800a1a0>
    abec:	dd400a17 	ldw	r21,40(sp)
    abf0:	dd000817 	ldw	r20,32(sp)
    abf4:	0023883a 	mov	r17,zero
    abf8:	003f4806 	br	a91c <__alt_exception_stack_pointer+0xf800a91c>
    abfc:	10e3c83a 	sub	r17,r2,r3
    ac00:	9448983a 	sll	r4,r18,r17
    ac04:	003d3206 	br	a0d0 <__alt_exception_stack_pointer+0xf800a0d0>
    ac08:	d8000e15 	stw	zero,56(sp)
    ac0c:	003d7506 	br	a1e4 <__alt_exception_stack_pointer+0xf800a1e4>
    ac10:	b005883a 	mov	r2,r22
    ac14:	003f4506 	br	a92c <__alt_exception_stack_pointer+0xf800a92c>
    ac18:	dc000915 	stw	r16,36(sp)
    ac1c:	d9800a17 	ldw	r6,40(sp)
    ac20:	d9400917 	ldw	r5,36(sp)
    ac24:	e009883a 	mov	r4,fp
    ac28:	000d3940 	call	d394 <__pow5mult>
    ac2c:	1021883a 	mov	r16,r2
    ac30:	003f5a06 	br	a99c <__alt_exception_stack_pointer+0xf800a99c>
    ac34:	01c00044 	movi	r7,1
    ac38:	d9c00b15 	stw	r7,44(sp)
    ac3c:	d8802217 	ldw	r2,136(sp)
    ac40:	0081280e 	bge	zero,r2,b0e4 <_dtoa_r+0x11b0>
    ac44:	100d883a 	mov	r6,r2
    ac48:	1021883a 	mov	r16,r2
    ac4c:	d8800c15 	stw	r2,48(sp)
    ac50:	d8800615 	stw	r2,24(sp)
    ac54:	003d8806 	br	a278 <__alt_exception_stack_pointer+0xf800a278>
    ac58:	d8800617 	ldw	r2,24(sp)
    ac5c:	00be9b16 	blt	zero,r2,a6cc <__alt_exception_stack_pointer+0xf800a6cc>
    ac60:	10010f1e 	bne	r2,zero,b0a0 <_dtoa_r+0x116c>
    ac64:	880b883a 	mov	r5,r17
    ac68:	000d883a 	mov	r6,zero
    ac6c:	01d00534 	movhi	r7,16404
    ac70:	8009883a 	mov	r4,r16
    ac74:	00058e00 	call	58e0 <__muldf3>
    ac78:	900d883a 	mov	r6,r18
    ac7c:	980f883a 	mov	r7,r19
    ac80:	1009883a 	mov	r4,r2
    ac84:	180b883a 	mov	r5,r3
    ac88:	00058040 	call	5804 <__gedf2>
    ac8c:	002b883a 	mov	r21,zero
    ac90:	0023883a 	mov	r17,zero
    ac94:	1000bf16 	blt	r2,zero,af94 <_dtoa_r+0x1060>
    ac98:	d9802217 	ldw	r6,136(sp)
    ac9c:	ddc00717 	ldw	r23,28(sp)
    aca0:	018c303a 	nor	r6,zero,r6
    aca4:	d9800515 	stw	r6,20(sp)
    aca8:	a80b883a 	mov	r5,r21
    acac:	e009883a 	mov	r4,fp
    acb0:	000cd400 	call	cd40 <_Bfree>
    acb4:	883e4926 	beq	r17,zero,a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    acb8:	003fad06 	br	ab70 <__alt_exception_stack_pointer+0xf800ab70>
    acbc:	d9c01117 	ldw	r7,68(sp)
    acc0:	3801bc26 	beq	r7,zero,b3b4 <_dtoa_r+0x1480>
    acc4:	10810cc4 	addi	r2,r2,1075
    acc8:	dd400a17 	ldw	r21,40(sp)
    accc:	dd000817 	ldw	r20,32(sp)
    acd0:	003f0a06 	br	a8fc <__alt_exception_stack_pointer+0xf800a8fc>
    acd4:	00800704 	movi	r2,28
    acd8:	d9000817 	ldw	r4,32(sp)
    acdc:	a0a9883a 	add	r20,r20,r2
    ace0:	b0ad883a 	add	r22,r22,r2
    ace4:	2089883a 	add	r4,r4,r2
    ace8:	d9000815 	stw	r4,32(sp)
    acec:	003f5106 	br	aa34 <__alt_exception_stack_pointer+0xf800aa34>
    acf0:	d8c00317 	ldw	r3,12(sp)
    acf4:	b8c1fc0e 	bge	r23,r3,b4e8 <_dtoa_r+0x15b4>
    acf8:	0027883a 	mov	r19,zero
    acfc:	b805883a 	mov	r2,r23
    ad00:	003f3e06 	br	a9fc <__alt_exception_stack_pointer+0xf800a9fc>
    ad04:	880b883a 	mov	r5,r17
    ad08:	e009883a 	mov	r4,fp
    ad0c:	000f883a 	mov	r7,zero
    ad10:	01800284 	movi	r6,10
    ad14:	000cd680 	call	cd68 <__multadd>
    ad18:	d9000c17 	ldw	r4,48(sp)
    ad1c:	1023883a 	mov	r17,r2
    ad20:	0102040e 	bge	zero,r4,b534 <_dtoa_r+0x1600>
    ad24:	d9000615 	stw	r4,24(sp)
    ad28:	0500050e 	bge	zero,r20,ad40 <_dtoa_r+0xe0c>
    ad2c:	880b883a 	mov	r5,r17
    ad30:	a00d883a 	mov	r6,r20
    ad34:	e009883a 	mov	r4,fp
    ad38:	000d4d40 	call	d4d4 <__lshift>
    ad3c:	1023883a 	mov	r17,r2
    ad40:	9801241e 	bne	r19,zero,b1d4 <_dtoa_r+0x12a0>
    ad44:	8829883a 	mov	r20,r17
    ad48:	d9000617 	ldw	r4,24(sp)
    ad4c:	dcc00717 	ldw	r19,28(sp)
    ad50:	9480004c 	andi	r18,r18,1
    ad54:	20bfffc4 	addi	r2,r4,-1
    ad58:	9885883a 	add	r2,r19,r2
    ad5c:	d8800415 	stw	r2,16(sp)
    ad60:	dc800615 	stw	r18,24(sp)
    ad64:	a80b883a 	mov	r5,r21
    ad68:	8009883a 	mov	r4,r16
    ad6c:	0009d0c0 	call	9d0c <quorem>
    ad70:	880b883a 	mov	r5,r17
    ad74:	8009883a 	mov	r4,r16
    ad78:	102f883a 	mov	r23,r2
    ad7c:	000d61c0 	call	d61c <__mcmp>
    ad80:	a80b883a 	mov	r5,r21
    ad84:	a00d883a 	mov	r6,r20
    ad88:	e009883a 	mov	r4,fp
    ad8c:	102d883a 	mov	r22,r2
    ad90:	000d67c0 	call	d67c <__mdiff>
    ad94:	1007883a 	mov	r3,r2
    ad98:	10800317 	ldw	r2,12(r2)
    ad9c:	bc800c04 	addi	r18,r23,48
    ada0:	180b883a 	mov	r5,r3
    ada4:	10004e1e 	bne	r2,zero,aee0 <_dtoa_r+0xfac>
    ada8:	8009883a 	mov	r4,r16
    adac:	d8c01615 	stw	r3,88(sp)
    adb0:	000d61c0 	call	d61c <__mcmp>
    adb4:	d8c01617 	ldw	r3,88(sp)
    adb8:	e009883a 	mov	r4,fp
    adbc:	d8801615 	stw	r2,88(sp)
    adc0:	180b883a 	mov	r5,r3
    adc4:	000cd400 	call	cd40 <_Bfree>
    adc8:	d8801617 	ldw	r2,88(sp)
    adcc:	1000041e 	bne	r2,zero,ade0 <_dtoa_r+0xeac>
    add0:	d9800317 	ldw	r6,12(sp)
    add4:	3000021e 	bne	r6,zero,ade0 <_dtoa_r+0xeac>
    add8:	d8c00617 	ldw	r3,24(sp)
    addc:	18003726 	beq	r3,zero,aebc <_dtoa_r+0xf88>
    ade0:	b0002016 	blt	r22,zero,ae64 <_dtoa_r+0xf30>
    ade4:	b000041e 	bne	r22,zero,adf8 <_dtoa_r+0xec4>
    ade8:	d9000317 	ldw	r4,12(sp)
    adec:	2000021e 	bne	r4,zero,adf8 <_dtoa_r+0xec4>
    adf0:	d8c00617 	ldw	r3,24(sp)
    adf4:	18001b26 	beq	r3,zero,ae64 <_dtoa_r+0xf30>
    adf8:	00810716 	blt	zero,r2,b218 <_dtoa_r+0x12e4>
    adfc:	d8c00417 	ldw	r3,16(sp)
    ae00:	9d800044 	addi	r22,r19,1
    ae04:	9c800005 	stb	r18,0(r19)
    ae08:	b02f883a 	mov	r23,r22
    ae0c:	98c10626 	beq	r19,r3,b228 <_dtoa_r+0x12f4>
    ae10:	800b883a 	mov	r5,r16
    ae14:	000f883a 	mov	r7,zero
    ae18:	01800284 	movi	r6,10
    ae1c:	e009883a 	mov	r4,fp
    ae20:	000cd680 	call	cd68 <__multadd>
    ae24:	1021883a 	mov	r16,r2
    ae28:	000f883a 	mov	r7,zero
    ae2c:	01800284 	movi	r6,10
    ae30:	880b883a 	mov	r5,r17
    ae34:	e009883a 	mov	r4,fp
    ae38:	8d002526 	beq	r17,r20,aed0 <_dtoa_r+0xf9c>
    ae3c:	000cd680 	call	cd68 <__multadd>
    ae40:	a00b883a 	mov	r5,r20
    ae44:	000f883a 	mov	r7,zero
    ae48:	01800284 	movi	r6,10
    ae4c:	e009883a 	mov	r4,fp
    ae50:	1023883a 	mov	r17,r2
    ae54:	000cd680 	call	cd68 <__multadd>
    ae58:	1029883a 	mov	r20,r2
    ae5c:	b027883a 	mov	r19,r22
    ae60:	003fc006 	br	ad64 <__alt_exception_stack_pointer+0xf800ad64>
    ae64:	9011883a 	mov	r8,r18
    ae68:	00800e0e 	bge	zero,r2,aea4 <_dtoa_r+0xf70>
    ae6c:	800b883a 	mov	r5,r16
    ae70:	01800044 	movi	r6,1
    ae74:	e009883a 	mov	r4,fp
    ae78:	da001715 	stw	r8,92(sp)
    ae7c:	000d4d40 	call	d4d4 <__lshift>
    ae80:	a80b883a 	mov	r5,r21
    ae84:	1009883a 	mov	r4,r2
    ae88:	1021883a 	mov	r16,r2
    ae8c:	000d61c0 	call	d61c <__mcmp>
    ae90:	da001717 	ldw	r8,92(sp)
    ae94:	0081960e 	bge	zero,r2,b4f0 <_dtoa_r+0x15bc>
    ae98:	00800e44 	movi	r2,57
    ae9c:	40817026 	beq	r8,r2,b460 <_dtoa_r+0x152c>
    aea0:	ba000c44 	addi	r8,r23,49
    aea4:	8825883a 	mov	r18,r17
    aea8:	9dc00044 	addi	r23,r19,1
    aeac:	9a000005 	stb	r8,0(r19)
    aeb0:	a023883a 	mov	r17,r20
    aeb4:	dc000915 	stw	r16,36(sp)
    aeb8:	003f2406 	br	ab4c <__alt_exception_stack_pointer+0xf800ab4c>
    aebc:	00800e44 	movi	r2,57
    aec0:	9011883a 	mov	r8,r18
    aec4:	90816626 	beq	r18,r2,b460 <_dtoa_r+0x152c>
    aec8:	05bff516 	blt	zero,r22,aea0 <__alt_exception_stack_pointer+0xf800aea0>
    aecc:	003ff506 	br	aea4 <__alt_exception_stack_pointer+0xf800aea4>
    aed0:	000cd680 	call	cd68 <__multadd>
    aed4:	1023883a 	mov	r17,r2
    aed8:	1029883a 	mov	r20,r2
    aedc:	003fdf06 	br	ae5c <__alt_exception_stack_pointer+0xf800ae5c>
    aee0:	e009883a 	mov	r4,fp
    aee4:	000cd400 	call	cd40 <_Bfree>
    aee8:	00800044 	movi	r2,1
    aeec:	003fbc06 	br	ade0 <__alt_exception_stack_pointer+0xf800ade0>
    aef0:	a80b883a 	mov	r5,r21
    aef4:	8009883a 	mov	r4,r16
    aef8:	000d61c0 	call	d61c <__mcmp>
    aefc:	103edb0e 	bge	r2,zero,aa6c <__alt_exception_stack_pointer+0xf800aa6c>
    af00:	800b883a 	mov	r5,r16
    af04:	000f883a 	mov	r7,zero
    af08:	01800284 	movi	r6,10
    af0c:	e009883a 	mov	r4,fp
    af10:	000cd680 	call	cd68 <__multadd>
    af14:	1021883a 	mov	r16,r2
    af18:	d8800517 	ldw	r2,20(sp)
    af1c:	d8c00b17 	ldw	r3,44(sp)
    af20:	10bfffc4 	addi	r2,r2,-1
    af24:	d8800515 	stw	r2,20(sp)
    af28:	183f761e 	bne	r3,zero,ad04 <__alt_exception_stack_pointer+0xf800ad04>
    af2c:	d9000c17 	ldw	r4,48(sp)
    af30:	0101730e 	bge	zero,r4,b500 <_dtoa_r+0x15cc>
    af34:	d9000615 	stw	r4,24(sp)
    af38:	003ed006 	br	aa7c <__alt_exception_stack_pointer+0xf800aa7c>
    af3c:	00800084 	movi	r2,2
    af40:	3081861e 	bne	r6,r2,b55c <_dtoa_r+0x1628>
    af44:	d8000b15 	stw	zero,44(sp)
    af48:	003f3c06 	br	ac3c <__alt_exception_stack_pointer+0xf800ac3c>
    af4c:	dc000917 	ldw	r16,36(sp)
    af50:	003e9206 	br	a99c <__alt_exception_stack_pointer+0xf800a99c>
    af54:	d9c00317 	ldw	r7,12(sp)
    af58:	00800084 	movi	r2,2
    af5c:	11fec50e 	bge	r2,r7,aa74 <__alt_exception_stack_pointer+0xf800aa74>
    af60:	d9000617 	ldw	r4,24(sp)
    af64:	20013c1e 	bne	r4,zero,b458 <_dtoa_r+0x1524>
    af68:	a80b883a 	mov	r5,r21
    af6c:	000f883a 	mov	r7,zero
    af70:	01800144 	movi	r6,5
    af74:	e009883a 	mov	r4,fp
    af78:	000cd680 	call	cd68 <__multadd>
    af7c:	100b883a 	mov	r5,r2
    af80:	8009883a 	mov	r4,r16
    af84:	102b883a 	mov	r21,r2
    af88:	000d61c0 	call	d61c <__mcmp>
    af8c:	dc000915 	stw	r16,36(sp)
    af90:	00bf410e 	bge	zero,r2,ac98 <__alt_exception_stack_pointer+0xf800ac98>
    af94:	d9c00717 	ldw	r7,28(sp)
    af98:	00800c44 	movi	r2,49
    af9c:	38800005 	stb	r2,0(r7)
    afa0:	d8800517 	ldw	r2,20(sp)
    afa4:	3dc00044 	addi	r23,r7,1
    afa8:	10800044 	addi	r2,r2,1
    afac:	d8800515 	stw	r2,20(sp)
    afb0:	003f3d06 	br	aca8 <__alt_exception_stack_pointer+0xf800aca8>
    afb4:	d9800517 	ldw	r6,20(sp)
    afb8:	d9c00717 	ldw	r7,28(sp)
    afbc:	00800c44 	movi	r2,49
    afc0:	31800044 	addi	r6,r6,1
    afc4:	d9800515 	stw	r6,20(sp)
    afc8:	38800005 	stb	r2,0(r7)
    afcc:	003edf06 	br	ab4c <__alt_exception_stack_pointer+0xf800ab4c>
    afd0:	d8000b15 	stw	zero,44(sp)
    afd4:	003c9f06 	br	a254 <__alt_exception_stack_pointer+0xf800a254>
    afd8:	903e7e1e 	bne	r18,zero,a9d4 <__alt_exception_stack_pointer+0xf800a9d4>
    afdc:	00800434 	movhi	r2,16
    afe0:	10bfffc4 	addi	r2,r2,-1
    afe4:	9884703a 	and	r2,r19,r2
    afe8:	1000ea1e 	bne	r2,zero,b394 <_dtoa_r+0x1460>
    afec:	9cdffc2c 	andhi	r19,r19,32752
    aff0:	9800e826 	beq	r19,zero,b394 <_dtoa_r+0x1460>
    aff4:	d9c00817 	ldw	r7,32(sp)
    aff8:	b5800044 	addi	r22,r22,1
    affc:	04c00044 	movi	r19,1
    b000:	39c00044 	addi	r7,r7,1
    b004:	d9c00815 	stw	r7,32(sp)
    b008:	d8800d17 	ldw	r2,52(sp)
    b00c:	103e721e 	bne	r2,zero,a9d8 <__alt_exception_stack_pointer+0xf800a9d8>
    b010:	00800044 	movi	r2,1
    b014:	003e7906 	br	a9fc <__alt_exception_stack_pointer+0xf800a9fc>
    b018:	8009883a 	mov	r4,r16
    b01c:	0006ac80 	call	6ac8 <__floatsidf>
    b020:	d9800f17 	ldw	r6,60(sp)
    b024:	d9c01017 	ldw	r7,64(sp)
    b028:	1009883a 	mov	r4,r2
    b02c:	180b883a 	mov	r5,r3
    b030:	00058e00 	call	58e0 <__muldf3>
    b034:	000d883a 	mov	r6,zero
    b038:	01d00734 	movhi	r7,16412
    b03c:	1009883a 	mov	r4,r2
    b040:	180b883a 	mov	r5,r3
    b044:	0004ed00 	call	4ed0 <__adddf3>
    b048:	047f3034 	movhi	r17,64704
    b04c:	1021883a 	mov	r16,r2
    b050:	1c63883a 	add	r17,r3,r17
    b054:	d9000f17 	ldw	r4,60(sp)
    b058:	d9401017 	ldw	r5,64(sp)
    b05c:	000d883a 	mov	r6,zero
    b060:	01d00534 	movhi	r7,16404
    b064:	000614c0 	call	614c <__subdf3>
    b068:	800d883a 	mov	r6,r16
    b06c:	880f883a 	mov	r7,r17
    b070:	1009883a 	mov	r4,r2
    b074:	180b883a 	mov	r5,r3
    b078:	102b883a 	mov	r21,r2
    b07c:	1829883a 	mov	r20,r3
    b080:	00058040 	call	5804 <__gedf2>
    b084:	00806c16 	blt	zero,r2,b238 <_dtoa_r+0x1304>
    b088:	89e0003c 	xorhi	r7,r17,32768
    b08c:	800d883a 	mov	r6,r16
    b090:	a809883a 	mov	r4,r21
    b094:	a00b883a 	mov	r5,r20
    b098:	0011b140 	call	11b14 <__ledf2>
    b09c:	103d7e0e 	bge	r2,zero,a698 <__alt_exception_stack_pointer+0xf800a698>
    b0a0:	002b883a 	mov	r21,zero
    b0a4:	0023883a 	mov	r17,zero
    b0a8:	003efb06 	br	ac98 <__alt_exception_stack_pointer+0xf800ac98>
    b0ac:	d8800717 	ldw	r2,28(sp)
    b0b0:	003bd006 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    b0b4:	d9000a17 	ldw	r4,40(sp)
    b0b8:	d9800d17 	ldw	r6,52(sp)
    b0bc:	dd400a15 	stw	r21,40(sp)
    b0c0:	a905c83a 	sub	r2,r21,r4
    b0c4:	308d883a 	add	r6,r6,r2
    b0c8:	d9800d15 	stw	r6,52(sp)
    b0cc:	002b883a 	mov	r21,zero
    b0d0:	003e0606 	br	a8ec <__alt_exception_stack_pointer+0xf800a8ec>
    b0d4:	9023883a 	mov	r17,r18
    b0d8:	9829883a 	mov	r20,r19
    b0dc:	04000084 	movi	r16,2
    b0e0:	003c9206 	br	a32c <__alt_exception_stack_pointer+0xf800a32c>
    b0e4:	04000044 	movi	r16,1
    b0e8:	dc000c15 	stw	r16,48(sp)
    b0ec:	dc000615 	stw	r16,24(sp)
    b0f0:	dc002215 	stw	r16,136(sp)
    b0f4:	e0001115 	stw	zero,68(fp)
    b0f8:	000b883a 	mov	r5,zero
    b0fc:	003c6906 	br	a2a4 <__alt_exception_stack_pointer+0xf800a2a4>
    b100:	3021883a 	mov	r16,r6
    b104:	003ffb06 	br	b0f4 <__alt_exception_stack_pointer+0xf800b0f4>
    b108:	1000021e 	bne	r2,zero,b114 <_dtoa_r+0x11e0>
    b10c:	4200004c 	andi	r8,r8,1
    b110:	403e7d1e 	bne	r8,zero,ab08 <__alt_exception_stack_pointer+0xf800ab08>
    b114:	01000c04 	movi	r4,48
    b118:	00000106 	br	b120 <_dtoa_r+0x11ec>
    b11c:	102f883a 	mov	r23,r2
    b120:	b8bfffc4 	addi	r2,r23,-1
    b124:	10c00007 	ldb	r3,0(r2)
    b128:	193ffc26 	beq	r3,r4,b11c <__alt_exception_stack_pointer+0xf800b11c>
    b12c:	003e8706 	br	ab4c <__alt_exception_stack_pointer+0xf800ab4c>
    b130:	d8800517 	ldw	r2,20(sp)
    b134:	00a3c83a 	sub	r17,zero,r2
    b138:	8800a426 	beq	r17,zero,b3cc <_dtoa_r+0x1498>
    b13c:	888003cc 	andi	r2,r17,15
    b140:	100490fa 	slli	r2,r2,3
    b144:	00c00074 	movhi	r3,1
    b148:	18d54c04 	addi	r3,r3,21808
    b14c:	1885883a 	add	r2,r3,r2
    b150:	11800017 	ldw	r6,0(r2)
    b154:	11c00117 	ldw	r7,4(r2)
    b158:	9009883a 	mov	r4,r18
    b15c:	980b883a 	mov	r5,r19
    b160:	8823d13a 	srai	r17,r17,4
    b164:	00058e00 	call	58e0 <__muldf3>
    b168:	d8800f15 	stw	r2,60(sp)
    b16c:	d8c01015 	stw	r3,64(sp)
    b170:	8800e826 	beq	r17,zero,b514 <_dtoa_r+0x15e0>
    b174:	05000074 	movhi	r20,1
    b178:	a5154204 	addi	r20,r20,21768
    b17c:	04000084 	movi	r16,2
    b180:	8980004c 	andi	r6,r17,1
    b184:	1009883a 	mov	r4,r2
    b188:	8823d07a 	srai	r17,r17,1
    b18c:	180b883a 	mov	r5,r3
    b190:	30000426 	beq	r6,zero,b1a4 <_dtoa_r+0x1270>
    b194:	a1800017 	ldw	r6,0(r20)
    b198:	a1c00117 	ldw	r7,4(r20)
    b19c:	84000044 	addi	r16,r16,1
    b1a0:	00058e00 	call	58e0 <__muldf3>
    b1a4:	a5000204 	addi	r20,r20,8
    b1a8:	883ff51e 	bne	r17,zero,b180 <__alt_exception_stack_pointer+0xf800b180>
    b1ac:	d8800f15 	stw	r2,60(sp)
    b1b0:	d8c01015 	stw	r3,64(sp)
    b1b4:	003c7606 	br	a390 <__alt_exception_stack_pointer+0xf800a390>
    b1b8:	00c00c04 	movi	r3,48
    b1bc:	10c00005 	stb	r3,0(r2)
    b1c0:	d8c00517 	ldw	r3,20(sp)
    b1c4:	bd3fffc3 	ldbu	r20,-1(r23)
    b1c8:	18c00044 	addi	r3,r3,1
    b1cc:	d8c00515 	stw	r3,20(sp)
    b1d0:	003db906 	br	a8b8 <__alt_exception_stack_pointer+0xf800a8b8>
    b1d4:	89400117 	ldw	r5,4(r17)
    b1d8:	e009883a 	mov	r4,fp
    b1dc:	000cc980 	call	cc98 <_Balloc>
    b1e0:	89800417 	ldw	r6,16(r17)
    b1e4:	89400304 	addi	r5,r17,12
    b1e8:	11000304 	addi	r4,r2,12
    b1ec:	31800084 	addi	r6,r6,2
    b1f0:	318d883a 	add	r6,r6,r6
    b1f4:	318d883a 	add	r6,r6,r6
    b1f8:	1027883a 	mov	r19,r2
    b1fc:	00074880 	call	7488 <memcpy>
    b200:	01800044 	movi	r6,1
    b204:	980b883a 	mov	r5,r19
    b208:	e009883a 	mov	r4,fp
    b20c:	000d4d40 	call	d4d4 <__lshift>
    b210:	1029883a 	mov	r20,r2
    b214:	003ecc06 	br	ad48 <__alt_exception_stack_pointer+0xf800ad48>
    b218:	00800e44 	movi	r2,57
    b21c:	90809026 	beq	r18,r2,b460 <_dtoa_r+0x152c>
    b220:	92000044 	addi	r8,r18,1
    b224:	003f1f06 	br	aea4 <__alt_exception_stack_pointer+0xf800aea4>
    b228:	9011883a 	mov	r8,r18
    b22c:	8825883a 	mov	r18,r17
    b230:	a023883a 	mov	r17,r20
    b234:	003e2906 	br	aadc <__alt_exception_stack_pointer+0xf800aadc>
    b238:	002b883a 	mov	r21,zero
    b23c:	0023883a 	mov	r17,zero
    b240:	003f5406 	br	af94 <__alt_exception_stack_pointer+0xf800af94>
    b244:	61bfffc4 	addi	r6,r12,-1
    b248:	300490fa 	slli	r2,r6,3
    b24c:	00c00074 	movhi	r3,1
    b250:	18d54c04 	addi	r3,r3,21808
    b254:	1885883a 	add	r2,r3,r2
    b258:	11000017 	ldw	r4,0(r2)
    b25c:	11400117 	ldw	r5,4(r2)
    b260:	d8800717 	ldw	r2,28(sp)
    b264:	880f883a 	mov	r7,r17
    b268:	d9801215 	stw	r6,72(sp)
    b26c:	800d883a 	mov	r6,r16
    b270:	db001615 	stw	r12,88(sp)
    b274:	15c00044 	addi	r23,r2,1
    b278:	00058e00 	call	58e0 <__muldf3>
    b27c:	d9401017 	ldw	r5,64(sp)
    b280:	d9000f17 	ldw	r4,60(sp)
    b284:	d8c01515 	stw	r3,84(sp)
    b288:	d8801415 	stw	r2,80(sp)
    b28c:	0006a480 	call	6a48 <__fixdfsi>
    b290:	1009883a 	mov	r4,r2
    b294:	1021883a 	mov	r16,r2
    b298:	0006ac80 	call	6ac8 <__floatsidf>
    b29c:	d9000f17 	ldw	r4,60(sp)
    b2a0:	d9401017 	ldw	r5,64(sp)
    b2a4:	100d883a 	mov	r6,r2
    b2a8:	180f883a 	mov	r7,r3
    b2ac:	000614c0 	call	614c <__subdf3>
    b2b0:	1829883a 	mov	r20,r3
    b2b4:	d8c00717 	ldw	r3,28(sp)
    b2b8:	84000c04 	addi	r16,r16,48
    b2bc:	1023883a 	mov	r17,r2
    b2c0:	1c000005 	stb	r16,0(r3)
    b2c4:	db001617 	ldw	r12,88(sp)
    b2c8:	00800044 	movi	r2,1
    b2cc:	60802226 	beq	r12,r2,b358 <_dtoa_r+0x1424>
    b2d0:	d9c00717 	ldw	r7,28(sp)
    b2d4:	8805883a 	mov	r2,r17
    b2d8:	b82b883a 	mov	r21,r23
    b2dc:	3b19883a 	add	r12,r7,r12
    b2e0:	6023883a 	mov	r17,r12
    b2e4:	a007883a 	mov	r3,r20
    b2e8:	dc800f15 	stw	r18,60(sp)
    b2ec:	000d883a 	mov	r6,zero
    b2f0:	01d00934 	movhi	r7,16420
    b2f4:	1009883a 	mov	r4,r2
    b2f8:	180b883a 	mov	r5,r3
    b2fc:	00058e00 	call	58e0 <__muldf3>
    b300:	180b883a 	mov	r5,r3
    b304:	1009883a 	mov	r4,r2
    b308:	1829883a 	mov	r20,r3
    b30c:	1025883a 	mov	r18,r2
    b310:	0006a480 	call	6a48 <__fixdfsi>
    b314:	1009883a 	mov	r4,r2
    b318:	1021883a 	mov	r16,r2
    b31c:	0006ac80 	call	6ac8 <__floatsidf>
    b320:	100d883a 	mov	r6,r2
    b324:	180f883a 	mov	r7,r3
    b328:	9009883a 	mov	r4,r18
    b32c:	a00b883a 	mov	r5,r20
    b330:	84000c04 	addi	r16,r16,48
    b334:	000614c0 	call	614c <__subdf3>
    b338:	ad400044 	addi	r21,r21,1
    b33c:	ac3fffc5 	stb	r16,-1(r21)
    b340:	ac7fea1e 	bne	r21,r17,b2ec <__alt_exception_stack_pointer+0xf800b2ec>
    b344:	1023883a 	mov	r17,r2
    b348:	d8801217 	ldw	r2,72(sp)
    b34c:	dc800f17 	ldw	r18,60(sp)
    b350:	1829883a 	mov	r20,r3
    b354:	b8af883a 	add	r23,r23,r2
    b358:	d9001417 	ldw	r4,80(sp)
    b35c:	d9401517 	ldw	r5,84(sp)
    b360:	000d883a 	mov	r6,zero
    b364:	01cff834 	movhi	r7,16352
    b368:	0004ed00 	call	4ed0 <__adddf3>
    b36c:	880d883a 	mov	r6,r17
    b370:	a00f883a 	mov	r7,r20
    b374:	1009883a 	mov	r4,r2
    b378:	180b883a 	mov	r5,r3
    b37c:	0011b140 	call	11b14 <__ledf2>
    b380:	10003e0e 	bge	r2,zero,b47c <_dtoa_r+0x1548>
    b384:	d9001317 	ldw	r4,76(sp)
    b388:	bd3fffc3 	ldbu	r20,-1(r23)
    b38c:	d9000515 	stw	r4,20(sp)
    b390:	003d3b06 	br	a880 <__alt_exception_stack_pointer+0xf800a880>
    b394:	0027883a 	mov	r19,zero
    b398:	003f1b06 	br	b008 <__alt_exception_stack_pointer+0xf800b008>
    b39c:	d8800817 	ldw	r2,32(sp)
    b3a0:	11e9c83a 	sub	r20,r2,r7
    b3a4:	0005883a 	mov	r2,zero
    b3a8:	003d5406 	br	a8fc <__alt_exception_stack_pointer+0xf800a8fc>
    b3ac:	00800044 	movi	r2,1
    b3b0:	003dc706 	br	aad0 <__alt_exception_stack_pointer+0xf800aad0>
    b3b4:	d8c00217 	ldw	r3,8(sp)
    b3b8:	00800d84 	movi	r2,54
    b3bc:	dd400a17 	ldw	r21,40(sp)
    b3c0:	10c5c83a 	sub	r2,r2,r3
    b3c4:	dd000817 	ldw	r20,32(sp)
    b3c8:	003d4c06 	br	a8fc <__alt_exception_stack_pointer+0xf800a8fc>
    b3cc:	dc800f15 	stw	r18,60(sp)
    b3d0:	dcc01015 	stw	r19,64(sp)
    b3d4:	04000084 	movi	r16,2
    b3d8:	003bed06 	br	a390 <__alt_exception_stack_pointer+0xf800a390>
    b3dc:	d9000617 	ldw	r4,24(sp)
    b3e0:	203f0d26 	beq	r4,zero,b018 <__alt_exception_stack_pointer+0xf800b018>
    b3e4:	d9800c17 	ldw	r6,48(sp)
    b3e8:	01bcab0e 	bge	zero,r6,a698 <__alt_exception_stack_pointer+0xf800a698>
    b3ec:	d9401017 	ldw	r5,64(sp)
    b3f0:	d9000f17 	ldw	r4,60(sp)
    b3f4:	000d883a 	mov	r6,zero
    b3f8:	01d00934 	movhi	r7,16420
    b3fc:	00058e00 	call	58e0 <__muldf3>
    b400:	81000044 	addi	r4,r16,1
    b404:	d8800f15 	stw	r2,60(sp)
    b408:	d8c01015 	stw	r3,64(sp)
    b40c:	0006ac80 	call	6ac8 <__floatsidf>
    b410:	d9800f17 	ldw	r6,60(sp)
    b414:	d9c01017 	ldw	r7,64(sp)
    b418:	1009883a 	mov	r4,r2
    b41c:	180b883a 	mov	r5,r3
    b420:	00058e00 	call	58e0 <__muldf3>
    b424:	01d00734 	movhi	r7,16412
    b428:	000d883a 	mov	r6,zero
    b42c:	1009883a 	mov	r4,r2
    b430:	180b883a 	mov	r5,r3
    b434:	0004ed00 	call	4ed0 <__adddf3>
    b438:	d9c00517 	ldw	r7,20(sp)
    b43c:	047f3034 	movhi	r17,64704
    b440:	1021883a 	mov	r16,r2
    b444:	39ffffc4 	addi	r7,r7,-1
    b448:	d9c01315 	stw	r7,76(sp)
    b44c:	1c63883a 	add	r17,r3,r17
    b450:	db000c17 	ldw	r12,48(sp)
    b454:	003bea06 	br	a400 <__alt_exception_stack_pointer+0xf800a400>
    b458:	dc000915 	stw	r16,36(sp)
    b45c:	003e0e06 	br	ac98 <__alt_exception_stack_pointer+0xf800ac98>
    b460:	01000e44 	movi	r4,57
    b464:	8825883a 	mov	r18,r17
    b468:	9dc00044 	addi	r23,r19,1
    b46c:	99000005 	stb	r4,0(r19)
    b470:	a023883a 	mov	r17,r20
    b474:	dc000915 	stw	r16,36(sp)
    b478:	003da406 	br	ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b47c:	d9801417 	ldw	r6,80(sp)
    b480:	d9c01517 	ldw	r7,84(sp)
    b484:	0009883a 	mov	r4,zero
    b488:	014ff834 	movhi	r5,16352
    b48c:	000614c0 	call	614c <__subdf3>
    b490:	880d883a 	mov	r6,r17
    b494:	a00f883a 	mov	r7,r20
    b498:	1009883a 	mov	r4,r2
    b49c:	180b883a 	mov	r5,r3
    b4a0:	00058040 	call	5804 <__gedf2>
    b4a4:	00bc7c0e 	bge	zero,r2,a698 <__alt_exception_stack_pointer+0xf800a698>
    b4a8:	01000c04 	movi	r4,48
    b4ac:	00000106 	br	b4b4 <_dtoa_r+0x1580>
    b4b0:	102f883a 	mov	r23,r2
    b4b4:	b8bfffc4 	addi	r2,r23,-1
    b4b8:	10c00007 	ldb	r3,0(r2)
    b4bc:	193ffc26 	beq	r3,r4,b4b0 <__alt_exception_stack_pointer+0xf800b4b0>
    b4c0:	d9801317 	ldw	r6,76(sp)
    b4c4:	d9800515 	stw	r6,20(sp)
    b4c8:	003c4406 	br	a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    b4cc:	d9801317 	ldw	r6,76(sp)
    b4d0:	d9800515 	stw	r6,20(sp)
    b4d4:	003cea06 	br	a880 <__alt_exception_stack_pointer+0xf800a880>
    b4d8:	dd800f17 	ldw	r22,60(sp)
    b4dc:	dcc01017 	ldw	r19,64(sp)
    b4e0:	dc801217 	ldw	r18,72(sp)
    b4e4:	003c6c06 	br	a698 <__alt_exception_stack_pointer+0xf800a698>
    b4e8:	903e031e 	bne	r18,zero,acf8 <__alt_exception_stack_pointer+0xf800acf8>
    b4ec:	003ebb06 	br	afdc <__alt_exception_stack_pointer+0xf800afdc>
    b4f0:	103e6c1e 	bne	r2,zero,aea4 <__alt_exception_stack_pointer+0xf800aea4>
    b4f4:	4080004c 	andi	r2,r8,1
    b4f8:	103e6a26 	beq	r2,zero,aea4 <__alt_exception_stack_pointer+0xf800aea4>
    b4fc:	003e6606 	br	ae98 <__alt_exception_stack_pointer+0xf800ae98>
    b500:	d8c00317 	ldw	r3,12(sp)
    b504:	00800084 	movi	r2,2
    b508:	10c02916 	blt	r2,r3,b5b0 <_dtoa_r+0x167c>
    b50c:	d9000c17 	ldw	r4,48(sp)
    b510:	003e8806 	br	af34 <__alt_exception_stack_pointer+0xf800af34>
    b514:	04000084 	movi	r16,2
    b518:	003b9d06 	br	a390 <__alt_exception_stack_pointer+0xf800a390>
    b51c:	d9001317 	ldw	r4,76(sp)
    b520:	d9000515 	stw	r4,20(sp)
    b524:	003cd606 	br	a880 <__alt_exception_stack_pointer+0xf800a880>
    b528:	d8801317 	ldw	r2,76(sp)
    b52c:	d8800515 	stw	r2,20(sp)
    b530:	003c2a06 	br	a5dc <__alt_exception_stack_pointer+0xf800a5dc>
    b534:	d9800317 	ldw	r6,12(sp)
    b538:	00800084 	movi	r2,2
    b53c:	11801516 	blt	r2,r6,b594 <_dtoa_r+0x1660>
    b540:	d9c00c17 	ldw	r7,48(sp)
    b544:	d9c00615 	stw	r7,24(sp)
    b548:	003df706 	br	ad28 <__alt_exception_stack_pointer+0xf800ad28>
    b54c:	193d3926 	beq	r3,r4,aa34 <__alt_exception_stack_pointer+0xf800aa34>
    b550:	00c00f04 	movi	r3,60
    b554:	1885c83a 	sub	r2,r3,r2
    b558:	003ddf06 	br	acd8 <__alt_exception_stack_pointer+0xf800acd8>
    b55c:	e009883a 	mov	r4,fp
    b560:	e0001115 	stw	zero,68(fp)
    b564:	000b883a 	mov	r5,zero
    b568:	000cc980 	call	cc98 <_Balloc>
    b56c:	d8800715 	stw	r2,28(sp)
    b570:	d8c00717 	ldw	r3,28(sp)
    b574:	00bfffc4 	movi	r2,-1
    b578:	01000044 	movi	r4,1
    b57c:	d8800c15 	stw	r2,48(sp)
    b580:	e0c01015 	stw	r3,64(fp)
    b584:	d9000b15 	stw	r4,44(sp)
    b588:	d8800615 	stw	r2,24(sp)
    b58c:	d8002215 	stw	zero,136(sp)
    b590:	003c4106 	br	a698 <__alt_exception_stack_pointer+0xf800a698>
    b594:	d8c00c17 	ldw	r3,48(sp)
    b598:	d8c00615 	stw	r3,24(sp)
    b59c:	003e7006 	br	af60 <__alt_exception_stack_pointer+0xf800af60>
    b5a0:	04400044 	movi	r17,1
    b5a4:	003b2006 	br	a228 <__alt_exception_stack_pointer+0xf800a228>
    b5a8:	000b883a 	mov	r5,zero
    b5ac:	003b3d06 	br	a2a4 <__alt_exception_stack_pointer+0xf800a2a4>
    b5b0:	d8800c17 	ldw	r2,48(sp)
    b5b4:	d8800615 	stw	r2,24(sp)
    b5b8:	003e6906 	br	af60 <__alt_exception_stack_pointer+0xf800af60>

0000b5bc <__sflush_r>:
    b5bc:	2880030b 	ldhu	r2,12(r5)
    b5c0:	defffb04 	addi	sp,sp,-20
    b5c4:	dcc00315 	stw	r19,12(sp)
    b5c8:	dc400115 	stw	r17,4(sp)
    b5cc:	dfc00415 	stw	ra,16(sp)
    b5d0:	dc800215 	stw	r18,8(sp)
    b5d4:	dc000015 	stw	r16,0(sp)
    b5d8:	10c0020c 	andi	r3,r2,8
    b5dc:	2823883a 	mov	r17,r5
    b5e0:	2027883a 	mov	r19,r4
    b5e4:	1800311e 	bne	r3,zero,b6ac <__sflush_r+0xf0>
    b5e8:	28c00117 	ldw	r3,4(r5)
    b5ec:	10820014 	ori	r2,r2,2048
    b5f0:	2880030d 	sth	r2,12(r5)
    b5f4:	00c04b0e 	bge	zero,r3,b724 <__sflush_r+0x168>
    b5f8:	8a000a17 	ldw	r8,40(r17)
    b5fc:	40002326 	beq	r8,zero,b68c <__sflush_r+0xd0>
    b600:	9c000017 	ldw	r16,0(r19)
    b604:	10c4000c 	andi	r3,r2,4096
    b608:	98000015 	stw	zero,0(r19)
    b60c:	18004826 	beq	r3,zero,b730 <__sflush_r+0x174>
    b610:	89801417 	ldw	r6,80(r17)
    b614:	10c0010c 	andi	r3,r2,4
    b618:	18000626 	beq	r3,zero,b634 <__sflush_r+0x78>
    b61c:	88c00117 	ldw	r3,4(r17)
    b620:	88800c17 	ldw	r2,48(r17)
    b624:	30cdc83a 	sub	r6,r6,r3
    b628:	10000226 	beq	r2,zero,b634 <__sflush_r+0x78>
    b62c:	88800f17 	ldw	r2,60(r17)
    b630:	308dc83a 	sub	r6,r6,r2
    b634:	89400717 	ldw	r5,28(r17)
    b638:	000f883a 	mov	r7,zero
    b63c:	9809883a 	mov	r4,r19
    b640:	403ee83a 	callr	r8
    b644:	00ffffc4 	movi	r3,-1
    b648:	10c04426 	beq	r2,r3,b75c <__sflush_r+0x1a0>
    b64c:	88c0030b 	ldhu	r3,12(r17)
    b650:	89000417 	ldw	r4,16(r17)
    b654:	88000115 	stw	zero,4(r17)
    b658:	197dffcc 	andi	r5,r3,63487
    b65c:	8940030d 	sth	r5,12(r17)
    b660:	89000015 	stw	r4,0(r17)
    b664:	18c4000c 	andi	r3,r3,4096
    b668:	18002c1e 	bne	r3,zero,b71c <__sflush_r+0x160>
    b66c:	89400c17 	ldw	r5,48(r17)
    b670:	9c000015 	stw	r16,0(r19)
    b674:	28000526 	beq	r5,zero,b68c <__sflush_r+0xd0>
    b678:	88801004 	addi	r2,r17,64
    b67c:	28800226 	beq	r5,r2,b688 <__sflush_r+0xcc>
    b680:	9809883a 	mov	r4,r19
    b684:	000bd380 	call	bd38 <_free_r>
    b688:	88000c15 	stw	zero,48(r17)
    b68c:	0005883a 	mov	r2,zero
    b690:	dfc00417 	ldw	ra,16(sp)
    b694:	dcc00317 	ldw	r19,12(sp)
    b698:	dc800217 	ldw	r18,8(sp)
    b69c:	dc400117 	ldw	r17,4(sp)
    b6a0:	dc000017 	ldw	r16,0(sp)
    b6a4:	dec00504 	addi	sp,sp,20
    b6a8:	f800283a 	ret
    b6ac:	2c800417 	ldw	r18,16(r5)
    b6b0:	903ff626 	beq	r18,zero,b68c <__alt_exception_stack_pointer+0xf800b68c>
    b6b4:	2c000017 	ldw	r16,0(r5)
    b6b8:	108000cc 	andi	r2,r2,3
    b6bc:	2c800015 	stw	r18,0(r5)
    b6c0:	84a1c83a 	sub	r16,r16,r18
    b6c4:	1000131e 	bne	r2,zero,b714 <__sflush_r+0x158>
    b6c8:	28800517 	ldw	r2,20(r5)
    b6cc:	88800215 	stw	r2,8(r17)
    b6d0:	04000316 	blt	zero,r16,b6e0 <__sflush_r+0x124>
    b6d4:	003fed06 	br	b68c <__alt_exception_stack_pointer+0xf800b68c>
    b6d8:	90a5883a 	add	r18,r18,r2
    b6dc:	043feb0e 	bge	zero,r16,b68c <__alt_exception_stack_pointer+0xf800b68c>
    b6e0:	88800917 	ldw	r2,36(r17)
    b6e4:	89400717 	ldw	r5,28(r17)
    b6e8:	800f883a 	mov	r7,r16
    b6ec:	900d883a 	mov	r6,r18
    b6f0:	9809883a 	mov	r4,r19
    b6f4:	103ee83a 	callr	r2
    b6f8:	80a1c83a 	sub	r16,r16,r2
    b6fc:	00bff616 	blt	zero,r2,b6d8 <__alt_exception_stack_pointer+0xf800b6d8>
    b700:	88c0030b 	ldhu	r3,12(r17)
    b704:	00bfffc4 	movi	r2,-1
    b708:	18c01014 	ori	r3,r3,64
    b70c:	88c0030d 	sth	r3,12(r17)
    b710:	003fdf06 	br	b690 <__alt_exception_stack_pointer+0xf800b690>
    b714:	0005883a 	mov	r2,zero
    b718:	003fec06 	br	b6cc <__alt_exception_stack_pointer+0xf800b6cc>
    b71c:	88801415 	stw	r2,80(r17)
    b720:	003fd206 	br	b66c <__alt_exception_stack_pointer+0xf800b66c>
    b724:	28c00f17 	ldw	r3,60(r5)
    b728:	00ffb316 	blt	zero,r3,b5f8 <__alt_exception_stack_pointer+0xf800b5f8>
    b72c:	003fd706 	br	b68c <__alt_exception_stack_pointer+0xf800b68c>
    b730:	89400717 	ldw	r5,28(r17)
    b734:	000d883a 	mov	r6,zero
    b738:	01c00044 	movi	r7,1
    b73c:	9809883a 	mov	r4,r19
    b740:	403ee83a 	callr	r8
    b744:	100d883a 	mov	r6,r2
    b748:	00bfffc4 	movi	r2,-1
    b74c:	30801426 	beq	r6,r2,b7a0 <__sflush_r+0x1e4>
    b750:	8880030b 	ldhu	r2,12(r17)
    b754:	8a000a17 	ldw	r8,40(r17)
    b758:	003fae06 	br	b614 <__alt_exception_stack_pointer+0xf800b614>
    b75c:	98c00017 	ldw	r3,0(r19)
    b760:	183fba26 	beq	r3,zero,b64c <__alt_exception_stack_pointer+0xf800b64c>
    b764:	01000744 	movi	r4,29
    b768:	19000626 	beq	r3,r4,b784 <__sflush_r+0x1c8>
    b76c:	01000584 	movi	r4,22
    b770:	19000426 	beq	r3,r4,b784 <__sflush_r+0x1c8>
    b774:	88c0030b 	ldhu	r3,12(r17)
    b778:	18c01014 	ori	r3,r3,64
    b77c:	88c0030d 	sth	r3,12(r17)
    b780:	003fc306 	br	b690 <__alt_exception_stack_pointer+0xf800b690>
    b784:	8880030b 	ldhu	r2,12(r17)
    b788:	88c00417 	ldw	r3,16(r17)
    b78c:	88000115 	stw	zero,4(r17)
    b790:	10bdffcc 	andi	r2,r2,63487
    b794:	8880030d 	sth	r2,12(r17)
    b798:	88c00015 	stw	r3,0(r17)
    b79c:	003fb306 	br	b66c <__alt_exception_stack_pointer+0xf800b66c>
    b7a0:	98800017 	ldw	r2,0(r19)
    b7a4:	103fea26 	beq	r2,zero,b750 <__alt_exception_stack_pointer+0xf800b750>
    b7a8:	00c00744 	movi	r3,29
    b7ac:	10c00226 	beq	r2,r3,b7b8 <__sflush_r+0x1fc>
    b7b0:	00c00584 	movi	r3,22
    b7b4:	10c0031e 	bne	r2,r3,b7c4 <__sflush_r+0x208>
    b7b8:	9c000015 	stw	r16,0(r19)
    b7bc:	0005883a 	mov	r2,zero
    b7c0:	003fb306 	br	b690 <__alt_exception_stack_pointer+0xf800b690>
    b7c4:	88c0030b 	ldhu	r3,12(r17)
    b7c8:	3005883a 	mov	r2,r6
    b7cc:	18c01014 	ori	r3,r3,64
    b7d0:	88c0030d 	sth	r3,12(r17)
    b7d4:	003fae06 	br	b690 <__alt_exception_stack_pointer+0xf800b690>

0000b7d8 <_fflush_r>:
    b7d8:	defffd04 	addi	sp,sp,-12
    b7dc:	dc000115 	stw	r16,4(sp)
    b7e0:	dfc00215 	stw	ra,8(sp)
    b7e4:	2021883a 	mov	r16,r4
    b7e8:	20000226 	beq	r4,zero,b7f4 <_fflush_r+0x1c>
    b7ec:	20800e17 	ldw	r2,56(r4)
    b7f0:	10000c26 	beq	r2,zero,b824 <_fflush_r+0x4c>
    b7f4:	2880030f 	ldh	r2,12(r5)
    b7f8:	1000051e 	bne	r2,zero,b810 <_fflush_r+0x38>
    b7fc:	0005883a 	mov	r2,zero
    b800:	dfc00217 	ldw	ra,8(sp)
    b804:	dc000117 	ldw	r16,4(sp)
    b808:	dec00304 	addi	sp,sp,12
    b80c:	f800283a 	ret
    b810:	8009883a 	mov	r4,r16
    b814:	dfc00217 	ldw	ra,8(sp)
    b818:	dc000117 	ldw	r16,4(sp)
    b81c:	dec00304 	addi	sp,sp,12
    b820:	000b5bc1 	jmpi	b5bc <__sflush_r>
    b824:	d9400015 	stw	r5,0(sp)
    b828:	000bbc40 	call	bbc4 <__sinit>
    b82c:	d9400017 	ldw	r5,0(sp)
    b830:	003ff006 	br	b7f4 <__alt_exception_stack_pointer+0xf800b7f4>

0000b834 <fflush>:
    b834:	20000526 	beq	r4,zero,b84c <fflush+0x18>
    b838:	00800074 	movhi	r2,1
    b83c:	109c7304 	addi	r2,r2,29132
    b840:	200b883a 	mov	r5,r4
    b844:	11000017 	ldw	r4,0(r2)
    b848:	000b7d81 	jmpi	b7d8 <_fflush_r>
    b84c:	00800074 	movhi	r2,1
    b850:	109c7204 	addi	r2,r2,29128
    b854:	11000017 	ldw	r4,0(r2)
    b858:	01400074 	movhi	r5,1
    b85c:	296df604 	addi	r5,r5,-18472
    b860:	000c5d41 	jmpi	c5d4 <_fwalk_reent>

0000b864 <__fp_unlock>:
    b864:	0005883a 	mov	r2,zero
    b868:	f800283a 	ret

0000b86c <_cleanup_r>:
    b86c:	01400074 	movhi	r5,1
    b870:	297f7204 	addi	r5,r5,-568
    b874:	000c5d41 	jmpi	c5d4 <_fwalk_reent>

0000b878 <__sinit.part.1>:
    b878:	defff704 	addi	sp,sp,-36
    b87c:	00c00074 	movhi	r3,1
    b880:	dfc00815 	stw	ra,32(sp)
    b884:	ddc00715 	stw	r23,28(sp)
    b888:	dd800615 	stw	r22,24(sp)
    b88c:	dd400515 	stw	r21,20(sp)
    b890:	dd000415 	stw	r20,16(sp)
    b894:	dcc00315 	stw	r19,12(sp)
    b898:	dc800215 	stw	r18,8(sp)
    b89c:	dc400115 	stw	r17,4(sp)
    b8a0:	dc000015 	stw	r16,0(sp)
    b8a4:	18ee1b04 	addi	r3,r3,-18324
    b8a8:	24000117 	ldw	r16,4(r4)
    b8ac:	20c00f15 	stw	r3,60(r4)
    b8b0:	2080bb04 	addi	r2,r4,748
    b8b4:	00c000c4 	movi	r3,3
    b8b8:	20c0b915 	stw	r3,740(r4)
    b8bc:	2080ba15 	stw	r2,744(r4)
    b8c0:	2000b815 	stw	zero,736(r4)
    b8c4:	05c00204 	movi	r23,8
    b8c8:	00800104 	movi	r2,4
    b8cc:	2025883a 	mov	r18,r4
    b8d0:	b80d883a 	mov	r6,r23
    b8d4:	81001704 	addi	r4,r16,92
    b8d8:	000b883a 	mov	r5,zero
    b8dc:	80000015 	stw	zero,0(r16)
    b8e0:	80000115 	stw	zero,4(r16)
    b8e4:	80000215 	stw	zero,8(r16)
    b8e8:	8080030d 	sth	r2,12(r16)
    b8ec:	80001915 	stw	zero,100(r16)
    b8f0:	8000038d 	sth	zero,14(r16)
    b8f4:	80000415 	stw	zero,16(r16)
    b8f8:	80000515 	stw	zero,20(r16)
    b8fc:	80000615 	stw	zero,24(r16)
    b900:	000cb700 	call	cb70 <memset>
    b904:	05800074 	movhi	r22,1
    b908:	94400217 	ldw	r17,8(r18)
    b90c:	05400074 	movhi	r21,1
    b910:	05000074 	movhi	r20,1
    b914:	04c00074 	movhi	r19,1
    b918:	b5b8ca04 	addi	r22,r22,-7384
    b91c:	ad78e104 	addi	r21,r21,-7292
    b920:	a5390004 	addi	r20,r20,-7168
    b924:	9cf91704 	addi	r19,r19,-7076
    b928:	85800815 	stw	r22,32(r16)
    b92c:	85400915 	stw	r21,36(r16)
    b930:	85000a15 	stw	r20,40(r16)
    b934:	84c00b15 	stw	r19,44(r16)
    b938:	84000715 	stw	r16,28(r16)
    b93c:	00800284 	movi	r2,10
    b940:	8880030d 	sth	r2,12(r17)
    b944:	00800044 	movi	r2,1
    b948:	b80d883a 	mov	r6,r23
    b94c:	89001704 	addi	r4,r17,92
    b950:	000b883a 	mov	r5,zero
    b954:	88000015 	stw	zero,0(r17)
    b958:	88000115 	stw	zero,4(r17)
    b95c:	88000215 	stw	zero,8(r17)
    b960:	88001915 	stw	zero,100(r17)
    b964:	8880038d 	sth	r2,14(r17)
    b968:	88000415 	stw	zero,16(r17)
    b96c:	88000515 	stw	zero,20(r17)
    b970:	88000615 	stw	zero,24(r17)
    b974:	000cb700 	call	cb70 <memset>
    b978:	94000317 	ldw	r16,12(r18)
    b97c:	00800484 	movi	r2,18
    b980:	8c400715 	stw	r17,28(r17)
    b984:	8d800815 	stw	r22,32(r17)
    b988:	8d400915 	stw	r21,36(r17)
    b98c:	8d000a15 	stw	r20,40(r17)
    b990:	8cc00b15 	stw	r19,44(r17)
    b994:	8080030d 	sth	r2,12(r16)
    b998:	00800084 	movi	r2,2
    b99c:	80000015 	stw	zero,0(r16)
    b9a0:	80000115 	stw	zero,4(r16)
    b9a4:	80000215 	stw	zero,8(r16)
    b9a8:	80001915 	stw	zero,100(r16)
    b9ac:	8080038d 	sth	r2,14(r16)
    b9b0:	80000415 	stw	zero,16(r16)
    b9b4:	80000515 	stw	zero,20(r16)
    b9b8:	80000615 	stw	zero,24(r16)
    b9bc:	b80d883a 	mov	r6,r23
    b9c0:	000b883a 	mov	r5,zero
    b9c4:	81001704 	addi	r4,r16,92
    b9c8:	000cb700 	call	cb70 <memset>
    b9cc:	00800044 	movi	r2,1
    b9d0:	84000715 	stw	r16,28(r16)
    b9d4:	85800815 	stw	r22,32(r16)
    b9d8:	85400915 	stw	r21,36(r16)
    b9dc:	85000a15 	stw	r20,40(r16)
    b9e0:	84c00b15 	stw	r19,44(r16)
    b9e4:	90800e15 	stw	r2,56(r18)
    b9e8:	dfc00817 	ldw	ra,32(sp)
    b9ec:	ddc00717 	ldw	r23,28(sp)
    b9f0:	dd800617 	ldw	r22,24(sp)
    b9f4:	dd400517 	ldw	r21,20(sp)
    b9f8:	dd000417 	ldw	r20,16(sp)
    b9fc:	dcc00317 	ldw	r19,12(sp)
    ba00:	dc800217 	ldw	r18,8(sp)
    ba04:	dc400117 	ldw	r17,4(sp)
    ba08:	dc000017 	ldw	r16,0(sp)
    ba0c:	dec00904 	addi	sp,sp,36
    ba10:	f800283a 	ret

0000ba14 <__fp_lock>:
    ba14:	0005883a 	mov	r2,zero
    ba18:	f800283a 	ret

0000ba1c <__sfmoreglue>:
    ba1c:	defffc04 	addi	sp,sp,-16
    ba20:	dc800215 	stw	r18,8(sp)
    ba24:	2825883a 	mov	r18,r5
    ba28:	dc000015 	stw	r16,0(sp)
    ba2c:	01401a04 	movi	r5,104
    ba30:	2021883a 	mov	r16,r4
    ba34:	913fffc4 	addi	r4,r18,-1
    ba38:	dfc00315 	stw	ra,12(sp)
    ba3c:	dc400115 	stw	r17,4(sp)
    ba40:	0004ea80 	call	4ea8 <__mulsi3>
    ba44:	8009883a 	mov	r4,r16
    ba48:	11401d04 	addi	r5,r2,116
    ba4c:	1023883a 	mov	r17,r2
    ba50:	0006c7c0 	call	6c7c <_malloc_r>
    ba54:	1021883a 	mov	r16,r2
    ba58:	10000726 	beq	r2,zero,ba78 <__sfmoreglue+0x5c>
    ba5c:	11000304 	addi	r4,r2,12
    ba60:	10000015 	stw	zero,0(r2)
    ba64:	14800115 	stw	r18,4(r2)
    ba68:	11000215 	stw	r4,8(r2)
    ba6c:	89801a04 	addi	r6,r17,104
    ba70:	000b883a 	mov	r5,zero
    ba74:	000cb700 	call	cb70 <memset>
    ba78:	8005883a 	mov	r2,r16
    ba7c:	dfc00317 	ldw	ra,12(sp)
    ba80:	dc800217 	ldw	r18,8(sp)
    ba84:	dc400117 	ldw	r17,4(sp)
    ba88:	dc000017 	ldw	r16,0(sp)
    ba8c:	dec00404 	addi	sp,sp,16
    ba90:	f800283a 	ret

0000ba94 <__sfp>:
    ba94:	defffb04 	addi	sp,sp,-20
    ba98:	dc000015 	stw	r16,0(sp)
    ba9c:	04000074 	movhi	r16,1
    baa0:	841c7204 	addi	r16,r16,29128
    baa4:	dcc00315 	stw	r19,12(sp)
    baa8:	2027883a 	mov	r19,r4
    baac:	81000017 	ldw	r4,0(r16)
    bab0:	dfc00415 	stw	ra,16(sp)
    bab4:	dc800215 	stw	r18,8(sp)
    bab8:	20800e17 	ldw	r2,56(r4)
    babc:	dc400115 	stw	r17,4(sp)
    bac0:	1000021e 	bne	r2,zero,bacc <__sfp+0x38>
    bac4:	000b8780 	call	b878 <__sinit.part.1>
    bac8:	81000017 	ldw	r4,0(r16)
    bacc:	2480b804 	addi	r18,r4,736
    bad0:	047fffc4 	movi	r17,-1
    bad4:	91000117 	ldw	r4,4(r18)
    bad8:	94000217 	ldw	r16,8(r18)
    badc:	213fffc4 	addi	r4,r4,-1
    bae0:	20000a16 	blt	r4,zero,bb0c <__sfp+0x78>
    bae4:	8080030f 	ldh	r2,12(r16)
    bae8:	10000c26 	beq	r2,zero,bb1c <__sfp+0x88>
    baec:	80c01d04 	addi	r3,r16,116
    baf0:	00000206 	br	bafc <__sfp+0x68>
    baf4:	18bfe60f 	ldh	r2,-104(r3)
    baf8:	10000826 	beq	r2,zero,bb1c <__sfp+0x88>
    bafc:	213fffc4 	addi	r4,r4,-1
    bb00:	1c3ffd04 	addi	r16,r3,-12
    bb04:	18c01a04 	addi	r3,r3,104
    bb08:	247ffa1e 	bne	r4,r17,baf4 <__alt_exception_stack_pointer+0xf800baf4>
    bb0c:	90800017 	ldw	r2,0(r18)
    bb10:	10001d26 	beq	r2,zero,bb88 <__sfp+0xf4>
    bb14:	1025883a 	mov	r18,r2
    bb18:	003fee06 	br	bad4 <__alt_exception_stack_pointer+0xf800bad4>
    bb1c:	00bfffc4 	movi	r2,-1
    bb20:	8080038d 	sth	r2,14(r16)
    bb24:	00800044 	movi	r2,1
    bb28:	8080030d 	sth	r2,12(r16)
    bb2c:	80001915 	stw	zero,100(r16)
    bb30:	80000015 	stw	zero,0(r16)
    bb34:	80000215 	stw	zero,8(r16)
    bb38:	80000115 	stw	zero,4(r16)
    bb3c:	80000415 	stw	zero,16(r16)
    bb40:	80000515 	stw	zero,20(r16)
    bb44:	80000615 	stw	zero,24(r16)
    bb48:	01800204 	movi	r6,8
    bb4c:	000b883a 	mov	r5,zero
    bb50:	81001704 	addi	r4,r16,92
    bb54:	000cb700 	call	cb70 <memset>
    bb58:	8005883a 	mov	r2,r16
    bb5c:	80000c15 	stw	zero,48(r16)
    bb60:	80000d15 	stw	zero,52(r16)
    bb64:	80001115 	stw	zero,68(r16)
    bb68:	80001215 	stw	zero,72(r16)
    bb6c:	dfc00417 	ldw	ra,16(sp)
    bb70:	dcc00317 	ldw	r19,12(sp)
    bb74:	dc800217 	ldw	r18,8(sp)
    bb78:	dc400117 	ldw	r17,4(sp)
    bb7c:	dc000017 	ldw	r16,0(sp)
    bb80:	dec00504 	addi	sp,sp,20
    bb84:	f800283a 	ret
    bb88:	01400104 	movi	r5,4
    bb8c:	9809883a 	mov	r4,r19
    bb90:	000ba1c0 	call	ba1c <__sfmoreglue>
    bb94:	90800015 	stw	r2,0(r18)
    bb98:	103fde1e 	bne	r2,zero,bb14 <__alt_exception_stack_pointer+0xf800bb14>
    bb9c:	00800304 	movi	r2,12
    bba0:	98800015 	stw	r2,0(r19)
    bba4:	0005883a 	mov	r2,zero
    bba8:	003ff006 	br	bb6c <__alt_exception_stack_pointer+0xf800bb6c>

0000bbac <_cleanup>:
    bbac:	00800074 	movhi	r2,1
    bbb0:	109c7204 	addi	r2,r2,29128
    bbb4:	11000017 	ldw	r4,0(r2)
    bbb8:	01400074 	movhi	r5,1
    bbbc:	297f7204 	addi	r5,r5,-568
    bbc0:	000c5d41 	jmpi	c5d4 <_fwalk_reent>

0000bbc4 <__sinit>:
    bbc4:	20800e17 	ldw	r2,56(r4)
    bbc8:	10000126 	beq	r2,zero,bbd0 <__sinit+0xc>
    bbcc:	f800283a 	ret
    bbd0:	000b8781 	jmpi	b878 <__sinit.part.1>

0000bbd4 <__sfp_lock_acquire>:
    bbd4:	f800283a 	ret

0000bbd8 <__sfp_lock_release>:
    bbd8:	f800283a 	ret

0000bbdc <__sinit_lock_acquire>:
    bbdc:	f800283a 	ret

0000bbe0 <__sinit_lock_release>:
    bbe0:	f800283a 	ret

0000bbe4 <__fp_lock_all>:
    bbe4:	00800074 	movhi	r2,1
    bbe8:	109c7304 	addi	r2,r2,29132
    bbec:	11000017 	ldw	r4,0(r2)
    bbf0:	01400074 	movhi	r5,1
    bbf4:	296e8504 	addi	r5,r5,-17900
    bbf8:	000c5101 	jmpi	c510 <_fwalk>

0000bbfc <__fp_unlock_all>:
    bbfc:	00800074 	movhi	r2,1
    bc00:	109c7304 	addi	r2,r2,29132
    bc04:	11000017 	ldw	r4,0(r2)
    bc08:	01400074 	movhi	r5,1
    bc0c:	296e1904 	addi	r5,r5,-18332
    bc10:	000c5101 	jmpi	c510 <_fwalk>

0000bc14 <_malloc_trim_r>:
    bc14:	defffb04 	addi	sp,sp,-20
    bc18:	dcc00315 	stw	r19,12(sp)
    bc1c:	04c00074 	movhi	r19,1
    bc20:	dc800215 	stw	r18,8(sp)
    bc24:	dc400115 	stw	r17,4(sp)
    bc28:	dc000015 	stw	r16,0(sp)
    bc2c:	dfc00415 	stw	ra,16(sp)
    bc30:	2821883a 	mov	r16,r5
    bc34:	9cd6a804 	addi	r19,r19,23200
    bc38:	2025883a 	mov	r18,r4
    bc3c:	001224c0 	call	1224c <__malloc_lock>
    bc40:	98800217 	ldw	r2,8(r19)
    bc44:	14400117 	ldw	r17,4(r2)
    bc48:	00bfff04 	movi	r2,-4
    bc4c:	88a2703a 	and	r17,r17,r2
    bc50:	8c21c83a 	sub	r16,r17,r16
    bc54:	8403fbc4 	addi	r16,r16,4079
    bc58:	8020d33a 	srli	r16,r16,12
    bc5c:	0083ffc4 	movi	r2,4095
    bc60:	843fffc4 	addi	r16,r16,-1
    bc64:	8020933a 	slli	r16,r16,12
    bc68:	1400060e 	bge	r2,r16,bc84 <_malloc_trim_r+0x70>
    bc6c:	000b883a 	mov	r5,zero
    bc70:	9009883a 	mov	r4,r18
    bc74:	00077100 	call	7710 <_sbrk_r>
    bc78:	98c00217 	ldw	r3,8(r19)
    bc7c:	1c47883a 	add	r3,r3,r17
    bc80:	10c00a26 	beq	r2,r3,bcac <_malloc_trim_r+0x98>
    bc84:	9009883a 	mov	r4,r18
    bc88:	00122700 	call	12270 <__malloc_unlock>
    bc8c:	0005883a 	mov	r2,zero
    bc90:	dfc00417 	ldw	ra,16(sp)
    bc94:	dcc00317 	ldw	r19,12(sp)
    bc98:	dc800217 	ldw	r18,8(sp)
    bc9c:	dc400117 	ldw	r17,4(sp)
    bca0:	dc000017 	ldw	r16,0(sp)
    bca4:	dec00504 	addi	sp,sp,20
    bca8:	f800283a 	ret
    bcac:	040bc83a 	sub	r5,zero,r16
    bcb0:	9009883a 	mov	r4,r18
    bcb4:	00077100 	call	7710 <_sbrk_r>
    bcb8:	00ffffc4 	movi	r3,-1
    bcbc:	10c00d26 	beq	r2,r3,bcf4 <_malloc_trim_r+0xe0>
    bcc0:	00c000b4 	movhi	r3,2
    bcc4:	18e37804 	addi	r3,r3,-29216
    bcc8:	18800017 	ldw	r2,0(r3)
    bccc:	99000217 	ldw	r4,8(r19)
    bcd0:	8c23c83a 	sub	r17,r17,r16
    bcd4:	8c400054 	ori	r17,r17,1
    bcd8:	1421c83a 	sub	r16,r2,r16
    bcdc:	24400115 	stw	r17,4(r4)
    bce0:	9009883a 	mov	r4,r18
    bce4:	1c000015 	stw	r16,0(r3)
    bce8:	00122700 	call	12270 <__malloc_unlock>
    bcec:	00800044 	movi	r2,1
    bcf0:	003fe706 	br	bc90 <__alt_exception_stack_pointer+0xf800bc90>
    bcf4:	000b883a 	mov	r5,zero
    bcf8:	9009883a 	mov	r4,r18
    bcfc:	00077100 	call	7710 <_sbrk_r>
    bd00:	99000217 	ldw	r4,8(r19)
    bd04:	014003c4 	movi	r5,15
    bd08:	1107c83a 	sub	r3,r2,r4
    bd0c:	28ffdd0e 	bge	r5,r3,bc84 <__alt_exception_stack_pointer+0xf800bc84>
    bd10:	01400074 	movhi	r5,1
    bd14:	295c7404 	addi	r5,r5,29136
    bd18:	29400017 	ldw	r5,0(r5)
    bd1c:	18c00054 	ori	r3,r3,1
    bd20:	20c00115 	stw	r3,4(r4)
    bd24:	00c000b4 	movhi	r3,2
    bd28:	1145c83a 	sub	r2,r2,r5
    bd2c:	18e37804 	addi	r3,r3,-29216
    bd30:	18800015 	stw	r2,0(r3)
    bd34:	003fd306 	br	bc84 <__alt_exception_stack_pointer+0xf800bc84>

0000bd38 <_free_r>:
    bd38:	28004126 	beq	r5,zero,be40 <_free_r+0x108>
    bd3c:	defffd04 	addi	sp,sp,-12
    bd40:	dc400115 	stw	r17,4(sp)
    bd44:	dc000015 	stw	r16,0(sp)
    bd48:	2023883a 	mov	r17,r4
    bd4c:	2821883a 	mov	r16,r5
    bd50:	dfc00215 	stw	ra,8(sp)
    bd54:	001224c0 	call	1224c <__malloc_lock>
    bd58:	81ffff17 	ldw	r7,-4(r16)
    bd5c:	00bfff84 	movi	r2,-2
    bd60:	01000074 	movhi	r4,1
    bd64:	81bffe04 	addi	r6,r16,-8
    bd68:	3884703a 	and	r2,r7,r2
    bd6c:	2116a804 	addi	r4,r4,23200
    bd70:	308b883a 	add	r5,r6,r2
    bd74:	2a400117 	ldw	r9,4(r5)
    bd78:	22000217 	ldw	r8,8(r4)
    bd7c:	00ffff04 	movi	r3,-4
    bd80:	48c6703a 	and	r3,r9,r3
    bd84:	2a005726 	beq	r5,r8,bee4 <_free_r+0x1ac>
    bd88:	28c00115 	stw	r3,4(r5)
    bd8c:	39c0004c 	andi	r7,r7,1
    bd90:	3800091e 	bne	r7,zero,bdb8 <_free_r+0x80>
    bd94:	823ffe17 	ldw	r8,-8(r16)
    bd98:	22400204 	addi	r9,r4,8
    bd9c:	320dc83a 	sub	r6,r6,r8
    bda0:	31c00217 	ldw	r7,8(r6)
    bda4:	1205883a 	add	r2,r2,r8
    bda8:	3a406526 	beq	r7,r9,bf40 <_free_r+0x208>
    bdac:	32000317 	ldw	r8,12(r6)
    bdb0:	3a000315 	stw	r8,12(r7)
    bdb4:	41c00215 	stw	r7,8(r8)
    bdb8:	28cf883a 	add	r7,r5,r3
    bdbc:	39c00117 	ldw	r7,4(r7)
    bdc0:	39c0004c 	andi	r7,r7,1
    bdc4:	38003a26 	beq	r7,zero,beb0 <_free_r+0x178>
    bdc8:	10c00054 	ori	r3,r2,1
    bdcc:	30c00115 	stw	r3,4(r6)
    bdd0:	3087883a 	add	r3,r6,r2
    bdd4:	18800015 	stw	r2,0(r3)
    bdd8:	00c07fc4 	movi	r3,511
    bddc:	18801936 	bltu	r3,r2,be44 <_free_r+0x10c>
    bde0:	1004d0fa 	srli	r2,r2,3
    bde4:	01c00044 	movi	r7,1
    bde8:	21400117 	ldw	r5,4(r4)
    bdec:	10c00044 	addi	r3,r2,1
    bdf0:	18c7883a 	add	r3,r3,r3
    bdf4:	1005d0ba 	srai	r2,r2,2
    bdf8:	18c7883a 	add	r3,r3,r3
    bdfc:	18c7883a 	add	r3,r3,r3
    be00:	1907883a 	add	r3,r3,r4
    be04:	3884983a 	sll	r2,r7,r2
    be08:	19c00017 	ldw	r7,0(r3)
    be0c:	1a3ffe04 	addi	r8,r3,-8
    be10:	1144b03a 	or	r2,r2,r5
    be14:	32000315 	stw	r8,12(r6)
    be18:	31c00215 	stw	r7,8(r6)
    be1c:	20800115 	stw	r2,4(r4)
    be20:	19800015 	stw	r6,0(r3)
    be24:	39800315 	stw	r6,12(r7)
    be28:	8809883a 	mov	r4,r17
    be2c:	dfc00217 	ldw	ra,8(sp)
    be30:	dc400117 	ldw	r17,4(sp)
    be34:	dc000017 	ldw	r16,0(sp)
    be38:	dec00304 	addi	sp,sp,12
    be3c:	00122701 	jmpi	12270 <__malloc_unlock>
    be40:	f800283a 	ret
    be44:	100ad27a 	srli	r5,r2,9
    be48:	00c00104 	movi	r3,4
    be4c:	19404a36 	bltu	r3,r5,bf78 <_free_r+0x240>
    be50:	100ad1ba 	srli	r5,r2,6
    be54:	28c00e44 	addi	r3,r5,57
    be58:	18c7883a 	add	r3,r3,r3
    be5c:	29400e04 	addi	r5,r5,56
    be60:	18c7883a 	add	r3,r3,r3
    be64:	18c7883a 	add	r3,r3,r3
    be68:	1909883a 	add	r4,r3,r4
    be6c:	20c00017 	ldw	r3,0(r4)
    be70:	01c00074 	movhi	r7,1
    be74:	213ffe04 	addi	r4,r4,-8
    be78:	39d6a804 	addi	r7,r7,23200
    be7c:	20c04426 	beq	r4,r3,bf90 <_free_r+0x258>
    be80:	01ffff04 	movi	r7,-4
    be84:	19400117 	ldw	r5,4(r3)
    be88:	29ca703a 	and	r5,r5,r7
    be8c:	1140022e 	bgeu	r2,r5,be98 <_free_r+0x160>
    be90:	18c00217 	ldw	r3,8(r3)
    be94:	20fffb1e 	bne	r4,r3,be84 <__alt_exception_stack_pointer+0xf800be84>
    be98:	19000317 	ldw	r4,12(r3)
    be9c:	31000315 	stw	r4,12(r6)
    bea0:	30c00215 	stw	r3,8(r6)
    bea4:	21800215 	stw	r6,8(r4)
    bea8:	19800315 	stw	r6,12(r3)
    beac:	003fde06 	br	be28 <__alt_exception_stack_pointer+0xf800be28>
    beb0:	29c00217 	ldw	r7,8(r5)
    beb4:	10c5883a 	add	r2,r2,r3
    beb8:	00c00074 	movhi	r3,1
    bebc:	18d6aa04 	addi	r3,r3,23208
    bec0:	38c03b26 	beq	r7,r3,bfb0 <_free_r+0x278>
    bec4:	2a000317 	ldw	r8,12(r5)
    bec8:	11400054 	ori	r5,r2,1
    becc:	3087883a 	add	r3,r6,r2
    bed0:	3a000315 	stw	r8,12(r7)
    bed4:	41c00215 	stw	r7,8(r8)
    bed8:	31400115 	stw	r5,4(r6)
    bedc:	18800015 	stw	r2,0(r3)
    bee0:	003fbd06 	br	bdd8 <__alt_exception_stack_pointer+0xf800bdd8>
    bee4:	39c0004c 	andi	r7,r7,1
    bee8:	10c5883a 	add	r2,r2,r3
    beec:	3800071e 	bne	r7,zero,bf0c <_free_r+0x1d4>
    bef0:	81fffe17 	ldw	r7,-8(r16)
    bef4:	31cdc83a 	sub	r6,r6,r7
    bef8:	30c00317 	ldw	r3,12(r6)
    befc:	31400217 	ldw	r5,8(r6)
    bf00:	11c5883a 	add	r2,r2,r7
    bf04:	28c00315 	stw	r3,12(r5)
    bf08:	19400215 	stw	r5,8(r3)
    bf0c:	10c00054 	ori	r3,r2,1
    bf10:	30c00115 	stw	r3,4(r6)
    bf14:	00c00074 	movhi	r3,1
    bf18:	18dc7504 	addi	r3,r3,29140
    bf1c:	18c00017 	ldw	r3,0(r3)
    bf20:	21800215 	stw	r6,8(r4)
    bf24:	10ffc036 	bltu	r2,r3,be28 <__alt_exception_stack_pointer+0xf800be28>
    bf28:	008000b4 	movhi	r2,2
    bf2c:	10a36c04 	addi	r2,r2,-29264
    bf30:	11400017 	ldw	r5,0(r2)
    bf34:	8809883a 	mov	r4,r17
    bf38:	000bc140 	call	bc14 <_malloc_trim_r>
    bf3c:	003fba06 	br	be28 <__alt_exception_stack_pointer+0xf800be28>
    bf40:	28c9883a 	add	r4,r5,r3
    bf44:	21000117 	ldw	r4,4(r4)
    bf48:	2100004c 	andi	r4,r4,1
    bf4c:	2000391e 	bne	r4,zero,c034 <_free_r+0x2fc>
    bf50:	29c00217 	ldw	r7,8(r5)
    bf54:	29000317 	ldw	r4,12(r5)
    bf58:	1885883a 	add	r2,r3,r2
    bf5c:	10c00054 	ori	r3,r2,1
    bf60:	39000315 	stw	r4,12(r7)
    bf64:	21c00215 	stw	r7,8(r4)
    bf68:	30c00115 	stw	r3,4(r6)
    bf6c:	308d883a 	add	r6,r6,r2
    bf70:	30800015 	stw	r2,0(r6)
    bf74:	003fac06 	br	be28 <__alt_exception_stack_pointer+0xf800be28>
    bf78:	00c00504 	movi	r3,20
    bf7c:	19401536 	bltu	r3,r5,bfd4 <_free_r+0x29c>
    bf80:	28c01704 	addi	r3,r5,92
    bf84:	18c7883a 	add	r3,r3,r3
    bf88:	294016c4 	addi	r5,r5,91
    bf8c:	003fb406 	br	be60 <__alt_exception_stack_pointer+0xf800be60>
    bf90:	280bd0ba 	srai	r5,r5,2
    bf94:	00c00044 	movi	r3,1
    bf98:	38800117 	ldw	r2,4(r7)
    bf9c:	194a983a 	sll	r5,r3,r5
    bfa0:	2007883a 	mov	r3,r4
    bfa4:	2884b03a 	or	r2,r5,r2
    bfa8:	38800115 	stw	r2,4(r7)
    bfac:	003fbb06 	br	be9c <__alt_exception_stack_pointer+0xf800be9c>
    bfb0:	21800515 	stw	r6,20(r4)
    bfb4:	21800415 	stw	r6,16(r4)
    bfb8:	10c00054 	ori	r3,r2,1
    bfbc:	31c00315 	stw	r7,12(r6)
    bfc0:	31c00215 	stw	r7,8(r6)
    bfc4:	30c00115 	stw	r3,4(r6)
    bfc8:	308d883a 	add	r6,r6,r2
    bfcc:	30800015 	stw	r2,0(r6)
    bfd0:	003f9506 	br	be28 <__alt_exception_stack_pointer+0xf800be28>
    bfd4:	00c01504 	movi	r3,84
    bfd8:	19400536 	bltu	r3,r5,bff0 <_free_r+0x2b8>
    bfdc:	100ad33a 	srli	r5,r2,12
    bfe0:	28c01bc4 	addi	r3,r5,111
    bfe4:	18c7883a 	add	r3,r3,r3
    bfe8:	29401b84 	addi	r5,r5,110
    bfec:	003f9c06 	br	be60 <__alt_exception_stack_pointer+0xf800be60>
    bff0:	00c05504 	movi	r3,340
    bff4:	19400536 	bltu	r3,r5,c00c <_free_r+0x2d4>
    bff8:	100ad3fa 	srli	r5,r2,15
    bffc:	28c01e04 	addi	r3,r5,120
    c000:	18c7883a 	add	r3,r3,r3
    c004:	29401dc4 	addi	r5,r5,119
    c008:	003f9506 	br	be60 <__alt_exception_stack_pointer+0xf800be60>
    c00c:	00c15504 	movi	r3,1364
    c010:	19400536 	bltu	r3,r5,c028 <_free_r+0x2f0>
    c014:	100ad4ba 	srli	r5,r2,18
    c018:	28c01f44 	addi	r3,r5,125
    c01c:	18c7883a 	add	r3,r3,r3
    c020:	29401f04 	addi	r5,r5,124
    c024:	003f8e06 	br	be60 <__alt_exception_stack_pointer+0xf800be60>
    c028:	00c03f84 	movi	r3,254
    c02c:	01401f84 	movi	r5,126
    c030:	003f8b06 	br	be60 <__alt_exception_stack_pointer+0xf800be60>
    c034:	10c00054 	ori	r3,r2,1
    c038:	30c00115 	stw	r3,4(r6)
    c03c:	308d883a 	add	r6,r6,r2
    c040:	30800015 	stw	r2,0(r6)
    c044:	003f7806 	br	be28 <__alt_exception_stack_pointer+0xf800be28>

0000c048 <__sfvwrite_r>:
    c048:	30800217 	ldw	r2,8(r6)
    c04c:	10006726 	beq	r2,zero,c1ec <__sfvwrite_r+0x1a4>
    c050:	28c0030b 	ldhu	r3,12(r5)
    c054:	defff404 	addi	sp,sp,-48
    c058:	dd400715 	stw	r21,28(sp)
    c05c:	dd000615 	stw	r20,24(sp)
    c060:	dc000215 	stw	r16,8(sp)
    c064:	dfc00b15 	stw	ra,44(sp)
    c068:	df000a15 	stw	fp,40(sp)
    c06c:	ddc00915 	stw	r23,36(sp)
    c070:	dd800815 	stw	r22,32(sp)
    c074:	dcc00515 	stw	r19,20(sp)
    c078:	dc800415 	stw	r18,16(sp)
    c07c:	dc400315 	stw	r17,12(sp)
    c080:	1880020c 	andi	r2,r3,8
    c084:	2821883a 	mov	r16,r5
    c088:	202b883a 	mov	r21,r4
    c08c:	3029883a 	mov	r20,r6
    c090:	10002726 	beq	r2,zero,c130 <__sfvwrite_r+0xe8>
    c094:	28800417 	ldw	r2,16(r5)
    c098:	10002526 	beq	r2,zero,c130 <__sfvwrite_r+0xe8>
    c09c:	1880008c 	andi	r2,r3,2
    c0a0:	a4400017 	ldw	r17,0(r20)
    c0a4:	10002a26 	beq	r2,zero,c150 <__sfvwrite_r+0x108>
    c0a8:	05a00034 	movhi	r22,32768
    c0ac:	0027883a 	mov	r19,zero
    c0b0:	0025883a 	mov	r18,zero
    c0b4:	b5bf0004 	addi	r22,r22,-1024
    c0b8:	980d883a 	mov	r6,r19
    c0bc:	a809883a 	mov	r4,r21
    c0c0:	90004626 	beq	r18,zero,c1dc <__sfvwrite_r+0x194>
    c0c4:	900f883a 	mov	r7,r18
    c0c8:	b480022e 	bgeu	r22,r18,c0d4 <__sfvwrite_r+0x8c>
    c0cc:	01e00034 	movhi	r7,32768
    c0d0:	39ff0004 	addi	r7,r7,-1024
    c0d4:	80800917 	ldw	r2,36(r16)
    c0d8:	81400717 	ldw	r5,28(r16)
    c0dc:	103ee83a 	callr	r2
    c0e0:	00805a0e 	bge	zero,r2,c24c <__sfvwrite_r+0x204>
    c0e4:	a0c00217 	ldw	r3,8(r20)
    c0e8:	98a7883a 	add	r19,r19,r2
    c0ec:	90a5c83a 	sub	r18,r18,r2
    c0f0:	1885c83a 	sub	r2,r3,r2
    c0f4:	a0800215 	stw	r2,8(r20)
    c0f8:	103fef1e 	bne	r2,zero,c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c0fc:	0005883a 	mov	r2,zero
    c100:	dfc00b17 	ldw	ra,44(sp)
    c104:	df000a17 	ldw	fp,40(sp)
    c108:	ddc00917 	ldw	r23,36(sp)
    c10c:	dd800817 	ldw	r22,32(sp)
    c110:	dd400717 	ldw	r21,28(sp)
    c114:	dd000617 	ldw	r20,24(sp)
    c118:	dcc00517 	ldw	r19,20(sp)
    c11c:	dc800417 	ldw	r18,16(sp)
    c120:	dc400317 	ldw	r17,12(sp)
    c124:	dc000217 	ldw	r16,8(sp)
    c128:	dec00c04 	addi	sp,sp,48
    c12c:	f800283a 	ret
    c130:	800b883a 	mov	r5,r16
    c134:	a809883a 	mov	r4,r21
    c138:	0009bb80 	call	9bb8 <__swsetup_r>
    c13c:	1000ee1e 	bne	r2,zero,c4f8 <__sfvwrite_r+0x4b0>
    c140:	80c0030b 	ldhu	r3,12(r16)
    c144:	a4400017 	ldw	r17,0(r20)
    c148:	1880008c 	andi	r2,r3,2
    c14c:	103fd61e 	bne	r2,zero,c0a8 <__alt_exception_stack_pointer+0xf800c0a8>
    c150:	1880004c 	andi	r2,r3,1
    c154:	1000421e 	bne	r2,zero,c260 <__sfvwrite_r+0x218>
    c158:	0039883a 	mov	fp,zero
    c15c:	0025883a 	mov	r18,zero
    c160:	90001a26 	beq	r18,zero,c1cc <__sfvwrite_r+0x184>
    c164:	1880800c 	andi	r2,r3,512
    c168:	84c00217 	ldw	r19,8(r16)
    c16c:	10002126 	beq	r2,zero,c1f4 <__sfvwrite_r+0x1ac>
    c170:	982f883a 	mov	r23,r19
    c174:	94c09636 	bltu	r18,r19,c3d0 <__sfvwrite_r+0x388>
    c178:	1881200c 	andi	r2,r3,1152
    c17c:	1000a11e 	bne	r2,zero,c404 <__sfvwrite_r+0x3bc>
    c180:	81000017 	ldw	r4,0(r16)
    c184:	b80d883a 	mov	r6,r23
    c188:	e00b883a 	mov	r5,fp
    c18c:	000ca140 	call	ca14 <memmove>
    c190:	80c00217 	ldw	r3,8(r16)
    c194:	81000017 	ldw	r4,0(r16)
    c198:	9005883a 	mov	r2,r18
    c19c:	1ce7c83a 	sub	r19,r3,r19
    c1a0:	25cf883a 	add	r7,r4,r23
    c1a4:	84c00215 	stw	r19,8(r16)
    c1a8:	81c00015 	stw	r7,0(r16)
    c1ac:	a0c00217 	ldw	r3,8(r20)
    c1b0:	e0b9883a 	add	fp,fp,r2
    c1b4:	90a5c83a 	sub	r18,r18,r2
    c1b8:	18a7c83a 	sub	r19,r3,r2
    c1bc:	a4c00215 	stw	r19,8(r20)
    c1c0:	983fce26 	beq	r19,zero,c0fc <__alt_exception_stack_pointer+0xf800c0fc>
    c1c4:	80c0030b 	ldhu	r3,12(r16)
    c1c8:	903fe61e 	bne	r18,zero,c164 <__alt_exception_stack_pointer+0xf800c164>
    c1cc:	8f000017 	ldw	fp,0(r17)
    c1d0:	8c800117 	ldw	r18,4(r17)
    c1d4:	8c400204 	addi	r17,r17,8
    c1d8:	003fe106 	br	c160 <__alt_exception_stack_pointer+0xf800c160>
    c1dc:	8cc00017 	ldw	r19,0(r17)
    c1e0:	8c800117 	ldw	r18,4(r17)
    c1e4:	8c400204 	addi	r17,r17,8
    c1e8:	003fb306 	br	c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c1ec:	0005883a 	mov	r2,zero
    c1f0:	f800283a 	ret
    c1f4:	81000017 	ldw	r4,0(r16)
    c1f8:	80800417 	ldw	r2,16(r16)
    c1fc:	11005a36 	bltu	r2,r4,c368 <__sfvwrite_r+0x320>
    c200:	85c00517 	ldw	r23,20(r16)
    c204:	95c05836 	bltu	r18,r23,c368 <__sfvwrite_r+0x320>
    c208:	00a00034 	movhi	r2,32768
    c20c:	10bfffc4 	addi	r2,r2,-1
    c210:	9009883a 	mov	r4,r18
    c214:	1480012e 	bgeu	r2,r18,c21c <__sfvwrite_r+0x1d4>
    c218:	1009883a 	mov	r4,r2
    c21c:	b80b883a 	mov	r5,r23
    c220:	0004cf40 	call	4cf4 <__divsi3>
    c224:	b80b883a 	mov	r5,r23
    c228:	1009883a 	mov	r4,r2
    c22c:	0004ea80 	call	4ea8 <__mulsi3>
    c230:	81400717 	ldw	r5,28(r16)
    c234:	80c00917 	ldw	r3,36(r16)
    c238:	100f883a 	mov	r7,r2
    c23c:	e00d883a 	mov	r6,fp
    c240:	a809883a 	mov	r4,r21
    c244:	183ee83a 	callr	r3
    c248:	00bfd816 	blt	zero,r2,c1ac <__alt_exception_stack_pointer+0xf800c1ac>
    c24c:	8080030b 	ldhu	r2,12(r16)
    c250:	10801014 	ori	r2,r2,64
    c254:	8080030d 	sth	r2,12(r16)
    c258:	00bfffc4 	movi	r2,-1
    c25c:	003fa806 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c260:	0027883a 	mov	r19,zero
    c264:	0011883a 	mov	r8,zero
    c268:	0039883a 	mov	fp,zero
    c26c:	0025883a 	mov	r18,zero
    c270:	90001f26 	beq	r18,zero,c2f0 <__sfvwrite_r+0x2a8>
    c274:	40005a26 	beq	r8,zero,c3e0 <__sfvwrite_r+0x398>
    c278:	982d883a 	mov	r22,r19
    c27c:	94c0012e 	bgeu	r18,r19,c284 <__sfvwrite_r+0x23c>
    c280:	902d883a 	mov	r22,r18
    c284:	81000017 	ldw	r4,0(r16)
    c288:	80800417 	ldw	r2,16(r16)
    c28c:	b02f883a 	mov	r23,r22
    c290:	81c00517 	ldw	r7,20(r16)
    c294:	1100032e 	bgeu	r2,r4,c2a4 <__sfvwrite_r+0x25c>
    c298:	80c00217 	ldw	r3,8(r16)
    c29c:	38c7883a 	add	r3,r7,r3
    c2a0:	1d801816 	blt	r3,r22,c304 <__sfvwrite_r+0x2bc>
    c2a4:	b1c03e16 	blt	r22,r7,c3a0 <__sfvwrite_r+0x358>
    c2a8:	80800917 	ldw	r2,36(r16)
    c2ac:	81400717 	ldw	r5,28(r16)
    c2b0:	e00d883a 	mov	r6,fp
    c2b4:	da000115 	stw	r8,4(sp)
    c2b8:	a809883a 	mov	r4,r21
    c2bc:	103ee83a 	callr	r2
    c2c0:	102f883a 	mov	r23,r2
    c2c4:	da000117 	ldw	r8,4(sp)
    c2c8:	00bfe00e 	bge	zero,r2,c24c <__alt_exception_stack_pointer+0xf800c24c>
    c2cc:	9de7c83a 	sub	r19,r19,r23
    c2d0:	98001f26 	beq	r19,zero,c350 <__sfvwrite_r+0x308>
    c2d4:	a0800217 	ldw	r2,8(r20)
    c2d8:	e5f9883a 	add	fp,fp,r23
    c2dc:	95e5c83a 	sub	r18,r18,r23
    c2e0:	15efc83a 	sub	r23,r2,r23
    c2e4:	a5c00215 	stw	r23,8(r20)
    c2e8:	b83f8426 	beq	r23,zero,c0fc <__alt_exception_stack_pointer+0xf800c0fc>
    c2ec:	903fe11e 	bne	r18,zero,c274 <__alt_exception_stack_pointer+0xf800c274>
    c2f0:	8f000017 	ldw	fp,0(r17)
    c2f4:	8c800117 	ldw	r18,4(r17)
    c2f8:	0011883a 	mov	r8,zero
    c2fc:	8c400204 	addi	r17,r17,8
    c300:	003fdb06 	br	c270 <__alt_exception_stack_pointer+0xf800c270>
    c304:	180d883a 	mov	r6,r3
    c308:	e00b883a 	mov	r5,fp
    c30c:	da000115 	stw	r8,4(sp)
    c310:	d8c00015 	stw	r3,0(sp)
    c314:	000ca140 	call	ca14 <memmove>
    c318:	d8c00017 	ldw	r3,0(sp)
    c31c:	80800017 	ldw	r2,0(r16)
    c320:	800b883a 	mov	r5,r16
    c324:	a809883a 	mov	r4,r21
    c328:	10c5883a 	add	r2,r2,r3
    c32c:	80800015 	stw	r2,0(r16)
    c330:	d8c00015 	stw	r3,0(sp)
    c334:	000b7d80 	call	b7d8 <_fflush_r>
    c338:	d8c00017 	ldw	r3,0(sp)
    c33c:	da000117 	ldw	r8,4(sp)
    c340:	103fc21e 	bne	r2,zero,c24c <__alt_exception_stack_pointer+0xf800c24c>
    c344:	182f883a 	mov	r23,r3
    c348:	9de7c83a 	sub	r19,r19,r23
    c34c:	983fe11e 	bne	r19,zero,c2d4 <__alt_exception_stack_pointer+0xf800c2d4>
    c350:	800b883a 	mov	r5,r16
    c354:	a809883a 	mov	r4,r21
    c358:	000b7d80 	call	b7d8 <_fflush_r>
    c35c:	103fbb1e 	bne	r2,zero,c24c <__alt_exception_stack_pointer+0xf800c24c>
    c360:	0011883a 	mov	r8,zero
    c364:	003fdb06 	br	c2d4 <__alt_exception_stack_pointer+0xf800c2d4>
    c368:	94c0012e 	bgeu	r18,r19,c370 <__sfvwrite_r+0x328>
    c36c:	9027883a 	mov	r19,r18
    c370:	980d883a 	mov	r6,r19
    c374:	e00b883a 	mov	r5,fp
    c378:	000ca140 	call	ca14 <memmove>
    c37c:	80800217 	ldw	r2,8(r16)
    c380:	80c00017 	ldw	r3,0(r16)
    c384:	14c5c83a 	sub	r2,r2,r19
    c388:	1cc7883a 	add	r3,r3,r19
    c38c:	80800215 	stw	r2,8(r16)
    c390:	80c00015 	stw	r3,0(r16)
    c394:	10004326 	beq	r2,zero,c4a4 <__sfvwrite_r+0x45c>
    c398:	9805883a 	mov	r2,r19
    c39c:	003f8306 	br	c1ac <__alt_exception_stack_pointer+0xf800c1ac>
    c3a0:	b00d883a 	mov	r6,r22
    c3a4:	e00b883a 	mov	r5,fp
    c3a8:	da000115 	stw	r8,4(sp)
    c3ac:	000ca140 	call	ca14 <memmove>
    c3b0:	80800217 	ldw	r2,8(r16)
    c3b4:	80c00017 	ldw	r3,0(r16)
    c3b8:	da000117 	ldw	r8,4(sp)
    c3bc:	1585c83a 	sub	r2,r2,r22
    c3c0:	1dad883a 	add	r22,r3,r22
    c3c4:	80800215 	stw	r2,8(r16)
    c3c8:	85800015 	stw	r22,0(r16)
    c3cc:	003fbf06 	br	c2cc <__alt_exception_stack_pointer+0xf800c2cc>
    c3d0:	81000017 	ldw	r4,0(r16)
    c3d4:	9027883a 	mov	r19,r18
    c3d8:	902f883a 	mov	r23,r18
    c3dc:	003f6906 	br	c184 <__alt_exception_stack_pointer+0xf800c184>
    c3e0:	900d883a 	mov	r6,r18
    c3e4:	01400284 	movi	r5,10
    c3e8:	e009883a 	mov	r4,fp
    c3ec:	000c9300 	call	c930 <memchr>
    c3f0:	10003e26 	beq	r2,zero,c4ec <__sfvwrite_r+0x4a4>
    c3f4:	10800044 	addi	r2,r2,1
    c3f8:	1727c83a 	sub	r19,r2,fp
    c3fc:	02000044 	movi	r8,1
    c400:	003f9d06 	br	c278 <__alt_exception_stack_pointer+0xf800c278>
    c404:	80800517 	ldw	r2,20(r16)
    c408:	81400417 	ldw	r5,16(r16)
    c40c:	81c00017 	ldw	r7,0(r16)
    c410:	10a7883a 	add	r19,r2,r2
    c414:	9885883a 	add	r2,r19,r2
    c418:	1026d7fa 	srli	r19,r2,31
    c41c:	396dc83a 	sub	r22,r7,r5
    c420:	b1000044 	addi	r4,r22,1
    c424:	9885883a 	add	r2,r19,r2
    c428:	1027d07a 	srai	r19,r2,1
    c42c:	2485883a 	add	r2,r4,r18
    c430:	980d883a 	mov	r6,r19
    c434:	9880022e 	bgeu	r19,r2,c440 <__sfvwrite_r+0x3f8>
    c438:	1027883a 	mov	r19,r2
    c43c:	100d883a 	mov	r6,r2
    c440:	18c1000c 	andi	r3,r3,1024
    c444:	18001c26 	beq	r3,zero,c4b8 <__sfvwrite_r+0x470>
    c448:	300b883a 	mov	r5,r6
    c44c:	a809883a 	mov	r4,r21
    c450:	0006c7c0 	call	6c7c <_malloc_r>
    c454:	102f883a 	mov	r23,r2
    c458:	10002926 	beq	r2,zero,c500 <__sfvwrite_r+0x4b8>
    c45c:	81400417 	ldw	r5,16(r16)
    c460:	b00d883a 	mov	r6,r22
    c464:	1009883a 	mov	r4,r2
    c468:	00074880 	call	7488 <memcpy>
    c46c:	8080030b 	ldhu	r2,12(r16)
    c470:	00fedfc4 	movi	r3,-1153
    c474:	10c4703a 	and	r2,r2,r3
    c478:	10802014 	ori	r2,r2,128
    c47c:	8080030d 	sth	r2,12(r16)
    c480:	bd89883a 	add	r4,r23,r22
    c484:	9d8fc83a 	sub	r7,r19,r22
    c488:	85c00415 	stw	r23,16(r16)
    c48c:	84c00515 	stw	r19,20(r16)
    c490:	81000015 	stw	r4,0(r16)
    c494:	9027883a 	mov	r19,r18
    c498:	81c00215 	stw	r7,8(r16)
    c49c:	902f883a 	mov	r23,r18
    c4a0:	003f3806 	br	c184 <__alt_exception_stack_pointer+0xf800c184>
    c4a4:	800b883a 	mov	r5,r16
    c4a8:	a809883a 	mov	r4,r21
    c4ac:	000b7d80 	call	b7d8 <_fflush_r>
    c4b0:	103fb926 	beq	r2,zero,c398 <__alt_exception_stack_pointer+0xf800c398>
    c4b4:	003f6506 	br	c24c <__alt_exception_stack_pointer+0xf800c24c>
    c4b8:	a809883a 	mov	r4,r21
    c4bc:	000dd500 	call	dd50 <_realloc_r>
    c4c0:	102f883a 	mov	r23,r2
    c4c4:	103fee1e 	bne	r2,zero,c480 <__alt_exception_stack_pointer+0xf800c480>
    c4c8:	81400417 	ldw	r5,16(r16)
    c4cc:	a809883a 	mov	r4,r21
    c4d0:	000bd380 	call	bd38 <_free_r>
    c4d4:	8080030b 	ldhu	r2,12(r16)
    c4d8:	00ffdfc4 	movi	r3,-129
    c4dc:	1884703a 	and	r2,r3,r2
    c4e0:	00c00304 	movi	r3,12
    c4e4:	a8c00015 	stw	r3,0(r21)
    c4e8:	003f5906 	br	c250 <__alt_exception_stack_pointer+0xf800c250>
    c4ec:	94c00044 	addi	r19,r18,1
    c4f0:	02000044 	movi	r8,1
    c4f4:	003f6006 	br	c278 <__alt_exception_stack_pointer+0xf800c278>
    c4f8:	00bfffc4 	movi	r2,-1
    c4fc:	003f0006 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c500:	00800304 	movi	r2,12
    c504:	a8800015 	stw	r2,0(r21)
    c508:	8080030b 	ldhu	r2,12(r16)
    c50c:	003f5006 	br	c250 <__alt_exception_stack_pointer+0xf800c250>

0000c510 <_fwalk>:
    c510:	defff704 	addi	sp,sp,-36
    c514:	dd000415 	stw	r20,16(sp)
    c518:	dfc00815 	stw	ra,32(sp)
    c51c:	ddc00715 	stw	r23,28(sp)
    c520:	dd800615 	stw	r22,24(sp)
    c524:	dd400515 	stw	r21,20(sp)
    c528:	dcc00315 	stw	r19,12(sp)
    c52c:	dc800215 	stw	r18,8(sp)
    c530:	dc400115 	stw	r17,4(sp)
    c534:	dc000015 	stw	r16,0(sp)
    c538:	2500b804 	addi	r20,r4,736
    c53c:	a0002326 	beq	r20,zero,c5cc <_fwalk+0xbc>
    c540:	282b883a 	mov	r21,r5
    c544:	002f883a 	mov	r23,zero
    c548:	05800044 	movi	r22,1
    c54c:	04ffffc4 	movi	r19,-1
    c550:	a4400117 	ldw	r17,4(r20)
    c554:	a4800217 	ldw	r18,8(r20)
    c558:	8c7fffc4 	addi	r17,r17,-1
    c55c:	88000d16 	blt	r17,zero,c594 <_fwalk+0x84>
    c560:	94000304 	addi	r16,r18,12
    c564:	94800384 	addi	r18,r18,14
    c568:	8080000b 	ldhu	r2,0(r16)
    c56c:	8c7fffc4 	addi	r17,r17,-1
    c570:	813ffd04 	addi	r4,r16,-12
    c574:	b080042e 	bgeu	r22,r2,c588 <_fwalk+0x78>
    c578:	9080000f 	ldh	r2,0(r18)
    c57c:	14c00226 	beq	r2,r19,c588 <_fwalk+0x78>
    c580:	a83ee83a 	callr	r21
    c584:	b8aeb03a 	or	r23,r23,r2
    c588:	84001a04 	addi	r16,r16,104
    c58c:	94801a04 	addi	r18,r18,104
    c590:	8cfff51e 	bne	r17,r19,c568 <__alt_exception_stack_pointer+0xf800c568>
    c594:	a5000017 	ldw	r20,0(r20)
    c598:	a03fed1e 	bne	r20,zero,c550 <__alt_exception_stack_pointer+0xf800c550>
    c59c:	b805883a 	mov	r2,r23
    c5a0:	dfc00817 	ldw	ra,32(sp)
    c5a4:	ddc00717 	ldw	r23,28(sp)
    c5a8:	dd800617 	ldw	r22,24(sp)
    c5ac:	dd400517 	ldw	r21,20(sp)
    c5b0:	dd000417 	ldw	r20,16(sp)
    c5b4:	dcc00317 	ldw	r19,12(sp)
    c5b8:	dc800217 	ldw	r18,8(sp)
    c5bc:	dc400117 	ldw	r17,4(sp)
    c5c0:	dc000017 	ldw	r16,0(sp)
    c5c4:	dec00904 	addi	sp,sp,36
    c5c8:	f800283a 	ret
    c5cc:	002f883a 	mov	r23,zero
    c5d0:	003ff206 	br	c59c <__alt_exception_stack_pointer+0xf800c59c>

0000c5d4 <_fwalk_reent>:
    c5d4:	defff704 	addi	sp,sp,-36
    c5d8:	dd000415 	stw	r20,16(sp)
    c5dc:	dfc00815 	stw	ra,32(sp)
    c5e0:	ddc00715 	stw	r23,28(sp)
    c5e4:	dd800615 	stw	r22,24(sp)
    c5e8:	dd400515 	stw	r21,20(sp)
    c5ec:	dcc00315 	stw	r19,12(sp)
    c5f0:	dc800215 	stw	r18,8(sp)
    c5f4:	dc400115 	stw	r17,4(sp)
    c5f8:	dc000015 	stw	r16,0(sp)
    c5fc:	2500b804 	addi	r20,r4,736
    c600:	a0002326 	beq	r20,zero,c690 <_fwalk_reent+0xbc>
    c604:	282b883a 	mov	r21,r5
    c608:	2027883a 	mov	r19,r4
    c60c:	002f883a 	mov	r23,zero
    c610:	05800044 	movi	r22,1
    c614:	04bfffc4 	movi	r18,-1
    c618:	a4400117 	ldw	r17,4(r20)
    c61c:	a4000217 	ldw	r16,8(r20)
    c620:	8c7fffc4 	addi	r17,r17,-1
    c624:	88000c16 	blt	r17,zero,c658 <_fwalk_reent+0x84>
    c628:	84000304 	addi	r16,r16,12
    c62c:	8080000b 	ldhu	r2,0(r16)
    c630:	8c7fffc4 	addi	r17,r17,-1
    c634:	817ffd04 	addi	r5,r16,-12
    c638:	b080052e 	bgeu	r22,r2,c650 <_fwalk_reent+0x7c>
    c63c:	8080008f 	ldh	r2,2(r16)
    c640:	9809883a 	mov	r4,r19
    c644:	14800226 	beq	r2,r18,c650 <_fwalk_reent+0x7c>
    c648:	a83ee83a 	callr	r21
    c64c:	b8aeb03a 	or	r23,r23,r2
    c650:	84001a04 	addi	r16,r16,104
    c654:	8cbff51e 	bne	r17,r18,c62c <__alt_exception_stack_pointer+0xf800c62c>
    c658:	a5000017 	ldw	r20,0(r20)
    c65c:	a03fee1e 	bne	r20,zero,c618 <__alt_exception_stack_pointer+0xf800c618>
    c660:	b805883a 	mov	r2,r23
    c664:	dfc00817 	ldw	ra,32(sp)
    c668:	ddc00717 	ldw	r23,28(sp)
    c66c:	dd800617 	ldw	r22,24(sp)
    c670:	dd400517 	ldw	r21,20(sp)
    c674:	dd000417 	ldw	r20,16(sp)
    c678:	dcc00317 	ldw	r19,12(sp)
    c67c:	dc800217 	ldw	r18,8(sp)
    c680:	dc400117 	ldw	r17,4(sp)
    c684:	dc000017 	ldw	r16,0(sp)
    c688:	dec00904 	addi	sp,sp,36
    c68c:	f800283a 	ret
    c690:	002f883a 	mov	r23,zero
    c694:	003ff206 	br	c660 <__alt_exception_stack_pointer+0xf800c660>

0000c698 <_setlocale_r>:
    c698:	30001b26 	beq	r6,zero,c708 <_setlocale_r+0x70>
    c69c:	01400074 	movhi	r5,1
    c6a0:	defffe04 	addi	sp,sp,-8
    c6a4:	29553204 	addi	r5,r5,21704
    c6a8:	3009883a 	mov	r4,r6
    c6ac:	dc000015 	stw	r16,0(sp)
    c6b0:	dfc00115 	stw	ra,4(sp)
    c6b4:	3021883a 	mov	r16,r6
    c6b8:	000e4640 	call	e464 <strcmp>
    c6bc:	1000061e 	bne	r2,zero,c6d8 <_setlocale_r+0x40>
    c6c0:	00800074 	movhi	r2,1
    c6c4:	10951304 	addi	r2,r2,21580
    c6c8:	dfc00117 	ldw	ra,4(sp)
    c6cc:	dc000017 	ldw	r16,0(sp)
    c6d0:	dec00204 	addi	sp,sp,8
    c6d4:	f800283a 	ret
    c6d8:	01400074 	movhi	r5,1
    c6dc:	29551304 	addi	r5,r5,21580
    c6e0:	8009883a 	mov	r4,r16
    c6e4:	000e4640 	call	e464 <strcmp>
    c6e8:	103ff526 	beq	r2,zero,c6c0 <__alt_exception_stack_pointer+0xf800c6c0>
    c6ec:	01400074 	movhi	r5,1
    c6f0:	29551d04 	addi	r5,r5,21620
    c6f4:	8009883a 	mov	r4,r16
    c6f8:	000e4640 	call	e464 <strcmp>
    c6fc:	103ff026 	beq	r2,zero,c6c0 <__alt_exception_stack_pointer+0xf800c6c0>
    c700:	0005883a 	mov	r2,zero
    c704:	003ff006 	br	c6c8 <__alt_exception_stack_pointer+0xf800c6c8>
    c708:	00800074 	movhi	r2,1
    c70c:	10951304 	addi	r2,r2,21580
    c710:	f800283a 	ret

0000c714 <__locale_charset>:
    c714:	00800074 	movhi	r2,1
    c718:	1097b204 	addi	r2,r2,24264
    c71c:	f800283a 	ret

0000c720 <__locale_mb_cur_max>:
    c720:	00800074 	movhi	r2,1
    c724:	109c7604 	addi	r2,r2,29144
    c728:	10800017 	ldw	r2,0(r2)
    c72c:	f800283a 	ret

0000c730 <__locale_msgcharset>:
    c730:	00800074 	movhi	r2,1
    c734:	1097aa04 	addi	r2,r2,24232
    c738:	f800283a 	ret

0000c73c <__locale_cjk_lang>:
    c73c:	0005883a 	mov	r2,zero
    c740:	f800283a 	ret

0000c744 <_localeconv_r>:
    c744:	00800074 	movhi	r2,1
    c748:	1097ba04 	addi	r2,r2,24296
    c74c:	f800283a 	ret

0000c750 <setlocale>:
    c750:	00800074 	movhi	r2,1
    c754:	109c7304 	addi	r2,r2,29132
    c758:	280d883a 	mov	r6,r5
    c75c:	200b883a 	mov	r5,r4
    c760:	11000017 	ldw	r4,0(r2)
    c764:	000c6981 	jmpi	c698 <_setlocale_r>

0000c768 <localeconv>:
    c768:	00800074 	movhi	r2,1
    c76c:	1097ba04 	addi	r2,r2,24296
    c770:	f800283a 	ret

0000c774 <__smakebuf_r>:
    c774:	2880030b 	ldhu	r2,12(r5)
    c778:	10c0008c 	andi	r3,r2,2
    c77c:	1800411e 	bne	r3,zero,c884 <__smakebuf_r+0x110>
    c780:	deffec04 	addi	sp,sp,-80
    c784:	dc000f15 	stw	r16,60(sp)
    c788:	2821883a 	mov	r16,r5
    c78c:	2940038f 	ldh	r5,14(r5)
    c790:	dc401015 	stw	r17,64(sp)
    c794:	dfc01315 	stw	ra,76(sp)
    c798:	dcc01215 	stw	r19,72(sp)
    c79c:	dc801115 	stw	r18,68(sp)
    c7a0:	2023883a 	mov	r17,r4
    c7a4:	28001c16 	blt	r5,zero,c818 <__smakebuf_r+0xa4>
    c7a8:	d80d883a 	mov	r6,sp
    c7ac:	00100d40 	call	100d4 <_fstat_r>
    c7b0:	10001816 	blt	r2,zero,c814 <__smakebuf_r+0xa0>
    c7b4:	d8800117 	ldw	r2,4(sp)
    c7b8:	00e00014 	movui	r3,32768
    c7bc:	10bc000c 	andi	r2,r2,61440
    c7c0:	14c80020 	cmpeqi	r19,r2,8192
    c7c4:	10c03726 	beq	r2,r3,c8a4 <__smakebuf_r+0x130>
    c7c8:	80c0030b 	ldhu	r3,12(r16)
    c7cc:	18c20014 	ori	r3,r3,2048
    c7d0:	80c0030d 	sth	r3,12(r16)
    c7d4:	00c80004 	movi	r3,8192
    c7d8:	10c0521e 	bne	r2,r3,c924 <__smakebuf_r+0x1b0>
    c7dc:	8140038f 	ldh	r5,14(r16)
    c7e0:	8809883a 	mov	r4,r17
    c7e4:	00101300 	call	10130 <_isatty_r>
    c7e8:	10004c26 	beq	r2,zero,c91c <__smakebuf_r+0x1a8>
    c7ec:	8080030b 	ldhu	r2,12(r16)
    c7f0:	80c010c4 	addi	r3,r16,67
    c7f4:	80c00015 	stw	r3,0(r16)
    c7f8:	10800054 	ori	r2,r2,1
    c7fc:	8080030d 	sth	r2,12(r16)
    c800:	00800044 	movi	r2,1
    c804:	80c00415 	stw	r3,16(r16)
    c808:	80800515 	stw	r2,20(r16)
    c80c:	04810004 	movi	r18,1024
    c810:	00000706 	br	c830 <__smakebuf_r+0xbc>
    c814:	8080030b 	ldhu	r2,12(r16)
    c818:	10c0200c 	andi	r3,r2,128
    c81c:	18001f1e 	bne	r3,zero,c89c <__smakebuf_r+0x128>
    c820:	04810004 	movi	r18,1024
    c824:	10820014 	ori	r2,r2,2048
    c828:	8080030d 	sth	r2,12(r16)
    c82c:	0027883a 	mov	r19,zero
    c830:	900b883a 	mov	r5,r18
    c834:	8809883a 	mov	r4,r17
    c838:	0006c7c0 	call	6c7c <_malloc_r>
    c83c:	10002c26 	beq	r2,zero,c8f0 <__smakebuf_r+0x17c>
    c840:	80c0030b 	ldhu	r3,12(r16)
    c844:	01000074 	movhi	r4,1
    c848:	212e1b04 	addi	r4,r4,-18324
    c84c:	89000f15 	stw	r4,60(r17)
    c850:	18c02014 	ori	r3,r3,128
    c854:	80c0030d 	sth	r3,12(r16)
    c858:	80800015 	stw	r2,0(r16)
    c85c:	80800415 	stw	r2,16(r16)
    c860:	84800515 	stw	r18,20(r16)
    c864:	98001a1e 	bne	r19,zero,c8d0 <__smakebuf_r+0x15c>
    c868:	dfc01317 	ldw	ra,76(sp)
    c86c:	dcc01217 	ldw	r19,72(sp)
    c870:	dc801117 	ldw	r18,68(sp)
    c874:	dc401017 	ldw	r17,64(sp)
    c878:	dc000f17 	ldw	r16,60(sp)
    c87c:	dec01404 	addi	sp,sp,80
    c880:	f800283a 	ret
    c884:	288010c4 	addi	r2,r5,67
    c888:	28800015 	stw	r2,0(r5)
    c88c:	28800415 	stw	r2,16(r5)
    c890:	00800044 	movi	r2,1
    c894:	28800515 	stw	r2,20(r5)
    c898:	f800283a 	ret
    c89c:	04801004 	movi	r18,64
    c8a0:	003fe006 	br	c824 <__alt_exception_stack_pointer+0xf800c824>
    c8a4:	81000a17 	ldw	r4,40(r16)
    c8a8:	00c00074 	movhi	r3,1
    c8ac:	18f90004 	addi	r3,r3,-7168
    c8b0:	20ffc51e 	bne	r4,r3,c7c8 <__alt_exception_stack_pointer+0xf800c7c8>
    c8b4:	8080030b 	ldhu	r2,12(r16)
    c8b8:	04810004 	movi	r18,1024
    c8bc:	84801315 	stw	r18,76(r16)
    c8c0:	1484b03a 	or	r2,r2,r18
    c8c4:	8080030d 	sth	r2,12(r16)
    c8c8:	0027883a 	mov	r19,zero
    c8cc:	003fd806 	br	c830 <__alt_exception_stack_pointer+0xf800c830>
    c8d0:	8140038f 	ldh	r5,14(r16)
    c8d4:	8809883a 	mov	r4,r17
    c8d8:	00101300 	call	10130 <_isatty_r>
    c8dc:	103fe226 	beq	r2,zero,c868 <__alt_exception_stack_pointer+0xf800c868>
    c8e0:	8080030b 	ldhu	r2,12(r16)
    c8e4:	10800054 	ori	r2,r2,1
    c8e8:	8080030d 	sth	r2,12(r16)
    c8ec:	003fde06 	br	c868 <__alt_exception_stack_pointer+0xf800c868>
    c8f0:	8080030b 	ldhu	r2,12(r16)
    c8f4:	10c0800c 	andi	r3,r2,512
    c8f8:	183fdb1e 	bne	r3,zero,c868 <__alt_exception_stack_pointer+0xf800c868>
    c8fc:	10800094 	ori	r2,r2,2
    c900:	80c010c4 	addi	r3,r16,67
    c904:	8080030d 	sth	r2,12(r16)
    c908:	00800044 	movi	r2,1
    c90c:	80c00015 	stw	r3,0(r16)
    c910:	80c00415 	stw	r3,16(r16)
    c914:	80800515 	stw	r2,20(r16)
    c918:	003fd306 	br	c868 <__alt_exception_stack_pointer+0xf800c868>
    c91c:	04810004 	movi	r18,1024
    c920:	003fc306 	br	c830 <__alt_exception_stack_pointer+0xf800c830>
    c924:	0027883a 	mov	r19,zero
    c928:	04810004 	movi	r18,1024
    c92c:	003fc006 	br	c830 <__alt_exception_stack_pointer+0xf800c830>

0000c930 <memchr>:
    c930:	208000cc 	andi	r2,r4,3
    c934:	280f883a 	mov	r7,r5
    c938:	10003426 	beq	r2,zero,ca0c <memchr+0xdc>
    c93c:	30bfffc4 	addi	r2,r6,-1
    c940:	30001a26 	beq	r6,zero,c9ac <memchr+0x7c>
    c944:	20c00003 	ldbu	r3,0(r4)
    c948:	29803fcc 	andi	r6,r5,255
    c94c:	30c0051e 	bne	r6,r3,c964 <memchr+0x34>
    c950:	00001806 	br	c9b4 <memchr+0x84>
    c954:	10001526 	beq	r2,zero,c9ac <memchr+0x7c>
    c958:	20c00003 	ldbu	r3,0(r4)
    c95c:	10bfffc4 	addi	r2,r2,-1
    c960:	30c01426 	beq	r6,r3,c9b4 <memchr+0x84>
    c964:	21000044 	addi	r4,r4,1
    c968:	20c000cc 	andi	r3,r4,3
    c96c:	183ff91e 	bne	r3,zero,c954 <__alt_exception_stack_pointer+0xf800c954>
    c970:	020000c4 	movi	r8,3
    c974:	40801136 	bltu	r8,r2,c9bc <memchr+0x8c>
    c978:	10000c26 	beq	r2,zero,c9ac <memchr+0x7c>
    c97c:	20c00003 	ldbu	r3,0(r4)
    c980:	29403fcc 	andi	r5,r5,255
    c984:	28c00b26 	beq	r5,r3,c9b4 <memchr+0x84>
    c988:	20c00044 	addi	r3,r4,1
    c98c:	39803fcc 	andi	r6,r7,255
    c990:	2089883a 	add	r4,r4,r2
    c994:	00000306 	br	c9a4 <memchr+0x74>
    c998:	18c00044 	addi	r3,r3,1
    c99c:	197fffc3 	ldbu	r5,-1(r3)
    c9a0:	31400526 	beq	r6,r5,c9b8 <memchr+0x88>
    c9a4:	1805883a 	mov	r2,r3
    c9a8:	20fffb1e 	bne	r4,r3,c998 <__alt_exception_stack_pointer+0xf800c998>
    c9ac:	0005883a 	mov	r2,zero
    c9b0:	f800283a 	ret
    c9b4:	2005883a 	mov	r2,r4
    c9b8:	f800283a 	ret
    c9bc:	28c03fcc 	andi	r3,r5,255
    c9c0:	1812923a 	slli	r9,r3,8
    c9c4:	02ffbff4 	movhi	r11,65279
    c9c8:	02a02074 	movhi	r10,32897
    c9cc:	48d2b03a 	or	r9,r9,r3
    c9d0:	4806943a 	slli	r3,r9,16
    c9d4:	5affbfc4 	addi	r11,r11,-257
    c9d8:	52a02004 	addi	r10,r10,-32640
    c9dc:	48d2b03a 	or	r9,r9,r3
    c9e0:	20c00017 	ldw	r3,0(r4)
    c9e4:	48c6f03a 	xor	r3,r9,r3
    c9e8:	1acd883a 	add	r6,r3,r11
    c9ec:	00c6303a 	nor	r3,zero,r3
    c9f0:	30c6703a 	and	r3,r6,r3
    c9f4:	1a86703a 	and	r3,r3,r10
    c9f8:	183fe01e 	bne	r3,zero,c97c <__alt_exception_stack_pointer+0xf800c97c>
    c9fc:	10bfff04 	addi	r2,r2,-4
    ca00:	21000104 	addi	r4,r4,4
    ca04:	40bff636 	bltu	r8,r2,c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    ca08:	003fdb06 	br	c978 <__alt_exception_stack_pointer+0xf800c978>
    ca0c:	3005883a 	mov	r2,r6
    ca10:	003fd706 	br	c970 <__alt_exception_stack_pointer+0xf800c970>

0000ca14 <memmove>:
    ca14:	2005883a 	mov	r2,r4
    ca18:	29000b2e 	bgeu	r5,r4,ca48 <memmove+0x34>
    ca1c:	298f883a 	add	r7,r5,r6
    ca20:	21c0092e 	bgeu	r4,r7,ca48 <memmove+0x34>
    ca24:	2187883a 	add	r3,r4,r6
    ca28:	198bc83a 	sub	r5,r3,r6
    ca2c:	30004826 	beq	r6,zero,cb50 <memmove+0x13c>
    ca30:	39ffffc4 	addi	r7,r7,-1
    ca34:	39000003 	ldbu	r4,0(r7)
    ca38:	18ffffc4 	addi	r3,r3,-1
    ca3c:	19000005 	stb	r4,0(r3)
    ca40:	28fffb1e 	bne	r5,r3,ca30 <__alt_exception_stack_pointer+0xf800ca30>
    ca44:	f800283a 	ret
    ca48:	00c003c4 	movi	r3,15
    ca4c:	1980412e 	bgeu	r3,r6,cb54 <memmove+0x140>
    ca50:	2886b03a 	or	r3,r5,r2
    ca54:	18c000cc 	andi	r3,r3,3
    ca58:	1800401e 	bne	r3,zero,cb5c <memmove+0x148>
    ca5c:	33fffc04 	addi	r15,r6,-16
    ca60:	781ed13a 	srli	r15,r15,4
    ca64:	28c00104 	addi	r3,r5,4
    ca68:	13400104 	addi	r13,r2,4
    ca6c:	781c913a 	slli	r14,r15,4
    ca70:	2b000204 	addi	r12,r5,8
    ca74:	12c00204 	addi	r11,r2,8
    ca78:	73800504 	addi	r14,r14,20
    ca7c:	2a800304 	addi	r10,r5,12
    ca80:	12400304 	addi	r9,r2,12
    ca84:	2b9d883a 	add	r14,r5,r14
    ca88:	2811883a 	mov	r8,r5
    ca8c:	100f883a 	mov	r7,r2
    ca90:	41000017 	ldw	r4,0(r8)
    ca94:	39c00404 	addi	r7,r7,16
    ca98:	18c00404 	addi	r3,r3,16
    ca9c:	393ffc15 	stw	r4,-16(r7)
    caa0:	193ffc17 	ldw	r4,-16(r3)
    caa4:	6b400404 	addi	r13,r13,16
    caa8:	5ac00404 	addi	r11,r11,16
    caac:	693ffc15 	stw	r4,-16(r13)
    cab0:	61000017 	ldw	r4,0(r12)
    cab4:	4a400404 	addi	r9,r9,16
    cab8:	42000404 	addi	r8,r8,16
    cabc:	593ffc15 	stw	r4,-16(r11)
    cac0:	51000017 	ldw	r4,0(r10)
    cac4:	63000404 	addi	r12,r12,16
    cac8:	52800404 	addi	r10,r10,16
    cacc:	493ffc15 	stw	r4,-16(r9)
    cad0:	1bbfef1e 	bne	r3,r14,ca90 <__alt_exception_stack_pointer+0xf800ca90>
    cad4:	79000044 	addi	r4,r15,1
    cad8:	2008913a 	slli	r4,r4,4
    cadc:	328003cc 	andi	r10,r6,15
    cae0:	02c000c4 	movi	r11,3
    cae4:	1107883a 	add	r3,r2,r4
    cae8:	290b883a 	add	r5,r5,r4
    caec:	5a801e2e 	bgeu	r11,r10,cb68 <memmove+0x154>
    caf0:	1813883a 	mov	r9,r3
    caf4:	2811883a 	mov	r8,r5
    caf8:	500f883a 	mov	r7,r10
    cafc:	41000017 	ldw	r4,0(r8)
    cb00:	4a400104 	addi	r9,r9,4
    cb04:	39ffff04 	addi	r7,r7,-4
    cb08:	493fff15 	stw	r4,-4(r9)
    cb0c:	42000104 	addi	r8,r8,4
    cb10:	59fffa36 	bltu	r11,r7,cafc <__alt_exception_stack_pointer+0xf800cafc>
    cb14:	513fff04 	addi	r4,r10,-4
    cb18:	2008d0ba 	srli	r4,r4,2
    cb1c:	318000cc 	andi	r6,r6,3
    cb20:	21000044 	addi	r4,r4,1
    cb24:	2109883a 	add	r4,r4,r4
    cb28:	2109883a 	add	r4,r4,r4
    cb2c:	1907883a 	add	r3,r3,r4
    cb30:	290b883a 	add	r5,r5,r4
    cb34:	30000b26 	beq	r6,zero,cb64 <memmove+0x150>
    cb38:	198d883a 	add	r6,r3,r6
    cb3c:	29c00003 	ldbu	r7,0(r5)
    cb40:	18c00044 	addi	r3,r3,1
    cb44:	29400044 	addi	r5,r5,1
    cb48:	19ffffc5 	stb	r7,-1(r3)
    cb4c:	19bffb1e 	bne	r3,r6,cb3c <__alt_exception_stack_pointer+0xf800cb3c>
    cb50:	f800283a 	ret
    cb54:	1007883a 	mov	r3,r2
    cb58:	003ff606 	br	cb34 <__alt_exception_stack_pointer+0xf800cb34>
    cb5c:	1007883a 	mov	r3,r2
    cb60:	003ff506 	br	cb38 <__alt_exception_stack_pointer+0xf800cb38>
    cb64:	f800283a 	ret
    cb68:	500d883a 	mov	r6,r10
    cb6c:	003ff106 	br	cb34 <__alt_exception_stack_pointer+0xf800cb34>

0000cb70 <memset>:
    cb70:	20c000cc 	andi	r3,r4,3
    cb74:	2005883a 	mov	r2,r4
    cb78:	18004426 	beq	r3,zero,cc8c <memset+0x11c>
    cb7c:	31ffffc4 	addi	r7,r6,-1
    cb80:	30004026 	beq	r6,zero,cc84 <memset+0x114>
    cb84:	2813883a 	mov	r9,r5
    cb88:	200d883a 	mov	r6,r4
    cb8c:	2007883a 	mov	r3,r4
    cb90:	00000406 	br	cba4 <memset+0x34>
    cb94:	3a3fffc4 	addi	r8,r7,-1
    cb98:	31800044 	addi	r6,r6,1
    cb9c:	38003926 	beq	r7,zero,cc84 <memset+0x114>
    cba0:	400f883a 	mov	r7,r8
    cba4:	18c00044 	addi	r3,r3,1
    cba8:	32400005 	stb	r9,0(r6)
    cbac:	1a0000cc 	andi	r8,r3,3
    cbb0:	403ff81e 	bne	r8,zero,cb94 <__alt_exception_stack_pointer+0xf800cb94>
    cbb4:	010000c4 	movi	r4,3
    cbb8:	21c02d2e 	bgeu	r4,r7,cc70 <memset+0x100>
    cbbc:	29003fcc 	andi	r4,r5,255
    cbc0:	200c923a 	slli	r6,r4,8
    cbc4:	3108b03a 	or	r4,r6,r4
    cbc8:	200c943a 	slli	r6,r4,16
    cbcc:	218cb03a 	or	r6,r4,r6
    cbd0:	010003c4 	movi	r4,15
    cbd4:	21c0182e 	bgeu	r4,r7,cc38 <memset+0xc8>
    cbd8:	3b3ffc04 	addi	r12,r7,-16
    cbdc:	6018d13a 	srli	r12,r12,4
    cbe0:	1a000104 	addi	r8,r3,4
    cbe4:	1ac00204 	addi	r11,r3,8
    cbe8:	6008913a 	slli	r4,r12,4
    cbec:	1a800304 	addi	r10,r3,12
    cbf0:	1813883a 	mov	r9,r3
    cbf4:	21000504 	addi	r4,r4,20
    cbf8:	1909883a 	add	r4,r3,r4
    cbfc:	49800015 	stw	r6,0(r9)
    cc00:	41800015 	stw	r6,0(r8)
    cc04:	59800015 	stw	r6,0(r11)
    cc08:	51800015 	stw	r6,0(r10)
    cc0c:	42000404 	addi	r8,r8,16
    cc10:	4a400404 	addi	r9,r9,16
    cc14:	5ac00404 	addi	r11,r11,16
    cc18:	52800404 	addi	r10,r10,16
    cc1c:	413ff71e 	bne	r8,r4,cbfc <__alt_exception_stack_pointer+0xf800cbfc>
    cc20:	63000044 	addi	r12,r12,1
    cc24:	6018913a 	slli	r12,r12,4
    cc28:	39c003cc 	andi	r7,r7,15
    cc2c:	010000c4 	movi	r4,3
    cc30:	1b07883a 	add	r3,r3,r12
    cc34:	21c00e2e 	bgeu	r4,r7,cc70 <memset+0x100>
    cc38:	1813883a 	mov	r9,r3
    cc3c:	3811883a 	mov	r8,r7
    cc40:	010000c4 	movi	r4,3
    cc44:	49800015 	stw	r6,0(r9)
    cc48:	423fff04 	addi	r8,r8,-4
    cc4c:	4a400104 	addi	r9,r9,4
    cc50:	223ffc36 	bltu	r4,r8,cc44 <__alt_exception_stack_pointer+0xf800cc44>
    cc54:	393fff04 	addi	r4,r7,-4
    cc58:	2008d0ba 	srli	r4,r4,2
    cc5c:	39c000cc 	andi	r7,r7,3
    cc60:	21000044 	addi	r4,r4,1
    cc64:	2109883a 	add	r4,r4,r4
    cc68:	2109883a 	add	r4,r4,r4
    cc6c:	1907883a 	add	r3,r3,r4
    cc70:	38000526 	beq	r7,zero,cc88 <memset+0x118>
    cc74:	19cf883a 	add	r7,r3,r7
    cc78:	19400005 	stb	r5,0(r3)
    cc7c:	18c00044 	addi	r3,r3,1
    cc80:	38fffd1e 	bne	r7,r3,cc78 <__alt_exception_stack_pointer+0xf800cc78>
    cc84:	f800283a 	ret
    cc88:	f800283a 	ret
    cc8c:	2007883a 	mov	r3,r4
    cc90:	300f883a 	mov	r7,r6
    cc94:	003fc706 	br	cbb4 <__alt_exception_stack_pointer+0xf800cbb4>

0000cc98 <_Balloc>:
    cc98:	20801317 	ldw	r2,76(r4)
    cc9c:	defffc04 	addi	sp,sp,-16
    cca0:	dc400115 	stw	r17,4(sp)
    cca4:	dc000015 	stw	r16,0(sp)
    cca8:	dfc00315 	stw	ra,12(sp)
    ccac:	dc800215 	stw	r18,8(sp)
    ccb0:	2023883a 	mov	r17,r4
    ccb4:	2821883a 	mov	r16,r5
    ccb8:	10000f26 	beq	r2,zero,ccf8 <_Balloc+0x60>
    ccbc:	8407883a 	add	r3,r16,r16
    ccc0:	18c7883a 	add	r3,r3,r3
    ccc4:	10c7883a 	add	r3,r2,r3
    ccc8:	18800017 	ldw	r2,0(r3)
    cccc:	10001126 	beq	r2,zero,cd14 <_Balloc+0x7c>
    ccd0:	11000017 	ldw	r4,0(r2)
    ccd4:	19000015 	stw	r4,0(r3)
    ccd8:	10000415 	stw	zero,16(r2)
    ccdc:	10000315 	stw	zero,12(r2)
    cce0:	dfc00317 	ldw	ra,12(sp)
    cce4:	dc800217 	ldw	r18,8(sp)
    cce8:	dc400117 	ldw	r17,4(sp)
    ccec:	dc000017 	ldw	r16,0(sp)
    ccf0:	dec00404 	addi	sp,sp,16
    ccf4:	f800283a 	ret
    ccf8:	01800844 	movi	r6,33
    ccfc:	01400104 	movi	r5,4
    cd00:	000fcec0 	call	fcec <_calloc_r>
    cd04:	88801315 	stw	r2,76(r17)
    cd08:	103fec1e 	bne	r2,zero,ccbc <__alt_exception_stack_pointer+0xf800ccbc>
    cd0c:	0005883a 	mov	r2,zero
    cd10:	003ff306 	br	cce0 <__alt_exception_stack_pointer+0xf800cce0>
    cd14:	01400044 	movi	r5,1
    cd18:	2c24983a 	sll	r18,r5,r16
    cd1c:	8809883a 	mov	r4,r17
    cd20:	91800144 	addi	r6,r18,5
    cd24:	318d883a 	add	r6,r6,r6
    cd28:	318d883a 	add	r6,r6,r6
    cd2c:	000fcec0 	call	fcec <_calloc_r>
    cd30:	103ff626 	beq	r2,zero,cd0c <__alt_exception_stack_pointer+0xf800cd0c>
    cd34:	14000115 	stw	r16,4(r2)
    cd38:	14800215 	stw	r18,8(r2)
    cd3c:	003fe606 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>

0000cd40 <_Bfree>:
    cd40:	28000826 	beq	r5,zero,cd64 <_Bfree+0x24>
    cd44:	28c00117 	ldw	r3,4(r5)
    cd48:	20801317 	ldw	r2,76(r4)
    cd4c:	18c7883a 	add	r3,r3,r3
    cd50:	18c7883a 	add	r3,r3,r3
    cd54:	10c5883a 	add	r2,r2,r3
    cd58:	10c00017 	ldw	r3,0(r2)
    cd5c:	28c00015 	stw	r3,0(r5)
    cd60:	11400015 	stw	r5,0(r2)
    cd64:	f800283a 	ret

0000cd68 <__multadd>:
    cd68:	defff704 	addi	sp,sp,-36
    cd6c:	dc800215 	stw	r18,8(sp)
    cd70:	2c800417 	ldw	r18,16(r5)
    cd74:	dd800615 	stw	r22,24(sp)
    cd78:	dd400515 	stw	r21,20(sp)
    cd7c:	dd000415 	stw	r20,16(sp)
    cd80:	dcc00315 	stw	r19,12(sp)
    cd84:	dc400115 	stw	r17,4(sp)
    cd88:	dc000015 	stw	r16,0(sp)
    cd8c:	dfc00815 	stw	ra,32(sp)
    cd90:	ddc00715 	stw	r23,28(sp)
    cd94:	2827883a 	mov	r19,r5
    cd98:	2029883a 	mov	r20,r4
    cd9c:	3023883a 	mov	r17,r6
    cda0:	3821883a 	mov	r16,r7
    cda4:	2d400504 	addi	r21,r5,20
    cda8:	002d883a 	mov	r22,zero
    cdac:	adc00017 	ldw	r23,0(r21)
    cdb0:	880b883a 	mov	r5,r17
    cdb4:	ad400104 	addi	r21,r21,4
    cdb8:	b93fffcc 	andi	r4,r23,65535
    cdbc:	0004ea80 	call	4ea8 <__mulsi3>
    cdc0:	b808d43a 	srli	r4,r23,16
    cdc4:	880b883a 	mov	r5,r17
    cdc8:	1421883a 	add	r16,r2,r16
    cdcc:	0004ea80 	call	4ea8 <__mulsi3>
    cdd0:	800ed43a 	srli	r7,r16,16
    cdd4:	80ffffcc 	andi	r3,r16,65535
    cdd8:	b5800044 	addi	r22,r22,1
    cddc:	11c5883a 	add	r2,r2,r7
    cde0:	100e943a 	slli	r7,r2,16
    cde4:	1020d43a 	srli	r16,r2,16
    cde8:	38c7883a 	add	r3,r7,r3
    cdec:	a8ffff15 	stw	r3,-4(r21)
    cdf0:	b4bfee16 	blt	r22,r18,cdac <__alt_exception_stack_pointer+0xf800cdac>
    cdf4:	80000926 	beq	r16,zero,ce1c <__multadd+0xb4>
    cdf8:	98800217 	ldw	r2,8(r19)
    cdfc:	9080130e 	bge	r18,r2,ce4c <__multadd+0xe4>
    ce00:	90800144 	addi	r2,r18,5
    ce04:	1085883a 	add	r2,r2,r2
    ce08:	1085883a 	add	r2,r2,r2
    ce0c:	9885883a 	add	r2,r19,r2
    ce10:	14000015 	stw	r16,0(r2)
    ce14:	94800044 	addi	r18,r18,1
    ce18:	9c800415 	stw	r18,16(r19)
    ce1c:	9805883a 	mov	r2,r19
    ce20:	dfc00817 	ldw	ra,32(sp)
    ce24:	ddc00717 	ldw	r23,28(sp)
    ce28:	dd800617 	ldw	r22,24(sp)
    ce2c:	dd400517 	ldw	r21,20(sp)
    ce30:	dd000417 	ldw	r20,16(sp)
    ce34:	dcc00317 	ldw	r19,12(sp)
    ce38:	dc800217 	ldw	r18,8(sp)
    ce3c:	dc400117 	ldw	r17,4(sp)
    ce40:	dc000017 	ldw	r16,0(sp)
    ce44:	dec00904 	addi	sp,sp,36
    ce48:	f800283a 	ret
    ce4c:	99400117 	ldw	r5,4(r19)
    ce50:	a009883a 	mov	r4,r20
    ce54:	29400044 	addi	r5,r5,1
    ce58:	000cc980 	call	cc98 <_Balloc>
    ce5c:	99800417 	ldw	r6,16(r19)
    ce60:	99400304 	addi	r5,r19,12
    ce64:	11000304 	addi	r4,r2,12
    ce68:	31800084 	addi	r6,r6,2
    ce6c:	318d883a 	add	r6,r6,r6
    ce70:	318d883a 	add	r6,r6,r6
    ce74:	1023883a 	mov	r17,r2
    ce78:	00074880 	call	7488 <memcpy>
    ce7c:	98000a26 	beq	r19,zero,cea8 <__multadd+0x140>
    ce80:	98c00117 	ldw	r3,4(r19)
    ce84:	a0801317 	ldw	r2,76(r20)
    ce88:	18c7883a 	add	r3,r3,r3
    ce8c:	18c7883a 	add	r3,r3,r3
    ce90:	10c5883a 	add	r2,r2,r3
    ce94:	10c00017 	ldw	r3,0(r2)
    ce98:	98c00015 	stw	r3,0(r19)
    ce9c:	14c00015 	stw	r19,0(r2)
    cea0:	8827883a 	mov	r19,r17
    cea4:	003fd606 	br	ce00 <__alt_exception_stack_pointer+0xf800ce00>
    cea8:	8827883a 	mov	r19,r17
    ceac:	003fd406 	br	ce00 <__alt_exception_stack_pointer+0xf800ce00>

0000ceb0 <__s2b>:
    ceb0:	defff904 	addi	sp,sp,-28
    ceb4:	dc400115 	stw	r17,4(sp)
    ceb8:	dc000015 	stw	r16,0(sp)
    cebc:	2023883a 	mov	r17,r4
    cec0:	2821883a 	mov	r16,r5
    cec4:	39000204 	addi	r4,r7,8
    cec8:	01400244 	movi	r5,9
    cecc:	dcc00315 	stw	r19,12(sp)
    ced0:	dc800215 	stw	r18,8(sp)
    ced4:	dfc00615 	stw	ra,24(sp)
    ced8:	dd400515 	stw	r21,20(sp)
    cedc:	dd000415 	stw	r20,16(sp)
    cee0:	3825883a 	mov	r18,r7
    cee4:	3027883a 	mov	r19,r6
    cee8:	0004cf40 	call	4cf4 <__divsi3>
    ceec:	00c00044 	movi	r3,1
    cef0:	000b883a 	mov	r5,zero
    cef4:	1880030e 	bge	r3,r2,cf04 <__s2b+0x54>
    cef8:	18c7883a 	add	r3,r3,r3
    cefc:	29400044 	addi	r5,r5,1
    cf00:	18bffd16 	blt	r3,r2,cef8 <__alt_exception_stack_pointer+0xf800cef8>
    cf04:	8809883a 	mov	r4,r17
    cf08:	000cc980 	call	cc98 <_Balloc>
    cf0c:	d8c00717 	ldw	r3,28(sp)
    cf10:	10c00515 	stw	r3,20(r2)
    cf14:	00c00044 	movi	r3,1
    cf18:	10c00415 	stw	r3,16(r2)
    cf1c:	00c00244 	movi	r3,9
    cf20:	1cc0210e 	bge	r3,r19,cfa8 <__s2b+0xf8>
    cf24:	80eb883a 	add	r21,r16,r3
    cf28:	a829883a 	mov	r20,r21
    cf2c:	84e1883a 	add	r16,r16,r19
    cf30:	a1c00007 	ldb	r7,0(r20)
    cf34:	01800284 	movi	r6,10
    cf38:	a5000044 	addi	r20,r20,1
    cf3c:	100b883a 	mov	r5,r2
    cf40:	39fff404 	addi	r7,r7,-48
    cf44:	8809883a 	mov	r4,r17
    cf48:	000cd680 	call	cd68 <__multadd>
    cf4c:	a43ff81e 	bne	r20,r16,cf30 <__alt_exception_stack_pointer+0xf800cf30>
    cf50:	ace1883a 	add	r16,r21,r19
    cf54:	843ffe04 	addi	r16,r16,-8
    cf58:	9c800a0e 	bge	r19,r18,cf84 <__s2b+0xd4>
    cf5c:	94e5c83a 	sub	r18,r18,r19
    cf60:	84a5883a 	add	r18,r16,r18
    cf64:	81c00007 	ldb	r7,0(r16)
    cf68:	01800284 	movi	r6,10
    cf6c:	84000044 	addi	r16,r16,1
    cf70:	100b883a 	mov	r5,r2
    cf74:	39fff404 	addi	r7,r7,-48
    cf78:	8809883a 	mov	r4,r17
    cf7c:	000cd680 	call	cd68 <__multadd>
    cf80:	84bff81e 	bne	r16,r18,cf64 <__alt_exception_stack_pointer+0xf800cf64>
    cf84:	dfc00617 	ldw	ra,24(sp)
    cf88:	dd400517 	ldw	r21,20(sp)
    cf8c:	dd000417 	ldw	r20,16(sp)
    cf90:	dcc00317 	ldw	r19,12(sp)
    cf94:	dc800217 	ldw	r18,8(sp)
    cf98:	dc400117 	ldw	r17,4(sp)
    cf9c:	dc000017 	ldw	r16,0(sp)
    cfa0:	dec00704 	addi	sp,sp,28
    cfa4:	f800283a 	ret
    cfa8:	84000284 	addi	r16,r16,10
    cfac:	1827883a 	mov	r19,r3
    cfb0:	003fe906 	br	cf58 <__alt_exception_stack_pointer+0xf800cf58>

0000cfb4 <__hi0bits>:
    cfb4:	20bfffec 	andhi	r2,r4,65535
    cfb8:	1000141e 	bne	r2,zero,d00c <__hi0bits+0x58>
    cfbc:	2008943a 	slli	r4,r4,16
    cfc0:	00800404 	movi	r2,16
    cfc4:	20ffc02c 	andhi	r3,r4,65280
    cfc8:	1800021e 	bne	r3,zero,cfd4 <__hi0bits+0x20>
    cfcc:	2008923a 	slli	r4,r4,8
    cfd0:	10800204 	addi	r2,r2,8
    cfd4:	20fc002c 	andhi	r3,r4,61440
    cfd8:	1800021e 	bne	r3,zero,cfe4 <__hi0bits+0x30>
    cfdc:	2008913a 	slli	r4,r4,4
    cfe0:	10800104 	addi	r2,r2,4
    cfe4:	20f0002c 	andhi	r3,r4,49152
    cfe8:	1800031e 	bne	r3,zero,cff8 <__hi0bits+0x44>
    cfec:	2109883a 	add	r4,r4,r4
    cff0:	10800084 	addi	r2,r2,2
    cff4:	2109883a 	add	r4,r4,r4
    cff8:	20000316 	blt	r4,zero,d008 <__hi0bits+0x54>
    cffc:	2110002c 	andhi	r4,r4,16384
    d000:	2000041e 	bne	r4,zero,d014 <__hi0bits+0x60>
    d004:	00800804 	movi	r2,32
    d008:	f800283a 	ret
    d00c:	0005883a 	mov	r2,zero
    d010:	003fec06 	br	cfc4 <__alt_exception_stack_pointer+0xf800cfc4>
    d014:	10800044 	addi	r2,r2,1
    d018:	f800283a 	ret

0000d01c <__lo0bits>:
    d01c:	20c00017 	ldw	r3,0(r4)
    d020:	188001cc 	andi	r2,r3,7
    d024:	10000826 	beq	r2,zero,d048 <__lo0bits+0x2c>
    d028:	1880004c 	andi	r2,r3,1
    d02c:	1000211e 	bne	r2,zero,d0b4 <__lo0bits+0x98>
    d030:	1880008c 	andi	r2,r3,2
    d034:	1000211e 	bne	r2,zero,d0bc <__lo0bits+0xa0>
    d038:	1806d0ba 	srli	r3,r3,2
    d03c:	00800084 	movi	r2,2
    d040:	20c00015 	stw	r3,0(r4)
    d044:	f800283a 	ret
    d048:	18bfffcc 	andi	r2,r3,65535
    d04c:	10001326 	beq	r2,zero,d09c <__lo0bits+0x80>
    d050:	0005883a 	mov	r2,zero
    d054:	19403fcc 	andi	r5,r3,255
    d058:	2800021e 	bne	r5,zero,d064 <__lo0bits+0x48>
    d05c:	1806d23a 	srli	r3,r3,8
    d060:	10800204 	addi	r2,r2,8
    d064:	194003cc 	andi	r5,r3,15
    d068:	2800021e 	bne	r5,zero,d074 <__lo0bits+0x58>
    d06c:	1806d13a 	srli	r3,r3,4
    d070:	10800104 	addi	r2,r2,4
    d074:	194000cc 	andi	r5,r3,3
    d078:	2800021e 	bne	r5,zero,d084 <__lo0bits+0x68>
    d07c:	1806d0ba 	srli	r3,r3,2
    d080:	10800084 	addi	r2,r2,2
    d084:	1940004c 	andi	r5,r3,1
    d088:	2800081e 	bne	r5,zero,d0ac <__lo0bits+0x90>
    d08c:	1806d07a 	srli	r3,r3,1
    d090:	1800051e 	bne	r3,zero,d0a8 <__lo0bits+0x8c>
    d094:	00800804 	movi	r2,32
    d098:	f800283a 	ret
    d09c:	1806d43a 	srli	r3,r3,16
    d0a0:	00800404 	movi	r2,16
    d0a4:	003feb06 	br	d054 <__alt_exception_stack_pointer+0xf800d054>
    d0a8:	10800044 	addi	r2,r2,1
    d0ac:	20c00015 	stw	r3,0(r4)
    d0b0:	f800283a 	ret
    d0b4:	0005883a 	mov	r2,zero
    d0b8:	f800283a 	ret
    d0bc:	1806d07a 	srli	r3,r3,1
    d0c0:	00800044 	movi	r2,1
    d0c4:	20c00015 	stw	r3,0(r4)
    d0c8:	f800283a 	ret

0000d0cc <__i2b>:
    d0cc:	defffd04 	addi	sp,sp,-12
    d0d0:	dc000015 	stw	r16,0(sp)
    d0d4:	04000044 	movi	r16,1
    d0d8:	dc400115 	stw	r17,4(sp)
    d0dc:	2823883a 	mov	r17,r5
    d0e0:	800b883a 	mov	r5,r16
    d0e4:	dfc00215 	stw	ra,8(sp)
    d0e8:	000cc980 	call	cc98 <_Balloc>
    d0ec:	14400515 	stw	r17,20(r2)
    d0f0:	14000415 	stw	r16,16(r2)
    d0f4:	dfc00217 	ldw	ra,8(sp)
    d0f8:	dc400117 	ldw	r17,4(sp)
    d0fc:	dc000017 	ldw	r16,0(sp)
    d100:	dec00304 	addi	sp,sp,12
    d104:	f800283a 	ret

0000d108 <__multiply>:
    d108:	deffef04 	addi	sp,sp,-68
    d10c:	dc400815 	stw	r17,32(sp)
    d110:	dc000715 	stw	r16,28(sp)
    d114:	34400417 	ldw	r17,16(r6)
    d118:	2c000417 	ldw	r16,16(r5)
    d11c:	dd800d15 	stw	r22,52(sp)
    d120:	dc800915 	stw	r18,36(sp)
    d124:	dfc01015 	stw	ra,64(sp)
    d128:	df000f15 	stw	fp,60(sp)
    d12c:	ddc00e15 	stw	r23,56(sp)
    d130:	dd400c15 	stw	r21,48(sp)
    d134:	dd000b15 	stw	r20,44(sp)
    d138:	dcc00a15 	stw	r19,40(sp)
    d13c:	2825883a 	mov	r18,r5
    d140:	302d883a 	mov	r22,r6
    d144:	8440050e 	bge	r16,r17,d15c <__multiply+0x54>
    d148:	8007883a 	mov	r3,r16
    d14c:	3025883a 	mov	r18,r6
    d150:	8821883a 	mov	r16,r17
    d154:	282d883a 	mov	r22,r5
    d158:	1823883a 	mov	r17,r3
    d15c:	90800217 	ldw	r2,8(r18)
    d160:	8447883a 	add	r3,r16,r17
    d164:	d8c00215 	stw	r3,8(sp)
    d168:	91400117 	ldw	r5,4(r18)
    d16c:	10c0010e 	bge	r2,r3,d174 <__multiply+0x6c>
    d170:	29400044 	addi	r5,r5,1
    d174:	000cc980 	call	cc98 <_Balloc>
    d178:	d8c00217 	ldw	r3,8(sp)
    d17c:	d8800615 	stw	r2,24(sp)
    d180:	18eb883a 	add	r21,r3,r3
    d184:	ad6b883a 	add	r21,r21,r21
    d188:	10c00504 	addi	r3,r2,20
    d18c:	1d6b883a 	add	r21,r3,r21
    d190:	d8c00115 	stw	r3,4(sp)
    d194:	dd400315 	stw	r21,12(sp)
    d198:	1805883a 	mov	r2,r3
    d19c:	1d40042e 	bgeu	r3,r21,d1b0 <__multiply+0xa8>
    d1a0:	d8c00317 	ldw	r3,12(sp)
    d1a4:	10000015 	stw	zero,0(r2)
    d1a8:	10800104 	addi	r2,r2,4
    d1ac:	10fffc36 	bltu	r2,r3,d1a0 <__alt_exception_stack_pointer+0xf800d1a0>
    d1b0:	8c63883a 	add	r17,r17,r17
    d1b4:	b5800504 	addi	r22,r22,20
    d1b8:	8c63883a 	add	r17,r17,r17
    d1bc:	94800504 	addi	r18,r18,20
    d1c0:	8421883a 	add	r16,r16,r16
    d1c4:	b463883a 	add	r17,r22,r17
    d1c8:	8421883a 	add	r16,r16,r16
    d1cc:	dd800015 	stw	r22,0(sp)
    d1d0:	dc800415 	stw	r18,16(sp)
    d1d4:	dc400515 	stw	r17,20(sp)
    d1d8:	9429883a 	add	r20,r18,r16
    d1dc:	b4404f2e 	bgeu	r22,r17,d31c <__multiply+0x214>
    d1e0:	d8c00017 	ldw	r3,0(sp)
    d1e4:	1c800017 	ldw	r18,0(r3)
    d1e8:	947fffcc 	andi	r17,r18,65535
    d1ec:	88001e26 	beq	r17,zero,d268 <__multiply+0x160>
    d1f0:	dd800117 	ldw	r22,4(sp)
    d1f4:	dd400417 	ldw	r21,16(sp)
    d1f8:	0027883a 	mov	r19,zero
    d1fc:	ac800017 	ldw	r18,0(r21)
    d200:	b4000017 	ldw	r16,0(r22)
    d204:	880b883a 	mov	r5,r17
    d208:	913fffcc 	andi	r4,r18,65535
    d20c:	0004ea80 	call	4ea8 <__mulsi3>
    d210:	9008d43a 	srli	r4,r18,16
    d214:	84bfffcc 	andi	r18,r16,65535
    d218:	1485883a 	add	r2,r2,r18
    d21c:	14e5883a 	add	r18,r2,r19
    d220:	8020d43a 	srli	r16,r16,16
    d224:	9026d43a 	srli	r19,r18,16
    d228:	880b883a 	mov	r5,r17
    d22c:	0004ea80 	call	4ea8 <__mulsi3>
    d230:	1405883a 	add	r2,r2,r16
    d234:	14e1883a 	add	r16,r2,r19
    d238:	90ffffcc 	andi	r3,r18,65535
    d23c:	8024943a 	slli	r18,r16,16
    d240:	ad400104 	addi	r21,r21,4
    d244:	b005883a 	mov	r2,r22
    d248:	90c6b03a 	or	r3,r18,r3
    d24c:	b0c00015 	stw	r3,0(r22)
    d250:	8026d43a 	srli	r19,r16,16
    d254:	b5800104 	addi	r22,r22,4
    d258:	ad3fe836 	bltu	r21,r20,d1fc <__alt_exception_stack_pointer+0xf800d1fc>
    d25c:	d8c00017 	ldw	r3,0(sp)
    d260:	14c00115 	stw	r19,4(r2)
    d264:	1c800017 	ldw	r18,0(r3)
    d268:	9024d43a 	srli	r18,r18,16
    d26c:	90002226 	beq	r18,zero,d2f8 <__multiply+0x1f0>
    d270:	d8c00117 	ldw	r3,4(sp)
    d274:	dd800417 	ldw	r22,16(sp)
    d278:	002f883a 	mov	r23,zero
    d27c:	1f000017 	ldw	fp,0(r3)
    d280:	1823883a 	mov	r17,r3
    d284:	182b883a 	mov	r21,r3
    d288:	e021883a 	mov	r16,fp
    d28c:	00000106 	br	d294 <__multiply+0x18c>
    d290:	982b883a 	mov	r21,r19
    d294:	b100000b 	ldhu	r4,0(r22)
    d298:	8020d43a 	srli	r16,r16,16
    d29c:	900b883a 	mov	r5,r18
    d2a0:	0004ea80 	call	4ea8 <__mulsi3>
    d2a4:	1405883a 	add	r2,r2,r16
    d2a8:	15ef883a 	add	r23,r2,r23
    d2ac:	b804943a 	slli	r2,r23,16
    d2b0:	e0ffffcc 	andi	r3,fp,65535
    d2b4:	8c400104 	addi	r17,r17,4
    d2b8:	10c6b03a 	or	r3,r2,r3
    d2bc:	88ffff15 	stw	r3,-4(r17)
    d2c0:	b5800104 	addi	r22,r22,4
    d2c4:	b13fff17 	ldw	r4,-4(r22)
    d2c8:	acc00104 	addi	r19,r21,4
    d2cc:	900b883a 	mov	r5,r18
    d2d0:	2008d43a 	srli	r4,r4,16
    d2d4:	9c000017 	ldw	r16,0(r19)
    d2d8:	0004ea80 	call	4ea8 <__mulsi3>
    d2dc:	b806d43a 	srli	r3,r23,16
    d2e0:	813fffcc 	andi	r4,r16,65535
    d2e4:	1105883a 	add	r2,r2,r4
    d2e8:	10f9883a 	add	fp,r2,r3
    d2ec:	e02ed43a 	srli	r23,fp,16
    d2f0:	b53fe736 	bltu	r22,r20,d290 <__alt_exception_stack_pointer+0xf800d290>
    d2f4:	af000115 	stw	fp,4(r21)
    d2f8:	d8c00017 	ldw	r3,0(sp)
    d2fc:	d9000517 	ldw	r4,20(sp)
    d300:	18c00104 	addi	r3,r3,4
    d304:	d8c00015 	stw	r3,0(sp)
    d308:	d8c00117 	ldw	r3,4(sp)
    d30c:	18c00104 	addi	r3,r3,4
    d310:	d8c00115 	stw	r3,4(sp)
    d314:	d8c00017 	ldw	r3,0(sp)
    d318:	193fb136 	bltu	r3,r4,d1e0 <__alt_exception_stack_pointer+0xf800d1e0>
    d31c:	d8c00217 	ldw	r3,8(sp)
    d320:	00c00c0e 	bge	zero,r3,d354 <__multiply+0x24c>
    d324:	d8c00317 	ldw	r3,12(sp)
    d328:	18bfff17 	ldw	r2,-4(r3)
    d32c:	1d7fff04 	addi	r21,r3,-4
    d330:	10000326 	beq	r2,zero,d340 <__multiply+0x238>
    d334:	00000706 	br	d354 <__multiply+0x24c>
    d338:	a8800017 	ldw	r2,0(r21)
    d33c:	1000051e 	bne	r2,zero,d354 <__multiply+0x24c>
    d340:	d8c00217 	ldw	r3,8(sp)
    d344:	ad7fff04 	addi	r21,r21,-4
    d348:	18ffffc4 	addi	r3,r3,-1
    d34c:	d8c00215 	stw	r3,8(sp)
    d350:	183ff91e 	bne	r3,zero,d338 <__alt_exception_stack_pointer+0xf800d338>
    d354:	d8c00617 	ldw	r3,24(sp)
    d358:	d9000217 	ldw	r4,8(sp)
    d35c:	1805883a 	mov	r2,r3
    d360:	19000415 	stw	r4,16(r3)
    d364:	dfc01017 	ldw	ra,64(sp)
    d368:	df000f17 	ldw	fp,60(sp)
    d36c:	ddc00e17 	ldw	r23,56(sp)
    d370:	dd800d17 	ldw	r22,52(sp)
    d374:	dd400c17 	ldw	r21,48(sp)
    d378:	dd000b17 	ldw	r20,44(sp)
    d37c:	dcc00a17 	ldw	r19,40(sp)
    d380:	dc800917 	ldw	r18,36(sp)
    d384:	dc400817 	ldw	r17,32(sp)
    d388:	dc000717 	ldw	r16,28(sp)
    d38c:	dec01104 	addi	sp,sp,68
    d390:	f800283a 	ret

0000d394 <__pow5mult>:
    d394:	defffa04 	addi	sp,sp,-24
    d398:	dcc00315 	stw	r19,12(sp)
    d39c:	dc000015 	stw	r16,0(sp)
    d3a0:	dfc00515 	stw	ra,20(sp)
    d3a4:	dd000415 	stw	r20,16(sp)
    d3a8:	dc800215 	stw	r18,8(sp)
    d3ac:	dc400115 	stw	r17,4(sp)
    d3b0:	308000cc 	andi	r2,r6,3
    d3b4:	3021883a 	mov	r16,r6
    d3b8:	2027883a 	mov	r19,r4
    d3bc:	10002f1e 	bne	r2,zero,d47c <__pow5mult+0xe8>
    d3c0:	2825883a 	mov	r18,r5
    d3c4:	8021d0ba 	srai	r16,r16,2
    d3c8:	80001a26 	beq	r16,zero,d434 <__pow5mult+0xa0>
    d3cc:	9c401217 	ldw	r17,72(r19)
    d3d0:	8800061e 	bne	r17,zero,d3ec <__pow5mult+0x58>
    d3d4:	00003406 	br	d4a8 <__pow5mult+0x114>
    d3d8:	8021d07a 	srai	r16,r16,1
    d3dc:	80001526 	beq	r16,zero,d434 <__pow5mult+0xa0>
    d3e0:	88800017 	ldw	r2,0(r17)
    d3e4:	10001c26 	beq	r2,zero,d458 <__pow5mult+0xc4>
    d3e8:	1023883a 	mov	r17,r2
    d3ec:	8080004c 	andi	r2,r16,1
    d3f0:	103ff926 	beq	r2,zero,d3d8 <__alt_exception_stack_pointer+0xf800d3d8>
    d3f4:	880d883a 	mov	r6,r17
    d3f8:	900b883a 	mov	r5,r18
    d3fc:	9809883a 	mov	r4,r19
    d400:	000d1080 	call	d108 <__multiply>
    d404:	90001b26 	beq	r18,zero,d474 <__pow5mult+0xe0>
    d408:	91000117 	ldw	r4,4(r18)
    d40c:	98c01317 	ldw	r3,76(r19)
    d410:	8021d07a 	srai	r16,r16,1
    d414:	2109883a 	add	r4,r4,r4
    d418:	2109883a 	add	r4,r4,r4
    d41c:	1907883a 	add	r3,r3,r4
    d420:	19000017 	ldw	r4,0(r3)
    d424:	91000015 	stw	r4,0(r18)
    d428:	1c800015 	stw	r18,0(r3)
    d42c:	1025883a 	mov	r18,r2
    d430:	803feb1e 	bne	r16,zero,d3e0 <__alt_exception_stack_pointer+0xf800d3e0>
    d434:	9005883a 	mov	r2,r18
    d438:	dfc00517 	ldw	ra,20(sp)
    d43c:	dd000417 	ldw	r20,16(sp)
    d440:	dcc00317 	ldw	r19,12(sp)
    d444:	dc800217 	ldw	r18,8(sp)
    d448:	dc400117 	ldw	r17,4(sp)
    d44c:	dc000017 	ldw	r16,0(sp)
    d450:	dec00604 	addi	sp,sp,24
    d454:	f800283a 	ret
    d458:	880d883a 	mov	r6,r17
    d45c:	880b883a 	mov	r5,r17
    d460:	9809883a 	mov	r4,r19
    d464:	000d1080 	call	d108 <__multiply>
    d468:	88800015 	stw	r2,0(r17)
    d46c:	10000015 	stw	zero,0(r2)
    d470:	003fdd06 	br	d3e8 <__alt_exception_stack_pointer+0xf800d3e8>
    d474:	1025883a 	mov	r18,r2
    d478:	003fd706 	br	d3d8 <__alt_exception_stack_pointer+0xf800d3d8>
    d47c:	10bfffc4 	addi	r2,r2,-1
    d480:	1085883a 	add	r2,r2,r2
    d484:	00c00074 	movhi	r3,1
    d488:	18d53504 	addi	r3,r3,21716
    d48c:	1085883a 	add	r2,r2,r2
    d490:	1885883a 	add	r2,r3,r2
    d494:	11800017 	ldw	r6,0(r2)
    d498:	000f883a 	mov	r7,zero
    d49c:	000cd680 	call	cd68 <__multadd>
    d4a0:	1025883a 	mov	r18,r2
    d4a4:	003fc706 	br	d3c4 <__alt_exception_stack_pointer+0xf800d3c4>
    d4a8:	05000044 	movi	r20,1
    d4ac:	a00b883a 	mov	r5,r20
    d4b0:	9809883a 	mov	r4,r19
    d4b4:	000cc980 	call	cc98 <_Balloc>
    d4b8:	1023883a 	mov	r17,r2
    d4bc:	00809c44 	movi	r2,625
    d4c0:	88800515 	stw	r2,20(r17)
    d4c4:	8d000415 	stw	r20,16(r17)
    d4c8:	9c401215 	stw	r17,72(r19)
    d4cc:	88000015 	stw	zero,0(r17)
    d4d0:	003fc606 	br	d3ec <__alt_exception_stack_pointer+0xf800d3ec>

0000d4d4 <__lshift>:
    d4d4:	defff904 	addi	sp,sp,-28
    d4d8:	dd400515 	stw	r21,20(sp)
    d4dc:	dcc00315 	stw	r19,12(sp)
    d4e0:	302bd17a 	srai	r21,r6,5
    d4e4:	2cc00417 	ldw	r19,16(r5)
    d4e8:	28800217 	ldw	r2,8(r5)
    d4ec:	dd000415 	stw	r20,16(sp)
    d4f0:	ace7883a 	add	r19,r21,r19
    d4f4:	dc800215 	stw	r18,8(sp)
    d4f8:	dc400115 	stw	r17,4(sp)
    d4fc:	dc000015 	stw	r16,0(sp)
    d500:	dfc00615 	stw	ra,24(sp)
    d504:	9c000044 	addi	r16,r19,1
    d508:	2823883a 	mov	r17,r5
    d50c:	3029883a 	mov	r20,r6
    d510:	2025883a 	mov	r18,r4
    d514:	29400117 	ldw	r5,4(r5)
    d518:	1400030e 	bge	r2,r16,d528 <__lshift+0x54>
    d51c:	1085883a 	add	r2,r2,r2
    d520:	29400044 	addi	r5,r5,1
    d524:	143ffd16 	blt	r2,r16,d51c <__alt_exception_stack_pointer+0xf800d51c>
    d528:	9009883a 	mov	r4,r18
    d52c:	000cc980 	call	cc98 <_Balloc>
    d530:	10c00504 	addi	r3,r2,20
    d534:	0540070e 	bge	zero,r21,d554 <__lshift+0x80>
    d538:	ad6b883a 	add	r21,r21,r21
    d53c:	ad6b883a 	add	r21,r21,r21
    d540:	1809883a 	mov	r4,r3
    d544:	1d47883a 	add	r3,r3,r21
    d548:	20000015 	stw	zero,0(r4)
    d54c:	21000104 	addi	r4,r4,4
    d550:	193ffd1e 	bne	r3,r4,d548 <__alt_exception_stack_pointer+0xf800d548>
    d554:	8a000417 	ldw	r8,16(r17)
    d558:	89000504 	addi	r4,r17,20
    d55c:	a18007cc 	andi	r6,r20,31
    d560:	4211883a 	add	r8,r8,r8
    d564:	4211883a 	add	r8,r8,r8
    d568:	2211883a 	add	r8,r4,r8
    d56c:	30002326 	beq	r6,zero,d5fc <__lshift+0x128>
    d570:	02400804 	movi	r9,32
    d574:	4993c83a 	sub	r9,r9,r6
    d578:	000b883a 	mov	r5,zero
    d57c:	21c00017 	ldw	r7,0(r4)
    d580:	1815883a 	mov	r10,r3
    d584:	18c00104 	addi	r3,r3,4
    d588:	398e983a 	sll	r7,r7,r6
    d58c:	21000104 	addi	r4,r4,4
    d590:	394ab03a 	or	r5,r7,r5
    d594:	197fff15 	stw	r5,-4(r3)
    d598:	217fff17 	ldw	r5,-4(r4)
    d59c:	2a4ad83a 	srl	r5,r5,r9
    d5a0:	223ff636 	bltu	r4,r8,d57c <__alt_exception_stack_pointer+0xf800d57c>
    d5a4:	51400115 	stw	r5,4(r10)
    d5a8:	28001a1e 	bne	r5,zero,d614 <__lshift+0x140>
    d5ac:	843fffc4 	addi	r16,r16,-1
    d5b0:	14000415 	stw	r16,16(r2)
    d5b4:	88000826 	beq	r17,zero,d5d8 <__lshift+0x104>
    d5b8:	89000117 	ldw	r4,4(r17)
    d5bc:	90c01317 	ldw	r3,76(r18)
    d5c0:	2109883a 	add	r4,r4,r4
    d5c4:	2109883a 	add	r4,r4,r4
    d5c8:	1907883a 	add	r3,r3,r4
    d5cc:	19000017 	ldw	r4,0(r3)
    d5d0:	89000015 	stw	r4,0(r17)
    d5d4:	1c400015 	stw	r17,0(r3)
    d5d8:	dfc00617 	ldw	ra,24(sp)
    d5dc:	dd400517 	ldw	r21,20(sp)
    d5e0:	dd000417 	ldw	r20,16(sp)
    d5e4:	dcc00317 	ldw	r19,12(sp)
    d5e8:	dc800217 	ldw	r18,8(sp)
    d5ec:	dc400117 	ldw	r17,4(sp)
    d5f0:	dc000017 	ldw	r16,0(sp)
    d5f4:	dec00704 	addi	sp,sp,28
    d5f8:	f800283a 	ret
    d5fc:	21400017 	ldw	r5,0(r4)
    d600:	18c00104 	addi	r3,r3,4
    d604:	21000104 	addi	r4,r4,4
    d608:	197fff15 	stw	r5,-4(r3)
    d60c:	223ffb36 	bltu	r4,r8,d5fc <__alt_exception_stack_pointer+0xf800d5fc>
    d610:	003fe606 	br	d5ac <__alt_exception_stack_pointer+0xf800d5ac>
    d614:	9c000084 	addi	r16,r19,2
    d618:	003fe406 	br	d5ac <__alt_exception_stack_pointer+0xf800d5ac>

0000d61c <__mcmp>:
    d61c:	20800417 	ldw	r2,16(r4)
    d620:	28c00417 	ldw	r3,16(r5)
    d624:	10c5c83a 	sub	r2,r2,r3
    d628:	1000111e 	bne	r2,zero,d670 <__mcmp+0x54>
    d62c:	18c7883a 	add	r3,r3,r3
    d630:	18c7883a 	add	r3,r3,r3
    d634:	21000504 	addi	r4,r4,20
    d638:	29400504 	addi	r5,r5,20
    d63c:	20c5883a 	add	r2,r4,r3
    d640:	28cb883a 	add	r5,r5,r3
    d644:	00000106 	br	d64c <__mcmp+0x30>
    d648:	20800a2e 	bgeu	r4,r2,d674 <__mcmp+0x58>
    d64c:	10bfff04 	addi	r2,r2,-4
    d650:	297fff04 	addi	r5,r5,-4
    d654:	11800017 	ldw	r6,0(r2)
    d658:	28c00017 	ldw	r3,0(r5)
    d65c:	30fffa26 	beq	r6,r3,d648 <__alt_exception_stack_pointer+0xf800d648>
    d660:	30c00236 	bltu	r6,r3,d66c <__mcmp+0x50>
    d664:	00800044 	movi	r2,1
    d668:	f800283a 	ret
    d66c:	00bfffc4 	movi	r2,-1
    d670:	f800283a 	ret
    d674:	0005883a 	mov	r2,zero
    d678:	f800283a 	ret

0000d67c <__mdiff>:
    d67c:	28c00417 	ldw	r3,16(r5)
    d680:	30800417 	ldw	r2,16(r6)
    d684:	defffa04 	addi	sp,sp,-24
    d688:	dcc00315 	stw	r19,12(sp)
    d68c:	dc800215 	stw	r18,8(sp)
    d690:	dfc00515 	stw	ra,20(sp)
    d694:	dd000415 	stw	r20,16(sp)
    d698:	dc400115 	stw	r17,4(sp)
    d69c:	dc000015 	stw	r16,0(sp)
    d6a0:	1887c83a 	sub	r3,r3,r2
    d6a4:	2825883a 	mov	r18,r5
    d6a8:	3027883a 	mov	r19,r6
    d6ac:	1800141e 	bne	r3,zero,d700 <__mdiff+0x84>
    d6b0:	1085883a 	add	r2,r2,r2
    d6b4:	1085883a 	add	r2,r2,r2
    d6b8:	2a000504 	addi	r8,r5,20
    d6bc:	34000504 	addi	r16,r6,20
    d6c0:	4087883a 	add	r3,r8,r2
    d6c4:	8085883a 	add	r2,r16,r2
    d6c8:	00000106 	br	d6d0 <__mdiff+0x54>
    d6cc:	40c0592e 	bgeu	r8,r3,d834 <__mdiff+0x1b8>
    d6d0:	18ffff04 	addi	r3,r3,-4
    d6d4:	10bfff04 	addi	r2,r2,-4
    d6d8:	19c00017 	ldw	r7,0(r3)
    d6dc:	11400017 	ldw	r5,0(r2)
    d6e0:	397ffa26 	beq	r7,r5,d6cc <__alt_exception_stack_pointer+0xf800d6cc>
    d6e4:	3940592e 	bgeu	r7,r5,d84c <__mdiff+0x1d0>
    d6e8:	9005883a 	mov	r2,r18
    d6ec:	4023883a 	mov	r17,r8
    d6f0:	9825883a 	mov	r18,r19
    d6f4:	05000044 	movi	r20,1
    d6f8:	1027883a 	mov	r19,r2
    d6fc:	00000406 	br	d710 <__mdiff+0x94>
    d700:	18005616 	blt	r3,zero,d85c <__mdiff+0x1e0>
    d704:	34400504 	addi	r17,r6,20
    d708:	2c000504 	addi	r16,r5,20
    d70c:	0029883a 	mov	r20,zero
    d710:	91400117 	ldw	r5,4(r18)
    d714:	000cc980 	call	cc98 <_Balloc>
    d718:	92400417 	ldw	r9,16(r18)
    d71c:	9b000417 	ldw	r12,16(r19)
    d720:	12c00504 	addi	r11,r2,20
    d724:	4a51883a 	add	r8,r9,r9
    d728:	6319883a 	add	r12,r12,r12
    d72c:	4211883a 	add	r8,r8,r8
    d730:	6319883a 	add	r12,r12,r12
    d734:	15000315 	stw	r20,12(r2)
    d738:	8211883a 	add	r8,r16,r8
    d73c:	8b19883a 	add	r12,r17,r12
    d740:	0007883a 	mov	r3,zero
    d744:	81400017 	ldw	r5,0(r16)
    d748:	89c00017 	ldw	r7,0(r17)
    d74c:	59800104 	addi	r6,r11,4
    d750:	293fffcc 	andi	r4,r5,65535
    d754:	20c7883a 	add	r3,r4,r3
    d758:	393fffcc 	andi	r4,r7,65535
    d75c:	1909c83a 	sub	r4,r3,r4
    d760:	280ad43a 	srli	r5,r5,16
    d764:	380ed43a 	srli	r7,r7,16
    d768:	2007d43a 	srai	r3,r4,16
    d76c:	213fffcc 	andi	r4,r4,65535
    d770:	29cbc83a 	sub	r5,r5,r7
    d774:	28c7883a 	add	r3,r5,r3
    d778:	180a943a 	slli	r5,r3,16
    d77c:	8c400104 	addi	r17,r17,4
    d780:	84000104 	addi	r16,r16,4
    d784:	2908b03a 	or	r4,r5,r4
    d788:	59000015 	stw	r4,0(r11)
    d78c:	1807d43a 	srai	r3,r3,16
    d790:	3015883a 	mov	r10,r6
    d794:	3017883a 	mov	r11,r6
    d798:	8b3fea36 	bltu	r17,r12,d744 <__alt_exception_stack_pointer+0xf800d744>
    d79c:	8200162e 	bgeu	r16,r8,d7f8 <__mdiff+0x17c>
    d7a0:	8017883a 	mov	r11,r16
    d7a4:	59400017 	ldw	r5,0(r11)
    d7a8:	31800104 	addi	r6,r6,4
    d7ac:	5ac00104 	addi	r11,r11,4
    d7b0:	293fffcc 	andi	r4,r5,65535
    d7b4:	20c7883a 	add	r3,r4,r3
    d7b8:	280ed43a 	srli	r7,r5,16
    d7bc:	180bd43a 	srai	r5,r3,16
    d7c0:	193fffcc 	andi	r4,r3,65535
    d7c4:	3947883a 	add	r3,r7,r5
    d7c8:	180a943a 	slli	r5,r3,16
    d7cc:	1807d43a 	srai	r3,r3,16
    d7d0:	2908b03a 	or	r4,r5,r4
    d7d4:	313fff15 	stw	r4,-4(r6)
    d7d8:	5a3ff236 	bltu	r11,r8,d7a4 <__alt_exception_stack_pointer+0xf800d7a4>
    d7dc:	0406303a 	nor	r3,zero,r16
    d7e0:	1a07883a 	add	r3,r3,r8
    d7e4:	1806d0ba 	srli	r3,r3,2
    d7e8:	18c00044 	addi	r3,r3,1
    d7ec:	18c7883a 	add	r3,r3,r3
    d7f0:	18c7883a 	add	r3,r3,r3
    d7f4:	50d5883a 	add	r10,r10,r3
    d7f8:	50ffff04 	addi	r3,r10,-4
    d7fc:	2000041e 	bne	r4,zero,d810 <__mdiff+0x194>
    d800:	18ffff04 	addi	r3,r3,-4
    d804:	19000017 	ldw	r4,0(r3)
    d808:	4a7fffc4 	addi	r9,r9,-1
    d80c:	203ffc26 	beq	r4,zero,d800 <__alt_exception_stack_pointer+0xf800d800>
    d810:	12400415 	stw	r9,16(r2)
    d814:	dfc00517 	ldw	ra,20(sp)
    d818:	dd000417 	ldw	r20,16(sp)
    d81c:	dcc00317 	ldw	r19,12(sp)
    d820:	dc800217 	ldw	r18,8(sp)
    d824:	dc400117 	ldw	r17,4(sp)
    d828:	dc000017 	ldw	r16,0(sp)
    d82c:	dec00604 	addi	sp,sp,24
    d830:	f800283a 	ret
    d834:	000b883a 	mov	r5,zero
    d838:	000cc980 	call	cc98 <_Balloc>
    d83c:	00c00044 	movi	r3,1
    d840:	10c00415 	stw	r3,16(r2)
    d844:	10000515 	stw	zero,20(r2)
    d848:	003ff206 	br	d814 <__alt_exception_stack_pointer+0xf800d814>
    d84c:	8023883a 	mov	r17,r16
    d850:	0029883a 	mov	r20,zero
    d854:	4021883a 	mov	r16,r8
    d858:	003fad06 	br	d710 <__alt_exception_stack_pointer+0xf800d710>
    d85c:	9005883a 	mov	r2,r18
    d860:	94400504 	addi	r17,r18,20
    d864:	9c000504 	addi	r16,r19,20
    d868:	9825883a 	mov	r18,r19
    d86c:	05000044 	movi	r20,1
    d870:	1027883a 	mov	r19,r2
    d874:	003fa606 	br	d710 <__alt_exception_stack_pointer+0xf800d710>

0000d878 <__ulp>:
    d878:	295ffc2c 	andhi	r5,r5,32752
    d87c:	00bf3034 	movhi	r2,64704
    d880:	2887883a 	add	r3,r5,r2
    d884:	00c0020e 	bge	zero,r3,d890 <__ulp+0x18>
    d888:	0005883a 	mov	r2,zero
    d88c:	f800283a 	ret
    d890:	00c7c83a 	sub	r3,zero,r3
    d894:	1807d53a 	srai	r3,r3,20
    d898:	008004c4 	movi	r2,19
    d89c:	10c00b0e 	bge	r2,r3,d8cc <__ulp+0x54>
    d8a0:	18bffb04 	addi	r2,r3,-20
    d8a4:	01000784 	movi	r4,30
    d8a8:	0007883a 	mov	r3,zero
    d8ac:	20800516 	blt	r4,r2,d8c4 <__ulp+0x4c>
    d8b0:	010007c4 	movi	r4,31
    d8b4:	2089c83a 	sub	r4,r4,r2
    d8b8:	00800044 	movi	r2,1
    d8bc:	1104983a 	sll	r2,r2,r4
    d8c0:	f800283a 	ret
    d8c4:	00800044 	movi	r2,1
    d8c8:	f800283a 	ret
    d8cc:	01400234 	movhi	r5,8
    d8d0:	28c7d83a 	sra	r3,r5,r3
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	f800283a 	ret

0000d8dc <__b2d>:
    d8dc:	defffa04 	addi	sp,sp,-24
    d8e0:	dc000015 	stw	r16,0(sp)
    d8e4:	24000417 	ldw	r16,16(r4)
    d8e8:	dc400115 	stw	r17,4(sp)
    d8ec:	24400504 	addi	r17,r4,20
    d8f0:	8421883a 	add	r16,r16,r16
    d8f4:	8421883a 	add	r16,r16,r16
    d8f8:	8c21883a 	add	r16,r17,r16
    d8fc:	dc800215 	stw	r18,8(sp)
    d900:	84bfff17 	ldw	r18,-4(r16)
    d904:	dd000415 	stw	r20,16(sp)
    d908:	dcc00315 	stw	r19,12(sp)
    d90c:	9009883a 	mov	r4,r18
    d910:	2829883a 	mov	r20,r5
    d914:	dfc00515 	stw	ra,20(sp)
    d918:	000cfb40 	call	cfb4 <__hi0bits>
    d91c:	00c00804 	movi	r3,32
    d920:	1889c83a 	sub	r4,r3,r2
    d924:	a1000015 	stw	r4,0(r20)
    d928:	01000284 	movi	r4,10
    d92c:	84ffff04 	addi	r19,r16,-4
    d930:	20801216 	blt	r4,r2,d97c <__b2d+0xa0>
    d934:	018002c4 	movi	r6,11
    d938:	308dc83a 	sub	r6,r6,r2
    d93c:	9186d83a 	srl	r3,r18,r6
    d940:	18cffc34 	orhi	r3,r3,16368
    d944:	8cc0212e 	bgeu	r17,r19,d9cc <__b2d+0xf0>
    d948:	813ffe17 	ldw	r4,-8(r16)
    d94c:	218cd83a 	srl	r6,r4,r6
    d950:	10800544 	addi	r2,r2,21
    d954:	9084983a 	sll	r2,r18,r2
    d958:	1184b03a 	or	r2,r2,r6
    d95c:	dfc00517 	ldw	ra,20(sp)
    d960:	dd000417 	ldw	r20,16(sp)
    d964:	dcc00317 	ldw	r19,12(sp)
    d968:	dc800217 	ldw	r18,8(sp)
    d96c:	dc400117 	ldw	r17,4(sp)
    d970:	dc000017 	ldw	r16,0(sp)
    d974:	dec00604 	addi	sp,sp,24
    d978:	f800283a 	ret
    d97c:	8cc00f2e 	bgeu	r17,r19,d9bc <__b2d+0xe0>
    d980:	117ffd44 	addi	r5,r2,-11
    d984:	80bffe17 	ldw	r2,-8(r16)
    d988:	28000e26 	beq	r5,zero,d9c4 <__b2d+0xe8>
    d98c:	1949c83a 	sub	r4,r3,r5
    d990:	9164983a 	sll	r18,r18,r5
    d994:	1106d83a 	srl	r3,r2,r4
    d998:	81bffe04 	addi	r6,r16,-8
    d99c:	948ffc34 	orhi	r18,r18,16368
    d9a0:	90c6b03a 	or	r3,r18,r3
    d9a4:	89800e2e 	bgeu	r17,r6,d9e0 <__b2d+0x104>
    d9a8:	81bffd17 	ldw	r6,-12(r16)
    d9ac:	1144983a 	sll	r2,r2,r5
    d9b0:	310ad83a 	srl	r5,r6,r4
    d9b4:	2884b03a 	or	r2,r5,r2
    d9b8:	003fe806 	br	d95c <__alt_exception_stack_pointer+0xf800d95c>
    d9bc:	10bffd44 	addi	r2,r2,-11
    d9c0:	1000041e 	bne	r2,zero,d9d4 <__b2d+0xf8>
    d9c4:	90cffc34 	orhi	r3,r18,16368
    d9c8:	003fe406 	br	d95c <__alt_exception_stack_pointer+0xf800d95c>
    d9cc:	000d883a 	mov	r6,zero
    d9d0:	003fdf06 	br	d950 <__alt_exception_stack_pointer+0xf800d950>
    d9d4:	90a4983a 	sll	r18,r18,r2
    d9d8:	0005883a 	mov	r2,zero
    d9dc:	003ff906 	br	d9c4 <__alt_exception_stack_pointer+0xf800d9c4>
    d9e0:	1144983a 	sll	r2,r2,r5
    d9e4:	003fdd06 	br	d95c <__alt_exception_stack_pointer+0xf800d95c>

0000d9e8 <__d2b>:
    d9e8:	defff804 	addi	sp,sp,-32
    d9ec:	dc000215 	stw	r16,8(sp)
    d9f0:	3021883a 	mov	r16,r6
    d9f4:	dc400315 	stw	r17,12(sp)
    d9f8:	8022907a 	slli	r17,r16,1
    d9fc:	dd000615 	stw	r20,24(sp)
    da00:	2829883a 	mov	r20,r5
    da04:	01400044 	movi	r5,1
    da08:	dcc00515 	stw	r19,20(sp)
    da0c:	dc800415 	stw	r18,16(sp)
    da10:	dfc00715 	stw	ra,28(sp)
    da14:	3825883a 	mov	r18,r7
    da18:	8822d57a 	srli	r17,r17,21
    da1c:	000cc980 	call	cc98 <_Balloc>
    da20:	1027883a 	mov	r19,r2
    da24:	00800434 	movhi	r2,16
    da28:	10bfffc4 	addi	r2,r2,-1
    da2c:	808c703a 	and	r6,r16,r2
    da30:	88000126 	beq	r17,zero,da38 <__d2b+0x50>
    da34:	31800434 	orhi	r6,r6,16
    da38:	d9800015 	stw	r6,0(sp)
    da3c:	a0002426 	beq	r20,zero,dad0 <__d2b+0xe8>
    da40:	d9000104 	addi	r4,sp,4
    da44:	dd000115 	stw	r20,4(sp)
    da48:	000d01c0 	call	d01c <__lo0bits>
    da4c:	d8c00017 	ldw	r3,0(sp)
    da50:	10002f1e 	bne	r2,zero,db10 <__d2b+0x128>
    da54:	d9000117 	ldw	r4,4(sp)
    da58:	99000515 	stw	r4,20(r19)
    da5c:	1821003a 	cmpeq	r16,r3,zero
    da60:	01000084 	movi	r4,2
    da64:	2421c83a 	sub	r16,r4,r16
    da68:	98c00615 	stw	r3,24(r19)
    da6c:	9c000415 	stw	r16,16(r19)
    da70:	88001f1e 	bne	r17,zero,daf0 <__d2b+0x108>
    da74:	10bef384 	addi	r2,r2,-1074
    da78:	90800015 	stw	r2,0(r18)
    da7c:	00900034 	movhi	r2,16384
    da80:	10bfffc4 	addi	r2,r2,-1
    da84:	8085883a 	add	r2,r16,r2
    da88:	1085883a 	add	r2,r2,r2
    da8c:	1085883a 	add	r2,r2,r2
    da90:	9885883a 	add	r2,r19,r2
    da94:	11000517 	ldw	r4,20(r2)
    da98:	8020917a 	slli	r16,r16,5
    da9c:	000cfb40 	call	cfb4 <__hi0bits>
    daa0:	d8c00817 	ldw	r3,32(sp)
    daa4:	8085c83a 	sub	r2,r16,r2
    daa8:	18800015 	stw	r2,0(r3)
    daac:	9805883a 	mov	r2,r19
    dab0:	dfc00717 	ldw	ra,28(sp)
    dab4:	dd000617 	ldw	r20,24(sp)
    dab8:	dcc00517 	ldw	r19,20(sp)
    dabc:	dc800417 	ldw	r18,16(sp)
    dac0:	dc400317 	ldw	r17,12(sp)
    dac4:	dc000217 	ldw	r16,8(sp)
    dac8:	dec00804 	addi	sp,sp,32
    dacc:	f800283a 	ret
    dad0:	d809883a 	mov	r4,sp
    dad4:	000d01c0 	call	d01c <__lo0bits>
    dad8:	d8c00017 	ldw	r3,0(sp)
    dadc:	04000044 	movi	r16,1
    dae0:	9c000415 	stw	r16,16(r19)
    dae4:	98c00515 	stw	r3,20(r19)
    dae8:	10800804 	addi	r2,r2,32
    daec:	883fe126 	beq	r17,zero,da74 <__alt_exception_stack_pointer+0xf800da74>
    daf0:	00c00d44 	movi	r3,53
    daf4:	8c7ef344 	addi	r17,r17,-1075
    daf8:	88a3883a 	add	r17,r17,r2
    dafc:	1885c83a 	sub	r2,r3,r2
    db00:	d8c00817 	ldw	r3,32(sp)
    db04:	94400015 	stw	r17,0(r18)
    db08:	18800015 	stw	r2,0(r3)
    db0c:	003fe706 	br	daac <__alt_exception_stack_pointer+0xf800daac>
    db10:	01000804 	movi	r4,32
    db14:	2089c83a 	sub	r4,r4,r2
    db18:	1908983a 	sll	r4,r3,r4
    db1c:	d9400117 	ldw	r5,4(sp)
    db20:	1886d83a 	srl	r3,r3,r2
    db24:	2148b03a 	or	r4,r4,r5
    db28:	99000515 	stw	r4,20(r19)
    db2c:	d8c00015 	stw	r3,0(sp)
    db30:	003fca06 	br	da5c <__alt_exception_stack_pointer+0xf800da5c>

0000db34 <__ratio>:
    db34:	defff904 	addi	sp,sp,-28
    db38:	dc400315 	stw	r17,12(sp)
    db3c:	2823883a 	mov	r17,r5
    db40:	d9400104 	addi	r5,sp,4
    db44:	dfc00615 	stw	ra,24(sp)
    db48:	dcc00515 	stw	r19,20(sp)
    db4c:	dc800415 	stw	r18,16(sp)
    db50:	2027883a 	mov	r19,r4
    db54:	dc000215 	stw	r16,8(sp)
    db58:	000d8dc0 	call	d8dc <__b2d>
    db5c:	d80b883a 	mov	r5,sp
    db60:	8809883a 	mov	r4,r17
    db64:	1025883a 	mov	r18,r2
    db68:	1821883a 	mov	r16,r3
    db6c:	000d8dc0 	call	d8dc <__b2d>
    db70:	8a000417 	ldw	r8,16(r17)
    db74:	99000417 	ldw	r4,16(r19)
    db78:	d9400117 	ldw	r5,4(sp)
    db7c:	2209c83a 	sub	r4,r4,r8
    db80:	2010917a 	slli	r8,r4,5
    db84:	d9000017 	ldw	r4,0(sp)
    db88:	2909c83a 	sub	r4,r5,r4
    db8c:	4109883a 	add	r4,r8,r4
    db90:	01000e0e 	bge	zero,r4,dbcc <__ratio+0x98>
    db94:	2008953a 	slli	r4,r4,20
    db98:	2421883a 	add	r16,r4,r16
    db9c:	100d883a 	mov	r6,r2
    dba0:	180f883a 	mov	r7,r3
    dba4:	9009883a 	mov	r4,r18
    dba8:	800b883a 	mov	r5,r16
    dbac:	00111440 	call	11144 <__divdf3>
    dbb0:	dfc00617 	ldw	ra,24(sp)
    dbb4:	dcc00517 	ldw	r19,20(sp)
    dbb8:	dc800417 	ldw	r18,16(sp)
    dbbc:	dc400317 	ldw	r17,12(sp)
    dbc0:	dc000217 	ldw	r16,8(sp)
    dbc4:	dec00704 	addi	sp,sp,28
    dbc8:	f800283a 	ret
    dbcc:	2008953a 	slli	r4,r4,20
    dbd0:	1907c83a 	sub	r3,r3,r4
    dbd4:	003ff106 	br	db9c <__alt_exception_stack_pointer+0xf800db9c>

0000dbd8 <_mprec_log10>:
    dbd8:	defffe04 	addi	sp,sp,-8
    dbdc:	dc000015 	stw	r16,0(sp)
    dbe0:	dfc00115 	stw	ra,4(sp)
    dbe4:	008005c4 	movi	r2,23
    dbe8:	2021883a 	mov	r16,r4
    dbec:	11000d0e 	bge	r2,r4,dc24 <_mprec_log10+0x4c>
    dbf0:	0005883a 	mov	r2,zero
    dbf4:	00cffc34 	movhi	r3,16368
    dbf8:	843fffc4 	addi	r16,r16,-1
    dbfc:	000d883a 	mov	r6,zero
    dc00:	01d00934 	movhi	r7,16420
    dc04:	1009883a 	mov	r4,r2
    dc08:	180b883a 	mov	r5,r3
    dc0c:	00058e00 	call	58e0 <__muldf3>
    dc10:	803ff91e 	bne	r16,zero,dbf8 <__alt_exception_stack_pointer+0xf800dbf8>
    dc14:	dfc00117 	ldw	ra,4(sp)
    dc18:	dc000017 	ldw	r16,0(sp)
    dc1c:	dec00204 	addi	sp,sp,8
    dc20:	f800283a 	ret
    dc24:	202090fa 	slli	r16,r4,3
    dc28:	00800074 	movhi	r2,1
    dc2c:	10954c04 	addi	r2,r2,21808
    dc30:	1421883a 	add	r16,r2,r16
    dc34:	80800017 	ldw	r2,0(r16)
    dc38:	80c00117 	ldw	r3,4(r16)
    dc3c:	dfc00117 	ldw	ra,4(sp)
    dc40:	dc000017 	ldw	r16,0(sp)
    dc44:	dec00204 	addi	sp,sp,8
    dc48:	f800283a 	ret

0000dc4c <__copybits>:
    dc4c:	297fffc4 	addi	r5,r5,-1
    dc50:	280fd17a 	srai	r7,r5,5
    dc54:	30c00417 	ldw	r3,16(r6)
    dc58:	30800504 	addi	r2,r6,20
    dc5c:	39c00044 	addi	r7,r7,1
    dc60:	18c7883a 	add	r3,r3,r3
    dc64:	39cf883a 	add	r7,r7,r7
    dc68:	18c7883a 	add	r3,r3,r3
    dc6c:	39cf883a 	add	r7,r7,r7
    dc70:	10c7883a 	add	r3,r2,r3
    dc74:	21cf883a 	add	r7,r4,r7
    dc78:	10c00d2e 	bgeu	r2,r3,dcb0 <__copybits+0x64>
    dc7c:	200b883a 	mov	r5,r4
    dc80:	12000017 	ldw	r8,0(r2)
    dc84:	29400104 	addi	r5,r5,4
    dc88:	10800104 	addi	r2,r2,4
    dc8c:	2a3fff15 	stw	r8,-4(r5)
    dc90:	10fffb36 	bltu	r2,r3,dc80 <__alt_exception_stack_pointer+0xf800dc80>
    dc94:	1985c83a 	sub	r2,r3,r6
    dc98:	10bffac4 	addi	r2,r2,-21
    dc9c:	1004d0ba 	srli	r2,r2,2
    dca0:	10800044 	addi	r2,r2,1
    dca4:	1085883a 	add	r2,r2,r2
    dca8:	1085883a 	add	r2,r2,r2
    dcac:	2089883a 	add	r4,r4,r2
    dcb0:	21c0032e 	bgeu	r4,r7,dcc0 <__copybits+0x74>
    dcb4:	20000015 	stw	zero,0(r4)
    dcb8:	21000104 	addi	r4,r4,4
    dcbc:	21fffd36 	bltu	r4,r7,dcb4 <__alt_exception_stack_pointer+0xf800dcb4>
    dcc0:	f800283a 	ret

0000dcc4 <__any_on>:
    dcc4:	20c00417 	ldw	r3,16(r4)
    dcc8:	2805d17a 	srai	r2,r5,5
    dccc:	21000504 	addi	r4,r4,20
    dcd0:	18800d0e 	bge	r3,r2,dd08 <__any_on+0x44>
    dcd4:	18c7883a 	add	r3,r3,r3
    dcd8:	18c7883a 	add	r3,r3,r3
    dcdc:	20c7883a 	add	r3,r4,r3
    dce0:	20c0192e 	bgeu	r4,r3,dd48 <__any_on+0x84>
    dce4:	18bfff17 	ldw	r2,-4(r3)
    dce8:	18ffff04 	addi	r3,r3,-4
    dcec:	1000041e 	bne	r2,zero,dd00 <__any_on+0x3c>
    dcf0:	20c0142e 	bgeu	r4,r3,dd44 <__any_on+0x80>
    dcf4:	18ffff04 	addi	r3,r3,-4
    dcf8:	19400017 	ldw	r5,0(r3)
    dcfc:	283ffc26 	beq	r5,zero,dcf0 <__alt_exception_stack_pointer+0xf800dcf0>
    dd00:	00800044 	movi	r2,1
    dd04:	f800283a 	ret
    dd08:	10c00a0e 	bge	r2,r3,dd34 <__any_on+0x70>
    dd0c:	1085883a 	add	r2,r2,r2
    dd10:	1085883a 	add	r2,r2,r2
    dd14:	294007cc 	andi	r5,r5,31
    dd18:	2087883a 	add	r3,r4,r2
    dd1c:	283ff026 	beq	r5,zero,dce0 <__alt_exception_stack_pointer+0xf800dce0>
    dd20:	19800017 	ldw	r6,0(r3)
    dd24:	3144d83a 	srl	r2,r6,r5
    dd28:	114a983a 	sll	r5,r2,r5
    dd2c:	317ff41e 	bne	r6,r5,dd00 <__alt_exception_stack_pointer+0xf800dd00>
    dd30:	003feb06 	br	dce0 <__alt_exception_stack_pointer+0xf800dce0>
    dd34:	1085883a 	add	r2,r2,r2
    dd38:	1085883a 	add	r2,r2,r2
    dd3c:	2087883a 	add	r3,r4,r2
    dd40:	003fe706 	br	dce0 <__alt_exception_stack_pointer+0xf800dce0>
    dd44:	f800283a 	ret
    dd48:	0005883a 	mov	r2,zero
    dd4c:	f800283a 	ret

0000dd50 <_realloc_r>:
    dd50:	defff604 	addi	sp,sp,-40
    dd54:	dc800215 	stw	r18,8(sp)
    dd58:	dfc00915 	stw	ra,36(sp)
    dd5c:	df000815 	stw	fp,32(sp)
    dd60:	ddc00715 	stw	r23,28(sp)
    dd64:	dd800615 	stw	r22,24(sp)
    dd68:	dd400515 	stw	r21,20(sp)
    dd6c:	dd000415 	stw	r20,16(sp)
    dd70:	dcc00315 	stw	r19,12(sp)
    dd74:	dc400115 	stw	r17,4(sp)
    dd78:	dc000015 	stw	r16,0(sp)
    dd7c:	3025883a 	mov	r18,r6
    dd80:	2800b726 	beq	r5,zero,e060 <_realloc_r+0x310>
    dd84:	282b883a 	mov	r21,r5
    dd88:	2029883a 	mov	r20,r4
    dd8c:	001224c0 	call	1224c <__malloc_lock>
    dd90:	a8bfff17 	ldw	r2,-4(r21)
    dd94:	043fff04 	movi	r16,-4
    dd98:	90c002c4 	addi	r3,r18,11
    dd9c:	01000584 	movi	r4,22
    dda0:	acfffe04 	addi	r19,r21,-8
    dda4:	1420703a 	and	r16,r2,r16
    dda8:	20c0332e 	bgeu	r4,r3,de78 <_realloc_r+0x128>
    ddac:	047ffe04 	movi	r17,-8
    ddb0:	1c62703a 	and	r17,r3,r17
    ddb4:	8807883a 	mov	r3,r17
    ddb8:	88005816 	blt	r17,zero,df1c <_realloc_r+0x1cc>
    ddbc:	8c805736 	bltu	r17,r18,df1c <_realloc_r+0x1cc>
    ddc0:	80c0300e 	bge	r16,r3,de84 <_realloc_r+0x134>
    ddc4:	07000074 	movhi	fp,1
    ddc8:	e716a804 	addi	fp,fp,23200
    ddcc:	e1c00217 	ldw	r7,8(fp)
    ddd0:	9c09883a 	add	r4,r19,r16
    ddd4:	22000117 	ldw	r8,4(r4)
    ddd8:	21c06326 	beq	r4,r7,df68 <_realloc_r+0x218>
    dddc:	017fff84 	movi	r5,-2
    dde0:	414a703a 	and	r5,r8,r5
    dde4:	214b883a 	add	r5,r4,r5
    dde8:	29800117 	ldw	r6,4(r5)
    ddec:	3180004c 	andi	r6,r6,1
    ddf0:	30003f26 	beq	r6,zero,def0 <_realloc_r+0x1a0>
    ddf4:	1080004c 	andi	r2,r2,1
    ddf8:	10008326 	beq	r2,zero,e008 <_realloc_r+0x2b8>
    ddfc:	900b883a 	mov	r5,r18
    de00:	a009883a 	mov	r4,r20
    de04:	0006c7c0 	call	6c7c <_malloc_r>
    de08:	1025883a 	mov	r18,r2
    de0c:	10011e26 	beq	r2,zero,e288 <_realloc_r+0x538>
    de10:	a93fff17 	ldw	r4,-4(r21)
    de14:	10fffe04 	addi	r3,r2,-8
    de18:	00bfff84 	movi	r2,-2
    de1c:	2084703a 	and	r2,r4,r2
    de20:	9885883a 	add	r2,r19,r2
    de24:	1880ee26 	beq	r3,r2,e1e0 <_realloc_r+0x490>
    de28:	81bfff04 	addi	r6,r16,-4
    de2c:	00800904 	movi	r2,36
    de30:	1180b836 	bltu	r2,r6,e114 <_realloc_r+0x3c4>
    de34:	00c004c4 	movi	r3,19
    de38:	19809636 	bltu	r3,r6,e094 <_realloc_r+0x344>
    de3c:	9005883a 	mov	r2,r18
    de40:	a807883a 	mov	r3,r21
    de44:	19000017 	ldw	r4,0(r3)
    de48:	11000015 	stw	r4,0(r2)
    de4c:	19000117 	ldw	r4,4(r3)
    de50:	11000115 	stw	r4,4(r2)
    de54:	18c00217 	ldw	r3,8(r3)
    de58:	10c00215 	stw	r3,8(r2)
    de5c:	a80b883a 	mov	r5,r21
    de60:	a009883a 	mov	r4,r20
    de64:	000bd380 	call	bd38 <_free_r>
    de68:	a009883a 	mov	r4,r20
    de6c:	00122700 	call	12270 <__malloc_unlock>
    de70:	9005883a 	mov	r2,r18
    de74:	00001206 	br	dec0 <_realloc_r+0x170>
    de78:	00c00404 	movi	r3,16
    de7c:	1823883a 	mov	r17,r3
    de80:	003fce06 	br	ddbc <__alt_exception_stack_pointer+0xf800ddbc>
    de84:	a825883a 	mov	r18,r21
    de88:	8445c83a 	sub	r2,r16,r17
    de8c:	00c003c4 	movi	r3,15
    de90:	18802636 	bltu	r3,r2,df2c <_realloc_r+0x1dc>
    de94:	99800117 	ldw	r6,4(r19)
    de98:	9c07883a 	add	r3,r19,r16
    de9c:	3180004c 	andi	r6,r6,1
    dea0:	3420b03a 	or	r16,r6,r16
    dea4:	9c000115 	stw	r16,4(r19)
    dea8:	18800117 	ldw	r2,4(r3)
    deac:	10800054 	ori	r2,r2,1
    deb0:	18800115 	stw	r2,4(r3)
    deb4:	a009883a 	mov	r4,r20
    deb8:	00122700 	call	12270 <__malloc_unlock>
    debc:	9005883a 	mov	r2,r18
    dec0:	dfc00917 	ldw	ra,36(sp)
    dec4:	df000817 	ldw	fp,32(sp)
    dec8:	ddc00717 	ldw	r23,28(sp)
    decc:	dd800617 	ldw	r22,24(sp)
    ded0:	dd400517 	ldw	r21,20(sp)
    ded4:	dd000417 	ldw	r20,16(sp)
    ded8:	dcc00317 	ldw	r19,12(sp)
    dedc:	dc800217 	ldw	r18,8(sp)
    dee0:	dc400117 	ldw	r17,4(sp)
    dee4:	dc000017 	ldw	r16,0(sp)
    dee8:	dec00a04 	addi	sp,sp,40
    deec:	f800283a 	ret
    def0:	017fff04 	movi	r5,-4
    def4:	414a703a 	and	r5,r8,r5
    def8:	814d883a 	add	r6,r16,r5
    defc:	30c01f16 	blt	r6,r3,df7c <_realloc_r+0x22c>
    df00:	20800317 	ldw	r2,12(r4)
    df04:	20c00217 	ldw	r3,8(r4)
    df08:	a825883a 	mov	r18,r21
    df0c:	3021883a 	mov	r16,r6
    df10:	18800315 	stw	r2,12(r3)
    df14:	10c00215 	stw	r3,8(r2)
    df18:	003fdb06 	br	de88 <__alt_exception_stack_pointer+0xf800de88>
    df1c:	00800304 	movi	r2,12
    df20:	a0800015 	stw	r2,0(r20)
    df24:	0005883a 	mov	r2,zero
    df28:	003fe506 	br	dec0 <__alt_exception_stack_pointer+0xf800dec0>
    df2c:	98c00117 	ldw	r3,4(r19)
    df30:	9c4b883a 	add	r5,r19,r17
    df34:	11000054 	ori	r4,r2,1
    df38:	18c0004c 	andi	r3,r3,1
    df3c:	1c62b03a 	or	r17,r3,r17
    df40:	9c400115 	stw	r17,4(r19)
    df44:	29000115 	stw	r4,4(r5)
    df48:	2885883a 	add	r2,r5,r2
    df4c:	10c00117 	ldw	r3,4(r2)
    df50:	29400204 	addi	r5,r5,8
    df54:	a009883a 	mov	r4,r20
    df58:	18c00054 	ori	r3,r3,1
    df5c:	10c00115 	stw	r3,4(r2)
    df60:	000bd380 	call	bd38 <_free_r>
    df64:	003fd306 	br	deb4 <__alt_exception_stack_pointer+0xf800deb4>
    df68:	017fff04 	movi	r5,-4
    df6c:	414a703a 	and	r5,r8,r5
    df70:	89800404 	addi	r6,r17,16
    df74:	8151883a 	add	r8,r16,r5
    df78:	4180590e 	bge	r8,r6,e0e0 <_realloc_r+0x390>
    df7c:	1080004c 	andi	r2,r2,1
    df80:	103f9e1e 	bne	r2,zero,ddfc <__alt_exception_stack_pointer+0xf800ddfc>
    df84:	adbffe17 	ldw	r22,-8(r21)
    df88:	00bfff04 	movi	r2,-4
    df8c:	9dadc83a 	sub	r22,r19,r22
    df90:	b1800117 	ldw	r6,4(r22)
    df94:	3084703a 	and	r2,r6,r2
    df98:	20002026 	beq	r4,zero,e01c <_realloc_r+0x2cc>
    df9c:	80af883a 	add	r23,r16,r2
    dfa0:	b96f883a 	add	r23,r23,r5
    dfa4:	21c05f26 	beq	r4,r7,e124 <_realloc_r+0x3d4>
    dfa8:	b8c01c16 	blt	r23,r3,e01c <_realloc_r+0x2cc>
    dfac:	20800317 	ldw	r2,12(r4)
    dfb0:	20c00217 	ldw	r3,8(r4)
    dfb4:	81bfff04 	addi	r6,r16,-4
    dfb8:	01000904 	movi	r4,36
    dfbc:	18800315 	stw	r2,12(r3)
    dfc0:	10c00215 	stw	r3,8(r2)
    dfc4:	b0c00217 	ldw	r3,8(r22)
    dfc8:	b0800317 	ldw	r2,12(r22)
    dfcc:	b4800204 	addi	r18,r22,8
    dfd0:	18800315 	stw	r2,12(r3)
    dfd4:	10c00215 	stw	r3,8(r2)
    dfd8:	21801b36 	bltu	r4,r6,e048 <_realloc_r+0x2f8>
    dfdc:	008004c4 	movi	r2,19
    dfe0:	1180352e 	bgeu	r2,r6,e0b8 <_realloc_r+0x368>
    dfe4:	a8800017 	ldw	r2,0(r21)
    dfe8:	b0800215 	stw	r2,8(r22)
    dfec:	a8800117 	ldw	r2,4(r21)
    dff0:	b0800315 	stw	r2,12(r22)
    dff4:	008006c4 	movi	r2,27
    dff8:	11807f36 	bltu	r2,r6,e1f8 <_realloc_r+0x4a8>
    dffc:	b0800404 	addi	r2,r22,16
    e000:	ad400204 	addi	r21,r21,8
    e004:	00002d06 	br	e0bc <_realloc_r+0x36c>
    e008:	adbffe17 	ldw	r22,-8(r21)
    e00c:	00bfff04 	movi	r2,-4
    e010:	9dadc83a 	sub	r22,r19,r22
    e014:	b1000117 	ldw	r4,4(r22)
    e018:	2084703a 	and	r2,r4,r2
    e01c:	b03f7726 	beq	r22,zero,ddfc <__alt_exception_stack_pointer+0xf800ddfc>
    e020:	80af883a 	add	r23,r16,r2
    e024:	b8ff7516 	blt	r23,r3,ddfc <__alt_exception_stack_pointer+0xf800ddfc>
    e028:	b0800317 	ldw	r2,12(r22)
    e02c:	b0c00217 	ldw	r3,8(r22)
    e030:	81bfff04 	addi	r6,r16,-4
    e034:	01000904 	movi	r4,36
    e038:	18800315 	stw	r2,12(r3)
    e03c:	10c00215 	stw	r3,8(r2)
    e040:	b4800204 	addi	r18,r22,8
    e044:	21bfe52e 	bgeu	r4,r6,dfdc <__alt_exception_stack_pointer+0xf800dfdc>
    e048:	a80b883a 	mov	r5,r21
    e04c:	9009883a 	mov	r4,r18
    e050:	000ca140 	call	ca14 <memmove>
    e054:	b821883a 	mov	r16,r23
    e058:	b027883a 	mov	r19,r22
    e05c:	003f8a06 	br	de88 <__alt_exception_stack_pointer+0xf800de88>
    e060:	300b883a 	mov	r5,r6
    e064:	dfc00917 	ldw	ra,36(sp)
    e068:	df000817 	ldw	fp,32(sp)
    e06c:	ddc00717 	ldw	r23,28(sp)
    e070:	dd800617 	ldw	r22,24(sp)
    e074:	dd400517 	ldw	r21,20(sp)
    e078:	dd000417 	ldw	r20,16(sp)
    e07c:	dcc00317 	ldw	r19,12(sp)
    e080:	dc800217 	ldw	r18,8(sp)
    e084:	dc400117 	ldw	r17,4(sp)
    e088:	dc000017 	ldw	r16,0(sp)
    e08c:	dec00a04 	addi	sp,sp,40
    e090:	0006c7c1 	jmpi	6c7c <_malloc_r>
    e094:	a8c00017 	ldw	r3,0(r21)
    e098:	90c00015 	stw	r3,0(r18)
    e09c:	a8c00117 	ldw	r3,4(r21)
    e0a0:	90c00115 	stw	r3,4(r18)
    e0a4:	00c006c4 	movi	r3,27
    e0a8:	19804536 	bltu	r3,r6,e1c0 <_realloc_r+0x470>
    e0ac:	90800204 	addi	r2,r18,8
    e0b0:	a8c00204 	addi	r3,r21,8
    e0b4:	003f6306 	br	de44 <__alt_exception_stack_pointer+0xf800de44>
    e0b8:	9005883a 	mov	r2,r18
    e0bc:	a8c00017 	ldw	r3,0(r21)
    e0c0:	b821883a 	mov	r16,r23
    e0c4:	b027883a 	mov	r19,r22
    e0c8:	10c00015 	stw	r3,0(r2)
    e0cc:	a8c00117 	ldw	r3,4(r21)
    e0d0:	10c00115 	stw	r3,4(r2)
    e0d4:	a8c00217 	ldw	r3,8(r21)
    e0d8:	10c00215 	stw	r3,8(r2)
    e0dc:	003f6a06 	br	de88 <__alt_exception_stack_pointer+0xf800de88>
    e0e0:	9c67883a 	add	r19,r19,r17
    e0e4:	4445c83a 	sub	r2,r8,r17
    e0e8:	e4c00215 	stw	r19,8(fp)
    e0ec:	10800054 	ori	r2,r2,1
    e0f0:	98800115 	stw	r2,4(r19)
    e0f4:	a8bfff17 	ldw	r2,-4(r21)
    e0f8:	a009883a 	mov	r4,r20
    e0fc:	1080004c 	andi	r2,r2,1
    e100:	1462b03a 	or	r17,r2,r17
    e104:	ac7fff15 	stw	r17,-4(r21)
    e108:	00122700 	call	12270 <__malloc_unlock>
    e10c:	a805883a 	mov	r2,r21
    e110:	003f6b06 	br	dec0 <__alt_exception_stack_pointer+0xf800dec0>
    e114:	a80b883a 	mov	r5,r21
    e118:	9009883a 	mov	r4,r18
    e11c:	000ca140 	call	ca14 <memmove>
    e120:	003f4e06 	br	de5c <__alt_exception_stack_pointer+0xf800de5c>
    e124:	89000404 	addi	r4,r17,16
    e128:	b93fbc16 	blt	r23,r4,e01c <__alt_exception_stack_pointer+0xf800e01c>
    e12c:	b0800317 	ldw	r2,12(r22)
    e130:	b0c00217 	ldw	r3,8(r22)
    e134:	81bfff04 	addi	r6,r16,-4
    e138:	01000904 	movi	r4,36
    e13c:	18800315 	stw	r2,12(r3)
    e140:	10c00215 	stw	r3,8(r2)
    e144:	b4800204 	addi	r18,r22,8
    e148:	21804336 	bltu	r4,r6,e258 <_realloc_r+0x508>
    e14c:	008004c4 	movi	r2,19
    e150:	11803f2e 	bgeu	r2,r6,e250 <_realloc_r+0x500>
    e154:	a8800017 	ldw	r2,0(r21)
    e158:	b0800215 	stw	r2,8(r22)
    e15c:	a8800117 	ldw	r2,4(r21)
    e160:	b0800315 	stw	r2,12(r22)
    e164:	008006c4 	movi	r2,27
    e168:	11803f36 	bltu	r2,r6,e268 <_realloc_r+0x518>
    e16c:	b0800404 	addi	r2,r22,16
    e170:	ad400204 	addi	r21,r21,8
    e174:	a8c00017 	ldw	r3,0(r21)
    e178:	10c00015 	stw	r3,0(r2)
    e17c:	a8c00117 	ldw	r3,4(r21)
    e180:	10c00115 	stw	r3,4(r2)
    e184:	a8c00217 	ldw	r3,8(r21)
    e188:	10c00215 	stw	r3,8(r2)
    e18c:	b447883a 	add	r3,r22,r17
    e190:	bc45c83a 	sub	r2,r23,r17
    e194:	e0c00215 	stw	r3,8(fp)
    e198:	10800054 	ori	r2,r2,1
    e19c:	18800115 	stw	r2,4(r3)
    e1a0:	b0800117 	ldw	r2,4(r22)
    e1a4:	a009883a 	mov	r4,r20
    e1a8:	1080004c 	andi	r2,r2,1
    e1ac:	1462b03a 	or	r17,r2,r17
    e1b0:	b4400115 	stw	r17,4(r22)
    e1b4:	00122700 	call	12270 <__malloc_unlock>
    e1b8:	9005883a 	mov	r2,r18
    e1bc:	003f4006 	br	dec0 <__alt_exception_stack_pointer+0xf800dec0>
    e1c0:	a8c00217 	ldw	r3,8(r21)
    e1c4:	90c00215 	stw	r3,8(r18)
    e1c8:	a8c00317 	ldw	r3,12(r21)
    e1cc:	90c00315 	stw	r3,12(r18)
    e1d0:	30801126 	beq	r6,r2,e218 <_realloc_r+0x4c8>
    e1d4:	90800404 	addi	r2,r18,16
    e1d8:	a8c00404 	addi	r3,r21,16
    e1dc:	003f1906 	br	de44 <__alt_exception_stack_pointer+0xf800de44>
    e1e0:	90ffff17 	ldw	r3,-4(r18)
    e1e4:	00bfff04 	movi	r2,-4
    e1e8:	a825883a 	mov	r18,r21
    e1ec:	1884703a 	and	r2,r3,r2
    e1f0:	80a1883a 	add	r16,r16,r2
    e1f4:	003f2406 	br	de88 <__alt_exception_stack_pointer+0xf800de88>
    e1f8:	a8800217 	ldw	r2,8(r21)
    e1fc:	b0800415 	stw	r2,16(r22)
    e200:	a8800317 	ldw	r2,12(r21)
    e204:	b0800515 	stw	r2,20(r22)
    e208:	31000a26 	beq	r6,r4,e234 <_realloc_r+0x4e4>
    e20c:	b0800604 	addi	r2,r22,24
    e210:	ad400404 	addi	r21,r21,16
    e214:	003fa906 	br	e0bc <__alt_exception_stack_pointer+0xf800e0bc>
    e218:	a9000417 	ldw	r4,16(r21)
    e21c:	90800604 	addi	r2,r18,24
    e220:	a8c00604 	addi	r3,r21,24
    e224:	91000415 	stw	r4,16(r18)
    e228:	a9000517 	ldw	r4,20(r21)
    e22c:	91000515 	stw	r4,20(r18)
    e230:	003f0406 	br	de44 <__alt_exception_stack_pointer+0xf800de44>
    e234:	a8c00417 	ldw	r3,16(r21)
    e238:	ad400604 	addi	r21,r21,24
    e23c:	b0800804 	addi	r2,r22,32
    e240:	b0c00615 	stw	r3,24(r22)
    e244:	a8ffff17 	ldw	r3,-4(r21)
    e248:	b0c00715 	stw	r3,28(r22)
    e24c:	003f9b06 	br	e0bc <__alt_exception_stack_pointer+0xf800e0bc>
    e250:	9005883a 	mov	r2,r18
    e254:	003fc706 	br	e174 <__alt_exception_stack_pointer+0xf800e174>
    e258:	a80b883a 	mov	r5,r21
    e25c:	9009883a 	mov	r4,r18
    e260:	000ca140 	call	ca14 <memmove>
    e264:	003fc906 	br	e18c <__alt_exception_stack_pointer+0xf800e18c>
    e268:	a8800217 	ldw	r2,8(r21)
    e26c:	b0800415 	stw	r2,16(r22)
    e270:	a8800317 	ldw	r2,12(r21)
    e274:	b0800515 	stw	r2,20(r22)
    e278:	31000726 	beq	r6,r4,e298 <_realloc_r+0x548>
    e27c:	b0800604 	addi	r2,r22,24
    e280:	ad400404 	addi	r21,r21,16
    e284:	003fbb06 	br	e174 <__alt_exception_stack_pointer+0xf800e174>
    e288:	a009883a 	mov	r4,r20
    e28c:	00122700 	call	12270 <__malloc_unlock>
    e290:	0005883a 	mov	r2,zero
    e294:	003f0a06 	br	dec0 <__alt_exception_stack_pointer+0xf800dec0>
    e298:	a8c00417 	ldw	r3,16(r21)
    e29c:	ad400604 	addi	r21,r21,24
    e2a0:	b0800804 	addi	r2,r22,32
    e2a4:	b0c00615 	stw	r3,24(r22)
    e2a8:	a8ffff17 	ldw	r3,-4(r21)
    e2ac:	b0c00715 	stw	r3,28(r22)
    e2b0:	003fb006 	br	e174 <__alt_exception_stack_pointer+0xf800e174>

0000e2b4 <__fpclassifyd>:
    e2b4:	00a00034 	movhi	r2,32768
    e2b8:	10bfffc4 	addi	r2,r2,-1
    e2bc:	2884703a 	and	r2,r5,r2
    e2c0:	10000726 	beq	r2,zero,e2e0 <__fpclassifyd+0x2c>
    e2c4:	00fffc34 	movhi	r3,65520
    e2c8:	019ff834 	movhi	r6,32736
    e2cc:	28c7883a 	add	r3,r5,r3
    e2d0:	31bfffc4 	addi	r6,r6,-1
    e2d4:	30c00536 	bltu	r6,r3,e2ec <__fpclassifyd+0x38>
    e2d8:	00800104 	movi	r2,4
    e2dc:	f800283a 	ret
    e2e0:	2000021e 	bne	r4,zero,e2ec <__fpclassifyd+0x38>
    e2e4:	00800084 	movi	r2,2
    e2e8:	f800283a 	ret
    e2ec:	00dffc34 	movhi	r3,32752
    e2f0:	019ff834 	movhi	r6,32736
    e2f4:	28cb883a 	add	r5,r5,r3
    e2f8:	31bfffc4 	addi	r6,r6,-1
    e2fc:	317ff62e 	bgeu	r6,r5,e2d8 <__alt_exception_stack_pointer+0xf800e2d8>
    e300:	01400434 	movhi	r5,16
    e304:	297fffc4 	addi	r5,r5,-1
    e308:	28800236 	bltu	r5,r2,e314 <__fpclassifyd+0x60>
    e30c:	008000c4 	movi	r2,3
    e310:	f800283a 	ret
    e314:	10c00226 	beq	r2,r3,e320 <__fpclassifyd+0x6c>
    e318:	0005883a 	mov	r2,zero
    e31c:	f800283a 	ret
    e320:	2005003a 	cmpeq	r2,r4,zero
    e324:	f800283a 	ret

0000e328 <__sread>:
    e328:	defffe04 	addi	sp,sp,-8
    e32c:	dc000015 	stw	r16,0(sp)
    e330:	2821883a 	mov	r16,r5
    e334:	2940038f 	ldh	r5,14(r5)
    e338:	dfc00115 	stw	ra,4(sp)
    e33c:	00101e40 	call	101e4 <_read_r>
    e340:	10000716 	blt	r2,zero,e360 <__sread+0x38>
    e344:	80c01417 	ldw	r3,80(r16)
    e348:	1887883a 	add	r3,r3,r2
    e34c:	80c01415 	stw	r3,80(r16)
    e350:	dfc00117 	ldw	ra,4(sp)
    e354:	dc000017 	ldw	r16,0(sp)
    e358:	dec00204 	addi	sp,sp,8
    e35c:	f800283a 	ret
    e360:	80c0030b 	ldhu	r3,12(r16)
    e364:	18fbffcc 	andi	r3,r3,61439
    e368:	80c0030d 	sth	r3,12(r16)
    e36c:	dfc00117 	ldw	ra,4(sp)
    e370:	dc000017 	ldw	r16,0(sp)
    e374:	dec00204 	addi	sp,sp,8
    e378:	f800283a 	ret

0000e37c <__seofread>:
    e37c:	0005883a 	mov	r2,zero
    e380:	f800283a 	ret

0000e384 <__swrite>:
    e384:	2880030b 	ldhu	r2,12(r5)
    e388:	defffb04 	addi	sp,sp,-20
    e38c:	dcc00315 	stw	r19,12(sp)
    e390:	dc800215 	stw	r18,8(sp)
    e394:	dc400115 	stw	r17,4(sp)
    e398:	dc000015 	stw	r16,0(sp)
    e39c:	dfc00415 	stw	ra,16(sp)
    e3a0:	10c0400c 	andi	r3,r2,256
    e3a4:	2821883a 	mov	r16,r5
    e3a8:	2023883a 	mov	r17,r4
    e3ac:	3025883a 	mov	r18,r6
    e3b0:	3827883a 	mov	r19,r7
    e3b4:	18000526 	beq	r3,zero,e3cc <__swrite+0x48>
    e3b8:	2940038f 	ldh	r5,14(r5)
    e3bc:	01c00084 	movi	r7,2
    e3c0:	000d883a 	mov	r6,zero
    e3c4:	00101840 	call	10184 <_lseek_r>
    e3c8:	8080030b 	ldhu	r2,12(r16)
    e3cc:	8140038f 	ldh	r5,14(r16)
    e3d0:	10bbffcc 	andi	r2,r2,61439
    e3d4:	980f883a 	mov	r7,r19
    e3d8:	900d883a 	mov	r6,r18
    e3dc:	8809883a 	mov	r4,r17
    e3e0:	8080030d 	sth	r2,12(r16)
    e3e4:	dfc00417 	ldw	ra,16(sp)
    e3e8:	dcc00317 	ldw	r19,12(sp)
    e3ec:	dc800217 	ldw	r18,8(sp)
    e3f0:	dc400117 	ldw	r17,4(sp)
    e3f4:	dc000017 	ldw	r16,0(sp)
    e3f8:	dec00504 	addi	sp,sp,20
    e3fc:	000fc381 	jmpi	fc38 <_write_r>

0000e400 <__sseek>:
    e400:	defffe04 	addi	sp,sp,-8
    e404:	dc000015 	stw	r16,0(sp)
    e408:	2821883a 	mov	r16,r5
    e40c:	2940038f 	ldh	r5,14(r5)
    e410:	dfc00115 	stw	ra,4(sp)
    e414:	00101840 	call	10184 <_lseek_r>
    e418:	00ffffc4 	movi	r3,-1
    e41c:	10c00826 	beq	r2,r3,e440 <__sseek+0x40>
    e420:	80c0030b 	ldhu	r3,12(r16)
    e424:	80801415 	stw	r2,80(r16)
    e428:	18c40014 	ori	r3,r3,4096
    e42c:	80c0030d 	sth	r3,12(r16)
    e430:	dfc00117 	ldw	ra,4(sp)
    e434:	dc000017 	ldw	r16,0(sp)
    e438:	dec00204 	addi	sp,sp,8
    e43c:	f800283a 	ret
    e440:	80c0030b 	ldhu	r3,12(r16)
    e444:	18fbffcc 	andi	r3,r3,61439
    e448:	80c0030d 	sth	r3,12(r16)
    e44c:	dfc00117 	ldw	ra,4(sp)
    e450:	dc000017 	ldw	r16,0(sp)
    e454:	dec00204 	addi	sp,sp,8
    e458:	f800283a 	ret

0000e45c <__sclose>:
    e45c:	2940038f 	ldh	r5,14(r5)
    e460:	000fc981 	jmpi	fc98 <_close_r>

0000e464 <strcmp>:
    e464:	2144b03a 	or	r2,r4,r5
    e468:	108000cc 	andi	r2,r2,3
    e46c:	1000171e 	bne	r2,zero,e4cc <strcmp+0x68>
    e470:	20800017 	ldw	r2,0(r4)
    e474:	28c00017 	ldw	r3,0(r5)
    e478:	10c0141e 	bne	r2,r3,e4cc <strcmp+0x68>
    e47c:	027fbff4 	movhi	r9,65279
    e480:	4a7fbfc4 	addi	r9,r9,-257
    e484:	0086303a 	nor	r3,zero,r2
    e488:	02202074 	movhi	r8,32897
    e48c:	1245883a 	add	r2,r2,r9
    e490:	42202004 	addi	r8,r8,-32640
    e494:	10c4703a 	and	r2,r2,r3
    e498:	1204703a 	and	r2,r2,r8
    e49c:	10000226 	beq	r2,zero,e4a8 <strcmp+0x44>
    e4a0:	00002306 	br	e530 <strcmp+0xcc>
    e4a4:	1000221e 	bne	r2,zero,e530 <strcmp+0xcc>
    e4a8:	21000104 	addi	r4,r4,4
    e4ac:	20c00017 	ldw	r3,0(r4)
    e4b0:	29400104 	addi	r5,r5,4
    e4b4:	29800017 	ldw	r6,0(r5)
    e4b8:	1a4f883a 	add	r7,r3,r9
    e4bc:	00c4303a 	nor	r2,zero,r3
    e4c0:	3884703a 	and	r2,r7,r2
    e4c4:	1204703a 	and	r2,r2,r8
    e4c8:	19bff626 	beq	r3,r6,e4a4 <__alt_exception_stack_pointer+0xf800e4a4>
    e4cc:	20800003 	ldbu	r2,0(r4)
    e4d0:	10c03fcc 	andi	r3,r2,255
    e4d4:	18c0201c 	xori	r3,r3,128
    e4d8:	18ffe004 	addi	r3,r3,-128
    e4dc:	18000c26 	beq	r3,zero,e510 <strcmp+0xac>
    e4e0:	29800007 	ldb	r6,0(r5)
    e4e4:	19800326 	beq	r3,r6,e4f4 <strcmp+0x90>
    e4e8:	00001306 	br	e538 <strcmp+0xd4>
    e4ec:	29800007 	ldb	r6,0(r5)
    e4f0:	11800b1e 	bne	r2,r6,e520 <strcmp+0xbc>
    e4f4:	21000044 	addi	r4,r4,1
    e4f8:	20c00003 	ldbu	r3,0(r4)
    e4fc:	29400044 	addi	r5,r5,1
    e500:	18803fcc 	andi	r2,r3,255
    e504:	1080201c 	xori	r2,r2,128
    e508:	10bfe004 	addi	r2,r2,-128
    e50c:	103ff71e 	bne	r2,zero,e4ec <__alt_exception_stack_pointer+0xf800e4ec>
    e510:	0007883a 	mov	r3,zero
    e514:	28800003 	ldbu	r2,0(r5)
    e518:	1885c83a 	sub	r2,r3,r2
    e51c:	f800283a 	ret
    e520:	28800003 	ldbu	r2,0(r5)
    e524:	18c03fcc 	andi	r3,r3,255
    e528:	1885c83a 	sub	r2,r3,r2
    e52c:	f800283a 	ret
    e530:	0005883a 	mov	r2,zero
    e534:	f800283a 	ret
    e538:	10c03fcc 	andi	r3,r2,255
    e53c:	003ff506 	br	e514 <__alt_exception_stack_pointer+0xf800e514>

0000e540 <__sprint_r.part.0>:
    e540:	28801917 	ldw	r2,100(r5)
    e544:	defff604 	addi	sp,sp,-40
    e548:	dd400515 	stw	r21,20(sp)
    e54c:	dfc00915 	stw	ra,36(sp)
    e550:	df000815 	stw	fp,32(sp)
    e554:	ddc00715 	stw	r23,28(sp)
    e558:	dd800615 	stw	r22,24(sp)
    e55c:	dd000415 	stw	r20,16(sp)
    e560:	dcc00315 	stw	r19,12(sp)
    e564:	dc800215 	stw	r18,8(sp)
    e568:	dc400115 	stw	r17,4(sp)
    e56c:	dc000015 	stw	r16,0(sp)
    e570:	1088000c 	andi	r2,r2,8192
    e574:	302b883a 	mov	r21,r6
    e578:	10002e26 	beq	r2,zero,e634 <__sprint_r.part.0+0xf4>
    e57c:	30800217 	ldw	r2,8(r6)
    e580:	35800017 	ldw	r22,0(r6)
    e584:	10002926 	beq	r2,zero,e62c <__sprint_r.part.0+0xec>
    e588:	2827883a 	mov	r19,r5
    e58c:	2029883a 	mov	r20,r4
    e590:	b5c00104 	addi	r23,r22,4
    e594:	04bfffc4 	movi	r18,-1
    e598:	bc400017 	ldw	r17,0(r23)
    e59c:	b4000017 	ldw	r16,0(r22)
    e5a0:	0039883a 	mov	fp,zero
    e5a4:	8822d0ba 	srli	r17,r17,2
    e5a8:	8800031e 	bne	r17,zero,e5b8 <__sprint_r.part.0+0x78>
    e5ac:	00001806 	br	e610 <__sprint_r.part.0+0xd0>
    e5b0:	84000104 	addi	r16,r16,4
    e5b4:	8f001526 	beq	r17,fp,e60c <__sprint_r.part.0+0xcc>
    e5b8:	81400017 	ldw	r5,0(r16)
    e5bc:	980d883a 	mov	r6,r19
    e5c0:	a009883a 	mov	r4,r20
    e5c4:	00100300 	call	10030 <_fputwc_r>
    e5c8:	e7000044 	addi	fp,fp,1
    e5cc:	14bff81e 	bne	r2,r18,e5b0 <__alt_exception_stack_pointer+0xf800e5b0>
    e5d0:	9005883a 	mov	r2,r18
    e5d4:	a8000215 	stw	zero,8(r21)
    e5d8:	a8000115 	stw	zero,4(r21)
    e5dc:	dfc00917 	ldw	ra,36(sp)
    e5e0:	df000817 	ldw	fp,32(sp)
    e5e4:	ddc00717 	ldw	r23,28(sp)
    e5e8:	dd800617 	ldw	r22,24(sp)
    e5ec:	dd400517 	ldw	r21,20(sp)
    e5f0:	dd000417 	ldw	r20,16(sp)
    e5f4:	dcc00317 	ldw	r19,12(sp)
    e5f8:	dc800217 	ldw	r18,8(sp)
    e5fc:	dc400117 	ldw	r17,4(sp)
    e600:	dc000017 	ldw	r16,0(sp)
    e604:	dec00a04 	addi	sp,sp,40
    e608:	f800283a 	ret
    e60c:	a8800217 	ldw	r2,8(r21)
    e610:	8c63883a 	add	r17,r17,r17
    e614:	8c63883a 	add	r17,r17,r17
    e618:	1445c83a 	sub	r2,r2,r17
    e61c:	a8800215 	stw	r2,8(r21)
    e620:	b5800204 	addi	r22,r22,8
    e624:	bdc00204 	addi	r23,r23,8
    e628:	103fdb1e 	bne	r2,zero,e598 <__alt_exception_stack_pointer+0xf800e598>
    e62c:	0005883a 	mov	r2,zero
    e630:	003fe806 	br	e5d4 <__alt_exception_stack_pointer+0xf800e5d4>
    e634:	000c0480 	call	c048 <__sfvwrite_r>
    e638:	003fe606 	br	e5d4 <__alt_exception_stack_pointer+0xf800e5d4>

0000e63c <__sprint_r>:
    e63c:	30c00217 	ldw	r3,8(r6)
    e640:	18000126 	beq	r3,zero,e648 <__sprint_r+0xc>
    e644:	000e5401 	jmpi	e540 <__sprint_r.part.0>
    e648:	30000115 	stw	zero,4(r6)
    e64c:	0005883a 	mov	r2,zero
    e650:	f800283a 	ret

0000e654 <___vfiprintf_internal_r>:
    e654:	deffca04 	addi	sp,sp,-216
    e658:	dd403115 	stw	r21,196(sp)
    e65c:	dfc03515 	stw	ra,212(sp)
    e660:	df003415 	stw	fp,208(sp)
    e664:	ddc03315 	stw	r23,204(sp)
    e668:	dd803215 	stw	r22,200(sp)
    e66c:	dd003015 	stw	r20,192(sp)
    e670:	dcc02f15 	stw	r19,188(sp)
    e674:	dc802e15 	stw	r18,184(sp)
    e678:	dc402d15 	stw	r17,180(sp)
    e67c:	dc002c15 	stw	r16,176(sp)
    e680:	d9002115 	stw	r4,132(sp)
    e684:	d9402015 	stw	r5,128(sp)
    e688:	d9c02215 	stw	r7,136(sp)
    e68c:	302b883a 	mov	r21,r6
    e690:	20000226 	beq	r4,zero,e69c <___vfiprintf_internal_r+0x48>
    e694:	20800e17 	ldw	r2,56(r4)
    e698:	1000cf26 	beq	r2,zero,e9d8 <___vfiprintf_internal_r+0x384>
    e69c:	d8c02017 	ldw	r3,128(sp)
    e6a0:	1880030b 	ldhu	r2,12(r3)
    e6a4:	10c8000c 	andi	r3,r2,8192
    e6a8:	1800071e 	bne	r3,zero,e6c8 <___vfiprintf_internal_r+0x74>
    e6ac:	d9402017 	ldw	r5,128(sp)
    e6b0:	00f7ffc4 	movi	r3,-8193
    e6b4:	10880014 	ori	r2,r2,8192
    e6b8:	29001917 	ldw	r4,100(r5)
    e6bc:	2880030d 	sth	r2,12(r5)
    e6c0:	20c6703a 	and	r3,r4,r3
    e6c4:	28c01915 	stw	r3,100(r5)
    e6c8:	10c0020c 	andi	r3,r2,8
    e6cc:	1800a526 	beq	r3,zero,e964 <___vfiprintf_internal_r+0x310>
    e6d0:	d9002017 	ldw	r4,128(sp)
    e6d4:	20c00417 	ldw	r3,16(r4)
    e6d8:	1800a226 	beq	r3,zero,e964 <___vfiprintf_internal_r+0x310>
    e6dc:	1080068c 	andi	r2,r2,26
    e6e0:	00c00284 	movi	r3,10
    e6e4:	10c0a826 	beq	r2,r3,e988 <___vfiprintf_internal_r+0x334>
    e6e8:	d9001a04 	addi	r4,sp,104
    e6ec:	d94019c4 	addi	r5,sp,103
    e6f0:	04800074 	movhi	r18,1
    e6f4:	2145c83a 	sub	r2,r4,r5
    e6f8:	94957e04 	addi	r18,r18,22008
    e6fc:	d9001e15 	stw	r4,120(sp)
    e700:	d9401f15 	stw	r5,124(sp)
    e704:	dec01a15 	stw	sp,104(sp)
    e708:	d8001c15 	stw	zero,112(sp)
    e70c:	d8001b15 	stw	zero,108(sp)
    e710:	d811883a 	mov	r8,sp
    e714:	d8002615 	stw	zero,152(sp)
    e718:	d8002415 	stw	zero,144(sp)
    e71c:	d8802815 	stw	r2,160(sp)
    e720:	a82d883a 	mov	r22,r21
    e724:	b0800007 	ldb	r2,0(r22)
    e728:	10040d26 	beq	r2,zero,f760 <___vfiprintf_internal_r+0x110c>
    e72c:	00c00944 	movi	r3,37
    e730:	b029883a 	mov	r20,r22
    e734:	10c0021e 	bne	r2,r3,e740 <___vfiprintf_internal_r+0xec>
    e738:	00001606 	br	e794 <___vfiprintf_internal_r+0x140>
    e73c:	10c00326 	beq	r2,r3,e74c <___vfiprintf_internal_r+0xf8>
    e740:	a5000044 	addi	r20,r20,1
    e744:	a0800007 	ldb	r2,0(r20)
    e748:	103ffc1e 	bne	r2,zero,e73c <__alt_exception_stack_pointer+0xf800e73c>
    e74c:	a5a1c83a 	sub	r16,r20,r22
    e750:	80001026 	beq	r16,zero,e794 <___vfiprintf_internal_r+0x140>
    e754:	d8c01c17 	ldw	r3,112(sp)
    e758:	d8801b17 	ldw	r2,108(sp)
    e75c:	45800015 	stw	r22,0(r8)
    e760:	80c7883a 	add	r3,r16,r3
    e764:	10800044 	addi	r2,r2,1
    e768:	44000115 	stw	r16,4(r8)
    e76c:	d8c01c15 	stw	r3,112(sp)
    e770:	d8801b15 	stw	r2,108(sp)
    e774:	010001c4 	movi	r4,7
    e778:	2080750e 	bge	r4,r2,e950 <___vfiprintf_internal_r+0x2fc>
    e77c:	1803951e 	bne	r3,zero,f5d4 <___vfiprintf_internal_r+0xf80>
    e780:	d8c02417 	ldw	r3,144(sp)
    e784:	d8001b15 	stw	zero,108(sp)
    e788:	d811883a 	mov	r8,sp
    e78c:	1c07883a 	add	r3,r3,r16
    e790:	d8c02415 	stw	r3,144(sp)
    e794:	a0800007 	ldb	r2,0(r20)
    e798:	1002e026 	beq	r2,zero,f31c <___vfiprintf_internal_r+0xcc8>
    e79c:	a5800044 	addi	r22,r20,1
    e7a0:	a0c00047 	ldb	r3,1(r20)
    e7a4:	d8001d85 	stb	zero,118(sp)
    e7a8:	0027883a 	mov	r19,zero
    e7ac:	d8002305 	stb	zero,140(sp)
    e7b0:	043fffc4 	movi	r16,-1
    e7b4:	d8002515 	stw	zero,148(sp)
    e7b8:	0023883a 	mov	r17,zero
    e7bc:	05001604 	movi	r20,88
    e7c0:	05400244 	movi	r21,9
    e7c4:	402f883a 	mov	r23,r8
    e7c8:	b5800044 	addi	r22,r22,1
    e7cc:	18bff804 	addi	r2,r3,-32
    e7d0:	a0827736 	bltu	r20,r2,f1b0 <___vfiprintf_internal_r+0xb5c>
    e7d4:	100490ba 	slli	r2,r2,2
    e7d8:	01000074 	movhi	r4,1
    e7dc:	2139fb04 	addi	r4,r4,-6164
    e7e0:	1105883a 	add	r2,r2,r4
    e7e4:	10800017 	ldw	r2,0(r2)
    e7e8:	1000683a 	jmp	r2
    e7ec:	0000eeb0 	cmpltui	zero,zero,954
    e7f0:	0000f1b0 	cmpltui	zero,zero,966
    e7f4:	0000f1b0 	cmpltui	zero,zero,966
    e7f8:	0000eecc 	andi	zero,zero,955
    e7fc:	0000f1b0 	cmpltui	zero,zero,966
    e800:	0000f1b0 	cmpltui	zero,zero,966
    e804:	0000f1b0 	cmpltui	zero,zero,966
    e808:	0000f1b0 	cmpltui	zero,zero,966
    e80c:	0000f1b0 	cmpltui	zero,zero,966
    e810:	0000f1b0 	cmpltui	zero,zero,966
    e814:	0000f0d4 	movui	zero,963
    e818:	0000f0f8 	rdprs	zero,zero,963
    e81c:	0000f1b0 	cmpltui	zero,zero,966
    e820:	0000e9f0 	cmpltui	zero,zero,935
    e824:	0000f10c 	andi	zero,zero,964
    e828:	0000f1b0 	cmpltui	zero,zero,966
    e82c:	0000eed8 	cmpnei	zero,zero,955
    e830:	0000eee4 	muli	zero,zero,955
    e834:	0000eee4 	muli	zero,zero,955
    e838:	0000eee4 	muli	zero,zero,955
    e83c:	0000eee4 	muli	zero,zero,955
    e840:	0000eee4 	muli	zero,zero,955
    e844:	0000eee4 	muli	zero,zero,955
    e848:	0000eee4 	muli	zero,zero,955
    e84c:	0000eee4 	muli	zero,zero,955
    e850:	0000eee4 	muli	zero,zero,955
    e854:	0000f1b0 	cmpltui	zero,zero,966
    e858:	0000f1b0 	cmpltui	zero,zero,966
    e85c:	0000f1b0 	cmpltui	zero,zero,966
    e860:	0000f1b0 	cmpltui	zero,zero,966
    e864:	0000f1b0 	cmpltui	zero,zero,966
    e868:	0000f1b0 	cmpltui	zero,zero,966
    e86c:	0000f1b0 	cmpltui	zero,zero,966
    e870:	0000f1b0 	cmpltui	zero,zero,966
    e874:	0000f1b0 	cmpltui	zero,zero,966
    e878:	0000f1b0 	cmpltui	zero,zero,966
    e87c:	0000ef24 	muli	zero,zero,956
    e880:	0000f1b0 	cmpltui	zero,zero,966
    e884:	0000f1b0 	cmpltui	zero,zero,966
    e888:	0000f1b0 	cmpltui	zero,zero,966
    e88c:	0000f1b0 	cmpltui	zero,zero,966
    e890:	0000f1b0 	cmpltui	zero,zero,966
    e894:	0000f1b0 	cmpltui	zero,zero,966
    e898:	0000f1b0 	cmpltui	zero,zero,966
    e89c:	0000f1b0 	cmpltui	zero,zero,966
    e8a0:	0000f1b0 	cmpltui	zero,zero,966
    e8a4:	0000f1b0 	cmpltui	zero,zero,966
    e8a8:	0000ef60 	cmpeqi	zero,zero,957
    e8ac:	0000f1b0 	cmpltui	zero,zero,966
    e8b0:	0000f1b0 	cmpltui	zero,zero,966
    e8b4:	0000f1b0 	cmpltui	zero,zero,966
    e8b8:	0000f1b0 	cmpltui	zero,zero,966
    e8bc:	0000f1b0 	cmpltui	zero,zero,966
    e8c0:	0000efbc 	xorhi	zero,zero,958
    e8c4:	0000f1b0 	cmpltui	zero,zero,966
    e8c8:	0000f1b0 	cmpltui	zero,zero,966
    e8cc:	0000f030 	cmpltui	zero,zero,960
    e8d0:	0000f1b0 	cmpltui	zero,zero,966
    e8d4:	0000f1b0 	cmpltui	zero,zero,966
    e8d8:	0000f1b0 	cmpltui	zero,zero,966
    e8dc:	0000f1b0 	cmpltui	zero,zero,966
    e8e0:	0000f1b0 	cmpltui	zero,zero,966
    e8e4:	0000f1b0 	cmpltui	zero,zero,966
    e8e8:	0000f1b0 	cmpltui	zero,zero,966
    e8ec:	0000f1b0 	cmpltui	zero,zero,966
    e8f0:	0000f1b0 	cmpltui	zero,zero,966
    e8f4:	0000f1b0 	cmpltui	zero,zero,966
    e8f8:	0000edd8 	cmpnei	zero,zero,951
    e8fc:	0000ee08 	cmpgei	zero,zero,952
    e900:	0000f1b0 	cmpltui	zero,zero,966
    e904:	0000f1b0 	cmpltui	zero,zero,966
    e908:	0000f1b0 	cmpltui	zero,zero,966
    e90c:	0000f158 	cmpnei	zero,zero,965
    e910:	0000ee08 	cmpgei	zero,zero,952
    e914:	0000f1b0 	cmpltui	zero,zero,966
    e918:	0000f1b0 	cmpltui	zero,zero,966
    e91c:	0000ecb0 	cmpltui	zero,zero,946
    e920:	0000f1b0 	cmpltui	zero,zero,966
    e924:	0000ecc4 	movi	zero,947
    e928:	0000ecfc 	xorhi	zero,zero,947
    e92c:	0000e9fc 	xorhi	zero,zero,935
    e930:	0000eca4 	muli	zero,zero,946
    e934:	0000f1b0 	cmpltui	zero,zero,966
    e938:	0000f070 	cmpltui	zero,zero,961
    e93c:	0000f1b0 	cmpltui	zero,zero,966
    e940:	0000f0bc 	xorhi	zero,zero,962
    e944:	0000f1b0 	cmpltui	zero,zero,966
    e948:	0000f1b0 	cmpltui	zero,zero,966
    e94c:	0000ed80 	call	ed8 <init_keyboard+0x7a8>
    e950:	42000204 	addi	r8,r8,8
    e954:	d8c02417 	ldw	r3,144(sp)
    e958:	1c07883a 	add	r3,r3,r16
    e95c:	d8c02415 	stw	r3,144(sp)
    e960:	003f8c06 	br	e794 <__alt_exception_stack_pointer+0xf800e794>
    e964:	d9402017 	ldw	r5,128(sp)
    e968:	d9002117 	ldw	r4,132(sp)
    e96c:	0009bb80 	call	9bb8 <__swsetup_r>
    e970:	1003c11e 	bne	r2,zero,f878 <___vfiprintf_internal_r+0x1224>
    e974:	d9402017 	ldw	r5,128(sp)
    e978:	00c00284 	movi	r3,10
    e97c:	2880030b 	ldhu	r2,12(r5)
    e980:	1080068c 	andi	r2,r2,26
    e984:	10ff581e 	bne	r2,r3,e6e8 <__alt_exception_stack_pointer+0xf800e6e8>
    e988:	d8c02017 	ldw	r3,128(sp)
    e98c:	1880038f 	ldh	r2,14(r3)
    e990:	103f5516 	blt	r2,zero,e6e8 <__alt_exception_stack_pointer+0xf800e6e8>
    e994:	d9c02217 	ldw	r7,136(sp)
    e998:	d9002117 	ldw	r4,132(sp)
    e99c:	a80d883a 	mov	r6,r21
    e9a0:	180b883a 	mov	r5,r3
    e9a4:	000fb7c0 	call	fb7c <__sbprintf>
    e9a8:	dfc03517 	ldw	ra,212(sp)
    e9ac:	df003417 	ldw	fp,208(sp)
    e9b0:	ddc03317 	ldw	r23,204(sp)
    e9b4:	dd803217 	ldw	r22,200(sp)
    e9b8:	dd403117 	ldw	r21,196(sp)
    e9bc:	dd003017 	ldw	r20,192(sp)
    e9c0:	dcc02f17 	ldw	r19,188(sp)
    e9c4:	dc802e17 	ldw	r18,184(sp)
    e9c8:	dc402d17 	ldw	r17,180(sp)
    e9cc:	dc002c17 	ldw	r16,176(sp)
    e9d0:	dec03604 	addi	sp,sp,216
    e9d4:	f800283a 	ret
    e9d8:	000bbc40 	call	bbc4 <__sinit>
    e9dc:	003f2f06 	br	e69c <__alt_exception_stack_pointer+0xf800e69c>
    e9e0:	d8c02517 	ldw	r3,148(sp)
    e9e4:	d8802215 	stw	r2,136(sp)
    e9e8:	00c7c83a 	sub	r3,zero,r3
    e9ec:	d8c02515 	stw	r3,148(sp)
    e9f0:	8c400114 	ori	r17,r17,4
    e9f4:	b0c00007 	ldb	r3,0(r22)
    e9f8:	003f7306 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    e9fc:	00800c04 	movi	r2,48
    ea00:	d9402217 	ldw	r5,136(sp)
    ea04:	d8801d05 	stb	r2,116(sp)
    ea08:	00801e04 	movi	r2,120
    ea0c:	d8801d45 	stb	r2,117(sp)
    ea10:	d8001d85 	stb	zero,118(sp)
    ea14:	b811883a 	mov	r8,r23
    ea18:	28c00104 	addi	r3,r5,4
    ea1c:	2cc00017 	ldw	r19,0(r5)
    ea20:	0029883a 	mov	r20,zero
    ea24:	88800094 	ori	r2,r17,2
    ea28:	80032516 	blt	r16,zero,f6c0 <___vfiprintf_internal_r+0x106c>
    ea2c:	00bfdfc4 	movi	r2,-129
    ea30:	88a2703a 	and	r17,r17,r2
    ea34:	d8c02215 	stw	r3,136(sp)
    ea38:	8c400094 	ori	r17,r17,2
    ea3c:	98032a1e 	bne	r19,zero,f6e8 <___vfiprintf_internal_r+0x1094>
    ea40:	00800074 	movhi	r2,1
    ea44:	10951e04 	addi	r2,r2,21624
    ea48:	d8802615 	stw	r2,152(sp)
    ea4c:	002b883a 	mov	r21,zero
    ea50:	8001741e 	bne	r16,zero,f024 <___vfiprintf_internal_r+0x9d0>
    ea54:	0021883a 	mov	r16,zero
    ea58:	0029883a 	mov	r20,zero
    ea5c:	ddc01a04 	addi	r23,sp,104
    ea60:	8027883a 	mov	r19,r16
    ea64:	8500010e 	bge	r16,r20,ea6c <___vfiprintf_internal_r+0x418>
    ea68:	a027883a 	mov	r19,r20
    ea6c:	ad403fcc 	andi	r21,r21,255
    ea70:	ad40201c 	xori	r21,r21,128
    ea74:	ad7fe004 	addi	r21,r21,-128
    ea78:	a8000126 	beq	r21,zero,ea80 <___vfiprintf_internal_r+0x42c>
    ea7c:	9cc00044 	addi	r19,r19,1
    ea80:	89c0008c 	andi	r7,r17,2
    ea84:	38000126 	beq	r7,zero,ea8c <___vfiprintf_internal_r+0x438>
    ea88:	9cc00084 	addi	r19,r19,2
    ea8c:	88c0210c 	andi	r3,r17,132
    ea90:	1801dd1e 	bne	r3,zero,f208 <___vfiprintf_internal_r+0xbb4>
    ea94:	d9402517 	ldw	r5,148(sp)
    ea98:	2cebc83a 	sub	r21,r5,r19
    ea9c:	0541da0e 	bge	zero,r21,f208 <___vfiprintf_internal_r+0xbb4>
    eaa0:	07000404 	movi	fp,16
    eaa4:	d8801c17 	ldw	r2,112(sp)
    eaa8:	e543be0e 	bge	fp,r21,f9a4 <___vfiprintf_internal_r+0x1350>
    eaac:	01400074 	movhi	r5,1
    eab0:	29558204 	addi	r5,r5,22024
    eab4:	dc002715 	stw	r16,156(sp)
    eab8:	d9801b17 	ldw	r6,108(sp)
    eabc:	a821883a 	mov	r16,r21
    eac0:	d9402315 	stw	r5,140(sp)
    eac4:	028001c4 	movi	r10,7
    eac8:	d9c02915 	stw	r7,164(sp)
    eacc:	182b883a 	mov	r21,r3
    ead0:	00000506 	br	eae8 <___vfiprintf_internal_r+0x494>
    ead4:	31000084 	addi	r4,r6,2
    ead8:	42000204 	addi	r8,r8,8
    eadc:	180d883a 	mov	r6,r3
    eae0:	843ffc04 	addi	r16,r16,-16
    eae4:	e4000f0e 	bge	fp,r16,eb24 <___vfiprintf_internal_r+0x4d0>
    eae8:	01000074 	movhi	r4,1
    eaec:	10800404 	addi	r2,r2,16
    eaf0:	30c00044 	addi	r3,r6,1
    eaf4:	21158204 	addi	r4,r4,22024
    eaf8:	41000015 	stw	r4,0(r8)
    eafc:	47000115 	stw	fp,4(r8)
    eb00:	d8801c15 	stw	r2,112(sp)
    eb04:	d8c01b15 	stw	r3,108(sp)
    eb08:	50fff20e 	bge	r10,r3,ead4 <__alt_exception_stack_pointer+0xf800ead4>
    eb0c:	1001b21e 	bne	r2,zero,f1d8 <___vfiprintf_internal_r+0xb84>
    eb10:	843ffc04 	addi	r16,r16,-16
    eb14:	000d883a 	mov	r6,zero
    eb18:	01000044 	movi	r4,1
    eb1c:	d811883a 	mov	r8,sp
    eb20:	e43ff116 	blt	fp,r16,eae8 <__alt_exception_stack_pointer+0xf800eae8>
    eb24:	a807883a 	mov	r3,r21
    eb28:	d9c02917 	ldw	r7,164(sp)
    eb2c:	802b883a 	mov	r21,r16
    eb30:	dc002717 	ldw	r16,156(sp)
    eb34:	d9402317 	ldw	r5,140(sp)
    eb38:	a885883a 	add	r2,r21,r2
    eb3c:	45400115 	stw	r21,4(r8)
    eb40:	41400015 	stw	r5,0(r8)
    eb44:	d8801c15 	stw	r2,112(sp)
    eb48:	d9001b15 	stw	r4,108(sp)
    eb4c:	014001c4 	movi	r5,7
    eb50:	29026216 	blt	r5,r4,f4dc <___vfiprintf_internal_r+0xe88>
    eb54:	d9801d87 	ldb	r6,118(sp)
    eb58:	42000204 	addi	r8,r8,8
    eb5c:	21400044 	addi	r5,r4,1
    eb60:	3001ae1e 	bne	r6,zero,f21c <___vfiprintf_internal_r+0xbc8>
    eb64:	3801bb26 	beq	r7,zero,f254 <___vfiprintf_internal_r+0xc00>
    eb68:	d9001d04 	addi	r4,sp,116
    eb6c:	10800084 	addi	r2,r2,2
    eb70:	41000015 	stw	r4,0(r8)
    eb74:	01000084 	movi	r4,2
    eb78:	41000115 	stw	r4,4(r8)
    eb7c:	d8801c15 	stw	r2,112(sp)
    eb80:	d9401b15 	stw	r5,108(sp)
    eb84:	010001c4 	movi	r4,7
    eb88:	2142680e 	bge	r4,r5,f52c <___vfiprintf_internal_r+0xed8>
    eb8c:	1002b11e 	bne	r2,zero,f654 <___vfiprintf_internal_r+0x1000>
    eb90:	01802004 	movi	r6,128
    eb94:	01400044 	movi	r5,1
    eb98:	0009883a 	mov	r4,zero
    eb9c:	d811883a 	mov	r8,sp
    eba0:	1981ae1e 	bne	r3,r6,f25c <___vfiprintf_internal_r+0xc08>
    eba4:	d8c02517 	ldw	r3,148(sp)
    eba8:	1cf9c83a 	sub	fp,r3,r19
    ebac:	0701ab0e 	bge	zero,fp,f25c <___vfiprintf_internal_r+0xc08>
    ebb0:	05400404 	movi	r21,16
    ebb4:	af03a90e 	bge	r21,fp,fa5c <___vfiprintf_internal_r+0x1408>
    ebb8:	01400074 	movhi	r5,1
    ebbc:	29557e04 	addi	r5,r5,22008
    ebc0:	d9402315 	stw	r5,140(sp)
    ebc4:	01c001c4 	movi	r7,7
    ebc8:	00000506 	br	ebe0 <___vfiprintf_internal_r+0x58c>
    ebcc:	21800084 	addi	r6,r4,2
    ebd0:	42000204 	addi	r8,r8,8
    ebd4:	1809883a 	mov	r4,r3
    ebd8:	e73ffc04 	addi	fp,fp,-16
    ebdc:	af000d0e 	bge	r21,fp,ec14 <___vfiprintf_internal_r+0x5c0>
    ebe0:	10800404 	addi	r2,r2,16
    ebe4:	20c00044 	addi	r3,r4,1
    ebe8:	44800015 	stw	r18,0(r8)
    ebec:	45400115 	stw	r21,4(r8)
    ebf0:	d8801c15 	stw	r2,112(sp)
    ebf4:	d8c01b15 	stw	r3,108(sp)
    ebf8:	38fff40e 	bge	r7,r3,ebcc <__alt_exception_stack_pointer+0xf800ebcc>
    ebfc:	10022b1e 	bne	r2,zero,f4ac <___vfiprintf_internal_r+0xe58>
    ec00:	e73ffc04 	addi	fp,fp,-16
    ec04:	01800044 	movi	r6,1
    ec08:	0009883a 	mov	r4,zero
    ec0c:	d811883a 	mov	r8,sp
    ec10:	af3ff316 	blt	r21,fp,ebe0 <__alt_exception_stack_pointer+0xf800ebe0>
    ec14:	d8c02317 	ldw	r3,140(sp)
    ec18:	1705883a 	add	r2,r2,fp
    ec1c:	47000115 	stw	fp,4(r8)
    ec20:	40c00015 	stw	r3,0(r8)
    ec24:	d8801c15 	stw	r2,112(sp)
    ec28:	d9801b15 	stw	r6,108(sp)
    ec2c:	00c001c4 	movi	r3,7
    ec30:	19829416 	blt	r3,r6,f684 <___vfiprintf_internal_r+0x1030>
    ec34:	8521c83a 	sub	r16,r16,r20
    ec38:	42000204 	addi	r8,r8,8
    ec3c:	31400044 	addi	r5,r6,1
    ec40:	3009883a 	mov	r4,r6
    ec44:	04018716 	blt	zero,r16,f264 <___vfiprintf_internal_r+0xc10>
    ec48:	a085883a 	add	r2,r20,r2
    ec4c:	45c00015 	stw	r23,0(r8)
    ec50:	45000115 	stw	r20,4(r8)
    ec54:	d8801c15 	stw	r2,112(sp)
    ec58:	d9401b15 	stw	r5,108(sp)
    ec5c:	00c001c4 	movi	r3,7
    ec60:	1941c20e 	bge	r3,r5,f36c <___vfiprintf_internal_r+0xd18>
    ec64:	1002531e 	bne	r2,zero,f5b4 <___vfiprintf_internal_r+0xf60>
    ec68:	d8001b15 	stw	zero,108(sp)
    ec6c:	8c40010c 	andi	r17,r17,4
    ec70:	88023226 	beq	r17,zero,f53c <___vfiprintf_internal_r+0xee8>
    ec74:	d9002517 	ldw	r4,148(sp)
    ec78:	24e3c83a 	sub	r17,r4,r19
    ec7c:	04432916 	blt	zero,r17,f924 <___vfiprintf_internal_r+0x12d0>
    ec80:	d8802517 	ldw	r2,148(sp)
    ec84:	14c0010e 	bge	r2,r19,ec8c <___vfiprintf_internal_r+0x638>
    ec88:	9805883a 	mov	r2,r19
    ec8c:	d8c02417 	ldw	r3,144(sp)
    ec90:	1887883a 	add	r3,r3,r2
    ec94:	d8c02415 	stw	r3,144(sp)
    ec98:	d8001b15 	stw	zero,108(sp)
    ec9c:	d811883a 	mov	r8,sp
    eca0:	003ea006 	br	e724 <__alt_exception_stack_pointer+0xf800e724>
    eca4:	8c400814 	ori	r17,r17,32
    eca8:	b0c00007 	ldb	r3,0(r22)
    ecac:	003ec606 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    ecb0:	b0c00007 	ldb	r3,0(r22)
    ecb4:	00801b04 	movi	r2,108
    ecb8:	18832026 	beq	r3,r2,f93c <___vfiprintf_internal_r+0x12e8>
    ecbc:	8c400414 	ori	r17,r17,16
    ecc0:	003ec106 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    ecc4:	9cc03fcc 	andi	r19,r19,255
    ecc8:	b811883a 	mov	r8,r23
    eccc:	9803981e 	bne	r19,zero,fb30 <___vfiprintf_internal_r+0x14dc>
    ecd0:	8880080c 	andi	r2,r17,32
    ecd4:	1002be26 	beq	r2,zero,f7d0 <___vfiprintf_internal_r+0x117c>
    ecd8:	d9002217 	ldw	r4,136(sp)
    ecdc:	d9402417 	ldw	r5,144(sp)
    ece0:	20800017 	ldw	r2,0(r4)
    ece4:	2807d7fa 	srai	r3,r5,31
    ece8:	21000104 	addi	r4,r4,4
    ecec:	d9002215 	stw	r4,136(sp)
    ecf0:	11400015 	stw	r5,0(r2)
    ecf4:	10c00115 	stw	r3,4(r2)
    ecf8:	003e8a06 	br	e724 <__alt_exception_stack_pointer+0xf800e724>
    ecfc:	9cc03fcc 	andi	r19,r19,255
    ed00:	b811883a 	mov	r8,r23
    ed04:	9803871e 	bne	r19,zero,fb24 <___vfiprintf_internal_r+0x14d0>
    ed08:	8880080c 	andi	r2,r17,32
    ed0c:	10009a26 	beq	r2,zero,ef78 <___vfiprintf_internal_r+0x924>
    ed10:	d9002217 	ldw	r4,136(sp)
    ed14:	d8001d85 	stb	zero,118(sp)
    ed18:	20800204 	addi	r2,r4,8
    ed1c:	24c00017 	ldw	r19,0(r4)
    ed20:	25000117 	ldw	r20,4(r4)
    ed24:	8002a416 	blt	r16,zero,f7b8 <___vfiprintf_internal_r+0x1164>
    ed28:	013fdfc4 	movi	r4,-129
    ed2c:	9d06b03a 	or	r3,r19,r20
    ed30:	d8802215 	stw	r2,136(sp)
    ed34:	8922703a 	and	r17,r17,r4
    ed38:	18009b26 	beq	r3,zero,efa8 <___vfiprintf_internal_r+0x954>
    ed3c:	002b883a 	mov	r21,zero
    ed40:	ddc01a04 	addi	r23,sp,104
    ed44:	9806d0fa 	srli	r3,r19,3
    ed48:	a008977a 	slli	r4,r20,29
    ed4c:	a028d0fa 	srli	r20,r20,3
    ed50:	9cc001cc 	andi	r19,r19,7
    ed54:	98800c04 	addi	r2,r19,48
    ed58:	bdffffc4 	addi	r23,r23,-1
    ed5c:	20e6b03a 	or	r19,r4,r3
    ed60:	b8800005 	stb	r2,0(r23)
    ed64:	9d06b03a 	or	r3,r19,r20
    ed68:	183ff61e 	bne	r3,zero,ed44 <__alt_exception_stack_pointer+0xf800ed44>
    ed6c:	88c0004c 	andi	r3,r17,1
    ed70:	18021f1e 	bne	r3,zero,f5f0 <___vfiprintf_internal_r+0xf9c>
    ed74:	d9401e17 	ldw	r5,120(sp)
    ed78:	2de9c83a 	sub	r20,r5,r23
    ed7c:	003f3806 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    ed80:	9cc03fcc 	andi	r19,r19,255
    ed84:	b811883a 	mov	r8,r23
    ed88:	98034f1e 	bne	r19,zero,fac8 <___vfiprintf_internal_r+0x1474>
    ed8c:	00800074 	movhi	r2,1
    ed90:	10951e04 	addi	r2,r2,21624
    ed94:	d8802615 	stw	r2,152(sp)
    ed98:	8880080c 	andi	r2,r17,32
    ed9c:	1000ac26 	beq	r2,zero,f050 <___vfiprintf_internal_r+0x9fc>
    eda0:	d9002217 	ldw	r4,136(sp)
    eda4:	24c00017 	ldw	r19,0(r4)
    eda8:	25000117 	ldw	r20,4(r4)
    edac:	21000204 	addi	r4,r4,8
    edb0:	d9002215 	stw	r4,136(sp)
    edb4:	8880004c 	andi	r2,r17,1
    edb8:	1001e726 	beq	r2,zero,f558 <___vfiprintf_internal_r+0xf04>
    edbc:	9d04b03a 	or	r2,r19,r20
    edc0:	10025c1e 	bne	r2,zero,f734 <___vfiprintf_internal_r+0x10e0>
    edc4:	d8001d85 	stb	zero,118(sp)
    edc8:	80024416 	blt	r16,zero,f6dc <___vfiprintf_internal_r+0x1088>
    edcc:	00bfdfc4 	movi	r2,-129
    edd0:	88a2703a 	and	r17,r17,r2
    edd4:	003f1d06 	br	ea4c <__alt_exception_stack_pointer+0xf800ea4c>
    edd8:	d8c02217 	ldw	r3,136(sp)
    eddc:	04c00044 	movi	r19,1
    ede0:	b811883a 	mov	r8,r23
    ede4:	18800017 	ldw	r2,0(r3)
    ede8:	18c00104 	addi	r3,r3,4
    edec:	d8001d85 	stb	zero,118(sp)
    edf0:	d8801005 	stb	r2,64(sp)
    edf4:	d8c02215 	stw	r3,136(sp)
    edf8:	9829883a 	mov	r20,r19
    edfc:	ddc01004 	addi	r23,sp,64
    ee00:	0021883a 	mov	r16,zero
    ee04:	003f1e06 	br	ea80 <__alt_exception_stack_pointer+0xf800ea80>
    ee08:	9cc03fcc 	andi	r19,r19,255
    ee0c:	b811883a 	mov	r8,r23
    ee10:	9803331e 	bne	r19,zero,fae0 <___vfiprintf_internal_r+0x148c>
    ee14:	8880080c 	andi	r2,r17,32
    ee18:	10004826 	beq	r2,zero,ef3c <___vfiprintf_internal_r+0x8e8>
    ee1c:	d9002217 	ldw	r4,136(sp)
    ee20:	20800117 	ldw	r2,4(r4)
    ee24:	24c00017 	ldw	r19,0(r4)
    ee28:	21000204 	addi	r4,r4,8
    ee2c:	d9002215 	stw	r4,136(sp)
    ee30:	1029883a 	mov	r20,r2
    ee34:	10024c16 	blt	r2,zero,f768 <___vfiprintf_internal_r+0x1114>
    ee38:	dd401d83 	ldbu	r21,118(sp)
    ee3c:	80007116 	blt	r16,zero,f004 <___vfiprintf_internal_r+0x9b0>
    ee40:	00ffdfc4 	movi	r3,-129
    ee44:	9d04b03a 	or	r2,r19,r20
    ee48:	88e2703a 	and	r17,r17,r3
    ee4c:	1000d126 	beq	r2,zero,f194 <___vfiprintf_internal_r+0xb40>
    ee50:	a0023526 	beq	r20,zero,f728 <___vfiprintf_internal_r+0x10d4>
    ee54:	ddc01a04 	addi	r23,sp,104
    ee58:	4039883a 	mov	fp,r8
    ee5c:	9809883a 	mov	r4,r19
    ee60:	a00b883a 	mov	r5,r20
    ee64:	01800284 	movi	r6,10
    ee68:	000f883a 	mov	r7,zero
    ee6c:	0010b800 	call	10b80 <__umoddi3>
    ee70:	10800c04 	addi	r2,r2,48
    ee74:	bdffffc4 	addi	r23,r23,-1
    ee78:	9809883a 	mov	r4,r19
    ee7c:	a00b883a 	mov	r5,r20
    ee80:	b8800005 	stb	r2,0(r23)
    ee84:	01800284 	movi	r6,10
    ee88:	000f883a 	mov	r7,zero
    ee8c:	00105840 	call	10584 <__udivdi3>
    ee90:	1027883a 	mov	r19,r2
    ee94:	10c4b03a 	or	r2,r2,r3
    ee98:	1829883a 	mov	r20,r3
    ee9c:	103fef1e 	bne	r2,zero,ee5c <__alt_exception_stack_pointer+0xf800ee5c>
    eea0:	d9001e17 	ldw	r4,120(sp)
    eea4:	e011883a 	mov	r8,fp
    eea8:	25e9c83a 	sub	r20,r4,r23
    eeac:	003eec06 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    eeb0:	d8802307 	ldb	r2,140(sp)
    eeb4:	1002361e 	bne	r2,zero,f790 <___vfiprintf_internal_r+0x113c>
    eeb8:	00c00804 	movi	r3,32
    eebc:	d8c02305 	stb	r3,140(sp)
    eec0:	04c00044 	movi	r19,1
    eec4:	b0c00007 	ldb	r3,0(r22)
    eec8:	003e3f06 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    eecc:	8c400054 	ori	r17,r17,1
    eed0:	b0c00007 	ldb	r3,0(r22)
    eed4:	003e3c06 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    eed8:	8c402014 	ori	r17,r17,128
    eedc:	b0c00007 	ldb	r3,0(r22)
    eee0:	003e3906 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    eee4:	dc002715 	stw	r16,156(sp)
    eee8:	d8002515 	stw	zero,148(sp)
    eeec:	1f3ff404 	addi	fp,r3,-48
    eef0:	0009883a 	mov	r4,zero
    eef4:	b021883a 	mov	r16,r22
    eef8:	01400284 	movi	r5,10
    eefc:	0004ea80 	call	4ea8 <__mulsi3>
    ef00:	80c00007 	ldb	r3,0(r16)
    ef04:	e089883a 	add	r4,fp,r2
    ef08:	b5800044 	addi	r22,r22,1
    ef0c:	1f3ff404 	addi	fp,r3,-48
    ef10:	b021883a 	mov	r16,r22
    ef14:	af3ff82e 	bgeu	r21,fp,eef8 <__alt_exception_stack_pointer+0xf800eef8>
    ef18:	d9002515 	stw	r4,148(sp)
    ef1c:	dc002717 	ldw	r16,156(sp)
    ef20:	003e2a06 	br	e7cc <__alt_exception_stack_pointer+0xf800e7cc>
    ef24:	9cc03fcc 	andi	r19,r19,255
    ef28:	b811883a 	mov	r8,r23
    ef2c:	9802e91e 	bne	r19,zero,fad4 <___vfiprintf_internal_r+0x1480>
    ef30:	8c400414 	ori	r17,r17,16
    ef34:	8880080c 	andi	r2,r17,32
    ef38:	103fb81e 	bne	r2,zero,ee1c <__alt_exception_stack_pointer+0xf800ee1c>
    ef3c:	8880040c 	andi	r2,r17,16
    ef40:	10022e26 	beq	r2,zero,f7fc <___vfiprintf_internal_r+0x11a8>
    ef44:	d9402217 	ldw	r5,136(sp)
    ef48:	2cc00017 	ldw	r19,0(r5)
    ef4c:	29400104 	addi	r5,r5,4
    ef50:	d9402215 	stw	r5,136(sp)
    ef54:	9829d7fa 	srai	r20,r19,31
    ef58:	a005883a 	mov	r2,r20
    ef5c:	003fb506 	br	ee34 <__alt_exception_stack_pointer+0xf800ee34>
    ef60:	9cc03fcc 	andi	r19,r19,255
    ef64:	b811883a 	mov	r8,r23
    ef68:	9802fa1e 	bne	r19,zero,fb54 <___vfiprintf_internal_r+0x1500>
    ef6c:	8c400414 	ori	r17,r17,16
    ef70:	8880080c 	andi	r2,r17,32
    ef74:	103f661e 	bne	r2,zero,ed10 <__alt_exception_stack_pointer+0xf800ed10>
    ef78:	8880040c 	andi	r2,r17,16
    ef7c:	10020626 	beq	r2,zero,f798 <___vfiprintf_internal_r+0x1144>
    ef80:	d9402217 	ldw	r5,136(sp)
    ef84:	d8001d85 	stb	zero,118(sp)
    ef88:	0029883a 	mov	r20,zero
    ef8c:	28800104 	addi	r2,r5,4
    ef90:	2cc00017 	ldw	r19,0(r5)
    ef94:	80020816 	blt	r16,zero,f7b8 <___vfiprintf_internal_r+0x1164>
    ef98:	00ffdfc4 	movi	r3,-129
    ef9c:	d8802215 	stw	r2,136(sp)
    efa0:	88e2703a 	and	r17,r17,r3
    efa4:	983f651e 	bne	r19,zero,ed3c <__alt_exception_stack_pointer+0xf800ed3c>
    efa8:	002b883a 	mov	r21,zero
    efac:	8002cf26 	beq	r16,zero,faec <___vfiprintf_internal_r+0x1498>
    efb0:	0027883a 	mov	r19,zero
    efb4:	0029883a 	mov	r20,zero
    efb8:	003f6106 	br	ed40 <__alt_exception_stack_pointer+0xf800ed40>
    efbc:	9cc03fcc 	andi	r19,r19,255
    efc0:	b811883a 	mov	r8,r23
    efc4:	9802e01e 	bne	r19,zero,fb48 <___vfiprintf_internal_r+0x14f4>
    efc8:	8c400414 	ori	r17,r17,16
    efcc:	8880080c 	andi	r2,r17,32
    efd0:	1000641e 	bne	r2,zero,f164 <___vfiprintf_internal_r+0xb10>
    efd4:	8880040c 	andi	r2,r17,16
    efd8:	1001c81e 	bne	r2,zero,f6fc <___vfiprintf_internal_r+0x10a8>
    efdc:	8880100c 	andi	r2,r17,64
    efe0:	d8001d85 	stb	zero,118(sp)
    efe4:	1002281e 	bne	r2,zero,f888 <___vfiprintf_internal_r+0x1234>
    efe8:	d9002217 	ldw	r4,136(sp)
    efec:	0029883a 	mov	r20,zero
    eff0:	20800104 	addi	r2,r4,4
    eff4:	24c00017 	ldw	r19,0(r4)
    eff8:	8001c60e 	bge	r16,zero,f714 <___vfiprintf_internal_r+0x10c0>
    effc:	d8802215 	stw	r2,136(sp)
    f000:	002b883a 	mov	r21,zero
    f004:	9d04b03a 	or	r2,r19,r20
    f008:	103f911e 	bne	r2,zero,ee50 <__alt_exception_stack_pointer+0xf800ee50>
    f00c:	00800044 	movi	r2,1
    f010:	10803fcc 	andi	r2,r2,255
    f014:	00c00044 	movi	r3,1
    f018:	10c05f26 	beq	r2,r3,f198 <___vfiprintf_internal_r+0xb44>
    f01c:	00c00084 	movi	r3,2
    f020:	10ffe31e 	bne	r2,r3,efb0 <__alt_exception_stack_pointer+0xf800efb0>
    f024:	0027883a 	mov	r19,zero
    f028:	0029883a 	mov	r20,zero
    f02c:	00015106 	br	f574 <___vfiprintf_internal_r+0xf20>
    f030:	9cc03fcc 	andi	r19,r19,255
    f034:	b811883a 	mov	r8,r23
    f038:	9802c01e 	bne	r19,zero,fb3c <___vfiprintf_internal_r+0x14e8>
    f03c:	01400074 	movhi	r5,1
    f040:	29551904 	addi	r5,r5,21604
    f044:	d9402615 	stw	r5,152(sp)
    f048:	8880080c 	andi	r2,r17,32
    f04c:	103f541e 	bne	r2,zero,eda0 <__alt_exception_stack_pointer+0xf800eda0>
    f050:	8880040c 	andi	r2,r17,16
    f054:	1001f226 	beq	r2,zero,f820 <___vfiprintf_internal_r+0x11cc>
    f058:	d9402217 	ldw	r5,136(sp)
    f05c:	0029883a 	mov	r20,zero
    f060:	2cc00017 	ldw	r19,0(r5)
    f064:	29400104 	addi	r5,r5,4
    f068:	d9402215 	stw	r5,136(sp)
    f06c:	003f5106 	br	edb4 <__alt_exception_stack_pointer+0xf800edb4>
    f070:	d8c02217 	ldw	r3,136(sp)
    f074:	b811883a 	mov	r8,r23
    f078:	d8001d85 	stb	zero,118(sp)
    f07c:	1dc00017 	ldw	r23,0(r3)
    f080:	1f000104 	addi	fp,r3,4
    f084:	b8025926 	beq	r23,zero,f9ec <___vfiprintf_internal_r+0x1398>
    f088:	80023316 	blt	r16,zero,f958 <___vfiprintf_internal_r+0x1304>
    f08c:	800d883a 	mov	r6,r16
    f090:	000b883a 	mov	r5,zero
    f094:	b809883a 	mov	r4,r23
    f098:	da002a15 	stw	r8,168(sp)
    f09c:	000c9300 	call	c930 <memchr>
    f0a0:	da002a17 	ldw	r8,168(sp)
    f0a4:	10026826 	beq	r2,zero,fa48 <___vfiprintf_internal_r+0x13f4>
    f0a8:	15e9c83a 	sub	r20,r2,r23
    f0ac:	dd401d83 	ldbu	r21,118(sp)
    f0b0:	df002215 	stw	fp,136(sp)
    f0b4:	0021883a 	mov	r16,zero
    f0b8:	003e6906 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    f0bc:	9cc03fcc 	andi	r19,r19,255
    f0c0:	b811883a 	mov	r8,r23
    f0c4:	983fc126 	beq	r19,zero,efcc <__alt_exception_stack_pointer+0xf800efcc>
    f0c8:	d8c02303 	ldbu	r3,140(sp)
    f0cc:	d8c01d85 	stb	r3,118(sp)
    f0d0:	003fbe06 	br	efcc <__alt_exception_stack_pointer+0xf800efcc>
    f0d4:	d9002217 	ldw	r4,136(sp)
    f0d8:	d9402217 	ldw	r5,136(sp)
    f0dc:	21000017 	ldw	r4,0(r4)
    f0e0:	28800104 	addi	r2,r5,4
    f0e4:	d9002515 	stw	r4,148(sp)
    f0e8:	203e3d16 	blt	r4,zero,e9e0 <__alt_exception_stack_pointer+0xf800e9e0>
    f0ec:	d8802215 	stw	r2,136(sp)
    f0f0:	b0c00007 	ldb	r3,0(r22)
    f0f4:	003db406 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    f0f8:	00c00ac4 	movi	r3,43
    f0fc:	d8c02305 	stb	r3,140(sp)
    f100:	04c00044 	movi	r19,1
    f104:	b0c00007 	ldb	r3,0(r22)
    f108:	003daf06 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    f10c:	b0c00007 	ldb	r3,0(r22)
    f110:	01000a84 	movi	r4,42
    f114:	b4000044 	addi	r16,r22,1
    f118:	19025e26 	beq	r3,r4,fa94 <___vfiprintf_internal_r+0x1440>
    f11c:	1f3ff404 	addi	fp,r3,-48
    f120:	0009883a 	mov	r4,zero
    f124:	af025236 	bltu	r21,fp,fa70 <___vfiprintf_internal_r+0x141c>
    f128:	01400284 	movi	r5,10
    f12c:	0004ea80 	call	4ea8 <__mulsi3>
    f130:	80c00007 	ldb	r3,0(r16)
    f134:	1709883a 	add	r4,r2,fp
    f138:	85800044 	addi	r22,r16,1
    f13c:	1f3ff404 	addi	fp,r3,-48
    f140:	b021883a 	mov	r16,r22
    f144:	af3ff82e 	bgeu	r21,fp,f128 <__alt_exception_stack_pointer+0xf800f128>
    f148:	2021883a 	mov	r16,r4
    f14c:	203d9f0e 	bge	r4,zero,e7cc <__alt_exception_stack_pointer+0xf800e7cc>
    f150:	043fffc4 	movi	r16,-1
    f154:	003d9d06 	br	e7cc <__alt_exception_stack_pointer+0xf800e7cc>
    f158:	8c401014 	ori	r17,r17,64
    f15c:	b0c00007 	ldb	r3,0(r22)
    f160:	003d9906 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    f164:	d9002217 	ldw	r4,136(sp)
    f168:	d8001d85 	stb	zero,118(sp)
    f16c:	20c00204 	addi	r3,r4,8
    f170:	24c00017 	ldw	r19,0(r4)
    f174:	25000117 	ldw	r20,4(r4)
    f178:	8001e716 	blt	r16,zero,f918 <___vfiprintf_internal_r+0x12c4>
    f17c:	013fdfc4 	movi	r4,-129
    f180:	9d04b03a 	or	r2,r19,r20
    f184:	d8c02215 	stw	r3,136(sp)
    f188:	8922703a 	and	r17,r17,r4
    f18c:	002b883a 	mov	r21,zero
    f190:	103f2f1e 	bne	r2,zero,ee50 <__alt_exception_stack_pointer+0xf800ee50>
    f194:	803e2f26 	beq	r16,zero,ea54 <__alt_exception_stack_pointer+0xf800ea54>
    f198:	0027883a 	mov	r19,zero
    f19c:	9cc00c04 	addi	r19,r19,48
    f1a0:	dcc019c5 	stb	r19,103(sp)
    f1a4:	dd002817 	ldw	r20,160(sp)
    f1a8:	ddc019c4 	addi	r23,sp,103
    f1ac:	003e2c06 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    f1b0:	9cc03fcc 	andi	r19,r19,255
    f1b4:	b811883a 	mov	r8,r23
    f1b8:	9802571e 	bne	r19,zero,fb18 <___vfiprintf_internal_r+0x14c4>
    f1bc:	18005726 	beq	r3,zero,f31c <___vfiprintf_internal_r+0xcc8>
    f1c0:	04c00044 	movi	r19,1
    f1c4:	d8c01005 	stb	r3,64(sp)
    f1c8:	d8001d85 	stb	zero,118(sp)
    f1cc:	9829883a 	mov	r20,r19
    f1d0:	ddc01004 	addi	r23,sp,64
    f1d4:	003f0a06 	br	ee00 <__alt_exception_stack_pointer+0xf800ee00>
    f1d8:	d9402017 	ldw	r5,128(sp)
    f1dc:	d9002117 	ldw	r4,132(sp)
    f1e0:	d9801a04 	addi	r6,sp,104
    f1e4:	da802a15 	stw	r10,168(sp)
    f1e8:	000e5400 	call	e540 <__sprint_r.part.0>
    f1ec:	da802a17 	ldw	r10,168(sp)
    f1f0:	1000501e 	bne	r2,zero,f334 <___vfiprintf_internal_r+0xce0>
    f1f4:	d9801b17 	ldw	r6,108(sp)
    f1f8:	d8801c17 	ldw	r2,112(sp)
    f1fc:	d811883a 	mov	r8,sp
    f200:	31000044 	addi	r4,r6,1
    f204:	003e3606 	br	eae0 <__alt_exception_stack_pointer+0xf800eae0>
    f208:	d9001b17 	ldw	r4,108(sp)
    f20c:	d8801c17 	ldw	r2,112(sp)
    f210:	21400044 	addi	r5,r4,1
    f214:	d9801d87 	ldb	r6,118(sp)
    f218:	303e5226 	beq	r6,zero,eb64 <__alt_exception_stack_pointer+0xf800eb64>
    f21c:	01800044 	movi	r6,1
    f220:	d9001d84 	addi	r4,sp,118
    f224:	1185883a 	add	r2,r2,r6
    f228:	41000015 	stw	r4,0(r8)
    f22c:	41800115 	stw	r6,4(r8)
    f230:	d8801c15 	stw	r2,112(sp)
    f234:	d9401b15 	stw	r5,108(sp)
    f238:	010001c4 	movi	r4,7
    f23c:	2140b00e 	bge	r4,r5,f500 <___vfiprintf_internal_r+0xeac>
    f240:	1000f61e 	bne	r2,zero,f61c <___vfiprintf_internal_r+0xfc8>
    f244:	3800b31e 	bne	r7,zero,f514 <___vfiprintf_internal_r+0xec0>
    f248:	0009883a 	mov	r4,zero
    f24c:	300b883a 	mov	r5,r6
    f250:	d811883a 	mov	r8,sp
    f254:	01802004 	movi	r6,128
    f258:	19be5226 	beq	r3,r6,eba4 <__alt_exception_stack_pointer+0xf800eba4>
    f25c:	8521c83a 	sub	r16,r16,r20
    f260:	043e790e 	bge	zero,r16,ec48 <__alt_exception_stack_pointer+0xf800ec48>
    f264:	05400404 	movi	r21,16
    f268:	ac01b00e 	bge	r21,r16,f92c <___vfiprintf_internal_r+0x12d8>
    f26c:	01400074 	movhi	r5,1
    f270:	29557e04 	addi	r5,r5,22008
    f274:	d9402315 	stw	r5,140(sp)
    f278:	070001c4 	movi	fp,7
    f27c:	00000506 	br	f294 <___vfiprintf_internal_r+0xc40>
    f280:	21400084 	addi	r5,r4,2
    f284:	42000204 	addi	r8,r8,8
    f288:	1809883a 	mov	r4,r3
    f28c:	843ffc04 	addi	r16,r16,-16
    f290:	ac000d0e 	bge	r21,r16,f2c8 <___vfiprintf_internal_r+0xc74>
    f294:	10800404 	addi	r2,r2,16
    f298:	20c00044 	addi	r3,r4,1
    f29c:	44800015 	stw	r18,0(r8)
    f2a0:	45400115 	stw	r21,4(r8)
    f2a4:	d8801c15 	stw	r2,112(sp)
    f2a8:	d8c01b15 	stw	r3,108(sp)
    f2ac:	e0fff40e 	bge	fp,r3,f280 <__alt_exception_stack_pointer+0xf800f280>
    f2b0:	1000101e 	bne	r2,zero,f2f4 <___vfiprintf_internal_r+0xca0>
    f2b4:	843ffc04 	addi	r16,r16,-16
    f2b8:	01400044 	movi	r5,1
    f2bc:	0009883a 	mov	r4,zero
    f2c0:	d811883a 	mov	r8,sp
    f2c4:	ac3ff316 	blt	r21,r16,f294 <__alt_exception_stack_pointer+0xf800f294>
    f2c8:	d8c02317 	ldw	r3,140(sp)
    f2cc:	1405883a 	add	r2,r2,r16
    f2d0:	44000115 	stw	r16,4(r8)
    f2d4:	40c00015 	stw	r3,0(r8)
    f2d8:	d8801c15 	stw	r2,112(sp)
    f2dc:	d9401b15 	stw	r5,108(sp)
    f2e0:	00c001c4 	movi	r3,7
    f2e4:	19401916 	blt	r3,r5,f34c <___vfiprintf_internal_r+0xcf8>
    f2e8:	42000204 	addi	r8,r8,8
    f2ec:	29400044 	addi	r5,r5,1
    f2f0:	003e5506 	br	ec48 <__alt_exception_stack_pointer+0xf800ec48>
    f2f4:	d9402017 	ldw	r5,128(sp)
    f2f8:	d9002117 	ldw	r4,132(sp)
    f2fc:	d9801a04 	addi	r6,sp,104
    f300:	000e5400 	call	e540 <__sprint_r.part.0>
    f304:	10000b1e 	bne	r2,zero,f334 <___vfiprintf_internal_r+0xce0>
    f308:	d9001b17 	ldw	r4,108(sp)
    f30c:	d8801c17 	ldw	r2,112(sp)
    f310:	d811883a 	mov	r8,sp
    f314:	21400044 	addi	r5,r4,1
    f318:	003fdc06 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f31c:	d8801c17 	ldw	r2,112(sp)
    f320:	10000426 	beq	r2,zero,f334 <___vfiprintf_internal_r+0xce0>
    f324:	d9402017 	ldw	r5,128(sp)
    f328:	d9002117 	ldw	r4,132(sp)
    f32c:	d9801a04 	addi	r6,sp,104
    f330:	000e5400 	call	e540 <__sprint_r.part.0>
    f334:	d9402017 	ldw	r5,128(sp)
    f338:	2880030b 	ldhu	r2,12(r5)
    f33c:	1080100c 	andi	r2,r2,64
    f340:	10014d1e 	bne	r2,zero,f878 <___vfiprintf_internal_r+0x1224>
    f344:	d8802417 	ldw	r2,144(sp)
    f348:	003d9706 	br	e9a8 <__alt_exception_stack_pointer+0xf800e9a8>
    f34c:	1000d21e 	bne	r2,zero,f698 <___vfiprintf_internal_r+0x1044>
    f350:	00c00044 	movi	r3,1
    f354:	a005883a 	mov	r2,r20
    f358:	ddc00015 	stw	r23,0(sp)
    f35c:	dd000115 	stw	r20,4(sp)
    f360:	dd001c15 	stw	r20,112(sp)
    f364:	d8c01b15 	stw	r3,108(sp)
    f368:	d811883a 	mov	r8,sp
    f36c:	42000204 	addi	r8,r8,8
    f370:	8c40010c 	andi	r17,r17,4
    f374:	88004026 	beq	r17,zero,f478 <___vfiprintf_internal_r+0xe24>
    f378:	d9002517 	ldw	r4,148(sp)
    f37c:	24e3c83a 	sub	r17,r4,r19
    f380:	04403d0e 	bge	zero,r17,f478 <___vfiprintf_internal_r+0xe24>
    f384:	04000404 	movi	r16,16
    f388:	8441a90e 	bge	r16,r17,fa30 <___vfiprintf_internal_r+0x13dc>
    f38c:	00c00074 	movhi	r3,1
    f390:	18d58204 	addi	r3,r3,22024
    f394:	d9001b17 	ldw	r4,108(sp)
    f398:	d8c02315 	stw	r3,140(sp)
    f39c:	050001c4 	movi	r20,7
    f3a0:	dd402117 	ldw	r21,132(sp)
    f3a4:	ddc02017 	ldw	r23,128(sp)
    f3a8:	00000506 	br	f3c0 <___vfiprintf_internal_r+0xd6c>
    f3ac:	21400084 	addi	r5,r4,2
    f3b0:	42000204 	addi	r8,r8,8
    f3b4:	1809883a 	mov	r4,r3
    f3b8:	8c7ffc04 	addi	r17,r17,-16
    f3bc:	84400f0e 	bge	r16,r17,f3fc <___vfiprintf_internal_r+0xda8>
    f3c0:	01400074 	movhi	r5,1
    f3c4:	10800404 	addi	r2,r2,16
    f3c8:	20c00044 	addi	r3,r4,1
    f3cc:	29558204 	addi	r5,r5,22024
    f3d0:	41400015 	stw	r5,0(r8)
    f3d4:	44000115 	stw	r16,4(r8)
    f3d8:	d8801c15 	stw	r2,112(sp)
    f3dc:	d8c01b15 	stw	r3,108(sp)
    f3e0:	a0fff20e 	bge	r20,r3,f3ac <__alt_exception_stack_pointer+0xf800f3ac>
    f3e4:	1000141e 	bne	r2,zero,f438 <___vfiprintf_internal_r+0xde4>
    f3e8:	8c7ffc04 	addi	r17,r17,-16
    f3ec:	01400044 	movi	r5,1
    f3f0:	0009883a 	mov	r4,zero
    f3f4:	d811883a 	mov	r8,sp
    f3f8:	847ff116 	blt	r16,r17,f3c0 <__alt_exception_stack_pointer+0xf800f3c0>
    f3fc:	d8c02317 	ldw	r3,140(sp)
    f400:	1445883a 	add	r2,r2,r17
    f404:	44400115 	stw	r17,4(r8)
    f408:	40c00015 	stw	r3,0(r8)
    f40c:	d8801c15 	stw	r2,112(sp)
    f410:	d9401b15 	stw	r5,108(sp)
    f414:	00c001c4 	movi	r3,7
    f418:	1940170e 	bge	r3,r5,f478 <___vfiprintf_internal_r+0xe24>
    f41c:	1000101e 	bne	r2,zero,f460 <___vfiprintf_internal_r+0xe0c>
    f420:	d8802517 	ldw	r2,148(sp)
    f424:	14c11616 	blt	r2,r19,f880 <___vfiprintf_internal_r+0x122c>
    f428:	d9002417 	ldw	r4,144(sp)
    f42c:	2089883a 	add	r4,r4,r2
    f430:	d9002415 	stw	r4,144(sp)
    f434:	003e1806 	br	ec98 <__alt_exception_stack_pointer+0xf800ec98>
    f438:	d9801a04 	addi	r6,sp,104
    f43c:	b80b883a 	mov	r5,r23
    f440:	a809883a 	mov	r4,r21
    f444:	000e5400 	call	e540 <__sprint_r.part.0>
    f448:	103fba1e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f44c:	d9001b17 	ldw	r4,108(sp)
    f450:	d8801c17 	ldw	r2,112(sp)
    f454:	d811883a 	mov	r8,sp
    f458:	21400044 	addi	r5,r4,1
    f45c:	003fd606 	br	f3b8 <__alt_exception_stack_pointer+0xf800f3b8>
    f460:	d9402017 	ldw	r5,128(sp)
    f464:	d9002117 	ldw	r4,132(sp)
    f468:	d9801a04 	addi	r6,sp,104
    f46c:	000e5400 	call	e540 <__sprint_r.part.0>
    f470:	103fb01e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f474:	d8801c17 	ldw	r2,112(sp)
    f478:	d8c02517 	ldw	r3,148(sp)
    f47c:	1cc0010e 	bge	r3,r19,f484 <___vfiprintf_internal_r+0xe30>
    f480:	9807883a 	mov	r3,r19
    f484:	d9002417 	ldw	r4,144(sp)
    f488:	20c9883a 	add	r4,r4,r3
    f48c:	d9002415 	stw	r4,144(sp)
    f490:	103e0126 	beq	r2,zero,ec98 <__alt_exception_stack_pointer+0xf800ec98>
    f494:	d9402017 	ldw	r5,128(sp)
    f498:	d9002117 	ldw	r4,132(sp)
    f49c:	d9801a04 	addi	r6,sp,104
    f4a0:	000e5400 	call	e540 <__sprint_r.part.0>
    f4a4:	103dfc26 	beq	r2,zero,ec98 <__alt_exception_stack_pointer+0xf800ec98>
    f4a8:	003fa206 	br	f334 <__alt_exception_stack_pointer+0xf800f334>
    f4ac:	d9402017 	ldw	r5,128(sp)
    f4b0:	d9002117 	ldw	r4,132(sp)
    f4b4:	d9801a04 	addi	r6,sp,104
    f4b8:	d9c02b15 	stw	r7,172(sp)
    f4bc:	000e5400 	call	e540 <__sprint_r.part.0>
    f4c0:	d9c02b17 	ldw	r7,172(sp)
    f4c4:	103f9b1e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f4c8:	d9001b17 	ldw	r4,108(sp)
    f4cc:	d8801c17 	ldw	r2,112(sp)
    f4d0:	d811883a 	mov	r8,sp
    f4d4:	21800044 	addi	r6,r4,1
    f4d8:	003dbf06 	br	ebd8 <__alt_exception_stack_pointer+0xf800ebd8>
    f4dc:	1000d81e 	bne	r2,zero,f840 <___vfiprintf_internal_r+0x11ec>
    f4e0:	d9001d87 	ldb	r4,118(sp)
    f4e4:	20000a26 	beq	r4,zero,f510 <___vfiprintf_internal_r+0xebc>
    f4e8:	00800044 	movi	r2,1
    f4ec:	d9001d84 	addi	r4,sp,118
    f4f0:	100b883a 	mov	r5,r2
    f4f4:	d9000015 	stw	r4,0(sp)
    f4f8:	d8800115 	stw	r2,4(sp)
    f4fc:	d811883a 	mov	r8,sp
    f500:	2809883a 	mov	r4,r5
    f504:	42000204 	addi	r8,r8,8
    f508:	29400044 	addi	r5,r5,1
    f50c:	003d9506 	br	eb64 <__alt_exception_stack_pointer+0xf800eb64>
    f510:	3800fd26 	beq	r7,zero,f908 <___vfiprintf_internal_r+0x12b4>
    f514:	00800084 	movi	r2,2
    f518:	d9001d04 	addi	r4,sp,116
    f51c:	d9000015 	stw	r4,0(sp)
    f520:	d8800115 	stw	r2,4(sp)
    f524:	01400044 	movi	r5,1
    f528:	d811883a 	mov	r8,sp
    f52c:	2809883a 	mov	r4,r5
    f530:	42000204 	addi	r8,r8,8
    f534:	29400044 	addi	r5,r5,1
    f538:	003f4606 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f53c:	d8802517 	ldw	r2,148(sp)
    f540:	14c0010e 	bge	r2,r19,f548 <___vfiprintf_internal_r+0xef4>
    f544:	9805883a 	mov	r2,r19
    f548:	d9402417 	ldw	r5,144(sp)
    f54c:	288b883a 	add	r5,r5,r2
    f550:	d9402415 	stw	r5,144(sp)
    f554:	003dd006 	br	ec98 <__alt_exception_stack_pointer+0xf800ec98>
    f558:	d8001d85 	stb	zero,118(sp)
    f55c:	80005d16 	blt	r16,zero,f6d4 <___vfiprintf_internal_r+0x1080>
    f560:	00ffdfc4 	movi	r3,-129
    f564:	9d04b03a 	or	r2,r19,r20
    f568:	88e2703a 	and	r17,r17,r3
    f56c:	103d3726 	beq	r2,zero,ea4c <__alt_exception_stack_pointer+0xf800ea4c>
    f570:	002b883a 	mov	r21,zero
    f574:	d9002617 	ldw	r4,152(sp)
    f578:	ddc01a04 	addi	r23,sp,104
    f57c:	988003cc 	andi	r2,r19,15
    f580:	a006973a 	slli	r3,r20,28
    f584:	2085883a 	add	r2,r4,r2
    f588:	9826d13a 	srli	r19,r19,4
    f58c:	10800003 	ldbu	r2,0(r2)
    f590:	a028d13a 	srli	r20,r20,4
    f594:	bdffffc4 	addi	r23,r23,-1
    f598:	1ce6b03a 	or	r19,r3,r19
    f59c:	b8800005 	stb	r2,0(r23)
    f5a0:	9d04b03a 	or	r2,r19,r20
    f5a4:	103ff51e 	bne	r2,zero,f57c <__alt_exception_stack_pointer+0xf800f57c>
    f5a8:	d8801e17 	ldw	r2,120(sp)
    f5ac:	15e9c83a 	sub	r20,r2,r23
    f5b0:	003d2b06 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    f5b4:	d9402017 	ldw	r5,128(sp)
    f5b8:	d9002117 	ldw	r4,132(sp)
    f5bc:	d9801a04 	addi	r6,sp,104
    f5c0:	000e5400 	call	e540 <__sprint_r.part.0>
    f5c4:	103f5b1e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f5c8:	d8801c17 	ldw	r2,112(sp)
    f5cc:	d811883a 	mov	r8,sp
    f5d0:	003f6706 	br	f370 <__alt_exception_stack_pointer+0xf800f370>
    f5d4:	d9402017 	ldw	r5,128(sp)
    f5d8:	d9002117 	ldw	r4,132(sp)
    f5dc:	d9801a04 	addi	r6,sp,104
    f5e0:	000e5400 	call	e540 <__sprint_r.part.0>
    f5e4:	103f531e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f5e8:	d811883a 	mov	r8,sp
    f5ec:	003cd906 	br	e954 <__alt_exception_stack_pointer+0xf800e954>
    f5f0:	10803fcc 	andi	r2,r2,255
    f5f4:	1080201c 	xori	r2,r2,128
    f5f8:	10bfe004 	addi	r2,r2,-128
    f5fc:	00c00c04 	movi	r3,48
    f600:	10ffe926 	beq	r2,r3,f5a8 <__alt_exception_stack_pointer+0xf800f5a8>
    f604:	b8ffffc5 	stb	r3,-1(r23)
    f608:	d8c01e17 	ldw	r3,120(sp)
    f60c:	b8bfffc4 	addi	r2,r23,-1
    f610:	102f883a 	mov	r23,r2
    f614:	18a9c83a 	sub	r20,r3,r2
    f618:	003d1106 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    f61c:	d9402017 	ldw	r5,128(sp)
    f620:	d9002117 	ldw	r4,132(sp)
    f624:	d9801a04 	addi	r6,sp,104
    f628:	d8c02a15 	stw	r3,168(sp)
    f62c:	d9c02b15 	stw	r7,172(sp)
    f630:	000e5400 	call	e540 <__sprint_r.part.0>
    f634:	d8c02a17 	ldw	r3,168(sp)
    f638:	d9c02b17 	ldw	r7,172(sp)
    f63c:	103f3d1e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f640:	d9001b17 	ldw	r4,108(sp)
    f644:	d8801c17 	ldw	r2,112(sp)
    f648:	d811883a 	mov	r8,sp
    f64c:	21400044 	addi	r5,r4,1
    f650:	003d4406 	br	eb64 <__alt_exception_stack_pointer+0xf800eb64>
    f654:	d9402017 	ldw	r5,128(sp)
    f658:	d9002117 	ldw	r4,132(sp)
    f65c:	d9801a04 	addi	r6,sp,104
    f660:	d8c02a15 	stw	r3,168(sp)
    f664:	000e5400 	call	e540 <__sprint_r.part.0>
    f668:	d8c02a17 	ldw	r3,168(sp)
    f66c:	103f311e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f670:	d9001b17 	ldw	r4,108(sp)
    f674:	d8801c17 	ldw	r2,112(sp)
    f678:	d811883a 	mov	r8,sp
    f67c:	21400044 	addi	r5,r4,1
    f680:	003ef406 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f684:	1000bd1e 	bne	r2,zero,f97c <___vfiprintf_internal_r+0x1328>
    f688:	01400044 	movi	r5,1
    f68c:	0009883a 	mov	r4,zero
    f690:	d811883a 	mov	r8,sp
    f694:	003ef106 	br	f25c <__alt_exception_stack_pointer+0xf800f25c>
    f698:	d9402017 	ldw	r5,128(sp)
    f69c:	d9002117 	ldw	r4,132(sp)
    f6a0:	d9801a04 	addi	r6,sp,104
    f6a4:	000e5400 	call	e540 <__sprint_r.part.0>
    f6a8:	103f221e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f6ac:	d9401b17 	ldw	r5,108(sp)
    f6b0:	d8801c17 	ldw	r2,112(sp)
    f6b4:	d811883a 	mov	r8,sp
    f6b8:	29400044 	addi	r5,r5,1
    f6bc:	003d6206 	br	ec48 <__alt_exception_stack_pointer+0xf800ec48>
    f6c0:	01400074 	movhi	r5,1
    f6c4:	29551e04 	addi	r5,r5,21624
    f6c8:	d9402615 	stw	r5,152(sp)
    f6cc:	d8c02215 	stw	r3,136(sp)
    f6d0:	1023883a 	mov	r17,r2
    f6d4:	9d04b03a 	or	r2,r19,r20
    f6d8:	103fa51e 	bne	r2,zero,f570 <__alt_exception_stack_pointer+0xf800f570>
    f6dc:	002b883a 	mov	r21,zero
    f6e0:	00800084 	movi	r2,2
    f6e4:	003e4a06 	br	f010 <__alt_exception_stack_pointer+0xf800f010>
    f6e8:	01400074 	movhi	r5,1
    f6ec:	29551e04 	addi	r5,r5,21624
    f6f0:	002b883a 	mov	r21,zero
    f6f4:	d9402615 	stw	r5,152(sp)
    f6f8:	003f9e06 	br	f574 <__alt_exception_stack_pointer+0xf800f574>
    f6fc:	d9402217 	ldw	r5,136(sp)
    f700:	d8001d85 	stb	zero,118(sp)
    f704:	0029883a 	mov	r20,zero
    f708:	28800104 	addi	r2,r5,4
    f70c:	2cc00017 	ldw	r19,0(r5)
    f710:	803e3a16 	blt	r16,zero,effc <__alt_exception_stack_pointer+0xf800effc>
    f714:	00ffdfc4 	movi	r3,-129
    f718:	d8802215 	stw	r2,136(sp)
    f71c:	88e2703a 	and	r17,r17,r3
    f720:	002b883a 	mov	r21,zero
    f724:	983e9b26 	beq	r19,zero,f194 <__alt_exception_stack_pointer+0xf800f194>
    f728:	00800244 	movi	r2,9
    f72c:	14fdc936 	bltu	r2,r19,ee54 <__alt_exception_stack_pointer+0xf800ee54>
    f730:	003e9a06 	br	f19c <__alt_exception_stack_pointer+0xf800f19c>
    f734:	00800c04 	movi	r2,48
    f738:	d8c01d45 	stb	r3,117(sp)
    f73c:	d8801d05 	stb	r2,116(sp)
    f740:	d8001d85 	stb	zero,118(sp)
    f744:	88c00094 	ori	r3,r17,2
    f748:	80009c16 	blt	r16,zero,f9bc <___vfiprintf_internal_r+0x1368>
    f74c:	00bfdfc4 	movi	r2,-129
    f750:	88a2703a 	and	r17,r17,r2
    f754:	8c400094 	ori	r17,r17,2
    f758:	002b883a 	mov	r21,zero
    f75c:	003f8506 	br	f574 <__alt_exception_stack_pointer+0xf800f574>
    f760:	b029883a 	mov	r20,r22
    f764:	003c0b06 	br	e794 <__alt_exception_stack_pointer+0xf800e794>
    f768:	04e7c83a 	sub	r19,zero,r19
    f76c:	05400b44 	movi	r21,45
    f770:	9804c03a 	cmpne	r2,r19,zero
    f774:	0529c83a 	sub	r20,zero,r20
    f778:	dd401d85 	stb	r21,118(sp)
    f77c:	a0a9c83a 	sub	r20,r20,r2
    f780:	80009716 	blt	r16,zero,f9e0 <___vfiprintf_internal_r+0x138c>
    f784:	00bfdfc4 	movi	r2,-129
    f788:	88a2703a 	and	r17,r17,r2
    f78c:	003db006 	br	ee50 <__alt_exception_stack_pointer+0xf800ee50>
    f790:	b0c00007 	ldb	r3,0(r22)
    f794:	003c0c06 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    f798:	8880100c 	andi	r2,r17,64
    f79c:	d8001d85 	stb	zero,118(sp)
    f7a0:	1000461e 	bne	r2,zero,f8bc <___vfiprintf_internal_r+0x1268>
    f7a4:	d9002217 	ldw	r4,136(sp)
    f7a8:	0029883a 	mov	r20,zero
    f7ac:	20800104 	addi	r2,r4,4
    f7b0:	24c00017 	ldw	r19,0(r4)
    f7b4:	803df80e 	bge	r16,zero,ef98 <__alt_exception_stack_pointer+0xf800ef98>
    f7b8:	9d06b03a 	or	r3,r19,r20
    f7bc:	d8802215 	stw	r2,136(sp)
    f7c0:	183d5e1e 	bne	r3,zero,ed3c <__alt_exception_stack_pointer+0xf800ed3c>
    f7c4:	002b883a 	mov	r21,zero
    f7c8:	0005883a 	mov	r2,zero
    f7cc:	003e1006 	br	f010 <__alt_exception_stack_pointer+0xf800f010>
    f7d0:	8880040c 	andi	r2,r17,16
    f7d4:	1000321e 	bne	r2,zero,f8a0 <___vfiprintf_internal_r+0x124c>
    f7d8:	8c40100c 	andi	r17,r17,64
    f7dc:	88008d26 	beq	r17,zero,fa14 <___vfiprintf_internal_r+0x13c0>
    f7e0:	d9402217 	ldw	r5,136(sp)
    f7e4:	d8c02417 	ldw	r3,144(sp)
    f7e8:	28800017 	ldw	r2,0(r5)
    f7ec:	29400104 	addi	r5,r5,4
    f7f0:	d9402215 	stw	r5,136(sp)
    f7f4:	10c0000d 	sth	r3,0(r2)
    f7f8:	003bca06 	br	e724 <__alt_exception_stack_pointer+0xf800e724>
    f7fc:	8880100c 	andi	r2,r17,64
    f800:	10003a26 	beq	r2,zero,f8ec <___vfiprintf_internal_r+0x1298>
    f804:	d8802217 	ldw	r2,136(sp)
    f808:	14c0000f 	ldh	r19,0(r2)
    f80c:	10800104 	addi	r2,r2,4
    f810:	d8802215 	stw	r2,136(sp)
    f814:	9829d7fa 	srai	r20,r19,31
    f818:	a005883a 	mov	r2,r20
    f81c:	003d8506 	br	ee34 <__alt_exception_stack_pointer+0xf800ee34>
    f820:	8880100c 	andi	r2,r17,64
    f824:	10002b26 	beq	r2,zero,f8d4 <___vfiprintf_internal_r+0x1280>
    f828:	d8802217 	ldw	r2,136(sp)
    f82c:	0029883a 	mov	r20,zero
    f830:	14c0000b 	ldhu	r19,0(r2)
    f834:	10800104 	addi	r2,r2,4
    f838:	d8802215 	stw	r2,136(sp)
    f83c:	003d5d06 	br	edb4 <__alt_exception_stack_pointer+0xf800edb4>
    f840:	d9402017 	ldw	r5,128(sp)
    f844:	d9002117 	ldw	r4,132(sp)
    f848:	d9801a04 	addi	r6,sp,104
    f84c:	d8c02a15 	stw	r3,168(sp)
    f850:	d9c02b15 	stw	r7,172(sp)
    f854:	000e5400 	call	e540 <__sprint_r.part.0>
    f858:	d8c02a17 	ldw	r3,168(sp)
    f85c:	d9c02b17 	ldw	r7,172(sp)
    f860:	103eb41e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f864:	d9001b17 	ldw	r4,108(sp)
    f868:	d8801c17 	ldw	r2,112(sp)
    f86c:	d811883a 	mov	r8,sp
    f870:	21400044 	addi	r5,r4,1
    f874:	003e6706 	br	f214 <__alt_exception_stack_pointer+0xf800f214>
    f878:	00bfffc4 	movi	r2,-1
    f87c:	003c4a06 	br	e9a8 <__alt_exception_stack_pointer+0xf800e9a8>
    f880:	9805883a 	mov	r2,r19
    f884:	003ee806 	br	f428 <__alt_exception_stack_pointer+0xf800f428>
    f888:	d8c02217 	ldw	r3,136(sp)
    f88c:	0029883a 	mov	r20,zero
    f890:	18800104 	addi	r2,r3,4
    f894:	1cc0000b 	ldhu	r19,0(r3)
    f898:	803f9e0e 	bge	r16,zero,f714 <__alt_exception_stack_pointer+0xf800f714>
    f89c:	003dd706 	br	effc <__alt_exception_stack_pointer+0xf800effc>
    f8a0:	d8c02217 	ldw	r3,136(sp)
    f8a4:	d9002417 	ldw	r4,144(sp)
    f8a8:	18800017 	ldw	r2,0(r3)
    f8ac:	18c00104 	addi	r3,r3,4
    f8b0:	d8c02215 	stw	r3,136(sp)
    f8b4:	11000015 	stw	r4,0(r2)
    f8b8:	003b9a06 	br	e724 <__alt_exception_stack_pointer+0xf800e724>
    f8bc:	d8c02217 	ldw	r3,136(sp)
    f8c0:	0029883a 	mov	r20,zero
    f8c4:	18800104 	addi	r2,r3,4
    f8c8:	1cc0000b 	ldhu	r19,0(r3)
    f8cc:	803db20e 	bge	r16,zero,ef98 <__alt_exception_stack_pointer+0xf800ef98>
    f8d0:	003fb906 	br	f7b8 <__alt_exception_stack_pointer+0xf800f7b8>
    f8d4:	d9002217 	ldw	r4,136(sp)
    f8d8:	0029883a 	mov	r20,zero
    f8dc:	24c00017 	ldw	r19,0(r4)
    f8e0:	21000104 	addi	r4,r4,4
    f8e4:	d9002215 	stw	r4,136(sp)
    f8e8:	003d3206 	br	edb4 <__alt_exception_stack_pointer+0xf800edb4>
    f8ec:	d8c02217 	ldw	r3,136(sp)
    f8f0:	1cc00017 	ldw	r19,0(r3)
    f8f4:	18c00104 	addi	r3,r3,4
    f8f8:	d8c02215 	stw	r3,136(sp)
    f8fc:	9829d7fa 	srai	r20,r19,31
    f900:	a005883a 	mov	r2,r20
    f904:	003d4b06 	br	ee34 <__alt_exception_stack_pointer+0xf800ee34>
    f908:	0009883a 	mov	r4,zero
    f90c:	01400044 	movi	r5,1
    f910:	d811883a 	mov	r8,sp
    f914:	003e4f06 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f918:	d8c02215 	stw	r3,136(sp)
    f91c:	002b883a 	mov	r21,zero
    f920:	003db806 	br	f004 <__alt_exception_stack_pointer+0xf800f004>
    f924:	d811883a 	mov	r8,sp
    f928:	003e9606 	br	f384 <__alt_exception_stack_pointer+0xf800f384>
    f92c:	01000074 	movhi	r4,1
    f930:	21157e04 	addi	r4,r4,22008
    f934:	d9002315 	stw	r4,140(sp)
    f938:	003e6306 	br	f2c8 <__alt_exception_stack_pointer+0xf800f2c8>
    f93c:	b0c00043 	ldbu	r3,1(r22)
    f940:	8c400814 	ori	r17,r17,32
    f944:	b5800044 	addi	r22,r22,1
    f948:	18c03fcc 	andi	r3,r3,255
    f94c:	18c0201c 	xori	r3,r3,128
    f950:	18ffe004 	addi	r3,r3,-128
    f954:	003b9c06 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    f958:	b809883a 	mov	r4,r23
    f95c:	da002a15 	stw	r8,168(sp)
    f960:	00077640 	call	7764 <strlen>
    f964:	1029883a 	mov	r20,r2
    f968:	dd401d83 	ldbu	r21,118(sp)
    f96c:	df002215 	stw	fp,136(sp)
    f970:	0021883a 	mov	r16,zero
    f974:	da002a17 	ldw	r8,168(sp)
    f978:	003c3906 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    f97c:	d9402017 	ldw	r5,128(sp)
    f980:	d9002117 	ldw	r4,132(sp)
    f984:	d9801a04 	addi	r6,sp,104
    f988:	000e5400 	call	e540 <__sprint_r.part.0>
    f98c:	103e691e 	bne	r2,zero,f334 <__alt_exception_stack_pointer+0xf800f334>
    f990:	d9001b17 	ldw	r4,108(sp)
    f994:	d8801c17 	ldw	r2,112(sp)
    f998:	d811883a 	mov	r8,sp
    f99c:	21400044 	addi	r5,r4,1
    f9a0:	003e2e06 	br	f25c <__alt_exception_stack_pointer+0xf800f25c>
    f9a4:	01000074 	movhi	r4,1
    f9a8:	21158204 	addi	r4,r4,22024
    f9ac:	d9002315 	stw	r4,140(sp)
    f9b0:	d9001b17 	ldw	r4,108(sp)
    f9b4:	21000044 	addi	r4,r4,1
    f9b8:	003c5e06 	br	eb34 <__alt_exception_stack_pointer+0xf800eb34>
    f9bc:	002b883a 	mov	r21,zero
    f9c0:	00800084 	movi	r2,2
    f9c4:	10803fcc 	andi	r2,r2,255
    f9c8:	01000044 	movi	r4,1
    f9cc:	11002b26 	beq	r2,r4,fa7c <___vfiprintf_internal_r+0x1428>
    f9d0:	01000084 	movi	r4,2
    f9d4:	11002b1e 	bne	r2,r4,fa84 <___vfiprintf_internal_r+0x1430>
    f9d8:	1823883a 	mov	r17,r3
    f9dc:	003ee506 	br	f574 <__alt_exception_stack_pointer+0xf800f574>
    f9e0:	8807883a 	mov	r3,r17
    f9e4:	00800044 	movi	r2,1
    f9e8:	003ff606 	br	f9c4 <__alt_exception_stack_pointer+0xf800f9c4>
    f9ec:	00800184 	movi	r2,6
    f9f0:	1400012e 	bgeu	r2,r16,f9f8 <___vfiprintf_internal_r+0x13a4>
    f9f4:	1021883a 	mov	r16,r2
    f9f8:	8029883a 	mov	r20,r16
    f9fc:	8027883a 	mov	r19,r16
    fa00:	80002216 	blt	r16,zero,fa8c <___vfiprintf_internal_r+0x1438>
    fa04:	05c00074 	movhi	r23,1
    fa08:	df002215 	stw	fp,136(sp)
    fa0c:	bdd52304 	addi	r23,r23,21644
    fa10:	003cfb06 	br	ee00 <__alt_exception_stack_pointer+0xf800ee00>
    fa14:	d9002217 	ldw	r4,136(sp)
    fa18:	d9402417 	ldw	r5,144(sp)
    fa1c:	20800017 	ldw	r2,0(r4)
    fa20:	21000104 	addi	r4,r4,4
    fa24:	d9002215 	stw	r4,136(sp)
    fa28:	11400015 	stw	r5,0(r2)
    fa2c:	003b3d06 	br	e724 <__alt_exception_stack_pointer+0xf800e724>
    fa30:	01400074 	movhi	r5,1
    fa34:	29558204 	addi	r5,r5,22024
    fa38:	d9402315 	stw	r5,140(sp)
    fa3c:	d9401b17 	ldw	r5,108(sp)
    fa40:	29400044 	addi	r5,r5,1
    fa44:	003e6d06 	br	f3fc <__alt_exception_stack_pointer+0xf800f3fc>
    fa48:	8029883a 	mov	r20,r16
    fa4c:	dd401d83 	ldbu	r21,118(sp)
    fa50:	df002215 	stw	fp,136(sp)
    fa54:	0021883a 	mov	r16,zero
    fa58:	003c0106 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    fa5c:	00c00074 	movhi	r3,1
    fa60:	18d57e04 	addi	r3,r3,22008
    fa64:	d8c02315 	stw	r3,140(sp)
    fa68:	280d883a 	mov	r6,r5
    fa6c:	003c6906 	br	ec14 <__alt_exception_stack_pointer+0xf800ec14>
    fa70:	802d883a 	mov	r22,r16
    fa74:	0021883a 	mov	r16,zero
    fa78:	003b5406 	br	e7cc <__alt_exception_stack_pointer+0xf800e7cc>
    fa7c:	1823883a 	mov	r17,r3
    fa80:	003cf306 	br	ee50 <__alt_exception_stack_pointer+0xf800ee50>
    fa84:	1823883a 	mov	r17,r3
    fa88:	003cad06 	br	ed40 <__alt_exception_stack_pointer+0xf800ed40>
    fa8c:	0027883a 	mov	r19,zero
    fa90:	003fdc06 	br	fa04 <__alt_exception_stack_pointer+0xf800fa04>
    fa94:	d9402217 	ldw	r5,136(sp)
    fa98:	8005883a 	mov	r2,r16
    fa9c:	b0c00043 	ldbu	r3,1(r22)
    faa0:	2c000017 	ldw	r16,0(r5)
    faa4:	29000104 	addi	r4,r5,4
    faa8:	d9002215 	stw	r4,136(sp)
    faac:	102d883a 	mov	r22,r2
    fab0:	803fa50e 	bge	r16,zero,f948 <__alt_exception_stack_pointer+0xf800f948>
    fab4:	18c03fcc 	andi	r3,r3,255
    fab8:	18c0201c 	xori	r3,r3,128
    fabc:	043fffc4 	movi	r16,-1
    fac0:	18ffe004 	addi	r3,r3,-128
    fac4:	003b4006 	br	e7c8 <__alt_exception_stack_pointer+0xf800e7c8>
    fac8:	d9402303 	ldbu	r5,140(sp)
    facc:	d9401d85 	stb	r5,118(sp)
    fad0:	003cae06 	br	ed8c <__alt_exception_stack_pointer+0xf800ed8c>
    fad4:	d8c02303 	ldbu	r3,140(sp)
    fad8:	d8c01d85 	stb	r3,118(sp)
    fadc:	003d1406 	br	ef30 <__alt_exception_stack_pointer+0xf800ef30>
    fae0:	d8c02303 	ldbu	r3,140(sp)
    fae4:	d8c01d85 	stb	r3,118(sp)
    fae8:	003cca06 	br	ee14 <__alt_exception_stack_pointer+0xf800ee14>
    faec:	8880004c 	andi	r2,r17,1
    faf0:	002b883a 	mov	r21,zero
    faf4:	10000526 	beq	r2,zero,fb0c <___vfiprintf_internal_r+0x14b8>
    faf8:	00800c04 	movi	r2,48
    fafc:	d88019c5 	stb	r2,103(sp)
    fb00:	dd002817 	ldw	r20,160(sp)
    fb04:	ddc019c4 	addi	r23,sp,103
    fb08:	003bd506 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    fb0c:	0029883a 	mov	r20,zero
    fb10:	ddc01a04 	addi	r23,sp,104
    fb14:	003bd206 	br	ea60 <__alt_exception_stack_pointer+0xf800ea60>
    fb18:	d9002303 	ldbu	r4,140(sp)
    fb1c:	d9001d85 	stb	r4,118(sp)
    fb20:	003da606 	br	f1bc <__alt_exception_stack_pointer+0xf800f1bc>
    fb24:	d8c02303 	ldbu	r3,140(sp)
    fb28:	d8c01d85 	stb	r3,118(sp)
    fb2c:	003c7606 	br	ed08 <__alt_exception_stack_pointer+0xf800ed08>
    fb30:	d8c02303 	ldbu	r3,140(sp)
    fb34:	d8c01d85 	stb	r3,118(sp)
    fb38:	003c6506 	br	ecd0 <__alt_exception_stack_pointer+0xf800ecd0>
    fb3c:	d9002303 	ldbu	r4,140(sp)
    fb40:	d9001d85 	stb	r4,118(sp)
    fb44:	003d3d06 	br	f03c <__alt_exception_stack_pointer+0xf800f03c>
    fb48:	d8c02303 	ldbu	r3,140(sp)
    fb4c:	d8c01d85 	stb	r3,118(sp)
    fb50:	003d1d06 	br	efc8 <__alt_exception_stack_pointer+0xf800efc8>
    fb54:	d8c02303 	ldbu	r3,140(sp)
    fb58:	d8c01d85 	stb	r3,118(sp)
    fb5c:	003d0306 	br	ef6c <__alt_exception_stack_pointer+0xf800ef6c>

0000fb60 <__vfiprintf_internal>:
    fb60:	00800074 	movhi	r2,1
    fb64:	109c7304 	addi	r2,r2,29132
    fb68:	300f883a 	mov	r7,r6
    fb6c:	280d883a 	mov	r6,r5
    fb70:	200b883a 	mov	r5,r4
    fb74:	11000017 	ldw	r4,0(r2)
    fb78:	000e6541 	jmpi	e654 <___vfiprintf_internal_r>

0000fb7c <__sbprintf>:
    fb7c:	2880030b 	ldhu	r2,12(r5)
    fb80:	2ac01917 	ldw	r11,100(r5)
    fb84:	2a80038b 	ldhu	r10,14(r5)
    fb88:	2a400717 	ldw	r9,28(r5)
    fb8c:	2a000917 	ldw	r8,36(r5)
    fb90:	defee204 	addi	sp,sp,-1144
    fb94:	00c10004 	movi	r3,1024
    fb98:	dc011a15 	stw	r16,1128(sp)
    fb9c:	10bfff4c 	andi	r2,r2,65533
    fba0:	2821883a 	mov	r16,r5
    fba4:	d8cb883a 	add	r5,sp,r3
    fba8:	dc811c15 	stw	r18,1136(sp)
    fbac:	dc411b15 	stw	r17,1132(sp)
    fbb0:	dfc11d15 	stw	ra,1140(sp)
    fbb4:	2025883a 	mov	r18,r4
    fbb8:	d881030d 	sth	r2,1036(sp)
    fbbc:	dac11915 	stw	r11,1124(sp)
    fbc0:	da81038d 	sth	r10,1038(sp)
    fbc4:	da410715 	stw	r9,1052(sp)
    fbc8:	da010915 	stw	r8,1060(sp)
    fbcc:	dec10015 	stw	sp,1024(sp)
    fbd0:	dec10415 	stw	sp,1040(sp)
    fbd4:	d8c10215 	stw	r3,1032(sp)
    fbd8:	d8c10515 	stw	r3,1044(sp)
    fbdc:	d8010615 	stw	zero,1048(sp)
    fbe0:	000e6540 	call	e654 <___vfiprintf_internal_r>
    fbe4:	1023883a 	mov	r17,r2
    fbe8:	10000416 	blt	r2,zero,fbfc <__sbprintf+0x80>
    fbec:	d9410004 	addi	r5,sp,1024
    fbf0:	9009883a 	mov	r4,r18
    fbf4:	000b7d80 	call	b7d8 <_fflush_r>
    fbf8:	10000d1e 	bne	r2,zero,fc30 <__sbprintf+0xb4>
    fbfc:	d881030b 	ldhu	r2,1036(sp)
    fc00:	1080100c 	andi	r2,r2,64
    fc04:	10000326 	beq	r2,zero,fc14 <__sbprintf+0x98>
    fc08:	8080030b 	ldhu	r2,12(r16)
    fc0c:	10801014 	ori	r2,r2,64
    fc10:	8080030d 	sth	r2,12(r16)
    fc14:	8805883a 	mov	r2,r17
    fc18:	dfc11d17 	ldw	ra,1140(sp)
    fc1c:	dc811c17 	ldw	r18,1136(sp)
    fc20:	dc411b17 	ldw	r17,1132(sp)
    fc24:	dc011a17 	ldw	r16,1128(sp)
    fc28:	dec11e04 	addi	sp,sp,1144
    fc2c:	f800283a 	ret
    fc30:	047fffc4 	movi	r17,-1
    fc34:	003ff106 	br	fbfc <__alt_exception_stack_pointer+0xf800fbfc>

0000fc38 <_write_r>:
    fc38:	defffd04 	addi	sp,sp,-12
    fc3c:	2805883a 	mov	r2,r5
    fc40:	dc000015 	stw	r16,0(sp)
    fc44:	040000b4 	movhi	r16,2
    fc48:	dc400115 	stw	r17,4(sp)
    fc4c:	300b883a 	mov	r5,r6
    fc50:	84236d04 	addi	r16,r16,-29260
    fc54:	2023883a 	mov	r17,r4
    fc58:	380d883a 	mov	r6,r7
    fc5c:	1009883a 	mov	r4,r2
    fc60:	dfc00215 	stw	ra,8(sp)
    fc64:	80000015 	stw	zero,0(r16)
    fc68:	00126280 	call	12628 <write>
    fc6c:	00ffffc4 	movi	r3,-1
    fc70:	10c00526 	beq	r2,r3,fc88 <_write_r+0x50>
    fc74:	dfc00217 	ldw	ra,8(sp)
    fc78:	dc400117 	ldw	r17,4(sp)
    fc7c:	dc000017 	ldw	r16,0(sp)
    fc80:	dec00304 	addi	sp,sp,12
    fc84:	f800283a 	ret
    fc88:	80c00017 	ldw	r3,0(r16)
    fc8c:	183ff926 	beq	r3,zero,fc74 <__alt_exception_stack_pointer+0xf800fc74>
    fc90:	88c00015 	stw	r3,0(r17)
    fc94:	003ff706 	br	fc74 <__alt_exception_stack_pointer+0xf800fc74>

0000fc98 <_close_r>:
    fc98:	defffd04 	addi	sp,sp,-12
    fc9c:	dc000015 	stw	r16,0(sp)
    fca0:	040000b4 	movhi	r16,2
    fca4:	dc400115 	stw	r17,4(sp)
    fca8:	84236d04 	addi	r16,r16,-29260
    fcac:	2023883a 	mov	r17,r4
    fcb0:	2809883a 	mov	r4,r5
    fcb4:	dfc00215 	stw	ra,8(sp)
    fcb8:	80000015 	stw	zero,0(r16)
    fcbc:	0011cec0 	call	11cec <close>
    fcc0:	00ffffc4 	movi	r3,-1
    fcc4:	10c00526 	beq	r2,r3,fcdc <_close_r+0x44>
    fcc8:	dfc00217 	ldw	ra,8(sp)
    fccc:	dc400117 	ldw	r17,4(sp)
    fcd0:	dc000017 	ldw	r16,0(sp)
    fcd4:	dec00304 	addi	sp,sp,12
    fcd8:	f800283a 	ret
    fcdc:	80c00017 	ldw	r3,0(r16)
    fce0:	183ff926 	beq	r3,zero,fcc8 <__alt_exception_stack_pointer+0xf800fcc8>
    fce4:	88c00015 	stw	r3,0(r17)
    fce8:	003ff706 	br	fcc8 <__alt_exception_stack_pointer+0xf800fcc8>

0000fcec <_calloc_r>:
    fcec:	defffe04 	addi	sp,sp,-8
    fcf0:	2805883a 	mov	r2,r5
    fcf4:	dc000015 	stw	r16,0(sp)
    fcf8:	300b883a 	mov	r5,r6
    fcfc:	2021883a 	mov	r16,r4
    fd00:	1009883a 	mov	r4,r2
    fd04:	dfc00115 	stw	ra,4(sp)
    fd08:	0004ea80 	call	4ea8 <__mulsi3>
    fd0c:	100b883a 	mov	r5,r2
    fd10:	8009883a 	mov	r4,r16
    fd14:	0006c7c0 	call	6c7c <_malloc_r>
    fd18:	10002926 	beq	r2,zero,fdc0 <_calloc_r+0xd4>
    fd1c:	11bfff17 	ldw	r6,-4(r2)
    fd20:	1021883a 	mov	r16,r2
    fd24:	00bfff04 	movi	r2,-4
    fd28:	308c703a 	and	r6,r6,r2
    fd2c:	00c00904 	movi	r3,36
    fd30:	308d883a 	add	r6,r6,r2
    fd34:	19801636 	bltu	r3,r6,fd90 <_calloc_r+0xa4>
    fd38:	008004c4 	movi	r2,19
    fd3c:	11800b2e 	bgeu	r2,r6,fd6c <_calloc_r+0x80>
    fd40:	80000015 	stw	zero,0(r16)
    fd44:	80000115 	stw	zero,4(r16)
    fd48:	008006c4 	movi	r2,27
    fd4c:	11801a2e 	bgeu	r2,r6,fdb8 <_calloc_r+0xcc>
    fd50:	80000215 	stw	zero,8(r16)
    fd54:	80000315 	stw	zero,12(r16)
    fd58:	30c0151e 	bne	r6,r3,fdb0 <_calloc_r+0xc4>
    fd5c:	80000415 	stw	zero,16(r16)
    fd60:	80800604 	addi	r2,r16,24
    fd64:	80000515 	stw	zero,20(r16)
    fd68:	00000106 	br	fd70 <_calloc_r+0x84>
    fd6c:	8005883a 	mov	r2,r16
    fd70:	10000015 	stw	zero,0(r2)
    fd74:	10000115 	stw	zero,4(r2)
    fd78:	10000215 	stw	zero,8(r2)
    fd7c:	8005883a 	mov	r2,r16
    fd80:	dfc00117 	ldw	ra,4(sp)
    fd84:	dc000017 	ldw	r16,0(sp)
    fd88:	dec00204 	addi	sp,sp,8
    fd8c:	f800283a 	ret
    fd90:	000b883a 	mov	r5,zero
    fd94:	8009883a 	mov	r4,r16
    fd98:	000cb700 	call	cb70 <memset>
    fd9c:	8005883a 	mov	r2,r16
    fda0:	dfc00117 	ldw	ra,4(sp)
    fda4:	dc000017 	ldw	r16,0(sp)
    fda8:	dec00204 	addi	sp,sp,8
    fdac:	f800283a 	ret
    fdb0:	80800404 	addi	r2,r16,16
    fdb4:	003fee06 	br	fd70 <__alt_exception_stack_pointer+0xf800fd70>
    fdb8:	80800204 	addi	r2,r16,8
    fdbc:	003fec06 	br	fd70 <__alt_exception_stack_pointer+0xf800fd70>
    fdc0:	0005883a 	mov	r2,zero
    fdc4:	003fee06 	br	fd80 <__alt_exception_stack_pointer+0xf800fd80>

0000fdc8 <_fclose_r>:
    fdc8:	28003926 	beq	r5,zero,feb0 <_fclose_r+0xe8>
    fdcc:	defffc04 	addi	sp,sp,-16
    fdd0:	dc400115 	stw	r17,4(sp)
    fdd4:	dc000015 	stw	r16,0(sp)
    fdd8:	dfc00315 	stw	ra,12(sp)
    fddc:	dc800215 	stw	r18,8(sp)
    fde0:	2023883a 	mov	r17,r4
    fde4:	2821883a 	mov	r16,r5
    fde8:	20000226 	beq	r4,zero,fdf4 <_fclose_r+0x2c>
    fdec:	20800e17 	ldw	r2,56(r4)
    fdf0:	10002726 	beq	r2,zero,fe90 <_fclose_r+0xc8>
    fdf4:	8080030f 	ldh	r2,12(r16)
    fdf8:	1000071e 	bne	r2,zero,fe18 <_fclose_r+0x50>
    fdfc:	0005883a 	mov	r2,zero
    fe00:	dfc00317 	ldw	ra,12(sp)
    fe04:	dc800217 	ldw	r18,8(sp)
    fe08:	dc400117 	ldw	r17,4(sp)
    fe0c:	dc000017 	ldw	r16,0(sp)
    fe10:	dec00404 	addi	sp,sp,16
    fe14:	f800283a 	ret
    fe18:	800b883a 	mov	r5,r16
    fe1c:	8809883a 	mov	r4,r17
    fe20:	000b5bc0 	call	b5bc <__sflush_r>
    fe24:	1025883a 	mov	r18,r2
    fe28:	80800b17 	ldw	r2,44(r16)
    fe2c:	10000426 	beq	r2,zero,fe40 <_fclose_r+0x78>
    fe30:	81400717 	ldw	r5,28(r16)
    fe34:	8809883a 	mov	r4,r17
    fe38:	103ee83a 	callr	r2
    fe3c:	10001616 	blt	r2,zero,fe98 <_fclose_r+0xd0>
    fe40:	8080030b 	ldhu	r2,12(r16)
    fe44:	1080200c 	andi	r2,r2,128
    fe48:	1000151e 	bne	r2,zero,fea0 <_fclose_r+0xd8>
    fe4c:	81400c17 	ldw	r5,48(r16)
    fe50:	28000526 	beq	r5,zero,fe68 <_fclose_r+0xa0>
    fe54:	80801004 	addi	r2,r16,64
    fe58:	28800226 	beq	r5,r2,fe64 <_fclose_r+0x9c>
    fe5c:	8809883a 	mov	r4,r17
    fe60:	000bd380 	call	bd38 <_free_r>
    fe64:	80000c15 	stw	zero,48(r16)
    fe68:	81401117 	ldw	r5,68(r16)
    fe6c:	28000326 	beq	r5,zero,fe7c <_fclose_r+0xb4>
    fe70:	8809883a 	mov	r4,r17
    fe74:	000bd380 	call	bd38 <_free_r>
    fe78:	80001115 	stw	zero,68(r16)
    fe7c:	000bbd40 	call	bbd4 <__sfp_lock_acquire>
    fe80:	8000030d 	sth	zero,12(r16)
    fe84:	000bbd80 	call	bbd8 <__sfp_lock_release>
    fe88:	9005883a 	mov	r2,r18
    fe8c:	003fdc06 	br	fe00 <__alt_exception_stack_pointer+0xf800fe00>
    fe90:	000bbc40 	call	bbc4 <__sinit>
    fe94:	003fd706 	br	fdf4 <__alt_exception_stack_pointer+0xf800fdf4>
    fe98:	04bfffc4 	movi	r18,-1
    fe9c:	003fe806 	br	fe40 <__alt_exception_stack_pointer+0xf800fe40>
    fea0:	81400417 	ldw	r5,16(r16)
    fea4:	8809883a 	mov	r4,r17
    fea8:	000bd380 	call	bd38 <_free_r>
    feac:	003fe706 	br	fe4c <__alt_exception_stack_pointer+0xf800fe4c>
    feb0:	0005883a 	mov	r2,zero
    feb4:	f800283a 	ret

0000feb8 <fclose>:
    feb8:	00800074 	movhi	r2,1
    febc:	109c7304 	addi	r2,r2,29132
    fec0:	200b883a 	mov	r5,r4
    fec4:	11000017 	ldw	r4,0(r2)
    fec8:	000fdc81 	jmpi	fdc8 <_fclose_r>

0000fecc <__fputwc>:
    fecc:	defff804 	addi	sp,sp,-32
    fed0:	dcc00415 	stw	r19,16(sp)
    fed4:	dc800315 	stw	r18,12(sp)
    fed8:	dc000115 	stw	r16,4(sp)
    fedc:	dfc00715 	stw	ra,28(sp)
    fee0:	dd400615 	stw	r21,24(sp)
    fee4:	dd000515 	stw	r20,20(sp)
    fee8:	dc400215 	stw	r17,8(sp)
    feec:	2027883a 	mov	r19,r4
    fef0:	2825883a 	mov	r18,r5
    fef4:	3021883a 	mov	r16,r6
    fef8:	000c7200 	call	c720 <__locale_mb_cur_max>
    fefc:	00c00044 	movi	r3,1
    ff00:	10c03e26 	beq	r2,r3,fffc <__fputwc+0x130>
    ff04:	81c01704 	addi	r7,r16,92
    ff08:	900d883a 	mov	r6,r18
    ff0c:	d80b883a 	mov	r5,sp
    ff10:	9809883a 	mov	r4,r19
    ff14:	001039c0 	call	1039c <_wcrtomb_r>
    ff18:	1029883a 	mov	r20,r2
    ff1c:	00bfffc4 	movi	r2,-1
    ff20:	a0802026 	beq	r20,r2,ffa4 <__fputwc+0xd8>
    ff24:	d9400003 	ldbu	r5,0(sp)
    ff28:	a0001c26 	beq	r20,zero,ff9c <__fputwc+0xd0>
    ff2c:	0023883a 	mov	r17,zero
    ff30:	05400284 	movi	r21,10
    ff34:	00000906 	br	ff5c <__fputwc+0x90>
    ff38:	80800017 	ldw	r2,0(r16)
    ff3c:	11400005 	stb	r5,0(r2)
    ff40:	80c00017 	ldw	r3,0(r16)
    ff44:	18c00044 	addi	r3,r3,1
    ff48:	80c00015 	stw	r3,0(r16)
    ff4c:	8c400044 	addi	r17,r17,1
    ff50:	dc45883a 	add	r2,sp,r17
    ff54:	8d00112e 	bgeu	r17,r20,ff9c <__fputwc+0xd0>
    ff58:	11400003 	ldbu	r5,0(r2)
    ff5c:	80c00217 	ldw	r3,8(r16)
    ff60:	18ffffc4 	addi	r3,r3,-1
    ff64:	80c00215 	stw	r3,8(r16)
    ff68:	183ff30e 	bge	r3,zero,ff38 <__alt_exception_stack_pointer+0xf800ff38>
    ff6c:	80800617 	ldw	r2,24(r16)
    ff70:	18801916 	blt	r3,r2,ffd8 <__fputwc+0x10c>
    ff74:	80800017 	ldw	r2,0(r16)
    ff78:	11400005 	stb	r5,0(r2)
    ff7c:	80800017 	ldw	r2,0(r16)
    ff80:	10c00003 	ldbu	r3,0(r2)
    ff84:	10800044 	addi	r2,r2,1
    ff88:	1d402326 	beq	r3,r21,10018 <__fputwc+0x14c>
    ff8c:	80800015 	stw	r2,0(r16)
    ff90:	8c400044 	addi	r17,r17,1
    ff94:	dc45883a 	add	r2,sp,r17
    ff98:	8d3fef36 	bltu	r17,r20,ff58 <__alt_exception_stack_pointer+0xf800ff58>
    ff9c:	9005883a 	mov	r2,r18
    ffa0:	00000406 	br	ffb4 <__fputwc+0xe8>
    ffa4:	80c0030b 	ldhu	r3,12(r16)
    ffa8:	a005883a 	mov	r2,r20
    ffac:	18c01014 	ori	r3,r3,64
    ffb0:	80c0030d 	sth	r3,12(r16)
    ffb4:	dfc00717 	ldw	ra,28(sp)
    ffb8:	dd400617 	ldw	r21,24(sp)
    ffbc:	dd000517 	ldw	r20,20(sp)
    ffc0:	dcc00417 	ldw	r19,16(sp)
    ffc4:	dc800317 	ldw	r18,12(sp)
    ffc8:	dc400217 	ldw	r17,8(sp)
    ffcc:	dc000117 	ldw	r16,4(sp)
    ffd0:	dec00804 	addi	sp,sp,32
    ffd4:	f800283a 	ret
    ffd8:	800d883a 	mov	r6,r16
    ffdc:	29403fcc 	andi	r5,r5,255
    ffe0:	9809883a 	mov	r4,r19
    ffe4:	00102440 	call	10244 <__swbuf_r>
    ffe8:	10bfffe0 	cmpeqi	r2,r2,-1
    ffec:	10803fcc 	andi	r2,r2,255
    fff0:	103fd626 	beq	r2,zero,ff4c <__alt_exception_stack_pointer+0xf800ff4c>
    fff4:	00bfffc4 	movi	r2,-1
    fff8:	003fee06 	br	ffb4 <__alt_exception_stack_pointer+0xf800ffb4>
    fffc:	90ffffc4 	addi	r3,r18,-1
   10000:	01003f84 	movi	r4,254
   10004:	20ffbf36 	bltu	r4,r3,ff04 <__alt_exception_stack_pointer+0xf800ff04>
   10008:	900b883a 	mov	r5,r18
   1000c:	dc800005 	stb	r18,0(sp)
   10010:	1029883a 	mov	r20,r2
   10014:	003fc506 	br	ff2c <__alt_exception_stack_pointer+0xf800ff2c>
   10018:	800d883a 	mov	r6,r16
   1001c:	a80b883a 	mov	r5,r21
   10020:	9809883a 	mov	r4,r19
   10024:	00102440 	call	10244 <__swbuf_r>
   10028:	10bfffe0 	cmpeqi	r2,r2,-1
   1002c:	003fef06 	br	ffec <__alt_exception_stack_pointer+0xf800ffec>

00010030 <_fputwc_r>:
   10030:	3080030b 	ldhu	r2,12(r6)
   10034:	10c8000c 	andi	r3,r2,8192
   10038:	1800051e 	bne	r3,zero,10050 <_fputwc_r+0x20>
   1003c:	30c01917 	ldw	r3,100(r6)
   10040:	10880014 	ori	r2,r2,8192
   10044:	3080030d 	sth	r2,12(r6)
   10048:	18880014 	ori	r2,r3,8192
   1004c:	30801915 	stw	r2,100(r6)
   10050:	000fecc1 	jmpi	fecc <__fputwc>

00010054 <fputwc>:
   10054:	00800074 	movhi	r2,1
   10058:	defffc04 	addi	sp,sp,-16
   1005c:	109c7304 	addi	r2,r2,29132
   10060:	dc000115 	stw	r16,4(sp)
   10064:	14000017 	ldw	r16,0(r2)
   10068:	dc400215 	stw	r17,8(sp)
   1006c:	dfc00315 	stw	ra,12(sp)
   10070:	2023883a 	mov	r17,r4
   10074:	80000226 	beq	r16,zero,10080 <fputwc+0x2c>
   10078:	80800e17 	ldw	r2,56(r16)
   1007c:	10001026 	beq	r2,zero,100c0 <fputwc+0x6c>
   10080:	2880030b 	ldhu	r2,12(r5)
   10084:	10c8000c 	andi	r3,r2,8192
   10088:	1800051e 	bne	r3,zero,100a0 <fputwc+0x4c>
   1008c:	28c01917 	ldw	r3,100(r5)
   10090:	10880014 	ori	r2,r2,8192
   10094:	2880030d 	sth	r2,12(r5)
   10098:	18880014 	ori	r2,r3,8192
   1009c:	28801915 	stw	r2,100(r5)
   100a0:	280d883a 	mov	r6,r5
   100a4:	8009883a 	mov	r4,r16
   100a8:	880b883a 	mov	r5,r17
   100ac:	dfc00317 	ldw	ra,12(sp)
   100b0:	dc400217 	ldw	r17,8(sp)
   100b4:	dc000117 	ldw	r16,4(sp)
   100b8:	dec00404 	addi	sp,sp,16
   100bc:	000fecc1 	jmpi	fecc <__fputwc>
   100c0:	8009883a 	mov	r4,r16
   100c4:	d9400015 	stw	r5,0(sp)
   100c8:	000bbc40 	call	bbc4 <__sinit>
   100cc:	d9400017 	ldw	r5,0(sp)
   100d0:	003feb06 	br	10080 <__alt_exception_stack_pointer+0xf8010080>

000100d4 <_fstat_r>:
   100d4:	defffd04 	addi	sp,sp,-12
   100d8:	2805883a 	mov	r2,r5
   100dc:	dc000015 	stw	r16,0(sp)
   100e0:	040000b4 	movhi	r16,2
   100e4:	dc400115 	stw	r17,4(sp)
   100e8:	84236d04 	addi	r16,r16,-29260
   100ec:	2023883a 	mov	r17,r4
   100f0:	300b883a 	mov	r5,r6
   100f4:	1009883a 	mov	r4,r2
   100f8:	dfc00215 	stw	ra,8(sp)
   100fc:	80000015 	stw	zero,0(r16)
   10100:	0011e2c0 	call	11e2c <fstat>
   10104:	00ffffc4 	movi	r3,-1
   10108:	10c00526 	beq	r2,r3,10120 <_fstat_r+0x4c>
   1010c:	dfc00217 	ldw	ra,8(sp)
   10110:	dc400117 	ldw	r17,4(sp)
   10114:	dc000017 	ldw	r16,0(sp)
   10118:	dec00304 	addi	sp,sp,12
   1011c:	f800283a 	ret
   10120:	80c00017 	ldw	r3,0(r16)
   10124:	183ff926 	beq	r3,zero,1010c <__alt_exception_stack_pointer+0xf801010c>
   10128:	88c00015 	stw	r3,0(r17)
   1012c:	003ff706 	br	1010c <__alt_exception_stack_pointer+0xf801010c>

00010130 <_isatty_r>:
   10130:	defffd04 	addi	sp,sp,-12
   10134:	dc000015 	stw	r16,0(sp)
   10138:	040000b4 	movhi	r16,2
   1013c:	dc400115 	stw	r17,4(sp)
   10140:	84236d04 	addi	r16,r16,-29260
   10144:	2023883a 	mov	r17,r4
   10148:	2809883a 	mov	r4,r5
   1014c:	dfc00215 	stw	ra,8(sp)
   10150:	80000015 	stw	zero,0(r16)
   10154:	0011f200 	call	11f20 <isatty>
   10158:	00ffffc4 	movi	r3,-1
   1015c:	10c00526 	beq	r2,r3,10174 <_isatty_r+0x44>
   10160:	dfc00217 	ldw	ra,8(sp)
   10164:	dc400117 	ldw	r17,4(sp)
   10168:	dc000017 	ldw	r16,0(sp)
   1016c:	dec00304 	addi	sp,sp,12
   10170:	f800283a 	ret
   10174:	80c00017 	ldw	r3,0(r16)
   10178:	183ff926 	beq	r3,zero,10160 <__alt_exception_stack_pointer+0xf8010160>
   1017c:	88c00015 	stw	r3,0(r17)
   10180:	003ff706 	br	10160 <__alt_exception_stack_pointer+0xf8010160>

00010184 <_lseek_r>:
   10184:	defffd04 	addi	sp,sp,-12
   10188:	2805883a 	mov	r2,r5
   1018c:	dc000015 	stw	r16,0(sp)
   10190:	040000b4 	movhi	r16,2
   10194:	dc400115 	stw	r17,4(sp)
   10198:	300b883a 	mov	r5,r6
   1019c:	84236d04 	addi	r16,r16,-29260
   101a0:	2023883a 	mov	r17,r4
   101a4:	380d883a 	mov	r6,r7
   101a8:	1009883a 	mov	r4,r2
   101ac:	dfc00215 	stw	ra,8(sp)
   101b0:	80000015 	stw	zero,0(r16)
   101b4:	00120f40 	call	120f4 <lseek>
   101b8:	00ffffc4 	movi	r3,-1
   101bc:	10c00526 	beq	r2,r3,101d4 <_lseek_r+0x50>
   101c0:	dfc00217 	ldw	ra,8(sp)
   101c4:	dc400117 	ldw	r17,4(sp)
   101c8:	dc000017 	ldw	r16,0(sp)
   101cc:	dec00304 	addi	sp,sp,12
   101d0:	f800283a 	ret
   101d4:	80c00017 	ldw	r3,0(r16)
   101d8:	183ff926 	beq	r3,zero,101c0 <__alt_exception_stack_pointer+0xf80101c0>
   101dc:	88c00015 	stw	r3,0(r17)
   101e0:	003ff706 	br	101c0 <__alt_exception_stack_pointer+0xf80101c0>

000101e4 <_read_r>:
   101e4:	defffd04 	addi	sp,sp,-12
   101e8:	2805883a 	mov	r2,r5
   101ec:	dc000015 	stw	r16,0(sp)
   101f0:	040000b4 	movhi	r16,2
   101f4:	dc400115 	stw	r17,4(sp)
   101f8:	300b883a 	mov	r5,r6
   101fc:	84236d04 	addi	r16,r16,-29260
   10200:	2023883a 	mov	r17,r4
   10204:	380d883a 	mov	r6,r7
   10208:	1009883a 	mov	r4,r2
   1020c:	dfc00215 	stw	ra,8(sp)
   10210:	80000015 	stw	zero,0(r16)
   10214:	00122d00 	call	122d0 <read>
   10218:	00ffffc4 	movi	r3,-1
   1021c:	10c00526 	beq	r2,r3,10234 <_read_r+0x50>
   10220:	dfc00217 	ldw	ra,8(sp)
   10224:	dc400117 	ldw	r17,4(sp)
   10228:	dc000017 	ldw	r16,0(sp)
   1022c:	dec00304 	addi	sp,sp,12
   10230:	f800283a 	ret
   10234:	80c00017 	ldw	r3,0(r16)
   10238:	183ff926 	beq	r3,zero,10220 <__alt_exception_stack_pointer+0xf8010220>
   1023c:	88c00015 	stw	r3,0(r17)
   10240:	003ff706 	br	10220 <__alt_exception_stack_pointer+0xf8010220>

00010244 <__swbuf_r>:
   10244:	defffb04 	addi	sp,sp,-20
   10248:	dcc00315 	stw	r19,12(sp)
   1024c:	dc800215 	stw	r18,8(sp)
   10250:	dc000015 	stw	r16,0(sp)
   10254:	dfc00415 	stw	ra,16(sp)
   10258:	dc400115 	stw	r17,4(sp)
   1025c:	2025883a 	mov	r18,r4
   10260:	2827883a 	mov	r19,r5
   10264:	3021883a 	mov	r16,r6
   10268:	20000226 	beq	r4,zero,10274 <__swbuf_r+0x30>
   1026c:	20800e17 	ldw	r2,56(r4)
   10270:	10004226 	beq	r2,zero,1037c <__swbuf_r+0x138>
   10274:	80800617 	ldw	r2,24(r16)
   10278:	8100030b 	ldhu	r4,12(r16)
   1027c:	80800215 	stw	r2,8(r16)
   10280:	2080020c 	andi	r2,r4,8
   10284:	10003626 	beq	r2,zero,10360 <__swbuf_r+0x11c>
   10288:	80c00417 	ldw	r3,16(r16)
   1028c:	18003426 	beq	r3,zero,10360 <__swbuf_r+0x11c>
   10290:	2088000c 	andi	r2,r4,8192
   10294:	9c403fcc 	andi	r17,r19,255
   10298:	10001a26 	beq	r2,zero,10304 <__swbuf_r+0xc0>
   1029c:	80800017 	ldw	r2,0(r16)
   102a0:	81000517 	ldw	r4,20(r16)
   102a4:	10c7c83a 	sub	r3,r2,r3
   102a8:	1900200e 	bge	r3,r4,1032c <__swbuf_r+0xe8>
   102ac:	18c00044 	addi	r3,r3,1
   102b0:	81000217 	ldw	r4,8(r16)
   102b4:	11400044 	addi	r5,r2,1
   102b8:	81400015 	stw	r5,0(r16)
   102bc:	213fffc4 	addi	r4,r4,-1
   102c0:	81000215 	stw	r4,8(r16)
   102c4:	14c00005 	stb	r19,0(r2)
   102c8:	80800517 	ldw	r2,20(r16)
   102cc:	10c01e26 	beq	r2,r3,10348 <__swbuf_r+0x104>
   102d0:	8080030b 	ldhu	r2,12(r16)
   102d4:	1080004c 	andi	r2,r2,1
   102d8:	10000226 	beq	r2,zero,102e4 <__swbuf_r+0xa0>
   102dc:	00800284 	movi	r2,10
   102e0:	88801926 	beq	r17,r2,10348 <__swbuf_r+0x104>
   102e4:	8805883a 	mov	r2,r17
   102e8:	dfc00417 	ldw	ra,16(sp)
   102ec:	dcc00317 	ldw	r19,12(sp)
   102f0:	dc800217 	ldw	r18,8(sp)
   102f4:	dc400117 	ldw	r17,4(sp)
   102f8:	dc000017 	ldw	r16,0(sp)
   102fc:	dec00504 	addi	sp,sp,20
   10300:	f800283a 	ret
   10304:	81401917 	ldw	r5,100(r16)
   10308:	00b7ffc4 	movi	r2,-8193
   1030c:	21080014 	ori	r4,r4,8192
   10310:	2884703a 	and	r2,r5,r2
   10314:	80801915 	stw	r2,100(r16)
   10318:	80800017 	ldw	r2,0(r16)
   1031c:	8100030d 	sth	r4,12(r16)
   10320:	81000517 	ldw	r4,20(r16)
   10324:	10c7c83a 	sub	r3,r2,r3
   10328:	193fe016 	blt	r3,r4,102ac <__alt_exception_stack_pointer+0xf80102ac>
   1032c:	800b883a 	mov	r5,r16
   10330:	9009883a 	mov	r4,r18
   10334:	000b7d80 	call	b7d8 <_fflush_r>
   10338:	1000071e 	bne	r2,zero,10358 <__swbuf_r+0x114>
   1033c:	80800017 	ldw	r2,0(r16)
   10340:	00c00044 	movi	r3,1
   10344:	003fda06 	br	102b0 <__alt_exception_stack_pointer+0xf80102b0>
   10348:	800b883a 	mov	r5,r16
   1034c:	9009883a 	mov	r4,r18
   10350:	000b7d80 	call	b7d8 <_fflush_r>
   10354:	103fe326 	beq	r2,zero,102e4 <__alt_exception_stack_pointer+0xf80102e4>
   10358:	00bfffc4 	movi	r2,-1
   1035c:	003fe206 	br	102e8 <__alt_exception_stack_pointer+0xf80102e8>
   10360:	800b883a 	mov	r5,r16
   10364:	9009883a 	mov	r4,r18
   10368:	0009bb80 	call	9bb8 <__swsetup_r>
   1036c:	103ffa1e 	bne	r2,zero,10358 <__alt_exception_stack_pointer+0xf8010358>
   10370:	8100030b 	ldhu	r4,12(r16)
   10374:	80c00417 	ldw	r3,16(r16)
   10378:	003fc506 	br	10290 <__alt_exception_stack_pointer+0xf8010290>
   1037c:	000bbc40 	call	bbc4 <__sinit>
   10380:	003fbc06 	br	10274 <__alt_exception_stack_pointer+0xf8010274>

00010384 <__swbuf>:
   10384:	00800074 	movhi	r2,1
   10388:	109c7304 	addi	r2,r2,29132
   1038c:	280d883a 	mov	r6,r5
   10390:	200b883a 	mov	r5,r4
   10394:	11000017 	ldw	r4,0(r2)
   10398:	00102441 	jmpi	10244 <__swbuf_r>

0001039c <_wcrtomb_r>:
   1039c:	defff604 	addi	sp,sp,-40
   103a0:	00800074 	movhi	r2,1
   103a4:	dc800815 	stw	r18,32(sp)
   103a8:	dc400715 	stw	r17,28(sp)
   103ac:	dc000615 	stw	r16,24(sp)
   103b0:	109c7704 	addi	r2,r2,29148
   103b4:	dfc00915 	stw	ra,36(sp)
   103b8:	2021883a 	mov	r16,r4
   103bc:	3823883a 	mov	r17,r7
   103c0:	14800017 	ldw	r18,0(r2)
   103c4:	28001426 	beq	r5,zero,10418 <_wcrtomb_r+0x7c>
   103c8:	d9400415 	stw	r5,16(sp)
   103cc:	d9800515 	stw	r6,20(sp)
   103d0:	000c7140 	call	c714 <__locale_charset>
   103d4:	d9800517 	ldw	r6,20(sp)
   103d8:	d9400417 	ldw	r5,16(sp)
   103dc:	100f883a 	mov	r7,r2
   103e0:	dc400015 	stw	r17,0(sp)
   103e4:	8009883a 	mov	r4,r16
   103e8:	903ee83a 	callr	r18
   103ec:	00ffffc4 	movi	r3,-1
   103f0:	10c0031e 	bne	r2,r3,10400 <_wcrtomb_r+0x64>
   103f4:	88000015 	stw	zero,0(r17)
   103f8:	00c02284 	movi	r3,138
   103fc:	80c00015 	stw	r3,0(r16)
   10400:	dfc00917 	ldw	ra,36(sp)
   10404:	dc800817 	ldw	r18,32(sp)
   10408:	dc400717 	ldw	r17,28(sp)
   1040c:	dc000617 	ldw	r16,24(sp)
   10410:	dec00a04 	addi	sp,sp,40
   10414:	f800283a 	ret
   10418:	000c7140 	call	c714 <__locale_charset>
   1041c:	100f883a 	mov	r7,r2
   10420:	dc400015 	stw	r17,0(sp)
   10424:	000d883a 	mov	r6,zero
   10428:	d9400104 	addi	r5,sp,4
   1042c:	8009883a 	mov	r4,r16
   10430:	903ee83a 	callr	r18
   10434:	003fed06 	br	103ec <__alt_exception_stack_pointer+0xf80103ec>

00010438 <wcrtomb>:
   10438:	defff604 	addi	sp,sp,-40
   1043c:	00800074 	movhi	r2,1
   10440:	dc800615 	stw	r18,24(sp)
   10444:	dc400515 	stw	r17,20(sp)
   10448:	109c7304 	addi	r2,r2,29132
   1044c:	dfc00915 	stw	ra,36(sp)
   10450:	dd000815 	stw	r20,32(sp)
   10454:	dcc00715 	stw	r19,28(sp)
   10458:	dc000415 	stw	r16,16(sp)
   1045c:	3025883a 	mov	r18,r6
   10460:	14400017 	ldw	r17,0(r2)
   10464:	20001926 	beq	r4,zero,104cc <wcrtomb+0x94>
   10468:	00800074 	movhi	r2,1
   1046c:	109c7704 	addi	r2,r2,29148
   10470:	15000017 	ldw	r20,0(r2)
   10474:	2021883a 	mov	r16,r4
   10478:	2827883a 	mov	r19,r5
   1047c:	000c7140 	call	c714 <__locale_charset>
   10480:	100f883a 	mov	r7,r2
   10484:	dc800015 	stw	r18,0(sp)
   10488:	980d883a 	mov	r6,r19
   1048c:	800b883a 	mov	r5,r16
   10490:	8809883a 	mov	r4,r17
   10494:	a03ee83a 	callr	r20
   10498:	00ffffc4 	movi	r3,-1
   1049c:	10c0031e 	bne	r2,r3,104ac <wcrtomb+0x74>
   104a0:	90000015 	stw	zero,0(r18)
   104a4:	00c02284 	movi	r3,138
   104a8:	88c00015 	stw	r3,0(r17)
   104ac:	dfc00917 	ldw	ra,36(sp)
   104b0:	dd000817 	ldw	r20,32(sp)
   104b4:	dcc00717 	ldw	r19,28(sp)
   104b8:	dc800617 	ldw	r18,24(sp)
   104bc:	dc400517 	ldw	r17,20(sp)
   104c0:	dc000417 	ldw	r16,16(sp)
   104c4:	dec00a04 	addi	sp,sp,40
   104c8:	f800283a 	ret
   104cc:	00800074 	movhi	r2,1
   104d0:	109c7704 	addi	r2,r2,29148
   104d4:	14000017 	ldw	r16,0(r2)
   104d8:	000c7140 	call	c714 <__locale_charset>
   104dc:	100f883a 	mov	r7,r2
   104e0:	dc800015 	stw	r18,0(sp)
   104e4:	000d883a 	mov	r6,zero
   104e8:	d9400104 	addi	r5,sp,4
   104ec:	8809883a 	mov	r4,r17
   104f0:	803ee83a 	callr	r16
   104f4:	003fe806 	br	10498 <__alt_exception_stack_pointer+0xf8010498>

000104f8 <__ascii_wctomb>:
   104f8:	28000526 	beq	r5,zero,10510 <__ascii_wctomb+0x18>
   104fc:	00803fc4 	movi	r2,255
   10500:	11800536 	bltu	r2,r6,10518 <__ascii_wctomb+0x20>
   10504:	29800005 	stb	r6,0(r5)
   10508:	00800044 	movi	r2,1
   1050c:	f800283a 	ret
   10510:	0005883a 	mov	r2,zero
   10514:	f800283a 	ret
   10518:	00802284 	movi	r2,138
   1051c:	20800015 	stw	r2,0(r4)
   10520:	00bfffc4 	movi	r2,-1
   10524:	f800283a 	ret

00010528 <_wctomb_r>:
   10528:	00800074 	movhi	r2,1
   1052c:	defff904 	addi	sp,sp,-28
   10530:	109c7704 	addi	r2,r2,29148
   10534:	dfc00615 	stw	ra,24(sp)
   10538:	dc400515 	stw	r17,20(sp)
   1053c:	dc000415 	stw	r16,16(sp)
   10540:	3823883a 	mov	r17,r7
   10544:	14000017 	ldw	r16,0(r2)
   10548:	d9000115 	stw	r4,4(sp)
   1054c:	d9400215 	stw	r5,8(sp)
   10550:	d9800315 	stw	r6,12(sp)
   10554:	000c7140 	call	c714 <__locale_charset>
   10558:	d9800317 	ldw	r6,12(sp)
   1055c:	d9400217 	ldw	r5,8(sp)
   10560:	d9000117 	ldw	r4,4(sp)
   10564:	100f883a 	mov	r7,r2
   10568:	dc400015 	stw	r17,0(sp)
   1056c:	803ee83a 	callr	r16
   10570:	dfc00617 	ldw	ra,24(sp)
   10574:	dc400517 	ldw	r17,20(sp)
   10578:	dc000417 	ldw	r16,16(sp)
   1057c:	dec00704 	addi	sp,sp,28
   10580:	f800283a 	ret

00010584 <__udivdi3>:
   10584:	defff404 	addi	sp,sp,-48
   10588:	dcc00515 	stw	r19,20(sp)
   1058c:	dc000215 	stw	r16,8(sp)
   10590:	dfc00b15 	stw	ra,44(sp)
   10594:	df000a15 	stw	fp,40(sp)
   10598:	ddc00915 	stw	r23,36(sp)
   1059c:	dd800815 	stw	r22,32(sp)
   105a0:	dd400715 	stw	r21,28(sp)
   105a4:	dd000615 	stw	r20,24(sp)
   105a8:	dc800415 	stw	r18,16(sp)
   105ac:	dc400315 	stw	r17,12(sp)
   105b0:	2027883a 	mov	r19,r4
   105b4:	2821883a 	mov	r16,r5
   105b8:	3800461e 	bne	r7,zero,106d4 <__udivdi3+0x150>
   105bc:	3023883a 	mov	r17,r6
   105c0:	2025883a 	mov	r18,r4
   105c4:	2980572e 	bgeu	r5,r6,10724 <__udivdi3+0x1a0>
   105c8:	00bfffd4 	movui	r2,65535
   105cc:	282d883a 	mov	r22,r5
   105d0:	1180b236 	bltu	r2,r6,1089c <__udivdi3+0x318>
   105d4:	00803fc4 	movi	r2,255
   105d8:	1185803a 	cmpltu	r2,r2,r6
   105dc:	100490fa 	slli	r2,r2,3
   105e0:	3086d83a 	srl	r3,r6,r2
   105e4:	01000074 	movhi	r4,1
   105e8:	2114d304 	addi	r4,r4,21324
   105ec:	20c7883a 	add	r3,r4,r3
   105f0:	18c00003 	ldbu	r3,0(r3)
   105f4:	1885883a 	add	r2,r3,r2
   105f8:	00c00804 	movi	r3,32
   105fc:	1887c83a 	sub	r3,r3,r2
   10600:	18000526 	beq	r3,zero,10618 <__udivdi3+0x94>
   10604:	80e0983a 	sll	r16,r16,r3
   10608:	9884d83a 	srl	r2,r19,r2
   1060c:	30e2983a 	sll	r17,r6,r3
   10610:	98e4983a 	sll	r18,r19,r3
   10614:	142cb03a 	or	r22,r2,r16
   10618:	882ad43a 	srli	r21,r17,16
   1061c:	b009883a 	mov	r4,r22
   10620:	8d3fffcc 	andi	r20,r17,65535
   10624:	a80b883a 	mov	r5,r21
   10628:	0004e500 	call	4e50 <__umodsi3>
   1062c:	b009883a 	mov	r4,r22
   10630:	a80b883a 	mov	r5,r21
   10634:	1027883a 	mov	r19,r2
   10638:	0004dec0 	call	4dec <__udivsi3>
   1063c:	100b883a 	mov	r5,r2
   10640:	a009883a 	mov	r4,r20
   10644:	102d883a 	mov	r22,r2
   10648:	0004ea80 	call	4ea8 <__mulsi3>
   1064c:	9826943a 	slli	r19,r19,16
   10650:	9006d43a 	srli	r3,r18,16
   10654:	1cc6b03a 	or	r3,r3,r19
   10658:	1880052e 	bgeu	r3,r2,10670 <__udivdi3+0xec>
   1065c:	1c47883a 	add	r3,r3,r17
   10660:	b13fffc4 	addi	r4,r22,-1
   10664:	1c400136 	bltu	r3,r17,1066c <__udivdi3+0xe8>
   10668:	18814236 	bltu	r3,r2,10b74 <__udivdi3+0x5f0>
   1066c:	202d883a 	mov	r22,r4
   10670:	18a1c83a 	sub	r16,r3,r2
   10674:	8009883a 	mov	r4,r16
   10678:	a80b883a 	mov	r5,r21
   1067c:	0004e500 	call	4e50 <__umodsi3>
   10680:	1027883a 	mov	r19,r2
   10684:	8009883a 	mov	r4,r16
   10688:	a80b883a 	mov	r5,r21
   1068c:	9826943a 	slli	r19,r19,16
   10690:	0004dec0 	call	4dec <__udivsi3>
   10694:	100b883a 	mov	r5,r2
   10698:	a009883a 	mov	r4,r20
   1069c:	94bfffcc 	andi	r18,r18,65535
   106a0:	1021883a 	mov	r16,r2
   106a4:	94e4b03a 	or	r18,r18,r19
   106a8:	0004ea80 	call	4ea8 <__mulsi3>
   106ac:	9080052e 	bgeu	r18,r2,106c4 <__udivdi3+0x140>
   106b0:	8ca5883a 	add	r18,r17,r18
   106b4:	80ffffc4 	addi	r3,r16,-1
   106b8:	94410c36 	bltu	r18,r17,10aec <__udivdi3+0x568>
   106bc:	90810b2e 	bgeu	r18,r2,10aec <__udivdi3+0x568>
   106c0:	843fff84 	addi	r16,r16,-2
   106c4:	b004943a 	slli	r2,r22,16
   106c8:	0007883a 	mov	r3,zero
   106cc:	1404b03a 	or	r2,r2,r16
   106d0:	00005e06 	br	1084c <__udivdi3+0x2c8>
   106d4:	29c05b36 	bltu	r5,r7,10844 <__udivdi3+0x2c0>
   106d8:	00bfffd4 	movui	r2,65535
   106dc:	11c0672e 	bgeu	r2,r7,1087c <__udivdi3+0x2f8>
   106e0:	00804034 	movhi	r2,256
   106e4:	10bfffc4 	addi	r2,r2,-1
   106e8:	11c10a36 	bltu	r2,r7,10b14 <__udivdi3+0x590>
   106ec:	00800404 	movi	r2,16
   106f0:	3886d83a 	srl	r3,r7,r2
   106f4:	01000074 	movhi	r4,1
   106f8:	2114d304 	addi	r4,r4,21324
   106fc:	20c7883a 	add	r3,r4,r3
   10700:	18c00003 	ldbu	r3,0(r3)
   10704:	05c00804 	movi	r23,32
   10708:	1885883a 	add	r2,r3,r2
   1070c:	b8afc83a 	sub	r23,r23,r2
   10710:	b800671e 	bne	r23,zero,108b0 <__udivdi3+0x32c>
   10714:	3c010536 	bltu	r7,r16,10b2c <__udivdi3+0x5a8>
   10718:	9985403a 	cmpgeu	r2,r19,r6
   1071c:	0007883a 	mov	r3,zero
   10720:	00004a06 	br	1084c <__udivdi3+0x2c8>
   10724:	3000041e 	bne	r6,zero,10738 <__udivdi3+0x1b4>
   10728:	000b883a 	mov	r5,zero
   1072c:	01000044 	movi	r4,1
   10730:	0004dec0 	call	4dec <__udivsi3>
   10734:	1023883a 	mov	r17,r2
   10738:	00bfffd4 	movui	r2,65535
   1073c:	1440532e 	bgeu	r2,r17,1088c <__udivdi3+0x308>
   10740:	00804034 	movhi	r2,256
   10744:	10bfffc4 	addi	r2,r2,-1
   10748:	1440f436 	bltu	r2,r17,10b1c <__udivdi3+0x598>
   1074c:	00800404 	movi	r2,16
   10750:	8886d83a 	srl	r3,r17,r2
   10754:	01000074 	movhi	r4,1
   10758:	2114d304 	addi	r4,r4,21324
   1075c:	20c7883a 	add	r3,r4,r3
   10760:	18c00003 	ldbu	r3,0(r3)
   10764:	1885883a 	add	r2,r3,r2
   10768:	00c00804 	movi	r3,32
   1076c:	1887c83a 	sub	r3,r3,r2
   10770:	1800a51e 	bne	r3,zero,10a08 <__udivdi3+0x484>
   10774:	882ad43a 	srli	r21,r17,16
   10778:	8461c83a 	sub	r16,r16,r17
   1077c:	8d3fffcc 	andi	r20,r17,65535
   10780:	00c00044 	movi	r3,1
   10784:	a80b883a 	mov	r5,r21
   10788:	8009883a 	mov	r4,r16
   1078c:	d8c00115 	stw	r3,4(sp)
   10790:	0004e500 	call	4e50 <__umodsi3>
   10794:	a80b883a 	mov	r5,r21
   10798:	8009883a 	mov	r4,r16
   1079c:	1027883a 	mov	r19,r2
   107a0:	0004dec0 	call	4dec <__udivsi3>
   107a4:	a00b883a 	mov	r5,r20
   107a8:	1009883a 	mov	r4,r2
   107ac:	102d883a 	mov	r22,r2
   107b0:	0004ea80 	call	4ea8 <__mulsi3>
   107b4:	9826943a 	slli	r19,r19,16
   107b8:	900ed43a 	srli	r7,r18,16
   107bc:	d8c00117 	ldw	r3,4(sp)
   107c0:	3cceb03a 	or	r7,r7,r19
   107c4:	3880052e 	bgeu	r7,r2,107dc <__udivdi3+0x258>
   107c8:	3c4f883a 	add	r7,r7,r17
   107cc:	b13fffc4 	addi	r4,r22,-1
   107d0:	3c400136 	bltu	r7,r17,107d8 <__udivdi3+0x254>
   107d4:	3880e436 	bltu	r7,r2,10b68 <__udivdi3+0x5e4>
   107d8:	202d883a 	mov	r22,r4
   107dc:	38a1c83a 	sub	r16,r7,r2
   107e0:	8009883a 	mov	r4,r16
   107e4:	a80b883a 	mov	r5,r21
   107e8:	d8c00115 	stw	r3,4(sp)
   107ec:	0004e500 	call	4e50 <__umodsi3>
   107f0:	1027883a 	mov	r19,r2
   107f4:	8009883a 	mov	r4,r16
   107f8:	a80b883a 	mov	r5,r21
   107fc:	9826943a 	slli	r19,r19,16
   10800:	0004dec0 	call	4dec <__udivsi3>
   10804:	a00b883a 	mov	r5,r20
   10808:	1009883a 	mov	r4,r2
   1080c:	94bfffcc 	andi	r18,r18,65535
   10810:	1021883a 	mov	r16,r2
   10814:	94e4b03a 	or	r18,r18,r19
   10818:	0004ea80 	call	4ea8 <__mulsi3>
   1081c:	d8c00117 	ldw	r3,4(sp)
   10820:	9080052e 	bgeu	r18,r2,10838 <__udivdi3+0x2b4>
   10824:	8ca5883a 	add	r18,r17,r18
   10828:	813fffc4 	addi	r4,r16,-1
   1082c:	9440ad36 	bltu	r18,r17,10ae4 <__udivdi3+0x560>
   10830:	9080ac2e 	bgeu	r18,r2,10ae4 <__udivdi3+0x560>
   10834:	843fff84 	addi	r16,r16,-2
   10838:	b004943a 	slli	r2,r22,16
   1083c:	1404b03a 	or	r2,r2,r16
   10840:	00000206 	br	1084c <__udivdi3+0x2c8>
   10844:	0007883a 	mov	r3,zero
   10848:	0005883a 	mov	r2,zero
   1084c:	dfc00b17 	ldw	ra,44(sp)
   10850:	df000a17 	ldw	fp,40(sp)
   10854:	ddc00917 	ldw	r23,36(sp)
   10858:	dd800817 	ldw	r22,32(sp)
   1085c:	dd400717 	ldw	r21,28(sp)
   10860:	dd000617 	ldw	r20,24(sp)
   10864:	dcc00517 	ldw	r19,20(sp)
   10868:	dc800417 	ldw	r18,16(sp)
   1086c:	dc400317 	ldw	r17,12(sp)
   10870:	dc000217 	ldw	r16,8(sp)
   10874:	dec00c04 	addi	sp,sp,48
   10878:	f800283a 	ret
   1087c:	00803fc4 	movi	r2,255
   10880:	11c5803a 	cmpltu	r2,r2,r7
   10884:	100490fa 	slli	r2,r2,3
   10888:	003f9906 	br	106f0 <__alt_exception_stack_pointer+0xf80106f0>
   1088c:	00803fc4 	movi	r2,255
   10890:	1445803a 	cmpltu	r2,r2,r17
   10894:	100490fa 	slli	r2,r2,3
   10898:	003fad06 	br	10750 <__alt_exception_stack_pointer+0xf8010750>
   1089c:	00804034 	movhi	r2,256
   108a0:	10bfffc4 	addi	r2,r2,-1
   108a4:	11809f36 	bltu	r2,r6,10b24 <__udivdi3+0x5a0>
   108a8:	00800404 	movi	r2,16
   108ac:	003f4c06 	br	105e0 <__alt_exception_stack_pointer+0xf80105e0>
   108b0:	3dce983a 	sll	r7,r7,r23
   108b4:	30b8d83a 	srl	fp,r6,r2
   108b8:	80a2d83a 	srl	r17,r16,r2
   108bc:	35cc983a 	sll	r6,r6,r23
   108c0:	3f38b03a 	or	fp,r7,fp
   108c4:	e024d43a 	srli	r18,fp,16
   108c8:	9884d83a 	srl	r2,r19,r2
   108cc:	85e0983a 	sll	r16,r16,r23
   108d0:	8809883a 	mov	r4,r17
   108d4:	900b883a 	mov	r5,r18
   108d8:	d9800015 	stw	r6,0(sp)
   108dc:	1420b03a 	or	r16,r2,r16
   108e0:	0004e500 	call	4e50 <__umodsi3>
   108e4:	900b883a 	mov	r5,r18
   108e8:	8809883a 	mov	r4,r17
   108ec:	1029883a 	mov	r20,r2
   108f0:	e5bfffcc 	andi	r22,fp,65535
   108f4:	0004dec0 	call	4dec <__udivsi3>
   108f8:	100b883a 	mov	r5,r2
   108fc:	b009883a 	mov	r4,r22
   10900:	102b883a 	mov	r21,r2
   10904:	0004ea80 	call	4ea8 <__mulsi3>
   10908:	a028943a 	slli	r20,r20,16
   1090c:	8006d43a 	srli	r3,r16,16
   10910:	1d06b03a 	or	r3,r3,r20
   10914:	1880042e 	bgeu	r3,r2,10928 <__udivdi3+0x3a4>
   10918:	1f07883a 	add	r3,r3,fp
   1091c:	a93fffc4 	addi	r4,r21,-1
   10920:	1f00892e 	bgeu	r3,fp,10b48 <__udivdi3+0x5c4>
   10924:	202b883a 	mov	r21,r4
   10928:	18a3c83a 	sub	r17,r3,r2
   1092c:	8809883a 	mov	r4,r17
   10930:	900b883a 	mov	r5,r18
   10934:	0004e500 	call	4e50 <__umodsi3>
   10938:	1029883a 	mov	r20,r2
   1093c:	8809883a 	mov	r4,r17
   10940:	900b883a 	mov	r5,r18
   10944:	a028943a 	slli	r20,r20,16
   10948:	0004dec0 	call	4dec <__udivsi3>
   1094c:	100b883a 	mov	r5,r2
   10950:	b009883a 	mov	r4,r22
   10954:	843fffcc 	andi	r16,r16,65535
   10958:	1023883a 	mov	r17,r2
   1095c:	8520b03a 	or	r16,r16,r20
   10960:	0004ea80 	call	4ea8 <__mulsi3>
   10964:	8080042e 	bgeu	r16,r2,10978 <__udivdi3+0x3f4>
   10968:	8721883a 	add	r16,r16,fp
   1096c:	88ffffc4 	addi	r3,r17,-1
   10970:	8700712e 	bgeu	r16,fp,10b38 <__udivdi3+0x5b4>
   10974:	1823883a 	mov	r17,r3
   10978:	a80e943a 	slli	r7,r21,16
   1097c:	d8c00017 	ldw	r3,0(sp)
   10980:	80a1c83a 	sub	r16,r16,r2
   10984:	3c64b03a 	or	r18,r7,r17
   10988:	1d3fffcc 	andi	r20,r3,65535
   1098c:	9022d43a 	srli	r17,r18,16
   10990:	95bfffcc 	andi	r22,r18,65535
   10994:	a00b883a 	mov	r5,r20
   10998:	b009883a 	mov	r4,r22
   1099c:	182ad43a 	srli	r21,r3,16
   109a0:	0004ea80 	call	4ea8 <__mulsi3>
   109a4:	a00b883a 	mov	r5,r20
   109a8:	8809883a 	mov	r4,r17
   109ac:	1039883a 	mov	fp,r2
   109b0:	0004ea80 	call	4ea8 <__mulsi3>
   109b4:	8809883a 	mov	r4,r17
   109b8:	a80b883a 	mov	r5,r21
   109bc:	1029883a 	mov	r20,r2
   109c0:	0004ea80 	call	4ea8 <__mulsi3>
   109c4:	a80b883a 	mov	r5,r21
   109c8:	b009883a 	mov	r4,r22
   109cc:	1023883a 	mov	r17,r2
   109d0:	0004ea80 	call	4ea8 <__mulsi3>
   109d4:	e006d43a 	srli	r3,fp,16
   109d8:	1505883a 	add	r2,r2,r20
   109dc:	1887883a 	add	r3,r3,r2
   109e0:	1d00022e 	bgeu	r3,r20,109ec <__udivdi3+0x468>
   109e4:	00800074 	movhi	r2,1
   109e8:	88a3883a 	add	r17,r17,r2
   109ec:	1804d43a 	srli	r2,r3,16
   109f0:	1463883a 	add	r17,r2,r17
   109f4:	84404436 	bltu	r16,r17,10b08 <__udivdi3+0x584>
   109f8:	84403e26 	beq	r16,r17,10af4 <__udivdi3+0x570>
   109fc:	9005883a 	mov	r2,r18
   10a00:	0007883a 	mov	r3,zero
   10a04:	003f9106 	br	1084c <__alt_exception_stack_pointer+0xf801084c>
   10a08:	88e2983a 	sll	r17,r17,r3
   10a0c:	80aed83a 	srl	r23,r16,r2
   10a10:	80e0983a 	sll	r16,r16,r3
   10a14:	882ad43a 	srli	r21,r17,16
   10a18:	9884d83a 	srl	r2,r19,r2
   10a1c:	b809883a 	mov	r4,r23
   10a20:	a80b883a 	mov	r5,r21
   10a24:	98e4983a 	sll	r18,r19,r3
   10a28:	142cb03a 	or	r22,r2,r16
   10a2c:	0004e500 	call	4e50 <__umodsi3>
   10a30:	b809883a 	mov	r4,r23
   10a34:	a80b883a 	mov	r5,r21
   10a38:	1027883a 	mov	r19,r2
   10a3c:	8d3fffcc 	andi	r20,r17,65535
   10a40:	0004dec0 	call	4dec <__udivsi3>
   10a44:	a009883a 	mov	r4,r20
   10a48:	100b883a 	mov	r5,r2
   10a4c:	102f883a 	mov	r23,r2
   10a50:	0004ea80 	call	4ea8 <__mulsi3>
   10a54:	9826943a 	slli	r19,r19,16
   10a58:	b008d43a 	srli	r4,r22,16
   10a5c:	24c8b03a 	or	r4,r4,r19
   10a60:	2080062e 	bgeu	r4,r2,10a7c <__udivdi3+0x4f8>
   10a64:	2449883a 	add	r4,r4,r17
   10a68:	b8ffffc4 	addi	r3,r23,-1
   10a6c:	24403c36 	bltu	r4,r17,10b60 <__udivdi3+0x5dc>
   10a70:	20803b2e 	bgeu	r4,r2,10b60 <__udivdi3+0x5dc>
   10a74:	bdffff84 	addi	r23,r23,-2
   10a78:	2449883a 	add	r4,r4,r17
   10a7c:	20a1c83a 	sub	r16,r4,r2
   10a80:	a80b883a 	mov	r5,r21
   10a84:	8009883a 	mov	r4,r16
   10a88:	0004e500 	call	4e50 <__umodsi3>
   10a8c:	a80b883a 	mov	r5,r21
   10a90:	8009883a 	mov	r4,r16
   10a94:	1027883a 	mov	r19,r2
   10a98:	0004dec0 	call	4dec <__udivsi3>
   10a9c:	a009883a 	mov	r4,r20
   10aa0:	100b883a 	mov	r5,r2
   10aa4:	9826943a 	slli	r19,r19,16
   10aa8:	1039883a 	mov	fp,r2
   10aac:	0004ea80 	call	4ea8 <__mulsi3>
   10ab0:	b13fffcc 	andi	r4,r22,65535
   10ab4:	24c8b03a 	or	r4,r4,r19
   10ab8:	2080062e 	bgeu	r4,r2,10ad4 <__udivdi3+0x550>
   10abc:	2449883a 	add	r4,r4,r17
   10ac0:	e0ffffc4 	addi	r3,fp,-1
   10ac4:	24402436 	bltu	r4,r17,10b58 <__udivdi3+0x5d4>
   10ac8:	2080232e 	bgeu	r4,r2,10b58 <__udivdi3+0x5d4>
   10acc:	e73fff84 	addi	fp,fp,-2
   10ad0:	2449883a 	add	r4,r4,r17
   10ad4:	b82e943a 	slli	r23,r23,16
   10ad8:	20a1c83a 	sub	r16,r4,r2
   10adc:	bf06b03a 	or	r3,r23,fp
   10ae0:	003f2806 	br	10784 <__alt_exception_stack_pointer+0xf8010784>
   10ae4:	2021883a 	mov	r16,r4
   10ae8:	003f5306 	br	10838 <__alt_exception_stack_pointer+0xf8010838>
   10aec:	1821883a 	mov	r16,r3
   10af0:	003ef406 	br	106c4 <__alt_exception_stack_pointer+0xf80106c4>
   10af4:	1806943a 	slli	r3,r3,16
   10af8:	9de6983a 	sll	r19,r19,r23
   10afc:	e73fffcc 	andi	fp,fp,65535
   10b00:	1f07883a 	add	r3,r3,fp
   10b04:	98ffbd2e 	bgeu	r19,r3,109fc <__alt_exception_stack_pointer+0xf80109fc>
   10b08:	90bfffc4 	addi	r2,r18,-1
   10b0c:	0007883a 	mov	r3,zero
   10b10:	003f4e06 	br	1084c <__alt_exception_stack_pointer+0xf801084c>
   10b14:	00800604 	movi	r2,24
   10b18:	003ef506 	br	106f0 <__alt_exception_stack_pointer+0xf80106f0>
   10b1c:	00800604 	movi	r2,24
   10b20:	003f0b06 	br	10750 <__alt_exception_stack_pointer+0xf8010750>
   10b24:	00800604 	movi	r2,24
   10b28:	003ead06 	br	105e0 <__alt_exception_stack_pointer+0xf80105e0>
   10b2c:	0007883a 	mov	r3,zero
   10b30:	00800044 	movi	r2,1
   10b34:	003f4506 	br	1084c <__alt_exception_stack_pointer+0xf801084c>
   10b38:	80bf8e2e 	bgeu	r16,r2,10974 <__alt_exception_stack_pointer+0xf8010974>
   10b3c:	8c7fff84 	addi	r17,r17,-2
   10b40:	8721883a 	add	r16,r16,fp
   10b44:	003f8c06 	br	10978 <__alt_exception_stack_pointer+0xf8010978>
   10b48:	18bf762e 	bgeu	r3,r2,10924 <__alt_exception_stack_pointer+0xf8010924>
   10b4c:	ad7fff84 	addi	r21,r21,-2
   10b50:	1f07883a 	add	r3,r3,fp
   10b54:	003f7406 	br	10928 <__alt_exception_stack_pointer+0xf8010928>
   10b58:	1839883a 	mov	fp,r3
   10b5c:	003fdd06 	br	10ad4 <__alt_exception_stack_pointer+0xf8010ad4>
   10b60:	182f883a 	mov	r23,r3
   10b64:	003fc506 	br	10a7c <__alt_exception_stack_pointer+0xf8010a7c>
   10b68:	b5bfff84 	addi	r22,r22,-2
   10b6c:	3c4f883a 	add	r7,r7,r17
   10b70:	003f1a06 	br	107dc <__alt_exception_stack_pointer+0xf80107dc>
   10b74:	b5bfff84 	addi	r22,r22,-2
   10b78:	1c47883a 	add	r3,r3,r17
   10b7c:	003ebc06 	br	10670 <__alt_exception_stack_pointer+0xf8010670>

00010b80 <__umoddi3>:
   10b80:	defff304 	addi	sp,sp,-52
   10b84:	df000b15 	stw	fp,44(sp)
   10b88:	dc400415 	stw	r17,16(sp)
   10b8c:	dc000315 	stw	r16,12(sp)
   10b90:	dfc00c15 	stw	ra,48(sp)
   10b94:	ddc00a15 	stw	r23,40(sp)
   10b98:	dd800915 	stw	r22,36(sp)
   10b9c:	dd400815 	stw	r21,32(sp)
   10ba0:	dd000715 	stw	r20,28(sp)
   10ba4:	dcc00615 	stw	r19,24(sp)
   10ba8:	dc800515 	stw	r18,20(sp)
   10bac:	2021883a 	mov	r16,r4
   10bb0:	2823883a 	mov	r17,r5
   10bb4:	2839883a 	mov	fp,r5
   10bb8:	3800401e 	bne	r7,zero,10cbc <__umoddi3+0x13c>
   10bbc:	3027883a 	mov	r19,r6
   10bc0:	2029883a 	mov	r20,r4
   10bc4:	2980552e 	bgeu	r5,r6,10d1c <__umoddi3+0x19c>
   10bc8:	00bfffd4 	movui	r2,65535
   10bcc:	1180a236 	bltu	r2,r6,10e58 <__umoddi3+0x2d8>
   10bd0:	01003fc4 	movi	r4,255
   10bd4:	2189803a 	cmpltu	r4,r4,r6
   10bd8:	200890fa 	slli	r4,r4,3
   10bdc:	3104d83a 	srl	r2,r6,r4
   10be0:	00c00074 	movhi	r3,1
   10be4:	18d4d304 	addi	r3,r3,21324
   10be8:	1885883a 	add	r2,r3,r2
   10bec:	10c00003 	ldbu	r3,0(r2)
   10bf0:	00800804 	movi	r2,32
   10bf4:	1909883a 	add	r4,r3,r4
   10bf8:	1125c83a 	sub	r18,r2,r4
   10bfc:	90000526 	beq	r18,zero,10c14 <__umoddi3+0x94>
   10c00:	8ca2983a 	sll	r17,r17,r18
   10c04:	8108d83a 	srl	r4,r16,r4
   10c08:	34a6983a 	sll	r19,r6,r18
   10c0c:	84a8983a 	sll	r20,r16,r18
   10c10:	2478b03a 	or	fp,r4,r17
   10c14:	982cd43a 	srli	r22,r19,16
   10c18:	e009883a 	mov	r4,fp
   10c1c:	9dffffcc 	andi	r23,r19,65535
   10c20:	b00b883a 	mov	r5,r22
   10c24:	0004e500 	call	4e50 <__umodsi3>
   10c28:	b00b883a 	mov	r5,r22
   10c2c:	e009883a 	mov	r4,fp
   10c30:	102b883a 	mov	r21,r2
   10c34:	0004dec0 	call	4dec <__udivsi3>
   10c38:	100b883a 	mov	r5,r2
   10c3c:	b809883a 	mov	r4,r23
   10c40:	0004ea80 	call	4ea8 <__mulsi3>
   10c44:	a82a943a 	slli	r21,r21,16
   10c48:	a006d43a 	srli	r3,r20,16
   10c4c:	1d46b03a 	or	r3,r3,r21
   10c50:	1880032e 	bgeu	r3,r2,10c60 <__umoddi3+0xe0>
   10c54:	1cc7883a 	add	r3,r3,r19
   10c58:	1cc00136 	bltu	r3,r19,10c60 <__umoddi3+0xe0>
   10c5c:	18813136 	bltu	r3,r2,11124 <__umoddi3+0x5a4>
   10c60:	18a1c83a 	sub	r16,r3,r2
   10c64:	b00b883a 	mov	r5,r22
   10c68:	8009883a 	mov	r4,r16
   10c6c:	0004e500 	call	4e50 <__umodsi3>
   10c70:	b00b883a 	mov	r5,r22
   10c74:	8009883a 	mov	r4,r16
   10c78:	1023883a 	mov	r17,r2
   10c7c:	0004dec0 	call	4dec <__udivsi3>
   10c80:	100b883a 	mov	r5,r2
   10c84:	b809883a 	mov	r4,r23
   10c88:	8822943a 	slli	r17,r17,16
   10c8c:	0004ea80 	call	4ea8 <__mulsi3>
   10c90:	a0ffffcc 	andi	r3,r20,65535
   10c94:	1c46b03a 	or	r3,r3,r17
   10c98:	1880042e 	bgeu	r3,r2,10cac <__umoddi3+0x12c>
   10c9c:	1cc7883a 	add	r3,r3,r19
   10ca0:	1cc00236 	bltu	r3,r19,10cac <__umoddi3+0x12c>
   10ca4:	1880012e 	bgeu	r3,r2,10cac <__umoddi3+0x12c>
   10ca8:	1cc7883a 	add	r3,r3,r19
   10cac:	1885c83a 	sub	r2,r3,r2
   10cb0:	1484d83a 	srl	r2,r2,r18
   10cb4:	0007883a 	mov	r3,zero
   10cb8:	00005306 	br	10e08 <__umoddi3+0x288>
   10cbc:	29c05036 	bltu	r5,r7,10e00 <__umoddi3+0x280>
   10cc0:	00bfffd4 	movui	r2,65535
   10cc4:	11c05c2e 	bgeu	r2,r7,10e38 <__umoddi3+0x2b8>
   10cc8:	00804034 	movhi	r2,256
   10ccc:	10bfffc4 	addi	r2,r2,-1
   10cd0:	11c10636 	bltu	r2,r7,110ec <__umoddi3+0x56c>
   10cd4:	01000404 	movi	r4,16
   10cd8:	3904d83a 	srl	r2,r7,r4
   10cdc:	00c00074 	movhi	r3,1
   10ce0:	18d4d304 	addi	r3,r3,21324
   10ce4:	1885883a 	add	r2,r3,r2
   10ce8:	14c00003 	ldbu	r19,0(r2)
   10cec:	00c00804 	movi	r3,32
   10cf0:	9927883a 	add	r19,r19,r4
   10cf4:	1ce9c83a 	sub	r20,r3,r19
   10cf8:	a0005c1e 	bne	r20,zero,10e6c <__umoddi3+0x2ec>
   10cfc:	3c400136 	bltu	r7,r17,10d04 <__umoddi3+0x184>
   10d00:	81810a36 	bltu	r16,r6,1112c <__umoddi3+0x5ac>
   10d04:	8185c83a 	sub	r2,r16,r6
   10d08:	89e3c83a 	sub	r17,r17,r7
   10d0c:	8089803a 	cmpltu	r4,r16,r2
   10d10:	8939c83a 	sub	fp,r17,r4
   10d14:	e007883a 	mov	r3,fp
   10d18:	00003b06 	br	10e08 <__umoddi3+0x288>
   10d1c:	3000041e 	bne	r6,zero,10d30 <__umoddi3+0x1b0>
   10d20:	000b883a 	mov	r5,zero
   10d24:	01000044 	movi	r4,1
   10d28:	0004dec0 	call	4dec <__udivsi3>
   10d2c:	1027883a 	mov	r19,r2
   10d30:	00bfffd4 	movui	r2,65535
   10d34:	14c0442e 	bgeu	r2,r19,10e48 <__umoddi3+0x2c8>
   10d38:	00804034 	movhi	r2,256
   10d3c:	10bfffc4 	addi	r2,r2,-1
   10d40:	14c0ec36 	bltu	r2,r19,110f4 <__umoddi3+0x574>
   10d44:	00800404 	movi	r2,16
   10d48:	9886d83a 	srl	r3,r19,r2
   10d4c:	01000074 	movhi	r4,1
   10d50:	2114d304 	addi	r4,r4,21324
   10d54:	20c7883a 	add	r3,r4,r3
   10d58:	18c00003 	ldbu	r3,0(r3)
   10d5c:	1887883a 	add	r3,r3,r2
   10d60:	00800804 	movi	r2,32
   10d64:	10e5c83a 	sub	r18,r2,r3
   10d68:	9000ab1e 	bne	r18,zero,11018 <__umoddi3+0x498>
   10d6c:	982cd43a 	srli	r22,r19,16
   10d70:	8ce3c83a 	sub	r17,r17,r19
   10d74:	9dffffcc 	andi	r23,r19,65535
   10d78:	b00b883a 	mov	r5,r22
   10d7c:	8809883a 	mov	r4,r17
   10d80:	0004e500 	call	4e50 <__umodsi3>
   10d84:	b00b883a 	mov	r5,r22
   10d88:	8809883a 	mov	r4,r17
   10d8c:	102b883a 	mov	r21,r2
   10d90:	0004dec0 	call	4dec <__udivsi3>
   10d94:	b80b883a 	mov	r5,r23
   10d98:	1009883a 	mov	r4,r2
   10d9c:	0004ea80 	call	4ea8 <__mulsi3>
   10da0:	a82a943a 	slli	r21,r21,16
   10da4:	a006d43a 	srli	r3,r20,16
   10da8:	1d46b03a 	or	r3,r3,r21
   10dac:	1880042e 	bgeu	r3,r2,10dc0 <__umoddi3+0x240>
   10db0:	1cc7883a 	add	r3,r3,r19
   10db4:	1cc00236 	bltu	r3,r19,10dc0 <__umoddi3+0x240>
   10db8:	1880012e 	bgeu	r3,r2,10dc0 <__umoddi3+0x240>
   10dbc:	1cc7883a 	add	r3,r3,r19
   10dc0:	18a1c83a 	sub	r16,r3,r2
   10dc4:	b00b883a 	mov	r5,r22
   10dc8:	8009883a 	mov	r4,r16
   10dcc:	0004e500 	call	4e50 <__umodsi3>
   10dd0:	1023883a 	mov	r17,r2
   10dd4:	b00b883a 	mov	r5,r22
   10dd8:	8009883a 	mov	r4,r16
   10ddc:	0004dec0 	call	4dec <__udivsi3>
   10de0:	8822943a 	slli	r17,r17,16
   10de4:	b80b883a 	mov	r5,r23
   10de8:	1009883a 	mov	r4,r2
   10dec:	0004ea80 	call	4ea8 <__mulsi3>
   10df0:	a53fffcc 	andi	r20,r20,65535
   10df4:	a446b03a 	or	r3,r20,r17
   10df8:	18bfac2e 	bgeu	r3,r2,10cac <__alt_exception_stack_pointer+0xf8010cac>
   10dfc:	003fa706 	br	10c9c <__alt_exception_stack_pointer+0xf8010c9c>
   10e00:	2005883a 	mov	r2,r4
   10e04:	2807883a 	mov	r3,r5
   10e08:	dfc00c17 	ldw	ra,48(sp)
   10e0c:	df000b17 	ldw	fp,44(sp)
   10e10:	ddc00a17 	ldw	r23,40(sp)
   10e14:	dd800917 	ldw	r22,36(sp)
   10e18:	dd400817 	ldw	r21,32(sp)
   10e1c:	dd000717 	ldw	r20,28(sp)
   10e20:	dcc00617 	ldw	r19,24(sp)
   10e24:	dc800517 	ldw	r18,20(sp)
   10e28:	dc400417 	ldw	r17,16(sp)
   10e2c:	dc000317 	ldw	r16,12(sp)
   10e30:	dec00d04 	addi	sp,sp,52
   10e34:	f800283a 	ret
   10e38:	04c03fc4 	movi	r19,255
   10e3c:	99c9803a 	cmpltu	r4,r19,r7
   10e40:	200890fa 	slli	r4,r4,3
   10e44:	003fa406 	br	10cd8 <__alt_exception_stack_pointer+0xf8010cd8>
   10e48:	00803fc4 	movi	r2,255
   10e4c:	14c5803a 	cmpltu	r2,r2,r19
   10e50:	100490fa 	slli	r2,r2,3
   10e54:	003fbc06 	br	10d48 <__alt_exception_stack_pointer+0xf8010d48>
   10e58:	00804034 	movhi	r2,256
   10e5c:	10bfffc4 	addi	r2,r2,-1
   10e60:	1180a636 	bltu	r2,r6,110fc <__umoddi3+0x57c>
   10e64:	01000404 	movi	r4,16
   10e68:	003f5c06 	br	10bdc <__alt_exception_stack_pointer+0xf8010bdc>
   10e6c:	3d0e983a 	sll	r7,r7,r20
   10e70:	34ead83a 	srl	r21,r6,r19
   10e74:	8cc6d83a 	srl	r3,r17,r19
   10e78:	8d10983a 	sll	r8,r17,r20
   10e7c:	3d6ab03a 	or	r21,r7,r21
   10e80:	a82cd43a 	srli	r22,r21,16
   10e84:	84e2d83a 	srl	r17,r16,r19
   10e88:	1809883a 	mov	r4,r3
   10e8c:	b00b883a 	mov	r5,r22
   10e90:	8a22b03a 	or	r17,r17,r8
   10e94:	3524983a 	sll	r18,r6,r20
   10e98:	dc400015 	stw	r17,0(sp)
   10e9c:	d8c00115 	stw	r3,4(sp)
   10ea0:	0004e500 	call	4e50 <__umodsi3>
   10ea4:	d8c00117 	ldw	r3,4(sp)
   10ea8:	b00b883a 	mov	r5,r22
   10eac:	1039883a 	mov	fp,r2
   10eb0:	1809883a 	mov	r4,r3
   10eb4:	0004dec0 	call	4dec <__udivsi3>
   10eb8:	adffffcc 	andi	r23,r21,65535
   10ebc:	100b883a 	mov	r5,r2
   10ec0:	b809883a 	mov	r4,r23
   10ec4:	1023883a 	mov	r17,r2
   10ec8:	0004ea80 	call	4ea8 <__mulsi3>
   10ecc:	d9400017 	ldw	r5,0(sp)
   10ed0:	e008943a 	slli	r4,fp,16
   10ed4:	8520983a 	sll	r16,r16,r20
   10ed8:	2806d43a 	srli	r3,r5,16
   10edc:	1906b03a 	or	r3,r3,r4
   10ee0:	1880042e 	bgeu	r3,r2,10ef4 <__umoddi3+0x374>
   10ee4:	1d47883a 	add	r3,r3,r21
   10ee8:	893fffc4 	addi	r4,r17,-1
   10eec:	1d40892e 	bgeu	r3,r21,11114 <__umoddi3+0x594>
   10ef0:	2023883a 	mov	r17,r4
   10ef4:	18b9c83a 	sub	fp,r3,r2
   10ef8:	b00b883a 	mov	r5,r22
   10efc:	e009883a 	mov	r4,fp
   10f00:	0004e500 	call	4e50 <__umodsi3>
   10f04:	b00b883a 	mov	r5,r22
   10f08:	e009883a 	mov	r4,fp
   10f0c:	d8800215 	stw	r2,8(sp)
   10f10:	0004dec0 	call	4dec <__udivsi3>
   10f14:	100b883a 	mov	r5,r2
   10f18:	b809883a 	mov	r4,r23
   10f1c:	102d883a 	mov	r22,r2
   10f20:	0004ea80 	call	4ea8 <__mulsi3>
   10f24:	d9800217 	ldw	r6,8(sp)
   10f28:	d8c00017 	ldw	r3,0(sp)
   10f2c:	300c943a 	slli	r6,r6,16
   10f30:	1a3fffcc 	andi	r8,r3,65535
   10f34:	4190b03a 	or	r8,r8,r6
   10f38:	4080042e 	bgeu	r8,r2,10f4c <__umoddi3+0x3cc>
   10f3c:	4551883a 	add	r8,r8,r21
   10f40:	b0ffffc4 	addi	r3,r22,-1
   10f44:	45406f2e 	bgeu	r8,r21,11104 <__umoddi3+0x584>
   10f48:	182d883a 	mov	r22,r3
   10f4c:	880e943a 	slli	r7,r17,16
   10f50:	9006d43a 	srli	r3,r18,16
   10f54:	91bfffcc 	andi	r6,r18,65535
   10f58:	3dacb03a 	or	r22,r7,r22
   10f5c:	b02ed43a 	srli	r23,r22,16
   10f60:	b5bfffcc 	andi	r22,r22,65535
   10f64:	300b883a 	mov	r5,r6
   10f68:	b009883a 	mov	r4,r22
   10f6c:	40a3c83a 	sub	r17,r8,r2
   10f70:	d8c00115 	stw	r3,4(sp)
   10f74:	d9800215 	stw	r6,8(sp)
   10f78:	0004ea80 	call	4ea8 <__mulsi3>
   10f7c:	d9800217 	ldw	r6,8(sp)
   10f80:	b809883a 	mov	r4,r23
   10f84:	1039883a 	mov	fp,r2
   10f88:	300b883a 	mov	r5,r6
   10f8c:	0004ea80 	call	4ea8 <__mulsi3>
   10f90:	d8c00117 	ldw	r3,4(sp)
   10f94:	b809883a 	mov	r4,r23
   10f98:	d8800215 	stw	r2,8(sp)
   10f9c:	180b883a 	mov	r5,r3
   10fa0:	0004ea80 	call	4ea8 <__mulsi3>
   10fa4:	d8c00117 	ldw	r3,4(sp)
   10fa8:	b009883a 	mov	r4,r22
   10fac:	102f883a 	mov	r23,r2
   10fb0:	180b883a 	mov	r5,r3
   10fb4:	0004ea80 	call	4ea8 <__mulsi3>
   10fb8:	d9800217 	ldw	r6,8(sp)
   10fbc:	e006d43a 	srli	r3,fp,16
   10fc0:	1185883a 	add	r2,r2,r6
   10fc4:	1885883a 	add	r2,r3,r2
   10fc8:	1180022e 	bgeu	r2,r6,10fd4 <__umoddi3+0x454>
   10fcc:	00c00074 	movhi	r3,1
   10fd0:	b8ef883a 	add	r23,r23,r3
   10fd4:	1006d43a 	srli	r3,r2,16
   10fd8:	1004943a 	slli	r2,r2,16
   10fdc:	e73fffcc 	andi	fp,fp,65535
   10fe0:	1dc7883a 	add	r3,r3,r23
   10fe4:	1739883a 	add	fp,r2,fp
   10fe8:	88c03a36 	bltu	r17,r3,110d4 <__umoddi3+0x554>
   10fec:	88c05126 	beq	r17,r3,11134 <__umoddi3+0x5b4>
   10ff0:	88c9c83a 	sub	r4,r17,r3
   10ff4:	e00f883a 	mov	r7,fp
   10ff8:	81cfc83a 	sub	r7,r16,r7
   10ffc:	81c7803a 	cmpltu	r3,r16,r7
   11000:	20c7c83a 	sub	r3,r4,r3
   11004:	1cc4983a 	sll	r2,r3,r19
   11008:	3d0ed83a 	srl	r7,r7,r20
   1100c:	1d06d83a 	srl	r3,r3,r20
   11010:	11c4b03a 	or	r2,r2,r7
   11014:	003f7c06 	br	10e08 <__alt_exception_stack_pointer+0xf8010e08>
   11018:	9ca6983a 	sll	r19,r19,r18
   1101c:	88f8d83a 	srl	fp,r17,r3
   11020:	80c4d83a 	srl	r2,r16,r3
   11024:	982cd43a 	srli	r22,r19,16
   11028:	8ca2983a 	sll	r17,r17,r18
   1102c:	e009883a 	mov	r4,fp
   11030:	b00b883a 	mov	r5,r22
   11034:	146ab03a 	or	r21,r2,r17
   11038:	0004e500 	call	4e50 <__umodsi3>
   1103c:	b00b883a 	mov	r5,r22
   11040:	e009883a 	mov	r4,fp
   11044:	1029883a 	mov	r20,r2
   11048:	9dffffcc 	andi	r23,r19,65535
   1104c:	0004dec0 	call	4dec <__udivsi3>
   11050:	b809883a 	mov	r4,r23
   11054:	100b883a 	mov	r5,r2
   11058:	0004ea80 	call	4ea8 <__mulsi3>
   1105c:	a008943a 	slli	r4,r20,16
   11060:	a806d43a 	srli	r3,r21,16
   11064:	84a8983a 	sll	r20,r16,r18
   11068:	1906b03a 	or	r3,r3,r4
   1106c:	1880042e 	bgeu	r3,r2,11080 <__umoddi3+0x500>
   11070:	1cc7883a 	add	r3,r3,r19
   11074:	1cc00236 	bltu	r3,r19,11080 <__umoddi3+0x500>
   11078:	1880012e 	bgeu	r3,r2,11080 <__umoddi3+0x500>
   1107c:	1cc7883a 	add	r3,r3,r19
   11080:	18a3c83a 	sub	r17,r3,r2
   11084:	b00b883a 	mov	r5,r22
   11088:	8809883a 	mov	r4,r17
   1108c:	0004e500 	call	4e50 <__umodsi3>
   11090:	b00b883a 	mov	r5,r22
   11094:	8809883a 	mov	r4,r17
   11098:	1021883a 	mov	r16,r2
   1109c:	0004dec0 	call	4dec <__udivsi3>
   110a0:	100b883a 	mov	r5,r2
   110a4:	b809883a 	mov	r4,r23
   110a8:	8020943a 	slli	r16,r16,16
   110ac:	0004ea80 	call	4ea8 <__mulsi3>
   110b0:	a8ffffcc 	andi	r3,r21,65535
   110b4:	1c06b03a 	or	r3,r3,r16
   110b8:	1880042e 	bgeu	r3,r2,110cc <__umoddi3+0x54c>
   110bc:	1cc7883a 	add	r3,r3,r19
   110c0:	1cc00236 	bltu	r3,r19,110cc <__umoddi3+0x54c>
   110c4:	1880012e 	bgeu	r3,r2,110cc <__umoddi3+0x54c>
   110c8:	1cc7883a 	add	r3,r3,r19
   110cc:	18a3c83a 	sub	r17,r3,r2
   110d0:	003f2906 	br	10d78 <__alt_exception_stack_pointer+0xf8010d78>
   110d4:	e48fc83a 	sub	r7,fp,r18
   110d8:	1d49c83a 	sub	r4,r3,r21
   110dc:	e1f9803a 	cmpltu	fp,fp,r7
   110e0:	2739c83a 	sub	fp,r4,fp
   110e4:	8f09c83a 	sub	r4,r17,fp
   110e8:	003fc306 	br	10ff8 <__alt_exception_stack_pointer+0xf8010ff8>
   110ec:	01000604 	movi	r4,24
   110f0:	003ef906 	br	10cd8 <__alt_exception_stack_pointer+0xf8010cd8>
   110f4:	00800604 	movi	r2,24
   110f8:	003f1306 	br	10d48 <__alt_exception_stack_pointer+0xf8010d48>
   110fc:	01000604 	movi	r4,24
   11100:	003eb606 	br	10bdc <__alt_exception_stack_pointer+0xf8010bdc>
   11104:	40bf902e 	bgeu	r8,r2,10f48 <__alt_exception_stack_pointer+0xf8010f48>
   11108:	b5bfff84 	addi	r22,r22,-2
   1110c:	4551883a 	add	r8,r8,r21
   11110:	003f8e06 	br	10f4c <__alt_exception_stack_pointer+0xf8010f4c>
   11114:	18bf762e 	bgeu	r3,r2,10ef0 <__alt_exception_stack_pointer+0xf8010ef0>
   11118:	8c7fff84 	addi	r17,r17,-2
   1111c:	1d47883a 	add	r3,r3,r21
   11120:	003f7406 	br	10ef4 <__alt_exception_stack_pointer+0xf8010ef4>
   11124:	1cc7883a 	add	r3,r3,r19
   11128:	003ecd06 	br	10c60 <__alt_exception_stack_pointer+0xf8010c60>
   1112c:	8005883a 	mov	r2,r16
   11130:	003ef806 	br	10d14 <__alt_exception_stack_pointer+0xf8010d14>
   11134:	873fe736 	bltu	r16,fp,110d4 <__alt_exception_stack_pointer+0xf80110d4>
   11138:	e00f883a 	mov	r7,fp
   1113c:	0009883a 	mov	r4,zero
   11140:	003fad06 	br	10ff8 <__alt_exception_stack_pointer+0xf8010ff8>

00011144 <__divdf3>:
   11144:	defff004 	addi	sp,sp,-64
   11148:	dc800815 	stw	r18,32(sp)
   1114c:	2824d53a 	srli	r18,r5,20
   11150:	dd800c15 	stw	r22,48(sp)
   11154:	282cd7fa 	srli	r22,r5,31
   11158:	dc000615 	stw	r16,24(sp)
   1115c:	04000434 	movhi	r16,16
   11160:	843fffc4 	addi	r16,r16,-1
   11164:	dfc00f15 	stw	ra,60(sp)
   11168:	df000e15 	stw	fp,56(sp)
   1116c:	ddc00d15 	stw	r23,52(sp)
   11170:	dd400b15 	stw	r21,44(sp)
   11174:	dd000a15 	stw	r20,40(sp)
   11178:	dcc00915 	stw	r19,36(sp)
   1117c:	dc400715 	stw	r17,28(sp)
   11180:	9481ffcc 	andi	r18,r18,2047
   11184:	2c20703a 	and	r16,r5,r16
   11188:	b2003fcc 	andi	r8,r22,255
   1118c:	90006126 	beq	r18,zero,11314 <__divdf3+0x1d0>
   11190:	0081ffc4 	movi	r2,2047
   11194:	202b883a 	mov	r21,r4
   11198:	90803726 	beq	r18,r2,11278 <__divdf3+0x134>
   1119c:	80800434 	orhi	r2,r16,16
   111a0:	100490fa 	slli	r2,r2,3
   111a4:	2020d77a 	srli	r16,r4,29
   111a8:	202a90fa 	slli	r21,r4,3
   111ac:	94bf0044 	addi	r18,r18,-1023
   111b0:	80a0b03a 	or	r16,r16,r2
   111b4:	0013883a 	mov	r9,zero
   111b8:	000b883a 	mov	r5,zero
   111bc:	3806d53a 	srli	r3,r7,20
   111c0:	382ed7fa 	srli	r23,r7,31
   111c4:	04400434 	movhi	r17,16
   111c8:	8c7fffc4 	addi	r17,r17,-1
   111cc:	18c1ffcc 	andi	r3,r3,2047
   111d0:	3029883a 	mov	r20,r6
   111d4:	3c62703a 	and	r17,r7,r17
   111d8:	bf003fcc 	andi	fp,r23,255
   111dc:	18006e26 	beq	r3,zero,11398 <__divdf3+0x254>
   111e0:	0081ffc4 	movi	r2,2047
   111e4:	18806626 	beq	r3,r2,11380 <__divdf3+0x23c>
   111e8:	88800434 	orhi	r2,r17,16
   111ec:	100490fa 	slli	r2,r2,3
   111f0:	3022d77a 	srli	r17,r6,29
   111f4:	302890fa 	slli	r20,r6,3
   111f8:	18ff0044 	addi	r3,r3,-1023
   111fc:	88a2b03a 	or	r17,r17,r2
   11200:	000f883a 	mov	r7,zero
   11204:	b5e6f03a 	xor	r19,r22,r23
   11208:	3a4cb03a 	or	r6,r7,r9
   1120c:	008003c4 	movi	r2,15
   11210:	9809883a 	mov	r4,r19
   11214:	90c7c83a 	sub	r3,r18,r3
   11218:	9cc03fcc 	andi	r19,r19,255
   1121c:	11809636 	bltu	r2,r6,11478 <__divdf3+0x334>
   11220:	300c90ba 	slli	r6,r6,2
   11224:	00800074 	movhi	r2,1
   11228:	10848e04 	addi	r2,r2,4664
   1122c:	308d883a 	add	r6,r6,r2
   11230:	30800017 	ldw	r2,0(r6)
   11234:	1000683a 	jmp	r2
   11238:	00011478 	rdprs	zero,zero,1105
   1123c:	000112b0 	cmpltui	zero,zero,1098
   11240:	00011468 	cmpgeui	zero,zero,1105
   11244:	000112a4 	muli	zero,zero,1098
   11248:	00011468 	cmpgeui	zero,zero,1105
   1124c:	0001143c 	xorhi	zero,zero,1104
   11250:	00011468 	cmpgeui	zero,zero,1105
   11254:	000112a4 	muli	zero,zero,1098
   11258:	000112b0 	cmpltui	zero,zero,1098
   1125c:	000112b0 	cmpltui	zero,zero,1098
   11260:	0001143c 	xorhi	zero,zero,1104
   11264:	000112a4 	muli	zero,zero,1098
   11268:	00011294 	movui	zero,1098
   1126c:	00011294 	movui	zero,1098
   11270:	00011294 	movui	zero,1098
   11274:	00011800 	call	1180 <init_keyboard+0xa50>
   11278:	2404b03a 	or	r2,r4,r16
   1127c:	10006c1e 	bne	r2,zero,11430 <__divdf3+0x2ec>
   11280:	02400204 	movi	r9,8
   11284:	0021883a 	mov	r16,zero
   11288:	002b883a 	mov	r21,zero
   1128c:	01400084 	movi	r5,2
   11290:	003fca06 	br	111bc <__alt_exception_stack_pointer+0xf80111bc>
   11294:	8023883a 	mov	r17,r16
   11298:	a829883a 	mov	r20,r21
   1129c:	4039883a 	mov	fp,r8
   112a0:	280f883a 	mov	r7,r5
   112a4:	00800084 	movi	r2,2
   112a8:	3881601e 	bne	r7,r2,1182c <__divdf3+0x6e8>
   112ac:	e027883a 	mov	r19,fp
   112b0:	9900004c 	andi	r4,r19,1
   112b4:	0081ffc4 	movi	r2,2047
   112b8:	0021883a 	mov	r16,zero
   112bc:	002b883a 	mov	r21,zero
   112c0:	1004953a 	slli	r2,r2,20
   112c4:	20c03fcc 	andi	r3,r4,255
   112c8:	01400434 	movhi	r5,16
   112cc:	297fffc4 	addi	r5,r5,-1
   112d0:	180697fa 	slli	r3,r3,31
   112d4:	8160703a 	and	r16,r16,r5
   112d8:	80a0b03a 	or	r16,r16,r2
   112dc:	80c6b03a 	or	r3,r16,r3
   112e0:	a805883a 	mov	r2,r21
   112e4:	dfc00f17 	ldw	ra,60(sp)
   112e8:	df000e17 	ldw	fp,56(sp)
   112ec:	ddc00d17 	ldw	r23,52(sp)
   112f0:	dd800c17 	ldw	r22,48(sp)
   112f4:	dd400b17 	ldw	r21,44(sp)
   112f8:	dd000a17 	ldw	r20,40(sp)
   112fc:	dcc00917 	ldw	r19,36(sp)
   11300:	dc800817 	ldw	r18,32(sp)
   11304:	dc400717 	ldw	r17,28(sp)
   11308:	dc000617 	ldw	r16,24(sp)
   1130c:	dec01004 	addi	sp,sp,64
   11310:	f800283a 	ret
   11314:	2404b03a 	or	r2,r4,r16
   11318:	2023883a 	mov	r17,r4
   1131c:	10003f26 	beq	r2,zero,1141c <__divdf3+0x2d8>
   11320:	80015e26 	beq	r16,zero,1189c <__divdf3+0x758>
   11324:	8009883a 	mov	r4,r16
   11328:	d9800215 	stw	r6,8(sp)
   1132c:	d9c00515 	stw	r7,20(sp)
   11330:	da000415 	stw	r8,16(sp)
   11334:	0006ba40 	call	6ba4 <__clzsi2>
   11338:	d9800217 	ldw	r6,8(sp)
   1133c:	d9c00517 	ldw	r7,20(sp)
   11340:	da000417 	ldw	r8,16(sp)
   11344:	113ffd44 	addi	r4,r2,-11
   11348:	00c00704 	movi	r3,28
   1134c:	19014f16 	blt	r3,r4,1188c <__divdf3+0x748>
   11350:	00c00744 	movi	r3,29
   11354:	157ffe04 	addi	r21,r2,-8
   11358:	1907c83a 	sub	r3,r3,r4
   1135c:	8560983a 	sll	r16,r16,r21
   11360:	88c6d83a 	srl	r3,r17,r3
   11364:	8d6a983a 	sll	r21,r17,r21
   11368:	1c20b03a 	or	r16,r3,r16
   1136c:	1080fcc4 	addi	r2,r2,1011
   11370:	00a5c83a 	sub	r18,zero,r2
   11374:	0013883a 	mov	r9,zero
   11378:	000b883a 	mov	r5,zero
   1137c:	003f8f06 	br	111bc <__alt_exception_stack_pointer+0xf80111bc>
   11380:	3444b03a 	or	r2,r6,r17
   11384:	1000231e 	bne	r2,zero,11414 <__divdf3+0x2d0>
   11388:	0023883a 	mov	r17,zero
   1138c:	0029883a 	mov	r20,zero
   11390:	01c00084 	movi	r7,2
   11394:	003f9b06 	br	11204 <__alt_exception_stack_pointer+0xf8011204>
   11398:	3444b03a 	or	r2,r6,r17
   1139c:	10001926 	beq	r2,zero,11404 <__divdf3+0x2c0>
   113a0:	88014b26 	beq	r17,zero,118d0 <__divdf3+0x78c>
   113a4:	8809883a 	mov	r4,r17
   113a8:	d9400115 	stw	r5,4(sp)
   113ac:	d9800215 	stw	r6,8(sp)
   113b0:	da000415 	stw	r8,16(sp)
   113b4:	da400315 	stw	r9,12(sp)
   113b8:	0006ba40 	call	6ba4 <__clzsi2>
   113bc:	d9400117 	ldw	r5,4(sp)
   113c0:	d9800217 	ldw	r6,8(sp)
   113c4:	da000417 	ldw	r8,16(sp)
   113c8:	da400317 	ldw	r9,12(sp)
   113cc:	113ffd44 	addi	r4,r2,-11
   113d0:	00c00704 	movi	r3,28
   113d4:	19013a16 	blt	r3,r4,118c0 <__divdf3+0x77c>
   113d8:	00c00744 	movi	r3,29
   113dc:	153ffe04 	addi	r20,r2,-8
   113e0:	1907c83a 	sub	r3,r3,r4
   113e4:	8d22983a 	sll	r17,r17,r20
   113e8:	30c6d83a 	srl	r3,r6,r3
   113ec:	3528983a 	sll	r20,r6,r20
   113f0:	1c62b03a 	or	r17,r3,r17
   113f4:	1080fcc4 	addi	r2,r2,1011
   113f8:	0087c83a 	sub	r3,zero,r2
   113fc:	000f883a 	mov	r7,zero
   11400:	003f8006 	br	11204 <__alt_exception_stack_pointer+0xf8011204>
   11404:	0023883a 	mov	r17,zero
   11408:	0029883a 	mov	r20,zero
   1140c:	01c00044 	movi	r7,1
   11410:	003f7c06 	br	11204 <__alt_exception_stack_pointer+0xf8011204>
   11414:	01c000c4 	movi	r7,3
   11418:	003f7a06 	br	11204 <__alt_exception_stack_pointer+0xf8011204>
   1141c:	02400104 	movi	r9,4
   11420:	0021883a 	mov	r16,zero
   11424:	002b883a 	mov	r21,zero
   11428:	01400044 	movi	r5,1
   1142c:	003f6306 	br	111bc <__alt_exception_stack_pointer+0xf80111bc>
   11430:	02400304 	movi	r9,12
   11434:	014000c4 	movi	r5,3
   11438:	003f6006 	br	111bc <__alt_exception_stack_pointer+0xf80111bc>
   1143c:	04000434 	movhi	r16,16
   11440:	0009883a 	mov	r4,zero
   11444:	843fffc4 	addi	r16,r16,-1
   11448:	057fffc4 	movi	r21,-1
   1144c:	0081ffc4 	movi	r2,2047
   11450:	003f9b06 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11454:	00c00044 	movi	r3,1
   11458:	1887c83a 	sub	r3,r3,r2
   1145c:	01000e04 	movi	r4,56
   11460:	20c1530e 	bge	r4,r3,119b0 <__divdf3+0x86c>
   11464:	9900004c 	andi	r4,r19,1
   11468:	0005883a 	mov	r2,zero
   1146c:	0021883a 	mov	r16,zero
   11470:	002b883a 	mov	r21,zero
   11474:	003f9206 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11478:	8c012e36 	bltu	r17,r16,11934 <__divdf3+0x7f0>
   1147c:	84412c26 	beq	r16,r17,11930 <__divdf3+0x7ec>
   11480:	a82f883a 	mov	r23,r21
   11484:	18ffffc4 	addi	r3,r3,-1
   11488:	002b883a 	mov	r21,zero
   1148c:	a004d63a 	srli	r2,r20,24
   11490:	8822923a 	slli	r17,r17,8
   11494:	a028923a 	slli	r20,r20,8
   11498:	8009883a 	mov	r4,r16
   1149c:	88acb03a 	or	r22,r17,r2
   114a0:	dd000015 	stw	r20,0(sp)
   114a4:	b028d43a 	srli	r20,r22,16
   114a8:	d8c00215 	stw	r3,8(sp)
   114ac:	b4bfffcc 	andi	r18,r22,65535
   114b0:	a00b883a 	mov	r5,r20
   114b4:	0004dec0 	call	4dec <__udivsi3>
   114b8:	100b883a 	mov	r5,r2
   114bc:	9009883a 	mov	r4,r18
   114c0:	1023883a 	mov	r17,r2
   114c4:	0004ea80 	call	4ea8 <__mulsi3>
   114c8:	8009883a 	mov	r4,r16
   114cc:	a00b883a 	mov	r5,r20
   114d0:	1039883a 	mov	fp,r2
   114d4:	0004e500 	call	4e50 <__umodsi3>
   114d8:	1004943a 	slli	r2,r2,16
   114dc:	b808d43a 	srli	r4,r23,16
   114e0:	d8c00217 	ldw	r3,8(sp)
   114e4:	2084b03a 	or	r2,r4,r2
   114e8:	1700062e 	bgeu	r2,fp,11504 <__divdf3+0x3c0>
   114ec:	1585883a 	add	r2,r2,r22
   114f0:	893fffc4 	addi	r4,r17,-1
   114f4:	15811d36 	bltu	r2,r22,1196c <__divdf3+0x828>
   114f8:	17011c2e 	bgeu	r2,fp,1196c <__divdf3+0x828>
   114fc:	8c7fff84 	addi	r17,r17,-2
   11500:	1585883a 	add	r2,r2,r22
   11504:	1739c83a 	sub	fp,r2,fp
   11508:	a00b883a 	mov	r5,r20
   1150c:	e009883a 	mov	r4,fp
   11510:	d8c00215 	stw	r3,8(sp)
   11514:	0004dec0 	call	4dec <__udivsi3>
   11518:	100b883a 	mov	r5,r2
   1151c:	9009883a 	mov	r4,r18
   11520:	1021883a 	mov	r16,r2
   11524:	0004ea80 	call	4ea8 <__mulsi3>
   11528:	a00b883a 	mov	r5,r20
   1152c:	e009883a 	mov	r4,fp
   11530:	d8800415 	stw	r2,16(sp)
   11534:	0004e500 	call	4e50 <__umodsi3>
   11538:	1004943a 	slli	r2,r2,16
   1153c:	da000417 	ldw	r8,16(sp)
   11540:	bdffffcc 	andi	r23,r23,65535
   11544:	b884b03a 	or	r2,r23,r2
   11548:	d8c00217 	ldw	r3,8(sp)
   1154c:	1200062e 	bgeu	r2,r8,11568 <__divdf3+0x424>
   11550:	1585883a 	add	r2,r2,r22
   11554:	813fffc4 	addi	r4,r16,-1
   11558:	15810236 	bltu	r2,r22,11964 <__divdf3+0x820>
   1155c:	1201012e 	bgeu	r2,r8,11964 <__divdf3+0x820>
   11560:	843fff84 	addi	r16,r16,-2
   11564:	1585883a 	add	r2,r2,r22
   11568:	8822943a 	slli	r17,r17,16
   1156c:	d9800017 	ldw	r6,0(sp)
   11570:	1211c83a 	sub	r8,r2,r8
   11574:	8c22b03a 	or	r17,r17,r16
   11578:	373fffcc 	andi	fp,r6,65535
   1157c:	8abfffcc 	andi	r10,r17,65535
   11580:	8820d43a 	srli	r16,r17,16
   11584:	5009883a 	mov	r4,r10
   11588:	e00b883a 	mov	r5,fp
   1158c:	302ed43a 	srli	r23,r6,16
   11590:	d8c00215 	stw	r3,8(sp)
   11594:	da000415 	stw	r8,16(sp)
   11598:	da800115 	stw	r10,4(sp)
   1159c:	0004ea80 	call	4ea8 <__mulsi3>
   115a0:	800b883a 	mov	r5,r16
   115a4:	e009883a 	mov	r4,fp
   115a8:	d8800515 	stw	r2,20(sp)
   115ac:	0004ea80 	call	4ea8 <__mulsi3>
   115b0:	8009883a 	mov	r4,r16
   115b4:	b80b883a 	mov	r5,r23
   115b8:	d8800315 	stw	r2,12(sp)
   115bc:	0004ea80 	call	4ea8 <__mulsi3>
   115c0:	da800117 	ldw	r10,4(sp)
   115c4:	b80b883a 	mov	r5,r23
   115c8:	1021883a 	mov	r16,r2
   115cc:	5009883a 	mov	r4,r10
   115d0:	0004ea80 	call	4ea8 <__mulsi3>
   115d4:	d9c00517 	ldw	r7,20(sp)
   115d8:	da400317 	ldw	r9,12(sp)
   115dc:	d8c00217 	ldw	r3,8(sp)
   115e0:	3808d43a 	srli	r4,r7,16
   115e4:	1245883a 	add	r2,r2,r9
   115e8:	da000417 	ldw	r8,16(sp)
   115ec:	2085883a 	add	r2,r4,r2
   115f0:	1240022e 	bgeu	r2,r9,115fc <__divdf3+0x4b8>
   115f4:	01000074 	movhi	r4,1
   115f8:	8121883a 	add	r16,r16,r4
   115fc:	1008d43a 	srli	r4,r2,16
   11600:	1004943a 	slli	r2,r2,16
   11604:	39ffffcc 	andi	r7,r7,65535
   11608:	2409883a 	add	r4,r4,r16
   1160c:	11c5883a 	add	r2,r2,r7
   11610:	4100bb36 	bltu	r8,r4,11900 <__divdf3+0x7bc>
   11614:	4100d726 	beq	r8,r4,11974 <__divdf3+0x830>
   11618:	4109c83a 	sub	r4,r8,r4
   1161c:	a8a1c83a 	sub	r16,r21,r2
   11620:	ac2b803a 	cmpltu	r21,r21,r16
   11624:	256bc83a 	sub	r21,r4,r21
   11628:	b540d926 	beq	r22,r21,11990 <__divdf3+0x84c>
   1162c:	a00b883a 	mov	r5,r20
   11630:	a809883a 	mov	r4,r21
   11634:	d8c00215 	stw	r3,8(sp)
   11638:	0004dec0 	call	4dec <__udivsi3>
   1163c:	100b883a 	mov	r5,r2
   11640:	9009883a 	mov	r4,r18
   11644:	d8800515 	stw	r2,20(sp)
   11648:	0004ea80 	call	4ea8 <__mulsi3>
   1164c:	a809883a 	mov	r4,r21
   11650:	a00b883a 	mov	r5,r20
   11654:	d8800415 	stw	r2,16(sp)
   11658:	0004e500 	call	4e50 <__umodsi3>
   1165c:	1004943a 	slli	r2,r2,16
   11660:	8008d43a 	srli	r4,r16,16
   11664:	da000417 	ldw	r8,16(sp)
   11668:	d8c00217 	ldw	r3,8(sp)
   1166c:	2084b03a 	or	r2,r4,r2
   11670:	d9c00517 	ldw	r7,20(sp)
   11674:	1200062e 	bgeu	r2,r8,11690 <__divdf3+0x54c>
   11678:	1585883a 	add	r2,r2,r22
   1167c:	393fffc4 	addi	r4,r7,-1
   11680:	1580c536 	bltu	r2,r22,11998 <__divdf3+0x854>
   11684:	1200c42e 	bgeu	r2,r8,11998 <__divdf3+0x854>
   11688:	39ffff84 	addi	r7,r7,-2
   1168c:	1585883a 	add	r2,r2,r22
   11690:	122bc83a 	sub	r21,r2,r8
   11694:	a00b883a 	mov	r5,r20
   11698:	a809883a 	mov	r4,r21
   1169c:	d8c00215 	stw	r3,8(sp)
   116a0:	d9c00515 	stw	r7,20(sp)
   116a4:	0004dec0 	call	4dec <__udivsi3>
   116a8:	9009883a 	mov	r4,r18
   116ac:	100b883a 	mov	r5,r2
   116b0:	d8800415 	stw	r2,16(sp)
   116b4:	0004ea80 	call	4ea8 <__mulsi3>
   116b8:	a809883a 	mov	r4,r21
   116bc:	a00b883a 	mov	r5,r20
   116c0:	1025883a 	mov	r18,r2
   116c4:	0004e500 	call	4e50 <__umodsi3>
   116c8:	1004943a 	slli	r2,r2,16
   116cc:	813fffcc 	andi	r4,r16,65535
   116d0:	d8c00217 	ldw	r3,8(sp)
   116d4:	20a0b03a 	or	r16,r4,r2
   116d8:	d9c00517 	ldw	r7,20(sp)
   116dc:	da000417 	ldw	r8,16(sp)
   116e0:	8480062e 	bgeu	r16,r18,116fc <__divdf3+0x5b8>
   116e4:	85a1883a 	add	r16,r16,r22
   116e8:	40bfffc4 	addi	r2,r8,-1
   116ec:	8580ac36 	bltu	r16,r22,119a0 <__divdf3+0x85c>
   116f0:	8480ab2e 	bgeu	r16,r18,119a0 <__divdf3+0x85c>
   116f4:	423fff84 	addi	r8,r8,-2
   116f8:	85a1883a 	add	r16,r16,r22
   116fc:	3804943a 	slli	r2,r7,16
   11700:	84a1c83a 	sub	r16,r16,r18
   11704:	e009883a 	mov	r4,fp
   11708:	1228b03a 	or	r20,r2,r8
   1170c:	a1ffffcc 	andi	r7,r20,65535
   11710:	a024d43a 	srli	r18,r20,16
   11714:	380b883a 	mov	r5,r7
   11718:	d8c00215 	stw	r3,8(sp)
   1171c:	d9c00515 	stw	r7,20(sp)
   11720:	0004ea80 	call	4ea8 <__mulsi3>
   11724:	900b883a 	mov	r5,r18
   11728:	e009883a 	mov	r4,fp
   1172c:	102b883a 	mov	r21,r2
   11730:	0004ea80 	call	4ea8 <__mulsi3>
   11734:	900b883a 	mov	r5,r18
   11738:	b809883a 	mov	r4,r23
   1173c:	1039883a 	mov	fp,r2
   11740:	0004ea80 	call	4ea8 <__mulsi3>
   11744:	d9c00517 	ldw	r7,20(sp)
   11748:	b80b883a 	mov	r5,r23
   1174c:	1025883a 	mov	r18,r2
   11750:	3809883a 	mov	r4,r7
   11754:	0004ea80 	call	4ea8 <__mulsi3>
   11758:	a808d43a 	srli	r4,r21,16
   1175c:	1705883a 	add	r2,r2,fp
   11760:	d8c00217 	ldw	r3,8(sp)
   11764:	2085883a 	add	r2,r4,r2
   11768:	1700022e 	bgeu	r2,fp,11774 <__divdf3+0x630>
   1176c:	01000074 	movhi	r4,1
   11770:	9125883a 	add	r18,r18,r4
   11774:	1008d43a 	srli	r4,r2,16
   11778:	1004943a 	slli	r2,r2,16
   1177c:	ad7fffcc 	andi	r21,r21,65535
   11780:	2489883a 	add	r4,r4,r18
   11784:	1545883a 	add	r2,r2,r21
   11788:	81003836 	bltu	r16,r4,1186c <__divdf3+0x728>
   1178c:	81003626 	beq	r16,r4,11868 <__divdf3+0x724>
   11790:	a5000054 	ori	r20,r20,1
   11794:	1880ffc4 	addi	r2,r3,1023
   11798:	00bf2e0e 	bge	zero,r2,11454 <__alt_exception_stack_pointer+0xf8011454>
   1179c:	a10001cc 	andi	r4,r20,7
   117a0:	20000726 	beq	r4,zero,117c0 <__divdf3+0x67c>
   117a4:	a10003cc 	andi	r4,r20,15
   117a8:	01400104 	movi	r5,4
   117ac:	21400426 	beq	r4,r5,117c0 <__divdf3+0x67c>
   117b0:	a149883a 	add	r4,r20,r5
   117b4:	2529803a 	cmpltu	r20,r4,r20
   117b8:	8d23883a 	add	r17,r17,r20
   117bc:	2029883a 	mov	r20,r4
   117c0:	8900402c 	andhi	r4,r17,256
   117c4:	20000426 	beq	r4,zero,117d8 <__divdf3+0x694>
   117c8:	18810004 	addi	r2,r3,1024
   117cc:	00ffc034 	movhi	r3,65280
   117d0:	18ffffc4 	addi	r3,r3,-1
   117d4:	88e2703a 	and	r17,r17,r3
   117d8:	00c1ff84 	movi	r3,2046
   117dc:	18beb416 	blt	r3,r2,112b0 <__alt_exception_stack_pointer+0xf80112b0>
   117e0:	a028d0fa 	srli	r20,r20,3
   117e4:	882a977a 	slli	r21,r17,29
   117e8:	8820927a 	slli	r16,r17,9
   117ec:	1081ffcc 	andi	r2,r2,2047
   117f0:	ad2ab03a 	or	r21,r21,r20
   117f4:	8020d33a 	srli	r16,r16,12
   117f8:	9900004c 	andi	r4,r19,1
   117fc:	003eb006 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11800:	8080022c 	andhi	r2,r16,8
   11804:	10001226 	beq	r2,zero,11850 <__divdf3+0x70c>
   11808:	8880022c 	andhi	r2,r17,8
   1180c:	1000101e 	bne	r2,zero,11850 <__divdf3+0x70c>
   11810:	00800434 	movhi	r2,16
   11814:	8c000234 	orhi	r16,r17,8
   11818:	10bfffc4 	addi	r2,r2,-1
   1181c:	b809883a 	mov	r4,r23
   11820:	80a0703a 	and	r16,r16,r2
   11824:	a02b883a 	mov	r21,r20
   11828:	003f0806 	br	1144c <__alt_exception_stack_pointer+0xf801144c>
   1182c:	008000c4 	movi	r2,3
   11830:	3880b126 	beq	r7,r2,11af8 <__divdf3+0x9b4>
   11834:	00800044 	movi	r2,1
   11838:	38805b1e 	bne	r7,r2,119a8 <__divdf3+0x864>
   1183c:	e009883a 	mov	r4,fp
   11840:	0005883a 	mov	r2,zero
   11844:	0021883a 	mov	r16,zero
   11848:	002b883a 	mov	r21,zero
   1184c:	003e9c06 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11850:	00800434 	movhi	r2,16
   11854:	84000234 	orhi	r16,r16,8
   11858:	10bfffc4 	addi	r2,r2,-1
   1185c:	b009883a 	mov	r4,r22
   11860:	80a0703a 	and	r16,r16,r2
   11864:	003ef906 	br	1144c <__alt_exception_stack_pointer+0xf801144c>
   11868:	103fca26 	beq	r2,zero,11794 <__alt_exception_stack_pointer+0xf8011794>
   1186c:	b421883a 	add	r16,r22,r16
   11870:	a17fffc4 	addi	r5,r20,-1
   11874:	8580422e 	bgeu	r16,r22,11980 <__divdf3+0x83c>
   11878:	2829883a 	mov	r20,r5
   1187c:	813fc41e 	bne	r16,r4,11790 <__alt_exception_stack_pointer+0xf8011790>
   11880:	d9800017 	ldw	r6,0(sp)
   11884:	30bfc21e 	bne	r6,r2,11790 <__alt_exception_stack_pointer+0xf8011790>
   11888:	003fc206 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   1188c:	143ff604 	addi	r16,r2,-40
   11890:	8c20983a 	sll	r16,r17,r16
   11894:	002b883a 	mov	r21,zero
   11898:	003eb406 	br	1136c <__alt_exception_stack_pointer+0xf801136c>
   1189c:	d9800215 	stw	r6,8(sp)
   118a0:	d9c00515 	stw	r7,20(sp)
   118a4:	da000415 	stw	r8,16(sp)
   118a8:	0006ba40 	call	6ba4 <__clzsi2>
   118ac:	10800804 	addi	r2,r2,32
   118b0:	da000417 	ldw	r8,16(sp)
   118b4:	d9c00517 	ldw	r7,20(sp)
   118b8:	d9800217 	ldw	r6,8(sp)
   118bc:	003ea106 	br	11344 <__alt_exception_stack_pointer+0xf8011344>
   118c0:	147ff604 	addi	r17,r2,-40
   118c4:	3462983a 	sll	r17,r6,r17
   118c8:	0029883a 	mov	r20,zero
   118cc:	003ec906 	br	113f4 <__alt_exception_stack_pointer+0xf80113f4>
   118d0:	3009883a 	mov	r4,r6
   118d4:	d9400115 	stw	r5,4(sp)
   118d8:	d9800215 	stw	r6,8(sp)
   118dc:	da000415 	stw	r8,16(sp)
   118e0:	da400315 	stw	r9,12(sp)
   118e4:	0006ba40 	call	6ba4 <__clzsi2>
   118e8:	10800804 	addi	r2,r2,32
   118ec:	da400317 	ldw	r9,12(sp)
   118f0:	da000417 	ldw	r8,16(sp)
   118f4:	d9800217 	ldw	r6,8(sp)
   118f8:	d9400117 	ldw	r5,4(sp)
   118fc:	003eb306 	br	113cc <__alt_exception_stack_pointer+0xf80113cc>
   11900:	d9800017 	ldw	r6,0(sp)
   11904:	a9ab883a 	add	r21,r21,r6
   11908:	a98b803a 	cmpltu	r5,r21,r6
   1190c:	2d8b883a 	add	r5,r5,r22
   11910:	2a11883a 	add	r8,r5,r8
   11914:	897fffc4 	addi	r5,r17,-1
   11918:	b2000c2e 	bgeu	r22,r8,1194c <__divdf3+0x808>
   1191c:	41003f36 	bltu	r8,r4,11a1c <__divdf3+0x8d8>
   11920:	22006c26 	beq	r4,r8,11ad4 <__divdf3+0x990>
   11924:	4109c83a 	sub	r4,r8,r4
   11928:	2823883a 	mov	r17,r5
   1192c:	003f3b06 	br	1161c <__alt_exception_stack_pointer+0xf801161c>
   11930:	ad3ed336 	bltu	r21,r20,11480 <__alt_exception_stack_pointer+0xf8011480>
   11934:	a804d07a 	srli	r2,r21,1
   11938:	802e97fa 	slli	r23,r16,31
   1193c:	a82a97fa 	slli	r21,r21,31
   11940:	8020d07a 	srli	r16,r16,1
   11944:	b8aeb03a 	or	r23,r23,r2
   11948:	003ed006 	br	1148c <__alt_exception_stack_pointer+0xf801148c>
   1194c:	b23ff51e 	bne	r22,r8,11924 <__alt_exception_stack_pointer+0xf8011924>
   11950:	d9800017 	ldw	r6,0(sp)
   11954:	a9bff12e 	bgeu	r21,r6,1191c <__alt_exception_stack_pointer+0xf801191c>
   11958:	b109c83a 	sub	r4,r22,r4
   1195c:	2823883a 	mov	r17,r5
   11960:	003f2e06 	br	1161c <__alt_exception_stack_pointer+0xf801161c>
   11964:	2021883a 	mov	r16,r4
   11968:	003eff06 	br	11568 <__alt_exception_stack_pointer+0xf8011568>
   1196c:	2023883a 	mov	r17,r4
   11970:	003ee406 	br	11504 <__alt_exception_stack_pointer+0xf8011504>
   11974:	a8bfe236 	bltu	r21,r2,11900 <__alt_exception_stack_pointer+0xf8011900>
   11978:	0009883a 	mov	r4,zero
   1197c:	003f2706 	br	1161c <__alt_exception_stack_pointer+0xf801161c>
   11980:	81002d36 	bltu	r16,r4,11a38 <__divdf3+0x8f4>
   11984:	24005626 	beq	r4,r16,11ae0 <__divdf3+0x99c>
   11988:	2829883a 	mov	r20,r5
   1198c:	003f8006 	br	11790 <__alt_exception_stack_pointer+0xf8011790>
   11990:	053fffc4 	movi	r20,-1
   11994:	003f7f06 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   11998:	200f883a 	mov	r7,r4
   1199c:	003f3c06 	br	11690 <__alt_exception_stack_pointer+0xf8011690>
   119a0:	1011883a 	mov	r8,r2
   119a4:	003f5506 	br	116fc <__alt_exception_stack_pointer+0xf80116fc>
   119a8:	e027883a 	mov	r19,fp
   119ac:	003f7906 	br	11794 <__alt_exception_stack_pointer+0xf8011794>
   119b0:	010007c4 	movi	r4,31
   119b4:	20c02816 	blt	r4,r3,11a58 <__divdf3+0x914>
   119b8:	00800804 	movi	r2,32
   119bc:	10c5c83a 	sub	r2,r2,r3
   119c0:	888a983a 	sll	r5,r17,r2
   119c4:	a0c8d83a 	srl	r4,r20,r3
   119c8:	a084983a 	sll	r2,r20,r2
   119cc:	88e2d83a 	srl	r17,r17,r3
   119d0:	2906b03a 	or	r3,r5,r4
   119d4:	1004c03a 	cmpne	r2,r2,zero
   119d8:	1886b03a 	or	r3,r3,r2
   119dc:	188001cc 	andi	r2,r3,7
   119e0:	10000726 	beq	r2,zero,11a00 <__divdf3+0x8bc>
   119e4:	188003cc 	andi	r2,r3,15
   119e8:	01000104 	movi	r4,4
   119ec:	11000426 	beq	r2,r4,11a00 <__divdf3+0x8bc>
   119f0:	1805883a 	mov	r2,r3
   119f4:	10c00104 	addi	r3,r2,4
   119f8:	1885803a 	cmpltu	r2,r3,r2
   119fc:	88a3883a 	add	r17,r17,r2
   11a00:	8880202c 	andhi	r2,r17,128
   11a04:	10002926 	beq	r2,zero,11aac <__divdf3+0x968>
   11a08:	9900004c 	andi	r4,r19,1
   11a0c:	00800044 	movi	r2,1
   11a10:	0021883a 	mov	r16,zero
   11a14:	002b883a 	mov	r21,zero
   11a18:	003e2906 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11a1c:	d9800017 	ldw	r6,0(sp)
   11a20:	8c7fff84 	addi	r17,r17,-2
   11a24:	a9ab883a 	add	r21,r21,r6
   11a28:	a98b803a 	cmpltu	r5,r21,r6
   11a2c:	2d8b883a 	add	r5,r5,r22
   11a30:	2a11883a 	add	r8,r5,r8
   11a34:	003ef806 	br	11618 <__alt_exception_stack_pointer+0xf8011618>
   11a38:	d9800017 	ldw	r6,0(sp)
   11a3c:	318f883a 	add	r7,r6,r6
   11a40:	398b803a 	cmpltu	r5,r7,r6
   11a44:	2d8d883a 	add	r6,r5,r22
   11a48:	81a1883a 	add	r16,r16,r6
   11a4c:	a17fff84 	addi	r5,r20,-2
   11a50:	d9c00015 	stw	r7,0(sp)
   11a54:	003f8806 	br	11878 <__alt_exception_stack_pointer+0xf8011878>
   11a58:	013ff844 	movi	r4,-31
   11a5c:	2085c83a 	sub	r2,r4,r2
   11a60:	8888d83a 	srl	r4,r17,r2
   11a64:	00800804 	movi	r2,32
   11a68:	18802126 	beq	r3,r2,11af0 <__divdf3+0x9ac>
   11a6c:	04001004 	movi	r16,64
   11a70:	80c7c83a 	sub	r3,r16,r3
   11a74:	88e0983a 	sll	r16,r17,r3
   11a78:	8504b03a 	or	r2,r16,r20
   11a7c:	1004c03a 	cmpne	r2,r2,zero
   11a80:	2084b03a 	or	r2,r4,r2
   11a84:	144001cc 	andi	r17,r2,7
   11a88:	88000d1e 	bne	r17,zero,11ac0 <__divdf3+0x97c>
   11a8c:	0021883a 	mov	r16,zero
   11a90:	102ad0fa 	srli	r21,r2,3
   11a94:	9900004c 	andi	r4,r19,1
   11a98:	0005883a 	mov	r2,zero
   11a9c:	ac6ab03a 	or	r21,r21,r17
   11aa0:	003e0706 	br	112c0 <__alt_exception_stack_pointer+0xf80112c0>
   11aa4:	1007883a 	mov	r3,r2
   11aa8:	0023883a 	mov	r17,zero
   11aac:	8820927a 	slli	r16,r17,9
   11ab0:	1805883a 	mov	r2,r3
   11ab4:	8822977a 	slli	r17,r17,29
   11ab8:	8020d33a 	srli	r16,r16,12
   11abc:	003ff406 	br	11a90 <__alt_exception_stack_pointer+0xf8011a90>
   11ac0:	10c003cc 	andi	r3,r2,15
   11ac4:	01000104 	movi	r4,4
   11ac8:	193ff626 	beq	r3,r4,11aa4 <__alt_exception_stack_pointer+0xf8011aa4>
   11acc:	0023883a 	mov	r17,zero
   11ad0:	003fc806 	br	119f4 <__alt_exception_stack_pointer+0xf80119f4>
   11ad4:	a8bfd136 	bltu	r21,r2,11a1c <__alt_exception_stack_pointer+0xf8011a1c>
   11ad8:	2823883a 	mov	r17,r5
   11adc:	003fa606 	br	11978 <__alt_exception_stack_pointer+0xf8011978>
   11ae0:	d9800017 	ldw	r6,0(sp)
   11ae4:	30bfd436 	bltu	r6,r2,11a38 <__alt_exception_stack_pointer+0xf8011a38>
   11ae8:	2829883a 	mov	r20,r5
   11aec:	003f6406 	br	11880 <__alt_exception_stack_pointer+0xf8011880>
   11af0:	0021883a 	mov	r16,zero
   11af4:	003fe006 	br	11a78 <__alt_exception_stack_pointer+0xf8011a78>
   11af8:	00800434 	movhi	r2,16
   11afc:	8c000234 	orhi	r16,r17,8
   11b00:	10bfffc4 	addi	r2,r2,-1
   11b04:	e009883a 	mov	r4,fp
   11b08:	80a0703a 	and	r16,r16,r2
   11b0c:	a02b883a 	mov	r21,r20
   11b10:	003e4e06 	br	1144c <__alt_exception_stack_pointer+0xf801144c>

00011b14 <__ledf2>:
   11b14:	2804d53a 	srli	r2,r5,20
   11b18:	3810d53a 	srli	r8,r7,20
   11b1c:	00c00434 	movhi	r3,16
   11b20:	18ffffc4 	addi	r3,r3,-1
   11b24:	1081ffcc 	andi	r2,r2,2047
   11b28:	0241ffc4 	movi	r9,2047
   11b2c:	28d4703a 	and	r10,r5,r3
   11b30:	4201ffcc 	andi	r8,r8,2047
   11b34:	38c6703a 	and	r3,r7,r3
   11b38:	280ad7fa 	srli	r5,r5,31
   11b3c:	380ed7fa 	srli	r7,r7,31
   11b40:	12401f26 	beq	r2,r9,11bc0 <__ledf2+0xac>
   11b44:	0241ffc4 	movi	r9,2047
   11b48:	42401426 	beq	r8,r9,11b9c <__ledf2+0x88>
   11b4c:	1000091e 	bne	r2,zero,11b74 <__ledf2+0x60>
   11b50:	2296b03a 	or	r11,r4,r10
   11b54:	5813003a 	cmpeq	r9,r11,zero
   11b58:	29403fcc 	andi	r5,r5,255
   11b5c:	40000a1e 	bne	r8,zero,11b88 <__ledf2+0x74>
   11b60:	30d8b03a 	or	r12,r6,r3
   11b64:	6000081e 	bne	r12,zero,11b88 <__ledf2+0x74>
   11b68:	0005883a 	mov	r2,zero
   11b6c:	5800111e 	bne	r11,zero,11bb4 <__ledf2+0xa0>
   11b70:	f800283a 	ret
   11b74:	29403fcc 	andi	r5,r5,255
   11b78:	40000c1e 	bne	r8,zero,11bac <__ledf2+0x98>
   11b7c:	30d2b03a 	or	r9,r6,r3
   11b80:	48000c26 	beq	r9,zero,11bb4 <__ledf2+0xa0>
   11b84:	0013883a 	mov	r9,zero
   11b88:	39c03fcc 	andi	r7,r7,255
   11b8c:	48000826 	beq	r9,zero,11bb0 <__ledf2+0x9c>
   11b90:	38001126 	beq	r7,zero,11bd8 <__ledf2+0xc4>
   11b94:	00800044 	movi	r2,1
   11b98:	f800283a 	ret
   11b9c:	30d2b03a 	or	r9,r6,r3
   11ba0:	483fea26 	beq	r9,zero,11b4c <__alt_exception_stack_pointer+0xf8011b4c>
   11ba4:	00800084 	movi	r2,2
   11ba8:	f800283a 	ret
   11bac:	39c03fcc 	andi	r7,r7,255
   11bb0:	39400726 	beq	r7,r5,11bd0 <__ledf2+0xbc>
   11bb4:	2800081e 	bne	r5,zero,11bd8 <__ledf2+0xc4>
   11bb8:	00800044 	movi	r2,1
   11bbc:	f800283a 	ret
   11bc0:	2292b03a 	or	r9,r4,r10
   11bc4:	483fdf26 	beq	r9,zero,11b44 <__alt_exception_stack_pointer+0xf8011b44>
   11bc8:	00800084 	movi	r2,2
   11bcc:	f800283a 	ret
   11bd0:	4080030e 	bge	r8,r2,11be0 <__ledf2+0xcc>
   11bd4:	383fef26 	beq	r7,zero,11b94 <__alt_exception_stack_pointer+0xf8011b94>
   11bd8:	00bfffc4 	movi	r2,-1
   11bdc:	f800283a 	ret
   11be0:	123feb16 	blt	r2,r8,11b90 <__alt_exception_stack_pointer+0xf8011b90>
   11be4:	1abff336 	bltu	r3,r10,11bb4 <__alt_exception_stack_pointer+0xf8011bb4>
   11be8:	50c00326 	beq	r10,r3,11bf8 <__ledf2+0xe4>
   11bec:	50c0042e 	bgeu	r10,r3,11c00 <__ledf2+0xec>
   11bf0:	283fe81e 	bne	r5,zero,11b94 <__alt_exception_stack_pointer+0xf8011b94>
   11bf4:	003ff806 	br	11bd8 <__alt_exception_stack_pointer+0xf8011bd8>
   11bf8:	313fee36 	bltu	r6,r4,11bb4 <__alt_exception_stack_pointer+0xf8011bb4>
   11bfc:	21bffc36 	bltu	r4,r6,11bf0 <__alt_exception_stack_pointer+0xf8011bf0>
   11c00:	0005883a 	mov	r2,zero
   11c04:	f800283a 	ret

00011c08 <__floatunsidf>:
   11c08:	defffe04 	addi	sp,sp,-8
   11c0c:	dc000015 	stw	r16,0(sp)
   11c10:	dfc00115 	stw	ra,4(sp)
   11c14:	2021883a 	mov	r16,r4
   11c18:	20002226 	beq	r4,zero,11ca4 <__floatunsidf+0x9c>
   11c1c:	0006ba40 	call	6ba4 <__clzsi2>
   11c20:	01010784 	movi	r4,1054
   11c24:	2089c83a 	sub	r4,r4,r2
   11c28:	01810cc4 	movi	r6,1075
   11c2c:	310dc83a 	sub	r6,r6,r4
   11c30:	00c007c4 	movi	r3,31
   11c34:	1980120e 	bge	r3,r6,11c80 <__floatunsidf+0x78>
   11c38:	00c104c4 	movi	r3,1043
   11c3c:	1907c83a 	sub	r3,r3,r4
   11c40:	80ca983a 	sll	r5,r16,r3
   11c44:	00800434 	movhi	r2,16
   11c48:	10bfffc4 	addi	r2,r2,-1
   11c4c:	2101ffcc 	andi	r4,r4,2047
   11c50:	0021883a 	mov	r16,zero
   11c54:	288a703a 	and	r5,r5,r2
   11c58:	2008953a 	slli	r4,r4,20
   11c5c:	00c00434 	movhi	r3,16
   11c60:	18ffffc4 	addi	r3,r3,-1
   11c64:	28c6703a 	and	r3,r5,r3
   11c68:	8005883a 	mov	r2,r16
   11c6c:	1906b03a 	or	r3,r3,r4
   11c70:	dfc00117 	ldw	ra,4(sp)
   11c74:	dc000017 	ldw	r16,0(sp)
   11c78:	dec00204 	addi	sp,sp,8
   11c7c:	f800283a 	ret
   11c80:	00c002c4 	movi	r3,11
   11c84:	188bc83a 	sub	r5,r3,r2
   11c88:	814ad83a 	srl	r5,r16,r5
   11c8c:	00c00434 	movhi	r3,16
   11c90:	18ffffc4 	addi	r3,r3,-1
   11c94:	81a0983a 	sll	r16,r16,r6
   11c98:	2101ffcc 	andi	r4,r4,2047
   11c9c:	28ca703a 	and	r5,r5,r3
   11ca0:	003fed06 	br	11c58 <__alt_exception_stack_pointer+0xf8011c58>
   11ca4:	0009883a 	mov	r4,zero
   11ca8:	000b883a 	mov	r5,zero
   11cac:	003fea06 	br	11c58 <__alt_exception_stack_pointer+0xf8011c58>

00011cb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11cb0:	defffe04 	addi	sp,sp,-8
   11cb4:	dfc00115 	stw	ra,4(sp)
   11cb8:	df000015 	stw	fp,0(sp)
   11cbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11cc0:	d0a00d17 	ldw	r2,-32716(gp)
   11cc4:	10000326 	beq	r2,zero,11cd4 <alt_get_errno+0x24>
   11cc8:	d0a00d17 	ldw	r2,-32716(gp)
   11ccc:	103ee83a 	callr	r2
   11cd0:	00000106 	br	11cd8 <alt_get_errno+0x28>
   11cd4:	d0a6fd04 	addi	r2,gp,-25612
}
   11cd8:	e037883a 	mov	sp,fp
   11cdc:	dfc00117 	ldw	ra,4(sp)
   11ce0:	df000017 	ldw	fp,0(sp)
   11ce4:	dec00204 	addi	sp,sp,8
   11ce8:	f800283a 	ret

00011cec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11cec:	defffb04 	addi	sp,sp,-20
   11cf0:	dfc00415 	stw	ra,16(sp)
   11cf4:	df000315 	stw	fp,12(sp)
   11cf8:	df000304 	addi	fp,sp,12
   11cfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11d00:	e0bfff17 	ldw	r2,-4(fp)
   11d04:	10000816 	blt	r2,zero,11d28 <close+0x3c>
   11d08:	01400304 	movi	r5,12
   11d0c:	e13fff17 	ldw	r4,-4(fp)
   11d10:	0004ea80 	call	4ea8 <__mulsi3>
   11d14:	1007883a 	mov	r3,r2
   11d18:	00800074 	movhi	r2,1
   11d1c:	1097d204 	addi	r2,r2,24392
   11d20:	1885883a 	add	r2,r3,r2
   11d24:	00000106 	br	11d2c <close+0x40>
   11d28:	0005883a 	mov	r2,zero
   11d2c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11d30:	e0bffd17 	ldw	r2,-12(fp)
   11d34:	10001926 	beq	r2,zero,11d9c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	10800017 	ldw	r2,0(r2)
   11d40:	10800417 	ldw	r2,16(r2)
   11d44:	10000626 	beq	r2,zero,11d60 <close+0x74>
   11d48:	e0bffd17 	ldw	r2,-12(fp)
   11d4c:	10800017 	ldw	r2,0(r2)
   11d50:	10800417 	ldw	r2,16(r2)
   11d54:	e13ffd17 	ldw	r4,-12(fp)
   11d58:	103ee83a 	callr	r2
   11d5c:	00000106 	br	11d64 <close+0x78>
   11d60:	0005883a 	mov	r2,zero
   11d64:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11d68:	e13fff17 	ldw	r4,-4(fp)
   11d6c:	00123d40 	call	123d4 <alt_release_fd>
    if (rval < 0)
   11d70:	e0bffe17 	ldw	r2,-8(fp)
   11d74:	1000070e 	bge	r2,zero,11d94 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11d78:	0011cb00 	call	11cb0 <alt_get_errno>
   11d7c:	1007883a 	mov	r3,r2
   11d80:	e0bffe17 	ldw	r2,-8(fp)
   11d84:	0085c83a 	sub	r2,zero,r2
   11d88:	18800015 	stw	r2,0(r3)
      return -1;
   11d8c:	00bfffc4 	movi	r2,-1
   11d90:	00000706 	br	11db0 <close+0xc4>
    }
    return 0;
   11d94:	0005883a 	mov	r2,zero
   11d98:	00000506 	br	11db0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11d9c:	0011cb00 	call	11cb0 <alt_get_errno>
   11da0:	1007883a 	mov	r3,r2
   11da4:	00801444 	movi	r2,81
   11da8:	18800015 	stw	r2,0(r3)
    return -1;
   11dac:	00bfffc4 	movi	r2,-1
  }
}
   11db0:	e037883a 	mov	sp,fp
   11db4:	dfc00117 	ldw	ra,4(sp)
   11db8:	df000017 	ldw	fp,0(sp)
   11dbc:	dec00204 	addi	sp,sp,8
   11dc0:	f800283a 	ret

00011dc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11dc4:	defffc04 	addi	sp,sp,-16
   11dc8:	df000315 	stw	fp,12(sp)
   11dcc:	df000304 	addi	fp,sp,12
   11dd0:	e13ffd15 	stw	r4,-12(fp)
   11dd4:	e17ffe15 	stw	r5,-8(fp)
   11dd8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11ddc:	e0bfff17 	ldw	r2,-4(fp)
}
   11de0:	e037883a 	mov	sp,fp
   11de4:	df000017 	ldw	fp,0(sp)
   11de8:	dec00104 	addi	sp,sp,4
   11dec:	f800283a 	ret

00011df0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11df0:	defffe04 	addi	sp,sp,-8
   11df4:	dfc00115 	stw	ra,4(sp)
   11df8:	df000015 	stw	fp,0(sp)
   11dfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e00:	d0a00d17 	ldw	r2,-32716(gp)
   11e04:	10000326 	beq	r2,zero,11e14 <alt_get_errno+0x24>
   11e08:	d0a00d17 	ldw	r2,-32716(gp)
   11e0c:	103ee83a 	callr	r2
   11e10:	00000106 	br	11e18 <alt_get_errno+0x28>
   11e14:	d0a6fd04 	addi	r2,gp,-25612
}
   11e18:	e037883a 	mov	sp,fp
   11e1c:	dfc00117 	ldw	ra,4(sp)
   11e20:	df000017 	ldw	fp,0(sp)
   11e24:	dec00204 	addi	sp,sp,8
   11e28:	f800283a 	ret

00011e2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11e2c:	defffb04 	addi	sp,sp,-20
   11e30:	dfc00415 	stw	ra,16(sp)
   11e34:	df000315 	stw	fp,12(sp)
   11e38:	df000304 	addi	fp,sp,12
   11e3c:	e13ffe15 	stw	r4,-8(fp)
   11e40:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11e44:	e0bffe17 	ldw	r2,-8(fp)
   11e48:	10000816 	blt	r2,zero,11e6c <fstat+0x40>
   11e4c:	01400304 	movi	r5,12
   11e50:	e13ffe17 	ldw	r4,-8(fp)
   11e54:	0004ea80 	call	4ea8 <__mulsi3>
   11e58:	1007883a 	mov	r3,r2
   11e5c:	00800074 	movhi	r2,1
   11e60:	1097d204 	addi	r2,r2,24392
   11e64:	1885883a 	add	r2,r3,r2
   11e68:	00000106 	br	11e70 <fstat+0x44>
   11e6c:	0005883a 	mov	r2,zero
   11e70:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11e74:	e0bffd17 	ldw	r2,-12(fp)
   11e78:	10001026 	beq	r2,zero,11ebc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11e7c:	e0bffd17 	ldw	r2,-12(fp)
   11e80:	10800017 	ldw	r2,0(r2)
   11e84:	10800817 	ldw	r2,32(r2)
   11e88:	10000726 	beq	r2,zero,11ea8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   11e8c:	e0bffd17 	ldw	r2,-12(fp)
   11e90:	10800017 	ldw	r2,0(r2)
   11e94:	10800817 	ldw	r2,32(r2)
   11e98:	e17fff17 	ldw	r5,-4(fp)
   11e9c:	e13ffd17 	ldw	r4,-12(fp)
   11ea0:	103ee83a 	callr	r2
   11ea4:	00000a06 	br	11ed0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11ea8:	e0bfff17 	ldw	r2,-4(fp)
   11eac:	00c80004 	movi	r3,8192
   11eb0:	10c00115 	stw	r3,4(r2)
      return 0;
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	00000506 	br	11ed0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11ebc:	0011df00 	call	11df0 <alt_get_errno>
   11ec0:	1007883a 	mov	r3,r2
   11ec4:	00801444 	movi	r2,81
   11ec8:	18800015 	stw	r2,0(r3)
    return -1;
   11ecc:	00bfffc4 	movi	r2,-1
  }
}
   11ed0:	e037883a 	mov	sp,fp
   11ed4:	dfc00117 	ldw	ra,4(sp)
   11ed8:	df000017 	ldw	fp,0(sp)
   11edc:	dec00204 	addi	sp,sp,8
   11ee0:	f800283a 	ret

00011ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ee4:	defffe04 	addi	sp,sp,-8
   11ee8:	dfc00115 	stw	ra,4(sp)
   11eec:	df000015 	stw	fp,0(sp)
   11ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ef4:	d0a00d17 	ldw	r2,-32716(gp)
   11ef8:	10000326 	beq	r2,zero,11f08 <alt_get_errno+0x24>
   11efc:	d0a00d17 	ldw	r2,-32716(gp)
   11f00:	103ee83a 	callr	r2
   11f04:	00000106 	br	11f0c <alt_get_errno+0x28>
   11f08:	d0a6fd04 	addi	r2,gp,-25612
}
   11f0c:	e037883a 	mov	sp,fp
   11f10:	dfc00117 	ldw	ra,4(sp)
   11f14:	df000017 	ldw	fp,0(sp)
   11f18:	dec00204 	addi	sp,sp,8
   11f1c:	f800283a 	ret

00011f20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11f20:	deffed04 	addi	sp,sp,-76
   11f24:	dfc01215 	stw	ra,72(sp)
   11f28:	df001115 	stw	fp,68(sp)
   11f2c:	df001104 	addi	fp,sp,68
   11f30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11f34:	e0bfff17 	ldw	r2,-4(fp)
   11f38:	10000816 	blt	r2,zero,11f5c <isatty+0x3c>
   11f3c:	01400304 	movi	r5,12
   11f40:	e13fff17 	ldw	r4,-4(fp)
   11f44:	0004ea80 	call	4ea8 <__mulsi3>
   11f48:	1007883a 	mov	r3,r2
   11f4c:	00800074 	movhi	r2,1
   11f50:	1097d204 	addi	r2,r2,24392
   11f54:	1885883a 	add	r2,r3,r2
   11f58:	00000106 	br	11f60 <isatty+0x40>
   11f5c:	0005883a 	mov	r2,zero
   11f60:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   11f64:	e0bfef17 	ldw	r2,-68(fp)
   11f68:	10000e26 	beq	r2,zero,11fa4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11f6c:	e0bfef17 	ldw	r2,-68(fp)
   11f70:	10800017 	ldw	r2,0(r2)
   11f74:	10800817 	ldw	r2,32(r2)
   11f78:	1000021e 	bne	r2,zero,11f84 <isatty+0x64>
    {
      return 1;
   11f7c:	00800044 	movi	r2,1
   11f80:	00000d06 	br	11fb8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11f84:	e0bff004 	addi	r2,fp,-64
   11f88:	100b883a 	mov	r5,r2
   11f8c:	e13fff17 	ldw	r4,-4(fp)
   11f90:	0011e2c0 	call	11e2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11f94:	e0bff117 	ldw	r2,-60(fp)
   11f98:	10880020 	cmpeqi	r2,r2,8192
   11f9c:	10803fcc 	andi	r2,r2,255
   11fa0:	00000506 	br	11fb8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11fa4:	0011ee40 	call	11ee4 <alt_get_errno>
   11fa8:	1007883a 	mov	r3,r2
   11fac:	00801444 	movi	r2,81
   11fb0:	18800015 	stw	r2,0(r3)
    return 0;
   11fb4:	0005883a 	mov	r2,zero
  }
}
   11fb8:	e037883a 	mov	sp,fp
   11fbc:	dfc00117 	ldw	ra,4(sp)
   11fc0:	df000017 	ldw	fp,0(sp)
   11fc4:	dec00204 	addi	sp,sp,8
   11fc8:	f800283a 	ret

00011fcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11fcc:	defffc04 	addi	sp,sp,-16
   11fd0:	df000315 	stw	fp,12(sp)
   11fd4:	df000304 	addi	fp,sp,12
   11fd8:	e13ffd15 	stw	r4,-12(fp)
   11fdc:	e17ffe15 	stw	r5,-8(fp)
   11fe0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11fe4:	e0fffe17 	ldw	r3,-8(fp)
   11fe8:	e0bffd17 	ldw	r2,-12(fp)
   11fec:	18800c26 	beq	r3,r2,12020 <alt_load_section+0x54>
  {
    while( to != end )
   11ff0:	00000806 	br	12014 <alt_load_section+0x48>
    {
      *to++ = *from++;
   11ff4:	e0bffe17 	ldw	r2,-8(fp)
   11ff8:	10c00104 	addi	r3,r2,4
   11ffc:	e0fffe15 	stw	r3,-8(fp)
   12000:	e0fffd17 	ldw	r3,-12(fp)
   12004:	19000104 	addi	r4,r3,4
   12008:	e13ffd15 	stw	r4,-12(fp)
   1200c:	18c00017 	ldw	r3,0(r3)
   12010:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12014:	e0fffe17 	ldw	r3,-8(fp)
   12018:	e0bfff17 	ldw	r2,-4(fp)
   1201c:	18bff51e 	bne	r3,r2,11ff4 <__alt_exception_stack_pointer+0xf8011ff4>
    {
      *to++ = *from++;
    }
  }
}
   12020:	0001883a 	nop
   12024:	e037883a 	mov	sp,fp
   12028:	df000017 	ldw	fp,0(sp)
   1202c:	dec00104 	addi	sp,sp,4
   12030:	f800283a 	ret

00012034 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12034:	defffe04 	addi	sp,sp,-8
   12038:	dfc00115 	stw	ra,4(sp)
   1203c:	df000015 	stw	fp,0(sp)
   12040:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12044:	01800074 	movhi	r6,1
   12048:	319c8104 	addi	r6,r6,29188
   1204c:	01400074 	movhi	r5,1
   12050:	29559f04 	addi	r5,r5,22140
   12054:	01000074 	movhi	r4,1
   12058:	211c8104 	addi	r4,r4,29188
   1205c:	0011fcc0 	call	11fcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12060:	01800034 	movhi	r6,0
   12064:	31808f04 	addi	r6,r6,572
   12068:	01400034 	movhi	r5,0
   1206c:	29400804 	addi	r5,r5,32
   12070:	01000034 	movhi	r4,0
   12074:	21000804 	addi	r4,r4,32
   12078:	0011fcc0 	call	11fcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1207c:	01800074 	movhi	r6,1
   12080:	31959f04 	addi	r6,r6,22140
   12084:	01400074 	movhi	r5,1
   12088:	29525204 	addi	r5,r5,18760
   1208c:	01000074 	movhi	r4,1
   12090:	21125204 	addi	r4,r4,18760
   12094:	0011fcc0 	call	11fcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12098:	00138900 	call	13890 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1209c:	0013a500 	call	13a50 <alt_icache_flush_all>
}
   120a0:	0001883a 	nop
   120a4:	e037883a 	mov	sp,fp
   120a8:	dfc00117 	ldw	ra,4(sp)
   120ac:	df000017 	ldw	fp,0(sp)
   120b0:	dec00204 	addi	sp,sp,8
   120b4:	f800283a 	ret

000120b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   120b8:	defffe04 	addi	sp,sp,-8
   120bc:	dfc00115 	stw	ra,4(sp)
   120c0:	df000015 	stw	fp,0(sp)
   120c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   120c8:	d0a00d17 	ldw	r2,-32716(gp)
   120cc:	10000326 	beq	r2,zero,120dc <alt_get_errno+0x24>
   120d0:	d0a00d17 	ldw	r2,-32716(gp)
   120d4:	103ee83a 	callr	r2
   120d8:	00000106 	br	120e0 <alt_get_errno+0x28>
   120dc:	d0a6fd04 	addi	r2,gp,-25612
}
   120e0:	e037883a 	mov	sp,fp
   120e4:	dfc00117 	ldw	ra,4(sp)
   120e8:	df000017 	ldw	fp,0(sp)
   120ec:	dec00204 	addi	sp,sp,8
   120f0:	f800283a 	ret

000120f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   120f4:	defff904 	addi	sp,sp,-28
   120f8:	dfc00615 	stw	ra,24(sp)
   120fc:	df000515 	stw	fp,20(sp)
   12100:	df000504 	addi	fp,sp,20
   12104:	e13ffd15 	stw	r4,-12(fp)
   12108:	e17ffe15 	stw	r5,-8(fp)
   1210c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12110:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12114:	e0bffd17 	ldw	r2,-12(fp)
   12118:	10000816 	blt	r2,zero,1213c <lseek+0x48>
   1211c:	01400304 	movi	r5,12
   12120:	e13ffd17 	ldw	r4,-12(fp)
   12124:	0004ea80 	call	4ea8 <__mulsi3>
   12128:	1007883a 	mov	r3,r2
   1212c:	00800074 	movhi	r2,1
   12130:	1097d204 	addi	r2,r2,24392
   12134:	1885883a 	add	r2,r3,r2
   12138:	00000106 	br	12140 <lseek+0x4c>
   1213c:	0005883a 	mov	r2,zero
   12140:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12144:	e0bffc17 	ldw	r2,-16(fp)
   12148:	10001026 	beq	r2,zero,1218c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1214c:	e0bffc17 	ldw	r2,-16(fp)
   12150:	10800017 	ldw	r2,0(r2)
   12154:	10800717 	ldw	r2,28(r2)
   12158:	10000926 	beq	r2,zero,12180 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1215c:	e0bffc17 	ldw	r2,-16(fp)
   12160:	10800017 	ldw	r2,0(r2)
   12164:	10800717 	ldw	r2,28(r2)
   12168:	e1bfff17 	ldw	r6,-4(fp)
   1216c:	e17ffe17 	ldw	r5,-8(fp)
   12170:	e13ffc17 	ldw	r4,-16(fp)
   12174:	103ee83a 	callr	r2
   12178:	e0bffb15 	stw	r2,-20(fp)
   1217c:	00000506 	br	12194 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12180:	00bfde84 	movi	r2,-134
   12184:	e0bffb15 	stw	r2,-20(fp)
   12188:	00000206 	br	12194 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1218c:	00bfebc4 	movi	r2,-81
   12190:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12194:	e0bffb17 	ldw	r2,-20(fp)
   12198:	1000070e 	bge	r2,zero,121b8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1219c:	00120b80 	call	120b8 <alt_get_errno>
   121a0:	1007883a 	mov	r3,r2
   121a4:	e0bffb17 	ldw	r2,-20(fp)
   121a8:	0085c83a 	sub	r2,zero,r2
   121ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   121b0:	00bfffc4 	movi	r2,-1
   121b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   121b8:	e0bffb17 	ldw	r2,-20(fp)
}
   121bc:	e037883a 	mov	sp,fp
   121c0:	dfc00117 	ldw	ra,4(sp)
   121c4:	df000017 	ldw	fp,0(sp)
   121c8:	dec00204 	addi	sp,sp,8
   121cc:	f800283a 	ret

000121d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   121d0:	defffd04 	addi	sp,sp,-12
   121d4:	dfc00215 	stw	ra,8(sp)
   121d8:	df000115 	stw	fp,4(sp)
   121dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   121e0:	0009883a 	mov	r4,zero
   121e4:	001275c0 	call	1275c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   121e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   121ec:	00127940 	call	12794 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   121f0:	01800074 	movhi	r6,1
   121f4:	31958904 	addi	r6,r6,22052
   121f8:	01400074 	movhi	r5,1
   121fc:	29558e04 	addi	r5,r5,22072
   12200:	01000074 	movhi	r4,1
   12204:	21158904 	addi	r4,r4,22052
   12208:	0013df40 	call	13df4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1220c:	00139900 	call	13990 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12210:	01000074 	movhi	r4,1
   12214:	210e7c04 	addi	r4,r4,14832
   12218:	00145b40 	call	145b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1221c:	d0a70117 	ldw	r2,-25596(gp)
   12220:	d0e70217 	ldw	r3,-25592(gp)
   12224:	d1270317 	ldw	r4,-25588(gp)
   12228:	200d883a 	mov	r6,r4
   1222c:	180b883a 	mov	r5,r3
   12230:	1009883a 	mov	r4,r2
   12234:	000146c0 	call	146c <main>
   12238:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1223c:	01000044 	movi	r4,1
   12240:	0011cec0 	call	11cec <close>
  exit (result);
   12244:	e13fff17 	ldw	r4,-4(fp)
   12248:	00145c80 	call	145c8 <exit>

0001224c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1224c:	defffe04 	addi	sp,sp,-8
   12250:	df000115 	stw	fp,4(sp)
   12254:	df000104 	addi	fp,sp,4
   12258:	e13fff15 	stw	r4,-4(fp)
}
   1225c:	0001883a 	nop
   12260:	e037883a 	mov	sp,fp
   12264:	df000017 	ldw	fp,0(sp)
   12268:	dec00104 	addi	sp,sp,4
   1226c:	f800283a 	ret

00012270 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   12270:	defffe04 	addi	sp,sp,-8
   12274:	df000115 	stw	fp,4(sp)
   12278:	df000104 	addi	fp,sp,4
   1227c:	e13fff15 	stw	r4,-4(fp)
}
   12280:	0001883a 	nop
   12284:	e037883a 	mov	sp,fp
   12288:	df000017 	ldw	fp,0(sp)
   1228c:	dec00104 	addi	sp,sp,4
   12290:	f800283a 	ret

00012294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12294:	defffe04 	addi	sp,sp,-8
   12298:	dfc00115 	stw	ra,4(sp)
   1229c:	df000015 	stw	fp,0(sp)
   122a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   122a4:	d0a00d17 	ldw	r2,-32716(gp)
   122a8:	10000326 	beq	r2,zero,122b8 <alt_get_errno+0x24>
   122ac:	d0a00d17 	ldw	r2,-32716(gp)
   122b0:	103ee83a 	callr	r2
   122b4:	00000106 	br	122bc <alt_get_errno+0x28>
   122b8:	d0a6fd04 	addi	r2,gp,-25612
}
   122bc:	e037883a 	mov	sp,fp
   122c0:	dfc00117 	ldw	ra,4(sp)
   122c4:	df000017 	ldw	fp,0(sp)
   122c8:	dec00204 	addi	sp,sp,8
   122cc:	f800283a 	ret

000122d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   122d0:	defff904 	addi	sp,sp,-28
   122d4:	dfc00615 	stw	ra,24(sp)
   122d8:	df000515 	stw	fp,20(sp)
   122dc:	df000504 	addi	fp,sp,20
   122e0:	e13ffd15 	stw	r4,-12(fp)
   122e4:	e17ffe15 	stw	r5,-8(fp)
   122e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   122ec:	e0bffd17 	ldw	r2,-12(fp)
   122f0:	10000816 	blt	r2,zero,12314 <read+0x44>
   122f4:	01400304 	movi	r5,12
   122f8:	e13ffd17 	ldw	r4,-12(fp)
   122fc:	0004ea80 	call	4ea8 <__mulsi3>
   12300:	1007883a 	mov	r3,r2
   12304:	00800074 	movhi	r2,1
   12308:	1097d204 	addi	r2,r2,24392
   1230c:	1885883a 	add	r2,r3,r2
   12310:	00000106 	br	12318 <read+0x48>
   12314:	0005883a 	mov	r2,zero
   12318:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1231c:	e0bffb17 	ldw	r2,-20(fp)
   12320:	10002226 	beq	r2,zero,123ac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12324:	e0bffb17 	ldw	r2,-20(fp)
   12328:	10800217 	ldw	r2,8(r2)
   1232c:	108000cc 	andi	r2,r2,3
   12330:	10800060 	cmpeqi	r2,r2,1
   12334:	1000181e 	bne	r2,zero,12398 <read+0xc8>
        (fd->dev->read))
   12338:	e0bffb17 	ldw	r2,-20(fp)
   1233c:	10800017 	ldw	r2,0(r2)
   12340:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12344:	10001426 	beq	r2,zero,12398 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12348:	e0bffb17 	ldw	r2,-20(fp)
   1234c:	10800017 	ldw	r2,0(r2)
   12350:	10800517 	ldw	r2,20(r2)
   12354:	e0ffff17 	ldw	r3,-4(fp)
   12358:	180d883a 	mov	r6,r3
   1235c:	e17ffe17 	ldw	r5,-8(fp)
   12360:	e13ffb17 	ldw	r4,-20(fp)
   12364:	103ee83a 	callr	r2
   12368:	e0bffc15 	stw	r2,-16(fp)
   1236c:	e0bffc17 	ldw	r2,-16(fp)
   12370:	1000070e 	bge	r2,zero,12390 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   12374:	00122940 	call	12294 <alt_get_errno>
   12378:	1007883a 	mov	r3,r2
   1237c:	e0bffc17 	ldw	r2,-16(fp)
   12380:	0085c83a 	sub	r2,zero,r2
   12384:	18800015 	stw	r2,0(r3)
          return -1;
   12388:	00bfffc4 	movi	r2,-1
   1238c:	00000c06 	br	123c0 <read+0xf0>
        }
        return rval;
   12390:	e0bffc17 	ldw	r2,-16(fp)
   12394:	00000a06 	br	123c0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12398:	00122940 	call	12294 <alt_get_errno>
   1239c:	1007883a 	mov	r3,r2
   123a0:	00800344 	movi	r2,13
   123a4:	18800015 	stw	r2,0(r3)
   123a8:	00000406 	br	123bc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   123ac:	00122940 	call	12294 <alt_get_errno>
   123b0:	1007883a 	mov	r3,r2
   123b4:	00801444 	movi	r2,81
   123b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   123bc:	00bfffc4 	movi	r2,-1
}
   123c0:	e037883a 	mov	sp,fp
   123c4:	dfc00117 	ldw	ra,4(sp)
   123c8:	df000017 	ldw	fp,0(sp)
   123cc:	dec00204 	addi	sp,sp,8
   123d0:	f800283a 	ret

000123d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   123d4:	defffc04 	addi	sp,sp,-16
   123d8:	dfc00315 	stw	ra,12(sp)
   123dc:	df000215 	stw	fp,8(sp)
   123e0:	dc000115 	stw	r16,4(sp)
   123e4:	df000204 	addi	fp,sp,8
   123e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	108000d0 	cmplti	r2,r2,3
   123f4:	1000111e 	bne	r2,zero,1243c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   123f8:	04000074 	movhi	r16,1
   123fc:	8417d204 	addi	r16,r16,24392
   12400:	e0bffe17 	ldw	r2,-8(fp)
   12404:	01400304 	movi	r5,12
   12408:	1009883a 	mov	r4,r2
   1240c:	0004ea80 	call	4ea8 <__mulsi3>
   12410:	8085883a 	add	r2,r16,r2
   12414:	10800204 	addi	r2,r2,8
   12418:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1241c:	04000074 	movhi	r16,1
   12420:	8417d204 	addi	r16,r16,24392
   12424:	e0bffe17 	ldw	r2,-8(fp)
   12428:	01400304 	movi	r5,12
   1242c:	1009883a 	mov	r4,r2
   12430:	0004ea80 	call	4ea8 <__mulsi3>
   12434:	8085883a 	add	r2,r16,r2
   12438:	10000015 	stw	zero,0(r2)
  }
}
   1243c:	0001883a 	nop
   12440:	e6ffff04 	addi	sp,fp,-4
   12444:	dfc00217 	ldw	ra,8(sp)
   12448:	df000117 	ldw	fp,4(sp)
   1244c:	dc000017 	ldw	r16,0(sp)
   12450:	dec00304 	addi	sp,sp,12
   12454:	f800283a 	ret

00012458 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12458:	defff904 	addi	sp,sp,-28
   1245c:	df000615 	stw	fp,24(sp)
   12460:	df000604 	addi	fp,sp,24
   12464:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12468:	0005303a 	rdctl	r2,status
   1246c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12470:	e0fffe17 	ldw	r3,-8(fp)
   12474:	00bfff84 	movi	r2,-2
   12478:	1884703a 	and	r2,r3,r2
   1247c:	1001703a 	wrctl	status,r2
  
  return context;
   12480:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12484:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12488:	d0a00e17 	ldw	r2,-32712(gp)
   1248c:	10c000c4 	addi	r3,r2,3
   12490:	00bfff04 	movi	r2,-4
   12494:	1884703a 	and	r2,r3,r2
   12498:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1249c:	d0e00e17 	ldw	r3,-32712(gp)
   124a0:	e0bfff17 	ldw	r2,-4(fp)
   124a4:	1887883a 	add	r3,r3,r2
   124a8:	00820034 	movhi	r2,2048
   124ac:	10bf0004 	addi	r2,r2,-1024
   124b0:	10c0062e 	bgeu	r2,r3,124cc <sbrk+0x74>
   124b4:	e0bffb17 	ldw	r2,-20(fp)
   124b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124bc:	e0bffa17 	ldw	r2,-24(fp)
   124c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   124c4:	00bfffc4 	movi	r2,-1
   124c8:	00000b06 	br	124f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   124cc:	d0a00e17 	ldw	r2,-32712(gp)
   124d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   124d4:	d0e00e17 	ldw	r3,-32712(gp)
   124d8:	e0bfff17 	ldw	r2,-4(fp)
   124dc:	1885883a 	add	r2,r3,r2
   124e0:	d0a00e15 	stw	r2,-32712(gp)
   124e4:	e0bffb17 	ldw	r2,-20(fp)
   124e8:	e0bffc15 	stw	r2,-16(fp)
   124ec:	e0bffc17 	ldw	r2,-16(fp)
   124f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   124f4:	e0bffd17 	ldw	r2,-12(fp)
} 
   124f8:	e037883a 	mov	sp,fp
   124fc:	df000017 	ldw	fp,0(sp)
   12500:	dec00104 	addi	sp,sp,4
   12504:	f800283a 	ret

00012508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12508:	defffe04 	addi	sp,sp,-8
   1250c:	dfc00115 	stw	ra,4(sp)
   12510:	df000015 	stw	fp,0(sp)
   12514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12518:	d0a00d17 	ldw	r2,-32716(gp)
   1251c:	10000326 	beq	r2,zero,1252c <alt_get_errno+0x24>
   12520:	d0a00d17 	ldw	r2,-32716(gp)
   12524:	103ee83a 	callr	r2
   12528:	00000106 	br	12530 <alt_get_errno+0x28>
   1252c:	d0a6fd04 	addi	r2,gp,-25612
}
   12530:	e037883a 	mov	sp,fp
   12534:	dfc00117 	ldw	ra,4(sp)
   12538:	df000017 	ldw	fp,0(sp)
   1253c:	dec00204 	addi	sp,sp,8
   12540:	f800283a 	ret

00012544 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   12544:	defffc04 	addi	sp,sp,-16
   12548:	dfc00315 	stw	ra,12(sp)
   1254c:	df000215 	stw	fp,8(sp)
   12550:	df000204 	addi	fp,sp,8
   12554:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12558:	d0a70617 	ldw	r2,-25576(gp)
  clock_t ticks = alt_nticks(); 
   1255c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12560:	d0a70517 	ldw	r2,-25580(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   12564:	1000061e 	bne	r2,zero,12580 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   12568:	00125080 	call	12508 <alt_get_errno>
   1256c:	1007883a 	mov	r3,r2
   12570:	00801604 	movi	r2,88
   12574:	18800015 	stw	r2,0(r3)
    return 0;
   12578:	0005883a 	mov	r2,zero
   1257c:	00000a06 	br	125a8 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   12588:	e0bfff17 	ldw	r2,-4(fp)
   1258c:	e0fffe17 	ldw	r3,-8(fp)
   12590:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   12594:	e0bfff17 	ldw	r2,-4(fp)
   12598:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1259c:	e0bfff17 	ldw	r2,-4(fp)
   125a0:	10000315 	stw	zero,12(r2)

  return ticks;
   125a4:	e0bffe17 	ldw	r2,-8(fp)
}
   125a8:	e037883a 	mov	sp,fp
   125ac:	dfc00117 	ldw	ra,4(sp)
   125b0:	df000017 	ldw	fp,0(sp)
   125b4:	dec00204 	addi	sp,sp,8
   125b8:	f800283a 	ret

000125bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   125bc:	defffd04 	addi	sp,sp,-12
   125c0:	dfc00215 	stw	ra,8(sp)
   125c4:	df000115 	stw	fp,4(sp)
   125c8:	df000104 	addi	fp,sp,4
   125cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   125d0:	e13fff17 	ldw	r4,-4(fp)
   125d4:	00137380 	call	13738 <alt_busy_sleep>
}
   125d8:	e037883a 	mov	sp,fp
   125dc:	dfc00117 	ldw	ra,4(sp)
   125e0:	df000017 	ldw	fp,0(sp)
   125e4:	dec00204 	addi	sp,sp,8
   125e8:	f800283a 	ret

000125ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   125ec:	defffe04 	addi	sp,sp,-8
   125f0:	dfc00115 	stw	ra,4(sp)
   125f4:	df000015 	stw	fp,0(sp)
   125f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   125fc:	d0a00d17 	ldw	r2,-32716(gp)
   12600:	10000326 	beq	r2,zero,12610 <alt_get_errno+0x24>
   12604:	d0a00d17 	ldw	r2,-32716(gp)
   12608:	103ee83a 	callr	r2
   1260c:	00000106 	br	12614 <alt_get_errno+0x28>
   12610:	d0a6fd04 	addi	r2,gp,-25612
}
   12614:	e037883a 	mov	sp,fp
   12618:	dfc00117 	ldw	ra,4(sp)
   1261c:	df000017 	ldw	fp,0(sp)
   12620:	dec00204 	addi	sp,sp,8
   12624:	f800283a 	ret

00012628 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12628:	defff904 	addi	sp,sp,-28
   1262c:	dfc00615 	stw	ra,24(sp)
   12630:	df000515 	stw	fp,20(sp)
   12634:	df000504 	addi	fp,sp,20
   12638:	e13ffd15 	stw	r4,-12(fp)
   1263c:	e17ffe15 	stw	r5,-8(fp)
   12640:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12644:	e0bffd17 	ldw	r2,-12(fp)
   12648:	10000816 	blt	r2,zero,1266c <write+0x44>
   1264c:	01400304 	movi	r5,12
   12650:	e13ffd17 	ldw	r4,-12(fp)
   12654:	0004ea80 	call	4ea8 <__mulsi3>
   12658:	1007883a 	mov	r3,r2
   1265c:	00800074 	movhi	r2,1
   12660:	1097d204 	addi	r2,r2,24392
   12664:	1885883a 	add	r2,r3,r2
   12668:	00000106 	br	12670 <write+0x48>
   1266c:	0005883a 	mov	r2,zero
   12670:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12674:	e0bffb17 	ldw	r2,-20(fp)
   12678:	10002126 	beq	r2,zero,12700 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1267c:	e0bffb17 	ldw	r2,-20(fp)
   12680:	10800217 	ldw	r2,8(r2)
   12684:	108000cc 	andi	r2,r2,3
   12688:	10001826 	beq	r2,zero,126ec <write+0xc4>
   1268c:	e0bffb17 	ldw	r2,-20(fp)
   12690:	10800017 	ldw	r2,0(r2)
   12694:	10800617 	ldw	r2,24(r2)
   12698:	10001426 	beq	r2,zero,126ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1269c:	e0bffb17 	ldw	r2,-20(fp)
   126a0:	10800017 	ldw	r2,0(r2)
   126a4:	10800617 	ldw	r2,24(r2)
   126a8:	e0ffff17 	ldw	r3,-4(fp)
   126ac:	180d883a 	mov	r6,r3
   126b0:	e17ffe17 	ldw	r5,-8(fp)
   126b4:	e13ffb17 	ldw	r4,-20(fp)
   126b8:	103ee83a 	callr	r2
   126bc:	e0bffc15 	stw	r2,-16(fp)
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	1000070e 	bge	r2,zero,126e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   126c8:	00125ec0 	call	125ec <alt_get_errno>
   126cc:	1007883a 	mov	r3,r2
   126d0:	e0bffc17 	ldw	r2,-16(fp)
   126d4:	0085c83a 	sub	r2,zero,r2
   126d8:	18800015 	stw	r2,0(r3)
        return -1;
   126dc:	00bfffc4 	movi	r2,-1
   126e0:	00000c06 	br	12714 <write+0xec>
      }
      return rval;
   126e4:	e0bffc17 	ldw	r2,-16(fp)
   126e8:	00000a06 	br	12714 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   126ec:	00125ec0 	call	125ec <alt_get_errno>
   126f0:	1007883a 	mov	r3,r2
   126f4:	00800344 	movi	r2,13
   126f8:	18800015 	stw	r2,0(r3)
   126fc:	00000406 	br	12710 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12700:	00125ec0 	call	125ec <alt_get_errno>
   12704:	1007883a 	mov	r3,r2
   12708:	00801444 	movi	r2,81
   1270c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12710:	00bfffc4 	movi	r2,-1
}
   12714:	e037883a 	mov	sp,fp
   12718:	dfc00117 	ldw	ra,4(sp)
   1271c:	df000017 	ldw	fp,0(sp)
   12720:	dec00204 	addi	sp,sp,8
   12724:	f800283a 	ret

00012728 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12728:	defffd04 	addi	sp,sp,-12
   1272c:	dfc00215 	stw	ra,8(sp)
   12730:	df000115 	stw	fp,4(sp)
   12734:	df000104 	addi	fp,sp,4
   12738:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1273c:	d1600a04 	addi	r5,gp,-32728
   12740:	e13fff17 	ldw	r4,-4(fp)
   12744:	00138ec0 	call	138ec <alt_dev_llist_insert>
}
   12748:	e037883a 	mov	sp,fp
   1274c:	dfc00117 	ldw	ra,4(sp)
   12750:	df000017 	ldw	fp,0(sp)
   12754:	dec00204 	addi	sp,sp,8
   12758:	f800283a 	ret

0001275c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1275c:	defffd04 	addi	sp,sp,-12
   12760:	dfc00215 	stw	ra,8(sp)
   12764:	df000115 	stw	fp,4(sp)
   12768:	df000104 	addi	fp,sp,4
   1276c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   12770:	00142980 	call	14298 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12774:	00800044 	movi	r2,1
   12778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1277c:	0001883a 	nop
   12780:	e037883a 	mov	sp,fp
   12784:	dfc00117 	ldw	ra,4(sp)
   12788:	df000017 	ldw	fp,0(sp)
   1278c:	dec00204 	addi	sp,sp,8
   12790:	f800283a 	ret

00012794 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12794:	defffd04 	addi	sp,sp,-12
   12798:	dfc00215 	stw	ra,8(sp)
   1279c:	df000115 	stw	fp,4(sp)
   127a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   127a4:	01c0fa04 	movi	r7,1000
   127a8:	01800044 	movi	r6,1
   127ac:	000b883a 	mov	r5,zero
   127b0:	01020234 	movhi	r4,2056
   127b4:	210c0004 	addi	r4,r4,12288
   127b8:	00135900 	call	13590 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   127bc:	000d883a 	mov	r6,zero
   127c0:	000b883a 	mov	r5,zero
   127c4:	01000074 	movhi	r4,1
   127c8:	21183c04 	addi	r4,r4,24816
   127cc:	0012c140 	call	12c14 <altera_avalon_jtag_uart_init>
   127d0:	01000074 	movhi	r4,1
   127d4:	21183204 	addi	r4,r4,24776
   127d8:	00127280 	call	12728 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   127dc:	00800074 	movhi	r2,1
   127e0:	109c4a04 	addi	r2,r2,28968
   127e4:	10800a17 	ldw	r2,40(r2)
   127e8:	10800017 	ldw	r2,0(r2)
   127ec:	1007883a 	mov	r3,r2
   127f0:	00800074 	movhi	r2,1
   127f4:	109c4a04 	addi	r2,r2,28968
   127f8:	10c00b15 	stw	r3,44(r2)
   127fc:	00800074 	movhi	r2,1
   12800:	109c4a04 	addi	r2,r2,28968
   12804:	10800a17 	ldw	r2,40(r2)
   12808:	10800104 	addi	r2,r2,4
   1280c:	10800017 	ldw	r2,0(r2)
   12810:	1007883a 	mov	r3,r2
   12814:	00800074 	movhi	r2,1
   12818:	109c4a04 	addi	r2,r2,28968
   1281c:	10c00c15 	stw	r3,48(r2)
   12820:	00800074 	movhi	r2,1
   12824:	109c4a04 	addi	r2,r2,28968
   12828:	10800a17 	ldw	r2,40(r2)
   1282c:	10800204 	addi	r2,r2,8
   12830:	10800017 	ldw	r2,0(r2)
   12834:	10ffffcc 	andi	r3,r2,65535
   12838:	00800074 	movhi	r2,1
   1283c:	109c4a04 	addi	r2,r2,28968
   12840:	10c00f15 	stw	r3,60(r2)
   12844:	00800074 	movhi	r2,1
   12848:	109c4a04 	addi	r2,r2,28968
   1284c:	10800a17 	ldw	r2,40(r2)
   12850:	10800204 	addi	r2,r2,8
   12854:	10800017 	ldw	r2,0(r2)
   12858:	1006d43a 	srli	r3,r2,16
   1285c:	00800074 	movhi	r2,1
   12860:	109c4a04 	addi	r2,r2,28968
   12864:	10c01015 	stw	r3,64(r2)
   12868:	00800074 	movhi	r2,1
   1286c:	109c4a04 	addi	r2,r2,28968
   12870:	10800a17 	ldw	r2,40(r2)
   12874:	10800304 	addi	r2,r2,12
   12878:	10800017 	ldw	r2,0(r2)
   1287c:	1005d07a 	srai	r2,r2,1
   12880:	10c0004c 	andi	r3,r2,1
   12884:	00800074 	movhi	r2,1
   12888:	109c4a04 	addi	r2,r2,28968
   1288c:	10c00d15 	stw	r3,52(r2)
   12890:	00800074 	movhi	r2,1
   12894:	109c4a04 	addi	r2,r2,28968
   12898:	10800a17 	ldw	r2,40(r2)
   1289c:	10800304 	addi	r2,r2,12
   128a0:	10800017 	ldw	r2,0(r2)
   128a4:	1005d13a 	srai	r2,r2,4
   128a8:	10c003cc 	andi	r3,r2,15
   128ac:	00800074 	movhi	r2,1
   128b0:	109c4a04 	addi	r2,r2,28968
   128b4:	10c00e15 	stw	r3,56(r2)
   128b8:	00800074 	movhi	r2,1
   128bc:	109c4a04 	addi	r2,r2,28968
   128c0:	10800a17 	ldw	r2,40(r2)
   128c4:	10800304 	addi	r2,r2,12
   128c8:	10800017 	ldw	r2,0(r2)
   128cc:	1005d43a 	srai	r2,r2,16
   128d0:	e0bfff05 	stb	r2,-4(fp)
   128d4:	00800074 	movhi	r2,1
   128d8:	109c4a04 	addi	r2,r2,28968
   128dc:	10800a17 	ldw	r2,40(r2)
   128e0:	10800304 	addi	r2,r2,12
   128e4:	10800017 	ldw	r2,0(r2)
   128e8:	1004d63a 	srli	r2,r2,24
   128ec:	e0bfff45 	stb	r2,-3(fp)
   128f0:	00800074 	movhi	r2,1
   128f4:	109c4a04 	addi	r2,r2,28968
   128f8:	10800e17 	ldw	r2,56(r2)
   128fc:	10800058 	cmpnei	r2,r2,1
   12900:	1000041e 	bne	r2,zero,12914 <alt_sys_init+0x180>
   12904:	00800074 	movhi	r2,1
   12908:	109c4a04 	addi	r2,r2,28968
   1290c:	10001115 	stw	zero,68(r2)
   12910:	00000e06 	br	1294c <alt_sys_init+0x1b8>
   12914:	00800074 	movhi	r2,1
   12918:	109c4a04 	addi	r2,r2,28968
   1291c:	10800e17 	ldw	r2,56(r2)
   12920:	10800098 	cmpnei	r2,r2,2
   12924:	1000051e 	bne	r2,zero,1293c <alt_sys_init+0x1a8>
   12928:	00800074 	movhi	r2,1
   1292c:	109c4a04 	addi	r2,r2,28968
   12930:	00c00044 	movi	r3,1
   12934:	10c01115 	stw	r3,68(r2)
   12938:	00000406 	br	1294c <alt_sys_init+0x1b8>
   1293c:	00800074 	movhi	r2,1
   12940:	109c4a04 	addi	r2,r2,28968
   12944:	00c00084 	movi	r3,2
   12948:	10c01115 	stw	r3,68(r2)
   1294c:	e0bfff03 	ldbu	r2,-4(fp)
   12950:	00c00804 	movi	r3,32
   12954:	1885c83a 	sub	r2,r3,r2
   12958:	00ffffc4 	movi	r3,-1
   1295c:	1886d83a 	srl	r3,r3,r2
   12960:	00800074 	movhi	r2,1
   12964:	109c4a04 	addi	r2,r2,28968
   12968:	10c01215 	stw	r3,72(r2)
   1296c:	e0ffff03 	ldbu	r3,-4(fp)
   12970:	00800074 	movhi	r2,1
   12974:	109c4a04 	addi	r2,r2,28968
   12978:	10801117 	ldw	r2,68(r2)
   1297c:	1887883a 	add	r3,r3,r2
   12980:	00800074 	movhi	r2,1
   12984:	109c4a04 	addi	r2,r2,28968
   12988:	10c01315 	stw	r3,76(r2)
   1298c:	e0bfff43 	ldbu	r2,-3(fp)
   12990:	00c00804 	movi	r3,32
   12994:	1885c83a 	sub	r2,r3,r2
   12998:	00ffffc4 	movi	r3,-1
   1299c:	1886d83a 	srl	r3,r3,r2
   129a0:	00800074 	movhi	r2,1
   129a4:	109c4a04 	addi	r2,r2,28968
   129a8:	10c01415 	stw	r3,80(r2)
   129ac:	01000074 	movhi	r4,1
   129b0:	211c4a04 	addi	r4,r4,28968
   129b4:	00127280 	call	12728 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_RESAMPLER, vga_resampler);
   129b8:	00800074 	movhi	r2,1
   129bc:	109c5f04 	addi	r2,r2,29052
   129c0:	10800a17 	ldw	r2,40(r2)
   129c4:	10800017 	ldw	r2,0(r2)
   129c8:	10c003cc 	andi	r3,r2,15
   129cc:	00800074 	movhi	r2,1
   129d0:	109c5f04 	addi	r2,r2,29052
   129d4:	10c00b15 	stw	r3,44(r2)
   129d8:	00800074 	movhi	r2,1
   129dc:	109c5f04 	addi	r2,r2,29052
   129e0:	10800a17 	ldw	r2,40(r2)
   129e4:	10800017 	ldw	r2,0(r2)
   129e8:	1005d13a 	srai	r2,r2,4
   129ec:	10c0004c 	andi	r3,r2,1
   129f0:	00800074 	movhi	r2,1
   129f4:	109c5f04 	addi	r2,r2,29052
   129f8:	10c00c15 	stw	r3,48(r2)
   129fc:	00800074 	movhi	r2,1
   12a00:	109c5f04 	addi	r2,r2,29052
   12a04:	10800a17 	ldw	r2,40(r2)
   12a08:	10800017 	ldw	r2,0(r2)
   12a0c:	1005d17a 	srai	r2,r2,5
   12a10:	10c0004c 	andi	r3,r2,1
   12a14:	00800074 	movhi	r2,1
   12a18:	109c5f04 	addi	r2,r2,29052
   12a1c:	10c00d15 	stw	r3,52(r2)
   12a20:	00800074 	movhi	r2,1
   12a24:	109c5f04 	addi	r2,r2,29052
   12a28:	10800a17 	ldw	r2,40(r2)
   12a2c:	10800017 	ldw	r2,0(r2)
   12a30:	1005d43a 	srai	r2,r2,16
   12a34:	10c003cc 	andi	r3,r2,15
   12a38:	00800074 	movhi	r2,1
   12a3c:	109c5f04 	addi	r2,r2,29052
   12a40:	10c00e15 	stw	r3,56(r2)
   12a44:	00800074 	movhi	r2,1
   12a48:	109c5f04 	addi	r2,r2,29052
   12a4c:	10800a17 	ldw	r2,40(r2)
   12a50:	10800017 	ldw	r2,0(r2)
   12a54:	1005d53a 	srai	r2,r2,20
   12a58:	10c0004c 	andi	r3,r2,1
   12a5c:	00800074 	movhi	r2,1
   12a60:	109c5f04 	addi	r2,r2,29052
   12a64:	10c00f15 	stw	r3,60(r2)
   12a68:	00800074 	movhi	r2,1
   12a6c:	109c5f04 	addi	r2,r2,29052
   12a70:	10800a17 	ldw	r2,40(r2)
   12a74:	10800017 	ldw	r2,0(r2)
   12a78:	1005d57a 	srai	r2,r2,21
   12a7c:	10c0004c 	andi	r3,r2,1
   12a80:	00800074 	movhi	r2,1
   12a84:	109c5f04 	addi	r2,r2,29052
   12a88:	10c01015 	stw	r3,64(r2)
   12a8c:	01000074 	movhi	r4,1
   12a90:	211c5f04 	addi	r4,r4,29052
   12a94:	00127280 	call	12728 <alt_dev_reg>
}
   12a98:	0001883a 	nop
   12a9c:	e037883a 	mov	sp,fp
   12aa0:	dfc00117 	ldw	ra,4(sp)
   12aa4:	df000017 	ldw	fp,0(sp)
   12aa8:	dec00204 	addi	sp,sp,8
   12aac:	f800283a 	ret

00012ab0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12ab0:	defffa04 	addi	sp,sp,-24
   12ab4:	dfc00515 	stw	ra,20(sp)
   12ab8:	df000415 	stw	fp,16(sp)
   12abc:	df000404 	addi	fp,sp,16
   12ac0:	e13ffd15 	stw	r4,-12(fp)
   12ac4:	e17ffe15 	stw	r5,-8(fp)
   12ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12acc:	e0bffd17 	ldw	r2,-12(fp)
   12ad0:	10800017 	ldw	r2,0(r2)
   12ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12ad8:	e0bffc17 	ldw	r2,-16(fp)
   12adc:	10c00a04 	addi	r3,r2,40
   12ae0:	e0bffd17 	ldw	r2,-12(fp)
   12ae4:	10800217 	ldw	r2,8(r2)
   12ae8:	100f883a 	mov	r7,r2
   12aec:	e1bfff17 	ldw	r6,-4(fp)
   12af0:	e17ffe17 	ldw	r5,-8(fp)
   12af4:	1809883a 	mov	r4,r3
   12af8:	00130d80 	call	130d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12afc:	e037883a 	mov	sp,fp
   12b00:	dfc00117 	ldw	ra,4(sp)
   12b04:	df000017 	ldw	fp,0(sp)
   12b08:	dec00204 	addi	sp,sp,8
   12b0c:	f800283a 	ret

00012b10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12b10:	defffa04 	addi	sp,sp,-24
   12b14:	dfc00515 	stw	ra,20(sp)
   12b18:	df000415 	stw	fp,16(sp)
   12b1c:	df000404 	addi	fp,sp,16
   12b20:	e13ffd15 	stw	r4,-12(fp)
   12b24:	e17ffe15 	stw	r5,-8(fp)
   12b28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12b2c:	e0bffd17 	ldw	r2,-12(fp)
   12b30:	10800017 	ldw	r2,0(r2)
   12b34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12b38:	e0bffc17 	ldw	r2,-16(fp)
   12b3c:	10c00a04 	addi	r3,r2,40
   12b40:	e0bffd17 	ldw	r2,-12(fp)
   12b44:	10800217 	ldw	r2,8(r2)
   12b48:	100f883a 	mov	r7,r2
   12b4c:	e1bfff17 	ldw	r6,-4(fp)
   12b50:	e17ffe17 	ldw	r5,-8(fp)
   12b54:	1809883a 	mov	r4,r3
   12b58:	00132f40 	call	132f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12b5c:	e037883a 	mov	sp,fp
   12b60:	dfc00117 	ldw	ra,4(sp)
   12b64:	df000017 	ldw	fp,0(sp)
   12b68:	dec00204 	addi	sp,sp,8
   12b6c:	f800283a 	ret

00012b70 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12b70:	defffc04 	addi	sp,sp,-16
   12b74:	dfc00315 	stw	ra,12(sp)
   12b78:	df000215 	stw	fp,8(sp)
   12b7c:	df000204 	addi	fp,sp,8
   12b80:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12b84:	e0bfff17 	ldw	r2,-4(fp)
   12b88:	10800017 	ldw	r2,0(r2)
   12b8c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   12b90:	e0bffe17 	ldw	r2,-8(fp)
   12b94:	10c00a04 	addi	r3,r2,40
   12b98:	e0bfff17 	ldw	r2,-4(fp)
   12b9c:	10800217 	ldw	r2,8(r2)
   12ba0:	100b883a 	mov	r5,r2
   12ba4:	1809883a 	mov	r4,r3
   12ba8:	0012f800 	call	12f80 <altera_avalon_jtag_uart_close>
}
   12bac:	e037883a 	mov	sp,fp
   12bb0:	dfc00117 	ldw	ra,4(sp)
   12bb4:	df000017 	ldw	fp,0(sp)
   12bb8:	dec00204 	addi	sp,sp,8
   12bbc:	f800283a 	ret

00012bc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12bc0:	defffa04 	addi	sp,sp,-24
   12bc4:	dfc00515 	stw	ra,20(sp)
   12bc8:	df000415 	stw	fp,16(sp)
   12bcc:	df000404 	addi	fp,sp,16
   12bd0:	e13ffd15 	stw	r4,-12(fp)
   12bd4:	e17ffe15 	stw	r5,-8(fp)
   12bd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12bdc:	e0bffd17 	ldw	r2,-12(fp)
   12be0:	10800017 	ldw	r2,0(r2)
   12be4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   12be8:	e0bffc17 	ldw	r2,-16(fp)
   12bec:	10800a04 	addi	r2,r2,40
   12bf0:	e1bfff17 	ldw	r6,-4(fp)
   12bf4:	e17ffe17 	ldw	r5,-8(fp)
   12bf8:	1009883a 	mov	r4,r2
   12bfc:	0012fe80 	call	12fe8 <altera_avalon_jtag_uart_ioctl>
}
   12c00:	e037883a 	mov	sp,fp
   12c04:	dfc00117 	ldw	ra,4(sp)
   12c08:	df000017 	ldw	fp,0(sp)
   12c0c:	dec00204 	addi	sp,sp,8
   12c10:	f800283a 	ret

00012c14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12c14:	defffa04 	addi	sp,sp,-24
   12c18:	dfc00515 	stw	ra,20(sp)
   12c1c:	df000415 	stw	fp,16(sp)
   12c20:	df000404 	addi	fp,sp,16
   12c24:	e13ffd15 	stw	r4,-12(fp)
   12c28:	e17ffe15 	stw	r5,-8(fp)
   12c2c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12c30:	e0bffd17 	ldw	r2,-12(fp)
   12c34:	00c00044 	movi	r3,1
   12c38:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12c3c:	e0bffd17 	ldw	r2,-12(fp)
   12c40:	10800017 	ldw	r2,0(r2)
   12c44:	10800104 	addi	r2,r2,4
   12c48:	1007883a 	mov	r3,r2
   12c4c:	e0bffd17 	ldw	r2,-12(fp)
   12c50:	10800817 	ldw	r2,32(r2)
   12c54:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12c58:	e0bffe17 	ldw	r2,-8(fp)
   12c5c:	e0ffff17 	ldw	r3,-4(fp)
   12c60:	d8000015 	stw	zero,0(sp)
   12c64:	e1fffd17 	ldw	r7,-12(fp)
   12c68:	01800074 	movhi	r6,1
   12c6c:	318b3504 	addi	r6,r6,11476
   12c70:	180b883a 	mov	r5,r3
   12c74:	1009883a 	mov	r4,r2
   12c78:	0013a700 	call	13a70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12c7c:	e0bffd17 	ldw	r2,-12(fp)
   12c80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12c84:	e0bffd17 	ldw	r2,-12(fp)
   12c88:	10800204 	addi	r2,r2,8
   12c8c:	d0e70517 	ldw	r3,-25580(gp)
   12c90:	e1fffd17 	ldw	r7,-12(fp)
   12c94:	01800074 	movhi	r6,1
   12c98:	318bb804 	addi	r6,r6,12000
   12c9c:	180b883a 	mov	r5,r3
   12ca0:	1009883a 	mov	r4,r2
   12ca4:	001360c0 	call	1360c <alt_alarm_start>
   12ca8:	1000040e 	bge	r2,zero,12cbc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12cac:	e0fffd17 	ldw	r3,-12(fp)
   12cb0:	00a00034 	movhi	r2,32768
   12cb4:	10bfffc4 	addi	r2,r2,-1
   12cb8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12cbc:	0001883a 	nop
   12cc0:	e037883a 	mov	sp,fp
   12cc4:	dfc00117 	ldw	ra,4(sp)
   12cc8:	df000017 	ldw	fp,0(sp)
   12ccc:	dec00204 	addi	sp,sp,8
   12cd0:	f800283a 	ret

00012cd4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12cd4:	defff804 	addi	sp,sp,-32
   12cd8:	df000715 	stw	fp,28(sp)
   12cdc:	df000704 	addi	fp,sp,28
   12ce0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12ce4:	e0bfff17 	ldw	r2,-4(fp)
   12ce8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12cec:	e0bffb17 	ldw	r2,-20(fp)
   12cf0:	10800017 	ldw	r2,0(r2)
   12cf4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12cf8:	e0bffc17 	ldw	r2,-16(fp)
   12cfc:	10800104 	addi	r2,r2,4
   12d00:	10800037 	ldwio	r2,0(r2)
   12d04:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12d08:	e0bffd17 	ldw	r2,-12(fp)
   12d0c:	1080c00c 	andi	r2,r2,768
   12d10:	10006d26 	beq	r2,zero,12ec8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12d14:	e0bffd17 	ldw	r2,-12(fp)
   12d18:	1080400c 	andi	r2,r2,256
   12d1c:	10003526 	beq	r2,zero,12df4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12d20:	00800074 	movhi	r2,1
   12d24:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12d28:	e0bffb17 	ldw	r2,-20(fp)
   12d2c:	10800a17 	ldw	r2,40(r2)
   12d30:	10800044 	addi	r2,r2,1
   12d34:	1081ffcc 	andi	r2,r2,2047
   12d38:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12d3c:	e0bffb17 	ldw	r2,-20(fp)
   12d40:	10c00b17 	ldw	r3,44(r2)
   12d44:	e0bffe17 	ldw	r2,-8(fp)
   12d48:	18801526 	beq	r3,r2,12da0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12d4c:	e0bffc17 	ldw	r2,-16(fp)
   12d50:	10800037 	ldwio	r2,0(r2)
   12d54:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12d58:	e0bff917 	ldw	r2,-28(fp)
   12d5c:	10a0000c 	andi	r2,r2,32768
   12d60:	10001126 	beq	r2,zero,12da8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12d64:	e0bffb17 	ldw	r2,-20(fp)
   12d68:	10800a17 	ldw	r2,40(r2)
   12d6c:	e0fff917 	ldw	r3,-28(fp)
   12d70:	1809883a 	mov	r4,r3
   12d74:	e0fffb17 	ldw	r3,-20(fp)
   12d78:	1885883a 	add	r2,r3,r2
   12d7c:	10800e04 	addi	r2,r2,56
   12d80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12d84:	e0bffb17 	ldw	r2,-20(fp)
   12d88:	10800a17 	ldw	r2,40(r2)
   12d8c:	10800044 	addi	r2,r2,1
   12d90:	10c1ffcc 	andi	r3,r2,2047
   12d94:	e0bffb17 	ldw	r2,-20(fp)
   12d98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12d9c:	003fe206 	br	12d28 <__alt_exception_stack_pointer+0xf8012d28>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   12da0:	0001883a 	nop
   12da4:	00000106 	br	12dac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   12da8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12dac:	e0bff917 	ldw	r2,-28(fp)
   12db0:	10bfffec 	andhi	r2,r2,65535
   12db4:	10000f26 	beq	r2,zero,12df4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12db8:	e0bffb17 	ldw	r2,-20(fp)
   12dbc:	10c00817 	ldw	r3,32(r2)
   12dc0:	00bfff84 	movi	r2,-2
   12dc4:	1886703a 	and	r3,r3,r2
   12dc8:	e0bffb17 	ldw	r2,-20(fp)
   12dcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12dd0:	e0bffc17 	ldw	r2,-16(fp)
   12dd4:	10800104 	addi	r2,r2,4
   12dd8:	1007883a 	mov	r3,r2
   12ddc:	e0bffb17 	ldw	r2,-20(fp)
   12de0:	10800817 	ldw	r2,32(r2)
   12de4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12de8:	e0bffc17 	ldw	r2,-16(fp)
   12dec:	10800104 	addi	r2,r2,4
   12df0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12df4:	e0bffd17 	ldw	r2,-12(fp)
   12df8:	1080800c 	andi	r2,r2,512
   12dfc:	103fbe26 	beq	r2,zero,12cf8 <__alt_exception_stack_pointer+0xf8012cf8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12e00:	e0bffd17 	ldw	r2,-12(fp)
   12e04:	1004d43a 	srli	r2,r2,16
   12e08:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12e0c:	00001406 	br	12e60 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12e10:	e0bffc17 	ldw	r2,-16(fp)
   12e14:	e0fffb17 	ldw	r3,-20(fp)
   12e18:	18c00d17 	ldw	r3,52(r3)
   12e1c:	e13ffb17 	ldw	r4,-20(fp)
   12e20:	20c7883a 	add	r3,r4,r3
   12e24:	18c20e04 	addi	r3,r3,2104
   12e28:	18c00003 	ldbu	r3,0(r3)
   12e2c:	18c03fcc 	andi	r3,r3,255
   12e30:	18c0201c 	xori	r3,r3,128
   12e34:	18ffe004 	addi	r3,r3,-128
   12e38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12e3c:	e0bffb17 	ldw	r2,-20(fp)
   12e40:	10800d17 	ldw	r2,52(r2)
   12e44:	10800044 	addi	r2,r2,1
   12e48:	10c1ffcc 	andi	r3,r2,2047
   12e4c:	e0bffb17 	ldw	r2,-20(fp)
   12e50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12e54:	e0bffa17 	ldw	r2,-24(fp)
   12e58:	10bfffc4 	addi	r2,r2,-1
   12e5c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12e60:	e0bffa17 	ldw	r2,-24(fp)
   12e64:	10000526 	beq	r2,zero,12e7c <altera_avalon_jtag_uart_irq+0x1a8>
   12e68:	e0bffb17 	ldw	r2,-20(fp)
   12e6c:	10c00d17 	ldw	r3,52(r2)
   12e70:	e0bffb17 	ldw	r2,-20(fp)
   12e74:	10800c17 	ldw	r2,48(r2)
   12e78:	18bfe51e 	bne	r3,r2,12e10 <__alt_exception_stack_pointer+0xf8012e10>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12e7c:	e0bffa17 	ldw	r2,-24(fp)
   12e80:	103f9d26 	beq	r2,zero,12cf8 <__alt_exception_stack_pointer+0xf8012cf8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12e84:	e0bffb17 	ldw	r2,-20(fp)
   12e88:	10c00817 	ldw	r3,32(r2)
   12e8c:	00bfff44 	movi	r2,-3
   12e90:	1886703a 	and	r3,r3,r2
   12e94:	e0bffb17 	ldw	r2,-20(fp)
   12e98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12e9c:	e0bffb17 	ldw	r2,-20(fp)
   12ea0:	10800017 	ldw	r2,0(r2)
   12ea4:	10800104 	addi	r2,r2,4
   12ea8:	1007883a 	mov	r3,r2
   12eac:	e0bffb17 	ldw	r2,-20(fp)
   12eb0:	10800817 	ldw	r2,32(r2)
   12eb4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12eb8:	e0bffc17 	ldw	r2,-16(fp)
   12ebc:	10800104 	addi	r2,r2,4
   12ec0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12ec4:	003f8c06 	br	12cf8 <__alt_exception_stack_pointer+0xf8012cf8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   12ec8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   12ecc:	0001883a 	nop
   12ed0:	e037883a 	mov	sp,fp
   12ed4:	df000017 	ldw	fp,0(sp)
   12ed8:	dec00104 	addi	sp,sp,4
   12edc:	f800283a 	ret

00012ee0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12ee0:	defff804 	addi	sp,sp,-32
   12ee4:	df000715 	stw	fp,28(sp)
   12ee8:	df000704 	addi	fp,sp,28
   12eec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12ef0:	e0bffb17 	ldw	r2,-20(fp)
   12ef4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12ef8:	e0bff917 	ldw	r2,-28(fp)
   12efc:	10800017 	ldw	r2,0(r2)
   12f00:	10800104 	addi	r2,r2,4
   12f04:	10800037 	ldwio	r2,0(r2)
   12f08:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12f0c:	e0bffa17 	ldw	r2,-24(fp)
   12f10:	1081000c 	andi	r2,r2,1024
   12f14:	10000b26 	beq	r2,zero,12f44 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12f18:	e0bff917 	ldw	r2,-28(fp)
   12f1c:	10800017 	ldw	r2,0(r2)
   12f20:	10800104 	addi	r2,r2,4
   12f24:	1007883a 	mov	r3,r2
   12f28:	e0bff917 	ldw	r2,-28(fp)
   12f2c:	10800817 	ldw	r2,32(r2)
   12f30:	10810014 	ori	r2,r2,1024
   12f34:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   12f38:	e0bff917 	ldw	r2,-28(fp)
   12f3c:	10000915 	stw	zero,36(r2)
   12f40:	00000a06 	br	12f6c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12f44:	e0bff917 	ldw	r2,-28(fp)
   12f48:	10c00917 	ldw	r3,36(r2)
   12f4c:	00a00034 	movhi	r2,32768
   12f50:	10bfff04 	addi	r2,r2,-4
   12f54:	10c00536 	bltu	r2,r3,12f6c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   12f58:	e0bff917 	ldw	r2,-28(fp)
   12f5c:	10800917 	ldw	r2,36(r2)
   12f60:	10c00044 	addi	r3,r2,1
   12f64:	e0bff917 	ldw	r2,-28(fp)
   12f68:	10c00915 	stw	r3,36(r2)
   12f6c:	d0a70517 	ldw	r2,-25580(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12f70:	e037883a 	mov	sp,fp
   12f74:	df000017 	ldw	fp,0(sp)
   12f78:	dec00104 	addi	sp,sp,4
   12f7c:	f800283a 	ret

00012f80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12f80:	defffd04 	addi	sp,sp,-12
   12f84:	df000215 	stw	fp,8(sp)
   12f88:	df000204 	addi	fp,sp,8
   12f8c:	e13ffe15 	stw	r4,-8(fp)
   12f90:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12f94:	00000506 	br	12fac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12f98:	e0bfff17 	ldw	r2,-4(fp)
   12f9c:	1090000c 	andi	r2,r2,16384
   12fa0:	10000226 	beq	r2,zero,12fac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12fa4:	00bffd44 	movi	r2,-11
   12fa8:	00000b06 	br	12fd8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12fac:	e0bffe17 	ldw	r2,-8(fp)
   12fb0:	10c00d17 	ldw	r3,52(r2)
   12fb4:	e0bffe17 	ldw	r2,-8(fp)
   12fb8:	10800c17 	ldw	r2,48(r2)
   12fbc:	18800526 	beq	r3,r2,12fd4 <altera_avalon_jtag_uart_close+0x54>
   12fc0:	e0bffe17 	ldw	r2,-8(fp)
   12fc4:	10c00917 	ldw	r3,36(r2)
   12fc8:	e0bffe17 	ldw	r2,-8(fp)
   12fcc:	10800117 	ldw	r2,4(r2)
   12fd0:	18bff136 	bltu	r3,r2,12f98 <__alt_exception_stack_pointer+0xf8012f98>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12fd4:	0005883a 	mov	r2,zero
}
   12fd8:	e037883a 	mov	sp,fp
   12fdc:	df000017 	ldw	fp,0(sp)
   12fe0:	dec00104 	addi	sp,sp,4
   12fe4:	f800283a 	ret

00012fe8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12fe8:	defffa04 	addi	sp,sp,-24
   12fec:	df000515 	stw	fp,20(sp)
   12ff0:	df000504 	addi	fp,sp,20
   12ff4:	e13ffd15 	stw	r4,-12(fp)
   12ff8:	e17ffe15 	stw	r5,-8(fp)
   12ffc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13000:	00bff9c4 	movi	r2,-25
   13004:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13008:	e0bffe17 	ldw	r2,-8(fp)
   1300c:	10da8060 	cmpeqi	r3,r2,27137
   13010:	1800031e 	bne	r3,zero,13020 <altera_avalon_jtag_uart_ioctl+0x38>
   13014:	109a80a0 	cmpeqi	r2,r2,27138
   13018:	1000181e 	bne	r2,zero,1307c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1301c:	00002906 	br	130c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13020:	e0bffd17 	ldw	r2,-12(fp)
   13024:	10c00117 	ldw	r3,4(r2)
   13028:	00a00034 	movhi	r2,32768
   1302c:	10bfffc4 	addi	r2,r2,-1
   13030:	18802126 	beq	r3,r2,130b8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   13034:	e0bfff17 	ldw	r2,-4(fp)
   13038:	10800017 	ldw	r2,0(r2)
   1303c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13040:	e0bffc17 	ldw	r2,-16(fp)
   13044:	10800090 	cmplti	r2,r2,2
   13048:	1000061e 	bne	r2,zero,13064 <altera_avalon_jtag_uart_ioctl+0x7c>
   1304c:	e0fffc17 	ldw	r3,-16(fp)
   13050:	00a00034 	movhi	r2,32768
   13054:	10bfffc4 	addi	r2,r2,-1
   13058:	18800226 	beq	r3,r2,13064 <altera_avalon_jtag_uart_ioctl+0x7c>
   1305c:	e0bffc17 	ldw	r2,-16(fp)
   13060:	00000206 	br	1306c <altera_avalon_jtag_uart_ioctl+0x84>
   13064:	00a00034 	movhi	r2,32768
   13068:	10bfff84 	addi	r2,r2,-2
   1306c:	e0fffd17 	ldw	r3,-12(fp)
   13070:	18800115 	stw	r2,4(r3)
      rc = 0;
   13074:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13078:	00000f06 	br	130b8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1307c:	e0bffd17 	ldw	r2,-12(fp)
   13080:	10c00117 	ldw	r3,4(r2)
   13084:	00a00034 	movhi	r2,32768
   13088:	10bfffc4 	addi	r2,r2,-1
   1308c:	18800c26 	beq	r3,r2,130c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13090:	e0bffd17 	ldw	r2,-12(fp)
   13094:	10c00917 	ldw	r3,36(r2)
   13098:	e0bffd17 	ldw	r2,-12(fp)
   1309c:	10800117 	ldw	r2,4(r2)
   130a0:	1885803a 	cmpltu	r2,r3,r2
   130a4:	10c03fcc 	andi	r3,r2,255
   130a8:	e0bfff17 	ldw	r2,-4(fp)
   130ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   130b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   130b4:	00000206 	br	130c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   130b8:	0001883a 	nop
   130bc:	00000106 	br	130c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   130c0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   130c4:	e0bffb17 	ldw	r2,-20(fp)
}
   130c8:	e037883a 	mov	sp,fp
   130cc:	df000017 	ldw	fp,0(sp)
   130d0:	dec00104 	addi	sp,sp,4
   130d4:	f800283a 	ret

000130d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   130d8:	defff304 	addi	sp,sp,-52
   130dc:	dfc00c15 	stw	ra,48(sp)
   130e0:	df000b15 	stw	fp,44(sp)
   130e4:	df000b04 	addi	fp,sp,44
   130e8:	e13ffc15 	stw	r4,-16(fp)
   130ec:	e17ffd15 	stw	r5,-12(fp)
   130f0:	e1bffe15 	stw	r6,-8(fp)
   130f4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   130f8:	e0bffd17 	ldw	r2,-12(fp)
   130fc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13100:	00004706 	br	13220 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13104:	e0bffc17 	ldw	r2,-16(fp)
   13108:	10800a17 	ldw	r2,40(r2)
   1310c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13110:	e0bffc17 	ldw	r2,-16(fp)
   13114:	10800b17 	ldw	r2,44(r2)
   13118:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1311c:	e0fff717 	ldw	r3,-36(fp)
   13120:	e0bff817 	ldw	r2,-32(fp)
   13124:	18800536 	bltu	r3,r2,1313c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13128:	e0fff717 	ldw	r3,-36(fp)
   1312c:	e0bff817 	ldw	r2,-32(fp)
   13130:	1885c83a 	sub	r2,r3,r2
   13134:	e0bff615 	stw	r2,-40(fp)
   13138:	00000406 	br	1314c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1313c:	00c20004 	movi	r3,2048
   13140:	e0bff817 	ldw	r2,-32(fp)
   13144:	1885c83a 	sub	r2,r3,r2
   13148:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1314c:	e0bff617 	ldw	r2,-40(fp)
   13150:	10001e26 	beq	r2,zero,131cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   13154:	e0fffe17 	ldw	r3,-8(fp)
   13158:	e0bff617 	ldw	r2,-40(fp)
   1315c:	1880022e 	bgeu	r3,r2,13168 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   13160:	e0bffe17 	ldw	r2,-8(fp)
   13164:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13168:	e0bffc17 	ldw	r2,-16(fp)
   1316c:	10c00e04 	addi	r3,r2,56
   13170:	e0bff817 	ldw	r2,-32(fp)
   13174:	1885883a 	add	r2,r3,r2
   13178:	e1bff617 	ldw	r6,-40(fp)
   1317c:	100b883a 	mov	r5,r2
   13180:	e13ff517 	ldw	r4,-44(fp)
   13184:	00074880 	call	7488 <memcpy>
      ptr   += n;
   13188:	e0fff517 	ldw	r3,-44(fp)
   1318c:	e0bff617 	ldw	r2,-40(fp)
   13190:	1885883a 	add	r2,r3,r2
   13194:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13198:	e0fffe17 	ldw	r3,-8(fp)
   1319c:	e0bff617 	ldw	r2,-40(fp)
   131a0:	1885c83a 	sub	r2,r3,r2
   131a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   131a8:	e0fff817 	ldw	r3,-32(fp)
   131ac:	e0bff617 	ldw	r2,-40(fp)
   131b0:	1885883a 	add	r2,r3,r2
   131b4:	10c1ffcc 	andi	r3,r2,2047
   131b8:	e0bffc17 	ldw	r2,-16(fp)
   131bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   131c0:	e0bffe17 	ldw	r2,-8(fp)
   131c4:	00bfcf16 	blt	zero,r2,13104 <__alt_exception_stack_pointer+0xf8013104>
   131c8:	00000106 	br	131d0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   131cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   131d0:	e0fff517 	ldw	r3,-44(fp)
   131d4:	e0bffd17 	ldw	r2,-12(fp)
   131d8:	1880141e 	bne	r3,r2,1322c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	1090000c 	andi	r2,r2,16384
   131e4:	1000131e 	bne	r2,zero,13234 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   131e8:	0001883a 	nop
   131ec:	e0bffc17 	ldw	r2,-16(fp)
   131f0:	10c00a17 	ldw	r3,40(r2)
   131f4:	e0bff717 	ldw	r2,-36(fp)
   131f8:	1880051e 	bne	r3,r2,13210 <altera_avalon_jtag_uart_read+0x138>
   131fc:	e0bffc17 	ldw	r2,-16(fp)
   13200:	10c00917 	ldw	r3,36(r2)
   13204:	e0bffc17 	ldw	r2,-16(fp)
   13208:	10800117 	ldw	r2,4(r2)
   1320c:	18bff736 	bltu	r3,r2,131ec <__alt_exception_stack_pointer+0xf80131ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13210:	e0bffc17 	ldw	r2,-16(fp)
   13214:	10c00a17 	ldw	r3,40(r2)
   13218:	e0bff717 	ldw	r2,-36(fp)
   1321c:	18800726 	beq	r3,r2,1323c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13220:	e0bffe17 	ldw	r2,-8(fp)
   13224:	00bfb716 	blt	zero,r2,13104 <__alt_exception_stack_pointer+0xf8013104>
   13228:	00000506 	br	13240 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1322c:	0001883a 	nop
   13230:	00000306 	br	13240 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   13234:	0001883a 	nop
   13238:	00000106 	br	13240 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1323c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13240:	e0fff517 	ldw	r3,-44(fp)
   13244:	e0bffd17 	ldw	r2,-12(fp)
   13248:	18801826 	beq	r3,r2,132ac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1324c:	0005303a 	rdctl	r2,status
   13250:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13254:	e0fffb17 	ldw	r3,-20(fp)
   13258:	00bfff84 	movi	r2,-2
   1325c:	1884703a 	and	r2,r3,r2
   13260:	1001703a 	wrctl	status,r2
  
  return context;
   13264:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13268:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1326c:	e0bffc17 	ldw	r2,-16(fp)
   13270:	10800817 	ldw	r2,32(r2)
   13274:	10c00054 	ori	r3,r2,1
   13278:	e0bffc17 	ldw	r2,-16(fp)
   1327c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13280:	e0bffc17 	ldw	r2,-16(fp)
   13284:	10800017 	ldw	r2,0(r2)
   13288:	10800104 	addi	r2,r2,4
   1328c:	1007883a 	mov	r3,r2
   13290:	e0bffc17 	ldw	r2,-16(fp)
   13294:	10800817 	ldw	r2,32(r2)
   13298:	18800035 	stwio	r2,0(r3)
   1329c:	e0bffa17 	ldw	r2,-24(fp)
   132a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132a4:	e0bff917 	ldw	r2,-28(fp)
   132a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   132ac:	e0fff517 	ldw	r3,-44(fp)
   132b0:	e0bffd17 	ldw	r2,-12(fp)
   132b4:	18800426 	beq	r3,r2,132c8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   132b8:	e0fff517 	ldw	r3,-44(fp)
   132bc:	e0bffd17 	ldw	r2,-12(fp)
   132c0:	1885c83a 	sub	r2,r3,r2
   132c4:	00000606 	br	132e0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	1090000c 	andi	r2,r2,16384
   132d0:	10000226 	beq	r2,zero,132dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   132d4:	00bffd44 	movi	r2,-11
   132d8:	00000106 	br	132e0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   132dc:	00bffec4 	movi	r2,-5
}
   132e0:	e037883a 	mov	sp,fp
   132e4:	dfc00117 	ldw	ra,4(sp)
   132e8:	df000017 	ldw	fp,0(sp)
   132ec:	dec00204 	addi	sp,sp,8
   132f0:	f800283a 	ret

000132f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   132f4:	defff304 	addi	sp,sp,-52
   132f8:	dfc00c15 	stw	ra,48(sp)
   132fc:	df000b15 	stw	fp,44(sp)
   13300:	df000b04 	addi	fp,sp,44
   13304:	e13ffc15 	stw	r4,-16(fp)
   13308:	e17ffd15 	stw	r5,-12(fp)
   1330c:	e1bffe15 	stw	r6,-8(fp)
   13310:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13314:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13320:	00003706 	br	13400 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13324:	e0bffc17 	ldw	r2,-16(fp)
   13328:	10800c17 	ldw	r2,48(r2)
   1332c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   13330:	e0bffc17 	ldw	r2,-16(fp)
   13334:	10800d17 	ldw	r2,52(r2)
   13338:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1333c:	e0fff917 	ldw	r3,-28(fp)
   13340:	e0bff517 	ldw	r2,-44(fp)
   13344:	1880062e 	bgeu	r3,r2,13360 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   13348:	e0fff517 	ldw	r3,-44(fp)
   1334c:	e0bff917 	ldw	r2,-28(fp)
   13350:	1885c83a 	sub	r2,r3,r2
   13354:	10bfffc4 	addi	r2,r2,-1
   13358:	e0bff615 	stw	r2,-40(fp)
   1335c:	00000b06 	br	1338c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   13360:	e0bff517 	ldw	r2,-44(fp)
   13364:	10000526 	beq	r2,zero,1337c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   13368:	00c20004 	movi	r3,2048
   1336c:	e0bff917 	ldw	r2,-28(fp)
   13370:	1885c83a 	sub	r2,r3,r2
   13374:	e0bff615 	stw	r2,-40(fp)
   13378:	00000406 	br	1338c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1337c:	00c1ffc4 	movi	r3,2047
   13380:	e0bff917 	ldw	r2,-28(fp)
   13384:	1885c83a 	sub	r2,r3,r2
   13388:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1338c:	e0bff617 	ldw	r2,-40(fp)
   13390:	10001e26 	beq	r2,zero,1340c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   13394:	e0fffe17 	ldw	r3,-8(fp)
   13398:	e0bff617 	ldw	r2,-40(fp)
   1339c:	1880022e 	bgeu	r3,r2,133a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   133a0:	e0bffe17 	ldw	r2,-8(fp)
   133a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   133a8:	e0bffc17 	ldw	r2,-16(fp)
   133ac:	10c20e04 	addi	r3,r2,2104
   133b0:	e0bff917 	ldw	r2,-28(fp)
   133b4:	1885883a 	add	r2,r3,r2
   133b8:	e1bff617 	ldw	r6,-40(fp)
   133bc:	e17ffd17 	ldw	r5,-12(fp)
   133c0:	1009883a 	mov	r4,r2
   133c4:	00074880 	call	7488 <memcpy>
      ptr   += n;
   133c8:	e0fffd17 	ldw	r3,-12(fp)
   133cc:	e0bff617 	ldw	r2,-40(fp)
   133d0:	1885883a 	add	r2,r3,r2
   133d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   133d8:	e0fffe17 	ldw	r3,-8(fp)
   133dc:	e0bff617 	ldw	r2,-40(fp)
   133e0:	1885c83a 	sub	r2,r3,r2
   133e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   133e8:	e0fff917 	ldw	r3,-28(fp)
   133ec:	e0bff617 	ldw	r2,-40(fp)
   133f0:	1885883a 	add	r2,r3,r2
   133f4:	10c1ffcc 	andi	r3,r2,2047
   133f8:	e0bffc17 	ldw	r2,-16(fp)
   133fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13400:	e0bffe17 	ldw	r2,-8(fp)
   13404:	00bfc716 	blt	zero,r2,13324 <__alt_exception_stack_pointer+0xf8013324>
   13408:	00000106 	br	13410 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1340c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13410:	0005303a 	rdctl	r2,status
   13414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13418:	e0fffb17 	ldw	r3,-20(fp)
   1341c:	00bfff84 	movi	r2,-2
   13420:	1884703a 	and	r2,r3,r2
   13424:	1001703a 	wrctl	status,r2
  
  return context;
   13428:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1342c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13430:	e0bffc17 	ldw	r2,-16(fp)
   13434:	10800817 	ldw	r2,32(r2)
   13438:	10c00094 	ori	r3,r2,2
   1343c:	e0bffc17 	ldw	r2,-16(fp)
   13440:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13444:	e0bffc17 	ldw	r2,-16(fp)
   13448:	10800017 	ldw	r2,0(r2)
   1344c:	10800104 	addi	r2,r2,4
   13450:	1007883a 	mov	r3,r2
   13454:	e0bffc17 	ldw	r2,-16(fp)
   13458:	10800817 	ldw	r2,32(r2)
   1345c:	18800035 	stwio	r2,0(r3)
   13460:	e0bffa17 	ldw	r2,-24(fp)
   13464:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13468:	e0bff817 	ldw	r2,-32(fp)
   1346c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   13470:	e0bffe17 	ldw	r2,-8(fp)
   13474:	0080100e 	bge	zero,r2,134b8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	1090000c 	andi	r2,r2,16384
   13480:	1000101e 	bne	r2,zero,134c4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13484:	0001883a 	nop
   13488:	e0bffc17 	ldw	r2,-16(fp)
   1348c:	10c00d17 	ldw	r3,52(r2)
   13490:	e0bff517 	ldw	r2,-44(fp)
   13494:	1880051e 	bne	r3,r2,134ac <altera_avalon_jtag_uart_write+0x1b8>
   13498:	e0bffc17 	ldw	r2,-16(fp)
   1349c:	10c00917 	ldw	r3,36(r2)
   134a0:	e0bffc17 	ldw	r2,-16(fp)
   134a4:	10800117 	ldw	r2,4(r2)
   134a8:	18bff736 	bltu	r3,r2,13488 <__alt_exception_stack_pointer+0xf8013488>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   134ac:	e0bffc17 	ldw	r2,-16(fp)
   134b0:	10800917 	ldw	r2,36(r2)
   134b4:	1000051e 	bne	r2,zero,134cc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   134b8:	e0bffe17 	ldw	r2,-8(fp)
   134bc:	00bfd016 	blt	zero,r2,13400 <__alt_exception_stack_pointer+0xf8013400>
   134c0:	00000306 	br	134d0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   134c4:	0001883a 	nop
   134c8:	00000106 	br	134d0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   134cc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   134d0:	e0fffd17 	ldw	r3,-12(fp)
   134d4:	e0bff717 	ldw	r2,-36(fp)
   134d8:	18800426 	beq	r3,r2,134ec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   134dc:	e0fffd17 	ldw	r3,-12(fp)
   134e0:	e0bff717 	ldw	r2,-36(fp)
   134e4:	1885c83a 	sub	r2,r3,r2
   134e8:	00000606 	br	13504 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	1090000c 	andi	r2,r2,16384
   134f4:	10000226 	beq	r2,zero,13500 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   134f8:	00bffd44 	movi	r2,-11
   134fc:	00000106 	br	13504 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13500:	00bffec4 	movi	r2,-5
}
   13504:	e037883a 	mov	sp,fp
   13508:	dfc00117 	ldw	ra,4(sp)
   1350c:	df000017 	ldw	fp,0(sp)
   13510:	dec00204 	addi	sp,sp,8
   13514:	f800283a 	ret

00013518 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13518:	defffa04 	addi	sp,sp,-24
   1351c:	dfc00515 	stw	ra,20(sp)
   13520:	df000415 	stw	fp,16(sp)
   13524:	df000404 	addi	fp,sp,16
   13528:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1352c:	0007883a 	mov	r3,zero
   13530:	e0bfff17 	ldw	r2,-4(fp)
   13534:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13538:	e0bfff17 	ldw	r2,-4(fp)
   1353c:	10800104 	addi	r2,r2,4
   13540:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13544:	0005303a 	rdctl	r2,status
   13548:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1354c:	e0fffd17 	ldw	r3,-12(fp)
   13550:	00bfff84 	movi	r2,-2
   13554:	1884703a 	and	r2,r3,r2
   13558:	1001703a 	wrctl	status,r2
  
  return context;
   1355c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13560:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13564:	00141900 	call	14190 <alt_tick>
   13568:	e0bffc17 	ldw	r2,-16(fp)
   1356c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13570:	e0bffe17 	ldw	r2,-8(fp)
   13574:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13578:	0001883a 	nop
   1357c:	e037883a 	mov	sp,fp
   13580:	dfc00117 	ldw	ra,4(sp)
   13584:	df000017 	ldw	fp,0(sp)
   13588:	dec00204 	addi	sp,sp,8
   1358c:	f800283a 	ret

00013590 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13590:	defff804 	addi	sp,sp,-32
   13594:	dfc00715 	stw	ra,28(sp)
   13598:	df000615 	stw	fp,24(sp)
   1359c:	df000604 	addi	fp,sp,24
   135a0:	e13ffc15 	stw	r4,-16(fp)
   135a4:	e17ffd15 	stw	r5,-12(fp)
   135a8:	e1bffe15 	stw	r6,-8(fp)
   135ac:	e1ffff15 	stw	r7,-4(fp)
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   135b8:	d0a70517 	ldw	r2,-25580(gp)
   135bc:	1000021e 	bne	r2,zero,135c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   135c0:	e0bffb17 	ldw	r2,-20(fp)
   135c4:	d0a70515 	stw	r2,-25580(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   135c8:	e0bffc17 	ldw	r2,-16(fp)
   135cc:	10800104 	addi	r2,r2,4
   135d0:	00c001c4 	movi	r3,7
   135d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   135d8:	d8000015 	stw	zero,0(sp)
   135dc:	e1fffc17 	ldw	r7,-16(fp)
   135e0:	01800074 	movhi	r6,1
   135e4:	318d4604 	addi	r6,r6,13592
   135e8:	e17ffe17 	ldw	r5,-8(fp)
   135ec:	e13ffd17 	ldw	r4,-12(fp)
   135f0:	0013a700 	call	13a70 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   135f4:	0001883a 	nop
   135f8:	e037883a 	mov	sp,fp
   135fc:	dfc00117 	ldw	ra,4(sp)
   13600:	df000017 	ldw	fp,0(sp)
   13604:	dec00204 	addi	sp,sp,8
   13608:	f800283a 	ret

0001360c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1360c:	defff504 	addi	sp,sp,-44
   13610:	df000a15 	stw	fp,40(sp)
   13614:	df000a04 	addi	fp,sp,40
   13618:	e13ffc15 	stw	r4,-16(fp)
   1361c:	e17ffd15 	stw	r5,-12(fp)
   13620:	e1bffe15 	stw	r6,-8(fp)
   13624:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13628:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1362c:	d0a70517 	ldw	r2,-25580(gp)
  
  if (alt_ticks_per_second ())
   13630:	10003c26 	beq	r2,zero,13724 <alt_alarm_start+0x118>
  {
    if (alarm)
   13634:	e0bffc17 	ldw	r2,-16(fp)
   13638:	10003826 	beq	r2,zero,1371c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	e0fffe17 	ldw	r3,-8(fp)
   13644:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13648:	e0bffc17 	ldw	r2,-16(fp)
   1364c:	e0ffff17 	ldw	r3,-4(fp)
   13650:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13654:	0005303a 	rdctl	r2,status
   13658:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1365c:	e0fff917 	ldw	r3,-28(fp)
   13660:	00bfff84 	movi	r2,-2
   13664:	1884703a 	and	r2,r3,r2
   13668:	1001703a 	wrctl	status,r2
  
  return context;
   1366c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   13670:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13674:	d0a70617 	ldw	r2,-25576(gp)
      
      current_nticks = alt_nticks();
   13678:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1367c:	e0fffd17 	ldw	r3,-12(fp)
   13680:	e0bff617 	ldw	r2,-40(fp)
   13684:	1885883a 	add	r2,r3,r2
   13688:	10c00044 	addi	r3,r2,1
   1368c:	e0bffc17 	ldw	r2,-16(fp)
   13690:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   13694:	e0bffc17 	ldw	r2,-16(fp)
   13698:	10c00217 	ldw	r3,8(r2)
   1369c:	e0bff617 	ldw	r2,-40(fp)
   136a0:	1880042e 	bgeu	r3,r2,136b4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   136a4:	e0bffc17 	ldw	r2,-16(fp)
   136a8:	00c00044 	movi	r3,1
   136ac:	10c00405 	stb	r3,16(r2)
   136b0:	00000206 	br	136bc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   136b4:	e0bffc17 	ldw	r2,-16(fp)
   136b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   136bc:	e0bffc17 	ldw	r2,-16(fp)
   136c0:	d0e00f04 	addi	r3,gp,-32708
   136c4:	e0fffa15 	stw	r3,-24(fp)
   136c8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   136cc:	e0bffb17 	ldw	r2,-20(fp)
   136d0:	e0fffa17 	ldw	r3,-24(fp)
   136d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   136d8:	e0bffa17 	ldw	r2,-24(fp)
   136dc:	10c00017 	ldw	r3,0(r2)
   136e0:	e0bffb17 	ldw	r2,-20(fp)
   136e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   136e8:	e0bffa17 	ldw	r2,-24(fp)
   136ec:	10800017 	ldw	r2,0(r2)
   136f0:	e0fffb17 	ldw	r3,-20(fp)
   136f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   136f8:	e0bffa17 	ldw	r2,-24(fp)
   136fc:	e0fffb17 	ldw	r3,-20(fp)
   13700:	10c00015 	stw	r3,0(r2)
   13704:	e0bff817 	ldw	r2,-32(fp)
   13708:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1370c:	e0bff717 	ldw	r2,-36(fp)
   13710:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   13714:	0005883a 	mov	r2,zero
   13718:	00000306 	br	13728 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1371c:	00bffa84 	movi	r2,-22
   13720:	00000106 	br	13728 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   13724:	00bfde84 	movi	r2,-134
  }
}
   13728:	e037883a 	mov	sp,fp
   1372c:	df000017 	ldw	fp,0(sp)
   13730:	dec00104 	addi	sp,sp,4
   13734:	f800283a 	ret

00013738 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   13738:	defffa04 	addi	sp,sp,-24
   1373c:	dfc00515 	stw	ra,20(sp)
   13740:	df000415 	stw	fp,16(sp)
   13744:	df000404 	addi	fp,sp,16
   13748:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1374c:	00800244 	movi	r2,9
   13750:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   13754:	014003f4 	movhi	r5,15
   13758:	29509004 	addi	r5,r5,16960
   1375c:	e13ffd17 	ldw	r4,-12(fp)
   13760:	0004ea80 	call	4ea8 <__mulsi3>
   13764:	100b883a 	mov	r5,r2
   13768:	0100bef4 	movhi	r4,763
   1376c:	213c2004 	addi	r4,r4,-3968
   13770:	0004dec0 	call	4dec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13774:	100b883a 	mov	r5,r2
   13778:	01200034 	movhi	r4,32768
   1377c:	213fffc4 	addi	r4,r4,-1
   13780:	0004dec0 	call	4dec <__udivsi3>
   13784:	100b883a 	mov	r5,r2
   13788:	e13fff17 	ldw	r4,-4(fp)
   1378c:	0004dec0 	call	4dec <__udivsi3>
   13790:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   13794:	e0bffe17 	ldw	r2,-8(fp)
   13798:	10002a26 	beq	r2,zero,13844 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1379c:	e03ffc15 	stw	zero,-16(fp)
   137a0:	00001706 	br	13800 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   137a4:	00a00034 	movhi	r2,32768
   137a8:	10bfffc4 	addi	r2,r2,-1
   137ac:	10bfffc4 	addi	r2,r2,-1
   137b0:	103ffe1e 	bne	r2,zero,137ac <__alt_exception_stack_pointer+0xf80137ac>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   137b4:	014003f4 	movhi	r5,15
   137b8:	29509004 	addi	r5,r5,16960
   137bc:	e13ffd17 	ldw	r4,-12(fp)
   137c0:	0004ea80 	call	4ea8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   137c4:	100b883a 	mov	r5,r2
   137c8:	0100bef4 	movhi	r4,763
   137cc:	213c2004 	addi	r4,r4,-3968
   137d0:	0004dec0 	call	4dec <__udivsi3>
   137d4:	100b883a 	mov	r5,r2
   137d8:	01200034 	movhi	r4,32768
   137dc:	213fffc4 	addi	r4,r4,-1
   137e0:	0004dec0 	call	4dec <__udivsi3>
   137e4:	1007883a 	mov	r3,r2
   137e8:	e0bfff17 	ldw	r2,-4(fp)
   137ec:	10c5c83a 	sub	r2,r2,r3
   137f0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   137f4:	e0bffc17 	ldw	r2,-16(fp)
   137f8:	10800044 	addi	r2,r2,1
   137fc:	e0bffc15 	stw	r2,-16(fp)
   13800:	e0fffc17 	ldw	r3,-16(fp)
   13804:	e0bffe17 	ldw	r2,-8(fp)
   13808:	18bfe616 	blt	r3,r2,137a4 <__alt_exception_stack_pointer+0xf80137a4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1380c:	014003f4 	movhi	r5,15
   13810:	29509004 	addi	r5,r5,16960
   13814:	e13ffd17 	ldw	r4,-12(fp)
   13818:	0004ea80 	call	4ea8 <__mulsi3>
   1381c:	100b883a 	mov	r5,r2
   13820:	0100bef4 	movhi	r4,763
   13824:	213c2004 	addi	r4,r4,-3968
   13828:	0004dec0 	call	4dec <__udivsi3>
   1382c:	e17fff17 	ldw	r5,-4(fp)
   13830:	1009883a 	mov	r4,r2
   13834:	0004ea80 	call	4ea8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13838:	10bfffc4 	addi	r2,r2,-1
   1383c:	103ffe1e 	bne	r2,zero,13838 <__alt_exception_stack_pointer+0xf8013838>
   13840:	00000d06 	br	13878 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13844:	014003f4 	movhi	r5,15
   13848:	29509004 	addi	r5,r5,16960
   1384c:	e13ffd17 	ldw	r4,-12(fp)
   13850:	0004ea80 	call	4ea8 <__mulsi3>
   13854:	100b883a 	mov	r5,r2
   13858:	0100bef4 	movhi	r4,763
   1385c:	213c2004 	addi	r4,r4,-3968
   13860:	0004dec0 	call	4dec <__udivsi3>
   13864:	e17fff17 	ldw	r5,-4(fp)
   13868:	1009883a 	mov	r4,r2
   1386c:	0004ea80 	call	4ea8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13870:	10bfffc4 	addi	r2,r2,-1
   13874:	00bffe16 	blt	zero,r2,13870 <__alt_exception_stack_pointer+0xf8013870>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   13878:	0005883a 	mov	r2,zero
}
   1387c:	e037883a 	mov	sp,fp
   13880:	dfc00117 	ldw	ra,4(sp)
   13884:	df000017 	ldw	fp,0(sp)
   13888:	dec00204 	addi	sp,sp,8
   1388c:	f800283a 	ret

00013890 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13890:	deffff04 	addi	sp,sp,-4
   13894:	df000015 	stw	fp,0(sp)
   13898:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1389c:	0001883a 	nop
   138a0:	e037883a 	mov	sp,fp
   138a4:	df000017 	ldw	fp,0(sp)
   138a8:	dec00104 	addi	sp,sp,4
   138ac:	f800283a 	ret

000138b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   138b0:	defffe04 	addi	sp,sp,-8
   138b4:	dfc00115 	stw	ra,4(sp)
   138b8:	df000015 	stw	fp,0(sp)
   138bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   138c0:	d0a00d17 	ldw	r2,-32716(gp)
   138c4:	10000326 	beq	r2,zero,138d4 <alt_get_errno+0x24>
   138c8:	d0a00d17 	ldw	r2,-32716(gp)
   138cc:	103ee83a 	callr	r2
   138d0:	00000106 	br	138d8 <alt_get_errno+0x28>
   138d4:	d0a6fd04 	addi	r2,gp,-25612
}
   138d8:	e037883a 	mov	sp,fp
   138dc:	dfc00117 	ldw	ra,4(sp)
   138e0:	df000017 	ldw	fp,0(sp)
   138e4:	dec00204 	addi	sp,sp,8
   138e8:	f800283a 	ret

000138ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   138ec:	defffa04 	addi	sp,sp,-24
   138f0:	dfc00515 	stw	ra,20(sp)
   138f4:	df000415 	stw	fp,16(sp)
   138f8:	df000404 	addi	fp,sp,16
   138fc:	e13ffe15 	stw	r4,-8(fp)
   13900:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13904:	e0bffe17 	ldw	r2,-8(fp)
   13908:	10000326 	beq	r2,zero,13918 <alt_dev_llist_insert+0x2c>
   1390c:	e0bffe17 	ldw	r2,-8(fp)
   13910:	10800217 	ldw	r2,8(r2)
   13914:	1000061e 	bne	r2,zero,13930 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13918:	00138b00 	call	138b0 <alt_get_errno>
   1391c:	1007883a 	mov	r3,r2
   13920:	00800584 	movi	r2,22
   13924:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13928:	00bffa84 	movi	r2,-22
   1392c:	00001306 	br	1397c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13930:	e0bffe17 	ldw	r2,-8(fp)
   13934:	e0ffff17 	ldw	r3,-4(fp)
   13938:	e0fffc15 	stw	r3,-16(fp)
   1393c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13940:	e0bffd17 	ldw	r2,-12(fp)
   13944:	e0fffc17 	ldw	r3,-16(fp)
   13948:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1394c:	e0bffc17 	ldw	r2,-16(fp)
   13950:	10c00017 	ldw	r3,0(r2)
   13954:	e0bffd17 	ldw	r2,-12(fp)
   13958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1395c:	e0bffc17 	ldw	r2,-16(fp)
   13960:	10800017 	ldw	r2,0(r2)
   13964:	e0fffd17 	ldw	r3,-12(fp)
   13968:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1396c:	e0bffc17 	ldw	r2,-16(fp)
   13970:	e0fffd17 	ldw	r3,-12(fp)
   13974:	10c00015 	stw	r3,0(r2)

  return 0;  
   13978:	0005883a 	mov	r2,zero
}
   1397c:	e037883a 	mov	sp,fp
   13980:	dfc00117 	ldw	ra,4(sp)
   13984:	df000017 	ldw	fp,0(sp)
   13988:	dec00204 	addi	sp,sp,8
   1398c:	f800283a 	ret

00013990 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13990:	defffd04 	addi	sp,sp,-12
   13994:	dfc00215 	stw	ra,8(sp)
   13998:	df000115 	stw	fp,4(sp)
   1399c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   139a0:	00800074 	movhi	r2,1
   139a4:	10925104 	addi	r2,r2,18756
   139a8:	e0bfff15 	stw	r2,-4(fp)
   139ac:	00000606 	br	139c8 <_do_ctors+0x38>
        (*ctor) (); 
   139b0:	e0bfff17 	ldw	r2,-4(fp)
   139b4:	10800017 	ldw	r2,0(r2)
   139b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   139bc:	e0bfff17 	ldw	r2,-4(fp)
   139c0:	10bfff04 	addi	r2,r2,-4
   139c4:	e0bfff15 	stw	r2,-4(fp)
   139c8:	e0ffff17 	ldw	r3,-4(fp)
   139cc:	00800074 	movhi	r2,1
   139d0:	10925204 	addi	r2,r2,18760
   139d4:	18bff62e 	bgeu	r3,r2,139b0 <__alt_exception_stack_pointer+0xf80139b0>
        (*ctor) (); 
}
   139d8:	0001883a 	nop
   139dc:	e037883a 	mov	sp,fp
   139e0:	dfc00117 	ldw	ra,4(sp)
   139e4:	df000017 	ldw	fp,0(sp)
   139e8:	dec00204 	addi	sp,sp,8
   139ec:	f800283a 	ret

000139f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   139f0:	defffd04 	addi	sp,sp,-12
   139f4:	dfc00215 	stw	ra,8(sp)
   139f8:	df000115 	stw	fp,4(sp)
   139fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13a00:	00800074 	movhi	r2,1
   13a04:	10925104 	addi	r2,r2,18756
   13a08:	e0bfff15 	stw	r2,-4(fp)
   13a0c:	00000606 	br	13a28 <_do_dtors+0x38>
        (*dtor) (); 
   13a10:	e0bfff17 	ldw	r2,-4(fp)
   13a14:	10800017 	ldw	r2,0(r2)
   13a18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13a1c:	e0bfff17 	ldw	r2,-4(fp)
   13a20:	10bfff04 	addi	r2,r2,-4
   13a24:	e0bfff15 	stw	r2,-4(fp)
   13a28:	e0ffff17 	ldw	r3,-4(fp)
   13a2c:	00800074 	movhi	r2,1
   13a30:	10925204 	addi	r2,r2,18760
   13a34:	18bff62e 	bgeu	r3,r2,13a10 <__alt_exception_stack_pointer+0xf8013a10>
        (*dtor) (); 
}
   13a38:	0001883a 	nop
   13a3c:	e037883a 	mov	sp,fp
   13a40:	dfc00117 	ldw	ra,4(sp)
   13a44:	df000017 	ldw	fp,0(sp)
   13a48:	dec00204 	addi	sp,sp,8
   13a4c:	f800283a 	ret

00013a50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13a50:	deffff04 	addi	sp,sp,-4
   13a54:	df000015 	stw	fp,0(sp)
   13a58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13a5c:	0001883a 	nop
   13a60:	e037883a 	mov	sp,fp
   13a64:	df000017 	ldw	fp,0(sp)
   13a68:	dec00104 	addi	sp,sp,4
   13a6c:	f800283a 	ret

00013a70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13a70:	defff904 	addi	sp,sp,-28
   13a74:	dfc00615 	stw	ra,24(sp)
   13a78:	df000515 	stw	fp,20(sp)
   13a7c:	df000504 	addi	fp,sp,20
   13a80:	e13ffc15 	stw	r4,-16(fp)
   13a84:	e17ffd15 	stw	r5,-12(fp)
   13a88:	e1bffe15 	stw	r6,-8(fp)
   13a8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13a90:	e0800217 	ldw	r2,8(fp)
   13a94:	d8800015 	stw	r2,0(sp)
   13a98:	e1ffff17 	ldw	r7,-4(fp)
   13a9c:	e1bffe17 	ldw	r6,-8(fp)
   13aa0:	e17ffd17 	ldw	r5,-12(fp)
   13aa4:	e13ffc17 	ldw	r4,-16(fp)
   13aa8:	0013c200 	call	13c20 <alt_iic_isr_register>
}  
   13aac:	e037883a 	mov	sp,fp
   13ab0:	dfc00117 	ldw	ra,4(sp)
   13ab4:	df000017 	ldw	fp,0(sp)
   13ab8:	dec00204 	addi	sp,sp,8
   13abc:	f800283a 	ret

00013ac0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13ac0:	defff904 	addi	sp,sp,-28
   13ac4:	df000615 	stw	fp,24(sp)
   13ac8:	df000604 	addi	fp,sp,24
   13acc:	e13ffe15 	stw	r4,-8(fp)
   13ad0:	e17fff15 	stw	r5,-4(fp)
   13ad4:	e0bfff17 	ldw	r2,-4(fp)
   13ad8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13adc:	0005303a 	rdctl	r2,status
   13ae0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ae4:	e0fffb17 	ldw	r3,-20(fp)
   13ae8:	00bfff84 	movi	r2,-2
   13aec:	1884703a 	and	r2,r3,r2
   13af0:	1001703a 	wrctl	status,r2
  
  return context;
   13af4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13af8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13afc:	00c00044 	movi	r3,1
   13b00:	e0bffa17 	ldw	r2,-24(fp)
   13b04:	1884983a 	sll	r2,r3,r2
   13b08:	1007883a 	mov	r3,r2
   13b0c:	d0a70417 	ldw	r2,-25584(gp)
   13b10:	1884b03a 	or	r2,r3,r2
   13b14:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13b18:	d0a70417 	ldw	r2,-25584(gp)
   13b1c:	100170fa 	wrctl	ienable,r2
   13b20:	e0bffc17 	ldw	r2,-16(fp)
   13b24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b28:	e0bffd17 	ldw	r2,-12(fp)
   13b2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13b30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   13b34:	0001883a 	nop
}
   13b38:	e037883a 	mov	sp,fp
   13b3c:	df000017 	ldw	fp,0(sp)
   13b40:	dec00104 	addi	sp,sp,4
   13b44:	f800283a 	ret

00013b48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13b48:	defff904 	addi	sp,sp,-28
   13b4c:	df000615 	stw	fp,24(sp)
   13b50:	df000604 	addi	fp,sp,24
   13b54:	e13ffe15 	stw	r4,-8(fp)
   13b58:	e17fff15 	stw	r5,-4(fp)
   13b5c:	e0bfff17 	ldw	r2,-4(fp)
   13b60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b64:	0005303a 	rdctl	r2,status
   13b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b6c:	e0fffb17 	ldw	r3,-20(fp)
   13b70:	00bfff84 	movi	r2,-2
   13b74:	1884703a 	and	r2,r3,r2
   13b78:	1001703a 	wrctl	status,r2
  
  return context;
   13b7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13b80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13b84:	00c00044 	movi	r3,1
   13b88:	e0bffa17 	ldw	r2,-24(fp)
   13b8c:	1884983a 	sll	r2,r3,r2
   13b90:	0084303a 	nor	r2,zero,r2
   13b94:	1007883a 	mov	r3,r2
   13b98:	d0a70417 	ldw	r2,-25584(gp)
   13b9c:	1884703a 	and	r2,r3,r2
   13ba0:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13ba4:	d0a70417 	ldw	r2,-25584(gp)
   13ba8:	100170fa 	wrctl	ienable,r2
   13bac:	e0bffc17 	ldw	r2,-16(fp)
   13bb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bb4:	e0bffd17 	ldw	r2,-12(fp)
   13bb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13bbc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13bc0:	0001883a 	nop
}
   13bc4:	e037883a 	mov	sp,fp
   13bc8:	df000017 	ldw	fp,0(sp)
   13bcc:	dec00104 	addi	sp,sp,4
   13bd0:	f800283a 	ret

00013bd4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13bd4:	defffc04 	addi	sp,sp,-16
   13bd8:	df000315 	stw	fp,12(sp)
   13bdc:	df000304 	addi	fp,sp,12
   13be0:	e13ffe15 	stw	r4,-8(fp)
   13be4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13be8:	000530fa 	rdctl	r2,ienable
   13bec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13bf0:	00c00044 	movi	r3,1
   13bf4:	e0bfff17 	ldw	r2,-4(fp)
   13bf8:	1884983a 	sll	r2,r3,r2
   13bfc:	1007883a 	mov	r3,r2
   13c00:	e0bffd17 	ldw	r2,-12(fp)
   13c04:	1884703a 	and	r2,r3,r2
   13c08:	1004c03a 	cmpne	r2,r2,zero
   13c0c:	10803fcc 	andi	r2,r2,255
}
   13c10:	e037883a 	mov	sp,fp
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00104 	addi	sp,sp,4
   13c1c:	f800283a 	ret

00013c20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13c20:	defff504 	addi	sp,sp,-44
   13c24:	dfc00a15 	stw	ra,40(sp)
   13c28:	df000915 	stw	fp,36(sp)
   13c2c:	df000904 	addi	fp,sp,36
   13c30:	e13ffc15 	stw	r4,-16(fp)
   13c34:	e17ffd15 	stw	r5,-12(fp)
   13c38:	e1bffe15 	stw	r6,-8(fp)
   13c3c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13c40:	00bffa84 	movi	r2,-22
   13c44:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13c48:	e0bffd17 	ldw	r2,-12(fp)
   13c4c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13c50:	e0bff817 	ldw	r2,-32(fp)
   13c54:	10800808 	cmpgei	r2,r2,32
   13c58:	1000271e 	bne	r2,zero,13cf8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c5c:	0005303a 	rdctl	r2,status
   13c60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c64:	e0fffb17 	ldw	r3,-20(fp)
   13c68:	00bfff84 	movi	r2,-2
   13c6c:	1884703a 	and	r2,r3,r2
   13c70:	1001703a 	wrctl	status,r2
  
  return context;
   13c74:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13c78:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13c7c:	008000b4 	movhi	r2,2
   13c80:	10a38204 	addi	r2,r2,-29176
   13c84:	e0fff817 	ldw	r3,-32(fp)
   13c88:	180690fa 	slli	r3,r3,3
   13c8c:	10c5883a 	add	r2,r2,r3
   13c90:	e0fffe17 	ldw	r3,-8(fp)
   13c94:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13c98:	008000b4 	movhi	r2,2
   13c9c:	10a38204 	addi	r2,r2,-29176
   13ca0:	e0fff817 	ldw	r3,-32(fp)
   13ca4:	180690fa 	slli	r3,r3,3
   13ca8:	10c5883a 	add	r2,r2,r3
   13cac:	10800104 	addi	r2,r2,4
   13cb0:	e0ffff17 	ldw	r3,-4(fp)
   13cb4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13cb8:	e0bffe17 	ldw	r2,-8(fp)
   13cbc:	10000526 	beq	r2,zero,13cd4 <alt_iic_isr_register+0xb4>
   13cc0:	e0bff817 	ldw	r2,-32(fp)
   13cc4:	100b883a 	mov	r5,r2
   13cc8:	e13ffc17 	ldw	r4,-16(fp)
   13ccc:	0013ac00 	call	13ac0 <alt_ic_irq_enable>
   13cd0:	00000406 	br	13ce4 <alt_iic_isr_register+0xc4>
   13cd4:	e0bff817 	ldw	r2,-32(fp)
   13cd8:	100b883a 	mov	r5,r2
   13cdc:	e13ffc17 	ldw	r4,-16(fp)
   13ce0:	0013b480 	call	13b48 <alt_ic_irq_disable>
   13ce4:	e0bff715 	stw	r2,-36(fp)
   13ce8:	e0bffa17 	ldw	r2,-24(fp)
   13cec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cf0:	e0bff917 	ldw	r2,-28(fp)
   13cf4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13cf8:	e0bff717 	ldw	r2,-36(fp)
}
   13cfc:	e037883a 	mov	sp,fp
   13d00:	dfc00117 	ldw	ra,4(sp)
   13d04:	df000017 	ldw	fp,0(sp)
   13d08:	dec00204 	addi	sp,sp,8
   13d0c:	f800283a 	ret

00013d10 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13d10:	defff804 	addi	sp,sp,-32
   13d14:	dfc00715 	stw	ra,28(sp)
   13d18:	df000615 	stw	fp,24(sp)
   13d1c:	dc000515 	stw	r16,20(sp)
   13d20:	df000604 	addi	fp,sp,24
   13d24:	e13ffb15 	stw	r4,-20(fp)
   13d28:	e17ffc15 	stw	r5,-16(fp)
   13d2c:	e1bffd15 	stw	r6,-12(fp)
   13d30:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13d34:	e1bffe17 	ldw	r6,-8(fp)
   13d38:	e17ffd17 	ldw	r5,-12(fp)
   13d3c:	e13ffc17 	ldw	r4,-16(fp)
   13d40:	0013f980 	call	13f98 <open>
   13d44:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13d48:	e0bffa17 	ldw	r2,-24(fp)
   13d4c:	10002216 	blt	r2,zero,13dd8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13d50:	04000074 	movhi	r16,1
   13d54:	8417d204 	addi	r16,r16,24392
   13d58:	e0bffa17 	ldw	r2,-24(fp)
   13d5c:	01400304 	movi	r5,12
   13d60:	1009883a 	mov	r4,r2
   13d64:	0004ea80 	call	4ea8 <__mulsi3>
   13d68:	8085883a 	add	r2,r16,r2
   13d6c:	10c00017 	ldw	r3,0(r2)
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13d78:	04000074 	movhi	r16,1
   13d7c:	8417d204 	addi	r16,r16,24392
   13d80:	e0bffa17 	ldw	r2,-24(fp)
   13d84:	01400304 	movi	r5,12
   13d88:	1009883a 	mov	r4,r2
   13d8c:	0004ea80 	call	4ea8 <__mulsi3>
   13d90:	8085883a 	add	r2,r16,r2
   13d94:	10800104 	addi	r2,r2,4
   13d98:	10c00017 	ldw	r3,0(r2)
   13d9c:	e0bffb17 	ldw	r2,-20(fp)
   13da0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13da4:	04000074 	movhi	r16,1
   13da8:	8417d204 	addi	r16,r16,24392
   13dac:	e0bffa17 	ldw	r2,-24(fp)
   13db0:	01400304 	movi	r5,12
   13db4:	1009883a 	mov	r4,r2
   13db8:	0004ea80 	call	4ea8 <__mulsi3>
   13dbc:	8085883a 	add	r2,r16,r2
   13dc0:	10800204 	addi	r2,r2,8
   13dc4:	10c00017 	ldw	r3,0(r2)
   13dc8:	e0bffb17 	ldw	r2,-20(fp)
   13dcc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13dd0:	e13ffa17 	ldw	r4,-24(fp)
   13dd4:	00123d40 	call	123d4 <alt_release_fd>
  }
} 
   13dd8:	0001883a 	nop
   13ddc:	e6ffff04 	addi	sp,fp,-4
   13de0:	dfc00217 	ldw	ra,8(sp)
   13de4:	df000117 	ldw	fp,4(sp)
   13de8:	dc000017 	ldw	r16,0(sp)
   13dec:	dec00304 	addi	sp,sp,12
   13df0:	f800283a 	ret

00013df4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13df4:	defffb04 	addi	sp,sp,-20
   13df8:	dfc00415 	stw	ra,16(sp)
   13dfc:	df000315 	stw	fp,12(sp)
   13e00:	df000304 	addi	fp,sp,12
   13e04:	e13ffd15 	stw	r4,-12(fp)
   13e08:	e17ffe15 	stw	r5,-8(fp)
   13e0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13e10:	01c07fc4 	movi	r7,511
   13e14:	01800044 	movi	r6,1
   13e18:	e17ffd17 	ldw	r5,-12(fp)
   13e1c:	01000074 	movhi	r4,1
   13e20:	2117d504 	addi	r4,r4,24404
   13e24:	0013d100 	call	13d10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13e28:	01c07fc4 	movi	r7,511
   13e2c:	000d883a 	mov	r6,zero
   13e30:	e17ffe17 	ldw	r5,-8(fp)
   13e34:	01000074 	movhi	r4,1
   13e38:	2117d204 	addi	r4,r4,24392
   13e3c:	0013d100 	call	13d10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13e40:	01c07fc4 	movi	r7,511
   13e44:	01800044 	movi	r6,1
   13e48:	e17fff17 	ldw	r5,-4(fp)
   13e4c:	01000074 	movhi	r4,1
   13e50:	2117d804 	addi	r4,r4,24416
   13e54:	0013d100 	call	13d10 <alt_open_fd>
}  
   13e58:	0001883a 	nop
   13e5c:	e037883a 	mov	sp,fp
   13e60:	dfc00117 	ldw	ra,4(sp)
   13e64:	df000017 	ldw	fp,0(sp)
   13e68:	dec00204 	addi	sp,sp,8
   13e6c:	f800283a 	ret

00013e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e70:	defffe04 	addi	sp,sp,-8
   13e74:	dfc00115 	stw	ra,4(sp)
   13e78:	df000015 	stw	fp,0(sp)
   13e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e80:	d0a00d17 	ldw	r2,-32716(gp)
   13e84:	10000326 	beq	r2,zero,13e94 <alt_get_errno+0x24>
   13e88:	d0a00d17 	ldw	r2,-32716(gp)
   13e8c:	103ee83a 	callr	r2
   13e90:	00000106 	br	13e98 <alt_get_errno+0x28>
   13e94:	d0a6fd04 	addi	r2,gp,-25612
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13eac:	defffb04 	addi	sp,sp,-20
   13eb0:	dfc00415 	stw	ra,16(sp)
   13eb4:	df000315 	stw	fp,12(sp)
   13eb8:	dc000215 	stw	r16,8(sp)
   13ebc:	df000304 	addi	fp,sp,12
   13ec0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13ec4:	e0bffe17 	ldw	r2,-8(fp)
   13ec8:	10800217 	ldw	r2,8(r2)
   13ecc:	10d00034 	orhi	r3,r2,16384
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
   13ed4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13ed8:	e03ffd15 	stw	zero,-12(fp)
   13edc:	00002306 	br	13f6c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13ee0:	04000074 	movhi	r16,1
   13ee4:	8417d204 	addi	r16,r16,24392
   13ee8:	e0bffd17 	ldw	r2,-12(fp)
   13eec:	01400304 	movi	r5,12
   13ef0:	1009883a 	mov	r4,r2
   13ef4:	0004ea80 	call	4ea8 <__mulsi3>
   13ef8:	8085883a 	add	r2,r16,r2
   13efc:	10c00017 	ldw	r3,0(r2)
   13f00:	e0bffe17 	ldw	r2,-8(fp)
   13f04:	10800017 	ldw	r2,0(r2)
   13f08:	1880151e 	bne	r3,r2,13f60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13f0c:	04000074 	movhi	r16,1
   13f10:	8417d204 	addi	r16,r16,24392
   13f14:	e0bffd17 	ldw	r2,-12(fp)
   13f18:	01400304 	movi	r5,12
   13f1c:	1009883a 	mov	r4,r2
   13f20:	0004ea80 	call	4ea8 <__mulsi3>
   13f24:	8085883a 	add	r2,r16,r2
   13f28:	10800204 	addi	r2,r2,8
   13f2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13f30:	10000b0e 	bge	r2,zero,13f60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13f34:	01400304 	movi	r5,12
   13f38:	e13ffd17 	ldw	r4,-12(fp)
   13f3c:	0004ea80 	call	4ea8 <__mulsi3>
   13f40:	1007883a 	mov	r3,r2
   13f44:	00800074 	movhi	r2,1
   13f48:	1097d204 	addi	r2,r2,24392
   13f4c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13f50:	e0bffe17 	ldw	r2,-8(fp)
   13f54:	18800226 	beq	r3,r2,13f60 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13f58:	00bffcc4 	movi	r2,-13
   13f5c:	00000806 	br	13f80 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13f60:	e0bffd17 	ldw	r2,-12(fp)
   13f64:	10800044 	addi	r2,r2,1
   13f68:	e0bffd15 	stw	r2,-12(fp)
   13f6c:	d0a00c17 	ldw	r2,-32720(gp)
   13f70:	1007883a 	mov	r3,r2
   13f74:	e0bffd17 	ldw	r2,-12(fp)
   13f78:	18bfd92e 	bgeu	r3,r2,13ee0 <__alt_exception_stack_pointer+0xf8013ee0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13f7c:	0005883a 	mov	r2,zero
}
   13f80:	e6ffff04 	addi	sp,fp,-4
   13f84:	dfc00217 	ldw	ra,8(sp)
   13f88:	df000117 	ldw	fp,4(sp)
   13f8c:	dc000017 	ldw	r16,0(sp)
   13f90:	dec00304 	addi	sp,sp,12
   13f94:	f800283a 	ret

00013f98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13f98:	defff604 	addi	sp,sp,-40
   13f9c:	dfc00915 	stw	ra,36(sp)
   13fa0:	df000815 	stw	fp,32(sp)
   13fa4:	df000804 	addi	fp,sp,32
   13fa8:	e13ffd15 	stw	r4,-12(fp)
   13fac:	e17ffe15 	stw	r5,-8(fp)
   13fb0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13fb4:	00bfffc4 	movi	r2,-1
   13fb8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13fbc:	00bffb44 	movi	r2,-19
   13fc0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13fc4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13fc8:	d1600a04 	addi	r5,gp,-32728
   13fcc:	e13ffd17 	ldw	r4,-12(fp)
   13fd0:	00142bc0 	call	142bc <alt_find_dev>
   13fd4:	e0bff815 	stw	r2,-32(fp)
   13fd8:	e0bff817 	ldw	r2,-32(fp)
   13fdc:	1000051e 	bne	r2,zero,13ff4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13fe0:	e13ffd17 	ldw	r4,-12(fp)
   13fe4:	001434c0 	call	1434c <alt_find_file>
   13fe8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13fec:	00800044 	movi	r2,1
   13ff0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13ff4:	e0bff817 	ldw	r2,-32(fp)
   13ff8:	10002b26 	beq	r2,zero,140a8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13ffc:	e13ff817 	ldw	r4,-32(fp)
   14000:	00144540 	call	14454 <alt_get_fd>
   14004:	e0bff915 	stw	r2,-28(fp)
   14008:	e0bff917 	ldw	r2,-28(fp)
   1400c:	1000030e 	bge	r2,zero,1401c <open+0x84>
    {
      status = index;
   14010:	e0bff917 	ldw	r2,-28(fp)
   14014:	e0bffa15 	stw	r2,-24(fp)
   14018:	00002506 	br	140b0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1401c:	01400304 	movi	r5,12
   14020:	e13ff917 	ldw	r4,-28(fp)
   14024:	0004ea80 	call	4ea8 <__mulsi3>
   14028:	1007883a 	mov	r3,r2
   1402c:	00800074 	movhi	r2,1
   14030:	1097d204 	addi	r2,r2,24392
   14034:	1885883a 	add	r2,r3,r2
   14038:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1403c:	e0fffe17 	ldw	r3,-8(fp)
   14040:	00900034 	movhi	r2,16384
   14044:	10bfffc4 	addi	r2,r2,-1
   14048:	1886703a 	and	r3,r3,r2
   1404c:	e0bffc17 	ldw	r2,-16(fp)
   14050:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14054:	e0bffb17 	ldw	r2,-20(fp)
   14058:	1000051e 	bne	r2,zero,14070 <open+0xd8>
   1405c:	e13ffc17 	ldw	r4,-16(fp)
   14060:	0013eac0 	call	13eac <alt_file_locked>
   14064:	e0bffa15 	stw	r2,-24(fp)
   14068:	e0bffa17 	ldw	r2,-24(fp)
   1406c:	10001016 	blt	r2,zero,140b0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14070:	e0bff817 	ldw	r2,-32(fp)
   14074:	10800317 	ldw	r2,12(r2)
   14078:	10000826 	beq	r2,zero,1409c <open+0x104>
   1407c:	e0bff817 	ldw	r2,-32(fp)
   14080:	10800317 	ldw	r2,12(r2)
   14084:	e1ffff17 	ldw	r7,-4(fp)
   14088:	e1bffe17 	ldw	r6,-8(fp)
   1408c:	e17ffd17 	ldw	r5,-12(fp)
   14090:	e13ffc17 	ldw	r4,-16(fp)
   14094:	103ee83a 	callr	r2
   14098:	00000106 	br	140a0 <open+0x108>
   1409c:	0005883a 	mov	r2,zero
   140a0:	e0bffa15 	stw	r2,-24(fp)
   140a4:	00000206 	br	140b0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   140a8:	00bffb44 	movi	r2,-19
   140ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   140b0:	e0bffa17 	ldw	r2,-24(fp)
   140b4:	1000090e 	bge	r2,zero,140dc <open+0x144>
  {
    alt_release_fd (index);  
   140b8:	e13ff917 	ldw	r4,-28(fp)
   140bc:	00123d40 	call	123d4 <alt_release_fd>
    ALT_ERRNO = -status;
   140c0:	0013e700 	call	13e70 <alt_get_errno>
   140c4:	1007883a 	mov	r3,r2
   140c8:	e0bffa17 	ldw	r2,-24(fp)
   140cc:	0085c83a 	sub	r2,zero,r2
   140d0:	18800015 	stw	r2,0(r3)
    return -1;
   140d4:	00bfffc4 	movi	r2,-1
   140d8:	00000106 	br	140e0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   140dc:	e0bff917 	ldw	r2,-28(fp)
}
   140e0:	e037883a 	mov	sp,fp
   140e4:	dfc00117 	ldw	ra,4(sp)
   140e8:	df000017 	ldw	fp,0(sp)
   140ec:	dec00204 	addi	sp,sp,8
   140f0:	f800283a 	ret

000140f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   140f4:	defffa04 	addi	sp,sp,-24
   140f8:	df000515 	stw	fp,20(sp)
   140fc:	df000504 	addi	fp,sp,20
   14100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14104:	0005303a 	rdctl	r2,status
   14108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1410c:	e0fffc17 	ldw	r3,-16(fp)
   14110:	00bfff84 	movi	r2,-2
   14114:	1884703a 	and	r2,r3,r2
   14118:	1001703a 	wrctl	status,r2
  
  return context;
   1411c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14120:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14124:	e0bfff17 	ldw	r2,-4(fp)
   14128:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1412c:	e0bffd17 	ldw	r2,-12(fp)
   14130:	10800017 	ldw	r2,0(r2)
   14134:	e0fffd17 	ldw	r3,-12(fp)
   14138:	18c00117 	ldw	r3,4(r3)
   1413c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	10800117 	ldw	r2,4(r2)
   14148:	e0fffd17 	ldw	r3,-12(fp)
   1414c:	18c00017 	ldw	r3,0(r3)
   14150:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14154:	e0bffd17 	ldw	r2,-12(fp)
   14158:	e0fffd17 	ldw	r3,-12(fp)
   1415c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	e0fffd17 	ldw	r3,-12(fp)
   14168:	10c00015 	stw	r3,0(r2)
   1416c:	e0bffb17 	ldw	r2,-20(fp)
   14170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14174:	e0bffe17 	ldw	r2,-8(fp)
   14178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1417c:	0001883a 	nop
   14180:	e037883a 	mov	sp,fp
   14184:	df000017 	ldw	fp,0(sp)
   14188:	dec00104 	addi	sp,sp,4
   1418c:	f800283a 	ret

00014190 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14190:	defffb04 	addi	sp,sp,-20
   14194:	dfc00415 	stw	ra,16(sp)
   14198:	df000315 	stw	fp,12(sp)
   1419c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   141a0:	d0a00f17 	ldw	r2,-32708(gp)
   141a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   141a8:	d0a70617 	ldw	r2,-25576(gp)
   141ac:	10800044 	addi	r2,r2,1
   141b0:	d0a70615 	stw	r2,-25576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   141b4:	00002e06 	br	14270 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   141b8:	e0bffd17 	ldw	r2,-12(fp)
   141bc:	10800017 	ldw	r2,0(r2)
   141c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   141c4:	e0bffd17 	ldw	r2,-12(fp)
   141c8:	10800403 	ldbu	r2,16(r2)
   141cc:	10803fcc 	andi	r2,r2,255
   141d0:	10000426 	beq	r2,zero,141e4 <alt_tick+0x54>
   141d4:	d0a70617 	ldw	r2,-25576(gp)
   141d8:	1000021e 	bne	r2,zero,141e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   141dc:	e0bffd17 	ldw	r2,-12(fp)
   141e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   141e4:	e0bffd17 	ldw	r2,-12(fp)
   141e8:	10800217 	ldw	r2,8(r2)
   141ec:	d0e70617 	ldw	r3,-25576(gp)
   141f0:	18801d36 	bltu	r3,r2,14268 <alt_tick+0xd8>
   141f4:	e0bffd17 	ldw	r2,-12(fp)
   141f8:	10800403 	ldbu	r2,16(r2)
   141fc:	10803fcc 	andi	r2,r2,255
   14200:	1000191e 	bne	r2,zero,14268 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14204:	e0bffd17 	ldw	r2,-12(fp)
   14208:	10800317 	ldw	r2,12(r2)
   1420c:	e0fffd17 	ldw	r3,-12(fp)
   14210:	18c00517 	ldw	r3,20(r3)
   14214:	1809883a 	mov	r4,r3
   14218:	103ee83a 	callr	r2
   1421c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14220:	e0bfff17 	ldw	r2,-4(fp)
   14224:	1000031e 	bne	r2,zero,14234 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14228:	e13ffd17 	ldw	r4,-12(fp)
   1422c:	00140f40 	call	140f4 <alt_alarm_stop>
   14230:	00000d06 	br	14268 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14234:	e0bffd17 	ldw	r2,-12(fp)
   14238:	10c00217 	ldw	r3,8(r2)
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	1887883a 	add	r3,r3,r2
   14244:	e0bffd17 	ldw	r2,-12(fp)
   14248:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1424c:	e0bffd17 	ldw	r2,-12(fp)
   14250:	10c00217 	ldw	r3,8(r2)
   14254:	d0a70617 	ldw	r2,-25576(gp)
   14258:	1880032e 	bgeu	r3,r2,14268 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1425c:	e0bffd17 	ldw	r2,-12(fp)
   14260:	00c00044 	movi	r3,1
   14264:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14270:	e0fffd17 	ldw	r3,-12(fp)
   14274:	d0a00f04 	addi	r2,gp,-32708
   14278:	18bfcf1e 	bne	r3,r2,141b8 <__alt_exception_stack_pointer+0xf80141b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1427c:	0001883a 	nop
}
   14280:	0001883a 	nop
   14284:	e037883a 	mov	sp,fp
   14288:	dfc00117 	ldw	ra,4(sp)
   1428c:	df000017 	ldw	fp,0(sp)
   14290:	dec00204 	addi	sp,sp,8
   14294:	f800283a 	ret

00014298 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   14298:	deffff04 	addi	sp,sp,-4
   1429c:	df000015 	stw	fp,0(sp)
   142a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   142a4:	000170fa 	wrctl	ienable,zero
}
   142a8:	0001883a 	nop
   142ac:	e037883a 	mov	sp,fp
   142b0:	df000017 	ldw	fp,0(sp)
   142b4:	dec00104 	addi	sp,sp,4
   142b8:	f800283a 	ret

000142bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   142bc:	defffa04 	addi	sp,sp,-24
   142c0:	dfc00515 	stw	ra,20(sp)
   142c4:	df000415 	stw	fp,16(sp)
   142c8:	df000404 	addi	fp,sp,16
   142cc:	e13ffe15 	stw	r4,-8(fp)
   142d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   142d4:	e0bfff17 	ldw	r2,-4(fp)
   142d8:	10800017 	ldw	r2,0(r2)
   142dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   142e0:	e13ffe17 	ldw	r4,-8(fp)
   142e4:	00077640 	call	7764 <strlen>
   142e8:	10800044 	addi	r2,r2,1
   142ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   142f0:	00000d06 	br	14328 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   142f4:	e0bffc17 	ldw	r2,-16(fp)
   142f8:	10800217 	ldw	r2,8(r2)
   142fc:	e0fffd17 	ldw	r3,-12(fp)
   14300:	180d883a 	mov	r6,r3
   14304:	e17ffe17 	ldw	r5,-8(fp)
   14308:	1009883a 	mov	r4,r2
   1430c:	00146000 	call	14600 <memcmp>
   14310:	1000021e 	bne	r2,zero,1431c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14314:	e0bffc17 	ldw	r2,-16(fp)
   14318:	00000706 	br	14338 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1431c:	e0bffc17 	ldw	r2,-16(fp)
   14320:	10800017 	ldw	r2,0(r2)
   14324:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14328:	e0fffc17 	ldw	r3,-16(fp)
   1432c:	e0bfff17 	ldw	r2,-4(fp)
   14330:	18bff01e 	bne	r3,r2,142f4 <__alt_exception_stack_pointer+0xf80142f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14334:	0005883a 	mov	r2,zero
}
   14338:	e037883a 	mov	sp,fp
   1433c:	dfc00117 	ldw	ra,4(sp)
   14340:	df000017 	ldw	fp,0(sp)
   14344:	dec00204 	addi	sp,sp,8
   14348:	f800283a 	ret

0001434c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1434c:	defffb04 	addi	sp,sp,-20
   14350:	dfc00415 	stw	ra,16(sp)
   14354:	df000315 	stw	fp,12(sp)
   14358:	df000304 	addi	fp,sp,12
   1435c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14360:	d0a00817 	ldw	r2,-32736(gp)
   14364:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14368:	00003106 	br	14430 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800217 	ldw	r2,8(r2)
   14374:	1009883a 	mov	r4,r2
   14378:	00077640 	call	7764 <strlen>
   1437c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14380:	e0bffd17 	ldw	r2,-12(fp)
   14384:	10c00217 	ldw	r3,8(r2)
   14388:	e0bffe17 	ldw	r2,-8(fp)
   1438c:	10bfffc4 	addi	r2,r2,-1
   14390:	1885883a 	add	r2,r3,r2
   14394:	10800003 	ldbu	r2,0(r2)
   14398:	10803fcc 	andi	r2,r2,255
   1439c:	1080201c 	xori	r2,r2,128
   143a0:	10bfe004 	addi	r2,r2,-128
   143a4:	10800bd8 	cmpnei	r2,r2,47
   143a8:	1000031e 	bne	r2,zero,143b8 <alt_find_file+0x6c>
    {
      len -= 1;
   143ac:	e0bffe17 	ldw	r2,-8(fp)
   143b0:	10bfffc4 	addi	r2,r2,-1
   143b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   143b8:	e0bffe17 	ldw	r2,-8(fp)
   143bc:	e0ffff17 	ldw	r3,-4(fp)
   143c0:	1885883a 	add	r2,r3,r2
   143c4:	10800003 	ldbu	r2,0(r2)
   143c8:	10803fcc 	andi	r2,r2,255
   143cc:	1080201c 	xori	r2,r2,128
   143d0:	10bfe004 	addi	r2,r2,-128
   143d4:	10800be0 	cmpeqi	r2,r2,47
   143d8:	1000081e 	bne	r2,zero,143fc <alt_find_file+0xb0>
   143dc:	e0bffe17 	ldw	r2,-8(fp)
   143e0:	e0ffff17 	ldw	r3,-4(fp)
   143e4:	1885883a 	add	r2,r3,r2
   143e8:	10800003 	ldbu	r2,0(r2)
   143ec:	10803fcc 	andi	r2,r2,255
   143f0:	1080201c 	xori	r2,r2,128
   143f4:	10bfe004 	addi	r2,r2,-128
   143f8:	10000a1e 	bne	r2,zero,14424 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   143fc:	e0bffd17 	ldw	r2,-12(fp)
   14400:	10800217 	ldw	r2,8(r2)
   14404:	e0fffe17 	ldw	r3,-8(fp)
   14408:	180d883a 	mov	r6,r3
   1440c:	e17fff17 	ldw	r5,-4(fp)
   14410:	1009883a 	mov	r4,r2
   14414:	00146000 	call	14600 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14418:	1000021e 	bne	r2,zero,14424 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1441c:	e0bffd17 	ldw	r2,-12(fp)
   14420:	00000706 	br	14440 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   14424:	e0bffd17 	ldw	r2,-12(fp)
   14428:	10800017 	ldw	r2,0(r2)
   1442c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14430:	e0fffd17 	ldw	r3,-12(fp)
   14434:	d0a00804 	addi	r2,gp,-32736
   14438:	18bfcc1e 	bne	r3,r2,1436c <__alt_exception_stack_pointer+0xf801436c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1443c:	0005883a 	mov	r2,zero
}
   14440:	e037883a 	mov	sp,fp
   14444:	dfc00117 	ldw	ra,4(sp)
   14448:	df000017 	ldw	fp,0(sp)
   1444c:	dec00204 	addi	sp,sp,8
   14450:	f800283a 	ret

00014454 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14454:	defffa04 	addi	sp,sp,-24
   14458:	dfc00515 	stw	ra,20(sp)
   1445c:	df000415 	stw	fp,16(sp)
   14460:	dc000315 	stw	r16,12(sp)
   14464:	df000404 	addi	fp,sp,16
   14468:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1446c:	00bffa04 	movi	r2,-24
   14470:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14474:	e03ffc15 	stw	zero,-16(fp)
   14478:	00001d06 	br	144f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1447c:	04000074 	movhi	r16,1
   14480:	8417d204 	addi	r16,r16,24392
   14484:	e0bffc17 	ldw	r2,-16(fp)
   14488:	01400304 	movi	r5,12
   1448c:	1009883a 	mov	r4,r2
   14490:	0004ea80 	call	4ea8 <__mulsi3>
   14494:	8085883a 	add	r2,r16,r2
   14498:	10800017 	ldw	r2,0(r2)
   1449c:	1000111e 	bne	r2,zero,144e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   144a0:	04000074 	movhi	r16,1
   144a4:	8417d204 	addi	r16,r16,24392
   144a8:	e0bffc17 	ldw	r2,-16(fp)
   144ac:	01400304 	movi	r5,12
   144b0:	1009883a 	mov	r4,r2
   144b4:	0004ea80 	call	4ea8 <__mulsi3>
   144b8:	8085883a 	add	r2,r16,r2
   144bc:	e0fffe17 	ldw	r3,-8(fp)
   144c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   144c4:	d0e00c17 	ldw	r3,-32720(gp)
   144c8:	e0bffc17 	ldw	r2,-16(fp)
   144cc:	1880020e 	bge	r3,r2,144d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   144d8:	e0bffc17 	ldw	r2,-16(fp)
   144dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   144e0:	00000606 	br	144fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   144e4:	e0bffc17 	ldw	r2,-16(fp)
   144e8:	10800044 	addi	r2,r2,1
   144ec:	e0bffc15 	stw	r2,-16(fp)
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	10800810 	cmplti	r2,r2,32
   144f8:	103fe01e 	bne	r2,zero,1447c <__alt_exception_stack_pointer+0xf801447c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   144fc:	e0bffd17 	ldw	r2,-12(fp)
}
   14500:	e6ffff04 	addi	sp,fp,-4
   14504:	dfc00217 	ldw	ra,8(sp)
   14508:	df000117 	ldw	fp,4(sp)
   1450c:	dc000017 	ldw	r16,0(sp)
   14510:	dec00304 	addi	sp,sp,12
   14514:	f800283a 	ret

00014518 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   14518:	defffe04 	addi	sp,sp,-8
   1451c:	df000115 	stw	fp,4(sp)
   14520:	df000104 	addi	fp,sp,4
   14524:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   14528:	e0bfff17 	ldw	r2,-4(fp)
   1452c:	10bffe84 	addi	r2,r2,-6
   14530:	10c00428 	cmpgeui	r3,r2,16
   14534:	18001a1e 	bne	r3,zero,145a0 <alt_exception_cause_generated_bad_addr+0x88>
   14538:	100690ba 	slli	r3,r2,2
   1453c:	00800074 	movhi	r2,1
   14540:	10915404 	addi	r2,r2,17744
   14544:	1885883a 	add	r2,r3,r2
   14548:	10800017 	ldw	r2,0(r2)
   1454c:	1000683a 	jmp	r2
   14550:	00014590 	cmplti	zero,zero,1302
   14554:	00014590 	cmplti	zero,zero,1302
   14558:	000145a0 	cmpeqi	zero,zero,1302
   1455c:	000145a0 	cmpeqi	zero,zero,1302
   14560:	000145a0 	cmpeqi	zero,zero,1302
   14564:	00014590 	cmplti	zero,zero,1302
   14568:	00014598 	cmpnei	zero,zero,1302
   1456c:	000145a0 	cmpeqi	zero,zero,1302
   14570:	00014590 	cmplti	zero,zero,1302
   14574:	00014590 	cmplti	zero,zero,1302
   14578:	000145a0 	cmpeqi	zero,zero,1302
   1457c:	00014590 	cmplti	zero,zero,1302
   14580:	00014598 	cmpnei	zero,zero,1302
   14584:	000145a0 	cmpeqi	zero,zero,1302
   14588:	000145a0 	cmpeqi	zero,zero,1302
   1458c:	00014590 	cmplti	zero,zero,1302
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14590:	00800044 	movi	r2,1
   14594:	00000306 	br	145a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   14598:	0005883a 	mov	r2,zero
   1459c:	00000106 	br	145a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   145a0:	0005883a 	mov	r2,zero
  }
}
   145a4:	e037883a 	mov	sp,fp
   145a8:	df000017 	ldw	fp,0(sp)
   145ac:	dec00104 	addi	sp,sp,4
   145b0:	f800283a 	ret

000145b4 <atexit>:
   145b4:	200b883a 	mov	r5,r4
   145b8:	000f883a 	mov	r7,zero
   145bc:	000d883a 	mov	r6,zero
   145c0:	0009883a 	mov	r4,zero
   145c4:	001467c1 	jmpi	1467c <__register_exitproc>

000145c8 <exit>:
   145c8:	defffe04 	addi	sp,sp,-8
   145cc:	000b883a 	mov	r5,zero
   145d0:	dc000015 	stw	r16,0(sp)
   145d4:	dfc00115 	stw	ra,4(sp)
   145d8:	2021883a 	mov	r16,r4
   145dc:	00147940 	call	14794 <__call_exitprocs>
   145e0:	00800074 	movhi	r2,1
   145e4:	109c7204 	addi	r2,r2,29128
   145e8:	11000017 	ldw	r4,0(r2)
   145ec:	20800f17 	ldw	r2,60(r4)
   145f0:	10000126 	beq	r2,zero,145f8 <exit+0x30>
   145f4:	103ee83a 	callr	r2
   145f8:	8009883a 	mov	r4,r16
   145fc:	00149140 	call	14914 <_exit>

00014600 <memcmp>:
   14600:	01c000c4 	movi	r7,3
   14604:	3980192e 	bgeu	r7,r6,1466c <memcmp+0x6c>
   14608:	2144b03a 	or	r2,r4,r5
   1460c:	11c4703a 	and	r2,r2,r7
   14610:	10000f26 	beq	r2,zero,14650 <memcmp+0x50>
   14614:	20800003 	ldbu	r2,0(r4)
   14618:	28c00003 	ldbu	r3,0(r5)
   1461c:	10c0151e 	bne	r2,r3,14674 <memcmp+0x74>
   14620:	31bfff84 	addi	r6,r6,-2
   14624:	01ffffc4 	movi	r7,-1
   14628:	00000406 	br	1463c <memcmp+0x3c>
   1462c:	20800003 	ldbu	r2,0(r4)
   14630:	28c00003 	ldbu	r3,0(r5)
   14634:	31bfffc4 	addi	r6,r6,-1
   14638:	10c00e1e 	bne	r2,r3,14674 <memcmp+0x74>
   1463c:	21000044 	addi	r4,r4,1
   14640:	29400044 	addi	r5,r5,1
   14644:	31fff91e 	bne	r6,r7,1462c <__alt_exception_stack_pointer+0xf801462c>
   14648:	0005883a 	mov	r2,zero
   1464c:	f800283a 	ret
   14650:	20c00017 	ldw	r3,0(r4)
   14654:	28800017 	ldw	r2,0(r5)
   14658:	18bfee1e 	bne	r3,r2,14614 <__alt_exception_stack_pointer+0xf8014614>
   1465c:	31bfff04 	addi	r6,r6,-4
   14660:	21000104 	addi	r4,r4,4
   14664:	29400104 	addi	r5,r5,4
   14668:	39bff936 	bltu	r7,r6,14650 <__alt_exception_stack_pointer+0xf8014650>
   1466c:	303fe91e 	bne	r6,zero,14614 <__alt_exception_stack_pointer+0xf8014614>
   14670:	003ff506 	br	14648 <__alt_exception_stack_pointer+0xf8014648>
   14674:	10c5c83a 	sub	r2,r2,r3
   14678:	f800283a 	ret

0001467c <__register_exitproc>:
   1467c:	defffa04 	addi	sp,sp,-24
   14680:	dc000315 	stw	r16,12(sp)
   14684:	04000074 	movhi	r16,1
   14688:	841c7204 	addi	r16,r16,29128
   1468c:	80c00017 	ldw	r3,0(r16)
   14690:	dc400415 	stw	r17,16(sp)
   14694:	dfc00515 	stw	ra,20(sp)
   14698:	18805217 	ldw	r2,328(r3)
   1469c:	2023883a 	mov	r17,r4
   146a0:	10003726 	beq	r2,zero,14780 <__register_exitproc+0x104>
   146a4:	10c00117 	ldw	r3,4(r2)
   146a8:	010007c4 	movi	r4,31
   146ac:	20c00e16 	blt	r4,r3,146e8 <__register_exitproc+0x6c>
   146b0:	1a000044 	addi	r8,r3,1
   146b4:	8800221e 	bne	r17,zero,14740 <__register_exitproc+0xc4>
   146b8:	18c00084 	addi	r3,r3,2
   146bc:	18c7883a 	add	r3,r3,r3
   146c0:	18c7883a 	add	r3,r3,r3
   146c4:	12000115 	stw	r8,4(r2)
   146c8:	10c7883a 	add	r3,r2,r3
   146cc:	19400015 	stw	r5,0(r3)
   146d0:	0005883a 	mov	r2,zero
   146d4:	dfc00517 	ldw	ra,20(sp)
   146d8:	dc400417 	ldw	r17,16(sp)
   146dc:	dc000317 	ldw	r16,12(sp)
   146e0:	dec00604 	addi	sp,sp,24
   146e4:	f800283a 	ret
   146e8:	00800034 	movhi	r2,0
   146ec:	109b1504 	addi	r2,r2,27732
   146f0:	10002626 	beq	r2,zero,1478c <__register_exitproc+0x110>
   146f4:	01006404 	movi	r4,400
   146f8:	d9400015 	stw	r5,0(sp)
   146fc:	d9800115 	stw	r6,4(sp)
   14700:	d9c00215 	stw	r7,8(sp)
   14704:	0006c540 	call	6c54 <malloc>
   14708:	d9400017 	ldw	r5,0(sp)
   1470c:	d9800117 	ldw	r6,4(sp)
   14710:	d9c00217 	ldw	r7,8(sp)
   14714:	10001d26 	beq	r2,zero,1478c <__register_exitproc+0x110>
   14718:	81000017 	ldw	r4,0(r16)
   1471c:	10000115 	stw	zero,4(r2)
   14720:	02000044 	movi	r8,1
   14724:	22405217 	ldw	r9,328(r4)
   14728:	0007883a 	mov	r3,zero
   1472c:	12400015 	stw	r9,0(r2)
   14730:	20805215 	stw	r2,328(r4)
   14734:	10006215 	stw	zero,392(r2)
   14738:	10006315 	stw	zero,396(r2)
   1473c:	883fde26 	beq	r17,zero,146b8 <__alt_exception_stack_pointer+0xf80146b8>
   14740:	18c9883a 	add	r4,r3,r3
   14744:	2109883a 	add	r4,r4,r4
   14748:	1109883a 	add	r4,r2,r4
   1474c:	21802215 	stw	r6,136(r4)
   14750:	01800044 	movi	r6,1
   14754:	12406217 	ldw	r9,392(r2)
   14758:	30cc983a 	sll	r6,r6,r3
   1475c:	4992b03a 	or	r9,r9,r6
   14760:	12406215 	stw	r9,392(r2)
   14764:	21c04215 	stw	r7,264(r4)
   14768:	01000084 	movi	r4,2
   1476c:	893fd21e 	bne	r17,r4,146b8 <__alt_exception_stack_pointer+0xf80146b8>
   14770:	11006317 	ldw	r4,396(r2)
   14774:	218cb03a 	or	r6,r4,r6
   14778:	11806315 	stw	r6,396(r2)
   1477c:	003fce06 	br	146b8 <__alt_exception_stack_pointer+0xf80146b8>
   14780:	18805304 	addi	r2,r3,332
   14784:	18805215 	stw	r2,328(r3)
   14788:	003fc606 	br	146a4 <__alt_exception_stack_pointer+0xf80146a4>
   1478c:	00bfffc4 	movi	r2,-1
   14790:	003fd006 	br	146d4 <__alt_exception_stack_pointer+0xf80146d4>

00014794 <__call_exitprocs>:
   14794:	defff504 	addi	sp,sp,-44
   14798:	df000915 	stw	fp,36(sp)
   1479c:	dd400615 	stw	r21,24(sp)
   147a0:	dc800315 	stw	r18,12(sp)
   147a4:	dfc00a15 	stw	ra,40(sp)
   147a8:	ddc00815 	stw	r23,32(sp)
   147ac:	dd800715 	stw	r22,28(sp)
   147b0:	dd000515 	stw	r20,20(sp)
   147b4:	dcc00415 	stw	r19,16(sp)
   147b8:	dc400215 	stw	r17,8(sp)
   147bc:	dc000115 	stw	r16,4(sp)
   147c0:	d9000015 	stw	r4,0(sp)
   147c4:	2839883a 	mov	fp,r5
   147c8:	04800044 	movi	r18,1
   147cc:	057fffc4 	movi	r21,-1
   147d0:	00800074 	movhi	r2,1
   147d4:	109c7204 	addi	r2,r2,29128
   147d8:	12000017 	ldw	r8,0(r2)
   147dc:	45005217 	ldw	r20,328(r8)
   147e0:	44c05204 	addi	r19,r8,328
   147e4:	a0001c26 	beq	r20,zero,14858 <__call_exitprocs+0xc4>
   147e8:	a0800117 	ldw	r2,4(r20)
   147ec:	15ffffc4 	addi	r23,r2,-1
   147f0:	b8000d16 	blt	r23,zero,14828 <__call_exitprocs+0x94>
   147f4:	14000044 	addi	r16,r2,1
   147f8:	8421883a 	add	r16,r16,r16
   147fc:	8421883a 	add	r16,r16,r16
   14800:	84402004 	addi	r17,r16,128
   14804:	a463883a 	add	r17,r20,r17
   14808:	a421883a 	add	r16,r20,r16
   1480c:	e0001e26 	beq	fp,zero,14888 <__call_exitprocs+0xf4>
   14810:	80804017 	ldw	r2,256(r16)
   14814:	e0801c26 	beq	fp,r2,14888 <__call_exitprocs+0xf4>
   14818:	bdffffc4 	addi	r23,r23,-1
   1481c:	843fff04 	addi	r16,r16,-4
   14820:	8c7fff04 	addi	r17,r17,-4
   14824:	bd7ff91e 	bne	r23,r21,1480c <__alt_exception_stack_pointer+0xf801480c>
   14828:	00800034 	movhi	r2,0
   1482c:	109b1a04 	addi	r2,r2,27752
   14830:	10000926 	beq	r2,zero,14858 <__call_exitprocs+0xc4>
   14834:	a0800117 	ldw	r2,4(r20)
   14838:	1000301e 	bne	r2,zero,148fc <__call_exitprocs+0x168>
   1483c:	a0800017 	ldw	r2,0(r20)
   14840:	10003226 	beq	r2,zero,1490c <__call_exitprocs+0x178>
   14844:	a009883a 	mov	r4,r20
   14848:	98800015 	stw	r2,0(r19)
   1484c:	0006c680 	call	6c68 <free>
   14850:	9d000017 	ldw	r20,0(r19)
   14854:	a03fe41e 	bne	r20,zero,147e8 <__alt_exception_stack_pointer+0xf80147e8>
   14858:	dfc00a17 	ldw	ra,40(sp)
   1485c:	df000917 	ldw	fp,36(sp)
   14860:	ddc00817 	ldw	r23,32(sp)
   14864:	dd800717 	ldw	r22,28(sp)
   14868:	dd400617 	ldw	r21,24(sp)
   1486c:	dd000517 	ldw	r20,20(sp)
   14870:	dcc00417 	ldw	r19,16(sp)
   14874:	dc800317 	ldw	r18,12(sp)
   14878:	dc400217 	ldw	r17,8(sp)
   1487c:	dc000117 	ldw	r16,4(sp)
   14880:	dec00b04 	addi	sp,sp,44
   14884:	f800283a 	ret
   14888:	a0800117 	ldw	r2,4(r20)
   1488c:	80c00017 	ldw	r3,0(r16)
   14890:	10bfffc4 	addi	r2,r2,-1
   14894:	15c01426 	beq	r2,r23,148e8 <__call_exitprocs+0x154>
   14898:	80000015 	stw	zero,0(r16)
   1489c:	183fde26 	beq	r3,zero,14818 <__alt_exception_stack_pointer+0xf8014818>
   148a0:	95c8983a 	sll	r4,r18,r23
   148a4:	a0806217 	ldw	r2,392(r20)
   148a8:	a5800117 	ldw	r22,4(r20)
   148ac:	2084703a 	and	r2,r4,r2
   148b0:	10000b26 	beq	r2,zero,148e0 <__call_exitprocs+0x14c>
   148b4:	a0806317 	ldw	r2,396(r20)
   148b8:	2088703a 	and	r4,r4,r2
   148bc:	20000c1e 	bne	r4,zero,148f0 <__call_exitprocs+0x15c>
   148c0:	89400017 	ldw	r5,0(r17)
   148c4:	d9000017 	ldw	r4,0(sp)
   148c8:	183ee83a 	callr	r3
   148cc:	a0800117 	ldw	r2,4(r20)
   148d0:	15bfbf1e 	bne	r2,r22,147d0 <__alt_exception_stack_pointer+0xf80147d0>
   148d4:	98800017 	ldw	r2,0(r19)
   148d8:	153fcf26 	beq	r2,r20,14818 <__alt_exception_stack_pointer+0xf8014818>
   148dc:	003fbc06 	br	147d0 <__alt_exception_stack_pointer+0xf80147d0>
   148e0:	183ee83a 	callr	r3
   148e4:	003ff906 	br	148cc <__alt_exception_stack_pointer+0xf80148cc>
   148e8:	a5c00115 	stw	r23,4(r20)
   148ec:	003feb06 	br	1489c <__alt_exception_stack_pointer+0xf801489c>
   148f0:	89000017 	ldw	r4,0(r17)
   148f4:	183ee83a 	callr	r3
   148f8:	003ff406 	br	148cc <__alt_exception_stack_pointer+0xf80148cc>
   148fc:	a0800017 	ldw	r2,0(r20)
   14900:	a027883a 	mov	r19,r20
   14904:	1029883a 	mov	r20,r2
   14908:	003fb606 	br	147e4 <__alt_exception_stack_pointer+0xf80147e4>
   1490c:	0005883a 	mov	r2,zero
   14910:	003ffb06 	br	14900 <__alt_exception_stack_pointer+0xf8014900>

00014914 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14914:	defffd04 	addi	sp,sp,-12
   14918:	df000215 	stw	fp,8(sp)
   1491c:	df000204 	addi	fp,sp,8
   14920:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14924:	0001883a 	nop
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14930:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14934:	10000226 	beq	r2,zero,14940 <_exit+0x2c>
    ALT_SIM_FAIL();
   14938:	002af070 	cmpltui	zero,zero,43969
   1493c:	00000106 	br	14944 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14940:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14944:	003fff06 	br	14944 <__alt_exception_stack_pointer+0xf8014944>
