
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fe98 memsz 0x0000fe98 flags r-x
    LOAD off    0x00010eb8 vaddr 0x0000feb8 paddr 0x000119a0 align 2**12
         filesz 0x00001ae8 memsz 0x00001ae8 flags rw-
    LOAD off    0x00013488 vaddr 0x00013488 paddr 0x00013488 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f970  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000030c  0000fbac  0000fbac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae8  0000feb8  000119a0  00010eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013488  00013488  00013488  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000135e8  000135e8  000129a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000129a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb8  00000000  00000000  000129c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000235b0  00000000  00000000  00013880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008fee  00000000  00000000  00036e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b4e0  00000000  00000000  0003fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000208c  00000000  00000000  0004b300  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003969  00000000  00000000  0004d38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000177ad  00000000  00000000  00050cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000684a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018b8  00000000  00000000  000684b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cd8a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006cd8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006cd92  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006cd93  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006cd94  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0006cd9f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006cda3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0006cdae  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0006cdb7  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  0006cddf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005563e  00000000  00000000  00071c38  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0000fbac l    d  .rodata	00000000 .rodata
0000feb8 l    d  .rwdata	00000000 .rwdata
00013488 l    d  .bss	00000000 .bss
000135e8 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000fbf2 l     O .rodata	00000010 zeroes.4404
00003340 l     F .text	000000bc __sbprintf
0000fc02 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003550 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000050a8 l     F .text	00000008 __fp_unlock
000050bc l     F .text	0000019c __sinit.part.1
00005258 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000102c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010704 l     O .rwdata	00000020 lc_ctype_charset
000106e4 l     O .rwdata	00000020 lc_message_charset
00010724 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000fc34 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000073dc l     F .text	000000fc __sprint_r.part.0
0000fd58 l     O .rodata	00000010 zeroes.4349
00008a18 l     F .text	000000bc __sbprintf
0000fd68 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d40c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d520 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d54c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d728 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d9f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011994 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dda0 l     F .text	00000034 alt_dev_reg
00010904 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e090 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e29c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e8d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000eb14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ef74 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f0d4 l     F .text	0000003c alt_get_errno
0000f110 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000134bc g     O .bss	00000004 alt_instruction_exception_handler
00006f40 g     F .text	00000074 _mprec_log10
0000702c g     F .text	0000008c __any_on
00009494 g     F .text	00000054 _isatty_r
0000fc40 g     O .rodata	00000028 __mprec_tinytens
0000d92c g     F .text	0000007c alt_main
000134e8 g     O .bss	00000100 alt_irq
000094e8 g     F .text	00000060 _lseek_r
000119a0 g       *ABS*	00000000 __flash_rwdata_start
0000bde4 g     F .text	00000088 .hidden __eqdf2
000135e8 g       *ABS*	00000000 __alt_heap_start
00000fb8 g     F .text	0000003c printf
00009dc0 g     F .text	0000009c _wcrtomb_r
00007204 g     F .text	0000005c __sseek
00005408 g     F .text	00000010 __sinit
00009c68 g     F .text	00000140 __swbuf_r
00005a14 g     F .text	0000007c _setlocale_r
00005260 g     F .text	00000078 __sfmoreglue
0000d9cc g     F .text	00000024 __malloc_unlock
00009548 g     F .text	0000015c memmove
000053f0 g     F .text	00000018 _cleanup
00006000 g     F .text	000000a8 _Balloc
0000be6c g     F .text	000000dc .hidden __gtdf2
0000f4fc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008f70 g     F .text	0000005c _fstat_r
00013494 g     O .bss	00000004 errno
00007180 g     F .text	00000008 __seofread
000134a8 g     O .bss	00000004 alt_argv
00019964 g       *ABS*	00000000 _gp
00010784 g     O .rwdata	00000180 alt_fd_list
0000f520 g     F .text	00000090 alt_find_dev
00005d90 g     F .text	00000148 memcpy
000050b0 g     F .text	0000000c _cleanup_r
0000d224 g     F .text	000000dc .hidden __floatsidf
0000f058 g     F .text	0000007c alt_io_redirect
0000bf48 g     F .text	000000f4 .hidden __ltdf2
0000fbac g       *ABS*	00000000 __DTOR_END__
0000f77c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000070b8 g     F .text	00000074 __fpclassifyd
00006e9c g     F .text	000000a4 __ratio
000089fc g     F .text	0000001c __vfiprintf_internal
0000e494 g     F .text	0000021c altera_avalon_jtag_uart_read
00000754 g     F .text	00000014 malloc
00000f88 g     F .text	00000030 _printf_r
00000670 g     F .text	00000064 .hidden __udivsi3
0000d67c g     F .text	000000ac isatty
0000fc90 g     O .rodata	000000c8 __mprec_tens
00005a90 g     F .text	0000000c __locale_charset
00013490 g     O .bss	00000004 __malloc_top_pad
00011974 g     O .rwdata	00000004 __mb_cur_max
00005ac0 g     F .text	0000000c _localeconv_r
00008fcc g     F .text	000004c8 __sfvwrite_r
00006434 g     F .text	0000003c __i2b
00000ff4 g     F .text	00000054 _sbrk_r
000096a4 g     F .text	00000060 _read_r
0001198c g     O .rwdata	00000004 alt_max_fd
00008c64 g     F .text	000000f0 _fclose_r
00005078 g     F .text	00000030 fflush
0001348c g     O .bss	00000004 __malloc_max_sbrked_mem
0000ab68 g     F .text	000008ac .hidden __adddf3
00006c44 g     F .text	0000010c __b2d
0000a5a4 g     F .text	000005c4 .hidden __umoddi3
0000d850 g     F .text	000000dc lseek
0001196c g     O .rwdata	00000004 _global_impure_ptr
00009704 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
000135e8 g       *ABS*	00000000 __bss_end
0000ee84 g     F .text	000000f0 alt_iic_isr_register
0000f3f4 g     F .text	00000108 alt_tick
00009fa8 g     F .text	000005fc .hidden __udivdi3
00008ecc g     F .text	00000024 _fputwc_r
0000fc68 g     O .rodata	00000028 __mprec_bigtens
00006218 g     F .text	00000104 __s2b
0000d300 g     F .text	000000a8 .hidden __floatunsidf
00006984 g     F .text	00000060 __mcmp
00005428 g     F .text	00000018 __fp_lock_all
0000ee38 g     F .text	0000004c alt_ic_irq_enabled
0000f358 g     F .text	0000009c alt_alarm_stop
000134b0 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
0001075c g     O .rwdata	00000028 alt_dev_null
0000eaf4 g     F .text	00000020 alt_dcache_flush_all
0000631c g     F .text	00000068 __hi0bits
0000d1a4 g     F .text	00000080 .hidden __fixdfsi
000119a0 g       *ABS*	00000000 __ram_rwdata_end
00011984 g     O .rwdata	00000008 alt_dev_list
0000dca0 g     F .text	00000100 write
0000feb8 g       *ABS*	00000000 __ram_rodata_end
0000d588 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bf48 g     F .text	000000f4 .hidden __ledf2
000066fc g     F .text	00000140 __pow5mult
000074f0 g     F .text	0000150c ___vfiprintf_internal_r
000134a0 g     O .bss	00000004 __nlocale_changed
000006d4 g     F .text	00000058 .hidden __umodsi3
000135e8 g       *ABS*	00000000 end
0000dfd0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
0000fbac g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000e94c g     F .text	0000007c alt_avalon_timer_sc_init
0000d3a8 g     F .text	00000064 .hidden __clzsi2
0000e6b0 g     F .text	00000224 altera_avalon_jtag_uart_write
00005418 g     F .text	00000004 __sfp_lock_acquire
00005cac g     F .text	000000e4 memchr
00001048 g     F .text	000022dc ___vfprintf_internal_r
0000557c g     F .text	00000310 _free_r
00005a9c g     F .text	00000010 __locale_mb_cur_max
0000f9f8 g     F .text	00000180 __call_exitprocs
0001349c g     O .bss	00000004 __mlocale_changed
00011964 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
000134b4 g     O .bss	00000004 _alt_tick_rate
0000683c g     F .text	00000148 __lshift
000134b8 g     O .bss	00000004 _alt_nticks
0000da2c g     F .text	00000104 read
0000de0c g     F .text	00000060 alt_sys_init
0000f8e0 g     F .text	00000118 __register_exitproc
00006470 g     F .text	0000028c __multiply
0000e33c g     F .text	00000068 altera_avalon_jtag_uart_close
0000072c g     F .text	00000028 .hidden __mulsi3
0000feb8 g       *ABS*	00000000 __ram_rwdata_start
0000fbac g       *ABS*	00000000 __ram_rodata_start
000134c0 g     O .bss	00000028 __malloc_current_mallinfo
00006d50 g     F .text	0000014c __d2b
0000de6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f6b8 g     F .text	000000c4 alt_get_fd
00008b34 g     F .text	00000054 _close_r
0000f864 g     F .text	0000007c memcmp
0000df2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000135e8 g       *ABS*	00000000 __alt_stack_base
0000df7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000033fc g     F .text	00000154 __swsetup_r
0000b414 g     F .text	000009d0 .hidden __divdf3
000052d8 g     F .text	00000118 __sfp
00006fb4 g     F .text	00000078 __copybits
0000feb8 g     O .rwdata	00000408 __malloc_av_
00005424 g     F .text	00000004 __sinit_lock_release
0000c03c g     F .text	0000086c .hidden __muldf3
0000712c g     F .text	00000054 __sread
0000f5b0 g     F .text	00000108 alt_find_file
0000eb50 g     F .text	000000a4 alt_dev_llist_insert
0000d9a8 g     F .text	00000024 __malloc_lock
0000dbb4 g     F .text	000000b0 sbrk
0000501c g     F .text	0000005c _fflush_r
00008b88 g     F .text	000000dc _calloc_r
00013488 g       *ABS*	00000000 __bss_start
00005ed8 g     F .text	00000128 memset
00000278 g     F .text	00000300 main
000134ac g     O .bss	00000004 alt_envp
00013488 g     O .bss	00000004 __malloc_max_total_mem
0000decc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009da8 g     F .text	00000018 __swbuf
00007260 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
00008d54 g     F .text	00000014 fclose
00003778 g     F .text	00001688 _dtoa_r
0000077c g     F .text	0000080c _malloc_r
00009f1c g     F .text	00000030 __ascii_wctomb
00011990 g     O .rwdata	00000004 alt_errno
0000588c g     F .text	000000c4 _fwalk
00000578 g     F .text	00000084 .hidden __divsi3
00005458 g     F .text	00000124 _malloc_trim_r
0000fbac g       *ABS*	00000000 __CTOR_END__
00007268 g     F .text	000000dc strcmp
0000fbac g       *ABS*	00000000 __flash_rodata_start
0000fbac g       *ABS*	00000000 __DTOR_LIST__
0000bde4 g     F .text	00000088 .hidden __nedf2
0000ddd4 g     F .text	00000038 alt_irq_init
0000db30 g     F .text	00000084 alt_release_fd
0000fd78 g     O .rodata	00000100 .hidden __clz_tab
00013498 g     O .bss	00000004 _PathLocale
0000f818 g     F .text	00000014 atexit
00008ad4 g     F .text	00000060 _write_r
00005acc g     F .text	00000018 setlocale
00011970 g     O .rwdata	00000004 _impure_ptr
000134a4 g     O .bss	00000004 alt_argc
00004e00 g     F .text	0000021c __sflush_r
0000ec54 g     F .text	00000060 _do_dtors
00005ab8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006be0 g     F .text	00000064 __ulp
00005440 g     F .text	00000018 __fp_unlock_all
0001197c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005ae4 g     F .text	0000000c localeconv
0000ecd4 g     F .text	00000050 alt_ic_isr_register
000119a0 g       *ABS*	00000000 _edata
000135e8 g       *ABS*	00000000 _end
00008d68 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000e3a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000edac g     F .text	0000008c alt_ic_irq_disable
00007188 g     F .text	0000007c __swrite
00011968 g     O .rwdata	00000004 __malloc_trim_threshold
00005aac g     F .text	0000000c __locale_msgcharset
0000f82c g     F .text	00000038 exit
00005950 g     F .text	000000c4 _fwalk_reent
000069e4 g     F .text	000001fc __mdiff
000005fc g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000541c g     F .text	00000004 __sfp_lock_release
0000fb78 g     F .text	00000034 _exit
0000e9c8 g     F .text	0000012c alt_alarm_start
00005af0 g     F .text	000001bc __smakebuf_r
00007344 g     F .text	00000098 strlen
0000f1fc g     F .text	0000015c open
0000be6c g     F .text	000000dc .hidden __gedf2
00011978 g     O .rwdata	00000004 __wctomb
000074d8 g     F .text	00000018 __sprint_r
0000ecb4 g     F .text	00000020 alt_icache_flush_all
0000ed24 g     F .text	00000088 alt_ic_irq_enable
00003324 g     F .text	0000001c __vfprintf_internal
00009f4c g     F .text	0000005c _wctomb_r
0000c8a8 g     F .text	000008fc .hidden __subdf3
00006384 g     F .text	000000b0 __lo0bits
00011998 g     O .rwdata	00000008 alt_alarm_list
0000ebf4 g     F .text	00000060 _do_ctors
00009e5c g     F .text	000000c0 wcrtomb
0000d448 g     F .text	000000d8 close
0000d790 g     F .text	00000084 alt_load
00008ef0 g     F .text	00000080 fputwc
00000768 g     F .text	00000014 free
00005420 g     F .text	00000004 __sinit_lock_acquire
000060d0 g     F .text	00000148 __multadd
000060a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	108d3a04 	addi	r2,r2,13544
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	108d3a04 	addi	r2,r2,13544
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6d617 	ldw	r2,-25768(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6d617 	ldw	r2,-25768(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6a65914 	ori	gp,gp,39268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	108d2214 	ori	r2,r2,13448

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18cd7a14 	ori	r3,r3,13800

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000d7900 	call	d790 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000d92c0 	call	d92c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <main>:
#include <stdlib.h>
#include "sys/alt_dma.h"
#include "alt_types.h"

int main()
{
     278:	defff304 	addi	sp,sp,-52
     27c:	dfc00c15 	stw	ra,48(sp)
     280:	df000b15 	stw	fp,44(sp)
     284:	dc000a15 	stw	r16,40(sp)
     288:	df000b04 	addi	fp,sp,44
	int i = 0;
     28c:	e03ff815 	stw	zero,-32(fp)
	int height = 0;
     290:	e03ff915 	stw	zero,-28(fp)

	volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
     294:	00820034 	movhi	r2,2048
     298:	10941c04 	addi	r2,r2,20592
     29c:	e0bffa15 	stw	r2,-24(fp)
	volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;
     2a0:	00820034 	movhi	r2,2048
     2a4:	10880004 	addi	r2,r2,8192
     2a8:	e0bffb15 	stw	r2,-20(fp)

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
     2ac:	010004f4 	movhi	r4,19
     2b0:	21300004 	addi	r4,r4,-16384
     2b4:	00007540 	call	754 <malloc>
     2b8:	e0bffc15 	stw	r2,-16(fp)

	gpu->scale = 64 * (1<<8);
     2bc:	e0bffb17 	ldw	r2,-20(fp)
     2c0:	00d00004 	movi	r3,16384
     2c4:	10c00415 	stw	r3,16(r2)
	gpu->x = 0 * (1<<8);
     2c8:	e0bffb17 	ldw	r2,-20(fp)
     2cc:	10000515 	stw	zero,20(r2)
	gpu->y = 0;
     2d0:	e0bffb17 	ldw	r2,-20(fp)
     2d4:	10000615 	stw	zero,24(r2)
	gpu->z = -20 * (1<<8);
     2d8:	e0bffb17 	ldw	r2,-20(fp)
     2dc:	00fb0004 	movi	r3,-5120
     2e0:	10c00715 	stw	r3,28(r2)
	gpu->start = 0;
     2e4:	e0bffb17 	ldw	r2,-20(fp)
     2e8:	10000115 	stw	zero,4(r2)
	printf("%d", gpu->start);
     2ec:	e0bffb17 	ldw	r2,-20(fp)
     2f0:	10800117 	ldw	r2,4(r2)
     2f4:	100b883a 	mov	r5,r2
     2f8:	01000074 	movhi	r4,1
     2fc:	213eeb04 	addi	r4,r4,-1108
     300:	0000fb80 	call	fb8 <printf>

	vga_cont->frame_pointer = frame1;
     304:	e0bffa17 	ldw	r2,-24(fp)
     308:	e0fffc17 	ldw	r3,-16(fp)
     30c:	10c00015 	stw	r3,0(r2)
	gpu->frame_pointer = frame1;
     310:	e0bffb17 	ldw	r2,-20(fp)
     314:	e0fffc17 	ldw	r3,-16(fp)
     318:	10c00015 	stw	r3,0(r2)
	gpu->done = 0;
     31c:	e0bffb17 	ldw	r2,-20(fp)
     320:	10000215 	stw	zero,8(r2)
	gpu->start = 1;
     324:	e0bffb17 	ldw	r2,-20(fp)
     328:	00c00044 	movi	r3,1
     32c:	10c00115 	stw	r3,4(r2)
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     330:	e03ff515 	stw	zero,-44(fp)
     334:	00003c06 	br	428 <main+0x1b0>
		for(int x =0; x < SCREEN_WIDTH; x++) {
     338:	e03ff615 	stw	zero,-40(fp)
     33c:	00002906 	br	3e4 <main+0x16c>
			//struct pixel_t p = {{(y*255) / SCREEN_HEIGHT, (x*255) / SCREEN_WIDTH,0, 0}};
			struct pixel_t p = {.r = 0, .g = 255, .b = 0, .a = 0};  //? B G R
     340:	e03ffd05 	stb	zero,-12(fp)
     344:	00bfffc4 	movi	r2,-1
     348:	e0bffd45 	stb	r2,-11(fp)
     34c:	e03ffd85 	stb	zero,-10(fp)
     350:	e03ffdc5 	stb	zero,-9(fp)
			p.r = (y * 255)/480;
     354:	01403fc4 	movi	r5,255
     358:	e13ff517 	ldw	r4,-44(fp)
     35c:	000072c0 	call	72c <__mulsi3>
     360:	01407804 	movi	r5,480
     364:	1009883a 	mov	r4,r2
     368:	00005780 	call	578 <__divsi3>
     36c:	e0bffd05 	stb	r2,-12(fp)
			p.g = (x * 255)/640;
     370:	01403fc4 	movi	r5,255
     374:	e13ff617 	ldw	r4,-40(fp)
     378:	000072c0 	call	72c <__mulsi3>
     37c:	0140a004 	movi	r5,640
     380:	1009883a 	mov	r4,r2
     384:	00005780 	call	578 <__divsi3>
     388:	e0bffd45 	stb	r2,-11(fp)
			frame1->D2[y][x] = p;
     38c:	e43ffc17 	ldw	r16,-16(fp)
     390:	e0bff517 	ldw	r2,-44(fp)
     394:	0140a004 	movi	r5,640
     398:	1009883a 	mov	r4,r2
     39c:	000072c0 	call	72c <__mulsi3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	e0bff617 	ldw	r2,-40(fp)
     3a8:	1885883a 	add	r2,r3,r2
     3ac:	1085883a 	add	r2,r2,r2
     3b0:	1085883a 	add	r2,r2,r2
     3b4:	8085883a 	add	r2,r16,r2
     3b8:	e0fffd03 	ldbu	r3,-12(fp)
     3bc:	10c00005 	stb	r3,0(r2)
     3c0:	e0fffd43 	ldbu	r3,-11(fp)
     3c4:	10c00045 	stb	r3,1(r2)
     3c8:	e0fffd83 	ldbu	r3,-10(fp)
     3cc:	10c00085 	stb	r3,2(r2)
     3d0:	e0fffdc3 	ldbu	r3,-9(fp)
     3d4:	10c000c5 	stb	r3,3(r2)
	gpu->frame_pointer = frame1;
	gpu->done = 0;
	gpu->start = 1;
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
		for(int x =0; x < SCREEN_WIDTH; x++) {
     3d8:	e0bff617 	ldw	r2,-40(fp)
     3dc:	10800044 	addi	r2,r2,1
     3e0:	e0bff615 	stw	r2,-40(fp)
     3e4:	e0bff617 	ldw	r2,-40(fp)
     3e8:	1080a010 	cmplti	r2,r2,640
     3ec:	103fd41e 	bne	r2,zero,340 <__alt_exception_stack_pointer+0xf8000340>
			struct pixel_t p = {.r = 0, .g = 255, .b = 0, .a = 0};  //? B G R
			p.r = (y * 255)/480;
			p.g = (x * 255)/640;
			frame1->D2[y][x] = p;
		}
		if(gpu->done == 1) {
     3f0:	e0bffb17 	ldw	r2,-20(fp)
     3f4:	10800217 	ldw	r2,8(r2)
     3f8:	10800058 	cmpnei	r2,r2,1
     3fc:	1000071e 	bne	r2,zero,41c <main+0x1a4>
			gpu->done = 0;
     400:	e0bffb17 	ldw	r2,-20(fp)
     404:	10000215 	stw	zero,8(r2)
			gpu->start = 0;
     408:	e0bffb17 	ldw	r2,-20(fp)
     40c:	10000115 	stw	zero,4(r2)
			gpu->start = 1;
     410:	e0bffb17 	ldw	r2,-20(fp)
     414:	00c00044 	movi	r3,1
     418:	10c00115 	stw	r3,4(r2)
	vga_cont->frame_pointer = frame1;
	gpu->frame_pointer = frame1;
	gpu->done = 0;
	gpu->start = 1;
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     41c:	e0bff517 	ldw	r2,-44(fp)
     420:	10800044 	addi	r2,r2,1
     424:	e0bff515 	stw	r2,-44(fp)
     428:	e0bff517 	ldw	r2,-44(fp)
     42c:	10807810 	cmplti	r2,r2,480
     430:	103fc11e 	bne	r2,zero,338 <__alt_exception_stack_pointer+0xf8000338>
			gpu->start = 0;
			gpu->start = 1;
		}
	}

	frame1->D2[0][0].r = 0;
     434:	e0bffc17 	ldw	r2,-16(fp)
     438:	10000005 	stb	zero,0(r2)
	frame1->D2[0][0].b = 0;
     43c:	e0bffc17 	ldw	r2,-16(fp)
     440:	10000085 	stb	zero,2(r2)
	frame1->D2[0][0].g = 255;
     444:	e0bffc17 	ldw	r2,-16(fp)
     448:	00ffffc4 	movi	r3,-1
     44c:	10c00045 	stb	r3,1(r2)
	frame1->D2[0][6].r = 0;
     450:	e0bffc17 	ldw	r2,-16(fp)
     454:	10000605 	stb	zero,24(r2)
	frame1->D2[0][6].b = 255;
     458:	e0bffc17 	ldw	r2,-16(fp)
     45c:	00ffffc4 	movi	r3,-1
     460:	10c00685 	stb	r3,26(r2)
	frame1->D2[0][6].g = 0;
     464:	e0bffc17 	ldw	r2,-16(fp)
     468:	10000645 	stb	zero,25(r2)

	for(int x = 0; x < SCREEN_WIDTH; x++) {
     46c:	e03ff715 	stw	zero,-36(fp)
     470:	00001c06 	br	4e4 <main+0x26c>
		struct pixel_t p = {.r = 0, .g = x, .b = 0, .a = 0};  //? B G R
     474:	e03ffe05 	stb	zero,-8(fp)
     478:	e0bff717 	ldw	r2,-36(fp)
     47c:	e0bffe45 	stb	r2,-7(fp)
     480:	e03ffe85 	stb	zero,-6(fp)
     484:	e03ffec5 	stb	zero,-5(fp)
		if(x%2==0) {
     488:	e0bff717 	ldw	r2,-36(fp)
     48c:	1080004c 	andi	r2,r2,1
     490:	1000031e 	bne	r2,zero,4a0 <main+0x228>
			p.b = 255;
     494:	00bfffc4 	movi	r2,-1
     498:	e0bffe85 	stb	r2,-6(fp)
			p.g = 0;
     49c:	e03ffe45 	stb	zero,-7(fp)
		}
		frame1->D2[2][x] = p;
     4a0:	e0fffc17 	ldw	r3,-16(fp)
     4a4:	e0bff717 	ldw	r2,-36(fp)
     4a8:	10814004 	addi	r2,r2,1280
     4ac:	1085883a 	add	r2,r2,r2
     4b0:	1085883a 	add	r2,r2,r2
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	e0fffe03 	ldbu	r3,-8(fp)
     4bc:	10c00005 	stb	r3,0(r2)
     4c0:	e0fffe43 	ldbu	r3,-7(fp)
     4c4:	10c00045 	stb	r3,1(r2)
     4c8:	e0fffe83 	ldbu	r3,-6(fp)
     4cc:	10c00085 	stb	r3,2(r2)
     4d0:	e0fffec3 	ldbu	r3,-5(fp)
     4d4:	10c000c5 	stb	r3,3(r2)
	frame1->D2[0][0].g = 255;
	frame1->D2[0][6].r = 0;
	frame1->D2[0][6].b = 255;
	frame1->D2[0][6].g = 0;

	for(int x = 0; x < SCREEN_WIDTH; x++) {
     4d8:	e0bff717 	ldw	r2,-36(fp)
     4dc:	10800044 	addi	r2,r2,1
     4e0:	e0bff715 	stw	r2,-36(fp)
     4e4:	e0bff717 	ldw	r2,-36(fp)
     4e8:	1080a010 	cmplti	r2,r2,640
     4ec:	103fe11e 	bne	r2,zero,474 <__alt_exception_stack_pointer+0xf8000474>
			p.b = 255;
			p.g = 0;
		}
		frame1->D2[2][x] = p;
	}
	frame1->D2[0][6].r = 0;
     4f0:	e0bffc17 	ldw	r2,-16(fp)
     4f4:	10000605 	stb	zero,24(r2)
	frame1->D2[0][6].b = 255;
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	00ffffc4 	movi	r3,-1
     500:	10c00685 	stb	r3,26(r2)
	frame1->D2[0][6].g = 0;
     504:	e0bffc17 	ldw	r2,-16(fp)
     508:	10000645 	stb	zero,25(r2)
	frame1->D2[0][1].r = 0;
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	10000105 	stb	zero,4(r2)
	frame1->D2[0][1].b = 255;
     514:	e0bffc17 	ldw	r2,-16(fp)
     518:	00ffffc4 	movi	r3,-1
     51c:	10c00185 	stb	r3,6(r2)
	frame1->D2[0][1].g = 0;
     520:	e0bffc17 	ldw	r2,-16(fp)
     524:	10000145 	stb	zero,5(r2)

	frame1->D2[2][0].r = 0;
     528:	e0bffc17 	ldw	r2,-16(fp)
     52c:	10050005 	stb	zero,5120(r2)
	frame1->D2[2][0].b = 0;
     530:	e0bffc17 	ldw	r2,-16(fp)
     534:	10050085 	stb	zero,5122(r2)
	frame1->D2[2][0].g = 0;
     538:	e0bffc17 	ldw	r2,-16(fp)
     53c:	10050045 	stb	zero,5121(r2)

	frame1->D2[0][SCREEN_WIDTH-5].r = 0;
     540:	e0bffc17 	ldw	r2,-16(fp)
     544:	10027b05 	stb	zero,2540(r2)
	frame1->D2[0][SCREEN_WIDTH-5].b = 255;
     548:	e0bffc17 	ldw	r2,-16(fp)
     54c:	00ffffc4 	movi	r3,-1
     550:	10c27b85 	stb	r3,2542(r2)
	frame1->D2[0][SCREEN_WIDTH-5].g = 0;
     554:	e0bffc17 	ldw	r2,-16(fp)
     558:	10027b45 	stb	zero,2541(r2)

    return 1;
     55c:	00800044 	movi	r2,1
}
     560:	e6ffff04 	addi	sp,fp,-4
     564:	dfc00217 	ldw	ra,8(sp)
     568:	df000117 	ldw	fp,4(sp)
     56c:	dc000017 	ldw	r16,0(sp)
     570:	dec00304 	addi	sp,sp,12
     574:	f800283a 	ret

00000578 <__divsi3>:
     578:	20001b16 	blt	r4,zero,5e8 <__divsi3+0x70>
     57c:	000f883a 	mov	r7,zero
     580:	28001616 	blt	r5,zero,5dc <__divsi3+0x64>
     584:	200d883a 	mov	r6,r4
     588:	29001a2e 	bgeu	r5,r4,5f4 <__divsi3+0x7c>
     58c:	00800804 	movi	r2,32
     590:	00c00044 	movi	r3,1
     594:	00000106 	br	59c <__divsi3+0x24>
     598:	10000d26 	beq	r2,zero,5d0 <__divsi3+0x58>
     59c:	294b883a 	add	r5,r5,r5
     5a0:	10bfffc4 	addi	r2,r2,-1
     5a4:	18c7883a 	add	r3,r3,r3
     5a8:	293ffb36 	bltu	r5,r4,598 <__alt_exception_stack_pointer+0xf8000598>
     5ac:	0005883a 	mov	r2,zero
     5b0:	18000726 	beq	r3,zero,5d0 <__divsi3+0x58>
     5b4:	0005883a 	mov	r2,zero
     5b8:	31400236 	bltu	r6,r5,5c4 <__divsi3+0x4c>
     5bc:	314dc83a 	sub	r6,r6,r5
     5c0:	10c4b03a 	or	r2,r2,r3
     5c4:	1806d07a 	srli	r3,r3,1
     5c8:	280ad07a 	srli	r5,r5,1
     5cc:	183ffa1e 	bne	r3,zero,5b8 <__alt_exception_stack_pointer+0xf80005b8>
     5d0:	38000126 	beq	r7,zero,5d8 <__divsi3+0x60>
     5d4:	0085c83a 	sub	r2,zero,r2
     5d8:	f800283a 	ret
     5dc:	014bc83a 	sub	r5,zero,r5
     5e0:	39c0005c 	xori	r7,r7,1
     5e4:	003fe706 	br	584 <__alt_exception_stack_pointer+0xf8000584>
     5e8:	0109c83a 	sub	r4,zero,r4
     5ec:	01c00044 	movi	r7,1
     5f0:	003fe306 	br	580 <__alt_exception_stack_pointer+0xf8000580>
     5f4:	00c00044 	movi	r3,1
     5f8:	003fee06 	br	5b4 <__alt_exception_stack_pointer+0xf80005b4>

000005fc <__modsi3>:
     5fc:	20001716 	blt	r4,zero,65c <__modsi3+0x60>
     600:	000f883a 	mov	r7,zero
     604:	2005883a 	mov	r2,r4
     608:	28001216 	blt	r5,zero,654 <__modsi3+0x58>
     60c:	2900162e 	bgeu	r5,r4,668 <__modsi3+0x6c>
     610:	01800804 	movi	r6,32
     614:	00c00044 	movi	r3,1
     618:	00000106 	br	620 <__modsi3+0x24>
     61c:	30000a26 	beq	r6,zero,648 <__modsi3+0x4c>
     620:	294b883a 	add	r5,r5,r5
     624:	31bfffc4 	addi	r6,r6,-1
     628:	18c7883a 	add	r3,r3,r3
     62c:	293ffb36 	bltu	r5,r4,61c <__alt_exception_stack_pointer+0xf800061c>
     630:	18000526 	beq	r3,zero,648 <__modsi3+0x4c>
     634:	1806d07a 	srli	r3,r3,1
     638:	11400136 	bltu	r2,r5,640 <__modsi3+0x44>
     63c:	1145c83a 	sub	r2,r2,r5
     640:	280ad07a 	srli	r5,r5,1
     644:	183ffb1e 	bne	r3,zero,634 <__alt_exception_stack_pointer+0xf8000634>
     648:	38000126 	beq	r7,zero,650 <__modsi3+0x54>
     64c:	0085c83a 	sub	r2,zero,r2
     650:	f800283a 	ret
     654:	014bc83a 	sub	r5,zero,r5
     658:	003fec06 	br	60c <__alt_exception_stack_pointer+0xf800060c>
     65c:	0109c83a 	sub	r4,zero,r4
     660:	01c00044 	movi	r7,1
     664:	003fe706 	br	604 <__alt_exception_stack_pointer+0xf8000604>
     668:	00c00044 	movi	r3,1
     66c:	003ff106 	br	634 <__alt_exception_stack_pointer+0xf8000634>

00000670 <__udivsi3>:
     670:	200d883a 	mov	r6,r4
     674:	2900152e 	bgeu	r5,r4,6cc <__udivsi3+0x5c>
     678:	28001416 	blt	r5,zero,6cc <__udivsi3+0x5c>
     67c:	00800804 	movi	r2,32
     680:	00c00044 	movi	r3,1
     684:	00000206 	br	690 <__udivsi3+0x20>
     688:	10000e26 	beq	r2,zero,6c4 <__udivsi3+0x54>
     68c:	28000516 	blt	r5,zero,6a4 <__udivsi3+0x34>
     690:	294b883a 	add	r5,r5,r5
     694:	10bfffc4 	addi	r2,r2,-1
     698:	18c7883a 	add	r3,r3,r3
     69c:	293ffa36 	bltu	r5,r4,688 <__alt_exception_stack_pointer+0xf8000688>
     6a0:	18000826 	beq	r3,zero,6c4 <__udivsi3+0x54>
     6a4:	0005883a 	mov	r2,zero
     6a8:	31400236 	bltu	r6,r5,6b4 <__udivsi3+0x44>
     6ac:	314dc83a 	sub	r6,r6,r5
     6b0:	10c4b03a 	or	r2,r2,r3
     6b4:	1806d07a 	srli	r3,r3,1
     6b8:	280ad07a 	srli	r5,r5,1
     6bc:	183ffa1e 	bne	r3,zero,6a8 <__alt_exception_stack_pointer+0xf80006a8>
     6c0:	f800283a 	ret
     6c4:	0005883a 	mov	r2,zero
     6c8:	f800283a 	ret
     6cc:	00c00044 	movi	r3,1
     6d0:	003ff406 	br	6a4 <__alt_exception_stack_pointer+0xf80006a4>

000006d4 <__umodsi3>:
     6d4:	2005883a 	mov	r2,r4
     6d8:	2900122e 	bgeu	r5,r4,724 <__umodsi3+0x50>
     6dc:	28001116 	blt	r5,zero,724 <__umodsi3+0x50>
     6e0:	01800804 	movi	r6,32
     6e4:	00c00044 	movi	r3,1
     6e8:	00000206 	br	6f4 <__umodsi3+0x20>
     6ec:	30000c26 	beq	r6,zero,720 <__umodsi3+0x4c>
     6f0:	28000516 	blt	r5,zero,708 <__umodsi3+0x34>
     6f4:	294b883a 	add	r5,r5,r5
     6f8:	31bfffc4 	addi	r6,r6,-1
     6fc:	18c7883a 	add	r3,r3,r3
     700:	293ffa36 	bltu	r5,r4,6ec <__alt_exception_stack_pointer+0xf80006ec>
     704:	18000626 	beq	r3,zero,720 <__umodsi3+0x4c>
     708:	1806d07a 	srli	r3,r3,1
     70c:	11400136 	bltu	r2,r5,714 <__umodsi3+0x40>
     710:	1145c83a 	sub	r2,r2,r5
     714:	280ad07a 	srli	r5,r5,1
     718:	183ffb1e 	bne	r3,zero,708 <__alt_exception_stack_pointer+0xf8000708>
     71c:	f800283a 	ret
     720:	f800283a 	ret
     724:	00c00044 	movi	r3,1
     728:	003ff706 	br	708 <__alt_exception_stack_pointer+0xf8000708>

0000072c <__mulsi3>:
     72c:	0005883a 	mov	r2,zero
     730:	20000726 	beq	r4,zero,750 <__mulsi3+0x24>
     734:	20c0004c 	andi	r3,r4,1
     738:	2008d07a 	srli	r4,r4,1
     73c:	18000126 	beq	r3,zero,744 <__mulsi3+0x18>
     740:	1145883a 	add	r2,r2,r5
     744:	294b883a 	add	r5,r5,r5
     748:	203ffa1e 	bne	r4,zero,734 <__alt_exception_stack_pointer+0xf8000734>
     74c:	f800283a 	ret
     750:	f800283a 	ret

00000754 <malloc>:
     754:	00800074 	movhi	r2,1
     758:	10865c04 	addi	r2,r2,6512
     75c:	200b883a 	mov	r5,r4
     760:	11000017 	ldw	r4,0(r2)
     764:	000077c1 	jmpi	77c <_malloc_r>

00000768 <free>:
     768:	00800074 	movhi	r2,1
     76c:	10865c04 	addi	r2,r2,6512
     770:	200b883a 	mov	r5,r4
     774:	11000017 	ldw	r4,0(r2)
     778:	000557c1 	jmpi	557c <_free_r>

0000077c <_malloc_r>:
     77c:	defff504 	addi	sp,sp,-44
     780:	dc800315 	stw	r18,12(sp)
     784:	dfc00a15 	stw	ra,40(sp)
     788:	df000915 	stw	fp,36(sp)
     78c:	ddc00815 	stw	r23,32(sp)
     790:	dd800715 	stw	r22,28(sp)
     794:	dd400615 	stw	r21,24(sp)
     798:	dd000515 	stw	r20,20(sp)
     79c:	dcc00415 	stw	r19,16(sp)
     7a0:	dc400215 	stw	r17,8(sp)
     7a4:	dc000115 	stw	r16,4(sp)
     7a8:	288002c4 	addi	r2,r5,11
     7ac:	00c00584 	movi	r3,22
     7b0:	2025883a 	mov	r18,r4
     7b4:	18807f2e 	bgeu	r3,r2,9b4 <_malloc_r+0x238>
     7b8:	047ffe04 	movi	r17,-8
     7bc:	1462703a 	and	r17,r2,r17
     7c0:	8800a316 	blt	r17,zero,a50 <_malloc_r+0x2d4>
     7c4:	8940a236 	bltu	r17,r5,a50 <_malloc_r+0x2d4>
     7c8:	000d9a80 	call	d9a8 <__malloc_lock>
     7cc:	00807dc4 	movi	r2,503
     7d0:	1441e92e 	bgeu	r2,r17,f78 <_malloc_r+0x7fc>
     7d4:	8804d27a 	srli	r2,r17,9
     7d8:	1000a126 	beq	r2,zero,a60 <_malloc_r+0x2e4>
     7dc:	00c00104 	movi	r3,4
     7e0:	18811e36 	bltu	r3,r2,c5c <_malloc_r+0x4e0>
     7e4:	8804d1ba 	srli	r2,r17,6
     7e8:	12000e44 	addi	r8,r2,57
     7ec:	11c00e04 	addi	r7,r2,56
     7f0:	4209883a 	add	r4,r8,r8
     7f4:	04c00074 	movhi	r19,1
     7f8:	2109883a 	add	r4,r4,r4
     7fc:	9cffae04 	addi	r19,r19,-328
     800:	2109883a 	add	r4,r4,r4
     804:	9909883a 	add	r4,r19,r4
     808:	24000117 	ldw	r16,4(r4)
     80c:	213ffe04 	addi	r4,r4,-8
     810:	24009726 	beq	r4,r16,a70 <_malloc_r+0x2f4>
     814:	80800117 	ldw	r2,4(r16)
     818:	01bfff04 	movi	r6,-4
     81c:	014003c4 	movi	r5,15
     820:	1184703a 	and	r2,r2,r6
     824:	1447c83a 	sub	r3,r2,r17
     828:	28c00716 	blt	r5,r3,848 <_malloc_r+0xcc>
     82c:	1800920e 	bge	r3,zero,a78 <_malloc_r+0x2fc>
     830:	84000317 	ldw	r16,12(r16)
     834:	24008e26 	beq	r4,r16,a70 <_malloc_r+0x2f4>
     838:	80800117 	ldw	r2,4(r16)
     83c:	1184703a 	and	r2,r2,r6
     840:	1447c83a 	sub	r3,r2,r17
     844:	28fff90e 	bge	r5,r3,82c <__alt_exception_stack_pointer+0xf800082c>
     848:	3809883a 	mov	r4,r7
     84c:	01800074 	movhi	r6,1
     850:	9c000417 	ldw	r16,16(r19)
     854:	31bfae04 	addi	r6,r6,-328
     858:	32000204 	addi	r8,r6,8
     85c:	82013426 	beq	r16,r8,d30 <_malloc_r+0x5b4>
     860:	80c00117 	ldw	r3,4(r16)
     864:	00bfff04 	movi	r2,-4
     868:	188e703a 	and	r7,r3,r2
     86c:	3c45c83a 	sub	r2,r7,r17
     870:	00c003c4 	movi	r3,15
     874:	18811f16 	blt	r3,r2,cf4 <_malloc_r+0x578>
     878:	32000515 	stw	r8,20(r6)
     87c:	32000415 	stw	r8,16(r6)
     880:	10007f0e 	bge	r2,zero,a80 <_malloc_r+0x304>
     884:	00807fc4 	movi	r2,511
     888:	11c0fd36 	bltu	r2,r7,c80 <_malloc_r+0x504>
     88c:	3806d0fa 	srli	r3,r7,3
     890:	01c00044 	movi	r7,1
     894:	30800117 	ldw	r2,4(r6)
     898:	19400044 	addi	r5,r3,1
     89c:	294b883a 	add	r5,r5,r5
     8a0:	1807d0ba 	srai	r3,r3,2
     8a4:	294b883a 	add	r5,r5,r5
     8a8:	294b883a 	add	r5,r5,r5
     8ac:	298b883a 	add	r5,r5,r6
     8b0:	38c6983a 	sll	r3,r7,r3
     8b4:	29c00017 	ldw	r7,0(r5)
     8b8:	2a7ffe04 	addi	r9,r5,-8
     8bc:	1886b03a 	or	r3,r3,r2
     8c0:	82400315 	stw	r9,12(r16)
     8c4:	81c00215 	stw	r7,8(r16)
     8c8:	30c00115 	stw	r3,4(r6)
     8cc:	2c000015 	stw	r16,0(r5)
     8d0:	3c000315 	stw	r16,12(r7)
     8d4:	2005d0ba 	srai	r2,r4,2
     8d8:	01400044 	movi	r5,1
     8dc:	288a983a 	sll	r5,r5,r2
     8e0:	19406f36 	bltu	r3,r5,aa0 <_malloc_r+0x324>
     8e4:	28c4703a 	and	r2,r5,r3
     8e8:	10000a1e 	bne	r2,zero,914 <_malloc_r+0x198>
     8ec:	00bfff04 	movi	r2,-4
     8f0:	294b883a 	add	r5,r5,r5
     8f4:	2088703a 	and	r4,r4,r2
     8f8:	28c4703a 	and	r2,r5,r3
     8fc:	21000104 	addi	r4,r4,4
     900:	1000041e 	bne	r2,zero,914 <_malloc_r+0x198>
     904:	294b883a 	add	r5,r5,r5
     908:	28c4703a 	and	r2,r5,r3
     90c:	21000104 	addi	r4,r4,4
     910:	103ffc26 	beq	r2,zero,904 <__alt_exception_stack_pointer+0xf8000904>
     914:	02bfff04 	movi	r10,-4
     918:	024003c4 	movi	r9,15
     91c:	21800044 	addi	r6,r4,1
     920:	318d883a 	add	r6,r6,r6
     924:	318d883a 	add	r6,r6,r6
     928:	318d883a 	add	r6,r6,r6
     92c:	998d883a 	add	r6,r19,r6
     930:	333ffe04 	addi	r12,r6,-8
     934:	2017883a 	mov	r11,r4
     938:	31800104 	addi	r6,r6,4
     93c:	34000017 	ldw	r16,0(r6)
     940:	31fffd04 	addi	r7,r6,-12
     944:	81c0041e 	bne	r16,r7,958 <_malloc_r+0x1dc>
     948:	0000fb06 	br	d38 <_malloc_r+0x5bc>
     94c:	1801030e 	bge	r3,zero,d5c <_malloc_r+0x5e0>
     950:	84000317 	ldw	r16,12(r16)
     954:	81c0f826 	beq	r16,r7,d38 <_malloc_r+0x5bc>
     958:	80800117 	ldw	r2,4(r16)
     95c:	1284703a 	and	r2,r2,r10
     960:	1447c83a 	sub	r3,r2,r17
     964:	48fff90e 	bge	r9,r3,94c <__alt_exception_stack_pointer+0xf800094c>
     968:	80800317 	ldw	r2,12(r16)
     96c:	81000217 	ldw	r4,8(r16)
     970:	89400054 	ori	r5,r17,1
     974:	81400115 	stw	r5,4(r16)
     978:	20800315 	stw	r2,12(r4)
     97c:	11000215 	stw	r4,8(r2)
     980:	8463883a 	add	r17,r16,r17
     984:	9c400515 	stw	r17,20(r19)
     988:	9c400415 	stw	r17,16(r19)
     98c:	18800054 	ori	r2,r3,1
     990:	88800115 	stw	r2,4(r17)
     994:	8a000315 	stw	r8,12(r17)
     998:	8a000215 	stw	r8,8(r17)
     99c:	88e3883a 	add	r17,r17,r3
     9a0:	88c00015 	stw	r3,0(r17)
     9a4:	9009883a 	mov	r4,r18
     9a8:	000d9cc0 	call	d9cc <__malloc_unlock>
     9ac:	80800204 	addi	r2,r16,8
     9b0:	00001b06 	br	a20 <_malloc_r+0x2a4>
     9b4:	04400404 	movi	r17,16
     9b8:	89402536 	bltu	r17,r5,a50 <_malloc_r+0x2d4>
     9bc:	000d9a80 	call	d9a8 <__malloc_lock>
     9c0:	00800184 	movi	r2,6
     9c4:	01000084 	movi	r4,2
     9c8:	04c00074 	movhi	r19,1
     9cc:	1085883a 	add	r2,r2,r2
     9d0:	9cffae04 	addi	r19,r19,-328
     9d4:	1085883a 	add	r2,r2,r2
     9d8:	9885883a 	add	r2,r19,r2
     9dc:	14000117 	ldw	r16,4(r2)
     9e0:	10fffe04 	addi	r3,r2,-8
     9e4:	80c0d926 	beq	r16,r3,d4c <_malloc_r+0x5d0>
     9e8:	80c00117 	ldw	r3,4(r16)
     9ec:	81000317 	ldw	r4,12(r16)
     9f0:	00bfff04 	movi	r2,-4
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	81400217 	ldw	r5,8(r16)
     9fc:	8085883a 	add	r2,r16,r2
     a00:	10c00117 	ldw	r3,4(r2)
     a04:	29000315 	stw	r4,12(r5)
     a08:	21400215 	stw	r5,8(r4)
     a0c:	18c00054 	ori	r3,r3,1
     a10:	10c00115 	stw	r3,4(r2)
     a14:	9009883a 	mov	r4,r18
     a18:	000d9cc0 	call	d9cc <__malloc_unlock>
     a1c:	80800204 	addi	r2,r16,8
     a20:	dfc00a17 	ldw	ra,40(sp)
     a24:	df000917 	ldw	fp,36(sp)
     a28:	ddc00817 	ldw	r23,32(sp)
     a2c:	dd800717 	ldw	r22,28(sp)
     a30:	dd400617 	ldw	r21,24(sp)
     a34:	dd000517 	ldw	r20,20(sp)
     a38:	dcc00417 	ldw	r19,16(sp)
     a3c:	dc800317 	ldw	r18,12(sp)
     a40:	dc400217 	ldw	r17,8(sp)
     a44:	dc000117 	ldw	r16,4(sp)
     a48:	dec00b04 	addi	sp,sp,44
     a4c:	f800283a 	ret
     a50:	00800304 	movi	r2,12
     a54:	90800015 	stw	r2,0(r18)
     a58:	0005883a 	mov	r2,zero
     a5c:	003ff006 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     a60:	01002004 	movi	r4,128
     a64:	02001004 	movi	r8,64
     a68:	01c00fc4 	movi	r7,63
     a6c:	003f6106 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     a70:	4009883a 	mov	r4,r8
     a74:	003f7506 	br	84c <__alt_exception_stack_pointer+0xf800084c>
     a78:	81000317 	ldw	r4,12(r16)
     a7c:	003fde06 	br	9f8 <__alt_exception_stack_pointer+0xf80009f8>
     a80:	81c5883a 	add	r2,r16,r7
     a84:	11400117 	ldw	r5,4(r2)
     a88:	9009883a 	mov	r4,r18
     a8c:	29400054 	ori	r5,r5,1
     a90:	11400115 	stw	r5,4(r2)
     a94:	000d9cc0 	call	d9cc <__malloc_unlock>
     a98:	80800204 	addi	r2,r16,8
     a9c:	003fe006 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     aa0:	9c000217 	ldw	r16,8(r19)
     aa4:	00bfff04 	movi	r2,-4
     aa8:	85800117 	ldw	r22,4(r16)
     aac:	b0ac703a 	and	r22,r22,r2
     ab0:	b4400336 	bltu	r22,r17,ac0 <_malloc_r+0x344>
     ab4:	b445c83a 	sub	r2,r22,r17
     ab8:	00c003c4 	movi	r3,15
     abc:	18805d16 	blt	r3,r2,c34 <_malloc_r+0x4b8>
     ac0:	05c00074 	movhi	r23,1
     ac4:	00800074 	movhi	r2,1
     ac8:	108d2404 	addi	r2,r2,13456
     acc:	bdc65904 	addi	r23,r23,6500
     ad0:	15400017 	ldw	r21,0(r2)
     ad4:	b8c00017 	ldw	r3,0(r23)
     ad8:	00bfffc4 	movi	r2,-1
     adc:	858d883a 	add	r6,r16,r22
     ae0:	8d6b883a 	add	r21,r17,r21
     ae4:	1880ea26 	beq	r3,r2,e90 <_malloc_r+0x714>
     ae8:	ad4403c4 	addi	r21,r21,4111
     aec:	00bc0004 	movi	r2,-4096
     af0:	a8aa703a 	and	r21,r21,r2
     af4:	a80b883a 	mov	r5,r21
     af8:	9009883a 	mov	r4,r18
     afc:	d9800015 	stw	r6,0(sp)
     b00:	0000ff40 	call	ff4 <_sbrk_r>
     b04:	1029883a 	mov	r20,r2
     b08:	00bfffc4 	movi	r2,-1
     b0c:	d9800017 	ldw	r6,0(sp)
     b10:	a080e826 	beq	r20,r2,eb4 <_malloc_r+0x738>
     b14:	a180a636 	bltu	r20,r6,db0 <_malloc_r+0x634>
     b18:	07000074 	movhi	fp,1
     b1c:	e70d3004 	addi	fp,fp,13504
     b20:	e0800017 	ldw	r2,0(fp)
     b24:	a887883a 	add	r3,r21,r2
     b28:	e0c00015 	stw	r3,0(fp)
     b2c:	3500e626 	beq	r6,r20,ec8 <_malloc_r+0x74c>
     b30:	b9000017 	ldw	r4,0(r23)
     b34:	00bfffc4 	movi	r2,-1
     b38:	2080ee26 	beq	r4,r2,ef4 <_malloc_r+0x778>
     b3c:	a185c83a 	sub	r2,r20,r6
     b40:	10c5883a 	add	r2,r2,r3
     b44:	e0800015 	stw	r2,0(fp)
     b48:	a0c001cc 	andi	r3,r20,7
     b4c:	1800bc26 	beq	r3,zero,e40 <_malloc_r+0x6c4>
     b50:	a0e9c83a 	sub	r20,r20,r3
     b54:	00840204 	movi	r2,4104
     b58:	a5000204 	addi	r20,r20,8
     b5c:	10c7c83a 	sub	r3,r2,r3
     b60:	a545883a 	add	r2,r20,r21
     b64:	1083ffcc 	andi	r2,r2,4095
     b68:	18abc83a 	sub	r21,r3,r2
     b6c:	a80b883a 	mov	r5,r21
     b70:	9009883a 	mov	r4,r18
     b74:	0000ff40 	call	ff4 <_sbrk_r>
     b78:	00ffffc4 	movi	r3,-1
     b7c:	10c0e126 	beq	r2,r3,f04 <_malloc_r+0x788>
     b80:	1505c83a 	sub	r2,r2,r20
     b84:	1545883a 	add	r2,r2,r21
     b88:	10800054 	ori	r2,r2,1
     b8c:	e0c00017 	ldw	r3,0(fp)
     b90:	9d000215 	stw	r20,8(r19)
     b94:	a0800115 	stw	r2,4(r20)
     b98:	a8c7883a 	add	r3,r21,r3
     b9c:	e0c00015 	stw	r3,0(fp)
     ba0:	84c00e26 	beq	r16,r19,bdc <_malloc_r+0x460>
     ba4:	018003c4 	movi	r6,15
     ba8:	3580a72e 	bgeu	r6,r22,e48 <_malloc_r+0x6cc>
     bac:	81400117 	ldw	r5,4(r16)
     bb0:	013ffe04 	movi	r4,-8
     bb4:	b0bffd04 	addi	r2,r22,-12
     bb8:	1104703a 	and	r2,r2,r4
     bbc:	2900004c 	andi	r4,r5,1
     bc0:	2088b03a 	or	r4,r4,r2
     bc4:	81000115 	stw	r4,4(r16)
     bc8:	01400144 	movi	r5,5
     bcc:	8089883a 	add	r4,r16,r2
     bd0:	21400115 	stw	r5,4(r4)
     bd4:	21400215 	stw	r5,8(r4)
     bd8:	3080cd36 	bltu	r6,r2,f10 <_malloc_r+0x794>
     bdc:	00800074 	movhi	r2,1
     be0:	108d2304 	addi	r2,r2,13452
     be4:	11000017 	ldw	r4,0(r2)
     be8:	20c0012e 	bgeu	r4,r3,bf0 <_malloc_r+0x474>
     bec:	10c00015 	stw	r3,0(r2)
     bf0:	00800074 	movhi	r2,1
     bf4:	108d2204 	addi	r2,r2,13448
     bf8:	11000017 	ldw	r4,0(r2)
     bfc:	9c000217 	ldw	r16,8(r19)
     c00:	20c0012e 	bgeu	r4,r3,c08 <_malloc_r+0x48c>
     c04:	10c00015 	stw	r3,0(r2)
     c08:	80c00117 	ldw	r3,4(r16)
     c0c:	00bfff04 	movi	r2,-4
     c10:	1886703a 	and	r3,r3,r2
     c14:	1c45c83a 	sub	r2,r3,r17
     c18:	1c400236 	bltu	r3,r17,c24 <_malloc_r+0x4a8>
     c1c:	00c003c4 	movi	r3,15
     c20:	18800416 	blt	r3,r2,c34 <_malloc_r+0x4b8>
     c24:	9009883a 	mov	r4,r18
     c28:	000d9cc0 	call	d9cc <__malloc_unlock>
     c2c:	0005883a 	mov	r2,zero
     c30:	003f7b06 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     c34:	88c00054 	ori	r3,r17,1
     c38:	80c00115 	stw	r3,4(r16)
     c3c:	8463883a 	add	r17,r16,r17
     c40:	10800054 	ori	r2,r2,1
     c44:	9c400215 	stw	r17,8(r19)
     c48:	88800115 	stw	r2,4(r17)
     c4c:	9009883a 	mov	r4,r18
     c50:	000d9cc0 	call	d9cc <__malloc_unlock>
     c54:	80800204 	addi	r2,r16,8
     c58:	003f7106 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     c5c:	00c00504 	movi	r3,20
     c60:	18804a2e 	bgeu	r3,r2,d8c <_malloc_r+0x610>
     c64:	00c01504 	movi	r3,84
     c68:	18806e36 	bltu	r3,r2,e24 <_malloc_r+0x6a8>
     c6c:	8804d33a 	srli	r2,r17,12
     c70:	12001bc4 	addi	r8,r2,111
     c74:	11c01b84 	addi	r7,r2,110
     c78:	4209883a 	add	r4,r8,r8
     c7c:	003edd06 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     c80:	3804d27a 	srli	r2,r7,9
     c84:	00c00104 	movi	r3,4
     c88:	1880442e 	bgeu	r3,r2,d9c <_malloc_r+0x620>
     c8c:	00c00504 	movi	r3,20
     c90:	18808136 	bltu	r3,r2,e98 <_malloc_r+0x71c>
     c94:	11401704 	addi	r5,r2,92
     c98:	10c016c4 	addi	r3,r2,91
     c9c:	294b883a 	add	r5,r5,r5
     ca0:	294b883a 	add	r5,r5,r5
     ca4:	294b883a 	add	r5,r5,r5
     ca8:	994b883a 	add	r5,r19,r5
     cac:	28800017 	ldw	r2,0(r5)
     cb0:	01800074 	movhi	r6,1
     cb4:	297ffe04 	addi	r5,r5,-8
     cb8:	31bfae04 	addi	r6,r6,-328
     cbc:	28806526 	beq	r5,r2,e54 <_malloc_r+0x6d8>
     cc0:	01bfff04 	movi	r6,-4
     cc4:	10c00117 	ldw	r3,4(r2)
     cc8:	1986703a 	and	r3,r3,r6
     ccc:	38c0022e 	bgeu	r7,r3,cd8 <_malloc_r+0x55c>
     cd0:	10800217 	ldw	r2,8(r2)
     cd4:	28bffb1e 	bne	r5,r2,cc4 <__alt_exception_stack_pointer+0xf8000cc4>
     cd8:	11400317 	ldw	r5,12(r2)
     cdc:	98c00117 	ldw	r3,4(r19)
     ce0:	81400315 	stw	r5,12(r16)
     ce4:	80800215 	stw	r2,8(r16)
     ce8:	2c000215 	stw	r16,8(r5)
     cec:	14000315 	stw	r16,12(r2)
     cf0:	003ef806 	br	8d4 <__alt_exception_stack_pointer+0xf80008d4>
     cf4:	88c00054 	ori	r3,r17,1
     cf8:	80c00115 	stw	r3,4(r16)
     cfc:	8463883a 	add	r17,r16,r17
     d00:	34400515 	stw	r17,20(r6)
     d04:	34400415 	stw	r17,16(r6)
     d08:	10c00054 	ori	r3,r2,1
     d0c:	8a000315 	stw	r8,12(r17)
     d10:	8a000215 	stw	r8,8(r17)
     d14:	88c00115 	stw	r3,4(r17)
     d18:	88a3883a 	add	r17,r17,r2
     d1c:	88800015 	stw	r2,0(r17)
     d20:	9009883a 	mov	r4,r18
     d24:	000d9cc0 	call	d9cc <__malloc_unlock>
     d28:	80800204 	addi	r2,r16,8
     d2c:	003f3c06 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     d30:	30c00117 	ldw	r3,4(r6)
     d34:	003ee706 	br	8d4 <__alt_exception_stack_pointer+0xf80008d4>
     d38:	5ac00044 	addi	r11,r11,1
     d3c:	588000cc 	andi	r2,r11,3
     d40:	31800204 	addi	r6,r6,8
     d44:	103efd1e 	bne	r2,zero,93c <__alt_exception_stack_pointer+0xf800093c>
     d48:	00002406 	br	ddc <_malloc_r+0x660>
     d4c:	14000317 	ldw	r16,12(r2)
     d50:	143f251e 	bne	r2,r16,9e8 <__alt_exception_stack_pointer+0xf80009e8>
     d54:	21000084 	addi	r4,r4,2
     d58:	003ebc06 	br	84c <__alt_exception_stack_pointer+0xf800084c>
     d5c:	8085883a 	add	r2,r16,r2
     d60:	10c00117 	ldw	r3,4(r2)
     d64:	81000317 	ldw	r4,12(r16)
     d68:	81400217 	ldw	r5,8(r16)
     d6c:	18c00054 	ori	r3,r3,1
     d70:	10c00115 	stw	r3,4(r2)
     d74:	29000315 	stw	r4,12(r5)
     d78:	21400215 	stw	r5,8(r4)
     d7c:	9009883a 	mov	r4,r18
     d80:	000d9cc0 	call	d9cc <__malloc_unlock>
     d84:	80800204 	addi	r2,r16,8
     d88:	003f2506 	br	a20 <__alt_exception_stack_pointer+0xf8000a20>
     d8c:	12001704 	addi	r8,r2,92
     d90:	11c016c4 	addi	r7,r2,91
     d94:	4209883a 	add	r4,r8,r8
     d98:	003e9606 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     d9c:	3804d1ba 	srli	r2,r7,6
     da0:	11400e44 	addi	r5,r2,57
     da4:	10c00e04 	addi	r3,r2,56
     da8:	294b883a 	add	r5,r5,r5
     dac:	003fbc06 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     db0:	84ff5926 	beq	r16,r19,b18 <__alt_exception_stack_pointer+0xf8000b18>
     db4:	00800074 	movhi	r2,1
     db8:	10bfae04 	addi	r2,r2,-328
     dbc:	14000217 	ldw	r16,8(r2)
     dc0:	00bfff04 	movi	r2,-4
     dc4:	80c00117 	ldw	r3,4(r16)
     dc8:	1886703a 	and	r3,r3,r2
     dcc:	003f9106 	br	c14 <__alt_exception_stack_pointer+0xf8000c14>
     dd0:	60800217 	ldw	r2,8(r12)
     dd4:	213fffc4 	addi	r4,r4,-1
     dd8:	1300651e 	bne	r2,r12,f70 <_malloc_r+0x7f4>
     ddc:	208000cc 	andi	r2,r4,3
     de0:	633ffe04 	addi	r12,r12,-8
     de4:	103ffa1e 	bne	r2,zero,dd0 <__alt_exception_stack_pointer+0xf8000dd0>
     de8:	98800117 	ldw	r2,4(r19)
     dec:	0146303a 	nor	r3,zero,r5
     df0:	1884703a 	and	r2,r3,r2
     df4:	98800115 	stw	r2,4(r19)
     df8:	294b883a 	add	r5,r5,r5
     dfc:	117f2836 	bltu	r2,r5,aa0 <__alt_exception_stack_pointer+0xf8000aa0>
     e00:	283f2726 	beq	r5,zero,aa0 <__alt_exception_stack_pointer+0xf8000aa0>
     e04:	2886703a 	and	r3,r5,r2
     e08:	5809883a 	mov	r4,r11
     e0c:	183ec31e 	bne	r3,zero,91c <__alt_exception_stack_pointer+0xf800091c>
     e10:	294b883a 	add	r5,r5,r5
     e14:	2886703a 	and	r3,r5,r2
     e18:	21000104 	addi	r4,r4,4
     e1c:	183ffc26 	beq	r3,zero,e10 <__alt_exception_stack_pointer+0xf8000e10>
     e20:	003ebe06 	br	91c <__alt_exception_stack_pointer+0xf800091c>
     e24:	00c05504 	movi	r3,340
     e28:	18801236 	bltu	r3,r2,e74 <_malloc_r+0x6f8>
     e2c:	8804d3fa 	srli	r2,r17,15
     e30:	12001e04 	addi	r8,r2,120
     e34:	11c01dc4 	addi	r7,r2,119
     e38:	4209883a 	add	r4,r8,r8
     e3c:	003e6d06 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     e40:	00c40004 	movi	r3,4096
     e44:	003f4606 	br	b60 <__alt_exception_stack_pointer+0xf8000b60>
     e48:	00800044 	movi	r2,1
     e4c:	a0800115 	stw	r2,4(r20)
     e50:	003f7406 	br	c24 <__alt_exception_stack_pointer+0xf8000c24>
     e54:	1805d0ba 	srai	r2,r3,2
     e58:	01c00044 	movi	r7,1
     e5c:	30c00117 	ldw	r3,4(r6)
     e60:	388e983a 	sll	r7,r7,r2
     e64:	2805883a 	mov	r2,r5
     e68:	38c6b03a 	or	r3,r7,r3
     e6c:	30c00115 	stw	r3,4(r6)
     e70:	003f9b06 	br	ce0 <__alt_exception_stack_pointer+0xf8000ce0>
     e74:	00c15504 	movi	r3,1364
     e78:	18801a36 	bltu	r3,r2,ee4 <_malloc_r+0x768>
     e7c:	8804d4ba 	srli	r2,r17,18
     e80:	12001f44 	addi	r8,r2,125
     e84:	11c01f04 	addi	r7,r2,124
     e88:	4209883a 	add	r4,r8,r8
     e8c:	003e5906 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     e90:	ad400404 	addi	r21,r21,16
     e94:	003f1706 	br	af4 <__alt_exception_stack_pointer+0xf8000af4>
     e98:	00c01504 	movi	r3,84
     e9c:	18802336 	bltu	r3,r2,f2c <_malloc_r+0x7b0>
     ea0:	3804d33a 	srli	r2,r7,12
     ea4:	11401bc4 	addi	r5,r2,111
     ea8:	10c01b84 	addi	r3,r2,110
     eac:	294b883a 	add	r5,r5,r5
     eb0:	003f7b06 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     eb4:	9c000217 	ldw	r16,8(r19)
     eb8:	00bfff04 	movi	r2,-4
     ebc:	80c00117 	ldw	r3,4(r16)
     ec0:	1886703a 	and	r3,r3,r2
     ec4:	003f5306 	br	c14 <__alt_exception_stack_pointer+0xf8000c14>
     ec8:	3083ffcc 	andi	r2,r6,4095
     ecc:	103f181e 	bne	r2,zero,b30 <__alt_exception_stack_pointer+0xf8000b30>
     ed0:	99000217 	ldw	r4,8(r19)
     ed4:	b545883a 	add	r2,r22,r21
     ed8:	10800054 	ori	r2,r2,1
     edc:	20800115 	stw	r2,4(r4)
     ee0:	003f3e06 	br	bdc <__alt_exception_stack_pointer+0xf8000bdc>
     ee4:	01003f84 	movi	r4,254
     ee8:	02001fc4 	movi	r8,127
     eec:	01c01f84 	movi	r7,126
     ef0:	003e4006 	br	7f4 <__alt_exception_stack_pointer+0xf80007f4>
     ef4:	00800074 	movhi	r2,1
     ef8:	10865904 	addi	r2,r2,6500
     efc:	15000015 	stw	r20,0(r2)
     f00:	003f1106 	br	b48 <__alt_exception_stack_pointer+0xf8000b48>
     f04:	00800044 	movi	r2,1
     f08:	002b883a 	mov	r21,zero
     f0c:	003f1f06 	br	b8c <__alt_exception_stack_pointer+0xf8000b8c>
     f10:	81400204 	addi	r5,r16,8
     f14:	9009883a 	mov	r4,r18
     f18:	000557c0 	call	557c <_free_r>
     f1c:	00800074 	movhi	r2,1
     f20:	108d3004 	addi	r2,r2,13504
     f24:	10c00017 	ldw	r3,0(r2)
     f28:	003f2c06 	br	bdc <__alt_exception_stack_pointer+0xf8000bdc>
     f2c:	00c05504 	movi	r3,340
     f30:	18800536 	bltu	r3,r2,f48 <_malloc_r+0x7cc>
     f34:	3804d3fa 	srli	r2,r7,15
     f38:	11401e04 	addi	r5,r2,120
     f3c:	10c01dc4 	addi	r3,r2,119
     f40:	294b883a 	add	r5,r5,r5
     f44:	003f5606 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     f48:	00c15504 	movi	r3,1364
     f4c:	18800536 	bltu	r3,r2,f64 <_malloc_r+0x7e8>
     f50:	3804d4ba 	srli	r2,r7,18
     f54:	11401f44 	addi	r5,r2,125
     f58:	10c01f04 	addi	r3,r2,124
     f5c:	294b883a 	add	r5,r5,r5
     f60:	003f4f06 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     f64:	01403f84 	movi	r5,254
     f68:	00c01f84 	movi	r3,126
     f6c:	003f4c06 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     f70:	98800117 	ldw	r2,4(r19)
     f74:	003fa006 	br	df8 <__alt_exception_stack_pointer+0xf8000df8>
     f78:	8808d0fa 	srli	r4,r17,3
     f7c:	20800044 	addi	r2,r4,1
     f80:	1085883a 	add	r2,r2,r2
     f84:	003e9006 	br	9c8 <__alt_exception_stack_pointer+0xf80009c8>

00000f88 <_printf_r>:
     f88:	defffd04 	addi	sp,sp,-12
     f8c:	2805883a 	mov	r2,r5
     f90:	dfc00015 	stw	ra,0(sp)
     f94:	d9800115 	stw	r6,4(sp)
     f98:	d9c00215 	stw	r7,8(sp)
     f9c:	21400217 	ldw	r5,8(r4)
     fa0:	d9c00104 	addi	r7,sp,4
     fa4:	100d883a 	mov	r6,r2
     fa8:	00010480 	call	1048 <___vfprintf_internal_r>
     fac:	dfc00017 	ldw	ra,0(sp)
     fb0:	dec00304 	addi	sp,sp,12
     fb4:	f800283a 	ret

00000fb8 <printf>:
     fb8:	defffc04 	addi	sp,sp,-16
     fbc:	dfc00015 	stw	ra,0(sp)
     fc0:	d9400115 	stw	r5,4(sp)
     fc4:	d9800215 	stw	r6,8(sp)
     fc8:	d9c00315 	stw	r7,12(sp)
     fcc:	00800074 	movhi	r2,1
     fd0:	10865c04 	addi	r2,r2,6512
     fd4:	10800017 	ldw	r2,0(r2)
     fd8:	200b883a 	mov	r5,r4
     fdc:	d9800104 	addi	r6,sp,4
     fe0:	11000217 	ldw	r4,8(r2)
     fe4:	00033240 	call	3324 <__vfprintf_internal>
     fe8:	dfc00017 	ldw	ra,0(sp)
     fec:	dec00404 	addi	sp,sp,16
     ff0:	f800283a 	ret

00000ff4 <_sbrk_r>:
     ff4:	defffd04 	addi	sp,sp,-12
     ff8:	dc000015 	stw	r16,0(sp)
     ffc:	04000074 	movhi	r16,1
    1000:	dc400115 	stw	r17,4(sp)
    1004:	840d2504 	addi	r16,r16,13460
    1008:	2023883a 	mov	r17,r4
    100c:	2809883a 	mov	r4,r5
    1010:	dfc00215 	stw	ra,8(sp)
    1014:	80000015 	stw	zero,0(r16)
    1018:	000dbb40 	call	dbb4 <sbrk>
    101c:	00ffffc4 	movi	r3,-1
    1020:	10c00526 	beq	r2,r3,1038 <_sbrk_r+0x44>
    1024:	dfc00217 	ldw	ra,8(sp)
    1028:	dc400117 	ldw	r17,4(sp)
    102c:	dc000017 	ldw	r16,0(sp)
    1030:	dec00304 	addi	sp,sp,12
    1034:	f800283a 	ret
    1038:	80c00017 	ldw	r3,0(r16)
    103c:	183ff926 	beq	r3,zero,1024 <__alt_exception_stack_pointer+0xf8001024>
    1040:	88c00015 	stw	r3,0(r17)
    1044:	003ff706 	br	1024 <__alt_exception_stack_pointer+0xf8001024>

00001048 <___vfprintf_internal_r>:
    1048:	deffb804 	addi	sp,sp,-288
    104c:	dfc04715 	stw	ra,284(sp)
    1050:	ddc04515 	stw	r23,276(sp)
    1054:	dd404315 	stw	r21,268(sp)
    1058:	d9002d15 	stw	r4,180(sp)
    105c:	282f883a 	mov	r23,r5
    1060:	302b883a 	mov	r21,r6
    1064:	d9c02e15 	stw	r7,184(sp)
    1068:	df004615 	stw	fp,280(sp)
    106c:	dd804415 	stw	r22,272(sp)
    1070:	dd004215 	stw	r20,264(sp)
    1074:	dcc04115 	stw	r19,260(sp)
    1078:	dc804015 	stw	r18,256(sp)
    107c:	dc403f15 	stw	r17,252(sp)
    1080:	dc003e15 	stw	r16,248(sp)
    1084:	0005ac00 	call	5ac0 <_localeconv_r>
    1088:	10800017 	ldw	r2,0(r2)
    108c:	1009883a 	mov	r4,r2
    1090:	d8803415 	stw	r2,208(sp)
    1094:	00073440 	call	7344 <strlen>
    1098:	d8803715 	stw	r2,220(sp)
    109c:	d8802d17 	ldw	r2,180(sp)
    10a0:	10000226 	beq	r2,zero,10ac <___vfprintf_internal_r+0x64>
    10a4:	10800e17 	ldw	r2,56(r2)
    10a8:	1000fb26 	beq	r2,zero,1498 <___vfprintf_internal_r+0x450>
    10ac:	b880030b 	ldhu	r2,12(r23)
    10b0:	10c8000c 	andi	r3,r2,8192
    10b4:	1800061e 	bne	r3,zero,10d0 <___vfprintf_internal_r+0x88>
    10b8:	b9001917 	ldw	r4,100(r23)
    10bc:	00f7ffc4 	movi	r3,-8193
    10c0:	10880014 	ori	r2,r2,8192
    10c4:	20c6703a 	and	r3,r4,r3
    10c8:	b880030d 	sth	r2,12(r23)
    10cc:	b8c01915 	stw	r3,100(r23)
    10d0:	10c0020c 	andi	r3,r2,8
    10d4:	1800c326 	beq	r3,zero,13e4 <___vfprintf_internal_r+0x39c>
    10d8:	b8c00417 	ldw	r3,16(r23)
    10dc:	1800c126 	beq	r3,zero,13e4 <___vfprintf_internal_r+0x39c>
    10e0:	1080068c 	andi	r2,r2,26
    10e4:	00c00284 	movi	r3,10
    10e8:	10c0c626 	beq	r2,r3,1404 <___vfprintf_internal_r+0x3bc>
    10ec:	d8c00404 	addi	r3,sp,16
    10f0:	05000074 	movhi	r20,1
    10f4:	d9001e04 	addi	r4,sp,120
    10f8:	a53efc84 	addi	r20,r20,-1038
    10fc:	d8c01e15 	stw	r3,120(sp)
    1100:	d8002015 	stw	zero,128(sp)
    1104:	d8001f15 	stw	zero,124(sp)
    1108:	d8003315 	stw	zero,204(sp)
    110c:	d8003615 	stw	zero,216(sp)
    1110:	d8003815 	stw	zero,224(sp)
    1114:	1811883a 	mov	r8,r3
    1118:	d8003915 	stw	zero,228(sp)
    111c:	d8003a15 	stw	zero,232(sp)
    1120:	d8002f15 	stw	zero,188(sp)
    1124:	d9002815 	stw	r4,160(sp)
    1128:	a8800007 	ldb	r2,0(r21)
    112c:	10028b26 	beq	r2,zero,1b5c <___vfprintf_internal_r+0xb14>
    1130:	00c00944 	movi	r3,37
    1134:	a823883a 	mov	r17,r21
    1138:	10c0021e 	bne	r2,r3,1144 <___vfprintf_internal_r+0xfc>
    113c:	00001406 	br	1190 <___vfprintf_internal_r+0x148>
    1140:	10c00326 	beq	r2,r3,1150 <___vfprintf_internal_r+0x108>
    1144:	8c400044 	addi	r17,r17,1
    1148:	88800007 	ldb	r2,0(r17)
    114c:	103ffc1e 	bne	r2,zero,1140 <__alt_exception_stack_pointer+0xf8001140>
    1150:	8d61c83a 	sub	r16,r17,r21
    1154:	80000e26 	beq	r16,zero,1190 <___vfprintf_internal_r+0x148>
    1158:	d8c02017 	ldw	r3,128(sp)
    115c:	d8801f17 	ldw	r2,124(sp)
    1160:	45400015 	stw	r21,0(r8)
    1164:	1c07883a 	add	r3,r3,r16
    1168:	10800044 	addi	r2,r2,1
    116c:	d8c02015 	stw	r3,128(sp)
    1170:	44000115 	stw	r16,4(r8)
    1174:	d8801f15 	stw	r2,124(sp)
    1178:	00c001c4 	movi	r3,7
    117c:	1880a916 	blt	r3,r2,1424 <___vfprintf_internal_r+0x3dc>
    1180:	42000204 	addi	r8,r8,8
    1184:	d9402f17 	ldw	r5,188(sp)
    1188:	2c0b883a 	add	r5,r5,r16
    118c:	d9402f15 	stw	r5,188(sp)
    1190:	88800007 	ldb	r2,0(r17)
    1194:	1000aa26 	beq	r2,zero,1440 <___vfprintf_internal_r+0x3f8>
    1198:	8d400044 	addi	r21,r17,1
    119c:	8c400047 	ldb	r17,1(r17)
    11a0:	0021883a 	mov	r16,zero
    11a4:	00bfffc4 	movi	r2,-1
    11a8:	0025883a 	mov	r18,zero
    11ac:	dc002905 	stb	r16,164(sp)
    11b0:	d8002785 	stb	zero,158(sp)
    11b4:	d8002b05 	stb	zero,172(sp)
    11b8:	d8802a15 	stw	r2,168(sp)
    11bc:	d8003115 	stw	zero,196(sp)
    11c0:	04c01604 	movi	r19,88
    11c4:	05800244 	movi	r22,9
    11c8:	9021883a 	mov	r16,r18
    11cc:	4039883a 	mov	fp,r8
    11d0:	ad400044 	addi	r21,r21,1
    11d4:	88bff804 	addi	r2,r17,-32
    11d8:	98833236 	bltu	r19,r2,1ea4 <___vfprintf_internal_r+0xe5c>
    11dc:	100490ba 	slli	r2,r2,2
    11e0:	00c00034 	movhi	r3,0
    11e4:	18c47d04 	addi	r3,r3,4596
    11e8:	10c5883a 	add	r2,r2,r3
    11ec:	10800017 	ldw	r2,0(r2)
    11f0:	1000683a 	jmp	r2
    11f4:	00001d9c 	xori	zero,zero,118
    11f8:	00001ea4 	muli	zero,zero,122
    11fc:	00001ea4 	muli	zero,zero,122
    1200:	00001dbc 	xorhi	zero,zero,118
    1204:	00001ea4 	muli	zero,zero,122
    1208:	00001ea4 	muli	zero,zero,122
    120c:	00001ea4 	muli	zero,zero,122
    1210:	00001ea4 	muli	zero,zero,122
    1214:	00001ea4 	muli	zero,zero,122
    1218:	00001ea4 	muli	zero,zero,122
    121c:	000014a4 	muli	zero,zero,82
    1220:	00001cac 	andhi	zero,zero,114
    1224:	00001ea4 	muli	zero,zero,122
    1228:	00001368 	cmpgeui	zero,zero,77
    122c:	000014c8 	cmpgei	zero,zero,83
    1230:	00001ea4 	muli	zero,zero,122
    1234:	00001518 	cmpnei	zero,zero,84
    1238:	00001524 	muli	zero,zero,84
    123c:	00001524 	muli	zero,zero,84
    1240:	00001524 	muli	zero,zero,84
    1244:	00001524 	muli	zero,zero,84
    1248:	00001524 	muli	zero,zero,84
    124c:	00001524 	muli	zero,zero,84
    1250:	00001524 	muli	zero,zero,84
    1254:	00001524 	muli	zero,zero,84
    1258:	00001524 	muli	zero,zero,84
    125c:	00001ea4 	muli	zero,zero,122
    1260:	00001ea4 	muli	zero,zero,122
    1264:	00001ea4 	muli	zero,zero,122
    1268:	00001ea4 	muli	zero,zero,122
    126c:	00001ea4 	muli	zero,zero,122
    1270:	00001ea4 	muli	zero,zero,122
    1274:	00001ea4 	muli	zero,zero,122
    1278:	00001ea4 	muli	zero,zero,122
    127c:	00001ea4 	muli	zero,zero,122
    1280:	00001ea4 	muli	zero,zero,122
    1284:	00001560 	cmpeqi	zero,zero,85
    1288:	00001628 	cmpgeui	zero,zero,88
    128c:	00001ea4 	muli	zero,zero,122
    1290:	00001628 	cmpgeui	zero,zero,88
    1294:	00001ea4 	muli	zero,zero,122
    1298:	00001ea4 	muli	zero,zero,122
    129c:	00001ea4 	muli	zero,zero,122
    12a0:	00001ea4 	muli	zero,zero,122
    12a4:	000016d4 	movui	zero,91
    12a8:	00001ea4 	muli	zero,zero,122
    12ac:	00001ea4 	muli	zero,zero,122
    12b0:	000016e0 	cmpeqi	zero,zero,91
    12b4:	00001ea4 	muli	zero,zero,122
    12b8:	00001ea4 	muli	zero,zero,122
    12bc:	00001ea4 	muli	zero,zero,122
    12c0:	00001ea4 	muli	zero,zero,122
    12c4:	00001ea4 	muli	zero,zero,122
    12c8:	00001b64 	muli	zero,zero,109
    12cc:	00001ea4 	muli	zero,zero,122
    12d0:	00001ea4 	muli	zero,zero,122
    12d4:	00001bd0 	cmplti	zero,zero,111
    12d8:	00001ea4 	muli	zero,zero,122
    12dc:	00001ea4 	muli	zero,zero,122
    12e0:	00001ea4 	muli	zero,zero,122
    12e4:	00001ea4 	muli	zero,zero,122
    12e8:	00001ea4 	muli	zero,zero,122
    12ec:	00001ea4 	muli	zero,zero,122
    12f0:	00001ea4 	muli	zero,zero,122
    12f4:	00001ea4 	muli	zero,zero,122
    12f8:	00001ea4 	muli	zero,zero,122
    12fc:	00001ea4 	muli	zero,zero,122
    1300:	00001e48 	cmpgei	zero,zero,121
    1304:	00001dc8 	cmpgei	zero,zero,119
    1308:	00001628 	cmpgeui	zero,zero,88
    130c:	00001628 	cmpgeui	zero,zero,88
    1310:	00001628 	cmpgeui	zero,zero,88
    1314:	00001de8 	cmpgeui	zero,zero,119
    1318:	00001dc8 	cmpgei	zero,zero,119
    131c:	00001ea4 	muli	zero,zero,122
    1320:	00001ea4 	muli	zero,zero,122
    1324:	00001df4 	movhi	zero,119
    1328:	00001ea4 	muli	zero,zero,122
    132c:	00001e08 	cmpgei	zero,zero,120
    1330:	00001c8c 	andi	zero,zero,114
    1334:	00001374 	movhi	zero,77
    1338:	00001cc4 	movi	zero,115
    133c:	00001ea4 	muli	zero,zero,122
    1340:	00001cd0 	cmplti	zero,zero,115
    1344:	00001ea4 	muli	zero,zero,122
    1348:	00001d34 	movhi	zero,116
    134c:	00001ea4 	muli	zero,zero,122
    1350:	00001ea4 	muli	zero,zero,122
    1354:	00001d54 	movui	zero,117
    1358:	d8c03117 	ldw	r3,196(sp)
    135c:	d8802e15 	stw	r2,184(sp)
    1360:	00c7c83a 	sub	r3,zero,r3
    1364:	d8c03115 	stw	r3,196(sp)
    1368:	84000114 	ori	r16,r16,4
    136c:	ac400007 	ldb	r17,0(r21)
    1370:	003f9706 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1374:	00800c04 	movi	r2,48
    1378:	d8802705 	stb	r2,156(sp)
    137c:	00801e04 	movi	r2,120
    1380:	d8802745 	stb	r2,157(sp)
    1384:	d9002a17 	ldw	r4,168(sp)
    1388:	d8802e17 	ldw	r2,184(sp)
    138c:	d8002785 	stb	zero,158(sp)
    1390:	e011883a 	mov	r8,fp
    1394:	10c00104 	addi	r3,r2,4
    1398:	14c00017 	ldw	r19,0(r2)
    139c:	002d883a 	mov	r22,zero
    13a0:	80800094 	ori	r2,r16,2
    13a4:	2002ca16 	blt	r4,zero,1ed0 <___vfprintf_internal_r+0xe88>
    13a8:	00bfdfc4 	movi	r2,-129
    13ac:	80a4703a 	and	r18,r16,r2
    13b0:	d8c02e15 	stw	r3,184(sp)
    13b4:	94800094 	ori	r18,r18,2
    13b8:	9802b41e 	bne	r19,zero,1e8c <___vfprintf_internal_r+0xe44>
    13bc:	01400074 	movhi	r5,1
    13c0:	297ef504 	addi	r5,r5,-1068
    13c4:	d9403915 	stw	r5,228(sp)
    13c8:	04401e04 	movi	r17,120
    13cc:	d8802a17 	ldw	r2,168(sp)
    13d0:	0039883a 	mov	fp,zero
    13d4:	1001fa26 	beq	r2,zero,1bc0 <___vfprintf_internal_r+0xb78>
    13d8:	0027883a 	mov	r19,zero
    13dc:	002d883a 	mov	r22,zero
    13e0:	00021906 	br	1c48 <___vfprintf_internal_r+0xc00>
    13e4:	d9002d17 	ldw	r4,180(sp)
    13e8:	b80b883a 	mov	r5,r23
    13ec:	00033fc0 	call	33fc <__swsetup_r>
    13f0:	1005dc1e 	bne	r2,zero,2b64 <___vfprintf_internal_r+0x1b1c>
    13f4:	b880030b 	ldhu	r2,12(r23)
    13f8:	00c00284 	movi	r3,10
    13fc:	1080068c 	andi	r2,r2,26
    1400:	10ff3a1e 	bne	r2,r3,10ec <__alt_exception_stack_pointer+0xf80010ec>
    1404:	b880038f 	ldh	r2,14(r23)
    1408:	103f3816 	blt	r2,zero,10ec <__alt_exception_stack_pointer+0xf80010ec>
    140c:	d9c02e17 	ldw	r7,184(sp)
    1410:	d9002d17 	ldw	r4,180(sp)
    1414:	a80d883a 	mov	r6,r21
    1418:	b80b883a 	mov	r5,r23
    141c:	00033400 	call	3340 <__sbprintf>
    1420:	00001106 	br	1468 <___vfprintf_internal_r+0x420>
    1424:	d9002d17 	ldw	r4,180(sp)
    1428:	d9801e04 	addi	r6,sp,120
    142c:	b80b883a 	mov	r5,r23
    1430:	00074d80 	call	74d8 <__sprint_r>
    1434:	1000081e 	bne	r2,zero,1458 <___vfprintf_internal_r+0x410>
    1438:	da000404 	addi	r8,sp,16
    143c:	003f5106 	br	1184 <__alt_exception_stack_pointer+0xf8001184>
    1440:	d8802017 	ldw	r2,128(sp)
    1444:	10000426 	beq	r2,zero,1458 <___vfprintf_internal_r+0x410>
    1448:	d9002d17 	ldw	r4,180(sp)
    144c:	d9801e04 	addi	r6,sp,120
    1450:	b80b883a 	mov	r5,r23
    1454:	00074d80 	call	74d8 <__sprint_r>
    1458:	b880030b 	ldhu	r2,12(r23)
    145c:	1080100c 	andi	r2,r2,64
    1460:	1005c01e 	bne	r2,zero,2b64 <___vfprintf_internal_r+0x1b1c>
    1464:	d8802f17 	ldw	r2,188(sp)
    1468:	dfc04717 	ldw	ra,284(sp)
    146c:	df004617 	ldw	fp,280(sp)
    1470:	ddc04517 	ldw	r23,276(sp)
    1474:	dd804417 	ldw	r22,272(sp)
    1478:	dd404317 	ldw	r21,268(sp)
    147c:	dd004217 	ldw	r20,264(sp)
    1480:	dcc04117 	ldw	r19,260(sp)
    1484:	dc804017 	ldw	r18,256(sp)
    1488:	dc403f17 	ldw	r17,252(sp)
    148c:	dc003e17 	ldw	r16,248(sp)
    1490:	dec04804 	addi	sp,sp,288
    1494:	f800283a 	ret
    1498:	d9002d17 	ldw	r4,180(sp)
    149c:	00054080 	call	5408 <__sinit>
    14a0:	003f0206 	br	10ac <__alt_exception_stack_pointer+0xf80010ac>
    14a4:	d9002e17 	ldw	r4,184(sp)
    14a8:	d9402e17 	ldw	r5,184(sp)
    14ac:	21000017 	ldw	r4,0(r4)
    14b0:	28800104 	addi	r2,r5,4
    14b4:	d9003115 	stw	r4,196(sp)
    14b8:	203fa716 	blt	r4,zero,1358 <__alt_exception_stack_pointer+0xf8001358>
    14bc:	d8802e15 	stw	r2,184(sp)
    14c0:	ac400007 	ldb	r17,0(r21)
    14c4:	003f4206 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    14c8:	ac400007 	ldb	r17,0(r21)
    14cc:	01000a84 	movi	r4,42
    14d0:	a8c00044 	addi	r3,r21,1
    14d4:	89075826 	beq	r17,r4,3238 <___vfprintf_internal_r+0x21f0>
    14d8:	8cbff404 	addi	r18,r17,-48
    14dc:	b486ae36 	bltu	r22,r18,2f98 <___vfprintf_internal_r+0x1f50>
    14e0:	0009883a 	mov	r4,zero
    14e4:	1823883a 	mov	r17,r3
    14e8:	01400284 	movi	r5,10
    14ec:	000072c0 	call	72c <__mulsi3>
    14f0:	88c00007 	ldb	r3,0(r17)
    14f4:	1489883a 	add	r4,r2,r18
    14f8:	8d400044 	addi	r21,r17,1
    14fc:	1cbff404 	addi	r18,r3,-48
    1500:	a823883a 	mov	r17,r21
    1504:	b4bff82e 	bgeu	r22,r18,14e8 <__alt_exception_stack_pointer+0xf80014e8>
    1508:	1823883a 	mov	r17,r3
    150c:	2005f616 	blt	r4,zero,2ce8 <___vfprintf_internal_r+0x1ca0>
    1510:	d9002a15 	stw	r4,168(sp)
    1514:	003f2f06 	br	11d4 <__alt_exception_stack_pointer+0xf80011d4>
    1518:	84002014 	ori	r16,r16,128
    151c:	ac400007 	ldb	r17,0(r21)
    1520:	003f2b06 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1524:	8cbff404 	addi	r18,r17,-48
    1528:	d8003115 	stw	zero,196(sp)
    152c:	0009883a 	mov	r4,zero
    1530:	a823883a 	mov	r17,r21
    1534:	01400284 	movi	r5,10
    1538:	000072c0 	call	72c <__mulsi3>
    153c:	88c00007 	ldb	r3,0(r17)
    1540:	9089883a 	add	r4,r18,r2
    1544:	ad400044 	addi	r21,r21,1
    1548:	1cbff404 	addi	r18,r3,-48
    154c:	a823883a 	mov	r17,r21
    1550:	b4bff82e 	bgeu	r22,r18,1534 <__alt_exception_stack_pointer+0xf8001534>
    1554:	1823883a 	mov	r17,r3
    1558:	d9003115 	stw	r4,196(sp)
    155c:	003f1d06 	br	11d4 <__alt_exception_stack_pointer+0xf80011d4>
    1560:	8025883a 	mov	r18,r16
    1564:	dc002903 	ldbu	r16,164(sp)
    1568:	e011883a 	mov	r8,fp
    156c:	84003fcc 	andi	r16,r16,255
    1570:	8007531e 	bne	r16,zero,32c0 <___vfprintf_internal_r+0x2278>
    1574:	94800414 	ori	r18,r18,16
    1578:	9080080c 	andi	r2,r18,32
    157c:	1003a326 	beq	r2,zero,240c <___vfprintf_internal_r+0x13c4>
    1580:	d9002e17 	ldw	r4,184(sp)
    1584:	20800117 	ldw	r2,4(r4)
    1588:	24c00017 	ldw	r19,0(r4)
    158c:	21000204 	addi	r4,r4,8
    1590:	d9002e15 	stw	r4,184(sp)
    1594:	102d883a 	mov	r22,r2
    1598:	10047316 	blt	r2,zero,2768 <___vfprintf_internal_r+0x1720>
    159c:	d9002a17 	ldw	r4,168(sp)
    15a0:	df002783 	ldbu	fp,158(sp)
    15a4:	2003e416 	blt	r4,zero,2538 <___vfprintf_internal_r+0x14f0>
    15a8:	00ffdfc4 	movi	r3,-129
    15ac:	9d84b03a 	or	r2,r19,r22
    15b0:	90e4703a 	and	r18,r18,r3
    15b4:	10018026 	beq	r2,zero,1bb8 <___vfprintf_internal_r+0xb70>
    15b8:	b003ab26 	beq	r22,zero,2468 <___vfprintf_internal_r+0x1420>
    15bc:	dc402915 	stw	r17,164(sp)
    15c0:	dc001e04 	addi	r16,sp,120
    15c4:	b023883a 	mov	r17,r22
    15c8:	402d883a 	mov	r22,r8
    15cc:	9809883a 	mov	r4,r19
    15d0:	880b883a 	mov	r5,r17
    15d4:	01800284 	movi	r6,10
    15d8:	000f883a 	mov	r7,zero
    15dc:	000a5a40 	call	a5a4 <__umoddi3>
    15e0:	10800c04 	addi	r2,r2,48
    15e4:	843fffc4 	addi	r16,r16,-1
    15e8:	9809883a 	mov	r4,r19
    15ec:	880b883a 	mov	r5,r17
    15f0:	80800005 	stb	r2,0(r16)
    15f4:	01800284 	movi	r6,10
    15f8:	000f883a 	mov	r7,zero
    15fc:	0009fa80 	call	9fa8 <__udivdi3>
    1600:	1027883a 	mov	r19,r2
    1604:	10c4b03a 	or	r2,r2,r3
    1608:	1823883a 	mov	r17,r3
    160c:	103fef1e 	bne	r2,zero,15cc <__alt_exception_stack_pointer+0xf80015cc>
    1610:	d8c02817 	ldw	r3,160(sp)
    1614:	dc402917 	ldw	r17,164(sp)
    1618:	b011883a 	mov	r8,r22
    161c:	1c07c83a 	sub	r3,r3,r16
    1620:	d8c02b15 	stw	r3,172(sp)
    1624:	00005f06 	br	17a4 <___vfprintf_internal_r+0x75c>
    1628:	8025883a 	mov	r18,r16
    162c:	dc002903 	ldbu	r16,164(sp)
    1630:	e011883a 	mov	r8,fp
    1634:	84003fcc 	andi	r16,r16,255
    1638:	80071e1e 	bne	r16,zero,32b4 <___vfprintf_internal_r+0x226c>
    163c:	9080020c 	andi	r2,r18,8
    1640:	1004af26 	beq	r2,zero,2900 <___vfprintf_internal_r+0x18b8>
    1644:	d9002e17 	ldw	r4,184(sp)
    1648:	d9402e17 	ldw	r5,184(sp)
    164c:	d8802e17 	ldw	r2,184(sp)
    1650:	21000017 	ldw	r4,0(r4)
    1654:	29400117 	ldw	r5,4(r5)
    1658:	10800204 	addi	r2,r2,8
    165c:	d9003615 	stw	r4,216(sp)
    1660:	d9403815 	stw	r5,224(sp)
    1664:	d8802e15 	stw	r2,184(sp)
    1668:	d9003617 	ldw	r4,216(sp)
    166c:	d9403817 	ldw	r5,224(sp)
    1670:	da003d15 	stw	r8,244(sp)
    1674:	04000044 	movi	r16,1
    1678:	00070b80 	call	70b8 <__fpclassifyd>
    167c:	da003d17 	ldw	r8,244(sp)
    1680:	1404441e 	bne	r2,r16,2794 <___vfprintf_internal_r+0x174c>
    1684:	d9003617 	ldw	r4,216(sp)
    1688:	d9403817 	ldw	r5,224(sp)
    168c:	000d883a 	mov	r6,zero
    1690:	000f883a 	mov	r7,zero
    1694:	000bf480 	call	bf48 <__ledf2>
    1698:	da003d17 	ldw	r8,244(sp)
    169c:	1005e316 	blt	r2,zero,2e2c <___vfprintf_internal_r+0x1de4>
    16a0:	df002783 	ldbu	fp,158(sp)
    16a4:	008011c4 	movi	r2,71
    16a8:	1445580e 	bge	r2,r17,2c0c <___vfprintf_internal_r+0x1bc4>
    16ac:	04000074 	movhi	r16,1
    16b0:	843eed04 	addi	r16,r16,-1100
    16b4:	00c000c4 	movi	r3,3
    16b8:	00bfdfc4 	movi	r2,-129
    16bc:	d8c02915 	stw	r3,164(sp)
    16c0:	90a4703a 	and	r18,r18,r2
    16c4:	d8c02b15 	stw	r3,172(sp)
    16c8:	d8002a15 	stw	zero,168(sp)
    16cc:	d8003215 	stw	zero,200(sp)
    16d0:	00003a06 	br	17bc <___vfprintf_internal_r+0x774>
    16d4:	84000214 	ori	r16,r16,8
    16d8:	ac400007 	ldb	r17,0(r21)
    16dc:	003ebc06 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    16e0:	8025883a 	mov	r18,r16
    16e4:	dc002903 	ldbu	r16,164(sp)
    16e8:	e011883a 	mov	r8,fp
    16ec:	84003fcc 	andi	r16,r16,255
    16f0:	8007001e 	bne	r16,zero,32f4 <___vfprintf_internal_r+0x22ac>
    16f4:	94800414 	ori	r18,r18,16
    16f8:	9080080c 	andi	r2,r18,32
    16fc:	1002fa26 	beq	r2,zero,22e8 <___vfprintf_internal_r+0x12a0>
    1700:	d9002e17 	ldw	r4,184(sp)
    1704:	d9402a17 	ldw	r5,168(sp)
    1708:	d8002785 	stb	zero,158(sp)
    170c:	20800204 	addi	r2,r4,8
    1710:	24c00017 	ldw	r19,0(r4)
    1714:	25800117 	ldw	r22,4(r4)
    1718:	2804b116 	blt	r5,zero,29e0 <___vfprintf_internal_r+0x1998>
    171c:	013fdfc4 	movi	r4,-129
    1720:	9d86b03a 	or	r3,r19,r22
    1724:	d8802e15 	stw	r2,184(sp)
    1728:	9124703a 	and	r18,r18,r4
    172c:	1802fb1e 	bne	r3,zero,231c <___vfprintf_internal_r+0x12d4>
    1730:	d8c02a17 	ldw	r3,168(sp)
    1734:	0039883a 	mov	fp,zero
    1738:	1805e526 	beq	r3,zero,2ed0 <___vfprintf_internal_r+0x1e88>
    173c:	0027883a 	mov	r19,zero
    1740:	002d883a 	mov	r22,zero
    1744:	dc001e04 	addi	r16,sp,120
    1748:	9806d0fa 	srli	r3,r19,3
    174c:	b008977a 	slli	r4,r22,29
    1750:	b02cd0fa 	srli	r22,r22,3
    1754:	9cc001cc 	andi	r19,r19,7
    1758:	98800c04 	addi	r2,r19,48
    175c:	843fffc4 	addi	r16,r16,-1
    1760:	20e6b03a 	or	r19,r4,r3
    1764:	80800005 	stb	r2,0(r16)
    1768:	9d86b03a 	or	r3,r19,r22
    176c:	183ff61e 	bne	r3,zero,1748 <__alt_exception_stack_pointer+0xf8001748>
    1770:	90c0004c 	andi	r3,r18,1
    1774:	18014126 	beq	r3,zero,1c7c <___vfprintf_internal_r+0xc34>
    1778:	10803fcc 	andi	r2,r2,255
    177c:	1080201c 	xori	r2,r2,128
    1780:	10bfe004 	addi	r2,r2,-128
    1784:	00c00c04 	movi	r3,48
    1788:	10c13c26 	beq	r2,r3,1c7c <___vfprintf_internal_r+0xc34>
    178c:	80ffffc5 	stb	r3,-1(r16)
    1790:	d8c02817 	ldw	r3,160(sp)
    1794:	80bfffc4 	addi	r2,r16,-1
    1798:	1021883a 	mov	r16,r2
    179c:	1887c83a 	sub	r3,r3,r2
    17a0:	d8c02b15 	stw	r3,172(sp)
    17a4:	d8802b17 	ldw	r2,172(sp)
    17a8:	d9002a17 	ldw	r4,168(sp)
    17ac:	1100010e 	bge	r2,r4,17b4 <___vfprintf_internal_r+0x76c>
    17b0:	2005883a 	mov	r2,r4
    17b4:	d8802915 	stw	r2,164(sp)
    17b8:	d8003215 	stw	zero,200(sp)
    17bc:	e7003fcc 	andi	fp,fp,255
    17c0:	e700201c 	xori	fp,fp,128
    17c4:	e73fe004 	addi	fp,fp,-128
    17c8:	e0000326 	beq	fp,zero,17d8 <___vfprintf_internal_r+0x790>
    17cc:	d8c02917 	ldw	r3,164(sp)
    17d0:	18c00044 	addi	r3,r3,1
    17d4:	d8c02915 	stw	r3,164(sp)
    17d8:	90c0008c 	andi	r3,r18,2
    17dc:	d8c02c15 	stw	r3,176(sp)
    17e0:	18000326 	beq	r3,zero,17f0 <___vfprintf_internal_r+0x7a8>
    17e4:	d8c02917 	ldw	r3,164(sp)
    17e8:	18c00084 	addi	r3,r3,2
    17ec:	d8c02915 	stw	r3,164(sp)
    17f0:	90c0210c 	andi	r3,r18,132
    17f4:	d8c03015 	stw	r3,192(sp)
    17f8:	1801c51e 	bne	r3,zero,1f10 <___vfprintf_internal_r+0xec8>
    17fc:	d9003117 	ldw	r4,196(sp)
    1800:	d8c02917 	ldw	r3,164(sp)
    1804:	20e7c83a 	sub	r19,r4,r3
    1808:	04c1c10e 	bge	zero,r19,1f10 <___vfprintf_internal_r+0xec8>
    180c:	02400404 	movi	r9,16
    1810:	d8c02017 	ldw	r3,128(sp)
    1814:	d8801f17 	ldw	r2,124(sp)
    1818:	4cc52f0e 	bge	r9,r19,2cd8 <___vfprintf_internal_r+0x1c90>
    181c:	01400074 	movhi	r5,1
    1820:	297f0084 	addi	r5,r5,-1022
    1824:	dc403b15 	stw	r17,236(sp)
    1828:	d9403515 	stw	r5,212(sp)
    182c:	9823883a 	mov	r17,r19
    1830:	482d883a 	mov	r22,r9
    1834:	9027883a 	mov	r19,r18
    1838:	070001c4 	movi	fp,7
    183c:	8025883a 	mov	r18,r16
    1840:	dc002d17 	ldw	r16,180(sp)
    1844:	00000306 	br	1854 <___vfprintf_internal_r+0x80c>
    1848:	8c7ffc04 	addi	r17,r17,-16
    184c:	42000204 	addi	r8,r8,8
    1850:	b440130e 	bge	r22,r17,18a0 <___vfprintf_internal_r+0x858>
    1854:	01000074 	movhi	r4,1
    1858:	18c00404 	addi	r3,r3,16
    185c:	10800044 	addi	r2,r2,1
    1860:	213f0084 	addi	r4,r4,-1022
    1864:	41000015 	stw	r4,0(r8)
    1868:	45800115 	stw	r22,4(r8)
    186c:	d8c02015 	stw	r3,128(sp)
    1870:	d8801f15 	stw	r2,124(sp)
    1874:	e0bff40e 	bge	fp,r2,1848 <__alt_exception_stack_pointer+0xf8001848>
    1878:	d9801e04 	addi	r6,sp,120
    187c:	b80b883a 	mov	r5,r23
    1880:	8009883a 	mov	r4,r16
    1884:	00074d80 	call	74d8 <__sprint_r>
    1888:	103ef31e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    188c:	8c7ffc04 	addi	r17,r17,-16
    1890:	d8c02017 	ldw	r3,128(sp)
    1894:	d8801f17 	ldw	r2,124(sp)
    1898:	da000404 	addi	r8,sp,16
    189c:	b47fed16 	blt	r22,r17,1854 <__alt_exception_stack_pointer+0xf8001854>
    18a0:	9021883a 	mov	r16,r18
    18a4:	9825883a 	mov	r18,r19
    18a8:	8827883a 	mov	r19,r17
    18ac:	dc403b17 	ldw	r17,236(sp)
    18b0:	d9403517 	ldw	r5,212(sp)
    18b4:	98c7883a 	add	r3,r19,r3
    18b8:	10800044 	addi	r2,r2,1
    18bc:	41400015 	stw	r5,0(r8)
    18c0:	44c00115 	stw	r19,4(r8)
    18c4:	d8c02015 	stw	r3,128(sp)
    18c8:	d8801f15 	stw	r2,124(sp)
    18cc:	010001c4 	movi	r4,7
    18d0:	2082c516 	blt	r4,r2,23e8 <___vfprintf_internal_r+0x13a0>
    18d4:	df002787 	ldb	fp,158(sp)
    18d8:	42000204 	addi	r8,r8,8
    18dc:	e0000c26 	beq	fp,zero,1910 <___vfprintf_internal_r+0x8c8>
    18e0:	d8801f17 	ldw	r2,124(sp)
    18e4:	d9002784 	addi	r4,sp,158
    18e8:	18c00044 	addi	r3,r3,1
    18ec:	10800044 	addi	r2,r2,1
    18f0:	41000015 	stw	r4,0(r8)
    18f4:	01000044 	movi	r4,1
    18f8:	41000115 	stw	r4,4(r8)
    18fc:	d8c02015 	stw	r3,128(sp)
    1900:	d8801f15 	stw	r2,124(sp)
    1904:	010001c4 	movi	r4,7
    1908:	20825e16 	blt	r4,r2,2284 <___vfprintf_internal_r+0x123c>
    190c:	42000204 	addi	r8,r8,8
    1910:	d8802c17 	ldw	r2,176(sp)
    1914:	10000c26 	beq	r2,zero,1948 <___vfprintf_internal_r+0x900>
    1918:	d8801f17 	ldw	r2,124(sp)
    191c:	d9002704 	addi	r4,sp,156
    1920:	18c00084 	addi	r3,r3,2
    1924:	10800044 	addi	r2,r2,1
    1928:	41000015 	stw	r4,0(r8)
    192c:	01000084 	movi	r4,2
    1930:	41000115 	stw	r4,4(r8)
    1934:	d8c02015 	stw	r3,128(sp)
    1938:	d8801f15 	stw	r2,124(sp)
    193c:	010001c4 	movi	r4,7
    1940:	20825816 	blt	r4,r2,22a4 <___vfprintf_internal_r+0x125c>
    1944:	42000204 	addi	r8,r8,8
    1948:	d9003017 	ldw	r4,192(sp)
    194c:	00802004 	movi	r2,128
    1950:	2081bb26 	beq	r4,r2,2040 <___vfprintf_internal_r+0xff8>
    1954:	d9402a17 	ldw	r5,168(sp)
    1958:	d8802b17 	ldw	r2,172(sp)
    195c:	28adc83a 	sub	r22,r5,r2
    1960:	0580310e 	bge	zero,r22,1a28 <___vfprintf_internal_r+0x9e0>
    1964:	07000404 	movi	fp,16
    1968:	d8801f17 	ldw	r2,124(sp)
    196c:	e584360e 	bge	fp,r22,2a48 <___vfprintf_internal_r+0x1a00>
    1970:	01400074 	movhi	r5,1
    1974:	297efc84 	addi	r5,r5,-1038
    1978:	dc402a15 	stw	r17,168(sp)
    197c:	d9402c15 	stw	r5,176(sp)
    1980:	b023883a 	mov	r17,r22
    1984:	04c001c4 	movi	r19,7
    1988:	a82d883a 	mov	r22,r21
    198c:	902b883a 	mov	r21,r18
    1990:	8025883a 	mov	r18,r16
    1994:	dc002d17 	ldw	r16,180(sp)
    1998:	00000306 	br	19a8 <___vfprintf_internal_r+0x960>
    199c:	8c7ffc04 	addi	r17,r17,-16
    19a0:	42000204 	addi	r8,r8,8
    19a4:	e440110e 	bge	fp,r17,19ec <___vfprintf_internal_r+0x9a4>
    19a8:	18c00404 	addi	r3,r3,16
    19ac:	10800044 	addi	r2,r2,1
    19b0:	45000015 	stw	r20,0(r8)
    19b4:	47000115 	stw	fp,4(r8)
    19b8:	d8c02015 	stw	r3,128(sp)
    19bc:	d8801f15 	stw	r2,124(sp)
    19c0:	98bff60e 	bge	r19,r2,199c <__alt_exception_stack_pointer+0xf800199c>
    19c4:	d9801e04 	addi	r6,sp,120
    19c8:	b80b883a 	mov	r5,r23
    19cc:	8009883a 	mov	r4,r16
    19d0:	00074d80 	call	74d8 <__sprint_r>
    19d4:	103ea01e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    19d8:	8c7ffc04 	addi	r17,r17,-16
    19dc:	d8c02017 	ldw	r3,128(sp)
    19e0:	d8801f17 	ldw	r2,124(sp)
    19e4:	da000404 	addi	r8,sp,16
    19e8:	e47fef16 	blt	fp,r17,19a8 <__alt_exception_stack_pointer+0xf80019a8>
    19ec:	9021883a 	mov	r16,r18
    19f0:	a825883a 	mov	r18,r21
    19f4:	b02b883a 	mov	r21,r22
    19f8:	882d883a 	mov	r22,r17
    19fc:	dc402a17 	ldw	r17,168(sp)
    1a00:	d9002c17 	ldw	r4,176(sp)
    1a04:	1d87883a 	add	r3,r3,r22
    1a08:	10800044 	addi	r2,r2,1
    1a0c:	41000015 	stw	r4,0(r8)
    1a10:	45800115 	stw	r22,4(r8)
    1a14:	d8c02015 	stw	r3,128(sp)
    1a18:	d8801f15 	stw	r2,124(sp)
    1a1c:	010001c4 	movi	r4,7
    1a20:	20821016 	blt	r4,r2,2264 <___vfprintf_internal_r+0x121c>
    1a24:	42000204 	addi	r8,r8,8
    1a28:	9080400c 	andi	r2,r18,256
    1a2c:	10013a1e 	bne	r2,zero,1f18 <___vfprintf_internal_r+0xed0>
    1a30:	d9402b17 	ldw	r5,172(sp)
    1a34:	d8801f17 	ldw	r2,124(sp)
    1a38:	44000015 	stw	r16,0(r8)
    1a3c:	1947883a 	add	r3,r3,r5
    1a40:	10800044 	addi	r2,r2,1
    1a44:	41400115 	stw	r5,4(r8)
    1a48:	d8c02015 	stw	r3,128(sp)
    1a4c:	d8801f15 	stw	r2,124(sp)
    1a50:	010001c4 	movi	r4,7
    1a54:	2081f516 	blt	r4,r2,222c <___vfprintf_internal_r+0x11e4>
    1a58:	42000204 	addi	r8,r8,8
    1a5c:	9480010c 	andi	r18,r18,4
    1a60:	90003226 	beq	r18,zero,1b2c <___vfprintf_internal_r+0xae4>
    1a64:	d9403117 	ldw	r5,196(sp)
    1a68:	d8802917 	ldw	r2,164(sp)
    1a6c:	28a1c83a 	sub	r16,r5,r2
    1a70:	04002e0e 	bge	zero,r16,1b2c <___vfprintf_internal_r+0xae4>
    1a74:	04400404 	movi	r17,16
    1a78:	d8801f17 	ldw	r2,124(sp)
    1a7c:	8c04c40e 	bge	r17,r16,2d90 <___vfprintf_internal_r+0x1d48>
    1a80:	01400074 	movhi	r5,1
    1a84:	297f0084 	addi	r5,r5,-1022
    1a88:	d9403515 	stw	r5,212(sp)
    1a8c:	048001c4 	movi	r18,7
    1a90:	dcc02d17 	ldw	r19,180(sp)
    1a94:	00000306 	br	1aa4 <___vfprintf_internal_r+0xa5c>
    1a98:	843ffc04 	addi	r16,r16,-16
    1a9c:	42000204 	addi	r8,r8,8
    1aa0:	8c00130e 	bge	r17,r16,1af0 <___vfprintf_internal_r+0xaa8>
    1aa4:	01000074 	movhi	r4,1
    1aa8:	18c00404 	addi	r3,r3,16
    1aac:	10800044 	addi	r2,r2,1
    1ab0:	213f0084 	addi	r4,r4,-1022
    1ab4:	41000015 	stw	r4,0(r8)
    1ab8:	44400115 	stw	r17,4(r8)
    1abc:	d8c02015 	stw	r3,128(sp)
    1ac0:	d8801f15 	stw	r2,124(sp)
    1ac4:	90bff40e 	bge	r18,r2,1a98 <__alt_exception_stack_pointer+0xf8001a98>
    1ac8:	d9801e04 	addi	r6,sp,120
    1acc:	b80b883a 	mov	r5,r23
    1ad0:	9809883a 	mov	r4,r19
    1ad4:	00074d80 	call	74d8 <__sprint_r>
    1ad8:	103e5f1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    1adc:	843ffc04 	addi	r16,r16,-16
    1ae0:	d8c02017 	ldw	r3,128(sp)
    1ae4:	d8801f17 	ldw	r2,124(sp)
    1ae8:	da000404 	addi	r8,sp,16
    1aec:	8c3fed16 	blt	r17,r16,1aa4 <__alt_exception_stack_pointer+0xf8001aa4>
    1af0:	d9403517 	ldw	r5,212(sp)
    1af4:	1c07883a 	add	r3,r3,r16
    1af8:	10800044 	addi	r2,r2,1
    1afc:	41400015 	stw	r5,0(r8)
    1b00:	44000115 	stw	r16,4(r8)
    1b04:	d8c02015 	stw	r3,128(sp)
    1b08:	d8801f15 	stw	r2,124(sp)
    1b0c:	010001c4 	movi	r4,7
    1b10:	2080060e 	bge	r4,r2,1b2c <___vfprintf_internal_r+0xae4>
    1b14:	d9002d17 	ldw	r4,180(sp)
    1b18:	d9801e04 	addi	r6,sp,120
    1b1c:	b80b883a 	mov	r5,r23
    1b20:	00074d80 	call	74d8 <__sprint_r>
    1b24:	103e4c1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    1b28:	d8c02017 	ldw	r3,128(sp)
    1b2c:	d8803117 	ldw	r2,196(sp)
    1b30:	d9002917 	ldw	r4,164(sp)
    1b34:	1100010e 	bge	r2,r4,1b3c <___vfprintf_internal_r+0xaf4>
    1b38:	2005883a 	mov	r2,r4
    1b3c:	d9402f17 	ldw	r5,188(sp)
    1b40:	288b883a 	add	r5,r5,r2
    1b44:	d9402f15 	stw	r5,188(sp)
    1b48:	1801c01e 	bne	r3,zero,224c <___vfprintf_internal_r+0x1204>
    1b4c:	a8800007 	ldb	r2,0(r21)
    1b50:	d8001f15 	stw	zero,124(sp)
    1b54:	da000404 	addi	r8,sp,16
    1b58:	103d751e 	bne	r2,zero,1130 <__alt_exception_stack_pointer+0xf8001130>
    1b5c:	a823883a 	mov	r17,r21
    1b60:	003d8b06 	br	1190 <__alt_exception_stack_pointer+0xf8001190>
    1b64:	8025883a 	mov	r18,r16
    1b68:	dc002903 	ldbu	r16,164(sp)
    1b6c:	e011883a 	mov	r8,fp
    1b70:	84003fcc 	andi	r16,r16,255
    1b74:	8005e51e 	bne	r16,zero,330c <___vfprintf_internal_r+0x22c4>
    1b78:	94800414 	ori	r18,r18,16
    1b7c:	9080080c 	andi	r2,r18,32
    1b80:	10022b26 	beq	r2,zero,2430 <___vfprintf_internal_r+0x13e8>
    1b84:	d9002e17 	ldw	r4,184(sp)
    1b88:	d9402a17 	ldw	r5,168(sp)
    1b8c:	d8002785 	stb	zero,158(sp)
    1b90:	20c00204 	addi	r3,r4,8
    1b94:	24c00017 	ldw	r19,0(r4)
    1b98:	25800117 	ldw	r22,4(r4)
    1b9c:	28042e16 	blt	r5,zero,2c58 <___vfprintf_internal_r+0x1c10>
    1ba0:	013fdfc4 	movi	r4,-129
    1ba4:	9d84b03a 	or	r2,r19,r22
    1ba8:	d8c02e15 	stw	r3,184(sp)
    1bac:	9124703a 	and	r18,r18,r4
    1bb0:	0039883a 	mov	fp,zero
    1bb4:	103e801e 	bne	r2,zero,15b8 <__alt_exception_stack_pointer+0xf80015b8>
    1bb8:	d9002a17 	ldw	r4,168(sp)
    1bbc:	2002e01e 	bne	r4,zero,2740 <___vfprintf_internal_r+0x16f8>
    1bc0:	d8002a15 	stw	zero,168(sp)
    1bc4:	d8002b15 	stw	zero,172(sp)
    1bc8:	dc001e04 	addi	r16,sp,120
    1bcc:	003ef506 	br	17a4 <__alt_exception_stack_pointer+0xf80017a4>
    1bd0:	8025883a 	mov	r18,r16
    1bd4:	dc002903 	ldbu	r16,164(sp)
    1bd8:	e011883a 	mov	r8,fp
    1bdc:	84003fcc 	andi	r16,r16,255
    1be0:	8005ba1e 	bne	r16,zero,32cc <___vfprintf_internal_r+0x2284>
    1be4:	01000074 	movhi	r4,1
    1be8:	213ef004 	addi	r4,r4,-1088
    1bec:	d9003915 	stw	r4,228(sp)
    1bf0:	9080080c 	andi	r2,r18,32
    1bf4:	10006126 	beq	r2,zero,1d7c <___vfprintf_internal_r+0xd34>
    1bf8:	d9402e17 	ldw	r5,184(sp)
    1bfc:	2cc00017 	ldw	r19,0(r5)
    1c00:	2d800117 	ldw	r22,4(r5)
    1c04:	29400204 	addi	r5,r5,8
    1c08:	d9402e15 	stw	r5,184(sp)
    1c0c:	9080004c 	andi	r2,r18,1
    1c10:	1001ac26 	beq	r2,zero,22c4 <___vfprintf_internal_r+0x127c>
    1c14:	9d84b03a 	or	r2,r19,r22
    1c18:	10038526 	beq	r2,zero,2a30 <___vfprintf_internal_r+0x19e8>
    1c1c:	d8c02a17 	ldw	r3,168(sp)
    1c20:	00800c04 	movi	r2,48
    1c24:	d8802705 	stb	r2,156(sp)
    1c28:	dc402745 	stb	r17,157(sp)
    1c2c:	d8002785 	stb	zero,158(sp)
    1c30:	90800094 	ori	r2,r18,2
    1c34:	18047916 	blt	r3,zero,2e1c <___vfprintf_internal_r+0x1dd4>
    1c38:	00bfdfc4 	movi	r2,-129
    1c3c:	90a4703a 	and	r18,r18,r2
    1c40:	94800094 	ori	r18,r18,2
    1c44:	0039883a 	mov	fp,zero
    1c48:	d9003917 	ldw	r4,228(sp)
    1c4c:	dc001e04 	addi	r16,sp,120
    1c50:	988003cc 	andi	r2,r19,15
    1c54:	b006973a 	slli	r3,r22,28
    1c58:	2085883a 	add	r2,r4,r2
    1c5c:	9826d13a 	srli	r19,r19,4
    1c60:	10800003 	ldbu	r2,0(r2)
    1c64:	b02cd13a 	srli	r22,r22,4
    1c68:	843fffc4 	addi	r16,r16,-1
    1c6c:	1ce6b03a 	or	r19,r3,r19
    1c70:	80800005 	stb	r2,0(r16)
    1c74:	9d84b03a 	or	r2,r19,r22
    1c78:	103ff51e 	bne	r2,zero,1c50 <__alt_exception_stack_pointer+0xf8001c50>
    1c7c:	d8c02817 	ldw	r3,160(sp)
    1c80:	1c07c83a 	sub	r3,r3,r16
    1c84:	d8c02b15 	stw	r3,172(sp)
    1c88:	003ec606 	br	17a4 <__alt_exception_stack_pointer+0xf80017a4>
    1c8c:	8025883a 	mov	r18,r16
    1c90:	dc002903 	ldbu	r16,164(sp)
    1c94:	e011883a 	mov	r8,fp
    1c98:	84003fcc 	andi	r16,r16,255
    1c9c:	803e9626 	beq	r16,zero,16f8 <__alt_exception_stack_pointer+0xf80016f8>
    1ca0:	d8c02b03 	ldbu	r3,172(sp)
    1ca4:	d8c02785 	stb	r3,158(sp)
    1ca8:	003e9306 	br	16f8 <__alt_exception_stack_pointer+0xf80016f8>
    1cac:	00c00044 	movi	r3,1
    1cb0:	d8c02905 	stb	r3,164(sp)
    1cb4:	00c00ac4 	movi	r3,43
    1cb8:	d8c02b05 	stb	r3,172(sp)
    1cbc:	ac400007 	ldb	r17,0(r21)
    1cc0:	003d4306 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1cc4:	84000814 	ori	r16,r16,32
    1cc8:	ac400007 	ldb	r17,0(r21)
    1ccc:	003d4006 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1cd0:	d8802e17 	ldw	r2,184(sp)
    1cd4:	8025883a 	mov	r18,r16
    1cd8:	d8002785 	stb	zero,158(sp)
    1cdc:	14000017 	ldw	r16,0(r2)
    1ce0:	e011883a 	mov	r8,fp
    1ce4:	14c00104 	addi	r19,r2,4
    1ce8:	80042d26 	beq	r16,zero,2da0 <___vfprintf_internal_r+0x1d58>
    1cec:	d8c02a17 	ldw	r3,168(sp)
    1cf0:	1803e416 	blt	r3,zero,2c84 <___vfprintf_internal_r+0x1c3c>
    1cf4:	180d883a 	mov	r6,r3
    1cf8:	000b883a 	mov	r5,zero
    1cfc:	8009883a 	mov	r4,r16
    1d00:	df003d15 	stw	fp,244(sp)
    1d04:	0005cac0 	call	5cac <memchr>
    1d08:	da003d17 	ldw	r8,244(sp)
    1d0c:	10046826 	beq	r2,zero,2eb0 <___vfprintf_internal_r+0x1e68>
    1d10:	1405c83a 	sub	r2,r2,r16
    1d14:	d8802b15 	stw	r2,172(sp)
    1d18:	1003e016 	blt	r2,zero,2c9c <___vfprintf_internal_r+0x1c54>
    1d1c:	df002783 	ldbu	fp,158(sp)
    1d20:	d8802915 	stw	r2,164(sp)
    1d24:	dcc02e15 	stw	r19,184(sp)
    1d28:	d8002a15 	stw	zero,168(sp)
    1d2c:	d8003215 	stw	zero,200(sp)
    1d30:	003ea206 	br	17bc <__alt_exception_stack_pointer+0xf80017bc>
    1d34:	8025883a 	mov	r18,r16
    1d38:	dc002903 	ldbu	r16,164(sp)
    1d3c:	e011883a 	mov	r8,fp
    1d40:	84003fcc 	andi	r16,r16,255
    1d44:	803f8d26 	beq	r16,zero,1b7c <__alt_exception_stack_pointer+0xf8001b7c>
    1d48:	d8c02b03 	ldbu	r3,172(sp)
    1d4c:	d8c02785 	stb	r3,158(sp)
    1d50:	003f8a06 	br	1b7c <__alt_exception_stack_pointer+0xf8001b7c>
    1d54:	8025883a 	mov	r18,r16
    1d58:	dc002903 	ldbu	r16,164(sp)
    1d5c:	e011883a 	mov	r8,fp
    1d60:	84003fcc 	andi	r16,r16,255
    1d64:	8005661e 	bne	r16,zero,3300 <___vfprintf_internal_r+0x22b8>
    1d68:	01000074 	movhi	r4,1
    1d6c:	213ef504 	addi	r4,r4,-1068
    1d70:	d9003915 	stw	r4,228(sp)
    1d74:	9080080c 	andi	r2,r18,32
    1d78:	103f9f1e 	bne	r2,zero,1bf8 <__alt_exception_stack_pointer+0xf8001bf8>
    1d7c:	9080040c 	andi	r2,r18,16
    1d80:	1002eb26 	beq	r2,zero,2930 <___vfprintf_internal_r+0x18e8>
    1d84:	d8802e17 	ldw	r2,184(sp)
    1d88:	002d883a 	mov	r22,zero
    1d8c:	14c00017 	ldw	r19,0(r2)
    1d90:	10800104 	addi	r2,r2,4
    1d94:	d8802e15 	stw	r2,184(sp)
    1d98:	003f9c06 	br	1c0c <__alt_exception_stack_pointer+0xf8001c0c>
    1d9c:	d8802b07 	ldb	r2,172(sp)
    1da0:	1002e11e 	bne	r2,zero,2928 <___vfprintf_internal_r+0x18e0>
    1da4:	00c00044 	movi	r3,1
    1da8:	d8c02905 	stb	r3,164(sp)
    1dac:	00c00804 	movi	r3,32
    1db0:	d8c02b05 	stb	r3,172(sp)
    1db4:	ac400007 	ldb	r17,0(r21)
    1db8:	003d0506 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1dbc:	84000054 	ori	r16,r16,1
    1dc0:	ac400007 	ldb	r17,0(r21)
    1dc4:	003d0206 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1dc8:	8025883a 	mov	r18,r16
    1dcc:	dc002903 	ldbu	r16,164(sp)
    1dd0:	e011883a 	mov	r8,fp
    1dd4:	84003fcc 	andi	r16,r16,255
    1dd8:	803de726 	beq	r16,zero,1578 <__alt_exception_stack_pointer+0xf8001578>
    1ddc:	d8c02b03 	ldbu	r3,172(sp)
    1de0:	d8c02785 	stb	r3,158(sp)
    1de4:	003de406 	br	1578 <__alt_exception_stack_pointer+0xf8001578>
    1de8:	84001014 	ori	r16,r16,64
    1dec:	ac400007 	ldb	r17,0(r21)
    1df0:	003cf706 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1df4:	ac400007 	ldb	r17,0(r21)
    1df8:	00801b04 	movi	r2,108
    1dfc:	88838f26 	beq	r17,r2,2c3c <___vfprintf_internal_r+0x1bf4>
    1e00:	84000414 	ori	r16,r16,16
    1e04:	003cf206 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    1e08:	8025883a 	mov	r18,r16
    1e0c:	dc002903 	ldbu	r16,164(sp)
    1e10:	e011883a 	mov	r8,fp
    1e14:	84003fcc 	andi	r16,r16,255
    1e18:	80053f1e 	bne	r16,zero,3318 <___vfprintf_internal_r+0x22d0>
    1e1c:	9080080c 	andi	r2,r18,32
    1e20:	1002d226 	beq	r2,zero,296c <___vfprintf_internal_r+0x1924>
    1e24:	d9002e17 	ldw	r4,184(sp)
    1e28:	d9402f17 	ldw	r5,188(sp)
    1e2c:	20800017 	ldw	r2,0(r4)
    1e30:	2807d7fa 	srai	r3,r5,31
    1e34:	21000104 	addi	r4,r4,4
    1e38:	d9002e15 	stw	r4,184(sp)
    1e3c:	11400015 	stw	r5,0(r2)
    1e40:	10c00115 	stw	r3,4(r2)
    1e44:	003cb806 	br	1128 <__alt_exception_stack_pointer+0xf8001128>
    1e48:	d8c02e17 	ldw	r3,184(sp)
    1e4c:	d9002e17 	ldw	r4,184(sp)
    1e50:	8025883a 	mov	r18,r16
    1e54:	18800017 	ldw	r2,0(r3)
    1e58:	21000104 	addi	r4,r4,4
    1e5c:	00c00044 	movi	r3,1
    1e60:	e011883a 	mov	r8,fp
    1e64:	d8c02915 	stw	r3,164(sp)
    1e68:	d8002785 	stb	zero,158(sp)
    1e6c:	d8801405 	stb	r2,80(sp)
    1e70:	d9002e15 	stw	r4,184(sp)
    1e74:	d8c02b15 	stw	r3,172(sp)
    1e78:	d8002a15 	stw	zero,168(sp)
    1e7c:	d8003215 	stw	zero,200(sp)
    1e80:	dc001404 	addi	r16,sp,80
    1e84:	0039883a 	mov	fp,zero
    1e88:	003e5306 	br	17d8 <__alt_exception_stack_pointer+0xf80017d8>
    1e8c:	01000074 	movhi	r4,1
    1e90:	213ef504 	addi	r4,r4,-1068
    1e94:	0039883a 	mov	fp,zero
    1e98:	d9003915 	stw	r4,228(sp)
    1e9c:	04401e04 	movi	r17,120
    1ea0:	003f6906 	br	1c48 <__alt_exception_stack_pointer+0xf8001c48>
    1ea4:	8025883a 	mov	r18,r16
    1ea8:	dc002903 	ldbu	r16,164(sp)
    1eac:	e011883a 	mov	r8,fp
    1eb0:	84003fcc 	andi	r16,r16,255
    1eb4:	8005081e 	bne	r16,zero,32d8 <___vfprintf_internal_r+0x2290>
    1eb8:	883d6126 	beq	r17,zero,1440 <__alt_exception_stack_pointer+0xf8001440>
    1ebc:	00c00044 	movi	r3,1
    1ec0:	d8c02915 	stw	r3,164(sp)
    1ec4:	dc401405 	stb	r17,80(sp)
    1ec8:	d8002785 	stb	zero,158(sp)
    1ecc:	003fe906 	br	1e74 <__alt_exception_stack_pointer+0xf8001e74>
    1ed0:	01400074 	movhi	r5,1
    1ed4:	297ef504 	addi	r5,r5,-1068
    1ed8:	d9403915 	stw	r5,228(sp)
    1edc:	d8c02e15 	stw	r3,184(sp)
    1ee0:	1025883a 	mov	r18,r2
    1ee4:	04401e04 	movi	r17,120
    1ee8:	9d84b03a 	or	r2,r19,r22
    1eec:	1000fc1e 	bne	r2,zero,22e0 <___vfprintf_internal_r+0x1298>
    1ef0:	0039883a 	mov	fp,zero
    1ef4:	00800084 	movi	r2,2
    1ef8:	10803fcc 	andi	r2,r2,255
    1efc:	00c00044 	movi	r3,1
    1f00:	10c20f26 	beq	r2,r3,2740 <___vfprintf_internal_r+0x16f8>
    1f04:	00c00084 	movi	r3,2
    1f08:	10fd3326 	beq	r2,r3,13d8 <__alt_exception_stack_pointer+0xf80013d8>
    1f0c:	003e0b06 	br	173c <__alt_exception_stack_pointer+0xf800173c>
    1f10:	d8c02017 	ldw	r3,128(sp)
    1f14:	003e7106 	br	18dc <__alt_exception_stack_pointer+0xf80018dc>
    1f18:	00801944 	movi	r2,101
    1f1c:	14407e0e 	bge	r2,r17,2118 <___vfprintf_internal_r+0x10d0>
    1f20:	d9003617 	ldw	r4,216(sp)
    1f24:	d9403817 	ldw	r5,224(sp)
    1f28:	000d883a 	mov	r6,zero
    1f2c:	000f883a 	mov	r7,zero
    1f30:	d8c03c15 	stw	r3,240(sp)
    1f34:	da003d15 	stw	r8,244(sp)
    1f38:	000bde40 	call	bde4 <__eqdf2>
    1f3c:	d8c03c17 	ldw	r3,240(sp)
    1f40:	da003d17 	ldw	r8,244(sp)
    1f44:	1000f71e 	bne	r2,zero,2324 <___vfprintf_internal_r+0x12dc>
    1f48:	d8801f17 	ldw	r2,124(sp)
    1f4c:	01000074 	movhi	r4,1
    1f50:	213efc04 	addi	r4,r4,-1040
    1f54:	18c00044 	addi	r3,r3,1
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	41000015 	stw	r4,0(r8)
    1f60:	01000044 	movi	r4,1
    1f64:	41000115 	stw	r4,4(r8)
    1f68:	d8c02015 	stw	r3,128(sp)
    1f6c:	d8801f15 	stw	r2,124(sp)
    1f70:	010001c4 	movi	r4,7
    1f74:	2082b816 	blt	r4,r2,2a58 <___vfprintf_internal_r+0x1a10>
    1f78:	42000204 	addi	r8,r8,8
    1f7c:	d8802617 	ldw	r2,152(sp)
    1f80:	d9403317 	ldw	r5,204(sp)
    1f84:	11400216 	blt	r2,r5,1f90 <___vfprintf_internal_r+0xf48>
    1f88:	9080004c 	andi	r2,r18,1
    1f8c:	103eb326 	beq	r2,zero,1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    1f90:	d8803717 	ldw	r2,220(sp)
    1f94:	d9003417 	ldw	r4,208(sp)
    1f98:	d9403717 	ldw	r5,220(sp)
    1f9c:	1887883a 	add	r3,r3,r2
    1fa0:	d8801f17 	ldw	r2,124(sp)
    1fa4:	41000015 	stw	r4,0(r8)
    1fa8:	41400115 	stw	r5,4(r8)
    1fac:	10800044 	addi	r2,r2,1
    1fb0:	d8c02015 	stw	r3,128(sp)
    1fb4:	d8801f15 	stw	r2,124(sp)
    1fb8:	010001c4 	movi	r4,7
    1fbc:	20832916 	blt	r4,r2,2c64 <___vfprintf_internal_r+0x1c1c>
    1fc0:	42000204 	addi	r8,r8,8
    1fc4:	d8803317 	ldw	r2,204(sp)
    1fc8:	143fffc4 	addi	r16,r2,-1
    1fcc:	043ea30e 	bge	zero,r16,1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    1fd0:	04400404 	movi	r17,16
    1fd4:	d8801f17 	ldw	r2,124(sp)
    1fd8:	8c00880e 	bge	r17,r16,21fc <___vfprintf_internal_r+0x11b4>
    1fdc:	01400074 	movhi	r5,1
    1fe0:	297efc84 	addi	r5,r5,-1038
    1fe4:	d9402c15 	stw	r5,176(sp)
    1fe8:	058001c4 	movi	r22,7
    1fec:	dcc02d17 	ldw	r19,180(sp)
    1ff0:	00000306 	br	2000 <___vfprintf_internal_r+0xfb8>
    1ff4:	42000204 	addi	r8,r8,8
    1ff8:	843ffc04 	addi	r16,r16,-16
    1ffc:	8c00820e 	bge	r17,r16,2208 <___vfprintf_internal_r+0x11c0>
    2000:	18c00404 	addi	r3,r3,16
    2004:	10800044 	addi	r2,r2,1
    2008:	45000015 	stw	r20,0(r8)
    200c:	44400115 	stw	r17,4(r8)
    2010:	d8c02015 	stw	r3,128(sp)
    2014:	d8801f15 	stw	r2,124(sp)
    2018:	b0bff60e 	bge	r22,r2,1ff4 <__alt_exception_stack_pointer+0xf8001ff4>
    201c:	d9801e04 	addi	r6,sp,120
    2020:	b80b883a 	mov	r5,r23
    2024:	9809883a 	mov	r4,r19
    2028:	00074d80 	call	74d8 <__sprint_r>
    202c:	103d0a1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2030:	d8c02017 	ldw	r3,128(sp)
    2034:	d8801f17 	ldw	r2,124(sp)
    2038:	da000404 	addi	r8,sp,16
    203c:	003fee06 	br	1ff8 <__alt_exception_stack_pointer+0xf8001ff8>
    2040:	d9403117 	ldw	r5,196(sp)
    2044:	d8802917 	ldw	r2,164(sp)
    2048:	28adc83a 	sub	r22,r5,r2
    204c:	05be410e 	bge	zero,r22,1954 <__alt_exception_stack_pointer+0xf8001954>
    2050:	07000404 	movi	fp,16
    2054:	d8801f17 	ldw	r2,124(sp)
    2058:	e5838f0e 	bge	fp,r22,2e98 <___vfprintf_internal_r+0x1e50>
    205c:	01400074 	movhi	r5,1
    2060:	297efc84 	addi	r5,r5,-1038
    2064:	dc403015 	stw	r17,192(sp)
    2068:	d9402c15 	stw	r5,176(sp)
    206c:	b023883a 	mov	r17,r22
    2070:	04c001c4 	movi	r19,7
    2074:	a82d883a 	mov	r22,r21
    2078:	902b883a 	mov	r21,r18
    207c:	8025883a 	mov	r18,r16
    2080:	dc002d17 	ldw	r16,180(sp)
    2084:	00000306 	br	2094 <___vfprintf_internal_r+0x104c>
    2088:	8c7ffc04 	addi	r17,r17,-16
    208c:	42000204 	addi	r8,r8,8
    2090:	e440110e 	bge	fp,r17,20d8 <___vfprintf_internal_r+0x1090>
    2094:	18c00404 	addi	r3,r3,16
    2098:	10800044 	addi	r2,r2,1
    209c:	45000015 	stw	r20,0(r8)
    20a0:	47000115 	stw	fp,4(r8)
    20a4:	d8c02015 	stw	r3,128(sp)
    20a8:	d8801f15 	stw	r2,124(sp)
    20ac:	98bff60e 	bge	r19,r2,2088 <__alt_exception_stack_pointer+0xf8002088>
    20b0:	d9801e04 	addi	r6,sp,120
    20b4:	b80b883a 	mov	r5,r23
    20b8:	8009883a 	mov	r4,r16
    20bc:	00074d80 	call	74d8 <__sprint_r>
    20c0:	103ce51e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    20c4:	8c7ffc04 	addi	r17,r17,-16
    20c8:	d8c02017 	ldw	r3,128(sp)
    20cc:	d8801f17 	ldw	r2,124(sp)
    20d0:	da000404 	addi	r8,sp,16
    20d4:	e47fef16 	blt	fp,r17,2094 <__alt_exception_stack_pointer+0xf8002094>
    20d8:	9021883a 	mov	r16,r18
    20dc:	a825883a 	mov	r18,r21
    20e0:	b02b883a 	mov	r21,r22
    20e4:	882d883a 	mov	r22,r17
    20e8:	dc403017 	ldw	r17,192(sp)
    20ec:	d9002c17 	ldw	r4,176(sp)
    20f0:	1d87883a 	add	r3,r3,r22
    20f4:	10800044 	addi	r2,r2,1
    20f8:	41000015 	stw	r4,0(r8)
    20fc:	45800115 	stw	r22,4(r8)
    2100:	d8c02015 	stw	r3,128(sp)
    2104:	d8801f15 	stw	r2,124(sp)
    2108:	010001c4 	movi	r4,7
    210c:	20818e16 	blt	r4,r2,2748 <___vfprintf_internal_r+0x1700>
    2110:	42000204 	addi	r8,r8,8
    2114:	003e0f06 	br	1954 <__alt_exception_stack_pointer+0xf8001954>
    2118:	d9403317 	ldw	r5,204(sp)
    211c:	00800044 	movi	r2,1
    2120:	18c00044 	addi	r3,r3,1
    2124:	1141530e 	bge	r2,r5,2674 <___vfprintf_internal_r+0x162c>
    2128:	dc401f17 	ldw	r17,124(sp)
    212c:	00800044 	movi	r2,1
    2130:	40800115 	stw	r2,4(r8)
    2134:	8c400044 	addi	r17,r17,1
    2138:	44000015 	stw	r16,0(r8)
    213c:	d8c02015 	stw	r3,128(sp)
    2140:	dc401f15 	stw	r17,124(sp)
    2144:	008001c4 	movi	r2,7
    2148:	14416b16 	blt	r2,r17,26f8 <___vfprintf_internal_r+0x16b0>
    214c:	42000204 	addi	r8,r8,8
    2150:	d8803717 	ldw	r2,220(sp)
    2154:	d9003417 	ldw	r4,208(sp)
    2158:	8c400044 	addi	r17,r17,1
    215c:	10c7883a 	add	r3,r2,r3
    2160:	40800115 	stw	r2,4(r8)
    2164:	41000015 	stw	r4,0(r8)
    2168:	d8c02015 	stw	r3,128(sp)
    216c:	dc401f15 	stw	r17,124(sp)
    2170:	008001c4 	movi	r2,7
    2174:	14416916 	blt	r2,r17,271c <___vfprintf_internal_r+0x16d4>
    2178:	45800204 	addi	r22,r8,8
    217c:	d9003617 	ldw	r4,216(sp)
    2180:	d9403817 	ldw	r5,224(sp)
    2184:	000d883a 	mov	r6,zero
    2188:	000f883a 	mov	r7,zero
    218c:	d8c03c15 	stw	r3,240(sp)
    2190:	000bde40 	call	bde4 <__eqdf2>
    2194:	d8c03c17 	ldw	r3,240(sp)
    2198:	1000bc26 	beq	r2,zero,248c <___vfprintf_internal_r+0x1444>
    219c:	d9403317 	ldw	r5,204(sp)
    21a0:	84000044 	addi	r16,r16,1
    21a4:	8c400044 	addi	r17,r17,1
    21a8:	28bfffc4 	addi	r2,r5,-1
    21ac:	1887883a 	add	r3,r3,r2
    21b0:	b0800115 	stw	r2,4(r22)
    21b4:	b4000015 	stw	r16,0(r22)
    21b8:	d8c02015 	stw	r3,128(sp)
    21bc:	dc401f15 	stw	r17,124(sp)
    21c0:	008001c4 	movi	r2,7
    21c4:	14414316 	blt	r2,r17,26d4 <___vfprintf_internal_r+0x168c>
    21c8:	b5800204 	addi	r22,r22,8
    21cc:	d9003a17 	ldw	r4,232(sp)
    21d0:	df0022c4 	addi	fp,sp,139
    21d4:	8c400044 	addi	r17,r17,1
    21d8:	20c7883a 	add	r3,r4,r3
    21dc:	b7000015 	stw	fp,0(r22)
    21e0:	b1000115 	stw	r4,4(r22)
    21e4:	d8c02015 	stw	r3,128(sp)
    21e8:	dc401f15 	stw	r17,124(sp)
    21ec:	008001c4 	movi	r2,7
    21f0:	14400e16 	blt	r2,r17,222c <___vfprintf_internal_r+0x11e4>
    21f4:	b2000204 	addi	r8,r22,8
    21f8:	003e1806 	br	1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    21fc:	01000074 	movhi	r4,1
    2200:	213efc84 	addi	r4,r4,-1038
    2204:	d9002c15 	stw	r4,176(sp)
    2208:	d9002c17 	ldw	r4,176(sp)
    220c:	1c07883a 	add	r3,r3,r16
    2210:	44000115 	stw	r16,4(r8)
    2214:	41000015 	stw	r4,0(r8)
    2218:	10800044 	addi	r2,r2,1
    221c:	d8c02015 	stw	r3,128(sp)
    2220:	d8801f15 	stw	r2,124(sp)
    2224:	010001c4 	movi	r4,7
    2228:	20be0b0e 	bge	r4,r2,1a58 <__alt_exception_stack_pointer+0xf8001a58>
    222c:	d9002d17 	ldw	r4,180(sp)
    2230:	d9801e04 	addi	r6,sp,120
    2234:	b80b883a 	mov	r5,r23
    2238:	00074d80 	call	74d8 <__sprint_r>
    223c:	103c861e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2240:	d8c02017 	ldw	r3,128(sp)
    2244:	da000404 	addi	r8,sp,16
    2248:	003e0406 	br	1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    224c:	d9002d17 	ldw	r4,180(sp)
    2250:	d9801e04 	addi	r6,sp,120
    2254:	b80b883a 	mov	r5,r23
    2258:	00074d80 	call	74d8 <__sprint_r>
    225c:	103e3b26 	beq	r2,zero,1b4c <__alt_exception_stack_pointer+0xf8001b4c>
    2260:	003c7d06 	br	1458 <__alt_exception_stack_pointer+0xf8001458>
    2264:	d9002d17 	ldw	r4,180(sp)
    2268:	d9801e04 	addi	r6,sp,120
    226c:	b80b883a 	mov	r5,r23
    2270:	00074d80 	call	74d8 <__sprint_r>
    2274:	103c781e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2278:	d8c02017 	ldw	r3,128(sp)
    227c:	da000404 	addi	r8,sp,16
    2280:	003de906 	br	1a28 <__alt_exception_stack_pointer+0xf8001a28>
    2284:	d9002d17 	ldw	r4,180(sp)
    2288:	d9801e04 	addi	r6,sp,120
    228c:	b80b883a 	mov	r5,r23
    2290:	00074d80 	call	74d8 <__sprint_r>
    2294:	103c701e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2298:	d8c02017 	ldw	r3,128(sp)
    229c:	da000404 	addi	r8,sp,16
    22a0:	003d9b06 	br	1910 <__alt_exception_stack_pointer+0xf8001910>
    22a4:	d9002d17 	ldw	r4,180(sp)
    22a8:	d9801e04 	addi	r6,sp,120
    22ac:	b80b883a 	mov	r5,r23
    22b0:	00074d80 	call	74d8 <__sprint_r>
    22b4:	103c681e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    22b8:	d8c02017 	ldw	r3,128(sp)
    22bc:	da000404 	addi	r8,sp,16
    22c0:	003da106 	br	1948 <__alt_exception_stack_pointer+0xf8001948>
    22c4:	d9402a17 	ldw	r5,168(sp)
    22c8:	d8002785 	stb	zero,158(sp)
    22cc:	283f0616 	blt	r5,zero,1ee8 <__alt_exception_stack_pointer+0xf8001ee8>
    22d0:	00ffdfc4 	movi	r3,-129
    22d4:	9d84b03a 	or	r2,r19,r22
    22d8:	90e4703a 	and	r18,r18,r3
    22dc:	103c3b26 	beq	r2,zero,13cc <__alt_exception_stack_pointer+0xf80013cc>
    22e0:	0039883a 	mov	fp,zero
    22e4:	003e5806 	br	1c48 <__alt_exception_stack_pointer+0xf8001c48>
    22e8:	9080040c 	andi	r2,r18,16
    22ec:	1001b326 	beq	r2,zero,29bc <___vfprintf_internal_r+0x1974>
    22f0:	d8c02e17 	ldw	r3,184(sp)
    22f4:	d9002a17 	ldw	r4,168(sp)
    22f8:	d8002785 	stb	zero,158(sp)
    22fc:	18800104 	addi	r2,r3,4
    2300:	1cc00017 	ldw	r19,0(r3)
    2304:	002d883a 	mov	r22,zero
    2308:	2001b516 	blt	r4,zero,29e0 <___vfprintf_internal_r+0x1998>
    230c:	00ffdfc4 	movi	r3,-129
    2310:	d8802e15 	stw	r2,184(sp)
    2314:	90e4703a 	and	r18,r18,r3
    2318:	983d0526 	beq	r19,zero,1730 <__alt_exception_stack_pointer+0xf8001730>
    231c:	0039883a 	mov	fp,zero
    2320:	003d0806 	br	1744 <__alt_exception_stack_pointer+0xf8001744>
    2324:	dc402617 	ldw	r17,152(sp)
    2328:	0441d30e 	bge	zero,r17,2a78 <___vfprintf_internal_r+0x1a30>
    232c:	dc403217 	ldw	r17,200(sp)
    2330:	d8803317 	ldw	r2,204(sp)
    2334:	1440010e 	bge	r2,r17,233c <___vfprintf_internal_r+0x12f4>
    2338:	1023883a 	mov	r17,r2
    233c:	04400a0e 	bge	zero,r17,2368 <___vfprintf_internal_r+0x1320>
    2340:	d8801f17 	ldw	r2,124(sp)
    2344:	1c47883a 	add	r3,r3,r17
    2348:	44000015 	stw	r16,0(r8)
    234c:	10800044 	addi	r2,r2,1
    2350:	44400115 	stw	r17,4(r8)
    2354:	d8c02015 	stw	r3,128(sp)
    2358:	d8801f15 	stw	r2,124(sp)
    235c:	010001c4 	movi	r4,7
    2360:	20826516 	blt	r4,r2,2cf8 <___vfprintf_internal_r+0x1cb0>
    2364:	42000204 	addi	r8,r8,8
    2368:	88026116 	blt	r17,zero,2cf0 <___vfprintf_internal_r+0x1ca8>
    236c:	d9003217 	ldw	r4,200(sp)
    2370:	2463c83a 	sub	r17,r4,r17
    2374:	04407b0e 	bge	zero,r17,2564 <___vfprintf_internal_r+0x151c>
    2378:	05800404 	movi	r22,16
    237c:	d8801f17 	ldw	r2,124(sp)
    2380:	b4419d0e 	bge	r22,r17,29f8 <___vfprintf_internal_r+0x19b0>
    2384:	01000074 	movhi	r4,1
    2388:	213efc84 	addi	r4,r4,-1038
    238c:	d9002c15 	stw	r4,176(sp)
    2390:	070001c4 	movi	fp,7
    2394:	dcc02d17 	ldw	r19,180(sp)
    2398:	00000306 	br	23a8 <___vfprintf_internal_r+0x1360>
    239c:	42000204 	addi	r8,r8,8
    23a0:	8c7ffc04 	addi	r17,r17,-16
    23a4:	b441970e 	bge	r22,r17,2a04 <___vfprintf_internal_r+0x19bc>
    23a8:	18c00404 	addi	r3,r3,16
    23ac:	10800044 	addi	r2,r2,1
    23b0:	45000015 	stw	r20,0(r8)
    23b4:	45800115 	stw	r22,4(r8)
    23b8:	d8c02015 	stw	r3,128(sp)
    23bc:	d8801f15 	stw	r2,124(sp)
    23c0:	e0bff60e 	bge	fp,r2,239c <__alt_exception_stack_pointer+0xf800239c>
    23c4:	d9801e04 	addi	r6,sp,120
    23c8:	b80b883a 	mov	r5,r23
    23cc:	9809883a 	mov	r4,r19
    23d0:	00074d80 	call	74d8 <__sprint_r>
    23d4:	103c201e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    23d8:	d8c02017 	ldw	r3,128(sp)
    23dc:	d8801f17 	ldw	r2,124(sp)
    23e0:	da000404 	addi	r8,sp,16
    23e4:	003fee06 	br	23a0 <__alt_exception_stack_pointer+0xf80023a0>
    23e8:	d9002d17 	ldw	r4,180(sp)
    23ec:	d9801e04 	addi	r6,sp,120
    23f0:	b80b883a 	mov	r5,r23
    23f4:	00074d80 	call	74d8 <__sprint_r>
    23f8:	103c171e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    23fc:	d8c02017 	ldw	r3,128(sp)
    2400:	df002787 	ldb	fp,158(sp)
    2404:	da000404 	addi	r8,sp,16
    2408:	003d3406 	br	18dc <__alt_exception_stack_pointer+0xf80018dc>
    240c:	9080040c 	andi	r2,r18,16
    2410:	10016126 	beq	r2,zero,2998 <___vfprintf_internal_r+0x1950>
    2414:	d9402e17 	ldw	r5,184(sp)
    2418:	2cc00017 	ldw	r19,0(r5)
    241c:	29400104 	addi	r5,r5,4
    2420:	d9402e15 	stw	r5,184(sp)
    2424:	982dd7fa 	srai	r22,r19,31
    2428:	b005883a 	mov	r2,r22
    242c:	003c5a06 	br	1598 <__alt_exception_stack_pointer+0xf8001598>
    2430:	9080040c 	andi	r2,r18,16
    2434:	10003526 	beq	r2,zero,250c <___vfprintf_internal_r+0x14c4>
    2438:	d8c02e17 	ldw	r3,184(sp)
    243c:	d9002a17 	ldw	r4,168(sp)
    2440:	d8002785 	stb	zero,158(sp)
    2444:	18800104 	addi	r2,r3,4
    2448:	1cc00017 	ldw	r19,0(r3)
    244c:	002d883a 	mov	r22,zero
    2450:	20003716 	blt	r4,zero,2530 <___vfprintf_internal_r+0x14e8>
    2454:	00ffdfc4 	movi	r3,-129
    2458:	d8802e15 	stw	r2,184(sp)
    245c:	90e4703a 	and	r18,r18,r3
    2460:	0039883a 	mov	fp,zero
    2464:	983dd426 	beq	r19,zero,1bb8 <__alt_exception_stack_pointer+0xf8001bb8>
    2468:	00800244 	movi	r2,9
    246c:	14fc5336 	bltu	r2,r19,15bc <__alt_exception_stack_pointer+0xf80015bc>
    2470:	d8c02817 	ldw	r3,160(sp)
    2474:	dc001dc4 	addi	r16,sp,119
    2478:	9cc00c04 	addi	r19,r19,48
    247c:	1c07c83a 	sub	r3,r3,r16
    2480:	dcc01dc5 	stb	r19,119(sp)
    2484:	d8c02b15 	stw	r3,172(sp)
    2488:	003cc606 	br	17a4 <__alt_exception_stack_pointer+0xf80017a4>
    248c:	d8803317 	ldw	r2,204(sp)
    2490:	143fffc4 	addi	r16,r2,-1
    2494:	043f4d0e 	bge	zero,r16,21cc <__alt_exception_stack_pointer+0xf80021cc>
    2498:	07000404 	movi	fp,16
    249c:	e400810e 	bge	fp,r16,26a4 <___vfprintf_internal_r+0x165c>
    24a0:	01400074 	movhi	r5,1
    24a4:	297efc84 	addi	r5,r5,-1038
    24a8:	d9402c15 	stw	r5,176(sp)
    24ac:	01c001c4 	movi	r7,7
    24b0:	dcc02d17 	ldw	r19,180(sp)
    24b4:	00000306 	br	24c4 <___vfprintf_internal_r+0x147c>
    24b8:	b5800204 	addi	r22,r22,8
    24bc:	843ffc04 	addi	r16,r16,-16
    24c0:	e4007b0e 	bge	fp,r16,26b0 <___vfprintf_internal_r+0x1668>
    24c4:	18c00404 	addi	r3,r3,16
    24c8:	8c400044 	addi	r17,r17,1
    24cc:	b5000015 	stw	r20,0(r22)
    24d0:	b7000115 	stw	fp,4(r22)
    24d4:	d8c02015 	stw	r3,128(sp)
    24d8:	dc401f15 	stw	r17,124(sp)
    24dc:	3c7ff60e 	bge	r7,r17,24b8 <__alt_exception_stack_pointer+0xf80024b8>
    24e0:	d9801e04 	addi	r6,sp,120
    24e4:	b80b883a 	mov	r5,r23
    24e8:	9809883a 	mov	r4,r19
    24ec:	d9c03c15 	stw	r7,240(sp)
    24f0:	00074d80 	call	74d8 <__sprint_r>
    24f4:	d9c03c17 	ldw	r7,240(sp)
    24f8:	103bd71e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    24fc:	d8c02017 	ldw	r3,128(sp)
    2500:	dc401f17 	ldw	r17,124(sp)
    2504:	dd800404 	addi	r22,sp,16
    2508:	003fec06 	br	24bc <__alt_exception_stack_pointer+0xf80024bc>
    250c:	9080100c 	andi	r2,r18,64
    2510:	d8002785 	stb	zero,158(sp)
    2514:	10010e26 	beq	r2,zero,2950 <___vfprintf_internal_r+0x1908>
    2518:	d9402e17 	ldw	r5,184(sp)
    251c:	d8c02a17 	ldw	r3,168(sp)
    2520:	002d883a 	mov	r22,zero
    2524:	28800104 	addi	r2,r5,4
    2528:	2cc0000b 	ldhu	r19,0(r5)
    252c:	183fc90e 	bge	r3,zero,2454 <__alt_exception_stack_pointer+0xf8002454>
    2530:	d8802e15 	stw	r2,184(sp)
    2534:	0039883a 	mov	fp,zero
    2538:	9d84b03a 	or	r2,r19,r22
    253c:	103c1e1e 	bne	r2,zero,15b8 <__alt_exception_stack_pointer+0xf80015b8>
    2540:	00800044 	movi	r2,1
    2544:	003e6c06 	br	1ef8 <__alt_exception_stack_pointer+0xf8001ef8>
    2548:	d9002d17 	ldw	r4,180(sp)
    254c:	d9801e04 	addi	r6,sp,120
    2550:	b80b883a 	mov	r5,r23
    2554:	00074d80 	call	74d8 <__sprint_r>
    2558:	103bbf1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    255c:	d8c02017 	ldw	r3,128(sp)
    2560:	da000404 	addi	r8,sp,16
    2564:	d9003217 	ldw	r4,200(sp)
    2568:	d8802617 	ldw	r2,152(sp)
    256c:	d9403317 	ldw	r5,204(sp)
    2570:	8123883a 	add	r17,r16,r4
    2574:	11400216 	blt	r2,r5,2580 <___vfprintf_internal_r+0x1538>
    2578:	9100004c 	andi	r4,r18,1
    257c:	20000d26 	beq	r4,zero,25b4 <___vfprintf_internal_r+0x156c>
    2580:	d9003717 	ldw	r4,220(sp)
    2584:	d9403417 	ldw	r5,208(sp)
    2588:	1907883a 	add	r3,r3,r4
    258c:	d9001f17 	ldw	r4,124(sp)
    2590:	41400015 	stw	r5,0(r8)
    2594:	d9403717 	ldw	r5,220(sp)
    2598:	21000044 	addi	r4,r4,1
    259c:	d8c02015 	stw	r3,128(sp)
    25a0:	41400115 	stw	r5,4(r8)
    25a4:	d9001f15 	stw	r4,124(sp)
    25a8:	014001c4 	movi	r5,7
    25ac:	2901e816 	blt	r5,r4,2d50 <___vfprintf_internal_r+0x1d08>
    25b0:	42000204 	addi	r8,r8,8
    25b4:	d9003317 	ldw	r4,204(sp)
    25b8:	8121883a 	add	r16,r16,r4
    25bc:	2085c83a 	sub	r2,r4,r2
    25c0:	8461c83a 	sub	r16,r16,r17
    25c4:	1400010e 	bge	r2,r16,25cc <___vfprintf_internal_r+0x1584>
    25c8:	1021883a 	mov	r16,r2
    25cc:	04000a0e 	bge	zero,r16,25f8 <___vfprintf_internal_r+0x15b0>
    25d0:	d9001f17 	ldw	r4,124(sp)
    25d4:	1c07883a 	add	r3,r3,r16
    25d8:	44400015 	stw	r17,0(r8)
    25dc:	21000044 	addi	r4,r4,1
    25e0:	44000115 	stw	r16,4(r8)
    25e4:	d8c02015 	stw	r3,128(sp)
    25e8:	d9001f15 	stw	r4,124(sp)
    25ec:	014001c4 	movi	r5,7
    25f0:	2901fb16 	blt	r5,r4,2de0 <___vfprintf_internal_r+0x1d98>
    25f4:	42000204 	addi	r8,r8,8
    25f8:	8001f716 	blt	r16,zero,2dd8 <___vfprintf_internal_r+0x1d90>
    25fc:	1421c83a 	sub	r16,r2,r16
    2600:	043d160e 	bge	zero,r16,1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    2604:	04400404 	movi	r17,16
    2608:	d8801f17 	ldw	r2,124(sp)
    260c:	8c3efb0e 	bge	r17,r16,21fc <__alt_exception_stack_pointer+0xf80021fc>
    2610:	01400074 	movhi	r5,1
    2614:	297efc84 	addi	r5,r5,-1038
    2618:	d9402c15 	stw	r5,176(sp)
    261c:	058001c4 	movi	r22,7
    2620:	dcc02d17 	ldw	r19,180(sp)
    2624:	00000306 	br	2634 <___vfprintf_internal_r+0x15ec>
    2628:	42000204 	addi	r8,r8,8
    262c:	843ffc04 	addi	r16,r16,-16
    2630:	8c3ef50e 	bge	r17,r16,2208 <__alt_exception_stack_pointer+0xf8002208>
    2634:	18c00404 	addi	r3,r3,16
    2638:	10800044 	addi	r2,r2,1
    263c:	45000015 	stw	r20,0(r8)
    2640:	44400115 	stw	r17,4(r8)
    2644:	d8c02015 	stw	r3,128(sp)
    2648:	d8801f15 	stw	r2,124(sp)
    264c:	b0bff60e 	bge	r22,r2,2628 <__alt_exception_stack_pointer+0xf8002628>
    2650:	d9801e04 	addi	r6,sp,120
    2654:	b80b883a 	mov	r5,r23
    2658:	9809883a 	mov	r4,r19
    265c:	00074d80 	call	74d8 <__sprint_r>
    2660:	103b7d1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2664:	d8c02017 	ldw	r3,128(sp)
    2668:	d8801f17 	ldw	r2,124(sp)
    266c:	da000404 	addi	r8,sp,16
    2670:	003fee06 	br	262c <__alt_exception_stack_pointer+0xf800262c>
    2674:	9088703a 	and	r4,r18,r2
    2678:	203eab1e 	bne	r4,zero,2128 <__alt_exception_stack_pointer+0xf8002128>
    267c:	dc401f17 	ldw	r17,124(sp)
    2680:	40800115 	stw	r2,4(r8)
    2684:	44000015 	stw	r16,0(r8)
    2688:	8c400044 	addi	r17,r17,1
    268c:	d8c02015 	stw	r3,128(sp)
    2690:	dc401f15 	stw	r17,124(sp)
    2694:	008001c4 	movi	r2,7
    2698:	14400e16 	blt	r2,r17,26d4 <___vfprintf_internal_r+0x168c>
    269c:	45800204 	addi	r22,r8,8
    26a0:	003eca06 	br	21cc <__alt_exception_stack_pointer+0xf80021cc>
    26a4:	01000074 	movhi	r4,1
    26a8:	213efc84 	addi	r4,r4,-1038
    26ac:	d9002c15 	stw	r4,176(sp)
    26b0:	d8802c17 	ldw	r2,176(sp)
    26b4:	1c07883a 	add	r3,r3,r16
    26b8:	8c400044 	addi	r17,r17,1
    26bc:	b0800015 	stw	r2,0(r22)
    26c0:	b4000115 	stw	r16,4(r22)
    26c4:	d8c02015 	stw	r3,128(sp)
    26c8:	dc401f15 	stw	r17,124(sp)
    26cc:	008001c4 	movi	r2,7
    26d0:	147ebd0e 	bge	r2,r17,21c8 <__alt_exception_stack_pointer+0xf80021c8>
    26d4:	d9002d17 	ldw	r4,180(sp)
    26d8:	d9801e04 	addi	r6,sp,120
    26dc:	b80b883a 	mov	r5,r23
    26e0:	00074d80 	call	74d8 <__sprint_r>
    26e4:	103b5c1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    26e8:	d8c02017 	ldw	r3,128(sp)
    26ec:	dc401f17 	ldw	r17,124(sp)
    26f0:	dd800404 	addi	r22,sp,16
    26f4:	003eb506 	br	21cc <__alt_exception_stack_pointer+0xf80021cc>
    26f8:	d9002d17 	ldw	r4,180(sp)
    26fc:	d9801e04 	addi	r6,sp,120
    2700:	b80b883a 	mov	r5,r23
    2704:	00074d80 	call	74d8 <__sprint_r>
    2708:	103b531e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    270c:	d8c02017 	ldw	r3,128(sp)
    2710:	dc401f17 	ldw	r17,124(sp)
    2714:	da000404 	addi	r8,sp,16
    2718:	003e8d06 	br	2150 <__alt_exception_stack_pointer+0xf8002150>
    271c:	d9002d17 	ldw	r4,180(sp)
    2720:	d9801e04 	addi	r6,sp,120
    2724:	b80b883a 	mov	r5,r23
    2728:	00074d80 	call	74d8 <__sprint_r>
    272c:	103b4a1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2730:	d8c02017 	ldw	r3,128(sp)
    2734:	dc401f17 	ldw	r17,124(sp)
    2738:	dd800404 	addi	r22,sp,16
    273c:	003e8f06 	br	217c <__alt_exception_stack_pointer+0xf800217c>
    2740:	0027883a 	mov	r19,zero
    2744:	003f4a06 	br	2470 <__alt_exception_stack_pointer+0xf8002470>
    2748:	d9002d17 	ldw	r4,180(sp)
    274c:	d9801e04 	addi	r6,sp,120
    2750:	b80b883a 	mov	r5,r23
    2754:	00074d80 	call	74d8 <__sprint_r>
    2758:	103b3f1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    275c:	d8c02017 	ldw	r3,128(sp)
    2760:	da000404 	addi	r8,sp,16
    2764:	003c7b06 	br	1954 <__alt_exception_stack_pointer+0xf8001954>
    2768:	d9402a17 	ldw	r5,168(sp)
    276c:	04e7c83a 	sub	r19,zero,r19
    2770:	07000b44 	movi	fp,45
    2774:	9804c03a 	cmpne	r2,r19,zero
    2778:	05adc83a 	sub	r22,zero,r22
    277c:	df002785 	stb	fp,158(sp)
    2780:	b0adc83a 	sub	r22,r22,r2
    2784:	28017b16 	blt	r5,zero,2d74 <___vfprintf_internal_r+0x1d2c>
    2788:	00bfdfc4 	movi	r2,-129
    278c:	90a4703a 	and	r18,r18,r2
    2790:	003b8906 	br	15b8 <__alt_exception_stack_pointer+0xf80015b8>
    2794:	d9003617 	ldw	r4,216(sp)
    2798:	d9403817 	ldw	r5,224(sp)
    279c:	da003d15 	stw	r8,244(sp)
    27a0:	00070b80 	call	70b8 <__fpclassifyd>
    27a4:	da003d17 	ldw	r8,244(sp)
    27a8:	1000f026 	beq	r2,zero,2b6c <___vfprintf_internal_r+0x1b24>
    27ac:	d9002a17 	ldw	r4,168(sp)
    27b0:	05bff7c4 	movi	r22,-33
    27b4:	00bfffc4 	movi	r2,-1
    27b8:	8dac703a 	and	r22,r17,r22
    27bc:	20820026 	beq	r4,r2,2fc0 <___vfprintf_internal_r+0x1f78>
    27c0:	008011c4 	movi	r2,71
    27c4:	b081f726 	beq	r22,r2,2fa4 <___vfprintf_internal_r+0x1f5c>
    27c8:	d9003817 	ldw	r4,224(sp)
    27cc:	90c04014 	ori	r3,r18,256
    27d0:	d8c02c15 	stw	r3,176(sp)
    27d4:	20021516 	blt	r4,zero,302c <___vfprintf_internal_r+0x1fe4>
    27d8:	dcc03817 	ldw	r19,224(sp)
    27dc:	d8002905 	stb	zero,164(sp)
    27e0:	00801984 	movi	r2,102
    27e4:	8881f926 	beq	r17,r2,2fcc <___vfprintf_internal_r+0x1f84>
    27e8:	00801184 	movi	r2,70
    27ec:	88821c26 	beq	r17,r2,3060 <___vfprintf_internal_r+0x2018>
    27f0:	00801144 	movi	r2,69
    27f4:	b081ef26 	beq	r22,r2,2fb4 <___vfprintf_internal_r+0x1f6c>
    27f8:	d8c02a17 	ldw	r3,168(sp)
    27fc:	d8802104 	addi	r2,sp,132
    2800:	d8800315 	stw	r2,12(sp)
    2804:	d9403617 	ldw	r5,216(sp)
    2808:	d8802504 	addi	r2,sp,148
    280c:	d9002d17 	ldw	r4,180(sp)
    2810:	d8800215 	stw	r2,8(sp)
    2814:	d8802604 	addi	r2,sp,152
    2818:	d8c00015 	stw	r3,0(sp)
    281c:	d8800115 	stw	r2,4(sp)
    2820:	01c00084 	movi	r7,2
    2824:	980d883a 	mov	r6,r19
    2828:	d8c03c15 	stw	r3,240(sp)
    282c:	da003d15 	stw	r8,244(sp)
    2830:	00037780 	call	3778 <_dtoa_r>
    2834:	1021883a 	mov	r16,r2
    2838:	008019c4 	movi	r2,103
    283c:	d8c03c17 	ldw	r3,240(sp)
    2840:	da003d17 	ldw	r8,244(sp)
    2844:	88817126 	beq	r17,r2,2e0c <___vfprintf_internal_r+0x1dc4>
    2848:	008011c4 	movi	r2,71
    284c:	88829126 	beq	r17,r2,3294 <___vfprintf_internal_r+0x224c>
    2850:	80f9883a 	add	fp,r16,r3
    2854:	d9003617 	ldw	r4,216(sp)
    2858:	000d883a 	mov	r6,zero
    285c:	000f883a 	mov	r7,zero
    2860:	980b883a 	mov	r5,r19
    2864:	da003d15 	stw	r8,244(sp)
    2868:	000bde40 	call	bde4 <__eqdf2>
    286c:	da003d17 	ldw	r8,244(sp)
    2870:	10018d26 	beq	r2,zero,2ea8 <___vfprintf_internal_r+0x1e60>
    2874:	d8802117 	ldw	r2,132(sp)
    2878:	1700062e 	bgeu	r2,fp,2894 <___vfprintf_internal_r+0x184c>
    287c:	01000c04 	movi	r4,48
    2880:	10c00044 	addi	r3,r2,1
    2884:	d8c02115 	stw	r3,132(sp)
    2888:	11000005 	stb	r4,0(r2)
    288c:	d8802117 	ldw	r2,132(sp)
    2890:	173ffb36 	bltu	r2,fp,2880 <__alt_exception_stack_pointer+0xf8002880>
    2894:	1405c83a 	sub	r2,r2,r16
    2898:	d8803315 	stw	r2,204(sp)
    289c:	008011c4 	movi	r2,71
    28a0:	b0817626 	beq	r22,r2,2e7c <___vfprintf_internal_r+0x1e34>
    28a4:	00801944 	movi	r2,101
    28a8:	1442800e 	bge	r2,r17,32ac <___vfprintf_internal_r+0x2264>
    28ac:	d8c02617 	ldw	r3,152(sp)
    28b0:	00801984 	movi	r2,102
    28b4:	d8c03215 	stw	r3,200(sp)
    28b8:	8881fe26 	beq	r17,r2,30b4 <___vfprintf_internal_r+0x206c>
    28bc:	d8c03217 	ldw	r3,200(sp)
    28c0:	d9003317 	ldw	r4,204(sp)
    28c4:	1901dd16 	blt	r3,r4,303c <___vfprintf_internal_r+0x1ff4>
    28c8:	9480004c 	andi	r18,r18,1
    28cc:	90022b1e 	bne	r18,zero,317c <___vfprintf_internal_r+0x2134>
    28d0:	1805883a 	mov	r2,r3
    28d4:	18028316 	blt	r3,zero,32e4 <___vfprintf_internal_r+0x229c>
    28d8:	d8c03217 	ldw	r3,200(sp)
    28dc:	044019c4 	movi	r17,103
    28e0:	d8c02b15 	stw	r3,172(sp)
    28e4:	df002907 	ldb	fp,164(sp)
    28e8:	e001531e 	bne	fp,zero,2e38 <___vfprintf_internal_r+0x1df0>
    28ec:	df002783 	ldbu	fp,158(sp)
    28f0:	d8802915 	stw	r2,164(sp)
    28f4:	dc802c17 	ldw	r18,176(sp)
    28f8:	d8002a15 	stw	zero,168(sp)
    28fc:	003baf06 	br	17bc <__alt_exception_stack_pointer+0xf80017bc>
    2900:	d8c02e17 	ldw	r3,184(sp)
    2904:	d9002e17 	ldw	r4,184(sp)
    2908:	d9402e17 	ldw	r5,184(sp)
    290c:	18c00017 	ldw	r3,0(r3)
    2910:	21000117 	ldw	r4,4(r4)
    2914:	29400204 	addi	r5,r5,8
    2918:	d8c03615 	stw	r3,216(sp)
    291c:	d9003815 	stw	r4,224(sp)
    2920:	d9402e15 	stw	r5,184(sp)
    2924:	003b5006 	br	1668 <__alt_exception_stack_pointer+0xf8001668>
    2928:	ac400007 	ldb	r17,0(r21)
    292c:	003a2806 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    2930:	9080100c 	andi	r2,r18,64
    2934:	1000a826 	beq	r2,zero,2bd8 <___vfprintf_internal_r+0x1b90>
    2938:	d8c02e17 	ldw	r3,184(sp)
    293c:	002d883a 	mov	r22,zero
    2940:	1cc0000b 	ldhu	r19,0(r3)
    2944:	18c00104 	addi	r3,r3,4
    2948:	d8c02e15 	stw	r3,184(sp)
    294c:	003caf06 	br	1c0c <__alt_exception_stack_pointer+0xf8001c0c>
    2950:	d9002e17 	ldw	r4,184(sp)
    2954:	d9402a17 	ldw	r5,168(sp)
    2958:	002d883a 	mov	r22,zero
    295c:	20800104 	addi	r2,r4,4
    2960:	24c00017 	ldw	r19,0(r4)
    2964:	283ebb0e 	bge	r5,zero,2454 <__alt_exception_stack_pointer+0xf8002454>
    2968:	003ef106 	br	2530 <__alt_exception_stack_pointer+0xf8002530>
    296c:	9080040c 	andi	r2,r18,16
    2970:	1000921e 	bne	r2,zero,2bbc <___vfprintf_internal_r+0x1b74>
    2974:	9480100c 	andi	r18,r18,64
    2978:	90013926 	beq	r18,zero,2e60 <___vfprintf_internal_r+0x1e18>
    297c:	d9402e17 	ldw	r5,184(sp)
    2980:	d8c02f17 	ldw	r3,188(sp)
    2984:	28800017 	ldw	r2,0(r5)
    2988:	29400104 	addi	r5,r5,4
    298c:	d9402e15 	stw	r5,184(sp)
    2990:	10c0000d 	sth	r3,0(r2)
    2994:	0039e406 	br	1128 <__alt_exception_stack_pointer+0xf8001128>
    2998:	9080100c 	andi	r2,r18,64
    299c:	10008026 	beq	r2,zero,2ba0 <___vfprintf_internal_r+0x1b58>
    29a0:	d8802e17 	ldw	r2,184(sp)
    29a4:	14c0000f 	ldh	r19,0(r2)
    29a8:	10800104 	addi	r2,r2,4
    29ac:	d8802e15 	stw	r2,184(sp)
    29b0:	982dd7fa 	srai	r22,r19,31
    29b4:	b005883a 	mov	r2,r22
    29b8:	003af706 	br	1598 <__alt_exception_stack_pointer+0xf8001598>
    29bc:	9080100c 	andi	r2,r18,64
    29c0:	d8002785 	stb	zero,158(sp)
    29c4:	10008a1e 	bne	r2,zero,2bf0 <___vfprintf_internal_r+0x1ba8>
    29c8:	d9002e17 	ldw	r4,184(sp)
    29cc:	d9402a17 	ldw	r5,168(sp)
    29d0:	002d883a 	mov	r22,zero
    29d4:	20800104 	addi	r2,r4,4
    29d8:	24c00017 	ldw	r19,0(r4)
    29dc:	283e4b0e 	bge	r5,zero,230c <__alt_exception_stack_pointer+0xf800230c>
    29e0:	9d86b03a 	or	r3,r19,r22
    29e4:	d8802e15 	stw	r2,184(sp)
    29e8:	183e4c1e 	bne	r3,zero,231c <__alt_exception_stack_pointer+0xf800231c>
    29ec:	0039883a 	mov	fp,zero
    29f0:	0005883a 	mov	r2,zero
    29f4:	003d4006 	br	1ef8 <__alt_exception_stack_pointer+0xf8001ef8>
    29f8:	01400074 	movhi	r5,1
    29fc:	297efc84 	addi	r5,r5,-1038
    2a00:	d9402c15 	stw	r5,176(sp)
    2a04:	d9402c17 	ldw	r5,176(sp)
    2a08:	1c47883a 	add	r3,r3,r17
    2a0c:	10800044 	addi	r2,r2,1
    2a10:	41400015 	stw	r5,0(r8)
    2a14:	44400115 	stw	r17,4(r8)
    2a18:	d8c02015 	stw	r3,128(sp)
    2a1c:	d8801f15 	stw	r2,124(sp)
    2a20:	010001c4 	movi	r4,7
    2a24:	20bec816 	blt	r4,r2,2548 <__alt_exception_stack_pointer+0xf8002548>
    2a28:	42000204 	addi	r8,r8,8
    2a2c:	003ecd06 	br	2564 <__alt_exception_stack_pointer+0xf8002564>
    2a30:	d9002a17 	ldw	r4,168(sp)
    2a34:	d8002785 	stb	zero,158(sp)
    2a38:	203d2d16 	blt	r4,zero,1ef0 <__alt_exception_stack_pointer+0xf8001ef0>
    2a3c:	00bfdfc4 	movi	r2,-129
    2a40:	90a4703a 	and	r18,r18,r2
    2a44:	003a6106 	br	13cc <__alt_exception_stack_pointer+0xf80013cc>
    2a48:	01000074 	movhi	r4,1
    2a4c:	213efc84 	addi	r4,r4,-1038
    2a50:	d9002c15 	stw	r4,176(sp)
    2a54:	003bea06 	br	1a00 <__alt_exception_stack_pointer+0xf8001a00>
    2a58:	d9002d17 	ldw	r4,180(sp)
    2a5c:	d9801e04 	addi	r6,sp,120
    2a60:	b80b883a 	mov	r5,r23
    2a64:	00074d80 	call	74d8 <__sprint_r>
    2a68:	103a7b1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2a6c:	d8c02017 	ldw	r3,128(sp)
    2a70:	da000404 	addi	r8,sp,16
    2a74:	003d4106 	br	1f7c <__alt_exception_stack_pointer+0xf8001f7c>
    2a78:	d8801f17 	ldw	r2,124(sp)
    2a7c:	01400074 	movhi	r5,1
    2a80:	01000044 	movi	r4,1
    2a84:	18c00044 	addi	r3,r3,1
    2a88:	10800044 	addi	r2,r2,1
    2a8c:	297efc04 	addi	r5,r5,-1040
    2a90:	41000115 	stw	r4,4(r8)
    2a94:	41400015 	stw	r5,0(r8)
    2a98:	d8c02015 	stw	r3,128(sp)
    2a9c:	d8801f15 	stw	r2,124(sp)
    2aa0:	010001c4 	movi	r4,7
    2aa4:	20805c16 	blt	r4,r2,2c18 <___vfprintf_internal_r+0x1bd0>
    2aa8:	42000204 	addi	r8,r8,8
    2aac:	8800041e 	bne	r17,zero,2ac0 <___vfprintf_internal_r+0x1a78>
    2ab0:	d8803317 	ldw	r2,204(sp)
    2ab4:	1000021e 	bne	r2,zero,2ac0 <___vfprintf_internal_r+0x1a78>
    2ab8:	9080004c 	andi	r2,r18,1
    2abc:	103be726 	beq	r2,zero,1a5c <__alt_exception_stack_pointer+0xf8001a5c>
    2ac0:	d9003717 	ldw	r4,220(sp)
    2ac4:	d8801f17 	ldw	r2,124(sp)
    2ac8:	d9403417 	ldw	r5,208(sp)
    2acc:	20c7883a 	add	r3,r4,r3
    2ad0:	10800044 	addi	r2,r2,1
    2ad4:	41000115 	stw	r4,4(r8)
    2ad8:	41400015 	stw	r5,0(r8)
    2adc:	d8c02015 	stw	r3,128(sp)
    2ae0:	d8801f15 	stw	r2,124(sp)
    2ae4:	010001c4 	movi	r4,7
    2ae8:	20812116 	blt	r4,r2,2f70 <___vfprintf_internal_r+0x1f28>
    2aec:	42000204 	addi	r8,r8,8
    2af0:	0463c83a 	sub	r17,zero,r17
    2af4:	0440730e 	bge	zero,r17,2cc4 <___vfprintf_internal_r+0x1c7c>
    2af8:	05800404 	movi	r22,16
    2afc:	b440860e 	bge	r22,r17,2d18 <___vfprintf_internal_r+0x1cd0>
    2b00:	01400074 	movhi	r5,1
    2b04:	297efc84 	addi	r5,r5,-1038
    2b08:	d9402c15 	stw	r5,176(sp)
    2b0c:	070001c4 	movi	fp,7
    2b10:	dcc02d17 	ldw	r19,180(sp)
    2b14:	00000306 	br	2b24 <___vfprintf_internal_r+0x1adc>
    2b18:	42000204 	addi	r8,r8,8
    2b1c:	8c7ffc04 	addi	r17,r17,-16
    2b20:	b440800e 	bge	r22,r17,2d24 <___vfprintf_internal_r+0x1cdc>
    2b24:	18c00404 	addi	r3,r3,16
    2b28:	10800044 	addi	r2,r2,1
    2b2c:	45000015 	stw	r20,0(r8)
    2b30:	45800115 	stw	r22,4(r8)
    2b34:	d8c02015 	stw	r3,128(sp)
    2b38:	d8801f15 	stw	r2,124(sp)
    2b3c:	e0bff60e 	bge	fp,r2,2b18 <__alt_exception_stack_pointer+0xf8002b18>
    2b40:	d9801e04 	addi	r6,sp,120
    2b44:	b80b883a 	mov	r5,r23
    2b48:	9809883a 	mov	r4,r19
    2b4c:	00074d80 	call	74d8 <__sprint_r>
    2b50:	103a411e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2b54:	d8c02017 	ldw	r3,128(sp)
    2b58:	d8801f17 	ldw	r2,124(sp)
    2b5c:	da000404 	addi	r8,sp,16
    2b60:	003fee06 	br	2b1c <__alt_exception_stack_pointer+0xf8002b1c>
    2b64:	00bfffc4 	movi	r2,-1
    2b68:	003a3f06 	br	1468 <__alt_exception_stack_pointer+0xf8001468>
    2b6c:	008011c4 	movi	r2,71
    2b70:	1440b816 	blt	r2,r17,2e54 <___vfprintf_internal_r+0x1e0c>
    2b74:	04000074 	movhi	r16,1
    2b78:	843eee04 	addi	r16,r16,-1096
    2b7c:	00c000c4 	movi	r3,3
    2b80:	00bfdfc4 	movi	r2,-129
    2b84:	d8c02915 	stw	r3,164(sp)
    2b88:	90a4703a 	and	r18,r18,r2
    2b8c:	df002783 	ldbu	fp,158(sp)
    2b90:	d8c02b15 	stw	r3,172(sp)
    2b94:	d8002a15 	stw	zero,168(sp)
    2b98:	d8003215 	stw	zero,200(sp)
    2b9c:	003b0706 	br	17bc <__alt_exception_stack_pointer+0xf80017bc>
    2ba0:	d8c02e17 	ldw	r3,184(sp)
    2ba4:	1cc00017 	ldw	r19,0(r3)
    2ba8:	18c00104 	addi	r3,r3,4
    2bac:	d8c02e15 	stw	r3,184(sp)
    2bb0:	982dd7fa 	srai	r22,r19,31
    2bb4:	b005883a 	mov	r2,r22
    2bb8:	003a7706 	br	1598 <__alt_exception_stack_pointer+0xf8001598>
    2bbc:	d8c02e17 	ldw	r3,184(sp)
    2bc0:	d9002f17 	ldw	r4,188(sp)
    2bc4:	18800017 	ldw	r2,0(r3)
    2bc8:	18c00104 	addi	r3,r3,4
    2bcc:	d8c02e15 	stw	r3,184(sp)
    2bd0:	11000015 	stw	r4,0(r2)
    2bd4:	00395406 	br	1128 <__alt_exception_stack_pointer+0xf8001128>
    2bd8:	d9002e17 	ldw	r4,184(sp)
    2bdc:	002d883a 	mov	r22,zero
    2be0:	24c00017 	ldw	r19,0(r4)
    2be4:	21000104 	addi	r4,r4,4
    2be8:	d9002e15 	stw	r4,184(sp)
    2bec:	003c0706 	br	1c0c <__alt_exception_stack_pointer+0xf8001c0c>
    2bf0:	d9402e17 	ldw	r5,184(sp)
    2bf4:	d8c02a17 	ldw	r3,168(sp)
    2bf8:	002d883a 	mov	r22,zero
    2bfc:	28800104 	addi	r2,r5,4
    2c00:	2cc0000b 	ldhu	r19,0(r5)
    2c04:	183dc10e 	bge	r3,zero,230c <__alt_exception_stack_pointer+0xf800230c>
    2c08:	003f7506 	br	29e0 <__alt_exception_stack_pointer+0xf80029e0>
    2c0c:	04000074 	movhi	r16,1
    2c10:	843eec04 	addi	r16,r16,-1104
    2c14:	003aa706 	br	16b4 <__alt_exception_stack_pointer+0xf80016b4>
    2c18:	d9002d17 	ldw	r4,180(sp)
    2c1c:	d9801e04 	addi	r6,sp,120
    2c20:	b80b883a 	mov	r5,r23
    2c24:	00074d80 	call	74d8 <__sprint_r>
    2c28:	103a0b1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2c2c:	dc402617 	ldw	r17,152(sp)
    2c30:	d8c02017 	ldw	r3,128(sp)
    2c34:	da000404 	addi	r8,sp,16
    2c38:	003f9c06 	br	2aac <__alt_exception_stack_pointer+0xf8002aac>
    2c3c:	ac400043 	ldbu	r17,1(r21)
    2c40:	84000814 	ori	r16,r16,32
    2c44:	ad400044 	addi	r21,r21,1
    2c48:	8c403fcc 	andi	r17,r17,255
    2c4c:	8c40201c 	xori	r17,r17,128
    2c50:	8c7fe004 	addi	r17,r17,-128
    2c54:	00395e06 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    2c58:	d8c02e15 	stw	r3,184(sp)
    2c5c:	0039883a 	mov	fp,zero
    2c60:	003e3506 	br	2538 <__alt_exception_stack_pointer+0xf8002538>
    2c64:	d9002d17 	ldw	r4,180(sp)
    2c68:	d9801e04 	addi	r6,sp,120
    2c6c:	b80b883a 	mov	r5,r23
    2c70:	00074d80 	call	74d8 <__sprint_r>
    2c74:	1039f81e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2c78:	d8c02017 	ldw	r3,128(sp)
    2c7c:	da000404 	addi	r8,sp,16
    2c80:	003cd006 	br	1fc4 <__alt_exception_stack_pointer+0xf8001fc4>
    2c84:	8009883a 	mov	r4,r16
    2c88:	df003d15 	stw	fp,244(sp)
    2c8c:	00073440 	call	7344 <strlen>
    2c90:	d8802b15 	stw	r2,172(sp)
    2c94:	da003d17 	ldw	r8,244(sp)
    2c98:	103c200e 	bge	r2,zero,1d1c <__alt_exception_stack_pointer+0xf8001d1c>
    2c9c:	0005883a 	mov	r2,zero
    2ca0:	003c1e06 	br	1d1c <__alt_exception_stack_pointer+0xf8001d1c>
    2ca4:	d9002d17 	ldw	r4,180(sp)
    2ca8:	d9801e04 	addi	r6,sp,120
    2cac:	b80b883a 	mov	r5,r23
    2cb0:	00074d80 	call	74d8 <__sprint_r>
    2cb4:	1039e81e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2cb8:	d8c02017 	ldw	r3,128(sp)
    2cbc:	d8801f17 	ldw	r2,124(sp)
    2cc0:	da000404 	addi	r8,sp,16
    2cc4:	d9403317 	ldw	r5,204(sp)
    2cc8:	10800044 	addi	r2,r2,1
    2ccc:	44000015 	stw	r16,0(r8)
    2cd0:	28c7883a 	add	r3,r5,r3
    2cd4:	003b5b06 	br	1a44 <__alt_exception_stack_pointer+0xf8001a44>
    2cd8:	01000074 	movhi	r4,1
    2cdc:	213f0084 	addi	r4,r4,-1022
    2ce0:	d9003515 	stw	r4,212(sp)
    2ce4:	003af206 	br	18b0 <__alt_exception_stack_pointer+0xf80018b0>
    2ce8:	013fffc4 	movi	r4,-1
    2cec:	003a0806 	br	1510 <__alt_exception_stack_pointer+0xf8001510>
    2cf0:	0023883a 	mov	r17,zero
    2cf4:	003d9d06 	br	236c <__alt_exception_stack_pointer+0xf800236c>
    2cf8:	d9002d17 	ldw	r4,180(sp)
    2cfc:	d9801e04 	addi	r6,sp,120
    2d00:	b80b883a 	mov	r5,r23
    2d04:	00074d80 	call	74d8 <__sprint_r>
    2d08:	1039d31e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2d0c:	d8c02017 	ldw	r3,128(sp)
    2d10:	da000404 	addi	r8,sp,16
    2d14:	003d9406 	br	2368 <__alt_exception_stack_pointer+0xf8002368>
    2d18:	01000074 	movhi	r4,1
    2d1c:	213efc84 	addi	r4,r4,-1038
    2d20:	d9002c15 	stw	r4,176(sp)
    2d24:	d9002c17 	ldw	r4,176(sp)
    2d28:	1c47883a 	add	r3,r3,r17
    2d2c:	10800044 	addi	r2,r2,1
    2d30:	41000015 	stw	r4,0(r8)
    2d34:	44400115 	stw	r17,4(r8)
    2d38:	d8c02015 	stw	r3,128(sp)
    2d3c:	d8801f15 	stw	r2,124(sp)
    2d40:	010001c4 	movi	r4,7
    2d44:	20bfd716 	blt	r4,r2,2ca4 <__alt_exception_stack_pointer+0xf8002ca4>
    2d48:	42000204 	addi	r8,r8,8
    2d4c:	003fdd06 	br	2cc4 <__alt_exception_stack_pointer+0xf8002cc4>
    2d50:	d9002d17 	ldw	r4,180(sp)
    2d54:	d9801e04 	addi	r6,sp,120
    2d58:	b80b883a 	mov	r5,r23
    2d5c:	00074d80 	call	74d8 <__sprint_r>
    2d60:	1039bd1e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2d64:	d8802617 	ldw	r2,152(sp)
    2d68:	d8c02017 	ldw	r3,128(sp)
    2d6c:	da000404 	addi	r8,sp,16
    2d70:	003e1006 	br	25b4 <__alt_exception_stack_pointer+0xf80025b4>
    2d74:	00800044 	movi	r2,1
    2d78:	10803fcc 	andi	r2,r2,255
    2d7c:	00c00044 	movi	r3,1
    2d80:	10fa0d26 	beq	r2,r3,15b8 <__alt_exception_stack_pointer+0xf80015b8>
    2d84:	00c00084 	movi	r3,2
    2d88:	10fbaf26 	beq	r2,r3,1c48 <__alt_exception_stack_pointer+0xf8001c48>
    2d8c:	003a6d06 	br	1744 <__alt_exception_stack_pointer+0xf8001744>
    2d90:	01000074 	movhi	r4,1
    2d94:	213f0084 	addi	r4,r4,-1022
    2d98:	d9003515 	stw	r4,212(sp)
    2d9c:	003b5406 	br	1af0 <__alt_exception_stack_pointer+0xf8001af0>
    2da0:	d8802a17 	ldw	r2,168(sp)
    2da4:	00c00184 	movi	r3,6
    2da8:	1880012e 	bgeu	r3,r2,2db0 <___vfprintf_internal_r+0x1d68>
    2dac:	1805883a 	mov	r2,r3
    2db0:	d8802b15 	stw	r2,172(sp)
    2db4:	1000ef16 	blt	r2,zero,3174 <___vfprintf_internal_r+0x212c>
    2db8:	04000074 	movhi	r16,1
    2dbc:	d8802915 	stw	r2,164(sp)
    2dc0:	dcc02e15 	stw	r19,184(sp)
    2dc4:	d8002a15 	stw	zero,168(sp)
    2dc8:	d8003215 	stw	zero,200(sp)
    2dcc:	843efa04 	addi	r16,r16,-1048
    2dd0:	0039883a 	mov	fp,zero
    2dd4:	003a8006 	br	17d8 <__alt_exception_stack_pointer+0xf80017d8>
    2dd8:	0021883a 	mov	r16,zero
    2ddc:	003e0706 	br	25fc <__alt_exception_stack_pointer+0xf80025fc>
    2de0:	d9002d17 	ldw	r4,180(sp)
    2de4:	d9801e04 	addi	r6,sp,120
    2de8:	b80b883a 	mov	r5,r23
    2dec:	00074d80 	call	74d8 <__sprint_r>
    2df0:	1039991e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2df4:	d8802617 	ldw	r2,152(sp)
    2df8:	d9403317 	ldw	r5,204(sp)
    2dfc:	d8c02017 	ldw	r3,128(sp)
    2e00:	da000404 	addi	r8,sp,16
    2e04:	2885c83a 	sub	r2,r5,r2
    2e08:	003dfb06 	br	25f8 <__alt_exception_stack_pointer+0xf80025f8>
    2e0c:	9080004c 	andi	r2,r18,1
    2e10:	103e8f1e 	bne	r2,zero,2850 <__alt_exception_stack_pointer+0xf8002850>
    2e14:	d8802117 	ldw	r2,132(sp)
    2e18:	003e9e06 	br	2894 <__alt_exception_stack_pointer+0xf8002894>
    2e1c:	1025883a 	mov	r18,r2
    2e20:	0039883a 	mov	fp,zero
    2e24:	00800084 	movi	r2,2
    2e28:	003fd306 	br	2d78 <__alt_exception_stack_pointer+0xf8002d78>
    2e2c:	07000b44 	movi	fp,45
    2e30:	df002785 	stb	fp,158(sp)
    2e34:	003a1b06 	br	16a4 <__alt_exception_stack_pointer+0xf80016a4>
    2e38:	00c00b44 	movi	r3,45
    2e3c:	d8c02785 	stb	r3,158(sp)
    2e40:	d8802915 	stw	r2,164(sp)
    2e44:	dc802c17 	ldw	r18,176(sp)
    2e48:	d8002a15 	stw	zero,168(sp)
    2e4c:	07000b44 	movi	fp,45
    2e50:	003a5e06 	br	17cc <__alt_exception_stack_pointer+0xf80017cc>
    2e54:	04000074 	movhi	r16,1
    2e58:	843eef04 	addi	r16,r16,-1092
    2e5c:	003f4706 	br	2b7c <__alt_exception_stack_pointer+0xf8002b7c>
    2e60:	d9002e17 	ldw	r4,184(sp)
    2e64:	d9402f17 	ldw	r5,188(sp)
    2e68:	20800017 	ldw	r2,0(r4)
    2e6c:	21000104 	addi	r4,r4,4
    2e70:	d9002e15 	stw	r4,184(sp)
    2e74:	11400015 	stw	r5,0(r2)
    2e78:	0038ab06 	br	1128 <__alt_exception_stack_pointer+0xf8001128>
    2e7c:	dd802617 	ldw	r22,152(sp)
    2e80:	00bfff44 	movi	r2,-3
    2e84:	b0801c16 	blt	r22,r2,2ef8 <___vfprintf_internal_r+0x1eb0>
    2e88:	d9402a17 	ldw	r5,168(sp)
    2e8c:	2d801a16 	blt	r5,r22,2ef8 <___vfprintf_internal_r+0x1eb0>
    2e90:	dd803215 	stw	r22,200(sp)
    2e94:	003e8906 	br	28bc <__alt_exception_stack_pointer+0xf80028bc>
    2e98:	01000074 	movhi	r4,1
    2e9c:	213efc84 	addi	r4,r4,-1038
    2ea0:	d9002c15 	stw	r4,176(sp)
    2ea4:	003c9106 	br	20ec <__alt_exception_stack_pointer+0xf80020ec>
    2ea8:	e005883a 	mov	r2,fp
    2eac:	003e7906 	br	2894 <__alt_exception_stack_pointer+0xf8002894>
    2eb0:	d9002a17 	ldw	r4,168(sp)
    2eb4:	df002783 	ldbu	fp,158(sp)
    2eb8:	dcc02e15 	stw	r19,184(sp)
    2ebc:	d9002915 	stw	r4,164(sp)
    2ec0:	d9002b15 	stw	r4,172(sp)
    2ec4:	d8002a15 	stw	zero,168(sp)
    2ec8:	d8003215 	stw	zero,200(sp)
    2ecc:	003a3b06 	br	17bc <__alt_exception_stack_pointer+0xf80017bc>
    2ed0:	9080004c 	andi	r2,r18,1
    2ed4:	0039883a 	mov	fp,zero
    2ed8:	10000426 	beq	r2,zero,2eec <___vfprintf_internal_r+0x1ea4>
    2edc:	00800c04 	movi	r2,48
    2ee0:	dc001dc4 	addi	r16,sp,119
    2ee4:	d8801dc5 	stb	r2,119(sp)
    2ee8:	003b6406 	br	1c7c <__alt_exception_stack_pointer+0xf8001c7c>
    2eec:	d8002b15 	stw	zero,172(sp)
    2ef0:	dc001e04 	addi	r16,sp,120
    2ef4:	003a2b06 	br	17a4 <__alt_exception_stack_pointer+0xf80017a4>
    2ef8:	8c7fff84 	addi	r17,r17,-2
    2efc:	b5bfffc4 	addi	r22,r22,-1
    2f00:	dd802615 	stw	r22,152(sp)
    2f04:	dc4022c5 	stb	r17,139(sp)
    2f08:	b000bf16 	blt	r22,zero,3208 <___vfprintf_internal_r+0x21c0>
    2f0c:	00800ac4 	movi	r2,43
    2f10:	d8802305 	stb	r2,140(sp)
    2f14:	00800244 	movi	r2,9
    2f18:	15807016 	blt	r2,r22,30dc <___vfprintf_internal_r+0x2094>
    2f1c:	00800c04 	movi	r2,48
    2f20:	b5800c04 	addi	r22,r22,48
    2f24:	d8802345 	stb	r2,141(sp)
    2f28:	dd802385 	stb	r22,142(sp)
    2f2c:	d88023c4 	addi	r2,sp,143
    2f30:	df0022c4 	addi	fp,sp,139
    2f34:	d8c03317 	ldw	r3,204(sp)
    2f38:	1739c83a 	sub	fp,r2,fp
    2f3c:	d9003317 	ldw	r4,204(sp)
    2f40:	e0c7883a 	add	r3,fp,r3
    2f44:	df003a15 	stw	fp,232(sp)
    2f48:	d8c02b15 	stw	r3,172(sp)
    2f4c:	00800044 	movi	r2,1
    2f50:	1100b30e 	bge	r2,r4,3220 <___vfprintf_internal_r+0x21d8>
    2f54:	d8c02b17 	ldw	r3,172(sp)
    2f58:	18c00044 	addi	r3,r3,1
    2f5c:	d8c02b15 	stw	r3,172(sp)
    2f60:	1805883a 	mov	r2,r3
    2f64:	1800ac16 	blt	r3,zero,3218 <___vfprintf_internal_r+0x21d0>
    2f68:	d8003215 	stw	zero,200(sp)
    2f6c:	003e5d06 	br	28e4 <__alt_exception_stack_pointer+0xf80028e4>
    2f70:	d9002d17 	ldw	r4,180(sp)
    2f74:	d9801e04 	addi	r6,sp,120
    2f78:	b80b883a 	mov	r5,r23
    2f7c:	00074d80 	call	74d8 <__sprint_r>
    2f80:	1039351e 	bne	r2,zero,1458 <__alt_exception_stack_pointer+0xf8001458>
    2f84:	dc402617 	ldw	r17,152(sp)
    2f88:	d8c02017 	ldw	r3,128(sp)
    2f8c:	d8801f17 	ldw	r2,124(sp)
    2f90:	da000404 	addi	r8,sp,16
    2f94:	003ed606 	br	2af0 <__alt_exception_stack_pointer+0xf8002af0>
    2f98:	182b883a 	mov	r21,r3
    2f9c:	d8002a15 	stw	zero,168(sp)
    2fa0:	00388c06 	br	11d4 <__alt_exception_stack_pointer+0xf80011d4>
    2fa4:	d8802a17 	ldw	r2,168(sp)
    2fa8:	103e071e 	bne	r2,zero,27c8 <__alt_exception_stack_pointer+0xf80027c8>
    2fac:	dc002a15 	stw	r16,168(sp)
    2fb0:	003e0506 	br	27c8 <__alt_exception_stack_pointer+0xf80027c8>
    2fb4:	d9002a17 	ldw	r4,168(sp)
    2fb8:	20c00044 	addi	r3,r4,1
    2fbc:	003e0f06 	br	27fc <__alt_exception_stack_pointer+0xf80027fc>
    2fc0:	01400184 	movi	r5,6
    2fc4:	d9402a15 	stw	r5,168(sp)
    2fc8:	003dff06 	br	27c8 <__alt_exception_stack_pointer+0xf80027c8>
    2fcc:	d8802104 	addi	r2,sp,132
    2fd0:	d8800315 	stw	r2,12(sp)
    2fd4:	d8802504 	addi	r2,sp,148
    2fd8:	d8800215 	stw	r2,8(sp)
    2fdc:	d8802604 	addi	r2,sp,152
    2fe0:	d8800115 	stw	r2,4(sp)
    2fe4:	d8802a17 	ldw	r2,168(sp)
    2fe8:	d9403617 	ldw	r5,216(sp)
    2fec:	d9002d17 	ldw	r4,180(sp)
    2ff0:	d8800015 	stw	r2,0(sp)
    2ff4:	01c000c4 	movi	r7,3
    2ff8:	980d883a 	mov	r6,r19
    2ffc:	da003d15 	stw	r8,244(sp)
    3000:	00037780 	call	3778 <_dtoa_r>
    3004:	d8c02a17 	ldw	r3,168(sp)
    3008:	da003d17 	ldw	r8,244(sp)
    300c:	1021883a 	mov	r16,r2
    3010:	10f9883a 	add	fp,r2,r3
    3014:	81000007 	ldb	r4,0(r16)
    3018:	00800c04 	movi	r2,48
    301c:	20805e26 	beq	r4,r2,3198 <___vfprintf_internal_r+0x2150>
    3020:	d8c02617 	ldw	r3,152(sp)
    3024:	e0f9883a 	add	fp,fp,r3
    3028:	003e0a06 	br	2854 <__alt_exception_stack_pointer+0xf8002854>
    302c:	00c00b44 	movi	r3,45
    3030:	24e0003c 	xorhi	r19,r4,32768
    3034:	d8c02905 	stb	r3,164(sp)
    3038:	003de906 	br	27e0 <__alt_exception_stack_pointer+0xf80027e0>
    303c:	d8c03217 	ldw	r3,200(sp)
    3040:	00c07a0e 	bge	zero,r3,322c <___vfprintf_internal_r+0x21e4>
    3044:	00800044 	movi	r2,1
    3048:	d9003317 	ldw	r4,204(sp)
    304c:	1105883a 	add	r2,r2,r4
    3050:	d8802b15 	stw	r2,172(sp)
    3054:	10004e16 	blt	r2,zero,3190 <___vfprintf_internal_r+0x2148>
    3058:	044019c4 	movi	r17,103
    305c:	003e2106 	br	28e4 <__alt_exception_stack_pointer+0xf80028e4>
    3060:	d9002a17 	ldw	r4,168(sp)
    3064:	d8802104 	addi	r2,sp,132
    3068:	d8800315 	stw	r2,12(sp)
    306c:	d9000015 	stw	r4,0(sp)
    3070:	d8802504 	addi	r2,sp,148
    3074:	d9403617 	ldw	r5,216(sp)
    3078:	d9002d17 	ldw	r4,180(sp)
    307c:	d8800215 	stw	r2,8(sp)
    3080:	d8802604 	addi	r2,sp,152
    3084:	d8800115 	stw	r2,4(sp)
    3088:	01c000c4 	movi	r7,3
    308c:	980d883a 	mov	r6,r19
    3090:	da003d15 	stw	r8,244(sp)
    3094:	00037780 	call	3778 <_dtoa_r>
    3098:	d8c02a17 	ldw	r3,168(sp)
    309c:	da003d17 	ldw	r8,244(sp)
    30a0:	1021883a 	mov	r16,r2
    30a4:	00801184 	movi	r2,70
    30a8:	80f9883a 	add	fp,r16,r3
    30ac:	88bfd926 	beq	r17,r2,3014 <__alt_exception_stack_pointer+0xf8003014>
    30b0:	003de806 	br	2854 <__alt_exception_stack_pointer+0xf8002854>
    30b4:	d9002a17 	ldw	r4,168(sp)
    30b8:	00c04d0e 	bge	zero,r3,31f0 <___vfprintf_internal_r+0x21a8>
    30bc:	2000441e 	bne	r4,zero,31d0 <___vfprintf_internal_r+0x2188>
    30c0:	9480004c 	andi	r18,r18,1
    30c4:	9000421e 	bne	r18,zero,31d0 <___vfprintf_internal_r+0x2188>
    30c8:	1805883a 	mov	r2,r3
    30cc:	18006f16 	blt	r3,zero,328c <___vfprintf_internal_r+0x2244>
    30d0:	d8c03217 	ldw	r3,200(sp)
    30d4:	d8c02b15 	stw	r3,172(sp)
    30d8:	003e0206 	br	28e4 <__alt_exception_stack_pointer+0xf80028e4>
    30dc:	df0022c4 	addi	fp,sp,139
    30e0:	dc002a15 	stw	r16,168(sp)
    30e4:	4027883a 	mov	r19,r8
    30e8:	e021883a 	mov	r16,fp
    30ec:	b009883a 	mov	r4,r22
    30f0:	01400284 	movi	r5,10
    30f4:	00005fc0 	call	5fc <__modsi3>
    30f8:	10800c04 	addi	r2,r2,48
    30fc:	843fffc4 	addi	r16,r16,-1
    3100:	b009883a 	mov	r4,r22
    3104:	01400284 	movi	r5,10
    3108:	80800005 	stb	r2,0(r16)
    310c:	00005780 	call	578 <__divsi3>
    3110:	102d883a 	mov	r22,r2
    3114:	00800244 	movi	r2,9
    3118:	15bff416 	blt	r2,r22,30ec <__alt_exception_stack_pointer+0xf80030ec>
    311c:	9811883a 	mov	r8,r19
    3120:	b0800c04 	addi	r2,r22,48
    3124:	8027883a 	mov	r19,r16
    3128:	997fffc4 	addi	r5,r19,-1
    312c:	98bfffc5 	stb	r2,-1(r19)
    3130:	dc002a17 	ldw	r16,168(sp)
    3134:	2f006d2e 	bgeu	r5,fp,32ec <___vfprintf_internal_r+0x22a4>
    3138:	d9c02384 	addi	r7,sp,142
    313c:	3ccfc83a 	sub	r7,r7,r19
    3140:	d9002344 	addi	r4,sp,141
    3144:	e1cf883a 	add	r7,fp,r7
    3148:	00000106 	br	3150 <___vfprintf_internal_r+0x2108>
    314c:	28800003 	ldbu	r2,0(r5)
    3150:	20800005 	stb	r2,0(r4)
    3154:	21000044 	addi	r4,r4,1
    3158:	29400044 	addi	r5,r5,1
    315c:	393ffb1e 	bne	r7,r4,314c <__alt_exception_stack_pointer+0xf800314c>
    3160:	d8802304 	addi	r2,sp,140
    3164:	14c5c83a 	sub	r2,r2,r19
    3168:	d8c02344 	addi	r3,sp,141
    316c:	1885883a 	add	r2,r3,r2
    3170:	003f7006 	br	2f34 <__alt_exception_stack_pointer+0xf8002f34>
    3174:	0005883a 	mov	r2,zero
    3178:	003f0f06 	br	2db8 <__alt_exception_stack_pointer+0xf8002db8>
    317c:	d8c03217 	ldw	r3,200(sp)
    3180:	18c00044 	addi	r3,r3,1
    3184:	d8c02b15 	stw	r3,172(sp)
    3188:	1805883a 	mov	r2,r3
    318c:	183fb20e 	bge	r3,zero,3058 <__alt_exception_stack_pointer+0xf8003058>
    3190:	0005883a 	mov	r2,zero
    3194:	003fb006 	br	3058 <__alt_exception_stack_pointer+0xf8003058>
    3198:	d9003617 	ldw	r4,216(sp)
    319c:	000d883a 	mov	r6,zero
    31a0:	000f883a 	mov	r7,zero
    31a4:	980b883a 	mov	r5,r19
    31a8:	d8c03c15 	stw	r3,240(sp)
    31ac:	da003d15 	stw	r8,244(sp)
    31b0:	000bde40 	call	bde4 <__eqdf2>
    31b4:	d8c03c17 	ldw	r3,240(sp)
    31b8:	da003d17 	ldw	r8,244(sp)
    31bc:	103f9826 	beq	r2,zero,3020 <__alt_exception_stack_pointer+0xf8003020>
    31c0:	00800044 	movi	r2,1
    31c4:	10c7c83a 	sub	r3,r2,r3
    31c8:	d8c02615 	stw	r3,152(sp)
    31cc:	003f9506 	br	3024 <__alt_exception_stack_pointer+0xf8003024>
    31d0:	d9002a17 	ldw	r4,168(sp)
    31d4:	d8c03217 	ldw	r3,200(sp)
    31d8:	20800044 	addi	r2,r4,1
    31dc:	1885883a 	add	r2,r3,r2
    31e0:	d8802b15 	stw	r2,172(sp)
    31e4:	103dbf0e 	bge	r2,zero,28e4 <__alt_exception_stack_pointer+0xf80028e4>
    31e8:	0005883a 	mov	r2,zero
    31ec:	003dbd06 	br	28e4 <__alt_exception_stack_pointer+0xf80028e4>
    31f0:	2000201e 	bne	r4,zero,3274 <___vfprintf_internal_r+0x222c>
    31f4:	9480004c 	andi	r18,r18,1
    31f8:	90001e1e 	bne	r18,zero,3274 <___vfprintf_internal_r+0x222c>
    31fc:	00800044 	movi	r2,1
    3200:	d8802b15 	stw	r2,172(sp)
    3204:	003db706 	br	28e4 <__alt_exception_stack_pointer+0xf80028e4>
    3208:	00800b44 	movi	r2,45
    320c:	05adc83a 	sub	r22,zero,r22
    3210:	d8802305 	stb	r2,140(sp)
    3214:	003f3f06 	br	2f14 <__alt_exception_stack_pointer+0xf8002f14>
    3218:	0005883a 	mov	r2,zero
    321c:	003f5206 	br	2f68 <__alt_exception_stack_pointer+0xf8002f68>
    3220:	90a4703a 	and	r18,r18,r2
    3224:	903f4e26 	beq	r18,zero,2f60 <__alt_exception_stack_pointer+0xf8002f60>
    3228:	003f4a06 	br	2f54 <__alt_exception_stack_pointer+0xf8002f54>
    322c:	00800084 	movi	r2,2
    3230:	10c5c83a 	sub	r2,r2,r3
    3234:	003f8406 	br	3048 <__alt_exception_stack_pointer+0xf8003048>
    3238:	d9402e17 	ldw	r5,184(sp)
    323c:	d9002e17 	ldw	r4,184(sp)
    3240:	ac400043 	ldbu	r17,1(r21)
    3244:	29400017 	ldw	r5,0(r5)
    3248:	20800104 	addi	r2,r4,4
    324c:	d8802e15 	stw	r2,184(sp)
    3250:	d9402a15 	stw	r5,168(sp)
    3254:	182b883a 	mov	r21,r3
    3258:	283e7b0e 	bge	r5,zero,2c48 <__alt_exception_stack_pointer+0xf8002c48>
    325c:	8c403fcc 	andi	r17,r17,255
    3260:	017fffc4 	movi	r5,-1
    3264:	8c40201c 	xori	r17,r17,128
    3268:	d9402a15 	stw	r5,168(sp)
    326c:	8c7fe004 	addi	r17,r17,-128
    3270:	0037d706 	br	11d0 <__alt_exception_stack_pointer+0xf80011d0>
    3274:	d8c02a17 	ldw	r3,168(sp)
    3278:	18c00084 	addi	r3,r3,2
    327c:	d8c02b15 	stw	r3,172(sp)
    3280:	1805883a 	mov	r2,r3
    3284:	183d970e 	bge	r3,zero,28e4 <__alt_exception_stack_pointer+0xf80028e4>
    3288:	003fd706 	br	31e8 <__alt_exception_stack_pointer+0xf80031e8>
    328c:	0005883a 	mov	r2,zero
    3290:	003f8f06 	br	30d0 <__alt_exception_stack_pointer+0xf80030d0>
    3294:	9080004c 	andi	r2,r18,1
    3298:	103f821e 	bne	r2,zero,30a4 <__alt_exception_stack_pointer+0xf80030a4>
    329c:	d8802117 	ldw	r2,132(sp)
    32a0:	1405c83a 	sub	r2,r2,r16
    32a4:	d8803315 	stw	r2,204(sp)
    32a8:	b47ef426 	beq	r22,r17,2e7c <__alt_exception_stack_pointer+0xf8002e7c>
    32ac:	dd802617 	ldw	r22,152(sp)
    32b0:	003f1206 	br	2efc <__alt_exception_stack_pointer+0xf8002efc>
    32b4:	d8c02b03 	ldbu	r3,172(sp)
    32b8:	d8c02785 	stb	r3,158(sp)
    32bc:	0038df06 	br	163c <__alt_exception_stack_pointer+0xf800163c>
    32c0:	d8c02b03 	ldbu	r3,172(sp)
    32c4:	d8c02785 	stb	r3,158(sp)
    32c8:	0038aa06 	br	1574 <__alt_exception_stack_pointer+0xf8001574>
    32cc:	d8c02b03 	ldbu	r3,172(sp)
    32d0:	d8c02785 	stb	r3,158(sp)
    32d4:	003a4306 	br	1be4 <__alt_exception_stack_pointer+0xf8001be4>
    32d8:	d8c02b03 	ldbu	r3,172(sp)
    32dc:	d8c02785 	stb	r3,158(sp)
    32e0:	003af506 	br	1eb8 <__alt_exception_stack_pointer+0xf8001eb8>
    32e4:	0005883a 	mov	r2,zero
    32e8:	003d7b06 	br	28d8 <__alt_exception_stack_pointer+0xf80028d8>
    32ec:	d8802344 	addi	r2,sp,141
    32f0:	003f1006 	br	2f34 <__alt_exception_stack_pointer+0xf8002f34>
    32f4:	d8c02b03 	ldbu	r3,172(sp)
    32f8:	d8c02785 	stb	r3,158(sp)
    32fc:	0038fd06 	br	16f4 <__alt_exception_stack_pointer+0xf80016f4>
    3300:	d8c02b03 	ldbu	r3,172(sp)
    3304:	d8c02785 	stb	r3,158(sp)
    3308:	003a9706 	br	1d68 <__alt_exception_stack_pointer+0xf8001d68>
    330c:	d8c02b03 	ldbu	r3,172(sp)
    3310:	d8c02785 	stb	r3,158(sp)
    3314:	003a1806 	br	1b78 <__alt_exception_stack_pointer+0xf8001b78>
    3318:	d8c02b03 	ldbu	r3,172(sp)
    331c:	d8c02785 	stb	r3,158(sp)
    3320:	003abe06 	br	1e1c <__alt_exception_stack_pointer+0xf8001e1c>

00003324 <__vfprintf_internal>:
    3324:	00800074 	movhi	r2,1
    3328:	10865c04 	addi	r2,r2,6512
    332c:	300f883a 	mov	r7,r6
    3330:	280d883a 	mov	r6,r5
    3334:	200b883a 	mov	r5,r4
    3338:	11000017 	ldw	r4,0(r2)
    333c:	00010481 	jmpi	1048 <___vfprintf_internal_r>

00003340 <__sbprintf>:
    3340:	2880030b 	ldhu	r2,12(r5)
    3344:	2ac01917 	ldw	r11,100(r5)
    3348:	2a80038b 	ldhu	r10,14(r5)
    334c:	2a400717 	ldw	r9,28(r5)
    3350:	2a000917 	ldw	r8,36(r5)
    3354:	defee204 	addi	sp,sp,-1144
    3358:	00c10004 	movi	r3,1024
    335c:	dc011a15 	stw	r16,1128(sp)
    3360:	10bfff4c 	andi	r2,r2,65533
    3364:	2821883a 	mov	r16,r5
    3368:	d8cb883a 	add	r5,sp,r3
    336c:	dc811c15 	stw	r18,1136(sp)
    3370:	dc411b15 	stw	r17,1132(sp)
    3374:	dfc11d15 	stw	ra,1140(sp)
    3378:	2025883a 	mov	r18,r4
    337c:	d881030d 	sth	r2,1036(sp)
    3380:	dac11915 	stw	r11,1124(sp)
    3384:	da81038d 	sth	r10,1038(sp)
    3388:	da410715 	stw	r9,1052(sp)
    338c:	da010915 	stw	r8,1060(sp)
    3390:	dec10015 	stw	sp,1024(sp)
    3394:	dec10415 	stw	sp,1040(sp)
    3398:	d8c10215 	stw	r3,1032(sp)
    339c:	d8c10515 	stw	r3,1044(sp)
    33a0:	d8010615 	stw	zero,1048(sp)
    33a4:	00010480 	call	1048 <___vfprintf_internal_r>
    33a8:	1023883a 	mov	r17,r2
    33ac:	10000416 	blt	r2,zero,33c0 <__sbprintf+0x80>
    33b0:	d9410004 	addi	r5,sp,1024
    33b4:	9009883a 	mov	r4,r18
    33b8:	000501c0 	call	501c <_fflush_r>
    33bc:	10000d1e 	bne	r2,zero,33f4 <__sbprintf+0xb4>
    33c0:	d881030b 	ldhu	r2,1036(sp)
    33c4:	1080100c 	andi	r2,r2,64
    33c8:	10000326 	beq	r2,zero,33d8 <__sbprintf+0x98>
    33cc:	8080030b 	ldhu	r2,12(r16)
    33d0:	10801014 	ori	r2,r2,64
    33d4:	8080030d 	sth	r2,12(r16)
    33d8:	8805883a 	mov	r2,r17
    33dc:	dfc11d17 	ldw	ra,1140(sp)
    33e0:	dc811c17 	ldw	r18,1136(sp)
    33e4:	dc411b17 	ldw	r17,1132(sp)
    33e8:	dc011a17 	ldw	r16,1128(sp)
    33ec:	dec11e04 	addi	sp,sp,1144
    33f0:	f800283a 	ret
    33f4:	047fffc4 	movi	r17,-1
    33f8:	003ff106 	br	33c0 <__alt_exception_stack_pointer+0xf80033c0>

000033fc <__swsetup_r>:
    33fc:	00800074 	movhi	r2,1
    3400:	defffd04 	addi	sp,sp,-12
    3404:	10865c04 	addi	r2,r2,6512
    3408:	dc400115 	stw	r17,4(sp)
    340c:	2023883a 	mov	r17,r4
    3410:	11000017 	ldw	r4,0(r2)
    3414:	dc000015 	stw	r16,0(sp)
    3418:	dfc00215 	stw	ra,8(sp)
    341c:	2821883a 	mov	r16,r5
    3420:	20000226 	beq	r4,zero,342c <__swsetup_r+0x30>
    3424:	20800e17 	ldw	r2,56(r4)
    3428:	10003126 	beq	r2,zero,34f0 <__swsetup_r+0xf4>
    342c:	8080030b 	ldhu	r2,12(r16)
    3430:	10c0020c 	andi	r3,r2,8
    3434:	1009883a 	mov	r4,r2
    3438:	18000f26 	beq	r3,zero,3478 <__swsetup_r+0x7c>
    343c:	80c00417 	ldw	r3,16(r16)
    3440:	18001526 	beq	r3,zero,3498 <__swsetup_r+0x9c>
    3444:	1100004c 	andi	r4,r2,1
    3448:	20001c1e 	bne	r4,zero,34bc <__swsetup_r+0xc0>
    344c:	1080008c 	andi	r2,r2,2
    3450:	1000291e 	bne	r2,zero,34f8 <__swsetup_r+0xfc>
    3454:	80800517 	ldw	r2,20(r16)
    3458:	80800215 	stw	r2,8(r16)
    345c:	18001c26 	beq	r3,zero,34d0 <__swsetup_r+0xd4>
    3460:	0005883a 	mov	r2,zero
    3464:	dfc00217 	ldw	ra,8(sp)
    3468:	dc400117 	ldw	r17,4(sp)
    346c:	dc000017 	ldw	r16,0(sp)
    3470:	dec00304 	addi	sp,sp,12
    3474:	f800283a 	ret
    3478:	2080040c 	andi	r2,r4,16
    347c:	10002e26 	beq	r2,zero,3538 <__swsetup_r+0x13c>
    3480:	2080010c 	andi	r2,r4,4
    3484:	10001e1e 	bne	r2,zero,3500 <__swsetup_r+0x104>
    3488:	80c00417 	ldw	r3,16(r16)
    348c:	20800214 	ori	r2,r4,8
    3490:	8080030d 	sth	r2,12(r16)
    3494:	183feb1e 	bne	r3,zero,3444 <__alt_exception_stack_pointer+0xf8003444>
    3498:	1100a00c 	andi	r4,r2,640
    349c:	01408004 	movi	r5,512
    34a0:	217fe826 	beq	r4,r5,3444 <__alt_exception_stack_pointer+0xf8003444>
    34a4:	800b883a 	mov	r5,r16
    34a8:	8809883a 	mov	r4,r17
    34ac:	0005af00 	call	5af0 <__smakebuf_r>
    34b0:	8080030b 	ldhu	r2,12(r16)
    34b4:	80c00417 	ldw	r3,16(r16)
    34b8:	003fe206 	br	3444 <__alt_exception_stack_pointer+0xf8003444>
    34bc:	80800517 	ldw	r2,20(r16)
    34c0:	80000215 	stw	zero,8(r16)
    34c4:	0085c83a 	sub	r2,zero,r2
    34c8:	80800615 	stw	r2,24(r16)
    34cc:	183fe41e 	bne	r3,zero,3460 <__alt_exception_stack_pointer+0xf8003460>
    34d0:	80c0030b 	ldhu	r3,12(r16)
    34d4:	0005883a 	mov	r2,zero
    34d8:	1900200c 	andi	r4,r3,128
    34dc:	203fe126 	beq	r4,zero,3464 <__alt_exception_stack_pointer+0xf8003464>
    34e0:	18c01014 	ori	r3,r3,64
    34e4:	80c0030d 	sth	r3,12(r16)
    34e8:	00bfffc4 	movi	r2,-1
    34ec:	003fdd06 	br	3464 <__alt_exception_stack_pointer+0xf8003464>
    34f0:	00054080 	call	5408 <__sinit>
    34f4:	003fcd06 	br	342c <__alt_exception_stack_pointer+0xf800342c>
    34f8:	0005883a 	mov	r2,zero
    34fc:	003fd606 	br	3458 <__alt_exception_stack_pointer+0xf8003458>
    3500:	81400c17 	ldw	r5,48(r16)
    3504:	28000626 	beq	r5,zero,3520 <__swsetup_r+0x124>
    3508:	80801004 	addi	r2,r16,64
    350c:	28800326 	beq	r5,r2,351c <__swsetup_r+0x120>
    3510:	8809883a 	mov	r4,r17
    3514:	000557c0 	call	557c <_free_r>
    3518:	8100030b 	ldhu	r4,12(r16)
    351c:	80000c15 	stw	zero,48(r16)
    3520:	80c00417 	ldw	r3,16(r16)
    3524:	00bff6c4 	movi	r2,-37
    3528:	1108703a 	and	r4,r2,r4
    352c:	80000115 	stw	zero,4(r16)
    3530:	80c00015 	stw	r3,0(r16)
    3534:	003fd506 	br	348c <__alt_exception_stack_pointer+0xf800348c>
    3538:	00800244 	movi	r2,9
    353c:	88800015 	stw	r2,0(r17)
    3540:	20801014 	ori	r2,r4,64
    3544:	8080030d 	sth	r2,12(r16)
    3548:	00bfffc4 	movi	r2,-1
    354c:	003fc506 	br	3464 <__alt_exception_stack_pointer+0xf8003464>

00003550 <quorem>:
    3550:	defff204 	addi	sp,sp,-56
    3554:	ddc00b15 	stw	r23,44(sp)
    3558:	20800417 	ldw	r2,16(r4)
    355c:	2dc00417 	ldw	r23,16(r5)
    3560:	dfc00d15 	stw	ra,52(sp)
    3564:	df000c15 	stw	fp,48(sp)
    3568:	dd800a15 	stw	r22,40(sp)
    356c:	dd400915 	stw	r21,36(sp)
    3570:	dd000815 	stw	r20,32(sp)
    3574:	dcc00715 	stw	r19,28(sp)
    3578:	dc800615 	stw	r18,24(sp)
    357c:	dc400515 	stw	r17,20(sp)
    3580:	dc000415 	stw	r16,16(sp)
    3584:	15c07a16 	blt	r2,r23,3770 <quorem+0x220>
    3588:	bdffffc4 	addi	r23,r23,-1
    358c:	bde9883a 	add	r20,r23,r23
    3590:	28c00504 	addi	r3,r5,20
    3594:	a529883a 	add	r20,r20,r20
    3598:	1d39883a 	add	fp,r3,r20
    359c:	24c00504 	addi	r19,r4,20
    35a0:	d9400215 	stw	r5,8(sp)
    35a4:	9d29883a 	add	r20,r19,r20
    35a8:	e1400017 	ldw	r5,0(fp)
    35ac:	d9000015 	stw	r4,0(sp)
    35b0:	a1000017 	ldw	r4,0(r20)
    35b4:	29400044 	addi	r5,r5,1
    35b8:	d8c00115 	stw	r3,4(sp)
    35bc:	dd000315 	stw	r20,12(sp)
    35c0:	00006700 	call	670 <__udivsi3>
    35c4:	1025883a 	mov	r18,r2
    35c8:	10003026 	beq	r2,zero,368c <quorem+0x13c>
    35cc:	dc400117 	ldw	r17,4(sp)
    35d0:	9829883a 	mov	r20,r19
    35d4:	002d883a 	mov	r22,zero
    35d8:	0021883a 	mov	r16,zero
    35dc:	8d400017 	ldw	r21,0(r17)
    35e0:	900b883a 	mov	r5,r18
    35e4:	8c400104 	addi	r17,r17,4
    35e8:	a93fffcc 	andi	r4,r21,65535
    35ec:	000072c0 	call	72c <__mulsi3>
    35f0:	a808d43a 	srli	r4,r21,16
    35f4:	900b883a 	mov	r5,r18
    35f8:	15ad883a 	add	r22,r2,r22
    35fc:	000072c0 	call	72c <__mulsi3>
    3600:	a1000017 	ldw	r4,0(r20)
    3604:	b00cd43a 	srli	r6,r22,16
    3608:	b0ffffcc 	andi	r3,r22,65535
    360c:	217fffcc 	andi	r5,r4,65535
    3610:	2c21883a 	add	r16,r5,r16
    3614:	80c7c83a 	sub	r3,r16,r3
    3618:	2008d43a 	srli	r4,r4,16
    361c:	1185883a 	add	r2,r2,r6
    3620:	1821d43a 	srai	r16,r3,16
    3624:	117fffcc 	andi	r5,r2,65535
    3628:	2149c83a 	sub	r4,r4,r5
    362c:	2421883a 	add	r16,r4,r16
    3630:	8008943a 	slli	r4,r16,16
    3634:	18ffffcc 	andi	r3,r3,65535
    3638:	102cd43a 	srli	r22,r2,16
    363c:	20c8b03a 	or	r4,r4,r3
    3640:	a1000015 	stw	r4,0(r20)
    3644:	8021d43a 	srai	r16,r16,16
    3648:	a5000104 	addi	r20,r20,4
    364c:	e47fe32e 	bgeu	fp,r17,35dc <__alt_exception_stack_pointer+0xf80035dc>
    3650:	d8c00317 	ldw	r3,12(sp)
    3654:	18800017 	ldw	r2,0(r3)
    3658:	10000c1e 	bne	r2,zero,368c <quorem+0x13c>
    365c:	18bfff04 	addi	r2,r3,-4
    3660:	9880082e 	bgeu	r19,r2,3684 <quorem+0x134>
    3664:	18ffff17 	ldw	r3,-4(r3)
    3668:	18000326 	beq	r3,zero,3678 <quorem+0x128>
    366c:	00000506 	br	3684 <quorem+0x134>
    3670:	10c00017 	ldw	r3,0(r2)
    3674:	1800031e 	bne	r3,zero,3684 <quorem+0x134>
    3678:	10bfff04 	addi	r2,r2,-4
    367c:	bdffffc4 	addi	r23,r23,-1
    3680:	98bffb36 	bltu	r19,r2,3670 <__alt_exception_stack_pointer+0xf8003670>
    3684:	d8c00017 	ldw	r3,0(sp)
    3688:	1dc00415 	stw	r23,16(r3)
    368c:	d9400217 	ldw	r5,8(sp)
    3690:	d9000017 	ldw	r4,0(sp)
    3694:	00069840 	call	6984 <__mcmp>
    3698:	10002816 	blt	r2,zero,373c <quorem+0x1ec>
    369c:	dc400117 	ldw	r17,4(sp)
    36a0:	94800044 	addi	r18,r18,1
    36a4:	980d883a 	mov	r6,r19
    36a8:	0007883a 	mov	r3,zero
    36ac:	31000017 	ldw	r4,0(r6)
    36b0:	89400017 	ldw	r5,0(r17)
    36b4:	31800104 	addi	r6,r6,4
    36b8:	20bfffcc 	andi	r2,r4,65535
    36bc:	10c7883a 	add	r3,r2,r3
    36c0:	28bfffcc 	andi	r2,r5,65535
    36c4:	1885c83a 	sub	r2,r3,r2
    36c8:	280ad43a 	srli	r5,r5,16
    36cc:	2008d43a 	srli	r4,r4,16
    36d0:	1007d43a 	srai	r3,r2,16
    36d4:	10bfffcc 	andi	r2,r2,65535
    36d8:	2149c83a 	sub	r4,r4,r5
    36dc:	20c9883a 	add	r4,r4,r3
    36e0:	200a943a 	slli	r5,r4,16
    36e4:	8c400104 	addi	r17,r17,4
    36e8:	2007d43a 	srai	r3,r4,16
    36ec:	2884b03a 	or	r2,r5,r2
    36f0:	30bfff15 	stw	r2,-4(r6)
    36f4:	e47fed2e 	bgeu	fp,r17,36ac <__alt_exception_stack_pointer+0xf80036ac>
    36f8:	bdc5883a 	add	r2,r23,r23
    36fc:	1085883a 	add	r2,r2,r2
    3700:	9887883a 	add	r3,r19,r2
    3704:	18800017 	ldw	r2,0(r3)
    3708:	10000c1e 	bne	r2,zero,373c <quorem+0x1ec>
    370c:	18bfff04 	addi	r2,r3,-4
    3710:	9880082e 	bgeu	r19,r2,3734 <quorem+0x1e4>
    3714:	18ffff17 	ldw	r3,-4(r3)
    3718:	18000326 	beq	r3,zero,3728 <quorem+0x1d8>
    371c:	00000506 	br	3734 <quorem+0x1e4>
    3720:	10c00017 	ldw	r3,0(r2)
    3724:	1800031e 	bne	r3,zero,3734 <quorem+0x1e4>
    3728:	10bfff04 	addi	r2,r2,-4
    372c:	bdffffc4 	addi	r23,r23,-1
    3730:	98bffb36 	bltu	r19,r2,3720 <__alt_exception_stack_pointer+0xf8003720>
    3734:	d8c00017 	ldw	r3,0(sp)
    3738:	1dc00415 	stw	r23,16(r3)
    373c:	9005883a 	mov	r2,r18
    3740:	dfc00d17 	ldw	ra,52(sp)
    3744:	df000c17 	ldw	fp,48(sp)
    3748:	ddc00b17 	ldw	r23,44(sp)
    374c:	dd800a17 	ldw	r22,40(sp)
    3750:	dd400917 	ldw	r21,36(sp)
    3754:	dd000817 	ldw	r20,32(sp)
    3758:	dcc00717 	ldw	r19,28(sp)
    375c:	dc800617 	ldw	r18,24(sp)
    3760:	dc400517 	ldw	r17,20(sp)
    3764:	dc000417 	ldw	r16,16(sp)
    3768:	dec00e04 	addi	sp,sp,56
    376c:	f800283a 	ret
    3770:	0005883a 	mov	r2,zero
    3774:	003ff206 	br	3740 <__alt_exception_stack_pointer+0xf8003740>

00003778 <_dtoa_r>:
    3778:	20801017 	ldw	r2,64(r4)
    377c:	deffde04 	addi	sp,sp,-136
    3780:	df002015 	stw	fp,128(sp)
    3784:	dcc01b15 	stw	r19,108(sp)
    3788:	dc801a15 	stw	r18,104(sp)
    378c:	dc401915 	stw	r17,100(sp)
    3790:	dc001815 	stw	r16,96(sp)
    3794:	dfc02115 	stw	ra,132(sp)
    3798:	ddc01f15 	stw	r23,124(sp)
    379c:	dd801e15 	stw	r22,120(sp)
    37a0:	dd401d15 	stw	r21,116(sp)
    37a4:	dd001c15 	stw	r20,112(sp)
    37a8:	d9c00315 	stw	r7,12(sp)
    37ac:	2039883a 	mov	fp,r4
    37b0:	3023883a 	mov	r17,r6
    37b4:	2825883a 	mov	r18,r5
    37b8:	dc002417 	ldw	r16,144(sp)
    37bc:	3027883a 	mov	r19,r6
    37c0:	10000826 	beq	r2,zero,37e4 <_dtoa_r+0x6c>
    37c4:	21801117 	ldw	r6,68(r4)
    37c8:	00c00044 	movi	r3,1
    37cc:	100b883a 	mov	r5,r2
    37d0:	1986983a 	sll	r3,r3,r6
    37d4:	11800115 	stw	r6,4(r2)
    37d8:	10c00215 	stw	r3,8(r2)
    37dc:	00060a80 	call	60a8 <_Bfree>
    37e0:	e0001015 	stw	zero,64(fp)
    37e4:	88002e16 	blt	r17,zero,38a0 <_dtoa_r+0x128>
    37e8:	80000015 	stw	zero,0(r16)
    37ec:	889ffc2c 	andhi	r2,r17,32752
    37f0:	00dffc34 	movhi	r3,32752
    37f4:	10c01c26 	beq	r2,r3,3868 <_dtoa_r+0xf0>
    37f8:	000d883a 	mov	r6,zero
    37fc:	000f883a 	mov	r7,zero
    3800:	9009883a 	mov	r4,r18
    3804:	980b883a 	mov	r5,r19
    3808:	000bde40 	call	bde4 <__eqdf2>
    380c:	10002b1e 	bne	r2,zero,38bc <_dtoa_r+0x144>
    3810:	d9c02317 	ldw	r7,140(sp)
    3814:	00800044 	movi	r2,1
    3818:	38800015 	stw	r2,0(r7)
    381c:	d8802517 	ldw	r2,148(sp)
    3820:	10019e26 	beq	r2,zero,3e9c <_dtoa_r+0x724>
    3824:	d8c02517 	ldw	r3,148(sp)
    3828:	00800074 	movhi	r2,1
    382c:	10befc44 	addi	r2,r2,-1039
    3830:	18800015 	stw	r2,0(r3)
    3834:	10bfffc4 	addi	r2,r2,-1
    3838:	dfc02117 	ldw	ra,132(sp)
    383c:	df002017 	ldw	fp,128(sp)
    3840:	ddc01f17 	ldw	r23,124(sp)
    3844:	dd801e17 	ldw	r22,120(sp)
    3848:	dd401d17 	ldw	r21,116(sp)
    384c:	dd001c17 	ldw	r20,112(sp)
    3850:	dcc01b17 	ldw	r19,108(sp)
    3854:	dc801a17 	ldw	r18,104(sp)
    3858:	dc401917 	ldw	r17,100(sp)
    385c:	dc001817 	ldw	r16,96(sp)
    3860:	dec02204 	addi	sp,sp,136
    3864:	f800283a 	ret
    3868:	d8c02317 	ldw	r3,140(sp)
    386c:	0089c3c4 	movi	r2,9999
    3870:	18800015 	stw	r2,0(r3)
    3874:	90017726 	beq	r18,zero,3e54 <_dtoa_r+0x6dc>
    3878:	00800074 	movhi	r2,1
    387c:	10bf0804 	addi	r2,r2,-992
    3880:	d9002517 	ldw	r4,148(sp)
    3884:	203fec26 	beq	r4,zero,3838 <__alt_exception_stack_pointer+0xf8003838>
    3888:	10c000c7 	ldb	r3,3(r2)
    388c:	1801781e 	bne	r3,zero,3e70 <_dtoa_r+0x6f8>
    3890:	10c000c4 	addi	r3,r2,3
    3894:	d9802517 	ldw	r6,148(sp)
    3898:	30c00015 	stw	r3,0(r6)
    389c:	003fe606 	br	3838 <__alt_exception_stack_pointer+0xf8003838>
    38a0:	04e00034 	movhi	r19,32768
    38a4:	9cffffc4 	addi	r19,r19,-1
    38a8:	00800044 	movi	r2,1
    38ac:	8ce6703a 	and	r19,r17,r19
    38b0:	80800015 	stw	r2,0(r16)
    38b4:	9823883a 	mov	r17,r19
    38b8:	003fcc06 	br	37ec <__alt_exception_stack_pointer+0xf80037ec>
    38bc:	d8800204 	addi	r2,sp,8
    38c0:	d8800015 	stw	r2,0(sp)
    38c4:	d9c00104 	addi	r7,sp,4
    38c8:	900b883a 	mov	r5,r18
    38cc:	980d883a 	mov	r6,r19
    38d0:	e009883a 	mov	r4,fp
    38d4:	8820d53a 	srli	r16,r17,20
    38d8:	0006d500 	call	6d50 <__d2b>
    38dc:	d8800915 	stw	r2,36(sp)
    38e0:	8001651e 	bne	r16,zero,3e78 <_dtoa_r+0x700>
    38e4:	dd800217 	ldw	r22,8(sp)
    38e8:	dc000117 	ldw	r16,4(sp)
    38ec:	00800804 	movi	r2,32
    38f0:	b421883a 	add	r16,r22,r16
    38f4:	80c10c84 	addi	r3,r16,1074
    38f8:	10c2d10e 	bge	r2,r3,4440 <_dtoa_r+0xcc8>
    38fc:	00801004 	movi	r2,64
    3900:	81010484 	addi	r4,r16,1042
    3904:	10c7c83a 	sub	r3,r2,r3
    3908:	9108d83a 	srl	r4,r18,r4
    390c:	88e2983a 	sll	r17,r17,r3
    3910:	2448b03a 	or	r4,r4,r17
    3914:	000d3000 	call	d300 <__floatunsidf>
    3918:	017f8434 	movhi	r5,65040
    391c:	01800044 	movi	r6,1
    3920:	1009883a 	mov	r4,r2
    3924:	194b883a 	add	r5,r3,r5
    3928:	843fffc4 	addi	r16,r16,-1
    392c:	d9801115 	stw	r6,68(sp)
    3930:	000d883a 	mov	r6,zero
    3934:	01cffe34 	movhi	r7,16376
    3938:	000c8a80 	call	c8a8 <__subdf3>
    393c:	0198dbf4 	movhi	r6,25455
    3940:	01cff4f4 	movhi	r7,16339
    3944:	3190d844 	addi	r6,r6,17249
    3948:	39e1e9c4 	addi	r7,r7,-30809
    394c:	1009883a 	mov	r4,r2
    3950:	180b883a 	mov	r5,r3
    3954:	000c03c0 	call	c03c <__muldf3>
    3958:	01a2d874 	movhi	r6,35681
    395c:	01cff1f4 	movhi	r7,16327
    3960:	31b22cc4 	addi	r6,r6,-14157
    3964:	39e28a04 	addi	r7,r7,-30168
    3968:	180b883a 	mov	r5,r3
    396c:	1009883a 	mov	r4,r2
    3970:	000ab680 	call	ab68 <__adddf3>
    3974:	8009883a 	mov	r4,r16
    3978:	1029883a 	mov	r20,r2
    397c:	1823883a 	mov	r17,r3
    3980:	000d2240 	call	d224 <__floatsidf>
    3984:	019427f4 	movhi	r6,20639
    3988:	01cff4f4 	movhi	r7,16339
    398c:	319e7ec4 	addi	r6,r6,31227
    3990:	39d104c4 	addi	r7,r7,17427
    3994:	1009883a 	mov	r4,r2
    3998:	180b883a 	mov	r5,r3
    399c:	000c03c0 	call	c03c <__muldf3>
    39a0:	100d883a 	mov	r6,r2
    39a4:	180f883a 	mov	r7,r3
    39a8:	a009883a 	mov	r4,r20
    39ac:	880b883a 	mov	r5,r17
    39b0:	000ab680 	call	ab68 <__adddf3>
    39b4:	1009883a 	mov	r4,r2
    39b8:	180b883a 	mov	r5,r3
    39bc:	1029883a 	mov	r20,r2
    39c0:	1823883a 	mov	r17,r3
    39c4:	000d1a40 	call	d1a4 <__fixdfsi>
    39c8:	000d883a 	mov	r6,zero
    39cc:	000f883a 	mov	r7,zero
    39d0:	a009883a 	mov	r4,r20
    39d4:	880b883a 	mov	r5,r17
    39d8:	d8800515 	stw	r2,20(sp)
    39dc:	000bf480 	call	bf48 <__ledf2>
    39e0:	10028716 	blt	r2,zero,4400 <_dtoa_r+0xc88>
    39e4:	d8c00517 	ldw	r3,20(sp)
    39e8:	00800584 	movi	r2,22
    39ec:	10c27536 	bltu	r2,r3,43c4 <_dtoa_r+0xc4c>
    39f0:	180490fa 	slli	r2,r3,3
    39f4:	00c00074 	movhi	r3,1
    39f8:	18ff2404 	addi	r3,r3,-880
    39fc:	1885883a 	add	r2,r3,r2
    3a00:	11000017 	ldw	r4,0(r2)
    3a04:	11400117 	ldw	r5,4(r2)
    3a08:	900d883a 	mov	r6,r18
    3a0c:	980f883a 	mov	r7,r19
    3a10:	000be6c0 	call	be6c <__gedf2>
    3a14:	00828d0e 	bge	zero,r2,444c <_dtoa_r+0xcd4>
    3a18:	d9000517 	ldw	r4,20(sp)
    3a1c:	d8000e15 	stw	zero,56(sp)
    3a20:	213fffc4 	addi	r4,r4,-1
    3a24:	d9000515 	stw	r4,20(sp)
    3a28:	b42dc83a 	sub	r22,r22,r16
    3a2c:	b5bfffc4 	addi	r22,r22,-1
    3a30:	b0026f16 	blt	r22,zero,43f0 <_dtoa_r+0xc78>
    3a34:	d8000815 	stw	zero,32(sp)
    3a38:	d9c00517 	ldw	r7,20(sp)
    3a3c:	38026416 	blt	r7,zero,43d0 <_dtoa_r+0xc58>
    3a40:	b1ed883a 	add	r22,r22,r7
    3a44:	d9c00d15 	stw	r7,52(sp)
    3a48:	d8000a15 	stw	zero,40(sp)
    3a4c:	d9800317 	ldw	r6,12(sp)
    3a50:	00800244 	movi	r2,9
    3a54:	11811436 	bltu	r2,r6,3ea8 <_dtoa_r+0x730>
    3a58:	00800144 	movi	r2,5
    3a5c:	1184e10e 	bge	r2,r6,4de4 <_dtoa_r+0x166c>
    3a60:	31bfff04 	addi	r6,r6,-4
    3a64:	d9800315 	stw	r6,12(sp)
    3a68:	0023883a 	mov	r17,zero
    3a6c:	d9800317 	ldw	r6,12(sp)
    3a70:	008000c4 	movi	r2,3
    3a74:	30836726 	beq	r6,r2,4814 <_dtoa_r+0x109c>
    3a78:	1183410e 	bge	r2,r6,4780 <_dtoa_r+0x1008>
    3a7c:	d9c00317 	ldw	r7,12(sp)
    3a80:	00800104 	movi	r2,4
    3a84:	38827c26 	beq	r7,r2,4478 <_dtoa_r+0xd00>
    3a88:	00800144 	movi	r2,5
    3a8c:	3884c41e 	bne	r7,r2,4da0 <_dtoa_r+0x1628>
    3a90:	00800044 	movi	r2,1
    3a94:	d8800b15 	stw	r2,44(sp)
    3a98:	d8c00517 	ldw	r3,20(sp)
    3a9c:	d9002217 	ldw	r4,136(sp)
    3aa0:	1907883a 	add	r3,r3,r4
    3aa4:	19800044 	addi	r6,r3,1
    3aa8:	d8c00c15 	stw	r3,48(sp)
    3aac:	d9800615 	stw	r6,24(sp)
    3ab0:	0183a40e 	bge	zero,r6,4944 <_dtoa_r+0x11cc>
    3ab4:	d9800617 	ldw	r6,24(sp)
    3ab8:	3021883a 	mov	r16,r6
    3abc:	e0001115 	stw	zero,68(fp)
    3ac0:	008005c4 	movi	r2,23
    3ac4:	1184c92e 	bgeu	r2,r6,4dec <_dtoa_r+0x1674>
    3ac8:	00c00044 	movi	r3,1
    3acc:	00800104 	movi	r2,4
    3ad0:	1085883a 	add	r2,r2,r2
    3ad4:	11000504 	addi	r4,r2,20
    3ad8:	180b883a 	mov	r5,r3
    3adc:	18c00044 	addi	r3,r3,1
    3ae0:	313ffb2e 	bgeu	r6,r4,3ad0 <__alt_exception_stack_pointer+0xf8003ad0>
    3ae4:	e1401115 	stw	r5,68(fp)
    3ae8:	e009883a 	mov	r4,fp
    3aec:	00060000 	call	6000 <_Balloc>
    3af0:	d8800715 	stw	r2,28(sp)
    3af4:	e0801015 	stw	r2,64(fp)
    3af8:	00800384 	movi	r2,14
    3afc:	1400f736 	bltu	r2,r16,3edc <_dtoa_r+0x764>
    3b00:	8800f626 	beq	r17,zero,3edc <_dtoa_r+0x764>
    3b04:	d9c00517 	ldw	r7,20(sp)
    3b08:	01c39a0e 	bge	zero,r7,4974 <_dtoa_r+0x11fc>
    3b0c:	388003cc 	andi	r2,r7,15
    3b10:	100490fa 	slli	r2,r2,3
    3b14:	382bd13a 	srai	r21,r7,4
    3b18:	00c00074 	movhi	r3,1
    3b1c:	18ff2404 	addi	r3,r3,-880
    3b20:	1885883a 	add	r2,r3,r2
    3b24:	a8c0040c 	andi	r3,r21,16
    3b28:	12400017 	ldw	r9,0(r2)
    3b2c:	12000117 	ldw	r8,4(r2)
    3b30:	18037926 	beq	r3,zero,4918 <_dtoa_r+0x11a0>
    3b34:	00800074 	movhi	r2,1
    3b38:	10bf1a04 	addi	r2,r2,-920
    3b3c:	11800817 	ldw	r6,32(r2)
    3b40:	11c00917 	ldw	r7,36(r2)
    3b44:	9009883a 	mov	r4,r18
    3b48:	980b883a 	mov	r5,r19
    3b4c:	da001715 	stw	r8,92(sp)
    3b50:	da401615 	stw	r9,88(sp)
    3b54:	000b4140 	call	b414 <__divdf3>
    3b58:	da001717 	ldw	r8,92(sp)
    3b5c:	da401617 	ldw	r9,88(sp)
    3b60:	ad4003cc 	andi	r21,r21,15
    3b64:	040000c4 	movi	r16,3
    3b68:	1023883a 	mov	r17,r2
    3b6c:	1829883a 	mov	r20,r3
    3b70:	a8001126 	beq	r21,zero,3bb8 <_dtoa_r+0x440>
    3b74:	05c00074 	movhi	r23,1
    3b78:	bdff1a04 	addi	r23,r23,-920
    3b7c:	4805883a 	mov	r2,r9
    3b80:	4007883a 	mov	r3,r8
    3b84:	a980004c 	andi	r6,r21,1
    3b88:	1009883a 	mov	r4,r2
    3b8c:	a82bd07a 	srai	r21,r21,1
    3b90:	180b883a 	mov	r5,r3
    3b94:	30000426 	beq	r6,zero,3ba8 <_dtoa_r+0x430>
    3b98:	b9800017 	ldw	r6,0(r23)
    3b9c:	b9c00117 	ldw	r7,4(r23)
    3ba0:	84000044 	addi	r16,r16,1
    3ba4:	000c03c0 	call	c03c <__muldf3>
    3ba8:	bdc00204 	addi	r23,r23,8
    3bac:	a83ff51e 	bne	r21,zero,3b84 <__alt_exception_stack_pointer+0xf8003b84>
    3bb0:	1013883a 	mov	r9,r2
    3bb4:	1811883a 	mov	r8,r3
    3bb8:	480d883a 	mov	r6,r9
    3bbc:	400f883a 	mov	r7,r8
    3bc0:	8809883a 	mov	r4,r17
    3bc4:	a00b883a 	mov	r5,r20
    3bc8:	000b4140 	call	b414 <__divdf3>
    3bcc:	d8800f15 	stw	r2,60(sp)
    3bd0:	d8c01015 	stw	r3,64(sp)
    3bd4:	d8c00e17 	ldw	r3,56(sp)
    3bd8:	18000626 	beq	r3,zero,3bf4 <_dtoa_r+0x47c>
    3bdc:	d9000f17 	ldw	r4,60(sp)
    3be0:	d9401017 	ldw	r5,64(sp)
    3be4:	000d883a 	mov	r6,zero
    3be8:	01cffc34 	movhi	r7,16368
    3bec:	000bf480 	call	bf48 <__ledf2>
    3bf0:	10040b16 	blt	r2,zero,4c20 <_dtoa_r+0x14a8>
    3bf4:	8009883a 	mov	r4,r16
    3bf8:	000d2240 	call	d224 <__floatsidf>
    3bfc:	d9800f17 	ldw	r6,60(sp)
    3c00:	d9c01017 	ldw	r7,64(sp)
    3c04:	1009883a 	mov	r4,r2
    3c08:	180b883a 	mov	r5,r3
    3c0c:	000c03c0 	call	c03c <__muldf3>
    3c10:	000d883a 	mov	r6,zero
    3c14:	01d00734 	movhi	r7,16412
    3c18:	1009883a 	mov	r4,r2
    3c1c:	180b883a 	mov	r5,r3
    3c20:	000ab680 	call	ab68 <__adddf3>
    3c24:	1021883a 	mov	r16,r2
    3c28:	d8800617 	ldw	r2,24(sp)
    3c2c:	047f3034 	movhi	r17,64704
    3c30:	1c63883a 	add	r17,r3,r17
    3c34:	10031826 	beq	r2,zero,4898 <_dtoa_r+0x1120>
    3c38:	d8c00517 	ldw	r3,20(sp)
    3c3c:	db000617 	ldw	r12,24(sp)
    3c40:	d8c01315 	stw	r3,76(sp)
    3c44:	d9000b17 	ldw	r4,44(sp)
    3c48:	20038f26 	beq	r4,zero,4a88 <_dtoa_r+0x1310>
    3c4c:	60bfffc4 	addi	r2,r12,-1
    3c50:	100490fa 	slli	r2,r2,3
    3c54:	00c00074 	movhi	r3,1
    3c58:	18ff2404 	addi	r3,r3,-880
    3c5c:	1885883a 	add	r2,r3,r2
    3c60:	11800017 	ldw	r6,0(r2)
    3c64:	11c00117 	ldw	r7,4(r2)
    3c68:	d8800717 	ldw	r2,28(sp)
    3c6c:	0009883a 	mov	r4,zero
    3c70:	014ff834 	movhi	r5,16352
    3c74:	db001615 	stw	r12,88(sp)
    3c78:	15c00044 	addi	r23,r2,1
    3c7c:	000b4140 	call	b414 <__divdf3>
    3c80:	800d883a 	mov	r6,r16
    3c84:	880f883a 	mov	r7,r17
    3c88:	1009883a 	mov	r4,r2
    3c8c:	180b883a 	mov	r5,r3
    3c90:	000c8a80 	call	c8a8 <__subdf3>
    3c94:	d9401017 	ldw	r5,64(sp)
    3c98:	d9000f17 	ldw	r4,60(sp)
    3c9c:	102b883a 	mov	r21,r2
    3ca0:	d8c01215 	stw	r3,72(sp)
    3ca4:	000d1a40 	call	d1a4 <__fixdfsi>
    3ca8:	1009883a 	mov	r4,r2
    3cac:	1029883a 	mov	r20,r2
    3cb0:	000d2240 	call	d224 <__floatsidf>
    3cb4:	d9000f17 	ldw	r4,60(sp)
    3cb8:	d9401017 	ldw	r5,64(sp)
    3cbc:	100d883a 	mov	r6,r2
    3cc0:	180f883a 	mov	r7,r3
    3cc4:	000c8a80 	call	c8a8 <__subdf3>
    3cc8:	1823883a 	mov	r17,r3
    3ccc:	d8c00717 	ldw	r3,28(sp)
    3cd0:	d9401217 	ldw	r5,72(sp)
    3cd4:	a2000c04 	addi	r8,r20,48
    3cd8:	1021883a 	mov	r16,r2
    3cdc:	1a000005 	stb	r8,0(r3)
    3ce0:	800d883a 	mov	r6,r16
    3ce4:	880f883a 	mov	r7,r17
    3ce8:	a809883a 	mov	r4,r21
    3cec:	4029883a 	mov	r20,r8
    3cf0:	000be6c0 	call	be6c <__gedf2>
    3cf4:	00841d16 	blt	zero,r2,4d6c <_dtoa_r+0x15f4>
    3cf8:	800d883a 	mov	r6,r16
    3cfc:	880f883a 	mov	r7,r17
    3d00:	0009883a 	mov	r4,zero
    3d04:	014ffc34 	movhi	r5,16368
    3d08:	000c8a80 	call	c8a8 <__subdf3>
    3d0c:	d9401217 	ldw	r5,72(sp)
    3d10:	100d883a 	mov	r6,r2
    3d14:	180f883a 	mov	r7,r3
    3d18:	a809883a 	mov	r4,r21
    3d1c:	000be6c0 	call	be6c <__gedf2>
    3d20:	db001617 	ldw	r12,88(sp)
    3d24:	00840e16 	blt	zero,r2,4d60 <_dtoa_r+0x15e8>
    3d28:	00800044 	movi	r2,1
    3d2c:	13006b0e 	bge	r2,r12,3edc <_dtoa_r+0x764>
    3d30:	d9000717 	ldw	r4,28(sp)
    3d34:	dd800f15 	stw	r22,60(sp)
    3d38:	dcc01015 	stw	r19,64(sp)
    3d3c:	2319883a 	add	r12,r4,r12
    3d40:	dcc01217 	ldw	r19,72(sp)
    3d44:	602d883a 	mov	r22,r12
    3d48:	dc801215 	stw	r18,72(sp)
    3d4c:	b825883a 	mov	r18,r23
    3d50:	00000906 	br	3d78 <_dtoa_r+0x600>
    3d54:	000c8a80 	call	c8a8 <__subdf3>
    3d58:	a80d883a 	mov	r6,r21
    3d5c:	980f883a 	mov	r7,r19
    3d60:	1009883a 	mov	r4,r2
    3d64:	180b883a 	mov	r5,r3
    3d68:	000bf480 	call	bf48 <__ledf2>
    3d6c:	1003e816 	blt	r2,zero,4d10 <_dtoa_r+0x1598>
    3d70:	b825883a 	mov	r18,r23
    3d74:	bd83e926 	beq	r23,r22,4d1c <_dtoa_r+0x15a4>
    3d78:	a809883a 	mov	r4,r21
    3d7c:	980b883a 	mov	r5,r19
    3d80:	000d883a 	mov	r6,zero
    3d84:	01d00934 	movhi	r7,16420
    3d88:	000c03c0 	call	c03c <__muldf3>
    3d8c:	000d883a 	mov	r6,zero
    3d90:	01d00934 	movhi	r7,16420
    3d94:	8009883a 	mov	r4,r16
    3d98:	880b883a 	mov	r5,r17
    3d9c:	102b883a 	mov	r21,r2
    3da0:	1827883a 	mov	r19,r3
    3da4:	000c03c0 	call	c03c <__muldf3>
    3da8:	180b883a 	mov	r5,r3
    3dac:	1009883a 	mov	r4,r2
    3db0:	1821883a 	mov	r16,r3
    3db4:	1023883a 	mov	r17,r2
    3db8:	000d1a40 	call	d1a4 <__fixdfsi>
    3dbc:	1009883a 	mov	r4,r2
    3dc0:	1029883a 	mov	r20,r2
    3dc4:	000d2240 	call	d224 <__floatsidf>
    3dc8:	8809883a 	mov	r4,r17
    3dcc:	800b883a 	mov	r5,r16
    3dd0:	100d883a 	mov	r6,r2
    3dd4:	180f883a 	mov	r7,r3
    3dd8:	000c8a80 	call	c8a8 <__subdf3>
    3ddc:	a5000c04 	addi	r20,r20,48
    3de0:	a80d883a 	mov	r6,r21
    3de4:	980f883a 	mov	r7,r19
    3de8:	1009883a 	mov	r4,r2
    3dec:	180b883a 	mov	r5,r3
    3df0:	95000005 	stb	r20,0(r18)
    3df4:	1021883a 	mov	r16,r2
    3df8:	1823883a 	mov	r17,r3
    3dfc:	000bf480 	call	bf48 <__ledf2>
    3e00:	bdc00044 	addi	r23,r23,1
    3e04:	800d883a 	mov	r6,r16
    3e08:	880f883a 	mov	r7,r17
    3e0c:	0009883a 	mov	r4,zero
    3e10:	014ffc34 	movhi	r5,16368
    3e14:	103fcf0e 	bge	r2,zero,3d54 <__alt_exception_stack_pointer+0xf8003d54>
    3e18:	d8c01317 	ldw	r3,76(sp)
    3e1c:	d8c00515 	stw	r3,20(sp)
    3e20:	d9400917 	ldw	r5,36(sp)
    3e24:	e009883a 	mov	r4,fp
    3e28:	00060a80 	call	60a8 <_Bfree>
    3e2c:	d9000517 	ldw	r4,20(sp)
    3e30:	d9802317 	ldw	r6,140(sp)
    3e34:	d9c02517 	ldw	r7,148(sp)
    3e38:	b8000005 	stb	zero,0(r23)
    3e3c:	20800044 	addi	r2,r4,1
    3e40:	30800015 	stw	r2,0(r6)
    3e44:	3802aa26 	beq	r7,zero,48f0 <_dtoa_r+0x1178>
    3e48:	3dc00015 	stw	r23,0(r7)
    3e4c:	d8800717 	ldw	r2,28(sp)
    3e50:	003e7906 	br	3838 <__alt_exception_stack_pointer+0xf8003838>
    3e54:	00800434 	movhi	r2,16
    3e58:	10bfffc4 	addi	r2,r2,-1
    3e5c:	88a2703a 	and	r17,r17,r2
    3e60:	883e851e 	bne	r17,zero,3878 <__alt_exception_stack_pointer+0xf8003878>
    3e64:	00800074 	movhi	r2,1
    3e68:	10bf0504 	addi	r2,r2,-1004
    3e6c:	003e8406 	br	3880 <__alt_exception_stack_pointer+0xf8003880>
    3e70:	10c00204 	addi	r3,r2,8
    3e74:	003e8706 	br	3894 <__alt_exception_stack_pointer+0xf8003894>
    3e78:	01400434 	movhi	r5,16
    3e7c:	297fffc4 	addi	r5,r5,-1
    3e80:	994a703a 	and	r5,r19,r5
    3e84:	9009883a 	mov	r4,r18
    3e88:	843f0044 	addi	r16,r16,-1023
    3e8c:	294ffc34 	orhi	r5,r5,16368
    3e90:	dd800217 	ldw	r22,8(sp)
    3e94:	d8001115 	stw	zero,68(sp)
    3e98:	003ea506 	br	3930 <__alt_exception_stack_pointer+0xf8003930>
    3e9c:	00800074 	movhi	r2,1
    3ea0:	10befc04 	addi	r2,r2,-1040
    3ea4:	003e6406 	br	3838 <__alt_exception_stack_pointer+0xf8003838>
    3ea8:	e0001115 	stw	zero,68(fp)
    3eac:	000b883a 	mov	r5,zero
    3eb0:	e009883a 	mov	r4,fp
    3eb4:	00060000 	call	6000 <_Balloc>
    3eb8:	01bfffc4 	movi	r6,-1
    3ebc:	01c00044 	movi	r7,1
    3ec0:	d8800715 	stw	r2,28(sp)
    3ec4:	d9800c15 	stw	r6,48(sp)
    3ec8:	e0801015 	stw	r2,64(fp)
    3ecc:	d8000315 	stw	zero,12(sp)
    3ed0:	d9c00b15 	stw	r7,44(sp)
    3ed4:	d9800615 	stw	r6,24(sp)
    3ed8:	d8002215 	stw	zero,136(sp)
    3edc:	d8800117 	ldw	r2,4(sp)
    3ee0:	10008916 	blt	r2,zero,4108 <_dtoa_r+0x990>
    3ee4:	d9000517 	ldw	r4,20(sp)
    3ee8:	00c00384 	movi	r3,14
    3eec:	19008616 	blt	r3,r4,4108 <_dtoa_r+0x990>
    3ef0:	200490fa 	slli	r2,r4,3
    3ef4:	00c00074 	movhi	r3,1
    3ef8:	d9802217 	ldw	r6,136(sp)
    3efc:	18ff2404 	addi	r3,r3,-880
    3f00:	1885883a 	add	r2,r3,r2
    3f04:	14000017 	ldw	r16,0(r2)
    3f08:	14400117 	ldw	r17,4(r2)
    3f0c:	30016316 	blt	r6,zero,449c <_dtoa_r+0xd24>
    3f10:	800d883a 	mov	r6,r16
    3f14:	880f883a 	mov	r7,r17
    3f18:	9009883a 	mov	r4,r18
    3f1c:	980b883a 	mov	r5,r19
    3f20:	000b4140 	call	b414 <__divdf3>
    3f24:	180b883a 	mov	r5,r3
    3f28:	1009883a 	mov	r4,r2
    3f2c:	000d1a40 	call	d1a4 <__fixdfsi>
    3f30:	1009883a 	mov	r4,r2
    3f34:	102b883a 	mov	r21,r2
    3f38:	000d2240 	call	d224 <__floatsidf>
    3f3c:	800d883a 	mov	r6,r16
    3f40:	880f883a 	mov	r7,r17
    3f44:	1009883a 	mov	r4,r2
    3f48:	180b883a 	mov	r5,r3
    3f4c:	000c03c0 	call	c03c <__muldf3>
    3f50:	100d883a 	mov	r6,r2
    3f54:	180f883a 	mov	r7,r3
    3f58:	9009883a 	mov	r4,r18
    3f5c:	980b883a 	mov	r5,r19
    3f60:	000c8a80 	call	c8a8 <__subdf3>
    3f64:	d9c00717 	ldw	r7,28(sp)
    3f68:	1009883a 	mov	r4,r2
    3f6c:	a8800c04 	addi	r2,r21,48
    3f70:	38800005 	stb	r2,0(r7)
    3f74:	3dc00044 	addi	r23,r7,1
    3f78:	d9c00617 	ldw	r7,24(sp)
    3f7c:	01800044 	movi	r6,1
    3f80:	180b883a 	mov	r5,r3
    3f84:	2005883a 	mov	r2,r4
    3f88:	39803826 	beq	r7,r6,406c <_dtoa_r+0x8f4>
    3f8c:	000d883a 	mov	r6,zero
    3f90:	01d00934 	movhi	r7,16420
    3f94:	000c03c0 	call	c03c <__muldf3>
    3f98:	000d883a 	mov	r6,zero
    3f9c:	000f883a 	mov	r7,zero
    3fa0:	1009883a 	mov	r4,r2
    3fa4:	180b883a 	mov	r5,r3
    3fa8:	1025883a 	mov	r18,r2
    3fac:	1827883a 	mov	r19,r3
    3fb0:	000bde40 	call	bde4 <__eqdf2>
    3fb4:	103f9a26 	beq	r2,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    3fb8:	d9c00617 	ldw	r7,24(sp)
    3fbc:	d8c00717 	ldw	r3,28(sp)
    3fc0:	b829883a 	mov	r20,r23
    3fc4:	38bfffc4 	addi	r2,r7,-1
    3fc8:	18ad883a 	add	r22,r3,r2
    3fcc:	00000a06 	br	3ff8 <_dtoa_r+0x880>
    3fd0:	000c03c0 	call	c03c <__muldf3>
    3fd4:	000d883a 	mov	r6,zero
    3fd8:	000f883a 	mov	r7,zero
    3fdc:	1009883a 	mov	r4,r2
    3fe0:	180b883a 	mov	r5,r3
    3fe4:	1025883a 	mov	r18,r2
    3fe8:	1827883a 	mov	r19,r3
    3fec:	b829883a 	mov	r20,r23
    3ff0:	000bde40 	call	bde4 <__eqdf2>
    3ff4:	103f8a26 	beq	r2,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    3ff8:	800d883a 	mov	r6,r16
    3ffc:	880f883a 	mov	r7,r17
    4000:	9009883a 	mov	r4,r18
    4004:	980b883a 	mov	r5,r19
    4008:	000b4140 	call	b414 <__divdf3>
    400c:	180b883a 	mov	r5,r3
    4010:	1009883a 	mov	r4,r2
    4014:	000d1a40 	call	d1a4 <__fixdfsi>
    4018:	1009883a 	mov	r4,r2
    401c:	102b883a 	mov	r21,r2
    4020:	000d2240 	call	d224 <__floatsidf>
    4024:	800d883a 	mov	r6,r16
    4028:	880f883a 	mov	r7,r17
    402c:	1009883a 	mov	r4,r2
    4030:	180b883a 	mov	r5,r3
    4034:	000c03c0 	call	c03c <__muldf3>
    4038:	100d883a 	mov	r6,r2
    403c:	180f883a 	mov	r7,r3
    4040:	9009883a 	mov	r4,r18
    4044:	980b883a 	mov	r5,r19
    4048:	000c8a80 	call	c8a8 <__subdf3>
    404c:	aa000c04 	addi	r8,r21,48
    4050:	a2000005 	stb	r8,0(r20)
    4054:	000d883a 	mov	r6,zero
    4058:	01d00934 	movhi	r7,16420
    405c:	1009883a 	mov	r4,r2
    4060:	180b883a 	mov	r5,r3
    4064:	a5c00044 	addi	r23,r20,1
    4068:	b53fd91e 	bne	r22,r20,3fd0 <__alt_exception_stack_pointer+0xf8003fd0>
    406c:	100d883a 	mov	r6,r2
    4070:	180f883a 	mov	r7,r3
    4074:	1009883a 	mov	r4,r2
    4078:	180b883a 	mov	r5,r3
    407c:	000ab680 	call	ab68 <__adddf3>
    4080:	100d883a 	mov	r6,r2
    4084:	180f883a 	mov	r7,r3
    4088:	8009883a 	mov	r4,r16
    408c:	880b883a 	mov	r5,r17
    4090:	1027883a 	mov	r19,r2
    4094:	1825883a 	mov	r18,r3
    4098:	000bf480 	call	bf48 <__ledf2>
    409c:	10000816 	blt	r2,zero,40c0 <_dtoa_r+0x948>
    40a0:	980d883a 	mov	r6,r19
    40a4:	900f883a 	mov	r7,r18
    40a8:	8009883a 	mov	r4,r16
    40ac:	880b883a 	mov	r5,r17
    40b0:	000bde40 	call	bde4 <__eqdf2>
    40b4:	103f5a1e 	bne	r2,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    40b8:	ad40004c 	andi	r21,r21,1
    40bc:	a83f5826 	beq	r21,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    40c0:	bd3fffc3 	ldbu	r20,-1(r23)
    40c4:	b8bfffc4 	addi	r2,r23,-1
    40c8:	1007883a 	mov	r3,r2
    40cc:	01400e44 	movi	r5,57
    40d0:	d9800717 	ldw	r6,28(sp)
    40d4:	00000506 	br	40ec <_dtoa_r+0x974>
    40d8:	18ffffc4 	addi	r3,r3,-1
    40dc:	11824726 	beq	r2,r6,49fc <_dtoa_r+0x1284>
    40e0:	1d000003 	ldbu	r20,0(r3)
    40e4:	102f883a 	mov	r23,r2
    40e8:	10bfffc4 	addi	r2,r2,-1
    40ec:	a1003fcc 	andi	r4,r20,255
    40f0:	2100201c 	xori	r4,r4,128
    40f4:	213fe004 	addi	r4,r4,-128
    40f8:	217ff726 	beq	r4,r5,40d8 <__alt_exception_stack_pointer+0xf80040d8>
    40fc:	a2000044 	addi	r8,r20,1
    4100:	12000005 	stb	r8,0(r2)
    4104:	003f4606 	br	3e20 <__alt_exception_stack_pointer+0xf8003e20>
    4108:	d9000b17 	ldw	r4,44(sp)
    410c:	2000c826 	beq	r4,zero,4430 <_dtoa_r+0xcb8>
    4110:	d9800317 	ldw	r6,12(sp)
    4114:	00c00044 	movi	r3,1
    4118:	1980f90e 	bge	r3,r6,4500 <_dtoa_r+0xd88>
    411c:	d8800617 	ldw	r2,24(sp)
    4120:	d8c00a17 	ldw	r3,40(sp)
    4124:	157fffc4 	addi	r21,r2,-1
    4128:	1d41f316 	blt	r3,r21,48f8 <_dtoa_r+0x1180>
    412c:	1d6bc83a 	sub	r21,r3,r21
    4130:	d9c00617 	ldw	r7,24(sp)
    4134:	3802aa16 	blt	r7,zero,4be0 <_dtoa_r+0x1468>
    4138:	dd000817 	ldw	r20,32(sp)
    413c:	d8800617 	ldw	r2,24(sp)
    4140:	d8c00817 	ldw	r3,32(sp)
    4144:	01400044 	movi	r5,1
    4148:	e009883a 	mov	r4,fp
    414c:	1887883a 	add	r3,r3,r2
    4150:	d8c00815 	stw	r3,32(sp)
    4154:	b0ad883a 	add	r22,r22,r2
    4158:	00064340 	call	6434 <__i2b>
    415c:	1023883a 	mov	r17,r2
    4160:	a0000826 	beq	r20,zero,4184 <_dtoa_r+0xa0c>
    4164:	0580070e 	bge	zero,r22,4184 <_dtoa_r+0xa0c>
    4168:	a005883a 	mov	r2,r20
    416c:	b500b916 	blt	r22,r20,4454 <_dtoa_r+0xcdc>
    4170:	d9000817 	ldw	r4,32(sp)
    4174:	a0a9c83a 	sub	r20,r20,r2
    4178:	b0adc83a 	sub	r22,r22,r2
    417c:	2089c83a 	sub	r4,r4,r2
    4180:	d9000815 	stw	r4,32(sp)
    4184:	d9800a17 	ldw	r6,40(sp)
    4188:	0181810e 	bge	zero,r6,4790 <_dtoa_r+0x1018>
    418c:	d9c00b17 	ldw	r7,44(sp)
    4190:	3800b326 	beq	r7,zero,4460 <_dtoa_r+0xce8>
    4194:	a800b226 	beq	r21,zero,4460 <_dtoa_r+0xce8>
    4198:	880b883a 	mov	r5,r17
    419c:	a80d883a 	mov	r6,r21
    41a0:	e009883a 	mov	r4,fp
    41a4:	00066fc0 	call	66fc <__pow5mult>
    41a8:	d9800917 	ldw	r6,36(sp)
    41ac:	100b883a 	mov	r5,r2
    41b0:	e009883a 	mov	r4,fp
    41b4:	1023883a 	mov	r17,r2
    41b8:	00064700 	call	6470 <__multiply>
    41bc:	1021883a 	mov	r16,r2
    41c0:	d8800a17 	ldw	r2,40(sp)
    41c4:	d9400917 	ldw	r5,36(sp)
    41c8:	e009883a 	mov	r4,fp
    41cc:	1545c83a 	sub	r2,r2,r21
    41d0:	d8800a15 	stw	r2,40(sp)
    41d4:	00060a80 	call	60a8 <_Bfree>
    41d8:	d8c00a17 	ldw	r3,40(sp)
    41dc:	18009f1e 	bne	r3,zero,445c <_dtoa_r+0xce4>
    41e0:	05c00044 	movi	r23,1
    41e4:	e009883a 	mov	r4,fp
    41e8:	b80b883a 	mov	r5,r23
    41ec:	00064340 	call	6434 <__i2b>
    41f0:	d9000d17 	ldw	r4,52(sp)
    41f4:	102b883a 	mov	r21,r2
    41f8:	2000ce26 	beq	r4,zero,4534 <_dtoa_r+0xdbc>
    41fc:	200d883a 	mov	r6,r4
    4200:	100b883a 	mov	r5,r2
    4204:	e009883a 	mov	r4,fp
    4208:	00066fc0 	call	66fc <__pow5mult>
    420c:	d9800317 	ldw	r6,12(sp)
    4210:	102b883a 	mov	r21,r2
    4214:	b981810e 	bge	r23,r6,481c <_dtoa_r+0x10a4>
    4218:	0027883a 	mov	r19,zero
    421c:	a8800417 	ldw	r2,16(r21)
    4220:	05c00804 	movi	r23,32
    4224:	10800104 	addi	r2,r2,4
    4228:	1085883a 	add	r2,r2,r2
    422c:	1085883a 	add	r2,r2,r2
    4230:	a885883a 	add	r2,r21,r2
    4234:	11000017 	ldw	r4,0(r2)
    4238:	000631c0 	call	631c <__hi0bits>
    423c:	b885c83a 	sub	r2,r23,r2
    4240:	1585883a 	add	r2,r2,r22
    4244:	108007cc 	andi	r2,r2,31
    4248:	1000b326 	beq	r2,zero,4518 <_dtoa_r+0xda0>
    424c:	00c00804 	movi	r3,32
    4250:	1887c83a 	sub	r3,r3,r2
    4254:	01000104 	movi	r4,4
    4258:	20c2cd0e 	bge	r4,r3,4d90 <_dtoa_r+0x1618>
    425c:	00c00704 	movi	r3,28
    4260:	1885c83a 	sub	r2,r3,r2
    4264:	d8c00817 	ldw	r3,32(sp)
    4268:	a0a9883a 	add	r20,r20,r2
    426c:	b0ad883a 	add	r22,r22,r2
    4270:	1887883a 	add	r3,r3,r2
    4274:	d8c00815 	stw	r3,32(sp)
    4278:	d9800817 	ldw	r6,32(sp)
    427c:	0180040e 	bge	zero,r6,4290 <_dtoa_r+0xb18>
    4280:	800b883a 	mov	r5,r16
    4284:	e009883a 	mov	r4,fp
    4288:	000683c0 	call	683c <__lshift>
    428c:	1021883a 	mov	r16,r2
    4290:	0580050e 	bge	zero,r22,42a8 <_dtoa_r+0xb30>
    4294:	a80b883a 	mov	r5,r21
    4298:	b00d883a 	mov	r6,r22
    429c:	e009883a 	mov	r4,fp
    42a0:	000683c0 	call	683c <__lshift>
    42a4:	102b883a 	mov	r21,r2
    42a8:	d9c00e17 	ldw	r7,56(sp)
    42ac:	3801211e 	bne	r7,zero,4734 <_dtoa_r+0xfbc>
    42b0:	d9800617 	ldw	r6,24(sp)
    42b4:	0181380e 	bge	zero,r6,4798 <_dtoa_r+0x1020>
    42b8:	d8c00b17 	ldw	r3,44(sp)
    42bc:	1800ab1e 	bne	r3,zero,456c <_dtoa_r+0xdf4>
    42c0:	dc800717 	ldw	r18,28(sp)
    42c4:	dcc00617 	ldw	r19,24(sp)
    42c8:	9029883a 	mov	r20,r18
    42cc:	00000206 	br	42d8 <_dtoa_r+0xb60>
    42d0:	00060d00 	call	60d0 <__multadd>
    42d4:	1021883a 	mov	r16,r2
    42d8:	a80b883a 	mov	r5,r21
    42dc:	8009883a 	mov	r4,r16
    42e0:	00035500 	call	3550 <quorem>
    42e4:	10800c04 	addi	r2,r2,48
    42e8:	90800005 	stb	r2,0(r18)
    42ec:	94800044 	addi	r18,r18,1
    42f0:	9507c83a 	sub	r3,r18,r20
    42f4:	000f883a 	mov	r7,zero
    42f8:	01800284 	movi	r6,10
    42fc:	800b883a 	mov	r5,r16
    4300:	e009883a 	mov	r4,fp
    4304:	1cfff216 	blt	r3,r19,42d0 <__alt_exception_stack_pointer+0xf80042d0>
    4308:	1011883a 	mov	r8,r2
    430c:	d8800617 	ldw	r2,24(sp)
    4310:	0082370e 	bge	zero,r2,4bf0 <_dtoa_r+0x1478>
    4314:	d9000717 	ldw	r4,28(sp)
    4318:	0025883a 	mov	r18,zero
    431c:	20af883a 	add	r23,r4,r2
    4320:	01800044 	movi	r6,1
    4324:	800b883a 	mov	r5,r16
    4328:	e009883a 	mov	r4,fp
    432c:	da001715 	stw	r8,92(sp)
    4330:	000683c0 	call	683c <__lshift>
    4334:	a80b883a 	mov	r5,r21
    4338:	1009883a 	mov	r4,r2
    433c:	d8800915 	stw	r2,36(sp)
    4340:	00069840 	call	6984 <__mcmp>
    4344:	da001717 	ldw	r8,92(sp)
    4348:	0081800e 	bge	zero,r2,494c <_dtoa_r+0x11d4>
    434c:	b93fffc3 	ldbu	r4,-1(r23)
    4350:	b8bfffc4 	addi	r2,r23,-1
    4354:	1007883a 	mov	r3,r2
    4358:	01800e44 	movi	r6,57
    435c:	d9c00717 	ldw	r7,28(sp)
    4360:	00000506 	br	4378 <_dtoa_r+0xc00>
    4364:	18ffffc4 	addi	r3,r3,-1
    4368:	11c12326 	beq	r2,r7,47f8 <_dtoa_r+0x1080>
    436c:	19000003 	ldbu	r4,0(r3)
    4370:	102f883a 	mov	r23,r2
    4374:	10bfffc4 	addi	r2,r2,-1
    4378:	21403fcc 	andi	r5,r4,255
    437c:	2940201c 	xori	r5,r5,128
    4380:	297fe004 	addi	r5,r5,-128
    4384:	29bff726 	beq	r5,r6,4364 <__alt_exception_stack_pointer+0xf8004364>
    4388:	21000044 	addi	r4,r4,1
    438c:	11000005 	stb	r4,0(r2)
    4390:	a80b883a 	mov	r5,r21
    4394:	e009883a 	mov	r4,fp
    4398:	00060a80 	call	60a8 <_Bfree>
    439c:	883ea026 	beq	r17,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    43a0:	90000426 	beq	r18,zero,43b4 <_dtoa_r+0xc3c>
    43a4:	94400326 	beq	r18,r17,43b4 <_dtoa_r+0xc3c>
    43a8:	900b883a 	mov	r5,r18
    43ac:	e009883a 	mov	r4,fp
    43b0:	00060a80 	call	60a8 <_Bfree>
    43b4:	880b883a 	mov	r5,r17
    43b8:	e009883a 	mov	r4,fp
    43bc:	00060a80 	call	60a8 <_Bfree>
    43c0:	003e9706 	br	3e20 <__alt_exception_stack_pointer+0xf8003e20>
    43c4:	01800044 	movi	r6,1
    43c8:	d9800e15 	stw	r6,56(sp)
    43cc:	003d9606 	br	3a28 <__alt_exception_stack_pointer+0xf8003a28>
    43d0:	d8800817 	ldw	r2,32(sp)
    43d4:	d8c00517 	ldw	r3,20(sp)
    43d8:	d8000d15 	stw	zero,52(sp)
    43dc:	10c5c83a 	sub	r2,r2,r3
    43e0:	00c9c83a 	sub	r4,zero,r3
    43e4:	d8800815 	stw	r2,32(sp)
    43e8:	d9000a15 	stw	r4,40(sp)
    43ec:	003d9706 	br	3a4c <__alt_exception_stack_pointer+0xf8003a4c>
    43f0:	05adc83a 	sub	r22,zero,r22
    43f4:	dd800815 	stw	r22,32(sp)
    43f8:	002d883a 	mov	r22,zero
    43fc:	003d8e06 	br	3a38 <__alt_exception_stack_pointer+0xf8003a38>
    4400:	d9000517 	ldw	r4,20(sp)
    4404:	000d2240 	call	d224 <__floatsidf>
    4408:	100d883a 	mov	r6,r2
    440c:	180f883a 	mov	r7,r3
    4410:	a009883a 	mov	r4,r20
    4414:	880b883a 	mov	r5,r17
    4418:	000bde40 	call	bde4 <__eqdf2>
    441c:	103d7126 	beq	r2,zero,39e4 <__alt_exception_stack_pointer+0xf80039e4>
    4420:	d9c00517 	ldw	r7,20(sp)
    4424:	39ffffc4 	addi	r7,r7,-1
    4428:	d9c00515 	stw	r7,20(sp)
    442c:	003d6d06 	br	39e4 <__alt_exception_stack_pointer+0xf80039e4>
    4430:	dd400a17 	ldw	r21,40(sp)
    4434:	dd000817 	ldw	r20,32(sp)
    4438:	0023883a 	mov	r17,zero
    443c:	003f4806 	br	4160 <__alt_exception_stack_pointer+0xf8004160>
    4440:	10e3c83a 	sub	r17,r2,r3
    4444:	9448983a 	sll	r4,r18,r17
    4448:	003d3206 	br	3914 <__alt_exception_stack_pointer+0xf8003914>
    444c:	d8000e15 	stw	zero,56(sp)
    4450:	003d7506 	br	3a28 <__alt_exception_stack_pointer+0xf8003a28>
    4454:	b005883a 	mov	r2,r22
    4458:	003f4506 	br	4170 <__alt_exception_stack_pointer+0xf8004170>
    445c:	dc000915 	stw	r16,36(sp)
    4460:	d9800a17 	ldw	r6,40(sp)
    4464:	d9400917 	ldw	r5,36(sp)
    4468:	e009883a 	mov	r4,fp
    446c:	00066fc0 	call	66fc <__pow5mult>
    4470:	1021883a 	mov	r16,r2
    4474:	003f5a06 	br	41e0 <__alt_exception_stack_pointer+0xf80041e0>
    4478:	01c00044 	movi	r7,1
    447c:	d9c00b15 	stw	r7,44(sp)
    4480:	d8802217 	ldw	r2,136(sp)
    4484:	0081280e 	bge	zero,r2,4928 <_dtoa_r+0x11b0>
    4488:	100d883a 	mov	r6,r2
    448c:	1021883a 	mov	r16,r2
    4490:	d8800c15 	stw	r2,48(sp)
    4494:	d8800615 	stw	r2,24(sp)
    4498:	003d8806 	br	3abc <__alt_exception_stack_pointer+0xf8003abc>
    449c:	d8800617 	ldw	r2,24(sp)
    44a0:	00be9b16 	blt	zero,r2,3f10 <__alt_exception_stack_pointer+0xf8003f10>
    44a4:	10010f1e 	bne	r2,zero,48e4 <_dtoa_r+0x116c>
    44a8:	880b883a 	mov	r5,r17
    44ac:	000d883a 	mov	r6,zero
    44b0:	01d00534 	movhi	r7,16404
    44b4:	8009883a 	mov	r4,r16
    44b8:	000c03c0 	call	c03c <__muldf3>
    44bc:	900d883a 	mov	r6,r18
    44c0:	980f883a 	mov	r7,r19
    44c4:	1009883a 	mov	r4,r2
    44c8:	180b883a 	mov	r5,r3
    44cc:	000be6c0 	call	be6c <__gedf2>
    44d0:	002b883a 	mov	r21,zero
    44d4:	0023883a 	mov	r17,zero
    44d8:	1000bf16 	blt	r2,zero,47d8 <_dtoa_r+0x1060>
    44dc:	d9802217 	ldw	r6,136(sp)
    44e0:	ddc00717 	ldw	r23,28(sp)
    44e4:	018c303a 	nor	r6,zero,r6
    44e8:	d9800515 	stw	r6,20(sp)
    44ec:	a80b883a 	mov	r5,r21
    44f0:	e009883a 	mov	r4,fp
    44f4:	00060a80 	call	60a8 <_Bfree>
    44f8:	883e4926 	beq	r17,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    44fc:	003fad06 	br	43b4 <__alt_exception_stack_pointer+0xf80043b4>
    4500:	d9c01117 	ldw	r7,68(sp)
    4504:	3801bc26 	beq	r7,zero,4bf8 <_dtoa_r+0x1480>
    4508:	10810cc4 	addi	r2,r2,1075
    450c:	dd400a17 	ldw	r21,40(sp)
    4510:	dd000817 	ldw	r20,32(sp)
    4514:	003f0a06 	br	4140 <__alt_exception_stack_pointer+0xf8004140>
    4518:	00800704 	movi	r2,28
    451c:	d9000817 	ldw	r4,32(sp)
    4520:	a0a9883a 	add	r20,r20,r2
    4524:	b0ad883a 	add	r22,r22,r2
    4528:	2089883a 	add	r4,r4,r2
    452c:	d9000815 	stw	r4,32(sp)
    4530:	003f5106 	br	4278 <__alt_exception_stack_pointer+0xf8004278>
    4534:	d8c00317 	ldw	r3,12(sp)
    4538:	b8c1fc0e 	bge	r23,r3,4d2c <_dtoa_r+0x15b4>
    453c:	0027883a 	mov	r19,zero
    4540:	b805883a 	mov	r2,r23
    4544:	003f3e06 	br	4240 <__alt_exception_stack_pointer+0xf8004240>
    4548:	880b883a 	mov	r5,r17
    454c:	e009883a 	mov	r4,fp
    4550:	000f883a 	mov	r7,zero
    4554:	01800284 	movi	r6,10
    4558:	00060d00 	call	60d0 <__multadd>
    455c:	d9000c17 	ldw	r4,48(sp)
    4560:	1023883a 	mov	r17,r2
    4564:	0102040e 	bge	zero,r4,4d78 <_dtoa_r+0x1600>
    4568:	d9000615 	stw	r4,24(sp)
    456c:	0500050e 	bge	zero,r20,4584 <_dtoa_r+0xe0c>
    4570:	880b883a 	mov	r5,r17
    4574:	a00d883a 	mov	r6,r20
    4578:	e009883a 	mov	r4,fp
    457c:	000683c0 	call	683c <__lshift>
    4580:	1023883a 	mov	r17,r2
    4584:	9801241e 	bne	r19,zero,4a18 <_dtoa_r+0x12a0>
    4588:	8829883a 	mov	r20,r17
    458c:	d9000617 	ldw	r4,24(sp)
    4590:	dcc00717 	ldw	r19,28(sp)
    4594:	9480004c 	andi	r18,r18,1
    4598:	20bfffc4 	addi	r2,r4,-1
    459c:	9885883a 	add	r2,r19,r2
    45a0:	d8800415 	stw	r2,16(sp)
    45a4:	dc800615 	stw	r18,24(sp)
    45a8:	a80b883a 	mov	r5,r21
    45ac:	8009883a 	mov	r4,r16
    45b0:	00035500 	call	3550 <quorem>
    45b4:	880b883a 	mov	r5,r17
    45b8:	8009883a 	mov	r4,r16
    45bc:	102f883a 	mov	r23,r2
    45c0:	00069840 	call	6984 <__mcmp>
    45c4:	a80b883a 	mov	r5,r21
    45c8:	a00d883a 	mov	r6,r20
    45cc:	e009883a 	mov	r4,fp
    45d0:	102d883a 	mov	r22,r2
    45d4:	00069e40 	call	69e4 <__mdiff>
    45d8:	1007883a 	mov	r3,r2
    45dc:	10800317 	ldw	r2,12(r2)
    45e0:	bc800c04 	addi	r18,r23,48
    45e4:	180b883a 	mov	r5,r3
    45e8:	10004e1e 	bne	r2,zero,4724 <_dtoa_r+0xfac>
    45ec:	8009883a 	mov	r4,r16
    45f0:	d8c01615 	stw	r3,88(sp)
    45f4:	00069840 	call	6984 <__mcmp>
    45f8:	d8c01617 	ldw	r3,88(sp)
    45fc:	e009883a 	mov	r4,fp
    4600:	d8801615 	stw	r2,88(sp)
    4604:	180b883a 	mov	r5,r3
    4608:	00060a80 	call	60a8 <_Bfree>
    460c:	d8801617 	ldw	r2,88(sp)
    4610:	1000041e 	bne	r2,zero,4624 <_dtoa_r+0xeac>
    4614:	d9800317 	ldw	r6,12(sp)
    4618:	3000021e 	bne	r6,zero,4624 <_dtoa_r+0xeac>
    461c:	d8c00617 	ldw	r3,24(sp)
    4620:	18003726 	beq	r3,zero,4700 <_dtoa_r+0xf88>
    4624:	b0002016 	blt	r22,zero,46a8 <_dtoa_r+0xf30>
    4628:	b000041e 	bne	r22,zero,463c <_dtoa_r+0xec4>
    462c:	d9000317 	ldw	r4,12(sp)
    4630:	2000021e 	bne	r4,zero,463c <_dtoa_r+0xec4>
    4634:	d8c00617 	ldw	r3,24(sp)
    4638:	18001b26 	beq	r3,zero,46a8 <_dtoa_r+0xf30>
    463c:	00810716 	blt	zero,r2,4a5c <_dtoa_r+0x12e4>
    4640:	d8c00417 	ldw	r3,16(sp)
    4644:	9d800044 	addi	r22,r19,1
    4648:	9c800005 	stb	r18,0(r19)
    464c:	b02f883a 	mov	r23,r22
    4650:	98c10626 	beq	r19,r3,4a6c <_dtoa_r+0x12f4>
    4654:	800b883a 	mov	r5,r16
    4658:	000f883a 	mov	r7,zero
    465c:	01800284 	movi	r6,10
    4660:	e009883a 	mov	r4,fp
    4664:	00060d00 	call	60d0 <__multadd>
    4668:	1021883a 	mov	r16,r2
    466c:	000f883a 	mov	r7,zero
    4670:	01800284 	movi	r6,10
    4674:	880b883a 	mov	r5,r17
    4678:	e009883a 	mov	r4,fp
    467c:	8d002526 	beq	r17,r20,4714 <_dtoa_r+0xf9c>
    4680:	00060d00 	call	60d0 <__multadd>
    4684:	a00b883a 	mov	r5,r20
    4688:	000f883a 	mov	r7,zero
    468c:	01800284 	movi	r6,10
    4690:	e009883a 	mov	r4,fp
    4694:	1023883a 	mov	r17,r2
    4698:	00060d00 	call	60d0 <__multadd>
    469c:	1029883a 	mov	r20,r2
    46a0:	b027883a 	mov	r19,r22
    46a4:	003fc006 	br	45a8 <__alt_exception_stack_pointer+0xf80045a8>
    46a8:	9011883a 	mov	r8,r18
    46ac:	00800e0e 	bge	zero,r2,46e8 <_dtoa_r+0xf70>
    46b0:	800b883a 	mov	r5,r16
    46b4:	01800044 	movi	r6,1
    46b8:	e009883a 	mov	r4,fp
    46bc:	da001715 	stw	r8,92(sp)
    46c0:	000683c0 	call	683c <__lshift>
    46c4:	a80b883a 	mov	r5,r21
    46c8:	1009883a 	mov	r4,r2
    46cc:	1021883a 	mov	r16,r2
    46d0:	00069840 	call	6984 <__mcmp>
    46d4:	da001717 	ldw	r8,92(sp)
    46d8:	0081960e 	bge	zero,r2,4d34 <_dtoa_r+0x15bc>
    46dc:	00800e44 	movi	r2,57
    46e0:	40817026 	beq	r8,r2,4ca4 <_dtoa_r+0x152c>
    46e4:	ba000c44 	addi	r8,r23,49
    46e8:	8825883a 	mov	r18,r17
    46ec:	9dc00044 	addi	r23,r19,1
    46f0:	9a000005 	stb	r8,0(r19)
    46f4:	a023883a 	mov	r17,r20
    46f8:	dc000915 	stw	r16,36(sp)
    46fc:	003f2406 	br	4390 <__alt_exception_stack_pointer+0xf8004390>
    4700:	00800e44 	movi	r2,57
    4704:	9011883a 	mov	r8,r18
    4708:	90816626 	beq	r18,r2,4ca4 <_dtoa_r+0x152c>
    470c:	05bff516 	blt	zero,r22,46e4 <__alt_exception_stack_pointer+0xf80046e4>
    4710:	003ff506 	br	46e8 <__alt_exception_stack_pointer+0xf80046e8>
    4714:	00060d00 	call	60d0 <__multadd>
    4718:	1023883a 	mov	r17,r2
    471c:	1029883a 	mov	r20,r2
    4720:	003fdf06 	br	46a0 <__alt_exception_stack_pointer+0xf80046a0>
    4724:	e009883a 	mov	r4,fp
    4728:	00060a80 	call	60a8 <_Bfree>
    472c:	00800044 	movi	r2,1
    4730:	003fbc06 	br	4624 <__alt_exception_stack_pointer+0xf8004624>
    4734:	a80b883a 	mov	r5,r21
    4738:	8009883a 	mov	r4,r16
    473c:	00069840 	call	6984 <__mcmp>
    4740:	103edb0e 	bge	r2,zero,42b0 <__alt_exception_stack_pointer+0xf80042b0>
    4744:	800b883a 	mov	r5,r16
    4748:	000f883a 	mov	r7,zero
    474c:	01800284 	movi	r6,10
    4750:	e009883a 	mov	r4,fp
    4754:	00060d00 	call	60d0 <__multadd>
    4758:	1021883a 	mov	r16,r2
    475c:	d8800517 	ldw	r2,20(sp)
    4760:	d8c00b17 	ldw	r3,44(sp)
    4764:	10bfffc4 	addi	r2,r2,-1
    4768:	d8800515 	stw	r2,20(sp)
    476c:	183f761e 	bne	r3,zero,4548 <__alt_exception_stack_pointer+0xf8004548>
    4770:	d9000c17 	ldw	r4,48(sp)
    4774:	0101730e 	bge	zero,r4,4d44 <_dtoa_r+0x15cc>
    4778:	d9000615 	stw	r4,24(sp)
    477c:	003ed006 	br	42c0 <__alt_exception_stack_pointer+0xf80042c0>
    4780:	00800084 	movi	r2,2
    4784:	3081861e 	bne	r6,r2,4da0 <_dtoa_r+0x1628>
    4788:	d8000b15 	stw	zero,44(sp)
    478c:	003f3c06 	br	4480 <__alt_exception_stack_pointer+0xf8004480>
    4790:	dc000917 	ldw	r16,36(sp)
    4794:	003e9206 	br	41e0 <__alt_exception_stack_pointer+0xf80041e0>
    4798:	d9c00317 	ldw	r7,12(sp)
    479c:	00800084 	movi	r2,2
    47a0:	11fec50e 	bge	r2,r7,42b8 <__alt_exception_stack_pointer+0xf80042b8>
    47a4:	d9000617 	ldw	r4,24(sp)
    47a8:	20013c1e 	bne	r4,zero,4c9c <_dtoa_r+0x1524>
    47ac:	a80b883a 	mov	r5,r21
    47b0:	000f883a 	mov	r7,zero
    47b4:	01800144 	movi	r6,5
    47b8:	e009883a 	mov	r4,fp
    47bc:	00060d00 	call	60d0 <__multadd>
    47c0:	100b883a 	mov	r5,r2
    47c4:	8009883a 	mov	r4,r16
    47c8:	102b883a 	mov	r21,r2
    47cc:	00069840 	call	6984 <__mcmp>
    47d0:	dc000915 	stw	r16,36(sp)
    47d4:	00bf410e 	bge	zero,r2,44dc <__alt_exception_stack_pointer+0xf80044dc>
    47d8:	d9c00717 	ldw	r7,28(sp)
    47dc:	00800c44 	movi	r2,49
    47e0:	38800005 	stb	r2,0(r7)
    47e4:	d8800517 	ldw	r2,20(sp)
    47e8:	3dc00044 	addi	r23,r7,1
    47ec:	10800044 	addi	r2,r2,1
    47f0:	d8800515 	stw	r2,20(sp)
    47f4:	003f3d06 	br	44ec <__alt_exception_stack_pointer+0xf80044ec>
    47f8:	d9800517 	ldw	r6,20(sp)
    47fc:	d9c00717 	ldw	r7,28(sp)
    4800:	00800c44 	movi	r2,49
    4804:	31800044 	addi	r6,r6,1
    4808:	d9800515 	stw	r6,20(sp)
    480c:	38800005 	stb	r2,0(r7)
    4810:	003edf06 	br	4390 <__alt_exception_stack_pointer+0xf8004390>
    4814:	d8000b15 	stw	zero,44(sp)
    4818:	003c9f06 	br	3a98 <__alt_exception_stack_pointer+0xf8003a98>
    481c:	903e7e1e 	bne	r18,zero,4218 <__alt_exception_stack_pointer+0xf8004218>
    4820:	00800434 	movhi	r2,16
    4824:	10bfffc4 	addi	r2,r2,-1
    4828:	9884703a 	and	r2,r19,r2
    482c:	1000ea1e 	bne	r2,zero,4bd8 <_dtoa_r+0x1460>
    4830:	9cdffc2c 	andhi	r19,r19,32752
    4834:	9800e826 	beq	r19,zero,4bd8 <_dtoa_r+0x1460>
    4838:	d9c00817 	ldw	r7,32(sp)
    483c:	b5800044 	addi	r22,r22,1
    4840:	04c00044 	movi	r19,1
    4844:	39c00044 	addi	r7,r7,1
    4848:	d9c00815 	stw	r7,32(sp)
    484c:	d8800d17 	ldw	r2,52(sp)
    4850:	103e721e 	bne	r2,zero,421c <__alt_exception_stack_pointer+0xf800421c>
    4854:	00800044 	movi	r2,1
    4858:	003e7906 	br	4240 <__alt_exception_stack_pointer+0xf8004240>
    485c:	8009883a 	mov	r4,r16
    4860:	000d2240 	call	d224 <__floatsidf>
    4864:	d9800f17 	ldw	r6,60(sp)
    4868:	d9c01017 	ldw	r7,64(sp)
    486c:	1009883a 	mov	r4,r2
    4870:	180b883a 	mov	r5,r3
    4874:	000c03c0 	call	c03c <__muldf3>
    4878:	000d883a 	mov	r6,zero
    487c:	01d00734 	movhi	r7,16412
    4880:	1009883a 	mov	r4,r2
    4884:	180b883a 	mov	r5,r3
    4888:	000ab680 	call	ab68 <__adddf3>
    488c:	047f3034 	movhi	r17,64704
    4890:	1021883a 	mov	r16,r2
    4894:	1c63883a 	add	r17,r3,r17
    4898:	d9000f17 	ldw	r4,60(sp)
    489c:	d9401017 	ldw	r5,64(sp)
    48a0:	000d883a 	mov	r6,zero
    48a4:	01d00534 	movhi	r7,16404
    48a8:	000c8a80 	call	c8a8 <__subdf3>
    48ac:	800d883a 	mov	r6,r16
    48b0:	880f883a 	mov	r7,r17
    48b4:	1009883a 	mov	r4,r2
    48b8:	180b883a 	mov	r5,r3
    48bc:	102b883a 	mov	r21,r2
    48c0:	1829883a 	mov	r20,r3
    48c4:	000be6c0 	call	be6c <__gedf2>
    48c8:	00806c16 	blt	zero,r2,4a7c <_dtoa_r+0x1304>
    48cc:	89e0003c 	xorhi	r7,r17,32768
    48d0:	800d883a 	mov	r6,r16
    48d4:	a809883a 	mov	r4,r21
    48d8:	a00b883a 	mov	r5,r20
    48dc:	000bf480 	call	bf48 <__ledf2>
    48e0:	103d7e0e 	bge	r2,zero,3edc <__alt_exception_stack_pointer+0xf8003edc>
    48e4:	002b883a 	mov	r21,zero
    48e8:	0023883a 	mov	r17,zero
    48ec:	003efb06 	br	44dc <__alt_exception_stack_pointer+0xf80044dc>
    48f0:	d8800717 	ldw	r2,28(sp)
    48f4:	003bd006 	br	3838 <__alt_exception_stack_pointer+0xf8003838>
    48f8:	d9000a17 	ldw	r4,40(sp)
    48fc:	d9800d17 	ldw	r6,52(sp)
    4900:	dd400a15 	stw	r21,40(sp)
    4904:	a905c83a 	sub	r2,r21,r4
    4908:	308d883a 	add	r6,r6,r2
    490c:	d9800d15 	stw	r6,52(sp)
    4910:	002b883a 	mov	r21,zero
    4914:	003e0606 	br	4130 <__alt_exception_stack_pointer+0xf8004130>
    4918:	9023883a 	mov	r17,r18
    491c:	9829883a 	mov	r20,r19
    4920:	04000084 	movi	r16,2
    4924:	003c9206 	br	3b70 <__alt_exception_stack_pointer+0xf8003b70>
    4928:	04000044 	movi	r16,1
    492c:	dc000c15 	stw	r16,48(sp)
    4930:	dc000615 	stw	r16,24(sp)
    4934:	dc002215 	stw	r16,136(sp)
    4938:	e0001115 	stw	zero,68(fp)
    493c:	000b883a 	mov	r5,zero
    4940:	003c6906 	br	3ae8 <__alt_exception_stack_pointer+0xf8003ae8>
    4944:	3021883a 	mov	r16,r6
    4948:	003ffb06 	br	4938 <__alt_exception_stack_pointer+0xf8004938>
    494c:	1000021e 	bne	r2,zero,4958 <_dtoa_r+0x11e0>
    4950:	4200004c 	andi	r8,r8,1
    4954:	403e7d1e 	bne	r8,zero,434c <__alt_exception_stack_pointer+0xf800434c>
    4958:	01000c04 	movi	r4,48
    495c:	00000106 	br	4964 <_dtoa_r+0x11ec>
    4960:	102f883a 	mov	r23,r2
    4964:	b8bfffc4 	addi	r2,r23,-1
    4968:	10c00007 	ldb	r3,0(r2)
    496c:	193ffc26 	beq	r3,r4,4960 <__alt_exception_stack_pointer+0xf8004960>
    4970:	003e8706 	br	4390 <__alt_exception_stack_pointer+0xf8004390>
    4974:	d8800517 	ldw	r2,20(sp)
    4978:	00a3c83a 	sub	r17,zero,r2
    497c:	8800a426 	beq	r17,zero,4c10 <_dtoa_r+0x1498>
    4980:	888003cc 	andi	r2,r17,15
    4984:	100490fa 	slli	r2,r2,3
    4988:	00c00074 	movhi	r3,1
    498c:	18ff2404 	addi	r3,r3,-880
    4990:	1885883a 	add	r2,r3,r2
    4994:	11800017 	ldw	r6,0(r2)
    4998:	11c00117 	ldw	r7,4(r2)
    499c:	9009883a 	mov	r4,r18
    49a0:	980b883a 	mov	r5,r19
    49a4:	8823d13a 	srai	r17,r17,4
    49a8:	000c03c0 	call	c03c <__muldf3>
    49ac:	d8800f15 	stw	r2,60(sp)
    49b0:	d8c01015 	stw	r3,64(sp)
    49b4:	8800e826 	beq	r17,zero,4d58 <_dtoa_r+0x15e0>
    49b8:	05000074 	movhi	r20,1
    49bc:	a53f1a04 	addi	r20,r20,-920
    49c0:	04000084 	movi	r16,2
    49c4:	8980004c 	andi	r6,r17,1
    49c8:	1009883a 	mov	r4,r2
    49cc:	8823d07a 	srai	r17,r17,1
    49d0:	180b883a 	mov	r5,r3
    49d4:	30000426 	beq	r6,zero,49e8 <_dtoa_r+0x1270>
    49d8:	a1800017 	ldw	r6,0(r20)
    49dc:	a1c00117 	ldw	r7,4(r20)
    49e0:	84000044 	addi	r16,r16,1
    49e4:	000c03c0 	call	c03c <__muldf3>
    49e8:	a5000204 	addi	r20,r20,8
    49ec:	883ff51e 	bne	r17,zero,49c4 <__alt_exception_stack_pointer+0xf80049c4>
    49f0:	d8800f15 	stw	r2,60(sp)
    49f4:	d8c01015 	stw	r3,64(sp)
    49f8:	003c7606 	br	3bd4 <__alt_exception_stack_pointer+0xf8003bd4>
    49fc:	00c00c04 	movi	r3,48
    4a00:	10c00005 	stb	r3,0(r2)
    4a04:	d8c00517 	ldw	r3,20(sp)
    4a08:	bd3fffc3 	ldbu	r20,-1(r23)
    4a0c:	18c00044 	addi	r3,r3,1
    4a10:	d8c00515 	stw	r3,20(sp)
    4a14:	003db906 	br	40fc <__alt_exception_stack_pointer+0xf80040fc>
    4a18:	89400117 	ldw	r5,4(r17)
    4a1c:	e009883a 	mov	r4,fp
    4a20:	00060000 	call	6000 <_Balloc>
    4a24:	89800417 	ldw	r6,16(r17)
    4a28:	89400304 	addi	r5,r17,12
    4a2c:	11000304 	addi	r4,r2,12
    4a30:	31800084 	addi	r6,r6,2
    4a34:	318d883a 	add	r6,r6,r6
    4a38:	318d883a 	add	r6,r6,r6
    4a3c:	1027883a 	mov	r19,r2
    4a40:	0005d900 	call	5d90 <memcpy>
    4a44:	01800044 	movi	r6,1
    4a48:	980b883a 	mov	r5,r19
    4a4c:	e009883a 	mov	r4,fp
    4a50:	000683c0 	call	683c <__lshift>
    4a54:	1029883a 	mov	r20,r2
    4a58:	003ecc06 	br	458c <__alt_exception_stack_pointer+0xf800458c>
    4a5c:	00800e44 	movi	r2,57
    4a60:	90809026 	beq	r18,r2,4ca4 <_dtoa_r+0x152c>
    4a64:	92000044 	addi	r8,r18,1
    4a68:	003f1f06 	br	46e8 <__alt_exception_stack_pointer+0xf80046e8>
    4a6c:	9011883a 	mov	r8,r18
    4a70:	8825883a 	mov	r18,r17
    4a74:	a023883a 	mov	r17,r20
    4a78:	003e2906 	br	4320 <__alt_exception_stack_pointer+0xf8004320>
    4a7c:	002b883a 	mov	r21,zero
    4a80:	0023883a 	mov	r17,zero
    4a84:	003f5406 	br	47d8 <__alt_exception_stack_pointer+0xf80047d8>
    4a88:	61bfffc4 	addi	r6,r12,-1
    4a8c:	300490fa 	slli	r2,r6,3
    4a90:	00c00074 	movhi	r3,1
    4a94:	18ff2404 	addi	r3,r3,-880
    4a98:	1885883a 	add	r2,r3,r2
    4a9c:	11000017 	ldw	r4,0(r2)
    4aa0:	11400117 	ldw	r5,4(r2)
    4aa4:	d8800717 	ldw	r2,28(sp)
    4aa8:	880f883a 	mov	r7,r17
    4aac:	d9801215 	stw	r6,72(sp)
    4ab0:	800d883a 	mov	r6,r16
    4ab4:	db001615 	stw	r12,88(sp)
    4ab8:	15c00044 	addi	r23,r2,1
    4abc:	000c03c0 	call	c03c <__muldf3>
    4ac0:	d9401017 	ldw	r5,64(sp)
    4ac4:	d9000f17 	ldw	r4,60(sp)
    4ac8:	d8c01515 	stw	r3,84(sp)
    4acc:	d8801415 	stw	r2,80(sp)
    4ad0:	000d1a40 	call	d1a4 <__fixdfsi>
    4ad4:	1009883a 	mov	r4,r2
    4ad8:	1021883a 	mov	r16,r2
    4adc:	000d2240 	call	d224 <__floatsidf>
    4ae0:	d9000f17 	ldw	r4,60(sp)
    4ae4:	d9401017 	ldw	r5,64(sp)
    4ae8:	100d883a 	mov	r6,r2
    4aec:	180f883a 	mov	r7,r3
    4af0:	000c8a80 	call	c8a8 <__subdf3>
    4af4:	1829883a 	mov	r20,r3
    4af8:	d8c00717 	ldw	r3,28(sp)
    4afc:	84000c04 	addi	r16,r16,48
    4b00:	1023883a 	mov	r17,r2
    4b04:	1c000005 	stb	r16,0(r3)
    4b08:	db001617 	ldw	r12,88(sp)
    4b0c:	00800044 	movi	r2,1
    4b10:	60802226 	beq	r12,r2,4b9c <_dtoa_r+0x1424>
    4b14:	d9c00717 	ldw	r7,28(sp)
    4b18:	8805883a 	mov	r2,r17
    4b1c:	b82b883a 	mov	r21,r23
    4b20:	3b19883a 	add	r12,r7,r12
    4b24:	6023883a 	mov	r17,r12
    4b28:	a007883a 	mov	r3,r20
    4b2c:	dc800f15 	stw	r18,60(sp)
    4b30:	000d883a 	mov	r6,zero
    4b34:	01d00934 	movhi	r7,16420
    4b38:	1009883a 	mov	r4,r2
    4b3c:	180b883a 	mov	r5,r3
    4b40:	000c03c0 	call	c03c <__muldf3>
    4b44:	180b883a 	mov	r5,r3
    4b48:	1009883a 	mov	r4,r2
    4b4c:	1829883a 	mov	r20,r3
    4b50:	1025883a 	mov	r18,r2
    4b54:	000d1a40 	call	d1a4 <__fixdfsi>
    4b58:	1009883a 	mov	r4,r2
    4b5c:	1021883a 	mov	r16,r2
    4b60:	000d2240 	call	d224 <__floatsidf>
    4b64:	100d883a 	mov	r6,r2
    4b68:	180f883a 	mov	r7,r3
    4b6c:	9009883a 	mov	r4,r18
    4b70:	a00b883a 	mov	r5,r20
    4b74:	84000c04 	addi	r16,r16,48
    4b78:	000c8a80 	call	c8a8 <__subdf3>
    4b7c:	ad400044 	addi	r21,r21,1
    4b80:	ac3fffc5 	stb	r16,-1(r21)
    4b84:	ac7fea1e 	bne	r21,r17,4b30 <__alt_exception_stack_pointer+0xf8004b30>
    4b88:	1023883a 	mov	r17,r2
    4b8c:	d8801217 	ldw	r2,72(sp)
    4b90:	dc800f17 	ldw	r18,60(sp)
    4b94:	1829883a 	mov	r20,r3
    4b98:	b8af883a 	add	r23,r23,r2
    4b9c:	d9001417 	ldw	r4,80(sp)
    4ba0:	d9401517 	ldw	r5,84(sp)
    4ba4:	000d883a 	mov	r6,zero
    4ba8:	01cff834 	movhi	r7,16352
    4bac:	000ab680 	call	ab68 <__adddf3>
    4bb0:	880d883a 	mov	r6,r17
    4bb4:	a00f883a 	mov	r7,r20
    4bb8:	1009883a 	mov	r4,r2
    4bbc:	180b883a 	mov	r5,r3
    4bc0:	000bf480 	call	bf48 <__ledf2>
    4bc4:	10003e0e 	bge	r2,zero,4cc0 <_dtoa_r+0x1548>
    4bc8:	d9001317 	ldw	r4,76(sp)
    4bcc:	bd3fffc3 	ldbu	r20,-1(r23)
    4bd0:	d9000515 	stw	r4,20(sp)
    4bd4:	003d3b06 	br	40c4 <__alt_exception_stack_pointer+0xf80040c4>
    4bd8:	0027883a 	mov	r19,zero
    4bdc:	003f1b06 	br	484c <__alt_exception_stack_pointer+0xf800484c>
    4be0:	d8800817 	ldw	r2,32(sp)
    4be4:	11e9c83a 	sub	r20,r2,r7
    4be8:	0005883a 	mov	r2,zero
    4bec:	003d5406 	br	4140 <__alt_exception_stack_pointer+0xf8004140>
    4bf0:	00800044 	movi	r2,1
    4bf4:	003dc706 	br	4314 <__alt_exception_stack_pointer+0xf8004314>
    4bf8:	d8c00217 	ldw	r3,8(sp)
    4bfc:	00800d84 	movi	r2,54
    4c00:	dd400a17 	ldw	r21,40(sp)
    4c04:	10c5c83a 	sub	r2,r2,r3
    4c08:	dd000817 	ldw	r20,32(sp)
    4c0c:	003d4c06 	br	4140 <__alt_exception_stack_pointer+0xf8004140>
    4c10:	dc800f15 	stw	r18,60(sp)
    4c14:	dcc01015 	stw	r19,64(sp)
    4c18:	04000084 	movi	r16,2
    4c1c:	003bed06 	br	3bd4 <__alt_exception_stack_pointer+0xf8003bd4>
    4c20:	d9000617 	ldw	r4,24(sp)
    4c24:	203f0d26 	beq	r4,zero,485c <__alt_exception_stack_pointer+0xf800485c>
    4c28:	d9800c17 	ldw	r6,48(sp)
    4c2c:	01bcab0e 	bge	zero,r6,3edc <__alt_exception_stack_pointer+0xf8003edc>
    4c30:	d9401017 	ldw	r5,64(sp)
    4c34:	d9000f17 	ldw	r4,60(sp)
    4c38:	000d883a 	mov	r6,zero
    4c3c:	01d00934 	movhi	r7,16420
    4c40:	000c03c0 	call	c03c <__muldf3>
    4c44:	81000044 	addi	r4,r16,1
    4c48:	d8800f15 	stw	r2,60(sp)
    4c4c:	d8c01015 	stw	r3,64(sp)
    4c50:	000d2240 	call	d224 <__floatsidf>
    4c54:	d9800f17 	ldw	r6,60(sp)
    4c58:	d9c01017 	ldw	r7,64(sp)
    4c5c:	1009883a 	mov	r4,r2
    4c60:	180b883a 	mov	r5,r3
    4c64:	000c03c0 	call	c03c <__muldf3>
    4c68:	01d00734 	movhi	r7,16412
    4c6c:	000d883a 	mov	r6,zero
    4c70:	1009883a 	mov	r4,r2
    4c74:	180b883a 	mov	r5,r3
    4c78:	000ab680 	call	ab68 <__adddf3>
    4c7c:	d9c00517 	ldw	r7,20(sp)
    4c80:	047f3034 	movhi	r17,64704
    4c84:	1021883a 	mov	r16,r2
    4c88:	39ffffc4 	addi	r7,r7,-1
    4c8c:	d9c01315 	stw	r7,76(sp)
    4c90:	1c63883a 	add	r17,r3,r17
    4c94:	db000c17 	ldw	r12,48(sp)
    4c98:	003bea06 	br	3c44 <__alt_exception_stack_pointer+0xf8003c44>
    4c9c:	dc000915 	stw	r16,36(sp)
    4ca0:	003e0e06 	br	44dc <__alt_exception_stack_pointer+0xf80044dc>
    4ca4:	01000e44 	movi	r4,57
    4ca8:	8825883a 	mov	r18,r17
    4cac:	9dc00044 	addi	r23,r19,1
    4cb0:	99000005 	stb	r4,0(r19)
    4cb4:	a023883a 	mov	r17,r20
    4cb8:	dc000915 	stw	r16,36(sp)
    4cbc:	003da406 	br	4350 <__alt_exception_stack_pointer+0xf8004350>
    4cc0:	d9801417 	ldw	r6,80(sp)
    4cc4:	d9c01517 	ldw	r7,84(sp)
    4cc8:	0009883a 	mov	r4,zero
    4ccc:	014ff834 	movhi	r5,16352
    4cd0:	000c8a80 	call	c8a8 <__subdf3>
    4cd4:	880d883a 	mov	r6,r17
    4cd8:	a00f883a 	mov	r7,r20
    4cdc:	1009883a 	mov	r4,r2
    4ce0:	180b883a 	mov	r5,r3
    4ce4:	000be6c0 	call	be6c <__gedf2>
    4ce8:	00bc7c0e 	bge	zero,r2,3edc <__alt_exception_stack_pointer+0xf8003edc>
    4cec:	01000c04 	movi	r4,48
    4cf0:	00000106 	br	4cf8 <_dtoa_r+0x1580>
    4cf4:	102f883a 	mov	r23,r2
    4cf8:	b8bfffc4 	addi	r2,r23,-1
    4cfc:	10c00007 	ldb	r3,0(r2)
    4d00:	193ffc26 	beq	r3,r4,4cf4 <__alt_exception_stack_pointer+0xf8004cf4>
    4d04:	d9801317 	ldw	r6,76(sp)
    4d08:	d9800515 	stw	r6,20(sp)
    4d0c:	003c4406 	br	3e20 <__alt_exception_stack_pointer+0xf8003e20>
    4d10:	d9801317 	ldw	r6,76(sp)
    4d14:	d9800515 	stw	r6,20(sp)
    4d18:	003cea06 	br	40c4 <__alt_exception_stack_pointer+0xf80040c4>
    4d1c:	dd800f17 	ldw	r22,60(sp)
    4d20:	dcc01017 	ldw	r19,64(sp)
    4d24:	dc801217 	ldw	r18,72(sp)
    4d28:	003c6c06 	br	3edc <__alt_exception_stack_pointer+0xf8003edc>
    4d2c:	903e031e 	bne	r18,zero,453c <__alt_exception_stack_pointer+0xf800453c>
    4d30:	003ebb06 	br	4820 <__alt_exception_stack_pointer+0xf8004820>
    4d34:	103e6c1e 	bne	r2,zero,46e8 <__alt_exception_stack_pointer+0xf80046e8>
    4d38:	4080004c 	andi	r2,r8,1
    4d3c:	103e6a26 	beq	r2,zero,46e8 <__alt_exception_stack_pointer+0xf80046e8>
    4d40:	003e6606 	br	46dc <__alt_exception_stack_pointer+0xf80046dc>
    4d44:	d8c00317 	ldw	r3,12(sp)
    4d48:	00800084 	movi	r2,2
    4d4c:	10c02916 	blt	r2,r3,4df4 <_dtoa_r+0x167c>
    4d50:	d9000c17 	ldw	r4,48(sp)
    4d54:	003e8806 	br	4778 <__alt_exception_stack_pointer+0xf8004778>
    4d58:	04000084 	movi	r16,2
    4d5c:	003b9d06 	br	3bd4 <__alt_exception_stack_pointer+0xf8003bd4>
    4d60:	d9001317 	ldw	r4,76(sp)
    4d64:	d9000515 	stw	r4,20(sp)
    4d68:	003cd606 	br	40c4 <__alt_exception_stack_pointer+0xf80040c4>
    4d6c:	d8801317 	ldw	r2,76(sp)
    4d70:	d8800515 	stw	r2,20(sp)
    4d74:	003c2a06 	br	3e20 <__alt_exception_stack_pointer+0xf8003e20>
    4d78:	d9800317 	ldw	r6,12(sp)
    4d7c:	00800084 	movi	r2,2
    4d80:	11801516 	blt	r2,r6,4dd8 <_dtoa_r+0x1660>
    4d84:	d9c00c17 	ldw	r7,48(sp)
    4d88:	d9c00615 	stw	r7,24(sp)
    4d8c:	003df706 	br	456c <__alt_exception_stack_pointer+0xf800456c>
    4d90:	193d3926 	beq	r3,r4,4278 <__alt_exception_stack_pointer+0xf8004278>
    4d94:	00c00f04 	movi	r3,60
    4d98:	1885c83a 	sub	r2,r3,r2
    4d9c:	003ddf06 	br	451c <__alt_exception_stack_pointer+0xf800451c>
    4da0:	e009883a 	mov	r4,fp
    4da4:	e0001115 	stw	zero,68(fp)
    4da8:	000b883a 	mov	r5,zero
    4dac:	00060000 	call	6000 <_Balloc>
    4db0:	d8800715 	stw	r2,28(sp)
    4db4:	d8c00717 	ldw	r3,28(sp)
    4db8:	00bfffc4 	movi	r2,-1
    4dbc:	01000044 	movi	r4,1
    4dc0:	d8800c15 	stw	r2,48(sp)
    4dc4:	e0c01015 	stw	r3,64(fp)
    4dc8:	d9000b15 	stw	r4,44(sp)
    4dcc:	d8800615 	stw	r2,24(sp)
    4dd0:	d8002215 	stw	zero,136(sp)
    4dd4:	003c4106 	br	3edc <__alt_exception_stack_pointer+0xf8003edc>
    4dd8:	d8c00c17 	ldw	r3,48(sp)
    4ddc:	d8c00615 	stw	r3,24(sp)
    4de0:	003e7006 	br	47a4 <__alt_exception_stack_pointer+0xf80047a4>
    4de4:	04400044 	movi	r17,1
    4de8:	003b2006 	br	3a6c <__alt_exception_stack_pointer+0xf8003a6c>
    4dec:	000b883a 	mov	r5,zero
    4df0:	003b3d06 	br	3ae8 <__alt_exception_stack_pointer+0xf8003ae8>
    4df4:	d8800c17 	ldw	r2,48(sp)
    4df8:	d8800615 	stw	r2,24(sp)
    4dfc:	003e6906 	br	47a4 <__alt_exception_stack_pointer+0xf80047a4>

00004e00 <__sflush_r>:
    4e00:	2880030b 	ldhu	r2,12(r5)
    4e04:	defffb04 	addi	sp,sp,-20
    4e08:	dcc00315 	stw	r19,12(sp)
    4e0c:	dc400115 	stw	r17,4(sp)
    4e10:	dfc00415 	stw	ra,16(sp)
    4e14:	dc800215 	stw	r18,8(sp)
    4e18:	dc000015 	stw	r16,0(sp)
    4e1c:	10c0020c 	andi	r3,r2,8
    4e20:	2823883a 	mov	r17,r5
    4e24:	2027883a 	mov	r19,r4
    4e28:	1800311e 	bne	r3,zero,4ef0 <__sflush_r+0xf0>
    4e2c:	28c00117 	ldw	r3,4(r5)
    4e30:	10820014 	ori	r2,r2,2048
    4e34:	2880030d 	sth	r2,12(r5)
    4e38:	00c04b0e 	bge	zero,r3,4f68 <__sflush_r+0x168>
    4e3c:	8a000a17 	ldw	r8,40(r17)
    4e40:	40002326 	beq	r8,zero,4ed0 <__sflush_r+0xd0>
    4e44:	9c000017 	ldw	r16,0(r19)
    4e48:	10c4000c 	andi	r3,r2,4096
    4e4c:	98000015 	stw	zero,0(r19)
    4e50:	18004826 	beq	r3,zero,4f74 <__sflush_r+0x174>
    4e54:	89801417 	ldw	r6,80(r17)
    4e58:	10c0010c 	andi	r3,r2,4
    4e5c:	18000626 	beq	r3,zero,4e78 <__sflush_r+0x78>
    4e60:	88c00117 	ldw	r3,4(r17)
    4e64:	88800c17 	ldw	r2,48(r17)
    4e68:	30cdc83a 	sub	r6,r6,r3
    4e6c:	10000226 	beq	r2,zero,4e78 <__sflush_r+0x78>
    4e70:	88800f17 	ldw	r2,60(r17)
    4e74:	308dc83a 	sub	r6,r6,r2
    4e78:	89400717 	ldw	r5,28(r17)
    4e7c:	000f883a 	mov	r7,zero
    4e80:	9809883a 	mov	r4,r19
    4e84:	403ee83a 	callr	r8
    4e88:	00ffffc4 	movi	r3,-1
    4e8c:	10c04426 	beq	r2,r3,4fa0 <__sflush_r+0x1a0>
    4e90:	88c0030b 	ldhu	r3,12(r17)
    4e94:	89000417 	ldw	r4,16(r17)
    4e98:	88000115 	stw	zero,4(r17)
    4e9c:	197dffcc 	andi	r5,r3,63487
    4ea0:	8940030d 	sth	r5,12(r17)
    4ea4:	89000015 	stw	r4,0(r17)
    4ea8:	18c4000c 	andi	r3,r3,4096
    4eac:	18002c1e 	bne	r3,zero,4f60 <__sflush_r+0x160>
    4eb0:	89400c17 	ldw	r5,48(r17)
    4eb4:	9c000015 	stw	r16,0(r19)
    4eb8:	28000526 	beq	r5,zero,4ed0 <__sflush_r+0xd0>
    4ebc:	88801004 	addi	r2,r17,64
    4ec0:	28800226 	beq	r5,r2,4ecc <__sflush_r+0xcc>
    4ec4:	9809883a 	mov	r4,r19
    4ec8:	000557c0 	call	557c <_free_r>
    4ecc:	88000c15 	stw	zero,48(r17)
    4ed0:	0005883a 	mov	r2,zero
    4ed4:	dfc00417 	ldw	ra,16(sp)
    4ed8:	dcc00317 	ldw	r19,12(sp)
    4edc:	dc800217 	ldw	r18,8(sp)
    4ee0:	dc400117 	ldw	r17,4(sp)
    4ee4:	dc000017 	ldw	r16,0(sp)
    4ee8:	dec00504 	addi	sp,sp,20
    4eec:	f800283a 	ret
    4ef0:	2c800417 	ldw	r18,16(r5)
    4ef4:	903ff626 	beq	r18,zero,4ed0 <__alt_exception_stack_pointer+0xf8004ed0>
    4ef8:	2c000017 	ldw	r16,0(r5)
    4efc:	108000cc 	andi	r2,r2,3
    4f00:	2c800015 	stw	r18,0(r5)
    4f04:	84a1c83a 	sub	r16,r16,r18
    4f08:	1000131e 	bne	r2,zero,4f58 <__sflush_r+0x158>
    4f0c:	28800517 	ldw	r2,20(r5)
    4f10:	88800215 	stw	r2,8(r17)
    4f14:	04000316 	blt	zero,r16,4f24 <__sflush_r+0x124>
    4f18:	003fed06 	br	4ed0 <__alt_exception_stack_pointer+0xf8004ed0>
    4f1c:	90a5883a 	add	r18,r18,r2
    4f20:	043feb0e 	bge	zero,r16,4ed0 <__alt_exception_stack_pointer+0xf8004ed0>
    4f24:	88800917 	ldw	r2,36(r17)
    4f28:	89400717 	ldw	r5,28(r17)
    4f2c:	800f883a 	mov	r7,r16
    4f30:	900d883a 	mov	r6,r18
    4f34:	9809883a 	mov	r4,r19
    4f38:	103ee83a 	callr	r2
    4f3c:	80a1c83a 	sub	r16,r16,r2
    4f40:	00bff616 	blt	zero,r2,4f1c <__alt_exception_stack_pointer+0xf8004f1c>
    4f44:	88c0030b 	ldhu	r3,12(r17)
    4f48:	00bfffc4 	movi	r2,-1
    4f4c:	18c01014 	ori	r3,r3,64
    4f50:	88c0030d 	sth	r3,12(r17)
    4f54:	003fdf06 	br	4ed4 <__alt_exception_stack_pointer+0xf8004ed4>
    4f58:	0005883a 	mov	r2,zero
    4f5c:	003fec06 	br	4f10 <__alt_exception_stack_pointer+0xf8004f10>
    4f60:	88801415 	stw	r2,80(r17)
    4f64:	003fd206 	br	4eb0 <__alt_exception_stack_pointer+0xf8004eb0>
    4f68:	28c00f17 	ldw	r3,60(r5)
    4f6c:	00ffb316 	blt	zero,r3,4e3c <__alt_exception_stack_pointer+0xf8004e3c>
    4f70:	003fd706 	br	4ed0 <__alt_exception_stack_pointer+0xf8004ed0>
    4f74:	89400717 	ldw	r5,28(r17)
    4f78:	000d883a 	mov	r6,zero
    4f7c:	01c00044 	movi	r7,1
    4f80:	9809883a 	mov	r4,r19
    4f84:	403ee83a 	callr	r8
    4f88:	100d883a 	mov	r6,r2
    4f8c:	00bfffc4 	movi	r2,-1
    4f90:	30801426 	beq	r6,r2,4fe4 <__sflush_r+0x1e4>
    4f94:	8880030b 	ldhu	r2,12(r17)
    4f98:	8a000a17 	ldw	r8,40(r17)
    4f9c:	003fae06 	br	4e58 <__alt_exception_stack_pointer+0xf8004e58>
    4fa0:	98c00017 	ldw	r3,0(r19)
    4fa4:	183fba26 	beq	r3,zero,4e90 <__alt_exception_stack_pointer+0xf8004e90>
    4fa8:	01000744 	movi	r4,29
    4fac:	19000626 	beq	r3,r4,4fc8 <__sflush_r+0x1c8>
    4fb0:	01000584 	movi	r4,22
    4fb4:	19000426 	beq	r3,r4,4fc8 <__sflush_r+0x1c8>
    4fb8:	88c0030b 	ldhu	r3,12(r17)
    4fbc:	18c01014 	ori	r3,r3,64
    4fc0:	88c0030d 	sth	r3,12(r17)
    4fc4:	003fc306 	br	4ed4 <__alt_exception_stack_pointer+0xf8004ed4>
    4fc8:	8880030b 	ldhu	r2,12(r17)
    4fcc:	88c00417 	ldw	r3,16(r17)
    4fd0:	88000115 	stw	zero,4(r17)
    4fd4:	10bdffcc 	andi	r2,r2,63487
    4fd8:	8880030d 	sth	r2,12(r17)
    4fdc:	88c00015 	stw	r3,0(r17)
    4fe0:	003fb306 	br	4eb0 <__alt_exception_stack_pointer+0xf8004eb0>
    4fe4:	98800017 	ldw	r2,0(r19)
    4fe8:	103fea26 	beq	r2,zero,4f94 <__alt_exception_stack_pointer+0xf8004f94>
    4fec:	00c00744 	movi	r3,29
    4ff0:	10c00226 	beq	r2,r3,4ffc <__sflush_r+0x1fc>
    4ff4:	00c00584 	movi	r3,22
    4ff8:	10c0031e 	bne	r2,r3,5008 <__sflush_r+0x208>
    4ffc:	9c000015 	stw	r16,0(r19)
    5000:	0005883a 	mov	r2,zero
    5004:	003fb306 	br	4ed4 <__alt_exception_stack_pointer+0xf8004ed4>
    5008:	88c0030b 	ldhu	r3,12(r17)
    500c:	3005883a 	mov	r2,r6
    5010:	18c01014 	ori	r3,r3,64
    5014:	88c0030d 	sth	r3,12(r17)
    5018:	003fae06 	br	4ed4 <__alt_exception_stack_pointer+0xf8004ed4>

0000501c <_fflush_r>:
    501c:	defffd04 	addi	sp,sp,-12
    5020:	dc000115 	stw	r16,4(sp)
    5024:	dfc00215 	stw	ra,8(sp)
    5028:	2021883a 	mov	r16,r4
    502c:	20000226 	beq	r4,zero,5038 <_fflush_r+0x1c>
    5030:	20800e17 	ldw	r2,56(r4)
    5034:	10000c26 	beq	r2,zero,5068 <_fflush_r+0x4c>
    5038:	2880030f 	ldh	r2,12(r5)
    503c:	1000051e 	bne	r2,zero,5054 <_fflush_r+0x38>
    5040:	0005883a 	mov	r2,zero
    5044:	dfc00217 	ldw	ra,8(sp)
    5048:	dc000117 	ldw	r16,4(sp)
    504c:	dec00304 	addi	sp,sp,12
    5050:	f800283a 	ret
    5054:	8009883a 	mov	r4,r16
    5058:	dfc00217 	ldw	ra,8(sp)
    505c:	dc000117 	ldw	r16,4(sp)
    5060:	dec00304 	addi	sp,sp,12
    5064:	0004e001 	jmpi	4e00 <__sflush_r>
    5068:	d9400015 	stw	r5,0(sp)
    506c:	00054080 	call	5408 <__sinit>
    5070:	d9400017 	ldw	r5,0(sp)
    5074:	003ff006 	br	5038 <__alt_exception_stack_pointer+0xf8005038>

00005078 <fflush>:
    5078:	20000526 	beq	r4,zero,5090 <fflush+0x18>
    507c:	00800074 	movhi	r2,1
    5080:	10865c04 	addi	r2,r2,6512
    5084:	200b883a 	mov	r5,r4
    5088:	11000017 	ldw	r4,0(r2)
    508c:	000501c1 	jmpi	501c <_fflush_r>
    5090:	00800074 	movhi	r2,1
    5094:	10865b04 	addi	r2,r2,6508
    5098:	11000017 	ldw	r4,0(r2)
    509c:	01400034 	movhi	r5,0
    50a0:	29540704 	addi	r5,r5,20508
    50a4:	00059501 	jmpi	5950 <_fwalk_reent>

000050a8 <__fp_unlock>:
    50a8:	0005883a 	mov	r2,zero
    50ac:	f800283a 	ret

000050b0 <_cleanup_r>:
    50b0:	01400074 	movhi	r5,1
    50b4:	29631904 	addi	r5,r5,-29596
    50b8:	00059501 	jmpi	5950 <_fwalk_reent>

000050bc <__sinit.part.1>:
    50bc:	defff704 	addi	sp,sp,-36
    50c0:	00c00034 	movhi	r3,0
    50c4:	dfc00815 	stw	ra,32(sp)
    50c8:	ddc00715 	stw	r23,28(sp)
    50cc:	dd800615 	stw	r22,24(sp)
    50d0:	dd400515 	stw	r21,20(sp)
    50d4:	dd000415 	stw	r20,16(sp)
    50d8:	dcc00315 	stw	r19,12(sp)
    50dc:	dc800215 	stw	r18,8(sp)
    50e0:	dc400115 	stw	r17,4(sp)
    50e4:	dc000015 	stw	r16,0(sp)
    50e8:	18d42c04 	addi	r3,r3,20656
    50ec:	24000117 	ldw	r16,4(r4)
    50f0:	20c00f15 	stw	r3,60(r4)
    50f4:	2080bb04 	addi	r2,r4,748
    50f8:	00c000c4 	movi	r3,3
    50fc:	20c0b915 	stw	r3,740(r4)
    5100:	2080ba15 	stw	r2,744(r4)
    5104:	2000b815 	stw	zero,736(r4)
    5108:	05c00204 	movi	r23,8
    510c:	00800104 	movi	r2,4
    5110:	2025883a 	mov	r18,r4
    5114:	b80d883a 	mov	r6,r23
    5118:	81001704 	addi	r4,r16,92
    511c:	000b883a 	mov	r5,zero
    5120:	80000015 	stw	zero,0(r16)
    5124:	80000115 	stw	zero,4(r16)
    5128:	80000215 	stw	zero,8(r16)
    512c:	8080030d 	sth	r2,12(r16)
    5130:	80001915 	stw	zero,100(r16)
    5134:	8000038d 	sth	zero,14(r16)
    5138:	80000415 	stw	zero,16(r16)
    513c:	80000515 	stw	zero,20(r16)
    5140:	80000615 	stw	zero,24(r16)
    5144:	0005ed80 	call	5ed8 <memset>
    5148:	05800034 	movhi	r22,0
    514c:	94400217 	ldw	r17,8(r18)
    5150:	05400034 	movhi	r21,0
    5154:	05000034 	movhi	r20,0
    5158:	04c00034 	movhi	r19,0
    515c:	b59c4b04 	addi	r22,r22,28972
    5160:	ad5c6204 	addi	r21,r21,29064
    5164:	a51c8104 	addi	r20,r20,29188
    5168:	9cdc9804 	addi	r19,r19,29280
    516c:	85800815 	stw	r22,32(r16)
    5170:	85400915 	stw	r21,36(r16)
    5174:	85000a15 	stw	r20,40(r16)
    5178:	84c00b15 	stw	r19,44(r16)
    517c:	84000715 	stw	r16,28(r16)
    5180:	00800284 	movi	r2,10
    5184:	8880030d 	sth	r2,12(r17)
    5188:	00800044 	movi	r2,1
    518c:	b80d883a 	mov	r6,r23
    5190:	89001704 	addi	r4,r17,92
    5194:	000b883a 	mov	r5,zero
    5198:	88000015 	stw	zero,0(r17)
    519c:	88000115 	stw	zero,4(r17)
    51a0:	88000215 	stw	zero,8(r17)
    51a4:	88001915 	stw	zero,100(r17)
    51a8:	8880038d 	sth	r2,14(r17)
    51ac:	88000415 	stw	zero,16(r17)
    51b0:	88000515 	stw	zero,20(r17)
    51b4:	88000615 	stw	zero,24(r17)
    51b8:	0005ed80 	call	5ed8 <memset>
    51bc:	94000317 	ldw	r16,12(r18)
    51c0:	00800484 	movi	r2,18
    51c4:	8c400715 	stw	r17,28(r17)
    51c8:	8d800815 	stw	r22,32(r17)
    51cc:	8d400915 	stw	r21,36(r17)
    51d0:	8d000a15 	stw	r20,40(r17)
    51d4:	8cc00b15 	stw	r19,44(r17)
    51d8:	8080030d 	sth	r2,12(r16)
    51dc:	00800084 	movi	r2,2
    51e0:	80000015 	stw	zero,0(r16)
    51e4:	80000115 	stw	zero,4(r16)
    51e8:	80000215 	stw	zero,8(r16)
    51ec:	80001915 	stw	zero,100(r16)
    51f0:	8080038d 	sth	r2,14(r16)
    51f4:	80000415 	stw	zero,16(r16)
    51f8:	80000515 	stw	zero,20(r16)
    51fc:	80000615 	stw	zero,24(r16)
    5200:	b80d883a 	mov	r6,r23
    5204:	000b883a 	mov	r5,zero
    5208:	81001704 	addi	r4,r16,92
    520c:	0005ed80 	call	5ed8 <memset>
    5210:	00800044 	movi	r2,1
    5214:	84000715 	stw	r16,28(r16)
    5218:	85800815 	stw	r22,32(r16)
    521c:	85400915 	stw	r21,36(r16)
    5220:	85000a15 	stw	r20,40(r16)
    5224:	84c00b15 	stw	r19,44(r16)
    5228:	90800e15 	stw	r2,56(r18)
    522c:	dfc00817 	ldw	ra,32(sp)
    5230:	ddc00717 	ldw	r23,28(sp)
    5234:	dd800617 	ldw	r22,24(sp)
    5238:	dd400517 	ldw	r21,20(sp)
    523c:	dd000417 	ldw	r20,16(sp)
    5240:	dcc00317 	ldw	r19,12(sp)
    5244:	dc800217 	ldw	r18,8(sp)
    5248:	dc400117 	ldw	r17,4(sp)
    524c:	dc000017 	ldw	r16,0(sp)
    5250:	dec00904 	addi	sp,sp,36
    5254:	f800283a 	ret

00005258 <__fp_lock>:
    5258:	0005883a 	mov	r2,zero
    525c:	f800283a 	ret

00005260 <__sfmoreglue>:
    5260:	defffc04 	addi	sp,sp,-16
    5264:	dc800215 	stw	r18,8(sp)
    5268:	2825883a 	mov	r18,r5
    526c:	dc000015 	stw	r16,0(sp)
    5270:	01401a04 	movi	r5,104
    5274:	2021883a 	mov	r16,r4
    5278:	913fffc4 	addi	r4,r18,-1
    527c:	dfc00315 	stw	ra,12(sp)
    5280:	dc400115 	stw	r17,4(sp)
    5284:	000072c0 	call	72c <__mulsi3>
    5288:	8009883a 	mov	r4,r16
    528c:	11401d04 	addi	r5,r2,116
    5290:	1023883a 	mov	r17,r2
    5294:	000077c0 	call	77c <_malloc_r>
    5298:	1021883a 	mov	r16,r2
    529c:	10000726 	beq	r2,zero,52bc <__sfmoreglue+0x5c>
    52a0:	11000304 	addi	r4,r2,12
    52a4:	10000015 	stw	zero,0(r2)
    52a8:	14800115 	stw	r18,4(r2)
    52ac:	11000215 	stw	r4,8(r2)
    52b0:	89801a04 	addi	r6,r17,104
    52b4:	000b883a 	mov	r5,zero
    52b8:	0005ed80 	call	5ed8 <memset>
    52bc:	8005883a 	mov	r2,r16
    52c0:	dfc00317 	ldw	ra,12(sp)
    52c4:	dc800217 	ldw	r18,8(sp)
    52c8:	dc400117 	ldw	r17,4(sp)
    52cc:	dc000017 	ldw	r16,0(sp)
    52d0:	dec00404 	addi	sp,sp,16
    52d4:	f800283a 	ret

000052d8 <__sfp>:
    52d8:	defffb04 	addi	sp,sp,-20
    52dc:	dc000015 	stw	r16,0(sp)
    52e0:	04000074 	movhi	r16,1
    52e4:	84065b04 	addi	r16,r16,6508
    52e8:	dcc00315 	stw	r19,12(sp)
    52ec:	2027883a 	mov	r19,r4
    52f0:	81000017 	ldw	r4,0(r16)
    52f4:	dfc00415 	stw	ra,16(sp)
    52f8:	dc800215 	stw	r18,8(sp)
    52fc:	20800e17 	ldw	r2,56(r4)
    5300:	dc400115 	stw	r17,4(sp)
    5304:	1000021e 	bne	r2,zero,5310 <__sfp+0x38>
    5308:	00050bc0 	call	50bc <__sinit.part.1>
    530c:	81000017 	ldw	r4,0(r16)
    5310:	2480b804 	addi	r18,r4,736
    5314:	047fffc4 	movi	r17,-1
    5318:	91000117 	ldw	r4,4(r18)
    531c:	94000217 	ldw	r16,8(r18)
    5320:	213fffc4 	addi	r4,r4,-1
    5324:	20000a16 	blt	r4,zero,5350 <__sfp+0x78>
    5328:	8080030f 	ldh	r2,12(r16)
    532c:	10000c26 	beq	r2,zero,5360 <__sfp+0x88>
    5330:	80c01d04 	addi	r3,r16,116
    5334:	00000206 	br	5340 <__sfp+0x68>
    5338:	18bfe60f 	ldh	r2,-104(r3)
    533c:	10000826 	beq	r2,zero,5360 <__sfp+0x88>
    5340:	213fffc4 	addi	r4,r4,-1
    5344:	1c3ffd04 	addi	r16,r3,-12
    5348:	18c01a04 	addi	r3,r3,104
    534c:	247ffa1e 	bne	r4,r17,5338 <__alt_exception_stack_pointer+0xf8005338>
    5350:	90800017 	ldw	r2,0(r18)
    5354:	10001d26 	beq	r2,zero,53cc <__sfp+0xf4>
    5358:	1025883a 	mov	r18,r2
    535c:	003fee06 	br	5318 <__alt_exception_stack_pointer+0xf8005318>
    5360:	00bfffc4 	movi	r2,-1
    5364:	8080038d 	sth	r2,14(r16)
    5368:	00800044 	movi	r2,1
    536c:	8080030d 	sth	r2,12(r16)
    5370:	80001915 	stw	zero,100(r16)
    5374:	80000015 	stw	zero,0(r16)
    5378:	80000215 	stw	zero,8(r16)
    537c:	80000115 	stw	zero,4(r16)
    5380:	80000415 	stw	zero,16(r16)
    5384:	80000515 	stw	zero,20(r16)
    5388:	80000615 	stw	zero,24(r16)
    538c:	01800204 	movi	r6,8
    5390:	000b883a 	mov	r5,zero
    5394:	81001704 	addi	r4,r16,92
    5398:	0005ed80 	call	5ed8 <memset>
    539c:	8005883a 	mov	r2,r16
    53a0:	80000c15 	stw	zero,48(r16)
    53a4:	80000d15 	stw	zero,52(r16)
    53a8:	80001115 	stw	zero,68(r16)
    53ac:	80001215 	stw	zero,72(r16)
    53b0:	dfc00417 	ldw	ra,16(sp)
    53b4:	dcc00317 	ldw	r19,12(sp)
    53b8:	dc800217 	ldw	r18,8(sp)
    53bc:	dc400117 	ldw	r17,4(sp)
    53c0:	dc000017 	ldw	r16,0(sp)
    53c4:	dec00504 	addi	sp,sp,20
    53c8:	f800283a 	ret
    53cc:	01400104 	movi	r5,4
    53d0:	9809883a 	mov	r4,r19
    53d4:	00052600 	call	5260 <__sfmoreglue>
    53d8:	90800015 	stw	r2,0(r18)
    53dc:	103fde1e 	bne	r2,zero,5358 <__alt_exception_stack_pointer+0xf8005358>
    53e0:	00800304 	movi	r2,12
    53e4:	98800015 	stw	r2,0(r19)
    53e8:	0005883a 	mov	r2,zero
    53ec:	003ff006 	br	53b0 <__alt_exception_stack_pointer+0xf80053b0>

000053f0 <_cleanup>:
    53f0:	00800074 	movhi	r2,1
    53f4:	10865b04 	addi	r2,r2,6508
    53f8:	11000017 	ldw	r4,0(r2)
    53fc:	01400074 	movhi	r5,1
    5400:	29631904 	addi	r5,r5,-29596
    5404:	00059501 	jmpi	5950 <_fwalk_reent>

00005408 <__sinit>:
    5408:	20800e17 	ldw	r2,56(r4)
    540c:	10000126 	beq	r2,zero,5414 <__sinit+0xc>
    5410:	f800283a 	ret
    5414:	00050bc1 	jmpi	50bc <__sinit.part.1>

00005418 <__sfp_lock_acquire>:
    5418:	f800283a 	ret

0000541c <__sfp_lock_release>:
    541c:	f800283a 	ret

00005420 <__sinit_lock_acquire>:
    5420:	f800283a 	ret

00005424 <__sinit_lock_release>:
    5424:	f800283a 	ret

00005428 <__fp_lock_all>:
    5428:	00800074 	movhi	r2,1
    542c:	10865c04 	addi	r2,r2,6512
    5430:	11000017 	ldw	r4,0(r2)
    5434:	01400034 	movhi	r5,0
    5438:	29549604 	addi	r5,r5,21080
    543c:	000588c1 	jmpi	588c <_fwalk>

00005440 <__fp_unlock_all>:
    5440:	00800074 	movhi	r2,1
    5444:	10865c04 	addi	r2,r2,6512
    5448:	11000017 	ldw	r4,0(r2)
    544c:	01400034 	movhi	r5,0
    5450:	29542a04 	addi	r5,r5,20648
    5454:	000588c1 	jmpi	588c <_fwalk>

00005458 <_malloc_trim_r>:
    5458:	defffb04 	addi	sp,sp,-20
    545c:	dcc00315 	stw	r19,12(sp)
    5460:	04c00074 	movhi	r19,1
    5464:	dc800215 	stw	r18,8(sp)
    5468:	dc400115 	stw	r17,4(sp)
    546c:	dc000015 	stw	r16,0(sp)
    5470:	dfc00415 	stw	ra,16(sp)
    5474:	2821883a 	mov	r16,r5
    5478:	9cffae04 	addi	r19,r19,-328
    547c:	2025883a 	mov	r18,r4
    5480:	000d9a80 	call	d9a8 <__malloc_lock>
    5484:	98800217 	ldw	r2,8(r19)
    5488:	14400117 	ldw	r17,4(r2)
    548c:	00bfff04 	movi	r2,-4
    5490:	88a2703a 	and	r17,r17,r2
    5494:	8c21c83a 	sub	r16,r17,r16
    5498:	8403fbc4 	addi	r16,r16,4079
    549c:	8020d33a 	srli	r16,r16,12
    54a0:	0083ffc4 	movi	r2,4095
    54a4:	843fffc4 	addi	r16,r16,-1
    54a8:	8020933a 	slli	r16,r16,12
    54ac:	1400060e 	bge	r2,r16,54c8 <_malloc_trim_r+0x70>
    54b0:	000b883a 	mov	r5,zero
    54b4:	9009883a 	mov	r4,r18
    54b8:	0000ff40 	call	ff4 <_sbrk_r>
    54bc:	98c00217 	ldw	r3,8(r19)
    54c0:	1c47883a 	add	r3,r3,r17
    54c4:	10c00a26 	beq	r2,r3,54f0 <_malloc_trim_r+0x98>
    54c8:	9009883a 	mov	r4,r18
    54cc:	000d9cc0 	call	d9cc <__malloc_unlock>
    54d0:	0005883a 	mov	r2,zero
    54d4:	dfc00417 	ldw	ra,16(sp)
    54d8:	dcc00317 	ldw	r19,12(sp)
    54dc:	dc800217 	ldw	r18,8(sp)
    54e0:	dc400117 	ldw	r17,4(sp)
    54e4:	dc000017 	ldw	r16,0(sp)
    54e8:	dec00504 	addi	sp,sp,20
    54ec:	f800283a 	ret
    54f0:	040bc83a 	sub	r5,zero,r16
    54f4:	9009883a 	mov	r4,r18
    54f8:	0000ff40 	call	ff4 <_sbrk_r>
    54fc:	00ffffc4 	movi	r3,-1
    5500:	10c00d26 	beq	r2,r3,5538 <_malloc_trim_r+0xe0>
    5504:	00c00074 	movhi	r3,1
    5508:	18cd3004 	addi	r3,r3,13504
    550c:	18800017 	ldw	r2,0(r3)
    5510:	99000217 	ldw	r4,8(r19)
    5514:	8c23c83a 	sub	r17,r17,r16
    5518:	8c400054 	ori	r17,r17,1
    551c:	1421c83a 	sub	r16,r2,r16
    5520:	24400115 	stw	r17,4(r4)
    5524:	9009883a 	mov	r4,r18
    5528:	1c000015 	stw	r16,0(r3)
    552c:	000d9cc0 	call	d9cc <__malloc_unlock>
    5530:	00800044 	movi	r2,1
    5534:	003fe706 	br	54d4 <__alt_exception_stack_pointer+0xf80054d4>
    5538:	000b883a 	mov	r5,zero
    553c:	9009883a 	mov	r4,r18
    5540:	0000ff40 	call	ff4 <_sbrk_r>
    5544:	99000217 	ldw	r4,8(r19)
    5548:	014003c4 	movi	r5,15
    554c:	1107c83a 	sub	r3,r2,r4
    5550:	28ffdd0e 	bge	r5,r3,54c8 <__alt_exception_stack_pointer+0xf80054c8>
    5554:	01400074 	movhi	r5,1
    5558:	29465904 	addi	r5,r5,6500
    555c:	29400017 	ldw	r5,0(r5)
    5560:	18c00054 	ori	r3,r3,1
    5564:	20c00115 	stw	r3,4(r4)
    5568:	00c00074 	movhi	r3,1
    556c:	1145c83a 	sub	r2,r2,r5
    5570:	18cd3004 	addi	r3,r3,13504
    5574:	18800015 	stw	r2,0(r3)
    5578:	003fd306 	br	54c8 <__alt_exception_stack_pointer+0xf80054c8>

0000557c <_free_r>:
    557c:	28004126 	beq	r5,zero,5684 <_free_r+0x108>
    5580:	defffd04 	addi	sp,sp,-12
    5584:	dc400115 	stw	r17,4(sp)
    5588:	dc000015 	stw	r16,0(sp)
    558c:	2023883a 	mov	r17,r4
    5590:	2821883a 	mov	r16,r5
    5594:	dfc00215 	stw	ra,8(sp)
    5598:	000d9a80 	call	d9a8 <__malloc_lock>
    559c:	81ffff17 	ldw	r7,-4(r16)
    55a0:	00bfff84 	movi	r2,-2
    55a4:	01000074 	movhi	r4,1
    55a8:	81bffe04 	addi	r6,r16,-8
    55ac:	3884703a 	and	r2,r7,r2
    55b0:	213fae04 	addi	r4,r4,-328
    55b4:	308b883a 	add	r5,r6,r2
    55b8:	2a400117 	ldw	r9,4(r5)
    55bc:	22000217 	ldw	r8,8(r4)
    55c0:	00ffff04 	movi	r3,-4
    55c4:	48c6703a 	and	r3,r9,r3
    55c8:	2a005726 	beq	r5,r8,5728 <_free_r+0x1ac>
    55cc:	28c00115 	stw	r3,4(r5)
    55d0:	39c0004c 	andi	r7,r7,1
    55d4:	3800091e 	bne	r7,zero,55fc <_free_r+0x80>
    55d8:	823ffe17 	ldw	r8,-8(r16)
    55dc:	22400204 	addi	r9,r4,8
    55e0:	320dc83a 	sub	r6,r6,r8
    55e4:	31c00217 	ldw	r7,8(r6)
    55e8:	1205883a 	add	r2,r2,r8
    55ec:	3a406526 	beq	r7,r9,5784 <_free_r+0x208>
    55f0:	32000317 	ldw	r8,12(r6)
    55f4:	3a000315 	stw	r8,12(r7)
    55f8:	41c00215 	stw	r7,8(r8)
    55fc:	28cf883a 	add	r7,r5,r3
    5600:	39c00117 	ldw	r7,4(r7)
    5604:	39c0004c 	andi	r7,r7,1
    5608:	38003a26 	beq	r7,zero,56f4 <_free_r+0x178>
    560c:	10c00054 	ori	r3,r2,1
    5610:	30c00115 	stw	r3,4(r6)
    5614:	3087883a 	add	r3,r6,r2
    5618:	18800015 	stw	r2,0(r3)
    561c:	00c07fc4 	movi	r3,511
    5620:	18801936 	bltu	r3,r2,5688 <_free_r+0x10c>
    5624:	1004d0fa 	srli	r2,r2,3
    5628:	01c00044 	movi	r7,1
    562c:	21400117 	ldw	r5,4(r4)
    5630:	10c00044 	addi	r3,r2,1
    5634:	18c7883a 	add	r3,r3,r3
    5638:	1005d0ba 	srai	r2,r2,2
    563c:	18c7883a 	add	r3,r3,r3
    5640:	18c7883a 	add	r3,r3,r3
    5644:	1907883a 	add	r3,r3,r4
    5648:	3884983a 	sll	r2,r7,r2
    564c:	19c00017 	ldw	r7,0(r3)
    5650:	1a3ffe04 	addi	r8,r3,-8
    5654:	1144b03a 	or	r2,r2,r5
    5658:	32000315 	stw	r8,12(r6)
    565c:	31c00215 	stw	r7,8(r6)
    5660:	20800115 	stw	r2,4(r4)
    5664:	19800015 	stw	r6,0(r3)
    5668:	39800315 	stw	r6,12(r7)
    566c:	8809883a 	mov	r4,r17
    5670:	dfc00217 	ldw	ra,8(sp)
    5674:	dc400117 	ldw	r17,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00304 	addi	sp,sp,12
    5680:	000d9cc1 	jmpi	d9cc <__malloc_unlock>
    5684:	f800283a 	ret
    5688:	100ad27a 	srli	r5,r2,9
    568c:	00c00104 	movi	r3,4
    5690:	19404a36 	bltu	r3,r5,57bc <_free_r+0x240>
    5694:	100ad1ba 	srli	r5,r2,6
    5698:	28c00e44 	addi	r3,r5,57
    569c:	18c7883a 	add	r3,r3,r3
    56a0:	29400e04 	addi	r5,r5,56
    56a4:	18c7883a 	add	r3,r3,r3
    56a8:	18c7883a 	add	r3,r3,r3
    56ac:	1909883a 	add	r4,r3,r4
    56b0:	20c00017 	ldw	r3,0(r4)
    56b4:	01c00074 	movhi	r7,1
    56b8:	213ffe04 	addi	r4,r4,-8
    56bc:	39ffae04 	addi	r7,r7,-328
    56c0:	20c04426 	beq	r4,r3,57d4 <_free_r+0x258>
    56c4:	01ffff04 	movi	r7,-4
    56c8:	19400117 	ldw	r5,4(r3)
    56cc:	29ca703a 	and	r5,r5,r7
    56d0:	1140022e 	bgeu	r2,r5,56dc <_free_r+0x160>
    56d4:	18c00217 	ldw	r3,8(r3)
    56d8:	20fffb1e 	bne	r4,r3,56c8 <__alt_exception_stack_pointer+0xf80056c8>
    56dc:	19000317 	ldw	r4,12(r3)
    56e0:	31000315 	stw	r4,12(r6)
    56e4:	30c00215 	stw	r3,8(r6)
    56e8:	21800215 	stw	r6,8(r4)
    56ec:	19800315 	stw	r6,12(r3)
    56f0:	003fde06 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    56f4:	29c00217 	ldw	r7,8(r5)
    56f8:	10c5883a 	add	r2,r2,r3
    56fc:	00c00074 	movhi	r3,1
    5700:	18ffb004 	addi	r3,r3,-320
    5704:	38c03b26 	beq	r7,r3,57f4 <_free_r+0x278>
    5708:	2a000317 	ldw	r8,12(r5)
    570c:	11400054 	ori	r5,r2,1
    5710:	3087883a 	add	r3,r6,r2
    5714:	3a000315 	stw	r8,12(r7)
    5718:	41c00215 	stw	r7,8(r8)
    571c:	31400115 	stw	r5,4(r6)
    5720:	18800015 	stw	r2,0(r3)
    5724:	003fbd06 	br	561c <__alt_exception_stack_pointer+0xf800561c>
    5728:	39c0004c 	andi	r7,r7,1
    572c:	10c5883a 	add	r2,r2,r3
    5730:	3800071e 	bne	r7,zero,5750 <_free_r+0x1d4>
    5734:	81fffe17 	ldw	r7,-8(r16)
    5738:	31cdc83a 	sub	r6,r6,r7
    573c:	30c00317 	ldw	r3,12(r6)
    5740:	31400217 	ldw	r5,8(r6)
    5744:	11c5883a 	add	r2,r2,r7
    5748:	28c00315 	stw	r3,12(r5)
    574c:	19400215 	stw	r5,8(r3)
    5750:	10c00054 	ori	r3,r2,1
    5754:	30c00115 	stw	r3,4(r6)
    5758:	00c00074 	movhi	r3,1
    575c:	18c65a04 	addi	r3,r3,6504
    5760:	18c00017 	ldw	r3,0(r3)
    5764:	21800215 	stw	r6,8(r4)
    5768:	10ffc036 	bltu	r2,r3,566c <__alt_exception_stack_pointer+0xf800566c>
    576c:	00800074 	movhi	r2,1
    5770:	108d2404 	addi	r2,r2,13456
    5774:	11400017 	ldw	r5,0(r2)
    5778:	8809883a 	mov	r4,r17
    577c:	00054580 	call	5458 <_malloc_trim_r>
    5780:	003fba06 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    5784:	28c9883a 	add	r4,r5,r3
    5788:	21000117 	ldw	r4,4(r4)
    578c:	2100004c 	andi	r4,r4,1
    5790:	2000391e 	bne	r4,zero,5878 <_free_r+0x2fc>
    5794:	29c00217 	ldw	r7,8(r5)
    5798:	29000317 	ldw	r4,12(r5)
    579c:	1885883a 	add	r2,r3,r2
    57a0:	10c00054 	ori	r3,r2,1
    57a4:	39000315 	stw	r4,12(r7)
    57a8:	21c00215 	stw	r7,8(r4)
    57ac:	30c00115 	stw	r3,4(r6)
    57b0:	308d883a 	add	r6,r6,r2
    57b4:	30800015 	stw	r2,0(r6)
    57b8:	003fac06 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    57bc:	00c00504 	movi	r3,20
    57c0:	19401536 	bltu	r3,r5,5818 <_free_r+0x29c>
    57c4:	28c01704 	addi	r3,r5,92
    57c8:	18c7883a 	add	r3,r3,r3
    57cc:	294016c4 	addi	r5,r5,91
    57d0:	003fb406 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    57d4:	280bd0ba 	srai	r5,r5,2
    57d8:	00c00044 	movi	r3,1
    57dc:	38800117 	ldw	r2,4(r7)
    57e0:	194a983a 	sll	r5,r3,r5
    57e4:	2007883a 	mov	r3,r4
    57e8:	2884b03a 	or	r2,r5,r2
    57ec:	38800115 	stw	r2,4(r7)
    57f0:	003fbb06 	br	56e0 <__alt_exception_stack_pointer+0xf80056e0>
    57f4:	21800515 	stw	r6,20(r4)
    57f8:	21800415 	stw	r6,16(r4)
    57fc:	10c00054 	ori	r3,r2,1
    5800:	31c00315 	stw	r7,12(r6)
    5804:	31c00215 	stw	r7,8(r6)
    5808:	30c00115 	stw	r3,4(r6)
    580c:	308d883a 	add	r6,r6,r2
    5810:	30800015 	stw	r2,0(r6)
    5814:	003f9506 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    5818:	00c01504 	movi	r3,84
    581c:	19400536 	bltu	r3,r5,5834 <_free_r+0x2b8>
    5820:	100ad33a 	srli	r5,r2,12
    5824:	28c01bc4 	addi	r3,r5,111
    5828:	18c7883a 	add	r3,r3,r3
    582c:	29401b84 	addi	r5,r5,110
    5830:	003f9c06 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    5834:	00c05504 	movi	r3,340
    5838:	19400536 	bltu	r3,r5,5850 <_free_r+0x2d4>
    583c:	100ad3fa 	srli	r5,r2,15
    5840:	28c01e04 	addi	r3,r5,120
    5844:	18c7883a 	add	r3,r3,r3
    5848:	29401dc4 	addi	r5,r5,119
    584c:	003f9506 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    5850:	00c15504 	movi	r3,1364
    5854:	19400536 	bltu	r3,r5,586c <_free_r+0x2f0>
    5858:	100ad4ba 	srli	r5,r2,18
    585c:	28c01f44 	addi	r3,r5,125
    5860:	18c7883a 	add	r3,r3,r3
    5864:	29401f04 	addi	r5,r5,124
    5868:	003f8e06 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    586c:	00c03f84 	movi	r3,254
    5870:	01401f84 	movi	r5,126
    5874:	003f8b06 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    5878:	10c00054 	ori	r3,r2,1
    587c:	30c00115 	stw	r3,4(r6)
    5880:	308d883a 	add	r6,r6,r2
    5884:	30800015 	stw	r2,0(r6)
    5888:	003f7806 	br	566c <__alt_exception_stack_pointer+0xf800566c>

0000588c <_fwalk>:
    588c:	defff704 	addi	sp,sp,-36
    5890:	dd000415 	stw	r20,16(sp)
    5894:	dfc00815 	stw	ra,32(sp)
    5898:	ddc00715 	stw	r23,28(sp)
    589c:	dd800615 	stw	r22,24(sp)
    58a0:	dd400515 	stw	r21,20(sp)
    58a4:	dcc00315 	stw	r19,12(sp)
    58a8:	dc800215 	stw	r18,8(sp)
    58ac:	dc400115 	stw	r17,4(sp)
    58b0:	dc000015 	stw	r16,0(sp)
    58b4:	2500b804 	addi	r20,r4,736
    58b8:	a0002326 	beq	r20,zero,5948 <_fwalk+0xbc>
    58bc:	282b883a 	mov	r21,r5
    58c0:	002f883a 	mov	r23,zero
    58c4:	05800044 	movi	r22,1
    58c8:	04ffffc4 	movi	r19,-1
    58cc:	a4400117 	ldw	r17,4(r20)
    58d0:	a4800217 	ldw	r18,8(r20)
    58d4:	8c7fffc4 	addi	r17,r17,-1
    58d8:	88000d16 	blt	r17,zero,5910 <_fwalk+0x84>
    58dc:	94000304 	addi	r16,r18,12
    58e0:	94800384 	addi	r18,r18,14
    58e4:	8080000b 	ldhu	r2,0(r16)
    58e8:	8c7fffc4 	addi	r17,r17,-1
    58ec:	813ffd04 	addi	r4,r16,-12
    58f0:	b080042e 	bgeu	r22,r2,5904 <_fwalk+0x78>
    58f4:	9080000f 	ldh	r2,0(r18)
    58f8:	14c00226 	beq	r2,r19,5904 <_fwalk+0x78>
    58fc:	a83ee83a 	callr	r21
    5900:	b8aeb03a 	or	r23,r23,r2
    5904:	84001a04 	addi	r16,r16,104
    5908:	94801a04 	addi	r18,r18,104
    590c:	8cfff51e 	bne	r17,r19,58e4 <__alt_exception_stack_pointer+0xf80058e4>
    5910:	a5000017 	ldw	r20,0(r20)
    5914:	a03fed1e 	bne	r20,zero,58cc <__alt_exception_stack_pointer+0xf80058cc>
    5918:	b805883a 	mov	r2,r23
    591c:	dfc00817 	ldw	ra,32(sp)
    5920:	ddc00717 	ldw	r23,28(sp)
    5924:	dd800617 	ldw	r22,24(sp)
    5928:	dd400517 	ldw	r21,20(sp)
    592c:	dd000417 	ldw	r20,16(sp)
    5930:	dcc00317 	ldw	r19,12(sp)
    5934:	dc800217 	ldw	r18,8(sp)
    5938:	dc400117 	ldw	r17,4(sp)
    593c:	dc000017 	ldw	r16,0(sp)
    5940:	dec00904 	addi	sp,sp,36
    5944:	f800283a 	ret
    5948:	002f883a 	mov	r23,zero
    594c:	003ff206 	br	5918 <__alt_exception_stack_pointer+0xf8005918>

00005950 <_fwalk_reent>:
    5950:	defff704 	addi	sp,sp,-36
    5954:	dd000415 	stw	r20,16(sp)
    5958:	dfc00815 	stw	ra,32(sp)
    595c:	ddc00715 	stw	r23,28(sp)
    5960:	dd800615 	stw	r22,24(sp)
    5964:	dd400515 	stw	r21,20(sp)
    5968:	dcc00315 	stw	r19,12(sp)
    596c:	dc800215 	stw	r18,8(sp)
    5970:	dc400115 	stw	r17,4(sp)
    5974:	dc000015 	stw	r16,0(sp)
    5978:	2500b804 	addi	r20,r4,736
    597c:	a0002326 	beq	r20,zero,5a0c <_fwalk_reent+0xbc>
    5980:	282b883a 	mov	r21,r5
    5984:	2027883a 	mov	r19,r4
    5988:	002f883a 	mov	r23,zero
    598c:	05800044 	movi	r22,1
    5990:	04bfffc4 	movi	r18,-1
    5994:	a4400117 	ldw	r17,4(r20)
    5998:	a4000217 	ldw	r16,8(r20)
    599c:	8c7fffc4 	addi	r17,r17,-1
    59a0:	88000c16 	blt	r17,zero,59d4 <_fwalk_reent+0x84>
    59a4:	84000304 	addi	r16,r16,12
    59a8:	8080000b 	ldhu	r2,0(r16)
    59ac:	8c7fffc4 	addi	r17,r17,-1
    59b0:	817ffd04 	addi	r5,r16,-12
    59b4:	b080052e 	bgeu	r22,r2,59cc <_fwalk_reent+0x7c>
    59b8:	8080008f 	ldh	r2,2(r16)
    59bc:	9809883a 	mov	r4,r19
    59c0:	14800226 	beq	r2,r18,59cc <_fwalk_reent+0x7c>
    59c4:	a83ee83a 	callr	r21
    59c8:	b8aeb03a 	or	r23,r23,r2
    59cc:	84001a04 	addi	r16,r16,104
    59d0:	8cbff51e 	bne	r17,r18,59a8 <__alt_exception_stack_pointer+0xf80059a8>
    59d4:	a5000017 	ldw	r20,0(r20)
    59d8:	a03fee1e 	bne	r20,zero,5994 <__alt_exception_stack_pointer+0xf8005994>
    59dc:	b805883a 	mov	r2,r23
    59e0:	dfc00817 	ldw	ra,32(sp)
    59e4:	ddc00717 	ldw	r23,28(sp)
    59e8:	dd800617 	ldw	r22,24(sp)
    59ec:	dd400517 	ldw	r21,20(sp)
    59f0:	dd000417 	ldw	r20,16(sp)
    59f4:	dcc00317 	ldw	r19,12(sp)
    59f8:	dc800217 	ldw	r18,8(sp)
    59fc:	dc400117 	ldw	r17,4(sp)
    5a00:	dc000017 	ldw	r16,0(sp)
    5a04:	dec00904 	addi	sp,sp,36
    5a08:	f800283a 	ret
    5a0c:	002f883a 	mov	r23,zero
    5a10:	003ff206 	br	59dc <__alt_exception_stack_pointer+0xf80059dc>

00005a14 <_setlocale_r>:
    5a14:	30001b26 	beq	r6,zero,5a84 <_setlocale_r+0x70>
    5a18:	01400074 	movhi	r5,1
    5a1c:	defffe04 	addi	sp,sp,-8
    5a20:	297f0a04 	addi	r5,r5,-984
    5a24:	3009883a 	mov	r4,r6
    5a28:	dc000015 	stw	r16,0(sp)
    5a2c:	dfc00115 	stw	ra,4(sp)
    5a30:	3021883a 	mov	r16,r6
    5a34:	00072680 	call	7268 <strcmp>
    5a38:	1000061e 	bne	r2,zero,5a54 <_setlocale_r+0x40>
    5a3c:	00800074 	movhi	r2,1
    5a40:	10bf0904 	addi	r2,r2,-988
    5a44:	dfc00117 	ldw	ra,4(sp)
    5a48:	dc000017 	ldw	r16,0(sp)
    5a4c:	dec00204 	addi	sp,sp,8
    5a50:	f800283a 	ret
    5a54:	01400074 	movhi	r5,1
    5a58:	297f0904 	addi	r5,r5,-988
    5a5c:	8009883a 	mov	r4,r16
    5a60:	00072680 	call	7268 <strcmp>
    5a64:	103ff526 	beq	r2,zero,5a3c <__alt_exception_stack_pointer+0xf8005a3c>
    5a68:	01400074 	movhi	r5,1
    5a6c:	297ef404 	addi	r5,r5,-1072
    5a70:	8009883a 	mov	r4,r16
    5a74:	00072680 	call	7268 <strcmp>
    5a78:	103ff026 	beq	r2,zero,5a3c <__alt_exception_stack_pointer+0xf8005a3c>
    5a7c:	0005883a 	mov	r2,zero
    5a80:	003ff006 	br	5a44 <__alt_exception_stack_pointer+0xf8005a44>
    5a84:	00800074 	movhi	r2,1
    5a88:	10bf0904 	addi	r2,r2,-988
    5a8c:	f800283a 	ret

00005a90 <__locale_charset>:
    5a90:	00800074 	movhi	r2,1
    5a94:	1081c104 	addi	r2,r2,1796
    5a98:	f800283a 	ret

00005a9c <__locale_mb_cur_max>:
    5a9c:	00800074 	movhi	r2,1
    5aa0:	10865d04 	addi	r2,r2,6516
    5aa4:	10800017 	ldw	r2,0(r2)
    5aa8:	f800283a 	ret

00005aac <__locale_msgcharset>:
    5aac:	00800074 	movhi	r2,1
    5ab0:	1081b904 	addi	r2,r2,1764
    5ab4:	f800283a 	ret

00005ab8 <__locale_cjk_lang>:
    5ab8:	0005883a 	mov	r2,zero
    5abc:	f800283a 	ret

00005ac0 <_localeconv_r>:
    5ac0:	00800074 	movhi	r2,1
    5ac4:	1081c904 	addi	r2,r2,1828
    5ac8:	f800283a 	ret

00005acc <setlocale>:
    5acc:	00800074 	movhi	r2,1
    5ad0:	10865c04 	addi	r2,r2,6512
    5ad4:	280d883a 	mov	r6,r5
    5ad8:	200b883a 	mov	r5,r4
    5adc:	11000017 	ldw	r4,0(r2)
    5ae0:	0005a141 	jmpi	5a14 <_setlocale_r>

00005ae4 <localeconv>:
    5ae4:	00800074 	movhi	r2,1
    5ae8:	1081c904 	addi	r2,r2,1828
    5aec:	f800283a 	ret

00005af0 <__smakebuf_r>:
    5af0:	2880030b 	ldhu	r2,12(r5)
    5af4:	10c0008c 	andi	r3,r2,2
    5af8:	1800411e 	bne	r3,zero,5c00 <__smakebuf_r+0x110>
    5afc:	deffec04 	addi	sp,sp,-80
    5b00:	dc000f15 	stw	r16,60(sp)
    5b04:	2821883a 	mov	r16,r5
    5b08:	2940038f 	ldh	r5,14(r5)
    5b0c:	dc401015 	stw	r17,64(sp)
    5b10:	dfc01315 	stw	ra,76(sp)
    5b14:	dcc01215 	stw	r19,72(sp)
    5b18:	dc801115 	stw	r18,68(sp)
    5b1c:	2023883a 	mov	r17,r4
    5b20:	28001c16 	blt	r5,zero,5b94 <__smakebuf_r+0xa4>
    5b24:	d80d883a 	mov	r6,sp
    5b28:	0008f700 	call	8f70 <_fstat_r>
    5b2c:	10001816 	blt	r2,zero,5b90 <__smakebuf_r+0xa0>
    5b30:	d8800117 	ldw	r2,4(sp)
    5b34:	00e00014 	movui	r3,32768
    5b38:	10bc000c 	andi	r2,r2,61440
    5b3c:	14c80020 	cmpeqi	r19,r2,8192
    5b40:	10c03726 	beq	r2,r3,5c20 <__smakebuf_r+0x130>
    5b44:	80c0030b 	ldhu	r3,12(r16)
    5b48:	18c20014 	ori	r3,r3,2048
    5b4c:	80c0030d 	sth	r3,12(r16)
    5b50:	00c80004 	movi	r3,8192
    5b54:	10c0521e 	bne	r2,r3,5ca0 <__smakebuf_r+0x1b0>
    5b58:	8140038f 	ldh	r5,14(r16)
    5b5c:	8809883a 	mov	r4,r17
    5b60:	00094940 	call	9494 <_isatty_r>
    5b64:	10004c26 	beq	r2,zero,5c98 <__smakebuf_r+0x1a8>
    5b68:	8080030b 	ldhu	r2,12(r16)
    5b6c:	80c010c4 	addi	r3,r16,67
    5b70:	80c00015 	stw	r3,0(r16)
    5b74:	10800054 	ori	r2,r2,1
    5b78:	8080030d 	sth	r2,12(r16)
    5b7c:	00800044 	movi	r2,1
    5b80:	80c00415 	stw	r3,16(r16)
    5b84:	80800515 	stw	r2,20(r16)
    5b88:	04810004 	movi	r18,1024
    5b8c:	00000706 	br	5bac <__smakebuf_r+0xbc>
    5b90:	8080030b 	ldhu	r2,12(r16)
    5b94:	10c0200c 	andi	r3,r2,128
    5b98:	18001f1e 	bne	r3,zero,5c18 <__smakebuf_r+0x128>
    5b9c:	04810004 	movi	r18,1024
    5ba0:	10820014 	ori	r2,r2,2048
    5ba4:	8080030d 	sth	r2,12(r16)
    5ba8:	0027883a 	mov	r19,zero
    5bac:	900b883a 	mov	r5,r18
    5bb0:	8809883a 	mov	r4,r17
    5bb4:	000077c0 	call	77c <_malloc_r>
    5bb8:	10002c26 	beq	r2,zero,5c6c <__smakebuf_r+0x17c>
    5bbc:	80c0030b 	ldhu	r3,12(r16)
    5bc0:	01000034 	movhi	r4,0
    5bc4:	21142c04 	addi	r4,r4,20656
    5bc8:	89000f15 	stw	r4,60(r17)
    5bcc:	18c02014 	ori	r3,r3,128
    5bd0:	80c0030d 	sth	r3,12(r16)
    5bd4:	80800015 	stw	r2,0(r16)
    5bd8:	80800415 	stw	r2,16(r16)
    5bdc:	84800515 	stw	r18,20(r16)
    5be0:	98001a1e 	bne	r19,zero,5c4c <__smakebuf_r+0x15c>
    5be4:	dfc01317 	ldw	ra,76(sp)
    5be8:	dcc01217 	ldw	r19,72(sp)
    5bec:	dc801117 	ldw	r18,68(sp)
    5bf0:	dc401017 	ldw	r17,64(sp)
    5bf4:	dc000f17 	ldw	r16,60(sp)
    5bf8:	dec01404 	addi	sp,sp,80
    5bfc:	f800283a 	ret
    5c00:	288010c4 	addi	r2,r5,67
    5c04:	28800015 	stw	r2,0(r5)
    5c08:	28800415 	stw	r2,16(r5)
    5c0c:	00800044 	movi	r2,1
    5c10:	28800515 	stw	r2,20(r5)
    5c14:	f800283a 	ret
    5c18:	04801004 	movi	r18,64
    5c1c:	003fe006 	br	5ba0 <__alt_exception_stack_pointer+0xf8005ba0>
    5c20:	81000a17 	ldw	r4,40(r16)
    5c24:	00c00034 	movhi	r3,0
    5c28:	18dc8104 	addi	r3,r3,29188
    5c2c:	20ffc51e 	bne	r4,r3,5b44 <__alt_exception_stack_pointer+0xf8005b44>
    5c30:	8080030b 	ldhu	r2,12(r16)
    5c34:	04810004 	movi	r18,1024
    5c38:	84801315 	stw	r18,76(r16)
    5c3c:	1484b03a 	or	r2,r2,r18
    5c40:	8080030d 	sth	r2,12(r16)
    5c44:	0027883a 	mov	r19,zero
    5c48:	003fd806 	br	5bac <__alt_exception_stack_pointer+0xf8005bac>
    5c4c:	8140038f 	ldh	r5,14(r16)
    5c50:	8809883a 	mov	r4,r17
    5c54:	00094940 	call	9494 <_isatty_r>
    5c58:	103fe226 	beq	r2,zero,5be4 <__alt_exception_stack_pointer+0xf8005be4>
    5c5c:	8080030b 	ldhu	r2,12(r16)
    5c60:	10800054 	ori	r2,r2,1
    5c64:	8080030d 	sth	r2,12(r16)
    5c68:	003fde06 	br	5be4 <__alt_exception_stack_pointer+0xf8005be4>
    5c6c:	8080030b 	ldhu	r2,12(r16)
    5c70:	10c0800c 	andi	r3,r2,512
    5c74:	183fdb1e 	bne	r3,zero,5be4 <__alt_exception_stack_pointer+0xf8005be4>
    5c78:	10800094 	ori	r2,r2,2
    5c7c:	80c010c4 	addi	r3,r16,67
    5c80:	8080030d 	sth	r2,12(r16)
    5c84:	00800044 	movi	r2,1
    5c88:	80c00015 	stw	r3,0(r16)
    5c8c:	80c00415 	stw	r3,16(r16)
    5c90:	80800515 	stw	r2,20(r16)
    5c94:	003fd306 	br	5be4 <__alt_exception_stack_pointer+0xf8005be4>
    5c98:	04810004 	movi	r18,1024
    5c9c:	003fc306 	br	5bac <__alt_exception_stack_pointer+0xf8005bac>
    5ca0:	0027883a 	mov	r19,zero
    5ca4:	04810004 	movi	r18,1024
    5ca8:	003fc006 	br	5bac <__alt_exception_stack_pointer+0xf8005bac>

00005cac <memchr>:
    5cac:	208000cc 	andi	r2,r4,3
    5cb0:	280f883a 	mov	r7,r5
    5cb4:	10003426 	beq	r2,zero,5d88 <memchr+0xdc>
    5cb8:	30bfffc4 	addi	r2,r6,-1
    5cbc:	30001a26 	beq	r6,zero,5d28 <memchr+0x7c>
    5cc0:	20c00003 	ldbu	r3,0(r4)
    5cc4:	29803fcc 	andi	r6,r5,255
    5cc8:	30c0051e 	bne	r6,r3,5ce0 <memchr+0x34>
    5ccc:	00001806 	br	5d30 <memchr+0x84>
    5cd0:	10001526 	beq	r2,zero,5d28 <memchr+0x7c>
    5cd4:	20c00003 	ldbu	r3,0(r4)
    5cd8:	10bfffc4 	addi	r2,r2,-1
    5cdc:	30c01426 	beq	r6,r3,5d30 <memchr+0x84>
    5ce0:	21000044 	addi	r4,r4,1
    5ce4:	20c000cc 	andi	r3,r4,3
    5ce8:	183ff91e 	bne	r3,zero,5cd0 <__alt_exception_stack_pointer+0xf8005cd0>
    5cec:	020000c4 	movi	r8,3
    5cf0:	40801136 	bltu	r8,r2,5d38 <memchr+0x8c>
    5cf4:	10000c26 	beq	r2,zero,5d28 <memchr+0x7c>
    5cf8:	20c00003 	ldbu	r3,0(r4)
    5cfc:	29403fcc 	andi	r5,r5,255
    5d00:	28c00b26 	beq	r5,r3,5d30 <memchr+0x84>
    5d04:	20c00044 	addi	r3,r4,1
    5d08:	39803fcc 	andi	r6,r7,255
    5d0c:	2089883a 	add	r4,r4,r2
    5d10:	00000306 	br	5d20 <memchr+0x74>
    5d14:	18c00044 	addi	r3,r3,1
    5d18:	197fffc3 	ldbu	r5,-1(r3)
    5d1c:	31400526 	beq	r6,r5,5d34 <memchr+0x88>
    5d20:	1805883a 	mov	r2,r3
    5d24:	20fffb1e 	bne	r4,r3,5d14 <__alt_exception_stack_pointer+0xf8005d14>
    5d28:	0005883a 	mov	r2,zero
    5d2c:	f800283a 	ret
    5d30:	2005883a 	mov	r2,r4
    5d34:	f800283a 	ret
    5d38:	28c03fcc 	andi	r3,r5,255
    5d3c:	1812923a 	slli	r9,r3,8
    5d40:	02ffbff4 	movhi	r11,65279
    5d44:	02a02074 	movhi	r10,32897
    5d48:	48d2b03a 	or	r9,r9,r3
    5d4c:	4806943a 	slli	r3,r9,16
    5d50:	5affbfc4 	addi	r11,r11,-257
    5d54:	52a02004 	addi	r10,r10,-32640
    5d58:	48d2b03a 	or	r9,r9,r3
    5d5c:	20c00017 	ldw	r3,0(r4)
    5d60:	48c6f03a 	xor	r3,r9,r3
    5d64:	1acd883a 	add	r6,r3,r11
    5d68:	00c6303a 	nor	r3,zero,r3
    5d6c:	30c6703a 	and	r3,r6,r3
    5d70:	1a86703a 	and	r3,r3,r10
    5d74:	183fe01e 	bne	r3,zero,5cf8 <__alt_exception_stack_pointer+0xf8005cf8>
    5d78:	10bfff04 	addi	r2,r2,-4
    5d7c:	21000104 	addi	r4,r4,4
    5d80:	40bff636 	bltu	r8,r2,5d5c <__alt_exception_stack_pointer+0xf8005d5c>
    5d84:	003fdb06 	br	5cf4 <__alt_exception_stack_pointer+0xf8005cf4>
    5d88:	3005883a 	mov	r2,r6
    5d8c:	003fd706 	br	5cec <__alt_exception_stack_pointer+0xf8005cec>

00005d90 <memcpy>:
    5d90:	defffd04 	addi	sp,sp,-12
    5d94:	dfc00215 	stw	ra,8(sp)
    5d98:	dc400115 	stw	r17,4(sp)
    5d9c:	dc000015 	stw	r16,0(sp)
    5da0:	00c003c4 	movi	r3,15
    5da4:	2005883a 	mov	r2,r4
    5da8:	1980452e 	bgeu	r3,r6,5ec0 <memcpy+0x130>
    5dac:	2906b03a 	or	r3,r5,r4
    5db0:	18c000cc 	andi	r3,r3,3
    5db4:	1800441e 	bne	r3,zero,5ec8 <memcpy+0x138>
    5db8:	347ffc04 	addi	r17,r6,-16
    5dbc:	8822d13a 	srli	r17,r17,4
    5dc0:	28c00104 	addi	r3,r5,4
    5dc4:	23400104 	addi	r13,r4,4
    5dc8:	8820913a 	slli	r16,r17,4
    5dcc:	2b000204 	addi	r12,r5,8
    5dd0:	22c00204 	addi	r11,r4,8
    5dd4:	84000504 	addi	r16,r16,20
    5dd8:	2a800304 	addi	r10,r5,12
    5ddc:	22400304 	addi	r9,r4,12
    5de0:	2c21883a 	add	r16,r5,r16
    5de4:	2811883a 	mov	r8,r5
    5de8:	200f883a 	mov	r7,r4
    5dec:	41000017 	ldw	r4,0(r8)
    5df0:	1fc00017 	ldw	ra,0(r3)
    5df4:	63c00017 	ldw	r15,0(r12)
    5df8:	39000015 	stw	r4,0(r7)
    5dfc:	53800017 	ldw	r14,0(r10)
    5e00:	6fc00015 	stw	ra,0(r13)
    5e04:	5bc00015 	stw	r15,0(r11)
    5e08:	4b800015 	stw	r14,0(r9)
    5e0c:	18c00404 	addi	r3,r3,16
    5e10:	39c00404 	addi	r7,r7,16
    5e14:	42000404 	addi	r8,r8,16
    5e18:	6b400404 	addi	r13,r13,16
    5e1c:	63000404 	addi	r12,r12,16
    5e20:	5ac00404 	addi	r11,r11,16
    5e24:	52800404 	addi	r10,r10,16
    5e28:	4a400404 	addi	r9,r9,16
    5e2c:	1c3fef1e 	bne	r3,r16,5dec <__alt_exception_stack_pointer+0xf8005dec>
    5e30:	89c00044 	addi	r7,r17,1
    5e34:	380e913a 	slli	r7,r7,4
    5e38:	310003cc 	andi	r4,r6,15
    5e3c:	02c000c4 	movi	r11,3
    5e40:	11c7883a 	add	r3,r2,r7
    5e44:	29cb883a 	add	r5,r5,r7
    5e48:	5900212e 	bgeu	r11,r4,5ed0 <memcpy+0x140>
    5e4c:	1813883a 	mov	r9,r3
    5e50:	2811883a 	mov	r8,r5
    5e54:	200f883a 	mov	r7,r4
    5e58:	42800017 	ldw	r10,0(r8)
    5e5c:	4a400104 	addi	r9,r9,4
    5e60:	39ffff04 	addi	r7,r7,-4
    5e64:	4abfff15 	stw	r10,-4(r9)
    5e68:	42000104 	addi	r8,r8,4
    5e6c:	59fffa36 	bltu	r11,r7,5e58 <__alt_exception_stack_pointer+0xf8005e58>
    5e70:	213fff04 	addi	r4,r4,-4
    5e74:	2008d0ba 	srli	r4,r4,2
    5e78:	318000cc 	andi	r6,r6,3
    5e7c:	21000044 	addi	r4,r4,1
    5e80:	2109883a 	add	r4,r4,r4
    5e84:	2109883a 	add	r4,r4,r4
    5e88:	1907883a 	add	r3,r3,r4
    5e8c:	290b883a 	add	r5,r5,r4
    5e90:	30000626 	beq	r6,zero,5eac <memcpy+0x11c>
    5e94:	198d883a 	add	r6,r3,r6
    5e98:	29c00003 	ldbu	r7,0(r5)
    5e9c:	18c00044 	addi	r3,r3,1
    5ea0:	29400044 	addi	r5,r5,1
    5ea4:	19ffffc5 	stb	r7,-1(r3)
    5ea8:	19bffb1e 	bne	r3,r6,5e98 <__alt_exception_stack_pointer+0xf8005e98>
    5eac:	dfc00217 	ldw	ra,8(sp)
    5eb0:	dc400117 	ldw	r17,4(sp)
    5eb4:	dc000017 	ldw	r16,0(sp)
    5eb8:	dec00304 	addi	sp,sp,12
    5ebc:	f800283a 	ret
    5ec0:	2007883a 	mov	r3,r4
    5ec4:	003ff206 	br	5e90 <__alt_exception_stack_pointer+0xf8005e90>
    5ec8:	2007883a 	mov	r3,r4
    5ecc:	003ff106 	br	5e94 <__alt_exception_stack_pointer+0xf8005e94>
    5ed0:	200d883a 	mov	r6,r4
    5ed4:	003fee06 	br	5e90 <__alt_exception_stack_pointer+0xf8005e90>

00005ed8 <memset>:
    5ed8:	20c000cc 	andi	r3,r4,3
    5edc:	2005883a 	mov	r2,r4
    5ee0:	18004426 	beq	r3,zero,5ff4 <memset+0x11c>
    5ee4:	31ffffc4 	addi	r7,r6,-1
    5ee8:	30004026 	beq	r6,zero,5fec <memset+0x114>
    5eec:	2813883a 	mov	r9,r5
    5ef0:	200d883a 	mov	r6,r4
    5ef4:	2007883a 	mov	r3,r4
    5ef8:	00000406 	br	5f0c <memset+0x34>
    5efc:	3a3fffc4 	addi	r8,r7,-1
    5f00:	31800044 	addi	r6,r6,1
    5f04:	38003926 	beq	r7,zero,5fec <memset+0x114>
    5f08:	400f883a 	mov	r7,r8
    5f0c:	18c00044 	addi	r3,r3,1
    5f10:	32400005 	stb	r9,0(r6)
    5f14:	1a0000cc 	andi	r8,r3,3
    5f18:	403ff81e 	bne	r8,zero,5efc <__alt_exception_stack_pointer+0xf8005efc>
    5f1c:	010000c4 	movi	r4,3
    5f20:	21c02d2e 	bgeu	r4,r7,5fd8 <memset+0x100>
    5f24:	29003fcc 	andi	r4,r5,255
    5f28:	200c923a 	slli	r6,r4,8
    5f2c:	3108b03a 	or	r4,r6,r4
    5f30:	200c943a 	slli	r6,r4,16
    5f34:	218cb03a 	or	r6,r4,r6
    5f38:	010003c4 	movi	r4,15
    5f3c:	21c0182e 	bgeu	r4,r7,5fa0 <memset+0xc8>
    5f40:	3b3ffc04 	addi	r12,r7,-16
    5f44:	6018d13a 	srli	r12,r12,4
    5f48:	1a000104 	addi	r8,r3,4
    5f4c:	1ac00204 	addi	r11,r3,8
    5f50:	6008913a 	slli	r4,r12,4
    5f54:	1a800304 	addi	r10,r3,12
    5f58:	1813883a 	mov	r9,r3
    5f5c:	21000504 	addi	r4,r4,20
    5f60:	1909883a 	add	r4,r3,r4
    5f64:	49800015 	stw	r6,0(r9)
    5f68:	41800015 	stw	r6,0(r8)
    5f6c:	59800015 	stw	r6,0(r11)
    5f70:	51800015 	stw	r6,0(r10)
    5f74:	42000404 	addi	r8,r8,16
    5f78:	4a400404 	addi	r9,r9,16
    5f7c:	5ac00404 	addi	r11,r11,16
    5f80:	52800404 	addi	r10,r10,16
    5f84:	413ff71e 	bne	r8,r4,5f64 <__alt_exception_stack_pointer+0xf8005f64>
    5f88:	63000044 	addi	r12,r12,1
    5f8c:	6018913a 	slli	r12,r12,4
    5f90:	39c003cc 	andi	r7,r7,15
    5f94:	010000c4 	movi	r4,3
    5f98:	1b07883a 	add	r3,r3,r12
    5f9c:	21c00e2e 	bgeu	r4,r7,5fd8 <memset+0x100>
    5fa0:	1813883a 	mov	r9,r3
    5fa4:	3811883a 	mov	r8,r7
    5fa8:	010000c4 	movi	r4,3
    5fac:	49800015 	stw	r6,0(r9)
    5fb0:	423fff04 	addi	r8,r8,-4
    5fb4:	4a400104 	addi	r9,r9,4
    5fb8:	223ffc36 	bltu	r4,r8,5fac <__alt_exception_stack_pointer+0xf8005fac>
    5fbc:	393fff04 	addi	r4,r7,-4
    5fc0:	2008d0ba 	srli	r4,r4,2
    5fc4:	39c000cc 	andi	r7,r7,3
    5fc8:	21000044 	addi	r4,r4,1
    5fcc:	2109883a 	add	r4,r4,r4
    5fd0:	2109883a 	add	r4,r4,r4
    5fd4:	1907883a 	add	r3,r3,r4
    5fd8:	38000526 	beq	r7,zero,5ff0 <memset+0x118>
    5fdc:	19cf883a 	add	r7,r3,r7
    5fe0:	19400005 	stb	r5,0(r3)
    5fe4:	18c00044 	addi	r3,r3,1
    5fe8:	38fffd1e 	bne	r7,r3,5fe0 <__alt_exception_stack_pointer+0xf8005fe0>
    5fec:	f800283a 	ret
    5ff0:	f800283a 	ret
    5ff4:	2007883a 	mov	r3,r4
    5ff8:	300f883a 	mov	r7,r6
    5ffc:	003fc706 	br	5f1c <__alt_exception_stack_pointer+0xf8005f1c>

00006000 <_Balloc>:
    6000:	20801317 	ldw	r2,76(r4)
    6004:	defffc04 	addi	sp,sp,-16
    6008:	dc400115 	stw	r17,4(sp)
    600c:	dc000015 	stw	r16,0(sp)
    6010:	dfc00315 	stw	ra,12(sp)
    6014:	dc800215 	stw	r18,8(sp)
    6018:	2023883a 	mov	r17,r4
    601c:	2821883a 	mov	r16,r5
    6020:	10000f26 	beq	r2,zero,6060 <_Balloc+0x60>
    6024:	8407883a 	add	r3,r16,r16
    6028:	18c7883a 	add	r3,r3,r3
    602c:	10c7883a 	add	r3,r2,r3
    6030:	18800017 	ldw	r2,0(r3)
    6034:	10001126 	beq	r2,zero,607c <_Balloc+0x7c>
    6038:	11000017 	ldw	r4,0(r2)
    603c:	19000015 	stw	r4,0(r3)
    6040:	10000415 	stw	zero,16(r2)
    6044:	10000315 	stw	zero,12(r2)
    6048:	dfc00317 	ldw	ra,12(sp)
    604c:	dc800217 	ldw	r18,8(sp)
    6050:	dc400117 	ldw	r17,4(sp)
    6054:	dc000017 	ldw	r16,0(sp)
    6058:	dec00404 	addi	sp,sp,16
    605c:	f800283a 	ret
    6060:	01800844 	movi	r6,33
    6064:	01400104 	movi	r5,4
    6068:	0008b880 	call	8b88 <_calloc_r>
    606c:	88801315 	stw	r2,76(r17)
    6070:	103fec1e 	bne	r2,zero,6024 <__alt_exception_stack_pointer+0xf8006024>
    6074:	0005883a 	mov	r2,zero
    6078:	003ff306 	br	6048 <__alt_exception_stack_pointer+0xf8006048>
    607c:	01400044 	movi	r5,1
    6080:	2c24983a 	sll	r18,r5,r16
    6084:	8809883a 	mov	r4,r17
    6088:	91800144 	addi	r6,r18,5
    608c:	318d883a 	add	r6,r6,r6
    6090:	318d883a 	add	r6,r6,r6
    6094:	0008b880 	call	8b88 <_calloc_r>
    6098:	103ff626 	beq	r2,zero,6074 <__alt_exception_stack_pointer+0xf8006074>
    609c:	14000115 	stw	r16,4(r2)
    60a0:	14800215 	stw	r18,8(r2)
    60a4:	003fe606 	br	6040 <__alt_exception_stack_pointer+0xf8006040>

000060a8 <_Bfree>:
    60a8:	28000826 	beq	r5,zero,60cc <_Bfree+0x24>
    60ac:	28c00117 	ldw	r3,4(r5)
    60b0:	20801317 	ldw	r2,76(r4)
    60b4:	18c7883a 	add	r3,r3,r3
    60b8:	18c7883a 	add	r3,r3,r3
    60bc:	10c5883a 	add	r2,r2,r3
    60c0:	10c00017 	ldw	r3,0(r2)
    60c4:	28c00015 	stw	r3,0(r5)
    60c8:	11400015 	stw	r5,0(r2)
    60cc:	f800283a 	ret

000060d0 <__multadd>:
    60d0:	defff704 	addi	sp,sp,-36
    60d4:	dc800215 	stw	r18,8(sp)
    60d8:	2c800417 	ldw	r18,16(r5)
    60dc:	dd800615 	stw	r22,24(sp)
    60e0:	dd400515 	stw	r21,20(sp)
    60e4:	dd000415 	stw	r20,16(sp)
    60e8:	dcc00315 	stw	r19,12(sp)
    60ec:	dc400115 	stw	r17,4(sp)
    60f0:	dc000015 	stw	r16,0(sp)
    60f4:	dfc00815 	stw	ra,32(sp)
    60f8:	ddc00715 	stw	r23,28(sp)
    60fc:	2827883a 	mov	r19,r5
    6100:	2029883a 	mov	r20,r4
    6104:	3023883a 	mov	r17,r6
    6108:	3821883a 	mov	r16,r7
    610c:	2d400504 	addi	r21,r5,20
    6110:	002d883a 	mov	r22,zero
    6114:	adc00017 	ldw	r23,0(r21)
    6118:	880b883a 	mov	r5,r17
    611c:	ad400104 	addi	r21,r21,4
    6120:	b93fffcc 	andi	r4,r23,65535
    6124:	000072c0 	call	72c <__mulsi3>
    6128:	b808d43a 	srli	r4,r23,16
    612c:	880b883a 	mov	r5,r17
    6130:	1421883a 	add	r16,r2,r16
    6134:	000072c0 	call	72c <__mulsi3>
    6138:	800ed43a 	srli	r7,r16,16
    613c:	80ffffcc 	andi	r3,r16,65535
    6140:	b5800044 	addi	r22,r22,1
    6144:	11c5883a 	add	r2,r2,r7
    6148:	100e943a 	slli	r7,r2,16
    614c:	1020d43a 	srli	r16,r2,16
    6150:	38c7883a 	add	r3,r7,r3
    6154:	a8ffff15 	stw	r3,-4(r21)
    6158:	b4bfee16 	blt	r22,r18,6114 <__alt_exception_stack_pointer+0xf8006114>
    615c:	80000926 	beq	r16,zero,6184 <__multadd+0xb4>
    6160:	98800217 	ldw	r2,8(r19)
    6164:	9080130e 	bge	r18,r2,61b4 <__multadd+0xe4>
    6168:	90800144 	addi	r2,r18,5
    616c:	1085883a 	add	r2,r2,r2
    6170:	1085883a 	add	r2,r2,r2
    6174:	9885883a 	add	r2,r19,r2
    6178:	14000015 	stw	r16,0(r2)
    617c:	94800044 	addi	r18,r18,1
    6180:	9c800415 	stw	r18,16(r19)
    6184:	9805883a 	mov	r2,r19
    6188:	dfc00817 	ldw	ra,32(sp)
    618c:	ddc00717 	ldw	r23,28(sp)
    6190:	dd800617 	ldw	r22,24(sp)
    6194:	dd400517 	ldw	r21,20(sp)
    6198:	dd000417 	ldw	r20,16(sp)
    619c:	dcc00317 	ldw	r19,12(sp)
    61a0:	dc800217 	ldw	r18,8(sp)
    61a4:	dc400117 	ldw	r17,4(sp)
    61a8:	dc000017 	ldw	r16,0(sp)
    61ac:	dec00904 	addi	sp,sp,36
    61b0:	f800283a 	ret
    61b4:	99400117 	ldw	r5,4(r19)
    61b8:	a009883a 	mov	r4,r20
    61bc:	29400044 	addi	r5,r5,1
    61c0:	00060000 	call	6000 <_Balloc>
    61c4:	99800417 	ldw	r6,16(r19)
    61c8:	99400304 	addi	r5,r19,12
    61cc:	11000304 	addi	r4,r2,12
    61d0:	31800084 	addi	r6,r6,2
    61d4:	318d883a 	add	r6,r6,r6
    61d8:	318d883a 	add	r6,r6,r6
    61dc:	1023883a 	mov	r17,r2
    61e0:	0005d900 	call	5d90 <memcpy>
    61e4:	98000a26 	beq	r19,zero,6210 <__multadd+0x140>
    61e8:	98c00117 	ldw	r3,4(r19)
    61ec:	a0801317 	ldw	r2,76(r20)
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	18c7883a 	add	r3,r3,r3
    61f8:	10c5883a 	add	r2,r2,r3
    61fc:	10c00017 	ldw	r3,0(r2)
    6200:	98c00015 	stw	r3,0(r19)
    6204:	14c00015 	stw	r19,0(r2)
    6208:	8827883a 	mov	r19,r17
    620c:	003fd606 	br	6168 <__alt_exception_stack_pointer+0xf8006168>
    6210:	8827883a 	mov	r19,r17
    6214:	003fd406 	br	6168 <__alt_exception_stack_pointer+0xf8006168>

00006218 <__s2b>:
    6218:	defff904 	addi	sp,sp,-28
    621c:	dc400115 	stw	r17,4(sp)
    6220:	dc000015 	stw	r16,0(sp)
    6224:	2023883a 	mov	r17,r4
    6228:	2821883a 	mov	r16,r5
    622c:	39000204 	addi	r4,r7,8
    6230:	01400244 	movi	r5,9
    6234:	dcc00315 	stw	r19,12(sp)
    6238:	dc800215 	stw	r18,8(sp)
    623c:	dfc00615 	stw	ra,24(sp)
    6240:	dd400515 	stw	r21,20(sp)
    6244:	dd000415 	stw	r20,16(sp)
    6248:	3825883a 	mov	r18,r7
    624c:	3027883a 	mov	r19,r6
    6250:	00005780 	call	578 <__divsi3>
    6254:	00c00044 	movi	r3,1
    6258:	000b883a 	mov	r5,zero
    625c:	1880030e 	bge	r3,r2,626c <__s2b+0x54>
    6260:	18c7883a 	add	r3,r3,r3
    6264:	29400044 	addi	r5,r5,1
    6268:	18bffd16 	blt	r3,r2,6260 <__alt_exception_stack_pointer+0xf8006260>
    626c:	8809883a 	mov	r4,r17
    6270:	00060000 	call	6000 <_Balloc>
    6274:	d8c00717 	ldw	r3,28(sp)
    6278:	10c00515 	stw	r3,20(r2)
    627c:	00c00044 	movi	r3,1
    6280:	10c00415 	stw	r3,16(r2)
    6284:	00c00244 	movi	r3,9
    6288:	1cc0210e 	bge	r3,r19,6310 <__s2b+0xf8>
    628c:	80eb883a 	add	r21,r16,r3
    6290:	a829883a 	mov	r20,r21
    6294:	84e1883a 	add	r16,r16,r19
    6298:	a1c00007 	ldb	r7,0(r20)
    629c:	01800284 	movi	r6,10
    62a0:	a5000044 	addi	r20,r20,1
    62a4:	100b883a 	mov	r5,r2
    62a8:	39fff404 	addi	r7,r7,-48
    62ac:	8809883a 	mov	r4,r17
    62b0:	00060d00 	call	60d0 <__multadd>
    62b4:	a43ff81e 	bne	r20,r16,6298 <__alt_exception_stack_pointer+0xf8006298>
    62b8:	ace1883a 	add	r16,r21,r19
    62bc:	843ffe04 	addi	r16,r16,-8
    62c0:	9c800a0e 	bge	r19,r18,62ec <__s2b+0xd4>
    62c4:	94e5c83a 	sub	r18,r18,r19
    62c8:	84a5883a 	add	r18,r16,r18
    62cc:	81c00007 	ldb	r7,0(r16)
    62d0:	01800284 	movi	r6,10
    62d4:	84000044 	addi	r16,r16,1
    62d8:	100b883a 	mov	r5,r2
    62dc:	39fff404 	addi	r7,r7,-48
    62e0:	8809883a 	mov	r4,r17
    62e4:	00060d00 	call	60d0 <__multadd>
    62e8:	84bff81e 	bne	r16,r18,62cc <__alt_exception_stack_pointer+0xf80062cc>
    62ec:	dfc00617 	ldw	ra,24(sp)
    62f0:	dd400517 	ldw	r21,20(sp)
    62f4:	dd000417 	ldw	r20,16(sp)
    62f8:	dcc00317 	ldw	r19,12(sp)
    62fc:	dc800217 	ldw	r18,8(sp)
    6300:	dc400117 	ldw	r17,4(sp)
    6304:	dc000017 	ldw	r16,0(sp)
    6308:	dec00704 	addi	sp,sp,28
    630c:	f800283a 	ret
    6310:	84000284 	addi	r16,r16,10
    6314:	1827883a 	mov	r19,r3
    6318:	003fe906 	br	62c0 <__alt_exception_stack_pointer+0xf80062c0>

0000631c <__hi0bits>:
    631c:	20bfffec 	andhi	r2,r4,65535
    6320:	1000141e 	bne	r2,zero,6374 <__hi0bits+0x58>
    6324:	2008943a 	slli	r4,r4,16
    6328:	00800404 	movi	r2,16
    632c:	20ffc02c 	andhi	r3,r4,65280
    6330:	1800021e 	bne	r3,zero,633c <__hi0bits+0x20>
    6334:	2008923a 	slli	r4,r4,8
    6338:	10800204 	addi	r2,r2,8
    633c:	20fc002c 	andhi	r3,r4,61440
    6340:	1800021e 	bne	r3,zero,634c <__hi0bits+0x30>
    6344:	2008913a 	slli	r4,r4,4
    6348:	10800104 	addi	r2,r2,4
    634c:	20f0002c 	andhi	r3,r4,49152
    6350:	1800031e 	bne	r3,zero,6360 <__hi0bits+0x44>
    6354:	2109883a 	add	r4,r4,r4
    6358:	10800084 	addi	r2,r2,2
    635c:	2109883a 	add	r4,r4,r4
    6360:	20000316 	blt	r4,zero,6370 <__hi0bits+0x54>
    6364:	2110002c 	andhi	r4,r4,16384
    6368:	2000041e 	bne	r4,zero,637c <__hi0bits+0x60>
    636c:	00800804 	movi	r2,32
    6370:	f800283a 	ret
    6374:	0005883a 	mov	r2,zero
    6378:	003fec06 	br	632c <__alt_exception_stack_pointer+0xf800632c>
    637c:	10800044 	addi	r2,r2,1
    6380:	f800283a 	ret

00006384 <__lo0bits>:
    6384:	20c00017 	ldw	r3,0(r4)
    6388:	188001cc 	andi	r2,r3,7
    638c:	10000826 	beq	r2,zero,63b0 <__lo0bits+0x2c>
    6390:	1880004c 	andi	r2,r3,1
    6394:	1000211e 	bne	r2,zero,641c <__lo0bits+0x98>
    6398:	1880008c 	andi	r2,r3,2
    639c:	1000211e 	bne	r2,zero,6424 <__lo0bits+0xa0>
    63a0:	1806d0ba 	srli	r3,r3,2
    63a4:	00800084 	movi	r2,2
    63a8:	20c00015 	stw	r3,0(r4)
    63ac:	f800283a 	ret
    63b0:	18bfffcc 	andi	r2,r3,65535
    63b4:	10001326 	beq	r2,zero,6404 <__lo0bits+0x80>
    63b8:	0005883a 	mov	r2,zero
    63bc:	19403fcc 	andi	r5,r3,255
    63c0:	2800021e 	bne	r5,zero,63cc <__lo0bits+0x48>
    63c4:	1806d23a 	srli	r3,r3,8
    63c8:	10800204 	addi	r2,r2,8
    63cc:	194003cc 	andi	r5,r3,15
    63d0:	2800021e 	bne	r5,zero,63dc <__lo0bits+0x58>
    63d4:	1806d13a 	srli	r3,r3,4
    63d8:	10800104 	addi	r2,r2,4
    63dc:	194000cc 	andi	r5,r3,3
    63e0:	2800021e 	bne	r5,zero,63ec <__lo0bits+0x68>
    63e4:	1806d0ba 	srli	r3,r3,2
    63e8:	10800084 	addi	r2,r2,2
    63ec:	1940004c 	andi	r5,r3,1
    63f0:	2800081e 	bne	r5,zero,6414 <__lo0bits+0x90>
    63f4:	1806d07a 	srli	r3,r3,1
    63f8:	1800051e 	bne	r3,zero,6410 <__lo0bits+0x8c>
    63fc:	00800804 	movi	r2,32
    6400:	f800283a 	ret
    6404:	1806d43a 	srli	r3,r3,16
    6408:	00800404 	movi	r2,16
    640c:	003feb06 	br	63bc <__alt_exception_stack_pointer+0xf80063bc>
    6410:	10800044 	addi	r2,r2,1
    6414:	20c00015 	stw	r3,0(r4)
    6418:	f800283a 	ret
    641c:	0005883a 	mov	r2,zero
    6420:	f800283a 	ret
    6424:	1806d07a 	srli	r3,r3,1
    6428:	00800044 	movi	r2,1
    642c:	20c00015 	stw	r3,0(r4)
    6430:	f800283a 	ret

00006434 <__i2b>:
    6434:	defffd04 	addi	sp,sp,-12
    6438:	dc000015 	stw	r16,0(sp)
    643c:	04000044 	movi	r16,1
    6440:	dc400115 	stw	r17,4(sp)
    6444:	2823883a 	mov	r17,r5
    6448:	800b883a 	mov	r5,r16
    644c:	dfc00215 	stw	ra,8(sp)
    6450:	00060000 	call	6000 <_Balloc>
    6454:	14400515 	stw	r17,20(r2)
    6458:	14000415 	stw	r16,16(r2)
    645c:	dfc00217 	ldw	ra,8(sp)
    6460:	dc400117 	ldw	r17,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00304 	addi	sp,sp,12
    646c:	f800283a 	ret

00006470 <__multiply>:
    6470:	deffef04 	addi	sp,sp,-68
    6474:	dc400815 	stw	r17,32(sp)
    6478:	dc000715 	stw	r16,28(sp)
    647c:	34400417 	ldw	r17,16(r6)
    6480:	2c000417 	ldw	r16,16(r5)
    6484:	dd800d15 	stw	r22,52(sp)
    6488:	dc800915 	stw	r18,36(sp)
    648c:	dfc01015 	stw	ra,64(sp)
    6490:	df000f15 	stw	fp,60(sp)
    6494:	ddc00e15 	stw	r23,56(sp)
    6498:	dd400c15 	stw	r21,48(sp)
    649c:	dd000b15 	stw	r20,44(sp)
    64a0:	dcc00a15 	stw	r19,40(sp)
    64a4:	2825883a 	mov	r18,r5
    64a8:	302d883a 	mov	r22,r6
    64ac:	8440050e 	bge	r16,r17,64c4 <__multiply+0x54>
    64b0:	8007883a 	mov	r3,r16
    64b4:	3025883a 	mov	r18,r6
    64b8:	8821883a 	mov	r16,r17
    64bc:	282d883a 	mov	r22,r5
    64c0:	1823883a 	mov	r17,r3
    64c4:	90800217 	ldw	r2,8(r18)
    64c8:	8447883a 	add	r3,r16,r17
    64cc:	d8c00215 	stw	r3,8(sp)
    64d0:	91400117 	ldw	r5,4(r18)
    64d4:	10c0010e 	bge	r2,r3,64dc <__multiply+0x6c>
    64d8:	29400044 	addi	r5,r5,1
    64dc:	00060000 	call	6000 <_Balloc>
    64e0:	d8c00217 	ldw	r3,8(sp)
    64e4:	d8800615 	stw	r2,24(sp)
    64e8:	18eb883a 	add	r21,r3,r3
    64ec:	ad6b883a 	add	r21,r21,r21
    64f0:	10c00504 	addi	r3,r2,20
    64f4:	1d6b883a 	add	r21,r3,r21
    64f8:	d8c00115 	stw	r3,4(sp)
    64fc:	dd400315 	stw	r21,12(sp)
    6500:	1805883a 	mov	r2,r3
    6504:	1d40042e 	bgeu	r3,r21,6518 <__multiply+0xa8>
    6508:	d8c00317 	ldw	r3,12(sp)
    650c:	10000015 	stw	zero,0(r2)
    6510:	10800104 	addi	r2,r2,4
    6514:	10fffc36 	bltu	r2,r3,6508 <__alt_exception_stack_pointer+0xf8006508>
    6518:	8c63883a 	add	r17,r17,r17
    651c:	b5800504 	addi	r22,r22,20
    6520:	8c63883a 	add	r17,r17,r17
    6524:	94800504 	addi	r18,r18,20
    6528:	8421883a 	add	r16,r16,r16
    652c:	b463883a 	add	r17,r22,r17
    6530:	8421883a 	add	r16,r16,r16
    6534:	dd800015 	stw	r22,0(sp)
    6538:	dc800415 	stw	r18,16(sp)
    653c:	dc400515 	stw	r17,20(sp)
    6540:	9429883a 	add	r20,r18,r16
    6544:	b4404f2e 	bgeu	r22,r17,6684 <__multiply+0x214>
    6548:	d8c00017 	ldw	r3,0(sp)
    654c:	1c800017 	ldw	r18,0(r3)
    6550:	947fffcc 	andi	r17,r18,65535
    6554:	88001e26 	beq	r17,zero,65d0 <__multiply+0x160>
    6558:	dd800117 	ldw	r22,4(sp)
    655c:	dd400417 	ldw	r21,16(sp)
    6560:	0027883a 	mov	r19,zero
    6564:	ac800017 	ldw	r18,0(r21)
    6568:	b4000017 	ldw	r16,0(r22)
    656c:	880b883a 	mov	r5,r17
    6570:	913fffcc 	andi	r4,r18,65535
    6574:	000072c0 	call	72c <__mulsi3>
    6578:	9008d43a 	srli	r4,r18,16
    657c:	84bfffcc 	andi	r18,r16,65535
    6580:	1485883a 	add	r2,r2,r18
    6584:	14e5883a 	add	r18,r2,r19
    6588:	8020d43a 	srli	r16,r16,16
    658c:	9026d43a 	srli	r19,r18,16
    6590:	880b883a 	mov	r5,r17
    6594:	000072c0 	call	72c <__mulsi3>
    6598:	1405883a 	add	r2,r2,r16
    659c:	14e1883a 	add	r16,r2,r19
    65a0:	90ffffcc 	andi	r3,r18,65535
    65a4:	8024943a 	slli	r18,r16,16
    65a8:	ad400104 	addi	r21,r21,4
    65ac:	b005883a 	mov	r2,r22
    65b0:	90c6b03a 	or	r3,r18,r3
    65b4:	b0c00015 	stw	r3,0(r22)
    65b8:	8026d43a 	srli	r19,r16,16
    65bc:	b5800104 	addi	r22,r22,4
    65c0:	ad3fe836 	bltu	r21,r20,6564 <__alt_exception_stack_pointer+0xf8006564>
    65c4:	d8c00017 	ldw	r3,0(sp)
    65c8:	14c00115 	stw	r19,4(r2)
    65cc:	1c800017 	ldw	r18,0(r3)
    65d0:	9024d43a 	srli	r18,r18,16
    65d4:	90002226 	beq	r18,zero,6660 <__multiply+0x1f0>
    65d8:	d8c00117 	ldw	r3,4(sp)
    65dc:	dd800417 	ldw	r22,16(sp)
    65e0:	002f883a 	mov	r23,zero
    65e4:	1f000017 	ldw	fp,0(r3)
    65e8:	1823883a 	mov	r17,r3
    65ec:	182b883a 	mov	r21,r3
    65f0:	e021883a 	mov	r16,fp
    65f4:	00000106 	br	65fc <__multiply+0x18c>
    65f8:	982b883a 	mov	r21,r19
    65fc:	b100000b 	ldhu	r4,0(r22)
    6600:	8020d43a 	srli	r16,r16,16
    6604:	900b883a 	mov	r5,r18
    6608:	000072c0 	call	72c <__mulsi3>
    660c:	1405883a 	add	r2,r2,r16
    6610:	15ef883a 	add	r23,r2,r23
    6614:	b804943a 	slli	r2,r23,16
    6618:	e0ffffcc 	andi	r3,fp,65535
    661c:	8c400104 	addi	r17,r17,4
    6620:	10c6b03a 	or	r3,r2,r3
    6624:	88ffff15 	stw	r3,-4(r17)
    6628:	b5800104 	addi	r22,r22,4
    662c:	b13fff17 	ldw	r4,-4(r22)
    6630:	acc00104 	addi	r19,r21,4
    6634:	900b883a 	mov	r5,r18
    6638:	2008d43a 	srli	r4,r4,16
    663c:	9c000017 	ldw	r16,0(r19)
    6640:	000072c0 	call	72c <__mulsi3>
    6644:	b806d43a 	srli	r3,r23,16
    6648:	813fffcc 	andi	r4,r16,65535
    664c:	1105883a 	add	r2,r2,r4
    6650:	10f9883a 	add	fp,r2,r3
    6654:	e02ed43a 	srli	r23,fp,16
    6658:	b53fe736 	bltu	r22,r20,65f8 <__alt_exception_stack_pointer+0xf80065f8>
    665c:	af000115 	stw	fp,4(r21)
    6660:	d8c00017 	ldw	r3,0(sp)
    6664:	d9000517 	ldw	r4,20(sp)
    6668:	18c00104 	addi	r3,r3,4
    666c:	d8c00015 	stw	r3,0(sp)
    6670:	d8c00117 	ldw	r3,4(sp)
    6674:	18c00104 	addi	r3,r3,4
    6678:	d8c00115 	stw	r3,4(sp)
    667c:	d8c00017 	ldw	r3,0(sp)
    6680:	193fb136 	bltu	r3,r4,6548 <__alt_exception_stack_pointer+0xf8006548>
    6684:	d8c00217 	ldw	r3,8(sp)
    6688:	00c00c0e 	bge	zero,r3,66bc <__multiply+0x24c>
    668c:	d8c00317 	ldw	r3,12(sp)
    6690:	18bfff17 	ldw	r2,-4(r3)
    6694:	1d7fff04 	addi	r21,r3,-4
    6698:	10000326 	beq	r2,zero,66a8 <__multiply+0x238>
    669c:	00000706 	br	66bc <__multiply+0x24c>
    66a0:	a8800017 	ldw	r2,0(r21)
    66a4:	1000051e 	bne	r2,zero,66bc <__multiply+0x24c>
    66a8:	d8c00217 	ldw	r3,8(sp)
    66ac:	ad7fff04 	addi	r21,r21,-4
    66b0:	18ffffc4 	addi	r3,r3,-1
    66b4:	d8c00215 	stw	r3,8(sp)
    66b8:	183ff91e 	bne	r3,zero,66a0 <__alt_exception_stack_pointer+0xf80066a0>
    66bc:	d8c00617 	ldw	r3,24(sp)
    66c0:	d9000217 	ldw	r4,8(sp)
    66c4:	1805883a 	mov	r2,r3
    66c8:	19000415 	stw	r4,16(r3)
    66cc:	dfc01017 	ldw	ra,64(sp)
    66d0:	df000f17 	ldw	fp,60(sp)
    66d4:	ddc00e17 	ldw	r23,56(sp)
    66d8:	dd800d17 	ldw	r22,52(sp)
    66dc:	dd400c17 	ldw	r21,48(sp)
    66e0:	dd000b17 	ldw	r20,44(sp)
    66e4:	dcc00a17 	ldw	r19,40(sp)
    66e8:	dc800917 	ldw	r18,36(sp)
    66ec:	dc400817 	ldw	r17,32(sp)
    66f0:	dc000717 	ldw	r16,28(sp)
    66f4:	dec01104 	addi	sp,sp,68
    66f8:	f800283a 	ret

000066fc <__pow5mult>:
    66fc:	defffa04 	addi	sp,sp,-24
    6700:	dcc00315 	stw	r19,12(sp)
    6704:	dc000015 	stw	r16,0(sp)
    6708:	dfc00515 	stw	ra,20(sp)
    670c:	dd000415 	stw	r20,16(sp)
    6710:	dc800215 	stw	r18,8(sp)
    6714:	dc400115 	stw	r17,4(sp)
    6718:	308000cc 	andi	r2,r6,3
    671c:	3021883a 	mov	r16,r6
    6720:	2027883a 	mov	r19,r4
    6724:	10002f1e 	bne	r2,zero,67e4 <__pow5mult+0xe8>
    6728:	2825883a 	mov	r18,r5
    672c:	8021d0ba 	srai	r16,r16,2
    6730:	80001a26 	beq	r16,zero,679c <__pow5mult+0xa0>
    6734:	9c401217 	ldw	r17,72(r19)
    6738:	8800061e 	bne	r17,zero,6754 <__pow5mult+0x58>
    673c:	00003406 	br	6810 <__pow5mult+0x114>
    6740:	8021d07a 	srai	r16,r16,1
    6744:	80001526 	beq	r16,zero,679c <__pow5mult+0xa0>
    6748:	88800017 	ldw	r2,0(r17)
    674c:	10001c26 	beq	r2,zero,67c0 <__pow5mult+0xc4>
    6750:	1023883a 	mov	r17,r2
    6754:	8080004c 	andi	r2,r16,1
    6758:	103ff926 	beq	r2,zero,6740 <__alt_exception_stack_pointer+0xf8006740>
    675c:	880d883a 	mov	r6,r17
    6760:	900b883a 	mov	r5,r18
    6764:	9809883a 	mov	r4,r19
    6768:	00064700 	call	6470 <__multiply>
    676c:	90001b26 	beq	r18,zero,67dc <__pow5mult+0xe0>
    6770:	91000117 	ldw	r4,4(r18)
    6774:	98c01317 	ldw	r3,76(r19)
    6778:	8021d07a 	srai	r16,r16,1
    677c:	2109883a 	add	r4,r4,r4
    6780:	2109883a 	add	r4,r4,r4
    6784:	1907883a 	add	r3,r3,r4
    6788:	19000017 	ldw	r4,0(r3)
    678c:	91000015 	stw	r4,0(r18)
    6790:	1c800015 	stw	r18,0(r3)
    6794:	1025883a 	mov	r18,r2
    6798:	803feb1e 	bne	r16,zero,6748 <__alt_exception_stack_pointer+0xf8006748>
    679c:	9005883a 	mov	r2,r18
    67a0:	dfc00517 	ldw	ra,20(sp)
    67a4:	dd000417 	ldw	r20,16(sp)
    67a8:	dcc00317 	ldw	r19,12(sp)
    67ac:	dc800217 	ldw	r18,8(sp)
    67b0:	dc400117 	ldw	r17,4(sp)
    67b4:	dc000017 	ldw	r16,0(sp)
    67b8:	dec00604 	addi	sp,sp,24
    67bc:	f800283a 	ret
    67c0:	880d883a 	mov	r6,r17
    67c4:	880b883a 	mov	r5,r17
    67c8:	9809883a 	mov	r4,r19
    67cc:	00064700 	call	6470 <__multiply>
    67d0:	88800015 	stw	r2,0(r17)
    67d4:	10000015 	stw	zero,0(r2)
    67d8:	003fdd06 	br	6750 <__alt_exception_stack_pointer+0xf8006750>
    67dc:	1025883a 	mov	r18,r2
    67e0:	003fd706 	br	6740 <__alt_exception_stack_pointer+0xf8006740>
    67e4:	10bfffc4 	addi	r2,r2,-1
    67e8:	1085883a 	add	r2,r2,r2
    67ec:	00c00074 	movhi	r3,1
    67f0:	18ff0d04 	addi	r3,r3,-972
    67f4:	1085883a 	add	r2,r2,r2
    67f8:	1885883a 	add	r2,r3,r2
    67fc:	11800017 	ldw	r6,0(r2)
    6800:	000f883a 	mov	r7,zero
    6804:	00060d00 	call	60d0 <__multadd>
    6808:	1025883a 	mov	r18,r2
    680c:	003fc706 	br	672c <__alt_exception_stack_pointer+0xf800672c>
    6810:	05000044 	movi	r20,1
    6814:	a00b883a 	mov	r5,r20
    6818:	9809883a 	mov	r4,r19
    681c:	00060000 	call	6000 <_Balloc>
    6820:	1023883a 	mov	r17,r2
    6824:	00809c44 	movi	r2,625
    6828:	88800515 	stw	r2,20(r17)
    682c:	8d000415 	stw	r20,16(r17)
    6830:	9c401215 	stw	r17,72(r19)
    6834:	88000015 	stw	zero,0(r17)
    6838:	003fc606 	br	6754 <__alt_exception_stack_pointer+0xf8006754>

0000683c <__lshift>:
    683c:	defff904 	addi	sp,sp,-28
    6840:	dd400515 	stw	r21,20(sp)
    6844:	dcc00315 	stw	r19,12(sp)
    6848:	302bd17a 	srai	r21,r6,5
    684c:	2cc00417 	ldw	r19,16(r5)
    6850:	28800217 	ldw	r2,8(r5)
    6854:	dd000415 	stw	r20,16(sp)
    6858:	ace7883a 	add	r19,r21,r19
    685c:	dc800215 	stw	r18,8(sp)
    6860:	dc400115 	stw	r17,4(sp)
    6864:	dc000015 	stw	r16,0(sp)
    6868:	dfc00615 	stw	ra,24(sp)
    686c:	9c000044 	addi	r16,r19,1
    6870:	2823883a 	mov	r17,r5
    6874:	3029883a 	mov	r20,r6
    6878:	2025883a 	mov	r18,r4
    687c:	29400117 	ldw	r5,4(r5)
    6880:	1400030e 	bge	r2,r16,6890 <__lshift+0x54>
    6884:	1085883a 	add	r2,r2,r2
    6888:	29400044 	addi	r5,r5,1
    688c:	143ffd16 	blt	r2,r16,6884 <__alt_exception_stack_pointer+0xf8006884>
    6890:	9009883a 	mov	r4,r18
    6894:	00060000 	call	6000 <_Balloc>
    6898:	10c00504 	addi	r3,r2,20
    689c:	0540070e 	bge	zero,r21,68bc <__lshift+0x80>
    68a0:	ad6b883a 	add	r21,r21,r21
    68a4:	ad6b883a 	add	r21,r21,r21
    68a8:	1809883a 	mov	r4,r3
    68ac:	1d47883a 	add	r3,r3,r21
    68b0:	20000015 	stw	zero,0(r4)
    68b4:	21000104 	addi	r4,r4,4
    68b8:	193ffd1e 	bne	r3,r4,68b0 <__alt_exception_stack_pointer+0xf80068b0>
    68bc:	8a000417 	ldw	r8,16(r17)
    68c0:	89000504 	addi	r4,r17,20
    68c4:	a18007cc 	andi	r6,r20,31
    68c8:	4211883a 	add	r8,r8,r8
    68cc:	4211883a 	add	r8,r8,r8
    68d0:	2211883a 	add	r8,r4,r8
    68d4:	30002326 	beq	r6,zero,6964 <__lshift+0x128>
    68d8:	02400804 	movi	r9,32
    68dc:	4993c83a 	sub	r9,r9,r6
    68e0:	000b883a 	mov	r5,zero
    68e4:	21c00017 	ldw	r7,0(r4)
    68e8:	1815883a 	mov	r10,r3
    68ec:	18c00104 	addi	r3,r3,4
    68f0:	398e983a 	sll	r7,r7,r6
    68f4:	21000104 	addi	r4,r4,4
    68f8:	394ab03a 	or	r5,r7,r5
    68fc:	197fff15 	stw	r5,-4(r3)
    6900:	217fff17 	ldw	r5,-4(r4)
    6904:	2a4ad83a 	srl	r5,r5,r9
    6908:	223ff636 	bltu	r4,r8,68e4 <__alt_exception_stack_pointer+0xf80068e4>
    690c:	51400115 	stw	r5,4(r10)
    6910:	28001a1e 	bne	r5,zero,697c <__lshift+0x140>
    6914:	843fffc4 	addi	r16,r16,-1
    6918:	14000415 	stw	r16,16(r2)
    691c:	88000826 	beq	r17,zero,6940 <__lshift+0x104>
    6920:	89000117 	ldw	r4,4(r17)
    6924:	90c01317 	ldw	r3,76(r18)
    6928:	2109883a 	add	r4,r4,r4
    692c:	2109883a 	add	r4,r4,r4
    6930:	1907883a 	add	r3,r3,r4
    6934:	19000017 	ldw	r4,0(r3)
    6938:	89000015 	stw	r4,0(r17)
    693c:	1c400015 	stw	r17,0(r3)
    6940:	dfc00617 	ldw	ra,24(sp)
    6944:	dd400517 	ldw	r21,20(sp)
    6948:	dd000417 	ldw	r20,16(sp)
    694c:	dcc00317 	ldw	r19,12(sp)
    6950:	dc800217 	ldw	r18,8(sp)
    6954:	dc400117 	ldw	r17,4(sp)
    6958:	dc000017 	ldw	r16,0(sp)
    695c:	dec00704 	addi	sp,sp,28
    6960:	f800283a 	ret
    6964:	21400017 	ldw	r5,0(r4)
    6968:	18c00104 	addi	r3,r3,4
    696c:	21000104 	addi	r4,r4,4
    6970:	197fff15 	stw	r5,-4(r3)
    6974:	223ffb36 	bltu	r4,r8,6964 <__alt_exception_stack_pointer+0xf8006964>
    6978:	003fe606 	br	6914 <__alt_exception_stack_pointer+0xf8006914>
    697c:	9c000084 	addi	r16,r19,2
    6980:	003fe406 	br	6914 <__alt_exception_stack_pointer+0xf8006914>

00006984 <__mcmp>:
    6984:	20800417 	ldw	r2,16(r4)
    6988:	28c00417 	ldw	r3,16(r5)
    698c:	10c5c83a 	sub	r2,r2,r3
    6990:	1000111e 	bne	r2,zero,69d8 <__mcmp+0x54>
    6994:	18c7883a 	add	r3,r3,r3
    6998:	18c7883a 	add	r3,r3,r3
    699c:	21000504 	addi	r4,r4,20
    69a0:	29400504 	addi	r5,r5,20
    69a4:	20c5883a 	add	r2,r4,r3
    69a8:	28cb883a 	add	r5,r5,r3
    69ac:	00000106 	br	69b4 <__mcmp+0x30>
    69b0:	20800a2e 	bgeu	r4,r2,69dc <__mcmp+0x58>
    69b4:	10bfff04 	addi	r2,r2,-4
    69b8:	297fff04 	addi	r5,r5,-4
    69bc:	11800017 	ldw	r6,0(r2)
    69c0:	28c00017 	ldw	r3,0(r5)
    69c4:	30fffa26 	beq	r6,r3,69b0 <__alt_exception_stack_pointer+0xf80069b0>
    69c8:	30c00236 	bltu	r6,r3,69d4 <__mcmp+0x50>
    69cc:	00800044 	movi	r2,1
    69d0:	f800283a 	ret
    69d4:	00bfffc4 	movi	r2,-1
    69d8:	f800283a 	ret
    69dc:	0005883a 	mov	r2,zero
    69e0:	f800283a 	ret

000069e4 <__mdiff>:
    69e4:	28c00417 	ldw	r3,16(r5)
    69e8:	30800417 	ldw	r2,16(r6)
    69ec:	defffa04 	addi	sp,sp,-24
    69f0:	dcc00315 	stw	r19,12(sp)
    69f4:	dc800215 	stw	r18,8(sp)
    69f8:	dfc00515 	stw	ra,20(sp)
    69fc:	dd000415 	stw	r20,16(sp)
    6a00:	dc400115 	stw	r17,4(sp)
    6a04:	dc000015 	stw	r16,0(sp)
    6a08:	1887c83a 	sub	r3,r3,r2
    6a0c:	2825883a 	mov	r18,r5
    6a10:	3027883a 	mov	r19,r6
    6a14:	1800141e 	bne	r3,zero,6a68 <__mdiff+0x84>
    6a18:	1085883a 	add	r2,r2,r2
    6a1c:	1085883a 	add	r2,r2,r2
    6a20:	2a000504 	addi	r8,r5,20
    6a24:	34000504 	addi	r16,r6,20
    6a28:	4087883a 	add	r3,r8,r2
    6a2c:	8085883a 	add	r2,r16,r2
    6a30:	00000106 	br	6a38 <__mdiff+0x54>
    6a34:	40c0592e 	bgeu	r8,r3,6b9c <__mdiff+0x1b8>
    6a38:	18ffff04 	addi	r3,r3,-4
    6a3c:	10bfff04 	addi	r2,r2,-4
    6a40:	19c00017 	ldw	r7,0(r3)
    6a44:	11400017 	ldw	r5,0(r2)
    6a48:	397ffa26 	beq	r7,r5,6a34 <__alt_exception_stack_pointer+0xf8006a34>
    6a4c:	3940592e 	bgeu	r7,r5,6bb4 <__mdiff+0x1d0>
    6a50:	9005883a 	mov	r2,r18
    6a54:	4023883a 	mov	r17,r8
    6a58:	9825883a 	mov	r18,r19
    6a5c:	05000044 	movi	r20,1
    6a60:	1027883a 	mov	r19,r2
    6a64:	00000406 	br	6a78 <__mdiff+0x94>
    6a68:	18005616 	blt	r3,zero,6bc4 <__mdiff+0x1e0>
    6a6c:	34400504 	addi	r17,r6,20
    6a70:	2c000504 	addi	r16,r5,20
    6a74:	0029883a 	mov	r20,zero
    6a78:	91400117 	ldw	r5,4(r18)
    6a7c:	00060000 	call	6000 <_Balloc>
    6a80:	92400417 	ldw	r9,16(r18)
    6a84:	9b000417 	ldw	r12,16(r19)
    6a88:	12c00504 	addi	r11,r2,20
    6a8c:	4a51883a 	add	r8,r9,r9
    6a90:	6319883a 	add	r12,r12,r12
    6a94:	4211883a 	add	r8,r8,r8
    6a98:	6319883a 	add	r12,r12,r12
    6a9c:	15000315 	stw	r20,12(r2)
    6aa0:	8211883a 	add	r8,r16,r8
    6aa4:	8b19883a 	add	r12,r17,r12
    6aa8:	0007883a 	mov	r3,zero
    6aac:	81400017 	ldw	r5,0(r16)
    6ab0:	89c00017 	ldw	r7,0(r17)
    6ab4:	59800104 	addi	r6,r11,4
    6ab8:	293fffcc 	andi	r4,r5,65535
    6abc:	20c7883a 	add	r3,r4,r3
    6ac0:	393fffcc 	andi	r4,r7,65535
    6ac4:	1909c83a 	sub	r4,r3,r4
    6ac8:	280ad43a 	srli	r5,r5,16
    6acc:	380ed43a 	srli	r7,r7,16
    6ad0:	2007d43a 	srai	r3,r4,16
    6ad4:	213fffcc 	andi	r4,r4,65535
    6ad8:	29cbc83a 	sub	r5,r5,r7
    6adc:	28c7883a 	add	r3,r5,r3
    6ae0:	180a943a 	slli	r5,r3,16
    6ae4:	8c400104 	addi	r17,r17,4
    6ae8:	84000104 	addi	r16,r16,4
    6aec:	2908b03a 	or	r4,r5,r4
    6af0:	59000015 	stw	r4,0(r11)
    6af4:	1807d43a 	srai	r3,r3,16
    6af8:	3015883a 	mov	r10,r6
    6afc:	3017883a 	mov	r11,r6
    6b00:	8b3fea36 	bltu	r17,r12,6aac <__alt_exception_stack_pointer+0xf8006aac>
    6b04:	8200162e 	bgeu	r16,r8,6b60 <__mdiff+0x17c>
    6b08:	8017883a 	mov	r11,r16
    6b0c:	59400017 	ldw	r5,0(r11)
    6b10:	31800104 	addi	r6,r6,4
    6b14:	5ac00104 	addi	r11,r11,4
    6b18:	293fffcc 	andi	r4,r5,65535
    6b1c:	20c7883a 	add	r3,r4,r3
    6b20:	280ed43a 	srli	r7,r5,16
    6b24:	180bd43a 	srai	r5,r3,16
    6b28:	193fffcc 	andi	r4,r3,65535
    6b2c:	3947883a 	add	r3,r7,r5
    6b30:	180a943a 	slli	r5,r3,16
    6b34:	1807d43a 	srai	r3,r3,16
    6b38:	2908b03a 	or	r4,r5,r4
    6b3c:	313fff15 	stw	r4,-4(r6)
    6b40:	5a3ff236 	bltu	r11,r8,6b0c <__alt_exception_stack_pointer+0xf8006b0c>
    6b44:	0406303a 	nor	r3,zero,r16
    6b48:	1a07883a 	add	r3,r3,r8
    6b4c:	1806d0ba 	srli	r3,r3,2
    6b50:	18c00044 	addi	r3,r3,1
    6b54:	18c7883a 	add	r3,r3,r3
    6b58:	18c7883a 	add	r3,r3,r3
    6b5c:	50d5883a 	add	r10,r10,r3
    6b60:	50ffff04 	addi	r3,r10,-4
    6b64:	2000041e 	bne	r4,zero,6b78 <__mdiff+0x194>
    6b68:	18ffff04 	addi	r3,r3,-4
    6b6c:	19000017 	ldw	r4,0(r3)
    6b70:	4a7fffc4 	addi	r9,r9,-1
    6b74:	203ffc26 	beq	r4,zero,6b68 <__alt_exception_stack_pointer+0xf8006b68>
    6b78:	12400415 	stw	r9,16(r2)
    6b7c:	dfc00517 	ldw	ra,20(sp)
    6b80:	dd000417 	ldw	r20,16(sp)
    6b84:	dcc00317 	ldw	r19,12(sp)
    6b88:	dc800217 	ldw	r18,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00604 	addi	sp,sp,24
    6b98:	f800283a 	ret
    6b9c:	000b883a 	mov	r5,zero
    6ba0:	00060000 	call	6000 <_Balloc>
    6ba4:	00c00044 	movi	r3,1
    6ba8:	10c00415 	stw	r3,16(r2)
    6bac:	10000515 	stw	zero,20(r2)
    6bb0:	003ff206 	br	6b7c <__alt_exception_stack_pointer+0xf8006b7c>
    6bb4:	8023883a 	mov	r17,r16
    6bb8:	0029883a 	mov	r20,zero
    6bbc:	4021883a 	mov	r16,r8
    6bc0:	003fad06 	br	6a78 <__alt_exception_stack_pointer+0xf8006a78>
    6bc4:	9005883a 	mov	r2,r18
    6bc8:	94400504 	addi	r17,r18,20
    6bcc:	9c000504 	addi	r16,r19,20
    6bd0:	9825883a 	mov	r18,r19
    6bd4:	05000044 	movi	r20,1
    6bd8:	1027883a 	mov	r19,r2
    6bdc:	003fa606 	br	6a78 <__alt_exception_stack_pointer+0xf8006a78>

00006be0 <__ulp>:
    6be0:	295ffc2c 	andhi	r5,r5,32752
    6be4:	00bf3034 	movhi	r2,64704
    6be8:	2887883a 	add	r3,r5,r2
    6bec:	00c0020e 	bge	zero,r3,6bf8 <__ulp+0x18>
    6bf0:	0005883a 	mov	r2,zero
    6bf4:	f800283a 	ret
    6bf8:	00c7c83a 	sub	r3,zero,r3
    6bfc:	1807d53a 	srai	r3,r3,20
    6c00:	008004c4 	movi	r2,19
    6c04:	10c00b0e 	bge	r2,r3,6c34 <__ulp+0x54>
    6c08:	18bffb04 	addi	r2,r3,-20
    6c0c:	01000784 	movi	r4,30
    6c10:	0007883a 	mov	r3,zero
    6c14:	20800516 	blt	r4,r2,6c2c <__ulp+0x4c>
    6c18:	010007c4 	movi	r4,31
    6c1c:	2089c83a 	sub	r4,r4,r2
    6c20:	00800044 	movi	r2,1
    6c24:	1104983a 	sll	r2,r2,r4
    6c28:	f800283a 	ret
    6c2c:	00800044 	movi	r2,1
    6c30:	f800283a 	ret
    6c34:	01400234 	movhi	r5,8
    6c38:	28c7d83a 	sra	r3,r5,r3
    6c3c:	0005883a 	mov	r2,zero
    6c40:	f800283a 	ret

00006c44 <__b2d>:
    6c44:	defffa04 	addi	sp,sp,-24
    6c48:	dc000015 	stw	r16,0(sp)
    6c4c:	24000417 	ldw	r16,16(r4)
    6c50:	dc400115 	stw	r17,4(sp)
    6c54:	24400504 	addi	r17,r4,20
    6c58:	8421883a 	add	r16,r16,r16
    6c5c:	8421883a 	add	r16,r16,r16
    6c60:	8c21883a 	add	r16,r17,r16
    6c64:	dc800215 	stw	r18,8(sp)
    6c68:	84bfff17 	ldw	r18,-4(r16)
    6c6c:	dd000415 	stw	r20,16(sp)
    6c70:	dcc00315 	stw	r19,12(sp)
    6c74:	9009883a 	mov	r4,r18
    6c78:	2829883a 	mov	r20,r5
    6c7c:	dfc00515 	stw	ra,20(sp)
    6c80:	000631c0 	call	631c <__hi0bits>
    6c84:	00c00804 	movi	r3,32
    6c88:	1889c83a 	sub	r4,r3,r2
    6c8c:	a1000015 	stw	r4,0(r20)
    6c90:	01000284 	movi	r4,10
    6c94:	84ffff04 	addi	r19,r16,-4
    6c98:	20801216 	blt	r4,r2,6ce4 <__b2d+0xa0>
    6c9c:	018002c4 	movi	r6,11
    6ca0:	308dc83a 	sub	r6,r6,r2
    6ca4:	9186d83a 	srl	r3,r18,r6
    6ca8:	18cffc34 	orhi	r3,r3,16368
    6cac:	8cc0212e 	bgeu	r17,r19,6d34 <__b2d+0xf0>
    6cb0:	813ffe17 	ldw	r4,-8(r16)
    6cb4:	218cd83a 	srl	r6,r4,r6
    6cb8:	10800544 	addi	r2,r2,21
    6cbc:	9084983a 	sll	r2,r18,r2
    6cc0:	1184b03a 	or	r2,r2,r6
    6cc4:	dfc00517 	ldw	ra,20(sp)
    6cc8:	dd000417 	ldw	r20,16(sp)
    6ccc:	dcc00317 	ldw	r19,12(sp)
    6cd0:	dc800217 	ldw	r18,8(sp)
    6cd4:	dc400117 	ldw	r17,4(sp)
    6cd8:	dc000017 	ldw	r16,0(sp)
    6cdc:	dec00604 	addi	sp,sp,24
    6ce0:	f800283a 	ret
    6ce4:	8cc00f2e 	bgeu	r17,r19,6d24 <__b2d+0xe0>
    6ce8:	117ffd44 	addi	r5,r2,-11
    6cec:	80bffe17 	ldw	r2,-8(r16)
    6cf0:	28000e26 	beq	r5,zero,6d2c <__b2d+0xe8>
    6cf4:	1949c83a 	sub	r4,r3,r5
    6cf8:	9164983a 	sll	r18,r18,r5
    6cfc:	1106d83a 	srl	r3,r2,r4
    6d00:	81bffe04 	addi	r6,r16,-8
    6d04:	948ffc34 	orhi	r18,r18,16368
    6d08:	90c6b03a 	or	r3,r18,r3
    6d0c:	89800e2e 	bgeu	r17,r6,6d48 <__b2d+0x104>
    6d10:	81bffd17 	ldw	r6,-12(r16)
    6d14:	1144983a 	sll	r2,r2,r5
    6d18:	310ad83a 	srl	r5,r6,r4
    6d1c:	2884b03a 	or	r2,r5,r2
    6d20:	003fe806 	br	6cc4 <__alt_exception_stack_pointer+0xf8006cc4>
    6d24:	10bffd44 	addi	r2,r2,-11
    6d28:	1000041e 	bne	r2,zero,6d3c <__b2d+0xf8>
    6d2c:	90cffc34 	orhi	r3,r18,16368
    6d30:	003fe406 	br	6cc4 <__alt_exception_stack_pointer+0xf8006cc4>
    6d34:	000d883a 	mov	r6,zero
    6d38:	003fdf06 	br	6cb8 <__alt_exception_stack_pointer+0xf8006cb8>
    6d3c:	90a4983a 	sll	r18,r18,r2
    6d40:	0005883a 	mov	r2,zero
    6d44:	003ff906 	br	6d2c <__alt_exception_stack_pointer+0xf8006d2c>
    6d48:	1144983a 	sll	r2,r2,r5
    6d4c:	003fdd06 	br	6cc4 <__alt_exception_stack_pointer+0xf8006cc4>

00006d50 <__d2b>:
    6d50:	defff804 	addi	sp,sp,-32
    6d54:	dc000215 	stw	r16,8(sp)
    6d58:	3021883a 	mov	r16,r6
    6d5c:	dc400315 	stw	r17,12(sp)
    6d60:	8022907a 	slli	r17,r16,1
    6d64:	dd000615 	stw	r20,24(sp)
    6d68:	2829883a 	mov	r20,r5
    6d6c:	01400044 	movi	r5,1
    6d70:	dcc00515 	stw	r19,20(sp)
    6d74:	dc800415 	stw	r18,16(sp)
    6d78:	dfc00715 	stw	ra,28(sp)
    6d7c:	3825883a 	mov	r18,r7
    6d80:	8822d57a 	srli	r17,r17,21
    6d84:	00060000 	call	6000 <_Balloc>
    6d88:	1027883a 	mov	r19,r2
    6d8c:	00800434 	movhi	r2,16
    6d90:	10bfffc4 	addi	r2,r2,-1
    6d94:	808c703a 	and	r6,r16,r2
    6d98:	88000126 	beq	r17,zero,6da0 <__d2b+0x50>
    6d9c:	31800434 	orhi	r6,r6,16
    6da0:	d9800015 	stw	r6,0(sp)
    6da4:	a0002426 	beq	r20,zero,6e38 <__d2b+0xe8>
    6da8:	d9000104 	addi	r4,sp,4
    6dac:	dd000115 	stw	r20,4(sp)
    6db0:	00063840 	call	6384 <__lo0bits>
    6db4:	d8c00017 	ldw	r3,0(sp)
    6db8:	10002f1e 	bne	r2,zero,6e78 <__d2b+0x128>
    6dbc:	d9000117 	ldw	r4,4(sp)
    6dc0:	99000515 	stw	r4,20(r19)
    6dc4:	1821003a 	cmpeq	r16,r3,zero
    6dc8:	01000084 	movi	r4,2
    6dcc:	2421c83a 	sub	r16,r4,r16
    6dd0:	98c00615 	stw	r3,24(r19)
    6dd4:	9c000415 	stw	r16,16(r19)
    6dd8:	88001f1e 	bne	r17,zero,6e58 <__d2b+0x108>
    6ddc:	10bef384 	addi	r2,r2,-1074
    6de0:	90800015 	stw	r2,0(r18)
    6de4:	00900034 	movhi	r2,16384
    6de8:	10bfffc4 	addi	r2,r2,-1
    6dec:	8085883a 	add	r2,r16,r2
    6df0:	1085883a 	add	r2,r2,r2
    6df4:	1085883a 	add	r2,r2,r2
    6df8:	9885883a 	add	r2,r19,r2
    6dfc:	11000517 	ldw	r4,20(r2)
    6e00:	8020917a 	slli	r16,r16,5
    6e04:	000631c0 	call	631c <__hi0bits>
    6e08:	d8c00817 	ldw	r3,32(sp)
    6e0c:	8085c83a 	sub	r2,r16,r2
    6e10:	18800015 	stw	r2,0(r3)
    6e14:	9805883a 	mov	r2,r19
    6e18:	dfc00717 	ldw	ra,28(sp)
    6e1c:	dd000617 	ldw	r20,24(sp)
    6e20:	dcc00517 	ldw	r19,20(sp)
    6e24:	dc800417 	ldw	r18,16(sp)
    6e28:	dc400317 	ldw	r17,12(sp)
    6e2c:	dc000217 	ldw	r16,8(sp)
    6e30:	dec00804 	addi	sp,sp,32
    6e34:	f800283a 	ret
    6e38:	d809883a 	mov	r4,sp
    6e3c:	00063840 	call	6384 <__lo0bits>
    6e40:	d8c00017 	ldw	r3,0(sp)
    6e44:	04000044 	movi	r16,1
    6e48:	9c000415 	stw	r16,16(r19)
    6e4c:	98c00515 	stw	r3,20(r19)
    6e50:	10800804 	addi	r2,r2,32
    6e54:	883fe126 	beq	r17,zero,6ddc <__alt_exception_stack_pointer+0xf8006ddc>
    6e58:	00c00d44 	movi	r3,53
    6e5c:	8c7ef344 	addi	r17,r17,-1075
    6e60:	88a3883a 	add	r17,r17,r2
    6e64:	1885c83a 	sub	r2,r3,r2
    6e68:	d8c00817 	ldw	r3,32(sp)
    6e6c:	94400015 	stw	r17,0(r18)
    6e70:	18800015 	stw	r2,0(r3)
    6e74:	003fe706 	br	6e14 <__alt_exception_stack_pointer+0xf8006e14>
    6e78:	01000804 	movi	r4,32
    6e7c:	2089c83a 	sub	r4,r4,r2
    6e80:	1908983a 	sll	r4,r3,r4
    6e84:	d9400117 	ldw	r5,4(sp)
    6e88:	1886d83a 	srl	r3,r3,r2
    6e8c:	2148b03a 	or	r4,r4,r5
    6e90:	99000515 	stw	r4,20(r19)
    6e94:	d8c00015 	stw	r3,0(sp)
    6e98:	003fca06 	br	6dc4 <__alt_exception_stack_pointer+0xf8006dc4>

00006e9c <__ratio>:
    6e9c:	defff904 	addi	sp,sp,-28
    6ea0:	dc400315 	stw	r17,12(sp)
    6ea4:	2823883a 	mov	r17,r5
    6ea8:	d9400104 	addi	r5,sp,4
    6eac:	dfc00615 	stw	ra,24(sp)
    6eb0:	dcc00515 	stw	r19,20(sp)
    6eb4:	dc800415 	stw	r18,16(sp)
    6eb8:	2027883a 	mov	r19,r4
    6ebc:	dc000215 	stw	r16,8(sp)
    6ec0:	0006c440 	call	6c44 <__b2d>
    6ec4:	d80b883a 	mov	r5,sp
    6ec8:	8809883a 	mov	r4,r17
    6ecc:	1025883a 	mov	r18,r2
    6ed0:	1821883a 	mov	r16,r3
    6ed4:	0006c440 	call	6c44 <__b2d>
    6ed8:	8a000417 	ldw	r8,16(r17)
    6edc:	99000417 	ldw	r4,16(r19)
    6ee0:	d9400117 	ldw	r5,4(sp)
    6ee4:	2209c83a 	sub	r4,r4,r8
    6ee8:	2010917a 	slli	r8,r4,5
    6eec:	d9000017 	ldw	r4,0(sp)
    6ef0:	2909c83a 	sub	r4,r5,r4
    6ef4:	4109883a 	add	r4,r8,r4
    6ef8:	01000e0e 	bge	zero,r4,6f34 <__ratio+0x98>
    6efc:	2008953a 	slli	r4,r4,20
    6f00:	2421883a 	add	r16,r4,r16
    6f04:	100d883a 	mov	r6,r2
    6f08:	180f883a 	mov	r7,r3
    6f0c:	9009883a 	mov	r4,r18
    6f10:	800b883a 	mov	r5,r16
    6f14:	000b4140 	call	b414 <__divdf3>
    6f18:	dfc00617 	ldw	ra,24(sp)
    6f1c:	dcc00517 	ldw	r19,20(sp)
    6f20:	dc800417 	ldw	r18,16(sp)
    6f24:	dc400317 	ldw	r17,12(sp)
    6f28:	dc000217 	ldw	r16,8(sp)
    6f2c:	dec00704 	addi	sp,sp,28
    6f30:	f800283a 	ret
    6f34:	2008953a 	slli	r4,r4,20
    6f38:	1907c83a 	sub	r3,r3,r4
    6f3c:	003ff106 	br	6f04 <__alt_exception_stack_pointer+0xf8006f04>

00006f40 <_mprec_log10>:
    6f40:	defffe04 	addi	sp,sp,-8
    6f44:	dc000015 	stw	r16,0(sp)
    6f48:	dfc00115 	stw	ra,4(sp)
    6f4c:	008005c4 	movi	r2,23
    6f50:	2021883a 	mov	r16,r4
    6f54:	11000d0e 	bge	r2,r4,6f8c <_mprec_log10+0x4c>
    6f58:	0005883a 	mov	r2,zero
    6f5c:	00cffc34 	movhi	r3,16368
    6f60:	843fffc4 	addi	r16,r16,-1
    6f64:	000d883a 	mov	r6,zero
    6f68:	01d00934 	movhi	r7,16420
    6f6c:	1009883a 	mov	r4,r2
    6f70:	180b883a 	mov	r5,r3
    6f74:	000c03c0 	call	c03c <__muldf3>
    6f78:	803ff91e 	bne	r16,zero,6f60 <__alt_exception_stack_pointer+0xf8006f60>
    6f7c:	dfc00117 	ldw	ra,4(sp)
    6f80:	dc000017 	ldw	r16,0(sp)
    6f84:	dec00204 	addi	sp,sp,8
    6f88:	f800283a 	ret
    6f8c:	202090fa 	slli	r16,r4,3
    6f90:	00800074 	movhi	r2,1
    6f94:	10bf2404 	addi	r2,r2,-880
    6f98:	1421883a 	add	r16,r2,r16
    6f9c:	80800017 	ldw	r2,0(r16)
    6fa0:	80c00117 	ldw	r3,4(r16)
    6fa4:	dfc00117 	ldw	ra,4(sp)
    6fa8:	dc000017 	ldw	r16,0(sp)
    6fac:	dec00204 	addi	sp,sp,8
    6fb0:	f800283a 	ret

00006fb4 <__copybits>:
    6fb4:	297fffc4 	addi	r5,r5,-1
    6fb8:	280fd17a 	srai	r7,r5,5
    6fbc:	30c00417 	ldw	r3,16(r6)
    6fc0:	30800504 	addi	r2,r6,20
    6fc4:	39c00044 	addi	r7,r7,1
    6fc8:	18c7883a 	add	r3,r3,r3
    6fcc:	39cf883a 	add	r7,r7,r7
    6fd0:	18c7883a 	add	r3,r3,r3
    6fd4:	39cf883a 	add	r7,r7,r7
    6fd8:	10c7883a 	add	r3,r2,r3
    6fdc:	21cf883a 	add	r7,r4,r7
    6fe0:	10c00d2e 	bgeu	r2,r3,7018 <__copybits+0x64>
    6fe4:	200b883a 	mov	r5,r4
    6fe8:	12000017 	ldw	r8,0(r2)
    6fec:	29400104 	addi	r5,r5,4
    6ff0:	10800104 	addi	r2,r2,4
    6ff4:	2a3fff15 	stw	r8,-4(r5)
    6ff8:	10fffb36 	bltu	r2,r3,6fe8 <__alt_exception_stack_pointer+0xf8006fe8>
    6ffc:	1985c83a 	sub	r2,r3,r6
    7000:	10bffac4 	addi	r2,r2,-21
    7004:	1004d0ba 	srli	r2,r2,2
    7008:	10800044 	addi	r2,r2,1
    700c:	1085883a 	add	r2,r2,r2
    7010:	1085883a 	add	r2,r2,r2
    7014:	2089883a 	add	r4,r4,r2
    7018:	21c0032e 	bgeu	r4,r7,7028 <__copybits+0x74>
    701c:	20000015 	stw	zero,0(r4)
    7020:	21000104 	addi	r4,r4,4
    7024:	21fffd36 	bltu	r4,r7,701c <__alt_exception_stack_pointer+0xf800701c>
    7028:	f800283a 	ret

0000702c <__any_on>:
    702c:	20c00417 	ldw	r3,16(r4)
    7030:	2805d17a 	srai	r2,r5,5
    7034:	21000504 	addi	r4,r4,20
    7038:	18800d0e 	bge	r3,r2,7070 <__any_on+0x44>
    703c:	18c7883a 	add	r3,r3,r3
    7040:	18c7883a 	add	r3,r3,r3
    7044:	20c7883a 	add	r3,r4,r3
    7048:	20c0192e 	bgeu	r4,r3,70b0 <__any_on+0x84>
    704c:	18bfff17 	ldw	r2,-4(r3)
    7050:	18ffff04 	addi	r3,r3,-4
    7054:	1000041e 	bne	r2,zero,7068 <__any_on+0x3c>
    7058:	20c0142e 	bgeu	r4,r3,70ac <__any_on+0x80>
    705c:	18ffff04 	addi	r3,r3,-4
    7060:	19400017 	ldw	r5,0(r3)
    7064:	283ffc26 	beq	r5,zero,7058 <__alt_exception_stack_pointer+0xf8007058>
    7068:	00800044 	movi	r2,1
    706c:	f800283a 	ret
    7070:	10c00a0e 	bge	r2,r3,709c <__any_on+0x70>
    7074:	1085883a 	add	r2,r2,r2
    7078:	1085883a 	add	r2,r2,r2
    707c:	294007cc 	andi	r5,r5,31
    7080:	2087883a 	add	r3,r4,r2
    7084:	283ff026 	beq	r5,zero,7048 <__alt_exception_stack_pointer+0xf8007048>
    7088:	19800017 	ldw	r6,0(r3)
    708c:	3144d83a 	srl	r2,r6,r5
    7090:	114a983a 	sll	r5,r2,r5
    7094:	317ff41e 	bne	r6,r5,7068 <__alt_exception_stack_pointer+0xf8007068>
    7098:	003feb06 	br	7048 <__alt_exception_stack_pointer+0xf8007048>
    709c:	1085883a 	add	r2,r2,r2
    70a0:	1085883a 	add	r2,r2,r2
    70a4:	2087883a 	add	r3,r4,r2
    70a8:	003fe706 	br	7048 <__alt_exception_stack_pointer+0xf8007048>
    70ac:	f800283a 	ret
    70b0:	0005883a 	mov	r2,zero
    70b4:	f800283a 	ret

000070b8 <__fpclassifyd>:
    70b8:	00a00034 	movhi	r2,32768
    70bc:	10bfffc4 	addi	r2,r2,-1
    70c0:	2884703a 	and	r2,r5,r2
    70c4:	10000726 	beq	r2,zero,70e4 <__fpclassifyd+0x2c>
    70c8:	00fffc34 	movhi	r3,65520
    70cc:	019ff834 	movhi	r6,32736
    70d0:	28c7883a 	add	r3,r5,r3
    70d4:	31bfffc4 	addi	r6,r6,-1
    70d8:	30c00536 	bltu	r6,r3,70f0 <__fpclassifyd+0x38>
    70dc:	00800104 	movi	r2,4
    70e0:	f800283a 	ret
    70e4:	2000021e 	bne	r4,zero,70f0 <__fpclassifyd+0x38>
    70e8:	00800084 	movi	r2,2
    70ec:	f800283a 	ret
    70f0:	00dffc34 	movhi	r3,32752
    70f4:	019ff834 	movhi	r6,32736
    70f8:	28cb883a 	add	r5,r5,r3
    70fc:	31bfffc4 	addi	r6,r6,-1
    7100:	317ff62e 	bgeu	r6,r5,70dc <__alt_exception_stack_pointer+0xf80070dc>
    7104:	01400434 	movhi	r5,16
    7108:	297fffc4 	addi	r5,r5,-1
    710c:	28800236 	bltu	r5,r2,7118 <__fpclassifyd+0x60>
    7110:	008000c4 	movi	r2,3
    7114:	f800283a 	ret
    7118:	10c00226 	beq	r2,r3,7124 <__fpclassifyd+0x6c>
    711c:	0005883a 	mov	r2,zero
    7120:	f800283a 	ret
    7124:	2005003a 	cmpeq	r2,r4,zero
    7128:	f800283a 	ret

0000712c <__sread>:
    712c:	defffe04 	addi	sp,sp,-8
    7130:	dc000015 	stw	r16,0(sp)
    7134:	2821883a 	mov	r16,r5
    7138:	2940038f 	ldh	r5,14(r5)
    713c:	dfc00115 	stw	ra,4(sp)
    7140:	00096a40 	call	96a4 <_read_r>
    7144:	10000716 	blt	r2,zero,7164 <__sread+0x38>
    7148:	80c01417 	ldw	r3,80(r16)
    714c:	1887883a 	add	r3,r3,r2
    7150:	80c01415 	stw	r3,80(r16)
    7154:	dfc00117 	ldw	ra,4(sp)
    7158:	dc000017 	ldw	r16,0(sp)
    715c:	dec00204 	addi	sp,sp,8
    7160:	f800283a 	ret
    7164:	80c0030b 	ldhu	r3,12(r16)
    7168:	18fbffcc 	andi	r3,r3,61439
    716c:	80c0030d 	sth	r3,12(r16)
    7170:	dfc00117 	ldw	ra,4(sp)
    7174:	dc000017 	ldw	r16,0(sp)
    7178:	dec00204 	addi	sp,sp,8
    717c:	f800283a 	ret

00007180 <__seofread>:
    7180:	0005883a 	mov	r2,zero
    7184:	f800283a 	ret

00007188 <__swrite>:
    7188:	2880030b 	ldhu	r2,12(r5)
    718c:	defffb04 	addi	sp,sp,-20
    7190:	dcc00315 	stw	r19,12(sp)
    7194:	dc800215 	stw	r18,8(sp)
    7198:	dc400115 	stw	r17,4(sp)
    719c:	dc000015 	stw	r16,0(sp)
    71a0:	dfc00415 	stw	ra,16(sp)
    71a4:	10c0400c 	andi	r3,r2,256
    71a8:	2821883a 	mov	r16,r5
    71ac:	2023883a 	mov	r17,r4
    71b0:	3025883a 	mov	r18,r6
    71b4:	3827883a 	mov	r19,r7
    71b8:	18000526 	beq	r3,zero,71d0 <__swrite+0x48>
    71bc:	2940038f 	ldh	r5,14(r5)
    71c0:	01c00084 	movi	r7,2
    71c4:	000d883a 	mov	r6,zero
    71c8:	00094e80 	call	94e8 <_lseek_r>
    71cc:	8080030b 	ldhu	r2,12(r16)
    71d0:	8140038f 	ldh	r5,14(r16)
    71d4:	10bbffcc 	andi	r2,r2,61439
    71d8:	980f883a 	mov	r7,r19
    71dc:	900d883a 	mov	r6,r18
    71e0:	8809883a 	mov	r4,r17
    71e4:	8080030d 	sth	r2,12(r16)
    71e8:	dfc00417 	ldw	ra,16(sp)
    71ec:	dcc00317 	ldw	r19,12(sp)
    71f0:	dc800217 	ldw	r18,8(sp)
    71f4:	dc400117 	ldw	r17,4(sp)
    71f8:	dc000017 	ldw	r16,0(sp)
    71fc:	dec00504 	addi	sp,sp,20
    7200:	0008ad41 	jmpi	8ad4 <_write_r>

00007204 <__sseek>:
    7204:	defffe04 	addi	sp,sp,-8
    7208:	dc000015 	stw	r16,0(sp)
    720c:	2821883a 	mov	r16,r5
    7210:	2940038f 	ldh	r5,14(r5)
    7214:	dfc00115 	stw	ra,4(sp)
    7218:	00094e80 	call	94e8 <_lseek_r>
    721c:	00ffffc4 	movi	r3,-1
    7220:	10c00826 	beq	r2,r3,7244 <__sseek+0x40>
    7224:	80c0030b 	ldhu	r3,12(r16)
    7228:	80801415 	stw	r2,80(r16)
    722c:	18c40014 	ori	r3,r3,4096
    7230:	80c0030d 	sth	r3,12(r16)
    7234:	dfc00117 	ldw	ra,4(sp)
    7238:	dc000017 	ldw	r16,0(sp)
    723c:	dec00204 	addi	sp,sp,8
    7240:	f800283a 	ret
    7244:	80c0030b 	ldhu	r3,12(r16)
    7248:	18fbffcc 	andi	r3,r3,61439
    724c:	80c0030d 	sth	r3,12(r16)
    7250:	dfc00117 	ldw	ra,4(sp)
    7254:	dc000017 	ldw	r16,0(sp)
    7258:	dec00204 	addi	sp,sp,8
    725c:	f800283a 	ret

00007260 <__sclose>:
    7260:	2940038f 	ldh	r5,14(r5)
    7264:	0008b341 	jmpi	8b34 <_close_r>

00007268 <strcmp>:
    7268:	2144b03a 	or	r2,r4,r5
    726c:	108000cc 	andi	r2,r2,3
    7270:	1000171e 	bne	r2,zero,72d0 <strcmp+0x68>
    7274:	20800017 	ldw	r2,0(r4)
    7278:	28c00017 	ldw	r3,0(r5)
    727c:	10c0141e 	bne	r2,r3,72d0 <strcmp+0x68>
    7280:	027fbff4 	movhi	r9,65279
    7284:	4a7fbfc4 	addi	r9,r9,-257
    7288:	0086303a 	nor	r3,zero,r2
    728c:	02202074 	movhi	r8,32897
    7290:	1245883a 	add	r2,r2,r9
    7294:	42202004 	addi	r8,r8,-32640
    7298:	10c4703a 	and	r2,r2,r3
    729c:	1204703a 	and	r2,r2,r8
    72a0:	10000226 	beq	r2,zero,72ac <strcmp+0x44>
    72a4:	00002306 	br	7334 <strcmp+0xcc>
    72a8:	1000221e 	bne	r2,zero,7334 <strcmp+0xcc>
    72ac:	21000104 	addi	r4,r4,4
    72b0:	20c00017 	ldw	r3,0(r4)
    72b4:	29400104 	addi	r5,r5,4
    72b8:	29800017 	ldw	r6,0(r5)
    72bc:	1a4f883a 	add	r7,r3,r9
    72c0:	00c4303a 	nor	r2,zero,r3
    72c4:	3884703a 	and	r2,r7,r2
    72c8:	1204703a 	and	r2,r2,r8
    72cc:	19bff626 	beq	r3,r6,72a8 <__alt_exception_stack_pointer+0xf80072a8>
    72d0:	20800003 	ldbu	r2,0(r4)
    72d4:	10c03fcc 	andi	r3,r2,255
    72d8:	18c0201c 	xori	r3,r3,128
    72dc:	18ffe004 	addi	r3,r3,-128
    72e0:	18000c26 	beq	r3,zero,7314 <strcmp+0xac>
    72e4:	29800007 	ldb	r6,0(r5)
    72e8:	19800326 	beq	r3,r6,72f8 <strcmp+0x90>
    72ec:	00001306 	br	733c <strcmp+0xd4>
    72f0:	29800007 	ldb	r6,0(r5)
    72f4:	11800b1e 	bne	r2,r6,7324 <strcmp+0xbc>
    72f8:	21000044 	addi	r4,r4,1
    72fc:	20c00003 	ldbu	r3,0(r4)
    7300:	29400044 	addi	r5,r5,1
    7304:	18803fcc 	andi	r2,r3,255
    7308:	1080201c 	xori	r2,r2,128
    730c:	10bfe004 	addi	r2,r2,-128
    7310:	103ff71e 	bne	r2,zero,72f0 <__alt_exception_stack_pointer+0xf80072f0>
    7314:	0007883a 	mov	r3,zero
    7318:	28800003 	ldbu	r2,0(r5)
    731c:	1885c83a 	sub	r2,r3,r2
    7320:	f800283a 	ret
    7324:	28800003 	ldbu	r2,0(r5)
    7328:	18c03fcc 	andi	r3,r3,255
    732c:	1885c83a 	sub	r2,r3,r2
    7330:	f800283a 	ret
    7334:	0005883a 	mov	r2,zero
    7338:	f800283a 	ret
    733c:	10c03fcc 	andi	r3,r2,255
    7340:	003ff506 	br	7318 <__alt_exception_stack_pointer+0xf8007318>

00007344 <strlen>:
    7344:	208000cc 	andi	r2,r4,3
    7348:	10002026 	beq	r2,zero,73cc <strlen+0x88>
    734c:	20800007 	ldb	r2,0(r4)
    7350:	10002026 	beq	r2,zero,73d4 <strlen+0x90>
    7354:	2005883a 	mov	r2,r4
    7358:	00000206 	br	7364 <strlen+0x20>
    735c:	10c00007 	ldb	r3,0(r2)
    7360:	18001826 	beq	r3,zero,73c4 <strlen+0x80>
    7364:	10800044 	addi	r2,r2,1
    7368:	10c000cc 	andi	r3,r2,3
    736c:	183ffb1e 	bne	r3,zero,735c <__alt_exception_stack_pointer+0xf800735c>
    7370:	10c00017 	ldw	r3,0(r2)
    7374:	01ffbff4 	movhi	r7,65279
    7378:	39ffbfc4 	addi	r7,r7,-257
    737c:	00ca303a 	nor	r5,zero,r3
    7380:	01a02074 	movhi	r6,32897
    7384:	19c7883a 	add	r3,r3,r7
    7388:	31a02004 	addi	r6,r6,-32640
    738c:	1946703a 	and	r3,r3,r5
    7390:	1986703a 	and	r3,r3,r6
    7394:	1800091e 	bne	r3,zero,73bc <strlen+0x78>
    7398:	10800104 	addi	r2,r2,4
    739c:	10c00017 	ldw	r3,0(r2)
    73a0:	19cb883a 	add	r5,r3,r7
    73a4:	00c6303a 	nor	r3,zero,r3
    73a8:	28c6703a 	and	r3,r5,r3
    73ac:	1986703a 	and	r3,r3,r6
    73b0:	183ff926 	beq	r3,zero,7398 <__alt_exception_stack_pointer+0xf8007398>
    73b4:	00000106 	br	73bc <strlen+0x78>
    73b8:	10800044 	addi	r2,r2,1
    73bc:	10c00007 	ldb	r3,0(r2)
    73c0:	183ffd1e 	bne	r3,zero,73b8 <__alt_exception_stack_pointer+0xf80073b8>
    73c4:	1105c83a 	sub	r2,r2,r4
    73c8:	f800283a 	ret
    73cc:	2005883a 	mov	r2,r4
    73d0:	003fe706 	br	7370 <__alt_exception_stack_pointer+0xf8007370>
    73d4:	0005883a 	mov	r2,zero
    73d8:	f800283a 	ret

000073dc <__sprint_r.part.0>:
    73dc:	28801917 	ldw	r2,100(r5)
    73e0:	defff604 	addi	sp,sp,-40
    73e4:	dd400515 	stw	r21,20(sp)
    73e8:	dfc00915 	stw	ra,36(sp)
    73ec:	df000815 	stw	fp,32(sp)
    73f0:	ddc00715 	stw	r23,28(sp)
    73f4:	dd800615 	stw	r22,24(sp)
    73f8:	dd000415 	stw	r20,16(sp)
    73fc:	dcc00315 	stw	r19,12(sp)
    7400:	dc800215 	stw	r18,8(sp)
    7404:	dc400115 	stw	r17,4(sp)
    7408:	dc000015 	stw	r16,0(sp)
    740c:	1088000c 	andi	r2,r2,8192
    7410:	302b883a 	mov	r21,r6
    7414:	10002e26 	beq	r2,zero,74d0 <__sprint_r.part.0+0xf4>
    7418:	30800217 	ldw	r2,8(r6)
    741c:	35800017 	ldw	r22,0(r6)
    7420:	10002926 	beq	r2,zero,74c8 <__sprint_r.part.0+0xec>
    7424:	2827883a 	mov	r19,r5
    7428:	2029883a 	mov	r20,r4
    742c:	b5c00104 	addi	r23,r22,4
    7430:	04bfffc4 	movi	r18,-1
    7434:	bc400017 	ldw	r17,0(r23)
    7438:	b4000017 	ldw	r16,0(r22)
    743c:	0039883a 	mov	fp,zero
    7440:	8822d0ba 	srli	r17,r17,2
    7444:	8800031e 	bne	r17,zero,7454 <__sprint_r.part.0+0x78>
    7448:	00001806 	br	74ac <__sprint_r.part.0+0xd0>
    744c:	84000104 	addi	r16,r16,4
    7450:	8f001526 	beq	r17,fp,74a8 <__sprint_r.part.0+0xcc>
    7454:	81400017 	ldw	r5,0(r16)
    7458:	980d883a 	mov	r6,r19
    745c:	a009883a 	mov	r4,r20
    7460:	0008ecc0 	call	8ecc <_fputwc_r>
    7464:	e7000044 	addi	fp,fp,1
    7468:	14bff81e 	bne	r2,r18,744c <__alt_exception_stack_pointer+0xf800744c>
    746c:	9005883a 	mov	r2,r18
    7470:	a8000215 	stw	zero,8(r21)
    7474:	a8000115 	stw	zero,4(r21)
    7478:	dfc00917 	ldw	ra,36(sp)
    747c:	df000817 	ldw	fp,32(sp)
    7480:	ddc00717 	ldw	r23,28(sp)
    7484:	dd800617 	ldw	r22,24(sp)
    7488:	dd400517 	ldw	r21,20(sp)
    748c:	dd000417 	ldw	r20,16(sp)
    7490:	dcc00317 	ldw	r19,12(sp)
    7494:	dc800217 	ldw	r18,8(sp)
    7498:	dc400117 	ldw	r17,4(sp)
    749c:	dc000017 	ldw	r16,0(sp)
    74a0:	dec00a04 	addi	sp,sp,40
    74a4:	f800283a 	ret
    74a8:	a8800217 	ldw	r2,8(r21)
    74ac:	8c63883a 	add	r17,r17,r17
    74b0:	8c63883a 	add	r17,r17,r17
    74b4:	1445c83a 	sub	r2,r2,r17
    74b8:	a8800215 	stw	r2,8(r21)
    74bc:	b5800204 	addi	r22,r22,8
    74c0:	bdc00204 	addi	r23,r23,8
    74c4:	103fdb1e 	bne	r2,zero,7434 <__alt_exception_stack_pointer+0xf8007434>
    74c8:	0005883a 	mov	r2,zero
    74cc:	003fe806 	br	7470 <__alt_exception_stack_pointer+0xf8007470>
    74d0:	0008fcc0 	call	8fcc <__sfvwrite_r>
    74d4:	003fe606 	br	7470 <__alt_exception_stack_pointer+0xf8007470>

000074d8 <__sprint_r>:
    74d8:	30c00217 	ldw	r3,8(r6)
    74dc:	18000126 	beq	r3,zero,74e4 <__sprint_r+0xc>
    74e0:	00073dc1 	jmpi	73dc <__sprint_r.part.0>
    74e4:	30000115 	stw	zero,4(r6)
    74e8:	0005883a 	mov	r2,zero
    74ec:	f800283a 	ret

000074f0 <___vfiprintf_internal_r>:
    74f0:	deffca04 	addi	sp,sp,-216
    74f4:	dd403115 	stw	r21,196(sp)
    74f8:	dfc03515 	stw	ra,212(sp)
    74fc:	df003415 	stw	fp,208(sp)
    7500:	ddc03315 	stw	r23,204(sp)
    7504:	dd803215 	stw	r22,200(sp)
    7508:	dd003015 	stw	r20,192(sp)
    750c:	dcc02f15 	stw	r19,188(sp)
    7510:	dc802e15 	stw	r18,184(sp)
    7514:	dc402d15 	stw	r17,180(sp)
    7518:	dc002c15 	stw	r16,176(sp)
    751c:	d9002115 	stw	r4,132(sp)
    7520:	d9402015 	stw	r5,128(sp)
    7524:	d9c02215 	stw	r7,136(sp)
    7528:	302b883a 	mov	r21,r6
    752c:	20000226 	beq	r4,zero,7538 <___vfiprintf_internal_r+0x48>
    7530:	20800e17 	ldw	r2,56(r4)
    7534:	1000cf26 	beq	r2,zero,7874 <___vfiprintf_internal_r+0x384>
    7538:	d8c02017 	ldw	r3,128(sp)
    753c:	1880030b 	ldhu	r2,12(r3)
    7540:	10c8000c 	andi	r3,r2,8192
    7544:	1800071e 	bne	r3,zero,7564 <___vfiprintf_internal_r+0x74>
    7548:	d9402017 	ldw	r5,128(sp)
    754c:	00f7ffc4 	movi	r3,-8193
    7550:	10880014 	ori	r2,r2,8192
    7554:	29001917 	ldw	r4,100(r5)
    7558:	2880030d 	sth	r2,12(r5)
    755c:	20c6703a 	and	r3,r4,r3
    7560:	28c01915 	stw	r3,100(r5)
    7564:	10c0020c 	andi	r3,r2,8
    7568:	1800a526 	beq	r3,zero,7800 <___vfiprintf_internal_r+0x310>
    756c:	d9002017 	ldw	r4,128(sp)
    7570:	20c00417 	ldw	r3,16(r4)
    7574:	1800a226 	beq	r3,zero,7800 <___vfiprintf_internal_r+0x310>
    7578:	1080068c 	andi	r2,r2,26
    757c:	00c00284 	movi	r3,10
    7580:	10c0a826 	beq	r2,r3,7824 <___vfiprintf_internal_r+0x334>
    7584:	d9001a04 	addi	r4,sp,104
    7588:	d94019c4 	addi	r5,sp,103
    758c:	04800074 	movhi	r18,1
    7590:	2145c83a 	sub	r2,r4,r5
    7594:	94bf5604 	addi	r18,r18,-680
    7598:	d9001e15 	stw	r4,120(sp)
    759c:	d9401f15 	stw	r5,124(sp)
    75a0:	dec01a15 	stw	sp,104(sp)
    75a4:	d8001c15 	stw	zero,112(sp)
    75a8:	d8001b15 	stw	zero,108(sp)
    75ac:	d811883a 	mov	r8,sp
    75b0:	d8002615 	stw	zero,152(sp)
    75b4:	d8002415 	stw	zero,144(sp)
    75b8:	d8802815 	stw	r2,160(sp)
    75bc:	a82d883a 	mov	r22,r21
    75c0:	b0800007 	ldb	r2,0(r22)
    75c4:	10040d26 	beq	r2,zero,85fc <___vfiprintf_internal_r+0x110c>
    75c8:	00c00944 	movi	r3,37
    75cc:	b029883a 	mov	r20,r22
    75d0:	10c0021e 	bne	r2,r3,75dc <___vfiprintf_internal_r+0xec>
    75d4:	00001606 	br	7630 <___vfiprintf_internal_r+0x140>
    75d8:	10c00326 	beq	r2,r3,75e8 <___vfiprintf_internal_r+0xf8>
    75dc:	a5000044 	addi	r20,r20,1
    75e0:	a0800007 	ldb	r2,0(r20)
    75e4:	103ffc1e 	bne	r2,zero,75d8 <__alt_exception_stack_pointer+0xf80075d8>
    75e8:	a5a1c83a 	sub	r16,r20,r22
    75ec:	80001026 	beq	r16,zero,7630 <___vfiprintf_internal_r+0x140>
    75f0:	d8c01c17 	ldw	r3,112(sp)
    75f4:	d8801b17 	ldw	r2,108(sp)
    75f8:	45800015 	stw	r22,0(r8)
    75fc:	80c7883a 	add	r3,r16,r3
    7600:	10800044 	addi	r2,r2,1
    7604:	44000115 	stw	r16,4(r8)
    7608:	d8c01c15 	stw	r3,112(sp)
    760c:	d8801b15 	stw	r2,108(sp)
    7610:	010001c4 	movi	r4,7
    7614:	2080750e 	bge	r4,r2,77ec <___vfiprintf_internal_r+0x2fc>
    7618:	1803951e 	bne	r3,zero,8470 <___vfiprintf_internal_r+0xf80>
    761c:	d8c02417 	ldw	r3,144(sp)
    7620:	d8001b15 	stw	zero,108(sp)
    7624:	d811883a 	mov	r8,sp
    7628:	1c07883a 	add	r3,r3,r16
    762c:	d8c02415 	stw	r3,144(sp)
    7630:	a0800007 	ldb	r2,0(r20)
    7634:	1002e026 	beq	r2,zero,81b8 <___vfiprintf_internal_r+0xcc8>
    7638:	a5800044 	addi	r22,r20,1
    763c:	a0c00047 	ldb	r3,1(r20)
    7640:	d8001d85 	stb	zero,118(sp)
    7644:	0027883a 	mov	r19,zero
    7648:	d8002305 	stb	zero,140(sp)
    764c:	043fffc4 	movi	r16,-1
    7650:	d8002515 	stw	zero,148(sp)
    7654:	0023883a 	mov	r17,zero
    7658:	05001604 	movi	r20,88
    765c:	05400244 	movi	r21,9
    7660:	402f883a 	mov	r23,r8
    7664:	b5800044 	addi	r22,r22,1
    7668:	18bff804 	addi	r2,r3,-32
    766c:	a0827736 	bltu	r20,r2,804c <___vfiprintf_internal_r+0xb5c>
    7670:	100490ba 	slli	r2,r2,2
    7674:	01000034 	movhi	r4,0
    7678:	211da204 	addi	r4,r4,30344
    767c:	1105883a 	add	r2,r2,r4
    7680:	10800017 	ldw	r2,0(r2)
    7684:	1000683a 	jmp	r2
    7688:	00007d4c 	andi	zero,zero,501
    768c:	0000804c 	andi	zero,zero,513
    7690:	0000804c 	andi	zero,zero,513
    7694:	00007d68 	cmpgeui	zero,zero,501
    7698:	0000804c 	andi	zero,zero,513
    769c:	0000804c 	andi	zero,zero,513
    76a0:	0000804c 	andi	zero,zero,513
    76a4:	0000804c 	andi	zero,zero,513
    76a8:	0000804c 	andi	zero,zero,513
    76ac:	0000804c 	andi	zero,zero,513
    76b0:	00007f70 	cmpltui	zero,zero,509
    76b4:	00007f94 	movui	zero,510
    76b8:	0000804c 	andi	zero,zero,513
    76bc:	0000788c 	andi	zero,zero,482
    76c0:	00007fa8 	cmpgeui	zero,zero,510
    76c4:	0000804c 	andi	zero,zero,513
    76c8:	00007d74 	movhi	zero,501
    76cc:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76d0:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76d4:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76d8:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76dc:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76e0:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76e4:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76e8:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76ec:	00007d80 	call	7d8 <_malloc_r+0x5c>
    76f0:	0000804c 	andi	zero,zero,513
    76f4:	0000804c 	andi	zero,zero,513
    76f8:	0000804c 	andi	zero,zero,513
    76fc:	0000804c 	andi	zero,zero,513
    7700:	0000804c 	andi	zero,zero,513
    7704:	0000804c 	andi	zero,zero,513
    7708:	0000804c 	andi	zero,zero,513
    770c:	0000804c 	andi	zero,zero,513
    7710:	0000804c 	andi	zero,zero,513
    7714:	0000804c 	andi	zero,zero,513
    7718:	00007dc0 	call	7dc <_malloc_r+0x60>
    771c:	0000804c 	andi	zero,zero,513
    7720:	0000804c 	andi	zero,zero,513
    7724:	0000804c 	andi	zero,zero,513
    7728:	0000804c 	andi	zero,zero,513
    772c:	0000804c 	andi	zero,zero,513
    7730:	0000804c 	andi	zero,zero,513
    7734:	0000804c 	andi	zero,zero,513
    7738:	0000804c 	andi	zero,zero,513
    773c:	0000804c 	andi	zero,zero,513
    7740:	0000804c 	andi	zero,zero,513
    7744:	00007dfc 	xorhi	zero,zero,503
    7748:	0000804c 	andi	zero,zero,513
    774c:	0000804c 	andi	zero,zero,513
    7750:	0000804c 	andi	zero,zero,513
    7754:	0000804c 	andi	zero,zero,513
    7758:	0000804c 	andi	zero,zero,513
    775c:	00007e58 	cmpnei	zero,zero,505
    7760:	0000804c 	andi	zero,zero,513
    7764:	0000804c 	andi	zero,zero,513
    7768:	00007ecc 	andi	zero,zero,507
    776c:	0000804c 	andi	zero,zero,513
    7770:	0000804c 	andi	zero,zero,513
    7774:	0000804c 	andi	zero,zero,513
    7778:	0000804c 	andi	zero,zero,513
    777c:	0000804c 	andi	zero,zero,513
    7780:	0000804c 	andi	zero,zero,513
    7784:	0000804c 	andi	zero,zero,513
    7788:	0000804c 	andi	zero,zero,513
    778c:	0000804c 	andi	zero,zero,513
    7790:	0000804c 	andi	zero,zero,513
    7794:	00007c74 	movhi	zero,497
    7798:	00007ca4 	muli	zero,zero,498
    779c:	0000804c 	andi	zero,zero,513
    77a0:	0000804c 	andi	zero,zero,513
    77a4:	0000804c 	andi	zero,zero,513
    77a8:	00007ff4 	movhi	zero,511
    77ac:	00007ca4 	muli	zero,zero,498
    77b0:	0000804c 	andi	zero,zero,513
    77b4:	0000804c 	andi	zero,zero,513
    77b8:	00007b4c 	andi	zero,zero,493
    77bc:	0000804c 	andi	zero,zero,513
    77c0:	00007b60 	cmpeqi	zero,zero,493
    77c4:	00007b98 	cmpnei	zero,zero,494
    77c8:	00007898 	cmpnei	zero,zero,482
    77cc:	00007b40 	call	7b4 <_malloc_r+0x38>
    77d0:	0000804c 	andi	zero,zero,513
    77d4:	00007f0c 	andi	zero,zero,508
    77d8:	0000804c 	andi	zero,zero,513
    77dc:	00007f58 	cmpnei	zero,zero,509
    77e0:	0000804c 	andi	zero,zero,513
    77e4:	0000804c 	andi	zero,zero,513
    77e8:	00007c1c 	xori	zero,zero,496
    77ec:	42000204 	addi	r8,r8,8
    77f0:	d8c02417 	ldw	r3,144(sp)
    77f4:	1c07883a 	add	r3,r3,r16
    77f8:	d8c02415 	stw	r3,144(sp)
    77fc:	003f8c06 	br	7630 <__alt_exception_stack_pointer+0xf8007630>
    7800:	d9402017 	ldw	r5,128(sp)
    7804:	d9002117 	ldw	r4,132(sp)
    7808:	00033fc0 	call	33fc <__swsetup_r>
    780c:	1003c11e 	bne	r2,zero,8714 <___vfiprintf_internal_r+0x1224>
    7810:	d9402017 	ldw	r5,128(sp)
    7814:	00c00284 	movi	r3,10
    7818:	2880030b 	ldhu	r2,12(r5)
    781c:	1080068c 	andi	r2,r2,26
    7820:	10ff581e 	bne	r2,r3,7584 <__alt_exception_stack_pointer+0xf8007584>
    7824:	d8c02017 	ldw	r3,128(sp)
    7828:	1880038f 	ldh	r2,14(r3)
    782c:	103f5516 	blt	r2,zero,7584 <__alt_exception_stack_pointer+0xf8007584>
    7830:	d9c02217 	ldw	r7,136(sp)
    7834:	d9002117 	ldw	r4,132(sp)
    7838:	a80d883a 	mov	r6,r21
    783c:	180b883a 	mov	r5,r3
    7840:	0008a180 	call	8a18 <__sbprintf>
    7844:	dfc03517 	ldw	ra,212(sp)
    7848:	df003417 	ldw	fp,208(sp)
    784c:	ddc03317 	ldw	r23,204(sp)
    7850:	dd803217 	ldw	r22,200(sp)
    7854:	dd403117 	ldw	r21,196(sp)
    7858:	dd003017 	ldw	r20,192(sp)
    785c:	dcc02f17 	ldw	r19,188(sp)
    7860:	dc802e17 	ldw	r18,184(sp)
    7864:	dc402d17 	ldw	r17,180(sp)
    7868:	dc002c17 	ldw	r16,176(sp)
    786c:	dec03604 	addi	sp,sp,216
    7870:	f800283a 	ret
    7874:	00054080 	call	5408 <__sinit>
    7878:	003f2f06 	br	7538 <__alt_exception_stack_pointer+0xf8007538>
    787c:	d8c02517 	ldw	r3,148(sp)
    7880:	d8802215 	stw	r2,136(sp)
    7884:	00c7c83a 	sub	r3,zero,r3
    7888:	d8c02515 	stw	r3,148(sp)
    788c:	8c400114 	ori	r17,r17,4
    7890:	b0c00007 	ldb	r3,0(r22)
    7894:	003f7306 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7898:	00800c04 	movi	r2,48
    789c:	d9402217 	ldw	r5,136(sp)
    78a0:	d8801d05 	stb	r2,116(sp)
    78a4:	00801e04 	movi	r2,120
    78a8:	d8801d45 	stb	r2,117(sp)
    78ac:	d8001d85 	stb	zero,118(sp)
    78b0:	b811883a 	mov	r8,r23
    78b4:	28c00104 	addi	r3,r5,4
    78b8:	2cc00017 	ldw	r19,0(r5)
    78bc:	0029883a 	mov	r20,zero
    78c0:	88800094 	ori	r2,r17,2
    78c4:	80032516 	blt	r16,zero,855c <___vfiprintf_internal_r+0x106c>
    78c8:	00bfdfc4 	movi	r2,-129
    78cc:	88a2703a 	and	r17,r17,r2
    78d0:	d8c02215 	stw	r3,136(sp)
    78d4:	8c400094 	ori	r17,r17,2
    78d8:	98032a1e 	bne	r19,zero,8584 <___vfiprintf_internal_r+0x1094>
    78dc:	00800074 	movhi	r2,1
    78e0:	10bef504 	addi	r2,r2,-1068
    78e4:	d8802615 	stw	r2,152(sp)
    78e8:	002b883a 	mov	r21,zero
    78ec:	8001741e 	bne	r16,zero,7ec0 <___vfiprintf_internal_r+0x9d0>
    78f0:	0021883a 	mov	r16,zero
    78f4:	0029883a 	mov	r20,zero
    78f8:	ddc01a04 	addi	r23,sp,104
    78fc:	8027883a 	mov	r19,r16
    7900:	8500010e 	bge	r16,r20,7908 <___vfiprintf_internal_r+0x418>
    7904:	a027883a 	mov	r19,r20
    7908:	ad403fcc 	andi	r21,r21,255
    790c:	ad40201c 	xori	r21,r21,128
    7910:	ad7fe004 	addi	r21,r21,-128
    7914:	a8000126 	beq	r21,zero,791c <___vfiprintf_internal_r+0x42c>
    7918:	9cc00044 	addi	r19,r19,1
    791c:	89c0008c 	andi	r7,r17,2
    7920:	38000126 	beq	r7,zero,7928 <___vfiprintf_internal_r+0x438>
    7924:	9cc00084 	addi	r19,r19,2
    7928:	88c0210c 	andi	r3,r17,132
    792c:	1801dd1e 	bne	r3,zero,80a4 <___vfiprintf_internal_r+0xbb4>
    7930:	d9402517 	ldw	r5,148(sp)
    7934:	2cebc83a 	sub	r21,r5,r19
    7938:	0541da0e 	bge	zero,r21,80a4 <___vfiprintf_internal_r+0xbb4>
    793c:	07000404 	movi	fp,16
    7940:	d8801c17 	ldw	r2,112(sp)
    7944:	e543be0e 	bge	fp,r21,8840 <___vfiprintf_internal_r+0x1350>
    7948:	01400074 	movhi	r5,1
    794c:	297f5a04 	addi	r5,r5,-664
    7950:	dc002715 	stw	r16,156(sp)
    7954:	d9801b17 	ldw	r6,108(sp)
    7958:	a821883a 	mov	r16,r21
    795c:	d9402315 	stw	r5,140(sp)
    7960:	028001c4 	movi	r10,7
    7964:	d9c02915 	stw	r7,164(sp)
    7968:	182b883a 	mov	r21,r3
    796c:	00000506 	br	7984 <___vfiprintf_internal_r+0x494>
    7970:	31000084 	addi	r4,r6,2
    7974:	42000204 	addi	r8,r8,8
    7978:	180d883a 	mov	r6,r3
    797c:	843ffc04 	addi	r16,r16,-16
    7980:	e4000f0e 	bge	fp,r16,79c0 <___vfiprintf_internal_r+0x4d0>
    7984:	01000074 	movhi	r4,1
    7988:	10800404 	addi	r2,r2,16
    798c:	30c00044 	addi	r3,r6,1
    7990:	213f5a04 	addi	r4,r4,-664
    7994:	41000015 	stw	r4,0(r8)
    7998:	47000115 	stw	fp,4(r8)
    799c:	d8801c15 	stw	r2,112(sp)
    79a0:	d8c01b15 	stw	r3,108(sp)
    79a4:	50fff20e 	bge	r10,r3,7970 <__alt_exception_stack_pointer+0xf8007970>
    79a8:	1001b21e 	bne	r2,zero,8074 <___vfiprintf_internal_r+0xb84>
    79ac:	843ffc04 	addi	r16,r16,-16
    79b0:	000d883a 	mov	r6,zero
    79b4:	01000044 	movi	r4,1
    79b8:	d811883a 	mov	r8,sp
    79bc:	e43ff116 	blt	fp,r16,7984 <__alt_exception_stack_pointer+0xf8007984>
    79c0:	a807883a 	mov	r3,r21
    79c4:	d9c02917 	ldw	r7,164(sp)
    79c8:	802b883a 	mov	r21,r16
    79cc:	dc002717 	ldw	r16,156(sp)
    79d0:	d9402317 	ldw	r5,140(sp)
    79d4:	a885883a 	add	r2,r21,r2
    79d8:	45400115 	stw	r21,4(r8)
    79dc:	41400015 	stw	r5,0(r8)
    79e0:	d8801c15 	stw	r2,112(sp)
    79e4:	d9001b15 	stw	r4,108(sp)
    79e8:	014001c4 	movi	r5,7
    79ec:	29026216 	blt	r5,r4,8378 <___vfiprintf_internal_r+0xe88>
    79f0:	d9801d87 	ldb	r6,118(sp)
    79f4:	42000204 	addi	r8,r8,8
    79f8:	21400044 	addi	r5,r4,1
    79fc:	3001ae1e 	bne	r6,zero,80b8 <___vfiprintf_internal_r+0xbc8>
    7a00:	3801bb26 	beq	r7,zero,80f0 <___vfiprintf_internal_r+0xc00>
    7a04:	d9001d04 	addi	r4,sp,116
    7a08:	10800084 	addi	r2,r2,2
    7a0c:	41000015 	stw	r4,0(r8)
    7a10:	01000084 	movi	r4,2
    7a14:	41000115 	stw	r4,4(r8)
    7a18:	d8801c15 	stw	r2,112(sp)
    7a1c:	d9401b15 	stw	r5,108(sp)
    7a20:	010001c4 	movi	r4,7
    7a24:	2142680e 	bge	r4,r5,83c8 <___vfiprintf_internal_r+0xed8>
    7a28:	1002b11e 	bne	r2,zero,84f0 <___vfiprintf_internal_r+0x1000>
    7a2c:	01802004 	movi	r6,128
    7a30:	01400044 	movi	r5,1
    7a34:	0009883a 	mov	r4,zero
    7a38:	d811883a 	mov	r8,sp
    7a3c:	1981ae1e 	bne	r3,r6,80f8 <___vfiprintf_internal_r+0xc08>
    7a40:	d8c02517 	ldw	r3,148(sp)
    7a44:	1cf9c83a 	sub	fp,r3,r19
    7a48:	0701ab0e 	bge	zero,fp,80f8 <___vfiprintf_internal_r+0xc08>
    7a4c:	05400404 	movi	r21,16
    7a50:	af03a90e 	bge	r21,fp,88f8 <___vfiprintf_internal_r+0x1408>
    7a54:	01400074 	movhi	r5,1
    7a58:	297f5604 	addi	r5,r5,-680
    7a5c:	d9402315 	stw	r5,140(sp)
    7a60:	01c001c4 	movi	r7,7
    7a64:	00000506 	br	7a7c <___vfiprintf_internal_r+0x58c>
    7a68:	21800084 	addi	r6,r4,2
    7a6c:	42000204 	addi	r8,r8,8
    7a70:	1809883a 	mov	r4,r3
    7a74:	e73ffc04 	addi	fp,fp,-16
    7a78:	af000d0e 	bge	r21,fp,7ab0 <___vfiprintf_internal_r+0x5c0>
    7a7c:	10800404 	addi	r2,r2,16
    7a80:	20c00044 	addi	r3,r4,1
    7a84:	44800015 	stw	r18,0(r8)
    7a88:	45400115 	stw	r21,4(r8)
    7a8c:	d8801c15 	stw	r2,112(sp)
    7a90:	d8c01b15 	stw	r3,108(sp)
    7a94:	38fff40e 	bge	r7,r3,7a68 <__alt_exception_stack_pointer+0xf8007a68>
    7a98:	10022b1e 	bne	r2,zero,8348 <___vfiprintf_internal_r+0xe58>
    7a9c:	e73ffc04 	addi	fp,fp,-16
    7aa0:	01800044 	movi	r6,1
    7aa4:	0009883a 	mov	r4,zero
    7aa8:	d811883a 	mov	r8,sp
    7aac:	af3ff316 	blt	r21,fp,7a7c <__alt_exception_stack_pointer+0xf8007a7c>
    7ab0:	d8c02317 	ldw	r3,140(sp)
    7ab4:	1705883a 	add	r2,r2,fp
    7ab8:	47000115 	stw	fp,4(r8)
    7abc:	40c00015 	stw	r3,0(r8)
    7ac0:	d8801c15 	stw	r2,112(sp)
    7ac4:	d9801b15 	stw	r6,108(sp)
    7ac8:	00c001c4 	movi	r3,7
    7acc:	19829416 	blt	r3,r6,8520 <___vfiprintf_internal_r+0x1030>
    7ad0:	8521c83a 	sub	r16,r16,r20
    7ad4:	42000204 	addi	r8,r8,8
    7ad8:	31400044 	addi	r5,r6,1
    7adc:	3009883a 	mov	r4,r6
    7ae0:	04018716 	blt	zero,r16,8100 <___vfiprintf_internal_r+0xc10>
    7ae4:	a085883a 	add	r2,r20,r2
    7ae8:	45c00015 	stw	r23,0(r8)
    7aec:	45000115 	stw	r20,4(r8)
    7af0:	d8801c15 	stw	r2,112(sp)
    7af4:	d9401b15 	stw	r5,108(sp)
    7af8:	00c001c4 	movi	r3,7
    7afc:	1941c20e 	bge	r3,r5,8208 <___vfiprintf_internal_r+0xd18>
    7b00:	1002531e 	bne	r2,zero,8450 <___vfiprintf_internal_r+0xf60>
    7b04:	d8001b15 	stw	zero,108(sp)
    7b08:	8c40010c 	andi	r17,r17,4
    7b0c:	88023226 	beq	r17,zero,83d8 <___vfiprintf_internal_r+0xee8>
    7b10:	d9002517 	ldw	r4,148(sp)
    7b14:	24e3c83a 	sub	r17,r4,r19
    7b18:	04432916 	blt	zero,r17,87c0 <___vfiprintf_internal_r+0x12d0>
    7b1c:	d8802517 	ldw	r2,148(sp)
    7b20:	14c0010e 	bge	r2,r19,7b28 <___vfiprintf_internal_r+0x638>
    7b24:	9805883a 	mov	r2,r19
    7b28:	d8c02417 	ldw	r3,144(sp)
    7b2c:	1887883a 	add	r3,r3,r2
    7b30:	d8c02415 	stw	r3,144(sp)
    7b34:	d8001b15 	stw	zero,108(sp)
    7b38:	d811883a 	mov	r8,sp
    7b3c:	003ea006 	br	75c0 <__alt_exception_stack_pointer+0xf80075c0>
    7b40:	8c400814 	ori	r17,r17,32
    7b44:	b0c00007 	ldb	r3,0(r22)
    7b48:	003ec606 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7b4c:	b0c00007 	ldb	r3,0(r22)
    7b50:	00801b04 	movi	r2,108
    7b54:	18832026 	beq	r3,r2,87d8 <___vfiprintf_internal_r+0x12e8>
    7b58:	8c400414 	ori	r17,r17,16
    7b5c:	003ec106 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7b60:	9cc03fcc 	andi	r19,r19,255
    7b64:	b811883a 	mov	r8,r23
    7b68:	9803981e 	bne	r19,zero,89cc <___vfiprintf_internal_r+0x14dc>
    7b6c:	8880080c 	andi	r2,r17,32
    7b70:	1002be26 	beq	r2,zero,866c <___vfiprintf_internal_r+0x117c>
    7b74:	d9002217 	ldw	r4,136(sp)
    7b78:	d9402417 	ldw	r5,144(sp)
    7b7c:	20800017 	ldw	r2,0(r4)
    7b80:	2807d7fa 	srai	r3,r5,31
    7b84:	21000104 	addi	r4,r4,4
    7b88:	d9002215 	stw	r4,136(sp)
    7b8c:	11400015 	stw	r5,0(r2)
    7b90:	10c00115 	stw	r3,4(r2)
    7b94:	003e8a06 	br	75c0 <__alt_exception_stack_pointer+0xf80075c0>
    7b98:	9cc03fcc 	andi	r19,r19,255
    7b9c:	b811883a 	mov	r8,r23
    7ba0:	9803871e 	bne	r19,zero,89c0 <___vfiprintf_internal_r+0x14d0>
    7ba4:	8880080c 	andi	r2,r17,32
    7ba8:	10009a26 	beq	r2,zero,7e14 <___vfiprintf_internal_r+0x924>
    7bac:	d9002217 	ldw	r4,136(sp)
    7bb0:	d8001d85 	stb	zero,118(sp)
    7bb4:	20800204 	addi	r2,r4,8
    7bb8:	24c00017 	ldw	r19,0(r4)
    7bbc:	25000117 	ldw	r20,4(r4)
    7bc0:	8002a416 	blt	r16,zero,8654 <___vfiprintf_internal_r+0x1164>
    7bc4:	013fdfc4 	movi	r4,-129
    7bc8:	9d06b03a 	or	r3,r19,r20
    7bcc:	d8802215 	stw	r2,136(sp)
    7bd0:	8922703a 	and	r17,r17,r4
    7bd4:	18009b26 	beq	r3,zero,7e44 <___vfiprintf_internal_r+0x954>
    7bd8:	002b883a 	mov	r21,zero
    7bdc:	ddc01a04 	addi	r23,sp,104
    7be0:	9806d0fa 	srli	r3,r19,3
    7be4:	a008977a 	slli	r4,r20,29
    7be8:	a028d0fa 	srli	r20,r20,3
    7bec:	9cc001cc 	andi	r19,r19,7
    7bf0:	98800c04 	addi	r2,r19,48
    7bf4:	bdffffc4 	addi	r23,r23,-1
    7bf8:	20e6b03a 	or	r19,r4,r3
    7bfc:	b8800005 	stb	r2,0(r23)
    7c00:	9d06b03a 	or	r3,r19,r20
    7c04:	183ff61e 	bne	r3,zero,7be0 <__alt_exception_stack_pointer+0xf8007be0>
    7c08:	88c0004c 	andi	r3,r17,1
    7c0c:	18021f1e 	bne	r3,zero,848c <___vfiprintf_internal_r+0xf9c>
    7c10:	d9401e17 	ldw	r5,120(sp)
    7c14:	2de9c83a 	sub	r20,r5,r23
    7c18:	003f3806 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    7c1c:	9cc03fcc 	andi	r19,r19,255
    7c20:	b811883a 	mov	r8,r23
    7c24:	98034f1e 	bne	r19,zero,8964 <___vfiprintf_internal_r+0x1474>
    7c28:	00800074 	movhi	r2,1
    7c2c:	10bef504 	addi	r2,r2,-1068
    7c30:	d8802615 	stw	r2,152(sp)
    7c34:	8880080c 	andi	r2,r17,32
    7c38:	1000ac26 	beq	r2,zero,7eec <___vfiprintf_internal_r+0x9fc>
    7c3c:	d9002217 	ldw	r4,136(sp)
    7c40:	24c00017 	ldw	r19,0(r4)
    7c44:	25000117 	ldw	r20,4(r4)
    7c48:	21000204 	addi	r4,r4,8
    7c4c:	d9002215 	stw	r4,136(sp)
    7c50:	8880004c 	andi	r2,r17,1
    7c54:	1001e726 	beq	r2,zero,83f4 <___vfiprintf_internal_r+0xf04>
    7c58:	9d04b03a 	or	r2,r19,r20
    7c5c:	10025c1e 	bne	r2,zero,85d0 <___vfiprintf_internal_r+0x10e0>
    7c60:	d8001d85 	stb	zero,118(sp)
    7c64:	80024416 	blt	r16,zero,8578 <___vfiprintf_internal_r+0x1088>
    7c68:	00bfdfc4 	movi	r2,-129
    7c6c:	88a2703a 	and	r17,r17,r2
    7c70:	003f1d06 	br	78e8 <__alt_exception_stack_pointer+0xf80078e8>
    7c74:	d8c02217 	ldw	r3,136(sp)
    7c78:	04c00044 	movi	r19,1
    7c7c:	b811883a 	mov	r8,r23
    7c80:	18800017 	ldw	r2,0(r3)
    7c84:	18c00104 	addi	r3,r3,4
    7c88:	d8001d85 	stb	zero,118(sp)
    7c8c:	d8801005 	stb	r2,64(sp)
    7c90:	d8c02215 	stw	r3,136(sp)
    7c94:	9829883a 	mov	r20,r19
    7c98:	ddc01004 	addi	r23,sp,64
    7c9c:	0021883a 	mov	r16,zero
    7ca0:	003f1e06 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7ca4:	9cc03fcc 	andi	r19,r19,255
    7ca8:	b811883a 	mov	r8,r23
    7cac:	9803331e 	bne	r19,zero,897c <___vfiprintf_internal_r+0x148c>
    7cb0:	8880080c 	andi	r2,r17,32
    7cb4:	10004826 	beq	r2,zero,7dd8 <___vfiprintf_internal_r+0x8e8>
    7cb8:	d9002217 	ldw	r4,136(sp)
    7cbc:	20800117 	ldw	r2,4(r4)
    7cc0:	24c00017 	ldw	r19,0(r4)
    7cc4:	21000204 	addi	r4,r4,8
    7cc8:	d9002215 	stw	r4,136(sp)
    7ccc:	1029883a 	mov	r20,r2
    7cd0:	10024c16 	blt	r2,zero,8604 <___vfiprintf_internal_r+0x1114>
    7cd4:	dd401d83 	ldbu	r21,118(sp)
    7cd8:	80007116 	blt	r16,zero,7ea0 <___vfiprintf_internal_r+0x9b0>
    7cdc:	00ffdfc4 	movi	r3,-129
    7ce0:	9d04b03a 	or	r2,r19,r20
    7ce4:	88e2703a 	and	r17,r17,r3
    7ce8:	1000d126 	beq	r2,zero,8030 <___vfiprintf_internal_r+0xb40>
    7cec:	a0023526 	beq	r20,zero,85c4 <___vfiprintf_internal_r+0x10d4>
    7cf0:	ddc01a04 	addi	r23,sp,104
    7cf4:	4039883a 	mov	fp,r8
    7cf8:	9809883a 	mov	r4,r19
    7cfc:	a00b883a 	mov	r5,r20
    7d00:	01800284 	movi	r6,10
    7d04:	000f883a 	mov	r7,zero
    7d08:	000a5a40 	call	a5a4 <__umoddi3>
    7d0c:	10800c04 	addi	r2,r2,48
    7d10:	bdffffc4 	addi	r23,r23,-1
    7d14:	9809883a 	mov	r4,r19
    7d18:	a00b883a 	mov	r5,r20
    7d1c:	b8800005 	stb	r2,0(r23)
    7d20:	01800284 	movi	r6,10
    7d24:	000f883a 	mov	r7,zero
    7d28:	0009fa80 	call	9fa8 <__udivdi3>
    7d2c:	1027883a 	mov	r19,r2
    7d30:	10c4b03a 	or	r2,r2,r3
    7d34:	1829883a 	mov	r20,r3
    7d38:	103fef1e 	bne	r2,zero,7cf8 <__alt_exception_stack_pointer+0xf8007cf8>
    7d3c:	d9001e17 	ldw	r4,120(sp)
    7d40:	e011883a 	mov	r8,fp
    7d44:	25e9c83a 	sub	r20,r4,r23
    7d48:	003eec06 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    7d4c:	d8802307 	ldb	r2,140(sp)
    7d50:	1002361e 	bne	r2,zero,862c <___vfiprintf_internal_r+0x113c>
    7d54:	00c00804 	movi	r3,32
    7d58:	d8c02305 	stb	r3,140(sp)
    7d5c:	04c00044 	movi	r19,1
    7d60:	b0c00007 	ldb	r3,0(r22)
    7d64:	003e3f06 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7d68:	8c400054 	ori	r17,r17,1
    7d6c:	b0c00007 	ldb	r3,0(r22)
    7d70:	003e3c06 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7d74:	8c402014 	ori	r17,r17,128
    7d78:	b0c00007 	ldb	r3,0(r22)
    7d7c:	003e3906 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7d80:	dc002715 	stw	r16,156(sp)
    7d84:	d8002515 	stw	zero,148(sp)
    7d88:	1f3ff404 	addi	fp,r3,-48
    7d8c:	0009883a 	mov	r4,zero
    7d90:	b021883a 	mov	r16,r22
    7d94:	01400284 	movi	r5,10
    7d98:	000072c0 	call	72c <__mulsi3>
    7d9c:	80c00007 	ldb	r3,0(r16)
    7da0:	e089883a 	add	r4,fp,r2
    7da4:	b5800044 	addi	r22,r22,1
    7da8:	1f3ff404 	addi	fp,r3,-48
    7dac:	b021883a 	mov	r16,r22
    7db0:	af3ff82e 	bgeu	r21,fp,7d94 <__alt_exception_stack_pointer+0xf8007d94>
    7db4:	d9002515 	stw	r4,148(sp)
    7db8:	dc002717 	ldw	r16,156(sp)
    7dbc:	003e2a06 	br	7668 <__alt_exception_stack_pointer+0xf8007668>
    7dc0:	9cc03fcc 	andi	r19,r19,255
    7dc4:	b811883a 	mov	r8,r23
    7dc8:	9802e91e 	bne	r19,zero,8970 <___vfiprintf_internal_r+0x1480>
    7dcc:	8c400414 	ori	r17,r17,16
    7dd0:	8880080c 	andi	r2,r17,32
    7dd4:	103fb81e 	bne	r2,zero,7cb8 <__alt_exception_stack_pointer+0xf8007cb8>
    7dd8:	8880040c 	andi	r2,r17,16
    7ddc:	10022e26 	beq	r2,zero,8698 <___vfiprintf_internal_r+0x11a8>
    7de0:	d9402217 	ldw	r5,136(sp)
    7de4:	2cc00017 	ldw	r19,0(r5)
    7de8:	29400104 	addi	r5,r5,4
    7dec:	d9402215 	stw	r5,136(sp)
    7df0:	9829d7fa 	srai	r20,r19,31
    7df4:	a005883a 	mov	r2,r20
    7df8:	003fb506 	br	7cd0 <__alt_exception_stack_pointer+0xf8007cd0>
    7dfc:	9cc03fcc 	andi	r19,r19,255
    7e00:	b811883a 	mov	r8,r23
    7e04:	9802fa1e 	bne	r19,zero,89f0 <___vfiprintf_internal_r+0x1500>
    7e08:	8c400414 	ori	r17,r17,16
    7e0c:	8880080c 	andi	r2,r17,32
    7e10:	103f661e 	bne	r2,zero,7bac <__alt_exception_stack_pointer+0xf8007bac>
    7e14:	8880040c 	andi	r2,r17,16
    7e18:	10020626 	beq	r2,zero,8634 <___vfiprintf_internal_r+0x1144>
    7e1c:	d9402217 	ldw	r5,136(sp)
    7e20:	d8001d85 	stb	zero,118(sp)
    7e24:	0029883a 	mov	r20,zero
    7e28:	28800104 	addi	r2,r5,4
    7e2c:	2cc00017 	ldw	r19,0(r5)
    7e30:	80020816 	blt	r16,zero,8654 <___vfiprintf_internal_r+0x1164>
    7e34:	00ffdfc4 	movi	r3,-129
    7e38:	d8802215 	stw	r2,136(sp)
    7e3c:	88e2703a 	and	r17,r17,r3
    7e40:	983f651e 	bne	r19,zero,7bd8 <__alt_exception_stack_pointer+0xf8007bd8>
    7e44:	002b883a 	mov	r21,zero
    7e48:	8002cf26 	beq	r16,zero,8988 <___vfiprintf_internal_r+0x1498>
    7e4c:	0027883a 	mov	r19,zero
    7e50:	0029883a 	mov	r20,zero
    7e54:	003f6106 	br	7bdc <__alt_exception_stack_pointer+0xf8007bdc>
    7e58:	9cc03fcc 	andi	r19,r19,255
    7e5c:	b811883a 	mov	r8,r23
    7e60:	9802e01e 	bne	r19,zero,89e4 <___vfiprintf_internal_r+0x14f4>
    7e64:	8c400414 	ori	r17,r17,16
    7e68:	8880080c 	andi	r2,r17,32
    7e6c:	1000641e 	bne	r2,zero,8000 <___vfiprintf_internal_r+0xb10>
    7e70:	8880040c 	andi	r2,r17,16
    7e74:	1001c81e 	bne	r2,zero,8598 <___vfiprintf_internal_r+0x10a8>
    7e78:	8880100c 	andi	r2,r17,64
    7e7c:	d8001d85 	stb	zero,118(sp)
    7e80:	1002281e 	bne	r2,zero,8724 <___vfiprintf_internal_r+0x1234>
    7e84:	d9002217 	ldw	r4,136(sp)
    7e88:	0029883a 	mov	r20,zero
    7e8c:	20800104 	addi	r2,r4,4
    7e90:	24c00017 	ldw	r19,0(r4)
    7e94:	8001c60e 	bge	r16,zero,85b0 <___vfiprintf_internal_r+0x10c0>
    7e98:	d8802215 	stw	r2,136(sp)
    7e9c:	002b883a 	mov	r21,zero
    7ea0:	9d04b03a 	or	r2,r19,r20
    7ea4:	103f911e 	bne	r2,zero,7cec <__alt_exception_stack_pointer+0xf8007cec>
    7ea8:	00800044 	movi	r2,1
    7eac:	10803fcc 	andi	r2,r2,255
    7eb0:	00c00044 	movi	r3,1
    7eb4:	10c05f26 	beq	r2,r3,8034 <___vfiprintf_internal_r+0xb44>
    7eb8:	00c00084 	movi	r3,2
    7ebc:	10ffe31e 	bne	r2,r3,7e4c <__alt_exception_stack_pointer+0xf8007e4c>
    7ec0:	0027883a 	mov	r19,zero
    7ec4:	0029883a 	mov	r20,zero
    7ec8:	00015106 	br	8410 <___vfiprintf_internal_r+0xf20>
    7ecc:	9cc03fcc 	andi	r19,r19,255
    7ed0:	b811883a 	mov	r8,r23
    7ed4:	9802c01e 	bne	r19,zero,89d8 <___vfiprintf_internal_r+0x14e8>
    7ed8:	01400074 	movhi	r5,1
    7edc:	297ef004 	addi	r5,r5,-1088
    7ee0:	d9402615 	stw	r5,152(sp)
    7ee4:	8880080c 	andi	r2,r17,32
    7ee8:	103f541e 	bne	r2,zero,7c3c <__alt_exception_stack_pointer+0xf8007c3c>
    7eec:	8880040c 	andi	r2,r17,16
    7ef0:	1001f226 	beq	r2,zero,86bc <___vfiprintf_internal_r+0x11cc>
    7ef4:	d9402217 	ldw	r5,136(sp)
    7ef8:	0029883a 	mov	r20,zero
    7efc:	2cc00017 	ldw	r19,0(r5)
    7f00:	29400104 	addi	r5,r5,4
    7f04:	d9402215 	stw	r5,136(sp)
    7f08:	003f5106 	br	7c50 <__alt_exception_stack_pointer+0xf8007c50>
    7f0c:	d8c02217 	ldw	r3,136(sp)
    7f10:	b811883a 	mov	r8,r23
    7f14:	d8001d85 	stb	zero,118(sp)
    7f18:	1dc00017 	ldw	r23,0(r3)
    7f1c:	1f000104 	addi	fp,r3,4
    7f20:	b8025926 	beq	r23,zero,8888 <___vfiprintf_internal_r+0x1398>
    7f24:	80023316 	blt	r16,zero,87f4 <___vfiprintf_internal_r+0x1304>
    7f28:	800d883a 	mov	r6,r16
    7f2c:	000b883a 	mov	r5,zero
    7f30:	b809883a 	mov	r4,r23
    7f34:	da002a15 	stw	r8,168(sp)
    7f38:	0005cac0 	call	5cac <memchr>
    7f3c:	da002a17 	ldw	r8,168(sp)
    7f40:	10026826 	beq	r2,zero,88e4 <___vfiprintf_internal_r+0x13f4>
    7f44:	15e9c83a 	sub	r20,r2,r23
    7f48:	dd401d83 	ldbu	r21,118(sp)
    7f4c:	df002215 	stw	fp,136(sp)
    7f50:	0021883a 	mov	r16,zero
    7f54:	003e6906 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    7f58:	9cc03fcc 	andi	r19,r19,255
    7f5c:	b811883a 	mov	r8,r23
    7f60:	983fc126 	beq	r19,zero,7e68 <__alt_exception_stack_pointer+0xf8007e68>
    7f64:	d8c02303 	ldbu	r3,140(sp)
    7f68:	d8c01d85 	stb	r3,118(sp)
    7f6c:	003fbe06 	br	7e68 <__alt_exception_stack_pointer+0xf8007e68>
    7f70:	d9002217 	ldw	r4,136(sp)
    7f74:	d9402217 	ldw	r5,136(sp)
    7f78:	21000017 	ldw	r4,0(r4)
    7f7c:	28800104 	addi	r2,r5,4
    7f80:	d9002515 	stw	r4,148(sp)
    7f84:	203e3d16 	blt	r4,zero,787c <__alt_exception_stack_pointer+0xf800787c>
    7f88:	d8802215 	stw	r2,136(sp)
    7f8c:	b0c00007 	ldb	r3,0(r22)
    7f90:	003db406 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7f94:	00c00ac4 	movi	r3,43
    7f98:	d8c02305 	stb	r3,140(sp)
    7f9c:	04c00044 	movi	r19,1
    7fa0:	b0c00007 	ldb	r3,0(r22)
    7fa4:	003daf06 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    7fa8:	b0c00007 	ldb	r3,0(r22)
    7fac:	01000a84 	movi	r4,42
    7fb0:	b4000044 	addi	r16,r22,1
    7fb4:	19025e26 	beq	r3,r4,8930 <___vfiprintf_internal_r+0x1440>
    7fb8:	1f3ff404 	addi	fp,r3,-48
    7fbc:	0009883a 	mov	r4,zero
    7fc0:	af025236 	bltu	r21,fp,890c <___vfiprintf_internal_r+0x141c>
    7fc4:	01400284 	movi	r5,10
    7fc8:	000072c0 	call	72c <__mulsi3>
    7fcc:	80c00007 	ldb	r3,0(r16)
    7fd0:	1709883a 	add	r4,r2,fp
    7fd4:	85800044 	addi	r22,r16,1
    7fd8:	1f3ff404 	addi	fp,r3,-48
    7fdc:	b021883a 	mov	r16,r22
    7fe0:	af3ff82e 	bgeu	r21,fp,7fc4 <__alt_exception_stack_pointer+0xf8007fc4>
    7fe4:	2021883a 	mov	r16,r4
    7fe8:	203d9f0e 	bge	r4,zero,7668 <__alt_exception_stack_pointer+0xf8007668>
    7fec:	043fffc4 	movi	r16,-1
    7ff0:	003d9d06 	br	7668 <__alt_exception_stack_pointer+0xf8007668>
    7ff4:	8c401014 	ori	r17,r17,64
    7ff8:	b0c00007 	ldb	r3,0(r22)
    7ffc:	003d9906 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    8000:	d9002217 	ldw	r4,136(sp)
    8004:	d8001d85 	stb	zero,118(sp)
    8008:	20c00204 	addi	r3,r4,8
    800c:	24c00017 	ldw	r19,0(r4)
    8010:	25000117 	ldw	r20,4(r4)
    8014:	8001e716 	blt	r16,zero,87b4 <___vfiprintf_internal_r+0x12c4>
    8018:	013fdfc4 	movi	r4,-129
    801c:	9d04b03a 	or	r2,r19,r20
    8020:	d8c02215 	stw	r3,136(sp)
    8024:	8922703a 	and	r17,r17,r4
    8028:	002b883a 	mov	r21,zero
    802c:	103f2f1e 	bne	r2,zero,7cec <__alt_exception_stack_pointer+0xf8007cec>
    8030:	803e2f26 	beq	r16,zero,78f0 <__alt_exception_stack_pointer+0xf80078f0>
    8034:	0027883a 	mov	r19,zero
    8038:	9cc00c04 	addi	r19,r19,48
    803c:	dcc019c5 	stb	r19,103(sp)
    8040:	dd002817 	ldw	r20,160(sp)
    8044:	ddc019c4 	addi	r23,sp,103
    8048:	003e2c06 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    804c:	9cc03fcc 	andi	r19,r19,255
    8050:	b811883a 	mov	r8,r23
    8054:	9802571e 	bne	r19,zero,89b4 <___vfiprintf_internal_r+0x14c4>
    8058:	18005726 	beq	r3,zero,81b8 <___vfiprintf_internal_r+0xcc8>
    805c:	04c00044 	movi	r19,1
    8060:	d8c01005 	stb	r3,64(sp)
    8064:	d8001d85 	stb	zero,118(sp)
    8068:	9829883a 	mov	r20,r19
    806c:	ddc01004 	addi	r23,sp,64
    8070:	003f0a06 	br	7c9c <__alt_exception_stack_pointer+0xf8007c9c>
    8074:	d9402017 	ldw	r5,128(sp)
    8078:	d9002117 	ldw	r4,132(sp)
    807c:	d9801a04 	addi	r6,sp,104
    8080:	da802a15 	stw	r10,168(sp)
    8084:	00073dc0 	call	73dc <__sprint_r.part.0>
    8088:	da802a17 	ldw	r10,168(sp)
    808c:	1000501e 	bne	r2,zero,81d0 <___vfiprintf_internal_r+0xce0>
    8090:	d9801b17 	ldw	r6,108(sp)
    8094:	d8801c17 	ldw	r2,112(sp)
    8098:	d811883a 	mov	r8,sp
    809c:	31000044 	addi	r4,r6,1
    80a0:	003e3606 	br	797c <__alt_exception_stack_pointer+0xf800797c>
    80a4:	d9001b17 	ldw	r4,108(sp)
    80a8:	d8801c17 	ldw	r2,112(sp)
    80ac:	21400044 	addi	r5,r4,1
    80b0:	d9801d87 	ldb	r6,118(sp)
    80b4:	303e5226 	beq	r6,zero,7a00 <__alt_exception_stack_pointer+0xf8007a00>
    80b8:	01800044 	movi	r6,1
    80bc:	d9001d84 	addi	r4,sp,118
    80c0:	1185883a 	add	r2,r2,r6
    80c4:	41000015 	stw	r4,0(r8)
    80c8:	41800115 	stw	r6,4(r8)
    80cc:	d8801c15 	stw	r2,112(sp)
    80d0:	d9401b15 	stw	r5,108(sp)
    80d4:	010001c4 	movi	r4,7
    80d8:	2140b00e 	bge	r4,r5,839c <___vfiprintf_internal_r+0xeac>
    80dc:	1000f61e 	bne	r2,zero,84b8 <___vfiprintf_internal_r+0xfc8>
    80e0:	3800b31e 	bne	r7,zero,83b0 <___vfiprintf_internal_r+0xec0>
    80e4:	0009883a 	mov	r4,zero
    80e8:	300b883a 	mov	r5,r6
    80ec:	d811883a 	mov	r8,sp
    80f0:	01802004 	movi	r6,128
    80f4:	19be5226 	beq	r3,r6,7a40 <__alt_exception_stack_pointer+0xf8007a40>
    80f8:	8521c83a 	sub	r16,r16,r20
    80fc:	043e790e 	bge	zero,r16,7ae4 <__alt_exception_stack_pointer+0xf8007ae4>
    8100:	05400404 	movi	r21,16
    8104:	ac01b00e 	bge	r21,r16,87c8 <___vfiprintf_internal_r+0x12d8>
    8108:	01400074 	movhi	r5,1
    810c:	297f5604 	addi	r5,r5,-680
    8110:	d9402315 	stw	r5,140(sp)
    8114:	070001c4 	movi	fp,7
    8118:	00000506 	br	8130 <___vfiprintf_internal_r+0xc40>
    811c:	21400084 	addi	r5,r4,2
    8120:	42000204 	addi	r8,r8,8
    8124:	1809883a 	mov	r4,r3
    8128:	843ffc04 	addi	r16,r16,-16
    812c:	ac000d0e 	bge	r21,r16,8164 <___vfiprintf_internal_r+0xc74>
    8130:	10800404 	addi	r2,r2,16
    8134:	20c00044 	addi	r3,r4,1
    8138:	44800015 	stw	r18,0(r8)
    813c:	45400115 	stw	r21,4(r8)
    8140:	d8801c15 	stw	r2,112(sp)
    8144:	d8c01b15 	stw	r3,108(sp)
    8148:	e0fff40e 	bge	fp,r3,811c <__alt_exception_stack_pointer+0xf800811c>
    814c:	1000101e 	bne	r2,zero,8190 <___vfiprintf_internal_r+0xca0>
    8150:	843ffc04 	addi	r16,r16,-16
    8154:	01400044 	movi	r5,1
    8158:	0009883a 	mov	r4,zero
    815c:	d811883a 	mov	r8,sp
    8160:	ac3ff316 	blt	r21,r16,8130 <__alt_exception_stack_pointer+0xf8008130>
    8164:	d8c02317 	ldw	r3,140(sp)
    8168:	1405883a 	add	r2,r2,r16
    816c:	44000115 	stw	r16,4(r8)
    8170:	40c00015 	stw	r3,0(r8)
    8174:	d8801c15 	stw	r2,112(sp)
    8178:	d9401b15 	stw	r5,108(sp)
    817c:	00c001c4 	movi	r3,7
    8180:	19401916 	blt	r3,r5,81e8 <___vfiprintf_internal_r+0xcf8>
    8184:	42000204 	addi	r8,r8,8
    8188:	29400044 	addi	r5,r5,1
    818c:	003e5506 	br	7ae4 <__alt_exception_stack_pointer+0xf8007ae4>
    8190:	d9402017 	ldw	r5,128(sp)
    8194:	d9002117 	ldw	r4,132(sp)
    8198:	d9801a04 	addi	r6,sp,104
    819c:	00073dc0 	call	73dc <__sprint_r.part.0>
    81a0:	10000b1e 	bne	r2,zero,81d0 <___vfiprintf_internal_r+0xce0>
    81a4:	d9001b17 	ldw	r4,108(sp)
    81a8:	d8801c17 	ldw	r2,112(sp)
    81ac:	d811883a 	mov	r8,sp
    81b0:	21400044 	addi	r5,r4,1
    81b4:	003fdc06 	br	8128 <__alt_exception_stack_pointer+0xf8008128>
    81b8:	d8801c17 	ldw	r2,112(sp)
    81bc:	10000426 	beq	r2,zero,81d0 <___vfiprintf_internal_r+0xce0>
    81c0:	d9402017 	ldw	r5,128(sp)
    81c4:	d9002117 	ldw	r4,132(sp)
    81c8:	d9801a04 	addi	r6,sp,104
    81cc:	00073dc0 	call	73dc <__sprint_r.part.0>
    81d0:	d9402017 	ldw	r5,128(sp)
    81d4:	2880030b 	ldhu	r2,12(r5)
    81d8:	1080100c 	andi	r2,r2,64
    81dc:	10014d1e 	bne	r2,zero,8714 <___vfiprintf_internal_r+0x1224>
    81e0:	d8802417 	ldw	r2,144(sp)
    81e4:	003d9706 	br	7844 <__alt_exception_stack_pointer+0xf8007844>
    81e8:	1000d21e 	bne	r2,zero,8534 <___vfiprintf_internal_r+0x1044>
    81ec:	00c00044 	movi	r3,1
    81f0:	a005883a 	mov	r2,r20
    81f4:	ddc00015 	stw	r23,0(sp)
    81f8:	dd000115 	stw	r20,4(sp)
    81fc:	dd001c15 	stw	r20,112(sp)
    8200:	d8c01b15 	stw	r3,108(sp)
    8204:	d811883a 	mov	r8,sp
    8208:	42000204 	addi	r8,r8,8
    820c:	8c40010c 	andi	r17,r17,4
    8210:	88004026 	beq	r17,zero,8314 <___vfiprintf_internal_r+0xe24>
    8214:	d9002517 	ldw	r4,148(sp)
    8218:	24e3c83a 	sub	r17,r4,r19
    821c:	04403d0e 	bge	zero,r17,8314 <___vfiprintf_internal_r+0xe24>
    8220:	04000404 	movi	r16,16
    8224:	8441a90e 	bge	r16,r17,88cc <___vfiprintf_internal_r+0x13dc>
    8228:	00c00074 	movhi	r3,1
    822c:	18ff5a04 	addi	r3,r3,-664
    8230:	d9001b17 	ldw	r4,108(sp)
    8234:	d8c02315 	stw	r3,140(sp)
    8238:	050001c4 	movi	r20,7
    823c:	dd402117 	ldw	r21,132(sp)
    8240:	ddc02017 	ldw	r23,128(sp)
    8244:	00000506 	br	825c <___vfiprintf_internal_r+0xd6c>
    8248:	21400084 	addi	r5,r4,2
    824c:	42000204 	addi	r8,r8,8
    8250:	1809883a 	mov	r4,r3
    8254:	8c7ffc04 	addi	r17,r17,-16
    8258:	84400f0e 	bge	r16,r17,8298 <___vfiprintf_internal_r+0xda8>
    825c:	01400074 	movhi	r5,1
    8260:	10800404 	addi	r2,r2,16
    8264:	20c00044 	addi	r3,r4,1
    8268:	297f5a04 	addi	r5,r5,-664
    826c:	41400015 	stw	r5,0(r8)
    8270:	44000115 	stw	r16,4(r8)
    8274:	d8801c15 	stw	r2,112(sp)
    8278:	d8c01b15 	stw	r3,108(sp)
    827c:	a0fff20e 	bge	r20,r3,8248 <__alt_exception_stack_pointer+0xf8008248>
    8280:	1000141e 	bne	r2,zero,82d4 <___vfiprintf_internal_r+0xde4>
    8284:	8c7ffc04 	addi	r17,r17,-16
    8288:	01400044 	movi	r5,1
    828c:	0009883a 	mov	r4,zero
    8290:	d811883a 	mov	r8,sp
    8294:	847ff116 	blt	r16,r17,825c <__alt_exception_stack_pointer+0xf800825c>
    8298:	d8c02317 	ldw	r3,140(sp)
    829c:	1445883a 	add	r2,r2,r17
    82a0:	44400115 	stw	r17,4(r8)
    82a4:	40c00015 	stw	r3,0(r8)
    82a8:	d8801c15 	stw	r2,112(sp)
    82ac:	d9401b15 	stw	r5,108(sp)
    82b0:	00c001c4 	movi	r3,7
    82b4:	1940170e 	bge	r3,r5,8314 <___vfiprintf_internal_r+0xe24>
    82b8:	1000101e 	bne	r2,zero,82fc <___vfiprintf_internal_r+0xe0c>
    82bc:	d8802517 	ldw	r2,148(sp)
    82c0:	14c11616 	blt	r2,r19,871c <___vfiprintf_internal_r+0x122c>
    82c4:	d9002417 	ldw	r4,144(sp)
    82c8:	2089883a 	add	r4,r4,r2
    82cc:	d9002415 	stw	r4,144(sp)
    82d0:	003e1806 	br	7b34 <__alt_exception_stack_pointer+0xf8007b34>
    82d4:	d9801a04 	addi	r6,sp,104
    82d8:	b80b883a 	mov	r5,r23
    82dc:	a809883a 	mov	r4,r21
    82e0:	00073dc0 	call	73dc <__sprint_r.part.0>
    82e4:	103fba1e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    82e8:	d9001b17 	ldw	r4,108(sp)
    82ec:	d8801c17 	ldw	r2,112(sp)
    82f0:	d811883a 	mov	r8,sp
    82f4:	21400044 	addi	r5,r4,1
    82f8:	003fd606 	br	8254 <__alt_exception_stack_pointer+0xf8008254>
    82fc:	d9402017 	ldw	r5,128(sp)
    8300:	d9002117 	ldw	r4,132(sp)
    8304:	d9801a04 	addi	r6,sp,104
    8308:	00073dc0 	call	73dc <__sprint_r.part.0>
    830c:	103fb01e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8310:	d8801c17 	ldw	r2,112(sp)
    8314:	d8c02517 	ldw	r3,148(sp)
    8318:	1cc0010e 	bge	r3,r19,8320 <___vfiprintf_internal_r+0xe30>
    831c:	9807883a 	mov	r3,r19
    8320:	d9002417 	ldw	r4,144(sp)
    8324:	20c9883a 	add	r4,r4,r3
    8328:	d9002415 	stw	r4,144(sp)
    832c:	103e0126 	beq	r2,zero,7b34 <__alt_exception_stack_pointer+0xf8007b34>
    8330:	d9402017 	ldw	r5,128(sp)
    8334:	d9002117 	ldw	r4,132(sp)
    8338:	d9801a04 	addi	r6,sp,104
    833c:	00073dc0 	call	73dc <__sprint_r.part.0>
    8340:	103dfc26 	beq	r2,zero,7b34 <__alt_exception_stack_pointer+0xf8007b34>
    8344:	003fa206 	br	81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8348:	d9402017 	ldw	r5,128(sp)
    834c:	d9002117 	ldw	r4,132(sp)
    8350:	d9801a04 	addi	r6,sp,104
    8354:	d9c02b15 	stw	r7,172(sp)
    8358:	00073dc0 	call	73dc <__sprint_r.part.0>
    835c:	d9c02b17 	ldw	r7,172(sp)
    8360:	103f9b1e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8364:	d9001b17 	ldw	r4,108(sp)
    8368:	d8801c17 	ldw	r2,112(sp)
    836c:	d811883a 	mov	r8,sp
    8370:	21800044 	addi	r6,r4,1
    8374:	003dbf06 	br	7a74 <__alt_exception_stack_pointer+0xf8007a74>
    8378:	1000d81e 	bne	r2,zero,86dc <___vfiprintf_internal_r+0x11ec>
    837c:	d9001d87 	ldb	r4,118(sp)
    8380:	20000a26 	beq	r4,zero,83ac <___vfiprintf_internal_r+0xebc>
    8384:	00800044 	movi	r2,1
    8388:	d9001d84 	addi	r4,sp,118
    838c:	100b883a 	mov	r5,r2
    8390:	d9000015 	stw	r4,0(sp)
    8394:	d8800115 	stw	r2,4(sp)
    8398:	d811883a 	mov	r8,sp
    839c:	2809883a 	mov	r4,r5
    83a0:	42000204 	addi	r8,r8,8
    83a4:	29400044 	addi	r5,r5,1
    83a8:	003d9506 	br	7a00 <__alt_exception_stack_pointer+0xf8007a00>
    83ac:	3800fd26 	beq	r7,zero,87a4 <___vfiprintf_internal_r+0x12b4>
    83b0:	00800084 	movi	r2,2
    83b4:	d9001d04 	addi	r4,sp,116
    83b8:	d9000015 	stw	r4,0(sp)
    83bc:	d8800115 	stw	r2,4(sp)
    83c0:	01400044 	movi	r5,1
    83c4:	d811883a 	mov	r8,sp
    83c8:	2809883a 	mov	r4,r5
    83cc:	42000204 	addi	r8,r8,8
    83d0:	29400044 	addi	r5,r5,1
    83d4:	003f4606 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    83d8:	d8802517 	ldw	r2,148(sp)
    83dc:	14c0010e 	bge	r2,r19,83e4 <___vfiprintf_internal_r+0xef4>
    83e0:	9805883a 	mov	r2,r19
    83e4:	d9402417 	ldw	r5,144(sp)
    83e8:	288b883a 	add	r5,r5,r2
    83ec:	d9402415 	stw	r5,144(sp)
    83f0:	003dd006 	br	7b34 <__alt_exception_stack_pointer+0xf8007b34>
    83f4:	d8001d85 	stb	zero,118(sp)
    83f8:	80005d16 	blt	r16,zero,8570 <___vfiprintf_internal_r+0x1080>
    83fc:	00ffdfc4 	movi	r3,-129
    8400:	9d04b03a 	or	r2,r19,r20
    8404:	88e2703a 	and	r17,r17,r3
    8408:	103d3726 	beq	r2,zero,78e8 <__alt_exception_stack_pointer+0xf80078e8>
    840c:	002b883a 	mov	r21,zero
    8410:	d9002617 	ldw	r4,152(sp)
    8414:	ddc01a04 	addi	r23,sp,104
    8418:	988003cc 	andi	r2,r19,15
    841c:	a006973a 	slli	r3,r20,28
    8420:	2085883a 	add	r2,r4,r2
    8424:	9826d13a 	srli	r19,r19,4
    8428:	10800003 	ldbu	r2,0(r2)
    842c:	a028d13a 	srli	r20,r20,4
    8430:	bdffffc4 	addi	r23,r23,-1
    8434:	1ce6b03a 	or	r19,r3,r19
    8438:	b8800005 	stb	r2,0(r23)
    843c:	9d04b03a 	or	r2,r19,r20
    8440:	103ff51e 	bne	r2,zero,8418 <__alt_exception_stack_pointer+0xf8008418>
    8444:	d8801e17 	ldw	r2,120(sp)
    8448:	15e9c83a 	sub	r20,r2,r23
    844c:	003d2b06 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    8450:	d9402017 	ldw	r5,128(sp)
    8454:	d9002117 	ldw	r4,132(sp)
    8458:	d9801a04 	addi	r6,sp,104
    845c:	00073dc0 	call	73dc <__sprint_r.part.0>
    8460:	103f5b1e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8464:	d8801c17 	ldw	r2,112(sp)
    8468:	d811883a 	mov	r8,sp
    846c:	003f6706 	br	820c <__alt_exception_stack_pointer+0xf800820c>
    8470:	d9402017 	ldw	r5,128(sp)
    8474:	d9002117 	ldw	r4,132(sp)
    8478:	d9801a04 	addi	r6,sp,104
    847c:	00073dc0 	call	73dc <__sprint_r.part.0>
    8480:	103f531e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8484:	d811883a 	mov	r8,sp
    8488:	003cd906 	br	77f0 <__alt_exception_stack_pointer+0xf80077f0>
    848c:	10803fcc 	andi	r2,r2,255
    8490:	1080201c 	xori	r2,r2,128
    8494:	10bfe004 	addi	r2,r2,-128
    8498:	00c00c04 	movi	r3,48
    849c:	10ffe926 	beq	r2,r3,8444 <__alt_exception_stack_pointer+0xf8008444>
    84a0:	b8ffffc5 	stb	r3,-1(r23)
    84a4:	d8c01e17 	ldw	r3,120(sp)
    84a8:	b8bfffc4 	addi	r2,r23,-1
    84ac:	102f883a 	mov	r23,r2
    84b0:	18a9c83a 	sub	r20,r3,r2
    84b4:	003d1106 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    84b8:	d9402017 	ldw	r5,128(sp)
    84bc:	d9002117 	ldw	r4,132(sp)
    84c0:	d9801a04 	addi	r6,sp,104
    84c4:	d8c02a15 	stw	r3,168(sp)
    84c8:	d9c02b15 	stw	r7,172(sp)
    84cc:	00073dc0 	call	73dc <__sprint_r.part.0>
    84d0:	d8c02a17 	ldw	r3,168(sp)
    84d4:	d9c02b17 	ldw	r7,172(sp)
    84d8:	103f3d1e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    84dc:	d9001b17 	ldw	r4,108(sp)
    84e0:	d8801c17 	ldw	r2,112(sp)
    84e4:	d811883a 	mov	r8,sp
    84e8:	21400044 	addi	r5,r4,1
    84ec:	003d4406 	br	7a00 <__alt_exception_stack_pointer+0xf8007a00>
    84f0:	d9402017 	ldw	r5,128(sp)
    84f4:	d9002117 	ldw	r4,132(sp)
    84f8:	d9801a04 	addi	r6,sp,104
    84fc:	d8c02a15 	stw	r3,168(sp)
    8500:	00073dc0 	call	73dc <__sprint_r.part.0>
    8504:	d8c02a17 	ldw	r3,168(sp)
    8508:	103f311e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    850c:	d9001b17 	ldw	r4,108(sp)
    8510:	d8801c17 	ldw	r2,112(sp)
    8514:	d811883a 	mov	r8,sp
    8518:	21400044 	addi	r5,r4,1
    851c:	003ef406 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    8520:	1000bd1e 	bne	r2,zero,8818 <___vfiprintf_internal_r+0x1328>
    8524:	01400044 	movi	r5,1
    8528:	0009883a 	mov	r4,zero
    852c:	d811883a 	mov	r8,sp
    8530:	003ef106 	br	80f8 <__alt_exception_stack_pointer+0xf80080f8>
    8534:	d9402017 	ldw	r5,128(sp)
    8538:	d9002117 	ldw	r4,132(sp)
    853c:	d9801a04 	addi	r6,sp,104
    8540:	00073dc0 	call	73dc <__sprint_r.part.0>
    8544:	103f221e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8548:	d9401b17 	ldw	r5,108(sp)
    854c:	d8801c17 	ldw	r2,112(sp)
    8550:	d811883a 	mov	r8,sp
    8554:	29400044 	addi	r5,r5,1
    8558:	003d6206 	br	7ae4 <__alt_exception_stack_pointer+0xf8007ae4>
    855c:	01400074 	movhi	r5,1
    8560:	297ef504 	addi	r5,r5,-1068
    8564:	d9402615 	stw	r5,152(sp)
    8568:	d8c02215 	stw	r3,136(sp)
    856c:	1023883a 	mov	r17,r2
    8570:	9d04b03a 	or	r2,r19,r20
    8574:	103fa51e 	bne	r2,zero,840c <__alt_exception_stack_pointer+0xf800840c>
    8578:	002b883a 	mov	r21,zero
    857c:	00800084 	movi	r2,2
    8580:	003e4a06 	br	7eac <__alt_exception_stack_pointer+0xf8007eac>
    8584:	01400074 	movhi	r5,1
    8588:	297ef504 	addi	r5,r5,-1068
    858c:	002b883a 	mov	r21,zero
    8590:	d9402615 	stw	r5,152(sp)
    8594:	003f9e06 	br	8410 <__alt_exception_stack_pointer+0xf8008410>
    8598:	d9402217 	ldw	r5,136(sp)
    859c:	d8001d85 	stb	zero,118(sp)
    85a0:	0029883a 	mov	r20,zero
    85a4:	28800104 	addi	r2,r5,4
    85a8:	2cc00017 	ldw	r19,0(r5)
    85ac:	803e3a16 	blt	r16,zero,7e98 <__alt_exception_stack_pointer+0xf8007e98>
    85b0:	00ffdfc4 	movi	r3,-129
    85b4:	d8802215 	stw	r2,136(sp)
    85b8:	88e2703a 	and	r17,r17,r3
    85bc:	002b883a 	mov	r21,zero
    85c0:	983e9b26 	beq	r19,zero,8030 <__alt_exception_stack_pointer+0xf8008030>
    85c4:	00800244 	movi	r2,9
    85c8:	14fdc936 	bltu	r2,r19,7cf0 <__alt_exception_stack_pointer+0xf8007cf0>
    85cc:	003e9a06 	br	8038 <__alt_exception_stack_pointer+0xf8008038>
    85d0:	00800c04 	movi	r2,48
    85d4:	d8c01d45 	stb	r3,117(sp)
    85d8:	d8801d05 	stb	r2,116(sp)
    85dc:	d8001d85 	stb	zero,118(sp)
    85e0:	88c00094 	ori	r3,r17,2
    85e4:	80009c16 	blt	r16,zero,8858 <___vfiprintf_internal_r+0x1368>
    85e8:	00bfdfc4 	movi	r2,-129
    85ec:	88a2703a 	and	r17,r17,r2
    85f0:	8c400094 	ori	r17,r17,2
    85f4:	002b883a 	mov	r21,zero
    85f8:	003f8506 	br	8410 <__alt_exception_stack_pointer+0xf8008410>
    85fc:	b029883a 	mov	r20,r22
    8600:	003c0b06 	br	7630 <__alt_exception_stack_pointer+0xf8007630>
    8604:	04e7c83a 	sub	r19,zero,r19
    8608:	05400b44 	movi	r21,45
    860c:	9804c03a 	cmpne	r2,r19,zero
    8610:	0529c83a 	sub	r20,zero,r20
    8614:	dd401d85 	stb	r21,118(sp)
    8618:	a0a9c83a 	sub	r20,r20,r2
    861c:	80009716 	blt	r16,zero,887c <___vfiprintf_internal_r+0x138c>
    8620:	00bfdfc4 	movi	r2,-129
    8624:	88a2703a 	and	r17,r17,r2
    8628:	003db006 	br	7cec <__alt_exception_stack_pointer+0xf8007cec>
    862c:	b0c00007 	ldb	r3,0(r22)
    8630:	003c0c06 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    8634:	8880100c 	andi	r2,r17,64
    8638:	d8001d85 	stb	zero,118(sp)
    863c:	1000461e 	bne	r2,zero,8758 <___vfiprintf_internal_r+0x1268>
    8640:	d9002217 	ldw	r4,136(sp)
    8644:	0029883a 	mov	r20,zero
    8648:	20800104 	addi	r2,r4,4
    864c:	24c00017 	ldw	r19,0(r4)
    8650:	803df80e 	bge	r16,zero,7e34 <__alt_exception_stack_pointer+0xf8007e34>
    8654:	9d06b03a 	or	r3,r19,r20
    8658:	d8802215 	stw	r2,136(sp)
    865c:	183d5e1e 	bne	r3,zero,7bd8 <__alt_exception_stack_pointer+0xf8007bd8>
    8660:	002b883a 	mov	r21,zero
    8664:	0005883a 	mov	r2,zero
    8668:	003e1006 	br	7eac <__alt_exception_stack_pointer+0xf8007eac>
    866c:	8880040c 	andi	r2,r17,16
    8670:	1000321e 	bne	r2,zero,873c <___vfiprintf_internal_r+0x124c>
    8674:	8c40100c 	andi	r17,r17,64
    8678:	88008d26 	beq	r17,zero,88b0 <___vfiprintf_internal_r+0x13c0>
    867c:	d9402217 	ldw	r5,136(sp)
    8680:	d8c02417 	ldw	r3,144(sp)
    8684:	28800017 	ldw	r2,0(r5)
    8688:	29400104 	addi	r5,r5,4
    868c:	d9402215 	stw	r5,136(sp)
    8690:	10c0000d 	sth	r3,0(r2)
    8694:	003bca06 	br	75c0 <__alt_exception_stack_pointer+0xf80075c0>
    8698:	8880100c 	andi	r2,r17,64
    869c:	10003a26 	beq	r2,zero,8788 <___vfiprintf_internal_r+0x1298>
    86a0:	d8802217 	ldw	r2,136(sp)
    86a4:	14c0000f 	ldh	r19,0(r2)
    86a8:	10800104 	addi	r2,r2,4
    86ac:	d8802215 	stw	r2,136(sp)
    86b0:	9829d7fa 	srai	r20,r19,31
    86b4:	a005883a 	mov	r2,r20
    86b8:	003d8506 	br	7cd0 <__alt_exception_stack_pointer+0xf8007cd0>
    86bc:	8880100c 	andi	r2,r17,64
    86c0:	10002b26 	beq	r2,zero,8770 <___vfiprintf_internal_r+0x1280>
    86c4:	d8802217 	ldw	r2,136(sp)
    86c8:	0029883a 	mov	r20,zero
    86cc:	14c0000b 	ldhu	r19,0(r2)
    86d0:	10800104 	addi	r2,r2,4
    86d4:	d8802215 	stw	r2,136(sp)
    86d8:	003d5d06 	br	7c50 <__alt_exception_stack_pointer+0xf8007c50>
    86dc:	d9402017 	ldw	r5,128(sp)
    86e0:	d9002117 	ldw	r4,132(sp)
    86e4:	d9801a04 	addi	r6,sp,104
    86e8:	d8c02a15 	stw	r3,168(sp)
    86ec:	d9c02b15 	stw	r7,172(sp)
    86f0:	00073dc0 	call	73dc <__sprint_r.part.0>
    86f4:	d8c02a17 	ldw	r3,168(sp)
    86f8:	d9c02b17 	ldw	r7,172(sp)
    86fc:	103eb41e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    8700:	d9001b17 	ldw	r4,108(sp)
    8704:	d8801c17 	ldw	r2,112(sp)
    8708:	d811883a 	mov	r8,sp
    870c:	21400044 	addi	r5,r4,1
    8710:	003e6706 	br	80b0 <__alt_exception_stack_pointer+0xf80080b0>
    8714:	00bfffc4 	movi	r2,-1
    8718:	003c4a06 	br	7844 <__alt_exception_stack_pointer+0xf8007844>
    871c:	9805883a 	mov	r2,r19
    8720:	003ee806 	br	82c4 <__alt_exception_stack_pointer+0xf80082c4>
    8724:	d8c02217 	ldw	r3,136(sp)
    8728:	0029883a 	mov	r20,zero
    872c:	18800104 	addi	r2,r3,4
    8730:	1cc0000b 	ldhu	r19,0(r3)
    8734:	803f9e0e 	bge	r16,zero,85b0 <__alt_exception_stack_pointer+0xf80085b0>
    8738:	003dd706 	br	7e98 <__alt_exception_stack_pointer+0xf8007e98>
    873c:	d8c02217 	ldw	r3,136(sp)
    8740:	d9002417 	ldw	r4,144(sp)
    8744:	18800017 	ldw	r2,0(r3)
    8748:	18c00104 	addi	r3,r3,4
    874c:	d8c02215 	stw	r3,136(sp)
    8750:	11000015 	stw	r4,0(r2)
    8754:	003b9a06 	br	75c0 <__alt_exception_stack_pointer+0xf80075c0>
    8758:	d8c02217 	ldw	r3,136(sp)
    875c:	0029883a 	mov	r20,zero
    8760:	18800104 	addi	r2,r3,4
    8764:	1cc0000b 	ldhu	r19,0(r3)
    8768:	803db20e 	bge	r16,zero,7e34 <__alt_exception_stack_pointer+0xf8007e34>
    876c:	003fb906 	br	8654 <__alt_exception_stack_pointer+0xf8008654>
    8770:	d9002217 	ldw	r4,136(sp)
    8774:	0029883a 	mov	r20,zero
    8778:	24c00017 	ldw	r19,0(r4)
    877c:	21000104 	addi	r4,r4,4
    8780:	d9002215 	stw	r4,136(sp)
    8784:	003d3206 	br	7c50 <__alt_exception_stack_pointer+0xf8007c50>
    8788:	d8c02217 	ldw	r3,136(sp)
    878c:	1cc00017 	ldw	r19,0(r3)
    8790:	18c00104 	addi	r3,r3,4
    8794:	d8c02215 	stw	r3,136(sp)
    8798:	9829d7fa 	srai	r20,r19,31
    879c:	a005883a 	mov	r2,r20
    87a0:	003d4b06 	br	7cd0 <__alt_exception_stack_pointer+0xf8007cd0>
    87a4:	0009883a 	mov	r4,zero
    87a8:	01400044 	movi	r5,1
    87ac:	d811883a 	mov	r8,sp
    87b0:	003e4f06 	br	80f0 <__alt_exception_stack_pointer+0xf80080f0>
    87b4:	d8c02215 	stw	r3,136(sp)
    87b8:	002b883a 	mov	r21,zero
    87bc:	003db806 	br	7ea0 <__alt_exception_stack_pointer+0xf8007ea0>
    87c0:	d811883a 	mov	r8,sp
    87c4:	003e9606 	br	8220 <__alt_exception_stack_pointer+0xf8008220>
    87c8:	01000074 	movhi	r4,1
    87cc:	213f5604 	addi	r4,r4,-680
    87d0:	d9002315 	stw	r4,140(sp)
    87d4:	003e6306 	br	8164 <__alt_exception_stack_pointer+0xf8008164>
    87d8:	b0c00043 	ldbu	r3,1(r22)
    87dc:	8c400814 	ori	r17,r17,32
    87e0:	b5800044 	addi	r22,r22,1
    87e4:	18c03fcc 	andi	r3,r3,255
    87e8:	18c0201c 	xori	r3,r3,128
    87ec:	18ffe004 	addi	r3,r3,-128
    87f0:	003b9c06 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    87f4:	b809883a 	mov	r4,r23
    87f8:	da002a15 	stw	r8,168(sp)
    87fc:	00073440 	call	7344 <strlen>
    8800:	1029883a 	mov	r20,r2
    8804:	dd401d83 	ldbu	r21,118(sp)
    8808:	df002215 	stw	fp,136(sp)
    880c:	0021883a 	mov	r16,zero
    8810:	da002a17 	ldw	r8,168(sp)
    8814:	003c3906 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    8818:	d9402017 	ldw	r5,128(sp)
    881c:	d9002117 	ldw	r4,132(sp)
    8820:	d9801a04 	addi	r6,sp,104
    8824:	00073dc0 	call	73dc <__sprint_r.part.0>
    8828:	103e691e 	bne	r2,zero,81d0 <__alt_exception_stack_pointer+0xf80081d0>
    882c:	d9001b17 	ldw	r4,108(sp)
    8830:	d8801c17 	ldw	r2,112(sp)
    8834:	d811883a 	mov	r8,sp
    8838:	21400044 	addi	r5,r4,1
    883c:	003e2e06 	br	80f8 <__alt_exception_stack_pointer+0xf80080f8>
    8840:	01000074 	movhi	r4,1
    8844:	213f5a04 	addi	r4,r4,-664
    8848:	d9002315 	stw	r4,140(sp)
    884c:	d9001b17 	ldw	r4,108(sp)
    8850:	21000044 	addi	r4,r4,1
    8854:	003c5e06 	br	79d0 <__alt_exception_stack_pointer+0xf80079d0>
    8858:	002b883a 	mov	r21,zero
    885c:	00800084 	movi	r2,2
    8860:	10803fcc 	andi	r2,r2,255
    8864:	01000044 	movi	r4,1
    8868:	11002b26 	beq	r2,r4,8918 <___vfiprintf_internal_r+0x1428>
    886c:	01000084 	movi	r4,2
    8870:	11002b1e 	bne	r2,r4,8920 <___vfiprintf_internal_r+0x1430>
    8874:	1823883a 	mov	r17,r3
    8878:	003ee506 	br	8410 <__alt_exception_stack_pointer+0xf8008410>
    887c:	8807883a 	mov	r3,r17
    8880:	00800044 	movi	r2,1
    8884:	003ff606 	br	8860 <__alt_exception_stack_pointer+0xf8008860>
    8888:	00800184 	movi	r2,6
    888c:	1400012e 	bgeu	r2,r16,8894 <___vfiprintf_internal_r+0x13a4>
    8890:	1021883a 	mov	r16,r2
    8894:	8029883a 	mov	r20,r16
    8898:	8027883a 	mov	r19,r16
    889c:	80002216 	blt	r16,zero,8928 <___vfiprintf_internal_r+0x1438>
    88a0:	05c00074 	movhi	r23,1
    88a4:	df002215 	stw	fp,136(sp)
    88a8:	bdfefa04 	addi	r23,r23,-1048
    88ac:	003cfb06 	br	7c9c <__alt_exception_stack_pointer+0xf8007c9c>
    88b0:	d9002217 	ldw	r4,136(sp)
    88b4:	d9402417 	ldw	r5,144(sp)
    88b8:	20800017 	ldw	r2,0(r4)
    88bc:	21000104 	addi	r4,r4,4
    88c0:	d9002215 	stw	r4,136(sp)
    88c4:	11400015 	stw	r5,0(r2)
    88c8:	003b3d06 	br	75c0 <__alt_exception_stack_pointer+0xf80075c0>
    88cc:	01400074 	movhi	r5,1
    88d0:	297f5a04 	addi	r5,r5,-664
    88d4:	d9402315 	stw	r5,140(sp)
    88d8:	d9401b17 	ldw	r5,108(sp)
    88dc:	29400044 	addi	r5,r5,1
    88e0:	003e6d06 	br	8298 <__alt_exception_stack_pointer+0xf8008298>
    88e4:	8029883a 	mov	r20,r16
    88e8:	dd401d83 	ldbu	r21,118(sp)
    88ec:	df002215 	stw	fp,136(sp)
    88f0:	0021883a 	mov	r16,zero
    88f4:	003c0106 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    88f8:	00c00074 	movhi	r3,1
    88fc:	18ff5604 	addi	r3,r3,-680
    8900:	d8c02315 	stw	r3,140(sp)
    8904:	280d883a 	mov	r6,r5
    8908:	003c6906 	br	7ab0 <__alt_exception_stack_pointer+0xf8007ab0>
    890c:	802d883a 	mov	r22,r16
    8910:	0021883a 	mov	r16,zero
    8914:	003b5406 	br	7668 <__alt_exception_stack_pointer+0xf8007668>
    8918:	1823883a 	mov	r17,r3
    891c:	003cf306 	br	7cec <__alt_exception_stack_pointer+0xf8007cec>
    8920:	1823883a 	mov	r17,r3
    8924:	003cad06 	br	7bdc <__alt_exception_stack_pointer+0xf8007bdc>
    8928:	0027883a 	mov	r19,zero
    892c:	003fdc06 	br	88a0 <__alt_exception_stack_pointer+0xf80088a0>
    8930:	d9402217 	ldw	r5,136(sp)
    8934:	8005883a 	mov	r2,r16
    8938:	b0c00043 	ldbu	r3,1(r22)
    893c:	2c000017 	ldw	r16,0(r5)
    8940:	29000104 	addi	r4,r5,4
    8944:	d9002215 	stw	r4,136(sp)
    8948:	102d883a 	mov	r22,r2
    894c:	803fa50e 	bge	r16,zero,87e4 <__alt_exception_stack_pointer+0xf80087e4>
    8950:	18c03fcc 	andi	r3,r3,255
    8954:	18c0201c 	xori	r3,r3,128
    8958:	043fffc4 	movi	r16,-1
    895c:	18ffe004 	addi	r3,r3,-128
    8960:	003b4006 	br	7664 <__alt_exception_stack_pointer+0xf8007664>
    8964:	d9402303 	ldbu	r5,140(sp)
    8968:	d9401d85 	stb	r5,118(sp)
    896c:	003cae06 	br	7c28 <__alt_exception_stack_pointer+0xf8007c28>
    8970:	d8c02303 	ldbu	r3,140(sp)
    8974:	d8c01d85 	stb	r3,118(sp)
    8978:	003d1406 	br	7dcc <__alt_exception_stack_pointer+0xf8007dcc>
    897c:	d8c02303 	ldbu	r3,140(sp)
    8980:	d8c01d85 	stb	r3,118(sp)
    8984:	003cca06 	br	7cb0 <__alt_exception_stack_pointer+0xf8007cb0>
    8988:	8880004c 	andi	r2,r17,1
    898c:	002b883a 	mov	r21,zero
    8990:	10000526 	beq	r2,zero,89a8 <___vfiprintf_internal_r+0x14b8>
    8994:	00800c04 	movi	r2,48
    8998:	d88019c5 	stb	r2,103(sp)
    899c:	dd002817 	ldw	r20,160(sp)
    89a0:	ddc019c4 	addi	r23,sp,103
    89a4:	003bd506 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    89a8:	0029883a 	mov	r20,zero
    89ac:	ddc01a04 	addi	r23,sp,104
    89b0:	003bd206 	br	78fc <__alt_exception_stack_pointer+0xf80078fc>
    89b4:	d9002303 	ldbu	r4,140(sp)
    89b8:	d9001d85 	stb	r4,118(sp)
    89bc:	003da606 	br	8058 <__alt_exception_stack_pointer+0xf8008058>
    89c0:	d8c02303 	ldbu	r3,140(sp)
    89c4:	d8c01d85 	stb	r3,118(sp)
    89c8:	003c7606 	br	7ba4 <__alt_exception_stack_pointer+0xf8007ba4>
    89cc:	d8c02303 	ldbu	r3,140(sp)
    89d0:	d8c01d85 	stb	r3,118(sp)
    89d4:	003c6506 	br	7b6c <__alt_exception_stack_pointer+0xf8007b6c>
    89d8:	d9002303 	ldbu	r4,140(sp)
    89dc:	d9001d85 	stb	r4,118(sp)
    89e0:	003d3d06 	br	7ed8 <__alt_exception_stack_pointer+0xf8007ed8>
    89e4:	d8c02303 	ldbu	r3,140(sp)
    89e8:	d8c01d85 	stb	r3,118(sp)
    89ec:	003d1d06 	br	7e64 <__alt_exception_stack_pointer+0xf8007e64>
    89f0:	d8c02303 	ldbu	r3,140(sp)
    89f4:	d8c01d85 	stb	r3,118(sp)
    89f8:	003d0306 	br	7e08 <__alt_exception_stack_pointer+0xf8007e08>

000089fc <__vfiprintf_internal>:
    89fc:	00800074 	movhi	r2,1
    8a00:	10865c04 	addi	r2,r2,6512
    8a04:	300f883a 	mov	r7,r6
    8a08:	280d883a 	mov	r6,r5
    8a0c:	200b883a 	mov	r5,r4
    8a10:	11000017 	ldw	r4,0(r2)
    8a14:	00074f01 	jmpi	74f0 <___vfiprintf_internal_r>

00008a18 <__sbprintf>:
    8a18:	2880030b 	ldhu	r2,12(r5)
    8a1c:	2ac01917 	ldw	r11,100(r5)
    8a20:	2a80038b 	ldhu	r10,14(r5)
    8a24:	2a400717 	ldw	r9,28(r5)
    8a28:	2a000917 	ldw	r8,36(r5)
    8a2c:	defee204 	addi	sp,sp,-1144
    8a30:	00c10004 	movi	r3,1024
    8a34:	dc011a15 	stw	r16,1128(sp)
    8a38:	10bfff4c 	andi	r2,r2,65533
    8a3c:	2821883a 	mov	r16,r5
    8a40:	d8cb883a 	add	r5,sp,r3
    8a44:	dc811c15 	stw	r18,1136(sp)
    8a48:	dc411b15 	stw	r17,1132(sp)
    8a4c:	dfc11d15 	stw	ra,1140(sp)
    8a50:	2025883a 	mov	r18,r4
    8a54:	d881030d 	sth	r2,1036(sp)
    8a58:	dac11915 	stw	r11,1124(sp)
    8a5c:	da81038d 	sth	r10,1038(sp)
    8a60:	da410715 	stw	r9,1052(sp)
    8a64:	da010915 	stw	r8,1060(sp)
    8a68:	dec10015 	stw	sp,1024(sp)
    8a6c:	dec10415 	stw	sp,1040(sp)
    8a70:	d8c10215 	stw	r3,1032(sp)
    8a74:	d8c10515 	stw	r3,1044(sp)
    8a78:	d8010615 	stw	zero,1048(sp)
    8a7c:	00074f00 	call	74f0 <___vfiprintf_internal_r>
    8a80:	1023883a 	mov	r17,r2
    8a84:	10000416 	blt	r2,zero,8a98 <__sbprintf+0x80>
    8a88:	d9410004 	addi	r5,sp,1024
    8a8c:	9009883a 	mov	r4,r18
    8a90:	000501c0 	call	501c <_fflush_r>
    8a94:	10000d1e 	bne	r2,zero,8acc <__sbprintf+0xb4>
    8a98:	d881030b 	ldhu	r2,1036(sp)
    8a9c:	1080100c 	andi	r2,r2,64
    8aa0:	10000326 	beq	r2,zero,8ab0 <__sbprintf+0x98>
    8aa4:	8080030b 	ldhu	r2,12(r16)
    8aa8:	10801014 	ori	r2,r2,64
    8aac:	8080030d 	sth	r2,12(r16)
    8ab0:	8805883a 	mov	r2,r17
    8ab4:	dfc11d17 	ldw	ra,1140(sp)
    8ab8:	dc811c17 	ldw	r18,1136(sp)
    8abc:	dc411b17 	ldw	r17,1132(sp)
    8ac0:	dc011a17 	ldw	r16,1128(sp)
    8ac4:	dec11e04 	addi	sp,sp,1144
    8ac8:	f800283a 	ret
    8acc:	047fffc4 	movi	r17,-1
    8ad0:	003ff106 	br	8a98 <__alt_exception_stack_pointer+0xf8008a98>

00008ad4 <_write_r>:
    8ad4:	defffd04 	addi	sp,sp,-12
    8ad8:	2805883a 	mov	r2,r5
    8adc:	dc000015 	stw	r16,0(sp)
    8ae0:	04000074 	movhi	r16,1
    8ae4:	dc400115 	stw	r17,4(sp)
    8ae8:	300b883a 	mov	r5,r6
    8aec:	840d2504 	addi	r16,r16,13460
    8af0:	2023883a 	mov	r17,r4
    8af4:	380d883a 	mov	r6,r7
    8af8:	1009883a 	mov	r4,r2
    8afc:	dfc00215 	stw	ra,8(sp)
    8b00:	80000015 	stw	zero,0(r16)
    8b04:	000dca00 	call	dca0 <write>
    8b08:	00ffffc4 	movi	r3,-1
    8b0c:	10c00526 	beq	r2,r3,8b24 <_write_r+0x50>
    8b10:	dfc00217 	ldw	ra,8(sp)
    8b14:	dc400117 	ldw	r17,4(sp)
    8b18:	dc000017 	ldw	r16,0(sp)
    8b1c:	dec00304 	addi	sp,sp,12
    8b20:	f800283a 	ret
    8b24:	80c00017 	ldw	r3,0(r16)
    8b28:	183ff926 	beq	r3,zero,8b10 <__alt_exception_stack_pointer+0xf8008b10>
    8b2c:	88c00015 	stw	r3,0(r17)
    8b30:	003ff706 	br	8b10 <__alt_exception_stack_pointer+0xf8008b10>

00008b34 <_close_r>:
    8b34:	defffd04 	addi	sp,sp,-12
    8b38:	dc000015 	stw	r16,0(sp)
    8b3c:	04000074 	movhi	r16,1
    8b40:	dc400115 	stw	r17,4(sp)
    8b44:	840d2504 	addi	r16,r16,13460
    8b48:	2023883a 	mov	r17,r4
    8b4c:	2809883a 	mov	r4,r5
    8b50:	dfc00215 	stw	ra,8(sp)
    8b54:	80000015 	stw	zero,0(r16)
    8b58:	000d4480 	call	d448 <close>
    8b5c:	00ffffc4 	movi	r3,-1
    8b60:	10c00526 	beq	r2,r3,8b78 <_close_r+0x44>
    8b64:	dfc00217 	ldw	ra,8(sp)
    8b68:	dc400117 	ldw	r17,4(sp)
    8b6c:	dc000017 	ldw	r16,0(sp)
    8b70:	dec00304 	addi	sp,sp,12
    8b74:	f800283a 	ret
    8b78:	80c00017 	ldw	r3,0(r16)
    8b7c:	183ff926 	beq	r3,zero,8b64 <__alt_exception_stack_pointer+0xf8008b64>
    8b80:	88c00015 	stw	r3,0(r17)
    8b84:	003ff706 	br	8b64 <__alt_exception_stack_pointer+0xf8008b64>

00008b88 <_calloc_r>:
    8b88:	defffe04 	addi	sp,sp,-8
    8b8c:	2805883a 	mov	r2,r5
    8b90:	dc000015 	stw	r16,0(sp)
    8b94:	300b883a 	mov	r5,r6
    8b98:	2021883a 	mov	r16,r4
    8b9c:	1009883a 	mov	r4,r2
    8ba0:	dfc00115 	stw	ra,4(sp)
    8ba4:	000072c0 	call	72c <__mulsi3>
    8ba8:	100b883a 	mov	r5,r2
    8bac:	8009883a 	mov	r4,r16
    8bb0:	000077c0 	call	77c <_malloc_r>
    8bb4:	10002926 	beq	r2,zero,8c5c <_calloc_r+0xd4>
    8bb8:	11bfff17 	ldw	r6,-4(r2)
    8bbc:	1021883a 	mov	r16,r2
    8bc0:	00bfff04 	movi	r2,-4
    8bc4:	308c703a 	and	r6,r6,r2
    8bc8:	00c00904 	movi	r3,36
    8bcc:	308d883a 	add	r6,r6,r2
    8bd0:	19801636 	bltu	r3,r6,8c2c <_calloc_r+0xa4>
    8bd4:	008004c4 	movi	r2,19
    8bd8:	11800b2e 	bgeu	r2,r6,8c08 <_calloc_r+0x80>
    8bdc:	80000015 	stw	zero,0(r16)
    8be0:	80000115 	stw	zero,4(r16)
    8be4:	008006c4 	movi	r2,27
    8be8:	11801a2e 	bgeu	r2,r6,8c54 <_calloc_r+0xcc>
    8bec:	80000215 	stw	zero,8(r16)
    8bf0:	80000315 	stw	zero,12(r16)
    8bf4:	30c0151e 	bne	r6,r3,8c4c <_calloc_r+0xc4>
    8bf8:	80000415 	stw	zero,16(r16)
    8bfc:	80800604 	addi	r2,r16,24
    8c00:	80000515 	stw	zero,20(r16)
    8c04:	00000106 	br	8c0c <_calloc_r+0x84>
    8c08:	8005883a 	mov	r2,r16
    8c0c:	10000015 	stw	zero,0(r2)
    8c10:	10000115 	stw	zero,4(r2)
    8c14:	10000215 	stw	zero,8(r2)
    8c18:	8005883a 	mov	r2,r16
    8c1c:	dfc00117 	ldw	ra,4(sp)
    8c20:	dc000017 	ldw	r16,0(sp)
    8c24:	dec00204 	addi	sp,sp,8
    8c28:	f800283a 	ret
    8c2c:	000b883a 	mov	r5,zero
    8c30:	8009883a 	mov	r4,r16
    8c34:	0005ed80 	call	5ed8 <memset>
    8c38:	8005883a 	mov	r2,r16
    8c3c:	dfc00117 	ldw	ra,4(sp)
    8c40:	dc000017 	ldw	r16,0(sp)
    8c44:	dec00204 	addi	sp,sp,8
    8c48:	f800283a 	ret
    8c4c:	80800404 	addi	r2,r16,16
    8c50:	003fee06 	br	8c0c <__alt_exception_stack_pointer+0xf8008c0c>
    8c54:	80800204 	addi	r2,r16,8
    8c58:	003fec06 	br	8c0c <__alt_exception_stack_pointer+0xf8008c0c>
    8c5c:	0005883a 	mov	r2,zero
    8c60:	003fee06 	br	8c1c <__alt_exception_stack_pointer+0xf8008c1c>

00008c64 <_fclose_r>:
    8c64:	28003926 	beq	r5,zero,8d4c <_fclose_r+0xe8>
    8c68:	defffc04 	addi	sp,sp,-16
    8c6c:	dc400115 	stw	r17,4(sp)
    8c70:	dc000015 	stw	r16,0(sp)
    8c74:	dfc00315 	stw	ra,12(sp)
    8c78:	dc800215 	stw	r18,8(sp)
    8c7c:	2023883a 	mov	r17,r4
    8c80:	2821883a 	mov	r16,r5
    8c84:	20000226 	beq	r4,zero,8c90 <_fclose_r+0x2c>
    8c88:	20800e17 	ldw	r2,56(r4)
    8c8c:	10002726 	beq	r2,zero,8d2c <_fclose_r+0xc8>
    8c90:	8080030f 	ldh	r2,12(r16)
    8c94:	1000071e 	bne	r2,zero,8cb4 <_fclose_r+0x50>
    8c98:	0005883a 	mov	r2,zero
    8c9c:	dfc00317 	ldw	ra,12(sp)
    8ca0:	dc800217 	ldw	r18,8(sp)
    8ca4:	dc400117 	ldw	r17,4(sp)
    8ca8:	dc000017 	ldw	r16,0(sp)
    8cac:	dec00404 	addi	sp,sp,16
    8cb0:	f800283a 	ret
    8cb4:	800b883a 	mov	r5,r16
    8cb8:	8809883a 	mov	r4,r17
    8cbc:	0004e000 	call	4e00 <__sflush_r>
    8cc0:	1025883a 	mov	r18,r2
    8cc4:	80800b17 	ldw	r2,44(r16)
    8cc8:	10000426 	beq	r2,zero,8cdc <_fclose_r+0x78>
    8ccc:	81400717 	ldw	r5,28(r16)
    8cd0:	8809883a 	mov	r4,r17
    8cd4:	103ee83a 	callr	r2
    8cd8:	10001616 	blt	r2,zero,8d34 <_fclose_r+0xd0>
    8cdc:	8080030b 	ldhu	r2,12(r16)
    8ce0:	1080200c 	andi	r2,r2,128
    8ce4:	1000151e 	bne	r2,zero,8d3c <_fclose_r+0xd8>
    8ce8:	81400c17 	ldw	r5,48(r16)
    8cec:	28000526 	beq	r5,zero,8d04 <_fclose_r+0xa0>
    8cf0:	80801004 	addi	r2,r16,64
    8cf4:	28800226 	beq	r5,r2,8d00 <_fclose_r+0x9c>
    8cf8:	8809883a 	mov	r4,r17
    8cfc:	000557c0 	call	557c <_free_r>
    8d00:	80000c15 	stw	zero,48(r16)
    8d04:	81401117 	ldw	r5,68(r16)
    8d08:	28000326 	beq	r5,zero,8d18 <_fclose_r+0xb4>
    8d0c:	8809883a 	mov	r4,r17
    8d10:	000557c0 	call	557c <_free_r>
    8d14:	80001115 	stw	zero,68(r16)
    8d18:	00054180 	call	5418 <__sfp_lock_acquire>
    8d1c:	8000030d 	sth	zero,12(r16)
    8d20:	000541c0 	call	541c <__sfp_lock_release>
    8d24:	9005883a 	mov	r2,r18
    8d28:	003fdc06 	br	8c9c <__alt_exception_stack_pointer+0xf8008c9c>
    8d2c:	00054080 	call	5408 <__sinit>
    8d30:	003fd706 	br	8c90 <__alt_exception_stack_pointer+0xf8008c90>
    8d34:	04bfffc4 	movi	r18,-1
    8d38:	003fe806 	br	8cdc <__alt_exception_stack_pointer+0xf8008cdc>
    8d3c:	81400417 	ldw	r5,16(r16)
    8d40:	8809883a 	mov	r4,r17
    8d44:	000557c0 	call	557c <_free_r>
    8d48:	003fe706 	br	8ce8 <__alt_exception_stack_pointer+0xf8008ce8>
    8d4c:	0005883a 	mov	r2,zero
    8d50:	f800283a 	ret

00008d54 <fclose>:
    8d54:	00800074 	movhi	r2,1
    8d58:	10865c04 	addi	r2,r2,6512
    8d5c:	200b883a 	mov	r5,r4
    8d60:	11000017 	ldw	r4,0(r2)
    8d64:	0008c641 	jmpi	8c64 <_fclose_r>

00008d68 <__fputwc>:
    8d68:	defff804 	addi	sp,sp,-32
    8d6c:	dcc00415 	stw	r19,16(sp)
    8d70:	dc800315 	stw	r18,12(sp)
    8d74:	dc000115 	stw	r16,4(sp)
    8d78:	dfc00715 	stw	ra,28(sp)
    8d7c:	dd400615 	stw	r21,24(sp)
    8d80:	dd000515 	stw	r20,20(sp)
    8d84:	dc400215 	stw	r17,8(sp)
    8d88:	2027883a 	mov	r19,r4
    8d8c:	2825883a 	mov	r18,r5
    8d90:	3021883a 	mov	r16,r6
    8d94:	0005a9c0 	call	5a9c <__locale_mb_cur_max>
    8d98:	00c00044 	movi	r3,1
    8d9c:	10c03e26 	beq	r2,r3,8e98 <__fputwc+0x130>
    8da0:	81c01704 	addi	r7,r16,92
    8da4:	900d883a 	mov	r6,r18
    8da8:	d80b883a 	mov	r5,sp
    8dac:	9809883a 	mov	r4,r19
    8db0:	0009dc00 	call	9dc0 <_wcrtomb_r>
    8db4:	1029883a 	mov	r20,r2
    8db8:	00bfffc4 	movi	r2,-1
    8dbc:	a0802026 	beq	r20,r2,8e40 <__fputwc+0xd8>
    8dc0:	d9400003 	ldbu	r5,0(sp)
    8dc4:	a0001c26 	beq	r20,zero,8e38 <__fputwc+0xd0>
    8dc8:	0023883a 	mov	r17,zero
    8dcc:	05400284 	movi	r21,10
    8dd0:	00000906 	br	8df8 <__fputwc+0x90>
    8dd4:	80800017 	ldw	r2,0(r16)
    8dd8:	11400005 	stb	r5,0(r2)
    8ddc:	80c00017 	ldw	r3,0(r16)
    8de0:	18c00044 	addi	r3,r3,1
    8de4:	80c00015 	stw	r3,0(r16)
    8de8:	8c400044 	addi	r17,r17,1
    8dec:	dc45883a 	add	r2,sp,r17
    8df0:	8d00112e 	bgeu	r17,r20,8e38 <__fputwc+0xd0>
    8df4:	11400003 	ldbu	r5,0(r2)
    8df8:	80c00217 	ldw	r3,8(r16)
    8dfc:	18ffffc4 	addi	r3,r3,-1
    8e00:	80c00215 	stw	r3,8(r16)
    8e04:	183ff30e 	bge	r3,zero,8dd4 <__alt_exception_stack_pointer+0xf8008dd4>
    8e08:	80800617 	ldw	r2,24(r16)
    8e0c:	18801916 	blt	r3,r2,8e74 <__fputwc+0x10c>
    8e10:	80800017 	ldw	r2,0(r16)
    8e14:	11400005 	stb	r5,0(r2)
    8e18:	80800017 	ldw	r2,0(r16)
    8e1c:	10c00003 	ldbu	r3,0(r2)
    8e20:	10800044 	addi	r2,r2,1
    8e24:	1d402326 	beq	r3,r21,8eb4 <__fputwc+0x14c>
    8e28:	80800015 	stw	r2,0(r16)
    8e2c:	8c400044 	addi	r17,r17,1
    8e30:	dc45883a 	add	r2,sp,r17
    8e34:	8d3fef36 	bltu	r17,r20,8df4 <__alt_exception_stack_pointer+0xf8008df4>
    8e38:	9005883a 	mov	r2,r18
    8e3c:	00000406 	br	8e50 <__fputwc+0xe8>
    8e40:	80c0030b 	ldhu	r3,12(r16)
    8e44:	a005883a 	mov	r2,r20
    8e48:	18c01014 	ori	r3,r3,64
    8e4c:	80c0030d 	sth	r3,12(r16)
    8e50:	dfc00717 	ldw	ra,28(sp)
    8e54:	dd400617 	ldw	r21,24(sp)
    8e58:	dd000517 	ldw	r20,20(sp)
    8e5c:	dcc00417 	ldw	r19,16(sp)
    8e60:	dc800317 	ldw	r18,12(sp)
    8e64:	dc400217 	ldw	r17,8(sp)
    8e68:	dc000117 	ldw	r16,4(sp)
    8e6c:	dec00804 	addi	sp,sp,32
    8e70:	f800283a 	ret
    8e74:	800d883a 	mov	r6,r16
    8e78:	29403fcc 	andi	r5,r5,255
    8e7c:	9809883a 	mov	r4,r19
    8e80:	0009c680 	call	9c68 <__swbuf_r>
    8e84:	10bfffe0 	cmpeqi	r2,r2,-1
    8e88:	10803fcc 	andi	r2,r2,255
    8e8c:	103fd626 	beq	r2,zero,8de8 <__alt_exception_stack_pointer+0xf8008de8>
    8e90:	00bfffc4 	movi	r2,-1
    8e94:	003fee06 	br	8e50 <__alt_exception_stack_pointer+0xf8008e50>
    8e98:	90ffffc4 	addi	r3,r18,-1
    8e9c:	01003f84 	movi	r4,254
    8ea0:	20ffbf36 	bltu	r4,r3,8da0 <__alt_exception_stack_pointer+0xf8008da0>
    8ea4:	900b883a 	mov	r5,r18
    8ea8:	dc800005 	stb	r18,0(sp)
    8eac:	1029883a 	mov	r20,r2
    8eb0:	003fc506 	br	8dc8 <__alt_exception_stack_pointer+0xf8008dc8>
    8eb4:	800d883a 	mov	r6,r16
    8eb8:	a80b883a 	mov	r5,r21
    8ebc:	9809883a 	mov	r4,r19
    8ec0:	0009c680 	call	9c68 <__swbuf_r>
    8ec4:	10bfffe0 	cmpeqi	r2,r2,-1
    8ec8:	003fef06 	br	8e88 <__alt_exception_stack_pointer+0xf8008e88>

00008ecc <_fputwc_r>:
    8ecc:	3080030b 	ldhu	r2,12(r6)
    8ed0:	10c8000c 	andi	r3,r2,8192
    8ed4:	1800051e 	bne	r3,zero,8eec <_fputwc_r+0x20>
    8ed8:	30c01917 	ldw	r3,100(r6)
    8edc:	10880014 	ori	r2,r2,8192
    8ee0:	3080030d 	sth	r2,12(r6)
    8ee4:	18880014 	ori	r2,r3,8192
    8ee8:	30801915 	stw	r2,100(r6)
    8eec:	0008d681 	jmpi	8d68 <__fputwc>

00008ef0 <fputwc>:
    8ef0:	00800074 	movhi	r2,1
    8ef4:	defffc04 	addi	sp,sp,-16
    8ef8:	10865c04 	addi	r2,r2,6512
    8efc:	dc000115 	stw	r16,4(sp)
    8f00:	14000017 	ldw	r16,0(r2)
    8f04:	dc400215 	stw	r17,8(sp)
    8f08:	dfc00315 	stw	ra,12(sp)
    8f0c:	2023883a 	mov	r17,r4
    8f10:	80000226 	beq	r16,zero,8f1c <fputwc+0x2c>
    8f14:	80800e17 	ldw	r2,56(r16)
    8f18:	10001026 	beq	r2,zero,8f5c <fputwc+0x6c>
    8f1c:	2880030b 	ldhu	r2,12(r5)
    8f20:	10c8000c 	andi	r3,r2,8192
    8f24:	1800051e 	bne	r3,zero,8f3c <fputwc+0x4c>
    8f28:	28c01917 	ldw	r3,100(r5)
    8f2c:	10880014 	ori	r2,r2,8192
    8f30:	2880030d 	sth	r2,12(r5)
    8f34:	18880014 	ori	r2,r3,8192
    8f38:	28801915 	stw	r2,100(r5)
    8f3c:	280d883a 	mov	r6,r5
    8f40:	8009883a 	mov	r4,r16
    8f44:	880b883a 	mov	r5,r17
    8f48:	dfc00317 	ldw	ra,12(sp)
    8f4c:	dc400217 	ldw	r17,8(sp)
    8f50:	dc000117 	ldw	r16,4(sp)
    8f54:	dec00404 	addi	sp,sp,16
    8f58:	0008d681 	jmpi	8d68 <__fputwc>
    8f5c:	8009883a 	mov	r4,r16
    8f60:	d9400015 	stw	r5,0(sp)
    8f64:	00054080 	call	5408 <__sinit>
    8f68:	d9400017 	ldw	r5,0(sp)
    8f6c:	003feb06 	br	8f1c <__alt_exception_stack_pointer+0xf8008f1c>

00008f70 <_fstat_r>:
    8f70:	defffd04 	addi	sp,sp,-12
    8f74:	2805883a 	mov	r2,r5
    8f78:	dc000015 	stw	r16,0(sp)
    8f7c:	04000074 	movhi	r16,1
    8f80:	dc400115 	stw	r17,4(sp)
    8f84:	840d2504 	addi	r16,r16,13460
    8f88:	2023883a 	mov	r17,r4
    8f8c:	300b883a 	mov	r5,r6
    8f90:	1009883a 	mov	r4,r2
    8f94:	dfc00215 	stw	ra,8(sp)
    8f98:	80000015 	stw	zero,0(r16)
    8f9c:	000d5880 	call	d588 <fstat>
    8fa0:	00ffffc4 	movi	r3,-1
    8fa4:	10c00526 	beq	r2,r3,8fbc <_fstat_r+0x4c>
    8fa8:	dfc00217 	ldw	ra,8(sp)
    8fac:	dc400117 	ldw	r17,4(sp)
    8fb0:	dc000017 	ldw	r16,0(sp)
    8fb4:	dec00304 	addi	sp,sp,12
    8fb8:	f800283a 	ret
    8fbc:	80c00017 	ldw	r3,0(r16)
    8fc0:	183ff926 	beq	r3,zero,8fa8 <__alt_exception_stack_pointer+0xf8008fa8>
    8fc4:	88c00015 	stw	r3,0(r17)
    8fc8:	003ff706 	br	8fa8 <__alt_exception_stack_pointer+0xf8008fa8>

00008fcc <__sfvwrite_r>:
    8fcc:	30800217 	ldw	r2,8(r6)
    8fd0:	10006726 	beq	r2,zero,9170 <__sfvwrite_r+0x1a4>
    8fd4:	28c0030b 	ldhu	r3,12(r5)
    8fd8:	defff404 	addi	sp,sp,-48
    8fdc:	dd400715 	stw	r21,28(sp)
    8fe0:	dd000615 	stw	r20,24(sp)
    8fe4:	dc000215 	stw	r16,8(sp)
    8fe8:	dfc00b15 	stw	ra,44(sp)
    8fec:	df000a15 	stw	fp,40(sp)
    8ff0:	ddc00915 	stw	r23,36(sp)
    8ff4:	dd800815 	stw	r22,32(sp)
    8ff8:	dcc00515 	stw	r19,20(sp)
    8ffc:	dc800415 	stw	r18,16(sp)
    9000:	dc400315 	stw	r17,12(sp)
    9004:	1880020c 	andi	r2,r3,8
    9008:	2821883a 	mov	r16,r5
    900c:	202b883a 	mov	r21,r4
    9010:	3029883a 	mov	r20,r6
    9014:	10002726 	beq	r2,zero,90b4 <__sfvwrite_r+0xe8>
    9018:	28800417 	ldw	r2,16(r5)
    901c:	10002526 	beq	r2,zero,90b4 <__sfvwrite_r+0xe8>
    9020:	1880008c 	andi	r2,r3,2
    9024:	a4400017 	ldw	r17,0(r20)
    9028:	10002a26 	beq	r2,zero,90d4 <__sfvwrite_r+0x108>
    902c:	05a00034 	movhi	r22,32768
    9030:	0027883a 	mov	r19,zero
    9034:	0025883a 	mov	r18,zero
    9038:	b5bf0004 	addi	r22,r22,-1024
    903c:	980d883a 	mov	r6,r19
    9040:	a809883a 	mov	r4,r21
    9044:	90004626 	beq	r18,zero,9160 <__sfvwrite_r+0x194>
    9048:	900f883a 	mov	r7,r18
    904c:	b480022e 	bgeu	r22,r18,9058 <__sfvwrite_r+0x8c>
    9050:	01e00034 	movhi	r7,32768
    9054:	39ff0004 	addi	r7,r7,-1024
    9058:	80800917 	ldw	r2,36(r16)
    905c:	81400717 	ldw	r5,28(r16)
    9060:	103ee83a 	callr	r2
    9064:	00805a0e 	bge	zero,r2,91d0 <__sfvwrite_r+0x204>
    9068:	a0c00217 	ldw	r3,8(r20)
    906c:	98a7883a 	add	r19,r19,r2
    9070:	90a5c83a 	sub	r18,r18,r2
    9074:	1885c83a 	sub	r2,r3,r2
    9078:	a0800215 	stw	r2,8(r20)
    907c:	103fef1e 	bne	r2,zero,903c <__alt_exception_stack_pointer+0xf800903c>
    9080:	0005883a 	mov	r2,zero
    9084:	dfc00b17 	ldw	ra,44(sp)
    9088:	df000a17 	ldw	fp,40(sp)
    908c:	ddc00917 	ldw	r23,36(sp)
    9090:	dd800817 	ldw	r22,32(sp)
    9094:	dd400717 	ldw	r21,28(sp)
    9098:	dd000617 	ldw	r20,24(sp)
    909c:	dcc00517 	ldw	r19,20(sp)
    90a0:	dc800417 	ldw	r18,16(sp)
    90a4:	dc400317 	ldw	r17,12(sp)
    90a8:	dc000217 	ldw	r16,8(sp)
    90ac:	dec00c04 	addi	sp,sp,48
    90b0:	f800283a 	ret
    90b4:	800b883a 	mov	r5,r16
    90b8:	a809883a 	mov	r4,r21
    90bc:	00033fc0 	call	33fc <__swsetup_r>
    90c0:	1000ee1e 	bne	r2,zero,947c <__sfvwrite_r+0x4b0>
    90c4:	80c0030b 	ldhu	r3,12(r16)
    90c8:	a4400017 	ldw	r17,0(r20)
    90cc:	1880008c 	andi	r2,r3,2
    90d0:	103fd61e 	bne	r2,zero,902c <__alt_exception_stack_pointer+0xf800902c>
    90d4:	1880004c 	andi	r2,r3,1
    90d8:	1000421e 	bne	r2,zero,91e4 <__sfvwrite_r+0x218>
    90dc:	0039883a 	mov	fp,zero
    90e0:	0025883a 	mov	r18,zero
    90e4:	90001a26 	beq	r18,zero,9150 <__sfvwrite_r+0x184>
    90e8:	1880800c 	andi	r2,r3,512
    90ec:	84c00217 	ldw	r19,8(r16)
    90f0:	10002126 	beq	r2,zero,9178 <__sfvwrite_r+0x1ac>
    90f4:	982f883a 	mov	r23,r19
    90f8:	94c09636 	bltu	r18,r19,9354 <__sfvwrite_r+0x388>
    90fc:	1881200c 	andi	r2,r3,1152
    9100:	1000a11e 	bne	r2,zero,9388 <__sfvwrite_r+0x3bc>
    9104:	81000017 	ldw	r4,0(r16)
    9108:	b80d883a 	mov	r6,r23
    910c:	e00b883a 	mov	r5,fp
    9110:	00095480 	call	9548 <memmove>
    9114:	80c00217 	ldw	r3,8(r16)
    9118:	81000017 	ldw	r4,0(r16)
    911c:	9005883a 	mov	r2,r18
    9120:	1ce7c83a 	sub	r19,r3,r19
    9124:	25cf883a 	add	r7,r4,r23
    9128:	84c00215 	stw	r19,8(r16)
    912c:	81c00015 	stw	r7,0(r16)
    9130:	a0c00217 	ldw	r3,8(r20)
    9134:	e0b9883a 	add	fp,fp,r2
    9138:	90a5c83a 	sub	r18,r18,r2
    913c:	18a7c83a 	sub	r19,r3,r2
    9140:	a4c00215 	stw	r19,8(r20)
    9144:	983fce26 	beq	r19,zero,9080 <__alt_exception_stack_pointer+0xf8009080>
    9148:	80c0030b 	ldhu	r3,12(r16)
    914c:	903fe61e 	bne	r18,zero,90e8 <__alt_exception_stack_pointer+0xf80090e8>
    9150:	8f000017 	ldw	fp,0(r17)
    9154:	8c800117 	ldw	r18,4(r17)
    9158:	8c400204 	addi	r17,r17,8
    915c:	003fe106 	br	90e4 <__alt_exception_stack_pointer+0xf80090e4>
    9160:	8cc00017 	ldw	r19,0(r17)
    9164:	8c800117 	ldw	r18,4(r17)
    9168:	8c400204 	addi	r17,r17,8
    916c:	003fb306 	br	903c <__alt_exception_stack_pointer+0xf800903c>
    9170:	0005883a 	mov	r2,zero
    9174:	f800283a 	ret
    9178:	81000017 	ldw	r4,0(r16)
    917c:	80800417 	ldw	r2,16(r16)
    9180:	11005a36 	bltu	r2,r4,92ec <__sfvwrite_r+0x320>
    9184:	85c00517 	ldw	r23,20(r16)
    9188:	95c05836 	bltu	r18,r23,92ec <__sfvwrite_r+0x320>
    918c:	00a00034 	movhi	r2,32768
    9190:	10bfffc4 	addi	r2,r2,-1
    9194:	9009883a 	mov	r4,r18
    9198:	1480012e 	bgeu	r2,r18,91a0 <__sfvwrite_r+0x1d4>
    919c:	1009883a 	mov	r4,r2
    91a0:	b80b883a 	mov	r5,r23
    91a4:	00005780 	call	578 <__divsi3>
    91a8:	b80b883a 	mov	r5,r23
    91ac:	1009883a 	mov	r4,r2
    91b0:	000072c0 	call	72c <__mulsi3>
    91b4:	81400717 	ldw	r5,28(r16)
    91b8:	80c00917 	ldw	r3,36(r16)
    91bc:	100f883a 	mov	r7,r2
    91c0:	e00d883a 	mov	r6,fp
    91c4:	a809883a 	mov	r4,r21
    91c8:	183ee83a 	callr	r3
    91cc:	00bfd816 	blt	zero,r2,9130 <__alt_exception_stack_pointer+0xf8009130>
    91d0:	8080030b 	ldhu	r2,12(r16)
    91d4:	10801014 	ori	r2,r2,64
    91d8:	8080030d 	sth	r2,12(r16)
    91dc:	00bfffc4 	movi	r2,-1
    91e0:	003fa806 	br	9084 <__alt_exception_stack_pointer+0xf8009084>
    91e4:	0027883a 	mov	r19,zero
    91e8:	0011883a 	mov	r8,zero
    91ec:	0039883a 	mov	fp,zero
    91f0:	0025883a 	mov	r18,zero
    91f4:	90001f26 	beq	r18,zero,9274 <__sfvwrite_r+0x2a8>
    91f8:	40005a26 	beq	r8,zero,9364 <__sfvwrite_r+0x398>
    91fc:	982d883a 	mov	r22,r19
    9200:	94c0012e 	bgeu	r18,r19,9208 <__sfvwrite_r+0x23c>
    9204:	902d883a 	mov	r22,r18
    9208:	81000017 	ldw	r4,0(r16)
    920c:	80800417 	ldw	r2,16(r16)
    9210:	b02f883a 	mov	r23,r22
    9214:	81c00517 	ldw	r7,20(r16)
    9218:	1100032e 	bgeu	r2,r4,9228 <__sfvwrite_r+0x25c>
    921c:	80c00217 	ldw	r3,8(r16)
    9220:	38c7883a 	add	r3,r7,r3
    9224:	1d801816 	blt	r3,r22,9288 <__sfvwrite_r+0x2bc>
    9228:	b1c03e16 	blt	r22,r7,9324 <__sfvwrite_r+0x358>
    922c:	80800917 	ldw	r2,36(r16)
    9230:	81400717 	ldw	r5,28(r16)
    9234:	e00d883a 	mov	r6,fp
    9238:	da000115 	stw	r8,4(sp)
    923c:	a809883a 	mov	r4,r21
    9240:	103ee83a 	callr	r2
    9244:	102f883a 	mov	r23,r2
    9248:	da000117 	ldw	r8,4(sp)
    924c:	00bfe00e 	bge	zero,r2,91d0 <__alt_exception_stack_pointer+0xf80091d0>
    9250:	9de7c83a 	sub	r19,r19,r23
    9254:	98001f26 	beq	r19,zero,92d4 <__sfvwrite_r+0x308>
    9258:	a0800217 	ldw	r2,8(r20)
    925c:	e5f9883a 	add	fp,fp,r23
    9260:	95e5c83a 	sub	r18,r18,r23
    9264:	15efc83a 	sub	r23,r2,r23
    9268:	a5c00215 	stw	r23,8(r20)
    926c:	b83f8426 	beq	r23,zero,9080 <__alt_exception_stack_pointer+0xf8009080>
    9270:	903fe11e 	bne	r18,zero,91f8 <__alt_exception_stack_pointer+0xf80091f8>
    9274:	8f000017 	ldw	fp,0(r17)
    9278:	8c800117 	ldw	r18,4(r17)
    927c:	0011883a 	mov	r8,zero
    9280:	8c400204 	addi	r17,r17,8
    9284:	003fdb06 	br	91f4 <__alt_exception_stack_pointer+0xf80091f4>
    9288:	180d883a 	mov	r6,r3
    928c:	e00b883a 	mov	r5,fp
    9290:	da000115 	stw	r8,4(sp)
    9294:	d8c00015 	stw	r3,0(sp)
    9298:	00095480 	call	9548 <memmove>
    929c:	d8c00017 	ldw	r3,0(sp)
    92a0:	80800017 	ldw	r2,0(r16)
    92a4:	800b883a 	mov	r5,r16
    92a8:	a809883a 	mov	r4,r21
    92ac:	10c5883a 	add	r2,r2,r3
    92b0:	80800015 	stw	r2,0(r16)
    92b4:	d8c00015 	stw	r3,0(sp)
    92b8:	000501c0 	call	501c <_fflush_r>
    92bc:	d8c00017 	ldw	r3,0(sp)
    92c0:	da000117 	ldw	r8,4(sp)
    92c4:	103fc21e 	bne	r2,zero,91d0 <__alt_exception_stack_pointer+0xf80091d0>
    92c8:	182f883a 	mov	r23,r3
    92cc:	9de7c83a 	sub	r19,r19,r23
    92d0:	983fe11e 	bne	r19,zero,9258 <__alt_exception_stack_pointer+0xf8009258>
    92d4:	800b883a 	mov	r5,r16
    92d8:	a809883a 	mov	r4,r21
    92dc:	000501c0 	call	501c <_fflush_r>
    92e0:	103fbb1e 	bne	r2,zero,91d0 <__alt_exception_stack_pointer+0xf80091d0>
    92e4:	0011883a 	mov	r8,zero
    92e8:	003fdb06 	br	9258 <__alt_exception_stack_pointer+0xf8009258>
    92ec:	94c0012e 	bgeu	r18,r19,92f4 <__sfvwrite_r+0x328>
    92f0:	9027883a 	mov	r19,r18
    92f4:	980d883a 	mov	r6,r19
    92f8:	e00b883a 	mov	r5,fp
    92fc:	00095480 	call	9548 <memmove>
    9300:	80800217 	ldw	r2,8(r16)
    9304:	80c00017 	ldw	r3,0(r16)
    9308:	14c5c83a 	sub	r2,r2,r19
    930c:	1cc7883a 	add	r3,r3,r19
    9310:	80800215 	stw	r2,8(r16)
    9314:	80c00015 	stw	r3,0(r16)
    9318:	10004326 	beq	r2,zero,9428 <__sfvwrite_r+0x45c>
    931c:	9805883a 	mov	r2,r19
    9320:	003f8306 	br	9130 <__alt_exception_stack_pointer+0xf8009130>
    9324:	b00d883a 	mov	r6,r22
    9328:	e00b883a 	mov	r5,fp
    932c:	da000115 	stw	r8,4(sp)
    9330:	00095480 	call	9548 <memmove>
    9334:	80800217 	ldw	r2,8(r16)
    9338:	80c00017 	ldw	r3,0(r16)
    933c:	da000117 	ldw	r8,4(sp)
    9340:	1585c83a 	sub	r2,r2,r22
    9344:	1dad883a 	add	r22,r3,r22
    9348:	80800215 	stw	r2,8(r16)
    934c:	85800015 	stw	r22,0(r16)
    9350:	003fbf06 	br	9250 <__alt_exception_stack_pointer+0xf8009250>
    9354:	81000017 	ldw	r4,0(r16)
    9358:	9027883a 	mov	r19,r18
    935c:	902f883a 	mov	r23,r18
    9360:	003f6906 	br	9108 <__alt_exception_stack_pointer+0xf8009108>
    9364:	900d883a 	mov	r6,r18
    9368:	01400284 	movi	r5,10
    936c:	e009883a 	mov	r4,fp
    9370:	0005cac0 	call	5cac <memchr>
    9374:	10003e26 	beq	r2,zero,9470 <__sfvwrite_r+0x4a4>
    9378:	10800044 	addi	r2,r2,1
    937c:	1727c83a 	sub	r19,r2,fp
    9380:	02000044 	movi	r8,1
    9384:	003f9d06 	br	91fc <__alt_exception_stack_pointer+0xf80091fc>
    9388:	80800517 	ldw	r2,20(r16)
    938c:	81400417 	ldw	r5,16(r16)
    9390:	81c00017 	ldw	r7,0(r16)
    9394:	10a7883a 	add	r19,r2,r2
    9398:	9885883a 	add	r2,r19,r2
    939c:	1026d7fa 	srli	r19,r2,31
    93a0:	396dc83a 	sub	r22,r7,r5
    93a4:	b1000044 	addi	r4,r22,1
    93a8:	9885883a 	add	r2,r19,r2
    93ac:	1027d07a 	srai	r19,r2,1
    93b0:	2485883a 	add	r2,r4,r18
    93b4:	980d883a 	mov	r6,r19
    93b8:	9880022e 	bgeu	r19,r2,93c4 <__sfvwrite_r+0x3f8>
    93bc:	1027883a 	mov	r19,r2
    93c0:	100d883a 	mov	r6,r2
    93c4:	18c1000c 	andi	r3,r3,1024
    93c8:	18001c26 	beq	r3,zero,943c <__sfvwrite_r+0x470>
    93cc:	300b883a 	mov	r5,r6
    93d0:	a809883a 	mov	r4,r21
    93d4:	000077c0 	call	77c <_malloc_r>
    93d8:	102f883a 	mov	r23,r2
    93dc:	10002926 	beq	r2,zero,9484 <__sfvwrite_r+0x4b8>
    93e0:	81400417 	ldw	r5,16(r16)
    93e4:	b00d883a 	mov	r6,r22
    93e8:	1009883a 	mov	r4,r2
    93ec:	0005d900 	call	5d90 <memcpy>
    93f0:	8080030b 	ldhu	r2,12(r16)
    93f4:	00fedfc4 	movi	r3,-1153
    93f8:	10c4703a 	and	r2,r2,r3
    93fc:	10802014 	ori	r2,r2,128
    9400:	8080030d 	sth	r2,12(r16)
    9404:	bd89883a 	add	r4,r23,r22
    9408:	9d8fc83a 	sub	r7,r19,r22
    940c:	85c00415 	stw	r23,16(r16)
    9410:	84c00515 	stw	r19,20(r16)
    9414:	81000015 	stw	r4,0(r16)
    9418:	9027883a 	mov	r19,r18
    941c:	81c00215 	stw	r7,8(r16)
    9420:	902f883a 	mov	r23,r18
    9424:	003f3806 	br	9108 <__alt_exception_stack_pointer+0xf8009108>
    9428:	800b883a 	mov	r5,r16
    942c:	a809883a 	mov	r4,r21
    9430:	000501c0 	call	501c <_fflush_r>
    9434:	103fb926 	beq	r2,zero,931c <__alt_exception_stack_pointer+0xf800931c>
    9438:	003f6506 	br	91d0 <__alt_exception_stack_pointer+0xf80091d0>
    943c:	a809883a 	mov	r4,r21
    9440:	00097040 	call	9704 <_realloc_r>
    9444:	102f883a 	mov	r23,r2
    9448:	103fee1e 	bne	r2,zero,9404 <__alt_exception_stack_pointer+0xf8009404>
    944c:	81400417 	ldw	r5,16(r16)
    9450:	a809883a 	mov	r4,r21
    9454:	000557c0 	call	557c <_free_r>
    9458:	8080030b 	ldhu	r2,12(r16)
    945c:	00ffdfc4 	movi	r3,-129
    9460:	1884703a 	and	r2,r3,r2
    9464:	00c00304 	movi	r3,12
    9468:	a8c00015 	stw	r3,0(r21)
    946c:	003f5906 	br	91d4 <__alt_exception_stack_pointer+0xf80091d4>
    9470:	94c00044 	addi	r19,r18,1
    9474:	02000044 	movi	r8,1
    9478:	003f6006 	br	91fc <__alt_exception_stack_pointer+0xf80091fc>
    947c:	00bfffc4 	movi	r2,-1
    9480:	003f0006 	br	9084 <__alt_exception_stack_pointer+0xf8009084>
    9484:	00800304 	movi	r2,12
    9488:	a8800015 	stw	r2,0(r21)
    948c:	8080030b 	ldhu	r2,12(r16)
    9490:	003f5006 	br	91d4 <__alt_exception_stack_pointer+0xf80091d4>

00009494 <_isatty_r>:
    9494:	defffd04 	addi	sp,sp,-12
    9498:	dc000015 	stw	r16,0(sp)
    949c:	04000074 	movhi	r16,1
    94a0:	dc400115 	stw	r17,4(sp)
    94a4:	840d2504 	addi	r16,r16,13460
    94a8:	2023883a 	mov	r17,r4
    94ac:	2809883a 	mov	r4,r5
    94b0:	dfc00215 	stw	ra,8(sp)
    94b4:	80000015 	stw	zero,0(r16)
    94b8:	000d67c0 	call	d67c <isatty>
    94bc:	00ffffc4 	movi	r3,-1
    94c0:	10c00526 	beq	r2,r3,94d8 <_isatty_r+0x44>
    94c4:	dfc00217 	ldw	ra,8(sp)
    94c8:	dc400117 	ldw	r17,4(sp)
    94cc:	dc000017 	ldw	r16,0(sp)
    94d0:	dec00304 	addi	sp,sp,12
    94d4:	f800283a 	ret
    94d8:	80c00017 	ldw	r3,0(r16)
    94dc:	183ff926 	beq	r3,zero,94c4 <__alt_exception_stack_pointer+0xf80094c4>
    94e0:	88c00015 	stw	r3,0(r17)
    94e4:	003ff706 	br	94c4 <__alt_exception_stack_pointer+0xf80094c4>

000094e8 <_lseek_r>:
    94e8:	defffd04 	addi	sp,sp,-12
    94ec:	2805883a 	mov	r2,r5
    94f0:	dc000015 	stw	r16,0(sp)
    94f4:	04000074 	movhi	r16,1
    94f8:	dc400115 	stw	r17,4(sp)
    94fc:	300b883a 	mov	r5,r6
    9500:	840d2504 	addi	r16,r16,13460
    9504:	2023883a 	mov	r17,r4
    9508:	380d883a 	mov	r6,r7
    950c:	1009883a 	mov	r4,r2
    9510:	dfc00215 	stw	ra,8(sp)
    9514:	80000015 	stw	zero,0(r16)
    9518:	000d8500 	call	d850 <lseek>
    951c:	00ffffc4 	movi	r3,-1
    9520:	10c00526 	beq	r2,r3,9538 <_lseek_r+0x50>
    9524:	dfc00217 	ldw	ra,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00304 	addi	sp,sp,12
    9534:	f800283a 	ret
    9538:	80c00017 	ldw	r3,0(r16)
    953c:	183ff926 	beq	r3,zero,9524 <__alt_exception_stack_pointer+0xf8009524>
    9540:	88c00015 	stw	r3,0(r17)
    9544:	003ff706 	br	9524 <__alt_exception_stack_pointer+0xf8009524>

00009548 <memmove>:
    9548:	2005883a 	mov	r2,r4
    954c:	29000b2e 	bgeu	r5,r4,957c <memmove+0x34>
    9550:	298f883a 	add	r7,r5,r6
    9554:	21c0092e 	bgeu	r4,r7,957c <memmove+0x34>
    9558:	2187883a 	add	r3,r4,r6
    955c:	198bc83a 	sub	r5,r3,r6
    9560:	30004826 	beq	r6,zero,9684 <memmove+0x13c>
    9564:	39ffffc4 	addi	r7,r7,-1
    9568:	39000003 	ldbu	r4,0(r7)
    956c:	18ffffc4 	addi	r3,r3,-1
    9570:	19000005 	stb	r4,0(r3)
    9574:	28fffb1e 	bne	r5,r3,9564 <__alt_exception_stack_pointer+0xf8009564>
    9578:	f800283a 	ret
    957c:	00c003c4 	movi	r3,15
    9580:	1980412e 	bgeu	r3,r6,9688 <memmove+0x140>
    9584:	2886b03a 	or	r3,r5,r2
    9588:	18c000cc 	andi	r3,r3,3
    958c:	1800401e 	bne	r3,zero,9690 <memmove+0x148>
    9590:	33fffc04 	addi	r15,r6,-16
    9594:	781ed13a 	srli	r15,r15,4
    9598:	28c00104 	addi	r3,r5,4
    959c:	13400104 	addi	r13,r2,4
    95a0:	781c913a 	slli	r14,r15,4
    95a4:	2b000204 	addi	r12,r5,8
    95a8:	12c00204 	addi	r11,r2,8
    95ac:	73800504 	addi	r14,r14,20
    95b0:	2a800304 	addi	r10,r5,12
    95b4:	12400304 	addi	r9,r2,12
    95b8:	2b9d883a 	add	r14,r5,r14
    95bc:	2811883a 	mov	r8,r5
    95c0:	100f883a 	mov	r7,r2
    95c4:	41000017 	ldw	r4,0(r8)
    95c8:	39c00404 	addi	r7,r7,16
    95cc:	18c00404 	addi	r3,r3,16
    95d0:	393ffc15 	stw	r4,-16(r7)
    95d4:	193ffc17 	ldw	r4,-16(r3)
    95d8:	6b400404 	addi	r13,r13,16
    95dc:	5ac00404 	addi	r11,r11,16
    95e0:	693ffc15 	stw	r4,-16(r13)
    95e4:	61000017 	ldw	r4,0(r12)
    95e8:	4a400404 	addi	r9,r9,16
    95ec:	42000404 	addi	r8,r8,16
    95f0:	593ffc15 	stw	r4,-16(r11)
    95f4:	51000017 	ldw	r4,0(r10)
    95f8:	63000404 	addi	r12,r12,16
    95fc:	52800404 	addi	r10,r10,16
    9600:	493ffc15 	stw	r4,-16(r9)
    9604:	1bbfef1e 	bne	r3,r14,95c4 <__alt_exception_stack_pointer+0xf80095c4>
    9608:	79000044 	addi	r4,r15,1
    960c:	2008913a 	slli	r4,r4,4
    9610:	328003cc 	andi	r10,r6,15
    9614:	02c000c4 	movi	r11,3
    9618:	1107883a 	add	r3,r2,r4
    961c:	290b883a 	add	r5,r5,r4
    9620:	5a801e2e 	bgeu	r11,r10,969c <memmove+0x154>
    9624:	1813883a 	mov	r9,r3
    9628:	2811883a 	mov	r8,r5
    962c:	500f883a 	mov	r7,r10
    9630:	41000017 	ldw	r4,0(r8)
    9634:	4a400104 	addi	r9,r9,4
    9638:	39ffff04 	addi	r7,r7,-4
    963c:	493fff15 	stw	r4,-4(r9)
    9640:	42000104 	addi	r8,r8,4
    9644:	59fffa36 	bltu	r11,r7,9630 <__alt_exception_stack_pointer+0xf8009630>
    9648:	513fff04 	addi	r4,r10,-4
    964c:	2008d0ba 	srli	r4,r4,2
    9650:	318000cc 	andi	r6,r6,3
    9654:	21000044 	addi	r4,r4,1
    9658:	2109883a 	add	r4,r4,r4
    965c:	2109883a 	add	r4,r4,r4
    9660:	1907883a 	add	r3,r3,r4
    9664:	290b883a 	add	r5,r5,r4
    9668:	30000b26 	beq	r6,zero,9698 <memmove+0x150>
    966c:	198d883a 	add	r6,r3,r6
    9670:	29c00003 	ldbu	r7,0(r5)
    9674:	18c00044 	addi	r3,r3,1
    9678:	29400044 	addi	r5,r5,1
    967c:	19ffffc5 	stb	r7,-1(r3)
    9680:	19bffb1e 	bne	r3,r6,9670 <__alt_exception_stack_pointer+0xf8009670>
    9684:	f800283a 	ret
    9688:	1007883a 	mov	r3,r2
    968c:	003ff606 	br	9668 <__alt_exception_stack_pointer+0xf8009668>
    9690:	1007883a 	mov	r3,r2
    9694:	003ff506 	br	966c <__alt_exception_stack_pointer+0xf800966c>
    9698:	f800283a 	ret
    969c:	500d883a 	mov	r6,r10
    96a0:	003ff106 	br	9668 <__alt_exception_stack_pointer+0xf8009668>

000096a4 <_read_r>:
    96a4:	defffd04 	addi	sp,sp,-12
    96a8:	2805883a 	mov	r2,r5
    96ac:	dc000015 	stw	r16,0(sp)
    96b0:	04000074 	movhi	r16,1
    96b4:	dc400115 	stw	r17,4(sp)
    96b8:	300b883a 	mov	r5,r6
    96bc:	840d2504 	addi	r16,r16,13460
    96c0:	2023883a 	mov	r17,r4
    96c4:	380d883a 	mov	r6,r7
    96c8:	1009883a 	mov	r4,r2
    96cc:	dfc00215 	stw	ra,8(sp)
    96d0:	80000015 	stw	zero,0(r16)
    96d4:	000da2c0 	call	da2c <read>
    96d8:	00ffffc4 	movi	r3,-1
    96dc:	10c00526 	beq	r2,r3,96f4 <_read_r+0x50>
    96e0:	dfc00217 	ldw	ra,8(sp)
    96e4:	dc400117 	ldw	r17,4(sp)
    96e8:	dc000017 	ldw	r16,0(sp)
    96ec:	dec00304 	addi	sp,sp,12
    96f0:	f800283a 	ret
    96f4:	80c00017 	ldw	r3,0(r16)
    96f8:	183ff926 	beq	r3,zero,96e0 <__alt_exception_stack_pointer+0xf80096e0>
    96fc:	88c00015 	stw	r3,0(r17)
    9700:	003ff706 	br	96e0 <__alt_exception_stack_pointer+0xf80096e0>

00009704 <_realloc_r>:
    9704:	defff604 	addi	sp,sp,-40
    9708:	dc800215 	stw	r18,8(sp)
    970c:	dfc00915 	stw	ra,36(sp)
    9710:	df000815 	stw	fp,32(sp)
    9714:	ddc00715 	stw	r23,28(sp)
    9718:	dd800615 	stw	r22,24(sp)
    971c:	dd400515 	stw	r21,20(sp)
    9720:	dd000415 	stw	r20,16(sp)
    9724:	dcc00315 	stw	r19,12(sp)
    9728:	dc400115 	stw	r17,4(sp)
    972c:	dc000015 	stw	r16,0(sp)
    9730:	3025883a 	mov	r18,r6
    9734:	2800b726 	beq	r5,zero,9a14 <_realloc_r+0x310>
    9738:	282b883a 	mov	r21,r5
    973c:	2029883a 	mov	r20,r4
    9740:	000d9a80 	call	d9a8 <__malloc_lock>
    9744:	a8bfff17 	ldw	r2,-4(r21)
    9748:	043fff04 	movi	r16,-4
    974c:	90c002c4 	addi	r3,r18,11
    9750:	01000584 	movi	r4,22
    9754:	acfffe04 	addi	r19,r21,-8
    9758:	1420703a 	and	r16,r2,r16
    975c:	20c0332e 	bgeu	r4,r3,982c <_realloc_r+0x128>
    9760:	047ffe04 	movi	r17,-8
    9764:	1c62703a 	and	r17,r3,r17
    9768:	8807883a 	mov	r3,r17
    976c:	88005816 	blt	r17,zero,98d0 <_realloc_r+0x1cc>
    9770:	8c805736 	bltu	r17,r18,98d0 <_realloc_r+0x1cc>
    9774:	80c0300e 	bge	r16,r3,9838 <_realloc_r+0x134>
    9778:	07000074 	movhi	fp,1
    977c:	e73fae04 	addi	fp,fp,-328
    9780:	e1c00217 	ldw	r7,8(fp)
    9784:	9c09883a 	add	r4,r19,r16
    9788:	22000117 	ldw	r8,4(r4)
    978c:	21c06326 	beq	r4,r7,991c <_realloc_r+0x218>
    9790:	017fff84 	movi	r5,-2
    9794:	414a703a 	and	r5,r8,r5
    9798:	214b883a 	add	r5,r4,r5
    979c:	29800117 	ldw	r6,4(r5)
    97a0:	3180004c 	andi	r6,r6,1
    97a4:	30003f26 	beq	r6,zero,98a4 <_realloc_r+0x1a0>
    97a8:	1080004c 	andi	r2,r2,1
    97ac:	10008326 	beq	r2,zero,99bc <_realloc_r+0x2b8>
    97b0:	900b883a 	mov	r5,r18
    97b4:	a009883a 	mov	r4,r20
    97b8:	000077c0 	call	77c <_malloc_r>
    97bc:	1025883a 	mov	r18,r2
    97c0:	10011e26 	beq	r2,zero,9c3c <_realloc_r+0x538>
    97c4:	a93fff17 	ldw	r4,-4(r21)
    97c8:	10fffe04 	addi	r3,r2,-8
    97cc:	00bfff84 	movi	r2,-2
    97d0:	2084703a 	and	r2,r4,r2
    97d4:	9885883a 	add	r2,r19,r2
    97d8:	1880ee26 	beq	r3,r2,9b94 <_realloc_r+0x490>
    97dc:	81bfff04 	addi	r6,r16,-4
    97e0:	00800904 	movi	r2,36
    97e4:	1180b836 	bltu	r2,r6,9ac8 <_realloc_r+0x3c4>
    97e8:	00c004c4 	movi	r3,19
    97ec:	19809636 	bltu	r3,r6,9a48 <_realloc_r+0x344>
    97f0:	9005883a 	mov	r2,r18
    97f4:	a807883a 	mov	r3,r21
    97f8:	19000017 	ldw	r4,0(r3)
    97fc:	11000015 	stw	r4,0(r2)
    9800:	19000117 	ldw	r4,4(r3)
    9804:	11000115 	stw	r4,4(r2)
    9808:	18c00217 	ldw	r3,8(r3)
    980c:	10c00215 	stw	r3,8(r2)
    9810:	a80b883a 	mov	r5,r21
    9814:	a009883a 	mov	r4,r20
    9818:	000557c0 	call	557c <_free_r>
    981c:	a009883a 	mov	r4,r20
    9820:	000d9cc0 	call	d9cc <__malloc_unlock>
    9824:	9005883a 	mov	r2,r18
    9828:	00001206 	br	9874 <_realloc_r+0x170>
    982c:	00c00404 	movi	r3,16
    9830:	1823883a 	mov	r17,r3
    9834:	003fce06 	br	9770 <__alt_exception_stack_pointer+0xf8009770>
    9838:	a825883a 	mov	r18,r21
    983c:	8445c83a 	sub	r2,r16,r17
    9840:	00c003c4 	movi	r3,15
    9844:	18802636 	bltu	r3,r2,98e0 <_realloc_r+0x1dc>
    9848:	99800117 	ldw	r6,4(r19)
    984c:	9c07883a 	add	r3,r19,r16
    9850:	3180004c 	andi	r6,r6,1
    9854:	3420b03a 	or	r16,r6,r16
    9858:	9c000115 	stw	r16,4(r19)
    985c:	18800117 	ldw	r2,4(r3)
    9860:	10800054 	ori	r2,r2,1
    9864:	18800115 	stw	r2,4(r3)
    9868:	a009883a 	mov	r4,r20
    986c:	000d9cc0 	call	d9cc <__malloc_unlock>
    9870:	9005883a 	mov	r2,r18
    9874:	dfc00917 	ldw	ra,36(sp)
    9878:	df000817 	ldw	fp,32(sp)
    987c:	ddc00717 	ldw	r23,28(sp)
    9880:	dd800617 	ldw	r22,24(sp)
    9884:	dd400517 	ldw	r21,20(sp)
    9888:	dd000417 	ldw	r20,16(sp)
    988c:	dcc00317 	ldw	r19,12(sp)
    9890:	dc800217 	ldw	r18,8(sp)
    9894:	dc400117 	ldw	r17,4(sp)
    9898:	dc000017 	ldw	r16,0(sp)
    989c:	dec00a04 	addi	sp,sp,40
    98a0:	f800283a 	ret
    98a4:	017fff04 	movi	r5,-4
    98a8:	414a703a 	and	r5,r8,r5
    98ac:	814d883a 	add	r6,r16,r5
    98b0:	30c01f16 	blt	r6,r3,9930 <_realloc_r+0x22c>
    98b4:	20800317 	ldw	r2,12(r4)
    98b8:	20c00217 	ldw	r3,8(r4)
    98bc:	a825883a 	mov	r18,r21
    98c0:	3021883a 	mov	r16,r6
    98c4:	18800315 	stw	r2,12(r3)
    98c8:	10c00215 	stw	r3,8(r2)
    98cc:	003fdb06 	br	983c <__alt_exception_stack_pointer+0xf800983c>
    98d0:	00800304 	movi	r2,12
    98d4:	a0800015 	stw	r2,0(r20)
    98d8:	0005883a 	mov	r2,zero
    98dc:	003fe506 	br	9874 <__alt_exception_stack_pointer+0xf8009874>
    98e0:	98c00117 	ldw	r3,4(r19)
    98e4:	9c4b883a 	add	r5,r19,r17
    98e8:	11000054 	ori	r4,r2,1
    98ec:	18c0004c 	andi	r3,r3,1
    98f0:	1c62b03a 	or	r17,r3,r17
    98f4:	9c400115 	stw	r17,4(r19)
    98f8:	29000115 	stw	r4,4(r5)
    98fc:	2885883a 	add	r2,r5,r2
    9900:	10c00117 	ldw	r3,4(r2)
    9904:	29400204 	addi	r5,r5,8
    9908:	a009883a 	mov	r4,r20
    990c:	18c00054 	ori	r3,r3,1
    9910:	10c00115 	stw	r3,4(r2)
    9914:	000557c0 	call	557c <_free_r>
    9918:	003fd306 	br	9868 <__alt_exception_stack_pointer+0xf8009868>
    991c:	017fff04 	movi	r5,-4
    9920:	414a703a 	and	r5,r8,r5
    9924:	89800404 	addi	r6,r17,16
    9928:	8151883a 	add	r8,r16,r5
    992c:	4180590e 	bge	r8,r6,9a94 <_realloc_r+0x390>
    9930:	1080004c 	andi	r2,r2,1
    9934:	103f9e1e 	bne	r2,zero,97b0 <__alt_exception_stack_pointer+0xf80097b0>
    9938:	adbffe17 	ldw	r22,-8(r21)
    993c:	00bfff04 	movi	r2,-4
    9940:	9dadc83a 	sub	r22,r19,r22
    9944:	b1800117 	ldw	r6,4(r22)
    9948:	3084703a 	and	r2,r6,r2
    994c:	20002026 	beq	r4,zero,99d0 <_realloc_r+0x2cc>
    9950:	80af883a 	add	r23,r16,r2
    9954:	b96f883a 	add	r23,r23,r5
    9958:	21c05f26 	beq	r4,r7,9ad8 <_realloc_r+0x3d4>
    995c:	b8c01c16 	blt	r23,r3,99d0 <_realloc_r+0x2cc>
    9960:	20800317 	ldw	r2,12(r4)
    9964:	20c00217 	ldw	r3,8(r4)
    9968:	81bfff04 	addi	r6,r16,-4
    996c:	01000904 	movi	r4,36
    9970:	18800315 	stw	r2,12(r3)
    9974:	10c00215 	stw	r3,8(r2)
    9978:	b0c00217 	ldw	r3,8(r22)
    997c:	b0800317 	ldw	r2,12(r22)
    9980:	b4800204 	addi	r18,r22,8
    9984:	18800315 	stw	r2,12(r3)
    9988:	10c00215 	stw	r3,8(r2)
    998c:	21801b36 	bltu	r4,r6,99fc <_realloc_r+0x2f8>
    9990:	008004c4 	movi	r2,19
    9994:	1180352e 	bgeu	r2,r6,9a6c <_realloc_r+0x368>
    9998:	a8800017 	ldw	r2,0(r21)
    999c:	b0800215 	stw	r2,8(r22)
    99a0:	a8800117 	ldw	r2,4(r21)
    99a4:	b0800315 	stw	r2,12(r22)
    99a8:	008006c4 	movi	r2,27
    99ac:	11807f36 	bltu	r2,r6,9bac <_realloc_r+0x4a8>
    99b0:	b0800404 	addi	r2,r22,16
    99b4:	ad400204 	addi	r21,r21,8
    99b8:	00002d06 	br	9a70 <_realloc_r+0x36c>
    99bc:	adbffe17 	ldw	r22,-8(r21)
    99c0:	00bfff04 	movi	r2,-4
    99c4:	9dadc83a 	sub	r22,r19,r22
    99c8:	b1000117 	ldw	r4,4(r22)
    99cc:	2084703a 	and	r2,r4,r2
    99d0:	b03f7726 	beq	r22,zero,97b0 <__alt_exception_stack_pointer+0xf80097b0>
    99d4:	80af883a 	add	r23,r16,r2
    99d8:	b8ff7516 	blt	r23,r3,97b0 <__alt_exception_stack_pointer+0xf80097b0>
    99dc:	b0800317 	ldw	r2,12(r22)
    99e0:	b0c00217 	ldw	r3,8(r22)
    99e4:	81bfff04 	addi	r6,r16,-4
    99e8:	01000904 	movi	r4,36
    99ec:	18800315 	stw	r2,12(r3)
    99f0:	10c00215 	stw	r3,8(r2)
    99f4:	b4800204 	addi	r18,r22,8
    99f8:	21bfe52e 	bgeu	r4,r6,9990 <__alt_exception_stack_pointer+0xf8009990>
    99fc:	a80b883a 	mov	r5,r21
    9a00:	9009883a 	mov	r4,r18
    9a04:	00095480 	call	9548 <memmove>
    9a08:	b821883a 	mov	r16,r23
    9a0c:	b027883a 	mov	r19,r22
    9a10:	003f8a06 	br	983c <__alt_exception_stack_pointer+0xf800983c>
    9a14:	300b883a 	mov	r5,r6
    9a18:	dfc00917 	ldw	ra,36(sp)
    9a1c:	df000817 	ldw	fp,32(sp)
    9a20:	ddc00717 	ldw	r23,28(sp)
    9a24:	dd800617 	ldw	r22,24(sp)
    9a28:	dd400517 	ldw	r21,20(sp)
    9a2c:	dd000417 	ldw	r20,16(sp)
    9a30:	dcc00317 	ldw	r19,12(sp)
    9a34:	dc800217 	ldw	r18,8(sp)
    9a38:	dc400117 	ldw	r17,4(sp)
    9a3c:	dc000017 	ldw	r16,0(sp)
    9a40:	dec00a04 	addi	sp,sp,40
    9a44:	000077c1 	jmpi	77c <_malloc_r>
    9a48:	a8c00017 	ldw	r3,0(r21)
    9a4c:	90c00015 	stw	r3,0(r18)
    9a50:	a8c00117 	ldw	r3,4(r21)
    9a54:	90c00115 	stw	r3,4(r18)
    9a58:	00c006c4 	movi	r3,27
    9a5c:	19804536 	bltu	r3,r6,9b74 <_realloc_r+0x470>
    9a60:	90800204 	addi	r2,r18,8
    9a64:	a8c00204 	addi	r3,r21,8
    9a68:	003f6306 	br	97f8 <__alt_exception_stack_pointer+0xf80097f8>
    9a6c:	9005883a 	mov	r2,r18
    9a70:	a8c00017 	ldw	r3,0(r21)
    9a74:	b821883a 	mov	r16,r23
    9a78:	b027883a 	mov	r19,r22
    9a7c:	10c00015 	stw	r3,0(r2)
    9a80:	a8c00117 	ldw	r3,4(r21)
    9a84:	10c00115 	stw	r3,4(r2)
    9a88:	a8c00217 	ldw	r3,8(r21)
    9a8c:	10c00215 	stw	r3,8(r2)
    9a90:	003f6a06 	br	983c <__alt_exception_stack_pointer+0xf800983c>
    9a94:	9c67883a 	add	r19,r19,r17
    9a98:	4445c83a 	sub	r2,r8,r17
    9a9c:	e4c00215 	stw	r19,8(fp)
    9aa0:	10800054 	ori	r2,r2,1
    9aa4:	98800115 	stw	r2,4(r19)
    9aa8:	a8bfff17 	ldw	r2,-4(r21)
    9aac:	a009883a 	mov	r4,r20
    9ab0:	1080004c 	andi	r2,r2,1
    9ab4:	1462b03a 	or	r17,r2,r17
    9ab8:	ac7fff15 	stw	r17,-4(r21)
    9abc:	000d9cc0 	call	d9cc <__malloc_unlock>
    9ac0:	a805883a 	mov	r2,r21
    9ac4:	003f6b06 	br	9874 <__alt_exception_stack_pointer+0xf8009874>
    9ac8:	a80b883a 	mov	r5,r21
    9acc:	9009883a 	mov	r4,r18
    9ad0:	00095480 	call	9548 <memmove>
    9ad4:	003f4e06 	br	9810 <__alt_exception_stack_pointer+0xf8009810>
    9ad8:	89000404 	addi	r4,r17,16
    9adc:	b93fbc16 	blt	r23,r4,99d0 <__alt_exception_stack_pointer+0xf80099d0>
    9ae0:	b0800317 	ldw	r2,12(r22)
    9ae4:	b0c00217 	ldw	r3,8(r22)
    9ae8:	81bfff04 	addi	r6,r16,-4
    9aec:	01000904 	movi	r4,36
    9af0:	18800315 	stw	r2,12(r3)
    9af4:	10c00215 	stw	r3,8(r2)
    9af8:	b4800204 	addi	r18,r22,8
    9afc:	21804336 	bltu	r4,r6,9c0c <_realloc_r+0x508>
    9b00:	008004c4 	movi	r2,19
    9b04:	11803f2e 	bgeu	r2,r6,9c04 <_realloc_r+0x500>
    9b08:	a8800017 	ldw	r2,0(r21)
    9b0c:	b0800215 	stw	r2,8(r22)
    9b10:	a8800117 	ldw	r2,4(r21)
    9b14:	b0800315 	stw	r2,12(r22)
    9b18:	008006c4 	movi	r2,27
    9b1c:	11803f36 	bltu	r2,r6,9c1c <_realloc_r+0x518>
    9b20:	b0800404 	addi	r2,r22,16
    9b24:	ad400204 	addi	r21,r21,8
    9b28:	a8c00017 	ldw	r3,0(r21)
    9b2c:	10c00015 	stw	r3,0(r2)
    9b30:	a8c00117 	ldw	r3,4(r21)
    9b34:	10c00115 	stw	r3,4(r2)
    9b38:	a8c00217 	ldw	r3,8(r21)
    9b3c:	10c00215 	stw	r3,8(r2)
    9b40:	b447883a 	add	r3,r22,r17
    9b44:	bc45c83a 	sub	r2,r23,r17
    9b48:	e0c00215 	stw	r3,8(fp)
    9b4c:	10800054 	ori	r2,r2,1
    9b50:	18800115 	stw	r2,4(r3)
    9b54:	b0800117 	ldw	r2,4(r22)
    9b58:	a009883a 	mov	r4,r20
    9b5c:	1080004c 	andi	r2,r2,1
    9b60:	1462b03a 	or	r17,r2,r17
    9b64:	b4400115 	stw	r17,4(r22)
    9b68:	000d9cc0 	call	d9cc <__malloc_unlock>
    9b6c:	9005883a 	mov	r2,r18
    9b70:	003f4006 	br	9874 <__alt_exception_stack_pointer+0xf8009874>
    9b74:	a8c00217 	ldw	r3,8(r21)
    9b78:	90c00215 	stw	r3,8(r18)
    9b7c:	a8c00317 	ldw	r3,12(r21)
    9b80:	90c00315 	stw	r3,12(r18)
    9b84:	30801126 	beq	r6,r2,9bcc <_realloc_r+0x4c8>
    9b88:	90800404 	addi	r2,r18,16
    9b8c:	a8c00404 	addi	r3,r21,16
    9b90:	003f1906 	br	97f8 <__alt_exception_stack_pointer+0xf80097f8>
    9b94:	90ffff17 	ldw	r3,-4(r18)
    9b98:	00bfff04 	movi	r2,-4
    9b9c:	a825883a 	mov	r18,r21
    9ba0:	1884703a 	and	r2,r3,r2
    9ba4:	80a1883a 	add	r16,r16,r2
    9ba8:	003f2406 	br	983c <__alt_exception_stack_pointer+0xf800983c>
    9bac:	a8800217 	ldw	r2,8(r21)
    9bb0:	b0800415 	stw	r2,16(r22)
    9bb4:	a8800317 	ldw	r2,12(r21)
    9bb8:	b0800515 	stw	r2,20(r22)
    9bbc:	31000a26 	beq	r6,r4,9be8 <_realloc_r+0x4e4>
    9bc0:	b0800604 	addi	r2,r22,24
    9bc4:	ad400404 	addi	r21,r21,16
    9bc8:	003fa906 	br	9a70 <__alt_exception_stack_pointer+0xf8009a70>
    9bcc:	a9000417 	ldw	r4,16(r21)
    9bd0:	90800604 	addi	r2,r18,24
    9bd4:	a8c00604 	addi	r3,r21,24
    9bd8:	91000415 	stw	r4,16(r18)
    9bdc:	a9000517 	ldw	r4,20(r21)
    9be0:	91000515 	stw	r4,20(r18)
    9be4:	003f0406 	br	97f8 <__alt_exception_stack_pointer+0xf80097f8>
    9be8:	a8c00417 	ldw	r3,16(r21)
    9bec:	ad400604 	addi	r21,r21,24
    9bf0:	b0800804 	addi	r2,r22,32
    9bf4:	b0c00615 	stw	r3,24(r22)
    9bf8:	a8ffff17 	ldw	r3,-4(r21)
    9bfc:	b0c00715 	stw	r3,28(r22)
    9c00:	003f9b06 	br	9a70 <__alt_exception_stack_pointer+0xf8009a70>
    9c04:	9005883a 	mov	r2,r18
    9c08:	003fc706 	br	9b28 <__alt_exception_stack_pointer+0xf8009b28>
    9c0c:	a80b883a 	mov	r5,r21
    9c10:	9009883a 	mov	r4,r18
    9c14:	00095480 	call	9548 <memmove>
    9c18:	003fc906 	br	9b40 <__alt_exception_stack_pointer+0xf8009b40>
    9c1c:	a8800217 	ldw	r2,8(r21)
    9c20:	b0800415 	stw	r2,16(r22)
    9c24:	a8800317 	ldw	r2,12(r21)
    9c28:	b0800515 	stw	r2,20(r22)
    9c2c:	31000726 	beq	r6,r4,9c4c <_realloc_r+0x548>
    9c30:	b0800604 	addi	r2,r22,24
    9c34:	ad400404 	addi	r21,r21,16
    9c38:	003fbb06 	br	9b28 <__alt_exception_stack_pointer+0xf8009b28>
    9c3c:	a009883a 	mov	r4,r20
    9c40:	000d9cc0 	call	d9cc <__malloc_unlock>
    9c44:	0005883a 	mov	r2,zero
    9c48:	003f0a06 	br	9874 <__alt_exception_stack_pointer+0xf8009874>
    9c4c:	a8c00417 	ldw	r3,16(r21)
    9c50:	ad400604 	addi	r21,r21,24
    9c54:	b0800804 	addi	r2,r22,32
    9c58:	b0c00615 	stw	r3,24(r22)
    9c5c:	a8ffff17 	ldw	r3,-4(r21)
    9c60:	b0c00715 	stw	r3,28(r22)
    9c64:	003fb006 	br	9b28 <__alt_exception_stack_pointer+0xf8009b28>

00009c68 <__swbuf_r>:
    9c68:	defffb04 	addi	sp,sp,-20
    9c6c:	dcc00315 	stw	r19,12(sp)
    9c70:	dc800215 	stw	r18,8(sp)
    9c74:	dc000015 	stw	r16,0(sp)
    9c78:	dfc00415 	stw	ra,16(sp)
    9c7c:	dc400115 	stw	r17,4(sp)
    9c80:	2025883a 	mov	r18,r4
    9c84:	2827883a 	mov	r19,r5
    9c88:	3021883a 	mov	r16,r6
    9c8c:	20000226 	beq	r4,zero,9c98 <__swbuf_r+0x30>
    9c90:	20800e17 	ldw	r2,56(r4)
    9c94:	10004226 	beq	r2,zero,9da0 <__swbuf_r+0x138>
    9c98:	80800617 	ldw	r2,24(r16)
    9c9c:	8100030b 	ldhu	r4,12(r16)
    9ca0:	80800215 	stw	r2,8(r16)
    9ca4:	2080020c 	andi	r2,r4,8
    9ca8:	10003626 	beq	r2,zero,9d84 <__swbuf_r+0x11c>
    9cac:	80c00417 	ldw	r3,16(r16)
    9cb0:	18003426 	beq	r3,zero,9d84 <__swbuf_r+0x11c>
    9cb4:	2088000c 	andi	r2,r4,8192
    9cb8:	9c403fcc 	andi	r17,r19,255
    9cbc:	10001a26 	beq	r2,zero,9d28 <__swbuf_r+0xc0>
    9cc0:	80800017 	ldw	r2,0(r16)
    9cc4:	81000517 	ldw	r4,20(r16)
    9cc8:	10c7c83a 	sub	r3,r2,r3
    9ccc:	1900200e 	bge	r3,r4,9d50 <__swbuf_r+0xe8>
    9cd0:	18c00044 	addi	r3,r3,1
    9cd4:	81000217 	ldw	r4,8(r16)
    9cd8:	11400044 	addi	r5,r2,1
    9cdc:	81400015 	stw	r5,0(r16)
    9ce0:	213fffc4 	addi	r4,r4,-1
    9ce4:	81000215 	stw	r4,8(r16)
    9ce8:	14c00005 	stb	r19,0(r2)
    9cec:	80800517 	ldw	r2,20(r16)
    9cf0:	10c01e26 	beq	r2,r3,9d6c <__swbuf_r+0x104>
    9cf4:	8080030b 	ldhu	r2,12(r16)
    9cf8:	1080004c 	andi	r2,r2,1
    9cfc:	10000226 	beq	r2,zero,9d08 <__swbuf_r+0xa0>
    9d00:	00800284 	movi	r2,10
    9d04:	88801926 	beq	r17,r2,9d6c <__swbuf_r+0x104>
    9d08:	8805883a 	mov	r2,r17
    9d0c:	dfc00417 	ldw	ra,16(sp)
    9d10:	dcc00317 	ldw	r19,12(sp)
    9d14:	dc800217 	ldw	r18,8(sp)
    9d18:	dc400117 	ldw	r17,4(sp)
    9d1c:	dc000017 	ldw	r16,0(sp)
    9d20:	dec00504 	addi	sp,sp,20
    9d24:	f800283a 	ret
    9d28:	81401917 	ldw	r5,100(r16)
    9d2c:	00b7ffc4 	movi	r2,-8193
    9d30:	21080014 	ori	r4,r4,8192
    9d34:	2884703a 	and	r2,r5,r2
    9d38:	80801915 	stw	r2,100(r16)
    9d3c:	80800017 	ldw	r2,0(r16)
    9d40:	8100030d 	sth	r4,12(r16)
    9d44:	81000517 	ldw	r4,20(r16)
    9d48:	10c7c83a 	sub	r3,r2,r3
    9d4c:	193fe016 	blt	r3,r4,9cd0 <__alt_exception_stack_pointer+0xf8009cd0>
    9d50:	800b883a 	mov	r5,r16
    9d54:	9009883a 	mov	r4,r18
    9d58:	000501c0 	call	501c <_fflush_r>
    9d5c:	1000071e 	bne	r2,zero,9d7c <__swbuf_r+0x114>
    9d60:	80800017 	ldw	r2,0(r16)
    9d64:	00c00044 	movi	r3,1
    9d68:	003fda06 	br	9cd4 <__alt_exception_stack_pointer+0xf8009cd4>
    9d6c:	800b883a 	mov	r5,r16
    9d70:	9009883a 	mov	r4,r18
    9d74:	000501c0 	call	501c <_fflush_r>
    9d78:	103fe326 	beq	r2,zero,9d08 <__alt_exception_stack_pointer+0xf8009d08>
    9d7c:	00bfffc4 	movi	r2,-1
    9d80:	003fe206 	br	9d0c <__alt_exception_stack_pointer+0xf8009d0c>
    9d84:	800b883a 	mov	r5,r16
    9d88:	9009883a 	mov	r4,r18
    9d8c:	00033fc0 	call	33fc <__swsetup_r>
    9d90:	103ffa1e 	bne	r2,zero,9d7c <__alt_exception_stack_pointer+0xf8009d7c>
    9d94:	8100030b 	ldhu	r4,12(r16)
    9d98:	80c00417 	ldw	r3,16(r16)
    9d9c:	003fc506 	br	9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    9da0:	00054080 	call	5408 <__sinit>
    9da4:	003fbc06 	br	9c98 <__alt_exception_stack_pointer+0xf8009c98>

00009da8 <__swbuf>:
    9da8:	00800074 	movhi	r2,1
    9dac:	10865c04 	addi	r2,r2,6512
    9db0:	280d883a 	mov	r6,r5
    9db4:	200b883a 	mov	r5,r4
    9db8:	11000017 	ldw	r4,0(r2)
    9dbc:	0009c681 	jmpi	9c68 <__swbuf_r>

00009dc0 <_wcrtomb_r>:
    9dc0:	defff604 	addi	sp,sp,-40
    9dc4:	00800074 	movhi	r2,1
    9dc8:	dc800815 	stw	r18,32(sp)
    9dcc:	dc400715 	stw	r17,28(sp)
    9dd0:	dc000615 	stw	r16,24(sp)
    9dd4:	10865e04 	addi	r2,r2,6520
    9dd8:	dfc00915 	stw	ra,36(sp)
    9ddc:	2021883a 	mov	r16,r4
    9de0:	3823883a 	mov	r17,r7
    9de4:	14800017 	ldw	r18,0(r2)
    9de8:	28001426 	beq	r5,zero,9e3c <_wcrtomb_r+0x7c>
    9dec:	d9400415 	stw	r5,16(sp)
    9df0:	d9800515 	stw	r6,20(sp)
    9df4:	0005a900 	call	5a90 <__locale_charset>
    9df8:	d9800517 	ldw	r6,20(sp)
    9dfc:	d9400417 	ldw	r5,16(sp)
    9e00:	100f883a 	mov	r7,r2
    9e04:	dc400015 	stw	r17,0(sp)
    9e08:	8009883a 	mov	r4,r16
    9e0c:	903ee83a 	callr	r18
    9e10:	00ffffc4 	movi	r3,-1
    9e14:	10c0031e 	bne	r2,r3,9e24 <_wcrtomb_r+0x64>
    9e18:	88000015 	stw	zero,0(r17)
    9e1c:	00c02284 	movi	r3,138
    9e20:	80c00015 	stw	r3,0(r16)
    9e24:	dfc00917 	ldw	ra,36(sp)
    9e28:	dc800817 	ldw	r18,32(sp)
    9e2c:	dc400717 	ldw	r17,28(sp)
    9e30:	dc000617 	ldw	r16,24(sp)
    9e34:	dec00a04 	addi	sp,sp,40
    9e38:	f800283a 	ret
    9e3c:	0005a900 	call	5a90 <__locale_charset>
    9e40:	100f883a 	mov	r7,r2
    9e44:	dc400015 	stw	r17,0(sp)
    9e48:	000d883a 	mov	r6,zero
    9e4c:	d9400104 	addi	r5,sp,4
    9e50:	8009883a 	mov	r4,r16
    9e54:	903ee83a 	callr	r18
    9e58:	003fed06 	br	9e10 <__alt_exception_stack_pointer+0xf8009e10>

00009e5c <wcrtomb>:
    9e5c:	defff604 	addi	sp,sp,-40
    9e60:	00800074 	movhi	r2,1
    9e64:	dc800615 	stw	r18,24(sp)
    9e68:	dc400515 	stw	r17,20(sp)
    9e6c:	10865c04 	addi	r2,r2,6512
    9e70:	dfc00915 	stw	ra,36(sp)
    9e74:	dd000815 	stw	r20,32(sp)
    9e78:	dcc00715 	stw	r19,28(sp)
    9e7c:	dc000415 	stw	r16,16(sp)
    9e80:	3025883a 	mov	r18,r6
    9e84:	14400017 	ldw	r17,0(r2)
    9e88:	20001926 	beq	r4,zero,9ef0 <wcrtomb+0x94>
    9e8c:	00800074 	movhi	r2,1
    9e90:	10865e04 	addi	r2,r2,6520
    9e94:	15000017 	ldw	r20,0(r2)
    9e98:	2021883a 	mov	r16,r4
    9e9c:	2827883a 	mov	r19,r5
    9ea0:	0005a900 	call	5a90 <__locale_charset>
    9ea4:	100f883a 	mov	r7,r2
    9ea8:	dc800015 	stw	r18,0(sp)
    9eac:	980d883a 	mov	r6,r19
    9eb0:	800b883a 	mov	r5,r16
    9eb4:	8809883a 	mov	r4,r17
    9eb8:	a03ee83a 	callr	r20
    9ebc:	00ffffc4 	movi	r3,-1
    9ec0:	10c0031e 	bne	r2,r3,9ed0 <wcrtomb+0x74>
    9ec4:	90000015 	stw	zero,0(r18)
    9ec8:	00c02284 	movi	r3,138
    9ecc:	88c00015 	stw	r3,0(r17)
    9ed0:	dfc00917 	ldw	ra,36(sp)
    9ed4:	dd000817 	ldw	r20,32(sp)
    9ed8:	dcc00717 	ldw	r19,28(sp)
    9edc:	dc800617 	ldw	r18,24(sp)
    9ee0:	dc400517 	ldw	r17,20(sp)
    9ee4:	dc000417 	ldw	r16,16(sp)
    9ee8:	dec00a04 	addi	sp,sp,40
    9eec:	f800283a 	ret
    9ef0:	00800074 	movhi	r2,1
    9ef4:	10865e04 	addi	r2,r2,6520
    9ef8:	14000017 	ldw	r16,0(r2)
    9efc:	0005a900 	call	5a90 <__locale_charset>
    9f00:	100f883a 	mov	r7,r2
    9f04:	dc800015 	stw	r18,0(sp)
    9f08:	000d883a 	mov	r6,zero
    9f0c:	d9400104 	addi	r5,sp,4
    9f10:	8809883a 	mov	r4,r17
    9f14:	803ee83a 	callr	r16
    9f18:	003fe806 	br	9ebc <__alt_exception_stack_pointer+0xf8009ebc>

00009f1c <__ascii_wctomb>:
    9f1c:	28000526 	beq	r5,zero,9f34 <__ascii_wctomb+0x18>
    9f20:	00803fc4 	movi	r2,255
    9f24:	11800536 	bltu	r2,r6,9f3c <__ascii_wctomb+0x20>
    9f28:	29800005 	stb	r6,0(r5)
    9f2c:	00800044 	movi	r2,1
    9f30:	f800283a 	ret
    9f34:	0005883a 	mov	r2,zero
    9f38:	f800283a 	ret
    9f3c:	00802284 	movi	r2,138
    9f40:	20800015 	stw	r2,0(r4)
    9f44:	00bfffc4 	movi	r2,-1
    9f48:	f800283a 	ret

00009f4c <_wctomb_r>:
    9f4c:	00800074 	movhi	r2,1
    9f50:	defff904 	addi	sp,sp,-28
    9f54:	10865e04 	addi	r2,r2,6520
    9f58:	dfc00615 	stw	ra,24(sp)
    9f5c:	dc400515 	stw	r17,20(sp)
    9f60:	dc000415 	stw	r16,16(sp)
    9f64:	3823883a 	mov	r17,r7
    9f68:	14000017 	ldw	r16,0(r2)
    9f6c:	d9000115 	stw	r4,4(sp)
    9f70:	d9400215 	stw	r5,8(sp)
    9f74:	d9800315 	stw	r6,12(sp)
    9f78:	0005a900 	call	5a90 <__locale_charset>
    9f7c:	d9800317 	ldw	r6,12(sp)
    9f80:	d9400217 	ldw	r5,8(sp)
    9f84:	d9000117 	ldw	r4,4(sp)
    9f88:	100f883a 	mov	r7,r2
    9f8c:	dc400015 	stw	r17,0(sp)
    9f90:	803ee83a 	callr	r16
    9f94:	dfc00617 	ldw	ra,24(sp)
    9f98:	dc400517 	ldw	r17,20(sp)
    9f9c:	dc000417 	ldw	r16,16(sp)
    9fa0:	dec00704 	addi	sp,sp,28
    9fa4:	f800283a 	ret

00009fa8 <__udivdi3>:
    9fa8:	defff404 	addi	sp,sp,-48
    9fac:	dcc00515 	stw	r19,20(sp)
    9fb0:	dc000215 	stw	r16,8(sp)
    9fb4:	dfc00b15 	stw	ra,44(sp)
    9fb8:	df000a15 	stw	fp,40(sp)
    9fbc:	ddc00915 	stw	r23,36(sp)
    9fc0:	dd800815 	stw	r22,32(sp)
    9fc4:	dd400715 	stw	r21,28(sp)
    9fc8:	dd000615 	stw	r20,24(sp)
    9fcc:	dc800415 	stw	r18,16(sp)
    9fd0:	dc400315 	stw	r17,12(sp)
    9fd4:	2027883a 	mov	r19,r4
    9fd8:	2821883a 	mov	r16,r5
    9fdc:	3800461e 	bne	r7,zero,a0f8 <__udivdi3+0x150>
    9fe0:	3023883a 	mov	r17,r6
    9fe4:	2025883a 	mov	r18,r4
    9fe8:	2980572e 	bgeu	r5,r6,a148 <__udivdi3+0x1a0>
    9fec:	00bfffd4 	movui	r2,65535
    9ff0:	282d883a 	mov	r22,r5
    9ff4:	1180b236 	bltu	r2,r6,a2c0 <__udivdi3+0x318>
    9ff8:	00803fc4 	movi	r2,255
    9ffc:	1185803a 	cmpltu	r2,r2,r6
    a000:	100490fa 	slli	r2,r2,3
    a004:	3086d83a 	srl	r3,r6,r2
    a008:	01000074 	movhi	r4,1
    a00c:	213f5e04 	addi	r4,r4,-648
    a010:	20c7883a 	add	r3,r4,r3
    a014:	18c00003 	ldbu	r3,0(r3)
    a018:	1885883a 	add	r2,r3,r2
    a01c:	00c00804 	movi	r3,32
    a020:	1887c83a 	sub	r3,r3,r2
    a024:	18000526 	beq	r3,zero,a03c <__udivdi3+0x94>
    a028:	80e0983a 	sll	r16,r16,r3
    a02c:	9884d83a 	srl	r2,r19,r2
    a030:	30e2983a 	sll	r17,r6,r3
    a034:	98e4983a 	sll	r18,r19,r3
    a038:	142cb03a 	or	r22,r2,r16
    a03c:	882ad43a 	srli	r21,r17,16
    a040:	b009883a 	mov	r4,r22
    a044:	8d3fffcc 	andi	r20,r17,65535
    a048:	a80b883a 	mov	r5,r21
    a04c:	00006d40 	call	6d4 <__umodsi3>
    a050:	b009883a 	mov	r4,r22
    a054:	a80b883a 	mov	r5,r21
    a058:	1027883a 	mov	r19,r2
    a05c:	00006700 	call	670 <__udivsi3>
    a060:	100b883a 	mov	r5,r2
    a064:	a009883a 	mov	r4,r20
    a068:	102d883a 	mov	r22,r2
    a06c:	000072c0 	call	72c <__mulsi3>
    a070:	9826943a 	slli	r19,r19,16
    a074:	9006d43a 	srli	r3,r18,16
    a078:	1cc6b03a 	or	r3,r3,r19
    a07c:	1880052e 	bgeu	r3,r2,a094 <__udivdi3+0xec>
    a080:	1c47883a 	add	r3,r3,r17
    a084:	b13fffc4 	addi	r4,r22,-1
    a088:	1c400136 	bltu	r3,r17,a090 <__udivdi3+0xe8>
    a08c:	18814236 	bltu	r3,r2,a598 <__udivdi3+0x5f0>
    a090:	202d883a 	mov	r22,r4
    a094:	18a1c83a 	sub	r16,r3,r2
    a098:	8009883a 	mov	r4,r16
    a09c:	a80b883a 	mov	r5,r21
    a0a0:	00006d40 	call	6d4 <__umodsi3>
    a0a4:	1027883a 	mov	r19,r2
    a0a8:	8009883a 	mov	r4,r16
    a0ac:	a80b883a 	mov	r5,r21
    a0b0:	9826943a 	slli	r19,r19,16
    a0b4:	00006700 	call	670 <__udivsi3>
    a0b8:	100b883a 	mov	r5,r2
    a0bc:	a009883a 	mov	r4,r20
    a0c0:	94bfffcc 	andi	r18,r18,65535
    a0c4:	1021883a 	mov	r16,r2
    a0c8:	94e4b03a 	or	r18,r18,r19
    a0cc:	000072c0 	call	72c <__mulsi3>
    a0d0:	9080052e 	bgeu	r18,r2,a0e8 <__udivdi3+0x140>
    a0d4:	8ca5883a 	add	r18,r17,r18
    a0d8:	80ffffc4 	addi	r3,r16,-1
    a0dc:	94410c36 	bltu	r18,r17,a510 <__udivdi3+0x568>
    a0e0:	90810b2e 	bgeu	r18,r2,a510 <__udivdi3+0x568>
    a0e4:	843fff84 	addi	r16,r16,-2
    a0e8:	b004943a 	slli	r2,r22,16
    a0ec:	0007883a 	mov	r3,zero
    a0f0:	1404b03a 	or	r2,r2,r16
    a0f4:	00005e06 	br	a270 <__udivdi3+0x2c8>
    a0f8:	29c05b36 	bltu	r5,r7,a268 <__udivdi3+0x2c0>
    a0fc:	00bfffd4 	movui	r2,65535
    a100:	11c0672e 	bgeu	r2,r7,a2a0 <__udivdi3+0x2f8>
    a104:	00804034 	movhi	r2,256
    a108:	10bfffc4 	addi	r2,r2,-1
    a10c:	11c10a36 	bltu	r2,r7,a538 <__udivdi3+0x590>
    a110:	00800404 	movi	r2,16
    a114:	3886d83a 	srl	r3,r7,r2
    a118:	01000074 	movhi	r4,1
    a11c:	213f5e04 	addi	r4,r4,-648
    a120:	20c7883a 	add	r3,r4,r3
    a124:	18c00003 	ldbu	r3,0(r3)
    a128:	05c00804 	movi	r23,32
    a12c:	1885883a 	add	r2,r3,r2
    a130:	b8afc83a 	sub	r23,r23,r2
    a134:	b800671e 	bne	r23,zero,a2d4 <__udivdi3+0x32c>
    a138:	3c010536 	bltu	r7,r16,a550 <__udivdi3+0x5a8>
    a13c:	9985403a 	cmpgeu	r2,r19,r6
    a140:	0007883a 	mov	r3,zero
    a144:	00004a06 	br	a270 <__udivdi3+0x2c8>
    a148:	3000041e 	bne	r6,zero,a15c <__udivdi3+0x1b4>
    a14c:	000b883a 	mov	r5,zero
    a150:	01000044 	movi	r4,1
    a154:	00006700 	call	670 <__udivsi3>
    a158:	1023883a 	mov	r17,r2
    a15c:	00bfffd4 	movui	r2,65535
    a160:	1440532e 	bgeu	r2,r17,a2b0 <__udivdi3+0x308>
    a164:	00804034 	movhi	r2,256
    a168:	10bfffc4 	addi	r2,r2,-1
    a16c:	1440f436 	bltu	r2,r17,a540 <__udivdi3+0x598>
    a170:	00800404 	movi	r2,16
    a174:	8886d83a 	srl	r3,r17,r2
    a178:	01000074 	movhi	r4,1
    a17c:	213f5e04 	addi	r4,r4,-648
    a180:	20c7883a 	add	r3,r4,r3
    a184:	18c00003 	ldbu	r3,0(r3)
    a188:	1885883a 	add	r2,r3,r2
    a18c:	00c00804 	movi	r3,32
    a190:	1887c83a 	sub	r3,r3,r2
    a194:	1800a51e 	bne	r3,zero,a42c <__udivdi3+0x484>
    a198:	882ad43a 	srli	r21,r17,16
    a19c:	8461c83a 	sub	r16,r16,r17
    a1a0:	8d3fffcc 	andi	r20,r17,65535
    a1a4:	00c00044 	movi	r3,1
    a1a8:	a80b883a 	mov	r5,r21
    a1ac:	8009883a 	mov	r4,r16
    a1b0:	d8c00115 	stw	r3,4(sp)
    a1b4:	00006d40 	call	6d4 <__umodsi3>
    a1b8:	a80b883a 	mov	r5,r21
    a1bc:	8009883a 	mov	r4,r16
    a1c0:	1027883a 	mov	r19,r2
    a1c4:	00006700 	call	670 <__udivsi3>
    a1c8:	a00b883a 	mov	r5,r20
    a1cc:	1009883a 	mov	r4,r2
    a1d0:	102d883a 	mov	r22,r2
    a1d4:	000072c0 	call	72c <__mulsi3>
    a1d8:	9826943a 	slli	r19,r19,16
    a1dc:	900ed43a 	srli	r7,r18,16
    a1e0:	d8c00117 	ldw	r3,4(sp)
    a1e4:	3cceb03a 	or	r7,r7,r19
    a1e8:	3880052e 	bgeu	r7,r2,a200 <__udivdi3+0x258>
    a1ec:	3c4f883a 	add	r7,r7,r17
    a1f0:	b13fffc4 	addi	r4,r22,-1
    a1f4:	3c400136 	bltu	r7,r17,a1fc <__udivdi3+0x254>
    a1f8:	3880e436 	bltu	r7,r2,a58c <__udivdi3+0x5e4>
    a1fc:	202d883a 	mov	r22,r4
    a200:	38a1c83a 	sub	r16,r7,r2
    a204:	8009883a 	mov	r4,r16
    a208:	a80b883a 	mov	r5,r21
    a20c:	d8c00115 	stw	r3,4(sp)
    a210:	00006d40 	call	6d4 <__umodsi3>
    a214:	1027883a 	mov	r19,r2
    a218:	8009883a 	mov	r4,r16
    a21c:	a80b883a 	mov	r5,r21
    a220:	9826943a 	slli	r19,r19,16
    a224:	00006700 	call	670 <__udivsi3>
    a228:	a00b883a 	mov	r5,r20
    a22c:	1009883a 	mov	r4,r2
    a230:	94bfffcc 	andi	r18,r18,65535
    a234:	1021883a 	mov	r16,r2
    a238:	94e4b03a 	or	r18,r18,r19
    a23c:	000072c0 	call	72c <__mulsi3>
    a240:	d8c00117 	ldw	r3,4(sp)
    a244:	9080052e 	bgeu	r18,r2,a25c <__udivdi3+0x2b4>
    a248:	8ca5883a 	add	r18,r17,r18
    a24c:	813fffc4 	addi	r4,r16,-1
    a250:	9440ad36 	bltu	r18,r17,a508 <__udivdi3+0x560>
    a254:	9080ac2e 	bgeu	r18,r2,a508 <__udivdi3+0x560>
    a258:	843fff84 	addi	r16,r16,-2
    a25c:	b004943a 	slli	r2,r22,16
    a260:	1404b03a 	or	r2,r2,r16
    a264:	00000206 	br	a270 <__udivdi3+0x2c8>
    a268:	0007883a 	mov	r3,zero
    a26c:	0005883a 	mov	r2,zero
    a270:	dfc00b17 	ldw	ra,44(sp)
    a274:	df000a17 	ldw	fp,40(sp)
    a278:	ddc00917 	ldw	r23,36(sp)
    a27c:	dd800817 	ldw	r22,32(sp)
    a280:	dd400717 	ldw	r21,28(sp)
    a284:	dd000617 	ldw	r20,24(sp)
    a288:	dcc00517 	ldw	r19,20(sp)
    a28c:	dc800417 	ldw	r18,16(sp)
    a290:	dc400317 	ldw	r17,12(sp)
    a294:	dc000217 	ldw	r16,8(sp)
    a298:	dec00c04 	addi	sp,sp,48
    a29c:	f800283a 	ret
    a2a0:	00803fc4 	movi	r2,255
    a2a4:	11c5803a 	cmpltu	r2,r2,r7
    a2a8:	100490fa 	slli	r2,r2,3
    a2ac:	003f9906 	br	a114 <__alt_exception_stack_pointer+0xf800a114>
    a2b0:	00803fc4 	movi	r2,255
    a2b4:	1445803a 	cmpltu	r2,r2,r17
    a2b8:	100490fa 	slli	r2,r2,3
    a2bc:	003fad06 	br	a174 <__alt_exception_stack_pointer+0xf800a174>
    a2c0:	00804034 	movhi	r2,256
    a2c4:	10bfffc4 	addi	r2,r2,-1
    a2c8:	11809f36 	bltu	r2,r6,a548 <__udivdi3+0x5a0>
    a2cc:	00800404 	movi	r2,16
    a2d0:	003f4c06 	br	a004 <__alt_exception_stack_pointer+0xf800a004>
    a2d4:	3dce983a 	sll	r7,r7,r23
    a2d8:	30b8d83a 	srl	fp,r6,r2
    a2dc:	80a2d83a 	srl	r17,r16,r2
    a2e0:	35cc983a 	sll	r6,r6,r23
    a2e4:	3f38b03a 	or	fp,r7,fp
    a2e8:	e024d43a 	srli	r18,fp,16
    a2ec:	9884d83a 	srl	r2,r19,r2
    a2f0:	85e0983a 	sll	r16,r16,r23
    a2f4:	8809883a 	mov	r4,r17
    a2f8:	900b883a 	mov	r5,r18
    a2fc:	d9800015 	stw	r6,0(sp)
    a300:	1420b03a 	or	r16,r2,r16
    a304:	00006d40 	call	6d4 <__umodsi3>
    a308:	900b883a 	mov	r5,r18
    a30c:	8809883a 	mov	r4,r17
    a310:	1029883a 	mov	r20,r2
    a314:	e5bfffcc 	andi	r22,fp,65535
    a318:	00006700 	call	670 <__udivsi3>
    a31c:	100b883a 	mov	r5,r2
    a320:	b009883a 	mov	r4,r22
    a324:	102b883a 	mov	r21,r2
    a328:	000072c0 	call	72c <__mulsi3>
    a32c:	a028943a 	slli	r20,r20,16
    a330:	8006d43a 	srli	r3,r16,16
    a334:	1d06b03a 	or	r3,r3,r20
    a338:	1880042e 	bgeu	r3,r2,a34c <__udivdi3+0x3a4>
    a33c:	1f07883a 	add	r3,r3,fp
    a340:	a93fffc4 	addi	r4,r21,-1
    a344:	1f00892e 	bgeu	r3,fp,a56c <__udivdi3+0x5c4>
    a348:	202b883a 	mov	r21,r4
    a34c:	18a3c83a 	sub	r17,r3,r2
    a350:	8809883a 	mov	r4,r17
    a354:	900b883a 	mov	r5,r18
    a358:	00006d40 	call	6d4 <__umodsi3>
    a35c:	1029883a 	mov	r20,r2
    a360:	8809883a 	mov	r4,r17
    a364:	900b883a 	mov	r5,r18
    a368:	a028943a 	slli	r20,r20,16
    a36c:	00006700 	call	670 <__udivsi3>
    a370:	100b883a 	mov	r5,r2
    a374:	b009883a 	mov	r4,r22
    a378:	843fffcc 	andi	r16,r16,65535
    a37c:	1023883a 	mov	r17,r2
    a380:	8520b03a 	or	r16,r16,r20
    a384:	000072c0 	call	72c <__mulsi3>
    a388:	8080042e 	bgeu	r16,r2,a39c <__udivdi3+0x3f4>
    a38c:	8721883a 	add	r16,r16,fp
    a390:	88ffffc4 	addi	r3,r17,-1
    a394:	8700712e 	bgeu	r16,fp,a55c <__udivdi3+0x5b4>
    a398:	1823883a 	mov	r17,r3
    a39c:	a80e943a 	slli	r7,r21,16
    a3a0:	d8c00017 	ldw	r3,0(sp)
    a3a4:	80a1c83a 	sub	r16,r16,r2
    a3a8:	3c64b03a 	or	r18,r7,r17
    a3ac:	1d3fffcc 	andi	r20,r3,65535
    a3b0:	9022d43a 	srli	r17,r18,16
    a3b4:	95bfffcc 	andi	r22,r18,65535
    a3b8:	a00b883a 	mov	r5,r20
    a3bc:	b009883a 	mov	r4,r22
    a3c0:	182ad43a 	srli	r21,r3,16
    a3c4:	000072c0 	call	72c <__mulsi3>
    a3c8:	a00b883a 	mov	r5,r20
    a3cc:	8809883a 	mov	r4,r17
    a3d0:	1039883a 	mov	fp,r2
    a3d4:	000072c0 	call	72c <__mulsi3>
    a3d8:	8809883a 	mov	r4,r17
    a3dc:	a80b883a 	mov	r5,r21
    a3e0:	1029883a 	mov	r20,r2
    a3e4:	000072c0 	call	72c <__mulsi3>
    a3e8:	a80b883a 	mov	r5,r21
    a3ec:	b009883a 	mov	r4,r22
    a3f0:	1023883a 	mov	r17,r2
    a3f4:	000072c0 	call	72c <__mulsi3>
    a3f8:	e006d43a 	srli	r3,fp,16
    a3fc:	1505883a 	add	r2,r2,r20
    a400:	1887883a 	add	r3,r3,r2
    a404:	1d00022e 	bgeu	r3,r20,a410 <__udivdi3+0x468>
    a408:	00800074 	movhi	r2,1
    a40c:	88a3883a 	add	r17,r17,r2
    a410:	1804d43a 	srli	r2,r3,16
    a414:	1463883a 	add	r17,r2,r17
    a418:	84404436 	bltu	r16,r17,a52c <__udivdi3+0x584>
    a41c:	84403e26 	beq	r16,r17,a518 <__udivdi3+0x570>
    a420:	9005883a 	mov	r2,r18
    a424:	0007883a 	mov	r3,zero
    a428:	003f9106 	br	a270 <__alt_exception_stack_pointer+0xf800a270>
    a42c:	88e2983a 	sll	r17,r17,r3
    a430:	80aed83a 	srl	r23,r16,r2
    a434:	80e0983a 	sll	r16,r16,r3
    a438:	882ad43a 	srli	r21,r17,16
    a43c:	9884d83a 	srl	r2,r19,r2
    a440:	b809883a 	mov	r4,r23
    a444:	a80b883a 	mov	r5,r21
    a448:	98e4983a 	sll	r18,r19,r3
    a44c:	142cb03a 	or	r22,r2,r16
    a450:	00006d40 	call	6d4 <__umodsi3>
    a454:	b809883a 	mov	r4,r23
    a458:	a80b883a 	mov	r5,r21
    a45c:	1027883a 	mov	r19,r2
    a460:	8d3fffcc 	andi	r20,r17,65535
    a464:	00006700 	call	670 <__udivsi3>
    a468:	a009883a 	mov	r4,r20
    a46c:	100b883a 	mov	r5,r2
    a470:	102f883a 	mov	r23,r2
    a474:	000072c0 	call	72c <__mulsi3>
    a478:	9826943a 	slli	r19,r19,16
    a47c:	b008d43a 	srli	r4,r22,16
    a480:	24c8b03a 	or	r4,r4,r19
    a484:	2080062e 	bgeu	r4,r2,a4a0 <__udivdi3+0x4f8>
    a488:	2449883a 	add	r4,r4,r17
    a48c:	b8ffffc4 	addi	r3,r23,-1
    a490:	24403c36 	bltu	r4,r17,a584 <__udivdi3+0x5dc>
    a494:	20803b2e 	bgeu	r4,r2,a584 <__udivdi3+0x5dc>
    a498:	bdffff84 	addi	r23,r23,-2
    a49c:	2449883a 	add	r4,r4,r17
    a4a0:	20a1c83a 	sub	r16,r4,r2
    a4a4:	a80b883a 	mov	r5,r21
    a4a8:	8009883a 	mov	r4,r16
    a4ac:	00006d40 	call	6d4 <__umodsi3>
    a4b0:	a80b883a 	mov	r5,r21
    a4b4:	8009883a 	mov	r4,r16
    a4b8:	1027883a 	mov	r19,r2
    a4bc:	00006700 	call	670 <__udivsi3>
    a4c0:	a009883a 	mov	r4,r20
    a4c4:	100b883a 	mov	r5,r2
    a4c8:	9826943a 	slli	r19,r19,16
    a4cc:	1039883a 	mov	fp,r2
    a4d0:	000072c0 	call	72c <__mulsi3>
    a4d4:	b13fffcc 	andi	r4,r22,65535
    a4d8:	24c8b03a 	or	r4,r4,r19
    a4dc:	2080062e 	bgeu	r4,r2,a4f8 <__udivdi3+0x550>
    a4e0:	2449883a 	add	r4,r4,r17
    a4e4:	e0ffffc4 	addi	r3,fp,-1
    a4e8:	24402436 	bltu	r4,r17,a57c <__udivdi3+0x5d4>
    a4ec:	2080232e 	bgeu	r4,r2,a57c <__udivdi3+0x5d4>
    a4f0:	e73fff84 	addi	fp,fp,-2
    a4f4:	2449883a 	add	r4,r4,r17
    a4f8:	b82e943a 	slli	r23,r23,16
    a4fc:	20a1c83a 	sub	r16,r4,r2
    a500:	bf06b03a 	or	r3,r23,fp
    a504:	003f2806 	br	a1a8 <__alt_exception_stack_pointer+0xf800a1a8>
    a508:	2021883a 	mov	r16,r4
    a50c:	003f5306 	br	a25c <__alt_exception_stack_pointer+0xf800a25c>
    a510:	1821883a 	mov	r16,r3
    a514:	003ef406 	br	a0e8 <__alt_exception_stack_pointer+0xf800a0e8>
    a518:	1806943a 	slli	r3,r3,16
    a51c:	9de6983a 	sll	r19,r19,r23
    a520:	e73fffcc 	andi	fp,fp,65535
    a524:	1f07883a 	add	r3,r3,fp
    a528:	98ffbd2e 	bgeu	r19,r3,a420 <__alt_exception_stack_pointer+0xf800a420>
    a52c:	90bfffc4 	addi	r2,r18,-1
    a530:	0007883a 	mov	r3,zero
    a534:	003f4e06 	br	a270 <__alt_exception_stack_pointer+0xf800a270>
    a538:	00800604 	movi	r2,24
    a53c:	003ef506 	br	a114 <__alt_exception_stack_pointer+0xf800a114>
    a540:	00800604 	movi	r2,24
    a544:	003f0b06 	br	a174 <__alt_exception_stack_pointer+0xf800a174>
    a548:	00800604 	movi	r2,24
    a54c:	003ead06 	br	a004 <__alt_exception_stack_pointer+0xf800a004>
    a550:	0007883a 	mov	r3,zero
    a554:	00800044 	movi	r2,1
    a558:	003f4506 	br	a270 <__alt_exception_stack_pointer+0xf800a270>
    a55c:	80bf8e2e 	bgeu	r16,r2,a398 <__alt_exception_stack_pointer+0xf800a398>
    a560:	8c7fff84 	addi	r17,r17,-2
    a564:	8721883a 	add	r16,r16,fp
    a568:	003f8c06 	br	a39c <__alt_exception_stack_pointer+0xf800a39c>
    a56c:	18bf762e 	bgeu	r3,r2,a348 <__alt_exception_stack_pointer+0xf800a348>
    a570:	ad7fff84 	addi	r21,r21,-2
    a574:	1f07883a 	add	r3,r3,fp
    a578:	003f7406 	br	a34c <__alt_exception_stack_pointer+0xf800a34c>
    a57c:	1839883a 	mov	fp,r3
    a580:	003fdd06 	br	a4f8 <__alt_exception_stack_pointer+0xf800a4f8>
    a584:	182f883a 	mov	r23,r3
    a588:	003fc506 	br	a4a0 <__alt_exception_stack_pointer+0xf800a4a0>
    a58c:	b5bfff84 	addi	r22,r22,-2
    a590:	3c4f883a 	add	r7,r7,r17
    a594:	003f1a06 	br	a200 <__alt_exception_stack_pointer+0xf800a200>
    a598:	b5bfff84 	addi	r22,r22,-2
    a59c:	1c47883a 	add	r3,r3,r17
    a5a0:	003ebc06 	br	a094 <__alt_exception_stack_pointer+0xf800a094>

0000a5a4 <__umoddi3>:
    a5a4:	defff304 	addi	sp,sp,-52
    a5a8:	df000b15 	stw	fp,44(sp)
    a5ac:	dc400415 	stw	r17,16(sp)
    a5b0:	dc000315 	stw	r16,12(sp)
    a5b4:	dfc00c15 	stw	ra,48(sp)
    a5b8:	ddc00a15 	stw	r23,40(sp)
    a5bc:	dd800915 	stw	r22,36(sp)
    a5c0:	dd400815 	stw	r21,32(sp)
    a5c4:	dd000715 	stw	r20,28(sp)
    a5c8:	dcc00615 	stw	r19,24(sp)
    a5cc:	dc800515 	stw	r18,20(sp)
    a5d0:	2021883a 	mov	r16,r4
    a5d4:	2823883a 	mov	r17,r5
    a5d8:	2839883a 	mov	fp,r5
    a5dc:	3800401e 	bne	r7,zero,a6e0 <__umoddi3+0x13c>
    a5e0:	3027883a 	mov	r19,r6
    a5e4:	2029883a 	mov	r20,r4
    a5e8:	2980552e 	bgeu	r5,r6,a740 <__umoddi3+0x19c>
    a5ec:	00bfffd4 	movui	r2,65535
    a5f0:	1180a236 	bltu	r2,r6,a87c <__umoddi3+0x2d8>
    a5f4:	01003fc4 	movi	r4,255
    a5f8:	2189803a 	cmpltu	r4,r4,r6
    a5fc:	200890fa 	slli	r4,r4,3
    a600:	3104d83a 	srl	r2,r6,r4
    a604:	00c00074 	movhi	r3,1
    a608:	18ff5e04 	addi	r3,r3,-648
    a60c:	1885883a 	add	r2,r3,r2
    a610:	10c00003 	ldbu	r3,0(r2)
    a614:	00800804 	movi	r2,32
    a618:	1909883a 	add	r4,r3,r4
    a61c:	1125c83a 	sub	r18,r2,r4
    a620:	90000526 	beq	r18,zero,a638 <__umoddi3+0x94>
    a624:	8ca2983a 	sll	r17,r17,r18
    a628:	8108d83a 	srl	r4,r16,r4
    a62c:	34a6983a 	sll	r19,r6,r18
    a630:	84a8983a 	sll	r20,r16,r18
    a634:	2478b03a 	or	fp,r4,r17
    a638:	982cd43a 	srli	r22,r19,16
    a63c:	e009883a 	mov	r4,fp
    a640:	9dffffcc 	andi	r23,r19,65535
    a644:	b00b883a 	mov	r5,r22
    a648:	00006d40 	call	6d4 <__umodsi3>
    a64c:	b00b883a 	mov	r5,r22
    a650:	e009883a 	mov	r4,fp
    a654:	102b883a 	mov	r21,r2
    a658:	00006700 	call	670 <__udivsi3>
    a65c:	100b883a 	mov	r5,r2
    a660:	b809883a 	mov	r4,r23
    a664:	000072c0 	call	72c <__mulsi3>
    a668:	a82a943a 	slli	r21,r21,16
    a66c:	a006d43a 	srli	r3,r20,16
    a670:	1d46b03a 	or	r3,r3,r21
    a674:	1880032e 	bgeu	r3,r2,a684 <__umoddi3+0xe0>
    a678:	1cc7883a 	add	r3,r3,r19
    a67c:	1cc00136 	bltu	r3,r19,a684 <__umoddi3+0xe0>
    a680:	18813136 	bltu	r3,r2,ab48 <__umoddi3+0x5a4>
    a684:	18a1c83a 	sub	r16,r3,r2
    a688:	b00b883a 	mov	r5,r22
    a68c:	8009883a 	mov	r4,r16
    a690:	00006d40 	call	6d4 <__umodsi3>
    a694:	b00b883a 	mov	r5,r22
    a698:	8009883a 	mov	r4,r16
    a69c:	1023883a 	mov	r17,r2
    a6a0:	00006700 	call	670 <__udivsi3>
    a6a4:	100b883a 	mov	r5,r2
    a6a8:	b809883a 	mov	r4,r23
    a6ac:	8822943a 	slli	r17,r17,16
    a6b0:	000072c0 	call	72c <__mulsi3>
    a6b4:	a0ffffcc 	andi	r3,r20,65535
    a6b8:	1c46b03a 	or	r3,r3,r17
    a6bc:	1880042e 	bgeu	r3,r2,a6d0 <__umoddi3+0x12c>
    a6c0:	1cc7883a 	add	r3,r3,r19
    a6c4:	1cc00236 	bltu	r3,r19,a6d0 <__umoddi3+0x12c>
    a6c8:	1880012e 	bgeu	r3,r2,a6d0 <__umoddi3+0x12c>
    a6cc:	1cc7883a 	add	r3,r3,r19
    a6d0:	1885c83a 	sub	r2,r3,r2
    a6d4:	1484d83a 	srl	r2,r2,r18
    a6d8:	0007883a 	mov	r3,zero
    a6dc:	00005306 	br	a82c <__umoddi3+0x288>
    a6e0:	29c05036 	bltu	r5,r7,a824 <__umoddi3+0x280>
    a6e4:	00bfffd4 	movui	r2,65535
    a6e8:	11c05c2e 	bgeu	r2,r7,a85c <__umoddi3+0x2b8>
    a6ec:	00804034 	movhi	r2,256
    a6f0:	10bfffc4 	addi	r2,r2,-1
    a6f4:	11c10636 	bltu	r2,r7,ab10 <__umoddi3+0x56c>
    a6f8:	01000404 	movi	r4,16
    a6fc:	3904d83a 	srl	r2,r7,r4
    a700:	00c00074 	movhi	r3,1
    a704:	18ff5e04 	addi	r3,r3,-648
    a708:	1885883a 	add	r2,r3,r2
    a70c:	14c00003 	ldbu	r19,0(r2)
    a710:	00c00804 	movi	r3,32
    a714:	9927883a 	add	r19,r19,r4
    a718:	1ce9c83a 	sub	r20,r3,r19
    a71c:	a0005c1e 	bne	r20,zero,a890 <__umoddi3+0x2ec>
    a720:	3c400136 	bltu	r7,r17,a728 <__umoddi3+0x184>
    a724:	81810a36 	bltu	r16,r6,ab50 <__umoddi3+0x5ac>
    a728:	8185c83a 	sub	r2,r16,r6
    a72c:	89e3c83a 	sub	r17,r17,r7
    a730:	8089803a 	cmpltu	r4,r16,r2
    a734:	8939c83a 	sub	fp,r17,r4
    a738:	e007883a 	mov	r3,fp
    a73c:	00003b06 	br	a82c <__umoddi3+0x288>
    a740:	3000041e 	bne	r6,zero,a754 <__umoddi3+0x1b0>
    a744:	000b883a 	mov	r5,zero
    a748:	01000044 	movi	r4,1
    a74c:	00006700 	call	670 <__udivsi3>
    a750:	1027883a 	mov	r19,r2
    a754:	00bfffd4 	movui	r2,65535
    a758:	14c0442e 	bgeu	r2,r19,a86c <__umoddi3+0x2c8>
    a75c:	00804034 	movhi	r2,256
    a760:	10bfffc4 	addi	r2,r2,-1
    a764:	14c0ec36 	bltu	r2,r19,ab18 <__umoddi3+0x574>
    a768:	00800404 	movi	r2,16
    a76c:	9886d83a 	srl	r3,r19,r2
    a770:	01000074 	movhi	r4,1
    a774:	213f5e04 	addi	r4,r4,-648
    a778:	20c7883a 	add	r3,r4,r3
    a77c:	18c00003 	ldbu	r3,0(r3)
    a780:	1887883a 	add	r3,r3,r2
    a784:	00800804 	movi	r2,32
    a788:	10e5c83a 	sub	r18,r2,r3
    a78c:	9000ab1e 	bne	r18,zero,aa3c <__umoddi3+0x498>
    a790:	982cd43a 	srli	r22,r19,16
    a794:	8ce3c83a 	sub	r17,r17,r19
    a798:	9dffffcc 	andi	r23,r19,65535
    a79c:	b00b883a 	mov	r5,r22
    a7a0:	8809883a 	mov	r4,r17
    a7a4:	00006d40 	call	6d4 <__umodsi3>
    a7a8:	b00b883a 	mov	r5,r22
    a7ac:	8809883a 	mov	r4,r17
    a7b0:	102b883a 	mov	r21,r2
    a7b4:	00006700 	call	670 <__udivsi3>
    a7b8:	b80b883a 	mov	r5,r23
    a7bc:	1009883a 	mov	r4,r2
    a7c0:	000072c0 	call	72c <__mulsi3>
    a7c4:	a82a943a 	slli	r21,r21,16
    a7c8:	a006d43a 	srli	r3,r20,16
    a7cc:	1d46b03a 	or	r3,r3,r21
    a7d0:	1880042e 	bgeu	r3,r2,a7e4 <__umoddi3+0x240>
    a7d4:	1cc7883a 	add	r3,r3,r19
    a7d8:	1cc00236 	bltu	r3,r19,a7e4 <__umoddi3+0x240>
    a7dc:	1880012e 	bgeu	r3,r2,a7e4 <__umoddi3+0x240>
    a7e0:	1cc7883a 	add	r3,r3,r19
    a7e4:	18a1c83a 	sub	r16,r3,r2
    a7e8:	b00b883a 	mov	r5,r22
    a7ec:	8009883a 	mov	r4,r16
    a7f0:	00006d40 	call	6d4 <__umodsi3>
    a7f4:	1023883a 	mov	r17,r2
    a7f8:	b00b883a 	mov	r5,r22
    a7fc:	8009883a 	mov	r4,r16
    a800:	00006700 	call	670 <__udivsi3>
    a804:	8822943a 	slli	r17,r17,16
    a808:	b80b883a 	mov	r5,r23
    a80c:	1009883a 	mov	r4,r2
    a810:	000072c0 	call	72c <__mulsi3>
    a814:	a53fffcc 	andi	r20,r20,65535
    a818:	a446b03a 	or	r3,r20,r17
    a81c:	18bfac2e 	bgeu	r3,r2,a6d0 <__alt_exception_stack_pointer+0xf800a6d0>
    a820:	003fa706 	br	a6c0 <__alt_exception_stack_pointer+0xf800a6c0>
    a824:	2005883a 	mov	r2,r4
    a828:	2807883a 	mov	r3,r5
    a82c:	dfc00c17 	ldw	ra,48(sp)
    a830:	df000b17 	ldw	fp,44(sp)
    a834:	ddc00a17 	ldw	r23,40(sp)
    a838:	dd800917 	ldw	r22,36(sp)
    a83c:	dd400817 	ldw	r21,32(sp)
    a840:	dd000717 	ldw	r20,28(sp)
    a844:	dcc00617 	ldw	r19,24(sp)
    a848:	dc800517 	ldw	r18,20(sp)
    a84c:	dc400417 	ldw	r17,16(sp)
    a850:	dc000317 	ldw	r16,12(sp)
    a854:	dec00d04 	addi	sp,sp,52
    a858:	f800283a 	ret
    a85c:	04c03fc4 	movi	r19,255
    a860:	99c9803a 	cmpltu	r4,r19,r7
    a864:	200890fa 	slli	r4,r4,3
    a868:	003fa406 	br	a6fc <__alt_exception_stack_pointer+0xf800a6fc>
    a86c:	00803fc4 	movi	r2,255
    a870:	14c5803a 	cmpltu	r2,r2,r19
    a874:	100490fa 	slli	r2,r2,3
    a878:	003fbc06 	br	a76c <__alt_exception_stack_pointer+0xf800a76c>
    a87c:	00804034 	movhi	r2,256
    a880:	10bfffc4 	addi	r2,r2,-1
    a884:	1180a636 	bltu	r2,r6,ab20 <__umoddi3+0x57c>
    a888:	01000404 	movi	r4,16
    a88c:	003f5c06 	br	a600 <__alt_exception_stack_pointer+0xf800a600>
    a890:	3d0e983a 	sll	r7,r7,r20
    a894:	34ead83a 	srl	r21,r6,r19
    a898:	8cc6d83a 	srl	r3,r17,r19
    a89c:	8d10983a 	sll	r8,r17,r20
    a8a0:	3d6ab03a 	or	r21,r7,r21
    a8a4:	a82cd43a 	srli	r22,r21,16
    a8a8:	84e2d83a 	srl	r17,r16,r19
    a8ac:	1809883a 	mov	r4,r3
    a8b0:	b00b883a 	mov	r5,r22
    a8b4:	8a22b03a 	or	r17,r17,r8
    a8b8:	3524983a 	sll	r18,r6,r20
    a8bc:	dc400015 	stw	r17,0(sp)
    a8c0:	d8c00115 	stw	r3,4(sp)
    a8c4:	00006d40 	call	6d4 <__umodsi3>
    a8c8:	d8c00117 	ldw	r3,4(sp)
    a8cc:	b00b883a 	mov	r5,r22
    a8d0:	1039883a 	mov	fp,r2
    a8d4:	1809883a 	mov	r4,r3
    a8d8:	00006700 	call	670 <__udivsi3>
    a8dc:	adffffcc 	andi	r23,r21,65535
    a8e0:	100b883a 	mov	r5,r2
    a8e4:	b809883a 	mov	r4,r23
    a8e8:	1023883a 	mov	r17,r2
    a8ec:	000072c0 	call	72c <__mulsi3>
    a8f0:	d9400017 	ldw	r5,0(sp)
    a8f4:	e008943a 	slli	r4,fp,16
    a8f8:	8520983a 	sll	r16,r16,r20
    a8fc:	2806d43a 	srli	r3,r5,16
    a900:	1906b03a 	or	r3,r3,r4
    a904:	1880042e 	bgeu	r3,r2,a918 <__umoddi3+0x374>
    a908:	1d47883a 	add	r3,r3,r21
    a90c:	893fffc4 	addi	r4,r17,-1
    a910:	1d40892e 	bgeu	r3,r21,ab38 <__umoddi3+0x594>
    a914:	2023883a 	mov	r17,r4
    a918:	18b9c83a 	sub	fp,r3,r2
    a91c:	b00b883a 	mov	r5,r22
    a920:	e009883a 	mov	r4,fp
    a924:	00006d40 	call	6d4 <__umodsi3>
    a928:	b00b883a 	mov	r5,r22
    a92c:	e009883a 	mov	r4,fp
    a930:	d8800215 	stw	r2,8(sp)
    a934:	00006700 	call	670 <__udivsi3>
    a938:	100b883a 	mov	r5,r2
    a93c:	b809883a 	mov	r4,r23
    a940:	102d883a 	mov	r22,r2
    a944:	000072c0 	call	72c <__mulsi3>
    a948:	d9800217 	ldw	r6,8(sp)
    a94c:	d8c00017 	ldw	r3,0(sp)
    a950:	300c943a 	slli	r6,r6,16
    a954:	1a3fffcc 	andi	r8,r3,65535
    a958:	4190b03a 	or	r8,r8,r6
    a95c:	4080042e 	bgeu	r8,r2,a970 <__umoddi3+0x3cc>
    a960:	4551883a 	add	r8,r8,r21
    a964:	b0ffffc4 	addi	r3,r22,-1
    a968:	45406f2e 	bgeu	r8,r21,ab28 <__umoddi3+0x584>
    a96c:	182d883a 	mov	r22,r3
    a970:	880e943a 	slli	r7,r17,16
    a974:	9006d43a 	srli	r3,r18,16
    a978:	91bfffcc 	andi	r6,r18,65535
    a97c:	3dacb03a 	or	r22,r7,r22
    a980:	b02ed43a 	srli	r23,r22,16
    a984:	b5bfffcc 	andi	r22,r22,65535
    a988:	300b883a 	mov	r5,r6
    a98c:	b009883a 	mov	r4,r22
    a990:	40a3c83a 	sub	r17,r8,r2
    a994:	d8c00115 	stw	r3,4(sp)
    a998:	d9800215 	stw	r6,8(sp)
    a99c:	000072c0 	call	72c <__mulsi3>
    a9a0:	d9800217 	ldw	r6,8(sp)
    a9a4:	b809883a 	mov	r4,r23
    a9a8:	1039883a 	mov	fp,r2
    a9ac:	300b883a 	mov	r5,r6
    a9b0:	000072c0 	call	72c <__mulsi3>
    a9b4:	d8c00117 	ldw	r3,4(sp)
    a9b8:	b809883a 	mov	r4,r23
    a9bc:	d8800215 	stw	r2,8(sp)
    a9c0:	180b883a 	mov	r5,r3
    a9c4:	000072c0 	call	72c <__mulsi3>
    a9c8:	d8c00117 	ldw	r3,4(sp)
    a9cc:	b009883a 	mov	r4,r22
    a9d0:	102f883a 	mov	r23,r2
    a9d4:	180b883a 	mov	r5,r3
    a9d8:	000072c0 	call	72c <__mulsi3>
    a9dc:	d9800217 	ldw	r6,8(sp)
    a9e0:	e006d43a 	srli	r3,fp,16
    a9e4:	1185883a 	add	r2,r2,r6
    a9e8:	1885883a 	add	r2,r3,r2
    a9ec:	1180022e 	bgeu	r2,r6,a9f8 <__umoddi3+0x454>
    a9f0:	00c00074 	movhi	r3,1
    a9f4:	b8ef883a 	add	r23,r23,r3
    a9f8:	1006d43a 	srli	r3,r2,16
    a9fc:	1004943a 	slli	r2,r2,16
    aa00:	e73fffcc 	andi	fp,fp,65535
    aa04:	1dc7883a 	add	r3,r3,r23
    aa08:	1739883a 	add	fp,r2,fp
    aa0c:	88c03a36 	bltu	r17,r3,aaf8 <__umoddi3+0x554>
    aa10:	88c05126 	beq	r17,r3,ab58 <__umoddi3+0x5b4>
    aa14:	88c9c83a 	sub	r4,r17,r3
    aa18:	e00f883a 	mov	r7,fp
    aa1c:	81cfc83a 	sub	r7,r16,r7
    aa20:	81c7803a 	cmpltu	r3,r16,r7
    aa24:	20c7c83a 	sub	r3,r4,r3
    aa28:	1cc4983a 	sll	r2,r3,r19
    aa2c:	3d0ed83a 	srl	r7,r7,r20
    aa30:	1d06d83a 	srl	r3,r3,r20
    aa34:	11c4b03a 	or	r2,r2,r7
    aa38:	003f7c06 	br	a82c <__alt_exception_stack_pointer+0xf800a82c>
    aa3c:	9ca6983a 	sll	r19,r19,r18
    aa40:	88f8d83a 	srl	fp,r17,r3
    aa44:	80c4d83a 	srl	r2,r16,r3
    aa48:	982cd43a 	srli	r22,r19,16
    aa4c:	8ca2983a 	sll	r17,r17,r18
    aa50:	e009883a 	mov	r4,fp
    aa54:	b00b883a 	mov	r5,r22
    aa58:	146ab03a 	or	r21,r2,r17
    aa5c:	00006d40 	call	6d4 <__umodsi3>
    aa60:	b00b883a 	mov	r5,r22
    aa64:	e009883a 	mov	r4,fp
    aa68:	1029883a 	mov	r20,r2
    aa6c:	9dffffcc 	andi	r23,r19,65535
    aa70:	00006700 	call	670 <__udivsi3>
    aa74:	b809883a 	mov	r4,r23
    aa78:	100b883a 	mov	r5,r2
    aa7c:	000072c0 	call	72c <__mulsi3>
    aa80:	a008943a 	slli	r4,r20,16
    aa84:	a806d43a 	srli	r3,r21,16
    aa88:	84a8983a 	sll	r20,r16,r18
    aa8c:	1906b03a 	or	r3,r3,r4
    aa90:	1880042e 	bgeu	r3,r2,aaa4 <__umoddi3+0x500>
    aa94:	1cc7883a 	add	r3,r3,r19
    aa98:	1cc00236 	bltu	r3,r19,aaa4 <__umoddi3+0x500>
    aa9c:	1880012e 	bgeu	r3,r2,aaa4 <__umoddi3+0x500>
    aaa0:	1cc7883a 	add	r3,r3,r19
    aaa4:	18a3c83a 	sub	r17,r3,r2
    aaa8:	b00b883a 	mov	r5,r22
    aaac:	8809883a 	mov	r4,r17
    aab0:	00006d40 	call	6d4 <__umodsi3>
    aab4:	b00b883a 	mov	r5,r22
    aab8:	8809883a 	mov	r4,r17
    aabc:	1021883a 	mov	r16,r2
    aac0:	00006700 	call	670 <__udivsi3>
    aac4:	100b883a 	mov	r5,r2
    aac8:	b809883a 	mov	r4,r23
    aacc:	8020943a 	slli	r16,r16,16
    aad0:	000072c0 	call	72c <__mulsi3>
    aad4:	a8ffffcc 	andi	r3,r21,65535
    aad8:	1c06b03a 	or	r3,r3,r16
    aadc:	1880042e 	bgeu	r3,r2,aaf0 <__umoddi3+0x54c>
    aae0:	1cc7883a 	add	r3,r3,r19
    aae4:	1cc00236 	bltu	r3,r19,aaf0 <__umoddi3+0x54c>
    aae8:	1880012e 	bgeu	r3,r2,aaf0 <__umoddi3+0x54c>
    aaec:	1cc7883a 	add	r3,r3,r19
    aaf0:	18a3c83a 	sub	r17,r3,r2
    aaf4:	003f2906 	br	a79c <__alt_exception_stack_pointer+0xf800a79c>
    aaf8:	e48fc83a 	sub	r7,fp,r18
    aafc:	1d49c83a 	sub	r4,r3,r21
    ab00:	e1f9803a 	cmpltu	fp,fp,r7
    ab04:	2739c83a 	sub	fp,r4,fp
    ab08:	8f09c83a 	sub	r4,r17,fp
    ab0c:	003fc306 	br	aa1c <__alt_exception_stack_pointer+0xf800aa1c>
    ab10:	01000604 	movi	r4,24
    ab14:	003ef906 	br	a6fc <__alt_exception_stack_pointer+0xf800a6fc>
    ab18:	00800604 	movi	r2,24
    ab1c:	003f1306 	br	a76c <__alt_exception_stack_pointer+0xf800a76c>
    ab20:	01000604 	movi	r4,24
    ab24:	003eb606 	br	a600 <__alt_exception_stack_pointer+0xf800a600>
    ab28:	40bf902e 	bgeu	r8,r2,a96c <__alt_exception_stack_pointer+0xf800a96c>
    ab2c:	b5bfff84 	addi	r22,r22,-2
    ab30:	4551883a 	add	r8,r8,r21
    ab34:	003f8e06 	br	a970 <__alt_exception_stack_pointer+0xf800a970>
    ab38:	18bf762e 	bgeu	r3,r2,a914 <__alt_exception_stack_pointer+0xf800a914>
    ab3c:	8c7fff84 	addi	r17,r17,-2
    ab40:	1d47883a 	add	r3,r3,r21
    ab44:	003f7406 	br	a918 <__alt_exception_stack_pointer+0xf800a918>
    ab48:	1cc7883a 	add	r3,r3,r19
    ab4c:	003ecd06 	br	a684 <__alt_exception_stack_pointer+0xf800a684>
    ab50:	8005883a 	mov	r2,r16
    ab54:	003ef806 	br	a738 <__alt_exception_stack_pointer+0xf800a738>
    ab58:	873fe736 	bltu	r16,fp,aaf8 <__alt_exception_stack_pointer+0xf800aaf8>
    ab5c:	e00f883a 	mov	r7,fp
    ab60:	0009883a 	mov	r4,zero
    ab64:	003fad06 	br	aa1c <__alt_exception_stack_pointer+0xf800aa1c>

0000ab68 <__adddf3>:
    ab68:	02c00434 	movhi	r11,16
    ab6c:	5affffc4 	addi	r11,r11,-1
    ab70:	2806d7fa 	srli	r3,r5,31
    ab74:	2ad4703a 	and	r10,r5,r11
    ab78:	3ad2703a 	and	r9,r7,r11
    ab7c:	3804d53a 	srli	r2,r7,20
    ab80:	3018d77a 	srli	r12,r6,29
    ab84:	280ad53a 	srli	r5,r5,20
    ab88:	501490fa 	slli	r10,r10,3
    ab8c:	2010d77a 	srli	r8,r4,29
    ab90:	481290fa 	slli	r9,r9,3
    ab94:	380ed7fa 	srli	r7,r7,31
    ab98:	defffb04 	addi	sp,sp,-20
    ab9c:	dc800215 	stw	r18,8(sp)
    aba0:	dc400115 	stw	r17,4(sp)
    aba4:	dc000015 	stw	r16,0(sp)
    aba8:	dfc00415 	stw	ra,16(sp)
    abac:	dcc00315 	stw	r19,12(sp)
    abb0:	1c803fcc 	andi	r18,r3,255
    abb4:	2c01ffcc 	andi	r16,r5,2047
    abb8:	5210b03a 	or	r8,r10,r8
    abbc:	202290fa 	slli	r17,r4,3
    abc0:	1081ffcc 	andi	r2,r2,2047
    abc4:	4b12b03a 	or	r9,r9,r12
    abc8:	300c90fa 	slli	r6,r6,3
    abcc:	91c07526 	beq	r18,r7,ada4 <__adddf3+0x23c>
    abd0:	8087c83a 	sub	r3,r16,r2
    abd4:	00c0ab0e 	bge	zero,r3,ae84 <__adddf3+0x31c>
    abd8:	10002a1e 	bne	r2,zero,ac84 <__adddf3+0x11c>
    abdc:	4984b03a 	or	r2,r9,r6
    abe0:	1000961e 	bne	r2,zero,ae3c <__adddf3+0x2d4>
    abe4:	888001cc 	andi	r2,r17,7
    abe8:	10000726 	beq	r2,zero,ac08 <__adddf3+0xa0>
    abec:	888003cc 	andi	r2,r17,15
    abf0:	00c00104 	movi	r3,4
    abf4:	10c00426 	beq	r2,r3,ac08 <__adddf3+0xa0>
    abf8:	88c7883a 	add	r3,r17,r3
    abfc:	1c63803a 	cmpltu	r17,r3,r17
    ac00:	4451883a 	add	r8,r8,r17
    ac04:	1823883a 	mov	r17,r3
    ac08:	4080202c 	andhi	r2,r8,128
    ac0c:	10005926 	beq	r2,zero,ad74 <__adddf3+0x20c>
    ac10:	84000044 	addi	r16,r16,1
    ac14:	0081ffc4 	movi	r2,2047
    ac18:	8080ba26 	beq	r16,r2,af04 <__adddf3+0x39c>
    ac1c:	00bfe034 	movhi	r2,65408
    ac20:	10bfffc4 	addi	r2,r2,-1
    ac24:	4090703a 	and	r8,r8,r2
    ac28:	4004977a 	slli	r2,r8,29
    ac2c:	4010927a 	slli	r8,r8,9
    ac30:	8822d0fa 	srli	r17,r17,3
    ac34:	8401ffcc 	andi	r16,r16,2047
    ac38:	4010d33a 	srli	r8,r8,12
    ac3c:	9007883a 	mov	r3,r18
    ac40:	1444b03a 	or	r2,r2,r17
    ac44:	8401ffcc 	andi	r16,r16,2047
    ac48:	8020953a 	slli	r16,r16,20
    ac4c:	18c03fcc 	andi	r3,r3,255
    ac50:	01000434 	movhi	r4,16
    ac54:	213fffc4 	addi	r4,r4,-1
    ac58:	180697fa 	slli	r3,r3,31
    ac5c:	4110703a 	and	r8,r8,r4
    ac60:	4410b03a 	or	r8,r8,r16
    ac64:	40c6b03a 	or	r3,r8,r3
    ac68:	dfc00417 	ldw	ra,16(sp)
    ac6c:	dcc00317 	ldw	r19,12(sp)
    ac70:	dc800217 	ldw	r18,8(sp)
    ac74:	dc400117 	ldw	r17,4(sp)
    ac78:	dc000017 	ldw	r16,0(sp)
    ac7c:	dec00504 	addi	sp,sp,20
    ac80:	f800283a 	ret
    ac84:	0081ffc4 	movi	r2,2047
    ac88:	80bfd626 	beq	r16,r2,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    ac8c:	4a402034 	orhi	r9,r9,128
    ac90:	00800e04 	movi	r2,56
    ac94:	10c09f16 	blt	r2,r3,af14 <__adddf3+0x3ac>
    ac98:	008007c4 	movi	r2,31
    ac9c:	10c0c216 	blt	r2,r3,afa8 <__adddf3+0x440>
    aca0:	00800804 	movi	r2,32
    aca4:	10c5c83a 	sub	r2,r2,r3
    aca8:	488a983a 	sll	r5,r9,r2
    acac:	30c8d83a 	srl	r4,r6,r3
    acb0:	3084983a 	sll	r2,r6,r2
    acb4:	48c6d83a 	srl	r3,r9,r3
    acb8:	290cb03a 	or	r6,r5,r4
    acbc:	1004c03a 	cmpne	r2,r2,zero
    acc0:	308cb03a 	or	r6,r6,r2
    acc4:	898dc83a 	sub	r6,r17,r6
    acc8:	89a3803a 	cmpltu	r17,r17,r6
    accc:	40d1c83a 	sub	r8,r8,r3
    acd0:	4451c83a 	sub	r8,r8,r17
    acd4:	3023883a 	mov	r17,r6
    acd8:	4080202c 	andhi	r2,r8,128
    acdc:	10002326 	beq	r2,zero,ad6c <__adddf3+0x204>
    ace0:	04c02034 	movhi	r19,128
    ace4:	9cffffc4 	addi	r19,r19,-1
    ace8:	44e6703a 	and	r19,r8,r19
    acec:	98007626 	beq	r19,zero,aec8 <__adddf3+0x360>
    acf0:	9809883a 	mov	r4,r19
    acf4:	000d3a80 	call	d3a8 <__clzsi2>
    acf8:	10fffe04 	addi	r3,r2,-8
    acfc:	010007c4 	movi	r4,31
    ad00:	20c07716 	blt	r4,r3,aee0 <__adddf3+0x378>
    ad04:	00800804 	movi	r2,32
    ad08:	10c5c83a 	sub	r2,r2,r3
    ad0c:	8884d83a 	srl	r2,r17,r2
    ad10:	98d0983a 	sll	r8,r19,r3
    ad14:	88e2983a 	sll	r17,r17,r3
    ad18:	1204b03a 	or	r2,r2,r8
    ad1c:	1c007416 	blt	r3,r16,aef0 <__adddf3+0x388>
    ad20:	1c21c83a 	sub	r16,r3,r16
    ad24:	82000044 	addi	r8,r16,1
    ad28:	00c007c4 	movi	r3,31
    ad2c:	1a009116 	blt	r3,r8,af74 <__adddf3+0x40c>
    ad30:	00c00804 	movi	r3,32
    ad34:	1a07c83a 	sub	r3,r3,r8
    ad38:	8a08d83a 	srl	r4,r17,r8
    ad3c:	88e2983a 	sll	r17,r17,r3
    ad40:	10c6983a 	sll	r3,r2,r3
    ad44:	1210d83a 	srl	r8,r2,r8
    ad48:	8804c03a 	cmpne	r2,r17,zero
    ad4c:	1906b03a 	or	r3,r3,r4
    ad50:	18a2b03a 	or	r17,r3,r2
    ad54:	0021883a 	mov	r16,zero
    ad58:	003fa206 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    ad5c:	1890b03a 	or	r8,r3,r2
    ad60:	40017d26 	beq	r8,zero,b358 <__adddf3+0x7f0>
    ad64:	1011883a 	mov	r8,r2
    ad68:	1823883a 	mov	r17,r3
    ad6c:	888001cc 	andi	r2,r17,7
    ad70:	103f9e1e 	bne	r2,zero,abec <__alt_exception_stack_pointer+0xf800abec>
    ad74:	4004977a 	slli	r2,r8,29
    ad78:	8822d0fa 	srli	r17,r17,3
    ad7c:	4010d0fa 	srli	r8,r8,3
    ad80:	9007883a 	mov	r3,r18
    ad84:	1444b03a 	or	r2,r2,r17
    ad88:	0101ffc4 	movi	r4,2047
    ad8c:	81002426 	beq	r16,r4,ae20 <__adddf3+0x2b8>
    ad90:	8120703a 	and	r16,r16,r4
    ad94:	01000434 	movhi	r4,16
    ad98:	213fffc4 	addi	r4,r4,-1
    ad9c:	4110703a 	and	r8,r8,r4
    ada0:	003fa806 	br	ac44 <__alt_exception_stack_pointer+0xf800ac44>
    ada4:	8089c83a 	sub	r4,r16,r2
    ada8:	01005e0e 	bge	zero,r4,af24 <__adddf3+0x3bc>
    adac:	10002b26 	beq	r2,zero,ae5c <__adddf3+0x2f4>
    adb0:	0081ffc4 	movi	r2,2047
    adb4:	80bf8b26 	beq	r16,r2,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    adb8:	4a402034 	orhi	r9,r9,128
    adbc:	00800e04 	movi	r2,56
    adc0:	1100a40e 	bge	r2,r4,b054 <__adddf3+0x4ec>
    adc4:	498cb03a 	or	r6,r9,r6
    adc8:	300ac03a 	cmpne	r5,r6,zero
    adcc:	0013883a 	mov	r9,zero
    add0:	2c4b883a 	add	r5,r5,r17
    add4:	2c63803a 	cmpltu	r17,r5,r17
    add8:	4a11883a 	add	r8,r9,r8
    addc:	8a11883a 	add	r8,r17,r8
    ade0:	2823883a 	mov	r17,r5
    ade4:	4080202c 	andhi	r2,r8,128
    ade8:	103fe026 	beq	r2,zero,ad6c <__alt_exception_stack_pointer+0xf800ad6c>
    adec:	84000044 	addi	r16,r16,1
    adf0:	0081ffc4 	movi	r2,2047
    adf4:	8080d226 	beq	r16,r2,b140 <__adddf3+0x5d8>
    adf8:	00bfe034 	movhi	r2,65408
    adfc:	10bfffc4 	addi	r2,r2,-1
    ae00:	4090703a 	and	r8,r8,r2
    ae04:	880ad07a 	srli	r5,r17,1
    ae08:	400897fa 	slli	r4,r8,31
    ae0c:	88c0004c 	andi	r3,r17,1
    ae10:	28e2b03a 	or	r17,r5,r3
    ae14:	4010d07a 	srli	r8,r8,1
    ae18:	2462b03a 	or	r17,r4,r17
    ae1c:	003f7106 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    ae20:	4088b03a 	or	r4,r8,r2
    ae24:	20014526 	beq	r4,zero,b33c <__adddf3+0x7d4>
    ae28:	01000434 	movhi	r4,16
    ae2c:	42000234 	orhi	r8,r8,8
    ae30:	213fffc4 	addi	r4,r4,-1
    ae34:	4110703a 	and	r8,r8,r4
    ae38:	003f8206 	br	ac44 <__alt_exception_stack_pointer+0xf800ac44>
    ae3c:	18ffffc4 	addi	r3,r3,-1
    ae40:	1800491e 	bne	r3,zero,af68 <__adddf3+0x400>
    ae44:	898bc83a 	sub	r5,r17,r6
    ae48:	8963803a 	cmpltu	r17,r17,r5
    ae4c:	4251c83a 	sub	r8,r8,r9
    ae50:	4451c83a 	sub	r8,r8,r17
    ae54:	2823883a 	mov	r17,r5
    ae58:	003f9f06 	br	acd8 <__alt_exception_stack_pointer+0xf800acd8>
    ae5c:	4984b03a 	or	r2,r9,r6
    ae60:	103f6026 	beq	r2,zero,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    ae64:	213fffc4 	addi	r4,r4,-1
    ae68:	2000931e 	bne	r4,zero,b0b8 <__adddf3+0x550>
    ae6c:	898d883a 	add	r6,r17,r6
    ae70:	3463803a 	cmpltu	r17,r6,r17
    ae74:	4251883a 	add	r8,r8,r9
    ae78:	8a11883a 	add	r8,r17,r8
    ae7c:	3023883a 	mov	r17,r6
    ae80:	003fd806 	br	ade4 <__alt_exception_stack_pointer+0xf800ade4>
    ae84:	1800541e 	bne	r3,zero,afd8 <__adddf3+0x470>
    ae88:	80800044 	addi	r2,r16,1
    ae8c:	1081ffcc 	andi	r2,r2,2047
    ae90:	00c00044 	movi	r3,1
    ae94:	1880a00e 	bge	r3,r2,b118 <__adddf3+0x5b0>
    ae98:	8989c83a 	sub	r4,r17,r6
    ae9c:	8905803a 	cmpltu	r2,r17,r4
    aea0:	4267c83a 	sub	r19,r8,r9
    aea4:	98a7c83a 	sub	r19,r19,r2
    aea8:	9880202c 	andhi	r2,r19,128
    aeac:	10006326 	beq	r2,zero,b03c <__adddf3+0x4d4>
    aeb0:	3463c83a 	sub	r17,r6,r17
    aeb4:	4a07c83a 	sub	r3,r9,r8
    aeb8:	344d803a 	cmpltu	r6,r6,r17
    aebc:	19a7c83a 	sub	r19,r3,r6
    aec0:	3825883a 	mov	r18,r7
    aec4:	983f8a1e 	bne	r19,zero,acf0 <__alt_exception_stack_pointer+0xf800acf0>
    aec8:	8809883a 	mov	r4,r17
    aecc:	000d3a80 	call	d3a8 <__clzsi2>
    aed0:	10800804 	addi	r2,r2,32
    aed4:	10fffe04 	addi	r3,r2,-8
    aed8:	010007c4 	movi	r4,31
    aedc:	20ff890e 	bge	r4,r3,ad04 <__alt_exception_stack_pointer+0xf800ad04>
    aee0:	10bff604 	addi	r2,r2,-40
    aee4:	8884983a 	sll	r2,r17,r2
    aee8:	0023883a 	mov	r17,zero
    aeec:	1c3f8c0e 	bge	r3,r16,ad20 <__alt_exception_stack_pointer+0xf800ad20>
    aef0:	023fe034 	movhi	r8,65408
    aef4:	423fffc4 	addi	r8,r8,-1
    aef8:	80e1c83a 	sub	r16,r16,r3
    aefc:	1210703a 	and	r8,r2,r8
    af00:	003f3806 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    af04:	9007883a 	mov	r3,r18
    af08:	0011883a 	mov	r8,zero
    af0c:	0005883a 	mov	r2,zero
    af10:	003f4c06 	br	ac44 <__alt_exception_stack_pointer+0xf800ac44>
    af14:	498cb03a 	or	r6,r9,r6
    af18:	300cc03a 	cmpne	r6,r6,zero
    af1c:	0007883a 	mov	r3,zero
    af20:	003f6806 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    af24:	20009c1e 	bne	r4,zero,b198 <__adddf3+0x630>
    af28:	80800044 	addi	r2,r16,1
    af2c:	1141ffcc 	andi	r5,r2,2047
    af30:	01000044 	movi	r4,1
    af34:	2140670e 	bge	r4,r5,b0d4 <__adddf3+0x56c>
    af38:	0101ffc4 	movi	r4,2047
    af3c:	11007f26 	beq	r2,r4,b13c <__adddf3+0x5d4>
    af40:	898d883a 	add	r6,r17,r6
    af44:	4247883a 	add	r3,r8,r9
    af48:	3451803a 	cmpltu	r8,r6,r17
    af4c:	40d1883a 	add	r8,r8,r3
    af50:	402297fa 	slli	r17,r8,31
    af54:	300cd07a 	srli	r6,r6,1
    af58:	4010d07a 	srli	r8,r8,1
    af5c:	1021883a 	mov	r16,r2
    af60:	89a2b03a 	or	r17,r17,r6
    af64:	003f1f06 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    af68:	0081ffc4 	movi	r2,2047
    af6c:	80bf481e 	bne	r16,r2,ac90 <__alt_exception_stack_pointer+0xf800ac90>
    af70:	003f1c06 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    af74:	843ff844 	addi	r16,r16,-31
    af78:	01000804 	movi	r4,32
    af7c:	1406d83a 	srl	r3,r2,r16
    af80:	41005026 	beq	r8,r4,b0c4 <__adddf3+0x55c>
    af84:	01001004 	movi	r4,64
    af88:	2211c83a 	sub	r8,r4,r8
    af8c:	1204983a 	sll	r2,r2,r8
    af90:	88a2b03a 	or	r17,r17,r2
    af94:	8822c03a 	cmpne	r17,r17,zero
    af98:	1c62b03a 	or	r17,r3,r17
    af9c:	0011883a 	mov	r8,zero
    afa0:	0021883a 	mov	r16,zero
    afa4:	003f7106 	br	ad6c <__alt_exception_stack_pointer+0xf800ad6c>
    afa8:	193ff804 	addi	r4,r3,-32
    afac:	00800804 	movi	r2,32
    afb0:	4908d83a 	srl	r4,r9,r4
    afb4:	18804526 	beq	r3,r2,b0cc <__adddf3+0x564>
    afb8:	00801004 	movi	r2,64
    afbc:	10c5c83a 	sub	r2,r2,r3
    afc0:	4886983a 	sll	r3,r9,r2
    afc4:	198cb03a 	or	r6,r3,r6
    afc8:	300cc03a 	cmpne	r6,r6,zero
    afcc:	218cb03a 	or	r6,r4,r6
    afd0:	0007883a 	mov	r3,zero
    afd4:	003f3b06 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    afd8:	80002a26 	beq	r16,zero,b084 <__adddf3+0x51c>
    afdc:	0101ffc4 	movi	r4,2047
    afe0:	11006826 	beq	r2,r4,b184 <__adddf3+0x61c>
    afe4:	00c7c83a 	sub	r3,zero,r3
    afe8:	42002034 	orhi	r8,r8,128
    afec:	01000e04 	movi	r4,56
    aff0:	20c07c16 	blt	r4,r3,b1e4 <__adddf3+0x67c>
    aff4:	010007c4 	movi	r4,31
    aff8:	20c0da16 	blt	r4,r3,b364 <__adddf3+0x7fc>
    affc:	01000804 	movi	r4,32
    b000:	20c9c83a 	sub	r4,r4,r3
    b004:	4114983a 	sll	r10,r8,r4
    b008:	88cad83a 	srl	r5,r17,r3
    b00c:	8908983a 	sll	r4,r17,r4
    b010:	40c6d83a 	srl	r3,r8,r3
    b014:	5162b03a 	or	r17,r10,r5
    b018:	2008c03a 	cmpne	r4,r4,zero
    b01c:	8922b03a 	or	r17,r17,r4
    b020:	3463c83a 	sub	r17,r6,r17
    b024:	48c7c83a 	sub	r3,r9,r3
    b028:	344d803a 	cmpltu	r6,r6,r17
    b02c:	1991c83a 	sub	r8,r3,r6
    b030:	1021883a 	mov	r16,r2
    b034:	3825883a 	mov	r18,r7
    b038:	003f2706 	br	acd8 <__alt_exception_stack_pointer+0xf800acd8>
    b03c:	24d0b03a 	or	r8,r4,r19
    b040:	40001b1e 	bne	r8,zero,b0b0 <__adddf3+0x548>
    b044:	0005883a 	mov	r2,zero
    b048:	0007883a 	mov	r3,zero
    b04c:	0021883a 	mov	r16,zero
    b050:	003f4d06 	br	ad88 <__alt_exception_stack_pointer+0xf800ad88>
    b054:	008007c4 	movi	r2,31
    b058:	11003c16 	blt	r2,r4,b14c <__adddf3+0x5e4>
    b05c:	00800804 	movi	r2,32
    b060:	1105c83a 	sub	r2,r2,r4
    b064:	488e983a 	sll	r7,r9,r2
    b068:	310ad83a 	srl	r5,r6,r4
    b06c:	3084983a 	sll	r2,r6,r2
    b070:	4912d83a 	srl	r9,r9,r4
    b074:	394ab03a 	or	r5,r7,r5
    b078:	1004c03a 	cmpne	r2,r2,zero
    b07c:	288ab03a 	or	r5,r5,r2
    b080:	003f5306 	br	add0 <__alt_exception_stack_pointer+0xf800add0>
    b084:	4448b03a 	or	r4,r8,r17
    b088:	20003e26 	beq	r4,zero,b184 <__adddf3+0x61c>
    b08c:	00c6303a 	nor	r3,zero,r3
    b090:	18003a1e 	bne	r3,zero,b17c <__adddf3+0x614>
    b094:	3463c83a 	sub	r17,r6,r17
    b098:	4a07c83a 	sub	r3,r9,r8
    b09c:	344d803a 	cmpltu	r6,r6,r17
    b0a0:	1991c83a 	sub	r8,r3,r6
    b0a4:	1021883a 	mov	r16,r2
    b0a8:	3825883a 	mov	r18,r7
    b0ac:	003f0a06 	br	acd8 <__alt_exception_stack_pointer+0xf800acd8>
    b0b0:	2023883a 	mov	r17,r4
    b0b4:	003f0d06 	br	acec <__alt_exception_stack_pointer+0xf800acec>
    b0b8:	0081ffc4 	movi	r2,2047
    b0bc:	80bf3f1e 	bne	r16,r2,adbc <__alt_exception_stack_pointer+0xf800adbc>
    b0c0:	003ec806 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b0c4:	0005883a 	mov	r2,zero
    b0c8:	003fb106 	br	af90 <__alt_exception_stack_pointer+0xf800af90>
    b0cc:	0007883a 	mov	r3,zero
    b0d0:	003fbc06 	br	afc4 <__alt_exception_stack_pointer+0xf800afc4>
    b0d4:	4444b03a 	or	r2,r8,r17
    b0d8:	8000871e 	bne	r16,zero,b2f8 <__adddf3+0x790>
    b0dc:	1000ba26 	beq	r2,zero,b3c8 <__adddf3+0x860>
    b0e0:	4984b03a 	or	r2,r9,r6
    b0e4:	103ebf26 	beq	r2,zero,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b0e8:	8985883a 	add	r2,r17,r6
    b0ec:	4247883a 	add	r3,r8,r9
    b0f0:	1451803a 	cmpltu	r8,r2,r17
    b0f4:	40d1883a 	add	r8,r8,r3
    b0f8:	40c0202c 	andhi	r3,r8,128
    b0fc:	1023883a 	mov	r17,r2
    b100:	183f1a26 	beq	r3,zero,ad6c <__alt_exception_stack_pointer+0xf800ad6c>
    b104:	00bfe034 	movhi	r2,65408
    b108:	10bfffc4 	addi	r2,r2,-1
    b10c:	2021883a 	mov	r16,r4
    b110:	4090703a 	and	r8,r8,r2
    b114:	003eb306 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b118:	4444b03a 	or	r2,r8,r17
    b11c:	8000291e 	bne	r16,zero,b1c4 <__adddf3+0x65c>
    b120:	10004b1e 	bne	r2,zero,b250 <__adddf3+0x6e8>
    b124:	4990b03a 	or	r8,r9,r6
    b128:	40008b26 	beq	r8,zero,b358 <__adddf3+0x7f0>
    b12c:	4811883a 	mov	r8,r9
    b130:	3023883a 	mov	r17,r6
    b134:	3825883a 	mov	r18,r7
    b138:	003eaa06 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b13c:	1021883a 	mov	r16,r2
    b140:	0011883a 	mov	r8,zero
    b144:	0005883a 	mov	r2,zero
    b148:	003f0f06 	br	ad88 <__alt_exception_stack_pointer+0xf800ad88>
    b14c:	217ff804 	addi	r5,r4,-32
    b150:	00800804 	movi	r2,32
    b154:	494ad83a 	srl	r5,r9,r5
    b158:	20807d26 	beq	r4,r2,b350 <__adddf3+0x7e8>
    b15c:	00801004 	movi	r2,64
    b160:	1109c83a 	sub	r4,r2,r4
    b164:	4912983a 	sll	r9,r9,r4
    b168:	498cb03a 	or	r6,r9,r6
    b16c:	300cc03a 	cmpne	r6,r6,zero
    b170:	298ab03a 	or	r5,r5,r6
    b174:	0013883a 	mov	r9,zero
    b178:	003f1506 	br	add0 <__alt_exception_stack_pointer+0xf800add0>
    b17c:	0101ffc4 	movi	r4,2047
    b180:	113f9a1e 	bne	r2,r4,afec <__alt_exception_stack_pointer+0xf800afec>
    b184:	4811883a 	mov	r8,r9
    b188:	3023883a 	mov	r17,r6
    b18c:	1021883a 	mov	r16,r2
    b190:	3825883a 	mov	r18,r7
    b194:	003e9306 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b198:	8000161e 	bne	r16,zero,b1f4 <__adddf3+0x68c>
    b19c:	444ab03a 	or	r5,r8,r17
    b1a0:	28005126 	beq	r5,zero,b2e8 <__adddf3+0x780>
    b1a4:	0108303a 	nor	r4,zero,r4
    b1a8:	20004d1e 	bne	r4,zero,b2e0 <__adddf3+0x778>
    b1ac:	89a3883a 	add	r17,r17,r6
    b1b0:	4253883a 	add	r9,r8,r9
    b1b4:	898d803a 	cmpltu	r6,r17,r6
    b1b8:	3251883a 	add	r8,r6,r9
    b1bc:	1021883a 	mov	r16,r2
    b1c0:	003f0806 	br	ade4 <__alt_exception_stack_pointer+0xf800ade4>
    b1c4:	1000301e 	bne	r2,zero,b288 <__adddf3+0x720>
    b1c8:	4984b03a 	or	r2,r9,r6
    b1cc:	10007126 	beq	r2,zero,b394 <__adddf3+0x82c>
    b1d0:	4811883a 	mov	r8,r9
    b1d4:	3023883a 	mov	r17,r6
    b1d8:	3825883a 	mov	r18,r7
    b1dc:	0401ffc4 	movi	r16,2047
    b1e0:	003e8006 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b1e4:	4462b03a 	or	r17,r8,r17
    b1e8:	8822c03a 	cmpne	r17,r17,zero
    b1ec:	0007883a 	mov	r3,zero
    b1f0:	003f8b06 	br	b020 <__alt_exception_stack_pointer+0xf800b020>
    b1f4:	0141ffc4 	movi	r5,2047
    b1f8:	11403b26 	beq	r2,r5,b2e8 <__adddf3+0x780>
    b1fc:	0109c83a 	sub	r4,zero,r4
    b200:	42002034 	orhi	r8,r8,128
    b204:	01400e04 	movi	r5,56
    b208:	29006716 	blt	r5,r4,b3a8 <__adddf3+0x840>
    b20c:	014007c4 	movi	r5,31
    b210:	29007016 	blt	r5,r4,b3d4 <__adddf3+0x86c>
    b214:	01400804 	movi	r5,32
    b218:	290bc83a 	sub	r5,r5,r4
    b21c:	4154983a 	sll	r10,r8,r5
    b220:	890ed83a 	srl	r7,r17,r4
    b224:	894a983a 	sll	r5,r17,r5
    b228:	4108d83a 	srl	r4,r8,r4
    b22c:	51e2b03a 	or	r17,r10,r7
    b230:	280ac03a 	cmpne	r5,r5,zero
    b234:	8962b03a 	or	r17,r17,r5
    b238:	89a3883a 	add	r17,r17,r6
    b23c:	2253883a 	add	r9,r4,r9
    b240:	898d803a 	cmpltu	r6,r17,r6
    b244:	3251883a 	add	r8,r6,r9
    b248:	1021883a 	mov	r16,r2
    b24c:	003ee506 	br	ade4 <__alt_exception_stack_pointer+0xf800ade4>
    b250:	4984b03a 	or	r2,r9,r6
    b254:	103e6326 	beq	r2,zero,abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b258:	8987c83a 	sub	r3,r17,r6
    b25c:	88c9803a 	cmpltu	r4,r17,r3
    b260:	4245c83a 	sub	r2,r8,r9
    b264:	1105c83a 	sub	r2,r2,r4
    b268:	1100202c 	andhi	r4,r2,128
    b26c:	203ebb26 	beq	r4,zero,ad5c <__alt_exception_stack_pointer+0xf800ad5c>
    b270:	3463c83a 	sub	r17,r6,r17
    b274:	4a07c83a 	sub	r3,r9,r8
    b278:	344d803a 	cmpltu	r6,r6,r17
    b27c:	1991c83a 	sub	r8,r3,r6
    b280:	3825883a 	mov	r18,r7
    b284:	003e5706 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b288:	4984b03a 	or	r2,r9,r6
    b28c:	10002e26 	beq	r2,zero,b348 <__adddf3+0x7e0>
    b290:	4004d0fa 	srli	r2,r8,3
    b294:	8822d0fa 	srli	r17,r17,3
    b298:	4010977a 	slli	r8,r8,29
    b29c:	10c0022c 	andhi	r3,r2,8
    b2a0:	4462b03a 	or	r17,r8,r17
    b2a4:	18000826 	beq	r3,zero,b2c8 <__adddf3+0x760>
    b2a8:	4808d0fa 	srli	r4,r9,3
    b2ac:	20c0022c 	andhi	r3,r4,8
    b2b0:	1800051e 	bne	r3,zero,b2c8 <__adddf3+0x760>
    b2b4:	300cd0fa 	srli	r6,r6,3
    b2b8:	4806977a 	slli	r3,r9,29
    b2bc:	2005883a 	mov	r2,r4
    b2c0:	3825883a 	mov	r18,r7
    b2c4:	19a2b03a 	or	r17,r3,r6
    b2c8:	8810d77a 	srli	r8,r17,29
    b2cc:	100490fa 	slli	r2,r2,3
    b2d0:	882290fa 	slli	r17,r17,3
    b2d4:	0401ffc4 	movi	r16,2047
    b2d8:	4090b03a 	or	r8,r8,r2
    b2dc:	003e4106 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b2e0:	0141ffc4 	movi	r5,2047
    b2e4:	117fc71e 	bne	r2,r5,b204 <__alt_exception_stack_pointer+0xf800b204>
    b2e8:	4811883a 	mov	r8,r9
    b2ec:	3023883a 	mov	r17,r6
    b2f0:	1021883a 	mov	r16,r2
    b2f4:	003e3b06 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b2f8:	10002f26 	beq	r2,zero,b3b8 <__adddf3+0x850>
    b2fc:	4984b03a 	or	r2,r9,r6
    b300:	10001126 	beq	r2,zero,b348 <__adddf3+0x7e0>
    b304:	4004d0fa 	srli	r2,r8,3
    b308:	8822d0fa 	srli	r17,r17,3
    b30c:	4010977a 	slli	r8,r8,29
    b310:	10c0022c 	andhi	r3,r2,8
    b314:	4462b03a 	or	r17,r8,r17
    b318:	183feb26 	beq	r3,zero,b2c8 <__alt_exception_stack_pointer+0xf800b2c8>
    b31c:	4808d0fa 	srli	r4,r9,3
    b320:	20c0022c 	andhi	r3,r4,8
    b324:	183fe81e 	bne	r3,zero,b2c8 <__alt_exception_stack_pointer+0xf800b2c8>
    b328:	300cd0fa 	srli	r6,r6,3
    b32c:	4806977a 	slli	r3,r9,29
    b330:	2005883a 	mov	r2,r4
    b334:	19a2b03a 	or	r17,r3,r6
    b338:	003fe306 	br	b2c8 <__alt_exception_stack_pointer+0xf800b2c8>
    b33c:	0011883a 	mov	r8,zero
    b340:	0005883a 	mov	r2,zero
    b344:	003e3f06 	br	ac44 <__alt_exception_stack_pointer+0xf800ac44>
    b348:	0401ffc4 	movi	r16,2047
    b34c:	003e2506 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b350:	0013883a 	mov	r9,zero
    b354:	003f8406 	br	b168 <__alt_exception_stack_pointer+0xf800b168>
    b358:	0005883a 	mov	r2,zero
    b35c:	0007883a 	mov	r3,zero
    b360:	003e8906 	br	ad88 <__alt_exception_stack_pointer+0xf800ad88>
    b364:	197ff804 	addi	r5,r3,-32
    b368:	01000804 	movi	r4,32
    b36c:	414ad83a 	srl	r5,r8,r5
    b370:	19002426 	beq	r3,r4,b404 <__adddf3+0x89c>
    b374:	01001004 	movi	r4,64
    b378:	20c7c83a 	sub	r3,r4,r3
    b37c:	40c6983a 	sll	r3,r8,r3
    b380:	1c46b03a 	or	r3,r3,r17
    b384:	1806c03a 	cmpne	r3,r3,zero
    b388:	28e2b03a 	or	r17,r5,r3
    b38c:	0007883a 	mov	r3,zero
    b390:	003f2306 	br	b020 <__alt_exception_stack_pointer+0xf800b020>
    b394:	0007883a 	mov	r3,zero
    b398:	5811883a 	mov	r8,r11
    b39c:	00bfffc4 	movi	r2,-1
    b3a0:	0401ffc4 	movi	r16,2047
    b3a4:	003e7806 	br	ad88 <__alt_exception_stack_pointer+0xf800ad88>
    b3a8:	4462b03a 	or	r17,r8,r17
    b3ac:	8822c03a 	cmpne	r17,r17,zero
    b3b0:	0009883a 	mov	r4,zero
    b3b4:	003fa006 	br	b238 <__alt_exception_stack_pointer+0xf800b238>
    b3b8:	4811883a 	mov	r8,r9
    b3bc:	3023883a 	mov	r17,r6
    b3c0:	0401ffc4 	movi	r16,2047
    b3c4:	003e0706 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b3c8:	4811883a 	mov	r8,r9
    b3cc:	3023883a 	mov	r17,r6
    b3d0:	003e0406 	br	abe4 <__alt_exception_stack_pointer+0xf800abe4>
    b3d4:	21fff804 	addi	r7,r4,-32
    b3d8:	01400804 	movi	r5,32
    b3dc:	41ced83a 	srl	r7,r8,r7
    b3e0:	21400a26 	beq	r4,r5,b40c <__adddf3+0x8a4>
    b3e4:	01401004 	movi	r5,64
    b3e8:	2909c83a 	sub	r4,r5,r4
    b3ec:	4108983a 	sll	r4,r8,r4
    b3f0:	2448b03a 	or	r4,r4,r17
    b3f4:	2008c03a 	cmpne	r4,r4,zero
    b3f8:	3922b03a 	or	r17,r7,r4
    b3fc:	0009883a 	mov	r4,zero
    b400:	003f8d06 	br	b238 <__alt_exception_stack_pointer+0xf800b238>
    b404:	0007883a 	mov	r3,zero
    b408:	003fdd06 	br	b380 <__alt_exception_stack_pointer+0xf800b380>
    b40c:	0009883a 	mov	r4,zero
    b410:	003ff706 	br	b3f0 <__alt_exception_stack_pointer+0xf800b3f0>

0000b414 <__divdf3>:
    b414:	defff004 	addi	sp,sp,-64
    b418:	dc800815 	stw	r18,32(sp)
    b41c:	2824d53a 	srli	r18,r5,20
    b420:	dd800c15 	stw	r22,48(sp)
    b424:	282cd7fa 	srli	r22,r5,31
    b428:	dc000615 	stw	r16,24(sp)
    b42c:	04000434 	movhi	r16,16
    b430:	843fffc4 	addi	r16,r16,-1
    b434:	dfc00f15 	stw	ra,60(sp)
    b438:	df000e15 	stw	fp,56(sp)
    b43c:	ddc00d15 	stw	r23,52(sp)
    b440:	dd400b15 	stw	r21,44(sp)
    b444:	dd000a15 	stw	r20,40(sp)
    b448:	dcc00915 	stw	r19,36(sp)
    b44c:	dc400715 	stw	r17,28(sp)
    b450:	9481ffcc 	andi	r18,r18,2047
    b454:	2c20703a 	and	r16,r5,r16
    b458:	b2003fcc 	andi	r8,r22,255
    b45c:	90006126 	beq	r18,zero,b5e4 <__divdf3+0x1d0>
    b460:	0081ffc4 	movi	r2,2047
    b464:	202b883a 	mov	r21,r4
    b468:	90803726 	beq	r18,r2,b548 <__divdf3+0x134>
    b46c:	80800434 	orhi	r2,r16,16
    b470:	100490fa 	slli	r2,r2,3
    b474:	2020d77a 	srli	r16,r4,29
    b478:	202a90fa 	slli	r21,r4,3
    b47c:	94bf0044 	addi	r18,r18,-1023
    b480:	80a0b03a 	or	r16,r16,r2
    b484:	0013883a 	mov	r9,zero
    b488:	000b883a 	mov	r5,zero
    b48c:	3806d53a 	srli	r3,r7,20
    b490:	382ed7fa 	srli	r23,r7,31
    b494:	04400434 	movhi	r17,16
    b498:	8c7fffc4 	addi	r17,r17,-1
    b49c:	18c1ffcc 	andi	r3,r3,2047
    b4a0:	3029883a 	mov	r20,r6
    b4a4:	3c62703a 	and	r17,r7,r17
    b4a8:	bf003fcc 	andi	fp,r23,255
    b4ac:	18006e26 	beq	r3,zero,b668 <__divdf3+0x254>
    b4b0:	0081ffc4 	movi	r2,2047
    b4b4:	18806626 	beq	r3,r2,b650 <__divdf3+0x23c>
    b4b8:	88800434 	orhi	r2,r17,16
    b4bc:	100490fa 	slli	r2,r2,3
    b4c0:	3022d77a 	srli	r17,r6,29
    b4c4:	302890fa 	slli	r20,r6,3
    b4c8:	18ff0044 	addi	r3,r3,-1023
    b4cc:	88a2b03a 	or	r17,r17,r2
    b4d0:	000f883a 	mov	r7,zero
    b4d4:	b5e6f03a 	xor	r19,r22,r23
    b4d8:	3a4cb03a 	or	r6,r7,r9
    b4dc:	008003c4 	movi	r2,15
    b4e0:	9809883a 	mov	r4,r19
    b4e4:	90c7c83a 	sub	r3,r18,r3
    b4e8:	9cc03fcc 	andi	r19,r19,255
    b4ec:	11809636 	bltu	r2,r6,b748 <__divdf3+0x334>
    b4f0:	300c90ba 	slli	r6,r6,2
    b4f4:	00800074 	movhi	r2,1
    b4f8:	10ad4204 	addi	r2,r2,-19192
    b4fc:	308d883a 	add	r6,r6,r2
    b500:	30800017 	ldw	r2,0(r6)
    b504:	1000683a 	jmp	r2
    b508:	0000b748 	cmpgei	zero,zero,733
    b50c:	0000b580 	call	b58 <_malloc_r+0x3dc>
    b510:	0000b738 	rdprs	zero,zero,732
    b514:	0000b574 	movhi	zero,725
    b518:	0000b738 	rdprs	zero,zero,732
    b51c:	0000b70c 	andi	zero,zero,732
    b520:	0000b738 	rdprs	zero,zero,732
    b524:	0000b574 	movhi	zero,725
    b528:	0000b580 	call	b58 <_malloc_r+0x3dc>
    b52c:	0000b580 	call	b58 <_malloc_r+0x3dc>
    b530:	0000b70c 	andi	zero,zero,732
    b534:	0000b574 	movhi	zero,725
    b538:	0000b564 	muli	zero,zero,725
    b53c:	0000b564 	muli	zero,zero,725
    b540:	0000b564 	muli	zero,zero,725
    b544:	0000bad0 	cmplti	zero,zero,747
    b548:	2404b03a 	or	r2,r4,r16
    b54c:	10006c1e 	bne	r2,zero,b700 <__divdf3+0x2ec>
    b550:	02400204 	movi	r9,8
    b554:	0021883a 	mov	r16,zero
    b558:	002b883a 	mov	r21,zero
    b55c:	01400084 	movi	r5,2
    b560:	003fca06 	br	b48c <__alt_exception_stack_pointer+0xf800b48c>
    b564:	8023883a 	mov	r17,r16
    b568:	a829883a 	mov	r20,r21
    b56c:	4039883a 	mov	fp,r8
    b570:	280f883a 	mov	r7,r5
    b574:	00800084 	movi	r2,2
    b578:	3881601e 	bne	r7,r2,bafc <__divdf3+0x6e8>
    b57c:	e027883a 	mov	r19,fp
    b580:	9900004c 	andi	r4,r19,1
    b584:	0081ffc4 	movi	r2,2047
    b588:	0021883a 	mov	r16,zero
    b58c:	002b883a 	mov	r21,zero
    b590:	1004953a 	slli	r2,r2,20
    b594:	20c03fcc 	andi	r3,r4,255
    b598:	01400434 	movhi	r5,16
    b59c:	297fffc4 	addi	r5,r5,-1
    b5a0:	180697fa 	slli	r3,r3,31
    b5a4:	8160703a 	and	r16,r16,r5
    b5a8:	80a0b03a 	or	r16,r16,r2
    b5ac:	80c6b03a 	or	r3,r16,r3
    b5b0:	a805883a 	mov	r2,r21
    b5b4:	dfc00f17 	ldw	ra,60(sp)
    b5b8:	df000e17 	ldw	fp,56(sp)
    b5bc:	ddc00d17 	ldw	r23,52(sp)
    b5c0:	dd800c17 	ldw	r22,48(sp)
    b5c4:	dd400b17 	ldw	r21,44(sp)
    b5c8:	dd000a17 	ldw	r20,40(sp)
    b5cc:	dcc00917 	ldw	r19,36(sp)
    b5d0:	dc800817 	ldw	r18,32(sp)
    b5d4:	dc400717 	ldw	r17,28(sp)
    b5d8:	dc000617 	ldw	r16,24(sp)
    b5dc:	dec01004 	addi	sp,sp,64
    b5e0:	f800283a 	ret
    b5e4:	2404b03a 	or	r2,r4,r16
    b5e8:	2023883a 	mov	r17,r4
    b5ec:	10003f26 	beq	r2,zero,b6ec <__divdf3+0x2d8>
    b5f0:	80015e26 	beq	r16,zero,bb6c <__divdf3+0x758>
    b5f4:	8009883a 	mov	r4,r16
    b5f8:	d9800215 	stw	r6,8(sp)
    b5fc:	d9c00515 	stw	r7,20(sp)
    b600:	da000415 	stw	r8,16(sp)
    b604:	000d3a80 	call	d3a8 <__clzsi2>
    b608:	d9800217 	ldw	r6,8(sp)
    b60c:	d9c00517 	ldw	r7,20(sp)
    b610:	da000417 	ldw	r8,16(sp)
    b614:	113ffd44 	addi	r4,r2,-11
    b618:	00c00704 	movi	r3,28
    b61c:	19014f16 	blt	r3,r4,bb5c <__divdf3+0x748>
    b620:	00c00744 	movi	r3,29
    b624:	157ffe04 	addi	r21,r2,-8
    b628:	1907c83a 	sub	r3,r3,r4
    b62c:	8560983a 	sll	r16,r16,r21
    b630:	88c6d83a 	srl	r3,r17,r3
    b634:	8d6a983a 	sll	r21,r17,r21
    b638:	1c20b03a 	or	r16,r3,r16
    b63c:	1080fcc4 	addi	r2,r2,1011
    b640:	00a5c83a 	sub	r18,zero,r2
    b644:	0013883a 	mov	r9,zero
    b648:	000b883a 	mov	r5,zero
    b64c:	003f8f06 	br	b48c <__alt_exception_stack_pointer+0xf800b48c>
    b650:	3444b03a 	or	r2,r6,r17
    b654:	1000231e 	bne	r2,zero,b6e4 <__divdf3+0x2d0>
    b658:	0023883a 	mov	r17,zero
    b65c:	0029883a 	mov	r20,zero
    b660:	01c00084 	movi	r7,2
    b664:	003f9b06 	br	b4d4 <__alt_exception_stack_pointer+0xf800b4d4>
    b668:	3444b03a 	or	r2,r6,r17
    b66c:	10001926 	beq	r2,zero,b6d4 <__divdf3+0x2c0>
    b670:	88014b26 	beq	r17,zero,bba0 <__divdf3+0x78c>
    b674:	8809883a 	mov	r4,r17
    b678:	d9400115 	stw	r5,4(sp)
    b67c:	d9800215 	stw	r6,8(sp)
    b680:	da000415 	stw	r8,16(sp)
    b684:	da400315 	stw	r9,12(sp)
    b688:	000d3a80 	call	d3a8 <__clzsi2>
    b68c:	d9400117 	ldw	r5,4(sp)
    b690:	d9800217 	ldw	r6,8(sp)
    b694:	da000417 	ldw	r8,16(sp)
    b698:	da400317 	ldw	r9,12(sp)
    b69c:	113ffd44 	addi	r4,r2,-11
    b6a0:	00c00704 	movi	r3,28
    b6a4:	19013a16 	blt	r3,r4,bb90 <__divdf3+0x77c>
    b6a8:	00c00744 	movi	r3,29
    b6ac:	153ffe04 	addi	r20,r2,-8
    b6b0:	1907c83a 	sub	r3,r3,r4
    b6b4:	8d22983a 	sll	r17,r17,r20
    b6b8:	30c6d83a 	srl	r3,r6,r3
    b6bc:	3528983a 	sll	r20,r6,r20
    b6c0:	1c62b03a 	or	r17,r3,r17
    b6c4:	1080fcc4 	addi	r2,r2,1011
    b6c8:	0087c83a 	sub	r3,zero,r2
    b6cc:	000f883a 	mov	r7,zero
    b6d0:	003f8006 	br	b4d4 <__alt_exception_stack_pointer+0xf800b4d4>
    b6d4:	0023883a 	mov	r17,zero
    b6d8:	0029883a 	mov	r20,zero
    b6dc:	01c00044 	movi	r7,1
    b6e0:	003f7c06 	br	b4d4 <__alt_exception_stack_pointer+0xf800b4d4>
    b6e4:	01c000c4 	movi	r7,3
    b6e8:	003f7a06 	br	b4d4 <__alt_exception_stack_pointer+0xf800b4d4>
    b6ec:	02400104 	movi	r9,4
    b6f0:	0021883a 	mov	r16,zero
    b6f4:	002b883a 	mov	r21,zero
    b6f8:	01400044 	movi	r5,1
    b6fc:	003f6306 	br	b48c <__alt_exception_stack_pointer+0xf800b48c>
    b700:	02400304 	movi	r9,12
    b704:	014000c4 	movi	r5,3
    b708:	003f6006 	br	b48c <__alt_exception_stack_pointer+0xf800b48c>
    b70c:	04000434 	movhi	r16,16
    b710:	0009883a 	mov	r4,zero
    b714:	843fffc4 	addi	r16,r16,-1
    b718:	057fffc4 	movi	r21,-1
    b71c:	0081ffc4 	movi	r2,2047
    b720:	003f9b06 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    b724:	00c00044 	movi	r3,1
    b728:	1887c83a 	sub	r3,r3,r2
    b72c:	01000e04 	movi	r4,56
    b730:	20c1530e 	bge	r4,r3,bc80 <__divdf3+0x86c>
    b734:	9900004c 	andi	r4,r19,1
    b738:	0005883a 	mov	r2,zero
    b73c:	0021883a 	mov	r16,zero
    b740:	002b883a 	mov	r21,zero
    b744:	003f9206 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    b748:	8c012e36 	bltu	r17,r16,bc04 <__divdf3+0x7f0>
    b74c:	84412c26 	beq	r16,r17,bc00 <__divdf3+0x7ec>
    b750:	a82f883a 	mov	r23,r21
    b754:	18ffffc4 	addi	r3,r3,-1
    b758:	002b883a 	mov	r21,zero
    b75c:	a004d63a 	srli	r2,r20,24
    b760:	8822923a 	slli	r17,r17,8
    b764:	a028923a 	slli	r20,r20,8
    b768:	8009883a 	mov	r4,r16
    b76c:	88acb03a 	or	r22,r17,r2
    b770:	dd000015 	stw	r20,0(sp)
    b774:	b028d43a 	srli	r20,r22,16
    b778:	d8c00215 	stw	r3,8(sp)
    b77c:	b4bfffcc 	andi	r18,r22,65535
    b780:	a00b883a 	mov	r5,r20
    b784:	00006700 	call	670 <__udivsi3>
    b788:	100b883a 	mov	r5,r2
    b78c:	9009883a 	mov	r4,r18
    b790:	1023883a 	mov	r17,r2
    b794:	000072c0 	call	72c <__mulsi3>
    b798:	8009883a 	mov	r4,r16
    b79c:	a00b883a 	mov	r5,r20
    b7a0:	1039883a 	mov	fp,r2
    b7a4:	00006d40 	call	6d4 <__umodsi3>
    b7a8:	1004943a 	slli	r2,r2,16
    b7ac:	b808d43a 	srli	r4,r23,16
    b7b0:	d8c00217 	ldw	r3,8(sp)
    b7b4:	2084b03a 	or	r2,r4,r2
    b7b8:	1700062e 	bgeu	r2,fp,b7d4 <__divdf3+0x3c0>
    b7bc:	1585883a 	add	r2,r2,r22
    b7c0:	893fffc4 	addi	r4,r17,-1
    b7c4:	15811d36 	bltu	r2,r22,bc3c <__divdf3+0x828>
    b7c8:	17011c2e 	bgeu	r2,fp,bc3c <__divdf3+0x828>
    b7cc:	8c7fff84 	addi	r17,r17,-2
    b7d0:	1585883a 	add	r2,r2,r22
    b7d4:	1739c83a 	sub	fp,r2,fp
    b7d8:	a00b883a 	mov	r5,r20
    b7dc:	e009883a 	mov	r4,fp
    b7e0:	d8c00215 	stw	r3,8(sp)
    b7e4:	00006700 	call	670 <__udivsi3>
    b7e8:	100b883a 	mov	r5,r2
    b7ec:	9009883a 	mov	r4,r18
    b7f0:	1021883a 	mov	r16,r2
    b7f4:	000072c0 	call	72c <__mulsi3>
    b7f8:	a00b883a 	mov	r5,r20
    b7fc:	e009883a 	mov	r4,fp
    b800:	d8800415 	stw	r2,16(sp)
    b804:	00006d40 	call	6d4 <__umodsi3>
    b808:	1004943a 	slli	r2,r2,16
    b80c:	da000417 	ldw	r8,16(sp)
    b810:	bdffffcc 	andi	r23,r23,65535
    b814:	b884b03a 	or	r2,r23,r2
    b818:	d8c00217 	ldw	r3,8(sp)
    b81c:	1200062e 	bgeu	r2,r8,b838 <__divdf3+0x424>
    b820:	1585883a 	add	r2,r2,r22
    b824:	813fffc4 	addi	r4,r16,-1
    b828:	15810236 	bltu	r2,r22,bc34 <__divdf3+0x820>
    b82c:	1201012e 	bgeu	r2,r8,bc34 <__divdf3+0x820>
    b830:	843fff84 	addi	r16,r16,-2
    b834:	1585883a 	add	r2,r2,r22
    b838:	8822943a 	slli	r17,r17,16
    b83c:	d9800017 	ldw	r6,0(sp)
    b840:	1211c83a 	sub	r8,r2,r8
    b844:	8c22b03a 	or	r17,r17,r16
    b848:	373fffcc 	andi	fp,r6,65535
    b84c:	8abfffcc 	andi	r10,r17,65535
    b850:	8820d43a 	srli	r16,r17,16
    b854:	5009883a 	mov	r4,r10
    b858:	e00b883a 	mov	r5,fp
    b85c:	302ed43a 	srli	r23,r6,16
    b860:	d8c00215 	stw	r3,8(sp)
    b864:	da000415 	stw	r8,16(sp)
    b868:	da800115 	stw	r10,4(sp)
    b86c:	000072c0 	call	72c <__mulsi3>
    b870:	800b883a 	mov	r5,r16
    b874:	e009883a 	mov	r4,fp
    b878:	d8800515 	stw	r2,20(sp)
    b87c:	000072c0 	call	72c <__mulsi3>
    b880:	8009883a 	mov	r4,r16
    b884:	b80b883a 	mov	r5,r23
    b888:	d8800315 	stw	r2,12(sp)
    b88c:	000072c0 	call	72c <__mulsi3>
    b890:	da800117 	ldw	r10,4(sp)
    b894:	b80b883a 	mov	r5,r23
    b898:	1021883a 	mov	r16,r2
    b89c:	5009883a 	mov	r4,r10
    b8a0:	000072c0 	call	72c <__mulsi3>
    b8a4:	d9c00517 	ldw	r7,20(sp)
    b8a8:	da400317 	ldw	r9,12(sp)
    b8ac:	d8c00217 	ldw	r3,8(sp)
    b8b0:	3808d43a 	srli	r4,r7,16
    b8b4:	1245883a 	add	r2,r2,r9
    b8b8:	da000417 	ldw	r8,16(sp)
    b8bc:	2085883a 	add	r2,r4,r2
    b8c0:	1240022e 	bgeu	r2,r9,b8cc <__divdf3+0x4b8>
    b8c4:	01000074 	movhi	r4,1
    b8c8:	8121883a 	add	r16,r16,r4
    b8cc:	1008d43a 	srli	r4,r2,16
    b8d0:	1004943a 	slli	r2,r2,16
    b8d4:	39ffffcc 	andi	r7,r7,65535
    b8d8:	2409883a 	add	r4,r4,r16
    b8dc:	11c5883a 	add	r2,r2,r7
    b8e0:	4100bb36 	bltu	r8,r4,bbd0 <__divdf3+0x7bc>
    b8e4:	4100d726 	beq	r8,r4,bc44 <__divdf3+0x830>
    b8e8:	4109c83a 	sub	r4,r8,r4
    b8ec:	a8a1c83a 	sub	r16,r21,r2
    b8f0:	ac2b803a 	cmpltu	r21,r21,r16
    b8f4:	256bc83a 	sub	r21,r4,r21
    b8f8:	b540d926 	beq	r22,r21,bc60 <__divdf3+0x84c>
    b8fc:	a00b883a 	mov	r5,r20
    b900:	a809883a 	mov	r4,r21
    b904:	d8c00215 	stw	r3,8(sp)
    b908:	00006700 	call	670 <__udivsi3>
    b90c:	100b883a 	mov	r5,r2
    b910:	9009883a 	mov	r4,r18
    b914:	d8800515 	stw	r2,20(sp)
    b918:	000072c0 	call	72c <__mulsi3>
    b91c:	a809883a 	mov	r4,r21
    b920:	a00b883a 	mov	r5,r20
    b924:	d8800415 	stw	r2,16(sp)
    b928:	00006d40 	call	6d4 <__umodsi3>
    b92c:	1004943a 	slli	r2,r2,16
    b930:	8008d43a 	srli	r4,r16,16
    b934:	da000417 	ldw	r8,16(sp)
    b938:	d8c00217 	ldw	r3,8(sp)
    b93c:	2084b03a 	or	r2,r4,r2
    b940:	d9c00517 	ldw	r7,20(sp)
    b944:	1200062e 	bgeu	r2,r8,b960 <__divdf3+0x54c>
    b948:	1585883a 	add	r2,r2,r22
    b94c:	393fffc4 	addi	r4,r7,-1
    b950:	1580c536 	bltu	r2,r22,bc68 <__divdf3+0x854>
    b954:	1200c42e 	bgeu	r2,r8,bc68 <__divdf3+0x854>
    b958:	39ffff84 	addi	r7,r7,-2
    b95c:	1585883a 	add	r2,r2,r22
    b960:	122bc83a 	sub	r21,r2,r8
    b964:	a00b883a 	mov	r5,r20
    b968:	a809883a 	mov	r4,r21
    b96c:	d8c00215 	stw	r3,8(sp)
    b970:	d9c00515 	stw	r7,20(sp)
    b974:	00006700 	call	670 <__udivsi3>
    b978:	9009883a 	mov	r4,r18
    b97c:	100b883a 	mov	r5,r2
    b980:	d8800415 	stw	r2,16(sp)
    b984:	000072c0 	call	72c <__mulsi3>
    b988:	a809883a 	mov	r4,r21
    b98c:	a00b883a 	mov	r5,r20
    b990:	1025883a 	mov	r18,r2
    b994:	00006d40 	call	6d4 <__umodsi3>
    b998:	1004943a 	slli	r2,r2,16
    b99c:	813fffcc 	andi	r4,r16,65535
    b9a0:	d8c00217 	ldw	r3,8(sp)
    b9a4:	20a0b03a 	or	r16,r4,r2
    b9a8:	d9c00517 	ldw	r7,20(sp)
    b9ac:	da000417 	ldw	r8,16(sp)
    b9b0:	8480062e 	bgeu	r16,r18,b9cc <__divdf3+0x5b8>
    b9b4:	85a1883a 	add	r16,r16,r22
    b9b8:	40bfffc4 	addi	r2,r8,-1
    b9bc:	8580ac36 	bltu	r16,r22,bc70 <__divdf3+0x85c>
    b9c0:	8480ab2e 	bgeu	r16,r18,bc70 <__divdf3+0x85c>
    b9c4:	423fff84 	addi	r8,r8,-2
    b9c8:	85a1883a 	add	r16,r16,r22
    b9cc:	3804943a 	slli	r2,r7,16
    b9d0:	84a1c83a 	sub	r16,r16,r18
    b9d4:	e009883a 	mov	r4,fp
    b9d8:	1228b03a 	or	r20,r2,r8
    b9dc:	a1ffffcc 	andi	r7,r20,65535
    b9e0:	a024d43a 	srli	r18,r20,16
    b9e4:	380b883a 	mov	r5,r7
    b9e8:	d8c00215 	stw	r3,8(sp)
    b9ec:	d9c00515 	stw	r7,20(sp)
    b9f0:	000072c0 	call	72c <__mulsi3>
    b9f4:	900b883a 	mov	r5,r18
    b9f8:	e009883a 	mov	r4,fp
    b9fc:	102b883a 	mov	r21,r2
    ba00:	000072c0 	call	72c <__mulsi3>
    ba04:	900b883a 	mov	r5,r18
    ba08:	b809883a 	mov	r4,r23
    ba0c:	1039883a 	mov	fp,r2
    ba10:	000072c0 	call	72c <__mulsi3>
    ba14:	d9c00517 	ldw	r7,20(sp)
    ba18:	b80b883a 	mov	r5,r23
    ba1c:	1025883a 	mov	r18,r2
    ba20:	3809883a 	mov	r4,r7
    ba24:	000072c0 	call	72c <__mulsi3>
    ba28:	a808d43a 	srli	r4,r21,16
    ba2c:	1705883a 	add	r2,r2,fp
    ba30:	d8c00217 	ldw	r3,8(sp)
    ba34:	2085883a 	add	r2,r4,r2
    ba38:	1700022e 	bgeu	r2,fp,ba44 <__divdf3+0x630>
    ba3c:	01000074 	movhi	r4,1
    ba40:	9125883a 	add	r18,r18,r4
    ba44:	1008d43a 	srli	r4,r2,16
    ba48:	1004943a 	slli	r2,r2,16
    ba4c:	ad7fffcc 	andi	r21,r21,65535
    ba50:	2489883a 	add	r4,r4,r18
    ba54:	1545883a 	add	r2,r2,r21
    ba58:	81003836 	bltu	r16,r4,bb3c <__divdf3+0x728>
    ba5c:	81003626 	beq	r16,r4,bb38 <__divdf3+0x724>
    ba60:	a5000054 	ori	r20,r20,1
    ba64:	1880ffc4 	addi	r2,r3,1023
    ba68:	00bf2e0e 	bge	zero,r2,b724 <__alt_exception_stack_pointer+0xf800b724>
    ba6c:	a10001cc 	andi	r4,r20,7
    ba70:	20000726 	beq	r4,zero,ba90 <__divdf3+0x67c>
    ba74:	a10003cc 	andi	r4,r20,15
    ba78:	01400104 	movi	r5,4
    ba7c:	21400426 	beq	r4,r5,ba90 <__divdf3+0x67c>
    ba80:	a149883a 	add	r4,r20,r5
    ba84:	2529803a 	cmpltu	r20,r4,r20
    ba88:	8d23883a 	add	r17,r17,r20
    ba8c:	2029883a 	mov	r20,r4
    ba90:	8900402c 	andhi	r4,r17,256
    ba94:	20000426 	beq	r4,zero,baa8 <__divdf3+0x694>
    ba98:	18810004 	addi	r2,r3,1024
    ba9c:	00ffc034 	movhi	r3,65280
    baa0:	18ffffc4 	addi	r3,r3,-1
    baa4:	88e2703a 	and	r17,r17,r3
    baa8:	00c1ff84 	movi	r3,2046
    baac:	18beb416 	blt	r3,r2,b580 <__alt_exception_stack_pointer+0xf800b580>
    bab0:	a028d0fa 	srli	r20,r20,3
    bab4:	882a977a 	slli	r21,r17,29
    bab8:	8820927a 	slli	r16,r17,9
    babc:	1081ffcc 	andi	r2,r2,2047
    bac0:	ad2ab03a 	or	r21,r21,r20
    bac4:	8020d33a 	srli	r16,r16,12
    bac8:	9900004c 	andi	r4,r19,1
    bacc:	003eb006 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    bad0:	8080022c 	andhi	r2,r16,8
    bad4:	10001226 	beq	r2,zero,bb20 <__divdf3+0x70c>
    bad8:	8880022c 	andhi	r2,r17,8
    badc:	1000101e 	bne	r2,zero,bb20 <__divdf3+0x70c>
    bae0:	00800434 	movhi	r2,16
    bae4:	8c000234 	orhi	r16,r17,8
    bae8:	10bfffc4 	addi	r2,r2,-1
    baec:	b809883a 	mov	r4,r23
    baf0:	80a0703a 	and	r16,r16,r2
    baf4:	a02b883a 	mov	r21,r20
    baf8:	003f0806 	br	b71c <__alt_exception_stack_pointer+0xf800b71c>
    bafc:	008000c4 	movi	r2,3
    bb00:	3880b126 	beq	r7,r2,bdc8 <__divdf3+0x9b4>
    bb04:	00800044 	movi	r2,1
    bb08:	38805b1e 	bne	r7,r2,bc78 <__divdf3+0x864>
    bb0c:	e009883a 	mov	r4,fp
    bb10:	0005883a 	mov	r2,zero
    bb14:	0021883a 	mov	r16,zero
    bb18:	002b883a 	mov	r21,zero
    bb1c:	003e9c06 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    bb20:	00800434 	movhi	r2,16
    bb24:	84000234 	orhi	r16,r16,8
    bb28:	10bfffc4 	addi	r2,r2,-1
    bb2c:	b009883a 	mov	r4,r22
    bb30:	80a0703a 	and	r16,r16,r2
    bb34:	003ef906 	br	b71c <__alt_exception_stack_pointer+0xf800b71c>
    bb38:	103fca26 	beq	r2,zero,ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bb3c:	b421883a 	add	r16,r22,r16
    bb40:	a17fffc4 	addi	r5,r20,-1
    bb44:	8580422e 	bgeu	r16,r22,bc50 <__divdf3+0x83c>
    bb48:	2829883a 	mov	r20,r5
    bb4c:	813fc41e 	bne	r16,r4,ba60 <__alt_exception_stack_pointer+0xf800ba60>
    bb50:	d9800017 	ldw	r6,0(sp)
    bb54:	30bfc21e 	bne	r6,r2,ba60 <__alt_exception_stack_pointer+0xf800ba60>
    bb58:	003fc206 	br	ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bb5c:	143ff604 	addi	r16,r2,-40
    bb60:	8c20983a 	sll	r16,r17,r16
    bb64:	002b883a 	mov	r21,zero
    bb68:	003eb406 	br	b63c <__alt_exception_stack_pointer+0xf800b63c>
    bb6c:	d9800215 	stw	r6,8(sp)
    bb70:	d9c00515 	stw	r7,20(sp)
    bb74:	da000415 	stw	r8,16(sp)
    bb78:	000d3a80 	call	d3a8 <__clzsi2>
    bb7c:	10800804 	addi	r2,r2,32
    bb80:	da000417 	ldw	r8,16(sp)
    bb84:	d9c00517 	ldw	r7,20(sp)
    bb88:	d9800217 	ldw	r6,8(sp)
    bb8c:	003ea106 	br	b614 <__alt_exception_stack_pointer+0xf800b614>
    bb90:	147ff604 	addi	r17,r2,-40
    bb94:	3462983a 	sll	r17,r6,r17
    bb98:	0029883a 	mov	r20,zero
    bb9c:	003ec906 	br	b6c4 <__alt_exception_stack_pointer+0xf800b6c4>
    bba0:	3009883a 	mov	r4,r6
    bba4:	d9400115 	stw	r5,4(sp)
    bba8:	d9800215 	stw	r6,8(sp)
    bbac:	da000415 	stw	r8,16(sp)
    bbb0:	da400315 	stw	r9,12(sp)
    bbb4:	000d3a80 	call	d3a8 <__clzsi2>
    bbb8:	10800804 	addi	r2,r2,32
    bbbc:	da400317 	ldw	r9,12(sp)
    bbc0:	da000417 	ldw	r8,16(sp)
    bbc4:	d9800217 	ldw	r6,8(sp)
    bbc8:	d9400117 	ldw	r5,4(sp)
    bbcc:	003eb306 	br	b69c <__alt_exception_stack_pointer+0xf800b69c>
    bbd0:	d9800017 	ldw	r6,0(sp)
    bbd4:	a9ab883a 	add	r21,r21,r6
    bbd8:	a98b803a 	cmpltu	r5,r21,r6
    bbdc:	2d8b883a 	add	r5,r5,r22
    bbe0:	2a11883a 	add	r8,r5,r8
    bbe4:	897fffc4 	addi	r5,r17,-1
    bbe8:	b2000c2e 	bgeu	r22,r8,bc1c <__divdf3+0x808>
    bbec:	41003f36 	bltu	r8,r4,bcec <__divdf3+0x8d8>
    bbf0:	22006c26 	beq	r4,r8,bda4 <__divdf3+0x990>
    bbf4:	4109c83a 	sub	r4,r8,r4
    bbf8:	2823883a 	mov	r17,r5
    bbfc:	003f3b06 	br	b8ec <__alt_exception_stack_pointer+0xf800b8ec>
    bc00:	ad3ed336 	bltu	r21,r20,b750 <__alt_exception_stack_pointer+0xf800b750>
    bc04:	a804d07a 	srli	r2,r21,1
    bc08:	802e97fa 	slli	r23,r16,31
    bc0c:	a82a97fa 	slli	r21,r21,31
    bc10:	8020d07a 	srli	r16,r16,1
    bc14:	b8aeb03a 	or	r23,r23,r2
    bc18:	003ed006 	br	b75c <__alt_exception_stack_pointer+0xf800b75c>
    bc1c:	b23ff51e 	bne	r22,r8,bbf4 <__alt_exception_stack_pointer+0xf800bbf4>
    bc20:	d9800017 	ldw	r6,0(sp)
    bc24:	a9bff12e 	bgeu	r21,r6,bbec <__alt_exception_stack_pointer+0xf800bbec>
    bc28:	b109c83a 	sub	r4,r22,r4
    bc2c:	2823883a 	mov	r17,r5
    bc30:	003f2e06 	br	b8ec <__alt_exception_stack_pointer+0xf800b8ec>
    bc34:	2021883a 	mov	r16,r4
    bc38:	003eff06 	br	b838 <__alt_exception_stack_pointer+0xf800b838>
    bc3c:	2023883a 	mov	r17,r4
    bc40:	003ee406 	br	b7d4 <__alt_exception_stack_pointer+0xf800b7d4>
    bc44:	a8bfe236 	bltu	r21,r2,bbd0 <__alt_exception_stack_pointer+0xf800bbd0>
    bc48:	0009883a 	mov	r4,zero
    bc4c:	003f2706 	br	b8ec <__alt_exception_stack_pointer+0xf800b8ec>
    bc50:	81002d36 	bltu	r16,r4,bd08 <__divdf3+0x8f4>
    bc54:	24005626 	beq	r4,r16,bdb0 <__divdf3+0x99c>
    bc58:	2829883a 	mov	r20,r5
    bc5c:	003f8006 	br	ba60 <__alt_exception_stack_pointer+0xf800ba60>
    bc60:	053fffc4 	movi	r20,-1
    bc64:	003f7f06 	br	ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bc68:	200f883a 	mov	r7,r4
    bc6c:	003f3c06 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bc70:	1011883a 	mov	r8,r2
    bc74:	003f5506 	br	b9cc <__alt_exception_stack_pointer+0xf800b9cc>
    bc78:	e027883a 	mov	r19,fp
    bc7c:	003f7906 	br	ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bc80:	010007c4 	movi	r4,31
    bc84:	20c02816 	blt	r4,r3,bd28 <__divdf3+0x914>
    bc88:	00800804 	movi	r2,32
    bc8c:	10c5c83a 	sub	r2,r2,r3
    bc90:	888a983a 	sll	r5,r17,r2
    bc94:	a0c8d83a 	srl	r4,r20,r3
    bc98:	a084983a 	sll	r2,r20,r2
    bc9c:	88e2d83a 	srl	r17,r17,r3
    bca0:	2906b03a 	or	r3,r5,r4
    bca4:	1004c03a 	cmpne	r2,r2,zero
    bca8:	1886b03a 	or	r3,r3,r2
    bcac:	188001cc 	andi	r2,r3,7
    bcb0:	10000726 	beq	r2,zero,bcd0 <__divdf3+0x8bc>
    bcb4:	188003cc 	andi	r2,r3,15
    bcb8:	01000104 	movi	r4,4
    bcbc:	11000426 	beq	r2,r4,bcd0 <__divdf3+0x8bc>
    bcc0:	1805883a 	mov	r2,r3
    bcc4:	10c00104 	addi	r3,r2,4
    bcc8:	1885803a 	cmpltu	r2,r3,r2
    bccc:	88a3883a 	add	r17,r17,r2
    bcd0:	8880202c 	andhi	r2,r17,128
    bcd4:	10002926 	beq	r2,zero,bd7c <__divdf3+0x968>
    bcd8:	9900004c 	andi	r4,r19,1
    bcdc:	00800044 	movi	r2,1
    bce0:	0021883a 	mov	r16,zero
    bce4:	002b883a 	mov	r21,zero
    bce8:	003e2906 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    bcec:	d9800017 	ldw	r6,0(sp)
    bcf0:	8c7fff84 	addi	r17,r17,-2
    bcf4:	a9ab883a 	add	r21,r21,r6
    bcf8:	a98b803a 	cmpltu	r5,r21,r6
    bcfc:	2d8b883a 	add	r5,r5,r22
    bd00:	2a11883a 	add	r8,r5,r8
    bd04:	003ef806 	br	b8e8 <__alt_exception_stack_pointer+0xf800b8e8>
    bd08:	d9800017 	ldw	r6,0(sp)
    bd0c:	318f883a 	add	r7,r6,r6
    bd10:	398b803a 	cmpltu	r5,r7,r6
    bd14:	2d8d883a 	add	r6,r5,r22
    bd18:	81a1883a 	add	r16,r16,r6
    bd1c:	a17fff84 	addi	r5,r20,-2
    bd20:	d9c00015 	stw	r7,0(sp)
    bd24:	003f8806 	br	bb48 <__alt_exception_stack_pointer+0xf800bb48>
    bd28:	013ff844 	movi	r4,-31
    bd2c:	2085c83a 	sub	r2,r4,r2
    bd30:	8888d83a 	srl	r4,r17,r2
    bd34:	00800804 	movi	r2,32
    bd38:	18802126 	beq	r3,r2,bdc0 <__divdf3+0x9ac>
    bd3c:	04001004 	movi	r16,64
    bd40:	80c7c83a 	sub	r3,r16,r3
    bd44:	88e0983a 	sll	r16,r17,r3
    bd48:	8504b03a 	or	r2,r16,r20
    bd4c:	1004c03a 	cmpne	r2,r2,zero
    bd50:	2084b03a 	or	r2,r4,r2
    bd54:	144001cc 	andi	r17,r2,7
    bd58:	88000d1e 	bne	r17,zero,bd90 <__divdf3+0x97c>
    bd5c:	0021883a 	mov	r16,zero
    bd60:	102ad0fa 	srli	r21,r2,3
    bd64:	9900004c 	andi	r4,r19,1
    bd68:	0005883a 	mov	r2,zero
    bd6c:	ac6ab03a 	or	r21,r21,r17
    bd70:	003e0706 	br	b590 <__alt_exception_stack_pointer+0xf800b590>
    bd74:	1007883a 	mov	r3,r2
    bd78:	0023883a 	mov	r17,zero
    bd7c:	8820927a 	slli	r16,r17,9
    bd80:	1805883a 	mov	r2,r3
    bd84:	8822977a 	slli	r17,r17,29
    bd88:	8020d33a 	srli	r16,r16,12
    bd8c:	003ff406 	br	bd60 <__alt_exception_stack_pointer+0xf800bd60>
    bd90:	10c003cc 	andi	r3,r2,15
    bd94:	01000104 	movi	r4,4
    bd98:	193ff626 	beq	r3,r4,bd74 <__alt_exception_stack_pointer+0xf800bd74>
    bd9c:	0023883a 	mov	r17,zero
    bda0:	003fc806 	br	bcc4 <__alt_exception_stack_pointer+0xf800bcc4>
    bda4:	a8bfd136 	bltu	r21,r2,bcec <__alt_exception_stack_pointer+0xf800bcec>
    bda8:	2823883a 	mov	r17,r5
    bdac:	003fa606 	br	bc48 <__alt_exception_stack_pointer+0xf800bc48>
    bdb0:	d9800017 	ldw	r6,0(sp)
    bdb4:	30bfd436 	bltu	r6,r2,bd08 <__alt_exception_stack_pointer+0xf800bd08>
    bdb8:	2829883a 	mov	r20,r5
    bdbc:	003f6406 	br	bb50 <__alt_exception_stack_pointer+0xf800bb50>
    bdc0:	0021883a 	mov	r16,zero
    bdc4:	003fe006 	br	bd48 <__alt_exception_stack_pointer+0xf800bd48>
    bdc8:	00800434 	movhi	r2,16
    bdcc:	8c000234 	orhi	r16,r17,8
    bdd0:	10bfffc4 	addi	r2,r2,-1
    bdd4:	e009883a 	mov	r4,fp
    bdd8:	80a0703a 	and	r16,r16,r2
    bddc:	a02b883a 	mov	r21,r20
    bde0:	003e4e06 	br	b71c <__alt_exception_stack_pointer+0xf800b71c>

0000bde4 <__eqdf2>:
    bde4:	2804d53a 	srli	r2,r5,20
    bde8:	3806d53a 	srli	r3,r7,20
    bdec:	02000434 	movhi	r8,16
    bdf0:	423fffc4 	addi	r8,r8,-1
    bdf4:	1081ffcc 	andi	r2,r2,2047
    bdf8:	0281ffc4 	movi	r10,2047
    bdfc:	2a12703a 	and	r9,r5,r8
    be00:	18c1ffcc 	andi	r3,r3,2047
    be04:	3a10703a 	and	r8,r7,r8
    be08:	280ad7fa 	srli	r5,r5,31
    be0c:	380ed7fa 	srli	r7,r7,31
    be10:	12801026 	beq	r2,r10,be54 <__eqdf2+0x70>
    be14:	0281ffc4 	movi	r10,2047
    be18:	1a800a26 	beq	r3,r10,be44 <__eqdf2+0x60>
    be1c:	10c00226 	beq	r2,r3,be28 <__eqdf2+0x44>
    be20:	00800044 	movi	r2,1
    be24:	f800283a 	ret
    be28:	4a3ffd1e 	bne	r9,r8,be20 <__alt_exception_stack_pointer+0xf800be20>
    be2c:	21bffc1e 	bne	r4,r6,be20 <__alt_exception_stack_pointer+0xf800be20>
    be30:	29c00c26 	beq	r5,r7,be64 <__eqdf2+0x80>
    be34:	103ffa1e 	bne	r2,zero,be20 <__alt_exception_stack_pointer+0xf800be20>
    be38:	2244b03a 	or	r2,r4,r9
    be3c:	1004c03a 	cmpne	r2,r2,zero
    be40:	f800283a 	ret
    be44:	3214b03a 	or	r10,r6,r8
    be48:	503ff426 	beq	r10,zero,be1c <__alt_exception_stack_pointer+0xf800be1c>
    be4c:	00800044 	movi	r2,1
    be50:	f800283a 	ret
    be54:	2254b03a 	or	r10,r4,r9
    be58:	503fee26 	beq	r10,zero,be14 <__alt_exception_stack_pointer+0xf800be14>
    be5c:	00800044 	movi	r2,1
    be60:	f800283a 	ret
    be64:	0005883a 	mov	r2,zero
    be68:	f800283a 	ret

0000be6c <__gedf2>:
    be6c:	2804d53a 	srli	r2,r5,20
    be70:	3806d53a 	srli	r3,r7,20
    be74:	02000434 	movhi	r8,16
    be78:	423fffc4 	addi	r8,r8,-1
    be7c:	1081ffcc 	andi	r2,r2,2047
    be80:	0241ffc4 	movi	r9,2047
    be84:	2a14703a 	and	r10,r5,r8
    be88:	18c1ffcc 	andi	r3,r3,2047
    be8c:	3a10703a 	and	r8,r7,r8
    be90:	280ad7fa 	srli	r5,r5,31
    be94:	380ed7fa 	srli	r7,r7,31
    be98:	12401d26 	beq	r2,r9,bf10 <__gedf2+0xa4>
    be9c:	0241ffc4 	movi	r9,2047
    bea0:	1a401226 	beq	r3,r9,beec <__gedf2+0x80>
    bea4:	1000081e 	bne	r2,zero,bec8 <__gedf2+0x5c>
    bea8:	2296b03a 	or	r11,r4,r10
    beac:	5813003a 	cmpeq	r9,r11,zero
    beb0:	1800091e 	bne	r3,zero,bed8 <__gedf2+0x6c>
    beb4:	3218b03a 	or	r12,r6,r8
    beb8:	6000071e 	bne	r12,zero,bed8 <__gedf2+0x6c>
    bebc:	0005883a 	mov	r2,zero
    bec0:	5800101e 	bne	r11,zero,bf04 <__gedf2+0x98>
    bec4:	f800283a 	ret
    bec8:	18000c1e 	bne	r3,zero,befc <__gedf2+0x90>
    becc:	3212b03a 	or	r9,r6,r8
    bed0:	48000c26 	beq	r9,zero,bf04 <__gedf2+0x98>
    bed4:	0013883a 	mov	r9,zero
    bed8:	39c03fcc 	andi	r7,r7,255
    bedc:	48000826 	beq	r9,zero,bf00 <__gedf2+0x94>
    bee0:	38000926 	beq	r7,zero,bf08 <__gedf2+0x9c>
    bee4:	00800044 	movi	r2,1
    bee8:	f800283a 	ret
    beec:	3212b03a 	or	r9,r6,r8
    bef0:	483fec26 	beq	r9,zero,bea4 <__alt_exception_stack_pointer+0xf800bea4>
    bef4:	00bfff84 	movi	r2,-2
    bef8:	f800283a 	ret
    befc:	39c03fcc 	andi	r7,r7,255
    bf00:	29c00626 	beq	r5,r7,bf1c <__gedf2+0xb0>
    bf04:	283ff726 	beq	r5,zero,bee4 <__alt_exception_stack_pointer+0xf800bee4>
    bf08:	00bfffc4 	movi	r2,-1
    bf0c:	f800283a 	ret
    bf10:	2292b03a 	or	r9,r4,r10
    bf14:	483fe126 	beq	r9,zero,be9c <__alt_exception_stack_pointer+0xf800be9c>
    bf18:	003ff606 	br	bef4 <__alt_exception_stack_pointer+0xf800bef4>
    bf1c:	18bff916 	blt	r3,r2,bf04 <__alt_exception_stack_pointer+0xf800bf04>
    bf20:	10c00316 	blt	r2,r3,bf30 <__gedf2+0xc4>
    bf24:	42bff736 	bltu	r8,r10,bf04 <__alt_exception_stack_pointer+0xf800bf04>
    bf28:	52000326 	beq	r10,r8,bf38 <__gedf2+0xcc>
    bf2c:	5200042e 	bgeu	r10,r8,bf40 <__gedf2+0xd4>
    bf30:	283fec1e 	bne	r5,zero,bee4 <__alt_exception_stack_pointer+0xf800bee4>
    bf34:	003ff406 	br	bf08 <__alt_exception_stack_pointer+0xf800bf08>
    bf38:	313ff236 	bltu	r6,r4,bf04 <__alt_exception_stack_pointer+0xf800bf04>
    bf3c:	21bffc36 	bltu	r4,r6,bf30 <__alt_exception_stack_pointer+0xf800bf30>
    bf40:	0005883a 	mov	r2,zero
    bf44:	f800283a 	ret

0000bf48 <__ledf2>:
    bf48:	2804d53a 	srli	r2,r5,20
    bf4c:	3810d53a 	srli	r8,r7,20
    bf50:	00c00434 	movhi	r3,16
    bf54:	18ffffc4 	addi	r3,r3,-1
    bf58:	1081ffcc 	andi	r2,r2,2047
    bf5c:	0241ffc4 	movi	r9,2047
    bf60:	28d4703a 	and	r10,r5,r3
    bf64:	4201ffcc 	andi	r8,r8,2047
    bf68:	38c6703a 	and	r3,r7,r3
    bf6c:	280ad7fa 	srli	r5,r5,31
    bf70:	380ed7fa 	srli	r7,r7,31
    bf74:	12401f26 	beq	r2,r9,bff4 <__ledf2+0xac>
    bf78:	0241ffc4 	movi	r9,2047
    bf7c:	42401426 	beq	r8,r9,bfd0 <__ledf2+0x88>
    bf80:	1000091e 	bne	r2,zero,bfa8 <__ledf2+0x60>
    bf84:	2296b03a 	or	r11,r4,r10
    bf88:	5813003a 	cmpeq	r9,r11,zero
    bf8c:	29403fcc 	andi	r5,r5,255
    bf90:	40000a1e 	bne	r8,zero,bfbc <__ledf2+0x74>
    bf94:	30d8b03a 	or	r12,r6,r3
    bf98:	6000081e 	bne	r12,zero,bfbc <__ledf2+0x74>
    bf9c:	0005883a 	mov	r2,zero
    bfa0:	5800111e 	bne	r11,zero,bfe8 <__ledf2+0xa0>
    bfa4:	f800283a 	ret
    bfa8:	29403fcc 	andi	r5,r5,255
    bfac:	40000c1e 	bne	r8,zero,bfe0 <__ledf2+0x98>
    bfb0:	30d2b03a 	or	r9,r6,r3
    bfb4:	48000c26 	beq	r9,zero,bfe8 <__ledf2+0xa0>
    bfb8:	0013883a 	mov	r9,zero
    bfbc:	39c03fcc 	andi	r7,r7,255
    bfc0:	48000826 	beq	r9,zero,bfe4 <__ledf2+0x9c>
    bfc4:	38001126 	beq	r7,zero,c00c <__ledf2+0xc4>
    bfc8:	00800044 	movi	r2,1
    bfcc:	f800283a 	ret
    bfd0:	30d2b03a 	or	r9,r6,r3
    bfd4:	483fea26 	beq	r9,zero,bf80 <__alt_exception_stack_pointer+0xf800bf80>
    bfd8:	00800084 	movi	r2,2
    bfdc:	f800283a 	ret
    bfe0:	39c03fcc 	andi	r7,r7,255
    bfe4:	39400726 	beq	r7,r5,c004 <__ledf2+0xbc>
    bfe8:	2800081e 	bne	r5,zero,c00c <__ledf2+0xc4>
    bfec:	00800044 	movi	r2,1
    bff0:	f800283a 	ret
    bff4:	2292b03a 	or	r9,r4,r10
    bff8:	483fdf26 	beq	r9,zero,bf78 <__alt_exception_stack_pointer+0xf800bf78>
    bffc:	00800084 	movi	r2,2
    c000:	f800283a 	ret
    c004:	4080030e 	bge	r8,r2,c014 <__ledf2+0xcc>
    c008:	383fef26 	beq	r7,zero,bfc8 <__alt_exception_stack_pointer+0xf800bfc8>
    c00c:	00bfffc4 	movi	r2,-1
    c010:	f800283a 	ret
    c014:	123feb16 	blt	r2,r8,bfc4 <__alt_exception_stack_pointer+0xf800bfc4>
    c018:	1abff336 	bltu	r3,r10,bfe8 <__alt_exception_stack_pointer+0xf800bfe8>
    c01c:	50c00326 	beq	r10,r3,c02c <__ledf2+0xe4>
    c020:	50c0042e 	bgeu	r10,r3,c034 <__ledf2+0xec>
    c024:	283fe81e 	bne	r5,zero,bfc8 <__alt_exception_stack_pointer+0xf800bfc8>
    c028:	003ff806 	br	c00c <__alt_exception_stack_pointer+0xf800c00c>
    c02c:	313fee36 	bltu	r6,r4,bfe8 <__alt_exception_stack_pointer+0xf800bfe8>
    c030:	21bffc36 	bltu	r4,r6,c024 <__alt_exception_stack_pointer+0xf800c024>
    c034:	0005883a 	mov	r2,zero
    c038:	f800283a 	ret

0000c03c <__muldf3>:
    c03c:	deffee04 	addi	sp,sp,-72
    c040:	dd000c15 	stw	r20,48(sp)
    c044:	2828d53a 	srli	r20,r5,20
    c048:	ddc00f15 	stw	r23,60(sp)
    c04c:	282ed7fa 	srli	r23,r5,31
    c050:	dc000815 	stw	r16,32(sp)
    c054:	04000434 	movhi	r16,16
    c058:	dcc00b15 	stw	r19,44(sp)
    c05c:	843fffc4 	addi	r16,r16,-1
    c060:	dfc01115 	stw	ra,68(sp)
    c064:	df001015 	stw	fp,64(sp)
    c068:	dd800e15 	stw	r22,56(sp)
    c06c:	dd400d15 	stw	r21,52(sp)
    c070:	dc800a15 	stw	r18,40(sp)
    c074:	dc400915 	stw	r17,36(sp)
    c078:	a501ffcc 	andi	r20,r20,2047
    c07c:	2c20703a 	and	r16,r5,r16
    c080:	b827883a 	mov	r19,r23
    c084:	ba403fcc 	andi	r9,r23,255
    c088:	a0006026 	beq	r20,zero,c20c <__muldf3+0x1d0>
    c08c:	0081ffc4 	movi	r2,2047
    c090:	202d883a 	mov	r22,r4
    c094:	a0803626 	beq	r20,r2,c170 <__muldf3+0x134>
    c098:	84000434 	orhi	r16,r16,16
    c09c:	200ad77a 	srli	r5,r4,29
    c0a0:	800490fa 	slli	r2,r16,3
    c0a4:	202c90fa 	slli	r22,r4,3
    c0a8:	a53f0044 	addi	r20,r20,-1023
    c0ac:	28a0b03a 	or	r16,r5,r2
    c0b0:	002b883a 	mov	r21,zero
    c0b4:	000b883a 	mov	r5,zero
    c0b8:	3804d53a 	srli	r2,r7,20
    c0bc:	3838d7fa 	srli	fp,r7,31
    c0c0:	04400434 	movhi	r17,16
    c0c4:	8c7fffc4 	addi	r17,r17,-1
    c0c8:	1081ffcc 	andi	r2,r2,2047
    c0cc:	3025883a 	mov	r18,r6
    c0d0:	3c62703a 	and	r17,r7,r17
    c0d4:	e2803fcc 	andi	r10,fp,255
    c0d8:	10006d26 	beq	r2,zero,c290 <__muldf3+0x254>
    c0dc:	00c1ffc4 	movi	r3,2047
    c0e0:	10c06526 	beq	r2,r3,c278 <__muldf3+0x23c>
    c0e4:	8c400434 	orhi	r17,r17,16
    c0e8:	300ed77a 	srli	r7,r6,29
    c0ec:	880690fa 	slli	r3,r17,3
    c0f0:	302490fa 	slli	r18,r6,3
    c0f4:	10bf0044 	addi	r2,r2,-1023
    c0f8:	38e2b03a 	or	r17,r7,r3
    c0fc:	000f883a 	mov	r7,zero
    c100:	a087883a 	add	r3,r20,r2
    c104:	010003c4 	movi	r4,15
    c108:	3d44b03a 	or	r2,r7,r21
    c10c:	e5ccf03a 	xor	r6,fp,r23
    c110:	1a000044 	addi	r8,r3,1
    c114:	20809b36 	bltu	r4,r2,c384 <__muldf3+0x348>
    c118:	100490ba 	slli	r2,r2,2
    c11c:	01000074 	movhi	r4,1
    c120:	21304c04 	addi	r4,r4,-16080
    c124:	1105883a 	add	r2,r2,r4
    c128:	10800017 	ldw	r2,0(r2)
    c12c:	1000683a 	jmp	r2
    c130:	0000c384 	movi	zero,782
    c134:	0000c190 	cmplti	zero,zero,774
    c138:	0000c190 	cmplti	zero,zero,774
    c13c:	0000c18c 	andi	zero,zero,774
    c140:	0000c360 	cmpeqi	zero,zero,781
    c144:	0000c360 	cmpeqi	zero,zero,781
    c148:	0000c348 	cmpgei	zero,zero,781
    c14c:	0000c18c 	andi	zero,zero,774
    c150:	0000c360 	cmpeqi	zero,zero,781
    c154:	0000c348 	cmpgei	zero,zero,781
    c158:	0000c360 	cmpeqi	zero,zero,781
    c15c:	0000c18c 	andi	zero,zero,774
    c160:	0000c370 	cmpltui	zero,zero,781
    c164:	0000c370 	cmpltui	zero,zero,781
    c168:	0000c370 	cmpltui	zero,zero,781
    c16c:	0000c6d0 	cmplti	zero,zero,795
    c170:	2404b03a 	or	r2,r4,r16
    c174:	1000711e 	bne	r2,zero,c33c <__muldf3+0x300>
    c178:	05400204 	movi	r21,8
    c17c:	0021883a 	mov	r16,zero
    c180:	002d883a 	mov	r22,zero
    c184:	01400084 	movi	r5,2
    c188:	003fcb06 	br	c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c18c:	500d883a 	mov	r6,r10
    c190:	00800084 	movi	r2,2
    c194:	38805926 	beq	r7,r2,c2fc <__muldf3+0x2c0>
    c198:	008000c4 	movi	r2,3
    c19c:	3881bb26 	beq	r7,r2,c88c <__muldf3+0x850>
    c1a0:	00800044 	movi	r2,1
    c1a4:	3881961e 	bne	r7,r2,c800 <__muldf3+0x7c4>
    c1a8:	3027883a 	mov	r19,r6
    c1ac:	0005883a 	mov	r2,zero
    c1b0:	0021883a 	mov	r16,zero
    c1b4:	002d883a 	mov	r22,zero
    c1b8:	1004953a 	slli	r2,r2,20
    c1bc:	98c03fcc 	andi	r3,r19,255
    c1c0:	04400434 	movhi	r17,16
    c1c4:	8c7fffc4 	addi	r17,r17,-1
    c1c8:	180697fa 	slli	r3,r3,31
    c1cc:	8460703a 	and	r16,r16,r17
    c1d0:	80a0b03a 	or	r16,r16,r2
    c1d4:	80c6b03a 	or	r3,r16,r3
    c1d8:	b005883a 	mov	r2,r22
    c1dc:	dfc01117 	ldw	ra,68(sp)
    c1e0:	df001017 	ldw	fp,64(sp)
    c1e4:	ddc00f17 	ldw	r23,60(sp)
    c1e8:	dd800e17 	ldw	r22,56(sp)
    c1ec:	dd400d17 	ldw	r21,52(sp)
    c1f0:	dd000c17 	ldw	r20,48(sp)
    c1f4:	dcc00b17 	ldw	r19,44(sp)
    c1f8:	dc800a17 	ldw	r18,40(sp)
    c1fc:	dc400917 	ldw	r17,36(sp)
    c200:	dc000817 	ldw	r16,32(sp)
    c204:	dec01204 	addi	sp,sp,72
    c208:	f800283a 	ret
    c20c:	2404b03a 	or	r2,r4,r16
    c210:	202b883a 	mov	r21,r4
    c214:	10004426 	beq	r2,zero,c328 <__muldf3+0x2ec>
    c218:	80015126 	beq	r16,zero,c760 <__muldf3+0x724>
    c21c:	8009883a 	mov	r4,r16
    c220:	d9800715 	stw	r6,28(sp)
    c224:	d9c00215 	stw	r7,8(sp)
    c228:	da400415 	stw	r9,16(sp)
    c22c:	000d3a80 	call	d3a8 <__clzsi2>
    c230:	d9800717 	ldw	r6,28(sp)
    c234:	d9c00217 	ldw	r7,8(sp)
    c238:	da400417 	ldw	r9,16(sp)
    c23c:	113ffd44 	addi	r4,r2,-11
    c240:	00c00704 	movi	r3,28
    c244:	19014216 	blt	r3,r4,c750 <__muldf3+0x714>
    c248:	00c00744 	movi	r3,29
    c24c:	15bffe04 	addi	r22,r2,-8
    c250:	1907c83a 	sub	r3,r3,r4
    c254:	85a0983a 	sll	r16,r16,r22
    c258:	a8c6d83a 	srl	r3,r21,r3
    c25c:	adac983a 	sll	r22,r21,r22
    c260:	1c20b03a 	or	r16,r3,r16
    c264:	1080fcc4 	addi	r2,r2,1011
    c268:	00a9c83a 	sub	r20,zero,r2
    c26c:	002b883a 	mov	r21,zero
    c270:	000b883a 	mov	r5,zero
    c274:	003f9006 	br	c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c278:	3446b03a 	or	r3,r6,r17
    c27c:	1800281e 	bne	r3,zero,c320 <__muldf3+0x2e4>
    c280:	0023883a 	mov	r17,zero
    c284:	0025883a 	mov	r18,zero
    c288:	01c00084 	movi	r7,2
    c28c:	003f9c06 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c290:	3446b03a 	or	r3,r6,r17
    c294:	18001e26 	beq	r3,zero,c310 <__muldf3+0x2d4>
    c298:	88012126 	beq	r17,zero,c720 <__muldf3+0x6e4>
    c29c:	8809883a 	mov	r4,r17
    c2a0:	d9400215 	stw	r5,8(sp)
    c2a4:	d9800715 	stw	r6,28(sp)
    c2a8:	da400415 	stw	r9,16(sp)
    c2ac:	da800315 	stw	r10,12(sp)
    c2b0:	000d3a80 	call	d3a8 <__clzsi2>
    c2b4:	d9400217 	ldw	r5,8(sp)
    c2b8:	d9800717 	ldw	r6,28(sp)
    c2bc:	da400417 	ldw	r9,16(sp)
    c2c0:	da800317 	ldw	r10,12(sp)
    c2c4:	113ffd44 	addi	r4,r2,-11
    c2c8:	00c00704 	movi	r3,28
    c2cc:	19011016 	blt	r3,r4,c710 <__muldf3+0x6d4>
    c2d0:	00c00744 	movi	r3,29
    c2d4:	14bffe04 	addi	r18,r2,-8
    c2d8:	1907c83a 	sub	r3,r3,r4
    c2dc:	8ca2983a 	sll	r17,r17,r18
    c2e0:	30c6d83a 	srl	r3,r6,r3
    c2e4:	34a4983a 	sll	r18,r6,r18
    c2e8:	1c62b03a 	or	r17,r3,r17
    c2ec:	1080fcc4 	addi	r2,r2,1011
    c2f0:	0085c83a 	sub	r2,zero,r2
    c2f4:	000f883a 	mov	r7,zero
    c2f8:	003f8106 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c2fc:	3027883a 	mov	r19,r6
    c300:	0081ffc4 	movi	r2,2047
    c304:	0021883a 	mov	r16,zero
    c308:	002d883a 	mov	r22,zero
    c30c:	003faa06 	br	c1b8 <__alt_exception_stack_pointer+0xf800c1b8>
    c310:	0023883a 	mov	r17,zero
    c314:	0025883a 	mov	r18,zero
    c318:	01c00044 	movi	r7,1
    c31c:	003f7806 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c320:	01c000c4 	movi	r7,3
    c324:	003f7606 	br	c100 <__alt_exception_stack_pointer+0xf800c100>
    c328:	05400104 	movi	r21,4
    c32c:	0021883a 	mov	r16,zero
    c330:	002d883a 	mov	r22,zero
    c334:	01400044 	movi	r5,1
    c338:	003f5f06 	br	c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c33c:	05400304 	movi	r21,12
    c340:	014000c4 	movi	r5,3
    c344:	003f5c06 	br	c0b8 <__alt_exception_stack_pointer+0xf800c0b8>
    c348:	04000434 	movhi	r16,16
    c34c:	0027883a 	mov	r19,zero
    c350:	843fffc4 	addi	r16,r16,-1
    c354:	05bfffc4 	movi	r22,-1
    c358:	0081ffc4 	movi	r2,2047
    c35c:	003f9606 	br	c1b8 <__alt_exception_stack_pointer+0xf800c1b8>
    c360:	8023883a 	mov	r17,r16
    c364:	b025883a 	mov	r18,r22
    c368:	280f883a 	mov	r7,r5
    c36c:	003f8806 	br	c190 <__alt_exception_stack_pointer+0xf800c190>
    c370:	8023883a 	mov	r17,r16
    c374:	b025883a 	mov	r18,r22
    c378:	480d883a 	mov	r6,r9
    c37c:	280f883a 	mov	r7,r5
    c380:	003f8306 	br	c190 <__alt_exception_stack_pointer+0xf800c190>
    c384:	b026d43a 	srli	r19,r22,16
    c388:	902ed43a 	srli	r23,r18,16
    c38c:	b5bfffcc 	andi	r22,r22,65535
    c390:	94bfffcc 	andi	r18,r18,65535
    c394:	b00b883a 	mov	r5,r22
    c398:	9009883a 	mov	r4,r18
    c39c:	d8c00515 	stw	r3,20(sp)
    c3a0:	d9800715 	stw	r6,28(sp)
    c3a4:	da000615 	stw	r8,24(sp)
    c3a8:	000072c0 	call	72c <__mulsi3>
    c3ac:	980b883a 	mov	r5,r19
    c3b0:	9009883a 	mov	r4,r18
    c3b4:	1029883a 	mov	r20,r2
    c3b8:	000072c0 	call	72c <__mulsi3>
    c3bc:	b80b883a 	mov	r5,r23
    c3c0:	9809883a 	mov	r4,r19
    c3c4:	102b883a 	mov	r21,r2
    c3c8:	000072c0 	call	72c <__mulsi3>
    c3cc:	b809883a 	mov	r4,r23
    c3d0:	b00b883a 	mov	r5,r22
    c3d4:	1039883a 	mov	fp,r2
    c3d8:	000072c0 	call	72c <__mulsi3>
    c3dc:	a008d43a 	srli	r4,r20,16
    c3e0:	1545883a 	add	r2,r2,r21
    c3e4:	d8c00517 	ldw	r3,20(sp)
    c3e8:	2085883a 	add	r2,r4,r2
    c3ec:	d9800717 	ldw	r6,28(sp)
    c3f0:	da000617 	ldw	r8,24(sp)
    c3f4:	1540022e 	bgeu	r2,r21,c400 <__muldf3+0x3c4>
    c3f8:	01000074 	movhi	r4,1
    c3fc:	e139883a 	add	fp,fp,r4
    c400:	100e943a 	slli	r7,r2,16
    c404:	1004d43a 	srli	r2,r2,16
    c408:	882ad43a 	srli	r21,r17,16
    c40c:	a53fffcc 	andi	r20,r20,65535
    c410:	8c7fffcc 	andi	r17,r17,65535
    c414:	3d29883a 	add	r20,r7,r20
    c418:	b00b883a 	mov	r5,r22
    c41c:	8809883a 	mov	r4,r17
    c420:	d8c00515 	stw	r3,20(sp)
    c424:	d9800715 	stw	r6,28(sp)
    c428:	da000615 	stw	r8,24(sp)
    c42c:	dd000115 	stw	r20,4(sp)
    c430:	d8800015 	stw	r2,0(sp)
    c434:	000072c0 	call	72c <__mulsi3>
    c438:	980b883a 	mov	r5,r19
    c43c:	8809883a 	mov	r4,r17
    c440:	d8800215 	stw	r2,8(sp)
    c444:	000072c0 	call	72c <__mulsi3>
    c448:	9809883a 	mov	r4,r19
    c44c:	a80b883a 	mov	r5,r21
    c450:	1029883a 	mov	r20,r2
    c454:	000072c0 	call	72c <__mulsi3>
    c458:	b00b883a 	mov	r5,r22
    c45c:	a809883a 	mov	r4,r21
    c460:	d8800415 	stw	r2,16(sp)
    c464:	000072c0 	call	72c <__mulsi3>
    c468:	d9c00217 	ldw	r7,8(sp)
    c46c:	1505883a 	add	r2,r2,r20
    c470:	d8c00517 	ldw	r3,20(sp)
    c474:	3826d43a 	srli	r19,r7,16
    c478:	d9800717 	ldw	r6,28(sp)
    c47c:	da000617 	ldw	r8,24(sp)
    c480:	9885883a 	add	r2,r19,r2
    c484:	da400417 	ldw	r9,16(sp)
    c488:	1500022e 	bgeu	r2,r20,c494 <__muldf3+0x458>
    c48c:	01000074 	movhi	r4,1
    c490:	4913883a 	add	r9,r9,r4
    c494:	1028d43a 	srli	r20,r2,16
    c498:	1004943a 	slli	r2,r2,16
    c49c:	802cd43a 	srli	r22,r16,16
    c4a0:	843fffcc 	andi	r16,r16,65535
    c4a4:	3cffffcc 	andi	r19,r7,65535
    c4a8:	9009883a 	mov	r4,r18
    c4ac:	800b883a 	mov	r5,r16
    c4b0:	a269883a 	add	r20,r20,r9
    c4b4:	d8c00515 	stw	r3,20(sp)
    c4b8:	d9800715 	stw	r6,28(sp)
    c4bc:	da000615 	stw	r8,24(sp)
    c4c0:	14e7883a 	add	r19,r2,r19
    c4c4:	000072c0 	call	72c <__mulsi3>
    c4c8:	9009883a 	mov	r4,r18
    c4cc:	b00b883a 	mov	r5,r22
    c4d0:	d8800315 	stw	r2,12(sp)
    c4d4:	000072c0 	call	72c <__mulsi3>
    c4d8:	b809883a 	mov	r4,r23
    c4dc:	b00b883a 	mov	r5,r22
    c4e0:	d8800215 	stw	r2,8(sp)
    c4e4:	000072c0 	call	72c <__mulsi3>
    c4e8:	b80b883a 	mov	r5,r23
    c4ec:	8009883a 	mov	r4,r16
    c4f0:	d8800415 	stw	r2,16(sp)
    c4f4:	000072c0 	call	72c <__mulsi3>
    c4f8:	da800317 	ldw	r10,12(sp)
    c4fc:	d9c00217 	ldw	r7,8(sp)
    c500:	d9000017 	ldw	r4,0(sp)
    c504:	502ed43a 	srli	r23,r10,16
    c508:	11c5883a 	add	r2,r2,r7
    c50c:	24e5883a 	add	r18,r4,r19
    c510:	b885883a 	add	r2,r23,r2
    c514:	d8c00517 	ldw	r3,20(sp)
    c518:	d9800717 	ldw	r6,28(sp)
    c51c:	da000617 	ldw	r8,24(sp)
    c520:	da400417 	ldw	r9,16(sp)
    c524:	11c0022e 	bgeu	r2,r7,c530 <__muldf3+0x4f4>
    c528:	01000074 	movhi	r4,1
    c52c:	4913883a 	add	r9,r9,r4
    c530:	100ed43a 	srli	r7,r2,16
    c534:	1004943a 	slli	r2,r2,16
    c538:	55ffffcc 	andi	r23,r10,65535
    c53c:	3a53883a 	add	r9,r7,r9
    c540:	8809883a 	mov	r4,r17
    c544:	800b883a 	mov	r5,r16
    c548:	d8c00515 	stw	r3,20(sp)
    c54c:	d9800715 	stw	r6,28(sp)
    c550:	da000615 	stw	r8,24(sp)
    c554:	da400415 	stw	r9,16(sp)
    c558:	15ef883a 	add	r23,r2,r23
    c55c:	000072c0 	call	72c <__mulsi3>
    c560:	8809883a 	mov	r4,r17
    c564:	b00b883a 	mov	r5,r22
    c568:	d8800215 	stw	r2,8(sp)
    c56c:	000072c0 	call	72c <__mulsi3>
    c570:	b00b883a 	mov	r5,r22
    c574:	a809883a 	mov	r4,r21
    c578:	d8800315 	stw	r2,12(sp)
    c57c:	000072c0 	call	72c <__mulsi3>
    c580:	8009883a 	mov	r4,r16
    c584:	a80b883a 	mov	r5,r21
    c588:	1023883a 	mov	r17,r2
    c58c:	000072c0 	call	72c <__mulsi3>
    c590:	d9c00217 	ldw	r7,8(sp)
    c594:	da800317 	ldw	r10,12(sp)
    c598:	d8c00517 	ldw	r3,20(sp)
    c59c:	3808d43a 	srli	r4,r7,16
    c5a0:	1285883a 	add	r2,r2,r10
    c5a4:	d9800717 	ldw	r6,28(sp)
    c5a8:	2085883a 	add	r2,r4,r2
    c5ac:	da000617 	ldw	r8,24(sp)
    c5b0:	da400417 	ldw	r9,16(sp)
    c5b4:	1280022e 	bgeu	r2,r10,c5c0 <__muldf3+0x584>
    c5b8:	01000074 	movhi	r4,1
    c5bc:	8923883a 	add	r17,r17,r4
    c5c0:	1008943a 	slli	r4,r2,16
    c5c4:	39ffffcc 	andi	r7,r7,65535
    c5c8:	e4b9883a 	add	fp,fp,r18
    c5cc:	21cf883a 	add	r7,r4,r7
    c5d0:	e4e7803a 	cmpltu	r19,fp,r19
    c5d4:	3d0f883a 	add	r7,r7,r20
    c5d8:	bf39883a 	add	fp,r23,fp
    c5dc:	99c9883a 	add	r4,r19,r7
    c5e0:	e5ef803a 	cmpltu	r23,fp,r23
    c5e4:	490b883a 	add	r5,r9,r4
    c5e8:	1004d43a 	srli	r2,r2,16
    c5ec:	b965883a 	add	r18,r23,r5
    c5f0:	24c9803a 	cmpltu	r4,r4,r19
    c5f4:	3d29803a 	cmpltu	r20,r7,r20
    c5f8:	a128b03a 	or	r20,r20,r4
    c5fc:	95ef803a 	cmpltu	r23,r18,r23
    c600:	2a53803a 	cmpltu	r9,r5,r9
    c604:	a0a9883a 	add	r20,r20,r2
    c608:	4deeb03a 	or	r23,r9,r23
    c60c:	a5ef883a 	add	r23,r20,r23
    c610:	bc63883a 	add	r17,r23,r17
    c614:	e004927a 	slli	r2,fp,9
    c618:	d9000117 	ldw	r4,4(sp)
    c61c:	882e927a 	slli	r23,r17,9
    c620:	9022d5fa 	srli	r17,r18,23
    c624:	e038d5fa 	srli	fp,fp,23
    c628:	1104b03a 	or	r2,r2,r4
    c62c:	9024927a 	slli	r18,r18,9
    c630:	1004c03a 	cmpne	r2,r2,zero
    c634:	bc62b03a 	or	r17,r23,r17
    c638:	1738b03a 	or	fp,r2,fp
    c63c:	8880402c 	andhi	r2,r17,256
    c640:	e4a4b03a 	or	r18,fp,r18
    c644:	10000726 	beq	r2,zero,c664 <__muldf3+0x628>
    c648:	9006d07a 	srli	r3,r18,1
    c64c:	880497fa 	slli	r2,r17,31
    c650:	9480004c 	andi	r18,r18,1
    c654:	8822d07a 	srli	r17,r17,1
    c658:	1ca4b03a 	or	r18,r3,r18
    c65c:	14a4b03a 	or	r18,r2,r18
    c660:	4007883a 	mov	r3,r8
    c664:	1880ffc4 	addi	r2,r3,1023
    c668:	0080460e 	bge	zero,r2,c784 <__muldf3+0x748>
    c66c:	910001cc 	andi	r4,r18,7
    c670:	20000726 	beq	r4,zero,c690 <__muldf3+0x654>
    c674:	910003cc 	andi	r4,r18,15
    c678:	01400104 	movi	r5,4
    c67c:	21400426 	beq	r4,r5,c690 <__muldf3+0x654>
    c680:	9149883a 	add	r4,r18,r5
    c684:	24a5803a 	cmpltu	r18,r4,r18
    c688:	8ca3883a 	add	r17,r17,r18
    c68c:	2025883a 	mov	r18,r4
    c690:	8900402c 	andhi	r4,r17,256
    c694:	20000426 	beq	r4,zero,c6a8 <__muldf3+0x66c>
    c698:	18810004 	addi	r2,r3,1024
    c69c:	00ffc034 	movhi	r3,65280
    c6a0:	18ffffc4 	addi	r3,r3,-1
    c6a4:	88e2703a 	and	r17,r17,r3
    c6a8:	00c1ff84 	movi	r3,2046
    c6ac:	18bf1316 	blt	r3,r2,c2fc <__alt_exception_stack_pointer+0xf800c2fc>
    c6b0:	882c977a 	slli	r22,r17,29
    c6b4:	9024d0fa 	srli	r18,r18,3
    c6b8:	8822927a 	slli	r17,r17,9
    c6bc:	1081ffcc 	andi	r2,r2,2047
    c6c0:	b4acb03a 	or	r22,r22,r18
    c6c4:	8820d33a 	srli	r16,r17,12
    c6c8:	3027883a 	mov	r19,r6
    c6cc:	003eba06 	br	c1b8 <__alt_exception_stack_pointer+0xf800c1b8>
    c6d0:	8080022c 	andhi	r2,r16,8
    c6d4:	10000926 	beq	r2,zero,c6fc <__muldf3+0x6c0>
    c6d8:	8880022c 	andhi	r2,r17,8
    c6dc:	1000071e 	bne	r2,zero,c6fc <__muldf3+0x6c0>
    c6e0:	00800434 	movhi	r2,16
    c6e4:	8c000234 	orhi	r16,r17,8
    c6e8:	10bfffc4 	addi	r2,r2,-1
    c6ec:	e027883a 	mov	r19,fp
    c6f0:	80a0703a 	and	r16,r16,r2
    c6f4:	902d883a 	mov	r22,r18
    c6f8:	003f1706 	br	c358 <__alt_exception_stack_pointer+0xf800c358>
    c6fc:	00800434 	movhi	r2,16
    c700:	84000234 	orhi	r16,r16,8
    c704:	10bfffc4 	addi	r2,r2,-1
    c708:	80a0703a 	and	r16,r16,r2
    c70c:	003f1206 	br	c358 <__alt_exception_stack_pointer+0xf800c358>
    c710:	147ff604 	addi	r17,r2,-40
    c714:	3462983a 	sll	r17,r6,r17
    c718:	0025883a 	mov	r18,zero
    c71c:	003ef306 	br	c2ec <__alt_exception_stack_pointer+0xf800c2ec>
    c720:	3009883a 	mov	r4,r6
    c724:	d9400215 	stw	r5,8(sp)
    c728:	d9800715 	stw	r6,28(sp)
    c72c:	da400415 	stw	r9,16(sp)
    c730:	da800315 	stw	r10,12(sp)
    c734:	000d3a80 	call	d3a8 <__clzsi2>
    c738:	10800804 	addi	r2,r2,32
    c73c:	da800317 	ldw	r10,12(sp)
    c740:	da400417 	ldw	r9,16(sp)
    c744:	d9800717 	ldw	r6,28(sp)
    c748:	d9400217 	ldw	r5,8(sp)
    c74c:	003edd06 	br	c2c4 <__alt_exception_stack_pointer+0xf800c2c4>
    c750:	143ff604 	addi	r16,r2,-40
    c754:	ac20983a 	sll	r16,r21,r16
    c758:	002d883a 	mov	r22,zero
    c75c:	003ec106 	br	c264 <__alt_exception_stack_pointer+0xf800c264>
    c760:	d9800715 	stw	r6,28(sp)
    c764:	d9c00215 	stw	r7,8(sp)
    c768:	da400415 	stw	r9,16(sp)
    c76c:	000d3a80 	call	d3a8 <__clzsi2>
    c770:	10800804 	addi	r2,r2,32
    c774:	da400417 	ldw	r9,16(sp)
    c778:	d9c00217 	ldw	r7,8(sp)
    c77c:	d9800717 	ldw	r6,28(sp)
    c780:	003eae06 	br	c23c <__alt_exception_stack_pointer+0xf800c23c>
    c784:	00c00044 	movi	r3,1
    c788:	1887c83a 	sub	r3,r3,r2
    c78c:	01000e04 	movi	r4,56
    c790:	20fe8516 	blt	r4,r3,c1a8 <__alt_exception_stack_pointer+0xf800c1a8>
    c794:	010007c4 	movi	r4,31
    c798:	20c01b16 	blt	r4,r3,c808 <__muldf3+0x7cc>
    c79c:	00800804 	movi	r2,32
    c7a0:	10c5c83a 	sub	r2,r2,r3
    c7a4:	888a983a 	sll	r5,r17,r2
    c7a8:	90c8d83a 	srl	r4,r18,r3
    c7ac:	9084983a 	sll	r2,r18,r2
    c7b0:	88e2d83a 	srl	r17,r17,r3
    c7b4:	2906b03a 	or	r3,r5,r4
    c7b8:	1004c03a 	cmpne	r2,r2,zero
    c7bc:	1886b03a 	or	r3,r3,r2
    c7c0:	188001cc 	andi	r2,r3,7
    c7c4:	10000726 	beq	r2,zero,c7e4 <__muldf3+0x7a8>
    c7c8:	188003cc 	andi	r2,r3,15
    c7cc:	01000104 	movi	r4,4
    c7d0:	11000426 	beq	r2,r4,c7e4 <__muldf3+0x7a8>
    c7d4:	1805883a 	mov	r2,r3
    c7d8:	10c00104 	addi	r3,r2,4
    c7dc:	1885803a 	cmpltu	r2,r3,r2
    c7e0:	88a3883a 	add	r17,r17,r2
    c7e4:	8880202c 	andhi	r2,r17,128
    c7e8:	10001c26 	beq	r2,zero,c85c <__muldf3+0x820>
    c7ec:	3027883a 	mov	r19,r6
    c7f0:	00800044 	movi	r2,1
    c7f4:	0021883a 	mov	r16,zero
    c7f8:	002d883a 	mov	r22,zero
    c7fc:	003e6e06 	br	c1b8 <__alt_exception_stack_pointer+0xf800c1b8>
    c800:	4007883a 	mov	r3,r8
    c804:	003f9706 	br	c664 <__alt_exception_stack_pointer+0xf800c664>
    c808:	017ff844 	movi	r5,-31
    c80c:	2885c83a 	sub	r2,r5,r2
    c810:	888ad83a 	srl	r5,r17,r2
    c814:	00800804 	movi	r2,32
    c818:	18801a26 	beq	r3,r2,c884 <__muldf3+0x848>
    c81c:	01001004 	movi	r4,64
    c820:	20c7c83a 	sub	r3,r4,r3
    c824:	88e2983a 	sll	r17,r17,r3
    c828:	8ca4b03a 	or	r18,r17,r18
    c82c:	9004c03a 	cmpne	r2,r18,zero
    c830:	2884b03a 	or	r2,r5,r2
    c834:	144001cc 	andi	r17,r2,7
    c838:	88000d1e 	bne	r17,zero,c870 <__muldf3+0x834>
    c83c:	0021883a 	mov	r16,zero
    c840:	102cd0fa 	srli	r22,r2,3
    c844:	3027883a 	mov	r19,r6
    c848:	0005883a 	mov	r2,zero
    c84c:	b46cb03a 	or	r22,r22,r17
    c850:	003e5906 	br	c1b8 <__alt_exception_stack_pointer+0xf800c1b8>
    c854:	1007883a 	mov	r3,r2
    c858:	0023883a 	mov	r17,zero
    c85c:	8820927a 	slli	r16,r17,9
    c860:	1805883a 	mov	r2,r3
    c864:	8822977a 	slli	r17,r17,29
    c868:	8020d33a 	srli	r16,r16,12
    c86c:	003ff406 	br	c840 <__alt_exception_stack_pointer+0xf800c840>
    c870:	10c003cc 	andi	r3,r2,15
    c874:	01000104 	movi	r4,4
    c878:	193ff626 	beq	r3,r4,c854 <__alt_exception_stack_pointer+0xf800c854>
    c87c:	0023883a 	mov	r17,zero
    c880:	003fd506 	br	c7d8 <__alt_exception_stack_pointer+0xf800c7d8>
    c884:	0023883a 	mov	r17,zero
    c888:	003fe706 	br	c828 <__alt_exception_stack_pointer+0xf800c828>
    c88c:	00800434 	movhi	r2,16
    c890:	8c000234 	orhi	r16,r17,8
    c894:	10bfffc4 	addi	r2,r2,-1
    c898:	3027883a 	mov	r19,r6
    c89c:	80a0703a 	and	r16,r16,r2
    c8a0:	902d883a 	mov	r22,r18
    c8a4:	003eac06 	br	c358 <__alt_exception_stack_pointer+0xf800c358>

0000c8a8 <__subdf3>:
    c8a8:	02000434 	movhi	r8,16
    c8ac:	423fffc4 	addi	r8,r8,-1
    c8b0:	defffb04 	addi	sp,sp,-20
    c8b4:	2a14703a 	and	r10,r5,r8
    c8b8:	3812d53a 	srli	r9,r7,20
    c8bc:	3a10703a 	and	r8,r7,r8
    c8c0:	2006d77a 	srli	r3,r4,29
    c8c4:	3004d77a 	srli	r2,r6,29
    c8c8:	dc000015 	stw	r16,0(sp)
    c8cc:	501490fa 	slli	r10,r10,3
    c8d0:	2820d53a 	srli	r16,r5,20
    c8d4:	401090fa 	slli	r8,r8,3
    c8d8:	dc800215 	stw	r18,8(sp)
    c8dc:	dc400115 	stw	r17,4(sp)
    c8e0:	dfc00415 	stw	ra,16(sp)
    c8e4:	202290fa 	slli	r17,r4,3
    c8e8:	dcc00315 	stw	r19,12(sp)
    c8ec:	4a41ffcc 	andi	r9,r9,2047
    c8f0:	0101ffc4 	movi	r4,2047
    c8f4:	2824d7fa 	srli	r18,r5,31
    c8f8:	8401ffcc 	andi	r16,r16,2047
    c8fc:	50c6b03a 	or	r3,r10,r3
    c900:	380ed7fa 	srli	r7,r7,31
    c904:	408ab03a 	or	r5,r8,r2
    c908:	300c90fa 	slli	r6,r6,3
    c90c:	49009626 	beq	r9,r4,cb68 <__subdf3+0x2c0>
    c910:	39c0005c 	xori	r7,r7,1
    c914:	8245c83a 	sub	r2,r16,r9
    c918:	3c807426 	beq	r7,r18,caec <__subdf3+0x244>
    c91c:	0080af0e 	bge	zero,r2,cbdc <__subdf3+0x334>
    c920:	48002a1e 	bne	r9,zero,c9cc <__subdf3+0x124>
    c924:	2988b03a 	or	r4,r5,r6
    c928:	20009a1e 	bne	r4,zero,cb94 <__subdf3+0x2ec>
    c92c:	888001cc 	andi	r2,r17,7
    c930:	10000726 	beq	r2,zero,c950 <__subdf3+0xa8>
    c934:	888003cc 	andi	r2,r17,15
    c938:	01000104 	movi	r4,4
    c93c:	11000426 	beq	r2,r4,c950 <__subdf3+0xa8>
    c940:	890b883a 	add	r5,r17,r4
    c944:	2c63803a 	cmpltu	r17,r5,r17
    c948:	1c47883a 	add	r3,r3,r17
    c94c:	2823883a 	mov	r17,r5
    c950:	1880202c 	andhi	r2,r3,128
    c954:	10005926 	beq	r2,zero,cabc <__subdf3+0x214>
    c958:	84000044 	addi	r16,r16,1
    c95c:	0081ffc4 	movi	r2,2047
    c960:	8080be26 	beq	r16,r2,cc5c <__subdf3+0x3b4>
    c964:	017fe034 	movhi	r5,65408
    c968:	297fffc4 	addi	r5,r5,-1
    c96c:	1946703a 	and	r3,r3,r5
    c970:	1804977a 	slli	r2,r3,29
    c974:	1806927a 	slli	r3,r3,9
    c978:	8822d0fa 	srli	r17,r17,3
    c97c:	8401ffcc 	andi	r16,r16,2047
    c980:	180ad33a 	srli	r5,r3,12
    c984:	9100004c 	andi	r4,r18,1
    c988:	1444b03a 	or	r2,r2,r17
    c98c:	80c1ffcc 	andi	r3,r16,2047
    c990:	1820953a 	slli	r16,r3,20
    c994:	20c03fcc 	andi	r3,r4,255
    c998:	180897fa 	slli	r4,r3,31
    c99c:	00c00434 	movhi	r3,16
    c9a0:	18ffffc4 	addi	r3,r3,-1
    c9a4:	28c6703a 	and	r3,r5,r3
    c9a8:	1c06b03a 	or	r3,r3,r16
    c9ac:	1906b03a 	or	r3,r3,r4
    c9b0:	dfc00417 	ldw	ra,16(sp)
    c9b4:	dcc00317 	ldw	r19,12(sp)
    c9b8:	dc800217 	ldw	r18,8(sp)
    c9bc:	dc400117 	ldw	r17,4(sp)
    c9c0:	dc000017 	ldw	r16,0(sp)
    c9c4:	dec00504 	addi	sp,sp,20
    c9c8:	f800283a 	ret
    c9cc:	0101ffc4 	movi	r4,2047
    c9d0:	813fd626 	beq	r16,r4,c92c <__alt_exception_stack_pointer+0xf800c92c>
    c9d4:	29402034 	orhi	r5,r5,128
    c9d8:	01000e04 	movi	r4,56
    c9dc:	2080a316 	blt	r4,r2,cc6c <__subdf3+0x3c4>
    c9e0:	010007c4 	movi	r4,31
    c9e4:	2080c616 	blt	r4,r2,cd00 <__subdf3+0x458>
    c9e8:	01000804 	movi	r4,32
    c9ec:	2089c83a 	sub	r4,r4,r2
    c9f0:	2910983a 	sll	r8,r5,r4
    c9f4:	308ed83a 	srl	r7,r6,r2
    c9f8:	3108983a 	sll	r4,r6,r4
    c9fc:	2884d83a 	srl	r2,r5,r2
    ca00:	41ccb03a 	or	r6,r8,r7
    ca04:	2008c03a 	cmpne	r4,r4,zero
    ca08:	310cb03a 	or	r6,r6,r4
    ca0c:	898dc83a 	sub	r6,r17,r6
    ca10:	89a3803a 	cmpltu	r17,r17,r6
    ca14:	1887c83a 	sub	r3,r3,r2
    ca18:	1c47c83a 	sub	r3,r3,r17
    ca1c:	3023883a 	mov	r17,r6
    ca20:	1880202c 	andhi	r2,r3,128
    ca24:	10002326 	beq	r2,zero,cab4 <__subdf3+0x20c>
    ca28:	04c02034 	movhi	r19,128
    ca2c:	9cffffc4 	addi	r19,r19,-1
    ca30:	1ce6703a 	and	r19,r3,r19
    ca34:	98007a26 	beq	r19,zero,cc20 <__subdf3+0x378>
    ca38:	9809883a 	mov	r4,r19
    ca3c:	000d3a80 	call	d3a8 <__clzsi2>
    ca40:	113ffe04 	addi	r4,r2,-8
    ca44:	00c007c4 	movi	r3,31
    ca48:	19007b16 	blt	r3,r4,cc38 <__subdf3+0x390>
    ca4c:	00800804 	movi	r2,32
    ca50:	1105c83a 	sub	r2,r2,r4
    ca54:	8884d83a 	srl	r2,r17,r2
    ca58:	9906983a 	sll	r3,r19,r4
    ca5c:	8922983a 	sll	r17,r17,r4
    ca60:	10c4b03a 	or	r2,r2,r3
    ca64:	24007816 	blt	r4,r16,cc48 <__subdf3+0x3a0>
    ca68:	2421c83a 	sub	r16,r4,r16
    ca6c:	80c00044 	addi	r3,r16,1
    ca70:	010007c4 	movi	r4,31
    ca74:	20c09516 	blt	r4,r3,cccc <__subdf3+0x424>
    ca78:	01400804 	movi	r5,32
    ca7c:	28cbc83a 	sub	r5,r5,r3
    ca80:	88c8d83a 	srl	r4,r17,r3
    ca84:	8962983a 	sll	r17,r17,r5
    ca88:	114a983a 	sll	r5,r2,r5
    ca8c:	10c6d83a 	srl	r3,r2,r3
    ca90:	8804c03a 	cmpne	r2,r17,zero
    ca94:	290ab03a 	or	r5,r5,r4
    ca98:	28a2b03a 	or	r17,r5,r2
    ca9c:	0021883a 	mov	r16,zero
    caa0:	003fa206 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    caa4:	2090b03a 	or	r8,r4,r2
    caa8:	40018e26 	beq	r8,zero,d0e4 <__subdf3+0x83c>
    caac:	1007883a 	mov	r3,r2
    cab0:	2023883a 	mov	r17,r4
    cab4:	888001cc 	andi	r2,r17,7
    cab8:	103f9e1e 	bne	r2,zero,c934 <__alt_exception_stack_pointer+0xf800c934>
    cabc:	1804977a 	slli	r2,r3,29
    cac0:	8822d0fa 	srli	r17,r17,3
    cac4:	1810d0fa 	srli	r8,r3,3
    cac8:	9100004c 	andi	r4,r18,1
    cacc:	1444b03a 	or	r2,r2,r17
    cad0:	00c1ffc4 	movi	r3,2047
    cad4:	80c02826 	beq	r16,r3,cb78 <__subdf3+0x2d0>
    cad8:	01400434 	movhi	r5,16
    cadc:	297fffc4 	addi	r5,r5,-1
    cae0:	80e0703a 	and	r16,r16,r3
    cae4:	414a703a 	and	r5,r8,r5
    cae8:	003fa806 	br	c98c <__alt_exception_stack_pointer+0xf800c98c>
    caec:	0080630e 	bge	zero,r2,cc7c <__subdf3+0x3d4>
    caf0:	48003026 	beq	r9,zero,cbb4 <__subdf3+0x30c>
    caf4:	0101ffc4 	movi	r4,2047
    caf8:	813f8c26 	beq	r16,r4,c92c <__alt_exception_stack_pointer+0xf800c92c>
    cafc:	29402034 	orhi	r5,r5,128
    cb00:	01000e04 	movi	r4,56
    cb04:	2080a90e 	bge	r4,r2,cdac <__subdf3+0x504>
    cb08:	298cb03a 	or	r6,r5,r6
    cb0c:	3012c03a 	cmpne	r9,r6,zero
    cb10:	0005883a 	mov	r2,zero
    cb14:	4c53883a 	add	r9,r9,r17
    cb18:	4c63803a 	cmpltu	r17,r9,r17
    cb1c:	10c7883a 	add	r3,r2,r3
    cb20:	88c7883a 	add	r3,r17,r3
    cb24:	4823883a 	mov	r17,r9
    cb28:	1880202c 	andhi	r2,r3,128
    cb2c:	1000d026 	beq	r2,zero,ce70 <__subdf3+0x5c8>
    cb30:	84000044 	addi	r16,r16,1
    cb34:	0081ffc4 	movi	r2,2047
    cb38:	8080fe26 	beq	r16,r2,cf34 <__subdf3+0x68c>
    cb3c:	00bfe034 	movhi	r2,65408
    cb40:	10bfffc4 	addi	r2,r2,-1
    cb44:	1886703a 	and	r3,r3,r2
    cb48:	880ad07a 	srli	r5,r17,1
    cb4c:	180497fa 	slli	r2,r3,31
    cb50:	8900004c 	andi	r4,r17,1
    cb54:	2922b03a 	or	r17,r5,r4
    cb58:	1806d07a 	srli	r3,r3,1
    cb5c:	1462b03a 	or	r17,r2,r17
    cb60:	3825883a 	mov	r18,r7
    cb64:	003f7106 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    cb68:	2984b03a 	or	r2,r5,r6
    cb6c:	103f6826 	beq	r2,zero,c910 <__alt_exception_stack_pointer+0xf800c910>
    cb70:	39c03fcc 	andi	r7,r7,255
    cb74:	003f6706 	br	c914 <__alt_exception_stack_pointer+0xf800c914>
    cb78:	4086b03a 	or	r3,r8,r2
    cb7c:	18015226 	beq	r3,zero,d0c8 <__subdf3+0x820>
    cb80:	00c00434 	movhi	r3,16
    cb84:	41400234 	orhi	r5,r8,8
    cb88:	18ffffc4 	addi	r3,r3,-1
    cb8c:	28ca703a 	and	r5,r5,r3
    cb90:	003f7e06 	br	c98c <__alt_exception_stack_pointer+0xf800c98c>
    cb94:	10bfffc4 	addi	r2,r2,-1
    cb98:	1000491e 	bne	r2,zero,ccc0 <__subdf3+0x418>
    cb9c:	898fc83a 	sub	r7,r17,r6
    cba0:	89e3803a 	cmpltu	r17,r17,r7
    cba4:	1947c83a 	sub	r3,r3,r5
    cba8:	1c47c83a 	sub	r3,r3,r17
    cbac:	3823883a 	mov	r17,r7
    cbb0:	003f9b06 	br	ca20 <__alt_exception_stack_pointer+0xf800ca20>
    cbb4:	2988b03a 	or	r4,r5,r6
    cbb8:	203f5c26 	beq	r4,zero,c92c <__alt_exception_stack_pointer+0xf800c92c>
    cbbc:	10bfffc4 	addi	r2,r2,-1
    cbc0:	1000931e 	bne	r2,zero,ce10 <__subdf3+0x568>
    cbc4:	898d883a 	add	r6,r17,r6
    cbc8:	3463803a 	cmpltu	r17,r6,r17
    cbcc:	1947883a 	add	r3,r3,r5
    cbd0:	88c7883a 	add	r3,r17,r3
    cbd4:	3023883a 	mov	r17,r6
    cbd8:	003fd306 	br	cb28 <__alt_exception_stack_pointer+0xf800cb28>
    cbdc:	1000541e 	bne	r2,zero,cd30 <__subdf3+0x488>
    cbe0:	80800044 	addi	r2,r16,1
    cbe4:	1081ffcc 	andi	r2,r2,2047
    cbe8:	01000044 	movi	r4,1
    cbec:	2080a20e 	bge	r4,r2,ce78 <__subdf3+0x5d0>
    cbf0:	8989c83a 	sub	r4,r17,r6
    cbf4:	8905803a 	cmpltu	r2,r17,r4
    cbf8:	1967c83a 	sub	r19,r3,r5
    cbfc:	98a7c83a 	sub	r19,r19,r2
    cc00:	9880202c 	andhi	r2,r19,128
    cc04:	10006326 	beq	r2,zero,cd94 <__subdf3+0x4ec>
    cc08:	3463c83a 	sub	r17,r6,r17
    cc0c:	28c7c83a 	sub	r3,r5,r3
    cc10:	344d803a 	cmpltu	r6,r6,r17
    cc14:	19a7c83a 	sub	r19,r3,r6
    cc18:	3825883a 	mov	r18,r7
    cc1c:	983f861e 	bne	r19,zero,ca38 <__alt_exception_stack_pointer+0xf800ca38>
    cc20:	8809883a 	mov	r4,r17
    cc24:	000d3a80 	call	d3a8 <__clzsi2>
    cc28:	10800804 	addi	r2,r2,32
    cc2c:	113ffe04 	addi	r4,r2,-8
    cc30:	00c007c4 	movi	r3,31
    cc34:	193f850e 	bge	r3,r4,ca4c <__alt_exception_stack_pointer+0xf800ca4c>
    cc38:	10bff604 	addi	r2,r2,-40
    cc3c:	8884983a 	sll	r2,r17,r2
    cc40:	0023883a 	mov	r17,zero
    cc44:	243f880e 	bge	r4,r16,ca68 <__alt_exception_stack_pointer+0xf800ca68>
    cc48:	00ffe034 	movhi	r3,65408
    cc4c:	18ffffc4 	addi	r3,r3,-1
    cc50:	8121c83a 	sub	r16,r16,r4
    cc54:	10c6703a 	and	r3,r2,r3
    cc58:	003f3406 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    cc5c:	9100004c 	andi	r4,r18,1
    cc60:	000b883a 	mov	r5,zero
    cc64:	0005883a 	mov	r2,zero
    cc68:	003f4806 	br	c98c <__alt_exception_stack_pointer+0xf800c98c>
    cc6c:	298cb03a 	or	r6,r5,r6
    cc70:	300cc03a 	cmpne	r6,r6,zero
    cc74:	0005883a 	mov	r2,zero
    cc78:	003f6406 	br	ca0c <__alt_exception_stack_pointer+0xf800ca0c>
    cc7c:	10009a1e 	bne	r2,zero,cee8 <__subdf3+0x640>
    cc80:	82400044 	addi	r9,r16,1
    cc84:	4881ffcc 	andi	r2,r9,2047
    cc88:	02800044 	movi	r10,1
    cc8c:	5080670e 	bge	r10,r2,ce2c <__subdf3+0x584>
    cc90:	0081ffc4 	movi	r2,2047
    cc94:	4880af26 	beq	r9,r2,cf54 <__subdf3+0x6ac>
    cc98:	898d883a 	add	r6,r17,r6
    cc9c:	1945883a 	add	r2,r3,r5
    cca0:	3447803a 	cmpltu	r3,r6,r17
    cca4:	1887883a 	add	r3,r3,r2
    cca8:	182297fa 	slli	r17,r3,31
    ccac:	300cd07a 	srli	r6,r6,1
    ccb0:	1806d07a 	srli	r3,r3,1
    ccb4:	4821883a 	mov	r16,r9
    ccb8:	89a2b03a 	or	r17,r17,r6
    ccbc:	003f1b06 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    ccc0:	0101ffc4 	movi	r4,2047
    ccc4:	813f441e 	bne	r16,r4,c9d8 <__alt_exception_stack_pointer+0xf800c9d8>
    ccc8:	003f1806 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    cccc:	843ff844 	addi	r16,r16,-31
    ccd0:	01400804 	movi	r5,32
    ccd4:	1408d83a 	srl	r4,r2,r16
    ccd8:	19405026 	beq	r3,r5,ce1c <__subdf3+0x574>
    ccdc:	01401004 	movi	r5,64
    cce0:	28c7c83a 	sub	r3,r5,r3
    cce4:	10c4983a 	sll	r2,r2,r3
    cce8:	88a2b03a 	or	r17,r17,r2
    ccec:	8822c03a 	cmpne	r17,r17,zero
    ccf0:	2462b03a 	or	r17,r4,r17
    ccf4:	0007883a 	mov	r3,zero
    ccf8:	0021883a 	mov	r16,zero
    ccfc:	003f6d06 	br	cab4 <__alt_exception_stack_pointer+0xf800cab4>
    cd00:	11fff804 	addi	r7,r2,-32
    cd04:	01000804 	movi	r4,32
    cd08:	29ced83a 	srl	r7,r5,r7
    cd0c:	11004526 	beq	r2,r4,ce24 <__subdf3+0x57c>
    cd10:	01001004 	movi	r4,64
    cd14:	2089c83a 	sub	r4,r4,r2
    cd18:	2904983a 	sll	r2,r5,r4
    cd1c:	118cb03a 	or	r6,r2,r6
    cd20:	300cc03a 	cmpne	r6,r6,zero
    cd24:	398cb03a 	or	r6,r7,r6
    cd28:	0005883a 	mov	r2,zero
    cd2c:	003f3706 	br	ca0c <__alt_exception_stack_pointer+0xf800ca0c>
    cd30:	80002a26 	beq	r16,zero,cddc <__subdf3+0x534>
    cd34:	0101ffc4 	movi	r4,2047
    cd38:	49006626 	beq	r9,r4,ced4 <__subdf3+0x62c>
    cd3c:	0085c83a 	sub	r2,zero,r2
    cd40:	18c02034 	orhi	r3,r3,128
    cd44:	01000e04 	movi	r4,56
    cd48:	20807e16 	blt	r4,r2,cf44 <__subdf3+0x69c>
    cd4c:	010007c4 	movi	r4,31
    cd50:	2080e716 	blt	r4,r2,d0f0 <__subdf3+0x848>
    cd54:	01000804 	movi	r4,32
    cd58:	2089c83a 	sub	r4,r4,r2
    cd5c:	1914983a 	sll	r10,r3,r4
    cd60:	8890d83a 	srl	r8,r17,r2
    cd64:	8908983a 	sll	r4,r17,r4
    cd68:	1884d83a 	srl	r2,r3,r2
    cd6c:	5222b03a 	or	r17,r10,r8
    cd70:	2006c03a 	cmpne	r3,r4,zero
    cd74:	88e2b03a 	or	r17,r17,r3
    cd78:	3463c83a 	sub	r17,r6,r17
    cd7c:	2885c83a 	sub	r2,r5,r2
    cd80:	344d803a 	cmpltu	r6,r6,r17
    cd84:	1187c83a 	sub	r3,r2,r6
    cd88:	4821883a 	mov	r16,r9
    cd8c:	3825883a 	mov	r18,r7
    cd90:	003f2306 	br	ca20 <__alt_exception_stack_pointer+0xf800ca20>
    cd94:	24d0b03a 	or	r8,r4,r19
    cd98:	40001b1e 	bne	r8,zero,ce08 <__subdf3+0x560>
    cd9c:	0005883a 	mov	r2,zero
    cda0:	0009883a 	mov	r4,zero
    cda4:	0021883a 	mov	r16,zero
    cda8:	003f4906 	br	cad0 <__alt_exception_stack_pointer+0xf800cad0>
    cdac:	010007c4 	movi	r4,31
    cdb0:	20803a16 	blt	r4,r2,ce9c <__subdf3+0x5f4>
    cdb4:	01000804 	movi	r4,32
    cdb8:	2089c83a 	sub	r4,r4,r2
    cdbc:	2912983a 	sll	r9,r5,r4
    cdc0:	3090d83a 	srl	r8,r6,r2
    cdc4:	3108983a 	sll	r4,r6,r4
    cdc8:	2884d83a 	srl	r2,r5,r2
    cdcc:	4a12b03a 	or	r9,r9,r8
    cdd0:	2008c03a 	cmpne	r4,r4,zero
    cdd4:	4912b03a 	or	r9,r9,r4
    cdd8:	003f4e06 	br	cb14 <__alt_exception_stack_pointer+0xf800cb14>
    cddc:	1c48b03a 	or	r4,r3,r17
    cde0:	20003c26 	beq	r4,zero,ced4 <__subdf3+0x62c>
    cde4:	0084303a 	nor	r2,zero,r2
    cde8:	1000381e 	bne	r2,zero,cecc <__subdf3+0x624>
    cdec:	3463c83a 	sub	r17,r6,r17
    cdf0:	28c5c83a 	sub	r2,r5,r3
    cdf4:	344d803a 	cmpltu	r6,r6,r17
    cdf8:	1187c83a 	sub	r3,r2,r6
    cdfc:	4821883a 	mov	r16,r9
    ce00:	3825883a 	mov	r18,r7
    ce04:	003f0606 	br	ca20 <__alt_exception_stack_pointer+0xf800ca20>
    ce08:	2023883a 	mov	r17,r4
    ce0c:	003f0906 	br	ca34 <__alt_exception_stack_pointer+0xf800ca34>
    ce10:	0101ffc4 	movi	r4,2047
    ce14:	813f3a1e 	bne	r16,r4,cb00 <__alt_exception_stack_pointer+0xf800cb00>
    ce18:	003ec406 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    ce1c:	0005883a 	mov	r2,zero
    ce20:	003fb106 	br	cce8 <__alt_exception_stack_pointer+0xf800cce8>
    ce24:	0005883a 	mov	r2,zero
    ce28:	003fbc06 	br	cd1c <__alt_exception_stack_pointer+0xf800cd1c>
    ce2c:	1c44b03a 	or	r2,r3,r17
    ce30:	80008e1e 	bne	r16,zero,d06c <__subdf3+0x7c4>
    ce34:	1000c826 	beq	r2,zero,d158 <__subdf3+0x8b0>
    ce38:	2984b03a 	or	r2,r5,r6
    ce3c:	103ebb26 	beq	r2,zero,c92c <__alt_exception_stack_pointer+0xf800c92c>
    ce40:	8989883a 	add	r4,r17,r6
    ce44:	1945883a 	add	r2,r3,r5
    ce48:	2447803a 	cmpltu	r3,r4,r17
    ce4c:	1887883a 	add	r3,r3,r2
    ce50:	1880202c 	andhi	r2,r3,128
    ce54:	2023883a 	mov	r17,r4
    ce58:	103f1626 	beq	r2,zero,cab4 <__alt_exception_stack_pointer+0xf800cab4>
    ce5c:	00bfe034 	movhi	r2,65408
    ce60:	10bfffc4 	addi	r2,r2,-1
    ce64:	5021883a 	mov	r16,r10
    ce68:	1886703a 	and	r3,r3,r2
    ce6c:	003eaf06 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    ce70:	3825883a 	mov	r18,r7
    ce74:	003f0f06 	br	cab4 <__alt_exception_stack_pointer+0xf800cab4>
    ce78:	1c44b03a 	or	r2,r3,r17
    ce7c:	8000251e 	bne	r16,zero,cf14 <__subdf3+0x66c>
    ce80:	1000661e 	bne	r2,zero,d01c <__subdf3+0x774>
    ce84:	2990b03a 	or	r8,r5,r6
    ce88:	40009626 	beq	r8,zero,d0e4 <__subdf3+0x83c>
    ce8c:	2807883a 	mov	r3,r5
    ce90:	3023883a 	mov	r17,r6
    ce94:	3825883a 	mov	r18,r7
    ce98:	003ea406 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    ce9c:	127ff804 	addi	r9,r2,-32
    cea0:	01000804 	movi	r4,32
    cea4:	2a52d83a 	srl	r9,r5,r9
    cea8:	11008c26 	beq	r2,r4,d0dc <__subdf3+0x834>
    ceac:	01001004 	movi	r4,64
    ceb0:	2085c83a 	sub	r2,r4,r2
    ceb4:	2884983a 	sll	r2,r5,r2
    ceb8:	118cb03a 	or	r6,r2,r6
    cebc:	300cc03a 	cmpne	r6,r6,zero
    cec0:	4992b03a 	or	r9,r9,r6
    cec4:	0005883a 	mov	r2,zero
    cec8:	003f1206 	br	cb14 <__alt_exception_stack_pointer+0xf800cb14>
    cecc:	0101ffc4 	movi	r4,2047
    ced0:	493f9c1e 	bne	r9,r4,cd44 <__alt_exception_stack_pointer+0xf800cd44>
    ced4:	2807883a 	mov	r3,r5
    ced8:	3023883a 	mov	r17,r6
    cedc:	4821883a 	mov	r16,r9
    cee0:	3825883a 	mov	r18,r7
    cee4:	003e9106 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    cee8:	80001f1e 	bne	r16,zero,cf68 <__subdf3+0x6c0>
    ceec:	1c48b03a 	or	r4,r3,r17
    cef0:	20005a26 	beq	r4,zero,d05c <__subdf3+0x7b4>
    cef4:	0084303a 	nor	r2,zero,r2
    cef8:	1000561e 	bne	r2,zero,d054 <__subdf3+0x7ac>
    cefc:	89a3883a 	add	r17,r17,r6
    cf00:	1945883a 	add	r2,r3,r5
    cf04:	898d803a 	cmpltu	r6,r17,r6
    cf08:	3087883a 	add	r3,r6,r2
    cf0c:	4821883a 	mov	r16,r9
    cf10:	003f0506 	br	cb28 <__alt_exception_stack_pointer+0xf800cb28>
    cf14:	10002b1e 	bne	r2,zero,cfc4 <__subdf3+0x71c>
    cf18:	2984b03a 	or	r2,r5,r6
    cf1c:	10008026 	beq	r2,zero,d120 <__subdf3+0x878>
    cf20:	2807883a 	mov	r3,r5
    cf24:	3023883a 	mov	r17,r6
    cf28:	3825883a 	mov	r18,r7
    cf2c:	0401ffc4 	movi	r16,2047
    cf30:	003e7e06 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    cf34:	3809883a 	mov	r4,r7
    cf38:	0011883a 	mov	r8,zero
    cf3c:	0005883a 	mov	r2,zero
    cf40:	003ee306 	br	cad0 <__alt_exception_stack_pointer+0xf800cad0>
    cf44:	1c62b03a 	or	r17,r3,r17
    cf48:	8822c03a 	cmpne	r17,r17,zero
    cf4c:	0005883a 	mov	r2,zero
    cf50:	003f8906 	br	cd78 <__alt_exception_stack_pointer+0xf800cd78>
    cf54:	3809883a 	mov	r4,r7
    cf58:	4821883a 	mov	r16,r9
    cf5c:	0011883a 	mov	r8,zero
    cf60:	0005883a 	mov	r2,zero
    cf64:	003eda06 	br	cad0 <__alt_exception_stack_pointer+0xf800cad0>
    cf68:	0101ffc4 	movi	r4,2047
    cf6c:	49003b26 	beq	r9,r4,d05c <__subdf3+0x7b4>
    cf70:	0085c83a 	sub	r2,zero,r2
    cf74:	18c02034 	orhi	r3,r3,128
    cf78:	01000e04 	movi	r4,56
    cf7c:	20806e16 	blt	r4,r2,d138 <__subdf3+0x890>
    cf80:	010007c4 	movi	r4,31
    cf84:	20807716 	blt	r4,r2,d164 <__subdf3+0x8bc>
    cf88:	01000804 	movi	r4,32
    cf8c:	2089c83a 	sub	r4,r4,r2
    cf90:	1914983a 	sll	r10,r3,r4
    cf94:	8890d83a 	srl	r8,r17,r2
    cf98:	8908983a 	sll	r4,r17,r4
    cf9c:	1884d83a 	srl	r2,r3,r2
    cfa0:	5222b03a 	or	r17,r10,r8
    cfa4:	2006c03a 	cmpne	r3,r4,zero
    cfa8:	88e2b03a 	or	r17,r17,r3
    cfac:	89a3883a 	add	r17,r17,r6
    cfb0:	1145883a 	add	r2,r2,r5
    cfb4:	898d803a 	cmpltu	r6,r17,r6
    cfb8:	3087883a 	add	r3,r6,r2
    cfbc:	4821883a 	mov	r16,r9
    cfc0:	003ed906 	br	cb28 <__alt_exception_stack_pointer+0xf800cb28>
    cfc4:	2984b03a 	or	r2,r5,r6
    cfc8:	10004226 	beq	r2,zero,d0d4 <__subdf3+0x82c>
    cfcc:	1808d0fa 	srli	r4,r3,3
    cfd0:	8822d0fa 	srli	r17,r17,3
    cfd4:	1806977a 	slli	r3,r3,29
    cfd8:	2080022c 	andhi	r2,r4,8
    cfdc:	1c62b03a 	or	r17,r3,r17
    cfe0:	10000826 	beq	r2,zero,d004 <__subdf3+0x75c>
    cfe4:	2812d0fa 	srli	r9,r5,3
    cfe8:	4880022c 	andhi	r2,r9,8
    cfec:	1000051e 	bne	r2,zero,d004 <__subdf3+0x75c>
    cff0:	300cd0fa 	srli	r6,r6,3
    cff4:	2804977a 	slli	r2,r5,29
    cff8:	4809883a 	mov	r4,r9
    cffc:	3825883a 	mov	r18,r7
    d000:	11a2b03a 	or	r17,r2,r6
    d004:	8806d77a 	srli	r3,r17,29
    d008:	200890fa 	slli	r4,r4,3
    d00c:	882290fa 	slli	r17,r17,3
    d010:	0401ffc4 	movi	r16,2047
    d014:	1906b03a 	or	r3,r3,r4
    d018:	003e4406 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d01c:	2984b03a 	or	r2,r5,r6
    d020:	103e4226 	beq	r2,zero,c92c <__alt_exception_stack_pointer+0xf800c92c>
    d024:	8989c83a 	sub	r4,r17,r6
    d028:	8911803a 	cmpltu	r8,r17,r4
    d02c:	1945c83a 	sub	r2,r3,r5
    d030:	1205c83a 	sub	r2,r2,r8
    d034:	1200202c 	andhi	r8,r2,128
    d038:	403e9a26 	beq	r8,zero,caa4 <__alt_exception_stack_pointer+0xf800caa4>
    d03c:	3463c83a 	sub	r17,r6,r17
    d040:	28c5c83a 	sub	r2,r5,r3
    d044:	344d803a 	cmpltu	r6,r6,r17
    d048:	1187c83a 	sub	r3,r2,r6
    d04c:	3825883a 	mov	r18,r7
    d050:	003e3606 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d054:	0101ffc4 	movi	r4,2047
    d058:	493fc71e 	bne	r9,r4,cf78 <__alt_exception_stack_pointer+0xf800cf78>
    d05c:	2807883a 	mov	r3,r5
    d060:	3023883a 	mov	r17,r6
    d064:	4821883a 	mov	r16,r9
    d068:	003e3006 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d06c:	10003626 	beq	r2,zero,d148 <__subdf3+0x8a0>
    d070:	2984b03a 	or	r2,r5,r6
    d074:	10001726 	beq	r2,zero,d0d4 <__subdf3+0x82c>
    d078:	1808d0fa 	srli	r4,r3,3
    d07c:	8822d0fa 	srli	r17,r17,3
    d080:	1806977a 	slli	r3,r3,29
    d084:	2080022c 	andhi	r2,r4,8
    d088:	1c62b03a 	or	r17,r3,r17
    d08c:	10000726 	beq	r2,zero,d0ac <__subdf3+0x804>
    d090:	2812d0fa 	srli	r9,r5,3
    d094:	4880022c 	andhi	r2,r9,8
    d098:	1000041e 	bne	r2,zero,d0ac <__subdf3+0x804>
    d09c:	300cd0fa 	srli	r6,r6,3
    d0a0:	2804977a 	slli	r2,r5,29
    d0a4:	4809883a 	mov	r4,r9
    d0a8:	11a2b03a 	or	r17,r2,r6
    d0ac:	8806d77a 	srli	r3,r17,29
    d0b0:	200890fa 	slli	r4,r4,3
    d0b4:	882290fa 	slli	r17,r17,3
    d0b8:	3825883a 	mov	r18,r7
    d0bc:	1906b03a 	or	r3,r3,r4
    d0c0:	0401ffc4 	movi	r16,2047
    d0c4:	003e1906 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d0c8:	000b883a 	mov	r5,zero
    d0cc:	0005883a 	mov	r2,zero
    d0d0:	003e2e06 	br	c98c <__alt_exception_stack_pointer+0xf800c98c>
    d0d4:	0401ffc4 	movi	r16,2047
    d0d8:	003e1406 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d0dc:	0005883a 	mov	r2,zero
    d0e0:	003f7506 	br	ceb8 <__alt_exception_stack_pointer+0xf800ceb8>
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	0009883a 	mov	r4,zero
    d0ec:	003e7806 	br	cad0 <__alt_exception_stack_pointer+0xf800cad0>
    d0f0:	123ff804 	addi	r8,r2,-32
    d0f4:	01000804 	movi	r4,32
    d0f8:	1a10d83a 	srl	r8,r3,r8
    d0fc:	11002526 	beq	r2,r4,d194 <__subdf3+0x8ec>
    d100:	01001004 	movi	r4,64
    d104:	2085c83a 	sub	r2,r4,r2
    d108:	1884983a 	sll	r2,r3,r2
    d10c:	1444b03a 	or	r2,r2,r17
    d110:	1004c03a 	cmpne	r2,r2,zero
    d114:	40a2b03a 	or	r17,r8,r2
    d118:	0005883a 	mov	r2,zero
    d11c:	003f1606 	br	cd78 <__alt_exception_stack_pointer+0xf800cd78>
    d120:	02000434 	movhi	r8,16
    d124:	0009883a 	mov	r4,zero
    d128:	423fffc4 	addi	r8,r8,-1
    d12c:	00bfffc4 	movi	r2,-1
    d130:	0401ffc4 	movi	r16,2047
    d134:	003e6606 	br	cad0 <__alt_exception_stack_pointer+0xf800cad0>
    d138:	1c62b03a 	or	r17,r3,r17
    d13c:	8822c03a 	cmpne	r17,r17,zero
    d140:	0005883a 	mov	r2,zero
    d144:	003f9906 	br	cfac <__alt_exception_stack_pointer+0xf800cfac>
    d148:	2807883a 	mov	r3,r5
    d14c:	3023883a 	mov	r17,r6
    d150:	0401ffc4 	movi	r16,2047
    d154:	003df506 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d158:	2807883a 	mov	r3,r5
    d15c:	3023883a 	mov	r17,r6
    d160:	003df206 	br	c92c <__alt_exception_stack_pointer+0xf800c92c>
    d164:	123ff804 	addi	r8,r2,-32
    d168:	01000804 	movi	r4,32
    d16c:	1a10d83a 	srl	r8,r3,r8
    d170:	11000a26 	beq	r2,r4,d19c <__subdf3+0x8f4>
    d174:	01001004 	movi	r4,64
    d178:	2085c83a 	sub	r2,r4,r2
    d17c:	1884983a 	sll	r2,r3,r2
    d180:	1444b03a 	or	r2,r2,r17
    d184:	1004c03a 	cmpne	r2,r2,zero
    d188:	40a2b03a 	or	r17,r8,r2
    d18c:	0005883a 	mov	r2,zero
    d190:	003f8606 	br	cfac <__alt_exception_stack_pointer+0xf800cfac>
    d194:	0005883a 	mov	r2,zero
    d198:	003fdc06 	br	d10c <__alt_exception_stack_pointer+0xf800d10c>
    d19c:	0005883a 	mov	r2,zero
    d1a0:	003ff706 	br	d180 <__alt_exception_stack_pointer+0xf800d180>

0000d1a4 <__fixdfsi>:
    d1a4:	280cd53a 	srli	r6,r5,20
    d1a8:	00c00434 	movhi	r3,16
    d1ac:	18ffffc4 	addi	r3,r3,-1
    d1b0:	3181ffcc 	andi	r6,r6,2047
    d1b4:	01c0ff84 	movi	r7,1022
    d1b8:	28c6703a 	and	r3,r5,r3
    d1bc:	280ad7fa 	srli	r5,r5,31
    d1c0:	3980120e 	bge	r7,r6,d20c <__fixdfsi+0x68>
    d1c4:	00810744 	movi	r2,1053
    d1c8:	11800c16 	blt	r2,r6,d1fc <__fixdfsi+0x58>
    d1cc:	00810cc4 	movi	r2,1075
    d1d0:	1185c83a 	sub	r2,r2,r6
    d1d4:	01c007c4 	movi	r7,31
    d1d8:	18c00434 	orhi	r3,r3,16
    d1dc:	38800d16 	blt	r7,r2,d214 <__fixdfsi+0x70>
    d1e0:	31befb44 	addi	r6,r6,-1043
    d1e4:	2084d83a 	srl	r2,r4,r2
    d1e8:	1986983a 	sll	r3,r3,r6
    d1ec:	1884b03a 	or	r2,r3,r2
    d1f0:	28000726 	beq	r5,zero,d210 <__fixdfsi+0x6c>
    d1f4:	0085c83a 	sub	r2,zero,r2
    d1f8:	f800283a 	ret
    d1fc:	00a00034 	movhi	r2,32768
    d200:	10bfffc4 	addi	r2,r2,-1
    d204:	2885883a 	add	r2,r5,r2
    d208:	f800283a 	ret
    d20c:	0005883a 	mov	r2,zero
    d210:	f800283a 	ret
    d214:	008104c4 	movi	r2,1043
    d218:	1185c83a 	sub	r2,r2,r6
    d21c:	1884d83a 	srl	r2,r3,r2
    d220:	003ff306 	br	d1f0 <__alt_exception_stack_pointer+0xf800d1f0>

0000d224 <__floatsidf>:
    d224:	defffd04 	addi	sp,sp,-12
    d228:	dfc00215 	stw	ra,8(sp)
    d22c:	dc400115 	stw	r17,4(sp)
    d230:	dc000015 	stw	r16,0(sp)
    d234:	20002b26 	beq	r4,zero,d2e4 <__floatsidf+0xc0>
    d238:	2023883a 	mov	r17,r4
    d23c:	2020d7fa 	srli	r16,r4,31
    d240:	20002d16 	blt	r4,zero,d2f8 <__floatsidf+0xd4>
    d244:	8809883a 	mov	r4,r17
    d248:	000d3a80 	call	d3a8 <__clzsi2>
    d24c:	01410784 	movi	r5,1054
    d250:	288bc83a 	sub	r5,r5,r2
    d254:	01010cc4 	movi	r4,1075
    d258:	2149c83a 	sub	r4,r4,r5
    d25c:	00c007c4 	movi	r3,31
    d260:	1900160e 	bge	r3,r4,d2bc <__floatsidf+0x98>
    d264:	00c104c4 	movi	r3,1043
    d268:	1947c83a 	sub	r3,r3,r5
    d26c:	88c6983a 	sll	r3,r17,r3
    d270:	00800434 	movhi	r2,16
    d274:	10bfffc4 	addi	r2,r2,-1
    d278:	1886703a 	and	r3,r3,r2
    d27c:	2941ffcc 	andi	r5,r5,2047
    d280:	800d883a 	mov	r6,r16
    d284:	0005883a 	mov	r2,zero
    d288:	280a953a 	slli	r5,r5,20
    d28c:	31803fcc 	andi	r6,r6,255
    d290:	01000434 	movhi	r4,16
    d294:	300c97fa 	slli	r6,r6,31
    d298:	213fffc4 	addi	r4,r4,-1
    d29c:	1906703a 	and	r3,r3,r4
    d2a0:	1946b03a 	or	r3,r3,r5
    d2a4:	1986b03a 	or	r3,r3,r6
    d2a8:	dfc00217 	ldw	ra,8(sp)
    d2ac:	dc400117 	ldw	r17,4(sp)
    d2b0:	dc000017 	ldw	r16,0(sp)
    d2b4:	dec00304 	addi	sp,sp,12
    d2b8:	f800283a 	ret
    d2bc:	00c002c4 	movi	r3,11
    d2c0:	1887c83a 	sub	r3,r3,r2
    d2c4:	88c6d83a 	srl	r3,r17,r3
    d2c8:	8904983a 	sll	r2,r17,r4
    d2cc:	01000434 	movhi	r4,16
    d2d0:	213fffc4 	addi	r4,r4,-1
    d2d4:	2941ffcc 	andi	r5,r5,2047
    d2d8:	1906703a 	and	r3,r3,r4
    d2dc:	800d883a 	mov	r6,r16
    d2e0:	003fe906 	br	d288 <__alt_exception_stack_pointer+0xf800d288>
    d2e4:	000d883a 	mov	r6,zero
    d2e8:	000b883a 	mov	r5,zero
    d2ec:	0007883a 	mov	r3,zero
    d2f0:	0005883a 	mov	r2,zero
    d2f4:	003fe406 	br	d288 <__alt_exception_stack_pointer+0xf800d288>
    d2f8:	0123c83a 	sub	r17,zero,r4
    d2fc:	003fd106 	br	d244 <__alt_exception_stack_pointer+0xf800d244>

0000d300 <__floatunsidf>:
    d300:	defffe04 	addi	sp,sp,-8
    d304:	dc000015 	stw	r16,0(sp)
    d308:	dfc00115 	stw	ra,4(sp)
    d30c:	2021883a 	mov	r16,r4
    d310:	20002226 	beq	r4,zero,d39c <__floatunsidf+0x9c>
    d314:	000d3a80 	call	d3a8 <__clzsi2>
    d318:	01010784 	movi	r4,1054
    d31c:	2089c83a 	sub	r4,r4,r2
    d320:	01810cc4 	movi	r6,1075
    d324:	310dc83a 	sub	r6,r6,r4
    d328:	00c007c4 	movi	r3,31
    d32c:	1980120e 	bge	r3,r6,d378 <__floatunsidf+0x78>
    d330:	00c104c4 	movi	r3,1043
    d334:	1907c83a 	sub	r3,r3,r4
    d338:	80ca983a 	sll	r5,r16,r3
    d33c:	00800434 	movhi	r2,16
    d340:	10bfffc4 	addi	r2,r2,-1
    d344:	2101ffcc 	andi	r4,r4,2047
    d348:	0021883a 	mov	r16,zero
    d34c:	288a703a 	and	r5,r5,r2
    d350:	2008953a 	slli	r4,r4,20
    d354:	00c00434 	movhi	r3,16
    d358:	18ffffc4 	addi	r3,r3,-1
    d35c:	28c6703a 	and	r3,r5,r3
    d360:	8005883a 	mov	r2,r16
    d364:	1906b03a 	or	r3,r3,r4
    d368:	dfc00117 	ldw	ra,4(sp)
    d36c:	dc000017 	ldw	r16,0(sp)
    d370:	dec00204 	addi	sp,sp,8
    d374:	f800283a 	ret
    d378:	00c002c4 	movi	r3,11
    d37c:	188bc83a 	sub	r5,r3,r2
    d380:	814ad83a 	srl	r5,r16,r5
    d384:	00c00434 	movhi	r3,16
    d388:	18ffffc4 	addi	r3,r3,-1
    d38c:	81a0983a 	sll	r16,r16,r6
    d390:	2101ffcc 	andi	r4,r4,2047
    d394:	28ca703a 	and	r5,r5,r3
    d398:	003fed06 	br	d350 <__alt_exception_stack_pointer+0xf800d350>
    d39c:	0009883a 	mov	r4,zero
    d3a0:	000b883a 	mov	r5,zero
    d3a4:	003fea06 	br	d350 <__alt_exception_stack_pointer+0xf800d350>

0000d3a8 <__clzsi2>:
    d3a8:	00bfffd4 	movui	r2,65535
    d3ac:	11000536 	bltu	r2,r4,d3c4 <__clzsi2+0x1c>
    d3b0:	00803fc4 	movi	r2,255
    d3b4:	11000f36 	bltu	r2,r4,d3f4 <__clzsi2+0x4c>
    d3b8:	00800804 	movi	r2,32
    d3bc:	0007883a 	mov	r3,zero
    d3c0:	00000506 	br	d3d8 <__clzsi2+0x30>
    d3c4:	00804034 	movhi	r2,256
    d3c8:	10bfffc4 	addi	r2,r2,-1
    d3cc:	11000c2e 	bgeu	r2,r4,d400 <__clzsi2+0x58>
    d3d0:	00800204 	movi	r2,8
    d3d4:	00c00604 	movi	r3,24
    d3d8:	20c8d83a 	srl	r4,r4,r3
    d3dc:	00c00074 	movhi	r3,1
    d3e0:	18ff5e04 	addi	r3,r3,-648
    d3e4:	1909883a 	add	r4,r3,r4
    d3e8:	20c00003 	ldbu	r3,0(r4)
    d3ec:	10c5c83a 	sub	r2,r2,r3
    d3f0:	f800283a 	ret
    d3f4:	00800604 	movi	r2,24
    d3f8:	00c00204 	movi	r3,8
    d3fc:	003ff606 	br	d3d8 <__alt_exception_stack_pointer+0xf800d3d8>
    d400:	00800404 	movi	r2,16
    d404:	1007883a 	mov	r3,r2
    d408:	003ff306 	br	d3d8 <__alt_exception_stack_pointer+0xf800d3d8>

0000d40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d40c:	defffe04 	addi	sp,sp,-8
    d410:	dfc00115 	stw	ra,4(sp)
    d414:	df000015 	stw	fp,0(sp)
    d418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d41c:	d0a00b17 	ldw	r2,-32724(gp)
    d420:	10000326 	beq	r2,zero,d430 <alt_get_errno+0x24>
    d424:	d0a00b17 	ldw	r2,-32724(gp)
    d428:	103ee83a 	callr	r2
    d42c:	00000106 	br	d434 <alt_get_errno+0x28>
    d430:	d0a6cc04 	addi	r2,gp,-25808
}
    d434:	e037883a 	mov	sp,fp
    d438:	dfc00117 	ldw	ra,4(sp)
    d43c:	df000017 	ldw	fp,0(sp)
    d440:	dec00204 	addi	sp,sp,8
    d444:	f800283a 	ret

0000d448 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d448:	defffb04 	addi	sp,sp,-20
    d44c:	dfc00415 	stw	ra,16(sp)
    d450:	df000315 	stw	fp,12(sp)
    d454:	df000304 	addi	fp,sp,12
    d458:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d45c:	e0bfff17 	ldw	r2,-4(fp)
    d460:	10000816 	blt	r2,zero,d484 <close+0x3c>
    d464:	01400304 	movi	r5,12
    d468:	e13fff17 	ldw	r4,-4(fp)
    d46c:	000072c0 	call	72c <__mulsi3>
    d470:	1007883a 	mov	r3,r2
    d474:	00800074 	movhi	r2,1
    d478:	1081e104 	addi	r2,r2,1924
    d47c:	1885883a 	add	r2,r3,r2
    d480:	00000106 	br	d488 <close+0x40>
    d484:	0005883a 	mov	r2,zero
    d488:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d48c:	e0bffd17 	ldw	r2,-12(fp)
    d490:	10001926 	beq	r2,zero,d4f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d494:	e0bffd17 	ldw	r2,-12(fp)
    d498:	10800017 	ldw	r2,0(r2)
    d49c:	10800417 	ldw	r2,16(r2)
    d4a0:	10000626 	beq	r2,zero,d4bc <close+0x74>
    d4a4:	e0bffd17 	ldw	r2,-12(fp)
    d4a8:	10800017 	ldw	r2,0(r2)
    d4ac:	10800417 	ldw	r2,16(r2)
    d4b0:	e13ffd17 	ldw	r4,-12(fp)
    d4b4:	103ee83a 	callr	r2
    d4b8:	00000106 	br	d4c0 <close+0x78>
    d4bc:	0005883a 	mov	r2,zero
    d4c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d4c4:	e13fff17 	ldw	r4,-4(fp)
    d4c8:	000db300 	call	db30 <alt_release_fd>
    if (rval < 0)
    d4cc:	e0bffe17 	ldw	r2,-8(fp)
    d4d0:	1000070e 	bge	r2,zero,d4f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d4d4:	000d40c0 	call	d40c <alt_get_errno>
    d4d8:	1007883a 	mov	r3,r2
    d4dc:	e0bffe17 	ldw	r2,-8(fp)
    d4e0:	0085c83a 	sub	r2,zero,r2
    d4e4:	18800015 	stw	r2,0(r3)
      return -1;
    d4e8:	00bfffc4 	movi	r2,-1
    d4ec:	00000706 	br	d50c <close+0xc4>
    }
    return 0;
    d4f0:	0005883a 	mov	r2,zero
    d4f4:	00000506 	br	d50c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d4f8:	000d40c0 	call	d40c <alt_get_errno>
    d4fc:	1007883a 	mov	r3,r2
    d500:	00801444 	movi	r2,81
    d504:	18800015 	stw	r2,0(r3)
    return -1;
    d508:	00bfffc4 	movi	r2,-1
  }
}
    d50c:	e037883a 	mov	sp,fp
    d510:	dfc00117 	ldw	ra,4(sp)
    d514:	df000017 	ldw	fp,0(sp)
    d518:	dec00204 	addi	sp,sp,8
    d51c:	f800283a 	ret

0000d520 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d520:	defffc04 	addi	sp,sp,-16
    d524:	df000315 	stw	fp,12(sp)
    d528:	df000304 	addi	fp,sp,12
    d52c:	e13ffd15 	stw	r4,-12(fp)
    d530:	e17ffe15 	stw	r5,-8(fp)
    d534:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d538:	e0bfff17 	ldw	r2,-4(fp)
}
    d53c:	e037883a 	mov	sp,fp
    d540:	df000017 	ldw	fp,0(sp)
    d544:	dec00104 	addi	sp,sp,4
    d548:	f800283a 	ret

0000d54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d54c:	defffe04 	addi	sp,sp,-8
    d550:	dfc00115 	stw	ra,4(sp)
    d554:	df000015 	stw	fp,0(sp)
    d558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d55c:	d0a00b17 	ldw	r2,-32724(gp)
    d560:	10000326 	beq	r2,zero,d570 <alt_get_errno+0x24>
    d564:	d0a00b17 	ldw	r2,-32724(gp)
    d568:	103ee83a 	callr	r2
    d56c:	00000106 	br	d574 <alt_get_errno+0x28>
    d570:	d0a6cc04 	addi	r2,gp,-25808
}
    d574:	e037883a 	mov	sp,fp
    d578:	dfc00117 	ldw	ra,4(sp)
    d57c:	df000017 	ldw	fp,0(sp)
    d580:	dec00204 	addi	sp,sp,8
    d584:	f800283a 	ret

0000d588 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d588:	defffb04 	addi	sp,sp,-20
    d58c:	dfc00415 	stw	ra,16(sp)
    d590:	df000315 	stw	fp,12(sp)
    d594:	df000304 	addi	fp,sp,12
    d598:	e13ffe15 	stw	r4,-8(fp)
    d59c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5a0:	e0bffe17 	ldw	r2,-8(fp)
    d5a4:	10000816 	blt	r2,zero,d5c8 <fstat+0x40>
    d5a8:	01400304 	movi	r5,12
    d5ac:	e13ffe17 	ldw	r4,-8(fp)
    d5b0:	000072c0 	call	72c <__mulsi3>
    d5b4:	1007883a 	mov	r3,r2
    d5b8:	00800074 	movhi	r2,1
    d5bc:	1081e104 	addi	r2,r2,1924
    d5c0:	1885883a 	add	r2,r3,r2
    d5c4:	00000106 	br	d5cc <fstat+0x44>
    d5c8:	0005883a 	mov	r2,zero
    d5cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d5d0:	e0bffd17 	ldw	r2,-12(fp)
    d5d4:	10001026 	beq	r2,zero,d618 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d5d8:	e0bffd17 	ldw	r2,-12(fp)
    d5dc:	10800017 	ldw	r2,0(r2)
    d5e0:	10800817 	ldw	r2,32(r2)
    d5e4:	10000726 	beq	r2,zero,d604 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d5e8:	e0bffd17 	ldw	r2,-12(fp)
    d5ec:	10800017 	ldw	r2,0(r2)
    d5f0:	10800817 	ldw	r2,32(r2)
    d5f4:	e17fff17 	ldw	r5,-4(fp)
    d5f8:	e13ffd17 	ldw	r4,-12(fp)
    d5fc:	103ee83a 	callr	r2
    d600:	00000a06 	br	d62c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d604:	e0bfff17 	ldw	r2,-4(fp)
    d608:	00c80004 	movi	r3,8192
    d60c:	10c00115 	stw	r3,4(r2)
      return 0;
    d610:	0005883a 	mov	r2,zero
    d614:	00000506 	br	d62c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d618:	000d54c0 	call	d54c <alt_get_errno>
    d61c:	1007883a 	mov	r3,r2
    d620:	00801444 	movi	r2,81
    d624:	18800015 	stw	r2,0(r3)
    return -1;
    d628:	00bfffc4 	movi	r2,-1
  }
}
    d62c:	e037883a 	mov	sp,fp
    d630:	dfc00117 	ldw	ra,4(sp)
    d634:	df000017 	ldw	fp,0(sp)
    d638:	dec00204 	addi	sp,sp,8
    d63c:	f800283a 	ret

0000d640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d640:	defffe04 	addi	sp,sp,-8
    d644:	dfc00115 	stw	ra,4(sp)
    d648:	df000015 	stw	fp,0(sp)
    d64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d650:	d0a00b17 	ldw	r2,-32724(gp)
    d654:	10000326 	beq	r2,zero,d664 <alt_get_errno+0x24>
    d658:	d0a00b17 	ldw	r2,-32724(gp)
    d65c:	103ee83a 	callr	r2
    d660:	00000106 	br	d668 <alt_get_errno+0x28>
    d664:	d0a6cc04 	addi	r2,gp,-25808
}
    d668:	e037883a 	mov	sp,fp
    d66c:	dfc00117 	ldw	ra,4(sp)
    d670:	df000017 	ldw	fp,0(sp)
    d674:	dec00204 	addi	sp,sp,8
    d678:	f800283a 	ret

0000d67c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d67c:	deffed04 	addi	sp,sp,-76
    d680:	dfc01215 	stw	ra,72(sp)
    d684:	df001115 	stw	fp,68(sp)
    d688:	df001104 	addi	fp,sp,68
    d68c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d690:	e0bfff17 	ldw	r2,-4(fp)
    d694:	10000816 	blt	r2,zero,d6b8 <isatty+0x3c>
    d698:	01400304 	movi	r5,12
    d69c:	e13fff17 	ldw	r4,-4(fp)
    d6a0:	000072c0 	call	72c <__mulsi3>
    d6a4:	1007883a 	mov	r3,r2
    d6a8:	00800074 	movhi	r2,1
    d6ac:	1081e104 	addi	r2,r2,1924
    d6b0:	1885883a 	add	r2,r3,r2
    d6b4:	00000106 	br	d6bc <isatty+0x40>
    d6b8:	0005883a 	mov	r2,zero
    d6bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d6c0:	e0bfef17 	ldw	r2,-68(fp)
    d6c4:	10000e26 	beq	r2,zero,d700 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d6c8:	e0bfef17 	ldw	r2,-68(fp)
    d6cc:	10800017 	ldw	r2,0(r2)
    d6d0:	10800817 	ldw	r2,32(r2)
    d6d4:	1000021e 	bne	r2,zero,d6e0 <isatty+0x64>
    {
      return 1;
    d6d8:	00800044 	movi	r2,1
    d6dc:	00000d06 	br	d714 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d6e0:	e0bff004 	addi	r2,fp,-64
    d6e4:	100b883a 	mov	r5,r2
    d6e8:	e13fff17 	ldw	r4,-4(fp)
    d6ec:	000d5880 	call	d588 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d6f0:	e0bff117 	ldw	r2,-60(fp)
    d6f4:	10880020 	cmpeqi	r2,r2,8192
    d6f8:	10803fcc 	andi	r2,r2,255
    d6fc:	00000506 	br	d714 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d700:	000d6400 	call	d640 <alt_get_errno>
    d704:	1007883a 	mov	r3,r2
    d708:	00801444 	movi	r2,81
    d70c:	18800015 	stw	r2,0(r3)
    return 0;
    d710:	0005883a 	mov	r2,zero
  }
}
    d714:	e037883a 	mov	sp,fp
    d718:	dfc00117 	ldw	ra,4(sp)
    d71c:	df000017 	ldw	fp,0(sp)
    d720:	dec00204 	addi	sp,sp,8
    d724:	f800283a 	ret

0000d728 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d728:	defffc04 	addi	sp,sp,-16
    d72c:	df000315 	stw	fp,12(sp)
    d730:	df000304 	addi	fp,sp,12
    d734:	e13ffd15 	stw	r4,-12(fp)
    d738:	e17ffe15 	stw	r5,-8(fp)
    d73c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d740:	e0fffe17 	ldw	r3,-8(fp)
    d744:	e0bffd17 	ldw	r2,-12(fp)
    d748:	18800c26 	beq	r3,r2,d77c <alt_load_section+0x54>
  {
    while( to != end )
    d74c:	00000806 	br	d770 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d750:	e0bffe17 	ldw	r2,-8(fp)
    d754:	10c00104 	addi	r3,r2,4
    d758:	e0fffe15 	stw	r3,-8(fp)
    d75c:	e0fffd17 	ldw	r3,-12(fp)
    d760:	19000104 	addi	r4,r3,4
    d764:	e13ffd15 	stw	r4,-12(fp)
    d768:	18c00017 	ldw	r3,0(r3)
    d76c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d770:	e0fffe17 	ldw	r3,-8(fp)
    d774:	e0bfff17 	ldw	r2,-4(fp)
    d778:	18bff51e 	bne	r3,r2,d750 <__alt_exception_stack_pointer+0xf800d750>
    {
      *to++ = *from++;
    }
  }
}
    d77c:	0001883a 	nop
    d780:	e037883a 	mov	sp,fp
    d784:	df000017 	ldw	fp,0(sp)
    d788:	dec00104 	addi	sp,sp,4
    d78c:	f800283a 	ret

0000d790 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d790:	defffe04 	addi	sp,sp,-8
    d794:	dfc00115 	stw	ra,4(sp)
    d798:	df000015 	stw	fp,0(sp)
    d79c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d7a0:	01800074 	movhi	r6,1
    d7a4:	31866804 	addi	r6,r6,6560
    d7a8:	01400074 	movhi	r5,1
    d7ac:	297fae04 	addi	r5,r5,-328
    d7b0:	01000074 	movhi	r4,1
    d7b4:	21066804 	addi	r4,r4,6560
    d7b8:	000d7280 	call	d728 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d7bc:	01800034 	movhi	r6,0
    d7c0:	31808f04 	addi	r6,r6,572
    d7c4:	01400034 	movhi	r5,0
    d7c8:	29400804 	addi	r5,r5,32
    d7cc:	01000034 	movhi	r4,0
    d7d0:	21000804 	addi	r4,r4,32
    d7d4:	000d7280 	call	d728 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d7d8:	01800074 	movhi	r6,1
    d7dc:	31bfae04 	addi	r6,r6,-328
    d7e0:	01400074 	movhi	r5,1
    d7e4:	297eeb04 	addi	r5,r5,-1108
    d7e8:	01000074 	movhi	r4,1
    d7ec:	213eeb04 	addi	r4,r4,-1108
    d7f0:	000d7280 	call	d728 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d7f4:	000eaf40 	call	eaf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d7f8:	000ecb40 	call	ecb4 <alt_icache_flush_all>
}
    d7fc:	0001883a 	nop
    d800:	e037883a 	mov	sp,fp
    d804:	dfc00117 	ldw	ra,4(sp)
    d808:	df000017 	ldw	fp,0(sp)
    d80c:	dec00204 	addi	sp,sp,8
    d810:	f800283a 	ret

0000d814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d814:	defffe04 	addi	sp,sp,-8
    d818:	dfc00115 	stw	ra,4(sp)
    d81c:	df000015 	stw	fp,0(sp)
    d820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d824:	d0a00b17 	ldw	r2,-32724(gp)
    d828:	10000326 	beq	r2,zero,d838 <alt_get_errno+0x24>
    d82c:	d0a00b17 	ldw	r2,-32724(gp)
    d830:	103ee83a 	callr	r2
    d834:	00000106 	br	d83c <alt_get_errno+0x28>
    d838:	d0a6cc04 	addi	r2,gp,-25808
}
    d83c:	e037883a 	mov	sp,fp
    d840:	dfc00117 	ldw	ra,4(sp)
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00204 	addi	sp,sp,8
    d84c:	f800283a 	ret

0000d850 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d850:	defff904 	addi	sp,sp,-28
    d854:	dfc00615 	stw	ra,24(sp)
    d858:	df000515 	stw	fp,20(sp)
    d85c:	df000504 	addi	fp,sp,20
    d860:	e13ffd15 	stw	r4,-12(fp)
    d864:	e17ffe15 	stw	r5,-8(fp)
    d868:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d86c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d870:	e0bffd17 	ldw	r2,-12(fp)
    d874:	10000816 	blt	r2,zero,d898 <lseek+0x48>
    d878:	01400304 	movi	r5,12
    d87c:	e13ffd17 	ldw	r4,-12(fp)
    d880:	000072c0 	call	72c <__mulsi3>
    d884:	1007883a 	mov	r3,r2
    d888:	00800074 	movhi	r2,1
    d88c:	1081e104 	addi	r2,r2,1924
    d890:	1885883a 	add	r2,r3,r2
    d894:	00000106 	br	d89c <lseek+0x4c>
    d898:	0005883a 	mov	r2,zero
    d89c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d8a0:	e0bffc17 	ldw	r2,-16(fp)
    d8a4:	10001026 	beq	r2,zero,d8e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d8a8:	e0bffc17 	ldw	r2,-16(fp)
    d8ac:	10800017 	ldw	r2,0(r2)
    d8b0:	10800717 	ldw	r2,28(r2)
    d8b4:	10000926 	beq	r2,zero,d8dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d8b8:	e0bffc17 	ldw	r2,-16(fp)
    d8bc:	10800017 	ldw	r2,0(r2)
    d8c0:	10800717 	ldw	r2,28(r2)
    d8c4:	e1bfff17 	ldw	r6,-4(fp)
    d8c8:	e17ffe17 	ldw	r5,-8(fp)
    d8cc:	e13ffc17 	ldw	r4,-16(fp)
    d8d0:	103ee83a 	callr	r2
    d8d4:	e0bffb15 	stw	r2,-20(fp)
    d8d8:	00000506 	br	d8f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d8dc:	00bfde84 	movi	r2,-134
    d8e0:	e0bffb15 	stw	r2,-20(fp)
    d8e4:	00000206 	br	d8f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d8e8:	00bfebc4 	movi	r2,-81
    d8ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d8f0:	e0bffb17 	ldw	r2,-20(fp)
    d8f4:	1000070e 	bge	r2,zero,d914 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    d8f8:	000d8140 	call	d814 <alt_get_errno>
    d8fc:	1007883a 	mov	r3,r2
    d900:	e0bffb17 	ldw	r2,-20(fp)
    d904:	0085c83a 	sub	r2,zero,r2
    d908:	18800015 	stw	r2,0(r3)
    rc = -1;
    d90c:	00bfffc4 	movi	r2,-1
    d910:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d914:	e0bffb17 	ldw	r2,-20(fp)
}
    d918:	e037883a 	mov	sp,fp
    d91c:	dfc00117 	ldw	ra,4(sp)
    d920:	df000017 	ldw	fp,0(sp)
    d924:	dec00204 	addi	sp,sp,8
    d928:	f800283a 	ret

0000d92c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d92c:	defffd04 	addi	sp,sp,-12
    d930:	dfc00215 	stw	ra,8(sp)
    d934:	df000115 	stw	fp,4(sp)
    d938:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d93c:	0009883a 	mov	r4,zero
    d940:	000ddd40 	call	ddd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d944:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d948:	000de0c0 	call	de0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d94c:	01800074 	movhi	r6,1
    d950:	31bfa104 	addi	r6,r6,-380
    d954:	01400074 	movhi	r5,1
    d958:	297fa604 	addi	r5,r5,-360
    d95c:	01000074 	movhi	r4,1
    d960:	213fa104 	addi	r4,r4,-380
    d964:	000f0580 	call	f058 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d968:	000ebf40 	call	ebf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d96c:	01000074 	movhi	r4,1
    d970:	213b1504 	addi	r4,r4,-5036
    d974:	000f8180 	call	f818 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d978:	d0a6d017 	ldw	r2,-25792(gp)
    d97c:	d0e6d117 	ldw	r3,-25788(gp)
    d980:	d126d217 	ldw	r4,-25784(gp)
    d984:	200d883a 	mov	r6,r4
    d988:	180b883a 	mov	r5,r3
    d98c:	1009883a 	mov	r4,r2
    d990:	00002780 	call	278 <main>
    d994:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d998:	01000044 	movi	r4,1
    d99c:	000d4480 	call	d448 <close>
  exit (result);
    d9a0:	e13fff17 	ldw	r4,-4(fp)
    d9a4:	000f82c0 	call	f82c <exit>

0000d9a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d9a8:	defffe04 	addi	sp,sp,-8
    d9ac:	df000115 	stw	fp,4(sp)
    d9b0:	df000104 	addi	fp,sp,4
    d9b4:	e13fff15 	stw	r4,-4(fp)
}
    d9b8:	0001883a 	nop
    d9bc:	e037883a 	mov	sp,fp
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00104 	addi	sp,sp,4
    d9c8:	f800283a 	ret

0000d9cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d9cc:	defffe04 	addi	sp,sp,-8
    d9d0:	df000115 	stw	fp,4(sp)
    d9d4:	df000104 	addi	fp,sp,4
    d9d8:	e13fff15 	stw	r4,-4(fp)
}
    d9dc:	0001883a 	nop
    d9e0:	e037883a 	mov	sp,fp
    d9e4:	df000017 	ldw	fp,0(sp)
    d9e8:	dec00104 	addi	sp,sp,4
    d9ec:	f800283a 	ret

0000d9f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9f0:	defffe04 	addi	sp,sp,-8
    d9f4:	dfc00115 	stw	ra,4(sp)
    d9f8:	df000015 	stw	fp,0(sp)
    d9fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    da00:	d0a00b17 	ldw	r2,-32724(gp)
    da04:	10000326 	beq	r2,zero,da14 <alt_get_errno+0x24>
    da08:	d0a00b17 	ldw	r2,-32724(gp)
    da0c:	103ee83a 	callr	r2
    da10:	00000106 	br	da18 <alt_get_errno+0x28>
    da14:	d0a6cc04 	addi	r2,gp,-25808
}
    da18:	e037883a 	mov	sp,fp
    da1c:	dfc00117 	ldw	ra,4(sp)
    da20:	df000017 	ldw	fp,0(sp)
    da24:	dec00204 	addi	sp,sp,8
    da28:	f800283a 	ret

0000da2c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    da2c:	defff904 	addi	sp,sp,-28
    da30:	dfc00615 	stw	ra,24(sp)
    da34:	df000515 	stw	fp,20(sp)
    da38:	df000504 	addi	fp,sp,20
    da3c:	e13ffd15 	stw	r4,-12(fp)
    da40:	e17ffe15 	stw	r5,-8(fp)
    da44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    da48:	e0bffd17 	ldw	r2,-12(fp)
    da4c:	10000816 	blt	r2,zero,da70 <read+0x44>
    da50:	01400304 	movi	r5,12
    da54:	e13ffd17 	ldw	r4,-12(fp)
    da58:	000072c0 	call	72c <__mulsi3>
    da5c:	1007883a 	mov	r3,r2
    da60:	00800074 	movhi	r2,1
    da64:	1081e104 	addi	r2,r2,1924
    da68:	1885883a 	add	r2,r3,r2
    da6c:	00000106 	br	da74 <read+0x48>
    da70:	0005883a 	mov	r2,zero
    da74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    da78:	e0bffb17 	ldw	r2,-20(fp)
    da7c:	10002226 	beq	r2,zero,db08 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    da80:	e0bffb17 	ldw	r2,-20(fp)
    da84:	10800217 	ldw	r2,8(r2)
    da88:	108000cc 	andi	r2,r2,3
    da8c:	10800060 	cmpeqi	r2,r2,1
    da90:	1000181e 	bne	r2,zero,daf4 <read+0xc8>
        (fd->dev->read))
    da94:	e0bffb17 	ldw	r2,-20(fp)
    da98:	10800017 	ldw	r2,0(r2)
    da9c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    daa0:	10001426 	beq	r2,zero,daf4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    daa4:	e0bffb17 	ldw	r2,-20(fp)
    daa8:	10800017 	ldw	r2,0(r2)
    daac:	10800517 	ldw	r2,20(r2)
    dab0:	e0ffff17 	ldw	r3,-4(fp)
    dab4:	180d883a 	mov	r6,r3
    dab8:	e17ffe17 	ldw	r5,-8(fp)
    dabc:	e13ffb17 	ldw	r4,-20(fp)
    dac0:	103ee83a 	callr	r2
    dac4:	e0bffc15 	stw	r2,-16(fp)
    dac8:	e0bffc17 	ldw	r2,-16(fp)
    dacc:	1000070e 	bge	r2,zero,daec <read+0xc0>
        {
          ALT_ERRNO = -rval;
    dad0:	000d9f00 	call	d9f0 <alt_get_errno>
    dad4:	1007883a 	mov	r3,r2
    dad8:	e0bffc17 	ldw	r2,-16(fp)
    dadc:	0085c83a 	sub	r2,zero,r2
    dae0:	18800015 	stw	r2,0(r3)
          return -1;
    dae4:	00bfffc4 	movi	r2,-1
    dae8:	00000c06 	br	db1c <read+0xf0>
        }
        return rval;
    daec:	e0bffc17 	ldw	r2,-16(fp)
    daf0:	00000a06 	br	db1c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    daf4:	000d9f00 	call	d9f0 <alt_get_errno>
    daf8:	1007883a 	mov	r3,r2
    dafc:	00800344 	movi	r2,13
    db00:	18800015 	stw	r2,0(r3)
    db04:	00000406 	br	db18 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    db08:	000d9f00 	call	d9f0 <alt_get_errno>
    db0c:	1007883a 	mov	r3,r2
    db10:	00801444 	movi	r2,81
    db14:	18800015 	stw	r2,0(r3)
  }
  return -1;
    db18:	00bfffc4 	movi	r2,-1
}
    db1c:	e037883a 	mov	sp,fp
    db20:	dfc00117 	ldw	ra,4(sp)
    db24:	df000017 	ldw	fp,0(sp)
    db28:	dec00204 	addi	sp,sp,8
    db2c:	f800283a 	ret

0000db30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    db30:	defffc04 	addi	sp,sp,-16
    db34:	dfc00315 	stw	ra,12(sp)
    db38:	df000215 	stw	fp,8(sp)
    db3c:	dc000115 	stw	r16,4(sp)
    db40:	df000204 	addi	fp,sp,8
    db44:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    db48:	e0bffe17 	ldw	r2,-8(fp)
    db4c:	108000d0 	cmplti	r2,r2,3
    db50:	1000111e 	bne	r2,zero,db98 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    db54:	04000074 	movhi	r16,1
    db58:	8401e104 	addi	r16,r16,1924
    db5c:	e0bffe17 	ldw	r2,-8(fp)
    db60:	01400304 	movi	r5,12
    db64:	1009883a 	mov	r4,r2
    db68:	000072c0 	call	72c <__mulsi3>
    db6c:	8085883a 	add	r2,r16,r2
    db70:	10800204 	addi	r2,r2,8
    db74:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    db78:	04000074 	movhi	r16,1
    db7c:	8401e104 	addi	r16,r16,1924
    db80:	e0bffe17 	ldw	r2,-8(fp)
    db84:	01400304 	movi	r5,12
    db88:	1009883a 	mov	r4,r2
    db8c:	000072c0 	call	72c <__mulsi3>
    db90:	8085883a 	add	r2,r16,r2
    db94:	10000015 	stw	zero,0(r2)
  }
}
    db98:	0001883a 	nop
    db9c:	e6ffff04 	addi	sp,fp,-4
    dba0:	dfc00217 	ldw	ra,8(sp)
    dba4:	df000117 	ldw	fp,4(sp)
    dba8:	dc000017 	ldw	r16,0(sp)
    dbac:	dec00304 	addi	sp,sp,12
    dbb0:	f800283a 	ret

0000dbb4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dbb4:	defff904 	addi	sp,sp,-28
    dbb8:	df000615 	stw	fp,24(sp)
    dbbc:	df000604 	addi	fp,sp,24
    dbc0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbc4:	0005303a 	rdctl	r2,status
    dbc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbcc:	e0fffe17 	ldw	r3,-8(fp)
    dbd0:	00bfff84 	movi	r2,-2
    dbd4:	1884703a 	and	r2,r3,r2
    dbd8:	1001703a 	wrctl	status,r2
  
  return context;
    dbdc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dbe0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dbe4:	d0a00c17 	ldw	r2,-32720(gp)
    dbe8:	10c000c4 	addi	r3,r2,3
    dbec:	00bfff04 	movi	r2,-4
    dbf0:	1884703a 	and	r2,r3,r2
    dbf4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dbf8:	d0e00c17 	ldw	r3,-32720(gp)
    dbfc:	e0bfff17 	ldw	r2,-4(fp)
    dc00:	1887883a 	add	r3,r3,r2
    dc04:	00820034 	movhi	r2,2048
    dc08:	10bf0004 	addi	r2,r2,-1024
    dc0c:	10c0062e 	bgeu	r2,r3,dc28 <sbrk+0x74>
    dc10:	e0bffb17 	ldw	r2,-20(fp)
    dc14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc18:	e0bffa17 	ldw	r2,-24(fp)
    dc1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dc20:	00bfffc4 	movi	r2,-1
    dc24:	00000b06 	br	dc54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dc28:	d0a00c17 	ldw	r2,-32720(gp)
    dc2c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    dc30:	d0e00c17 	ldw	r3,-32720(gp)
    dc34:	e0bfff17 	ldw	r2,-4(fp)
    dc38:	1885883a 	add	r2,r3,r2
    dc3c:	d0a00c15 	stw	r2,-32720(gp)
    dc40:	e0bffb17 	ldw	r2,-20(fp)
    dc44:	e0bffc15 	stw	r2,-16(fp)
    dc48:	e0bffc17 	ldw	r2,-16(fp)
    dc4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dc50:	e0bffd17 	ldw	r2,-12(fp)
} 
    dc54:	e037883a 	mov	sp,fp
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00104 	addi	sp,sp,4
    dc60:	f800283a 	ret

0000dc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc64:	defffe04 	addi	sp,sp,-8
    dc68:	dfc00115 	stw	ra,4(sp)
    dc6c:	df000015 	stw	fp,0(sp)
    dc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc74:	d0a00b17 	ldw	r2,-32724(gp)
    dc78:	10000326 	beq	r2,zero,dc88 <alt_get_errno+0x24>
    dc7c:	d0a00b17 	ldw	r2,-32724(gp)
    dc80:	103ee83a 	callr	r2
    dc84:	00000106 	br	dc8c <alt_get_errno+0x28>
    dc88:	d0a6cc04 	addi	r2,gp,-25808
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00117 	ldw	ra,4(sp)
    dc94:	df000017 	ldw	fp,0(sp)
    dc98:	dec00204 	addi	sp,sp,8
    dc9c:	f800283a 	ret

0000dca0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dca0:	defff904 	addi	sp,sp,-28
    dca4:	dfc00615 	stw	ra,24(sp)
    dca8:	df000515 	stw	fp,20(sp)
    dcac:	df000504 	addi	fp,sp,20
    dcb0:	e13ffd15 	stw	r4,-12(fp)
    dcb4:	e17ffe15 	stw	r5,-8(fp)
    dcb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dcbc:	e0bffd17 	ldw	r2,-12(fp)
    dcc0:	10000816 	blt	r2,zero,dce4 <write+0x44>
    dcc4:	01400304 	movi	r5,12
    dcc8:	e13ffd17 	ldw	r4,-12(fp)
    dccc:	000072c0 	call	72c <__mulsi3>
    dcd0:	1007883a 	mov	r3,r2
    dcd4:	00800074 	movhi	r2,1
    dcd8:	1081e104 	addi	r2,r2,1924
    dcdc:	1885883a 	add	r2,r3,r2
    dce0:	00000106 	br	dce8 <write+0x48>
    dce4:	0005883a 	mov	r2,zero
    dce8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dcec:	e0bffb17 	ldw	r2,-20(fp)
    dcf0:	10002126 	beq	r2,zero,dd78 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dcf4:	e0bffb17 	ldw	r2,-20(fp)
    dcf8:	10800217 	ldw	r2,8(r2)
    dcfc:	108000cc 	andi	r2,r2,3
    dd00:	10001826 	beq	r2,zero,dd64 <write+0xc4>
    dd04:	e0bffb17 	ldw	r2,-20(fp)
    dd08:	10800017 	ldw	r2,0(r2)
    dd0c:	10800617 	ldw	r2,24(r2)
    dd10:	10001426 	beq	r2,zero,dd64 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dd14:	e0bffb17 	ldw	r2,-20(fp)
    dd18:	10800017 	ldw	r2,0(r2)
    dd1c:	10800617 	ldw	r2,24(r2)
    dd20:	e0ffff17 	ldw	r3,-4(fp)
    dd24:	180d883a 	mov	r6,r3
    dd28:	e17ffe17 	ldw	r5,-8(fp)
    dd2c:	e13ffb17 	ldw	r4,-20(fp)
    dd30:	103ee83a 	callr	r2
    dd34:	e0bffc15 	stw	r2,-16(fp)
    dd38:	e0bffc17 	ldw	r2,-16(fp)
    dd3c:	1000070e 	bge	r2,zero,dd5c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    dd40:	000dc640 	call	dc64 <alt_get_errno>
    dd44:	1007883a 	mov	r3,r2
    dd48:	e0bffc17 	ldw	r2,-16(fp)
    dd4c:	0085c83a 	sub	r2,zero,r2
    dd50:	18800015 	stw	r2,0(r3)
        return -1;
    dd54:	00bfffc4 	movi	r2,-1
    dd58:	00000c06 	br	dd8c <write+0xec>
      }
      return rval;
    dd5c:	e0bffc17 	ldw	r2,-16(fp)
    dd60:	00000a06 	br	dd8c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dd64:	000dc640 	call	dc64 <alt_get_errno>
    dd68:	1007883a 	mov	r3,r2
    dd6c:	00800344 	movi	r2,13
    dd70:	18800015 	stw	r2,0(r3)
    dd74:	00000406 	br	dd88 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dd78:	000dc640 	call	dc64 <alt_get_errno>
    dd7c:	1007883a 	mov	r3,r2
    dd80:	00801444 	movi	r2,81
    dd84:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dd88:	00bfffc4 	movi	r2,-1
}
    dd8c:	e037883a 	mov	sp,fp
    dd90:	dfc00117 	ldw	ra,4(sp)
    dd94:	df000017 	ldw	fp,0(sp)
    dd98:	dec00204 	addi	sp,sp,8
    dd9c:	f800283a 	ret

0000dda0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    dda0:	defffd04 	addi	sp,sp,-12
    dda4:	dfc00215 	stw	ra,8(sp)
    dda8:	df000115 	stw	fp,4(sp)
    ddac:	df000104 	addi	fp,sp,4
    ddb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ddb4:	d1600804 	addi	r5,gp,-32736
    ddb8:	e13fff17 	ldw	r4,-4(fp)
    ddbc:	000eb500 	call	eb50 <alt_dev_llist_insert>
}
    ddc0:	e037883a 	mov	sp,fp
    ddc4:	dfc00117 	ldw	ra,4(sp)
    ddc8:	df000017 	ldw	fp,0(sp)
    ddcc:	dec00204 	addi	sp,sp,8
    ddd0:	f800283a 	ret

0000ddd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ddd4:	defffd04 	addi	sp,sp,-12
    ddd8:	dfc00215 	stw	ra,8(sp)
    dddc:	df000115 	stw	fp,4(sp)
    dde0:	df000104 	addi	fp,sp,4
    dde4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    dde8:	000f4fc0 	call	f4fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ddec:	00800044 	movi	r2,1
    ddf0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ddf4:	0001883a 	nop
    ddf8:	e037883a 	mov	sp,fp
    ddfc:	dfc00117 	ldw	ra,4(sp)
    de00:	df000017 	ldw	fp,0(sp)
    de04:	dec00204 	addi	sp,sp,8
    de08:	f800283a 	ret

0000de0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    de0c:	defffe04 	addi	sp,sp,-8
    de10:	dfc00115 	stw	ra,4(sp)
    de14:	df000015 	stw	fp,0(sp)
    de18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    de1c:	01c0fa04 	movi	r7,1000
    de20:	01800044 	movi	r6,1
    de24:	000b883a 	mov	r5,zero
    de28:	01020034 	movhi	r4,2048
    de2c:	21140804 	addi	r4,r4,20512
    de30:	000e94c0 	call	e94c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    de34:	000d883a 	mov	r6,zero
    de38:	000b883a 	mov	r5,zero
    de3c:	01000074 	movhi	r4,1
    de40:	21024b04 	addi	r4,r4,2348
    de44:	000dfd00 	call	dfd0 <altera_avalon_jtag_uart_init>
    de48:	01000074 	movhi	r4,1
    de4c:	21024104 	addi	r4,r4,2308
    de50:	000dda00 	call	dda0 <alt_dev_reg>
}
    de54:	0001883a 	nop
    de58:	e037883a 	mov	sp,fp
    de5c:	dfc00117 	ldw	ra,4(sp)
    de60:	df000017 	ldw	fp,0(sp)
    de64:	dec00204 	addi	sp,sp,8
    de68:	f800283a 	ret

0000de6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    de6c:	defffa04 	addi	sp,sp,-24
    de70:	dfc00515 	stw	ra,20(sp)
    de74:	df000415 	stw	fp,16(sp)
    de78:	df000404 	addi	fp,sp,16
    de7c:	e13ffd15 	stw	r4,-12(fp)
    de80:	e17ffe15 	stw	r5,-8(fp)
    de84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	10800017 	ldw	r2,0(r2)
    de90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    de94:	e0bffc17 	ldw	r2,-16(fp)
    de98:	10c00a04 	addi	r3,r2,40
    de9c:	e0bffd17 	ldw	r2,-12(fp)
    dea0:	10800217 	ldw	r2,8(r2)
    dea4:	100f883a 	mov	r7,r2
    dea8:	e1bfff17 	ldw	r6,-4(fp)
    deac:	e17ffe17 	ldw	r5,-8(fp)
    deb0:	1809883a 	mov	r4,r3
    deb4:	000e4940 	call	e494 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    deb8:	e037883a 	mov	sp,fp
    debc:	dfc00117 	ldw	ra,4(sp)
    dec0:	df000017 	ldw	fp,0(sp)
    dec4:	dec00204 	addi	sp,sp,8
    dec8:	f800283a 	ret

0000decc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    decc:	defffa04 	addi	sp,sp,-24
    ded0:	dfc00515 	stw	ra,20(sp)
    ded4:	df000415 	stw	fp,16(sp)
    ded8:	df000404 	addi	fp,sp,16
    dedc:	e13ffd15 	stw	r4,-12(fp)
    dee0:	e17ffe15 	stw	r5,-8(fp)
    dee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dee8:	e0bffd17 	ldw	r2,-12(fp)
    deec:	10800017 	ldw	r2,0(r2)
    def0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    def4:	e0bffc17 	ldw	r2,-16(fp)
    def8:	10c00a04 	addi	r3,r2,40
    defc:	e0bffd17 	ldw	r2,-12(fp)
    df00:	10800217 	ldw	r2,8(r2)
    df04:	100f883a 	mov	r7,r2
    df08:	e1bfff17 	ldw	r6,-4(fp)
    df0c:	e17ffe17 	ldw	r5,-8(fp)
    df10:	1809883a 	mov	r4,r3
    df14:	000e6b00 	call	e6b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    df18:	e037883a 	mov	sp,fp
    df1c:	dfc00117 	ldw	ra,4(sp)
    df20:	df000017 	ldw	fp,0(sp)
    df24:	dec00204 	addi	sp,sp,8
    df28:	f800283a 	ret

0000df2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    df2c:	defffc04 	addi	sp,sp,-16
    df30:	dfc00315 	stw	ra,12(sp)
    df34:	df000215 	stw	fp,8(sp)
    df38:	df000204 	addi	fp,sp,8
    df3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    df40:	e0bfff17 	ldw	r2,-4(fp)
    df44:	10800017 	ldw	r2,0(r2)
    df48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    df4c:	e0bffe17 	ldw	r2,-8(fp)
    df50:	10c00a04 	addi	r3,r2,40
    df54:	e0bfff17 	ldw	r2,-4(fp)
    df58:	10800217 	ldw	r2,8(r2)
    df5c:	100b883a 	mov	r5,r2
    df60:	1809883a 	mov	r4,r3
    df64:	000e33c0 	call	e33c <altera_avalon_jtag_uart_close>
}
    df68:	e037883a 	mov	sp,fp
    df6c:	dfc00117 	ldw	ra,4(sp)
    df70:	df000017 	ldw	fp,0(sp)
    df74:	dec00204 	addi	sp,sp,8
    df78:	f800283a 	ret

0000df7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    df7c:	defffa04 	addi	sp,sp,-24
    df80:	dfc00515 	stw	ra,20(sp)
    df84:	df000415 	stw	fp,16(sp)
    df88:	df000404 	addi	fp,sp,16
    df8c:	e13ffd15 	stw	r4,-12(fp)
    df90:	e17ffe15 	stw	r5,-8(fp)
    df94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    df98:	e0bffd17 	ldw	r2,-12(fp)
    df9c:	10800017 	ldw	r2,0(r2)
    dfa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dfa4:	e0bffc17 	ldw	r2,-16(fp)
    dfa8:	10800a04 	addi	r2,r2,40
    dfac:	e1bfff17 	ldw	r6,-4(fp)
    dfb0:	e17ffe17 	ldw	r5,-8(fp)
    dfb4:	1009883a 	mov	r4,r2
    dfb8:	000e3a40 	call	e3a4 <altera_avalon_jtag_uart_ioctl>
}
    dfbc:	e037883a 	mov	sp,fp
    dfc0:	dfc00117 	ldw	ra,4(sp)
    dfc4:	df000017 	ldw	fp,0(sp)
    dfc8:	dec00204 	addi	sp,sp,8
    dfcc:	f800283a 	ret

0000dfd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    dfd0:	defffa04 	addi	sp,sp,-24
    dfd4:	dfc00515 	stw	ra,20(sp)
    dfd8:	df000415 	stw	fp,16(sp)
    dfdc:	df000404 	addi	fp,sp,16
    dfe0:	e13ffd15 	stw	r4,-12(fp)
    dfe4:	e17ffe15 	stw	r5,-8(fp)
    dfe8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dfec:	e0bffd17 	ldw	r2,-12(fp)
    dff0:	00c00044 	movi	r3,1
    dff4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	10800017 	ldw	r2,0(r2)
    e000:	10800104 	addi	r2,r2,4
    e004:	1007883a 	mov	r3,r2
    e008:	e0bffd17 	ldw	r2,-12(fp)
    e00c:	10800817 	ldw	r2,32(r2)
    e010:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e014:	e0bffe17 	ldw	r2,-8(fp)
    e018:	e0ffff17 	ldw	r3,-4(fp)
    e01c:	d8000015 	stw	zero,0(sp)
    e020:	e1fffd17 	ldw	r7,-12(fp)
    e024:	01800074 	movhi	r6,1
    e028:	31b82404 	addi	r6,r6,-8048
    e02c:	180b883a 	mov	r5,r3
    e030:	1009883a 	mov	r4,r2
    e034:	000ecd40 	call	ecd4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e038:	e0bffd17 	ldw	r2,-12(fp)
    e03c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e040:	e0bffd17 	ldw	r2,-12(fp)
    e044:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e048:	d0e6d417 	ldw	r3,-25776(gp)
    e04c:	e1fffd17 	ldw	r7,-12(fp)
    e050:	01800074 	movhi	r6,1
    e054:	31b8a704 	addi	r6,r6,-7524
    e058:	180b883a 	mov	r5,r3
    e05c:	1009883a 	mov	r4,r2
    e060:	000e9c80 	call	e9c8 <alt_alarm_start>
    e064:	1000040e 	bge	r2,zero,e078 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e068:	e0fffd17 	ldw	r3,-12(fp)
    e06c:	00a00034 	movhi	r2,32768
    e070:	10bfffc4 	addi	r2,r2,-1
    e074:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e078:	0001883a 	nop
    e07c:	e037883a 	mov	sp,fp
    e080:	dfc00117 	ldw	ra,4(sp)
    e084:	df000017 	ldw	fp,0(sp)
    e088:	dec00204 	addi	sp,sp,8
    e08c:	f800283a 	ret

0000e090 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e090:	defff804 	addi	sp,sp,-32
    e094:	df000715 	stw	fp,28(sp)
    e098:	df000704 	addi	fp,sp,28
    e09c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e0a0:	e0bfff17 	ldw	r2,-4(fp)
    e0a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e0a8:	e0bffb17 	ldw	r2,-20(fp)
    e0ac:	10800017 	ldw	r2,0(r2)
    e0b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e0b4:	e0bffc17 	ldw	r2,-16(fp)
    e0b8:	10800104 	addi	r2,r2,4
    e0bc:	10800037 	ldwio	r2,0(r2)
    e0c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e0c4:	e0bffd17 	ldw	r2,-12(fp)
    e0c8:	1080c00c 	andi	r2,r2,768
    e0cc:	10006d26 	beq	r2,zero,e284 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	1080400c 	andi	r2,r2,256
    e0d8:	10003526 	beq	r2,zero,e1b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e0dc:	00800074 	movhi	r2,1
    e0e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0e4:	e0bffb17 	ldw	r2,-20(fp)
    e0e8:	10800a17 	ldw	r2,40(r2)
    e0ec:	10800044 	addi	r2,r2,1
    e0f0:	1081ffcc 	andi	r2,r2,2047
    e0f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e0f8:	e0bffb17 	ldw	r2,-20(fp)
    e0fc:	10c00b17 	ldw	r3,44(r2)
    e100:	e0bffe17 	ldw	r2,-8(fp)
    e104:	18801526 	beq	r3,r2,e15c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e108:	e0bffc17 	ldw	r2,-16(fp)
    e10c:	10800037 	ldwio	r2,0(r2)
    e110:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e114:	e0bff917 	ldw	r2,-28(fp)
    e118:	10a0000c 	andi	r2,r2,32768
    e11c:	10001126 	beq	r2,zero,e164 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e120:	e0bffb17 	ldw	r2,-20(fp)
    e124:	10800a17 	ldw	r2,40(r2)
    e128:	e0fff917 	ldw	r3,-28(fp)
    e12c:	1809883a 	mov	r4,r3
    e130:	e0fffb17 	ldw	r3,-20(fp)
    e134:	1885883a 	add	r2,r3,r2
    e138:	10800e04 	addi	r2,r2,56
    e13c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e140:	e0bffb17 	ldw	r2,-20(fp)
    e144:	10800a17 	ldw	r2,40(r2)
    e148:	10800044 	addi	r2,r2,1
    e14c:	10c1ffcc 	andi	r3,r2,2047
    e150:	e0bffb17 	ldw	r2,-20(fp)
    e154:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e158:	003fe206 	br	e0e4 <__alt_exception_stack_pointer+0xf800e0e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e15c:	0001883a 	nop
    e160:	00000106 	br	e168 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e164:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e168:	e0bff917 	ldw	r2,-28(fp)
    e16c:	10bfffec 	andhi	r2,r2,65535
    e170:	10000f26 	beq	r2,zero,e1b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e174:	e0bffb17 	ldw	r2,-20(fp)
    e178:	10c00817 	ldw	r3,32(r2)
    e17c:	00bfff84 	movi	r2,-2
    e180:	1886703a 	and	r3,r3,r2
    e184:	e0bffb17 	ldw	r2,-20(fp)
    e188:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e18c:	e0bffc17 	ldw	r2,-16(fp)
    e190:	10800104 	addi	r2,r2,4
    e194:	1007883a 	mov	r3,r2
    e198:	e0bffb17 	ldw	r2,-20(fp)
    e19c:	10800817 	ldw	r2,32(r2)
    e1a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e1a4:	e0bffc17 	ldw	r2,-16(fp)
    e1a8:	10800104 	addi	r2,r2,4
    e1ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e1b0:	e0bffd17 	ldw	r2,-12(fp)
    e1b4:	1080800c 	andi	r2,r2,512
    e1b8:	103fbe26 	beq	r2,zero,e0b4 <__alt_exception_stack_pointer+0xf800e0b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e1bc:	e0bffd17 	ldw	r2,-12(fp)
    e1c0:	1004d43a 	srli	r2,r2,16
    e1c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e1c8:	00001406 	br	e21c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e1cc:	e0bffc17 	ldw	r2,-16(fp)
    e1d0:	e0fffb17 	ldw	r3,-20(fp)
    e1d4:	18c00d17 	ldw	r3,52(r3)
    e1d8:	e13ffb17 	ldw	r4,-20(fp)
    e1dc:	20c7883a 	add	r3,r4,r3
    e1e0:	18c20e04 	addi	r3,r3,2104
    e1e4:	18c00003 	ldbu	r3,0(r3)
    e1e8:	18c03fcc 	andi	r3,r3,255
    e1ec:	18c0201c 	xori	r3,r3,128
    e1f0:	18ffe004 	addi	r3,r3,-128
    e1f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e1f8:	e0bffb17 	ldw	r2,-20(fp)
    e1fc:	10800d17 	ldw	r2,52(r2)
    e200:	10800044 	addi	r2,r2,1
    e204:	10c1ffcc 	andi	r3,r2,2047
    e208:	e0bffb17 	ldw	r2,-20(fp)
    e20c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e210:	e0bffa17 	ldw	r2,-24(fp)
    e214:	10bfffc4 	addi	r2,r2,-1
    e218:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e21c:	e0bffa17 	ldw	r2,-24(fp)
    e220:	10000526 	beq	r2,zero,e238 <altera_avalon_jtag_uart_irq+0x1a8>
    e224:	e0bffb17 	ldw	r2,-20(fp)
    e228:	10c00d17 	ldw	r3,52(r2)
    e22c:	e0bffb17 	ldw	r2,-20(fp)
    e230:	10800c17 	ldw	r2,48(r2)
    e234:	18bfe51e 	bne	r3,r2,e1cc <__alt_exception_stack_pointer+0xf800e1cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e238:	e0bffa17 	ldw	r2,-24(fp)
    e23c:	103f9d26 	beq	r2,zero,e0b4 <__alt_exception_stack_pointer+0xf800e0b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e240:	e0bffb17 	ldw	r2,-20(fp)
    e244:	10c00817 	ldw	r3,32(r2)
    e248:	00bfff44 	movi	r2,-3
    e24c:	1886703a 	and	r3,r3,r2
    e250:	e0bffb17 	ldw	r2,-20(fp)
    e254:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e258:	e0bffb17 	ldw	r2,-20(fp)
    e25c:	10800017 	ldw	r2,0(r2)
    e260:	10800104 	addi	r2,r2,4
    e264:	1007883a 	mov	r3,r2
    e268:	e0bffb17 	ldw	r2,-20(fp)
    e26c:	10800817 	ldw	r2,32(r2)
    e270:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e274:	e0bffc17 	ldw	r2,-16(fp)
    e278:	10800104 	addi	r2,r2,4
    e27c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e280:	003f8c06 	br	e0b4 <__alt_exception_stack_pointer+0xf800e0b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e284:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e288:	0001883a 	nop
    e28c:	e037883a 	mov	sp,fp
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00104 	addi	sp,sp,4
    e298:	f800283a 	ret

0000e29c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e29c:	defff804 	addi	sp,sp,-32
    e2a0:	df000715 	stw	fp,28(sp)
    e2a4:	df000704 	addi	fp,sp,28
    e2a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e2ac:	e0bffb17 	ldw	r2,-20(fp)
    e2b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e2b4:	e0bff917 	ldw	r2,-28(fp)
    e2b8:	10800017 	ldw	r2,0(r2)
    e2bc:	10800104 	addi	r2,r2,4
    e2c0:	10800037 	ldwio	r2,0(r2)
    e2c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e2c8:	e0bffa17 	ldw	r2,-24(fp)
    e2cc:	1081000c 	andi	r2,r2,1024
    e2d0:	10000b26 	beq	r2,zero,e300 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e2d4:	e0bff917 	ldw	r2,-28(fp)
    e2d8:	10800017 	ldw	r2,0(r2)
    e2dc:	10800104 	addi	r2,r2,4
    e2e0:	1007883a 	mov	r3,r2
    e2e4:	e0bff917 	ldw	r2,-28(fp)
    e2e8:	10800817 	ldw	r2,32(r2)
    e2ec:	10810014 	ori	r2,r2,1024
    e2f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e2f4:	e0bff917 	ldw	r2,-28(fp)
    e2f8:	10000915 	stw	zero,36(r2)
    e2fc:	00000a06 	br	e328 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e300:	e0bff917 	ldw	r2,-28(fp)
    e304:	10c00917 	ldw	r3,36(r2)
    e308:	00a00034 	movhi	r2,32768
    e30c:	10bfff04 	addi	r2,r2,-4
    e310:	10c00536 	bltu	r2,r3,e328 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e314:	e0bff917 	ldw	r2,-28(fp)
    e318:	10800917 	ldw	r2,36(r2)
    e31c:	10c00044 	addi	r3,r2,1
    e320:	e0bff917 	ldw	r2,-28(fp)
    e324:	10c00915 	stw	r3,36(r2)
    e328:	d0a6d417 	ldw	r2,-25776(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e32c:	e037883a 	mov	sp,fp
    e330:	df000017 	ldw	fp,0(sp)
    e334:	dec00104 	addi	sp,sp,4
    e338:	f800283a 	ret

0000e33c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e33c:	defffd04 	addi	sp,sp,-12
    e340:	df000215 	stw	fp,8(sp)
    e344:	df000204 	addi	fp,sp,8
    e348:	e13ffe15 	stw	r4,-8(fp)
    e34c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e350:	00000506 	br	e368 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	1090000c 	andi	r2,r2,16384
    e35c:	10000226 	beq	r2,zero,e368 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e360:	00bffd44 	movi	r2,-11
    e364:	00000b06 	br	e394 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e368:	e0bffe17 	ldw	r2,-8(fp)
    e36c:	10c00d17 	ldw	r3,52(r2)
    e370:	e0bffe17 	ldw	r2,-8(fp)
    e374:	10800c17 	ldw	r2,48(r2)
    e378:	18800526 	beq	r3,r2,e390 <altera_avalon_jtag_uart_close+0x54>
    e37c:	e0bffe17 	ldw	r2,-8(fp)
    e380:	10c00917 	ldw	r3,36(r2)
    e384:	e0bffe17 	ldw	r2,-8(fp)
    e388:	10800117 	ldw	r2,4(r2)
    e38c:	18bff136 	bltu	r3,r2,e354 <__alt_exception_stack_pointer+0xf800e354>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e390:	0005883a 	mov	r2,zero
}
    e394:	e037883a 	mov	sp,fp
    e398:	df000017 	ldw	fp,0(sp)
    e39c:	dec00104 	addi	sp,sp,4
    e3a0:	f800283a 	ret

0000e3a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e3a4:	defffa04 	addi	sp,sp,-24
    e3a8:	df000515 	stw	fp,20(sp)
    e3ac:	df000504 	addi	fp,sp,20
    e3b0:	e13ffd15 	stw	r4,-12(fp)
    e3b4:	e17ffe15 	stw	r5,-8(fp)
    e3b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e3bc:	00bff9c4 	movi	r2,-25
    e3c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e3c4:	e0bffe17 	ldw	r2,-8(fp)
    e3c8:	10da8060 	cmpeqi	r3,r2,27137
    e3cc:	1800031e 	bne	r3,zero,e3dc <altera_avalon_jtag_uart_ioctl+0x38>
    e3d0:	109a80a0 	cmpeqi	r2,r2,27138
    e3d4:	1000181e 	bne	r2,zero,e438 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e3d8:	00002906 	br	e480 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e3dc:	e0bffd17 	ldw	r2,-12(fp)
    e3e0:	10c00117 	ldw	r3,4(r2)
    e3e4:	00a00034 	movhi	r2,32768
    e3e8:	10bfffc4 	addi	r2,r2,-1
    e3ec:	18802126 	beq	r3,r2,e474 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e3f0:	e0bfff17 	ldw	r2,-4(fp)
    e3f4:	10800017 	ldw	r2,0(r2)
    e3f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e3fc:	e0bffc17 	ldw	r2,-16(fp)
    e400:	10800090 	cmplti	r2,r2,2
    e404:	1000061e 	bne	r2,zero,e420 <altera_avalon_jtag_uart_ioctl+0x7c>
    e408:	e0fffc17 	ldw	r3,-16(fp)
    e40c:	00a00034 	movhi	r2,32768
    e410:	10bfffc4 	addi	r2,r2,-1
    e414:	18800226 	beq	r3,r2,e420 <altera_avalon_jtag_uart_ioctl+0x7c>
    e418:	e0bffc17 	ldw	r2,-16(fp)
    e41c:	00000206 	br	e428 <altera_avalon_jtag_uart_ioctl+0x84>
    e420:	00a00034 	movhi	r2,32768
    e424:	10bfff84 	addi	r2,r2,-2
    e428:	e0fffd17 	ldw	r3,-12(fp)
    e42c:	18800115 	stw	r2,4(r3)
      rc = 0;
    e430:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e434:	00000f06 	br	e474 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e438:	e0bffd17 	ldw	r2,-12(fp)
    e43c:	10c00117 	ldw	r3,4(r2)
    e440:	00a00034 	movhi	r2,32768
    e444:	10bfffc4 	addi	r2,r2,-1
    e448:	18800c26 	beq	r3,r2,e47c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e44c:	e0bffd17 	ldw	r2,-12(fp)
    e450:	10c00917 	ldw	r3,36(r2)
    e454:	e0bffd17 	ldw	r2,-12(fp)
    e458:	10800117 	ldw	r2,4(r2)
    e45c:	1885803a 	cmpltu	r2,r3,r2
    e460:	10c03fcc 	andi	r3,r2,255
    e464:	e0bfff17 	ldw	r2,-4(fp)
    e468:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e46c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e470:	00000206 	br	e47c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e474:	0001883a 	nop
    e478:	00000106 	br	e480 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e47c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e480:	e0bffb17 	ldw	r2,-20(fp)
}
    e484:	e037883a 	mov	sp,fp
    e488:	df000017 	ldw	fp,0(sp)
    e48c:	dec00104 	addi	sp,sp,4
    e490:	f800283a 	ret

0000e494 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e494:	defff304 	addi	sp,sp,-52
    e498:	dfc00c15 	stw	ra,48(sp)
    e49c:	df000b15 	stw	fp,44(sp)
    e4a0:	df000b04 	addi	fp,sp,44
    e4a4:	e13ffc15 	stw	r4,-16(fp)
    e4a8:	e17ffd15 	stw	r5,-12(fp)
    e4ac:	e1bffe15 	stw	r6,-8(fp)
    e4b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e4b4:	e0bffd17 	ldw	r2,-12(fp)
    e4b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e4bc:	00004706 	br	e5dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e4c0:	e0bffc17 	ldw	r2,-16(fp)
    e4c4:	10800a17 	ldw	r2,40(r2)
    e4c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e4cc:	e0bffc17 	ldw	r2,-16(fp)
    e4d0:	10800b17 	ldw	r2,44(r2)
    e4d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e4d8:	e0fff717 	ldw	r3,-36(fp)
    e4dc:	e0bff817 	ldw	r2,-32(fp)
    e4e0:	18800536 	bltu	r3,r2,e4f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e4e4:	e0fff717 	ldw	r3,-36(fp)
    e4e8:	e0bff817 	ldw	r2,-32(fp)
    e4ec:	1885c83a 	sub	r2,r3,r2
    e4f0:	e0bff615 	stw	r2,-40(fp)
    e4f4:	00000406 	br	e508 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e4f8:	00c20004 	movi	r3,2048
    e4fc:	e0bff817 	ldw	r2,-32(fp)
    e500:	1885c83a 	sub	r2,r3,r2
    e504:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e508:	e0bff617 	ldw	r2,-40(fp)
    e50c:	10001e26 	beq	r2,zero,e588 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e510:	e0fffe17 	ldw	r3,-8(fp)
    e514:	e0bff617 	ldw	r2,-40(fp)
    e518:	1880022e 	bgeu	r3,r2,e524 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e51c:	e0bffe17 	ldw	r2,-8(fp)
    e520:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e524:	e0bffc17 	ldw	r2,-16(fp)
    e528:	10c00e04 	addi	r3,r2,56
    e52c:	e0bff817 	ldw	r2,-32(fp)
    e530:	1885883a 	add	r2,r3,r2
    e534:	e1bff617 	ldw	r6,-40(fp)
    e538:	100b883a 	mov	r5,r2
    e53c:	e13ff517 	ldw	r4,-44(fp)
    e540:	0005d900 	call	5d90 <memcpy>
      ptr   += n;
    e544:	e0fff517 	ldw	r3,-44(fp)
    e548:	e0bff617 	ldw	r2,-40(fp)
    e54c:	1885883a 	add	r2,r3,r2
    e550:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e554:	e0fffe17 	ldw	r3,-8(fp)
    e558:	e0bff617 	ldw	r2,-40(fp)
    e55c:	1885c83a 	sub	r2,r3,r2
    e560:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e564:	e0fff817 	ldw	r3,-32(fp)
    e568:	e0bff617 	ldw	r2,-40(fp)
    e56c:	1885883a 	add	r2,r3,r2
    e570:	10c1ffcc 	andi	r3,r2,2047
    e574:	e0bffc17 	ldw	r2,-16(fp)
    e578:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e57c:	e0bffe17 	ldw	r2,-8(fp)
    e580:	00bfcf16 	blt	zero,r2,e4c0 <__alt_exception_stack_pointer+0xf800e4c0>
    e584:	00000106 	br	e58c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e588:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e58c:	e0fff517 	ldw	r3,-44(fp)
    e590:	e0bffd17 	ldw	r2,-12(fp)
    e594:	1880141e 	bne	r3,r2,e5e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e598:	e0bfff17 	ldw	r2,-4(fp)
    e59c:	1090000c 	andi	r2,r2,16384
    e5a0:	1000131e 	bne	r2,zero,e5f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e5a4:	0001883a 	nop
    e5a8:	e0bffc17 	ldw	r2,-16(fp)
    e5ac:	10c00a17 	ldw	r3,40(r2)
    e5b0:	e0bff717 	ldw	r2,-36(fp)
    e5b4:	1880051e 	bne	r3,r2,e5cc <altera_avalon_jtag_uart_read+0x138>
    e5b8:	e0bffc17 	ldw	r2,-16(fp)
    e5bc:	10c00917 	ldw	r3,36(r2)
    e5c0:	e0bffc17 	ldw	r2,-16(fp)
    e5c4:	10800117 	ldw	r2,4(r2)
    e5c8:	18bff736 	bltu	r3,r2,e5a8 <__alt_exception_stack_pointer+0xf800e5a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e5cc:	e0bffc17 	ldw	r2,-16(fp)
    e5d0:	10c00a17 	ldw	r3,40(r2)
    e5d4:	e0bff717 	ldw	r2,-36(fp)
    e5d8:	18800726 	beq	r3,r2,e5f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e5dc:	e0bffe17 	ldw	r2,-8(fp)
    e5e0:	00bfb716 	blt	zero,r2,e4c0 <__alt_exception_stack_pointer+0xf800e4c0>
    e5e4:	00000506 	br	e5fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e5e8:	0001883a 	nop
    e5ec:	00000306 	br	e5fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e5f0:	0001883a 	nop
    e5f4:	00000106 	br	e5fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e5f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e5fc:	e0fff517 	ldw	r3,-44(fp)
    e600:	e0bffd17 	ldw	r2,-12(fp)
    e604:	18801826 	beq	r3,r2,e668 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e608:	0005303a 	rdctl	r2,status
    e60c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e610:	e0fffb17 	ldw	r3,-20(fp)
    e614:	00bfff84 	movi	r2,-2
    e618:	1884703a 	and	r2,r3,r2
    e61c:	1001703a 	wrctl	status,r2
  
  return context;
    e620:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e624:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e628:	e0bffc17 	ldw	r2,-16(fp)
    e62c:	10800817 	ldw	r2,32(r2)
    e630:	10c00054 	ori	r3,r2,1
    e634:	e0bffc17 	ldw	r2,-16(fp)
    e638:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e63c:	e0bffc17 	ldw	r2,-16(fp)
    e640:	10800017 	ldw	r2,0(r2)
    e644:	10800104 	addi	r2,r2,4
    e648:	1007883a 	mov	r3,r2
    e64c:	e0bffc17 	ldw	r2,-16(fp)
    e650:	10800817 	ldw	r2,32(r2)
    e654:	18800035 	stwio	r2,0(r3)
    e658:	e0bffa17 	ldw	r2,-24(fp)
    e65c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e660:	e0bff917 	ldw	r2,-28(fp)
    e664:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e668:	e0fff517 	ldw	r3,-44(fp)
    e66c:	e0bffd17 	ldw	r2,-12(fp)
    e670:	18800426 	beq	r3,r2,e684 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e674:	e0fff517 	ldw	r3,-44(fp)
    e678:	e0bffd17 	ldw	r2,-12(fp)
    e67c:	1885c83a 	sub	r2,r3,r2
    e680:	00000606 	br	e69c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e684:	e0bfff17 	ldw	r2,-4(fp)
    e688:	1090000c 	andi	r2,r2,16384
    e68c:	10000226 	beq	r2,zero,e698 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e690:	00bffd44 	movi	r2,-11
    e694:	00000106 	br	e69c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e698:	00bffec4 	movi	r2,-5
}
    e69c:	e037883a 	mov	sp,fp
    e6a0:	dfc00117 	ldw	ra,4(sp)
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00204 	addi	sp,sp,8
    e6ac:	f800283a 	ret

0000e6b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e6b0:	defff304 	addi	sp,sp,-52
    e6b4:	dfc00c15 	stw	ra,48(sp)
    e6b8:	df000b15 	stw	fp,44(sp)
    e6bc:	df000b04 	addi	fp,sp,44
    e6c0:	e13ffc15 	stw	r4,-16(fp)
    e6c4:	e17ffd15 	stw	r5,-12(fp)
    e6c8:	e1bffe15 	stw	r6,-8(fp)
    e6cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e6d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e6d4:	e0bffd17 	ldw	r2,-12(fp)
    e6d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e6dc:	00003706 	br	e7bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e6e0:	e0bffc17 	ldw	r2,-16(fp)
    e6e4:	10800c17 	ldw	r2,48(r2)
    e6e8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e6ec:	e0bffc17 	ldw	r2,-16(fp)
    e6f0:	10800d17 	ldw	r2,52(r2)
    e6f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e6f8:	e0fff917 	ldw	r3,-28(fp)
    e6fc:	e0bff517 	ldw	r2,-44(fp)
    e700:	1880062e 	bgeu	r3,r2,e71c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e704:	e0fff517 	ldw	r3,-44(fp)
    e708:	e0bff917 	ldw	r2,-28(fp)
    e70c:	1885c83a 	sub	r2,r3,r2
    e710:	10bfffc4 	addi	r2,r2,-1
    e714:	e0bff615 	stw	r2,-40(fp)
    e718:	00000b06 	br	e748 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e71c:	e0bff517 	ldw	r2,-44(fp)
    e720:	10000526 	beq	r2,zero,e738 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e724:	00c20004 	movi	r3,2048
    e728:	e0bff917 	ldw	r2,-28(fp)
    e72c:	1885c83a 	sub	r2,r3,r2
    e730:	e0bff615 	stw	r2,-40(fp)
    e734:	00000406 	br	e748 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e738:	00c1ffc4 	movi	r3,2047
    e73c:	e0bff917 	ldw	r2,-28(fp)
    e740:	1885c83a 	sub	r2,r3,r2
    e744:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e748:	e0bff617 	ldw	r2,-40(fp)
    e74c:	10001e26 	beq	r2,zero,e7c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e750:	e0fffe17 	ldw	r3,-8(fp)
    e754:	e0bff617 	ldw	r2,-40(fp)
    e758:	1880022e 	bgeu	r3,r2,e764 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e75c:	e0bffe17 	ldw	r2,-8(fp)
    e760:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e764:	e0bffc17 	ldw	r2,-16(fp)
    e768:	10c20e04 	addi	r3,r2,2104
    e76c:	e0bff917 	ldw	r2,-28(fp)
    e770:	1885883a 	add	r2,r3,r2
    e774:	e1bff617 	ldw	r6,-40(fp)
    e778:	e17ffd17 	ldw	r5,-12(fp)
    e77c:	1009883a 	mov	r4,r2
    e780:	0005d900 	call	5d90 <memcpy>
      ptr   += n;
    e784:	e0fffd17 	ldw	r3,-12(fp)
    e788:	e0bff617 	ldw	r2,-40(fp)
    e78c:	1885883a 	add	r2,r3,r2
    e790:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e794:	e0fffe17 	ldw	r3,-8(fp)
    e798:	e0bff617 	ldw	r2,-40(fp)
    e79c:	1885c83a 	sub	r2,r3,r2
    e7a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e7a4:	e0fff917 	ldw	r3,-28(fp)
    e7a8:	e0bff617 	ldw	r2,-40(fp)
    e7ac:	1885883a 	add	r2,r3,r2
    e7b0:	10c1ffcc 	andi	r3,r2,2047
    e7b4:	e0bffc17 	ldw	r2,-16(fp)
    e7b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e7bc:	e0bffe17 	ldw	r2,-8(fp)
    e7c0:	00bfc716 	blt	zero,r2,e6e0 <__alt_exception_stack_pointer+0xf800e6e0>
    e7c4:	00000106 	br	e7cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e7c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7cc:	0005303a 	rdctl	r2,status
    e7d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7d4:	e0fffb17 	ldw	r3,-20(fp)
    e7d8:	00bfff84 	movi	r2,-2
    e7dc:	1884703a 	and	r2,r3,r2
    e7e0:	1001703a 	wrctl	status,r2
  
  return context;
    e7e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e7e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e7ec:	e0bffc17 	ldw	r2,-16(fp)
    e7f0:	10800817 	ldw	r2,32(r2)
    e7f4:	10c00094 	ori	r3,r2,2
    e7f8:	e0bffc17 	ldw	r2,-16(fp)
    e7fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e800:	e0bffc17 	ldw	r2,-16(fp)
    e804:	10800017 	ldw	r2,0(r2)
    e808:	10800104 	addi	r2,r2,4
    e80c:	1007883a 	mov	r3,r2
    e810:	e0bffc17 	ldw	r2,-16(fp)
    e814:	10800817 	ldw	r2,32(r2)
    e818:	18800035 	stwio	r2,0(r3)
    e81c:	e0bffa17 	ldw	r2,-24(fp)
    e820:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e824:	e0bff817 	ldw	r2,-32(fp)
    e828:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e82c:	e0bffe17 	ldw	r2,-8(fp)
    e830:	0080100e 	bge	zero,r2,e874 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e834:	e0bfff17 	ldw	r2,-4(fp)
    e838:	1090000c 	andi	r2,r2,16384
    e83c:	1000101e 	bne	r2,zero,e880 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e840:	0001883a 	nop
    e844:	e0bffc17 	ldw	r2,-16(fp)
    e848:	10c00d17 	ldw	r3,52(r2)
    e84c:	e0bff517 	ldw	r2,-44(fp)
    e850:	1880051e 	bne	r3,r2,e868 <altera_avalon_jtag_uart_write+0x1b8>
    e854:	e0bffc17 	ldw	r2,-16(fp)
    e858:	10c00917 	ldw	r3,36(r2)
    e85c:	e0bffc17 	ldw	r2,-16(fp)
    e860:	10800117 	ldw	r2,4(r2)
    e864:	18bff736 	bltu	r3,r2,e844 <__alt_exception_stack_pointer+0xf800e844>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e868:	e0bffc17 	ldw	r2,-16(fp)
    e86c:	10800917 	ldw	r2,36(r2)
    e870:	1000051e 	bne	r2,zero,e888 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e874:	e0bffe17 	ldw	r2,-8(fp)
    e878:	00bfd016 	blt	zero,r2,e7bc <__alt_exception_stack_pointer+0xf800e7bc>
    e87c:	00000306 	br	e88c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e880:	0001883a 	nop
    e884:	00000106 	br	e88c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e888:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e88c:	e0fffd17 	ldw	r3,-12(fp)
    e890:	e0bff717 	ldw	r2,-36(fp)
    e894:	18800426 	beq	r3,r2,e8a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e898:	e0fffd17 	ldw	r3,-12(fp)
    e89c:	e0bff717 	ldw	r2,-36(fp)
    e8a0:	1885c83a 	sub	r2,r3,r2
    e8a4:	00000606 	br	e8c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e8a8:	e0bfff17 	ldw	r2,-4(fp)
    e8ac:	1090000c 	andi	r2,r2,16384
    e8b0:	10000226 	beq	r2,zero,e8bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e8b4:	00bffd44 	movi	r2,-11
    e8b8:	00000106 	br	e8c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e8bc:	00bffec4 	movi	r2,-5
}
    e8c0:	e037883a 	mov	sp,fp
    e8c4:	dfc00117 	ldw	ra,4(sp)
    e8c8:	df000017 	ldw	fp,0(sp)
    e8cc:	dec00204 	addi	sp,sp,8
    e8d0:	f800283a 	ret

0000e8d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e8d4:	defffa04 	addi	sp,sp,-24
    e8d8:	dfc00515 	stw	ra,20(sp)
    e8dc:	df000415 	stw	fp,16(sp)
    e8e0:	df000404 	addi	fp,sp,16
    e8e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e8e8:	0007883a 	mov	r3,zero
    e8ec:	e0bfff17 	ldw	r2,-4(fp)
    e8f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e8f4:	e0bfff17 	ldw	r2,-4(fp)
    e8f8:	10800104 	addi	r2,r2,4
    e8fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e900:	0005303a 	rdctl	r2,status
    e904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e908:	e0fffd17 	ldw	r3,-12(fp)
    e90c:	00bfff84 	movi	r2,-2
    e910:	1884703a 	and	r2,r3,r2
    e914:	1001703a 	wrctl	status,r2
  
  return context;
    e918:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e91c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e920:	000f3f40 	call	f3f4 <alt_tick>
    e924:	e0bffc17 	ldw	r2,-16(fp)
    e928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e92c:	e0bffe17 	ldw	r2,-8(fp)
    e930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e934:	0001883a 	nop
    e938:	e037883a 	mov	sp,fp
    e93c:	dfc00117 	ldw	ra,4(sp)
    e940:	df000017 	ldw	fp,0(sp)
    e944:	dec00204 	addi	sp,sp,8
    e948:	f800283a 	ret

0000e94c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e94c:	defff804 	addi	sp,sp,-32
    e950:	dfc00715 	stw	ra,28(sp)
    e954:	df000615 	stw	fp,24(sp)
    e958:	df000604 	addi	fp,sp,24
    e95c:	e13ffc15 	stw	r4,-16(fp)
    e960:	e17ffd15 	stw	r5,-12(fp)
    e964:	e1bffe15 	stw	r6,-8(fp)
    e968:	e1ffff15 	stw	r7,-4(fp)
    e96c:	e0bfff17 	ldw	r2,-4(fp)
    e970:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e974:	d0a6d417 	ldw	r2,-25776(gp)
    e978:	1000021e 	bne	r2,zero,e984 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e97c:	e0bffb17 	ldw	r2,-20(fp)
    e980:	d0a6d415 	stw	r2,-25776(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e984:	e0bffc17 	ldw	r2,-16(fp)
    e988:	10800104 	addi	r2,r2,4
    e98c:	00c001c4 	movi	r3,7
    e990:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e994:	d8000015 	stw	zero,0(sp)
    e998:	e1fffc17 	ldw	r7,-16(fp)
    e99c:	01800074 	movhi	r6,1
    e9a0:	31ba3504 	addi	r6,r6,-5932
    e9a4:	e17ffe17 	ldw	r5,-8(fp)
    e9a8:	e13ffd17 	ldw	r4,-12(fp)
    e9ac:	000ecd40 	call	ecd4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e9b0:	0001883a 	nop
    e9b4:	e037883a 	mov	sp,fp
    e9b8:	dfc00117 	ldw	ra,4(sp)
    e9bc:	df000017 	ldw	fp,0(sp)
    e9c0:	dec00204 	addi	sp,sp,8
    e9c4:	f800283a 	ret

0000e9c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e9c8:	defff504 	addi	sp,sp,-44
    e9cc:	df000a15 	stw	fp,40(sp)
    e9d0:	df000a04 	addi	fp,sp,40
    e9d4:	e13ffc15 	stw	r4,-16(fp)
    e9d8:	e17ffd15 	stw	r5,-12(fp)
    e9dc:	e1bffe15 	stw	r6,-8(fp)
    e9e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e9e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e9e8:	d0a6d417 	ldw	r2,-25776(gp)
  
  if (alt_ticks_per_second ())
    e9ec:	10003c26 	beq	r2,zero,eae0 <alt_alarm_start+0x118>
  {
    if (alarm)
    e9f0:	e0bffc17 	ldw	r2,-16(fp)
    e9f4:	10003826 	beq	r2,zero,ead8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e9f8:	e0bffc17 	ldw	r2,-16(fp)
    e9fc:	e0fffe17 	ldw	r3,-8(fp)
    ea00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ea04:	e0bffc17 	ldw	r2,-16(fp)
    ea08:	e0ffff17 	ldw	r3,-4(fp)
    ea0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea10:	0005303a 	rdctl	r2,status
    ea14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea18:	e0fff917 	ldw	r3,-28(fp)
    ea1c:	00bfff84 	movi	r2,-2
    ea20:	1884703a 	and	r2,r3,r2
    ea24:	1001703a 	wrctl	status,r2
  
  return context;
    ea28:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ea2c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ea30:	d0a6d517 	ldw	r2,-25772(gp)
      
      current_nticks = alt_nticks();
    ea34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ea38:	e0fffd17 	ldw	r3,-12(fp)
    ea3c:	e0bff617 	ldw	r2,-40(fp)
    ea40:	1885883a 	add	r2,r3,r2
    ea44:	10c00044 	addi	r3,r2,1
    ea48:	e0bffc17 	ldw	r2,-16(fp)
    ea4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ea50:	e0bffc17 	ldw	r2,-16(fp)
    ea54:	10c00217 	ldw	r3,8(r2)
    ea58:	e0bff617 	ldw	r2,-40(fp)
    ea5c:	1880042e 	bgeu	r3,r2,ea70 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ea60:	e0bffc17 	ldw	r2,-16(fp)
    ea64:	00c00044 	movi	r3,1
    ea68:	10c00405 	stb	r3,16(r2)
    ea6c:	00000206 	br	ea78 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ea70:	e0bffc17 	ldw	r2,-16(fp)
    ea74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ea78:	e0bffc17 	ldw	r2,-16(fp)
    ea7c:	d0e00d04 	addi	r3,gp,-32716
    ea80:	e0fffa15 	stw	r3,-24(fp)
    ea84:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ea88:	e0bffb17 	ldw	r2,-20(fp)
    ea8c:	e0fffa17 	ldw	r3,-24(fp)
    ea90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ea94:	e0bffa17 	ldw	r2,-24(fp)
    ea98:	10c00017 	ldw	r3,0(r2)
    ea9c:	e0bffb17 	ldw	r2,-20(fp)
    eaa0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eaa4:	e0bffa17 	ldw	r2,-24(fp)
    eaa8:	10800017 	ldw	r2,0(r2)
    eaac:	e0fffb17 	ldw	r3,-20(fp)
    eab0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eab4:	e0bffa17 	ldw	r2,-24(fp)
    eab8:	e0fffb17 	ldw	r3,-20(fp)
    eabc:	10c00015 	stw	r3,0(r2)
    eac0:	e0bff817 	ldw	r2,-32(fp)
    eac4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eac8:	e0bff717 	ldw	r2,-36(fp)
    eacc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ead0:	0005883a 	mov	r2,zero
    ead4:	00000306 	br	eae4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    ead8:	00bffa84 	movi	r2,-22
    eadc:	00000106 	br	eae4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    eae0:	00bfde84 	movi	r2,-134
  }
}
    eae4:	e037883a 	mov	sp,fp
    eae8:	df000017 	ldw	fp,0(sp)
    eaec:	dec00104 	addi	sp,sp,4
    eaf0:	f800283a 	ret

0000eaf4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    eaf4:	deffff04 	addi	sp,sp,-4
    eaf8:	df000015 	stw	fp,0(sp)
    eafc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    eb00:	0001883a 	nop
    eb04:	e037883a 	mov	sp,fp
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00104 	addi	sp,sp,4
    eb10:	f800283a 	ret

0000eb14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb14:	defffe04 	addi	sp,sp,-8
    eb18:	dfc00115 	stw	ra,4(sp)
    eb1c:	df000015 	stw	fp,0(sp)
    eb20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb24:	d0a00b17 	ldw	r2,-32724(gp)
    eb28:	10000326 	beq	r2,zero,eb38 <alt_get_errno+0x24>
    eb2c:	d0a00b17 	ldw	r2,-32724(gp)
    eb30:	103ee83a 	callr	r2
    eb34:	00000106 	br	eb3c <alt_get_errno+0x28>
    eb38:	d0a6cc04 	addi	r2,gp,-25808
}
    eb3c:	e037883a 	mov	sp,fp
    eb40:	dfc00117 	ldw	ra,4(sp)
    eb44:	df000017 	ldw	fp,0(sp)
    eb48:	dec00204 	addi	sp,sp,8
    eb4c:	f800283a 	ret

0000eb50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    eb50:	defffa04 	addi	sp,sp,-24
    eb54:	dfc00515 	stw	ra,20(sp)
    eb58:	df000415 	stw	fp,16(sp)
    eb5c:	df000404 	addi	fp,sp,16
    eb60:	e13ffe15 	stw	r4,-8(fp)
    eb64:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    eb68:	e0bffe17 	ldw	r2,-8(fp)
    eb6c:	10000326 	beq	r2,zero,eb7c <alt_dev_llist_insert+0x2c>
    eb70:	e0bffe17 	ldw	r2,-8(fp)
    eb74:	10800217 	ldw	r2,8(r2)
    eb78:	1000061e 	bne	r2,zero,eb94 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    eb7c:	000eb140 	call	eb14 <alt_get_errno>
    eb80:	1007883a 	mov	r3,r2
    eb84:	00800584 	movi	r2,22
    eb88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    eb8c:	00bffa84 	movi	r2,-22
    eb90:	00001306 	br	ebe0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    eb94:	e0bffe17 	ldw	r2,-8(fp)
    eb98:	e0ffff17 	ldw	r3,-4(fp)
    eb9c:	e0fffc15 	stw	r3,-16(fp)
    eba0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    eba4:	e0bffd17 	ldw	r2,-12(fp)
    eba8:	e0fffc17 	ldw	r3,-16(fp)
    ebac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ebb0:	e0bffc17 	ldw	r2,-16(fp)
    ebb4:	10c00017 	ldw	r3,0(r2)
    ebb8:	e0bffd17 	ldw	r2,-12(fp)
    ebbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ebc0:	e0bffc17 	ldw	r2,-16(fp)
    ebc4:	10800017 	ldw	r2,0(r2)
    ebc8:	e0fffd17 	ldw	r3,-12(fp)
    ebcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ebd0:	e0bffc17 	ldw	r2,-16(fp)
    ebd4:	e0fffd17 	ldw	r3,-12(fp)
    ebd8:	10c00015 	stw	r3,0(r2)

  return 0;  
    ebdc:	0005883a 	mov	r2,zero
}
    ebe0:	e037883a 	mov	sp,fp
    ebe4:	dfc00117 	ldw	ra,4(sp)
    ebe8:	df000017 	ldw	fp,0(sp)
    ebec:	dec00204 	addi	sp,sp,8
    ebf0:	f800283a 	ret

0000ebf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ebf4:	defffd04 	addi	sp,sp,-12
    ebf8:	dfc00215 	stw	ra,8(sp)
    ebfc:	df000115 	stw	fp,4(sp)
    ec00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ec04:	00800074 	movhi	r2,1
    ec08:	10beea04 	addi	r2,r2,-1112
    ec0c:	e0bfff15 	stw	r2,-4(fp)
    ec10:	00000606 	br	ec2c <_do_ctors+0x38>
        (*ctor) (); 
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	10800017 	ldw	r2,0(r2)
    ec1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ec20:	e0bfff17 	ldw	r2,-4(fp)
    ec24:	10bfff04 	addi	r2,r2,-4
    ec28:	e0bfff15 	stw	r2,-4(fp)
    ec2c:	e0ffff17 	ldw	r3,-4(fp)
    ec30:	00800074 	movhi	r2,1
    ec34:	10beeb04 	addi	r2,r2,-1108
    ec38:	18bff62e 	bgeu	r3,r2,ec14 <__alt_exception_stack_pointer+0xf800ec14>
        (*ctor) (); 
}
    ec3c:	0001883a 	nop
    ec40:	e037883a 	mov	sp,fp
    ec44:	dfc00117 	ldw	ra,4(sp)
    ec48:	df000017 	ldw	fp,0(sp)
    ec4c:	dec00204 	addi	sp,sp,8
    ec50:	f800283a 	ret

0000ec54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ec54:	defffd04 	addi	sp,sp,-12
    ec58:	dfc00215 	stw	ra,8(sp)
    ec5c:	df000115 	stw	fp,4(sp)
    ec60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ec64:	00800074 	movhi	r2,1
    ec68:	10beea04 	addi	r2,r2,-1112
    ec6c:	e0bfff15 	stw	r2,-4(fp)
    ec70:	00000606 	br	ec8c <_do_dtors+0x38>
        (*dtor) (); 
    ec74:	e0bfff17 	ldw	r2,-4(fp)
    ec78:	10800017 	ldw	r2,0(r2)
    ec7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ec80:	e0bfff17 	ldw	r2,-4(fp)
    ec84:	10bfff04 	addi	r2,r2,-4
    ec88:	e0bfff15 	stw	r2,-4(fp)
    ec8c:	e0ffff17 	ldw	r3,-4(fp)
    ec90:	00800074 	movhi	r2,1
    ec94:	10beeb04 	addi	r2,r2,-1108
    ec98:	18bff62e 	bgeu	r3,r2,ec74 <__alt_exception_stack_pointer+0xf800ec74>
        (*dtor) (); 
}
    ec9c:	0001883a 	nop
    eca0:	e037883a 	mov	sp,fp
    eca4:	dfc00117 	ldw	ra,4(sp)
    eca8:	df000017 	ldw	fp,0(sp)
    ecac:	dec00204 	addi	sp,sp,8
    ecb0:	f800283a 	ret

0000ecb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ecb4:	deffff04 	addi	sp,sp,-4
    ecb8:	df000015 	stw	fp,0(sp)
    ecbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ecc0:	0001883a 	nop
    ecc4:	e037883a 	mov	sp,fp
    ecc8:	df000017 	ldw	fp,0(sp)
    eccc:	dec00104 	addi	sp,sp,4
    ecd0:	f800283a 	ret

0000ecd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ecd4:	defff904 	addi	sp,sp,-28
    ecd8:	dfc00615 	stw	ra,24(sp)
    ecdc:	df000515 	stw	fp,20(sp)
    ece0:	df000504 	addi	fp,sp,20
    ece4:	e13ffc15 	stw	r4,-16(fp)
    ece8:	e17ffd15 	stw	r5,-12(fp)
    ecec:	e1bffe15 	stw	r6,-8(fp)
    ecf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ecf4:	e0800217 	ldw	r2,8(fp)
    ecf8:	d8800015 	stw	r2,0(sp)
    ecfc:	e1ffff17 	ldw	r7,-4(fp)
    ed00:	e1bffe17 	ldw	r6,-8(fp)
    ed04:	e17ffd17 	ldw	r5,-12(fp)
    ed08:	e13ffc17 	ldw	r4,-16(fp)
    ed0c:	000ee840 	call	ee84 <alt_iic_isr_register>
}  
    ed10:	e037883a 	mov	sp,fp
    ed14:	dfc00117 	ldw	ra,4(sp)
    ed18:	df000017 	ldw	fp,0(sp)
    ed1c:	dec00204 	addi	sp,sp,8
    ed20:	f800283a 	ret

0000ed24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ed24:	defff904 	addi	sp,sp,-28
    ed28:	df000615 	stw	fp,24(sp)
    ed2c:	df000604 	addi	fp,sp,24
    ed30:	e13ffe15 	stw	r4,-8(fp)
    ed34:	e17fff15 	stw	r5,-4(fp)
    ed38:	e0bfff17 	ldw	r2,-4(fp)
    ed3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed40:	0005303a 	rdctl	r2,status
    ed44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed48:	e0fffb17 	ldw	r3,-20(fp)
    ed4c:	00bfff84 	movi	r2,-2
    ed50:	1884703a 	and	r2,r3,r2
    ed54:	1001703a 	wrctl	status,r2
  
  return context;
    ed58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ed60:	00c00044 	movi	r3,1
    ed64:	e0bffa17 	ldw	r2,-24(fp)
    ed68:	1884983a 	sll	r2,r3,r2
    ed6c:	1007883a 	mov	r3,r2
    ed70:	d0a6d317 	ldw	r2,-25780(gp)
    ed74:	1884b03a 	or	r2,r3,r2
    ed78:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ed7c:	d0a6d317 	ldw	r2,-25780(gp)
    ed80:	100170fa 	wrctl	ienable,r2
    ed84:	e0bffc17 	ldw	r2,-16(fp)
    ed88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed8c:	e0bffd17 	ldw	r2,-12(fp)
    ed90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ed94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ed98:	0001883a 	nop
}
    ed9c:	e037883a 	mov	sp,fp
    eda0:	df000017 	ldw	fp,0(sp)
    eda4:	dec00104 	addi	sp,sp,4
    eda8:	f800283a 	ret

0000edac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    edac:	defff904 	addi	sp,sp,-28
    edb0:	df000615 	stw	fp,24(sp)
    edb4:	df000604 	addi	fp,sp,24
    edb8:	e13ffe15 	stw	r4,-8(fp)
    edbc:	e17fff15 	stw	r5,-4(fp)
    edc0:	e0bfff17 	ldw	r2,-4(fp)
    edc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    edc8:	0005303a 	rdctl	r2,status
    edcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    edd0:	e0fffb17 	ldw	r3,-20(fp)
    edd4:	00bfff84 	movi	r2,-2
    edd8:	1884703a 	and	r2,r3,r2
    eddc:	1001703a 	wrctl	status,r2
  
  return context;
    ede0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ede4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ede8:	00c00044 	movi	r3,1
    edec:	e0bffa17 	ldw	r2,-24(fp)
    edf0:	1884983a 	sll	r2,r3,r2
    edf4:	0084303a 	nor	r2,zero,r2
    edf8:	1007883a 	mov	r3,r2
    edfc:	d0a6d317 	ldw	r2,-25780(gp)
    ee00:	1884703a 	and	r2,r3,r2
    ee04:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ee08:	d0a6d317 	ldw	r2,-25780(gp)
    ee0c:	100170fa 	wrctl	ienable,r2
    ee10:	e0bffc17 	ldw	r2,-16(fp)
    ee14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee18:	e0bffd17 	ldw	r2,-12(fp)
    ee1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ee20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ee24:	0001883a 	nop
}
    ee28:	e037883a 	mov	sp,fp
    ee2c:	df000017 	ldw	fp,0(sp)
    ee30:	dec00104 	addi	sp,sp,4
    ee34:	f800283a 	ret

0000ee38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ee38:	defffc04 	addi	sp,sp,-16
    ee3c:	df000315 	stw	fp,12(sp)
    ee40:	df000304 	addi	fp,sp,12
    ee44:	e13ffe15 	stw	r4,-8(fp)
    ee48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ee4c:	000530fa 	rdctl	r2,ienable
    ee50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ee54:	00c00044 	movi	r3,1
    ee58:	e0bfff17 	ldw	r2,-4(fp)
    ee5c:	1884983a 	sll	r2,r3,r2
    ee60:	1007883a 	mov	r3,r2
    ee64:	e0bffd17 	ldw	r2,-12(fp)
    ee68:	1884703a 	and	r2,r3,r2
    ee6c:	1004c03a 	cmpne	r2,r2,zero
    ee70:	10803fcc 	andi	r2,r2,255
}
    ee74:	e037883a 	mov	sp,fp
    ee78:	df000017 	ldw	fp,0(sp)
    ee7c:	dec00104 	addi	sp,sp,4
    ee80:	f800283a 	ret

0000ee84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ee84:	defff504 	addi	sp,sp,-44
    ee88:	dfc00a15 	stw	ra,40(sp)
    ee8c:	df000915 	stw	fp,36(sp)
    ee90:	df000904 	addi	fp,sp,36
    ee94:	e13ffc15 	stw	r4,-16(fp)
    ee98:	e17ffd15 	stw	r5,-12(fp)
    ee9c:	e1bffe15 	stw	r6,-8(fp)
    eea0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    eea4:	00bffa84 	movi	r2,-22
    eea8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    eeac:	e0bffd17 	ldw	r2,-12(fp)
    eeb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    eeb4:	e0bff817 	ldw	r2,-32(fp)
    eeb8:	10800808 	cmpgei	r2,r2,32
    eebc:	1000271e 	bne	r2,zero,ef5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eec0:	0005303a 	rdctl	r2,status
    eec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eec8:	e0fffb17 	ldw	r3,-20(fp)
    eecc:	00bfff84 	movi	r2,-2
    eed0:	1884703a 	and	r2,r3,r2
    eed4:	1001703a 	wrctl	status,r2
  
  return context;
    eed8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    eedc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    eee0:	00800074 	movhi	r2,1
    eee4:	108d3a04 	addi	r2,r2,13544
    eee8:	e0fff817 	ldw	r3,-32(fp)
    eeec:	180690fa 	slli	r3,r3,3
    eef0:	10c5883a 	add	r2,r2,r3
    eef4:	e0fffe17 	ldw	r3,-8(fp)
    eef8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    eefc:	00800074 	movhi	r2,1
    ef00:	108d3a04 	addi	r2,r2,13544
    ef04:	e0fff817 	ldw	r3,-32(fp)
    ef08:	180690fa 	slli	r3,r3,3
    ef0c:	10c5883a 	add	r2,r2,r3
    ef10:	10800104 	addi	r2,r2,4
    ef14:	e0ffff17 	ldw	r3,-4(fp)
    ef18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ef1c:	e0bffe17 	ldw	r2,-8(fp)
    ef20:	10000526 	beq	r2,zero,ef38 <alt_iic_isr_register+0xb4>
    ef24:	e0bff817 	ldw	r2,-32(fp)
    ef28:	100b883a 	mov	r5,r2
    ef2c:	e13ffc17 	ldw	r4,-16(fp)
    ef30:	000ed240 	call	ed24 <alt_ic_irq_enable>
    ef34:	00000406 	br	ef48 <alt_iic_isr_register+0xc4>
    ef38:	e0bff817 	ldw	r2,-32(fp)
    ef3c:	100b883a 	mov	r5,r2
    ef40:	e13ffc17 	ldw	r4,-16(fp)
    ef44:	000edac0 	call	edac <alt_ic_irq_disable>
    ef48:	e0bff715 	stw	r2,-36(fp)
    ef4c:	e0bffa17 	ldw	r2,-24(fp)
    ef50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef54:	e0bff917 	ldw	r2,-28(fp)
    ef58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ef5c:	e0bff717 	ldw	r2,-36(fp)
}
    ef60:	e037883a 	mov	sp,fp
    ef64:	dfc00117 	ldw	ra,4(sp)
    ef68:	df000017 	ldw	fp,0(sp)
    ef6c:	dec00204 	addi	sp,sp,8
    ef70:	f800283a 	ret

0000ef74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ef74:	defff804 	addi	sp,sp,-32
    ef78:	dfc00715 	stw	ra,28(sp)
    ef7c:	df000615 	stw	fp,24(sp)
    ef80:	dc000515 	stw	r16,20(sp)
    ef84:	df000604 	addi	fp,sp,24
    ef88:	e13ffb15 	stw	r4,-20(fp)
    ef8c:	e17ffc15 	stw	r5,-16(fp)
    ef90:	e1bffd15 	stw	r6,-12(fp)
    ef94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    ef98:	e1bffe17 	ldw	r6,-8(fp)
    ef9c:	e17ffd17 	ldw	r5,-12(fp)
    efa0:	e13ffc17 	ldw	r4,-16(fp)
    efa4:	000f1fc0 	call	f1fc <open>
    efa8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    efac:	e0bffa17 	ldw	r2,-24(fp)
    efb0:	10002216 	blt	r2,zero,f03c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    efb4:	04000074 	movhi	r16,1
    efb8:	8401e104 	addi	r16,r16,1924
    efbc:	e0bffa17 	ldw	r2,-24(fp)
    efc0:	01400304 	movi	r5,12
    efc4:	1009883a 	mov	r4,r2
    efc8:	000072c0 	call	72c <__mulsi3>
    efcc:	8085883a 	add	r2,r16,r2
    efd0:	10c00017 	ldw	r3,0(r2)
    efd4:	e0bffb17 	ldw	r2,-20(fp)
    efd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    efdc:	04000074 	movhi	r16,1
    efe0:	8401e104 	addi	r16,r16,1924
    efe4:	e0bffa17 	ldw	r2,-24(fp)
    efe8:	01400304 	movi	r5,12
    efec:	1009883a 	mov	r4,r2
    eff0:	000072c0 	call	72c <__mulsi3>
    eff4:	8085883a 	add	r2,r16,r2
    eff8:	10800104 	addi	r2,r2,4
    effc:	10c00017 	ldw	r3,0(r2)
    f000:	e0bffb17 	ldw	r2,-20(fp)
    f004:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f008:	04000074 	movhi	r16,1
    f00c:	8401e104 	addi	r16,r16,1924
    f010:	e0bffa17 	ldw	r2,-24(fp)
    f014:	01400304 	movi	r5,12
    f018:	1009883a 	mov	r4,r2
    f01c:	000072c0 	call	72c <__mulsi3>
    f020:	8085883a 	add	r2,r16,r2
    f024:	10800204 	addi	r2,r2,8
    f028:	10c00017 	ldw	r3,0(r2)
    f02c:	e0bffb17 	ldw	r2,-20(fp)
    f030:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f034:	e13ffa17 	ldw	r4,-24(fp)
    f038:	000db300 	call	db30 <alt_release_fd>
  }
} 
    f03c:	0001883a 	nop
    f040:	e6ffff04 	addi	sp,fp,-4
    f044:	dfc00217 	ldw	ra,8(sp)
    f048:	df000117 	ldw	fp,4(sp)
    f04c:	dc000017 	ldw	r16,0(sp)
    f050:	dec00304 	addi	sp,sp,12
    f054:	f800283a 	ret

0000f058 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f058:	defffb04 	addi	sp,sp,-20
    f05c:	dfc00415 	stw	ra,16(sp)
    f060:	df000315 	stw	fp,12(sp)
    f064:	df000304 	addi	fp,sp,12
    f068:	e13ffd15 	stw	r4,-12(fp)
    f06c:	e17ffe15 	stw	r5,-8(fp)
    f070:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f074:	01c07fc4 	movi	r7,511
    f078:	01800044 	movi	r6,1
    f07c:	e17ffd17 	ldw	r5,-12(fp)
    f080:	01000074 	movhi	r4,1
    f084:	2101e404 	addi	r4,r4,1936
    f088:	000ef740 	call	ef74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f08c:	01c07fc4 	movi	r7,511
    f090:	000d883a 	mov	r6,zero
    f094:	e17ffe17 	ldw	r5,-8(fp)
    f098:	01000074 	movhi	r4,1
    f09c:	2101e104 	addi	r4,r4,1924
    f0a0:	000ef740 	call	ef74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f0a4:	01c07fc4 	movi	r7,511
    f0a8:	01800044 	movi	r6,1
    f0ac:	e17fff17 	ldw	r5,-4(fp)
    f0b0:	01000074 	movhi	r4,1
    f0b4:	2101e704 	addi	r4,r4,1948
    f0b8:	000ef740 	call	ef74 <alt_open_fd>
}  
    f0bc:	0001883a 	nop
    f0c0:	e037883a 	mov	sp,fp
    f0c4:	dfc00117 	ldw	ra,4(sp)
    f0c8:	df000017 	ldw	fp,0(sp)
    f0cc:	dec00204 	addi	sp,sp,8
    f0d0:	f800283a 	ret

0000f0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f0d4:	defffe04 	addi	sp,sp,-8
    f0d8:	dfc00115 	stw	ra,4(sp)
    f0dc:	df000015 	stw	fp,0(sp)
    f0e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0e4:	d0a00b17 	ldw	r2,-32724(gp)
    f0e8:	10000326 	beq	r2,zero,f0f8 <alt_get_errno+0x24>
    f0ec:	d0a00b17 	ldw	r2,-32724(gp)
    f0f0:	103ee83a 	callr	r2
    f0f4:	00000106 	br	f0fc <alt_get_errno+0x28>
    f0f8:	d0a6cc04 	addi	r2,gp,-25808
}
    f0fc:	e037883a 	mov	sp,fp
    f100:	dfc00117 	ldw	ra,4(sp)
    f104:	df000017 	ldw	fp,0(sp)
    f108:	dec00204 	addi	sp,sp,8
    f10c:	f800283a 	ret

0000f110 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f110:	defffb04 	addi	sp,sp,-20
    f114:	dfc00415 	stw	ra,16(sp)
    f118:	df000315 	stw	fp,12(sp)
    f11c:	dc000215 	stw	r16,8(sp)
    f120:	df000304 	addi	fp,sp,12
    f124:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f128:	e0bffe17 	ldw	r2,-8(fp)
    f12c:	10800217 	ldw	r2,8(r2)
    f130:	10d00034 	orhi	r3,r2,16384
    f134:	e0bffe17 	ldw	r2,-8(fp)
    f138:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f13c:	e03ffd15 	stw	zero,-12(fp)
    f140:	00002306 	br	f1d0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f144:	04000074 	movhi	r16,1
    f148:	8401e104 	addi	r16,r16,1924
    f14c:	e0bffd17 	ldw	r2,-12(fp)
    f150:	01400304 	movi	r5,12
    f154:	1009883a 	mov	r4,r2
    f158:	000072c0 	call	72c <__mulsi3>
    f15c:	8085883a 	add	r2,r16,r2
    f160:	10c00017 	ldw	r3,0(r2)
    f164:	e0bffe17 	ldw	r2,-8(fp)
    f168:	10800017 	ldw	r2,0(r2)
    f16c:	1880151e 	bne	r3,r2,f1c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f170:	04000074 	movhi	r16,1
    f174:	8401e104 	addi	r16,r16,1924
    f178:	e0bffd17 	ldw	r2,-12(fp)
    f17c:	01400304 	movi	r5,12
    f180:	1009883a 	mov	r4,r2
    f184:	000072c0 	call	72c <__mulsi3>
    f188:	8085883a 	add	r2,r16,r2
    f18c:	10800204 	addi	r2,r2,8
    f190:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f194:	10000b0e 	bge	r2,zero,f1c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f198:	01400304 	movi	r5,12
    f19c:	e13ffd17 	ldw	r4,-12(fp)
    f1a0:	000072c0 	call	72c <__mulsi3>
    f1a4:	1007883a 	mov	r3,r2
    f1a8:	00800074 	movhi	r2,1
    f1ac:	1081e104 	addi	r2,r2,1924
    f1b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f1b4:	e0bffe17 	ldw	r2,-8(fp)
    f1b8:	18800226 	beq	r3,r2,f1c4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f1bc:	00bffcc4 	movi	r2,-13
    f1c0:	00000806 	br	f1e4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f1c4:	e0bffd17 	ldw	r2,-12(fp)
    f1c8:	10800044 	addi	r2,r2,1
    f1cc:	e0bffd15 	stw	r2,-12(fp)
    f1d0:	d0a00a17 	ldw	r2,-32728(gp)
    f1d4:	1007883a 	mov	r3,r2
    f1d8:	e0bffd17 	ldw	r2,-12(fp)
    f1dc:	18bfd92e 	bgeu	r3,r2,f144 <__alt_exception_stack_pointer+0xf800f144>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f1e0:	0005883a 	mov	r2,zero
}
    f1e4:	e6ffff04 	addi	sp,fp,-4
    f1e8:	dfc00217 	ldw	ra,8(sp)
    f1ec:	df000117 	ldw	fp,4(sp)
    f1f0:	dc000017 	ldw	r16,0(sp)
    f1f4:	dec00304 	addi	sp,sp,12
    f1f8:	f800283a 	ret

0000f1fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f1fc:	defff604 	addi	sp,sp,-40
    f200:	dfc00915 	stw	ra,36(sp)
    f204:	df000815 	stw	fp,32(sp)
    f208:	df000804 	addi	fp,sp,32
    f20c:	e13ffd15 	stw	r4,-12(fp)
    f210:	e17ffe15 	stw	r5,-8(fp)
    f214:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f218:	00bfffc4 	movi	r2,-1
    f21c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f220:	00bffb44 	movi	r2,-19
    f224:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f228:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f22c:	d1600804 	addi	r5,gp,-32736
    f230:	e13ffd17 	ldw	r4,-12(fp)
    f234:	000f5200 	call	f520 <alt_find_dev>
    f238:	e0bff815 	stw	r2,-32(fp)
    f23c:	e0bff817 	ldw	r2,-32(fp)
    f240:	1000051e 	bne	r2,zero,f258 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f244:	e13ffd17 	ldw	r4,-12(fp)
    f248:	000f5b00 	call	f5b0 <alt_find_file>
    f24c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f250:	00800044 	movi	r2,1
    f254:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f258:	e0bff817 	ldw	r2,-32(fp)
    f25c:	10002b26 	beq	r2,zero,f30c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f260:	e13ff817 	ldw	r4,-32(fp)
    f264:	000f6b80 	call	f6b8 <alt_get_fd>
    f268:	e0bff915 	stw	r2,-28(fp)
    f26c:	e0bff917 	ldw	r2,-28(fp)
    f270:	1000030e 	bge	r2,zero,f280 <open+0x84>
    {
      status = index;
    f274:	e0bff917 	ldw	r2,-28(fp)
    f278:	e0bffa15 	stw	r2,-24(fp)
    f27c:	00002506 	br	f314 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f280:	01400304 	movi	r5,12
    f284:	e13ff917 	ldw	r4,-28(fp)
    f288:	000072c0 	call	72c <__mulsi3>
    f28c:	1007883a 	mov	r3,r2
    f290:	00800074 	movhi	r2,1
    f294:	1081e104 	addi	r2,r2,1924
    f298:	1885883a 	add	r2,r3,r2
    f29c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f2a0:	e0fffe17 	ldw	r3,-8(fp)
    f2a4:	00900034 	movhi	r2,16384
    f2a8:	10bfffc4 	addi	r2,r2,-1
    f2ac:	1886703a 	and	r3,r3,r2
    f2b0:	e0bffc17 	ldw	r2,-16(fp)
    f2b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f2b8:	e0bffb17 	ldw	r2,-20(fp)
    f2bc:	1000051e 	bne	r2,zero,f2d4 <open+0xd8>
    f2c0:	e13ffc17 	ldw	r4,-16(fp)
    f2c4:	000f1100 	call	f110 <alt_file_locked>
    f2c8:	e0bffa15 	stw	r2,-24(fp)
    f2cc:	e0bffa17 	ldw	r2,-24(fp)
    f2d0:	10001016 	blt	r2,zero,f314 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f2d4:	e0bff817 	ldw	r2,-32(fp)
    f2d8:	10800317 	ldw	r2,12(r2)
    f2dc:	10000826 	beq	r2,zero,f300 <open+0x104>
    f2e0:	e0bff817 	ldw	r2,-32(fp)
    f2e4:	10800317 	ldw	r2,12(r2)
    f2e8:	e1ffff17 	ldw	r7,-4(fp)
    f2ec:	e1bffe17 	ldw	r6,-8(fp)
    f2f0:	e17ffd17 	ldw	r5,-12(fp)
    f2f4:	e13ffc17 	ldw	r4,-16(fp)
    f2f8:	103ee83a 	callr	r2
    f2fc:	00000106 	br	f304 <open+0x108>
    f300:	0005883a 	mov	r2,zero
    f304:	e0bffa15 	stw	r2,-24(fp)
    f308:	00000206 	br	f314 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f30c:	00bffb44 	movi	r2,-19
    f310:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f314:	e0bffa17 	ldw	r2,-24(fp)
    f318:	1000090e 	bge	r2,zero,f340 <open+0x144>
  {
    alt_release_fd (index);  
    f31c:	e13ff917 	ldw	r4,-28(fp)
    f320:	000db300 	call	db30 <alt_release_fd>
    ALT_ERRNO = -status;
    f324:	000f0d40 	call	f0d4 <alt_get_errno>
    f328:	1007883a 	mov	r3,r2
    f32c:	e0bffa17 	ldw	r2,-24(fp)
    f330:	0085c83a 	sub	r2,zero,r2
    f334:	18800015 	stw	r2,0(r3)
    return -1;
    f338:	00bfffc4 	movi	r2,-1
    f33c:	00000106 	br	f344 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f340:	e0bff917 	ldw	r2,-28(fp)
}
    f344:	e037883a 	mov	sp,fp
    f348:	dfc00117 	ldw	ra,4(sp)
    f34c:	df000017 	ldw	fp,0(sp)
    f350:	dec00204 	addi	sp,sp,8
    f354:	f800283a 	ret

0000f358 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f358:	defffa04 	addi	sp,sp,-24
    f35c:	df000515 	stw	fp,20(sp)
    f360:	df000504 	addi	fp,sp,20
    f364:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f368:	0005303a 	rdctl	r2,status
    f36c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f370:	e0fffc17 	ldw	r3,-16(fp)
    f374:	00bfff84 	movi	r2,-2
    f378:	1884703a 	and	r2,r3,r2
    f37c:	1001703a 	wrctl	status,r2
  
  return context;
    f380:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f384:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f388:	e0bfff17 	ldw	r2,-4(fp)
    f38c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f390:	e0bffd17 	ldw	r2,-12(fp)
    f394:	10800017 	ldw	r2,0(r2)
    f398:	e0fffd17 	ldw	r3,-12(fp)
    f39c:	18c00117 	ldw	r3,4(r3)
    f3a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f3a4:	e0bffd17 	ldw	r2,-12(fp)
    f3a8:	10800117 	ldw	r2,4(r2)
    f3ac:	e0fffd17 	ldw	r3,-12(fp)
    f3b0:	18c00017 	ldw	r3,0(r3)
    f3b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f3b8:	e0bffd17 	ldw	r2,-12(fp)
    f3bc:	e0fffd17 	ldw	r3,-12(fp)
    f3c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f3c4:	e0bffd17 	ldw	r2,-12(fp)
    f3c8:	e0fffd17 	ldw	r3,-12(fp)
    f3cc:	10c00015 	stw	r3,0(r2)
    f3d0:	e0bffb17 	ldw	r2,-20(fp)
    f3d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3d8:	e0bffe17 	ldw	r2,-8(fp)
    f3dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f3e0:	0001883a 	nop
    f3e4:	e037883a 	mov	sp,fp
    f3e8:	df000017 	ldw	fp,0(sp)
    f3ec:	dec00104 	addi	sp,sp,4
    f3f0:	f800283a 	ret

0000f3f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f3f4:	defffb04 	addi	sp,sp,-20
    f3f8:	dfc00415 	stw	ra,16(sp)
    f3fc:	df000315 	stw	fp,12(sp)
    f400:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f404:	d0a00d17 	ldw	r2,-32716(gp)
    f408:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f40c:	d0a6d517 	ldw	r2,-25772(gp)
    f410:	10800044 	addi	r2,r2,1
    f414:	d0a6d515 	stw	r2,-25772(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f418:	00002e06 	br	f4d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f41c:	e0bffd17 	ldw	r2,-12(fp)
    f420:	10800017 	ldw	r2,0(r2)
    f424:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f428:	e0bffd17 	ldw	r2,-12(fp)
    f42c:	10800403 	ldbu	r2,16(r2)
    f430:	10803fcc 	andi	r2,r2,255
    f434:	10000426 	beq	r2,zero,f448 <alt_tick+0x54>
    f438:	d0a6d517 	ldw	r2,-25772(gp)
    f43c:	1000021e 	bne	r2,zero,f448 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f440:	e0bffd17 	ldw	r2,-12(fp)
    f444:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f448:	e0bffd17 	ldw	r2,-12(fp)
    f44c:	10800217 	ldw	r2,8(r2)
    f450:	d0e6d517 	ldw	r3,-25772(gp)
    f454:	18801d36 	bltu	r3,r2,f4cc <alt_tick+0xd8>
    f458:	e0bffd17 	ldw	r2,-12(fp)
    f45c:	10800403 	ldbu	r2,16(r2)
    f460:	10803fcc 	andi	r2,r2,255
    f464:	1000191e 	bne	r2,zero,f4cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10800317 	ldw	r2,12(r2)
    f470:	e0fffd17 	ldw	r3,-12(fp)
    f474:	18c00517 	ldw	r3,20(r3)
    f478:	1809883a 	mov	r4,r3
    f47c:	103ee83a 	callr	r2
    f480:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f484:	e0bfff17 	ldw	r2,-4(fp)
    f488:	1000031e 	bne	r2,zero,f498 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f48c:	e13ffd17 	ldw	r4,-12(fp)
    f490:	000f3580 	call	f358 <alt_alarm_stop>
    f494:	00000d06 	br	f4cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f498:	e0bffd17 	ldw	r2,-12(fp)
    f49c:	10c00217 	ldw	r3,8(r2)
    f4a0:	e0bfff17 	ldw	r2,-4(fp)
    f4a4:	1887883a 	add	r3,r3,r2
    f4a8:	e0bffd17 	ldw	r2,-12(fp)
    f4ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f4b0:	e0bffd17 	ldw	r2,-12(fp)
    f4b4:	10c00217 	ldw	r3,8(r2)
    f4b8:	d0a6d517 	ldw	r2,-25772(gp)
    f4bc:	1880032e 	bgeu	r3,r2,f4cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f4c0:	e0bffd17 	ldw	r2,-12(fp)
    f4c4:	00c00044 	movi	r3,1
    f4c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f4cc:	e0bffe17 	ldw	r2,-8(fp)
    f4d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f4d4:	e0fffd17 	ldw	r3,-12(fp)
    f4d8:	d0a00d04 	addi	r2,gp,-32716
    f4dc:	18bfcf1e 	bne	r3,r2,f41c <__alt_exception_stack_pointer+0xf800f41c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f4e0:	0001883a 	nop
}
    f4e4:	0001883a 	nop
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	dfc00117 	ldw	ra,4(sp)
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00204 	addi	sp,sp,8
    f4f8:	f800283a 	ret

0000f4fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f4fc:	deffff04 	addi	sp,sp,-4
    f500:	df000015 	stw	fp,0(sp)
    f504:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f508:	000170fa 	wrctl	ienable,zero
}
    f50c:	0001883a 	nop
    f510:	e037883a 	mov	sp,fp
    f514:	df000017 	ldw	fp,0(sp)
    f518:	dec00104 	addi	sp,sp,4
    f51c:	f800283a 	ret

0000f520 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f520:	defffa04 	addi	sp,sp,-24
    f524:	dfc00515 	stw	ra,20(sp)
    f528:	df000415 	stw	fp,16(sp)
    f52c:	df000404 	addi	fp,sp,16
    f530:	e13ffe15 	stw	r4,-8(fp)
    f534:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f538:	e0bfff17 	ldw	r2,-4(fp)
    f53c:	10800017 	ldw	r2,0(r2)
    f540:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f544:	e13ffe17 	ldw	r4,-8(fp)
    f548:	00073440 	call	7344 <strlen>
    f54c:	10800044 	addi	r2,r2,1
    f550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f554:	00000d06 	br	f58c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f558:	e0bffc17 	ldw	r2,-16(fp)
    f55c:	10800217 	ldw	r2,8(r2)
    f560:	e0fffd17 	ldw	r3,-12(fp)
    f564:	180d883a 	mov	r6,r3
    f568:	e17ffe17 	ldw	r5,-8(fp)
    f56c:	1009883a 	mov	r4,r2
    f570:	000f8640 	call	f864 <memcmp>
    f574:	1000021e 	bne	r2,zero,f580 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f578:	e0bffc17 	ldw	r2,-16(fp)
    f57c:	00000706 	br	f59c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f580:	e0bffc17 	ldw	r2,-16(fp)
    f584:	10800017 	ldw	r2,0(r2)
    f588:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f58c:	e0fffc17 	ldw	r3,-16(fp)
    f590:	e0bfff17 	ldw	r2,-4(fp)
    f594:	18bff01e 	bne	r3,r2,f558 <__alt_exception_stack_pointer+0xf800f558>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f598:	0005883a 	mov	r2,zero
}
    f59c:	e037883a 	mov	sp,fp
    f5a0:	dfc00117 	ldw	ra,4(sp)
    f5a4:	df000017 	ldw	fp,0(sp)
    f5a8:	dec00204 	addi	sp,sp,8
    f5ac:	f800283a 	ret

0000f5b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f5b0:	defffb04 	addi	sp,sp,-20
    f5b4:	dfc00415 	stw	ra,16(sp)
    f5b8:	df000315 	stw	fp,12(sp)
    f5bc:	df000304 	addi	fp,sp,12
    f5c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f5c4:	d0a00617 	ldw	r2,-32744(gp)
    f5c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f5cc:	00003106 	br	f694 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f5d0:	e0bffd17 	ldw	r2,-12(fp)
    f5d4:	10800217 	ldw	r2,8(r2)
    f5d8:	1009883a 	mov	r4,r2
    f5dc:	00073440 	call	7344 <strlen>
    f5e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f5e4:	e0bffd17 	ldw	r2,-12(fp)
    f5e8:	10c00217 	ldw	r3,8(r2)
    f5ec:	e0bffe17 	ldw	r2,-8(fp)
    f5f0:	10bfffc4 	addi	r2,r2,-1
    f5f4:	1885883a 	add	r2,r3,r2
    f5f8:	10800003 	ldbu	r2,0(r2)
    f5fc:	10803fcc 	andi	r2,r2,255
    f600:	1080201c 	xori	r2,r2,128
    f604:	10bfe004 	addi	r2,r2,-128
    f608:	10800bd8 	cmpnei	r2,r2,47
    f60c:	1000031e 	bne	r2,zero,f61c <alt_find_file+0x6c>
    {
      len -= 1;
    f610:	e0bffe17 	ldw	r2,-8(fp)
    f614:	10bfffc4 	addi	r2,r2,-1
    f618:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f61c:	e0bffe17 	ldw	r2,-8(fp)
    f620:	e0ffff17 	ldw	r3,-4(fp)
    f624:	1885883a 	add	r2,r3,r2
    f628:	10800003 	ldbu	r2,0(r2)
    f62c:	10803fcc 	andi	r2,r2,255
    f630:	1080201c 	xori	r2,r2,128
    f634:	10bfe004 	addi	r2,r2,-128
    f638:	10800be0 	cmpeqi	r2,r2,47
    f63c:	1000081e 	bne	r2,zero,f660 <alt_find_file+0xb0>
    f640:	e0bffe17 	ldw	r2,-8(fp)
    f644:	e0ffff17 	ldw	r3,-4(fp)
    f648:	1885883a 	add	r2,r3,r2
    f64c:	10800003 	ldbu	r2,0(r2)
    f650:	10803fcc 	andi	r2,r2,255
    f654:	1080201c 	xori	r2,r2,128
    f658:	10bfe004 	addi	r2,r2,-128
    f65c:	10000a1e 	bne	r2,zero,f688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	10800217 	ldw	r2,8(r2)
    f668:	e0fffe17 	ldw	r3,-8(fp)
    f66c:	180d883a 	mov	r6,r3
    f670:	e17fff17 	ldw	r5,-4(fp)
    f674:	1009883a 	mov	r4,r2
    f678:	000f8640 	call	f864 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f67c:	1000021e 	bne	r2,zero,f688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f680:	e0bffd17 	ldw	r2,-12(fp)
    f684:	00000706 	br	f6a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f688:	e0bffd17 	ldw	r2,-12(fp)
    f68c:	10800017 	ldw	r2,0(r2)
    f690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f694:	e0fffd17 	ldw	r3,-12(fp)
    f698:	d0a00604 	addi	r2,gp,-32744
    f69c:	18bfcc1e 	bne	r3,r2,f5d0 <__alt_exception_stack_pointer+0xf800f5d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f6a0:	0005883a 	mov	r2,zero
}
    f6a4:	e037883a 	mov	sp,fp
    f6a8:	dfc00117 	ldw	ra,4(sp)
    f6ac:	df000017 	ldw	fp,0(sp)
    f6b0:	dec00204 	addi	sp,sp,8
    f6b4:	f800283a 	ret

0000f6b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f6b8:	defffa04 	addi	sp,sp,-24
    f6bc:	dfc00515 	stw	ra,20(sp)
    f6c0:	df000415 	stw	fp,16(sp)
    f6c4:	dc000315 	stw	r16,12(sp)
    f6c8:	df000404 	addi	fp,sp,16
    f6cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    f6d0:	00bffa04 	movi	r2,-24
    f6d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f6d8:	e03ffc15 	stw	zero,-16(fp)
    f6dc:	00001d06 	br	f754 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    f6e0:	04000074 	movhi	r16,1
    f6e4:	8401e104 	addi	r16,r16,1924
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	01400304 	movi	r5,12
    f6f0:	1009883a 	mov	r4,r2
    f6f4:	000072c0 	call	72c <__mulsi3>
    f6f8:	8085883a 	add	r2,r16,r2
    f6fc:	10800017 	ldw	r2,0(r2)
    f700:	1000111e 	bne	r2,zero,f748 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    f704:	04000074 	movhi	r16,1
    f708:	8401e104 	addi	r16,r16,1924
    f70c:	e0bffc17 	ldw	r2,-16(fp)
    f710:	01400304 	movi	r5,12
    f714:	1009883a 	mov	r4,r2
    f718:	000072c0 	call	72c <__mulsi3>
    f71c:	8085883a 	add	r2,r16,r2
    f720:	e0fffe17 	ldw	r3,-8(fp)
    f724:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f728:	d0e00a17 	ldw	r3,-32728(gp)
    f72c:	e0bffc17 	ldw	r2,-16(fp)
    f730:	1880020e 	bge	r3,r2,f73c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    f734:	e0bffc17 	ldw	r2,-16(fp)
    f738:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f73c:	e0bffc17 	ldw	r2,-16(fp)
    f740:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    f744:	00000606 	br	f760 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f748:	e0bffc17 	ldw	r2,-16(fp)
    f74c:	10800044 	addi	r2,r2,1
    f750:	e0bffc15 	stw	r2,-16(fp)
    f754:	e0bffc17 	ldw	r2,-16(fp)
    f758:	10800810 	cmplti	r2,r2,32
    f75c:	103fe01e 	bne	r2,zero,f6e0 <__alt_exception_stack_pointer+0xf800f6e0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f760:	e0bffd17 	ldw	r2,-12(fp)
}
    f764:	e6ffff04 	addi	sp,fp,-4
    f768:	dfc00217 	ldw	ra,8(sp)
    f76c:	df000117 	ldw	fp,4(sp)
    f770:	dc000017 	ldw	r16,0(sp)
    f774:	dec00304 	addi	sp,sp,12
    f778:	f800283a 	ret

0000f77c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f77c:	defffe04 	addi	sp,sp,-8
    f780:	df000115 	stw	fp,4(sp)
    f784:	df000104 	addi	fp,sp,4
    f788:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f78c:	e0bfff17 	ldw	r2,-4(fp)
    f790:	10bffe84 	addi	r2,r2,-6
    f794:	10c00428 	cmpgeui	r3,r2,16
    f798:	18001a1e 	bne	r3,zero,f804 <alt_exception_cause_generated_bad_addr+0x88>
    f79c:	100690ba 	slli	r3,r2,2
    f7a0:	00800074 	movhi	r2,1
    f7a4:	10bded04 	addi	r2,r2,-2124
    f7a8:	1885883a 	add	r2,r3,r2
    f7ac:	10800017 	ldw	r2,0(r2)
    f7b0:	1000683a 	jmp	r2
    f7b4:	0000f7f4 	movhi	zero,991
    f7b8:	0000f7f4 	movhi	zero,991
    f7bc:	0000f804 	movi	zero,992
    f7c0:	0000f804 	movi	zero,992
    f7c4:	0000f804 	movi	zero,992
    f7c8:	0000f7f4 	movhi	zero,991
    f7cc:	0000f7fc 	xorhi	zero,zero,991
    f7d0:	0000f804 	movi	zero,992
    f7d4:	0000f7f4 	movhi	zero,991
    f7d8:	0000f7f4 	movhi	zero,991
    f7dc:	0000f804 	movi	zero,992
    f7e0:	0000f7f4 	movhi	zero,991
    f7e4:	0000f7fc 	xorhi	zero,zero,991
    f7e8:	0000f804 	movi	zero,992
    f7ec:	0000f804 	movi	zero,992
    f7f0:	0000f7f4 	movhi	zero,991
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f7f4:	00800044 	movi	r2,1
    f7f8:	00000306 	br	f808 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f7fc:	0005883a 	mov	r2,zero
    f800:	00000106 	br	f808 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f804:	0005883a 	mov	r2,zero
  }
}
    f808:	e037883a 	mov	sp,fp
    f80c:	df000017 	ldw	fp,0(sp)
    f810:	dec00104 	addi	sp,sp,4
    f814:	f800283a 	ret

0000f818 <atexit>:
    f818:	200b883a 	mov	r5,r4
    f81c:	000f883a 	mov	r7,zero
    f820:	000d883a 	mov	r6,zero
    f824:	0009883a 	mov	r4,zero
    f828:	000f8e01 	jmpi	f8e0 <__register_exitproc>

0000f82c <exit>:
    f82c:	defffe04 	addi	sp,sp,-8
    f830:	000b883a 	mov	r5,zero
    f834:	dc000015 	stw	r16,0(sp)
    f838:	dfc00115 	stw	ra,4(sp)
    f83c:	2021883a 	mov	r16,r4
    f840:	000f9f80 	call	f9f8 <__call_exitprocs>
    f844:	00800074 	movhi	r2,1
    f848:	10865b04 	addi	r2,r2,6508
    f84c:	11000017 	ldw	r4,0(r2)
    f850:	20800f17 	ldw	r2,60(r4)
    f854:	10000126 	beq	r2,zero,f85c <exit+0x30>
    f858:	103ee83a 	callr	r2
    f85c:	8009883a 	mov	r4,r16
    f860:	000fb780 	call	fb78 <_exit>

0000f864 <memcmp>:
    f864:	01c000c4 	movi	r7,3
    f868:	3980192e 	bgeu	r7,r6,f8d0 <memcmp+0x6c>
    f86c:	2144b03a 	or	r2,r4,r5
    f870:	11c4703a 	and	r2,r2,r7
    f874:	10000f26 	beq	r2,zero,f8b4 <memcmp+0x50>
    f878:	20800003 	ldbu	r2,0(r4)
    f87c:	28c00003 	ldbu	r3,0(r5)
    f880:	10c0151e 	bne	r2,r3,f8d8 <memcmp+0x74>
    f884:	31bfff84 	addi	r6,r6,-2
    f888:	01ffffc4 	movi	r7,-1
    f88c:	00000406 	br	f8a0 <memcmp+0x3c>
    f890:	20800003 	ldbu	r2,0(r4)
    f894:	28c00003 	ldbu	r3,0(r5)
    f898:	31bfffc4 	addi	r6,r6,-1
    f89c:	10c00e1e 	bne	r2,r3,f8d8 <memcmp+0x74>
    f8a0:	21000044 	addi	r4,r4,1
    f8a4:	29400044 	addi	r5,r5,1
    f8a8:	31fff91e 	bne	r6,r7,f890 <__alt_exception_stack_pointer+0xf800f890>
    f8ac:	0005883a 	mov	r2,zero
    f8b0:	f800283a 	ret
    f8b4:	20c00017 	ldw	r3,0(r4)
    f8b8:	28800017 	ldw	r2,0(r5)
    f8bc:	18bfee1e 	bne	r3,r2,f878 <__alt_exception_stack_pointer+0xf800f878>
    f8c0:	31bfff04 	addi	r6,r6,-4
    f8c4:	21000104 	addi	r4,r4,4
    f8c8:	29400104 	addi	r5,r5,4
    f8cc:	39bff936 	bltu	r7,r6,f8b4 <__alt_exception_stack_pointer+0xf800f8b4>
    f8d0:	303fe91e 	bne	r6,zero,f878 <__alt_exception_stack_pointer+0xf800f878>
    f8d4:	003ff506 	br	f8ac <__alt_exception_stack_pointer+0xf800f8ac>
    f8d8:	10c5c83a 	sub	r2,r2,r3
    f8dc:	f800283a 	ret

0000f8e0 <__register_exitproc>:
    f8e0:	defffa04 	addi	sp,sp,-24
    f8e4:	dc000315 	stw	r16,12(sp)
    f8e8:	04000074 	movhi	r16,1
    f8ec:	84065b04 	addi	r16,r16,6508
    f8f0:	80c00017 	ldw	r3,0(r16)
    f8f4:	dc400415 	stw	r17,16(sp)
    f8f8:	dfc00515 	stw	ra,20(sp)
    f8fc:	18805217 	ldw	r2,328(r3)
    f900:	2023883a 	mov	r17,r4
    f904:	10003726 	beq	r2,zero,f9e4 <__register_exitproc+0x104>
    f908:	10c00117 	ldw	r3,4(r2)
    f90c:	010007c4 	movi	r4,31
    f910:	20c00e16 	blt	r4,r3,f94c <__register_exitproc+0x6c>
    f914:	1a000044 	addi	r8,r3,1
    f918:	8800221e 	bne	r17,zero,f9a4 <__register_exitproc+0xc4>
    f91c:	18c00084 	addi	r3,r3,2
    f920:	18c7883a 	add	r3,r3,r3
    f924:	18c7883a 	add	r3,r3,r3
    f928:	12000115 	stw	r8,4(r2)
    f92c:	10c7883a 	add	r3,r2,r3
    f930:	19400015 	stw	r5,0(r3)
    f934:	0005883a 	mov	r2,zero
    f938:	dfc00517 	ldw	ra,20(sp)
    f93c:	dc400417 	ldw	r17,16(sp)
    f940:	dc000317 	ldw	r16,12(sp)
    f944:	dec00604 	addi	sp,sp,24
    f948:	f800283a 	ret
    f94c:	00800034 	movhi	r2,0
    f950:	1081d504 	addi	r2,r2,1876
    f954:	10002626 	beq	r2,zero,f9f0 <__register_exitproc+0x110>
    f958:	01006404 	movi	r4,400
    f95c:	d9400015 	stw	r5,0(sp)
    f960:	d9800115 	stw	r6,4(sp)
    f964:	d9c00215 	stw	r7,8(sp)
    f968:	00007540 	call	754 <malloc>
    f96c:	d9400017 	ldw	r5,0(sp)
    f970:	d9800117 	ldw	r6,4(sp)
    f974:	d9c00217 	ldw	r7,8(sp)
    f978:	10001d26 	beq	r2,zero,f9f0 <__register_exitproc+0x110>
    f97c:	81000017 	ldw	r4,0(r16)
    f980:	10000115 	stw	zero,4(r2)
    f984:	02000044 	movi	r8,1
    f988:	22405217 	ldw	r9,328(r4)
    f98c:	0007883a 	mov	r3,zero
    f990:	12400015 	stw	r9,0(r2)
    f994:	20805215 	stw	r2,328(r4)
    f998:	10006215 	stw	zero,392(r2)
    f99c:	10006315 	stw	zero,396(r2)
    f9a0:	883fde26 	beq	r17,zero,f91c <__alt_exception_stack_pointer+0xf800f91c>
    f9a4:	18c9883a 	add	r4,r3,r3
    f9a8:	2109883a 	add	r4,r4,r4
    f9ac:	1109883a 	add	r4,r2,r4
    f9b0:	21802215 	stw	r6,136(r4)
    f9b4:	01800044 	movi	r6,1
    f9b8:	12406217 	ldw	r9,392(r2)
    f9bc:	30cc983a 	sll	r6,r6,r3
    f9c0:	4992b03a 	or	r9,r9,r6
    f9c4:	12406215 	stw	r9,392(r2)
    f9c8:	21c04215 	stw	r7,264(r4)
    f9cc:	01000084 	movi	r4,2
    f9d0:	893fd21e 	bne	r17,r4,f91c <__alt_exception_stack_pointer+0xf800f91c>
    f9d4:	11006317 	ldw	r4,396(r2)
    f9d8:	218cb03a 	or	r6,r4,r6
    f9dc:	11806315 	stw	r6,396(r2)
    f9e0:	003fce06 	br	f91c <__alt_exception_stack_pointer+0xf800f91c>
    f9e4:	18805304 	addi	r2,r3,332
    f9e8:	18805215 	stw	r2,328(r3)
    f9ec:	003fc606 	br	f908 <__alt_exception_stack_pointer+0xf800f908>
    f9f0:	00bfffc4 	movi	r2,-1
    f9f4:	003fd006 	br	f938 <__alt_exception_stack_pointer+0xf800f938>

0000f9f8 <__call_exitprocs>:
    f9f8:	defff504 	addi	sp,sp,-44
    f9fc:	df000915 	stw	fp,36(sp)
    fa00:	dd400615 	stw	r21,24(sp)
    fa04:	dc800315 	stw	r18,12(sp)
    fa08:	dfc00a15 	stw	ra,40(sp)
    fa0c:	ddc00815 	stw	r23,32(sp)
    fa10:	dd800715 	stw	r22,28(sp)
    fa14:	dd000515 	stw	r20,20(sp)
    fa18:	dcc00415 	stw	r19,16(sp)
    fa1c:	dc400215 	stw	r17,8(sp)
    fa20:	dc000115 	stw	r16,4(sp)
    fa24:	d9000015 	stw	r4,0(sp)
    fa28:	2839883a 	mov	fp,r5
    fa2c:	04800044 	movi	r18,1
    fa30:	057fffc4 	movi	r21,-1
    fa34:	00800074 	movhi	r2,1
    fa38:	10865b04 	addi	r2,r2,6508
    fa3c:	12000017 	ldw	r8,0(r2)
    fa40:	45005217 	ldw	r20,328(r8)
    fa44:	44c05204 	addi	r19,r8,328
    fa48:	a0001c26 	beq	r20,zero,fabc <__call_exitprocs+0xc4>
    fa4c:	a0800117 	ldw	r2,4(r20)
    fa50:	15ffffc4 	addi	r23,r2,-1
    fa54:	b8000d16 	blt	r23,zero,fa8c <__call_exitprocs+0x94>
    fa58:	14000044 	addi	r16,r2,1
    fa5c:	8421883a 	add	r16,r16,r16
    fa60:	8421883a 	add	r16,r16,r16
    fa64:	84402004 	addi	r17,r16,128
    fa68:	a463883a 	add	r17,r20,r17
    fa6c:	a421883a 	add	r16,r20,r16
    fa70:	e0001e26 	beq	fp,zero,faec <__call_exitprocs+0xf4>
    fa74:	80804017 	ldw	r2,256(r16)
    fa78:	e0801c26 	beq	fp,r2,faec <__call_exitprocs+0xf4>
    fa7c:	bdffffc4 	addi	r23,r23,-1
    fa80:	843fff04 	addi	r16,r16,-4
    fa84:	8c7fff04 	addi	r17,r17,-4
    fa88:	bd7ff91e 	bne	r23,r21,fa70 <__alt_exception_stack_pointer+0xf800fa70>
    fa8c:	00800034 	movhi	r2,0
    fa90:	1081da04 	addi	r2,r2,1896
    fa94:	10000926 	beq	r2,zero,fabc <__call_exitprocs+0xc4>
    fa98:	a0800117 	ldw	r2,4(r20)
    fa9c:	1000301e 	bne	r2,zero,fb60 <__call_exitprocs+0x168>
    faa0:	a0800017 	ldw	r2,0(r20)
    faa4:	10003226 	beq	r2,zero,fb70 <__call_exitprocs+0x178>
    faa8:	a009883a 	mov	r4,r20
    faac:	98800015 	stw	r2,0(r19)
    fab0:	00007680 	call	768 <free>
    fab4:	9d000017 	ldw	r20,0(r19)
    fab8:	a03fe41e 	bne	r20,zero,fa4c <__alt_exception_stack_pointer+0xf800fa4c>
    fabc:	dfc00a17 	ldw	ra,40(sp)
    fac0:	df000917 	ldw	fp,36(sp)
    fac4:	ddc00817 	ldw	r23,32(sp)
    fac8:	dd800717 	ldw	r22,28(sp)
    facc:	dd400617 	ldw	r21,24(sp)
    fad0:	dd000517 	ldw	r20,20(sp)
    fad4:	dcc00417 	ldw	r19,16(sp)
    fad8:	dc800317 	ldw	r18,12(sp)
    fadc:	dc400217 	ldw	r17,8(sp)
    fae0:	dc000117 	ldw	r16,4(sp)
    fae4:	dec00b04 	addi	sp,sp,44
    fae8:	f800283a 	ret
    faec:	a0800117 	ldw	r2,4(r20)
    faf0:	80c00017 	ldw	r3,0(r16)
    faf4:	10bfffc4 	addi	r2,r2,-1
    faf8:	15c01426 	beq	r2,r23,fb4c <__call_exitprocs+0x154>
    fafc:	80000015 	stw	zero,0(r16)
    fb00:	183fde26 	beq	r3,zero,fa7c <__alt_exception_stack_pointer+0xf800fa7c>
    fb04:	95c8983a 	sll	r4,r18,r23
    fb08:	a0806217 	ldw	r2,392(r20)
    fb0c:	a5800117 	ldw	r22,4(r20)
    fb10:	2084703a 	and	r2,r4,r2
    fb14:	10000b26 	beq	r2,zero,fb44 <__call_exitprocs+0x14c>
    fb18:	a0806317 	ldw	r2,396(r20)
    fb1c:	2088703a 	and	r4,r4,r2
    fb20:	20000c1e 	bne	r4,zero,fb54 <__call_exitprocs+0x15c>
    fb24:	89400017 	ldw	r5,0(r17)
    fb28:	d9000017 	ldw	r4,0(sp)
    fb2c:	183ee83a 	callr	r3
    fb30:	a0800117 	ldw	r2,4(r20)
    fb34:	15bfbf1e 	bne	r2,r22,fa34 <__alt_exception_stack_pointer+0xf800fa34>
    fb38:	98800017 	ldw	r2,0(r19)
    fb3c:	153fcf26 	beq	r2,r20,fa7c <__alt_exception_stack_pointer+0xf800fa7c>
    fb40:	003fbc06 	br	fa34 <__alt_exception_stack_pointer+0xf800fa34>
    fb44:	183ee83a 	callr	r3
    fb48:	003ff906 	br	fb30 <__alt_exception_stack_pointer+0xf800fb30>
    fb4c:	a5c00115 	stw	r23,4(r20)
    fb50:	003feb06 	br	fb00 <__alt_exception_stack_pointer+0xf800fb00>
    fb54:	89000017 	ldw	r4,0(r17)
    fb58:	183ee83a 	callr	r3
    fb5c:	003ff406 	br	fb30 <__alt_exception_stack_pointer+0xf800fb30>
    fb60:	a0800017 	ldw	r2,0(r20)
    fb64:	a027883a 	mov	r19,r20
    fb68:	1029883a 	mov	r20,r2
    fb6c:	003fb606 	br	fa48 <__alt_exception_stack_pointer+0xf800fa48>
    fb70:	0005883a 	mov	r2,zero
    fb74:	003ffb06 	br	fb64 <__alt_exception_stack_pointer+0xf800fb64>

0000fb78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fb78:	defffd04 	addi	sp,sp,-12
    fb7c:	df000215 	stw	fp,8(sp)
    fb80:	df000204 	addi	fp,sp,8
    fb84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fb88:	0001883a 	nop
    fb8c:	e0bfff17 	ldw	r2,-4(fp)
    fb90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fb94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fb98:	10000226 	beq	r2,zero,fba4 <_exit+0x2c>
    ALT_SIM_FAIL();
    fb9c:	002af070 	cmpltui	zero,zero,43969
    fba0:	00000106 	br	fba8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fba4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fba8:	003fff06 	br	fba8 <__alt_exception_stack_pointer+0xf800fba8>
