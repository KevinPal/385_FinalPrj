
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012cbc memsz 0x00012cbc flags r-x
    LOAD off    0x00013cdc vaddr 0x00012cdc paddr 0x000147cc align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x000162bc vaddr 0x000162bc paddr 0x000162bc align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011f68  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b38  000121a4  000121a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  00012cdc  000147cc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  000162bc  000162bc  000162bc  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00016434  00016434  000157cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000157cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe0  00000000  00000000  000157f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025b3e  00000000  00000000  000167d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ab5  00000000  00000000  0003c30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c275  00000000  00000000  00045dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025b4  00000000  00000000  00052038  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d85  00000000  00000000  000545ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017924  00000000  00000000  00058371  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006fc98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001908  00000000  00000000  0006fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00074b8a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00074b8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074b92  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074b93  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00074b94  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00074b9f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00074ba3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00074bae  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00074bb7  2**0
                  CONTENTS, READONLY
 26 .jdi          000061b4  00000000  00000000  00074bdf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007e538  00000000  00000000  0007ad93  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
000121a4 l    d  .rodata	00000000 .rodata
00012cdc l    d  .rwdata	00000000 .rwdata
000162bc l    d  .bss	00000000 .bss
00016434 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
000162bc l     O .bss	00000002 ctl_reg
000162be l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00012cdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012a1a l     O .rodata	00000010 zeroes.4404
000055b8 l     F .text	000000bc __sbprintf
00012a2a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000057c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007320 l     F .text	00000008 __fp_unlock
00007334 l     F .text	0000019c __sinit.part.1
000074d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013528 l     O .rwdata	00000020 lc_ctype_charset
00013508 l     O .rwdata	00000020 lc_message_charset
00013548 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012a58 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a144 l     F .text	000000fc __sprint_r.part.0
00012b7c l     O .rodata	00000010 zeroes.4349
0000b780 l     F .text	000000bc __sbprintf
00012b8c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f7c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f8dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f9fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fae4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fbd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fdac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000147c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00010020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010104 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010240 l     F .text	00000034 alt_dev_reg
00013728 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010530 l     F .text	0000020c altera_avalon_jtag_uart_irq
0001073c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010d74 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001110c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001156c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000116cc l     F .text	0000003c alt_get_errno
00011708 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016308 g     O .bss	00000004 alt_instruction_exception_handler
000097dc g     F .text	00000074 _mprec_log10
000098c8 g     F .text	0000008c __any_on
0000bd34 g     F .text	00000054 _isatty_r
00012a64 g     O .rodata	00000028 __mprec_tinytens
0000fce8 g     F .text	0000007c alt_main
000030f8 g     F .text	000000c0 _puts_r
00016334 g     O .bss	00000100 alt_irq
0000bd88 g     F .text	00000060 _lseek_r
000147cc g       *ABS*	00000000 __flash_rwdata_start
0000e1a0 g     F .text	00000088 .hidden __eqdf2
00016434 g       *ABS*	00000000 __alt_heap_start
000030bc g     F .text	0000003c printf
0000bfa0 g     F .text	0000009c _wcrtomb_r
0001478c g     O .rwdata	00000004 gpu
000162ca g     O .bss	00000002 usb_ctl_val
0000a004 g     F .text	0000005c __sseek
00007680 g     F .text	00000010 __sinit
000162c4 g     O .bss	00000004 keycode
0000be48 g     F .text	00000140 __swbuf_r
00008154 g     F .text	0000007c _setlocale_r
000074d8 g     F .text	00000078 __sfmoreglue
0000fd88 g     F .text	00000024 __malloc_unlock
00002704 g     F .text	00000088 UsbGetRetryCnt
00008618 g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
00007668 g     F .text	00000018 _cleanup
0000889c g     F .text	000000a8 _Balloc
0000e228 g     F .text	000000dc .hidden __gtdf2
00011af4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001005c g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bcd8 g     F .text	0000005c _fstat_r
000162e0 g     O .bss	00000004 errno
00009f80 g     F .text	00000008 __seofread
000162f4 g     O .bss	00000004 alt_argv
0001c788 g       *ABS*	00000000 _gp
000100d4 g     F .text	00000030 usleep
000135a8 g     O .rwdata	00000180 alt_fd_list
00001484 g     F .text	00000048 swap_buffers
00011b18 g     F .text	00000090 alt_find_dev
000084d0 g     F .text	00000148 memcpy
000032b8 g     F .text	00000008 _times_r
00007328 g     F .text	0000000c _cleanup_r
0000f5e0 g     F .text	000000dc .hidden __floatsidf
00011650 g     F .text	0000007c alt_io_redirect
000162cc g     O .bss	00000001 data_size
0000e304 g     F .text	000000f4 .hidden __ltdf2
000121a4 g       *ABS*	00000000 __DTOR_END__
000031b8 g     F .text	00000014 puts
00011d74 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009eb8 g     F .text	00000074 __fpclassifyd
00009738 g     F .text	000000a4 __ratio
0000b764 g     F .text	0000001c __vfiprintf_internal
00010934 g     F .text	0000021c altera_avalon_jtag_uart_read
00002858 g     F .text	00000014 malloc
0000308c g     F .text	00000030 _printf_r
0000ce40 g     F .text	00000064 .hidden __udivsi3
0000fa38 g     F .text	000000ac isatty
00012ab4 g     O .rodata	000000c8 __mprec_tens
000081d0 g     F .text	0000000c __locale_charset
000162dc g     O .bss	00000004 __malloc_top_pad
00001d90 g     F .text	00000268 UsbGetConfigDesc2
00001410 g     F .text	00000074 clear_depth
000147a0 g     O .rwdata	00000004 __mb_cur_max
00008200 g     F .text	0000000c _localeconv_r
00008cd0 g     F .text	0000003c __i2b
00007b04 g     F .text	000004c8 __sfvwrite_r
000162ce g     O .bss	00000002 intStat
000031cc g     F .text	00000054 _sbrk_r
0000bde8 g     F .text	00000060 _read_r
000147b8 g     O .rwdata	00000004 alt_max_fd
0000b9cc g     F .text	000000f0 _fclose_r
000072f0 g     F .text	00000030 fflush
000162d8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000cf24 g     F .text	000008ac .hidden __adddf3
000094e0 g     F .text	0000010c __b2d
0000c784 g     F .text	000005c4 .hidden __umoddi3
0000fc0c g     F .text	000000dc lseek
00014790 g     O .rwdata	00000004 _global_impure_ptr
00009954 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00016434 g       *ABS*	00000000 __bss_end
0001147c g     F .text	000000f0 alt_iic_isr_register
000119ec g     F .text	00000108 alt_tick
0000c188 g     F .text	000005fc .hidden __udivdi3
0000bc34 g     F .text	00000024 _fputwc_r
00012a8c g     O .rodata	00000028 __mprec_bigtens
00008ab4 g     F .text	00000104 __s2b
0000f6bc g     F .text	000000a8 .hidden __floatunsidf
00009220 g     F .text	00000060 __mcmp
000017e0 g     F .text	00000100 UsbSetAddress
000076a0 g     F .text	00000018 __fp_lock_all
00011430 g     F .text	0000004c alt_ic_irq_enabled
00011950 g     F .text	0000009c alt_alarm_stop
000162fc g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00013580 g     O .rwdata	00000028 alt_dev_null
000110ec g     F .text	00000020 alt_dcache_flush_all
00008bb8 g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
0000f560 g     F .text	00000080 .hidden __fixdfsi
000147cc g       *ABS*	00000000 __ram_rwdata_end
000147b0 g     O .rwdata	00000008 alt_dev_list
00010140 g     F .text	00000100 write
00012cdc g       *ABS*	00000000 __ram_rodata_end
0000f944 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000e304 g     F .text	000000f4 .hidden __ledf2
0000278c g     F .text	00000080 UsbPrintMem
00008f98 g     F .text	00000140 __pow5mult
0000a258 g     F .text	0000150c ___vfiprintf_internal_r
000162ec g     O .bss	00000004 __nlocale_changed
0000cea4 g     F .text	00000058 .hidden __umodsi3
00016434 g       *ABS*	00000000 end
000012a8 g     F .text	000000f4 draw_cube
00010470 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
000121a4 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
00010dec g     F .text	0000007c alt_avalon_timer_sc_init
0000f764 g     F .text	00000064 .hidden __clzsi2
00010b50 g     F .text	00000224 altera_avalon_jtag_uart_write
00007690 g     F .text	00000004 __sfp_lock_acquire
000083ec g     F .text	000000e4 memchr
000032c0 g     F .text	000022dc ___vfprintf_internal_r
000020f8 g     F .text	00000100 UsbClassRequest
000077f4 g     F .text	00000310 _free_r
000081dc g     F .text	00000010 __locale_mb_cur_max
00011ff0 g     F .text	00000180 __call_exitprocs
000162e8 g     O .bss	00000004 __mlocale_changed
00014798 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00016300 g     O .bss	00000004 _alt_tick_rate
000090d8 g     F .text	00000148 __lshift
00016304 g     O .bss	00000004 _alt_nticks
0000fde8 g     F .text	00000104 read
000102ac g     F .text	00000060 alt_sys_init
00011ed8 g     F .text	00000118 __register_exitproc
00008d0c g     F .text	0000028c __multiply
000107dc g     F .text	00000068 altera_avalon_jtag_uart_close
0000cefc g     F .text	00000028 .hidden __mulsi3
00012cdc g       *ABS*	00000000 __ram_rwdata_start
000121a4 g       *ABS*	00000000 __ram_rodata_start
0001630c g     O .bss	00000028 __malloc_current_mallinfo
000095ec g     F .text	0000014c __d2b
000018e0 g     F .text	00000148 UsbGetDeviceDesc1
0001030c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011cb0 g     F .text	000000c4 alt_get_fd
00010f94 g     F .text	00000158 alt_busy_sleep
0000b89c g     F .text	00000054 _close_r
00011e5c g     F .text	0000007c memcmp
000103cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016434 g       *ABS*	00000000 __alt_stack_base
0001041c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005674 g     F .text	00000154 __swsetup_r
0000d7d0 g     F .text	000009d0 .hidden __divdf3
00007550 g     F .text	00000118 __sfp
00009850 g     F .text	00000078 __copybits
00013100 g     O .rwdata	00000408 __malloc_av_
0000769c g     F .text	00000004 __sinit_lock_release
0000e3f8 g     F .text	0000086c .hidden __muldf3
00009f2c g     F .text	00000054 __sread
00002680 g     F .text	00000084 UsbWaitTDListDone
00011ba8 g     F .text	00000108 alt_find_file
00011148 g     F .text	000000a4 alt_dev_llist_insert
0000fd64 g     F .text	00000024 __malloc_lock
0000ff70 g     F .text	000000b0 sbrk
00007294 g     F .text	0000005c _fflush_r
0000b8f0 g     F .text	000000dc _calloc_r
000162d0 g     O .bss	00000001 hot_plug_count
000162bc g       *ABS*	00000000 __bss_start
00008774 g     F .text	00000128 memset
000014cc g     F .text	000001c4 main
000162f8 g     O .bss	00000004 alt_envp
000162d4 g     O .bss	00000004 __malloc_max_total_mem
0001036c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001ff8 g     F .text	00000100 UsbSetConfig
0000bf88 g     F .text	00000018 __swbuf
0000a060 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
0000babc g     F .text	00000014 fclose
000059f0 g     F .text	00001688 _dtoa_r
00002880 g     F .text	0000080c _malloc_r
0000c0fc g     F .text	00000030 __ascii_wctomb
000147bc g     O .rwdata	00000004 alt_errno
00007fcc g     F .text	000000c4 _fwalk
0000cd48 g     F .text	00000084 .hidden __divsi3
000076d0 g     F .text	00000124 _malloc_trim_r
000021f8 g     F .text	00000148 UsbGetHidDesc
000121a4 g       *ABS*	00000000 __CTOR_END__
0000a068 g     F .text	000000dc strcmp
000121a4 g       *ABS*	00000000 __flash_rodata_start
000121a4 g       *ABS*	00000000 __DTOR_LIST__
0000e1a0 g     F .text	00000088 .hidden __nedf2
000016e8 g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
00010274 g     F .text	00000038 alt_irq_init
0000feec g     F .text	00000084 alt_release_fd
00012b9c g     O .rodata	00000100 .hidden __clz_tab
000162e4 g     O .bss	00000004 _PathLocale
00011e10 g     F .text	00000014 atexit
0000b83c g     F .text	00000060 _write_r
0000820c g     F .text	00000018 setlocale
00014794 g     O .rwdata	00000004 _impure_ptr
000162f0 g     O .bss	00000004 alt_argc
00007078 g     F .text	0000021c __sflush_r
00014788 g     O .rwdata	00000004 vga_cont
0001124c g     F .text	00000060 _do_dtors
000081f8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000947c g     F .text	00000064 __ulp
000076b8 g     F .text	00000018 __fp_unlock_all
000162c8 g     O .bss	00000001 toggle
000147a8 g     O .rwdata	00000008 alt_fs_list
00002340 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008224 g     F .text	0000000c localeconv
000112cc g     F .text	00000050 alt_ic_isr_register
000147cc g       *ABS*	00000000 _edata
00016434 g       *ABS*	00000000 _end
00001690 g     F .text	00000058 UsbWrite
0000bad0 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00010844 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000162d2 g     O .bss	00000002 code
000113a4 g     F .text	0000008c alt_ic_irq_disable
00009f88 g     F .text	0000007c __swrite
0001479c g     O .rwdata	00000004 __malloc_trim_threshold
000081ec g     F .text	0000000c __locale_msgcharset
000162c0 g     O .bss	00000002 fs_device
00011e24 g     F .text	00000038 exit
00008090 g     F .text	000000c4 _fwalk_reent
00009280 g     F .text	000001fc __mdiff
0000cdcc g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007694 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
00012170 g     F .text	00000034 _exit
00010e68 g     F .text	0000012c alt_alarm_start
00008230 g     F .text	000001bc __smakebuf_r
00003220 g     F .text	00000098 strlen
000117f4 g     F .text	0000015c open
0000e228 g     F .text	000000dc .hidden __gedf2
0000280c g     F .text	0000004c clock
000147a4 g     O .rwdata	00000004 __wctomb
0000a240 g     F .text	00000018 __sprint_r
000112ac g     F .text	00000020 alt_icache_flush_all
0001131c g     F .text	00000088 alt_ic_irq_enable
0000559c g     F .text	0000001c __vfprintf_internal
0000c12c g     F .text	0000005c _wctomb_r
0000139c g     F .text	00000074 clear_screen
0000ec64 g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
00008c20 g     F .text	000000b0 __lo0bits
00001c00 g     F .text	00000190 UsbGetConfigDesc1
000147c4 g     O .rwdata	00000008 alt_alarm_list
000111ec g     F .text	00000060 _do_ctors
0000172c g     F .text	000000b4 UsbSoftReset
0000c03c g     F .text	000000c0 wcrtomb
0000f804 g     F .text	000000d8 close
00001a28 g     F .text	000001d8 UsbGetDeviceDesc2
0000fb4c g     F .text	00000084 alt_load
0000bc58 g     F .text	00000080 fputwc
0000286c g     F .text	00000014 free
00007698 g     F .text	00000004 __sinit_lock_acquire
0000896c g     F .text	00000148 __multadd
00008944 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	1098cd04 	addi	r2,r2,25396
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	1098cd04 	addi	r2,r2,25396
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6e017 	ldw	r2,-25728(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6e017 	ldw	r2,-25728(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6b1e214 	ori	gp,gp,51080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	1098af14 	ori	r2,r2,25276

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18d90d14 	ori	r3,r3,25652

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000fb4c0 	call	fb4c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000fce80 	call	fce8 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820034 	movhi	r2,2048
     288:	108c0804 	addi	r2,r2,12320
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820034 	movhi	r2,2048
     298:	108c0c04 	addi	r2,r2,12336
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820034 	movhi	r2,2048
     2a8:	108c1404 	addi	r2,r2,12368
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820034 	movhi	r2,2048
     2b8:	108c1004 	addi	r2,r2,12352
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820034 	movhi	r2,2048
     2c8:	108c1c04 	addi	r2,r2,12400
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820034 	movhi	r2,2048
     2d4:	108c1804 	addi	r2,r2,12384
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820034 	movhi	r2,2048
     2e0:	108c0c04 	addi	r2,r2,12336
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820034 	movhi	r2,2048
     2ec:	108c0804 	addi	r2,r2,12320
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820034 	movhi	r2,2048
     2f8:	108c0804 	addi	r2,r2,12320
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820034 	movhi	r2,2048
     308:	108c0c04 	addi	r2,r2,12336
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820034 	movhi	r2,2048
     348:	108c1c04 	addi	r2,r2,12400
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820034 	movhi	r2,2048
     358:	108c1804 	addi	r2,r2,12384
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820034 	movhi	r2,2048
     368:	108c0c04 	addi	r2,r2,12336
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820034 	movhi	r2,2048
     374:	108c1004 	addi	r2,r2,12352
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820034 	movhi	r2,2048
     380:	108c1004 	addi	r2,r2,12352
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820034 	movhi	r2,2048
     390:	108c0c04 	addi	r2,r2,12336
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820034 	movhi	r2,2048
     3c8:	108c1c04 	addi	r2,r2,12400
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820034 	movhi	r2,2048
     3d8:	108c0c04 	addi	r2,r2,12336
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820034 	movhi	r2,2048
     3e4:	108c1404 	addi	r2,r2,12368
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820034 	movhi	r2,2048
     3f0:	108c1804 	addi	r2,r2,12384
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820034 	movhi	r2,2048
     400:	108c1404 	addi	r2,r2,12368
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820034 	movhi	r2,2048
     410:	108c0c04 	addi	r2,r2,12336
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a6d003 	ldbu	r2,-25792(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a6d005 	stb	r2,-25792(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a6d103 	ldbu	r2,-25788(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a6d003 	ldbu	r2,-25792(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	00016900 	call	1690 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a6d103 	ldbu	r2,-25788(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a6d003 	ldbu	r2,-25792(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	00016900 	call	1690 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	00100d40 	call	100d4 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	00026800 	call	2680 <UsbWaitTDListDone>
     58c:	d0a6d08d 	sth	r2,-25790(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	00016e80 	call	16e8 <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a6cf15 	stw	r2,-25796(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a6cf17 	ldw	r2,-25796(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	21086904 	addi	r4,r4,8612
     5b0:	00030bc0 	call	30bc <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820034 	movhi	r2,2048
     5b8:	108c2004 	addi	r2,r2,12416
     5bc:	d0e6cf17 	ldw	r3,-25796(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a6cf17 	ldw	r2,-25796(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	00100d40 	call	100d4 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a6cd0b 	ldhu	r2,-25804(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	00016e80 	call	16e8 <UsbRead>
     5ec:	d0a6d08d 	sth	r2,-25790(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e6d08b 	ldhu	r3,-25790(gp)
     5f4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d026d205 	stb	zero,-25784(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	00100d40 	call	100d4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a6cd0b 	ldhu	r2,-25804(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	00016e80 	call	16e8 <UsbRead>
     624:	d0a6d08d 	sth	r2,-25790(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e6d08b 	ldhu	r3,-25790(gp)
     62c:	d0a6cd8b 	ldhu	r2,-25802(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a6d203 	ldbu	r2,-25784(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a6d205 	stb	r2,-25784(gp)
     648:	d0a6d203 	ldbu	r2,-25784(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e6d08b 	ldhu	r3,-25790(gp)
     664:	d0a6cd8b 	ldhu	r2,-25802(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	21087204 	addi	r4,r4,8648
     67c:	00031b80 	call	31b8 <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	21087d04 	addi	r4,r4,8692
     688:	00031b80 	call	31b8 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6cd0b 	ldhu	r2,-25804(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	00016e80 	call	16e8 <UsbRead>
     6a0:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	00100d40 	call	100d4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a6cd0b 	ldhu	r2,-25804(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	00016e80 	call	16e8 <UsbRead>
     6bc:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	00100d40 	call	100d4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a6cd0b 	ldhu	r2,-25804(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	00016e80 	call	16e8 <UsbRead>
     6d8:	d0a6d08d 	sth	r2,-25790(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	00100d40 	call	100d4 <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e6d08b 	ldhu	r3,-25790(gp)
     6e8:	d0a6cd8b 	ldhu	r2,-25802(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	00100d40 	call	100d4 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e6d08b 	ldhu	r3,-25790(gp)
     708:	d0a6cd8b 	ldhu	r2,-25802(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	21088504 	addi	r4,r4,8724
     74c:	00031b80 	call	31b8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	000172c0 	call	172c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	00016900 	call	1690 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	00016900 	call	1690 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	00016900 	call	1690 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a6d08d 	sth	r2,-25790(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a6d08b 	ldhu	r2,-25790(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	00016900 	call	1690 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a6d18d 	sth	r2,-25786(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a6d18b 	ldhu	r2,-25786(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	00016900 	call	1690 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	00016900 	call	1690 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	21088b04 	addi	r4,r4,8748
     8a0:	00030bc0 	call	30bc <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	21089404 	addi	r4,r4,8784
     8c4:	00030bc0 	call	30bc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	00016900 	call	1690 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	00016900 	call	1690 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	21088b04 	addi	r4,r4,8748
     9b8:	00030bc0 	call	30bc <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a6cd0d 	sth	r2,-25804(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a6cd8d 	sth	r2,-25802(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a6ce0d 	sth	r2,-25800(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a6cd0b 	ldhu	r2,-25804(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	00016e80 	call	16e8 <UsbRead>
     9e8:	d0a6d08d 	sth	r2,-25790(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e6d08b 	ldhu	r3,-25790(gp)
     9f0:	d0a6cd8b 	ldhu	r2,-25802(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d026d205 	stb	zero,-25784(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	00100d40 	call	100d4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a6cd0b 	ldhu	r2,-25804(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	00016e80 	call	16e8 <UsbRead>
     a20:	d0a6d08d 	sth	r2,-25790(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e6d08b 	ldhu	r3,-25790(gp)
     a28:	d0a6cd8b 	ldhu	r2,-25802(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a6d203 	ldbu	r2,-25784(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a6d205 	stb	r2,-25784(gp)
     a44:	d0a6d203 	ldbu	r2,-25784(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e6d08b 	ldhu	r3,-25790(gp)
     a60:	d0a6cd8b 	ldhu	r2,-25802(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	21089804 	addi	r4,r4,8800
     a78:	00031b80 	call	31b8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	2108a204 	addi	r4,r4,8840
     a84:	00031b80 	call	31b8 <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a6cd0b 	ldhu	r2,-25804(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	00016e80 	call	16e8 <UsbRead>
     a9c:	d0a6d08d 	sth	r2,-25790(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e6d08b 	ldhu	r3,-25790(gp)
     aa4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	00100d40 	call	100d4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e6d08b 	ldhu	r3,-25790(gp)
     ac4:	d0a6cd8b 	ldhu	r2,-25802(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e6d08b 	ldhu	r3,-25790(gp)
     adc:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	2108ae04 	addi	r4,r4,8888
     af4:	00031b80 	call	31b8 <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	2108b504 	addi	r4,r4,8916
     b04:	00031b80 	call	31b8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	00017e00 	call	17e0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	00017e00 	call	17e0 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	00100d40 	call	100d4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	2108bc04 	addi	r4,r4,8944
     b58:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a6d08b 	ldhu	r2,-25790(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	2108c704 	addi	r4,r4,8988
     b88:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a6d08b 	ldhu	r2,-25790(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	00027040 	call	2704 <UsbGetRetryCnt>
     ba4:	d0a6d08d 	sth	r2,-25790(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	2108d304 	addi	r4,r4,9036
     bb4:	00031b80 	call	31b8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	00018e00 	call	18e0 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	00100d40 	call	100d4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	00018e00 	call	18e0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	00100d40 	call	100d4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	2108e204 	addi	r4,r4,9096
     c10:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a6d08b 	ldhu	r2,-25790(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	2108ed04 	addi	r4,r4,9140
     c40:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a6d08b 	ldhu	r2,-25790(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	00027040 	call	2704 <UsbGetRetryCnt>
     c5c:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	2108f904 	addi	r4,r4,9188
     c68:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	21090204 	addi	r4,r4,9224
     c78:	00031b80 	call	31b8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	0001a280 	call	1a28 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	0001a280 	call	1a28 <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	00100d40 	call	100d4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	2108e204 	addi	r4,r4,9096
     ccc:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a6d08b 	ldhu	r2,-25790(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	2108ed04 	addi	r4,r4,9140
     cfc:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a6d08b 	ldhu	r2,-25790(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	00027040 	call	2704 <UsbGetRetryCnt>
     d18:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	2108f904 	addi	r4,r4,9188
     d24:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	21091604 	addi	r4,r4,9304
     d34:	00031b80 	call	31b8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	0001c000 	call	1c00 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	0001c000 	call	1c00 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	00100d40 	call	100d4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	21092804 	addi	r4,r4,9376
     d88:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a6d08b 	ldhu	r2,-25790(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	21093304 	addi	r4,r4,9420
     db8:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a6d08b 	ldhu	r2,-25790(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	00027040 	call	2704 <UsbGetRetryCnt>
     dd4:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	2108f904 	addi	r4,r4,9188
     de0:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	21093f04 	addi	r4,r4,9468
     df0:	00031b80 	call	31b8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	0001d900 	call	1d90 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	00100d40 	call	100d4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	0001d900 	call	1d90 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	00100d40 	call	100d4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	21095204 	addi	r4,r4,9544
     e50:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a6d08b 	ldhu	r2,-25790(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	21095d04 	addi	r4,r4,9588
     e80:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a6d08b 	ldhu	r2,-25790(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	00027040 	call	2704 <UsbGetRetryCnt>
     e9c:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	2108f904 	addi	r4,r4,9188
     ea8:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	21096904 	addi	r4,r4,9636
     eb8:	00031b80 	call	31b8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a6d28d 	sth	r2,-25782(gp)
	code = code & 0x003;
     ed4:	d0a6d28b 	ldhu	r2,-25782(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a6d28d 	sth	r2,-25782(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a6d28b 	ldhu	r2,-25782(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	21097c04 	addi	r4,r4,9712
     ef4:	00030bc0 	call	30bc <printf>

	if (code == 0x01)
     ef8:	d0a6d28b 	ldhu	r2,-25782(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	21097f04 	addi	r4,r4,9724
     f10:	00031b80 	call	31b8 <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	21098e04 	addi	r4,r4,9784
     f20:	00031b80 	call	31b8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	00016900 	call	1690 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a6d105 	stb	r2,-25788(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a6d103 	ldbu	r2,-25788(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	21099704 	addi	r4,r4,9820
     fa4:	00030bc0 	call	30bc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	0001ff80 	call	1ff8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	0001ff80 	call	1ff8 <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	00100d40 	call	100d4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	2109a104 	addi	r4,r4,9860
     ff8:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a6d08b 	ldhu	r2,-25790(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	2109ac04 	addi	r4,r4,9904
    1028:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a6d08b 	ldhu	r2,-25790(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	00027040 	call	2704 <UsbGetRetryCnt>
    1044:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	2108f904 	addi	r4,r4,9188
    1050:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	2109b804 	addi	r4,r4,9952
    1060:	00031b80 	call	31b8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	00020f80 	call	20f8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	00020f80 	call	20f8 <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	00100d40 	call	100d4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	2109ca04 	addi	r4,r4,10024
    10b4:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a6d08b 	ldhu	r2,-25790(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	2109d504 	addi	r4,r4,10068
    10e4:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a6d08b 	ldhu	r2,-25790(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	00027040 	call	2704 <UsbGetRetryCnt>
    1100:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	2108f904 	addi	r4,r4,9188
    110c:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	2109e104 	addi	r4,r4,10116
    111c:	00031b80 	call	31b8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	00021f80 	call	21f8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	00021f80 	call	21f8 <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	00100d40 	call	100d4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	2109ca04 	addi	r4,r4,10024
    1170:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a6d08b 	ldhu	r2,-25790(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	2109d504 	addi	r4,r4,10068
    11a0:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a6d08b 	ldhu	r2,-25790(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	00027040 	call	2704 <UsbGetRetryCnt>
    11bc:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	2108f904 	addi	r4,r4,9188
    11c8:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	2109f304 	addi	r4,r4,10188
    11d8:	00031b80 	call	31b8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	00023400 	call	2340 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	00023400 	call	2340 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	00026800 	call	2680 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	210a0704 	addi	r4,r4,10268
    1224:	00030bc0 	call	30bc <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a6d08d 	sth	r2,-25790(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a6d08b 	ldhu	r2,-25790(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	210a1304 	addi	r4,r4,10316
    1254:	00030bc0 	call	30bc <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a6d08b 	ldhu	r2,-25790(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	00027040 	call	2704 <UsbGetRetryCnt>
    1270:	d0a6d08d 	sth	r2,-25790(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	2108f904 	addi	r4,r4,9188
    127c:	00031b80 	call	31b8 <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	210a1f04 	addi	r4,r4,10364
    128c:	00031b80 	call	31b8 <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <draw_cube>:
#include "keyboard.h"




void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z, int block_id) {
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
    12c8:	e0bffc17 	ldw	r2,-16(fp)
    12cc:	00c00044 	movi	r3,1
    12d0:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
    12d4:	e0bffc17 	ldw	r2,-16(fp)
    12d8:	e0c00317 	ldw	r3,12(fp)
    12dc:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	1006923a 	slli	r3,r2,8
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    12f0:	e0bffe17 	ldw	r2,-8(fp)
    12f4:	1006923a 	slli	r3,r2,8
    12f8:	e0bffc17 	ldw	r2,-16(fp)
    12fc:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	1006923a 	slli	r3,r2,8
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10c00615 	stw	r3,24(r2)
	gpu->z = z * (FP_SCALE);
    1310:	e0800217 	ldw	r2,8(fp)
    1314:	1006923a 	slli	r3,r2,8
    1318:	e0bffc17 	ldw	r2,-16(fp)
    131c:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    1320:	e0bffc17 	ldw	r2,-16(fp)
    1324:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	00c00044 	movi	r3,1
    1338:	10c00115 	stw	r3,4(r2)
	time_t start = clock();
    133c:	000280c0 	call	280c <clock>
    1340:	e0bffb15 	stw	r2,-20(fp)
	while(gpu->done == 0) {
    1344:	0001883a 	nop
    1348:	e0bffc17 	ldw	r2,-16(fp)
    134c:	10800217 	ldw	r2,8(r2)
    1350:	103ffd26 	beq	r2,zero,1348 <__alt_exception_stack_pointer+0xf8001348>

	}
	printf("Render ticks %d\n", clock() - start);
    1354:	000280c0 	call	280c <clock>
    1358:	1007883a 	mov	r3,r2
    135c:	e0bffb17 	ldw	r2,-20(fp)
    1360:	1885c83a 	sub	r2,r3,r2
    1364:	100b883a 	mov	r5,r2
    1368:	01000074 	movhi	r4,1
    136c:	210a3304 	addi	r4,r4,10444
    1370:	00030bc0 	call	30bc <printf>
	gpu->done = 0;
    1374:	e0bffc17 	ldw	r2,-16(fp)
    1378:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    137c:	e0bffc17 	ldw	r2,-16(fp)
    1380:	10000815 	stw	zero,32(r2)

}
    1384:	0001883a 	nop
    1388:	e037883a 	mov	sp,fp
    138c:	dfc00117 	ldw	ra,4(sp)
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00204 	addi	sp,sp,8
    1398:	f800283a 	ret

0000139c <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    139c:	defffd04 	addi	sp,sp,-12
    13a0:	df000215 	stw	fp,8(sp)
    13a4:	df000204 	addi	fp,sp,8
    13a8:	e13ffe15 	stw	r4,-8(fp)
    13ac:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
    13b0:	e0bffe17 	ldw	r2,-8(fp)
    13b4:	00c00084 	movi	r3,2
    13b8:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    13bc:	e0bffe17 	ldw	r2,-8(fp)
    13c0:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    13c4:	e0bffe17 	ldw	r2,-8(fp)
    13c8:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	00c00044 	movi	r3,1
    13d4:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if(should_wait == 1) {
    13d8:	e0bfff17 	ldw	r2,-4(fp)
    13dc:	10800058 	cmpnei	r2,r2,1
    13e0:	1000041e 	bne	r2,zero,13f4 <clear_screen+0x58>
		while(gpu->done == 0) {
    13e4:	0001883a 	nop
    13e8:	e0bffe17 	ldw	r2,-8(fp)
    13ec:	10800217 	ldw	r2,8(r2)
    13f0:	103ffd26 	beq	r2,zero,13e8 <__alt_exception_stack_pointer+0xf80013e8>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    13f4:	e0bffe17 	ldw	r2,-8(fp)
    13f8:	10000815 	stw	zero,32(r2)
}
    13fc:	0001883a 	nop
    1400:	e037883a 	mov	sp,fp
    1404:	df000017 	ldw	fp,0(sp)
    1408:	dec00104 	addi	sp,sp,4
    140c:	f800283a 	ret

00001410 <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
    1410:	defffd04 	addi	sp,sp,-12
    1414:	df000215 	stw	fp,8(sp)
    1418:	df000204 	addi	fp,sp,8
    141c:	e13ffe15 	stw	r4,-8(fp)
    1420:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
    1424:	e0bffe17 	ldw	r2,-8(fp)
    1428:	00c000c4 	movi	r3,3
    142c:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    1430:	e0bffe17 	ldw	r2,-8(fp)
    1434:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1438:	e0bffe17 	ldw	r2,-8(fp)
    143c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1440:	e0bffe17 	ldw	r2,-8(fp)
    1444:	00c00044 	movi	r3,1
    1448:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if(should_wait == 1) {
    144c:	e0bfff17 	ldw	r2,-4(fp)
    1450:	10800058 	cmpnei	r2,r2,1
    1454:	1000041e 	bne	r2,zero,1468 <clear_depth+0x58>
		while(gpu->done == 0) {
    1458:	0001883a 	nop
    145c:	e0bffe17 	ldw	r2,-8(fp)
    1460:	10800217 	ldw	r2,8(r2)
    1464:	103ffd26 	beq	r2,zero,145c <__alt_exception_stack_pointer+0xf800145c>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    1468:	e0bffe17 	ldw	r2,-8(fp)
    146c:	10000815 	stw	zero,32(r2)
}
    1470:	0001883a 	nop
    1474:	e037883a 	mov	sp,fp
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00104 	addi	sp,sp,4
    1480:	f800283a 	ret

00001484 <swap_buffers>:


volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;

void swap_buffers() {
    1484:	defffe04 	addi	sp,sp,-8
    1488:	df000115 	stw	fp,4(sp)
    148c:	df000104 	addi	fp,sp,4
	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
    1490:	d0a00017 	ldw	r2,-32768(gp)
    1494:	10800017 	ldw	r2,0(r2)
    1498:	e0bfff15 	stw	r2,-4(fp)
	vga_cont->frame_pointer = gpu->frame_pointer;
    149c:	d0a00017 	ldw	r2,-32768(gp)
    14a0:	d0e00117 	ldw	r3,-32764(gp)
    14a4:	18c00017 	ldw	r3,0(r3)
    14a8:	10c00015 	stw	r3,0(r2)
	gpu->frame_pointer = temp;
    14ac:	d0a00117 	ldw	r2,-32764(gp)
    14b0:	e0ffff17 	ldw	r3,-4(fp)
    14b4:	10c00015 	stw	r3,0(r2)
}
    14b8:	0001883a 	nop
    14bc:	e037883a 	mov	sp,fp
    14c0:	df000017 	ldw	fp,0(sp)
    14c4:	dec00104 	addi	sp,sp,4
    14c8:	f800283a 	ret

000014cc <main>:


int main()
{
    14cc:	defff204 	addi	sp,sp,-56
    14d0:	dfc00d15 	stw	ra,52(sp)
    14d4:	df000c15 	stw	fp,48(sp)
    14d8:	df000c04 	addi	fp,sp,48

	printf("Starting up");
    14dc:	01000074 	movhi	r4,1
    14e0:	210a3804 	addi	r4,r4,10464
    14e4:	00030bc0 	call	30bc <printf>

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
    14e8:	010004f4 	movhi	r4,19
    14ec:	21300004 	addi	r4,r4,-16384
    14f0:	00028580 	call	2858 <malloc>
    14f4:	e0bff815 	stw	r2,-32(fp)
	union frame_buffer_t* frame2 =  malloc(sizeof(frame_buffer_t));
    14f8:	010004f4 	movhi	r4,19
    14fc:	21300004 	addi	r4,r4,-16384
    1500:	00028580 	call	2858 <malloc>
    1504:	e0bff915 	stw	r2,-28(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    1508:	010004f4 	movhi	r4,19
    150c:	21300004 	addi	r4,r4,-16384
    1510:	00028580 	call	2858 <malloc>
    1514:	e0bffa15 	stw	r2,-24(fp)

	gpu->frame_pointer = frame1;
    1518:	d0a00117 	ldw	r2,-32764(gp)
    151c:	e0fff817 	ldw	r3,-32(fp)
    1520:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    1524:	d0a00117 	ldw	r2,-32764(gp)
    1528:	e0fffa17 	ldw	r3,-24(fp)
    152c:	10c00315 	stw	r3,12(r2)
	vga_cont->frame_pointer = frame1;
    1530:	d0a00017 	ldw	r2,-32768(gp)
    1534:	e0fff817 	ldw	r3,-32(fp)
    1538:	10c00015 	stw	r3,0(r2)

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1, frame2, z_buffer);
    153c:	e1fffa17 	ldw	r7,-24(fp)
    1540:	e1bff917 	ldw	r6,-28(fp)
    1544:	e17ff817 	ldw	r5,-32(fp)
    1548:	01000074 	movhi	r4,1
    154c:	210a3b04 	addi	r4,r4,10476
    1550:	00030bc0 	call	30bc <printf>
	int depth = 70;
    1554:	00801184 	movi	r2,70
    1558:	e0bffb15 	stw	r2,-20(fp)
	int x = 0;
    155c:	e03ffc15 	stw	zero,-16(fp)
	int y = 0;
    1560:	e03ffd15 	stw	zero,-12(fp)
	clear_screen(gpu, 1);
    1564:	d0a00117 	ldw	r2,-32764(gp)
    1568:	01400044 	movi	r5,1
    156c:	1009883a 	mov	r4,r2
    1570:	000139c0 	call	139c <clear_screen>
	clear_depth(gpu, 1);
    1574:	d0a00117 	ldw	r2,-32764(gp)
    1578:	01400044 	movi	r5,1
    157c:	1009883a 	mov	r4,r2
    1580:	00014100 	call	1410 <clear_depth>
	printf("Done initial clear, Initing keyboard\n");
    1584:	01000074 	movhi	r4,1
    1588:	210a4904 	addi	r4,r4,10532
    158c:	00031b80 	call	31b8 <puts>
	//init_keyboard();

	int keycode = 0;
    1590:	e03ffe15 	stw	zero,-8(fp)

	while(1) {
		time_t start_time = clock();
    1594:	000280c0 	call	280c <clock>
    1598:	e0bfff15 	stw	r2,-4(fp)
		clear_depth(gpu, 1);
    159c:	d0a00117 	ldw	r2,-32764(gp)
    15a0:	01400044 	movi	r5,1
    15a4:	1009883a 	mov	r4,r2
    15a8:	00014100 	call	1410 <clear_depth>
		clear_screen(gpu, 1);
    15ac:	d0a00117 	ldw	r2,-32764(gp)
    15b0:	01400044 	movi	r5,1
    15b4:	1009883a 	mov	r4,r2
    15b8:	000139c0 	call	139c <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    15bc:	000280c0 	call	280c <clock>
    15c0:	1007883a 	mov	r3,r2
    15c4:	e0bfff17 	ldw	r2,-4(fp)
    15c8:	1885c83a 	sub	r2,r3,r2
    15cc:	100b883a 	mov	r5,r2
    15d0:	01000074 	movhi	r4,1
    15d4:	210a5304 	addi	r4,r4,10572
    15d8:	00030bc0 	call	30bc <printf>
		start_time = clock();
    15dc:	000280c0 	call	280c <clock>
    15e0:	e0bfff15 	stw	r2,-4(fp)

		//draw_cube(gpu, 2, 0, 0, -depth);
		for(int i=4;i>-7;i--) {
    15e4:	00800104 	movi	r2,4
    15e8:	e0bff615 	stw	r2,-40(fp)
    15ec:	00001906 	br	1654 <main+0x188>
			for(int j=4;j>-7;j--) {
    15f0:	00800104 	movi	r2,4
    15f4:	e0bff715 	stw	r2,-36(fp)
    15f8:	00001006 	br	163c <main+0x170>
				draw_cube(gpu, 8, j*8, -20, -70 + i*8, 0);
    15fc:	d0e00117 	ldw	r3,-32764(gp)
    1600:	e0bff717 	ldw	r2,-36(fp)
    1604:	100890fa 	slli	r4,r2,3
    1608:	e0bff617 	ldw	r2,-40(fp)
    160c:	100490fa 	slli	r2,r2,3
    1610:	10bfee84 	addi	r2,r2,-70
    1614:	d8000115 	stw	zero,4(sp)
    1618:	d8800015 	stw	r2,0(sp)
    161c:	01fffb04 	movi	r7,-20
    1620:	200d883a 	mov	r6,r4
    1624:	01400204 	movi	r5,8
    1628:	1809883a 	mov	r4,r3
    162c:	00012a80 	call	12a8 <draw_cube>
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		//draw_cube(gpu, 2, 0, 0, -depth);
		for(int i=4;i>-7;i--) {
			for(int j=4;j>-7;j--) {
    1630:	e0bff717 	ldw	r2,-36(fp)
    1634:	10bfffc4 	addi	r2,r2,-1
    1638:	e0bff715 	stw	r2,-36(fp)
    163c:	e0bff717 	ldw	r2,-36(fp)
    1640:	10bffe88 	cmpgei	r2,r2,-6
    1644:	103fed1e 	bne	r2,zero,15fc <__alt_exception_stack_pointer+0xf80015fc>
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		//draw_cube(gpu, 2, 0, 0, -depth);
		for(int i=4;i>-7;i--) {
    1648:	e0bff617 	ldw	r2,-40(fp)
    164c:	10bfffc4 	addi	r2,r2,-1
    1650:	e0bff615 	stw	r2,-40(fp)
    1654:	e0bff617 	ldw	r2,-40(fp)
    1658:	10bffe88 	cmpgei	r2,r2,-6
    165c:	103fe41e 	bne	r2,zero,15f0 <__alt_exception_stack_pointer+0xf80015f0>

			}
		}


		printf("Render ticks %d\n", clock() - start_time);
    1660:	000280c0 	call	280c <clock>
    1664:	1007883a 	mov	r3,r2
    1668:	e0bfff17 	ldw	r2,-4(fp)
    166c:	1885c83a 	sub	r2,r3,r2
    1670:	100b883a 	mov	r5,r2
    1674:	01000074 	movhi	r4,1
    1678:	210a3304 	addi	r4,r4,10444
    167c:	00030bc0 	call	30bc <printf>
		start_time = clock();
    1680:	000280c0 	call	280c <clock>
    1684:	e0bfff15 	stw	r2,-4(fp)
		//usleep(10);
		//printf("swaping");
		swap_buffers();
    1688:	00014840 	call	1484 <swap_buffers>
//			y -= 5;
//		} else if(keycode == 81) {
//			y += 5;
//		}

	}
    168c:	003fc106 	br	1594 <__alt_exception_stack_pointer+0xf8001594>

00001690 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1690:	defffc04 	addi	sp,sp,-16
    1694:	dfc00315 	stw	ra,12(sp)
    1698:	df000215 	stw	fp,8(sp)
    169c:	df000204 	addi	fp,sp,8
    16a0:	2007883a 	mov	r3,r4
    16a4:	2805883a 	mov	r2,r5
    16a8:	e0fffe0d 	sth	r3,-8(fp)
    16ac:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    16b0:	e0bffe0b 	ldhu	r2,-8(fp)
    16b4:	100b883a 	mov	r5,r2
    16b8:	01000084 	movi	r4,2
    16bc:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    16c0:	e0bfff0b 	ldhu	r2,-4(fp)
    16c4:	100b883a 	mov	r5,r2
    16c8:	0009883a 	mov	r4,zero
    16cc:	00003280 	call	328 <IO_write>
}
    16d0:	0001883a 	nop
    16d4:	e037883a 	mov	sp,fp
    16d8:	dfc00117 	ldw	ra,4(sp)
    16dc:	df000017 	ldw	fp,0(sp)
    16e0:	dec00204 	addi	sp,sp,8
    16e4:	f800283a 	ret

000016e8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    16e8:	defffd04 	addi	sp,sp,-12
    16ec:	dfc00215 	stw	ra,8(sp)
    16f0:	df000115 	stw	fp,4(sp)
    16f4:	df000104 	addi	fp,sp,4
    16f8:	2005883a 	mov	r2,r4
    16fc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1700:	e0bfff0b 	ldhu	r2,-4(fp)
    1704:	100b883a 	mov	r5,r2
    1708:	01000084 	movi	r4,2
    170c:	00003280 	call	328 <IO_write>
	return IO_read(0);
    1710:	0009883a 	mov	r4,zero
    1714:	00003b00 	call	3b0 <IO_read>

}
    1718:	e037883a 	mov	sp,fp
    171c:	dfc00117 	ldw	ra,4(sp)
    1720:	df000017 	ldw	fp,0(sp)
    1724:	dec00204 	addi	sp,sp,8
    1728:	f800283a 	ret

0000172c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    172c:	defffe04 	addi	sp,sp,-8
    1730:	dfc00115 	stw	ra,4(sp)
    1734:	df000015 	stw	fp,0(sp)
    1738:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    173c:	017e9414 	movui	r5,64080
    1740:	01000044 	movi	r4,1
    1744:	00003280 	call	328 <IO_write>
	usleep(100000);
    1748:	010000b4 	movhi	r4,2
    174c:	2121a804 	addi	r4,r4,-31072
    1750:	00100d40 	call	100d4 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1754:	01000074 	movhi	r4,1
    1758:	210a5704 	addi	r4,r4,10588
    175c:	00031b80 	call	31b8 <puts>

	usleep(500000);
    1760:	01000234 	movhi	r4,8
    1764:	21284804 	addi	r4,r4,-24288
    1768:	00100d40 	call	100d4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    176c:	01000074 	movhi	r4,1
    1770:	210a5e04 	addi	r4,r4,10616
    1774:	00031b80 	call	31b8 <puts>
	IO_read(HPI_MAILBOX);
    1778:	01000044 	movi	r4,1
    177c:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1780:	010000c4 	movi	r4,3
    1784:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1788:	01005104 	movi	r4,324
    178c:	00016e80 	call	16e8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1790:	000b883a 	mov	r5,zero
    1794:	01005104 	movi	r4,324
    1798:	00016900 	call	1690 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    179c:	01005204 	movi	r4,328
    17a0:	00016e80 	call	16e8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    17a4:	000b883a 	mov	r5,zero
    17a8:	01005204 	movi	r4,328
    17ac:	00016900 	call	1690 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    17b0:	017fffd4 	movui	r5,65535
    17b4:	01302414 	movui	r4,49296
    17b8:	00016900 	call	1690 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    17bc:	017fffd4 	movui	r5,65535
    17c0:	01302c14 	movui	r4,49328
    17c4:	00016900 	call	1690 <UsbWrite>
}
    17c8:	0001883a 	nop
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <UsbSetAddress>:


void UsbSetAddress()
{
    17e0:	defffe04 	addi	sp,sp,-8
    17e4:	dfc00115 	stw	ra,4(sp)
    17e8:	df000015 	stw	fp,0(sp)
    17ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    17f0:	01414004 	movi	r5,1280
    17f4:	01000084 	movi	r4,2
    17f8:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    17fc:	01414304 	movi	r5,1292
    1800:	0009883a 	mov	r4,zero
    1804:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1808:	01400204 	movi	r5,8
    180c:	0009883a 	mov	r4,zero
    1810:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1814:	01403404 	movi	r5,208
    1818:	0009883a 	mov	r4,zero
    181c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1820:	01400044 	movi	r5,1
    1824:	0009883a 	mov	r4,zero
    1828:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    182c:	014004c4 	movi	r5,19
    1830:	0009883a 	mov	r4,zero
    1834:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1838:	01414504 	movi	r5,1300
    183c:	0009883a 	mov	r4,zero
    1840:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1844:	01414004 	movi	r5,1280
    1848:	0009883a 	mov	r4,zero
    184c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1850:	01400084 	movi	r5,2
    1854:	0009883a 	mov	r4,zero
    1858:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    185c:	000b883a 	mov	r5,zero
    1860:	0009883a 	mov	r4,zero
    1864:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1868:	000b883a 	mov	r5,zero
    186c:	0009883a 	mov	r4,zero
    1870:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1874:	000b883a 	mov	r5,zero
    1878:	0009883a 	mov	r4,zero
    187c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1880:	000b883a 	mov	r5,zero
    1884:	0009883a 	mov	r4,zero
    1888:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    188c:	01402404 	movi	r5,144
    1890:	0009883a 	mov	r4,zero
    1894:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1898:	01401044 	movi	r5,65
    189c:	0009883a 	mov	r4,zero
    18a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    18a4:	014004c4 	movi	r5,19
    18a8:	0009883a 	mov	r4,zero
    18ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    18b0:	000b883a 	mov	r5,zero
    18b4:	0009883a 	mov	r4,zero
    18b8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    18bc:	01414004 	movi	r5,1280
    18c0:	01006c04 	movi	r4,432
    18c4:	00016900 	call	1690 <UsbWrite>
}
    18c8:	0001883a 	nop
    18cc:	e037883a 	mov	sp,fp
    18d0:	dfc00117 	ldw	ra,4(sp)
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00204 	addi	sp,sp,8
    18dc:	f800283a 	ret

000018e0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    18e0:	defffe04 	addi	sp,sp,-8
    18e4:	dfc00115 	stw	ra,4(sp)
    18e8:	df000015 	stw	fp,0(sp)
    18ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    18f0:	01414004 	movi	r5,1280
    18f4:	01000084 	movi	r4,2
    18f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    18fc:	01414304 	movi	r5,1292
    1900:	0009883a 	mov	r4,zero
    1904:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1908:	01400204 	movi	r5,8
    190c:	0009883a 	mov	r4,zero
    1910:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1914:	0140b404 	movi	r5,720
    1918:	0009883a 	mov	r4,zero
    191c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1920:	01400044 	movi	r5,1
    1924:	0009883a 	mov	r4,zero
    1928:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    192c:	014004c4 	movi	r5,19
    1930:	0009883a 	mov	r4,zero
    1934:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1938:	01414504 	movi	r5,1300
    193c:	0009883a 	mov	r4,zero
    1940:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1944:	0141a004 	movi	r5,1664
    1948:	0009883a 	mov	r4,zero
    194c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1950:	01404004 	movi	r5,256
    1954:	0009883a 	mov	r4,zero
    1958:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    195c:	000b883a 	mov	r5,zero
    1960:	0009883a 	mov	r4,zero
    1964:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1968:	01400204 	movi	r5,8
    196c:	0009883a 	mov	r4,zero
    1970:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1974:	01414b04 	movi	r5,1324
    1978:	0009883a 	mov	r4,zero
    197c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1980:	01400204 	movi	r5,8
    1984:	0009883a 	mov	r4,zero
    1988:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    198c:	0140a404 	movi	r5,656
    1990:	0009883a 	mov	r4,zero
    1994:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1998:	01401044 	movi	r5,65
    199c:	0009883a 	mov	r4,zero
    19a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19a4:	014004c4 	movi	r5,19
    19a8:	0009883a 	mov	r4,zero
    19ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    19b0:	01414804 	movi	r5,1312
    19b4:	0009883a 	mov	r4,zero
    19b8:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    19bc:	000b883a 	mov	r5,zero
    19c0:	0009883a 	mov	r4,zero
    19c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    19c8:	000b883a 	mov	r5,zero
    19cc:	0009883a 	mov	r4,zero
    19d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    19d4:	01408404 	movi	r5,528
    19d8:	0009883a 	mov	r4,zero
    19dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    19e0:	01401044 	movi	r5,65
    19e4:	0009883a 	mov	r4,zero
    19e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19ec:	014004c4 	movi	r5,19
    19f0:	0009883a 	mov	r4,zero
    19f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19f8:	000b883a 	mov	r5,zero
    19fc:	0009883a 	mov	r4,zero
    1a00:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a04:	01414004 	movi	r5,1280
    1a08:	01006c04 	movi	r4,432
    1a0c:	00016900 	call	1690 <UsbWrite>
}
    1a10:	0001883a 	nop
    1a14:	e037883a 	mov	sp,fp
    1a18:	dfc00117 	ldw	ra,4(sp)
    1a1c:	df000017 	ldw	fp,0(sp)
    1a20:	dec00204 	addi	sp,sp,8
    1a24:	f800283a 	ret

00001a28 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1a28:	defffe04 	addi	sp,sp,-8
    1a2c:	dfc00115 	stw	ra,4(sp)
    1a30:	df000015 	stw	fp,0(sp)
    1a34:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a38:	01414004 	movi	r5,1280
    1a3c:	01000084 	movi	r4,2
    1a40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a44:	01414304 	movi	r5,1292
    1a48:	0009883a 	mov	r4,zero
    1a4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a50:	01400204 	movi	r5,8
    1a54:	0009883a 	mov	r4,zero
    1a58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a5c:	0140b404 	movi	r5,720
    1a60:	0009883a 	mov	r4,zero
    1a64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a68:	01400044 	movi	r5,1
    1a6c:	0009883a 	mov	r4,zero
    1a70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a74:	014004c4 	movi	r5,19
    1a78:	0009883a 	mov	r4,zero
    1a7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1a80:	01414504 	movi	r5,1300
    1a84:	0009883a 	mov	r4,zero
    1a88:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1a8c:	0141a004 	movi	r5,1664
    1a90:	0009883a 	mov	r4,zero
    1a94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1a98:	01404004 	movi	r5,256
    1a9c:	0009883a 	mov	r4,zero
    1aa0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1aa4:	000b883a 	mov	r5,zero
    1aa8:	0009883a 	mov	r4,zero
    1aac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1ab0:	01400484 	movi	r5,18
    1ab4:	0009883a 	mov	r4,zero
    1ab8:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1abc:	01415104 	movi	r5,1348
    1ac0:	0009883a 	mov	r4,zero
    1ac4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1ac8:	01400204 	movi	r5,8
    1acc:	0009883a 	mov	r4,zero
    1ad0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1ad4:	0140a404 	movi	r5,656
    1ad8:	0009883a 	mov	r4,zero
    1adc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1ae0:	01401044 	movi	r5,65
    1ae4:	0009883a 	mov	r4,zero
    1ae8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1aec:	014004c4 	movi	r5,19
    1af0:	0009883a 	mov	r4,zero
    1af4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1af8:	01414804 	movi	r5,1312
    1afc:	0009883a 	mov	r4,zero
    1b00:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1b04:	01415304 	movi	r5,1356
    1b08:	0009883a 	mov	r4,zero
    1b0c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1b10:	01400204 	movi	r5,8
    1b14:	0009883a 	mov	r4,zero
    1b18:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1b1c:	0140a404 	movi	r5,656
    1b20:	0009883a 	mov	r4,zero
    1b24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1b28:	01400044 	movi	r5,1
    1b2c:	0009883a 	mov	r4,zero
    1b30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1b34:	014004c4 	movi	r5,19
    1b38:	0009883a 	mov	r4,zero
    1b3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1b40:	01414b04 	movi	r5,1324
    1b44:	0009883a 	mov	r4,zero
    1b48:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1b4c:	01415504 	movi	r5,1364
    1b50:	0009883a 	mov	r4,zero
    1b54:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1b58:	01400084 	movi	r5,2
    1b5c:	0009883a 	mov	r4,zero
    1b60:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1b64:	0140a404 	movi	r5,656
    1b68:	0009883a 	mov	r4,zero
    1b6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1b70:	01401044 	movi	r5,65
    1b74:	0009883a 	mov	r4,zero
    1b78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1b7c:	014004c4 	movi	r5,19
    1b80:	0009883a 	mov	r4,zero
    1b84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1b88:	01414e04 	movi	r5,1336
    1b8c:	0009883a 	mov	r4,zero
    1b90:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1b94:	000b883a 	mov	r5,zero
    1b98:	0009883a 	mov	r4,zero
    1b9c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1ba0:	000b883a 	mov	r5,zero
    1ba4:	0009883a 	mov	r4,zero
    1ba8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1bac:	01408404 	movi	r5,528
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1bb8:	01401044 	movi	r5,65
    1bbc:	0009883a 	mov	r4,zero
    1bc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1bc4:	014004c4 	movi	r5,19
    1bc8:	0009883a 	mov	r4,zero
    1bcc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1bd0:	000b883a 	mov	r5,zero
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1bdc:	01414004 	movi	r5,1280
    1be0:	01006c04 	movi	r4,432
    1be4:	00016900 	call	1690 <UsbWrite>
}
    1be8:	0001883a 	nop
    1bec:	e037883a 	mov	sp,fp
    1bf0:	dfc00117 	ldw	ra,4(sp)
    1bf4:	df000017 	ldw	fp,0(sp)
    1bf8:	dec00204 	addi	sp,sp,8
    1bfc:	f800283a 	ret

00001c00 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1c00:	defffe04 	addi	sp,sp,-8
    1c04:	dfc00115 	stw	ra,4(sp)
    1c08:	df000015 	stw	fp,0(sp)
    1c0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c10:	01414004 	movi	r5,1280
    1c14:	01000084 	movi	r4,2
    1c18:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c1c:	01414304 	movi	r5,1292
    1c20:	0009883a 	mov	r4,zero
    1c24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c28:	01400204 	movi	r5,8
    1c2c:	0009883a 	mov	r4,zero
    1c30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1c34:	0140b404 	movi	r5,720
    1c38:	0009883a 	mov	r4,zero
    1c3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c40:	01400044 	movi	r5,1
    1c44:	0009883a 	mov	r4,zero
    1c48:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c4c:	014004c4 	movi	r5,19
    1c50:	0009883a 	mov	r4,zero
    1c54:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c58:	01414504 	movi	r5,1300
    1c5c:	0009883a 	mov	r4,zero
    1c60:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1c64:	0141a004 	movi	r5,1664
    1c68:	0009883a 	mov	r4,zero
    1c6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1c70:	01408004 	movi	r5,512
    1c74:	0009883a 	mov	r4,zero
    1c78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1c7c:	000b883a 	mov	r5,zero
    1c80:	0009883a 	mov	r4,zero
    1c84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1c88:	01400244 	movi	r5,9
    1c8c:	0009883a 	mov	r4,zero
    1c90:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1c94:	01415104 	movi	r5,1348
    1c98:	0009883a 	mov	r4,zero
    1c9c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1ca0:	01400204 	movi	r5,8
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1cac:	0140a404 	movi	r5,656
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1cb8:	01401044 	movi	r5,65
    1cbc:	0009883a 	mov	r4,zero
    1cc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1cc4:	014004c4 	movi	r5,19
    1cc8:	0009883a 	mov	r4,zero
    1ccc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1cd0:	01414804 	movi	r5,1312
    1cd4:	0009883a 	mov	r4,zero
    1cd8:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1cdc:	01415304 	movi	r5,1356
    1ce0:	0009883a 	mov	r4,zero
    1ce4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1ce8:	01400044 	movi	r5,1
    1cec:	0009883a 	mov	r4,zero
    1cf0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1cf4:	0140a404 	movi	r5,656
    1cf8:	0009883a 	mov	r4,zero
    1cfc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1d00:	01400044 	movi	r5,1
    1d04:	0009883a 	mov	r4,zero
    1d08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1d0c:	014004c4 	movi	r5,19
    1d10:	0009883a 	mov	r4,zero
    1d14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1d18:	01414b04 	movi	r5,1324
    1d1c:	0009883a 	mov	r4,zero
    1d20:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1d24:	000b883a 	mov	r5,zero
    1d28:	0009883a 	mov	r4,zero
    1d2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1d30:	000b883a 	mov	r5,zero
    1d34:	0009883a 	mov	r4,zero
    1d38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1d3c:	01408404 	movi	r5,528
    1d40:	0009883a 	mov	r4,zero
    1d44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1d48:	01401044 	movi	r5,65
    1d4c:	0009883a 	mov	r4,zero
    1d50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1d54:	014004c4 	movi	r5,19
    1d58:	0009883a 	mov	r4,zero
    1d5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1d60:	000b883a 	mov	r5,zero
    1d64:	0009883a 	mov	r4,zero
    1d68:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d6c:	01414004 	movi	r5,1280
    1d70:	01006c04 	movi	r4,432
    1d74:	00016900 	call	1690 <UsbWrite>
}
    1d78:	0001883a 	nop
    1d7c:	e037883a 	mov	sp,fp
    1d80:	dfc00117 	ldw	ra,4(sp)
    1d84:	df000017 	ldw	fp,0(sp)
    1d88:	dec00204 	addi	sp,sp,8
    1d8c:	f800283a 	ret

00001d90 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1d90:	defffe04 	addi	sp,sp,-8
    1d94:	dfc00115 	stw	ra,4(sp)
    1d98:	df000015 	stw	fp,0(sp)
    1d9c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1da0:	01414004 	movi	r5,1280
    1da4:	01000084 	movi	r4,2
    1da8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1dac:	01414304 	movi	r5,1292
    1db0:	0009883a 	mov	r4,zero
    1db4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1db8:	01400204 	movi	r5,8
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1dc4:	0140b404 	movi	r5,720
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1dd0:	01400044 	movi	r5,1
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ddc:	014004c4 	movi	r5,19
    1de0:	0009883a 	mov	r4,zero
    1de4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1de8:	01414504 	movi	r5,1300
    1dec:	0009883a 	mov	r4,zero
    1df0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1df4:	0141a004 	movi	r5,1664
    1df8:	0009883a 	mov	r4,zero
    1dfc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1e00:	01408004 	movi	r5,512
    1e04:	0009883a 	mov	r4,zero
    1e08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e0c:	000b883a 	mov	r5,zero
    1e10:	0009883a 	mov	r4,zero
    1e14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1e18:	01403fc4 	movi	r5,255
    1e1c:	0009883a 	mov	r4,zero
    1e20:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1e24:	01415704 	movi	r5,1372
    1e28:	0009883a 	mov	r4,zero
    1e2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e30:	01400204 	movi	r5,8
    1e34:	0009883a 	mov	r4,zero
    1e38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e3c:	0140a404 	movi	r5,656
    1e40:	0009883a 	mov	r4,zero
    1e44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e48:	01401044 	movi	r5,65
    1e4c:	0009883a 	mov	r4,zero
    1e50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e54:	014004c4 	movi	r5,19
    1e58:	0009883a 	mov	r4,zero
    1e5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e60:	01414804 	movi	r5,1312
    1e64:	0009883a 	mov	r4,zero
    1e68:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1e6c:	01415904 	movi	r5,1380
    1e70:	0009883a 	mov	r4,zero
    1e74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1e78:	01400204 	movi	r5,8
    1e7c:	0009883a 	mov	r4,zero
    1e80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1e84:	0140a404 	movi	r5,656
    1e88:	0009883a 	mov	r4,zero
    1e8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1e90:	01400044 	movi	r5,1
    1e94:	0009883a 	mov	r4,zero
    1e98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e9c:	014004c4 	movi	r5,19
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ea8:	01414b04 	movi	r5,1324
    1eac:	0009883a 	mov	r4,zero
    1eb0:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1eb4:	01415b04 	movi	r5,1388
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ec0:	01400204 	movi	r5,8
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1ecc:	0140a404 	movi	r5,656
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1ed8:	01401044 	movi	r5,65
    1edc:	0009883a 	mov	r4,zero
    1ee0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1ee4:	014004c4 	movi	r5,19
    1ee8:	0009883a 	mov	r4,zero
    1eec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1ef0:	01414e04 	movi	r5,1336
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1efc:	01415d04 	movi	r5,1396
    1f00:	0009883a 	mov	r4,zero
    1f04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1f08:	01400204 	movi	r5,8
    1f0c:	0009883a 	mov	r4,zero
    1f10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1f14:	0140a404 	movi	r5,656
    1f18:	0009883a 	mov	r4,zero
    1f1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1f20:	01400044 	movi	r5,1
    1f24:	0009883a 	mov	r4,zero
    1f28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1f2c:	014004c4 	movi	r5,19
    1f30:	0009883a 	mov	r4,zero
    1f34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1f38:	01415104 	movi	r5,1348
    1f3c:	0009883a 	mov	r4,zero
    1f40:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    1f44:	01415f04 	movi	r5,1404
    1f48:	0009883a 	mov	r4,zero
    1f4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    1f50:	01400084 	movi	r5,2
    1f54:	0009883a 	mov	r4,zero
    1f58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f5c:	0140a404 	movi	r5,656
    1f60:	0009883a 	mov	r4,zero
    1f64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1f68:	01401044 	movi	r5,65
    1f6c:	0009883a 	mov	r4,zero
    1f70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f74:	014004c4 	movi	r5,19
    1f78:	0009883a 	mov	r4,zero
    1f7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1f80:	01415404 	movi	r5,1360
    1f84:	0009883a 	mov	r4,zero
    1f88:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1f8c:	000b883a 	mov	r5,zero
    1f90:	0009883a 	mov	r4,zero
    1f94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1f98:	000b883a 	mov	r5,zero
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1fa4:	01408404 	movi	r5,528
    1fa8:	0009883a 	mov	r4,zero
    1fac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1fb0:	01401044 	movi	r5,65
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fbc:	014004c4 	movi	r5,19
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1fc8:	000b883a 	mov	r5,zero
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1fd4:	01414004 	movi	r5,1280
    1fd8:	01006c04 	movi	r4,432
    1fdc:	00016900 	call	1690 <UsbWrite>
}
    1fe0:	0001883a 	nop
    1fe4:	e037883a 	mov	sp,fp
    1fe8:	dfc00117 	ldw	ra,4(sp)
    1fec:	df000017 	ldw	fp,0(sp)
    1ff0:	dec00204 	addi	sp,sp,8
    1ff4:	f800283a 	ret

00001ff8 <UsbSetConfig>:

void UsbSetConfig()
{
    1ff8:	defffe04 	addi	sp,sp,-8
    1ffc:	dfc00115 	stw	ra,4(sp)
    2000:	df000015 	stw	fp,0(sp)
    2004:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2008:	01414004 	movi	r5,1280
    200c:	01000084 	movi	r4,2
    2010:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2014:	01414304 	movi	r5,1292
    2018:	0009883a 	mov	r4,zero
    201c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2020:	01400204 	movi	r5,8
    2024:	0009883a 	mov	r4,zero
    2028:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    202c:	0140b404 	movi	r5,720
    2030:	0009883a 	mov	r4,zero
    2034:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2038:	01400044 	movi	r5,1
    203c:	0009883a 	mov	r4,zero
    2040:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2044:	014004c4 	movi	r5,19
    2048:	0009883a 	mov	r4,zero
    204c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2050:	01414504 	movi	r5,1300
    2054:	0009883a 	mov	r4,zero
    2058:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    205c:	01424004 	movi	r5,2304
    2060:	0009883a 	mov	r4,zero
    2064:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2068:	01400044 	movi	r5,1
    206c:	0009883a 	mov	r4,zero
    2070:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2074:	000b883a 	mov	r5,zero
    2078:	0009883a 	mov	r4,zero
    207c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2080:	000b883a 	mov	r5,zero
    2084:	0009883a 	mov	r4,zero
    2088:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    208c:	000b883a 	mov	r5,zero
    2090:	0009883a 	mov	r4,zero
    2094:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2098:	000b883a 	mov	r5,zero
    209c:	0009883a 	mov	r4,zero
    20a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    20a4:	0140a404 	movi	r5,656
    20a8:	0009883a 	mov	r4,zero
    20ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    20b0:	01401044 	movi	r5,65
    20b4:	0009883a 	mov	r4,zero
    20b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20bc:	014004c4 	movi	r5,19
    20c0:	0009883a 	mov	r4,zero
    20c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    20c8:	000b883a 	mov	r5,zero
    20cc:	0009883a 	mov	r4,zero
    20d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20d4:	01414004 	movi	r5,1280
    20d8:	01006c04 	movi	r4,432
    20dc:	00016900 	call	1690 <UsbWrite>

}
    20e0:	0001883a 	nop
    20e4:	e037883a 	mov	sp,fp
    20e8:	dfc00117 	ldw	ra,4(sp)
    20ec:	df000017 	ldw	fp,0(sp)
    20f0:	dec00204 	addi	sp,sp,8
    20f4:	f800283a 	ret

000020f8 <UsbClassRequest>:

void UsbClassRequest()
{
    20f8:	defffe04 	addi	sp,sp,-8
    20fc:	dfc00115 	stw	ra,4(sp)
    2100:	df000015 	stw	fp,0(sp)
    2104:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2108:	01414004 	movi	r5,1280
    210c:	01000084 	movi	r4,2
    2110:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2114:	01414304 	movi	r5,1292
    2118:	0009883a 	mov	r4,zero
    211c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2120:	01400204 	movi	r5,8
    2124:	0009883a 	mov	r4,zero
    2128:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    212c:	0140b404 	movi	r5,720
    2130:	0009883a 	mov	r4,zero
    2134:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2138:	01400044 	movi	r5,1
    213c:	0009883a 	mov	r4,zero
    2140:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2144:	014004c4 	movi	r5,19
    2148:	0009883a 	mov	r4,zero
    214c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2150:	01414504 	movi	r5,1300
    2154:	0009883a 	mov	r4,zero
    2158:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    215c:	01428844 	movi	r5,2593
    2160:	0009883a 	mov	r4,zero
    2164:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2168:	000b883a 	mov	r5,zero
    216c:	0009883a 	mov	r4,zero
    2170:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2174:	000b883a 	mov	r5,zero
    2178:	0009883a 	mov	r4,zero
    217c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2180:	000b883a 	mov	r5,zero
    2184:	0009883a 	mov	r4,zero
    2188:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    218c:	000b883a 	mov	r5,zero
    2190:	0009883a 	mov	r4,zero
    2194:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2198:	000b883a 	mov	r5,zero
    219c:	0009883a 	mov	r4,zero
    21a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    21a4:	0140a404 	movi	r5,656
    21a8:	0009883a 	mov	r4,zero
    21ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    21b0:	01401044 	movi	r5,65
    21b4:	0009883a 	mov	r4,zero
    21b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21bc:	014004c4 	movi	r5,19
    21c0:	0009883a 	mov	r4,zero
    21c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21c8:	000b883a 	mov	r5,zero
    21cc:	0009883a 	mov	r4,zero
    21d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21d4:	01414004 	movi	r5,1280
    21d8:	01006c04 	movi	r4,432
    21dc:	00016900 	call	1690 <UsbWrite>
}
    21e0:	0001883a 	nop
    21e4:	e037883a 	mov	sp,fp
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	df000017 	ldw	fp,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret

000021f8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    21f8:	defffe04 	addi	sp,sp,-8
    21fc:	dfc00115 	stw	ra,4(sp)
    2200:	df000015 	stw	fp,0(sp)
    2204:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2208:	01414004 	movi	r5,1280
    220c:	01000084 	movi	r4,2
    2210:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2214:	01414304 	movi	r5,1292
    2218:	0009883a 	mov	r4,zero
    221c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2220:	01400204 	movi	r5,8
    2224:	0009883a 	mov	r4,zero
    2228:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    222c:	0140b404 	movi	r5,720
    2230:	0009883a 	mov	r4,zero
    2234:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2238:	01400044 	movi	r5,1
    223c:	0009883a 	mov	r4,zero
    2240:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2244:	014004c4 	movi	r5,19
    2248:	0009883a 	mov	r4,zero
    224c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2250:	01414504 	movi	r5,1300
    2254:	0009883a 	mov	r4,zero
    2258:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    225c:	0141a044 	movi	r5,1665
    2260:	0009883a 	mov	r4,zero
    2264:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2268:	01484004 	movi	r5,8448
    226c:	0009883a 	mov	r4,zero
    2270:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2274:	000b883a 	mov	r5,zero
    2278:	0009883a 	mov	r4,zero
    227c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2280:	01401ec4 	movi	r5,123
    2284:	0009883a 	mov	r4,zero
    2288:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    228c:	01415104 	movi	r5,1348
    2290:	0009883a 	mov	r4,zero
    2294:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2298:	01400204 	movi	r5,8
    229c:	0009883a 	mov	r4,zero
    22a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    22a4:	0140a404 	movi	r5,656
    22a8:	0009883a 	mov	r4,zero
    22ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    22b0:	01401044 	movi	r5,65
    22b4:	0009883a 	mov	r4,zero
    22b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    22bc:	014004c4 	movi	r5,19
    22c0:	0009883a 	mov	r4,zero
    22c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    22c8:	01414804 	movi	r5,1312
    22cc:	0009883a 	mov	r4,zero
    22d0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    22d4:	000b883a 	mov	r5,zero
    22d8:	0009883a 	mov	r4,zero
    22dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    22e0:	000b883a 	mov	r5,zero
    22e4:	0009883a 	mov	r4,zero
    22e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    22ec:	01408404 	movi	r5,528
    22f0:	0009883a 	mov	r4,zero
    22f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    22f8:	01401044 	movi	r5,65
    22fc:	0009883a 	mov	r4,zero
    2300:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2304:	014004c4 	movi	r5,19
    2308:	0009883a 	mov	r4,zero
    230c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2310:	000b883a 	mov	r5,zero
    2314:	0009883a 	mov	r4,zero
    2318:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    231c:	01414004 	movi	r5,1280
    2320:	01006c04 	movi	r4,432
    2324:	00016900 	call	1690 <UsbWrite>

}
    2328:	0001883a 	nop
    232c:	e037883a 	mov	sp,fp
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	df000017 	ldw	fp,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret

00002340 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2340:	defffe04 	addi	sp,sp,-8
    2344:	dfc00115 	stw	ra,4(sp)
    2348:	df000015 	stw	fp,0(sp)
    234c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2350:	01414004 	movi	r5,1280
    2354:	01000084 	movi	r4,2
    2358:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    235c:	01414304 	movi	r5,1292
    2360:	0009883a 	mov	r4,zero
    2364:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2368:	01400204 	movi	r5,8
    236c:	0009883a 	mov	r4,zero
    2370:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2374:	0140b404 	movi	r5,720
    2378:	0009883a 	mov	r4,zero
    237c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2380:	01400044 	movi	r5,1
    2384:	0009883a 	mov	r4,zero
    2388:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    238c:	014004c4 	movi	r5,19
    2390:	0009883a 	mov	r4,zero
    2394:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2398:	01414504 	movi	r5,1300
    239c:	0009883a 	mov	r4,zero
    23a0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    23a4:	0141a044 	movi	r5,1665
    23a8:	0009883a 	mov	r4,zero
    23ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    23b0:	01488004 	movi	r5,8704
    23b4:	0009883a 	mov	r4,zero
    23b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    23bc:	000b883a 	mov	r5,zero
    23c0:	0009883a 	mov	r4,zero
    23c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    23c8:	01401ec4 	movi	r5,123
    23cc:	0009883a 	mov	r4,zero
    23d0:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    23d4:	01416004 	movi	r5,1408
    23d8:	0009883a 	mov	r4,zero
    23dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    23e0:	01400204 	movi	r5,8
    23e4:	0009883a 	mov	r4,zero
    23e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    23ec:	0140a404 	movi	r5,656
    23f0:	0009883a 	mov	r4,zero
    23f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    23f8:	01401044 	movi	r5,65
    23fc:	0009883a 	mov	r4,zero
    2400:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2404:	014004c4 	movi	r5,19
    2408:	0009883a 	mov	r4,zero
    240c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2410:	01414804 	movi	r5,1312
    2414:	0009883a 	mov	r4,zero
    2418:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    241c:	01416204 	movi	r5,1416
    2420:	0009883a 	mov	r4,zero
    2424:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2428:	01400204 	movi	r5,8
    242c:	0009883a 	mov	r4,zero
    2430:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2434:	0140a404 	movi	r5,656
    2438:	0009883a 	mov	r4,zero
    243c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2440:	01400044 	movi	r5,1
    2444:	0009883a 	mov	r4,zero
    2448:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    244c:	014004c4 	movi	r5,19
    2450:	0009883a 	mov	r4,zero
    2454:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2458:	01414b04 	movi	r5,1324
    245c:	0009883a 	mov	r4,zero
    2460:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2464:	01416404 	movi	r5,1424
    2468:	0009883a 	mov	r4,zero
    246c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2470:	01400204 	movi	r5,8
    2474:	0009883a 	mov	r4,zero
    2478:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    247c:	0140a404 	movi	r5,656
    2480:	0009883a 	mov	r4,zero
    2484:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2488:	01401044 	movi	r5,65
    248c:	0009883a 	mov	r4,zero
    2490:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2494:	014004c4 	movi	r5,19
    2498:	0009883a 	mov	r4,zero
    249c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    24a0:	01414e04 	movi	r5,1336
    24a4:	0009883a 	mov	r4,zero
    24a8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    24ac:	01416604 	movi	r5,1432
    24b0:	0009883a 	mov	r4,zero
    24b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    24b8:	01400204 	movi	r5,8
    24bc:	0009883a 	mov	r4,zero
    24c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    24c4:	0140a404 	movi	r5,656
    24c8:	0009883a 	mov	r4,zero
    24cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    24d0:	01400044 	movi	r5,1
    24d4:	0009883a 	mov	r4,zero
    24d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    24dc:	014004c4 	movi	r5,19
    24e0:	0009883a 	mov	r4,zero
    24e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    24e8:	01415104 	movi	r5,1348
    24ec:	0009883a 	mov	r4,zero
    24f0:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    24f4:	01416804 	movi	r5,1440
    24f8:	0009883a 	mov	r4,zero
    24fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2500:	01400204 	movi	r5,8
    2504:	0009883a 	mov	r4,zero
    2508:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    250c:	0140a404 	movi	r5,656
    2510:	0009883a 	mov	r4,zero
    2514:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2518:	01401044 	movi	r5,65
    251c:	0009883a 	mov	r4,zero
    2520:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2524:	014004c4 	movi	r5,19
    2528:	0009883a 	mov	r4,zero
    252c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2530:	01415404 	movi	r5,1360
    2534:	0009883a 	mov	r4,zero
    2538:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    253c:	01416a04 	movi	r5,1448
    2540:	0009883a 	mov	r4,zero
    2544:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2548:	01400204 	movi	r5,8
    254c:	0009883a 	mov	r4,zero
    2550:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2554:	0140a404 	movi	r5,656
    2558:	0009883a 	mov	r4,zero
    255c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2560:	01400044 	movi	r5,1
    2564:	0009883a 	mov	r4,zero
    2568:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    256c:	014004c4 	movi	r5,19
    2570:	0009883a 	mov	r4,zero
    2574:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2578:	01415704 	movi	r5,1372
    257c:	0009883a 	mov	r4,zero
    2580:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2584:	01416c04 	movi	r5,1456
    2588:	0009883a 	mov	r4,zero
    258c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2590:	01400204 	movi	r5,8
    2594:	0009883a 	mov	r4,zero
    2598:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    259c:	0140a404 	movi	r5,656
    25a0:	0009883a 	mov	r4,zero
    25a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    25a8:	01401044 	movi	r5,65
    25ac:	0009883a 	mov	r4,zero
    25b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    25b4:	014004c4 	movi	r5,19
    25b8:	0009883a 	mov	r4,zero
    25bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    25c0:	01415a04 	movi	r5,1384
    25c4:	0009883a 	mov	r4,zero
    25c8:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    25cc:	01416e04 	movi	r5,1464
    25d0:	0009883a 	mov	r4,zero
    25d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    25d8:	014000c4 	movi	r5,3
    25dc:	0009883a 	mov	r4,zero
    25e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    25e4:	0140a404 	movi	r5,656
    25e8:	0009883a 	mov	r4,zero
    25ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    25f0:	01400044 	movi	r5,1
    25f4:	0009883a 	mov	r4,zero
    25f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    25fc:	014004c4 	movi	r5,19
    2600:	0009883a 	mov	r4,zero
    2604:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2608:	01415d04 	movi	r5,1396
    260c:	0009883a 	mov	r4,zero
    2610:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2614:	000b883a 	mov	r5,zero
    2618:	0009883a 	mov	r4,zero
    261c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2620:	000b883a 	mov	r5,zero
    2624:	0009883a 	mov	r4,zero
    2628:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    262c:	01408404 	movi	r5,528
    2630:	0009883a 	mov	r4,zero
    2634:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2638:	01401044 	movi	r5,65
    263c:	0009883a 	mov	r4,zero
    2640:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2644:	014004c4 	movi	r5,19
    2648:	0009883a 	mov	r4,zero
    264c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2650:	000b883a 	mov	r5,zero
    2654:	0009883a 	mov	r4,zero
    2658:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    265c:	01414004 	movi	r5,1280
    2660:	01006c04 	movi	r4,432
    2664:	00016900 	call	1690 <UsbWrite>

}
    2668:	0001883a 	nop
    266c:	e037883a 	mov	sp,fp
    2670:	dfc00117 	ldw	ra,4(sp)
    2674:	df000017 	ldw	fp,0(sp)
    2678:	dec00204 	addi	sp,sp,8
    267c:	f800283a 	ret

00002680 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2680:	defffd04 	addi	sp,sp,-12
    2684:	dfc00215 	stw	ra,8(sp)
    2688:	df000115 	stw	fp,4(sp)
    268c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2690:	01005104 	movi	r4,324
    2694:	00016e80 	call	16e8 <UsbRead>
    2698:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    269c:	000b883a 	mov	r5,zero
    26a0:	01005104 	movi	r4,324
    26a4:	00016900 	call	1690 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    26a8:	00000d06 	br	26e0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    26ac:	e0bfff0b 	ldhu	r2,-4(fp)
    26b0:	10000526 	beq	r2,zero,26c8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    26b4:	e0bfff0b 	ldhu	r2,-4(fp)
    26b8:	100b883a 	mov	r5,r2
    26bc:	01000074 	movhi	r4,1
    26c0:	210a6704 	addi	r4,r4,10652
    26c4:	00030bc0 	call	30bc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    26c8:	01005104 	movi	r4,324
    26cc:	00016e80 	call	16e8 <UsbRead>
    26d0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    26d4:	000b883a 	mov	r5,zero
    26d8:	01005104 	movi	r4,324
    26dc:	00016900 	call	1690 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    26e0:	e0bfff0b 	ldhu	r2,-4(fp)
    26e4:	10840018 	cmpnei	r2,r2,4096
    26e8:	103ff01e 	bne	r2,zero,26ac <__alt_exception_stack_pointer+0xf80026ac>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    26ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
    26f0:	e037883a 	mov	sp,fp
    26f4:	dfc00117 	ldw	ra,4(sp)
    26f8:	df000017 	ldw	fp,0(sp)
    26fc:	dec00204 	addi	sp,sp,8
    2700:	f800283a 	ret

00002704 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2704:	defffd04 	addi	sp,sp,-12
    2708:	dfc00215 	stw	ra,8(sp)
    270c:	df000115 	stw	fp,4(sp)
    2710:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2714:	010000c4 	movi	r4,3
    2718:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    271c:	01005104 	movi	r4,324
    2720:	00016e80 	call	16e8 <UsbRead>
    2724:	10bfffcc 	andi	r2,r2,65535
    2728:	10840018 	cmpnei	r2,r2,4096
    272c:	1000091e 	bne	r2,zero,2754 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2730:	000b883a 	mov	r5,zero
    2734:	01005104 	movi	r4,324
    2738:	00016900 	call	1690 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    273c:	0001883a 	nop
    2740:	010000c4 	movi	r4,3
    2744:	00003b00 	call	3b0 <IO_read>
    2748:	10bfffcc 	andi	r2,r2,65535
    274c:	1080040c 	andi	r2,r2,16
    2750:	103ffb26 	beq	r2,zero,2740 <__alt_exception_stack_pointer+0xf8002740>
		{
		}
	}
	usleep(1000);
    2754:	0100fa04 	movi	r4,1000
    2758:	00100d40 	call	100d4 <usleep>
	IO_write(HPI_ADDR,0x0508);
    275c:	01414204 	movi	r5,1288
    2760:	01000084 	movi	r4,2
    2764:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2768:	0009883a 	mov	r4,zero
    276c:	00003b00 	call	3b0 <IO_read>
    2770:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2774:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2778:	e037883a 	mov	sp,fp
    277c:	dfc00117 	ldw	ra,4(sp)
    2780:	df000017 	ldw	fp,0(sp)
    2784:	dec00204 	addi	sp,sp,8
    2788:	f800283a 	ret

0000278c <UsbPrintMem>:


void UsbPrintMem()
{
    278c:	defffc04 	addi	sp,sp,-16
    2790:	dfc00315 	stw	ra,12(sp)
    2794:	df000215 	stw	fp,8(sp)
    2798:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    279c:	01414004 	movi	r5,1280
    27a0:	01000084 	movi	r4,2
    27a4:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    27a8:	e03ffe15 	stw	zero,-8(fp)
    27ac:	00000e06 	br	27e8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    27b0:	0009883a 	mov	r4,zero
    27b4:	00003b00 	call	3b0 <IO_read>
    27b8:	10bfffcc 	andi	r2,r2,65535
    27bc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    27c0:	e0bffe17 	ldw	r2,-8(fp)
    27c4:	10814004 	addi	r2,r2,1280
    27c8:	e1bfff17 	ldw	r6,-4(fp)
    27cc:	100b883a 	mov	r5,r2
    27d0:	01000074 	movhi	r4,1
    27d4:	210a6f04 	addi	r4,r4,10684
    27d8:	00030bc0 	call	30bc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    27dc:	e0bffe17 	ldw	r2,-8(fp)
    27e0:	10800084 	addi	r2,r2,2
    27e4:	e0bffe15 	stw	r2,-8(fp)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	10803250 	cmplti	r2,r2,201
    27f0:	103fef1e 	bne	r2,zero,27b0 <__alt_exception_stack_pointer+0xf80027b0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    27f4:	0001883a 	nop
    27f8:	e037883a 	mov	sp,fp
    27fc:	dfc00117 	ldw	ra,4(sp)
    2800:	df000017 	ldw	fp,0(sp)
    2804:	dec00204 	addi	sp,sp,8
    2808:	f800283a 	ret

0000280c <clock>:
    280c:	00800074 	movhi	r2,1
    2810:	1091e504 	addi	r2,r2,18324
    2814:	11000017 	ldw	r4,0(r2)
    2818:	defffb04 	addi	sp,sp,-20
    281c:	d80b883a 	mov	r5,sp
    2820:	dfc00415 	stw	ra,16(sp)
    2824:	00032b80 	call	32b8 <_times_r>
    2828:	00ffffc4 	movi	r3,-1
    282c:	10c00726 	beq	r2,r3,284c <clock+0x40>
    2830:	d8c00017 	ldw	r3,0(sp)
    2834:	d8800117 	ldw	r2,4(sp)
    2838:	1885883a 	add	r2,r3,r2
    283c:	d8c00217 	ldw	r3,8(sp)
    2840:	10c7883a 	add	r3,r2,r3
    2844:	d8800317 	ldw	r2,12(sp)
    2848:	1885883a 	add	r2,r3,r2
    284c:	dfc00417 	ldw	ra,16(sp)
    2850:	dec00504 	addi	sp,sp,20
    2854:	f800283a 	ret

00002858 <malloc>:
    2858:	00800074 	movhi	r2,1
    285c:	1091e504 	addi	r2,r2,18324
    2860:	200b883a 	mov	r5,r4
    2864:	11000017 	ldw	r4,0(r2)
    2868:	00028801 	jmpi	2880 <_malloc_r>

0000286c <free>:
    286c:	00800074 	movhi	r2,1
    2870:	1091e504 	addi	r2,r2,18324
    2874:	200b883a 	mov	r5,r4
    2878:	11000017 	ldw	r4,0(r2)
    287c:	00077f41 	jmpi	77f4 <_free_r>

00002880 <_malloc_r>:
    2880:	defff504 	addi	sp,sp,-44
    2884:	dc800315 	stw	r18,12(sp)
    2888:	dfc00a15 	stw	ra,40(sp)
    288c:	df000915 	stw	fp,36(sp)
    2890:	ddc00815 	stw	r23,32(sp)
    2894:	dd800715 	stw	r22,28(sp)
    2898:	dd400615 	stw	r21,24(sp)
    289c:	dd000515 	stw	r20,20(sp)
    28a0:	dcc00415 	stw	r19,16(sp)
    28a4:	dc400215 	stw	r17,8(sp)
    28a8:	dc000115 	stw	r16,4(sp)
    28ac:	288002c4 	addi	r2,r5,11
    28b0:	00c00584 	movi	r3,22
    28b4:	2025883a 	mov	r18,r4
    28b8:	18807f2e 	bgeu	r3,r2,2ab8 <_malloc_r+0x238>
    28bc:	047ffe04 	movi	r17,-8
    28c0:	1462703a 	and	r17,r2,r17
    28c4:	8800a316 	blt	r17,zero,2b54 <_malloc_r+0x2d4>
    28c8:	8940a236 	bltu	r17,r5,2b54 <_malloc_r+0x2d4>
    28cc:	000fd640 	call	fd64 <__malloc_lock>
    28d0:	00807dc4 	movi	r2,503
    28d4:	1441e92e 	bgeu	r2,r17,307c <_malloc_r+0x7fc>
    28d8:	8804d27a 	srli	r2,r17,9
    28dc:	1000a126 	beq	r2,zero,2b64 <_malloc_r+0x2e4>
    28e0:	00c00104 	movi	r3,4
    28e4:	18811e36 	bltu	r3,r2,2d60 <_malloc_r+0x4e0>
    28e8:	8804d1ba 	srli	r2,r17,6
    28ec:	12000e44 	addi	r8,r2,57
    28f0:	11c00e04 	addi	r7,r2,56
    28f4:	4209883a 	add	r4,r8,r8
    28f8:	04c00074 	movhi	r19,1
    28fc:	2109883a 	add	r4,r4,r4
    2900:	9ccc4004 	addi	r19,r19,12544
    2904:	2109883a 	add	r4,r4,r4
    2908:	9909883a 	add	r4,r19,r4
    290c:	24000117 	ldw	r16,4(r4)
    2910:	213ffe04 	addi	r4,r4,-8
    2914:	24009726 	beq	r4,r16,2b74 <_malloc_r+0x2f4>
    2918:	80800117 	ldw	r2,4(r16)
    291c:	01bfff04 	movi	r6,-4
    2920:	014003c4 	movi	r5,15
    2924:	1184703a 	and	r2,r2,r6
    2928:	1447c83a 	sub	r3,r2,r17
    292c:	28c00716 	blt	r5,r3,294c <_malloc_r+0xcc>
    2930:	1800920e 	bge	r3,zero,2b7c <_malloc_r+0x2fc>
    2934:	84000317 	ldw	r16,12(r16)
    2938:	24008e26 	beq	r4,r16,2b74 <_malloc_r+0x2f4>
    293c:	80800117 	ldw	r2,4(r16)
    2940:	1184703a 	and	r2,r2,r6
    2944:	1447c83a 	sub	r3,r2,r17
    2948:	28fff90e 	bge	r5,r3,2930 <__alt_exception_stack_pointer+0xf8002930>
    294c:	3809883a 	mov	r4,r7
    2950:	01800074 	movhi	r6,1
    2954:	9c000417 	ldw	r16,16(r19)
    2958:	318c4004 	addi	r6,r6,12544
    295c:	32000204 	addi	r8,r6,8
    2960:	82013426 	beq	r16,r8,2e34 <_malloc_r+0x5b4>
    2964:	80c00117 	ldw	r3,4(r16)
    2968:	00bfff04 	movi	r2,-4
    296c:	188e703a 	and	r7,r3,r2
    2970:	3c45c83a 	sub	r2,r7,r17
    2974:	00c003c4 	movi	r3,15
    2978:	18811f16 	blt	r3,r2,2df8 <_malloc_r+0x578>
    297c:	32000515 	stw	r8,20(r6)
    2980:	32000415 	stw	r8,16(r6)
    2984:	10007f0e 	bge	r2,zero,2b84 <_malloc_r+0x304>
    2988:	00807fc4 	movi	r2,511
    298c:	11c0fd36 	bltu	r2,r7,2d84 <_malloc_r+0x504>
    2990:	3806d0fa 	srli	r3,r7,3
    2994:	01c00044 	movi	r7,1
    2998:	30800117 	ldw	r2,4(r6)
    299c:	19400044 	addi	r5,r3,1
    29a0:	294b883a 	add	r5,r5,r5
    29a4:	1807d0ba 	srai	r3,r3,2
    29a8:	294b883a 	add	r5,r5,r5
    29ac:	294b883a 	add	r5,r5,r5
    29b0:	298b883a 	add	r5,r5,r6
    29b4:	38c6983a 	sll	r3,r7,r3
    29b8:	29c00017 	ldw	r7,0(r5)
    29bc:	2a7ffe04 	addi	r9,r5,-8
    29c0:	1886b03a 	or	r3,r3,r2
    29c4:	82400315 	stw	r9,12(r16)
    29c8:	81c00215 	stw	r7,8(r16)
    29cc:	30c00115 	stw	r3,4(r6)
    29d0:	2c000015 	stw	r16,0(r5)
    29d4:	3c000315 	stw	r16,12(r7)
    29d8:	2005d0ba 	srai	r2,r4,2
    29dc:	01400044 	movi	r5,1
    29e0:	288a983a 	sll	r5,r5,r2
    29e4:	19406f36 	bltu	r3,r5,2ba4 <_malloc_r+0x324>
    29e8:	28c4703a 	and	r2,r5,r3
    29ec:	10000a1e 	bne	r2,zero,2a18 <_malloc_r+0x198>
    29f0:	00bfff04 	movi	r2,-4
    29f4:	294b883a 	add	r5,r5,r5
    29f8:	2088703a 	and	r4,r4,r2
    29fc:	28c4703a 	and	r2,r5,r3
    2a00:	21000104 	addi	r4,r4,4
    2a04:	1000041e 	bne	r2,zero,2a18 <_malloc_r+0x198>
    2a08:	294b883a 	add	r5,r5,r5
    2a0c:	28c4703a 	and	r2,r5,r3
    2a10:	21000104 	addi	r4,r4,4
    2a14:	103ffc26 	beq	r2,zero,2a08 <__alt_exception_stack_pointer+0xf8002a08>
    2a18:	02bfff04 	movi	r10,-4
    2a1c:	024003c4 	movi	r9,15
    2a20:	21800044 	addi	r6,r4,1
    2a24:	318d883a 	add	r6,r6,r6
    2a28:	318d883a 	add	r6,r6,r6
    2a2c:	318d883a 	add	r6,r6,r6
    2a30:	998d883a 	add	r6,r19,r6
    2a34:	333ffe04 	addi	r12,r6,-8
    2a38:	2017883a 	mov	r11,r4
    2a3c:	31800104 	addi	r6,r6,4
    2a40:	34000017 	ldw	r16,0(r6)
    2a44:	31fffd04 	addi	r7,r6,-12
    2a48:	81c0041e 	bne	r16,r7,2a5c <_malloc_r+0x1dc>
    2a4c:	0000fb06 	br	2e3c <_malloc_r+0x5bc>
    2a50:	1801030e 	bge	r3,zero,2e60 <_malloc_r+0x5e0>
    2a54:	84000317 	ldw	r16,12(r16)
    2a58:	81c0f826 	beq	r16,r7,2e3c <_malloc_r+0x5bc>
    2a5c:	80800117 	ldw	r2,4(r16)
    2a60:	1284703a 	and	r2,r2,r10
    2a64:	1447c83a 	sub	r3,r2,r17
    2a68:	48fff90e 	bge	r9,r3,2a50 <__alt_exception_stack_pointer+0xf8002a50>
    2a6c:	80800317 	ldw	r2,12(r16)
    2a70:	81000217 	ldw	r4,8(r16)
    2a74:	89400054 	ori	r5,r17,1
    2a78:	81400115 	stw	r5,4(r16)
    2a7c:	20800315 	stw	r2,12(r4)
    2a80:	11000215 	stw	r4,8(r2)
    2a84:	8463883a 	add	r17,r16,r17
    2a88:	9c400515 	stw	r17,20(r19)
    2a8c:	9c400415 	stw	r17,16(r19)
    2a90:	18800054 	ori	r2,r3,1
    2a94:	88800115 	stw	r2,4(r17)
    2a98:	8a000315 	stw	r8,12(r17)
    2a9c:	8a000215 	stw	r8,8(r17)
    2aa0:	88e3883a 	add	r17,r17,r3
    2aa4:	88c00015 	stw	r3,0(r17)
    2aa8:	9009883a 	mov	r4,r18
    2aac:	000fd880 	call	fd88 <__malloc_unlock>
    2ab0:	80800204 	addi	r2,r16,8
    2ab4:	00001b06 	br	2b24 <_malloc_r+0x2a4>
    2ab8:	04400404 	movi	r17,16
    2abc:	89402536 	bltu	r17,r5,2b54 <_malloc_r+0x2d4>
    2ac0:	000fd640 	call	fd64 <__malloc_lock>
    2ac4:	00800184 	movi	r2,6
    2ac8:	01000084 	movi	r4,2
    2acc:	04c00074 	movhi	r19,1
    2ad0:	1085883a 	add	r2,r2,r2
    2ad4:	9ccc4004 	addi	r19,r19,12544
    2ad8:	1085883a 	add	r2,r2,r2
    2adc:	9885883a 	add	r2,r19,r2
    2ae0:	14000117 	ldw	r16,4(r2)
    2ae4:	10fffe04 	addi	r3,r2,-8
    2ae8:	80c0d926 	beq	r16,r3,2e50 <_malloc_r+0x5d0>
    2aec:	80c00117 	ldw	r3,4(r16)
    2af0:	81000317 	ldw	r4,12(r16)
    2af4:	00bfff04 	movi	r2,-4
    2af8:	1884703a 	and	r2,r3,r2
    2afc:	81400217 	ldw	r5,8(r16)
    2b00:	8085883a 	add	r2,r16,r2
    2b04:	10c00117 	ldw	r3,4(r2)
    2b08:	29000315 	stw	r4,12(r5)
    2b0c:	21400215 	stw	r5,8(r4)
    2b10:	18c00054 	ori	r3,r3,1
    2b14:	10c00115 	stw	r3,4(r2)
    2b18:	9009883a 	mov	r4,r18
    2b1c:	000fd880 	call	fd88 <__malloc_unlock>
    2b20:	80800204 	addi	r2,r16,8
    2b24:	dfc00a17 	ldw	ra,40(sp)
    2b28:	df000917 	ldw	fp,36(sp)
    2b2c:	ddc00817 	ldw	r23,32(sp)
    2b30:	dd800717 	ldw	r22,28(sp)
    2b34:	dd400617 	ldw	r21,24(sp)
    2b38:	dd000517 	ldw	r20,20(sp)
    2b3c:	dcc00417 	ldw	r19,16(sp)
    2b40:	dc800317 	ldw	r18,12(sp)
    2b44:	dc400217 	ldw	r17,8(sp)
    2b48:	dc000117 	ldw	r16,4(sp)
    2b4c:	dec00b04 	addi	sp,sp,44
    2b50:	f800283a 	ret
    2b54:	00800304 	movi	r2,12
    2b58:	90800015 	stw	r2,0(r18)
    2b5c:	0005883a 	mov	r2,zero
    2b60:	003ff006 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2b64:	01002004 	movi	r4,128
    2b68:	02001004 	movi	r8,64
    2b6c:	01c00fc4 	movi	r7,63
    2b70:	003f6106 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2b74:	4009883a 	mov	r4,r8
    2b78:	003f7506 	br	2950 <__alt_exception_stack_pointer+0xf8002950>
    2b7c:	81000317 	ldw	r4,12(r16)
    2b80:	003fde06 	br	2afc <__alt_exception_stack_pointer+0xf8002afc>
    2b84:	81c5883a 	add	r2,r16,r7
    2b88:	11400117 	ldw	r5,4(r2)
    2b8c:	9009883a 	mov	r4,r18
    2b90:	29400054 	ori	r5,r5,1
    2b94:	11400115 	stw	r5,4(r2)
    2b98:	000fd880 	call	fd88 <__malloc_unlock>
    2b9c:	80800204 	addi	r2,r16,8
    2ba0:	003fe006 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2ba4:	9c000217 	ldw	r16,8(r19)
    2ba8:	00bfff04 	movi	r2,-4
    2bac:	85800117 	ldw	r22,4(r16)
    2bb0:	b0ac703a 	and	r22,r22,r2
    2bb4:	b4400336 	bltu	r22,r17,2bc4 <_malloc_r+0x344>
    2bb8:	b445c83a 	sub	r2,r22,r17
    2bbc:	00c003c4 	movi	r3,15
    2bc0:	18805d16 	blt	r3,r2,2d38 <_malloc_r+0x4b8>
    2bc4:	05c00074 	movhi	r23,1
    2bc8:	00800074 	movhi	r2,1
    2bcc:	1098b704 	addi	r2,r2,25308
    2bd0:	bdd1e604 	addi	r23,r23,18328
    2bd4:	15400017 	ldw	r21,0(r2)
    2bd8:	b8c00017 	ldw	r3,0(r23)
    2bdc:	00bfffc4 	movi	r2,-1
    2be0:	858d883a 	add	r6,r16,r22
    2be4:	8d6b883a 	add	r21,r17,r21
    2be8:	1880ea26 	beq	r3,r2,2f94 <_malloc_r+0x714>
    2bec:	ad4403c4 	addi	r21,r21,4111
    2bf0:	00bc0004 	movi	r2,-4096
    2bf4:	a8aa703a 	and	r21,r21,r2
    2bf8:	a80b883a 	mov	r5,r21
    2bfc:	9009883a 	mov	r4,r18
    2c00:	d9800015 	stw	r6,0(sp)
    2c04:	00031cc0 	call	31cc <_sbrk_r>
    2c08:	1029883a 	mov	r20,r2
    2c0c:	00bfffc4 	movi	r2,-1
    2c10:	d9800017 	ldw	r6,0(sp)
    2c14:	a080e826 	beq	r20,r2,2fb8 <_malloc_r+0x738>
    2c18:	a180a636 	bltu	r20,r6,2eb4 <_malloc_r+0x634>
    2c1c:	07000074 	movhi	fp,1
    2c20:	e718c304 	addi	fp,fp,25356
    2c24:	e0800017 	ldw	r2,0(fp)
    2c28:	a887883a 	add	r3,r21,r2
    2c2c:	e0c00015 	stw	r3,0(fp)
    2c30:	3500e626 	beq	r6,r20,2fcc <_malloc_r+0x74c>
    2c34:	b9000017 	ldw	r4,0(r23)
    2c38:	00bfffc4 	movi	r2,-1
    2c3c:	2080ee26 	beq	r4,r2,2ff8 <_malloc_r+0x778>
    2c40:	a185c83a 	sub	r2,r20,r6
    2c44:	10c5883a 	add	r2,r2,r3
    2c48:	e0800015 	stw	r2,0(fp)
    2c4c:	a0c001cc 	andi	r3,r20,7
    2c50:	1800bc26 	beq	r3,zero,2f44 <_malloc_r+0x6c4>
    2c54:	a0e9c83a 	sub	r20,r20,r3
    2c58:	00840204 	movi	r2,4104
    2c5c:	a5000204 	addi	r20,r20,8
    2c60:	10c7c83a 	sub	r3,r2,r3
    2c64:	a545883a 	add	r2,r20,r21
    2c68:	1083ffcc 	andi	r2,r2,4095
    2c6c:	18abc83a 	sub	r21,r3,r2
    2c70:	a80b883a 	mov	r5,r21
    2c74:	9009883a 	mov	r4,r18
    2c78:	00031cc0 	call	31cc <_sbrk_r>
    2c7c:	00ffffc4 	movi	r3,-1
    2c80:	10c0e126 	beq	r2,r3,3008 <_malloc_r+0x788>
    2c84:	1505c83a 	sub	r2,r2,r20
    2c88:	1545883a 	add	r2,r2,r21
    2c8c:	10800054 	ori	r2,r2,1
    2c90:	e0c00017 	ldw	r3,0(fp)
    2c94:	9d000215 	stw	r20,8(r19)
    2c98:	a0800115 	stw	r2,4(r20)
    2c9c:	a8c7883a 	add	r3,r21,r3
    2ca0:	e0c00015 	stw	r3,0(fp)
    2ca4:	84c00e26 	beq	r16,r19,2ce0 <_malloc_r+0x460>
    2ca8:	018003c4 	movi	r6,15
    2cac:	3580a72e 	bgeu	r6,r22,2f4c <_malloc_r+0x6cc>
    2cb0:	81400117 	ldw	r5,4(r16)
    2cb4:	013ffe04 	movi	r4,-8
    2cb8:	b0bffd04 	addi	r2,r22,-12
    2cbc:	1104703a 	and	r2,r2,r4
    2cc0:	2900004c 	andi	r4,r5,1
    2cc4:	2088b03a 	or	r4,r4,r2
    2cc8:	81000115 	stw	r4,4(r16)
    2ccc:	01400144 	movi	r5,5
    2cd0:	8089883a 	add	r4,r16,r2
    2cd4:	21400115 	stw	r5,4(r4)
    2cd8:	21400215 	stw	r5,8(r4)
    2cdc:	3080cd36 	bltu	r6,r2,3014 <_malloc_r+0x794>
    2ce0:	00800074 	movhi	r2,1
    2ce4:	1098b604 	addi	r2,r2,25304
    2ce8:	11000017 	ldw	r4,0(r2)
    2cec:	20c0012e 	bgeu	r4,r3,2cf4 <_malloc_r+0x474>
    2cf0:	10c00015 	stw	r3,0(r2)
    2cf4:	00800074 	movhi	r2,1
    2cf8:	1098b504 	addi	r2,r2,25300
    2cfc:	11000017 	ldw	r4,0(r2)
    2d00:	9c000217 	ldw	r16,8(r19)
    2d04:	20c0012e 	bgeu	r4,r3,2d0c <_malloc_r+0x48c>
    2d08:	10c00015 	stw	r3,0(r2)
    2d0c:	80c00117 	ldw	r3,4(r16)
    2d10:	00bfff04 	movi	r2,-4
    2d14:	1886703a 	and	r3,r3,r2
    2d18:	1c45c83a 	sub	r2,r3,r17
    2d1c:	1c400236 	bltu	r3,r17,2d28 <_malloc_r+0x4a8>
    2d20:	00c003c4 	movi	r3,15
    2d24:	18800416 	blt	r3,r2,2d38 <_malloc_r+0x4b8>
    2d28:	9009883a 	mov	r4,r18
    2d2c:	000fd880 	call	fd88 <__malloc_unlock>
    2d30:	0005883a 	mov	r2,zero
    2d34:	003f7b06 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2d38:	88c00054 	ori	r3,r17,1
    2d3c:	80c00115 	stw	r3,4(r16)
    2d40:	8463883a 	add	r17,r16,r17
    2d44:	10800054 	ori	r2,r2,1
    2d48:	9c400215 	stw	r17,8(r19)
    2d4c:	88800115 	stw	r2,4(r17)
    2d50:	9009883a 	mov	r4,r18
    2d54:	000fd880 	call	fd88 <__malloc_unlock>
    2d58:	80800204 	addi	r2,r16,8
    2d5c:	003f7106 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2d60:	00c00504 	movi	r3,20
    2d64:	18804a2e 	bgeu	r3,r2,2e90 <_malloc_r+0x610>
    2d68:	00c01504 	movi	r3,84
    2d6c:	18806e36 	bltu	r3,r2,2f28 <_malloc_r+0x6a8>
    2d70:	8804d33a 	srli	r2,r17,12
    2d74:	12001bc4 	addi	r8,r2,111
    2d78:	11c01b84 	addi	r7,r2,110
    2d7c:	4209883a 	add	r4,r8,r8
    2d80:	003edd06 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2d84:	3804d27a 	srli	r2,r7,9
    2d88:	00c00104 	movi	r3,4
    2d8c:	1880442e 	bgeu	r3,r2,2ea0 <_malloc_r+0x620>
    2d90:	00c00504 	movi	r3,20
    2d94:	18808136 	bltu	r3,r2,2f9c <_malloc_r+0x71c>
    2d98:	11401704 	addi	r5,r2,92
    2d9c:	10c016c4 	addi	r3,r2,91
    2da0:	294b883a 	add	r5,r5,r5
    2da4:	294b883a 	add	r5,r5,r5
    2da8:	294b883a 	add	r5,r5,r5
    2dac:	994b883a 	add	r5,r19,r5
    2db0:	28800017 	ldw	r2,0(r5)
    2db4:	01800074 	movhi	r6,1
    2db8:	297ffe04 	addi	r5,r5,-8
    2dbc:	318c4004 	addi	r6,r6,12544
    2dc0:	28806526 	beq	r5,r2,2f58 <_malloc_r+0x6d8>
    2dc4:	01bfff04 	movi	r6,-4
    2dc8:	10c00117 	ldw	r3,4(r2)
    2dcc:	1986703a 	and	r3,r3,r6
    2dd0:	38c0022e 	bgeu	r7,r3,2ddc <_malloc_r+0x55c>
    2dd4:	10800217 	ldw	r2,8(r2)
    2dd8:	28bffb1e 	bne	r5,r2,2dc8 <__alt_exception_stack_pointer+0xf8002dc8>
    2ddc:	11400317 	ldw	r5,12(r2)
    2de0:	98c00117 	ldw	r3,4(r19)
    2de4:	81400315 	stw	r5,12(r16)
    2de8:	80800215 	stw	r2,8(r16)
    2dec:	2c000215 	stw	r16,8(r5)
    2df0:	14000315 	stw	r16,12(r2)
    2df4:	003ef806 	br	29d8 <__alt_exception_stack_pointer+0xf80029d8>
    2df8:	88c00054 	ori	r3,r17,1
    2dfc:	80c00115 	stw	r3,4(r16)
    2e00:	8463883a 	add	r17,r16,r17
    2e04:	34400515 	stw	r17,20(r6)
    2e08:	34400415 	stw	r17,16(r6)
    2e0c:	10c00054 	ori	r3,r2,1
    2e10:	8a000315 	stw	r8,12(r17)
    2e14:	8a000215 	stw	r8,8(r17)
    2e18:	88c00115 	stw	r3,4(r17)
    2e1c:	88a3883a 	add	r17,r17,r2
    2e20:	88800015 	stw	r2,0(r17)
    2e24:	9009883a 	mov	r4,r18
    2e28:	000fd880 	call	fd88 <__malloc_unlock>
    2e2c:	80800204 	addi	r2,r16,8
    2e30:	003f3c06 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2e34:	30c00117 	ldw	r3,4(r6)
    2e38:	003ee706 	br	29d8 <__alt_exception_stack_pointer+0xf80029d8>
    2e3c:	5ac00044 	addi	r11,r11,1
    2e40:	588000cc 	andi	r2,r11,3
    2e44:	31800204 	addi	r6,r6,8
    2e48:	103efd1e 	bne	r2,zero,2a40 <__alt_exception_stack_pointer+0xf8002a40>
    2e4c:	00002406 	br	2ee0 <_malloc_r+0x660>
    2e50:	14000317 	ldw	r16,12(r2)
    2e54:	143f251e 	bne	r2,r16,2aec <__alt_exception_stack_pointer+0xf8002aec>
    2e58:	21000084 	addi	r4,r4,2
    2e5c:	003ebc06 	br	2950 <__alt_exception_stack_pointer+0xf8002950>
    2e60:	8085883a 	add	r2,r16,r2
    2e64:	10c00117 	ldw	r3,4(r2)
    2e68:	81000317 	ldw	r4,12(r16)
    2e6c:	81400217 	ldw	r5,8(r16)
    2e70:	18c00054 	ori	r3,r3,1
    2e74:	10c00115 	stw	r3,4(r2)
    2e78:	29000315 	stw	r4,12(r5)
    2e7c:	21400215 	stw	r5,8(r4)
    2e80:	9009883a 	mov	r4,r18
    2e84:	000fd880 	call	fd88 <__malloc_unlock>
    2e88:	80800204 	addi	r2,r16,8
    2e8c:	003f2506 	br	2b24 <__alt_exception_stack_pointer+0xf8002b24>
    2e90:	12001704 	addi	r8,r2,92
    2e94:	11c016c4 	addi	r7,r2,91
    2e98:	4209883a 	add	r4,r8,r8
    2e9c:	003e9606 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2ea0:	3804d1ba 	srli	r2,r7,6
    2ea4:	11400e44 	addi	r5,r2,57
    2ea8:	10c00e04 	addi	r3,r2,56
    2eac:	294b883a 	add	r5,r5,r5
    2eb0:	003fbc06 	br	2da4 <__alt_exception_stack_pointer+0xf8002da4>
    2eb4:	84ff5926 	beq	r16,r19,2c1c <__alt_exception_stack_pointer+0xf8002c1c>
    2eb8:	00800074 	movhi	r2,1
    2ebc:	108c4004 	addi	r2,r2,12544
    2ec0:	14000217 	ldw	r16,8(r2)
    2ec4:	00bfff04 	movi	r2,-4
    2ec8:	80c00117 	ldw	r3,4(r16)
    2ecc:	1886703a 	and	r3,r3,r2
    2ed0:	003f9106 	br	2d18 <__alt_exception_stack_pointer+0xf8002d18>
    2ed4:	60800217 	ldw	r2,8(r12)
    2ed8:	213fffc4 	addi	r4,r4,-1
    2edc:	1300651e 	bne	r2,r12,3074 <_malloc_r+0x7f4>
    2ee0:	208000cc 	andi	r2,r4,3
    2ee4:	633ffe04 	addi	r12,r12,-8
    2ee8:	103ffa1e 	bne	r2,zero,2ed4 <__alt_exception_stack_pointer+0xf8002ed4>
    2eec:	98800117 	ldw	r2,4(r19)
    2ef0:	0146303a 	nor	r3,zero,r5
    2ef4:	1884703a 	and	r2,r3,r2
    2ef8:	98800115 	stw	r2,4(r19)
    2efc:	294b883a 	add	r5,r5,r5
    2f00:	117f2836 	bltu	r2,r5,2ba4 <__alt_exception_stack_pointer+0xf8002ba4>
    2f04:	283f2726 	beq	r5,zero,2ba4 <__alt_exception_stack_pointer+0xf8002ba4>
    2f08:	2886703a 	and	r3,r5,r2
    2f0c:	5809883a 	mov	r4,r11
    2f10:	183ec31e 	bne	r3,zero,2a20 <__alt_exception_stack_pointer+0xf8002a20>
    2f14:	294b883a 	add	r5,r5,r5
    2f18:	2886703a 	and	r3,r5,r2
    2f1c:	21000104 	addi	r4,r4,4
    2f20:	183ffc26 	beq	r3,zero,2f14 <__alt_exception_stack_pointer+0xf8002f14>
    2f24:	003ebe06 	br	2a20 <__alt_exception_stack_pointer+0xf8002a20>
    2f28:	00c05504 	movi	r3,340
    2f2c:	18801236 	bltu	r3,r2,2f78 <_malloc_r+0x6f8>
    2f30:	8804d3fa 	srli	r2,r17,15
    2f34:	12001e04 	addi	r8,r2,120
    2f38:	11c01dc4 	addi	r7,r2,119
    2f3c:	4209883a 	add	r4,r8,r8
    2f40:	003e6d06 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2f44:	00c40004 	movi	r3,4096
    2f48:	003f4606 	br	2c64 <__alt_exception_stack_pointer+0xf8002c64>
    2f4c:	00800044 	movi	r2,1
    2f50:	a0800115 	stw	r2,4(r20)
    2f54:	003f7406 	br	2d28 <__alt_exception_stack_pointer+0xf8002d28>
    2f58:	1805d0ba 	srai	r2,r3,2
    2f5c:	01c00044 	movi	r7,1
    2f60:	30c00117 	ldw	r3,4(r6)
    2f64:	388e983a 	sll	r7,r7,r2
    2f68:	2805883a 	mov	r2,r5
    2f6c:	38c6b03a 	or	r3,r7,r3
    2f70:	30c00115 	stw	r3,4(r6)
    2f74:	003f9b06 	br	2de4 <__alt_exception_stack_pointer+0xf8002de4>
    2f78:	00c15504 	movi	r3,1364
    2f7c:	18801a36 	bltu	r3,r2,2fe8 <_malloc_r+0x768>
    2f80:	8804d4ba 	srli	r2,r17,18
    2f84:	12001f44 	addi	r8,r2,125
    2f88:	11c01f04 	addi	r7,r2,124
    2f8c:	4209883a 	add	r4,r8,r8
    2f90:	003e5906 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2f94:	ad400404 	addi	r21,r21,16
    2f98:	003f1706 	br	2bf8 <__alt_exception_stack_pointer+0xf8002bf8>
    2f9c:	00c01504 	movi	r3,84
    2fa0:	18802336 	bltu	r3,r2,3030 <_malloc_r+0x7b0>
    2fa4:	3804d33a 	srli	r2,r7,12
    2fa8:	11401bc4 	addi	r5,r2,111
    2fac:	10c01b84 	addi	r3,r2,110
    2fb0:	294b883a 	add	r5,r5,r5
    2fb4:	003f7b06 	br	2da4 <__alt_exception_stack_pointer+0xf8002da4>
    2fb8:	9c000217 	ldw	r16,8(r19)
    2fbc:	00bfff04 	movi	r2,-4
    2fc0:	80c00117 	ldw	r3,4(r16)
    2fc4:	1886703a 	and	r3,r3,r2
    2fc8:	003f5306 	br	2d18 <__alt_exception_stack_pointer+0xf8002d18>
    2fcc:	3083ffcc 	andi	r2,r6,4095
    2fd0:	103f181e 	bne	r2,zero,2c34 <__alt_exception_stack_pointer+0xf8002c34>
    2fd4:	99000217 	ldw	r4,8(r19)
    2fd8:	b545883a 	add	r2,r22,r21
    2fdc:	10800054 	ori	r2,r2,1
    2fe0:	20800115 	stw	r2,4(r4)
    2fe4:	003f3e06 	br	2ce0 <__alt_exception_stack_pointer+0xf8002ce0>
    2fe8:	01003f84 	movi	r4,254
    2fec:	02001fc4 	movi	r8,127
    2ff0:	01c01f84 	movi	r7,126
    2ff4:	003e4006 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2ff8:	00800074 	movhi	r2,1
    2ffc:	1091e604 	addi	r2,r2,18328
    3000:	15000015 	stw	r20,0(r2)
    3004:	003f1106 	br	2c4c <__alt_exception_stack_pointer+0xf8002c4c>
    3008:	00800044 	movi	r2,1
    300c:	002b883a 	mov	r21,zero
    3010:	003f1f06 	br	2c90 <__alt_exception_stack_pointer+0xf8002c90>
    3014:	81400204 	addi	r5,r16,8
    3018:	9009883a 	mov	r4,r18
    301c:	00077f40 	call	77f4 <_free_r>
    3020:	00800074 	movhi	r2,1
    3024:	1098c304 	addi	r2,r2,25356
    3028:	10c00017 	ldw	r3,0(r2)
    302c:	003f2c06 	br	2ce0 <__alt_exception_stack_pointer+0xf8002ce0>
    3030:	00c05504 	movi	r3,340
    3034:	18800536 	bltu	r3,r2,304c <_malloc_r+0x7cc>
    3038:	3804d3fa 	srli	r2,r7,15
    303c:	11401e04 	addi	r5,r2,120
    3040:	10c01dc4 	addi	r3,r2,119
    3044:	294b883a 	add	r5,r5,r5
    3048:	003f5606 	br	2da4 <__alt_exception_stack_pointer+0xf8002da4>
    304c:	00c15504 	movi	r3,1364
    3050:	18800536 	bltu	r3,r2,3068 <_malloc_r+0x7e8>
    3054:	3804d4ba 	srli	r2,r7,18
    3058:	11401f44 	addi	r5,r2,125
    305c:	10c01f04 	addi	r3,r2,124
    3060:	294b883a 	add	r5,r5,r5
    3064:	003f4f06 	br	2da4 <__alt_exception_stack_pointer+0xf8002da4>
    3068:	01403f84 	movi	r5,254
    306c:	00c01f84 	movi	r3,126
    3070:	003f4c06 	br	2da4 <__alt_exception_stack_pointer+0xf8002da4>
    3074:	98800117 	ldw	r2,4(r19)
    3078:	003fa006 	br	2efc <__alt_exception_stack_pointer+0xf8002efc>
    307c:	8808d0fa 	srli	r4,r17,3
    3080:	20800044 	addi	r2,r4,1
    3084:	1085883a 	add	r2,r2,r2
    3088:	003e9006 	br	2acc <__alt_exception_stack_pointer+0xf8002acc>

0000308c <_printf_r>:
    308c:	defffd04 	addi	sp,sp,-12
    3090:	2805883a 	mov	r2,r5
    3094:	dfc00015 	stw	ra,0(sp)
    3098:	d9800115 	stw	r6,4(sp)
    309c:	d9c00215 	stw	r7,8(sp)
    30a0:	21400217 	ldw	r5,8(r4)
    30a4:	d9c00104 	addi	r7,sp,4
    30a8:	100d883a 	mov	r6,r2
    30ac:	00032c00 	call	32c0 <___vfprintf_internal_r>
    30b0:	dfc00017 	ldw	ra,0(sp)
    30b4:	dec00304 	addi	sp,sp,12
    30b8:	f800283a 	ret

000030bc <printf>:
    30bc:	defffc04 	addi	sp,sp,-16
    30c0:	dfc00015 	stw	ra,0(sp)
    30c4:	d9400115 	stw	r5,4(sp)
    30c8:	d9800215 	stw	r6,8(sp)
    30cc:	d9c00315 	stw	r7,12(sp)
    30d0:	00800074 	movhi	r2,1
    30d4:	1091e504 	addi	r2,r2,18324
    30d8:	10800017 	ldw	r2,0(r2)
    30dc:	200b883a 	mov	r5,r4
    30e0:	d9800104 	addi	r6,sp,4
    30e4:	11000217 	ldw	r4,8(r2)
    30e8:	000559c0 	call	559c <__vfprintf_internal>
    30ec:	dfc00017 	ldw	ra,0(sp)
    30f0:	dec00404 	addi	sp,sp,16
    30f4:	f800283a 	ret

000030f8 <_puts_r>:
    30f8:	defff604 	addi	sp,sp,-40
    30fc:	dc000715 	stw	r16,28(sp)
    3100:	2021883a 	mov	r16,r4
    3104:	2809883a 	mov	r4,r5
    3108:	dc400815 	stw	r17,32(sp)
    310c:	dfc00915 	stw	ra,36(sp)
    3110:	2823883a 	mov	r17,r5
    3114:	00032200 	call	3220 <strlen>
    3118:	10c00044 	addi	r3,r2,1
    311c:	d8800115 	stw	r2,4(sp)
    3120:	00800074 	movhi	r2,1
    3124:	108a7504 	addi	r2,r2,10708
    3128:	d8800215 	stw	r2,8(sp)
    312c:	00800044 	movi	r2,1
    3130:	d8800315 	stw	r2,12(sp)
    3134:	00800084 	movi	r2,2
    3138:	dc400015 	stw	r17,0(sp)
    313c:	d8c00615 	stw	r3,24(sp)
    3140:	dec00415 	stw	sp,16(sp)
    3144:	d8800515 	stw	r2,20(sp)
    3148:	80000226 	beq	r16,zero,3154 <_puts_r+0x5c>
    314c:	80800e17 	ldw	r2,56(r16)
    3150:	10001426 	beq	r2,zero,31a4 <_puts_r+0xac>
    3154:	81400217 	ldw	r5,8(r16)
    3158:	2880030b 	ldhu	r2,12(r5)
    315c:	10c8000c 	andi	r3,r2,8192
    3160:	1800061e 	bne	r3,zero,317c <_puts_r+0x84>
    3164:	29001917 	ldw	r4,100(r5)
    3168:	00f7ffc4 	movi	r3,-8193
    316c:	10880014 	ori	r2,r2,8192
    3170:	20c6703a 	and	r3,r4,r3
    3174:	2880030d 	sth	r2,12(r5)
    3178:	28c01915 	stw	r3,100(r5)
    317c:	d9800404 	addi	r6,sp,16
    3180:	8009883a 	mov	r4,r16
    3184:	0007b040 	call	7b04 <__sfvwrite_r>
    3188:	1000091e 	bne	r2,zero,31b0 <_puts_r+0xb8>
    318c:	00800284 	movi	r2,10
    3190:	dfc00917 	ldw	ra,36(sp)
    3194:	dc400817 	ldw	r17,32(sp)
    3198:	dc000717 	ldw	r16,28(sp)
    319c:	dec00a04 	addi	sp,sp,40
    31a0:	f800283a 	ret
    31a4:	8009883a 	mov	r4,r16
    31a8:	00076800 	call	7680 <__sinit>
    31ac:	003fe906 	br	3154 <__alt_exception_stack_pointer+0xf8003154>
    31b0:	00bfffc4 	movi	r2,-1
    31b4:	003ff606 	br	3190 <__alt_exception_stack_pointer+0xf8003190>

000031b8 <puts>:
    31b8:	00800074 	movhi	r2,1
    31bc:	1091e504 	addi	r2,r2,18324
    31c0:	200b883a 	mov	r5,r4
    31c4:	11000017 	ldw	r4,0(r2)
    31c8:	00030f81 	jmpi	30f8 <_puts_r>

000031cc <_sbrk_r>:
    31cc:	defffd04 	addi	sp,sp,-12
    31d0:	dc000015 	stw	r16,0(sp)
    31d4:	04000074 	movhi	r16,1
    31d8:	dc400115 	stw	r17,4(sp)
    31dc:	8418b804 	addi	r16,r16,25312
    31e0:	2023883a 	mov	r17,r4
    31e4:	2809883a 	mov	r4,r5
    31e8:	dfc00215 	stw	ra,8(sp)
    31ec:	80000015 	stw	zero,0(r16)
    31f0:	000ff700 	call	ff70 <sbrk>
    31f4:	00ffffc4 	movi	r3,-1
    31f8:	10c00526 	beq	r2,r3,3210 <_sbrk_r+0x44>
    31fc:	dfc00217 	ldw	ra,8(sp)
    3200:	dc400117 	ldw	r17,4(sp)
    3204:	dc000017 	ldw	r16,0(sp)
    3208:	dec00304 	addi	sp,sp,12
    320c:	f800283a 	ret
    3210:	80c00017 	ldw	r3,0(r16)
    3214:	183ff926 	beq	r3,zero,31fc <__alt_exception_stack_pointer+0xf80031fc>
    3218:	88c00015 	stw	r3,0(r17)
    321c:	003ff706 	br	31fc <__alt_exception_stack_pointer+0xf80031fc>

00003220 <strlen>:
    3220:	208000cc 	andi	r2,r4,3
    3224:	10002026 	beq	r2,zero,32a8 <strlen+0x88>
    3228:	20800007 	ldb	r2,0(r4)
    322c:	10002026 	beq	r2,zero,32b0 <strlen+0x90>
    3230:	2005883a 	mov	r2,r4
    3234:	00000206 	br	3240 <strlen+0x20>
    3238:	10c00007 	ldb	r3,0(r2)
    323c:	18001826 	beq	r3,zero,32a0 <strlen+0x80>
    3240:	10800044 	addi	r2,r2,1
    3244:	10c000cc 	andi	r3,r2,3
    3248:	183ffb1e 	bne	r3,zero,3238 <__alt_exception_stack_pointer+0xf8003238>
    324c:	10c00017 	ldw	r3,0(r2)
    3250:	01ffbff4 	movhi	r7,65279
    3254:	39ffbfc4 	addi	r7,r7,-257
    3258:	00ca303a 	nor	r5,zero,r3
    325c:	01a02074 	movhi	r6,32897
    3260:	19c7883a 	add	r3,r3,r7
    3264:	31a02004 	addi	r6,r6,-32640
    3268:	1946703a 	and	r3,r3,r5
    326c:	1986703a 	and	r3,r3,r6
    3270:	1800091e 	bne	r3,zero,3298 <strlen+0x78>
    3274:	10800104 	addi	r2,r2,4
    3278:	10c00017 	ldw	r3,0(r2)
    327c:	19cb883a 	add	r5,r3,r7
    3280:	00c6303a 	nor	r3,zero,r3
    3284:	28c6703a 	and	r3,r5,r3
    3288:	1986703a 	and	r3,r3,r6
    328c:	183ff926 	beq	r3,zero,3274 <__alt_exception_stack_pointer+0xf8003274>
    3290:	00000106 	br	3298 <strlen+0x78>
    3294:	10800044 	addi	r2,r2,1
    3298:	10c00007 	ldb	r3,0(r2)
    329c:	183ffd1e 	bne	r3,zero,3294 <__alt_exception_stack_pointer+0xf8003294>
    32a0:	1105c83a 	sub	r2,r2,r4
    32a4:	f800283a 	ret
    32a8:	2005883a 	mov	r2,r4
    32ac:	003fe706 	br	324c <__alt_exception_stack_pointer+0xf800324c>
    32b0:	0005883a 	mov	r2,zero
    32b4:	f800283a 	ret

000032b8 <_times_r>:
    32b8:	2809883a 	mov	r4,r5
    32bc:	001005c1 	jmpi	1005c <times>

000032c0 <___vfprintf_internal_r>:
    32c0:	deffb804 	addi	sp,sp,-288
    32c4:	dfc04715 	stw	ra,284(sp)
    32c8:	ddc04515 	stw	r23,276(sp)
    32cc:	dd404315 	stw	r21,268(sp)
    32d0:	d9002d15 	stw	r4,180(sp)
    32d4:	282f883a 	mov	r23,r5
    32d8:	302b883a 	mov	r21,r6
    32dc:	d9c02e15 	stw	r7,184(sp)
    32e0:	df004615 	stw	fp,280(sp)
    32e4:	dd804415 	stw	r22,272(sp)
    32e8:	dd004215 	stw	r20,264(sp)
    32ec:	dcc04115 	stw	r19,260(sp)
    32f0:	dc804015 	stw	r18,256(sp)
    32f4:	dc403f15 	stw	r17,252(sp)
    32f8:	dc003e15 	stw	r16,248(sp)
    32fc:	00082000 	call	8200 <_localeconv_r>
    3300:	10800017 	ldw	r2,0(r2)
    3304:	1009883a 	mov	r4,r2
    3308:	d8803415 	stw	r2,208(sp)
    330c:	00032200 	call	3220 <strlen>
    3310:	d8803715 	stw	r2,220(sp)
    3314:	d8802d17 	ldw	r2,180(sp)
    3318:	10000226 	beq	r2,zero,3324 <___vfprintf_internal_r+0x64>
    331c:	10800e17 	ldw	r2,56(r2)
    3320:	1000fb26 	beq	r2,zero,3710 <___vfprintf_internal_r+0x450>
    3324:	b880030b 	ldhu	r2,12(r23)
    3328:	10c8000c 	andi	r3,r2,8192
    332c:	1800061e 	bne	r3,zero,3348 <___vfprintf_internal_r+0x88>
    3330:	b9001917 	ldw	r4,100(r23)
    3334:	00f7ffc4 	movi	r3,-8193
    3338:	10880014 	ori	r2,r2,8192
    333c:	20c6703a 	and	r3,r4,r3
    3340:	b880030d 	sth	r2,12(r23)
    3344:	b8c01915 	stw	r3,100(r23)
    3348:	10c0020c 	andi	r3,r2,8
    334c:	1800c326 	beq	r3,zero,365c <___vfprintf_internal_r+0x39c>
    3350:	b8c00417 	ldw	r3,16(r23)
    3354:	1800c126 	beq	r3,zero,365c <___vfprintf_internal_r+0x39c>
    3358:	1080068c 	andi	r2,r2,26
    335c:	00c00284 	movi	r3,10
    3360:	10c0c626 	beq	r2,r3,367c <___vfprintf_internal_r+0x3bc>
    3364:	d8c00404 	addi	r3,sp,16
    3368:	05000074 	movhi	r20,1
    336c:	d9001e04 	addi	r4,sp,120
    3370:	a50a8684 	addi	r20,r20,10778
    3374:	d8c01e15 	stw	r3,120(sp)
    3378:	d8002015 	stw	zero,128(sp)
    337c:	d8001f15 	stw	zero,124(sp)
    3380:	d8003315 	stw	zero,204(sp)
    3384:	d8003615 	stw	zero,216(sp)
    3388:	d8003815 	stw	zero,224(sp)
    338c:	1811883a 	mov	r8,r3
    3390:	d8003915 	stw	zero,228(sp)
    3394:	d8003a15 	stw	zero,232(sp)
    3398:	d8002f15 	stw	zero,188(sp)
    339c:	d9002815 	stw	r4,160(sp)
    33a0:	a8800007 	ldb	r2,0(r21)
    33a4:	10028b26 	beq	r2,zero,3dd4 <___vfprintf_internal_r+0xb14>
    33a8:	00c00944 	movi	r3,37
    33ac:	a823883a 	mov	r17,r21
    33b0:	10c0021e 	bne	r2,r3,33bc <___vfprintf_internal_r+0xfc>
    33b4:	00001406 	br	3408 <___vfprintf_internal_r+0x148>
    33b8:	10c00326 	beq	r2,r3,33c8 <___vfprintf_internal_r+0x108>
    33bc:	8c400044 	addi	r17,r17,1
    33c0:	88800007 	ldb	r2,0(r17)
    33c4:	103ffc1e 	bne	r2,zero,33b8 <__alt_exception_stack_pointer+0xf80033b8>
    33c8:	8d61c83a 	sub	r16,r17,r21
    33cc:	80000e26 	beq	r16,zero,3408 <___vfprintf_internal_r+0x148>
    33d0:	d8c02017 	ldw	r3,128(sp)
    33d4:	d8801f17 	ldw	r2,124(sp)
    33d8:	45400015 	stw	r21,0(r8)
    33dc:	1c07883a 	add	r3,r3,r16
    33e0:	10800044 	addi	r2,r2,1
    33e4:	d8c02015 	stw	r3,128(sp)
    33e8:	44000115 	stw	r16,4(r8)
    33ec:	d8801f15 	stw	r2,124(sp)
    33f0:	00c001c4 	movi	r3,7
    33f4:	1880a916 	blt	r3,r2,369c <___vfprintf_internal_r+0x3dc>
    33f8:	42000204 	addi	r8,r8,8
    33fc:	d9402f17 	ldw	r5,188(sp)
    3400:	2c0b883a 	add	r5,r5,r16
    3404:	d9402f15 	stw	r5,188(sp)
    3408:	88800007 	ldb	r2,0(r17)
    340c:	1000aa26 	beq	r2,zero,36b8 <___vfprintf_internal_r+0x3f8>
    3410:	8d400044 	addi	r21,r17,1
    3414:	8c400047 	ldb	r17,1(r17)
    3418:	0021883a 	mov	r16,zero
    341c:	00bfffc4 	movi	r2,-1
    3420:	0025883a 	mov	r18,zero
    3424:	dc002905 	stb	r16,164(sp)
    3428:	d8002785 	stb	zero,158(sp)
    342c:	d8002b05 	stb	zero,172(sp)
    3430:	d8802a15 	stw	r2,168(sp)
    3434:	d8003115 	stw	zero,196(sp)
    3438:	04c01604 	movi	r19,88
    343c:	05800244 	movi	r22,9
    3440:	9021883a 	mov	r16,r18
    3444:	4039883a 	mov	fp,r8
    3448:	ad400044 	addi	r21,r21,1
    344c:	88bff804 	addi	r2,r17,-32
    3450:	98833236 	bltu	r19,r2,411c <___vfprintf_internal_r+0xe5c>
    3454:	100490ba 	slli	r2,r2,2
    3458:	00c00034 	movhi	r3,0
    345c:	18cd1b04 	addi	r3,r3,13420
    3460:	10c5883a 	add	r2,r2,r3
    3464:	10800017 	ldw	r2,0(r2)
    3468:	1000683a 	jmp	r2
    346c:	00004014 	movui	zero,256
    3470:	0000411c 	xori	zero,zero,260
    3474:	0000411c 	xori	zero,zero,260
    3478:	00004034 	movhi	zero,256
    347c:	0000411c 	xori	zero,zero,260
    3480:	0000411c 	xori	zero,zero,260
    3484:	0000411c 	xori	zero,zero,260
    3488:	0000411c 	xori	zero,zero,260
    348c:	0000411c 	xori	zero,zero,260
    3490:	0000411c 	xori	zero,zero,260
    3494:	0000371c 	xori	zero,zero,220
    3498:	00003f24 	muli	zero,zero,252
    349c:	0000411c 	xori	zero,zero,260
    34a0:	000035e0 	cmpeqi	zero,zero,215
    34a4:	00003740 	call	374 <IO_write+0x4c>
    34a8:	0000411c 	xori	zero,zero,260
    34ac:	00003790 	cmplti	zero,zero,222
    34b0:	0000379c 	xori	zero,zero,222
    34b4:	0000379c 	xori	zero,zero,222
    34b8:	0000379c 	xori	zero,zero,222
    34bc:	0000379c 	xori	zero,zero,222
    34c0:	0000379c 	xori	zero,zero,222
    34c4:	0000379c 	xori	zero,zero,222
    34c8:	0000379c 	xori	zero,zero,222
    34cc:	0000379c 	xori	zero,zero,222
    34d0:	0000379c 	xori	zero,zero,222
    34d4:	0000411c 	xori	zero,zero,260
    34d8:	0000411c 	xori	zero,zero,260
    34dc:	0000411c 	xori	zero,zero,260
    34e0:	0000411c 	xori	zero,zero,260
    34e4:	0000411c 	xori	zero,zero,260
    34e8:	0000411c 	xori	zero,zero,260
    34ec:	0000411c 	xori	zero,zero,260
    34f0:	0000411c 	xori	zero,zero,260
    34f4:	0000411c 	xori	zero,zero,260
    34f8:	0000411c 	xori	zero,zero,260
    34fc:	000037d8 	cmpnei	zero,zero,223
    3500:	000038a0 	cmpeqi	zero,zero,226
    3504:	0000411c 	xori	zero,zero,260
    3508:	000038a0 	cmpeqi	zero,zero,226
    350c:	0000411c 	xori	zero,zero,260
    3510:	0000411c 	xori	zero,zero,260
    3514:	0000411c 	xori	zero,zero,260
    3518:	0000411c 	xori	zero,zero,260
    351c:	0000394c 	andi	zero,zero,229
    3520:	0000411c 	xori	zero,zero,260
    3524:	0000411c 	xori	zero,zero,260
    3528:	00003958 	cmpnei	zero,zero,229
    352c:	0000411c 	xori	zero,zero,260
    3530:	0000411c 	xori	zero,zero,260
    3534:	0000411c 	xori	zero,zero,260
    3538:	0000411c 	xori	zero,zero,260
    353c:	0000411c 	xori	zero,zero,260
    3540:	00003ddc 	xori	zero,zero,247
    3544:	0000411c 	xori	zero,zero,260
    3548:	0000411c 	xori	zero,zero,260
    354c:	00003e48 	cmpgei	zero,zero,249
    3550:	0000411c 	xori	zero,zero,260
    3554:	0000411c 	xori	zero,zero,260
    3558:	0000411c 	xori	zero,zero,260
    355c:	0000411c 	xori	zero,zero,260
    3560:	0000411c 	xori	zero,zero,260
    3564:	0000411c 	xori	zero,zero,260
    3568:	0000411c 	xori	zero,zero,260
    356c:	0000411c 	xori	zero,zero,260
    3570:	0000411c 	xori	zero,zero,260
    3574:	0000411c 	xori	zero,zero,260
    3578:	000040c0 	call	40c <IO_read+0x5c>
    357c:	00004040 	call	404 <IO_read+0x54>
    3580:	000038a0 	cmpeqi	zero,zero,226
    3584:	000038a0 	cmpeqi	zero,zero,226
    3588:	000038a0 	cmpeqi	zero,zero,226
    358c:	00004060 	cmpeqi	zero,zero,257
    3590:	00004040 	call	404 <IO_read+0x54>
    3594:	0000411c 	xori	zero,zero,260
    3598:	0000411c 	xori	zero,zero,260
    359c:	0000406c 	andhi	zero,zero,257
    35a0:	0000411c 	xori	zero,zero,260
    35a4:	00004080 	call	408 <IO_read+0x58>
    35a8:	00003f04 	movi	zero,252
    35ac:	000035ec 	andhi	zero,zero,215
    35b0:	00003f3c 	xorhi	zero,zero,252
    35b4:	0000411c 	xori	zero,zero,260
    35b8:	00003f48 	cmpgei	zero,zero,253
    35bc:	0000411c 	xori	zero,zero,260
    35c0:	00003fac 	andhi	zero,zero,254
    35c4:	0000411c 	xori	zero,zero,260
    35c8:	0000411c 	xori	zero,zero,260
    35cc:	00003fcc 	andi	zero,zero,255
    35d0:	d8c03117 	ldw	r3,196(sp)
    35d4:	d8802e15 	stw	r2,184(sp)
    35d8:	00c7c83a 	sub	r3,zero,r3
    35dc:	d8c03115 	stw	r3,196(sp)
    35e0:	84000114 	ori	r16,r16,4
    35e4:	ac400007 	ldb	r17,0(r21)
    35e8:	003f9706 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    35ec:	00800c04 	movi	r2,48
    35f0:	d8802705 	stb	r2,156(sp)
    35f4:	00801e04 	movi	r2,120
    35f8:	d8802745 	stb	r2,157(sp)
    35fc:	d9002a17 	ldw	r4,168(sp)
    3600:	d8802e17 	ldw	r2,184(sp)
    3604:	d8002785 	stb	zero,158(sp)
    3608:	e011883a 	mov	r8,fp
    360c:	10c00104 	addi	r3,r2,4
    3610:	14c00017 	ldw	r19,0(r2)
    3614:	002d883a 	mov	r22,zero
    3618:	80800094 	ori	r2,r16,2
    361c:	2002ca16 	blt	r4,zero,4148 <___vfprintf_internal_r+0xe88>
    3620:	00bfdfc4 	movi	r2,-129
    3624:	80a4703a 	and	r18,r16,r2
    3628:	d8c02e15 	stw	r3,184(sp)
    362c:	94800094 	ori	r18,r18,2
    3630:	9802b41e 	bne	r19,zero,4104 <___vfprintf_internal_r+0xe44>
    3634:	01400074 	movhi	r5,1
    3638:	294a7f04 	addi	r5,r5,10748
    363c:	d9403915 	stw	r5,228(sp)
    3640:	04401e04 	movi	r17,120
    3644:	d8802a17 	ldw	r2,168(sp)
    3648:	0039883a 	mov	fp,zero
    364c:	1001fa26 	beq	r2,zero,3e38 <___vfprintf_internal_r+0xb78>
    3650:	0027883a 	mov	r19,zero
    3654:	002d883a 	mov	r22,zero
    3658:	00021906 	br	3ec0 <___vfprintf_internal_r+0xc00>
    365c:	d9002d17 	ldw	r4,180(sp)
    3660:	b80b883a 	mov	r5,r23
    3664:	00056740 	call	5674 <__swsetup_r>
    3668:	1005dc1e 	bne	r2,zero,4ddc <___vfprintf_internal_r+0x1b1c>
    366c:	b880030b 	ldhu	r2,12(r23)
    3670:	00c00284 	movi	r3,10
    3674:	1080068c 	andi	r2,r2,26
    3678:	10ff3a1e 	bne	r2,r3,3364 <__alt_exception_stack_pointer+0xf8003364>
    367c:	b880038f 	ldh	r2,14(r23)
    3680:	103f3816 	blt	r2,zero,3364 <__alt_exception_stack_pointer+0xf8003364>
    3684:	d9c02e17 	ldw	r7,184(sp)
    3688:	d9002d17 	ldw	r4,180(sp)
    368c:	a80d883a 	mov	r6,r21
    3690:	b80b883a 	mov	r5,r23
    3694:	00055b80 	call	55b8 <__sbprintf>
    3698:	00001106 	br	36e0 <___vfprintf_internal_r+0x420>
    369c:	d9002d17 	ldw	r4,180(sp)
    36a0:	d9801e04 	addi	r6,sp,120
    36a4:	b80b883a 	mov	r5,r23
    36a8:	000a2400 	call	a240 <__sprint_r>
    36ac:	1000081e 	bne	r2,zero,36d0 <___vfprintf_internal_r+0x410>
    36b0:	da000404 	addi	r8,sp,16
    36b4:	003f5106 	br	33fc <__alt_exception_stack_pointer+0xf80033fc>
    36b8:	d8802017 	ldw	r2,128(sp)
    36bc:	10000426 	beq	r2,zero,36d0 <___vfprintf_internal_r+0x410>
    36c0:	d9002d17 	ldw	r4,180(sp)
    36c4:	d9801e04 	addi	r6,sp,120
    36c8:	b80b883a 	mov	r5,r23
    36cc:	000a2400 	call	a240 <__sprint_r>
    36d0:	b880030b 	ldhu	r2,12(r23)
    36d4:	1080100c 	andi	r2,r2,64
    36d8:	1005c01e 	bne	r2,zero,4ddc <___vfprintf_internal_r+0x1b1c>
    36dc:	d8802f17 	ldw	r2,188(sp)
    36e0:	dfc04717 	ldw	ra,284(sp)
    36e4:	df004617 	ldw	fp,280(sp)
    36e8:	ddc04517 	ldw	r23,276(sp)
    36ec:	dd804417 	ldw	r22,272(sp)
    36f0:	dd404317 	ldw	r21,268(sp)
    36f4:	dd004217 	ldw	r20,264(sp)
    36f8:	dcc04117 	ldw	r19,260(sp)
    36fc:	dc804017 	ldw	r18,256(sp)
    3700:	dc403f17 	ldw	r17,252(sp)
    3704:	dc003e17 	ldw	r16,248(sp)
    3708:	dec04804 	addi	sp,sp,288
    370c:	f800283a 	ret
    3710:	d9002d17 	ldw	r4,180(sp)
    3714:	00076800 	call	7680 <__sinit>
    3718:	003f0206 	br	3324 <__alt_exception_stack_pointer+0xf8003324>
    371c:	d9002e17 	ldw	r4,184(sp)
    3720:	d9402e17 	ldw	r5,184(sp)
    3724:	21000017 	ldw	r4,0(r4)
    3728:	28800104 	addi	r2,r5,4
    372c:	d9003115 	stw	r4,196(sp)
    3730:	203fa716 	blt	r4,zero,35d0 <__alt_exception_stack_pointer+0xf80035d0>
    3734:	d8802e15 	stw	r2,184(sp)
    3738:	ac400007 	ldb	r17,0(r21)
    373c:	003f4206 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    3740:	ac400007 	ldb	r17,0(r21)
    3744:	01000a84 	movi	r4,42
    3748:	a8c00044 	addi	r3,r21,1
    374c:	89075826 	beq	r17,r4,54b0 <___vfprintf_internal_r+0x21f0>
    3750:	8cbff404 	addi	r18,r17,-48
    3754:	b486ae36 	bltu	r22,r18,5210 <___vfprintf_internal_r+0x1f50>
    3758:	0009883a 	mov	r4,zero
    375c:	1823883a 	mov	r17,r3
    3760:	01400284 	movi	r5,10
    3764:	000cefc0 	call	cefc <__mulsi3>
    3768:	88c00007 	ldb	r3,0(r17)
    376c:	1489883a 	add	r4,r2,r18
    3770:	8d400044 	addi	r21,r17,1
    3774:	1cbff404 	addi	r18,r3,-48
    3778:	a823883a 	mov	r17,r21
    377c:	b4bff82e 	bgeu	r22,r18,3760 <__alt_exception_stack_pointer+0xf8003760>
    3780:	1823883a 	mov	r17,r3
    3784:	2005f616 	blt	r4,zero,4f60 <___vfprintf_internal_r+0x1ca0>
    3788:	d9002a15 	stw	r4,168(sp)
    378c:	003f2f06 	br	344c <__alt_exception_stack_pointer+0xf800344c>
    3790:	84002014 	ori	r16,r16,128
    3794:	ac400007 	ldb	r17,0(r21)
    3798:	003f2b06 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    379c:	8cbff404 	addi	r18,r17,-48
    37a0:	d8003115 	stw	zero,196(sp)
    37a4:	0009883a 	mov	r4,zero
    37a8:	a823883a 	mov	r17,r21
    37ac:	01400284 	movi	r5,10
    37b0:	000cefc0 	call	cefc <__mulsi3>
    37b4:	88c00007 	ldb	r3,0(r17)
    37b8:	9089883a 	add	r4,r18,r2
    37bc:	ad400044 	addi	r21,r21,1
    37c0:	1cbff404 	addi	r18,r3,-48
    37c4:	a823883a 	mov	r17,r21
    37c8:	b4bff82e 	bgeu	r22,r18,37ac <__alt_exception_stack_pointer+0xf80037ac>
    37cc:	1823883a 	mov	r17,r3
    37d0:	d9003115 	stw	r4,196(sp)
    37d4:	003f1d06 	br	344c <__alt_exception_stack_pointer+0xf800344c>
    37d8:	8025883a 	mov	r18,r16
    37dc:	dc002903 	ldbu	r16,164(sp)
    37e0:	e011883a 	mov	r8,fp
    37e4:	84003fcc 	andi	r16,r16,255
    37e8:	8007531e 	bne	r16,zero,5538 <___vfprintf_internal_r+0x2278>
    37ec:	94800414 	ori	r18,r18,16
    37f0:	9080080c 	andi	r2,r18,32
    37f4:	1003a326 	beq	r2,zero,4684 <___vfprintf_internal_r+0x13c4>
    37f8:	d9002e17 	ldw	r4,184(sp)
    37fc:	20800117 	ldw	r2,4(r4)
    3800:	24c00017 	ldw	r19,0(r4)
    3804:	21000204 	addi	r4,r4,8
    3808:	d9002e15 	stw	r4,184(sp)
    380c:	102d883a 	mov	r22,r2
    3810:	10047316 	blt	r2,zero,49e0 <___vfprintf_internal_r+0x1720>
    3814:	d9002a17 	ldw	r4,168(sp)
    3818:	df002783 	ldbu	fp,158(sp)
    381c:	2003e416 	blt	r4,zero,47b0 <___vfprintf_internal_r+0x14f0>
    3820:	00ffdfc4 	movi	r3,-129
    3824:	9d84b03a 	or	r2,r19,r22
    3828:	90e4703a 	and	r18,r18,r3
    382c:	10018026 	beq	r2,zero,3e30 <___vfprintf_internal_r+0xb70>
    3830:	b003ab26 	beq	r22,zero,46e0 <___vfprintf_internal_r+0x1420>
    3834:	dc402915 	stw	r17,164(sp)
    3838:	dc001e04 	addi	r16,sp,120
    383c:	b023883a 	mov	r17,r22
    3840:	402d883a 	mov	r22,r8
    3844:	9809883a 	mov	r4,r19
    3848:	880b883a 	mov	r5,r17
    384c:	01800284 	movi	r6,10
    3850:	000f883a 	mov	r7,zero
    3854:	000c7840 	call	c784 <__umoddi3>
    3858:	10800c04 	addi	r2,r2,48
    385c:	843fffc4 	addi	r16,r16,-1
    3860:	9809883a 	mov	r4,r19
    3864:	880b883a 	mov	r5,r17
    3868:	80800005 	stb	r2,0(r16)
    386c:	01800284 	movi	r6,10
    3870:	000f883a 	mov	r7,zero
    3874:	000c1880 	call	c188 <__udivdi3>
    3878:	1027883a 	mov	r19,r2
    387c:	10c4b03a 	or	r2,r2,r3
    3880:	1823883a 	mov	r17,r3
    3884:	103fef1e 	bne	r2,zero,3844 <__alt_exception_stack_pointer+0xf8003844>
    3888:	d8c02817 	ldw	r3,160(sp)
    388c:	dc402917 	ldw	r17,164(sp)
    3890:	b011883a 	mov	r8,r22
    3894:	1c07c83a 	sub	r3,r3,r16
    3898:	d8c02b15 	stw	r3,172(sp)
    389c:	00005f06 	br	3a1c <___vfprintf_internal_r+0x75c>
    38a0:	8025883a 	mov	r18,r16
    38a4:	dc002903 	ldbu	r16,164(sp)
    38a8:	e011883a 	mov	r8,fp
    38ac:	84003fcc 	andi	r16,r16,255
    38b0:	80071e1e 	bne	r16,zero,552c <___vfprintf_internal_r+0x226c>
    38b4:	9080020c 	andi	r2,r18,8
    38b8:	1004af26 	beq	r2,zero,4b78 <___vfprintf_internal_r+0x18b8>
    38bc:	d9002e17 	ldw	r4,184(sp)
    38c0:	d9402e17 	ldw	r5,184(sp)
    38c4:	d8802e17 	ldw	r2,184(sp)
    38c8:	21000017 	ldw	r4,0(r4)
    38cc:	29400117 	ldw	r5,4(r5)
    38d0:	10800204 	addi	r2,r2,8
    38d4:	d9003615 	stw	r4,216(sp)
    38d8:	d9403815 	stw	r5,224(sp)
    38dc:	d8802e15 	stw	r2,184(sp)
    38e0:	d9003617 	ldw	r4,216(sp)
    38e4:	d9403817 	ldw	r5,224(sp)
    38e8:	da003d15 	stw	r8,244(sp)
    38ec:	04000044 	movi	r16,1
    38f0:	0009eb80 	call	9eb8 <__fpclassifyd>
    38f4:	da003d17 	ldw	r8,244(sp)
    38f8:	1404441e 	bne	r2,r16,4a0c <___vfprintf_internal_r+0x174c>
    38fc:	d9003617 	ldw	r4,216(sp)
    3900:	d9403817 	ldw	r5,224(sp)
    3904:	000d883a 	mov	r6,zero
    3908:	000f883a 	mov	r7,zero
    390c:	000e3040 	call	e304 <__ledf2>
    3910:	da003d17 	ldw	r8,244(sp)
    3914:	1005e316 	blt	r2,zero,50a4 <___vfprintf_internal_r+0x1de4>
    3918:	df002783 	ldbu	fp,158(sp)
    391c:	008011c4 	movi	r2,71
    3920:	1445580e 	bge	r2,r17,4e84 <___vfprintf_internal_r+0x1bc4>
    3924:	04000074 	movhi	r16,1
    3928:	840a7704 	addi	r16,r16,10716
    392c:	00c000c4 	movi	r3,3
    3930:	00bfdfc4 	movi	r2,-129
    3934:	d8c02915 	stw	r3,164(sp)
    3938:	90a4703a 	and	r18,r18,r2
    393c:	d8c02b15 	stw	r3,172(sp)
    3940:	d8002a15 	stw	zero,168(sp)
    3944:	d8003215 	stw	zero,200(sp)
    3948:	00003a06 	br	3a34 <___vfprintf_internal_r+0x774>
    394c:	84000214 	ori	r16,r16,8
    3950:	ac400007 	ldb	r17,0(r21)
    3954:	003ebc06 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    3958:	8025883a 	mov	r18,r16
    395c:	dc002903 	ldbu	r16,164(sp)
    3960:	e011883a 	mov	r8,fp
    3964:	84003fcc 	andi	r16,r16,255
    3968:	8007001e 	bne	r16,zero,556c <___vfprintf_internal_r+0x22ac>
    396c:	94800414 	ori	r18,r18,16
    3970:	9080080c 	andi	r2,r18,32
    3974:	1002fa26 	beq	r2,zero,4560 <___vfprintf_internal_r+0x12a0>
    3978:	d9002e17 	ldw	r4,184(sp)
    397c:	d9402a17 	ldw	r5,168(sp)
    3980:	d8002785 	stb	zero,158(sp)
    3984:	20800204 	addi	r2,r4,8
    3988:	24c00017 	ldw	r19,0(r4)
    398c:	25800117 	ldw	r22,4(r4)
    3990:	2804b116 	blt	r5,zero,4c58 <___vfprintf_internal_r+0x1998>
    3994:	013fdfc4 	movi	r4,-129
    3998:	9d86b03a 	or	r3,r19,r22
    399c:	d8802e15 	stw	r2,184(sp)
    39a0:	9124703a 	and	r18,r18,r4
    39a4:	1802fb1e 	bne	r3,zero,4594 <___vfprintf_internal_r+0x12d4>
    39a8:	d8c02a17 	ldw	r3,168(sp)
    39ac:	0039883a 	mov	fp,zero
    39b0:	1805e526 	beq	r3,zero,5148 <___vfprintf_internal_r+0x1e88>
    39b4:	0027883a 	mov	r19,zero
    39b8:	002d883a 	mov	r22,zero
    39bc:	dc001e04 	addi	r16,sp,120
    39c0:	9806d0fa 	srli	r3,r19,3
    39c4:	b008977a 	slli	r4,r22,29
    39c8:	b02cd0fa 	srli	r22,r22,3
    39cc:	9cc001cc 	andi	r19,r19,7
    39d0:	98800c04 	addi	r2,r19,48
    39d4:	843fffc4 	addi	r16,r16,-1
    39d8:	20e6b03a 	or	r19,r4,r3
    39dc:	80800005 	stb	r2,0(r16)
    39e0:	9d86b03a 	or	r3,r19,r22
    39e4:	183ff61e 	bne	r3,zero,39c0 <__alt_exception_stack_pointer+0xf80039c0>
    39e8:	90c0004c 	andi	r3,r18,1
    39ec:	18014126 	beq	r3,zero,3ef4 <___vfprintf_internal_r+0xc34>
    39f0:	10803fcc 	andi	r2,r2,255
    39f4:	1080201c 	xori	r2,r2,128
    39f8:	10bfe004 	addi	r2,r2,-128
    39fc:	00c00c04 	movi	r3,48
    3a00:	10c13c26 	beq	r2,r3,3ef4 <___vfprintf_internal_r+0xc34>
    3a04:	80ffffc5 	stb	r3,-1(r16)
    3a08:	d8c02817 	ldw	r3,160(sp)
    3a0c:	80bfffc4 	addi	r2,r16,-1
    3a10:	1021883a 	mov	r16,r2
    3a14:	1887c83a 	sub	r3,r3,r2
    3a18:	d8c02b15 	stw	r3,172(sp)
    3a1c:	d8802b17 	ldw	r2,172(sp)
    3a20:	d9002a17 	ldw	r4,168(sp)
    3a24:	1100010e 	bge	r2,r4,3a2c <___vfprintf_internal_r+0x76c>
    3a28:	2005883a 	mov	r2,r4
    3a2c:	d8802915 	stw	r2,164(sp)
    3a30:	d8003215 	stw	zero,200(sp)
    3a34:	e7003fcc 	andi	fp,fp,255
    3a38:	e700201c 	xori	fp,fp,128
    3a3c:	e73fe004 	addi	fp,fp,-128
    3a40:	e0000326 	beq	fp,zero,3a50 <___vfprintf_internal_r+0x790>
    3a44:	d8c02917 	ldw	r3,164(sp)
    3a48:	18c00044 	addi	r3,r3,1
    3a4c:	d8c02915 	stw	r3,164(sp)
    3a50:	90c0008c 	andi	r3,r18,2
    3a54:	d8c02c15 	stw	r3,176(sp)
    3a58:	18000326 	beq	r3,zero,3a68 <___vfprintf_internal_r+0x7a8>
    3a5c:	d8c02917 	ldw	r3,164(sp)
    3a60:	18c00084 	addi	r3,r3,2
    3a64:	d8c02915 	stw	r3,164(sp)
    3a68:	90c0210c 	andi	r3,r18,132
    3a6c:	d8c03015 	stw	r3,192(sp)
    3a70:	1801c51e 	bne	r3,zero,4188 <___vfprintf_internal_r+0xec8>
    3a74:	d9003117 	ldw	r4,196(sp)
    3a78:	d8c02917 	ldw	r3,164(sp)
    3a7c:	20e7c83a 	sub	r19,r4,r3
    3a80:	04c1c10e 	bge	zero,r19,4188 <___vfprintf_internal_r+0xec8>
    3a84:	02400404 	movi	r9,16
    3a88:	d8c02017 	ldw	r3,128(sp)
    3a8c:	d8801f17 	ldw	r2,124(sp)
    3a90:	4cc52f0e 	bge	r9,r19,4f50 <___vfprintf_internal_r+0x1c90>
    3a94:	01400074 	movhi	r5,1
    3a98:	294a8a84 	addi	r5,r5,10794
    3a9c:	dc403b15 	stw	r17,236(sp)
    3aa0:	d9403515 	stw	r5,212(sp)
    3aa4:	9823883a 	mov	r17,r19
    3aa8:	482d883a 	mov	r22,r9
    3aac:	9027883a 	mov	r19,r18
    3ab0:	070001c4 	movi	fp,7
    3ab4:	8025883a 	mov	r18,r16
    3ab8:	dc002d17 	ldw	r16,180(sp)
    3abc:	00000306 	br	3acc <___vfprintf_internal_r+0x80c>
    3ac0:	8c7ffc04 	addi	r17,r17,-16
    3ac4:	42000204 	addi	r8,r8,8
    3ac8:	b440130e 	bge	r22,r17,3b18 <___vfprintf_internal_r+0x858>
    3acc:	01000074 	movhi	r4,1
    3ad0:	18c00404 	addi	r3,r3,16
    3ad4:	10800044 	addi	r2,r2,1
    3ad8:	210a8a84 	addi	r4,r4,10794
    3adc:	41000015 	stw	r4,0(r8)
    3ae0:	45800115 	stw	r22,4(r8)
    3ae4:	d8c02015 	stw	r3,128(sp)
    3ae8:	d8801f15 	stw	r2,124(sp)
    3aec:	e0bff40e 	bge	fp,r2,3ac0 <__alt_exception_stack_pointer+0xf8003ac0>
    3af0:	d9801e04 	addi	r6,sp,120
    3af4:	b80b883a 	mov	r5,r23
    3af8:	8009883a 	mov	r4,r16
    3afc:	000a2400 	call	a240 <__sprint_r>
    3b00:	103ef31e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    3b04:	8c7ffc04 	addi	r17,r17,-16
    3b08:	d8c02017 	ldw	r3,128(sp)
    3b0c:	d8801f17 	ldw	r2,124(sp)
    3b10:	da000404 	addi	r8,sp,16
    3b14:	b47fed16 	blt	r22,r17,3acc <__alt_exception_stack_pointer+0xf8003acc>
    3b18:	9021883a 	mov	r16,r18
    3b1c:	9825883a 	mov	r18,r19
    3b20:	8827883a 	mov	r19,r17
    3b24:	dc403b17 	ldw	r17,236(sp)
    3b28:	d9403517 	ldw	r5,212(sp)
    3b2c:	98c7883a 	add	r3,r19,r3
    3b30:	10800044 	addi	r2,r2,1
    3b34:	41400015 	stw	r5,0(r8)
    3b38:	44c00115 	stw	r19,4(r8)
    3b3c:	d8c02015 	stw	r3,128(sp)
    3b40:	d8801f15 	stw	r2,124(sp)
    3b44:	010001c4 	movi	r4,7
    3b48:	2082c516 	blt	r4,r2,4660 <___vfprintf_internal_r+0x13a0>
    3b4c:	df002787 	ldb	fp,158(sp)
    3b50:	42000204 	addi	r8,r8,8
    3b54:	e0000c26 	beq	fp,zero,3b88 <___vfprintf_internal_r+0x8c8>
    3b58:	d8801f17 	ldw	r2,124(sp)
    3b5c:	d9002784 	addi	r4,sp,158
    3b60:	18c00044 	addi	r3,r3,1
    3b64:	10800044 	addi	r2,r2,1
    3b68:	41000015 	stw	r4,0(r8)
    3b6c:	01000044 	movi	r4,1
    3b70:	41000115 	stw	r4,4(r8)
    3b74:	d8c02015 	stw	r3,128(sp)
    3b78:	d8801f15 	stw	r2,124(sp)
    3b7c:	010001c4 	movi	r4,7
    3b80:	20825e16 	blt	r4,r2,44fc <___vfprintf_internal_r+0x123c>
    3b84:	42000204 	addi	r8,r8,8
    3b88:	d8802c17 	ldw	r2,176(sp)
    3b8c:	10000c26 	beq	r2,zero,3bc0 <___vfprintf_internal_r+0x900>
    3b90:	d8801f17 	ldw	r2,124(sp)
    3b94:	d9002704 	addi	r4,sp,156
    3b98:	18c00084 	addi	r3,r3,2
    3b9c:	10800044 	addi	r2,r2,1
    3ba0:	41000015 	stw	r4,0(r8)
    3ba4:	01000084 	movi	r4,2
    3ba8:	41000115 	stw	r4,4(r8)
    3bac:	d8c02015 	stw	r3,128(sp)
    3bb0:	d8801f15 	stw	r2,124(sp)
    3bb4:	010001c4 	movi	r4,7
    3bb8:	20825816 	blt	r4,r2,451c <___vfprintf_internal_r+0x125c>
    3bbc:	42000204 	addi	r8,r8,8
    3bc0:	d9003017 	ldw	r4,192(sp)
    3bc4:	00802004 	movi	r2,128
    3bc8:	2081bb26 	beq	r4,r2,42b8 <___vfprintf_internal_r+0xff8>
    3bcc:	d9402a17 	ldw	r5,168(sp)
    3bd0:	d8802b17 	ldw	r2,172(sp)
    3bd4:	28adc83a 	sub	r22,r5,r2
    3bd8:	0580310e 	bge	zero,r22,3ca0 <___vfprintf_internal_r+0x9e0>
    3bdc:	07000404 	movi	fp,16
    3be0:	d8801f17 	ldw	r2,124(sp)
    3be4:	e584360e 	bge	fp,r22,4cc0 <___vfprintf_internal_r+0x1a00>
    3be8:	01400074 	movhi	r5,1
    3bec:	294a8684 	addi	r5,r5,10778
    3bf0:	dc402a15 	stw	r17,168(sp)
    3bf4:	d9402c15 	stw	r5,176(sp)
    3bf8:	b023883a 	mov	r17,r22
    3bfc:	04c001c4 	movi	r19,7
    3c00:	a82d883a 	mov	r22,r21
    3c04:	902b883a 	mov	r21,r18
    3c08:	8025883a 	mov	r18,r16
    3c0c:	dc002d17 	ldw	r16,180(sp)
    3c10:	00000306 	br	3c20 <___vfprintf_internal_r+0x960>
    3c14:	8c7ffc04 	addi	r17,r17,-16
    3c18:	42000204 	addi	r8,r8,8
    3c1c:	e440110e 	bge	fp,r17,3c64 <___vfprintf_internal_r+0x9a4>
    3c20:	18c00404 	addi	r3,r3,16
    3c24:	10800044 	addi	r2,r2,1
    3c28:	45000015 	stw	r20,0(r8)
    3c2c:	47000115 	stw	fp,4(r8)
    3c30:	d8c02015 	stw	r3,128(sp)
    3c34:	d8801f15 	stw	r2,124(sp)
    3c38:	98bff60e 	bge	r19,r2,3c14 <__alt_exception_stack_pointer+0xf8003c14>
    3c3c:	d9801e04 	addi	r6,sp,120
    3c40:	b80b883a 	mov	r5,r23
    3c44:	8009883a 	mov	r4,r16
    3c48:	000a2400 	call	a240 <__sprint_r>
    3c4c:	103ea01e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    3c50:	8c7ffc04 	addi	r17,r17,-16
    3c54:	d8c02017 	ldw	r3,128(sp)
    3c58:	d8801f17 	ldw	r2,124(sp)
    3c5c:	da000404 	addi	r8,sp,16
    3c60:	e47fef16 	blt	fp,r17,3c20 <__alt_exception_stack_pointer+0xf8003c20>
    3c64:	9021883a 	mov	r16,r18
    3c68:	a825883a 	mov	r18,r21
    3c6c:	b02b883a 	mov	r21,r22
    3c70:	882d883a 	mov	r22,r17
    3c74:	dc402a17 	ldw	r17,168(sp)
    3c78:	d9002c17 	ldw	r4,176(sp)
    3c7c:	1d87883a 	add	r3,r3,r22
    3c80:	10800044 	addi	r2,r2,1
    3c84:	41000015 	stw	r4,0(r8)
    3c88:	45800115 	stw	r22,4(r8)
    3c8c:	d8c02015 	stw	r3,128(sp)
    3c90:	d8801f15 	stw	r2,124(sp)
    3c94:	010001c4 	movi	r4,7
    3c98:	20821016 	blt	r4,r2,44dc <___vfprintf_internal_r+0x121c>
    3c9c:	42000204 	addi	r8,r8,8
    3ca0:	9080400c 	andi	r2,r18,256
    3ca4:	10013a1e 	bne	r2,zero,4190 <___vfprintf_internal_r+0xed0>
    3ca8:	d9402b17 	ldw	r5,172(sp)
    3cac:	d8801f17 	ldw	r2,124(sp)
    3cb0:	44000015 	stw	r16,0(r8)
    3cb4:	1947883a 	add	r3,r3,r5
    3cb8:	10800044 	addi	r2,r2,1
    3cbc:	41400115 	stw	r5,4(r8)
    3cc0:	d8c02015 	stw	r3,128(sp)
    3cc4:	d8801f15 	stw	r2,124(sp)
    3cc8:	010001c4 	movi	r4,7
    3ccc:	2081f516 	blt	r4,r2,44a4 <___vfprintf_internal_r+0x11e4>
    3cd0:	42000204 	addi	r8,r8,8
    3cd4:	9480010c 	andi	r18,r18,4
    3cd8:	90003226 	beq	r18,zero,3da4 <___vfprintf_internal_r+0xae4>
    3cdc:	d9403117 	ldw	r5,196(sp)
    3ce0:	d8802917 	ldw	r2,164(sp)
    3ce4:	28a1c83a 	sub	r16,r5,r2
    3ce8:	04002e0e 	bge	zero,r16,3da4 <___vfprintf_internal_r+0xae4>
    3cec:	04400404 	movi	r17,16
    3cf0:	d8801f17 	ldw	r2,124(sp)
    3cf4:	8c04c40e 	bge	r17,r16,5008 <___vfprintf_internal_r+0x1d48>
    3cf8:	01400074 	movhi	r5,1
    3cfc:	294a8a84 	addi	r5,r5,10794
    3d00:	d9403515 	stw	r5,212(sp)
    3d04:	048001c4 	movi	r18,7
    3d08:	dcc02d17 	ldw	r19,180(sp)
    3d0c:	00000306 	br	3d1c <___vfprintf_internal_r+0xa5c>
    3d10:	843ffc04 	addi	r16,r16,-16
    3d14:	42000204 	addi	r8,r8,8
    3d18:	8c00130e 	bge	r17,r16,3d68 <___vfprintf_internal_r+0xaa8>
    3d1c:	01000074 	movhi	r4,1
    3d20:	18c00404 	addi	r3,r3,16
    3d24:	10800044 	addi	r2,r2,1
    3d28:	210a8a84 	addi	r4,r4,10794
    3d2c:	41000015 	stw	r4,0(r8)
    3d30:	44400115 	stw	r17,4(r8)
    3d34:	d8c02015 	stw	r3,128(sp)
    3d38:	d8801f15 	stw	r2,124(sp)
    3d3c:	90bff40e 	bge	r18,r2,3d10 <__alt_exception_stack_pointer+0xf8003d10>
    3d40:	d9801e04 	addi	r6,sp,120
    3d44:	b80b883a 	mov	r5,r23
    3d48:	9809883a 	mov	r4,r19
    3d4c:	000a2400 	call	a240 <__sprint_r>
    3d50:	103e5f1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    3d54:	843ffc04 	addi	r16,r16,-16
    3d58:	d8c02017 	ldw	r3,128(sp)
    3d5c:	d8801f17 	ldw	r2,124(sp)
    3d60:	da000404 	addi	r8,sp,16
    3d64:	8c3fed16 	blt	r17,r16,3d1c <__alt_exception_stack_pointer+0xf8003d1c>
    3d68:	d9403517 	ldw	r5,212(sp)
    3d6c:	1c07883a 	add	r3,r3,r16
    3d70:	10800044 	addi	r2,r2,1
    3d74:	41400015 	stw	r5,0(r8)
    3d78:	44000115 	stw	r16,4(r8)
    3d7c:	d8c02015 	stw	r3,128(sp)
    3d80:	d8801f15 	stw	r2,124(sp)
    3d84:	010001c4 	movi	r4,7
    3d88:	2080060e 	bge	r4,r2,3da4 <___vfprintf_internal_r+0xae4>
    3d8c:	d9002d17 	ldw	r4,180(sp)
    3d90:	d9801e04 	addi	r6,sp,120
    3d94:	b80b883a 	mov	r5,r23
    3d98:	000a2400 	call	a240 <__sprint_r>
    3d9c:	103e4c1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    3da0:	d8c02017 	ldw	r3,128(sp)
    3da4:	d8803117 	ldw	r2,196(sp)
    3da8:	d9002917 	ldw	r4,164(sp)
    3dac:	1100010e 	bge	r2,r4,3db4 <___vfprintf_internal_r+0xaf4>
    3db0:	2005883a 	mov	r2,r4
    3db4:	d9402f17 	ldw	r5,188(sp)
    3db8:	288b883a 	add	r5,r5,r2
    3dbc:	d9402f15 	stw	r5,188(sp)
    3dc0:	1801c01e 	bne	r3,zero,44c4 <___vfprintf_internal_r+0x1204>
    3dc4:	a8800007 	ldb	r2,0(r21)
    3dc8:	d8001f15 	stw	zero,124(sp)
    3dcc:	da000404 	addi	r8,sp,16
    3dd0:	103d751e 	bne	r2,zero,33a8 <__alt_exception_stack_pointer+0xf80033a8>
    3dd4:	a823883a 	mov	r17,r21
    3dd8:	003d8b06 	br	3408 <__alt_exception_stack_pointer+0xf8003408>
    3ddc:	8025883a 	mov	r18,r16
    3de0:	dc002903 	ldbu	r16,164(sp)
    3de4:	e011883a 	mov	r8,fp
    3de8:	84003fcc 	andi	r16,r16,255
    3dec:	8005e51e 	bne	r16,zero,5584 <___vfprintf_internal_r+0x22c4>
    3df0:	94800414 	ori	r18,r18,16
    3df4:	9080080c 	andi	r2,r18,32
    3df8:	10022b26 	beq	r2,zero,46a8 <___vfprintf_internal_r+0x13e8>
    3dfc:	d9002e17 	ldw	r4,184(sp)
    3e00:	d9402a17 	ldw	r5,168(sp)
    3e04:	d8002785 	stb	zero,158(sp)
    3e08:	20c00204 	addi	r3,r4,8
    3e0c:	24c00017 	ldw	r19,0(r4)
    3e10:	25800117 	ldw	r22,4(r4)
    3e14:	28042e16 	blt	r5,zero,4ed0 <___vfprintf_internal_r+0x1c10>
    3e18:	013fdfc4 	movi	r4,-129
    3e1c:	9d84b03a 	or	r2,r19,r22
    3e20:	d8c02e15 	stw	r3,184(sp)
    3e24:	9124703a 	and	r18,r18,r4
    3e28:	0039883a 	mov	fp,zero
    3e2c:	103e801e 	bne	r2,zero,3830 <__alt_exception_stack_pointer+0xf8003830>
    3e30:	d9002a17 	ldw	r4,168(sp)
    3e34:	2002e01e 	bne	r4,zero,49b8 <___vfprintf_internal_r+0x16f8>
    3e38:	d8002a15 	stw	zero,168(sp)
    3e3c:	d8002b15 	stw	zero,172(sp)
    3e40:	dc001e04 	addi	r16,sp,120
    3e44:	003ef506 	br	3a1c <__alt_exception_stack_pointer+0xf8003a1c>
    3e48:	8025883a 	mov	r18,r16
    3e4c:	dc002903 	ldbu	r16,164(sp)
    3e50:	e011883a 	mov	r8,fp
    3e54:	84003fcc 	andi	r16,r16,255
    3e58:	8005ba1e 	bne	r16,zero,5544 <___vfprintf_internal_r+0x2284>
    3e5c:	01000074 	movhi	r4,1
    3e60:	210a7a04 	addi	r4,r4,10728
    3e64:	d9003915 	stw	r4,228(sp)
    3e68:	9080080c 	andi	r2,r18,32
    3e6c:	10006126 	beq	r2,zero,3ff4 <___vfprintf_internal_r+0xd34>
    3e70:	d9402e17 	ldw	r5,184(sp)
    3e74:	2cc00017 	ldw	r19,0(r5)
    3e78:	2d800117 	ldw	r22,4(r5)
    3e7c:	29400204 	addi	r5,r5,8
    3e80:	d9402e15 	stw	r5,184(sp)
    3e84:	9080004c 	andi	r2,r18,1
    3e88:	1001ac26 	beq	r2,zero,453c <___vfprintf_internal_r+0x127c>
    3e8c:	9d84b03a 	or	r2,r19,r22
    3e90:	10038526 	beq	r2,zero,4ca8 <___vfprintf_internal_r+0x19e8>
    3e94:	d8c02a17 	ldw	r3,168(sp)
    3e98:	00800c04 	movi	r2,48
    3e9c:	d8802705 	stb	r2,156(sp)
    3ea0:	dc402745 	stb	r17,157(sp)
    3ea4:	d8002785 	stb	zero,158(sp)
    3ea8:	90800094 	ori	r2,r18,2
    3eac:	18047916 	blt	r3,zero,5094 <___vfprintf_internal_r+0x1dd4>
    3eb0:	00bfdfc4 	movi	r2,-129
    3eb4:	90a4703a 	and	r18,r18,r2
    3eb8:	94800094 	ori	r18,r18,2
    3ebc:	0039883a 	mov	fp,zero
    3ec0:	d9003917 	ldw	r4,228(sp)
    3ec4:	dc001e04 	addi	r16,sp,120
    3ec8:	988003cc 	andi	r2,r19,15
    3ecc:	b006973a 	slli	r3,r22,28
    3ed0:	2085883a 	add	r2,r4,r2
    3ed4:	9826d13a 	srli	r19,r19,4
    3ed8:	10800003 	ldbu	r2,0(r2)
    3edc:	b02cd13a 	srli	r22,r22,4
    3ee0:	843fffc4 	addi	r16,r16,-1
    3ee4:	1ce6b03a 	or	r19,r3,r19
    3ee8:	80800005 	stb	r2,0(r16)
    3eec:	9d84b03a 	or	r2,r19,r22
    3ef0:	103ff51e 	bne	r2,zero,3ec8 <__alt_exception_stack_pointer+0xf8003ec8>
    3ef4:	d8c02817 	ldw	r3,160(sp)
    3ef8:	1c07c83a 	sub	r3,r3,r16
    3efc:	d8c02b15 	stw	r3,172(sp)
    3f00:	003ec606 	br	3a1c <__alt_exception_stack_pointer+0xf8003a1c>
    3f04:	8025883a 	mov	r18,r16
    3f08:	dc002903 	ldbu	r16,164(sp)
    3f0c:	e011883a 	mov	r8,fp
    3f10:	84003fcc 	andi	r16,r16,255
    3f14:	803e9626 	beq	r16,zero,3970 <__alt_exception_stack_pointer+0xf8003970>
    3f18:	d8c02b03 	ldbu	r3,172(sp)
    3f1c:	d8c02785 	stb	r3,158(sp)
    3f20:	003e9306 	br	3970 <__alt_exception_stack_pointer+0xf8003970>
    3f24:	00c00044 	movi	r3,1
    3f28:	d8c02905 	stb	r3,164(sp)
    3f2c:	00c00ac4 	movi	r3,43
    3f30:	d8c02b05 	stb	r3,172(sp)
    3f34:	ac400007 	ldb	r17,0(r21)
    3f38:	003d4306 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    3f3c:	84000814 	ori	r16,r16,32
    3f40:	ac400007 	ldb	r17,0(r21)
    3f44:	003d4006 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    3f48:	d8802e17 	ldw	r2,184(sp)
    3f4c:	8025883a 	mov	r18,r16
    3f50:	d8002785 	stb	zero,158(sp)
    3f54:	14000017 	ldw	r16,0(r2)
    3f58:	e011883a 	mov	r8,fp
    3f5c:	14c00104 	addi	r19,r2,4
    3f60:	80042d26 	beq	r16,zero,5018 <___vfprintf_internal_r+0x1d58>
    3f64:	d8c02a17 	ldw	r3,168(sp)
    3f68:	1803e416 	blt	r3,zero,4efc <___vfprintf_internal_r+0x1c3c>
    3f6c:	180d883a 	mov	r6,r3
    3f70:	000b883a 	mov	r5,zero
    3f74:	8009883a 	mov	r4,r16
    3f78:	df003d15 	stw	fp,244(sp)
    3f7c:	00083ec0 	call	83ec <memchr>
    3f80:	da003d17 	ldw	r8,244(sp)
    3f84:	10046826 	beq	r2,zero,5128 <___vfprintf_internal_r+0x1e68>
    3f88:	1405c83a 	sub	r2,r2,r16
    3f8c:	d8802b15 	stw	r2,172(sp)
    3f90:	1003e016 	blt	r2,zero,4f14 <___vfprintf_internal_r+0x1c54>
    3f94:	df002783 	ldbu	fp,158(sp)
    3f98:	d8802915 	stw	r2,164(sp)
    3f9c:	dcc02e15 	stw	r19,184(sp)
    3fa0:	d8002a15 	stw	zero,168(sp)
    3fa4:	d8003215 	stw	zero,200(sp)
    3fa8:	003ea206 	br	3a34 <__alt_exception_stack_pointer+0xf8003a34>
    3fac:	8025883a 	mov	r18,r16
    3fb0:	dc002903 	ldbu	r16,164(sp)
    3fb4:	e011883a 	mov	r8,fp
    3fb8:	84003fcc 	andi	r16,r16,255
    3fbc:	803f8d26 	beq	r16,zero,3df4 <__alt_exception_stack_pointer+0xf8003df4>
    3fc0:	d8c02b03 	ldbu	r3,172(sp)
    3fc4:	d8c02785 	stb	r3,158(sp)
    3fc8:	003f8a06 	br	3df4 <__alt_exception_stack_pointer+0xf8003df4>
    3fcc:	8025883a 	mov	r18,r16
    3fd0:	dc002903 	ldbu	r16,164(sp)
    3fd4:	e011883a 	mov	r8,fp
    3fd8:	84003fcc 	andi	r16,r16,255
    3fdc:	8005661e 	bne	r16,zero,5578 <___vfprintf_internal_r+0x22b8>
    3fe0:	01000074 	movhi	r4,1
    3fe4:	210a7f04 	addi	r4,r4,10748
    3fe8:	d9003915 	stw	r4,228(sp)
    3fec:	9080080c 	andi	r2,r18,32
    3ff0:	103f9f1e 	bne	r2,zero,3e70 <__alt_exception_stack_pointer+0xf8003e70>
    3ff4:	9080040c 	andi	r2,r18,16
    3ff8:	1002eb26 	beq	r2,zero,4ba8 <___vfprintf_internal_r+0x18e8>
    3ffc:	d8802e17 	ldw	r2,184(sp)
    4000:	002d883a 	mov	r22,zero
    4004:	14c00017 	ldw	r19,0(r2)
    4008:	10800104 	addi	r2,r2,4
    400c:	d8802e15 	stw	r2,184(sp)
    4010:	003f9c06 	br	3e84 <__alt_exception_stack_pointer+0xf8003e84>
    4014:	d8802b07 	ldb	r2,172(sp)
    4018:	1002e11e 	bne	r2,zero,4ba0 <___vfprintf_internal_r+0x18e0>
    401c:	00c00044 	movi	r3,1
    4020:	d8c02905 	stb	r3,164(sp)
    4024:	00c00804 	movi	r3,32
    4028:	d8c02b05 	stb	r3,172(sp)
    402c:	ac400007 	ldb	r17,0(r21)
    4030:	003d0506 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    4034:	84000054 	ori	r16,r16,1
    4038:	ac400007 	ldb	r17,0(r21)
    403c:	003d0206 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    4040:	8025883a 	mov	r18,r16
    4044:	dc002903 	ldbu	r16,164(sp)
    4048:	e011883a 	mov	r8,fp
    404c:	84003fcc 	andi	r16,r16,255
    4050:	803de726 	beq	r16,zero,37f0 <__alt_exception_stack_pointer+0xf80037f0>
    4054:	d8c02b03 	ldbu	r3,172(sp)
    4058:	d8c02785 	stb	r3,158(sp)
    405c:	003de406 	br	37f0 <__alt_exception_stack_pointer+0xf80037f0>
    4060:	84001014 	ori	r16,r16,64
    4064:	ac400007 	ldb	r17,0(r21)
    4068:	003cf706 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    406c:	ac400007 	ldb	r17,0(r21)
    4070:	00801b04 	movi	r2,108
    4074:	88838f26 	beq	r17,r2,4eb4 <___vfprintf_internal_r+0x1bf4>
    4078:	84000414 	ori	r16,r16,16
    407c:	003cf206 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    4080:	8025883a 	mov	r18,r16
    4084:	dc002903 	ldbu	r16,164(sp)
    4088:	e011883a 	mov	r8,fp
    408c:	84003fcc 	andi	r16,r16,255
    4090:	80053f1e 	bne	r16,zero,5590 <___vfprintf_internal_r+0x22d0>
    4094:	9080080c 	andi	r2,r18,32
    4098:	1002d226 	beq	r2,zero,4be4 <___vfprintf_internal_r+0x1924>
    409c:	d9002e17 	ldw	r4,184(sp)
    40a0:	d9402f17 	ldw	r5,188(sp)
    40a4:	20800017 	ldw	r2,0(r4)
    40a8:	2807d7fa 	srai	r3,r5,31
    40ac:	21000104 	addi	r4,r4,4
    40b0:	d9002e15 	stw	r4,184(sp)
    40b4:	11400015 	stw	r5,0(r2)
    40b8:	10c00115 	stw	r3,4(r2)
    40bc:	003cb806 	br	33a0 <__alt_exception_stack_pointer+0xf80033a0>
    40c0:	d8c02e17 	ldw	r3,184(sp)
    40c4:	d9002e17 	ldw	r4,184(sp)
    40c8:	8025883a 	mov	r18,r16
    40cc:	18800017 	ldw	r2,0(r3)
    40d0:	21000104 	addi	r4,r4,4
    40d4:	00c00044 	movi	r3,1
    40d8:	e011883a 	mov	r8,fp
    40dc:	d8c02915 	stw	r3,164(sp)
    40e0:	d8002785 	stb	zero,158(sp)
    40e4:	d8801405 	stb	r2,80(sp)
    40e8:	d9002e15 	stw	r4,184(sp)
    40ec:	d8c02b15 	stw	r3,172(sp)
    40f0:	d8002a15 	stw	zero,168(sp)
    40f4:	d8003215 	stw	zero,200(sp)
    40f8:	dc001404 	addi	r16,sp,80
    40fc:	0039883a 	mov	fp,zero
    4100:	003e5306 	br	3a50 <__alt_exception_stack_pointer+0xf8003a50>
    4104:	01000074 	movhi	r4,1
    4108:	210a7f04 	addi	r4,r4,10748
    410c:	0039883a 	mov	fp,zero
    4110:	d9003915 	stw	r4,228(sp)
    4114:	04401e04 	movi	r17,120
    4118:	003f6906 	br	3ec0 <__alt_exception_stack_pointer+0xf8003ec0>
    411c:	8025883a 	mov	r18,r16
    4120:	dc002903 	ldbu	r16,164(sp)
    4124:	e011883a 	mov	r8,fp
    4128:	84003fcc 	andi	r16,r16,255
    412c:	8005081e 	bne	r16,zero,5550 <___vfprintf_internal_r+0x2290>
    4130:	883d6126 	beq	r17,zero,36b8 <__alt_exception_stack_pointer+0xf80036b8>
    4134:	00c00044 	movi	r3,1
    4138:	d8c02915 	stw	r3,164(sp)
    413c:	dc401405 	stb	r17,80(sp)
    4140:	d8002785 	stb	zero,158(sp)
    4144:	003fe906 	br	40ec <__alt_exception_stack_pointer+0xf80040ec>
    4148:	01400074 	movhi	r5,1
    414c:	294a7f04 	addi	r5,r5,10748
    4150:	d9403915 	stw	r5,228(sp)
    4154:	d8c02e15 	stw	r3,184(sp)
    4158:	1025883a 	mov	r18,r2
    415c:	04401e04 	movi	r17,120
    4160:	9d84b03a 	or	r2,r19,r22
    4164:	1000fc1e 	bne	r2,zero,4558 <___vfprintf_internal_r+0x1298>
    4168:	0039883a 	mov	fp,zero
    416c:	00800084 	movi	r2,2
    4170:	10803fcc 	andi	r2,r2,255
    4174:	00c00044 	movi	r3,1
    4178:	10c20f26 	beq	r2,r3,49b8 <___vfprintf_internal_r+0x16f8>
    417c:	00c00084 	movi	r3,2
    4180:	10fd3326 	beq	r2,r3,3650 <__alt_exception_stack_pointer+0xf8003650>
    4184:	003e0b06 	br	39b4 <__alt_exception_stack_pointer+0xf80039b4>
    4188:	d8c02017 	ldw	r3,128(sp)
    418c:	003e7106 	br	3b54 <__alt_exception_stack_pointer+0xf8003b54>
    4190:	00801944 	movi	r2,101
    4194:	14407e0e 	bge	r2,r17,4390 <___vfprintf_internal_r+0x10d0>
    4198:	d9003617 	ldw	r4,216(sp)
    419c:	d9403817 	ldw	r5,224(sp)
    41a0:	000d883a 	mov	r6,zero
    41a4:	000f883a 	mov	r7,zero
    41a8:	d8c03c15 	stw	r3,240(sp)
    41ac:	da003d15 	stw	r8,244(sp)
    41b0:	000e1a00 	call	e1a0 <__eqdf2>
    41b4:	d8c03c17 	ldw	r3,240(sp)
    41b8:	da003d17 	ldw	r8,244(sp)
    41bc:	1000f71e 	bne	r2,zero,459c <___vfprintf_internal_r+0x12dc>
    41c0:	d8801f17 	ldw	r2,124(sp)
    41c4:	01000074 	movhi	r4,1
    41c8:	210a8604 	addi	r4,r4,10776
    41cc:	18c00044 	addi	r3,r3,1
    41d0:	10800044 	addi	r2,r2,1
    41d4:	41000015 	stw	r4,0(r8)
    41d8:	01000044 	movi	r4,1
    41dc:	41000115 	stw	r4,4(r8)
    41e0:	d8c02015 	stw	r3,128(sp)
    41e4:	d8801f15 	stw	r2,124(sp)
    41e8:	010001c4 	movi	r4,7
    41ec:	2082b816 	blt	r4,r2,4cd0 <___vfprintf_internal_r+0x1a10>
    41f0:	42000204 	addi	r8,r8,8
    41f4:	d8802617 	ldw	r2,152(sp)
    41f8:	d9403317 	ldw	r5,204(sp)
    41fc:	11400216 	blt	r2,r5,4208 <___vfprintf_internal_r+0xf48>
    4200:	9080004c 	andi	r2,r18,1
    4204:	103eb326 	beq	r2,zero,3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    4208:	d8803717 	ldw	r2,220(sp)
    420c:	d9003417 	ldw	r4,208(sp)
    4210:	d9403717 	ldw	r5,220(sp)
    4214:	1887883a 	add	r3,r3,r2
    4218:	d8801f17 	ldw	r2,124(sp)
    421c:	41000015 	stw	r4,0(r8)
    4220:	41400115 	stw	r5,4(r8)
    4224:	10800044 	addi	r2,r2,1
    4228:	d8c02015 	stw	r3,128(sp)
    422c:	d8801f15 	stw	r2,124(sp)
    4230:	010001c4 	movi	r4,7
    4234:	20832916 	blt	r4,r2,4edc <___vfprintf_internal_r+0x1c1c>
    4238:	42000204 	addi	r8,r8,8
    423c:	d8803317 	ldw	r2,204(sp)
    4240:	143fffc4 	addi	r16,r2,-1
    4244:	043ea30e 	bge	zero,r16,3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    4248:	04400404 	movi	r17,16
    424c:	d8801f17 	ldw	r2,124(sp)
    4250:	8c00880e 	bge	r17,r16,4474 <___vfprintf_internal_r+0x11b4>
    4254:	01400074 	movhi	r5,1
    4258:	294a8684 	addi	r5,r5,10778
    425c:	d9402c15 	stw	r5,176(sp)
    4260:	058001c4 	movi	r22,7
    4264:	dcc02d17 	ldw	r19,180(sp)
    4268:	00000306 	br	4278 <___vfprintf_internal_r+0xfb8>
    426c:	42000204 	addi	r8,r8,8
    4270:	843ffc04 	addi	r16,r16,-16
    4274:	8c00820e 	bge	r17,r16,4480 <___vfprintf_internal_r+0x11c0>
    4278:	18c00404 	addi	r3,r3,16
    427c:	10800044 	addi	r2,r2,1
    4280:	45000015 	stw	r20,0(r8)
    4284:	44400115 	stw	r17,4(r8)
    4288:	d8c02015 	stw	r3,128(sp)
    428c:	d8801f15 	stw	r2,124(sp)
    4290:	b0bff60e 	bge	r22,r2,426c <__alt_exception_stack_pointer+0xf800426c>
    4294:	d9801e04 	addi	r6,sp,120
    4298:	b80b883a 	mov	r5,r23
    429c:	9809883a 	mov	r4,r19
    42a0:	000a2400 	call	a240 <__sprint_r>
    42a4:	103d0a1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    42a8:	d8c02017 	ldw	r3,128(sp)
    42ac:	d8801f17 	ldw	r2,124(sp)
    42b0:	da000404 	addi	r8,sp,16
    42b4:	003fee06 	br	4270 <__alt_exception_stack_pointer+0xf8004270>
    42b8:	d9403117 	ldw	r5,196(sp)
    42bc:	d8802917 	ldw	r2,164(sp)
    42c0:	28adc83a 	sub	r22,r5,r2
    42c4:	05be410e 	bge	zero,r22,3bcc <__alt_exception_stack_pointer+0xf8003bcc>
    42c8:	07000404 	movi	fp,16
    42cc:	d8801f17 	ldw	r2,124(sp)
    42d0:	e5838f0e 	bge	fp,r22,5110 <___vfprintf_internal_r+0x1e50>
    42d4:	01400074 	movhi	r5,1
    42d8:	294a8684 	addi	r5,r5,10778
    42dc:	dc403015 	stw	r17,192(sp)
    42e0:	d9402c15 	stw	r5,176(sp)
    42e4:	b023883a 	mov	r17,r22
    42e8:	04c001c4 	movi	r19,7
    42ec:	a82d883a 	mov	r22,r21
    42f0:	902b883a 	mov	r21,r18
    42f4:	8025883a 	mov	r18,r16
    42f8:	dc002d17 	ldw	r16,180(sp)
    42fc:	00000306 	br	430c <___vfprintf_internal_r+0x104c>
    4300:	8c7ffc04 	addi	r17,r17,-16
    4304:	42000204 	addi	r8,r8,8
    4308:	e440110e 	bge	fp,r17,4350 <___vfprintf_internal_r+0x1090>
    430c:	18c00404 	addi	r3,r3,16
    4310:	10800044 	addi	r2,r2,1
    4314:	45000015 	stw	r20,0(r8)
    4318:	47000115 	stw	fp,4(r8)
    431c:	d8c02015 	stw	r3,128(sp)
    4320:	d8801f15 	stw	r2,124(sp)
    4324:	98bff60e 	bge	r19,r2,4300 <__alt_exception_stack_pointer+0xf8004300>
    4328:	d9801e04 	addi	r6,sp,120
    432c:	b80b883a 	mov	r5,r23
    4330:	8009883a 	mov	r4,r16
    4334:	000a2400 	call	a240 <__sprint_r>
    4338:	103ce51e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    433c:	8c7ffc04 	addi	r17,r17,-16
    4340:	d8c02017 	ldw	r3,128(sp)
    4344:	d8801f17 	ldw	r2,124(sp)
    4348:	da000404 	addi	r8,sp,16
    434c:	e47fef16 	blt	fp,r17,430c <__alt_exception_stack_pointer+0xf800430c>
    4350:	9021883a 	mov	r16,r18
    4354:	a825883a 	mov	r18,r21
    4358:	b02b883a 	mov	r21,r22
    435c:	882d883a 	mov	r22,r17
    4360:	dc403017 	ldw	r17,192(sp)
    4364:	d9002c17 	ldw	r4,176(sp)
    4368:	1d87883a 	add	r3,r3,r22
    436c:	10800044 	addi	r2,r2,1
    4370:	41000015 	stw	r4,0(r8)
    4374:	45800115 	stw	r22,4(r8)
    4378:	d8c02015 	stw	r3,128(sp)
    437c:	d8801f15 	stw	r2,124(sp)
    4380:	010001c4 	movi	r4,7
    4384:	20818e16 	blt	r4,r2,49c0 <___vfprintf_internal_r+0x1700>
    4388:	42000204 	addi	r8,r8,8
    438c:	003e0f06 	br	3bcc <__alt_exception_stack_pointer+0xf8003bcc>
    4390:	d9403317 	ldw	r5,204(sp)
    4394:	00800044 	movi	r2,1
    4398:	18c00044 	addi	r3,r3,1
    439c:	1141530e 	bge	r2,r5,48ec <___vfprintf_internal_r+0x162c>
    43a0:	dc401f17 	ldw	r17,124(sp)
    43a4:	00800044 	movi	r2,1
    43a8:	40800115 	stw	r2,4(r8)
    43ac:	8c400044 	addi	r17,r17,1
    43b0:	44000015 	stw	r16,0(r8)
    43b4:	d8c02015 	stw	r3,128(sp)
    43b8:	dc401f15 	stw	r17,124(sp)
    43bc:	008001c4 	movi	r2,7
    43c0:	14416b16 	blt	r2,r17,4970 <___vfprintf_internal_r+0x16b0>
    43c4:	42000204 	addi	r8,r8,8
    43c8:	d8803717 	ldw	r2,220(sp)
    43cc:	d9003417 	ldw	r4,208(sp)
    43d0:	8c400044 	addi	r17,r17,1
    43d4:	10c7883a 	add	r3,r2,r3
    43d8:	40800115 	stw	r2,4(r8)
    43dc:	41000015 	stw	r4,0(r8)
    43e0:	d8c02015 	stw	r3,128(sp)
    43e4:	dc401f15 	stw	r17,124(sp)
    43e8:	008001c4 	movi	r2,7
    43ec:	14416916 	blt	r2,r17,4994 <___vfprintf_internal_r+0x16d4>
    43f0:	45800204 	addi	r22,r8,8
    43f4:	d9003617 	ldw	r4,216(sp)
    43f8:	d9403817 	ldw	r5,224(sp)
    43fc:	000d883a 	mov	r6,zero
    4400:	000f883a 	mov	r7,zero
    4404:	d8c03c15 	stw	r3,240(sp)
    4408:	000e1a00 	call	e1a0 <__eqdf2>
    440c:	d8c03c17 	ldw	r3,240(sp)
    4410:	1000bc26 	beq	r2,zero,4704 <___vfprintf_internal_r+0x1444>
    4414:	d9403317 	ldw	r5,204(sp)
    4418:	84000044 	addi	r16,r16,1
    441c:	8c400044 	addi	r17,r17,1
    4420:	28bfffc4 	addi	r2,r5,-1
    4424:	1887883a 	add	r3,r3,r2
    4428:	b0800115 	stw	r2,4(r22)
    442c:	b4000015 	stw	r16,0(r22)
    4430:	d8c02015 	stw	r3,128(sp)
    4434:	dc401f15 	stw	r17,124(sp)
    4438:	008001c4 	movi	r2,7
    443c:	14414316 	blt	r2,r17,494c <___vfprintf_internal_r+0x168c>
    4440:	b5800204 	addi	r22,r22,8
    4444:	d9003a17 	ldw	r4,232(sp)
    4448:	df0022c4 	addi	fp,sp,139
    444c:	8c400044 	addi	r17,r17,1
    4450:	20c7883a 	add	r3,r4,r3
    4454:	b7000015 	stw	fp,0(r22)
    4458:	b1000115 	stw	r4,4(r22)
    445c:	d8c02015 	stw	r3,128(sp)
    4460:	dc401f15 	stw	r17,124(sp)
    4464:	008001c4 	movi	r2,7
    4468:	14400e16 	blt	r2,r17,44a4 <___vfprintf_internal_r+0x11e4>
    446c:	b2000204 	addi	r8,r22,8
    4470:	003e1806 	br	3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    4474:	01000074 	movhi	r4,1
    4478:	210a8684 	addi	r4,r4,10778
    447c:	d9002c15 	stw	r4,176(sp)
    4480:	d9002c17 	ldw	r4,176(sp)
    4484:	1c07883a 	add	r3,r3,r16
    4488:	44000115 	stw	r16,4(r8)
    448c:	41000015 	stw	r4,0(r8)
    4490:	10800044 	addi	r2,r2,1
    4494:	d8c02015 	stw	r3,128(sp)
    4498:	d8801f15 	stw	r2,124(sp)
    449c:	010001c4 	movi	r4,7
    44a0:	20be0b0e 	bge	r4,r2,3cd0 <__alt_exception_stack_pointer+0xf8003cd0>
    44a4:	d9002d17 	ldw	r4,180(sp)
    44a8:	d9801e04 	addi	r6,sp,120
    44ac:	b80b883a 	mov	r5,r23
    44b0:	000a2400 	call	a240 <__sprint_r>
    44b4:	103c861e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    44b8:	d8c02017 	ldw	r3,128(sp)
    44bc:	da000404 	addi	r8,sp,16
    44c0:	003e0406 	br	3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    44c4:	d9002d17 	ldw	r4,180(sp)
    44c8:	d9801e04 	addi	r6,sp,120
    44cc:	b80b883a 	mov	r5,r23
    44d0:	000a2400 	call	a240 <__sprint_r>
    44d4:	103e3b26 	beq	r2,zero,3dc4 <__alt_exception_stack_pointer+0xf8003dc4>
    44d8:	003c7d06 	br	36d0 <__alt_exception_stack_pointer+0xf80036d0>
    44dc:	d9002d17 	ldw	r4,180(sp)
    44e0:	d9801e04 	addi	r6,sp,120
    44e4:	b80b883a 	mov	r5,r23
    44e8:	000a2400 	call	a240 <__sprint_r>
    44ec:	103c781e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    44f0:	d8c02017 	ldw	r3,128(sp)
    44f4:	da000404 	addi	r8,sp,16
    44f8:	003de906 	br	3ca0 <__alt_exception_stack_pointer+0xf8003ca0>
    44fc:	d9002d17 	ldw	r4,180(sp)
    4500:	d9801e04 	addi	r6,sp,120
    4504:	b80b883a 	mov	r5,r23
    4508:	000a2400 	call	a240 <__sprint_r>
    450c:	103c701e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4510:	d8c02017 	ldw	r3,128(sp)
    4514:	da000404 	addi	r8,sp,16
    4518:	003d9b06 	br	3b88 <__alt_exception_stack_pointer+0xf8003b88>
    451c:	d9002d17 	ldw	r4,180(sp)
    4520:	d9801e04 	addi	r6,sp,120
    4524:	b80b883a 	mov	r5,r23
    4528:	000a2400 	call	a240 <__sprint_r>
    452c:	103c681e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4530:	d8c02017 	ldw	r3,128(sp)
    4534:	da000404 	addi	r8,sp,16
    4538:	003da106 	br	3bc0 <__alt_exception_stack_pointer+0xf8003bc0>
    453c:	d9402a17 	ldw	r5,168(sp)
    4540:	d8002785 	stb	zero,158(sp)
    4544:	283f0616 	blt	r5,zero,4160 <__alt_exception_stack_pointer+0xf8004160>
    4548:	00ffdfc4 	movi	r3,-129
    454c:	9d84b03a 	or	r2,r19,r22
    4550:	90e4703a 	and	r18,r18,r3
    4554:	103c3b26 	beq	r2,zero,3644 <__alt_exception_stack_pointer+0xf8003644>
    4558:	0039883a 	mov	fp,zero
    455c:	003e5806 	br	3ec0 <__alt_exception_stack_pointer+0xf8003ec0>
    4560:	9080040c 	andi	r2,r18,16
    4564:	1001b326 	beq	r2,zero,4c34 <___vfprintf_internal_r+0x1974>
    4568:	d8c02e17 	ldw	r3,184(sp)
    456c:	d9002a17 	ldw	r4,168(sp)
    4570:	d8002785 	stb	zero,158(sp)
    4574:	18800104 	addi	r2,r3,4
    4578:	1cc00017 	ldw	r19,0(r3)
    457c:	002d883a 	mov	r22,zero
    4580:	2001b516 	blt	r4,zero,4c58 <___vfprintf_internal_r+0x1998>
    4584:	00ffdfc4 	movi	r3,-129
    4588:	d8802e15 	stw	r2,184(sp)
    458c:	90e4703a 	and	r18,r18,r3
    4590:	983d0526 	beq	r19,zero,39a8 <__alt_exception_stack_pointer+0xf80039a8>
    4594:	0039883a 	mov	fp,zero
    4598:	003d0806 	br	39bc <__alt_exception_stack_pointer+0xf80039bc>
    459c:	dc402617 	ldw	r17,152(sp)
    45a0:	0441d30e 	bge	zero,r17,4cf0 <___vfprintf_internal_r+0x1a30>
    45a4:	dc403217 	ldw	r17,200(sp)
    45a8:	d8803317 	ldw	r2,204(sp)
    45ac:	1440010e 	bge	r2,r17,45b4 <___vfprintf_internal_r+0x12f4>
    45b0:	1023883a 	mov	r17,r2
    45b4:	04400a0e 	bge	zero,r17,45e0 <___vfprintf_internal_r+0x1320>
    45b8:	d8801f17 	ldw	r2,124(sp)
    45bc:	1c47883a 	add	r3,r3,r17
    45c0:	44000015 	stw	r16,0(r8)
    45c4:	10800044 	addi	r2,r2,1
    45c8:	44400115 	stw	r17,4(r8)
    45cc:	d8c02015 	stw	r3,128(sp)
    45d0:	d8801f15 	stw	r2,124(sp)
    45d4:	010001c4 	movi	r4,7
    45d8:	20826516 	blt	r4,r2,4f70 <___vfprintf_internal_r+0x1cb0>
    45dc:	42000204 	addi	r8,r8,8
    45e0:	88026116 	blt	r17,zero,4f68 <___vfprintf_internal_r+0x1ca8>
    45e4:	d9003217 	ldw	r4,200(sp)
    45e8:	2463c83a 	sub	r17,r4,r17
    45ec:	04407b0e 	bge	zero,r17,47dc <___vfprintf_internal_r+0x151c>
    45f0:	05800404 	movi	r22,16
    45f4:	d8801f17 	ldw	r2,124(sp)
    45f8:	b4419d0e 	bge	r22,r17,4c70 <___vfprintf_internal_r+0x19b0>
    45fc:	01000074 	movhi	r4,1
    4600:	210a8684 	addi	r4,r4,10778
    4604:	d9002c15 	stw	r4,176(sp)
    4608:	070001c4 	movi	fp,7
    460c:	dcc02d17 	ldw	r19,180(sp)
    4610:	00000306 	br	4620 <___vfprintf_internal_r+0x1360>
    4614:	42000204 	addi	r8,r8,8
    4618:	8c7ffc04 	addi	r17,r17,-16
    461c:	b441970e 	bge	r22,r17,4c7c <___vfprintf_internal_r+0x19bc>
    4620:	18c00404 	addi	r3,r3,16
    4624:	10800044 	addi	r2,r2,1
    4628:	45000015 	stw	r20,0(r8)
    462c:	45800115 	stw	r22,4(r8)
    4630:	d8c02015 	stw	r3,128(sp)
    4634:	d8801f15 	stw	r2,124(sp)
    4638:	e0bff60e 	bge	fp,r2,4614 <__alt_exception_stack_pointer+0xf8004614>
    463c:	d9801e04 	addi	r6,sp,120
    4640:	b80b883a 	mov	r5,r23
    4644:	9809883a 	mov	r4,r19
    4648:	000a2400 	call	a240 <__sprint_r>
    464c:	103c201e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4650:	d8c02017 	ldw	r3,128(sp)
    4654:	d8801f17 	ldw	r2,124(sp)
    4658:	da000404 	addi	r8,sp,16
    465c:	003fee06 	br	4618 <__alt_exception_stack_pointer+0xf8004618>
    4660:	d9002d17 	ldw	r4,180(sp)
    4664:	d9801e04 	addi	r6,sp,120
    4668:	b80b883a 	mov	r5,r23
    466c:	000a2400 	call	a240 <__sprint_r>
    4670:	103c171e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4674:	d8c02017 	ldw	r3,128(sp)
    4678:	df002787 	ldb	fp,158(sp)
    467c:	da000404 	addi	r8,sp,16
    4680:	003d3406 	br	3b54 <__alt_exception_stack_pointer+0xf8003b54>
    4684:	9080040c 	andi	r2,r18,16
    4688:	10016126 	beq	r2,zero,4c10 <___vfprintf_internal_r+0x1950>
    468c:	d9402e17 	ldw	r5,184(sp)
    4690:	2cc00017 	ldw	r19,0(r5)
    4694:	29400104 	addi	r5,r5,4
    4698:	d9402e15 	stw	r5,184(sp)
    469c:	982dd7fa 	srai	r22,r19,31
    46a0:	b005883a 	mov	r2,r22
    46a4:	003c5a06 	br	3810 <__alt_exception_stack_pointer+0xf8003810>
    46a8:	9080040c 	andi	r2,r18,16
    46ac:	10003526 	beq	r2,zero,4784 <___vfprintf_internal_r+0x14c4>
    46b0:	d8c02e17 	ldw	r3,184(sp)
    46b4:	d9002a17 	ldw	r4,168(sp)
    46b8:	d8002785 	stb	zero,158(sp)
    46bc:	18800104 	addi	r2,r3,4
    46c0:	1cc00017 	ldw	r19,0(r3)
    46c4:	002d883a 	mov	r22,zero
    46c8:	20003716 	blt	r4,zero,47a8 <___vfprintf_internal_r+0x14e8>
    46cc:	00ffdfc4 	movi	r3,-129
    46d0:	d8802e15 	stw	r2,184(sp)
    46d4:	90e4703a 	and	r18,r18,r3
    46d8:	0039883a 	mov	fp,zero
    46dc:	983dd426 	beq	r19,zero,3e30 <__alt_exception_stack_pointer+0xf8003e30>
    46e0:	00800244 	movi	r2,9
    46e4:	14fc5336 	bltu	r2,r19,3834 <__alt_exception_stack_pointer+0xf8003834>
    46e8:	d8c02817 	ldw	r3,160(sp)
    46ec:	dc001dc4 	addi	r16,sp,119
    46f0:	9cc00c04 	addi	r19,r19,48
    46f4:	1c07c83a 	sub	r3,r3,r16
    46f8:	dcc01dc5 	stb	r19,119(sp)
    46fc:	d8c02b15 	stw	r3,172(sp)
    4700:	003cc606 	br	3a1c <__alt_exception_stack_pointer+0xf8003a1c>
    4704:	d8803317 	ldw	r2,204(sp)
    4708:	143fffc4 	addi	r16,r2,-1
    470c:	043f4d0e 	bge	zero,r16,4444 <__alt_exception_stack_pointer+0xf8004444>
    4710:	07000404 	movi	fp,16
    4714:	e400810e 	bge	fp,r16,491c <___vfprintf_internal_r+0x165c>
    4718:	01400074 	movhi	r5,1
    471c:	294a8684 	addi	r5,r5,10778
    4720:	d9402c15 	stw	r5,176(sp)
    4724:	01c001c4 	movi	r7,7
    4728:	dcc02d17 	ldw	r19,180(sp)
    472c:	00000306 	br	473c <___vfprintf_internal_r+0x147c>
    4730:	b5800204 	addi	r22,r22,8
    4734:	843ffc04 	addi	r16,r16,-16
    4738:	e4007b0e 	bge	fp,r16,4928 <___vfprintf_internal_r+0x1668>
    473c:	18c00404 	addi	r3,r3,16
    4740:	8c400044 	addi	r17,r17,1
    4744:	b5000015 	stw	r20,0(r22)
    4748:	b7000115 	stw	fp,4(r22)
    474c:	d8c02015 	stw	r3,128(sp)
    4750:	dc401f15 	stw	r17,124(sp)
    4754:	3c7ff60e 	bge	r7,r17,4730 <__alt_exception_stack_pointer+0xf8004730>
    4758:	d9801e04 	addi	r6,sp,120
    475c:	b80b883a 	mov	r5,r23
    4760:	9809883a 	mov	r4,r19
    4764:	d9c03c15 	stw	r7,240(sp)
    4768:	000a2400 	call	a240 <__sprint_r>
    476c:	d9c03c17 	ldw	r7,240(sp)
    4770:	103bd71e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4774:	d8c02017 	ldw	r3,128(sp)
    4778:	dc401f17 	ldw	r17,124(sp)
    477c:	dd800404 	addi	r22,sp,16
    4780:	003fec06 	br	4734 <__alt_exception_stack_pointer+0xf8004734>
    4784:	9080100c 	andi	r2,r18,64
    4788:	d8002785 	stb	zero,158(sp)
    478c:	10010e26 	beq	r2,zero,4bc8 <___vfprintf_internal_r+0x1908>
    4790:	d9402e17 	ldw	r5,184(sp)
    4794:	d8c02a17 	ldw	r3,168(sp)
    4798:	002d883a 	mov	r22,zero
    479c:	28800104 	addi	r2,r5,4
    47a0:	2cc0000b 	ldhu	r19,0(r5)
    47a4:	183fc90e 	bge	r3,zero,46cc <__alt_exception_stack_pointer+0xf80046cc>
    47a8:	d8802e15 	stw	r2,184(sp)
    47ac:	0039883a 	mov	fp,zero
    47b0:	9d84b03a 	or	r2,r19,r22
    47b4:	103c1e1e 	bne	r2,zero,3830 <__alt_exception_stack_pointer+0xf8003830>
    47b8:	00800044 	movi	r2,1
    47bc:	003e6c06 	br	4170 <__alt_exception_stack_pointer+0xf8004170>
    47c0:	d9002d17 	ldw	r4,180(sp)
    47c4:	d9801e04 	addi	r6,sp,120
    47c8:	b80b883a 	mov	r5,r23
    47cc:	000a2400 	call	a240 <__sprint_r>
    47d0:	103bbf1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    47d4:	d8c02017 	ldw	r3,128(sp)
    47d8:	da000404 	addi	r8,sp,16
    47dc:	d9003217 	ldw	r4,200(sp)
    47e0:	d8802617 	ldw	r2,152(sp)
    47e4:	d9403317 	ldw	r5,204(sp)
    47e8:	8123883a 	add	r17,r16,r4
    47ec:	11400216 	blt	r2,r5,47f8 <___vfprintf_internal_r+0x1538>
    47f0:	9100004c 	andi	r4,r18,1
    47f4:	20000d26 	beq	r4,zero,482c <___vfprintf_internal_r+0x156c>
    47f8:	d9003717 	ldw	r4,220(sp)
    47fc:	d9403417 	ldw	r5,208(sp)
    4800:	1907883a 	add	r3,r3,r4
    4804:	d9001f17 	ldw	r4,124(sp)
    4808:	41400015 	stw	r5,0(r8)
    480c:	d9403717 	ldw	r5,220(sp)
    4810:	21000044 	addi	r4,r4,1
    4814:	d8c02015 	stw	r3,128(sp)
    4818:	41400115 	stw	r5,4(r8)
    481c:	d9001f15 	stw	r4,124(sp)
    4820:	014001c4 	movi	r5,7
    4824:	2901e816 	blt	r5,r4,4fc8 <___vfprintf_internal_r+0x1d08>
    4828:	42000204 	addi	r8,r8,8
    482c:	d9003317 	ldw	r4,204(sp)
    4830:	8121883a 	add	r16,r16,r4
    4834:	2085c83a 	sub	r2,r4,r2
    4838:	8461c83a 	sub	r16,r16,r17
    483c:	1400010e 	bge	r2,r16,4844 <___vfprintf_internal_r+0x1584>
    4840:	1021883a 	mov	r16,r2
    4844:	04000a0e 	bge	zero,r16,4870 <___vfprintf_internal_r+0x15b0>
    4848:	d9001f17 	ldw	r4,124(sp)
    484c:	1c07883a 	add	r3,r3,r16
    4850:	44400015 	stw	r17,0(r8)
    4854:	21000044 	addi	r4,r4,1
    4858:	44000115 	stw	r16,4(r8)
    485c:	d8c02015 	stw	r3,128(sp)
    4860:	d9001f15 	stw	r4,124(sp)
    4864:	014001c4 	movi	r5,7
    4868:	2901fb16 	blt	r5,r4,5058 <___vfprintf_internal_r+0x1d98>
    486c:	42000204 	addi	r8,r8,8
    4870:	8001f716 	blt	r16,zero,5050 <___vfprintf_internal_r+0x1d90>
    4874:	1421c83a 	sub	r16,r2,r16
    4878:	043d160e 	bge	zero,r16,3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    487c:	04400404 	movi	r17,16
    4880:	d8801f17 	ldw	r2,124(sp)
    4884:	8c3efb0e 	bge	r17,r16,4474 <__alt_exception_stack_pointer+0xf8004474>
    4888:	01400074 	movhi	r5,1
    488c:	294a8684 	addi	r5,r5,10778
    4890:	d9402c15 	stw	r5,176(sp)
    4894:	058001c4 	movi	r22,7
    4898:	dcc02d17 	ldw	r19,180(sp)
    489c:	00000306 	br	48ac <___vfprintf_internal_r+0x15ec>
    48a0:	42000204 	addi	r8,r8,8
    48a4:	843ffc04 	addi	r16,r16,-16
    48a8:	8c3ef50e 	bge	r17,r16,4480 <__alt_exception_stack_pointer+0xf8004480>
    48ac:	18c00404 	addi	r3,r3,16
    48b0:	10800044 	addi	r2,r2,1
    48b4:	45000015 	stw	r20,0(r8)
    48b8:	44400115 	stw	r17,4(r8)
    48bc:	d8c02015 	stw	r3,128(sp)
    48c0:	d8801f15 	stw	r2,124(sp)
    48c4:	b0bff60e 	bge	r22,r2,48a0 <__alt_exception_stack_pointer+0xf80048a0>
    48c8:	d9801e04 	addi	r6,sp,120
    48cc:	b80b883a 	mov	r5,r23
    48d0:	9809883a 	mov	r4,r19
    48d4:	000a2400 	call	a240 <__sprint_r>
    48d8:	103b7d1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    48dc:	d8c02017 	ldw	r3,128(sp)
    48e0:	d8801f17 	ldw	r2,124(sp)
    48e4:	da000404 	addi	r8,sp,16
    48e8:	003fee06 	br	48a4 <__alt_exception_stack_pointer+0xf80048a4>
    48ec:	9088703a 	and	r4,r18,r2
    48f0:	203eab1e 	bne	r4,zero,43a0 <__alt_exception_stack_pointer+0xf80043a0>
    48f4:	dc401f17 	ldw	r17,124(sp)
    48f8:	40800115 	stw	r2,4(r8)
    48fc:	44000015 	stw	r16,0(r8)
    4900:	8c400044 	addi	r17,r17,1
    4904:	d8c02015 	stw	r3,128(sp)
    4908:	dc401f15 	stw	r17,124(sp)
    490c:	008001c4 	movi	r2,7
    4910:	14400e16 	blt	r2,r17,494c <___vfprintf_internal_r+0x168c>
    4914:	45800204 	addi	r22,r8,8
    4918:	003eca06 	br	4444 <__alt_exception_stack_pointer+0xf8004444>
    491c:	01000074 	movhi	r4,1
    4920:	210a8684 	addi	r4,r4,10778
    4924:	d9002c15 	stw	r4,176(sp)
    4928:	d8802c17 	ldw	r2,176(sp)
    492c:	1c07883a 	add	r3,r3,r16
    4930:	8c400044 	addi	r17,r17,1
    4934:	b0800015 	stw	r2,0(r22)
    4938:	b4000115 	stw	r16,4(r22)
    493c:	d8c02015 	stw	r3,128(sp)
    4940:	dc401f15 	stw	r17,124(sp)
    4944:	008001c4 	movi	r2,7
    4948:	147ebd0e 	bge	r2,r17,4440 <__alt_exception_stack_pointer+0xf8004440>
    494c:	d9002d17 	ldw	r4,180(sp)
    4950:	d9801e04 	addi	r6,sp,120
    4954:	b80b883a 	mov	r5,r23
    4958:	000a2400 	call	a240 <__sprint_r>
    495c:	103b5c1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4960:	d8c02017 	ldw	r3,128(sp)
    4964:	dc401f17 	ldw	r17,124(sp)
    4968:	dd800404 	addi	r22,sp,16
    496c:	003eb506 	br	4444 <__alt_exception_stack_pointer+0xf8004444>
    4970:	d9002d17 	ldw	r4,180(sp)
    4974:	d9801e04 	addi	r6,sp,120
    4978:	b80b883a 	mov	r5,r23
    497c:	000a2400 	call	a240 <__sprint_r>
    4980:	103b531e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4984:	d8c02017 	ldw	r3,128(sp)
    4988:	dc401f17 	ldw	r17,124(sp)
    498c:	da000404 	addi	r8,sp,16
    4990:	003e8d06 	br	43c8 <__alt_exception_stack_pointer+0xf80043c8>
    4994:	d9002d17 	ldw	r4,180(sp)
    4998:	d9801e04 	addi	r6,sp,120
    499c:	b80b883a 	mov	r5,r23
    49a0:	000a2400 	call	a240 <__sprint_r>
    49a4:	103b4a1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    49a8:	d8c02017 	ldw	r3,128(sp)
    49ac:	dc401f17 	ldw	r17,124(sp)
    49b0:	dd800404 	addi	r22,sp,16
    49b4:	003e8f06 	br	43f4 <__alt_exception_stack_pointer+0xf80043f4>
    49b8:	0027883a 	mov	r19,zero
    49bc:	003f4a06 	br	46e8 <__alt_exception_stack_pointer+0xf80046e8>
    49c0:	d9002d17 	ldw	r4,180(sp)
    49c4:	d9801e04 	addi	r6,sp,120
    49c8:	b80b883a 	mov	r5,r23
    49cc:	000a2400 	call	a240 <__sprint_r>
    49d0:	103b3f1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    49d4:	d8c02017 	ldw	r3,128(sp)
    49d8:	da000404 	addi	r8,sp,16
    49dc:	003c7b06 	br	3bcc <__alt_exception_stack_pointer+0xf8003bcc>
    49e0:	d9402a17 	ldw	r5,168(sp)
    49e4:	04e7c83a 	sub	r19,zero,r19
    49e8:	07000b44 	movi	fp,45
    49ec:	9804c03a 	cmpne	r2,r19,zero
    49f0:	05adc83a 	sub	r22,zero,r22
    49f4:	df002785 	stb	fp,158(sp)
    49f8:	b0adc83a 	sub	r22,r22,r2
    49fc:	28017b16 	blt	r5,zero,4fec <___vfprintf_internal_r+0x1d2c>
    4a00:	00bfdfc4 	movi	r2,-129
    4a04:	90a4703a 	and	r18,r18,r2
    4a08:	003b8906 	br	3830 <__alt_exception_stack_pointer+0xf8003830>
    4a0c:	d9003617 	ldw	r4,216(sp)
    4a10:	d9403817 	ldw	r5,224(sp)
    4a14:	da003d15 	stw	r8,244(sp)
    4a18:	0009eb80 	call	9eb8 <__fpclassifyd>
    4a1c:	da003d17 	ldw	r8,244(sp)
    4a20:	1000f026 	beq	r2,zero,4de4 <___vfprintf_internal_r+0x1b24>
    4a24:	d9002a17 	ldw	r4,168(sp)
    4a28:	05bff7c4 	movi	r22,-33
    4a2c:	00bfffc4 	movi	r2,-1
    4a30:	8dac703a 	and	r22,r17,r22
    4a34:	20820026 	beq	r4,r2,5238 <___vfprintf_internal_r+0x1f78>
    4a38:	008011c4 	movi	r2,71
    4a3c:	b081f726 	beq	r22,r2,521c <___vfprintf_internal_r+0x1f5c>
    4a40:	d9003817 	ldw	r4,224(sp)
    4a44:	90c04014 	ori	r3,r18,256
    4a48:	d8c02c15 	stw	r3,176(sp)
    4a4c:	20021516 	blt	r4,zero,52a4 <___vfprintf_internal_r+0x1fe4>
    4a50:	dcc03817 	ldw	r19,224(sp)
    4a54:	d8002905 	stb	zero,164(sp)
    4a58:	00801984 	movi	r2,102
    4a5c:	8881f926 	beq	r17,r2,5244 <___vfprintf_internal_r+0x1f84>
    4a60:	00801184 	movi	r2,70
    4a64:	88821c26 	beq	r17,r2,52d8 <___vfprintf_internal_r+0x2018>
    4a68:	00801144 	movi	r2,69
    4a6c:	b081ef26 	beq	r22,r2,522c <___vfprintf_internal_r+0x1f6c>
    4a70:	d8c02a17 	ldw	r3,168(sp)
    4a74:	d8802104 	addi	r2,sp,132
    4a78:	d8800315 	stw	r2,12(sp)
    4a7c:	d9403617 	ldw	r5,216(sp)
    4a80:	d8802504 	addi	r2,sp,148
    4a84:	d9002d17 	ldw	r4,180(sp)
    4a88:	d8800215 	stw	r2,8(sp)
    4a8c:	d8802604 	addi	r2,sp,152
    4a90:	d8c00015 	stw	r3,0(sp)
    4a94:	d8800115 	stw	r2,4(sp)
    4a98:	01c00084 	movi	r7,2
    4a9c:	980d883a 	mov	r6,r19
    4aa0:	d8c03c15 	stw	r3,240(sp)
    4aa4:	da003d15 	stw	r8,244(sp)
    4aa8:	00059f00 	call	59f0 <_dtoa_r>
    4aac:	1021883a 	mov	r16,r2
    4ab0:	008019c4 	movi	r2,103
    4ab4:	d8c03c17 	ldw	r3,240(sp)
    4ab8:	da003d17 	ldw	r8,244(sp)
    4abc:	88817126 	beq	r17,r2,5084 <___vfprintf_internal_r+0x1dc4>
    4ac0:	008011c4 	movi	r2,71
    4ac4:	88829126 	beq	r17,r2,550c <___vfprintf_internal_r+0x224c>
    4ac8:	80f9883a 	add	fp,r16,r3
    4acc:	d9003617 	ldw	r4,216(sp)
    4ad0:	000d883a 	mov	r6,zero
    4ad4:	000f883a 	mov	r7,zero
    4ad8:	980b883a 	mov	r5,r19
    4adc:	da003d15 	stw	r8,244(sp)
    4ae0:	000e1a00 	call	e1a0 <__eqdf2>
    4ae4:	da003d17 	ldw	r8,244(sp)
    4ae8:	10018d26 	beq	r2,zero,5120 <___vfprintf_internal_r+0x1e60>
    4aec:	d8802117 	ldw	r2,132(sp)
    4af0:	1700062e 	bgeu	r2,fp,4b0c <___vfprintf_internal_r+0x184c>
    4af4:	01000c04 	movi	r4,48
    4af8:	10c00044 	addi	r3,r2,1
    4afc:	d8c02115 	stw	r3,132(sp)
    4b00:	11000005 	stb	r4,0(r2)
    4b04:	d8802117 	ldw	r2,132(sp)
    4b08:	173ffb36 	bltu	r2,fp,4af8 <__alt_exception_stack_pointer+0xf8004af8>
    4b0c:	1405c83a 	sub	r2,r2,r16
    4b10:	d8803315 	stw	r2,204(sp)
    4b14:	008011c4 	movi	r2,71
    4b18:	b0817626 	beq	r22,r2,50f4 <___vfprintf_internal_r+0x1e34>
    4b1c:	00801944 	movi	r2,101
    4b20:	1442800e 	bge	r2,r17,5524 <___vfprintf_internal_r+0x2264>
    4b24:	d8c02617 	ldw	r3,152(sp)
    4b28:	00801984 	movi	r2,102
    4b2c:	d8c03215 	stw	r3,200(sp)
    4b30:	8881fe26 	beq	r17,r2,532c <___vfprintf_internal_r+0x206c>
    4b34:	d8c03217 	ldw	r3,200(sp)
    4b38:	d9003317 	ldw	r4,204(sp)
    4b3c:	1901dd16 	blt	r3,r4,52b4 <___vfprintf_internal_r+0x1ff4>
    4b40:	9480004c 	andi	r18,r18,1
    4b44:	90022b1e 	bne	r18,zero,53f4 <___vfprintf_internal_r+0x2134>
    4b48:	1805883a 	mov	r2,r3
    4b4c:	18028316 	blt	r3,zero,555c <___vfprintf_internal_r+0x229c>
    4b50:	d8c03217 	ldw	r3,200(sp)
    4b54:	044019c4 	movi	r17,103
    4b58:	d8c02b15 	stw	r3,172(sp)
    4b5c:	df002907 	ldb	fp,164(sp)
    4b60:	e001531e 	bne	fp,zero,50b0 <___vfprintf_internal_r+0x1df0>
    4b64:	df002783 	ldbu	fp,158(sp)
    4b68:	d8802915 	stw	r2,164(sp)
    4b6c:	dc802c17 	ldw	r18,176(sp)
    4b70:	d8002a15 	stw	zero,168(sp)
    4b74:	003baf06 	br	3a34 <__alt_exception_stack_pointer+0xf8003a34>
    4b78:	d8c02e17 	ldw	r3,184(sp)
    4b7c:	d9002e17 	ldw	r4,184(sp)
    4b80:	d9402e17 	ldw	r5,184(sp)
    4b84:	18c00017 	ldw	r3,0(r3)
    4b88:	21000117 	ldw	r4,4(r4)
    4b8c:	29400204 	addi	r5,r5,8
    4b90:	d8c03615 	stw	r3,216(sp)
    4b94:	d9003815 	stw	r4,224(sp)
    4b98:	d9402e15 	stw	r5,184(sp)
    4b9c:	003b5006 	br	38e0 <__alt_exception_stack_pointer+0xf80038e0>
    4ba0:	ac400007 	ldb	r17,0(r21)
    4ba4:	003a2806 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    4ba8:	9080100c 	andi	r2,r18,64
    4bac:	1000a826 	beq	r2,zero,4e50 <___vfprintf_internal_r+0x1b90>
    4bb0:	d8c02e17 	ldw	r3,184(sp)
    4bb4:	002d883a 	mov	r22,zero
    4bb8:	1cc0000b 	ldhu	r19,0(r3)
    4bbc:	18c00104 	addi	r3,r3,4
    4bc0:	d8c02e15 	stw	r3,184(sp)
    4bc4:	003caf06 	br	3e84 <__alt_exception_stack_pointer+0xf8003e84>
    4bc8:	d9002e17 	ldw	r4,184(sp)
    4bcc:	d9402a17 	ldw	r5,168(sp)
    4bd0:	002d883a 	mov	r22,zero
    4bd4:	20800104 	addi	r2,r4,4
    4bd8:	24c00017 	ldw	r19,0(r4)
    4bdc:	283ebb0e 	bge	r5,zero,46cc <__alt_exception_stack_pointer+0xf80046cc>
    4be0:	003ef106 	br	47a8 <__alt_exception_stack_pointer+0xf80047a8>
    4be4:	9080040c 	andi	r2,r18,16
    4be8:	1000921e 	bne	r2,zero,4e34 <___vfprintf_internal_r+0x1b74>
    4bec:	9480100c 	andi	r18,r18,64
    4bf0:	90013926 	beq	r18,zero,50d8 <___vfprintf_internal_r+0x1e18>
    4bf4:	d9402e17 	ldw	r5,184(sp)
    4bf8:	d8c02f17 	ldw	r3,188(sp)
    4bfc:	28800017 	ldw	r2,0(r5)
    4c00:	29400104 	addi	r5,r5,4
    4c04:	d9402e15 	stw	r5,184(sp)
    4c08:	10c0000d 	sth	r3,0(r2)
    4c0c:	0039e406 	br	33a0 <__alt_exception_stack_pointer+0xf80033a0>
    4c10:	9080100c 	andi	r2,r18,64
    4c14:	10008026 	beq	r2,zero,4e18 <___vfprintf_internal_r+0x1b58>
    4c18:	d8802e17 	ldw	r2,184(sp)
    4c1c:	14c0000f 	ldh	r19,0(r2)
    4c20:	10800104 	addi	r2,r2,4
    4c24:	d8802e15 	stw	r2,184(sp)
    4c28:	982dd7fa 	srai	r22,r19,31
    4c2c:	b005883a 	mov	r2,r22
    4c30:	003af706 	br	3810 <__alt_exception_stack_pointer+0xf8003810>
    4c34:	9080100c 	andi	r2,r18,64
    4c38:	d8002785 	stb	zero,158(sp)
    4c3c:	10008a1e 	bne	r2,zero,4e68 <___vfprintf_internal_r+0x1ba8>
    4c40:	d9002e17 	ldw	r4,184(sp)
    4c44:	d9402a17 	ldw	r5,168(sp)
    4c48:	002d883a 	mov	r22,zero
    4c4c:	20800104 	addi	r2,r4,4
    4c50:	24c00017 	ldw	r19,0(r4)
    4c54:	283e4b0e 	bge	r5,zero,4584 <__alt_exception_stack_pointer+0xf8004584>
    4c58:	9d86b03a 	or	r3,r19,r22
    4c5c:	d8802e15 	stw	r2,184(sp)
    4c60:	183e4c1e 	bne	r3,zero,4594 <__alt_exception_stack_pointer+0xf8004594>
    4c64:	0039883a 	mov	fp,zero
    4c68:	0005883a 	mov	r2,zero
    4c6c:	003d4006 	br	4170 <__alt_exception_stack_pointer+0xf8004170>
    4c70:	01400074 	movhi	r5,1
    4c74:	294a8684 	addi	r5,r5,10778
    4c78:	d9402c15 	stw	r5,176(sp)
    4c7c:	d9402c17 	ldw	r5,176(sp)
    4c80:	1c47883a 	add	r3,r3,r17
    4c84:	10800044 	addi	r2,r2,1
    4c88:	41400015 	stw	r5,0(r8)
    4c8c:	44400115 	stw	r17,4(r8)
    4c90:	d8c02015 	stw	r3,128(sp)
    4c94:	d8801f15 	stw	r2,124(sp)
    4c98:	010001c4 	movi	r4,7
    4c9c:	20bec816 	blt	r4,r2,47c0 <__alt_exception_stack_pointer+0xf80047c0>
    4ca0:	42000204 	addi	r8,r8,8
    4ca4:	003ecd06 	br	47dc <__alt_exception_stack_pointer+0xf80047dc>
    4ca8:	d9002a17 	ldw	r4,168(sp)
    4cac:	d8002785 	stb	zero,158(sp)
    4cb0:	203d2d16 	blt	r4,zero,4168 <__alt_exception_stack_pointer+0xf8004168>
    4cb4:	00bfdfc4 	movi	r2,-129
    4cb8:	90a4703a 	and	r18,r18,r2
    4cbc:	003a6106 	br	3644 <__alt_exception_stack_pointer+0xf8003644>
    4cc0:	01000074 	movhi	r4,1
    4cc4:	210a8684 	addi	r4,r4,10778
    4cc8:	d9002c15 	stw	r4,176(sp)
    4ccc:	003bea06 	br	3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4cd0:	d9002d17 	ldw	r4,180(sp)
    4cd4:	d9801e04 	addi	r6,sp,120
    4cd8:	b80b883a 	mov	r5,r23
    4cdc:	000a2400 	call	a240 <__sprint_r>
    4ce0:	103a7b1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4ce4:	d8c02017 	ldw	r3,128(sp)
    4ce8:	da000404 	addi	r8,sp,16
    4cec:	003d4106 	br	41f4 <__alt_exception_stack_pointer+0xf80041f4>
    4cf0:	d8801f17 	ldw	r2,124(sp)
    4cf4:	01400074 	movhi	r5,1
    4cf8:	01000044 	movi	r4,1
    4cfc:	18c00044 	addi	r3,r3,1
    4d00:	10800044 	addi	r2,r2,1
    4d04:	294a8604 	addi	r5,r5,10776
    4d08:	41000115 	stw	r4,4(r8)
    4d0c:	41400015 	stw	r5,0(r8)
    4d10:	d8c02015 	stw	r3,128(sp)
    4d14:	d8801f15 	stw	r2,124(sp)
    4d18:	010001c4 	movi	r4,7
    4d1c:	20805c16 	blt	r4,r2,4e90 <___vfprintf_internal_r+0x1bd0>
    4d20:	42000204 	addi	r8,r8,8
    4d24:	8800041e 	bne	r17,zero,4d38 <___vfprintf_internal_r+0x1a78>
    4d28:	d8803317 	ldw	r2,204(sp)
    4d2c:	1000021e 	bne	r2,zero,4d38 <___vfprintf_internal_r+0x1a78>
    4d30:	9080004c 	andi	r2,r18,1
    4d34:	103be726 	beq	r2,zero,3cd4 <__alt_exception_stack_pointer+0xf8003cd4>
    4d38:	d9003717 	ldw	r4,220(sp)
    4d3c:	d8801f17 	ldw	r2,124(sp)
    4d40:	d9403417 	ldw	r5,208(sp)
    4d44:	20c7883a 	add	r3,r4,r3
    4d48:	10800044 	addi	r2,r2,1
    4d4c:	41000115 	stw	r4,4(r8)
    4d50:	41400015 	stw	r5,0(r8)
    4d54:	d8c02015 	stw	r3,128(sp)
    4d58:	d8801f15 	stw	r2,124(sp)
    4d5c:	010001c4 	movi	r4,7
    4d60:	20812116 	blt	r4,r2,51e8 <___vfprintf_internal_r+0x1f28>
    4d64:	42000204 	addi	r8,r8,8
    4d68:	0463c83a 	sub	r17,zero,r17
    4d6c:	0440730e 	bge	zero,r17,4f3c <___vfprintf_internal_r+0x1c7c>
    4d70:	05800404 	movi	r22,16
    4d74:	b440860e 	bge	r22,r17,4f90 <___vfprintf_internal_r+0x1cd0>
    4d78:	01400074 	movhi	r5,1
    4d7c:	294a8684 	addi	r5,r5,10778
    4d80:	d9402c15 	stw	r5,176(sp)
    4d84:	070001c4 	movi	fp,7
    4d88:	dcc02d17 	ldw	r19,180(sp)
    4d8c:	00000306 	br	4d9c <___vfprintf_internal_r+0x1adc>
    4d90:	42000204 	addi	r8,r8,8
    4d94:	8c7ffc04 	addi	r17,r17,-16
    4d98:	b440800e 	bge	r22,r17,4f9c <___vfprintf_internal_r+0x1cdc>
    4d9c:	18c00404 	addi	r3,r3,16
    4da0:	10800044 	addi	r2,r2,1
    4da4:	45000015 	stw	r20,0(r8)
    4da8:	45800115 	stw	r22,4(r8)
    4dac:	d8c02015 	stw	r3,128(sp)
    4db0:	d8801f15 	stw	r2,124(sp)
    4db4:	e0bff60e 	bge	fp,r2,4d90 <__alt_exception_stack_pointer+0xf8004d90>
    4db8:	d9801e04 	addi	r6,sp,120
    4dbc:	b80b883a 	mov	r5,r23
    4dc0:	9809883a 	mov	r4,r19
    4dc4:	000a2400 	call	a240 <__sprint_r>
    4dc8:	103a411e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4dcc:	d8c02017 	ldw	r3,128(sp)
    4dd0:	d8801f17 	ldw	r2,124(sp)
    4dd4:	da000404 	addi	r8,sp,16
    4dd8:	003fee06 	br	4d94 <__alt_exception_stack_pointer+0xf8004d94>
    4ddc:	00bfffc4 	movi	r2,-1
    4de0:	003a3f06 	br	36e0 <__alt_exception_stack_pointer+0xf80036e0>
    4de4:	008011c4 	movi	r2,71
    4de8:	1440b816 	blt	r2,r17,50cc <___vfprintf_internal_r+0x1e0c>
    4dec:	04000074 	movhi	r16,1
    4df0:	840a7804 	addi	r16,r16,10720
    4df4:	00c000c4 	movi	r3,3
    4df8:	00bfdfc4 	movi	r2,-129
    4dfc:	d8c02915 	stw	r3,164(sp)
    4e00:	90a4703a 	and	r18,r18,r2
    4e04:	df002783 	ldbu	fp,158(sp)
    4e08:	d8c02b15 	stw	r3,172(sp)
    4e0c:	d8002a15 	stw	zero,168(sp)
    4e10:	d8003215 	stw	zero,200(sp)
    4e14:	003b0706 	br	3a34 <__alt_exception_stack_pointer+0xf8003a34>
    4e18:	d8c02e17 	ldw	r3,184(sp)
    4e1c:	1cc00017 	ldw	r19,0(r3)
    4e20:	18c00104 	addi	r3,r3,4
    4e24:	d8c02e15 	stw	r3,184(sp)
    4e28:	982dd7fa 	srai	r22,r19,31
    4e2c:	b005883a 	mov	r2,r22
    4e30:	003a7706 	br	3810 <__alt_exception_stack_pointer+0xf8003810>
    4e34:	d8c02e17 	ldw	r3,184(sp)
    4e38:	d9002f17 	ldw	r4,188(sp)
    4e3c:	18800017 	ldw	r2,0(r3)
    4e40:	18c00104 	addi	r3,r3,4
    4e44:	d8c02e15 	stw	r3,184(sp)
    4e48:	11000015 	stw	r4,0(r2)
    4e4c:	00395406 	br	33a0 <__alt_exception_stack_pointer+0xf80033a0>
    4e50:	d9002e17 	ldw	r4,184(sp)
    4e54:	002d883a 	mov	r22,zero
    4e58:	24c00017 	ldw	r19,0(r4)
    4e5c:	21000104 	addi	r4,r4,4
    4e60:	d9002e15 	stw	r4,184(sp)
    4e64:	003c0706 	br	3e84 <__alt_exception_stack_pointer+0xf8003e84>
    4e68:	d9402e17 	ldw	r5,184(sp)
    4e6c:	d8c02a17 	ldw	r3,168(sp)
    4e70:	002d883a 	mov	r22,zero
    4e74:	28800104 	addi	r2,r5,4
    4e78:	2cc0000b 	ldhu	r19,0(r5)
    4e7c:	183dc10e 	bge	r3,zero,4584 <__alt_exception_stack_pointer+0xf8004584>
    4e80:	003f7506 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    4e84:	04000074 	movhi	r16,1
    4e88:	840a7604 	addi	r16,r16,10712
    4e8c:	003aa706 	br	392c <__alt_exception_stack_pointer+0xf800392c>
    4e90:	d9002d17 	ldw	r4,180(sp)
    4e94:	d9801e04 	addi	r6,sp,120
    4e98:	b80b883a 	mov	r5,r23
    4e9c:	000a2400 	call	a240 <__sprint_r>
    4ea0:	103a0b1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4ea4:	dc402617 	ldw	r17,152(sp)
    4ea8:	d8c02017 	ldw	r3,128(sp)
    4eac:	da000404 	addi	r8,sp,16
    4eb0:	003f9c06 	br	4d24 <__alt_exception_stack_pointer+0xf8004d24>
    4eb4:	ac400043 	ldbu	r17,1(r21)
    4eb8:	84000814 	ori	r16,r16,32
    4ebc:	ad400044 	addi	r21,r21,1
    4ec0:	8c403fcc 	andi	r17,r17,255
    4ec4:	8c40201c 	xori	r17,r17,128
    4ec8:	8c7fe004 	addi	r17,r17,-128
    4ecc:	00395e06 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    4ed0:	d8c02e15 	stw	r3,184(sp)
    4ed4:	0039883a 	mov	fp,zero
    4ed8:	003e3506 	br	47b0 <__alt_exception_stack_pointer+0xf80047b0>
    4edc:	d9002d17 	ldw	r4,180(sp)
    4ee0:	d9801e04 	addi	r6,sp,120
    4ee4:	b80b883a 	mov	r5,r23
    4ee8:	000a2400 	call	a240 <__sprint_r>
    4eec:	1039f81e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4ef0:	d8c02017 	ldw	r3,128(sp)
    4ef4:	da000404 	addi	r8,sp,16
    4ef8:	003cd006 	br	423c <__alt_exception_stack_pointer+0xf800423c>
    4efc:	8009883a 	mov	r4,r16
    4f00:	df003d15 	stw	fp,244(sp)
    4f04:	00032200 	call	3220 <strlen>
    4f08:	d8802b15 	stw	r2,172(sp)
    4f0c:	da003d17 	ldw	r8,244(sp)
    4f10:	103c200e 	bge	r2,zero,3f94 <__alt_exception_stack_pointer+0xf8003f94>
    4f14:	0005883a 	mov	r2,zero
    4f18:	003c1e06 	br	3f94 <__alt_exception_stack_pointer+0xf8003f94>
    4f1c:	d9002d17 	ldw	r4,180(sp)
    4f20:	d9801e04 	addi	r6,sp,120
    4f24:	b80b883a 	mov	r5,r23
    4f28:	000a2400 	call	a240 <__sprint_r>
    4f2c:	1039e81e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4f30:	d8c02017 	ldw	r3,128(sp)
    4f34:	d8801f17 	ldw	r2,124(sp)
    4f38:	da000404 	addi	r8,sp,16
    4f3c:	d9403317 	ldw	r5,204(sp)
    4f40:	10800044 	addi	r2,r2,1
    4f44:	44000015 	stw	r16,0(r8)
    4f48:	28c7883a 	add	r3,r5,r3
    4f4c:	003b5b06 	br	3cbc <__alt_exception_stack_pointer+0xf8003cbc>
    4f50:	01000074 	movhi	r4,1
    4f54:	210a8a84 	addi	r4,r4,10794
    4f58:	d9003515 	stw	r4,212(sp)
    4f5c:	003af206 	br	3b28 <__alt_exception_stack_pointer+0xf8003b28>
    4f60:	013fffc4 	movi	r4,-1
    4f64:	003a0806 	br	3788 <__alt_exception_stack_pointer+0xf8003788>
    4f68:	0023883a 	mov	r17,zero
    4f6c:	003d9d06 	br	45e4 <__alt_exception_stack_pointer+0xf80045e4>
    4f70:	d9002d17 	ldw	r4,180(sp)
    4f74:	d9801e04 	addi	r6,sp,120
    4f78:	b80b883a 	mov	r5,r23
    4f7c:	000a2400 	call	a240 <__sprint_r>
    4f80:	1039d31e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4f84:	d8c02017 	ldw	r3,128(sp)
    4f88:	da000404 	addi	r8,sp,16
    4f8c:	003d9406 	br	45e0 <__alt_exception_stack_pointer+0xf80045e0>
    4f90:	01000074 	movhi	r4,1
    4f94:	210a8684 	addi	r4,r4,10778
    4f98:	d9002c15 	stw	r4,176(sp)
    4f9c:	d9002c17 	ldw	r4,176(sp)
    4fa0:	1c47883a 	add	r3,r3,r17
    4fa4:	10800044 	addi	r2,r2,1
    4fa8:	41000015 	stw	r4,0(r8)
    4fac:	44400115 	stw	r17,4(r8)
    4fb0:	d8c02015 	stw	r3,128(sp)
    4fb4:	d8801f15 	stw	r2,124(sp)
    4fb8:	010001c4 	movi	r4,7
    4fbc:	20bfd716 	blt	r4,r2,4f1c <__alt_exception_stack_pointer+0xf8004f1c>
    4fc0:	42000204 	addi	r8,r8,8
    4fc4:	003fdd06 	br	4f3c <__alt_exception_stack_pointer+0xf8004f3c>
    4fc8:	d9002d17 	ldw	r4,180(sp)
    4fcc:	d9801e04 	addi	r6,sp,120
    4fd0:	b80b883a 	mov	r5,r23
    4fd4:	000a2400 	call	a240 <__sprint_r>
    4fd8:	1039bd1e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    4fdc:	d8802617 	ldw	r2,152(sp)
    4fe0:	d8c02017 	ldw	r3,128(sp)
    4fe4:	da000404 	addi	r8,sp,16
    4fe8:	003e1006 	br	482c <__alt_exception_stack_pointer+0xf800482c>
    4fec:	00800044 	movi	r2,1
    4ff0:	10803fcc 	andi	r2,r2,255
    4ff4:	00c00044 	movi	r3,1
    4ff8:	10fa0d26 	beq	r2,r3,3830 <__alt_exception_stack_pointer+0xf8003830>
    4ffc:	00c00084 	movi	r3,2
    5000:	10fbaf26 	beq	r2,r3,3ec0 <__alt_exception_stack_pointer+0xf8003ec0>
    5004:	003a6d06 	br	39bc <__alt_exception_stack_pointer+0xf80039bc>
    5008:	01000074 	movhi	r4,1
    500c:	210a8a84 	addi	r4,r4,10794
    5010:	d9003515 	stw	r4,212(sp)
    5014:	003b5406 	br	3d68 <__alt_exception_stack_pointer+0xf8003d68>
    5018:	d8802a17 	ldw	r2,168(sp)
    501c:	00c00184 	movi	r3,6
    5020:	1880012e 	bgeu	r3,r2,5028 <___vfprintf_internal_r+0x1d68>
    5024:	1805883a 	mov	r2,r3
    5028:	d8802b15 	stw	r2,172(sp)
    502c:	1000ef16 	blt	r2,zero,53ec <___vfprintf_internal_r+0x212c>
    5030:	04000074 	movhi	r16,1
    5034:	d8802915 	stw	r2,164(sp)
    5038:	dcc02e15 	stw	r19,184(sp)
    503c:	d8002a15 	stw	zero,168(sp)
    5040:	d8003215 	stw	zero,200(sp)
    5044:	840a8404 	addi	r16,r16,10768
    5048:	0039883a 	mov	fp,zero
    504c:	003a8006 	br	3a50 <__alt_exception_stack_pointer+0xf8003a50>
    5050:	0021883a 	mov	r16,zero
    5054:	003e0706 	br	4874 <__alt_exception_stack_pointer+0xf8004874>
    5058:	d9002d17 	ldw	r4,180(sp)
    505c:	d9801e04 	addi	r6,sp,120
    5060:	b80b883a 	mov	r5,r23
    5064:	000a2400 	call	a240 <__sprint_r>
    5068:	1039991e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    506c:	d8802617 	ldw	r2,152(sp)
    5070:	d9403317 	ldw	r5,204(sp)
    5074:	d8c02017 	ldw	r3,128(sp)
    5078:	da000404 	addi	r8,sp,16
    507c:	2885c83a 	sub	r2,r5,r2
    5080:	003dfb06 	br	4870 <__alt_exception_stack_pointer+0xf8004870>
    5084:	9080004c 	andi	r2,r18,1
    5088:	103e8f1e 	bne	r2,zero,4ac8 <__alt_exception_stack_pointer+0xf8004ac8>
    508c:	d8802117 	ldw	r2,132(sp)
    5090:	003e9e06 	br	4b0c <__alt_exception_stack_pointer+0xf8004b0c>
    5094:	1025883a 	mov	r18,r2
    5098:	0039883a 	mov	fp,zero
    509c:	00800084 	movi	r2,2
    50a0:	003fd306 	br	4ff0 <__alt_exception_stack_pointer+0xf8004ff0>
    50a4:	07000b44 	movi	fp,45
    50a8:	df002785 	stb	fp,158(sp)
    50ac:	003a1b06 	br	391c <__alt_exception_stack_pointer+0xf800391c>
    50b0:	00c00b44 	movi	r3,45
    50b4:	d8c02785 	stb	r3,158(sp)
    50b8:	d8802915 	stw	r2,164(sp)
    50bc:	dc802c17 	ldw	r18,176(sp)
    50c0:	d8002a15 	stw	zero,168(sp)
    50c4:	07000b44 	movi	fp,45
    50c8:	003a5e06 	br	3a44 <__alt_exception_stack_pointer+0xf8003a44>
    50cc:	04000074 	movhi	r16,1
    50d0:	840a7904 	addi	r16,r16,10724
    50d4:	003f4706 	br	4df4 <__alt_exception_stack_pointer+0xf8004df4>
    50d8:	d9002e17 	ldw	r4,184(sp)
    50dc:	d9402f17 	ldw	r5,188(sp)
    50e0:	20800017 	ldw	r2,0(r4)
    50e4:	21000104 	addi	r4,r4,4
    50e8:	d9002e15 	stw	r4,184(sp)
    50ec:	11400015 	stw	r5,0(r2)
    50f0:	0038ab06 	br	33a0 <__alt_exception_stack_pointer+0xf80033a0>
    50f4:	dd802617 	ldw	r22,152(sp)
    50f8:	00bfff44 	movi	r2,-3
    50fc:	b0801c16 	blt	r22,r2,5170 <___vfprintf_internal_r+0x1eb0>
    5100:	d9402a17 	ldw	r5,168(sp)
    5104:	2d801a16 	blt	r5,r22,5170 <___vfprintf_internal_r+0x1eb0>
    5108:	dd803215 	stw	r22,200(sp)
    510c:	003e8906 	br	4b34 <__alt_exception_stack_pointer+0xf8004b34>
    5110:	01000074 	movhi	r4,1
    5114:	210a8684 	addi	r4,r4,10778
    5118:	d9002c15 	stw	r4,176(sp)
    511c:	003c9106 	br	4364 <__alt_exception_stack_pointer+0xf8004364>
    5120:	e005883a 	mov	r2,fp
    5124:	003e7906 	br	4b0c <__alt_exception_stack_pointer+0xf8004b0c>
    5128:	d9002a17 	ldw	r4,168(sp)
    512c:	df002783 	ldbu	fp,158(sp)
    5130:	dcc02e15 	stw	r19,184(sp)
    5134:	d9002915 	stw	r4,164(sp)
    5138:	d9002b15 	stw	r4,172(sp)
    513c:	d8002a15 	stw	zero,168(sp)
    5140:	d8003215 	stw	zero,200(sp)
    5144:	003a3b06 	br	3a34 <__alt_exception_stack_pointer+0xf8003a34>
    5148:	9080004c 	andi	r2,r18,1
    514c:	0039883a 	mov	fp,zero
    5150:	10000426 	beq	r2,zero,5164 <___vfprintf_internal_r+0x1ea4>
    5154:	00800c04 	movi	r2,48
    5158:	dc001dc4 	addi	r16,sp,119
    515c:	d8801dc5 	stb	r2,119(sp)
    5160:	003b6406 	br	3ef4 <__alt_exception_stack_pointer+0xf8003ef4>
    5164:	d8002b15 	stw	zero,172(sp)
    5168:	dc001e04 	addi	r16,sp,120
    516c:	003a2b06 	br	3a1c <__alt_exception_stack_pointer+0xf8003a1c>
    5170:	8c7fff84 	addi	r17,r17,-2
    5174:	b5bfffc4 	addi	r22,r22,-1
    5178:	dd802615 	stw	r22,152(sp)
    517c:	dc4022c5 	stb	r17,139(sp)
    5180:	b000bf16 	blt	r22,zero,5480 <___vfprintf_internal_r+0x21c0>
    5184:	00800ac4 	movi	r2,43
    5188:	d8802305 	stb	r2,140(sp)
    518c:	00800244 	movi	r2,9
    5190:	15807016 	blt	r2,r22,5354 <___vfprintf_internal_r+0x2094>
    5194:	00800c04 	movi	r2,48
    5198:	b5800c04 	addi	r22,r22,48
    519c:	d8802345 	stb	r2,141(sp)
    51a0:	dd802385 	stb	r22,142(sp)
    51a4:	d88023c4 	addi	r2,sp,143
    51a8:	df0022c4 	addi	fp,sp,139
    51ac:	d8c03317 	ldw	r3,204(sp)
    51b0:	1739c83a 	sub	fp,r2,fp
    51b4:	d9003317 	ldw	r4,204(sp)
    51b8:	e0c7883a 	add	r3,fp,r3
    51bc:	df003a15 	stw	fp,232(sp)
    51c0:	d8c02b15 	stw	r3,172(sp)
    51c4:	00800044 	movi	r2,1
    51c8:	1100b30e 	bge	r2,r4,5498 <___vfprintf_internal_r+0x21d8>
    51cc:	d8c02b17 	ldw	r3,172(sp)
    51d0:	18c00044 	addi	r3,r3,1
    51d4:	d8c02b15 	stw	r3,172(sp)
    51d8:	1805883a 	mov	r2,r3
    51dc:	1800ac16 	blt	r3,zero,5490 <___vfprintf_internal_r+0x21d0>
    51e0:	d8003215 	stw	zero,200(sp)
    51e4:	003e5d06 	br	4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    51e8:	d9002d17 	ldw	r4,180(sp)
    51ec:	d9801e04 	addi	r6,sp,120
    51f0:	b80b883a 	mov	r5,r23
    51f4:	000a2400 	call	a240 <__sprint_r>
    51f8:	1039351e 	bne	r2,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    51fc:	dc402617 	ldw	r17,152(sp)
    5200:	d8c02017 	ldw	r3,128(sp)
    5204:	d8801f17 	ldw	r2,124(sp)
    5208:	da000404 	addi	r8,sp,16
    520c:	003ed606 	br	4d68 <__alt_exception_stack_pointer+0xf8004d68>
    5210:	182b883a 	mov	r21,r3
    5214:	d8002a15 	stw	zero,168(sp)
    5218:	00388c06 	br	344c <__alt_exception_stack_pointer+0xf800344c>
    521c:	d8802a17 	ldw	r2,168(sp)
    5220:	103e071e 	bne	r2,zero,4a40 <__alt_exception_stack_pointer+0xf8004a40>
    5224:	dc002a15 	stw	r16,168(sp)
    5228:	003e0506 	br	4a40 <__alt_exception_stack_pointer+0xf8004a40>
    522c:	d9002a17 	ldw	r4,168(sp)
    5230:	20c00044 	addi	r3,r4,1
    5234:	003e0f06 	br	4a74 <__alt_exception_stack_pointer+0xf8004a74>
    5238:	01400184 	movi	r5,6
    523c:	d9402a15 	stw	r5,168(sp)
    5240:	003dff06 	br	4a40 <__alt_exception_stack_pointer+0xf8004a40>
    5244:	d8802104 	addi	r2,sp,132
    5248:	d8800315 	stw	r2,12(sp)
    524c:	d8802504 	addi	r2,sp,148
    5250:	d8800215 	stw	r2,8(sp)
    5254:	d8802604 	addi	r2,sp,152
    5258:	d8800115 	stw	r2,4(sp)
    525c:	d8802a17 	ldw	r2,168(sp)
    5260:	d9403617 	ldw	r5,216(sp)
    5264:	d9002d17 	ldw	r4,180(sp)
    5268:	d8800015 	stw	r2,0(sp)
    526c:	01c000c4 	movi	r7,3
    5270:	980d883a 	mov	r6,r19
    5274:	da003d15 	stw	r8,244(sp)
    5278:	00059f00 	call	59f0 <_dtoa_r>
    527c:	d8c02a17 	ldw	r3,168(sp)
    5280:	da003d17 	ldw	r8,244(sp)
    5284:	1021883a 	mov	r16,r2
    5288:	10f9883a 	add	fp,r2,r3
    528c:	81000007 	ldb	r4,0(r16)
    5290:	00800c04 	movi	r2,48
    5294:	20805e26 	beq	r4,r2,5410 <___vfprintf_internal_r+0x2150>
    5298:	d8c02617 	ldw	r3,152(sp)
    529c:	e0f9883a 	add	fp,fp,r3
    52a0:	003e0a06 	br	4acc <__alt_exception_stack_pointer+0xf8004acc>
    52a4:	00c00b44 	movi	r3,45
    52a8:	24e0003c 	xorhi	r19,r4,32768
    52ac:	d8c02905 	stb	r3,164(sp)
    52b0:	003de906 	br	4a58 <__alt_exception_stack_pointer+0xf8004a58>
    52b4:	d8c03217 	ldw	r3,200(sp)
    52b8:	00c07a0e 	bge	zero,r3,54a4 <___vfprintf_internal_r+0x21e4>
    52bc:	00800044 	movi	r2,1
    52c0:	d9003317 	ldw	r4,204(sp)
    52c4:	1105883a 	add	r2,r2,r4
    52c8:	d8802b15 	stw	r2,172(sp)
    52cc:	10004e16 	blt	r2,zero,5408 <___vfprintf_internal_r+0x2148>
    52d0:	044019c4 	movi	r17,103
    52d4:	003e2106 	br	4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    52d8:	d9002a17 	ldw	r4,168(sp)
    52dc:	d8802104 	addi	r2,sp,132
    52e0:	d8800315 	stw	r2,12(sp)
    52e4:	d9000015 	stw	r4,0(sp)
    52e8:	d8802504 	addi	r2,sp,148
    52ec:	d9403617 	ldw	r5,216(sp)
    52f0:	d9002d17 	ldw	r4,180(sp)
    52f4:	d8800215 	stw	r2,8(sp)
    52f8:	d8802604 	addi	r2,sp,152
    52fc:	d8800115 	stw	r2,4(sp)
    5300:	01c000c4 	movi	r7,3
    5304:	980d883a 	mov	r6,r19
    5308:	da003d15 	stw	r8,244(sp)
    530c:	00059f00 	call	59f0 <_dtoa_r>
    5310:	d8c02a17 	ldw	r3,168(sp)
    5314:	da003d17 	ldw	r8,244(sp)
    5318:	1021883a 	mov	r16,r2
    531c:	00801184 	movi	r2,70
    5320:	80f9883a 	add	fp,r16,r3
    5324:	88bfd926 	beq	r17,r2,528c <__alt_exception_stack_pointer+0xf800528c>
    5328:	003de806 	br	4acc <__alt_exception_stack_pointer+0xf8004acc>
    532c:	d9002a17 	ldw	r4,168(sp)
    5330:	00c04d0e 	bge	zero,r3,5468 <___vfprintf_internal_r+0x21a8>
    5334:	2000441e 	bne	r4,zero,5448 <___vfprintf_internal_r+0x2188>
    5338:	9480004c 	andi	r18,r18,1
    533c:	9000421e 	bne	r18,zero,5448 <___vfprintf_internal_r+0x2188>
    5340:	1805883a 	mov	r2,r3
    5344:	18006f16 	blt	r3,zero,5504 <___vfprintf_internal_r+0x2244>
    5348:	d8c03217 	ldw	r3,200(sp)
    534c:	d8c02b15 	stw	r3,172(sp)
    5350:	003e0206 	br	4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    5354:	df0022c4 	addi	fp,sp,139
    5358:	dc002a15 	stw	r16,168(sp)
    535c:	4027883a 	mov	r19,r8
    5360:	e021883a 	mov	r16,fp
    5364:	b009883a 	mov	r4,r22
    5368:	01400284 	movi	r5,10
    536c:	000cdcc0 	call	cdcc <__modsi3>
    5370:	10800c04 	addi	r2,r2,48
    5374:	843fffc4 	addi	r16,r16,-1
    5378:	b009883a 	mov	r4,r22
    537c:	01400284 	movi	r5,10
    5380:	80800005 	stb	r2,0(r16)
    5384:	000cd480 	call	cd48 <__divsi3>
    5388:	102d883a 	mov	r22,r2
    538c:	00800244 	movi	r2,9
    5390:	15bff416 	blt	r2,r22,5364 <__alt_exception_stack_pointer+0xf8005364>
    5394:	9811883a 	mov	r8,r19
    5398:	b0800c04 	addi	r2,r22,48
    539c:	8027883a 	mov	r19,r16
    53a0:	997fffc4 	addi	r5,r19,-1
    53a4:	98bfffc5 	stb	r2,-1(r19)
    53a8:	dc002a17 	ldw	r16,168(sp)
    53ac:	2f006d2e 	bgeu	r5,fp,5564 <___vfprintf_internal_r+0x22a4>
    53b0:	d9c02384 	addi	r7,sp,142
    53b4:	3ccfc83a 	sub	r7,r7,r19
    53b8:	d9002344 	addi	r4,sp,141
    53bc:	e1cf883a 	add	r7,fp,r7
    53c0:	00000106 	br	53c8 <___vfprintf_internal_r+0x2108>
    53c4:	28800003 	ldbu	r2,0(r5)
    53c8:	20800005 	stb	r2,0(r4)
    53cc:	21000044 	addi	r4,r4,1
    53d0:	29400044 	addi	r5,r5,1
    53d4:	393ffb1e 	bne	r7,r4,53c4 <__alt_exception_stack_pointer+0xf80053c4>
    53d8:	d8802304 	addi	r2,sp,140
    53dc:	14c5c83a 	sub	r2,r2,r19
    53e0:	d8c02344 	addi	r3,sp,141
    53e4:	1885883a 	add	r2,r3,r2
    53e8:	003f7006 	br	51ac <__alt_exception_stack_pointer+0xf80051ac>
    53ec:	0005883a 	mov	r2,zero
    53f0:	003f0f06 	br	5030 <__alt_exception_stack_pointer+0xf8005030>
    53f4:	d8c03217 	ldw	r3,200(sp)
    53f8:	18c00044 	addi	r3,r3,1
    53fc:	d8c02b15 	stw	r3,172(sp)
    5400:	1805883a 	mov	r2,r3
    5404:	183fb20e 	bge	r3,zero,52d0 <__alt_exception_stack_pointer+0xf80052d0>
    5408:	0005883a 	mov	r2,zero
    540c:	003fb006 	br	52d0 <__alt_exception_stack_pointer+0xf80052d0>
    5410:	d9003617 	ldw	r4,216(sp)
    5414:	000d883a 	mov	r6,zero
    5418:	000f883a 	mov	r7,zero
    541c:	980b883a 	mov	r5,r19
    5420:	d8c03c15 	stw	r3,240(sp)
    5424:	da003d15 	stw	r8,244(sp)
    5428:	000e1a00 	call	e1a0 <__eqdf2>
    542c:	d8c03c17 	ldw	r3,240(sp)
    5430:	da003d17 	ldw	r8,244(sp)
    5434:	103f9826 	beq	r2,zero,5298 <__alt_exception_stack_pointer+0xf8005298>
    5438:	00800044 	movi	r2,1
    543c:	10c7c83a 	sub	r3,r2,r3
    5440:	d8c02615 	stw	r3,152(sp)
    5444:	003f9506 	br	529c <__alt_exception_stack_pointer+0xf800529c>
    5448:	d9002a17 	ldw	r4,168(sp)
    544c:	d8c03217 	ldw	r3,200(sp)
    5450:	20800044 	addi	r2,r4,1
    5454:	1885883a 	add	r2,r3,r2
    5458:	d8802b15 	stw	r2,172(sp)
    545c:	103dbf0e 	bge	r2,zero,4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    5460:	0005883a 	mov	r2,zero
    5464:	003dbd06 	br	4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    5468:	2000201e 	bne	r4,zero,54ec <___vfprintf_internal_r+0x222c>
    546c:	9480004c 	andi	r18,r18,1
    5470:	90001e1e 	bne	r18,zero,54ec <___vfprintf_internal_r+0x222c>
    5474:	00800044 	movi	r2,1
    5478:	d8802b15 	stw	r2,172(sp)
    547c:	003db706 	br	4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    5480:	00800b44 	movi	r2,45
    5484:	05adc83a 	sub	r22,zero,r22
    5488:	d8802305 	stb	r2,140(sp)
    548c:	003f3f06 	br	518c <__alt_exception_stack_pointer+0xf800518c>
    5490:	0005883a 	mov	r2,zero
    5494:	003f5206 	br	51e0 <__alt_exception_stack_pointer+0xf80051e0>
    5498:	90a4703a 	and	r18,r18,r2
    549c:	903f4e26 	beq	r18,zero,51d8 <__alt_exception_stack_pointer+0xf80051d8>
    54a0:	003f4a06 	br	51cc <__alt_exception_stack_pointer+0xf80051cc>
    54a4:	00800084 	movi	r2,2
    54a8:	10c5c83a 	sub	r2,r2,r3
    54ac:	003f8406 	br	52c0 <__alt_exception_stack_pointer+0xf80052c0>
    54b0:	d9402e17 	ldw	r5,184(sp)
    54b4:	d9002e17 	ldw	r4,184(sp)
    54b8:	ac400043 	ldbu	r17,1(r21)
    54bc:	29400017 	ldw	r5,0(r5)
    54c0:	20800104 	addi	r2,r4,4
    54c4:	d8802e15 	stw	r2,184(sp)
    54c8:	d9402a15 	stw	r5,168(sp)
    54cc:	182b883a 	mov	r21,r3
    54d0:	283e7b0e 	bge	r5,zero,4ec0 <__alt_exception_stack_pointer+0xf8004ec0>
    54d4:	8c403fcc 	andi	r17,r17,255
    54d8:	017fffc4 	movi	r5,-1
    54dc:	8c40201c 	xori	r17,r17,128
    54e0:	d9402a15 	stw	r5,168(sp)
    54e4:	8c7fe004 	addi	r17,r17,-128
    54e8:	0037d706 	br	3448 <__alt_exception_stack_pointer+0xf8003448>
    54ec:	d8c02a17 	ldw	r3,168(sp)
    54f0:	18c00084 	addi	r3,r3,2
    54f4:	d8c02b15 	stw	r3,172(sp)
    54f8:	1805883a 	mov	r2,r3
    54fc:	183d970e 	bge	r3,zero,4b5c <__alt_exception_stack_pointer+0xf8004b5c>
    5500:	003fd706 	br	5460 <__alt_exception_stack_pointer+0xf8005460>
    5504:	0005883a 	mov	r2,zero
    5508:	003f8f06 	br	5348 <__alt_exception_stack_pointer+0xf8005348>
    550c:	9080004c 	andi	r2,r18,1
    5510:	103f821e 	bne	r2,zero,531c <__alt_exception_stack_pointer+0xf800531c>
    5514:	d8802117 	ldw	r2,132(sp)
    5518:	1405c83a 	sub	r2,r2,r16
    551c:	d8803315 	stw	r2,204(sp)
    5520:	b47ef426 	beq	r22,r17,50f4 <__alt_exception_stack_pointer+0xf80050f4>
    5524:	dd802617 	ldw	r22,152(sp)
    5528:	003f1206 	br	5174 <__alt_exception_stack_pointer+0xf8005174>
    552c:	d8c02b03 	ldbu	r3,172(sp)
    5530:	d8c02785 	stb	r3,158(sp)
    5534:	0038df06 	br	38b4 <__alt_exception_stack_pointer+0xf80038b4>
    5538:	d8c02b03 	ldbu	r3,172(sp)
    553c:	d8c02785 	stb	r3,158(sp)
    5540:	0038aa06 	br	37ec <__alt_exception_stack_pointer+0xf80037ec>
    5544:	d8c02b03 	ldbu	r3,172(sp)
    5548:	d8c02785 	stb	r3,158(sp)
    554c:	003a4306 	br	3e5c <__alt_exception_stack_pointer+0xf8003e5c>
    5550:	d8c02b03 	ldbu	r3,172(sp)
    5554:	d8c02785 	stb	r3,158(sp)
    5558:	003af506 	br	4130 <__alt_exception_stack_pointer+0xf8004130>
    555c:	0005883a 	mov	r2,zero
    5560:	003d7b06 	br	4b50 <__alt_exception_stack_pointer+0xf8004b50>
    5564:	d8802344 	addi	r2,sp,141
    5568:	003f1006 	br	51ac <__alt_exception_stack_pointer+0xf80051ac>
    556c:	d8c02b03 	ldbu	r3,172(sp)
    5570:	d8c02785 	stb	r3,158(sp)
    5574:	0038fd06 	br	396c <__alt_exception_stack_pointer+0xf800396c>
    5578:	d8c02b03 	ldbu	r3,172(sp)
    557c:	d8c02785 	stb	r3,158(sp)
    5580:	003a9706 	br	3fe0 <__alt_exception_stack_pointer+0xf8003fe0>
    5584:	d8c02b03 	ldbu	r3,172(sp)
    5588:	d8c02785 	stb	r3,158(sp)
    558c:	003a1806 	br	3df0 <__alt_exception_stack_pointer+0xf8003df0>
    5590:	d8c02b03 	ldbu	r3,172(sp)
    5594:	d8c02785 	stb	r3,158(sp)
    5598:	003abe06 	br	4094 <__alt_exception_stack_pointer+0xf8004094>

0000559c <__vfprintf_internal>:
    559c:	00800074 	movhi	r2,1
    55a0:	1091e504 	addi	r2,r2,18324
    55a4:	300f883a 	mov	r7,r6
    55a8:	280d883a 	mov	r6,r5
    55ac:	200b883a 	mov	r5,r4
    55b0:	11000017 	ldw	r4,0(r2)
    55b4:	00032c01 	jmpi	32c0 <___vfprintf_internal_r>

000055b8 <__sbprintf>:
    55b8:	2880030b 	ldhu	r2,12(r5)
    55bc:	2ac01917 	ldw	r11,100(r5)
    55c0:	2a80038b 	ldhu	r10,14(r5)
    55c4:	2a400717 	ldw	r9,28(r5)
    55c8:	2a000917 	ldw	r8,36(r5)
    55cc:	defee204 	addi	sp,sp,-1144
    55d0:	00c10004 	movi	r3,1024
    55d4:	dc011a15 	stw	r16,1128(sp)
    55d8:	10bfff4c 	andi	r2,r2,65533
    55dc:	2821883a 	mov	r16,r5
    55e0:	d8cb883a 	add	r5,sp,r3
    55e4:	dc811c15 	stw	r18,1136(sp)
    55e8:	dc411b15 	stw	r17,1132(sp)
    55ec:	dfc11d15 	stw	ra,1140(sp)
    55f0:	2025883a 	mov	r18,r4
    55f4:	d881030d 	sth	r2,1036(sp)
    55f8:	dac11915 	stw	r11,1124(sp)
    55fc:	da81038d 	sth	r10,1038(sp)
    5600:	da410715 	stw	r9,1052(sp)
    5604:	da010915 	stw	r8,1060(sp)
    5608:	dec10015 	stw	sp,1024(sp)
    560c:	dec10415 	stw	sp,1040(sp)
    5610:	d8c10215 	stw	r3,1032(sp)
    5614:	d8c10515 	stw	r3,1044(sp)
    5618:	d8010615 	stw	zero,1048(sp)
    561c:	00032c00 	call	32c0 <___vfprintf_internal_r>
    5620:	1023883a 	mov	r17,r2
    5624:	10000416 	blt	r2,zero,5638 <__sbprintf+0x80>
    5628:	d9410004 	addi	r5,sp,1024
    562c:	9009883a 	mov	r4,r18
    5630:	00072940 	call	7294 <_fflush_r>
    5634:	10000d1e 	bne	r2,zero,566c <__sbprintf+0xb4>
    5638:	d881030b 	ldhu	r2,1036(sp)
    563c:	1080100c 	andi	r2,r2,64
    5640:	10000326 	beq	r2,zero,5650 <__sbprintf+0x98>
    5644:	8080030b 	ldhu	r2,12(r16)
    5648:	10801014 	ori	r2,r2,64
    564c:	8080030d 	sth	r2,12(r16)
    5650:	8805883a 	mov	r2,r17
    5654:	dfc11d17 	ldw	ra,1140(sp)
    5658:	dc811c17 	ldw	r18,1136(sp)
    565c:	dc411b17 	ldw	r17,1132(sp)
    5660:	dc011a17 	ldw	r16,1128(sp)
    5664:	dec11e04 	addi	sp,sp,1144
    5668:	f800283a 	ret
    566c:	047fffc4 	movi	r17,-1
    5670:	003ff106 	br	5638 <__alt_exception_stack_pointer+0xf8005638>

00005674 <__swsetup_r>:
    5674:	00800074 	movhi	r2,1
    5678:	defffd04 	addi	sp,sp,-12
    567c:	1091e504 	addi	r2,r2,18324
    5680:	dc400115 	stw	r17,4(sp)
    5684:	2023883a 	mov	r17,r4
    5688:	11000017 	ldw	r4,0(r2)
    568c:	dc000015 	stw	r16,0(sp)
    5690:	dfc00215 	stw	ra,8(sp)
    5694:	2821883a 	mov	r16,r5
    5698:	20000226 	beq	r4,zero,56a4 <__swsetup_r+0x30>
    569c:	20800e17 	ldw	r2,56(r4)
    56a0:	10003126 	beq	r2,zero,5768 <__swsetup_r+0xf4>
    56a4:	8080030b 	ldhu	r2,12(r16)
    56a8:	10c0020c 	andi	r3,r2,8
    56ac:	1009883a 	mov	r4,r2
    56b0:	18000f26 	beq	r3,zero,56f0 <__swsetup_r+0x7c>
    56b4:	80c00417 	ldw	r3,16(r16)
    56b8:	18001526 	beq	r3,zero,5710 <__swsetup_r+0x9c>
    56bc:	1100004c 	andi	r4,r2,1
    56c0:	20001c1e 	bne	r4,zero,5734 <__swsetup_r+0xc0>
    56c4:	1080008c 	andi	r2,r2,2
    56c8:	1000291e 	bne	r2,zero,5770 <__swsetup_r+0xfc>
    56cc:	80800517 	ldw	r2,20(r16)
    56d0:	80800215 	stw	r2,8(r16)
    56d4:	18001c26 	beq	r3,zero,5748 <__swsetup_r+0xd4>
    56d8:	0005883a 	mov	r2,zero
    56dc:	dfc00217 	ldw	ra,8(sp)
    56e0:	dc400117 	ldw	r17,4(sp)
    56e4:	dc000017 	ldw	r16,0(sp)
    56e8:	dec00304 	addi	sp,sp,12
    56ec:	f800283a 	ret
    56f0:	2080040c 	andi	r2,r4,16
    56f4:	10002e26 	beq	r2,zero,57b0 <__swsetup_r+0x13c>
    56f8:	2080010c 	andi	r2,r4,4
    56fc:	10001e1e 	bne	r2,zero,5778 <__swsetup_r+0x104>
    5700:	80c00417 	ldw	r3,16(r16)
    5704:	20800214 	ori	r2,r4,8
    5708:	8080030d 	sth	r2,12(r16)
    570c:	183feb1e 	bne	r3,zero,56bc <__alt_exception_stack_pointer+0xf80056bc>
    5710:	1100a00c 	andi	r4,r2,640
    5714:	01408004 	movi	r5,512
    5718:	217fe826 	beq	r4,r5,56bc <__alt_exception_stack_pointer+0xf80056bc>
    571c:	800b883a 	mov	r5,r16
    5720:	8809883a 	mov	r4,r17
    5724:	00082300 	call	8230 <__smakebuf_r>
    5728:	8080030b 	ldhu	r2,12(r16)
    572c:	80c00417 	ldw	r3,16(r16)
    5730:	003fe206 	br	56bc <__alt_exception_stack_pointer+0xf80056bc>
    5734:	80800517 	ldw	r2,20(r16)
    5738:	80000215 	stw	zero,8(r16)
    573c:	0085c83a 	sub	r2,zero,r2
    5740:	80800615 	stw	r2,24(r16)
    5744:	183fe41e 	bne	r3,zero,56d8 <__alt_exception_stack_pointer+0xf80056d8>
    5748:	80c0030b 	ldhu	r3,12(r16)
    574c:	0005883a 	mov	r2,zero
    5750:	1900200c 	andi	r4,r3,128
    5754:	203fe126 	beq	r4,zero,56dc <__alt_exception_stack_pointer+0xf80056dc>
    5758:	18c01014 	ori	r3,r3,64
    575c:	80c0030d 	sth	r3,12(r16)
    5760:	00bfffc4 	movi	r2,-1
    5764:	003fdd06 	br	56dc <__alt_exception_stack_pointer+0xf80056dc>
    5768:	00076800 	call	7680 <__sinit>
    576c:	003fcd06 	br	56a4 <__alt_exception_stack_pointer+0xf80056a4>
    5770:	0005883a 	mov	r2,zero
    5774:	003fd606 	br	56d0 <__alt_exception_stack_pointer+0xf80056d0>
    5778:	81400c17 	ldw	r5,48(r16)
    577c:	28000626 	beq	r5,zero,5798 <__swsetup_r+0x124>
    5780:	80801004 	addi	r2,r16,64
    5784:	28800326 	beq	r5,r2,5794 <__swsetup_r+0x120>
    5788:	8809883a 	mov	r4,r17
    578c:	00077f40 	call	77f4 <_free_r>
    5790:	8100030b 	ldhu	r4,12(r16)
    5794:	80000c15 	stw	zero,48(r16)
    5798:	80c00417 	ldw	r3,16(r16)
    579c:	00bff6c4 	movi	r2,-37
    57a0:	1108703a 	and	r4,r2,r4
    57a4:	80000115 	stw	zero,4(r16)
    57a8:	80c00015 	stw	r3,0(r16)
    57ac:	003fd506 	br	5704 <__alt_exception_stack_pointer+0xf8005704>
    57b0:	00800244 	movi	r2,9
    57b4:	88800015 	stw	r2,0(r17)
    57b8:	20801014 	ori	r2,r4,64
    57bc:	8080030d 	sth	r2,12(r16)
    57c0:	00bfffc4 	movi	r2,-1
    57c4:	003fc506 	br	56dc <__alt_exception_stack_pointer+0xf80056dc>

000057c8 <quorem>:
    57c8:	defff204 	addi	sp,sp,-56
    57cc:	ddc00b15 	stw	r23,44(sp)
    57d0:	20800417 	ldw	r2,16(r4)
    57d4:	2dc00417 	ldw	r23,16(r5)
    57d8:	dfc00d15 	stw	ra,52(sp)
    57dc:	df000c15 	stw	fp,48(sp)
    57e0:	dd800a15 	stw	r22,40(sp)
    57e4:	dd400915 	stw	r21,36(sp)
    57e8:	dd000815 	stw	r20,32(sp)
    57ec:	dcc00715 	stw	r19,28(sp)
    57f0:	dc800615 	stw	r18,24(sp)
    57f4:	dc400515 	stw	r17,20(sp)
    57f8:	dc000415 	stw	r16,16(sp)
    57fc:	15c07a16 	blt	r2,r23,59e8 <quorem+0x220>
    5800:	bdffffc4 	addi	r23,r23,-1
    5804:	bde9883a 	add	r20,r23,r23
    5808:	28c00504 	addi	r3,r5,20
    580c:	a529883a 	add	r20,r20,r20
    5810:	1d39883a 	add	fp,r3,r20
    5814:	24c00504 	addi	r19,r4,20
    5818:	d9400215 	stw	r5,8(sp)
    581c:	9d29883a 	add	r20,r19,r20
    5820:	e1400017 	ldw	r5,0(fp)
    5824:	d9000015 	stw	r4,0(sp)
    5828:	a1000017 	ldw	r4,0(r20)
    582c:	29400044 	addi	r5,r5,1
    5830:	d8c00115 	stw	r3,4(sp)
    5834:	dd000315 	stw	r20,12(sp)
    5838:	000ce400 	call	ce40 <__udivsi3>
    583c:	1025883a 	mov	r18,r2
    5840:	10003026 	beq	r2,zero,5904 <quorem+0x13c>
    5844:	dc400117 	ldw	r17,4(sp)
    5848:	9829883a 	mov	r20,r19
    584c:	002d883a 	mov	r22,zero
    5850:	0021883a 	mov	r16,zero
    5854:	8d400017 	ldw	r21,0(r17)
    5858:	900b883a 	mov	r5,r18
    585c:	8c400104 	addi	r17,r17,4
    5860:	a93fffcc 	andi	r4,r21,65535
    5864:	000cefc0 	call	cefc <__mulsi3>
    5868:	a808d43a 	srli	r4,r21,16
    586c:	900b883a 	mov	r5,r18
    5870:	15ad883a 	add	r22,r2,r22
    5874:	000cefc0 	call	cefc <__mulsi3>
    5878:	a1000017 	ldw	r4,0(r20)
    587c:	b00cd43a 	srli	r6,r22,16
    5880:	b0ffffcc 	andi	r3,r22,65535
    5884:	217fffcc 	andi	r5,r4,65535
    5888:	2c21883a 	add	r16,r5,r16
    588c:	80c7c83a 	sub	r3,r16,r3
    5890:	2008d43a 	srli	r4,r4,16
    5894:	1185883a 	add	r2,r2,r6
    5898:	1821d43a 	srai	r16,r3,16
    589c:	117fffcc 	andi	r5,r2,65535
    58a0:	2149c83a 	sub	r4,r4,r5
    58a4:	2421883a 	add	r16,r4,r16
    58a8:	8008943a 	slli	r4,r16,16
    58ac:	18ffffcc 	andi	r3,r3,65535
    58b0:	102cd43a 	srli	r22,r2,16
    58b4:	20c8b03a 	or	r4,r4,r3
    58b8:	a1000015 	stw	r4,0(r20)
    58bc:	8021d43a 	srai	r16,r16,16
    58c0:	a5000104 	addi	r20,r20,4
    58c4:	e47fe32e 	bgeu	fp,r17,5854 <__alt_exception_stack_pointer+0xf8005854>
    58c8:	d8c00317 	ldw	r3,12(sp)
    58cc:	18800017 	ldw	r2,0(r3)
    58d0:	10000c1e 	bne	r2,zero,5904 <quorem+0x13c>
    58d4:	18bfff04 	addi	r2,r3,-4
    58d8:	9880082e 	bgeu	r19,r2,58fc <quorem+0x134>
    58dc:	18ffff17 	ldw	r3,-4(r3)
    58e0:	18000326 	beq	r3,zero,58f0 <quorem+0x128>
    58e4:	00000506 	br	58fc <quorem+0x134>
    58e8:	10c00017 	ldw	r3,0(r2)
    58ec:	1800031e 	bne	r3,zero,58fc <quorem+0x134>
    58f0:	10bfff04 	addi	r2,r2,-4
    58f4:	bdffffc4 	addi	r23,r23,-1
    58f8:	98bffb36 	bltu	r19,r2,58e8 <__alt_exception_stack_pointer+0xf80058e8>
    58fc:	d8c00017 	ldw	r3,0(sp)
    5900:	1dc00415 	stw	r23,16(r3)
    5904:	d9400217 	ldw	r5,8(sp)
    5908:	d9000017 	ldw	r4,0(sp)
    590c:	00092200 	call	9220 <__mcmp>
    5910:	10002816 	blt	r2,zero,59b4 <quorem+0x1ec>
    5914:	dc400117 	ldw	r17,4(sp)
    5918:	94800044 	addi	r18,r18,1
    591c:	980d883a 	mov	r6,r19
    5920:	0007883a 	mov	r3,zero
    5924:	31000017 	ldw	r4,0(r6)
    5928:	89400017 	ldw	r5,0(r17)
    592c:	31800104 	addi	r6,r6,4
    5930:	20bfffcc 	andi	r2,r4,65535
    5934:	10c7883a 	add	r3,r2,r3
    5938:	28bfffcc 	andi	r2,r5,65535
    593c:	1885c83a 	sub	r2,r3,r2
    5940:	280ad43a 	srli	r5,r5,16
    5944:	2008d43a 	srli	r4,r4,16
    5948:	1007d43a 	srai	r3,r2,16
    594c:	10bfffcc 	andi	r2,r2,65535
    5950:	2149c83a 	sub	r4,r4,r5
    5954:	20c9883a 	add	r4,r4,r3
    5958:	200a943a 	slli	r5,r4,16
    595c:	8c400104 	addi	r17,r17,4
    5960:	2007d43a 	srai	r3,r4,16
    5964:	2884b03a 	or	r2,r5,r2
    5968:	30bfff15 	stw	r2,-4(r6)
    596c:	e47fed2e 	bgeu	fp,r17,5924 <__alt_exception_stack_pointer+0xf8005924>
    5970:	bdc5883a 	add	r2,r23,r23
    5974:	1085883a 	add	r2,r2,r2
    5978:	9887883a 	add	r3,r19,r2
    597c:	18800017 	ldw	r2,0(r3)
    5980:	10000c1e 	bne	r2,zero,59b4 <quorem+0x1ec>
    5984:	18bfff04 	addi	r2,r3,-4
    5988:	9880082e 	bgeu	r19,r2,59ac <quorem+0x1e4>
    598c:	18ffff17 	ldw	r3,-4(r3)
    5990:	18000326 	beq	r3,zero,59a0 <quorem+0x1d8>
    5994:	00000506 	br	59ac <quorem+0x1e4>
    5998:	10c00017 	ldw	r3,0(r2)
    599c:	1800031e 	bne	r3,zero,59ac <quorem+0x1e4>
    59a0:	10bfff04 	addi	r2,r2,-4
    59a4:	bdffffc4 	addi	r23,r23,-1
    59a8:	98bffb36 	bltu	r19,r2,5998 <__alt_exception_stack_pointer+0xf8005998>
    59ac:	d8c00017 	ldw	r3,0(sp)
    59b0:	1dc00415 	stw	r23,16(r3)
    59b4:	9005883a 	mov	r2,r18
    59b8:	dfc00d17 	ldw	ra,52(sp)
    59bc:	df000c17 	ldw	fp,48(sp)
    59c0:	ddc00b17 	ldw	r23,44(sp)
    59c4:	dd800a17 	ldw	r22,40(sp)
    59c8:	dd400917 	ldw	r21,36(sp)
    59cc:	dd000817 	ldw	r20,32(sp)
    59d0:	dcc00717 	ldw	r19,28(sp)
    59d4:	dc800617 	ldw	r18,24(sp)
    59d8:	dc400517 	ldw	r17,20(sp)
    59dc:	dc000417 	ldw	r16,16(sp)
    59e0:	dec00e04 	addi	sp,sp,56
    59e4:	f800283a 	ret
    59e8:	0005883a 	mov	r2,zero
    59ec:	003ff206 	br	59b8 <__alt_exception_stack_pointer+0xf80059b8>

000059f0 <_dtoa_r>:
    59f0:	20801017 	ldw	r2,64(r4)
    59f4:	deffde04 	addi	sp,sp,-136
    59f8:	df002015 	stw	fp,128(sp)
    59fc:	dcc01b15 	stw	r19,108(sp)
    5a00:	dc801a15 	stw	r18,104(sp)
    5a04:	dc401915 	stw	r17,100(sp)
    5a08:	dc001815 	stw	r16,96(sp)
    5a0c:	dfc02115 	stw	ra,132(sp)
    5a10:	ddc01f15 	stw	r23,124(sp)
    5a14:	dd801e15 	stw	r22,120(sp)
    5a18:	dd401d15 	stw	r21,116(sp)
    5a1c:	dd001c15 	stw	r20,112(sp)
    5a20:	d9c00315 	stw	r7,12(sp)
    5a24:	2039883a 	mov	fp,r4
    5a28:	3023883a 	mov	r17,r6
    5a2c:	2825883a 	mov	r18,r5
    5a30:	dc002417 	ldw	r16,144(sp)
    5a34:	3027883a 	mov	r19,r6
    5a38:	10000826 	beq	r2,zero,5a5c <_dtoa_r+0x6c>
    5a3c:	21801117 	ldw	r6,68(r4)
    5a40:	00c00044 	movi	r3,1
    5a44:	100b883a 	mov	r5,r2
    5a48:	1986983a 	sll	r3,r3,r6
    5a4c:	11800115 	stw	r6,4(r2)
    5a50:	10c00215 	stw	r3,8(r2)
    5a54:	00089440 	call	8944 <_Bfree>
    5a58:	e0001015 	stw	zero,64(fp)
    5a5c:	88002e16 	blt	r17,zero,5b18 <_dtoa_r+0x128>
    5a60:	80000015 	stw	zero,0(r16)
    5a64:	889ffc2c 	andhi	r2,r17,32752
    5a68:	00dffc34 	movhi	r3,32752
    5a6c:	10c01c26 	beq	r2,r3,5ae0 <_dtoa_r+0xf0>
    5a70:	000d883a 	mov	r6,zero
    5a74:	000f883a 	mov	r7,zero
    5a78:	9009883a 	mov	r4,r18
    5a7c:	980b883a 	mov	r5,r19
    5a80:	000e1a00 	call	e1a0 <__eqdf2>
    5a84:	10002b1e 	bne	r2,zero,5b34 <_dtoa_r+0x144>
    5a88:	d9c02317 	ldw	r7,140(sp)
    5a8c:	00800044 	movi	r2,1
    5a90:	38800015 	stw	r2,0(r7)
    5a94:	d8802517 	ldw	r2,148(sp)
    5a98:	10019e26 	beq	r2,zero,6114 <_dtoa_r+0x724>
    5a9c:	d8c02517 	ldw	r3,148(sp)
    5aa0:	00800074 	movhi	r2,1
    5aa4:	108a8644 	addi	r2,r2,10777
    5aa8:	18800015 	stw	r2,0(r3)
    5aac:	10bfffc4 	addi	r2,r2,-1
    5ab0:	dfc02117 	ldw	ra,132(sp)
    5ab4:	df002017 	ldw	fp,128(sp)
    5ab8:	ddc01f17 	ldw	r23,124(sp)
    5abc:	dd801e17 	ldw	r22,120(sp)
    5ac0:	dd401d17 	ldw	r21,116(sp)
    5ac4:	dd001c17 	ldw	r20,112(sp)
    5ac8:	dcc01b17 	ldw	r19,108(sp)
    5acc:	dc801a17 	ldw	r18,104(sp)
    5ad0:	dc401917 	ldw	r17,100(sp)
    5ad4:	dc001817 	ldw	r16,96(sp)
    5ad8:	dec02204 	addi	sp,sp,136
    5adc:	f800283a 	ret
    5ae0:	d8c02317 	ldw	r3,140(sp)
    5ae4:	0089c3c4 	movi	r2,9999
    5ae8:	18800015 	stw	r2,0(r3)
    5aec:	90017726 	beq	r18,zero,60cc <_dtoa_r+0x6dc>
    5af0:	00800074 	movhi	r2,1
    5af4:	108a9204 	addi	r2,r2,10824
    5af8:	d9002517 	ldw	r4,148(sp)
    5afc:	203fec26 	beq	r4,zero,5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    5b00:	10c000c7 	ldb	r3,3(r2)
    5b04:	1801781e 	bne	r3,zero,60e8 <_dtoa_r+0x6f8>
    5b08:	10c000c4 	addi	r3,r2,3
    5b0c:	d9802517 	ldw	r6,148(sp)
    5b10:	30c00015 	stw	r3,0(r6)
    5b14:	003fe606 	br	5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    5b18:	04e00034 	movhi	r19,32768
    5b1c:	9cffffc4 	addi	r19,r19,-1
    5b20:	00800044 	movi	r2,1
    5b24:	8ce6703a 	and	r19,r17,r19
    5b28:	80800015 	stw	r2,0(r16)
    5b2c:	9823883a 	mov	r17,r19
    5b30:	003fcc06 	br	5a64 <__alt_exception_stack_pointer+0xf8005a64>
    5b34:	d8800204 	addi	r2,sp,8
    5b38:	d8800015 	stw	r2,0(sp)
    5b3c:	d9c00104 	addi	r7,sp,4
    5b40:	900b883a 	mov	r5,r18
    5b44:	980d883a 	mov	r6,r19
    5b48:	e009883a 	mov	r4,fp
    5b4c:	8820d53a 	srli	r16,r17,20
    5b50:	00095ec0 	call	95ec <__d2b>
    5b54:	d8800915 	stw	r2,36(sp)
    5b58:	8001651e 	bne	r16,zero,60f0 <_dtoa_r+0x700>
    5b5c:	dd800217 	ldw	r22,8(sp)
    5b60:	dc000117 	ldw	r16,4(sp)
    5b64:	00800804 	movi	r2,32
    5b68:	b421883a 	add	r16,r22,r16
    5b6c:	80c10c84 	addi	r3,r16,1074
    5b70:	10c2d10e 	bge	r2,r3,66b8 <_dtoa_r+0xcc8>
    5b74:	00801004 	movi	r2,64
    5b78:	81010484 	addi	r4,r16,1042
    5b7c:	10c7c83a 	sub	r3,r2,r3
    5b80:	9108d83a 	srl	r4,r18,r4
    5b84:	88e2983a 	sll	r17,r17,r3
    5b88:	2448b03a 	or	r4,r4,r17
    5b8c:	000f6bc0 	call	f6bc <__floatunsidf>
    5b90:	017f8434 	movhi	r5,65040
    5b94:	01800044 	movi	r6,1
    5b98:	1009883a 	mov	r4,r2
    5b9c:	194b883a 	add	r5,r3,r5
    5ba0:	843fffc4 	addi	r16,r16,-1
    5ba4:	d9801115 	stw	r6,68(sp)
    5ba8:	000d883a 	mov	r6,zero
    5bac:	01cffe34 	movhi	r7,16376
    5bb0:	000ec640 	call	ec64 <__subdf3>
    5bb4:	0198dbf4 	movhi	r6,25455
    5bb8:	01cff4f4 	movhi	r7,16339
    5bbc:	3190d844 	addi	r6,r6,17249
    5bc0:	39e1e9c4 	addi	r7,r7,-30809
    5bc4:	1009883a 	mov	r4,r2
    5bc8:	180b883a 	mov	r5,r3
    5bcc:	000e3f80 	call	e3f8 <__muldf3>
    5bd0:	01a2d874 	movhi	r6,35681
    5bd4:	01cff1f4 	movhi	r7,16327
    5bd8:	31b22cc4 	addi	r6,r6,-14157
    5bdc:	39e28a04 	addi	r7,r7,-30168
    5be0:	180b883a 	mov	r5,r3
    5be4:	1009883a 	mov	r4,r2
    5be8:	000cf240 	call	cf24 <__adddf3>
    5bec:	8009883a 	mov	r4,r16
    5bf0:	1029883a 	mov	r20,r2
    5bf4:	1823883a 	mov	r17,r3
    5bf8:	000f5e00 	call	f5e0 <__floatsidf>
    5bfc:	019427f4 	movhi	r6,20639
    5c00:	01cff4f4 	movhi	r7,16339
    5c04:	319e7ec4 	addi	r6,r6,31227
    5c08:	39d104c4 	addi	r7,r7,17427
    5c0c:	1009883a 	mov	r4,r2
    5c10:	180b883a 	mov	r5,r3
    5c14:	000e3f80 	call	e3f8 <__muldf3>
    5c18:	100d883a 	mov	r6,r2
    5c1c:	180f883a 	mov	r7,r3
    5c20:	a009883a 	mov	r4,r20
    5c24:	880b883a 	mov	r5,r17
    5c28:	000cf240 	call	cf24 <__adddf3>
    5c2c:	1009883a 	mov	r4,r2
    5c30:	180b883a 	mov	r5,r3
    5c34:	1029883a 	mov	r20,r2
    5c38:	1823883a 	mov	r17,r3
    5c3c:	000f5600 	call	f560 <__fixdfsi>
    5c40:	000d883a 	mov	r6,zero
    5c44:	000f883a 	mov	r7,zero
    5c48:	a009883a 	mov	r4,r20
    5c4c:	880b883a 	mov	r5,r17
    5c50:	d8800515 	stw	r2,20(sp)
    5c54:	000e3040 	call	e304 <__ledf2>
    5c58:	10028716 	blt	r2,zero,6678 <_dtoa_r+0xc88>
    5c5c:	d8c00517 	ldw	r3,20(sp)
    5c60:	00800584 	movi	r2,22
    5c64:	10c27536 	bltu	r2,r3,663c <_dtoa_r+0xc4c>
    5c68:	180490fa 	slli	r2,r3,3
    5c6c:	00c00074 	movhi	r3,1
    5c70:	18caad04 	addi	r3,r3,10932
    5c74:	1885883a 	add	r2,r3,r2
    5c78:	11000017 	ldw	r4,0(r2)
    5c7c:	11400117 	ldw	r5,4(r2)
    5c80:	900d883a 	mov	r6,r18
    5c84:	980f883a 	mov	r7,r19
    5c88:	000e2280 	call	e228 <__gedf2>
    5c8c:	00828d0e 	bge	zero,r2,66c4 <_dtoa_r+0xcd4>
    5c90:	d9000517 	ldw	r4,20(sp)
    5c94:	d8000e15 	stw	zero,56(sp)
    5c98:	213fffc4 	addi	r4,r4,-1
    5c9c:	d9000515 	stw	r4,20(sp)
    5ca0:	b42dc83a 	sub	r22,r22,r16
    5ca4:	b5bfffc4 	addi	r22,r22,-1
    5ca8:	b0026f16 	blt	r22,zero,6668 <_dtoa_r+0xc78>
    5cac:	d8000815 	stw	zero,32(sp)
    5cb0:	d9c00517 	ldw	r7,20(sp)
    5cb4:	38026416 	blt	r7,zero,6648 <_dtoa_r+0xc58>
    5cb8:	b1ed883a 	add	r22,r22,r7
    5cbc:	d9c00d15 	stw	r7,52(sp)
    5cc0:	d8000a15 	stw	zero,40(sp)
    5cc4:	d9800317 	ldw	r6,12(sp)
    5cc8:	00800244 	movi	r2,9
    5ccc:	11811436 	bltu	r2,r6,6120 <_dtoa_r+0x730>
    5cd0:	00800144 	movi	r2,5
    5cd4:	1184e10e 	bge	r2,r6,705c <_dtoa_r+0x166c>
    5cd8:	31bfff04 	addi	r6,r6,-4
    5cdc:	d9800315 	stw	r6,12(sp)
    5ce0:	0023883a 	mov	r17,zero
    5ce4:	d9800317 	ldw	r6,12(sp)
    5ce8:	008000c4 	movi	r2,3
    5cec:	30836726 	beq	r6,r2,6a8c <_dtoa_r+0x109c>
    5cf0:	1183410e 	bge	r2,r6,69f8 <_dtoa_r+0x1008>
    5cf4:	d9c00317 	ldw	r7,12(sp)
    5cf8:	00800104 	movi	r2,4
    5cfc:	38827c26 	beq	r7,r2,66f0 <_dtoa_r+0xd00>
    5d00:	00800144 	movi	r2,5
    5d04:	3884c41e 	bne	r7,r2,7018 <_dtoa_r+0x1628>
    5d08:	00800044 	movi	r2,1
    5d0c:	d8800b15 	stw	r2,44(sp)
    5d10:	d8c00517 	ldw	r3,20(sp)
    5d14:	d9002217 	ldw	r4,136(sp)
    5d18:	1907883a 	add	r3,r3,r4
    5d1c:	19800044 	addi	r6,r3,1
    5d20:	d8c00c15 	stw	r3,48(sp)
    5d24:	d9800615 	stw	r6,24(sp)
    5d28:	0183a40e 	bge	zero,r6,6bbc <_dtoa_r+0x11cc>
    5d2c:	d9800617 	ldw	r6,24(sp)
    5d30:	3021883a 	mov	r16,r6
    5d34:	e0001115 	stw	zero,68(fp)
    5d38:	008005c4 	movi	r2,23
    5d3c:	1184c92e 	bgeu	r2,r6,7064 <_dtoa_r+0x1674>
    5d40:	00c00044 	movi	r3,1
    5d44:	00800104 	movi	r2,4
    5d48:	1085883a 	add	r2,r2,r2
    5d4c:	11000504 	addi	r4,r2,20
    5d50:	180b883a 	mov	r5,r3
    5d54:	18c00044 	addi	r3,r3,1
    5d58:	313ffb2e 	bgeu	r6,r4,5d48 <__alt_exception_stack_pointer+0xf8005d48>
    5d5c:	e1401115 	stw	r5,68(fp)
    5d60:	e009883a 	mov	r4,fp
    5d64:	000889c0 	call	889c <_Balloc>
    5d68:	d8800715 	stw	r2,28(sp)
    5d6c:	e0801015 	stw	r2,64(fp)
    5d70:	00800384 	movi	r2,14
    5d74:	1400f736 	bltu	r2,r16,6154 <_dtoa_r+0x764>
    5d78:	8800f626 	beq	r17,zero,6154 <_dtoa_r+0x764>
    5d7c:	d9c00517 	ldw	r7,20(sp)
    5d80:	01c39a0e 	bge	zero,r7,6bec <_dtoa_r+0x11fc>
    5d84:	388003cc 	andi	r2,r7,15
    5d88:	100490fa 	slli	r2,r2,3
    5d8c:	382bd13a 	srai	r21,r7,4
    5d90:	00c00074 	movhi	r3,1
    5d94:	18caad04 	addi	r3,r3,10932
    5d98:	1885883a 	add	r2,r3,r2
    5d9c:	a8c0040c 	andi	r3,r21,16
    5da0:	12400017 	ldw	r9,0(r2)
    5da4:	12000117 	ldw	r8,4(r2)
    5da8:	18037926 	beq	r3,zero,6b90 <_dtoa_r+0x11a0>
    5dac:	00800074 	movhi	r2,1
    5db0:	108aa304 	addi	r2,r2,10892
    5db4:	11800817 	ldw	r6,32(r2)
    5db8:	11c00917 	ldw	r7,36(r2)
    5dbc:	9009883a 	mov	r4,r18
    5dc0:	980b883a 	mov	r5,r19
    5dc4:	da001715 	stw	r8,92(sp)
    5dc8:	da401615 	stw	r9,88(sp)
    5dcc:	000d7d00 	call	d7d0 <__divdf3>
    5dd0:	da001717 	ldw	r8,92(sp)
    5dd4:	da401617 	ldw	r9,88(sp)
    5dd8:	ad4003cc 	andi	r21,r21,15
    5ddc:	040000c4 	movi	r16,3
    5de0:	1023883a 	mov	r17,r2
    5de4:	1829883a 	mov	r20,r3
    5de8:	a8001126 	beq	r21,zero,5e30 <_dtoa_r+0x440>
    5dec:	05c00074 	movhi	r23,1
    5df0:	bdcaa304 	addi	r23,r23,10892
    5df4:	4805883a 	mov	r2,r9
    5df8:	4007883a 	mov	r3,r8
    5dfc:	a980004c 	andi	r6,r21,1
    5e00:	1009883a 	mov	r4,r2
    5e04:	a82bd07a 	srai	r21,r21,1
    5e08:	180b883a 	mov	r5,r3
    5e0c:	30000426 	beq	r6,zero,5e20 <_dtoa_r+0x430>
    5e10:	b9800017 	ldw	r6,0(r23)
    5e14:	b9c00117 	ldw	r7,4(r23)
    5e18:	84000044 	addi	r16,r16,1
    5e1c:	000e3f80 	call	e3f8 <__muldf3>
    5e20:	bdc00204 	addi	r23,r23,8
    5e24:	a83ff51e 	bne	r21,zero,5dfc <__alt_exception_stack_pointer+0xf8005dfc>
    5e28:	1013883a 	mov	r9,r2
    5e2c:	1811883a 	mov	r8,r3
    5e30:	480d883a 	mov	r6,r9
    5e34:	400f883a 	mov	r7,r8
    5e38:	8809883a 	mov	r4,r17
    5e3c:	a00b883a 	mov	r5,r20
    5e40:	000d7d00 	call	d7d0 <__divdf3>
    5e44:	d8800f15 	stw	r2,60(sp)
    5e48:	d8c01015 	stw	r3,64(sp)
    5e4c:	d8c00e17 	ldw	r3,56(sp)
    5e50:	18000626 	beq	r3,zero,5e6c <_dtoa_r+0x47c>
    5e54:	d9000f17 	ldw	r4,60(sp)
    5e58:	d9401017 	ldw	r5,64(sp)
    5e5c:	000d883a 	mov	r6,zero
    5e60:	01cffc34 	movhi	r7,16368
    5e64:	000e3040 	call	e304 <__ledf2>
    5e68:	10040b16 	blt	r2,zero,6e98 <_dtoa_r+0x14a8>
    5e6c:	8009883a 	mov	r4,r16
    5e70:	000f5e00 	call	f5e0 <__floatsidf>
    5e74:	d9800f17 	ldw	r6,60(sp)
    5e78:	d9c01017 	ldw	r7,64(sp)
    5e7c:	1009883a 	mov	r4,r2
    5e80:	180b883a 	mov	r5,r3
    5e84:	000e3f80 	call	e3f8 <__muldf3>
    5e88:	000d883a 	mov	r6,zero
    5e8c:	01d00734 	movhi	r7,16412
    5e90:	1009883a 	mov	r4,r2
    5e94:	180b883a 	mov	r5,r3
    5e98:	000cf240 	call	cf24 <__adddf3>
    5e9c:	1021883a 	mov	r16,r2
    5ea0:	d8800617 	ldw	r2,24(sp)
    5ea4:	047f3034 	movhi	r17,64704
    5ea8:	1c63883a 	add	r17,r3,r17
    5eac:	10031826 	beq	r2,zero,6b10 <_dtoa_r+0x1120>
    5eb0:	d8c00517 	ldw	r3,20(sp)
    5eb4:	db000617 	ldw	r12,24(sp)
    5eb8:	d8c01315 	stw	r3,76(sp)
    5ebc:	d9000b17 	ldw	r4,44(sp)
    5ec0:	20038f26 	beq	r4,zero,6d00 <_dtoa_r+0x1310>
    5ec4:	60bfffc4 	addi	r2,r12,-1
    5ec8:	100490fa 	slli	r2,r2,3
    5ecc:	00c00074 	movhi	r3,1
    5ed0:	18caad04 	addi	r3,r3,10932
    5ed4:	1885883a 	add	r2,r3,r2
    5ed8:	11800017 	ldw	r6,0(r2)
    5edc:	11c00117 	ldw	r7,4(r2)
    5ee0:	d8800717 	ldw	r2,28(sp)
    5ee4:	0009883a 	mov	r4,zero
    5ee8:	014ff834 	movhi	r5,16352
    5eec:	db001615 	stw	r12,88(sp)
    5ef0:	15c00044 	addi	r23,r2,1
    5ef4:	000d7d00 	call	d7d0 <__divdf3>
    5ef8:	800d883a 	mov	r6,r16
    5efc:	880f883a 	mov	r7,r17
    5f00:	1009883a 	mov	r4,r2
    5f04:	180b883a 	mov	r5,r3
    5f08:	000ec640 	call	ec64 <__subdf3>
    5f0c:	d9401017 	ldw	r5,64(sp)
    5f10:	d9000f17 	ldw	r4,60(sp)
    5f14:	102b883a 	mov	r21,r2
    5f18:	d8c01215 	stw	r3,72(sp)
    5f1c:	000f5600 	call	f560 <__fixdfsi>
    5f20:	1009883a 	mov	r4,r2
    5f24:	1029883a 	mov	r20,r2
    5f28:	000f5e00 	call	f5e0 <__floatsidf>
    5f2c:	d9000f17 	ldw	r4,60(sp)
    5f30:	d9401017 	ldw	r5,64(sp)
    5f34:	100d883a 	mov	r6,r2
    5f38:	180f883a 	mov	r7,r3
    5f3c:	000ec640 	call	ec64 <__subdf3>
    5f40:	1823883a 	mov	r17,r3
    5f44:	d8c00717 	ldw	r3,28(sp)
    5f48:	d9401217 	ldw	r5,72(sp)
    5f4c:	a2000c04 	addi	r8,r20,48
    5f50:	1021883a 	mov	r16,r2
    5f54:	1a000005 	stb	r8,0(r3)
    5f58:	800d883a 	mov	r6,r16
    5f5c:	880f883a 	mov	r7,r17
    5f60:	a809883a 	mov	r4,r21
    5f64:	4029883a 	mov	r20,r8
    5f68:	000e2280 	call	e228 <__gedf2>
    5f6c:	00841d16 	blt	zero,r2,6fe4 <_dtoa_r+0x15f4>
    5f70:	800d883a 	mov	r6,r16
    5f74:	880f883a 	mov	r7,r17
    5f78:	0009883a 	mov	r4,zero
    5f7c:	014ffc34 	movhi	r5,16368
    5f80:	000ec640 	call	ec64 <__subdf3>
    5f84:	d9401217 	ldw	r5,72(sp)
    5f88:	100d883a 	mov	r6,r2
    5f8c:	180f883a 	mov	r7,r3
    5f90:	a809883a 	mov	r4,r21
    5f94:	000e2280 	call	e228 <__gedf2>
    5f98:	db001617 	ldw	r12,88(sp)
    5f9c:	00840e16 	blt	zero,r2,6fd8 <_dtoa_r+0x15e8>
    5fa0:	00800044 	movi	r2,1
    5fa4:	13006b0e 	bge	r2,r12,6154 <_dtoa_r+0x764>
    5fa8:	d9000717 	ldw	r4,28(sp)
    5fac:	dd800f15 	stw	r22,60(sp)
    5fb0:	dcc01015 	stw	r19,64(sp)
    5fb4:	2319883a 	add	r12,r4,r12
    5fb8:	dcc01217 	ldw	r19,72(sp)
    5fbc:	602d883a 	mov	r22,r12
    5fc0:	dc801215 	stw	r18,72(sp)
    5fc4:	b825883a 	mov	r18,r23
    5fc8:	00000906 	br	5ff0 <_dtoa_r+0x600>
    5fcc:	000ec640 	call	ec64 <__subdf3>
    5fd0:	a80d883a 	mov	r6,r21
    5fd4:	980f883a 	mov	r7,r19
    5fd8:	1009883a 	mov	r4,r2
    5fdc:	180b883a 	mov	r5,r3
    5fe0:	000e3040 	call	e304 <__ledf2>
    5fe4:	1003e816 	blt	r2,zero,6f88 <_dtoa_r+0x1598>
    5fe8:	b825883a 	mov	r18,r23
    5fec:	bd83e926 	beq	r23,r22,6f94 <_dtoa_r+0x15a4>
    5ff0:	a809883a 	mov	r4,r21
    5ff4:	980b883a 	mov	r5,r19
    5ff8:	000d883a 	mov	r6,zero
    5ffc:	01d00934 	movhi	r7,16420
    6000:	000e3f80 	call	e3f8 <__muldf3>
    6004:	000d883a 	mov	r6,zero
    6008:	01d00934 	movhi	r7,16420
    600c:	8009883a 	mov	r4,r16
    6010:	880b883a 	mov	r5,r17
    6014:	102b883a 	mov	r21,r2
    6018:	1827883a 	mov	r19,r3
    601c:	000e3f80 	call	e3f8 <__muldf3>
    6020:	180b883a 	mov	r5,r3
    6024:	1009883a 	mov	r4,r2
    6028:	1821883a 	mov	r16,r3
    602c:	1023883a 	mov	r17,r2
    6030:	000f5600 	call	f560 <__fixdfsi>
    6034:	1009883a 	mov	r4,r2
    6038:	1029883a 	mov	r20,r2
    603c:	000f5e00 	call	f5e0 <__floatsidf>
    6040:	8809883a 	mov	r4,r17
    6044:	800b883a 	mov	r5,r16
    6048:	100d883a 	mov	r6,r2
    604c:	180f883a 	mov	r7,r3
    6050:	000ec640 	call	ec64 <__subdf3>
    6054:	a5000c04 	addi	r20,r20,48
    6058:	a80d883a 	mov	r6,r21
    605c:	980f883a 	mov	r7,r19
    6060:	1009883a 	mov	r4,r2
    6064:	180b883a 	mov	r5,r3
    6068:	95000005 	stb	r20,0(r18)
    606c:	1021883a 	mov	r16,r2
    6070:	1823883a 	mov	r17,r3
    6074:	000e3040 	call	e304 <__ledf2>
    6078:	bdc00044 	addi	r23,r23,1
    607c:	800d883a 	mov	r6,r16
    6080:	880f883a 	mov	r7,r17
    6084:	0009883a 	mov	r4,zero
    6088:	014ffc34 	movhi	r5,16368
    608c:	103fcf0e 	bge	r2,zero,5fcc <__alt_exception_stack_pointer+0xf8005fcc>
    6090:	d8c01317 	ldw	r3,76(sp)
    6094:	d8c00515 	stw	r3,20(sp)
    6098:	d9400917 	ldw	r5,36(sp)
    609c:	e009883a 	mov	r4,fp
    60a0:	00089440 	call	8944 <_Bfree>
    60a4:	d9000517 	ldw	r4,20(sp)
    60a8:	d9802317 	ldw	r6,140(sp)
    60ac:	d9c02517 	ldw	r7,148(sp)
    60b0:	b8000005 	stb	zero,0(r23)
    60b4:	20800044 	addi	r2,r4,1
    60b8:	30800015 	stw	r2,0(r6)
    60bc:	3802aa26 	beq	r7,zero,6b68 <_dtoa_r+0x1178>
    60c0:	3dc00015 	stw	r23,0(r7)
    60c4:	d8800717 	ldw	r2,28(sp)
    60c8:	003e7906 	br	5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    60cc:	00800434 	movhi	r2,16
    60d0:	10bfffc4 	addi	r2,r2,-1
    60d4:	88a2703a 	and	r17,r17,r2
    60d8:	883e851e 	bne	r17,zero,5af0 <__alt_exception_stack_pointer+0xf8005af0>
    60dc:	00800074 	movhi	r2,1
    60e0:	108a8f04 	addi	r2,r2,10812
    60e4:	003e8406 	br	5af8 <__alt_exception_stack_pointer+0xf8005af8>
    60e8:	10c00204 	addi	r3,r2,8
    60ec:	003e8706 	br	5b0c <__alt_exception_stack_pointer+0xf8005b0c>
    60f0:	01400434 	movhi	r5,16
    60f4:	297fffc4 	addi	r5,r5,-1
    60f8:	994a703a 	and	r5,r19,r5
    60fc:	9009883a 	mov	r4,r18
    6100:	843f0044 	addi	r16,r16,-1023
    6104:	294ffc34 	orhi	r5,r5,16368
    6108:	dd800217 	ldw	r22,8(sp)
    610c:	d8001115 	stw	zero,68(sp)
    6110:	003ea506 	br	5ba8 <__alt_exception_stack_pointer+0xf8005ba8>
    6114:	00800074 	movhi	r2,1
    6118:	108a8604 	addi	r2,r2,10776
    611c:	003e6406 	br	5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    6120:	e0001115 	stw	zero,68(fp)
    6124:	000b883a 	mov	r5,zero
    6128:	e009883a 	mov	r4,fp
    612c:	000889c0 	call	889c <_Balloc>
    6130:	01bfffc4 	movi	r6,-1
    6134:	01c00044 	movi	r7,1
    6138:	d8800715 	stw	r2,28(sp)
    613c:	d9800c15 	stw	r6,48(sp)
    6140:	e0801015 	stw	r2,64(fp)
    6144:	d8000315 	stw	zero,12(sp)
    6148:	d9c00b15 	stw	r7,44(sp)
    614c:	d9800615 	stw	r6,24(sp)
    6150:	d8002215 	stw	zero,136(sp)
    6154:	d8800117 	ldw	r2,4(sp)
    6158:	10008916 	blt	r2,zero,6380 <_dtoa_r+0x990>
    615c:	d9000517 	ldw	r4,20(sp)
    6160:	00c00384 	movi	r3,14
    6164:	19008616 	blt	r3,r4,6380 <_dtoa_r+0x990>
    6168:	200490fa 	slli	r2,r4,3
    616c:	00c00074 	movhi	r3,1
    6170:	d9802217 	ldw	r6,136(sp)
    6174:	18caad04 	addi	r3,r3,10932
    6178:	1885883a 	add	r2,r3,r2
    617c:	14000017 	ldw	r16,0(r2)
    6180:	14400117 	ldw	r17,4(r2)
    6184:	30016316 	blt	r6,zero,6714 <_dtoa_r+0xd24>
    6188:	800d883a 	mov	r6,r16
    618c:	880f883a 	mov	r7,r17
    6190:	9009883a 	mov	r4,r18
    6194:	980b883a 	mov	r5,r19
    6198:	000d7d00 	call	d7d0 <__divdf3>
    619c:	180b883a 	mov	r5,r3
    61a0:	1009883a 	mov	r4,r2
    61a4:	000f5600 	call	f560 <__fixdfsi>
    61a8:	1009883a 	mov	r4,r2
    61ac:	102b883a 	mov	r21,r2
    61b0:	000f5e00 	call	f5e0 <__floatsidf>
    61b4:	800d883a 	mov	r6,r16
    61b8:	880f883a 	mov	r7,r17
    61bc:	1009883a 	mov	r4,r2
    61c0:	180b883a 	mov	r5,r3
    61c4:	000e3f80 	call	e3f8 <__muldf3>
    61c8:	100d883a 	mov	r6,r2
    61cc:	180f883a 	mov	r7,r3
    61d0:	9009883a 	mov	r4,r18
    61d4:	980b883a 	mov	r5,r19
    61d8:	000ec640 	call	ec64 <__subdf3>
    61dc:	d9c00717 	ldw	r7,28(sp)
    61e0:	1009883a 	mov	r4,r2
    61e4:	a8800c04 	addi	r2,r21,48
    61e8:	38800005 	stb	r2,0(r7)
    61ec:	3dc00044 	addi	r23,r7,1
    61f0:	d9c00617 	ldw	r7,24(sp)
    61f4:	01800044 	movi	r6,1
    61f8:	180b883a 	mov	r5,r3
    61fc:	2005883a 	mov	r2,r4
    6200:	39803826 	beq	r7,r6,62e4 <_dtoa_r+0x8f4>
    6204:	000d883a 	mov	r6,zero
    6208:	01d00934 	movhi	r7,16420
    620c:	000e3f80 	call	e3f8 <__muldf3>
    6210:	000d883a 	mov	r6,zero
    6214:	000f883a 	mov	r7,zero
    6218:	1009883a 	mov	r4,r2
    621c:	180b883a 	mov	r5,r3
    6220:	1025883a 	mov	r18,r2
    6224:	1827883a 	mov	r19,r3
    6228:	000e1a00 	call	e1a0 <__eqdf2>
    622c:	103f9a26 	beq	r2,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6230:	d9c00617 	ldw	r7,24(sp)
    6234:	d8c00717 	ldw	r3,28(sp)
    6238:	b829883a 	mov	r20,r23
    623c:	38bfffc4 	addi	r2,r7,-1
    6240:	18ad883a 	add	r22,r3,r2
    6244:	00000a06 	br	6270 <_dtoa_r+0x880>
    6248:	000e3f80 	call	e3f8 <__muldf3>
    624c:	000d883a 	mov	r6,zero
    6250:	000f883a 	mov	r7,zero
    6254:	1009883a 	mov	r4,r2
    6258:	180b883a 	mov	r5,r3
    625c:	1025883a 	mov	r18,r2
    6260:	1827883a 	mov	r19,r3
    6264:	b829883a 	mov	r20,r23
    6268:	000e1a00 	call	e1a0 <__eqdf2>
    626c:	103f8a26 	beq	r2,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6270:	800d883a 	mov	r6,r16
    6274:	880f883a 	mov	r7,r17
    6278:	9009883a 	mov	r4,r18
    627c:	980b883a 	mov	r5,r19
    6280:	000d7d00 	call	d7d0 <__divdf3>
    6284:	180b883a 	mov	r5,r3
    6288:	1009883a 	mov	r4,r2
    628c:	000f5600 	call	f560 <__fixdfsi>
    6290:	1009883a 	mov	r4,r2
    6294:	102b883a 	mov	r21,r2
    6298:	000f5e00 	call	f5e0 <__floatsidf>
    629c:	800d883a 	mov	r6,r16
    62a0:	880f883a 	mov	r7,r17
    62a4:	1009883a 	mov	r4,r2
    62a8:	180b883a 	mov	r5,r3
    62ac:	000e3f80 	call	e3f8 <__muldf3>
    62b0:	100d883a 	mov	r6,r2
    62b4:	180f883a 	mov	r7,r3
    62b8:	9009883a 	mov	r4,r18
    62bc:	980b883a 	mov	r5,r19
    62c0:	000ec640 	call	ec64 <__subdf3>
    62c4:	aa000c04 	addi	r8,r21,48
    62c8:	a2000005 	stb	r8,0(r20)
    62cc:	000d883a 	mov	r6,zero
    62d0:	01d00934 	movhi	r7,16420
    62d4:	1009883a 	mov	r4,r2
    62d8:	180b883a 	mov	r5,r3
    62dc:	a5c00044 	addi	r23,r20,1
    62e0:	b53fd91e 	bne	r22,r20,6248 <__alt_exception_stack_pointer+0xf8006248>
    62e4:	100d883a 	mov	r6,r2
    62e8:	180f883a 	mov	r7,r3
    62ec:	1009883a 	mov	r4,r2
    62f0:	180b883a 	mov	r5,r3
    62f4:	000cf240 	call	cf24 <__adddf3>
    62f8:	100d883a 	mov	r6,r2
    62fc:	180f883a 	mov	r7,r3
    6300:	8009883a 	mov	r4,r16
    6304:	880b883a 	mov	r5,r17
    6308:	1027883a 	mov	r19,r2
    630c:	1825883a 	mov	r18,r3
    6310:	000e3040 	call	e304 <__ledf2>
    6314:	10000816 	blt	r2,zero,6338 <_dtoa_r+0x948>
    6318:	980d883a 	mov	r6,r19
    631c:	900f883a 	mov	r7,r18
    6320:	8009883a 	mov	r4,r16
    6324:	880b883a 	mov	r5,r17
    6328:	000e1a00 	call	e1a0 <__eqdf2>
    632c:	103f5a1e 	bne	r2,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6330:	ad40004c 	andi	r21,r21,1
    6334:	a83f5826 	beq	r21,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6338:	bd3fffc3 	ldbu	r20,-1(r23)
    633c:	b8bfffc4 	addi	r2,r23,-1
    6340:	1007883a 	mov	r3,r2
    6344:	01400e44 	movi	r5,57
    6348:	d9800717 	ldw	r6,28(sp)
    634c:	00000506 	br	6364 <_dtoa_r+0x974>
    6350:	18ffffc4 	addi	r3,r3,-1
    6354:	11824726 	beq	r2,r6,6c74 <_dtoa_r+0x1284>
    6358:	1d000003 	ldbu	r20,0(r3)
    635c:	102f883a 	mov	r23,r2
    6360:	10bfffc4 	addi	r2,r2,-1
    6364:	a1003fcc 	andi	r4,r20,255
    6368:	2100201c 	xori	r4,r4,128
    636c:	213fe004 	addi	r4,r4,-128
    6370:	217ff726 	beq	r4,r5,6350 <__alt_exception_stack_pointer+0xf8006350>
    6374:	a2000044 	addi	r8,r20,1
    6378:	12000005 	stb	r8,0(r2)
    637c:	003f4606 	br	6098 <__alt_exception_stack_pointer+0xf8006098>
    6380:	d9000b17 	ldw	r4,44(sp)
    6384:	2000c826 	beq	r4,zero,66a8 <_dtoa_r+0xcb8>
    6388:	d9800317 	ldw	r6,12(sp)
    638c:	00c00044 	movi	r3,1
    6390:	1980f90e 	bge	r3,r6,6778 <_dtoa_r+0xd88>
    6394:	d8800617 	ldw	r2,24(sp)
    6398:	d8c00a17 	ldw	r3,40(sp)
    639c:	157fffc4 	addi	r21,r2,-1
    63a0:	1d41f316 	blt	r3,r21,6b70 <_dtoa_r+0x1180>
    63a4:	1d6bc83a 	sub	r21,r3,r21
    63a8:	d9c00617 	ldw	r7,24(sp)
    63ac:	3802aa16 	blt	r7,zero,6e58 <_dtoa_r+0x1468>
    63b0:	dd000817 	ldw	r20,32(sp)
    63b4:	d8800617 	ldw	r2,24(sp)
    63b8:	d8c00817 	ldw	r3,32(sp)
    63bc:	01400044 	movi	r5,1
    63c0:	e009883a 	mov	r4,fp
    63c4:	1887883a 	add	r3,r3,r2
    63c8:	d8c00815 	stw	r3,32(sp)
    63cc:	b0ad883a 	add	r22,r22,r2
    63d0:	0008cd00 	call	8cd0 <__i2b>
    63d4:	1023883a 	mov	r17,r2
    63d8:	a0000826 	beq	r20,zero,63fc <_dtoa_r+0xa0c>
    63dc:	0580070e 	bge	zero,r22,63fc <_dtoa_r+0xa0c>
    63e0:	a005883a 	mov	r2,r20
    63e4:	b500b916 	blt	r22,r20,66cc <_dtoa_r+0xcdc>
    63e8:	d9000817 	ldw	r4,32(sp)
    63ec:	a0a9c83a 	sub	r20,r20,r2
    63f0:	b0adc83a 	sub	r22,r22,r2
    63f4:	2089c83a 	sub	r4,r4,r2
    63f8:	d9000815 	stw	r4,32(sp)
    63fc:	d9800a17 	ldw	r6,40(sp)
    6400:	0181810e 	bge	zero,r6,6a08 <_dtoa_r+0x1018>
    6404:	d9c00b17 	ldw	r7,44(sp)
    6408:	3800b326 	beq	r7,zero,66d8 <_dtoa_r+0xce8>
    640c:	a800b226 	beq	r21,zero,66d8 <_dtoa_r+0xce8>
    6410:	880b883a 	mov	r5,r17
    6414:	a80d883a 	mov	r6,r21
    6418:	e009883a 	mov	r4,fp
    641c:	0008f980 	call	8f98 <__pow5mult>
    6420:	d9800917 	ldw	r6,36(sp)
    6424:	100b883a 	mov	r5,r2
    6428:	e009883a 	mov	r4,fp
    642c:	1023883a 	mov	r17,r2
    6430:	0008d0c0 	call	8d0c <__multiply>
    6434:	1021883a 	mov	r16,r2
    6438:	d8800a17 	ldw	r2,40(sp)
    643c:	d9400917 	ldw	r5,36(sp)
    6440:	e009883a 	mov	r4,fp
    6444:	1545c83a 	sub	r2,r2,r21
    6448:	d8800a15 	stw	r2,40(sp)
    644c:	00089440 	call	8944 <_Bfree>
    6450:	d8c00a17 	ldw	r3,40(sp)
    6454:	18009f1e 	bne	r3,zero,66d4 <_dtoa_r+0xce4>
    6458:	05c00044 	movi	r23,1
    645c:	e009883a 	mov	r4,fp
    6460:	b80b883a 	mov	r5,r23
    6464:	0008cd00 	call	8cd0 <__i2b>
    6468:	d9000d17 	ldw	r4,52(sp)
    646c:	102b883a 	mov	r21,r2
    6470:	2000ce26 	beq	r4,zero,67ac <_dtoa_r+0xdbc>
    6474:	200d883a 	mov	r6,r4
    6478:	100b883a 	mov	r5,r2
    647c:	e009883a 	mov	r4,fp
    6480:	0008f980 	call	8f98 <__pow5mult>
    6484:	d9800317 	ldw	r6,12(sp)
    6488:	102b883a 	mov	r21,r2
    648c:	b981810e 	bge	r23,r6,6a94 <_dtoa_r+0x10a4>
    6490:	0027883a 	mov	r19,zero
    6494:	a8800417 	ldw	r2,16(r21)
    6498:	05c00804 	movi	r23,32
    649c:	10800104 	addi	r2,r2,4
    64a0:	1085883a 	add	r2,r2,r2
    64a4:	1085883a 	add	r2,r2,r2
    64a8:	a885883a 	add	r2,r21,r2
    64ac:	11000017 	ldw	r4,0(r2)
    64b0:	0008bb80 	call	8bb8 <__hi0bits>
    64b4:	b885c83a 	sub	r2,r23,r2
    64b8:	1585883a 	add	r2,r2,r22
    64bc:	108007cc 	andi	r2,r2,31
    64c0:	1000b326 	beq	r2,zero,6790 <_dtoa_r+0xda0>
    64c4:	00c00804 	movi	r3,32
    64c8:	1887c83a 	sub	r3,r3,r2
    64cc:	01000104 	movi	r4,4
    64d0:	20c2cd0e 	bge	r4,r3,7008 <_dtoa_r+0x1618>
    64d4:	00c00704 	movi	r3,28
    64d8:	1885c83a 	sub	r2,r3,r2
    64dc:	d8c00817 	ldw	r3,32(sp)
    64e0:	a0a9883a 	add	r20,r20,r2
    64e4:	b0ad883a 	add	r22,r22,r2
    64e8:	1887883a 	add	r3,r3,r2
    64ec:	d8c00815 	stw	r3,32(sp)
    64f0:	d9800817 	ldw	r6,32(sp)
    64f4:	0180040e 	bge	zero,r6,6508 <_dtoa_r+0xb18>
    64f8:	800b883a 	mov	r5,r16
    64fc:	e009883a 	mov	r4,fp
    6500:	00090d80 	call	90d8 <__lshift>
    6504:	1021883a 	mov	r16,r2
    6508:	0580050e 	bge	zero,r22,6520 <_dtoa_r+0xb30>
    650c:	a80b883a 	mov	r5,r21
    6510:	b00d883a 	mov	r6,r22
    6514:	e009883a 	mov	r4,fp
    6518:	00090d80 	call	90d8 <__lshift>
    651c:	102b883a 	mov	r21,r2
    6520:	d9c00e17 	ldw	r7,56(sp)
    6524:	3801211e 	bne	r7,zero,69ac <_dtoa_r+0xfbc>
    6528:	d9800617 	ldw	r6,24(sp)
    652c:	0181380e 	bge	zero,r6,6a10 <_dtoa_r+0x1020>
    6530:	d8c00b17 	ldw	r3,44(sp)
    6534:	1800ab1e 	bne	r3,zero,67e4 <_dtoa_r+0xdf4>
    6538:	dc800717 	ldw	r18,28(sp)
    653c:	dcc00617 	ldw	r19,24(sp)
    6540:	9029883a 	mov	r20,r18
    6544:	00000206 	br	6550 <_dtoa_r+0xb60>
    6548:	000896c0 	call	896c <__multadd>
    654c:	1021883a 	mov	r16,r2
    6550:	a80b883a 	mov	r5,r21
    6554:	8009883a 	mov	r4,r16
    6558:	00057c80 	call	57c8 <quorem>
    655c:	10800c04 	addi	r2,r2,48
    6560:	90800005 	stb	r2,0(r18)
    6564:	94800044 	addi	r18,r18,1
    6568:	9507c83a 	sub	r3,r18,r20
    656c:	000f883a 	mov	r7,zero
    6570:	01800284 	movi	r6,10
    6574:	800b883a 	mov	r5,r16
    6578:	e009883a 	mov	r4,fp
    657c:	1cfff216 	blt	r3,r19,6548 <__alt_exception_stack_pointer+0xf8006548>
    6580:	1011883a 	mov	r8,r2
    6584:	d8800617 	ldw	r2,24(sp)
    6588:	0082370e 	bge	zero,r2,6e68 <_dtoa_r+0x1478>
    658c:	d9000717 	ldw	r4,28(sp)
    6590:	0025883a 	mov	r18,zero
    6594:	20af883a 	add	r23,r4,r2
    6598:	01800044 	movi	r6,1
    659c:	800b883a 	mov	r5,r16
    65a0:	e009883a 	mov	r4,fp
    65a4:	da001715 	stw	r8,92(sp)
    65a8:	00090d80 	call	90d8 <__lshift>
    65ac:	a80b883a 	mov	r5,r21
    65b0:	1009883a 	mov	r4,r2
    65b4:	d8800915 	stw	r2,36(sp)
    65b8:	00092200 	call	9220 <__mcmp>
    65bc:	da001717 	ldw	r8,92(sp)
    65c0:	0081800e 	bge	zero,r2,6bc4 <_dtoa_r+0x11d4>
    65c4:	b93fffc3 	ldbu	r4,-1(r23)
    65c8:	b8bfffc4 	addi	r2,r23,-1
    65cc:	1007883a 	mov	r3,r2
    65d0:	01800e44 	movi	r6,57
    65d4:	d9c00717 	ldw	r7,28(sp)
    65d8:	00000506 	br	65f0 <_dtoa_r+0xc00>
    65dc:	18ffffc4 	addi	r3,r3,-1
    65e0:	11c12326 	beq	r2,r7,6a70 <_dtoa_r+0x1080>
    65e4:	19000003 	ldbu	r4,0(r3)
    65e8:	102f883a 	mov	r23,r2
    65ec:	10bfffc4 	addi	r2,r2,-1
    65f0:	21403fcc 	andi	r5,r4,255
    65f4:	2940201c 	xori	r5,r5,128
    65f8:	297fe004 	addi	r5,r5,-128
    65fc:	29bff726 	beq	r5,r6,65dc <__alt_exception_stack_pointer+0xf80065dc>
    6600:	21000044 	addi	r4,r4,1
    6604:	11000005 	stb	r4,0(r2)
    6608:	a80b883a 	mov	r5,r21
    660c:	e009883a 	mov	r4,fp
    6610:	00089440 	call	8944 <_Bfree>
    6614:	883ea026 	beq	r17,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6618:	90000426 	beq	r18,zero,662c <_dtoa_r+0xc3c>
    661c:	94400326 	beq	r18,r17,662c <_dtoa_r+0xc3c>
    6620:	900b883a 	mov	r5,r18
    6624:	e009883a 	mov	r4,fp
    6628:	00089440 	call	8944 <_Bfree>
    662c:	880b883a 	mov	r5,r17
    6630:	e009883a 	mov	r4,fp
    6634:	00089440 	call	8944 <_Bfree>
    6638:	003e9706 	br	6098 <__alt_exception_stack_pointer+0xf8006098>
    663c:	01800044 	movi	r6,1
    6640:	d9800e15 	stw	r6,56(sp)
    6644:	003d9606 	br	5ca0 <__alt_exception_stack_pointer+0xf8005ca0>
    6648:	d8800817 	ldw	r2,32(sp)
    664c:	d8c00517 	ldw	r3,20(sp)
    6650:	d8000d15 	stw	zero,52(sp)
    6654:	10c5c83a 	sub	r2,r2,r3
    6658:	00c9c83a 	sub	r4,zero,r3
    665c:	d8800815 	stw	r2,32(sp)
    6660:	d9000a15 	stw	r4,40(sp)
    6664:	003d9706 	br	5cc4 <__alt_exception_stack_pointer+0xf8005cc4>
    6668:	05adc83a 	sub	r22,zero,r22
    666c:	dd800815 	stw	r22,32(sp)
    6670:	002d883a 	mov	r22,zero
    6674:	003d8e06 	br	5cb0 <__alt_exception_stack_pointer+0xf8005cb0>
    6678:	d9000517 	ldw	r4,20(sp)
    667c:	000f5e00 	call	f5e0 <__floatsidf>
    6680:	100d883a 	mov	r6,r2
    6684:	180f883a 	mov	r7,r3
    6688:	a009883a 	mov	r4,r20
    668c:	880b883a 	mov	r5,r17
    6690:	000e1a00 	call	e1a0 <__eqdf2>
    6694:	103d7126 	beq	r2,zero,5c5c <__alt_exception_stack_pointer+0xf8005c5c>
    6698:	d9c00517 	ldw	r7,20(sp)
    669c:	39ffffc4 	addi	r7,r7,-1
    66a0:	d9c00515 	stw	r7,20(sp)
    66a4:	003d6d06 	br	5c5c <__alt_exception_stack_pointer+0xf8005c5c>
    66a8:	dd400a17 	ldw	r21,40(sp)
    66ac:	dd000817 	ldw	r20,32(sp)
    66b0:	0023883a 	mov	r17,zero
    66b4:	003f4806 	br	63d8 <__alt_exception_stack_pointer+0xf80063d8>
    66b8:	10e3c83a 	sub	r17,r2,r3
    66bc:	9448983a 	sll	r4,r18,r17
    66c0:	003d3206 	br	5b8c <__alt_exception_stack_pointer+0xf8005b8c>
    66c4:	d8000e15 	stw	zero,56(sp)
    66c8:	003d7506 	br	5ca0 <__alt_exception_stack_pointer+0xf8005ca0>
    66cc:	b005883a 	mov	r2,r22
    66d0:	003f4506 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>
    66d4:	dc000915 	stw	r16,36(sp)
    66d8:	d9800a17 	ldw	r6,40(sp)
    66dc:	d9400917 	ldw	r5,36(sp)
    66e0:	e009883a 	mov	r4,fp
    66e4:	0008f980 	call	8f98 <__pow5mult>
    66e8:	1021883a 	mov	r16,r2
    66ec:	003f5a06 	br	6458 <__alt_exception_stack_pointer+0xf8006458>
    66f0:	01c00044 	movi	r7,1
    66f4:	d9c00b15 	stw	r7,44(sp)
    66f8:	d8802217 	ldw	r2,136(sp)
    66fc:	0081280e 	bge	zero,r2,6ba0 <_dtoa_r+0x11b0>
    6700:	100d883a 	mov	r6,r2
    6704:	1021883a 	mov	r16,r2
    6708:	d8800c15 	stw	r2,48(sp)
    670c:	d8800615 	stw	r2,24(sp)
    6710:	003d8806 	br	5d34 <__alt_exception_stack_pointer+0xf8005d34>
    6714:	d8800617 	ldw	r2,24(sp)
    6718:	00be9b16 	blt	zero,r2,6188 <__alt_exception_stack_pointer+0xf8006188>
    671c:	10010f1e 	bne	r2,zero,6b5c <_dtoa_r+0x116c>
    6720:	880b883a 	mov	r5,r17
    6724:	000d883a 	mov	r6,zero
    6728:	01d00534 	movhi	r7,16404
    672c:	8009883a 	mov	r4,r16
    6730:	000e3f80 	call	e3f8 <__muldf3>
    6734:	900d883a 	mov	r6,r18
    6738:	980f883a 	mov	r7,r19
    673c:	1009883a 	mov	r4,r2
    6740:	180b883a 	mov	r5,r3
    6744:	000e2280 	call	e228 <__gedf2>
    6748:	002b883a 	mov	r21,zero
    674c:	0023883a 	mov	r17,zero
    6750:	1000bf16 	blt	r2,zero,6a50 <_dtoa_r+0x1060>
    6754:	d9802217 	ldw	r6,136(sp)
    6758:	ddc00717 	ldw	r23,28(sp)
    675c:	018c303a 	nor	r6,zero,r6
    6760:	d9800515 	stw	r6,20(sp)
    6764:	a80b883a 	mov	r5,r21
    6768:	e009883a 	mov	r4,fp
    676c:	00089440 	call	8944 <_Bfree>
    6770:	883e4926 	beq	r17,zero,6098 <__alt_exception_stack_pointer+0xf8006098>
    6774:	003fad06 	br	662c <__alt_exception_stack_pointer+0xf800662c>
    6778:	d9c01117 	ldw	r7,68(sp)
    677c:	3801bc26 	beq	r7,zero,6e70 <_dtoa_r+0x1480>
    6780:	10810cc4 	addi	r2,r2,1075
    6784:	dd400a17 	ldw	r21,40(sp)
    6788:	dd000817 	ldw	r20,32(sp)
    678c:	003f0a06 	br	63b8 <__alt_exception_stack_pointer+0xf80063b8>
    6790:	00800704 	movi	r2,28
    6794:	d9000817 	ldw	r4,32(sp)
    6798:	a0a9883a 	add	r20,r20,r2
    679c:	b0ad883a 	add	r22,r22,r2
    67a0:	2089883a 	add	r4,r4,r2
    67a4:	d9000815 	stw	r4,32(sp)
    67a8:	003f5106 	br	64f0 <__alt_exception_stack_pointer+0xf80064f0>
    67ac:	d8c00317 	ldw	r3,12(sp)
    67b0:	b8c1fc0e 	bge	r23,r3,6fa4 <_dtoa_r+0x15b4>
    67b4:	0027883a 	mov	r19,zero
    67b8:	b805883a 	mov	r2,r23
    67bc:	003f3e06 	br	64b8 <__alt_exception_stack_pointer+0xf80064b8>
    67c0:	880b883a 	mov	r5,r17
    67c4:	e009883a 	mov	r4,fp
    67c8:	000f883a 	mov	r7,zero
    67cc:	01800284 	movi	r6,10
    67d0:	000896c0 	call	896c <__multadd>
    67d4:	d9000c17 	ldw	r4,48(sp)
    67d8:	1023883a 	mov	r17,r2
    67dc:	0102040e 	bge	zero,r4,6ff0 <_dtoa_r+0x1600>
    67e0:	d9000615 	stw	r4,24(sp)
    67e4:	0500050e 	bge	zero,r20,67fc <_dtoa_r+0xe0c>
    67e8:	880b883a 	mov	r5,r17
    67ec:	a00d883a 	mov	r6,r20
    67f0:	e009883a 	mov	r4,fp
    67f4:	00090d80 	call	90d8 <__lshift>
    67f8:	1023883a 	mov	r17,r2
    67fc:	9801241e 	bne	r19,zero,6c90 <_dtoa_r+0x12a0>
    6800:	8829883a 	mov	r20,r17
    6804:	d9000617 	ldw	r4,24(sp)
    6808:	dcc00717 	ldw	r19,28(sp)
    680c:	9480004c 	andi	r18,r18,1
    6810:	20bfffc4 	addi	r2,r4,-1
    6814:	9885883a 	add	r2,r19,r2
    6818:	d8800415 	stw	r2,16(sp)
    681c:	dc800615 	stw	r18,24(sp)
    6820:	a80b883a 	mov	r5,r21
    6824:	8009883a 	mov	r4,r16
    6828:	00057c80 	call	57c8 <quorem>
    682c:	880b883a 	mov	r5,r17
    6830:	8009883a 	mov	r4,r16
    6834:	102f883a 	mov	r23,r2
    6838:	00092200 	call	9220 <__mcmp>
    683c:	a80b883a 	mov	r5,r21
    6840:	a00d883a 	mov	r6,r20
    6844:	e009883a 	mov	r4,fp
    6848:	102d883a 	mov	r22,r2
    684c:	00092800 	call	9280 <__mdiff>
    6850:	1007883a 	mov	r3,r2
    6854:	10800317 	ldw	r2,12(r2)
    6858:	bc800c04 	addi	r18,r23,48
    685c:	180b883a 	mov	r5,r3
    6860:	10004e1e 	bne	r2,zero,699c <_dtoa_r+0xfac>
    6864:	8009883a 	mov	r4,r16
    6868:	d8c01615 	stw	r3,88(sp)
    686c:	00092200 	call	9220 <__mcmp>
    6870:	d8c01617 	ldw	r3,88(sp)
    6874:	e009883a 	mov	r4,fp
    6878:	d8801615 	stw	r2,88(sp)
    687c:	180b883a 	mov	r5,r3
    6880:	00089440 	call	8944 <_Bfree>
    6884:	d8801617 	ldw	r2,88(sp)
    6888:	1000041e 	bne	r2,zero,689c <_dtoa_r+0xeac>
    688c:	d9800317 	ldw	r6,12(sp)
    6890:	3000021e 	bne	r6,zero,689c <_dtoa_r+0xeac>
    6894:	d8c00617 	ldw	r3,24(sp)
    6898:	18003726 	beq	r3,zero,6978 <_dtoa_r+0xf88>
    689c:	b0002016 	blt	r22,zero,6920 <_dtoa_r+0xf30>
    68a0:	b000041e 	bne	r22,zero,68b4 <_dtoa_r+0xec4>
    68a4:	d9000317 	ldw	r4,12(sp)
    68a8:	2000021e 	bne	r4,zero,68b4 <_dtoa_r+0xec4>
    68ac:	d8c00617 	ldw	r3,24(sp)
    68b0:	18001b26 	beq	r3,zero,6920 <_dtoa_r+0xf30>
    68b4:	00810716 	blt	zero,r2,6cd4 <_dtoa_r+0x12e4>
    68b8:	d8c00417 	ldw	r3,16(sp)
    68bc:	9d800044 	addi	r22,r19,1
    68c0:	9c800005 	stb	r18,0(r19)
    68c4:	b02f883a 	mov	r23,r22
    68c8:	98c10626 	beq	r19,r3,6ce4 <_dtoa_r+0x12f4>
    68cc:	800b883a 	mov	r5,r16
    68d0:	000f883a 	mov	r7,zero
    68d4:	01800284 	movi	r6,10
    68d8:	e009883a 	mov	r4,fp
    68dc:	000896c0 	call	896c <__multadd>
    68e0:	1021883a 	mov	r16,r2
    68e4:	000f883a 	mov	r7,zero
    68e8:	01800284 	movi	r6,10
    68ec:	880b883a 	mov	r5,r17
    68f0:	e009883a 	mov	r4,fp
    68f4:	8d002526 	beq	r17,r20,698c <_dtoa_r+0xf9c>
    68f8:	000896c0 	call	896c <__multadd>
    68fc:	a00b883a 	mov	r5,r20
    6900:	000f883a 	mov	r7,zero
    6904:	01800284 	movi	r6,10
    6908:	e009883a 	mov	r4,fp
    690c:	1023883a 	mov	r17,r2
    6910:	000896c0 	call	896c <__multadd>
    6914:	1029883a 	mov	r20,r2
    6918:	b027883a 	mov	r19,r22
    691c:	003fc006 	br	6820 <__alt_exception_stack_pointer+0xf8006820>
    6920:	9011883a 	mov	r8,r18
    6924:	00800e0e 	bge	zero,r2,6960 <_dtoa_r+0xf70>
    6928:	800b883a 	mov	r5,r16
    692c:	01800044 	movi	r6,1
    6930:	e009883a 	mov	r4,fp
    6934:	da001715 	stw	r8,92(sp)
    6938:	00090d80 	call	90d8 <__lshift>
    693c:	a80b883a 	mov	r5,r21
    6940:	1009883a 	mov	r4,r2
    6944:	1021883a 	mov	r16,r2
    6948:	00092200 	call	9220 <__mcmp>
    694c:	da001717 	ldw	r8,92(sp)
    6950:	0081960e 	bge	zero,r2,6fac <_dtoa_r+0x15bc>
    6954:	00800e44 	movi	r2,57
    6958:	40817026 	beq	r8,r2,6f1c <_dtoa_r+0x152c>
    695c:	ba000c44 	addi	r8,r23,49
    6960:	8825883a 	mov	r18,r17
    6964:	9dc00044 	addi	r23,r19,1
    6968:	9a000005 	stb	r8,0(r19)
    696c:	a023883a 	mov	r17,r20
    6970:	dc000915 	stw	r16,36(sp)
    6974:	003f2406 	br	6608 <__alt_exception_stack_pointer+0xf8006608>
    6978:	00800e44 	movi	r2,57
    697c:	9011883a 	mov	r8,r18
    6980:	90816626 	beq	r18,r2,6f1c <_dtoa_r+0x152c>
    6984:	05bff516 	blt	zero,r22,695c <__alt_exception_stack_pointer+0xf800695c>
    6988:	003ff506 	br	6960 <__alt_exception_stack_pointer+0xf8006960>
    698c:	000896c0 	call	896c <__multadd>
    6990:	1023883a 	mov	r17,r2
    6994:	1029883a 	mov	r20,r2
    6998:	003fdf06 	br	6918 <__alt_exception_stack_pointer+0xf8006918>
    699c:	e009883a 	mov	r4,fp
    69a0:	00089440 	call	8944 <_Bfree>
    69a4:	00800044 	movi	r2,1
    69a8:	003fbc06 	br	689c <__alt_exception_stack_pointer+0xf800689c>
    69ac:	a80b883a 	mov	r5,r21
    69b0:	8009883a 	mov	r4,r16
    69b4:	00092200 	call	9220 <__mcmp>
    69b8:	103edb0e 	bge	r2,zero,6528 <__alt_exception_stack_pointer+0xf8006528>
    69bc:	800b883a 	mov	r5,r16
    69c0:	000f883a 	mov	r7,zero
    69c4:	01800284 	movi	r6,10
    69c8:	e009883a 	mov	r4,fp
    69cc:	000896c0 	call	896c <__multadd>
    69d0:	1021883a 	mov	r16,r2
    69d4:	d8800517 	ldw	r2,20(sp)
    69d8:	d8c00b17 	ldw	r3,44(sp)
    69dc:	10bfffc4 	addi	r2,r2,-1
    69e0:	d8800515 	stw	r2,20(sp)
    69e4:	183f761e 	bne	r3,zero,67c0 <__alt_exception_stack_pointer+0xf80067c0>
    69e8:	d9000c17 	ldw	r4,48(sp)
    69ec:	0101730e 	bge	zero,r4,6fbc <_dtoa_r+0x15cc>
    69f0:	d9000615 	stw	r4,24(sp)
    69f4:	003ed006 	br	6538 <__alt_exception_stack_pointer+0xf8006538>
    69f8:	00800084 	movi	r2,2
    69fc:	3081861e 	bne	r6,r2,7018 <_dtoa_r+0x1628>
    6a00:	d8000b15 	stw	zero,44(sp)
    6a04:	003f3c06 	br	66f8 <__alt_exception_stack_pointer+0xf80066f8>
    6a08:	dc000917 	ldw	r16,36(sp)
    6a0c:	003e9206 	br	6458 <__alt_exception_stack_pointer+0xf8006458>
    6a10:	d9c00317 	ldw	r7,12(sp)
    6a14:	00800084 	movi	r2,2
    6a18:	11fec50e 	bge	r2,r7,6530 <__alt_exception_stack_pointer+0xf8006530>
    6a1c:	d9000617 	ldw	r4,24(sp)
    6a20:	20013c1e 	bne	r4,zero,6f14 <_dtoa_r+0x1524>
    6a24:	a80b883a 	mov	r5,r21
    6a28:	000f883a 	mov	r7,zero
    6a2c:	01800144 	movi	r6,5
    6a30:	e009883a 	mov	r4,fp
    6a34:	000896c0 	call	896c <__multadd>
    6a38:	100b883a 	mov	r5,r2
    6a3c:	8009883a 	mov	r4,r16
    6a40:	102b883a 	mov	r21,r2
    6a44:	00092200 	call	9220 <__mcmp>
    6a48:	dc000915 	stw	r16,36(sp)
    6a4c:	00bf410e 	bge	zero,r2,6754 <__alt_exception_stack_pointer+0xf8006754>
    6a50:	d9c00717 	ldw	r7,28(sp)
    6a54:	00800c44 	movi	r2,49
    6a58:	38800005 	stb	r2,0(r7)
    6a5c:	d8800517 	ldw	r2,20(sp)
    6a60:	3dc00044 	addi	r23,r7,1
    6a64:	10800044 	addi	r2,r2,1
    6a68:	d8800515 	stw	r2,20(sp)
    6a6c:	003f3d06 	br	6764 <__alt_exception_stack_pointer+0xf8006764>
    6a70:	d9800517 	ldw	r6,20(sp)
    6a74:	d9c00717 	ldw	r7,28(sp)
    6a78:	00800c44 	movi	r2,49
    6a7c:	31800044 	addi	r6,r6,1
    6a80:	d9800515 	stw	r6,20(sp)
    6a84:	38800005 	stb	r2,0(r7)
    6a88:	003edf06 	br	6608 <__alt_exception_stack_pointer+0xf8006608>
    6a8c:	d8000b15 	stw	zero,44(sp)
    6a90:	003c9f06 	br	5d10 <__alt_exception_stack_pointer+0xf8005d10>
    6a94:	903e7e1e 	bne	r18,zero,6490 <__alt_exception_stack_pointer+0xf8006490>
    6a98:	00800434 	movhi	r2,16
    6a9c:	10bfffc4 	addi	r2,r2,-1
    6aa0:	9884703a 	and	r2,r19,r2
    6aa4:	1000ea1e 	bne	r2,zero,6e50 <_dtoa_r+0x1460>
    6aa8:	9cdffc2c 	andhi	r19,r19,32752
    6aac:	9800e826 	beq	r19,zero,6e50 <_dtoa_r+0x1460>
    6ab0:	d9c00817 	ldw	r7,32(sp)
    6ab4:	b5800044 	addi	r22,r22,1
    6ab8:	04c00044 	movi	r19,1
    6abc:	39c00044 	addi	r7,r7,1
    6ac0:	d9c00815 	stw	r7,32(sp)
    6ac4:	d8800d17 	ldw	r2,52(sp)
    6ac8:	103e721e 	bne	r2,zero,6494 <__alt_exception_stack_pointer+0xf8006494>
    6acc:	00800044 	movi	r2,1
    6ad0:	003e7906 	br	64b8 <__alt_exception_stack_pointer+0xf80064b8>
    6ad4:	8009883a 	mov	r4,r16
    6ad8:	000f5e00 	call	f5e0 <__floatsidf>
    6adc:	d9800f17 	ldw	r6,60(sp)
    6ae0:	d9c01017 	ldw	r7,64(sp)
    6ae4:	1009883a 	mov	r4,r2
    6ae8:	180b883a 	mov	r5,r3
    6aec:	000e3f80 	call	e3f8 <__muldf3>
    6af0:	000d883a 	mov	r6,zero
    6af4:	01d00734 	movhi	r7,16412
    6af8:	1009883a 	mov	r4,r2
    6afc:	180b883a 	mov	r5,r3
    6b00:	000cf240 	call	cf24 <__adddf3>
    6b04:	047f3034 	movhi	r17,64704
    6b08:	1021883a 	mov	r16,r2
    6b0c:	1c63883a 	add	r17,r3,r17
    6b10:	d9000f17 	ldw	r4,60(sp)
    6b14:	d9401017 	ldw	r5,64(sp)
    6b18:	000d883a 	mov	r6,zero
    6b1c:	01d00534 	movhi	r7,16404
    6b20:	000ec640 	call	ec64 <__subdf3>
    6b24:	800d883a 	mov	r6,r16
    6b28:	880f883a 	mov	r7,r17
    6b2c:	1009883a 	mov	r4,r2
    6b30:	180b883a 	mov	r5,r3
    6b34:	102b883a 	mov	r21,r2
    6b38:	1829883a 	mov	r20,r3
    6b3c:	000e2280 	call	e228 <__gedf2>
    6b40:	00806c16 	blt	zero,r2,6cf4 <_dtoa_r+0x1304>
    6b44:	89e0003c 	xorhi	r7,r17,32768
    6b48:	800d883a 	mov	r6,r16
    6b4c:	a809883a 	mov	r4,r21
    6b50:	a00b883a 	mov	r5,r20
    6b54:	000e3040 	call	e304 <__ledf2>
    6b58:	103d7e0e 	bge	r2,zero,6154 <__alt_exception_stack_pointer+0xf8006154>
    6b5c:	002b883a 	mov	r21,zero
    6b60:	0023883a 	mov	r17,zero
    6b64:	003efb06 	br	6754 <__alt_exception_stack_pointer+0xf8006754>
    6b68:	d8800717 	ldw	r2,28(sp)
    6b6c:	003bd006 	br	5ab0 <__alt_exception_stack_pointer+0xf8005ab0>
    6b70:	d9000a17 	ldw	r4,40(sp)
    6b74:	d9800d17 	ldw	r6,52(sp)
    6b78:	dd400a15 	stw	r21,40(sp)
    6b7c:	a905c83a 	sub	r2,r21,r4
    6b80:	308d883a 	add	r6,r6,r2
    6b84:	d9800d15 	stw	r6,52(sp)
    6b88:	002b883a 	mov	r21,zero
    6b8c:	003e0606 	br	63a8 <__alt_exception_stack_pointer+0xf80063a8>
    6b90:	9023883a 	mov	r17,r18
    6b94:	9829883a 	mov	r20,r19
    6b98:	04000084 	movi	r16,2
    6b9c:	003c9206 	br	5de8 <__alt_exception_stack_pointer+0xf8005de8>
    6ba0:	04000044 	movi	r16,1
    6ba4:	dc000c15 	stw	r16,48(sp)
    6ba8:	dc000615 	stw	r16,24(sp)
    6bac:	dc002215 	stw	r16,136(sp)
    6bb0:	e0001115 	stw	zero,68(fp)
    6bb4:	000b883a 	mov	r5,zero
    6bb8:	003c6906 	br	5d60 <__alt_exception_stack_pointer+0xf8005d60>
    6bbc:	3021883a 	mov	r16,r6
    6bc0:	003ffb06 	br	6bb0 <__alt_exception_stack_pointer+0xf8006bb0>
    6bc4:	1000021e 	bne	r2,zero,6bd0 <_dtoa_r+0x11e0>
    6bc8:	4200004c 	andi	r8,r8,1
    6bcc:	403e7d1e 	bne	r8,zero,65c4 <__alt_exception_stack_pointer+0xf80065c4>
    6bd0:	01000c04 	movi	r4,48
    6bd4:	00000106 	br	6bdc <_dtoa_r+0x11ec>
    6bd8:	102f883a 	mov	r23,r2
    6bdc:	b8bfffc4 	addi	r2,r23,-1
    6be0:	10c00007 	ldb	r3,0(r2)
    6be4:	193ffc26 	beq	r3,r4,6bd8 <__alt_exception_stack_pointer+0xf8006bd8>
    6be8:	003e8706 	br	6608 <__alt_exception_stack_pointer+0xf8006608>
    6bec:	d8800517 	ldw	r2,20(sp)
    6bf0:	00a3c83a 	sub	r17,zero,r2
    6bf4:	8800a426 	beq	r17,zero,6e88 <_dtoa_r+0x1498>
    6bf8:	888003cc 	andi	r2,r17,15
    6bfc:	100490fa 	slli	r2,r2,3
    6c00:	00c00074 	movhi	r3,1
    6c04:	18caad04 	addi	r3,r3,10932
    6c08:	1885883a 	add	r2,r3,r2
    6c0c:	11800017 	ldw	r6,0(r2)
    6c10:	11c00117 	ldw	r7,4(r2)
    6c14:	9009883a 	mov	r4,r18
    6c18:	980b883a 	mov	r5,r19
    6c1c:	8823d13a 	srai	r17,r17,4
    6c20:	000e3f80 	call	e3f8 <__muldf3>
    6c24:	d8800f15 	stw	r2,60(sp)
    6c28:	d8c01015 	stw	r3,64(sp)
    6c2c:	8800e826 	beq	r17,zero,6fd0 <_dtoa_r+0x15e0>
    6c30:	05000074 	movhi	r20,1
    6c34:	a50aa304 	addi	r20,r20,10892
    6c38:	04000084 	movi	r16,2
    6c3c:	8980004c 	andi	r6,r17,1
    6c40:	1009883a 	mov	r4,r2
    6c44:	8823d07a 	srai	r17,r17,1
    6c48:	180b883a 	mov	r5,r3
    6c4c:	30000426 	beq	r6,zero,6c60 <_dtoa_r+0x1270>
    6c50:	a1800017 	ldw	r6,0(r20)
    6c54:	a1c00117 	ldw	r7,4(r20)
    6c58:	84000044 	addi	r16,r16,1
    6c5c:	000e3f80 	call	e3f8 <__muldf3>
    6c60:	a5000204 	addi	r20,r20,8
    6c64:	883ff51e 	bne	r17,zero,6c3c <__alt_exception_stack_pointer+0xf8006c3c>
    6c68:	d8800f15 	stw	r2,60(sp)
    6c6c:	d8c01015 	stw	r3,64(sp)
    6c70:	003c7606 	br	5e4c <__alt_exception_stack_pointer+0xf8005e4c>
    6c74:	00c00c04 	movi	r3,48
    6c78:	10c00005 	stb	r3,0(r2)
    6c7c:	d8c00517 	ldw	r3,20(sp)
    6c80:	bd3fffc3 	ldbu	r20,-1(r23)
    6c84:	18c00044 	addi	r3,r3,1
    6c88:	d8c00515 	stw	r3,20(sp)
    6c8c:	003db906 	br	6374 <__alt_exception_stack_pointer+0xf8006374>
    6c90:	89400117 	ldw	r5,4(r17)
    6c94:	e009883a 	mov	r4,fp
    6c98:	000889c0 	call	889c <_Balloc>
    6c9c:	89800417 	ldw	r6,16(r17)
    6ca0:	89400304 	addi	r5,r17,12
    6ca4:	11000304 	addi	r4,r2,12
    6ca8:	31800084 	addi	r6,r6,2
    6cac:	318d883a 	add	r6,r6,r6
    6cb0:	318d883a 	add	r6,r6,r6
    6cb4:	1027883a 	mov	r19,r2
    6cb8:	00084d00 	call	84d0 <memcpy>
    6cbc:	01800044 	movi	r6,1
    6cc0:	980b883a 	mov	r5,r19
    6cc4:	e009883a 	mov	r4,fp
    6cc8:	00090d80 	call	90d8 <__lshift>
    6ccc:	1029883a 	mov	r20,r2
    6cd0:	003ecc06 	br	6804 <__alt_exception_stack_pointer+0xf8006804>
    6cd4:	00800e44 	movi	r2,57
    6cd8:	90809026 	beq	r18,r2,6f1c <_dtoa_r+0x152c>
    6cdc:	92000044 	addi	r8,r18,1
    6ce0:	003f1f06 	br	6960 <__alt_exception_stack_pointer+0xf8006960>
    6ce4:	9011883a 	mov	r8,r18
    6ce8:	8825883a 	mov	r18,r17
    6cec:	a023883a 	mov	r17,r20
    6cf0:	003e2906 	br	6598 <__alt_exception_stack_pointer+0xf8006598>
    6cf4:	002b883a 	mov	r21,zero
    6cf8:	0023883a 	mov	r17,zero
    6cfc:	003f5406 	br	6a50 <__alt_exception_stack_pointer+0xf8006a50>
    6d00:	61bfffc4 	addi	r6,r12,-1
    6d04:	300490fa 	slli	r2,r6,3
    6d08:	00c00074 	movhi	r3,1
    6d0c:	18caad04 	addi	r3,r3,10932
    6d10:	1885883a 	add	r2,r3,r2
    6d14:	11000017 	ldw	r4,0(r2)
    6d18:	11400117 	ldw	r5,4(r2)
    6d1c:	d8800717 	ldw	r2,28(sp)
    6d20:	880f883a 	mov	r7,r17
    6d24:	d9801215 	stw	r6,72(sp)
    6d28:	800d883a 	mov	r6,r16
    6d2c:	db001615 	stw	r12,88(sp)
    6d30:	15c00044 	addi	r23,r2,1
    6d34:	000e3f80 	call	e3f8 <__muldf3>
    6d38:	d9401017 	ldw	r5,64(sp)
    6d3c:	d9000f17 	ldw	r4,60(sp)
    6d40:	d8c01515 	stw	r3,84(sp)
    6d44:	d8801415 	stw	r2,80(sp)
    6d48:	000f5600 	call	f560 <__fixdfsi>
    6d4c:	1009883a 	mov	r4,r2
    6d50:	1021883a 	mov	r16,r2
    6d54:	000f5e00 	call	f5e0 <__floatsidf>
    6d58:	d9000f17 	ldw	r4,60(sp)
    6d5c:	d9401017 	ldw	r5,64(sp)
    6d60:	100d883a 	mov	r6,r2
    6d64:	180f883a 	mov	r7,r3
    6d68:	000ec640 	call	ec64 <__subdf3>
    6d6c:	1829883a 	mov	r20,r3
    6d70:	d8c00717 	ldw	r3,28(sp)
    6d74:	84000c04 	addi	r16,r16,48
    6d78:	1023883a 	mov	r17,r2
    6d7c:	1c000005 	stb	r16,0(r3)
    6d80:	db001617 	ldw	r12,88(sp)
    6d84:	00800044 	movi	r2,1
    6d88:	60802226 	beq	r12,r2,6e14 <_dtoa_r+0x1424>
    6d8c:	d9c00717 	ldw	r7,28(sp)
    6d90:	8805883a 	mov	r2,r17
    6d94:	b82b883a 	mov	r21,r23
    6d98:	3b19883a 	add	r12,r7,r12
    6d9c:	6023883a 	mov	r17,r12
    6da0:	a007883a 	mov	r3,r20
    6da4:	dc800f15 	stw	r18,60(sp)
    6da8:	000d883a 	mov	r6,zero
    6dac:	01d00934 	movhi	r7,16420
    6db0:	1009883a 	mov	r4,r2
    6db4:	180b883a 	mov	r5,r3
    6db8:	000e3f80 	call	e3f8 <__muldf3>
    6dbc:	180b883a 	mov	r5,r3
    6dc0:	1009883a 	mov	r4,r2
    6dc4:	1829883a 	mov	r20,r3
    6dc8:	1025883a 	mov	r18,r2
    6dcc:	000f5600 	call	f560 <__fixdfsi>
    6dd0:	1009883a 	mov	r4,r2
    6dd4:	1021883a 	mov	r16,r2
    6dd8:	000f5e00 	call	f5e0 <__floatsidf>
    6ddc:	100d883a 	mov	r6,r2
    6de0:	180f883a 	mov	r7,r3
    6de4:	9009883a 	mov	r4,r18
    6de8:	a00b883a 	mov	r5,r20
    6dec:	84000c04 	addi	r16,r16,48
    6df0:	000ec640 	call	ec64 <__subdf3>
    6df4:	ad400044 	addi	r21,r21,1
    6df8:	ac3fffc5 	stb	r16,-1(r21)
    6dfc:	ac7fea1e 	bne	r21,r17,6da8 <__alt_exception_stack_pointer+0xf8006da8>
    6e00:	1023883a 	mov	r17,r2
    6e04:	d8801217 	ldw	r2,72(sp)
    6e08:	dc800f17 	ldw	r18,60(sp)
    6e0c:	1829883a 	mov	r20,r3
    6e10:	b8af883a 	add	r23,r23,r2
    6e14:	d9001417 	ldw	r4,80(sp)
    6e18:	d9401517 	ldw	r5,84(sp)
    6e1c:	000d883a 	mov	r6,zero
    6e20:	01cff834 	movhi	r7,16352
    6e24:	000cf240 	call	cf24 <__adddf3>
    6e28:	880d883a 	mov	r6,r17
    6e2c:	a00f883a 	mov	r7,r20
    6e30:	1009883a 	mov	r4,r2
    6e34:	180b883a 	mov	r5,r3
    6e38:	000e3040 	call	e304 <__ledf2>
    6e3c:	10003e0e 	bge	r2,zero,6f38 <_dtoa_r+0x1548>
    6e40:	d9001317 	ldw	r4,76(sp)
    6e44:	bd3fffc3 	ldbu	r20,-1(r23)
    6e48:	d9000515 	stw	r4,20(sp)
    6e4c:	003d3b06 	br	633c <__alt_exception_stack_pointer+0xf800633c>
    6e50:	0027883a 	mov	r19,zero
    6e54:	003f1b06 	br	6ac4 <__alt_exception_stack_pointer+0xf8006ac4>
    6e58:	d8800817 	ldw	r2,32(sp)
    6e5c:	11e9c83a 	sub	r20,r2,r7
    6e60:	0005883a 	mov	r2,zero
    6e64:	003d5406 	br	63b8 <__alt_exception_stack_pointer+0xf80063b8>
    6e68:	00800044 	movi	r2,1
    6e6c:	003dc706 	br	658c <__alt_exception_stack_pointer+0xf800658c>
    6e70:	d8c00217 	ldw	r3,8(sp)
    6e74:	00800d84 	movi	r2,54
    6e78:	dd400a17 	ldw	r21,40(sp)
    6e7c:	10c5c83a 	sub	r2,r2,r3
    6e80:	dd000817 	ldw	r20,32(sp)
    6e84:	003d4c06 	br	63b8 <__alt_exception_stack_pointer+0xf80063b8>
    6e88:	dc800f15 	stw	r18,60(sp)
    6e8c:	dcc01015 	stw	r19,64(sp)
    6e90:	04000084 	movi	r16,2
    6e94:	003bed06 	br	5e4c <__alt_exception_stack_pointer+0xf8005e4c>
    6e98:	d9000617 	ldw	r4,24(sp)
    6e9c:	203f0d26 	beq	r4,zero,6ad4 <__alt_exception_stack_pointer+0xf8006ad4>
    6ea0:	d9800c17 	ldw	r6,48(sp)
    6ea4:	01bcab0e 	bge	zero,r6,6154 <__alt_exception_stack_pointer+0xf8006154>
    6ea8:	d9401017 	ldw	r5,64(sp)
    6eac:	d9000f17 	ldw	r4,60(sp)
    6eb0:	000d883a 	mov	r6,zero
    6eb4:	01d00934 	movhi	r7,16420
    6eb8:	000e3f80 	call	e3f8 <__muldf3>
    6ebc:	81000044 	addi	r4,r16,1
    6ec0:	d8800f15 	stw	r2,60(sp)
    6ec4:	d8c01015 	stw	r3,64(sp)
    6ec8:	000f5e00 	call	f5e0 <__floatsidf>
    6ecc:	d9800f17 	ldw	r6,60(sp)
    6ed0:	d9c01017 	ldw	r7,64(sp)
    6ed4:	1009883a 	mov	r4,r2
    6ed8:	180b883a 	mov	r5,r3
    6edc:	000e3f80 	call	e3f8 <__muldf3>
    6ee0:	01d00734 	movhi	r7,16412
    6ee4:	000d883a 	mov	r6,zero
    6ee8:	1009883a 	mov	r4,r2
    6eec:	180b883a 	mov	r5,r3
    6ef0:	000cf240 	call	cf24 <__adddf3>
    6ef4:	d9c00517 	ldw	r7,20(sp)
    6ef8:	047f3034 	movhi	r17,64704
    6efc:	1021883a 	mov	r16,r2
    6f00:	39ffffc4 	addi	r7,r7,-1
    6f04:	d9c01315 	stw	r7,76(sp)
    6f08:	1c63883a 	add	r17,r3,r17
    6f0c:	db000c17 	ldw	r12,48(sp)
    6f10:	003bea06 	br	5ebc <__alt_exception_stack_pointer+0xf8005ebc>
    6f14:	dc000915 	stw	r16,36(sp)
    6f18:	003e0e06 	br	6754 <__alt_exception_stack_pointer+0xf8006754>
    6f1c:	01000e44 	movi	r4,57
    6f20:	8825883a 	mov	r18,r17
    6f24:	9dc00044 	addi	r23,r19,1
    6f28:	99000005 	stb	r4,0(r19)
    6f2c:	a023883a 	mov	r17,r20
    6f30:	dc000915 	stw	r16,36(sp)
    6f34:	003da406 	br	65c8 <__alt_exception_stack_pointer+0xf80065c8>
    6f38:	d9801417 	ldw	r6,80(sp)
    6f3c:	d9c01517 	ldw	r7,84(sp)
    6f40:	0009883a 	mov	r4,zero
    6f44:	014ff834 	movhi	r5,16352
    6f48:	000ec640 	call	ec64 <__subdf3>
    6f4c:	880d883a 	mov	r6,r17
    6f50:	a00f883a 	mov	r7,r20
    6f54:	1009883a 	mov	r4,r2
    6f58:	180b883a 	mov	r5,r3
    6f5c:	000e2280 	call	e228 <__gedf2>
    6f60:	00bc7c0e 	bge	zero,r2,6154 <__alt_exception_stack_pointer+0xf8006154>
    6f64:	01000c04 	movi	r4,48
    6f68:	00000106 	br	6f70 <_dtoa_r+0x1580>
    6f6c:	102f883a 	mov	r23,r2
    6f70:	b8bfffc4 	addi	r2,r23,-1
    6f74:	10c00007 	ldb	r3,0(r2)
    6f78:	193ffc26 	beq	r3,r4,6f6c <__alt_exception_stack_pointer+0xf8006f6c>
    6f7c:	d9801317 	ldw	r6,76(sp)
    6f80:	d9800515 	stw	r6,20(sp)
    6f84:	003c4406 	br	6098 <__alt_exception_stack_pointer+0xf8006098>
    6f88:	d9801317 	ldw	r6,76(sp)
    6f8c:	d9800515 	stw	r6,20(sp)
    6f90:	003cea06 	br	633c <__alt_exception_stack_pointer+0xf800633c>
    6f94:	dd800f17 	ldw	r22,60(sp)
    6f98:	dcc01017 	ldw	r19,64(sp)
    6f9c:	dc801217 	ldw	r18,72(sp)
    6fa0:	003c6c06 	br	6154 <__alt_exception_stack_pointer+0xf8006154>
    6fa4:	903e031e 	bne	r18,zero,67b4 <__alt_exception_stack_pointer+0xf80067b4>
    6fa8:	003ebb06 	br	6a98 <__alt_exception_stack_pointer+0xf8006a98>
    6fac:	103e6c1e 	bne	r2,zero,6960 <__alt_exception_stack_pointer+0xf8006960>
    6fb0:	4080004c 	andi	r2,r8,1
    6fb4:	103e6a26 	beq	r2,zero,6960 <__alt_exception_stack_pointer+0xf8006960>
    6fb8:	003e6606 	br	6954 <__alt_exception_stack_pointer+0xf8006954>
    6fbc:	d8c00317 	ldw	r3,12(sp)
    6fc0:	00800084 	movi	r2,2
    6fc4:	10c02916 	blt	r2,r3,706c <_dtoa_r+0x167c>
    6fc8:	d9000c17 	ldw	r4,48(sp)
    6fcc:	003e8806 	br	69f0 <__alt_exception_stack_pointer+0xf80069f0>
    6fd0:	04000084 	movi	r16,2
    6fd4:	003b9d06 	br	5e4c <__alt_exception_stack_pointer+0xf8005e4c>
    6fd8:	d9001317 	ldw	r4,76(sp)
    6fdc:	d9000515 	stw	r4,20(sp)
    6fe0:	003cd606 	br	633c <__alt_exception_stack_pointer+0xf800633c>
    6fe4:	d8801317 	ldw	r2,76(sp)
    6fe8:	d8800515 	stw	r2,20(sp)
    6fec:	003c2a06 	br	6098 <__alt_exception_stack_pointer+0xf8006098>
    6ff0:	d9800317 	ldw	r6,12(sp)
    6ff4:	00800084 	movi	r2,2
    6ff8:	11801516 	blt	r2,r6,7050 <_dtoa_r+0x1660>
    6ffc:	d9c00c17 	ldw	r7,48(sp)
    7000:	d9c00615 	stw	r7,24(sp)
    7004:	003df706 	br	67e4 <__alt_exception_stack_pointer+0xf80067e4>
    7008:	193d3926 	beq	r3,r4,64f0 <__alt_exception_stack_pointer+0xf80064f0>
    700c:	00c00f04 	movi	r3,60
    7010:	1885c83a 	sub	r2,r3,r2
    7014:	003ddf06 	br	6794 <__alt_exception_stack_pointer+0xf8006794>
    7018:	e009883a 	mov	r4,fp
    701c:	e0001115 	stw	zero,68(fp)
    7020:	000b883a 	mov	r5,zero
    7024:	000889c0 	call	889c <_Balloc>
    7028:	d8800715 	stw	r2,28(sp)
    702c:	d8c00717 	ldw	r3,28(sp)
    7030:	00bfffc4 	movi	r2,-1
    7034:	01000044 	movi	r4,1
    7038:	d8800c15 	stw	r2,48(sp)
    703c:	e0c01015 	stw	r3,64(fp)
    7040:	d9000b15 	stw	r4,44(sp)
    7044:	d8800615 	stw	r2,24(sp)
    7048:	d8002215 	stw	zero,136(sp)
    704c:	003c4106 	br	6154 <__alt_exception_stack_pointer+0xf8006154>
    7050:	d8c00c17 	ldw	r3,48(sp)
    7054:	d8c00615 	stw	r3,24(sp)
    7058:	003e7006 	br	6a1c <__alt_exception_stack_pointer+0xf8006a1c>
    705c:	04400044 	movi	r17,1
    7060:	003b2006 	br	5ce4 <__alt_exception_stack_pointer+0xf8005ce4>
    7064:	000b883a 	mov	r5,zero
    7068:	003b3d06 	br	5d60 <__alt_exception_stack_pointer+0xf8005d60>
    706c:	d8800c17 	ldw	r2,48(sp)
    7070:	d8800615 	stw	r2,24(sp)
    7074:	003e6906 	br	6a1c <__alt_exception_stack_pointer+0xf8006a1c>

00007078 <__sflush_r>:
    7078:	2880030b 	ldhu	r2,12(r5)
    707c:	defffb04 	addi	sp,sp,-20
    7080:	dcc00315 	stw	r19,12(sp)
    7084:	dc400115 	stw	r17,4(sp)
    7088:	dfc00415 	stw	ra,16(sp)
    708c:	dc800215 	stw	r18,8(sp)
    7090:	dc000015 	stw	r16,0(sp)
    7094:	10c0020c 	andi	r3,r2,8
    7098:	2823883a 	mov	r17,r5
    709c:	2027883a 	mov	r19,r4
    70a0:	1800311e 	bne	r3,zero,7168 <__sflush_r+0xf0>
    70a4:	28c00117 	ldw	r3,4(r5)
    70a8:	10820014 	ori	r2,r2,2048
    70ac:	2880030d 	sth	r2,12(r5)
    70b0:	00c04b0e 	bge	zero,r3,71e0 <__sflush_r+0x168>
    70b4:	8a000a17 	ldw	r8,40(r17)
    70b8:	40002326 	beq	r8,zero,7148 <__sflush_r+0xd0>
    70bc:	9c000017 	ldw	r16,0(r19)
    70c0:	10c4000c 	andi	r3,r2,4096
    70c4:	98000015 	stw	zero,0(r19)
    70c8:	18004826 	beq	r3,zero,71ec <__sflush_r+0x174>
    70cc:	89801417 	ldw	r6,80(r17)
    70d0:	10c0010c 	andi	r3,r2,4
    70d4:	18000626 	beq	r3,zero,70f0 <__sflush_r+0x78>
    70d8:	88c00117 	ldw	r3,4(r17)
    70dc:	88800c17 	ldw	r2,48(r17)
    70e0:	30cdc83a 	sub	r6,r6,r3
    70e4:	10000226 	beq	r2,zero,70f0 <__sflush_r+0x78>
    70e8:	88800f17 	ldw	r2,60(r17)
    70ec:	308dc83a 	sub	r6,r6,r2
    70f0:	89400717 	ldw	r5,28(r17)
    70f4:	000f883a 	mov	r7,zero
    70f8:	9809883a 	mov	r4,r19
    70fc:	403ee83a 	callr	r8
    7100:	00ffffc4 	movi	r3,-1
    7104:	10c04426 	beq	r2,r3,7218 <__sflush_r+0x1a0>
    7108:	88c0030b 	ldhu	r3,12(r17)
    710c:	89000417 	ldw	r4,16(r17)
    7110:	88000115 	stw	zero,4(r17)
    7114:	197dffcc 	andi	r5,r3,63487
    7118:	8940030d 	sth	r5,12(r17)
    711c:	89000015 	stw	r4,0(r17)
    7120:	18c4000c 	andi	r3,r3,4096
    7124:	18002c1e 	bne	r3,zero,71d8 <__sflush_r+0x160>
    7128:	89400c17 	ldw	r5,48(r17)
    712c:	9c000015 	stw	r16,0(r19)
    7130:	28000526 	beq	r5,zero,7148 <__sflush_r+0xd0>
    7134:	88801004 	addi	r2,r17,64
    7138:	28800226 	beq	r5,r2,7144 <__sflush_r+0xcc>
    713c:	9809883a 	mov	r4,r19
    7140:	00077f40 	call	77f4 <_free_r>
    7144:	88000c15 	stw	zero,48(r17)
    7148:	0005883a 	mov	r2,zero
    714c:	dfc00417 	ldw	ra,16(sp)
    7150:	dcc00317 	ldw	r19,12(sp)
    7154:	dc800217 	ldw	r18,8(sp)
    7158:	dc400117 	ldw	r17,4(sp)
    715c:	dc000017 	ldw	r16,0(sp)
    7160:	dec00504 	addi	sp,sp,20
    7164:	f800283a 	ret
    7168:	2c800417 	ldw	r18,16(r5)
    716c:	903ff626 	beq	r18,zero,7148 <__alt_exception_stack_pointer+0xf8007148>
    7170:	2c000017 	ldw	r16,0(r5)
    7174:	108000cc 	andi	r2,r2,3
    7178:	2c800015 	stw	r18,0(r5)
    717c:	84a1c83a 	sub	r16,r16,r18
    7180:	1000131e 	bne	r2,zero,71d0 <__sflush_r+0x158>
    7184:	28800517 	ldw	r2,20(r5)
    7188:	88800215 	stw	r2,8(r17)
    718c:	04000316 	blt	zero,r16,719c <__sflush_r+0x124>
    7190:	003fed06 	br	7148 <__alt_exception_stack_pointer+0xf8007148>
    7194:	90a5883a 	add	r18,r18,r2
    7198:	043feb0e 	bge	zero,r16,7148 <__alt_exception_stack_pointer+0xf8007148>
    719c:	88800917 	ldw	r2,36(r17)
    71a0:	89400717 	ldw	r5,28(r17)
    71a4:	800f883a 	mov	r7,r16
    71a8:	900d883a 	mov	r6,r18
    71ac:	9809883a 	mov	r4,r19
    71b0:	103ee83a 	callr	r2
    71b4:	80a1c83a 	sub	r16,r16,r2
    71b8:	00bff616 	blt	zero,r2,7194 <__alt_exception_stack_pointer+0xf8007194>
    71bc:	88c0030b 	ldhu	r3,12(r17)
    71c0:	00bfffc4 	movi	r2,-1
    71c4:	18c01014 	ori	r3,r3,64
    71c8:	88c0030d 	sth	r3,12(r17)
    71cc:	003fdf06 	br	714c <__alt_exception_stack_pointer+0xf800714c>
    71d0:	0005883a 	mov	r2,zero
    71d4:	003fec06 	br	7188 <__alt_exception_stack_pointer+0xf8007188>
    71d8:	88801415 	stw	r2,80(r17)
    71dc:	003fd206 	br	7128 <__alt_exception_stack_pointer+0xf8007128>
    71e0:	28c00f17 	ldw	r3,60(r5)
    71e4:	00ffb316 	blt	zero,r3,70b4 <__alt_exception_stack_pointer+0xf80070b4>
    71e8:	003fd706 	br	7148 <__alt_exception_stack_pointer+0xf8007148>
    71ec:	89400717 	ldw	r5,28(r17)
    71f0:	000d883a 	mov	r6,zero
    71f4:	01c00044 	movi	r7,1
    71f8:	9809883a 	mov	r4,r19
    71fc:	403ee83a 	callr	r8
    7200:	100d883a 	mov	r6,r2
    7204:	00bfffc4 	movi	r2,-1
    7208:	30801426 	beq	r6,r2,725c <__sflush_r+0x1e4>
    720c:	8880030b 	ldhu	r2,12(r17)
    7210:	8a000a17 	ldw	r8,40(r17)
    7214:	003fae06 	br	70d0 <__alt_exception_stack_pointer+0xf80070d0>
    7218:	98c00017 	ldw	r3,0(r19)
    721c:	183fba26 	beq	r3,zero,7108 <__alt_exception_stack_pointer+0xf8007108>
    7220:	01000744 	movi	r4,29
    7224:	19000626 	beq	r3,r4,7240 <__sflush_r+0x1c8>
    7228:	01000584 	movi	r4,22
    722c:	19000426 	beq	r3,r4,7240 <__sflush_r+0x1c8>
    7230:	88c0030b 	ldhu	r3,12(r17)
    7234:	18c01014 	ori	r3,r3,64
    7238:	88c0030d 	sth	r3,12(r17)
    723c:	003fc306 	br	714c <__alt_exception_stack_pointer+0xf800714c>
    7240:	8880030b 	ldhu	r2,12(r17)
    7244:	88c00417 	ldw	r3,16(r17)
    7248:	88000115 	stw	zero,4(r17)
    724c:	10bdffcc 	andi	r2,r2,63487
    7250:	8880030d 	sth	r2,12(r17)
    7254:	88c00015 	stw	r3,0(r17)
    7258:	003fb306 	br	7128 <__alt_exception_stack_pointer+0xf8007128>
    725c:	98800017 	ldw	r2,0(r19)
    7260:	103fea26 	beq	r2,zero,720c <__alt_exception_stack_pointer+0xf800720c>
    7264:	00c00744 	movi	r3,29
    7268:	10c00226 	beq	r2,r3,7274 <__sflush_r+0x1fc>
    726c:	00c00584 	movi	r3,22
    7270:	10c0031e 	bne	r2,r3,7280 <__sflush_r+0x208>
    7274:	9c000015 	stw	r16,0(r19)
    7278:	0005883a 	mov	r2,zero
    727c:	003fb306 	br	714c <__alt_exception_stack_pointer+0xf800714c>
    7280:	88c0030b 	ldhu	r3,12(r17)
    7284:	3005883a 	mov	r2,r6
    7288:	18c01014 	ori	r3,r3,64
    728c:	88c0030d 	sth	r3,12(r17)
    7290:	003fae06 	br	714c <__alt_exception_stack_pointer+0xf800714c>

00007294 <_fflush_r>:
    7294:	defffd04 	addi	sp,sp,-12
    7298:	dc000115 	stw	r16,4(sp)
    729c:	dfc00215 	stw	ra,8(sp)
    72a0:	2021883a 	mov	r16,r4
    72a4:	20000226 	beq	r4,zero,72b0 <_fflush_r+0x1c>
    72a8:	20800e17 	ldw	r2,56(r4)
    72ac:	10000c26 	beq	r2,zero,72e0 <_fflush_r+0x4c>
    72b0:	2880030f 	ldh	r2,12(r5)
    72b4:	1000051e 	bne	r2,zero,72cc <_fflush_r+0x38>
    72b8:	0005883a 	mov	r2,zero
    72bc:	dfc00217 	ldw	ra,8(sp)
    72c0:	dc000117 	ldw	r16,4(sp)
    72c4:	dec00304 	addi	sp,sp,12
    72c8:	f800283a 	ret
    72cc:	8009883a 	mov	r4,r16
    72d0:	dfc00217 	ldw	ra,8(sp)
    72d4:	dc000117 	ldw	r16,4(sp)
    72d8:	dec00304 	addi	sp,sp,12
    72dc:	00070781 	jmpi	7078 <__sflush_r>
    72e0:	d9400015 	stw	r5,0(sp)
    72e4:	00076800 	call	7680 <__sinit>
    72e8:	d9400017 	ldw	r5,0(sp)
    72ec:	003ff006 	br	72b0 <__alt_exception_stack_pointer+0xf80072b0>

000072f0 <fflush>:
    72f0:	20000526 	beq	r4,zero,7308 <fflush+0x18>
    72f4:	00800074 	movhi	r2,1
    72f8:	1091e504 	addi	r2,r2,18324
    72fc:	200b883a 	mov	r5,r4
    7300:	11000017 	ldw	r4,0(r2)
    7304:	00072941 	jmpi	7294 <_fflush_r>
    7308:	00800074 	movhi	r2,1
    730c:	1091e404 	addi	r2,r2,18320
    7310:	11000017 	ldw	r4,0(r2)
    7314:	01400034 	movhi	r5,0
    7318:	295ca504 	addi	r5,r5,29332
    731c:	00080901 	jmpi	8090 <_fwalk_reent>

00007320 <__fp_unlock>:
    7320:	0005883a 	mov	r2,zero
    7324:	f800283a 	ret

00007328 <_cleanup_r>:
    7328:	01400074 	movhi	r5,1
    732c:	296e7304 	addi	r5,r5,-17972
    7330:	00080901 	jmpi	8090 <_fwalk_reent>

00007334 <__sinit.part.1>:
    7334:	defff704 	addi	sp,sp,-36
    7338:	00c00034 	movhi	r3,0
    733c:	dfc00815 	stw	ra,32(sp)
    7340:	ddc00715 	stw	r23,28(sp)
    7344:	dd800615 	stw	r22,24(sp)
    7348:	dd400515 	stw	r21,20(sp)
    734c:	dd000415 	stw	r20,16(sp)
    7350:	dcc00315 	stw	r19,12(sp)
    7354:	dc800215 	stw	r18,8(sp)
    7358:	dc400115 	stw	r17,4(sp)
    735c:	dc000015 	stw	r16,0(sp)
    7360:	18dcca04 	addi	r3,r3,29480
    7364:	24000117 	ldw	r16,4(r4)
    7368:	20c00f15 	stw	r3,60(r4)
    736c:	2080bb04 	addi	r2,r4,748
    7370:	00c000c4 	movi	r3,3
    7374:	20c0b915 	stw	r3,740(r4)
    7378:	2080ba15 	stw	r2,744(r4)
    737c:	2000b815 	stw	zero,736(r4)
    7380:	05c00204 	movi	r23,8
    7384:	00800104 	movi	r2,4
    7388:	2025883a 	mov	r18,r4
    738c:	b80d883a 	mov	r6,r23
    7390:	81001704 	addi	r4,r16,92
    7394:	000b883a 	mov	r5,zero
    7398:	80000015 	stw	zero,0(r16)
    739c:	80000115 	stw	zero,4(r16)
    73a0:	80000215 	stw	zero,8(r16)
    73a4:	8080030d 	sth	r2,12(r16)
    73a8:	80001915 	stw	zero,100(r16)
    73ac:	8000038d 	sth	zero,14(r16)
    73b0:	80000415 	stw	zero,16(r16)
    73b4:	80000515 	stw	zero,20(r16)
    73b8:	80000615 	stw	zero,24(r16)
    73bc:	00087740 	call	8774 <memset>
    73c0:	05800074 	movhi	r22,1
    73c4:	94400217 	ldw	r17,8(r18)
    73c8:	05400074 	movhi	r21,1
    73cc:	05000074 	movhi	r20,1
    73d0:	04c00074 	movhi	r19,1
    73d4:	b5a7cb04 	addi	r22,r22,-24788
    73d8:	ad67e204 	addi	r21,r21,-24696
    73dc:	a5280104 	addi	r20,r20,-24572
    73e0:	9ce81804 	addi	r19,r19,-24480
    73e4:	85800815 	stw	r22,32(r16)
    73e8:	85400915 	stw	r21,36(r16)
    73ec:	85000a15 	stw	r20,40(r16)
    73f0:	84c00b15 	stw	r19,44(r16)
    73f4:	84000715 	stw	r16,28(r16)
    73f8:	00800284 	movi	r2,10
    73fc:	8880030d 	sth	r2,12(r17)
    7400:	00800044 	movi	r2,1
    7404:	b80d883a 	mov	r6,r23
    7408:	89001704 	addi	r4,r17,92
    740c:	000b883a 	mov	r5,zero
    7410:	88000015 	stw	zero,0(r17)
    7414:	88000115 	stw	zero,4(r17)
    7418:	88000215 	stw	zero,8(r17)
    741c:	88001915 	stw	zero,100(r17)
    7420:	8880038d 	sth	r2,14(r17)
    7424:	88000415 	stw	zero,16(r17)
    7428:	88000515 	stw	zero,20(r17)
    742c:	88000615 	stw	zero,24(r17)
    7430:	00087740 	call	8774 <memset>
    7434:	94000317 	ldw	r16,12(r18)
    7438:	00800484 	movi	r2,18
    743c:	8c400715 	stw	r17,28(r17)
    7440:	8d800815 	stw	r22,32(r17)
    7444:	8d400915 	stw	r21,36(r17)
    7448:	8d000a15 	stw	r20,40(r17)
    744c:	8cc00b15 	stw	r19,44(r17)
    7450:	8080030d 	sth	r2,12(r16)
    7454:	00800084 	movi	r2,2
    7458:	80000015 	stw	zero,0(r16)
    745c:	80000115 	stw	zero,4(r16)
    7460:	80000215 	stw	zero,8(r16)
    7464:	80001915 	stw	zero,100(r16)
    7468:	8080038d 	sth	r2,14(r16)
    746c:	80000415 	stw	zero,16(r16)
    7470:	80000515 	stw	zero,20(r16)
    7474:	80000615 	stw	zero,24(r16)
    7478:	b80d883a 	mov	r6,r23
    747c:	000b883a 	mov	r5,zero
    7480:	81001704 	addi	r4,r16,92
    7484:	00087740 	call	8774 <memset>
    7488:	00800044 	movi	r2,1
    748c:	84000715 	stw	r16,28(r16)
    7490:	85800815 	stw	r22,32(r16)
    7494:	85400915 	stw	r21,36(r16)
    7498:	85000a15 	stw	r20,40(r16)
    749c:	84c00b15 	stw	r19,44(r16)
    74a0:	90800e15 	stw	r2,56(r18)
    74a4:	dfc00817 	ldw	ra,32(sp)
    74a8:	ddc00717 	ldw	r23,28(sp)
    74ac:	dd800617 	ldw	r22,24(sp)
    74b0:	dd400517 	ldw	r21,20(sp)
    74b4:	dd000417 	ldw	r20,16(sp)
    74b8:	dcc00317 	ldw	r19,12(sp)
    74bc:	dc800217 	ldw	r18,8(sp)
    74c0:	dc400117 	ldw	r17,4(sp)
    74c4:	dc000017 	ldw	r16,0(sp)
    74c8:	dec00904 	addi	sp,sp,36
    74cc:	f800283a 	ret

000074d0 <__fp_lock>:
    74d0:	0005883a 	mov	r2,zero
    74d4:	f800283a 	ret

000074d8 <__sfmoreglue>:
    74d8:	defffc04 	addi	sp,sp,-16
    74dc:	dc800215 	stw	r18,8(sp)
    74e0:	2825883a 	mov	r18,r5
    74e4:	dc000015 	stw	r16,0(sp)
    74e8:	01401a04 	movi	r5,104
    74ec:	2021883a 	mov	r16,r4
    74f0:	913fffc4 	addi	r4,r18,-1
    74f4:	dfc00315 	stw	ra,12(sp)
    74f8:	dc400115 	stw	r17,4(sp)
    74fc:	000cefc0 	call	cefc <__mulsi3>
    7500:	8009883a 	mov	r4,r16
    7504:	11401d04 	addi	r5,r2,116
    7508:	1023883a 	mov	r17,r2
    750c:	00028800 	call	2880 <_malloc_r>
    7510:	1021883a 	mov	r16,r2
    7514:	10000726 	beq	r2,zero,7534 <__sfmoreglue+0x5c>
    7518:	11000304 	addi	r4,r2,12
    751c:	10000015 	stw	zero,0(r2)
    7520:	14800115 	stw	r18,4(r2)
    7524:	11000215 	stw	r4,8(r2)
    7528:	89801a04 	addi	r6,r17,104
    752c:	000b883a 	mov	r5,zero
    7530:	00087740 	call	8774 <memset>
    7534:	8005883a 	mov	r2,r16
    7538:	dfc00317 	ldw	ra,12(sp)
    753c:	dc800217 	ldw	r18,8(sp)
    7540:	dc400117 	ldw	r17,4(sp)
    7544:	dc000017 	ldw	r16,0(sp)
    7548:	dec00404 	addi	sp,sp,16
    754c:	f800283a 	ret

00007550 <__sfp>:
    7550:	defffb04 	addi	sp,sp,-20
    7554:	dc000015 	stw	r16,0(sp)
    7558:	04000074 	movhi	r16,1
    755c:	8411e404 	addi	r16,r16,18320
    7560:	dcc00315 	stw	r19,12(sp)
    7564:	2027883a 	mov	r19,r4
    7568:	81000017 	ldw	r4,0(r16)
    756c:	dfc00415 	stw	ra,16(sp)
    7570:	dc800215 	stw	r18,8(sp)
    7574:	20800e17 	ldw	r2,56(r4)
    7578:	dc400115 	stw	r17,4(sp)
    757c:	1000021e 	bne	r2,zero,7588 <__sfp+0x38>
    7580:	00073340 	call	7334 <__sinit.part.1>
    7584:	81000017 	ldw	r4,0(r16)
    7588:	2480b804 	addi	r18,r4,736
    758c:	047fffc4 	movi	r17,-1
    7590:	91000117 	ldw	r4,4(r18)
    7594:	94000217 	ldw	r16,8(r18)
    7598:	213fffc4 	addi	r4,r4,-1
    759c:	20000a16 	blt	r4,zero,75c8 <__sfp+0x78>
    75a0:	8080030f 	ldh	r2,12(r16)
    75a4:	10000c26 	beq	r2,zero,75d8 <__sfp+0x88>
    75a8:	80c01d04 	addi	r3,r16,116
    75ac:	00000206 	br	75b8 <__sfp+0x68>
    75b0:	18bfe60f 	ldh	r2,-104(r3)
    75b4:	10000826 	beq	r2,zero,75d8 <__sfp+0x88>
    75b8:	213fffc4 	addi	r4,r4,-1
    75bc:	1c3ffd04 	addi	r16,r3,-12
    75c0:	18c01a04 	addi	r3,r3,104
    75c4:	247ffa1e 	bne	r4,r17,75b0 <__alt_exception_stack_pointer+0xf80075b0>
    75c8:	90800017 	ldw	r2,0(r18)
    75cc:	10001d26 	beq	r2,zero,7644 <__sfp+0xf4>
    75d0:	1025883a 	mov	r18,r2
    75d4:	003fee06 	br	7590 <__alt_exception_stack_pointer+0xf8007590>
    75d8:	00bfffc4 	movi	r2,-1
    75dc:	8080038d 	sth	r2,14(r16)
    75e0:	00800044 	movi	r2,1
    75e4:	8080030d 	sth	r2,12(r16)
    75e8:	80001915 	stw	zero,100(r16)
    75ec:	80000015 	stw	zero,0(r16)
    75f0:	80000215 	stw	zero,8(r16)
    75f4:	80000115 	stw	zero,4(r16)
    75f8:	80000415 	stw	zero,16(r16)
    75fc:	80000515 	stw	zero,20(r16)
    7600:	80000615 	stw	zero,24(r16)
    7604:	01800204 	movi	r6,8
    7608:	000b883a 	mov	r5,zero
    760c:	81001704 	addi	r4,r16,92
    7610:	00087740 	call	8774 <memset>
    7614:	8005883a 	mov	r2,r16
    7618:	80000c15 	stw	zero,48(r16)
    761c:	80000d15 	stw	zero,52(r16)
    7620:	80001115 	stw	zero,68(r16)
    7624:	80001215 	stw	zero,72(r16)
    7628:	dfc00417 	ldw	ra,16(sp)
    762c:	dcc00317 	ldw	r19,12(sp)
    7630:	dc800217 	ldw	r18,8(sp)
    7634:	dc400117 	ldw	r17,4(sp)
    7638:	dc000017 	ldw	r16,0(sp)
    763c:	dec00504 	addi	sp,sp,20
    7640:	f800283a 	ret
    7644:	01400104 	movi	r5,4
    7648:	9809883a 	mov	r4,r19
    764c:	00074d80 	call	74d8 <__sfmoreglue>
    7650:	90800015 	stw	r2,0(r18)
    7654:	103fde1e 	bne	r2,zero,75d0 <__alt_exception_stack_pointer+0xf80075d0>
    7658:	00800304 	movi	r2,12
    765c:	98800015 	stw	r2,0(r19)
    7660:	0005883a 	mov	r2,zero
    7664:	003ff006 	br	7628 <__alt_exception_stack_pointer+0xf8007628>

00007668 <_cleanup>:
    7668:	00800074 	movhi	r2,1
    766c:	1091e404 	addi	r2,r2,18320
    7670:	11000017 	ldw	r4,0(r2)
    7674:	01400074 	movhi	r5,1
    7678:	296e7304 	addi	r5,r5,-17972
    767c:	00080901 	jmpi	8090 <_fwalk_reent>

00007680 <__sinit>:
    7680:	20800e17 	ldw	r2,56(r4)
    7684:	10000126 	beq	r2,zero,768c <__sinit+0xc>
    7688:	f800283a 	ret
    768c:	00073341 	jmpi	7334 <__sinit.part.1>

00007690 <__sfp_lock_acquire>:
    7690:	f800283a 	ret

00007694 <__sfp_lock_release>:
    7694:	f800283a 	ret

00007698 <__sinit_lock_acquire>:
    7698:	f800283a 	ret

0000769c <__sinit_lock_release>:
    769c:	f800283a 	ret

000076a0 <__fp_lock_all>:
    76a0:	00800074 	movhi	r2,1
    76a4:	1091e504 	addi	r2,r2,18324
    76a8:	11000017 	ldw	r4,0(r2)
    76ac:	01400034 	movhi	r5,0
    76b0:	295d3404 	addi	r5,r5,29904
    76b4:	0007fcc1 	jmpi	7fcc <_fwalk>

000076b8 <__fp_unlock_all>:
    76b8:	00800074 	movhi	r2,1
    76bc:	1091e504 	addi	r2,r2,18324
    76c0:	11000017 	ldw	r4,0(r2)
    76c4:	01400034 	movhi	r5,0
    76c8:	295cc804 	addi	r5,r5,29472
    76cc:	0007fcc1 	jmpi	7fcc <_fwalk>

000076d0 <_malloc_trim_r>:
    76d0:	defffb04 	addi	sp,sp,-20
    76d4:	dcc00315 	stw	r19,12(sp)
    76d8:	04c00074 	movhi	r19,1
    76dc:	dc800215 	stw	r18,8(sp)
    76e0:	dc400115 	stw	r17,4(sp)
    76e4:	dc000015 	stw	r16,0(sp)
    76e8:	dfc00415 	stw	ra,16(sp)
    76ec:	2821883a 	mov	r16,r5
    76f0:	9ccc4004 	addi	r19,r19,12544
    76f4:	2025883a 	mov	r18,r4
    76f8:	000fd640 	call	fd64 <__malloc_lock>
    76fc:	98800217 	ldw	r2,8(r19)
    7700:	14400117 	ldw	r17,4(r2)
    7704:	00bfff04 	movi	r2,-4
    7708:	88a2703a 	and	r17,r17,r2
    770c:	8c21c83a 	sub	r16,r17,r16
    7710:	8403fbc4 	addi	r16,r16,4079
    7714:	8020d33a 	srli	r16,r16,12
    7718:	0083ffc4 	movi	r2,4095
    771c:	843fffc4 	addi	r16,r16,-1
    7720:	8020933a 	slli	r16,r16,12
    7724:	1400060e 	bge	r2,r16,7740 <_malloc_trim_r+0x70>
    7728:	000b883a 	mov	r5,zero
    772c:	9009883a 	mov	r4,r18
    7730:	00031cc0 	call	31cc <_sbrk_r>
    7734:	98c00217 	ldw	r3,8(r19)
    7738:	1c47883a 	add	r3,r3,r17
    773c:	10c00a26 	beq	r2,r3,7768 <_malloc_trim_r+0x98>
    7740:	9009883a 	mov	r4,r18
    7744:	000fd880 	call	fd88 <__malloc_unlock>
    7748:	0005883a 	mov	r2,zero
    774c:	dfc00417 	ldw	ra,16(sp)
    7750:	dcc00317 	ldw	r19,12(sp)
    7754:	dc800217 	ldw	r18,8(sp)
    7758:	dc400117 	ldw	r17,4(sp)
    775c:	dc000017 	ldw	r16,0(sp)
    7760:	dec00504 	addi	sp,sp,20
    7764:	f800283a 	ret
    7768:	040bc83a 	sub	r5,zero,r16
    776c:	9009883a 	mov	r4,r18
    7770:	00031cc0 	call	31cc <_sbrk_r>
    7774:	00ffffc4 	movi	r3,-1
    7778:	10c00d26 	beq	r2,r3,77b0 <_malloc_trim_r+0xe0>
    777c:	00c00074 	movhi	r3,1
    7780:	18d8c304 	addi	r3,r3,25356
    7784:	18800017 	ldw	r2,0(r3)
    7788:	99000217 	ldw	r4,8(r19)
    778c:	8c23c83a 	sub	r17,r17,r16
    7790:	8c400054 	ori	r17,r17,1
    7794:	1421c83a 	sub	r16,r2,r16
    7798:	24400115 	stw	r17,4(r4)
    779c:	9009883a 	mov	r4,r18
    77a0:	1c000015 	stw	r16,0(r3)
    77a4:	000fd880 	call	fd88 <__malloc_unlock>
    77a8:	00800044 	movi	r2,1
    77ac:	003fe706 	br	774c <__alt_exception_stack_pointer+0xf800774c>
    77b0:	000b883a 	mov	r5,zero
    77b4:	9009883a 	mov	r4,r18
    77b8:	00031cc0 	call	31cc <_sbrk_r>
    77bc:	99000217 	ldw	r4,8(r19)
    77c0:	014003c4 	movi	r5,15
    77c4:	1107c83a 	sub	r3,r2,r4
    77c8:	28ffdd0e 	bge	r5,r3,7740 <__alt_exception_stack_pointer+0xf8007740>
    77cc:	01400074 	movhi	r5,1
    77d0:	2951e604 	addi	r5,r5,18328
    77d4:	29400017 	ldw	r5,0(r5)
    77d8:	18c00054 	ori	r3,r3,1
    77dc:	20c00115 	stw	r3,4(r4)
    77e0:	00c00074 	movhi	r3,1
    77e4:	1145c83a 	sub	r2,r2,r5
    77e8:	18d8c304 	addi	r3,r3,25356
    77ec:	18800015 	stw	r2,0(r3)
    77f0:	003fd306 	br	7740 <__alt_exception_stack_pointer+0xf8007740>

000077f4 <_free_r>:
    77f4:	28004126 	beq	r5,zero,78fc <_free_r+0x108>
    77f8:	defffd04 	addi	sp,sp,-12
    77fc:	dc400115 	stw	r17,4(sp)
    7800:	dc000015 	stw	r16,0(sp)
    7804:	2023883a 	mov	r17,r4
    7808:	2821883a 	mov	r16,r5
    780c:	dfc00215 	stw	ra,8(sp)
    7810:	000fd640 	call	fd64 <__malloc_lock>
    7814:	81ffff17 	ldw	r7,-4(r16)
    7818:	00bfff84 	movi	r2,-2
    781c:	01000074 	movhi	r4,1
    7820:	81bffe04 	addi	r6,r16,-8
    7824:	3884703a 	and	r2,r7,r2
    7828:	210c4004 	addi	r4,r4,12544
    782c:	308b883a 	add	r5,r6,r2
    7830:	2a400117 	ldw	r9,4(r5)
    7834:	22000217 	ldw	r8,8(r4)
    7838:	00ffff04 	movi	r3,-4
    783c:	48c6703a 	and	r3,r9,r3
    7840:	2a005726 	beq	r5,r8,79a0 <_free_r+0x1ac>
    7844:	28c00115 	stw	r3,4(r5)
    7848:	39c0004c 	andi	r7,r7,1
    784c:	3800091e 	bne	r7,zero,7874 <_free_r+0x80>
    7850:	823ffe17 	ldw	r8,-8(r16)
    7854:	22400204 	addi	r9,r4,8
    7858:	320dc83a 	sub	r6,r6,r8
    785c:	31c00217 	ldw	r7,8(r6)
    7860:	1205883a 	add	r2,r2,r8
    7864:	3a406526 	beq	r7,r9,79fc <_free_r+0x208>
    7868:	32000317 	ldw	r8,12(r6)
    786c:	3a000315 	stw	r8,12(r7)
    7870:	41c00215 	stw	r7,8(r8)
    7874:	28cf883a 	add	r7,r5,r3
    7878:	39c00117 	ldw	r7,4(r7)
    787c:	39c0004c 	andi	r7,r7,1
    7880:	38003a26 	beq	r7,zero,796c <_free_r+0x178>
    7884:	10c00054 	ori	r3,r2,1
    7888:	30c00115 	stw	r3,4(r6)
    788c:	3087883a 	add	r3,r6,r2
    7890:	18800015 	stw	r2,0(r3)
    7894:	00c07fc4 	movi	r3,511
    7898:	18801936 	bltu	r3,r2,7900 <_free_r+0x10c>
    789c:	1004d0fa 	srli	r2,r2,3
    78a0:	01c00044 	movi	r7,1
    78a4:	21400117 	ldw	r5,4(r4)
    78a8:	10c00044 	addi	r3,r2,1
    78ac:	18c7883a 	add	r3,r3,r3
    78b0:	1005d0ba 	srai	r2,r2,2
    78b4:	18c7883a 	add	r3,r3,r3
    78b8:	18c7883a 	add	r3,r3,r3
    78bc:	1907883a 	add	r3,r3,r4
    78c0:	3884983a 	sll	r2,r7,r2
    78c4:	19c00017 	ldw	r7,0(r3)
    78c8:	1a3ffe04 	addi	r8,r3,-8
    78cc:	1144b03a 	or	r2,r2,r5
    78d0:	32000315 	stw	r8,12(r6)
    78d4:	31c00215 	stw	r7,8(r6)
    78d8:	20800115 	stw	r2,4(r4)
    78dc:	19800015 	stw	r6,0(r3)
    78e0:	39800315 	stw	r6,12(r7)
    78e4:	8809883a 	mov	r4,r17
    78e8:	dfc00217 	ldw	ra,8(sp)
    78ec:	dc400117 	ldw	r17,4(sp)
    78f0:	dc000017 	ldw	r16,0(sp)
    78f4:	dec00304 	addi	sp,sp,12
    78f8:	000fd881 	jmpi	fd88 <__malloc_unlock>
    78fc:	f800283a 	ret
    7900:	100ad27a 	srli	r5,r2,9
    7904:	00c00104 	movi	r3,4
    7908:	19404a36 	bltu	r3,r5,7a34 <_free_r+0x240>
    790c:	100ad1ba 	srli	r5,r2,6
    7910:	28c00e44 	addi	r3,r5,57
    7914:	18c7883a 	add	r3,r3,r3
    7918:	29400e04 	addi	r5,r5,56
    791c:	18c7883a 	add	r3,r3,r3
    7920:	18c7883a 	add	r3,r3,r3
    7924:	1909883a 	add	r4,r3,r4
    7928:	20c00017 	ldw	r3,0(r4)
    792c:	01c00074 	movhi	r7,1
    7930:	213ffe04 	addi	r4,r4,-8
    7934:	39cc4004 	addi	r7,r7,12544
    7938:	20c04426 	beq	r4,r3,7a4c <_free_r+0x258>
    793c:	01ffff04 	movi	r7,-4
    7940:	19400117 	ldw	r5,4(r3)
    7944:	29ca703a 	and	r5,r5,r7
    7948:	1140022e 	bgeu	r2,r5,7954 <_free_r+0x160>
    794c:	18c00217 	ldw	r3,8(r3)
    7950:	20fffb1e 	bne	r4,r3,7940 <__alt_exception_stack_pointer+0xf8007940>
    7954:	19000317 	ldw	r4,12(r3)
    7958:	31000315 	stw	r4,12(r6)
    795c:	30c00215 	stw	r3,8(r6)
    7960:	21800215 	stw	r6,8(r4)
    7964:	19800315 	stw	r6,12(r3)
    7968:	003fde06 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    796c:	29c00217 	ldw	r7,8(r5)
    7970:	10c5883a 	add	r2,r2,r3
    7974:	00c00074 	movhi	r3,1
    7978:	18cc4204 	addi	r3,r3,12552
    797c:	38c03b26 	beq	r7,r3,7a6c <_free_r+0x278>
    7980:	2a000317 	ldw	r8,12(r5)
    7984:	11400054 	ori	r5,r2,1
    7988:	3087883a 	add	r3,r6,r2
    798c:	3a000315 	stw	r8,12(r7)
    7990:	41c00215 	stw	r7,8(r8)
    7994:	31400115 	stw	r5,4(r6)
    7998:	18800015 	stw	r2,0(r3)
    799c:	003fbd06 	br	7894 <__alt_exception_stack_pointer+0xf8007894>
    79a0:	39c0004c 	andi	r7,r7,1
    79a4:	10c5883a 	add	r2,r2,r3
    79a8:	3800071e 	bne	r7,zero,79c8 <_free_r+0x1d4>
    79ac:	81fffe17 	ldw	r7,-8(r16)
    79b0:	31cdc83a 	sub	r6,r6,r7
    79b4:	30c00317 	ldw	r3,12(r6)
    79b8:	31400217 	ldw	r5,8(r6)
    79bc:	11c5883a 	add	r2,r2,r7
    79c0:	28c00315 	stw	r3,12(r5)
    79c4:	19400215 	stw	r5,8(r3)
    79c8:	10c00054 	ori	r3,r2,1
    79cc:	30c00115 	stw	r3,4(r6)
    79d0:	00c00074 	movhi	r3,1
    79d4:	18d1e704 	addi	r3,r3,18332
    79d8:	18c00017 	ldw	r3,0(r3)
    79dc:	21800215 	stw	r6,8(r4)
    79e0:	10ffc036 	bltu	r2,r3,78e4 <__alt_exception_stack_pointer+0xf80078e4>
    79e4:	00800074 	movhi	r2,1
    79e8:	1098b704 	addi	r2,r2,25308
    79ec:	11400017 	ldw	r5,0(r2)
    79f0:	8809883a 	mov	r4,r17
    79f4:	00076d00 	call	76d0 <_malloc_trim_r>
    79f8:	003fba06 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    79fc:	28c9883a 	add	r4,r5,r3
    7a00:	21000117 	ldw	r4,4(r4)
    7a04:	2100004c 	andi	r4,r4,1
    7a08:	2000391e 	bne	r4,zero,7af0 <_free_r+0x2fc>
    7a0c:	29c00217 	ldw	r7,8(r5)
    7a10:	29000317 	ldw	r4,12(r5)
    7a14:	1885883a 	add	r2,r3,r2
    7a18:	10c00054 	ori	r3,r2,1
    7a1c:	39000315 	stw	r4,12(r7)
    7a20:	21c00215 	stw	r7,8(r4)
    7a24:	30c00115 	stw	r3,4(r6)
    7a28:	308d883a 	add	r6,r6,r2
    7a2c:	30800015 	stw	r2,0(r6)
    7a30:	003fac06 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    7a34:	00c00504 	movi	r3,20
    7a38:	19401536 	bltu	r3,r5,7a90 <_free_r+0x29c>
    7a3c:	28c01704 	addi	r3,r5,92
    7a40:	18c7883a 	add	r3,r3,r3
    7a44:	294016c4 	addi	r5,r5,91
    7a48:	003fb406 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7a4c:	280bd0ba 	srai	r5,r5,2
    7a50:	00c00044 	movi	r3,1
    7a54:	38800117 	ldw	r2,4(r7)
    7a58:	194a983a 	sll	r5,r3,r5
    7a5c:	2007883a 	mov	r3,r4
    7a60:	2884b03a 	or	r2,r5,r2
    7a64:	38800115 	stw	r2,4(r7)
    7a68:	003fbb06 	br	7958 <__alt_exception_stack_pointer+0xf8007958>
    7a6c:	21800515 	stw	r6,20(r4)
    7a70:	21800415 	stw	r6,16(r4)
    7a74:	10c00054 	ori	r3,r2,1
    7a78:	31c00315 	stw	r7,12(r6)
    7a7c:	31c00215 	stw	r7,8(r6)
    7a80:	30c00115 	stw	r3,4(r6)
    7a84:	308d883a 	add	r6,r6,r2
    7a88:	30800015 	stw	r2,0(r6)
    7a8c:	003f9506 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>
    7a90:	00c01504 	movi	r3,84
    7a94:	19400536 	bltu	r3,r5,7aac <_free_r+0x2b8>
    7a98:	100ad33a 	srli	r5,r2,12
    7a9c:	28c01bc4 	addi	r3,r5,111
    7aa0:	18c7883a 	add	r3,r3,r3
    7aa4:	29401b84 	addi	r5,r5,110
    7aa8:	003f9c06 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7aac:	00c05504 	movi	r3,340
    7ab0:	19400536 	bltu	r3,r5,7ac8 <_free_r+0x2d4>
    7ab4:	100ad3fa 	srli	r5,r2,15
    7ab8:	28c01e04 	addi	r3,r5,120
    7abc:	18c7883a 	add	r3,r3,r3
    7ac0:	29401dc4 	addi	r5,r5,119
    7ac4:	003f9506 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7ac8:	00c15504 	movi	r3,1364
    7acc:	19400536 	bltu	r3,r5,7ae4 <_free_r+0x2f0>
    7ad0:	100ad4ba 	srli	r5,r2,18
    7ad4:	28c01f44 	addi	r3,r5,125
    7ad8:	18c7883a 	add	r3,r3,r3
    7adc:	29401f04 	addi	r5,r5,124
    7ae0:	003f8e06 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7ae4:	00c03f84 	movi	r3,254
    7ae8:	01401f84 	movi	r5,126
    7aec:	003f8b06 	br	791c <__alt_exception_stack_pointer+0xf800791c>
    7af0:	10c00054 	ori	r3,r2,1
    7af4:	30c00115 	stw	r3,4(r6)
    7af8:	308d883a 	add	r6,r6,r2
    7afc:	30800015 	stw	r2,0(r6)
    7b00:	003f7806 	br	78e4 <__alt_exception_stack_pointer+0xf80078e4>

00007b04 <__sfvwrite_r>:
    7b04:	30800217 	ldw	r2,8(r6)
    7b08:	10006726 	beq	r2,zero,7ca8 <__sfvwrite_r+0x1a4>
    7b0c:	28c0030b 	ldhu	r3,12(r5)
    7b10:	defff404 	addi	sp,sp,-48
    7b14:	dd400715 	stw	r21,28(sp)
    7b18:	dd000615 	stw	r20,24(sp)
    7b1c:	dc000215 	stw	r16,8(sp)
    7b20:	dfc00b15 	stw	ra,44(sp)
    7b24:	df000a15 	stw	fp,40(sp)
    7b28:	ddc00915 	stw	r23,36(sp)
    7b2c:	dd800815 	stw	r22,32(sp)
    7b30:	dcc00515 	stw	r19,20(sp)
    7b34:	dc800415 	stw	r18,16(sp)
    7b38:	dc400315 	stw	r17,12(sp)
    7b3c:	1880020c 	andi	r2,r3,8
    7b40:	2821883a 	mov	r16,r5
    7b44:	202b883a 	mov	r21,r4
    7b48:	3029883a 	mov	r20,r6
    7b4c:	10002726 	beq	r2,zero,7bec <__sfvwrite_r+0xe8>
    7b50:	28800417 	ldw	r2,16(r5)
    7b54:	10002526 	beq	r2,zero,7bec <__sfvwrite_r+0xe8>
    7b58:	1880008c 	andi	r2,r3,2
    7b5c:	a4400017 	ldw	r17,0(r20)
    7b60:	10002a26 	beq	r2,zero,7c0c <__sfvwrite_r+0x108>
    7b64:	05a00034 	movhi	r22,32768
    7b68:	0027883a 	mov	r19,zero
    7b6c:	0025883a 	mov	r18,zero
    7b70:	b5bf0004 	addi	r22,r22,-1024
    7b74:	980d883a 	mov	r6,r19
    7b78:	a809883a 	mov	r4,r21
    7b7c:	90004626 	beq	r18,zero,7c98 <__sfvwrite_r+0x194>
    7b80:	900f883a 	mov	r7,r18
    7b84:	b480022e 	bgeu	r22,r18,7b90 <__sfvwrite_r+0x8c>
    7b88:	01e00034 	movhi	r7,32768
    7b8c:	39ff0004 	addi	r7,r7,-1024
    7b90:	80800917 	ldw	r2,36(r16)
    7b94:	81400717 	ldw	r5,28(r16)
    7b98:	103ee83a 	callr	r2
    7b9c:	00805a0e 	bge	zero,r2,7d08 <__sfvwrite_r+0x204>
    7ba0:	a0c00217 	ldw	r3,8(r20)
    7ba4:	98a7883a 	add	r19,r19,r2
    7ba8:	90a5c83a 	sub	r18,r18,r2
    7bac:	1885c83a 	sub	r2,r3,r2
    7bb0:	a0800215 	stw	r2,8(r20)
    7bb4:	103fef1e 	bne	r2,zero,7b74 <__alt_exception_stack_pointer+0xf8007b74>
    7bb8:	0005883a 	mov	r2,zero
    7bbc:	dfc00b17 	ldw	ra,44(sp)
    7bc0:	df000a17 	ldw	fp,40(sp)
    7bc4:	ddc00917 	ldw	r23,36(sp)
    7bc8:	dd800817 	ldw	r22,32(sp)
    7bcc:	dd400717 	ldw	r21,28(sp)
    7bd0:	dd000617 	ldw	r20,24(sp)
    7bd4:	dcc00517 	ldw	r19,20(sp)
    7bd8:	dc800417 	ldw	r18,16(sp)
    7bdc:	dc400317 	ldw	r17,12(sp)
    7be0:	dc000217 	ldw	r16,8(sp)
    7be4:	dec00c04 	addi	sp,sp,48
    7be8:	f800283a 	ret
    7bec:	800b883a 	mov	r5,r16
    7bf0:	a809883a 	mov	r4,r21
    7bf4:	00056740 	call	5674 <__swsetup_r>
    7bf8:	1000ee1e 	bne	r2,zero,7fb4 <__sfvwrite_r+0x4b0>
    7bfc:	80c0030b 	ldhu	r3,12(r16)
    7c00:	a4400017 	ldw	r17,0(r20)
    7c04:	1880008c 	andi	r2,r3,2
    7c08:	103fd61e 	bne	r2,zero,7b64 <__alt_exception_stack_pointer+0xf8007b64>
    7c0c:	1880004c 	andi	r2,r3,1
    7c10:	1000421e 	bne	r2,zero,7d1c <__sfvwrite_r+0x218>
    7c14:	0039883a 	mov	fp,zero
    7c18:	0025883a 	mov	r18,zero
    7c1c:	90001a26 	beq	r18,zero,7c88 <__sfvwrite_r+0x184>
    7c20:	1880800c 	andi	r2,r3,512
    7c24:	84c00217 	ldw	r19,8(r16)
    7c28:	10002126 	beq	r2,zero,7cb0 <__sfvwrite_r+0x1ac>
    7c2c:	982f883a 	mov	r23,r19
    7c30:	94c09636 	bltu	r18,r19,7e8c <__sfvwrite_r+0x388>
    7c34:	1881200c 	andi	r2,r3,1152
    7c38:	1000a11e 	bne	r2,zero,7ec0 <__sfvwrite_r+0x3bc>
    7c3c:	81000017 	ldw	r4,0(r16)
    7c40:	b80d883a 	mov	r6,r23
    7c44:	e00b883a 	mov	r5,fp
    7c48:	00086180 	call	8618 <memmove>
    7c4c:	80c00217 	ldw	r3,8(r16)
    7c50:	81000017 	ldw	r4,0(r16)
    7c54:	9005883a 	mov	r2,r18
    7c58:	1ce7c83a 	sub	r19,r3,r19
    7c5c:	25cf883a 	add	r7,r4,r23
    7c60:	84c00215 	stw	r19,8(r16)
    7c64:	81c00015 	stw	r7,0(r16)
    7c68:	a0c00217 	ldw	r3,8(r20)
    7c6c:	e0b9883a 	add	fp,fp,r2
    7c70:	90a5c83a 	sub	r18,r18,r2
    7c74:	18a7c83a 	sub	r19,r3,r2
    7c78:	a4c00215 	stw	r19,8(r20)
    7c7c:	983fce26 	beq	r19,zero,7bb8 <__alt_exception_stack_pointer+0xf8007bb8>
    7c80:	80c0030b 	ldhu	r3,12(r16)
    7c84:	903fe61e 	bne	r18,zero,7c20 <__alt_exception_stack_pointer+0xf8007c20>
    7c88:	8f000017 	ldw	fp,0(r17)
    7c8c:	8c800117 	ldw	r18,4(r17)
    7c90:	8c400204 	addi	r17,r17,8
    7c94:	003fe106 	br	7c1c <__alt_exception_stack_pointer+0xf8007c1c>
    7c98:	8cc00017 	ldw	r19,0(r17)
    7c9c:	8c800117 	ldw	r18,4(r17)
    7ca0:	8c400204 	addi	r17,r17,8
    7ca4:	003fb306 	br	7b74 <__alt_exception_stack_pointer+0xf8007b74>
    7ca8:	0005883a 	mov	r2,zero
    7cac:	f800283a 	ret
    7cb0:	81000017 	ldw	r4,0(r16)
    7cb4:	80800417 	ldw	r2,16(r16)
    7cb8:	11005a36 	bltu	r2,r4,7e24 <__sfvwrite_r+0x320>
    7cbc:	85c00517 	ldw	r23,20(r16)
    7cc0:	95c05836 	bltu	r18,r23,7e24 <__sfvwrite_r+0x320>
    7cc4:	00a00034 	movhi	r2,32768
    7cc8:	10bfffc4 	addi	r2,r2,-1
    7ccc:	9009883a 	mov	r4,r18
    7cd0:	1480012e 	bgeu	r2,r18,7cd8 <__sfvwrite_r+0x1d4>
    7cd4:	1009883a 	mov	r4,r2
    7cd8:	b80b883a 	mov	r5,r23
    7cdc:	000cd480 	call	cd48 <__divsi3>
    7ce0:	b80b883a 	mov	r5,r23
    7ce4:	1009883a 	mov	r4,r2
    7ce8:	000cefc0 	call	cefc <__mulsi3>
    7cec:	81400717 	ldw	r5,28(r16)
    7cf0:	80c00917 	ldw	r3,36(r16)
    7cf4:	100f883a 	mov	r7,r2
    7cf8:	e00d883a 	mov	r6,fp
    7cfc:	a809883a 	mov	r4,r21
    7d00:	183ee83a 	callr	r3
    7d04:	00bfd816 	blt	zero,r2,7c68 <__alt_exception_stack_pointer+0xf8007c68>
    7d08:	8080030b 	ldhu	r2,12(r16)
    7d0c:	10801014 	ori	r2,r2,64
    7d10:	8080030d 	sth	r2,12(r16)
    7d14:	00bfffc4 	movi	r2,-1
    7d18:	003fa806 	br	7bbc <__alt_exception_stack_pointer+0xf8007bbc>
    7d1c:	0027883a 	mov	r19,zero
    7d20:	0011883a 	mov	r8,zero
    7d24:	0039883a 	mov	fp,zero
    7d28:	0025883a 	mov	r18,zero
    7d2c:	90001f26 	beq	r18,zero,7dac <__sfvwrite_r+0x2a8>
    7d30:	40005a26 	beq	r8,zero,7e9c <__sfvwrite_r+0x398>
    7d34:	982d883a 	mov	r22,r19
    7d38:	94c0012e 	bgeu	r18,r19,7d40 <__sfvwrite_r+0x23c>
    7d3c:	902d883a 	mov	r22,r18
    7d40:	81000017 	ldw	r4,0(r16)
    7d44:	80800417 	ldw	r2,16(r16)
    7d48:	b02f883a 	mov	r23,r22
    7d4c:	81c00517 	ldw	r7,20(r16)
    7d50:	1100032e 	bgeu	r2,r4,7d60 <__sfvwrite_r+0x25c>
    7d54:	80c00217 	ldw	r3,8(r16)
    7d58:	38c7883a 	add	r3,r7,r3
    7d5c:	1d801816 	blt	r3,r22,7dc0 <__sfvwrite_r+0x2bc>
    7d60:	b1c03e16 	blt	r22,r7,7e5c <__sfvwrite_r+0x358>
    7d64:	80800917 	ldw	r2,36(r16)
    7d68:	81400717 	ldw	r5,28(r16)
    7d6c:	e00d883a 	mov	r6,fp
    7d70:	da000115 	stw	r8,4(sp)
    7d74:	a809883a 	mov	r4,r21
    7d78:	103ee83a 	callr	r2
    7d7c:	102f883a 	mov	r23,r2
    7d80:	da000117 	ldw	r8,4(sp)
    7d84:	00bfe00e 	bge	zero,r2,7d08 <__alt_exception_stack_pointer+0xf8007d08>
    7d88:	9de7c83a 	sub	r19,r19,r23
    7d8c:	98001f26 	beq	r19,zero,7e0c <__sfvwrite_r+0x308>
    7d90:	a0800217 	ldw	r2,8(r20)
    7d94:	e5f9883a 	add	fp,fp,r23
    7d98:	95e5c83a 	sub	r18,r18,r23
    7d9c:	15efc83a 	sub	r23,r2,r23
    7da0:	a5c00215 	stw	r23,8(r20)
    7da4:	b83f8426 	beq	r23,zero,7bb8 <__alt_exception_stack_pointer+0xf8007bb8>
    7da8:	903fe11e 	bne	r18,zero,7d30 <__alt_exception_stack_pointer+0xf8007d30>
    7dac:	8f000017 	ldw	fp,0(r17)
    7db0:	8c800117 	ldw	r18,4(r17)
    7db4:	0011883a 	mov	r8,zero
    7db8:	8c400204 	addi	r17,r17,8
    7dbc:	003fdb06 	br	7d2c <__alt_exception_stack_pointer+0xf8007d2c>
    7dc0:	180d883a 	mov	r6,r3
    7dc4:	e00b883a 	mov	r5,fp
    7dc8:	da000115 	stw	r8,4(sp)
    7dcc:	d8c00015 	stw	r3,0(sp)
    7dd0:	00086180 	call	8618 <memmove>
    7dd4:	d8c00017 	ldw	r3,0(sp)
    7dd8:	80800017 	ldw	r2,0(r16)
    7ddc:	800b883a 	mov	r5,r16
    7de0:	a809883a 	mov	r4,r21
    7de4:	10c5883a 	add	r2,r2,r3
    7de8:	80800015 	stw	r2,0(r16)
    7dec:	d8c00015 	stw	r3,0(sp)
    7df0:	00072940 	call	7294 <_fflush_r>
    7df4:	d8c00017 	ldw	r3,0(sp)
    7df8:	da000117 	ldw	r8,4(sp)
    7dfc:	103fc21e 	bne	r2,zero,7d08 <__alt_exception_stack_pointer+0xf8007d08>
    7e00:	182f883a 	mov	r23,r3
    7e04:	9de7c83a 	sub	r19,r19,r23
    7e08:	983fe11e 	bne	r19,zero,7d90 <__alt_exception_stack_pointer+0xf8007d90>
    7e0c:	800b883a 	mov	r5,r16
    7e10:	a809883a 	mov	r4,r21
    7e14:	00072940 	call	7294 <_fflush_r>
    7e18:	103fbb1e 	bne	r2,zero,7d08 <__alt_exception_stack_pointer+0xf8007d08>
    7e1c:	0011883a 	mov	r8,zero
    7e20:	003fdb06 	br	7d90 <__alt_exception_stack_pointer+0xf8007d90>
    7e24:	94c0012e 	bgeu	r18,r19,7e2c <__sfvwrite_r+0x328>
    7e28:	9027883a 	mov	r19,r18
    7e2c:	980d883a 	mov	r6,r19
    7e30:	e00b883a 	mov	r5,fp
    7e34:	00086180 	call	8618 <memmove>
    7e38:	80800217 	ldw	r2,8(r16)
    7e3c:	80c00017 	ldw	r3,0(r16)
    7e40:	14c5c83a 	sub	r2,r2,r19
    7e44:	1cc7883a 	add	r3,r3,r19
    7e48:	80800215 	stw	r2,8(r16)
    7e4c:	80c00015 	stw	r3,0(r16)
    7e50:	10004326 	beq	r2,zero,7f60 <__sfvwrite_r+0x45c>
    7e54:	9805883a 	mov	r2,r19
    7e58:	003f8306 	br	7c68 <__alt_exception_stack_pointer+0xf8007c68>
    7e5c:	b00d883a 	mov	r6,r22
    7e60:	e00b883a 	mov	r5,fp
    7e64:	da000115 	stw	r8,4(sp)
    7e68:	00086180 	call	8618 <memmove>
    7e6c:	80800217 	ldw	r2,8(r16)
    7e70:	80c00017 	ldw	r3,0(r16)
    7e74:	da000117 	ldw	r8,4(sp)
    7e78:	1585c83a 	sub	r2,r2,r22
    7e7c:	1dad883a 	add	r22,r3,r22
    7e80:	80800215 	stw	r2,8(r16)
    7e84:	85800015 	stw	r22,0(r16)
    7e88:	003fbf06 	br	7d88 <__alt_exception_stack_pointer+0xf8007d88>
    7e8c:	81000017 	ldw	r4,0(r16)
    7e90:	9027883a 	mov	r19,r18
    7e94:	902f883a 	mov	r23,r18
    7e98:	003f6906 	br	7c40 <__alt_exception_stack_pointer+0xf8007c40>
    7e9c:	900d883a 	mov	r6,r18
    7ea0:	01400284 	movi	r5,10
    7ea4:	e009883a 	mov	r4,fp
    7ea8:	00083ec0 	call	83ec <memchr>
    7eac:	10003e26 	beq	r2,zero,7fa8 <__sfvwrite_r+0x4a4>
    7eb0:	10800044 	addi	r2,r2,1
    7eb4:	1727c83a 	sub	r19,r2,fp
    7eb8:	02000044 	movi	r8,1
    7ebc:	003f9d06 	br	7d34 <__alt_exception_stack_pointer+0xf8007d34>
    7ec0:	80800517 	ldw	r2,20(r16)
    7ec4:	81400417 	ldw	r5,16(r16)
    7ec8:	81c00017 	ldw	r7,0(r16)
    7ecc:	10a7883a 	add	r19,r2,r2
    7ed0:	9885883a 	add	r2,r19,r2
    7ed4:	1026d7fa 	srli	r19,r2,31
    7ed8:	396dc83a 	sub	r22,r7,r5
    7edc:	b1000044 	addi	r4,r22,1
    7ee0:	9885883a 	add	r2,r19,r2
    7ee4:	1027d07a 	srai	r19,r2,1
    7ee8:	2485883a 	add	r2,r4,r18
    7eec:	980d883a 	mov	r6,r19
    7ef0:	9880022e 	bgeu	r19,r2,7efc <__sfvwrite_r+0x3f8>
    7ef4:	1027883a 	mov	r19,r2
    7ef8:	100d883a 	mov	r6,r2
    7efc:	18c1000c 	andi	r3,r3,1024
    7f00:	18001c26 	beq	r3,zero,7f74 <__sfvwrite_r+0x470>
    7f04:	300b883a 	mov	r5,r6
    7f08:	a809883a 	mov	r4,r21
    7f0c:	00028800 	call	2880 <_malloc_r>
    7f10:	102f883a 	mov	r23,r2
    7f14:	10002926 	beq	r2,zero,7fbc <__sfvwrite_r+0x4b8>
    7f18:	81400417 	ldw	r5,16(r16)
    7f1c:	b00d883a 	mov	r6,r22
    7f20:	1009883a 	mov	r4,r2
    7f24:	00084d00 	call	84d0 <memcpy>
    7f28:	8080030b 	ldhu	r2,12(r16)
    7f2c:	00fedfc4 	movi	r3,-1153
    7f30:	10c4703a 	and	r2,r2,r3
    7f34:	10802014 	ori	r2,r2,128
    7f38:	8080030d 	sth	r2,12(r16)
    7f3c:	bd89883a 	add	r4,r23,r22
    7f40:	9d8fc83a 	sub	r7,r19,r22
    7f44:	85c00415 	stw	r23,16(r16)
    7f48:	84c00515 	stw	r19,20(r16)
    7f4c:	81000015 	stw	r4,0(r16)
    7f50:	9027883a 	mov	r19,r18
    7f54:	81c00215 	stw	r7,8(r16)
    7f58:	902f883a 	mov	r23,r18
    7f5c:	003f3806 	br	7c40 <__alt_exception_stack_pointer+0xf8007c40>
    7f60:	800b883a 	mov	r5,r16
    7f64:	a809883a 	mov	r4,r21
    7f68:	00072940 	call	7294 <_fflush_r>
    7f6c:	103fb926 	beq	r2,zero,7e54 <__alt_exception_stack_pointer+0xf8007e54>
    7f70:	003f6506 	br	7d08 <__alt_exception_stack_pointer+0xf8007d08>
    7f74:	a809883a 	mov	r4,r21
    7f78:	00099540 	call	9954 <_realloc_r>
    7f7c:	102f883a 	mov	r23,r2
    7f80:	103fee1e 	bne	r2,zero,7f3c <__alt_exception_stack_pointer+0xf8007f3c>
    7f84:	81400417 	ldw	r5,16(r16)
    7f88:	a809883a 	mov	r4,r21
    7f8c:	00077f40 	call	77f4 <_free_r>
    7f90:	8080030b 	ldhu	r2,12(r16)
    7f94:	00ffdfc4 	movi	r3,-129
    7f98:	1884703a 	and	r2,r3,r2
    7f9c:	00c00304 	movi	r3,12
    7fa0:	a8c00015 	stw	r3,0(r21)
    7fa4:	003f5906 	br	7d0c <__alt_exception_stack_pointer+0xf8007d0c>
    7fa8:	94c00044 	addi	r19,r18,1
    7fac:	02000044 	movi	r8,1
    7fb0:	003f6006 	br	7d34 <__alt_exception_stack_pointer+0xf8007d34>
    7fb4:	00bfffc4 	movi	r2,-1
    7fb8:	003f0006 	br	7bbc <__alt_exception_stack_pointer+0xf8007bbc>
    7fbc:	00800304 	movi	r2,12
    7fc0:	a8800015 	stw	r2,0(r21)
    7fc4:	8080030b 	ldhu	r2,12(r16)
    7fc8:	003f5006 	br	7d0c <__alt_exception_stack_pointer+0xf8007d0c>

00007fcc <_fwalk>:
    7fcc:	defff704 	addi	sp,sp,-36
    7fd0:	dd000415 	stw	r20,16(sp)
    7fd4:	dfc00815 	stw	ra,32(sp)
    7fd8:	ddc00715 	stw	r23,28(sp)
    7fdc:	dd800615 	stw	r22,24(sp)
    7fe0:	dd400515 	stw	r21,20(sp)
    7fe4:	dcc00315 	stw	r19,12(sp)
    7fe8:	dc800215 	stw	r18,8(sp)
    7fec:	dc400115 	stw	r17,4(sp)
    7ff0:	dc000015 	stw	r16,0(sp)
    7ff4:	2500b804 	addi	r20,r4,736
    7ff8:	a0002326 	beq	r20,zero,8088 <_fwalk+0xbc>
    7ffc:	282b883a 	mov	r21,r5
    8000:	002f883a 	mov	r23,zero
    8004:	05800044 	movi	r22,1
    8008:	04ffffc4 	movi	r19,-1
    800c:	a4400117 	ldw	r17,4(r20)
    8010:	a4800217 	ldw	r18,8(r20)
    8014:	8c7fffc4 	addi	r17,r17,-1
    8018:	88000d16 	blt	r17,zero,8050 <_fwalk+0x84>
    801c:	94000304 	addi	r16,r18,12
    8020:	94800384 	addi	r18,r18,14
    8024:	8080000b 	ldhu	r2,0(r16)
    8028:	8c7fffc4 	addi	r17,r17,-1
    802c:	813ffd04 	addi	r4,r16,-12
    8030:	b080042e 	bgeu	r22,r2,8044 <_fwalk+0x78>
    8034:	9080000f 	ldh	r2,0(r18)
    8038:	14c00226 	beq	r2,r19,8044 <_fwalk+0x78>
    803c:	a83ee83a 	callr	r21
    8040:	b8aeb03a 	or	r23,r23,r2
    8044:	84001a04 	addi	r16,r16,104
    8048:	94801a04 	addi	r18,r18,104
    804c:	8cfff51e 	bne	r17,r19,8024 <__alt_exception_stack_pointer+0xf8008024>
    8050:	a5000017 	ldw	r20,0(r20)
    8054:	a03fed1e 	bne	r20,zero,800c <__alt_exception_stack_pointer+0xf800800c>
    8058:	b805883a 	mov	r2,r23
    805c:	dfc00817 	ldw	ra,32(sp)
    8060:	ddc00717 	ldw	r23,28(sp)
    8064:	dd800617 	ldw	r22,24(sp)
    8068:	dd400517 	ldw	r21,20(sp)
    806c:	dd000417 	ldw	r20,16(sp)
    8070:	dcc00317 	ldw	r19,12(sp)
    8074:	dc800217 	ldw	r18,8(sp)
    8078:	dc400117 	ldw	r17,4(sp)
    807c:	dc000017 	ldw	r16,0(sp)
    8080:	dec00904 	addi	sp,sp,36
    8084:	f800283a 	ret
    8088:	002f883a 	mov	r23,zero
    808c:	003ff206 	br	8058 <__alt_exception_stack_pointer+0xf8008058>

00008090 <_fwalk_reent>:
    8090:	defff704 	addi	sp,sp,-36
    8094:	dd000415 	stw	r20,16(sp)
    8098:	dfc00815 	stw	ra,32(sp)
    809c:	ddc00715 	stw	r23,28(sp)
    80a0:	dd800615 	stw	r22,24(sp)
    80a4:	dd400515 	stw	r21,20(sp)
    80a8:	dcc00315 	stw	r19,12(sp)
    80ac:	dc800215 	stw	r18,8(sp)
    80b0:	dc400115 	stw	r17,4(sp)
    80b4:	dc000015 	stw	r16,0(sp)
    80b8:	2500b804 	addi	r20,r4,736
    80bc:	a0002326 	beq	r20,zero,814c <_fwalk_reent+0xbc>
    80c0:	282b883a 	mov	r21,r5
    80c4:	2027883a 	mov	r19,r4
    80c8:	002f883a 	mov	r23,zero
    80cc:	05800044 	movi	r22,1
    80d0:	04bfffc4 	movi	r18,-1
    80d4:	a4400117 	ldw	r17,4(r20)
    80d8:	a4000217 	ldw	r16,8(r20)
    80dc:	8c7fffc4 	addi	r17,r17,-1
    80e0:	88000c16 	blt	r17,zero,8114 <_fwalk_reent+0x84>
    80e4:	84000304 	addi	r16,r16,12
    80e8:	8080000b 	ldhu	r2,0(r16)
    80ec:	8c7fffc4 	addi	r17,r17,-1
    80f0:	817ffd04 	addi	r5,r16,-12
    80f4:	b080052e 	bgeu	r22,r2,810c <_fwalk_reent+0x7c>
    80f8:	8080008f 	ldh	r2,2(r16)
    80fc:	9809883a 	mov	r4,r19
    8100:	14800226 	beq	r2,r18,810c <_fwalk_reent+0x7c>
    8104:	a83ee83a 	callr	r21
    8108:	b8aeb03a 	or	r23,r23,r2
    810c:	84001a04 	addi	r16,r16,104
    8110:	8cbff51e 	bne	r17,r18,80e8 <__alt_exception_stack_pointer+0xf80080e8>
    8114:	a5000017 	ldw	r20,0(r20)
    8118:	a03fee1e 	bne	r20,zero,80d4 <__alt_exception_stack_pointer+0xf80080d4>
    811c:	b805883a 	mov	r2,r23
    8120:	dfc00817 	ldw	ra,32(sp)
    8124:	ddc00717 	ldw	r23,28(sp)
    8128:	dd800617 	ldw	r22,24(sp)
    812c:	dd400517 	ldw	r21,20(sp)
    8130:	dd000417 	ldw	r20,16(sp)
    8134:	dcc00317 	ldw	r19,12(sp)
    8138:	dc800217 	ldw	r18,8(sp)
    813c:	dc400117 	ldw	r17,4(sp)
    8140:	dc000017 	ldw	r16,0(sp)
    8144:	dec00904 	addi	sp,sp,36
    8148:	f800283a 	ret
    814c:	002f883a 	mov	r23,zero
    8150:	003ff206 	br	811c <__alt_exception_stack_pointer+0xf800811c>

00008154 <_setlocale_r>:
    8154:	30001b26 	beq	r6,zero,81c4 <_setlocale_r+0x70>
    8158:	01400074 	movhi	r5,1
    815c:	defffe04 	addi	sp,sp,-8
    8160:	294a9304 	addi	r5,r5,10828
    8164:	3009883a 	mov	r4,r6
    8168:	dc000015 	stw	r16,0(sp)
    816c:	dfc00115 	stw	ra,4(sp)
    8170:	3021883a 	mov	r16,r6
    8174:	000a0680 	call	a068 <strcmp>
    8178:	1000061e 	bne	r2,zero,8194 <_setlocale_r+0x40>
    817c:	00800074 	movhi	r2,1
    8180:	108a7404 	addi	r2,r2,10704
    8184:	dfc00117 	ldw	ra,4(sp)
    8188:	dc000017 	ldw	r16,0(sp)
    818c:	dec00204 	addi	sp,sp,8
    8190:	f800283a 	ret
    8194:	01400074 	movhi	r5,1
    8198:	294a7404 	addi	r5,r5,10704
    819c:	8009883a 	mov	r4,r16
    81a0:	000a0680 	call	a068 <strcmp>
    81a4:	103ff526 	beq	r2,zero,817c <__alt_exception_stack_pointer+0xf800817c>
    81a8:	01400074 	movhi	r5,1
    81ac:	294a7e04 	addi	r5,r5,10744
    81b0:	8009883a 	mov	r4,r16
    81b4:	000a0680 	call	a068 <strcmp>
    81b8:	103ff026 	beq	r2,zero,817c <__alt_exception_stack_pointer+0xf800817c>
    81bc:	0005883a 	mov	r2,zero
    81c0:	003ff006 	br	8184 <__alt_exception_stack_pointer+0xf8008184>
    81c4:	00800074 	movhi	r2,1
    81c8:	108a7404 	addi	r2,r2,10704
    81cc:	f800283a 	ret

000081d0 <__locale_charset>:
    81d0:	00800074 	movhi	r2,1
    81d4:	108d4a04 	addi	r2,r2,13608
    81d8:	f800283a 	ret

000081dc <__locale_mb_cur_max>:
    81dc:	00800074 	movhi	r2,1
    81e0:	1091e804 	addi	r2,r2,18336
    81e4:	10800017 	ldw	r2,0(r2)
    81e8:	f800283a 	ret

000081ec <__locale_msgcharset>:
    81ec:	00800074 	movhi	r2,1
    81f0:	108d4204 	addi	r2,r2,13576
    81f4:	f800283a 	ret

000081f8 <__locale_cjk_lang>:
    81f8:	0005883a 	mov	r2,zero
    81fc:	f800283a 	ret

00008200 <_localeconv_r>:
    8200:	00800074 	movhi	r2,1
    8204:	108d5204 	addi	r2,r2,13640
    8208:	f800283a 	ret

0000820c <setlocale>:
    820c:	00800074 	movhi	r2,1
    8210:	1091e504 	addi	r2,r2,18324
    8214:	280d883a 	mov	r6,r5
    8218:	200b883a 	mov	r5,r4
    821c:	11000017 	ldw	r4,0(r2)
    8220:	00081541 	jmpi	8154 <_setlocale_r>

00008224 <localeconv>:
    8224:	00800074 	movhi	r2,1
    8228:	108d5204 	addi	r2,r2,13640
    822c:	f800283a 	ret

00008230 <__smakebuf_r>:
    8230:	2880030b 	ldhu	r2,12(r5)
    8234:	10c0008c 	andi	r3,r2,2
    8238:	1800411e 	bne	r3,zero,8340 <__smakebuf_r+0x110>
    823c:	deffec04 	addi	sp,sp,-80
    8240:	dc000f15 	stw	r16,60(sp)
    8244:	2821883a 	mov	r16,r5
    8248:	2940038f 	ldh	r5,14(r5)
    824c:	dc401015 	stw	r17,64(sp)
    8250:	dfc01315 	stw	ra,76(sp)
    8254:	dcc01215 	stw	r19,72(sp)
    8258:	dc801115 	stw	r18,68(sp)
    825c:	2023883a 	mov	r17,r4
    8260:	28001c16 	blt	r5,zero,82d4 <__smakebuf_r+0xa4>
    8264:	d80d883a 	mov	r6,sp
    8268:	000bcd80 	call	bcd8 <_fstat_r>
    826c:	10001816 	blt	r2,zero,82d0 <__smakebuf_r+0xa0>
    8270:	d8800117 	ldw	r2,4(sp)
    8274:	00e00014 	movui	r3,32768
    8278:	10bc000c 	andi	r2,r2,61440
    827c:	14c80020 	cmpeqi	r19,r2,8192
    8280:	10c03726 	beq	r2,r3,8360 <__smakebuf_r+0x130>
    8284:	80c0030b 	ldhu	r3,12(r16)
    8288:	18c20014 	ori	r3,r3,2048
    828c:	80c0030d 	sth	r3,12(r16)
    8290:	00c80004 	movi	r3,8192
    8294:	10c0521e 	bne	r2,r3,83e0 <__smakebuf_r+0x1b0>
    8298:	8140038f 	ldh	r5,14(r16)
    829c:	8809883a 	mov	r4,r17
    82a0:	000bd340 	call	bd34 <_isatty_r>
    82a4:	10004c26 	beq	r2,zero,83d8 <__smakebuf_r+0x1a8>
    82a8:	8080030b 	ldhu	r2,12(r16)
    82ac:	80c010c4 	addi	r3,r16,67
    82b0:	80c00015 	stw	r3,0(r16)
    82b4:	10800054 	ori	r2,r2,1
    82b8:	8080030d 	sth	r2,12(r16)
    82bc:	00800044 	movi	r2,1
    82c0:	80c00415 	stw	r3,16(r16)
    82c4:	80800515 	stw	r2,20(r16)
    82c8:	04810004 	movi	r18,1024
    82cc:	00000706 	br	82ec <__smakebuf_r+0xbc>
    82d0:	8080030b 	ldhu	r2,12(r16)
    82d4:	10c0200c 	andi	r3,r2,128
    82d8:	18001f1e 	bne	r3,zero,8358 <__smakebuf_r+0x128>
    82dc:	04810004 	movi	r18,1024
    82e0:	10820014 	ori	r2,r2,2048
    82e4:	8080030d 	sth	r2,12(r16)
    82e8:	0027883a 	mov	r19,zero
    82ec:	900b883a 	mov	r5,r18
    82f0:	8809883a 	mov	r4,r17
    82f4:	00028800 	call	2880 <_malloc_r>
    82f8:	10002c26 	beq	r2,zero,83ac <__smakebuf_r+0x17c>
    82fc:	80c0030b 	ldhu	r3,12(r16)
    8300:	01000034 	movhi	r4,0
    8304:	211cca04 	addi	r4,r4,29480
    8308:	89000f15 	stw	r4,60(r17)
    830c:	18c02014 	ori	r3,r3,128
    8310:	80c0030d 	sth	r3,12(r16)
    8314:	80800015 	stw	r2,0(r16)
    8318:	80800415 	stw	r2,16(r16)
    831c:	84800515 	stw	r18,20(r16)
    8320:	98001a1e 	bne	r19,zero,838c <__smakebuf_r+0x15c>
    8324:	dfc01317 	ldw	ra,76(sp)
    8328:	dcc01217 	ldw	r19,72(sp)
    832c:	dc801117 	ldw	r18,68(sp)
    8330:	dc401017 	ldw	r17,64(sp)
    8334:	dc000f17 	ldw	r16,60(sp)
    8338:	dec01404 	addi	sp,sp,80
    833c:	f800283a 	ret
    8340:	288010c4 	addi	r2,r5,67
    8344:	28800015 	stw	r2,0(r5)
    8348:	28800415 	stw	r2,16(r5)
    834c:	00800044 	movi	r2,1
    8350:	28800515 	stw	r2,20(r5)
    8354:	f800283a 	ret
    8358:	04801004 	movi	r18,64
    835c:	003fe006 	br	82e0 <__alt_exception_stack_pointer+0xf80082e0>
    8360:	81000a17 	ldw	r4,40(r16)
    8364:	00c00074 	movhi	r3,1
    8368:	18e80104 	addi	r3,r3,-24572
    836c:	20ffc51e 	bne	r4,r3,8284 <__alt_exception_stack_pointer+0xf8008284>
    8370:	8080030b 	ldhu	r2,12(r16)
    8374:	04810004 	movi	r18,1024
    8378:	84801315 	stw	r18,76(r16)
    837c:	1484b03a 	or	r2,r2,r18
    8380:	8080030d 	sth	r2,12(r16)
    8384:	0027883a 	mov	r19,zero
    8388:	003fd806 	br	82ec <__alt_exception_stack_pointer+0xf80082ec>
    838c:	8140038f 	ldh	r5,14(r16)
    8390:	8809883a 	mov	r4,r17
    8394:	000bd340 	call	bd34 <_isatty_r>
    8398:	103fe226 	beq	r2,zero,8324 <__alt_exception_stack_pointer+0xf8008324>
    839c:	8080030b 	ldhu	r2,12(r16)
    83a0:	10800054 	ori	r2,r2,1
    83a4:	8080030d 	sth	r2,12(r16)
    83a8:	003fde06 	br	8324 <__alt_exception_stack_pointer+0xf8008324>
    83ac:	8080030b 	ldhu	r2,12(r16)
    83b0:	10c0800c 	andi	r3,r2,512
    83b4:	183fdb1e 	bne	r3,zero,8324 <__alt_exception_stack_pointer+0xf8008324>
    83b8:	10800094 	ori	r2,r2,2
    83bc:	80c010c4 	addi	r3,r16,67
    83c0:	8080030d 	sth	r2,12(r16)
    83c4:	00800044 	movi	r2,1
    83c8:	80c00015 	stw	r3,0(r16)
    83cc:	80c00415 	stw	r3,16(r16)
    83d0:	80800515 	stw	r2,20(r16)
    83d4:	003fd306 	br	8324 <__alt_exception_stack_pointer+0xf8008324>
    83d8:	04810004 	movi	r18,1024
    83dc:	003fc306 	br	82ec <__alt_exception_stack_pointer+0xf80082ec>
    83e0:	0027883a 	mov	r19,zero
    83e4:	04810004 	movi	r18,1024
    83e8:	003fc006 	br	82ec <__alt_exception_stack_pointer+0xf80082ec>

000083ec <memchr>:
    83ec:	208000cc 	andi	r2,r4,3
    83f0:	280f883a 	mov	r7,r5
    83f4:	10003426 	beq	r2,zero,84c8 <memchr+0xdc>
    83f8:	30bfffc4 	addi	r2,r6,-1
    83fc:	30001a26 	beq	r6,zero,8468 <memchr+0x7c>
    8400:	20c00003 	ldbu	r3,0(r4)
    8404:	29803fcc 	andi	r6,r5,255
    8408:	30c0051e 	bne	r6,r3,8420 <memchr+0x34>
    840c:	00001806 	br	8470 <memchr+0x84>
    8410:	10001526 	beq	r2,zero,8468 <memchr+0x7c>
    8414:	20c00003 	ldbu	r3,0(r4)
    8418:	10bfffc4 	addi	r2,r2,-1
    841c:	30c01426 	beq	r6,r3,8470 <memchr+0x84>
    8420:	21000044 	addi	r4,r4,1
    8424:	20c000cc 	andi	r3,r4,3
    8428:	183ff91e 	bne	r3,zero,8410 <__alt_exception_stack_pointer+0xf8008410>
    842c:	020000c4 	movi	r8,3
    8430:	40801136 	bltu	r8,r2,8478 <memchr+0x8c>
    8434:	10000c26 	beq	r2,zero,8468 <memchr+0x7c>
    8438:	20c00003 	ldbu	r3,0(r4)
    843c:	29403fcc 	andi	r5,r5,255
    8440:	28c00b26 	beq	r5,r3,8470 <memchr+0x84>
    8444:	20c00044 	addi	r3,r4,1
    8448:	39803fcc 	andi	r6,r7,255
    844c:	2089883a 	add	r4,r4,r2
    8450:	00000306 	br	8460 <memchr+0x74>
    8454:	18c00044 	addi	r3,r3,1
    8458:	197fffc3 	ldbu	r5,-1(r3)
    845c:	31400526 	beq	r6,r5,8474 <memchr+0x88>
    8460:	1805883a 	mov	r2,r3
    8464:	20fffb1e 	bne	r4,r3,8454 <__alt_exception_stack_pointer+0xf8008454>
    8468:	0005883a 	mov	r2,zero
    846c:	f800283a 	ret
    8470:	2005883a 	mov	r2,r4
    8474:	f800283a 	ret
    8478:	28c03fcc 	andi	r3,r5,255
    847c:	1812923a 	slli	r9,r3,8
    8480:	02ffbff4 	movhi	r11,65279
    8484:	02a02074 	movhi	r10,32897
    8488:	48d2b03a 	or	r9,r9,r3
    848c:	4806943a 	slli	r3,r9,16
    8490:	5affbfc4 	addi	r11,r11,-257
    8494:	52a02004 	addi	r10,r10,-32640
    8498:	48d2b03a 	or	r9,r9,r3
    849c:	20c00017 	ldw	r3,0(r4)
    84a0:	48c6f03a 	xor	r3,r9,r3
    84a4:	1acd883a 	add	r6,r3,r11
    84a8:	00c6303a 	nor	r3,zero,r3
    84ac:	30c6703a 	and	r3,r6,r3
    84b0:	1a86703a 	and	r3,r3,r10
    84b4:	183fe01e 	bne	r3,zero,8438 <__alt_exception_stack_pointer+0xf8008438>
    84b8:	10bfff04 	addi	r2,r2,-4
    84bc:	21000104 	addi	r4,r4,4
    84c0:	40bff636 	bltu	r8,r2,849c <__alt_exception_stack_pointer+0xf800849c>
    84c4:	003fdb06 	br	8434 <__alt_exception_stack_pointer+0xf8008434>
    84c8:	3005883a 	mov	r2,r6
    84cc:	003fd706 	br	842c <__alt_exception_stack_pointer+0xf800842c>

000084d0 <memcpy>:
    84d0:	defffd04 	addi	sp,sp,-12
    84d4:	dfc00215 	stw	ra,8(sp)
    84d8:	dc400115 	stw	r17,4(sp)
    84dc:	dc000015 	stw	r16,0(sp)
    84e0:	00c003c4 	movi	r3,15
    84e4:	2005883a 	mov	r2,r4
    84e8:	1980452e 	bgeu	r3,r6,8600 <memcpy+0x130>
    84ec:	2906b03a 	or	r3,r5,r4
    84f0:	18c000cc 	andi	r3,r3,3
    84f4:	1800441e 	bne	r3,zero,8608 <memcpy+0x138>
    84f8:	347ffc04 	addi	r17,r6,-16
    84fc:	8822d13a 	srli	r17,r17,4
    8500:	28c00104 	addi	r3,r5,4
    8504:	23400104 	addi	r13,r4,4
    8508:	8820913a 	slli	r16,r17,4
    850c:	2b000204 	addi	r12,r5,8
    8510:	22c00204 	addi	r11,r4,8
    8514:	84000504 	addi	r16,r16,20
    8518:	2a800304 	addi	r10,r5,12
    851c:	22400304 	addi	r9,r4,12
    8520:	2c21883a 	add	r16,r5,r16
    8524:	2811883a 	mov	r8,r5
    8528:	200f883a 	mov	r7,r4
    852c:	41000017 	ldw	r4,0(r8)
    8530:	1fc00017 	ldw	ra,0(r3)
    8534:	63c00017 	ldw	r15,0(r12)
    8538:	39000015 	stw	r4,0(r7)
    853c:	53800017 	ldw	r14,0(r10)
    8540:	6fc00015 	stw	ra,0(r13)
    8544:	5bc00015 	stw	r15,0(r11)
    8548:	4b800015 	stw	r14,0(r9)
    854c:	18c00404 	addi	r3,r3,16
    8550:	39c00404 	addi	r7,r7,16
    8554:	42000404 	addi	r8,r8,16
    8558:	6b400404 	addi	r13,r13,16
    855c:	63000404 	addi	r12,r12,16
    8560:	5ac00404 	addi	r11,r11,16
    8564:	52800404 	addi	r10,r10,16
    8568:	4a400404 	addi	r9,r9,16
    856c:	1c3fef1e 	bne	r3,r16,852c <__alt_exception_stack_pointer+0xf800852c>
    8570:	89c00044 	addi	r7,r17,1
    8574:	380e913a 	slli	r7,r7,4
    8578:	310003cc 	andi	r4,r6,15
    857c:	02c000c4 	movi	r11,3
    8580:	11c7883a 	add	r3,r2,r7
    8584:	29cb883a 	add	r5,r5,r7
    8588:	5900212e 	bgeu	r11,r4,8610 <memcpy+0x140>
    858c:	1813883a 	mov	r9,r3
    8590:	2811883a 	mov	r8,r5
    8594:	200f883a 	mov	r7,r4
    8598:	42800017 	ldw	r10,0(r8)
    859c:	4a400104 	addi	r9,r9,4
    85a0:	39ffff04 	addi	r7,r7,-4
    85a4:	4abfff15 	stw	r10,-4(r9)
    85a8:	42000104 	addi	r8,r8,4
    85ac:	59fffa36 	bltu	r11,r7,8598 <__alt_exception_stack_pointer+0xf8008598>
    85b0:	213fff04 	addi	r4,r4,-4
    85b4:	2008d0ba 	srli	r4,r4,2
    85b8:	318000cc 	andi	r6,r6,3
    85bc:	21000044 	addi	r4,r4,1
    85c0:	2109883a 	add	r4,r4,r4
    85c4:	2109883a 	add	r4,r4,r4
    85c8:	1907883a 	add	r3,r3,r4
    85cc:	290b883a 	add	r5,r5,r4
    85d0:	30000626 	beq	r6,zero,85ec <memcpy+0x11c>
    85d4:	198d883a 	add	r6,r3,r6
    85d8:	29c00003 	ldbu	r7,0(r5)
    85dc:	18c00044 	addi	r3,r3,1
    85e0:	29400044 	addi	r5,r5,1
    85e4:	19ffffc5 	stb	r7,-1(r3)
    85e8:	19bffb1e 	bne	r3,r6,85d8 <__alt_exception_stack_pointer+0xf80085d8>
    85ec:	dfc00217 	ldw	ra,8(sp)
    85f0:	dc400117 	ldw	r17,4(sp)
    85f4:	dc000017 	ldw	r16,0(sp)
    85f8:	dec00304 	addi	sp,sp,12
    85fc:	f800283a 	ret
    8600:	2007883a 	mov	r3,r4
    8604:	003ff206 	br	85d0 <__alt_exception_stack_pointer+0xf80085d0>
    8608:	2007883a 	mov	r3,r4
    860c:	003ff106 	br	85d4 <__alt_exception_stack_pointer+0xf80085d4>
    8610:	200d883a 	mov	r6,r4
    8614:	003fee06 	br	85d0 <__alt_exception_stack_pointer+0xf80085d0>

00008618 <memmove>:
    8618:	2005883a 	mov	r2,r4
    861c:	29000b2e 	bgeu	r5,r4,864c <memmove+0x34>
    8620:	298f883a 	add	r7,r5,r6
    8624:	21c0092e 	bgeu	r4,r7,864c <memmove+0x34>
    8628:	2187883a 	add	r3,r4,r6
    862c:	198bc83a 	sub	r5,r3,r6
    8630:	30004826 	beq	r6,zero,8754 <memmove+0x13c>
    8634:	39ffffc4 	addi	r7,r7,-1
    8638:	39000003 	ldbu	r4,0(r7)
    863c:	18ffffc4 	addi	r3,r3,-1
    8640:	19000005 	stb	r4,0(r3)
    8644:	28fffb1e 	bne	r5,r3,8634 <__alt_exception_stack_pointer+0xf8008634>
    8648:	f800283a 	ret
    864c:	00c003c4 	movi	r3,15
    8650:	1980412e 	bgeu	r3,r6,8758 <memmove+0x140>
    8654:	2886b03a 	or	r3,r5,r2
    8658:	18c000cc 	andi	r3,r3,3
    865c:	1800401e 	bne	r3,zero,8760 <memmove+0x148>
    8660:	33fffc04 	addi	r15,r6,-16
    8664:	781ed13a 	srli	r15,r15,4
    8668:	28c00104 	addi	r3,r5,4
    866c:	13400104 	addi	r13,r2,4
    8670:	781c913a 	slli	r14,r15,4
    8674:	2b000204 	addi	r12,r5,8
    8678:	12c00204 	addi	r11,r2,8
    867c:	73800504 	addi	r14,r14,20
    8680:	2a800304 	addi	r10,r5,12
    8684:	12400304 	addi	r9,r2,12
    8688:	2b9d883a 	add	r14,r5,r14
    868c:	2811883a 	mov	r8,r5
    8690:	100f883a 	mov	r7,r2
    8694:	41000017 	ldw	r4,0(r8)
    8698:	39c00404 	addi	r7,r7,16
    869c:	18c00404 	addi	r3,r3,16
    86a0:	393ffc15 	stw	r4,-16(r7)
    86a4:	193ffc17 	ldw	r4,-16(r3)
    86a8:	6b400404 	addi	r13,r13,16
    86ac:	5ac00404 	addi	r11,r11,16
    86b0:	693ffc15 	stw	r4,-16(r13)
    86b4:	61000017 	ldw	r4,0(r12)
    86b8:	4a400404 	addi	r9,r9,16
    86bc:	42000404 	addi	r8,r8,16
    86c0:	593ffc15 	stw	r4,-16(r11)
    86c4:	51000017 	ldw	r4,0(r10)
    86c8:	63000404 	addi	r12,r12,16
    86cc:	52800404 	addi	r10,r10,16
    86d0:	493ffc15 	stw	r4,-16(r9)
    86d4:	1bbfef1e 	bne	r3,r14,8694 <__alt_exception_stack_pointer+0xf8008694>
    86d8:	79000044 	addi	r4,r15,1
    86dc:	2008913a 	slli	r4,r4,4
    86e0:	328003cc 	andi	r10,r6,15
    86e4:	02c000c4 	movi	r11,3
    86e8:	1107883a 	add	r3,r2,r4
    86ec:	290b883a 	add	r5,r5,r4
    86f0:	5a801e2e 	bgeu	r11,r10,876c <memmove+0x154>
    86f4:	1813883a 	mov	r9,r3
    86f8:	2811883a 	mov	r8,r5
    86fc:	500f883a 	mov	r7,r10
    8700:	41000017 	ldw	r4,0(r8)
    8704:	4a400104 	addi	r9,r9,4
    8708:	39ffff04 	addi	r7,r7,-4
    870c:	493fff15 	stw	r4,-4(r9)
    8710:	42000104 	addi	r8,r8,4
    8714:	59fffa36 	bltu	r11,r7,8700 <__alt_exception_stack_pointer+0xf8008700>
    8718:	513fff04 	addi	r4,r10,-4
    871c:	2008d0ba 	srli	r4,r4,2
    8720:	318000cc 	andi	r6,r6,3
    8724:	21000044 	addi	r4,r4,1
    8728:	2109883a 	add	r4,r4,r4
    872c:	2109883a 	add	r4,r4,r4
    8730:	1907883a 	add	r3,r3,r4
    8734:	290b883a 	add	r5,r5,r4
    8738:	30000b26 	beq	r6,zero,8768 <memmove+0x150>
    873c:	198d883a 	add	r6,r3,r6
    8740:	29c00003 	ldbu	r7,0(r5)
    8744:	18c00044 	addi	r3,r3,1
    8748:	29400044 	addi	r5,r5,1
    874c:	19ffffc5 	stb	r7,-1(r3)
    8750:	19bffb1e 	bne	r3,r6,8740 <__alt_exception_stack_pointer+0xf8008740>
    8754:	f800283a 	ret
    8758:	1007883a 	mov	r3,r2
    875c:	003ff606 	br	8738 <__alt_exception_stack_pointer+0xf8008738>
    8760:	1007883a 	mov	r3,r2
    8764:	003ff506 	br	873c <__alt_exception_stack_pointer+0xf800873c>
    8768:	f800283a 	ret
    876c:	500d883a 	mov	r6,r10
    8770:	003ff106 	br	8738 <__alt_exception_stack_pointer+0xf8008738>

00008774 <memset>:
    8774:	20c000cc 	andi	r3,r4,3
    8778:	2005883a 	mov	r2,r4
    877c:	18004426 	beq	r3,zero,8890 <memset+0x11c>
    8780:	31ffffc4 	addi	r7,r6,-1
    8784:	30004026 	beq	r6,zero,8888 <memset+0x114>
    8788:	2813883a 	mov	r9,r5
    878c:	200d883a 	mov	r6,r4
    8790:	2007883a 	mov	r3,r4
    8794:	00000406 	br	87a8 <memset+0x34>
    8798:	3a3fffc4 	addi	r8,r7,-1
    879c:	31800044 	addi	r6,r6,1
    87a0:	38003926 	beq	r7,zero,8888 <memset+0x114>
    87a4:	400f883a 	mov	r7,r8
    87a8:	18c00044 	addi	r3,r3,1
    87ac:	32400005 	stb	r9,0(r6)
    87b0:	1a0000cc 	andi	r8,r3,3
    87b4:	403ff81e 	bne	r8,zero,8798 <__alt_exception_stack_pointer+0xf8008798>
    87b8:	010000c4 	movi	r4,3
    87bc:	21c02d2e 	bgeu	r4,r7,8874 <memset+0x100>
    87c0:	29003fcc 	andi	r4,r5,255
    87c4:	200c923a 	slli	r6,r4,8
    87c8:	3108b03a 	or	r4,r6,r4
    87cc:	200c943a 	slli	r6,r4,16
    87d0:	218cb03a 	or	r6,r4,r6
    87d4:	010003c4 	movi	r4,15
    87d8:	21c0182e 	bgeu	r4,r7,883c <memset+0xc8>
    87dc:	3b3ffc04 	addi	r12,r7,-16
    87e0:	6018d13a 	srli	r12,r12,4
    87e4:	1a000104 	addi	r8,r3,4
    87e8:	1ac00204 	addi	r11,r3,8
    87ec:	6008913a 	slli	r4,r12,4
    87f0:	1a800304 	addi	r10,r3,12
    87f4:	1813883a 	mov	r9,r3
    87f8:	21000504 	addi	r4,r4,20
    87fc:	1909883a 	add	r4,r3,r4
    8800:	49800015 	stw	r6,0(r9)
    8804:	41800015 	stw	r6,0(r8)
    8808:	59800015 	stw	r6,0(r11)
    880c:	51800015 	stw	r6,0(r10)
    8810:	42000404 	addi	r8,r8,16
    8814:	4a400404 	addi	r9,r9,16
    8818:	5ac00404 	addi	r11,r11,16
    881c:	52800404 	addi	r10,r10,16
    8820:	413ff71e 	bne	r8,r4,8800 <__alt_exception_stack_pointer+0xf8008800>
    8824:	63000044 	addi	r12,r12,1
    8828:	6018913a 	slli	r12,r12,4
    882c:	39c003cc 	andi	r7,r7,15
    8830:	010000c4 	movi	r4,3
    8834:	1b07883a 	add	r3,r3,r12
    8838:	21c00e2e 	bgeu	r4,r7,8874 <memset+0x100>
    883c:	1813883a 	mov	r9,r3
    8840:	3811883a 	mov	r8,r7
    8844:	010000c4 	movi	r4,3
    8848:	49800015 	stw	r6,0(r9)
    884c:	423fff04 	addi	r8,r8,-4
    8850:	4a400104 	addi	r9,r9,4
    8854:	223ffc36 	bltu	r4,r8,8848 <__alt_exception_stack_pointer+0xf8008848>
    8858:	393fff04 	addi	r4,r7,-4
    885c:	2008d0ba 	srli	r4,r4,2
    8860:	39c000cc 	andi	r7,r7,3
    8864:	21000044 	addi	r4,r4,1
    8868:	2109883a 	add	r4,r4,r4
    886c:	2109883a 	add	r4,r4,r4
    8870:	1907883a 	add	r3,r3,r4
    8874:	38000526 	beq	r7,zero,888c <memset+0x118>
    8878:	19cf883a 	add	r7,r3,r7
    887c:	19400005 	stb	r5,0(r3)
    8880:	18c00044 	addi	r3,r3,1
    8884:	38fffd1e 	bne	r7,r3,887c <__alt_exception_stack_pointer+0xf800887c>
    8888:	f800283a 	ret
    888c:	f800283a 	ret
    8890:	2007883a 	mov	r3,r4
    8894:	300f883a 	mov	r7,r6
    8898:	003fc706 	br	87b8 <__alt_exception_stack_pointer+0xf80087b8>

0000889c <_Balloc>:
    889c:	20801317 	ldw	r2,76(r4)
    88a0:	defffc04 	addi	sp,sp,-16
    88a4:	dc400115 	stw	r17,4(sp)
    88a8:	dc000015 	stw	r16,0(sp)
    88ac:	dfc00315 	stw	ra,12(sp)
    88b0:	dc800215 	stw	r18,8(sp)
    88b4:	2023883a 	mov	r17,r4
    88b8:	2821883a 	mov	r16,r5
    88bc:	10000f26 	beq	r2,zero,88fc <_Balloc+0x60>
    88c0:	8407883a 	add	r3,r16,r16
    88c4:	18c7883a 	add	r3,r3,r3
    88c8:	10c7883a 	add	r3,r2,r3
    88cc:	18800017 	ldw	r2,0(r3)
    88d0:	10001126 	beq	r2,zero,8918 <_Balloc+0x7c>
    88d4:	11000017 	ldw	r4,0(r2)
    88d8:	19000015 	stw	r4,0(r3)
    88dc:	10000415 	stw	zero,16(r2)
    88e0:	10000315 	stw	zero,12(r2)
    88e4:	dfc00317 	ldw	ra,12(sp)
    88e8:	dc800217 	ldw	r18,8(sp)
    88ec:	dc400117 	ldw	r17,4(sp)
    88f0:	dc000017 	ldw	r16,0(sp)
    88f4:	dec00404 	addi	sp,sp,16
    88f8:	f800283a 	ret
    88fc:	01800844 	movi	r6,33
    8900:	01400104 	movi	r5,4
    8904:	000b8f00 	call	b8f0 <_calloc_r>
    8908:	88801315 	stw	r2,76(r17)
    890c:	103fec1e 	bne	r2,zero,88c0 <__alt_exception_stack_pointer+0xf80088c0>
    8910:	0005883a 	mov	r2,zero
    8914:	003ff306 	br	88e4 <__alt_exception_stack_pointer+0xf80088e4>
    8918:	01400044 	movi	r5,1
    891c:	2c24983a 	sll	r18,r5,r16
    8920:	8809883a 	mov	r4,r17
    8924:	91800144 	addi	r6,r18,5
    8928:	318d883a 	add	r6,r6,r6
    892c:	318d883a 	add	r6,r6,r6
    8930:	000b8f00 	call	b8f0 <_calloc_r>
    8934:	103ff626 	beq	r2,zero,8910 <__alt_exception_stack_pointer+0xf8008910>
    8938:	14000115 	stw	r16,4(r2)
    893c:	14800215 	stw	r18,8(r2)
    8940:	003fe606 	br	88dc <__alt_exception_stack_pointer+0xf80088dc>

00008944 <_Bfree>:
    8944:	28000826 	beq	r5,zero,8968 <_Bfree+0x24>
    8948:	28c00117 	ldw	r3,4(r5)
    894c:	20801317 	ldw	r2,76(r4)
    8950:	18c7883a 	add	r3,r3,r3
    8954:	18c7883a 	add	r3,r3,r3
    8958:	10c5883a 	add	r2,r2,r3
    895c:	10c00017 	ldw	r3,0(r2)
    8960:	28c00015 	stw	r3,0(r5)
    8964:	11400015 	stw	r5,0(r2)
    8968:	f800283a 	ret

0000896c <__multadd>:
    896c:	defff704 	addi	sp,sp,-36
    8970:	dc800215 	stw	r18,8(sp)
    8974:	2c800417 	ldw	r18,16(r5)
    8978:	dd800615 	stw	r22,24(sp)
    897c:	dd400515 	stw	r21,20(sp)
    8980:	dd000415 	stw	r20,16(sp)
    8984:	dcc00315 	stw	r19,12(sp)
    8988:	dc400115 	stw	r17,4(sp)
    898c:	dc000015 	stw	r16,0(sp)
    8990:	dfc00815 	stw	ra,32(sp)
    8994:	ddc00715 	stw	r23,28(sp)
    8998:	2827883a 	mov	r19,r5
    899c:	2029883a 	mov	r20,r4
    89a0:	3023883a 	mov	r17,r6
    89a4:	3821883a 	mov	r16,r7
    89a8:	2d400504 	addi	r21,r5,20
    89ac:	002d883a 	mov	r22,zero
    89b0:	adc00017 	ldw	r23,0(r21)
    89b4:	880b883a 	mov	r5,r17
    89b8:	ad400104 	addi	r21,r21,4
    89bc:	b93fffcc 	andi	r4,r23,65535
    89c0:	000cefc0 	call	cefc <__mulsi3>
    89c4:	b808d43a 	srli	r4,r23,16
    89c8:	880b883a 	mov	r5,r17
    89cc:	1421883a 	add	r16,r2,r16
    89d0:	000cefc0 	call	cefc <__mulsi3>
    89d4:	800ed43a 	srli	r7,r16,16
    89d8:	80ffffcc 	andi	r3,r16,65535
    89dc:	b5800044 	addi	r22,r22,1
    89e0:	11c5883a 	add	r2,r2,r7
    89e4:	100e943a 	slli	r7,r2,16
    89e8:	1020d43a 	srli	r16,r2,16
    89ec:	38c7883a 	add	r3,r7,r3
    89f0:	a8ffff15 	stw	r3,-4(r21)
    89f4:	b4bfee16 	blt	r22,r18,89b0 <__alt_exception_stack_pointer+0xf80089b0>
    89f8:	80000926 	beq	r16,zero,8a20 <__multadd+0xb4>
    89fc:	98800217 	ldw	r2,8(r19)
    8a00:	9080130e 	bge	r18,r2,8a50 <__multadd+0xe4>
    8a04:	90800144 	addi	r2,r18,5
    8a08:	1085883a 	add	r2,r2,r2
    8a0c:	1085883a 	add	r2,r2,r2
    8a10:	9885883a 	add	r2,r19,r2
    8a14:	14000015 	stw	r16,0(r2)
    8a18:	94800044 	addi	r18,r18,1
    8a1c:	9c800415 	stw	r18,16(r19)
    8a20:	9805883a 	mov	r2,r19
    8a24:	dfc00817 	ldw	ra,32(sp)
    8a28:	ddc00717 	ldw	r23,28(sp)
    8a2c:	dd800617 	ldw	r22,24(sp)
    8a30:	dd400517 	ldw	r21,20(sp)
    8a34:	dd000417 	ldw	r20,16(sp)
    8a38:	dcc00317 	ldw	r19,12(sp)
    8a3c:	dc800217 	ldw	r18,8(sp)
    8a40:	dc400117 	ldw	r17,4(sp)
    8a44:	dc000017 	ldw	r16,0(sp)
    8a48:	dec00904 	addi	sp,sp,36
    8a4c:	f800283a 	ret
    8a50:	99400117 	ldw	r5,4(r19)
    8a54:	a009883a 	mov	r4,r20
    8a58:	29400044 	addi	r5,r5,1
    8a5c:	000889c0 	call	889c <_Balloc>
    8a60:	99800417 	ldw	r6,16(r19)
    8a64:	99400304 	addi	r5,r19,12
    8a68:	11000304 	addi	r4,r2,12
    8a6c:	31800084 	addi	r6,r6,2
    8a70:	318d883a 	add	r6,r6,r6
    8a74:	318d883a 	add	r6,r6,r6
    8a78:	1023883a 	mov	r17,r2
    8a7c:	00084d00 	call	84d0 <memcpy>
    8a80:	98000a26 	beq	r19,zero,8aac <__multadd+0x140>
    8a84:	98c00117 	ldw	r3,4(r19)
    8a88:	a0801317 	ldw	r2,76(r20)
    8a8c:	18c7883a 	add	r3,r3,r3
    8a90:	18c7883a 	add	r3,r3,r3
    8a94:	10c5883a 	add	r2,r2,r3
    8a98:	10c00017 	ldw	r3,0(r2)
    8a9c:	98c00015 	stw	r3,0(r19)
    8aa0:	14c00015 	stw	r19,0(r2)
    8aa4:	8827883a 	mov	r19,r17
    8aa8:	003fd606 	br	8a04 <__alt_exception_stack_pointer+0xf8008a04>
    8aac:	8827883a 	mov	r19,r17
    8ab0:	003fd406 	br	8a04 <__alt_exception_stack_pointer+0xf8008a04>

00008ab4 <__s2b>:
    8ab4:	defff904 	addi	sp,sp,-28
    8ab8:	dc400115 	stw	r17,4(sp)
    8abc:	dc000015 	stw	r16,0(sp)
    8ac0:	2023883a 	mov	r17,r4
    8ac4:	2821883a 	mov	r16,r5
    8ac8:	39000204 	addi	r4,r7,8
    8acc:	01400244 	movi	r5,9
    8ad0:	dcc00315 	stw	r19,12(sp)
    8ad4:	dc800215 	stw	r18,8(sp)
    8ad8:	dfc00615 	stw	ra,24(sp)
    8adc:	dd400515 	stw	r21,20(sp)
    8ae0:	dd000415 	stw	r20,16(sp)
    8ae4:	3825883a 	mov	r18,r7
    8ae8:	3027883a 	mov	r19,r6
    8aec:	000cd480 	call	cd48 <__divsi3>
    8af0:	00c00044 	movi	r3,1
    8af4:	000b883a 	mov	r5,zero
    8af8:	1880030e 	bge	r3,r2,8b08 <__s2b+0x54>
    8afc:	18c7883a 	add	r3,r3,r3
    8b00:	29400044 	addi	r5,r5,1
    8b04:	18bffd16 	blt	r3,r2,8afc <__alt_exception_stack_pointer+0xf8008afc>
    8b08:	8809883a 	mov	r4,r17
    8b0c:	000889c0 	call	889c <_Balloc>
    8b10:	d8c00717 	ldw	r3,28(sp)
    8b14:	10c00515 	stw	r3,20(r2)
    8b18:	00c00044 	movi	r3,1
    8b1c:	10c00415 	stw	r3,16(r2)
    8b20:	00c00244 	movi	r3,9
    8b24:	1cc0210e 	bge	r3,r19,8bac <__s2b+0xf8>
    8b28:	80eb883a 	add	r21,r16,r3
    8b2c:	a829883a 	mov	r20,r21
    8b30:	84e1883a 	add	r16,r16,r19
    8b34:	a1c00007 	ldb	r7,0(r20)
    8b38:	01800284 	movi	r6,10
    8b3c:	a5000044 	addi	r20,r20,1
    8b40:	100b883a 	mov	r5,r2
    8b44:	39fff404 	addi	r7,r7,-48
    8b48:	8809883a 	mov	r4,r17
    8b4c:	000896c0 	call	896c <__multadd>
    8b50:	a43ff81e 	bne	r20,r16,8b34 <__alt_exception_stack_pointer+0xf8008b34>
    8b54:	ace1883a 	add	r16,r21,r19
    8b58:	843ffe04 	addi	r16,r16,-8
    8b5c:	9c800a0e 	bge	r19,r18,8b88 <__s2b+0xd4>
    8b60:	94e5c83a 	sub	r18,r18,r19
    8b64:	84a5883a 	add	r18,r16,r18
    8b68:	81c00007 	ldb	r7,0(r16)
    8b6c:	01800284 	movi	r6,10
    8b70:	84000044 	addi	r16,r16,1
    8b74:	100b883a 	mov	r5,r2
    8b78:	39fff404 	addi	r7,r7,-48
    8b7c:	8809883a 	mov	r4,r17
    8b80:	000896c0 	call	896c <__multadd>
    8b84:	84bff81e 	bne	r16,r18,8b68 <__alt_exception_stack_pointer+0xf8008b68>
    8b88:	dfc00617 	ldw	ra,24(sp)
    8b8c:	dd400517 	ldw	r21,20(sp)
    8b90:	dd000417 	ldw	r20,16(sp)
    8b94:	dcc00317 	ldw	r19,12(sp)
    8b98:	dc800217 	ldw	r18,8(sp)
    8b9c:	dc400117 	ldw	r17,4(sp)
    8ba0:	dc000017 	ldw	r16,0(sp)
    8ba4:	dec00704 	addi	sp,sp,28
    8ba8:	f800283a 	ret
    8bac:	84000284 	addi	r16,r16,10
    8bb0:	1827883a 	mov	r19,r3
    8bb4:	003fe906 	br	8b5c <__alt_exception_stack_pointer+0xf8008b5c>

00008bb8 <__hi0bits>:
    8bb8:	20bfffec 	andhi	r2,r4,65535
    8bbc:	1000141e 	bne	r2,zero,8c10 <__hi0bits+0x58>
    8bc0:	2008943a 	slli	r4,r4,16
    8bc4:	00800404 	movi	r2,16
    8bc8:	20ffc02c 	andhi	r3,r4,65280
    8bcc:	1800021e 	bne	r3,zero,8bd8 <__hi0bits+0x20>
    8bd0:	2008923a 	slli	r4,r4,8
    8bd4:	10800204 	addi	r2,r2,8
    8bd8:	20fc002c 	andhi	r3,r4,61440
    8bdc:	1800021e 	bne	r3,zero,8be8 <__hi0bits+0x30>
    8be0:	2008913a 	slli	r4,r4,4
    8be4:	10800104 	addi	r2,r2,4
    8be8:	20f0002c 	andhi	r3,r4,49152
    8bec:	1800031e 	bne	r3,zero,8bfc <__hi0bits+0x44>
    8bf0:	2109883a 	add	r4,r4,r4
    8bf4:	10800084 	addi	r2,r2,2
    8bf8:	2109883a 	add	r4,r4,r4
    8bfc:	20000316 	blt	r4,zero,8c0c <__hi0bits+0x54>
    8c00:	2110002c 	andhi	r4,r4,16384
    8c04:	2000041e 	bne	r4,zero,8c18 <__hi0bits+0x60>
    8c08:	00800804 	movi	r2,32
    8c0c:	f800283a 	ret
    8c10:	0005883a 	mov	r2,zero
    8c14:	003fec06 	br	8bc8 <__alt_exception_stack_pointer+0xf8008bc8>
    8c18:	10800044 	addi	r2,r2,1
    8c1c:	f800283a 	ret

00008c20 <__lo0bits>:
    8c20:	20c00017 	ldw	r3,0(r4)
    8c24:	188001cc 	andi	r2,r3,7
    8c28:	10000826 	beq	r2,zero,8c4c <__lo0bits+0x2c>
    8c2c:	1880004c 	andi	r2,r3,1
    8c30:	1000211e 	bne	r2,zero,8cb8 <__lo0bits+0x98>
    8c34:	1880008c 	andi	r2,r3,2
    8c38:	1000211e 	bne	r2,zero,8cc0 <__lo0bits+0xa0>
    8c3c:	1806d0ba 	srli	r3,r3,2
    8c40:	00800084 	movi	r2,2
    8c44:	20c00015 	stw	r3,0(r4)
    8c48:	f800283a 	ret
    8c4c:	18bfffcc 	andi	r2,r3,65535
    8c50:	10001326 	beq	r2,zero,8ca0 <__lo0bits+0x80>
    8c54:	0005883a 	mov	r2,zero
    8c58:	19403fcc 	andi	r5,r3,255
    8c5c:	2800021e 	bne	r5,zero,8c68 <__lo0bits+0x48>
    8c60:	1806d23a 	srli	r3,r3,8
    8c64:	10800204 	addi	r2,r2,8
    8c68:	194003cc 	andi	r5,r3,15
    8c6c:	2800021e 	bne	r5,zero,8c78 <__lo0bits+0x58>
    8c70:	1806d13a 	srli	r3,r3,4
    8c74:	10800104 	addi	r2,r2,4
    8c78:	194000cc 	andi	r5,r3,3
    8c7c:	2800021e 	bne	r5,zero,8c88 <__lo0bits+0x68>
    8c80:	1806d0ba 	srli	r3,r3,2
    8c84:	10800084 	addi	r2,r2,2
    8c88:	1940004c 	andi	r5,r3,1
    8c8c:	2800081e 	bne	r5,zero,8cb0 <__lo0bits+0x90>
    8c90:	1806d07a 	srli	r3,r3,1
    8c94:	1800051e 	bne	r3,zero,8cac <__lo0bits+0x8c>
    8c98:	00800804 	movi	r2,32
    8c9c:	f800283a 	ret
    8ca0:	1806d43a 	srli	r3,r3,16
    8ca4:	00800404 	movi	r2,16
    8ca8:	003feb06 	br	8c58 <__alt_exception_stack_pointer+0xf8008c58>
    8cac:	10800044 	addi	r2,r2,1
    8cb0:	20c00015 	stw	r3,0(r4)
    8cb4:	f800283a 	ret
    8cb8:	0005883a 	mov	r2,zero
    8cbc:	f800283a 	ret
    8cc0:	1806d07a 	srli	r3,r3,1
    8cc4:	00800044 	movi	r2,1
    8cc8:	20c00015 	stw	r3,0(r4)
    8ccc:	f800283a 	ret

00008cd0 <__i2b>:
    8cd0:	defffd04 	addi	sp,sp,-12
    8cd4:	dc000015 	stw	r16,0(sp)
    8cd8:	04000044 	movi	r16,1
    8cdc:	dc400115 	stw	r17,4(sp)
    8ce0:	2823883a 	mov	r17,r5
    8ce4:	800b883a 	mov	r5,r16
    8ce8:	dfc00215 	stw	ra,8(sp)
    8cec:	000889c0 	call	889c <_Balloc>
    8cf0:	14400515 	stw	r17,20(r2)
    8cf4:	14000415 	stw	r16,16(r2)
    8cf8:	dfc00217 	ldw	ra,8(sp)
    8cfc:	dc400117 	ldw	r17,4(sp)
    8d00:	dc000017 	ldw	r16,0(sp)
    8d04:	dec00304 	addi	sp,sp,12
    8d08:	f800283a 	ret

00008d0c <__multiply>:
    8d0c:	deffef04 	addi	sp,sp,-68
    8d10:	dc400815 	stw	r17,32(sp)
    8d14:	dc000715 	stw	r16,28(sp)
    8d18:	34400417 	ldw	r17,16(r6)
    8d1c:	2c000417 	ldw	r16,16(r5)
    8d20:	dd800d15 	stw	r22,52(sp)
    8d24:	dc800915 	stw	r18,36(sp)
    8d28:	dfc01015 	stw	ra,64(sp)
    8d2c:	df000f15 	stw	fp,60(sp)
    8d30:	ddc00e15 	stw	r23,56(sp)
    8d34:	dd400c15 	stw	r21,48(sp)
    8d38:	dd000b15 	stw	r20,44(sp)
    8d3c:	dcc00a15 	stw	r19,40(sp)
    8d40:	2825883a 	mov	r18,r5
    8d44:	302d883a 	mov	r22,r6
    8d48:	8440050e 	bge	r16,r17,8d60 <__multiply+0x54>
    8d4c:	8007883a 	mov	r3,r16
    8d50:	3025883a 	mov	r18,r6
    8d54:	8821883a 	mov	r16,r17
    8d58:	282d883a 	mov	r22,r5
    8d5c:	1823883a 	mov	r17,r3
    8d60:	90800217 	ldw	r2,8(r18)
    8d64:	8447883a 	add	r3,r16,r17
    8d68:	d8c00215 	stw	r3,8(sp)
    8d6c:	91400117 	ldw	r5,4(r18)
    8d70:	10c0010e 	bge	r2,r3,8d78 <__multiply+0x6c>
    8d74:	29400044 	addi	r5,r5,1
    8d78:	000889c0 	call	889c <_Balloc>
    8d7c:	d8c00217 	ldw	r3,8(sp)
    8d80:	d8800615 	stw	r2,24(sp)
    8d84:	18eb883a 	add	r21,r3,r3
    8d88:	ad6b883a 	add	r21,r21,r21
    8d8c:	10c00504 	addi	r3,r2,20
    8d90:	1d6b883a 	add	r21,r3,r21
    8d94:	d8c00115 	stw	r3,4(sp)
    8d98:	dd400315 	stw	r21,12(sp)
    8d9c:	1805883a 	mov	r2,r3
    8da0:	1d40042e 	bgeu	r3,r21,8db4 <__multiply+0xa8>
    8da4:	d8c00317 	ldw	r3,12(sp)
    8da8:	10000015 	stw	zero,0(r2)
    8dac:	10800104 	addi	r2,r2,4
    8db0:	10fffc36 	bltu	r2,r3,8da4 <__alt_exception_stack_pointer+0xf8008da4>
    8db4:	8c63883a 	add	r17,r17,r17
    8db8:	b5800504 	addi	r22,r22,20
    8dbc:	8c63883a 	add	r17,r17,r17
    8dc0:	94800504 	addi	r18,r18,20
    8dc4:	8421883a 	add	r16,r16,r16
    8dc8:	b463883a 	add	r17,r22,r17
    8dcc:	8421883a 	add	r16,r16,r16
    8dd0:	dd800015 	stw	r22,0(sp)
    8dd4:	dc800415 	stw	r18,16(sp)
    8dd8:	dc400515 	stw	r17,20(sp)
    8ddc:	9429883a 	add	r20,r18,r16
    8de0:	b4404f2e 	bgeu	r22,r17,8f20 <__multiply+0x214>
    8de4:	d8c00017 	ldw	r3,0(sp)
    8de8:	1c800017 	ldw	r18,0(r3)
    8dec:	947fffcc 	andi	r17,r18,65535
    8df0:	88001e26 	beq	r17,zero,8e6c <__multiply+0x160>
    8df4:	dd800117 	ldw	r22,4(sp)
    8df8:	dd400417 	ldw	r21,16(sp)
    8dfc:	0027883a 	mov	r19,zero
    8e00:	ac800017 	ldw	r18,0(r21)
    8e04:	b4000017 	ldw	r16,0(r22)
    8e08:	880b883a 	mov	r5,r17
    8e0c:	913fffcc 	andi	r4,r18,65535
    8e10:	000cefc0 	call	cefc <__mulsi3>
    8e14:	9008d43a 	srli	r4,r18,16
    8e18:	84bfffcc 	andi	r18,r16,65535
    8e1c:	1485883a 	add	r2,r2,r18
    8e20:	14e5883a 	add	r18,r2,r19
    8e24:	8020d43a 	srli	r16,r16,16
    8e28:	9026d43a 	srli	r19,r18,16
    8e2c:	880b883a 	mov	r5,r17
    8e30:	000cefc0 	call	cefc <__mulsi3>
    8e34:	1405883a 	add	r2,r2,r16
    8e38:	14e1883a 	add	r16,r2,r19
    8e3c:	90ffffcc 	andi	r3,r18,65535
    8e40:	8024943a 	slli	r18,r16,16
    8e44:	ad400104 	addi	r21,r21,4
    8e48:	b005883a 	mov	r2,r22
    8e4c:	90c6b03a 	or	r3,r18,r3
    8e50:	b0c00015 	stw	r3,0(r22)
    8e54:	8026d43a 	srli	r19,r16,16
    8e58:	b5800104 	addi	r22,r22,4
    8e5c:	ad3fe836 	bltu	r21,r20,8e00 <__alt_exception_stack_pointer+0xf8008e00>
    8e60:	d8c00017 	ldw	r3,0(sp)
    8e64:	14c00115 	stw	r19,4(r2)
    8e68:	1c800017 	ldw	r18,0(r3)
    8e6c:	9024d43a 	srli	r18,r18,16
    8e70:	90002226 	beq	r18,zero,8efc <__multiply+0x1f0>
    8e74:	d8c00117 	ldw	r3,4(sp)
    8e78:	dd800417 	ldw	r22,16(sp)
    8e7c:	002f883a 	mov	r23,zero
    8e80:	1f000017 	ldw	fp,0(r3)
    8e84:	1823883a 	mov	r17,r3
    8e88:	182b883a 	mov	r21,r3
    8e8c:	e021883a 	mov	r16,fp
    8e90:	00000106 	br	8e98 <__multiply+0x18c>
    8e94:	982b883a 	mov	r21,r19
    8e98:	b100000b 	ldhu	r4,0(r22)
    8e9c:	8020d43a 	srli	r16,r16,16
    8ea0:	900b883a 	mov	r5,r18
    8ea4:	000cefc0 	call	cefc <__mulsi3>
    8ea8:	1405883a 	add	r2,r2,r16
    8eac:	15ef883a 	add	r23,r2,r23
    8eb0:	b804943a 	slli	r2,r23,16
    8eb4:	e0ffffcc 	andi	r3,fp,65535
    8eb8:	8c400104 	addi	r17,r17,4
    8ebc:	10c6b03a 	or	r3,r2,r3
    8ec0:	88ffff15 	stw	r3,-4(r17)
    8ec4:	b5800104 	addi	r22,r22,4
    8ec8:	b13fff17 	ldw	r4,-4(r22)
    8ecc:	acc00104 	addi	r19,r21,4
    8ed0:	900b883a 	mov	r5,r18
    8ed4:	2008d43a 	srli	r4,r4,16
    8ed8:	9c000017 	ldw	r16,0(r19)
    8edc:	000cefc0 	call	cefc <__mulsi3>
    8ee0:	b806d43a 	srli	r3,r23,16
    8ee4:	813fffcc 	andi	r4,r16,65535
    8ee8:	1105883a 	add	r2,r2,r4
    8eec:	10f9883a 	add	fp,r2,r3
    8ef0:	e02ed43a 	srli	r23,fp,16
    8ef4:	b53fe736 	bltu	r22,r20,8e94 <__alt_exception_stack_pointer+0xf8008e94>
    8ef8:	af000115 	stw	fp,4(r21)
    8efc:	d8c00017 	ldw	r3,0(sp)
    8f00:	d9000517 	ldw	r4,20(sp)
    8f04:	18c00104 	addi	r3,r3,4
    8f08:	d8c00015 	stw	r3,0(sp)
    8f0c:	d8c00117 	ldw	r3,4(sp)
    8f10:	18c00104 	addi	r3,r3,4
    8f14:	d8c00115 	stw	r3,4(sp)
    8f18:	d8c00017 	ldw	r3,0(sp)
    8f1c:	193fb136 	bltu	r3,r4,8de4 <__alt_exception_stack_pointer+0xf8008de4>
    8f20:	d8c00217 	ldw	r3,8(sp)
    8f24:	00c00c0e 	bge	zero,r3,8f58 <__multiply+0x24c>
    8f28:	d8c00317 	ldw	r3,12(sp)
    8f2c:	18bfff17 	ldw	r2,-4(r3)
    8f30:	1d7fff04 	addi	r21,r3,-4
    8f34:	10000326 	beq	r2,zero,8f44 <__multiply+0x238>
    8f38:	00000706 	br	8f58 <__multiply+0x24c>
    8f3c:	a8800017 	ldw	r2,0(r21)
    8f40:	1000051e 	bne	r2,zero,8f58 <__multiply+0x24c>
    8f44:	d8c00217 	ldw	r3,8(sp)
    8f48:	ad7fff04 	addi	r21,r21,-4
    8f4c:	18ffffc4 	addi	r3,r3,-1
    8f50:	d8c00215 	stw	r3,8(sp)
    8f54:	183ff91e 	bne	r3,zero,8f3c <__alt_exception_stack_pointer+0xf8008f3c>
    8f58:	d8c00617 	ldw	r3,24(sp)
    8f5c:	d9000217 	ldw	r4,8(sp)
    8f60:	1805883a 	mov	r2,r3
    8f64:	19000415 	stw	r4,16(r3)
    8f68:	dfc01017 	ldw	ra,64(sp)
    8f6c:	df000f17 	ldw	fp,60(sp)
    8f70:	ddc00e17 	ldw	r23,56(sp)
    8f74:	dd800d17 	ldw	r22,52(sp)
    8f78:	dd400c17 	ldw	r21,48(sp)
    8f7c:	dd000b17 	ldw	r20,44(sp)
    8f80:	dcc00a17 	ldw	r19,40(sp)
    8f84:	dc800917 	ldw	r18,36(sp)
    8f88:	dc400817 	ldw	r17,32(sp)
    8f8c:	dc000717 	ldw	r16,28(sp)
    8f90:	dec01104 	addi	sp,sp,68
    8f94:	f800283a 	ret

00008f98 <__pow5mult>:
    8f98:	defffa04 	addi	sp,sp,-24
    8f9c:	dcc00315 	stw	r19,12(sp)
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	dfc00515 	stw	ra,20(sp)
    8fa8:	dd000415 	stw	r20,16(sp)
    8fac:	dc800215 	stw	r18,8(sp)
    8fb0:	dc400115 	stw	r17,4(sp)
    8fb4:	308000cc 	andi	r2,r6,3
    8fb8:	3021883a 	mov	r16,r6
    8fbc:	2027883a 	mov	r19,r4
    8fc0:	10002f1e 	bne	r2,zero,9080 <__pow5mult+0xe8>
    8fc4:	2825883a 	mov	r18,r5
    8fc8:	8021d0ba 	srai	r16,r16,2
    8fcc:	80001a26 	beq	r16,zero,9038 <__pow5mult+0xa0>
    8fd0:	9c401217 	ldw	r17,72(r19)
    8fd4:	8800061e 	bne	r17,zero,8ff0 <__pow5mult+0x58>
    8fd8:	00003406 	br	90ac <__pow5mult+0x114>
    8fdc:	8021d07a 	srai	r16,r16,1
    8fe0:	80001526 	beq	r16,zero,9038 <__pow5mult+0xa0>
    8fe4:	88800017 	ldw	r2,0(r17)
    8fe8:	10001c26 	beq	r2,zero,905c <__pow5mult+0xc4>
    8fec:	1023883a 	mov	r17,r2
    8ff0:	8080004c 	andi	r2,r16,1
    8ff4:	103ff926 	beq	r2,zero,8fdc <__alt_exception_stack_pointer+0xf8008fdc>
    8ff8:	880d883a 	mov	r6,r17
    8ffc:	900b883a 	mov	r5,r18
    9000:	9809883a 	mov	r4,r19
    9004:	0008d0c0 	call	8d0c <__multiply>
    9008:	90001b26 	beq	r18,zero,9078 <__pow5mult+0xe0>
    900c:	91000117 	ldw	r4,4(r18)
    9010:	98c01317 	ldw	r3,76(r19)
    9014:	8021d07a 	srai	r16,r16,1
    9018:	2109883a 	add	r4,r4,r4
    901c:	2109883a 	add	r4,r4,r4
    9020:	1907883a 	add	r3,r3,r4
    9024:	19000017 	ldw	r4,0(r3)
    9028:	91000015 	stw	r4,0(r18)
    902c:	1c800015 	stw	r18,0(r3)
    9030:	1025883a 	mov	r18,r2
    9034:	803feb1e 	bne	r16,zero,8fe4 <__alt_exception_stack_pointer+0xf8008fe4>
    9038:	9005883a 	mov	r2,r18
    903c:	dfc00517 	ldw	ra,20(sp)
    9040:	dd000417 	ldw	r20,16(sp)
    9044:	dcc00317 	ldw	r19,12(sp)
    9048:	dc800217 	ldw	r18,8(sp)
    904c:	dc400117 	ldw	r17,4(sp)
    9050:	dc000017 	ldw	r16,0(sp)
    9054:	dec00604 	addi	sp,sp,24
    9058:	f800283a 	ret
    905c:	880d883a 	mov	r6,r17
    9060:	880b883a 	mov	r5,r17
    9064:	9809883a 	mov	r4,r19
    9068:	0008d0c0 	call	8d0c <__multiply>
    906c:	88800015 	stw	r2,0(r17)
    9070:	10000015 	stw	zero,0(r2)
    9074:	003fdd06 	br	8fec <__alt_exception_stack_pointer+0xf8008fec>
    9078:	1025883a 	mov	r18,r2
    907c:	003fd706 	br	8fdc <__alt_exception_stack_pointer+0xf8008fdc>
    9080:	10bfffc4 	addi	r2,r2,-1
    9084:	1085883a 	add	r2,r2,r2
    9088:	00c00074 	movhi	r3,1
    908c:	18ca9604 	addi	r3,r3,10840
    9090:	1085883a 	add	r2,r2,r2
    9094:	1885883a 	add	r2,r3,r2
    9098:	11800017 	ldw	r6,0(r2)
    909c:	000f883a 	mov	r7,zero
    90a0:	000896c0 	call	896c <__multadd>
    90a4:	1025883a 	mov	r18,r2
    90a8:	003fc706 	br	8fc8 <__alt_exception_stack_pointer+0xf8008fc8>
    90ac:	05000044 	movi	r20,1
    90b0:	a00b883a 	mov	r5,r20
    90b4:	9809883a 	mov	r4,r19
    90b8:	000889c0 	call	889c <_Balloc>
    90bc:	1023883a 	mov	r17,r2
    90c0:	00809c44 	movi	r2,625
    90c4:	88800515 	stw	r2,20(r17)
    90c8:	8d000415 	stw	r20,16(r17)
    90cc:	9c401215 	stw	r17,72(r19)
    90d0:	88000015 	stw	zero,0(r17)
    90d4:	003fc606 	br	8ff0 <__alt_exception_stack_pointer+0xf8008ff0>

000090d8 <__lshift>:
    90d8:	defff904 	addi	sp,sp,-28
    90dc:	dd400515 	stw	r21,20(sp)
    90e0:	dcc00315 	stw	r19,12(sp)
    90e4:	302bd17a 	srai	r21,r6,5
    90e8:	2cc00417 	ldw	r19,16(r5)
    90ec:	28800217 	ldw	r2,8(r5)
    90f0:	dd000415 	stw	r20,16(sp)
    90f4:	ace7883a 	add	r19,r21,r19
    90f8:	dc800215 	stw	r18,8(sp)
    90fc:	dc400115 	stw	r17,4(sp)
    9100:	dc000015 	stw	r16,0(sp)
    9104:	dfc00615 	stw	ra,24(sp)
    9108:	9c000044 	addi	r16,r19,1
    910c:	2823883a 	mov	r17,r5
    9110:	3029883a 	mov	r20,r6
    9114:	2025883a 	mov	r18,r4
    9118:	29400117 	ldw	r5,4(r5)
    911c:	1400030e 	bge	r2,r16,912c <__lshift+0x54>
    9120:	1085883a 	add	r2,r2,r2
    9124:	29400044 	addi	r5,r5,1
    9128:	143ffd16 	blt	r2,r16,9120 <__alt_exception_stack_pointer+0xf8009120>
    912c:	9009883a 	mov	r4,r18
    9130:	000889c0 	call	889c <_Balloc>
    9134:	10c00504 	addi	r3,r2,20
    9138:	0540070e 	bge	zero,r21,9158 <__lshift+0x80>
    913c:	ad6b883a 	add	r21,r21,r21
    9140:	ad6b883a 	add	r21,r21,r21
    9144:	1809883a 	mov	r4,r3
    9148:	1d47883a 	add	r3,r3,r21
    914c:	20000015 	stw	zero,0(r4)
    9150:	21000104 	addi	r4,r4,4
    9154:	193ffd1e 	bne	r3,r4,914c <__alt_exception_stack_pointer+0xf800914c>
    9158:	8a000417 	ldw	r8,16(r17)
    915c:	89000504 	addi	r4,r17,20
    9160:	a18007cc 	andi	r6,r20,31
    9164:	4211883a 	add	r8,r8,r8
    9168:	4211883a 	add	r8,r8,r8
    916c:	2211883a 	add	r8,r4,r8
    9170:	30002326 	beq	r6,zero,9200 <__lshift+0x128>
    9174:	02400804 	movi	r9,32
    9178:	4993c83a 	sub	r9,r9,r6
    917c:	000b883a 	mov	r5,zero
    9180:	21c00017 	ldw	r7,0(r4)
    9184:	1815883a 	mov	r10,r3
    9188:	18c00104 	addi	r3,r3,4
    918c:	398e983a 	sll	r7,r7,r6
    9190:	21000104 	addi	r4,r4,4
    9194:	394ab03a 	or	r5,r7,r5
    9198:	197fff15 	stw	r5,-4(r3)
    919c:	217fff17 	ldw	r5,-4(r4)
    91a0:	2a4ad83a 	srl	r5,r5,r9
    91a4:	223ff636 	bltu	r4,r8,9180 <__alt_exception_stack_pointer+0xf8009180>
    91a8:	51400115 	stw	r5,4(r10)
    91ac:	28001a1e 	bne	r5,zero,9218 <__lshift+0x140>
    91b0:	843fffc4 	addi	r16,r16,-1
    91b4:	14000415 	stw	r16,16(r2)
    91b8:	88000826 	beq	r17,zero,91dc <__lshift+0x104>
    91bc:	89000117 	ldw	r4,4(r17)
    91c0:	90c01317 	ldw	r3,76(r18)
    91c4:	2109883a 	add	r4,r4,r4
    91c8:	2109883a 	add	r4,r4,r4
    91cc:	1907883a 	add	r3,r3,r4
    91d0:	19000017 	ldw	r4,0(r3)
    91d4:	89000015 	stw	r4,0(r17)
    91d8:	1c400015 	stw	r17,0(r3)
    91dc:	dfc00617 	ldw	ra,24(sp)
    91e0:	dd400517 	ldw	r21,20(sp)
    91e4:	dd000417 	ldw	r20,16(sp)
    91e8:	dcc00317 	ldw	r19,12(sp)
    91ec:	dc800217 	ldw	r18,8(sp)
    91f0:	dc400117 	ldw	r17,4(sp)
    91f4:	dc000017 	ldw	r16,0(sp)
    91f8:	dec00704 	addi	sp,sp,28
    91fc:	f800283a 	ret
    9200:	21400017 	ldw	r5,0(r4)
    9204:	18c00104 	addi	r3,r3,4
    9208:	21000104 	addi	r4,r4,4
    920c:	197fff15 	stw	r5,-4(r3)
    9210:	223ffb36 	bltu	r4,r8,9200 <__alt_exception_stack_pointer+0xf8009200>
    9214:	003fe606 	br	91b0 <__alt_exception_stack_pointer+0xf80091b0>
    9218:	9c000084 	addi	r16,r19,2
    921c:	003fe406 	br	91b0 <__alt_exception_stack_pointer+0xf80091b0>

00009220 <__mcmp>:
    9220:	20800417 	ldw	r2,16(r4)
    9224:	28c00417 	ldw	r3,16(r5)
    9228:	10c5c83a 	sub	r2,r2,r3
    922c:	1000111e 	bne	r2,zero,9274 <__mcmp+0x54>
    9230:	18c7883a 	add	r3,r3,r3
    9234:	18c7883a 	add	r3,r3,r3
    9238:	21000504 	addi	r4,r4,20
    923c:	29400504 	addi	r5,r5,20
    9240:	20c5883a 	add	r2,r4,r3
    9244:	28cb883a 	add	r5,r5,r3
    9248:	00000106 	br	9250 <__mcmp+0x30>
    924c:	20800a2e 	bgeu	r4,r2,9278 <__mcmp+0x58>
    9250:	10bfff04 	addi	r2,r2,-4
    9254:	297fff04 	addi	r5,r5,-4
    9258:	11800017 	ldw	r6,0(r2)
    925c:	28c00017 	ldw	r3,0(r5)
    9260:	30fffa26 	beq	r6,r3,924c <__alt_exception_stack_pointer+0xf800924c>
    9264:	30c00236 	bltu	r6,r3,9270 <__mcmp+0x50>
    9268:	00800044 	movi	r2,1
    926c:	f800283a 	ret
    9270:	00bfffc4 	movi	r2,-1
    9274:	f800283a 	ret
    9278:	0005883a 	mov	r2,zero
    927c:	f800283a 	ret

00009280 <__mdiff>:
    9280:	28c00417 	ldw	r3,16(r5)
    9284:	30800417 	ldw	r2,16(r6)
    9288:	defffa04 	addi	sp,sp,-24
    928c:	dcc00315 	stw	r19,12(sp)
    9290:	dc800215 	stw	r18,8(sp)
    9294:	dfc00515 	stw	ra,20(sp)
    9298:	dd000415 	stw	r20,16(sp)
    929c:	dc400115 	stw	r17,4(sp)
    92a0:	dc000015 	stw	r16,0(sp)
    92a4:	1887c83a 	sub	r3,r3,r2
    92a8:	2825883a 	mov	r18,r5
    92ac:	3027883a 	mov	r19,r6
    92b0:	1800141e 	bne	r3,zero,9304 <__mdiff+0x84>
    92b4:	1085883a 	add	r2,r2,r2
    92b8:	1085883a 	add	r2,r2,r2
    92bc:	2a000504 	addi	r8,r5,20
    92c0:	34000504 	addi	r16,r6,20
    92c4:	4087883a 	add	r3,r8,r2
    92c8:	8085883a 	add	r2,r16,r2
    92cc:	00000106 	br	92d4 <__mdiff+0x54>
    92d0:	40c0592e 	bgeu	r8,r3,9438 <__mdiff+0x1b8>
    92d4:	18ffff04 	addi	r3,r3,-4
    92d8:	10bfff04 	addi	r2,r2,-4
    92dc:	19c00017 	ldw	r7,0(r3)
    92e0:	11400017 	ldw	r5,0(r2)
    92e4:	397ffa26 	beq	r7,r5,92d0 <__alt_exception_stack_pointer+0xf80092d0>
    92e8:	3940592e 	bgeu	r7,r5,9450 <__mdiff+0x1d0>
    92ec:	9005883a 	mov	r2,r18
    92f0:	4023883a 	mov	r17,r8
    92f4:	9825883a 	mov	r18,r19
    92f8:	05000044 	movi	r20,1
    92fc:	1027883a 	mov	r19,r2
    9300:	00000406 	br	9314 <__mdiff+0x94>
    9304:	18005616 	blt	r3,zero,9460 <__mdiff+0x1e0>
    9308:	34400504 	addi	r17,r6,20
    930c:	2c000504 	addi	r16,r5,20
    9310:	0029883a 	mov	r20,zero
    9314:	91400117 	ldw	r5,4(r18)
    9318:	000889c0 	call	889c <_Balloc>
    931c:	92400417 	ldw	r9,16(r18)
    9320:	9b000417 	ldw	r12,16(r19)
    9324:	12c00504 	addi	r11,r2,20
    9328:	4a51883a 	add	r8,r9,r9
    932c:	6319883a 	add	r12,r12,r12
    9330:	4211883a 	add	r8,r8,r8
    9334:	6319883a 	add	r12,r12,r12
    9338:	15000315 	stw	r20,12(r2)
    933c:	8211883a 	add	r8,r16,r8
    9340:	8b19883a 	add	r12,r17,r12
    9344:	0007883a 	mov	r3,zero
    9348:	81400017 	ldw	r5,0(r16)
    934c:	89c00017 	ldw	r7,0(r17)
    9350:	59800104 	addi	r6,r11,4
    9354:	293fffcc 	andi	r4,r5,65535
    9358:	20c7883a 	add	r3,r4,r3
    935c:	393fffcc 	andi	r4,r7,65535
    9360:	1909c83a 	sub	r4,r3,r4
    9364:	280ad43a 	srli	r5,r5,16
    9368:	380ed43a 	srli	r7,r7,16
    936c:	2007d43a 	srai	r3,r4,16
    9370:	213fffcc 	andi	r4,r4,65535
    9374:	29cbc83a 	sub	r5,r5,r7
    9378:	28c7883a 	add	r3,r5,r3
    937c:	180a943a 	slli	r5,r3,16
    9380:	8c400104 	addi	r17,r17,4
    9384:	84000104 	addi	r16,r16,4
    9388:	2908b03a 	or	r4,r5,r4
    938c:	59000015 	stw	r4,0(r11)
    9390:	1807d43a 	srai	r3,r3,16
    9394:	3015883a 	mov	r10,r6
    9398:	3017883a 	mov	r11,r6
    939c:	8b3fea36 	bltu	r17,r12,9348 <__alt_exception_stack_pointer+0xf8009348>
    93a0:	8200162e 	bgeu	r16,r8,93fc <__mdiff+0x17c>
    93a4:	8017883a 	mov	r11,r16
    93a8:	59400017 	ldw	r5,0(r11)
    93ac:	31800104 	addi	r6,r6,4
    93b0:	5ac00104 	addi	r11,r11,4
    93b4:	293fffcc 	andi	r4,r5,65535
    93b8:	20c7883a 	add	r3,r4,r3
    93bc:	280ed43a 	srli	r7,r5,16
    93c0:	180bd43a 	srai	r5,r3,16
    93c4:	193fffcc 	andi	r4,r3,65535
    93c8:	3947883a 	add	r3,r7,r5
    93cc:	180a943a 	slli	r5,r3,16
    93d0:	1807d43a 	srai	r3,r3,16
    93d4:	2908b03a 	or	r4,r5,r4
    93d8:	313fff15 	stw	r4,-4(r6)
    93dc:	5a3ff236 	bltu	r11,r8,93a8 <__alt_exception_stack_pointer+0xf80093a8>
    93e0:	0406303a 	nor	r3,zero,r16
    93e4:	1a07883a 	add	r3,r3,r8
    93e8:	1806d0ba 	srli	r3,r3,2
    93ec:	18c00044 	addi	r3,r3,1
    93f0:	18c7883a 	add	r3,r3,r3
    93f4:	18c7883a 	add	r3,r3,r3
    93f8:	50d5883a 	add	r10,r10,r3
    93fc:	50ffff04 	addi	r3,r10,-4
    9400:	2000041e 	bne	r4,zero,9414 <__mdiff+0x194>
    9404:	18ffff04 	addi	r3,r3,-4
    9408:	19000017 	ldw	r4,0(r3)
    940c:	4a7fffc4 	addi	r9,r9,-1
    9410:	203ffc26 	beq	r4,zero,9404 <__alt_exception_stack_pointer+0xf8009404>
    9414:	12400415 	stw	r9,16(r2)
    9418:	dfc00517 	ldw	ra,20(sp)
    941c:	dd000417 	ldw	r20,16(sp)
    9420:	dcc00317 	ldw	r19,12(sp)
    9424:	dc800217 	ldw	r18,8(sp)
    9428:	dc400117 	ldw	r17,4(sp)
    942c:	dc000017 	ldw	r16,0(sp)
    9430:	dec00604 	addi	sp,sp,24
    9434:	f800283a 	ret
    9438:	000b883a 	mov	r5,zero
    943c:	000889c0 	call	889c <_Balloc>
    9440:	00c00044 	movi	r3,1
    9444:	10c00415 	stw	r3,16(r2)
    9448:	10000515 	stw	zero,20(r2)
    944c:	003ff206 	br	9418 <__alt_exception_stack_pointer+0xf8009418>
    9450:	8023883a 	mov	r17,r16
    9454:	0029883a 	mov	r20,zero
    9458:	4021883a 	mov	r16,r8
    945c:	003fad06 	br	9314 <__alt_exception_stack_pointer+0xf8009314>
    9460:	9005883a 	mov	r2,r18
    9464:	94400504 	addi	r17,r18,20
    9468:	9c000504 	addi	r16,r19,20
    946c:	9825883a 	mov	r18,r19
    9470:	05000044 	movi	r20,1
    9474:	1027883a 	mov	r19,r2
    9478:	003fa606 	br	9314 <__alt_exception_stack_pointer+0xf8009314>

0000947c <__ulp>:
    947c:	295ffc2c 	andhi	r5,r5,32752
    9480:	00bf3034 	movhi	r2,64704
    9484:	2887883a 	add	r3,r5,r2
    9488:	00c0020e 	bge	zero,r3,9494 <__ulp+0x18>
    948c:	0005883a 	mov	r2,zero
    9490:	f800283a 	ret
    9494:	00c7c83a 	sub	r3,zero,r3
    9498:	1807d53a 	srai	r3,r3,20
    949c:	008004c4 	movi	r2,19
    94a0:	10c00b0e 	bge	r2,r3,94d0 <__ulp+0x54>
    94a4:	18bffb04 	addi	r2,r3,-20
    94a8:	01000784 	movi	r4,30
    94ac:	0007883a 	mov	r3,zero
    94b0:	20800516 	blt	r4,r2,94c8 <__ulp+0x4c>
    94b4:	010007c4 	movi	r4,31
    94b8:	2089c83a 	sub	r4,r4,r2
    94bc:	00800044 	movi	r2,1
    94c0:	1104983a 	sll	r2,r2,r4
    94c4:	f800283a 	ret
    94c8:	00800044 	movi	r2,1
    94cc:	f800283a 	ret
    94d0:	01400234 	movhi	r5,8
    94d4:	28c7d83a 	sra	r3,r5,r3
    94d8:	0005883a 	mov	r2,zero
    94dc:	f800283a 	ret

000094e0 <__b2d>:
    94e0:	defffa04 	addi	sp,sp,-24
    94e4:	dc000015 	stw	r16,0(sp)
    94e8:	24000417 	ldw	r16,16(r4)
    94ec:	dc400115 	stw	r17,4(sp)
    94f0:	24400504 	addi	r17,r4,20
    94f4:	8421883a 	add	r16,r16,r16
    94f8:	8421883a 	add	r16,r16,r16
    94fc:	8c21883a 	add	r16,r17,r16
    9500:	dc800215 	stw	r18,8(sp)
    9504:	84bfff17 	ldw	r18,-4(r16)
    9508:	dd000415 	stw	r20,16(sp)
    950c:	dcc00315 	stw	r19,12(sp)
    9510:	9009883a 	mov	r4,r18
    9514:	2829883a 	mov	r20,r5
    9518:	dfc00515 	stw	ra,20(sp)
    951c:	0008bb80 	call	8bb8 <__hi0bits>
    9520:	00c00804 	movi	r3,32
    9524:	1889c83a 	sub	r4,r3,r2
    9528:	a1000015 	stw	r4,0(r20)
    952c:	01000284 	movi	r4,10
    9530:	84ffff04 	addi	r19,r16,-4
    9534:	20801216 	blt	r4,r2,9580 <__b2d+0xa0>
    9538:	018002c4 	movi	r6,11
    953c:	308dc83a 	sub	r6,r6,r2
    9540:	9186d83a 	srl	r3,r18,r6
    9544:	18cffc34 	orhi	r3,r3,16368
    9548:	8cc0212e 	bgeu	r17,r19,95d0 <__b2d+0xf0>
    954c:	813ffe17 	ldw	r4,-8(r16)
    9550:	218cd83a 	srl	r6,r4,r6
    9554:	10800544 	addi	r2,r2,21
    9558:	9084983a 	sll	r2,r18,r2
    955c:	1184b03a 	or	r2,r2,r6
    9560:	dfc00517 	ldw	ra,20(sp)
    9564:	dd000417 	ldw	r20,16(sp)
    9568:	dcc00317 	ldw	r19,12(sp)
    956c:	dc800217 	ldw	r18,8(sp)
    9570:	dc400117 	ldw	r17,4(sp)
    9574:	dc000017 	ldw	r16,0(sp)
    9578:	dec00604 	addi	sp,sp,24
    957c:	f800283a 	ret
    9580:	8cc00f2e 	bgeu	r17,r19,95c0 <__b2d+0xe0>
    9584:	117ffd44 	addi	r5,r2,-11
    9588:	80bffe17 	ldw	r2,-8(r16)
    958c:	28000e26 	beq	r5,zero,95c8 <__b2d+0xe8>
    9590:	1949c83a 	sub	r4,r3,r5
    9594:	9164983a 	sll	r18,r18,r5
    9598:	1106d83a 	srl	r3,r2,r4
    959c:	81bffe04 	addi	r6,r16,-8
    95a0:	948ffc34 	orhi	r18,r18,16368
    95a4:	90c6b03a 	or	r3,r18,r3
    95a8:	89800e2e 	bgeu	r17,r6,95e4 <__b2d+0x104>
    95ac:	81bffd17 	ldw	r6,-12(r16)
    95b0:	1144983a 	sll	r2,r2,r5
    95b4:	310ad83a 	srl	r5,r6,r4
    95b8:	2884b03a 	or	r2,r5,r2
    95bc:	003fe806 	br	9560 <__alt_exception_stack_pointer+0xf8009560>
    95c0:	10bffd44 	addi	r2,r2,-11
    95c4:	1000041e 	bne	r2,zero,95d8 <__b2d+0xf8>
    95c8:	90cffc34 	orhi	r3,r18,16368
    95cc:	003fe406 	br	9560 <__alt_exception_stack_pointer+0xf8009560>
    95d0:	000d883a 	mov	r6,zero
    95d4:	003fdf06 	br	9554 <__alt_exception_stack_pointer+0xf8009554>
    95d8:	90a4983a 	sll	r18,r18,r2
    95dc:	0005883a 	mov	r2,zero
    95e0:	003ff906 	br	95c8 <__alt_exception_stack_pointer+0xf80095c8>
    95e4:	1144983a 	sll	r2,r2,r5
    95e8:	003fdd06 	br	9560 <__alt_exception_stack_pointer+0xf8009560>

000095ec <__d2b>:
    95ec:	defff804 	addi	sp,sp,-32
    95f0:	dc000215 	stw	r16,8(sp)
    95f4:	3021883a 	mov	r16,r6
    95f8:	dc400315 	stw	r17,12(sp)
    95fc:	8022907a 	slli	r17,r16,1
    9600:	dd000615 	stw	r20,24(sp)
    9604:	2829883a 	mov	r20,r5
    9608:	01400044 	movi	r5,1
    960c:	dcc00515 	stw	r19,20(sp)
    9610:	dc800415 	stw	r18,16(sp)
    9614:	dfc00715 	stw	ra,28(sp)
    9618:	3825883a 	mov	r18,r7
    961c:	8822d57a 	srli	r17,r17,21
    9620:	000889c0 	call	889c <_Balloc>
    9624:	1027883a 	mov	r19,r2
    9628:	00800434 	movhi	r2,16
    962c:	10bfffc4 	addi	r2,r2,-1
    9630:	808c703a 	and	r6,r16,r2
    9634:	88000126 	beq	r17,zero,963c <__d2b+0x50>
    9638:	31800434 	orhi	r6,r6,16
    963c:	d9800015 	stw	r6,0(sp)
    9640:	a0002426 	beq	r20,zero,96d4 <__d2b+0xe8>
    9644:	d9000104 	addi	r4,sp,4
    9648:	dd000115 	stw	r20,4(sp)
    964c:	0008c200 	call	8c20 <__lo0bits>
    9650:	d8c00017 	ldw	r3,0(sp)
    9654:	10002f1e 	bne	r2,zero,9714 <__d2b+0x128>
    9658:	d9000117 	ldw	r4,4(sp)
    965c:	99000515 	stw	r4,20(r19)
    9660:	1821003a 	cmpeq	r16,r3,zero
    9664:	01000084 	movi	r4,2
    9668:	2421c83a 	sub	r16,r4,r16
    966c:	98c00615 	stw	r3,24(r19)
    9670:	9c000415 	stw	r16,16(r19)
    9674:	88001f1e 	bne	r17,zero,96f4 <__d2b+0x108>
    9678:	10bef384 	addi	r2,r2,-1074
    967c:	90800015 	stw	r2,0(r18)
    9680:	00900034 	movhi	r2,16384
    9684:	10bfffc4 	addi	r2,r2,-1
    9688:	8085883a 	add	r2,r16,r2
    968c:	1085883a 	add	r2,r2,r2
    9690:	1085883a 	add	r2,r2,r2
    9694:	9885883a 	add	r2,r19,r2
    9698:	11000517 	ldw	r4,20(r2)
    969c:	8020917a 	slli	r16,r16,5
    96a0:	0008bb80 	call	8bb8 <__hi0bits>
    96a4:	d8c00817 	ldw	r3,32(sp)
    96a8:	8085c83a 	sub	r2,r16,r2
    96ac:	18800015 	stw	r2,0(r3)
    96b0:	9805883a 	mov	r2,r19
    96b4:	dfc00717 	ldw	ra,28(sp)
    96b8:	dd000617 	ldw	r20,24(sp)
    96bc:	dcc00517 	ldw	r19,20(sp)
    96c0:	dc800417 	ldw	r18,16(sp)
    96c4:	dc400317 	ldw	r17,12(sp)
    96c8:	dc000217 	ldw	r16,8(sp)
    96cc:	dec00804 	addi	sp,sp,32
    96d0:	f800283a 	ret
    96d4:	d809883a 	mov	r4,sp
    96d8:	0008c200 	call	8c20 <__lo0bits>
    96dc:	d8c00017 	ldw	r3,0(sp)
    96e0:	04000044 	movi	r16,1
    96e4:	9c000415 	stw	r16,16(r19)
    96e8:	98c00515 	stw	r3,20(r19)
    96ec:	10800804 	addi	r2,r2,32
    96f0:	883fe126 	beq	r17,zero,9678 <__alt_exception_stack_pointer+0xf8009678>
    96f4:	00c00d44 	movi	r3,53
    96f8:	8c7ef344 	addi	r17,r17,-1075
    96fc:	88a3883a 	add	r17,r17,r2
    9700:	1885c83a 	sub	r2,r3,r2
    9704:	d8c00817 	ldw	r3,32(sp)
    9708:	94400015 	stw	r17,0(r18)
    970c:	18800015 	stw	r2,0(r3)
    9710:	003fe706 	br	96b0 <__alt_exception_stack_pointer+0xf80096b0>
    9714:	01000804 	movi	r4,32
    9718:	2089c83a 	sub	r4,r4,r2
    971c:	1908983a 	sll	r4,r3,r4
    9720:	d9400117 	ldw	r5,4(sp)
    9724:	1886d83a 	srl	r3,r3,r2
    9728:	2148b03a 	or	r4,r4,r5
    972c:	99000515 	stw	r4,20(r19)
    9730:	d8c00015 	stw	r3,0(sp)
    9734:	003fca06 	br	9660 <__alt_exception_stack_pointer+0xf8009660>

00009738 <__ratio>:
    9738:	defff904 	addi	sp,sp,-28
    973c:	dc400315 	stw	r17,12(sp)
    9740:	2823883a 	mov	r17,r5
    9744:	d9400104 	addi	r5,sp,4
    9748:	dfc00615 	stw	ra,24(sp)
    974c:	dcc00515 	stw	r19,20(sp)
    9750:	dc800415 	stw	r18,16(sp)
    9754:	2027883a 	mov	r19,r4
    9758:	dc000215 	stw	r16,8(sp)
    975c:	00094e00 	call	94e0 <__b2d>
    9760:	d80b883a 	mov	r5,sp
    9764:	8809883a 	mov	r4,r17
    9768:	1025883a 	mov	r18,r2
    976c:	1821883a 	mov	r16,r3
    9770:	00094e00 	call	94e0 <__b2d>
    9774:	8a000417 	ldw	r8,16(r17)
    9778:	99000417 	ldw	r4,16(r19)
    977c:	d9400117 	ldw	r5,4(sp)
    9780:	2209c83a 	sub	r4,r4,r8
    9784:	2010917a 	slli	r8,r4,5
    9788:	d9000017 	ldw	r4,0(sp)
    978c:	2909c83a 	sub	r4,r5,r4
    9790:	4109883a 	add	r4,r8,r4
    9794:	01000e0e 	bge	zero,r4,97d0 <__ratio+0x98>
    9798:	2008953a 	slli	r4,r4,20
    979c:	2421883a 	add	r16,r4,r16
    97a0:	100d883a 	mov	r6,r2
    97a4:	180f883a 	mov	r7,r3
    97a8:	9009883a 	mov	r4,r18
    97ac:	800b883a 	mov	r5,r16
    97b0:	000d7d00 	call	d7d0 <__divdf3>
    97b4:	dfc00617 	ldw	ra,24(sp)
    97b8:	dcc00517 	ldw	r19,20(sp)
    97bc:	dc800417 	ldw	r18,16(sp)
    97c0:	dc400317 	ldw	r17,12(sp)
    97c4:	dc000217 	ldw	r16,8(sp)
    97c8:	dec00704 	addi	sp,sp,28
    97cc:	f800283a 	ret
    97d0:	2008953a 	slli	r4,r4,20
    97d4:	1907c83a 	sub	r3,r3,r4
    97d8:	003ff106 	br	97a0 <__alt_exception_stack_pointer+0xf80097a0>

000097dc <_mprec_log10>:
    97dc:	defffe04 	addi	sp,sp,-8
    97e0:	dc000015 	stw	r16,0(sp)
    97e4:	dfc00115 	stw	ra,4(sp)
    97e8:	008005c4 	movi	r2,23
    97ec:	2021883a 	mov	r16,r4
    97f0:	11000d0e 	bge	r2,r4,9828 <_mprec_log10+0x4c>
    97f4:	0005883a 	mov	r2,zero
    97f8:	00cffc34 	movhi	r3,16368
    97fc:	843fffc4 	addi	r16,r16,-1
    9800:	000d883a 	mov	r6,zero
    9804:	01d00934 	movhi	r7,16420
    9808:	1009883a 	mov	r4,r2
    980c:	180b883a 	mov	r5,r3
    9810:	000e3f80 	call	e3f8 <__muldf3>
    9814:	803ff91e 	bne	r16,zero,97fc <__alt_exception_stack_pointer+0xf80097fc>
    9818:	dfc00117 	ldw	ra,4(sp)
    981c:	dc000017 	ldw	r16,0(sp)
    9820:	dec00204 	addi	sp,sp,8
    9824:	f800283a 	ret
    9828:	202090fa 	slli	r16,r4,3
    982c:	00800074 	movhi	r2,1
    9830:	108aad04 	addi	r2,r2,10932
    9834:	1421883a 	add	r16,r2,r16
    9838:	80800017 	ldw	r2,0(r16)
    983c:	80c00117 	ldw	r3,4(r16)
    9840:	dfc00117 	ldw	ra,4(sp)
    9844:	dc000017 	ldw	r16,0(sp)
    9848:	dec00204 	addi	sp,sp,8
    984c:	f800283a 	ret

00009850 <__copybits>:
    9850:	297fffc4 	addi	r5,r5,-1
    9854:	280fd17a 	srai	r7,r5,5
    9858:	30c00417 	ldw	r3,16(r6)
    985c:	30800504 	addi	r2,r6,20
    9860:	39c00044 	addi	r7,r7,1
    9864:	18c7883a 	add	r3,r3,r3
    9868:	39cf883a 	add	r7,r7,r7
    986c:	18c7883a 	add	r3,r3,r3
    9870:	39cf883a 	add	r7,r7,r7
    9874:	10c7883a 	add	r3,r2,r3
    9878:	21cf883a 	add	r7,r4,r7
    987c:	10c00d2e 	bgeu	r2,r3,98b4 <__copybits+0x64>
    9880:	200b883a 	mov	r5,r4
    9884:	12000017 	ldw	r8,0(r2)
    9888:	29400104 	addi	r5,r5,4
    988c:	10800104 	addi	r2,r2,4
    9890:	2a3fff15 	stw	r8,-4(r5)
    9894:	10fffb36 	bltu	r2,r3,9884 <__alt_exception_stack_pointer+0xf8009884>
    9898:	1985c83a 	sub	r2,r3,r6
    989c:	10bffac4 	addi	r2,r2,-21
    98a0:	1004d0ba 	srli	r2,r2,2
    98a4:	10800044 	addi	r2,r2,1
    98a8:	1085883a 	add	r2,r2,r2
    98ac:	1085883a 	add	r2,r2,r2
    98b0:	2089883a 	add	r4,r4,r2
    98b4:	21c0032e 	bgeu	r4,r7,98c4 <__copybits+0x74>
    98b8:	20000015 	stw	zero,0(r4)
    98bc:	21000104 	addi	r4,r4,4
    98c0:	21fffd36 	bltu	r4,r7,98b8 <__alt_exception_stack_pointer+0xf80098b8>
    98c4:	f800283a 	ret

000098c8 <__any_on>:
    98c8:	20c00417 	ldw	r3,16(r4)
    98cc:	2805d17a 	srai	r2,r5,5
    98d0:	21000504 	addi	r4,r4,20
    98d4:	18800d0e 	bge	r3,r2,990c <__any_on+0x44>
    98d8:	18c7883a 	add	r3,r3,r3
    98dc:	18c7883a 	add	r3,r3,r3
    98e0:	20c7883a 	add	r3,r4,r3
    98e4:	20c0192e 	bgeu	r4,r3,994c <__any_on+0x84>
    98e8:	18bfff17 	ldw	r2,-4(r3)
    98ec:	18ffff04 	addi	r3,r3,-4
    98f0:	1000041e 	bne	r2,zero,9904 <__any_on+0x3c>
    98f4:	20c0142e 	bgeu	r4,r3,9948 <__any_on+0x80>
    98f8:	18ffff04 	addi	r3,r3,-4
    98fc:	19400017 	ldw	r5,0(r3)
    9900:	283ffc26 	beq	r5,zero,98f4 <__alt_exception_stack_pointer+0xf80098f4>
    9904:	00800044 	movi	r2,1
    9908:	f800283a 	ret
    990c:	10c00a0e 	bge	r2,r3,9938 <__any_on+0x70>
    9910:	1085883a 	add	r2,r2,r2
    9914:	1085883a 	add	r2,r2,r2
    9918:	294007cc 	andi	r5,r5,31
    991c:	2087883a 	add	r3,r4,r2
    9920:	283ff026 	beq	r5,zero,98e4 <__alt_exception_stack_pointer+0xf80098e4>
    9924:	19800017 	ldw	r6,0(r3)
    9928:	3144d83a 	srl	r2,r6,r5
    992c:	114a983a 	sll	r5,r2,r5
    9930:	317ff41e 	bne	r6,r5,9904 <__alt_exception_stack_pointer+0xf8009904>
    9934:	003feb06 	br	98e4 <__alt_exception_stack_pointer+0xf80098e4>
    9938:	1085883a 	add	r2,r2,r2
    993c:	1085883a 	add	r2,r2,r2
    9940:	2087883a 	add	r3,r4,r2
    9944:	003fe706 	br	98e4 <__alt_exception_stack_pointer+0xf80098e4>
    9948:	f800283a 	ret
    994c:	0005883a 	mov	r2,zero
    9950:	f800283a 	ret

00009954 <_realloc_r>:
    9954:	defff604 	addi	sp,sp,-40
    9958:	dc800215 	stw	r18,8(sp)
    995c:	dfc00915 	stw	ra,36(sp)
    9960:	df000815 	stw	fp,32(sp)
    9964:	ddc00715 	stw	r23,28(sp)
    9968:	dd800615 	stw	r22,24(sp)
    996c:	dd400515 	stw	r21,20(sp)
    9970:	dd000415 	stw	r20,16(sp)
    9974:	dcc00315 	stw	r19,12(sp)
    9978:	dc400115 	stw	r17,4(sp)
    997c:	dc000015 	stw	r16,0(sp)
    9980:	3025883a 	mov	r18,r6
    9984:	2800b726 	beq	r5,zero,9c64 <_realloc_r+0x310>
    9988:	282b883a 	mov	r21,r5
    998c:	2029883a 	mov	r20,r4
    9990:	000fd640 	call	fd64 <__malloc_lock>
    9994:	a8bfff17 	ldw	r2,-4(r21)
    9998:	043fff04 	movi	r16,-4
    999c:	90c002c4 	addi	r3,r18,11
    99a0:	01000584 	movi	r4,22
    99a4:	acfffe04 	addi	r19,r21,-8
    99a8:	1420703a 	and	r16,r2,r16
    99ac:	20c0332e 	bgeu	r4,r3,9a7c <_realloc_r+0x128>
    99b0:	047ffe04 	movi	r17,-8
    99b4:	1c62703a 	and	r17,r3,r17
    99b8:	8807883a 	mov	r3,r17
    99bc:	88005816 	blt	r17,zero,9b20 <_realloc_r+0x1cc>
    99c0:	8c805736 	bltu	r17,r18,9b20 <_realloc_r+0x1cc>
    99c4:	80c0300e 	bge	r16,r3,9a88 <_realloc_r+0x134>
    99c8:	07000074 	movhi	fp,1
    99cc:	e70c4004 	addi	fp,fp,12544
    99d0:	e1c00217 	ldw	r7,8(fp)
    99d4:	9c09883a 	add	r4,r19,r16
    99d8:	22000117 	ldw	r8,4(r4)
    99dc:	21c06326 	beq	r4,r7,9b6c <_realloc_r+0x218>
    99e0:	017fff84 	movi	r5,-2
    99e4:	414a703a 	and	r5,r8,r5
    99e8:	214b883a 	add	r5,r4,r5
    99ec:	29800117 	ldw	r6,4(r5)
    99f0:	3180004c 	andi	r6,r6,1
    99f4:	30003f26 	beq	r6,zero,9af4 <_realloc_r+0x1a0>
    99f8:	1080004c 	andi	r2,r2,1
    99fc:	10008326 	beq	r2,zero,9c0c <_realloc_r+0x2b8>
    9a00:	900b883a 	mov	r5,r18
    9a04:	a009883a 	mov	r4,r20
    9a08:	00028800 	call	2880 <_malloc_r>
    9a0c:	1025883a 	mov	r18,r2
    9a10:	10011e26 	beq	r2,zero,9e8c <_realloc_r+0x538>
    9a14:	a93fff17 	ldw	r4,-4(r21)
    9a18:	10fffe04 	addi	r3,r2,-8
    9a1c:	00bfff84 	movi	r2,-2
    9a20:	2084703a 	and	r2,r4,r2
    9a24:	9885883a 	add	r2,r19,r2
    9a28:	1880ee26 	beq	r3,r2,9de4 <_realloc_r+0x490>
    9a2c:	81bfff04 	addi	r6,r16,-4
    9a30:	00800904 	movi	r2,36
    9a34:	1180b836 	bltu	r2,r6,9d18 <_realloc_r+0x3c4>
    9a38:	00c004c4 	movi	r3,19
    9a3c:	19809636 	bltu	r3,r6,9c98 <_realloc_r+0x344>
    9a40:	9005883a 	mov	r2,r18
    9a44:	a807883a 	mov	r3,r21
    9a48:	19000017 	ldw	r4,0(r3)
    9a4c:	11000015 	stw	r4,0(r2)
    9a50:	19000117 	ldw	r4,4(r3)
    9a54:	11000115 	stw	r4,4(r2)
    9a58:	18c00217 	ldw	r3,8(r3)
    9a5c:	10c00215 	stw	r3,8(r2)
    9a60:	a80b883a 	mov	r5,r21
    9a64:	a009883a 	mov	r4,r20
    9a68:	00077f40 	call	77f4 <_free_r>
    9a6c:	a009883a 	mov	r4,r20
    9a70:	000fd880 	call	fd88 <__malloc_unlock>
    9a74:	9005883a 	mov	r2,r18
    9a78:	00001206 	br	9ac4 <_realloc_r+0x170>
    9a7c:	00c00404 	movi	r3,16
    9a80:	1823883a 	mov	r17,r3
    9a84:	003fce06 	br	99c0 <__alt_exception_stack_pointer+0xf80099c0>
    9a88:	a825883a 	mov	r18,r21
    9a8c:	8445c83a 	sub	r2,r16,r17
    9a90:	00c003c4 	movi	r3,15
    9a94:	18802636 	bltu	r3,r2,9b30 <_realloc_r+0x1dc>
    9a98:	99800117 	ldw	r6,4(r19)
    9a9c:	9c07883a 	add	r3,r19,r16
    9aa0:	3180004c 	andi	r6,r6,1
    9aa4:	3420b03a 	or	r16,r6,r16
    9aa8:	9c000115 	stw	r16,4(r19)
    9aac:	18800117 	ldw	r2,4(r3)
    9ab0:	10800054 	ori	r2,r2,1
    9ab4:	18800115 	stw	r2,4(r3)
    9ab8:	a009883a 	mov	r4,r20
    9abc:	000fd880 	call	fd88 <__malloc_unlock>
    9ac0:	9005883a 	mov	r2,r18
    9ac4:	dfc00917 	ldw	ra,36(sp)
    9ac8:	df000817 	ldw	fp,32(sp)
    9acc:	ddc00717 	ldw	r23,28(sp)
    9ad0:	dd800617 	ldw	r22,24(sp)
    9ad4:	dd400517 	ldw	r21,20(sp)
    9ad8:	dd000417 	ldw	r20,16(sp)
    9adc:	dcc00317 	ldw	r19,12(sp)
    9ae0:	dc800217 	ldw	r18,8(sp)
    9ae4:	dc400117 	ldw	r17,4(sp)
    9ae8:	dc000017 	ldw	r16,0(sp)
    9aec:	dec00a04 	addi	sp,sp,40
    9af0:	f800283a 	ret
    9af4:	017fff04 	movi	r5,-4
    9af8:	414a703a 	and	r5,r8,r5
    9afc:	814d883a 	add	r6,r16,r5
    9b00:	30c01f16 	blt	r6,r3,9b80 <_realloc_r+0x22c>
    9b04:	20800317 	ldw	r2,12(r4)
    9b08:	20c00217 	ldw	r3,8(r4)
    9b0c:	a825883a 	mov	r18,r21
    9b10:	3021883a 	mov	r16,r6
    9b14:	18800315 	stw	r2,12(r3)
    9b18:	10c00215 	stw	r3,8(r2)
    9b1c:	003fdb06 	br	9a8c <__alt_exception_stack_pointer+0xf8009a8c>
    9b20:	00800304 	movi	r2,12
    9b24:	a0800015 	stw	r2,0(r20)
    9b28:	0005883a 	mov	r2,zero
    9b2c:	003fe506 	br	9ac4 <__alt_exception_stack_pointer+0xf8009ac4>
    9b30:	98c00117 	ldw	r3,4(r19)
    9b34:	9c4b883a 	add	r5,r19,r17
    9b38:	11000054 	ori	r4,r2,1
    9b3c:	18c0004c 	andi	r3,r3,1
    9b40:	1c62b03a 	or	r17,r3,r17
    9b44:	9c400115 	stw	r17,4(r19)
    9b48:	29000115 	stw	r4,4(r5)
    9b4c:	2885883a 	add	r2,r5,r2
    9b50:	10c00117 	ldw	r3,4(r2)
    9b54:	29400204 	addi	r5,r5,8
    9b58:	a009883a 	mov	r4,r20
    9b5c:	18c00054 	ori	r3,r3,1
    9b60:	10c00115 	stw	r3,4(r2)
    9b64:	00077f40 	call	77f4 <_free_r>
    9b68:	003fd306 	br	9ab8 <__alt_exception_stack_pointer+0xf8009ab8>
    9b6c:	017fff04 	movi	r5,-4
    9b70:	414a703a 	and	r5,r8,r5
    9b74:	89800404 	addi	r6,r17,16
    9b78:	8151883a 	add	r8,r16,r5
    9b7c:	4180590e 	bge	r8,r6,9ce4 <_realloc_r+0x390>
    9b80:	1080004c 	andi	r2,r2,1
    9b84:	103f9e1e 	bne	r2,zero,9a00 <__alt_exception_stack_pointer+0xf8009a00>
    9b88:	adbffe17 	ldw	r22,-8(r21)
    9b8c:	00bfff04 	movi	r2,-4
    9b90:	9dadc83a 	sub	r22,r19,r22
    9b94:	b1800117 	ldw	r6,4(r22)
    9b98:	3084703a 	and	r2,r6,r2
    9b9c:	20002026 	beq	r4,zero,9c20 <_realloc_r+0x2cc>
    9ba0:	80af883a 	add	r23,r16,r2
    9ba4:	b96f883a 	add	r23,r23,r5
    9ba8:	21c05f26 	beq	r4,r7,9d28 <_realloc_r+0x3d4>
    9bac:	b8c01c16 	blt	r23,r3,9c20 <_realloc_r+0x2cc>
    9bb0:	20800317 	ldw	r2,12(r4)
    9bb4:	20c00217 	ldw	r3,8(r4)
    9bb8:	81bfff04 	addi	r6,r16,-4
    9bbc:	01000904 	movi	r4,36
    9bc0:	18800315 	stw	r2,12(r3)
    9bc4:	10c00215 	stw	r3,8(r2)
    9bc8:	b0c00217 	ldw	r3,8(r22)
    9bcc:	b0800317 	ldw	r2,12(r22)
    9bd0:	b4800204 	addi	r18,r22,8
    9bd4:	18800315 	stw	r2,12(r3)
    9bd8:	10c00215 	stw	r3,8(r2)
    9bdc:	21801b36 	bltu	r4,r6,9c4c <_realloc_r+0x2f8>
    9be0:	008004c4 	movi	r2,19
    9be4:	1180352e 	bgeu	r2,r6,9cbc <_realloc_r+0x368>
    9be8:	a8800017 	ldw	r2,0(r21)
    9bec:	b0800215 	stw	r2,8(r22)
    9bf0:	a8800117 	ldw	r2,4(r21)
    9bf4:	b0800315 	stw	r2,12(r22)
    9bf8:	008006c4 	movi	r2,27
    9bfc:	11807f36 	bltu	r2,r6,9dfc <_realloc_r+0x4a8>
    9c00:	b0800404 	addi	r2,r22,16
    9c04:	ad400204 	addi	r21,r21,8
    9c08:	00002d06 	br	9cc0 <_realloc_r+0x36c>
    9c0c:	adbffe17 	ldw	r22,-8(r21)
    9c10:	00bfff04 	movi	r2,-4
    9c14:	9dadc83a 	sub	r22,r19,r22
    9c18:	b1000117 	ldw	r4,4(r22)
    9c1c:	2084703a 	and	r2,r4,r2
    9c20:	b03f7726 	beq	r22,zero,9a00 <__alt_exception_stack_pointer+0xf8009a00>
    9c24:	80af883a 	add	r23,r16,r2
    9c28:	b8ff7516 	blt	r23,r3,9a00 <__alt_exception_stack_pointer+0xf8009a00>
    9c2c:	b0800317 	ldw	r2,12(r22)
    9c30:	b0c00217 	ldw	r3,8(r22)
    9c34:	81bfff04 	addi	r6,r16,-4
    9c38:	01000904 	movi	r4,36
    9c3c:	18800315 	stw	r2,12(r3)
    9c40:	10c00215 	stw	r3,8(r2)
    9c44:	b4800204 	addi	r18,r22,8
    9c48:	21bfe52e 	bgeu	r4,r6,9be0 <__alt_exception_stack_pointer+0xf8009be0>
    9c4c:	a80b883a 	mov	r5,r21
    9c50:	9009883a 	mov	r4,r18
    9c54:	00086180 	call	8618 <memmove>
    9c58:	b821883a 	mov	r16,r23
    9c5c:	b027883a 	mov	r19,r22
    9c60:	003f8a06 	br	9a8c <__alt_exception_stack_pointer+0xf8009a8c>
    9c64:	300b883a 	mov	r5,r6
    9c68:	dfc00917 	ldw	ra,36(sp)
    9c6c:	df000817 	ldw	fp,32(sp)
    9c70:	ddc00717 	ldw	r23,28(sp)
    9c74:	dd800617 	ldw	r22,24(sp)
    9c78:	dd400517 	ldw	r21,20(sp)
    9c7c:	dd000417 	ldw	r20,16(sp)
    9c80:	dcc00317 	ldw	r19,12(sp)
    9c84:	dc800217 	ldw	r18,8(sp)
    9c88:	dc400117 	ldw	r17,4(sp)
    9c8c:	dc000017 	ldw	r16,0(sp)
    9c90:	dec00a04 	addi	sp,sp,40
    9c94:	00028801 	jmpi	2880 <_malloc_r>
    9c98:	a8c00017 	ldw	r3,0(r21)
    9c9c:	90c00015 	stw	r3,0(r18)
    9ca0:	a8c00117 	ldw	r3,4(r21)
    9ca4:	90c00115 	stw	r3,4(r18)
    9ca8:	00c006c4 	movi	r3,27
    9cac:	19804536 	bltu	r3,r6,9dc4 <_realloc_r+0x470>
    9cb0:	90800204 	addi	r2,r18,8
    9cb4:	a8c00204 	addi	r3,r21,8
    9cb8:	003f6306 	br	9a48 <__alt_exception_stack_pointer+0xf8009a48>
    9cbc:	9005883a 	mov	r2,r18
    9cc0:	a8c00017 	ldw	r3,0(r21)
    9cc4:	b821883a 	mov	r16,r23
    9cc8:	b027883a 	mov	r19,r22
    9ccc:	10c00015 	stw	r3,0(r2)
    9cd0:	a8c00117 	ldw	r3,4(r21)
    9cd4:	10c00115 	stw	r3,4(r2)
    9cd8:	a8c00217 	ldw	r3,8(r21)
    9cdc:	10c00215 	stw	r3,8(r2)
    9ce0:	003f6a06 	br	9a8c <__alt_exception_stack_pointer+0xf8009a8c>
    9ce4:	9c67883a 	add	r19,r19,r17
    9ce8:	4445c83a 	sub	r2,r8,r17
    9cec:	e4c00215 	stw	r19,8(fp)
    9cf0:	10800054 	ori	r2,r2,1
    9cf4:	98800115 	stw	r2,4(r19)
    9cf8:	a8bfff17 	ldw	r2,-4(r21)
    9cfc:	a009883a 	mov	r4,r20
    9d00:	1080004c 	andi	r2,r2,1
    9d04:	1462b03a 	or	r17,r2,r17
    9d08:	ac7fff15 	stw	r17,-4(r21)
    9d0c:	000fd880 	call	fd88 <__malloc_unlock>
    9d10:	a805883a 	mov	r2,r21
    9d14:	003f6b06 	br	9ac4 <__alt_exception_stack_pointer+0xf8009ac4>
    9d18:	a80b883a 	mov	r5,r21
    9d1c:	9009883a 	mov	r4,r18
    9d20:	00086180 	call	8618 <memmove>
    9d24:	003f4e06 	br	9a60 <__alt_exception_stack_pointer+0xf8009a60>
    9d28:	89000404 	addi	r4,r17,16
    9d2c:	b93fbc16 	blt	r23,r4,9c20 <__alt_exception_stack_pointer+0xf8009c20>
    9d30:	b0800317 	ldw	r2,12(r22)
    9d34:	b0c00217 	ldw	r3,8(r22)
    9d38:	81bfff04 	addi	r6,r16,-4
    9d3c:	01000904 	movi	r4,36
    9d40:	18800315 	stw	r2,12(r3)
    9d44:	10c00215 	stw	r3,8(r2)
    9d48:	b4800204 	addi	r18,r22,8
    9d4c:	21804336 	bltu	r4,r6,9e5c <_realloc_r+0x508>
    9d50:	008004c4 	movi	r2,19
    9d54:	11803f2e 	bgeu	r2,r6,9e54 <_realloc_r+0x500>
    9d58:	a8800017 	ldw	r2,0(r21)
    9d5c:	b0800215 	stw	r2,8(r22)
    9d60:	a8800117 	ldw	r2,4(r21)
    9d64:	b0800315 	stw	r2,12(r22)
    9d68:	008006c4 	movi	r2,27
    9d6c:	11803f36 	bltu	r2,r6,9e6c <_realloc_r+0x518>
    9d70:	b0800404 	addi	r2,r22,16
    9d74:	ad400204 	addi	r21,r21,8
    9d78:	a8c00017 	ldw	r3,0(r21)
    9d7c:	10c00015 	stw	r3,0(r2)
    9d80:	a8c00117 	ldw	r3,4(r21)
    9d84:	10c00115 	stw	r3,4(r2)
    9d88:	a8c00217 	ldw	r3,8(r21)
    9d8c:	10c00215 	stw	r3,8(r2)
    9d90:	b447883a 	add	r3,r22,r17
    9d94:	bc45c83a 	sub	r2,r23,r17
    9d98:	e0c00215 	stw	r3,8(fp)
    9d9c:	10800054 	ori	r2,r2,1
    9da0:	18800115 	stw	r2,4(r3)
    9da4:	b0800117 	ldw	r2,4(r22)
    9da8:	a009883a 	mov	r4,r20
    9dac:	1080004c 	andi	r2,r2,1
    9db0:	1462b03a 	or	r17,r2,r17
    9db4:	b4400115 	stw	r17,4(r22)
    9db8:	000fd880 	call	fd88 <__malloc_unlock>
    9dbc:	9005883a 	mov	r2,r18
    9dc0:	003f4006 	br	9ac4 <__alt_exception_stack_pointer+0xf8009ac4>
    9dc4:	a8c00217 	ldw	r3,8(r21)
    9dc8:	90c00215 	stw	r3,8(r18)
    9dcc:	a8c00317 	ldw	r3,12(r21)
    9dd0:	90c00315 	stw	r3,12(r18)
    9dd4:	30801126 	beq	r6,r2,9e1c <_realloc_r+0x4c8>
    9dd8:	90800404 	addi	r2,r18,16
    9ddc:	a8c00404 	addi	r3,r21,16
    9de0:	003f1906 	br	9a48 <__alt_exception_stack_pointer+0xf8009a48>
    9de4:	90ffff17 	ldw	r3,-4(r18)
    9de8:	00bfff04 	movi	r2,-4
    9dec:	a825883a 	mov	r18,r21
    9df0:	1884703a 	and	r2,r3,r2
    9df4:	80a1883a 	add	r16,r16,r2
    9df8:	003f2406 	br	9a8c <__alt_exception_stack_pointer+0xf8009a8c>
    9dfc:	a8800217 	ldw	r2,8(r21)
    9e00:	b0800415 	stw	r2,16(r22)
    9e04:	a8800317 	ldw	r2,12(r21)
    9e08:	b0800515 	stw	r2,20(r22)
    9e0c:	31000a26 	beq	r6,r4,9e38 <_realloc_r+0x4e4>
    9e10:	b0800604 	addi	r2,r22,24
    9e14:	ad400404 	addi	r21,r21,16
    9e18:	003fa906 	br	9cc0 <__alt_exception_stack_pointer+0xf8009cc0>
    9e1c:	a9000417 	ldw	r4,16(r21)
    9e20:	90800604 	addi	r2,r18,24
    9e24:	a8c00604 	addi	r3,r21,24
    9e28:	91000415 	stw	r4,16(r18)
    9e2c:	a9000517 	ldw	r4,20(r21)
    9e30:	91000515 	stw	r4,20(r18)
    9e34:	003f0406 	br	9a48 <__alt_exception_stack_pointer+0xf8009a48>
    9e38:	a8c00417 	ldw	r3,16(r21)
    9e3c:	ad400604 	addi	r21,r21,24
    9e40:	b0800804 	addi	r2,r22,32
    9e44:	b0c00615 	stw	r3,24(r22)
    9e48:	a8ffff17 	ldw	r3,-4(r21)
    9e4c:	b0c00715 	stw	r3,28(r22)
    9e50:	003f9b06 	br	9cc0 <__alt_exception_stack_pointer+0xf8009cc0>
    9e54:	9005883a 	mov	r2,r18
    9e58:	003fc706 	br	9d78 <__alt_exception_stack_pointer+0xf8009d78>
    9e5c:	a80b883a 	mov	r5,r21
    9e60:	9009883a 	mov	r4,r18
    9e64:	00086180 	call	8618 <memmove>
    9e68:	003fc906 	br	9d90 <__alt_exception_stack_pointer+0xf8009d90>
    9e6c:	a8800217 	ldw	r2,8(r21)
    9e70:	b0800415 	stw	r2,16(r22)
    9e74:	a8800317 	ldw	r2,12(r21)
    9e78:	b0800515 	stw	r2,20(r22)
    9e7c:	31000726 	beq	r6,r4,9e9c <_realloc_r+0x548>
    9e80:	b0800604 	addi	r2,r22,24
    9e84:	ad400404 	addi	r21,r21,16
    9e88:	003fbb06 	br	9d78 <__alt_exception_stack_pointer+0xf8009d78>
    9e8c:	a009883a 	mov	r4,r20
    9e90:	000fd880 	call	fd88 <__malloc_unlock>
    9e94:	0005883a 	mov	r2,zero
    9e98:	003f0a06 	br	9ac4 <__alt_exception_stack_pointer+0xf8009ac4>
    9e9c:	a8c00417 	ldw	r3,16(r21)
    9ea0:	ad400604 	addi	r21,r21,24
    9ea4:	b0800804 	addi	r2,r22,32
    9ea8:	b0c00615 	stw	r3,24(r22)
    9eac:	a8ffff17 	ldw	r3,-4(r21)
    9eb0:	b0c00715 	stw	r3,28(r22)
    9eb4:	003fb006 	br	9d78 <__alt_exception_stack_pointer+0xf8009d78>

00009eb8 <__fpclassifyd>:
    9eb8:	00a00034 	movhi	r2,32768
    9ebc:	10bfffc4 	addi	r2,r2,-1
    9ec0:	2884703a 	and	r2,r5,r2
    9ec4:	10000726 	beq	r2,zero,9ee4 <__fpclassifyd+0x2c>
    9ec8:	00fffc34 	movhi	r3,65520
    9ecc:	019ff834 	movhi	r6,32736
    9ed0:	28c7883a 	add	r3,r5,r3
    9ed4:	31bfffc4 	addi	r6,r6,-1
    9ed8:	30c00536 	bltu	r6,r3,9ef0 <__fpclassifyd+0x38>
    9edc:	00800104 	movi	r2,4
    9ee0:	f800283a 	ret
    9ee4:	2000021e 	bne	r4,zero,9ef0 <__fpclassifyd+0x38>
    9ee8:	00800084 	movi	r2,2
    9eec:	f800283a 	ret
    9ef0:	00dffc34 	movhi	r3,32752
    9ef4:	019ff834 	movhi	r6,32736
    9ef8:	28cb883a 	add	r5,r5,r3
    9efc:	31bfffc4 	addi	r6,r6,-1
    9f00:	317ff62e 	bgeu	r6,r5,9edc <__alt_exception_stack_pointer+0xf8009edc>
    9f04:	01400434 	movhi	r5,16
    9f08:	297fffc4 	addi	r5,r5,-1
    9f0c:	28800236 	bltu	r5,r2,9f18 <__fpclassifyd+0x60>
    9f10:	008000c4 	movi	r2,3
    9f14:	f800283a 	ret
    9f18:	10c00226 	beq	r2,r3,9f24 <__fpclassifyd+0x6c>
    9f1c:	0005883a 	mov	r2,zero
    9f20:	f800283a 	ret
    9f24:	2005003a 	cmpeq	r2,r4,zero
    9f28:	f800283a 	ret

00009f2c <__sread>:
    9f2c:	defffe04 	addi	sp,sp,-8
    9f30:	dc000015 	stw	r16,0(sp)
    9f34:	2821883a 	mov	r16,r5
    9f38:	2940038f 	ldh	r5,14(r5)
    9f3c:	dfc00115 	stw	ra,4(sp)
    9f40:	000bde80 	call	bde8 <_read_r>
    9f44:	10000716 	blt	r2,zero,9f64 <__sread+0x38>
    9f48:	80c01417 	ldw	r3,80(r16)
    9f4c:	1887883a 	add	r3,r3,r2
    9f50:	80c01415 	stw	r3,80(r16)
    9f54:	dfc00117 	ldw	ra,4(sp)
    9f58:	dc000017 	ldw	r16,0(sp)
    9f5c:	dec00204 	addi	sp,sp,8
    9f60:	f800283a 	ret
    9f64:	80c0030b 	ldhu	r3,12(r16)
    9f68:	18fbffcc 	andi	r3,r3,61439
    9f6c:	80c0030d 	sth	r3,12(r16)
    9f70:	dfc00117 	ldw	ra,4(sp)
    9f74:	dc000017 	ldw	r16,0(sp)
    9f78:	dec00204 	addi	sp,sp,8
    9f7c:	f800283a 	ret

00009f80 <__seofread>:
    9f80:	0005883a 	mov	r2,zero
    9f84:	f800283a 	ret

00009f88 <__swrite>:
    9f88:	2880030b 	ldhu	r2,12(r5)
    9f8c:	defffb04 	addi	sp,sp,-20
    9f90:	dcc00315 	stw	r19,12(sp)
    9f94:	dc800215 	stw	r18,8(sp)
    9f98:	dc400115 	stw	r17,4(sp)
    9f9c:	dc000015 	stw	r16,0(sp)
    9fa0:	dfc00415 	stw	ra,16(sp)
    9fa4:	10c0400c 	andi	r3,r2,256
    9fa8:	2821883a 	mov	r16,r5
    9fac:	2023883a 	mov	r17,r4
    9fb0:	3025883a 	mov	r18,r6
    9fb4:	3827883a 	mov	r19,r7
    9fb8:	18000526 	beq	r3,zero,9fd0 <__swrite+0x48>
    9fbc:	2940038f 	ldh	r5,14(r5)
    9fc0:	01c00084 	movi	r7,2
    9fc4:	000d883a 	mov	r6,zero
    9fc8:	000bd880 	call	bd88 <_lseek_r>
    9fcc:	8080030b 	ldhu	r2,12(r16)
    9fd0:	8140038f 	ldh	r5,14(r16)
    9fd4:	10bbffcc 	andi	r2,r2,61439
    9fd8:	980f883a 	mov	r7,r19
    9fdc:	900d883a 	mov	r6,r18
    9fe0:	8809883a 	mov	r4,r17
    9fe4:	8080030d 	sth	r2,12(r16)
    9fe8:	dfc00417 	ldw	ra,16(sp)
    9fec:	dcc00317 	ldw	r19,12(sp)
    9ff0:	dc800217 	ldw	r18,8(sp)
    9ff4:	dc400117 	ldw	r17,4(sp)
    9ff8:	dc000017 	ldw	r16,0(sp)
    9ffc:	dec00504 	addi	sp,sp,20
    a000:	000b83c1 	jmpi	b83c <_write_r>

0000a004 <__sseek>:
    a004:	defffe04 	addi	sp,sp,-8
    a008:	dc000015 	stw	r16,0(sp)
    a00c:	2821883a 	mov	r16,r5
    a010:	2940038f 	ldh	r5,14(r5)
    a014:	dfc00115 	stw	ra,4(sp)
    a018:	000bd880 	call	bd88 <_lseek_r>
    a01c:	00ffffc4 	movi	r3,-1
    a020:	10c00826 	beq	r2,r3,a044 <__sseek+0x40>
    a024:	80c0030b 	ldhu	r3,12(r16)
    a028:	80801415 	stw	r2,80(r16)
    a02c:	18c40014 	ori	r3,r3,4096
    a030:	80c0030d 	sth	r3,12(r16)
    a034:	dfc00117 	ldw	ra,4(sp)
    a038:	dc000017 	ldw	r16,0(sp)
    a03c:	dec00204 	addi	sp,sp,8
    a040:	f800283a 	ret
    a044:	80c0030b 	ldhu	r3,12(r16)
    a048:	18fbffcc 	andi	r3,r3,61439
    a04c:	80c0030d 	sth	r3,12(r16)
    a050:	dfc00117 	ldw	ra,4(sp)
    a054:	dc000017 	ldw	r16,0(sp)
    a058:	dec00204 	addi	sp,sp,8
    a05c:	f800283a 	ret

0000a060 <__sclose>:
    a060:	2940038f 	ldh	r5,14(r5)
    a064:	000b89c1 	jmpi	b89c <_close_r>

0000a068 <strcmp>:
    a068:	2144b03a 	or	r2,r4,r5
    a06c:	108000cc 	andi	r2,r2,3
    a070:	1000171e 	bne	r2,zero,a0d0 <strcmp+0x68>
    a074:	20800017 	ldw	r2,0(r4)
    a078:	28c00017 	ldw	r3,0(r5)
    a07c:	10c0141e 	bne	r2,r3,a0d0 <strcmp+0x68>
    a080:	027fbff4 	movhi	r9,65279
    a084:	4a7fbfc4 	addi	r9,r9,-257
    a088:	0086303a 	nor	r3,zero,r2
    a08c:	02202074 	movhi	r8,32897
    a090:	1245883a 	add	r2,r2,r9
    a094:	42202004 	addi	r8,r8,-32640
    a098:	10c4703a 	and	r2,r2,r3
    a09c:	1204703a 	and	r2,r2,r8
    a0a0:	10000226 	beq	r2,zero,a0ac <strcmp+0x44>
    a0a4:	00002306 	br	a134 <strcmp+0xcc>
    a0a8:	1000221e 	bne	r2,zero,a134 <strcmp+0xcc>
    a0ac:	21000104 	addi	r4,r4,4
    a0b0:	20c00017 	ldw	r3,0(r4)
    a0b4:	29400104 	addi	r5,r5,4
    a0b8:	29800017 	ldw	r6,0(r5)
    a0bc:	1a4f883a 	add	r7,r3,r9
    a0c0:	00c4303a 	nor	r2,zero,r3
    a0c4:	3884703a 	and	r2,r7,r2
    a0c8:	1204703a 	and	r2,r2,r8
    a0cc:	19bff626 	beq	r3,r6,a0a8 <__alt_exception_stack_pointer+0xf800a0a8>
    a0d0:	20800003 	ldbu	r2,0(r4)
    a0d4:	10c03fcc 	andi	r3,r2,255
    a0d8:	18c0201c 	xori	r3,r3,128
    a0dc:	18ffe004 	addi	r3,r3,-128
    a0e0:	18000c26 	beq	r3,zero,a114 <strcmp+0xac>
    a0e4:	29800007 	ldb	r6,0(r5)
    a0e8:	19800326 	beq	r3,r6,a0f8 <strcmp+0x90>
    a0ec:	00001306 	br	a13c <strcmp+0xd4>
    a0f0:	29800007 	ldb	r6,0(r5)
    a0f4:	11800b1e 	bne	r2,r6,a124 <strcmp+0xbc>
    a0f8:	21000044 	addi	r4,r4,1
    a0fc:	20c00003 	ldbu	r3,0(r4)
    a100:	29400044 	addi	r5,r5,1
    a104:	18803fcc 	andi	r2,r3,255
    a108:	1080201c 	xori	r2,r2,128
    a10c:	10bfe004 	addi	r2,r2,-128
    a110:	103ff71e 	bne	r2,zero,a0f0 <__alt_exception_stack_pointer+0xf800a0f0>
    a114:	0007883a 	mov	r3,zero
    a118:	28800003 	ldbu	r2,0(r5)
    a11c:	1885c83a 	sub	r2,r3,r2
    a120:	f800283a 	ret
    a124:	28800003 	ldbu	r2,0(r5)
    a128:	18c03fcc 	andi	r3,r3,255
    a12c:	1885c83a 	sub	r2,r3,r2
    a130:	f800283a 	ret
    a134:	0005883a 	mov	r2,zero
    a138:	f800283a 	ret
    a13c:	10c03fcc 	andi	r3,r2,255
    a140:	003ff506 	br	a118 <__alt_exception_stack_pointer+0xf800a118>

0000a144 <__sprint_r.part.0>:
    a144:	28801917 	ldw	r2,100(r5)
    a148:	defff604 	addi	sp,sp,-40
    a14c:	dd400515 	stw	r21,20(sp)
    a150:	dfc00915 	stw	ra,36(sp)
    a154:	df000815 	stw	fp,32(sp)
    a158:	ddc00715 	stw	r23,28(sp)
    a15c:	dd800615 	stw	r22,24(sp)
    a160:	dd000415 	stw	r20,16(sp)
    a164:	dcc00315 	stw	r19,12(sp)
    a168:	dc800215 	stw	r18,8(sp)
    a16c:	dc400115 	stw	r17,4(sp)
    a170:	dc000015 	stw	r16,0(sp)
    a174:	1088000c 	andi	r2,r2,8192
    a178:	302b883a 	mov	r21,r6
    a17c:	10002e26 	beq	r2,zero,a238 <__sprint_r.part.0+0xf4>
    a180:	30800217 	ldw	r2,8(r6)
    a184:	35800017 	ldw	r22,0(r6)
    a188:	10002926 	beq	r2,zero,a230 <__sprint_r.part.0+0xec>
    a18c:	2827883a 	mov	r19,r5
    a190:	2029883a 	mov	r20,r4
    a194:	b5c00104 	addi	r23,r22,4
    a198:	04bfffc4 	movi	r18,-1
    a19c:	bc400017 	ldw	r17,0(r23)
    a1a0:	b4000017 	ldw	r16,0(r22)
    a1a4:	0039883a 	mov	fp,zero
    a1a8:	8822d0ba 	srli	r17,r17,2
    a1ac:	8800031e 	bne	r17,zero,a1bc <__sprint_r.part.0+0x78>
    a1b0:	00001806 	br	a214 <__sprint_r.part.0+0xd0>
    a1b4:	84000104 	addi	r16,r16,4
    a1b8:	8f001526 	beq	r17,fp,a210 <__sprint_r.part.0+0xcc>
    a1bc:	81400017 	ldw	r5,0(r16)
    a1c0:	980d883a 	mov	r6,r19
    a1c4:	a009883a 	mov	r4,r20
    a1c8:	000bc340 	call	bc34 <_fputwc_r>
    a1cc:	e7000044 	addi	fp,fp,1
    a1d0:	14bff81e 	bne	r2,r18,a1b4 <__alt_exception_stack_pointer+0xf800a1b4>
    a1d4:	9005883a 	mov	r2,r18
    a1d8:	a8000215 	stw	zero,8(r21)
    a1dc:	a8000115 	stw	zero,4(r21)
    a1e0:	dfc00917 	ldw	ra,36(sp)
    a1e4:	df000817 	ldw	fp,32(sp)
    a1e8:	ddc00717 	ldw	r23,28(sp)
    a1ec:	dd800617 	ldw	r22,24(sp)
    a1f0:	dd400517 	ldw	r21,20(sp)
    a1f4:	dd000417 	ldw	r20,16(sp)
    a1f8:	dcc00317 	ldw	r19,12(sp)
    a1fc:	dc800217 	ldw	r18,8(sp)
    a200:	dc400117 	ldw	r17,4(sp)
    a204:	dc000017 	ldw	r16,0(sp)
    a208:	dec00a04 	addi	sp,sp,40
    a20c:	f800283a 	ret
    a210:	a8800217 	ldw	r2,8(r21)
    a214:	8c63883a 	add	r17,r17,r17
    a218:	8c63883a 	add	r17,r17,r17
    a21c:	1445c83a 	sub	r2,r2,r17
    a220:	a8800215 	stw	r2,8(r21)
    a224:	b5800204 	addi	r22,r22,8
    a228:	bdc00204 	addi	r23,r23,8
    a22c:	103fdb1e 	bne	r2,zero,a19c <__alt_exception_stack_pointer+0xf800a19c>
    a230:	0005883a 	mov	r2,zero
    a234:	003fe806 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>
    a238:	0007b040 	call	7b04 <__sfvwrite_r>
    a23c:	003fe606 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>

0000a240 <__sprint_r>:
    a240:	30c00217 	ldw	r3,8(r6)
    a244:	18000126 	beq	r3,zero,a24c <__sprint_r+0xc>
    a248:	000a1441 	jmpi	a144 <__sprint_r.part.0>
    a24c:	30000115 	stw	zero,4(r6)
    a250:	0005883a 	mov	r2,zero
    a254:	f800283a 	ret

0000a258 <___vfiprintf_internal_r>:
    a258:	deffca04 	addi	sp,sp,-216
    a25c:	dd403115 	stw	r21,196(sp)
    a260:	dfc03515 	stw	ra,212(sp)
    a264:	df003415 	stw	fp,208(sp)
    a268:	ddc03315 	stw	r23,204(sp)
    a26c:	dd803215 	stw	r22,200(sp)
    a270:	dd003015 	stw	r20,192(sp)
    a274:	dcc02f15 	stw	r19,188(sp)
    a278:	dc802e15 	stw	r18,184(sp)
    a27c:	dc402d15 	stw	r17,180(sp)
    a280:	dc002c15 	stw	r16,176(sp)
    a284:	d9002115 	stw	r4,132(sp)
    a288:	d9402015 	stw	r5,128(sp)
    a28c:	d9c02215 	stw	r7,136(sp)
    a290:	302b883a 	mov	r21,r6
    a294:	20000226 	beq	r4,zero,a2a0 <___vfiprintf_internal_r+0x48>
    a298:	20800e17 	ldw	r2,56(r4)
    a29c:	1000cf26 	beq	r2,zero,a5dc <___vfiprintf_internal_r+0x384>
    a2a0:	d8c02017 	ldw	r3,128(sp)
    a2a4:	1880030b 	ldhu	r2,12(r3)
    a2a8:	10c8000c 	andi	r3,r2,8192
    a2ac:	1800071e 	bne	r3,zero,a2cc <___vfiprintf_internal_r+0x74>
    a2b0:	d9402017 	ldw	r5,128(sp)
    a2b4:	00f7ffc4 	movi	r3,-8193
    a2b8:	10880014 	ori	r2,r2,8192
    a2bc:	29001917 	ldw	r4,100(r5)
    a2c0:	2880030d 	sth	r2,12(r5)
    a2c4:	20c6703a 	and	r3,r4,r3
    a2c8:	28c01915 	stw	r3,100(r5)
    a2cc:	10c0020c 	andi	r3,r2,8
    a2d0:	1800a526 	beq	r3,zero,a568 <___vfiprintf_internal_r+0x310>
    a2d4:	d9002017 	ldw	r4,128(sp)
    a2d8:	20c00417 	ldw	r3,16(r4)
    a2dc:	1800a226 	beq	r3,zero,a568 <___vfiprintf_internal_r+0x310>
    a2e0:	1080068c 	andi	r2,r2,26
    a2e4:	00c00284 	movi	r3,10
    a2e8:	10c0a826 	beq	r2,r3,a58c <___vfiprintf_internal_r+0x334>
    a2ec:	d9001a04 	addi	r4,sp,104
    a2f0:	d94019c4 	addi	r5,sp,103
    a2f4:	04800074 	movhi	r18,1
    a2f8:	2145c83a 	sub	r2,r4,r5
    a2fc:	948adf04 	addi	r18,r18,11132
    a300:	d9001e15 	stw	r4,120(sp)
    a304:	d9401f15 	stw	r5,124(sp)
    a308:	dec01a15 	stw	sp,104(sp)
    a30c:	d8001c15 	stw	zero,112(sp)
    a310:	d8001b15 	stw	zero,108(sp)
    a314:	d811883a 	mov	r8,sp
    a318:	d8002615 	stw	zero,152(sp)
    a31c:	d8002415 	stw	zero,144(sp)
    a320:	d8802815 	stw	r2,160(sp)
    a324:	a82d883a 	mov	r22,r21
    a328:	b0800007 	ldb	r2,0(r22)
    a32c:	10040d26 	beq	r2,zero,b364 <___vfiprintf_internal_r+0x110c>
    a330:	00c00944 	movi	r3,37
    a334:	b029883a 	mov	r20,r22
    a338:	10c0021e 	bne	r2,r3,a344 <___vfiprintf_internal_r+0xec>
    a33c:	00001606 	br	a398 <___vfiprintf_internal_r+0x140>
    a340:	10c00326 	beq	r2,r3,a350 <___vfiprintf_internal_r+0xf8>
    a344:	a5000044 	addi	r20,r20,1
    a348:	a0800007 	ldb	r2,0(r20)
    a34c:	103ffc1e 	bne	r2,zero,a340 <__alt_exception_stack_pointer+0xf800a340>
    a350:	a5a1c83a 	sub	r16,r20,r22
    a354:	80001026 	beq	r16,zero,a398 <___vfiprintf_internal_r+0x140>
    a358:	d8c01c17 	ldw	r3,112(sp)
    a35c:	d8801b17 	ldw	r2,108(sp)
    a360:	45800015 	stw	r22,0(r8)
    a364:	80c7883a 	add	r3,r16,r3
    a368:	10800044 	addi	r2,r2,1
    a36c:	44000115 	stw	r16,4(r8)
    a370:	d8c01c15 	stw	r3,112(sp)
    a374:	d8801b15 	stw	r2,108(sp)
    a378:	010001c4 	movi	r4,7
    a37c:	2080750e 	bge	r4,r2,a554 <___vfiprintf_internal_r+0x2fc>
    a380:	1803951e 	bne	r3,zero,b1d8 <___vfiprintf_internal_r+0xf80>
    a384:	d8c02417 	ldw	r3,144(sp)
    a388:	d8001b15 	stw	zero,108(sp)
    a38c:	d811883a 	mov	r8,sp
    a390:	1c07883a 	add	r3,r3,r16
    a394:	d8c02415 	stw	r3,144(sp)
    a398:	a0800007 	ldb	r2,0(r20)
    a39c:	1002e026 	beq	r2,zero,af20 <___vfiprintf_internal_r+0xcc8>
    a3a0:	a5800044 	addi	r22,r20,1
    a3a4:	a0c00047 	ldb	r3,1(r20)
    a3a8:	d8001d85 	stb	zero,118(sp)
    a3ac:	0027883a 	mov	r19,zero
    a3b0:	d8002305 	stb	zero,140(sp)
    a3b4:	043fffc4 	movi	r16,-1
    a3b8:	d8002515 	stw	zero,148(sp)
    a3bc:	0023883a 	mov	r17,zero
    a3c0:	05001604 	movi	r20,88
    a3c4:	05400244 	movi	r21,9
    a3c8:	402f883a 	mov	r23,r8
    a3cc:	b5800044 	addi	r22,r22,1
    a3d0:	18bff804 	addi	r2,r3,-32
    a3d4:	a0827736 	bltu	r20,r2,adb4 <___vfiprintf_internal_r+0xb5c>
    a3d8:	100490ba 	slli	r2,r2,2
    a3dc:	01000074 	movhi	r4,1
    a3e0:	2128fc04 	addi	r4,r4,-23568
    a3e4:	1105883a 	add	r2,r2,r4
    a3e8:	10800017 	ldw	r2,0(r2)
    a3ec:	1000683a 	jmp	r2
    a3f0:	0000aab4 	movhi	zero,682
    a3f4:	0000adb4 	movhi	zero,694
    a3f8:	0000adb4 	movhi	zero,694
    a3fc:	0000aad0 	cmplti	zero,zero,683
    a400:	0000adb4 	movhi	zero,694
    a404:	0000adb4 	movhi	zero,694
    a408:	0000adb4 	movhi	zero,694
    a40c:	0000adb4 	movhi	zero,694
    a410:	0000adb4 	movhi	zero,694
    a414:	0000adb4 	movhi	zero,694
    a418:	0000acd8 	cmpnei	zero,zero,691
    a41c:	0000acfc 	xorhi	zero,zero,691
    a420:	0000adb4 	movhi	zero,694
    a424:	0000a5f4 	movhi	zero,663
    a428:	0000ad10 	cmplti	zero,zero,692
    a42c:	0000adb4 	movhi	zero,694
    a430:	0000aadc 	xori	zero,zero,683
    a434:	0000aae8 	cmpgeui	zero,zero,683
    a438:	0000aae8 	cmpgeui	zero,zero,683
    a43c:	0000aae8 	cmpgeui	zero,zero,683
    a440:	0000aae8 	cmpgeui	zero,zero,683
    a444:	0000aae8 	cmpgeui	zero,zero,683
    a448:	0000aae8 	cmpgeui	zero,zero,683
    a44c:	0000aae8 	cmpgeui	zero,zero,683
    a450:	0000aae8 	cmpgeui	zero,zero,683
    a454:	0000aae8 	cmpgeui	zero,zero,683
    a458:	0000adb4 	movhi	zero,694
    a45c:	0000adb4 	movhi	zero,694
    a460:	0000adb4 	movhi	zero,694
    a464:	0000adb4 	movhi	zero,694
    a468:	0000adb4 	movhi	zero,694
    a46c:	0000adb4 	movhi	zero,694
    a470:	0000adb4 	movhi	zero,694
    a474:	0000adb4 	movhi	zero,694
    a478:	0000adb4 	movhi	zero,694
    a47c:	0000adb4 	movhi	zero,694
    a480:	0000ab28 	cmpgeui	zero,zero,684
    a484:	0000adb4 	movhi	zero,694
    a488:	0000adb4 	movhi	zero,694
    a48c:	0000adb4 	movhi	zero,694
    a490:	0000adb4 	movhi	zero,694
    a494:	0000adb4 	movhi	zero,694
    a498:	0000adb4 	movhi	zero,694
    a49c:	0000adb4 	movhi	zero,694
    a4a0:	0000adb4 	movhi	zero,694
    a4a4:	0000adb4 	movhi	zero,694
    a4a8:	0000adb4 	movhi	zero,694
    a4ac:	0000ab64 	muli	zero,zero,685
    a4b0:	0000adb4 	movhi	zero,694
    a4b4:	0000adb4 	movhi	zero,694
    a4b8:	0000adb4 	movhi	zero,694
    a4bc:	0000adb4 	movhi	zero,694
    a4c0:	0000adb4 	movhi	zero,694
    a4c4:	0000abc0 	call	abc <init_keyboard+0x38c>
    a4c8:	0000adb4 	movhi	zero,694
    a4cc:	0000adb4 	movhi	zero,694
    a4d0:	0000ac34 	movhi	zero,688
    a4d4:	0000adb4 	movhi	zero,694
    a4d8:	0000adb4 	movhi	zero,694
    a4dc:	0000adb4 	movhi	zero,694
    a4e0:	0000adb4 	movhi	zero,694
    a4e4:	0000adb4 	movhi	zero,694
    a4e8:	0000adb4 	movhi	zero,694
    a4ec:	0000adb4 	movhi	zero,694
    a4f0:	0000adb4 	movhi	zero,694
    a4f4:	0000adb4 	movhi	zero,694
    a4f8:	0000adb4 	movhi	zero,694
    a4fc:	0000a9dc 	xori	zero,zero,679
    a500:	0000aa0c 	andi	zero,zero,680
    a504:	0000adb4 	movhi	zero,694
    a508:	0000adb4 	movhi	zero,694
    a50c:	0000adb4 	movhi	zero,694
    a510:	0000ad5c 	xori	zero,zero,693
    a514:	0000aa0c 	andi	zero,zero,680
    a518:	0000adb4 	movhi	zero,694
    a51c:	0000adb4 	movhi	zero,694
    a520:	0000a8b4 	movhi	zero,674
    a524:	0000adb4 	movhi	zero,694
    a528:	0000a8c8 	cmpgei	zero,zero,675
    a52c:	0000a900 	call	a90 <init_keyboard+0x360>
    a530:	0000a600 	call	a60 <init_keyboard+0x330>
    a534:	0000a8a8 	cmpgeui	zero,zero,674
    a538:	0000adb4 	movhi	zero,694
    a53c:	0000ac74 	movhi	zero,689
    a540:	0000adb4 	movhi	zero,694
    a544:	0000acc0 	call	acc <init_keyboard+0x39c>
    a548:	0000adb4 	movhi	zero,694
    a54c:	0000adb4 	movhi	zero,694
    a550:	0000a984 	movi	zero,678
    a554:	42000204 	addi	r8,r8,8
    a558:	d8c02417 	ldw	r3,144(sp)
    a55c:	1c07883a 	add	r3,r3,r16
    a560:	d8c02415 	stw	r3,144(sp)
    a564:	003f8c06 	br	a398 <__alt_exception_stack_pointer+0xf800a398>
    a568:	d9402017 	ldw	r5,128(sp)
    a56c:	d9002117 	ldw	r4,132(sp)
    a570:	00056740 	call	5674 <__swsetup_r>
    a574:	1003c11e 	bne	r2,zero,b47c <___vfiprintf_internal_r+0x1224>
    a578:	d9402017 	ldw	r5,128(sp)
    a57c:	00c00284 	movi	r3,10
    a580:	2880030b 	ldhu	r2,12(r5)
    a584:	1080068c 	andi	r2,r2,26
    a588:	10ff581e 	bne	r2,r3,a2ec <__alt_exception_stack_pointer+0xf800a2ec>
    a58c:	d8c02017 	ldw	r3,128(sp)
    a590:	1880038f 	ldh	r2,14(r3)
    a594:	103f5516 	blt	r2,zero,a2ec <__alt_exception_stack_pointer+0xf800a2ec>
    a598:	d9c02217 	ldw	r7,136(sp)
    a59c:	d9002117 	ldw	r4,132(sp)
    a5a0:	a80d883a 	mov	r6,r21
    a5a4:	180b883a 	mov	r5,r3
    a5a8:	000b7800 	call	b780 <__sbprintf>
    a5ac:	dfc03517 	ldw	ra,212(sp)
    a5b0:	df003417 	ldw	fp,208(sp)
    a5b4:	ddc03317 	ldw	r23,204(sp)
    a5b8:	dd803217 	ldw	r22,200(sp)
    a5bc:	dd403117 	ldw	r21,196(sp)
    a5c0:	dd003017 	ldw	r20,192(sp)
    a5c4:	dcc02f17 	ldw	r19,188(sp)
    a5c8:	dc802e17 	ldw	r18,184(sp)
    a5cc:	dc402d17 	ldw	r17,180(sp)
    a5d0:	dc002c17 	ldw	r16,176(sp)
    a5d4:	dec03604 	addi	sp,sp,216
    a5d8:	f800283a 	ret
    a5dc:	00076800 	call	7680 <__sinit>
    a5e0:	003f2f06 	br	a2a0 <__alt_exception_stack_pointer+0xf800a2a0>
    a5e4:	d8c02517 	ldw	r3,148(sp)
    a5e8:	d8802215 	stw	r2,136(sp)
    a5ec:	00c7c83a 	sub	r3,zero,r3
    a5f0:	d8c02515 	stw	r3,148(sp)
    a5f4:	8c400114 	ori	r17,r17,4
    a5f8:	b0c00007 	ldb	r3,0(r22)
    a5fc:	003f7306 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a600:	00800c04 	movi	r2,48
    a604:	d9402217 	ldw	r5,136(sp)
    a608:	d8801d05 	stb	r2,116(sp)
    a60c:	00801e04 	movi	r2,120
    a610:	d8801d45 	stb	r2,117(sp)
    a614:	d8001d85 	stb	zero,118(sp)
    a618:	b811883a 	mov	r8,r23
    a61c:	28c00104 	addi	r3,r5,4
    a620:	2cc00017 	ldw	r19,0(r5)
    a624:	0029883a 	mov	r20,zero
    a628:	88800094 	ori	r2,r17,2
    a62c:	80032516 	blt	r16,zero,b2c4 <___vfiprintf_internal_r+0x106c>
    a630:	00bfdfc4 	movi	r2,-129
    a634:	88a2703a 	and	r17,r17,r2
    a638:	d8c02215 	stw	r3,136(sp)
    a63c:	8c400094 	ori	r17,r17,2
    a640:	98032a1e 	bne	r19,zero,b2ec <___vfiprintf_internal_r+0x1094>
    a644:	00800074 	movhi	r2,1
    a648:	108a7f04 	addi	r2,r2,10748
    a64c:	d8802615 	stw	r2,152(sp)
    a650:	002b883a 	mov	r21,zero
    a654:	8001741e 	bne	r16,zero,ac28 <___vfiprintf_internal_r+0x9d0>
    a658:	0021883a 	mov	r16,zero
    a65c:	0029883a 	mov	r20,zero
    a660:	ddc01a04 	addi	r23,sp,104
    a664:	8027883a 	mov	r19,r16
    a668:	8500010e 	bge	r16,r20,a670 <___vfiprintf_internal_r+0x418>
    a66c:	a027883a 	mov	r19,r20
    a670:	ad403fcc 	andi	r21,r21,255
    a674:	ad40201c 	xori	r21,r21,128
    a678:	ad7fe004 	addi	r21,r21,-128
    a67c:	a8000126 	beq	r21,zero,a684 <___vfiprintf_internal_r+0x42c>
    a680:	9cc00044 	addi	r19,r19,1
    a684:	89c0008c 	andi	r7,r17,2
    a688:	38000126 	beq	r7,zero,a690 <___vfiprintf_internal_r+0x438>
    a68c:	9cc00084 	addi	r19,r19,2
    a690:	88c0210c 	andi	r3,r17,132
    a694:	1801dd1e 	bne	r3,zero,ae0c <___vfiprintf_internal_r+0xbb4>
    a698:	d9402517 	ldw	r5,148(sp)
    a69c:	2cebc83a 	sub	r21,r5,r19
    a6a0:	0541da0e 	bge	zero,r21,ae0c <___vfiprintf_internal_r+0xbb4>
    a6a4:	07000404 	movi	fp,16
    a6a8:	d8801c17 	ldw	r2,112(sp)
    a6ac:	e543be0e 	bge	fp,r21,b5a8 <___vfiprintf_internal_r+0x1350>
    a6b0:	01400074 	movhi	r5,1
    a6b4:	294ae304 	addi	r5,r5,11148
    a6b8:	dc002715 	stw	r16,156(sp)
    a6bc:	d9801b17 	ldw	r6,108(sp)
    a6c0:	a821883a 	mov	r16,r21
    a6c4:	d9402315 	stw	r5,140(sp)
    a6c8:	028001c4 	movi	r10,7
    a6cc:	d9c02915 	stw	r7,164(sp)
    a6d0:	182b883a 	mov	r21,r3
    a6d4:	00000506 	br	a6ec <___vfiprintf_internal_r+0x494>
    a6d8:	31000084 	addi	r4,r6,2
    a6dc:	42000204 	addi	r8,r8,8
    a6e0:	180d883a 	mov	r6,r3
    a6e4:	843ffc04 	addi	r16,r16,-16
    a6e8:	e4000f0e 	bge	fp,r16,a728 <___vfiprintf_internal_r+0x4d0>
    a6ec:	01000074 	movhi	r4,1
    a6f0:	10800404 	addi	r2,r2,16
    a6f4:	30c00044 	addi	r3,r6,1
    a6f8:	210ae304 	addi	r4,r4,11148
    a6fc:	41000015 	stw	r4,0(r8)
    a700:	47000115 	stw	fp,4(r8)
    a704:	d8801c15 	stw	r2,112(sp)
    a708:	d8c01b15 	stw	r3,108(sp)
    a70c:	50fff20e 	bge	r10,r3,a6d8 <__alt_exception_stack_pointer+0xf800a6d8>
    a710:	1001b21e 	bne	r2,zero,addc <___vfiprintf_internal_r+0xb84>
    a714:	843ffc04 	addi	r16,r16,-16
    a718:	000d883a 	mov	r6,zero
    a71c:	01000044 	movi	r4,1
    a720:	d811883a 	mov	r8,sp
    a724:	e43ff116 	blt	fp,r16,a6ec <__alt_exception_stack_pointer+0xf800a6ec>
    a728:	a807883a 	mov	r3,r21
    a72c:	d9c02917 	ldw	r7,164(sp)
    a730:	802b883a 	mov	r21,r16
    a734:	dc002717 	ldw	r16,156(sp)
    a738:	d9402317 	ldw	r5,140(sp)
    a73c:	a885883a 	add	r2,r21,r2
    a740:	45400115 	stw	r21,4(r8)
    a744:	41400015 	stw	r5,0(r8)
    a748:	d8801c15 	stw	r2,112(sp)
    a74c:	d9001b15 	stw	r4,108(sp)
    a750:	014001c4 	movi	r5,7
    a754:	29026216 	blt	r5,r4,b0e0 <___vfiprintf_internal_r+0xe88>
    a758:	d9801d87 	ldb	r6,118(sp)
    a75c:	42000204 	addi	r8,r8,8
    a760:	21400044 	addi	r5,r4,1
    a764:	3001ae1e 	bne	r6,zero,ae20 <___vfiprintf_internal_r+0xbc8>
    a768:	3801bb26 	beq	r7,zero,ae58 <___vfiprintf_internal_r+0xc00>
    a76c:	d9001d04 	addi	r4,sp,116
    a770:	10800084 	addi	r2,r2,2
    a774:	41000015 	stw	r4,0(r8)
    a778:	01000084 	movi	r4,2
    a77c:	41000115 	stw	r4,4(r8)
    a780:	d8801c15 	stw	r2,112(sp)
    a784:	d9401b15 	stw	r5,108(sp)
    a788:	010001c4 	movi	r4,7
    a78c:	2142680e 	bge	r4,r5,b130 <___vfiprintf_internal_r+0xed8>
    a790:	1002b11e 	bne	r2,zero,b258 <___vfiprintf_internal_r+0x1000>
    a794:	01802004 	movi	r6,128
    a798:	01400044 	movi	r5,1
    a79c:	0009883a 	mov	r4,zero
    a7a0:	d811883a 	mov	r8,sp
    a7a4:	1981ae1e 	bne	r3,r6,ae60 <___vfiprintf_internal_r+0xc08>
    a7a8:	d8c02517 	ldw	r3,148(sp)
    a7ac:	1cf9c83a 	sub	fp,r3,r19
    a7b0:	0701ab0e 	bge	zero,fp,ae60 <___vfiprintf_internal_r+0xc08>
    a7b4:	05400404 	movi	r21,16
    a7b8:	af03a90e 	bge	r21,fp,b660 <___vfiprintf_internal_r+0x1408>
    a7bc:	01400074 	movhi	r5,1
    a7c0:	294adf04 	addi	r5,r5,11132
    a7c4:	d9402315 	stw	r5,140(sp)
    a7c8:	01c001c4 	movi	r7,7
    a7cc:	00000506 	br	a7e4 <___vfiprintf_internal_r+0x58c>
    a7d0:	21800084 	addi	r6,r4,2
    a7d4:	42000204 	addi	r8,r8,8
    a7d8:	1809883a 	mov	r4,r3
    a7dc:	e73ffc04 	addi	fp,fp,-16
    a7e0:	af000d0e 	bge	r21,fp,a818 <___vfiprintf_internal_r+0x5c0>
    a7e4:	10800404 	addi	r2,r2,16
    a7e8:	20c00044 	addi	r3,r4,1
    a7ec:	44800015 	stw	r18,0(r8)
    a7f0:	45400115 	stw	r21,4(r8)
    a7f4:	d8801c15 	stw	r2,112(sp)
    a7f8:	d8c01b15 	stw	r3,108(sp)
    a7fc:	38fff40e 	bge	r7,r3,a7d0 <__alt_exception_stack_pointer+0xf800a7d0>
    a800:	10022b1e 	bne	r2,zero,b0b0 <___vfiprintf_internal_r+0xe58>
    a804:	e73ffc04 	addi	fp,fp,-16
    a808:	01800044 	movi	r6,1
    a80c:	0009883a 	mov	r4,zero
    a810:	d811883a 	mov	r8,sp
    a814:	af3ff316 	blt	r21,fp,a7e4 <__alt_exception_stack_pointer+0xf800a7e4>
    a818:	d8c02317 	ldw	r3,140(sp)
    a81c:	1705883a 	add	r2,r2,fp
    a820:	47000115 	stw	fp,4(r8)
    a824:	40c00015 	stw	r3,0(r8)
    a828:	d8801c15 	stw	r2,112(sp)
    a82c:	d9801b15 	stw	r6,108(sp)
    a830:	00c001c4 	movi	r3,7
    a834:	19829416 	blt	r3,r6,b288 <___vfiprintf_internal_r+0x1030>
    a838:	8521c83a 	sub	r16,r16,r20
    a83c:	42000204 	addi	r8,r8,8
    a840:	31400044 	addi	r5,r6,1
    a844:	3009883a 	mov	r4,r6
    a848:	04018716 	blt	zero,r16,ae68 <___vfiprintf_internal_r+0xc10>
    a84c:	a085883a 	add	r2,r20,r2
    a850:	45c00015 	stw	r23,0(r8)
    a854:	45000115 	stw	r20,4(r8)
    a858:	d8801c15 	stw	r2,112(sp)
    a85c:	d9401b15 	stw	r5,108(sp)
    a860:	00c001c4 	movi	r3,7
    a864:	1941c20e 	bge	r3,r5,af70 <___vfiprintf_internal_r+0xd18>
    a868:	1002531e 	bne	r2,zero,b1b8 <___vfiprintf_internal_r+0xf60>
    a86c:	d8001b15 	stw	zero,108(sp)
    a870:	8c40010c 	andi	r17,r17,4
    a874:	88023226 	beq	r17,zero,b140 <___vfiprintf_internal_r+0xee8>
    a878:	d9002517 	ldw	r4,148(sp)
    a87c:	24e3c83a 	sub	r17,r4,r19
    a880:	04432916 	blt	zero,r17,b528 <___vfiprintf_internal_r+0x12d0>
    a884:	d8802517 	ldw	r2,148(sp)
    a888:	14c0010e 	bge	r2,r19,a890 <___vfiprintf_internal_r+0x638>
    a88c:	9805883a 	mov	r2,r19
    a890:	d8c02417 	ldw	r3,144(sp)
    a894:	1887883a 	add	r3,r3,r2
    a898:	d8c02415 	stw	r3,144(sp)
    a89c:	d8001b15 	stw	zero,108(sp)
    a8a0:	d811883a 	mov	r8,sp
    a8a4:	003ea006 	br	a328 <__alt_exception_stack_pointer+0xf800a328>
    a8a8:	8c400814 	ori	r17,r17,32
    a8ac:	b0c00007 	ldb	r3,0(r22)
    a8b0:	003ec606 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a8b4:	b0c00007 	ldb	r3,0(r22)
    a8b8:	00801b04 	movi	r2,108
    a8bc:	18832026 	beq	r3,r2,b540 <___vfiprintf_internal_r+0x12e8>
    a8c0:	8c400414 	ori	r17,r17,16
    a8c4:	003ec106 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a8c8:	9cc03fcc 	andi	r19,r19,255
    a8cc:	b811883a 	mov	r8,r23
    a8d0:	9803981e 	bne	r19,zero,b734 <___vfiprintf_internal_r+0x14dc>
    a8d4:	8880080c 	andi	r2,r17,32
    a8d8:	1002be26 	beq	r2,zero,b3d4 <___vfiprintf_internal_r+0x117c>
    a8dc:	d9002217 	ldw	r4,136(sp)
    a8e0:	d9402417 	ldw	r5,144(sp)
    a8e4:	20800017 	ldw	r2,0(r4)
    a8e8:	2807d7fa 	srai	r3,r5,31
    a8ec:	21000104 	addi	r4,r4,4
    a8f0:	d9002215 	stw	r4,136(sp)
    a8f4:	11400015 	stw	r5,0(r2)
    a8f8:	10c00115 	stw	r3,4(r2)
    a8fc:	003e8a06 	br	a328 <__alt_exception_stack_pointer+0xf800a328>
    a900:	9cc03fcc 	andi	r19,r19,255
    a904:	b811883a 	mov	r8,r23
    a908:	9803871e 	bne	r19,zero,b728 <___vfiprintf_internal_r+0x14d0>
    a90c:	8880080c 	andi	r2,r17,32
    a910:	10009a26 	beq	r2,zero,ab7c <___vfiprintf_internal_r+0x924>
    a914:	d9002217 	ldw	r4,136(sp)
    a918:	d8001d85 	stb	zero,118(sp)
    a91c:	20800204 	addi	r2,r4,8
    a920:	24c00017 	ldw	r19,0(r4)
    a924:	25000117 	ldw	r20,4(r4)
    a928:	8002a416 	blt	r16,zero,b3bc <___vfiprintf_internal_r+0x1164>
    a92c:	013fdfc4 	movi	r4,-129
    a930:	9d06b03a 	or	r3,r19,r20
    a934:	d8802215 	stw	r2,136(sp)
    a938:	8922703a 	and	r17,r17,r4
    a93c:	18009b26 	beq	r3,zero,abac <___vfiprintf_internal_r+0x954>
    a940:	002b883a 	mov	r21,zero
    a944:	ddc01a04 	addi	r23,sp,104
    a948:	9806d0fa 	srli	r3,r19,3
    a94c:	a008977a 	slli	r4,r20,29
    a950:	a028d0fa 	srli	r20,r20,3
    a954:	9cc001cc 	andi	r19,r19,7
    a958:	98800c04 	addi	r2,r19,48
    a95c:	bdffffc4 	addi	r23,r23,-1
    a960:	20e6b03a 	or	r19,r4,r3
    a964:	b8800005 	stb	r2,0(r23)
    a968:	9d06b03a 	or	r3,r19,r20
    a96c:	183ff61e 	bne	r3,zero,a948 <__alt_exception_stack_pointer+0xf800a948>
    a970:	88c0004c 	andi	r3,r17,1
    a974:	18021f1e 	bne	r3,zero,b1f4 <___vfiprintf_internal_r+0xf9c>
    a978:	d9401e17 	ldw	r5,120(sp)
    a97c:	2de9c83a 	sub	r20,r5,r23
    a980:	003f3806 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    a984:	9cc03fcc 	andi	r19,r19,255
    a988:	b811883a 	mov	r8,r23
    a98c:	98034f1e 	bne	r19,zero,b6cc <___vfiprintf_internal_r+0x1474>
    a990:	00800074 	movhi	r2,1
    a994:	108a7f04 	addi	r2,r2,10748
    a998:	d8802615 	stw	r2,152(sp)
    a99c:	8880080c 	andi	r2,r17,32
    a9a0:	1000ac26 	beq	r2,zero,ac54 <___vfiprintf_internal_r+0x9fc>
    a9a4:	d9002217 	ldw	r4,136(sp)
    a9a8:	24c00017 	ldw	r19,0(r4)
    a9ac:	25000117 	ldw	r20,4(r4)
    a9b0:	21000204 	addi	r4,r4,8
    a9b4:	d9002215 	stw	r4,136(sp)
    a9b8:	8880004c 	andi	r2,r17,1
    a9bc:	1001e726 	beq	r2,zero,b15c <___vfiprintf_internal_r+0xf04>
    a9c0:	9d04b03a 	or	r2,r19,r20
    a9c4:	10025c1e 	bne	r2,zero,b338 <___vfiprintf_internal_r+0x10e0>
    a9c8:	d8001d85 	stb	zero,118(sp)
    a9cc:	80024416 	blt	r16,zero,b2e0 <___vfiprintf_internal_r+0x1088>
    a9d0:	00bfdfc4 	movi	r2,-129
    a9d4:	88a2703a 	and	r17,r17,r2
    a9d8:	003f1d06 	br	a650 <__alt_exception_stack_pointer+0xf800a650>
    a9dc:	d8c02217 	ldw	r3,136(sp)
    a9e0:	04c00044 	movi	r19,1
    a9e4:	b811883a 	mov	r8,r23
    a9e8:	18800017 	ldw	r2,0(r3)
    a9ec:	18c00104 	addi	r3,r3,4
    a9f0:	d8001d85 	stb	zero,118(sp)
    a9f4:	d8801005 	stb	r2,64(sp)
    a9f8:	d8c02215 	stw	r3,136(sp)
    a9fc:	9829883a 	mov	r20,r19
    aa00:	ddc01004 	addi	r23,sp,64
    aa04:	0021883a 	mov	r16,zero
    aa08:	003f1e06 	br	a684 <__alt_exception_stack_pointer+0xf800a684>
    aa0c:	9cc03fcc 	andi	r19,r19,255
    aa10:	b811883a 	mov	r8,r23
    aa14:	9803331e 	bne	r19,zero,b6e4 <___vfiprintf_internal_r+0x148c>
    aa18:	8880080c 	andi	r2,r17,32
    aa1c:	10004826 	beq	r2,zero,ab40 <___vfiprintf_internal_r+0x8e8>
    aa20:	d9002217 	ldw	r4,136(sp)
    aa24:	20800117 	ldw	r2,4(r4)
    aa28:	24c00017 	ldw	r19,0(r4)
    aa2c:	21000204 	addi	r4,r4,8
    aa30:	d9002215 	stw	r4,136(sp)
    aa34:	1029883a 	mov	r20,r2
    aa38:	10024c16 	blt	r2,zero,b36c <___vfiprintf_internal_r+0x1114>
    aa3c:	dd401d83 	ldbu	r21,118(sp)
    aa40:	80007116 	blt	r16,zero,ac08 <___vfiprintf_internal_r+0x9b0>
    aa44:	00ffdfc4 	movi	r3,-129
    aa48:	9d04b03a 	or	r2,r19,r20
    aa4c:	88e2703a 	and	r17,r17,r3
    aa50:	1000d126 	beq	r2,zero,ad98 <___vfiprintf_internal_r+0xb40>
    aa54:	a0023526 	beq	r20,zero,b32c <___vfiprintf_internal_r+0x10d4>
    aa58:	ddc01a04 	addi	r23,sp,104
    aa5c:	4039883a 	mov	fp,r8
    aa60:	9809883a 	mov	r4,r19
    aa64:	a00b883a 	mov	r5,r20
    aa68:	01800284 	movi	r6,10
    aa6c:	000f883a 	mov	r7,zero
    aa70:	000c7840 	call	c784 <__umoddi3>
    aa74:	10800c04 	addi	r2,r2,48
    aa78:	bdffffc4 	addi	r23,r23,-1
    aa7c:	9809883a 	mov	r4,r19
    aa80:	a00b883a 	mov	r5,r20
    aa84:	b8800005 	stb	r2,0(r23)
    aa88:	01800284 	movi	r6,10
    aa8c:	000f883a 	mov	r7,zero
    aa90:	000c1880 	call	c188 <__udivdi3>
    aa94:	1027883a 	mov	r19,r2
    aa98:	10c4b03a 	or	r2,r2,r3
    aa9c:	1829883a 	mov	r20,r3
    aaa0:	103fef1e 	bne	r2,zero,aa60 <__alt_exception_stack_pointer+0xf800aa60>
    aaa4:	d9001e17 	ldw	r4,120(sp)
    aaa8:	e011883a 	mov	r8,fp
    aaac:	25e9c83a 	sub	r20,r4,r23
    aab0:	003eec06 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    aab4:	d8802307 	ldb	r2,140(sp)
    aab8:	1002361e 	bne	r2,zero,b394 <___vfiprintf_internal_r+0x113c>
    aabc:	00c00804 	movi	r3,32
    aac0:	d8c02305 	stb	r3,140(sp)
    aac4:	04c00044 	movi	r19,1
    aac8:	b0c00007 	ldb	r3,0(r22)
    aacc:	003e3f06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    aad0:	8c400054 	ori	r17,r17,1
    aad4:	b0c00007 	ldb	r3,0(r22)
    aad8:	003e3c06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    aadc:	8c402014 	ori	r17,r17,128
    aae0:	b0c00007 	ldb	r3,0(r22)
    aae4:	003e3906 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    aae8:	dc002715 	stw	r16,156(sp)
    aaec:	d8002515 	stw	zero,148(sp)
    aaf0:	1f3ff404 	addi	fp,r3,-48
    aaf4:	0009883a 	mov	r4,zero
    aaf8:	b021883a 	mov	r16,r22
    aafc:	01400284 	movi	r5,10
    ab00:	000cefc0 	call	cefc <__mulsi3>
    ab04:	80c00007 	ldb	r3,0(r16)
    ab08:	e089883a 	add	r4,fp,r2
    ab0c:	b5800044 	addi	r22,r22,1
    ab10:	1f3ff404 	addi	fp,r3,-48
    ab14:	b021883a 	mov	r16,r22
    ab18:	af3ff82e 	bgeu	r21,fp,aafc <__alt_exception_stack_pointer+0xf800aafc>
    ab1c:	d9002515 	stw	r4,148(sp)
    ab20:	dc002717 	ldw	r16,156(sp)
    ab24:	003e2a06 	br	a3d0 <__alt_exception_stack_pointer+0xf800a3d0>
    ab28:	9cc03fcc 	andi	r19,r19,255
    ab2c:	b811883a 	mov	r8,r23
    ab30:	9802e91e 	bne	r19,zero,b6d8 <___vfiprintf_internal_r+0x1480>
    ab34:	8c400414 	ori	r17,r17,16
    ab38:	8880080c 	andi	r2,r17,32
    ab3c:	103fb81e 	bne	r2,zero,aa20 <__alt_exception_stack_pointer+0xf800aa20>
    ab40:	8880040c 	andi	r2,r17,16
    ab44:	10022e26 	beq	r2,zero,b400 <___vfiprintf_internal_r+0x11a8>
    ab48:	d9402217 	ldw	r5,136(sp)
    ab4c:	2cc00017 	ldw	r19,0(r5)
    ab50:	29400104 	addi	r5,r5,4
    ab54:	d9402215 	stw	r5,136(sp)
    ab58:	9829d7fa 	srai	r20,r19,31
    ab5c:	a005883a 	mov	r2,r20
    ab60:	003fb506 	br	aa38 <__alt_exception_stack_pointer+0xf800aa38>
    ab64:	9cc03fcc 	andi	r19,r19,255
    ab68:	b811883a 	mov	r8,r23
    ab6c:	9802fa1e 	bne	r19,zero,b758 <___vfiprintf_internal_r+0x1500>
    ab70:	8c400414 	ori	r17,r17,16
    ab74:	8880080c 	andi	r2,r17,32
    ab78:	103f661e 	bne	r2,zero,a914 <__alt_exception_stack_pointer+0xf800a914>
    ab7c:	8880040c 	andi	r2,r17,16
    ab80:	10020626 	beq	r2,zero,b39c <___vfiprintf_internal_r+0x1144>
    ab84:	d9402217 	ldw	r5,136(sp)
    ab88:	d8001d85 	stb	zero,118(sp)
    ab8c:	0029883a 	mov	r20,zero
    ab90:	28800104 	addi	r2,r5,4
    ab94:	2cc00017 	ldw	r19,0(r5)
    ab98:	80020816 	blt	r16,zero,b3bc <___vfiprintf_internal_r+0x1164>
    ab9c:	00ffdfc4 	movi	r3,-129
    aba0:	d8802215 	stw	r2,136(sp)
    aba4:	88e2703a 	and	r17,r17,r3
    aba8:	983f651e 	bne	r19,zero,a940 <__alt_exception_stack_pointer+0xf800a940>
    abac:	002b883a 	mov	r21,zero
    abb0:	8002cf26 	beq	r16,zero,b6f0 <___vfiprintf_internal_r+0x1498>
    abb4:	0027883a 	mov	r19,zero
    abb8:	0029883a 	mov	r20,zero
    abbc:	003f6106 	br	a944 <__alt_exception_stack_pointer+0xf800a944>
    abc0:	9cc03fcc 	andi	r19,r19,255
    abc4:	b811883a 	mov	r8,r23
    abc8:	9802e01e 	bne	r19,zero,b74c <___vfiprintf_internal_r+0x14f4>
    abcc:	8c400414 	ori	r17,r17,16
    abd0:	8880080c 	andi	r2,r17,32
    abd4:	1000641e 	bne	r2,zero,ad68 <___vfiprintf_internal_r+0xb10>
    abd8:	8880040c 	andi	r2,r17,16
    abdc:	1001c81e 	bne	r2,zero,b300 <___vfiprintf_internal_r+0x10a8>
    abe0:	8880100c 	andi	r2,r17,64
    abe4:	d8001d85 	stb	zero,118(sp)
    abe8:	1002281e 	bne	r2,zero,b48c <___vfiprintf_internal_r+0x1234>
    abec:	d9002217 	ldw	r4,136(sp)
    abf0:	0029883a 	mov	r20,zero
    abf4:	20800104 	addi	r2,r4,4
    abf8:	24c00017 	ldw	r19,0(r4)
    abfc:	8001c60e 	bge	r16,zero,b318 <___vfiprintf_internal_r+0x10c0>
    ac00:	d8802215 	stw	r2,136(sp)
    ac04:	002b883a 	mov	r21,zero
    ac08:	9d04b03a 	or	r2,r19,r20
    ac0c:	103f911e 	bne	r2,zero,aa54 <__alt_exception_stack_pointer+0xf800aa54>
    ac10:	00800044 	movi	r2,1
    ac14:	10803fcc 	andi	r2,r2,255
    ac18:	00c00044 	movi	r3,1
    ac1c:	10c05f26 	beq	r2,r3,ad9c <___vfiprintf_internal_r+0xb44>
    ac20:	00c00084 	movi	r3,2
    ac24:	10ffe31e 	bne	r2,r3,abb4 <__alt_exception_stack_pointer+0xf800abb4>
    ac28:	0027883a 	mov	r19,zero
    ac2c:	0029883a 	mov	r20,zero
    ac30:	00015106 	br	b178 <___vfiprintf_internal_r+0xf20>
    ac34:	9cc03fcc 	andi	r19,r19,255
    ac38:	b811883a 	mov	r8,r23
    ac3c:	9802c01e 	bne	r19,zero,b740 <___vfiprintf_internal_r+0x14e8>
    ac40:	01400074 	movhi	r5,1
    ac44:	294a7a04 	addi	r5,r5,10728
    ac48:	d9402615 	stw	r5,152(sp)
    ac4c:	8880080c 	andi	r2,r17,32
    ac50:	103f541e 	bne	r2,zero,a9a4 <__alt_exception_stack_pointer+0xf800a9a4>
    ac54:	8880040c 	andi	r2,r17,16
    ac58:	1001f226 	beq	r2,zero,b424 <___vfiprintf_internal_r+0x11cc>
    ac5c:	d9402217 	ldw	r5,136(sp)
    ac60:	0029883a 	mov	r20,zero
    ac64:	2cc00017 	ldw	r19,0(r5)
    ac68:	29400104 	addi	r5,r5,4
    ac6c:	d9402215 	stw	r5,136(sp)
    ac70:	003f5106 	br	a9b8 <__alt_exception_stack_pointer+0xf800a9b8>
    ac74:	d8c02217 	ldw	r3,136(sp)
    ac78:	b811883a 	mov	r8,r23
    ac7c:	d8001d85 	stb	zero,118(sp)
    ac80:	1dc00017 	ldw	r23,0(r3)
    ac84:	1f000104 	addi	fp,r3,4
    ac88:	b8025926 	beq	r23,zero,b5f0 <___vfiprintf_internal_r+0x1398>
    ac8c:	80023316 	blt	r16,zero,b55c <___vfiprintf_internal_r+0x1304>
    ac90:	800d883a 	mov	r6,r16
    ac94:	000b883a 	mov	r5,zero
    ac98:	b809883a 	mov	r4,r23
    ac9c:	da002a15 	stw	r8,168(sp)
    aca0:	00083ec0 	call	83ec <memchr>
    aca4:	da002a17 	ldw	r8,168(sp)
    aca8:	10026826 	beq	r2,zero,b64c <___vfiprintf_internal_r+0x13f4>
    acac:	15e9c83a 	sub	r20,r2,r23
    acb0:	dd401d83 	ldbu	r21,118(sp)
    acb4:	df002215 	stw	fp,136(sp)
    acb8:	0021883a 	mov	r16,zero
    acbc:	003e6906 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    acc0:	9cc03fcc 	andi	r19,r19,255
    acc4:	b811883a 	mov	r8,r23
    acc8:	983fc126 	beq	r19,zero,abd0 <__alt_exception_stack_pointer+0xf800abd0>
    accc:	d8c02303 	ldbu	r3,140(sp)
    acd0:	d8c01d85 	stb	r3,118(sp)
    acd4:	003fbe06 	br	abd0 <__alt_exception_stack_pointer+0xf800abd0>
    acd8:	d9002217 	ldw	r4,136(sp)
    acdc:	d9402217 	ldw	r5,136(sp)
    ace0:	21000017 	ldw	r4,0(r4)
    ace4:	28800104 	addi	r2,r5,4
    ace8:	d9002515 	stw	r4,148(sp)
    acec:	203e3d16 	blt	r4,zero,a5e4 <__alt_exception_stack_pointer+0xf800a5e4>
    acf0:	d8802215 	stw	r2,136(sp)
    acf4:	b0c00007 	ldb	r3,0(r22)
    acf8:	003db406 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    acfc:	00c00ac4 	movi	r3,43
    ad00:	d8c02305 	stb	r3,140(sp)
    ad04:	04c00044 	movi	r19,1
    ad08:	b0c00007 	ldb	r3,0(r22)
    ad0c:	003daf06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    ad10:	b0c00007 	ldb	r3,0(r22)
    ad14:	01000a84 	movi	r4,42
    ad18:	b4000044 	addi	r16,r22,1
    ad1c:	19025e26 	beq	r3,r4,b698 <___vfiprintf_internal_r+0x1440>
    ad20:	1f3ff404 	addi	fp,r3,-48
    ad24:	0009883a 	mov	r4,zero
    ad28:	af025236 	bltu	r21,fp,b674 <___vfiprintf_internal_r+0x141c>
    ad2c:	01400284 	movi	r5,10
    ad30:	000cefc0 	call	cefc <__mulsi3>
    ad34:	80c00007 	ldb	r3,0(r16)
    ad38:	1709883a 	add	r4,r2,fp
    ad3c:	85800044 	addi	r22,r16,1
    ad40:	1f3ff404 	addi	fp,r3,-48
    ad44:	b021883a 	mov	r16,r22
    ad48:	af3ff82e 	bgeu	r21,fp,ad2c <__alt_exception_stack_pointer+0xf800ad2c>
    ad4c:	2021883a 	mov	r16,r4
    ad50:	203d9f0e 	bge	r4,zero,a3d0 <__alt_exception_stack_pointer+0xf800a3d0>
    ad54:	043fffc4 	movi	r16,-1
    ad58:	003d9d06 	br	a3d0 <__alt_exception_stack_pointer+0xf800a3d0>
    ad5c:	8c401014 	ori	r17,r17,64
    ad60:	b0c00007 	ldb	r3,0(r22)
    ad64:	003d9906 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    ad68:	d9002217 	ldw	r4,136(sp)
    ad6c:	d8001d85 	stb	zero,118(sp)
    ad70:	20c00204 	addi	r3,r4,8
    ad74:	24c00017 	ldw	r19,0(r4)
    ad78:	25000117 	ldw	r20,4(r4)
    ad7c:	8001e716 	blt	r16,zero,b51c <___vfiprintf_internal_r+0x12c4>
    ad80:	013fdfc4 	movi	r4,-129
    ad84:	9d04b03a 	or	r2,r19,r20
    ad88:	d8c02215 	stw	r3,136(sp)
    ad8c:	8922703a 	and	r17,r17,r4
    ad90:	002b883a 	mov	r21,zero
    ad94:	103f2f1e 	bne	r2,zero,aa54 <__alt_exception_stack_pointer+0xf800aa54>
    ad98:	803e2f26 	beq	r16,zero,a658 <__alt_exception_stack_pointer+0xf800a658>
    ad9c:	0027883a 	mov	r19,zero
    ada0:	9cc00c04 	addi	r19,r19,48
    ada4:	dcc019c5 	stb	r19,103(sp)
    ada8:	dd002817 	ldw	r20,160(sp)
    adac:	ddc019c4 	addi	r23,sp,103
    adb0:	003e2c06 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    adb4:	9cc03fcc 	andi	r19,r19,255
    adb8:	b811883a 	mov	r8,r23
    adbc:	9802571e 	bne	r19,zero,b71c <___vfiprintf_internal_r+0x14c4>
    adc0:	18005726 	beq	r3,zero,af20 <___vfiprintf_internal_r+0xcc8>
    adc4:	04c00044 	movi	r19,1
    adc8:	d8c01005 	stb	r3,64(sp)
    adcc:	d8001d85 	stb	zero,118(sp)
    add0:	9829883a 	mov	r20,r19
    add4:	ddc01004 	addi	r23,sp,64
    add8:	003f0a06 	br	aa04 <__alt_exception_stack_pointer+0xf800aa04>
    addc:	d9402017 	ldw	r5,128(sp)
    ade0:	d9002117 	ldw	r4,132(sp)
    ade4:	d9801a04 	addi	r6,sp,104
    ade8:	da802a15 	stw	r10,168(sp)
    adec:	000a1440 	call	a144 <__sprint_r.part.0>
    adf0:	da802a17 	ldw	r10,168(sp)
    adf4:	1000501e 	bne	r2,zero,af38 <___vfiprintf_internal_r+0xce0>
    adf8:	d9801b17 	ldw	r6,108(sp)
    adfc:	d8801c17 	ldw	r2,112(sp)
    ae00:	d811883a 	mov	r8,sp
    ae04:	31000044 	addi	r4,r6,1
    ae08:	003e3606 	br	a6e4 <__alt_exception_stack_pointer+0xf800a6e4>
    ae0c:	d9001b17 	ldw	r4,108(sp)
    ae10:	d8801c17 	ldw	r2,112(sp)
    ae14:	21400044 	addi	r5,r4,1
    ae18:	d9801d87 	ldb	r6,118(sp)
    ae1c:	303e5226 	beq	r6,zero,a768 <__alt_exception_stack_pointer+0xf800a768>
    ae20:	01800044 	movi	r6,1
    ae24:	d9001d84 	addi	r4,sp,118
    ae28:	1185883a 	add	r2,r2,r6
    ae2c:	41000015 	stw	r4,0(r8)
    ae30:	41800115 	stw	r6,4(r8)
    ae34:	d8801c15 	stw	r2,112(sp)
    ae38:	d9401b15 	stw	r5,108(sp)
    ae3c:	010001c4 	movi	r4,7
    ae40:	2140b00e 	bge	r4,r5,b104 <___vfiprintf_internal_r+0xeac>
    ae44:	1000f61e 	bne	r2,zero,b220 <___vfiprintf_internal_r+0xfc8>
    ae48:	3800b31e 	bne	r7,zero,b118 <___vfiprintf_internal_r+0xec0>
    ae4c:	0009883a 	mov	r4,zero
    ae50:	300b883a 	mov	r5,r6
    ae54:	d811883a 	mov	r8,sp
    ae58:	01802004 	movi	r6,128
    ae5c:	19be5226 	beq	r3,r6,a7a8 <__alt_exception_stack_pointer+0xf800a7a8>
    ae60:	8521c83a 	sub	r16,r16,r20
    ae64:	043e790e 	bge	zero,r16,a84c <__alt_exception_stack_pointer+0xf800a84c>
    ae68:	05400404 	movi	r21,16
    ae6c:	ac01b00e 	bge	r21,r16,b530 <___vfiprintf_internal_r+0x12d8>
    ae70:	01400074 	movhi	r5,1
    ae74:	294adf04 	addi	r5,r5,11132
    ae78:	d9402315 	stw	r5,140(sp)
    ae7c:	070001c4 	movi	fp,7
    ae80:	00000506 	br	ae98 <___vfiprintf_internal_r+0xc40>
    ae84:	21400084 	addi	r5,r4,2
    ae88:	42000204 	addi	r8,r8,8
    ae8c:	1809883a 	mov	r4,r3
    ae90:	843ffc04 	addi	r16,r16,-16
    ae94:	ac000d0e 	bge	r21,r16,aecc <___vfiprintf_internal_r+0xc74>
    ae98:	10800404 	addi	r2,r2,16
    ae9c:	20c00044 	addi	r3,r4,1
    aea0:	44800015 	stw	r18,0(r8)
    aea4:	45400115 	stw	r21,4(r8)
    aea8:	d8801c15 	stw	r2,112(sp)
    aeac:	d8c01b15 	stw	r3,108(sp)
    aeb0:	e0fff40e 	bge	fp,r3,ae84 <__alt_exception_stack_pointer+0xf800ae84>
    aeb4:	1000101e 	bne	r2,zero,aef8 <___vfiprintf_internal_r+0xca0>
    aeb8:	843ffc04 	addi	r16,r16,-16
    aebc:	01400044 	movi	r5,1
    aec0:	0009883a 	mov	r4,zero
    aec4:	d811883a 	mov	r8,sp
    aec8:	ac3ff316 	blt	r21,r16,ae98 <__alt_exception_stack_pointer+0xf800ae98>
    aecc:	d8c02317 	ldw	r3,140(sp)
    aed0:	1405883a 	add	r2,r2,r16
    aed4:	44000115 	stw	r16,4(r8)
    aed8:	40c00015 	stw	r3,0(r8)
    aedc:	d8801c15 	stw	r2,112(sp)
    aee0:	d9401b15 	stw	r5,108(sp)
    aee4:	00c001c4 	movi	r3,7
    aee8:	19401916 	blt	r3,r5,af50 <___vfiprintf_internal_r+0xcf8>
    aeec:	42000204 	addi	r8,r8,8
    aef0:	29400044 	addi	r5,r5,1
    aef4:	003e5506 	br	a84c <__alt_exception_stack_pointer+0xf800a84c>
    aef8:	d9402017 	ldw	r5,128(sp)
    aefc:	d9002117 	ldw	r4,132(sp)
    af00:	d9801a04 	addi	r6,sp,104
    af04:	000a1440 	call	a144 <__sprint_r.part.0>
    af08:	10000b1e 	bne	r2,zero,af38 <___vfiprintf_internal_r+0xce0>
    af0c:	d9001b17 	ldw	r4,108(sp)
    af10:	d8801c17 	ldw	r2,112(sp)
    af14:	d811883a 	mov	r8,sp
    af18:	21400044 	addi	r5,r4,1
    af1c:	003fdc06 	br	ae90 <__alt_exception_stack_pointer+0xf800ae90>
    af20:	d8801c17 	ldw	r2,112(sp)
    af24:	10000426 	beq	r2,zero,af38 <___vfiprintf_internal_r+0xce0>
    af28:	d9402017 	ldw	r5,128(sp)
    af2c:	d9002117 	ldw	r4,132(sp)
    af30:	d9801a04 	addi	r6,sp,104
    af34:	000a1440 	call	a144 <__sprint_r.part.0>
    af38:	d9402017 	ldw	r5,128(sp)
    af3c:	2880030b 	ldhu	r2,12(r5)
    af40:	1080100c 	andi	r2,r2,64
    af44:	10014d1e 	bne	r2,zero,b47c <___vfiprintf_internal_r+0x1224>
    af48:	d8802417 	ldw	r2,144(sp)
    af4c:	003d9706 	br	a5ac <__alt_exception_stack_pointer+0xf800a5ac>
    af50:	1000d21e 	bne	r2,zero,b29c <___vfiprintf_internal_r+0x1044>
    af54:	00c00044 	movi	r3,1
    af58:	a005883a 	mov	r2,r20
    af5c:	ddc00015 	stw	r23,0(sp)
    af60:	dd000115 	stw	r20,4(sp)
    af64:	dd001c15 	stw	r20,112(sp)
    af68:	d8c01b15 	stw	r3,108(sp)
    af6c:	d811883a 	mov	r8,sp
    af70:	42000204 	addi	r8,r8,8
    af74:	8c40010c 	andi	r17,r17,4
    af78:	88004026 	beq	r17,zero,b07c <___vfiprintf_internal_r+0xe24>
    af7c:	d9002517 	ldw	r4,148(sp)
    af80:	24e3c83a 	sub	r17,r4,r19
    af84:	04403d0e 	bge	zero,r17,b07c <___vfiprintf_internal_r+0xe24>
    af88:	04000404 	movi	r16,16
    af8c:	8441a90e 	bge	r16,r17,b634 <___vfiprintf_internal_r+0x13dc>
    af90:	00c00074 	movhi	r3,1
    af94:	18cae304 	addi	r3,r3,11148
    af98:	d9001b17 	ldw	r4,108(sp)
    af9c:	d8c02315 	stw	r3,140(sp)
    afa0:	050001c4 	movi	r20,7
    afa4:	dd402117 	ldw	r21,132(sp)
    afa8:	ddc02017 	ldw	r23,128(sp)
    afac:	00000506 	br	afc4 <___vfiprintf_internal_r+0xd6c>
    afb0:	21400084 	addi	r5,r4,2
    afb4:	42000204 	addi	r8,r8,8
    afb8:	1809883a 	mov	r4,r3
    afbc:	8c7ffc04 	addi	r17,r17,-16
    afc0:	84400f0e 	bge	r16,r17,b000 <___vfiprintf_internal_r+0xda8>
    afc4:	01400074 	movhi	r5,1
    afc8:	10800404 	addi	r2,r2,16
    afcc:	20c00044 	addi	r3,r4,1
    afd0:	294ae304 	addi	r5,r5,11148
    afd4:	41400015 	stw	r5,0(r8)
    afd8:	44000115 	stw	r16,4(r8)
    afdc:	d8801c15 	stw	r2,112(sp)
    afe0:	d8c01b15 	stw	r3,108(sp)
    afe4:	a0fff20e 	bge	r20,r3,afb0 <__alt_exception_stack_pointer+0xf800afb0>
    afe8:	1000141e 	bne	r2,zero,b03c <___vfiprintf_internal_r+0xde4>
    afec:	8c7ffc04 	addi	r17,r17,-16
    aff0:	01400044 	movi	r5,1
    aff4:	0009883a 	mov	r4,zero
    aff8:	d811883a 	mov	r8,sp
    affc:	847ff116 	blt	r16,r17,afc4 <__alt_exception_stack_pointer+0xf800afc4>
    b000:	d8c02317 	ldw	r3,140(sp)
    b004:	1445883a 	add	r2,r2,r17
    b008:	44400115 	stw	r17,4(r8)
    b00c:	40c00015 	stw	r3,0(r8)
    b010:	d8801c15 	stw	r2,112(sp)
    b014:	d9401b15 	stw	r5,108(sp)
    b018:	00c001c4 	movi	r3,7
    b01c:	1940170e 	bge	r3,r5,b07c <___vfiprintf_internal_r+0xe24>
    b020:	1000101e 	bne	r2,zero,b064 <___vfiprintf_internal_r+0xe0c>
    b024:	d8802517 	ldw	r2,148(sp)
    b028:	14c11616 	blt	r2,r19,b484 <___vfiprintf_internal_r+0x122c>
    b02c:	d9002417 	ldw	r4,144(sp)
    b030:	2089883a 	add	r4,r4,r2
    b034:	d9002415 	stw	r4,144(sp)
    b038:	003e1806 	br	a89c <__alt_exception_stack_pointer+0xf800a89c>
    b03c:	d9801a04 	addi	r6,sp,104
    b040:	b80b883a 	mov	r5,r23
    b044:	a809883a 	mov	r4,r21
    b048:	000a1440 	call	a144 <__sprint_r.part.0>
    b04c:	103fba1e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b050:	d9001b17 	ldw	r4,108(sp)
    b054:	d8801c17 	ldw	r2,112(sp)
    b058:	d811883a 	mov	r8,sp
    b05c:	21400044 	addi	r5,r4,1
    b060:	003fd606 	br	afbc <__alt_exception_stack_pointer+0xf800afbc>
    b064:	d9402017 	ldw	r5,128(sp)
    b068:	d9002117 	ldw	r4,132(sp)
    b06c:	d9801a04 	addi	r6,sp,104
    b070:	000a1440 	call	a144 <__sprint_r.part.0>
    b074:	103fb01e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b078:	d8801c17 	ldw	r2,112(sp)
    b07c:	d8c02517 	ldw	r3,148(sp)
    b080:	1cc0010e 	bge	r3,r19,b088 <___vfiprintf_internal_r+0xe30>
    b084:	9807883a 	mov	r3,r19
    b088:	d9002417 	ldw	r4,144(sp)
    b08c:	20c9883a 	add	r4,r4,r3
    b090:	d9002415 	stw	r4,144(sp)
    b094:	103e0126 	beq	r2,zero,a89c <__alt_exception_stack_pointer+0xf800a89c>
    b098:	d9402017 	ldw	r5,128(sp)
    b09c:	d9002117 	ldw	r4,132(sp)
    b0a0:	d9801a04 	addi	r6,sp,104
    b0a4:	000a1440 	call	a144 <__sprint_r.part.0>
    b0a8:	103dfc26 	beq	r2,zero,a89c <__alt_exception_stack_pointer+0xf800a89c>
    b0ac:	003fa206 	br	af38 <__alt_exception_stack_pointer+0xf800af38>
    b0b0:	d9402017 	ldw	r5,128(sp)
    b0b4:	d9002117 	ldw	r4,132(sp)
    b0b8:	d9801a04 	addi	r6,sp,104
    b0bc:	d9c02b15 	stw	r7,172(sp)
    b0c0:	000a1440 	call	a144 <__sprint_r.part.0>
    b0c4:	d9c02b17 	ldw	r7,172(sp)
    b0c8:	103f9b1e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b0cc:	d9001b17 	ldw	r4,108(sp)
    b0d0:	d8801c17 	ldw	r2,112(sp)
    b0d4:	d811883a 	mov	r8,sp
    b0d8:	21800044 	addi	r6,r4,1
    b0dc:	003dbf06 	br	a7dc <__alt_exception_stack_pointer+0xf800a7dc>
    b0e0:	1000d81e 	bne	r2,zero,b444 <___vfiprintf_internal_r+0x11ec>
    b0e4:	d9001d87 	ldb	r4,118(sp)
    b0e8:	20000a26 	beq	r4,zero,b114 <___vfiprintf_internal_r+0xebc>
    b0ec:	00800044 	movi	r2,1
    b0f0:	d9001d84 	addi	r4,sp,118
    b0f4:	100b883a 	mov	r5,r2
    b0f8:	d9000015 	stw	r4,0(sp)
    b0fc:	d8800115 	stw	r2,4(sp)
    b100:	d811883a 	mov	r8,sp
    b104:	2809883a 	mov	r4,r5
    b108:	42000204 	addi	r8,r8,8
    b10c:	29400044 	addi	r5,r5,1
    b110:	003d9506 	br	a768 <__alt_exception_stack_pointer+0xf800a768>
    b114:	3800fd26 	beq	r7,zero,b50c <___vfiprintf_internal_r+0x12b4>
    b118:	00800084 	movi	r2,2
    b11c:	d9001d04 	addi	r4,sp,116
    b120:	d9000015 	stw	r4,0(sp)
    b124:	d8800115 	stw	r2,4(sp)
    b128:	01400044 	movi	r5,1
    b12c:	d811883a 	mov	r8,sp
    b130:	2809883a 	mov	r4,r5
    b134:	42000204 	addi	r8,r8,8
    b138:	29400044 	addi	r5,r5,1
    b13c:	003f4606 	br	ae58 <__alt_exception_stack_pointer+0xf800ae58>
    b140:	d8802517 	ldw	r2,148(sp)
    b144:	14c0010e 	bge	r2,r19,b14c <___vfiprintf_internal_r+0xef4>
    b148:	9805883a 	mov	r2,r19
    b14c:	d9402417 	ldw	r5,144(sp)
    b150:	288b883a 	add	r5,r5,r2
    b154:	d9402415 	stw	r5,144(sp)
    b158:	003dd006 	br	a89c <__alt_exception_stack_pointer+0xf800a89c>
    b15c:	d8001d85 	stb	zero,118(sp)
    b160:	80005d16 	blt	r16,zero,b2d8 <___vfiprintf_internal_r+0x1080>
    b164:	00ffdfc4 	movi	r3,-129
    b168:	9d04b03a 	or	r2,r19,r20
    b16c:	88e2703a 	and	r17,r17,r3
    b170:	103d3726 	beq	r2,zero,a650 <__alt_exception_stack_pointer+0xf800a650>
    b174:	002b883a 	mov	r21,zero
    b178:	d9002617 	ldw	r4,152(sp)
    b17c:	ddc01a04 	addi	r23,sp,104
    b180:	988003cc 	andi	r2,r19,15
    b184:	a006973a 	slli	r3,r20,28
    b188:	2085883a 	add	r2,r4,r2
    b18c:	9826d13a 	srli	r19,r19,4
    b190:	10800003 	ldbu	r2,0(r2)
    b194:	a028d13a 	srli	r20,r20,4
    b198:	bdffffc4 	addi	r23,r23,-1
    b19c:	1ce6b03a 	or	r19,r3,r19
    b1a0:	b8800005 	stb	r2,0(r23)
    b1a4:	9d04b03a 	or	r2,r19,r20
    b1a8:	103ff51e 	bne	r2,zero,b180 <__alt_exception_stack_pointer+0xf800b180>
    b1ac:	d8801e17 	ldw	r2,120(sp)
    b1b0:	15e9c83a 	sub	r20,r2,r23
    b1b4:	003d2b06 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b1b8:	d9402017 	ldw	r5,128(sp)
    b1bc:	d9002117 	ldw	r4,132(sp)
    b1c0:	d9801a04 	addi	r6,sp,104
    b1c4:	000a1440 	call	a144 <__sprint_r.part.0>
    b1c8:	103f5b1e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b1cc:	d8801c17 	ldw	r2,112(sp)
    b1d0:	d811883a 	mov	r8,sp
    b1d4:	003f6706 	br	af74 <__alt_exception_stack_pointer+0xf800af74>
    b1d8:	d9402017 	ldw	r5,128(sp)
    b1dc:	d9002117 	ldw	r4,132(sp)
    b1e0:	d9801a04 	addi	r6,sp,104
    b1e4:	000a1440 	call	a144 <__sprint_r.part.0>
    b1e8:	103f531e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b1ec:	d811883a 	mov	r8,sp
    b1f0:	003cd906 	br	a558 <__alt_exception_stack_pointer+0xf800a558>
    b1f4:	10803fcc 	andi	r2,r2,255
    b1f8:	1080201c 	xori	r2,r2,128
    b1fc:	10bfe004 	addi	r2,r2,-128
    b200:	00c00c04 	movi	r3,48
    b204:	10ffe926 	beq	r2,r3,b1ac <__alt_exception_stack_pointer+0xf800b1ac>
    b208:	b8ffffc5 	stb	r3,-1(r23)
    b20c:	d8c01e17 	ldw	r3,120(sp)
    b210:	b8bfffc4 	addi	r2,r23,-1
    b214:	102f883a 	mov	r23,r2
    b218:	18a9c83a 	sub	r20,r3,r2
    b21c:	003d1106 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b220:	d9402017 	ldw	r5,128(sp)
    b224:	d9002117 	ldw	r4,132(sp)
    b228:	d9801a04 	addi	r6,sp,104
    b22c:	d8c02a15 	stw	r3,168(sp)
    b230:	d9c02b15 	stw	r7,172(sp)
    b234:	000a1440 	call	a144 <__sprint_r.part.0>
    b238:	d8c02a17 	ldw	r3,168(sp)
    b23c:	d9c02b17 	ldw	r7,172(sp)
    b240:	103f3d1e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b244:	d9001b17 	ldw	r4,108(sp)
    b248:	d8801c17 	ldw	r2,112(sp)
    b24c:	d811883a 	mov	r8,sp
    b250:	21400044 	addi	r5,r4,1
    b254:	003d4406 	br	a768 <__alt_exception_stack_pointer+0xf800a768>
    b258:	d9402017 	ldw	r5,128(sp)
    b25c:	d9002117 	ldw	r4,132(sp)
    b260:	d9801a04 	addi	r6,sp,104
    b264:	d8c02a15 	stw	r3,168(sp)
    b268:	000a1440 	call	a144 <__sprint_r.part.0>
    b26c:	d8c02a17 	ldw	r3,168(sp)
    b270:	103f311e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b274:	d9001b17 	ldw	r4,108(sp)
    b278:	d8801c17 	ldw	r2,112(sp)
    b27c:	d811883a 	mov	r8,sp
    b280:	21400044 	addi	r5,r4,1
    b284:	003ef406 	br	ae58 <__alt_exception_stack_pointer+0xf800ae58>
    b288:	1000bd1e 	bne	r2,zero,b580 <___vfiprintf_internal_r+0x1328>
    b28c:	01400044 	movi	r5,1
    b290:	0009883a 	mov	r4,zero
    b294:	d811883a 	mov	r8,sp
    b298:	003ef106 	br	ae60 <__alt_exception_stack_pointer+0xf800ae60>
    b29c:	d9402017 	ldw	r5,128(sp)
    b2a0:	d9002117 	ldw	r4,132(sp)
    b2a4:	d9801a04 	addi	r6,sp,104
    b2a8:	000a1440 	call	a144 <__sprint_r.part.0>
    b2ac:	103f221e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b2b0:	d9401b17 	ldw	r5,108(sp)
    b2b4:	d8801c17 	ldw	r2,112(sp)
    b2b8:	d811883a 	mov	r8,sp
    b2bc:	29400044 	addi	r5,r5,1
    b2c0:	003d6206 	br	a84c <__alt_exception_stack_pointer+0xf800a84c>
    b2c4:	01400074 	movhi	r5,1
    b2c8:	294a7f04 	addi	r5,r5,10748
    b2cc:	d9402615 	stw	r5,152(sp)
    b2d0:	d8c02215 	stw	r3,136(sp)
    b2d4:	1023883a 	mov	r17,r2
    b2d8:	9d04b03a 	or	r2,r19,r20
    b2dc:	103fa51e 	bne	r2,zero,b174 <__alt_exception_stack_pointer+0xf800b174>
    b2e0:	002b883a 	mov	r21,zero
    b2e4:	00800084 	movi	r2,2
    b2e8:	003e4a06 	br	ac14 <__alt_exception_stack_pointer+0xf800ac14>
    b2ec:	01400074 	movhi	r5,1
    b2f0:	294a7f04 	addi	r5,r5,10748
    b2f4:	002b883a 	mov	r21,zero
    b2f8:	d9402615 	stw	r5,152(sp)
    b2fc:	003f9e06 	br	b178 <__alt_exception_stack_pointer+0xf800b178>
    b300:	d9402217 	ldw	r5,136(sp)
    b304:	d8001d85 	stb	zero,118(sp)
    b308:	0029883a 	mov	r20,zero
    b30c:	28800104 	addi	r2,r5,4
    b310:	2cc00017 	ldw	r19,0(r5)
    b314:	803e3a16 	blt	r16,zero,ac00 <__alt_exception_stack_pointer+0xf800ac00>
    b318:	00ffdfc4 	movi	r3,-129
    b31c:	d8802215 	stw	r2,136(sp)
    b320:	88e2703a 	and	r17,r17,r3
    b324:	002b883a 	mov	r21,zero
    b328:	983e9b26 	beq	r19,zero,ad98 <__alt_exception_stack_pointer+0xf800ad98>
    b32c:	00800244 	movi	r2,9
    b330:	14fdc936 	bltu	r2,r19,aa58 <__alt_exception_stack_pointer+0xf800aa58>
    b334:	003e9a06 	br	ada0 <__alt_exception_stack_pointer+0xf800ada0>
    b338:	00800c04 	movi	r2,48
    b33c:	d8c01d45 	stb	r3,117(sp)
    b340:	d8801d05 	stb	r2,116(sp)
    b344:	d8001d85 	stb	zero,118(sp)
    b348:	88c00094 	ori	r3,r17,2
    b34c:	80009c16 	blt	r16,zero,b5c0 <___vfiprintf_internal_r+0x1368>
    b350:	00bfdfc4 	movi	r2,-129
    b354:	88a2703a 	and	r17,r17,r2
    b358:	8c400094 	ori	r17,r17,2
    b35c:	002b883a 	mov	r21,zero
    b360:	003f8506 	br	b178 <__alt_exception_stack_pointer+0xf800b178>
    b364:	b029883a 	mov	r20,r22
    b368:	003c0b06 	br	a398 <__alt_exception_stack_pointer+0xf800a398>
    b36c:	04e7c83a 	sub	r19,zero,r19
    b370:	05400b44 	movi	r21,45
    b374:	9804c03a 	cmpne	r2,r19,zero
    b378:	0529c83a 	sub	r20,zero,r20
    b37c:	dd401d85 	stb	r21,118(sp)
    b380:	a0a9c83a 	sub	r20,r20,r2
    b384:	80009716 	blt	r16,zero,b5e4 <___vfiprintf_internal_r+0x138c>
    b388:	00bfdfc4 	movi	r2,-129
    b38c:	88a2703a 	and	r17,r17,r2
    b390:	003db006 	br	aa54 <__alt_exception_stack_pointer+0xf800aa54>
    b394:	b0c00007 	ldb	r3,0(r22)
    b398:	003c0c06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    b39c:	8880100c 	andi	r2,r17,64
    b3a0:	d8001d85 	stb	zero,118(sp)
    b3a4:	1000461e 	bne	r2,zero,b4c0 <___vfiprintf_internal_r+0x1268>
    b3a8:	d9002217 	ldw	r4,136(sp)
    b3ac:	0029883a 	mov	r20,zero
    b3b0:	20800104 	addi	r2,r4,4
    b3b4:	24c00017 	ldw	r19,0(r4)
    b3b8:	803df80e 	bge	r16,zero,ab9c <__alt_exception_stack_pointer+0xf800ab9c>
    b3bc:	9d06b03a 	or	r3,r19,r20
    b3c0:	d8802215 	stw	r2,136(sp)
    b3c4:	183d5e1e 	bne	r3,zero,a940 <__alt_exception_stack_pointer+0xf800a940>
    b3c8:	002b883a 	mov	r21,zero
    b3cc:	0005883a 	mov	r2,zero
    b3d0:	003e1006 	br	ac14 <__alt_exception_stack_pointer+0xf800ac14>
    b3d4:	8880040c 	andi	r2,r17,16
    b3d8:	1000321e 	bne	r2,zero,b4a4 <___vfiprintf_internal_r+0x124c>
    b3dc:	8c40100c 	andi	r17,r17,64
    b3e0:	88008d26 	beq	r17,zero,b618 <___vfiprintf_internal_r+0x13c0>
    b3e4:	d9402217 	ldw	r5,136(sp)
    b3e8:	d8c02417 	ldw	r3,144(sp)
    b3ec:	28800017 	ldw	r2,0(r5)
    b3f0:	29400104 	addi	r5,r5,4
    b3f4:	d9402215 	stw	r5,136(sp)
    b3f8:	10c0000d 	sth	r3,0(r2)
    b3fc:	003bca06 	br	a328 <__alt_exception_stack_pointer+0xf800a328>
    b400:	8880100c 	andi	r2,r17,64
    b404:	10003a26 	beq	r2,zero,b4f0 <___vfiprintf_internal_r+0x1298>
    b408:	d8802217 	ldw	r2,136(sp)
    b40c:	14c0000f 	ldh	r19,0(r2)
    b410:	10800104 	addi	r2,r2,4
    b414:	d8802215 	stw	r2,136(sp)
    b418:	9829d7fa 	srai	r20,r19,31
    b41c:	a005883a 	mov	r2,r20
    b420:	003d8506 	br	aa38 <__alt_exception_stack_pointer+0xf800aa38>
    b424:	8880100c 	andi	r2,r17,64
    b428:	10002b26 	beq	r2,zero,b4d8 <___vfiprintf_internal_r+0x1280>
    b42c:	d8802217 	ldw	r2,136(sp)
    b430:	0029883a 	mov	r20,zero
    b434:	14c0000b 	ldhu	r19,0(r2)
    b438:	10800104 	addi	r2,r2,4
    b43c:	d8802215 	stw	r2,136(sp)
    b440:	003d5d06 	br	a9b8 <__alt_exception_stack_pointer+0xf800a9b8>
    b444:	d9402017 	ldw	r5,128(sp)
    b448:	d9002117 	ldw	r4,132(sp)
    b44c:	d9801a04 	addi	r6,sp,104
    b450:	d8c02a15 	stw	r3,168(sp)
    b454:	d9c02b15 	stw	r7,172(sp)
    b458:	000a1440 	call	a144 <__sprint_r.part.0>
    b45c:	d8c02a17 	ldw	r3,168(sp)
    b460:	d9c02b17 	ldw	r7,172(sp)
    b464:	103eb41e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b468:	d9001b17 	ldw	r4,108(sp)
    b46c:	d8801c17 	ldw	r2,112(sp)
    b470:	d811883a 	mov	r8,sp
    b474:	21400044 	addi	r5,r4,1
    b478:	003e6706 	br	ae18 <__alt_exception_stack_pointer+0xf800ae18>
    b47c:	00bfffc4 	movi	r2,-1
    b480:	003c4a06 	br	a5ac <__alt_exception_stack_pointer+0xf800a5ac>
    b484:	9805883a 	mov	r2,r19
    b488:	003ee806 	br	b02c <__alt_exception_stack_pointer+0xf800b02c>
    b48c:	d8c02217 	ldw	r3,136(sp)
    b490:	0029883a 	mov	r20,zero
    b494:	18800104 	addi	r2,r3,4
    b498:	1cc0000b 	ldhu	r19,0(r3)
    b49c:	803f9e0e 	bge	r16,zero,b318 <__alt_exception_stack_pointer+0xf800b318>
    b4a0:	003dd706 	br	ac00 <__alt_exception_stack_pointer+0xf800ac00>
    b4a4:	d8c02217 	ldw	r3,136(sp)
    b4a8:	d9002417 	ldw	r4,144(sp)
    b4ac:	18800017 	ldw	r2,0(r3)
    b4b0:	18c00104 	addi	r3,r3,4
    b4b4:	d8c02215 	stw	r3,136(sp)
    b4b8:	11000015 	stw	r4,0(r2)
    b4bc:	003b9a06 	br	a328 <__alt_exception_stack_pointer+0xf800a328>
    b4c0:	d8c02217 	ldw	r3,136(sp)
    b4c4:	0029883a 	mov	r20,zero
    b4c8:	18800104 	addi	r2,r3,4
    b4cc:	1cc0000b 	ldhu	r19,0(r3)
    b4d0:	803db20e 	bge	r16,zero,ab9c <__alt_exception_stack_pointer+0xf800ab9c>
    b4d4:	003fb906 	br	b3bc <__alt_exception_stack_pointer+0xf800b3bc>
    b4d8:	d9002217 	ldw	r4,136(sp)
    b4dc:	0029883a 	mov	r20,zero
    b4e0:	24c00017 	ldw	r19,0(r4)
    b4e4:	21000104 	addi	r4,r4,4
    b4e8:	d9002215 	stw	r4,136(sp)
    b4ec:	003d3206 	br	a9b8 <__alt_exception_stack_pointer+0xf800a9b8>
    b4f0:	d8c02217 	ldw	r3,136(sp)
    b4f4:	1cc00017 	ldw	r19,0(r3)
    b4f8:	18c00104 	addi	r3,r3,4
    b4fc:	d8c02215 	stw	r3,136(sp)
    b500:	9829d7fa 	srai	r20,r19,31
    b504:	a005883a 	mov	r2,r20
    b508:	003d4b06 	br	aa38 <__alt_exception_stack_pointer+0xf800aa38>
    b50c:	0009883a 	mov	r4,zero
    b510:	01400044 	movi	r5,1
    b514:	d811883a 	mov	r8,sp
    b518:	003e4f06 	br	ae58 <__alt_exception_stack_pointer+0xf800ae58>
    b51c:	d8c02215 	stw	r3,136(sp)
    b520:	002b883a 	mov	r21,zero
    b524:	003db806 	br	ac08 <__alt_exception_stack_pointer+0xf800ac08>
    b528:	d811883a 	mov	r8,sp
    b52c:	003e9606 	br	af88 <__alt_exception_stack_pointer+0xf800af88>
    b530:	01000074 	movhi	r4,1
    b534:	210adf04 	addi	r4,r4,11132
    b538:	d9002315 	stw	r4,140(sp)
    b53c:	003e6306 	br	aecc <__alt_exception_stack_pointer+0xf800aecc>
    b540:	b0c00043 	ldbu	r3,1(r22)
    b544:	8c400814 	ori	r17,r17,32
    b548:	b5800044 	addi	r22,r22,1
    b54c:	18c03fcc 	andi	r3,r3,255
    b550:	18c0201c 	xori	r3,r3,128
    b554:	18ffe004 	addi	r3,r3,-128
    b558:	003b9c06 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    b55c:	b809883a 	mov	r4,r23
    b560:	da002a15 	stw	r8,168(sp)
    b564:	00032200 	call	3220 <strlen>
    b568:	1029883a 	mov	r20,r2
    b56c:	dd401d83 	ldbu	r21,118(sp)
    b570:	df002215 	stw	fp,136(sp)
    b574:	0021883a 	mov	r16,zero
    b578:	da002a17 	ldw	r8,168(sp)
    b57c:	003c3906 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b580:	d9402017 	ldw	r5,128(sp)
    b584:	d9002117 	ldw	r4,132(sp)
    b588:	d9801a04 	addi	r6,sp,104
    b58c:	000a1440 	call	a144 <__sprint_r.part.0>
    b590:	103e691e 	bne	r2,zero,af38 <__alt_exception_stack_pointer+0xf800af38>
    b594:	d9001b17 	ldw	r4,108(sp)
    b598:	d8801c17 	ldw	r2,112(sp)
    b59c:	d811883a 	mov	r8,sp
    b5a0:	21400044 	addi	r5,r4,1
    b5a4:	003e2e06 	br	ae60 <__alt_exception_stack_pointer+0xf800ae60>
    b5a8:	01000074 	movhi	r4,1
    b5ac:	210ae304 	addi	r4,r4,11148
    b5b0:	d9002315 	stw	r4,140(sp)
    b5b4:	d9001b17 	ldw	r4,108(sp)
    b5b8:	21000044 	addi	r4,r4,1
    b5bc:	003c5e06 	br	a738 <__alt_exception_stack_pointer+0xf800a738>
    b5c0:	002b883a 	mov	r21,zero
    b5c4:	00800084 	movi	r2,2
    b5c8:	10803fcc 	andi	r2,r2,255
    b5cc:	01000044 	movi	r4,1
    b5d0:	11002b26 	beq	r2,r4,b680 <___vfiprintf_internal_r+0x1428>
    b5d4:	01000084 	movi	r4,2
    b5d8:	11002b1e 	bne	r2,r4,b688 <___vfiprintf_internal_r+0x1430>
    b5dc:	1823883a 	mov	r17,r3
    b5e0:	003ee506 	br	b178 <__alt_exception_stack_pointer+0xf800b178>
    b5e4:	8807883a 	mov	r3,r17
    b5e8:	00800044 	movi	r2,1
    b5ec:	003ff606 	br	b5c8 <__alt_exception_stack_pointer+0xf800b5c8>
    b5f0:	00800184 	movi	r2,6
    b5f4:	1400012e 	bgeu	r2,r16,b5fc <___vfiprintf_internal_r+0x13a4>
    b5f8:	1021883a 	mov	r16,r2
    b5fc:	8029883a 	mov	r20,r16
    b600:	8027883a 	mov	r19,r16
    b604:	80002216 	blt	r16,zero,b690 <___vfiprintf_internal_r+0x1438>
    b608:	05c00074 	movhi	r23,1
    b60c:	df002215 	stw	fp,136(sp)
    b610:	bdca8404 	addi	r23,r23,10768
    b614:	003cfb06 	br	aa04 <__alt_exception_stack_pointer+0xf800aa04>
    b618:	d9002217 	ldw	r4,136(sp)
    b61c:	d9402417 	ldw	r5,144(sp)
    b620:	20800017 	ldw	r2,0(r4)
    b624:	21000104 	addi	r4,r4,4
    b628:	d9002215 	stw	r4,136(sp)
    b62c:	11400015 	stw	r5,0(r2)
    b630:	003b3d06 	br	a328 <__alt_exception_stack_pointer+0xf800a328>
    b634:	01400074 	movhi	r5,1
    b638:	294ae304 	addi	r5,r5,11148
    b63c:	d9402315 	stw	r5,140(sp)
    b640:	d9401b17 	ldw	r5,108(sp)
    b644:	29400044 	addi	r5,r5,1
    b648:	003e6d06 	br	b000 <__alt_exception_stack_pointer+0xf800b000>
    b64c:	8029883a 	mov	r20,r16
    b650:	dd401d83 	ldbu	r21,118(sp)
    b654:	df002215 	stw	fp,136(sp)
    b658:	0021883a 	mov	r16,zero
    b65c:	003c0106 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b660:	00c00074 	movhi	r3,1
    b664:	18cadf04 	addi	r3,r3,11132
    b668:	d8c02315 	stw	r3,140(sp)
    b66c:	280d883a 	mov	r6,r5
    b670:	003c6906 	br	a818 <__alt_exception_stack_pointer+0xf800a818>
    b674:	802d883a 	mov	r22,r16
    b678:	0021883a 	mov	r16,zero
    b67c:	003b5406 	br	a3d0 <__alt_exception_stack_pointer+0xf800a3d0>
    b680:	1823883a 	mov	r17,r3
    b684:	003cf306 	br	aa54 <__alt_exception_stack_pointer+0xf800aa54>
    b688:	1823883a 	mov	r17,r3
    b68c:	003cad06 	br	a944 <__alt_exception_stack_pointer+0xf800a944>
    b690:	0027883a 	mov	r19,zero
    b694:	003fdc06 	br	b608 <__alt_exception_stack_pointer+0xf800b608>
    b698:	d9402217 	ldw	r5,136(sp)
    b69c:	8005883a 	mov	r2,r16
    b6a0:	b0c00043 	ldbu	r3,1(r22)
    b6a4:	2c000017 	ldw	r16,0(r5)
    b6a8:	29000104 	addi	r4,r5,4
    b6ac:	d9002215 	stw	r4,136(sp)
    b6b0:	102d883a 	mov	r22,r2
    b6b4:	803fa50e 	bge	r16,zero,b54c <__alt_exception_stack_pointer+0xf800b54c>
    b6b8:	18c03fcc 	andi	r3,r3,255
    b6bc:	18c0201c 	xori	r3,r3,128
    b6c0:	043fffc4 	movi	r16,-1
    b6c4:	18ffe004 	addi	r3,r3,-128
    b6c8:	003b4006 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    b6cc:	d9402303 	ldbu	r5,140(sp)
    b6d0:	d9401d85 	stb	r5,118(sp)
    b6d4:	003cae06 	br	a990 <__alt_exception_stack_pointer+0xf800a990>
    b6d8:	d8c02303 	ldbu	r3,140(sp)
    b6dc:	d8c01d85 	stb	r3,118(sp)
    b6e0:	003d1406 	br	ab34 <__alt_exception_stack_pointer+0xf800ab34>
    b6e4:	d8c02303 	ldbu	r3,140(sp)
    b6e8:	d8c01d85 	stb	r3,118(sp)
    b6ec:	003cca06 	br	aa18 <__alt_exception_stack_pointer+0xf800aa18>
    b6f0:	8880004c 	andi	r2,r17,1
    b6f4:	002b883a 	mov	r21,zero
    b6f8:	10000526 	beq	r2,zero,b710 <___vfiprintf_internal_r+0x14b8>
    b6fc:	00800c04 	movi	r2,48
    b700:	d88019c5 	stb	r2,103(sp)
    b704:	dd002817 	ldw	r20,160(sp)
    b708:	ddc019c4 	addi	r23,sp,103
    b70c:	003bd506 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b710:	0029883a 	mov	r20,zero
    b714:	ddc01a04 	addi	r23,sp,104
    b718:	003bd206 	br	a664 <__alt_exception_stack_pointer+0xf800a664>
    b71c:	d9002303 	ldbu	r4,140(sp)
    b720:	d9001d85 	stb	r4,118(sp)
    b724:	003da606 	br	adc0 <__alt_exception_stack_pointer+0xf800adc0>
    b728:	d8c02303 	ldbu	r3,140(sp)
    b72c:	d8c01d85 	stb	r3,118(sp)
    b730:	003c7606 	br	a90c <__alt_exception_stack_pointer+0xf800a90c>
    b734:	d8c02303 	ldbu	r3,140(sp)
    b738:	d8c01d85 	stb	r3,118(sp)
    b73c:	003c6506 	br	a8d4 <__alt_exception_stack_pointer+0xf800a8d4>
    b740:	d9002303 	ldbu	r4,140(sp)
    b744:	d9001d85 	stb	r4,118(sp)
    b748:	003d3d06 	br	ac40 <__alt_exception_stack_pointer+0xf800ac40>
    b74c:	d8c02303 	ldbu	r3,140(sp)
    b750:	d8c01d85 	stb	r3,118(sp)
    b754:	003d1d06 	br	abcc <__alt_exception_stack_pointer+0xf800abcc>
    b758:	d8c02303 	ldbu	r3,140(sp)
    b75c:	d8c01d85 	stb	r3,118(sp)
    b760:	003d0306 	br	ab70 <__alt_exception_stack_pointer+0xf800ab70>

0000b764 <__vfiprintf_internal>:
    b764:	00800074 	movhi	r2,1
    b768:	1091e504 	addi	r2,r2,18324
    b76c:	300f883a 	mov	r7,r6
    b770:	280d883a 	mov	r6,r5
    b774:	200b883a 	mov	r5,r4
    b778:	11000017 	ldw	r4,0(r2)
    b77c:	000a2581 	jmpi	a258 <___vfiprintf_internal_r>

0000b780 <__sbprintf>:
    b780:	2880030b 	ldhu	r2,12(r5)
    b784:	2ac01917 	ldw	r11,100(r5)
    b788:	2a80038b 	ldhu	r10,14(r5)
    b78c:	2a400717 	ldw	r9,28(r5)
    b790:	2a000917 	ldw	r8,36(r5)
    b794:	defee204 	addi	sp,sp,-1144
    b798:	00c10004 	movi	r3,1024
    b79c:	dc011a15 	stw	r16,1128(sp)
    b7a0:	10bfff4c 	andi	r2,r2,65533
    b7a4:	2821883a 	mov	r16,r5
    b7a8:	d8cb883a 	add	r5,sp,r3
    b7ac:	dc811c15 	stw	r18,1136(sp)
    b7b0:	dc411b15 	stw	r17,1132(sp)
    b7b4:	dfc11d15 	stw	ra,1140(sp)
    b7b8:	2025883a 	mov	r18,r4
    b7bc:	d881030d 	sth	r2,1036(sp)
    b7c0:	dac11915 	stw	r11,1124(sp)
    b7c4:	da81038d 	sth	r10,1038(sp)
    b7c8:	da410715 	stw	r9,1052(sp)
    b7cc:	da010915 	stw	r8,1060(sp)
    b7d0:	dec10015 	stw	sp,1024(sp)
    b7d4:	dec10415 	stw	sp,1040(sp)
    b7d8:	d8c10215 	stw	r3,1032(sp)
    b7dc:	d8c10515 	stw	r3,1044(sp)
    b7e0:	d8010615 	stw	zero,1048(sp)
    b7e4:	000a2580 	call	a258 <___vfiprintf_internal_r>
    b7e8:	1023883a 	mov	r17,r2
    b7ec:	10000416 	blt	r2,zero,b800 <__sbprintf+0x80>
    b7f0:	d9410004 	addi	r5,sp,1024
    b7f4:	9009883a 	mov	r4,r18
    b7f8:	00072940 	call	7294 <_fflush_r>
    b7fc:	10000d1e 	bne	r2,zero,b834 <__sbprintf+0xb4>
    b800:	d881030b 	ldhu	r2,1036(sp)
    b804:	1080100c 	andi	r2,r2,64
    b808:	10000326 	beq	r2,zero,b818 <__sbprintf+0x98>
    b80c:	8080030b 	ldhu	r2,12(r16)
    b810:	10801014 	ori	r2,r2,64
    b814:	8080030d 	sth	r2,12(r16)
    b818:	8805883a 	mov	r2,r17
    b81c:	dfc11d17 	ldw	ra,1140(sp)
    b820:	dc811c17 	ldw	r18,1136(sp)
    b824:	dc411b17 	ldw	r17,1132(sp)
    b828:	dc011a17 	ldw	r16,1128(sp)
    b82c:	dec11e04 	addi	sp,sp,1144
    b830:	f800283a 	ret
    b834:	047fffc4 	movi	r17,-1
    b838:	003ff106 	br	b800 <__alt_exception_stack_pointer+0xf800b800>

0000b83c <_write_r>:
    b83c:	defffd04 	addi	sp,sp,-12
    b840:	2805883a 	mov	r2,r5
    b844:	dc000015 	stw	r16,0(sp)
    b848:	04000074 	movhi	r16,1
    b84c:	dc400115 	stw	r17,4(sp)
    b850:	300b883a 	mov	r5,r6
    b854:	8418b804 	addi	r16,r16,25312
    b858:	2023883a 	mov	r17,r4
    b85c:	380d883a 	mov	r6,r7
    b860:	1009883a 	mov	r4,r2
    b864:	dfc00215 	stw	ra,8(sp)
    b868:	80000015 	stw	zero,0(r16)
    b86c:	00101400 	call	10140 <write>
    b870:	00ffffc4 	movi	r3,-1
    b874:	10c00526 	beq	r2,r3,b88c <_write_r+0x50>
    b878:	dfc00217 	ldw	ra,8(sp)
    b87c:	dc400117 	ldw	r17,4(sp)
    b880:	dc000017 	ldw	r16,0(sp)
    b884:	dec00304 	addi	sp,sp,12
    b888:	f800283a 	ret
    b88c:	80c00017 	ldw	r3,0(r16)
    b890:	183ff926 	beq	r3,zero,b878 <__alt_exception_stack_pointer+0xf800b878>
    b894:	88c00015 	stw	r3,0(r17)
    b898:	003ff706 	br	b878 <__alt_exception_stack_pointer+0xf800b878>

0000b89c <_close_r>:
    b89c:	defffd04 	addi	sp,sp,-12
    b8a0:	dc000015 	stw	r16,0(sp)
    b8a4:	04000074 	movhi	r16,1
    b8a8:	dc400115 	stw	r17,4(sp)
    b8ac:	8418b804 	addi	r16,r16,25312
    b8b0:	2023883a 	mov	r17,r4
    b8b4:	2809883a 	mov	r4,r5
    b8b8:	dfc00215 	stw	ra,8(sp)
    b8bc:	80000015 	stw	zero,0(r16)
    b8c0:	000f8040 	call	f804 <close>
    b8c4:	00ffffc4 	movi	r3,-1
    b8c8:	10c00526 	beq	r2,r3,b8e0 <_close_r+0x44>
    b8cc:	dfc00217 	ldw	ra,8(sp)
    b8d0:	dc400117 	ldw	r17,4(sp)
    b8d4:	dc000017 	ldw	r16,0(sp)
    b8d8:	dec00304 	addi	sp,sp,12
    b8dc:	f800283a 	ret
    b8e0:	80c00017 	ldw	r3,0(r16)
    b8e4:	183ff926 	beq	r3,zero,b8cc <__alt_exception_stack_pointer+0xf800b8cc>
    b8e8:	88c00015 	stw	r3,0(r17)
    b8ec:	003ff706 	br	b8cc <__alt_exception_stack_pointer+0xf800b8cc>

0000b8f0 <_calloc_r>:
    b8f0:	defffe04 	addi	sp,sp,-8
    b8f4:	2805883a 	mov	r2,r5
    b8f8:	dc000015 	stw	r16,0(sp)
    b8fc:	300b883a 	mov	r5,r6
    b900:	2021883a 	mov	r16,r4
    b904:	1009883a 	mov	r4,r2
    b908:	dfc00115 	stw	ra,4(sp)
    b90c:	000cefc0 	call	cefc <__mulsi3>
    b910:	100b883a 	mov	r5,r2
    b914:	8009883a 	mov	r4,r16
    b918:	00028800 	call	2880 <_malloc_r>
    b91c:	10002926 	beq	r2,zero,b9c4 <_calloc_r+0xd4>
    b920:	11bfff17 	ldw	r6,-4(r2)
    b924:	1021883a 	mov	r16,r2
    b928:	00bfff04 	movi	r2,-4
    b92c:	308c703a 	and	r6,r6,r2
    b930:	00c00904 	movi	r3,36
    b934:	308d883a 	add	r6,r6,r2
    b938:	19801636 	bltu	r3,r6,b994 <_calloc_r+0xa4>
    b93c:	008004c4 	movi	r2,19
    b940:	11800b2e 	bgeu	r2,r6,b970 <_calloc_r+0x80>
    b944:	80000015 	stw	zero,0(r16)
    b948:	80000115 	stw	zero,4(r16)
    b94c:	008006c4 	movi	r2,27
    b950:	11801a2e 	bgeu	r2,r6,b9bc <_calloc_r+0xcc>
    b954:	80000215 	stw	zero,8(r16)
    b958:	80000315 	stw	zero,12(r16)
    b95c:	30c0151e 	bne	r6,r3,b9b4 <_calloc_r+0xc4>
    b960:	80000415 	stw	zero,16(r16)
    b964:	80800604 	addi	r2,r16,24
    b968:	80000515 	stw	zero,20(r16)
    b96c:	00000106 	br	b974 <_calloc_r+0x84>
    b970:	8005883a 	mov	r2,r16
    b974:	10000015 	stw	zero,0(r2)
    b978:	10000115 	stw	zero,4(r2)
    b97c:	10000215 	stw	zero,8(r2)
    b980:	8005883a 	mov	r2,r16
    b984:	dfc00117 	ldw	ra,4(sp)
    b988:	dc000017 	ldw	r16,0(sp)
    b98c:	dec00204 	addi	sp,sp,8
    b990:	f800283a 	ret
    b994:	000b883a 	mov	r5,zero
    b998:	8009883a 	mov	r4,r16
    b99c:	00087740 	call	8774 <memset>
    b9a0:	8005883a 	mov	r2,r16
    b9a4:	dfc00117 	ldw	ra,4(sp)
    b9a8:	dc000017 	ldw	r16,0(sp)
    b9ac:	dec00204 	addi	sp,sp,8
    b9b0:	f800283a 	ret
    b9b4:	80800404 	addi	r2,r16,16
    b9b8:	003fee06 	br	b974 <__alt_exception_stack_pointer+0xf800b974>
    b9bc:	80800204 	addi	r2,r16,8
    b9c0:	003fec06 	br	b974 <__alt_exception_stack_pointer+0xf800b974>
    b9c4:	0005883a 	mov	r2,zero
    b9c8:	003fee06 	br	b984 <__alt_exception_stack_pointer+0xf800b984>

0000b9cc <_fclose_r>:
    b9cc:	28003926 	beq	r5,zero,bab4 <_fclose_r+0xe8>
    b9d0:	defffc04 	addi	sp,sp,-16
    b9d4:	dc400115 	stw	r17,4(sp)
    b9d8:	dc000015 	stw	r16,0(sp)
    b9dc:	dfc00315 	stw	ra,12(sp)
    b9e0:	dc800215 	stw	r18,8(sp)
    b9e4:	2023883a 	mov	r17,r4
    b9e8:	2821883a 	mov	r16,r5
    b9ec:	20000226 	beq	r4,zero,b9f8 <_fclose_r+0x2c>
    b9f0:	20800e17 	ldw	r2,56(r4)
    b9f4:	10002726 	beq	r2,zero,ba94 <_fclose_r+0xc8>
    b9f8:	8080030f 	ldh	r2,12(r16)
    b9fc:	1000071e 	bne	r2,zero,ba1c <_fclose_r+0x50>
    ba00:	0005883a 	mov	r2,zero
    ba04:	dfc00317 	ldw	ra,12(sp)
    ba08:	dc800217 	ldw	r18,8(sp)
    ba0c:	dc400117 	ldw	r17,4(sp)
    ba10:	dc000017 	ldw	r16,0(sp)
    ba14:	dec00404 	addi	sp,sp,16
    ba18:	f800283a 	ret
    ba1c:	800b883a 	mov	r5,r16
    ba20:	8809883a 	mov	r4,r17
    ba24:	00070780 	call	7078 <__sflush_r>
    ba28:	1025883a 	mov	r18,r2
    ba2c:	80800b17 	ldw	r2,44(r16)
    ba30:	10000426 	beq	r2,zero,ba44 <_fclose_r+0x78>
    ba34:	81400717 	ldw	r5,28(r16)
    ba38:	8809883a 	mov	r4,r17
    ba3c:	103ee83a 	callr	r2
    ba40:	10001616 	blt	r2,zero,ba9c <_fclose_r+0xd0>
    ba44:	8080030b 	ldhu	r2,12(r16)
    ba48:	1080200c 	andi	r2,r2,128
    ba4c:	1000151e 	bne	r2,zero,baa4 <_fclose_r+0xd8>
    ba50:	81400c17 	ldw	r5,48(r16)
    ba54:	28000526 	beq	r5,zero,ba6c <_fclose_r+0xa0>
    ba58:	80801004 	addi	r2,r16,64
    ba5c:	28800226 	beq	r5,r2,ba68 <_fclose_r+0x9c>
    ba60:	8809883a 	mov	r4,r17
    ba64:	00077f40 	call	77f4 <_free_r>
    ba68:	80000c15 	stw	zero,48(r16)
    ba6c:	81401117 	ldw	r5,68(r16)
    ba70:	28000326 	beq	r5,zero,ba80 <_fclose_r+0xb4>
    ba74:	8809883a 	mov	r4,r17
    ba78:	00077f40 	call	77f4 <_free_r>
    ba7c:	80001115 	stw	zero,68(r16)
    ba80:	00076900 	call	7690 <__sfp_lock_acquire>
    ba84:	8000030d 	sth	zero,12(r16)
    ba88:	00076940 	call	7694 <__sfp_lock_release>
    ba8c:	9005883a 	mov	r2,r18
    ba90:	003fdc06 	br	ba04 <__alt_exception_stack_pointer+0xf800ba04>
    ba94:	00076800 	call	7680 <__sinit>
    ba98:	003fd706 	br	b9f8 <__alt_exception_stack_pointer+0xf800b9f8>
    ba9c:	04bfffc4 	movi	r18,-1
    baa0:	003fe806 	br	ba44 <__alt_exception_stack_pointer+0xf800ba44>
    baa4:	81400417 	ldw	r5,16(r16)
    baa8:	8809883a 	mov	r4,r17
    baac:	00077f40 	call	77f4 <_free_r>
    bab0:	003fe706 	br	ba50 <__alt_exception_stack_pointer+0xf800ba50>
    bab4:	0005883a 	mov	r2,zero
    bab8:	f800283a 	ret

0000babc <fclose>:
    babc:	00800074 	movhi	r2,1
    bac0:	1091e504 	addi	r2,r2,18324
    bac4:	200b883a 	mov	r5,r4
    bac8:	11000017 	ldw	r4,0(r2)
    bacc:	000b9cc1 	jmpi	b9cc <_fclose_r>

0000bad0 <__fputwc>:
    bad0:	defff804 	addi	sp,sp,-32
    bad4:	dcc00415 	stw	r19,16(sp)
    bad8:	dc800315 	stw	r18,12(sp)
    badc:	dc000115 	stw	r16,4(sp)
    bae0:	dfc00715 	stw	ra,28(sp)
    bae4:	dd400615 	stw	r21,24(sp)
    bae8:	dd000515 	stw	r20,20(sp)
    baec:	dc400215 	stw	r17,8(sp)
    baf0:	2027883a 	mov	r19,r4
    baf4:	2825883a 	mov	r18,r5
    baf8:	3021883a 	mov	r16,r6
    bafc:	00081dc0 	call	81dc <__locale_mb_cur_max>
    bb00:	00c00044 	movi	r3,1
    bb04:	10c03e26 	beq	r2,r3,bc00 <__fputwc+0x130>
    bb08:	81c01704 	addi	r7,r16,92
    bb0c:	900d883a 	mov	r6,r18
    bb10:	d80b883a 	mov	r5,sp
    bb14:	9809883a 	mov	r4,r19
    bb18:	000bfa00 	call	bfa0 <_wcrtomb_r>
    bb1c:	1029883a 	mov	r20,r2
    bb20:	00bfffc4 	movi	r2,-1
    bb24:	a0802026 	beq	r20,r2,bba8 <__fputwc+0xd8>
    bb28:	d9400003 	ldbu	r5,0(sp)
    bb2c:	a0001c26 	beq	r20,zero,bba0 <__fputwc+0xd0>
    bb30:	0023883a 	mov	r17,zero
    bb34:	05400284 	movi	r21,10
    bb38:	00000906 	br	bb60 <__fputwc+0x90>
    bb3c:	80800017 	ldw	r2,0(r16)
    bb40:	11400005 	stb	r5,0(r2)
    bb44:	80c00017 	ldw	r3,0(r16)
    bb48:	18c00044 	addi	r3,r3,1
    bb4c:	80c00015 	stw	r3,0(r16)
    bb50:	8c400044 	addi	r17,r17,1
    bb54:	dc45883a 	add	r2,sp,r17
    bb58:	8d00112e 	bgeu	r17,r20,bba0 <__fputwc+0xd0>
    bb5c:	11400003 	ldbu	r5,0(r2)
    bb60:	80c00217 	ldw	r3,8(r16)
    bb64:	18ffffc4 	addi	r3,r3,-1
    bb68:	80c00215 	stw	r3,8(r16)
    bb6c:	183ff30e 	bge	r3,zero,bb3c <__alt_exception_stack_pointer+0xf800bb3c>
    bb70:	80800617 	ldw	r2,24(r16)
    bb74:	18801916 	blt	r3,r2,bbdc <__fputwc+0x10c>
    bb78:	80800017 	ldw	r2,0(r16)
    bb7c:	11400005 	stb	r5,0(r2)
    bb80:	80800017 	ldw	r2,0(r16)
    bb84:	10c00003 	ldbu	r3,0(r2)
    bb88:	10800044 	addi	r2,r2,1
    bb8c:	1d402326 	beq	r3,r21,bc1c <__fputwc+0x14c>
    bb90:	80800015 	stw	r2,0(r16)
    bb94:	8c400044 	addi	r17,r17,1
    bb98:	dc45883a 	add	r2,sp,r17
    bb9c:	8d3fef36 	bltu	r17,r20,bb5c <__alt_exception_stack_pointer+0xf800bb5c>
    bba0:	9005883a 	mov	r2,r18
    bba4:	00000406 	br	bbb8 <__fputwc+0xe8>
    bba8:	80c0030b 	ldhu	r3,12(r16)
    bbac:	a005883a 	mov	r2,r20
    bbb0:	18c01014 	ori	r3,r3,64
    bbb4:	80c0030d 	sth	r3,12(r16)
    bbb8:	dfc00717 	ldw	ra,28(sp)
    bbbc:	dd400617 	ldw	r21,24(sp)
    bbc0:	dd000517 	ldw	r20,20(sp)
    bbc4:	dcc00417 	ldw	r19,16(sp)
    bbc8:	dc800317 	ldw	r18,12(sp)
    bbcc:	dc400217 	ldw	r17,8(sp)
    bbd0:	dc000117 	ldw	r16,4(sp)
    bbd4:	dec00804 	addi	sp,sp,32
    bbd8:	f800283a 	ret
    bbdc:	800d883a 	mov	r6,r16
    bbe0:	29403fcc 	andi	r5,r5,255
    bbe4:	9809883a 	mov	r4,r19
    bbe8:	000be480 	call	be48 <__swbuf_r>
    bbec:	10bfffe0 	cmpeqi	r2,r2,-1
    bbf0:	10803fcc 	andi	r2,r2,255
    bbf4:	103fd626 	beq	r2,zero,bb50 <__alt_exception_stack_pointer+0xf800bb50>
    bbf8:	00bfffc4 	movi	r2,-1
    bbfc:	003fee06 	br	bbb8 <__alt_exception_stack_pointer+0xf800bbb8>
    bc00:	90ffffc4 	addi	r3,r18,-1
    bc04:	01003f84 	movi	r4,254
    bc08:	20ffbf36 	bltu	r4,r3,bb08 <__alt_exception_stack_pointer+0xf800bb08>
    bc0c:	900b883a 	mov	r5,r18
    bc10:	dc800005 	stb	r18,0(sp)
    bc14:	1029883a 	mov	r20,r2
    bc18:	003fc506 	br	bb30 <__alt_exception_stack_pointer+0xf800bb30>
    bc1c:	800d883a 	mov	r6,r16
    bc20:	a80b883a 	mov	r5,r21
    bc24:	9809883a 	mov	r4,r19
    bc28:	000be480 	call	be48 <__swbuf_r>
    bc2c:	10bfffe0 	cmpeqi	r2,r2,-1
    bc30:	003fef06 	br	bbf0 <__alt_exception_stack_pointer+0xf800bbf0>

0000bc34 <_fputwc_r>:
    bc34:	3080030b 	ldhu	r2,12(r6)
    bc38:	10c8000c 	andi	r3,r2,8192
    bc3c:	1800051e 	bne	r3,zero,bc54 <_fputwc_r+0x20>
    bc40:	30c01917 	ldw	r3,100(r6)
    bc44:	10880014 	ori	r2,r2,8192
    bc48:	3080030d 	sth	r2,12(r6)
    bc4c:	18880014 	ori	r2,r3,8192
    bc50:	30801915 	stw	r2,100(r6)
    bc54:	000bad01 	jmpi	bad0 <__fputwc>

0000bc58 <fputwc>:
    bc58:	00800074 	movhi	r2,1
    bc5c:	defffc04 	addi	sp,sp,-16
    bc60:	1091e504 	addi	r2,r2,18324
    bc64:	dc000115 	stw	r16,4(sp)
    bc68:	14000017 	ldw	r16,0(r2)
    bc6c:	dc400215 	stw	r17,8(sp)
    bc70:	dfc00315 	stw	ra,12(sp)
    bc74:	2023883a 	mov	r17,r4
    bc78:	80000226 	beq	r16,zero,bc84 <fputwc+0x2c>
    bc7c:	80800e17 	ldw	r2,56(r16)
    bc80:	10001026 	beq	r2,zero,bcc4 <fputwc+0x6c>
    bc84:	2880030b 	ldhu	r2,12(r5)
    bc88:	10c8000c 	andi	r3,r2,8192
    bc8c:	1800051e 	bne	r3,zero,bca4 <fputwc+0x4c>
    bc90:	28c01917 	ldw	r3,100(r5)
    bc94:	10880014 	ori	r2,r2,8192
    bc98:	2880030d 	sth	r2,12(r5)
    bc9c:	18880014 	ori	r2,r3,8192
    bca0:	28801915 	stw	r2,100(r5)
    bca4:	280d883a 	mov	r6,r5
    bca8:	8009883a 	mov	r4,r16
    bcac:	880b883a 	mov	r5,r17
    bcb0:	dfc00317 	ldw	ra,12(sp)
    bcb4:	dc400217 	ldw	r17,8(sp)
    bcb8:	dc000117 	ldw	r16,4(sp)
    bcbc:	dec00404 	addi	sp,sp,16
    bcc0:	000bad01 	jmpi	bad0 <__fputwc>
    bcc4:	8009883a 	mov	r4,r16
    bcc8:	d9400015 	stw	r5,0(sp)
    bccc:	00076800 	call	7680 <__sinit>
    bcd0:	d9400017 	ldw	r5,0(sp)
    bcd4:	003feb06 	br	bc84 <__alt_exception_stack_pointer+0xf800bc84>

0000bcd8 <_fstat_r>:
    bcd8:	defffd04 	addi	sp,sp,-12
    bcdc:	2805883a 	mov	r2,r5
    bce0:	dc000015 	stw	r16,0(sp)
    bce4:	04000074 	movhi	r16,1
    bce8:	dc400115 	stw	r17,4(sp)
    bcec:	8418b804 	addi	r16,r16,25312
    bcf0:	2023883a 	mov	r17,r4
    bcf4:	300b883a 	mov	r5,r6
    bcf8:	1009883a 	mov	r4,r2
    bcfc:	dfc00215 	stw	ra,8(sp)
    bd00:	80000015 	stw	zero,0(r16)
    bd04:	000f9440 	call	f944 <fstat>
    bd08:	00ffffc4 	movi	r3,-1
    bd0c:	10c00526 	beq	r2,r3,bd24 <_fstat_r+0x4c>
    bd10:	dfc00217 	ldw	ra,8(sp)
    bd14:	dc400117 	ldw	r17,4(sp)
    bd18:	dc000017 	ldw	r16,0(sp)
    bd1c:	dec00304 	addi	sp,sp,12
    bd20:	f800283a 	ret
    bd24:	80c00017 	ldw	r3,0(r16)
    bd28:	183ff926 	beq	r3,zero,bd10 <__alt_exception_stack_pointer+0xf800bd10>
    bd2c:	88c00015 	stw	r3,0(r17)
    bd30:	003ff706 	br	bd10 <__alt_exception_stack_pointer+0xf800bd10>

0000bd34 <_isatty_r>:
    bd34:	defffd04 	addi	sp,sp,-12
    bd38:	dc000015 	stw	r16,0(sp)
    bd3c:	04000074 	movhi	r16,1
    bd40:	dc400115 	stw	r17,4(sp)
    bd44:	8418b804 	addi	r16,r16,25312
    bd48:	2023883a 	mov	r17,r4
    bd4c:	2809883a 	mov	r4,r5
    bd50:	dfc00215 	stw	ra,8(sp)
    bd54:	80000015 	stw	zero,0(r16)
    bd58:	000fa380 	call	fa38 <isatty>
    bd5c:	00ffffc4 	movi	r3,-1
    bd60:	10c00526 	beq	r2,r3,bd78 <_isatty_r+0x44>
    bd64:	dfc00217 	ldw	ra,8(sp)
    bd68:	dc400117 	ldw	r17,4(sp)
    bd6c:	dc000017 	ldw	r16,0(sp)
    bd70:	dec00304 	addi	sp,sp,12
    bd74:	f800283a 	ret
    bd78:	80c00017 	ldw	r3,0(r16)
    bd7c:	183ff926 	beq	r3,zero,bd64 <__alt_exception_stack_pointer+0xf800bd64>
    bd80:	88c00015 	stw	r3,0(r17)
    bd84:	003ff706 	br	bd64 <__alt_exception_stack_pointer+0xf800bd64>

0000bd88 <_lseek_r>:
    bd88:	defffd04 	addi	sp,sp,-12
    bd8c:	2805883a 	mov	r2,r5
    bd90:	dc000015 	stw	r16,0(sp)
    bd94:	04000074 	movhi	r16,1
    bd98:	dc400115 	stw	r17,4(sp)
    bd9c:	300b883a 	mov	r5,r6
    bda0:	8418b804 	addi	r16,r16,25312
    bda4:	2023883a 	mov	r17,r4
    bda8:	380d883a 	mov	r6,r7
    bdac:	1009883a 	mov	r4,r2
    bdb0:	dfc00215 	stw	ra,8(sp)
    bdb4:	80000015 	stw	zero,0(r16)
    bdb8:	000fc0c0 	call	fc0c <lseek>
    bdbc:	00ffffc4 	movi	r3,-1
    bdc0:	10c00526 	beq	r2,r3,bdd8 <_lseek_r+0x50>
    bdc4:	dfc00217 	ldw	ra,8(sp)
    bdc8:	dc400117 	ldw	r17,4(sp)
    bdcc:	dc000017 	ldw	r16,0(sp)
    bdd0:	dec00304 	addi	sp,sp,12
    bdd4:	f800283a 	ret
    bdd8:	80c00017 	ldw	r3,0(r16)
    bddc:	183ff926 	beq	r3,zero,bdc4 <__alt_exception_stack_pointer+0xf800bdc4>
    bde0:	88c00015 	stw	r3,0(r17)
    bde4:	003ff706 	br	bdc4 <__alt_exception_stack_pointer+0xf800bdc4>

0000bde8 <_read_r>:
    bde8:	defffd04 	addi	sp,sp,-12
    bdec:	2805883a 	mov	r2,r5
    bdf0:	dc000015 	stw	r16,0(sp)
    bdf4:	04000074 	movhi	r16,1
    bdf8:	dc400115 	stw	r17,4(sp)
    bdfc:	300b883a 	mov	r5,r6
    be00:	8418b804 	addi	r16,r16,25312
    be04:	2023883a 	mov	r17,r4
    be08:	380d883a 	mov	r6,r7
    be0c:	1009883a 	mov	r4,r2
    be10:	dfc00215 	stw	ra,8(sp)
    be14:	80000015 	stw	zero,0(r16)
    be18:	000fde80 	call	fde8 <read>
    be1c:	00ffffc4 	movi	r3,-1
    be20:	10c00526 	beq	r2,r3,be38 <_read_r+0x50>
    be24:	dfc00217 	ldw	ra,8(sp)
    be28:	dc400117 	ldw	r17,4(sp)
    be2c:	dc000017 	ldw	r16,0(sp)
    be30:	dec00304 	addi	sp,sp,12
    be34:	f800283a 	ret
    be38:	80c00017 	ldw	r3,0(r16)
    be3c:	183ff926 	beq	r3,zero,be24 <__alt_exception_stack_pointer+0xf800be24>
    be40:	88c00015 	stw	r3,0(r17)
    be44:	003ff706 	br	be24 <__alt_exception_stack_pointer+0xf800be24>

0000be48 <__swbuf_r>:
    be48:	defffb04 	addi	sp,sp,-20
    be4c:	dcc00315 	stw	r19,12(sp)
    be50:	dc800215 	stw	r18,8(sp)
    be54:	dc000015 	stw	r16,0(sp)
    be58:	dfc00415 	stw	ra,16(sp)
    be5c:	dc400115 	stw	r17,4(sp)
    be60:	2025883a 	mov	r18,r4
    be64:	2827883a 	mov	r19,r5
    be68:	3021883a 	mov	r16,r6
    be6c:	20000226 	beq	r4,zero,be78 <__swbuf_r+0x30>
    be70:	20800e17 	ldw	r2,56(r4)
    be74:	10004226 	beq	r2,zero,bf80 <__swbuf_r+0x138>
    be78:	80800617 	ldw	r2,24(r16)
    be7c:	8100030b 	ldhu	r4,12(r16)
    be80:	80800215 	stw	r2,8(r16)
    be84:	2080020c 	andi	r2,r4,8
    be88:	10003626 	beq	r2,zero,bf64 <__swbuf_r+0x11c>
    be8c:	80c00417 	ldw	r3,16(r16)
    be90:	18003426 	beq	r3,zero,bf64 <__swbuf_r+0x11c>
    be94:	2088000c 	andi	r2,r4,8192
    be98:	9c403fcc 	andi	r17,r19,255
    be9c:	10001a26 	beq	r2,zero,bf08 <__swbuf_r+0xc0>
    bea0:	80800017 	ldw	r2,0(r16)
    bea4:	81000517 	ldw	r4,20(r16)
    bea8:	10c7c83a 	sub	r3,r2,r3
    beac:	1900200e 	bge	r3,r4,bf30 <__swbuf_r+0xe8>
    beb0:	18c00044 	addi	r3,r3,1
    beb4:	81000217 	ldw	r4,8(r16)
    beb8:	11400044 	addi	r5,r2,1
    bebc:	81400015 	stw	r5,0(r16)
    bec0:	213fffc4 	addi	r4,r4,-1
    bec4:	81000215 	stw	r4,8(r16)
    bec8:	14c00005 	stb	r19,0(r2)
    becc:	80800517 	ldw	r2,20(r16)
    bed0:	10c01e26 	beq	r2,r3,bf4c <__swbuf_r+0x104>
    bed4:	8080030b 	ldhu	r2,12(r16)
    bed8:	1080004c 	andi	r2,r2,1
    bedc:	10000226 	beq	r2,zero,bee8 <__swbuf_r+0xa0>
    bee0:	00800284 	movi	r2,10
    bee4:	88801926 	beq	r17,r2,bf4c <__swbuf_r+0x104>
    bee8:	8805883a 	mov	r2,r17
    beec:	dfc00417 	ldw	ra,16(sp)
    bef0:	dcc00317 	ldw	r19,12(sp)
    bef4:	dc800217 	ldw	r18,8(sp)
    bef8:	dc400117 	ldw	r17,4(sp)
    befc:	dc000017 	ldw	r16,0(sp)
    bf00:	dec00504 	addi	sp,sp,20
    bf04:	f800283a 	ret
    bf08:	81401917 	ldw	r5,100(r16)
    bf0c:	00b7ffc4 	movi	r2,-8193
    bf10:	21080014 	ori	r4,r4,8192
    bf14:	2884703a 	and	r2,r5,r2
    bf18:	80801915 	stw	r2,100(r16)
    bf1c:	80800017 	ldw	r2,0(r16)
    bf20:	8100030d 	sth	r4,12(r16)
    bf24:	81000517 	ldw	r4,20(r16)
    bf28:	10c7c83a 	sub	r3,r2,r3
    bf2c:	193fe016 	blt	r3,r4,beb0 <__alt_exception_stack_pointer+0xf800beb0>
    bf30:	800b883a 	mov	r5,r16
    bf34:	9009883a 	mov	r4,r18
    bf38:	00072940 	call	7294 <_fflush_r>
    bf3c:	1000071e 	bne	r2,zero,bf5c <__swbuf_r+0x114>
    bf40:	80800017 	ldw	r2,0(r16)
    bf44:	00c00044 	movi	r3,1
    bf48:	003fda06 	br	beb4 <__alt_exception_stack_pointer+0xf800beb4>
    bf4c:	800b883a 	mov	r5,r16
    bf50:	9009883a 	mov	r4,r18
    bf54:	00072940 	call	7294 <_fflush_r>
    bf58:	103fe326 	beq	r2,zero,bee8 <__alt_exception_stack_pointer+0xf800bee8>
    bf5c:	00bfffc4 	movi	r2,-1
    bf60:	003fe206 	br	beec <__alt_exception_stack_pointer+0xf800beec>
    bf64:	800b883a 	mov	r5,r16
    bf68:	9009883a 	mov	r4,r18
    bf6c:	00056740 	call	5674 <__swsetup_r>
    bf70:	103ffa1e 	bne	r2,zero,bf5c <__alt_exception_stack_pointer+0xf800bf5c>
    bf74:	8100030b 	ldhu	r4,12(r16)
    bf78:	80c00417 	ldw	r3,16(r16)
    bf7c:	003fc506 	br	be94 <__alt_exception_stack_pointer+0xf800be94>
    bf80:	00076800 	call	7680 <__sinit>
    bf84:	003fbc06 	br	be78 <__alt_exception_stack_pointer+0xf800be78>

0000bf88 <__swbuf>:
    bf88:	00800074 	movhi	r2,1
    bf8c:	1091e504 	addi	r2,r2,18324
    bf90:	280d883a 	mov	r6,r5
    bf94:	200b883a 	mov	r5,r4
    bf98:	11000017 	ldw	r4,0(r2)
    bf9c:	000be481 	jmpi	be48 <__swbuf_r>

0000bfa0 <_wcrtomb_r>:
    bfa0:	defff604 	addi	sp,sp,-40
    bfa4:	00800074 	movhi	r2,1
    bfa8:	dc800815 	stw	r18,32(sp)
    bfac:	dc400715 	stw	r17,28(sp)
    bfb0:	dc000615 	stw	r16,24(sp)
    bfb4:	1091e904 	addi	r2,r2,18340
    bfb8:	dfc00915 	stw	ra,36(sp)
    bfbc:	2021883a 	mov	r16,r4
    bfc0:	3823883a 	mov	r17,r7
    bfc4:	14800017 	ldw	r18,0(r2)
    bfc8:	28001426 	beq	r5,zero,c01c <_wcrtomb_r+0x7c>
    bfcc:	d9400415 	stw	r5,16(sp)
    bfd0:	d9800515 	stw	r6,20(sp)
    bfd4:	00081d00 	call	81d0 <__locale_charset>
    bfd8:	d9800517 	ldw	r6,20(sp)
    bfdc:	d9400417 	ldw	r5,16(sp)
    bfe0:	100f883a 	mov	r7,r2
    bfe4:	dc400015 	stw	r17,0(sp)
    bfe8:	8009883a 	mov	r4,r16
    bfec:	903ee83a 	callr	r18
    bff0:	00ffffc4 	movi	r3,-1
    bff4:	10c0031e 	bne	r2,r3,c004 <_wcrtomb_r+0x64>
    bff8:	88000015 	stw	zero,0(r17)
    bffc:	00c02284 	movi	r3,138
    c000:	80c00015 	stw	r3,0(r16)
    c004:	dfc00917 	ldw	ra,36(sp)
    c008:	dc800817 	ldw	r18,32(sp)
    c00c:	dc400717 	ldw	r17,28(sp)
    c010:	dc000617 	ldw	r16,24(sp)
    c014:	dec00a04 	addi	sp,sp,40
    c018:	f800283a 	ret
    c01c:	00081d00 	call	81d0 <__locale_charset>
    c020:	100f883a 	mov	r7,r2
    c024:	dc400015 	stw	r17,0(sp)
    c028:	000d883a 	mov	r6,zero
    c02c:	d9400104 	addi	r5,sp,4
    c030:	8009883a 	mov	r4,r16
    c034:	903ee83a 	callr	r18
    c038:	003fed06 	br	bff0 <__alt_exception_stack_pointer+0xf800bff0>

0000c03c <wcrtomb>:
    c03c:	defff604 	addi	sp,sp,-40
    c040:	00800074 	movhi	r2,1
    c044:	dc800615 	stw	r18,24(sp)
    c048:	dc400515 	stw	r17,20(sp)
    c04c:	1091e504 	addi	r2,r2,18324
    c050:	dfc00915 	stw	ra,36(sp)
    c054:	dd000815 	stw	r20,32(sp)
    c058:	dcc00715 	stw	r19,28(sp)
    c05c:	dc000415 	stw	r16,16(sp)
    c060:	3025883a 	mov	r18,r6
    c064:	14400017 	ldw	r17,0(r2)
    c068:	20001926 	beq	r4,zero,c0d0 <wcrtomb+0x94>
    c06c:	00800074 	movhi	r2,1
    c070:	1091e904 	addi	r2,r2,18340
    c074:	15000017 	ldw	r20,0(r2)
    c078:	2021883a 	mov	r16,r4
    c07c:	2827883a 	mov	r19,r5
    c080:	00081d00 	call	81d0 <__locale_charset>
    c084:	100f883a 	mov	r7,r2
    c088:	dc800015 	stw	r18,0(sp)
    c08c:	980d883a 	mov	r6,r19
    c090:	800b883a 	mov	r5,r16
    c094:	8809883a 	mov	r4,r17
    c098:	a03ee83a 	callr	r20
    c09c:	00ffffc4 	movi	r3,-1
    c0a0:	10c0031e 	bne	r2,r3,c0b0 <wcrtomb+0x74>
    c0a4:	90000015 	stw	zero,0(r18)
    c0a8:	00c02284 	movi	r3,138
    c0ac:	88c00015 	stw	r3,0(r17)
    c0b0:	dfc00917 	ldw	ra,36(sp)
    c0b4:	dd000817 	ldw	r20,32(sp)
    c0b8:	dcc00717 	ldw	r19,28(sp)
    c0bc:	dc800617 	ldw	r18,24(sp)
    c0c0:	dc400517 	ldw	r17,20(sp)
    c0c4:	dc000417 	ldw	r16,16(sp)
    c0c8:	dec00a04 	addi	sp,sp,40
    c0cc:	f800283a 	ret
    c0d0:	00800074 	movhi	r2,1
    c0d4:	1091e904 	addi	r2,r2,18340
    c0d8:	14000017 	ldw	r16,0(r2)
    c0dc:	00081d00 	call	81d0 <__locale_charset>
    c0e0:	100f883a 	mov	r7,r2
    c0e4:	dc800015 	stw	r18,0(sp)
    c0e8:	000d883a 	mov	r6,zero
    c0ec:	d9400104 	addi	r5,sp,4
    c0f0:	8809883a 	mov	r4,r17
    c0f4:	803ee83a 	callr	r16
    c0f8:	003fe806 	br	c09c <__alt_exception_stack_pointer+0xf800c09c>

0000c0fc <__ascii_wctomb>:
    c0fc:	28000526 	beq	r5,zero,c114 <__ascii_wctomb+0x18>
    c100:	00803fc4 	movi	r2,255
    c104:	11800536 	bltu	r2,r6,c11c <__ascii_wctomb+0x20>
    c108:	29800005 	stb	r6,0(r5)
    c10c:	00800044 	movi	r2,1
    c110:	f800283a 	ret
    c114:	0005883a 	mov	r2,zero
    c118:	f800283a 	ret
    c11c:	00802284 	movi	r2,138
    c120:	20800015 	stw	r2,0(r4)
    c124:	00bfffc4 	movi	r2,-1
    c128:	f800283a 	ret

0000c12c <_wctomb_r>:
    c12c:	00800074 	movhi	r2,1
    c130:	defff904 	addi	sp,sp,-28
    c134:	1091e904 	addi	r2,r2,18340
    c138:	dfc00615 	stw	ra,24(sp)
    c13c:	dc400515 	stw	r17,20(sp)
    c140:	dc000415 	stw	r16,16(sp)
    c144:	3823883a 	mov	r17,r7
    c148:	14000017 	ldw	r16,0(r2)
    c14c:	d9000115 	stw	r4,4(sp)
    c150:	d9400215 	stw	r5,8(sp)
    c154:	d9800315 	stw	r6,12(sp)
    c158:	00081d00 	call	81d0 <__locale_charset>
    c15c:	d9800317 	ldw	r6,12(sp)
    c160:	d9400217 	ldw	r5,8(sp)
    c164:	d9000117 	ldw	r4,4(sp)
    c168:	100f883a 	mov	r7,r2
    c16c:	dc400015 	stw	r17,0(sp)
    c170:	803ee83a 	callr	r16
    c174:	dfc00617 	ldw	ra,24(sp)
    c178:	dc400517 	ldw	r17,20(sp)
    c17c:	dc000417 	ldw	r16,16(sp)
    c180:	dec00704 	addi	sp,sp,28
    c184:	f800283a 	ret

0000c188 <__udivdi3>:
    c188:	defff404 	addi	sp,sp,-48
    c18c:	dcc00515 	stw	r19,20(sp)
    c190:	dc000215 	stw	r16,8(sp)
    c194:	dfc00b15 	stw	ra,44(sp)
    c198:	df000a15 	stw	fp,40(sp)
    c19c:	ddc00915 	stw	r23,36(sp)
    c1a0:	dd800815 	stw	r22,32(sp)
    c1a4:	dd400715 	stw	r21,28(sp)
    c1a8:	dd000615 	stw	r20,24(sp)
    c1ac:	dc800415 	stw	r18,16(sp)
    c1b0:	dc400315 	stw	r17,12(sp)
    c1b4:	2027883a 	mov	r19,r4
    c1b8:	2821883a 	mov	r16,r5
    c1bc:	3800461e 	bne	r7,zero,c2d8 <__udivdi3+0x150>
    c1c0:	3023883a 	mov	r17,r6
    c1c4:	2025883a 	mov	r18,r4
    c1c8:	2980572e 	bgeu	r5,r6,c328 <__udivdi3+0x1a0>
    c1cc:	00bfffd4 	movui	r2,65535
    c1d0:	282d883a 	mov	r22,r5
    c1d4:	1180b236 	bltu	r2,r6,c4a0 <__udivdi3+0x318>
    c1d8:	00803fc4 	movi	r2,255
    c1dc:	1185803a 	cmpltu	r2,r2,r6
    c1e0:	100490fa 	slli	r2,r2,3
    c1e4:	3086d83a 	srl	r3,r6,r2
    c1e8:	01000074 	movhi	r4,1
    c1ec:	210ae704 	addi	r4,r4,11164
    c1f0:	20c7883a 	add	r3,r4,r3
    c1f4:	18c00003 	ldbu	r3,0(r3)
    c1f8:	1885883a 	add	r2,r3,r2
    c1fc:	00c00804 	movi	r3,32
    c200:	1887c83a 	sub	r3,r3,r2
    c204:	18000526 	beq	r3,zero,c21c <__udivdi3+0x94>
    c208:	80e0983a 	sll	r16,r16,r3
    c20c:	9884d83a 	srl	r2,r19,r2
    c210:	30e2983a 	sll	r17,r6,r3
    c214:	98e4983a 	sll	r18,r19,r3
    c218:	142cb03a 	or	r22,r2,r16
    c21c:	882ad43a 	srli	r21,r17,16
    c220:	b009883a 	mov	r4,r22
    c224:	8d3fffcc 	andi	r20,r17,65535
    c228:	a80b883a 	mov	r5,r21
    c22c:	000cea40 	call	cea4 <__umodsi3>
    c230:	b009883a 	mov	r4,r22
    c234:	a80b883a 	mov	r5,r21
    c238:	1027883a 	mov	r19,r2
    c23c:	000ce400 	call	ce40 <__udivsi3>
    c240:	100b883a 	mov	r5,r2
    c244:	a009883a 	mov	r4,r20
    c248:	102d883a 	mov	r22,r2
    c24c:	000cefc0 	call	cefc <__mulsi3>
    c250:	9826943a 	slli	r19,r19,16
    c254:	9006d43a 	srli	r3,r18,16
    c258:	1cc6b03a 	or	r3,r3,r19
    c25c:	1880052e 	bgeu	r3,r2,c274 <__udivdi3+0xec>
    c260:	1c47883a 	add	r3,r3,r17
    c264:	b13fffc4 	addi	r4,r22,-1
    c268:	1c400136 	bltu	r3,r17,c270 <__udivdi3+0xe8>
    c26c:	18814236 	bltu	r3,r2,c778 <__udivdi3+0x5f0>
    c270:	202d883a 	mov	r22,r4
    c274:	18a1c83a 	sub	r16,r3,r2
    c278:	8009883a 	mov	r4,r16
    c27c:	a80b883a 	mov	r5,r21
    c280:	000cea40 	call	cea4 <__umodsi3>
    c284:	1027883a 	mov	r19,r2
    c288:	8009883a 	mov	r4,r16
    c28c:	a80b883a 	mov	r5,r21
    c290:	9826943a 	slli	r19,r19,16
    c294:	000ce400 	call	ce40 <__udivsi3>
    c298:	100b883a 	mov	r5,r2
    c29c:	a009883a 	mov	r4,r20
    c2a0:	94bfffcc 	andi	r18,r18,65535
    c2a4:	1021883a 	mov	r16,r2
    c2a8:	94e4b03a 	or	r18,r18,r19
    c2ac:	000cefc0 	call	cefc <__mulsi3>
    c2b0:	9080052e 	bgeu	r18,r2,c2c8 <__udivdi3+0x140>
    c2b4:	8ca5883a 	add	r18,r17,r18
    c2b8:	80ffffc4 	addi	r3,r16,-1
    c2bc:	94410c36 	bltu	r18,r17,c6f0 <__udivdi3+0x568>
    c2c0:	90810b2e 	bgeu	r18,r2,c6f0 <__udivdi3+0x568>
    c2c4:	843fff84 	addi	r16,r16,-2
    c2c8:	b004943a 	slli	r2,r22,16
    c2cc:	0007883a 	mov	r3,zero
    c2d0:	1404b03a 	or	r2,r2,r16
    c2d4:	00005e06 	br	c450 <__udivdi3+0x2c8>
    c2d8:	29c05b36 	bltu	r5,r7,c448 <__udivdi3+0x2c0>
    c2dc:	00bfffd4 	movui	r2,65535
    c2e0:	11c0672e 	bgeu	r2,r7,c480 <__udivdi3+0x2f8>
    c2e4:	00804034 	movhi	r2,256
    c2e8:	10bfffc4 	addi	r2,r2,-1
    c2ec:	11c10a36 	bltu	r2,r7,c718 <__udivdi3+0x590>
    c2f0:	00800404 	movi	r2,16
    c2f4:	3886d83a 	srl	r3,r7,r2
    c2f8:	01000074 	movhi	r4,1
    c2fc:	210ae704 	addi	r4,r4,11164
    c300:	20c7883a 	add	r3,r4,r3
    c304:	18c00003 	ldbu	r3,0(r3)
    c308:	05c00804 	movi	r23,32
    c30c:	1885883a 	add	r2,r3,r2
    c310:	b8afc83a 	sub	r23,r23,r2
    c314:	b800671e 	bne	r23,zero,c4b4 <__udivdi3+0x32c>
    c318:	3c010536 	bltu	r7,r16,c730 <__udivdi3+0x5a8>
    c31c:	9985403a 	cmpgeu	r2,r19,r6
    c320:	0007883a 	mov	r3,zero
    c324:	00004a06 	br	c450 <__udivdi3+0x2c8>
    c328:	3000041e 	bne	r6,zero,c33c <__udivdi3+0x1b4>
    c32c:	000b883a 	mov	r5,zero
    c330:	01000044 	movi	r4,1
    c334:	000ce400 	call	ce40 <__udivsi3>
    c338:	1023883a 	mov	r17,r2
    c33c:	00bfffd4 	movui	r2,65535
    c340:	1440532e 	bgeu	r2,r17,c490 <__udivdi3+0x308>
    c344:	00804034 	movhi	r2,256
    c348:	10bfffc4 	addi	r2,r2,-1
    c34c:	1440f436 	bltu	r2,r17,c720 <__udivdi3+0x598>
    c350:	00800404 	movi	r2,16
    c354:	8886d83a 	srl	r3,r17,r2
    c358:	01000074 	movhi	r4,1
    c35c:	210ae704 	addi	r4,r4,11164
    c360:	20c7883a 	add	r3,r4,r3
    c364:	18c00003 	ldbu	r3,0(r3)
    c368:	1885883a 	add	r2,r3,r2
    c36c:	00c00804 	movi	r3,32
    c370:	1887c83a 	sub	r3,r3,r2
    c374:	1800a51e 	bne	r3,zero,c60c <__udivdi3+0x484>
    c378:	882ad43a 	srli	r21,r17,16
    c37c:	8461c83a 	sub	r16,r16,r17
    c380:	8d3fffcc 	andi	r20,r17,65535
    c384:	00c00044 	movi	r3,1
    c388:	a80b883a 	mov	r5,r21
    c38c:	8009883a 	mov	r4,r16
    c390:	d8c00115 	stw	r3,4(sp)
    c394:	000cea40 	call	cea4 <__umodsi3>
    c398:	a80b883a 	mov	r5,r21
    c39c:	8009883a 	mov	r4,r16
    c3a0:	1027883a 	mov	r19,r2
    c3a4:	000ce400 	call	ce40 <__udivsi3>
    c3a8:	a00b883a 	mov	r5,r20
    c3ac:	1009883a 	mov	r4,r2
    c3b0:	102d883a 	mov	r22,r2
    c3b4:	000cefc0 	call	cefc <__mulsi3>
    c3b8:	9826943a 	slli	r19,r19,16
    c3bc:	900ed43a 	srli	r7,r18,16
    c3c0:	d8c00117 	ldw	r3,4(sp)
    c3c4:	3cceb03a 	or	r7,r7,r19
    c3c8:	3880052e 	bgeu	r7,r2,c3e0 <__udivdi3+0x258>
    c3cc:	3c4f883a 	add	r7,r7,r17
    c3d0:	b13fffc4 	addi	r4,r22,-1
    c3d4:	3c400136 	bltu	r7,r17,c3dc <__udivdi3+0x254>
    c3d8:	3880e436 	bltu	r7,r2,c76c <__udivdi3+0x5e4>
    c3dc:	202d883a 	mov	r22,r4
    c3e0:	38a1c83a 	sub	r16,r7,r2
    c3e4:	8009883a 	mov	r4,r16
    c3e8:	a80b883a 	mov	r5,r21
    c3ec:	d8c00115 	stw	r3,4(sp)
    c3f0:	000cea40 	call	cea4 <__umodsi3>
    c3f4:	1027883a 	mov	r19,r2
    c3f8:	8009883a 	mov	r4,r16
    c3fc:	a80b883a 	mov	r5,r21
    c400:	9826943a 	slli	r19,r19,16
    c404:	000ce400 	call	ce40 <__udivsi3>
    c408:	a00b883a 	mov	r5,r20
    c40c:	1009883a 	mov	r4,r2
    c410:	94bfffcc 	andi	r18,r18,65535
    c414:	1021883a 	mov	r16,r2
    c418:	94e4b03a 	or	r18,r18,r19
    c41c:	000cefc0 	call	cefc <__mulsi3>
    c420:	d8c00117 	ldw	r3,4(sp)
    c424:	9080052e 	bgeu	r18,r2,c43c <__udivdi3+0x2b4>
    c428:	8ca5883a 	add	r18,r17,r18
    c42c:	813fffc4 	addi	r4,r16,-1
    c430:	9440ad36 	bltu	r18,r17,c6e8 <__udivdi3+0x560>
    c434:	9080ac2e 	bgeu	r18,r2,c6e8 <__udivdi3+0x560>
    c438:	843fff84 	addi	r16,r16,-2
    c43c:	b004943a 	slli	r2,r22,16
    c440:	1404b03a 	or	r2,r2,r16
    c444:	00000206 	br	c450 <__udivdi3+0x2c8>
    c448:	0007883a 	mov	r3,zero
    c44c:	0005883a 	mov	r2,zero
    c450:	dfc00b17 	ldw	ra,44(sp)
    c454:	df000a17 	ldw	fp,40(sp)
    c458:	ddc00917 	ldw	r23,36(sp)
    c45c:	dd800817 	ldw	r22,32(sp)
    c460:	dd400717 	ldw	r21,28(sp)
    c464:	dd000617 	ldw	r20,24(sp)
    c468:	dcc00517 	ldw	r19,20(sp)
    c46c:	dc800417 	ldw	r18,16(sp)
    c470:	dc400317 	ldw	r17,12(sp)
    c474:	dc000217 	ldw	r16,8(sp)
    c478:	dec00c04 	addi	sp,sp,48
    c47c:	f800283a 	ret
    c480:	00803fc4 	movi	r2,255
    c484:	11c5803a 	cmpltu	r2,r2,r7
    c488:	100490fa 	slli	r2,r2,3
    c48c:	003f9906 	br	c2f4 <__alt_exception_stack_pointer+0xf800c2f4>
    c490:	00803fc4 	movi	r2,255
    c494:	1445803a 	cmpltu	r2,r2,r17
    c498:	100490fa 	slli	r2,r2,3
    c49c:	003fad06 	br	c354 <__alt_exception_stack_pointer+0xf800c354>
    c4a0:	00804034 	movhi	r2,256
    c4a4:	10bfffc4 	addi	r2,r2,-1
    c4a8:	11809f36 	bltu	r2,r6,c728 <__udivdi3+0x5a0>
    c4ac:	00800404 	movi	r2,16
    c4b0:	003f4c06 	br	c1e4 <__alt_exception_stack_pointer+0xf800c1e4>
    c4b4:	3dce983a 	sll	r7,r7,r23
    c4b8:	30b8d83a 	srl	fp,r6,r2
    c4bc:	80a2d83a 	srl	r17,r16,r2
    c4c0:	35cc983a 	sll	r6,r6,r23
    c4c4:	3f38b03a 	or	fp,r7,fp
    c4c8:	e024d43a 	srli	r18,fp,16
    c4cc:	9884d83a 	srl	r2,r19,r2
    c4d0:	85e0983a 	sll	r16,r16,r23
    c4d4:	8809883a 	mov	r4,r17
    c4d8:	900b883a 	mov	r5,r18
    c4dc:	d9800015 	stw	r6,0(sp)
    c4e0:	1420b03a 	or	r16,r2,r16
    c4e4:	000cea40 	call	cea4 <__umodsi3>
    c4e8:	900b883a 	mov	r5,r18
    c4ec:	8809883a 	mov	r4,r17
    c4f0:	1029883a 	mov	r20,r2
    c4f4:	e5bfffcc 	andi	r22,fp,65535
    c4f8:	000ce400 	call	ce40 <__udivsi3>
    c4fc:	100b883a 	mov	r5,r2
    c500:	b009883a 	mov	r4,r22
    c504:	102b883a 	mov	r21,r2
    c508:	000cefc0 	call	cefc <__mulsi3>
    c50c:	a028943a 	slli	r20,r20,16
    c510:	8006d43a 	srli	r3,r16,16
    c514:	1d06b03a 	or	r3,r3,r20
    c518:	1880042e 	bgeu	r3,r2,c52c <__udivdi3+0x3a4>
    c51c:	1f07883a 	add	r3,r3,fp
    c520:	a93fffc4 	addi	r4,r21,-1
    c524:	1f00892e 	bgeu	r3,fp,c74c <__udivdi3+0x5c4>
    c528:	202b883a 	mov	r21,r4
    c52c:	18a3c83a 	sub	r17,r3,r2
    c530:	8809883a 	mov	r4,r17
    c534:	900b883a 	mov	r5,r18
    c538:	000cea40 	call	cea4 <__umodsi3>
    c53c:	1029883a 	mov	r20,r2
    c540:	8809883a 	mov	r4,r17
    c544:	900b883a 	mov	r5,r18
    c548:	a028943a 	slli	r20,r20,16
    c54c:	000ce400 	call	ce40 <__udivsi3>
    c550:	100b883a 	mov	r5,r2
    c554:	b009883a 	mov	r4,r22
    c558:	843fffcc 	andi	r16,r16,65535
    c55c:	1023883a 	mov	r17,r2
    c560:	8520b03a 	or	r16,r16,r20
    c564:	000cefc0 	call	cefc <__mulsi3>
    c568:	8080042e 	bgeu	r16,r2,c57c <__udivdi3+0x3f4>
    c56c:	8721883a 	add	r16,r16,fp
    c570:	88ffffc4 	addi	r3,r17,-1
    c574:	8700712e 	bgeu	r16,fp,c73c <__udivdi3+0x5b4>
    c578:	1823883a 	mov	r17,r3
    c57c:	a80e943a 	slli	r7,r21,16
    c580:	d8c00017 	ldw	r3,0(sp)
    c584:	80a1c83a 	sub	r16,r16,r2
    c588:	3c64b03a 	or	r18,r7,r17
    c58c:	1d3fffcc 	andi	r20,r3,65535
    c590:	9022d43a 	srli	r17,r18,16
    c594:	95bfffcc 	andi	r22,r18,65535
    c598:	a00b883a 	mov	r5,r20
    c59c:	b009883a 	mov	r4,r22
    c5a0:	182ad43a 	srli	r21,r3,16
    c5a4:	000cefc0 	call	cefc <__mulsi3>
    c5a8:	a00b883a 	mov	r5,r20
    c5ac:	8809883a 	mov	r4,r17
    c5b0:	1039883a 	mov	fp,r2
    c5b4:	000cefc0 	call	cefc <__mulsi3>
    c5b8:	8809883a 	mov	r4,r17
    c5bc:	a80b883a 	mov	r5,r21
    c5c0:	1029883a 	mov	r20,r2
    c5c4:	000cefc0 	call	cefc <__mulsi3>
    c5c8:	a80b883a 	mov	r5,r21
    c5cc:	b009883a 	mov	r4,r22
    c5d0:	1023883a 	mov	r17,r2
    c5d4:	000cefc0 	call	cefc <__mulsi3>
    c5d8:	e006d43a 	srli	r3,fp,16
    c5dc:	1505883a 	add	r2,r2,r20
    c5e0:	1887883a 	add	r3,r3,r2
    c5e4:	1d00022e 	bgeu	r3,r20,c5f0 <__udivdi3+0x468>
    c5e8:	00800074 	movhi	r2,1
    c5ec:	88a3883a 	add	r17,r17,r2
    c5f0:	1804d43a 	srli	r2,r3,16
    c5f4:	1463883a 	add	r17,r2,r17
    c5f8:	84404436 	bltu	r16,r17,c70c <__udivdi3+0x584>
    c5fc:	84403e26 	beq	r16,r17,c6f8 <__udivdi3+0x570>
    c600:	9005883a 	mov	r2,r18
    c604:	0007883a 	mov	r3,zero
    c608:	003f9106 	br	c450 <__alt_exception_stack_pointer+0xf800c450>
    c60c:	88e2983a 	sll	r17,r17,r3
    c610:	80aed83a 	srl	r23,r16,r2
    c614:	80e0983a 	sll	r16,r16,r3
    c618:	882ad43a 	srli	r21,r17,16
    c61c:	9884d83a 	srl	r2,r19,r2
    c620:	b809883a 	mov	r4,r23
    c624:	a80b883a 	mov	r5,r21
    c628:	98e4983a 	sll	r18,r19,r3
    c62c:	142cb03a 	or	r22,r2,r16
    c630:	000cea40 	call	cea4 <__umodsi3>
    c634:	b809883a 	mov	r4,r23
    c638:	a80b883a 	mov	r5,r21
    c63c:	1027883a 	mov	r19,r2
    c640:	8d3fffcc 	andi	r20,r17,65535
    c644:	000ce400 	call	ce40 <__udivsi3>
    c648:	a009883a 	mov	r4,r20
    c64c:	100b883a 	mov	r5,r2
    c650:	102f883a 	mov	r23,r2
    c654:	000cefc0 	call	cefc <__mulsi3>
    c658:	9826943a 	slli	r19,r19,16
    c65c:	b008d43a 	srli	r4,r22,16
    c660:	24c8b03a 	or	r4,r4,r19
    c664:	2080062e 	bgeu	r4,r2,c680 <__udivdi3+0x4f8>
    c668:	2449883a 	add	r4,r4,r17
    c66c:	b8ffffc4 	addi	r3,r23,-1
    c670:	24403c36 	bltu	r4,r17,c764 <__udivdi3+0x5dc>
    c674:	20803b2e 	bgeu	r4,r2,c764 <__udivdi3+0x5dc>
    c678:	bdffff84 	addi	r23,r23,-2
    c67c:	2449883a 	add	r4,r4,r17
    c680:	20a1c83a 	sub	r16,r4,r2
    c684:	a80b883a 	mov	r5,r21
    c688:	8009883a 	mov	r4,r16
    c68c:	000cea40 	call	cea4 <__umodsi3>
    c690:	a80b883a 	mov	r5,r21
    c694:	8009883a 	mov	r4,r16
    c698:	1027883a 	mov	r19,r2
    c69c:	000ce400 	call	ce40 <__udivsi3>
    c6a0:	a009883a 	mov	r4,r20
    c6a4:	100b883a 	mov	r5,r2
    c6a8:	9826943a 	slli	r19,r19,16
    c6ac:	1039883a 	mov	fp,r2
    c6b0:	000cefc0 	call	cefc <__mulsi3>
    c6b4:	b13fffcc 	andi	r4,r22,65535
    c6b8:	24c8b03a 	or	r4,r4,r19
    c6bc:	2080062e 	bgeu	r4,r2,c6d8 <__udivdi3+0x550>
    c6c0:	2449883a 	add	r4,r4,r17
    c6c4:	e0ffffc4 	addi	r3,fp,-1
    c6c8:	24402436 	bltu	r4,r17,c75c <__udivdi3+0x5d4>
    c6cc:	2080232e 	bgeu	r4,r2,c75c <__udivdi3+0x5d4>
    c6d0:	e73fff84 	addi	fp,fp,-2
    c6d4:	2449883a 	add	r4,r4,r17
    c6d8:	b82e943a 	slli	r23,r23,16
    c6dc:	20a1c83a 	sub	r16,r4,r2
    c6e0:	bf06b03a 	or	r3,r23,fp
    c6e4:	003f2806 	br	c388 <__alt_exception_stack_pointer+0xf800c388>
    c6e8:	2021883a 	mov	r16,r4
    c6ec:	003f5306 	br	c43c <__alt_exception_stack_pointer+0xf800c43c>
    c6f0:	1821883a 	mov	r16,r3
    c6f4:	003ef406 	br	c2c8 <__alt_exception_stack_pointer+0xf800c2c8>
    c6f8:	1806943a 	slli	r3,r3,16
    c6fc:	9de6983a 	sll	r19,r19,r23
    c700:	e73fffcc 	andi	fp,fp,65535
    c704:	1f07883a 	add	r3,r3,fp
    c708:	98ffbd2e 	bgeu	r19,r3,c600 <__alt_exception_stack_pointer+0xf800c600>
    c70c:	90bfffc4 	addi	r2,r18,-1
    c710:	0007883a 	mov	r3,zero
    c714:	003f4e06 	br	c450 <__alt_exception_stack_pointer+0xf800c450>
    c718:	00800604 	movi	r2,24
    c71c:	003ef506 	br	c2f4 <__alt_exception_stack_pointer+0xf800c2f4>
    c720:	00800604 	movi	r2,24
    c724:	003f0b06 	br	c354 <__alt_exception_stack_pointer+0xf800c354>
    c728:	00800604 	movi	r2,24
    c72c:	003ead06 	br	c1e4 <__alt_exception_stack_pointer+0xf800c1e4>
    c730:	0007883a 	mov	r3,zero
    c734:	00800044 	movi	r2,1
    c738:	003f4506 	br	c450 <__alt_exception_stack_pointer+0xf800c450>
    c73c:	80bf8e2e 	bgeu	r16,r2,c578 <__alt_exception_stack_pointer+0xf800c578>
    c740:	8c7fff84 	addi	r17,r17,-2
    c744:	8721883a 	add	r16,r16,fp
    c748:	003f8c06 	br	c57c <__alt_exception_stack_pointer+0xf800c57c>
    c74c:	18bf762e 	bgeu	r3,r2,c528 <__alt_exception_stack_pointer+0xf800c528>
    c750:	ad7fff84 	addi	r21,r21,-2
    c754:	1f07883a 	add	r3,r3,fp
    c758:	003f7406 	br	c52c <__alt_exception_stack_pointer+0xf800c52c>
    c75c:	1839883a 	mov	fp,r3
    c760:	003fdd06 	br	c6d8 <__alt_exception_stack_pointer+0xf800c6d8>
    c764:	182f883a 	mov	r23,r3
    c768:	003fc506 	br	c680 <__alt_exception_stack_pointer+0xf800c680>
    c76c:	b5bfff84 	addi	r22,r22,-2
    c770:	3c4f883a 	add	r7,r7,r17
    c774:	003f1a06 	br	c3e0 <__alt_exception_stack_pointer+0xf800c3e0>
    c778:	b5bfff84 	addi	r22,r22,-2
    c77c:	1c47883a 	add	r3,r3,r17
    c780:	003ebc06 	br	c274 <__alt_exception_stack_pointer+0xf800c274>

0000c784 <__umoddi3>:
    c784:	defff304 	addi	sp,sp,-52
    c788:	df000b15 	stw	fp,44(sp)
    c78c:	dc400415 	stw	r17,16(sp)
    c790:	dc000315 	stw	r16,12(sp)
    c794:	dfc00c15 	stw	ra,48(sp)
    c798:	ddc00a15 	stw	r23,40(sp)
    c79c:	dd800915 	stw	r22,36(sp)
    c7a0:	dd400815 	stw	r21,32(sp)
    c7a4:	dd000715 	stw	r20,28(sp)
    c7a8:	dcc00615 	stw	r19,24(sp)
    c7ac:	dc800515 	stw	r18,20(sp)
    c7b0:	2021883a 	mov	r16,r4
    c7b4:	2823883a 	mov	r17,r5
    c7b8:	2839883a 	mov	fp,r5
    c7bc:	3800401e 	bne	r7,zero,c8c0 <__umoddi3+0x13c>
    c7c0:	3027883a 	mov	r19,r6
    c7c4:	2029883a 	mov	r20,r4
    c7c8:	2980552e 	bgeu	r5,r6,c920 <__umoddi3+0x19c>
    c7cc:	00bfffd4 	movui	r2,65535
    c7d0:	1180a236 	bltu	r2,r6,ca5c <__umoddi3+0x2d8>
    c7d4:	01003fc4 	movi	r4,255
    c7d8:	2189803a 	cmpltu	r4,r4,r6
    c7dc:	200890fa 	slli	r4,r4,3
    c7e0:	3104d83a 	srl	r2,r6,r4
    c7e4:	00c00074 	movhi	r3,1
    c7e8:	18cae704 	addi	r3,r3,11164
    c7ec:	1885883a 	add	r2,r3,r2
    c7f0:	10c00003 	ldbu	r3,0(r2)
    c7f4:	00800804 	movi	r2,32
    c7f8:	1909883a 	add	r4,r3,r4
    c7fc:	1125c83a 	sub	r18,r2,r4
    c800:	90000526 	beq	r18,zero,c818 <__umoddi3+0x94>
    c804:	8ca2983a 	sll	r17,r17,r18
    c808:	8108d83a 	srl	r4,r16,r4
    c80c:	34a6983a 	sll	r19,r6,r18
    c810:	84a8983a 	sll	r20,r16,r18
    c814:	2478b03a 	or	fp,r4,r17
    c818:	982cd43a 	srli	r22,r19,16
    c81c:	e009883a 	mov	r4,fp
    c820:	9dffffcc 	andi	r23,r19,65535
    c824:	b00b883a 	mov	r5,r22
    c828:	000cea40 	call	cea4 <__umodsi3>
    c82c:	b00b883a 	mov	r5,r22
    c830:	e009883a 	mov	r4,fp
    c834:	102b883a 	mov	r21,r2
    c838:	000ce400 	call	ce40 <__udivsi3>
    c83c:	100b883a 	mov	r5,r2
    c840:	b809883a 	mov	r4,r23
    c844:	000cefc0 	call	cefc <__mulsi3>
    c848:	a82a943a 	slli	r21,r21,16
    c84c:	a006d43a 	srli	r3,r20,16
    c850:	1d46b03a 	or	r3,r3,r21
    c854:	1880032e 	bgeu	r3,r2,c864 <__umoddi3+0xe0>
    c858:	1cc7883a 	add	r3,r3,r19
    c85c:	1cc00136 	bltu	r3,r19,c864 <__umoddi3+0xe0>
    c860:	18813136 	bltu	r3,r2,cd28 <__umoddi3+0x5a4>
    c864:	18a1c83a 	sub	r16,r3,r2
    c868:	b00b883a 	mov	r5,r22
    c86c:	8009883a 	mov	r4,r16
    c870:	000cea40 	call	cea4 <__umodsi3>
    c874:	b00b883a 	mov	r5,r22
    c878:	8009883a 	mov	r4,r16
    c87c:	1023883a 	mov	r17,r2
    c880:	000ce400 	call	ce40 <__udivsi3>
    c884:	100b883a 	mov	r5,r2
    c888:	b809883a 	mov	r4,r23
    c88c:	8822943a 	slli	r17,r17,16
    c890:	000cefc0 	call	cefc <__mulsi3>
    c894:	a0ffffcc 	andi	r3,r20,65535
    c898:	1c46b03a 	or	r3,r3,r17
    c89c:	1880042e 	bgeu	r3,r2,c8b0 <__umoddi3+0x12c>
    c8a0:	1cc7883a 	add	r3,r3,r19
    c8a4:	1cc00236 	bltu	r3,r19,c8b0 <__umoddi3+0x12c>
    c8a8:	1880012e 	bgeu	r3,r2,c8b0 <__umoddi3+0x12c>
    c8ac:	1cc7883a 	add	r3,r3,r19
    c8b0:	1885c83a 	sub	r2,r3,r2
    c8b4:	1484d83a 	srl	r2,r2,r18
    c8b8:	0007883a 	mov	r3,zero
    c8bc:	00005306 	br	ca0c <__umoddi3+0x288>
    c8c0:	29c05036 	bltu	r5,r7,ca04 <__umoddi3+0x280>
    c8c4:	00bfffd4 	movui	r2,65535
    c8c8:	11c05c2e 	bgeu	r2,r7,ca3c <__umoddi3+0x2b8>
    c8cc:	00804034 	movhi	r2,256
    c8d0:	10bfffc4 	addi	r2,r2,-1
    c8d4:	11c10636 	bltu	r2,r7,ccf0 <__umoddi3+0x56c>
    c8d8:	01000404 	movi	r4,16
    c8dc:	3904d83a 	srl	r2,r7,r4
    c8e0:	00c00074 	movhi	r3,1
    c8e4:	18cae704 	addi	r3,r3,11164
    c8e8:	1885883a 	add	r2,r3,r2
    c8ec:	14c00003 	ldbu	r19,0(r2)
    c8f0:	00c00804 	movi	r3,32
    c8f4:	9927883a 	add	r19,r19,r4
    c8f8:	1ce9c83a 	sub	r20,r3,r19
    c8fc:	a0005c1e 	bne	r20,zero,ca70 <__umoddi3+0x2ec>
    c900:	3c400136 	bltu	r7,r17,c908 <__umoddi3+0x184>
    c904:	81810a36 	bltu	r16,r6,cd30 <__umoddi3+0x5ac>
    c908:	8185c83a 	sub	r2,r16,r6
    c90c:	89e3c83a 	sub	r17,r17,r7
    c910:	8089803a 	cmpltu	r4,r16,r2
    c914:	8939c83a 	sub	fp,r17,r4
    c918:	e007883a 	mov	r3,fp
    c91c:	00003b06 	br	ca0c <__umoddi3+0x288>
    c920:	3000041e 	bne	r6,zero,c934 <__umoddi3+0x1b0>
    c924:	000b883a 	mov	r5,zero
    c928:	01000044 	movi	r4,1
    c92c:	000ce400 	call	ce40 <__udivsi3>
    c930:	1027883a 	mov	r19,r2
    c934:	00bfffd4 	movui	r2,65535
    c938:	14c0442e 	bgeu	r2,r19,ca4c <__umoddi3+0x2c8>
    c93c:	00804034 	movhi	r2,256
    c940:	10bfffc4 	addi	r2,r2,-1
    c944:	14c0ec36 	bltu	r2,r19,ccf8 <__umoddi3+0x574>
    c948:	00800404 	movi	r2,16
    c94c:	9886d83a 	srl	r3,r19,r2
    c950:	01000074 	movhi	r4,1
    c954:	210ae704 	addi	r4,r4,11164
    c958:	20c7883a 	add	r3,r4,r3
    c95c:	18c00003 	ldbu	r3,0(r3)
    c960:	1887883a 	add	r3,r3,r2
    c964:	00800804 	movi	r2,32
    c968:	10e5c83a 	sub	r18,r2,r3
    c96c:	9000ab1e 	bne	r18,zero,cc1c <__umoddi3+0x498>
    c970:	982cd43a 	srli	r22,r19,16
    c974:	8ce3c83a 	sub	r17,r17,r19
    c978:	9dffffcc 	andi	r23,r19,65535
    c97c:	b00b883a 	mov	r5,r22
    c980:	8809883a 	mov	r4,r17
    c984:	000cea40 	call	cea4 <__umodsi3>
    c988:	b00b883a 	mov	r5,r22
    c98c:	8809883a 	mov	r4,r17
    c990:	102b883a 	mov	r21,r2
    c994:	000ce400 	call	ce40 <__udivsi3>
    c998:	b80b883a 	mov	r5,r23
    c99c:	1009883a 	mov	r4,r2
    c9a0:	000cefc0 	call	cefc <__mulsi3>
    c9a4:	a82a943a 	slli	r21,r21,16
    c9a8:	a006d43a 	srli	r3,r20,16
    c9ac:	1d46b03a 	or	r3,r3,r21
    c9b0:	1880042e 	bgeu	r3,r2,c9c4 <__umoddi3+0x240>
    c9b4:	1cc7883a 	add	r3,r3,r19
    c9b8:	1cc00236 	bltu	r3,r19,c9c4 <__umoddi3+0x240>
    c9bc:	1880012e 	bgeu	r3,r2,c9c4 <__umoddi3+0x240>
    c9c0:	1cc7883a 	add	r3,r3,r19
    c9c4:	18a1c83a 	sub	r16,r3,r2
    c9c8:	b00b883a 	mov	r5,r22
    c9cc:	8009883a 	mov	r4,r16
    c9d0:	000cea40 	call	cea4 <__umodsi3>
    c9d4:	1023883a 	mov	r17,r2
    c9d8:	b00b883a 	mov	r5,r22
    c9dc:	8009883a 	mov	r4,r16
    c9e0:	000ce400 	call	ce40 <__udivsi3>
    c9e4:	8822943a 	slli	r17,r17,16
    c9e8:	b80b883a 	mov	r5,r23
    c9ec:	1009883a 	mov	r4,r2
    c9f0:	000cefc0 	call	cefc <__mulsi3>
    c9f4:	a53fffcc 	andi	r20,r20,65535
    c9f8:	a446b03a 	or	r3,r20,r17
    c9fc:	18bfac2e 	bgeu	r3,r2,c8b0 <__alt_exception_stack_pointer+0xf800c8b0>
    ca00:	003fa706 	br	c8a0 <__alt_exception_stack_pointer+0xf800c8a0>
    ca04:	2005883a 	mov	r2,r4
    ca08:	2807883a 	mov	r3,r5
    ca0c:	dfc00c17 	ldw	ra,48(sp)
    ca10:	df000b17 	ldw	fp,44(sp)
    ca14:	ddc00a17 	ldw	r23,40(sp)
    ca18:	dd800917 	ldw	r22,36(sp)
    ca1c:	dd400817 	ldw	r21,32(sp)
    ca20:	dd000717 	ldw	r20,28(sp)
    ca24:	dcc00617 	ldw	r19,24(sp)
    ca28:	dc800517 	ldw	r18,20(sp)
    ca2c:	dc400417 	ldw	r17,16(sp)
    ca30:	dc000317 	ldw	r16,12(sp)
    ca34:	dec00d04 	addi	sp,sp,52
    ca38:	f800283a 	ret
    ca3c:	04c03fc4 	movi	r19,255
    ca40:	99c9803a 	cmpltu	r4,r19,r7
    ca44:	200890fa 	slli	r4,r4,3
    ca48:	003fa406 	br	c8dc <__alt_exception_stack_pointer+0xf800c8dc>
    ca4c:	00803fc4 	movi	r2,255
    ca50:	14c5803a 	cmpltu	r2,r2,r19
    ca54:	100490fa 	slli	r2,r2,3
    ca58:	003fbc06 	br	c94c <__alt_exception_stack_pointer+0xf800c94c>
    ca5c:	00804034 	movhi	r2,256
    ca60:	10bfffc4 	addi	r2,r2,-1
    ca64:	1180a636 	bltu	r2,r6,cd00 <__umoddi3+0x57c>
    ca68:	01000404 	movi	r4,16
    ca6c:	003f5c06 	br	c7e0 <__alt_exception_stack_pointer+0xf800c7e0>
    ca70:	3d0e983a 	sll	r7,r7,r20
    ca74:	34ead83a 	srl	r21,r6,r19
    ca78:	8cc6d83a 	srl	r3,r17,r19
    ca7c:	8d10983a 	sll	r8,r17,r20
    ca80:	3d6ab03a 	or	r21,r7,r21
    ca84:	a82cd43a 	srli	r22,r21,16
    ca88:	84e2d83a 	srl	r17,r16,r19
    ca8c:	1809883a 	mov	r4,r3
    ca90:	b00b883a 	mov	r5,r22
    ca94:	8a22b03a 	or	r17,r17,r8
    ca98:	3524983a 	sll	r18,r6,r20
    ca9c:	dc400015 	stw	r17,0(sp)
    caa0:	d8c00115 	stw	r3,4(sp)
    caa4:	000cea40 	call	cea4 <__umodsi3>
    caa8:	d8c00117 	ldw	r3,4(sp)
    caac:	b00b883a 	mov	r5,r22
    cab0:	1039883a 	mov	fp,r2
    cab4:	1809883a 	mov	r4,r3
    cab8:	000ce400 	call	ce40 <__udivsi3>
    cabc:	adffffcc 	andi	r23,r21,65535
    cac0:	100b883a 	mov	r5,r2
    cac4:	b809883a 	mov	r4,r23
    cac8:	1023883a 	mov	r17,r2
    cacc:	000cefc0 	call	cefc <__mulsi3>
    cad0:	d9400017 	ldw	r5,0(sp)
    cad4:	e008943a 	slli	r4,fp,16
    cad8:	8520983a 	sll	r16,r16,r20
    cadc:	2806d43a 	srli	r3,r5,16
    cae0:	1906b03a 	or	r3,r3,r4
    cae4:	1880042e 	bgeu	r3,r2,caf8 <__umoddi3+0x374>
    cae8:	1d47883a 	add	r3,r3,r21
    caec:	893fffc4 	addi	r4,r17,-1
    caf0:	1d40892e 	bgeu	r3,r21,cd18 <__umoddi3+0x594>
    caf4:	2023883a 	mov	r17,r4
    caf8:	18b9c83a 	sub	fp,r3,r2
    cafc:	b00b883a 	mov	r5,r22
    cb00:	e009883a 	mov	r4,fp
    cb04:	000cea40 	call	cea4 <__umodsi3>
    cb08:	b00b883a 	mov	r5,r22
    cb0c:	e009883a 	mov	r4,fp
    cb10:	d8800215 	stw	r2,8(sp)
    cb14:	000ce400 	call	ce40 <__udivsi3>
    cb18:	100b883a 	mov	r5,r2
    cb1c:	b809883a 	mov	r4,r23
    cb20:	102d883a 	mov	r22,r2
    cb24:	000cefc0 	call	cefc <__mulsi3>
    cb28:	d9800217 	ldw	r6,8(sp)
    cb2c:	d8c00017 	ldw	r3,0(sp)
    cb30:	300c943a 	slli	r6,r6,16
    cb34:	1a3fffcc 	andi	r8,r3,65535
    cb38:	4190b03a 	or	r8,r8,r6
    cb3c:	4080042e 	bgeu	r8,r2,cb50 <__umoddi3+0x3cc>
    cb40:	4551883a 	add	r8,r8,r21
    cb44:	b0ffffc4 	addi	r3,r22,-1
    cb48:	45406f2e 	bgeu	r8,r21,cd08 <__umoddi3+0x584>
    cb4c:	182d883a 	mov	r22,r3
    cb50:	880e943a 	slli	r7,r17,16
    cb54:	9006d43a 	srli	r3,r18,16
    cb58:	91bfffcc 	andi	r6,r18,65535
    cb5c:	3dacb03a 	or	r22,r7,r22
    cb60:	b02ed43a 	srli	r23,r22,16
    cb64:	b5bfffcc 	andi	r22,r22,65535
    cb68:	300b883a 	mov	r5,r6
    cb6c:	b009883a 	mov	r4,r22
    cb70:	40a3c83a 	sub	r17,r8,r2
    cb74:	d8c00115 	stw	r3,4(sp)
    cb78:	d9800215 	stw	r6,8(sp)
    cb7c:	000cefc0 	call	cefc <__mulsi3>
    cb80:	d9800217 	ldw	r6,8(sp)
    cb84:	b809883a 	mov	r4,r23
    cb88:	1039883a 	mov	fp,r2
    cb8c:	300b883a 	mov	r5,r6
    cb90:	000cefc0 	call	cefc <__mulsi3>
    cb94:	d8c00117 	ldw	r3,4(sp)
    cb98:	b809883a 	mov	r4,r23
    cb9c:	d8800215 	stw	r2,8(sp)
    cba0:	180b883a 	mov	r5,r3
    cba4:	000cefc0 	call	cefc <__mulsi3>
    cba8:	d8c00117 	ldw	r3,4(sp)
    cbac:	b009883a 	mov	r4,r22
    cbb0:	102f883a 	mov	r23,r2
    cbb4:	180b883a 	mov	r5,r3
    cbb8:	000cefc0 	call	cefc <__mulsi3>
    cbbc:	d9800217 	ldw	r6,8(sp)
    cbc0:	e006d43a 	srli	r3,fp,16
    cbc4:	1185883a 	add	r2,r2,r6
    cbc8:	1885883a 	add	r2,r3,r2
    cbcc:	1180022e 	bgeu	r2,r6,cbd8 <__umoddi3+0x454>
    cbd0:	00c00074 	movhi	r3,1
    cbd4:	b8ef883a 	add	r23,r23,r3
    cbd8:	1006d43a 	srli	r3,r2,16
    cbdc:	1004943a 	slli	r2,r2,16
    cbe0:	e73fffcc 	andi	fp,fp,65535
    cbe4:	1dc7883a 	add	r3,r3,r23
    cbe8:	1739883a 	add	fp,r2,fp
    cbec:	88c03a36 	bltu	r17,r3,ccd8 <__umoddi3+0x554>
    cbf0:	88c05126 	beq	r17,r3,cd38 <__umoddi3+0x5b4>
    cbf4:	88c9c83a 	sub	r4,r17,r3
    cbf8:	e00f883a 	mov	r7,fp
    cbfc:	81cfc83a 	sub	r7,r16,r7
    cc00:	81c7803a 	cmpltu	r3,r16,r7
    cc04:	20c7c83a 	sub	r3,r4,r3
    cc08:	1cc4983a 	sll	r2,r3,r19
    cc0c:	3d0ed83a 	srl	r7,r7,r20
    cc10:	1d06d83a 	srl	r3,r3,r20
    cc14:	11c4b03a 	or	r2,r2,r7
    cc18:	003f7c06 	br	ca0c <__alt_exception_stack_pointer+0xf800ca0c>
    cc1c:	9ca6983a 	sll	r19,r19,r18
    cc20:	88f8d83a 	srl	fp,r17,r3
    cc24:	80c4d83a 	srl	r2,r16,r3
    cc28:	982cd43a 	srli	r22,r19,16
    cc2c:	8ca2983a 	sll	r17,r17,r18
    cc30:	e009883a 	mov	r4,fp
    cc34:	b00b883a 	mov	r5,r22
    cc38:	146ab03a 	or	r21,r2,r17
    cc3c:	000cea40 	call	cea4 <__umodsi3>
    cc40:	b00b883a 	mov	r5,r22
    cc44:	e009883a 	mov	r4,fp
    cc48:	1029883a 	mov	r20,r2
    cc4c:	9dffffcc 	andi	r23,r19,65535
    cc50:	000ce400 	call	ce40 <__udivsi3>
    cc54:	b809883a 	mov	r4,r23
    cc58:	100b883a 	mov	r5,r2
    cc5c:	000cefc0 	call	cefc <__mulsi3>
    cc60:	a008943a 	slli	r4,r20,16
    cc64:	a806d43a 	srli	r3,r21,16
    cc68:	84a8983a 	sll	r20,r16,r18
    cc6c:	1906b03a 	or	r3,r3,r4
    cc70:	1880042e 	bgeu	r3,r2,cc84 <__umoddi3+0x500>
    cc74:	1cc7883a 	add	r3,r3,r19
    cc78:	1cc00236 	bltu	r3,r19,cc84 <__umoddi3+0x500>
    cc7c:	1880012e 	bgeu	r3,r2,cc84 <__umoddi3+0x500>
    cc80:	1cc7883a 	add	r3,r3,r19
    cc84:	18a3c83a 	sub	r17,r3,r2
    cc88:	b00b883a 	mov	r5,r22
    cc8c:	8809883a 	mov	r4,r17
    cc90:	000cea40 	call	cea4 <__umodsi3>
    cc94:	b00b883a 	mov	r5,r22
    cc98:	8809883a 	mov	r4,r17
    cc9c:	1021883a 	mov	r16,r2
    cca0:	000ce400 	call	ce40 <__udivsi3>
    cca4:	100b883a 	mov	r5,r2
    cca8:	b809883a 	mov	r4,r23
    ccac:	8020943a 	slli	r16,r16,16
    ccb0:	000cefc0 	call	cefc <__mulsi3>
    ccb4:	a8ffffcc 	andi	r3,r21,65535
    ccb8:	1c06b03a 	or	r3,r3,r16
    ccbc:	1880042e 	bgeu	r3,r2,ccd0 <__umoddi3+0x54c>
    ccc0:	1cc7883a 	add	r3,r3,r19
    ccc4:	1cc00236 	bltu	r3,r19,ccd0 <__umoddi3+0x54c>
    ccc8:	1880012e 	bgeu	r3,r2,ccd0 <__umoddi3+0x54c>
    cccc:	1cc7883a 	add	r3,r3,r19
    ccd0:	18a3c83a 	sub	r17,r3,r2
    ccd4:	003f2906 	br	c97c <__alt_exception_stack_pointer+0xf800c97c>
    ccd8:	e48fc83a 	sub	r7,fp,r18
    ccdc:	1d49c83a 	sub	r4,r3,r21
    cce0:	e1f9803a 	cmpltu	fp,fp,r7
    cce4:	2739c83a 	sub	fp,r4,fp
    cce8:	8f09c83a 	sub	r4,r17,fp
    ccec:	003fc306 	br	cbfc <__alt_exception_stack_pointer+0xf800cbfc>
    ccf0:	01000604 	movi	r4,24
    ccf4:	003ef906 	br	c8dc <__alt_exception_stack_pointer+0xf800c8dc>
    ccf8:	00800604 	movi	r2,24
    ccfc:	003f1306 	br	c94c <__alt_exception_stack_pointer+0xf800c94c>
    cd00:	01000604 	movi	r4,24
    cd04:	003eb606 	br	c7e0 <__alt_exception_stack_pointer+0xf800c7e0>
    cd08:	40bf902e 	bgeu	r8,r2,cb4c <__alt_exception_stack_pointer+0xf800cb4c>
    cd0c:	b5bfff84 	addi	r22,r22,-2
    cd10:	4551883a 	add	r8,r8,r21
    cd14:	003f8e06 	br	cb50 <__alt_exception_stack_pointer+0xf800cb50>
    cd18:	18bf762e 	bgeu	r3,r2,caf4 <__alt_exception_stack_pointer+0xf800caf4>
    cd1c:	8c7fff84 	addi	r17,r17,-2
    cd20:	1d47883a 	add	r3,r3,r21
    cd24:	003f7406 	br	caf8 <__alt_exception_stack_pointer+0xf800caf8>
    cd28:	1cc7883a 	add	r3,r3,r19
    cd2c:	003ecd06 	br	c864 <__alt_exception_stack_pointer+0xf800c864>
    cd30:	8005883a 	mov	r2,r16
    cd34:	003ef806 	br	c918 <__alt_exception_stack_pointer+0xf800c918>
    cd38:	873fe736 	bltu	r16,fp,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    cd3c:	e00f883a 	mov	r7,fp
    cd40:	0009883a 	mov	r4,zero
    cd44:	003fad06 	br	cbfc <__alt_exception_stack_pointer+0xf800cbfc>

0000cd48 <__divsi3>:
    cd48:	20001b16 	blt	r4,zero,cdb8 <__divsi3+0x70>
    cd4c:	000f883a 	mov	r7,zero
    cd50:	28001616 	blt	r5,zero,cdac <__divsi3+0x64>
    cd54:	200d883a 	mov	r6,r4
    cd58:	29001a2e 	bgeu	r5,r4,cdc4 <__divsi3+0x7c>
    cd5c:	00800804 	movi	r2,32
    cd60:	00c00044 	movi	r3,1
    cd64:	00000106 	br	cd6c <__divsi3+0x24>
    cd68:	10000d26 	beq	r2,zero,cda0 <__divsi3+0x58>
    cd6c:	294b883a 	add	r5,r5,r5
    cd70:	10bfffc4 	addi	r2,r2,-1
    cd74:	18c7883a 	add	r3,r3,r3
    cd78:	293ffb36 	bltu	r5,r4,cd68 <__alt_exception_stack_pointer+0xf800cd68>
    cd7c:	0005883a 	mov	r2,zero
    cd80:	18000726 	beq	r3,zero,cda0 <__divsi3+0x58>
    cd84:	0005883a 	mov	r2,zero
    cd88:	31400236 	bltu	r6,r5,cd94 <__divsi3+0x4c>
    cd8c:	314dc83a 	sub	r6,r6,r5
    cd90:	10c4b03a 	or	r2,r2,r3
    cd94:	1806d07a 	srli	r3,r3,1
    cd98:	280ad07a 	srli	r5,r5,1
    cd9c:	183ffa1e 	bne	r3,zero,cd88 <__alt_exception_stack_pointer+0xf800cd88>
    cda0:	38000126 	beq	r7,zero,cda8 <__divsi3+0x60>
    cda4:	0085c83a 	sub	r2,zero,r2
    cda8:	f800283a 	ret
    cdac:	014bc83a 	sub	r5,zero,r5
    cdb0:	39c0005c 	xori	r7,r7,1
    cdb4:	003fe706 	br	cd54 <__alt_exception_stack_pointer+0xf800cd54>
    cdb8:	0109c83a 	sub	r4,zero,r4
    cdbc:	01c00044 	movi	r7,1
    cdc0:	003fe306 	br	cd50 <__alt_exception_stack_pointer+0xf800cd50>
    cdc4:	00c00044 	movi	r3,1
    cdc8:	003fee06 	br	cd84 <__alt_exception_stack_pointer+0xf800cd84>

0000cdcc <__modsi3>:
    cdcc:	20001716 	blt	r4,zero,ce2c <__modsi3+0x60>
    cdd0:	000f883a 	mov	r7,zero
    cdd4:	2005883a 	mov	r2,r4
    cdd8:	28001216 	blt	r5,zero,ce24 <__modsi3+0x58>
    cddc:	2900162e 	bgeu	r5,r4,ce38 <__modsi3+0x6c>
    cde0:	01800804 	movi	r6,32
    cde4:	00c00044 	movi	r3,1
    cde8:	00000106 	br	cdf0 <__modsi3+0x24>
    cdec:	30000a26 	beq	r6,zero,ce18 <__modsi3+0x4c>
    cdf0:	294b883a 	add	r5,r5,r5
    cdf4:	31bfffc4 	addi	r6,r6,-1
    cdf8:	18c7883a 	add	r3,r3,r3
    cdfc:	293ffb36 	bltu	r5,r4,cdec <__alt_exception_stack_pointer+0xf800cdec>
    ce00:	18000526 	beq	r3,zero,ce18 <__modsi3+0x4c>
    ce04:	1806d07a 	srli	r3,r3,1
    ce08:	11400136 	bltu	r2,r5,ce10 <__modsi3+0x44>
    ce0c:	1145c83a 	sub	r2,r2,r5
    ce10:	280ad07a 	srli	r5,r5,1
    ce14:	183ffb1e 	bne	r3,zero,ce04 <__alt_exception_stack_pointer+0xf800ce04>
    ce18:	38000126 	beq	r7,zero,ce20 <__modsi3+0x54>
    ce1c:	0085c83a 	sub	r2,zero,r2
    ce20:	f800283a 	ret
    ce24:	014bc83a 	sub	r5,zero,r5
    ce28:	003fec06 	br	cddc <__alt_exception_stack_pointer+0xf800cddc>
    ce2c:	0109c83a 	sub	r4,zero,r4
    ce30:	01c00044 	movi	r7,1
    ce34:	003fe706 	br	cdd4 <__alt_exception_stack_pointer+0xf800cdd4>
    ce38:	00c00044 	movi	r3,1
    ce3c:	003ff106 	br	ce04 <__alt_exception_stack_pointer+0xf800ce04>

0000ce40 <__udivsi3>:
    ce40:	200d883a 	mov	r6,r4
    ce44:	2900152e 	bgeu	r5,r4,ce9c <__udivsi3+0x5c>
    ce48:	28001416 	blt	r5,zero,ce9c <__udivsi3+0x5c>
    ce4c:	00800804 	movi	r2,32
    ce50:	00c00044 	movi	r3,1
    ce54:	00000206 	br	ce60 <__udivsi3+0x20>
    ce58:	10000e26 	beq	r2,zero,ce94 <__udivsi3+0x54>
    ce5c:	28000516 	blt	r5,zero,ce74 <__udivsi3+0x34>
    ce60:	294b883a 	add	r5,r5,r5
    ce64:	10bfffc4 	addi	r2,r2,-1
    ce68:	18c7883a 	add	r3,r3,r3
    ce6c:	293ffa36 	bltu	r5,r4,ce58 <__alt_exception_stack_pointer+0xf800ce58>
    ce70:	18000826 	beq	r3,zero,ce94 <__udivsi3+0x54>
    ce74:	0005883a 	mov	r2,zero
    ce78:	31400236 	bltu	r6,r5,ce84 <__udivsi3+0x44>
    ce7c:	314dc83a 	sub	r6,r6,r5
    ce80:	10c4b03a 	or	r2,r2,r3
    ce84:	1806d07a 	srli	r3,r3,1
    ce88:	280ad07a 	srli	r5,r5,1
    ce8c:	183ffa1e 	bne	r3,zero,ce78 <__alt_exception_stack_pointer+0xf800ce78>
    ce90:	f800283a 	ret
    ce94:	0005883a 	mov	r2,zero
    ce98:	f800283a 	ret
    ce9c:	00c00044 	movi	r3,1
    cea0:	003ff406 	br	ce74 <__alt_exception_stack_pointer+0xf800ce74>

0000cea4 <__umodsi3>:
    cea4:	2005883a 	mov	r2,r4
    cea8:	2900122e 	bgeu	r5,r4,cef4 <__umodsi3+0x50>
    ceac:	28001116 	blt	r5,zero,cef4 <__umodsi3+0x50>
    ceb0:	01800804 	movi	r6,32
    ceb4:	00c00044 	movi	r3,1
    ceb8:	00000206 	br	cec4 <__umodsi3+0x20>
    cebc:	30000c26 	beq	r6,zero,cef0 <__umodsi3+0x4c>
    cec0:	28000516 	blt	r5,zero,ced8 <__umodsi3+0x34>
    cec4:	294b883a 	add	r5,r5,r5
    cec8:	31bfffc4 	addi	r6,r6,-1
    cecc:	18c7883a 	add	r3,r3,r3
    ced0:	293ffa36 	bltu	r5,r4,cebc <__alt_exception_stack_pointer+0xf800cebc>
    ced4:	18000626 	beq	r3,zero,cef0 <__umodsi3+0x4c>
    ced8:	1806d07a 	srli	r3,r3,1
    cedc:	11400136 	bltu	r2,r5,cee4 <__umodsi3+0x40>
    cee0:	1145c83a 	sub	r2,r2,r5
    cee4:	280ad07a 	srli	r5,r5,1
    cee8:	183ffb1e 	bne	r3,zero,ced8 <__alt_exception_stack_pointer+0xf800ced8>
    ceec:	f800283a 	ret
    cef0:	f800283a 	ret
    cef4:	00c00044 	movi	r3,1
    cef8:	003ff706 	br	ced8 <__alt_exception_stack_pointer+0xf800ced8>

0000cefc <__mulsi3>:
    cefc:	0005883a 	mov	r2,zero
    cf00:	20000726 	beq	r4,zero,cf20 <__mulsi3+0x24>
    cf04:	20c0004c 	andi	r3,r4,1
    cf08:	2008d07a 	srli	r4,r4,1
    cf0c:	18000126 	beq	r3,zero,cf14 <__mulsi3+0x18>
    cf10:	1145883a 	add	r2,r2,r5
    cf14:	294b883a 	add	r5,r5,r5
    cf18:	203ffa1e 	bne	r4,zero,cf04 <__alt_exception_stack_pointer+0xf800cf04>
    cf1c:	f800283a 	ret
    cf20:	f800283a 	ret

0000cf24 <__adddf3>:
    cf24:	02c00434 	movhi	r11,16
    cf28:	5affffc4 	addi	r11,r11,-1
    cf2c:	2806d7fa 	srli	r3,r5,31
    cf30:	2ad4703a 	and	r10,r5,r11
    cf34:	3ad2703a 	and	r9,r7,r11
    cf38:	3804d53a 	srli	r2,r7,20
    cf3c:	3018d77a 	srli	r12,r6,29
    cf40:	280ad53a 	srli	r5,r5,20
    cf44:	501490fa 	slli	r10,r10,3
    cf48:	2010d77a 	srli	r8,r4,29
    cf4c:	481290fa 	slli	r9,r9,3
    cf50:	380ed7fa 	srli	r7,r7,31
    cf54:	defffb04 	addi	sp,sp,-20
    cf58:	dc800215 	stw	r18,8(sp)
    cf5c:	dc400115 	stw	r17,4(sp)
    cf60:	dc000015 	stw	r16,0(sp)
    cf64:	dfc00415 	stw	ra,16(sp)
    cf68:	dcc00315 	stw	r19,12(sp)
    cf6c:	1c803fcc 	andi	r18,r3,255
    cf70:	2c01ffcc 	andi	r16,r5,2047
    cf74:	5210b03a 	or	r8,r10,r8
    cf78:	202290fa 	slli	r17,r4,3
    cf7c:	1081ffcc 	andi	r2,r2,2047
    cf80:	4b12b03a 	or	r9,r9,r12
    cf84:	300c90fa 	slli	r6,r6,3
    cf88:	91c07526 	beq	r18,r7,d160 <__adddf3+0x23c>
    cf8c:	8087c83a 	sub	r3,r16,r2
    cf90:	00c0ab0e 	bge	zero,r3,d240 <__adddf3+0x31c>
    cf94:	10002a1e 	bne	r2,zero,d040 <__adddf3+0x11c>
    cf98:	4984b03a 	or	r2,r9,r6
    cf9c:	1000961e 	bne	r2,zero,d1f8 <__adddf3+0x2d4>
    cfa0:	888001cc 	andi	r2,r17,7
    cfa4:	10000726 	beq	r2,zero,cfc4 <__adddf3+0xa0>
    cfa8:	888003cc 	andi	r2,r17,15
    cfac:	00c00104 	movi	r3,4
    cfb0:	10c00426 	beq	r2,r3,cfc4 <__adddf3+0xa0>
    cfb4:	88c7883a 	add	r3,r17,r3
    cfb8:	1c63803a 	cmpltu	r17,r3,r17
    cfbc:	4451883a 	add	r8,r8,r17
    cfc0:	1823883a 	mov	r17,r3
    cfc4:	4080202c 	andhi	r2,r8,128
    cfc8:	10005926 	beq	r2,zero,d130 <__adddf3+0x20c>
    cfcc:	84000044 	addi	r16,r16,1
    cfd0:	0081ffc4 	movi	r2,2047
    cfd4:	8080ba26 	beq	r16,r2,d2c0 <__adddf3+0x39c>
    cfd8:	00bfe034 	movhi	r2,65408
    cfdc:	10bfffc4 	addi	r2,r2,-1
    cfe0:	4090703a 	and	r8,r8,r2
    cfe4:	4004977a 	slli	r2,r8,29
    cfe8:	4010927a 	slli	r8,r8,9
    cfec:	8822d0fa 	srli	r17,r17,3
    cff0:	8401ffcc 	andi	r16,r16,2047
    cff4:	4010d33a 	srli	r8,r8,12
    cff8:	9007883a 	mov	r3,r18
    cffc:	1444b03a 	or	r2,r2,r17
    d000:	8401ffcc 	andi	r16,r16,2047
    d004:	8020953a 	slli	r16,r16,20
    d008:	18c03fcc 	andi	r3,r3,255
    d00c:	01000434 	movhi	r4,16
    d010:	213fffc4 	addi	r4,r4,-1
    d014:	180697fa 	slli	r3,r3,31
    d018:	4110703a 	and	r8,r8,r4
    d01c:	4410b03a 	or	r8,r8,r16
    d020:	40c6b03a 	or	r3,r8,r3
    d024:	dfc00417 	ldw	ra,16(sp)
    d028:	dcc00317 	ldw	r19,12(sp)
    d02c:	dc800217 	ldw	r18,8(sp)
    d030:	dc400117 	ldw	r17,4(sp)
    d034:	dc000017 	ldw	r16,0(sp)
    d038:	dec00504 	addi	sp,sp,20
    d03c:	f800283a 	ret
    d040:	0081ffc4 	movi	r2,2047
    d044:	80bfd626 	beq	r16,r2,cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d048:	4a402034 	orhi	r9,r9,128
    d04c:	00800e04 	movi	r2,56
    d050:	10c09f16 	blt	r2,r3,d2d0 <__adddf3+0x3ac>
    d054:	008007c4 	movi	r2,31
    d058:	10c0c216 	blt	r2,r3,d364 <__adddf3+0x440>
    d05c:	00800804 	movi	r2,32
    d060:	10c5c83a 	sub	r2,r2,r3
    d064:	488a983a 	sll	r5,r9,r2
    d068:	30c8d83a 	srl	r4,r6,r3
    d06c:	3084983a 	sll	r2,r6,r2
    d070:	48c6d83a 	srl	r3,r9,r3
    d074:	290cb03a 	or	r6,r5,r4
    d078:	1004c03a 	cmpne	r2,r2,zero
    d07c:	308cb03a 	or	r6,r6,r2
    d080:	898dc83a 	sub	r6,r17,r6
    d084:	89a3803a 	cmpltu	r17,r17,r6
    d088:	40d1c83a 	sub	r8,r8,r3
    d08c:	4451c83a 	sub	r8,r8,r17
    d090:	3023883a 	mov	r17,r6
    d094:	4080202c 	andhi	r2,r8,128
    d098:	10002326 	beq	r2,zero,d128 <__adddf3+0x204>
    d09c:	04c02034 	movhi	r19,128
    d0a0:	9cffffc4 	addi	r19,r19,-1
    d0a4:	44e6703a 	and	r19,r8,r19
    d0a8:	98007626 	beq	r19,zero,d284 <__adddf3+0x360>
    d0ac:	9809883a 	mov	r4,r19
    d0b0:	000f7640 	call	f764 <__clzsi2>
    d0b4:	10fffe04 	addi	r3,r2,-8
    d0b8:	010007c4 	movi	r4,31
    d0bc:	20c07716 	blt	r4,r3,d29c <__adddf3+0x378>
    d0c0:	00800804 	movi	r2,32
    d0c4:	10c5c83a 	sub	r2,r2,r3
    d0c8:	8884d83a 	srl	r2,r17,r2
    d0cc:	98d0983a 	sll	r8,r19,r3
    d0d0:	88e2983a 	sll	r17,r17,r3
    d0d4:	1204b03a 	or	r2,r2,r8
    d0d8:	1c007416 	blt	r3,r16,d2ac <__adddf3+0x388>
    d0dc:	1c21c83a 	sub	r16,r3,r16
    d0e0:	82000044 	addi	r8,r16,1
    d0e4:	00c007c4 	movi	r3,31
    d0e8:	1a009116 	blt	r3,r8,d330 <__adddf3+0x40c>
    d0ec:	00c00804 	movi	r3,32
    d0f0:	1a07c83a 	sub	r3,r3,r8
    d0f4:	8a08d83a 	srl	r4,r17,r8
    d0f8:	88e2983a 	sll	r17,r17,r3
    d0fc:	10c6983a 	sll	r3,r2,r3
    d100:	1210d83a 	srl	r8,r2,r8
    d104:	8804c03a 	cmpne	r2,r17,zero
    d108:	1906b03a 	or	r3,r3,r4
    d10c:	18a2b03a 	or	r17,r3,r2
    d110:	0021883a 	mov	r16,zero
    d114:	003fa206 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d118:	1890b03a 	or	r8,r3,r2
    d11c:	40017d26 	beq	r8,zero,d714 <__adddf3+0x7f0>
    d120:	1011883a 	mov	r8,r2
    d124:	1823883a 	mov	r17,r3
    d128:	888001cc 	andi	r2,r17,7
    d12c:	103f9e1e 	bne	r2,zero,cfa8 <__alt_exception_stack_pointer+0xf800cfa8>
    d130:	4004977a 	slli	r2,r8,29
    d134:	8822d0fa 	srli	r17,r17,3
    d138:	4010d0fa 	srli	r8,r8,3
    d13c:	9007883a 	mov	r3,r18
    d140:	1444b03a 	or	r2,r2,r17
    d144:	0101ffc4 	movi	r4,2047
    d148:	81002426 	beq	r16,r4,d1dc <__adddf3+0x2b8>
    d14c:	8120703a 	and	r16,r16,r4
    d150:	01000434 	movhi	r4,16
    d154:	213fffc4 	addi	r4,r4,-1
    d158:	4110703a 	and	r8,r8,r4
    d15c:	003fa806 	br	d000 <__alt_exception_stack_pointer+0xf800d000>
    d160:	8089c83a 	sub	r4,r16,r2
    d164:	01005e0e 	bge	zero,r4,d2e0 <__adddf3+0x3bc>
    d168:	10002b26 	beq	r2,zero,d218 <__adddf3+0x2f4>
    d16c:	0081ffc4 	movi	r2,2047
    d170:	80bf8b26 	beq	r16,r2,cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d174:	4a402034 	orhi	r9,r9,128
    d178:	00800e04 	movi	r2,56
    d17c:	1100a40e 	bge	r2,r4,d410 <__adddf3+0x4ec>
    d180:	498cb03a 	or	r6,r9,r6
    d184:	300ac03a 	cmpne	r5,r6,zero
    d188:	0013883a 	mov	r9,zero
    d18c:	2c4b883a 	add	r5,r5,r17
    d190:	2c63803a 	cmpltu	r17,r5,r17
    d194:	4a11883a 	add	r8,r9,r8
    d198:	8a11883a 	add	r8,r17,r8
    d19c:	2823883a 	mov	r17,r5
    d1a0:	4080202c 	andhi	r2,r8,128
    d1a4:	103fe026 	beq	r2,zero,d128 <__alt_exception_stack_pointer+0xf800d128>
    d1a8:	84000044 	addi	r16,r16,1
    d1ac:	0081ffc4 	movi	r2,2047
    d1b0:	8080d226 	beq	r16,r2,d4fc <__adddf3+0x5d8>
    d1b4:	00bfe034 	movhi	r2,65408
    d1b8:	10bfffc4 	addi	r2,r2,-1
    d1bc:	4090703a 	and	r8,r8,r2
    d1c0:	880ad07a 	srli	r5,r17,1
    d1c4:	400897fa 	slli	r4,r8,31
    d1c8:	88c0004c 	andi	r3,r17,1
    d1cc:	28e2b03a 	or	r17,r5,r3
    d1d0:	4010d07a 	srli	r8,r8,1
    d1d4:	2462b03a 	or	r17,r4,r17
    d1d8:	003f7106 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d1dc:	4088b03a 	or	r4,r8,r2
    d1e0:	20014526 	beq	r4,zero,d6f8 <__adddf3+0x7d4>
    d1e4:	01000434 	movhi	r4,16
    d1e8:	42000234 	orhi	r8,r8,8
    d1ec:	213fffc4 	addi	r4,r4,-1
    d1f0:	4110703a 	and	r8,r8,r4
    d1f4:	003f8206 	br	d000 <__alt_exception_stack_pointer+0xf800d000>
    d1f8:	18ffffc4 	addi	r3,r3,-1
    d1fc:	1800491e 	bne	r3,zero,d324 <__adddf3+0x400>
    d200:	898bc83a 	sub	r5,r17,r6
    d204:	8963803a 	cmpltu	r17,r17,r5
    d208:	4251c83a 	sub	r8,r8,r9
    d20c:	4451c83a 	sub	r8,r8,r17
    d210:	2823883a 	mov	r17,r5
    d214:	003f9f06 	br	d094 <__alt_exception_stack_pointer+0xf800d094>
    d218:	4984b03a 	or	r2,r9,r6
    d21c:	103f6026 	beq	r2,zero,cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d220:	213fffc4 	addi	r4,r4,-1
    d224:	2000931e 	bne	r4,zero,d474 <__adddf3+0x550>
    d228:	898d883a 	add	r6,r17,r6
    d22c:	3463803a 	cmpltu	r17,r6,r17
    d230:	4251883a 	add	r8,r8,r9
    d234:	8a11883a 	add	r8,r17,r8
    d238:	3023883a 	mov	r17,r6
    d23c:	003fd806 	br	d1a0 <__alt_exception_stack_pointer+0xf800d1a0>
    d240:	1800541e 	bne	r3,zero,d394 <__adddf3+0x470>
    d244:	80800044 	addi	r2,r16,1
    d248:	1081ffcc 	andi	r2,r2,2047
    d24c:	00c00044 	movi	r3,1
    d250:	1880a00e 	bge	r3,r2,d4d4 <__adddf3+0x5b0>
    d254:	8989c83a 	sub	r4,r17,r6
    d258:	8905803a 	cmpltu	r2,r17,r4
    d25c:	4267c83a 	sub	r19,r8,r9
    d260:	98a7c83a 	sub	r19,r19,r2
    d264:	9880202c 	andhi	r2,r19,128
    d268:	10006326 	beq	r2,zero,d3f8 <__adddf3+0x4d4>
    d26c:	3463c83a 	sub	r17,r6,r17
    d270:	4a07c83a 	sub	r3,r9,r8
    d274:	344d803a 	cmpltu	r6,r6,r17
    d278:	19a7c83a 	sub	r19,r3,r6
    d27c:	3825883a 	mov	r18,r7
    d280:	983f8a1e 	bne	r19,zero,d0ac <__alt_exception_stack_pointer+0xf800d0ac>
    d284:	8809883a 	mov	r4,r17
    d288:	000f7640 	call	f764 <__clzsi2>
    d28c:	10800804 	addi	r2,r2,32
    d290:	10fffe04 	addi	r3,r2,-8
    d294:	010007c4 	movi	r4,31
    d298:	20ff890e 	bge	r4,r3,d0c0 <__alt_exception_stack_pointer+0xf800d0c0>
    d29c:	10bff604 	addi	r2,r2,-40
    d2a0:	8884983a 	sll	r2,r17,r2
    d2a4:	0023883a 	mov	r17,zero
    d2a8:	1c3f8c0e 	bge	r3,r16,d0dc <__alt_exception_stack_pointer+0xf800d0dc>
    d2ac:	023fe034 	movhi	r8,65408
    d2b0:	423fffc4 	addi	r8,r8,-1
    d2b4:	80e1c83a 	sub	r16,r16,r3
    d2b8:	1210703a 	and	r8,r2,r8
    d2bc:	003f3806 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d2c0:	9007883a 	mov	r3,r18
    d2c4:	0011883a 	mov	r8,zero
    d2c8:	0005883a 	mov	r2,zero
    d2cc:	003f4c06 	br	d000 <__alt_exception_stack_pointer+0xf800d000>
    d2d0:	498cb03a 	or	r6,r9,r6
    d2d4:	300cc03a 	cmpne	r6,r6,zero
    d2d8:	0007883a 	mov	r3,zero
    d2dc:	003f6806 	br	d080 <__alt_exception_stack_pointer+0xf800d080>
    d2e0:	20009c1e 	bne	r4,zero,d554 <__adddf3+0x630>
    d2e4:	80800044 	addi	r2,r16,1
    d2e8:	1141ffcc 	andi	r5,r2,2047
    d2ec:	01000044 	movi	r4,1
    d2f0:	2140670e 	bge	r4,r5,d490 <__adddf3+0x56c>
    d2f4:	0101ffc4 	movi	r4,2047
    d2f8:	11007f26 	beq	r2,r4,d4f8 <__adddf3+0x5d4>
    d2fc:	898d883a 	add	r6,r17,r6
    d300:	4247883a 	add	r3,r8,r9
    d304:	3451803a 	cmpltu	r8,r6,r17
    d308:	40d1883a 	add	r8,r8,r3
    d30c:	402297fa 	slli	r17,r8,31
    d310:	300cd07a 	srli	r6,r6,1
    d314:	4010d07a 	srli	r8,r8,1
    d318:	1021883a 	mov	r16,r2
    d31c:	89a2b03a 	or	r17,r17,r6
    d320:	003f1f06 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d324:	0081ffc4 	movi	r2,2047
    d328:	80bf481e 	bne	r16,r2,d04c <__alt_exception_stack_pointer+0xf800d04c>
    d32c:	003f1c06 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d330:	843ff844 	addi	r16,r16,-31
    d334:	01000804 	movi	r4,32
    d338:	1406d83a 	srl	r3,r2,r16
    d33c:	41005026 	beq	r8,r4,d480 <__adddf3+0x55c>
    d340:	01001004 	movi	r4,64
    d344:	2211c83a 	sub	r8,r4,r8
    d348:	1204983a 	sll	r2,r2,r8
    d34c:	88a2b03a 	or	r17,r17,r2
    d350:	8822c03a 	cmpne	r17,r17,zero
    d354:	1c62b03a 	or	r17,r3,r17
    d358:	0011883a 	mov	r8,zero
    d35c:	0021883a 	mov	r16,zero
    d360:	003f7106 	br	d128 <__alt_exception_stack_pointer+0xf800d128>
    d364:	193ff804 	addi	r4,r3,-32
    d368:	00800804 	movi	r2,32
    d36c:	4908d83a 	srl	r4,r9,r4
    d370:	18804526 	beq	r3,r2,d488 <__adddf3+0x564>
    d374:	00801004 	movi	r2,64
    d378:	10c5c83a 	sub	r2,r2,r3
    d37c:	4886983a 	sll	r3,r9,r2
    d380:	198cb03a 	or	r6,r3,r6
    d384:	300cc03a 	cmpne	r6,r6,zero
    d388:	218cb03a 	or	r6,r4,r6
    d38c:	0007883a 	mov	r3,zero
    d390:	003f3b06 	br	d080 <__alt_exception_stack_pointer+0xf800d080>
    d394:	80002a26 	beq	r16,zero,d440 <__adddf3+0x51c>
    d398:	0101ffc4 	movi	r4,2047
    d39c:	11006826 	beq	r2,r4,d540 <__adddf3+0x61c>
    d3a0:	00c7c83a 	sub	r3,zero,r3
    d3a4:	42002034 	orhi	r8,r8,128
    d3a8:	01000e04 	movi	r4,56
    d3ac:	20c07c16 	blt	r4,r3,d5a0 <__adddf3+0x67c>
    d3b0:	010007c4 	movi	r4,31
    d3b4:	20c0da16 	blt	r4,r3,d720 <__adddf3+0x7fc>
    d3b8:	01000804 	movi	r4,32
    d3bc:	20c9c83a 	sub	r4,r4,r3
    d3c0:	4114983a 	sll	r10,r8,r4
    d3c4:	88cad83a 	srl	r5,r17,r3
    d3c8:	8908983a 	sll	r4,r17,r4
    d3cc:	40c6d83a 	srl	r3,r8,r3
    d3d0:	5162b03a 	or	r17,r10,r5
    d3d4:	2008c03a 	cmpne	r4,r4,zero
    d3d8:	8922b03a 	or	r17,r17,r4
    d3dc:	3463c83a 	sub	r17,r6,r17
    d3e0:	48c7c83a 	sub	r3,r9,r3
    d3e4:	344d803a 	cmpltu	r6,r6,r17
    d3e8:	1991c83a 	sub	r8,r3,r6
    d3ec:	1021883a 	mov	r16,r2
    d3f0:	3825883a 	mov	r18,r7
    d3f4:	003f2706 	br	d094 <__alt_exception_stack_pointer+0xf800d094>
    d3f8:	24d0b03a 	or	r8,r4,r19
    d3fc:	40001b1e 	bne	r8,zero,d46c <__adddf3+0x548>
    d400:	0005883a 	mov	r2,zero
    d404:	0007883a 	mov	r3,zero
    d408:	0021883a 	mov	r16,zero
    d40c:	003f4d06 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d410:	008007c4 	movi	r2,31
    d414:	11003c16 	blt	r2,r4,d508 <__adddf3+0x5e4>
    d418:	00800804 	movi	r2,32
    d41c:	1105c83a 	sub	r2,r2,r4
    d420:	488e983a 	sll	r7,r9,r2
    d424:	310ad83a 	srl	r5,r6,r4
    d428:	3084983a 	sll	r2,r6,r2
    d42c:	4912d83a 	srl	r9,r9,r4
    d430:	394ab03a 	or	r5,r7,r5
    d434:	1004c03a 	cmpne	r2,r2,zero
    d438:	288ab03a 	or	r5,r5,r2
    d43c:	003f5306 	br	d18c <__alt_exception_stack_pointer+0xf800d18c>
    d440:	4448b03a 	or	r4,r8,r17
    d444:	20003e26 	beq	r4,zero,d540 <__adddf3+0x61c>
    d448:	00c6303a 	nor	r3,zero,r3
    d44c:	18003a1e 	bne	r3,zero,d538 <__adddf3+0x614>
    d450:	3463c83a 	sub	r17,r6,r17
    d454:	4a07c83a 	sub	r3,r9,r8
    d458:	344d803a 	cmpltu	r6,r6,r17
    d45c:	1991c83a 	sub	r8,r3,r6
    d460:	1021883a 	mov	r16,r2
    d464:	3825883a 	mov	r18,r7
    d468:	003f0a06 	br	d094 <__alt_exception_stack_pointer+0xf800d094>
    d46c:	2023883a 	mov	r17,r4
    d470:	003f0d06 	br	d0a8 <__alt_exception_stack_pointer+0xf800d0a8>
    d474:	0081ffc4 	movi	r2,2047
    d478:	80bf3f1e 	bne	r16,r2,d178 <__alt_exception_stack_pointer+0xf800d178>
    d47c:	003ec806 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d480:	0005883a 	mov	r2,zero
    d484:	003fb106 	br	d34c <__alt_exception_stack_pointer+0xf800d34c>
    d488:	0007883a 	mov	r3,zero
    d48c:	003fbc06 	br	d380 <__alt_exception_stack_pointer+0xf800d380>
    d490:	4444b03a 	or	r2,r8,r17
    d494:	8000871e 	bne	r16,zero,d6b4 <__adddf3+0x790>
    d498:	1000ba26 	beq	r2,zero,d784 <__adddf3+0x860>
    d49c:	4984b03a 	or	r2,r9,r6
    d4a0:	103ebf26 	beq	r2,zero,cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d4a4:	8985883a 	add	r2,r17,r6
    d4a8:	4247883a 	add	r3,r8,r9
    d4ac:	1451803a 	cmpltu	r8,r2,r17
    d4b0:	40d1883a 	add	r8,r8,r3
    d4b4:	40c0202c 	andhi	r3,r8,128
    d4b8:	1023883a 	mov	r17,r2
    d4bc:	183f1a26 	beq	r3,zero,d128 <__alt_exception_stack_pointer+0xf800d128>
    d4c0:	00bfe034 	movhi	r2,65408
    d4c4:	10bfffc4 	addi	r2,r2,-1
    d4c8:	2021883a 	mov	r16,r4
    d4cc:	4090703a 	and	r8,r8,r2
    d4d0:	003eb306 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d4d4:	4444b03a 	or	r2,r8,r17
    d4d8:	8000291e 	bne	r16,zero,d580 <__adddf3+0x65c>
    d4dc:	10004b1e 	bne	r2,zero,d60c <__adddf3+0x6e8>
    d4e0:	4990b03a 	or	r8,r9,r6
    d4e4:	40008b26 	beq	r8,zero,d714 <__adddf3+0x7f0>
    d4e8:	4811883a 	mov	r8,r9
    d4ec:	3023883a 	mov	r17,r6
    d4f0:	3825883a 	mov	r18,r7
    d4f4:	003eaa06 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d4f8:	1021883a 	mov	r16,r2
    d4fc:	0011883a 	mov	r8,zero
    d500:	0005883a 	mov	r2,zero
    d504:	003f0f06 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d508:	217ff804 	addi	r5,r4,-32
    d50c:	00800804 	movi	r2,32
    d510:	494ad83a 	srl	r5,r9,r5
    d514:	20807d26 	beq	r4,r2,d70c <__adddf3+0x7e8>
    d518:	00801004 	movi	r2,64
    d51c:	1109c83a 	sub	r4,r2,r4
    d520:	4912983a 	sll	r9,r9,r4
    d524:	498cb03a 	or	r6,r9,r6
    d528:	300cc03a 	cmpne	r6,r6,zero
    d52c:	298ab03a 	or	r5,r5,r6
    d530:	0013883a 	mov	r9,zero
    d534:	003f1506 	br	d18c <__alt_exception_stack_pointer+0xf800d18c>
    d538:	0101ffc4 	movi	r4,2047
    d53c:	113f9a1e 	bne	r2,r4,d3a8 <__alt_exception_stack_pointer+0xf800d3a8>
    d540:	4811883a 	mov	r8,r9
    d544:	3023883a 	mov	r17,r6
    d548:	1021883a 	mov	r16,r2
    d54c:	3825883a 	mov	r18,r7
    d550:	003e9306 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d554:	8000161e 	bne	r16,zero,d5b0 <__adddf3+0x68c>
    d558:	444ab03a 	or	r5,r8,r17
    d55c:	28005126 	beq	r5,zero,d6a4 <__adddf3+0x780>
    d560:	0108303a 	nor	r4,zero,r4
    d564:	20004d1e 	bne	r4,zero,d69c <__adddf3+0x778>
    d568:	89a3883a 	add	r17,r17,r6
    d56c:	4253883a 	add	r9,r8,r9
    d570:	898d803a 	cmpltu	r6,r17,r6
    d574:	3251883a 	add	r8,r6,r9
    d578:	1021883a 	mov	r16,r2
    d57c:	003f0806 	br	d1a0 <__alt_exception_stack_pointer+0xf800d1a0>
    d580:	1000301e 	bne	r2,zero,d644 <__adddf3+0x720>
    d584:	4984b03a 	or	r2,r9,r6
    d588:	10007126 	beq	r2,zero,d750 <__adddf3+0x82c>
    d58c:	4811883a 	mov	r8,r9
    d590:	3023883a 	mov	r17,r6
    d594:	3825883a 	mov	r18,r7
    d598:	0401ffc4 	movi	r16,2047
    d59c:	003e8006 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d5a0:	4462b03a 	or	r17,r8,r17
    d5a4:	8822c03a 	cmpne	r17,r17,zero
    d5a8:	0007883a 	mov	r3,zero
    d5ac:	003f8b06 	br	d3dc <__alt_exception_stack_pointer+0xf800d3dc>
    d5b0:	0141ffc4 	movi	r5,2047
    d5b4:	11403b26 	beq	r2,r5,d6a4 <__adddf3+0x780>
    d5b8:	0109c83a 	sub	r4,zero,r4
    d5bc:	42002034 	orhi	r8,r8,128
    d5c0:	01400e04 	movi	r5,56
    d5c4:	29006716 	blt	r5,r4,d764 <__adddf3+0x840>
    d5c8:	014007c4 	movi	r5,31
    d5cc:	29007016 	blt	r5,r4,d790 <__adddf3+0x86c>
    d5d0:	01400804 	movi	r5,32
    d5d4:	290bc83a 	sub	r5,r5,r4
    d5d8:	4154983a 	sll	r10,r8,r5
    d5dc:	890ed83a 	srl	r7,r17,r4
    d5e0:	894a983a 	sll	r5,r17,r5
    d5e4:	4108d83a 	srl	r4,r8,r4
    d5e8:	51e2b03a 	or	r17,r10,r7
    d5ec:	280ac03a 	cmpne	r5,r5,zero
    d5f0:	8962b03a 	or	r17,r17,r5
    d5f4:	89a3883a 	add	r17,r17,r6
    d5f8:	2253883a 	add	r9,r4,r9
    d5fc:	898d803a 	cmpltu	r6,r17,r6
    d600:	3251883a 	add	r8,r6,r9
    d604:	1021883a 	mov	r16,r2
    d608:	003ee506 	br	d1a0 <__alt_exception_stack_pointer+0xf800d1a0>
    d60c:	4984b03a 	or	r2,r9,r6
    d610:	103e6326 	beq	r2,zero,cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d614:	8987c83a 	sub	r3,r17,r6
    d618:	88c9803a 	cmpltu	r4,r17,r3
    d61c:	4245c83a 	sub	r2,r8,r9
    d620:	1105c83a 	sub	r2,r2,r4
    d624:	1100202c 	andhi	r4,r2,128
    d628:	203ebb26 	beq	r4,zero,d118 <__alt_exception_stack_pointer+0xf800d118>
    d62c:	3463c83a 	sub	r17,r6,r17
    d630:	4a07c83a 	sub	r3,r9,r8
    d634:	344d803a 	cmpltu	r6,r6,r17
    d638:	1991c83a 	sub	r8,r3,r6
    d63c:	3825883a 	mov	r18,r7
    d640:	003e5706 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d644:	4984b03a 	or	r2,r9,r6
    d648:	10002e26 	beq	r2,zero,d704 <__adddf3+0x7e0>
    d64c:	4004d0fa 	srli	r2,r8,3
    d650:	8822d0fa 	srli	r17,r17,3
    d654:	4010977a 	slli	r8,r8,29
    d658:	10c0022c 	andhi	r3,r2,8
    d65c:	4462b03a 	or	r17,r8,r17
    d660:	18000826 	beq	r3,zero,d684 <__adddf3+0x760>
    d664:	4808d0fa 	srli	r4,r9,3
    d668:	20c0022c 	andhi	r3,r4,8
    d66c:	1800051e 	bne	r3,zero,d684 <__adddf3+0x760>
    d670:	300cd0fa 	srli	r6,r6,3
    d674:	4806977a 	slli	r3,r9,29
    d678:	2005883a 	mov	r2,r4
    d67c:	3825883a 	mov	r18,r7
    d680:	19a2b03a 	or	r17,r3,r6
    d684:	8810d77a 	srli	r8,r17,29
    d688:	100490fa 	slli	r2,r2,3
    d68c:	882290fa 	slli	r17,r17,3
    d690:	0401ffc4 	movi	r16,2047
    d694:	4090b03a 	or	r8,r8,r2
    d698:	003e4106 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d69c:	0141ffc4 	movi	r5,2047
    d6a0:	117fc71e 	bne	r2,r5,d5c0 <__alt_exception_stack_pointer+0xf800d5c0>
    d6a4:	4811883a 	mov	r8,r9
    d6a8:	3023883a 	mov	r17,r6
    d6ac:	1021883a 	mov	r16,r2
    d6b0:	003e3b06 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d6b4:	10002f26 	beq	r2,zero,d774 <__adddf3+0x850>
    d6b8:	4984b03a 	or	r2,r9,r6
    d6bc:	10001126 	beq	r2,zero,d704 <__adddf3+0x7e0>
    d6c0:	4004d0fa 	srli	r2,r8,3
    d6c4:	8822d0fa 	srli	r17,r17,3
    d6c8:	4010977a 	slli	r8,r8,29
    d6cc:	10c0022c 	andhi	r3,r2,8
    d6d0:	4462b03a 	or	r17,r8,r17
    d6d4:	183feb26 	beq	r3,zero,d684 <__alt_exception_stack_pointer+0xf800d684>
    d6d8:	4808d0fa 	srli	r4,r9,3
    d6dc:	20c0022c 	andhi	r3,r4,8
    d6e0:	183fe81e 	bne	r3,zero,d684 <__alt_exception_stack_pointer+0xf800d684>
    d6e4:	300cd0fa 	srli	r6,r6,3
    d6e8:	4806977a 	slli	r3,r9,29
    d6ec:	2005883a 	mov	r2,r4
    d6f0:	19a2b03a 	or	r17,r3,r6
    d6f4:	003fe306 	br	d684 <__alt_exception_stack_pointer+0xf800d684>
    d6f8:	0011883a 	mov	r8,zero
    d6fc:	0005883a 	mov	r2,zero
    d700:	003e3f06 	br	d000 <__alt_exception_stack_pointer+0xf800d000>
    d704:	0401ffc4 	movi	r16,2047
    d708:	003e2506 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d70c:	0013883a 	mov	r9,zero
    d710:	003f8406 	br	d524 <__alt_exception_stack_pointer+0xf800d524>
    d714:	0005883a 	mov	r2,zero
    d718:	0007883a 	mov	r3,zero
    d71c:	003e8906 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d720:	197ff804 	addi	r5,r3,-32
    d724:	01000804 	movi	r4,32
    d728:	414ad83a 	srl	r5,r8,r5
    d72c:	19002426 	beq	r3,r4,d7c0 <__adddf3+0x89c>
    d730:	01001004 	movi	r4,64
    d734:	20c7c83a 	sub	r3,r4,r3
    d738:	40c6983a 	sll	r3,r8,r3
    d73c:	1c46b03a 	or	r3,r3,r17
    d740:	1806c03a 	cmpne	r3,r3,zero
    d744:	28e2b03a 	or	r17,r5,r3
    d748:	0007883a 	mov	r3,zero
    d74c:	003f2306 	br	d3dc <__alt_exception_stack_pointer+0xf800d3dc>
    d750:	0007883a 	mov	r3,zero
    d754:	5811883a 	mov	r8,r11
    d758:	00bfffc4 	movi	r2,-1
    d75c:	0401ffc4 	movi	r16,2047
    d760:	003e7806 	br	d144 <__alt_exception_stack_pointer+0xf800d144>
    d764:	4462b03a 	or	r17,r8,r17
    d768:	8822c03a 	cmpne	r17,r17,zero
    d76c:	0009883a 	mov	r4,zero
    d770:	003fa006 	br	d5f4 <__alt_exception_stack_pointer+0xf800d5f4>
    d774:	4811883a 	mov	r8,r9
    d778:	3023883a 	mov	r17,r6
    d77c:	0401ffc4 	movi	r16,2047
    d780:	003e0706 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d784:	4811883a 	mov	r8,r9
    d788:	3023883a 	mov	r17,r6
    d78c:	003e0406 	br	cfa0 <__alt_exception_stack_pointer+0xf800cfa0>
    d790:	21fff804 	addi	r7,r4,-32
    d794:	01400804 	movi	r5,32
    d798:	41ced83a 	srl	r7,r8,r7
    d79c:	21400a26 	beq	r4,r5,d7c8 <__adddf3+0x8a4>
    d7a0:	01401004 	movi	r5,64
    d7a4:	2909c83a 	sub	r4,r5,r4
    d7a8:	4108983a 	sll	r4,r8,r4
    d7ac:	2448b03a 	or	r4,r4,r17
    d7b0:	2008c03a 	cmpne	r4,r4,zero
    d7b4:	3922b03a 	or	r17,r7,r4
    d7b8:	0009883a 	mov	r4,zero
    d7bc:	003f8d06 	br	d5f4 <__alt_exception_stack_pointer+0xf800d5f4>
    d7c0:	0007883a 	mov	r3,zero
    d7c4:	003fdd06 	br	d73c <__alt_exception_stack_pointer+0xf800d73c>
    d7c8:	0009883a 	mov	r4,zero
    d7cc:	003ff706 	br	d7ac <__alt_exception_stack_pointer+0xf800d7ac>

0000d7d0 <__divdf3>:
    d7d0:	defff004 	addi	sp,sp,-64
    d7d4:	dc800815 	stw	r18,32(sp)
    d7d8:	2824d53a 	srli	r18,r5,20
    d7dc:	dd800c15 	stw	r22,48(sp)
    d7e0:	282cd7fa 	srli	r22,r5,31
    d7e4:	dc000615 	stw	r16,24(sp)
    d7e8:	04000434 	movhi	r16,16
    d7ec:	843fffc4 	addi	r16,r16,-1
    d7f0:	dfc00f15 	stw	ra,60(sp)
    d7f4:	df000e15 	stw	fp,56(sp)
    d7f8:	ddc00d15 	stw	r23,52(sp)
    d7fc:	dd400b15 	stw	r21,44(sp)
    d800:	dd000a15 	stw	r20,40(sp)
    d804:	dcc00915 	stw	r19,36(sp)
    d808:	dc400715 	stw	r17,28(sp)
    d80c:	9481ffcc 	andi	r18,r18,2047
    d810:	2c20703a 	and	r16,r5,r16
    d814:	b2003fcc 	andi	r8,r22,255
    d818:	90006126 	beq	r18,zero,d9a0 <__divdf3+0x1d0>
    d81c:	0081ffc4 	movi	r2,2047
    d820:	202b883a 	mov	r21,r4
    d824:	90803726 	beq	r18,r2,d904 <__divdf3+0x134>
    d828:	80800434 	orhi	r2,r16,16
    d82c:	100490fa 	slli	r2,r2,3
    d830:	2020d77a 	srli	r16,r4,29
    d834:	202a90fa 	slli	r21,r4,3
    d838:	94bf0044 	addi	r18,r18,-1023
    d83c:	80a0b03a 	or	r16,r16,r2
    d840:	0013883a 	mov	r9,zero
    d844:	000b883a 	mov	r5,zero
    d848:	3806d53a 	srli	r3,r7,20
    d84c:	382ed7fa 	srli	r23,r7,31
    d850:	04400434 	movhi	r17,16
    d854:	8c7fffc4 	addi	r17,r17,-1
    d858:	18c1ffcc 	andi	r3,r3,2047
    d85c:	3029883a 	mov	r20,r6
    d860:	3c62703a 	and	r17,r7,r17
    d864:	bf003fcc 	andi	fp,r23,255
    d868:	18006e26 	beq	r3,zero,da24 <__divdf3+0x254>
    d86c:	0081ffc4 	movi	r2,2047
    d870:	18806626 	beq	r3,r2,da0c <__divdf3+0x23c>
    d874:	88800434 	orhi	r2,r17,16
    d878:	100490fa 	slli	r2,r2,3
    d87c:	3022d77a 	srli	r17,r6,29
    d880:	302890fa 	slli	r20,r6,3
    d884:	18ff0044 	addi	r3,r3,-1023
    d888:	88a2b03a 	or	r17,r17,r2
    d88c:	000f883a 	mov	r7,zero
    d890:	b5e6f03a 	xor	r19,r22,r23
    d894:	3a4cb03a 	or	r6,r7,r9
    d898:	008003c4 	movi	r2,15
    d89c:	9809883a 	mov	r4,r19
    d8a0:	90c7c83a 	sub	r3,r18,r3
    d8a4:	9cc03fcc 	andi	r19,r19,255
    d8a8:	11809636 	bltu	r2,r6,db04 <__divdf3+0x334>
    d8ac:	300c90ba 	slli	r6,r6,2
    d8b0:	00800074 	movhi	r2,1
    d8b4:	10b63104 	addi	r2,r2,-10044
    d8b8:	308d883a 	add	r6,r6,r2
    d8bc:	30800017 	ldw	r2,0(r6)
    d8c0:	1000683a 	jmp	r2
    d8c4:	0000db04 	movi	zero,876
    d8c8:	0000d93c 	xorhi	zero,zero,868
    d8cc:	0000daf4 	movhi	zero,875
    d8d0:	0000d930 	cmpltui	zero,zero,868
    d8d4:	0000daf4 	movhi	zero,875
    d8d8:	0000dac8 	cmpgei	zero,zero,875
    d8dc:	0000daf4 	movhi	zero,875
    d8e0:	0000d930 	cmpltui	zero,zero,868
    d8e4:	0000d93c 	xorhi	zero,zero,868
    d8e8:	0000d93c 	xorhi	zero,zero,868
    d8ec:	0000dac8 	cmpgei	zero,zero,875
    d8f0:	0000d930 	cmpltui	zero,zero,868
    d8f4:	0000d920 	cmpeqi	zero,zero,868
    d8f8:	0000d920 	cmpeqi	zero,zero,868
    d8fc:	0000d920 	cmpeqi	zero,zero,868
    d900:	0000de8c 	andi	zero,zero,890
    d904:	2404b03a 	or	r2,r4,r16
    d908:	10006c1e 	bne	r2,zero,dabc <__divdf3+0x2ec>
    d90c:	02400204 	movi	r9,8
    d910:	0021883a 	mov	r16,zero
    d914:	002b883a 	mov	r21,zero
    d918:	01400084 	movi	r5,2
    d91c:	003fca06 	br	d848 <__alt_exception_stack_pointer+0xf800d848>
    d920:	8023883a 	mov	r17,r16
    d924:	a829883a 	mov	r20,r21
    d928:	4039883a 	mov	fp,r8
    d92c:	280f883a 	mov	r7,r5
    d930:	00800084 	movi	r2,2
    d934:	3881601e 	bne	r7,r2,deb8 <__divdf3+0x6e8>
    d938:	e027883a 	mov	r19,fp
    d93c:	9900004c 	andi	r4,r19,1
    d940:	0081ffc4 	movi	r2,2047
    d944:	0021883a 	mov	r16,zero
    d948:	002b883a 	mov	r21,zero
    d94c:	1004953a 	slli	r2,r2,20
    d950:	20c03fcc 	andi	r3,r4,255
    d954:	01400434 	movhi	r5,16
    d958:	297fffc4 	addi	r5,r5,-1
    d95c:	180697fa 	slli	r3,r3,31
    d960:	8160703a 	and	r16,r16,r5
    d964:	80a0b03a 	or	r16,r16,r2
    d968:	80c6b03a 	or	r3,r16,r3
    d96c:	a805883a 	mov	r2,r21
    d970:	dfc00f17 	ldw	ra,60(sp)
    d974:	df000e17 	ldw	fp,56(sp)
    d978:	ddc00d17 	ldw	r23,52(sp)
    d97c:	dd800c17 	ldw	r22,48(sp)
    d980:	dd400b17 	ldw	r21,44(sp)
    d984:	dd000a17 	ldw	r20,40(sp)
    d988:	dcc00917 	ldw	r19,36(sp)
    d98c:	dc800817 	ldw	r18,32(sp)
    d990:	dc400717 	ldw	r17,28(sp)
    d994:	dc000617 	ldw	r16,24(sp)
    d998:	dec01004 	addi	sp,sp,64
    d99c:	f800283a 	ret
    d9a0:	2404b03a 	or	r2,r4,r16
    d9a4:	2023883a 	mov	r17,r4
    d9a8:	10003f26 	beq	r2,zero,daa8 <__divdf3+0x2d8>
    d9ac:	80015e26 	beq	r16,zero,df28 <__divdf3+0x758>
    d9b0:	8009883a 	mov	r4,r16
    d9b4:	d9800215 	stw	r6,8(sp)
    d9b8:	d9c00515 	stw	r7,20(sp)
    d9bc:	da000415 	stw	r8,16(sp)
    d9c0:	000f7640 	call	f764 <__clzsi2>
    d9c4:	d9800217 	ldw	r6,8(sp)
    d9c8:	d9c00517 	ldw	r7,20(sp)
    d9cc:	da000417 	ldw	r8,16(sp)
    d9d0:	113ffd44 	addi	r4,r2,-11
    d9d4:	00c00704 	movi	r3,28
    d9d8:	19014f16 	blt	r3,r4,df18 <__divdf3+0x748>
    d9dc:	00c00744 	movi	r3,29
    d9e0:	157ffe04 	addi	r21,r2,-8
    d9e4:	1907c83a 	sub	r3,r3,r4
    d9e8:	8560983a 	sll	r16,r16,r21
    d9ec:	88c6d83a 	srl	r3,r17,r3
    d9f0:	8d6a983a 	sll	r21,r17,r21
    d9f4:	1c20b03a 	or	r16,r3,r16
    d9f8:	1080fcc4 	addi	r2,r2,1011
    d9fc:	00a5c83a 	sub	r18,zero,r2
    da00:	0013883a 	mov	r9,zero
    da04:	000b883a 	mov	r5,zero
    da08:	003f8f06 	br	d848 <__alt_exception_stack_pointer+0xf800d848>
    da0c:	3444b03a 	or	r2,r6,r17
    da10:	1000231e 	bne	r2,zero,daa0 <__divdf3+0x2d0>
    da14:	0023883a 	mov	r17,zero
    da18:	0029883a 	mov	r20,zero
    da1c:	01c00084 	movi	r7,2
    da20:	003f9b06 	br	d890 <__alt_exception_stack_pointer+0xf800d890>
    da24:	3444b03a 	or	r2,r6,r17
    da28:	10001926 	beq	r2,zero,da90 <__divdf3+0x2c0>
    da2c:	88014b26 	beq	r17,zero,df5c <__divdf3+0x78c>
    da30:	8809883a 	mov	r4,r17
    da34:	d9400115 	stw	r5,4(sp)
    da38:	d9800215 	stw	r6,8(sp)
    da3c:	da000415 	stw	r8,16(sp)
    da40:	da400315 	stw	r9,12(sp)
    da44:	000f7640 	call	f764 <__clzsi2>
    da48:	d9400117 	ldw	r5,4(sp)
    da4c:	d9800217 	ldw	r6,8(sp)
    da50:	da000417 	ldw	r8,16(sp)
    da54:	da400317 	ldw	r9,12(sp)
    da58:	113ffd44 	addi	r4,r2,-11
    da5c:	00c00704 	movi	r3,28
    da60:	19013a16 	blt	r3,r4,df4c <__divdf3+0x77c>
    da64:	00c00744 	movi	r3,29
    da68:	153ffe04 	addi	r20,r2,-8
    da6c:	1907c83a 	sub	r3,r3,r4
    da70:	8d22983a 	sll	r17,r17,r20
    da74:	30c6d83a 	srl	r3,r6,r3
    da78:	3528983a 	sll	r20,r6,r20
    da7c:	1c62b03a 	or	r17,r3,r17
    da80:	1080fcc4 	addi	r2,r2,1011
    da84:	0087c83a 	sub	r3,zero,r2
    da88:	000f883a 	mov	r7,zero
    da8c:	003f8006 	br	d890 <__alt_exception_stack_pointer+0xf800d890>
    da90:	0023883a 	mov	r17,zero
    da94:	0029883a 	mov	r20,zero
    da98:	01c00044 	movi	r7,1
    da9c:	003f7c06 	br	d890 <__alt_exception_stack_pointer+0xf800d890>
    daa0:	01c000c4 	movi	r7,3
    daa4:	003f7a06 	br	d890 <__alt_exception_stack_pointer+0xf800d890>
    daa8:	02400104 	movi	r9,4
    daac:	0021883a 	mov	r16,zero
    dab0:	002b883a 	mov	r21,zero
    dab4:	01400044 	movi	r5,1
    dab8:	003f6306 	br	d848 <__alt_exception_stack_pointer+0xf800d848>
    dabc:	02400304 	movi	r9,12
    dac0:	014000c4 	movi	r5,3
    dac4:	003f6006 	br	d848 <__alt_exception_stack_pointer+0xf800d848>
    dac8:	04000434 	movhi	r16,16
    dacc:	0009883a 	mov	r4,zero
    dad0:	843fffc4 	addi	r16,r16,-1
    dad4:	057fffc4 	movi	r21,-1
    dad8:	0081ffc4 	movi	r2,2047
    dadc:	003f9b06 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    dae0:	00c00044 	movi	r3,1
    dae4:	1887c83a 	sub	r3,r3,r2
    dae8:	01000e04 	movi	r4,56
    daec:	20c1530e 	bge	r4,r3,e03c <__divdf3+0x86c>
    daf0:	9900004c 	andi	r4,r19,1
    daf4:	0005883a 	mov	r2,zero
    daf8:	0021883a 	mov	r16,zero
    dafc:	002b883a 	mov	r21,zero
    db00:	003f9206 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    db04:	8c012e36 	bltu	r17,r16,dfc0 <__divdf3+0x7f0>
    db08:	84412c26 	beq	r16,r17,dfbc <__divdf3+0x7ec>
    db0c:	a82f883a 	mov	r23,r21
    db10:	18ffffc4 	addi	r3,r3,-1
    db14:	002b883a 	mov	r21,zero
    db18:	a004d63a 	srli	r2,r20,24
    db1c:	8822923a 	slli	r17,r17,8
    db20:	a028923a 	slli	r20,r20,8
    db24:	8009883a 	mov	r4,r16
    db28:	88acb03a 	or	r22,r17,r2
    db2c:	dd000015 	stw	r20,0(sp)
    db30:	b028d43a 	srli	r20,r22,16
    db34:	d8c00215 	stw	r3,8(sp)
    db38:	b4bfffcc 	andi	r18,r22,65535
    db3c:	a00b883a 	mov	r5,r20
    db40:	000ce400 	call	ce40 <__udivsi3>
    db44:	100b883a 	mov	r5,r2
    db48:	9009883a 	mov	r4,r18
    db4c:	1023883a 	mov	r17,r2
    db50:	000cefc0 	call	cefc <__mulsi3>
    db54:	8009883a 	mov	r4,r16
    db58:	a00b883a 	mov	r5,r20
    db5c:	1039883a 	mov	fp,r2
    db60:	000cea40 	call	cea4 <__umodsi3>
    db64:	1004943a 	slli	r2,r2,16
    db68:	b808d43a 	srli	r4,r23,16
    db6c:	d8c00217 	ldw	r3,8(sp)
    db70:	2084b03a 	or	r2,r4,r2
    db74:	1700062e 	bgeu	r2,fp,db90 <__divdf3+0x3c0>
    db78:	1585883a 	add	r2,r2,r22
    db7c:	893fffc4 	addi	r4,r17,-1
    db80:	15811d36 	bltu	r2,r22,dff8 <__divdf3+0x828>
    db84:	17011c2e 	bgeu	r2,fp,dff8 <__divdf3+0x828>
    db88:	8c7fff84 	addi	r17,r17,-2
    db8c:	1585883a 	add	r2,r2,r22
    db90:	1739c83a 	sub	fp,r2,fp
    db94:	a00b883a 	mov	r5,r20
    db98:	e009883a 	mov	r4,fp
    db9c:	d8c00215 	stw	r3,8(sp)
    dba0:	000ce400 	call	ce40 <__udivsi3>
    dba4:	100b883a 	mov	r5,r2
    dba8:	9009883a 	mov	r4,r18
    dbac:	1021883a 	mov	r16,r2
    dbb0:	000cefc0 	call	cefc <__mulsi3>
    dbb4:	a00b883a 	mov	r5,r20
    dbb8:	e009883a 	mov	r4,fp
    dbbc:	d8800415 	stw	r2,16(sp)
    dbc0:	000cea40 	call	cea4 <__umodsi3>
    dbc4:	1004943a 	slli	r2,r2,16
    dbc8:	da000417 	ldw	r8,16(sp)
    dbcc:	bdffffcc 	andi	r23,r23,65535
    dbd0:	b884b03a 	or	r2,r23,r2
    dbd4:	d8c00217 	ldw	r3,8(sp)
    dbd8:	1200062e 	bgeu	r2,r8,dbf4 <__divdf3+0x424>
    dbdc:	1585883a 	add	r2,r2,r22
    dbe0:	813fffc4 	addi	r4,r16,-1
    dbe4:	15810236 	bltu	r2,r22,dff0 <__divdf3+0x820>
    dbe8:	1201012e 	bgeu	r2,r8,dff0 <__divdf3+0x820>
    dbec:	843fff84 	addi	r16,r16,-2
    dbf0:	1585883a 	add	r2,r2,r22
    dbf4:	8822943a 	slli	r17,r17,16
    dbf8:	d9800017 	ldw	r6,0(sp)
    dbfc:	1211c83a 	sub	r8,r2,r8
    dc00:	8c22b03a 	or	r17,r17,r16
    dc04:	373fffcc 	andi	fp,r6,65535
    dc08:	8abfffcc 	andi	r10,r17,65535
    dc0c:	8820d43a 	srli	r16,r17,16
    dc10:	5009883a 	mov	r4,r10
    dc14:	e00b883a 	mov	r5,fp
    dc18:	302ed43a 	srli	r23,r6,16
    dc1c:	d8c00215 	stw	r3,8(sp)
    dc20:	da000415 	stw	r8,16(sp)
    dc24:	da800115 	stw	r10,4(sp)
    dc28:	000cefc0 	call	cefc <__mulsi3>
    dc2c:	800b883a 	mov	r5,r16
    dc30:	e009883a 	mov	r4,fp
    dc34:	d8800515 	stw	r2,20(sp)
    dc38:	000cefc0 	call	cefc <__mulsi3>
    dc3c:	8009883a 	mov	r4,r16
    dc40:	b80b883a 	mov	r5,r23
    dc44:	d8800315 	stw	r2,12(sp)
    dc48:	000cefc0 	call	cefc <__mulsi3>
    dc4c:	da800117 	ldw	r10,4(sp)
    dc50:	b80b883a 	mov	r5,r23
    dc54:	1021883a 	mov	r16,r2
    dc58:	5009883a 	mov	r4,r10
    dc5c:	000cefc0 	call	cefc <__mulsi3>
    dc60:	d9c00517 	ldw	r7,20(sp)
    dc64:	da400317 	ldw	r9,12(sp)
    dc68:	d8c00217 	ldw	r3,8(sp)
    dc6c:	3808d43a 	srli	r4,r7,16
    dc70:	1245883a 	add	r2,r2,r9
    dc74:	da000417 	ldw	r8,16(sp)
    dc78:	2085883a 	add	r2,r4,r2
    dc7c:	1240022e 	bgeu	r2,r9,dc88 <__divdf3+0x4b8>
    dc80:	01000074 	movhi	r4,1
    dc84:	8121883a 	add	r16,r16,r4
    dc88:	1008d43a 	srli	r4,r2,16
    dc8c:	1004943a 	slli	r2,r2,16
    dc90:	39ffffcc 	andi	r7,r7,65535
    dc94:	2409883a 	add	r4,r4,r16
    dc98:	11c5883a 	add	r2,r2,r7
    dc9c:	4100bb36 	bltu	r8,r4,df8c <__divdf3+0x7bc>
    dca0:	4100d726 	beq	r8,r4,e000 <__divdf3+0x830>
    dca4:	4109c83a 	sub	r4,r8,r4
    dca8:	a8a1c83a 	sub	r16,r21,r2
    dcac:	ac2b803a 	cmpltu	r21,r21,r16
    dcb0:	256bc83a 	sub	r21,r4,r21
    dcb4:	b540d926 	beq	r22,r21,e01c <__divdf3+0x84c>
    dcb8:	a00b883a 	mov	r5,r20
    dcbc:	a809883a 	mov	r4,r21
    dcc0:	d8c00215 	stw	r3,8(sp)
    dcc4:	000ce400 	call	ce40 <__udivsi3>
    dcc8:	100b883a 	mov	r5,r2
    dccc:	9009883a 	mov	r4,r18
    dcd0:	d8800515 	stw	r2,20(sp)
    dcd4:	000cefc0 	call	cefc <__mulsi3>
    dcd8:	a809883a 	mov	r4,r21
    dcdc:	a00b883a 	mov	r5,r20
    dce0:	d8800415 	stw	r2,16(sp)
    dce4:	000cea40 	call	cea4 <__umodsi3>
    dce8:	1004943a 	slli	r2,r2,16
    dcec:	8008d43a 	srli	r4,r16,16
    dcf0:	da000417 	ldw	r8,16(sp)
    dcf4:	d8c00217 	ldw	r3,8(sp)
    dcf8:	2084b03a 	or	r2,r4,r2
    dcfc:	d9c00517 	ldw	r7,20(sp)
    dd00:	1200062e 	bgeu	r2,r8,dd1c <__divdf3+0x54c>
    dd04:	1585883a 	add	r2,r2,r22
    dd08:	393fffc4 	addi	r4,r7,-1
    dd0c:	1580c536 	bltu	r2,r22,e024 <__divdf3+0x854>
    dd10:	1200c42e 	bgeu	r2,r8,e024 <__divdf3+0x854>
    dd14:	39ffff84 	addi	r7,r7,-2
    dd18:	1585883a 	add	r2,r2,r22
    dd1c:	122bc83a 	sub	r21,r2,r8
    dd20:	a00b883a 	mov	r5,r20
    dd24:	a809883a 	mov	r4,r21
    dd28:	d8c00215 	stw	r3,8(sp)
    dd2c:	d9c00515 	stw	r7,20(sp)
    dd30:	000ce400 	call	ce40 <__udivsi3>
    dd34:	9009883a 	mov	r4,r18
    dd38:	100b883a 	mov	r5,r2
    dd3c:	d8800415 	stw	r2,16(sp)
    dd40:	000cefc0 	call	cefc <__mulsi3>
    dd44:	a809883a 	mov	r4,r21
    dd48:	a00b883a 	mov	r5,r20
    dd4c:	1025883a 	mov	r18,r2
    dd50:	000cea40 	call	cea4 <__umodsi3>
    dd54:	1004943a 	slli	r2,r2,16
    dd58:	813fffcc 	andi	r4,r16,65535
    dd5c:	d8c00217 	ldw	r3,8(sp)
    dd60:	20a0b03a 	or	r16,r4,r2
    dd64:	d9c00517 	ldw	r7,20(sp)
    dd68:	da000417 	ldw	r8,16(sp)
    dd6c:	8480062e 	bgeu	r16,r18,dd88 <__divdf3+0x5b8>
    dd70:	85a1883a 	add	r16,r16,r22
    dd74:	40bfffc4 	addi	r2,r8,-1
    dd78:	8580ac36 	bltu	r16,r22,e02c <__divdf3+0x85c>
    dd7c:	8480ab2e 	bgeu	r16,r18,e02c <__divdf3+0x85c>
    dd80:	423fff84 	addi	r8,r8,-2
    dd84:	85a1883a 	add	r16,r16,r22
    dd88:	3804943a 	slli	r2,r7,16
    dd8c:	84a1c83a 	sub	r16,r16,r18
    dd90:	e009883a 	mov	r4,fp
    dd94:	1228b03a 	or	r20,r2,r8
    dd98:	a1ffffcc 	andi	r7,r20,65535
    dd9c:	a024d43a 	srli	r18,r20,16
    dda0:	380b883a 	mov	r5,r7
    dda4:	d8c00215 	stw	r3,8(sp)
    dda8:	d9c00515 	stw	r7,20(sp)
    ddac:	000cefc0 	call	cefc <__mulsi3>
    ddb0:	900b883a 	mov	r5,r18
    ddb4:	e009883a 	mov	r4,fp
    ddb8:	102b883a 	mov	r21,r2
    ddbc:	000cefc0 	call	cefc <__mulsi3>
    ddc0:	900b883a 	mov	r5,r18
    ddc4:	b809883a 	mov	r4,r23
    ddc8:	1039883a 	mov	fp,r2
    ddcc:	000cefc0 	call	cefc <__mulsi3>
    ddd0:	d9c00517 	ldw	r7,20(sp)
    ddd4:	b80b883a 	mov	r5,r23
    ddd8:	1025883a 	mov	r18,r2
    dddc:	3809883a 	mov	r4,r7
    dde0:	000cefc0 	call	cefc <__mulsi3>
    dde4:	a808d43a 	srli	r4,r21,16
    dde8:	1705883a 	add	r2,r2,fp
    ddec:	d8c00217 	ldw	r3,8(sp)
    ddf0:	2085883a 	add	r2,r4,r2
    ddf4:	1700022e 	bgeu	r2,fp,de00 <__divdf3+0x630>
    ddf8:	01000074 	movhi	r4,1
    ddfc:	9125883a 	add	r18,r18,r4
    de00:	1008d43a 	srli	r4,r2,16
    de04:	1004943a 	slli	r2,r2,16
    de08:	ad7fffcc 	andi	r21,r21,65535
    de0c:	2489883a 	add	r4,r4,r18
    de10:	1545883a 	add	r2,r2,r21
    de14:	81003836 	bltu	r16,r4,def8 <__divdf3+0x728>
    de18:	81003626 	beq	r16,r4,def4 <__divdf3+0x724>
    de1c:	a5000054 	ori	r20,r20,1
    de20:	1880ffc4 	addi	r2,r3,1023
    de24:	00bf2e0e 	bge	zero,r2,dae0 <__alt_exception_stack_pointer+0xf800dae0>
    de28:	a10001cc 	andi	r4,r20,7
    de2c:	20000726 	beq	r4,zero,de4c <__divdf3+0x67c>
    de30:	a10003cc 	andi	r4,r20,15
    de34:	01400104 	movi	r5,4
    de38:	21400426 	beq	r4,r5,de4c <__divdf3+0x67c>
    de3c:	a149883a 	add	r4,r20,r5
    de40:	2529803a 	cmpltu	r20,r4,r20
    de44:	8d23883a 	add	r17,r17,r20
    de48:	2029883a 	mov	r20,r4
    de4c:	8900402c 	andhi	r4,r17,256
    de50:	20000426 	beq	r4,zero,de64 <__divdf3+0x694>
    de54:	18810004 	addi	r2,r3,1024
    de58:	00ffc034 	movhi	r3,65280
    de5c:	18ffffc4 	addi	r3,r3,-1
    de60:	88e2703a 	and	r17,r17,r3
    de64:	00c1ff84 	movi	r3,2046
    de68:	18beb416 	blt	r3,r2,d93c <__alt_exception_stack_pointer+0xf800d93c>
    de6c:	a028d0fa 	srli	r20,r20,3
    de70:	882a977a 	slli	r21,r17,29
    de74:	8820927a 	slli	r16,r17,9
    de78:	1081ffcc 	andi	r2,r2,2047
    de7c:	ad2ab03a 	or	r21,r21,r20
    de80:	8020d33a 	srli	r16,r16,12
    de84:	9900004c 	andi	r4,r19,1
    de88:	003eb006 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    de8c:	8080022c 	andhi	r2,r16,8
    de90:	10001226 	beq	r2,zero,dedc <__divdf3+0x70c>
    de94:	8880022c 	andhi	r2,r17,8
    de98:	1000101e 	bne	r2,zero,dedc <__divdf3+0x70c>
    de9c:	00800434 	movhi	r2,16
    dea0:	8c000234 	orhi	r16,r17,8
    dea4:	10bfffc4 	addi	r2,r2,-1
    dea8:	b809883a 	mov	r4,r23
    deac:	80a0703a 	and	r16,r16,r2
    deb0:	a02b883a 	mov	r21,r20
    deb4:	003f0806 	br	dad8 <__alt_exception_stack_pointer+0xf800dad8>
    deb8:	008000c4 	movi	r2,3
    debc:	3880b126 	beq	r7,r2,e184 <__divdf3+0x9b4>
    dec0:	00800044 	movi	r2,1
    dec4:	38805b1e 	bne	r7,r2,e034 <__divdf3+0x864>
    dec8:	e009883a 	mov	r4,fp
    decc:	0005883a 	mov	r2,zero
    ded0:	0021883a 	mov	r16,zero
    ded4:	002b883a 	mov	r21,zero
    ded8:	003e9c06 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    dedc:	00800434 	movhi	r2,16
    dee0:	84000234 	orhi	r16,r16,8
    dee4:	10bfffc4 	addi	r2,r2,-1
    dee8:	b009883a 	mov	r4,r22
    deec:	80a0703a 	and	r16,r16,r2
    def0:	003ef906 	br	dad8 <__alt_exception_stack_pointer+0xf800dad8>
    def4:	103fca26 	beq	r2,zero,de20 <__alt_exception_stack_pointer+0xf800de20>
    def8:	b421883a 	add	r16,r22,r16
    defc:	a17fffc4 	addi	r5,r20,-1
    df00:	8580422e 	bgeu	r16,r22,e00c <__divdf3+0x83c>
    df04:	2829883a 	mov	r20,r5
    df08:	813fc41e 	bne	r16,r4,de1c <__alt_exception_stack_pointer+0xf800de1c>
    df0c:	d9800017 	ldw	r6,0(sp)
    df10:	30bfc21e 	bne	r6,r2,de1c <__alt_exception_stack_pointer+0xf800de1c>
    df14:	003fc206 	br	de20 <__alt_exception_stack_pointer+0xf800de20>
    df18:	143ff604 	addi	r16,r2,-40
    df1c:	8c20983a 	sll	r16,r17,r16
    df20:	002b883a 	mov	r21,zero
    df24:	003eb406 	br	d9f8 <__alt_exception_stack_pointer+0xf800d9f8>
    df28:	d9800215 	stw	r6,8(sp)
    df2c:	d9c00515 	stw	r7,20(sp)
    df30:	da000415 	stw	r8,16(sp)
    df34:	000f7640 	call	f764 <__clzsi2>
    df38:	10800804 	addi	r2,r2,32
    df3c:	da000417 	ldw	r8,16(sp)
    df40:	d9c00517 	ldw	r7,20(sp)
    df44:	d9800217 	ldw	r6,8(sp)
    df48:	003ea106 	br	d9d0 <__alt_exception_stack_pointer+0xf800d9d0>
    df4c:	147ff604 	addi	r17,r2,-40
    df50:	3462983a 	sll	r17,r6,r17
    df54:	0029883a 	mov	r20,zero
    df58:	003ec906 	br	da80 <__alt_exception_stack_pointer+0xf800da80>
    df5c:	3009883a 	mov	r4,r6
    df60:	d9400115 	stw	r5,4(sp)
    df64:	d9800215 	stw	r6,8(sp)
    df68:	da000415 	stw	r8,16(sp)
    df6c:	da400315 	stw	r9,12(sp)
    df70:	000f7640 	call	f764 <__clzsi2>
    df74:	10800804 	addi	r2,r2,32
    df78:	da400317 	ldw	r9,12(sp)
    df7c:	da000417 	ldw	r8,16(sp)
    df80:	d9800217 	ldw	r6,8(sp)
    df84:	d9400117 	ldw	r5,4(sp)
    df88:	003eb306 	br	da58 <__alt_exception_stack_pointer+0xf800da58>
    df8c:	d9800017 	ldw	r6,0(sp)
    df90:	a9ab883a 	add	r21,r21,r6
    df94:	a98b803a 	cmpltu	r5,r21,r6
    df98:	2d8b883a 	add	r5,r5,r22
    df9c:	2a11883a 	add	r8,r5,r8
    dfa0:	897fffc4 	addi	r5,r17,-1
    dfa4:	b2000c2e 	bgeu	r22,r8,dfd8 <__divdf3+0x808>
    dfa8:	41003f36 	bltu	r8,r4,e0a8 <__divdf3+0x8d8>
    dfac:	22006c26 	beq	r4,r8,e160 <__divdf3+0x990>
    dfb0:	4109c83a 	sub	r4,r8,r4
    dfb4:	2823883a 	mov	r17,r5
    dfb8:	003f3b06 	br	dca8 <__alt_exception_stack_pointer+0xf800dca8>
    dfbc:	ad3ed336 	bltu	r21,r20,db0c <__alt_exception_stack_pointer+0xf800db0c>
    dfc0:	a804d07a 	srli	r2,r21,1
    dfc4:	802e97fa 	slli	r23,r16,31
    dfc8:	a82a97fa 	slli	r21,r21,31
    dfcc:	8020d07a 	srli	r16,r16,1
    dfd0:	b8aeb03a 	or	r23,r23,r2
    dfd4:	003ed006 	br	db18 <__alt_exception_stack_pointer+0xf800db18>
    dfd8:	b23ff51e 	bne	r22,r8,dfb0 <__alt_exception_stack_pointer+0xf800dfb0>
    dfdc:	d9800017 	ldw	r6,0(sp)
    dfe0:	a9bff12e 	bgeu	r21,r6,dfa8 <__alt_exception_stack_pointer+0xf800dfa8>
    dfe4:	b109c83a 	sub	r4,r22,r4
    dfe8:	2823883a 	mov	r17,r5
    dfec:	003f2e06 	br	dca8 <__alt_exception_stack_pointer+0xf800dca8>
    dff0:	2021883a 	mov	r16,r4
    dff4:	003eff06 	br	dbf4 <__alt_exception_stack_pointer+0xf800dbf4>
    dff8:	2023883a 	mov	r17,r4
    dffc:	003ee406 	br	db90 <__alt_exception_stack_pointer+0xf800db90>
    e000:	a8bfe236 	bltu	r21,r2,df8c <__alt_exception_stack_pointer+0xf800df8c>
    e004:	0009883a 	mov	r4,zero
    e008:	003f2706 	br	dca8 <__alt_exception_stack_pointer+0xf800dca8>
    e00c:	81002d36 	bltu	r16,r4,e0c4 <__divdf3+0x8f4>
    e010:	24005626 	beq	r4,r16,e16c <__divdf3+0x99c>
    e014:	2829883a 	mov	r20,r5
    e018:	003f8006 	br	de1c <__alt_exception_stack_pointer+0xf800de1c>
    e01c:	053fffc4 	movi	r20,-1
    e020:	003f7f06 	br	de20 <__alt_exception_stack_pointer+0xf800de20>
    e024:	200f883a 	mov	r7,r4
    e028:	003f3c06 	br	dd1c <__alt_exception_stack_pointer+0xf800dd1c>
    e02c:	1011883a 	mov	r8,r2
    e030:	003f5506 	br	dd88 <__alt_exception_stack_pointer+0xf800dd88>
    e034:	e027883a 	mov	r19,fp
    e038:	003f7906 	br	de20 <__alt_exception_stack_pointer+0xf800de20>
    e03c:	010007c4 	movi	r4,31
    e040:	20c02816 	blt	r4,r3,e0e4 <__divdf3+0x914>
    e044:	00800804 	movi	r2,32
    e048:	10c5c83a 	sub	r2,r2,r3
    e04c:	888a983a 	sll	r5,r17,r2
    e050:	a0c8d83a 	srl	r4,r20,r3
    e054:	a084983a 	sll	r2,r20,r2
    e058:	88e2d83a 	srl	r17,r17,r3
    e05c:	2906b03a 	or	r3,r5,r4
    e060:	1004c03a 	cmpne	r2,r2,zero
    e064:	1886b03a 	or	r3,r3,r2
    e068:	188001cc 	andi	r2,r3,7
    e06c:	10000726 	beq	r2,zero,e08c <__divdf3+0x8bc>
    e070:	188003cc 	andi	r2,r3,15
    e074:	01000104 	movi	r4,4
    e078:	11000426 	beq	r2,r4,e08c <__divdf3+0x8bc>
    e07c:	1805883a 	mov	r2,r3
    e080:	10c00104 	addi	r3,r2,4
    e084:	1885803a 	cmpltu	r2,r3,r2
    e088:	88a3883a 	add	r17,r17,r2
    e08c:	8880202c 	andhi	r2,r17,128
    e090:	10002926 	beq	r2,zero,e138 <__divdf3+0x968>
    e094:	9900004c 	andi	r4,r19,1
    e098:	00800044 	movi	r2,1
    e09c:	0021883a 	mov	r16,zero
    e0a0:	002b883a 	mov	r21,zero
    e0a4:	003e2906 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    e0a8:	d9800017 	ldw	r6,0(sp)
    e0ac:	8c7fff84 	addi	r17,r17,-2
    e0b0:	a9ab883a 	add	r21,r21,r6
    e0b4:	a98b803a 	cmpltu	r5,r21,r6
    e0b8:	2d8b883a 	add	r5,r5,r22
    e0bc:	2a11883a 	add	r8,r5,r8
    e0c0:	003ef806 	br	dca4 <__alt_exception_stack_pointer+0xf800dca4>
    e0c4:	d9800017 	ldw	r6,0(sp)
    e0c8:	318f883a 	add	r7,r6,r6
    e0cc:	398b803a 	cmpltu	r5,r7,r6
    e0d0:	2d8d883a 	add	r6,r5,r22
    e0d4:	81a1883a 	add	r16,r16,r6
    e0d8:	a17fff84 	addi	r5,r20,-2
    e0dc:	d9c00015 	stw	r7,0(sp)
    e0e0:	003f8806 	br	df04 <__alt_exception_stack_pointer+0xf800df04>
    e0e4:	013ff844 	movi	r4,-31
    e0e8:	2085c83a 	sub	r2,r4,r2
    e0ec:	8888d83a 	srl	r4,r17,r2
    e0f0:	00800804 	movi	r2,32
    e0f4:	18802126 	beq	r3,r2,e17c <__divdf3+0x9ac>
    e0f8:	04001004 	movi	r16,64
    e0fc:	80c7c83a 	sub	r3,r16,r3
    e100:	88e0983a 	sll	r16,r17,r3
    e104:	8504b03a 	or	r2,r16,r20
    e108:	1004c03a 	cmpne	r2,r2,zero
    e10c:	2084b03a 	or	r2,r4,r2
    e110:	144001cc 	andi	r17,r2,7
    e114:	88000d1e 	bne	r17,zero,e14c <__divdf3+0x97c>
    e118:	0021883a 	mov	r16,zero
    e11c:	102ad0fa 	srli	r21,r2,3
    e120:	9900004c 	andi	r4,r19,1
    e124:	0005883a 	mov	r2,zero
    e128:	ac6ab03a 	or	r21,r21,r17
    e12c:	003e0706 	br	d94c <__alt_exception_stack_pointer+0xf800d94c>
    e130:	1007883a 	mov	r3,r2
    e134:	0023883a 	mov	r17,zero
    e138:	8820927a 	slli	r16,r17,9
    e13c:	1805883a 	mov	r2,r3
    e140:	8822977a 	slli	r17,r17,29
    e144:	8020d33a 	srli	r16,r16,12
    e148:	003ff406 	br	e11c <__alt_exception_stack_pointer+0xf800e11c>
    e14c:	10c003cc 	andi	r3,r2,15
    e150:	01000104 	movi	r4,4
    e154:	193ff626 	beq	r3,r4,e130 <__alt_exception_stack_pointer+0xf800e130>
    e158:	0023883a 	mov	r17,zero
    e15c:	003fc806 	br	e080 <__alt_exception_stack_pointer+0xf800e080>
    e160:	a8bfd136 	bltu	r21,r2,e0a8 <__alt_exception_stack_pointer+0xf800e0a8>
    e164:	2823883a 	mov	r17,r5
    e168:	003fa606 	br	e004 <__alt_exception_stack_pointer+0xf800e004>
    e16c:	d9800017 	ldw	r6,0(sp)
    e170:	30bfd436 	bltu	r6,r2,e0c4 <__alt_exception_stack_pointer+0xf800e0c4>
    e174:	2829883a 	mov	r20,r5
    e178:	003f6406 	br	df0c <__alt_exception_stack_pointer+0xf800df0c>
    e17c:	0021883a 	mov	r16,zero
    e180:	003fe006 	br	e104 <__alt_exception_stack_pointer+0xf800e104>
    e184:	00800434 	movhi	r2,16
    e188:	8c000234 	orhi	r16,r17,8
    e18c:	10bfffc4 	addi	r2,r2,-1
    e190:	e009883a 	mov	r4,fp
    e194:	80a0703a 	and	r16,r16,r2
    e198:	a02b883a 	mov	r21,r20
    e19c:	003e4e06 	br	dad8 <__alt_exception_stack_pointer+0xf800dad8>

0000e1a0 <__eqdf2>:
    e1a0:	2804d53a 	srli	r2,r5,20
    e1a4:	3806d53a 	srli	r3,r7,20
    e1a8:	02000434 	movhi	r8,16
    e1ac:	423fffc4 	addi	r8,r8,-1
    e1b0:	1081ffcc 	andi	r2,r2,2047
    e1b4:	0281ffc4 	movi	r10,2047
    e1b8:	2a12703a 	and	r9,r5,r8
    e1bc:	18c1ffcc 	andi	r3,r3,2047
    e1c0:	3a10703a 	and	r8,r7,r8
    e1c4:	280ad7fa 	srli	r5,r5,31
    e1c8:	380ed7fa 	srli	r7,r7,31
    e1cc:	12801026 	beq	r2,r10,e210 <__eqdf2+0x70>
    e1d0:	0281ffc4 	movi	r10,2047
    e1d4:	1a800a26 	beq	r3,r10,e200 <__eqdf2+0x60>
    e1d8:	10c00226 	beq	r2,r3,e1e4 <__eqdf2+0x44>
    e1dc:	00800044 	movi	r2,1
    e1e0:	f800283a 	ret
    e1e4:	4a3ffd1e 	bne	r9,r8,e1dc <__alt_exception_stack_pointer+0xf800e1dc>
    e1e8:	21bffc1e 	bne	r4,r6,e1dc <__alt_exception_stack_pointer+0xf800e1dc>
    e1ec:	29c00c26 	beq	r5,r7,e220 <__eqdf2+0x80>
    e1f0:	103ffa1e 	bne	r2,zero,e1dc <__alt_exception_stack_pointer+0xf800e1dc>
    e1f4:	2244b03a 	or	r2,r4,r9
    e1f8:	1004c03a 	cmpne	r2,r2,zero
    e1fc:	f800283a 	ret
    e200:	3214b03a 	or	r10,r6,r8
    e204:	503ff426 	beq	r10,zero,e1d8 <__alt_exception_stack_pointer+0xf800e1d8>
    e208:	00800044 	movi	r2,1
    e20c:	f800283a 	ret
    e210:	2254b03a 	or	r10,r4,r9
    e214:	503fee26 	beq	r10,zero,e1d0 <__alt_exception_stack_pointer+0xf800e1d0>
    e218:	00800044 	movi	r2,1
    e21c:	f800283a 	ret
    e220:	0005883a 	mov	r2,zero
    e224:	f800283a 	ret

0000e228 <__gedf2>:
    e228:	2804d53a 	srli	r2,r5,20
    e22c:	3806d53a 	srli	r3,r7,20
    e230:	02000434 	movhi	r8,16
    e234:	423fffc4 	addi	r8,r8,-1
    e238:	1081ffcc 	andi	r2,r2,2047
    e23c:	0241ffc4 	movi	r9,2047
    e240:	2a14703a 	and	r10,r5,r8
    e244:	18c1ffcc 	andi	r3,r3,2047
    e248:	3a10703a 	and	r8,r7,r8
    e24c:	280ad7fa 	srli	r5,r5,31
    e250:	380ed7fa 	srli	r7,r7,31
    e254:	12401d26 	beq	r2,r9,e2cc <__gedf2+0xa4>
    e258:	0241ffc4 	movi	r9,2047
    e25c:	1a401226 	beq	r3,r9,e2a8 <__gedf2+0x80>
    e260:	1000081e 	bne	r2,zero,e284 <__gedf2+0x5c>
    e264:	2296b03a 	or	r11,r4,r10
    e268:	5813003a 	cmpeq	r9,r11,zero
    e26c:	1800091e 	bne	r3,zero,e294 <__gedf2+0x6c>
    e270:	3218b03a 	or	r12,r6,r8
    e274:	6000071e 	bne	r12,zero,e294 <__gedf2+0x6c>
    e278:	0005883a 	mov	r2,zero
    e27c:	5800101e 	bne	r11,zero,e2c0 <__gedf2+0x98>
    e280:	f800283a 	ret
    e284:	18000c1e 	bne	r3,zero,e2b8 <__gedf2+0x90>
    e288:	3212b03a 	or	r9,r6,r8
    e28c:	48000c26 	beq	r9,zero,e2c0 <__gedf2+0x98>
    e290:	0013883a 	mov	r9,zero
    e294:	39c03fcc 	andi	r7,r7,255
    e298:	48000826 	beq	r9,zero,e2bc <__gedf2+0x94>
    e29c:	38000926 	beq	r7,zero,e2c4 <__gedf2+0x9c>
    e2a0:	00800044 	movi	r2,1
    e2a4:	f800283a 	ret
    e2a8:	3212b03a 	or	r9,r6,r8
    e2ac:	483fec26 	beq	r9,zero,e260 <__alt_exception_stack_pointer+0xf800e260>
    e2b0:	00bfff84 	movi	r2,-2
    e2b4:	f800283a 	ret
    e2b8:	39c03fcc 	andi	r7,r7,255
    e2bc:	29c00626 	beq	r5,r7,e2d8 <__gedf2+0xb0>
    e2c0:	283ff726 	beq	r5,zero,e2a0 <__alt_exception_stack_pointer+0xf800e2a0>
    e2c4:	00bfffc4 	movi	r2,-1
    e2c8:	f800283a 	ret
    e2cc:	2292b03a 	or	r9,r4,r10
    e2d0:	483fe126 	beq	r9,zero,e258 <__alt_exception_stack_pointer+0xf800e258>
    e2d4:	003ff606 	br	e2b0 <__alt_exception_stack_pointer+0xf800e2b0>
    e2d8:	18bff916 	blt	r3,r2,e2c0 <__alt_exception_stack_pointer+0xf800e2c0>
    e2dc:	10c00316 	blt	r2,r3,e2ec <__gedf2+0xc4>
    e2e0:	42bff736 	bltu	r8,r10,e2c0 <__alt_exception_stack_pointer+0xf800e2c0>
    e2e4:	52000326 	beq	r10,r8,e2f4 <__gedf2+0xcc>
    e2e8:	5200042e 	bgeu	r10,r8,e2fc <__gedf2+0xd4>
    e2ec:	283fec1e 	bne	r5,zero,e2a0 <__alt_exception_stack_pointer+0xf800e2a0>
    e2f0:	003ff406 	br	e2c4 <__alt_exception_stack_pointer+0xf800e2c4>
    e2f4:	313ff236 	bltu	r6,r4,e2c0 <__alt_exception_stack_pointer+0xf800e2c0>
    e2f8:	21bffc36 	bltu	r4,r6,e2ec <__alt_exception_stack_pointer+0xf800e2ec>
    e2fc:	0005883a 	mov	r2,zero
    e300:	f800283a 	ret

0000e304 <__ledf2>:
    e304:	2804d53a 	srli	r2,r5,20
    e308:	3810d53a 	srli	r8,r7,20
    e30c:	00c00434 	movhi	r3,16
    e310:	18ffffc4 	addi	r3,r3,-1
    e314:	1081ffcc 	andi	r2,r2,2047
    e318:	0241ffc4 	movi	r9,2047
    e31c:	28d4703a 	and	r10,r5,r3
    e320:	4201ffcc 	andi	r8,r8,2047
    e324:	38c6703a 	and	r3,r7,r3
    e328:	280ad7fa 	srli	r5,r5,31
    e32c:	380ed7fa 	srli	r7,r7,31
    e330:	12401f26 	beq	r2,r9,e3b0 <__ledf2+0xac>
    e334:	0241ffc4 	movi	r9,2047
    e338:	42401426 	beq	r8,r9,e38c <__ledf2+0x88>
    e33c:	1000091e 	bne	r2,zero,e364 <__ledf2+0x60>
    e340:	2296b03a 	or	r11,r4,r10
    e344:	5813003a 	cmpeq	r9,r11,zero
    e348:	29403fcc 	andi	r5,r5,255
    e34c:	40000a1e 	bne	r8,zero,e378 <__ledf2+0x74>
    e350:	30d8b03a 	or	r12,r6,r3
    e354:	6000081e 	bne	r12,zero,e378 <__ledf2+0x74>
    e358:	0005883a 	mov	r2,zero
    e35c:	5800111e 	bne	r11,zero,e3a4 <__ledf2+0xa0>
    e360:	f800283a 	ret
    e364:	29403fcc 	andi	r5,r5,255
    e368:	40000c1e 	bne	r8,zero,e39c <__ledf2+0x98>
    e36c:	30d2b03a 	or	r9,r6,r3
    e370:	48000c26 	beq	r9,zero,e3a4 <__ledf2+0xa0>
    e374:	0013883a 	mov	r9,zero
    e378:	39c03fcc 	andi	r7,r7,255
    e37c:	48000826 	beq	r9,zero,e3a0 <__ledf2+0x9c>
    e380:	38001126 	beq	r7,zero,e3c8 <__ledf2+0xc4>
    e384:	00800044 	movi	r2,1
    e388:	f800283a 	ret
    e38c:	30d2b03a 	or	r9,r6,r3
    e390:	483fea26 	beq	r9,zero,e33c <__alt_exception_stack_pointer+0xf800e33c>
    e394:	00800084 	movi	r2,2
    e398:	f800283a 	ret
    e39c:	39c03fcc 	andi	r7,r7,255
    e3a0:	39400726 	beq	r7,r5,e3c0 <__ledf2+0xbc>
    e3a4:	2800081e 	bne	r5,zero,e3c8 <__ledf2+0xc4>
    e3a8:	00800044 	movi	r2,1
    e3ac:	f800283a 	ret
    e3b0:	2292b03a 	or	r9,r4,r10
    e3b4:	483fdf26 	beq	r9,zero,e334 <__alt_exception_stack_pointer+0xf800e334>
    e3b8:	00800084 	movi	r2,2
    e3bc:	f800283a 	ret
    e3c0:	4080030e 	bge	r8,r2,e3d0 <__ledf2+0xcc>
    e3c4:	383fef26 	beq	r7,zero,e384 <__alt_exception_stack_pointer+0xf800e384>
    e3c8:	00bfffc4 	movi	r2,-1
    e3cc:	f800283a 	ret
    e3d0:	123feb16 	blt	r2,r8,e380 <__alt_exception_stack_pointer+0xf800e380>
    e3d4:	1abff336 	bltu	r3,r10,e3a4 <__alt_exception_stack_pointer+0xf800e3a4>
    e3d8:	50c00326 	beq	r10,r3,e3e8 <__ledf2+0xe4>
    e3dc:	50c0042e 	bgeu	r10,r3,e3f0 <__ledf2+0xec>
    e3e0:	283fe81e 	bne	r5,zero,e384 <__alt_exception_stack_pointer+0xf800e384>
    e3e4:	003ff806 	br	e3c8 <__alt_exception_stack_pointer+0xf800e3c8>
    e3e8:	313fee36 	bltu	r6,r4,e3a4 <__alt_exception_stack_pointer+0xf800e3a4>
    e3ec:	21bffc36 	bltu	r4,r6,e3e0 <__alt_exception_stack_pointer+0xf800e3e0>
    e3f0:	0005883a 	mov	r2,zero
    e3f4:	f800283a 	ret

0000e3f8 <__muldf3>:
    e3f8:	deffee04 	addi	sp,sp,-72
    e3fc:	dd000c15 	stw	r20,48(sp)
    e400:	2828d53a 	srli	r20,r5,20
    e404:	ddc00f15 	stw	r23,60(sp)
    e408:	282ed7fa 	srli	r23,r5,31
    e40c:	dc000815 	stw	r16,32(sp)
    e410:	04000434 	movhi	r16,16
    e414:	dcc00b15 	stw	r19,44(sp)
    e418:	843fffc4 	addi	r16,r16,-1
    e41c:	dfc01115 	stw	ra,68(sp)
    e420:	df001015 	stw	fp,64(sp)
    e424:	dd800e15 	stw	r22,56(sp)
    e428:	dd400d15 	stw	r21,52(sp)
    e42c:	dc800a15 	stw	r18,40(sp)
    e430:	dc400915 	stw	r17,36(sp)
    e434:	a501ffcc 	andi	r20,r20,2047
    e438:	2c20703a 	and	r16,r5,r16
    e43c:	b827883a 	mov	r19,r23
    e440:	ba403fcc 	andi	r9,r23,255
    e444:	a0006026 	beq	r20,zero,e5c8 <__muldf3+0x1d0>
    e448:	0081ffc4 	movi	r2,2047
    e44c:	202d883a 	mov	r22,r4
    e450:	a0803626 	beq	r20,r2,e52c <__muldf3+0x134>
    e454:	84000434 	orhi	r16,r16,16
    e458:	200ad77a 	srli	r5,r4,29
    e45c:	800490fa 	slli	r2,r16,3
    e460:	202c90fa 	slli	r22,r4,3
    e464:	a53f0044 	addi	r20,r20,-1023
    e468:	28a0b03a 	or	r16,r5,r2
    e46c:	002b883a 	mov	r21,zero
    e470:	000b883a 	mov	r5,zero
    e474:	3804d53a 	srli	r2,r7,20
    e478:	3838d7fa 	srli	fp,r7,31
    e47c:	04400434 	movhi	r17,16
    e480:	8c7fffc4 	addi	r17,r17,-1
    e484:	1081ffcc 	andi	r2,r2,2047
    e488:	3025883a 	mov	r18,r6
    e48c:	3c62703a 	and	r17,r7,r17
    e490:	e2803fcc 	andi	r10,fp,255
    e494:	10006d26 	beq	r2,zero,e64c <__muldf3+0x254>
    e498:	00c1ffc4 	movi	r3,2047
    e49c:	10c06526 	beq	r2,r3,e634 <__muldf3+0x23c>
    e4a0:	8c400434 	orhi	r17,r17,16
    e4a4:	300ed77a 	srli	r7,r6,29
    e4a8:	880690fa 	slli	r3,r17,3
    e4ac:	302490fa 	slli	r18,r6,3
    e4b0:	10bf0044 	addi	r2,r2,-1023
    e4b4:	38e2b03a 	or	r17,r7,r3
    e4b8:	000f883a 	mov	r7,zero
    e4bc:	a087883a 	add	r3,r20,r2
    e4c0:	010003c4 	movi	r4,15
    e4c4:	3d44b03a 	or	r2,r7,r21
    e4c8:	e5ccf03a 	xor	r6,fp,r23
    e4cc:	1a000044 	addi	r8,r3,1
    e4d0:	20809b36 	bltu	r4,r2,e740 <__muldf3+0x348>
    e4d4:	100490ba 	slli	r2,r2,2
    e4d8:	01000074 	movhi	r4,1
    e4dc:	21393b04 	addi	r4,r4,-6932
    e4e0:	1105883a 	add	r2,r2,r4
    e4e4:	10800017 	ldw	r2,0(r2)
    e4e8:	1000683a 	jmp	r2
    e4ec:	0000e740 	call	e74 <init_keyboard+0x744>
    e4f0:	0000e54c 	andi	zero,zero,917
    e4f4:	0000e54c 	andi	zero,zero,917
    e4f8:	0000e548 	cmpgei	zero,zero,917
    e4fc:	0000e71c 	xori	zero,zero,924
    e500:	0000e71c 	xori	zero,zero,924
    e504:	0000e704 	movi	zero,924
    e508:	0000e548 	cmpgei	zero,zero,917
    e50c:	0000e71c 	xori	zero,zero,924
    e510:	0000e704 	movi	zero,924
    e514:	0000e71c 	xori	zero,zero,924
    e518:	0000e548 	cmpgei	zero,zero,917
    e51c:	0000e72c 	andhi	zero,zero,924
    e520:	0000e72c 	andhi	zero,zero,924
    e524:	0000e72c 	andhi	zero,zero,924
    e528:	0000ea8c 	andi	zero,zero,938
    e52c:	2404b03a 	or	r2,r4,r16
    e530:	1000711e 	bne	r2,zero,e6f8 <__muldf3+0x300>
    e534:	05400204 	movi	r21,8
    e538:	0021883a 	mov	r16,zero
    e53c:	002d883a 	mov	r22,zero
    e540:	01400084 	movi	r5,2
    e544:	003fcb06 	br	e474 <__alt_exception_stack_pointer+0xf800e474>
    e548:	500d883a 	mov	r6,r10
    e54c:	00800084 	movi	r2,2
    e550:	38805926 	beq	r7,r2,e6b8 <__muldf3+0x2c0>
    e554:	008000c4 	movi	r2,3
    e558:	3881bb26 	beq	r7,r2,ec48 <__muldf3+0x850>
    e55c:	00800044 	movi	r2,1
    e560:	3881961e 	bne	r7,r2,ebbc <__muldf3+0x7c4>
    e564:	3027883a 	mov	r19,r6
    e568:	0005883a 	mov	r2,zero
    e56c:	0021883a 	mov	r16,zero
    e570:	002d883a 	mov	r22,zero
    e574:	1004953a 	slli	r2,r2,20
    e578:	98c03fcc 	andi	r3,r19,255
    e57c:	04400434 	movhi	r17,16
    e580:	8c7fffc4 	addi	r17,r17,-1
    e584:	180697fa 	slli	r3,r3,31
    e588:	8460703a 	and	r16,r16,r17
    e58c:	80a0b03a 	or	r16,r16,r2
    e590:	80c6b03a 	or	r3,r16,r3
    e594:	b005883a 	mov	r2,r22
    e598:	dfc01117 	ldw	ra,68(sp)
    e59c:	df001017 	ldw	fp,64(sp)
    e5a0:	ddc00f17 	ldw	r23,60(sp)
    e5a4:	dd800e17 	ldw	r22,56(sp)
    e5a8:	dd400d17 	ldw	r21,52(sp)
    e5ac:	dd000c17 	ldw	r20,48(sp)
    e5b0:	dcc00b17 	ldw	r19,44(sp)
    e5b4:	dc800a17 	ldw	r18,40(sp)
    e5b8:	dc400917 	ldw	r17,36(sp)
    e5bc:	dc000817 	ldw	r16,32(sp)
    e5c0:	dec01204 	addi	sp,sp,72
    e5c4:	f800283a 	ret
    e5c8:	2404b03a 	or	r2,r4,r16
    e5cc:	202b883a 	mov	r21,r4
    e5d0:	10004426 	beq	r2,zero,e6e4 <__muldf3+0x2ec>
    e5d4:	80015126 	beq	r16,zero,eb1c <__muldf3+0x724>
    e5d8:	8009883a 	mov	r4,r16
    e5dc:	d9800715 	stw	r6,28(sp)
    e5e0:	d9c00215 	stw	r7,8(sp)
    e5e4:	da400415 	stw	r9,16(sp)
    e5e8:	000f7640 	call	f764 <__clzsi2>
    e5ec:	d9800717 	ldw	r6,28(sp)
    e5f0:	d9c00217 	ldw	r7,8(sp)
    e5f4:	da400417 	ldw	r9,16(sp)
    e5f8:	113ffd44 	addi	r4,r2,-11
    e5fc:	00c00704 	movi	r3,28
    e600:	19014216 	blt	r3,r4,eb0c <__muldf3+0x714>
    e604:	00c00744 	movi	r3,29
    e608:	15bffe04 	addi	r22,r2,-8
    e60c:	1907c83a 	sub	r3,r3,r4
    e610:	85a0983a 	sll	r16,r16,r22
    e614:	a8c6d83a 	srl	r3,r21,r3
    e618:	adac983a 	sll	r22,r21,r22
    e61c:	1c20b03a 	or	r16,r3,r16
    e620:	1080fcc4 	addi	r2,r2,1011
    e624:	00a9c83a 	sub	r20,zero,r2
    e628:	002b883a 	mov	r21,zero
    e62c:	000b883a 	mov	r5,zero
    e630:	003f9006 	br	e474 <__alt_exception_stack_pointer+0xf800e474>
    e634:	3446b03a 	or	r3,r6,r17
    e638:	1800281e 	bne	r3,zero,e6dc <__muldf3+0x2e4>
    e63c:	0023883a 	mov	r17,zero
    e640:	0025883a 	mov	r18,zero
    e644:	01c00084 	movi	r7,2
    e648:	003f9c06 	br	e4bc <__alt_exception_stack_pointer+0xf800e4bc>
    e64c:	3446b03a 	or	r3,r6,r17
    e650:	18001e26 	beq	r3,zero,e6cc <__muldf3+0x2d4>
    e654:	88012126 	beq	r17,zero,eadc <__muldf3+0x6e4>
    e658:	8809883a 	mov	r4,r17
    e65c:	d9400215 	stw	r5,8(sp)
    e660:	d9800715 	stw	r6,28(sp)
    e664:	da400415 	stw	r9,16(sp)
    e668:	da800315 	stw	r10,12(sp)
    e66c:	000f7640 	call	f764 <__clzsi2>
    e670:	d9400217 	ldw	r5,8(sp)
    e674:	d9800717 	ldw	r6,28(sp)
    e678:	da400417 	ldw	r9,16(sp)
    e67c:	da800317 	ldw	r10,12(sp)
    e680:	113ffd44 	addi	r4,r2,-11
    e684:	00c00704 	movi	r3,28
    e688:	19011016 	blt	r3,r4,eacc <__muldf3+0x6d4>
    e68c:	00c00744 	movi	r3,29
    e690:	14bffe04 	addi	r18,r2,-8
    e694:	1907c83a 	sub	r3,r3,r4
    e698:	8ca2983a 	sll	r17,r17,r18
    e69c:	30c6d83a 	srl	r3,r6,r3
    e6a0:	34a4983a 	sll	r18,r6,r18
    e6a4:	1c62b03a 	or	r17,r3,r17
    e6a8:	1080fcc4 	addi	r2,r2,1011
    e6ac:	0085c83a 	sub	r2,zero,r2
    e6b0:	000f883a 	mov	r7,zero
    e6b4:	003f8106 	br	e4bc <__alt_exception_stack_pointer+0xf800e4bc>
    e6b8:	3027883a 	mov	r19,r6
    e6bc:	0081ffc4 	movi	r2,2047
    e6c0:	0021883a 	mov	r16,zero
    e6c4:	002d883a 	mov	r22,zero
    e6c8:	003faa06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e6cc:	0023883a 	mov	r17,zero
    e6d0:	0025883a 	mov	r18,zero
    e6d4:	01c00044 	movi	r7,1
    e6d8:	003f7806 	br	e4bc <__alt_exception_stack_pointer+0xf800e4bc>
    e6dc:	01c000c4 	movi	r7,3
    e6e0:	003f7606 	br	e4bc <__alt_exception_stack_pointer+0xf800e4bc>
    e6e4:	05400104 	movi	r21,4
    e6e8:	0021883a 	mov	r16,zero
    e6ec:	002d883a 	mov	r22,zero
    e6f0:	01400044 	movi	r5,1
    e6f4:	003f5f06 	br	e474 <__alt_exception_stack_pointer+0xf800e474>
    e6f8:	05400304 	movi	r21,12
    e6fc:	014000c4 	movi	r5,3
    e700:	003f5c06 	br	e474 <__alt_exception_stack_pointer+0xf800e474>
    e704:	04000434 	movhi	r16,16
    e708:	0027883a 	mov	r19,zero
    e70c:	843fffc4 	addi	r16,r16,-1
    e710:	05bfffc4 	movi	r22,-1
    e714:	0081ffc4 	movi	r2,2047
    e718:	003f9606 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e71c:	8023883a 	mov	r17,r16
    e720:	b025883a 	mov	r18,r22
    e724:	280f883a 	mov	r7,r5
    e728:	003f8806 	br	e54c <__alt_exception_stack_pointer+0xf800e54c>
    e72c:	8023883a 	mov	r17,r16
    e730:	b025883a 	mov	r18,r22
    e734:	480d883a 	mov	r6,r9
    e738:	280f883a 	mov	r7,r5
    e73c:	003f8306 	br	e54c <__alt_exception_stack_pointer+0xf800e54c>
    e740:	b026d43a 	srli	r19,r22,16
    e744:	902ed43a 	srli	r23,r18,16
    e748:	b5bfffcc 	andi	r22,r22,65535
    e74c:	94bfffcc 	andi	r18,r18,65535
    e750:	b00b883a 	mov	r5,r22
    e754:	9009883a 	mov	r4,r18
    e758:	d8c00515 	stw	r3,20(sp)
    e75c:	d9800715 	stw	r6,28(sp)
    e760:	da000615 	stw	r8,24(sp)
    e764:	000cefc0 	call	cefc <__mulsi3>
    e768:	980b883a 	mov	r5,r19
    e76c:	9009883a 	mov	r4,r18
    e770:	1029883a 	mov	r20,r2
    e774:	000cefc0 	call	cefc <__mulsi3>
    e778:	b80b883a 	mov	r5,r23
    e77c:	9809883a 	mov	r4,r19
    e780:	102b883a 	mov	r21,r2
    e784:	000cefc0 	call	cefc <__mulsi3>
    e788:	b809883a 	mov	r4,r23
    e78c:	b00b883a 	mov	r5,r22
    e790:	1039883a 	mov	fp,r2
    e794:	000cefc0 	call	cefc <__mulsi3>
    e798:	a008d43a 	srli	r4,r20,16
    e79c:	1545883a 	add	r2,r2,r21
    e7a0:	d8c00517 	ldw	r3,20(sp)
    e7a4:	2085883a 	add	r2,r4,r2
    e7a8:	d9800717 	ldw	r6,28(sp)
    e7ac:	da000617 	ldw	r8,24(sp)
    e7b0:	1540022e 	bgeu	r2,r21,e7bc <__muldf3+0x3c4>
    e7b4:	01000074 	movhi	r4,1
    e7b8:	e139883a 	add	fp,fp,r4
    e7bc:	100e943a 	slli	r7,r2,16
    e7c0:	1004d43a 	srli	r2,r2,16
    e7c4:	882ad43a 	srli	r21,r17,16
    e7c8:	a53fffcc 	andi	r20,r20,65535
    e7cc:	8c7fffcc 	andi	r17,r17,65535
    e7d0:	3d29883a 	add	r20,r7,r20
    e7d4:	b00b883a 	mov	r5,r22
    e7d8:	8809883a 	mov	r4,r17
    e7dc:	d8c00515 	stw	r3,20(sp)
    e7e0:	d9800715 	stw	r6,28(sp)
    e7e4:	da000615 	stw	r8,24(sp)
    e7e8:	dd000115 	stw	r20,4(sp)
    e7ec:	d8800015 	stw	r2,0(sp)
    e7f0:	000cefc0 	call	cefc <__mulsi3>
    e7f4:	980b883a 	mov	r5,r19
    e7f8:	8809883a 	mov	r4,r17
    e7fc:	d8800215 	stw	r2,8(sp)
    e800:	000cefc0 	call	cefc <__mulsi3>
    e804:	9809883a 	mov	r4,r19
    e808:	a80b883a 	mov	r5,r21
    e80c:	1029883a 	mov	r20,r2
    e810:	000cefc0 	call	cefc <__mulsi3>
    e814:	b00b883a 	mov	r5,r22
    e818:	a809883a 	mov	r4,r21
    e81c:	d8800415 	stw	r2,16(sp)
    e820:	000cefc0 	call	cefc <__mulsi3>
    e824:	d9c00217 	ldw	r7,8(sp)
    e828:	1505883a 	add	r2,r2,r20
    e82c:	d8c00517 	ldw	r3,20(sp)
    e830:	3826d43a 	srli	r19,r7,16
    e834:	d9800717 	ldw	r6,28(sp)
    e838:	da000617 	ldw	r8,24(sp)
    e83c:	9885883a 	add	r2,r19,r2
    e840:	da400417 	ldw	r9,16(sp)
    e844:	1500022e 	bgeu	r2,r20,e850 <__muldf3+0x458>
    e848:	01000074 	movhi	r4,1
    e84c:	4913883a 	add	r9,r9,r4
    e850:	1028d43a 	srli	r20,r2,16
    e854:	1004943a 	slli	r2,r2,16
    e858:	802cd43a 	srli	r22,r16,16
    e85c:	843fffcc 	andi	r16,r16,65535
    e860:	3cffffcc 	andi	r19,r7,65535
    e864:	9009883a 	mov	r4,r18
    e868:	800b883a 	mov	r5,r16
    e86c:	a269883a 	add	r20,r20,r9
    e870:	d8c00515 	stw	r3,20(sp)
    e874:	d9800715 	stw	r6,28(sp)
    e878:	da000615 	stw	r8,24(sp)
    e87c:	14e7883a 	add	r19,r2,r19
    e880:	000cefc0 	call	cefc <__mulsi3>
    e884:	9009883a 	mov	r4,r18
    e888:	b00b883a 	mov	r5,r22
    e88c:	d8800315 	stw	r2,12(sp)
    e890:	000cefc0 	call	cefc <__mulsi3>
    e894:	b809883a 	mov	r4,r23
    e898:	b00b883a 	mov	r5,r22
    e89c:	d8800215 	stw	r2,8(sp)
    e8a0:	000cefc0 	call	cefc <__mulsi3>
    e8a4:	b80b883a 	mov	r5,r23
    e8a8:	8009883a 	mov	r4,r16
    e8ac:	d8800415 	stw	r2,16(sp)
    e8b0:	000cefc0 	call	cefc <__mulsi3>
    e8b4:	da800317 	ldw	r10,12(sp)
    e8b8:	d9c00217 	ldw	r7,8(sp)
    e8bc:	d9000017 	ldw	r4,0(sp)
    e8c0:	502ed43a 	srli	r23,r10,16
    e8c4:	11c5883a 	add	r2,r2,r7
    e8c8:	24e5883a 	add	r18,r4,r19
    e8cc:	b885883a 	add	r2,r23,r2
    e8d0:	d8c00517 	ldw	r3,20(sp)
    e8d4:	d9800717 	ldw	r6,28(sp)
    e8d8:	da000617 	ldw	r8,24(sp)
    e8dc:	da400417 	ldw	r9,16(sp)
    e8e0:	11c0022e 	bgeu	r2,r7,e8ec <__muldf3+0x4f4>
    e8e4:	01000074 	movhi	r4,1
    e8e8:	4913883a 	add	r9,r9,r4
    e8ec:	100ed43a 	srli	r7,r2,16
    e8f0:	1004943a 	slli	r2,r2,16
    e8f4:	55ffffcc 	andi	r23,r10,65535
    e8f8:	3a53883a 	add	r9,r7,r9
    e8fc:	8809883a 	mov	r4,r17
    e900:	800b883a 	mov	r5,r16
    e904:	d8c00515 	stw	r3,20(sp)
    e908:	d9800715 	stw	r6,28(sp)
    e90c:	da000615 	stw	r8,24(sp)
    e910:	da400415 	stw	r9,16(sp)
    e914:	15ef883a 	add	r23,r2,r23
    e918:	000cefc0 	call	cefc <__mulsi3>
    e91c:	8809883a 	mov	r4,r17
    e920:	b00b883a 	mov	r5,r22
    e924:	d8800215 	stw	r2,8(sp)
    e928:	000cefc0 	call	cefc <__mulsi3>
    e92c:	b00b883a 	mov	r5,r22
    e930:	a809883a 	mov	r4,r21
    e934:	d8800315 	stw	r2,12(sp)
    e938:	000cefc0 	call	cefc <__mulsi3>
    e93c:	8009883a 	mov	r4,r16
    e940:	a80b883a 	mov	r5,r21
    e944:	1023883a 	mov	r17,r2
    e948:	000cefc0 	call	cefc <__mulsi3>
    e94c:	d9c00217 	ldw	r7,8(sp)
    e950:	da800317 	ldw	r10,12(sp)
    e954:	d8c00517 	ldw	r3,20(sp)
    e958:	3808d43a 	srli	r4,r7,16
    e95c:	1285883a 	add	r2,r2,r10
    e960:	d9800717 	ldw	r6,28(sp)
    e964:	2085883a 	add	r2,r4,r2
    e968:	da000617 	ldw	r8,24(sp)
    e96c:	da400417 	ldw	r9,16(sp)
    e970:	1280022e 	bgeu	r2,r10,e97c <__muldf3+0x584>
    e974:	01000074 	movhi	r4,1
    e978:	8923883a 	add	r17,r17,r4
    e97c:	1008943a 	slli	r4,r2,16
    e980:	39ffffcc 	andi	r7,r7,65535
    e984:	e4b9883a 	add	fp,fp,r18
    e988:	21cf883a 	add	r7,r4,r7
    e98c:	e4e7803a 	cmpltu	r19,fp,r19
    e990:	3d0f883a 	add	r7,r7,r20
    e994:	bf39883a 	add	fp,r23,fp
    e998:	99c9883a 	add	r4,r19,r7
    e99c:	e5ef803a 	cmpltu	r23,fp,r23
    e9a0:	490b883a 	add	r5,r9,r4
    e9a4:	1004d43a 	srli	r2,r2,16
    e9a8:	b965883a 	add	r18,r23,r5
    e9ac:	24c9803a 	cmpltu	r4,r4,r19
    e9b0:	3d29803a 	cmpltu	r20,r7,r20
    e9b4:	a128b03a 	or	r20,r20,r4
    e9b8:	95ef803a 	cmpltu	r23,r18,r23
    e9bc:	2a53803a 	cmpltu	r9,r5,r9
    e9c0:	a0a9883a 	add	r20,r20,r2
    e9c4:	4deeb03a 	or	r23,r9,r23
    e9c8:	a5ef883a 	add	r23,r20,r23
    e9cc:	bc63883a 	add	r17,r23,r17
    e9d0:	e004927a 	slli	r2,fp,9
    e9d4:	d9000117 	ldw	r4,4(sp)
    e9d8:	882e927a 	slli	r23,r17,9
    e9dc:	9022d5fa 	srli	r17,r18,23
    e9e0:	e038d5fa 	srli	fp,fp,23
    e9e4:	1104b03a 	or	r2,r2,r4
    e9e8:	9024927a 	slli	r18,r18,9
    e9ec:	1004c03a 	cmpne	r2,r2,zero
    e9f0:	bc62b03a 	or	r17,r23,r17
    e9f4:	1738b03a 	or	fp,r2,fp
    e9f8:	8880402c 	andhi	r2,r17,256
    e9fc:	e4a4b03a 	or	r18,fp,r18
    ea00:	10000726 	beq	r2,zero,ea20 <__muldf3+0x628>
    ea04:	9006d07a 	srli	r3,r18,1
    ea08:	880497fa 	slli	r2,r17,31
    ea0c:	9480004c 	andi	r18,r18,1
    ea10:	8822d07a 	srli	r17,r17,1
    ea14:	1ca4b03a 	or	r18,r3,r18
    ea18:	14a4b03a 	or	r18,r2,r18
    ea1c:	4007883a 	mov	r3,r8
    ea20:	1880ffc4 	addi	r2,r3,1023
    ea24:	0080460e 	bge	zero,r2,eb40 <__muldf3+0x748>
    ea28:	910001cc 	andi	r4,r18,7
    ea2c:	20000726 	beq	r4,zero,ea4c <__muldf3+0x654>
    ea30:	910003cc 	andi	r4,r18,15
    ea34:	01400104 	movi	r5,4
    ea38:	21400426 	beq	r4,r5,ea4c <__muldf3+0x654>
    ea3c:	9149883a 	add	r4,r18,r5
    ea40:	24a5803a 	cmpltu	r18,r4,r18
    ea44:	8ca3883a 	add	r17,r17,r18
    ea48:	2025883a 	mov	r18,r4
    ea4c:	8900402c 	andhi	r4,r17,256
    ea50:	20000426 	beq	r4,zero,ea64 <__muldf3+0x66c>
    ea54:	18810004 	addi	r2,r3,1024
    ea58:	00ffc034 	movhi	r3,65280
    ea5c:	18ffffc4 	addi	r3,r3,-1
    ea60:	88e2703a 	and	r17,r17,r3
    ea64:	00c1ff84 	movi	r3,2046
    ea68:	18bf1316 	blt	r3,r2,e6b8 <__alt_exception_stack_pointer+0xf800e6b8>
    ea6c:	882c977a 	slli	r22,r17,29
    ea70:	9024d0fa 	srli	r18,r18,3
    ea74:	8822927a 	slli	r17,r17,9
    ea78:	1081ffcc 	andi	r2,r2,2047
    ea7c:	b4acb03a 	or	r22,r22,r18
    ea80:	8820d33a 	srli	r16,r17,12
    ea84:	3027883a 	mov	r19,r6
    ea88:	003eba06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    ea8c:	8080022c 	andhi	r2,r16,8
    ea90:	10000926 	beq	r2,zero,eab8 <__muldf3+0x6c0>
    ea94:	8880022c 	andhi	r2,r17,8
    ea98:	1000071e 	bne	r2,zero,eab8 <__muldf3+0x6c0>
    ea9c:	00800434 	movhi	r2,16
    eaa0:	8c000234 	orhi	r16,r17,8
    eaa4:	10bfffc4 	addi	r2,r2,-1
    eaa8:	e027883a 	mov	r19,fp
    eaac:	80a0703a 	and	r16,r16,r2
    eab0:	902d883a 	mov	r22,r18
    eab4:	003f1706 	br	e714 <__alt_exception_stack_pointer+0xf800e714>
    eab8:	00800434 	movhi	r2,16
    eabc:	84000234 	orhi	r16,r16,8
    eac0:	10bfffc4 	addi	r2,r2,-1
    eac4:	80a0703a 	and	r16,r16,r2
    eac8:	003f1206 	br	e714 <__alt_exception_stack_pointer+0xf800e714>
    eacc:	147ff604 	addi	r17,r2,-40
    ead0:	3462983a 	sll	r17,r6,r17
    ead4:	0025883a 	mov	r18,zero
    ead8:	003ef306 	br	e6a8 <__alt_exception_stack_pointer+0xf800e6a8>
    eadc:	3009883a 	mov	r4,r6
    eae0:	d9400215 	stw	r5,8(sp)
    eae4:	d9800715 	stw	r6,28(sp)
    eae8:	da400415 	stw	r9,16(sp)
    eaec:	da800315 	stw	r10,12(sp)
    eaf0:	000f7640 	call	f764 <__clzsi2>
    eaf4:	10800804 	addi	r2,r2,32
    eaf8:	da800317 	ldw	r10,12(sp)
    eafc:	da400417 	ldw	r9,16(sp)
    eb00:	d9800717 	ldw	r6,28(sp)
    eb04:	d9400217 	ldw	r5,8(sp)
    eb08:	003edd06 	br	e680 <__alt_exception_stack_pointer+0xf800e680>
    eb0c:	143ff604 	addi	r16,r2,-40
    eb10:	ac20983a 	sll	r16,r21,r16
    eb14:	002d883a 	mov	r22,zero
    eb18:	003ec106 	br	e620 <__alt_exception_stack_pointer+0xf800e620>
    eb1c:	d9800715 	stw	r6,28(sp)
    eb20:	d9c00215 	stw	r7,8(sp)
    eb24:	da400415 	stw	r9,16(sp)
    eb28:	000f7640 	call	f764 <__clzsi2>
    eb2c:	10800804 	addi	r2,r2,32
    eb30:	da400417 	ldw	r9,16(sp)
    eb34:	d9c00217 	ldw	r7,8(sp)
    eb38:	d9800717 	ldw	r6,28(sp)
    eb3c:	003eae06 	br	e5f8 <__alt_exception_stack_pointer+0xf800e5f8>
    eb40:	00c00044 	movi	r3,1
    eb44:	1887c83a 	sub	r3,r3,r2
    eb48:	01000e04 	movi	r4,56
    eb4c:	20fe8516 	blt	r4,r3,e564 <__alt_exception_stack_pointer+0xf800e564>
    eb50:	010007c4 	movi	r4,31
    eb54:	20c01b16 	blt	r4,r3,ebc4 <__muldf3+0x7cc>
    eb58:	00800804 	movi	r2,32
    eb5c:	10c5c83a 	sub	r2,r2,r3
    eb60:	888a983a 	sll	r5,r17,r2
    eb64:	90c8d83a 	srl	r4,r18,r3
    eb68:	9084983a 	sll	r2,r18,r2
    eb6c:	88e2d83a 	srl	r17,r17,r3
    eb70:	2906b03a 	or	r3,r5,r4
    eb74:	1004c03a 	cmpne	r2,r2,zero
    eb78:	1886b03a 	or	r3,r3,r2
    eb7c:	188001cc 	andi	r2,r3,7
    eb80:	10000726 	beq	r2,zero,eba0 <__muldf3+0x7a8>
    eb84:	188003cc 	andi	r2,r3,15
    eb88:	01000104 	movi	r4,4
    eb8c:	11000426 	beq	r2,r4,eba0 <__muldf3+0x7a8>
    eb90:	1805883a 	mov	r2,r3
    eb94:	10c00104 	addi	r3,r2,4
    eb98:	1885803a 	cmpltu	r2,r3,r2
    eb9c:	88a3883a 	add	r17,r17,r2
    eba0:	8880202c 	andhi	r2,r17,128
    eba4:	10001c26 	beq	r2,zero,ec18 <__muldf3+0x820>
    eba8:	3027883a 	mov	r19,r6
    ebac:	00800044 	movi	r2,1
    ebb0:	0021883a 	mov	r16,zero
    ebb4:	002d883a 	mov	r22,zero
    ebb8:	003e6e06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    ebbc:	4007883a 	mov	r3,r8
    ebc0:	003f9706 	br	ea20 <__alt_exception_stack_pointer+0xf800ea20>
    ebc4:	017ff844 	movi	r5,-31
    ebc8:	2885c83a 	sub	r2,r5,r2
    ebcc:	888ad83a 	srl	r5,r17,r2
    ebd0:	00800804 	movi	r2,32
    ebd4:	18801a26 	beq	r3,r2,ec40 <__muldf3+0x848>
    ebd8:	01001004 	movi	r4,64
    ebdc:	20c7c83a 	sub	r3,r4,r3
    ebe0:	88e2983a 	sll	r17,r17,r3
    ebe4:	8ca4b03a 	or	r18,r17,r18
    ebe8:	9004c03a 	cmpne	r2,r18,zero
    ebec:	2884b03a 	or	r2,r5,r2
    ebf0:	144001cc 	andi	r17,r2,7
    ebf4:	88000d1e 	bne	r17,zero,ec2c <__muldf3+0x834>
    ebf8:	0021883a 	mov	r16,zero
    ebfc:	102cd0fa 	srli	r22,r2,3
    ec00:	3027883a 	mov	r19,r6
    ec04:	0005883a 	mov	r2,zero
    ec08:	b46cb03a 	or	r22,r22,r17
    ec0c:	003e5906 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    ec10:	1007883a 	mov	r3,r2
    ec14:	0023883a 	mov	r17,zero
    ec18:	8820927a 	slli	r16,r17,9
    ec1c:	1805883a 	mov	r2,r3
    ec20:	8822977a 	slli	r17,r17,29
    ec24:	8020d33a 	srli	r16,r16,12
    ec28:	003ff406 	br	ebfc <__alt_exception_stack_pointer+0xf800ebfc>
    ec2c:	10c003cc 	andi	r3,r2,15
    ec30:	01000104 	movi	r4,4
    ec34:	193ff626 	beq	r3,r4,ec10 <__alt_exception_stack_pointer+0xf800ec10>
    ec38:	0023883a 	mov	r17,zero
    ec3c:	003fd506 	br	eb94 <__alt_exception_stack_pointer+0xf800eb94>
    ec40:	0023883a 	mov	r17,zero
    ec44:	003fe706 	br	ebe4 <__alt_exception_stack_pointer+0xf800ebe4>
    ec48:	00800434 	movhi	r2,16
    ec4c:	8c000234 	orhi	r16,r17,8
    ec50:	10bfffc4 	addi	r2,r2,-1
    ec54:	3027883a 	mov	r19,r6
    ec58:	80a0703a 	and	r16,r16,r2
    ec5c:	902d883a 	mov	r22,r18
    ec60:	003eac06 	br	e714 <__alt_exception_stack_pointer+0xf800e714>

0000ec64 <__subdf3>:
    ec64:	02000434 	movhi	r8,16
    ec68:	423fffc4 	addi	r8,r8,-1
    ec6c:	defffb04 	addi	sp,sp,-20
    ec70:	2a14703a 	and	r10,r5,r8
    ec74:	3812d53a 	srli	r9,r7,20
    ec78:	3a10703a 	and	r8,r7,r8
    ec7c:	2006d77a 	srli	r3,r4,29
    ec80:	3004d77a 	srli	r2,r6,29
    ec84:	dc000015 	stw	r16,0(sp)
    ec88:	501490fa 	slli	r10,r10,3
    ec8c:	2820d53a 	srli	r16,r5,20
    ec90:	401090fa 	slli	r8,r8,3
    ec94:	dc800215 	stw	r18,8(sp)
    ec98:	dc400115 	stw	r17,4(sp)
    ec9c:	dfc00415 	stw	ra,16(sp)
    eca0:	202290fa 	slli	r17,r4,3
    eca4:	dcc00315 	stw	r19,12(sp)
    eca8:	4a41ffcc 	andi	r9,r9,2047
    ecac:	0101ffc4 	movi	r4,2047
    ecb0:	2824d7fa 	srli	r18,r5,31
    ecb4:	8401ffcc 	andi	r16,r16,2047
    ecb8:	50c6b03a 	or	r3,r10,r3
    ecbc:	380ed7fa 	srli	r7,r7,31
    ecc0:	408ab03a 	or	r5,r8,r2
    ecc4:	300c90fa 	slli	r6,r6,3
    ecc8:	49009626 	beq	r9,r4,ef24 <__subdf3+0x2c0>
    eccc:	39c0005c 	xori	r7,r7,1
    ecd0:	8245c83a 	sub	r2,r16,r9
    ecd4:	3c807426 	beq	r7,r18,eea8 <__subdf3+0x244>
    ecd8:	0080af0e 	bge	zero,r2,ef98 <__subdf3+0x334>
    ecdc:	48002a1e 	bne	r9,zero,ed88 <__subdf3+0x124>
    ece0:	2988b03a 	or	r4,r5,r6
    ece4:	20009a1e 	bne	r4,zero,ef50 <__subdf3+0x2ec>
    ece8:	888001cc 	andi	r2,r17,7
    ecec:	10000726 	beq	r2,zero,ed0c <__subdf3+0xa8>
    ecf0:	888003cc 	andi	r2,r17,15
    ecf4:	01000104 	movi	r4,4
    ecf8:	11000426 	beq	r2,r4,ed0c <__subdf3+0xa8>
    ecfc:	890b883a 	add	r5,r17,r4
    ed00:	2c63803a 	cmpltu	r17,r5,r17
    ed04:	1c47883a 	add	r3,r3,r17
    ed08:	2823883a 	mov	r17,r5
    ed0c:	1880202c 	andhi	r2,r3,128
    ed10:	10005926 	beq	r2,zero,ee78 <__subdf3+0x214>
    ed14:	84000044 	addi	r16,r16,1
    ed18:	0081ffc4 	movi	r2,2047
    ed1c:	8080be26 	beq	r16,r2,f018 <__subdf3+0x3b4>
    ed20:	017fe034 	movhi	r5,65408
    ed24:	297fffc4 	addi	r5,r5,-1
    ed28:	1946703a 	and	r3,r3,r5
    ed2c:	1804977a 	slli	r2,r3,29
    ed30:	1806927a 	slli	r3,r3,9
    ed34:	8822d0fa 	srli	r17,r17,3
    ed38:	8401ffcc 	andi	r16,r16,2047
    ed3c:	180ad33a 	srli	r5,r3,12
    ed40:	9100004c 	andi	r4,r18,1
    ed44:	1444b03a 	or	r2,r2,r17
    ed48:	80c1ffcc 	andi	r3,r16,2047
    ed4c:	1820953a 	slli	r16,r3,20
    ed50:	20c03fcc 	andi	r3,r4,255
    ed54:	180897fa 	slli	r4,r3,31
    ed58:	00c00434 	movhi	r3,16
    ed5c:	18ffffc4 	addi	r3,r3,-1
    ed60:	28c6703a 	and	r3,r5,r3
    ed64:	1c06b03a 	or	r3,r3,r16
    ed68:	1906b03a 	or	r3,r3,r4
    ed6c:	dfc00417 	ldw	ra,16(sp)
    ed70:	dcc00317 	ldw	r19,12(sp)
    ed74:	dc800217 	ldw	r18,8(sp)
    ed78:	dc400117 	ldw	r17,4(sp)
    ed7c:	dc000017 	ldw	r16,0(sp)
    ed80:	dec00504 	addi	sp,sp,20
    ed84:	f800283a 	ret
    ed88:	0101ffc4 	movi	r4,2047
    ed8c:	813fd626 	beq	r16,r4,ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ed90:	29402034 	orhi	r5,r5,128
    ed94:	01000e04 	movi	r4,56
    ed98:	2080a316 	blt	r4,r2,f028 <__subdf3+0x3c4>
    ed9c:	010007c4 	movi	r4,31
    eda0:	2080c616 	blt	r4,r2,f0bc <__subdf3+0x458>
    eda4:	01000804 	movi	r4,32
    eda8:	2089c83a 	sub	r4,r4,r2
    edac:	2910983a 	sll	r8,r5,r4
    edb0:	308ed83a 	srl	r7,r6,r2
    edb4:	3108983a 	sll	r4,r6,r4
    edb8:	2884d83a 	srl	r2,r5,r2
    edbc:	41ccb03a 	or	r6,r8,r7
    edc0:	2008c03a 	cmpne	r4,r4,zero
    edc4:	310cb03a 	or	r6,r6,r4
    edc8:	898dc83a 	sub	r6,r17,r6
    edcc:	89a3803a 	cmpltu	r17,r17,r6
    edd0:	1887c83a 	sub	r3,r3,r2
    edd4:	1c47c83a 	sub	r3,r3,r17
    edd8:	3023883a 	mov	r17,r6
    eddc:	1880202c 	andhi	r2,r3,128
    ede0:	10002326 	beq	r2,zero,ee70 <__subdf3+0x20c>
    ede4:	04c02034 	movhi	r19,128
    ede8:	9cffffc4 	addi	r19,r19,-1
    edec:	1ce6703a 	and	r19,r3,r19
    edf0:	98007a26 	beq	r19,zero,efdc <__subdf3+0x378>
    edf4:	9809883a 	mov	r4,r19
    edf8:	000f7640 	call	f764 <__clzsi2>
    edfc:	113ffe04 	addi	r4,r2,-8
    ee00:	00c007c4 	movi	r3,31
    ee04:	19007b16 	blt	r3,r4,eff4 <__subdf3+0x390>
    ee08:	00800804 	movi	r2,32
    ee0c:	1105c83a 	sub	r2,r2,r4
    ee10:	8884d83a 	srl	r2,r17,r2
    ee14:	9906983a 	sll	r3,r19,r4
    ee18:	8922983a 	sll	r17,r17,r4
    ee1c:	10c4b03a 	or	r2,r2,r3
    ee20:	24007816 	blt	r4,r16,f004 <__subdf3+0x3a0>
    ee24:	2421c83a 	sub	r16,r4,r16
    ee28:	80c00044 	addi	r3,r16,1
    ee2c:	010007c4 	movi	r4,31
    ee30:	20c09516 	blt	r4,r3,f088 <__subdf3+0x424>
    ee34:	01400804 	movi	r5,32
    ee38:	28cbc83a 	sub	r5,r5,r3
    ee3c:	88c8d83a 	srl	r4,r17,r3
    ee40:	8962983a 	sll	r17,r17,r5
    ee44:	114a983a 	sll	r5,r2,r5
    ee48:	10c6d83a 	srl	r3,r2,r3
    ee4c:	8804c03a 	cmpne	r2,r17,zero
    ee50:	290ab03a 	or	r5,r5,r4
    ee54:	28a2b03a 	or	r17,r5,r2
    ee58:	0021883a 	mov	r16,zero
    ee5c:	003fa206 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ee60:	2090b03a 	or	r8,r4,r2
    ee64:	40018e26 	beq	r8,zero,f4a0 <__subdf3+0x83c>
    ee68:	1007883a 	mov	r3,r2
    ee6c:	2023883a 	mov	r17,r4
    ee70:	888001cc 	andi	r2,r17,7
    ee74:	103f9e1e 	bne	r2,zero,ecf0 <__alt_exception_stack_pointer+0xf800ecf0>
    ee78:	1804977a 	slli	r2,r3,29
    ee7c:	8822d0fa 	srli	r17,r17,3
    ee80:	1810d0fa 	srli	r8,r3,3
    ee84:	9100004c 	andi	r4,r18,1
    ee88:	1444b03a 	or	r2,r2,r17
    ee8c:	00c1ffc4 	movi	r3,2047
    ee90:	80c02826 	beq	r16,r3,ef34 <__subdf3+0x2d0>
    ee94:	01400434 	movhi	r5,16
    ee98:	297fffc4 	addi	r5,r5,-1
    ee9c:	80e0703a 	and	r16,r16,r3
    eea0:	414a703a 	and	r5,r8,r5
    eea4:	003fa806 	br	ed48 <__alt_exception_stack_pointer+0xf800ed48>
    eea8:	0080630e 	bge	zero,r2,f038 <__subdf3+0x3d4>
    eeac:	48003026 	beq	r9,zero,ef70 <__subdf3+0x30c>
    eeb0:	0101ffc4 	movi	r4,2047
    eeb4:	813f8c26 	beq	r16,r4,ece8 <__alt_exception_stack_pointer+0xf800ece8>
    eeb8:	29402034 	orhi	r5,r5,128
    eebc:	01000e04 	movi	r4,56
    eec0:	2080a90e 	bge	r4,r2,f168 <__subdf3+0x504>
    eec4:	298cb03a 	or	r6,r5,r6
    eec8:	3012c03a 	cmpne	r9,r6,zero
    eecc:	0005883a 	mov	r2,zero
    eed0:	4c53883a 	add	r9,r9,r17
    eed4:	4c63803a 	cmpltu	r17,r9,r17
    eed8:	10c7883a 	add	r3,r2,r3
    eedc:	88c7883a 	add	r3,r17,r3
    eee0:	4823883a 	mov	r17,r9
    eee4:	1880202c 	andhi	r2,r3,128
    eee8:	1000d026 	beq	r2,zero,f22c <__subdf3+0x5c8>
    eeec:	84000044 	addi	r16,r16,1
    eef0:	0081ffc4 	movi	r2,2047
    eef4:	8080fe26 	beq	r16,r2,f2f0 <__subdf3+0x68c>
    eef8:	00bfe034 	movhi	r2,65408
    eefc:	10bfffc4 	addi	r2,r2,-1
    ef00:	1886703a 	and	r3,r3,r2
    ef04:	880ad07a 	srli	r5,r17,1
    ef08:	180497fa 	slli	r2,r3,31
    ef0c:	8900004c 	andi	r4,r17,1
    ef10:	2922b03a 	or	r17,r5,r4
    ef14:	1806d07a 	srli	r3,r3,1
    ef18:	1462b03a 	or	r17,r2,r17
    ef1c:	3825883a 	mov	r18,r7
    ef20:	003f7106 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ef24:	2984b03a 	or	r2,r5,r6
    ef28:	103f6826 	beq	r2,zero,eccc <__alt_exception_stack_pointer+0xf800eccc>
    ef2c:	39c03fcc 	andi	r7,r7,255
    ef30:	003f6706 	br	ecd0 <__alt_exception_stack_pointer+0xf800ecd0>
    ef34:	4086b03a 	or	r3,r8,r2
    ef38:	18015226 	beq	r3,zero,f484 <__subdf3+0x820>
    ef3c:	00c00434 	movhi	r3,16
    ef40:	41400234 	orhi	r5,r8,8
    ef44:	18ffffc4 	addi	r3,r3,-1
    ef48:	28ca703a 	and	r5,r5,r3
    ef4c:	003f7e06 	br	ed48 <__alt_exception_stack_pointer+0xf800ed48>
    ef50:	10bfffc4 	addi	r2,r2,-1
    ef54:	1000491e 	bne	r2,zero,f07c <__subdf3+0x418>
    ef58:	898fc83a 	sub	r7,r17,r6
    ef5c:	89e3803a 	cmpltu	r17,r17,r7
    ef60:	1947c83a 	sub	r3,r3,r5
    ef64:	1c47c83a 	sub	r3,r3,r17
    ef68:	3823883a 	mov	r17,r7
    ef6c:	003f9b06 	br	eddc <__alt_exception_stack_pointer+0xf800eddc>
    ef70:	2988b03a 	or	r4,r5,r6
    ef74:	203f5c26 	beq	r4,zero,ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ef78:	10bfffc4 	addi	r2,r2,-1
    ef7c:	1000931e 	bne	r2,zero,f1cc <__subdf3+0x568>
    ef80:	898d883a 	add	r6,r17,r6
    ef84:	3463803a 	cmpltu	r17,r6,r17
    ef88:	1947883a 	add	r3,r3,r5
    ef8c:	88c7883a 	add	r3,r17,r3
    ef90:	3023883a 	mov	r17,r6
    ef94:	003fd306 	br	eee4 <__alt_exception_stack_pointer+0xf800eee4>
    ef98:	1000541e 	bne	r2,zero,f0ec <__subdf3+0x488>
    ef9c:	80800044 	addi	r2,r16,1
    efa0:	1081ffcc 	andi	r2,r2,2047
    efa4:	01000044 	movi	r4,1
    efa8:	2080a20e 	bge	r4,r2,f234 <__subdf3+0x5d0>
    efac:	8989c83a 	sub	r4,r17,r6
    efb0:	8905803a 	cmpltu	r2,r17,r4
    efb4:	1967c83a 	sub	r19,r3,r5
    efb8:	98a7c83a 	sub	r19,r19,r2
    efbc:	9880202c 	andhi	r2,r19,128
    efc0:	10006326 	beq	r2,zero,f150 <__subdf3+0x4ec>
    efc4:	3463c83a 	sub	r17,r6,r17
    efc8:	28c7c83a 	sub	r3,r5,r3
    efcc:	344d803a 	cmpltu	r6,r6,r17
    efd0:	19a7c83a 	sub	r19,r3,r6
    efd4:	3825883a 	mov	r18,r7
    efd8:	983f861e 	bne	r19,zero,edf4 <__alt_exception_stack_pointer+0xf800edf4>
    efdc:	8809883a 	mov	r4,r17
    efe0:	000f7640 	call	f764 <__clzsi2>
    efe4:	10800804 	addi	r2,r2,32
    efe8:	113ffe04 	addi	r4,r2,-8
    efec:	00c007c4 	movi	r3,31
    eff0:	193f850e 	bge	r3,r4,ee08 <__alt_exception_stack_pointer+0xf800ee08>
    eff4:	10bff604 	addi	r2,r2,-40
    eff8:	8884983a 	sll	r2,r17,r2
    effc:	0023883a 	mov	r17,zero
    f000:	243f880e 	bge	r4,r16,ee24 <__alt_exception_stack_pointer+0xf800ee24>
    f004:	00ffe034 	movhi	r3,65408
    f008:	18ffffc4 	addi	r3,r3,-1
    f00c:	8121c83a 	sub	r16,r16,r4
    f010:	10c6703a 	and	r3,r2,r3
    f014:	003f3406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f018:	9100004c 	andi	r4,r18,1
    f01c:	000b883a 	mov	r5,zero
    f020:	0005883a 	mov	r2,zero
    f024:	003f4806 	br	ed48 <__alt_exception_stack_pointer+0xf800ed48>
    f028:	298cb03a 	or	r6,r5,r6
    f02c:	300cc03a 	cmpne	r6,r6,zero
    f030:	0005883a 	mov	r2,zero
    f034:	003f6406 	br	edc8 <__alt_exception_stack_pointer+0xf800edc8>
    f038:	10009a1e 	bne	r2,zero,f2a4 <__subdf3+0x640>
    f03c:	82400044 	addi	r9,r16,1
    f040:	4881ffcc 	andi	r2,r9,2047
    f044:	02800044 	movi	r10,1
    f048:	5080670e 	bge	r10,r2,f1e8 <__subdf3+0x584>
    f04c:	0081ffc4 	movi	r2,2047
    f050:	4880af26 	beq	r9,r2,f310 <__subdf3+0x6ac>
    f054:	898d883a 	add	r6,r17,r6
    f058:	1945883a 	add	r2,r3,r5
    f05c:	3447803a 	cmpltu	r3,r6,r17
    f060:	1887883a 	add	r3,r3,r2
    f064:	182297fa 	slli	r17,r3,31
    f068:	300cd07a 	srli	r6,r6,1
    f06c:	1806d07a 	srli	r3,r3,1
    f070:	4821883a 	mov	r16,r9
    f074:	89a2b03a 	or	r17,r17,r6
    f078:	003f1b06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f07c:	0101ffc4 	movi	r4,2047
    f080:	813f441e 	bne	r16,r4,ed94 <__alt_exception_stack_pointer+0xf800ed94>
    f084:	003f1806 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f088:	843ff844 	addi	r16,r16,-31
    f08c:	01400804 	movi	r5,32
    f090:	1408d83a 	srl	r4,r2,r16
    f094:	19405026 	beq	r3,r5,f1d8 <__subdf3+0x574>
    f098:	01401004 	movi	r5,64
    f09c:	28c7c83a 	sub	r3,r5,r3
    f0a0:	10c4983a 	sll	r2,r2,r3
    f0a4:	88a2b03a 	or	r17,r17,r2
    f0a8:	8822c03a 	cmpne	r17,r17,zero
    f0ac:	2462b03a 	or	r17,r4,r17
    f0b0:	0007883a 	mov	r3,zero
    f0b4:	0021883a 	mov	r16,zero
    f0b8:	003f6d06 	br	ee70 <__alt_exception_stack_pointer+0xf800ee70>
    f0bc:	11fff804 	addi	r7,r2,-32
    f0c0:	01000804 	movi	r4,32
    f0c4:	29ced83a 	srl	r7,r5,r7
    f0c8:	11004526 	beq	r2,r4,f1e0 <__subdf3+0x57c>
    f0cc:	01001004 	movi	r4,64
    f0d0:	2089c83a 	sub	r4,r4,r2
    f0d4:	2904983a 	sll	r2,r5,r4
    f0d8:	118cb03a 	or	r6,r2,r6
    f0dc:	300cc03a 	cmpne	r6,r6,zero
    f0e0:	398cb03a 	or	r6,r7,r6
    f0e4:	0005883a 	mov	r2,zero
    f0e8:	003f3706 	br	edc8 <__alt_exception_stack_pointer+0xf800edc8>
    f0ec:	80002a26 	beq	r16,zero,f198 <__subdf3+0x534>
    f0f0:	0101ffc4 	movi	r4,2047
    f0f4:	49006626 	beq	r9,r4,f290 <__subdf3+0x62c>
    f0f8:	0085c83a 	sub	r2,zero,r2
    f0fc:	18c02034 	orhi	r3,r3,128
    f100:	01000e04 	movi	r4,56
    f104:	20807e16 	blt	r4,r2,f300 <__subdf3+0x69c>
    f108:	010007c4 	movi	r4,31
    f10c:	2080e716 	blt	r4,r2,f4ac <__subdf3+0x848>
    f110:	01000804 	movi	r4,32
    f114:	2089c83a 	sub	r4,r4,r2
    f118:	1914983a 	sll	r10,r3,r4
    f11c:	8890d83a 	srl	r8,r17,r2
    f120:	8908983a 	sll	r4,r17,r4
    f124:	1884d83a 	srl	r2,r3,r2
    f128:	5222b03a 	or	r17,r10,r8
    f12c:	2006c03a 	cmpne	r3,r4,zero
    f130:	88e2b03a 	or	r17,r17,r3
    f134:	3463c83a 	sub	r17,r6,r17
    f138:	2885c83a 	sub	r2,r5,r2
    f13c:	344d803a 	cmpltu	r6,r6,r17
    f140:	1187c83a 	sub	r3,r2,r6
    f144:	4821883a 	mov	r16,r9
    f148:	3825883a 	mov	r18,r7
    f14c:	003f2306 	br	eddc <__alt_exception_stack_pointer+0xf800eddc>
    f150:	24d0b03a 	or	r8,r4,r19
    f154:	40001b1e 	bne	r8,zero,f1c4 <__subdf3+0x560>
    f158:	0005883a 	mov	r2,zero
    f15c:	0009883a 	mov	r4,zero
    f160:	0021883a 	mov	r16,zero
    f164:	003f4906 	br	ee8c <__alt_exception_stack_pointer+0xf800ee8c>
    f168:	010007c4 	movi	r4,31
    f16c:	20803a16 	blt	r4,r2,f258 <__subdf3+0x5f4>
    f170:	01000804 	movi	r4,32
    f174:	2089c83a 	sub	r4,r4,r2
    f178:	2912983a 	sll	r9,r5,r4
    f17c:	3090d83a 	srl	r8,r6,r2
    f180:	3108983a 	sll	r4,r6,r4
    f184:	2884d83a 	srl	r2,r5,r2
    f188:	4a12b03a 	or	r9,r9,r8
    f18c:	2008c03a 	cmpne	r4,r4,zero
    f190:	4912b03a 	or	r9,r9,r4
    f194:	003f4e06 	br	eed0 <__alt_exception_stack_pointer+0xf800eed0>
    f198:	1c48b03a 	or	r4,r3,r17
    f19c:	20003c26 	beq	r4,zero,f290 <__subdf3+0x62c>
    f1a0:	0084303a 	nor	r2,zero,r2
    f1a4:	1000381e 	bne	r2,zero,f288 <__subdf3+0x624>
    f1a8:	3463c83a 	sub	r17,r6,r17
    f1ac:	28c5c83a 	sub	r2,r5,r3
    f1b0:	344d803a 	cmpltu	r6,r6,r17
    f1b4:	1187c83a 	sub	r3,r2,r6
    f1b8:	4821883a 	mov	r16,r9
    f1bc:	3825883a 	mov	r18,r7
    f1c0:	003f0606 	br	eddc <__alt_exception_stack_pointer+0xf800eddc>
    f1c4:	2023883a 	mov	r17,r4
    f1c8:	003f0906 	br	edf0 <__alt_exception_stack_pointer+0xf800edf0>
    f1cc:	0101ffc4 	movi	r4,2047
    f1d0:	813f3a1e 	bne	r16,r4,eebc <__alt_exception_stack_pointer+0xf800eebc>
    f1d4:	003ec406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f1d8:	0005883a 	mov	r2,zero
    f1dc:	003fb106 	br	f0a4 <__alt_exception_stack_pointer+0xf800f0a4>
    f1e0:	0005883a 	mov	r2,zero
    f1e4:	003fbc06 	br	f0d8 <__alt_exception_stack_pointer+0xf800f0d8>
    f1e8:	1c44b03a 	or	r2,r3,r17
    f1ec:	80008e1e 	bne	r16,zero,f428 <__subdf3+0x7c4>
    f1f0:	1000c826 	beq	r2,zero,f514 <__subdf3+0x8b0>
    f1f4:	2984b03a 	or	r2,r5,r6
    f1f8:	103ebb26 	beq	r2,zero,ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f1fc:	8989883a 	add	r4,r17,r6
    f200:	1945883a 	add	r2,r3,r5
    f204:	2447803a 	cmpltu	r3,r4,r17
    f208:	1887883a 	add	r3,r3,r2
    f20c:	1880202c 	andhi	r2,r3,128
    f210:	2023883a 	mov	r17,r4
    f214:	103f1626 	beq	r2,zero,ee70 <__alt_exception_stack_pointer+0xf800ee70>
    f218:	00bfe034 	movhi	r2,65408
    f21c:	10bfffc4 	addi	r2,r2,-1
    f220:	5021883a 	mov	r16,r10
    f224:	1886703a 	and	r3,r3,r2
    f228:	003eaf06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f22c:	3825883a 	mov	r18,r7
    f230:	003f0f06 	br	ee70 <__alt_exception_stack_pointer+0xf800ee70>
    f234:	1c44b03a 	or	r2,r3,r17
    f238:	8000251e 	bne	r16,zero,f2d0 <__subdf3+0x66c>
    f23c:	1000661e 	bne	r2,zero,f3d8 <__subdf3+0x774>
    f240:	2990b03a 	or	r8,r5,r6
    f244:	40009626 	beq	r8,zero,f4a0 <__subdf3+0x83c>
    f248:	2807883a 	mov	r3,r5
    f24c:	3023883a 	mov	r17,r6
    f250:	3825883a 	mov	r18,r7
    f254:	003ea406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f258:	127ff804 	addi	r9,r2,-32
    f25c:	01000804 	movi	r4,32
    f260:	2a52d83a 	srl	r9,r5,r9
    f264:	11008c26 	beq	r2,r4,f498 <__subdf3+0x834>
    f268:	01001004 	movi	r4,64
    f26c:	2085c83a 	sub	r2,r4,r2
    f270:	2884983a 	sll	r2,r5,r2
    f274:	118cb03a 	or	r6,r2,r6
    f278:	300cc03a 	cmpne	r6,r6,zero
    f27c:	4992b03a 	or	r9,r9,r6
    f280:	0005883a 	mov	r2,zero
    f284:	003f1206 	br	eed0 <__alt_exception_stack_pointer+0xf800eed0>
    f288:	0101ffc4 	movi	r4,2047
    f28c:	493f9c1e 	bne	r9,r4,f100 <__alt_exception_stack_pointer+0xf800f100>
    f290:	2807883a 	mov	r3,r5
    f294:	3023883a 	mov	r17,r6
    f298:	4821883a 	mov	r16,r9
    f29c:	3825883a 	mov	r18,r7
    f2a0:	003e9106 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f2a4:	80001f1e 	bne	r16,zero,f324 <__subdf3+0x6c0>
    f2a8:	1c48b03a 	or	r4,r3,r17
    f2ac:	20005a26 	beq	r4,zero,f418 <__subdf3+0x7b4>
    f2b0:	0084303a 	nor	r2,zero,r2
    f2b4:	1000561e 	bne	r2,zero,f410 <__subdf3+0x7ac>
    f2b8:	89a3883a 	add	r17,r17,r6
    f2bc:	1945883a 	add	r2,r3,r5
    f2c0:	898d803a 	cmpltu	r6,r17,r6
    f2c4:	3087883a 	add	r3,r6,r2
    f2c8:	4821883a 	mov	r16,r9
    f2cc:	003f0506 	br	eee4 <__alt_exception_stack_pointer+0xf800eee4>
    f2d0:	10002b1e 	bne	r2,zero,f380 <__subdf3+0x71c>
    f2d4:	2984b03a 	or	r2,r5,r6
    f2d8:	10008026 	beq	r2,zero,f4dc <__subdf3+0x878>
    f2dc:	2807883a 	mov	r3,r5
    f2e0:	3023883a 	mov	r17,r6
    f2e4:	3825883a 	mov	r18,r7
    f2e8:	0401ffc4 	movi	r16,2047
    f2ec:	003e7e06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f2f0:	3809883a 	mov	r4,r7
    f2f4:	0011883a 	mov	r8,zero
    f2f8:	0005883a 	mov	r2,zero
    f2fc:	003ee306 	br	ee8c <__alt_exception_stack_pointer+0xf800ee8c>
    f300:	1c62b03a 	or	r17,r3,r17
    f304:	8822c03a 	cmpne	r17,r17,zero
    f308:	0005883a 	mov	r2,zero
    f30c:	003f8906 	br	f134 <__alt_exception_stack_pointer+0xf800f134>
    f310:	3809883a 	mov	r4,r7
    f314:	4821883a 	mov	r16,r9
    f318:	0011883a 	mov	r8,zero
    f31c:	0005883a 	mov	r2,zero
    f320:	003eda06 	br	ee8c <__alt_exception_stack_pointer+0xf800ee8c>
    f324:	0101ffc4 	movi	r4,2047
    f328:	49003b26 	beq	r9,r4,f418 <__subdf3+0x7b4>
    f32c:	0085c83a 	sub	r2,zero,r2
    f330:	18c02034 	orhi	r3,r3,128
    f334:	01000e04 	movi	r4,56
    f338:	20806e16 	blt	r4,r2,f4f4 <__subdf3+0x890>
    f33c:	010007c4 	movi	r4,31
    f340:	20807716 	blt	r4,r2,f520 <__subdf3+0x8bc>
    f344:	01000804 	movi	r4,32
    f348:	2089c83a 	sub	r4,r4,r2
    f34c:	1914983a 	sll	r10,r3,r4
    f350:	8890d83a 	srl	r8,r17,r2
    f354:	8908983a 	sll	r4,r17,r4
    f358:	1884d83a 	srl	r2,r3,r2
    f35c:	5222b03a 	or	r17,r10,r8
    f360:	2006c03a 	cmpne	r3,r4,zero
    f364:	88e2b03a 	or	r17,r17,r3
    f368:	89a3883a 	add	r17,r17,r6
    f36c:	1145883a 	add	r2,r2,r5
    f370:	898d803a 	cmpltu	r6,r17,r6
    f374:	3087883a 	add	r3,r6,r2
    f378:	4821883a 	mov	r16,r9
    f37c:	003ed906 	br	eee4 <__alt_exception_stack_pointer+0xf800eee4>
    f380:	2984b03a 	or	r2,r5,r6
    f384:	10004226 	beq	r2,zero,f490 <__subdf3+0x82c>
    f388:	1808d0fa 	srli	r4,r3,3
    f38c:	8822d0fa 	srli	r17,r17,3
    f390:	1806977a 	slli	r3,r3,29
    f394:	2080022c 	andhi	r2,r4,8
    f398:	1c62b03a 	or	r17,r3,r17
    f39c:	10000826 	beq	r2,zero,f3c0 <__subdf3+0x75c>
    f3a0:	2812d0fa 	srli	r9,r5,3
    f3a4:	4880022c 	andhi	r2,r9,8
    f3a8:	1000051e 	bne	r2,zero,f3c0 <__subdf3+0x75c>
    f3ac:	300cd0fa 	srli	r6,r6,3
    f3b0:	2804977a 	slli	r2,r5,29
    f3b4:	4809883a 	mov	r4,r9
    f3b8:	3825883a 	mov	r18,r7
    f3bc:	11a2b03a 	or	r17,r2,r6
    f3c0:	8806d77a 	srli	r3,r17,29
    f3c4:	200890fa 	slli	r4,r4,3
    f3c8:	882290fa 	slli	r17,r17,3
    f3cc:	0401ffc4 	movi	r16,2047
    f3d0:	1906b03a 	or	r3,r3,r4
    f3d4:	003e4406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f3d8:	2984b03a 	or	r2,r5,r6
    f3dc:	103e4226 	beq	r2,zero,ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f3e0:	8989c83a 	sub	r4,r17,r6
    f3e4:	8911803a 	cmpltu	r8,r17,r4
    f3e8:	1945c83a 	sub	r2,r3,r5
    f3ec:	1205c83a 	sub	r2,r2,r8
    f3f0:	1200202c 	andhi	r8,r2,128
    f3f4:	403e9a26 	beq	r8,zero,ee60 <__alt_exception_stack_pointer+0xf800ee60>
    f3f8:	3463c83a 	sub	r17,r6,r17
    f3fc:	28c5c83a 	sub	r2,r5,r3
    f400:	344d803a 	cmpltu	r6,r6,r17
    f404:	1187c83a 	sub	r3,r2,r6
    f408:	3825883a 	mov	r18,r7
    f40c:	003e3606 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f410:	0101ffc4 	movi	r4,2047
    f414:	493fc71e 	bne	r9,r4,f334 <__alt_exception_stack_pointer+0xf800f334>
    f418:	2807883a 	mov	r3,r5
    f41c:	3023883a 	mov	r17,r6
    f420:	4821883a 	mov	r16,r9
    f424:	003e3006 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f428:	10003626 	beq	r2,zero,f504 <__subdf3+0x8a0>
    f42c:	2984b03a 	or	r2,r5,r6
    f430:	10001726 	beq	r2,zero,f490 <__subdf3+0x82c>
    f434:	1808d0fa 	srli	r4,r3,3
    f438:	8822d0fa 	srli	r17,r17,3
    f43c:	1806977a 	slli	r3,r3,29
    f440:	2080022c 	andhi	r2,r4,8
    f444:	1c62b03a 	or	r17,r3,r17
    f448:	10000726 	beq	r2,zero,f468 <__subdf3+0x804>
    f44c:	2812d0fa 	srli	r9,r5,3
    f450:	4880022c 	andhi	r2,r9,8
    f454:	1000041e 	bne	r2,zero,f468 <__subdf3+0x804>
    f458:	300cd0fa 	srli	r6,r6,3
    f45c:	2804977a 	slli	r2,r5,29
    f460:	4809883a 	mov	r4,r9
    f464:	11a2b03a 	or	r17,r2,r6
    f468:	8806d77a 	srli	r3,r17,29
    f46c:	200890fa 	slli	r4,r4,3
    f470:	882290fa 	slli	r17,r17,3
    f474:	3825883a 	mov	r18,r7
    f478:	1906b03a 	or	r3,r3,r4
    f47c:	0401ffc4 	movi	r16,2047
    f480:	003e1906 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f484:	000b883a 	mov	r5,zero
    f488:	0005883a 	mov	r2,zero
    f48c:	003e2e06 	br	ed48 <__alt_exception_stack_pointer+0xf800ed48>
    f490:	0401ffc4 	movi	r16,2047
    f494:	003e1406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f498:	0005883a 	mov	r2,zero
    f49c:	003f7506 	br	f274 <__alt_exception_stack_pointer+0xf800f274>
    f4a0:	0005883a 	mov	r2,zero
    f4a4:	0009883a 	mov	r4,zero
    f4a8:	003e7806 	br	ee8c <__alt_exception_stack_pointer+0xf800ee8c>
    f4ac:	123ff804 	addi	r8,r2,-32
    f4b0:	01000804 	movi	r4,32
    f4b4:	1a10d83a 	srl	r8,r3,r8
    f4b8:	11002526 	beq	r2,r4,f550 <__subdf3+0x8ec>
    f4bc:	01001004 	movi	r4,64
    f4c0:	2085c83a 	sub	r2,r4,r2
    f4c4:	1884983a 	sll	r2,r3,r2
    f4c8:	1444b03a 	or	r2,r2,r17
    f4cc:	1004c03a 	cmpne	r2,r2,zero
    f4d0:	40a2b03a 	or	r17,r8,r2
    f4d4:	0005883a 	mov	r2,zero
    f4d8:	003f1606 	br	f134 <__alt_exception_stack_pointer+0xf800f134>
    f4dc:	02000434 	movhi	r8,16
    f4e0:	0009883a 	mov	r4,zero
    f4e4:	423fffc4 	addi	r8,r8,-1
    f4e8:	00bfffc4 	movi	r2,-1
    f4ec:	0401ffc4 	movi	r16,2047
    f4f0:	003e6606 	br	ee8c <__alt_exception_stack_pointer+0xf800ee8c>
    f4f4:	1c62b03a 	or	r17,r3,r17
    f4f8:	8822c03a 	cmpne	r17,r17,zero
    f4fc:	0005883a 	mov	r2,zero
    f500:	003f9906 	br	f368 <__alt_exception_stack_pointer+0xf800f368>
    f504:	2807883a 	mov	r3,r5
    f508:	3023883a 	mov	r17,r6
    f50c:	0401ffc4 	movi	r16,2047
    f510:	003df506 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f514:	2807883a 	mov	r3,r5
    f518:	3023883a 	mov	r17,r6
    f51c:	003df206 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f520:	123ff804 	addi	r8,r2,-32
    f524:	01000804 	movi	r4,32
    f528:	1a10d83a 	srl	r8,r3,r8
    f52c:	11000a26 	beq	r2,r4,f558 <__subdf3+0x8f4>
    f530:	01001004 	movi	r4,64
    f534:	2085c83a 	sub	r2,r4,r2
    f538:	1884983a 	sll	r2,r3,r2
    f53c:	1444b03a 	or	r2,r2,r17
    f540:	1004c03a 	cmpne	r2,r2,zero
    f544:	40a2b03a 	or	r17,r8,r2
    f548:	0005883a 	mov	r2,zero
    f54c:	003f8606 	br	f368 <__alt_exception_stack_pointer+0xf800f368>
    f550:	0005883a 	mov	r2,zero
    f554:	003fdc06 	br	f4c8 <__alt_exception_stack_pointer+0xf800f4c8>
    f558:	0005883a 	mov	r2,zero
    f55c:	003ff706 	br	f53c <__alt_exception_stack_pointer+0xf800f53c>

0000f560 <__fixdfsi>:
    f560:	280cd53a 	srli	r6,r5,20
    f564:	00c00434 	movhi	r3,16
    f568:	18ffffc4 	addi	r3,r3,-1
    f56c:	3181ffcc 	andi	r6,r6,2047
    f570:	01c0ff84 	movi	r7,1022
    f574:	28c6703a 	and	r3,r5,r3
    f578:	280ad7fa 	srli	r5,r5,31
    f57c:	3980120e 	bge	r7,r6,f5c8 <__fixdfsi+0x68>
    f580:	00810744 	movi	r2,1053
    f584:	11800c16 	blt	r2,r6,f5b8 <__fixdfsi+0x58>
    f588:	00810cc4 	movi	r2,1075
    f58c:	1185c83a 	sub	r2,r2,r6
    f590:	01c007c4 	movi	r7,31
    f594:	18c00434 	orhi	r3,r3,16
    f598:	38800d16 	blt	r7,r2,f5d0 <__fixdfsi+0x70>
    f59c:	31befb44 	addi	r6,r6,-1043
    f5a0:	2084d83a 	srl	r2,r4,r2
    f5a4:	1986983a 	sll	r3,r3,r6
    f5a8:	1884b03a 	or	r2,r3,r2
    f5ac:	28000726 	beq	r5,zero,f5cc <__fixdfsi+0x6c>
    f5b0:	0085c83a 	sub	r2,zero,r2
    f5b4:	f800283a 	ret
    f5b8:	00a00034 	movhi	r2,32768
    f5bc:	10bfffc4 	addi	r2,r2,-1
    f5c0:	2885883a 	add	r2,r5,r2
    f5c4:	f800283a 	ret
    f5c8:	0005883a 	mov	r2,zero
    f5cc:	f800283a 	ret
    f5d0:	008104c4 	movi	r2,1043
    f5d4:	1185c83a 	sub	r2,r2,r6
    f5d8:	1884d83a 	srl	r2,r3,r2
    f5dc:	003ff306 	br	f5ac <__alt_exception_stack_pointer+0xf800f5ac>

0000f5e0 <__floatsidf>:
    f5e0:	defffd04 	addi	sp,sp,-12
    f5e4:	dfc00215 	stw	ra,8(sp)
    f5e8:	dc400115 	stw	r17,4(sp)
    f5ec:	dc000015 	stw	r16,0(sp)
    f5f0:	20002b26 	beq	r4,zero,f6a0 <__floatsidf+0xc0>
    f5f4:	2023883a 	mov	r17,r4
    f5f8:	2020d7fa 	srli	r16,r4,31
    f5fc:	20002d16 	blt	r4,zero,f6b4 <__floatsidf+0xd4>
    f600:	8809883a 	mov	r4,r17
    f604:	000f7640 	call	f764 <__clzsi2>
    f608:	01410784 	movi	r5,1054
    f60c:	288bc83a 	sub	r5,r5,r2
    f610:	01010cc4 	movi	r4,1075
    f614:	2149c83a 	sub	r4,r4,r5
    f618:	00c007c4 	movi	r3,31
    f61c:	1900160e 	bge	r3,r4,f678 <__floatsidf+0x98>
    f620:	00c104c4 	movi	r3,1043
    f624:	1947c83a 	sub	r3,r3,r5
    f628:	88c6983a 	sll	r3,r17,r3
    f62c:	00800434 	movhi	r2,16
    f630:	10bfffc4 	addi	r2,r2,-1
    f634:	1886703a 	and	r3,r3,r2
    f638:	2941ffcc 	andi	r5,r5,2047
    f63c:	800d883a 	mov	r6,r16
    f640:	0005883a 	mov	r2,zero
    f644:	280a953a 	slli	r5,r5,20
    f648:	31803fcc 	andi	r6,r6,255
    f64c:	01000434 	movhi	r4,16
    f650:	300c97fa 	slli	r6,r6,31
    f654:	213fffc4 	addi	r4,r4,-1
    f658:	1906703a 	and	r3,r3,r4
    f65c:	1946b03a 	or	r3,r3,r5
    f660:	1986b03a 	or	r3,r3,r6
    f664:	dfc00217 	ldw	ra,8(sp)
    f668:	dc400117 	ldw	r17,4(sp)
    f66c:	dc000017 	ldw	r16,0(sp)
    f670:	dec00304 	addi	sp,sp,12
    f674:	f800283a 	ret
    f678:	00c002c4 	movi	r3,11
    f67c:	1887c83a 	sub	r3,r3,r2
    f680:	88c6d83a 	srl	r3,r17,r3
    f684:	8904983a 	sll	r2,r17,r4
    f688:	01000434 	movhi	r4,16
    f68c:	213fffc4 	addi	r4,r4,-1
    f690:	2941ffcc 	andi	r5,r5,2047
    f694:	1906703a 	and	r3,r3,r4
    f698:	800d883a 	mov	r6,r16
    f69c:	003fe906 	br	f644 <__alt_exception_stack_pointer+0xf800f644>
    f6a0:	000d883a 	mov	r6,zero
    f6a4:	000b883a 	mov	r5,zero
    f6a8:	0007883a 	mov	r3,zero
    f6ac:	0005883a 	mov	r2,zero
    f6b0:	003fe406 	br	f644 <__alt_exception_stack_pointer+0xf800f644>
    f6b4:	0123c83a 	sub	r17,zero,r4
    f6b8:	003fd106 	br	f600 <__alt_exception_stack_pointer+0xf800f600>

0000f6bc <__floatunsidf>:
    f6bc:	defffe04 	addi	sp,sp,-8
    f6c0:	dc000015 	stw	r16,0(sp)
    f6c4:	dfc00115 	stw	ra,4(sp)
    f6c8:	2021883a 	mov	r16,r4
    f6cc:	20002226 	beq	r4,zero,f758 <__floatunsidf+0x9c>
    f6d0:	000f7640 	call	f764 <__clzsi2>
    f6d4:	01010784 	movi	r4,1054
    f6d8:	2089c83a 	sub	r4,r4,r2
    f6dc:	01810cc4 	movi	r6,1075
    f6e0:	310dc83a 	sub	r6,r6,r4
    f6e4:	00c007c4 	movi	r3,31
    f6e8:	1980120e 	bge	r3,r6,f734 <__floatunsidf+0x78>
    f6ec:	00c104c4 	movi	r3,1043
    f6f0:	1907c83a 	sub	r3,r3,r4
    f6f4:	80ca983a 	sll	r5,r16,r3
    f6f8:	00800434 	movhi	r2,16
    f6fc:	10bfffc4 	addi	r2,r2,-1
    f700:	2101ffcc 	andi	r4,r4,2047
    f704:	0021883a 	mov	r16,zero
    f708:	288a703a 	and	r5,r5,r2
    f70c:	2008953a 	slli	r4,r4,20
    f710:	00c00434 	movhi	r3,16
    f714:	18ffffc4 	addi	r3,r3,-1
    f718:	28c6703a 	and	r3,r5,r3
    f71c:	8005883a 	mov	r2,r16
    f720:	1906b03a 	or	r3,r3,r4
    f724:	dfc00117 	ldw	ra,4(sp)
    f728:	dc000017 	ldw	r16,0(sp)
    f72c:	dec00204 	addi	sp,sp,8
    f730:	f800283a 	ret
    f734:	00c002c4 	movi	r3,11
    f738:	188bc83a 	sub	r5,r3,r2
    f73c:	814ad83a 	srl	r5,r16,r5
    f740:	00c00434 	movhi	r3,16
    f744:	18ffffc4 	addi	r3,r3,-1
    f748:	81a0983a 	sll	r16,r16,r6
    f74c:	2101ffcc 	andi	r4,r4,2047
    f750:	28ca703a 	and	r5,r5,r3
    f754:	003fed06 	br	f70c <__alt_exception_stack_pointer+0xf800f70c>
    f758:	0009883a 	mov	r4,zero
    f75c:	000b883a 	mov	r5,zero
    f760:	003fea06 	br	f70c <__alt_exception_stack_pointer+0xf800f70c>

0000f764 <__clzsi2>:
    f764:	00bfffd4 	movui	r2,65535
    f768:	11000536 	bltu	r2,r4,f780 <__clzsi2+0x1c>
    f76c:	00803fc4 	movi	r2,255
    f770:	11000f36 	bltu	r2,r4,f7b0 <__clzsi2+0x4c>
    f774:	00800804 	movi	r2,32
    f778:	0007883a 	mov	r3,zero
    f77c:	00000506 	br	f794 <__clzsi2+0x30>
    f780:	00804034 	movhi	r2,256
    f784:	10bfffc4 	addi	r2,r2,-1
    f788:	11000c2e 	bgeu	r2,r4,f7bc <__clzsi2+0x58>
    f78c:	00800204 	movi	r2,8
    f790:	00c00604 	movi	r3,24
    f794:	20c8d83a 	srl	r4,r4,r3
    f798:	00c00074 	movhi	r3,1
    f79c:	18cae704 	addi	r3,r3,11164
    f7a0:	1909883a 	add	r4,r3,r4
    f7a4:	20c00003 	ldbu	r3,0(r4)
    f7a8:	10c5c83a 	sub	r2,r2,r3
    f7ac:	f800283a 	ret
    f7b0:	00800604 	movi	r2,24
    f7b4:	00c00204 	movi	r3,8
    f7b8:	003ff606 	br	f794 <__alt_exception_stack_pointer+0xf800f794>
    f7bc:	00800404 	movi	r2,16
    f7c0:	1007883a 	mov	r3,r2
    f7c4:	003ff306 	br	f794 <__alt_exception_stack_pointer+0xf800f794>

0000f7c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7c8:	defffe04 	addi	sp,sp,-8
    f7cc:	dfc00115 	stw	ra,4(sp)
    f7d0:	df000015 	stw	fp,0(sp)
    f7d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7d8:	d0a00d17 	ldw	r2,-32716(gp)
    f7dc:	10000326 	beq	r2,zero,f7ec <alt_get_errno+0x24>
    f7e0:	d0a00d17 	ldw	r2,-32716(gp)
    f7e4:	103ee83a 	callr	r2
    f7e8:	00000106 	br	f7f0 <alt_get_errno+0x28>
    f7ec:	d0a6d604 	addi	r2,gp,-25768
}
    f7f0:	e037883a 	mov	sp,fp
    f7f4:	dfc00117 	ldw	ra,4(sp)
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00204 	addi	sp,sp,8
    f800:	f800283a 	ret

0000f804 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f804:	defffb04 	addi	sp,sp,-20
    f808:	dfc00415 	stw	ra,16(sp)
    f80c:	df000315 	stw	fp,12(sp)
    f810:	df000304 	addi	fp,sp,12
    f814:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	10000816 	blt	r2,zero,f840 <close+0x3c>
    f820:	01400304 	movi	r5,12
    f824:	e13fff17 	ldw	r4,-4(fp)
    f828:	000cefc0 	call	cefc <__mulsi3>
    f82c:	1007883a 	mov	r3,r2
    f830:	00800074 	movhi	r2,1
    f834:	108d6a04 	addi	r2,r2,13736
    f838:	1885883a 	add	r2,r3,r2
    f83c:	00000106 	br	f844 <close+0x40>
    f840:	0005883a 	mov	r2,zero
    f844:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f848:	e0bffd17 	ldw	r2,-12(fp)
    f84c:	10001926 	beq	r2,zero,f8b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f850:	e0bffd17 	ldw	r2,-12(fp)
    f854:	10800017 	ldw	r2,0(r2)
    f858:	10800417 	ldw	r2,16(r2)
    f85c:	10000626 	beq	r2,zero,f878 <close+0x74>
    f860:	e0bffd17 	ldw	r2,-12(fp)
    f864:	10800017 	ldw	r2,0(r2)
    f868:	10800417 	ldw	r2,16(r2)
    f86c:	e13ffd17 	ldw	r4,-12(fp)
    f870:	103ee83a 	callr	r2
    f874:	00000106 	br	f87c <close+0x78>
    f878:	0005883a 	mov	r2,zero
    f87c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f880:	e13fff17 	ldw	r4,-4(fp)
    f884:	000feec0 	call	feec <alt_release_fd>
    if (rval < 0)
    f888:	e0bffe17 	ldw	r2,-8(fp)
    f88c:	1000070e 	bge	r2,zero,f8ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f890:	000f7c80 	call	f7c8 <alt_get_errno>
    f894:	1007883a 	mov	r3,r2
    f898:	e0bffe17 	ldw	r2,-8(fp)
    f89c:	0085c83a 	sub	r2,zero,r2
    f8a0:	18800015 	stw	r2,0(r3)
      return -1;
    f8a4:	00bfffc4 	movi	r2,-1
    f8a8:	00000706 	br	f8c8 <close+0xc4>
    }
    return 0;
    f8ac:	0005883a 	mov	r2,zero
    f8b0:	00000506 	br	f8c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f8b4:	000f7c80 	call	f7c8 <alt_get_errno>
    f8b8:	1007883a 	mov	r3,r2
    f8bc:	00801444 	movi	r2,81
    f8c0:	18800015 	stw	r2,0(r3)
    return -1;
    f8c4:	00bfffc4 	movi	r2,-1
  }
}
    f8c8:	e037883a 	mov	sp,fp
    f8cc:	dfc00117 	ldw	ra,4(sp)
    f8d0:	df000017 	ldw	fp,0(sp)
    f8d4:	dec00204 	addi	sp,sp,8
    f8d8:	f800283a 	ret

0000f8dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f8dc:	defffc04 	addi	sp,sp,-16
    f8e0:	df000315 	stw	fp,12(sp)
    f8e4:	df000304 	addi	fp,sp,12
    f8e8:	e13ffd15 	stw	r4,-12(fp)
    f8ec:	e17ffe15 	stw	r5,-8(fp)
    f8f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f8f4:	e0bfff17 	ldw	r2,-4(fp)
}
    f8f8:	e037883a 	mov	sp,fp
    f8fc:	df000017 	ldw	fp,0(sp)
    f900:	dec00104 	addi	sp,sp,4
    f904:	f800283a 	ret

0000f908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f908:	defffe04 	addi	sp,sp,-8
    f90c:	dfc00115 	stw	ra,4(sp)
    f910:	df000015 	stw	fp,0(sp)
    f914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f918:	d0a00d17 	ldw	r2,-32716(gp)
    f91c:	10000326 	beq	r2,zero,f92c <alt_get_errno+0x24>
    f920:	d0a00d17 	ldw	r2,-32716(gp)
    f924:	103ee83a 	callr	r2
    f928:	00000106 	br	f930 <alt_get_errno+0x28>
    f92c:	d0a6d604 	addi	r2,gp,-25768
}
    f930:	e037883a 	mov	sp,fp
    f934:	dfc00117 	ldw	ra,4(sp)
    f938:	df000017 	ldw	fp,0(sp)
    f93c:	dec00204 	addi	sp,sp,8
    f940:	f800283a 	ret

0000f944 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f944:	defffb04 	addi	sp,sp,-20
    f948:	dfc00415 	stw	ra,16(sp)
    f94c:	df000315 	stw	fp,12(sp)
    f950:	df000304 	addi	fp,sp,12
    f954:	e13ffe15 	stw	r4,-8(fp)
    f958:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f95c:	e0bffe17 	ldw	r2,-8(fp)
    f960:	10000816 	blt	r2,zero,f984 <fstat+0x40>
    f964:	01400304 	movi	r5,12
    f968:	e13ffe17 	ldw	r4,-8(fp)
    f96c:	000cefc0 	call	cefc <__mulsi3>
    f970:	1007883a 	mov	r3,r2
    f974:	00800074 	movhi	r2,1
    f978:	108d6a04 	addi	r2,r2,13736
    f97c:	1885883a 	add	r2,r3,r2
    f980:	00000106 	br	f988 <fstat+0x44>
    f984:	0005883a 	mov	r2,zero
    f988:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f98c:	e0bffd17 	ldw	r2,-12(fp)
    f990:	10001026 	beq	r2,zero,f9d4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f994:	e0bffd17 	ldw	r2,-12(fp)
    f998:	10800017 	ldw	r2,0(r2)
    f99c:	10800817 	ldw	r2,32(r2)
    f9a0:	10000726 	beq	r2,zero,f9c0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f9a4:	e0bffd17 	ldw	r2,-12(fp)
    f9a8:	10800017 	ldw	r2,0(r2)
    f9ac:	10800817 	ldw	r2,32(r2)
    f9b0:	e17fff17 	ldw	r5,-4(fp)
    f9b4:	e13ffd17 	ldw	r4,-12(fp)
    f9b8:	103ee83a 	callr	r2
    f9bc:	00000a06 	br	f9e8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f9c0:	e0bfff17 	ldw	r2,-4(fp)
    f9c4:	00c80004 	movi	r3,8192
    f9c8:	10c00115 	stw	r3,4(r2)
      return 0;
    f9cc:	0005883a 	mov	r2,zero
    f9d0:	00000506 	br	f9e8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f9d4:	000f9080 	call	f908 <alt_get_errno>
    f9d8:	1007883a 	mov	r3,r2
    f9dc:	00801444 	movi	r2,81
    f9e0:	18800015 	stw	r2,0(r3)
    return -1;
    f9e4:	00bfffc4 	movi	r2,-1
  }
}
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9fc:	defffe04 	addi	sp,sp,-8
    fa00:	dfc00115 	stw	ra,4(sp)
    fa04:	df000015 	stw	fp,0(sp)
    fa08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa0c:	d0a00d17 	ldw	r2,-32716(gp)
    fa10:	10000326 	beq	r2,zero,fa20 <alt_get_errno+0x24>
    fa14:	d0a00d17 	ldw	r2,-32716(gp)
    fa18:	103ee83a 	callr	r2
    fa1c:	00000106 	br	fa24 <alt_get_errno+0x28>
    fa20:	d0a6d604 	addi	r2,gp,-25768
}
    fa24:	e037883a 	mov	sp,fp
    fa28:	dfc00117 	ldw	ra,4(sp)
    fa2c:	df000017 	ldw	fp,0(sp)
    fa30:	dec00204 	addi	sp,sp,8
    fa34:	f800283a 	ret

0000fa38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fa38:	deffed04 	addi	sp,sp,-76
    fa3c:	dfc01215 	stw	ra,72(sp)
    fa40:	df001115 	stw	fp,68(sp)
    fa44:	df001104 	addi	fp,sp,68
    fa48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa4c:	e0bfff17 	ldw	r2,-4(fp)
    fa50:	10000816 	blt	r2,zero,fa74 <isatty+0x3c>
    fa54:	01400304 	movi	r5,12
    fa58:	e13fff17 	ldw	r4,-4(fp)
    fa5c:	000cefc0 	call	cefc <__mulsi3>
    fa60:	1007883a 	mov	r3,r2
    fa64:	00800074 	movhi	r2,1
    fa68:	108d6a04 	addi	r2,r2,13736
    fa6c:	1885883a 	add	r2,r3,r2
    fa70:	00000106 	br	fa78 <isatty+0x40>
    fa74:	0005883a 	mov	r2,zero
    fa78:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fa7c:	e0bfef17 	ldw	r2,-68(fp)
    fa80:	10000e26 	beq	r2,zero,fabc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fa84:	e0bfef17 	ldw	r2,-68(fp)
    fa88:	10800017 	ldw	r2,0(r2)
    fa8c:	10800817 	ldw	r2,32(r2)
    fa90:	1000021e 	bne	r2,zero,fa9c <isatty+0x64>
    {
      return 1;
    fa94:	00800044 	movi	r2,1
    fa98:	00000d06 	br	fad0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fa9c:	e0bff004 	addi	r2,fp,-64
    faa0:	100b883a 	mov	r5,r2
    faa4:	e13fff17 	ldw	r4,-4(fp)
    faa8:	000f9440 	call	f944 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    faac:	e0bff117 	ldw	r2,-60(fp)
    fab0:	10880020 	cmpeqi	r2,r2,8192
    fab4:	10803fcc 	andi	r2,r2,255
    fab8:	00000506 	br	fad0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fabc:	000f9fc0 	call	f9fc <alt_get_errno>
    fac0:	1007883a 	mov	r3,r2
    fac4:	00801444 	movi	r2,81
    fac8:	18800015 	stw	r2,0(r3)
    return 0;
    facc:	0005883a 	mov	r2,zero
  }
}
    fad0:	e037883a 	mov	sp,fp
    fad4:	dfc00117 	ldw	ra,4(sp)
    fad8:	df000017 	ldw	fp,0(sp)
    fadc:	dec00204 	addi	sp,sp,8
    fae0:	f800283a 	ret

0000fae4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fae4:	defffc04 	addi	sp,sp,-16
    fae8:	df000315 	stw	fp,12(sp)
    faec:	df000304 	addi	fp,sp,12
    faf0:	e13ffd15 	stw	r4,-12(fp)
    faf4:	e17ffe15 	stw	r5,-8(fp)
    faf8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fafc:	e0fffe17 	ldw	r3,-8(fp)
    fb00:	e0bffd17 	ldw	r2,-12(fp)
    fb04:	18800c26 	beq	r3,r2,fb38 <alt_load_section+0x54>
  {
    while( to != end )
    fb08:	00000806 	br	fb2c <alt_load_section+0x48>
    {
      *to++ = *from++;
    fb0c:	e0bffe17 	ldw	r2,-8(fp)
    fb10:	10c00104 	addi	r3,r2,4
    fb14:	e0fffe15 	stw	r3,-8(fp)
    fb18:	e0fffd17 	ldw	r3,-12(fp)
    fb1c:	19000104 	addi	r4,r3,4
    fb20:	e13ffd15 	stw	r4,-12(fp)
    fb24:	18c00017 	ldw	r3,0(r3)
    fb28:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fb2c:	e0fffe17 	ldw	r3,-8(fp)
    fb30:	e0bfff17 	ldw	r2,-4(fp)
    fb34:	18bff51e 	bne	r3,r2,fb0c <__alt_exception_stack_pointer+0xf800fb0c>
    {
      *to++ = *from++;
    }
  }
}
    fb38:	0001883a 	nop
    fb3c:	e037883a 	mov	sp,fp
    fb40:	df000017 	ldw	fp,0(sp)
    fb44:	dec00104 	addi	sp,sp,4
    fb48:	f800283a 	ret

0000fb4c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    fb4c:	defffe04 	addi	sp,sp,-8
    fb50:	dfc00115 	stw	ra,4(sp)
    fb54:	df000015 	stw	fp,0(sp)
    fb58:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fb5c:	01800074 	movhi	r6,1
    fb60:	3191f304 	addi	r6,r6,18380
    fb64:	01400074 	movhi	r5,1
    fb68:	294b3704 	addi	r5,r5,11484
    fb6c:	01000074 	movhi	r4,1
    fb70:	2111f304 	addi	r4,r4,18380
    fb74:	000fae40 	call	fae4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fb78:	01800034 	movhi	r6,0
    fb7c:	31808f04 	addi	r6,r6,572
    fb80:	01400034 	movhi	r5,0
    fb84:	29400804 	addi	r5,r5,32
    fb88:	01000034 	movhi	r4,0
    fb8c:	21000804 	addi	r4,r4,32
    fb90:	000fae40 	call	fae4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fb94:	01800074 	movhi	r6,1
    fb98:	318b3704 	addi	r6,r6,11484
    fb9c:	01400074 	movhi	r5,1
    fba0:	29486904 	addi	r5,r5,8612
    fba4:	01000074 	movhi	r4,1
    fba8:	21086904 	addi	r4,r4,8612
    fbac:	000fae40 	call	fae4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fbb0:	00110ec0 	call	110ec <alt_dcache_flush_all>
  alt_icache_flush_all();
    fbb4:	00112ac0 	call	112ac <alt_icache_flush_all>
}
    fbb8:	0001883a 	nop
    fbbc:	e037883a 	mov	sp,fp
    fbc0:	dfc00117 	ldw	ra,4(sp)
    fbc4:	df000017 	ldw	fp,0(sp)
    fbc8:	dec00204 	addi	sp,sp,8
    fbcc:	f800283a 	ret

0000fbd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fbd0:	defffe04 	addi	sp,sp,-8
    fbd4:	dfc00115 	stw	ra,4(sp)
    fbd8:	df000015 	stw	fp,0(sp)
    fbdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fbe0:	d0a00d17 	ldw	r2,-32716(gp)
    fbe4:	10000326 	beq	r2,zero,fbf4 <alt_get_errno+0x24>
    fbe8:	d0a00d17 	ldw	r2,-32716(gp)
    fbec:	103ee83a 	callr	r2
    fbf0:	00000106 	br	fbf8 <alt_get_errno+0x28>
    fbf4:	d0a6d604 	addi	r2,gp,-25768
}
    fbf8:	e037883a 	mov	sp,fp
    fbfc:	dfc00117 	ldw	ra,4(sp)
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00204 	addi	sp,sp,8
    fc08:	f800283a 	ret

0000fc0c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fc0c:	defff904 	addi	sp,sp,-28
    fc10:	dfc00615 	stw	ra,24(sp)
    fc14:	df000515 	stw	fp,20(sp)
    fc18:	df000504 	addi	fp,sp,20
    fc1c:	e13ffd15 	stw	r4,-12(fp)
    fc20:	e17ffe15 	stw	r5,-8(fp)
    fc24:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fc28:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc2c:	e0bffd17 	ldw	r2,-12(fp)
    fc30:	10000816 	blt	r2,zero,fc54 <lseek+0x48>
    fc34:	01400304 	movi	r5,12
    fc38:	e13ffd17 	ldw	r4,-12(fp)
    fc3c:	000cefc0 	call	cefc <__mulsi3>
    fc40:	1007883a 	mov	r3,r2
    fc44:	00800074 	movhi	r2,1
    fc48:	108d6a04 	addi	r2,r2,13736
    fc4c:	1885883a 	add	r2,r3,r2
    fc50:	00000106 	br	fc58 <lseek+0x4c>
    fc54:	0005883a 	mov	r2,zero
    fc58:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fc5c:	e0bffc17 	ldw	r2,-16(fp)
    fc60:	10001026 	beq	r2,zero,fca4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fc64:	e0bffc17 	ldw	r2,-16(fp)
    fc68:	10800017 	ldw	r2,0(r2)
    fc6c:	10800717 	ldw	r2,28(r2)
    fc70:	10000926 	beq	r2,zero,fc98 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fc74:	e0bffc17 	ldw	r2,-16(fp)
    fc78:	10800017 	ldw	r2,0(r2)
    fc7c:	10800717 	ldw	r2,28(r2)
    fc80:	e1bfff17 	ldw	r6,-4(fp)
    fc84:	e17ffe17 	ldw	r5,-8(fp)
    fc88:	e13ffc17 	ldw	r4,-16(fp)
    fc8c:	103ee83a 	callr	r2
    fc90:	e0bffb15 	stw	r2,-20(fp)
    fc94:	00000506 	br	fcac <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fc98:	00bfde84 	movi	r2,-134
    fc9c:	e0bffb15 	stw	r2,-20(fp)
    fca0:	00000206 	br	fcac <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    fca4:	00bfebc4 	movi	r2,-81
    fca8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fcac:	e0bffb17 	ldw	r2,-20(fp)
    fcb0:	1000070e 	bge	r2,zero,fcd0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    fcb4:	000fbd00 	call	fbd0 <alt_get_errno>
    fcb8:	1007883a 	mov	r3,r2
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	0085c83a 	sub	r2,zero,r2
    fcc4:	18800015 	stw	r2,0(r3)
    rc = -1;
    fcc8:	00bfffc4 	movi	r2,-1
    fccc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fcd0:	e0bffb17 	ldw	r2,-20(fp)
}
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	dfc00117 	ldw	ra,4(sp)
    fcdc:	df000017 	ldw	fp,0(sp)
    fce0:	dec00204 	addi	sp,sp,8
    fce4:	f800283a 	ret

0000fce8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fce8:	defffd04 	addi	sp,sp,-12
    fcec:	dfc00215 	stw	ra,8(sp)
    fcf0:	df000115 	stw	fp,4(sp)
    fcf4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fcf8:	0009883a 	mov	r4,zero
    fcfc:	00102740 	call	10274 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fd00:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fd04:	00102ac0 	call	102ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fd08:	01800074 	movhi	r6,1
    fd0c:	318b2a04 	addi	r6,r6,11432
    fd10:	01400074 	movhi	r5,1
    fd14:	294b2f04 	addi	r5,r5,11452
    fd18:	01000074 	movhi	r4,1
    fd1c:	210b2a04 	addi	r4,r4,11432
    fd20:	00116500 	call	11650 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fd24:	00111ec0 	call	111ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fd28:	01000074 	movhi	r4,1
    fd2c:	21049304 	addi	r4,r4,4684
    fd30:	0011e100 	call	11e10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fd34:	d0a6da17 	ldw	r2,-25752(gp)
    fd38:	d0e6db17 	ldw	r3,-25748(gp)
    fd3c:	d126dc17 	ldw	r4,-25744(gp)
    fd40:	200d883a 	mov	r6,r4
    fd44:	180b883a 	mov	r5,r3
    fd48:	1009883a 	mov	r4,r2
    fd4c:	00014cc0 	call	14cc <main>
    fd50:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fd54:	01000044 	movi	r4,1
    fd58:	000f8040 	call	f804 <close>
  exit (result);
    fd5c:	e13fff17 	ldw	r4,-4(fp)
    fd60:	0011e240 	call	11e24 <exit>

0000fd64 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fd64:	defffe04 	addi	sp,sp,-8
    fd68:	df000115 	stw	fp,4(sp)
    fd6c:	df000104 	addi	fp,sp,4
    fd70:	e13fff15 	stw	r4,-4(fp)
}
    fd74:	0001883a 	nop
    fd78:	e037883a 	mov	sp,fp
    fd7c:	df000017 	ldw	fp,0(sp)
    fd80:	dec00104 	addi	sp,sp,4
    fd84:	f800283a 	ret

0000fd88 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fd88:	defffe04 	addi	sp,sp,-8
    fd8c:	df000115 	stw	fp,4(sp)
    fd90:	df000104 	addi	fp,sp,4
    fd94:	e13fff15 	stw	r4,-4(fp)
}
    fd98:	0001883a 	nop
    fd9c:	e037883a 	mov	sp,fp
    fda0:	df000017 	ldw	fp,0(sp)
    fda4:	dec00104 	addi	sp,sp,4
    fda8:	f800283a 	ret

0000fdac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fdac:	defffe04 	addi	sp,sp,-8
    fdb0:	dfc00115 	stw	ra,4(sp)
    fdb4:	df000015 	stw	fp,0(sp)
    fdb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fdbc:	d0a00d17 	ldw	r2,-32716(gp)
    fdc0:	10000326 	beq	r2,zero,fdd0 <alt_get_errno+0x24>
    fdc4:	d0a00d17 	ldw	r2,-32716(gp)
    fdc8:	103ee83a 	callr	r2
    fdcc:	00000106 	br	fdd4 <alt_get_errno+0x28>
    fdd0:	d0a6d604 	addi	r2,gp,-25768
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	dfc00117 	ldw	ra,4(sp)
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00204 	addi	sp,sp,8
    fde4:	f800283a 	ret

0000fde8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fde8:	defff904 	addi	sp,sp,-28
    fdec:	dfc00615 	stw	ra,24(sp)
    fdf0:	df000515 	stw	fp,20(sp)
    fdf4:	df000504 	addi	fp,sp,20
    fdf8:	e13ffd15 	stw	r4,-12(fp)
    fdfc:	e17ffe15 	stw	r5,-8(fp)
    fe00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fe04:	e0bffd17 	ldw	r2,-12(fp)
    fe08:	10000816 	blt	r2,zero,fe2c <read+0x44>
    fe0c:	01400304 	movi	r5,12
    fe10:	e13ffd17 	ldw	r4,-12(fp)
    fe14:	000cefc0 	call	cefc <__mulsi3>
    fe18:	1007883a 	mov	r3,r2
    fe1c:	00800074 	movhi	r2,1
    fe20:	108d6a04 	addi	r2,r2,13736
    fe24:	1885883a 	add	r2,r3,r2
    fe28:	00000106 	br	fe30 <read+0x48>
    fe2c:	0005883a 	mov	r2,zero
    fe30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fe34:	e0bffb17 	ldw	r2,-20(fp)
    fe38:	10002226 	beq	r2,zero,fec4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fe3c:	e0bffb17 	ldw	r2,-20(fp)
    fe40:	10800217 	ldw	r2,8(r2)
    fe44:	108000cc 	andi	r2,r2,3
    fe48:	10800060 	cmpeqi	r2,r2,1
    fe4c:	1000181e 	bne	r2,zero,feb0 <read+0xc8>
        (fd->dev->read))
    fe50:	e0bffb17 	ldw	r2,-20(fp)
    fe54:	10800017 	ldw	r2,0(r2)
    fe58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fe5c:	10001426 	beq	r2,zero,feb0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fe60:	e0bffb17 	ldw	r2,-20(fp)
    fe64:	10800017 	ldw	r2,0(r2)
    fe68:	10800517 	ldw	r2,20(r2)
    fe6c:	e0ffff17 	ldw	r3,-4(fp)
    fe70:	180d883a 	mov	r6,r3
    fe74:	e17ffe17 	ldw	r5,-8(fp)
    fe78:	e13ffb17 	ldw	r4,-20(fp)
    fe7c:	103ee83a 	callr	r2
    fe80:	e0bffc15 	stw	r2,-16(fp)
    fe84:	e0bffc17 	ldw	r2,-16(fp)
    fe88:	1000070e 	bge	r2,zero,fea8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    fe8c:	000fdac0 	call	fdac <alt_get_errno>
    fe90:	1007883a 	mov	r3,r2
    fe94:	e0bffc17 	ldw	r2,-16(fp)
    fe98:	0085c83a 	sub	r2,zero,r2
    fe9c:	18800015 	stw	r2,0(r3)
          return -1;
    fea0:	00bfffc4 	movi	r2,-1
    fea4:	00000c06 	br	fed8 <read+0xf0>
        }
        return rval;
    fea8:	e0bffc17 	ldw	r2,-16(fp)
    feac:	00000a06 	br	fed8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    feb0:	000fdac0 	call	fdac <alt_get_errno>
    feb4:	1007883a 	mov	r3,r2
    feb8:	00800344 	movi	r2,13
    febc:	18800015 	stw	r2,0(r3)
    fec0:	00000406 	br	fed4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fec4:	000fdac0 	call	fdac <alt_get_errno>
    fec8:	1007883a 	mov	r3,r2
    fecc:	00801444 	movi	r2,81
    fed0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fed4:	00bfffc4 	movi	r2,-1
}
    fed8:	e037883a 	mov	sp,fp
    fedc:	dfc00117 	ldw	ra,4(sp)
    fee0:	df000017 	ldw	fp,0(sp)
    fee4:	dec00204 	addi	sp,sp,8
    fee8:	f800283a 	ret

0000feec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    feec:	defffc04 	addi	sp,sp,-16
    fef0:	dfc00315 	stw	ra,12(sp)
    fef4:	df000215 	stw	fp,8(sp)
    fef8:	dc000115 	stw	r16,4(sp)
    fefc:	df000204 	addi	fp,sp,8
    ff00:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    ff04:	e0bffe17 	ldw	r2,-8(fp)
    ff08:	108000d0 	cmplti	r2,r2,3
    ff0c:	1000111e 	bne	r2,zero,ff54 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    ff10:	04000074 	movhi	r16,1
    ff14:	840d6a04 	addi	r16,r16,13736
    ff18:	e0bffe17 	ldw	r2,-8(fp)
    ff1c:	01400304 	movi	r5,12
    ff20:	1009883a 	mov	r4,r2
    ff24:	000cefc0 	call	cefc <__mulsi3>
    ff28:	8085883a 	add	r2,r16,r2
    ff2c:	10800204 	addi	r2,r2,8
    ff30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ff34:	04000074 	movhi	r16,1
    ff38:	840d6a04 	addi	r16,r16,13736
    ff3c:	e0bffe17 	ldw	r2,-8(fp)
    ff40:	01400304 	movi	r5,12
    ff44:	1009883a 	mov	r4,r2
    ff48:	000cefc0 	call	cefc <__mulsi3>
    ff4c:	8085883a 	add	r2,r16,r2
    ff50:	10000015 	stw	zero,0(r2)
  }
}
    ff54:	0001883a 	nop
    ff58:	e6ffff04 	addi	sp,fp,-4
    ff5c:	dfc00217 	ldw	ra,8(sp)
    ff60:	df000117 	ldw	fp,4(sp)
    ff64:	dc000017 	ldw	r16,0(sp)
    ff68:	dec00304 	addi	sp,sp,12
    ff6c:	f800283a 	ret

0000ff70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ff70:	defff904 	addi	sp,sp,-28
    ff74:	df000615 	stw	fp,24(sp)
    ff78:	df000604 	addi	fp,sp,24
    ff7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff80:	0005303a 	rdctl	r2,status
    ff84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff88:	e0fffe17 	ldw	r3,-8(fp)
    ff8c:	00bfff84 	movi	r2,-2
    ff90:	1884703a 	and	r2,r3,r2
    ff94:	1001703a 	wrctl	status,r2
  
  return context;
    ff98:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ff9c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ffa0:	d0a00e17 	ldw	r2,-32712(gp)
    ffa4:	10c000c4 	addi	r3,r2,3
    ffa8:	00bfff04 	movi	r2,-4
    ffac:	1884703a 	and	r2,r3,r2
    ffb0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ffb4:	d0e00e17 	ldw	r3,-32712(gp)
    ffb8:	e0bfff17 	ldw	r2,-4(fp)
    ffbc:	1887883a 	add	r3,r3,r2
    ffc0:	00820034 	movhi	r2,2048
    ffc4:	10bf0004 	addi	r2,r2,-1024
    ffc8:	10c0062e 	bgeu	r2,r3,ffe4 <sbrk+0x74>
    ffcc:	e0bffb17 	ldw	r2,-20(fp)
    ffd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffd4:	e0bffa17 	ldw	r2,-24(fp)
    ffd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ffdc:	00bfffc4 	movi	r2,-1
    ffe0:	00000b06 	br	10010 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ffe4:	d0a00e17 	ldw	r2,-32712(gp)
    ffe8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ffec:	d0e00e17 	ldw	r3,-32712(gp)
    fff0:	e0bfff17 	ldw	r2,-4(fp)
    fff4:	1885883a 	add	r2,r3,r2
    fff8:	d0a00e15 	stw	r2,-32712(gp)
    fffc:	e0bffb17 	ldw	r2,-20(fp)
   10000:	e0bffc15 	stw	r2,-16(fp)
   10004:	e0bffc17 	ldw	r2,-16(fp)
   10008:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1000c:	e0bffd17 	ldw	r2,-12(fp)
} 
   10010:	e037883a 	mov	sp,fp
   10014:	df000017 	ldw	fp,0(sp)
   10018:	dec00104 	addi	sp,sp,4
   1001c:	f800283a 	ret

00010020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10020:	defffe04 	addi	sp,sp,-8
   10024:	dfc00115 	stw	ra,4(sp)
   10028:	df000015 	stw	fp,0(sp)
   1002c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10030:	d0a00d17 	ldw	r2,-32716(gp)
   10034:	10000326 	beq	r2,zero,10044 <alt_get_errno+0x24>
   10038:	d0a00d17 	ldw	r2,-32716(gp)
   1003c:	103ee83a 	callr	r2
   10040:	00000106 	br	10048 <alt_get_errno+0x28>
   10044:	d0a6d604 	addi	r2,gp,-25768
}
   10048:	e037883a 	mov	sp,fp
   1004c:	dfc00117 	ldw	ra,4(sp)
   10050:	df000017 	ldw	fp,0(sp)
   10054:	dec00204 	addi	sp,sp,8
   10058:	f800283a 	ret

0001005c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1005c:	defffc04 	addi	sp,sp,-16
   10060:	dfc00315 	stw	ra,12(sp)
   10064:	df000215 	stw	fp,8(sp)
   10068:	df000204 	addi	fp,sp,8
   1006c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10070:	d0a6df17 	ldw	r2,-25732(gp)
  clock_t ticks = alt_nticks(); 
   10074:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10078:	d0a6de17 	ldw	r2,-25736(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1007c:	1000061e 	bne	r2,zero,10098 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   10080:	00100200 	call	10020 <alt_get_errno>
   10084:	1007883a 	mov	r3,r2
   10088:	00801604 	movi	r2,88
   1008c:	18800015 	stw	r2,0(r3)
    return 0;
   10090:	0005883a 	mov	r2,zero
   10094:	00000a06 	br	100c0 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   100a0:	e0bfff17 	ldw	r2,-4(fp)
   100a4:	e0fffe17 	ldw	r3,-8(fp)
   100a8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   100ac:	e0bfff17 	ldw	r2,-4(fp)
   100b0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   100b4:	e0bfff17 	ldw	r2,-4(fp)
   100b8:	10000315 	stw	zero,12(r2)

  return ticks;
   100bc:	e0bffe17 	ldw	r2,-8(fp)
}
   100c0:	e037883a 	mov	sp,fp
   100c4:	dfc00117 	ldw	ra,4(sp)
   100c8:	df000017 	ldw	fp,0(sp)
   100cc:	dec00204 	addi	sp,sp,8
   100d0:	f800283a 	ret

000100d4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   100d4:	defffd04 	addi	sp,sp,-12
   100d8:	dfc00215 	stw	ra,8(sp)
   100dc:	df000115 	stw	fp,4(sp)
   100e0:	df000104 	addi	fp,sp,4
   100e4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   100e8:	e13fff17 	ldw	r4,-4(fp)
   100ec:	0010f940 	call	10f94 <alt_busy_sleep>
}
   100f0:	e037883a 	mov	sp,fp
   100f4:	dfc00117 	ldw	ra,4(sp)
   100f8:	df000017 	ldw	fp,0(sp)
   100fc:	dec00204 	addi	sp,sp,8
   10100:	f800283a 	ret

00010104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10104:	defffe04 	addi	sp,sp,-8
   10108:	dfc00115 	stw	ra,4(sp)
   1010c:	df000015 	stw	fp,0(sp)
   10110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10114:	d0a00d17 	ldw	r2,-32716(gp)
   10118:	10000326 	beq	r2,zero,10128 <alt_get_errno+0x24>
   1011c:	d0a00d17 	ldw	r2,-32716(gp)
   10120:	103ee83a 	callr	r2
   10124:	00000106 	br	1012c <alt_get_errno+0x28>
   10128:	d0a6d604 	addi	r2,gp,-25768
}
   1012c:	e037883a 	mov	sp,fp
   10130:	dfc00117 	ldw	ra,4(sp)
   10134:	df000017 	ldw	fp,0(sp)
   10138:	dec00204 	addi	sp,sp,8
   1013c:	f800283a 	ret

00010140 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10140:	defff904 	addi	sp,sp,-28
   10144:	dfc00615 	stw	ra,24(sp)
   10148:	df000515 	stw	fp,20(sp)
   1014c:	df000504 	addi	fp,sp,20
   10150:	e13ffd15 	stw	r4,-12(fp)
   10154:	e17ffe15 	stw	r5,-8(fp)
   10158:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1015c:	e0bffd17 	ldw	r2,-12(fp)
   10160:	10000816 	blt	r2,zero,10184 <write+0x44>
   10164:	01400304 	movi	r5,12
   10168:	e13ffd17 	ldw	r4,-12(fp)
   1016c:	000cefc0 	call	cefc <__mulsi3>
   10170:	1007883a 	mov	r3,r2
   10174:	00800074 	movhi	r2,1
   10178:	108d6a04 	addi	r2,r2,13736
   1017c:	1885883a 	add	r2,r3,r2
   10180:	00000106 	br	10188 <write+0x48>
   10184:	0005883a 	mov	r2,zero
   10188:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1018c:	e0bffb17 	ldw	r2,-20(fp)
   10190:	10002126 	beq	r2,zero,10218 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10194:	e0bffb17 	ldw	r2,-20(fp)
   10198:	10800217 	ldw	r2,8(r2)
   1019c:	108000cc 	andi	r2,r2,3
   101a0:	10001826 	beq	r2,zero,10204 <write+0xc4>
   101a4:	e0bffb17 	ldw	r2,-20(fp)
   101a8:	10800017 	ldw	r2,0(r2)
   101ac:	10800617 	ldw	r2,24(r2)
   101b0:	10001426 	beq	r2,zero,10204 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   101b4:	e0bffb17 	ldw	r2,-20(fp)
   101b8:	10800017 	ldw	r2,0(r2)
   101bc:	10800617 	ldw	r2,24(r2)
   101c0:	e0ffff17 	ldw	r3,-4(fp)
   101c4:	180d883a 	mov	r6,r3
   101c8:	e17ffe17 	ldw	r5,-8(fp)
   101cc:	e13ffb17 	ldw	r4,-20(fp)
   101d0:	103ee83a 	callr	r2
   101d4:	e0bffc15 	stw	r2,-16(fp)
   101d8:	e0bffc17 	ldw	r2,-16(fp)
   101dc:	1000070e 	bge	r2,zero,101fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   101e0:	00101040 	call	10104 <alt_get_errno>
   101e4:	1007883a 	mov	r3,r2
   101e8:	e0bffc17 	ldw	r2,-16(fp)
   101ec:	0085c83a 	sub	r2,zero,r2
   101f0:	18800015 	stw	r2,0(r3)
        return -1;
   101f4:	00bfffc4 	movi	r2,-1
   101f8:	00000c06 	br	1022c <write+0xec>
      }
      return rval;
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	00000a06 	br	1022c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10204:	00101040 	call	10104 <alt_get_errno>
   10208:	1007883a 	mov	r3,r2
   1020c:	00800344 	movi	r2,13
   10210:	18800015 	stw	r2,0(r3)
   10214:	00000406 	br	10228 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10218:	00101040 	call	10104 <alt_get_errno>
   1021c:	1007883a 	mov	r3,r2
   10220:	00801444 	movi	r2,81
   10224:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10228:	00bfffc4 	movi	r2,-1
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

00010240 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10240:	defffd04 	addi	sp,sp,-12
   10244:	dfc00215 	stw	ra,8(sp)
   10248:	df000115 	stw	fp,4(sp)
   1024c:	df000104 	addi	fp,sp,4
   10250:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10254:	d1600a04 	addi	r5,gp,-32728
   10258:	e13fff17 	ldw	r4,-4(fp)
   1025c:	00111480 	call	11148 <alt_dev_llist_insert>
}
   10260:	e037883a 	mov	sp,fp
   10264:	dfc00117 	ldw	ra,4(sp)
   10268:	df000017 	ldw	fp,0(sp)
   1026c:	dec00204 	addi	sp,sp,8
   10270:	f800283a 	ret

00010274 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10274:	defffd04 	addi	sp,sp,-12
   10278:	dfc00215 	stw	ra,8(sp)
   1027c:	df000115 	stw	fp,4(sp)
   10280:	df000104 	addi	fp,sp,4
   10284:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   10288:	0011af40 	call	11af4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1028c:	00800044 	movi	r2,1
   10290:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102ac:	defffe04 	addi	sp,sp,-8
   102b0:	dfc00115 	stw	ra,4(sp)
   102b4:	df000015 	stw	fp,0(sp)
   102b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   102bc:	01c0fa04 	movi	r7,1000
   102c0:	01800044 	movi	r6,1
   102c4:	000b883a 	mov	r5,zero
   102c8:	01020034 	movhi	r4,2048
   102cc:	210c0004 	addi	r4,r4,12288
   102d0:	0010dec0 	call	10dec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   102d4:	000d883a 	mov	r6,zero
   102d8:	000b883a 	mov	r5,zero
   102dc:	01000074 	movhi	r4,1
   102e0:	210dd404 	addi	r4,r4,14160
   102e4:	00104700 	call	10470 <altera_avalon_jtag_uart_init>
   102e8:	01000074 	movhi	r4,1
   102ec:	210dca04 	addi	r4,r4,14120
   102f0:	00102400 	call	10240 <alt_dev_reg>
}
   102f4:	0001883a 	nop
   102f8:	e037883a 	mov	sp,fp
   102fc:	dfc00117 	ldw	ra,4(sp)
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1030c:	defffa04 	addi	sp,sp,-24
   10310:	dfc00515 	stw	ra,20(sp)
   10314:	df000415 	stw	fp,16(sp)
   10318:	df000404 	addi	fp,sp,16
   1031c:	e13ffd15 	stw	r4,-12(fp)
   10320:	e17ffe15 	stw	r5,-8(fp)
   10324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10328:	e0bffd17 	ldw	r2,-12(fp)
   1032c:	10800017 	ldw	r2,0(r2)
   10330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10334:	e0bffc17 	ldw	r2,-16(fp)
   10338:	10c00a04 	addi	r3,r2,40
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	10800217 	ldw	r2,8(r2)
   10344:	100f883a 	mov	r7,r2
   10348:	e1bfff17 	ldw	r6,-4(fp)
   1034c:	e17ffe17 	ldw	r5,-8(fp)
   10350:	1809883a 	mov	r4,r3
   10354:	00109340 	call	10934 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10358:	e037883a 	mov	sp,fp
   1035c:	dfc00117 	ldw	ra,4(sp)
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00204 	addi	sp,sp,8
   10368:	f800283a 	ret

0001036c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1036c:	defffa04 	addi	sp,sp,-24
   10370:	dfc00515 	stw	ra,20(sp)
   10374:	df000415 	stw	fp,16(sp)
   10378:	df000404 	addi	fp,sp,16
   1037c:	e13ffd15 	stw	r4,-12(fp)
   10380:	e17ffe15 	stw	r5,-8(fp)
   10384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	10800017 	ldw	r2,0(r2)
   10390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	10c00a04 	addi	r3,r2,40
   1039c:	e0bffd17 	ldw	r2,-12(fp)
   103a0:	10800217 	ldw	r2,8(r2)
   103a4:	100f883a 	mov	r7,r2
   103a8:	e1bfff17 	ldw	r6,-4(fp)
   103ac:	e17ffe17 	ldw	r5,-8(fp)
   103b0:	1809883a 	mov	r4,r3
   103b4:	0010b500 	call	10b50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   103b8:	e037883a 	mov	sp,fp
   103bc:	dfc00117 	ldw	ra,4(sp)
   103c0:	df000017 	ldw	fp,0(sp)
   103c4:	dec00204 	addi	sp,sp,8
   103c8:	f800283a 	ret

000103cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   103cc:	defffc04 	addi	sp,sp,-16
   103d0:	dfc00315 	stw	ra,12(sp)
   103d4:	df000215 	stw	fp,8(sp)
   103d8:	df000204 	addi	fp,sp,8
   103dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   103e0:	e0bfff17 	ldw	r2,-4(fp)
   103e4:	10800017 	ldw	r2,0(r2)
   103e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   103ec:	e0bffe17 	ldw	r2,-8(fp)
   103f0:	10c00a04 	addi	r3,r2,40
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	10800217 	ldw	r2,8(r2)
   103fc:	100b883a 	mov	r5,r2
   10400:	1809883a 	mov	r4,r3
   10404:	00107dc0 	call	107dc <altera_avalon_jtag_uart_close>
}
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1041c:	defffa04 	addi	sp,sp,-24
   10420:	dfc00515 	stw	ra,20(sp)
   10424:	df000415 	stw	fp,16(sp)
   10428:	df000404 	addi	fp,sp,16
   1042c:	e13ffd15 	stw	r4,-12(fp)
   10430:	e17ffe15 	stw	r5,-8(fp)
   10434:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10438:	e0bffd17 	ldw	r2,-12(fp)
   1043c:	10800017 	ldw	r2,0(r2)
   10440:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10444:	e0bffc17 	ldw	r2,-16(fp)
   10448:	10800a04 	addi	r2,r2,40
   1044c:	e1bfff17 	ldw	r6,-4(fp)
   10450:	e17ffe17 	ldw	r5,-8(fp)
   10454:	1009883a 	mov	r4,r2
   10458:	00108440 	call	10844 <altera_avalon_jtag_uart_ioctl>
}
   1045c:	e037883a 	mov	sp,fp
   10460:	dfc00117 	ldw	ra,4(sp)
   10464:	df000017 	ldw	fp,0(sp)
   10468:	dec00204 	addi	sp,sp,8
   1046c:	f800283a 	ret

00010470 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10470:	defffa04 	addi	sp,sp,-24
   10474:	dfc00515 	stw	ra,20(sp)
   10478:	df000415 	stw	fp,16(sp)
   1047c:	df000404 	addi	fp,sp,16
   10480:	e13ffd15 	stw	r4,-12(fp)
   10484:	e17ffe15 	stw	r5,-8(fp)
   10488:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1048c:	e0bffd17 	ldw	r2,-12(fp)
   10490:	00c00044 	movi	r3,1
   10494:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10498:	e0bffd17 	ldw	r2,-12(fp)
   1049c:	10800017 	ldw	r2,0(r2)
   104a0:	10800104 	addi	r2,r2,4
   104a4:	1007883a 	mov	r3,r2
   104a8:	e0bffd17 	ldw	r2,-12(fp)
   104ac:	10800817 	ldw	r2,32(r2)
   104b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	e0ffff17 	ldw	r3,-4(fp)
   104bc:	d8000015 	stw	zero,0(sp)
   104c0:	e1fffd17 	ldw	r7,-12(fp)
   104c4:	01800074 	movhi	r6,1
   104c8:	31814c04 	addi	r6,r6,1328
   104cc:	180b883a 	mov	r5,r3
   104d0:	1009883a 	mov	r4,r2
   104d4:	00112cc0 	call	112cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   104d8:	e0bffd17 	ldw	r2,-12(fp)
   104dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   104e0:	e0bffd17 	ldw	r2,-12(fp)
   104e4:	10800204 	addi	r2,r2,8
   104e8:	d0e6de17 	ldw	r3,-25736(gp)
   104ec:	e1fffd17 	ldw	r7,-12(fp)
   104f0:	01800074 	movhi	r6,1
   104f4:	3181cf04 	addi	r6,r6,1852
   104f8:	180b883a 	mov	r5,r3
   104fc:	1009883a 	mov	r4,r2
   10500:	0010e680 	call	10e68 <alt_alarm_start>
   10504:	1000040e 	bge	r2,zero,10518 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10508:	e0fffd17 	ldw	r3,-12(fp)
   1050c:	00a00034 	movhi	r2,32768
   10510:	10bfffc4 	addi	r2,r2,-1
   10514:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10518:	0001883a 	nop
   1051c:	e037883a 	mov	sp,fp
   10520:	dfc00117 	ldw	ra,4(sp)
   10524:	df000017 	ldw	fp,0(sp)
   10528:	dec00204 	addi	sp,sp,8
   1052c:	f800283a 	ret

00010530 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10530:	defff804 	addi	sp,sp,-32
   10534:	df000715 	stw	fp,28(sp)
   10538:	df000704 	addi	fp,sp,28
   1053c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10540:	e0bfff17 	ldw	r2,-4(fp)
   10544:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10548:	e0bffb17 	ldw	r2,-20(fp)
   1054c:	10800017 	ldw	r2,0(r2)
   10550:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10800104 	addi	r2,r2,4
   1055c:	10800037 	ldwio	r2,0(r2)
   10560:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10564:	e0bffd17 	ldw	r2,-12(fp)
   10568:	1080c00c 	andi	r2,r2,768
   1056c:	10006d26 	beq	r2,zero,10724 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10570:	e0bffd17 	ldw	r2,-12(fp)
   10574:	1080400c 	andi	r2,r2,256
   10578:	10003526 	beq	r2,zero,10650 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1057c:	00800074 	movhi	r2,1
   10580:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10584:	e0bffb17 	ldw	r2,-20(fp)
   10588:	10800a17 	ldw	r2,40(r2)
   1058c:	10800044 	addi	r2,r2,1
   10590:	1081ffcc 	andi	r2,r2,2047
   10594:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10598:	e0bffb17 	ldw	r2,-20(fp)
   1059c:	10c00b17 	ldw	r3,44(r2)
   105a0:	e0bffe17 	ldw	r2,-8(fp)
   105a4:	18801526 	beq	r3,r2,105fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   105a8:	e0bffc17 	ldw	r2,-16(fp)
   105ac:	10800037 	ldwio	r2,0(r2)
   105b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   105b4:	e0bff917 	ldw	r2,-28(fp)
   105b8:	10a0000c 	andi	r2,r2,32768
   105bc:	10001126 	beq	r2,zero,10604 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   105c0:	e0bffb17 	ldw	r2,-20(fp)
   105c4:	10800a17 	ldw	r2,40(r2)
   105c8:	e0fff917 	ldw	r3,-28(fp)
   105cc:	1809883a 	mov	r4,r3
   105d0:	e0fffb17 	ldw	r3,-20(fp)
   105d4:	1885883a 	add	r2,r3,r2
   105d8:	10800e04 	addi	r2,r2,56
   105dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105e0:	e0bffb17 	ldw	r2,-20(fp)
   105e4:	10800a17 	ldw	r2,40(r2)
   105e8:	10800044 	addi	r2,r2,1
   105ec:	10c1ffcc 	andi	r3,r2,2047
   105f0:	e0bffb17 	ldw	r2,-20(fp)
   105f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   105f8:	003fe206 	br	10584 <__alt_exception_stack_pointer+0xf8010584>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   105fc:	0001883a 	nop
   10600:	00000106 	br	10608 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10604:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10608:	e0bff917 	ldw	r2,-28(fp)
   1060c:	10bfffec 	andhi	r2,r2,65535
   10610:	10000f26 	beq	r2,zero,10650 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10614:	e0bffb17 	ldw	r2,-20(fp)
   10618:	10c00817 	ldw	r3,32(r2)
   1061c:	00bfff84 	movi	r2,-2
   10620:	1886703a 	and	r3,r3,r2
   10624:	e0bffb17 	ldw	r2,-20(fp)
   10628:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1062c:	e0bffc17 	ldw	r2,-16(fp)
   10630:	10800104 	addi	r2,r2,4
   10634:	1007883a 	mov	r3,r2
   10638:	e0bffb17 	ldw	r2,-20(fp)
   1063c:	10800817 	ldw	r2,32(r2)
   10640:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10644:	e0bffc17 	ldw	r2,-16(fp)
   10648:	10800104 	addi	r2,r2,4
   1064c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10650:	e0bffd17 	ldw	r2,-12(fp)
   10654:	1080800c 	andi	r2,r2,512
   10658:	103fbe26 	beq	r2,zero,10554 <__alt_exception_stack_pointer+0xf8010554>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1065c:	e0bffd17 	ldw	r2,-12(fp)
   10660:	1004d43a 	srli	r2,r2,16
   10664:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10668:	00001406 	br	106bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1066c:	e0bffc17 	ldw	r2,-16(fp)
   10670:	e0fffb17 	ldw	r3,-20(fp)
   10674:	18c00d17 	ldw	r3,52(r3)
   10678:	e13ffb17 	ldw	r4,-20(fp)
   1067c:	20c7883a 	add	r3,r4,r3
   10680:	18c20e04 	addi	r3,r3,2104
   10684:	18c00003 	ldbu	r3,0(r3)
   10688:	18c03fcc 	andi	r3,r3,255
   1068c:	18c0201c 	xori	r3,r3,128
   10690:	18ffe004 	addi	r3,r3,-128
   10694:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10698:	e0bffb17 	ldw	r2,-20(fp)
   1069c:	10800d17 	ldw	r2,52(r2)
   106a0:	10800044 	addi	r2,r2,1
   106a4:	10c1ffcc 	andi	r3,r2,2047
   106a8:	e0bffb17 	ldw	r2,-20(fp)
   106ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   106b0:	e0bffa17 	ldw	r2,-24(fp)
   106b4:	10bfffc4 	addi	r2,r2,-1
   106b8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   106bc:	e0bffa17 	ldw	r2,-24(fp)
   106c0:	10000526 	beq	r2,zero,106d8 <altera_avalon_jtag_uart_irq+0x1a8>
   106c4:	e0bffb17 	ldw	r2,-20(fp)
   106c8:	10c00d17 	ldw	r3,52(r2)
   106cc:	e0bffb17 	ldw	r2,-20(fp)
   106d0:	10800c17 	ldw	r2,48(r2)
   106d4:	18bfe51e 	bne	r3,r2,1066c <__alt_exception_stack_pointer+0xf801066c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   106d8:	e0bffa17 	ldw	r2,-24(fp)
   106dc:	103f9d26 	beq	r2,zero,10554 <__alt_exception_stack_pointer+0xf8010554>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106e0:	e0bffb17 	ldw	r2,-20(fp)
   106e4:	10c00817 	ldw	r3,32(r2)
   106e8:	00bfff44 	movi	r2,-3
   106ec:	1886703a 	and	r3,r3,r2
   106f0:	e0bffb17 	ldw	r2,-20(fp)
   106f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106f8:	e0bffb17 	ldw	r2,-20(fp)
   106fc:	10800017 	ldw	r2,0(r2)
   10700:	10800104 	addi	r2,r2,4
   10704:	1007883a 	mov	r3,r2
   10708:	e0bffb17 	ldw	r2,-20(fp)
   1070c:	10800817 	ldw	r2,32(r2)
   10710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10714:	e0bffc17 	ldw	r2,-16(fp)
   10718:	10800104 	addi	r2,r2,4
   1071c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10720:	003f8c06 	br	10554 <__alt_exception_stack_pointer+0xf8010554>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10724:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10728:	0001883a 	nop
   1072c:	e037883a 	mov	sp,fp
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00104 	addi	sp,sp,4
   10738:	f800283a 	ret

0001073c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1073c:	defff804 	addi	sp,sp,-32
   10740:	df000715 	stw	fp,28(sp)
   10744:	df000704 	addi	fp,sp,28
   10748:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1074c:	e0bffb17 	ldw	r2,-20(fp)
   10750:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10754:	e0bff917 	ldw	r2,-28(fp)
   10758:	10800017 	ldw	r2,0(r2)
   1075c:	10800104 	addi	r2,r2,4
   10760:	10800037 	ldwio	r2,0(r2)
   10764:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10768:	e0bffa17 	ldw	r2,-24(fp)
   1076c:	1081000c 	andi	r2,r2,1024
   10770:	10000b26 	beq	r2,zero,107a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10774:	e0bff917 	ldw	r2,-28(fp)
   10778:	10800017 	ldw	r2,0(r2)
   1077c:	10800104 	addi	r2,r2,4
   10780:	1007883a 	mov	r3,r2
   10784:	e0bff917 	ldw	r2,-28(fp)
   10788:	10800817 	ldw	r2,32(r2)
   1078c:	10810014 	ori	r2,r2,1024
   10790:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10794:	e0bff917 	ldw	r2,-28(fp)
   10798:	10000915 	stw	zero,36(r2)
   1079c:	00000a06 	br	107c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   107a0:	e0bff917 	ldw	r2,-28(fp)
   107a4:	10c00917 	ldw	r3,36(r2)
   107a8:	00a00034 	movhi	r2,32768
   107ac:	10bfff04 	addi	r2,r2,-4
   107b0:	10c00536 	bltu	r2,r3,107c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   107b4:	e0bff917 	ldw	r2,-28(fp)
   107b8:	10800917 	ldw	r2,36(r2)
   107bc:	10c00044 	addi	r3,r2,1
   107c0:	e0bff917 	ldw	r2,-28(fp)
   107c4:	10c00915 	stw	r3,36(r2)
   107c8:	d0a6de17 	ldw	r2,-25736(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   107cc:	e037883a 	mov	sp,fp
   107d0:	df000017 	ldw	fp,0(sp)
   107d4:	dec00104 	addi	sp,sp,4
   107d8:	f800283a 	ret

000107dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   107dc:	defffd04 	addi	sp,sp,-12
   107e0:	df000215 	stw	fp,8(sp)
   107e4:	df000204 	addi	fp,sp,8
   107e8:	e13ffe15 	stw	r4,-8(fp)
   107ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   107f0:	00000506 	br	10808 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	1090000c 	andi	r2,r2,16384
   107fc:	10000226 	beq	r2,zero,10808 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10800:	00bffd44 	movi	r2,-11
   10804:	00000b06 	br	10834 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10808:	e0bffe17 	ldw	r2,-8(fp)
   1080c:	10c00d17 	ldw	r3,52(r2)
   10810:	e0bffe17 	ldw	r2,-8(fp)
   10814:	10800c17 	ldw	r2,48(r2)
   10818:	18800526 	beq	r3,r2,10830 <altera_avalon_jtag_uart_close+0x54>
   1081c:	e0bffe17 	ldw	r2,-8(fp)
   10820:	10c00917 	ldw	r3,36(r2)
   10824:	e0bffe17 	ldw	r2,-8(fp)
   10828:	10800117 	ldw	r2,4(r2)
   1082c:	18bff136 	bltu	r3,r2,107f4 <__alt_exception_stack_pointer+0xf80107f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10830:	0005883a 	mov	r2,zero
}
   10834:	e037883a 	mov	sp,fp
   10838:	df000017 	ldw	fp,0(sp)
   1083c:	dec00104 	addi	sp,sp,4
   10840:	f800283a 	ret

00010844 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10844:	defffa04 	addi	sp,sp,-24
   10848:	df000515 	stw	fp,20(sp)
   1084c:	df000504 	addi	fp,sp,20
   10850:	e13ffd15 	stw	r4,-12(fp)
   10854:	e17ffe15 	stw	r5,-8(fp)
   10858:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1085c:	00bff9c4 	movi	r2,-25
   10860:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10864:	e0bffe17 	ldw	r2,-8(fp)
   10868:	10da8060 	cmpeqi	r3,r2,27137
   1086c:	1800031e 	bne	r3,zero,1087c <altera_avalon_jtag_uart_ioctl+0x38>
   10870:	109a80a0 	cmpeqi	r2,r2,27138
   10874:	1000181e 	bne	r2,zero,108d8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10878:	00002906 	br	10920 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	10c00117 	ldw	r3,4(r2)
   10884:	00a00034 	movhi	r2,32768
   10888:	10bfffc4 	addi	r2,r2,-1
   1088c:	18802126 	beq	r3,r2,10914 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10890:	e0bfff17 	ldw	r2,-4(fp)
   10894:	10800017 	ldw	r2,0(r2)
   10898:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1089c:	e0bffc17 	ldw	r2,-16(fp)
   108a0:	10800090 	cmplti	r2,r2,2
   108a4:	1000061e 	bne	r2,zero,108c0 <altera_avalon_jtag_uart_ioctl+0x7c>
   108a8:	e0fffc17 	ldw	r3,-16(fp)
   108ac:	00a00034 	movhi	r2,32768
   108b0:	10bfffc4 	addi	r2,r2,-1
   108b4:	18800226 	beq	r3,r2,108c0 <altera_avalon_jtag_uart_ioctl+0x7c>
   108b8:	e0bffc17 	ldw	r2,-16(fp)
   108bc:	00000206 	br	108c8 <altera_avalon_jtag_uart_ioctl+0x84>
   108c0:	00a00034 	movhi	r2,32768
   108c4:	10bfff84 	addi	r2,r2,-2
   108c8:	e0fffd17 	ldw	r3,-12(fp)
   108cc:	18800115 	stw	r2,4(r3)
      rc = 0;
   108d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   108d4:	00000f06 	br	10914 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   108d8:	e0bffd17 	ldw	r2,-12(fp)
   108dc:	10c00117 	ldw	r3,4(r2)
   108e0:	00a00034 	movhi	r2,32768
   108e4:	10bfffc4 	addi	r2,r2,-1
   108e8:	18800c26 	beq	r3,r2,1091c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   108ec:	e0bffd17 	ldw	r2,-12(fp)
   108f0:	10c00917 	ldw	r3,36(r2)
   108f4:	e0bffd17 	ldw	r2,-12(fp)
   108f8:	10800117 	ldw	r2,4(r2)
   108fc:	1885803a 	cmpltu	r2,r3,r2
   10900:	10c03fcc 	andi	r3,r2,255
   10904:	e0bfff17 	ldw	r2,-4(fp)
   10908:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1090c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10910:	00000206 	br	1091c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10914:	0001883a 	nop
   10918:	00000106 	br	10920 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1091c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10920:	e0bffb17 	ldw	r2,-20(fp)
}
   10924:	e037883a 	mov	sp,fp
   10928:	df000017 	ldw	fp,0(sp)
   1092c:	dec00104 	addi	sp,sp,4
   10930:	f800283a 	ret

00010934 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10934:	defff304 	addi	sp,sp,-52
   10938:	dfc00c15 	stw	ra,48(sp)
   1093c:	df000b15 	stw	fp,44(sp)
   10940:	df000b04 	addi	fp,sp,44
   10944:	e13ffc15 	stw	r4,-16(fp)
   10948:	e17ffd15 	stw	r5,-12(fp)
   1094c:	e1bffe15 	stw	r6,-8(fp)
   10950:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10954:	e0bffd17 	ldw	r2,-12(fp)
   10958:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1095c:	00004706 	br	10a7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10960:	e0bffc17 	ldw	r2,-16(fp)
   10964:	10800a17 	ldw	r2,40(r2)
   10968:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1096c:	e0bffc17 	ldw	r2,-16(fp)
   10970:	10800b17 	ldw	r2,44(r2)
   10974:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10978:	e0fff717 	ldw	r3,-36(fp)
   1097c:	e0bff817 	ldw	r2,-32(fp)
   10980:	18800536 	bltu	r3,r2,10998 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10984:	e0fff717 	ldw	r3,-36(fp)
   10988:	e0bff817 	ldw	r2,-32(fp)
   1098c:	1885c83a 	sub	r2,r3,r2
   10990:	e0bff615 	stw	r2,-40(fp)
   10994:	00000406 	br	109a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10998:	00c20004 	movi	r3,2048
   1099c:	e0bff817 	ldw	r2,-32(fp)
   109a0:	1885c83a 	sub	r2,r3,r2
   109a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   109a8:	e0bff617 	ldw	r2,-40(fp)
   109ac:	10001e26 	beq	r2,zero,10a28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   109b0:	e0fffe17 	ldw	r3,-8(fp)
   109b4:	e0bff617 	ldw	r2,-40(fp)
   109b8:	1880022e 	bgeu	r3,r2,109c4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   109bc:	e0bffe17 	ldw	r2,-8(fp)
   109c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   109c4:	e0bffc17 	ldw	r2,-16(fp)
   109c8:	10c00e04 	addi	r3,r2,56
   109cc:	e0bff817 	ldw	r2,-32(fp)
   109d0:	1885883a 	add	r2,r3,r2
   109d4:	e1bff617 	ldw	r6,-40(fp)
   109d8:	100b883a 	mov	r5,r2
   109dc:	e13ff517 	ldw	r4,-44(fp)
   109e0:	00084d00 	call	84d0 <memcpy>
      ptr   += n;
   109e4:	e0fff517 	ldw	r3,-44(fp)
   109e8:	e0bff617 	ldw	r2,-40(fp)
   109ec:	1885883a 	add	r2,r3,r2
   109f0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   109f4:	e0fffe17 	ldw	r3,-8(fp)
   109f8:	e0bff617 	ldw	r2,-40(fp)
   109fc:	1885c83a 	sub	r2,r3,r2
   10a00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a04:	e0fff817 	ldw	r3,-32(fp)
   10a08:	e0bff617 	ldw	r2,-40(fp)
   10a0c:	1885883a 	add	r2,r3,r2
   10a10:	10c1ffcc 	andi	r3,r2,2047
   10a14:	e0bffc17 	ldw	r2,-16(fp)
   10a18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10a1c:	e0bffe17 	ldw	r2,-8(fp)
   10a20:	00bfcf16 	blt	zero,r2,10960 <__alt_exception_stack_pointer+0xf8010960>
   10a24:	00000106 	br	10a2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10a28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10a2c:	e0fff517 	ldw	r3,-44(fp)
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	1880141e 	bne	r3,r2,10a88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10a38:	e0bfff17 	ldw	r2,-4(fp)
   10a3c:	1090000c 	andi	r2,r2,16384
   10a40:	1000131e 	bne	r2,zero,10a90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10a44:	0001883a 	nop
   10a48:	e0bffc17 	ldw	r2,-16(fp)
   10a4c:	10c00a17 	ldw	r3,40(r2)
   10a50:	e0bff717 	ldw	r2,-36(fp)
   10a54:	1880051e 	bne	r3,r2,10a6c <altera_avalon_jtag_uart_read+0x138>
   10a58:	e0bffc17 	ldw	r2,-16(fp)
   10a5c:	10c00917 	ldw	r3,36(r2)
   10a60:	e0bffc17 	ldw	r2,-16(fp)
   10a64:	10800117 	ldw	r2,4(r2)
   10a68:	18bff736 	bltu	r3,r2,10a48 <__alt_exception_stack_pointer+0xf8010a48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10c00a17 	ldw	r3,40(r2)
   10a74:	e0bff717 	ldw	r2,-36(fp)
   10a78:	18800726 	beq	r3,r2,10a98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10a7c:	e0bffe17 	ldw	r2,-8(fp)
   10a80:	00bfb716 	blt	zero,r2,10960 <__alt_exception_stack_pointer+0xf8010960>
   10a84:	00000506 	br	10a9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10a88:	0001883a 	nop
   10a8c:	00000306 	br	10a9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10a90:	0001883a 	nop
   10a94:	00000106 	br	10a9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10a98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10a9c:	e0fff517 	ldw	r3,-44(fp)
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	18801826 	beq	r3,r2,10b08 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10aa8:	0005303a 	rdctl	r2,status
   10aac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ab0:	e0fffb17 	ldw	r3,-20(fp)
   10ab4:	00bfff84 	movi	r2,-2
   10ab8:	1884703a 	and	r2,r3,r2
   10abc:	1001703a 	wrctl	status,r2
  
  return context;
   10ac0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10ac4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ac8:	e0bffc17 	ldw	r2,-16(fp)
   10acc:	10800817 	ldw	r2,32(r2)
   10ad0:	10c00054 	ori	r3,r2,1
   10ad4:	e0bffc17 	ldw	r2,-16(fp)
   10ad8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10adc:	e0bffc17 	ldw	r2,-16(fp)
   10ae0:	10800017 	ldw	r2,0(r2)
   10ae4:	10800104 	addi	r2,r2,4
   10ae8:	1007883a 	mov	r3,r2
   10aec:	e0bffc17 	ldw	r2,-16(fp)
   10af0:	10800817 	ldw	r2,32(r2)
   10af4:	18800035 	stwio	r2,0(r3)
   10af8:	e0bffa17 	ldw	r2,-24(fp)
   10afc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b00:	e0bff917 	ldw	r2,-28(fp)
   10b04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10b08:	e0fff517 	ldw	r3,-44(fp)
   10b0c:	e0bffd17 	ldw	r2,-12(fp)
   10b10:	18800426 	beq	r3,r2,10b24 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10b14:	e0fff517 	ldw	r3,-44(fp)
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	1885c83a 	sub	r2,r3,r2
   10b20:	00000606 	br	10b3c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10b24:	e0bfff17 	ldw	r2,-4(fp)
   10b28:	1090000c 	andi	r2,r2,16384
   10b2c:	10000226 	beq	r2,zero,10b38 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10b30:	00bffd44 	movi	r2,-11
   10b34:	00000106 	br	10b3c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10b38:	00bffec4 	movi	r2,-5
}
   10b3c:	e037883a 	mov	sp,fp
   10b40:	dfc00117 	ldw	ra,4(sp)
   10b44:	df000017 	ldw	fp,0(sp)
   10b48:	dec00204 	addi	sp,sp,8
   10b4c:	f800283a 	ret

00010b50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10b50:	defff304 	addi	sp,sp,-52
   10b54:	dfc00c15 	stw	ra,48(sp)
   10b58:	df000b15 	stw	fp,44(sp)
   10b5c:	df000b04 	addi	fp,sp,44
   10b60:	e13ffc15 	stw	r4,-16(fp)
   10b64:	e17ffd15 	stw	r5,-12(fp)
   10b68:	e1bffe15 	stw	r6,-8(fp)
   10b6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10b70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10b7c:	00003706 	br	10c5c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10b80:	e0bffc17 	ldw	r2,-16(fp)
   10b84:	10800c17 	ldw	r2,48(r2)
   10b88:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10b8c:	e0bffc17 	ldw	r2,-16(fp)
   10b90:	10800d17 	ldw	r2,52(r2)
   10b94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10b98:	e0fff917 	ldw	r3,-28(fp)
   10b9c:	e0bff517 	ldw	r2,-44(fp)
   10ba0:	1880062e 	bgeu	r3,r2,10bbc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10ba4:	e0fff517 	ldw	r3,-44(fp)
   10ba8:	e0bff917 	ldw	r2,-28(fp)
   10bac:	1885c83a 	sub	r2,r3,r2
   10bb0:	10bfffc4 	addi	r2,r2,-1
   10bb4:	e0bff615 	stw	r2,-40(fp)
   10bb8:	00000b06 	br	10be8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10bbc:	e0bff517 	ldw	r2,-44(fp)
   10bc0:	10000526 	beq	r2,zero,10bd8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10bc4:	00c20004 	movi	r3,2048
   10bc8:	e0bff917 	ldw	r2,-28(fp)
   10bcc:	1885c83a 	sub	r2,r3,r2
   10bd0:	e0bff615 	stw	r2,-40(fp)
   10bd4:	00000406 	br	10be8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10bd8:	00c1ffc4 	movi	r3,2047
   10bdc:	e0bff917 	ldw	r2,-28(fp)
   10be0:	1885c83a 	sub	r2,r3,r2
   10be4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10be8:	e0bff617 	ldw	r2,-40(fp)
   10bec:	10001e26 	beq	r2,zero,10c68 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10bf0:	e0fffe17 	ldw	r3,-8(fp)
   10bf4:	e0bff617 	ldw	r2,-40(fp)
   10bf8:	1880022e 	bgeu	r3,r2,10c04 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10bfc:	e0bffe17 	ldw	r2,-8(fp)
   10c00:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10c04:	e0bffc17 	ldw	r2,-16(fp)
   10c08:	10c20e04 	addi	r3,r2,2104
   10c0c:	e0bff917 	ldw	r2,-28(fp)
   10c10:	1885883a 	add	r2,r3,r2
   10c14:	e1bff617 	ldw	r6,-40(fp)
   10c18:	e17ffd17 	ldw	r5,-12(fp)
   10c1c:	1009883a 	mov	r4,r2
   10c20:	00084d00 	call	84d0 <memcpy>
      ptr   += n;
   10c24:	e0fffd17 	ldw	r3,-12(fp)
   10c28:	e0bff617 	ldw	r2,-40(fp)
   10c2c:	1885883a 	add	r2,r3,r2
   10c30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10c34:	e0fffe17 	ldw	r3,-8(fp)
   10c38:	e0bff617 	ldw	r2,-40(fp)
   10c3c:	1885c83a 	sub	r2,r3,r2
   10c40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c44:	e0fff917 	ldw	r3,-28(fp)
   10c48:	e0bff617 	ldw	r2,-40(fp)
   10c4c:	1885883a 	add	r2,r3,r2
   10c50:	10c1ffcc 	andi	r3,r2,2047
   10c54:	e0bffc17 	ldw	r2,-16(fp)
   10c58:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10c5c:	e0bffe17 	ldw	r2,-8(fp)
   10c60:	00bfc716 	blt	zero,r2,10b80 <__alt_exception_stack_pointer+0xf8010b80>
   10c64:	00000106 	br	10c6c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10c68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c6c:	0005303a 	rdctl	r2,status
   10c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c74:	e0fffb17 	ldw	r3,-20(fp)
   10c78:	00bfff84 	movi	r2,-2
   10c7c:	1884703a 	and	r2,r3,r2
   10c80:	1001703a 	wrctl	status,r2
  
  return context;
   10c84:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10c88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10c8c:	e0bffc17 	ldw	r2,-16(fp)
   10c90:	10800817 	ldw	r2,32(r2)
   10c94:	10c00094 	ori	r3,r2,2
   10c98:	e0bffc17 	ldw	r2,-16(fp)
   10c9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ca0:	e0bffc17 	ldw	r2,-16(fp)
   10ca4:	10800017 	ldw	r2,0(r2)
   10ca8:	10800104 	addi	r2,r2,4
   10cac:	1007883a 	mov	r3,r2
   10cb0:	e0bffc17 	ldw	r2,-16(fp)
   10cb4:	10800817 	ldw	r2,32(r2)
   10cb8:	18800035 	stwio	r2,0(r3)
   10cbc:	e0bffa17 	ldw	r2,-24(fp)
   10cc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cc4:	e0bff817 	ldw	r2,-32(fp)
   10cc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10ccc:	e0bffe17 	ldw	r2,-8(fp)
   10cd0:	0080100e 	bge	zero,r2,10d14 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10cd4:	e0bfff17 	ldw	r2,-4(fp)
   10cd8:	1090000c 	andi	r2,r2,16384
   10cdc:	1000101e 	bne	r2,zero,10d20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10ce0:	0001883a 	nop
   10ce4:	e0bffc17 	ldw	r2,-16(fp)
   10ce8:	10c00d17 	ldw	r3,52(r2)
   10cec:	e0bff517 	ldw	r2,-44(fp)
   10cf0:	1880051e 	bne	r3,r2,10d08 <altera_avalon_jtag_uart_write+0x1b8>
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	10c00917 	ldw	r3,36(r2)
   10cfc:	e0bffc17 	ldw	r2,-16(fp)
   10d00:	10800117 	ldw	r2,4(r2)
   10d04:	18bff736 	bltu	r3,r2,10ce4 <__alt_exception_stack_pointer+0xf8010ce4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	10800917 	ldw	r2,36(r2)
   10d10:	1000051e 	bne	r2,zero,10d28 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10d14:	e0bffe17 	ldw	r2,-8(fp)
   10d18:	00bfd016 	blt	zero,r2,10c5c <__alt_exception_stack_pointer+0xf8010c5c>
   10d1c:	00000306 	br	10d2c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10d20:	0001883a 	nop
   10d24:	00000106 	br	10d2c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10d28:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10d2c:	e0fffd17 	ldw	r3,-12(fp)
   10d30:	e0bff717 	ldw	r2,-36(fp)
   10d34:	18800426 	beq	r3,r2,10d48 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10d38:	e0fffd17 	ldw	r3,-12(fp)
   10d3c:	e0bff717 	ldw	r2,-36(fp)
   10d40:	1885c83a 	sub	r2,r3,r2
   10d44:	00000606 	br	10d60 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10d48:	e0bfff17 	ldw	r2,-4(fp)
   10d4c:	1090000c 	andi	r2,r2,16384
   10d50:	10000226 	beq	r2,zero,10d5c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10d54:	00bffd44 	movi	r2,-11
   10d58:	00000106 	br	10d60 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10d5c:	00bffec4 	movi	r2,-5
}
   10d60:	e037883a 	mov	sp,fp
   10d64:	dfc00117 	ldw	ra,4(sp)
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00204 	addi	sp,sp,8
   10d70:	f800283a 	ret

00010d74 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10d74:	defffa04 	addi	sp,sp,-24
   10d78:	dfc00515 	stw	ra,20(sp)
   10d7c:	df000415 	stw	fp,16(sp)
   10d80:	df000404 	addi	fp,sp,16
   10d84:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10d88:	0007883a 	mov	r3,zero
   10d8c:	e0bfff17 	ldw	r2,-4(fp)
   10d90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10d94:	e0bfff17 	ldw	r2,-4(fp)
   10d98:	10800104 	addi	r2,r2,4
   10d9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10da0:	0005303a 	rdctl	r2,status
   10da4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10da8:	e0fffd17 	ldw	r3,-12(fp)
   10dac:	00bfff84 	movi	r2,-2
   10db0:	1884703a 	and	r2,r3,r2
   10db4:	1001703a 	wrctl	status,r2
  
  return context;
   10db8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10dbc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10dc0:	00119ec0 	call	119ec <alt_tick>
   10dc4:	e0bffc17 	ldw	r2,-16(fp)
   10dc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10dd4:	0001883a 	nop
   10dd8:	e037883a 	mov	sp,fp
   10ddc:	dfc00117 	ldw	ra,4(sp)
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00204 	addi	sp,sp,8
   10de8:	f800283a 	ret

00010dec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10dec:	defff804 	addi	sp,sp,-32
   10df0:	dfc00715 	stw	ra,28(sp)
   10df4:	df000615 	stw	fp,24(sp)
   10df8:	df000604 	addi	fp,sp,24
   10dfc:	e13ffc15 	stw	r4,-16(fp)
   10e00:	e17ffd15 	stw	r5,-12(fp)
   10e04:	e1bffe15 	stw	r6,-8(fp)
   10e08:	e1ffff15 	stw	r7,-4(fp)
   10e0c:	e0bfff17 	ldw	r2,-4(fp)
   10e10:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10e14:	d0a6de17 	ldw	r2,-25736(gp)
   10e18:	1000021e 	bne	r2,zero,10e24 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10e1c:	e0bffb17 	ldw	r2,-20(fp)
   10e20:	d0a6de15 	stw	r2,-25736(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	10800104 	addi	r2,r2,4
   10e2c:	00c001c4 	movi	r3,7
   10e30:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10e34:	d8000015 	stw	zero,0(sp)
   10e38:	e1fffc17 	ldw	r7,-16(fp)
   10e3c:	01800074 	movhi	r6,1
   10e40:	31835d04 	addi	r6,r6,3444
   10e44:	e17ffe17 	ldw	r5,-8(fp)
   10e48:	e13ffd17 	ldw	r4,-12(fp)
   10e4c:	00112cc0 	call	112cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10e50:	0001883a 	nop
   10e54:	e037883a 	mov	sp,fp
   10e58:	dfc00117 	ldw	ra,4(sp)
   10e5c:	df000017 	ldw	fp,0(sp)
   10e60:	dec00204 	addi	sp,sp,8
   10e64:	f800283a 	ret

00010e68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10e68:	defff504 	addi	sp,sp,-44
   10e6c:	df000a15 	stw	fp,40(sp)
   10e70:	df000a04 	addi	fp,sp,40
   10e74:	e13ffc15 	stw	r4,-16(fp)
   10e78:	e17ffd15 	stw	r5,-12(fp)
   10e7c:	e1bffe15 	stw	r6,-8(fp)
   10e80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10e84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e88:	d0a6de17 	ldw	r2,-25736(gp)
  
  if (alt_ticks_per_second ())
   10e8c:	10003c26 	beq	r2,zero,10f80 <alt_alarm_start+0x118>
  {
    if (alarm)
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	10003826 	beq	r2,zero,10f78 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	e0fffe17 	ldw	r3,-8(fp)
   10ea0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	e0ffff17 	ldw	r3,-4(fp)
   10eac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10eb0:	0005303a 	rdctl	r2,status
   10eb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10eb8:	e0fff917 	ldw	r3,-28(fp)
   10ebc:	00bfff84 	movi	r2,-2
   10ec0:	1884703a 	and	r2,r3,r2
   10ec4:	1001703a 	wrctl	status,r2
  
  return context;
   10ec8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10ecc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10ed0:	d0a6df17 	ldw	r2,-25732(gp)
      
      current_nticks = alt_nticks();
   10ed4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10ed8:	e0fffd17 	ldw	r3,-12(fp)
   10edc:	e0bff617 	ldw	r2,-40(fp)
   10ee0:	1885883a 	add	r2,r3,r2
   10ee4:	10c00044 	addi	r3,r2,1
   10ee8:	e0bffc17 	ldw	r2,-16(fp)
   10eec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10ef0:	e0bffc17 	ldw	r2,-16(fp)
   10ef4:	10c00217 	ldw	r3,8(r2)
   10ef8:	e0bff617 	ldw	r2,-40(fp)
   10efc:	1880042e 	bgeu	r3,r2,10f10 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10f00:	e0bffc17 	ldw	r2,-16(fp)
   10f04:	00c00044 	movi	r3,1
   10f08:	10c00405 	stb	r3,16(r2)
   10f0c:	00000206 	br	10f18 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10f10:	e0bffc17 	ldw	r2,-16(fp)
   10f14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10f18:	e0bffc17 	ldw	r2,-16(fp)
   10f1c:	d0e00f04 	addi	r3,gp,-32708
   10f20:	e0fffa15 	stw	r3,-24(fp)
   10f24:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f28:	e0bffb17 	ldw	r2,-20(fp)
   10f2c:	e0fffa17 	ldw	r3,-24(fp)
   10f30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10f34:	e0bffa17 	ldw	r2,-24(fp)
   10f38:	10c00017 	ldw	r3,0(r2)
   10f3c:	e0bffb17 	ldw	r2,-20(fp)
   10f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f44:	e0bffa17 	ldw	r2,-24(fp)
   10f48:	10800017 	ldw	r2,0(r2)
   10f4c:	e0fffb17 	ldw	r3,-20(fp)
   10f50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10f54:	e0bffa17 	ldw	r2,-24(fp)
   10f58:	e0fffb17 	ldw	r3,-20(fp)
   10f5c:	10c00015 	stw	r3,0(r2)
   10f60:	e0bff817 	ldw	r2,-32(fp)
   10f64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f68:	e0bff717 	ldw	r2,-36(fp)
   10f6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10f70:	0005883a 	mov	r2,zero
   10f74:	00000306 	br	10f84 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10f78:	00bffa84 	movi	r2,-22
   10f7c:	00000106 	br	10f84 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10f80:	00bfde84 	movi	r2,-134
  }
}
   10f84:	e037883a 	mov	sp,fp
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00104 	addi	sp,sp,4
   10f90:	f800283a 	ret

00010f94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10f94:	defffa04 	addi	sp,sp,-24
   10f98:	dfc00515 	stw	ra,20(sp)
   10f9c:	df000415 	stw	fp,16(sp)
   10fa0:	df000404 	addi	fp,sp,16
   10fa4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10fa8:	00800244 	movi	r2,9
   10fac:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10fb0:	014003f4 	movhi	r5,15
   10fb4:	29509004 	addi	r5,r5,16960
   10fb8:	e13ffd17 	ldw	r4,-12(fp)
   10fbc:	000cefc0 	call	cefc <__mulsi3>
   10fc0:	100b883a 	mov	r5,r2
   10fc4:	0100bef4 	movhi	r4,763
   10fc8:	213c2004 	addi	r4,r4,-3968
   10fcc:	000ce400 	call	ce40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10fd0:	100b883a 	mov	r5,r2
   10fd4:	01200034 	movhi	r4,32768
   10fd8:	213fffc4 	addi	r4,r4,-1
   10fdc:	000ce400 	call	ce40 <__udivsi3>
   10fe0:	100b883a 	mov	r5,r2
   10fe4:	e13fff17 	ldw	r4,-4(fp)
   10fe8:	000ce400 	call	ce40 <__udivsi3>
   10fec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10ff0:	e0bffe17 	ldw	r2,-8(fp)
   10ff4:	10002a26 	beq	r2,zero,110a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10ff8:	e03ffc15 	stw	zero,-16(fp)
   10ffc:	00001706 	br	1105c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11000:	00a00034 	movhi	r2,32768
   11004:	10bfffc4 	addi	r2,r2,-1
   11008:	10bfffc4 	addi	r2,r2,-1
   1100c:	103ffe1e 	bne	r2,zero,11008 <__alt_exception_stack_pointer+0xf8011008>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11010:	014003f4 	movhi	r5,15
   11014:	29509004 	addi	r5,r5,16960
   11018:	e13ffd17 	ldw	r4,-12(fp)
   1101c:	000cefc0 	call	cefc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11020:	100b883a 	mov	r5,r2
   11024:	0100bef4 	movhi	r4,763
   11028:	213c2004 	addi	r4,r4,-3968
   1102c:	000ce400 	call	ce40 <__udivsi3>
   11030:	100b883a 	mov	r5,r2
   11034:	01200034 	movhi	r4,32768
   11038:	213fffc4 	addi	r4,r4,-1
   1103c:	000ce400 	call	ce40 <__udivsi3>
   11040:	1007883a 	mov	r3,r2
   11044:	e0bfff17 	ldw	r2,-4(fp)
   11048:	10c5c83a 	sub	r2,r2,r3
   1104c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11050:	e0bffc17 	ldw	r2,-16(fp)
   11054:	10800044 	addi	r2,r2,1
   11058:	e0bffc15 	stw	r2,-16(fp)
   1105c:	e0fffc17 	ldw	r3,-16(fp)
   11060:	e0bffe17 	ldw	r2,-8(fp)
   11064:	18bfe616 	blt	r3,r2,11000 <__alt_exception_stack_pointer+0xf8011000>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11068:	014003f4 	movhi	r5,15
   1106c:	29509004 	addi	r5,r5,16960
   11070:	e13ffd17 	ldw	r4,-12(fp)
   11074:	000cefc0 	call	cefc <__mulsi3>
   11078:	100b883a 	mov	r5,r2
   1107c:	0100bef4 	movhi	r4,763
   11080:	213c2004 	addi	r4,r4,-3968
   11084:	000ce400 	call	ce40 <__udivsi3>
   11088:	e17fff17 	ldw	r5,-4(fp)
   1108c:	1009883a 	mov	r4,r2
   11090:	000cefc0 	call	cefc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11094:	10bfffc4 	addi	r2,r2,-1
   11098:	103ffe1e 	bne	r2,zero,11094 <__alt_exception_stack_pointer+0xf8011094>
   1109c:	00000d06 	br	110d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   110a0:	014003f4 	movhi	r5,15
   110a4:	29509004 	addi	r5,r5,16960
   110a8:	e13ffd17 	ldw	r4,-12(fp)
   110ac:	000cefc0 	call	cefc <__mulsi3>
   110b0:	100b883a 	mov	r5,r2
   110b4:	0100bef4 	movhi	r4,763
   110b8:	213c2004 	addi	r4,r4,-3968
   110bc:	000ce400 	call	ce40 <__udivsi3>
   110c0:	e17fff17 	ldw	r5,-4(fp)
   110c4:	1009883a 	mov	r4,r2
   110c8:	000cefc0 	call	cefc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   110cc:	10bfffc4 	addi	r2,r2,-1
   110d0:	00bffe16 	blt	zero,r2,110cc <__alt_exception_stack_pointer+0xf80110cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   110d4:	0005883a 	mov	r2,zero
}
   110d8:	e037883a 	mov	sp,fp
   110dc:	dfc00117 	ldw	ra,4(sp)
   110e0:	df000017 	ldw	fp,0(sp)
   110e4:	dec00204 	addi	sp,sp,8
   110e8:	f800283a 	ret

000110ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   110ec:	deffff04 	addi	sp,sp,-4
   110f0:	df000015 	stw	fp,0(sp)
   110f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   110f8:	0001883a 	nop
   110fc:	e037883a 	mov	sp,fp
   11100:	df000017 	ldw	fp,0(sp)
   11104:	dec00104 	addi	sp,sp,4
   11108:	f800283a 	ret

0001110c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1110c:	defffe04 	addi	sp,sp,-8
   11110:	dfc00115 	stw	ra,4(sp)
   11114:	df000015 	stw	fp,0(sp)
   11118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1111c:	d0a00d17 	ldw	r2,-32716(gp)
   11120:	10000326 	beq	r2,zero,11130 <alt_get_errno+0x24>
   11124:	d0a00d17 	ldw	r2,-32716(gp)
   11128:	103ee83a 	callr	r2
   1112c:	00000106 	br	11134 <alt_get_errno+0x28>
   11130:	d0a6d604 	addi	r2,gp,-25768
}
   11134:	e037883a 	mov	sp,fp
   11138:	dfc00117 	ldw	ra,4(sp)
   1113c:	df000017 	ldw	fp,0(sp)
   11140:	dec00204 	addi	sp,sp,8
   11144:	f800283a 	ret

00011148 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11148:	defffa04 	addi	sp,sp,-24
   1114c:	dfc00515 	stw	ra,20(sp)
   11150:	df000415 	stw	fp,16(sp)
   11154:	df000404 	addi	fp,sp,16
   11158:	e13ffe15 	stw	r4,-8(fp)
   1115c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11160:	e0bffe17 	ldw	r2,-8(fp)
   11164:	10000326 	beq	r2,zero,11174 <alt_dev_llist_insert+0x2c>
   11168:	e0bffe17 	ldw	r2,-8(fp)
   1116c:	10800217 	ldw	r2,8(r2)
   11170:	1000061e 	bne	r2,zero,1118c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11174:	001110c0 	call	1110c <alt_get_errno>
   11178:	1007883a 	mov	r3,r2
   1117c:	00800584 	movi	r2,22
   11180:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11184:	00bffa84 	movi	r2,-22
   11188:	00001306 	br	111d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	e0ffff17 	ldw	r3,-4(fp)
   11194:	e0fffc15 	stw	r3,-16(fp)
   11198:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1119c:	e0bffd17 	ldw	r2,-12(fp)
   111a0:	e0fffc17 	ldw	r3,-16(fp)
   111a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   111a8:	e0bffc17 	ldw	r2,-16(fp)
   111ac:	10c00017 	ldw	r3,0(r2)
   111b0:	e0bffd17 	ldw	r2,-12(fp)
   111b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   111b8:	e0bffc17 	ldw	r2,-16(fp)
   111bc:	10800017 	ldw	r2,0(r2)
   111c0:	e0fffd17 	ldw	r3,-12(fp)
   111c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   111c8:	e0bffc17 	ldw	r2,-16(fp)
   111cc:	e0fffd17 	ldw	r3,-12(fp)
   111d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   111d4:	0005883a 	mov	r2,zero
}
   111d8:	e037883a 	mov	sp,fp
   111dc:	dfc00117 	ldw	ra,4(sp)
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00204 	addi	sp,sp,8
   111e8:	f800283a 	ret

000111ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   111ec:	defffd04 	addi	sp,sp,-12
   111f0:	dfc00215 	stw	ra,8(sp)
   111f4:	df000115 	stw	fp,4(sp)
   111f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   111fc:	00800074 	movhi	r2,1
   11200:	10886804 	addi	r2,r2,8608
   11204:	e0bfff15 	stw	r2,-4(fp)
   11208:	00000606 	br	11224 <_do_ctors+0x38>
        (*ctor) (); 
   1120c:	e0bfff17 	ldw	r2,-4(fp)
   11210:	10800017 	ldw	r2,0(r2)
   11214:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11218:	e0bfff17 	ldw	r2,-4(fp)
   1121c:	10bfff04 	addi	r2,r2,-4
   11220:	e0bfff15 	stw	r2,-4(fp)
   11224:	e0ffff17 	ldw	r3,-4(fp)
   11228:	00800074 	movhi	r2,1
   1122c:	10886904 	addi	r2,r2,8612
   11230:	18bff62e 	bgeu	r3,r2,1120c <__alt_exception_stack_pointer+0xf801120c>
        (*ctor) (); 
}
   11234:	0001883a 	nop
   11238:	e037883a 	mov	sp,fp
   1123c:	dfc00117 	ldw	ra,4(sp)
   11240:	df000017 	ldw	fp,0(sp)
   11244:	dec00204 	addi	sp,sp,8
   11248:	f800283a 	ret

0001124c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1124c:	defffd04 	addi	sp,sp,-12
   11250:	dfc00215 	stw	ra,8(sp)
   11254:	df000115 	stw	fp,4(sp)
   11258:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1125c:	00800074 	movhi	r2,1
   11260:	10886804 	addi	r2,r2,8608
   11264:	e0bfff15 	stw	r2,-4(fp)
   11268:	00000606 	br	11284 <_do_dtors+0x38>
        (*dtor) (); 
   1126c:	e0bfff17 	ldw	r2,-4(fp)
   11270:	10800017 	ldw	r2,0(r2)
   11274:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11278:	e0bfff17 	ldw	r2,-4(fp)
   1127c:	10bfff04 	addi	r2,r2,-4
   11280:	e0bfff15 	stw	r2,-4(fp)
   11284:	e0ffff17 	ldw	r3,-4(fp)
   11288:	00800074 	movhi	r2,1
   1128c:	10886904 	addi	r2,r2,8612
   11290:	18bff62e 	bgeu	r3,r2,1126c <__alt_exception_stack_pointer+0xf801126c>
        (*dtor) (); 
}
   11294:	0001883a 	nop
   11298:	e037883a 	mov	sp,fp
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	df000017 	ldw	fp,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret

000112ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   112ac:	deffff04 	addi	sp,sp,-4
   112b0:	df000015 	stw	fp,0(sp)
   112b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   112b8:	0001883a 	nop
   112bc:	e037883a 	mov	sp,fp
   112c0:	df000017 	ldw	fp,0(sp)
   112c4:	dec00104 	addi	sp,sp,4
   112c8:	f800283a 	ret

000112cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   112cc:	defff904 	addi	sp,sp,-28
   112d0:	dfc00615 	stw	ra,24(sp)
   112d4:	df000515 	stw	fp,20(sp)
   112d8:	df000504 	addi	fp,sp,20
   112dc:	e13ffc15 	stw	r4,-16(fp)
   112e0:	e17ffd15 	stw	r5,-12(fp)
   112e4:	e1bffe15 	stw	r6,-8(fp)
   112e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   112ec:	e0800217 	ldw	r2,8(fp)
   112f0:	d8800015 	stw	r2,0(sp)
   112f4:	e1ffff17 	ldw	r7,-4(fp)
   112f8:	e1bffe17 	ldw	r6,-8(fp)
   112fc:	e17ffd17 	ldw	r5,-12(fp)
   11300:	e13ffc17 	ldw	r4,-16(fp)
   11304:	001147c0 	call	1147c <alt_iic_isr_register>
}  
   11308:	e037883a 	mov	sp,fp
   1130c:	dfc00117 	ldw	ra,4(sp)
   11310:	df000017 	ldw	fp,0(sp)
   11314:	dec00204 	addi	sp,sp,8
   11318:	f800283a 	ret

0001131c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1131c:	defff904 	addi	sp,sp,-28
   11320:	df000615 	stw	fp,24(sp)
   11324:	df000604 	addi	fp,sp,24
   11328:	e13ffe15 	stw	r4,-8(fp)
   1132c:	e17fff15 	stw	r5,-4(fp)
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11338:	0005303a 	rdctl	r2,status
   1133c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11340:	e0fffb17 	ldw	r3,-20(fp)
   11344:	00bfff84 	movi	r2,-2
   11348:	1884703a 	and	r2,r3,r2
   1134c:	1001703a 	wrctl	status,r2
  
  return context;
   11350:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11354:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11358:	00c00044 	movi	r3,1
   1135c:	e0bffa17 	ldw	r2,-24(fp)
   11360:	1884983a 	sll	r2,r3,r2
   11364:	1007883a 	mov	r3,r2
   11368:	d0a6dd17 	ldw	r2,-25740(gp)
   1136c:	1884b03a 	or	r2,r3,r2
   11370:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11374:	d0a6dd17 	ldw	r2,-25740(gp)
   11378:	100170fa 	wrctl	ienable,r2
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11384:	e0bffd17 	ldw	r2,-12(fp)
   11388:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1138c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11390:	0001883a 	nop
}
   11394:	e037883a 	mov	sp,fp
   11398:	df000017 	ldw	fp,0(sp)
   1139c:	dec00104 	addi	sp,sp,4
   113a0:	f800283a 	ret

000113a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   113a4:	defff904 	addi	sp,sp,-28
   113a8:	df000615 	stw	fp,24(sp)
   113ac:	df000604 	addi	fp,sp,24
   113b0:	e13ffe15 	stw	r4,-8(fp)
   113b4:	e17fff15 	stw	r5,-4(fp)
   113b8:	e0bfff17 	ldw	r2,-4(fp)
   113bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113c0:	0005303a 	rdctl	r2,status
   113c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113c8:	e0fffb17 	ldw	r3,-20(fp)
   113cc:	00bfff84 	movi	r2,-2
   113d0:	1884703a 	and	r2,r3,r2
   113d4:	1001703a 	wrctl	status,r2
  
  return context;
   113d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   113dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   113e0:	00c00044 	movi	r3,1
   113e4:	e0bffa17 	ldw	r2,-24(fp)
   113e8:	1884983a 	sll	r2,r3,r2
   113ec:	0084303a 	nor	r2,zero,r2
   113f0:	1007883a 	mov	r3,r2
   113f4:	d0a6dd17 	ldw	r2,-25740(gp)
   113f8:	1884703a 	and	r2,r3,r2
   113fc:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11400:	d0a6dd17 	ldw	r2,-25740(gp)
   11404:	100170fa 	wrctl	ienable,r2
   11408:	e0bffc17 	ldw	r2,-16(fp)
   1140c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11418:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1141c:	0001883a 	nop
}
   11420:	e037883a 	mov	sp,fp
   11424:	df000017 	ldw	fp,0(sp)
   11428:	dec00104 	addi	sp,sp,4
   1142c:	f800283a 	ret

00011430 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11430:	defffc04 	addi	sp,sp,-16
   11434:	df000315 	stw	fp,12(sp)
   11438:	df000304 	addi	fp,sp,12
   1143c:	e13ffe15 	stw	r4,-8(fp)
   11440:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11444:	000530fa 	rdctl	r2,ienable
   11448:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1144c:	00c00044 	movi	r3,1
   11450:	e0bfff17 	ldw	r2,-4(fp)
   11454:	1884983a 	sll	r2,r3,r2
   11458:	1007883a 	mov	r3,r2
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	1884703a 	and	r2,r3,r2
   11464:	1004c03a 	cmpne	r2,r2,zero
   11468:	10803fcc 	andi	r2,r2,255
}
   1146c:	e037883a 	mov	sp,fp
   11470:	df000017 	ldw	fp,0(sp)
   11474:	dec00104 	addi	sp,sp,4
   11478:	f800283a 	ret

0001147c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1147c:	defff504 	addi	sp,sp,-44
   11480:	dfc00a15 	stw	ra,40(sp)
   11484:	df000915 	stw	fp,36(sp)
   11488:	df000904 	addi	fp,sp,36
   1148c:	e13ffc15 	stw	r4,-16(fp)
   11490:	e17ffd15 	stw	r5,-12(fp)
   11494:	e1bffe15 	stw	r6,-8(fp)
   11498:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1149c:	00bffa84 	movi	r2,-22
   114a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   114a4:	e0bffd17 	ldw	r2,-12(fp)
   114a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   114ac:	e0bff817 	ldw	r2,-32(fp)
   114b0:	10800808 	cmpgei	r2,r2,32
   114b4:	1000271e 	bne	r2,zero,11554 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114b8:	0005303a 	rdctl	r2,status
   114bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114c0:	e0fffb17 	ldw	r3,-20(fp)
   114c4:	00bfff84 	movi	r2,-2
   114c8:	1884703a 	and	r2,r3,r2
   114cc:	1001703a 	wrctl	status,r2
  
  return context;
   114d0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   114d4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   114d8:	00800074 	movhi	r2,1
   114dc:	1098cd04 	addi	r2,r2,25396
   114e0:	e0fff817 	ldw	r3,-32(fp)
   114e4:	180690fa 	slli	r3,r3,3
   114e8:	10c5883a 	add	r2,r2,r3
   114ec:	e0fffe17 	ldw	r3,-8(fp)
   114f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   114f4:	00800074 	movhi	r2,1
   114f8:	1098cd04 	addi	r2,r2,25396
   114fc:	e0fff817 	ldw	r3,-32(fp)
   11500:	180690fa 	slli	r3,r3,3
   11504:	10c5883a 	add	r2,r2,r3
   11508:	10800104 	addi	r2,r2,4
   1150c:	e0ffff17 	ldw	r3,-4(fp)
   11510:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11514:	e0bffe17 	ldw	r2,-8(fp)
   11518:	10000526 	beq	r2,zero,11530 <alt_iic_isr_register+0xb4>
   1151c:	e0bff817 	ldw	r2,-32(fp)
   11520:	100b883a 	mov	r5,r2
   11524:	e13ffc17 	ldw	r4,-16(fp)
   11528:	001131c0 	call	1131c <alt_ic_irq_enable>
   1152c:	00000406 	br	11540 <alt_iic_isr_register+0xc4>
   11530:	e0bff817 	ldw	r2,-32(fp)
   11534:	100b883a 	mov	r5,r2
   11538:	e13ffc17 	ldw	r4,-16(fp)
   1153c:	00113a40 	call	113a4 <alt_ic_irq_disable>
   11540:	e0bff715 	stw	r2,-36(fp)
   11544:	e0bffa17 	ldw	r2,-24(fp)
   11548:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1154c:	e0bff917 	ldw	r2,-28(fp)
   11550:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11554:	e0bff717 	ldw	r2,-36(fp)
}
   11558:	e037883a 	mov	sp,fp
   1155c:	dfc00117 	ldw	ra,4(sp)
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00204 	addi	sp,sp,8
   11568:	f800283a 	ret

0001156c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1156c:	defff804 	addi	sp,sp,-32
   11570:	dfc00715 	stw	ra,28(sp)
   11574:	df000615 	stw	fp,24(sp)
   11578:	dc000515 	stw	r16,20(sp)
   1157c:	df000604 	addi	fp,sp,24
   11580:	e13ffb15 	stw	r4,-20(fp)
   11584:	e17ffc15 	stw	r5,-16(fp)
   11588:	e1bffd15 	stw	r6,-12(fp)
   1158c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11590:	e1bffe17 	ldw	r6,-8(fp)
   11594:	e17ffd17 	ldw	r5,-12(fp)
   11598:	e13ffc17 	ldw	r4,-16(fp)
   1159c:	00117f40 	call	117f4 <open>
   115a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   115a4:	e0bffa17 	ldw	r2,-24(fp)
   115a8:	10002216 	blt	r2,zero,11634 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   115ac:	04000074 	movhi	r16,1
   115b0:	840d6a04 	addi	r16,r16,13736
   115b4:	e0bffa17 	ldw	r2,-24(fp)
   115b8:	01400304 	movi	r5,12
   115bc:	1009883a 	mov	r4,r2
   115c0:	000cefc0 	call	cefc <__mulsi3>
   115c4:	8085883a 	add	r2,r16,r2
   115c8:	10c00017 	ldw	r3,0(r2)
   115cc:	e0bffb17 	ldw	r2,-20(fp)
   115d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   115d4:	04000074 	movhi	r16,1
   115d8:	840d6a04 	addi	r16,r16,13736
   115dc:	e0bffa17 	ldw	r2,-24(fp)
   115e0:	01400304 	movi	r5,12
   115e4:	1009883a 	mov	r4,r2
   115e8:	000cefc0 	call	cefc <__mulsi3>
   115ec:	8085883a 	add	r2,r16,r2
   115f0:	10800104 	addi	r2,r2,4
   115f4:	10c00017 	ldw	r3,0(r2)
   115f8:	e0bffb17 	ldw	r2,-20(fp)
   115fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11600:	04000074 	movhi	r16,1
   11604:	840d6a04 	addi	r16,r16,13736
   11608:	e0bffa17 	ldw	r2,-24(fp)
   1160c:	01400304 	movi	r5,12
   11610:	1009883a 	mov	r4,r2
   11614:	000cefc0 	call	cefc <__mulsi3>
   11618:	8085883a 	add	r2,r16,r2
   1161c:	10800204 	addi	r2,r2,8
   11620:	10c00017 	ldw	r3,0(r2)
   11624:	e0bffb17 	ldw	r2,-20(fp)
   11628:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1162c:	e13ffa17 	ldw	r4,-24(fp)
   11630:	000feec0 	call	feec <alt_release_fd>
  }
} 
   11634:	0001883a 	nop
   11638:	e6ffff04 	addi	sp,fp,-4
   1163c:	dfc00217 	ldw	ra,8(sp)
   11640:	df000117 	ldw	fp,4(sp)
   11644:	dc000017 	ldw	r16,0(sp)
   11648:	dec00304 	addi	sp,sp,12
   1164c:	f800283a 	ret

00011650 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11650:	defffb04 	addi	sp,sp,-20
   11654:	dfc00415 	stw	ra,16(sp)
   11658:	df000315 	stw	fp,12(sp)
   1165c:	df000304 	addi	fp,sp,12
   11660:	e13ffd15 	stw	r4,-12(fp)
   11664:	e17ffe15 	stw	r5,-8(fp)
   11668:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1166c:	01c07fc4 	movi	r7,511
   11670:	01800044 	movi	r6,1
   11674:	e17ffd17 	ldw	r5,-12(fp)
   11678:	01000074 	movhi	r4,1
   1167c:	210d6d04 	addi	r4,r4,13748
   11680:	001156c0 	call	1156c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11684:	01c07fc4 	movi	r7,511
   11688:	000d883a 	mov	r6,zero
   1168c:	e17ffe17 	ldw	r5,-8(fp)
   11690:	01000074 	movhi	r4,1
   11694:	210d6a04 	addi	r4,r4,13736
   11698:	001156c0 	call	1156c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1169c:	01c07fc4 	movi	r7,511
   116a0:	01800044 	movi	r6,1
   116a4:	e17fff17 	ldw	r5,-4(fp)
   116a8:	01000074 	movhi	r4,1
   116ac:	210d7004 	addi	r4,r4,13760
   116b0:	001156c0 	call	1156c <alt_open_fd>
}  
   116b4:	0001883a 	nop
   116b8:	e037883a 	mov	sp,fp
   116bc:	dfc00117 	ldw	ra,4(sp)
   116c0:	df000017 	ldw	fp,0(sp)
   116c4:	dec00204 	addi	sp,sp,8
   116c8:	f800283a 	ret

000116cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   116cc:	defffe04 	addi	sp,sp,-8
   116d0:	dfc00115 	stw	ra,4(sp)
   116d4:	df000015 	stw	fp,0(sp)
   116d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   116dc:	d0a00d17 	ldw	r2,-32716(gp)
   116e0:	10000326 	beq	r2,zero,116f0 <alt_get_errno+0x24>
   116e4:	d0a00d17 	ldw	r2,-32716(gp)
   116e8:	103ee83a 	callr	r2
   116ec:	00000106 	br	116f4 <alt_get_errno+0x28>
   116f0:	d0a6d604 	addi	r2,gp,-25768
}
   116f4:	e037883a 	mov	sp,fp
   116f8:	dfc00117 	ldw	ra,4(sp)
   116fc:	df000017 	ldw	fp,0(sp)
   11700:	dec00204 	addi	sp,sp,8
   11704:	f800283a 	ret

00011708 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11708:	defffb04 	addi	sp,sp,-20
   1170c:	dfc00415 	stw	ra,16(sp)
   11710:	df000315 	stw	fp,12(sp)
   11714:	dc000215 	stw	r16,8(sp)
   11718:	df000304 	addi	fp,sp,12
   1171c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11720:	e0bffe17 	ldw	r2,-8(fp)
   11724:	10800217 	ldw	r2,8(r2)
   11728:	10d00034 	orhi	r3,r2,16384
   1172c:	e0bffe17 	ldw	r2,-8(fp)
   11730:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11734:	e03ffd15 	stw	zero,-12(fp)
   11738:	00002306 	br	117c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1173c:	04000074 	movhi	r16,1
   11740:	840d6a04 	addi	r16,r16,13736
   11744:	e0bffd17 	ldw	r2,-12(fp)
   11748:	01400304 	movi	r5,12
   1174c:	1009883a 	mov	r4,r2
   11750:	000cefc0 	call	cefc <__mulsi3>
   11754:	8085883a 	add	r2,r16,r2
   11758:	10c00017 	ldw	r3,0(r2)
   1175c:	e0bffe17 	ldw	r2,-8(fp)
   11760:	10800017 	ldw	r2,0(r2)
   11764:	1880151e 	bne	r3,r2,117bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11768:	04000074 	movhi	r16,1
   1176c:	840d6a04 	addi	r16,r16,13736
   11770:	e0bffd17 	ldw	r2,-12(fp)
   11774:	01400304 	movi	r5,12
   11778:	1009883a 	mov	r4,r2
   1177c:	000cefc0 	call	cefc <__mulsi3>
   11780:	8085883a 	add	r2,r16,r2
   11784:	10800204 	addi	r2,r2,8
   11788:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1178c:	10000b0e 	bge	r2,zero,117bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11790:	01400304 	movi	r5,12
   11794:	e13ffd17 	ldw	r4,-12(fp)
   11798:	000cefc0 	call	cefc <__mulsi3>
   1179c:	1007883a 	mov	r3,r2
   117a0:	00800074 	movhi	r2,1
   117a4:	108d6a04 	addi	r2,r2,13736
   117a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   117ac:	e0bffe17 	ldw	r2,-8(fp)
   117b0:	18800226 	beq	r3,r2,117bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   117b4:	00bffcc4 	movi	r2,-13
   117b8:	00000806 	br	117dc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   117bc:	e0bffd17 	ldw	r2,-12(fp)
   117c0:	10800044 	addi	r2,r2,1
   117c4:	e0bffd15 	stw	r2,-12(fp)
   117c8:	d0a00c17 	ldw	r2,-32720(gp)
   117cc:	1007883a 	mov	r3,r2
   117d0:	e0bffd17 	ldw	r2,-12(fp)
   117d4:	18bfd92e 	bgeu	r3,r2,1173c <__alt_exception_stack_pointer+0xf801173c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   117d8:	0005883a 	mov	r2,zero
}
   117dc:	e6ffff04 	addi	sp,fp,-4
   117e0:	dfc00217 	ldw	ra,8(sp)
   117e4:	df000117 	ldw	fp,4(sp)
   117e8:	dc000017 	ldw	r16,0(sp)
   117ec:	dec00304 	addi	sp,sp,12
   117f0:	f800283a 	ret

000117f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   117f4:	defff604 	addi	sp,sp,-40
   117f8:	dfc00915 	stw	ra,36(sp)
   117fc:	df000815 	stw	fp,32(sp)
   11800:	df000804 	addi	fp,sp,32
   11804:	e13ffd15 	stw	r4,-12(fp)
   11808:	e17ffe15 	stw	r5,-8(fp)
   1180c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11810:	00bfffc4 	movi	r2,-1
   11814:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11818:	00bffb44 	movi	r2,-19
   1181c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11820:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11824:	d1600a04 	addi	r5,gp,-32728
   11828:	e13ffd17 	ldw	r4,-12(fp)
   1182c:	0011b180 	call	11b18 <alt_find_dev>
   11830:	e0bff815 	stw	r2,-32(fp)
   11834:	e0bff817 	ldw	r2,-32(fp)
   11838:	1000051e 	bne	r2,zero,11850 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1183c:	e13ffd17 	ldw	r4,-12(fp)
   11840:	0011ba80 	call	11ba8 <alt_find_file>
   11844:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11848:	00800044 	movi	r2,1
   1184c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11850:	e0bff817 	ldw	r2,-32(fp)
   11854:	10002b26 	beq	r2,zero,11904 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11858:	e13ff817 	ldw	r4,-32(fp)
   1185c:	0011cb00 	call	11cb0 <alt_get_fd>
   11860:	e0bff915 	stw	r2,-28(fp)
   11864:	e0bff917 	ldw	r2,-28(fp)
   11868:	1000030e 	bge	r2,zero,11878 <open+0x84>
    {
      status = index;
   1186c:	e0bff917 	ldw	r2,-28(fp)
   11870:	e0bffa15 	stw	r2,-24(fp)
   11874:	00002506 	br	1190c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11878:	01400304 	movi	r5,12
   1187c:	e13ff917 	ldw	r4,-28(fp)
   11880:	000cefc0 	call	cefc <__mulsi3>
   11884:	1007883a 	mov	r3,r2
   11888:	00800074 	movhi	r2,1
   1188c:	108d6a04 	addi	r2,r2,13736
   11890:	1885883a 	add	r2,r3,r2
   11894:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11898:	e0fffe17 	ldw	r3,-8(fp)
   1189c:	00900034 	movhi	r2,16384
   118a0:	10bfffc4 	addi	r2,r2,-1
   118a4:	1886703a 	and	r3,r3,r2
   118a8:	e0bffc17 	ldw	r2,-16(fp)
   118ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   118b0:	e0bffb17 	ldw	r2,-20(fp)
   118b4:	1000051e 	bne	r2,zero,118cc <open+0xd8>
   118b8:	e13ffc17 	ldw	r4,-16(fp)
   118bc:	00117080 	call	11708 <alt_file_locked>
   118c0:	e0bffa15 	stw	r2,-24(fp)
   118c4:	e0bffa17 	ldw	r2,-24(fp)
   118c8:	10001016 	blt	r2,zero,1190c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   118cc:	e0bff817 	ldw	r2,-32(fp)
   118d0:	10800317 	ldw	r2,12(r2)
   118d4:	10000826 	beq	r2,zero,118f8 <open+0x104>
   118d8:	e0bff817 	ldw	r2,-32(fp)
   118dc:	10800317 	ldw	r2,12(r2)
   118e0:	e1ffff17 	ldw	r7,-4(fp)
   118e4:	e1bffe17 	ldw	r6,-8(fp)
   118e8:	e17ffd17 	ldw	r5,-12(fp)
   118ec:	e13ffc17 	ldw	r4,-16(fp)
   118f0:	103ee83a 	callr	r2
   118f4:	00000106 	br	118fc <open+0x108>
   118f8:	0005883a 	mov	r2,zero
   118fc:	e0bffa15 	stw	r2,-24(fp)
   11900:	00000206 	br	1190c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11904:	00bffb44 	movi	r2,-19
   11908:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1190c:	e0bffa17 	ldw	r2,-24(fp)
   11910:	1000090e 	bge	r2,zero,11938 <open+0x144>
  {
    alt_release_fd (index);  
   11914:	e13ff917 	ldw	r4,-28(fp)
   11918:	000feec0 	call	feec <alt_release_fd>
    ALT_ERRNO = -status;
   1191c:	00116cc0 	call	116cc <alt_get_errno>
   11920:	1007883a 	mov	r3,r2
   11924:	e0bffa17 	ldw	r2,-24(fp)
   11928:	0085c83a 	sub	r2,zero,r2
   1192c:	18800015 	stw	r2,0(r3)
    return -1;
   11930:	00bfffc4 	movi	r2,-1
   11934:	00000106 	br	1193c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11938:	e0bff917 	ldw	r2,-28(fp)
}
   1193c:	e037883a 	mov	sp,fp
   11940:	dfc00117 	ldw	ra,4(sp)
   11944:	df000017 	ldw	fp,0(sp)
   11948:	dec00204 	addi	sp,sp,8
   1194c:	f800283a 	ret

00011950 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11950:	defffa04 	addi	sp,sp,-24
   11954:	df000515 	stw	fp,20(sp)
   11958:	df000504 	addi	fp,sp,20
   1195c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11960:	0005303a 	rdctl	r2,status
   11964:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11968:	e0fffc17 	ldw	r3,-16(fp)
   1196c:	00bfff84 	movi	r2,-2
   11970:	1884703a 	and	r2,r3,r2
   11974:	1001703a 	wrctl	status,r2
  
  return context;
   11978:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1197c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11980:	e0bfff17 	ldw	r2,-4(fp)
   11984:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11988:	e0bffd17 	ldw	r2,-12(fp)
   1198c:	10800017 	ldw	r2,0(r2)
   11990:	e0fffd17 	ldw	r3,-12(fp)
   11994:	18c00117 	ldw	r3,4(r3)
   11998:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1199c:	e0bffd17 	ldw	r2,-12(fp)
   119a0:	10800117 	ldw	r2,4(r2)
   119a4:	e0fffd17 	ldw	r3,-12(fp)
   119a8:	18c00017 	ldw	r3,0(r3)
   119ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   119b0:	e0bffd17 	ldw	r2,-12(fp)
   119b4:	e0fffd17 	ldw	r3,-12(fp)
   119b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   119bc:	e0bffd17 	ldw	r2,-12(fp)
   119c0:	e0fffd17 	ldw	r3,-12(fp)
   119c4:	10c00015 	stw	r3,0(r2)
   119c8:	e0bffb17 	ldw	r2,-20(fp)
   119cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119d0:	e0bffe17 	ldw	r2,-8(fp)
   119d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   119d8:	0001883a 	nop
   119dc:	e037883a 	mov	sp,fp
   119e0:	df000017 	ldw	fp,0(sp)
   119e4:	dec00104 	addi	sp,sp,4
   119e8:	f800283a 	ret

000119ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   119ec:	defffb04 	addi	sp,sp,-20
   119f0:	dfc00415 	stw	ra,16(sp)
   119f4:	df000315 	stw	fp,12(sp)
   119f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   119fc:	d0a00f17 	ldw	r2,-32708(gp)
   11a00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11a04:	d0a6df17 	ldw	r2,-25732(gp)
   11a08:	10800044 	addi	r2,r2,1
   11a0c:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a10:	00002e06 	br	11acc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11a14:	e0bffd17 	ldw	r2,-12(fp)
   11a18:	10800017 	ldw	r2,0(r2)
   11a1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	10800403 	ldbu	r2,16(r2)
   11a28:	10803fcc 	andi	r2,r2,255
   11a2c:	10000426 	beq	r2,zero,11a40 <alt_tick+0x54>
   11a30:	d0a6df17 	ldw	r2,-25732(gp)
   11a34:	1000021e 	bne	r2,zero,11a40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11a38:	e0bffd17 	ldw	r2,-12(fp)
   11a3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11a40:	e0bffd17 	ldw	r2,-12(fp)
   11a44:	10800217 	ldw	r2,8(r2)
   11a48:	d0e6df17 	ldw	r3,-25732(gp)
   11a4c:	18801d36 	bltu	r3,r2,11ac4 <alt_tick+0xd8>
   11a50:	e0bffd17 	ldw	r2,-12(fp)
   11a54:	10800403 	ldbu	r2,16(r2)
   11a58:	10803fcc 	andi	r2,r2,255
   11a5c:	1000191e 	bne	r2,zero,11ac4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11a60:	e0bffd17 	ldw	r2,-12(fp)
   11a64:	10800317 	ldw	r2,12(r2)
   11a68:	e0fffd17 	ldw	r3,-12(fp)
   11a6c:	18c00517 	ldw	r3,20(r3)
   11a70:	1809883a 	mov	r4,r3
   11a74:	103ee83a 	callr	r2
   11a78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11a7c:	e0bfff17 	ldw	r2,-4(fp)
   11a80:	1000031e 	bne	r2,zero,11a90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11a84:	e13ffd17 	ldw	r4,-12(fp)
   11a88:	00119500 	call	11950 <alt_alarm_stop>
   11a8c:	00000d06 	br	11ac4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11a90:	e0bffd17 	ldw	r2,-12(fp)
   11a94:	10c00217 	ldw	r3,8(r2)
   11a98:	e0bfff17 	ldw	r2,-4(fp)
   11a9c:	1887883a 	add	r3,r3,r2
   11aa0:	e0bffd17 	ldw	r2,-12(fp)
   11aa4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11aa8:	e0bffd17 	ldw	r2,-12(fp)
   11aac:	10c00217 	ldw	r3,8(r2)
   11ab0:	d0a6df17 	ldw	r2,-25732(gp)
   11ab4:	1880032e 	bgeu	r3,r2,11ac4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11ab8:	e0bffd17 	ldw	r2,-12(fp)
   11abc:	00c00044 	movi	r3,1
   11ac0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11ac4:	e0bffe17 	ldw	r2,-8(fp)
   11ac8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11acc:	e0fffd17 	ldw	r3,-12(fp)
   11ad0:	d0a00f04 	addi	r2,gp,-32708
   11ad4:	18bfcf1e 	bne	r3,r2,11a14 <__alt_exception_stack_pointer+0xf8011a14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11ad8:	0001883a 	nop
}
   11adc:	0001883a 	nop
   11ae0:	e037883a 	mov	sp,fp
   11ae4:	dfc00117 	ldw	ra,4(sp)
   11ae8:	df000017 	ldw	fp,0(sp)
   11aec:	dec00204 	addi	sp,sp,8
   11af0:	f800283a 	ret

00011af4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11af4:	deffff04 	addi	sp,sp,-4
   11af8:	df000015 	stw	fp,0(sp)
   11afc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11b00:	000170fa 	wrctl	ienable,zero
}
   11b04:	0001883a 	nop
   11b08:	e037883a 	mov	sp,fp
   11b0c:	df000017 	ldw	fp,0(sp)
   11b10:	dec00104 	addi	sp,sp,4
   11b14:	f800283a 	ret

00011b18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11b18:	defffa04 	addi	sp,sp,-24
   11b1c:	dfc00515 	stw	ra,20(sp)
   11b20:	df000415 	stw	fp,16(sp)
   11b24:	df000404 	addi	fp,sp,16
   11b28:	e13ffe15 	stw	r4,-8(fp)
   11b2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11b30:	e0bfff17 	ldw	r2,-4(fp)
   11b34:	10800017 	ldw	r2,0(r2)
   11b38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11b3c:	e13ffe17 	ldw	r4,-8(fp)
   11b40:	00032200 	call	3220 <strlen>
   11b44:	10800044 	addi	r2,r2,1
   11b48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11b4c:	00000d06 	br	11b84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11b50:	e0bffc17 	ldw	r2,-16(fp)
   11b54:	10800217 	ldw	r2,8(r2)
   11b58:	e0fffd17 	ldw	r3,-12(fp)
   11b5c:	180d883a 	mov	r6,r3
   11b60:	e17ffe17 	ldw	r5,-8(fp)
   11b64:	1009883a 	mov	r4,r2
   11b68:	0011e5c0 	call	11e5c <memcmp>
   11b6c:	1000021e 	bne	r2,zero,11b78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11b70:	e0bffc17 	ldw	r2,-16(fp)
   11b74:	00000706 	br	11b94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11b78:	e0bffc17 	ldw	r2,-16(fp)
   11b7c:	10800017 	ldw	r2,0(r2)
   11b80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11b84:	e0fffc17 	ldw	r3,-16(fp)
   11b88:	e0bfff17 	ldw	r2,-4(fp)
   11b8c:	18bff01e 	bne	r3,r2,11b50 <__alt_exception_stack_pointer+0xf8011b50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11b90:	0005883a 	mov	r2,zero
}
   11b94:	e037883a 	mov	sp,fp
   11b98:	dfc00117 	ldw	ra,4(sp)
   11b9c:	df000017 	ldw	fp,0(sp)
   11ba0:	dec00204 	addi	sp,sp,8
   11ba4:	f800283a 	ret

00011ba8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11ba8:	defffb04 	addi	sp,sp,-20
   11bac:	dfc00415 	stw	ra,16(sp)
   11bb0:	df000315 	stw	fp,12(sp)
   11bb4:	df000304 	addi	fp,sp,12
   11bb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11bbc:	d0a00817 	ldw	r2,-32736(gp)
   11bc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11bc4:	00003106 	br	11c8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11bc8:	e0bffd17 	ldw	r2,-12(fp)
   11bcc:	10800217 	ldw	r2,8(r2)
   11bd0:	1009883a 	mov	r4,r2
   11bd4:	00032200 	call	3220 <strlen>
   11bd8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11bdc:	e0bffd17 	ldw	r2,-12(fp)
   11be0:	10c00217 	ldw	r3,8(r2)
   11be4:	e0bffe17 	ldw	r2,-8(fp)
   11be8:	10bfffc4 	addi	r2,r2,-1
   11bec:	1885883a 	add	r2,r3,r2
   11bf0:	10800003 	ldbu	r2,0(r2)
   11bf4:	10803fcc 	andi	r2,r2,255
   11bf8:	1080201c 	xori	r2,r2,128
   11bfc:	10bfe004 	addi	r2,r2,-128
   11c00:	10800bd8 	cmpnei	r2,r2,47
   11c04:	1000031e 	bne	r2,zero,11c14 <alt_find_file+0x6c>
    {
      len -= 1;
   11c08:	e0bffe17 	ldw	r2,-8(fp)
   11c0c:	10bfffc4 	addi	r2,r2,-1
   11c10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11c14:	e0bffe17 	ldw	r2,-8(fp)
   11c18:	e0ffff17 	ldw	r3,-4(fp)
   11c1c:	1885883a 	add	r2,r3,r2
   11c20:	10800003 	ldbu	r2,0(r2)
   11c24:	10803fcc 	andi	r2,r2,255
   11c28:	1080201c 	xori	r2,r2,128
   11c2c:	10bfe004 	addi	r2,r2,-128
   11c30:	10800be0 	cmpeqi	r2,r2,47
   11c34:	1000081e 	bne	r2,zero,11c58 <alt_find_file+0xb0>
   11c38:	e0bffe17 	ldw	r2,-8(fp)
   11c3c:	e0ffff17 	ldw	r3,-4(fp)
   11c40:	1885883a 	add	r2,r3,r2
   11c44:	10800003 	ldbu	r2,0(r2)
   11c48:	10803fcc 	andi	r2,r2,255
   11c4c:	1080201c 	xori	r2,r2,128
   11c50:	10bfe004 	addi	r2,r2,-128
   11c54:	10000a1e 	bne	r2,zero,11c80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11c58:	e0bffd17 	ldw	r2,-12(fp)
   11c5c:	10800217 	ldw	r2,8(r2)
   11c60:	e0fffe17 	ldw	r3,-8(fp)
   11c64:	180d883a 	mov	r6,r3
   11c68:	e17fff17 	ldw	r5,-4(fp)
   11c6c:	1009883a 	mov	r4,r2
   11c70:	0011e5c0 	call	11e5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11c74:	1000021e 	bne	r2,zero,11c80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11c78:	e0bffd17 	ldw	r2,-12(fp)
   11c7c:	00000706 	br	11c9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11c80:	e0bffd17 	ldw	r2,-12(fp)
   11c84:	10800017 	ldw	r2,0(r2)
   11c88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11c8c:	e0fffd17 	ldw	r3,-12(fp)
   11c90:	d0a00804 	addi	r2,gp,-32736
   11c94:	18bfcc1e 	bne	r3,r2,11bc8 <__alt_exception_stack_pointer+0xf8011bc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11c98:	0005883a 	mov	r2,zero
}
   11c9c:	e037883a 	mov	sp,fp
   11ca0:	dfc00117 	ldw	ra,4(sp)
   11ca4:	df000017 	ldw	fp,0(sp)
   11ca8:	dec00204 	addi	sp,sp,8
   11cac:	f800283a 	ret

00011cb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11cb0:	defffa04 	addi	sp,sp,-24
   11cb4:	dfc00515 	stw	ra,20(sp)
   11cb8:	df000415 	stw	fp,16(sp)
   11cbc:	dc000315 	stw	r16,12(sp)
   11cc0:	df000404 	addi	fp,sp,16
   11cc4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11cc8:	00bffa04 	movi	r2,-24
   11ccc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11cd0:	e03ffc15 	stw	zero,-16(fp)
   11cd4:	00001d06 	br	11d4c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11cd8:	04000074 	movhi	r16,1
   11cdc:	840d6a04 	addi	r16,r16,13736
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	01400304 	movi	r5,12
   11ce8:	1009883a 	mov	r4,r2
   11cec:	000cefc0 	call	cefc <__mulsi3>
   11cf0:	8085883a 	add	r2,r16,r2
   11cf4:	10800017 	ldw	r2,0(r2)
   11cf8:	1000111e 	bne	r2,zero,11d40 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11cfc:	04000074 	movhi	r16,1
   11d00:	840d6a04 	addi	r16,r16,13736
   11d04:	e0bffc17 	ldw	r2,-16(fp)
   11d08:	01400304 	movi	r5,12
   11d0c:	1009883a 	mov	r4,r2
   11d10:	000cefc0 	call	cefc <__mulsi3>
   11d14:	8085883a 	add	r2,r16,r2
   11d18:	e0fffe17 	ldw	r3,-8(fp)
   11d1c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11d20:	d0e00c17 	ldw	r3,-32720(gp)
   11d24:	e0bffc17 	ldw	r2,-16(fp)
   11d28:	1880020e 	bge	r3,r2,11d34 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11d2c:	e0bffc17 	ldw	r2,-16(fp)
   11d30:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   11d34:	e0bffc17 	ldw	r2,-16(fp)
   11d38:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11d3c:	00000606 	br	11d58 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11d40:	e0bffc17 	ldw	r2,-16(fp)
   11d44:	10800044 	addi	r2,r2,1
   11d48:	e0bffc15 	stw	r2,-16(fp)
   11d4c:	e0bffc17 	ldw	r2,-16(fp)
   11d50:	10800810 	cmplti	r2,r2,32
   11d54:	103fe01e 	bne	r2,zero,11cd8 <__alt_exception_stack_pointer+0xf8011cd8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11d58:	e0bffd17 	ldw	r2,-12(fp)
}
   11d5c:	e6ffff04 	addi	sp,fp,-4
   11d60:	dfc00217 	ldw	ra,8(sp)
   11d64:	df000117 	ldw	fp,4(sp)
   11d68:	dc000017 	ldw	r16,0(sp)
   11d6c:	dec00304 	addi	sp,sp,12
   11d70:	f800283a 	ret

00011d74 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11d74:	defffe04 	addi	sp,sp,-8
   11d78:	df000115 	stw	fp,4(sp)
   11d7c:	df000104 	addi	fp,sp,4
   11d80:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11d84:	e0bfff17 	ldw	r2,-4(fp)
   11d88:	10bffe84 	addi	r2,r2,-6
   11d8c:	10c00428 	cmpgeui	r3,r2,16
   11d90:	18001a1e 	bne	r3,zero,11dfc <alt_exception_cause_generated_bad_addr+0x88>
   11d94:	100690ba 	slli	r3,r2,2
   11d98:	00800074 	movhi	r2,1
   11d9c:	10876b04 	addi	r2,r2,7596
   11da0:	1885883a 	add	r2,r3,r2
   11da4:	10800017 	ldw	r2,0(r2)
   11da8:	1000683a 	jmp	r2
   11dac:	00011dec 	andhi	zero,zero,1143
   11db0:	00011dec 	andhi	zero,zero,1143
   11db4:	00011dfc 	xorhi	zero,zero,1143
   11db8:	00011dfc 	xorhi	zero,zero,1143
   11dbc:	00011dfc 	xorhi	zero,zero,1143
   11dc0:	00011dec 	andhi	zero,zero,1143
   11dc4:	00011df4 	movhi	zero,1143
   11dc8:	00011dfc 	xorhi	zero,zero,1143
   11dcc:	00011dec 	andhi	zero,zero,1143
   11dd0:	00011dec 	andhi	zero,zero,1143
   11dd4:	00011dfc 	xorhi	zero,zero,1143
   11dd8:	00011dec 	andhi	zero,zero,1143
   11ddc:	00011df4 	movhi	zero,1143
   11de0:	00011dfc 	xorhi	zero,zero,1143
   11de4:	00011dfc 	xorhi	zero,zero,1143
   11de8:	00011dec 	andhi	zero,zero,1143
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11dec:	00800044 	movi	r2,1
   11df0:	00000306 	br	11e00 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11df4:	0005883a 	mov	r2,zero
   11df8:	00000106 	br	11e00 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11dfc:	0005883a 	mov	r2,zero
  }
}
   11e00:	e037883a 	mov	sp,fp
   11e04:	df000017 	ldw	fp,0(sp)
   11e08:	dec00104 	addi	sp,sp,4
   11e0c:	f800283a 	ret

00011e10 <atexit>:
   11e10:	200b883a 	mov	r5,r4
   11e14:	000f883a 	mov	r7,zero
   11e18:	000d883a 	mov	r6,zero
   11e1c:	0009883a 	mov	r4,zero
   11e20:	0011ed81 	jmpi	11ed8 <__register_exitproc>

00011e24 <exit>:
   11e24:	defffe04 	addi	sp,sp,-8
   11e28:	000b883a 	mov	r5,zero
   11e2c:	dc000015 	stw	r16,0(sp)
   11e30:	dfc00115 	stw	ra,4(sp)
   11e34:	2021883a 	mov	r16,r4
   11e38:	0011ff00 	call	11ff0 <__call_exitprocs>
   11e3c:	00800074 	movhi	r2,1
   11e40:	1091e404 	addi	r2,r2,18320
   11e44:	11000017 	ldw	r4,0(r2)
   11e48:	20800f17 	ldw	r2,60(r4)
   11e4c:	10000126 	beq	r2,zero,11e54 <exit+0x30>
   11e50:	103ee83a 	callr	r2
   11e54:	8009883a 	mov	r4,r16
   11e58:	00121700 	call	12170 <_exit>

00011e5c <memcmp>:
   11e5c:	01c000c4 	movi	r7,3
   11e60:	3980192e 	bgeu	r7,r6,11ec8 <memcmp+0x6c>
   11e64:	2144b03a 	or	r2,r4,r5
   11e68:	11c4703a 	and	r2,r2,r7
   11e6c:	10000f26 	beq	r2,zero,11eac <memcmp+0x50>
   11e70:	20800003 	ldbu	r2,0(r4)
   11e74:	28c00003 	ldbu	r3,0(r5)
   11e78:	10c0151e 	bne	r2,r3,11ed0 <memcmp+0x74>
   11e7c:	31bfff84 	addi	r6,r6,-2
   11e80:	01ffffc4 	movi	r7,-1
   11e84:	00000406 	br	11e98 <memcmp+0x3c>
   11e88:	20800003 	ldbu	r2,0(r4)
   11e8c:	28c00003 	ldbu	r3,0(r5)
   11e90:	31bfffc4 	addi	r6,r6,-1
   11e94:	10c00e1e 	bne	r2,r3,11ed0 <memcmp+0x74>
   11e98:	21000044 	addi	r4,r4,1
   11e9c:	29400044 	addi	r5,r5,1
   11ea0:	31fff91e 	bne	r6,r7,11e88 <__alt_exception_stack_pointer+0xf8011e88>
   11ea4:	0005883a 	mov	r2,zero
   11ea8:	f800283a 	ret
   11eac:	20c00017 	ldw	r3,0(r4)
   11eb0:	28800017 	ldw	r2,0(r5)
   11eb4:	18bfee1e 	bne	r3,r2,11e70 <__alt_exception_stack_pointer+0xf8011e70>
   11eb8:	31bfff04 	addi	r6,r6,-4
   11ebc:	21000104 	addi	r4,r4,4
   11ec0:	29400104 	addi	r5,r5,4
   11ec4:	39bff936 	bltu	r7,r6,11eac <__alt_exception_stack_pointer+0xf8011eac>
   11ec8:	303fe91e 	bne	r6,zero,11e70 <__alt_exception_stack_pointer+0xf8011e70>
   11ecc:	003ff506 	br	11ea4 <__alt_exception_stack_pointer+0xf8011ea4>
   11ed0:	10c5c83a 	sub	r2,r2,r3
   11ed4:	f800283a 	ret

00011ed8 <__register_exitproc>:
   11ed8:	defffa04 	addi	sp,sp,-24
   11edc:	dc000315 	stw	r16,12(sp)
   11ee0:	04000074 	movhi	r16,1
   11ee4:	8411e404 	addi	r16,r16,18320
   11ee8:	80c00017 	ldw	r3,0(r16)
   11eec:	dc400415 	stw	r17,16(sp)
   11ef0:	dfc00515 	stw	ra,20(sp)
   11ef4:	18805217 	ldw	r2,328(r3)
   11ef8:	2023883a 	mov	r17,r4
   11efc:	10003726 	beq	r2,zero,11fdc <__register_exitproc+0x104>
   11f00:	10c00117 	ldw	r3,4(r2)
   11f04:	010007c4 	movi	r4,31
   11f08:	20c00e16 	blt	r4,r3,11f44 <__register_exitproc+0x6c>
   11f0c:	1a000044 	addi	r8,r3,1
   11f10:	8800221e 	bne	r17,zero,11f9c <__register_exitproc+0xc4>
   11f14:	18c00084 	addi	r3,r3,2
   11f18:	18c7883a 	add	r3,r3,r3
   11f1c:	18c7883a 	add	r3,r3,r3
   11f20:	12000115 	stw	r8,4(r2)
   11f24:	10c7883a 	add	r3,r2,r3
   11f28:	19400015 	stw	r5,0(r3)
   11f2c:	0005883a 	mov	r2,zero
   11f30:	dfc00517 	ldw	ra,20(sp)
   11f34:	dc400417 	ldw	r17,16(sp)
   11f38:	dc000317 	ldw	r16,12(sp)
   11f3c:	dec00604 	addi	sp,sp,24
   11f40:	f800283a 	ret
   11f44:	00800034 	movhi	r2,0
   11f48:	108a1604 	addi	r2,r2,10328
   11f4c:	10002626 	beq	r2,zero,11fe8 <__register_exitproc+0x110>
   11f50:	01006404 	movi	r4,400
   11f54:	d9400015 	stw	r5,0(sp)
   11f58:	d9800115 	stw	r6,4(sp)
   11f5c:	d9c00215 	stw	r7,8(sp)
   11f60:	00028580 	call	2858 <malloc>
   11f64:	d9400017 	ldw	r5,0(sp)
   11f68:	d9800117 	ldw	r6,4(sp)
   11f6c:	d9c00217 	ldw	r7,8(sp)
   11f70:	10001d26 	beq	r2,zero,11fe8 <__register_exitproc+0x110>
   11f74:	81000017 	ldw	r4,0(r16)
   11f78:	10000115 	stw	zero,4(r2)
   11f7c:	02000044 	movi	r8,1
   11f80:	22405217 	ldw	r9,328(r4)
   11f84:	0007883a 	mov	r3,zero
   11f88:	12400015 	stw	r9,0(r2)
   11f8c:	20805215 	stw	r2,328(r4)
   11f90:	10006215 	stw	zero,392(r2)
   11f94:	10006315 	stw	zero,396(r2)
   11f98:	883fde26 	beq	r17,zero,11f14 <__alt_exception_stack_pointer+0xf8011f14>
   11f9c:	18c9883a 	add	r4,r3,r3
   11fa0:	2109883a 	add	r4,r4,r4
   11fa4:	1109883a 	add	r4,r2,r4
   11fa8:	21802215 	stw	r6,136(r4)
   11fac:	01800044 	movi	r6,1
   11fb0:	12406217 	ldw	r9,392(r2)
   11fb4:	30cc983a 	sll	r6,r6,r3
   11fb8:	4992b03a 	or	r9,r9,r6
   11fbc:	12406215 	stw	r9,392(r2)
   11fc0:	21c04215 	stw	r7,264(r4)
   11fc4:	01000084 	movi	r4,2
   11fc8:	893fd21e 	bne	r17,r4,11f14 <__alt_exception_stack_pointer+0xf8011f14>
   11fcc:	11006317 	ldw	r4,396(r2)
   11fd0:	218cb03a 	or	r6,r4,r6
   11fd4:	11806315 	stw	r6,396(r2)
   11fd8:	003fce06 	br	11f14 <__alt_exception_stack_pointer+0xf8011f14>
   11fdc:	18805304 	addi	r2,r3,332
   11fe0:	18805215 	stw	r2,328(r3)
   11fe4:	003fc606 	br	11f00 <__alt_exception_stack_pointer+0xf8011f00>
   11fe8:	00bfffc4 	movi	r2,-1
   11fec:	003fd006 	br	11f30 <__alt_exception_stack_pointer+0xf8011f30>

00011ff0 <__call_exitprocs>:
   11ff0:	defff504 	addi	sp,sp,-44
   11ff4:	df000915 	stw	fp,36(sp)
   11ff8:	dd400615 	stw	r21,24(sp)
   11ffc:	dc800315 	stw	r18,12(sp)
   12000:	dfc00a15 	stw	ra,40(sp)
   12004:	ddc00815 	stw	r23,32(sp)
   12008:	dd800715 	stw	r22,28(sp)
   1200c:	dd000515 	stw	r20,20(sp)
   12010:	dcc00415 	stw	r19,16(sp)
   12014:	dc400215 	stw	r17,8(sp)
   12018:	dc000115 	stw	r16,4(sp)
   1201c:	d9000015 	stw	r4,0(sp)
   12020:	2839883a 	mov	fp,r5
   12024:	04800044 	movi	r18,1
   12028:	057fffc4 	movi	r21,-1
   1202c:	00800074 	movhi	r2,1
   12030:	1091e404 	addi	r2,r2,18320
   12034:	12000017 	ldw	r8,0(r2)
   12038:	45005217 	ldw	r20,328(r8)
   1203c:	44c05204 	addi	r19,r8,328
   12040:	a0001c26 	beq	r20,zero,120b4 <__call_exitprocs+0xc4>
   12044:	a0800117 	ldw	r2,4(r20)
   12048:	15ffffc4 	addi	r23,r2,-1
   1204c:	b8000d16 	blt	r23,zero,12084 <__call_exitprocs+0x94>
   12050:	14000044 	addi	r16,r2,1
   12054:	8421883a 	add	r16,r16,r16
   12058:	8421883a 	add	r16,r16,r16
   1205c:	84402004 	addi	r17,r16,128
   12060:	a463883a 	add	r17,r20,r17
   12064:	a421883a 	add	r16,r20,r16
   12068:	e0001e26 	beq	fp,zero,120e4 <__call_exitprocs+0xf4>
   1206c:	80804017 	ldw	r2,256(r16)
   12070:	e0801c26 	beq	fp,r2,120e4 <__call_exitprocs+0xf4>
   12074:	bdffffc4 	addi	r23,r23,-1
   12078:	843fff04 	addi	r16,r16,-4
   1207c:	8c7fff04 	addi	r17,r17,-4
   12080:	bd7ff91e 	bne	r23,r21,12068 <__alt_exception_stack_pointer+0xf8012068>
   12084:	00800034 	movhi	r2,0
   12088:	108a1b04 	addi	r2,r2,10348
   1208c:	10000926 	beq	r2,zero,120b4 <__call_exitprocs+0xc4>
   12090:	a0800117 	ldw	r2,4(r20)
   12094:	1000301e 	bne	r2,zero,12158 <__call_exitprocs+0x168>
   12098:	a0800017 	ldw	r2,0(r20)
   1209c:	10003226 	beq	r2,zero,12168 <__call_exitprocs+0x178>
   120a0:	a009883a 	mov	r4,r20
   120a4:	98800015 	stw	r2,0(r19)
   120a8:	000286c0 	call	286c <free>
   120ac:	9d000017 	ldw	r20,0(r19)
   120b0:	a03fe41e 	bne	r20,zero,12044 <__alt_exception_stack_pointer+0xf8012044>
   120b4:	dfc00a17 	ldw	ra,40(sp)
   120b8:	df000917 	ldw	fp,36(sp)
   120bc:	ddc00817 	ldw	r23,32(sp)
   120c0:	dd800717 	ldw	r22,28(sp)
   120c4:	dd400617 	ldw	r21,24(sp)
   120c8:	dd000517 	ldw	r20,20(sp)
   120cc:	dcc00417 	ldw	r19,16(sp)
   120d0:	dc800317 	ldw	r18,12(sp)
   120d4:	dc400217 	ldw	r17,8(sp)
   120d8:	dc000117 	ldw	r16,4(sp)
   120dc:	dec00b04 	addi	sp,sp,44
   120e0:	f800283a 	ret
   120e4:	a0800117 	ldw	r2,4(r20)
   120e8:	80c00017 	ldw	r3,0(r16)
   120ec:	10bfffc4 	addi	r2,r2,-1
   120f0:	15c01426 	beq	r2,r23,12144 <__call_exitprocs+0x154>
   120f4:	80000015 	stw	zero,0(r16)
   120f8:	183fde26 	beq	r3,zero,12074 <__alt_exception_stack_pointer+0xf8012074>
   120fc:	95c8983a 	sll	r4,r18,r23
   12100:	a0806217 	ldw	r2,392(r20)
   12104:	a5800117 	ldw	r22,4(r20)
   12108:	2084703a 	and	r2,r4,r2
   1210c:	10000b26 	beq	r2,zero,1213c <__call_exitprocs+0x14c>
   12110:	a0806317 	ldw	r2,396(r20)
   12114:	2088703a 	and	r4,r4,r2
   12118:	20000c1e 	bne	r4,zero,1214c <__call_exitprocs+0x15c>
   1211c:	89400017 	ldw	r5,0(r17)
   12120:	d9000017 	ldw	r4,0(sp)
   12124:	183ee83a 	callr	r3
   12128:	a0800117 	ldw	r2,4(r20)
   1212c:	15bfbf1e 	bne	r2,r22,1202c <__alt_exception_stack_pointer+0xf801202c>
   12130:	98800017 	ldw	r2,0(r19)
   12134:	153fcf26 	beq	r2,r20,12074 <__alt_exception_stack_pointer+0xf8012074>
   12138:	003fbc06 	br	1202c <__alt_exception_stack_pointer+0xf801202c>
   1213c:	183ee83a 	callr	r3
   12140:	003ff906 	br	12128 <__alt_exception_stack_pointer+0xf8012128>
   12144:	a5c00115 	stw	r23,4(r20)
   12148:	003feb06 	br	120f8 <__alt_exception_stack_pointer+0xf80120f8>
   1214c:	89000017 	ldw	r4,0(r17)
   12150:	183ee83a 	callr	r3
   12154:	003ff406 	br	12128 <__alt_exception_stack_pointer+0xf8012128>
   12158:	a0800017 	ldw	r2,0(r20)
   1215c:	a027883a 	mov	r19,r20
   12160:	1029883a 	mov	r20,r2
   12164:	003fb606 	br	12040 <__alt_exception_stack_pointer+0xf8012040>
   12168:	0005883a 	mov	r2,zero
   1216c:	003ffb06 	br	1215c <__alt_exception_stack_pointer+0xf801215c>

00012170 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12170:	defffd04 	addi	sp,sp,-12
   12174:	df000215 	stw	fp,8(sp)
   12178:	df000204 	addi	fp,sp,8
   1217c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12180:	0001883a 	nop
   12184:	e0bfff17 	ldw	r2,-4(fp)
   12188:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1218c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12190:	10000226 	beq	r2,zero,1219c <_exit+0x2c>
    ALT_SIM_FAIL();
   12194:	002af070 	cmpltui	zero,zero,43969
   12198:	00000106 	br	121a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1219c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   121a0:	003fff06 	br	121a0 <__alt_exception_stack_pointer+0xf80121a0>
