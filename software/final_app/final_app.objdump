
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00018178 memsz 0x00018178 flags r-x
    LOAD off    0x00019198 vaddr 0x00018198 paddr 0x0001a4f0 align 2**12
         filesz 0x00002358 memsz 0x00002358 flags rw-
    LOAD off    0x0001b848 vaddr 0x0001c848 paddr 0x0001c848 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001714c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e10  00017388  00017388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002358  00018198  0001a4f0  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  0001c848  0001c848  0001b848  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001c9c8  0001c9c8  0001b4f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001b4f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001288  00000000  00000000  0001b518  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ad0d  00000000  00000000  0001c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b2d9  00000000  00000000  000474ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e524  00000000  00000000  00052786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002eb8  00000000  00000000  00060cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000491d  00000000  00000000  00063b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b535  00000000  00000000  00068481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000839b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001af8  00000000  00000000  000839f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00089362  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00089365  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008936a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008936b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008936c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00089377  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008937b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00089386  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0008938f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  000893b7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a99e1  00000000  00000000  0008e210  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00017388 l    d  .rodata	00000000 .rodata
00018198 l    d  .rwdata	00000000 .rwdata
0001c848 l    d  .bss	00000000 .bss
0001c9c8 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gpu.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
0001c848 l     O .bss	00000002 ctl_reg
0001c84a l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
000017e8 l     F .text	00000068 alt_dma_txchan_send
00001850 l     F .text	00000068 alt_dma_rxchan_prepare
0001c864 l     O .bss	00000004 copy_done
000024f4 l     F .text	00000030 done
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00017d00 l     O .rodata	00000108 two_over_pi
00017c80 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00017e48 l     O .rodata	00000010 init_jk
00017e08 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0001887c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00017fa2 l     O .rodata	00000010 zeroes.4404
0000b598 l     F .text	000000bc __sbprintf
00017fb2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000b7a8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
0000d058 l     F .text	000001e0 print_e
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000de38 l     F .text	00000008 __fp_unlock
0000de4c l     F .text	0000019c __sinit.part.1
0000dfe8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000190c8 l     O .rwdata	00000020 lc_ctype_charset
000190a8 l     O .rwdata	00000020 lc_message_charset
000190e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017fe0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010cec l     F .text	000000fc __sprint_r.part.0
00018104 l     O .rodata	00000010 zeroes.4349
00012328 l     F .text	000000bc __sbprintf
00018114 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 alt_close.c
000139e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013af8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00013b24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00013bb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013cd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013dc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013eb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013f9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a4e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000143ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000144d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001460c l     F .text	00000034 alt_dev_reg
000192c8 l     O .rwdata	000000a4 copy_dma_priv
0001936c l     O .rwdata	0000001c copy_dma_tx
00019388 l     O .rwdata	0000001c copy_dma_rx
000193a4 l     O .rwdata	00001060 jtag_uart_0
0001a404 l     O .rwdata	00000054 pixel_dma
0001a458 l     O .rwdata	00000044 vga_resampler
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
000149bc l     F .text	00000034 alt_dma_txchan_reg
000149f0 l     F .text	00000034 alt_dma_rxchan_reg
00014b1c l     F .text	0000009c alt_avalon_dma_launch_txonly
00014bb8 l     F .text	0000009c alt_avalon_dma_launch_rxonly
00014c54 l     F .text	00000344 alt_avalon_dma_ioctl
0001530c l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000157a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000159b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015fe8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016380 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000167e0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00016940 l     F .text	0000003c alt_get_errno
0001697c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001c89c g     O .bss	00000004 alt_instruction_exception_handler
000102f4 g     F .text	00000074 _mprec_log10
000103e0 g     F .text	0000008c __any_on
000128dc g     F .text	00000054 _isatty_r
00017fec g     O .rodata	00000028 __mprec_tinytens
000140b4 g     F .text	0000007c alt_main
00010c5c g     F .text	00000090 strcpy
000090d8 g     F .text	000000c0 _puts_r
0001c8c8 g     O .bss	00000100 alt_irq
00005618 g     F .text	00000014 fabs
00012930 g     F .text	00000060 _lseek_r
00002524 g     F .text	00000128 transfer
0001a4f0 g       *ABS*	00000000 __flash_rwdata_start
00006e28 g     F .text	00000088 .hidden __eqdf2
0001c9c8 g       *ABS*	00000000 __alt_heap_start
0001a4a0 g     O .rwdata	00000004 dma
0000909c g     F .text	0000003c printf
00012b48 g     F .text	0000009c _wcrtomb_r
0001a49c g     O .rwdata	00000004 gpu
0001c856 g     O .bss	00000002 usb_ctl_val
00010b1c g     F .text	0000005c __sseek
0000e198 g     F .text	00000010 __sinit
0000d238 g     F .text	000001a4 fcvtbuf
000154cc g     F .text	000000b4 alt_avalon_dma_init
0001c850 g     O .bss	00000004 keycode
000129f0 g     F .text	00000140 __swbuf_r
0000ec6c g     F .text	0000007c _setlocale_r
0000dff0 g     F .text	00000078 __sfmoreglue
00014154 g     F .text	00000024 __malloc_unlock
000036c0 g     F .text	00000088 UsbGetRetryCnt
000018b8 g     F .text	000003c0 draw_tree
0000f130 g     F .text	0000015c memmove
000007b8 g     F .text	000000b0 IO_init
0000e180 g     F .text	00000018 _cleanup
0000f3b4 g     F .text	000000a8 _Balloc
00000650 g     F .text	00000168 draw_char
00006eb0 g     F .text	000000dc .hidden __gtdf2
00016d68 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00014428 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
00012880 g     F .text	0000005c _fstat_r
0001c874 g     O .bss	00000004 errno
0000562c g     F .text	000001ec floor
00010a98 g     F .text	00000008 __seofread
0001c888 g     O .bss	00000004 alt_argv
0002249c g       *ABS*	00000000 _gp
000144a0 g     F .text	00000030 usleep
00013bf0 g     F .text	00000054 alt_dma_txchan_open
00019148 g     O .rwdata	00000180 alt_fd_list
000039a4 g     F .text	0000076c __ieee754_rem_pio2
00013c44 g     F .text	00000090 alt_find_dev
0000efe8 g     F .text	00000148 memcpy
00009298 g     F .text	00000008 _times_r
0000de40 g     F .text	0000000c _cleanup_r
00008174 g     F .text	000000dc .hidden __floatsidf
000168c4 g     F .text	0000007c alt_io_redirect
0001c858 g     O .bss	00000001 data_size
000138f0 g     F .text	000000f4 .hidden __ltdf2
00017388 g       *ABS*	00000000 __DTOR_END__
00009198 g     F .text	00000014 puts
00016f58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000109d0 g     F .text	00000074 __fpclassifyd
00010250 g     F .text	000000a4 __ratio
0001230c g     F .text	0000001c __vfiprintf_internal
00015ba8 g     F .text	0000021c altera_avalon_jtag_uart_read
00008838 g     F .text	00000014 malloc
0000906c g     F .text	00000030 _printf_r
00005ac8 g     F .text	00000064 .hidden __udivsi3
00013e04 g     F .text	000000ac isatty
0001803c g     O .rodata	000000c8 __mprec_tens
0000ece8 g     F .text	0000000c __locale_charset
00004110 g     F .text	000004a4 __kernel_cos
000087f8 g     F .text	00000040 gcvtf
0001c870 g     O .bss	00000004 __malloc_top_pad
00002d4c g     F .text	00000268 UsbGetConfigDesc2
000002ec g     F .text	00000074 clear_depth
0001a4b4 g     O .rwdata	00000004 __mb_cur_max
0000ed18 g     F .text	0000000c _localeconv_r
0000f7e8 g     F .text	0000003c __i2b
0000e61c g     F .text	000004c8 __sfvwrite_r
0001c85a g     O .bss	00000002 intStat
000091ac g     F .text	00000054 _sbrk_r
00012990 g     F .text	00000060 _read_r
0001a4cc g     O .rwdata	00000004 alt_max_fd
00012574 g     F .text	000000f0 _fclose_r
0000de08 g     F .text	00000030 fflush
0001c86c g     O .bss	00000004 __malloc_max_sbrked_mem
0000534c g     F .text	000002cc __kernel_sin
000082f8 g     F .text	00000110 .hidden __extendsfdf2
00005bac g     F .text	000008ac .hidden __adddf3
00014a24 g     F .text	000000f8 alt_avalon_dma_launch_bidir
0000fff8 g     F .text	0000010c __b2d
0001332c g     F .text	000005c4 .hidden __umoddi3
00013b60 g     F .text	00000054 alt_dma_rxchan_open
00013fd8 g     F .text	000000dc lseek
0001a4a4 g     O .rwdata	00000004 _global_impure_ptr
0001046c g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
0001c9c8 g       *ABS*	00000000 __bss_end
000166f0 g     F .text	000000f0 alt_iic_isr_register
00016c60 g     F .text	00000108 alt_tick
00012d30 g     F .text	000005fc .hidden __udivdi3
000127dc g     F .text	00000024 _fputwc_r
00018014 g     O .rodata	00000028 __mprec_bigtens
0000f5cc g     F .text	00000104 __s2b
00008250 g     F .text	000000a8 .hidden __floatunsidf
0000fd38 g     F .text	00000060 __mcmp
0000279c g     F .text	00000100 UsbSetAddress
0000e1b8 g     F .text	00000018 __fp_lock_all
000166a4 g     F .text	0000004c alt_ic_irq_enabled
00016bc4 g     F .text	0000009c alt_alarm_stop
0001c890 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00019120 g     O .rwdata	00000028 alt_dev_null
000045b4 g     F .text	00000d98 __kernel_rem_pio2
00016360 g     F .text	00000020 alt_dcache_flush_all
0000f6d0 g     F .text	00000068 __hi0bits
000008f0 g     F .text	00000080 IO_read
000080f4 g     F .text	00000080 .hidden __fixdfsi
0001a4f0 g       *ABS*	00000000 __ram_rwdata_end
0001a4c4 g     O .rwdata	00000008 alt_dev_list
00015160 g     F .text	00000074 alt_avalon_dma_space
0001450c g     F .text	00000100 write
00018198 g       *ABS*	00000000 __ram_rodata_end
00013d10 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000138f0 g     F .text	000000f4 .hidden __ledf2
00003748 g     F .text	00000080 UsbPrintMem
0000fab0 g     F .text	00000140 __pow5mult
00010e00 g     F .text	0000150c ___vfiprintf_internal_r
0001c880 g     O .bss	00000004 __nlocale_changed
00005b2c g     F .text	00000058 .hidden __umodsi3
0001c9c8 g       *ABS*	00000000 end
00000360 g     F .text	000000c4 draw_cube
000156e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00017388 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000d880 g     F .text	00000310 _dcvt
00016060 g     F .text	0000007c alt_avalon_timer_sc_init
000085b0 g     F .text	00000064 .hidden __clzsi2
00015dc4 g     F .text	00000224 altera_avalon_jtag_uart_write
000037c8 g     F .text	000000ec cos
0000e1a8 g     F .text	00000004 __sfp_lock_acquire
0000ef04 g     F .text	000000e4 memchr
000092a0 g     F .text	000022dc ___vfprintf_internal_r
000030b4 g     F .text	00000100 UsbClassRequest
0000e30c g     F .text	00000310 _free_r
0000ecf4 g     F .text	00000010 __locale_mb_cur_max
000151d4 g     F .text	00000138 alt_avalon_dma_send
000171d4 g     F .text	00000180 __call_exitprocs
0001a4d8 g     O .rwdata	00000008 alt_dma_txchan_list
0001c87c g     O .bss	00000004 __mlocale_changed
0001a4ac g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001c894 g     O .bss	00000004 _alt_tick_rate
00000424 g     F .text	0000022c draw_string
000038b4 g     F .text	000000f0 sin
0000d51c g     F .text	00000364 _gcvt
0000fbf0 g     F .text	00000148 __lshift
0001c898 g     O .bss	00000004 _alt_nticks
000141b4 g     F .text	00000104 read
00014678 g     F .text	00000344 alt_sys_init
000170bc g     F .text	00000118 __register_exitproc
0000f824 g     F .text	0000028c __multiply
00015a50 g     F .text	00000068 altera_avalon_jtag_uart_close
00005b84 g     F .text	00000028 .hidden __mulsi3
00018198 g       *ABS*	00000000 __ram_rwdata_start
00017388 g       *ABS*	00000000 __ram_rodata_start
0001c8a0 g     O .bss	00000028 __malloc_current_mallinfo
00010104 g     F .text	0000014c __d2b
0000289c g     F .text	00000148 UsbGetDeviceDesc1
00015580 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016e94 g     F .text	000000c4 alt_get_fd
00016208 g     F .text	00000158 alt_busy_sleep
00018198 g     O .rwdata	000006e4 font_data
00012444 g     F .text	00000054 _close_r
00017040 g     F .text	0000007c memcmp
00015640 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001c9c8 g       *ABS*	00000000 __alt_stack_base
00015690 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000b654 g     F .text	00000154 __swsetup_r
00006458 g     F .text	000009d0 .hidden __divdf3
0000e068 g     F .text	00000118 __sfp
00010368 g     F .text	00000078 __copybits
00018ca0 g     O .rwdata	00000408 __malloc_av_
0000e1b4 g     F .text	00000004 __sinit_lock_release
00006f8c g     F .text	0000086c .hidden __muldf3
00010a44 g     F .text	00000054 __sread
0000363c g     F .text	00000084 UsbWaitTDListDone
00016d8c g     F .text	00000108 alt_find_file
000163bc g     F .text	000000a4 alt_dev_llist_insert
00014130 g     F .text	00000024 __malloc_lock
0001433c g     F .text	000000b0 sbrk
0000ddac g     F .text	0000005c _fflush_r
00012498 g     F .text	000000dc _calloc_r
0001c85c g     O .bss	00000001 hot_plug_count
0001c848 g       *ABS*	00000000 __bss_start
0000f28c g     F .text	00000128 memset
00001c78 g     F .text	0000087c main
00008660 g     F .text	00000024 fcvt
00014fe0 g     F .text	00000048 alt_avalon_dma_rx_ioctl
0001c88c g     O .bss	00000004 alt_envp
0001c868 g     O .bss	00000004 __malloc_max_total_mem
000155e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002fb4 g     F .text	00000100 UsbSetConfig
00012b30 g     F .text	00000018 __swbuf
0000d3dc g     F .text	00000140 ecvtbuf
00010b78 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
00012664 g     F .text	00000014 fclose
00008408 g     F .text	000001a8 .hidden __truncdfsf2
0000b9d0 g     F .text	00001688 _dtoa_r
00008860 g     F .text	0000080c _malloc_r
00012ca4 g     F .text	00000030 __ascii_wctomb
0001a4e0 g     O .rwdata	00000004 alt_errno
00008700 g     F .text	00000058 ecvtf
0000eae4 g     F .text	000000c4 _fwalk
000059d0 g     F .text	00000084 .hidden __divsi3
0000e1e8 g     F .text	00000124 _malloc_trim_r
000031b4 g     F .text	00000148 UsbGetHidDesc
00017388 g       *ABS*	00000000 __CTOR_END__
00010b80 g     F .text	000000dc strcmp
00017388 g       *ABS*	00000000 __flash_rodata_start
00017388 g       *ABS*	00000000 __DTOR_LIST__
000059b4 g     F .text	0000001c copysign
00006e28 g     F .text	00000088 .hidden __nedf2
000026a4 g     F .text	00000044 UsbRead
00000970 g     F .text	00000300 loop_keyboard
00014640 g     F .text	00000038 alt_irq_init
000142b8 g     F .text	00000084 alt_release_fd
00017e58 g     O .rodata	00000100 .hidden __clz_tab
0001c878 g     O .bss	00000004 _PathLocale
00016ff4 g     F .text	00000014 atexit
000123e4 g     F .text	00000060 _write_r
0000ed24 g     F .text	00000018 setlocale
0001a4a8 g     O .rwdata	00000004 _impure_ptr
0001c884 g     O .bss	00000004 alt_argc
0000db90 g     F .text	0000021c __sflush_r
00005818 g     F .text	0000019c scalbn
000164c0 g     F .text	00000060 _do_dtors
0000ed10 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000ff94 g     F .text	00000064 __ulp
0000e1d0 g     F .text	00000018 __fp_unlock_all
0001c854 g     O .bss	00000001 toggle
000086dc g     F .text	00000024 ecvt
0001a4bc g     O .rwdata	00000008 alt_fs_list
0001c860 g     O .bss	00000004 offset
000032fc g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000ed3c g     F .text	0000000c localeconv
00016540 g     F .text	00000050 alt_ic_isr_register
0001a4f0 g       *ABS*	00000000 _edata
0001c9c8 g       *ABS*	00000000 _end
0000264c g     F .text	00000058 UsbWrite
00012678 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00015ab8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001c85e g     O .bss	00000002 code
00016618 g     F .text	0000008c alt_ic_irq_disable
00010aa0 g     F .text	0000007c __swrite
0001a4b0 g     O .rwdata	00000004 __malloc_trim_threshold
00008684 g     F .text	00000058 fcvtf
0000ed04 g     F .text	0000000c __locale_msgcharset
0001c84c g     O .bss	00000002 fs_device
00017008 g     F .text	00000038 exit
0000eba8 g     F .text	000000c4 _fwalk_reent
0000fd98 g     F .text	000001fc __mdiff
00005a54 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000e1ac g     F .text	00000004 __sfp_lock_release
00008758 g     F .text	000000a0 gcvt
00000868 g     F .text	00000088 IO_write
00017354 g     F .text	00000034 _exit
000160dc g     F .text	0000012c alt_alarm_start
0000ed48 g     F .text	000001bc __smakebuf_r
00009200 g     F .text	00000098 strlen
00016a68 g     F .text	0000015c open
00006eb0 g     F .text	000000dc .hidden __gedf2
00008614 g     F .text	0000004c clock
0001a4b8 g     O .rwdata	00000004 __wctomb
00010de8 g     F .text	00000018 __sprint_r
00016520 g     F .text	00000020 alt_icache_flush_all
00016590 g     F .text	00000088 alt_ic_irq_enable
0000b57c g     F .text	0000001c __vfprintf_internal
00012cd4 g     F .text	0000005c _wctomb_r
00015028 g     F .text	00000138 alt_avalon_dma_prepare
00000278 g     F .text	00000074 clear_screen
000077f8 g     F .text	000008fc .hidden __subdf3
00000c70 g     F .text	00000b78 init_keyboard
0001a4d0 g     O .rwdata	00000008 alt_dma_rxchan_list
0000f738 g     F .text	000000b0 __lo0bits
00002bbc g     F .text	00000190 UsbGetConfigDesc1
0001a4e8 g     O .rwdata	00000008 alt_alarm_list
00016460 g     F .text	00000060 _do_ctors
000026e8 g     F .text	000000b4 UsbSoftReset
00012be4 g     F .text	000000c0 wcrtomb
00013a20 g     F .text	000000d8 close
000029e4 g     F .text	000001d8 UsbGetDeviceDesc2
00013f18 g     F .text	00000084 alt_load
00014f98 g     F .text	00000048 alt_avalon_dma_tx_ioctl
00012800 g     F .text	00000080 fputwc
0000884c g     F .text	00000014 free
0000e1b0 g     F .text	00000004 __sinit_lock_acquire
0000f484 g     F .text	00000148 __multadd
0000f45c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008000b4 	movhi	r2,2
 14c:	10b23204 	addi	r2,r2,-14136
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008000b4 	movhi	r2,2
 164:	10b23204 	addi	r2,r2,-14136
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a90017 	ldw	r2,-23552(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a90017 	ldw	r2,-23552(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d6892714 	ori	gp,gp,9372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10b21214 	ori	r2,r2,51272

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18f27214 	ori	r3,r3,51656

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	0013f180 	call	13f18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00140b40 	call	140b4 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <clear_screen>:
{0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0},
{0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
{0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0},
{1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0}};

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
     278:	defffd04 	addi	sp,sp,-12
     27c:	df000215 	stw	fp,8(sp)
     280:	df000204 	addi	fp,sp,8
     284:	e13ffe15 	stw	r4,-8(fp)
     288:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
     28c:	e0bffe17 	ldw	r2,-8(fp)
     290:	00c00084 	movi	r3,2
     294:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
     298:	e0bffe17 	ldw	r2,-8(fp)
     29c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     2a0:	e0bffe17 	ldw	r2,-8(fp)
     2a4:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10800058 	cmpnei	r2,r2,1
     2bc:	1000041e 	bne	r2,zero,2d0 <clear_screen+0x58>
		while (gpu->done == 0) {
     2c0:	0001883a 	nop
     2c4:	e0bffe17 	ldw	r2,-8(fp)
     2c8:	10800217 	ldw	r2,8(r2)
     2cc:	103ffd26 	beq	r2,zero,2c4 <__alt_exception_stack_pointer+0xf80002c4>
		}
	}
	gpu->mode = GPU_MODE_IDLE;
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	10000815 	stw	zero,32(r2)
}
     2d8:	0001883a 	nop
     2dc:	e037883a 	mov	sp,fp
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00104 	addi	sp,sp,4
     2e8:	f800283a 	ret

000002ec <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
     2ec:	defffd04 	addi	sp,sp,-12
     2f0:	df000215 	stw	fp,8(sp)
     2f4:	df000204 	addi	fp,sp,8
     2f8:	e13ffe15 	stw	r4,-8(fp)
     2fc:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	00c000c4 	movi	r3,3
     308:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
     30c:	e0bffe17 	ldw	r2,-8(fp)
     310:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	00c00044 	movi	r3,1
     324:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
     328:	e0bfff17 	ldw	r2,-4(fp)
     32c:	10800058 	cmpnei	r2,r2,1
     330:	1000041e 	bne	r2,zero,344 <clear_depth+0x58>
		while (gpu->done == 0) {
     334:	0001883a 	nop
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	10800217 	ldw	r2,8(r2)
     340:	103ffd26 	beq	r2,zero,338 <__alt_exception_stack_pointer+0xf8000338>
		}
	}
	gpu->mode = GPU_MODE_IDLE;
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	10000815 	stw	zero,32(r2)
}
     34c:	0001883a 	nop
     350:	e037883a 	mov	sp,fp
     354:	df000017 	ldw	fp,0(sp)
     358:	dec00104 	addi	sp,sp,4
     35c:	f800283a 	ret

00000360 <draw_cube>:

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
     360:	defffb04 	addi	sp,sp,-20
     364:	df000415 	stw	fp,16(sp)
     368:	df000404 	addi	fp,sp,16
     36c:	e13ffc15 	stw	r4,-16(fp)
     370:	e17ffd15 	stw	r5,-12(fp)
     374:	e1bffe15 	stw	r6,-8(fp)
     378:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	00c00044 	movi	r3,1
     384:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
     388:	e0bffc17 	ldw	r2,-16(fp)
     38c:	e0c00217 	ldw	r3,8(fp)
     390:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	1006923a 	slli	r3,r2,8
     39c:	e0bffc17 	ldw	r2,-16(fp)
     3a0:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	1006923a 	slli	r3,r2,8
     3ac:	e0bffc17 	ldw	r2,-16(fp)
     3b0:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	1006923a 	slli	r3,r2,8
     3bc:	e0bffc17 	ldw	r2,-16(fp)
     3c0:	10c00615 	stw	r3,24(r2)
	gpu->z = (z) * (FP_SCALE);
     3c4:	e0800117 	ldw	r2,4(fp)
     3c8:	1006923a 	slli	r3,r2,8
     3cc:	e0bffc17 	ldw	r2,-16(fp)
     3d0:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     3dc:	e0bffc17 	ldw	r2,-16(fp)
     3e0:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     3e4:	e0bffc17 	ldw	r2,-16(fp)
     3e8:	00c00044 	movi	r3,1
     3ec:	10c00115 	stw	r3,4(r2)
	while (gpu->done == 0) {
     3f0:	0001883a 	nop
     3f4:	e0bffc17 	ldw	r2,-16(fp)
     3f8:	10800217 	ldw	r2,8(r2)
     3fc:	103ffd26 	beq	r2,zero,3f4 <__alt_exception_stack_pointer+0xf80003f4>

	}

	gpu->done = 0;
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
     408:	e0bffc17 	ldw	r2,-16(fp)
     40c:	10000815 	stw	zero,32(r2)

}
     410:	0001883a 	nop
     414:	e037883a 	mov	sp,fp
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00104 	addi	sp,sp,4
     420:	f800283a 	ret

00000424 <draw_string>:

void draw_string(frame_buffer_t* frame, char* s, int num_chars, int x, int y) {
     424:	defff404 	addi	sp,sp,-48
     428:	dfc00b15 	stw	ra,44(sp)
     42c:	df000a15 	stw	fp,40(sp)
     430:	dc400915 	stw	r17,36(sp)
     434:	dc000815 	stw	r16,32(sp)
     438:	df000a04 	addi	fp,sp,40
     43c:	e13ffa15 	stw	r4,-24(fp)
     440:	e17ffb15 	stw	r5,-20(fp)
     444:	e1bffc15 	stw	r6,-16(fp)
     448:	e1fffd15 	stw	r7,-12(fp)
	int x_offset = 0;
     44c:	e03ff615 	stw	zero,-40(fp)
	for(int i = 0; i < num_chars; i++) {
     450:	e03ff715 	stw	zero,-36(fp)
     454:	00007306 	br	624 <draw_string+0x200>
		if(s[i] == '.') {
     458:	e0bff717 	ldw	r2,-36(fp)
     45c:	e0fffb17 	ldw	r3,-20(fp)
     460:	1885883a 	add	r2,r3,r2
     464:	10800003 	ldbu	r2,0(r2)
     468:	10803fcc 	andi	r2,r2,255
     46c:	1080201c 	xori	r2,r2,128
     470:	10bfe004 	addi	r2,r2,-128
     474:	10800b98 	cmpnei	r2,r2,46
     478:	10001c1e 	bne	r2,zero,4ec <draw_string+0xc8>
			pixel_t black = {0, 0, 0, 0};
     47c:	e03ff805 	stb	zero,-32(fp)
     480:	e03ff845 	stb	zero,-31(fp)
     484:	e03ff885 	stb	zero,-30(fp)
     488:	e03ff8c5 	stb	zero,-29(fp)
			frame->D2[y + 6][x + x_offset] = black;
     48c:	e0800217 	ldw	r2,8(fp)
     490:	11000184 	addi	r4,r2,6
     494:	e0fffd17 	ldw	r3,-12(fp)
     498:	e0bff617 	ldw	r2,-40(fp)
     49c:	18a3883a 	add	r17,r3,r2
     4a0:	e43ffa17 	ldw	r16,-24(fp)
     4a4:	01405004 	movi	r5,320
     4a8:	0005b840 	call	5b84 <__mulsi3>
     4ac:	1445883a 	add	r2,r2,r17
     4b0:	1085883a 	add	r2,r2,r2
     4b4:	1085883a 	add	r2,r2,r2
     4b8:	8085883a 	add	r2,r16,r2
     4bc:	e0fff803 	ldbu	r3,-32(fp)
     4c0:	10c00005 	stb	r3,0(r2)
     4c4:	e0fff843 	ldbu	r3,-31(fp)
     4c8:	10c00045 	stb	r3,1(r2)
     4cc:	e0fff883 	ldbu	r3,-30(fp)
     4d0:	10c00085 	stb	r3,2(r2)
     4d4:	e0fff8c3 	ldbu	r3,-29(fp)
     4d8:	10c000c5 	stb	r3,3(r2)
			x_offset += 2;
     4dc:	e0bff617 	ldw	r2,-40(fp)
     4e0:	10800084 	addi	r2,r2,2
     4e4:	e0bff615 	stw	r2,-40(fp)
     4e8:	00004b06 	br	618 <draw_string+0x1f4>
		} else if(s[i] == ':') {
     4ec:	e0bff717 	ldw	r2,-36(fp)
     4f0:	e0fffb17 	ldw	r3,-20(fp)
     4f4:	1885883a 	add	r2,r3,r2
     4f8:	10800003 	ldbu	r2,0(r2)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	1080201c 	xori	r2,r2,128
     504:	10bfe004 	addi	r2,r2,-128
     508:	10800e98 	cmpnei	r2,r2,58
     50c:	1000301e 	bne	r2,zero,5d0 <draw_string+0x1ac>
			pixel_t black = {0, 0, 0, 0};
     510:	e03ff905 	stb	zero,-28(fp)
     514:	e03ff945 	stb	zero,-27(fp)
     518:	e03ff985 	stb	zero,-26(fp)
     51c:	e03ff9c5 	stb	zero,-25(fp)
			frame->D2[y + 6][x + x_offset] = black;
     520:	e0800217 	ldw	r2,8(fp)
     524:	11000184 	addi	r4,r2,6
     528:	e0fffd17 	ldw	r3,-12(fp)
     52c:	e0bff617 	ldw	r2,-40(fp)
     530:	18a3883a 	add	r17,r3,r2
     534:	e43ffa17 	ldw	r16,-24(fp)
     538:	01405004 	movi	r5,320
     53c:	0005b840 	call	5b84 <__mulsi3>
     540:	1445883a 	add	r2,r2,r17
     544:	1085883a 	add	r2,r2,r2
     548:	1085883a 	add	r2,r2,r2
     54c:	8085883a 	add	r2,r16,r2
     550:	e0fff903 	ldbu	r3,-28(fp)
     554:	10c00005 	stb	r3,0(r2)
     558:	e0fff943 	ldbu	r3,-27(fp)
     55c:	10c00045 	stb	r3,1(r2)
     560:	e0fff983 	ldbu	r3,-26(fp)
     564:	10c00085 	stb	r3,2(r2)
     568:	e0fff9c3 	ldbu	r3,-25(fp)
     56c:	10c000c5 	stb	r3,3(r2)
			frame->D2[y + 1][x + x_offset] = black;
     570:	e0800217 	ldw	r2,8(fp)
     574:	11000044 	addi	r4,r2,1
     578:	e0fffd17 	ldw	r3,-12(fp)
     57c:	e0bff617 	ldw	r2,-40(fp)
     580:	18a3883a 	add	r17,r3,r2
     584:	e43ffa17 	ldw	r16,-24(fp)
     588:	01405004 	movi	r5,320
     58c:	0005b840 	call	5b84 <__mulsi3>
     590:	1445883a 	add	r2,r2,r17
     594:	1085883a 	add	r2,r2,r2
     598:	1085883a 	add	r2,r2,r2
     59c:	8085883a 	add	r2,r16,r2
     5a0:	e0fff903 	ldbu	r3,-28(fp)
     5a4:	10c00005 	stb	r3,0(r2)
     5a8:	e0fff943 	ldbu	r3,-27(fp)
     5ac:	10c00045 	stb	r3,1(r2)
     5b0:	e0fff983 	ldbu	r3,-26(fp)
     5b4:	10c00085 	stb	r3,2(r2)
     5b8:	e0fff9c3 	ldbu	r3,-25(fp)
     5bc:	10c000c5 	stb	r3,3(r2)
			x_offset += 2;
     5c0:	e0bff617 	ldw	r2,-40(fp)
     5c4:	10800084 	addi	r2,r2,2
     5c8:	e0bff615 	stw	r2,-40(fp)
     5cc:	00001206 	br	618 <draw_string+0x1f4>
		} else {
			draw_char(frame, s[i], x+x_offset, y);
     5d0:	e0bff717 	ldw	r2,-36(fp)
     5d4:	e0fffb17 	ldw	r3,-20(fp)
     5d8:	1885883a 	add	r2,r3,r2
     5dc:	10800003 	ldbu	r2,0(r2)
     5e0:	11003fcc 	andi	r4,r2,255
     5e4:	2100201c 	xori	r4,r4,128
     5e8:	213fe004 	addi	r4,r4,-128
     5ec:	e0fffd17 	ldw	r3,-12(fp)
     5f0:	e0bff617 	ldw	r2,-40(fp)
     5f4:	1885883a 	add	r2,r3,r2
     5f8:	e1c00217 	ldw	r7,8(fp)
     5fc:	100d883a 	mov	r6,r2
     600:	200b883a 	mov	r5,r4
     604:	e13ffa17 	ldw	r4,-24(fp)
     608:	00006500 	call	650 <draw_char>
			x_offset += 8;
     60c:	e0bff617 	ldw	r2,-40(fp)
     610:	10800204 	addi	r2,r2,8
     614:	e0bff615 	stw	r2,-40(fp)

}

void draw_string(frame_buffer_t* frame, char* s, int num_chars, int x, int y) {
	int x_offset = 0;
	for(int i = 0; i < num_chars; i++) {
     618:	e0bff717 	ldw	r2,-36(fp)
     61c:	10800044 	addi	r2,r2,1
     620:	e0bff715 	stw	r2,-36(fp)
     624:	e0fff717 	ldw	r3,-36(fp)
     628:	e0bffc17 	ldw	r2,-16(fp)
     62c:	18bf8a16 	blt	r3,r2,458 <__alt_exception_stack_pointer+0xf8000458>
		} else {
			draw_char(frame, s[i], x+x_offset, y);
			x_offset += 8;
		}
	}
}
     630:	0001883a 	nop
     634:	e6fffe04 	addi	sp,fp,-8
     638:	dfc00317 	ldw	ra,12(sp)
     63c:	df000217 	ldw	fp,8(sp)
     640:	dc400117 	ldw	r17,4(sp)
     644:	dc000017 	ldw	r16,0(sp)
     648:	dec00404 	addi	sp,sp,16
     64c:	f800283a 	ret

00000650 <draw_char>:

void draw_char(frame_buffer_t* frame, char c, int x, int y) {
     650:	defff404 	addi	sp,sp,-48
     654:	dfc00b15 	stw	ra,44(sp)
     658:	df000a15 	stw	fp,40(sp)
     65c:	dc400915 	stw	r17,36(sp)
     660:	dc000815 	stw	r16,32(sp)
     664:	df000a04 	addi	fp,sp,40
     668:	e13ffa15 	stw	r4,-24(fp)
     66c:	2805883a 	mov	r2,r5
     670:	e1bffc15 	stw	r6,-16(fp)
     674:	e1fffd15 	stw	r7,-12(fp)
     678:	e0bffb05 	stb	r2,-20(fp)
	int offset = 0;
     67c:	e03ff615 	stw	zero,-40(fp)
	if(c >= 'A') {
     680:	e0bffb07 	ldb	r2,-20(fp)
     684:	10801050 	cmplti	r2,r2,65
     688:	1000041e 	bne	r2,zero,69c <draw_char+0x4c>
		offset = c - 'A';
     68c:	e0bffb07 	ldb	r2,-20(fp)
     690:	10bfefc4 	addi	r2,r2,-65
     694:	e0bff615 	stw	r2,-40(fp)
     698:	00000306 	br	6a8 <draw_char+0x58>
	} else {
		offset = c - '0' + 26;
     69c:	e0bffb07 	ldb	r2,-20(fp)
     6a0:	10bffa84 	addi	r2,r2,-22
     6a4:	e0bff615 	stw	r2,-40(fp)
	}
	pixel_t black = {0, 0, 0, 0};
     6a8:	e03ff905 	stb	zero,-28(fp)
     6ac:	e03ff945 	stb	zero,-27(fp)
     6b0:	e03ff985 	stb	zero,-26(fp)
     6b4:	e03ff9c5 	stb	zero,-25(fp)
	for(int i = 0; i < 7; i++) {
     6b8:	e03ff715 	stw	zero,-36(fp)
     6bc:	00003306 	br	78c <draw_char+0x13c>
		for(int j = 0; j < 7; j++) {
     6c0:	e03ff815 	stw	zero,-32(fp)
     6c4:	00002b06 	br	774 <draw_char+0x124>
			if(font_data[i][j + offset*7]) {
     6c8:	014001c4 	movi	r5,7
     6cc:	e13ff617 	ldw	r4,-40(fp)
     6d0:	0005b840 	call	5b84 <__mulsi3>
     6d4:	1007883a 	mov	r3,r2
     6d8:	e0bff817 	ldw	r2,-32(fp)
     6dc:	18a3883a 	add	r17,r3,r2
     6e0:	040000b4 	movhi	r16,2
     6e4:	84206604 	addi	r16,r16,-32360
     6e8:	e0bff717 	ldw	r2,-36(fp)
     6ec:	01403f04 	movi	r5,252
     6f0:	1009883a 	mov	r4,r2
     6f4:	0005b840 	call	5b84 <__mulsi3>
     6f8:	8085883a 	add	r2,r16,r2
     6fc:	1445883a 	add	r2,r2,r17
     700:	10800003 	ldbu	r2,0(r2)
     704:	10803fcc 	andi	r2,r2,255
     708:	1080201c 	xori	r2,r2,128
     70c:	10bfe004 	addi	r2,r2,-128
     710:	10001526 	beq	r2,zero,768 <draw_char+0x118>
				frame->D2[i + y][j + x] = black;
     714:	e0fff717 	ldw	r3,-36(fp)
     718:	e0bffd17 	ldw	r2,-12(fp)
     71c:	1889883a 	add	r4,r3,r2
     720:	e0fff817 	ldw	r3,-32(fp)
     724:	e0bffc17 	ldw	r2,-16(fp)
     728:	18a3883a 	add	r17,r3,r2
     72c:	e43ffa17 	ldw	r16,-24(fp)
     730:	01405004 	movi	r5,320
     734:	0005b840 	call	5b84 <__mulsi3>
     738:	1445883a 	add	r2,r2,r17
     73c:	1085883a 	add	r2,r2,r2
     740:	1085883a 	add	r2,r2,r2
     744:	8085883a 	add	r2,r16,r2
     748:	e0fff903 	ldbu	r3,-28(fp)
     74c:	10c00005 	stb	r3,0(r2)
     750:	e0fff943 	ldbu	r3,-27(fp)
     754:	10c00045 	stb	r3,1(r2)
     758:	e0fff983 	ldbu	r3,-26(fp)
     75c:	10c00085 	stb	r3,2(r2)
     760:	e0fff9c3 	ldbu	r3,-25(fp)
     764:	10c000c5 	stb	r3,3(r2)
	} else {
		offset = c - '0' + 26;
	}
	pixel_t black = {0, 0, 0, 0};
	for(int i = 0; i < 7; i++) {
		for(int j = 0; j < 7; j++) {
     768:	e0bff817 	ldw	r2,-32(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bff815 	stw	r2,-32(fp)
     774:	e0bff817 	ldw	r2,-32(fp)
     778:	108001d0 	cmplti	r2,r2,7
     77c:	103fd21e 	bne	r2,zero,6c8 <__alt_exception_stack_pointer+0xf80006c8>
		offset = c - 'A';
	} else {
		offset = c - '0' + 26;
	}
	pixel_t black = {0, 0, 0, 0};
	for(int i = 0; i < 7; i++) {
     780:	e0bff717 	ldw	r2,-36(fp)
     784:	10800044 	addi	r2,r2,1
     788:	e0bff715 	stw	r2,-36(fp)
     78c:	e0bff717 	ldw	r2,-36(fp)
     790:	108001d0 	cmplti	r2,r2,7
     794:	103fca1e 	bne	r2,zero,6c0 <__alt_exception_stack_pointer+0xf80006c0>
			if(font_data[i][j + offset*7]) {
				frame->D2[i + y][j + x] = black;
			}
		}
	}
}
     798:	0001883a 	nop
     79c:	e6fffe04 	addi	sp,fp,-8
     7a0:	dfc00317 	ldw	ra,12(sp)
     7a4:	df000217 	ldw	fp,8(sp)
     7a8:	dc400117 	ldw	r17,4(sp)
     7ac:	dc000017 	ldw	r16,0(sp)
     7b0:	dec00404 	addi	sp,sp,16
     7b4:	f800283a 	ret

000007b8 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     7b8:	deffff04 	addi	sp,sp,-4
     7bc:	df000015 	stw	fp,0(sp)
     7c0:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     7c4:	00820034 	movhi	r2,2048
     7c8:	108c1004 	addi	r2,r2,12352
     7cc:	00c00044 	movi	r3,1
     7d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     7d4:	00820034 	movhi	r2,2048
     7d8:	108c1404 	addi	r2,r2,12368
     7dc:	00c00044 	movi	r3,1
     7e0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     7e4:	00820034 	movhi	r2,2048
     7e8:	108c1c04 	addi	r2,r2,12400
     7ec:	00c00044 	movi	r3,1
     7f0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     7f4:	00820034 	movhi	r2,2048
     7f8:	108c1804 	addi	r2,r2,12384
     7fc:	00c00044 	movi	r3,1
     800:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     804:	00820034 	movhi	r2,2048
     808:	108c2404 	addi	r2,r2,12432
     80c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     810:	00820034 	movhi	r2,2048
     814:	108c2004 	addi	r2,r2,12416
     818:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     81c:	00820034 	movhi	r2,2048
     820:	108c1404 	addi	r2,r2,12368
     824:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     828:	00820034 	movhi	r2,2048
     82c:	108c1004 	addi	r2,r2,12352
     830:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     834:	00820034 	movhi	r2,2048
     838:	108c1004 	addi	r2,r2,12352
     83c:	00c00044 	movi	r3,1
     840:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     844:	00820034 	movhi	r2,2048
     848:	108c1404 	addi	r2,r2,12368
     84c:	00c00044 	movi	r3,1
     850:	10c00005 	stb	r3,0(r2)
}
     854:	0001883a 	nop
     858:	e037883a 	mov	sp,fp
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00104 	addi	sp,sp,4
     864:	f800283a 	ret

00000868 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     868:	defffd04 	addi	sp,sp,-12
     86c:	df000215 	stw	fp,8(sp)
     870:	df000204 	addi	fp,sp,8
     874:	2007883a 	mov	r3,r4
     878:	2805883a 	mov	r2,r5
     87c:	e0fffe05 	stb	r3,-8(fp)
     880:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     884:	00820034 	movhi	r2,2048
     888:	108c2404 	addi	r2,r2,12432
     88c:	e0fffe03 	ldbu	r3,-8(fp)
     890:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     894:	00820034 	movhi	r2,2048
     898:	108c2004 	addi	r2,r2,12416
     89c:	e0ffff0b 	ldhu	r3,-4(fp)
     8a0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     8a4:	00820034 	movhi	r2,2048
     8a8:	108c1404 	addi	r2,r2,12368
     8ac:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     8b0:	00820034 	movhi	r2,2048
     8b4:	108c1804 	addi	r2,r2,12384
     8b8:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     8bc:	00820034 	movhi	r2,2048
     8c0:	108c1804 	addi	r2,r2,12384
     8c4:	00c00044 	movi	r3,1
     8c8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     8cc:	00820034 	movhi	r2,2048
     8d0:	108c1404 	addi	r2,r2,12368
     8d4:	00c00044 	movi	r3,1
     8d8:	10c00005 	stb	r3,0(r2)

}
     8dc:	0001883a 	nop
     8e0:	e037883a 	mov	sp,fp
     8e4:	df000017 	ldw	fp,0(sp)
     8e8:	dec00104 	addi	sp,sp,4
     8ec:	f800283a 	ret

000008f0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     8f0:	defffd04 	addi	sp,sp,-12
     8f4:	df000215 	stw	fp,8(sp)
     8f8:	df000204 	addi	fp,sp,8
     8fc:	2005883a 	mov	r2,r4
     900:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     904:	00820034 	movhi	r2,2048
     908:	108c2404 	addi	r2,r2,12432
     90c:	e0ffff03 	ldbu	r3,-4(fp)
     910:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     914:	00820034 	movhi	r2,2048
     918:	108c1404 	addi	r2,r2,12368
     91c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     920:	00820034 	movhi	r2,2048
     924:	108c1c04 	addi	r2,r2,12400
     928:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     92c:	00820034 	movhi	r2,2048
     930:	108c2004 	addi	r2,r2,12416
     934:	10800017 	ldw	r2,0(r2)
     938:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     93c:	00820034 	movhi	r2,2048
     940:	108c1c04 	addi	r2,r2,12400
     944:	00c00044 	movi	r3,1
     948:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     94c:	00820034 	movhi	r2,2048
     950:	108c1404 	addi	r2,r2,12368
     954:	00c00044 	movi	r3,1
     958:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     95c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     960:	e037883a 	mov	sp,fp
     964:	df000017 	ldw	fp,0(sp)
     968:	dec00104 	addi	sp,sp,4
     96c:	f800283a 	ret

00000970 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     970:	defffd04 	addi	sp,sp,-12
     974:	dfc00215 	stw	ra,8(sp)
     978:	df000115 	stw	fp,4(sp)
     97c:	df000104 	addi	fp,sp,4
     980:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     984:	d0a8ee03 	ldbu	r2,-23624(gp)
     988:	10800044 	addi	r2,r2,1
     98c:	d0a8ee05 	stb	r2,-23624(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     990:	01414004 	movi	r5,1280
     994:	01000084 	movi	r4,2
     998:	00008680 	call	868 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     99c:	01414704 	movi	r5,1308
     9a0:	0009883a 	mov	r4,zero
     9a4:	00008680 	call	868 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     9a8:	d0a8ef03 	ldbu	r2,-23620(gp)
     9ac:	10803fcc 	andi	r2,r2,255
     9b0:	108003cc 	andi	r2,r2,15
     9b4:	100b883a 	mov	r5,r2
     9b8:	0009883a 	mov	r4,zero
     9bc:	00008680 	call	868 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     9c0:	0140a444 	movi	r5,657
     9c4:	0009883a 	mov	r4,zero
     9c8:	00008680 	call	868 <IO_write>
	if(toggle%2)
     9cc:	d0a8ee03 	ldbu	r2,-23624(gp)
     9d0:	1080004c 	andi	r2,r2,1
     9d4:	10803fcc 	andi	r2,r2,255
     9d8:	10000426 	beq	r2,zero,9ec <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     9dc:	01400044 	movi	r5,1
     9e0:	0009883a 	mov	r4,zero
     9e4:	00008680 	call	868 <IO_write>
     9e8:	00000306 	br	9f8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     9ec:	01401044 	movi	r5,65
     9f0:	0009883a 	mov	r4,zero
     9f4:	00008680 	call	868 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     9f8:	014004c4 	movi	r5,19
     9fc:	0009883a 	mov	r4,zero
     a00:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     a04:	000b883a 	mov	r5,zero
     a08:	0009883a 	mov	r4,zero
     a0c:	00008680 	call	868 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     a10:	01414004 	movi	r5,1280
     a14:	01006c04 	movi	r4,432
     a18:	000264c0 	call	264c <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a1c:	00002506 	br	ab4 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     a20:	01414004 	movi	r5,1280
     a24:	01000084 	movi	r4,2
     a28:	00008680 	call	868 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     a2c:	01414704 	movi	r5,1308
     a30:	0009883a 	mov	r4,zero
     a34:	00008680 	call	868 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     a38:	d0a8ef03 	ldbu	r2,-23620(gp)
     a3c:	10803fcc 	andi	r2,r2,255
     a40:	108003cc 	andi	r2,r2,15
     a44:	100b883a 	mov	r5,r2
     a48:	0009883a 	mov	r4,zero
     a4c:	00008680 	call	868 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     a50:	0140a444 	movi	r5,657
     a54:	0009883a 	mov	r4,zero
     a58:	00008680 	call	868 <IO_write>
		if(toggle%2)
     a5c:	d0a8ee03 	ldbu	r2,-23624(gp)
     a60:	1080004c 	andi	r2,r2,1
     a64:	10803fcc 	andi	r2,r2,255
     a68:	10000426 	beq	r2,zero,a7c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     a6c:	01400044 	movi	r5,1
     a70:	0009883a 	mov	r4,zero
     a74:	00008680 	call	868 <IO_write>
     a78:	00000306 	br	a88 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     a7c:	01401044 	movi	r5,65
     a80:	0009883a 	mov	r4,zero
     a84:	00008680 	call	868 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     a88:	014004c4 	movi	r5,19
     a8c:	0009883a 	mov	r4,zero
     a90:	00008680 	call	868 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     a94:	000b883a 	mov	r5,zero
     a98:	0009883a 	mov	r4,zero
     a9c:	00008680 	call	868 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     aa0:	01414004 	movi	r5,1280
     aa4:	01006c04 	movi	r4,432
     aa8:	000264c0 	call	264c <UsbWrite>
		usleep(10*1000);
     aac:	0109c404 	movi	r4,10000
     ab0:	00144a00 	call	144a0 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ab4:	010000c4 	movi	r4,3
     ab8:	00008f00 	call	8f0 <IO_read>
     abc:	10bfffcc 	andi	r2,r2,65535
     ac0:	1080040c 	andi	r2,r2,16
     ac4:	103fd626 	beq	r2,zero,a20 <__alt_exception_stack_pointer+0xf8000a20>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     ac8:	000363c0 	call	363c <UsbWaitTDListDone>
     acc:	d0a8ee8d 	sth	r2,-23622(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     ad0:	01014784 	movi	r4,1310
     ad4:	00026a40 	call	26a4 <UsbRead>
     ad8:	10bfffcc 	andi	r2,r2,65535
     adc:	d0a8ed15 	stw	r2,-23628(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     ae0:	d0a8ed17 	ldw	r2,-23628(gp)
     ae4:	100b883a 	mov	r5,r2
     ae8:	01000074 	movhi	r4,1
     aec:	211ce204 	addi	r4,r4,29576
     af0:	000909c0 	call	909c <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     af4:	00820034 	movhi	r2,2048
     af8:	108c2804 	addi	r2,r2,12448
     afc:	d0e8ed17 	ldw	r3,-23628(gp)
     b00:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     b04:	d0a8ed17 	ldw	r2,-23628(gp)
     b08:	10c03fcc 	andi	r3,r2,255
     b0c:	e0bfff17 	ldw	r2,-4(fp)
     b10:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     b14:	01003204 	movi	r4,200
     b18:	00144a00 	call	144a0 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     b1c:	d0a8eb0b 	ldhu	r2,-23636(gp)
     b20:	10bfffcc 	andi	r2,r2,65535
     b24:	1009883a 	mov	r4,r2
     b28:	00026a40 	call	26a4 <UsbRead>
     b2c:	d0a8ee8d 	sth	r2,-23622(gp)

	if(!(usb_ctl_val & no_device))
     b30:	d0e8ee8b 	ldhu	r3,-23622(gp)
     b34:	d0a8eb8b 	ldhu	r2,-23634(gp)
     b38:	1884703a 	and	r2,r3,r2
     b3c:	10bfffcc 	andi	r2,r2,65535
     b40:	1000401e 	bne	r2,zero,c44 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     b44:	d028f005 	stb	zero,-23616(gp)
     b48:	00000f06 	br	b88 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     b4c:	0104e204 	movi	r4,5000
     b50:	00144a00 	call	144a0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     b54:	d0a8eb0b 	ldhu	r2,-23636(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	1009883a 	mov	r4,r2
     b60:	00026a40 	call	26a4 <UsbRead>
     b64:	d0a8ee8d 	sth	r2,-23622(gp)
			if(usb_ctl_val & no_device) break;
     b68:	d0e8ee8b 	ldhu	r3,-23622(gp)
     b6c:	d0a8eb8b 	ldhu	r2,-23634(gp)
     b70:	1884703a 	and	r2,r3,r2
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1000081e 	bne	r2,zero,b9c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     b7c:	d0a8f003 	ldbu	r2,-23616(gp)
     b80:	10800044 	addi	r2,r2,1
     b84:	d0a8f005 	stb	r2,-23616(gp)
     b88:	d0a8f003 	ldbu	r2,-23616(gp)
     b8c:	10803fcc 	andi	r2,r2,255
     b90:	108001f0 	cmpltui	r2,r2,7
     b94:	103fed1e 	bne	r2,zero,b4c <__alt_exception_stack_pointer+0xf8000b4c>
     b98:	00000106 	br	ba0 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     b9c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     ba0:	d0e8ee8b 	ldhu	r3,-23622(gp)
     ba4:	d0a8eb8b 	ldhu	r2,-23634(gp)
     ba8:	1884703a 	and	r2,r3,r2
     bac:	10bfffcc 	andi	r2,r2,65535
     bb0:	1000241e 	bne	r2,zero,c44 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     bb4:	01000074 	movhi	r4,1
     bb8:	211ceb04 	addi	r4,r4,29612
     bbc:	00091980 	call	9198 <puts>
			printf("[INFO]: please insert again!!! \n");
     bc0:	01000074 	movhi	r4,1
     bc4:	211cf604 	addi	r4,r4,29656
     bc8:	00091980 	call	9198 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     bcc:	00001d06 	br	c44 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     bd0:	d0a8eb0b 	ldhu	r2,-23636(gp)
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	1009883a 	mov	r4,r2
     bdc:	00026a40 	call	26a4 <UsbRead>
     be0:	d0a8ee8d 	sth	r2,-23622(gp)
		usleep(5*1000);
     be4:	0104e204 	movi	r4,5000
     be8:	00144a00 	call	144a0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     bec:	d0a8eb0b 	ldhu	r2,-23636(gp)
     bf0:	10bfffcc 	andi	r2,r2,65535
     bf4:	1009883a 	mov	r4,r2
     bf8:	00026a40 	call	26a4 <UsbRead>
     bfc:	d0a8ee8d 	sth	r2,-23622(gp)
		usleep(5*1000);
     c00:	0104e204 	movi	r4,5000
     c04:	00144a00 	call	144a0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     c08:	d0a8eb0b 	ldhu	r2,-23636(gp)
     c0c:	10bfffcc 	andi	r2,r2,65535
     c10:	1009883a 	mov	r4,r2
     c14:	00026a40 	call	26a4 <UsbRead>
     c18:	d0a8ee8d 	sth	r2,-23622(gp)
		usleep(5*1000);
     c1c:	0104e204 	movi	r4,5000
     c20:	00144a00 	call	144a0 <usleep>

		if(usb_ctl_val & no_device)
     c24:	d0e8ee8b 	ldhu	r3,-23622(gp)
     c28:	d0a8eb8b 	ldhu	r2,-23634(gp)
     c2c:	1884703a 	and	r2,r3,r2
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	10000126 	beq	r2,zero,c3c <loop_keyboard+0x2cc>
			init_keyboard();
     c38:	0000c700 	call	c70 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     c3c:	01003204 	movi	r4,200
     c40:	00144a00 	call	144a0 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     c44:	d0e8ee8b 	ldhu	r3,-23622(gp)
     c48:	d0a8eb8b 	ldhu	r2,-23634(gp)
     c4c:	1884703a 	and	r2,r3,r2
     c50:	10bfffcc 	andi	r2,r2,65535
     c54:	103fde26 	beq	r2,zero,bd0 <__alt_exception_stack_pointer+0xf8000bd0>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     c58:	0001883a 	nop
     c5c:	e037883a 	mov	sp,fp
     c60:	dfc00117 	ldw	ra,4(sp)
     c64:	df000017 	ldw	fp,0(sp)
     c68:	dec00204 	addi	sp,sp,8
     c6c:	f800283a 	ret

00000c70 <init_keyboard>:

void init_keyboard() {
     c70:	defffe04 	addi	sp,sp,-8
     c74:	dfc00115 	stw	ra,4(sp)
     c78:	df000015 	stw	fp,0(sp)
     c7c:	d839883a 	mov	fp,sp
	IO_init();
     c80:	00007b80 	call	7b8 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     c84:	01000074 	movhi	r4,1
     c88:	211cfe04 	addi	r4,r4,29688
     c8c:	00091980 	call	9198 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     c90:	00026e80 	call	26e8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     c94:	000b883a 	mov	r5,zero
     c98:	01005104 	movi	r4,324
     c9c:	000264c0 	call	264c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     ca0:	017fffd4 	movui	r5,65535
     ca4:	01302414 	movui	r4,49296
     ca8:	000264c0 	call	264c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     cac:	01409604 	movi	r5,600
     cb0:	01006d04 	movi	r4,436
     cb4:	000264c0 	call	264c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     cb8:	00811004 	movi	r2,1088
     cbc:	d0a8ee8d 	sth	r2,-23622(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     cc0:	d0a8ee8b 	ldhu	r2,-23622(gp)
     cc4:	10bfffcc 	andi	r2,r2,65535
     cc8:	100b883a 	mov	r5,r2
     ccc:	01005084 	movi	r4,322
     cd0:	000264c0 	call	264c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     cd4:	00808404 	movi	r2,528
     cd8:	d0a8ef8d 	sth	r2,-23618(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     cdc:	d0a8ef8b 	ldhu	r2,-23618(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	100b883a 	mov	r5,r2
     ce8:	01302314 	movui	r4,49292
     cec:	000264c0 	call	264c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     cf0:	000b883a 	mov	r5,zero
     cf4:	01007104 	movi	r4,452
     cf8:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     cfc:	000b883a 	mov	r5,zero
     d00:	01007184 	movi	r4,454
     d04:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     d08:	000b883a 	mov	r5,zero
     d0c:	01007204 	movi	r4,456
     d10:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     d14:	000b883a 	mov	r5,zero
     d18:	01007284 	movi	r4,458
     d1c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     d20:	000b883a 	mov	r5,zero
     d24:	01007304 	movi	r4,460
     d28:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     d2c:	000b883a 	mov	r5,zero
     d30:	01007384 	movi	r4,462
     d34:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     d38:	000b883a 	mov	r5,zero
     d3c:	01007404 	movi	r4,464
     d40:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     d44:	000b883a 	mov	r5,zero
     d48:	01007484 	movi	r4,466
     d4c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     d50:	000b883a 	mov	r5,zero
     d54:	01007504 	movi	r4,468
     d58:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     d5c:	000b883a 	mov	r5,zero
     d60:	01007584 	movi	r4,470
     d64:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     d68:	000b883a 	mov	r5,zero
     d6c:	01007604 	movi	r4,472
     d70:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     d74:	000b883a 	mov	r5,zero
     d78:	01007684 	movi	r4,474
     d7c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     d80:	000b883a 	mov	r5,zero
     d84:	01007704 	movi	r4,476
     d88:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     d8c:	000b883a 	mov	r5,zero
     d90:	01007784 	movi	r4,478
     d94:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     d98:	01401c84 	movi	r5,114
     d9c:	01007084 	movi	r4,450
     da0:	000264c0 	call	264c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     da4:	01738054 	movui	r5,52737
     da8:	01000044 	movi	r4,1
     dac:	00008680 	call	868 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     db0:	0001883a 	nop
     db4:	010000c4 	movi	r4,3
     db8:	00008f00 	call	8f0 <IO_read>
     dbc:	10bfffcc 	andi	r2,r2,65535
     dc0:	103ffc26 	beq	r2,zero,db4 <__alt_exception_stack_pointer+0xf8000db4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     dc4:	00000806 	br	de8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     dc8:	01000044 	movi	r4,1
     dcc:	00008f00 	call	8f0 <IO_read>
     dd0:	10bfffcc 	andi	r2,r2,65535
     dd4:	100b883a 	mov	r5,r2
     dd8:	01000074 	movhi	r4,1
     ddc:	211d0404 	addi	r4,r4,29712
     de0:	000909c0 	call	909c <printf>
		goto USB_HOT_PLUG;
     de4:	003faa06 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     de8:	01000044 	movi	r4,1
     dec:	00008f00 	call	8f0 <IO_read>
     df0:	10bfffcc 	andi	r2,r2,65535
     df4:	1083fb58 	cmpnei	r2,r2,4077
     df8:	103ff31e 	bne	r2,zero,dc8 <__alt_exception_stack_pointer+0xf8000dc8>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     dfc:	01000074 	movhi	r4,1
     e00:	211d0d04 	addi	r4,r4,29748
     e04:	000909c0 	call	909c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     e08:	01401d04 	movi	r5,116
     e0c:	01007084 	movi	r4,450
     e10:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     e14:	01400f04 	movi	r5,60
     e18:	01007104 	movi	r4,452
     e1c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     e20:	000b883a 	mov	r5,zero
     e24:	01007184 	movi	r4,454
     e28:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     e2c:	000b883a 	mov	r5,zero
     e30:	01007204 	movi	r4,456
     e34:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     e38:	000b883a 	mov	r5,zero
     e3c:	01007284 	movi	r4,458
     e40:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     e44:	000b883a 	mov	r5,zero
     e48:	01007304 	movi	r4,460
     e4c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     e50:	000b883a 	mov	r5,zero
     e54:	01007384 	movi	r4,462
     e58:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     e5c:	000b883a 	mov	r5,zero
     e60:	01007404 	movi	r4,464
     e64:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     e68:	000b883a 	mov	r5,zero
     e6c:	01007484 	movi	r4,466
     e70:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     e74:	000b883a 	mov	r5,zero
     e78:	01007504 	movi	r4,468
     e7c:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     e80:	000b883a 	mov	r5,zero
     e84:	01007584 	movi	r4,470
     e88:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     e8c:	000b883a 	mov	r5,zero
     e90:	01007604 	movi	r4,472
     e94:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     e98:	000b883a 	mov	r5,zero
     e9c:	01007684 	movi	r4,474
     ea0:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     ea4:	000b883a 	mov	r5,zero
     ea8:	01007704 	movi	r4,476
     eac:	000264c0 	call	264c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     eb0:	000b883a 	mov	r5,zero
     eb4:	01007784 	movi	r4,478
     eb8:	000264c0 	call	264c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     ebc:	01738054 	movui	r5,52737
     ec0:	01000044 	movi	r4,1
     ec4:	00008680 	call	868 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     ec8:	0001883a 	nop
     ecc:	01000044 	movi	r4,1
     ed0:	00008f00 	call	8f0 <IO_read>
     ed4:	10bfffcc 	andi	r2,r2,65535
     ed8:	1083fb58 	cmpnei	r2,r2,4077
     edc:	10000826 	beq	r2,zero,f00 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     ee0:	01000044 	movi	r4,1
     ee4:	00008f00 	call	8f0 <IO_read>
     ee8:	10bfffcc 	andi	r2,r2,65535
     eec:	100b883a 	mov	r5,r2
     ef0:	01000074 	movhi	r4,1
     ef4:	211d0404 	addi	r4,r4,29712
     ef8:	000909c0 	call	909c <printf>
		goto USB_HOT_PLUG;
     efc:	003f6406 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     f00:	00b02284 	movi	r2,-16246
     f04:	d0a8eb0d 	sth	r2,-23636(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     f08:	008c0004 	movi	r2,12288
     f0c:	d0a8eb8d 	sth	r2,-23634(gp)
	fs_device = A_DP_STAT;
     f10:	00880004 	movi	r2,8192
     f14:	d0a8ec0d 	sth	r2,-23632(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     f18:	d0a8eb0b 	ldhu	r2,-23636(gp)
     f1c:	10bfffcc 	andi	r2,r2,65535
     f20:	1009883a 	mov	r4,r2
     f24:	00026a40 	call	26a4 <UsbRead>
     f28:	d0a8ee8d 	sth	r2,-23622(gp)

	if (!(usb_ctl_val & no_device))
     f2c:	d0e8ee8b 	ldhu	r3,-23622(gp)
     f30:	d0a8eb8b 	ldhu	r2,-23634(gp)
     f34:	1884703a 	and	r2,r3,r2
     f38:	10bfffcc 	andi	r2,r2,65535
     f3c:	1000361e 	bne	r2,zero,1018 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     f40:	d028f005 	stb	zero,-23616(gp)
     f44:	00000f06 	br	f84 <init_keyboard+0x314>
		{
			usleep(5*1000);
     f48:	0104e204 	movi	r4,5000
     f4c:	00144a00 	call	144a0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     f50:	d0a8eb0b 	ldhu	r2,-23636(gp)
     f54:	10bfffcc 	andi	r2,r2,65535
     f58:	1009883a 	mov	r4,r2
     f5c:	00026a40 	call	26a4 <UsbRead>
     f60:	d0a8ee8d 	sth	r2,-23622(gp)
			if(usb_ctl_val & no_device) break;
     f64:	d0e8ee8b 	ldhu	r3,-23622(gp)
     f68:	d0a8eb8b 	ldhu	r2,-23634(gp)
     f6c:	1884703a 	and	r2,r3,r2
     f70:	10bfffcc 	andi	r2,r2,65535
     f74:	1000081e 	bne	r2,zero,f98 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     f78:	d0a8f003 	ldbu	r2,-23616(gp)
     f7c:	10800044 	addi	r2,r2,1
     f80:	d0a8f005 	stb	r2,-23616(gp)
     f84:	d0a8f003 	ldbu	r2,-23616(gp)
     f88:	10803fcc 	andi	r2,r2,255
     f8c:	10800170 	cmpltui	r2,r2,5
     f90:	103fed1e 	bne	r2,zero,f48 <__alt_exception_stack_pointer+0xf8000f48>
     f94:	00000106 	br	f9c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     f98:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     f9c:	d0e8ee8b 	ldhu	r3,-23622(gp)
     fa0:	d0a8eb8b 	ldhu	r2,-23634(gp)
     fa4:	1884703a 	and	r2,r3,r2
     fa8:	10bfffcc 	andi	r2,r2,65535
     fac:	1000261e 	bne	r2,zero,1048 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     fb0:	01000074 	movhi	r4,1
     fb4:	211d1104 	addi	r4,r4,29764
     fb8:	00091980 	call	9198 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     fbc:	01000074 	movhi	r4,1
     fc0:	211d1b04 	addi	r4,r4,29804
     fc4:	00091980 	call	9198 <puts>
			while (!(usb_ctl_val & no_device))
     fc8:	00000d06 	br	1000 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     fcc:	d0a8eb0b 	ldhu	r2,-23636(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	1009883a 	mov	r4,r2
     fd8:	00026a40 	call	26a4 <UsbRead>
     fdc:	d0a8ee8d 	sth	r2,-23622(gp)
				if(usb_ctl_val & no_device)
     fe0:	d0e8ee8b 	ldhu	r3,-23622(gp)
     fe4:	d0a8eb8b 	ldhu	r2,-23634(gp)
     fe8:	1884703a 	and	r2,r3,r2
     fec:	10bfffcc 	andi	r2,r2,65535
     ff0:	10000126 	beq	r2,zero,ff8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ff4:	003f2606 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>

				usleep(2000);
     ff8:	0101f404 	movi	r4,2000
     ffc:	00144a00 	call	144a0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
    1000:	d0e8ee8b 	ldhu	r3,-23622(gp)
    1004:	d0a8eb8b 	ldhu	r2,-23634(gp)
    1008:	1884703a 	and	r2,r3,r2
    100c:	10bfffcc 	andi	r2,r2,65535
    1010:	103fee26 	beq	r2,zero,fcc <__alt_exception_stack_pointer+0xf8000fcc>
    1014:	00000c06 	br	1048 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
    1018:	d0e8ee8b 	ldhu	r3,-23622(gp)
    101c:	d0a8ec0b 	ldhu	r2,-23632(gp)
    1020:	1884703a 	and	r2,r3,r2
    1024:	10bfffcc 	andi	r2,r2,65535
    1028:	10000426 	beq	r2,zero,103c <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
    102c:	01000074 	movhi	r4,1
    1030:	211d2704 	addi	r4,r4,29852
    1034:	00091980 	call	9198 <puts>
    1038:	00000306 	br	1048 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
    103c:	01000074 	movhi	r4,1
    1040:	211d2e04 	addi	r4,r4,29880
    1044:	00091980 	call	9198 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
    1048:	000279c0 	call	279c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    104c:	00000306 	br	105c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
    1050:	000279c0 	call	279c <UsbSetAddress>
		usleep(10*1000);
    1054:	0109c404 	movi	r4,10000
    1058:	00144a00 	call	144a0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    105c:	010000c4 	movi	r4,3
    1060:	00008f00 	call	8f0 <IO_read>
    1064:	10bfffcc 	andi	r2,r2,65535
    1068:	1080040c 	andi	r2,r2,16
    106c:	103ff826 	beq	r2,zero,1050 <__alt_exception_stack_pointer+0xf8001050>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1070:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
    1074:	01414184 	movi	r5,1286
    1078:	01000084 	movi	r4,2
    107c:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1080:	0009883a 	mov	r4,zero
    1084:	00008f00 	call	8f0 <IO_read>
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	100b883a 	mov	r5,r2
    1090:	01000074 	movhi	r4,1
    1094:	211d3504 	addi	r4,r4,29908
    1098:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508); // n
    109c:	01414204 	movi	r5,1288
    10a0:	01000084 	movi	r4,2
    10a4:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10a8:	0009883a 	mov	r4,zero
    10ac:	00008f00 	call	8f0 <IO_read>
    10b0:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
    10b4:	d0a8ee8b 	ldhu	r2,-23622(gp)
    10b8:	10bfffcc 	andi	r2,r2,65535
    10bc:	100b883a 	mov	r5,r2
    10c0:	01000074 	movhi	r4,1
    10c4:	211d4004 	addi	r4,r4,29952
    10c8:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
    10cc:	0001883a 	nop
    10d0:	d0a8ee8b 	ldhu	r2,-23622(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	108000d8 	cmpnei	r2,r2,3
    10dc:	10000326 	beq	r2,zero,10ec <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10e0:	00036c00 	call	36c0 <UsbGetRetryCnt>
    10e4:	d0a8ee8d 	sth	r2,-23622(gp)

		goto USB_HOT_PLUG;
    10e8:	003ee906 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
    10ec:	01000074 	movhi	r4,1
    10f0:	211d4c04 	addi	r4,r4,30000
    10f4:	00091980 	call	9198 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
    10f8:	000289c0 	call	289c <UsbGetDeviceDesc1>

	usleep(10*1000);
    10fc:	0109c404 	movi	r4,10000
    1100:	00144a00 	call	144a0 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1104:	00000306 	br	1114 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
    1108:	000289c0 	call	289c <UsbGetDeviceDesc1>
		usleep(10*1000);
    110c:	0109c404 	movi	r4,10000
    1110:	00144a00 	call	144a0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1114:	010000c4 	movi	r4,3
    1118:	00008f00 	call	8f0 <IO_read>
    111c:	10bfffcc 	andi	r2,r2,65535
    1120:	1080040c 	andi	r2,r2,16
    1124:	103ff826 	beq	r2,zero,1108 <__alt_exception_stack_pointer+0xf8001108>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1128:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    112c:	01414184 	movi	r5,1286
    1130:	01000084 	movi	r4,2
    1134:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1138:	0009883a 	mov	r4,zero
    113c:	00008f00 	call	8f0 <IO_read>
    1140:	10bfffcc 	andi	r2,r2,65535
    1144:	100b883a 	mov	r5,r2
    1148:	01000074 	movhi	r4,1
    114c:	211d5b04 	addi	r4,r4,30060
    1150:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    1154:	01414204 	movi	r5,1288
    1158:	01000084 	movi	r4,2
    115c:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1160:	0009883a 	mov	r4,zero
    1164:	00008f00 	call	8f0 <IO_read>
    1168:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    116c:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1170:	10bfffcc 	andi	r2,r2,65535
    1174:	100b883a 	mov	r5,r2
    1178:	01000074 	movhi	r4,1
    117c:	211d6604 	addi	r4,r4,30104
    1180:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    1184:	0001883a 	nop
    1188:	d0a8ee8b 	ldhu	r2,-23622(gp)
    118c:	10bfffcc 	andi	r2,r2,65535
    1190:	108000d8 	cmpnei	r2,r2,3
    1194:	10000626 	beq	r2,zero,11b0 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1198:	00036c00 	call	36c0 <UsbGetRetryCnt>
    119c:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11a0:	01000074 	movhi	r4,1
    11a4:	211d7204 	addi	r4,r4,30152
    11a8:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    11ac:	003eb806 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
    11b0:	01000074 	movhi	r4,1
    11b4:	211d7b04 	addi	r4,r4,30188
    11b8:	00091980 	call	9198 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
    11bc:	00029e40 	call	29e4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11c0:	00000306 	br	11d0 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
    11c4:	00029e40 	call	29e4 <UsbGetDeviceDesc2>
		usleep(10*1000);
    11c8:	0109c404 	movi	r4,10000
    11cc:	00144a00 	call	144a0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11d0:	010000c4 	movi	r4,3
    11d4:	00008f00 	call	8f0 <IO_read>
    11d8:	10bfffcc 	andi	r2,r2,65535
    11dc:	1080040c 	andi	r2,r2,16
    11e0:	103ff826 	beq	r2,zero,11c4 <__alt_exception_stack_pointer+0xf80011c4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    11e4:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    11e8:	01414184 	movi	r5,1286
    11ec:	01000084 	movi	r4,2
    11f0:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
    11f4:	0009883a 	mov	r4,zero
    11f8:	00008f00 	call	8f0 <IO_read>
    11fc:	10bfffcc 	andi	r2,r2,65535
    1200:	100b883a 	mov	r5,r2
    1204:	01000074 	movhi	r4,1
    1208:	211d5b04 	addi	r4,r4,30060
    120c:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    1210:	01414204 	movi	r5,1288
    1214:	01000084 	movi	r4,2
    1218:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    121c:	0009883a 	mov	r4,zero
    1220:	00008f00 	call	8f0 <IO_read>
    1224:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    1228:	d0a8ee8b 	ldhu	r2,-23622(gp)
    122c:	10bfffcc 	andi	r2,r2,65535
    1230:	100b883a 	mov	r5,r2
    1234:	01000074 	movhi	r4,1
    1238:	211d6604 	addi	r4,r4,30104
    123c:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    1240:	0001883a 	nop
    1244:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1248:	10bfffcc 	andi	r2,r2,65535
    124c:	108000d8 	cmpnei	r2,r2,3
    1250:	10000626 	beq	r2,zero,126c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1254:	00036c00 	call	36c0 <UsbGetRetryCnt>
    1258:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    125c:	01000074 	movhi	r4,1
    1260:	211d7204 	addi	r4,r4,30152
    1264:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    1268:	003e8906 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
    126c:	01000074 	movhi	r4,1
    1270:	211d8f04 	addi	r4,r4,30268
    1274:	00091980 	call	9198 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
    1278:	0002bbc0 	call	2bbc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    127c:	00000306 	br	128c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
    1280:	0002bbc0 	call	2bbc <UsbGetConfigDesc1>
		usleep(10*1000);
    1284:	0109c404 	movi	r4,10000
    1288:	00144a00 	call	144a0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    128c:	010000c4 	movi	r4,3
    1290:	00008f00 	call	8f0 <IO_read>
    1294:	10bfffcc 	andi	r2,r2,65535
    1298:	1080040c 	andi	r2,r2,16
    129c:	103ff826 	beq	r2,zero,1280 <__alt_exception_stack_pointer+0xf8001280>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    12a0:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    12a4:	01414184 	movi	r5,1286
    12a8:	01000084 	movi	r4,2
    12ac:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
    12b0:	0009883a 	mov	r4,zero
    12b4:	00008f00 	call	8f0 <IO_read>
    12b8:	10bfffcc 	andi	r2,r2,65535
    12bc:	100b883a 	mov	r5,r2
    12c0:	01000074 	movhi	r4,1
    12c4:	211da104 	addi	r4,r4,30340
    12c8:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    12cc:	01414204 	movi	r5,1288
    12d0:	01000084 	movi	r4,2
    12d4:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    12d8:	0009883a 	mov	r4,zero
    12dc:	00008f00 	call	8f0 <IO_read>
    12e0:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    12e4:	d0a8ee8b 	ldhu	r2,-23622(gp)
    12e8:	10bfffcc 	andi	r2,r2,65535
    12ec:	100b883a 	mov	r5,r2
    12f0:	01000074 	movhi	r4,1
    12f4:	211dac04 	addi	r4,r4,30384
    12f8:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    12fc:	0001883a 	nop
    1300:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1304:	10bfffcc 	andi	r2,r2,65535
    1308:	108000d8 	cmpnei	r2,r2,3
    130c:	10000626 	beq	r2,zero,1328 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1310:	00036c00 	call	36c0 <UsbGetRetryCnt>
    1314:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1318:	01000074 	movhi	r4,1
    131c:	211d7204 	addi	r4,r4,30152
    1320:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    1324:	003e5a06 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    1328:	01000074 	movhi	r4,1
    132c:	211db804 	addi	r4,r4,30432
    1330:	00091980 	call	9198 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
    1334:	0002d4c0 	call	2d4c <UsbGetConfigDesc2>

	usleep(100*1000);
    1338:	010000b4 	movhi	r4,2
    133c:	2121a804 	addi	r4,r4,-31072
    1340:	00144a00 	call	144a0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1344:	00000306 	br	1354 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
    1348:	0002d4c0 	call	2d4c <UsbGetConfigDesc2>
		usleep(10*1000);
    134c:	0109c404 	movi	r4,10000
    1350:	00144a00 	call	144a0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1354:	010000c4 	movi	r4,3
    1358:	00008f00 	call	8f0 <IO_read>
    135c:	10bfffcc 	andi	r2,r2,65535
    1360:	1080040c 	andi	r2,r2,16
    1364:	103ff826 	beq	r2,zero,1348 <__alt_exception_stack_pointer+0xf8001348>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1368:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    136c:	01414184 	movi	r5,1286
    1370:	01000084 	movi	r4,2
    1374:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1378:	0009883a 	mov	r4,zero
    137c:	00008f00 	call	8f0 <IO_read>
    1380:	10bfffcc 	andi	r2,r2,65535
    1384:	100b883a 	mov	r5,r2
    1388:	01000074 	movhi	r4,1
    138c:	211dcb04 	addi	r4,r4,30508
    1390:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    1394:	01414204 	movi	r5,1288
    1398:	01000084 	movi	r4,2
    139c:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    13a0:	0009883a 	mov	r4,zero
    13a4:	00008f00 	call	8f0 <IO_read>
    13a8:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    13ac:	d0a8ee8b 	ldhu	r2,-23622(gp)
    13b0:	10bfffcc 	andi	r2,r2,65535
    13b4:	100b883a 	mov	r5,r2
    13b8:	01000074 	movhi	r4,1
    13bc:	211dd604 	addi	r4,r4,30552
    13c0:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    13c4:	0001883a 	nop
    13c8:	d0a8ee8b 	ldhu	r2,-23622(gp)
    13cc:	10bfffcc 	andi	r2,r2,65535
    13d0:	108000d8 	cmpnei	r2,r2,3
    13d4:	10000626 	beq	r2,zero,13f0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
    13d8:	00036c00 	call	36c0 <UsbGetRetryCnt>
    13dc:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    13e0:	01000074 	movhi	r4,1
    13e4:	211d7204 	addi	r4,r4,30152
    13e8:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    13ec:	003e2806 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
    13f0:	01000074 	movhi	r4,1
    13f4:	211de204 	addi	r4,r4,30600
    13f8:	00091980 	call	9198 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
    13fc:	01415b04 	movi	r5,1388
    1400:	01000084 	movi	r4,2
    1404:	00008680 	call	868 <IO_write>
	code = IO_read(HPI_DATA);
    1408:	0009883a 	mov	r4,zero
    140c:	00008f00 	call	8f0 <IO_read>
    1410:	d0a8f08d 	sth	r2,-23614(gp)
	code = code & 0x003;
    1414:	d0a8f08b 	ldhu	r2,-23614(gp)
    1418:	108000cc 	andi	r2,r2,3
    141c:	d0a8f08d 	sth	r2,-23614(gp)
	printf("\ncode = %x\n", code);
    1420:	d0a8f08b 	ldhu	r2,-23614(gp)
    1424:	10bfffcc 	andi	r2,r2,65535
    1428:	100b883a 	mov	r5,r2
    142c:	01000074 	movhi	r4,1
    1430:	211df504 	addi	r4,r4,30676
    1434:	000909c0 	call	909c <printf>

	if (code == 0x01)
    1438:	d0a8f08b 	ldhu	r2,-23614(gp)
    143c:	10bfffcc 	andi	r2,r2,65535
    1440:	10800058 	cmpnei	r2,r2,1
    1444:	1000041e 	bne	r2,zero,1458 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
    1448:	01000074 	movhi	r4,1
    144c:	211df804 	addi	r4,r4,30688
    1450:	00091980 	call	9198 <puts>
    1454:	00000306 	br	1464 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
    1458:	01000074 	movhi	r4,1
    145c:	211e0704 	addi	r4,r4,30748
    1460:	00091980 	call	9198 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
    1464:	01415d84 	movi	r5,1398
    1468:	01000084 	movi	r4,2
    146c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x073F);
    1470:	0141cfc4 	movi	r5,1855
    1474:	0009883a 	mov	r4,zero
    1478:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x8105);
    147c:	01604154 	movui	r5,33029
    1480:	0009883a 	mov	r4,zero
    1484:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0003);
    1488:	014000c4 	movi	r5,3
    148c:	0009883a 	mov	r4,zero
    1490:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1494:	01400204 	movi	r5,8
    1498:	0009883a 	mov	r4,zero
    149c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
    14a0:	016b0294 	movui	r5,44042
    14a4:	0009883a 	mov	r4,zero
    14a8:	00008680 	call	868 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
    14ac:	01415d84 	movi	r5,1398
    14b0:	01006c04 	movi	r4,432
    14b4:	000264c0 	call	264c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
    14b8:	01415f04 	movi	r5,1404
    14bc:	01000084 	movi	r4,2
    14c0:	00008680 	call	868 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
    14c4:	0009883a 	mov	r4,zero
    14c8:	00008f00 	call	8f0 <IO_read>
    14cc:	d0a8ef05 	stb	r2,-23620(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    14d0:	d0a8ef03 	ldbu	r2,-23620(gp)
    14d4:	10803fcc 	andi	r2,r2,255
    14d8:	100b883a 	mov	r5,r2
    14dc:	01000074 	movhi	r4,1
    14e0:	211e1004 	addi	r4,r4,30784
    14e4:	000909c0 	call	909c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
    14e8:	0002fb40 	call	2fb4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    14ec:	00000306 	br	14fc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
    14f0:	0002fb40 	call	2fb4 <UsbSetConfig>
		usleep(10*1000);
    14f4:	0109c404 	movi	r4,10000
    14f8:	00144a00 	call	144a0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    14fc:	010000c4 	movi	r4,3
    1500:	00008f00 	call	8f0 <IO_read>
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	1080040c 	andi	r2,r2,16
    150c:	103ff826 	beq	r2,zero,14f0 <__alt_exception_stack_pointer+0xf80014f0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1510:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1514:	01414184 	movi	r5,1286
    1518:	01000084 	movi	r4,2
    151c:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1520:	0009883a 	mov	r4,zero
    1524:	00008f00 	call	8f0 <IO_read>
    1528:	10bfffcc 	andi	r2,r2,65535
    152c:	100b883a 	mov	r5,r2
    1530:	01000074 	movhi	r4,1
    1534:	211e1a04 	addi	r4,r4,30824
    1538:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    153c:	01414204 	movi	r5,1288
    1540:	01000084 	movi	r4,2
    1544:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1548:	0009883a 	mov	r4,zero
    154c:	00008f00 	call	8f0 <IO_read>
    1550:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1554:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1558:	10bfffcc 	andi	r2,r2,65535
    155c:	100b883a 	mov	r5,r2
    1560:	01000074 	movhi	r4,1
    1564:	211e2504 	addi	r4,r4,30868
    1568:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    156c:	0001883a 	nop
    1570:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1574:	10bfffcc 	andi	r2,r2,65535
    1578:	108000d8 	cmpnei	r2,r2,3
    157c:	10000626 	beq	r2,zero,1598 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1580:	00036c00 	call	36c0 <UsbGetRetryCnt>
    1584:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1588:	01000074 	movhi	r4,1
    158c:	211d7204 	addi	r4,r4,30152
    1590:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    1594:	003dbe06 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1598:	01000074 	movhi	r4,1
    159c:	211e3104 	addi	r4,r4,30916
    15a0:	00091980 	call	9198 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    15a4:	00030b40 	call	30b4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    15a8:	00000306 	br	15b8 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    15ac:	00030b40 	call	30b4 <UsbClassRequest>
		usleep(10*1000);
    15b0:	0109c404 	movi	r4,10000
    15b4:	00144a00 	call	144a0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    15b8:	010000c4 	movi	r4,3
    15bc:	00008f00 	call	8f0 <IO_read>
    15c0:	10bfffcc 	andi	r2,r2,65535
    15c4:	1080040c 	andi	r2,r2,16
    15c8:	103ff826 	beq	r2,zero,15ac <__alt_exception_stack_pointer+0xf80015ac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    15cc:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    15d0:	01414184 	movi	r5,1286
    15d4:	01000084 	movi	r4,2
    15d8:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    15dc:	0009883a 	mov	r4,zero
    15e0:	00008f00 	call	8f0 <IO_read>
    15e4:	10bfffcc 	andi	r2,r2,65535
    15e8:	100b883a 	mov	r5,r2
    15ec:	01000074 	movhi	r4,1
    15f0:	211e4304 	addi	r4,r4,30988
    15f4:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    15f8:	01414204 	movi	r5,1288
    15fc:	01000084 	movi	r4,2
    1600:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1604:	0009883a 	mov	r4,zero
    1608:	00008f00 	call	8f0 <IO_read>
    160c:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    1610:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1614:	10bfffcc 	andi	r2,r2,65535
    1618:	100b883a 	mov	r5,r2
    161c:	01000074 	movhi	r4,1
    1620:	211e4e04 	addi	r4,r4,31032
    1624:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    1628:	0001883a 	nop
    162c:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1630:	10bfffcc 	andi	r2,r2,65535
    1634:	108000d8 	cmpnei	r2,r2,3
    1638:	10000626 	beq	r2,zero,1654 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    163c:	00036c00 	call	36c0 <UsbGetRetryCnt>
    1640:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1644:	01000074 	movhi	r4,1
    1648:	211d7204 	addi	r4,r4,30152
    164c:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    1650:	003d8f06 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1654:	01000074 	movhi	r4,1
    1658:	211e5a04 	addi	r4,r4,31080
    165c:	00091980 	call	9198 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1660:	00031b40 	call	31b4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1664:	00000306 	br	1674 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1668:	00031b40 	call	31b4 <UsbGetHidDesc>
		usleep(10*1000);
    166c:	0109c404 	movi	r4,10000
    1670:	00144a00 	call	144a0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1674:	010000c4 	movi	r4,3
    1678:	00008f00 	call	8f0 <IO_read>
    167c:	10bfffcc 	andi	r2,r2,65535
    1680:	1080040c 	andi	r2,r2,16
    1684:	103ff826 	beq	r2,zero,1668 <__alt_exception_stack_pointer+0xf8001668>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1688:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    168c:	01414184 	movi	r5,1286
    1690:	01000084 	movi	r4,2
    1694:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1698:	0009883a 	mov	r4,zero
    169c:	00008f00 	call	8f0 <IO_read>
    16a0:	10bfffcc 	andi	r2,r2,65535
    16a4:	100b883a 	mov	r5,r2
    16a8:	01000074 	movhi	r4,1
    16ac:	211e4304 	addi	r4,r4,30988
    16b0:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    16b4:	01414204 	movi	r5,1288
    16b8:	01000084 	movi	r4,2
    16bc:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    16c0:	0009883a 	mov	r4,zero
    16c4:	00008f00 	call	8f0 <IO_read>
    16c8:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    16cc:	d0a8ee8b 	ldhu	r2,-23622(gp)
    16d0:	10bfffcc 	andi	r2,r2,65535
    16d4:	100b883a 	mov	r5,r2
    16d8:	01000074 	movhi	r4,1
    16dc:	211e4e04 	addi	r4,r4,31032
    16e0:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    16e4:	0001883a 	nop
    16e8:	d0a8ee8b 	ldhu	r2,-23622(gp)
    16ec:	10bfffcc 	andi	r2,r2,65535
    16f0:	108000d8 	cmpnei	r2,r2,3
    16f4:	10000626 	beq	r2,zero,1710 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    16f8:	00036c00 	call	36c0 <UsbGetRetryCnt>
    16fc:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1700:	01000074 	movhi	r4,1
    1704:	211d7204 	addi	r4,r4,30152
    1708:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    170c:	003d6006 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    1710:	01000074 	movhi	r4,1
    1714:	211e6c04 	addi	r4,r4,31152
    1718:	00091980 	call	9198 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    171c:	00032fc0 	call	32fc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1720:	00000106 	br	1728 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    1724:	00032fc0 	call	32fc <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1728:	010000c4 	movi	r4,3
    172c:	00008f00 	call	8f0 <IO_read>
    1730:	10bfffcc 	andi	r2,r2,65535
    1734:	1080040c 	andi	r2,r2,16
    1738:	103ffa26 	beq	r2,zero,1724 <__alt_exception_stack_pointer+0xf8001724>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    173c:	000363c0 	call	363c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1740:	01414184 	movi	r5,1286
    1744:	01000084 	movi	r4,2
    1748:	00008680 	call	868 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    174c:	0009883a 	mov	r4,zero
    1750:	00008f00 	call	8f0 <IO_read>
    1754:	10bfffcc 	andi	r2,r2,65535
    1758:	100b883a 	mov	r5,r2
    175c:	01000074 	movhi	r4,1
    1760:	211e8004 	addi	r4,r4,31232
    1764:	000909c0 	call	909c <printf>

	IO_write(HPI_ADDR,0x0508);
    1768:	01414204 	movi	r5,1288
    176c:	01000084 	movi	r4,2
    1770:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1774:	0009883a 	mov	r4,zero
    1778:	00008f00 	call	8f0 <IO_read>
    177c:	d0a8ee8d 	sth	r2,-23622(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1780:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1784:	10bfffcc 	andi	r2,r2,65535
    1788:	100b883a 	mov	r5,r2
    178c:	01000074 	movhi	r4,1
    1790:	211e8c04 	addi	r4,r4,31280
    1794:	000909c0 	call	909c <printf>
	while (usb_ctl_val != 0x03)
    1798:	0001883a 	nop
    179c:	d0a8ee8b 	ldhu	r2,-23622(gp)
    17a0:	10bfffcc 	andi	r2,r2,65535
    17a4:	108000d8 	cmpnei	r2,r2,3
    17a8:	10000626 	beq	r2,zero,17c4 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    17ac:	00036c00 	call	36c0 <UsbGetRetryCnt>
    17b0:	d0a8ee8d 	sth	r2,-23622(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    17b4:	01000074 	movhi	r4,1
    17b8:	211d7204 	addi	r4,r4,30152
    17bc:	00091980 	call	9198 <puts>
		goto USB_HOT_PLUG;
    17c0:	003d3306 	br	c90 <__alt_exception_stack_pointer+0xf8000c90>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    17c4:	01000074 	movhi	r4,1
    17c8:	211e9804 	addi	r4,r4,31328
    17cc:	00091980 	call	9198 <puts>


}
    17d0:	0001883a 	nop
    17d4:	e037883a 	mov	sp,fp
    17d8:	dfc00117 	ldw	ra,4(sp)
    17dc:	df000017 	ldw	fp,0(sp)
    17e0:	dec00204 	addi	sp,sp,8
    17e4:	f800283a 	ret

000017e8 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
    17e8:	defff904 	addi	sp,sp,-28
    17ec:	dfc00615 	stw	ra,24(sp)
    17f0:	df000515 	stw	fp,20(sp)
    17f4:	df000504 	addi	fp,sp,20
    17f8:	e13ffc15 	stw	r4,-16(fp)
    17fc:	e17ffd15 	stw	r5,-12(fp)
    1800:	e1bffe15 	stw	r6,-8(fp)
    1804:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
    1808:	e0bffc17 	ldw	r2,-16(fp)
    180c:	10000a26 	beq	r2,zero,1838 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    1810:	e0bffc17 	ldw	r2,-16(fp)
    1814:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
    1818:	e0c00217 	ldw	r3,8(fp)
    181c:	d8c00015 	stw	r3,0(sp)
    1820:	e1ffff17 	ldw	r7,-4(fp)
    1824:	e1bffe17 	ldw	r6,-8(fp)
    1828:	e17ffd17 	ldw	r5,-12(fp)
    182c:	e13ffc17 	ldw	r4,-16(fp)
    1830:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    1834:	00000106 	br	183c <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
    1838:	00bffb44 	movi	r2,-19
}
    183c:	e037883a 	mov	sp,fp
    1840:	dfc00117 	ldw	ra,4(sp)
    1844:	df000017 	ldw	fp,0(sp)
    1848:	dec00204 	addi	sp,sp,8
    184c:	f800283a 	ret

00001850 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
    1850:	defff904 	addi	sp,sp,-28
    1854:	dfc00615 	stw	ra,24(sp)
    1858:	df000515 	stw	fp,20(sp)
    185c:	df000504 	addi	fp,sp,20
    1860:	e13ffc15 	stw	r4,-16(fp)
    1864:	e17ffd15 	stw	r5,-12(fp)
    1868:	e1bffe15 	stw	r6,-8(fp)
    186c:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	10000a26 	beq	r2,zero,18a0 <alt_dma_rxchan_prepare+0x50>
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	10800417 	ldw	r2,16(r2)
    1880:	e0c00217 	ldw	r3,8(fp)
    1884:	d8c00015 	stw	r3,0(sp)
    1888:	e1ffff17 	ldw	r7,-4(fp)
    188c:	e1bffe17 	ldw	r6,-8(fp)
    1890:	e17ffd17 	ldw	r5,-12(fp)
    1894:	e13ffc17 	ldw	r4,-16(fp)
    1898:	103ee83a 	callr	r2
    189c:	00000106 	br	18a4 <alt_dma_rxchan_prepare+0x54>
    18a0:	00bffb44 	movi	r2,-19
}
    18a4:	e037883a 	mov	sp,fp
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <draw_tree>:
char transfer(volatile void* from, volatile void* to, alt_u32 size);

volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;
volatile struct dma_controller_t* dma = PIXEL_DMA_BASE;

void draw_tree(volatile gpu_core_t* gpu, int base_x, int base_y, int base_z, int height, int log_id, int leaf_id) {
    18b8:	defff704 	addi	sp,sp,-36
    18bc:	dfc00815 	stw	ra,32(sp)
    18c0:	df000715 	stw	fp,28(sp)
    18c4:	df000704 	addi	fp,sp,28
    18c8:	e13ffc15 	stw	r4,-16(fp)
    18cc:	e17ffd15 	stw	r5,-12(fp)
    18d0:	e1bffe15 	stw	r6,-8(fp)
    18d4:	e1ffff15 	stw	r7,-4(fp)
	for (int y = 0; y < height; y++) {
    18d8:	e03ffb15 	stw	zero,-20(fp)
    18dc:	00001006 	br	1920 <draw_tree+0x68>
		draw_cube(gpu, 8, base_x, base_y + 8 * y, base_z, log_id);
    18e0:	e0bffb17 	ldw	r2,-20(fp)
    18e4:	100690fa 	slli	r3,r2,3
    18e8:	e0bffe17 	ldw	r2,-8(fp)
    18ec:	1887883a 	add	r3,r3,r2
    18f0:	e0800317 	ldw	r2,12(fp)
    18f4:	d8800115 	stw	r2,4(sp)
    18f8:	e0bfff17 	ldw	r2,-4(fp)
    18fc:	d8800015 	stw	r2,0(sp)
    1900:	180f883a 	mov	r7,r3
    1904:	e1bffd17 	ldw	r6,-12(fp)
    1908:	01400204 	movi	r5,8
    190c:	e13ffc17 	ldw	r4,-16(fp)
    1910:	00003600 	call	360 <draw_cube>

volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;
volatile struct dma_controller_t* dma = PIXEL_DMA_BASE;

void draw_tree(volatile gpu_core_t* gpu, int base_x, int base_y, int base_z, int height, int log_id, int leaf_id) {
	for (int y = 0; y < height; y++) {
    1914:	e0bffb17 	ldw	r2,-20(fp)
    1918:	10800044 	addi	r2,r2,1
    191c:	e0bffb15 	stw	r2,-20(fp)
    1920:	e0fffb17 	ldw	r3,-20(fp)
    1924:	e0800217 	ldw	r2,8(fp)
    1928:	18bfed16 	blt	r3,r2,18e0 <__alt_exception_stack_pointer+0xf80018e0>
		draw_cube(gpu, 8, base_x, base_y + 8 * y, base_z, log_id);
	}
	draw_cube(gpu, 8, base_x, base_y + 8 * height, base_z, leaf_id);
    192c:	e0800217 	ldw	r2,8(fp)
    1930:	100690fa 	slli	r3,r2,3
    1934:	e0bffe17 	ldw	r2,-8(fp)
    1938:	1887883a 	add	r3,r3,r2
    193c:	e0800417 	ldw	r2,16(fp)
    1940:	d8800115 	stw	r2,4(sp)
    1944:	e0bfff17 	ldw	r2,-4(fp)
    1948:	d8800015 	stw	r2,0(sp)
    194c:	180f883a 	mov	r7,r3
    1950:	e1bffd17 	ldw	r6,-12(fp)
    1954:	01400204 	movi	r5,8
    1958:	e13ffc17 	ldw	r4,-16(fp)
    195c:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x-8, base_y + 8 * height - 8, base_z, leaf_id);
    1960:	e0bffd17 	ldw	r2,-12(fp)
    1964:	113ffe04 	addi	r4,r2,-8
    1968:	e0800217 	ldw	r2,8(fp)
    196c:	100690fa 	slli	r3,r2,3
    1970:	e0bffe17 	ldw	r2,-8(fp)
    1974:	1885883a 	add	r2,r3,r2
    1978:	10fffe04 	addi	r3,r2,-8
    197c:	e0800417 	ldw	r2,16(fp)
    1980:	d8800115 	stw	r2,4(sp)
    1984:	e0bfff17 	ldw	r2,-4(fp)
    1988:	d8800015 	stw	r2,0(sp)
    198c:	180f883a 	mov	r7,r3
    1990:	200d883a 	mov	r6,r4
    1994:	01400204 	movi	r5,8
    1998:	e13ffc17 	ldw	r4,-16(fp)
    199c:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x+8, base_y + 8 * height - 8, base_z, leaf_id);
    19a0:	e0bffd17 	ldw	r2,-12(fp)
    19a4:	11000204 	addi	r4,r2,8
    19a8:	e0800217 	ldw	r2,8(fp)
    19ac:	100690fa 	slli	r3,r2,3
    19b0:	e0bffe17 	ldw	r2,-8(fp)
    19b4:	1885883a 	add	r2,r3,r2
    19b8:	10fffe04 	addi	r3,r2,-8
    19bc:	e0800417 	ldw	r2,16(fp)
    19c0:	d8800115 	stw	r2,4(sp)
    19c4:	e0bfff17 	ldw	r2,-4(fp)
    19c8:	d8800015 	stw	r2,0(sp)
    19cc:	180f883a 	mov	r7,r3
    19d0:	200d883a 	mov	r6,r4
    19d4:	01400204 	movi	r5,8
    19d8:	e13ffc17 	ldw	r4,-16(fp)
    19dc:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x, base_y + 8 * height - 8, base_z + 8, leaf_id);
    19e0:	e0800217 	ldw	r2,8(fp)
    19e4:	100690fa 	slli	r3,r2,3
    19e8:	e0bffe17 	ldw	r2,-8(fp)
    19ec:	1885883a 	add	r2,r3,r2
    19f0:	113ffe04 	addi	r4,r2,-8
    19f4:	e0bfff17 	ldw	r2,-4(fp)
    19f8:	10800204 	addi	r2,r2,8
    19fc:	e0c00417 	ldw	r3,16(fp)
    1a00:	d8c00115 	stw	r3,4(sp)
    1a04:	d8800015 	stw	r2,0(sp)
    1a08:	200f883a 	mov	r7,r4
    1a0c:	e1bffd17 	ldw	r6,-12(fp)
    1a10:	01400204 	movi	r5,8
    1a14:	e13ffc17 	ldw	r4,-16(fp)
    1a18:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x, base_y + 8 * height - 8, base_z - 8, leaf_id);
    1a1c:	e0800217 	ldw	r2,8(fp)
    1a20:	100690fa 	slli	r3,r2,3
    1a24:	e0bffe17 	ldw	r2,-8(fp)
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	113ffe04 	addi	r4,r2,-8
    1a30:	e0bfff17 	ldw	r2,-4(fp)
    1a34:	10bffe04 	addi	r2,r2,-8
    1a38:	e0c00417 	ldw	r3,16(fp)
    1a3c:	d8c00115 	stw	r3,4(sp)
    1a40:	d8800015 	stw	r2,0(sp)
    1a44:	200f883a 	mov	r7,r4
    1a48:	e1bffd17 	ldw	r6,-12(fp)
    1a4c:	01400204 	movi	r5,8
    1a50:	e13ffc17 	ldw	r4,-16(fp)
    1a54:	00003600 	call	360 <draw_cube>

	draw_cube(gpu, 8, base_x-8, base_y + 8 * height - 16, base_z, leaf_id);
    1a58:	e0bffd17 	ldw	r2,-12(fp)
    1a5c:	113ffe04 	addi	r4,r2,-8
    1a60:	e0800217 	ldw	r2,8(fp)
    1a64:	100690fa 	slli	r3,r2,3
    1a68:	e0bffe17 	ldw	r2,-8(fp)
    1a6c:	1885883a 	add	r2,r3,r2
    1a70:	10fffc04 	addi	r3,r2,-16
    1a74:	e0800417 	ldw	r2,16(fp)
    1a78:	d8800115 	stw	r2,4(sp)
    1a7c:	e0bfff17 	ldw	r2,-4(fp)
    1a80:	d8800015 	stw	r2,0(sp)
    1a84:	180f883a 	mov	r7,r3
    1a88:	200d883a 	mov	r6,r4
    1a8c:	01400204 	movi	r5,8
    1a90:	e13ffc17 	ldw	r4,-16(fp)
    1a94:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x+8, base_y + 8 * height - 16, base_z, leaf_id);
    1a98:	e0bffd17 	ldw	r2,-12(fp)
    1a9c:	11000204 	addi	r4,r2,8
    1aa0:	e0800217 	ldw	r2,8(fp)
    1aa4:	100690fa 	slli	r3,r2,3
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	1885883a 	add	r2,r3,r2
    1ab0:	10fffc04 	addi	r3,r2,-16
    1ab4:	e0800417 	ldw	r2,16(fp)
    1ab8:	d8800115 	stw	r2,4(sp)
    1abc:	e0bfff17 	ldw	r2,-4(fp)
    1ac0:	d8800015 	stw	r2,0(sp)
    1ac4:	180f883a 	mov	r7,r3
    1ac8:	200d883a 	mov	r6,r4
    1acc:	01400204 	movi	r5,8
    1ad0:	e13ffc17 	ldw	r4,-16(fp)
    1ad4:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x, base_y + 8 * height - 16, base_z + 8, leaf_id);
    1ad8:	e0800217 	ldw	r2,8(fp)
    1adc:	100690fa 	slli	r3,r2,3
    1ae0:	e0bffe17 	ldw	r2,-8(fp)
    1ae4:	1885883a 	add	r2,r3,r2
    1ae8:	113ffc04 	addi	r4,r2,-16
    1aec:	e0bfff17 	ldw	r2,-4(fp)
    1af0:	10800204 	addi	r2,r2,8
    1af4:	e0c00417 	ldw	r3,16(fp)
    1af8:	d8c00115 	stw	r3,4(sp)
    1afc:	d8800015 	stw	r2,0(sp)
    1b00:	200f883a 	mov	r7,r4
    1b04:	e1bffd17 	ldw	r6,-12(fp)
    1b08:	01400204 	movi	r5,8
    1b0c:	e13ffc17 	ldw	r4,-16(fp)
    1b10:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x, base_y + 8 * height - 16, base_z - 8, leaf_id);
    1b14:	e0800217 	ldw	r2,8(fp)
    1b18:	100690fa 	slli	r3,r2,3
    1b1c:	e0bffe17 	ldw	r2,-8(fp)
    1b20:	1885883a 	add	r2,r3,r2
    1b24:	113ffc04 	addi	r4,r2,-16
    1b28:	e0bfff17 	ldw	r2,-4(fp)
    1b2c:	10bffe04 	addi	r2,r2,-8
    1b30:	e0c00417 	ldw	r3,16(fp)
    1b34:	d8c00115 	stw	r3,4(sp)
    1b38:	d8800015 	stw	r2,0(sp)
    1b3c:	200f883a 	mov	r7,r4
    1b40:	e1bffd17 	ldw	r6,-12(fp)
    1b44:	01400204 	movi	r5,8
    1b48:	e13ffc17 	ldw	r4,-16(fp)
    1b4c:	00003600 	call	360 <draw_cube>

	draw_cube(gpu, 8, base_x-8, base_y + 8 * height - 16, base_z-8, leaf_id);
    1b50:	e0bffd17 	ldw	r2,-12(fp)
    1b54:	113ffe04 	addi	r4,r2,-8
    1b58:	e0800217 	ldw	r2,8(fp)
    1b5c:	100690fa 	slli	r3,r2,3
    1b60:	e0bffe17 	ldw	r2,-8(fp)
    1b64:	1885883a 	add	r2,r3,r2
    1b68:	117ffc04 	addi	r5,r2,-16
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
    1b70:	10bffe04 	addi	r2,r2,-8
    1b74:	e0c00417 	ldw	r3,16(fp)
    1b78:	d8c00115 	stw	r3,4(sp)
    1b7c:	d8800015 	stw	r2,0(sp)
    1b80:	280f883a 	mov	r7,r5
    1b84:	200d883a 	mov	r6,r4
    1b88:	01400204 	movi	r5,8
    1b8c:	e13ffc17 	ldw	r4,-16(fp)
    1b90:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x+8, base_y + 8 * height - 16, base_z-8, leaf_id);
    1b94:	e0bffd17 	ldw	r2,-12(fp)
    1b98:	11000204 	addi	r4,r2,8
    1b9c:	e0800217 	ldw	r2,8(fp)
    1ba0:	100690fa 	slli	r3,r2,3
    1ba4:	e0bffe17 	ldw	r2,-8(fp)
    1ba8:	1885883a 	add	r2,r3,r2
    1bac:	117ffc04 	addi	r5,r2,-16
    1bb0:	e0bfff17 	ldw	r2,-4(fp)
    1bb4:	10bffe04 	addi	r2,r2,-8
    1bb8:	e0c00417 	ldw	r3,16(fp)
    1bbc:	d8c00115 	stw	r3,4(sp)
    1bc0:	d8800015 	stw	r2,0(sp)
    1bc4:	280f883a 	mov	r7,r5
    1bc8:	200d883a 	mov	r6,r4
    1bcc:	01400204 	movi	r5,8
    1bd0:	e13ffc17 	ldw	r4,-16(fp)
    1bd4:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x-8, base_y + 8 * height - 16, base_z + 8, leaf_id);
    1bd8:	e0bffd17 	ldw	r2,-12(fp)
    1bdc:	113ffe04 	addi	r4,r2,-8
    1be0:	e0800217 	ldw	r2,8(fp)
    1be4:	100690fa 	slli	r3,r2,3
    1be8:	e0bffe17 	ldw	r2,-8(fp)
    1bec:	1885883a 	add	r2,r3,r2
    1bf0:	117ffc04 	addi	r5,r2,-16
    1bf4:	e0bfff17 	ldw	r2,-4(fp)
    1bf8:	10800204 	addi	r2,r2,8
    1bfc:	e0c00417 	ldw	r3,16(fp)
    1c00:	d8c00115 	stw	r3,4(sp)
    1c04:	d8800015 	stw	r2,0(sp)
    1c08:	280f883a 	mov	r7,r5
    1c0c:	200d883a 	mov	r6,r4
    1c10:	01400204 	movi	r5,8
    1c14:	e13ffc17 	ldw	r4,-16(fp)
    1c18:	00003600 	call	360 <draw_cube>
	draw_cube(gpu, 8, base_x+8, base_y + 8 * height - 16, base_z + 8, leaf_id);
    1c1c:	e0bffd17 	ldw	r2,-12(fp)
    1c20:	11000204 	addi	r4,r2,8
    1c24:	e0800217 	ldw	r2,8(fp)
    1c28:	100690fa 	slli	r3,r2,3
    1c2c:	e0bffe17 	ldw	r2,-8(fp)
    1c30:	1885883a 	add	r2,r3,r2
    1c34:	117ffc04 	addi	r5,r2,-16
    1c38:	e0bfff17 	ldw	r2,-4(fp)
    1c3c:	10800204 	addi	r2,r2,8
    1c40:	e0c00417 	ldw	r3,16(fp)
    1c44:	d8c00115 	stw	r3,4(sp)
    1c48:	d8800015 	stw	r2,0(sp)
    1c4c:	280f883a 	mov	r7,r5
    1c50:	200d883a 	mov	r6,r4
    1c54:	01400204 	movi	r5,8
    1c58:	e13ffc17 	ldw	r4,-16(fp)
    1c5c:	00003600 	call	360 <draw_cube>

}
    1c60:	0001883a 	nop
    1c64:	e037883a 	mov	sp,fp
    1c68:	dfc00117 	ldw	ra,4(sp)
    1c6c:	df000017 	ldw	fp,0(sp)
    1c70:	dec00204 	addi	sp,sp,8
    1c74:	f800283a 	ret

00001c78 <main>:

int main() {
    1c78:	deffe304 	addi	sp,sp,-116
    1c7c:	dfc01c15 	stw	ra,112(sp)
    1c80:	df001b15 	stw	fp,108(sp)
    1c84:	dc001a15 	stw	r16,104(sp)
    1c88:	df001b04 	addi	fp,sp,108

	printf("Starting up");
    1c8c:	01000074 	movhi	r4,1
    1c90:	211eac04 	addi	r4,r4,31408
    1c94:	000909c0 	call	909c <printf>

	union frame_buffer_t* frame1 = (frame_buffer_t*) COPY_DMA_WRITE_MASTER_FRAME_BUFFER_BASE;
    1c98:	00820034 	movhi	r2,2048
    1c9c:	e0bff115 	stw	r2,-60(fp)
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    1ca0:	01000174 	movhi	r4,5
    1ca4:	212c0004 	addi	r4,r4,-20480
    1ca8:	00088380 	call	8838 <malloc>
    1cac:	e0bff215 	stw	r2,-56(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    1cb0:	01000174 	movhi	r4,5
    1cb4:	212c0004 	addi	r4,r4,-20480
    1cb8:	00088380 	call	8838 <malloc>
    1cbc:	e0bff315 	stw	r2,-52(fp)

	dma->back_buffer = frame1;
    1cc0:	d0a00117 	ldw	r2,-32764(gp)
    1cc4:	e0fff117 	ldw	r3,-60(fp)
    1cc8:	10c00115 	stw	r3,4(r2)
	dma->front_buffer = 0; //swap
    1ccc:	d0a00117 	ldw	r2,-32764(gp)
    1cd0:	10000015 	stw	zero,0(r2)

	gpu->frame_pointer = frame2;
    1cd4:	d0a00017 	ldw	r2,-32768(gp)
    1cd8:	e0fff217 	ldw	r3,-56(fp)
    1cdc:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    1ce0:	d0a00017 	ldw	r2,-32768(gp)
    1ce4:	e0fff317 	ldw	r3,-52(fp)
    1ce8:	10c00315 	stw	r3,12(r2)

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    1cec:	e1fff317 	ldw	r7,-52(fp)
    1cf0:	e1bff217 	ldw	r6,-56(fp)
    1cf4:	e17ff117 	ldw	r5,-60(fp)
    1cf8:	01000074 	movhi	r4,1
    1cfc:	211eaf04 	addi	r4,r4,31420
    1d00:	000909c0 	call	909c <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    1d04:	01000074 	movhi	r4,1
    1d08:	211ebd04 	addi	r4,r4,31476
    1d0c:	00091980 	call	9198 <puts>
	init_keyboard();
    1d10:	0000c700 	call	c70 <init_keyboard>

	double theta = 0;
    1d14:	e03fe815 	stw	zero,-96(fp)
    1d18:	e03fe915 	stw	zero,-92(fp)
	double phi = 0;
    1d1c:	e03fea15 	stw	zero,-88(fp)
    1d20:	e03feb15 	stw	zero,-84(fp)

	gpu->cam_pos.z = 0;
    1d24:	d0a00017 	ldw	r2,-32768(gp)
    1d28:	10001515 	stw	zero,84(r2)
	gpu->cam_pos.y = 0;
    1d2c:	d0a00017 	ldw	r2,-32768(gp)
    1d30:	10001415 	stw	zero,80(r2)

	int keycode = 0;
    1d34:	e03ffc15 	stw	zero,-16(fp)
	float last_fps = 0;
    1d38:	e03fec15 	stw	zero,-80(fp)
	char fps_str[4];
	while (1) {
		time_t start_time = clock();
    1d3c:	00086140 	call	8614 <clock>
    1d40:	e0bff415 	stw	r2,-48(fp)
		time_t frame_time = clock();
    1d44:	00086140 	call	8614 <clock>
    1d48:	e0bff515 	stw	r2,-44(fp)

		//transfer(frame_clean, frame2, sizeof(frame2->D1));
		//transfer(z_buffer_clean, z_buffer, sizeof(z_buffer->D2));

		clear_screen(gpu, 1);
    1d4c:	d0a00017 	ldw	r2,-32768(gp)
    1d50:	01400044 	movi	r5,1
    1d54:	1009883a 	mov	r4,r2
    1d58:	00002780 	call	278 <clear_screen>
		clear_depth(gpu, 1);
    1d5c:	d0a00017 	ldw	r2,-32768(gp)
    1d60:	01400044 	movi	r5,1
    1d64:	1009883a 	mov	r4,r2
    1d68:	00002ec0 	call	2ec <clear_depth>


		printf("Clear ticks %d\n", clock() - start_time);
    1d6c:	00086140 	call	8614 <clock>
    1d70:	1007883a 	mov	r3,r2
    1d74:	e0bff417 	ldw	r2,-48(fp)
    1d78:	1885c83a 	sub	r2,r3,r2
    1d7c:	100b883a 	mov	r5,r2
    1d80:	01000074 	movhi	r4,1
    1d84:	211ec704 	addi	r4,r4,31516
    1d88:	000909c0 	call	909c <printf>

		start_time = clock();
    1d8c:	00086140 	call	8614 <clock>
    1d90:	e0bff415 	stw	r2,-48(fp)

		for (int z = 4; z > 0; z--) {
    1d94:	00800104 	movi	r2,4
    1d98:	e0bfed15 	stw	r2,-76(fp)
    1d9c:	00001a06 	br	1e08 <main+0x190>
			for (int x = 10; x > -5; x--) {
    1da0:	00800284 	movi	r2,10
    1da4:	e0bfee15 	stw	r2,-72(fp)
    1da8:	00001106 	br	1df0 <main+0x178>
				draw_cube(gpu, 8, -16 + 8 * x, -16, -64 + 8 * z, BLOCK_GRASS);
    1dac:	d0e00017 	ldw	r3,-32768(gp)
    1db0:	e0bfee17 	ldw	r2,-72(fp)
    1db4:	10bfff84 	addi	r2,r2,-2
    1db8:	100890fa 	slli	r4,r2,3
    1dbc:	e0bfed17 	ldw	r2,-76(fp)
    1dc0:	10bffe04 	addi	r2,r2,-8
    1dc4:	100490fa 	slli	r2,r2,3
    1dc8:	d8000115 	stw	zero,4(sp)
    1dcc:	d8800015 	stw	r2,0(sp)
    1dd0:	01fffc04 	movi	r7,-16
    1dd4:	200d883a 	mov	r6,r4
    1dd8:	01400204 	movi	r5,8
    1ddc:	1809883a 	mov	r4,r3
    1de0:	00003600 	call	360 <draw_cube>
		printf("Clear ticks %d\n", clock() - start_time);

		start_time = clock();

		for (int z = 4; z > 0; z--) {
			for (int x = 10; x > -5; x--) {
    1de4:	e0bfee17 	ldw	r2,-72(fp)
    1de8:	10bfffc4 	addi	r2,r2,-1
    1dec:	e0bfee15 	stw	r2,-72(fp)
    1df0:	e0bfee17 	ldw	r2,-72(fp)
    1df4:	10bfff08 	cmpgei	r2,r2,-4
    1df8:	103fec1e 	bne	r2,zero,1dac <__alt_exception_stack_pointer+0xf8001dac>

		printf("Clear ticks %d\n", clock() - start_time);

		start_time = clock();

		for (int z = 4; z > 0; z--) {
    1dfc:	e0bfed17 	ldw	r2,-76(fp)
    1e00:	10bfffc4 	addi	r2,r2,-1
    1e04:	e0bfed15 	stw	r2,-76(fp)
    1e08:	e0bfed17 	ldw	r2,-76(fp)
    1e0c:	00bfe416 	blt	zero,r2,1da0 <__alt_exception_stack_pointer+0xf8001da0>
				draw_cube(gpu, 8, -16 + 8 * x, -16, -64 + 8 * z, BLOCK_GRASS);
			}
		}

		//		draw_cube(gpu, 8, -16 + 16, -16 + 8 * y, -64 + 16 - 16, BLOCK_LOG_DARK);
		draw_tree(gpu, 0, -16, -64, 5, BLOCK_LOG_DARK, BLOCK_LEAF_TRANS);
    1e10:	d0e00017 	ldw	r3,-32768(gp)
    1e14:	00800144 	movi	r2,5
    1e18:	d8800215 	stw	r2,8(sp)
    1e1c:	008000c4 	movi	r2,3
    1e20:	d8800115 	stw	r2,4(sp)
    1e24:	00800144 	movi	r2,5
    1e28:	d8800015 	stw	r2,0(sp)
    1e2c:	01fff004 	movi	r7,-64
    1e30:	01bffc04 	movi	r6,-16
    1e34:	000b883a 	mov	r5,zero
    1e38:	1809883a 	mov	r4,r3
    1e3c:	00018b80 	call	18b8 <draw_tree>


		draw_tree(gpu, -16, -16, -48, 6,  BLOCK_LOG, BLOCK_LEAF_TRANS);
    1e40:	d0e00017 	ldw	r3,-32768(gp)
    1e44:	00800144 	movi	r2,5
    1e48:	d8800215 	stw	r2,8(sp)
    1e4c:	00800084 	movi	r2,2
    1e50:	d8800115 	stw	r2,4(sp)
    1e54:	00800184 	movi	r2,6
    1e58:	d8800015 	stw	r2,0(sp)
    1e5c:	01fff404 	movi	r7,-48
    1e60:	01bffc04 	movi	r6,-16
    1e64:	017ffc04 	movi	r5,-16
    1e68:	1809883a 	mov	r4,r3
    1e6c:	00018b80 	call	18b8 <draw_tree>



		draw_cube(gpu, 8, 16, -8, -40, BLOCK_COBBLE);
    1e70:	d0e00017 	ldw	r3,-32768(gp)
    1e74:	00800204 	movi	r2,8
    1e78:	d8800115 	stw	r2,4(sp)
    1e7c:	00bff604 	movi	r2,-40
    1e80:	d8800015 	stw	r2,0(sp)
    1e84:	01fffe04 	movi	r7,-8
    1e88:	01800404 	movi	r6,16
    1e8c:	01400204 	movi	r5,8
    1e90:	1809883a 	mov	r4,r3
    1e94:	00003600 	call	360 <draw_cube>
		draw_cube(gpu, 8, 8, -8, -40, BLOCK_COBBLE);
    1e98:	d0e00017 	ldw	r3,-32768(gp)
    1e9c:	00800204 	movi	r2,8
    1ea0:	d8800115 	stw	r2,4(sp)
    1ea4:	00bff604 	movi	r2,-40
    1ea8:	d8800015 	stw	r2,0(sp)
    1eac:	01fffe04 	movi	r7,-8
    1eb0:	01800204 	movi	r6,8
    1eb4:	01400204 	movi	r5,8
    1eb8:	1809883a 	mov	r4,r3
    1ebc:	00003600 	call	360 <draw_cube>
		draw_cube(gpu, 8, 24, -8, -40, BLOCK_COBBLE);
    1ec0:	d0e00017 	ldw	r3,-32768(gp)
    1ec4:	00800204 	movi	r2,8
    1ec8:	d8800115 	stw	r2,4(sp)
    1ecc:	00bff604 	movi	r2,-40
    1ed0:	d8800015 	stw	r2,0(sp)
    1ed4:	01fffe04 	movi	r7,-8
    1ed8:	01800604 	movi	r6,24
    1edc:	01400204 	movi	r5,8
    1ee0:	1809883a 	mov	r4,r3
    1ee4:	00003600 	call	360 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40 - 8, BLOCK_COBBLE);
    1ee8:	d0e00017 	ldw	r3,-32768(gp)
    1eec:	00800204 	movi	r2,8
    1ef0:	d8800115 	stw	r2,4(sp)
    1ef4:	00bff404 	movi	r2,-48
    1ef8:	d8800015 	stw	r2,0(sp)
    1efc:	01fffe04 	movi	r7,-8
    1f00:	01800404 	movi	r6,16
    1f04:	01400204 	movi	r5,8
    1f08:	1809883a 	mov	r4,r3
    1f0c:	00003600 	call	360 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40 + 8, BLOCK_GLASS);
    1f10:	d0e00017 	ldw	r3,-32768(gp)
    1f14:	008002c4 	movi	r2,11
    1f18:	d8800115 	stw	r2,4(sp)
    1f1c:	00bff804 	movi	r2,-32
    1f20:	d8800015 	stw	r2,0(sp)
    1f24:	01fffe04 	movi	r7,-8
    1f28:	01800404 	movi	r6,16
    1f2c:	01400204 	movi	r5,8
    1f30:	1809883a 	mov	r4,r3
    1f34:	00003600 	call	360 <draw_cube>
		draw_cube(gpu, 8, 16, 0, -40, BLOCK_FURNACE);
    1f38:	d0e00017 	ldw	r3,-32768(gp)
    1f3c:	00800284 	movi	r2,10
    1f40:	d8800115 	stw	r2,4(sp)
    1f44:	00bff604 	movi	r2,-40
    1f48:	d8800015 	stw	r2,0(sp)
    1f4c:	000f883a 	mov	r7,zero
    1f50:	01800404 	movi	r6,16
    1f54:	01400204 	movi	r5,8
    1f58:	1809883a 	mov	r4,r3
    1f5c:	00003600 	call	360 <draw_cube>



		int c_w = 3;
    1f60:	008000c4 	movi	r2,3
    1f64:	e0bff615 	stw	r2,-40(fp)
		int c_h = 3;
    1f68:	008000c4 	movi	r2,3
    1f6c:	e0bff715 	stw	r2,-36(fp)
		pixel_t pixel = {200, 200, 200, 0};
    1f70:	00bff204 	movi	r2,-56
    1f74:	e0bffe05 	stb	r2,-8(fp)
    1f78:	00bff204 	movi	r2,-56
    1f7c:	e0bffe45 	stb	r2,-7(fp)
    1f80:	00bff204 	movi	r2,-56
    1f84:	e0bffe85 	stb	r2,-6(fp)
    1f88:	e03ffec5 	stb	zero,-5(fp)
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
    1f8c:	00c01e04 	movi	r3,120
    1f90:	e0bff617 	ldw	r2,-40(fp)
    1f94:	1885c83a 	sub	r2,r3,r2
    1f98:	e0bfef15 	stw	r2,-68(fp)
    1f9c:	00001206 	br	1fe8 <main+0x370>
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;
    1fa0:	e43ff217 	ldw	r16,-56(fp)
    1fa4:	e0bfef17 	ldw	r2,-68(fp)
    1fa8:	01414004 	movi	r5,1280
    1fac:	1009883a 	mov	r4,r2
    1fb0:	0005b840 	call	5b84 <__mulsi3>
    1fb4:	8085883a 	add	r2,r16,r2
    1fb8:	1080a004 	addi	r2,r2,640
    1fbc:	e0fffe03 	ldbu	r3,-8(fp)
    1fc0:	10c00005 	stb	r3,0(r2)
    1fc4:	e0fffe43 	ldbu	r3,-7(fp)
    1fc8:	10c00045 	stb	r3,1(r2)
    1fcc:	e0fffe83 	ldbu	r3,-6(fp)
    1fd0:	10c00085 	stb	r3,2(r2)
    1fd4:	e0fffec3 	ldbu	r3,-5(fp)
    1fd8:	10c000c5 	stb	r3,3(r2)


		int c_w = 3;
		int c_h = 3;
		pixel_t pixel = {200, 200, 200, 0};
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
    1fdc:	e0bfef17 	ldw	r2,-68(fp)
    1fe0:	10800044 	addi	r2,r2,1
    1fe4:	e0bfef15 	stw	r2,-68(fp)
    1fe8:	e0bff617 	ldw	r2,-40(fp)
    1fec:	10801e44 	addi	r2,r2,121
    1ff0:	e0ffef17 	ldw	r3,-68(fp)
    1ff4:	18bfea16 	blt	r3,r2,1fa0 <__alt_exception_stack_pointer+0xf8001fa0>
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;
		}
		for(int c = SCREEN_WIDTH/2 - c_h; c < SCREEN_WIDTH/2 + c_h + 1;c++) {
    1ff8:	00c02804 	movi	r3,160
    1ffc:	e0bff717 	ldw	r2,-36(fp)
    2000:	1885c83a 	sub	r2,r3,r2
    2004:	e0bff015 	stw	r2,-64(fp)
    2008:	00001206 	br	2054 <main+0x3dc>
			frame2->D2[SCREEN_HEIGHT/2][c] = pixel;
    200c:	e0fff217 	ldw	r3,-56(fp)
    2010:	e13ff017 	ldw	r4,-64(fp)
    2014:	00a58014 	movui	r2,38400
    2018:	2085883a 	add	r2,r4,r2
    201c:	1085883a 	add	r2,r2,r2
    2020:	1085883a 	add	r2,r2,r2
    2024:	1885883a 	add	r2,r3,r2
    2028:	e0fffe03 	ldbu	r3,-8(fp)
    202c:	10c00005 	stb	r3,0(r2)
    2030:	e0fffe43 	ldbu	r3,-7(fp)
    2034:	10c00045 	stb	r3,1(r2)
    2038:	e0fffe83 	ldbu	r3,-6(fp)
    203c:	10c00085 	stb	r3,2(r2)
    2040:	e0fffec3 	ldbu	r3,-5(fp)
    2044:	10c000c5 	stb	r3,3(r2)
		int c_h = 3;
		pixel_t pixel = {200, 200, 200, 0};
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;
		}
		for(int c = SCREEN_WIDTH/2 - c_h; c < SCREEN_WIDTH/2 + c_h + 1;c++) {
    2048:	e0bff017 	ldw	r2,-64(fp)
    204c:	10800044 	addi	r2,r2,1
    2050:	e0bff015 	stw	r2,-64(fp)
    2054:	e0bff717 	ldw	r2,-36(fp)
    2058:	10802844 	addi	r2,r2,161
    205c:	e0fff017 	ldw	r3,-64(fp)
    2060:	18bfea16 	blt	r3,r2,200c <__alt_exception_stack_pointer+0xf800200c>
			frame2->D2[SCREEN_HEIGHT/2][c] = pixel;
		}

		printf("Render ticks %d\n", clock() - start_time);
    2064:	00086140 	call	8614 <clock>
    2068:	1007883a 	mov	r3,r2
    206c:	e0bff417 	ldw	r2,-48(fp)
    2070:	1885c83a 	sub	r2,r3,r2
    2074:	100b883a 	mov	r5,r2
    2078:	01000074 	movhi	r4,1
    207c:	211ecb04 	addi	r4,r4,31532
    2080:	000909c0 	call	909c <printf>
		start_time = clock();
    2084:	00086140 	call	8614 <clock>
    2088:	e0bff415 	stw	r2,-48(fp)


		gcvt (last_fps, 4, fps_str);
    208c:	e13fec17 	ldw	r4,-80(fp)
    2090:	00082f80 	call	82f8 <__extendsfdf2>
    2094:	1011883a 	mov	r8,r2
    2098:	1813883a 	mov	r9,r3
    209c:	e0bffd04 	addi	r2,fp,-12
    20a0:	100f883a 	mov	r7,r2
    20a4:	01800104 	movi	r6,4
    20a8:	4009883a 	mov	r4,r8
    20ac:	480b883a 	mov	r5,r9
    20b0:	00087580 	call	8758 <gcvt>
		draw_string(frame2, "FPS:", 4, 10, 10);
    20b4:	00800284 	movi	r2,10
    20b8:	d8800015 	stw	r2,0(sp)
    20bc:	01c00284 	movi	r7,10
    20c0:	01800104 	movi	r6,4
    20c4:	01400074 	movhi	r5,1
    20c8:	295ed004 	addi	r5,r5,31552
    20cc:	e13ff217 	ldw	r4,-56(fp)
    20d0:	00004240 	call	424 <draw_string>
		draw_string(frame2, fps_str, 4, 40, 10);
    20d4:	e0fffd04 	addi	r3,fp,-12
    20d8:	00800284 	movi	r2,10
    20dc:	d8800015 	stw	r2,0(sp)
    20e0:	01c00a04 	movi	r7,40
    20e4:	01800104 	movi	r6,4
    20e8:	180b883a 	mov	r5,r3
    20ec:	e13ff217 	ldw	r4,-56(fp)
    20f0:	00004240 	call	424 <draw_string>
		transfer(frame2, frame1,sizeof(frame1->D1));
    20f4:	01800174 	movhi	r6,5
    20f8:	31ac0004 	addi	r6,r6,-20480
    20fc:	e17ff117 	ldw	r5,-60(fp)
    2100:	e13ff217 	ldw	r4,-56(fp)
    2104:	00025240 	call	2524 <transfer>

		printf("Copy ticks %d\n", clock() - start_time);
    2108:	00086140 	call	8614 <clock>
    210c:	1007883a 	mov	r3,r2
    2110:	e0bff417 	ldw	r2,-48(fp)
    2114:	1885c83a 	sub	r2,r3,r2
    2118:	100b883a 	mov	r5,r2
    211c:	01000074 	movhi	r4,1
    2120:	211ed204 	addi	r4,r4,31560
    2124:	000909c0 	call	909c <printf>
		start_time = clock();
    2128:	00086140 	call	8614 <clock>
    212c:	e0bff415 	stw	r2,-48(fp)


		loop_keyboard(&keycode);
    2130:	e0bffc04 	addi	r2,fp,-16
    2134:	1009883a 	mov	r4,r2
    2138:	00009700 	call	970 <loop_keyboard>
		if(keycode == KEY_S) {
    213c:	e0bffc17 	ldw	r2,-16(fp)
    2140:	10800598 	cmpnei	r2,r2,22
    2144:	1000061e 	bne	r2,zero,2160 <main+0x4e8>
			gpu->cam_pos.z += 1;
    2148:	d0a00017 	ldw	r2,-32768(gp)
    214c:	d0e00017 	ldw	r3,-32768(gp)
    2150:	18c01517 	ldw	r3,84(r3)
    2154:	18c00044 	addi	r3,r3,1
    2158:	10c01515 	stw	r3,84(r2)
    215c:	00000806 	br	2180 <main+0x508>
		} else if (keycode == KEY_W) {
    2160:	e0bffc17 	ldw	r2,-16(fp)
    2164:	10800698 	cmpnei	r2,r2,26
    2168:	1000051e 	bne	r2,zero,2180 <main+0x508>
			gpu->cam_pos.z -= 1;
    216c:	d0a00017 	ldw	r2,-32768(gp)
    2170:	d0e00017 	ldw	r3,-32768(gp)
    2174:	18c01517 	ldw	r3,84(r3)
    2178:	18ffffc4 	addi	r3,r3,-1
    217c:	10c01515 	stw	r3,84(r2)
		}

		if(keycode == KEY_A) {
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10800118 	cmpnei	r2,r2,4
    2188:	1000061e 	bne	r2,zero,21a4 <main+0x52c>
			gpu->cam_pos.x += 1;
    218c:	d0a00017 	ldw	r2,-32768(gp)
    2190:	d0e00017 	ldw	r3,-32768(gp)
    2194:	18c01317 	ldw	r3,76(r3)
    2198:	18c00044 	addi	r3,r3,1
    219c:	10c01315 	stw	r3,76(r2)
    21a0:	00000806 	br	21c4 <main+0x54c>
		} else if (keycode == KEY_D) {
    21a4:	e0bffc17 	ldw	r2,-16(fp)
    21a8:	108001d8 	cmpnei	r2,r2,7
    21ac:	1000051e 	bne	r2,zero,21c4 <main+0x54c>
			gpu->cam_pos.x -= 1;
    21b0:	d0a00017 	ldw	r2,-32768(gp)
    21b4:	d0e00017 	ldw	r3,-32768(gp)
    21b8:	18c01317 	ldw	r3,76(r3)
    21bc:	18ffffc4 	addi	r3,r3,-1
    21c0:	10c01315 	stw	r3,76(r2)
		}

		if(keycode == KEY_UP) {
    21c4:	e0bffc17 	ldw	r2,-16(fp)
    21c8:	10801498 	cmpnei	r2,r2,82
    21cc:	10000c1e 	bne	r2,zero,2200 <main+0x588>
			theta += 0.01;
    21d0:	0191ebb4 	movhi	r6,18350
    21d4:	31851ec4 	addi	r6,r6,5243
    21d8:	01cfe134 	movhi	r7,16260
    21dc:	39deb844 	addi	r7,r7,31457
    21e0:	e13fe817 	ldw	r4,-96(fp)
    21e4:	e17fe917 	ldw	r5,-92(fp)
    21e8:	0005bac0 	call	5bac <__adddf3>
    21ec:	1009883a 	mov	r4,r2
    21f0:	180b883a 	mov	r5,r3
    21f4:	e13fe815 	stw	r4,-96(fp)
    21f8:	e17fe915 	stw	r5,-92(fp)
    21fc:	00000e06 	br	2238 <main+0x5c0>
		} else if(keycode == KEY_DOWN) {
    2200:	e0bffc17 	ldw	r2,-16(fp)
    2204:	10801458 	cmpnei	r2,r2,81
    2208:	10000b1e 	bne	r2,zero,2238 <main+0x5c0>
			theta -= 0.01;
    220c:	0191ebb4 	movhi	r6,18350
    2210:	31851ec4 	addi	r6,r6,5243
    2214:	01cfe134 	movhi	r7,16260
    2218:	39deb844 	addi	r7,r7,31457
    221c:	e13fe817 	ldw	r4,-96(fp)
    2220:	e17fe917 	ldw	r5,-92(fp)
    2224:	00077f80 	call	77f8 <__subdf3>
    2228:	1009883a 	mov	r4,r2
    222c:	180b883a 	mov	r5,r3
    2230:	e13fe815 	stw	r4,-96(fp)
    2234:	e17fe915 	stw	r5,-92(fp)
		}

		if(keycode == KEY_LEFT) {
    2238:	e0bffc17 	ldw	r2,-16(fp)
    223c:	10801418 	cmpnei	r2,r2,80
    2240:	10000c1e 	bne	r2,zero,2274 <main+0x5fc>
			phi += 0.01;
    2244:	0191ebb4 	movhi	r6,18350
    2248:	31851ec4 	addi	r6,r6,5243
    224c:	01cfe134 	movhi	r7,16260
    2250:	39deb844 	addi	r7,r7,31457
    2254:	e13fea17 	ldw	r4,-88(fp)
    2258:	e17feb17 	ldw	r5,-84(fp)
    225c:	0005bac0 	call	5bac <__adddf3>
    2260:	1009883a 	mov	r4,r2
    2264:	180b883a 	mov	r5,r3
    2268:	e13fea15 	stw	r4,-88(fp)
    226c:	e17feb15 	stw	r5,-84(fp)
    2270:	00000e06 	br	22ac <main+0x634>
		} else if(keycode == KEY_RIGHT) {
    2274:	e0bffc17 	ldw	r2,-16(fp)
    2278:	108013d8 	cmpnei	r2,r2,79
    227c:	10000b1e 	bne	r2,zero,22ac <main+0x634>
			phi -= 0.01;
    2280:	0191ebb4 	movhi	r6,18350
    2284:	31851ec4 	addi	r6,r6,5243
    2288:	01cfe134 	movhi	r7,16260
    228c:	39deb844 	addi	r7,r7,31457
    2290:	e13fea17 	ldw	r4,-88(fp)
    2294:	e17feb17 	ldw	r5,-84(fp)
    2298:	00077f80 	call	77f8 <__subdf3>
    229c:	1009883a 	mov	r4,r2
    22a0:	180b883a 	mov	r5,r3
    22a4:	e13fea15 	stw	r4,-88(fp)
    22a8:	e17feb15 	stw	r5,-84(fp)
		}

		int s_t = (int) (sin(theta) * (1 << 8));
    22ac:	e13fe817 	ldw	r4,-96(fp)
    22b0:	e17fe917 	ldw	r5,-92(fp)
    22b4:	00038b40 	call	38b4 <sin>
    22b8:	1011883a 	mov	r8,r2
    22bc:	1813883a 	mov	r9,r3
    22c0:	000d883a 	mov	r6,zero
    22c4:	01d01c34 	movhi	r7,16496
    22c8:	4009883a 	mov	r4,r8
    22cc:	480b883a 	mov	r5,r9
    22d0:	0006f8c0 	call	6f8c <__muldf3>
    22d4:	1009883a 	mov	r4,r2
    22d8:	180b883a 	mov	r5,r3
    22dc:	2005883a 	mov	r2,r4
    22e0:	2807883a 	mov	r3,r5
    22e4:	1009883a 	mov	r4,r2
    22e8:	180b883a 	mov	r5,r3
    22ec:	00080f40 	call	80f4 <__fixdfsi>
    22f0:	e0bff815 	stw	r2,-32(fp)
		int c_t = (int) (cos(theta) * (1 << 8));
    22f4:	e13fe817 	ldw	r4,-96(fp)
    22f8:	e17fe917 	ldw	r5,-92(fp)
    22fc:	00037c80 	call	37c8 <cos>
    2300:	1011883a 	mov	r8,r2
    2304:	1813883a 	mov	r9,r3
    2308:	000d883a 	mov	r6,zero
    230c:	01d01c34 	movhi	r7,16496
    2310:	4009883a 	mov	r4,r8
    2314:	480b883a 	mov	r5,r9
    2318:	0006f8c0 	call	6f8c <__muldf3>
    231c:	1009883a 	mov	r4,r2
    2320:	180b883a 	mov	r5,r3
    2324:	2005883a 	mov	r2,r4
    2328:	2807883a 	mov	r3,r5
    232c:	1009883a 	mov	r4,r2
    2330:	180b883a 	mov	r5,r3
    2334:	00080f40 	call	80f4 <__fixdfsi>
    2338:	e0bff915 	stw	r2,-28(fp)

		int s_p = (int) (sin(phi) * (1 << 8));
    233c:	e13fea17 	ldw	r4,-88(fp)
    2340:	e17feb17 	ldw	r5,-84(fp)
    2344:	00038b40 	call	38b4 <sin>
    2348:	1011883a 	mov	r8,r2
    234c:	1813883a 	mov	r9,r3
    2350:	000d883a 	mov	r6,zero
    2354:	01d01c34 	movhi	r7,16496
    2358:	4009883a 	mov	r4,r8
    235c:	480b883a 	mov	r5,r9
    2360:	0006f8c0 	call	6f8c <__muldf3>
    2364:	1009883a 	mov	r4,r2
    2368:	180b883a 	mov	r5,r3
    236c:	2005883a 	mov	r2,r4
    2370:	2807883a 	mov	r3,r5
    2374:	1009883a 	mov	r4,r2
    2378:	180b883a 	mov	r5,r3
    237c:	00080f40 	call	80f4 <__fixdfsi>
    2380:	e0bffa15 	stw	r2,-24(fp)
		int c_p = (int) (cos(phi) * (1 << 8));
    2384:	e13fea17 	ldw	r4,-88(fp)
    2388:	e17feb17 	ldw	r5,-84(fp)
    238c:	00037c80 	call	37c8 <cos>
    2390:	1011883a 	mov	r8,r2
    2394:	1813883a 	mov	r9,r3
    2398:	000d883a 	mov	r6,zero
    239c:	01d01c34 	movhi	r7,16496
    23a0:	4009883a 	mov	r4,r8
    23a4:	480b883a 	mov	r5,r9
    23a8:	0006f8c0 	call	6f8c <__muldf3>
    23ac:	1009883a 	mov	r4,r2
    23b0:	180b883a 	mov	r5,r3
    23b4:	2005883a 	mov	r2,r4
    23b8:	2807883a 	mov	r3,r5
    23bc:	1009883a 	mov	r4,r2
    23c0:	180b883a 	mov	r5,r3
    23c4:	00080f40 	call	80f4 <__fixdfsi>
    23c8:	e0bffb15 	stw	r2,-20(fp)

		//        Matrix([[cos(phi), 			0,			 sin(phi), 0],
		//                [sin(phi)*sin(theta), cos(theta), -sin(theta)*cos(phi), 0],
		//                [-sin(phi)*cos(theta), sin(theta), cos(phi)*cos(theta), 0], [0, 0, 0, 1]]

		gpu->cam_x_axis.x = c_p;
    23cc:	d0a00017 	ldw	r2,-32768(gp)
    23d0:	e0fffb17 	ldw	r3,-20(fp)
    23d4:	10c00a15 	stw	r3,40(r2)
		gpu->cam_x_axis.y = s_p * s_t / (1 << 8);
    23d8:	d4200017 	ldw	r16,-32768(gp)
    23dc:	e17ff817 	ldw	r5,-32(fp)
    23e0:	e13ffa17 	ldw	r4,-24(fp)
    23e4:	0005b840 	call	5b84 <__mulsi3>
    23e8:	1000010e 	bge	r2,zero,23f0 <main+0x778>
    23ec:	10803fc4 	addi	r2,r2,255
    23f0:	1005d23a 	srai	r2,r2,8
    23f4:	80800b15 	stw	r2,44(r16)
		gpu->cam_x_axis.z = -s_p * c_t / (1 << 8);
    23f8:	d4200017 	ldw	r16,-32768(gp)
    23fc:	e0bffa17 	ldw	r2,-24(fp)
    2400:	0085c83a 	sub	r2,zero,r2
    2404:	e17ff917 	ldw	r5,-28(fp)
    2408:	1009883a 	mov	r4,r2
    240c:	0005b840 	call	5b84 <__mulsi3>
    2410:	1000010e 	bge	r2,zero,2418 <main+0x7a0>
    2414:	10803fc4 	addi	r2,r2,255
    2418:	1005d23a 	srai	r2,r2,8
    241c:	80800c15 	stw	r2,48(r16)

		gpu->cam_y_axis.x = 0;
    2420:	d0a00017 	ldw	r2,-32768(gp)
    2424:	10000d15 	stw	zero,52(r2)
		gpu->cam_y_axis.y = c_t;
    2428:	d0a00017 	ldw	r2,-32768(gp)
    242c:	e0fff917 	ldw	r3,-28(fp)
    2430:	10c00e15 	stw	r3,56(r2)
		gpu->cam_y_axis.z = s_t;
    2434:	d0a00017 	ldw	r2,-32768(gp)
    2438:	e0fff817 	ldw	r3,-32(fp)
    243c:	10c00f15 	stw	r3,60(r2)

		gpu->cam_z_axis.x = s_p;
    2440:	d0a00017 	ldw	r2,-32768(gp)
    2444:	e0fffa17 	ldw	r3,-24(fp)
    2448:	10c01015 	stw	r3,64(r2)
		gpu->cam_z_axis.y = -s_t * c_p / (1 << 8);
    244c:	d4200017 	ldw	r16,-32768(gp)
    2450:	e0bff817 	ldw	r2,-32(fp)
    2454:	0085c83a 	sub	r2,zero,r2
    2458:	e17ffb17 	ldw	r5,-20(fp)
    245c:	1009883a 	mov	r4,r2
    2460:	0005b840 	call	5b84 <__mulsi3>
    2464:	1000010e 	bge	r2,zero,246c <main+0x7f4>
    2468:	10803fc4 	addi	r2,r2,255
    246c:	1005d23a 	srai	r2,r2,8
    2470:	80801115 	stw	r2,68(r16)
		gpu->cam_z_axis.z = c_p * c_t / (1 << 8);
    2474:	d4200017 	ldw	r16,-32768(gp)
    2478:	e17ff917 	ldw	r5,-28(fp)
    247c:	e13ffb17 	ldw	r4,-20(fp)
    2480:	0005b840 	call	5b84 <__mulsi3>
    2484:	1000010e 	bge	r2,zero,248c <main+0x814>
    2488:	10803fc4 	addi	r2,r2,255
    248c:	1005d23a 	srai	r2,r2,8
    2490:	80801215 	stw	r2,72(r16)

		last_fps = 1000.0/(clock() - frame_time);
    2494:	00086140 	call	8614 <clock>
    2498:	1007883a 	mov	r3,r2
    249c:	e0bff517 	ldw	r2,-44(fp)
    24a0:	1885c83a 	sub	r2,r3,r2
    24a4:	1009883a 	mov	r4,r2
    24a8:	00082500 	call	8250 <__floatunsidf>
    24ac:	1009883a 	mov	r4,r2
    24b0:	180b883a 	mov	r5,r3
    24b4:	200d883a 	mov	r6,r4
    24b8:	280f883a 	mov	r7,r5
    24bc:	0009883a 	mov	r4,zero
    24c0:	015023f4 	movhi	r5,16527
    24c4:	29500004 	addi	r5,r5,16384
    24c8:	00064580 	call	6458 <__divdf3>
    24cc:	1009883a 	mov	r4,r2
    24d0:	180b883a 	mov	r5,r3
    24d4:	2005883a 	mov	r2,r4
    24d8:	2807883a 	mov	r3,r5
    24dc:	1009883a 	mov	r4,r2
    24e0:	180b883a 	mov	r5,r3
    24e4:	00084080 	call	8408 <__truncdfsf2>
    24e8:	1007883a 	mov	r3,r2
    24ec:	e0ffec15 	stw	r3,-80(fp)
		//printf("Frame ticks %.2f\n", );
	}
    24f0:	003e1206 	br	1d3c <__alt_exception_stack_pointer+0xf8001d3c>

000024f4 <done>:

	return 1;
}

static void done(void* handle, void* data) {
    24f4:	defffd04 	addi	sp,sp,-12
    24f8:	df000215 	stw	fp,8(sp)
    24fc:	df000204 	addi	fp,sp,8
    2500:	e13ffe15 	stw	r4,-8(fp)
    2504:	e17fff15 	stw	r5,-4(fp)
	copy_done = 255;
    2508:	00803fc4 	movi	r2,255
    250c:	d0a8f215 	stw	r2,-23608(gp)
}
    2510:	0001883a 	nop
    2514:	e037883a 	mov	sp,fp
    2518:	df000017 	ldw	fp,0(sp)
    251c:	dec00104 	addi	sp,sp,4
    2520:	f800283a 	ret

00002524 <transfer>:

char transfer(volatile void* from, volatile void* to, alt_u32 size) {
    2524:	defff504 	addi	sp,sp,-44
    2528:	dfc00a15 	stw	ra,40(sp)
    252c:	df000915 	stw	fp,36(sp)
    2530:	df000904 	addi	fp,sp,36
    2534:	e13ffd15 	stw	r4,-12(fp)
    2538:	e17ffe15 	stw	r5,-8(fp)
    253c:	e1bfff15 	stw	r6,-4(fp)
	copy_done = 0;
    2540:	d028f215 	stw	zero,-23608(gp)
	int rc;
	alt_dma_txchan txchan;
	alt_dma_rxchan rxchan;
	void* tx_data = (void*) from; /* pointer to data to send */
    2544:	e0bffd17 	ldw	r2,-12(fp)
    2548:	e0bff815 	stw	r2,-32(fp)
	void* rx_buffer = (void*) to; /* pointer to rx buffer */
    254c:	e0bffe17 	ldw	r2,-8(fp)
    2550:	e0bff915 	stw	r2,-28(fp)
	/* Create the transmit channel */
	if ((txchan = alt_dma_txchan_open("/dev/copy_dma")) == NULL) {
    2554:	01000074 	movhi	r4,1
    2558:	211ed604 	addi	r4,r4,31576
    255c:	0013bf00 	call	13bf0 <alt_dma_txchan_open>
    2560:	e0bffa15 	stw	r2,-24(fp)
    2564:	e0bffa17 	ldw	r2,-24(fp)
    2568:	1000051e 	bne	r2,zero,2580 <transfer+0x5c>
		printf("Failed to create transmit channel");
    256c:	01000074 	movhi	r4,1
    2570:	211eda04 	addi	r4,r4,31592
    2574:	000909c0 	call	909c <printf>
		return 255;
    2578:	00bfffc4 	movi	r2,-1
    257c:	00002e06 	br	2638 <transfer+0x114>
	}
	/* Create the receive channel */
	if ((rxchan = alt_dma_rxchan_open("/dev/copy_dma")) == NULL) {
    2580:	01000074 	movhi	r4,1
    2584:	211ed604 	addi	r4,r4,31576
    2588:	0013b600 	call	13b60 <alt_dma_rxchan_open>
    258c:	e0bffb15 	stw	r2,-20(fp)
    2590:	e0bffb17 	ldw	r2,-20(fp)
    2594:	1000051e 	bne	r2,zero,25ac <transfer+0x88>
		printf("Failed to create receive channel");
    2598:	01000074 	movhi	r4,1
    259c:	211ee304 	addi	r4,r4,31628
    25a0:	000909c0 	call	909c <printf>
		return 225;
    25a4:	00bff844 	movi	r2,-31
    25a8:	00002306 	br	2638 <transfer+0x114>
	}
	/* Post the transmit request */
	if ((rc = alt_dma_txchan_send(txchan, tx_data, size, NULL, NULL)) < 0) {
    25ac:	d8000015 	stw	zero,0(sp)
    25b0:	000f883a 	mov	r7,zero
    25b4:	e1bfff17 	ldw	r6,-4(fp)
    25b8:	e17ff817 	ldw	r5,-32(fp)
    25bc:	e13ffa17 	ldw	r4,-24(fp)
    25c0:	00017e80 	call	17e8 <alt_dma_txchan_send>
    25c4:	e0bffc15 	stw	r2,-16(fp)
    25c8:	e0bffc17 	ldw	r2,-16(fp)
    25cc:	1000060e 	bge	r2,zero,25e8 <transfer+0xc4>
		printf("Failed to post transmit request, reason = %i\n", rc);
    25d0:	e17ffc17 	ldw	r5,-16(fp)
    25d4:	01000074 	movhi	r4,1
    25d8:	211eec04 	addi	r4,r4,31664
    25dc:	000909c0 	call	909c <printf>
		return 225;
    25e0:	00bff844 	movi	r2,-31
    25e4:	00001406 	br	2638 <transfer+0x114>
	}
	/* Post the receive request */
	if ((rc = alt_dma_rxchan_prepare(rxchan, rx_buffer, size, done, NULL))
    25e8:	d8000015 	stw	zero,0(sp)
    25ec:	01c00034 	movhi	r7,0
    25f0:	39c93d04 	addi	r7,r7,9460
    25f4:	e1bfff17 	ldw	r6,-4(fp)
    25f8:	e17ff917 	ldw	r5,-28(fp)
    25fc:	e13ffb17 	ldw	r4,-20(fp)
    2600:	00018500 	call	1850 <alt_dma_rxchan_prepare>
    2604:	e0bffc15 	stw	r2,-16(fp)
    2608:	e0bffc17 	ldw	r2,-16(fp)
    260c:	1000060e 	bge	r2,zero,2628 <transfer+0x104>
			< 0) {
		printf("Failed to post read request, reason = %i\n", rc);
    2610:	e17ffc17 	ldw	r5,-16(fp)
    2614:	01000074 	movhi	r4,1
    2618:	211ef804 	addi	r4,r4,31712
    261c:	000909c0 	call	909c <printf>
		return 225;
    2620:	00bff844 	movi	r2,-31
    2624:	00000406 	br	2638 <transfer+0x114>
	}
	/* wait for transfer to complete */
	while (!copy_done);
    2628:	0001883a 	nop
    262c:	d0a8f217 	ldw	r2,-23608(gp)
    2630:	103ffe26 	beq	r2,zero,262c <__alt_exception_stack_pointer+0xf800262c>
	return 0;
    2634:	0005883a 	mov	r2,zero
}
    2638:	e037883a 	mov	sp,fp
    263c:	dfc00117 	ldw	ra,4(sp)
    2640:	df000017 	ldw	fp,0(sp)
    2644:	dec00204 	addi	sp,sp,8
    2648:	f800283a 	ret

0000264c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    264c:	defffc04 	addi	sp,sp,-16
    2650:	dfc00315 	stw	ra,12(sp)
    2654:	df000215 	stw	fp,8(sp)
    2658:	df000204 	addi	fp,sp,8
    265c:	2007883a 	mov	r3,r4
    2660:	2805883a 	mov	r2,r5
    2664:	e0fffe0d 	sth	r3,-8(fp)
    2668:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    266c:	e0bffe0b 	ldhu	r2,-8(fp)
    2670:	100b883a 	mov	r5,r2
    2674:	01000084 	movi	r4,2
    2678:	00008680 	call	868 <IO_write>
	IO_write(0, Data);
    267c:	e0bfff0b 	ldhu	r2,-4(fp)
    2680:	100b883a 	mov	r5,r2
    2684:	0009883a 	mov	r4,zero
    2688:	00008680 	call	868 <IO_write>
}
    268c:	0001883a 	nop
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    26a4:	defffd04 	addi	sp,sp,-12
    26a8:	dfc00215 	stw	ra,8(sp)
    26ac:	df000115 	stw	fp,4(sp)
    26b0:	df000104 	addi	fp,sp,4
    26b4:	2005883a 	mov	r2,r4
    26b8:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    26bc:	e0bfff0b 	ldhu	r2,-4(fp)
    26c0:	100b883a 	mov	r5,r2
    26c4:	01000084 	movi	r4,2
    26c8:	00008680 	call	868 <IO_write>
	return IO_read(0);
    26cc:	0009883a 	mov	r4,zero
    26d0:	00008f00 	call	8f0 <IO_read>

}
    26d4:	e037883a 	mov	sp,fp
    26d8:	dfc00117 	ldw	ra,4(sp)
    26dc:	df000017 	ldw	fp,0(sp)
    26e0:	dec00204 	addi	sp,sp,8
    26e4:	f800283a 	ret

000026e8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    26e8:	defffe04 	addi	sp,sp,-8
    26ec:	dfc00115 	stw	ra,4(sp)
    26f0:	df000015 	stw	fp,0(sp)
    26f4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    26f8:	017e9414 	movui	r5,64080
    26fc:	01000044 	movi	r4,1
    2700:	00008680 	call	868 <IO_write>
	usleep(100000);
    2704:	010000b4 	movhi	r4,2
    2708:	2121a804 	addi	r4,r4,-31072
    270c:	00144a00 	call	144a0 <usleep>
	printf("[USB INIT]:reset finished!\n");
    2710:	01000074 	movhi	r4,1
    2714:	211f0304 	addi	r4,r4,31756
    2718:	00091980 	call	9198 <puts>

	usleep(500000);
    271c:	01000234 	movhi	r4,8
    2720:	21284804 	addi	r4,r4,-24288
    2724:	00144a00 	call	144a0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    2728:	01000074 	movhi	r4,1
    272c:	211f0a04 	addi	r4,r4,31784
    2730:	00091980 	call	9198 <puts>
	IO_read(HPI_MAILBOX);
    2734:	01000044 	movi	r4,1
    2738:	00008f00 	call	8f0 <IO_read>
	IO_read(HPI_STATUS);
    273c:	010000c4 	movi	r4,3
    2740:	00008f00 	call	8f0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    2744:	01005104 	movi	r4,324
    2748:	00026a40 	call	26a4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    274c:	000b883a 	mov	r5,zero
    2750:	01005104 	movi	r4,324
    2754:	000264c0 	call	264c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    2758:	01005204 	movi	r4,328
    275c:	00026a40 	call	26a4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    2760:	000b883a 	mov	r5,zero
    2764:	01005204 	movi	r4,328
    2768:	000264c0 	call	264c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    276c:	017fffd4 	movui	r5,65535
    2770:	01302414 	movui	r4,49296
    2774:	000264c0 	call	264c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    2778:	017fffd4 	movui	r5,65535
    277c:	01302c14 	movui	r4,49328
    2780:	000264c0 	call	264c <UsbWrite>
}
    2784:	0001883a 	nop
    2788:	e037883a 	mov	sp,fp
    278c:	dfc00117 	ldw	ra,4(sp)
    2790:	df000017 	ldw	fp,0(sp)
    2794:	dec00204 	addi	sp,sp,8
    2798:	f800283a 	ret

0000279c <UsbSetAddress>:


void UsbSetAddress()
{
    279c:	defffe04 	addi	sp,sp,-8
    27a0:	dfc00115 	stw	ra,4(sp)
    27a4:	df000015 	stw	fp,0(sp)
    27a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    27ac:	01414004 	movi	r5,1280
    27b0:	01000084 	movi	r4,2
    27b4:	00008680 	call	868 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    27b8:	01414304 	movi	r5,1292
    27bc:	0009883a 	mov	r4,zero
    27c0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    27c4:	01400204 	movi	r5,8
    27c8:	0009883a 	mov	r4,zero
    27cc:	00008680 	call	868 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    27d0:	01403404 	movi	r5,208
    27d4:	0009883a 	mov	r4,zero
    27d8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    27dc:	01400044 	movi	r5,1
    27e0:	0009883a 	mov	r4,zero
    27e4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    27e8:	014004c4 	movi	r5,19
    27ec:	0009883a 	mov	r4,zero
    27f0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    27f4:	01414504 	movi	r5,1300
    27f8:	0009883a 	mov	r4,zero
    27fc:	00008680 	call	868 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    2800:	01414004 	movi	r5,1280
    2804:	0009883a 	mov	r4,zero
    2808:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0002);
    280c:	01400084 	movi	r5,2
    2810:	0009883a 	mov	r4,zero
    2814:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2818:	000b883a 	mov	r5,zero
    281c:	0009883a 	mov	r4,zero
    2820:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2824:	000b883a 	mov	r5,zero
    2828:	0009883a 	mov	r4,zero
    282c:	00008680 	call	868 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    2830:	000b883a 	mov	r5,zero
    2834:	0009883a 	mov	r4,zero
    2838:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    283c:	000b883a 	mov	r5,zero
    2840:	0009883a 	mov	r4,zero
    2844:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    2848:	01402404 	movi	r5,144
    284c:	0009883a 	mov	r4,zero
    2850:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2854:	01401044 	movi	r5,65
    2858:	0009883a 	mov	r4,zero
    285c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2860:	014004c4 	movi	r5,19
    2864:	0009883a 	mov	r4,zero
    2868:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    286c:	000b883a 	mov	r5,zero
    2870:	0009883a 	mov	r4,zero
    2874:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2878:	01414004 	movi	r5,1280
    287c:	01006c04 	movi	r4,432
    2880:	000264c0 	call	264c <UsbWrite>
}
    2884:	0001883a 	nop
    2888:	e037883a 	mov	sp,fp
    288c:	dfc00117 	ldw	ra,4(sp)
    2890:	df000017 	ldw	fp,0(sp)
    2894:	dec00204 	addi	sp,sp,8
    2898:	f800283a 	ret

0000289c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    289c:	defffe04 	addi	sp,sp,-8
    28a0:	dfc00115 	stw	ra,4(sp)
    28a4:	df000015 	stw	fp,0(sp)
    28a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    28ac:	01414004 	movi	r5,1280
    28b0:	01000084 	movi	r4,2
    28b4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    28b8:	01414304 	movi	r5,1292
    28bc:	0009883a 	mov	r4,zero
    28c0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    28c4:	01400204 	movi	r5,8
    28c8:	0009883a 	mov	r4,zero
    28cc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    28d0:	0140b404 	movi	r5,720
    28d4:	0009883a 	mov	r4,zero
    28d8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    28dc:	01400044 	movi	r5,1
    28e0:	0009883a 	mov	r4,zero
    28e4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    28e8:	014004c4 	movi	r5,19
    28ec:	0009883a 	mov	r4,zero
    28f0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    28f4:	01414504 	movi	r5,1300
    28f8:	0009883a 	mov	r4,zero
    28fc:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2900:	0141a004 	movi	r5,1664
    2904:	0009883a 	mov	r4,zero
    2908:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    290c:	01404004 	movi	r5,256
    2910:	0009883a 	mov	r4,zero
    2914:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2918:	000b883a 	mov	r5,zero
    291c:	0009883a 	mov	r4,zero
    2920:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);
    2924:	01400204 	movi	r5,8
    2928:	0009883a 	mov	r4,zero
    292c:	00008680 	call	868 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    2930:	01414b04 	movi	r5,1324
    2934:	0009883a 	mov	r4,zero
    2938:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    293c:	01400204 	movi	r5,8
    2940:	0009883a 	mov	r4,zero
    2944:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    2948:	0140a404 	movi	r5,656
    294c:	0009883a 	mov	r4,zero
    2950:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2954:	01401044 	movi	r5,65
    2958:	0009883a 	mov	r4,zero
    295c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2960:	014004c4 	movi	r5,19
    2964:	0009883a 	mov	r4,zero
    2968:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);
    296c:	01414804 	movi	r5,1312
    2970:	0009883a 	mov	r4,zero
    2974:	00008680 	call	868 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    2978:	000b883a 	mov	r5,zero
    297c:	0009883a 	mov	r4,zero
    2980:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2984:	000b883a 	mov	r5,zero
    2988:	0009883a 	mov	r4,zero
    298c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    2990:	01408404 	movi	r5,528
    2994:	0009883a 	mov	r4,zero
    2998:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);
    299c:	01401044 	movi	r5,65
    29a0:	0009883a 	mov	r4,zero
    29a4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    29a8:	014004c4 	movi	r5,19
    29ac:	0009883a 	mov	r4,zero
    29b0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    29b4:	000b883a 	mov	r5,zero
    29b8:	0009883a 	mov	r4,zero
    29bc:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    29c0:	01414004 	movi	r5,1280
    29c4:	01006c04 	movi	r4,432
    29c8:	000264c0 	call	264c <UsbWrite>
}
    29cc:	0001883a 	nop
    29d0:	e037883a 	mov	sp,fp
    29d4:	dfc00117 	ldw	ra,4(sp)
    29d8:	df000017 	ldw	fp,0(sp)
    29dc:	dec00204 	addi	sp,sp,8
    29e0:	f800283a 	ret

000029e4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    29e4:	defffe04 	addi	sp,sp,-8
    29e8:	dfc00115 	stw	ra,4(sp)
    29ec:	df000015 	stw	fp,0(sp)
    29f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    29f4:	01414004 	movi	r5,1280
    29f8:	01000084 	movi	r4,2
    29fc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2a00:	01414304 	movi	r5,1292
    2a04:	0009883a 	mov	r4,zero
    2a08:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2a0c:	01400204 	movi	r5,8
    2a10:	0009883a 	mov	r4,zero
    2a14:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2a18:	0140b404 	movi	r5,720
    2a1c:	0009883a 	mov	r4,zero
    2a20:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2a24:	01400044 	movi	r5,1
    2a28:	0009883a 	mov	r4,zero
    2a2c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2a30:	014004c4 	movi	r5,19
    2a34:	0009883a 	mov	r4,zero
    2a38:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a3c:	01414504 	movi	r5,1300
    2a40:	0009883a 	mov	r4,zero
    2a44:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2a48:	0141a004 	movi	r5,1664
    2a4c:	0009883a 	mov	r4,zero
    2a50:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    2a54:	01404004 	movi	r5,256
    2a58:	0009883a 	mov	r4,zero
    2a5c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2a60:	000b883a 	mov	r5,zero
    2a64:	0009883a 	mov	r4,zero
    2a68:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    2a6c:	01400484 	movi	r5,18
    2a70:	0009883a 	mov	r4,zero
    2a74:	00008680 	call	868 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2a78:	01415104 	movi	r5,1348
    2a7c:	0009883a 	mov	r4,zero
    2a80:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2a84:	01400204 	movi	r5,8
    2a88:	0009883a 	mov	r4,zero
    2a8c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2a90:	0140a404 	movi	r5,656
    2a94:	0009883a 	mov	r4,zero
    2a98:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2a9c:	01401044 	movi	r5,65
    2aa0:	0009883a 	mov	r4,zero
    2aa4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2aa8:	014004c4 	movi	r5,19
    2aac:	0009883a 	mov	r4,zero
    2ab0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2ab4:	01414804 	movi	r5,1312
    2ab8:	0009883a 	mov	r4,zero
    2abc:	00008680 	call	868 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2ac0:	01415304 	movi	r5,1356
    2ac4:	0009883a 	mov	r4,zero
    2ac8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2acc:	01400204 	movi	r5,8
    2ad0:	0009883a 	mov	r4,zero
    2ad4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2ad8:	0140a404 	movi	r5,656
    2adc:	0009883a 	mov	r4,zero
    2ae0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    2ae4:	01400044 	movi	r5,1
    2ae8:	0009883a 	mov	r4,zero
    2aec:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2af0:	014004c4 	movi	r5,19
    2af4:	0009883a 	mov	r4,zero
    2af8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2afc:	01414b04 	movi	r5,1324
    2b00:	0009883a 	mov	r4,zero
    2b04:	00008680 	call	868 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    2b08:	01415504 	movi	r5,1364
    2b0c:	0009883a 	mov	r4,zero
    2b10:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    2b14:	01400084 	movi	r5,2
    2b18:	0009883a 	mov	r4,zero
    2b1c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2b20:	0140a404 	movi	r5,656
    2b24:	0009883a 	mov	r4,zero
    2b28:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2b2c:	01401044 	movi	r5,65
    2b30:	0009883a 	mov	r4,zero
    2b34:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b38:	014004c4 	movi	r5,19
    2b3c:	0009883a 	mov	r4,zero
    2b40:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2b44:	01414e04 	movi	r5,1336
    2b48:	0009883a 	mov	r4,zero
    2b4c:	00008680 	call	868 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    2b50:	000b883a 	mov	r5,zero
    2b54:	0009883a 	mov	r4,zero
    2b58:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2b5c:	000b883a 	mov	r5,zero
    2b60:	0009883a 	mov	r4,zero
    2b64:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    2b68:	01408404 	movi	r5,528
    2b6c:	0009883a 	mov	r4,zero
    2b70:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    2b74:	01401044 	movi	r5,65
    2b78:	0009883a 	mov	r4,zero
    2b7c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2b80:	014004c4 	movi	r5,19
    2b84:	0009883a 	mov	r4,zero
    2b88:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2b8c:	000b883a 	mov	r5,zero
    2b90:	0009883a 	mov	r4,zero
    2b94:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2b98:	01414004 	movi	r5,1280
    2b9c:	01006c04 	movi	r4,432
    2ba0:	000264c0 	call	264c <UsbWrite>
}
    2ba4:	0001883a 	nop
    2ba8:	e037883a 	mov	sp,fp
    2bac:	dfc00117 	ldw	ra,4(sp)
    2bb0:	df000017 	ldw	fp,0(sp)
    2bb4:	dec00204 	addi	sp,sp,8
    2bb8:	f800283a 	ret

00002bbc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2bbc:	defffe04 	addi	sp,sp,-8
    2bc0:	dfc00115 	stw	ra,4(sp)
    2bc4:	df000015 	stw	fp,0(sp)
    2bc8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2bcc:	01414004 	movi	r5,1280
    2bd0:	01000084 	movi	r4,2
    2bd4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2bd8:	01414304 	movi	r5,1292
    2bdc:	0009883a 	mov	r4,zero
    2be0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2be4:	01400204 	movi	r5,8
    2be8:	0009883a 	mov	r4,zero
    2bec:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2bf0:	0140b404 	movi	r5,720
    2bf4:	0009883a 	mov	r4,zero
    2bf8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2bfc:	01400044 	movi	r5,1
    2c00:	0009883a 	mov	r4,zero
    2c04:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2c08:	014004c4 	movi	r5,19
    2c0c:	0009883a 	mov	r4,zero
    2c10:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2c14:	01414504 	movi	r5,1300
    2c18:	0009883a 	mov	r4,zero
    2c1c:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2c20:	0141a004 	movi	r5,1664
    2c24:	0009883a 	mov	r4,zero
    2c28:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2c2c:	01408004 	movi	r5,512
    2c30:	0009883a 	mov	r4,zero
    2c34:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2c38:	000b883a 	mov	r5,zero
    2c3c:	0009883a 	mov	r4,zero
    2c40:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    2c44:	01400244 	movi	r5,9
    2c48:	0009883a 	mov	r4,zero
    2c4c:	00008680 	call	868 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2c50:	01415104 	movi	r5,1348
    2c54:	0009883a 	mov	r4,zero
    2c58:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2c5c:	01400204 	movi	r5,8
    2c60:	0009883a 	mov	r4,zero
    2c64:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2c68:	0140a404 	movi	r5,656
    2c6c:	0009883a 	mov	r4,zero
    2c70:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2c74:	01401044 	movi	r5,65
    2c78:	0009883a 	mov	r4,zero
    2c7c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2c80:	014004c4 	movi	r5,19
    2c84:	0009883a 	mov	r4,zero
    2c88:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2c8c:	01414804 	movi	r5,1312
    2c90:	0009883a 	mov	r4,zero
    2c94:	00008680 	call	868 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2c98:	01415304 	movi	r5,1356
    2c9c:	0009883a 	mov	r4,zero
    2ca0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    2ca4:	01400044 	movi	r5,1
    2ca8:	0009883a 	mov	r4,zero
    2cac:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2cb0:	0140a404 	movi	r5,656
    2cb4:	0009883a 	mov	r4,zero
    2cb8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2cbc:	01400044 	movi	r5,1
    2cc0:	0009883a 	mov	r4,zero
    2cc4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2cc8:	014004c4 	movi	r5,19
    2ccc:	0009883a 	mov	r4,zero
    2cd0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2cd4:	01414b04 	movi	r5,1324
    2cd8:	0009883a 	mov	r4,zero
    2cdc:	00008680 	call	868 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2ce0:	000b883a 	mov	r5,zero
    2ce4:	0009883a 	mov	r4,zero
    2ce8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2cec:	000b883a 	mov	r5,zero
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2cf8:	01408404 	movi	r5,528
    2cfc:	0009883a 	mov	r4,zero
    2d00:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2d04:	01401044 	movi	r5,65
    2d08:	0009883a 	mov	r4,zero
    2d0c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2d10:	014004c4 	movi	r5,19
    2d14:	0009883a 	mov	r4,zero
    2d18:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2d1c:	000b883a 	mov	r5,zero
    2d20:	0009883a 	mov	r4,zero
    2d24:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2d28:	01414004 	movi	r5,1280
    2d2c:	01006c04 	movi	r4,432
    2d30:	000264c0 	call	264c <UsbWrite>
}
    2d34:	0001883a 	nop
    2d38:	e037883a 	mov	sp,fp
    2d3c:	dfc00117 	ldw	ra,4(sp)
    2d40:	df000017 	ldw	fp,0(sp)
    2d44:	dec00204 	addi	sp,sp,8
    2d48:	f800283a 	ret

00002d4c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    2d4c:	defffe04 	addi	sp,sp,-8
    2d50:	dfc00115 	stw	ra,4(sp)
    2d54:	df000015 	stw	fp,0(sp)
    2d58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2d5c:	01414004 	movi	r5,1280
    2d60:	01000084 	movi	r4,2
    2d64:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2d68:	01414304 	movi	r5,1292
    2d6c:	0009883a 	mov	r4,zero
    2d70:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2d74:	01400204 	movi	r5,8
    2d78:	0009883a 	mov	r4,zero
    2d7c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2d80:	0140b404 	movi	r5,720
    2d84:	0009883a 	mov	r4,zero
    2d88:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2d8c:	01400044 	movi	r5,1
    2d90:	0009883a 	mov	r4,zero
    2d94:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2d98:	014004c4 	movi	r5,19
    2d9c:	0009883a 	mov	r4,zero
    2da0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2da4:	01414504 	movi	r5,1300
    2da8:	0009883a 	mov	r4,zero
    2dac:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2db0:	0141a004 	movi	r5,1664
    2db4:	0009883a 	mov	r4,zero
    2db8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2dbc:	01408004 	movi	r5,512
    2dc0:	0009883a 	mov	r4,zero
    2dc4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2dc8:	000b883a 	mov	r5,zero
    2dcc:	0009883a 	mov	r4,zero
    2dd0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2dd4:	01403fc4 	movi	r5,255
    2dd8:	0009883a 	mov	r4,zero
    2ddc:	00008680 	call	868 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2de0:	01415704 	movi	r5,1372
    2de4:	0009883a 	mov	r4,zero
    2de8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2dec:	01400204 	movi	r5,8
    2df0:	0009883a 	mov	r4,zero
    2df4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2df8:	0140a404 	movi	r5,656
    2dfc:	0009883a 	mov	r4,zero
    2e00:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2e04:	01401044 	movi	r5,65
    2e08:	0009883a 	mov	r4,zero
    2e0c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2e10:	014004c4 	movi	r5,19
    2e14:	0009883a 	mov	r4,zero
    2e18:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2e1c:	01414804 	movi	r5,1312
    2e20:	0009883a 	mov	r4,zero
    2e24:	00008680 	call	868 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    2e28:	01415904 	movi	r5,1380
    2e2c:	0009883a 	mov	r4,zero
    2e30:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2e34:	01400204 	movi	r5,8
    2e38:	0009883a 	mov	r4,zero
    2e3c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2e40:	0140a404 	movi	r5,656
    2e44:	0009883a 	mov	r4,zero
    2e48:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2e4c:	01400044 	movi	r5,1
    2e50:	0009883a 	mov	r4,zero
    2e54:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2e58:	014004c4 	movi	r5,19
    2e5c:	0009883a 	mov	r4,zero
    2e60:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2e64:	01414b04 	movi	r5,1324
    2e68:	0009883a 	mov	r4,zero
    2e6c:	00008680 	call	868 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2e70:	01415b04 	movi	r5,1388
    2e74:	0009883a 	mov	r4,zero
    2e78:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2e7c:	01400204 	movi	r5,8
    2e80:	0009883a 	mov	r4,zero
    2e84:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2e88:	0140a404 	movi	r5,656
    2e8c:	0009883a 	mov	r4,zero
    2e90:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2e94:	01401044 	movi	r5,65
    2e98:	0009883a 	mov	r4,zero
    2e9c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2ea0:	014004c4 	movi	r5,19
    2ea4:	0009883a 	mov	r4,zero
    2ea8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2eac:	01414e04 	movi	r5,1336
    2eb0:	0009883a 	mov	r4,zero
    2eb4:	00008680 	call	868 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2eb8:	01415d04 	movi	r5,1396
    2ebc:	0009883a 	mov	r4,zero
    2ec0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2ec4:	01400204 	movi	r5,8
    2ec8:	0009883a 	mov	r4,zero
    2ecc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2ed0:	0140a404 	movi	r5,656
    2ed4:	0009883a 	mov	r4,zero
    2ed8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2edc:	01400044 	movi	r5,1
    2ee0:	0009883a 	mov	r4,zero
    2ee4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2ee8:	014004c4 	movi	r5,19
    2eec:	0009883a 	mov	r4,zero
    2ef0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2ef4:	01415104 	movi	r5,1348
    2ef8:	0009883a 	mov	r4,zero
    2efc:	00008680 	call	868 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2f00:	01415f04 	movi	r5,1404
    2f04:	0009883a 	mov	r4,zero
    2f08:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2f0c:	01400084 	movi	r5,2
    2f10:	0009883a 	mov	r4,zero
    2f14:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2f18:	0140a404 	movi	r5,656
    2f1c:	0009883a 	mov	r4,zero
    2f20:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2f24:	01401044 	movi	r5,65
    2f28:	0009883a 	mov	r4,zero
    2f2c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2f30:	014004c4 	movi	r5,19
    2f34:	0009883a 	mov	r4,zero
    2f38:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2f3c:	01415404 	movi	r5,1360
    2f40:	0009883a 	mov	r4,zero
    2f44:	00008680 	call	868 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    2f48:	000b883a 	mov	r5,zero
    2f4c:	0009883a 	mov	r4,zero
    2f50:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2f54:	000b883a 	mov	r5,zero
    2f58:	0009883a 	mov	r4,zero
    2f5c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2f60:	01408404 	movi	r5,528
    2f64:	0009883a 	mov	r4,zero
    2f68:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2f6c:	01401044 	movi	r5,65
    2f70:	0009883a 	mov	r4,zero
    2f74:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2f78:	014004c4 	movi	r5,19
    2f7c:	0009883a 	mov	r4,zero
    2f80:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2f84:	000b883a 	mov	r5,zero
    2f88:	0009883a 	mov	r4,zero
    2f8c:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2f90:	01414004 	movi	r5,1280
    2f94:	01006c04 	movi	r4,432
    2f98:	000264c0 	call	264c <UsbWrite>
}
    2f9c:	0001883a 	nop
    2fa0:	e037883a 	mov	sp,fp
    2fa4:	dfc00117 	ldw	ra,4(sp)
    2fa8:	df000017 	ldw	fp,0(sp)
    2fac:	dec00204 	addi	sp,sp,8
    2fb0:	f800283a 	ret

00002fb4 <UsbSetConfig>:

void UsbSetConfig()
{
    2fb4:	defffe04 	addi	sp,sp,-8
    2fb8:	dfc00115 	stw	ra,4(sp)
    2fbc:	df000015 	stw	fp,0(sp)
    2fc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2fc4:	01414004 	movi	r5,1280
    2fc8:	01000084 	movi	r4,2
    2fcc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2fd0:	01414304 	movi	r5,1292
    2fd4:	0009883a 	mov	r4,zero
    2fd8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2fdc:	01400204 	movi	r5,8
    2fe0:	0009883a 	mov	r4,zero
    2fe4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2fe8:	0140b404 	movi	r5,720
    2fec:	0009883a 	mov	r4,zero
    2ff0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2ff4:	01400044 	movi	r5,1
    2ff8:	0009883a 	mov	r4,zero
    2ffc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3000:	014004c4 	movi	r5,19
    3004:	0009883a 	mov	r4,zero
    3008:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    300c:	01414504 	movi	r5,1300
    3010:	0009883a 	mov	r4,zero
    3014:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    3018:	01424004 	movi	r5,2304
    301c:	0009883a 	mov	r4,zero
    3020:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    3024:	01400044 	movi	r5,1
    3028:	0009883a 	mov	r4,zero
    302c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3030:	000b883a 	mov	r5,zero
    3034:	0009883a 	mov	r4,zero
    3038:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    303c:	000b883a 	mov	r5,zero
    3040:	0009883a 	mov	r4,zero
    3044:	00008680 	call	868 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    3048:	000b883a 	mov	r5,zero
    304c:	0009883a 	mov	r4,zero
    3050:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    3054:	000b883a 	mov	r5,zero
    3058:	0009883a 	mov	r4,zero
    305c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    3060:	0140a404 	movi	r5,656
    3064:	0009883a 	mov	r4,zero
    3068:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    306c:	01401044 	movi	r5,65
    3070:	0009883a 	mov	r4,zero
    3074:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3078:	014004c4 	movi	r5,19
    307c:	0009883a 	mov	r4,zero
    3080:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3084:	000b883a 	mov	r5,zero
    3088:	0009883a 	mov	r4,zero
    308c:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3090:	01414004 	movi	r5,1280
    3094:	01006c04 	movi	r4,432
    3098:	000264c0 	call	264c <UsbWrite>

}
    309c:	0001883a 	nop
    30a0:	e037883a 	mov	sp,fp
    30a4:	dfc00117 	ldw	ra,4(sp)
    30a8:	df000017 	ldw	fp,0(sp)
    30ac:	dec00204 	addi	sp,sp,8
    30b0:	f800283a 	ret

000030b4 <UsbClassRequest>:

void UsbClassRequest()
{
    30b4:	defffe04 	addi	sp,sp,-8
    30b8:	dfc00115 	stw	ra,4(sp)
    30bc:	df000015 	stw	fp,0(sp)
    30c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    30c4:	01414004 	movi	r5,1280
    30c8:	01000084 	movi	r4,2
    30cc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    30d0:	01414304 	movi	r5,1292
    30d4:	0009883a 	mov	r4,zero
    30d8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    30dc:	01400204 	movi	r5,8
    30e0:	0009883a 	mov	r4,zero
    30e4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    30e8:	0140b404 	movi	r5,720
    30ec:	0009883a 	mov	r4,zero
    30f0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    30f4:	01400044 	movi	r5,1
    30f8:	0009883a 	mov	r4,zero
    30fc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3100:	014004c4 	movi	r5,19
    3104:	0009883a 	mov	r4,zero
    3108:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    310c:	01414504 	movi	r5,1300
    3110:	0009883a 	mov	r4,zero
    3114:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    3118:	01428844 	movi	r5,2593
    311c:	0009883a 	mov	r4,zero
    3120:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    3124:	000b883a 	mov	r5,zero
    3128:	0009883a 	mov	r4,zero
    312c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3130:	000b883a 	mov	r5,zero
    3134:	0009883a 	mov	r4,zero
    3138:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    313c:	000b883a 	mov	r5,zero
    3140:	0009883a 	mov	r4,zero
    3144:	00008680 	call	868 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    3148:	000b883a 	mov	r5,zero
    314c:	0009883a 	mov	r4,zero
    3150:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    3154:	000b883a 	mov	r5,zero
    3158:	0009883a 	mov	r4,zero
    315c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    3160:	0140a404 	movi	r5,656
    3164:	0009883a 	mov	r4,zero
    3168:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    316c:	01401044 	movi	r5,65
    3170:	0009883a 	mov	r4,zero
    3174:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3178:	014004c4 	movi	r5,19
    317c:	0009883a 	mov	r4,zero
    3180:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3184:	000b883a 	mov	r5,zero
    3188:	0009883a 	mov	r4,zero
    318c:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3190:	01414004 	movi	r5,1280
    3194:	01006c04 	movi	r4,432
    3198:	000264c0 	call	264c <UsbWrite>
}
    319c:	0001883a 	nop
    31a0:	e037883a 	mov	sp,fp
    31a4:	dfc00117 	ldw	ra,4(sp)
    31a8:	df000017 	ldw	fp,0(sp)
    31ac:	dec00204 	addi	sp,sp,8
    31b0:	f800283a 	ret

000031b4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    31b4:	defffe04 	addi	sp,sp,-8
    31b8:	dfc00115 	stw	ra,4(sp)
    31bc:	df000015 	stw	fp,0(sp)
    31c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    31c4:	01414004 	movi	r5,1280
    31c8:	01000084 	movi	r4,2
    31cc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    31d0:	01414304 	movi	r5,1292
    31d4:	0009883a 	mov	r4,zero
    31d8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    31dc:	01400204 	movi	r5,8
    31e0:	0009883a 	mov	r4,zero
    31e4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    31e8:	0140b404 	movi	r5,720
    31ec:	0009883a 	mov	r4,zero
    31f0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    31f4:	01400044 	movi	r5,1
    31f8:	0009883a 	mov	r4,zero
    31fc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3200:	014004c4 	movi	r5,19
    3204:	0009883a 	mov	r4,zero
    3208:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    320c:	01414504 	movi	r5,1300
    3210:	0009883a 	mov	r4,zero
    3214:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    3218:	0141a044 	movi	r5,1665
    321c:	0009883a 	mov	r4,zero
    3220:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    3224:	01484004 	movi	r5,8448
    3228:	0009883a 	mov	r4,zero
    322c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    3230:	000b883a 	mov	r5,zero
    3234:	0009883a 	mov	r4,zero
    3238:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    323c:	01401ec4 	movi	r5,123
    3240:	0009883a 	mov	r4,zero
    3244:	00008680 	call	868 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    3248:	01415104 	movi	r5,1348
    324c:	0009883a 	mov	r4,zero
    3250:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3254:	01400204 	movi	r5,8
    3258:	0009883a 	mov	r4,zero
    325c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3260:	0140a404 	movi	r5,656
    3264:	0009883a 	mov	r4,zero
    3268:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    326c:	01401044 	movi	r5,65
    3270:	0009883a 	mov	r4,zero
    3274:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3278:	014004c4 	movi	r5,19
    327c:	0009883a 	mov	r4,zero
    3280:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3284:	01414804 	movi	r5,1312
    3288:	0009883a 	mov	r4,zero
    328c:	00008680 	call	868 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    3290:	000b883a 	mov	r5,zero
    3294:	0009883a 	mov	r4,zero
    3298:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    329c:	000b883a 	mov	r5,zero
    32a0:	0009883a 	mov	r4,zero
    32a4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    32a8:	01408404 	movi	r5,528
    32ac:	0009883a 	mov	r4,zero
    32b0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    32b4:	01401044 	movi	r5,65
    32b8:	0009883a 	mov	r4,zero
    32bc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    32c0:	014004c4 	movi	r5,19
    32c4:	0009883a 	mov	r4,zero
    32c8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    32cc:	000b883a 	mov	r5,zero
    32d0:	0009883a 	mov	r4,zero
    32d4:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    32d8:	01414004 	movi	r5,1280
    32dc:	01006c04 	movi	r4,432
    32e0:	000264c0 	call	264c <UsbWrite>

}
    32e4:	0001883a 	nop
    32e8:	e037883a 	mov	sp,fp
    32ec:	dfc00117 	ldw	ra,4(sp)
    32f0:	df000017 	ldw	fp,0(sp)
    32f4:	dec00204 	addi	sp,sp,8
    32f8:	f800283a 	ret

000032fc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    32fc:	defffe04 	addi	sp,sp,-8
    3300:	dfc00115 	stw	ra,4(sp)
    3304:	df000015 	stw	fp,0(sp)
    3308:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    330c:	01414004 	movi	r5,1280
    3310:	01000084 	movi	r4,2
    3314:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3318:	01414304 	movi	r5,1292
    331c:	0009883a 	mov	r4,zero
    3320:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3324:	01400204 	movi	r5,8
    3328:	0009883a 	mov	r4,zero
    332c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    3330:	0140b404 	movi	r5,720
    3334:	0009883a 	mov	r4,zero
    3338:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);
    333c:	01400044 	movi	r5,1
    3340:	0009883a 	mov	r4,zero
    3344:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3348:	014004c4 	movi	r5,19
    334c:	0009883a 	mov	r4,zero
    3350:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3354:	01414504 	movi	r5,1300
    3358:	0009883a 	mov	r4,zero
    335c:	00008680 	call	868 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    3360:	0141a044 	movi	r5,1665
    3364:	0009883a 	mov	r4,zero
    3368:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    336c:	01488004 	movi	r5,8704
    3370:	0009883a 	mov	r4,zero
    3374:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    3378:	000b883a 	mov	r5,zero
    337c:	0009883a 	mov	r4,zero
    3380:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    3384:	01401ec4 	movi	r5,123
    3388:	0009883a 	mov	r4,zero
    338c:	00008680 	call	868 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    3390:	01416004 	movi	r5,1408
    3394:	0009883a 	mov	r4,zero
    3398:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    339c:	01400204 	movi	r5,8
    33a0:	0009883a 	mov	r4,zero
    33a4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    33a8:	0140a404 	movi	r5,656
    33ac:	0009883a 	mov	r4,zero
    33b0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    33b4:	01401044 	movi	r5,65
    33b8:	0009883a 	mov	r4,zero
    33bc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    33c0:	014004c4 	movi	r5,19
    33c4:	0009883a 	mov	r4,zero
    33c8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    33cc:	01414804 	movi	r5,1312
    33d0:	0009883a 	mov	r4,zero
    33d4:	00008680 	call	868 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    33d8:	01416204 	movi	r5,1416
    33dc:	0009883a 	mov	r4,zero
    33e0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    33e4:	01400204 	movi	r5,8
    33e8:	0009883a 	mov	r4,zero
    33ec:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    33f0:	0140a404 	movi	r5,656
    33f4:	0009883a 	mov	r4,zero
    33f8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    33fc:	01400044 	movi	r5,1
    3400:	0009883a 	mov	r4,zero
    3404:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3408:	014004c4 	movi	r5,19
    340c:	0009883a 	mov	r4,zero
    3410:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3414:	01414b04 	movi	r5,1324
    3418:	0009883a 	mov	r4,zero
    341c:	00008680 	call	868 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    3420:	01416404 	movi	r5,1424
    3424:	0009883a 	mov	r4,zero
    3428:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    342c:	01400204 	movi	r5,8
    3430:	0009883a 	mov	r4,zero
    3434:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    3438:	0140a404 	movi	r5,656
    343c:	0009883a 	mov	r4,zero
    3440:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    3444:	01401044 	movi	r5,65
    3448:	0009883a 	mov	r4,zero
    344c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    3450:	014004c4 	movi	r5,19
    3454:	0009883a 	mov	r4,zero
    3458:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    345c:	01414e04 	movi	r5,1336
    3460:	0009883a 	mov	r4,zero
    3464:	00008680 	call	868 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    3468:	01416604 	movi	r5,1432
    346c:	0009883a 	mov	r4,zero
    3470:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    3474:	01400204 	movi	r5,8
    3478:	0009883a 	mov	r4,zero
    347c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    3480:	0140a404 	movi	r5,656
    3484:	0009883a 	mov	r4,zero
    3488:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    348c:	01400044 	movi	r5,1
    3490:	0009883a 	mov	r4,zero
    3494:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    3498:	014004c4 	movi	r5,19
    349c:	0009883a 	mov	r4,zero
    34a0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    34a4:	01415104 	movi	r5,1348
    34a8:	0009883a 	mov	r4,zero
    34ac:	00008680 	call	868 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    34b0:	01416804 	movi	r5,1440
    34b4:	0009883a 	mov	r4,zero
    34b8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    34bc:	01400204 	movi	r5,8
    34c0:	0009883a 	mov	r4,zero
    34c4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    34c8:	0140a404 	movi	r5,656
    34cc:	0009883a 	mov	r4,zero
    34d0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    34d4:	01401044 	movi	r5,65
    34d8:	0009883a 	mov	r4,zero
    34dc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    34e0:	014004c4 	movi	r5,19
    34e4:	0009883a 	mov	r4,zero
    34e8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    34ec:	01415404 	movi	r5,1360
    34f0:	0009883a 	mov	r4,zero
    34f4:	00008680 	call	868 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    34f8:	01416a04 	movi	r5,1448
    34fc:	0009883a 	mov	r4,zero
    3500:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3504:	01400204 	movi	r5,8
    3508:	0009883a 	mov	r4,zero
    350c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3510:	0140a404 	movi	r5,656
    3514:	0009883a 	mov	r4,zero
    3518:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    351c:	01400044 	movi	r5,1
    3520:	0009883a 	mov	r4,zero
    3524:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3528:	014004c4 	movi	r5,19
    352c:	0009883a 	mov	r4,zero
    3530:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    3534:	01415704 	movi	r5,1372
    3538:	0009883a 	mov	r4,zero
    353c:	00008680 	call	868 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    3540:	01416c04 	movi	r5,1456
    3544:	0009883a 	mov	r4,zero
    3548:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    354c:	01400204 	movi	r5,8
    3550:	0009883a 	mov	r4,zero
    3554:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    3558:	0140a404 	movi	r5,656
    355c:	0009883a 	mov	r4,zero
    3560:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    3564:	01401044 	movi	r5,65
    3568:	0009883a 	mov	r4,zero
    356c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    3570:	014004c4 	movi	r5,19
    3574:	0009883a 	mov	r4,zero
    3578:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    357c:	01415a04 	movi	r5,1384
    3580:	0009883a 	mov	r4,zero
    3584:	00008680 	call	868 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    3588:	01416e04 	movi	r5,1464
    358c:	0009883a 	mov	r4,zero
    3590:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    3594:	014000c4 	movi	r5,3
    3598:	0009883a 	mov	r4,zero
    359c:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    35a0:	0140a404 	movi	r5,656
    35a4:	0009883a 	mov	r4,zero
    35a8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    35ac:	01400044 	movi	r5,1
    35b0:	0009883a 	mov	r4,zero
    35b4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    35b8:	014004c4 	movi	r5,19
    35bc:	0009883a 	mov	r4,zero
    35c0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    35c4:	01415d04 	movi	r5,1396
    35c8:	0009883a 	mov	r4,zero
    35cc:	00008680 	call	868 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    35d0:	000b883a 	mov	r5,zero
    35d4:	0009883a 	mov	r4,zero
    35d8:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    35dc:	000b883a 	mov	r5,zero
    35e0:	0009883a 	mov	r4,zero
    35e4:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    35e8:	01408404 	movi	r5,528
    35ec:	0009883a 	mov	r4,zero
    35f0:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    35f4:	01401044 	movi	r5,65
    35f8:	0009883a 	mov	r4,zero
    35fc:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3600:	014004c4 	movi	r5,19
    3604:	0009883a 	mov	r4,zero
    3608:	00008680 	call	868 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    360c:	000b883a 	mov	r5,zero
    3610:	0009883a 	mov	r4,zero
    3614:	00008680 	call	868 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3618:	01414004 	movi	r5,1280
    361c:	01006c04 	movi	r4,432
    3620:	000264c0 	call	264c <UsbWrite>

}
    3624:	0001883a 	nop
    3628:	e037883a 	mov	sp,fp
    362c:	dfc00117 	ldw	ra,4(sp)
    3630:	df000017 	ldw	fp,0(sp)
    3634:	dec00204 	addi	sp,sp,8
    3638:	f800283a 	ret

0000363c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    363c:	defffd04 	addi	sp,sp,-12
    3640:	dfc00215 	stw	ra,8(sp)
    3644:	df000115 	stw	fp,4(sp)
    3648:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    364c:	01005104 	movi	r4,324
    3650:	00026a40 	call	26a4 <UsbRead>
    3654:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3658:	000b883a 	mov	r5,zero
    365c:	01005104 	movi	r4,324
    3660:	000264c0 	call	264c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    3664:	00000d06 	br	369c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    3668:	e0bfff0b 	ldhu	r2,-4(fp)
    366c:	10000526 	beq	r2,zero,3684 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    3670:	e0bfff0b 	ldhu	r2,-4(fp)
    3674:	100b883a 	mov	r5,r2
    3678:	01000074 	movhi	r4,1
    367c:	211f1304 	addi	r4,r4,31820
    3680:	000909c0 	call	909c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3684:	01005104 	movi	r4,324
    3688:	00026a40 	call	26a4 <UsbRead>
    368c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3690:	000b883a 	mov	r5,zero
    3694:	01005104 	movi	r4,324
    3698:	000264c0 	call	264c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    369c:	e0bfff0b 	ldhu	r2,-4(fp)
    36a0:	10840018 	cmpnei	r2,r2,4096
    36a4:	103ff01e 	bne	r2,zero,3668 <__alt_exception_stack_pointer+0xf8003668>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    36a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
    36ac:	e037883a 	mov	sp,fp
    36b0:	dfc00117 	ldw	ra,4(sp)
    36b4:	df000017 	ldw	fp,0(sp)
    36b8:	dec00204 	addi	sp,sp,8
    36bc:	f800283a 	ret

000036c0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    36c0:	defffd04 	addi	sp,sp,-12
    36c4:	dfc00215 	stw	ra,8(sp)
    36c8:	df000115 	stw	fp,4(sp)
    36cc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    36d0:	010000c4 	movi	r4,3
    36d4:	00008f00 	call	8f0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    36d8:	01005104 	movi	r4,324
    36dc:	00026a40 	call	26a4 <UsbRead>
    36e0:	10bfffcc 	andi	r2,r2,65535
    36e4:	10840018 	cmpnei	r2,r2,4096
    36e8:	1000091e 	bne	r2,zero,3710 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    36ec:	000b883a 	mov	r5,zero
    36f0:	01005104 	movi	r4,324
    36f4:	000264c0 	call	264c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    36f8:	0001883a 	nop
    36fc:	010000c4 	movi	r4,3
    3700:	00008f00 	call	8f0 <IO_read>
    3704:	10bfffcc 	andi	r2,r2,65535
    3708:	1080040c 	andi	r2,r2,16
    370c:	103ffb26 	beq	r2,zero,36fc <__alt_exception_stack_pointer+0xf80036fc>
		{
		}
	}
	usleep(1000);
    3710:	0100fa04 	movi	r4,1000
    3714:	00144a00 	call	144a0 <usleep>
	IO_write(HPI_ADDR,0x0508);
    3718:	01414204 	movi	r5,1288
    371c:	01000084 	movi	r4,2
    3720:	00008680 	call	868 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    3724:	0009883a 	mov	r4,zero
    3728:	00008f00 	call	8f0 <IO_read>
    372c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    3730:	e0bfff0b 	ldhu	r2,-4(fp)
}
    3734:	e037883a 	mov	sp,fp
    3738:	dfc00117 	ldw	ra,4(sp)
    373c:	df000017 	ldw	fp,0(sp)
    3740:	dec00204 	addi	sp,sp,8
    3744:	f800283a 	ret

00003748 <UsbPrintMem>:


void UsbPrintMem()
{
    3748:	defffc04 	addi	sp,sp,-16
    374c:	dfc00315 	stw	ra,12(sp)
    3750:	df000215 	stw	fp,8(sp)
    3754:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    3758:	01414004 	movi	r5,1280
    375c:	01000084 	movi	r4,2
    3760:	00008680 	call	868 <IO_write>
	for (i = 0; i <= 200; i += 2)
    3764:	e03ffe15 	stw	zero,-8(fp)
    3768:	00000e06 	br	37a4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    376c:	0009883a 	mov	r4,zero
    3770:	00008f00 	call	8f0 <IO_read>
    3774:	10bfffcc 	andi	r2,r2,65535
    3778:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    377c:	e0bffe17 	ldw	r2,-8(fp)
    3780:	10814004 	addi	r2,r2,1280
    3784:	e1bfff17 	ldw	r6,-4(fp)
    3788:	100b883a 	mov	r5,r2
    378c:	01000074 	movhi	r4,1
    3790:	211f1b04 	addi	r4,r4,31852
    3794:	000909c0 	call	909c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    3798:	e0bffe17 	ldw	r2,-8(fp)
    379c:	10800084 	addi	r2,r2,2
    37a0:	e0bffe15 	stw	r2,-8(fp)
    37a4:	e0bffe17 	ldw	r2,-8(fp)
    37a8:	10803250 	cmplti	r2,r2,201
    37ac:	103fef1e 	bne	r2,zero,376c <__alt_exception_stack_pointer+0xf800376c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    37b0:	0001883a 	nop
    37b4:	e037883a 	mov	sp,fp
    37b8:	dfc00117 	ldw	ra,4(sp)
    37bc:	df000017 	ldw	fp,0(sp)
    37c0:	dec00204 	addi	sp,sp,8
    37c4:	f800283a 	ret

000037c8 <cos>:
    37c8:	00a00034 	movhi	r2,32768
    37cc:	defffa04 	addi	sp,sp,-24
    37d0:	10bfffc4 	addi	r2,r2,-1
    37d4:	00cffa74 	movhi	r3,16361
    37d8:	dfc00515 	stw	ra,20(sp)
    37dc:	2884703a 	and	r2,r5,r2
    37e0:	18c87ec4 	addi	r3,r3,8699
    37e4:	1880180e 	bge	r3,r2,3848 <cos+0x80>
    37e8:	00dffc34 	movhi	r3,32752
    37ec:	18ffffc4 	addi	r3,r3,-1
    37f0:	1880060e 	bge	r3,r2,380c <cos+0x44>
    37f4:	280f883a 	mov	r7,r5
    37f8:	200d883a 	mov	r6,r4
    37fc:	00077f80 	call	77f8 <__subdf3>
    3800:	dfc00517 	ldw	ra,20(sp)
    3804:	dec00604 	addi	sp,sp,24
    3808:	f800283a 	ret
    380c:	d9800104 	addi	r6,sp,4
    3810:	00039a40 	call	39a4 <__ieee754_rem_pio2>
    3814:	108000cc 	andi	r2,r2,3
    3818:	00c00044 	movi	r3,1
    381c:	10c01726 	beq	r2,r3,387c <cos+0xb4>
    3820:	01000084 	movi	r4,2
    3824:	11000e26 	beq	r2,r4,3860 <cos+0x98>
    3828:	10001c26 	beq	r2,zero,389c <cos+0xd4>
    382c:	d9800317 	ldw	r6,12(sp)
    3830:	d9c00417 	ldw	r7,16(sp)
    3834:	d9000117 	ldw	r4,4(sp)
    3838:	d9400217 	ldw	r5,8(sp)
    383c:	d8c00015 	stw	r3,0(sp)
    3840:	000534c0 	call	534c <__kernel_sin>
    3844:	003fee06 	br	3800 <__alt_exception_stack_pointer+0xf8003800>
    3848:	000d883a 	mov	r6,zero
    384c:	000f883a 	mov	r7,zero
    3850:	00041100 	call	4110 <__kernel_cos>
    3854:	dfc00517 	ldw	ra,20(sp)
    3858:	dec00604 	addi	sp,sp,24
    385c:	f800283a 	ret
    3860:	d9800317 	ldw	r6,12(sp)
    3864:	d9c00417 	ldw	r7,16(sp)
    3868:	d9000117 	ldw	r4,4(sp)
    386c:	d9400217 	ldw	r5,8(sp)
    3870:	00041100 	call	4110 <__kernel_cos>
    3874:	18e0003c 	xorhi	r3,r3,32768
    3878:	003fe106 	br	3800 <__alt_exception_stack_pointer+0xf8003800>
    387c:	d9800317 	ldw	r6,12(sp)
    3880:	d9c00417 	ldw	r7,16(sp)
    3884:	d9000117 	ldw	r4,4(sp)
    3888:	d9400217 	ldw	r5,8(sp)
    388c:	d8800015 	stw	r2,0(sp)
    3890:	000534c0 	call	534c <__kernel_sin>
    3894:	18e0003c 	xorhi	r3,r3,32768
    3898:	003fd906 	br	3800 <__alt_exception_stack_pointer+0xf8003800>
    389c:	d9800317 	ldw	r6,12(sp)
    38a0:	d9c00417 	ldw	r7,16(sp)
    38a4:	d9000117 	ldw	r4,4(sp)
    38a8:	d9400217 	ldw	r5,8(sp)
    38ac:	00041100 	call	4110 <__kernel_cos>
    38b0:	003fd306 	br	3800 <__alt_exception_stack_pointer+0xf8003800>

000038b4 <sin>:
    38b4:	00a00034 	movhi	r2,32768
    38b8:	defffa04 	addi	sp,sp,-24
    38bc:	10bfffc4 	addi	r2,r2,-1
    38c0:	00cffa74 	movhi	r3,16361
    38c4:	dfc00515 	stw	ra,20(sp)
    38c8:	2884703a 	and	r2,r5,r2
    38cc:	18c87ec4 	addi	r3,r3,8699
    38d0:	1880180e 	bge	r3,r2,3934 <sin+0x80>
    38d4:	00dffc34 	movhi	r3,32752
    38d8:	18ffffc4 	addi	r3,r3,-1
    38dc:	1880060e 	bge	r3,r2,38f8 <sin+0x44>
    38e0:	280f883a 	mov	r7,r5
    38e4:	200d883a 	mov	r6,r4
    38e8:	00077f80 	call	77f8 <__subdf3>
    38ec:	dfc00517 	ldw	ra,20(sp)
    38f0:	dec00604 	addi	sp,sp,24
    38f4:	f800283a 	ret
    38f8:	d9800104 	addi	r6,sp,4
    38fc:	00039a40 	call	39a4 <__ieee754_rem_pio2>
    3900:	108000cc 	andi	r2,r2,3
    3904:	00c00044 	movi	r3,1
    3908:	10c01926 	beq	r2,r3,3970 <sin+0xbc>
    390c:	01000084 	movi	r4,2
    3910:	11000f26 	beq	r2,r4,3950 <sin+0x9c>
    3914:	10001c26 	beq	r2,zero,3988 <sin+0xd4>
    3918:	d9800317 	ldw	r6,12(sp)
    391c:	d9c00417 	ldw	r7,16(sp)
    3920:	d9000117 	ldw	r4,4(sp)
    3924:	d9400217 	ldw	r5,8(sp)
    3928:	00041100 	call	4110 <__kernel_cos>
    392c:	18e0003c 	xorhi	r3,r3,32768
    3930:	003fee06 	br	38ec <__alt_exception_stack_pointer+0xf80038ec>
    3934:	d8000015 	stw	zero,0(sp)
    3938:	000d883a 	mov	r6,zero
    393c:	000f883a 	mov	r7,zero
    3940:	000534c0 	call	534c <__kernel_sin>
    3944:	dfc00517 	ldw	ra,20(sp)
    3948:	dec00604 	addi	sp,sp,24
    394c:	f800283a 	ret
    3950:	d9800317 	ldw	r6,12(sp)
    3954:	d9c00417 	ldw	r7,16(sp)
    3958:	d9000117 	ldw	r4,4(sp)
    395c:	d9400217 	ldw	r5,8(sp)
    3960:	d8c00015 	stw	r3,0(sp)
    3964:	000534c0 	call	534c <__kernel_sin>
    3968:	18e0003c 	xorhi	r3,r3,32768
    396c:	003fdf06 	br	38ec <__alt_exception_stack_pointer+0xf80038ec>
    3970:	d9800317 	ldw	r6,12(sp)
    3974:	d9c00417 	ldw	r7,16(sp)
    3978:	d9000117 	ldw	r4,4(sp)
    397c:	d9400217 	ldw	r5,8(sp)
    3980:	00041100 	call	4110 <__kernel_cos>
    3984:	003fd906 	br	38ec <__alt_exception_stack_pointer+0xf80038ec>
    3988:	d9800317 	ldw	r6,12(sp)
    398c:	d9c00417 	ldw	r7,16(sp)
    3990:	d9000117 	ldw	r4,4(sp)
    3994:	d9400217 	ldw	r5,8(sp)
    3998:	d8c00015 	stw	r3,0(sp)
    399c:	000534c0 	call	534c <__kernel_sin>
    39a0:	003fd206 	br	38ec <__alt_exception_stack_pointer+0xf80038ec>

000039a4 <__ieee754_rem_pio2>:
    39a4:	02200034 	movhi	r8,32768
    39a8:	deffea04 	addi	sp,sp,-88
    39ac:	423fffc4 	addi	r8,r8,-1
    39b0:	00cffa74 	movhi	r3,16361
    39b4:	ddc01315 	stw	r23,76(sp)
    39b8:	dc400d15 	stw	r17,52(sp)
    39bc:	dfc01515 	stw	ra,84(sp)
    39c0:	df001415 	stw	fp,80(sp)
    39c4:	dd801215 	stw	r22,72(sp)
    39c8:	dd401115 	stw	r21,68(sp)
    39cc:	dd001015 	stw	r20,64(sp)
    39d0:	dcc00f15 	stw	r19,60(sp)
    39d4:	dc800e15 	stw	r18,56(sp)
    39d8:	dc000c15 	stw	r16,48(sp)
    39dc:	2a2e703a 	and	r23,r5,r8
    39e0:	18c87ec4 	addi	r3,r3,8699
    39e4:	2823883a 	mov	r17,r5
    39e8:	1dc0790e 	bge	r3,r23,3bd0 <__ieee754_rem_pio2+0x22c>
    39ec:	009000f4 	movhi	r2,16387
    39f0:	10b65ec4 	addi	r2,r2,-9861
    39f4:	3021883a 	mov	r16,r6
    39f8:	2027883a 	mov	r19,r4
    39fc:	15c02316 	blt	r2,r23,3a8c <__ieee754_rem_pio2+0xe8>
    3a00:	01cffe74 	movhi	r7,16377
    3a04:	39c87ec4 	addi	r7,r7,8699
    3a08:	01951034 	movhi	r6,21568
    3a0c:	01417a0e 	bge	zero,r5,3ff8 <__ieee754_rem_pio2+0x654>
    3a10:	00077f80 	call	77f8 <__subdf3>
    3a14:	1025883a 	mov	r18,r2
    3a18:	008ffe74 	movhi	r2,16377
    3a1c:	10887ec4 	addi	r2,r2,8699
    3a20:	1823883a 	mov	r17,r3
    3a24:	b8808426 	beq	r23,r2,3c38 <__ieee754_rem_pio2+0x294>
    3a28:	018698b4 	movhi	r6,6754
    3a2c:	01cf7474 	movhi	r7,15825
    3a30:	3198cc44 	addi	r6,r6,25393
    3a34:	39ed1844 	addi	r7,r7,-19359
    3a38:	9009883a 	mov	r4,r18
    3a3c:	180b883a 	mov	r5,r3
    3a40:	00077f80 	call	77f8 <__subdf3>
    3a44:	100d883a 	mov	r6,r2
    3a48:	180f883a 	mov	r7,r3
    3a4c:	9009883a 	mov	r4,r18
    3a50:	880b883a 	mov	r5,r17
    3a54:	80800015 	stw	r2,0(r16)
    3a58:	80c00115 	stw	r3,4(r16)
    3a5c:	00077f80 	call	77f8 <__subdf3>
    3a60:	018698b4 	movhi	r6,6754
    3a64:	01cf7474 	movhi	r7,15825
    3a68:	3198cc44 	addi	r6,r6,25393
    3a6c:	39ed1844 	addi	r7,r7,-19359
    3a70:	1009883a 	mov	r4,r2
    3a74:	180b883a 	mov	r5,r3
    3a78:	00077f80 	call	77f8 <__subdf3>
    3a7c:	80800215 	stw	r2,8(r16)
    3a80:	80c00315 	stw	r3,12(r16)
    3a84:	00800044 	movi	r2,1
    3a88:	00005606 	br	3be4 <__ieee754_rem_pio2+0x240>
    3a8c:	00904e74 	movhi	r2,16697
    3a90:	10887ec4 	addi	r2,r2,8699
    3a94:	15c0830e 	bge	r2,r23,3ca4 <__ieee754_rem_pio2+0x300>
    3a98:	009ffc34 	movhi	r2,32752
    3a9c:	10bfffc4 	addi	r2,r2,-1
    3aa0:	15c05c16 	blt	r2,r23,3c14 <__ieee754_rem_pio2+0x270>
    3aa4:	b829d53a 	srai	r20,r23,20
    3aa8:	a53efa84 	addi	r20,r20,-1046
    3aac:	a024953a 	slli	r18,r20,20
    3ab0:	bca5c83a 	sub	r18,r23,r18
    3ab4:	900b883a 	mov	r5,r18
    3ab8:	00080f40 	call	80f4 <__fixdfsi>
    3abc:	1009883a 	mov	r4,r2
    3ac0:	00081740 	call	8174 <__floatsidf>
    3ac4:	9809883a 	mov	r4,r19
    3ac8:	900b883a 	mov	r5,r18
    3acc:	100d883a 	mov	r6,r2
    3ad0:	180f883a 	mov	r7,r3
    3ad4:	d8800215 	stw	r2,8(sp)
    3ad8:	d8c00315 	stw	r3,12(sp)
    3adc:	00077f80 	call	77f8 <__subdf3>
    3ae0:	000d883a 	mov	r6,zero
    3ae4:	01d05c34 	movhi	r7,16752
    3ae8:	1009883a 	mov	r4,r2
    3aec:	180b883a 	mov	r5,r3
    3af0:	0006f8c0 	call	6f8c <__muldf3>
    3af4:	180b883a 	mov	r5,r3
    3af8:	1009883a 	mov	r4,r2
    3afc:	182b883a 	mov	r21,r3
    3b00:	102d883a 	mov	r22,r2
    3b04:	00080f40 	call	80f4 <__fixdfsi>
    3b08:	1009883a 	mov	r4,r2
    3b0c:	00081740 	call	8174 <__floatsidf>
    3b10:	100d883a 	mov	r6,r2
    3b14:	180f883a 	mov	r7,r3
    3b18:	b009883a 	mov	r4,r22
    3b1c:	a80b883a 	mov	r5,r21
    3b20:	1027883a 	mov	r19,r2
    3b24:	1825883a 	mov	r18,r3
    3b28:	d8800415 	stw	r2,16(sp)
    3b2c:	d8c00515 	stw	r3,20(sp)
    3b30:	00077f80 	call	77f8 <__subdf3>
    3b34:	000d883a 	mov	r6,zero
    3b38:	01d05c34 	movhi	r7,16752
    3b3c:	1009883a 	mov	r4,r2
    3b40:	180b883a 	mov	r5,r3
    3b44:	0006f8c0 	call	6f8c <__muldf3>
    3b48:	000d883a 	mov	r6,zero
    3b4c:	000f883a 	mov	r7,zero
    3b50:	1009883a 	mov	r4,r2
    3b54:	180b883a 	mov	r5,r3
    3b58:	d8800615 	stw	r2,24(sp)
    3b5c:	d8c00715 	stw	r3,28(sp)
    3b60:	0006e280 	call	6e28 <__eqdf2>
    3b64:	1001431e 	bne	r2,zero,4074 <__ieee754_rem_pio2+0x6d0>
    3b68:	000f883a 	mov	r7,zero
    3b6c:	000d883a 	mov	r6,zero
    3b70:	9809883a 	mov	r4,r19
    3b74:	900b883a 	mov	r5,r18
    3b78:	0006e280 	call	6e28 <__eqdf2>
    3b7c:	100f003a 	cmpeq	r7,r2,zero
    3b80:	00800084 	movi	r2,2
    3b84:	11cfc83a 	sub	r7,r2,r7
    3b88:	00800084 	movi	r2,2
    3b8c:	d8800015 	stw	r2,0(sp)
    3b90:	00800074 	movhi	r2,1
    3b94:	109f4004 	addi	r2,r2,32000
    3b98:	d8800115 	stw	r2,4(sp)
    3b9c:	a00d883a 	mov	r6,r20
    3ba0:	800b883a 	mov	r5,r16
    3ba4:	d9000204 	addi	r4,sp,8
    3ba8:	00045b40 	call	45b4 <__kernel_rem_pio2>
    3bac:	88000d0e 	bge	r17,zero,3be4 <__ieee754_rem_pio2+0x240>
    3bb0:	81000117 	ldw	r4,4(r16)
    3bb4:	80c00317 	ldw	r3,12(r16)
    3bb8:	0085c83a 	sub	r2,zero,r2
    3bbc:	2120003c 	xorhi	r4,r4,32768
    3bc0:	18e0003c 	xorhi	r3,r3,32768
    3bc4:	81000115 	stw	r4,4(r16)
    3bc8:	80c00315 	stw	r3,12(r16)
    3bcc:	00000506 	br	3be4 <__ieee754_rem_pio2+0x240>
    3bd0:	31000015 	stw	r4,0(r6)
    3bd4:	31400115 	stw	r5,4(r6)
    3bd8:	30000215 	stw	zero,8(r6)
    3bdc:	30000315 	stw	zero,12(r6)
    3be0:	0005883a 	mov	r2,zero
    3be4:	dfc01517 	ldw	ra,84(sp)
    3be8:	df001417 	ldw	fp,80(sp)
    3bec:	ddc01317 	ldw	r23,76(sp)
    3bf0:	dd801217 	ldw	r22,72(sp)
    3bf4:	dd401117 	ldw	r21,68(sp)
    3bf8:	dd001017 	ldw	r20,64(sp)
    3bfc:	dcc00f17 	ldw	r19,60(sp)
    3c00:	dc800e17 	ldw	r18,56(sp)
    3c04:	dc400d17 	ldw	r17,52(sp)
    3c08:	dc000c17 	ldw	r16,48(sp)
    3c0c:	dec01604 	addi	sp,sp,88
    3c10:	f800283a 	ret
    3c14:	200d883a 	mov	r6,r4
    3c18:	280f883a 	mov	r7,r5
    3c1c:	00077f80 	call	77f8 <__subdf3>
    3c20:	80800215 	stw	r2,8(r16)
    3c24:	80800015 	stw	r2,0(r16)
    3c28:	80c00315 	stw	r3,12(r16)
    3c2c:	80c00115 	stw	r3,4(r16)
    3c30:	0005883a 	mov	r2,zero
    3c34:	003feb06 	br	3be4 <__alt_exception_stack_pointer+0xf8003be4>
    3c38:	01cf7474 	movhi	r7,15825
    3c3c:	9009883a 	mov	r4,r18
    3c40:	39ed1844 	addi	r7,r7,-19359
    3c44:	01869834 	movhi	r6,6752
    3c48:	180b883a 	mov	r5,r3
    3c4c:	00077f80 	call	77f8 <__subdf3>
    3c50:	018b80f4 	movhi	r6,11779
    3c54:	01cee8f4 	movhi	r7,15267
    3c58:	319c1cc4 	addi	r6,r6,28787
    3c5c:	39c66284 	addi	r7,r7,6538
    3c60:	1009883a 	mov	r4,r2
    3c64:	180b883a 	mov	r5,r3
    3c68:	1025883a 	mov	r18,r2
    3c6c:	1823883a 	mov	r17,r3
    3c70:	00077f80 	call	77f8 <__subdf3>
    3c74:	100d883a 	mov	r6,r2
    3c78:	180f883a 	mov	r7,r3
    3c7c:	9009883a 	mov	r4,r18
    3c80:	880b883a 	mov	r5,r17
    3c84:	80800015 	stw	r2,0(r16)
    3c88:	80c00115 	stw	r3,4(r16)
    3c8c:	00077f80 	call	77f8 <__subdf3>
    3c90:	018b80f4 	movhi	r6,11779
    3c94:	01cee8f4 	movhi	r7,15267
    3c98:	319c1cc4 	addi	r6,r6,28787
    3c9c:	39c66284 	addi	r7,r7,6538
    3ca0:	003f7306 	br	3a70 <__alt_exception_stack_pointer+0xf8003a70>
    3ca4:	00056180 	call	5618 <fabs>
    3ca8:	019b72b4 	movhi	r6,28106
    3cac:	01cff934 	movhi	r7,16356
    3cb0:	31b220c4 	addi	r6,r6,-14205
    3cb4:	39d7cc04 	addi	r7,r7,24368
    3cb8:	1009883a 	mov	r4,r2
    3cbc:	180b883a 	mov	r5,r3
    3cc0:	102d883a 	mov	r22,r2
    3cc4:	182b883a 	mov	r21,r3
    3cc8:	0006f8c0 	call	6f8c <__muldf3>
    3ccc:	000d883a 	mov	r6,zero
    3cd0:	01cff834 	movhi	r7,16352
    3cd4:	1009883a 	mov	r4,r2
    3cd8:	180b883a 	mov	r5,r3
    3cdc:	0005bac0 	call	5bac <__adddf3>
    3ce0:	180b883a 	mov	r5,r3
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	00080f40 	call	80f4 <__fixdfsi>
    3cec:	1009883a 	mov	r4,r2
    3cf0:	1025883a 	mov	r18,r2
    3cf4:	00081740 	call	8174 <__floatsidf>
    3cf8:	01cffe74 	movhi	r7,16377
    3cfc:	39c87ec4 	addi	r7,r7,8699
    3d00:	01951034 	movhi	r6,21568
    3d04:	1009883a 	mov	r4,r2
    3d08:	180b883a 	mov	r5,r3
    3d0c:	1029883a 	mov	r20,r2
    3d10:	1827883a 	mov	r19,r3
    3d14:	0006f8c0 	call	6f8c <__muldf3>
    3d18:	b009883a 	mov	r4,r22
    3d1c:	a80b883a 	mov	r5,r21
    3d20:	100d883a 	mov	r6,r2
    3d24:	180f883a 	mov	r7,r3
    3d28:	00077f80 	call	77f8 <__subdf3>
    3d2c:	018698b4 	movhi	r6,6754
    3d30:	01cf7474 	movhi	r7,15825
    3d34:	a009883a 	mov	r4,r20
    3d38:	3198cc44 	addi	r6,r6,25393
    3d3c:	39ed1844 	addi	r7,r7,-19359
    3d40:	980b883a 	mov	r5,r19
    3d44:	1039883a 	mov	fp,r2
    3d48:	d8c00815 	stw	r3,32(sp)
    3d4c:	0006f8c0 	call	6f8c <__muldf3>
    3d50:	010007c4 	movi	r4,31
    3d54:	e017883a 	mov	r11,fp
    3d58:	da800817 	ldw	r10,32(sp)
    3d5c:	102d883a 	mov	r22,r2
    3d60:	182b883a 	mov	r21,r3
    3d64:	24802816 	blt	r4,r18,3e08 <__ieee754_rem_pio2+0x464>
    3d68:	913fffc4 	addi	r4,r18,-1
    3d6c:	2109883a 	add	r4,r4,r4
    3d70:	01400074 	movhi	r5,1
    3d74:	2109883a 	add	r4,r4,r4
    3d78:	295f2004 	addi	r5,r5,31872
    3d7c:	2909883a 	add	r4,r5,r4
    3d80:	21000017 	ldw	r4,0(r4)
    3d84:	b9002026 	beq	r23,r4,3e08 <__ieee754_rem_pio2+0x464>
    3d88:	100d883a 	mov	r6,r2
    3d8c:	180f883a 	mov	r7,r3
    3d90:	e009883a 	mov	r4,fp
    3d94:	500b883a 	mov	r5,r10
    3d98:	da800b15 	stw	r10,44(sp)
    3d9c:	df000a15 	stw	fp,40(sp)
    3da0:	00077f80 	call	77f8 <__subdf3>
    3da4:	da800b17 	ldw	r10,44(sp)
    3da8:	dac00a17 	ldw	r11,40(sp)
    3dac:	1019883a 	mov	r12,r2
    3db0:	1813883a 	mov	r9,r3
    3db4:	80800015 	stw	r2,0(r16)
    3db8:	80c00115 	stw	r3,4(r16)
    3dbc:	600d883a 	mov	r6,r12
    3dc0:	480f883a 	mov	r7,r9
    3dc4:	5809883a 	mov	r4,r11
    3dc8:	500b883a 	mov	r5,r10
    3dcc:	da400b15 	stw	r9,44(sp)
    3dd0:	db000a15 	stw	r12,40(sp)
    3dd4:	00077f80 	call	77f8 <__subdf3>
    3dd8:	b00d883a 	mov	r6,r22
    3ddc:	a80f883a 	mov	r7,r21
    3de0:	1009883a 	mov	r4,r2
    3de4:	180b883a 	mov	r5,r3
    3de8:	00077f80 	call	77f8 <__subdf3>
    3dec:	80800215 	stw	r2,8(r16)
    3df0:	80c00315 	stw	r3,12(r16)
    3df4:	da400b17 	ldw	r9,44(sp)
    3df8:	db000a17 	ldw	r12,40(sp)
    3dfc:	88009f16 	blt	r17,zero,407c <__ieee754_rem_pio2+0x6d8>
    3e00:	9005883a 	mov	r2,r18
    3e04:	003f7706 	br	3be4 <__alt_exception_stack_pointer+0xf8003be4>
    3e08:	d9400817 	ldw	r5,32(sp)
    3e0c:	100d883a 	mov	r6,r2
    3e10:	180f883a 	mov	r7,r3
    3e14:	e009883a 	mov	r4,fp
    3e18:	da800b15 	stw	r10,44(sp)
    3e1c:	dac00a15 	stw	r11,40(sp)
    3e20:	00077f80 	call	77f8 <__subdf3>
    3e24:	1019883a 	mov	r12,r2
    3e28:	1804d53a 	srli	r2,r3,20
    3e2c:	b811d53a 	srai	r8,r23,20
    3e30:	1813883a 	mov	r9,r3
    3e34:	1081ffcc 	andi	r2,r2,2047
    3e38:	80c00115 	stw	r3,4(r16)
    3e3c:	83000015 	stw	r12,0(r16)
    3e40:	4085c83a 	sub	r2,r8,r2
    3e44:	00c00404 	movi	r3,16
    3e48:	da800b17 	ldw	r10,44(sp)
    3e4c:	dac00a17 	ldw	r11,40(sp)
    3e50:	18bfda0e 	bge	r3,r2,3dbc <__alt_exception_stack_pointer+0xf8003dbc>
    3e54:	01cf7474 	movhi	r7,15825
    3e58:	39ed1844 	addi	r7,r7,-19359
    3e5c:	01869834 	movhi	r6,6752
    3e60:	a009883a 	mov	r4,r20
    3e64:	980b883a 	mov	r5,r19
    3e68:	da000a15 	stw	r8,40(sp)
    3e6c:	0006f8c0 	call	6f8c <__muldf3>
    3e70:	d9400817 	ldw	r5,32(sp)
    3e74:	100d883a 	mov	r6,r2
    3e78:	180f883a 	mov	r7,r3
    3e7c:	e009883a 	mov	r4,fp
    3e80:	102d883a 	mov	r22,r2
    3e84:	182b883a 	mov	r21,r3
    3e88:	00077f80 	call	77f8 <__subdf3>
    3e8c:	d9400817 	ldw	r5,32(sp)
    3e90:	100d883a 	mov	r6,r2
    3e94:	180f883a 	mov	r7,r3
    3e98:	e009883a 	mov	r4,fp
    3e9c:	182f883a 	mov	r23,r3
    3ea0:	d8800915 	stw	r2,36(sp)
    3ea4:	00077f80 	call	77f8 <__subdf3>
    3ea8:	b00d883a 	mov	r6,r22
    3eac:	a80f883a 	mov	r7,r21
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	00077f80 	call	77f8 <__subdf3>
    3ebc:	018b80f4 	movhi	r6,11779
    3ec0:	01cee8f4 	movhi	r7,15267
    3ec4:	319c1cc4 	addi	r6,r6,28787
    3ec8:	39c66284 	addi	r7,r7,6538
    3ecc:	a009883a 	mov	r4,r20
    3ed0:	980b883a 	mov	r5,r19
    3ed4:	102d883a 	mov	r22,r2
    3ed8:	182b883a 	mov	r21,r3
    3edc:	0006f8c0 	call	6f8c <__muldf3>
    3ee0:	b00d883a 	mov	r6,r22
    3ee4:	a80f883a 	mov	r7,r21
    3ee8:	1009883a 	mov	r4,r2
    3eec:	180b883a 	mov	r5,r3
    3ef0:	00077f80 	call	77f8 <__subdf3>
    3ef4:	d9000917 	ldw	r4,36(sp)
    3ef8:	100d883a 	mov	r6,r2
    3efc:	180f883a 	mov	r7,r3
    3f00:	b80b883a 	mov	r5,r23
    3f04:	102d883a 	mov	r22,r2
    3f08:	182b883a 	mov	r21,r3
    3f0c:	00077f80 	call	77f8 <__subdf3>
    3f10:	1019883a 	mov	r12,r2
    3f14:	1804d53a 	srli	r2,r3,20
    3f18:	da000a17 	ldw	r8,40(sp)
    3f1c:	83000015 	stw	r12,0(r16)
    3f20:	1081ffcc 	andi	r2,r2,2047
    3f24:	4091c83a 	sub	r8,r8,r2
    3f28:	80c00115 	stw	r3,4(r16)
    3f2c:	00800c44 	movi	r2,49
    3f30:	1813883a 	mov	r9,r3
    3f34:	1200730e 	bge	r2,r8,4104 <__ieee754_rem_pio2+0x760>
    3f38:	01cee8f4 	movhi	r7,15267
    3f3c:	39c66284 	addi	r7,r7,6538
    3f40:	018b8034 	movhi	r6,11776
    3f44:	a009883a 	mov	r4,r20
    3f48:	980b883a 	mov	r5,r19
    3f4c:	0006f8c0 	call	6f8c <__muldf3>
    3f50:	d9000917 	ldw	r4,36(sp)
    3f54:	100d883a 	mov	r6,r2
    3f58:	180f883a 	mov	r7,r3
    3f5c:	b80b883a 	mov	r5,r23
    3f60:	102d883a 	mov	r22,r2
    3f64:	182b883a 	mov	r21,r3
    3f68:	00077f80 	call	77f8 <__subdf3>
    3f6c:	d9000917 	ldw	r4,36(sp)
    3f70:	100d883a 	mov	r6,r2
    3f74:	180f883a 	mov	r7,r3
    3f78:	b80b883a 	mov	r5,r23
    3f7c:	d8c00b15 	stw	r3,44(sp)
    3f80:	d8800a15 	stw	r2,40(sp)
    3f84:	00077f80 	call	77f8 <__subdf3>
    3f88:	b00d883a 	mov	r6,r22
    3f8c:	a80f883a 	mov	r7,r21
    3f90:	1009883a 	mov	r4,r2
    3f94:	180b883a 	mov	r5,r3
    3f98:	00077f80 	call	77f8 <__subdf3>
    3f9c:	01894834 	movhi	r6,9504
    3fa0:	01ce5f34 	movhi	r7,14716
    3fa4:	31927044 	addi	r6,r6,18881
    3fa8:	39e0e684 	addi	r7,r7,-31846
    3fac:	a009883a 	mov	r4,r20
    3fb0:	980b883a 	mov	r5,r19
    3fb4:	102d883a 	mov	r22,r2
    3fb8:	182b883a 	mov	r21,r3
    3fbc:	0006f8c0 	call	6f8c <__muldf3>
    3fc0:	b00d883a 	mov	r6,r22
    3fc4:	a80f883a 	mov	r7,r21
    3fc8:	1009883a 	mov	r4,r2
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	00077f80 	call	77f8 <__subdf3>
    3fd4:	dac00a17 	ldw	r11,40(sp)
    3fd8:	da800b17 	ldw	r10,44(sp)
    3fdc:	102d883a 	mov	r22,r2
    3fe0:	182b883a 	mov	r21,r3
    3fe4:	100d883a 	mov	r6,r2
    3fe8:	180f883a 	mov	r7,r3
    3fec:	5809883a 	mov	r4,r11
    3ff0:	500b883a 	mov	r5,r10
    3ff4:	003f6a06 	br	3da0 <__alt_exception_stack_pointer+0xf8003da0>
    3ff8:	0005bac0 	call	5bac <__adddf3>
    3ffc:	1025883a 	mov	r18,r2
    4000:	008ffe74 	movhi	r2,16377
    4004:	10887ec4 	addi	r2,r2,8699
    4008:	1823883a 	mov	r17,r3
    400c:	b8802226 	beq	r23,r2,4098 <__ieee754_rem_pio2+0x6f4>
    4010:	018698b4 	movhi	r6,6754
    4014:	01cf7474 	movhi	r7,15825
    4018:	3198cc44 	addi	r6,r6,25393
    401c:	39ed1844 	addi	r7,r7,-19359
    4020:	9009883a 	mov	r4,r18
    4024:	180b883a 	mov	r5,r3
    4028:	0005bac0 	call	5bac <__adddf3>
    402c:	100d883a 	mov	r6,r2
    4030:	180f883a 	mov	r7,r3
    4034:	9009883a 	mov	r4,r18
    4038:	880b883a 	mov	r5,r17
    403c:	80800015 	stw	r2,0(r16)
    4040:	80c00115 	stw	r3,4(r16)
    4044:	00077f80 	call	77f8 <__subdf3>
    4048:	018698b4 	movhi	r6,6754
    404c:	01cf7474 	movhi	r7,15825
    4050:	3198cc44 	addi	r6,r6,25393
    4054:	39ed1844 	addi	r7,r7,-19359
    4058:	1009883a 	mov	r4,r2
    405c:	180b883a 	mov	r5,r3
    4060:	0005bac0 	call	5bac <__adddf3>
    4064:	80800215 	stw	r2,8(r16)
    4068:	80c00315 	stw	r3,12(r16)
    406c:	00bfffc4 	movi	r2,-1
    4070:	003edc06 	br	3be4 <__alt_exception_stack_pointer+0xf8003be4>
    4074:	01c000c4 	movi	r7,3
    4078:	003ec306 	br	3b88 <__alt_exception_stack_pointer+0xf8003b88>
    407c:	4a60003c 	xorhi	r9,r9,32768
    4080:	18e0003c 	xorhi	r3,r3,32768
    4084:	83000015 	stw	r12,0(r16)
    4088:	82400115 	stw	r9,4(r16)
    408c:	80c00315 	stw	r3,12(r16)
    4090:	0485c83a 	sub	r2,zero,r18
    4094:	003ed306 	br	3be4 <__alt_exception_stack_pointer+0xf8003be4>
    4098:	01cf7474 	movhi	r7,15825
    409c:	9009883a 	mov	r4,r18
    40a0:	39ed1844 	addi	r7,r7,-19359
    40a4:	01869834 	movhi	r6,6752
    40a8:	180b883a 	mov	r5,r3
    40ac:	0005bac0 	call	5bac <__adddf3>
    40b0:	018b80f4 	movhi	r6,11779
    40b4:	01cee8f4 	movhi	r7,15267
    40b8:	319c1cc4 	addi	r6,r6,28787
    40bc:	39c66284 	addi	r7,r7,6538
    40c0:	1009883a 	mov	r4,r2
    40c4:	180b883a 	mov	r5,r3
    40c8:	1025883a 	mov	r18,r2
    40cc:	1823883a 	mov	r17,r3
    40d0:	0005bac0 	call	5bac <__adddf3>
    40d4:	100d883a 	mov	r6,r2
    40d8:	180f883a 	mov	r7,r3
    40dc:	9009883a 	mov	r4,r18
    40e0:	880b883a 	mov	r5,r17
    40e4:	80800015 	stw	r2,0(r16)
    40e8:	80c00115 	stw	r3,4(r16)
    40ec:	00077f80 	call	77f8 <__subdf3>
    40f0:	018b80f4 	movhi	r6,11779
    40f4:	01cee8f4 	movhi	r7,15267
    40f8:	319c1cc4 	addi	r6,r6,28787
    40fc:	39c66284 	addi	r7,r7,6538
    4100:	003fd506 	br	4058 <__alt_exception_stack_pointer+0xf8004058>
    4104:	dac00917 	ldw	r11,36(sp)
    4108:	b815883a 	mov	r10,r23
    410c:	003f2b06 	br	3dbc <__alt_exception_stack_pointer+0xf8003dbc>

00004110 <__kernel_cos>:
    4110:	defff304 	addi	sp,sp,-52
    4114:	dc000315 	stw	r16,12(sp)
    4118:	04200034 	movhi	r16,32768
    411c:	843fffc4 	addi	r16,r16,-1
    4120:	008f9034 	movhi	r2,15936
    4124:	df000b15 	stw	fp,44(sp)
    4128:	ddc00a15 	stw	r23,40(sp)
    412c:	dd800915 	stw	r22,36(sp)
    4130:	dcc00615 	stw	r19,24(sp)
    4134:	dfc00c15 	stw	ra,48(sp)
    4138:	dd400815 	stw	r21,32(sp)
    413c:	dd000715 	stw	r20,28(sp)
    4140:	dc800515 	stw	r18,20(sp)
    4144:	dc400415 	stw	r17,16(sp)
    4148:	2c20703a 	and	r16,r5,r16
    414c:	10bfffc4 	addi	r2,r2,-1
    4150:	2827883a 	mov	r19,r5
    4154:	202d883a 	mov	r22,r4
    4158:	302f883a 	mov	r23,r6
    415c:	3839883a 	mov	fp,r7
    4160:	14007516 	blt	r2,r16,4338 <__kernel_cos+0x228>
    4164:	00080f40 	call	80f4 <__fixdfsi>
    4168:	10010f26 	beq	r2,zero,45a8 <__kernel_cos+0x498>
    416c:	b00d883a 	mov	r6,r22
    4170:	980f883a 	mov	r7,r19
    4174:	b009883a 	mov	r4,r22
    4178:	980b883a 	mov	r5,r19
    417c:	0006f8c0 	call	6f8c <__muldf3>
    4180:	01afa234 	movhi	r6,48776
    4184:	01ef6a74 	movhi	r7,48553
    4188:	318e3504 	addi	r6,r6,14548
    418c:	39feba44 	addi	r7,r7,-1303
    4190:	1009883a 	mov	r4,r2
    4194:	180b883a 	mov	r5,r3
    4198:	102b883a 	mov	r21,r2
    419c:	1829883a 	mov	r20,r3
    41a0:	0006f8c0 	call	6f8c <__muldf3>
    41a4:	01af6d74 	movhi	r6,48565
    41a8:	01cf88b4 	movhi	r7,15906
    41ac:	31ac7104 	addi	r6,r6,-20028
    41b0:	39fba784 	addi	r7,r7,-4450
    41b4:	1009883a 	mov	r4,r2
    41b8:	180b883a 	mov	r5,r3
    41bc:	0005bac0 	call	5bac <__adddf3>
    41c0:	a80d883a 	mov	r6,r21
    41c4:	a00f883a 	mov	r7,r20
    41c8:	1009883a 	mov	r4,r2
    41cc:	180b883a 	mov	r5,r3
    41d0:	0006f8c0 	call	6f8c <__muldf3>
    41d4:	01a02734 	movhi	r6,32924
    41d8:	01cfa4b4 	movhi	r7,16018
    41dc:	3194ab44 	addi	r6,r6,21165
    41e0:	39df93c4 	addi	r7,r7,32335
    41e4:	1009883a 	mov	r4,r2
    41e8:	180b883a 	mov	r5,r3
    41ec:	00077f80 	call	77f8 <__subdf3>
    41f0:	a80d883a 	mov	r6,r21
    41f4:	a00f883a 	mov	r7,r20
    41f8:	1009883a 	mov	r4,r2
    41fc:	180b883a 	mov	r5,r3
    4200:	0006f8c0 	call	6f8c <__muldf3>
    4204:	018672f4 	movhi	r6,6603
    4208:	01cfbeb4 	movhi	r7,16122
    420c:	31856404 	addi	r6,r6,5520
    4210:	39c06804 	addi	r7,r7,416
    4214:	1009883a 	mov	r4,r2
    4218:	180b883a 	mov	r5,r3
    421c:	0005bac0 	call	5bac <__adddf3>
    4220:	a80d883a 	mov	r6,r21
    4224:	a00f883a 	mov	r7,r20
    4228:	1009883a 	mov	r4,r2
    422c:	180b883a 	mov	r5,r3
    4230:	0006f8c0 	call	6f8c <__muldf3>
    4234:	0185b074 	movhi	r6,5825
    4238:	01cfd5f4 	movhi	r7,16215
    423c:	31945dc4 	addi	r6,r6,20855
    4240:	39f05b04 	addi	r7,r7,-16020
    4244:	1009883a 	mov	r4,r2
    4248:	180b883a 	mov	r5,r3
    424c:	00077f80 	call	77f8 <__subdf3>
    4250:	a80d883a 	mov	r6,r21
    4254:	a00f883a 	mov	r7,r20
    4258:	1009883a 	mov	r4,r2
    425c:	180b883a 	mov	r5,r3
    4260:	0006f8c0 	call	6f8c <__muldf3>
    4264:	01955574 	movhi	r6,21845
    4268:	01cfe974 	movhi	r7,16293
    426c:	31955304 	addi	r6,r6,21836
    4270:	39d55544 	addi	r7,r7,21845
    4274:	1009883a 	mov	r4,r2
    4278:	180b883a 	mov	r5,r3
    427c:	0005bac0 	call	5bac <__adddf3>
    4280:	a80d883a 	mov	r6,r21
    4284:	a00f883a 	mov	r7,r20
    4288:	1009883a 	mov	r4,r2
    428c:	180b883a 	mov	r5,r3
    4290:	0006f8c0 	call	6f8c <__muldf3>
    4294:	1017883a 	mov	r11,r2
    4298:	1815883a 	mov	r10,r3
    429c:	a809883a 	mov	r4,r21
    42a0:	a00b883a 	mov	r5,r20
    42a4:	000d883a 	mov	r6,zero
    42a8:	01cff834 	movhi	r7,16352
    42ac:	da800215 	stw	r10,8(sp)
    42b0:	dac00115 	stw	r11,4(sp)
    42b4:	0006f8c0 	call	6f8c <__muldf3>
    42b8:	dac00117 	ldw	r11,4(sp)
    42bc:	da800217 	ldw	r10,8(sp)
    42c0:	a809883a 	mov	r4,r21
    42c4:	580d883a 	mov	r6,r11
    42c8:	500f883a 	mov	r7,r10
    42cc:	a00b883a 	mov	r5,r20
    42d0:	1023883a 	mov	r17,r2
    42d4:	1821883a 	mov	r16,r3
    42d8:	0006f8c0 	call	6f8c <__muldf3>
    42dc:	b80d883a 	mov	r6,r23
    42e0:	e00f883a 	mov	r7,fp
    42e4:	b009883a 	mov	r4,r22
    42e8:	980b883a 	mov	r5,r19
    42ec:	1029883a 	mov	r20,r2
    42f0:	1825883a 	mov	r18,r3
    42f4:	0006f8c0 	call	6f8c <__muldf3>
    42f8:	a009883a 	mov	r4,r20
    42fc:	900b883a 	mov	r5,r18
    4300:	100d883a 	mov	r6,r2
    4304:	180f883a 	mov	r7,r3
    4308:	00077f80 	call	77f8 <__subdf3>
    430c:	8809883a 	mov	r4,r17
    4310:	800b883a 	mov	r5,r16
    4314:	100d883a 	mov	r6,r2
    4318:	180f883a 	mov	r7,r3
    431c:	00077f80 	call	77f8 <__subdf3>
    4320:	100d883a 	mov	r6,r2
    4324:	180f883a 	mov	r7,r3
    4328:	0009883a 	mov	r4,zero
    432c:	014ffc34 	movhi	r5,16368
    4330:	00077f80 	call	77f8 <__subdf3>
    4334:	00008b06 	br	4564 <__kernel_cos+0x454>
    4338:	200d883a 	mov	r6,r4
    433c:	280f883a 	mov	r7,r5
    4340:	0006f8c0 	call	6f8c <__muldf3>
    4344:	01afa234 	movhi	r6,48776
    4348:	01ef6a74 	movhi	r7,48553
    434c:	318e3504 	addi	r6,r6,14548
    4350:	39feba44 	addi	r7,r7,-1303
    4354:	1009883a 	mov	r4,r2
    4358:	180b883a 	mov	r5,r3
    435c:	1025883a 	mov	r18,r2
    4360:	1823883a 	mov	r17,r3
    4364:	0006f8c0 	call	6f8c <__muldf3>
    4368:	01af6d74 	movhi	r6,48565
    436c:	01cf88b4 	movhi	r7,15906
    4370:	31ac7104 	addi	r6,r6,-20028
    4374:	39fba784 	addi	r7,r7,-4450
    4378:	1009883a 	mov	r4,r2
    437c:	180b883a 	mov	r5,r3
    4380:	0005bac0 	call	5bac <__adddf3>
    4384:	900d883a 	mov	r6,r18
    4388:	880f883a 	mov	r7,r17
    438c:	1009883a 	mov	r4,r2
    4390:	180b883a 	mov	r5,r3
    4394:	0006f8c0 	call	6f8c <__muldf3>
    4398:	01a02734 	movhi	r6,32924
    439c:	01cfa4b4 	movhi	r7,16018
    43a0:	3194ab44 	addi	r6,r6,21165
    43a4:	39df93c4 	addi	r7,r7,32335
    43a8:	1009883a 	mov	r4,r2
    43ac:	180b883a 	mov	r5,r3
    43b0:	00077f80 	call	77f8 <__subdf3>
    43b4:	900d883a 	mov	r6,r18
    43b8:	880f883a 	mov	r7,r17
    43bc:	1009883a 	mov	r4,r2
    43c0:	180b883a 	mov	r5,r3
    43c4:	0006f8c0 	call	6f8c <__muldf3>
    43c8:	018672f4 	movhi	r6,6603
    43cc:	01cfbeb4 	movhi	r7,16122
    43d0:	31856404 	addi	r6,r6,5520
    43d4:	39c06804 	addi	r7,r7,416
    43d8:	1009883a 	mov	r4,r2
    43dc:	180b883a 	mov	r5,r3
    43e0:	0005bac0 	call	5bac <__adddf3>
    43e4:	900d883a 	mov	r6,r18
    43e8:	880f883a 	mov	r7,r17
    43ec:	1009883a 	mov	r4,r2
    43f0:	180b883a 	mov	r5,r3
    43f4:	0006f8c0 	call	6f8c <__muldf3>
    43f8:	0185b074 	movhi	r6,5825
    43fc:	01cfd5f4 	movhi	r7,16215
    4400:	31945dc4 	addi	r6,r6,20855
    4404:	39f05b04 	addi	r7,r7,-16020
    4408:	1009883a 	mov	r4,r2
    440c:	180b883a 	mov	r5,r3
    4410:	00077f80 	call	77f8 <__subdf3>
    4414:	900d883a 	mov	r6,r18
    4418:	880f883a 	mov	r7,r17
    441c:	1009883a 	mov	r4,r2
    4420:	180b883a 	mov	r5,r3
    4424:	0006f8c0 	call	6f8c <__muldf3>
    4428:	01955574 	movhi	r6,21845
    442c:	01cfe974 	movhi	r7,16293
    4430:	31955304 	addi	r6,r6,21836
    4434:	39d55544 	addi	r7,r7,21845
    4438:	1009883a 	mov	r4,r2
    443c:	180b883a 	mov	r5,r3
    4440:	0005bac0 	call	5bac <__adddf3>
    4444:	900d883a 	mov	r6,r18
    4448:	880f883a 	mov	r7,r17
    444c:	1009883a 	mov	r4,r2
    4450:	180b883a 	mov	r5,r3
    4454:	0006f8c0 	call	6f8c <__muldf3>
    4458:	1013883a 	mov	r9,r2
    445c:	1017883a 	mov	r11,r2
    4460:	008ff4f4 	movhi	r2,16339
    4464:	108ccc84 	addi	r2,r2,13106
    4468:	1811883a 	mov	r8,r3
    446c:	902b883a 	mov	r21,r18
    4470:	8829883a 	mov	r20,r17
    4474:	1815883a 	mov	r10,r3
    4478:	143f880e 	bge	r2,r16,429c <__alt_exception_stack_pointer+0xf800429c>
    447c:	008ffa74 	movhi	r2,16361
    4480:	14004416 	blt	r2,r16,4594 <__kernel_cos+0x484>
    4484:	00bff834 	movhi	r2,65504
    4488:	80a1883a 	add	r16,r16,r2
    448c:	000d883a 	mov	r6,zero
    4490:	800f883a 	mov	r7,r16
    4494:	0009883a 	mov	r4,zero
    4498:	014ffc34 	movhi	r5,16368
    449c:	da400115 	stw	r9,4(sp)
    44a0:	d8c00215 	stw	r3,8(sp)
    44a4:	00077f80 	call	77f8 <__subdf3>
    44a8:	da000217 	ldw	r8,8(sp)
    44ac:	da400117 	ldw	r9,4(sp)
    44b0:	102b883a 	mov	r21,r2
    44b4:	d8c00015 	stw	r3,0(sp)
    44b8:	9009883a 	mov	r4,r18
    44bc:	880b883a 	mov	r5,r17
    44c0:	000d883a 	mov	r6,zero
    44c4:	01cff834 	movhi	r7,16352
    44c8:	da000215 	stw	r8,8(sp)
    44cc:	da400115 	stw	r9,4(sp)
    44d0:	0006f8c0 	call	6f8c <__muldf3>
    44d4:	800f883a 	mov	r7,r16
    44d8:	000d883a 	mov	r6,zero
    44dc:	1009883a 	mov	r4,r2
    44e0:	180b883a 	mov	r5,r3
    44e4:	00077f80 	call	77f8 <__subdf3>
    44e8:	da400117 	ldw	r9,4(sp)
    44ec:	da000217 	ldw	r8,8(sp)
    44f0:	9009883a 	mov	r4,r18
    44f4:	480d883a 	mov	r6,r9
    44f8:	400f883a 	mov	r7,r8
    44fc:	880b883a 	mov	r5,r17
    4500:	1029883a 	mov	r20,r2
    4504:	1821883a 	mov	r16,r3
    4508:	0006f8c0 	call	6f8c <__muldf3>
    450c:	b80d883a 	mov	r6,r23
    4510:	e00f883a 	mov	r7,fp
    4514:	b009883a 	mov	r4,r22
    4518:	980b883a 	mov	r5,r19
    451c:	1025883a 	mov	r18,r2
    4520:	1823883a 	mov	r17,r3
    4524:	0006f8c0 	call	6f8c <__muldf3>
    4528:	100d883a 	mov	r6,r2
    452c:	180f883a 	mov	r7,r3
    4530:	9009883a 	mov	r4,r18
    4534:	880b883a 	mov	r5,r17
    4538:	00077f80 	call	77f8 <__subdf3>
    453c:	100d883a 	mov	r6,r2
    4540:	180f883a 	mov	r7,r3
    4544:	a009883a 	mov	r4,r20
    4548:	800b883a 	mov	r5,r16
    454c:	00077f80 	call	77f8 <__subdf3>
    4550:	d9400017 	ldw	r5,0(sp)
    4554:	100d883a 	mov	r6,r2
    4558:	180f883a 	mov	r7,r3
    455c:	a809883a 	mov	r4,r21
    4560:	00077f80 	call	77f8 <__subdf3>
    4564:	dfc00c17 	ldw	ra,48(sp)
    4568:	df000b17 	ldw	fp,44(sp)
    456c:	ddc00a17 	ldw	r23,40(sp)
    4570:	dd800917 	ldw	r22,36(sp)
    4574:	dd400817 	ldw	r21,32(sp)
    4578:	dd000717 	ldw	r20,28(sp)
    457c:	dcc00617 	ldw	r19,24(sp)
    4580:	dc800517 	ldw	r18,20(sp)
    4584:	dc400417 	ldw	r17,16(sp)
    4588:	dc000317 	ldw	r16,12(sp)
    458c:	dec00d04 	addi	sp,sp,52
    4590:	f800283a 	ret
    4594:	008ff9f4 	movhi	r2,16359
    4598:	002b883a 	mov	r21,zero
    459c:	d8800015 	stw	r2,0(sp)
    45a0:	040ff4b4 	movhi	r16,16338
    45a4:	003fc406 	br	44b8 <__alt_exception_stack_pointer+0xf80044b8>
    45a8:	0005883a 	mov	r2,zero
    45ac:	00cffc34 	movhi	r3,16368
    45b0:	003fec06 	br	4564 <__alt_exception_stack_pointer+0xf8004564>

000045b4 <__kernel_rem_pio2>:
    45b4:	deff5a04 	addi	sp,sp,-664
    45b8:	da00a617 	ldw	r8,664(sp)
    45bc:	00c00074 	movhi	r3,1
    45c0:	18df9204 	addi	r3,r3,32328
    45c4:	4205883a 	add	r2,r8,r8
    45c8:	1085883a 	add	r2,r2,r2
    45cc:	1885883a 	add	r2,r3,r2
    45d0:	d9008e15 	stw	r4,568(sp)
    45d4:	d9408f15 	stw	r5,572(sp)
    45d8:	313fff44 	addi	r4,r6,-3
    45dc:	01400604 	movi	r5,24
    45e0:	dd80a215 	stw	r22,648(sp)
    45e4:	dc009c15 	stw	r16,624(sp)
    45e8:	dfc0a515 	stw	ra,660(sp)
    45ec:	df00a415 	stw	fp,656(sp)
    45f0:	ddc0a315 	stw	r23,652(sp)
    45f4:	dd40a115 	stw	r21,644(sp)
    45f8:	dd00a015 	stw	r20,640(sp)
    45fc:	dcc09f15 	stw	r19,636(sp)
    4600:	dc809e15 	stw	r18,632(sp)
    4604:	dc409d15 	stw	r17,628(sp)
    4608:	3021883a 	mov	r16,r6
    460c:	d9c09315 	stw	r7,588(sp)
    4610:	15800017 	ldw	r22,0(r2)
    4614:	00059d00 	call	59d0 <__divsi3>
    4618:	da009317 	ldw	r8,588(sp)
    461c:	d8809215 	stw	r2,584(sp)
    4620:	423fffc4 	addi	r8,r8,-1
    4624:	da008d15 	stw	r8,564(sp)
    4628:	10033d16 	blt	r2,zero,5320 <__kernel_rem_pio2+0xd6c>
    462c:	da009217 	ldw	r8,584(sp)
    4630:	017ffa04 	movi	r5,-24
    4634:	42000044 	addi	r8,r8,1
    4638:	4009883a 	mov	r4,r8
    463c:	da009515 	stw	r8,596(sp)
    4640:	0005b840 	call	5b84 <__mulsi3>
    4644:	da008d17 	ldw	r8,564(sp)
    4648:	1421883a 	add	r16,r2,r16
    464c:	d8809217 	ldw	r2,584(sp)
    4650:	b207883a 	add	r3,r22,r8
    4654:	dc009015 	stw	r16,576(sp)
    4658:	1223c83a 	sub	r17,r2,r8
    465c:	18001016 	blt	r3,zero,46a0 <__kernel_rem_pio2+0xec>
    4660:	da00a717 	ldw	r8,668(sp)
    4664:	8c65883a 	add	r18,r17,r17
    4668:	94a5883a 	add	r18,r18,r18
    466c:	1c47883a 	add	r3,r3,r17
    4670:	dcc05004 	addi	r19,sp,320
    4674:	44a5883a 	add	r18,r8,r18
    4678:	1c000044 	addi	r16,r3,1
    467c:	88015316 	blt	r17,zero,4bcc <__kernel_rem_pio2+0x618>
    4680:	91000017 	ldw	r4,0(r18)
    4684:	00081740 	call	8174 <__floatsidf>
    4688:	98800015 	stw	r2,0(r19)
    468c:	98c00115 	stw	r3,4(r19)
    4690:	8c400044 	addi	r17,r17,1
    4694:	9cc00204 	addi	r19,r19,8
    4698:	94800104 	addi	r18,r18,4
    469c:	8c3ff71e 	bne	r17,r16,467c <__alt_exception_stack_pointer+0xf800467c>
    46a0:	b0002816 	blt	r22,zero,4744 <__kernel_rem_pio2+0x190>
    46a4:	da008d17 	ldw	r8,564(sp)
    46a8:	b4c00044 	addi	r19,r22,1
    46ac:	982690fa 	slli	r19,r19,3
    46b0:	402490fa 	slli	r18,r8,3
    46b4:	da008e17 	ldw	r8,568(sp)
    46b8:	d8805004 	addi	r2,sp,320
    46bc:	94000204 	addi	r16,r18,8
    46c0:	d823883a 	mov	r17,sp
    46c4:	14a5883a 	add	r18,r2,r18
    46c8:	dcef883a 	add	r23,sp,r19
    46cc:	4421883a 	add	r16,r8,r16
    46d0:	dd809115 	stw	r22,580(sp)
    46d4:	4039883a 	mov	fp,r8
    46d8:	da008d17 	ldw	r8,564(sp)
    46dc:	40016016 	blt	r8,zero,4c60 <__kernel_rem_pio2+0x6ac>
    46e0:	e027883a 	mov	r19,fp
    46e4:	9029883a 	mov	r20,r18
    46e8:	002d883a 	mov	r22,zero
    46ec:	002b883a 	mov	r21,zero
    46f0:	a1800017 	ldw	r6,0(r20)
    46f4:	a1c00117 	ldw	r7,4(r20)
    46f8:	99000017 	ldw	r4,0(r19)
    46fc:	99400117 	ldw	r5,4(r19)
    4700:	9cc00204 	addi	r19,r19,8
    4704:	a53ffe04 	addi	r20,r20,-8
    4708:	0006f8c0 	call	6f8c <__muldf3>
    470c:	b009883a 	mov	r4,r22
    4710:	a80b883a 	mov	r5,r21
    4714:	100d883a 	mov	r6,r2
    4718:	180f883a 	mov	r7,r3
    471c:	0005bac0 	call	5bac <__adddf3>
    4720:	102d883a 	mov	r22,r2
    4724:	182b883a 	mov	r21,r3
    4728:	9c3ff11e 	bne	r19,r16,46f0 <__alt_exception_stack_pointer+0xf80046f0>
    472c:	8d800015 	stw	r22,0(r17)
    4730:	8d400115 	stw	r21,4(r17)
    4734:	8c400204 	addi	r17,r17,8
    4738:	94800204 	addi	r18,r18,8
    473c:	8dffe61e 	bne	r17,r23,46d8 <__alt_exception_stack_pointer+0xf80046d8>
    4740:	dd809117 	ldw	r22,580(sp)
    4744:	00d00034 	movhi	r3,16384
    4748:	da009317 	ldw	r8,588(sp)
    474c:	18ffff84 	addi	r3,r3,-2
    4750:	b0c7883a 	add	r3,r22,r3
    4754:	18c7883a 	add	r3,r3,r3
    4758:	402090fa 	slli	r16,r8,3
    475c:	18c7883a 	add	r3,r3,r3
    4760:	da007804 	addi	r8,sp,480
    4764:	40d1883a 	add	r8,r8,r3
    4768:	b0bfffc4 	addi	r2,r22,-1
    476c:	da009615 	stw	r8,600(sp)
    4770:	da008e17 	ldw	r8,568(sp)
    4774:	1085883a 	add	r2,r2,r2
    4778:	1085883a 	add	r2,r2,r2
    477c:	19000104 	addi	r4,r3,4
    4780:	d885883a 	add	r2,sp,r2
    4784:	4421883a 	add	r16,r8,r16
    4788:	da007804 	addi	r8,sp,480
    478c:	4111883a 	add	r8,r8,r4
    4790:	10807804 	addi	r2,r2,480
    4794:	da009715 	stw	r8,604(sp)
    4798:	b025883a 	mov	r18,r22
    479c:	d8809815 	stw	r2,608(sp)
    47a0:	dd809415 	stw	r22,592(sp)
    47a4:	900490fa 	slli	r2,r18,3
    47a8:	d885883a 	add	r2,sp,r2
    47ac:	17000017 	ldw	fp,0(r2)
    47b0:	15400117 	ldw	r21,4(r2)
    47b4:	04802b0e 	bge	zero,r18,4864 <__kernel_rem_pio2+0x2b0>
    47b8:	00880034 	movhi	r2,8192
    47bc:	10bfffc4 	addi	r2,r2,-1
    47c0:	90a9883a 	add	r20,r18,r2
    47c4:	a02890fa 	slli	r20,r20,3
    47c8:	dc407804 	addi	r17,sp,480
    47cc:	dcfffe04 	addi	r19,sp,-8
    47d0:	dd29883a 	add	r20,sp,r20
    47d4:	000d883a 	mov	r6,zero
    47d8:	01cf9c34 	movhi	r7,15984
    47dc:	e009883a 	mov	r4,fp
    47e0:	a80b883a 	mov	r5,r21
    47e4:	0006f8c0 	call	6f8c <__muldf3>
    47e8:	180b883a 	mov	r5,r3
    47ec:	1009883a 	mov	r4,r2
    47f0:	00080f40 	call	80f4 <__fixdfsi>
    47f4:	1009883a 	mov	r4,r2
    47f8:	00081740 	call	8174 <__floatsidf>
    47fc:	000d883a 	mov	r6,zero
    4800:	01d05c34 	movhi	r7,16752
    4804:	1009883a 	mov	r4,r2
    4808:	180b883a 	mov	r5,r3
    480c:	102f883a 	mov	r23,r2
    4810:	182d883a 	mov	r22,r3
    4814:	0006f8c0 	call	6f8c <__muldf3>
    4818:	100d883a 	mov	r6,r2
    481c:	180f883a 	mov	r7,r3
    4820:	e009883a 	mov	r4,fp
    4824:	a80b883a 	mov	r5,r21
    4828:	00077f80 	call	77f8 <__subdf3>
    482c:	180b883a 	mov	r5,r3
    4830:	1009883a 	mov	r4,r2
    4834:	00080f40 	call	80f4 <__fixdfsi>
    4838:	a1800017 	ldw	r6,0(r20)
    483c:	a1c00117 	ldw	r7,4(r20)
    4840:	88800015 	stw	r2,0(r17)
    4844:	b809883a 	mov	r4,r23
    4848:	b00b883a 	mov	r5,r22
    484c:	0005bac0 	call	5bac <__adddf3>
    4850:	a53ffe04 	addi	r20,r20,-8
    4854:	1039883a 	mov	fp,r2
    4858:	182b883a 	mov	r21,r3
    485c:	8c400104 	addi	r17,r17,4
    4860:	a4ffdc1e 	bne	r20,r19,47d4 <__alt_exception_stack_pointer+0xf80047d4>
    4864:	d9809017 	ldw	r6,576(sp)
    4868:	a80b883a 	mov	r5,r21
    486c:	e009883a 	mov	r4,fp
    4870:	00058180 	call	5818 <scalbn>
    4874:	000d883a 	mov	r6,zero
    4878:	01cff034 	movhi	r7,16320
    487c:	1009883a 	mov	r4,r2
    4880:	180b883a 	mov	r5,r3
    4884:	1027883a 	mov	r19,r2
    4888:	1823883a 	mov	r17,r3
    488c:	0006f8c0 	call	6f8c <__muldf3>
    4890:	1009883a 	mov	r4,r2
    4894:	180b883a 	mov	r5,r3
    4898:	000562c0 	call	562c <floor>
    489c:	000d883a 	mov	r6,zero
    48a0:	01d00834 	movhi	r7,16416
    48a4:	1009883a 	mov	r4,r2
    48a8:	180b883a 	mov	r5,r3
    48ac:	0006f8c0 	call	6f8c <__muldf3>
    48b0:	100d883a 	mov	r6,r2
    48b4:	180f883a 	mov	r7,r3
    48b8:	9809883a 	mov	r4,r19
    48bc:	880b883a 	mov	r5,r17
    48c0:	00077f80 	call	77f8 <__subdf3>
    48c4:	180b883a 	mov	r5,r3
    48c8:	1009883a 	mov	r4,r2
    48cc:	1827883a 	mov	r19,r3
    48d0:	1029883a 	mov	r20,r2
    48d4:	00080f40 	call	80f4 <__fixdfsi>
    48d8:	1009883a 	mov	r4,r2
    48dc:	1023883a 	mov	r17,r2
    48e0:	00081740 	call	8174 <__floatsidf>
    48e4:	a009883a 	mov	r4,r20
    48e8:	100d883a 	mov	r6,r2
    48ec:	180f883a 	mov	r7,r3
    48f0:	980b883a 	mov	r5,r19
    48f4:	00077f80 	call	77f8 <__subdf3>
    48f8:	d9009017 	ldw	r4,576(sp)
    48fc:	1013883a 	mov	r9,r2
    4900:	102b883a 	mov	r21,r2
    4904:	1811883a 	mov	r8,r3
    4908:	0100b30e 	bge	zero,r4,4bd8 <__kernel_rem_pio2+0x624>
    490c:	90bfffc4 	addi	r2,r18,-1
    4910:	1085883a 	add	r2,r2,r2
    4914:	1085883a 	add	r2,r2,r2
    4918:	d885883a 	add	r2,sp,r2
    491c:	10807804 	addi	r2,r2,480
    4920:	d9809017 	ldw	r6,576(sp)
    4924:	11400017 	ldw	r5,0(r2)
    4928:	01000604 	movi	r4,24
    492c:	2189c83a 	sub	r4,r4,r6
    4930:	290dd83a 	sra	r6,r5,r4
    4934:	d9c09017 	ldw	r7,576(sp)
    4938:	04c005c4 	movi	r19,23
    493c:	3108983a 	sll	r4,r6,r4
    4940:	99e7c83a 	sub	r19,r19,r7
    4944:	89a3883a 	add	r17,r17,r6
    4948:	2909c83a 	sub	r4,r5,r4
    494c:	24e7d83a 	sra	r19,r4,r19
    4950:	11000015 	stw	r4,0(r2)
    4954:	04c02a0e 	bge	zero,r19,4a00 <__kernel_rem_pio2+0x44c>
    4958:	8c400044 	addi	r17,r17,1
    495c:	0481570e 	bge	zero,r18,4ebc <__kernel_rem_pio2+0x908>
    4960:	02804034 	movhi	r10,256
    4964:	52bfffc4 	addi	r10,r10,-1
    4968:	d8807804 	addi	r2,sp,480
    496c:	000b883a 	mov	r5,zero
    4970:	0029883a 	mov	r20,zero
    4974:	01c04034 	movhi	r7,256
    4978:	00000706 	br	4998 <__kernel_rem_pio2+0x3e4>
    497c:	390dc83a 	sub	r6,r7,r4
    4980:	20000226 	beq	r4,zero,498c <__kernel_rem_pio2+0x3d8>
    4984:	11800015 	stw	r6,0(r2)
    4988:	05000044 	movi	r20,1
    498c:	29400044 	addi	r5,r5,1
    4990:	10800104 	addi	r2,r2,4
    4994:	2c80080e 	bge	r5,r18,49b8 <__kernel_rem_pio2+0x404>
    4998:	11000017 	ldw	r4,0(r2)
    499c:	a03ff726 	beq	r20,zero,497c <__alt_exception_stack_pointer+0xf800497c>
    49a0:	5109c83a 	sub	r4,r10,r4
    49a4:	11000015 	stw	r4,0(r2)
    49a8:	29400044 	addi	r5,r5,1
    49ac:	05000044 	movi	r20,1
    49b0:	10800104 	addi	r2,r2,4
    49b4:	2cbff816 	blt	r5,r18,4998 <__alt_exception_stack_pointer+0xf8004998>
    49b8:	d9009017 	ldw	r4,576(sp)
    49bc:	01000e0e 	bge	zero,r4,49f8 <__kernel_rem_pio2+0x444>
    49c0:	00800044 	movi	r2,1
    49c4:	20808d26 	beq	r4,r2,4bfc <__kernel_rem_pio2+0x648>
    49c8:	00800084 	movi	r2,2
    49cc:	20800a1e 	bne	r4,r2,49f8 <__kernel_rem_pio2+0x444>
    49d0:	90bfffc4 	addi	r2,r18,-1
    49d4:	1085883a 	add	r2,r2,r2
    49d8:	1085883a 	add	r2,r2,r2
    49dc:	d885883a 	add	r2,sp,r2
    49e0:	10807804 	addi	r2,r2,480
    49e4:	11400017 	ldw	r5,0(r2)
    49e8:	01001034 	movhi	r4,64
    49ec:	213fffc4 	addi	r4,r4,-1
    49f0:	2908703a 	and	r4,r5,r4
    49f4:	11000015 	stw	r4,0(r2)
    49f8:	00800084 	movi	r2,2
    49fc:	98805d26 	beq	r19,r2,4b74 <__kernel_rem_pio2+0x5c0>
    4a00:	400b883a 	mov	r5,r8
    4a04:	000d883a 	mov	r6,zero
    4a08:	000f883a 	mov	r7,zero
    4a0c:	a809883a 	mov	r4,r21
    4a10:	da009b15 	stw	r8,620(sp)
    4a14:	0006e280 	call	6e28 <__eqdf2>
    4a18:	da009b17 	ldw	r8,620(sp)
    4a1c:	10012b1e 	bne	r2,zero,4ecc <__kernel_rem_pio2+0x918>
    4a20:	da009417 	ldw	r8,592(sp)
    4a24:	917fffc4 	addi	r5,r18,-1
    4a28:	2a000e16 	blt	r5,r8,4a64 <__kernel_rem_pio2+0x4b0>
    4a2c:	00900034 	movhi	r2,16384
    4a30:	10bfffc4 	addi	r2,r2,-1
    4a34:	9085883a 	add	r2,r18,r2
    4a38:	1085883a 	add	r2,r2,r2
    4a3c:	d9809717 	ldw	r6,604(sp)
    4a40:	1085883a 	add	r2,r2,r2
    4a44:	d9007804 	addi	r4,sp,480
    4a48:	0007883a 	mov	r3,zero
    4a4c:	2085883a 	add	r2,r4,r2
    4a50:	11000017 	ldw	r4,0(r2)
    4a54:	10bfff04 	addi	r2,r2,-4
    4a58:	1906b03a 	or	r3,r3,r4
    4a5c:	11bffc1e 	bne	r2,r6,4a50 <__alt_exception_stack_pointer+0xf8004a50>
    4a60:	1800821e 	bne	r3,zero,4c6c <__kernel_rem_pio2+0x6b8>
    4a64:	da009817 	ldw	r8,608(sp)
    4a68:	40800017 	ldw	r2,0(r8)
    4a6c:	1001151e 	bne	r2,zero,4ec4 <__kernel_rem_pio2+0x910>
    4a70:	d8809617 	ldw	r2,600(sp)
    4a74:	05000044 	movi	r20,1
    4a78:	10bfff04 	addi	r2,r2,-4
    4a7c:	10c00117 	ldw	r3,4(r2)
    4a80:	a5000044 	addi	r20,r20,1
    4a84:	183ffc26 	beq	r3,zero,4a78 <__alt_exception_stack_pointer+0xf8004a78>
    4a88:	9529883a 	add	r20,r18,r20
    4a8c:	90800044 	addi	r2,r18,1
    4a90:	dd009115 	stw	r20,580(sp)
    4a94:	a0803216 	blt	r20,r2,4b60 <__kernel_rem_pio2+0x5ac>
    4a98:	da009317 	ldw	r8,588(sp)
    4a9c:	d8c09117 	ldw	r3,580(sp)
    4aa0:	44a3883a 	add	r17,r8,r18
    4aa4:	da009217 	ldw	r8,584(sp)
    4aa8:	882290fa 	slli	r17,r17,3
    4aac:	40a5883a 	add	r18,r8,r2
    4ab0:	da009517 	ldw	r8,596(sp)
    4ab4:	100490fa 	slli	r2,r2,3
    4ab8:	94a5883a 	add	r18,r18,r18
    4abc:	40eb883a 	add	r21,r8,r3
    4ac0:	da00a717 	ldw	r8,668(sp)
    4ac4:	ad6b883a 	add	r21,r21,r21
    4ac8:	94a5883a 	add	r18,r18,r18
    4acc:	ad6b883a 	add	r21,r21,r21
    4ad0:	d8c05004 	addi	r3,sp,320
    4ad4:	44a5883a 	add	r18,r8,r18
    4ad8:	1c63883a 	add	r17,r3,r17
    4adc:	d8a7883a 	add	r19,sp,r2
    4ae0:	456b883a 	add	r21,r8,r21
    4ae4:	91000017 	ldw	r4,0(r18)
    4ae8:	00081740 	call	8174 <__floatsidf>
    4aec:	da008d17 	ldw	r8,564(sp)
    4af0:	88800015 	stw	r2,0(r17)
    4af4:	88c00115 	stw	r3,4(r17)
    4af8:	40001b16 	blt	r8,zero,4b68 <__kernel_rem_pio2+0x5b4>
    4afc:	dd008e17 	ldw	r20,568(sp)
    4b00:	882d883a 	mov	r22,r17
    4b04:	002f883a 	mov	r23,zero
    4b08:	0039883a 	mov	fp,zero
    4b0c:	b1800017 	ldw	r6,0(r22)
    4b10:	b1c00117 	ldw	r7,4(r22)
    4b14:	a1000017 	ldw	r4,0(r20)
    4b18:	a1400117 	ldw	r5,4(r20)
    4b1c:	a5000204 	addi	r20,r20,8
    4b20:	b5bffe04 	addi	r22,r22,-8
    4b24:	0006f8c0 	call	6f8c <__muldf3>
    4b28:	b809883a 	mov	r4,r23
    4b2c:	e00b883a 	mov	r5,fp
    4b30:	100d883a 	mov	r6,r2
    4b34:	180f883a 	mov	r7,r3
    4b38:	0005bac0 	call	5bac <__adddf3>
    4b3c:	102f883a 	mov	r23,r2
    4b40:	1839883a 	mov	fp,r3
    4b44:	a43ff11e 	bne	r20,r16,4b0c <__alt_exception_stack_pointer+0xf8004b0c>
    4b48:	9dc00015 	stw	r23,0(r19)
    4b4c:	9f000115 	stw	fp,4(r19)
    4b50:	94800104 	addi	r18,r18,4
    4b54:	8c400204 	addi	r17,r17,8
    4b58:	9cc00204 	addi	r19,r19,8
    4b5c:	957fe11e 	bne	r18,r21,4ae4 <__alt_exception_stack_pointer+0xf8004ae4>
    4b60:	dc809117 	ldw	r18,580(sp)
    4b64:	003f0f06 	br	47a4 <__alt_exception_stack_pointer+0xf80047a4>
    4b68:	002f883a 	mov	r23,zero
    4b6c:	0039883a 	mov	fp,zero
    4b70:	003ff506 	br	4b48 <__alt_exception_stack_pointer+0xf8004b48>
    4b74:	480d883a 	mov	r6,r9
    4b78:	180f883a 	mov	r7,r3
    4b7c:	0009883a 	mov	r4,zero
    4b80:	014ffc34 	movhi	r5,16368
    4b84:	00077f80 	call	77f8 <__subdf3>
    4b88:	102b883a 	mov	r21,r2
    4b8c:	1811883a 	mov	r8,r3
    4b90:	a03f9b26 	beq	r20,zero,4a00 <__alt_exception_stack_pointer+0xf8004a00>
    4b94:	d9809017 	ldw	r6,576(sp)
    4b98:	0009883a 	mov	r4,zero
    4b9c:	014ffc34 	movhi	r5,16368
    4ba0:	d8c09b15 	stw	r3,620(sp)
    4ba4:	00058180 	call	5818 <scalbn>
    4ba8:	da009b17 	ldw	r8,620(sp)
    4bac:	a809883a 	mov	r4,r21
    4bb0:	100d883a 	mov	r6,r2
    4bb4:	400b883a 	mov	r5,r8
    4bb8:	180f883a 	mov	r7,r3
    4bbc:	00077f80 	call	77f8 <__subdf3>
    4bc0:	102b883a 	mov	r21,r2
    4bc4:	1811883a 	mov	r8,r3
    4bc8:	003f8d06 	br	4a00 <__alt_exception_stack_pointer+0xf8004a00>
    4bcc:	0005883a 	mov	r2,zero
    4bd0:	0007883a 	mov	r3,zero
    4bd4:	003eac06 	br	4688 <__alt_exception_stack_pointer+0xf8004688>
    4bd8:	d8809017 	ldw	r2,576(sp)
    4bdc:	1000121e 	bne	r2,zero,4c28 <__kernel_rem_pio2+0x674>
    4be0:	90bfffc4 	addi	r2,r18,-1
    4be4:	1085883a 	add	r2,r2,r2
    4be8:	1085883a 	add	r2,r2,r2
    4bec:	d885883a 	add	r2,sp,r2
    4bf0:	14c07817 	ldw	r19,480(r2)
    4bf4:	9827d5fa 	srai	r19,r19,23
    4bf8:	003f5606 	br	4954 <__alt_exception_stack_pointer+0xf8004954>
    4bfc:	90bfffc4 	addi	r2,r18,-1
    4c00:	1085883a 	add	r2,r2,r2
    4c04:	1085883a 	add	r2,r2,r2
    4c08:	d885883a 	add	r2,sp,r2
    4c0c:	10807804 	addi	r2,r2,480
    4c10:	11000017 	ldw	r4,0(r2)
    4c14:	01402034 	movhi	r5,128
    4c18:	297fffc4 	addi	r5,r5,-1
    4c1c:	2148703a 	and	r4,r4,r5
    4c20:	11000015 	stw	r4,0(r2)
    4c24:	003f7406 	br	49f8 <__alt_exception_stack_pointer+0xf80049f8>
    4c28:	4809883a 	mov	r4,r9
    4c2c:	180b883a 	mov	r5,r3
    4c30:	000d883a 	mov	r6,zero
    4c34:	01cff834 	movhi	r7,16352
    4c38:	d8c09a15 	stw	r3,616(sp)
    4c3c:	d8c09b15 	stw	r3,620(sp)
    4c40:	da409915 	stw	r9,612(sp)
    4c44:	0006eb00 	call	6eb0 <__gedf2>
    4c48:	d8c09a17 	ldw	r3,616(sp)
    4c4c:	da009b17 	ldw	r8,620(sp)
    4c50:	da409917 	ldw	r9,612(sp)
    4c54:	1000920e 	bge	r2,zero,4ea0 <__kernel_rem_pio2+0x8ec>
    4c58:	0027883a 	mov	r19,zero
    4c5c:	003f6806 	br	4a00 <__alt_exception_stack_pointer+0xf8004a00>
    4c60:	002d883a 	mov	r22,zero
    4c64:	002b883a 	mov	r21,zero
    4c68:	003eb006 	br	472c <__alt_exception_stack_pointer+0xf800472c>
    4c6c:	2945883a 	add	r2,r5,r5
    4c70:	da009017 	ldw	r8,576(sp)
    4c74:	1085883a 	add	r2,r2,r2
    4c78:	d885883a 	add	r2,sp,r2
    4c7c:	10807817 	ldw	r2,480(r2)
    4c80:	423ffa04 	addi	r8,r8,-24
    4c84:	dc409115 	stw	r17,580(sp)
    4c88:	dcc08d15 	stw	r19,564(sp)
    4c8c:	da009015 	stw	r8,576(sp)
    4c90:	dd809417 	ldw	r22,592(sp)
    4c94:	2823883a 	mov	r17,r5
    4c98:	10000e1e 	bne	r2,zero,4cd4 <__kernel_rem_pio2+0x720>
    4c9c:	00900034 	movhi	r2,16384
    4ca0:	10bfffc4 	addi	r2,r2,-1
    4ca4:	2885883a 	add	r2,r5,r2
    4ca8:	1085883a 	add	r2,r2,r2
    4cac:	d8c07804 	addi	r3,sp,480
    4cb0:	1085883a 	add	r2,r2,r2
    4cb4:	1885883a 	add	r2,r3,r2
    4cb8:	4007883a 	mov	r3,r8
    4cbc:	10bfff04 	addi	r2,r2,-4
    4cc0:	11000117 	ldw	r4,4(r2)
    4cc4:	8c7fffc4 	addi	r17,r17,-1
    4cc8:	18fffa04 	addi	r3,r3,-24
    4ccc:	203ffb26 	beq	r4,zero,4cbc <__alt_exception_stack_pointer+0xf8004cbc>
    4cd0:	d8c09015 	stw	r3,576(sp)
    4cd4:	d9809017 	ldw	r6,576(sp)
    4cd8:	0009883a 	mov	r4,zero
    4cdc:	014ffc34 	movhi	r5,16368
    4ce0:	00058180 	call	5818 <scalbn>
    4ce4:	1029883a 	mov	r20,r2
    4ce8:	182b883a 	mov	r21,r3
    4cec:	88018416 	blt	r17,zero,5300 <__kernel_rem_pio2+0xd4c>
    4cf0:	881090fa 	slli	r8,r17,3
    4cf4:	d8c07804 	addi	r3,sp,480
    4cf8:	da008e15 	stw	r8,568(sp)
    4cfc:	d8808e17 	ldw	r2,568(sp)
    4d00:	8c51883a 	add	r8,r17,r17
    4d04:	4211883a 	add	r8,r8,r8
    4d08:	d8a1883a 	add	r16,sp,r2
    4d0c:	1a25883a 	add	r18,r3,r8
    4d10:	da3ffe04 	addi	r8,sp,-8
    4d14:	da008c15 	stw	r8,560(sp)
    4d18:	8039883a 	mov	fp,r16
    4d1c:	91000017 	ldw	r4,0(r18)
    4d20:	e73ffe04 	addi	fp,fp,-8
    4d24:	94bfff04 	addi	r18,r18,-4
    4d28:	00081740 	call	8174 <__floatsidf>
    4d2c:	a00d883a 	mov	r6,r20
    4d30:	a80f883a 	mov	r7,r21
    4d34:	1009883a 	mov	r4,r2
    4d38:	180b883a 	mov	r5,r3
    4d3c:	0006f8c0 	call	6f8c <__muldf3>
    4d40:	a009883a 	mov	r4,r20
    4d44:	a80b883a 	mov	r5,r21
    4d48:	e0800215 	stw	r2,8(fp)
    4d4c:	e0c00315 	stw	r3,12(fp)
    4d50:	000d883a 	mov	r6,zero
    4d54:	01cf9c34 	movhi	r7,15984
    4d58:	0006f8c0 	call	6f8c <__muldf3>
    4d5c:	da008c17 	ldw	r8,560(sp)
    4d60:	1029883a 	mov	r20,r2
    4d64:	182b883a 	mov	r21,r3
    4d68:	e23fec1e 	bne	fp,r8,4d1c <__alt_exception_stack_pointer+0xf8004d1c>
    4d6c:	0029883a 	mov	r20,zero
    4d70:	b0004f16 	blt	r22,zero,4eb0 <__kernel_rem_pio2+0x8fc>
    4d74:	05400074 	movhi	r21,1
    4d78:	014ffe74 	movhi	r5,16377
    4d7c:	ad5f8404 	addi	r21,r21,32272
    4d80:	8027883a 	mov	r19,r16
    4d84:	01100034 	movhi	r4,16384
    4d88:	29487ec4 	addi	r5,r5,8699
    4d8c:	0039883a 	mov	fp,zero
    4d90:	002f883a 	mov	r23,zero
    4d94:	0025883a 	mov	r18,zero
    4d98:	00000506 	br	4db0 <__kernel_rem_pio2+0x7fc>
    4d9c:	9cc00204 	addi	r19,r19,8
    4da0:	a4800f16 	blt	r20,r18,4de0 <__kernel_rem_pio2+0x82c>
    4da4:	a9000017 	ldw	r4,0(r21)
    4da8:	a9400117 	ldw	r5,4(r21)
    4dac:	ad400204 	addi	r21,r21,8
    4db0:	99800017 	ldw	r6,0(r19)
    4db4:	99c00117 	ldw	r7,4(r19)
    4db8:	94800044 	addi	r18,r18,1
    4dbc:	0006f8c0 	call	6f8c <__muldf3>
    4dc0:	e009883a 	mov	r4,fp
    4dc4:	b80b883a 	mov	r5,r23
    4dc8:	100d883a 	mov	r6,r2
    4dcc:	180f883a 	mov	r7,r3
    4dd0:	0005bac0 	call	5bac <__adddf3>
    4dd4:	1039883a 	mov	fp,r2
    4dd8:	182f883a 	mov	r23,r3
    4ddc:	b4bfef0e 	bge	r22,r18,4d9c <__alt_exception_stack_pointer+0xf8004d9c>
    4de0:	a00490fa 	slli	r2,r20,3
    4de4:	da008c17 	ldw	r8,560(sp)
    4de8:	843ffe04 	addi	r16,r16,-8
    4dec:	d885883a 	add	r2,sp,r2
    4df0:	10802804 	addi	r2,r2,160
    4df4:	17000015 	stw	fp,0(r2)
    4df8:	15c00115 	stw	r23,4(r2)
    4dfc:	a5000044 	addi	r20,r20,1
    4e00:	823fdb1e 	bne	r16,r8,4d70 <__alt_exception_stack_pointer+0xf8004d70>
    4e04:	da00a617 	ldw	r8,664(sp)
    4e08:	00800084 	movi	r2,2
    4e0c:	12006616 	blt	r2,r8,4fa8 <__kernel_rem_pio2+0x9f4>
    4e10:	0200de16 	blt	zero,r8,518c <__kernel_rem_pio2+0xbd8>
    4e14:	4000141e 	bne	r8,zero,4e68 <__kernel_rem_pio2+0x8b4>
    4e18:	da008e17 	ldw	r8,568(sp)
    4e1c:	d8802804 	addi	r2,sp,160
    4e20:	0007883a 	mov	r3,zero
    4e24:	1225883a 	add	r18,r2,r8
    4e28:	043fffc4 	movi	r16,-1
    4e2c:	0005883a 	mov	r2,zero
    4e30:	91800017 	ldw	r6,0(r18)
    4e34:	91c00117 	ldw	r7,4(r18)
    4e38:	1009883a 	mov	r4,r2
    4e3c:	180b883a 	mov	r5,r3
    4e40:	8c7fffc4 	addi	r17,r17,-1
    4e44:	0005bac0 	call	5bac <__adddf3>
    4e48:	94bffe04 	addi	r18,r18,-8
    4e4c:	8c3ff81e 	bne	r17,r16,4e30 <__alt_exception_stack_pointer+0xf8004e30>
    4e50:	da008d17 	ldw	r8,564(sp)
    4e54:	40000126 	beq	r8,zero,4e5c <__kernel_rem_pio2+0x8a8>
    4e58:	18e0003c 	xorhi	r3,r3,32768
    4e5c:	da008f17 	ldw	r8,572(sp)
    4e60:	40800015 	stw	r2,0(r8)
    4e64:	40c00115 	stw	r3,4(r8)
    4e68:	da009117 	ldw	r8,580(sp)
    4e6c:	408001cc 	andi	r2,r8,7
    4e70:	dfc0a517 	ldw	ra,660(sp)
    4e74:	df00a417 	ldw	fp,656(sp)
    4e78:	ddc0a317 	ldw	r23,652(sp)
    4e7c:	dd80a217 	ldw	r22,648(sp)
    4e80:	dd40a117 	ldw	r21,644(sp)
    4e84:	dd00a017 	ldw	r20,640(sp)
    4e88:	dcc09f17 	ldw	r19,636(sp)
    4e8c:	dc809e17 	ldw	r18,632(sp)
    4e90:	dc409d17 	ldw	r17,628(sp)
    4e94:	dc009c17 	ldw	r16,624(sp)
    4e98:	dec0a604 	addi	sp,sp,664
    4e9c:	f800283a 	ret
    4ea0:	8c400044 	addi	r17,r17,1
    4ea4:	04810d0e 	bge	zero,r18,52dc <__kernel_rem_pio2+0xd28>
    4ea8:	04c00084 	movi	r19,2
    4eac:	003eac06 	br	4960 <__alt_exception_stack_pointer+0xf8004960>
    4eb0:	0039883a 	mov	fp,zero
    4eb4:	002f883a 	mov	r23,zero
    4eb8:	003fc906 	br	4de0 <__alt_exception_stack_pointer+0xf8004de0>
    4ebc:	0029883a 	mov	r20,zero
    4ec0:	003ebd06 	br	49b8 <__alt_exception_stack_pointer+0xf80049b8>
    4ec4:	05000044 	movi	r20,1
    4ec8:	003eef06 	br	4a88 <__alt_exception_stack_pointer+0xf8004a88>
    4ecc:	4029883a 	mov	r20,r8
    4ed0:	da009017 	ldw	r8,576(sp)
    4ed4:	a809883a 	mov	r4,r21
    4ed8:	a00b883a 	mov	r5,r20
    4edc:	020dc83a 	sub	r6,zero,r8
    4ee0:	dc409115 	stw	r17,580(sp)
    4ee4:	dd809417 	ldw	r22,592(sp)
    4ee8:	dcc08d15 	stw	r19,564(sp)
    4eec:	00058180 	call	5818 <scalbn>
    4ef0:	000d883a 	mov	r6,zero
    4ef4:	01d05c34 	movhi	r7,16752
    4ef8:	1009883a 	mov	r4,r2
    4efc:	180b883a 	mov	r5,r3
    4f00:	102b883a 	mov	r21,r2
    4f04:	1823883a 	mov	r17,r3
    4f08:	0006eb00 	call	6eb0 <__gedf2>
    4f0c:	1000e916 	blt	r2,zero,52b4 <__kernel_rem_pio2+0xd00>
    4f10:	000d883a 	mov	r6,zero
    4f14:	01cf9c34 	movhi	r7,15984
    4f18:	880b883a 	mov	r5,r17
    4f1c:	a809883a 	mov	r4,r21
    4f20:	0006f8c0 	call	6f8c <__muldf3>
    4f24:	180b883a 	mov	r5,r3
    4f28:	1009883a 	mov	r4,r2
    4f2c:	00080f40 	call	80f4 <__fixdfsi>
    4f30:	1029883a 	mov	r20,r2
    4f34:	9485883a 	add	r2,r18,r18
    4f38:	1085883a 	add	r2,r2,r2
    4f3c:	a009883a 	mov	r4,r20
    4f40:	d8a1883a 	add	r16,sp,r2
    4f44:	00081740 	call	8174 <__floatsidf>
    4f48:	000d883a 	mov	r6,zero
    4f4c:	01d05c34 	movhi	r7,16752
    4f50:	1009883a 	mov	r4,r2
    4f54:	180b883a 	mov	r5,r3
    4f58:	0006f8c0 	call	6f8c <__muldf3>
    4f5c:	880b883a 	mov	r5,r17
    4f60:	100d883a 	mov	r6,r2
    4f64:	180f883a 	mov	r7,r3
    4f68:	a809883a 	mov	r4,r21
    4f6c:	00077f80 	call	77f8 <__subdf3>
    4f70:	180b883a 	mov	r5,r3
    4f74:	1009883a 	mov	r4,r2
    4f78:	00080f40 	call	80f4 <__fixdfsi>
    4f7c:	da009017 	ldw	r8,576(sp)
    4f80:	94400044 	addi	r17,r18,1
    4f84:	8c47883a 	add	r3,r17,r17
    4f88:	84007804 	addi	r16,r16,480
    4f8c:	18c7883a 	add	r3,r3,r3
    4f90:	80800015 	stw	r2,0(r16)
    4f94:	d8c7883a 	add	r3,sp,r3
    4f98:	42000604 	addi	r8,r8,24
    4f9c:	da009015 	stw	r8,576(sp)
    4fa0:	1d007815 	stw	r20,480(r3)
    4fa4:	003f4b06 	br	4cd4 <__alt_exception_stack_pointer+0xf8004cd4>
    4fa8:	da00a617 	ldw	r8,664(sp)
    4fac:	008000c4 	movi	r2,3
    4fb0:	40bfad1e 	bne	r8,r2,4e68 <__alt_exception_stack_pointer+0xf8004e68>
    4fb4:	0440bc0e 	bge	zero,r17,52a8 <__kernel_rem_pio2+0xcf4>
    4fb8:	da008e17 	ldw	r8,568(sp)
    4fbc:	882090fa 	slli	r16,r17,3
    4fc0:	dd402804 	addi	r21,sp,160
    4fc4:	da05883a 	add	r2,sp,r8
    4fc8:	10802804 	addi	r2,r2,160
    4fcc:	15c00017 	ldw	r23,0(r2)
    4fd0:	15800117 	ldw	r22,4(r2)
    4fd4:	8029883a 	mov	r20,r16
    4fd8:	843ffe04 	addi	r16,r16,-8
    4fdc:	ac21883a 	add	r16,r21,r16
    4fe0:	ad29883a 	add	r20,r21,r20
    4fe4:	dac02604 	addi	r11,sp,152
    4fe8:	8811883a 	mov	r8,r17
    4fec:	84400017 	ldw	r17,0(r16)
    4ff0:	87000117 	ldw	fp,4(r16)
    4ff4:	b80d883a 	mov	r6,r23
    4ff8:	b00f883a 	mov	r7,r22
    4ffc:	8809883a 	mov	r4,r17
    5000:	e00b883a 	mov	r5,fp
    5004:	da009b15 	stw	r8,620(sp)
    5008:	dac09915 	stw	r11,612(sp)
    500c:	0005bac0 	call	5bac <__adddf3>
    5010:	100d883a 	mov	r6,r2
    5014:	180f883a 	mov	r7,r3
    5018:	8809883a 	mov	r4,r17
    501c:	e00b883a 	mov	r5,fp
    5020:	1027883a 	mov	r19,r2
    5024:	1825883a 	mov	r18,r3
    5028:	00077f80 	call	77f8 <__subdf3>
    502c:	b80d883a 	mov	r6,r23
    5030:	b00f883a 	mov	r7,r22
    5034:	1009883a 	mov	r4,r2
    5038:	180b883a 	mov	r5,r3
    503c:	0005bac0 	call	5bac <__adddf3>
    5040:	dac09917 	ldw	r11,612(sp)
    5044:	a0800015 	stw	r2,0(r20)
    5048:	a0c00115 	stw	r3,4(r20)
    504c:	84c00015 	stw	r19,0(r16)
    5050:	84800115 	stw	r18,4(r16)
    5054:	843ffe04 	addi	r16,r16,-8
    5058:	a53ffe04 	addi	r20,r20,-8
    505c:	982f883a 	mov	r23,r19
    5060:	902d883a 	mov	r22,r18
    5064:	da009b17 	ldw	r8,620(sp)
    5068:	5c3fe01e 	bne	r11,r16,4fec <__alt_exception_stack_pointer+0xf8004fec>
    506c:	00800044 	movi	r2,1
    5070:	12008d0e 	bge	r2,r8,52a8 <__kernel_rem_pio2+0xcf4>
    5074:	402090fa 	slli	r16,r8,3
    5078:	da008e17 	ldw	r8,568(sp)
    507c:	8023883a 	mov	r17,r16
    5080:	da05883a 	add	r2,sp,r8
    5084:	10802804 	addi	r2,r2,160
    5088:	15800017 	ldw	r22,0(r2)
    508c:	15000117 	ldw	r20,4(r2)
    5090:	ac63883a 	add	r17,r21,r17
    5094:	843ffe04 	addi	r16,r16,-8
    5098:	ac21883a 	add	r16,r21,r16
    509c:	8825883a 	mov	r18,r17
    50a0:	8811883a 	mov	r8,r17
    50a4:	84400017 	ldw	r17,0(r16)
    50a8:	87000117 	ldw	fp,4(r16)
    50ac:	b009883a 	mov	r4,r22
    50b0:	a00b883a 	mov	r5,r20
    50b4:	880d883a 	mov	r6,r17
    50b8:	e00f883a 	mov	r7,fp
    50bc:	da009b15 	stw	r8,620(sp)
    50c0:	0005bac0 	call	5bac <__adddf3>
    50c4:	100d883a 	mov	r6,r2
    50c8:	180f883a 	mov	r7,r3
    50cc:	8809883a 	mov	r4,r17
    50d0:	e00b883a 	mov	r5,fp
    50d4:	102f883a 	mov	r23,r2
    50d8:	1827883a 	mov	r19,r3
    50dc:	00077f80 	call	77f8 <__subdf3>
    50e0:	b00d883a 	mov	r6,r22
    50e4:	a00f883a 	mov	r7,r20
    50e8:	1009883a 	mov	r4,r2
    50ec:	180b883a 	mov	r5,r3
    50f0:	0005bac0 	call	5bac <__adddf3>
    50f4:	90800015 	stw	r2,0(r18)
    50f8:	90c00115 	stw	r3,4(r18)
    50fc:	85c00015 	stw	r23,0(r16)
    5100:	84c00115 	stw	r19,4(r16)
    5104:	843ffe04 	addi	r16,r16,-8
    5108:	94bffe04 	addi	r18,r18,-8
    510c:	b82d883a 	mov	r22,r23
    5110:	9829883a 	mov	r20,r19
    5114:	da009b17 	ldw	r8,620(sp)
    5118:	ac3fe21e 	bne	r21,r16,50a4 <__alt_exception_stack_pointer+0xf80050a4>
    511c:	4023883a 	mov	r17,r8
    5120:	dc002a04 	addi	r16,sp,168
    5124:	0005883a 	mov	r2,zero
    5128:	0007883a 	mov	r3,zero
    512c:	89800017 	ldw	r6,0(r17)
    5130:	89c00117 	ldw	r7,4(r17)
    5134:	1009883a 	mov	r4,r2
    5138:	8c7ffe04 	addi	r17,r17,-8
    513c:	180b883a 	mov	r5,r3
    5140:	0005bac0 	call	5bac <__adddf3>
    5144:	847ff91e 	bne	r16,r17,512c <__alt_exception_stack_pointer+0xf800512c>
    5148:	da008d17 	ldw	r8,564(sp)
    514c:	40004726 	beq	r8,zero,526c <__kernel_rem_pio2+0xcb8>
    5150:	d9002b17 	ldw	r4,172(sp)
    5154:	d9402917 	ldw	r5,164(sp)
    5158:	d9802a17 	ldw	r6,168(sp)
    515c:	da008f17 	ldw	r8,572(sp)
    5160:	d9c02817 	ldw	r7,160(sp)
    5164:	2960003c 	xorhi	r5,r5,32768
    5168:	2120003c 	xorhi	r4,r4,32768
    516c:	18e0003c 	xorhi	r3,r3,32768
    5170:	41c00015 	stw	r7,0(r8)
    5174:	41400115 	stw	r5,4(r8)
    5178:	41800215 	stw	r6,8(r8)
    517c:	41000315 	stw	r4,12(r8)
    5180:	40800415 	stw	r2,16(r8)
    5184:	40c00515 	stw	r3,20(r8)
    5188:	003f3706 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    518c:	da008e17 	ldw	r8,568(sp)
    5190:	d8802804 	addi	r2,sp,160
    5194:	dc002604 	addi	r16,sp,152
    5198:	1225883a 	add	r18,r2,r8
    519c:	0007883a 	mov	r3,zero
    51a0:	0005883a 	mov	r2,zero
    51a4:	91800017 	ldw	r6,0(r18)
    51a8:	91c00117 	ldw	r7,4(r18)
    51ac:	1009883a 	mov	r4,r2
    51b0:	94bffe04 	addi	r18,r18,-8
    51b4:	180b883a 	mov	r5,r3
    51b8:	0005bac0 	call	5bac <__adddf3>
    51bc:	943ff91e 	bne	r18,r16,51a4 <__alt_exception_stack_pointer+0xf80051a4>
    51c0:	da008d17 	ldw	r8,564(sp)
    51c4:	d9002817 	ldw	r4,160(sp)
    51c8:	d9402917 	ldw	r5,164(sp)
    51cc:	40001a26 	beq	r8,zero,5238 <__kernel_rem_pio2+0xc84>
    51d0:	da008f17 	ldw	r8,572(sp)
    51d4:	19a0003c 	xorhi	r6,r3,32768
    51d8:	180f883a 	mov	r7,r3
    51dc:	41800115 	stw	r6,4(r8)
    51e0:	40800015 	stw	r2,0(r8)
    51e4:	100d883a 	mov	r6,r2
    51e8:	00077f80 	call	77f8 <__subdf3>
    51ec:	04400c0e 	bge	zero,r17,5220 <__kernel_rem_pio2+0xc6c>
    51f0:	dc002a04 	addi	r16,sp,168
    51f4:	04800044 	movi	r18,1
    51f8:	81800017 	ldw	r6,0(r16)
    51fc:	81c00117 	ldw	r7,4(r16)
    5200:	1009883a 	mov	r4,r2
    5204:	180b883a 	mov	r5,r3
    5208:	94800044 	addi	r18,r18,1
    520c:	0005bac0 	call	5bac <__adddf3>
    5210:	84000204 	addi	r16,r16,8
    5214:	8cbff80e 	bge	r17,r18,51f8 <__alt_exception_stack_pointer+0xf80051f8>
    5218:	da008d17 	ldw	r8,564(sp)
    521c:	40004226 	beq	r8,zero,5328 <__kernel_rem_pio2+0xd74>
    5220:	da008f17 	ldw	r8,572(sp)
    5224:	1009883a 	mov	r4,r2
    5228:	18a0003c 	xorhi	r2,r3,32768
    522c:	41000215 	stw	r4,8(r8)
    5230:	40800315 	stw	r2,12(r8)
    5234:	003f0c06 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    5238:	da008f17 	ldw	r8,572(sp)
    523c:	100d883a 	mov	r6,r2
    5240:	180f883a 	mov	r7,r3
    5244:	40800015 	stw	r2,0(r8)
    5248:	40c00115 	stw	r3,4(r8)
    524c:	00077f80 	call	77f8 <__subdf3>
    5250:	047fe716 	blt	zero,r17,51f0 <__alt_exception_stack_pointer+0xf80051f0>
    5254:	da008f17 	ldw	r8,572(sp)
    5258:	1009883a 	mov	r4,r2
    525c:	1805883a 	mov	r2,r3
    5260:	41000215 	stw	r4,8(r8)
    5264:	40800315 	stw	r2,12(r8)
    5268:	003eff06 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    526c:	da008f17 	ldw	r8,572(sp)
    5270:	d9802817 	ldw	r6,160(sp)
    5274:	d9402a17 	ldw	r5,168(sp)
    5278:	d9002b17 	ldw	r4,172(sp)
    527c:	41800015 	stw	r6,0(r8)
    5280:	d9802917 	ldw	r6,164(sp)
    5284:	41400215 	stw	r5,8(r8)
    5288:	41000315 	stw	r4,12(r8)
    528c:	41800115 	stw	r6,4(r8)
    5290:	40800415 	stw	r2,16(r8)
    5294:	40c00515 	stw	r3,20(r8)
    5298:	003ef306 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    529c:	da00a617 	ldw	r8,664(sp)
    52a0:	008000c4 	movi	r2,3
    52a4:	40bef01e 	bne	r8,r2,4e68 <__alt_exception_stack_pointer+0xf8004e68>
    52a8:	0005883a 	mov	r2,zero
    52ac:	0007883a 	mov	r3,zero
    52b0:	003fa506 	br	5148 <__alt_exception_stack_pointer+0xf8005148>
    52b4:	9485883a 	add	r2,r18,r18
    52b8:	1085883a 	add	r2,r2,r2
    52bc:	d8a1883a 	add	r16,sp,r2
    52c0:	880b883a 	mov	r5,r17
    52c4:	a809883a 	mov	r4,r21
    52c8:	84007804 	addi	r16,r16,480
    52cc:	00080f40 	call	80f4 <__fixdfsi>
    52d0:	80800015 	stw	r2,0(r16)
    52d4:	9023883a 	mov	r17,r18
    52d8:	003e7e06 	br	4cd4 <__alt_exception_stack_pointer+0xf8004cd4>
    52dc:	a80d883a 	mov	r6,r21
    52e0:	400f883a 	mov	r7,r8
    52e4:	0009883a 	mov	r4,zero
    52e8:	014ffc34 	movhi	r5,16368
    52ec:	00077f80 	call	77f8 <__subdf3>
    52f0:	102b883a 	mov	r21,r2
    52f4:	1811883a 	mov	r8,r3
    52f8:	04c00084 	movi	r19,2
    52fc:	003dc006 	br	4a00 <__alt_exception_stack_pointer+0xf8004a00>
    5300:	da00a617 	ldw	r8,664(sp)
    5304:	00800084 	movi	r2,2
    5308:	123fe416 	blt	r2,r8,529c <__alt_exception_stack_pointer+0xf800529c>
    530c:	02000c16 	blt	zero,r8,5340 <__kernel_rem_pio2+0xd8c>
    5310:	403ed51e 	bne	r8,zero,4e68 <__alt_exception_stack_pointer+0xf8004e68>
    5314:	0005883a 	mov	r2,zero
    5318:	0007883a 	mov	r3,zero
    531c:	003ecc06 	br	4e50 <__alt_exception_stack_pointer+0xf8004e50>
    5320:	d8009215 	stw	zero,584(sp)
    5324:	003cc106 	br	462c <__alt_exception_stack_pointer+0xf800462c>
    5328:	da008f17 	ldw	r8,572(sp)
    532c:	1009883a 	mov	r4,r2
    5330:	1805883a 	mov	r2,r3
    5334:	41000215 	stw	r4,8(r8)
    5338:	40800315 	stw	r2,12(r8)
    533c:	003eca06 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    5340:	0005883a 	mov	r2,zero
    5344:	0007883a 	mov	r3,zero
    5348:	003f9d06 	br	51c0 <__alt_exception_stack_pointer+0xf80051c0>

0000534c <__kernel_sin>:
    534c:	00a00034 	movhi	r2,32768
    5350:	defff404 	addi	sp,sp,-48
    5354:	10bfffc4 	addi	r2,r2,-1
    5358:	00cf9034 	movhi	r3,15936
    535c:	ddc00915 	stw	r23,36(sp)
    5360:	dd800815 	stw	r22,32(sp)
    5364:	dc400315 	stw	r17,12(sp)
    5368:	dc000215 	stw	r16,8(sp)
    536c:	dfc00b15 	stw	ra,44(sp)
    5370:	df000a15 	stw	fp,40(sp)
    5374:	dd400715 	stw	r21,28(sp)
    5378:	dd000615 	stw	r20,24(sp)
    537c:	dcc00515 	stw	r19,20(sp)
    5380:	dc800415 	stw	r18,16(sp)
    5384:	2884703a 	and	r2,r5,r2
    5388:	18ffffc4 	addi	r3,r3,-1
    538c:	2821883a 	mov	r16,r5
    5390:	2023883a 	mov	r17,r4
    5394:	302f883a 	mov	r23,r6
    5398:	382d883a 	mov	r22,r7
    539c:	18800216 	blt	r3,r2,53a8 <__kernel_sin+0x5c>
    53a0:	00080f40 	call	80f4 <__fixdfsi>
    53a4:	10009926 	beq	r2,zero,560c <__kernel_sin+0x2c0>
    53a8:	880d883a 	mov	r6,r17
    53ac:	800f883a 	mov	r7,r16
    53b0:	8809883a 	mov	r4,r17
    53b4:	800b883a 	mov	r5,r16
    53b8:	0006f8c0 	call	6f8c <__muldf3>
    53bc:	100d883a 	mov	r6,r2
    53c0:	180f883a 	mov	r7,r3
    53c4:	8809883a 	mov	r4,r17
    53c8:	800b883a 	mov	r5,r16
    53cc:	1027883a 	mov	r19,r2
    53d0:	1825883a 	mov	r18,r3
    53d4:	0006f8c0 	call	6f8c <__muldf3>
    53d8:	0196b434 	movhi	r6,23248
    53dc:	01cf79b4 	movhi	r7,15846
    53e0:	31b55f04 	addi	r6,r6,-10884
    53e4:	39f64e84 	addi	r7,r7,-9926
    53e8:	9809883a 	mov	r4,r19
    53ec:	900b883a 	mov	r5,r18
    53f0:	102b883a 	mov	r21,r2
    53f4:	1829883a 	mov	r20,r3
    53f8:	0006f8c0 	call	6f8c <__muldf3>
    53fc:	01a28b34 	movhi	r6,35372
    5400:	01cf96f4 	movhi	r7,15963
    5404:	31a73ac4 	addi	r6,r6,-25365
    5408:	39f97984 	addi	r7,r7,-6682
    540c:	1009883a 	mov	r4,r2
    5410:	180b883a 	mov	r5,r3
    5414:	00077f80 	call	77f8 <__subdf3>
    5418:	980d883a 	mov	r6,r19
    541c:	900f883a 	mov	r7,r18
    5420:	1009883a 	mov	r4,r2
    5424:	180b883a 	mov	r5,r3
    5428:	0006f8c0 	call	6f8c <__muldf3>
    542c:	0195ecb4 	movhi	r6,22450
    5430:	01cfb1f4 	movhi	r7,16071
    5434:	31bf9f44 	addi	r6,r6,-387
    5438:	39c778c4 	addi	r7,r7,7651
    543c:	1009883a 	mov	r4,r2
    5440:	180b883a 	mov	r5,r3
    5444:	0005bac0 	call	5bac <__adddf3>
    5448:	980d883a 	mov	r6,r19
    544c:	900f883a 	mov	r7,r18
    5450:	1009883a 	mov	r4,r2
    5454:	180b883a 	mov	r5,r3
    5458:	0006f8c0 	call	6f8c <__muldf3>
    545c:	01867074 	movhi	r6,6593
    5460:	01cfcab4 	movhi	r7,16170
    5464:	31987544 	addi	r6,r6,25045
    5468:	39c06804 	addi	r7,r7,416
    546c:	1009883a 	mov	r4,r2
    5470:	180b883a 	mov	r5,r3
    5474:	00077f80 	call	77f8 <__subdf3>
    5478:	980d883a 	mov	r6,r19
    547c:	900f883a 	mov	r7,r18
    5480:	1009883a 	mov	r4,r2
    5484:	180b883a 	mov	r5,r3
    5488:	0006f8c0 	call	6f8c <__muldf3>
    548c:	01844474 	movhi	r6,4369
    5490:	01cfe074 	movhi	r7,16257
    5494:	31be2984 	addi	r6,r6,-1882
    5498:	39c44444 	addi	r7,r7,4369
    549c:	1009883a 	mov	r4,r2
    54a0:	180b883a 	mov	r5,r3
    54a4:	0005bac0 	call	5bac <__adddf3>
    54a8:	1011883a 	mov	r8,r2
    54ac:	d8800c17 	ldw	r2,48(sp)
    54b0:	1839883a 	mov	fp,r3
    54b4:	10003e26 	beq	r2,zero,55b0 <__kernel_sin+0x264>
    54b8:	000d883a 	mov	r6,zero
    54bc:	01cff834 	movhi	r7,16352
    54c0:	b809883a 	mov	r4,r23
    54c4:	b00b883a 	mov	r5,r22
    54c8:	da000015 	stw	r8,0(sp)
    54cc:	0006f8c0 	call	6f8c <__muldf3>
    54d0:	da000017 	ldw	r8,0(sp)
    54d4:	e00f883a 	mov	r7,fp
    54d8:	a809883a 	mov	r4,r21
    54dc:	400d883a 	mov	r6,r8
    54e0:	a00b883a 	mov	r5,r20
    54e4:	d8c00115 	stw	r3,4(sp)
    54e8:	d8800015 	stw	r2,0(sp)
    54ec:	0006f8c0 	call	6f8c <__muldf3>
    54f0:	da800017 	ldw	r10,0(sp)
    54f4:	da400117 	ldw	r9,4(sp)
    54f8:	100d883a 	mov	r6,r2
    54fc:	5009883a 	mov	r4,r10
    5500:	480b883a 	mov	r5,r9
    5504:	180f883a 	mov	r7,r3
    5508:	00077f80 	call	77f8 <__subdf3>
    550c:	980d883a 	mov	r6,r19
    5510:	900f883a 	mov	r7,r18
    5514:	1009883a 	mov	r4,r2
    5518:	180b883a 	mov	r5,r3
    551c:	0006f8c0 	call	6f8c <__muldf3>
    5520:	b80d883a 	mov	r6,r23
    5524:	b00f883a 	mov	r7,r22
    5528:	1009883a 	mov	r4,r2
    552c:	180b883a 	mov	r5,r3
    5530:	00077f80 	call	77f8 <__subdf3>
    5534:	01955574 	movhi	r6,21845
    5538:	01cff174 	movhi	r7,16325
    553c:	31955244 	addi	r6,r6,21833
    5540:	39d55544 	addi	r7,r7,21845
    5544:	a809883a 	mov	r4,r21
    5548:	a00b883a 	mov	r5,r20
    554c:	1027883a 	mov	r19,r2
    5550:	1825883a 	mov	r18,r3
    5554:	0006f8c0 	call	6f8c <__muldf3>
    5558:	100d883a 	mov	r6,r2
    555c:	180f883a 	mov	r7,r3
    5560:	9809883a 	mov	r4,r19
    5564:	900b883a 	mov	r5,r18
    5568:	0005bac0 	call	5bac <__adddf3>
    556c:	100d883a 	mov	r6,r2
    5570:	180f883a 	mov	r7,r3
    5574:	8809883a 	mov	r4,r17
    5578:	800b883a 	mov	r5,r16
    557c:	00077f80 	call	77f8 <__subdf3>
    5580:	dfc00b17 	ldw	ra,44(sp)
    5584:	df000a17 	ldw	fp,40(sp)
    5588:	ddc00917 	ldw	r23,36(sp)
    558c:	dd800817 	ldw	r22,32(sp)
    5590:	dd400717 	ldw	r21,28(sp)
    5594:	dd000617 	ldw	r20,24(sp)
    5598:	dcc00517 	ldw	r19,20(sp)
    559c:	dc800417 	ldw	r18,16(sp)
    55a0:	dc400317 	ldw	r17,12(sp)
    55a4:	dc000217 	ldw	r16,8(sp)
    55a8:	dec00c04 	addi	sp,sp,48
    55ac:	f800283a 	ret
    55b0:	400d883a 	mov	r6,r8
    55b4:	9809883a 	mov	r4,r19
    55b8:	900b883a 	mov	r5,r18
    55bc:	180f883a 	mov	r7,r3
    55c0:	0006f8c0 	call	6f8c <__muldf3>
    55c4:	01955574 	movhi	r6,21845
    55c8:	01cff174 	movhi	r7,16325
    55cc:	31955244 	addi	r6,r6,21833
    55d0:	39d55544 	addi	r7,r7,21845
    55d4:	1009883a 	mov	r4,r2
    55d8:	180b883a 	mov	r5,r3
    55dc:	00077f80 	call	77f8 <__subdf3>
    55e0:	a80d883a 	mov	r6,r21
    55e4:	a00f883a 	mov	r7,r20
    55e8:	1009883a 	mov	r4,r2
    55ec:	180b883a 	mov	r5,r3
    55f0:	0006f8c0 	call	6f8c <__muldf3>
    55f4:	880d883a 	mov	r6,r17
    55f8:	800f883a 	mov	r7,r16
    55fc:	1009883a 	mov	r4,r2
    5600:	180b883a 	mov	r5,r3
    5604:	0005bac0 	call	5bac <__adddf3>
    5608:	003fdd06 	br	5580 <__alt_exception_stack_pointer+0xf8005580>
    560c:	8805883a 	mov	r2,r17
    5610:	8007883a 	mov	r3,r16
    5614:	003fda06 	br	5580 <__alt_exception_stack_pointer+0xf8005580>

00005618 <fabs>:
    5618:	00e00034 	movhi	r3,32768
    561c:	18ffffc4 	addi	r3,r3,-1
    5620:	2005883a 	mov	r2,r4
    5624:	28c6703a 	and	r3,r5,r3
    5628:	f800283a 	ret

0000562c <floor>:
    562c:	2811d53a 	srai	r8,r5,20
    5630:	defffa04 	addi	sp,sp,-24
    5634:	dcc00315 	stw	r19,12(sp)
    5638:	4201ffcc 	andi	r8,r8,2047
    563c:	dc800215 	stw	r18,8(sp)
    5640:	dc400115 	stw	r17,4(sp)
    5644:	dc000015 	stw	r16,0(sp)
    5648:	dfc00515 	stw	ra,20(sp)
    564c:	dd000415 	stw	r20,16(sp)
    5650:	44bf0044 	addi	r18,r8,-1023
    5654:	018004c4 	movi	r6,19
    5658:	2821883a 	mov	r16,r5
    565c:	2005883a 	mov	r2,r4
    5660:	280f883a 	mov	r7,r5
    5664:	2827883a 	mov	r19,r5
    5668:	2023883a 	mov	r17,r4
    566c:	34801916 	blt	r6,r18,56d4 <floor+0xa8>
    5670:	90003c16 	blt	r18,zero,5764 <floor+0x138>
    5674:	05000434 	movhi	r20,16
    5678:	a53fffc4 	addi	r20,r20,-1
    567c:	a4a9d83a 	sra	r20,r20,r18
    5680:	2d0c703a 	and	r6,r5,r20
    5684:	310cb03a 	or	r6,r6,r4
    5688:	30001626 	beq	r6,zero,56e4 <floor+0xb8>
    568c:	01a20034 	movhi	r6,34816
    5690:	01df8e34 	movhi	r7,32312
    5694:	319d6704 	addi	r6,r6,30108
    5698:	39f90f04 	addi	r7,r7,-7108
    569c:	0005bac0 	call	5bac <__adddf3>
    56a0:	000d883a 	mov	r6,zero
    56a4:	000f883a 	mov	r7,zero
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	0006eb00 	call	6eb0 <__gedf2>
    56b4:	0080040e 	bge	zero,r2,56c8 <floor+0x9c>
    56b8:	80003c16 	blt	r16,zero,57ac <floor+0x180>
    56bc:	0520303a 	nor	r16,zero,r20
    56c0:	84e0703a 	and	r16,r16,r19
    56c4:	0023883a 	mov	r17,zero
    56c8:	8805883a 	mov	r2,r17
    56cc:	8007883a 	mov	r3,r16
    56d0:	00000506 	br	56e8 <floor+0xbc>
    56d4:	01800cc4 	movi	r6,51
    56d8:	34800b0e 	bge	r6,r18,5708 <floor+0xdc>
    56dc:	01810004 	movi	r6,1024
    56e0:	91802f26 	beq	r18,r6,57a0 <floor+0x174>
    56e4:	3807883a 	mov	r3,r7
    56e8:	dfc00517 	ldw	ra,20(sp)
    56ec:	dd000417 	ldw	r20,16(sp)
    56f0:	dcc00317 	ldw	r19,12(sp)
    56f4:	dc800217 	ldw	r18,8(sp)
    56f8:	dc400117 	ldw	r17,4(sp)
    56fc:	dc000017 	ldw	r16,0(sp)
    5700:	dec00604 	addi	sp,sp,24
    5704:	f800283a 	ret
    5708:	423efb44 	addi	r8,r8,-1043
    570c:	053fffc4 	movi	r20,-1
    5710:	a228d83a 	srl	r20,r20,r8
    5714:	250c703a 	and	r6,r4,r20
    5718:	303ff226 	beq	r6,zero,56e4 <__alt_exception_stack_pointer+0xf80056e4>
    571c:	01a20034 	movhi	r6,34816
    5720:	01df8e34 	movhi	r7,32312
    5724:	319d6704 	addi	r6,r6,30108
    5728:	39f90f04 	addi	r7,r7,-7108
    572c:	0005bac0 	call	5bac <__adddf3>
    5730:	000d883a 	mov	r6,zero
    5734:	000f883a 	mov	r7,zero
    5738:	1009883a 	mov	r4,r2
    573c:	180b883a 	mov	r5,r3
    5740:	0006eb00 	call	6eb0 <__gedf2>
    5744:	00bfe00e 	bge	zero,r2,56c8 <__alt_exception_stack_pointer+0xf80056c8>
    5748:	80001c16 	blt	r16,zero,57bc <floor+0x190>
    574c:	0510303a 	nor	r8,zero,r20
    5750:	9821883a 	mov	r16,r19
    5754:	8a22703a 	and	r17,r17,r8
    5758:	8805883a 	mov	r2,r17
    575c:	8007883a 	mov	r3,r16
    5760:	003fe106 	br	56e8 <__alt_exception_stack_pointer+0xf80056e8>
    5764:	01a20034 	movhi	r6,34816
    5768:	01df8e34 	movhi	r7,32312
    576c:	319d6704 	addi	r6,r6,30108
    5770:	39f90f04 	addi	r7,r7,-7108
    5774:	0005bac0 	call	5bac <__adddf3>
    5778:	000d883a 	mov	r6,zero
    577c:	000f883a 	mov	r7,zero
    5780:	1009883a 	mov	r4,r2
    5784:	180b883a 	mov	r5,r3
    5788:	0006eb00 	call	6eb0 <__gedf2>
    578c:	00bfce0e 	bge	zero,r2,56c8 <__alt_exception_stack_pointer+0xf80056c8>
    5790:	80001516 	blt	r16,zero,57e8 <floor+0x1bc>
    5794:	0023883a 	mov	r17,zero
    5798:	0021883a 	mov	r16,zero
    579c:	003fca06 	br	56c8 <__alt_exception_stack_pointer+0xf80056c8>
    57a0:	200d883a 	mov	r6,r4
    57a4:	0005bac0 	call	5bac <__adddf3>
    57a8:	003fcf06 	br	56e8 <__alt_exception_stack_pointer+0xf80056e8>
    57ac:	00800434 	movhi	r2,16
    57b0:	14a5d83a 	sra	r18,r2,r18
    57b4:	84a7883a 	add	r19,r16,r18
    57b8:	003fc006 	br	56bc <__alt_exception_stack_pointer+0xf80056bc>
    57bc:	00800504 	movi	r2,20
    57c0:	90801326 	beq	r18,r2,5810 <floor+0x1e4>
    57c4:	00800d04 	movi	r2,52
    57c8:	14a5c83a 	sub	r18,r2,r18
    57cc:	00800044 	movi	r2,1
    57d0:	1484983a 	sll	r2,r2,r18
    57d4:	1445883a 	add	r2,r2,r17
    57d8:	14400b2e 	bgeu	r2,r17,5808 <floor+0x1dc>
    57dc:	84c00044 	addi	r19,r16,1
    57e0:	1023883a 	mov	r17,r2
    57e4:	003fd906 	br	574c <__alt_exception_stack_pointer+0xf800574c>
    57e8:	00a00034 	movhi	r2,32768
    57ec:	10bfffc4 	addi	r2,r2,-1
    57f0:	8084703a 	and	r2,r16,r2
    57f4:	1462b03a 	or	r17,r2,r17
    57f8:	883fb326 	beq	r17,zero,56c8 <__alt_exception_stack_pointer+0xf80056c8>
    57fc:	0023883a 	mov	r17,zero
    5800:	042ffc34 	movhi	r16,49136
    5804:	003fb006 	br	56c8 <__alt_exception_stack_pointer+0xf80056c8>
    5808:	1023883a 	mov	r17,r2
    580c:	003fcf06 	br	574c <__alt_exception_stack_pointer+0xf800574c>
    5810:	84c00044 	addi	r19,r16,1
    5814:	003fcd06 	br	574c <__alt_exception_stack_pointer+0xf800574c>

00005818 <scalbn>:
    5818:	2a1ffc2c 	andhi	r8,r5,32752
    581c:	4011d53a 	srai	r8,r8,20
    5820:	defffe04 	addi	sp,sp,-8
    5824:	dc000015 	stw	r16,0(sp)
    5828:	dfc00115 	stw	ra,4(sp)
    582c:	280f883a 	mov	r7,r5
    5830:	2015883a 	mov	r10,r4
    5834:	3021883a 	mov	r16,r6
    5838:	40001e1e 	bne	r8,zero,58b4 <scalbn+0x9c>
    583c:	00a00034 	movhi	r2,32768
    5840:	10bfffc4 	addi	r2,r2,-1
    5844:	2884703a 	and	r2,r5,r2
    5848:	1104b03a 	or	r2,r2,r4
    584c:	10002226 	beq	r2,zero,58d8 <scalbn+0xc0>
    5850:	01d0d434 	movhi	r7,17232
    5854:	000d883a 	mov	r6,zero
    5858:	0006f8c0 	call	6f8c <__muldf3>
    585c:	013ffff4 	movhi	r4,65535
    5860:	210f2c04 	addi	r4,r4,15536
    5864:	1015883a 	mov	r10,r2
    5868:	180f883a 	mov	r7,r3
    586c:	81002a16 	blt	r16,r4,5918 <scalbn+0x100>
    5870:	191ffc2c 	andhi	r4,r3,32752
    5874:	2009d53a 	srai	r4,r4,20
    5878:	223ff284 	addi	r8,r4,-54
    587c:	8211883a 	add	r8,r16,r8
    5880:	0081ff84 	movi	r2,2046
    5884:	12002f16 	blt	r2,r8,5944 <scalbn+0x12c>
    5888:	0200190e 	bge	zero,r8,58f0 <scalbn+0xd8>
    588c:	4010953a 	slli	r8,r8,20
    5890:	01600434 	movhi	r5,32784
    5894:	297fffc4 	addi	r5,r5,-1
    5898:	194e703a 	and	r7,r3,r5
    589c:	5005883a 	mov	r2,r10
    58a0:	3a06b03a 	or	r3,r7,r8
    58a4:	dfc00117 	ldw	ra,4(sp)
    58a8:	dc000017 	ldw	r16,0(sp)
    58ac:	dec00204 	addi	sp,sp,8
    58b0:	f800283a 	ret
    58b4:	0081ffc4 	movi	r2,2047
    58b8:	2807883a 	mov	r3,r5
    58bc:	40bfef1e 	bne	r8,r2,587c <__alt_exception_stack_pointer+0xf800587c>
    58c0:	200d883a 	mov	r6,r4
    58c4:	0005bac0 	call	5bac <__adddf3>
    58c8:	dfc00117 	ldw	ra,4(sp)
    58cc:	dc000017 	ldw	r16,0(sp)
    58d0:	dec00204 	addi	sp,sp,8
    58d4:	f800283a 	ret
    58d8:	2005883a 	mov	r2,r4
    58dc:	2807883a 	mov	r3,r5
    58e0:	dfc00117 	ldw	ra,4(sp)
    58e4:	dc000017 	ldw	r16,0(sp)
    58e8:	dec00204 	addi	sp,sp,8
    58ec:	f800283a 	ret
    58f0:	00bff2c4 	movi	r2,-53
    58f4:	4080240e 	bge	r8,r2,5988 <scalbn+0x170>
    58f8:	00b0d414 	movui	r2,50000
    58fc:	14001116 	blt	r2,r16,5944 <scalbn+0x12c>
    5900:	0130be74 	movhi	r4,49913
    5904:	01406974 	movhi	r5,421
    5908:	213cd644 	addi	r4,r4,-3239
    590c:	295b87c4 	addi	r5,r5,28191
    5910:	500d883a 	mov	r6,r10
    5914:	00059b40 	call	59b4 <copysign>
    5918:	01b0be74 	movhi	r6,49913
    591c:	01c06974 	movhi	r7,421
    5920:	31bcd644 	addi	r6,r6,-3239
    5924:	39db87c4 	addi	r7,r7,28191
    5928:	1009883a 	mov	r4,r2
    592c:	180b883a 	mov	r5,r3
    5930:	0006f8c0 	call	6f8c <__muldf3>
    5934:	dfc00117 	ldw	ra,4(sp)
    5938:	dc000017 	ldw	r16,0(sp)
    593c:	dec00204 	addi	sp,sp,8
    5940:	f800283a 	ret
    5944:	01220034 	movhi	r4,34816
    5948:	015f8e34 	movhi	r5,32312
    594c:	500d883a 	mov	r6,r10
    5950:	211d6704 	addi	r4,r4,30108
    5954:	29790f04 	addi	r5,r5,-7108
    5958:	00059b40 	call	59b4 <copysign>
    595c:	01a20034 	movhi	r6,34816
    5960:	01df8e34 	movhi	r7,32312
    5964:	319d6704 	addi	r6,r6,30108
    5968:	39f90f04 	addi	r7,r7,-7108
    596c:	1009883a 	mov	r4,r2
    5970:	180b883a 	mov	r5,r3
    5974:	0006f8c0 	call	6f8c <__muldf3>
    5978:	dfc00117 	ldw	ra,4(sp)
    597c:	dc000017 	ldw	r16,0(sp)
    5980:	dec00204 	addi	sp,sp,8
    5984:	f800283a 	ret
    5988:	42000d84 	addi	r8,r8,54
    598c:	4012953a 	slli	r9,r8,20
    5990:	01e00434 	movhi	r7,32784
    5994:	39ffffc4 	addi	r7,r7,-1
    5998:	19ca703a 	and	r5,r3,r7
    599c:	000d883a 	mov	r6,zero
    59a0:	01cf2434 	movhi	r7,15504
    59a4:	5009883a 	mov	r4,r10
    59a8:	494ab03a 	or	r5,r9,r5
    59ac:	0006f8c0 	call	6f8c <__muldf3>
    59b0:	003fbc06 	br	58a4 <__alt_exception_stack_pointer+0xf80058a4>

000059b4 <copysign>:
    59b4:	2005883a 	mov	r2,r4
    59b8:	01200034 	movhi	r4,32768
    59bc:	213fffc4 	addi	r4,r4,-1
    59c0:	38e0002c 	andhi	r3,r7,32768
    59c4:	290a703a 	and	r5,r5,r4
    59c8:	28c6b03a 	or	r3,r5,r3
    59cc:	f800283a 	ret

000059d0 <__divsi3>:
    59d0:	20001b16 	blt	r4,zero,5a40 <__divsi3+0x70>
    59d4:	000f883a 	mov	r7,zero
    59d8:	28001616 	blt	r5,zero,5a34 <__divsi3+0x64>
    59dc:	200d883a 	mov	r6,r4
    59e0:	29001a2e 	bgeu	r5,r4,5a4c <__divsi3+0x7c>
    59e4:	00800804 	movi	r2,32
    59e8:	00c00044 	movi	r3,1
    59ec:	00000106 	br	59f4 <__divsi3+0x24>
    59f0:	10000d26 	beq	r2,zero,5a28 <__divsi3+0x58>
    59f4:	294b883a 	add	r5,r5,r5
    59f8:	10bfffc4 	addi	r2,r2,-1
    59fc:	18c7883a 	add	r3,r3,r3
    5a00:	293ffb36 	bltu	r5,r4,59f0 <__alt_exception_stack_pointer+0xf80059f0>
    5a04:	0005883a 	mov	r2,zero
    5a08:	18000726 	beq	r3,zero,5a28 <__divsi3+0x58>
    5a0c:	0005883a 	mov	r2,zero
    5a10:	31400236 	bltu	r6,r5,5a1c <__divsi3+0x4c>
    5a14:	314dc83a 	sub	r6,r6,r5
    5a18:	10c4b03a 	or	r2,r2,r3
    5a1c:	1806d07a 	srli	r3,r3,1
    5a20:	280ad07a 	srli	r5,r5,1
    5a24:	183ffa1e 	bne	r3,zero,5a10 <__alt_exception_stack_pointer+0xf8005a10>
    5a28:	38000126 	beq	r7,zero,5a30 <__divsi3+0x60>
    5a2c:	0085c83a 	sub	r2,zero,r2
    5a30:	f800283a 	ret
    5a34:	014bc83a 	sub	r5,zero,r5
    5a38:	39c0005c 	xori	r7,r7,1
    5a3c:	003fe706 	br	59dc <__alt_exception_stack_pointer+0xf80059dc>
    5a40:	0109c83a 	sub	r4,zero,r4
    5a44:	01c00044 	movi	r7,1
    5a48:	003fe306 	br	59d8 <__alt_exception_stack_pointer+0xf80059d8>
    5a4c:	00c00044 	movi	r3,1
    5a50:	003fee06 	br	5a0c <__alt_exception_stack_pointer+0xf8005a0c>

00005a54 <__modsi3>:
    5a54:	20001716 	blt	r4,zero,5ab4 <__modsi3+0x60>
    5a58:	000f883a 	mov	r7,zero
    5a5c:	2005883a 	mov	r2,r4
    5a60:	28001216 	blt	r5,zero,5aac <__modsi3+0x58>
    5a64:	2900162e 	bgeu	r5,r4,5ac0 <__modsi3+0x6c>
    5a68:	01800804 	movi	r6,32
    5a6c:	00c00044 	movi	r3,1
    5a70:	00000106 	br	5a78 <__modsi3+0x24>
    5a74:	30000a26 	beq	r6,zero,5aa0 <__modsi3+0x4c>
    5a78:	294b883a 	add	r5,r5,r5
    5a7c:	31bfffc4 	addi	r6,r6,-1
    5a80:	18c7883a 	add	r3,r3,r3
    5a84:	293ffb36 	bltu	r5,r4,5a74 <__alt_exception_stack_pointer+0xf8005a74>
    5a88:	18000526 	beq	r3,zero,5aa0 <__modsi3+0x4c>
    5a8c:	1806d07a 	srli	r3,r3,1
    5a90:	11400136 	bltu	r2,r5,5a98 <__modsi3+0x44>
    5a94:	1145c83a 	sub	r2,r2,r5
    5a98:	280ad07a 	srli	r5,r5,1
    5a9c:	183ffb1e 	bne	r3,zero,5a8c <__alt_exception_stack_pointer+0xf8005a8c>
    5aa0:	38000126 	beq	r7,zero,5aa8 <__modsi3+0x54>
    5aa4:	0085c83a 	sub	r2,zero,r2
    5aa8:	f800283a 	ret
    5aac:	014bc83a 	sub	r5,zero,r5
    5ab0:	003fec06 	br	5a64 <__alt_exception_stack_pointer+0xf8005a64>
    5ab4:	0109c83a 	sub	r4,zero,r4
    5ab8:	01c00044 	movi	r7,1
    5abc:	003fe706 	br	5a5c <__alt_exception_stack_pointer+0xf8005a5c>
    5ac0:	00c00044 	movi	r3,1
    5ac4:	003ff106 	br	5a8c <__alt_exception_stack_pointer+0xf8005a8c>

00005ac8 <__udivsi3>:
    5ac8:	200d883a 	mov	r6,r4
    5acc:	2900152e 	bgeu	r5,r4,5b24 <__udivsi3+0x5c>
    5ad0:	28001416 	blt	r5,zero,5b24 <__udivsi3+0x5c>
    5ad4:	00800804 	movi	r2,32
    5ad8:	00c00044 	movi	r3,1
    5adc:	00000206 	br	5ae8 <__udivsi3+0x20>
    5ae0:	10000e26 	beq	r2,zero,5b1c <__udivsi3+0x54>
    5ae4:	28000516 	blt	r5,zero,5afc <__udivsi3+0x34>
    5ae8:	294b883a 	add	r5,r5,r5
    5aec:	10bfffc4 	addi	r2,r2,-1
    5af0:	18c7883a 	add	r3,r3,r3
    5af4:	293ffa36 	bltu	r5,r4,5ae0 <__alt_exception_stack_pointer+0xf8005ae0>
    5af8:	18000826 	beq	r3,zero,5b1c <__udivsi3+0x54>
    5afc:	0005883a 	mov	r2,zero
    5b00:	31400236 	bltu	r6,r5,5b0c <__udivsi3+0x44>
    5b04:	314dc83a 	sub	r6,r6,r5
    5b08:	10c4b03a 	or	r2,r2,r3
    5b0c:	1806d07a 	srli	r3,r3,1
    5b10:	280ad07a 	srli	r5,r5,1
    5b14:	183ffa1e 	bne	r3,zero,5b00 <__alt_exception_stack_pointer+0xf8005b00>
    5b18:	f800283a 	ret
    5b1c:	0005883a 	mov	r2,zero
    5b20:	f800283a 	ret
    5b24:	00c00044 	movi	r3,1
    5b28:	003ff406 	br	5afc <__alt_exception_stack_pointer+0xf8005afc>

00005b2c <__umodsi3>:
    5b2c:	2005883a 	mov	r2,r4
    5b30:	2900122e 	bgeu	r5,r4,5b7c <__umodsi3+0x50>
    5b34:	28001116 	blt	r5,zero,5b7c <__umodsi3+0x50>
    5b38:	01800804 	movi	r6,32
    5b3c:	00c00044 	movi	r3,1
    5b40:	00000206 	br	5b4c <__umodsi3+0x20>
    5b44:	30000c26 	beq	r6,zero,5b78 <__umodsi3+0x4c>
    5b48:	28000516 	blt	r5,zero,5b60 <__umodsi3+0x34>
    5b4c:	294b883a 	add	r5,r5,r5
    5b50:	31bfffc4 	addi	r6,r6,-1
    5b54:	18c7883a 	add	r3,r3,r3
    5b58:	293ffa36 	bltu	r5,r4,5b44 <__alt_exception_stack_pointer+0xf8005b44>
    5b5c:	18000626 	beq	r3,zero,5b78 <__umodsi3+0x4c>
    5b60:	1806d07a 	srli	r3,r3,1
    5b64:	11400136 	bltu	r2,r5,5b6c <__umodsi3+0x40>
    5b68:	1145c83a 	sub	r2,r2,r5
    5b6c:	280ad07a 	srli	r5,r5,1
    5b70:	183ffb1e 	bne	r3,zero,5b60 <__alt_exception_stack_pointer+0xf8005b60>
    5b74:	f800283a 	ret
    5b78:	f800283a 	ret
    5b7c:	00c00044 	movi	r3,1
    5b80:	003ff706 	br	5b60 <__alt_exception_stack_pointer+0xf8005b60>

00005b84 <__mulsi3>:
    5b84:	0005883a 	mov	r2,zero
    5b88:	20000726 	beq	r4,zero,5ba8 <__mulsi3+0x24>
    5b8c:	20c0004c 	andi	r3,r4,1
    5b90:	2008d07a 	srli	r4,r4,1
    5b94:	18000126 	beq	r3,zero,5b9c <__mulsi3+0x18>
    5b98:	1145883a 	add	r2,r2,r5
    5b9c:	294b883a 	add	r5,r5,r5
    5ba0:	203ffa1e 	bne	r4,zero,5b8c <__alt_exception_stack_pointer+0xf8005b8c>
    5ba4:	f800283a 	ret
    5ba8:	f800283a 	ret

00005bac <__adddf3>:
    5bac:	02c00434 	movhi	r11,16
    5bb0:	5affffc4 	addi	r11,r11,-1
    5bb4:	2806d7fa 	srli	r3,r5,31
    5bb8:	2ad4703a 	and	r10,r5,r11
    5bbc:	3ad2703a 	and	r9,r7,r11
    5bc0:	3804d53a 	srli	r2,r7,20
    5bc4:	3018d77a 	srli	r12,r6,29
    5bc8:	280ad53a 	srli	r5,r5,20
    5bcc:	501490fa 	slli	r10,r10,3
    5bd0:	2010d77a 	srli	r8,r4,29
    5bd4:	481290fa 	slli	r9,r9,3
    5bd8:	380ed7fa 	srli	r7,r7,31
    5bdc:	defffb04 	addi	sp,sp,-20
    5be0:	dc800215 	stw	r18,8(sp)
    5be4:	dc400115 	stw	r17,4(sp)
    5be8:	dc000015 	stw	r16,0(sp)
    5bec:	dfc00415 	stw	ra,16(sp)
    5bf0:	dcc00315 	stw	r19,12(sp)
    5bf4:	1c803fcc 	andi	r18,r3,255
    5bf8:	2c01ffcc 	andi	r16,r5,2047
    5bfc:	5210b03a 	or	r8,r10,r8
    5c00:	202290fa 	slli	r17,r4,3
    5c04:	1081ffcc 	andi	r2,r2,2047
    5c08:	4b12b03a 	or	r9,r9,r12
    5c0c:	300c90fa 	slli	r6,r6,3
    5c10:	91c07526 	beq	r18,r7,5de8 <__adddf3+0x23c>
    5c14:	8087c83a 	sub	r3,r16,r2
    5c18:	00c0ab0e 	bge	zero,r3,5ec8 <__adddf3+0x31c>
    5c1c:	10002a1e 	bne	r2,zero,5cc8 <__adddf3+0x11c>
    5c20:	4984b03a 	or	r2,r9,r6
    5c24:	1000961e 	bne	r2,zero,5e80 <__adddf3+0x2d4>
    5c28:	888001cc 	andi	r2,r17,7
    5c2c:	10000726 	beq	r2,zero,5c4c <__adddf3+0xa0>
    5c30:	888003cc 	andi	r2,r17,15
    5c34:	00c00104 	movi	r3,4
    5c38:	10c00426 	beq	r2,r3,5c4c <__adddf3+0xa0>
    5c3c:	88c7883a 	add	r3,r17,r3
    5c40:	1c63803a 	cmpltu	r17,r3,r17
    5c44:	4451883a 	add	r8,r8,r17
    5c48:	1823883a 	mov	r17,r3
    5c4c:	4080202c 	andhi	r2,r8,128
    5c50:	10005926 	beq	r2,zero,5db8 <__adddf3+0x20c>
    5c54:	84000044 	addi	r16,r16,1
    5c58:	0081ffc4 	movi	r2,2047
    5c5c:	8080ba26 	beq	r16,r2,5f48 <__adddf3+0x39c>
    5c60:	00bfe034 	movhi	r2,65408
    5c64:	10bfffc4 	addi	r2,r2,-1
    5c68:	4090703a 	and	r8,r8,r2
    5c6c:	4004977a 	slli	r2,r8,29
    5c70:	4010927a 	slli	r8,r8,9
    5c74:	8822d0fa 	srli	r17,r17,3
    5c78:	8401ffcc 	andi	r16,r16,2047
    5c7c:	4010d33a 	srli	r8,r8,12
    5c80:	9007883a 	mov	r3,r18
    5c84:	1444b03a 	or	r2,r2,r17
    5c88:	8401ffcc 	andi	r16,r16,2047
    5c8c:	8020953a 	slli	r16,r16,20
    5c90:	18c03fcc 	andi	r3,r3,255
    5c94:	01000434 	movhi	r4,16
    5c98:	213fffc4 	addi	r4,r4,-1
    5c9c:	180697fa 	slli	r3,r3,31
    5ca0:	4110703a 	and	r8,r8,r4
    5ca4:	4410b03a 	or	r8,r8,r16
    5ca8:	40c6b03a 	or	r3,r8,r3
    5cac:	dfc00417 	ldw	ra,16(sp)
    5cb0:	dcc00317 	ldw	r19,12(sp)
    5cb4:	dc800217 	ldw	r18,8(sp)
    5cb8:	dc400117 	ldw	r17,4(sp)
    5cbc:	dc000017 	ldw	r16,0(sp)
    5cc0:	dec00504 	addi	sp,sp,20
    5cc4:	f800283a 	ret
    5cc8:	0081ffc4 	movi	r2,2047
    5ccc:	80bfd626 	beq	r16,r2,5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5cd0:	4a402034 	orhi	r9,r9,128
    5cd4:	00800e04 	movi	r2,56
    5cd8:	10c09f16 	blt	r2,r3,5f58 <__adddf3+0x3ac>
    5cdc:	008007c4 	movi	r2,31
    5ce0:	10c0c216 	blt	r2,r3,5fec <__adddf3+0x440>
    5ce4:	00800804 	movi	r2,32
    5ce8:	10c5c83a 	sub	r2,r2,r3
    5cec:	488a983a 	sll	r5,r9,r2
    5cf0:	30c8d83a 	srl	r4,r6,r3
    5cf4:	3084983a 	sll	r2,r6,r2
    5cf8:	48c6d83a 	srl	r3,r9,r3
    5cfc:	290cb03a 	or	r6,r5,r4
    5d00:	1004c03a 	cmpne	r2,r2,zero
    5d04:	308cb03a 	or	r6,r6,r2
    5d08:	898dc83a 	sub	r6,r17,r6
    5d0c:	89a3803a 	cmpltu	r17,r17,r6
    5d10:	40d1c83a 	sub	r8,r8,r3
    5d14:	4451c83a 	sub	r8,r8,r17
    5d18:	3023883a 	mov	r17,r6
    5d1c:	4080202c 	andhi	r2,r8,128
    5d20:	10002326 	beq	r2,zero,5db0 <__adddf3+0x204>
    5d24:	04c02034 	movhi	r19,128
    5d28:	9cffffc4 	addi	r19,r19,-1
    5d2c:	44e6703a 	and	r19,r8,r19
    5d30:	98007626 	beq	r19,zero,5f0c <__adddf3+0x360>
    5d34:	9809883a 	mov	r4,r19
    5d38:	00085b00 	call	85b0 <__clzsi2>
    5d3c:	10fffe04 	addi	r3,r2,-8
    5d40:	010007c4 	movi	r4,31
    5d44:	20c07716 	blt	r4,r3,5f24 <__adddf3+0x378>
    5d48:	00800804 	movi	r2,32
    5d4c:	10c5c83a 	sub	r2,r2,r3
    5d50:	8884d83a 	srl	r2,r17,r2
    5d54:	98d0983a 	sll	r8,r19,r3
    5d58:	88e2983a 	sll	r17,r17,r3
    5d5c:	1204b03a 	or	r2,r2,r8
    5d60:	1c007416 	blt	r3,r16,5f34 <__adddf3+0x388>
    5d64:	1c21c83a 	sub	r16,r3,r16
    5d68:	82000044 	addi	r8,r16,1
    5d6c:	00c007c4 	movi	r3,31
    5d70:	1a009116 	blt	r3,r8,5fb8 <__adddf3+0x40c>
    5d74:	00c00804 	movi	r3,32
    5d78:	1a07c83a 	sub	r3,r3,r8
    5d7c:	8a08d83a 	srl	r4,r17,r8
    5d80:	88e2983a 	sll	r17,r17,r3
    5d84:	10c6983a 	sll	r3,r2,r3
    5d88:	1210d83a 	srl	r8,r2,r8
    5d8c:	8804c03a 	cmpne	r2,r17,zero
    5d90:	1906b03a 	or	r3,r3,r4
    5d94:	18a2b03a 	or	r17,r3,r2
    5d98:	0021883a 	mov	r16,zero
    5d9c:	003fa206 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5da0:	1890b03a 	or	r8,r3,r2
    5da4:	40017d26 	beq	r8,zero,639c <__adddf3+0x7f0>
    5da8:	1011883a 	mov	r8,r2
    5dac:	1823883a 	mov	r17,r3
    5db0:	888001cc 	andi	r2,r17,7
    5db4:	103f9e1e 	bne	r2,zero,5c30 <__alt_exception_stack_pointer+0xf8005c30>
    5db8:	4004977a 	slli	r2,r8,29
    5dbc:	8822d0fa 	srli	r17,r17,3
    5dc0:	4010d0fa 	srli	r8,r8,3
    5dc4:	9007883a 	mov	r3,r18
    5dc8:	1444b03a 	or	r2,r2,r17
    5dcc:	0101ffc4 	movi	r4,2047
    5dd0:	81002426 	beq	r16,r4,5e64 <__adddf3+0x2b8>
    5dd4:	8120703a 	and	r16,r16,r4
    5dd8:	01000434 	movhi	r4,16
    5ddc:	213fffc4 	addi	r4,r4,-1
    5de0:	4110703a 	and	r8,r8,r4
    5de4:	003fa806 	br	5c88 <__alt_exception_stack_pointer+0xf8005c88>
    5de8:	8089c83a 	sub	r4,r16,r2
    5dec:	01005e0e 	bge	zero,r4,5f68 <__adddf3+0x3bc>
    5df0:	10002b26 	beq	r2,zero,5ea0 <__adddf3+0x2f4>
    5df4:	0081ffc4 	movi	r2,2047
    5df8:	80bf8b26 	beq	r16,r2,5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5dfc:	4a402034 	orhi	r9,r9,128
    5e00:	00800e04 	movi	r2,56
    5e04:	1100a40e 	bge	r2,r4,6098 <__adddf3+0x4ec>
    5e08:	498cb03a 	or	r6,r9,r6
    5e0c:	300ac03a 	cmpne	r5,r6,zero
    5e10:	0013883a 	mov	r9,zero
    5e14:	2c4b883a 	add	r5,r5,r17
    5e18:	2c63803a 	cmpltu	r17,r5,r17
    5e1c:	4a11883a 	add	r8,r9,r8
    5e20:	8a11883a 	add	r8,r17,r8
    5e24:	2823883a 	mov	r17,r5
    5e28:	4080202c 	andhi	r2,r8,128
    5e2c:	103fe026 	beq	r2,zero,5db0 <__alt_exception_stack_pointer+0xf8005db0>
    5e30:	84000044 	addi	r16,r16,1
    5e34:	0081ffc4 	movi	r2,2047
    5e38:	8080d226 	beq	r16,r2,6184 <__adddf3+0x5d8>
    5e3c:	00bfe034 	movhi	r2,65408
    5e40:	10bfffc4 	addi	r2,r2,-1
    5e44:	4090703a 	and	r8,r8,r2
    5e48:	880ad07a 	srli	r5,r17,1
    5e4c:	400897fa 	slli	r4,r8,31
    5e50:	88c0004c 	andi	r3,r17,1
    5e54:	28e2b03a 	or	r17,r5,r3
    5e58:	4010d07a 	srli	r8,r8,1
    5e5c:	2462b03a 	or	r17,r4,r17
    5e60:	003f7106 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5e64:	4088b03a 	or	r4,r8,r2
    5e68:	20014526 	beq	r4,zero,6380 <__adddf3+0x7d4>
    5e6c:	01000434 	movhi	r4,16
    5e70:	42000234 	orhi	r8,r8,8
    5e74:	213fffc4 	addi	r4,r4,-1
    5e78:	4110703a 	and	r8,r8,r4
    5e7c:	003f8206 	br	5c88 <__alt_exception_stack_pointer+0xf8005c88>
    5e80:	18ffffc4 	addi	r3,r3,-1
    5e84:	1800491e 	bne	r3,zero,5fac <__adddf3+0x400>
    5e88:	898bc83a 	sub	r5,r17,r6
    5e8c:	8963803a 	cmpltu	r17,r17,r5
    5e90:	4251c83a 	sub	r8,r8,r9
    5e94:	4451c83a 	sub	r8,r8,r17
    5e98:	2823883a 	mov	r17,r5
    5e9c:	003f9f06 	br	5d1c <__alt_exception_stack_pointer+0xf8005d1c>
    5ea0:	4984b03a 	or	r2,r9,r6
    5ea4:	103f6026 	beq	r2,zero,5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5ea8:	213fffc4 	addi	r4,r4,-1
    5eac:	2000931e 	bne	r4,zero,60fc <__adddf3+0x550>
    5eb0:	898d883a 	add	r6,r17,r6
    5eb4:	3463803a 	cmpltu	r17,r6,r17
    5eb8:	4251883a 	add	r8,r8,r9
    5ebc:	8a11883a 	add	r8,r17,r8
    5ec0:	3023883a 	mov	r17,r6
    5ec4:	003fd806 	br	5e28 <__alt_exception_stack_pointer+0xf8005e28>
    5ec8:	1800541e 	bne	r3,zero,601c <__adddf3+0x470>
    5ecc:	80800044 	addi	r2,r16,1
    5ed0:	1081ffcc 	andi	r2,r2,2047
    5ed4:	00c00044 	movi	r3,1
    5ed8:	1880a00e 	bge	r3,r2,615c <__adddf3+0x5b0>
    5edc:	8989c83a 	sub	r4,r17,r6
    5ee0:	8905803a 	cmpltu	r2,r17,r4
    5ee4:	4267c83a 	sub	r19,r8,r9
    5ee8:	98a7c83a 	sub	r19,r19,r2
    5eec:	9880202c 	andhi	r2,r19,128
    5ef0:	10006326 	beq	r2,zero,6080 <__adddf3+0x4d4>
    5ef4:	3463c83a 	sub	r17,r6,r17
    5ef8:	4a07c83a 	sub	r3,r9,r8
    5efc:	344d803a 	cmpltu	r6,r6,r17
    5f00:	19a7c83a 	sub	r19,r3,r6
    5f04:	3825883a 	mov	r18,r7
    5f08:	983f8a1e 	bne	r19,zero,5d34 <__alt_exception_stack_pointer+0xf8005d34>
    5f0c:	8809883a 	mov	r4,r17
    5f10:	00085b00 	call	85b0 <__clzsi2>
    5f14:	10800804 	addi	r2,r2,32
    5f18:	10fffe04 	addi	r3,r2,-8
    5f1c:	010007c4 	movi	r4,31
    5f20:	20ff890e 	bge	r4,r3,5d48 <__alt_exception_stack_pointer+0xf8005d48>
    5f24:	10bff604 	addi	r2,r2,-40
    5f28:	8884983a 	sll	r2,r17,r2
    5f2c:	0023883a 	mov	r17,zero
    5f30:	1c3f8c0e 	bge	r3,r16,5d64 <__alt_exception_stack_pointer+0xf8005d64>
    5f34:	023fe034 	movhi	r8,65408
    5f38:	423fffc4 	addi	r8,r8,-1
    5f3c:	80e1c83a 	sub	r16,r16,r3
    5f40:	1210703a 	and	r8,r2,r8
    5f44:	003f3806 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5f48:	9007883a 	mov	r3,r18
    5f4c:	0011883a 	mov	r8,zero
    5f50:	0005883a 	mov	r2,zero
    5f54:	003f4c06 	br	5c88 <__alt_exception_stack_pointer+0xf8005c88>
    5f58:	498cb03a 	or	r6,r9,r6
    5f5c:	300cc03a 	cmpne	r6,r6,zero
    5f60:	0007883a 	mov	r3,zero
    5f64:	003f6806 	br	5d08 <__alt_exception_stack_pointer+0xf8005d08>
    5f68:	20009c1e 	bne	r4,zero,61dc <__adddf3+0x630>
    5f6c:	80800044 	addi	r2,r16,1
    5f70:	1141ffcc 	andi	r5,r2,2047
    5f74:	01000044 	movi	r4,1
    5f78:	2140670e 	bge	r4,r5,6118 <__adddf3+0x56c>
    5f7c:	0101ffc4 	movi	r4,2047
    5f80:	11007f26 	beq	r2,r4,6180 <__adddf3+0x5d4>
    5f84:	898d883a 	add	r6,r17,r6
    5f88:	4247883a 	add	r3,r8,r9
    5f8c:	3451803a 	cmpltu	r8,r6,r17
    5f90:	40d1883a 	add	r8,r8,r3
    5f94:	402297fa 	slli	r17,r8,31
    5f98:	300cd07a 	srli	r6,r6,1
    5f9c:	4010d07a 	srli	r8,r8,1
    5fa0:	1021883a 	mov	r16,r2
    5fa4:	89a2b03a 	or	r17,r17,r6
    5fa8:	003f1f06 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5fac:	0081ffc4 	movi	r2,2047
    5fb0:	80bf481e 	bne	r16,r2,5cd4 <__alt_exception_stack_pointer+0xf8005cd4>
    5fb4:	003f1c06 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    5fb8:	843ff844 	addi	r16,r16,-31
    5fbc:	01000804 	movi	r4,32
    5fc0:	1406d83a 	srl	r3,r2,r16
    5fc4:	41005026 	beq	r8,r4,6108 <__adddf3+0x55c>
    5fc8:	01001004 	movi	r4,64
    5fcc:	2211c83a 	sub	r8,r4,r8
    5fd0:	1204983a 	sll	r2,r2,r8
    5fd4:	88a2b03a 	or	r17,r17,r2
    5fd8:	8822c03a 	cmpne	r17,r17,zero
    5fdc:	1c62b03a 	or	r17,r3,r17
    5fe0:	0011883a 	mov	r8,zero
    5fe4:	0021883a 	mov	r16,zero
    5fe8:	003f7106 	br	5db0 <__alt_exception_stack_pointer+0xf8005db0>
    5fec:	193ff804 	addi	r4,r3,-32
    5ff0:	00800804 	movi	r2,32
    5ff4:	4908d83a 	srl	r4,r9,r4
    5ff8:	18804526 	beq	r3,r2,6110 <__adddf3+0x564>
    5ffc:	00801004 	movi	r2,64
    6000:	10c5c83a 	sub	r2,r2,r3
    6004:	4886983a 	sll	r3,r9,r2
    6008:	198cb03a 	or	r6,r3,r6
    600c:	300cc03a 	cmpne	r6,r6,zero
    6010:	218cb03a 	or	r6,r4,r6
    6014:	0007883a 	mov	r3,zero
    6018:	003f3b06 	br	5d08 <__alt_exception_stack_pointer+0xf8005d08>
    601c:	80002a26 	beq	r16,zero,60c8 <__adddf3+0x51c>
    6020:	0101ffc4 	movi	r4,2047
    6024:	11006826 	beq	r2,r4,61c8 <__adddf3+0x61c>
    6028:	00c7c83a 	sub	r3,zero,r3
    602c:	42002034 	orhi	r8,r8,128
    6030:	01000e04 	movi	r4,56
    6034:	20c07c16 	blt	r4,r3,6228 <__adddf3+0x67c>
    6038:	010007c4 	movi	r4,31
    603c:	20c0da16 	blt	r4,r3,63a8 <__adddf3+0x7fc>
    6040:	01000804 	movi	r4,32
    6044:	20c9c83a 	sub	r4,r4,r3
    6048:	4114983a 	sll	r10,r8,r4
    604c:	88cad83a 	srl	r5,r17,r3
    6050:	8908983a 	sll	r4,r17,r4
    6054:	40c6d83a 	srl	r3,r8,r3
    6058:	5162b03a 	or	r17,r10,r5
    605c:	2008c03a 	cmpne	r4,r4,zero
    6060:	8922b03a 	or	r17,r17,r4
    6064:	3463c83a 	sub	r17,r6,r17
    6068:	48c7c83a 	sub	r3,r9,r3
    606c:	344d803a 	cmpltu	r6,r6,r17
    6070:	1991c83a 	sub	r8,r3,r6
    6074:	1021883a 	mov	r16,r2
    6078:	3825883a 	mov	r18,r7
    607c:	003f2706 	br	5d1c <__alt_exception_stack_pointer+0xf8005d1c>
    6080:	24d0b03a 	or	r8,r4,r19
    6084:	40001b1e 	bne	r8,zero,60f4 <__adddf3+0x548>
    6088:	0005883a 	mov	r2,zero
    608c:	0007883a 	mov	r3,zero
    6090:	0021883a 	mov	r16,zero
    6094:	003f4d06 	br	5dcc <__alt_exception_stack_pointer+0xf8005dcc>
    6098:	008007c4 	movi	r2,31
    609c:	11003c16 	blt	r2,r4,6190 <__adddf3+0x5e4>
    60a0:	00800804 	movi	r2,32
    60a4:	1105c83a 	sub	r2,r2,r4
    60a8:	488e983a 	sll	r7,r9,r2
    60ac:	310ad83a 	srl	r5,r6,r4
    60b0:	3084983a 	sll	r2,r6,r2
    60b4:	4912d83a 	srl	r9,r9,r4
    60b8:	394ab03a 	or	r5,r7,r5
    60bc:	1004c03a 	cmpne	r2,r2,zero
    60c0:	288ab03a 	or	r5,r5,r2
    60c4:	003f5306 	br	5e14 <__alt_exception_stack_pointer+0xf8005e14>
    60c8:	4448b03a 	or	r4,r8,r17
    60cc:	20003e26 	beq	r4,zero,61c8 <__adddf3+0x61c>
    60d0:	00c6303a 	nor	r3,zero,r3
    60d4:	18003a1e 	bne	r3,zero,61c0 <__adddf3+0x614>
    60d8:	3463c83a 	sub	r17,r6,r17
    60dc:	4a07c83a 	sub	r3,r9,r8
    60e0:	344d803a 	cmpltu	r6,r6,r17
    60e4:	1991c83a 	sub	r8,r3,r6
    60e8:	1021883a 	mov	r16,r2
    60ec:	3825883a 	mov	r18,r7
    60f0:	003f0a06 	br	5d1c <__alt_exception_stack_pointer+0xf8005d1c>
    60f4:	2023883a 	mov	r17,r4
    60f8:	003f0d06 	br	5d30 <__alt_exception_stack_pointer+0xf8005d30>
    60fc:	0081ffc4 	movi	r2,2047
    6100:	80bf3f1e 	bne	r16,r2,5e00 <__alt_exception_stack_pointer+0xf8005e00>
    6104:	003ec806 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6108:	0005883a 	mov	r2,zero
    610c:	003fb106 	br	5fd4 <__alt_exception_stack_pointer+0xf8005fd4>
    6110:	0007883a 	mov	r3,zero
    6114:	003fbc06 	br	6008 <__alt_exception_stack_pointer+0xf8006008>
    6118:	4444b03a 	or	r2,r8,r17
    611c:	8000871e 	bne	r16,zero,633c <__adddf3+0x790>
    6120:	1000ba26 	beq	r2,zero,640c <__adddf3+0x860>
    6124:	4984b03a 	or	r2,r9,r6
    6128:	103ebf26 	beq	r2,zero,5c28 <__alt_exception_stack_pointer+0xf8005c28>
    612c:	8985883a 	add	r2,r17,r6
    6130:	4247883a 	add	r3,r8,r9
    6134:	1451803a 	cmpltu	r8,r2,r17
    6138:	40d1883a 	add	r8,r8,r3
    613c:	40c0202c 	andhi	r3,r8,128
    6140:	1023883a 	mov	r17,r2
    6144:	183f1a26 	beq	r3,zero,5db0 <__alt_exception_stack_pointer+0xf8005db0>
    6148:	00bfe034 	movhi	r2,65408
    614c:	10bfffc4 	addi	r2,r2,-1
    6150:	2021883a 	mov	r16,r4
    6154:	4090703a 	and	r8,r8,r2
    6158:	003eb306 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    615c:	4444b03a 	or	r2,r8,r17
    6160:	8000291e 	bne	r16,zero,6208 <__adddf3+0x65c>
    6164:	10004b1e 	bne	r2,zero,6294 <__adddf3+0x6e8>
    6168:	4990b03a 	or	r8,r9,r6
    616c:	40008b26 	beq	r8,zero,639c <__adddf3+0x7f0>
    6170:	4811883a 	mov	r8,r9
    6174:	3023883a 	mov	r17,r6
    6178:	3825883a 	mov	r18,r7
    617c:	003eaa06 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6180:	1021883a 	mov	r16,r2
    6184:	0011883a 	mov	r8,zero
    6188:	0005883a 	mov	r2,zero
    618c:	003f0f06 	br	5dcc <__alt_exception_stack_pointer+0xf8005dcc>
    6190:	217ff804 	addi	r5,r4,-32
    6194:	00800804 	movi	r2,32
    6198:	494ad83a 	srl	r5,r9,r5
    619c:	20807d26 	beq	r4,r2,6394 <__adddf3+0x7e8>
    61a0:	00801004 	movi	r2,64
    61a4:	1109c83a 	sub	r4,r2,r4
    61a8:	4912983a 	sll	r9,r9,r4
    61ac:	498cb03a 	or	r6,r9,r6
    61b0:	300cc03a 	cmpne	r6,r6,zero
    61b4:	298ab03a 	or	r5,r5,r6
    61b8:	0013883a 	mov	r9,zero
    61bc:	003f1506 	br	5e14 <__alt_exception_stack_pointer+0xf8005e14>
    61c0:	0101ffc4 	movi	r4,2047
    61c4:	113f9a1e 	bne	r2,r4,6030 <__alt_exception_stack_pointer+0xf8006030>
    61c8:	4811883a 	mov	r8,r9
    61cc:	3023883a 	mov	r17,r6
    61d0:	1021883a 	mov	r16,r2
    61d4:	3825883a 	mov	r18,r7
    61d8:	003e9306 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    61dc:	8000161e 	bne	r16,zero,6238 <__adddf3+0x68c>
    61e0:	444ab03a 	or	r5,r8,r17
    61e4:	28005126 	beq	r5,zero,632c <__adddf3+0x780>
    61e8:	0108303a 	nor	r4,zero,r4
    61ec:	20004d1e 	bne	r4,zero,6324 <__adddf3+0x778>
    61f0:	89a3883a 	add	r17,r17,r6
    61f4:	4253883a 	add	r9,r8,r9
    61f8:	898d803a 	cmpltu	r6,r17,r6
    61fc:	3251883a 	add	r8,r6,r9
    6200:	1021883a 	mov	r16,r2
    6204:	003f0806 	br	5e28 <__alt_exception_stack_pointer+0xf8005e28>
    6208:	1000301e 	bne	r2,zero,62cc <__adddf3+0x720>
    620c:	4984b03a 	or	r2,r9,r6
    6210:	10007126 	beq	r2,zero,63d8 <__adddf3+0x82c>
    6214:	4811883a 	mov	r8,r9
    6218:	3023883a 	mov	r17,r6
    621c:	3825883a 	mov	r18,r7
    6220:	0401ffc4 	movi	r16,2047
    6224:	003e8006 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6228:	4462b03a 	or	r17,r8,r17
    622c:	8822c03a 	cmpne	r17,r17,zero
    6230:	0007883a 	mov	r3,zero
    6234:	003f8b06 	br	6064 <__alt_exception_stack_pointer+0xf8006064>
    6238:	0141ffc4 	movi	r5,2047
    623c:	11403b26 	beq	r2,r5,632c <__adddf3+0x780>
    6240:	0109c83a 	sub	r4,zero,r4
    6244:	42002034 	orhi	r8,r8,128
    6248:	01400e04 	movi	r5,56
    624c:	29006716 	blt	r5,r4,63ec <__adddf3+0x840>
    6250:	014007c4 	movi	r5,31
    6254:	29007016 	blt	r5,r4,6418 <__adddf3+0x86c>
    6258:	01400804 	movi	r5,32
    625c:	290bc83a 	sub	r5,r5,r4
    6260:	4154983a 	sll	r10,r8,r5
    6264:	890ed83a 	srl	r7,r17,r4
    6268:	894a983a 	sll	r5,r17,r5
    626c:	4108d83a 	srl	r4,r8,r4
    6270:	51e2b03a 	or	r17,r10,r7
    6274:	280ac03a 	cmpne	r5,r5,zero
    6278:	8962b03a 	or	r17,r17,r5
    627c:	89a3883a 	add	r17,r17,r6
    6280:	2253883a 	add	r9,r4,r9
    6284:	898d803a 	cmpltu	r6,r17,r6
    6288:	3251883a 	add	r8,r6,r9
    628c:	1021883a 	mov	r16,r2
    6290:	003ee506 	br	5e28 <__alt_exception_stack_pointer+0xf8005e28>
    6294:	4984b03a 	or	r2,r9,r6
    6298:	103e6326 	beq	r2,zero,5c28 <__alt_exception_stack_pointer+0xf8005c28>
    629c:	8987c83a 	sub	r3,r17,r6
    62a0:	88c9803a 	cmpltu	r4,r17,r3
    62a4:	4245c83a 	sub	r2,r8,r9
    62a8:	1105c83a 	sub	r2,r2,r4
    62ac:	1100202c 	andhi	r4,r2,128
    62b0:	203ebb26 	beq	r4,zero,5da0 <__alt_exception_stack_pointer+0xf8005da0>
    62b4:	3463c83a 	sub	r17,r6,r17
    62b8:	4a07c83a 	sub	r3,r9,r8
    62bc:	344d803a 	cmpltu	r6,r6,r17
    62c0:	1991c83a 	sub	r8,r3,r6
    62c4:	3825883a 	mov	r18,r7
    62c8:	003e5706 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    62cc:	4984b03a 	or	r2,r9,r6
    62d0:	10002e26 	beq	r2,zero,638c <__adddf3+0x7e0>
    62d4:	4004d0fa 	srli	r2,r8,3
    62d8:	8822d0fa 	srli	r17,r17,3
    62dc:	4010977a 	slli	r8,r8,29
    62e0:	10c0022c 	andhi	r3,r2,8
    62e4:	4462b03a 	or	r17,r8,r17
    62e8:	18000826 	beq	r3,zero,630c <__adddf3+0x760>
    62ec:	4808d0fa 	srli	r4,r9,3
    62f0:	20c0022c 	andhi	r3,r4,8
    62f4:	1800051e 	bne	r3,zero,630c <__adddf3+0x760>
    62f8:	300cd0fa 	srli	r6,r6,3
    62fc:	4806977a 	slli	r3,r9,29
    6300:	2005883a 	mov	r2,r4
    6304:	3825883a 	mov	r18,r7
    6308:	19a2b03a 	or	r17,r3,r6
    630c:	8810d77a 	srli	r8,r17,29
    6310:	100490fa 	slli	r2,r2,3
    6314:	882290fa 	slli	r17,r17,3
    6318:	0401ffc4 	movi	r16,2047
    631c:	4090b03a 	or	r8,r8,r2
    6320:	003e4106 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6324:	0141ffc4 	movi	r5,2047
    6328:	117fc71e 	bne	r2,r5,6248 <__alt_exception_stack_pointer+0xf8006248>
    632c:	4811883a 	mov	r8,r9
    6330:	3023883a 	mov	r17,r6
    6334:	1021883a 	mov	r16,r2
    6338:	003e3b06 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    633c:	10002f26 	beq	r2,zero,63fc <__adddf3+0x850>
    6340:	4984b03a 	or	r2,r9,r6
    6344:	10001126 	beq	r2,zero,638c <__adddf3+0x7e0>
    6348:	4004d0fa 	srli	r2,r8,3
    634c:	8822d0fa 	srli	r17,r17,3
    6350:	4010977a 	slli	r8,r8,29
    6354:	10c0022c 	andhi	r3,r2,8
    6358:	4462b03a 	or	r17,r8,r17
    635c:	183feb26 	beq	r3,zero,630c <__alt_exception_stack_pointer+0xf800630c>
    6360:	4808d0fa 	srli	r4,r9,3
    6364:	20c0022c 	andhi	r3,r4,8
    6368:	183fe81e 	bne	r3,zero,630c <__alt_exception_stack_pointer+0xf800630c>
    636c:	300cd0fa 	srli	r6,r6,3
    6370:	4806977a 	slli	r3,r9,29
    6374:	2005883a 	mov	r2,r4
    6378:	19a2b03a 	or	r17,r3,r6
    637c:	003fe306 	br	630c <__alt_exception_stack_pointer+0xf800630c>
    6380:	0011883a 	mov	r8,zero
    6384:	0005883a 	mov	r2,zero
    6388:	003e3f06 	br	5c88 <__alt_exception_stack_pointer+0xf8005c88>
    638c:	0401ffc4 	movi	r16,2047
    6390:	003e2506 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6394:	0013883a 	mov	r9,zero
    6398:	003f8406 	br	61ac <__alt_exception_stack_pointer+0xf80061ac>
    639c:	0005883a 	mov	r2,zero
    63a0:	0007883a 	mov	r3,zero
    63a4:	003e8906 	br	5dcc <__alt_exception_stack_pointer+0xf8005dcc>
    63a8:	197ff804 	addi	r5,r3,-32
    63ac:	01000804 	movi	r4,32
    63b0:	414ad83a 	srl	r5,r8,r5
    63b4:	19002426 	beq	r3,r4,6448 <__adddf3+0x89c>
    63b8:	01001004 	movi	r4,64
    63bc:	20c7c83a 	sub	r3,r4,r3
    63c0:	40c6983a 	sll	r3,r8,r3
    63c4:	1c46b03a 	or	r3,r3,r17
    63c8:	1806c03a 	cmpne	r3,r3,zero
    63cc:	28e2b03a 	or	r17,r5,r3
    63d0:	0007883a 	mov	r3,zero
    63d4:	003f2306 	br	6064 <__alt_exception_stack_pointer+0xf8006064>
    63d8:	0007883a 	mov	r3,zero
    63dc:	5811883a 	mov	r8,r11
    63e0:	00bfffc4 	movi	r2,-1
    63e4:	0401ffc4 	movi	r16,2047
    63e8:	003e7806 	br	5dcc <__alt_exception_stack_pointer+0xf8005dcc>
    63ec:	4462b03a 	or	r17,r8,r17
    63f0:	8822c03a 	cmpne	r17,r17,zero
    63f4:	0009883a 	mov	r4,zero
    63f8:	003fa006 	br	627c <__alt_exception_stack_pointer+0xf800627c>
    63fc:	4811883a 	mov	r8,r9
    6400:	3023883a 	mov	r17,r6
    6404:	0401ffc4 	movi	r16,2047
    6408:	003e0706 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    640c:	4811883a 	mov	r8,r9
    6410:	3023883a 	mov	r17,r6
    6414:	003e0406 	br	5c28 <__alt_exception_stack_pointer+0xf8005c28>
    6418:	21fff804 	addi	r7,r4,-32
    641c:	01400804 	movi	r5,32
    6420:	41ced83a 	srl	r7,r8,r7
    6424:	21400a26 	beq	r4,r5,6450 <__adddf3+0x8a4>
    6428:	01401004 	movi	r5,64
    642c:	2909c83a 	sub	r4,r5,r4
    6430:	4108983a 	sll	r4,r8,r4
    6434:	2448b03a 	or	r4,r4,r17
    6438:	2008c03a 	cmpne	r4,r4,zero
    643c:	3922b03a 	or	r17,r7,r4
    6440:	0009883a 	mov	r4,zero
    6444:	003f8d06 	br	627c <__alt_exception_stack_pointer+0xf800627c>
    6448:	0007883a 	mov	r3,zero
    644c:	003fdd06 	br	63c4 <__alt_exception_stack_pointer+0xf80063c4>
    6450:	0009883a 	mov	r4,zero
    6454:	003ff706 	br	6434 <__alt_exception_stack_pointer+0xf8006434>

00006458 <__divdf3>:
    6458:	defff004 	addi	sp,sp,-64
    645c:	dc800815 	stw	r18,32(sp)
    6460:	2824d53a 	srli	r18,r5,20
    6464:	dd800c15 	stw	r22,48(sp)
    6468:	282cd7fa 	srli	r22,r5,31
    646c:	dc000615 	stw	r16,24(sp)
    6470:	04000434 	movhi	r16,16
    6474:	843fffc4 	addi	r16,r16,-1
    6478:	dfc00f15 	stw	ra,60(sp)
    647c:	df000e15 	stw	fp,56(sp)
    6480:	ddc00d15 	stw	r23,52(sp)
    6484:	dd400b15 	stw	r21,44(sp)
    6488:	dd000a15 	stw	r20,40(sp)
    648c:	dcc00915 	stw	r19,36(sp)
    6490:	dc400715 	stw	r17,28(sp)
    6494:	9481ffcc 	andi	r18,r18,2047
    6498:	2c20703a 	and	r16,r5,r16
    649c:	b2003fcc 	andi	r8,r22,255
    64a0:	90006126 	beq	r18,zero,6628 <__divdf3+0x1d0>
    64a4:	0081ffc4 	movi	r2,2047
    64a8:	202b883a 	mov	r21,r4
    64ac:	90803726 	beq	r18,r2,658c <__divdf3+0x134>
    64b0:	80800434 	orhi	r2,r16,16
    64b4:	100490fa 	slli	r2,r2,3
    64b8:	2020d77a 	srli	r16,r4,29
    64bc:	202a90fa 	slli	r21,r4,3
    64c0:	94bf0044 	addi	r18,r18,-1023
    64c4:	80a0b03a 	or	r16,r16,r2
    64c8:	0013883a 	mov	r9,zero
    64cc:	000b883a 	mov	r5,zero
    64d0:	3806d53a 	srli	r3,r7,20
    64d4:	382ed7fa 	srli	r23,r7,31
    64d8:	04400434 	movhi	r17,16
    64dc:	8c7fffc4 	addi	r17,r17,-1
    64e0:	18c1ffcc 	andi	r3,r3,2047
    64e4:	3029883a 	mov	r20,r6
    64e8:	3c62703a 	and	r17,r7,r17
    64ec:	bf003fcc 	andi	fp,r23,255
    64f0:	18006e26 	beq	r3,zero,66ac <__divdf3+0x254>
    64f4:	0081ffc4 	movi	r2,2047
    64f8:	18806626 	beq	r3,r2,6694 <__divdf3+0x23c>
    64fc:	88800434 	orhi	r2,r17,16
    6500:	100490fa 	slli	r2,r2,3
    6504:	3022d77a 	srli	r17,r6,29
    6508:	302890fa 	slli	r20,r6,3
    650c:	18ff0044 	addi	r3,r3,-1023
    6510:	88a2b03a 	or	r17,r17,r2
    6514:	000f883a 	mov	r7,zero
    6518:	b5e6f03a 	xor	r19,r22,r23
    651c:	3a4cb03a 	or	r6,r7,r9
    6520:	008003c4 	movi	r2,15
    6524:	9809883a 	mov	r4,r19
    6528:	90c7c83a 	sub	r3,r18,r3
    652c:	9cc03fcc 	andi	r19,r19,255
    6530:	11809636 	bltu	r2,r6,678c <__divdf3+0x334>
    6534:	300c90ba 	slli	r6,r6,2
    6538:	00800034 	movhi	r2,0
    653c:	10995304 	addi	r2,r2,25932
    6540:	308d883a 	add	r6,r6,r2
    6544:	30800017 	ldw	r2,0(r6)
    6548:	1000683a 	jmp	r2
    654c:	0000678c 	andi	zero,zero,414
    6550:	000065c4 	movi	zero,407
    6554:	0000677c 	xorhi	zero,zero,413
    6558:	000065b8 	rdprs	zero,zero,406
    655c:	0000677c 	xorhi	zero,zero,413
    6560:	00006750 	cmplti	zero,zero,413
    6564:	0000677c 	xorhi	zero,zero,413
    6568:	000065b8 	rdprs	zero,zero,406
    656c:	000065c4 	movi	zero,407
    6570:	000065c4 	movi	zero,407
    6574:	00006750 	cmplti	zero,zero,413
    6578:	000065b8 	rdprs	zero,zero,406
    657c:	000065a8 	cmpgeui	zero,zero,406
    6580:	000065a8 	cmpgeui	zero,zero,406
    6584:	000065a8 	cmpgeui	zero,zero,406
    6588:	00006b14 	movui	zero,428
    658c:	2404b03a 	or	r2,r4,r16
    6590:	10006c1e 	bne	r2,zero,6744 <__divdf3+0x2ec>
    6594:	02400204 	movi	r9,8
    6598:	0021883a 	mov	r16,zero
    659c:	002b883a 	mov	r21,zero
    65a0:	01400084 	movi	r5,2
    65a4:	003fca06 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    65a8:	8023883a 	mov	r17,r16
    65ac:	a829883a 	mov	r20,r21
    65b0:	4039883a 	mov	fp,r8
    65b4:	280f883a 	mov	r7,r5
    65b8:	00800084 	movi	r2,2
    65bc:	3881601e 	bne	r7,r2,6b40 <__divdf3+0x6e8>
    65c0:	e027883a 	mov	r19,fp
    65c4:	9900004c 	andi	r4,r19,1
    65c8:	0081ffc4 	movi	r2,2047
    65cc:	0021883a 	mov	r16,zero
    65d0:	002b883a 	mov	r21,zero
    65d4:	1004953a 	slli	r2,r2,20
    65d8:	20c03fcc 	andi	r3,r4,255
    65dc:	01400434 	movhi	r5,16
    65e0:	297fffc4 	addi	r5,r5,-1
    65e4:	180697fa 	slli	r3,r3,31
    65e8:	8160703a 	and	r16,r16,r5
    65ec:	80a0b03a 	or	r16,r16,r2
    65f0:	80c6b03a 	or	r3,r16,r3
    65f4:	a805883a 	mov	r2,r21
    65f8:	dfc00f17 	ldw	ra,60(sp)
    65fc:	df000e17 	ldw	fp,56(sp)
    6600:	ddc00d17 	ldw	r23,52(sp)
    6604:	dd800c17 	ldw	r22,48(sp)
    6608:	dd400b17 	ldw	r21,44(sp)
    660c:	dd000a17 	ldw	r20,40(sp)
    6610:	dcc00917 	ldw	r19,36(sp)
    6614:	dc800817 	ldw	r18,32(sp)
    6618:	dc400717 	ldw	r17,28(sp)
    661c:	dc000617 	ldw	r16,24(sp)
    6620:	dec01004 	addi	sp,sp,64
    6624:	f800283a 	ret
    6628:	2404b03a 	or	r2,r4,r16
    662c:	2023883a 	mov	r17,r4
    6630:	10003f26 	beq	r2,zero,6730 <__divdf3+0x2d8>
    6634:	80015e26 	beq	r16,zero,6bb0 <__divdf3+0x758>
    6638:	8009883a 	mov	r4,r16
    663c:	d9800215 	stw	r6,8(sp)
    6640:	d9c00515 	stw	r7,20(sp)
    6644:	da000415 	stw	r8,16(sp)
    6648:	00085b00 	call	85b0 <__clzsi2>
    664c:	d9800217 	ldw	r6,8(sp)
    6650:	d9c00517 	ldw	r7,20(sp)
    6654:	da000417 	ldw	r8,16(sp)
    6658:	113ffd44 	addi	r4,r2,-11
    665c:	00c00704 	movi	r3,28
    6660:	19014f16 	blt	r3,r4,6ba0 <__divdf3+0x748>
    6664:	00c00744 	movi	r3,29
    6668:	157ffe04 	addi	r21,r2,-8
    666c:	1907c83a 	sub	r3,r3,r4
    6670:	8560983a 	sll	r16,r16,r21
    6674:	88c6d83a 	srl	r3,r17,r3
    6678:	8d6a983a 	sll	r21,r17,r21
    667c:	1c20b03a 	or	r16,r3,r16
    6680:	1080fcc4 	addi	r2,r2,1011
    6684:	00a5c83a 	sub	r18,zero,r2
    6688:	0013883a 	mov	r9,zero
    668c:	000b883a 	mov	r5,zero
    6690:	003f8f06 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    6694:	3444b03a 	or	r2,r6,r17
    6698:	1000231e 	bne	r2,zero,6728 <__divdf3+0x2d0>
    669c:	0023883a 	mov	r17,zero
    66a0:	0029883a 	mov	r20,zero
    66a4:	01c00084 	movi	r7,2
    66a8:	003f9b06 	br	6518 <__alt_exception_stack_pointer+0xf8006518>
    66ac:	3444b03a 	or	r2,r6,r17
    66b0:	10001926 	beq	r2,zero,6718 <__divdf3+0x2c0>
    66b4:	88014b26 	beq	r17,zero,6be4 <__divdf3+0x78c>
    66b8:	8809883a 	mov	r4,r17
    66bc:	d9400115 	stw	r5,4(sp)
    66c0:	d9800215 	stw	r6,8(sp)
    66c4:	da000415 	stw	r8,16(sp)
    66c8:	da400315 	stw	r9,12(sp)
    66cc:	00085b00 	call	85b0 <__clzsi2>
    66d0:	d9400117 	ldw	r5,4(sp)
    66d4:	d9800217 	ldw	r6,8(sp)
    66d8:	da000417 	ldw	r8,16(sp)
    66dc:	da400317 	ldw	r9,12(sp)
    66e0:	113ffd44 	addi	r4,r2,-11
    66e4:	00c00704 	movi	r3,28
    66e8:	19013a16 	blt	r3,r4,6bd4 <__divdf3+0x77c>
    66ec:	00c00744 	movi	r3,29
    66f0:	153ffe04 	addi	r20,r2,-8
    66f4:	1907c83a 	sub	r3,r3,r4
    66f8:	8d22983a 	sll	r17,r17,r20
    66fc:	30c6d83a 	srl	r3,r6,r3
    6700:	3528983a 	sll	r20,r6,r20
    6704:	1c62b03a 	or	r17,r3,r17
    6708:	1080fcc4 	addi	r2,r2,1011
    670c:	0087c83a 	sub	r3,zero,r2
    6710:	000f883a 	mov	r7,zero
    6714:	003f8006 	br	6518 <__alt_exception_stack_pointer+0xf8006518>
    6718:	0023883a 	mov	r17,zero
    671c:	0029883a 	mov	r20,zero
    6720:	01c00044 	movi	r7,1
    6724:	003f7c06 	br	6518 <__alt_exception_stack_pointer+0xf8006518>
    6728:	01c000c4 	movi	r7,3
    672c:	003f7a06 	br	6518 <__alt_exception_stack_pointer+0xf8006518>
    6730:	02400104 	movi	r9,4
    6734:	0021883a 	mov	r16,zero
    6738:	002b883a 	mov	r21,zero
    673c:	01400044 	movi	r5,1
    6740:	003f6306 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    6744:	02400304 	movi	r9,12
    6748:	014000c4 	movi	r5,3
    674c:	003f6006 	br	64d0 <__alt_exception_stack_pointer+0xf80064d0>
    6750:	04000434 	movhi	r16,16
    6754:	0009883a 	mov	r4,zero
    6758:	843fffc4 	addi	r16,r16,-1
    675c:	057fffc4 	movi	r21,-1
    6760:	0081ffc4 	movi	r2,2047
    6764:	003f9b06 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    6768:	00c00044 	movi	r3,1
    676c:	1887c83a 	sub	r3,r3,r2
    6770:	01000e04 	movi	r4,56
    6774:	20c1530e 	bge	r4,r3,6cc4 <__divdf3+0x86c>
    6778:	9900004c 	andi	r4,r19,1
    677c:	0005883a 	mov	r2,zero
    6780:	0021883a 	mov	r16,zero
    6784:	002b883a 	mov	r21,zero
    6788:	003f9206 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    678c:	8c012e36 	bltu	r17,r16,6c48 <__divdf3+0x7f0>
    6790:	84412c26 	beq	r16,r17,6c44 <__divdf3+0x7ec>
    6794:	a82f883a 	mov	r23,r21
    6798:	18ffffc4 	addi	r3,r3,-1
    679c:	002b883a 	mov	r21,zero
    67a0:	a004d63a 	srli	r2,r20,24
    67a4:	8822923a 	slli	r17,r17,8
    67a8:	a028923a 	slli	r20,r20,8
    67ac:	8009883a 	mov	r4,r16
    67b0:	88acb03a 	or	r22,r17,r2
    67b4:	dd000015 	stw	r20,0(sp)
    67b8:	b028d43a 	srli	r20,r22,16
    67bc:	d8c00215 	stw	r3,8(sp)
    67c0:	b4bfffcc 	andi	r18,r22,65535
    67c4:	a00b883a 	mov	r5,r20
    67c8:	0005ac80 	call	5ac8 <__udivsi3>
    67cc:	100b883a 	mov	r5,r2
    67d0:	9009883a 	mov	r4,r18
    67d4:	1023883a 	mov	r17,r2
    67d8:	0005b840 	call	5b84 <__mulsi3>
    67dc:	8009883a 	mov	r4,r16
    67e0:	a00b883a 	mov	r5,r20
    67e4:	1039883a 	mov	fp,r2
    67e8:	0005b2c0 	call	5b2c <__umodsi3>
    67ec:	1004943a 	slli	r2,r2,16
    67f0:	b808d43a 	srli	r4,r23,16
    67f4:	d8c00217 	ldw	r3,8(sp)
    67f8:	2084b03a 	or	r2,r4,r2
    67fc:	1700062e 	bgeu	r2,fp,6818 <__divdf3+0x3c0>
    6800:	1585883a 	add	r2,r2,r22
    6804:	893fffc4 	addi	r4,r17,-1
    6808:	15811d36 	bltu	r2,r22,6c80 <__divdf3+0x828>
    680c:	17011c2e 	bgeu	r2,fp,6c80 <__divdf3+0x828>
    6810:	8c7fff84 	addi	r17,r17,-2
    6814:	1585883a 	add	r2,r2,r22
    6818:	1739c83a 	sub	fp,r2,fp
    681c:	a00b883a 	mov	r5,r20
    6820:	e009883a 	mov	r4,fp
    6824:	d8c00215 	stw	r3,8(sp)
    6828:	0005ac80 	call	5ac8 <__udivsi3>
    682c:	100b883a 	mov	r5,r2
    6830:	9009883a 	mov	r4,r18
    6834:	1021883a 	mov	r16,r2
    6838:	0005b840 	call	5b84 <__mulsi3>
    683c:	a00b883a 	mov	r5,r20
    6840:	e009883a 	mov	r4,fp
    6844:	d8800415 	stw	r2,16(sp)
    6848:	0005b2c0 	call	5b2c <__umodsi3>
    684c:	1004943a 	slli	r2,r2,16
    6850:	da000417 	ldw	r8,16(sp)
    6854:	bdffffcc 	andi	r23,r23,65535
    6858:	b884b03a 	or	r2,r23,r2
    685c:	d8c00217 	ldw	r3,8(sp)
    6860:	1200062e 	bgeu	r2,r8,687c <__divdf3+0x424>
    6864:	1585883a 	add	r2,r2,r22
    6868:	813fffc4 	addi	r4,r16,-1
    686c:	15810236 	bltu	r2,r22,6c78 <__divdf3+0x820>
    6870:	1201012e 	bgeu	r2,r8,6c78 <__divdf3+0x820>
    6874:	843fff84 	addi	r16,r16,-2
    6878:	1585883a 	add	r2,r2,r22
    687c:	8822943a 	slli	r17,r17,16
    6880:	d9800017 	ldw	r6,0(sp)
    6884:	1211c83a 	sub	r8,r2,r8
    6888:	8c22b03a 	or	r17,r17,r16
    688c:	373fffcc 	andi	fp,r6,65535
    6890:	8abfffcc 	andi	r10,r17,65535
    6894:	8820d43a 	srli	r16,r17,16
    6898:	5009883a 	mov	r4,r10
    689c:	e00b883a 	mov	r5,fp
    68a0:	302ed43a 	srli	r23,r6,16
    68a4:	d8c00215 	stw	r3,8(sp)
    68a8:	da000415 	stw	r8,16(sp)
    68ac:	da800115 	stw	r10,4(sp)
    68b0:	0005b840 	call	5b84 <__mulsi3>
    68b4:	800b883a 	mov	r5,r16
    68b8:	e009883a 	mov	r4,fp
    68bc:	d8800515 	stw	r2,20(sp)
    68c0:	0005b840 	call	5b84 <__mulsi3>
    68c4:	8009883a 	mov	r4,r16
    68c8:	b80b883a 	mov	r5,r23
    68cc:	d8800315 	stw	r2,12(sp)
    68d0:	0005b840 	call	5b84 <__mulsi3>
    68d4:	da800117 	ldw	r10,4(sp)
    68d8:	b80b883a 	mov	r5,r23
    68dc:	1021883a 	mov	r16,r2
    68e0:	5009883a 	mov	r4,r10
    68e4:	0005b840 	call	5b84 <__mulsi3>
    68e8:	d9c00517 	ldw	r7,20(sp)
    68ec:	da400317 	ldw	r9,12(sp)
    68f0:	d8c00217 	ldw	r3,8(sp)
    68f4:	3808d43a 	srli	r4,r7,16
    68f8:	1245883a 	add	r2,r2,r9
    68fc:	da000417 	ldw	r8,16(sp)
    6900:	2085883a 	add	r2,r4,r2
    6904:	1240022e 	bgeu	r2,r9,6910 <__divdf3+0x4b8>
    6908:	01000074 	movhi	r4,1
    690c:	8121883a 	add	r16,r16,r4
    6910:	1008d43a 	srli	r4,r2,16
    6914:	1004943a 	slli	r2,r2,16
    6918:	39ffffcc 	andi	r7,r7,65535
    691c:	2409883a 	add	r4,r4,r16
    6920:	11c5883a 	add	r2,r2,r7
    6924:	4100bb36 	bltu	r8,r4,6c14 <__divdf3+0x7bc>
    6928:	4100d726 	beq	r8,r4,6c88 <__divdf3+0x830>
    692c:	4109c83a 	sub	r4,r8,r4
    6930:	a8a1c83a 	sub	r16,r21,r2
    6934:	ac2b803a 	cmpltu	r21,r21,r16
    6938:	256bc83a 	sub	r21,r4,r21
    693c:	b540d926 	beq	r22,r21,6ca4 <__divdf3+0x84c>
    6940:	a00b883a 	mov	r5,r20
    6944:	a809883a 	mov	r4,r21
    6948:	d8c00215 	stw	r3,8(sp)
    694c:	0005ac80 	call	5ac8 <__udivsi3>
    6950:	100b883a 	mov	r5,r2
    6954:	9009883a 	mov	r4,r18
    6958:	d8800515 	stw	r2,20(sp)
    695c:	0005b840 	call	5b84 <__mulsi3>
    6960:	a809883a 	mov	r4,r21
    6964:	a00b883a 	mov	r5,r20
    6968:	d8800415 	stw	r2,16(sp)
    696c:	0005b2c0 	call	5b2c <__umodsi3>
    6970:	1004943a 	slli	r2,r2,16
    6974:	8008d43a 	srli	r4,r16,16
    6978:	da000417 	ldw	r8,16(sp)
    697c:	d8c00217 	ldw	r3,8(sp)
    6980:	2084b03a 	or	r2,r4,r2
    6984:	d9c00517 	ldw	r7,20(sp)
    6988:	1200062e 	bgeu	r2,r8,69a4 <__divdf3+0x54c>
    698c:	1585883a 	add	r2,r2,r22
    6990:	393fffc4 	addi	r4,r7,-1
    6994:	1580c536 	bltu	r2,r22,6cac <__divdf3+0x854>
    6998:	1200c42e 	bgeu	r2,r8,6cac <__divdf3+0x854>
    699c:	39ffff84 	addi	r7,r7,-2
    69a0:	1585883a 	add	r2,r2,r22
    69a4:	122bc83a 	sub	r21,r2,r8
    69a8:	a00b883a 	mov	r5,r20
    69ac:	a809883a 	mov	r4,r21
    69b0:	d8c00215 	stw	r3,8(sp)
    69b4:	d9c00515 	stw	r7,20(sp)
    69b8:	0005ac80 	call	5ac8 <__udivsi3>
    69bc:	9009883a 	mov	r4,r18
    69c0:	100b883a 	mov	r5,r2
    69c4:	d8800415 	stw	r2,16(sp)
    69c8:	0005b840 	call	5b84 <__mulsi3>
    69cc:	a809883a 	mov	r4,r21
    69d0:	a00b883a 	mov	r5,r20
    69d4:	1025883a 	mov	r18,r2
    69d8:	0005b2c0 	call	5b2c <__umodsi3>
    69dc:	1004943a 	slli	r2,r2,16
    69e0:	813fffcc 	andi	r4,r16,65535
    69e4:	d8c00217 	ldw	r3,8(sp)
    69e8:	20a0b03a 	or	r16,r4,r2
    69ec:	d9c00517 	ldw	r7,20(sp)
    69f0:	da000417 	ldw	r8,16(sp)
    69f4:	8480062e 	bgeu	r16,r18,6a10 <__divdf3+0x5b8>
    69f8:	85a1883a 	add	r16,r16,r22
    69fc:	40bfffc4 	addi	r2,r8,-1
    6a00:	8580ac36 	bltu	r16,r22,6cb4 <__divdf3+0x85c>
    6a04:	8480ab2e 	bgeu	r16,r18,6cb4 <__divdf3+0x85c>
    6a08:	423fff84 	addi	r8,r8,-2
    6a0c:	85a1883a 	add	r16,r16,r22
    6a10:	3804943a 	slli	r2,r7,16
    6a14:	84a1c83a 	sub	r16,r16,r18
    6a18:	e009883a 	mov	r4,fp
    6a1c:	1228b03a 	or	r20,r2,r8
    6a20:	a1ffffcc 	andi	r7,r20,65535
    6a24:	a024d43a 	srli	r18,r20,16
    6a28:	380b883a 	mov	r5,r7
    6a2c:	d8c00215 	stw	r3,8(sp)
    6a30:	d9c00515 	stw	r7,20(sp)
    6a34:	0005b840 	call	5b84 <__mulsi3>
    6a38:	900b883a 	mov	r5,r18
    6a3c:	e009883a 	mov	r4,fp
    6a40:	102b883a 	mov	r21,r2
    6a44:	0005b840 	call	5b84 <__mulsi3>
    6a48:	900b883a 	mov	r5,r18
    6a4c:	b809883a 	mov	r4,r23
    6a50:	1039883a 	mov	fp,r2
    6a54:	0005b840 	call	5b84 <__mulsi3>
    6a58:	d9c00517 	ldw	r7,20(sp)
    6a5c:	b80b883a 	mov	r5,r23
    6a60:	1025883a 	mov	r18,r2
    6a64:	3809883a 	mov	r4,r7
    6a68:	0005b840 	call	5b84 <__mulsi3>
    6a6c:	a808d43a 	srli	r4,r21,16
    6a70:	1705883a 	add	r2,r2,fp
    6a74:	d8c00217 	ldw	r3,8(sp)
    6a78:	2085883a 	add	r2,r4,r2
    6a7c:	1700022e 	bgeu	r2,fp,6a88 <__divdf3+0x630>
    6a80:	01000074 	movhi	r4,1
    6a84:	9125883a 	add	r18,r18,r4
    6a88:	1008d43a 	srli	r4,r2,16
    6a8c:	1004943a 	slli	r2,r2,16
    6a90:	ad7fffcc 	andi	r21,r21,65535
    6a94:	2489883a 	add	r4,r4,r18
    6a98:	1545883a 	add	r2,r2,r21
    6a9c:	81003836 	bltu	r16,r4,6b80 <__divdf3+0x728>
    6aa0:	81003626 	beq	r16,r4,6b7c <__divdf3+0x724>
    6aa4:	a5000054 	ori	r20,r20,1
    6aa8:	1880ffc4 	addi	r2,r3,1023
    6aac:	00bf2e0e 	bge	zero,r2,6768 <__alt_exception_stack_pointer+0xf8006768>
    6ab0:	a10001cc 	andi	r4,r20,7
    6ab4:	20000726 	beq	r4,zero,6ad4 <__divdf3+0x67c>
    6ab8:	a10003cc 	andi	r4,r20,15
    6abc:	01400104 	movi	r5,4
    6ac0:	21400426 	beq	r4,r5,6ad4 <__divdf3+0x67c>
    6ac4:	a149883a 	add	r4,r20,r5
    6ac8:	2529803a 	cmpltu	r20,r4,r20
    6acc:	8d23883a 	add	r17,r17,r20
    6ad0:	2029883a 	mov	r20,r4
    6ad4:	8900402c 	andhi	r4,r17,256
    6ad8:	20000426 	beq	r4,zero,6aec <__divdf3+0x694>
    6adc:	18810004 	addi	r2,r3,1024
    6ae0:	00ffc034 	movhi	r3,65280
    6ae4:	18ffffc4 	addi	r3,r3,-1
    6ae8:	88e2703a 	and	r17,r17,r3
    6aec:	00c1ff84 	movi	r3,2046
    6af0:	18beb416 	blt	r3,r2,65c4 <__alt_exception_stack_pointer+0xf80065c4>
    6af4:	a028d0fa 	srli	r20,r20,3
    6af8:	882a977a 	slli	r21,r17,29
    6afc:	8820927a 	slli	r16,r17,9
    6b00:	1081ffcc 	andi	r2,r2,2047
    6b04:	ad2ab03a 	or	r21,r21,r20
    6b08:	8020d33a 	srli	r16,r16,12
    6b0c:	9900004c 	andi	r4,r19,1
    6b10:	003eb006 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    6b14:	8080022c 	andhi	r2,r16,8
    6b18:	10001226 	beq	r2,zero,6b64 <__divdf3+0x70c>
    6b1c:	8880022c 	andhi	r2,r17,8
    6b20:	1000101e 	bne	r2,zero,6b64 <__divdf3+0x70c>
    6b24:	00800434 	movhi	r2,16
    6b28:	8c000234 	orhi	r16,r17,8
    6b2c:	10bfffc4 	addi	r2,r2,-1
    6b30:	b809883a 	mov	r4,r23
    6b34:	80a0703a 	and	r16,r16,r2
    6b38:	a02b883a 	mov	r21,r20
    6b3c:	003f0806 	br	6760 <__alt_exception_stack_pointer+0xf8006760>
    6b40:	008000c4 	movi	r2,3
    6b44:	3880b126 	beq	r7,r2,6e0c <__divdf3+0x9b4>
    6b48:	00800044 	movi	r2,1
    6b4c:	38805b1e 	bne	r7,r2,6cbc <__divdf3+0x864>
    6b50:	e009883a 	mov	r4,fp
    6b54:	0005883a 	mov	r2,zero
    6b58:	0021883a 	mov	r16,zero
    6b5c:	002b883a 	mov	r21,zero
    6b60:	003e9c06 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    6b64:	00800434 	movhi	r2,16
    6b68:	84000234 	orhi	r16,r16,8
    6b6c:	10bfffc4 	addi	r2,r2,-1
    6b70:	b009883a 	mov	r4,r22
    6b74:	80a0703a 	and	r16,r16,r2
    6b78:	003ef906 	br	6760 <__alt_exception_stack_pointer+0xf8006760>
    6b7c:	103fca26 	beq	r2,zero,6aa8 <__alt_exception_stack_pointer+0xf8006aa8>
    6b80:	b421883a 	add	r16,r22,r16
    6b84:	a17fffc4 	addi	r5,r20,-1
    6b88:	8580422e 	bgeu	r16,r22,6c94 <__divdf3+0x83c>
    6b8c:	2829883a 	mov	r20,r5
    6b90:	813fc41e 	bne	r16,r4,6aa4 <__alt_exception_stack_pointer+0xf8006aa4>
    6b94:	d9800017 	ldw	r6,0(sp)
    6b98:	30bfc21e 	bne	r6,r2,6aa4 <__alt_exception_stack_pointer+0xf8006aa4>
    6b9c:	003fc206 	br	6aa8 <__alt_exception_stack_pointer+0xf8006aa8>
    6ba0:	143ff604 	addi	r16,r2,-40
    6ba4:	8c20983a 	sll	r16,r17,r16
    6ba8:	002b883a 	mov	r21,zero
    6bac:	003eb406 	br	6680 <__alt_exception_stack_pointer+0xf8006680>
    6bb0:	d9800215 	stw	r6,8(sp)
    6bb4:	d9c00515 	stw	r7,20(sp)
    6bb8:	da000415 	stw	r8,16(sp)
    6bbc:	00085b00 	call	85b0 <__clzsi2>
    6bc0:	10800804 	addi	r2,r2,32
    6bc4:	da000417 	ldw	r8,16(sp)
    6bc8:	d9c00517 	ldw	r7,20(sp)
    6bcc:	d9800217 	ldw	r6,8(sp)
    6bd0:	003ea106 	br	6658 <__alt_exception_stack_pointer+0xf8006658>
    6bd4:	147ff604 	addi	r17,r2,-40
    6bd8:	3462983a 	sll	r17,r6,r17
    6bdc:	0029883a 	mov	r20,zero
    6be0:	003ec906 	br	6708 <__alt_exception_stack_pointer+0xf8006708>
    6be4:	3009883a 	mov	r4,r6
    6be8:	d9400115 	stw	r5,4(sp)
    6bec:	d9800215 	stw	r6,8(sp)
    6bf0:	da000415 	stw	r8,16(sp)
    6bf4:	da400315 	stw	r9,12(sp)
    6bf8:	00085b00 	call	85b0 <__clzsi2>
    6bfc:	10800804 	addi	r2,r2,32
    6c00:	da400317 	ldw	r9,12(sp)
    6c04:	da000417 	ldw	r8,16(sp)
    6c08:	d9800217 	ldw	r6,8(sp)
    6c0c:	d9400117 	ldw	r5,4(sp)
    6c10:	003eb306 	br	66e0 <__alt_exception_stack_pointer+0xf80066e0>
    6c14:	d9800017 	ldw	r6,0(sp)
    6c18:	a9ab883a 	add	r21,r21,r6
    6c1c:	a98b803a 	cmpltu	r5,r21,r6
    6c20:	2d8b883a 	add	r5,r5,r22
    6c24:	2a11883a 	add	r8,r5,r8
    6c28:	897fffc4 	addi	r5,r17,-1
    6c2c:	b2000c2e 	bgeu	r22,r8,6c60 <__divdf3+0x808>
    6c30:	41003f36 	bltu	r8,r4,6d30 <__divdf3+0x8d8>
    6c34:	22006c26 	beq	r4,r8,6de8 <__divdf3+0x990>
    6c38:	4109c83a 	sub	r4,r8,r4
    6c3c:	2823883a 	mov	r17,r5
    6c40:	003f3b06 	br	6930 <__alt_exception_stack_pointer+0xf8006930>
    6c44:	ad3ed336 	bltu	r21,r20,6794 <__alt_exception_stack_pointer+0xf8006794>
    6c48:	a804d07a 	srli	r2,r21,1
    6c4c:	802e97fa 	slli	r23,r16,31
    6c50:	a82a97fa 	slli	r21,r21,31
    6c54:	8020d07a 	srli	r16,r16,1
    6c58:	b8aeb03a 	or	r23,r23,r2
    6c5c:	003ed006 	br	67a0 <__alt_exception_stack_pointer+0xf80067a0>
    6c60:	b23ff51e 	bne	r22,r8,6c38 <__alt_exception_stack_pointer+0xf8006c38>
    6c64:	d9800017 	ldw	r6,0(sp)
    6c68:	a9bff12e 	bgeu	r21,r6,6c30 <__alt_exception_stack_pointer+0xf8006c30>
    6c6c:	b109c83a 	sub	r4,r22,r4
    6c70:	2823883a 	mov	r17,r5
    6c74:	003f2e06 	br	6930 <__alt_exception_stack_pointer+0xf8006930>
    6c78:	2021883a 	mov	r16,r4
    6c7c:	003eff06 	br	687c <__alt_exception_stack_pointer+0xf800687c>
    6c80:	2023883a 	mov	r17,r4
    6c84:	003ee406 	br	6818 <__alt_exception_stack_pointer+0xf8006818>
    6c88:	a8bfe236 	bltu	r21,r2,6c14 <__alt_exception_stack_pointer+0xf8006c14>
    6c8c:	0009883a 	mov	r4,zero
    6c90:	003f2706 	br	6930 <__alt_exception_stack_pointer+0xf8006930>
    6c94:	81002d36 	bltu	r16,r4,6d4c <__divdf3+0x8f4>
    6c98:	24005626 	beq	r4,r16,6df4 <__divdf3+0x99c>
    6c9c:	2829883a 	mov	r20,r5
    6ca0:	003f8006 	br	6aa4 <__alt_exception_stack_pointer+0xf8006aa4>
    6ca4:	053fffc4 	movi	r20,-1
    6ca8:	003f7f06 	br	6aa8 <__alt_exception_stack_pointer+0xf8006aa8>
    6cac:	200f883a 	mov	r7,r4
    6cb0:	003f3c06 	br	69a4 <__alt_exception_stack_pointer+0xf80069a4>
    6cb4:	1011883a 	mov	r8,r2
    6cb8:	003f5506 	br	6a10 <__alt_exception_stack_pointer+0xf8006a10>
    6cbc:	e027883a 	mov	r19,fp
    6cc0:	003f7906 	br	6aa8 <__alt_exception_stack_pointer+0xf8006aa8>
    6cc4:	010007c4 	movi	r4,31
    6cc8:	20c02816 	blt	r4,r3,6d6c <__divdf3+0x914>
    6ccc:	00800804 	movi	r2,32
    6cd0:	10c5c83a 	sub	r2,r2,r3
    6cd4:	888a983a 	sll	r5,r17,r2
    6cd8:	a0c8d83a 	srl	r4,r20,r3
    6cdc:	a084983a 	sll	r2,r20,r2
    6ce0:	88e2d83a 	srl	r17,r17,r3
    6ce4:	2906b03a 	or	r3,r5,r4
    6ce8:	1004c03a 	cmpne	r2,r2,zero
    6cec:	1886b03a 	or	r3,r3,r2
    6cf0:	188001cc 	andi	r2,r3,7
    6cf4:	10000726 	beq	r2,zero,6d14 <__divdf3+0x8bc>
    6cf8:	188003cc 	andi	r2,r3,15
    6cfc:	01000104 	movi	r4,4
    6d00:	11000426 	beq	r2,r4,6d14 <__divdf3+0x8bc>
    6d04:	1805883a 	mov	r2,r3
    6d08:	10c00104 	addi	r3,r2,4
    6d0c:	1885803a 	cmpltu	r2,r3,r2
    6d10:	88a3883a 	add	r17,r17,r2
    6d14:	8880202c 	andhi	r2,r17,128
    6d18:	10002926 	beq	r2,zero,6dc0 <__divdf3+0x968>
    6d1c:	9900004c 	andi	r4,r19,1
    6d20:	00800044 	movi	r2,1
    6d24:	0021883a 	mov	r16,zero
    6d28:	002b883a 	mov	r21,zero
    6d2c:	003e2906 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    6d30:	d9800017 	ldw	r6,0(sp)
    6d34:	8c7fff84 	addi	r17,r17,-2
    6d38:	a9ab883a 	add	r21,r21,r6
    6d3c:	a98b803a 	cmpltu	r5,r21,r6
    6d40:	2d8b883a 	add	r5,r5,r22
    6d44:	2a11883a 	add	r8,r5,r8
    6d48:	003ef806 	br	692c <__alt_exception_stack_pointer+0xf800692c>
    6d4c:	d9800017 	ldw	r6,0(sp)
    6d50:	318f883a 	add	r7,r6,r6
    6d54:	398b803a 	cmpltu	r5,r7,r6
    6d58:	2d8d883a 	add	r6,r5,r22
    6d5c:	81a1883a 	add	r16,r16,r6
    6d60:	a17fff84 	addi	r5,r20,-2
    6d64:	d9c00015 	stw	r7,0(sp)
    6d68:	003f8806 	br	6b8c <__alt_exception_stack_pointer+0xf8006b8c>
    6d6c:	013ff844 	movi	r4,-31
    6d70:	2085c83a 	sub	r2,r4,r2
    6d74:	8888d83a 	srl	r4,r17,r2
    6d78:	00800804 	movi	r2,32
    6d7c:	18802126 	beq	r3,r2,6e04 <__divdf3+0x9ac>
    6d80:	04001004 	movi	r16,64
    6d84:	80c7c83a 	sub	r3,r16,r3
    6d88:	88e0983a 	sll	r16,r17,r3
    6d8c:	8504b03a 	or	r2,r16,r20
    6d90:	1004c03a 	cmpne	r2,r2,zero
    6d94:	2084b03a 	or	r2,r4,r2
    6d98:	144001cc 	andi	r17,r2,7
    6d9c:	88000d1e 	bne	r17,zero,6dd4 <__divdf3+0x97c>
    6da0:	0021883a 	mov	r16,zero
    6da4:	102ad0fa 	srli	r21,r2,3
    6da8:	9900004c 	andi	r4,r19,1
    6dac:	0005883a 	mov	r2,zero
    6db0:	ac6ab03a 	or	r21,r21,r17
    6db4:	003e0706 	br	65d4 <__alt_exception_stack_pointer+0xf80065d4>
    6db8:	1007883a 	mov	r3,r2
    6dbc:	0023883a 	mov	r17,zero
    6dc0:	8820927a 	slli	r16,r17,9
    6dc4:	1805883a 	mov	r2,r3
    6dc8:	8822977a 	slli	r17,r17,29
    6dcc:	8020d33a 	srli	r16,r16,12
    6dd0:	003ff406 	br	6da4 <__alt_exception_stack_pointer+0xf8006da4>
    6dd4:	10c003cc 	andi	r3,r2,15
    6dd8:	01000104 	movi	r4,4
    6ddc:	193ff626 	beq	r3,r4,6db8 <__alt_exception_stack_pointer+0xf8006db8>
    6de0:	0023883a 	mov	r17,zero
    6de4:	003fc806 	br	6d08 <__alt_exception_stack_pointer+0xf8006d08>
    6de8:	a8bfd136 	bltu	r21,r2,6d30 <__alt_exception_stack_pointer+0xf8006d30>
    6dec:	2823883a 	mov	r17,r5
    6df0:	003fa606 	br	6c8c <__alt_exception_stack_pointer+0xf8006c8c>
    6df4:	d9800017 	ldw	r6,0(sp)
    6df8:	30bfd436 	bltu	r6,r2,6d4c <__alt_exception_stack_pointer+0xf8006d4c>
    6dfc:	2829883a 	mov	r20,r5
    6e00:	003f6406 	br	6b94 <__alt_exception_stack_pointer+0xf8006b94>
    6e04:	0021883a 	mov	r16,zero
    6e08:	003fe006 	br	6d8c <__alt_exception_stack_pointer+0xf8006d8c>
    6e0c:	00800434 	movhi	r2,16
    6e10:	8c000234 	orhi	r16,r17,8
    6e14:	10bfffc4 	addi	r2,r2,-1
    6e18:	e009883a 	mov	r4,fp
    6e1c:	80a0703a 	and	r16,r16,r2
    6e20:	a02b883a 	mov	r21,r20
    6e24:	003e4e06 	br	6760 <__alt_exception_stack_pointer+0xf8006760>

00006e28 <__eqdf2>:
    6e28:	2804d53a 	srli	r2,r5,20
    6e2c:	3806d53a 	srli	r3,r7,20
    6e30:	02000434 	movhi	r8,16
    6e34:	423fffc4 	addi	r8,r8,-1
    6e38:	1081ffcc 	andi	r2,r2,2047
    6e3c:	0281ffc4 	movi	r10,2047
    6e40:	2a12703a 	and	r9,r5,r8
    6e44:	18c1ffcc 	andi	r3,r3,2047
    6e48:	3a10703a 	and	r8,r7,r8
    6e4c:	280ad7fa 	srli	r5,r5,31
    6e50:	380ed7fa 	srli	r7,r7,31
    6e54:	12801026 	beq	r2,r10,6e98 <__eqdf2+0x70>
    6e58:	0281ffc4 	movi	r10,2047
    6e5c:	1a800a26 	beq	r3,r10,6e88 <__eqdf2+0x60>
    6e60:	10c00226 	beq	r2,r3,6e6c <__eqdf2+0x44>
    6e64:	00800044 	movi	r2,1
    6e68:	f800283a 	ret
    6e6c:	4a3ffd1e 	bne	r9,r8,6e64 <__alt_exception_stack_pointer+0xf8006e64>
    6e70:	21bffc1e 	bne	r4,r6,6e64 <__alt_exception_stack_pointer+0xf8006e64>
    6e74:	29c00c26 	beq	r5,r7,6ea8 <__eqdf2+0x80>
    6e78:	103ffa1e 	bne	r2,zero,6e64 <__alt_exception_stack_pointer+0xf8006e64>
    6e7c:	2244b03a 	or	r2,r4,r9
    6e80:	1004c03a 	cmpne	r2,r2,zero
    6e84:	f800283a 	ret
    6e88:	3214b03a 	or	r10,r6,r8
    6e8c:	503ff426 	beq	r10,zero,6e60 <__alt_exception_stack_pointer+0xf8006e60>
    6e90:	00800044 	movi	r2,1
    6e94:	f800283a 	ret
    6e98:	2254b03a 	or	r10,r4,r9
    6e9c:	503fee26 	beq	r10,zero,6e58 <__alt_exception_stack_pointer+0xf8006e58>
    6ea0:	00800044 	movi	r2,1
    6ea4:	f800283a 	ret
    6ea8:	0005883a 	mov	r2,zero
    6eac:	f800283a 	ret

00006eb0 <__gedf2>:
    6eb0:	2804d53a 	srli	r2,r5,20
    6eb4:	3806d53a 	srli	r3,r7,20
    6eb8:	02000434 	movhi	r8,16
    6ebc:	423fffc4 	addi	r8,r8,-1
    6ec0:	1081ffcc 	andi	r2,r2,2047
    6ec4:	0241ffc4 	movi	r9,2047
    6ec8:	2a14703a 	and	r10,r5,r8
    6ecc:	18c1ffcc 	andi	r3,r3,2047
    6ed0:	3a10703a 	and	r8,r7,r8
    6ed4:	280ad7fa 	srli	r5,r5,31
    6ed8:	380ed7fa 	srli	r7,r7,31
    6edc:	12401d26 	beq	r2,r9,6f54 <__gedf2+0xa4>
    6ee0:	0241ffc4 	movi	r9,2047
    6ee4:	1a401226 	beq	r3,r9,6f30 <__gedf2+0x80>
    6ee8:	1000081e 	bne	r2,zero,6f0c <__gedf2+0x5c>
    6eec:	2296b03a 	or	r11,r4,r10
    6ef0:	5813003a 	cmpeq	r9,r11,zero
    6ef4:	1800091e 	bne	r3,zero,6f1c <__gedf2+0x6c>
    6ef8:	3218b03a 	or	r12,r6,r8
    6efc:	6000071e 	bne	r12,zero,6f1c <__gedf2+0x6c>
    6f00:	0005883a 	mov	r2,zero
    6f04:	5800101e 	bne	r11,zero,6f48 <__gedf2+0x98>
    6f08:	f800283a 	ret
    6f0c:	18000c1e 	bne	r3,zero,6f40 <__gedf2+0x90>
    6f10:	3212b03a 	or	r9,r6,r8
    6f14:	48000c26 	beq	r9,zero,6f48 <__gedf2+0x98>
    6f18:	0013883a 	mov	r9,zero
    6f1c:	39c03fcc 	andi	r7,r7,255
    6f20:	48000826 	beq	r9,zero,6f44 <__gedf2+0x94>
    6f24:	38000926 	beq	r7,zero,6f4c <__gedf2+0x9c>
    6f28:	00800044 	movi	r2,1
    6f2c:	f800283a 	ret
    6f30:	3212b03a 	or	r9,r6,r8
    6f34:	483fec26 	beq	r9,zero,6ee8 <__alt_exception_stack_pointer+0xf8006ee8>
    6f38:	00bfff84 	movi	r2,-2
    6f3c:	f800283a 	ret
    6f40:	39c03fcc 	andi	r7,r7,255
    6f44:	29c00626 	beq	r5,r7,6f60 <__gedf2+0xb0>
    6f48:	283ff726 	beq	r5,zero,6f28 <__alt_exception_stack_pointer+0xf8006f28>
    6f4c:	00bfffc4 	movi	r2,-1
    6f50:	f800283a 	ret
    6f54:	2292b03a 	or	r9,r4,r10
    6f58:	483fe126 	beq	r9,zero,6ee0 <__alt_exception_stack_pointer+0xf8006ee0>
    6f5c:	003ff606 	br	6f38 <__alt_exception_stack_pointer+0xf8006f38>
    6f60:	18bff916 	blt	r3,r2,6f48 <__alt_exception_stack_pointer+0xf8006f48>
    6f64:	10c00316 	blt	r2,r3,6f74 <__gedf2+0xc4>
    6f68:	42bff736 	bltu	r8,r10,6f48 <__alt_exception_stack_pointer+0xf8006f48>
    6f6c:	52000326 	beq	r10,r8,6f7c <__gedf2+0xcc>
    6f70:	5200042e 	bgeu	r10,r8,6f84 <__gedf2+0xd4>
    6f74:	283fec1e 	bne	r5,zero,6f28 <__alt_exception_stack_pointer+0xf8006f28>
    6f78:	003ff406 	br	6f4c <__alt_exception_stack_pointer+0xf8006f4c>
    6f7c:	313ff236 	bltu	r6,r4,6f48 <__alt_exception_stack_pointer+0xf8006f48>
    6f80:	21bffc36 	bltu	r4,r6,6f74 <__alt_exception_stack_pointer+0xf8006f74>
    6f84:	0005883a 	mov	r2,zero
    6f88:	f800283a 	ret

00006f8c <__muldf3>:
    6f8c:	deffee04 	addi	sp,sp,-72
    6f90:	dd000c15 	stw	r20,48(sp)
    6f94:	2828d53a 	srli	r20,r5,20
    6f98:	ddc00f15 	stw	r23,60(sp)
    6f9c:	282ed7fa 	srli	r23,r5,31
    6fa0:	dc000815 	stw	r16,32(sp)
    6fa4:	04000434 	movhi	r16,16
    6fa8:	dcc00b15 	stw	r19,44(sp)
    6fac:	843fffc4 	addi	r16,r16,-1
    6fb0:	dfc01115 	stw	ra,68(sp)
    6fb4:	df001015 	stw	fp,64(sp)
    6fb8:	dd800e15 	stw	r22,56(sp)
    6fbc:	dd400d15 	stw	r21,52(sp)
    6fc0:	dc800a15 	stw	r18,40(sp)
    6fc4:	dc400915 	stw	r17,36(sp)
    6fc8:	a501ffcc 	andi	r20,r20,2047
    6fcc:	2c20703a 	and	r16,r5,r16
    6fd0:	b827883a 	mov	r19,r23
    6fd4:	ba403fcc 	andi	r9,r23,255
    6fd8:	a0006026 	beq	r20,zero,715c <__muldf3+0x1d0>
    6fdc:	0081ffc4 	movi	r2,2047
    6fe0:	202d883a 	mov	r22,r4
    6fe4:	a0803626 	beq	r20,r2,70c0 <__muldf3+0x134>
    6fe8:	84000434 	orhi	r16,r16,16
    6fec:	200ad77a 	srli	r5,r4,29
    6ff0:	800490fa 	slli	r2,r16,3
    6ff4:	202c90fa 	slli	r22,r4,3
    6ff8:	a53f0044 	addi	r20,r20,-1023
    6ffc:	28a0b03a 	or	r16,r5,r2
    7000:	002b883a 	mov	r21,zero
    7004:	000b883a 	mov	r5,zero
    7008:	3804d53a 	srli	r2,r7,20
    700c:	3838d7fa 	srli	fp,r7,31
    7010:	04400434 	movhi	r17,16
    7014:	8c7fffc4 	addi	r17,r17,-1
    7018:	1081ffcc 	andi	r2,r2,2047
    701c:	3025883a 	mov	r18,r6
    7020:	3c62703a 	and	r17,r7,r17
    7024:	e2803fcc 	andi	r10,fp,255
    7028:	10006d26 	beq	r2,zero,71e0 <__muldf3+0x254>
    702c:	00c1ffc4 	movi	r3,2047
    7030:	10c06526 	beq	r2,r3,71c8 <__muldf3+0x23c>
    7034:	8c400434 	orhi	r17,r17,16
    7038:	300ed77a 	srli	r7,r6,29
    703c:	880690fa 	slli	r3,r17,3
    7040:	302490fa 	slli	r18,r6,3
    7044:	10bf0044 	addi	r2,r2,-1023
    7048:	38e2b03a 	or	r17,r7,r3
    704c:	000f883a 	mov	r7,zero
    7050:	a087883a 	add	r3,r20,r2
    7054:	010003c4 	movi	r4,15
    7058:	3d44b03a 	or	r2,r7,r21
    705c:	e5ccf03a 	xor	r6,fp,r23
    7060:	1a000044 	addi	r8,r3,1
    7064:	20809b36 	bltu	r4,r2,72d4 <__muldf3+0x348>
    7068:	100490ba 	slli	r2,r2,2
    706c:	01000034 	movhi	r4,0
    7070:	211c2004 	addi	r4,r4,28800
    7074:	1105883a 	add	r2,r2,r4
    7078:	10800017 	ldw	r2,0(r2)
    707c:	1000683a 	jmp	r2
    7080:	000072d4 	movui	zero,459
    7084:	000070e0 	cmpeqi	zero,zero,451
    7088:	000070e0 	cmpeqi	zero,zero,451
    708c:	000070dc 	xori	zero,zero,451
    7090:	000072b0 	cmpltui	zero,zero,458
    7094:	000072b0 	cmpltui	zero,zero,458
    7098:	00007298 	cmpnei	zero,zero,458
    709c:	000070dc 	xori	zero,zero,451
    70a0:	000072b0 	cmpltui	zero,zero,458
    70a4:	00007298 	cmpnei	zero,zero,458
    70a8:	000072b0 	cmpltui	zero,zero,458
    70ac:	000070dc 	xori	zero,zero,451
    70b0:	000072c0 	call	72c <draw_char+0xdc>
    70b4:	000072c0 	call	72c <draw_char+0xdc>
    70b8:	000072c0 	call	72c <draw_char+0xdc>
    70bc:	00007620 	cmpeqi	zero,zero,472
    70c0:	2404b03a 	or	r2,r4,r16
    70c4:	1000711e 	bne	r2,zero,728c <__muldf3+0x300>
    70c8:	05400204 	movi	r21,8
    70cc:	0021883a 	mov	r16,zero
    70d0:	002d883a 	mov	r22,zero
    70d4:	01400084 	movi	r5,2
    70d8:	003fcb06 	br	7008 <__alt_exception_stack_pointer+0xf8007008>
    70dc:	500d883a 	mov	r6,r10
    70e0:	00800084 	movi	r2,2
    70e4:	38805926 	beq	r7,r2,724c <__muldf3+0x2c0>
    70e8:	008000c4 	movi	r2,3
    70ec:	3881bb26 	beq	r7,r2,77dc <__muldf3+0x850>
    70f0:	00800044 	movi	r2,1
    70f4:	3881961e 	bne	r7,r2,7750 <__muldf3+0x7c4>
    70f8:	3027883a 	mov	r19,r6
    70fc:	0005883a 	mov	r2,zero
    7100:	0021883a 	mov	r16,zero
    7104:	002d883a 	mov	r22,zero
    7108:	1004953a 	slli	r2,r2,20
    710c:	98c03fcc 	andi	r3,r19,255
    7110:	04400434 	movhi	r17,16
    7114:	8c7fffc4 	addi	r17,r17,-1
    7118:	180697fa 	slli	r3,r3,31
    711c:	8460703a 	and	r16,r16,r17
    7120:	80a0b03a 	or	r16,r16,r2
    7124:	80c6b03a 	or	r3,r16,r3
    7128:	b005883a 	mov	r2,r22
    712c:	dfc01117 	ldw	ra,68(sp)
    7130:	df001017 	ldw	fp,64(sp)
    7134:	ddc00f17 	ldw	r23,60(sp)
    7138:	dd800e17 	ldw	r22,56(sp)
    713c:	dd400d17 	ldw	r21,52(sp)
    7140:	dd000c17 	ldw	r20,48(sp)
    7144:	dcc00b17 	ldw	r19,44(sp)
    7148:	dc800a17 	ldw	r18,40(sp)
    714c:	dc400917 	ldw	r17,36(sp)
    7150:	dc000817 	ldw	r16,32(sp)
    7154:	dec01204 	addi	sp,sp,72
    7158:	f800283a 	ret
    715c:	2404b03a 	or	r2,r4,r16
    7160:	202b883a 	mov	r21,r4
    7164:	10004426 	beq	r2,zero,7278 <__muldf3+0x2ec>
    7168:	80015126 	beq	r16,zero,76b0 <__muldf3+0x724>
    716c:	8009883a 	mov	r4,r16
    7170:	d9800715 	stw	r6,28(sp)
    7174:	d9c00215 	stw	r7,8(sp)
    7178:	da400415 	stw	r9,16(sp)
    717c:	00085b00 	call	85b0 <__clzsi2>
    7180:	d9800717 	ldw	r6,28(sp)
    7184:	d9c00217 	ldw	r7,8(sp)
    7188:	da400417 	ldw	r9,16(sp)
    718c:	113ffd44 	addi	r4,r2,-11
    7190:	00c00704 	movi	r3,28
    7194:	19014216 	blt	r3,r4,76a0 <__muldf3+0x714>
    7198:	00c00744 	movi	r3,29
    719c:	15bffe04 	addi	r22,r2,-8
    71a0:	1907c83a 	sub	r3,r3,r4
    71a4:	85a0983a 	sll	r16,r16,r22
    71a8:	a8c6d83a 	srl	r3,r21,r3
    71ac:	adac983a 	sll	r22,r21,r22
    71b0:	1c20b03a 	or	r16,r3,r16
    71b4:	1080fcc4 	addi	r2,r2,1011
    71b8:	00a9c83a 	sub	r20,zero,r2
    71bc:	002b883a 	mov	r21,zero
    71c0:	000b883a 	mov	r5,zero
    71c4:	003f9006 	br	7008 <__alt_exception_stack_pointer+0xf8007008>
    71c8:	3446b03a 	or	r3,r6,r17
    71cc:	1800281e 	bne	r3,zero,7270 <__muldf3+0x2e4>
    71d0:	0023883a 	mov	r17,zero
    71d4:	0025883a 	mov	r18,zero
    71d8:	01c00084 	movi	r7,2
    71dc:	003f9c06 	br	7050 <__alt_exception_stack_pointer+0xf8007050>
    71e0:	3446b03a 	or	r3,r6,r17
    71e4:	18001e26 	beq	r3,zero,7260 <__muldf3+0x2d4>
    71e8:	88012126 	beq	r17,zero,7670 <__muldf3+0x6e4>
    71ec:	8809883a 	mov	r4,r17
    71f0:	d9400215 	stw	r5,8(sp)
    71f4:	d9800715 	stw	r6,28(sp)
    71f8:	da400415 	stw	r9,16(sp)
    71fc:	da800315 	stw	r10,12(sp)
    7200:	00085b00 	call	85b0 <__clzsi2>
    7204:	d9400217 	ldw	r5,8(sp)
    7208:	d9800717 	ldw	r6,28(sp)
    720c:	da400417 	ldw	r9,16(sp)
    7210:	da800317 	ldw	r10,12(sp)
    7214:	113ffd44 	addi	r4,r2,-11
    7218:	00c00704 	movi	r3,28
    721c:	19011016 	blt	r3,r4,7660 <__muldf3+0x6d4>
    7220:	00c00744 	movi	r3,29
    7224:	14bffe04 	addi	r18,r2,-8
    7228:	1907c83a 	sub	r3,r3,r4
    722c:	8ca2983a 	sll	r17,r17,r18
    7230:	30c6d83a 	srl	r3,r6,r3
    7234:	34a4983a 	sll	r18,r6,r18
    7238:	1c62b03a 	or	r17,r3,r17
    723c:	1080fcc4 	addi	r2,r2,1011
    7240:	0085c83a 	sub	r2,zero,r2
    7244:	000f883a 	mov	r7,zero
    7248:	003f8106 	br	7050 <__alt_exception_stack_pointer+0xf8007050>
    724c:	3027883a 	mov	r19,r6
    7250:	0081ffc4 	movi	r2,2047
    7254:	0021883a 	mov	r16,zero
    7258:	002d883a 	mov	r22,zero
    725c:	003faa06 	br	7108 <__alt_exception_stack_pointer+0xf8007108>
    7260:	0023883a 	mov	r17,zero
    7264:	0025883a 	mov	r18,zero
    7268:	01c00044 	movi	r7,1
    726c:	003f7806 	br	7050 <__alt_exception_stack_pointer+0xf8007050>
    7270:	01c000c4 	movi	r7,3
    7274:	003f7606 	br	7050 <__alt_exception_stack_pointer+0xf8007050>
    7278:	05400104 	movi	r21,4
    727c:	0021883a 	mov	r16,zero
    7280:	002d883a 	mov	r22,zero
    7284:	01400044 	movi	r5,1
    7288:	003f5f06 	br	7008 <__alt_exception_stack_pointer+0xf8007008>
    728c:	05400304 	movi	r21,12
    7290:	014000c4 	movi	r5,3
    7294:	003f5c06 	br	7008 <__alt_exception_stack_pointer+0xf8007008>
    7298:	04000434 	movhi	r16,16
    729c:	0027883a 	mov	r19,zero
    72a0:	843fffc4 	addi	r16,r16,-1
    72a4:	05bfffc4 	movi	r22,-1
    72a8:	0081ffc4 	movi	r2,2047
    72ac:	003f9606 	br	7108 <__alt_exception_stack_pointer+0xf8007108>
    72b0:	8023883a 	mov	r17,r16
    72b4:	b025883a 	mov	r18,r22
    72b8:	280f883a 	mov	r7,r5
    72bc:	003f8806 	br	70e0 <__alt_exception_stack_pointer+0xf80070e0>
    72c0:	8023883a 	mov	r17,r16
    72c4:	b025883a 	mov	r18,r22
    72c8:	480d883a 	mov	r6,r9
    72cc:	280f883a 	mov	r7,r5
    72d0:	003f8306 	br	70e0 <__alt_exception_stack_pointer+0xf80070e0>
    72d4:	b026d43a 	srli	r19,r22,16
    72d8:	902ed43a 	srli	r23,r18,16
    72dc:	b5bfffcc 	andi	r22,r22,65535
    72e0:	94bfffcc 	andi	r18,r18,65535
    72e4:	b00b883a 	mov	r5,r22
    72e8:	9009883a 	mov	r4,r18
    72ec:	d8c00515 	stw	r3,20(sp)
    72f0:	d9800715 	stw	r6,28(sp)
    72f4:	da000615 	stw	r8,24(sp)
    72f8:	0005b840 	call	5b84 <__mulsi3>
    72fc:	980b883a 	mov	r5,r19
    7300:	9009883a 	mov	r4,r18
    7304:	1029883a 	mov	r20,r2
    7308:	0005b840 	call	5b84 <__mulsi3>
    730c:	b80b883a 	mov	r5,r23
    7310:	9809883a 	mov	r4,r19
    7314:	102b883a 	mov	r21,r2
    7318:	0005b840 	call	5b84 <__mulsi3>
    731c:	b809883a 	mov	r4,r23
    7320:	b00b883a 	mov	r5,r22
    7324:	1039883a 	mov	fp,r2
    7328:	0005b840 	call	5b84 <__mulsi3>
    732c:	a008d43a 	srli	r4,r20,16
    7330:	1545883a 	add	r2,r2,r21
    7334:	d8c00517 	ldw	r3,20(sp)
    7338:	2085883a 	add	r2,r4,r2
    733c:	d9800717 	ldw	r6,28(sp)
    7340:	da000617 	ldw	r8,24(sp)
    7344:	1540022e 	bgeu	r2,r21,7350 <__muldf3+0x3c4>
    7348:	01000074 	movhi	r4,1
    734c:	e139883a 	add	fp,fp,r4
    7350:	100e943a 	slli	r7,r2,16
    7354:	1004d43a 	srli	r2,r2,16
    7358:	882ad43a 	srli	r21,r17,16
    735c:	a53fffcc 	andi	r20,r20,65535
    7360:	8c7fffcc 	andi	r17,r17,65535
    7364:	3d29883a 	add	r20,r7,r20
    7368:	b00b883a 	mov	r5,r22
    736c:	8809883a 	mov	r4,r17
    7370:	d8c00515 	stw	r3,20(sp)
    7374:	d9800715 	stw	r6,28(sp)
    7378:	da000615 	stw	r8,24(sp)
    737c:	dd000115 	stw	r20,4(sp)
    7380:	d8800015 	stw	r2,0(sp)
    7384:	0005b840 	call	5b84 <__mulsi3>
    7388:	980b883a 	mov	r5,r19
    738c:	8809883a 	mov	r4,r17
    7390:	d8800215 	stw	r2,8(sp)
    7394:	0005b840 	call	5b84 <__mulsi3>
    7398:	9809883a 	mov	r4,r19
    739c:	a80b883a 	mov	r5,r21
    73a0:	1029883a 	mov	r20,r2
    73a4:	0005b840 	call	5b84 <__mulsi3>
    73a8:	b00b883a 	mov	r5,r22
    73ac:	a809883a 	mov	r4,r21
    73b0:	d8800415 	stw	r2,16(sp)
    73b4:	0005b840 	call	5b84 <__mulsi3>
    73b8:	d9c00217 	ldw	r7,8(sp)
    73bc:	1505883a 	add	r2,r2,r20
    73c0:	d8c00517 	ldw	r3,20(sp)
    73c4:	3826d43a 	srli	r19,r7,16
    73c8:	d9800717 	ldw	r6,28(sp)
    73cc:	da000617 	ldw	r8,24(sp)
    73d0:	9885883a 	add	r2,r19,r2
    73d4:	da400417 	ldw	r9,16(sp)
    73d8:	1500022e 	bgeu	r2,r20,73e4 <__muldf3+0x458>
    73dc:	01000074 	movhi	r4,1
    73e0:	4913883a 	add	r9,r9,r4
    73e4:	1028d43a 	srli	r20,r2,16
    73e8:	1004943a 	slli	r2,r2,16
    73ec:	802cd43a 	srli	r22,r16,16
    73f0:	843fffcc 	andi	r16,r16,65535
    73f4:	3cffffcc 	andi	r19,r7,65535
    73f8:	9009883a 	mov	r4,r18
    73fc:	800b883a 	mov	r5,r16
    7400:	a269883a 	add	r20,r20,r9
    7404:	d8c00515 	stw	r3,20(sp)
    7408:	d9800715 	stw	r6,28(sp)
    740c:	da000615 	stw	r8,24(sp)
    7410:	14e7883a 	add	r19,r2,r19
    7414:	0005b840 	call	5b84 <__mulsi3>
    7418:	9009883a 	mov	r4,r18
    741c:	b00b883a 	mov	r5,r22
    7420:	d8800315 	stw	r2,12(sp)
    7424:	0005b840 	call	5b84 <__mulsi3>
    7428:	b809883a 	mov	r4,r23
    742c:	b00b883a 	mov	r5,r22
    7430:	d8800215 	stw	r2,8(sp)
    7434:	0005b840 	call	5b84 <__mulsi3>
    7438:	b80b883a 	mov	r5,r23
    743c:	8009883a 	mov	r4,r16
    7440:	d8800415 	stw	r2,16(sp)
    7444:	0005b840 	call	5b84 <__mulsi3>
    7448:	da800317 	ldw	r10,12(sp)
    744c:	d9c00217 	ldw	r7,8(sp)
    7450:	d9000017 	ldw	r4,0(sp)
    7454:	502ed43a 	srli	r23,r10,16
    7458:	11c5883a 	add	r2,r2,r7
    745c:	24e5883a 	add	r18,r4,r19
    7460:	b885883a 	add	r2,r23,r2
    7464:	d8c00517 	ldw	r3,20(sp)
    7468:	d9800717 	ldw	r6,28(sp)
    746c:	da000617 	ldw	r8,24(sp)
    7470:	da400417 	ldw	r9,16(sp)
    7474:	11c0022e 	bgeu	r2,r7,7480 <__muldf3+0x4f4>
    7478:	01000074 	movhi	r4,1
    747c:	4913883a 	add	r9,r9,r4
    7480:	100ed43a 	srli	r7,r2,16
    7484:	1004943a 	slli	r2,r2,16
    7488:	55ffffcc 	andi	r23,r10,65535
    748c:	3a53883a 	add	r9,r7,r9
    7490:	8809883a 	mov	r4,r17
    7494:	800b883a 	mov	r5,r16
    7498:	d8c00515 	stw	r3,20(sp)
    749c:	d9800715 	stw	r6,28(sp)
    74a0:	da000615 	stw	r8,24(sp)
    74a4:	da400415 	stw	r9,16(sp)
    74a8:	15ef883a 	add	r23,r2,r23
    74ac:	0005b840 	call	5b84 <__mulsi3>
    74b0:	8809883a 	mov	r4,r17
    74b4:	b00b883a 	mov	r5,r22
    74b8:	d8800215 	stw	r2,8(sp)
    74bc:	0005b840 	call	5b84 <__mulsi3>
    74c0:	b00b883a 	mov	r5,r22
    74c4:	a809883a 	mov	r4,r21
    74c8:	d8800315 	stw	r2,12(sp)
    74cc:	0005b840 	call	5b84 <__mulsi3>
    74d0:	8009883a 	mov	r4,r16
    74d4:	a80b883a 	mov	r5,r21
    74d8:	1023883a 	mov	r17,r2
    74dc:	0005b840 	call	5b84 <__mulsi3>
    74e0:	d9c00217 	ldw	r7,8(sp)
    74e4:	da800317 	ldw	r10,12(sp)
    74e8:	d8c00517 	ldw	r3,20(sp)
    74ec:	3808d43a 	srli	r4,r7,16
    74f0:	1285883a 	add	r2,r2,r10
    74f4:	d9800717 	ldw	r6,28(sp)
    74f8:	2085883a 	add	r2,r4,r2
    74fc:	da000617 	ldw	r8,24(sp)
    7500:	da400417 	ldw	r9,16(sp)
    7504:	1280022e 	bgeu	r2,r10,7510 <__muldf3+0x584>
    7508:	01000074 	movhi	r4,1
    750c:	8923883a 	add	r17,r17,r4
    7510:	1008943a 	slli	r4,r2,16
    7514:	39ffffcc 	andi	r7,r7,65535
    7518:	e4b9883a 	add	fp,fp,r18
    751c:	21cf883a 	add	r7,r4,r7
    7520:	e4e7803a 	cmpltu	r19,fp,r19
    7524:	3d0f883a 	add	r7,r7,r20
    7528:	bf39883a 	add	fp,r23,fp
    752c:	99c9883a 	add	r4,r19,r7
    7530:	e5ef803a 	cmpltu	r23,fp,r23
    7534:	490b883a 	add	r5,r9,r4
    7538:	1004d43a 	srli	r2,r2,16
    753c:	b965883a 	add	r18,r23,r5
    7540:	24c9803a 	cmpltu	r4,r4,r19
    7544:	3d29803a 	cmpltu	r20,r7,r20
    7548:	a128b03a 	or	r20,r20,r4
    754c:	95ef803a 	cmpltu	r23,r18,r23
    7550:	2a53803a 	cmpltu	r9,r5,r9
    7554:	a0a9883a 	add	r20,r20,r2
    7558:	4deeb03a 	or	r23,r9,r23
    755c:	a5ef883a 	add	r23,r20,r23
    7560:	bc63883a 	add	r17,r23,r17
    7564:	e004927a 	slli	r2,fp,9
    7568:	d9000117 	ldw	r4,4(sp)
    756c:	882e927a 	slli	r23,r17,9
    7570:	9022d5fa 	srli	r17,r18,23
    7574:	e038d5fa 	srli	fp,fp,23
    7578:	1104b03a 	or	r2,r2,r4
    757c:	9024927a 	slli	r18,r18,9
    7580:	1004c03a 	cmpne	r2,r2,zero
    7584:	bc62b03a 	or	r17,r23,r17
    7588:	1738b03a 	or	fp,r2,fp
    758c:	8880402c 	andhi	r2,r17,256
    7590:	e4a4b03a 	or	r18,fp,r18
    7594:	10000726 	beq	r2,zero,75b4 <__muldf3+0x628>
    7598:	9006d07a 	srli	r3,r18,1
    759c:	880497fa 	slli	r2,r17,31
    75a0:	9480004c 	andi	r18,r18,1
    75a4:	8822d07a 	srli	r17,r17,1
    75a8:	1ca4b03a 	or	r18,r3,r18
    75ac:	14a4b03a 	or	r18,r2,r18
    75b0:	4007883a 	mov	r3,r8
    75b4:	1880ffc4 	addi	r2,r3,1023
    75b8:	0080460e 	bge	zero,r2,76d4 <__muldf3+0x748>
    75bc:	910001cc 	andi	r4,r18,7
    75c0:	20000726 	beq	r4,zero,75e0 <__muldf3+0x654>
    75c4:	910003cc 	andi	r4,r18,15
    75c8:	01400104 	movi	r5,4
    75cc:	21400426 	beq	r4,r5,75e0 <__muldf3+0x654>
    75d0:	9149883a 	add	r4,r18,r5
    75d4:	24a5803a 	cmpltu	r18,r4,r18
    75d8:	8ca3883a 	add	r17,r17,r18
    75dc:	2025883a 	mov	r18,r4
    75e0:	8900402c 	andhi	r4,r17,256
    75e4:	20000426 	beq	r4,zero,75f8 <__muldf3+0x66c>
    75e8:	18810004 	addi	r2,r3,1024
    75ec:	00ffc034 	movhi	r3,65280
    75f0:	18ffffc4 	addi	r3,r3,-1
    75f4:	88e2703a 	and	r17,r17,r3
    75f8:	00c1ff84 	movi	r3,2046
    75fc:	18bf1316 	blt	r3,r2,724c <__alt_exception_stack_pointer+0xf800724c>
    7600:	882c977a 	slli	r22,r17,29
    7604:	9024d0fa 	srli	r18,r18,3
    7608:	8822927a 	slli	r17,r17,9
    760c:	1081ffcc 	andi	r2,r2,2047
    7610:	b4acb03a 	or	r22,r22,r18
    7614:	8820d33a 	srli	r16,r17,12
    7618:	3027883a 	mov	r19,r6
    761c:	003eba06 	br	7108 <__alt_exception_stack_pointer+0xf8007108>
    7620:	8080022c 	andhi	r2,r16,8
    7624:	10000926 	beq	r2,zero,764c <__muldf3+0x6c0>
    7628:	8880022c 	andhi	r2,r17,8
    762c:	1000071e 	bne	r2,zero,764c <__muldf3+0x6c0>
    7630:	00800434 	movhi	r2,16
    7634:	8c000234 	orhi	r16,r17,8
    7638:	10bfffc4 	addi	r2,r2,-1
    763c:	e027883a 	mov	r19,fp
    7640:	80a0703a 	and	r16,r16,r2
    7644:	902d883a 	mov	r22,r18
    7648:	003f1706 	br	72a8 <__alt_exception_stack_pointer+0xf80072a8>
    764c:	00800434 	movhi	r2,16
    7650:	84000234 	orhi	r16,r16,8
    7654:	10bfffc4 	addi	r2,r2,-1
    7658:	80a0703a 	and	r16,r16,r2
    765c:	003f1206 	br	72a8 <__alt_exception_stack_pointer+0xf80072a8>
    7660:	147ff604 	addi	r17,r2,-40
    7664:	3462983a 	sll	r17,r6,r17
    7668:	0025883a 	mov	r18,zero
    766c:	003ef306 	br	723c <__alt_exception_stack_pointer+0xf800723c>
    7670:	3009883a 	mov	r4,r6
    7674:	d9400215 	stw	r5,8(sp)
    7678:	d9800715 	stw	r6,28(sp)
    767c:	da400415 	stw	r9,16(sp)
    7680:	da800315 	stw	r10,12(sp)
    7684:	00085b00 	call	85b0 <__clzsi2>
    7688:	10800804 	addi	r2,r2,32
    768c:	da800317 	ldw	r10,12(sp)
    7690:	da400417 	ldw	r9,16(sp)
    7694:	d9800717 	ldw	r6,28(sp)
    7698:	d9400217 	ldw	r5,8(sp)
    769c:	003edd06 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    76a0:	143ff604 	addi	r16,r2,-40
    76a4:	ac20983a 	sll	r16,r21,r16
    76a8:	002d883a 	mov	r22,zero
    76ac:	003ec106 	br	71b4 <__alt_exception_stack_pointer+0xf80071b4>
    76b0:	d9800715 	stw	r6,28(sp)
    76b4:	d9c00215 	stw	r7,8(sp)
    76b8:	da400415 	stw	r9,16(sp)
    76bc:	00085b00 	call	85b0 <__clzsi2>
    76c0:	10800804 	addi	r2,r2,32
    76c4:	da400417 	ldw	r9,16(sp)
    76c8:	d9c00217 	ldw	r7,8(sp)
    76cc:	d9800717 	ldw	r6,28(sp)
    76d0:	003eae06 	br	718c <__alt_exception_stack_pointer+0xf800718c>
    76d4:	00c00044 	movi	r3,1
    76d8:	1887c83a 	sub	r3,r3,r2
    76dc:	01000e04 	movi	r4,56
    76e0:	20fe8516 	blt	r4,r3,70f8 <__alt_exception_stack_pointer+0xf80070f8>
    76e4:	010007c4 	movi	r4,31
    76e8:	20c01b16 	blt	r4,r3,7758 <__muldf3+0x7cc>
    76ec:	00800804 	movi	r2,32
    76f0:	10c5c83a 	sub	r2,r2,r3
    76f4:	888a983a 	sll	r5,r17,r2
    76f8:	90c8d83a 	srl	r4,r18,r3
    76fc:	9084983a 	sll	r2,r18,r2
    7700:	88e2d83a 	srl	r17,r17,r3
    7704:	2906b03a 	or	r3,r5,r4
    7708:	1004c03a 	cmpne	r2,r2,zero
    770c:	1886b03a 	or	r3,r3,r2
    7710:	188001cc 	andi	r2,r3,7
    7714:	10000726 	beq	r2,zero,7734 <__muldf3+0x7a8>
    7718:	188003cc 	andi	r2,r3,15
    771c:	01000104 	movi	r4,4
    7720:	11000426 	beq	r2,r4,7734 <__muldf3+0x7a8>
    7724:	1805883a 	mov	r2,r3
    7728:	10c00104 	addi	r3,r2,4
    772c:	1885803a 	cmpltu	r2,r3,r2
    7730:	88a3883a 	add	r17,r17,r2
    7734:	8880202c 	andhi	r2,r17,128
    7738:	10001c26 	beq	r2,zero,77ac <__muldf3+0x820>
    773c:	3027883a 	mov	r19,r6
    7740:	00800044 	movi	r2,1
    7744:	0021883a 	mov	r16,zero
    7748:	002d883a 	mov	r22,zero
    774c:	003e6e06 	br	7108 <__alt_exception_stack_pointer+0xf8007108>
    7750:	4007883a 	mov	r3,r8
    7754:	003f9706 	br	75b4 <__alt_exception_stack_pointer+0xf80075b4>
    7758:	017ff844 	movi	r5,-31
    775c:	2885c83a 	sub	r2,r5,r2
    7760:	888ad83a 	srl	r5,r17,r2
    7764:	00800804 	movi	r2,32
    7768:	18801a26 	beq	r3,r2,77d4 <__muldf3+0x848>
    776c:	01001004 	movi	r4,64
    7770:	20c7c83a 	sub	r3,r4,r3
    7774:	88e2983a 	sll	r17,r17,r3
    7778:	8ca4b03a 	or	r18,r17,r18
    777c:	9004c03a 	cmpne	r2,r18,zero
    7780:	2884b03a 	or	r2,r5,r2
    7784:	144001cc 	andi	r17,r2,7
    7788:	88000d1e 	bne	r17,zero,77c0 <__muldf3+0x834>
    778c:	0021883a 	mov	r16,zero
    7790:	102cd0fa 	srli	r22,r2,3
    7794:	3027883a 	mov	r19,r6
    7798:	0005883a 	mov	r2,zero
    779c:	b46cb03a 	or	r22,r22,r17
    77a0:	003e5906 	br	7108 <__alt_exception_stack_pointer+0xf8007108>
    77a4:	1007883a 	mov	r3,r2
    77a8:	0023883a 	mov	r17,zero
    77ac:	8820927a 	slli	r16,r17,9
    77b0:	1805883a 	mov	r2,r3
    77b4:	8822977a 	slli	r17,r17,29
    77b8:	8020d33a 	srli	r16,r16,12
    77bc:	003ff406 	br	7790 <__alt_exception_stack_pointer+0xf8007790>
    77c0:	10c003cc 	andi	r3,r2,15
    77c4:	01000104 	movi	r4,4
    77c8:	193ff626 	beq	r3,r4,77a4 <__alt_exception_stack_pointer+0xf80077a4>
    77cc:	0023883a 	mov	r17,zero
    77d0:	003fd506 	br	7728 <__alt_exception_stack_pointer+0xf8007728>
    77d4:	0023883a 	mov	r17,zero
    77d8:	003fe706 	br	7778 <__alt_exception_stack_pointer+0xf8007778>
    77dc:	00800434 	movhi	r2,16
    77e0:	8c000234 	orhi	r16,r17,8
    77e4:	10bfffc4 	addi	r2,r2,-1
    77e8:	3027883a 	mov	r19,r6
    77ec:	80a0703a 	and	r16,r16,r2
    77f0:	902d883a 	mov	r22,r18
    77f4:	003eac06 	br	72a8 <__alt_exception_stack_pointer+0xf80072a8>

000077f8 <__subdf3>:
    77f8:	02000434 	movhi	r8,16
    77fc:	423fffc4 	addi	r8,r8,-1
    7800:	defffb04 	addi	sp,sp,-20
    7804:	2a14703a 	and	r10,r5,r8
    7808:	3812d53a 	srli	r9,r7,20
    780c:	3a10703a 	and	r8,r7,r8
    7810:	2006d77a 	srli	r3,r4,29
    7814:	3004d77a 	srli	r2,r6,29
    7818:	dc000015 	stw	r16,0(sp)
    781c:	501490fa 	slli	r10,r10,3
    7820:	2820d53a 	srli	r16,r5,20
    7824:	401090fa 	slli	r8,r8,3
    7828:	dc800215 	stw	r18,8(sp)
    782c:	dc400115 	stw	r17,4(sp)
    7830:	dfc00415 	stw	ra,16(sp)
    7834:	202290fa 	slli	r17,r4,3
    7838:	dcc00315 	stw	r19,12(sp)
    783c:	4a41ffcc 	andi	r9,r9,2047
    7840:	0101ffc4 	movi	r4,2047
    7844:	2824d7fa 	srli	r18,r5,31
    7848:	8401ffcc 	andi	r16,r16,2047
    784c:	50c6b03a 	or	r3,r10,r3
    7850:	380ed7fa 	srli	r7,r7,31
    7854:	408ab03a 	or	r5,r8,r2
    7858:	300c90fa 	slli	r6,r6,3
    785c:	49009626 	beq	r9,r4,7ab8 <__subdf3+0x2c0>
    7860:	39c0005c 	xori	r7,r7,1
    7864:	8245c83a 	sub	r2,r16,r9
    7868:	3c807426 	beq	r7,r18,7a3c <__subdf3+0x244>
    786c:	0080af0e 	bge	zero,r2,7b2c <__subdf3+0x334>
    7870:	48002a1e 	bne	r9,zero,791c <__subdf3+0x124>
    7874:	2988b03a 	or	r4,r5,r6
    7878:	20009a1e 	bne	r4,zero,7ae4 <__subdf3+0x2ec>
    787c:	888001cc 	andi	r2,r17,7
    7880:	10000726 	beq	r2,zero,78a0 <__subdf3+0xa8>
    7884:	888003cc 	andi	r2,r17,15
    7888:	01000104 	movi	r4,4
    788c:	11000426 	beq	r2,r4,78a0 <__subdf3+0xa8>
    7890:	890b883a 	add	r5,r17,r4
    7894:	2c63803a 	cmpltu	r17,r5,r17
    7898:	1c47883a 	add	r3,r3,r17
    789c:	2823883a 	mov	r17,r5
    78a0:	1880202c 	andhi	r2,r3,128
    78a4:	10005926 	beq	r2,zero,7a0c <__subdf3+0x214>
    78a8:	84000044 	addi	r16,r16,1
    78ac:	0081ffc4 	movi	r2,2047
    78b0:	8080be26 	beq	r16,r2,7bac <__subdf3+0x3b4>
    78b4:	017fe034 	movhi	r5,65408
    78b8:	297fffc4 	addi	r5,r5,-1
    78bc:	1946703a 	and	r3,r3,r5
    78c0:	1804977a 	slli	r2,r3,29
    78c4:	1806927a 	slli	r3,r3,9
    78c8:	8822d0fa 	srli	r17,r17,3
    78cc:	8401ffcc 	andi	r16,r16,2047
    78d0:	180ad33a 	srli	r5,r3,12
    78d4:	9100004c 	andi	r4,r18,1
    78d8:	1444b03a 	or	r2,r2,r17
    78dc:	80c1ffcc 	andi	r3,r16,2047
    78e0:	1820953a 	slli	r16,r3,20
    78e4:	20c03fcc 	andi	r3,r4,255
    78e8:	180897fa 	slli	r4,r3,31
    78ec:	00c00434 	movhi	r3,16
    78f0:	18ffffc4 	addi	r3,r3,-1
    78f4:	28c6703a 	and	r3,r5,r3
    78f8:	1c06b03a 	or	r3,r3,r16
    78fc:	1906b03a 	or	r3,r3,r4
    7900:	dfc00417 	ldw	ra,16(sp)
    7904:	dcc00317 	ldw	r19,12(sp)
    7908:	dc800217 	ldw	r18,8(sp)
    790c:	dc400117 	ldw	r17,4(sp)
    7910:	dc000017 	ldw	r16,0(sp)
    7914:	dec00504 	addi	sp,sp,20
    7918:	f800283a 	ret
    791c:	0101ffc4 	movi	r4,2047
    7920:	813fd626 	beq	r16,r4,787c <__alt_exception_stack_pointer+0xf800787c>
    7924:	29402034 	orhi	r5,r5,128
    7928:	01000e04 	movi	r4,56
    792c:	2080a316 	blt	r4,r2,7bbc <__subdf3+0x3c4>
    7930:	010007c4 	movi	r4,31
    7934:	2080c616 	blt	r4,r2,7c50 <__subdf3+0x458>
    7938:	01000804 	movi	r4,32
    793c:	2089c83a 	sub	r4,r4,r2
    7940:	2910983a 	sll	r8,r5,r4
    7944:	308ed83a 	srl	r7,r6,r2
    7948:	3108983a 	sll	r4,r6,r4
    794c:	2884d83a 	srl	r2,r5,r2
    7950:	41ccb03a 	or	r6,r8,r7
    7954:	2008c03a 	cmpne	r4,r4,zero
    7958:	310cb03a 	or	r6,r6,r4
    795c:	898dc83a 	sub	r6,r17,r6
    7960:	89a3803a 	cmpltu	r17,r17,r6
    7964:	1887c83a 	sub	r3,r3,r2
    7968:	1c47c83a 	sub	r3,r3,r17
    796c:	3023883a 	mov	r17,r6
    7970:	1880202c 	andhi	r2,r3,128
    7974:	10002326 	beq	r2,zero,7a04 <__subdf3+0x20c>
    7978:	04c02034 	movhi	r19,128
    797c:	9cffffc4 	addi	r19,r19,-1
    7980:	1ce6703a 	and	r19,r3,r19
    7984:	98007a26 	beq	r19,zero,7b70 <__subdf3+0x378>
    7988:	9809883a 	mov	r4,r19
    798c:	00085b00 	call	85b0 <__clzsi2>
    7990:	113ffe04 	addi	r4,r2,-8
    7994:	00c007c4 	movi	r3,31
    7998:	19007b16 	blt	r3,r4,7b88 <__subdf3+0x390>
    799c:	00800804 	movi	r2,32
    79a0:	1105c83a 	sub	r2,r2,r4
    79a4:	8884d83a 	srl	r2,r17,r2
    79a8:	9906983a 	sll	r3,r19,r4
    79ac:	8922983a 	sll	r17,r17,r4
    79b0:	10c4b03a 	or	r2,r2,r3
    79b4:	24007816 	blt	r4,r16,7b98 <__subdf3+0x3a0>
    79b8:	2421c83a 	sub	r16,r4,r16
    79bc:	80c00044 	addi	r3,r16,1
    79c0:	010007c4 	movi	r4,31
    79c4:	20c09516 	blt	r4,r3,7c1c <__subdf3+0x424>
    79c8:	01400804 	movi	r5,32
    79cc:	28cbc83a 	sub	r5,r5,r3
    79d0:	88c8d83a 	srl	r4,r17,r3
    79d4:	8962983a 	sll	r17,r17,r5
    79d8:	114a983a 	sll	r5,r2,r5
    79dc:	10c6d83a 	srl	r3,r2,r3
    79e0:	8804c03a 	cmpne	r2,r17,zero
    79e4:	290ab03a 	or	r5,r5,r4
    79e8:	28a2b03a 	or	r17,r5,r2
    79ec:	0021883a 	mov	r16,zero
    79f0:	003fa206 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    79f4:	2090b03a 	or	r8,r4,r2
    79f8:	40018e26 	beq	r8,zero,8034 <__subdf3+0x83c>
    79fc:	1007883a 	mov	r3,r2
    7a00:	2023883a 	mov	r17,r4
    7a04:	888001cc 	andi	r2,r17,7
    7a08:	103f9e1e 	bne	r2,zero,7884 <__alt_exception_stack_pointer+0xf8007884>
    7a0c:	1804977a 	slli	r2,r3,29
    7a10:	8822d0fa 	srli	r17,r17,3
    7a14:	1810d0fa 	srli	r8,r3,3
    7a18:	9100004c 	andi	r4,r18,1
    7a1c:	1444b03a 	or	r2,r2,r17
    7a20:	00c1ffc4 	movi	r3,2047
    7a24:	80c02826 	beq	r16,r3,7ac8 <__subdf3+0x2d0>
    7a28:	01400434 	movhi	r5,16
    7a2c:	297fffc4 	addi	r5,r5,-1
    7a30:	80e0703a 	and	r16,r16,r3
    7a34:	414a703a 	and	r5,r8,r5
    7a38:	003fa806 	br	78dc <__alt_exception_stack_pointer+0xf80078dc>
    7a3c:	0080630e 	bge	zero,r2,7bcc <__subdf3+0x3d4>
    7a40:	48003026 	beq	r9,zero,7b04 <__subdf3+0x30c>
    7a44:	0101ffc4 	movi	r4,2047
    7a48:	813f8c26 	beq	r16,r4,787c <__alt_exception_stack_pointer+0xf800787c>
    7a4c:	29402034 	orhi	r5,r5,128
    7a50:	01000e04 	movi	r4,56
    7a54:	2080a90e 	bge	r4,r2,7cfc <__subdf3+0x504>
    7a58:	298cb03a 	or	r6,r5,r6
    7a5c:	3012c03a 	cmpne	r9,r6,zero
    7a60:	0005883a 	mov	r2,zero
    7a64:	4c53883a 	add	r9,r9,r17
    7a68:	4c63803a 	cmpltu	r17,r9,r17
    7a6c:	10c7883a 	add	r3,r2,r3
    7a70:	88c7883a 	add	r3,r17,r3
    7a74:	4823883a 	mov	r17,r9
    7a78:	1880202c 	andhi	r2,r3,128
    7a7c:	1000d026 	beq	r2,zero,7dc0 <__subdf3+0x5c8>
    7a80:	84000044 	addi	r16,r16,1
    7a84:	0081ffc4 	movi	r2,2047
    7a88:	8080fe26 	beq	r16,r2,7e84 <__subdf3+0x68c>
    7a8c:	00bfe034 	movhi	r2,65408
    7a90:	10bfffc4 	addi	r2,r2,-1
    7a94:	1886703a 	and	r3,r3,r2
    7a98:	880ad07a 	srli	r5,r17,1
    7a9c:	180497fa 	slli	r2,r3,31
    7aa0:	8900004c 	andi	r4,r17,1
    7aa4:	2922b03a 	or	r17,r5,r4
    7aa8:	1806d07a 	srli	r3,r3,1
    7aac:	1462b03a 	or	r17,r2,r17
    7ab0:	3825883a 	mov	r18,r7
    7ab4:	003f7106 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7ab8:	2984b03a 	or	r2,r5,r6
    7abc:	103f6826 	beq	r2,zero,7860 <__alt_exception_stack_pointer+0xf8007860>
    7ac0:	39c03fcc 	andi	r7,r7,255
    7ac4:	003f6706 	br	7864 <__alt_exception_stack_pointer+0xf8007864>
    7ac8:	4086b03a 	or	r3,r8,r2
    7acc:	18015226 	beq	r3,zero,8018 <__subdf3+0x820>
    7ad0:	00c00434 	movhi	r3,16
    7ad4:	41400234 	orhi	r5,r8,8
    7ad8:	18ffffc4 	addi	r3,r3,-1
    7adc:	28ca703a 	and	r5,r5,r3
    7ae0:	003f7e06 	br	78dc <__alt_exception_stack_pointer+0xf80078dc>
    7ae4:	10bfffc4 	addi	r2,r2,-1
    7ae8:	1000491e 	bne	r2,zero,7c10 <__subdf3+0x418>
    7aec:	898fc83a 	sub	r7,r17,r6
    7af0:	89e3803a 	cmpltu	r17,r17,r7
    7af4:	1947c83a 	sub	r3,r3,r5
    7af8:	1c47c83a 	sub	r3,r3,r17
    7afc:	3823883a 	mov	r17,r7
    7b00:	003f9b06 	br	7970 <__alt_exception_stack_pointer+0xf8007970>
    7b04:	2988b03a 	or	r4,r5,r6
    7b08:	203f5c26 	beq	r4,zero,787c <__alt_exception_stack_pointer+0xf800787c>
    7b0c:	10bfffc4 	addi	r2,r2,-1
    7b10:	1000931e 	bne	r2,zero,7d60 <__subdf3+0x568>
    7b14:	898d883a 	add	r6,r17,r6
    7b18:	3463803a 	cmpltu	r17,r6,r17
    7b1c:	1947883a 	add	r3,r3,r5
    7b20:	88c7883a 	add	r3,r17,r3
    7b24:	3023883a 	mov	r17,r6
    7b28:	003fd306 	br	7a78 <__alt_exception_stack_pointer+0xf8007a78>
    7b2c:	1000541e 	bne	r2,zero,7c80 <__subdf3+0x488>
    7b30:	80800044 	addi	r2,r16,1
    7b34:	1081ffcc 	andi	r2,r2,2047
    7b38:	01000044 	movi	r4,1
    7b3c:	2080a20e 	bge	r4,r2,7dc8 <__subdf3+0x5d0>
    7b40:	8989c83a 	sub	r4,r17,r6
    7b44:	8905803a 	cmpltu	r2,r17,r4
    7b48:	1967c83a 	sub	r19,r3,r5
    7b4c:	98a7c83a 	sub	r19,r19,r2
    7b50:	9880202c 	andhi	r2,r19,128
    7b54:	10006326 	beq	r2,zero,7ce4 <__subdf3+0x4ec>
    7b58:	3463c83a 	sub	r17,r6,r17
    7b5c:	28c7c83a 	sub	r3,r5,r3
    7b60:	344d803a 	cmpltu	r6,r6,r17
    7b64:	19a7c83a 	sub	r19,r3,r6
    7b68:	3825883a 	mov	r18,r7
    7b6c:	983f861e 	bne	r19,zero,7988 <__alt_exception_stack_pointer+0xf8007988>
    7b70:	8809883a 	mov	r4,r17
    7b74:	00085b00 	call	85b0 <__clzsi2>
    7b78:	10800804 	addi	r2,r2,32
    7b7c:	113ffe04 	addi	r4,r2,-8
    7b80:	00c007c4 	movi	r3,31
    7b84:	193f850e 	bge	r3,r4,799c <__alt_exception_stack_pointer+0xf800799c>
    7b88:	10bff604 	addi	r2,r2,-40
    7b8c:	8884983a 	sll	r2,r17,r2
    7b90:	0023883a 	mov	r17,zero
    7b94:	243f880e 	bge	r4,r16,79b8 <__alt_exception_stack_pointer+0xf80079b8>
    7b98:	00ffe034 	movhi	r3,65408
    7b9c:	18ffffc4 	addi	r3,r3,-1
    7ba0:	8121c83a 	sub	r16,r16,r4
    7ba4:	10c6703a 	and	r3,r2,r3
    7ba8:	003f3406 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7bac:	9100004c 	andi	r4,r18,1
    7bb0:	000b883a 	mov	r5,zero
    7bb4:	0005883a 	mov	r2,zero
    7bb8:	003f4806 	br	78dc <__alt_exception_stack_pointer+0xf80078dc>
    7bbc:	298cb03a 	or	r6,r5,r6
    7bc0:	300cc03a 	cmpne	r6,r6,zero
    7bc4:	0005883a 	mov	r2,zero
    7bc8:	003f6406 	br	795c <__alt_exception_stack_pointer+0xf800795c>
    7bcc:	10009a1e 	bne	r2,zero,7e38 <__subdf3+0x640>
    7bd0:	82400044 	addi	r9,r16,1
    7bd4:	4881ffcc 	andi	r2,r9,2047
    7bd8:	02800044 	movi	r10,1
    7bdc:	5080670e 	bge	r10,r2,7d7c <__subdf3+0x584>
    7be0:	0081ffc4 	movi	r2,2047
    7be4:	4880af26 	beq	r9,r2,7ea4 <__subdf3+0x6ac>
    7be8:	898d883a 	add	r6,r17,r6
    7bec:	1945883a 	add	r2,r3,r5
    7bf0:	3447803a 	cmpltu	r3,r6,r17
    7bf4:	1887883a 	add	r3,r3,r2
    7bf8:	182297fa 	slli	r17,r3,31
    7bfc:	300cd07a 	srli	r6,r6,1
    7c00:	1806d07a 	srli	r3,r3,1
    7c04:	4821883a 	mov	r16,r9
    7c08:	89a2b03a 	or	r17,r17,r6
    7c0c:	003f1b06 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7c10:	0101ffc4 	movi	r4,2047
    7c14:	813f441e 	bne	r16,r4,7928 <__alt_exception_stack_pointer+0xf8007928>
    7c18:	003f1806 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7c1c:	843ff844 	addi	r16,r16,-31
    7c20:	01400804 	movi	r5,32
    7c24:	1408d83a 	srl	r4,r2,r16
    7c28:	19405026 	beq	r3,r5,7d6c <__subdf3+0x574>
    7c2c:	01401004 	movi	r5,64
    7c30:	28c7c83a 	sub	r3,r5,r3
    7c34:	10c4983a 	sll	r2,r2,r3
    7c38:	88a2b03a 	or	r17,r17,r2
    7c3c:	8822c03a 	cmpne	r17,r17,zero
    7c40:	2462b03a 	or	r17,r4,r17
    7c44:	0007883a 	mov	r3,zero
    7c48:	0021883a 	mov	r16,zero
    7c4c:	003f6d06 	br	7a04 <__alt_exception_stack_pointer+0xf8007a04>
    7c50:	11fff804 	addi	r7,r2,-32
    7c54:	01000804 	movi	r4,32
    7c58:	29ced83a 	srl	r7,r5,r7
    7c5c:	11004526 	beq	r2,r4,7d74 <__subdf3+0x57c>
    7c60:	01001004 	movi	r4,64
    7c64:	2089c83a 	sub	r4,r4,r2
    7c68:	2904983a 	sll	r2,r5,r4
    7c6c:	118cb03a 	or	r6,r2,r6
    7c70:	300cc03a 	cmpne	r6,r6,zero
    7c74:	398cb03a 	or	r6,r7,r6
    7c78:	0005883a 	mov	r2,zero
    7c7c:	003f3706 	br	795c <__alt_exception_stack_pointer+0xf800795c>
    7c80:	80002a26 	beq	r16,zero,7d2c <__subdf3+0x534>
    7c84:	0101ffc4 	movi	r4,2047
    7c88:	49006626 	beq	r9,r4,7e24 <__subdf3+0x62c>
    7c8c:	0085c83a 	sub	r2,zero,r2
    7c90:	18c02034 	orhi	r3,r3,128
    7c94:	01000e04 	movi	r4,56
    7c98:	20807e16 	blt	r4,r2,7e94 <__subdf3+0x69c>
    7c9c:	010007c4 	movi	r4,31
    7ca0:	2080e716 	blt	r4,r2,8040 <__subdf3+0x848>
    7ca4:	01000804 	movi	r4,32
    7ca8:	2089c83a 	sub	r4,r4,r2
    7cac:	1914983a 	sll	r10,r3,r4
    7cb0:	8890d83a 	srl	r8,r17,r2
    7cb4:	8908983a 	sll	r4,r17,r4
    7cb8:	1884d83a 	srl	r2,r3,r2
    7cbc:	5222b03a 	or	r17,r10,r8
    7cc0:	2006c03a 	cmpne	r3,r4,zero
    7cc4:	88e2b03a 	or	r17,r17,r3
    7cc8:	3463c83a 	sub	r17,r6,r17
    7ccc:	2885c83a 	sub	r2,r5,r2
    7cd0:	344d803a 	cmpltu	r6,r6,r17
    7cd4:	1187c83a 	sub	r3,r2,r6
    7cd8:	4821883a 	mov	r16,r9
    7cdc:	3825883a 	mov	r18,r7
    7ce0:	003f2306 	br	7970 <__alt_exception_stack_pointer+0xf8007970>
    7ce4:	24d0b03a 	or	r8,r4,r19
    7ce8:	40001b1e 	bne	r8,zero,7d58 <__subdf3+0x560>
    7cec:	0005883a 	mov	r2,zero
    7cf0:	0009883a 	mov	r4,zero
    7cf4:	0021883a 	mov	r16,zero
    7cf8:	003f4906 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7cfc:	010007c4 	movi	r4,31
    7d00:	20803a16 	blt	r4,r2,7dec <__subdf3+0x5f4>
    7d04:	01000804 	movi	r4,32
    7d08:	2089c83a 	sub	r4,r4,r2
    7d0c:	2912983a 	sll	r9,r5,r4
    7d10:	3090d83a 	srl	r8,r6,r2
    7d14:	3108983a 	sll	r4,r6,r4
    7d18:	2884d83a 	srl	r2,r5,r2
    7d1c:	4a12b03a 	or	r9,r9,r8
    7d20:	2008c03a 	cmpne	r4,r4,zero
    7d24:	4912b03a 	or	r9,r9,r4
    7d28:	003f4e06 	br	7a64 <__alt_exception_stack_pointer+0xf8007a64>
    7d2c:	1c48b03a 	or	r4,r3,r17
    7d30:	20003c26 	beq	r4,zero,7e24 <__subdf3+0x62c>
    7d34:	0084303a 	nor	r2,zero,r2
    7d38:	1000381e 	bne	r2,zero,7e1c <__subdf3+0x624>
    7d3c:	3463c83a 	sub	r17,r6,r17
    7d40:	28c5c83a 	sub	r2,r5,r3
    7d44:	344d803a 	cmpltu	r6,r6,r17
    7d48:	1187c83a 	sub	r3,r2,r6
    7d4c:	4821883a 	mov	r16,r9
    7d50:	3825883a 	mov	r18,r7
    7d54:	003f0606 	br	7970 <__alt_exception_stack_pointer+0xf8007970>
    7d58:	2023883a 	mov	r17,r4
    7d5c:	003f0906 	br	7984 <__alt_exception_stack_pointer+0xf8007984>
    7d60:	0101ffc4 	movi	r4,2047
    7d64:	813f3a1e 	bne	r16,r4,7a50 <__alt_exception_stack_pointer+0xf8007a50>
    7d68:	003ec406 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7d6c:	0005883a 	mov	r2,zero
    7d70:	003fb106 	br	7c38 <__alt_exception_stack_pointer+0xf8007c38>
    7d74:	0005883a 	mov	r2,zero
    7d78:	003fbc06 	br	7c6c <__alt_exception_stack_pointer+0xf8007c6c>
    7d7c:	1c44b03a 	or	r2,r3,r17
    7d80:	80008e1e 	bne	r16,zero,7fbc <__subdf3+0x7c4>
    7d84:	1000c826 	beq	r2,zero,80a8 <__subdf3+0x8b0>
    7d88:	2984b03a 	or	r2,r5,r6
    7d8c:	103ebb26 	beq	r2,zero,787c <__alt_exception_stack_pointer+0xf800787c>
    7d90:	8989883a 	add	r4,r17,r6
    7d94:	1945883a 	add	r2,r3,r5
    7d98:	2447803a 	cmpltu	r3,r4,r17
    7d9c:	1887883a 	add	r3,r3,r2
    7da0:	1880202c 	andhi	r2,r3,128
    7da4:	2023883a 	mov	r17,r4
    7da8:	103f1626 	beq	r2,zero,7a04 <__alt_exception_stack_pointer+0xf8007a04>
    7dac:	00bfe034 	movhi	r2,65408
    7db0:	10bfffc4 	addi	r2,r2,-1
    7db4:	5021883a 	mov	r16,r10
    7db8:	1886703a 	and	r3,r3,r2
    7dbc:	003eaf06 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7dc0:	3825883a 	mov	r18,r7
    7dc4:	003f0f06 	br	7a04 <__alt_exception_stack_pointer+0xf8007a04>
    7dc8:	1c44b03a 	or	r2,r3,r17
    7dcc:	8000251e 	bne	r16,zero,7e64 <__subdf3+0x66c>
    7dd0:	1000661e 	bne	r2,zero,7f6c <__subdf3+0x774>
    7dd4:	2990b03a 	or	r8,r5,r6
    7dd8:	40009626 	beq	r8,zero,8034 <__subdf3+0x83c>
    7ddc:	2807883a 	mov	r3,r5
    7de0:	3023883a 	mov	r17,r6
    7de4:	3825883a 	mov	r18,r7
    7de8:	003ea406 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7dec:	127ff804 	addi	r9,r2,-32
    7df0:	01000804 	movi	r4,32
    7df4:	2a52d83a 	srl	r9,r5,r9
    7df8:	11008c26 	beq	r2,r4,802c <__subdf3+0x834>
    7dfc:	01001004 	movi	r4,64
    7e00:	2085c83a 	sub	r2,r4,r2
    7e04:	2884983a 	sll	r2,r5,r2
    7e08:	118cb03a 	or	r6,r2,r6
    7e0c:	300cc03a 	cmpne	r6,r6,zero
    7e10:	4992b03a 	or	r9,r9,r6
    7e14:	0005883a 	mov	r2,zero
    7e18:	003f1206 	br	7a64 <__alt_exception_stack_pointer+0xf8007a64>
    7e1c:	0101ffc4 	movi	r4,2047
    7e20:	493f9c1e 	bne	r9,r4,7c94 <__alt_exception_stack_pointer+0xf8007c94>
    7e24:	2807883a 	mov	r3,r5
    7e28:	3023883a 	mov	r17,r6
    7e2c:	4821883a 	mov	r16,r9
    7e30:	3825883a 	mov	r18,r7
    7e34:	003e9106 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7e38:	80001f1e 	bne	r16,zero,7eb8 <__subdf3+0x6c0>
    7e3c:	1c48b03a 	or	r4,r3,r17
    7e40:	20005a26 	beq	r4,zero,7fac <__subdf3+0x7b4>
    7e44:	0084303a 	nor	r2,zero,r2
    7e48:	1000561e 	bne	r2,zero,7fa4 <__subdf3+0x7ac>
    7e4c:	89a3883a 	add	r17,r17,r6
    7e50:	1945883a 	add	r2,r3,r5
    7e54:	898d803a 	cmpltu	r6,r17,r6
    7e58:	3087883a 	add	r3,r6,r2
    7e5c:	4821883a 	mov	r16,r9
    7e60:	003f0506 	br	7a78 <__alt_exception_stack_pointer+0xf8007a78>
    7e64:	10002b1e 	bne	r2,zero,7f14 <__subdf3+0x71c>
    7e68:	2984b03a 	or	r2,r5,r6
    7e6c:	10008026 	beq	r2,zero,8070 <__subdf3+0x878>
    7e70:	2807883a 	mov	r3,r5
    7e74:	3023883a 	mov	r17,r6
    7e78:	3825883a 	mov	r18,r7
    7e7c:	0401ffc4 	movi	r16,2047
    7e80:	003e7e06 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7e84:	3809883a 	mov	r4,r7
    7e88:	0011883a 	mov	r8,zero
    7e8c:	0005883a 	mov	r2,zero
    7e90:	003ee306 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7e94:	1c62b03a 	or	r17,r3,r17
    7e98:	8822c03a 	cmpne	r17,r17,zero
    7e9c:	0005883a 	mov	r2,zero
    7ea0:	003f8906 	br	7cc8 <__alt_exception_stack_pointer+0xf8007cc8>
    7ea4:	3809883a 	mov	r4,r7
    7ea8:	4821883a 	mov	r16,r9
    7eac:	0011883a 	mov	r8,zero
    7eb0:	0005883a 	mov	r2,zero
    7eb4:	003eda06 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7eb8:	0101ffc4 	movi	r4,2047
    7ebc:	49003b26 	beq	r9,r4,7fac <__subdf3+0x7b4>
    7ec0:	0085c83a 	sub	r2,zero,r2
    7ec4:	18c02034 	orhi	r3,r3,128
    7ec8:	01000e04 	movi	r4,56
    7ecc:	20806e16 	blt	r4,r2,8088 <__subdf3+0x890>
    7ed0:	010007c4 	movi	r4,31
    7ed4:	20807716 	blt	r4,r2,80b4 <__subdf3+0x8bc>
    7ed8:	01000804 	movi	r4,32
    7edc:	2089c83a 	sub	r4,r4,r2
    7ee0:	1914983a 	sll	r10,r3,r4
    7ee4:	8890d83a 	srl	r8,r17,r2
    7ee8:	8908983a 	sll	r4,r17,r4
    7eec:	1884d83a 	srl	r2,r3,r2
    7ef0:	5222b03a 	or	r17,r10,r8
    7ef4:	2006c03a 	cmpne	r3,r4,zero
    7ef8:	88e2b03a 	or	r17,r17,r3
    7efc:	89a3883a 	add	r17,r17,r6
    7f00:	1145883a 	add	r2,r2,r5
    7f04:	898d803a 	cmpltu	r6,r17,r6
    7f08:	3087883a 	add	r3,r6,r2
    7f0c:	4821883a 	mov	r16,r9
    7f10:	003ed906 	br	7a78 <__alt_exception_stack_pointer+0xf8007a78>
    7f14:	2984b03a 	or	r2,r5,r6
    7f18:	10004226 	beq	r2,zero,8024 <__subdf3+0x82c>
    7f1c:	1808d0fa 	srli	r4,r3,3
    7f20:	8822d0fa 	srli	r17,r17,3
    7f24:	1806977a 	slli	r3,r3,29
    7f28:	2080022c 	andhi	r2,r4,8
    7f2c:	1c62b03a 	or	r17,r3,r17
    7f30:	10000826 	beq	r2,zero,7f54 <__subdf3+0x75c>
    7f34:	2812d0fa 	srli	r9,r5,3
    7f38:	4880022c 	andhi	r2,r9,8
    7f3c:	1000051e 	bne	r2,zero,7f54 <__subdf3+0x75c>
    7f40:	300cd0fa 	srli	r6,r6,3
    7f44:	2804977a 	slli	r2,r5,29
    7f48:	4809883a 	mov	r4,r9
    7f4c:	3825883a 	mov	r18,r7
    7f50:	11a2b03a 	or	r17,r2,r6
    7f54:	8806d77a 	srli	r3,r17,29
    7f58:	200890fa 	slli	r4,r4,3
    7f5c:	882290fa 	slli	r17,r17,3
    7f60:	0401ffc4 	movi	r16,2047
    7f64:	1906b03a 	or	r3,r3,r4
    7f68:	003e4406 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7f6c:	2984b03a 	or	r2,r5,r6
    7f70:	103e4226 	beq	r2,zero,787c <__alt_exception_stack_pointer+0xf800787c>
    7f74:	8989c83a 	sub	r4,r17,r6
    7f78:	8911803a 	cmpltu	r8,r17,r4
    7f7c:	1945c83a 	sub	r2,r3,r5
    7f80:	1205c83a 	sub	r2,r2,r8
    7f84:	1200202c 	andhi	r8,r2,128
    7f88:	403e9a26 	beq	r8,zero,79f4 <__alt_exception_stack_pointer+0xf80079f4>
    7f8c:	3463c83a 	sub	r17,r6,r17
    7f90:	28c5c83a 	sub	r2,r5,r3
    7f94:	344d803a 	cmpltu	r6,r6,r17
    7f98:	1187c83a 	sub	r3,r2,r6
    7f9c:	3825883a 	mov	r18,r7
    7fa0:	003e3606 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7fa4:	0101ffc4 	movi	r4,2047
    7fa8:	493fc71e 	bne	r9,r4,7ec8 <__alt_exception_stack_pointer+0xf8007ec8>
    7fac:	2807883a 	mov	r3,r5
    7fb0:	3023883a 	mov	r17,r6
    7fb4:	4821883a 	mov	r16,r9
    7fb8:	003e3006 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    7fbc:	10003626 	beq	r2,zero,8098 <__subdf3+0x8a0>
    7fc0:	2984b03a 	or	r2,r5,r6
    7fc4:	10001726 	beq	r2,zero,8024 <__subdf3+0x82c>
    7fc8:	1808d0fa 	srli	r4,r3,3
    7fcc:	8822d0fa 	srli	r17,r17,3
    7fd0:	1806977a 	slli	r3,r3,29
    7fd4:	2080022c 	andhi	r2,r4,8
    7fd8:	1c62b03a 	or	r17,r3,r17
    7fdc:	10000726 	beq	r2,zero,7ffc <__subdf3+0x804>
    7fe0:	2812d0fa 	srli	r9,r5,3
    7fe4:	4880022c 	andhi	r2,r9,8
    7fe8:	1000041e 	bne	r2,zero,7ffc <__subdf3+0x804>
    7fec:	300cd0fa 	srli	r6,r6,3
    7ff0:	2804977a 	slli	r2,r5,29
    7ff4:	4809883a 	mov	r4,r9
    7ff8:	11a2b03a 	or	r17,r2,r6
    7ffc:	8806d77a 	srli	r3,r17,29
    8000:	200890fa 	slli	r4,r4,3
    8004:	882290fa 	slli	r17,r17,3
    8008:	3825883a 	mov	r18,r7
    800c:	1906b03a 	or	r3,r3,r4
    8010:	0401ffc4 	movi	r16,2047
    8014:	003e1906 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    8018:	000b883a 	mov	r5,zero
    801c:	0005883a 	mov	r2,zero
    8020:	003e2e06 	br	78dc <__alt_exception_stack_pointer+0xf80078dc>
    8024:	0401ffc4 	movi	r16,2047
    8028:	003e1406 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    802c:	0005883a 	mov	r2,zero
    8030:	003f7506 	br	7e08 <__alt_exception_stack_pointer+0xf8007e08>
    8034:	0005883a 	mov	r2,zero
    8038:	0009883a 	mov	r4,zero
    803c:	003e7806 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    8040:	123ff804 	addi	r8,r2,-32
    8044:	01000804 	movi	r4,32
    8048:	1a10d83a 	srl	r8,r3,r8
    804c:	11002526 	beq	r2,r4,80e4 <__subdf3+0x8ec>
    8050:	01001004 	movi	r4,64
    8054:	2085c83a 	sub	r2,r4,r2
    8058:	1884983a 	sll	r2,r3,r2
    805c:	1444b03a 	or	r2,r2,r17
    8060:	1004c03a 	cmpne	r2,r2,zero
    8064:	40a2b03a 	or	r17,r8,r2
    8068:	0005883a 	mov	r2,zero
    806c:	003f1606 	br	7cc8 <__alt_exception_stack_pointer+0xf8007cc8>
    8070:	02000434 	movhi	r8,16
    8074:	0009883a 	mov	r4,zero
    8078:	423fffc4 	addi	r8,r8,-1
    807c:	00bfffc4 	movi	r2,-1
    8080:	0401ffc4 	movi	r16,2047
    8084:	003e6606 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    8088:	1c62b03a 	or	r17,r3,r17
    808c:	8822c03a 	cmpne	r17,r17,zero
    8090:	0005883a 	mov	r2,zero
    8094:	003f9906 	br	7efc <__alt_exception_stack_pointer+0xf8007efc>
    8098:	2807883a 	mov	r3,r5
    809c:	3023883a 	mov	r17,r6
    80a0:	0401ffc4 	movi	r16,2047
    80a4:	003df506 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    80a8:	2807883a 	mov	r3,r5
    80ac:	3023883a 	mov	r17,r6
    80b0:	003df206 	br	787c <__alt_exception_stack_pointer+0xf800787c>
    80b4:	123ff804 	addi	r8,r2,-32
    80b8:	01000804 	movi	r4,32
    80bc:	1a10d83a 	srl	r8,r3,r8
    80c0:	11000a26 	beq	r2,r4,80ec <__subdf3+0x8f4>
    80c4:	01001004 	movi	r4,64
    80c8:	2085c83a 	sub	r2,r4,r2
    80cc:	1884983a 	sll	r2,r3,r2
    80d0:	1444b03a 	or	r2,r2,r17
    80d4:	1004c03a 	cmpne	r2,r2,zero
    80d8:	40a2b03a 	or	r17,r8,r2
    80dc:	0005883a 	mov	r2,zero
    80e0:	003f8606 	br	7efc <__alt_exception_stack_pointer+0xf8007efc>
    80e4:	0005883a 	mov	r2,zero
    80e8:	003fdc06 	br	805c <__alt_exception_stack_pointer+0xf800805c>
    80ec:	0005883a 	mov	r2,zero
    80f0:	003ff706 	br	80d0 <__alt_exception_stack_pointer+0xf80080d0>

000080f4 <__fixdfsi>:
    80f4:	280cd53a 	srli	r6,r5,20
    80f8:	00c00434 	movhi	r3,16
    80fc:	18ffffc4 	addi	r3,r3,-1
    8100:	3181ffcc 	andi	r6,r6,2047
    8104:	01c0ff84 	movi	r7,1022
    8108:	28c6703a 	and	r3,r5,r3
    810c:	280ad7fa 	srli	r5,r5,31
    8110:	3980120e 	bge	r7,r6,815c <__fixdfsi+0x68>
    8114:	00810744 	movi	r2,1053
    8118:	11800c16 	blt	r2,r6,814c <__fixdfsi+0x58>
    811c:	00810cc4 	movi	r2,1075
    8120:	1185c83a 	sub	r2,r2,r6
    8124:	01c007c4 	movi	r7,31
    8128:	18c00434 	orhi	r3,r3,16
    812c:	38800d16 	blt	r7,r2,8164 <__fixdfsi+0x70>
    8130:	31befb44 	addi	r6,r6,-1043
    8134:	2084d83a 	srl	r2,r4,r2
    8138:	1986983a 	sll	r3,r3,r6
    813c:	1884b03a 	or	r2,r3,r2
    8140:	28000726 	beq	r5,zero,8160 <__fixdfsi+0x6c>
    8144:	0085c83a 	sub	r2,zero,r2
    8148:	f800283a 	ret
    814c:	00a00034 	movhi	r2,32768
    8150:	10bfffc4 	addi	r2,r2,-1
    8154:	2885883a 	add	r2,r5,r2
    8158:	f800283a 	ret
    815c:	0005883a 	mov	r2,zero
    8160:	f800283a 	ret
    8164:	008104c4 	movi	r2,1043
    8168:	1185c83a 	sub	r2,r2,r6
    816c:	1884d83a 	srl	r2,r3,r2
    8170:	003ff306 	br	8140 <__alt_exception_stack_pointer+0xf8008140>

00008174 <__floatsidf>:
    8174:	defffd04 	addi	sp,sp,-12
    8178:	dfc00215 	stw	ra,8(sp)
    817c:	dc400115 	stw	r17,4(sp)
    8180:	dc000015 	stw	r16,0(sp)
    8184:	20002b26 	beq	r4,zero,8234 <__floatsidf+0xc0>
    8188:	2023883a 	mov	r17,r4
    818c:	2020d7fa 	srli	r16,r4,31
    8190:	20002d16 	blt	r4,zero,8248 <__floatsidf+0xd4>
    8194:	8809883a 	mov	r4,r17
    8198:	00085b00 	call	85b0 <__clzsi2>
    819c:	01410784 	movi	r5,1054
    81a0:	288bc83a 	sub	r5,r5,r2
    81a4:	01010cc4 	movi	r4,1075
    81a8:	2149c83a 	sub	r4,r4,r5
    81ac:	00c007c4 	movi	r3,31
    81b0:	1900160e 	bge	r3,r4,820c <__floatsidf+0x98>
    81b4:	00c104c4 	movi	r3,1043
    81b8:	1947c83a 	sub	r3,r3,r5
    81bc:	88c6983a 	sll	r3,r17,r3
    81c0:	00800434 	movhi	r2,16
    81c4:	10bfffc4 	addi	r2,r2,-1
    81c8:	1886703a 	and	r3,r3,r2
    81cc:	2941ffcc 	andi	r5,r5,2047
    81d0:	800d883a 	mov	r6,r16
    81d4:	0005883a 	mov	r2,zero
    81d8:	280a953a 	slli	r5,r5,20
    81dc:	31803fcc 	andi	r6,r6,255
    81e0:	01000434 	movhi	r4,16
    81e4:	300c97fa 	slli	r6,r6,31
    81e8:	213fffc4 	addi	r4,r4,-1
    81ec:	1906703a 	and	r3,r3,r4
    81f0:	1946b03a 	or	r3,r3,r5
    81f4:	1986b03a 	or	r3,r3,r6
    81f8:	dfc00217 	ldw	ra,8(sp)
    81fc:	dc400117 	ldw	r17,4(sp)
    8200:	dc000017 	ldw	r16,0(sp)
    8204:	dec00304 	addi	sp,sp,12
    8208:	f800283a 	ret
    820c:	00c002c4 	movi	r3,11
    8210:	1887c83a 	sub	r3,r3,r2
    8214:	88c6d83a 	srl	r3,r17,r3
    8218:	8904983a 	sll	r2,r17,r4
    821c:	01000434 	movhi	r4,16
    8220:	213fffc4 	addi	r4,r4,-1
    8224:	2941ffcc 	andi	r5,r5,2047
    8228:	1906703a 	and	r3,r3,r4
    822c:	800d883a 	mov	r6,r16
    8230:	003fe906 	br	81d8 <__alt_exception_stack_pointer+0xf80081d8>
    8234:	000d883a 	mov	r6,zero
    8238:	000b883a 	mov	r5,zero
    823c:	0007883a 	mov	r3,zero
    8240:	0005883a 	mov	r2,zero
    8244:	003fe406 	br	81d8 <__alt_exception_stack_pointer+0xf80081d8>
    8248:	0123c83a 	sub	r17,zero,r4
    824c:	003fd106 	br	8194 <__alt_exception_stack_pointer+0xf8008194>

00008250 <__floatunsidf>:
    8250:	defffe04 	addi	sp,sp,-8
    8254:	dc000015 	stw	r16,0(sp)
    8258:	dfc00115 	stw	ra,4(sp)
    825c:	2021883a 	mov	r16,r4
    8260:	20002226 	beq	r4,zero,82ec <__floatunsidf+0x9c>
    8264:	00085b00 	call	85b0 <__clzsi2>
    8268:	01010784 	movi	r4,1054
    826c:	2089c83a 	sub	r4,r4,r2
    8270:	01810cc4 	movi	r6,1075
    8274:	310dc83a 	sub	r6,r6,r4
    8278:	00c007c4 	movi	r3,31
    827c:	1980120e 	bge	r3,r6,82c8 <__floatunsidf+0x78>
    8280:	00c104c4 	movi	r3,1043
    8284:	1907c83a 	sub	r3,r3,r4
    8288:	80ca983a 	sll	r5,r16,r3
    828c:	00800434 	movhi	r2,16
    8290:	10bfffc4 	addi	r2,r2,-1
    8294:	2101ffcc 	andi	r4,r4,2047
    8298:	0021883a 	mov	r16,zero
    829c:	288a703a 	and	r5,r5,r2
    82a0:	2008953a 	slli	r4,r4,20
    82a4:	00c00434 	movhi	r3,16
    82a8:	18ffffc4 	addi	r3,r3,-1
    82ac:	28c6703a 	and	r3,r5,r3
    82b0:	8005883a 	mov	r2,r16
    82b4:	1906b03a 	or	r3,r3,r4
    82b8:	dfc00117 	ldw	ra,4(sp)
    82bc:	dc000017 	ldw	r16,0(sp)
    82c0:	dec00204 	addi	sp,sp,8
    82c4:	f800283a 	ret
    82c8:	00c002c4 	movi	r3,11
    82cc:	188bc83a 	sub	r5,r3,r2
    82d0:	814ad83a 	srl	r5,r16,r5
    82d4:	00c00434 	movhi	r3,16
    82d8:	18ffffc4 	addi	r3,r3,-1
    82dc:	81a0983a 	sll	r16,r16,r6
    82e0:	2101ffcc 	andi	r4,r4,2047
    82e4:	28ca703a 	and	r5,r5,r3
    82e8:	003fed06 	br	82a0 <__alt_exception_stack_pointer+0xf80082a0>
    82ec:	0009883a 	mov	r4,zero
    82f0:	000b883a 	mov	r5,zero
    82f4:	003fea06 	br	82a0 <__alt_exception_stack_pointer+0xf80082a0>

000082f8 <__extendsfdf2>:
    82f8:	200ad5fa 	srli	r5,r4,23
    82fc:	defffd04 	addi	sp,sp,-12
    8300:	dc400115 	stw	r17,4(sp)
    8304:	29403fcc 	andi	r5,r5,255
    8308:	29800044 	addi	r6,r5,1
    830c:	04402034 	movhi	r17,128
    8310:	dc000015 	stw	r16,0(sp)
    8314:	8c7fffc4 	addi	r17,r17,-1
    8318:	dfc00215 	stw	ra,8(sp)
    831c:	31803fcc 	andi	r6,r6,255
    8320:	00800044 	movi	r2,1
    8324:	8922703a 	and	r17,r17,r4
    8328:	2020d7fa 	srli	r16,r4,31
    832c:	1180110e 	bge	r2,r6,8374 <__extendsfdf2+0x7c>
    8330:	880cd0fa 	srli	r6,r17,3
    8334:	8822977a 	slli	r17,r17,29
    8338:	2940e004 	addi	r5,r5,896
    833c:	2941ffcc 	andi	r5,r5,2047
    8340:	2804953a 	slli	r2,r5,20
    8344:	01400434 	movhi	r5,16
    8348:	800697fa 	slli	r3,r16,31
    834c:	297fffc4 	addi	r5,r5,-1
    8350:	314a703a 	and	r5,r6,r5
    8354:	288ab03a 	or	r5,r5,r2
    8358:	28c6b03a 	or	r3,r5,r3
    835c:	8805883a 	mov	r2,r17
    8360:	dfc00217 	ldw	ra,8(sp)
    8364:	dc400117 	ldw	r17,4(sp)
    8368:	dc000017 	ldw	r16,0(sp)
    836c:	dec00304 	addi	sp,sp,12
    8370:	f800283a 	ret
    8374:	2800111e 	bne	r5,zero,83bc <__extendsfdf2+0xc4>
    8378:	88001c26 	beq	r17,zero,83ec <__extendsfdf2+0xf4>
    837c:	8809883a 	mov	r4,r17
    8380:	00085b00 	call	85b0 <__clzsi2>
    8384:	00c00284 	movi	r3,10
    8388:	18801b16 	blt	r3,r2,83f8 <__extendsfdf2+0x100>
    838c:	018002c4 	movi	r6,11
    8390:	308dc83a 	sub	r6,r6,r2
    8394:	11000544 	addi	r4,r2,21
    8398:	8986d83a 	srl	r3,r17,r6
    839c:	8922983a 	sll	r17,r17,r4
    83a0:	0180e244 	movi	r6,905
    83a4:	01400434 	movhi	r5,16
    83a8:	3085c83a 	sub	r2,r6,r2
    83ac:	297fffc4 	addi	r5,r5,-1
    83b0:	194c703a 	and	r6,r3,r5
    83b4:	1141ffcc 	andi	r5,r2,2047
    83b8:	003fe006 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    83bc:	88000826 	beq	r17,zero,83e0 <__extendsfdf2+0xe8>
    83c0:	880cd0fa 	srli	r6,r17,3
    83c4:	00800434 	movhi	r2,16
    83c8:	10bfffc4 	addi	r2,r2,-1
    83cc:	31800234 	orhi	r6,r6,8
    83d0:	8822977a 	slli	r17,r17,29
    83d4:	308c703a 	and	r6,r6,r2
    83d8:	0141ffc4 	movi	r5,2047
    83dc:	003fd706 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    83e0:	0141ffc4 	movi	r5,2047
    83e4:	000d883a 	mov	r6,zero
    83e8:	003fd406 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    83ec:	000b883a 	mov	r5,zero
    83f0:	000d883a 	mov	r6,zero
    83f4:	003fd106 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    83f8:	11bffd44 	addi	r6,r2,-11
    83fc:	8986983a 	sll	r3,r17,r6
    8400:	0023883a 	mov	r17,zero
    8404:	003fe606 	br	83a0 <__alt_exception_stack_pointer+0xf80083a0>

00008408 <__truncdfsf2>:
    8408:	2810d53a 	srli	r8,r5,20
    840c:	01c00434 	movhi	r7,16
    8410:	39ffffc4 	addi	r7,r7,-1
    8414:	29ce703a 	and	r7,r5,r7
    8418:	4201ffcc 	andi	r8,r8,2047
    841c:	380e90fa 	slli	r7,r7,3
    8420:	200cd77a 	srli	r6,r4,29
    8424:	42400044 	addi	r9,r8,1
    8428:	4a41ffcc 	andi	r9,r9,2047
    842c:	00c00044 	movi	r3,1
    8430:	280ad7fa 	srli	r5,r5,31
    8434:	31ceb03a 	or	r7,r6,r7
    8438:	200490fa 	slli	r2,r4,3
    843c:	1a40230e 	bge	r3,r9,84cc <__truncdfsf2+0xc4>
    8440:	40ff2004 	addi	r3,r8,-896
    8444:	01803f84 	movi	r6,254
    8448:	30c01516 	blt	r6,r3,84a0 <__truncdfsf2+0x98>
    844c:	00c0380e 	bge	zero,r3,8530 <__truncdfsf2+0x128>
    8450:	200c91ba 	slli	r6,r4,6
    8454:	380e90fa 	slli	r7,r7,3
    8458:	1004d77a 	srli	r2,r2,29
    845c:	300cc03a 	cmpne	r6,r6,zero
    8460:	31ccb03a 	or	r6,r6,r7
    8464:	308cb03a 	or	r6,r6,r2
    8468:	308001cc 	andi	r2,r6,7
    846c:	10000426 	beq	r2,zero,8480 <__truncdfsf2+0x78>
    8470:	308003cc 	andi	r2,r6,15
    8474:	01000104 	movi	r4,4
    8478:	11000126 	beq	r2,r4,8480 <__truncdfsf2+0x78>
    847c:	31800104 	addi	r6,r6,4
    8480:	3081002c 	andhi	r2,r6,1024
    8484:	10001626 	beq	r2,zero,84e0 <__truncdfsf2+0xd8>
    8488:	18c00044 	addi	r3,r3,1
    848c:	00803fc4 	movi	r2,255
    8490:	18800326 	beq	r3,r2,84a0 <__truncdfsf2+0x98>
    8494:	300c91ba 	slli	r6,r6,6
    8498:	300cd27a 	srli	r6,r6,9
    849c:	00000206 	br	84a8 <__truncdfsf2+0xa0>
    84a0:	00ffffc4 	movi	r3,-1
    84a4:	000d883a 	mov	r6,zero
    84a8:	18c03fcc 	andi	r3,r3,255
    84ac:	180895fa 	slli	r4,r3,23
    84b0:	00c02034 	movhi	r3,128
    84b4:	280a97fa 	slli	r5,r5,31
    84b8:	18ffffc4 	addi	r3,r3,-1
    84bc:	30c6703a 	and	r3,r6,r3
    84c0:	1906b03a 	or	r3,r3,r4
    84c4:	1944b03a 	or	r2,r3,r5
    84c8:	f800283a 	ret
    84cc:	40000b1e 	bne	r8,zero,84fc <__truncdfsf2+0xf4>
    84d0:	388cb03a 	or	r6,r7,r2
    84d4:	0007883a 	mov	r3,zero
    84d8:	30000426 	beq	r6,zero,84ec <__truncdfsf2+0xe4>
    84dc:	01800144 	movi	r6,5
    84e0:	00803fc4 	movi	r2,255
    84e4:	300cd0fa 	srli	r6,r6,3
    84e8:	18800a26 	beq	r3,r2,8514 <__truncdfsf2+0x10c>
    84ec:	00802034 	movhi	r2,128
    84f0:	10bfffc4 	addi	r2,r2,-1
    84f4:	308c703a 	and	r6,r6,r2
    84f8:	003feb06 	br	84a8 <__alt_exception_stack_pointer+0xf80084a8>
    84fc:	3888b03a 	or	r4,r7,r2
    8500:	203fe726 	beq	r4,zero,84a0 <__alt_exception_stack_pointer+0xf80084a0>
    8504:	380c90fa 	slli	r6,r7,3
    8508:	00c03fc4 	movi	r3,255
    850c:	31808034 	orhi	r6,r6,512
    8510:	003fd506 	br	8468 <__alt_exception_stack_pointer+0xf8008468>
    8514:	303fe226 	beq	r6,zero,84a0 <__alt_exception_stack_pointer+0xf80084a0>
    8518:	00802034 	movhi	r2,128
    851c:	31801034 	orhi	r6,r6,64
    8520:	10bfffc4 	addi	r2,r2,-1
    8524:	00ffffc4 	movi	r3,-1
    8528:	308c703a 	and	r6,r6,r2
    852c:	003fde06 	br	84a8 <__alt_exception_stack_pointer+0xf80084a8>
    8530:	013ffa44 	movi	r4,-23
    8534:	19000e16 	blt	r3,r4,8570 <__truncdfsf2+0x168>
    8538:	01000784 	movi	r4,30
    853c:	20c9c83a 	sub	r4,r4,r3
    8540:	018007c4 	movi	r6,31
    8544:	39c02034 	orhi	r7,r7,128
    8548:	31000b16 	blt	r6,r4,8578 <__truncdfsf2+0x170>
    854c:	423f2084 	addi	r8,r8,-894
    8550:	120c983a 	sll	r6,r2,r8
    8554:	3a0e983a 	sll	r7,r7,r8
    8558:	1104d83a 	srl	r2,r2,r4
    855c:	300cc03a 	cmpne	r6,r6,zero
    8560:	31ceb03a 	or	r7,r6,r7
    8564:	388cb03a 	or	r6,r7,r2
    8568:	0007883a 	mov	r3,zero
    856c:	003fbe06 	br	8468 <__alt_exception_stack_pointer+0xf8008468>
    8570:	0007883a 	mov	r3,zero
    8574:	003fd906 	br	84dc <__alt_exception_stack_pointer+0xf80084dc>
    8578:	01bfff84 	movi	r6,-2
    857c:	30cdc83a 	sub	r6,r6,r3
    8580:	00c00804 	movi	r3,32
    8584:	398cd83a 	srl	r6,r7,r6
    8588:	20c00726 	beq	r4,r3,85a8 <__truncdfsf2+0x1a0>
    858c:	423f2884 	addi	r8,r8,-862
    8590:	3a0e983a 	sll	r7,r7,r8
    8594:	3884b03a 	or	r2,r7,r2
    8598:	1004c03a 	cmpne	r2,r2,zero
    859c:	118cb03a 	or	r6,r2,r6
    85a0:	0007883a 	mov	r3,zero
    85a4:	003fb006 	br	8468 <__alt_exception_stack_pointer+0xf8008468>
    85a8:	000f883a 	mov	r7,zero
    85ac:	003ff906 	br	8594 <__alt_exception_stack_pointer+0xf8008594>

000085b0 <__clzsi2>:
    85b0:	00bfffd4 	movui	r2,65535
    85b4:	11000536 	bltu	r2,r4,85cc <__clzsi2+0x1c>
    85b8:	00803fc4 	movi	r2,255
    85bc:	11000f36 	bltu	r2,r4,85fc <__clzsi2+0x4c>
    85c0:	00800804 	movi	r2,32
    85c4:	0007883a 	mov	r3,zero
    85c8:	00000506 	br	85e0 <__clzsi2+0x30>
    85cc:	00804034 	movhi	r2,256
    85d0:	10bfffc4 	addi	r2,r2,-1
    85d4:	11000c2e 	bgeu	r2,r4,8608 <__clzsi2+0x58>
    85d8:	00800204 	movi	r2,8
    85dc:	00c00604 	movi	r3,24
    85e0:	20c8d83a 	srl	r4,r4,r3
    85e4:	00c00074 	movhi	r3,1
    85e8:	18df9604 	addi	r3,r3,32344
    85ec:	1909883a 	add	r4,r3,r4
    85f0:	20c00003 	ldbu	r3,0(r4)
    85f4:	10c5c83a 	sub	r2,r2,r3
    85f8:	f800283a 	ret
    85fc:	00800604 	movi	r2,24
    8600:	00c00204 	movi	r3,8
    8604:	003ff606 	br	85e0 <__alt_exception_stack_pointer+0xf80085e0>
    8608:	00800404 	movi	r2,16
    860c:	1007883a 	mov	r3,r2
    8610:	003ff306 	br	85e0 <__alt_exception_stack_pointer+0xf80085e0>

00008614 <clock>:
    8614:	008000b4 	movhi	r2,2
    8618:	10a92a04 	addi	r2,r2,-23384
    861c:	11000017 	ldw	r4,0(r2)
    8620:	defffb04 	addi	sp,sp,-20
    8624:	d80b883a 	mov	r5,sp
    8628:	dfc00415 	stw	ra,16(sp)
    862c:	00092980 	call	9298 <_times_r>
    8630:	00ffffc4 	movi	r3,-1
    8634:	10c00726 	beq	r2,r3,8654 <clock+0x40>
    8638:	d8c00017 	ldw	r3,0(sp)
    863c:	d8800117 	ldw	r2,4(sp)
    8640:	1885883a 	add	r2,r3,r2
    8644:	d8c00217 	ldw	r3,8(sp)
    8648:	10c7883a 	add	r3,r2,r3
    864c:	d8800317 	ldw	r2,12(sp)
    8650:	1885883a 	add	r2,r3,r2
    8654:	dfc00417 	ldw	ra,16(sp)
    8658:	dec00504 	addi	sp,sp,20
    865c:	f800283a 	ret

00008660 <fcvt>:
    8660:	defffd04 	addi	sp,sp,-12
    8664:	d8800317 	ldw	r2,12(sp)
    8668:	d8000115 	stw	zero,4(sp)
    866c:	dfc00215 	stw	ra,8(sp)
    8670:	d8800015 	stw	r2,0(sp)
    8674:	000d2380 	call	d238 <fcvtbuf>
    8678:	dfc00217 	ldw	ra,8(sp)
    867c:	dec00304 	addi	sp,sp,12
    8680:	f800283a 	ret

00008684 <fcvtf>:
    8684:	defffa04 	addi	sp,sp,-24
    8688:	dfc00515 	stw	ra,20(sp)
    868c:	dc800415 	stw	r18,16(sp)
    8690:	dc400315 	stw	r17,12(sp)
    8694:	3025883a 	mov	r18,r6
    8698:	3823883a 	mov	r17,r7
    869c:	dc000215 	stw	r16,8(sp)
    86a0:	2821883a 	mov	r16,r5
    86a4:	00082f80 	call	82f8 <__extendsfdf2>
    86a8:	900f883a 	mov	r7,r18
    86ac:	d8000115 	stw	zero,4(sp)
    86b0:	dc400015 	stw	r17,0(sp)
    86b4:	800d883a 	mov	r6,r16
    86b8:	1009883a 	mov	r4,r2
    86bc:	180b883a 	mov	r5,r3
    86c0:	000d2380 	call	d238 <fcvtbuf>
    86c4:	dfc00517 	ldw	ra,20(sp)
    86c8:	dc800417 	ldw	r18,16(sp)
    86cc:	dc400317 	ldw	r17,12(sp)
    86d0:	dc000217 	ldw	r16,8(sp)
    86d4:	dec00604 	addi	sp,sp,24
    86d8:	f800283a 	ret

000086dc <ecvt>:
    86dc:	defffd04 	addi	sp,sp,-12
    86e0:	d8800317 	ldw	r2,12(sp)
    86e4:	d8000115 	stw	zero,4(sp)
    86e8:	dfc00215 	stw	ra,8(sp)
    86ec:	d8800015 	stw	r2,0(sp)
    86f0:	000d3dc0 	call	d3dc <ecvtbuf>
    86f4:	dfc00217 	ldw	ra,8(sp)
    86f8:	dec00304 	addi	sp,sp,12
    86fc:	f800283a 	ret

00008700 <ecvtf>:
    8700:	defffa04 	addi	sp,sp,-24
    8704:	dfc00515 	stw	ra,20(sp)
    8708:	dc800415 	stw	r18,16(sp)
    870c:	dc400315 	stw	r17,12(sp)
    8710:	3025883a 	mov	r18,r6
    8714:	3823883a 	mov	r17,r7
    8718:	dc000215 	stw	r16,8(sp)
    871c:	2821883a 	mov	r16,r5
    8720:	00082f80 	call	82f8 <__extendsfdf2>
    8724:	900f883a 	mov	r7,r18
    8728:	d8000115 	stw	zero,4(sp)
    872c:	dc400015 	stw	r17,0(sp)
    8730:	800d883a 	mov	r6,r16
    8734:	1009883a 	mov	r4,r2
    8738:	180b883a 	mov	r5,r3
    873c:	000d3dc0 	call	d3dc <ecvtbuf>
    8740:	dfc00517 	ldw	ra,20(sp)
    8744:	dc800417 	ldw	r18,16(sp)
    8748:	dc400317 	ldw	r17,12(sp)
    874c:	dc000217 	ldw	r16,8(sp)
    8750:	dec00604 	addi	sp,sp,24
    8754:	f800283a 	ret

00008758 <gcvt>:
    8758:	defff804 	addi	sp,sp,-32
    875c:	dc400415 	stw	r17,16(sp)
    8760:	dc000315 	stw	r16,12(sp)
    8764:	3023883a 	mov	r17,r6
    8768:	3821883a 	mov	r16,r7
    876c:	000d883a 	mov	r6,zero
    8770:	000f883a 	mov	r7,zero
    8774:	dcc00615 	stw	r19,24(sp)
    8778:	dc800515 	stw	r18,20(sp)
    877c:	dfc00715 	stw	ra,28(sp)
    8780:	2027883a 	mov	r19,r4
    8784:	2825883a 	mov	r18,r5
    8788:	00138f00 	call	138f0 <__ledf2>
    878c:	10001516 	blt	r2,zero,87e4 <gcvt+0x8c>
    8790:	8005883a 	mov	r2,r16
    8794:	00c000b4 	movhi	r3,2
    8798:	18e92a04 	addi	r3,r3,-23384
    879c:	d8000215 	stw	zero,8(sp)
    87a0:	19000017 	ldw	r4,0(r3)
    87a4:	00c019c4 	movi	r3,103
    87a8:	d8c00115 	stw	r3,4(sp)
    87ac:	d8800015 	stw	r2,0(sp)
    87b0:	880f883a 	mov	r7,r17
    87b4:	980b883a 	mov	r5,r19
    87b8:	900d883a 	mov	r6,r18
    87bc:	000d51c0 	call	d51c <_gcvt>
    87c0:	10000126 	beq	r2,zero,87c8 <gcvt+0x70>
    87c4:	8005883a 	mov	r2,r16
    87c8:	dfc00717 	ldw	ra,28(sp)
    87cc:	dcc00617 	ldw	r19,24(sp)
    87d0:	dc800517 	ldw	r18,20(sp)
    87d4:	dc400417 	ldw	r17,16(sp)
    87d8:	dc000317 	ldw	r16,12(sp)
    87dc:	dec00804 	addi	sp,sp,32
    87e0:	f800283a 	ret
    87e4:	00800b44 	movi	r2,45
    87e8:	80800005 	stb	r2,0(r16)
    87ec:	8c7fffc4 	addi	r17,r17,-1
    87f0:	80800044 	addi	r2,r16,1
    87f4:	003fe706 	br	8794 <__alt_exception_stack_pointer+0xf8008794>

000087f8 <gcvtf>:
    87f8:	defffd04 	addi	sp,sp,-12
    87fc:	dc400115 	stw	r17,4(sp)
    8800:	dc000015 	stw	r16,0(sp)
    8804:	3023883a 	mov	r17,r6
    8808:	2821883a 	mov	r16,r5
    880c:	dfc00215 	stw	ra,8(sp)
    8810:	00082f80 	call	82f8 <__extendsfdf2>
    8814:	880f883a 	mov	r7,r17
    8818:	800d883a 	mov	r6,r16
    881c:	1009883a 	mov	r4,r2
    8820:	180b883a 	mov	r5,r3
    8824:	dfc00217 	ldw	ra,8(sp)
    8828:	dc400117 	ldw	r17,4(sp)
    882c:	dc000017 	ldw	r16,0(sp)
    8830:	dec00304 	addi	sp,sp,12
    8834:	00087581 	jmpi	8758 <gcvt>

00008838 <malloc>:
    8838:	008000b4 	movhi	r2,2
    883c:	10a92a04 	addi	r2,r2,-23384
    8840:	200b883a 	mov	r5,r4
    8844:	11000017 	ldw	r4,0(r2)
    8848:	00088601 	jmpi	8860 <_malloc_r>

0000884c <free>:
    884c:	008000b4 	movhi	r2,2
    8850:	10a92a04 	addi	r2,r2,-23384
    8854:	200b883a 	mov	r5,r4
    8858:	11000017 	ldw	r4,0(r2)
    885c:	000e30c1 	jmpi	e30c <_free_r>

00008860 <_malloc_r>:
    8860:	defff504 	addi	sp,sp,-44
    8864:	dc800315 	stw	r18,12(sp)
    8868:	dfc00a15 	stw	ra,40(sp)
    886c:	df000915 	stw	fp,36(sp)
    8870:	ddc00815 	stw	r23,32(sp)
    8874:	dd800715 	stw	r22,28(sp)
    8878:	dd400615 	stw	r21,24(sp)
    887c:	dd000515 	stw	r20,20(sp)
    8880:	dcc00415 	stw	r19,16(sp)
    8884:	dc400215 	stw	r17,8(sp)
    8888:	dc000115 	stw	r16,4(sp)
    888c:	288002c4 	addi	r2,r5,11
    8890:	00c00584 	movi	r3,22
    8894:	2025883a 	mov	r18,r4
    8898:	18807f2e 	bgeu	r3,r2,8a98 <_malloc_r+0x238>
    889c:	047ffe04 	movi	r17,-8
    88a0:	1462703a 	and	r17,r2,r17
    88a4:	8800a316 	blt	r17,zero,8b34 <_malloc_r+0x2d4>
    88a8:	8940a236 	bltu	r17,r5,8b34 <_malloc_r+0x2d4>
    88ac:	00141300 	call	14130 <__malloc_lock>
    88b0:	00807dc4 	movi	r2,503
    88b4:	1441e92e 	bgeu	r2,r17,905c <_malloc_r+0x7fc>
    88b8:	8804d27a 	srli	r2,r17,9
    88bc:	1000a126 	beq	r2,zero,8b44 <_malloc_r+0x2e4>
    88c0:	00c00104 	movi	r3,4
    88c4:	18811e36 	bltu	r3,r2,8d40 <_malloc_r+0x4e0>
    88c8:	8804d1ba 	srli	r2,r17,6
    88cc:	12000e44 	addi	r8,r2,57
    88d0:	11c00e04 	addi	r7,r2,56
    88d4:	4209883a 	add	r4,r8,r8
    88d8:	04c000b4 	movhi	r19,2
    88dc:	2109883a 	add	r4,r4,r4
    88e0:	9ce32804 	addi	r19,r19,-29536
    88e4:	2109883a 	add	r4,r4,r4
    88e8:	9909883a 	add	r4,r19,r4
    88ec:	24000117 	ldw	r16,4(r4)
    88f0:	213ffe04 	addi	r4,r4,-8
    88f4:	24009726 	beq	r4,r16,8b54 <_malloc_r+0x2f4>
    88f8:	80800117 	ldw	r2,4(r16)
    88fc:	01bfff04 	movi	r6,-4
    8900:	014003c4 	movi	r5,15
    8904:	1184703a 	and	r2,r2,r6
    8908:	1447c83a 	sub	r3,r2,r17
    890c:	28c00716 	blt	r5,r3,892c <_malloc_r+0xcc>
    8910:	1800920e 	bge	r3,zero,8b5c <_malloc_r+0x2fc>
    8914:	84000317 	ldw	r16,12(r16)
    8918:	24008e26 	beq	r4,r16,8b54 <_malloc_r+0x2f4>
    891c:	80800117 	ldw	r2,4(r16)
    8920:	1184703a 	and	r2,r2,r6
    8924:	1447c83a 	sub	r3,r2,r17
    8928:	28fff90e 	bge	r5,r3,8910 <__alt_exception_stack_pointer+0xf8008910>
    892c:	3809883a 	mov	r4,r7
    8930:	018000b4 	movhi	r6,2
    8934:	9c000417 	ldw	r16,16(r19)
    8938:	31a32804 	addi	r6,r6,-29536
    893c:	32000204 	addi	r8,r6,8
    8940:	82013426 	beq	r16,r8,8e14 <_malloc_r+0x5b4>
    8944:	80c00117 	ldw	r3,4(r16)
    8948:	00bfff04 	movi	r2,-4
    894c:	188e703a 	and	r7,r3,r2
    8950:	3c45c83a 	sub	r2,r7,r17
    8954:	00c003c4 	movi	r3,15
    8958:	18811f16 	blt	r3,r2,8dd8 <_malloc_r+0x578>
    895c:	32000515 	stw	r8,20(r6)
    8960:	32000415 	stw	r8,16(r6)
    8964:	10007f0e 	bge	r2,zero,8b64 <_malloc_r+0x304>
    8968:	00807fc4 	movi	r2,511
    896c:	11c0fd36 	bltu	r2,r7,8d64 <_malloc_r+0x504>
    8970:	3806d0fa 	srli	r3,r7,3
    8974:	01c00044 	movi	r7,1
    8978:	30800117 	ldw	r2,4(r6)
    897c:	19400044 	addi	r5,r3,1
    8980:	294b883a 	add	r5,r5,r5
    8984:	1807d0ba 	srai	r3,r3,2
    8988:	294b883a 	add	r5,r5,r5
    898c:	294b883a 	add	r5,r5,r5
    8990:	298b883a 	add	r5,r5,r6
    8994:	38c6983a 	sll	r3,r7,r3
    8998:	29c00017 	ldw	r7,0(r5)
    899c:	2a7ffe04 	addi	r9,r5,-8
    89a0:	1886b03a 	or	r3,r3,r2
    89a4:	82400315 	stw	r9,12(r16)
    89a8:	81c00215 	stw	r7,8(r16)
    89ac:	30c00115 	stw	r3,4(r6)
    89b0:	2c000015 	stw	r16,0(r5)
    89b4:	3c000315 	stw	r16,12(r7)
    89b8:	2005d0ba 	srai	r2,r4,2
    89bc:	01400044 	movi	r5,1
    89c0:	288a983a 	sll	r5,r5,r2
    89c4:	19406f36 	bltu	r3,r5,8b84 <_malloc_r+0x324>
    89c8:	28c4703a 	and	r2,r5,r3
    89cc:	10000a1e 	bne	r2,zero,89f8 <_malloc_r+0x198>
    89d0:	00bfff04 	movi	r2,-4
    89d4:	294b883a 	add	r5,r5,r5
    89d8:	2088703a 	and	r4,r4,r2
    89dc:	28c4703a 	and	r2,r5,r3
    89e0:	21000104 	addi	r4,r4,4
    89e4:	1000041e 	bne	r2,zero,89f8 <_malloc_r+0x198>
    89e8:	294b883a 	add	r5,r5,r5
    89ec:	28c4703a 	and	r2,r5,r3
    89f0:	21000104 	addi	r4,r4,4
    89f4:	103ffc26 	beq	r2,zero,89e8 <__alt_exception_stack_pointer+0xf80089e8>
    89f8:	02bfff04 	movi	r10,-4
    89fc:	024003c4 	movi	r9,15
    8a00:	21800044 	addi	r6,r4,1
    8a04:	318d883a 	add	r6,r6,r6
    8a08:	318d883a 	add	r6,r6,r6
    8a0c:	318d883a 	add	r6,r6,r6
    8a10:	998d883a 	add	r6,r19,r6
    8a14:	333ffe04 	addi	r12,r6,-8
    8a18:	2017883a 	mov	r11,r4
    8a1c:	31800104 	addi	r6,r6,4
    8a20:	34000017 	ldw	r16,0(r6)
    8a24:	31fffd04 	addi	r7,r6,-12
    8a28:	81c0041e 	bne	r16,r7,8a3c <_malloc_r+0x1dc>
    8a2c:	0000fb06 	br	8e1c <_malloc_r+0x5bc>
    8a30:	1801030e 	bge	r3,zero,8e40 <_malloc_r+0x5e0>
    8a34:	84000317 	ldw	r16,12(r16)
    8a38:	81c0f826 	beq	r16,r7,8e1c <_malloc_r+0x5bc>
    8a3c:	80800117 	ldw	r2,4(r16)
    8a40:	1284703a 	and	r2,r2,r10
    8a44:	1447c83a 	sub	r3,r2,r17
    8a48:	48fff90e 	bge	r9,r3,8a30 <__alt_exception_stack_pointer+0xf8008a30>
    8a4c:	80800317 	ldw	r2,12(r16)
    8a50:	81000217 	ldw	r4,8(r16)
    8a54:	89400054 	ori	r5,r17,1
    8a58:	81400115 	stw	r5,4(r16)
    8a5c:	20800315 	stw	r2,12(r4)
    8a60:	11000215 	stw	r4,8(r2)
    8a64:	8463883a 	add	r17,r16,r17
    8a68:	9c400515 	stw	r17,20(r19)
    8a6c:	9c400415 	stw	r17,16(r19)
    8a70:	18800054 	ori	r2,r3,1
    8a74:	88800115 	stw	r2,4(r17)
    8a78:	8a000315 	stw	r8,12(r17)
    8a7c:	8a000215 	stw	r8,8(r17)
    8a80:	88e3883a 	add	r17,r17,r3
    8a84:	88c00015 	stw	r3,0(r17)
    8a88:	9009883a 	mov	r4,r18
    8a8c:	00141540 	call	14154 <__malloc_unlock>
    8a90:	80800204 	addi	r2,r16,8
    8a94:	00001b06 	br	8b04 <_malloc_r+0x2a4>
    8a98:	04400404 	movi	r17,16
    8a9c:	89402536 	bltu	r17,r5,8b34 <_malloc_r+0x2d4>
    8aa0:	00141300 	call	14130 <__malloc_lock>
    8aa4:	00800184 	movi	r2,6
    8aa8:	01000084 	movi	r4,2
    8aac:	04c000b4 	movhi	r19,2
    8ab0:	1085883a 	add	r2,r2,r2
    8ab4:	9ce32804 	addi	r19,r19,-29536
    8ab8:	1085883a 	add	r2,r2,r2
    8abc:	9885883a 	add	r2,r19,r2
    8ac0:	14000117 	ldw	r16,4(r2)
    8ac4:	10fffe04 	addi	r3,r2,-8
    8ac8:	80c0d926 	beq	r16,r3,8e30 <_malloc_r+0x5d0>
    8acc:	80c00117 	ldw	r3,4(r16)
    8ad0:	81000317 	ldw	r4,12(r16)
    8ad4:	00bfff04 	movi	r2,-4
    8ad8:	1884703a 	and	r2,r3,r2
    8adc:	81400217 	ldw	r5,8(r16)
    8ae0:	8085883a 	add	r2,r16,r2
    8ae4:	10c00117 	ldw	r3,4(r2)
    8ae8:	29000315 	stw	r4,12(r5)
    8aec:	21400215 	stw	r5,8(r4)
    8af0:	18c00054 	ori	r3,r3,1
    8af4:	10c00115 	stw	r3,4(r2)
    8af8:	9009883a 	mov	r4,r18
    8afc:	00141540 	call	14154 <__malloc_unlock>
    8b00:	80800204 	addi	r2,r16,8
    8b04:	dfc00a17 	ldw	ra,40(sp)
    8b08:	df000917 	ldw	fp,36(sp)
    8b0c:	ddc00817 	ldw	r23,32(sp)
    8b10:	dd800717 	ldw	r22,28(sp)
    8b14:	dd400617 	ldw	r21,24(sp)
    8b18:	dd000517 	ldw	r20,20(sp)
    8b1c:	dcc00417 	ldw	r19,16(sp)
    8b20:	dc800317 	ldw	r18,12(sp)
    8b24:	dc400217 	ldw	r17,8(sp)
    8b28:	dc000117 	ldw	r16,4(sp)
    8b2c:	dec00b04 	addi	sp,sp,44
    8b30:	f800283a 	ret
    8b34:	00800304 	movi	r2,12
    8b38:	90800015 	stw	r2,0(r18)
    8b3c:	0005883a 	mov	r2,zero
    8b40:	003ff006 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8b44:	01002004 	movi	r4,128
    8b48:	02001004 	movi	r8,64
    8b4c:	01c00fc4 	movi	r7,63
    8b50:	003f6106 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8b54:	4009883a 	mov	r4,r8
    8b58:	003f7506 	br	8930 <__alt_exception_stack_pointer+0xf8008930>
    8b5c:	81000317 	ldw	r4,12(r16)
    8b60:	003fde06 	br	8adc <__alt_exception_stack_pointer+0xf8008adc>
    8b64:	81c5883a 	add	r2,r16,r7
    8b68:	11400117 	ldw	r5,4(r2)
    8b6c:	9009883a 	mov	r4,r18
    8b70:	29400054 	ori	r5,r5,1
    8b74:	11400115 	stw	r5,4(r2)
    8b78:	00141540 	call	14154 <__malloc_unlock>
    8b7c:	80800204 	addi	r2,r16,8
    8b80:	003fe006 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8b84:	9c000217 	ldw	r16,8(r19)
    8b88:	00bfff04 	movi	r2,-4
    8b8c:	85800117 	ldw	r22,4(r16)
    8b90:	b0ac703a 	and	r22,r22,r2
    8b94:	b4400336 	bltu	r22,r17,8ba4 <_malloc_r+0x344>
    8b98:	b445c83a 	sub	r2,r22,r17
    8b9c:	00c003c4 	movi	r3,15
    8ba0:	18805d16 	blt	r3,r2,8d18 <_malloc_r+0x4b8>
    8ba4:	05c000b4 	movhi	r23,2
    8ba8:	008000b4 	movhi	r2,2
    8bac:	10b21c04 	addi	r2,r2,-14224
    8bb0:	bde92b04 	addi	r23,r23,-23380
    8bb4:	15400017 	ldw	r21,0(r2)
    8bb8:	b8c00017 	ldw	r3,0(r23)
    8bbc:	00bfffc4 	movi	r2,-1
    8bc0:	858d883a 	add	r6,r16,r22
    8bc4:	8d6b883a 	add	r21,r17,r21
    8bc8:	1880ea26 	beq	r3,r2,8f74 <_malloc_r+0x714>
    8bcc:	ad4403c4 	addi	r21,r21,4111
    8bd0:	00bc0004 	movi	r2,-4096
    8bd4:	a8aa703a 	and	r21,r21,r2
    8bd8:	a80b883a 	mov	r5,r21
    8bdc:	9009883a 	mov	r4,r18
    8be0:	d9800015 	stw	r6,0(sp)
    8be4:	00091ac0 	call	91ac <_sbrk_r>
    8be8:	1029883a 	mov	r20,r2
    8bec:	00bfffc4 	movi	r2,-1
    8bf0:	d9800017 	ldw	r6,0(sp)
    8bf4:	a080e826 	beq	r20,r2,8f98 <_malloc_r+0x738>
    8bf8:	a180a636 	bltu	r20,r6,8e94 <_malloc_r+0x634>
    8bfc:	070000b4 	movhi	fp,2
    8c00:	e7322804 	addi	fp,fp,-14176
    8c04:	e0800017 	ldw	r2,0(fp)
    8c08:	a887883a 	add	r3,r21,r2
    8c0c:	e0c00015 	stw	r3,0(fp)
    8c10:	3500e626 	beq	r6,r20,8fac <_malloc_r+0x74c>
    8c14:	b9000017 	ldw	r4,0(r23)
    8c18:	00bfffc4 	movi	r2,-1
    8c1c:	2080ee26 	beq	r4,r2,8fd8 <_malloc_r+0x778>
    8c20:	a185c83a 	sub	r2,r20,r6
    8c24:	10c5883a 	add	r2,r2,r3
    8c28:	e0800015 	stw	r2,0(fp)
    8c2c:	a0c001cc 	andi	r3,r20,7
    8c30:	1800bc26 	beq	r3,zero,8f24 <_malloc_r+0x6c4>
    8c34:	a0e9c83a 	sub	r20,r20,r3
    8c38:	00840204 	movi	r2,4104
    8c3c:	a5000204 	addi	r20,r20,8
    8c40:	10c7c83a 	sub	r3,r2,r3
    8c44:	a545883a 	add	r2,r20,r21
    8c48:	1083ffcc 	andi	r2,r2,4095
    8c4c:	18abc83a 	sub	r21,r3,r2
    8c50:	a80b883a 	mov	r5,r21
    8c54:	9009883a 	mov	r4,r18
    8c58:	00091ac0 	call	91ac <_sbrk_r>
    8c5c:	00ffffc4 	movi	r3,-1
    8c60:	10c0e126 	beq	r2,r3,8fe8 <_malloc_r+0x788>
    8c64:	1505c83a 	sub	r2,r2,r20
    8c68:	1545883a 	add	r2,r2,r21
    8c6c:	10800054 	ori	r2,r2,1
    8c70:	e0c00017 	ldw	r3,0(fp)
    8c74:	9d000215 	stw	r20,8(r19)
    8c78:	a0800115 	stw	r2,4(r20)
    8c7c:	a8c7883a 	add	r3,r21,r3
    8c80:	e0c00015 	stw	r3,0(fp)
    8c84:	84c00e26 	beq	r16,r19,8cc0 <_malloc_r+0x460>
    8c88:	018003c4 	movi	r6,15
    8c8c:	3580a72e 	bgeu	r6,r22,8f2c <_malloc_r+0x6cc>
    8c90:	81400117 	ldw	r5,4(r16)
    8c94:	013ffe04 	movi	r4,-8
    8c98:	b0bffd04 	addi	r2,r22,-12
    8c9c:	1104703a 	and	r2,r2,r4
    8ca0:	2900004c 	andi	r4,r5,1
    8ca4:	2088b03a 	or	r4,r4,r2
    8ca8:	81000115 	stw	r4,4(r16)
    8cac:	01400144 	movi	r5,5
    8cb0:	8089883a 	add	r4,r16,r2
    8cb4:	21400115 	stw	r5,4(r4)
    8cb8:	21400215 	stw	r5,8(r4)
    8cbc:	3080cd36 	bltu	r6,r2,8ff4 <_malloc_r+0x794>
    8cc0:	008000b4 	movhi	r2,2
    8cc4:	10b21b04 	addi	r2,r2,-14228
    8cc8:	11000017 	ldw	r4,0(r2)
    8ccc:	20c0012e 	bgeu	r4,r3,8cd4 <_malloc_r+0x474>
    8cd0:	10c00015 	stw	r3,0(r2)
    8cd4:	008000b4 	movhi	r2,2
    8cd8:	10b21a04 	addi	r2,r2,-14232
    8cdc:	11000017 	ldw	r4,0(r2)
    8ce0:	9c000217 	ldw	r16,8(r19)
    8ce4:	20c0012e 	bgeu	r4,r3,8cec <_malloc_r+0x48c>
    8ce8:	10c00015 	stw	r3,0(r2)
    8cec:	80c00117 	ldw	r3,4(r16)
    8cf0:	00bfff04 	movi	r2,-4
    8cf4:	1886703a 	and	r3,r3,r2
    8cf8:	1c45c83a 	sub	r2,r3,r17
    8cfc:	1c400236 	bltu	r3,r17,8d08 <_malloc_r+0x4a8>
    8d00:	00c003c4 	movi	r3,15
    8d04:	18800416 	blt	r3,r2,8d18 <_malloc_r+0x4b8>
    8d08:	9009883a 	mov	r4,r18
    8d0c:	00141540 	call	14154 <__malloc_unlock>
    8d10:	0005883a 	mov	r2,zero
    8d14:	003f7b06 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8d18:	88c00054 	ori	r3,r17,1
    8d1c:	80c00115 	stw	r3,4(r16)
    8d20:	8463883a 	add	r17,r16,r17
    8d24:	10800054 	ori	r2,r2,1
    8d28:	9c400215 	stw	r17,8(r19)
    8d2c:	88800115 	stw	r2,4(r17)
    8d30:	9009883a 	mov	r4,r18
    8d34:	00141540 	call	14154 <__malloc_unlock>
    8d38:	80800204 	addi	r2,r16,8
    8d3c:	003f7106 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8d40:	00c00504 	movi	r3,20
    8d44:	18804a2e 	bgeu	r3,r2,8e70 <_malloc_r+0x610>
    8d48:	00c01504 	movi	r3,84
    8d4c:	18806e36 	bltu	r3,r2,8f08 <_malloc_r+0x6a8>
    8d50:	8804d33a 	srli	r2,r17,12
    8d54:	12001bc4 	addi	r8,r2,111
    8d58:	11c01b84 	addi	r7,r2,110
    8d5c:	4209883a 	add	r4,r8,r8
    8d60:	003edd06 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8d64:	3804d27a 	srli	r2,r7,9
    8d68:	00c00104 	movi	r3,4
    8d6c:	1880442e 	bgeu	r3,r2,8e80 <_malloc_r+0x620>
    8d70:	00c00504 	movi	r3,20
    8d74:	18808136 	bltu	r3,r2,8f7c <_malloc_r+0x71c>
    8d78:	11401704 	addi	r5,r2,92
    8d7c:	10c016c4 	addi	r3,r2,91
    8d80:	294b883a 	add	r5,r5,r5
    8d84:	294b883a 	add	r5,r5,r5
    8d88:	294b883a 	add	r5,r5,r5
    8d8c:	994b883a 	add	r5,r19,r5
    8d90:	28800017 	ldw	r2,0(r5)
    8d94:	018000b4 	movhi	r6,2
    8d98:	297ffe04 	addi	r5,r5,-8
    8d9c:	31a32804 	addi	r6,r6,-29536
    8da0:	28806526 	beq	r5,r2,8f38 <_malloc_r+0x6d8>
    8da4:	01bfff04 	movi	r6,-4
    8da8:	10c00117 	ldw	r3,4(r2)
    8dac:	1986703a 	and	r3,r3,r6
    8db0:	38c0022e 	bgeu	r7,r3,8dbc <_malloc_r+0x55c>
    8db4:	10800217 	ldw	r2,8(r2)
    8db8:	28bffb1e 	bne	r5,r2,8da8 <__alt_exception_stack_pointer+0xf8008da8>
    8dbc:	11400317 	ldw	r5,12(r2)
    8dc0:	98c00117 	ldw	r3,4(r19)
    8dc4:	81400315 	stw	r5,12(r16)
    8dc8:	80800215 	stw	r2,8(r16)
    8dcc:	2c000215 	stw	r16,8(r5)
    8dd0:	14000315 	stw	r16,12(r2)
    8dd4:	003ef806 	br	89b8 <__alt_exception_stack_pointer+0xf80089b8>
    8dd8:	88c00054 	ori	r3,r17,1
    8ddc:	80c00115 	stw	r3,4(r16)
    8de0:	8463883a 	add	r17,r16,r17
    8de4:	34400515 	stw	r17,20(r6)
    8de8:	34400415 	stw	r17,16(r6)
    8dec:	10c00054 	ori	r3,r2,1
    8df0:	8a000315 	stw	r8,12(r17)
    8df4:	8a000215 	stw	r8,8(r17)
    8df8:	88c00115 	stw	r3,4(r17)
    8dfc:	88a3883a 	add	r17,r17,r2
    8e00:	88800015 	stw	r2,0(r17)
    8e04:	9009883a 	mov	r4,r18
    8e08:	00141540 	call	14154 <__malloc_unlock>
    8e0c:	80800204 	addi	r2,r16,8
    8e10:	003f3c06 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8e14:	30c00117 	ldw	r3,4(r6)
    8e18:	003ee706 	br	89b8 <__alt_exception_stack_pointer+0xf80089b8>
    8e1c:	5ac00044 	addi	r11,r11,1
    8e20:	588000cc 	andi	r2,r11,3
    8e24:	31800204 	addi	r6,r6,8
    8e28:	103efd1e 	bne	r2,zero,8a20 <__alt_exception_stack_pointer+0xf8008a20>
    8e2c:	00002406 	br	8ec0 <_malloc_r+0x660>
    8e30:	14000317 	ldw	r16,12(r2)
    8e34:	143f251e 	bne	r2,r16,8acc <__alt_exception_stack_pointer+0xf8008acc>
    8e38:	21000084 	addi	r4,r4,2
    8e3c:	003ebc06 	br	8930 <__alt_exception_stack_pointer+0xf8008930>
    8e40:	8085883a 	add	r2,r16,r2
    8e44:	10c00117 	ldw	r3,4(r2)
    8e48:	81000317 	ldw	r4,12(r16)
    8e4c:	81400217 	ldw	r5,8(r16)
    8e50:	18c00054 	ori	r3,r3,1
    8e54:	10c00115 	stw	r3,4(r2)
    8e58:	29000315 	stw	r4,12(r5)
    8e5c:	21400215 	stw	r5,8(r4)
    8e60:	9009883a 	mov	r4,r18
    8e64:	00141540 	call	14154 <__malloc_unlock>
    8e68:	80800204 	addi	r2,r16,8
    8e6c:	003f2506 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8e70:	12001704 	addi	r8,r2,92
    8e74:	11c016c4 	addi	r7,r2,91
    8e78:	4209883a 	add	r4,r8,r8
    8e7c:	003e9606 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8e80:	3804d1ba 	srli	r2,r7,6
    8e84:	11400e44 	addi	r5,r2,57
    8e88:	10c00e04 	addi	r3,r2,56
    8e8c:	294b883a 	add	r5,r5,r5
    8e90:	003fbc06 	br	8d84 <__alt_exception_stack_pointer+0xf8008d84>
    8e94:	84ff5926 	beq	r16,r19,8bfc <__alt_exception_stack_pointer+0xf8008bfc>
    8e98:	008000b4 	movhi	r2,2
    8e9c:	10a32804 	addi	r2,r2,-29536
    8ea0:	14000217 	ldw	r16,8(r2)
    8ea4:	00bfff04 	movi	r2,-4
    8ea8:	80c00117 	ldw	r3,4(r16)
    8eac:	1886703a 	and	r3,r3,r2
    8eb0:	003f9106 	br	8cf8 <__alt_exception_stack_pointer+0xf8008cf8>
    8eb4:	60800217 	ldw	r2,8(r12)
    8eb8:	213fffc4 	addi	r4,r4,-1
    8ebc:	1300651e 	bne	r2,r12,9054 <_malloc_r+0x7f4>
    8ec0:	208000cc 	andi	r2,r4,3
    8ec4:	633ffe04 	addi	r12,r12,-8
    8ec8:	103ffa1e 	bne	r2,zero,8eb4 <__alt_exception_stack_pointer+0xf8008eb4>
    8ecc:	98800117 	ldw	r2,4(r19)
    8ed0:	0146303a 	nor	r3,zero,r5
    8ed4:	1884703a 	and	r2,r3,r2
    8ed8:	98800115 	stw	r2,4(r19)
    8edc:	294b883a 	add	r5,r5,r5
    8ee0:	117f2836 	bltu	r2,r5,8b84 <__alt_exception_stack_pointer+0xf8008b84>
    8ee4:	283f2726 	beq	r5,zero,8b84 <__alt_exception_stack_pointer+0xf8008b84>
    8ee8:	2886703a 	and	r3,r5,r2
    8eec:	5809883a 	mov	r4,r11
    8ef0:	183ec31e 	bne	r3,zero,8a00 <__alt_exception_stack_pointer+0xf8008a00>
    8ef4:	294b883a 	add	r5,r5,r5
    8ef8:	2886703a 	and	r3,r5,r2
    8efc:	21000104 	addi	r4,r4,4
    8f00:	183ffc26 	beq	r3,zero,8ef4 <__alt_exception_stack_pointer+0xf8008ef4>
    8f04:	003ebe06 	br	8a00 <__alt_exception_stack_pointer+0xf8008a00>
    8f08:	00c05504 	movi	r3,340
    8f0c:	18801236 	bltu	r3,r2,8f58 <_malloc_r+0x6f8>
    8f10:	8804d3fa 	srli	r2,r17,15
    8f14:	12001e04 	addi	r8,r2,120
    8f18:	11c01dc4 	addi	r7,r2,119
    8f1c:	4209883a 	add	r4,r8,r8
    8f20:	003e6d06 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8f24:	00c40004 	movi	r3,4096
    8f28:	003f4606 	br	8c44 <__alt_exception_stack_pointer+0xf8008c44>
    8f2c:	00800044 	movi	r2,1
    8f30:	a0800115 	stw	r2,4(r20)
    8f34:	003f7406 	br	8d08 <__alt_exception_stack_pointer+0xf8008d08>
    8f38:	1805d0ba 	srai	r2,r3,2
    8f3c:	01c00044 	movi	r7,1
    8f40:	30c00117 	ldw	r3,4(r6)
    8f44:	388e983a 	sll	r7,r7,r2
    8f48:	2805883a 	mov	r2,r5
    8f4c:	38c6b03a 	or	r3,r7,r3
    8f50:	30c00115 	stw	r3,4(r6)
    8f54:	003f9b06 	br	8dc4 <__alt_exception_stack_pointer+0xf8008dc4>
    8f58:	00c15504 	movi	r3,1364
    8f5c:	18801a36 	bltu	r3,r2,8fc8 <_malloc_r+0x768>
    8f60:	8804d4ba 	srli	r2,r17,18
    8f64:	12001f44 	addi	r8,r2,125
    8f68:	11c01f04 	addi	r7,r2,124
    8f6c:	4209883a 	add	r4,r8,r8
    8f70:	003e5906 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8f74:	ad400404 	addi	r21,r21,16
    8f78:	003f1706 	br	8bd8 <__alt_exception_stack_pointer+0xf8008bd8>
    8f7c:	00c01504 	movi	r3,84
    8f80:	18802336 	bltu	r3,r2,9010 <_malloc_r+0x7b0>
    8f84:	3804d33a 	srli	r2,r7,12
    8f88:	11401bc4 	addi	r5,r2,111
    8f8c:	10c01b84 	addi	r3,r2,110
    8f90:	294b883a 	add	r5,r5,r5
    8f94:	003f7b06 	br	8d84 <__alt_exception_stack_pointer+0xf8008d84>
    8f98:	9c000217 	ldw	r16,8(r19)
    8f9c:	00bfff04 	movi	r2,-4
    8fa0:	80c00117 	ldw	r3,4(r16)
    8fa4:	1886703a 	and	r3,r3,r2
    8fa8:	003f5306 	br	8cf8 <__alt_exception_stack_pointer+0xf8008cf8>
    8fac:	3083ffcc 	andi	r2,r6,4095
    8fb0:	103f181e 	bne	r2,zero,8c14 <__alt_exception_stack_pointer+0xf8008c14>
    8fb4:	99000217 	ldw	r4,8(r19)
    8fb8:	b545883a 	add	r2,r22,r21
    8fbc:	10800054 	ori	r2,r2,1
    8fc0:	20800115 	stw	r2,4(r4)
    8fc4:	003f3e06 	br	8cc0 <__alt_exception_stack_pointer+0xf8008cc0>
    8fc8:	01003f84 	movi	r4,254
    8fcc:	02001fc4 	movi	r8,127
    8fd0:	01c01f84 	movi	r7,126
    8fd4:	003e4006 	br	88d8 <__alt_exception_stack_pointer+0xf80088d8>
    8fd8:	008000b4 	movhi	r2,2
    8fdc:	10a92b04 	addi	r2,r2,-23380
    8fe0:	15000015 	stw	r20,0(r2)
    8fe4:	003f1106 	br	8c2c <__alt_exception_stack_pointer+0xf8008c2c>
    8fe8:	00800044 	movi	r2,1
    8fec:	002b883a 	mov	r21,zero
    8ff0:	003f1f06 	br	8c70 <__alt_exception_stack_pointer+0xf8008c70>
    8ff4:	81400204 	addi	r5,r16,8
    8ff8:	9009883a 	mov	r4,r18
    8ffc:	000e30c0 	call	e30c <_free_r>
    9000:	008000b4 	movhi	r2,2
    9004:	10b22804 	addi	r2,r2,-14176
    9008:	10c00017 	ldw	r3,0(r2)
    900c:	003f2c06 	br	8cc0 <__alt_exception_stack_pointer+0xf8008cc0>
    9010:	00c05504 	movi	r3,340
    9014:	18800536 	bltu	r3,r2,902c <_malloc_r+0x7cc>
    9018:	3804d3fa 	srli	r2,r7,15
    901c:	11401e04 	addi	r5,r2,120
    9020:	10c01dc4 	addi	r3,r2,119
    9024:	294b883a 	add	r5,r5,r5
    9028:	003f5606 	br	8d84 <__alt_exception_stack_pointer+0xf8008d84>
    902c:	00c15504 	movi	r3,1364
    9030:	18800536 	bltu	r3,r2,9048 <_malloc_r+0x7e8>
    9034:	3804d4ba 	srli	r2,r7,18
    9038:	11401f44 	addi	r5,r2,125
    903c:	10c01f04 	addi	r3,r2,124
    9040:	294b883a 	add	r5,r5,r5
    9044:	003f4f06 	br	8d84 <__alt_exception_stack_pointer+0xf8008d84>
    9048:	01403f84 	movi	r5,254
    904c:	00c01f84 	movi	r3,126
    9050:	003f4c06 	br	8d84 <__alt_exception_stack_pointer+0xf8008d84>
    9054:	98800117 	ldw	r2,4(r19)
    9058:	003fa006 	br	8edc <__alt_exception_stack_pointer+0xf8008edc>
    905c:	8808d0fa 	srli	r4,r17,3
    9060:	20800044 	addi	r2,r4,1
    9064:	1085883a 	add	r2,r2,r2
    9068:	003e9006 	br	8aac <__alt_exception_stack_pointer+0xf8008aac>

0000906c <_printf_r>:
    906c:	defffd04 	addi	sp,sp,-12
    9070:	2805883a 	mov	r2,r5
    9074:	dfc00015 	stw	ra,0(sp)
    9078:	d9800115 	stw	r6,4(sp)
    907c:	d9c00215 	stw	r7,8(sp)
    9080:	21400217 	ldw	r5,8(r4)
    9084:	d9c00104 	addi	r7,sp,4
    9088:	100d883a 	mov	r6,r2
    908c:	00092a00 	call	92a0 <___vfprintf_internal_r>
    9090:	dfc00017 	ldw	ra,0(sp)
    9094:	dec00304 	addi	sp,sp,12
    9098:	f800283a 	ret

0000909c <printf>:
    909c:	defffc04 	addi	sp,sp,-16
    90a0:	dfc00015 	stw	ra,0(sp)
    90a4:	d9400115 	stw	r5,4(sp)
    90a8:	d9800215 	stw	r6,8(sp)
    90ac:	d9c00315 	stw	r7,12(sp)
    90b0:	008000b4 	movhi	r2,2
    90b4:	10a92a04 	addi	r2,r2,-23384
    90b8:	10800017 	ldw	r2,0(r2)
    90bc:	200b883a 	mov	r5,r4
    90c0:	d9800104 	addi	r6,sp,4
    90c4:	11000217 	ldw	r4,8(r2)
    90c8:	000b57c0 	call	b57c <__vfprintf_internal>
    90cc:	dfc00017 	ldw	ra,0(sp)
    90d0:	dec00404 	addi	sp,sp,16
    90d4:	f800283a 	ret

000090d8 <_puts_r>:
    90d8:	defff604 	addi	sp,sp,-40
    90dc:	dc000715 	stw	r16,28(sp)
    90e0:	2021883a 	mov	r16,r4
    90e4:	2809883a 	mov	r4,r5
    90e8:	dc400815 	stw	r17,32(sp)
    90ec:	dfc00915 	stw	ra,36(sp)
    90f0:	2823883a 	mov	r17,r5
    90f4:	00092000 	call	9200 <strlen>
    90f8:	10c00044 	addi	r3,r2,1
    90fc:	d8800115 	stw	r2,4(sp)
    9100:	00800074 	movhi	r2,1
    9104:	109fd704 	addi	r2,r2,32604
    9108:	d8800215 	stw	r2,8(sp)
    910c:	00800044 	movi	r2,1
    9110:	d8800315 	stw	r2,12(sp)
    9114:	00800084 	movi	r2,2
    9118:	dc400015 	stw	r17,0(sp)
    911c:	d8c00615 	stw	r3,24(sp)
    9120:	dec00415 	stw	sp,16(sp)
    9124:	d8800515 	stw	r2,20(sp)
    9128:	80000226 	beq	r16,zero,9134 <_puts_r+0x5c>
    912c:	80800e17 	ldw	r2,56(r16)
    9130:	10001426 	beq	r2,zero,9184 <_puts_r+0xac>
    9134:	81400217 	ldw	r5,8(r16)
    9138:	2880030b 	ldhu	r2,12(r5)
    913c:	10c8000c 	andi	r3,r2,8192
    9140:	1800061e 	bne	r3,zero,915c <_puts_r+0x84>
    9144:	29001917 	ldw	r4,100(r5)
    9148:	00f7ffc4 	movi	r3,-8193
    914c:	10880014 	ori	r2,r2,8192
    9150:	20c6703a 	and	r3,r4,r3
    9154:	2880030d 	sth	r2,12(r5)
    9158:	28c01915 	stw	r3,100(r5)
    915c:	d9800404 	addi	r6,sp,16
    9160:	8009883a 	mov	r4,r16
    9164:	000e61c0 	call	e61c <__sfvwrite_r>
    9168:	1000091e 	bne	r2,zero,9190 <_puts_r+0xb8>
    916c:	00800284 	movi	r2,10
    9170:	dfc00917 	ldw	ra,36(sp)
    9174:	dc400817 	ldw	r17,32(sp)
    9178:	dc000717 	ldw	r16,28(sp)
    917c:	dec00a04 	addi	sp,sp,40
    9180:	f800283a 	ret
    9184:	8009883a 	mov	r4,r16
    9188:	000e1980 	call	e198 <__sinit>
    918c:	003fe906 	br	9134 <__alt_exception_stack_pointer+0xf8009134>
    9190:	00bfffc4 	movi	r2,-1
    9194:	003ff606 	br	9170 <__alt_exception_stack_pointer+0xf8009170>

00009198 <puts>:
    9198:	008000b4 	movhi	r2,2
    919c:	10a92a04 	addi	r2,r2,-23384
    91a0:	200b883a 	mov	r5,r4
    91a4:	11000017 	ldw	r4,0(r2)
    91a8:	00090d81 	jmpi	90d8 <_puts_r>

000091ac <_sbrk_r>:
    91ac:	defffd04 	addi	sp,sp,-12
    91b0:	dc000015 	stw	r16,0(sp)
    91b4:	040000b4 	movhi	r16,2
    91b8:	dc400115 	stw	r17,4(sp)
    91bc:	84321d04 	addi	r16,r16,-14220
    91c0:	2023883a 	mov	r17,r4
    91c4:	2809883a 	mov	r4,r5
    91c8:	dfc00215 	stw	ra,8(sp)
    91cc:	80000015 	stw	zero,0(r16)
    91d0:	001433c0 	call	1433c <sbrk>
    91d4:	00ffffc4 	movi	r3,-1
    91d8:	10c00526 	beq	r2,r3,91f0 <_sbrk_r+0x44>
    91dc:	dfc00217 	ldw	ra,8(sp)
    91e0:	dc400117 	ldw	r17,4(sp)
    91e4:	dc000017 	ldw	r16,0(sp)
    91e8:	dec00304 	addi	sp,sp,12
    91ec:	f800283a 	ret
    91f0:	80c00017 	ldw	r3,0(r16)
    91f4:	183ff926 	beq	r3,zero,91dc <__alt_exception_stack_pointer+0xf80091dc>
    91f8:	88c00015 	stw	r3,0(r17)
    91fc:	003ff706 	br	91dc <__alt_exception_stack_pointer+0xf80091dc>

00009200 <strlen>:
    9200:	208000cc 	andi	r2,r4,3
    9204:	10002026 	beq	r2,zero,9288 <strlen+0x88>
    9208:	20800007 	ldb	r2,0(r4)
    920c:	10002026 	beq	r2,zero,9290 <strlen+0x90>
    9210:	2005883a 	mov	r2,r4
    9214:	00000206 	br	9220 <strlen+0x20>
    9218:	10c00007 	ldb	r3,0(r2)
    921c:	18001826 	beq	r3,zero,9280 <strlen+0x80>
    9220:	10800044 	addi	r2,r2,1
    9224:	10c000cc 	andi	r3,r2,3
    9228:	183ffb1e 	bne	r3,zero,9218 <__alt_exception_stack_pointer+0xf8009218>
    922c:	10c00017 	ldw	r3,0(r2)
    9230:	01ffbff4 	movhi	r7,65279
    9234:	39ffbfc4 	addi	r7,r7,-257
    9238:	00ca303a 	nor	r5,zero,r3
    923c:	01a02074 	movhi	r6,32897
    9240:	19c7883a 	add	r3,r3,r7
    9244:	31a02004 	addi	r6,r6,-32640
    9248:	1946703a 	and	r3,r3,r5
    924c:	1986703a 	and	r3,r3,r6
    9250:	1800091e 	bne	r3,zero,9278 <strlen+0x78>
    9254:	10800104 	addi	r2,r2,4
    9258:	10c00017 	ldw	r3,0(r2)
    925c:	19cb883a 	add	r5,r3,r7
    9260:	00c6303a 	nor	r3,zero,r3
    9264:	28c6703a 	and	r3,r5,r3
    9268:	1986703a 	and	r3,r3,r6
    926c:	183ff926 	beq	r3,zero,9254 <__alt_exception_stack_pointer+0xf8009254>
    9270:	00000106 	br	9278 <strlen+0x78>
    9274:	10800044 	addi	r2,r2,1
    9278:	10c00007 	ldb	r3,0(r2)
    927c:	183ffd1e 	bne	r3,zero,9274 <__alt_exception_stack_pointer+0xf8009274>
    9280:	1105c83a 	sub	r2,r2,r4
    9284:	f800283a 	ret
    9288:	2005883a 	mov	r2,r4
    928c:	003fe706 	br	922c <__alt_exception_stack_pointer+0xf800922c>
    9290:	0005883a 	mov	r2,zero
    9294:	f800283a 	ret

00009298 <_times_r>:
    9298:	2809883a 	mov	r4,r5
    929c:	00144281 	jmpi	14428 <times>

000092a0 <___vfprintf_internal_r>:
    92a0:	deffb804 	addi	sp,sp,-288
    92a4:	dfc04715 	stw	ra,284(sp)
    92a8:	ddc04515 	stw	r23,276(sp)
    92ac:	dd404315 	stw	r21,268(sp)
    92b0:	d9002d15 	stw	r4,180(sp)
    92b4:	282f883a 	mov	r23,r5
    92b8:	302b883a 	mov	r21,r6
    92bc:	d9c02e15 	stw	r7,184(sp)
    92c0:	df004615 	stw	fp,280(sp)
    92c4:	dd804415 	stw	r22,272(sp)
    92c8:	dd004215 	stw	r20,264(sp)
    92cc:	dcc04115 	stw	r19,260(sp)
    92d0:	dc804015 	stw	r18,256(sp)
    92d4:	dc403f15 	stw	r17,252(sp)
    92d8:	dc003e15 	stw	r16,248(sp)
    92dc:	000ed180 	call	ed18 <_localeconv_r>
    92e0:	10800017 	ldw	r2,0(r2)
    92e4:	1009883a 	mov	r4,r2
    92e8:	d8803415 	stw	r2,208(sp)
    92ec:	00092000 	call	9200 <strlen>
    92f0:	d8803715 	stw	r2,220(sp)
    92f4:	d8802d17 	ldw	r2,180(sp)
    92f8:	10000226 	beq	r2,zero,9304 <___vfprintf_internal_r+0x64>
    92fc:	10800e17 	ldw	r2,56(r2)
    9300:	1000fb26 	beq	r2,zero,96f0 <___vfprintf_internal_r+0x450>
    9304:	b880030b 	ldhu	r2,12(r23)
    9308:	10c8000c 	andi	r3,r2,8192
    930c:	1800061e 	bne	r3,zero,9328 <___vfprintf_internal_r+0x88>
    9310:	b9001917 	ldw	r4,100(r23)
    9314:	00f7ffc4 	movi	r3,-8193
    9318:	10880014 	ori	r2,r2,8192
    931c:	20c6703a 	and	r3,r4,r3
    9320:	b880030d 	sth	r2,12(r23)
    9324:	b8c01915 	stw	r3,100(r23)
    9328:	10c0020c 	andi	r3,r2,8
    932c:	1800c326 	beq	r3,zero,963c <___vfprintf_internal_r+0x39c>
    9330:	b8c00417 	ldw	r3,16(r23)
    9334:	1800c126 	beq	r3,zero,963c <___vfprintf_internal_r+0x39c>
    9338:	1080068c 	andi	r2,r2,26
    933c:	00c00284 	movi	r3,10
    9340:	10c0c626 	beq	r2,r3,965c <___vfprintf_internal_r+0x3bc>
    9344:	d8c00404 	addi	r3,sp,16
    9348:	05000074 	movhi	r20,1
    934c:	d9001e04 	addi	r4,sp,120
    9350:	a51fe884 	addi	r20,r20,32674
    9354:	d8c01e15 	stw	r3,120(sp)
    9358:	d8002015 	stw	zero,128(sp)
    935c:	d8001f15 	stw	zero,124(sp)
    9360:	d8003315 	stw	zero,204(sp)
    9364:	d8003615 	stw	zero,216(sp)
    9368:	d8003815 	stw	zero,224(sp)
    936c:	1811883a 	mov	r8,r3
    9370:	d8003915 	stw	zero,228(sp)
    9374:	d8003a15 	stw	zero,232(sp)
    9378:	d8002f15 	stw	zero,188(sp)
    937c:	d9002815 	stw	r4,160(sp)
    9380:	a8800007 	ldb	r2,0(r21)
    9384:	10028b26 	beq	r2,zero,9db4 <___vfprintf_internal_r+0xb14>
    9388:	00c00944 	movi	r3,37
    938c:	a823883a 	mov	r17,r21
    9390:	10c0021e 	bne	r2,r3,939c <___vfprintf_internal_r+0xfc>
    9394:	00001406 	br	93e8 <___vfprintf_internal_r+0x148>
    9398:	10c00326 	beq	r2,r3,93a8 <___vfprintf_internal_r+0x108>
    939c:	8c400044 	addi	r17,r17,1
    93a0:	88800007 	ldb	r2,0(r17)
    93a4:	103ffc1e 	bne	r2,zero,9398 <__alt_exception_stack_pointer+0xf8009398>
    93a8:	8d61c83a 	sub	r16,r17,r21
    93ac:	80000e26 	beq	r16,zero,93e8 <___vfprintf_internal_r+0x148>
    93b0:	d8c02017 	ldw	r3,128(sp)
    93b4:	d8801f17 	ldw	r2,124(sp)
    93b8:	45400015 	stw	r21,0(r8)
    93bc:	1c07883a 	add	r3,r3,r16
    93c0:	10800044 	addi	r2,r2,1
    93c4:	d8c02015 	stw	r3,128(sp)
    93c8:	44000115 	stw	r16,4(r8)
    93cc:	d8801f15 	stw	r2,124(sp)
    93d0:	00c001c4 	movi	r3,7
    93d4:	1880a916 	blt	r3,r2,967c <___vfprintf_internal_r+0x3dc>
    93d8:	42000204 	addi	r8,r8,8
    93dc:	d9402f17 	ldw	r5,188(sp)
    93e0:	2c0b883a 	add	r5,r5,r16
    93e4:	d9402f15 	stw	r5,188(sp)
    93e8:	88800007 	ldb	r2,0(r17)
    93ec:	1000aa26 	beq	r2,zero,9698 <___vfprintf_internal_r+0x3f8>
    93f0:	8d400044 	addi	r21,r17,1
    93f4:	8c400047 	ldb	r17,1(r17)
    93f8:	0021883a 	mov	r16,zero
    93fc:	00bfffc4 	movi	r2,-1
    9400:	0025883a 	mov	r18,zero
    9404:	dc002905 	stb	r16,164(sp)
    9408:	d8002785 	stb	zero,158(sp)
    940c:	d8002b05 	stb	zero,172(sp)
    9410:	d8802a15 	stw	r2,168(sp)
    9414:	d8003115 	stw	zero,196(sp)
    9418:	04c01604 	movi	r19,88
    941c:	05800244 	movi	r22,9
    9420:	9021883a 	mov	r16,r18
    9424:	4039883a 	mov	fp,r8
    9428:	ad400044 	addi	r21,r21,1
    942c:	88bff804 	addi	r2,r17,-32
    9430:	98833236 	bltu	r19,r2,a0fc <___vfprintf_internal_r+0xe5c>
    9434:	100490ba 	slli	r2,r2,2
    9438:	00c00074 	movhi	r3,1
    943c:	18e51304 	addi	r3,r3,-27572
    9440:	10c5883a 	add	r2,r2,r3
    9444:	10800017 	ldw	r2,0(r2)
    9448:	1000683a 	jmp	r2
    944c:	00009ff4 	movhi	zero,639
    9450:	0000a0fc 	xorhi	zero,zero,643
    9454:	0000a0fc 	xorhi	zero,zero,643
    9458:	0000a014 	movui	zero,640
    945c:	0000a0fc 	xorhi	zero,zero,643
    9460:	0000a0fc 	xorhi	zero,zero,643
    9464:	0000a0fc 	xorhi	zero,zero,643
    9468:	0000a0fc 	xorhi	zero,zero,643
    946c:	0000a0fc 	xorhi	zero,zero,643
    9470:	0000a0fc 	xorhi	zero,zero,643
    9474:	000096fc 	xorhi	zero,zero,603
    9478:	00009f04 	movi	zero,636
    947c:	0000a0fc 	xorhi	zero,zero,643
    9480:	000095c0 	call	95c <IO_read+0x6c>
    9484:	00009720 	cmpeqi	zero,zero,604
    9488:	0000a0fc 	xorhi	zero,zero,643
    948c:	00009770 	cmpltui	zero,zero,605
    9490:	0000977c 	xorhi	zero,zero,605
    9494:	0000977c 	xorhi	zero,zero,605
    9498:	0000977c 	xorhi	zero,zero,605
    949c:	0000977c 	xorhi	zero,zero,605
    94a0:	0000977c 	xorhi	zero,zero,605
    94a4:	0000977c 	xorhi	zero,zero,605
    94a8:	0000977c 	xorhi	zero,zero,605
    94ac:	0000977c 	xorhi	zero,zero,605
    94b0:	0000977c 	xorhi	zero,zero,605
    94b4:	0000a0fc 	xorhi	zero,zero,643
    94b8:	0000a0fc 	xorhi	zero,zero,643
    94bc:	0000a0fc 	xorhi	zero,zero,643
    94c0:	0000a0fc 	xorhi	zero,zero,643
    94c4:	0000a0fc 	xorhi	zero,zero,643
    94c8:	0000a0fc 	xorhi	zero,zero,643
    94cc:	0000a0fc 	xorhi	zero,zero,643
    94d0:	0000a0fc 	xorhi	zero,zero,643
    94d4:	0000a0fc 	xorhi	zero,zero,643
    94d8:	0000a0fc 	xorhi	zero,zero,643
    94dc:	000097b8 	rdprs	zero,zero,606
    94e0:	00009880 	call	988 <loop_keyboard+0x18>
    94e4:	0000a0fc 	xorhi	zero,zero,643
    94e8:	00009880 	call	988 <loop_keyboard+0x18>
    94ec:	0000a0fc 	xorhi	zero,zero,643
    94f0:	0000a0fc 	xorhi	zero,zero,643
    94f4:	0000a0fc 	xorhi	zero,zero,643
    94f8:	0000a0fc 	xorhi	zero,zero,643
    94fc:	0000992c 	andhi	zero,zero,612
    9500:	0000a0fc 	xorhi	zero,zero,643
    9504:	0000a0fc 	xorhi	zero,zero,643
    9508:	00009938 	rdprs	zero,zero,612
    950c:	0000a0fc 	xorhi	zero,zero,643
    9510:	0000a0fc 	xorhi	zero,zero,643
    9514:	0000a0fc 	xorhi	zero,zero,643
    9518:	0000a0fc 	xorhi	zero,zero,643
    951c:	0000a0fc 	xorhi	zero,zero,643
    9520:	00009dbc 	xorhi	zero,zero,630
    9524:	0000a0fc 	xorhi	zero,zero,643
    9528:	0000a0fc 	xorhi	zero,zero,643
    952c:	00009e28 	cmpgeui	zero,zero,632
    9530:	0000a0fc 	xorhi	zero,zero,643
    9534:	0000a0fc 	xorhi	zero,zero,643
    9538:	0000a0fc 	xorhi	zero,zero,643
    953c:	0000a0fc 	xorhi	zero,zero,643
    9540:	0000a0fc 	xorhi	zero,zero,643
    9544:	0000a0fc 	xorhi	zero,zero,643
    9548:	0000a0fc 	xorhi	zero,zero,643
    954c:	0000a0fc 	xorhi	zero,zero,643
    9550:	0000a0fc 	xorhi	zero,zero,643
    9554:	0000a0fc 	xorhi	zero,zero,643
    9558:	0000a0a0 	cmpeqi	zero,zero,642
    955c:	0000a020 	cmpeqi	zero,zero,640
    9560:	00009880 	call	988 <loop_keyboard+0x18>
    9564:	00009880 	call	988 <loop_keyboard+0x18>
    9568:	00009880 	call	988 <loop_keyboard+0x18>
    956c:	0000a040 	call	a04 <loop_keyboard+0x94>
    9570:	0000a020 	cmpeqi	zero,zero,640
    9574:	0000a0fc 	xorhi	zero,zero,643
    9578:	0000a0fc 	xorhi	zero,zero,643
    957c:	0000a04c 	andi	zero,zero,641
    9580:	0000a0fc 	xorhi	zero,zero,643
    9584:	0000a060 	cmpeqi	zero,zero,641
    9588:	00009ee4 	muli	zero,zero,635
    958c:	000095cc 	andi	zero,zero,599
    9590:	00009f1c 	xori	zero,zero,636
    9594:	0000a0fc 	xorhi	zero,zero,643
    9598:	00009f28 	cmpgeui	zero,zero,636
    959c:	0000a0fc 	xorhi	zero,zero,643
    95a0:	00009f8c 	andi	zero,zero,638
    95a4:	0000a0fc 	xorhi	zero,zero,643
    95a8:	0000a0fc 	xorhi	zero,zero,643
    95ac:	00009fac 	andhi	zero,zero,638
    95b0:	d8c03117 	ldw	r3,196(sp)
    95b4:	d8802e15 	stw	r2,184(sp)
    95b8:	00c7c83a 	sub	r3,zero,r3
    95bc:	d8c03115 	stw	r3,196(sp)
    95c0:	84000114 	ori	r16,r16,4
    95c4:	ac400007 	ldb	r17,0(r21)
    95c8:	003f9706 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    95cc:	00800c04 	movi	r2,48
    95d0:	d8802705 	stb	r2,156(sp)
    95d4:	00801e04 	movi	r2,120
    95d8:	d8802745 	stb	r2,157(sp)
    95dc:	d9002a17 	ldw	r4,168(sp)
    95e0:	d8802e17 	ldw	r2,184(sp)
    95e4:	d8002785 	stb	zero,158(sp)
    95e8:	e011883a 	mov	r8,fp
    95ec:	10c00104 	addi	r3,r2,4
    95f0:	14c00017 	ldw	r19,0(r2)
    95f4:	002d883a 	mov	r22,zero
    95f8:	80800094 	ori	r2,r16,2
    95fc:	2002ca16 	blt	r4,zero,a128 <___vfprintf_internal_r+0xe88>
    9600:	00bfdfc4 	movi	r2,-129
    9604:	80a4703a 	and	r18,r16,r2
    9608:	d8c02e15 	stw	r3,184(sp)
    960c:	94800094 	ori	r18,r18,2
    9610:	9802b41e 	bne	r19,zero,a0e4 <___vfprintf_internal_r+0xe44>
    9614:	01400074 	movhi	r5,1
    9618:	295fe104 	addi	r5,r5,32644
    961c:	d9403915 	stw	r5,228(sp)
    9620:	04401e04 	movi	r17,120
    9624:	d8802a17 	ldw	r2,168(sp)
    9628:	0039883a 	mov	fp,zero
    962c:	1001fa26 	beq	r2,zero,9e18 <___vfprintf_internal_r+0xb78>
    9630:	0027883a 	mov	r19,zero
    9634:	002d883a 	mov	r22,zero
    9638:	00021906 	br	9ea0 <___vfprintf_internal_r+0xc00>
    963c:	d9002d17 	ldw	r4,180(sp)
    9640:	b80b883a 	mov	r5,r23
    9644:	000b6540 	call	b654 <__swsetup_r>
    9648:	1005dc1e 	bne	r2,zero,adbc <___vfprintf_internal_r+0x1b1c>
    964c:	b880030b 	ldhu	r2,12(r23)
    9650:	00c00284 	movi	r3,10
    9654:	1080068c 	andi	r2,r2,26
    9658:	10ff3a1e 	bne	r2,r3,9344 <__alt_exception_stack_pointer+0xf8009344>
    965c:	b880038f 	ldh	r2,14(r23)
    9660:	103f3816 	blt	r2,zero,9344 <__alt_exception_stack_pointer+0xf8009344>
    9664:	d9c02e17 	ldw	r7,184(sp)
    9668:	d9002d17 	ldw	r4,180(sp)
    966c:	a80d883a 	mov	r6,r21
    9670:	b80b883a 	mov	r5,r23
    9674:	000b5980 	call	b598 <__sbprintf>
    9678:	00001106 	br	96c0 <___vfprintf_internal_r+0x420>
    967c:	d9002d17 	ldw	r4,180(sp)
    9680:	d9801e04 	addi	r6,sp,120
    9684:	b80b883a 	mov	r5,r23
    9688:	0010de80 	call	10de8 <__sprint_r>
    968c:	1000081e 	bne	r2,zero,96b0 <___vfprintf_internal_r+0x410>
    9690:	da000404 	addi	r8,sp,16
    9694:	003f5106 	br	93dc <__alt_exception_stack_pointer+0xf80093dc>
    9698:	d8802017 	ldw	r2,128(sp)
    969c:	10000426 	beq	r2,zero,96b0 <___vfprintf_internal_r+0x410>
    96a0:	d9002d17 	ldw	r4,180(sp)
    96a4:	d9801e04 	addi	r6,sp,120
    96a8:	b80b883a 	mov	r5,r23
    96ac:	0010de80 	call	10de8 <__sprint_r>
    96b0:	b880030b 	ldhu	r2,12(r23)
    96b4:	1080100c 	andi	r2,r2,64
    96b8:	1005c01e 	bne	r2,zero,adbc <___vfprintf_internal_r+0x1b1c>
    96bc:	d8802f17 	ldw	r2,188(sp)
    96c0:	dfc04717 	ldw	ra,284(sp)
    96c4:	df004617 	ldw	fp,280(sp)
    96c8:	ddc04517 	ldw	r23,276(sp)
    96cc:	dd804417 	ldw	r22,272(sp)
    96d0:	dd404317 	ldw	r21,268(sp)
    96d4:	dd004217 	ldw	r20,264(sp)
    96d8:	dcc04117 	ldw	r19,260(sp)
    96dc:	dc804017 	ldw	r18,256(sp)
    96e0:	dc403f17 	ldw	r17,252(sp)
    96e4:	dc003e17 	ldw	r16,248(sp)
    96e8:	dec04804 	addi	sp,sp,288
    96ec:	f800283a 	ret
    96f0:	d9002d17 	ldw	r4,180(sp)
    96f4:	000e1980 	call	e198 <__sinit>
    96f8:	003f0206 	br	9304 <__alt_exception_stack_pointer+0xf8009304>
    96fc:	d9002e17 	ldw	r4,184(sp)
    9700:	d9402e17 	ldw	r5,184(sp)
    9704:	21000017 	ldw	r4,0(r4)
    9708:	28800104 	addi	r2,r5,4
    970c:	d9003115 	stw	r4,196(sp)
    9710:	203fa716 	blt	r4,zero,95b0 <__alt_exception_stack_pointer+0xf80095b0>
    9714:	d8802e15 	stw	r2,184(sp)
    9718:	ac400007 	ldb	r17,0(r21)
    971c:	003f4206 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    9720:	ac400007 	ldb	r17,0(r21)
    9724:	01000a84 	movi	r4,42
    9728:	a8c00044 	addi	r3,r21,1
    972c:	89075826 	beq	r17,r4,b490 <___vfprintf_internal_r+0x21f0>
    9730:	8cbff404 	addi	r18,r17,-48
    9734:	b486ae36 	bltu	r22,r18,b1f0 <___vfprintf_internal_r+0x1f50>
    9738:	0009883a 	mov	r4,zero
    973c:	1823883a 	mov	r17,r3
    9740:	01400284 	movi	r5,10
    9744:	0005b840 	call	5b84 <__mulsi3>
    9748:	88c00007 	ldb	r3,0(r17)
    974c:	1489883a 	add	r4,r2,r18
    9750:	8d400044 	addi	r21,r17,1
    9754:	1cbff404 	addi	r18,r3,-48
    9758:	a823883a 	mov	r17,r21
    975c:	b4bff82e 	bgeu	r22,r18,9740 <__alt_exception_stack_pointer+0xf8009740>
    9760:	1823883a 	mov	r17,r3
    9764:	2005f616 	blt	r4,zero,af40 <___vfprintf_internal_r+0x1ca0>
    9768:	d9002a15 	stw	r4,168(sp)
    976c:	003f2f06 	br	942c <__alt_exception_stack_pointer+0xf800942c>
    9770:	84002014 	ori	r16,r16,128
    9774:	ac400007 	ldb	r17,0(r21)
    9778:	003f2b06 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    977c:	8cbff404 	addi	r18,r17,-48
    9780:	d8003115 	stw	zero,196(sp)
    9784:	0009883a 	mov	r4,zero
    9788:	a823883a 	mov	r17,r21
    978c:	01400284 	movi	r5,10
    9790:	0005b840 	call	5b84 <__mulsi3>
    9794:	88c00007 	ldb	r3,0(r17)
    9798:	9089883a 	add	r4,r18,r2
    979c:	ad400044 	addi	r21,r21,1
    97a0:	1cbff404 	addi	r18,r3,-48
    97a4:	a823883a 	mov	r17,r21
    97a8:	b4bff82e 	bgeu	r22,r18,978c <__alt_exception_stack_pointer+0xf800978c>
    97ac:	1823883a 	mov	r17,r3
    97b0:	d9003115 	stw	r4,196(sp)
    97b4:	003f1d06 	br	942c <__alt_exception_stack_pointer+0xf800942c>
    97b8:	8025883a 	mov	r18,r16
    97bc:	dc002903 	ldbu	r16,164(sp)
    97c0:	e011883a 	mov	r8,fp
    97c4:	84003fcc 	andi	r16,r16,255
    97c8:	8007531e 	bne	r16,zero,b518 <___vfprintf_internal_r+0x2278>
    97cc:	94800414 	ori	r18,r18,16
    97d0:	9080080c 	andi	r2,r18,32
    97d4:	1003a326 	beq	r2,zero,a664 <___vfprintf_internal_r+0x13c4>
    97d8:	d9002e17 	ldw	r4,184(sp)
    97dc:	20800117 	ldw	r2,4(r4)
    97e0:	24c00017 	ldw	r19,0(r4)
    97e4:	21000204 	addi	r4,r4,8
    97e8:	d9002e15 	stw	r4,184(sp)
    97ec:	102d883a 	mov	r22,r2
    97f0:	10047316 	blt	r2,zero,a9c0 <___vfprintf_internal_r+0x1720>
    97f4:	d9002a17 	ldw	r4,168(sp)
    97f8:	df002783 	ldbu	fp,158(sp)
    97fc:	2003e416 	blt	r4,zero,a790 <___vfprintf_internal_r+0x14f0>
    9800:	00ffdfc4 	movi	r3,-129
    9804:	9d84b03a 	or	r2,r19,r22
    9808:	90e4703a 	and	r18,r18,r3
    980c:	10018026 	beq	r2,zero,9e10 <___vfprintf_internal_r+0xb70>
    9810:	b003ab26 	beq	r22,zero,a6c0 <___vfprintf_internal_r+0x1420>
    9814:	dc402915 	stw	r17,164(sp)
    9818:	dc001e04 	addi	r16,sp,120
    981c:	b023883a 	mov	r17,r22
    9820:	402d883a 	mov	r22,r8
    9824:	9809883a 	mov	r4,r19
    9828:	880b883a 	mov	r5,r17
    982c:	01800284 	movi	r6,10
    9830:	000f883a 	mov	r7,zero
    9834:	001332c0 	call	1332c <__umoddi3>
    9838:	10800c04 	addi	r2,r2,48
    983c:	843fffc4 	addi	r16,r16,-1
    9840:	9809883a 	mov	r4,r19
    9844:	880b883a 	mov	r5,r17
    9848:	80800005 	stb	r2,0(r16)
    984c:	01800284 	movi	r6,10
    9850:	000f883a 	mov	r7,zero
    9854:	0012d300 	call	12d30 <__udivdi3>
    9858:	1027883a 	mov	r19,r2
    985c:	10c4b03a 	or	r2,r2,r3
    9860:	1823883a 	mov	r17,r3
    9864:	103fef1e 	bne	r2,zero,9824 <__alt_exception_stack_pointer+0xf8009824>
    9868:	d8c02817 	ldw	r3,160(sp)
    986c:	dc402917 	ldw	r17,164(sp)
    9870:	b011883a 	mov	r8,r22
    9874:	1c07c83a 	sub	r3,r3,r16
    9878:	d8c02b15 	stw	r3,172(sp)
    987c:	00005f06 	br	99fc <___vfprintf_internal_r+0x75c>
    9880:	8025883a 	mov	r18,r16
    9884:	dc002903 	ldbu	r16,164(sp)
    9888:	e011883a 	mov	r8,fp
    988c:	84003fcc 	andi	r16,r16,255
    9890:	80071e1e 	bne	r16,zero,b50c <___vfprintf_internal_r+0x226c>
    9894:	9080020c 	andi	r2,r18,8
    9898:	1004af26 	beq	r2,zero,ab58 <___vfprintf_internal_r+0x18b8>
    989c:	d9002e17 	ldw	r4,184(sp)
    98a0:	d9402e17 	ldw	r5,184(sp)
    98a4:	d8802e17 	ldw	r2,184(sp)
    98a8:	21000017 	ldw	r4,0(r4)
    98ac:	29400117 	ldw	r5,4(r5)
    98b0:	10800204 	addi	r2,r2,8
    98b4:	d9003615 	stw	r4,216(sp)
    98b8:	d9403815 	stw	r5,224(sp)
    98bc:	d8802e15 	stw	r2,184(sp)
    98c0:	d9003617 	ldw	r4,216(sp)
    98c4:	d9403817 	ldw	r5,224(sp)
    98c8:	da003d15 	stw	r8,244(sp)
    98cc:	04000044 	movi	r16,1
    98d0:	00109d00 	call	109d0 <__fpclassifyd>
    98d4:	da003d17 	ldw	r8,244(sp)
    98d8:	1404441e 	bne	r2,r16,a9ec <___vfprintf_internal_r+0x174c>
    98dc:	d9003617 	ldw	r4,216(sp)
    98e0:	d9403817 	ldw	r5,224(sp)
    98e4:	000d883a 	mov	r6,zero
    98e8:	000f883a 	mov	r7,zero
    98ec:	00138f00 	call	138f0 <__ledf2>
    98f0:	da003d17 	ldw	r8,244(sp)
    98f4:	1005e316 	blt	r2,zero,b084 <___vfprintf_internal_r+0x1de4>
    98f8:	df002783 	ldbu	fp,158(sp)
    98fc:	008011c4 	movi	r2,71
    9900:	1445580e 	bge	r2,r17,ae64 <___vfprintf_internal_r+0x1bc4>
    9904:	04000074 	movhi	r16,1
    9908:	841fd904 	addi	r16,r16,32612
    990c:	00c000c4 	movi	r3,3
    9910:	00bfdfc4 	movi	r2,-129
    9914:	d8c02915 	stw	r3,164(sp)
    9918:	90a4703a 	and	r18,r18,r2
    991c:	d8c02b15 	stw	r3,172(sp)
    9920:	d8002a15 	stw	zero,168(sp)
    9924:	d8003215 	stw	zero,200(sp)
    9928:	00003a06 	br	9a14 <___vfprintf_internal_r+0x774>
    992c:	84000214 	ori	r16,r16,8
    9930:	ac400007 	ldb	r17,0(r21)
    9934:	003ebc06 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    9938:	8025883a 	mov	r18,r16
    993c:	dc002903 	ldbu	r16,164(sp)
    9940:	e011883a 	mov	r8,fp
    9944:	84003fcc 	andi	r16,r16,255
    9948:	8007001e 	bne	r16,zero,b54c <___vfprintf_internal_r+0x22ac>
    994c:	94800414 	ori	r18,r18,16
    9950:	9080080c 	andi	r2,r18,32
    9954:	1002fa26 	beq	r2,zero,a540 <___vfprintf_internal_r+0x12a0>
    9958:	d9002e17 	ldw	r4,184(sp)
    995c:	d9402a17 	ldw	r5,168(sp)
    9960:	d8002785 	stb	zero,158(sp)
    9964:	20800204 	addi	r2,r4,8
    9968:	24c00017 	ldw	r19,0(r4)
    996c:	25800117 	ldw	r22,4(r4)
    9970:	2804b116 	blt	r5,zero,ac38 <___vfprintf_internal_r+0x1998>
    9974:	013fdfc4 	movi	r4,-129
    9978:	9d86b03a 	or	r3,r19,r22
    997c:	d8802e15 	stw	r2,184(sp)
    9980:	9124703a 	and	r18,r18,r4
    9984:	1802fb1e 	bne	r3,zero,a574 <___vfprintf_internal_r+0x12d4>
    9988:	d8c02a17 	ldw	r3,168(sp)
    998c:	0039883a 	mov	fp,zero
    9990:	1805e526 	beq	r3,zero,b128 <___vfprintf_internal_r+0x1e88>
    9994:	0027883a 	mov	r19,zero
    9998:	002d883a 	mov	r22,zero
    999c:	dc001e04 	addi	r16,sp,120
    99a0:	9806d0fa 	srli	r3,r19,3
    99a4:	b008977a 	slli	r4,r22,29
    99a8:	b02cd0fa 	srli	r22,r22,3
    99ac:	9cc001cc 	andi	r19,r19,7
    99b0:	98800c04 	addi	r2,r19,48
    99b4:	843fffc4 	addi	r16,r16,-1
    99b8:	20e6b03a 	or	r19,r4,r3
    99bc:	80800005 	stb	r2,0(r16)
    99c0:	9d86b03a 	or	r3,r19,r22
    99c4:	183ff61e 	bne	r3,zero,99a0 <__alt_exception_stack_pointer+0xf80099a0>
    99c8:	90c0004c 	andi	r3,r18,1
    99cc:	18014126 	beq	r3,zero,9ed4 <___vfprintf_internal_r+0xc34>
    99d0:	10803fcc 	andi	r2,r2,255
    99d4:	1080201c 	xori	r2,r2,128
    99d8:	10bfe004 	addi	r2,r2,-128
    99dc:	00c00c04 	movi	r3,48
    99e0:	10c13c26 	beq	r2,r3,9ed4 <___vfprintf_internal_r+0xc34>
    99e4:	80ffffc5 	stb	r3,-1(r16)
    99e8:	d8c02817 	ldw	r3,160(sp)
    99ec:	80bfffc4 	addi	r2,r16,-1
    99f0:	1021883a 	mov	r16,r2
    99f4:	1887c83a 	sub	r3,r3,r2
    99f8:	d8c02b15 	stw	r3,172(sp)
    99fc:	d8802b17 	ldw	r2,172(sp)
    9a00:	d9002a17 	ldw	r4,168(sp)
    9a04:	1100010e 	bge	r2,r4,9a0c <___vfprintf_internal_r+0x76c>
    9a08:	2005883a 	mov	r2,r4
    9a0c:	d8802915 	stw	r2,164(sp)
    9a10:	d8003215 	stw	zero,200(sp)
    9a14:	e7003fcc 	andi	fp,fp,255
    9a18:	e700201c 	xori	fp,fp,128
    9a1c:	e73fe004 	addi	fp,fp,-128
    9a20:	e0000326 	beq	fp,zero,9a30 <___vfprintf_internal_r+0x790>
    9a24:	d8c02917 	ldw	r3,164(sp)
    9a28:	18c00044 	addi	r3,r3,1
    9a2c:	d8c02915 	stw	r3,164(sp)
    9a30:	90c0008c 	andi	r3,r18,2
    9a34:	d8c02c15 	stw	r3,176(sp)
    9a38:	18000326 	beq	r3,zero,9a48 <___vfprintf_internal_r+0x7a8>
    9a3c:	d8c02917 	ldw	r3,164(sp)
    9a40:	18c00084 	addi	r3,r3,2
    9a44:	d8c02915 	stw	r3,164(sp)
    9a48:	90c0210c 	andi	r3,r18,132
    9a4c:	d8c03015 	stw	r3,192(sp)
    9a50:	1801c51e 	bne	r3,zero,a168 <___vfprintf_internal_r+0xec8>
    9a54:	d9003117 	ldw	r4,196(sp)
    9a58:	d8c02917 	ldw	r3,164(sp)
    9a5c:	20e7c83a 	sub	r19,r4,r3
    9a60:	04c1c10e 	bge	zero,r19,a168 <___vfprintf_internal_r+0xec8>
    9a64:	02400404 	movi	r9,16
    9a68:	d8c02017 	ldw	r3,128(sp)
    9a6c:	d8801f17 	ldw	r2,124(sp)
    9a70:	4cc52f0e 	bge	r9,r19,af30 <___vfprintf_internal_r+0x1c90>
    9a74:	01400074 	movhi	r5,1
    9a78:	295fec84 	addi	r5,r5,32690
    9a7c:	dc403b15 	stw	r17,236(sp)
    9a80:	d9403515 	stw	r5,212(sp)
    9a84:	9823883a 	mov	r17,r19
    9a88:	482d883a 	mov	r22,r9
    9a8c:	9027883a 	mov	r19,r18
    9a90:	070001c4 	movi	fp,7
    9a94:	8025883a 	mov	r18,r16
    9a98:	dc002d17 	ldw	r16,180(sp)
    9a9c:	00000306 	br	9aac <___vfprintf_internal_r+0x80c>
    9aa0:	8c7ffc04 	addi	r17,r17,-16
    9aa4:	42000204 	addi	r8,r8,8
    9aa8:	b440130e 	bge	r22,r17,9af8 <___vfprintf_internal_r+0x858>
    9aac:	01000074 	movhi	r4,1
    9ab0:	18c00404 	addi	r3,r3,16
    9ab4:	10800044 	addi	r2,r2,1
    9ab8:	211fec84 	addi	r4,r4,32690
    9abc:	41000015 	stw	r4,0(r8)
    9ac0:	45800115 	stw	r22,4(r8)
    9ac4:	d8c02015 	stw	r3,128(sp)
    9ac8:	d8801f15 	stw	r2,124(sp)
    9acc:	e0bff40e 	bge	fp,r2,9aa0 <__alt_exception_stack_pointer+0xf8009aa0>
    9ad0:	d9801e04 	addi	r6,sp,120
    9ad4:	b80b883a 	mov	r5,r23
    9ad8:	8009883a 	mov	r4,r16
    9adc:	0010de80 	call	10de8 <__sprint_r>
    9ae0:	103ef31e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    9ae4:	8c7ffc04 	addi	r17,r17,-16
    9ae8:	d8c02017 	ldw	r3,128(sp)
    9aec:	d8801f17 	ldw	r2,124(sp)
    9af0:	da000404 	addi	r8,sp,16
    9af4:	b47fed16 	blt	r22,r17,9aac <__alt_exception_stack_pointer+0xf8009aac>
    9af8:	9021883a 	mov	r16,r18
    9afc:	9825883a 	mov	r18,r19
    9b00:	8827883a 	mov	r19,r17
    9b04:	dc403b17 	ldw	r17,236(sp)
    9b08:	d9403517 	ldw	r5,212(sp)
    9b0c:	98c7883a 	add	r3,r19,r3
    9b10:	10800044 	addi	r2,r2,1
    9b14:	41400015 	stw	r5,0(r8)
    9b18:	44c00115 	stw	r19,4(r8)
    9b1c:	d8c02015 	stw	r3,128(sp)
    9b20:	d8801f15 	stw	r2,124(sp)
    9b24:	010001c4 	movi	r4,7
    9b28:	2082c516 	blt	r4,r2,a640 <___vfprintf_internal_r+0x13a0>
    9b2c:	df002787 	ldb	fp,158(sp)
    9b30:	42000204 	addi	r8,r8,8
    9b34:	e0000c26 	beq	fp,zero,9b68 <___vfprintf_internal_r+0x8c8>
    9b38:	d8801f17 	ldw	r2,124(sp)
    9b3c:	d9002784 	addi	r4,sp,158
    9b40:	18c00044 	addi	r3,r3,1
    9b44:	10800044 	addi	r2,r2,1
    9b48:	41000015 	stw	r4,0(r8)
    9b4c:	01000044 	movi	r4,1
    9b50:	41000115 	stw	r4,4(r8)
    9b54:	d8c02015 	stw	r3,128(sp)
    9b58:	d8801f15 	stw	r2,124(sp)
    9b5c:	010001c4 	movi	r4,7
    9b60:	20825e16 	blt	r4,r2,a4dc <___vfprintf_internal_r+0x123c>
    9b64:	42000204 	addi	r8,r8,8
    9b68:	d8802c17 	ldw	r2,176(sp)
    9b6c:	10000c26 	beq	r2,zero,9ba0 <___vfprintf_internal_r+0x900>
    9b70:	d8801f17 	ldw	r2,124(sp)
    9b74:	d9002704 	addi	r4,sp,156
    9b78:	18c00084 	addi	r3,r3,2
    9b7c:	10800044 	addi	r2,r2,1
    9b80:	41000015 	stw	r4,0(r8)
    9b84:	01000084 	movi	r4,2
    9b88:	41000115 	stw	r4,4(r8)
    9b8c:	d8c02015 	stw	r3,128(sp)
    9b90:	d8801f15 	stw	r2,124(sp)
    9b94:	010001c4 	movi	r4,7
    9b98:	20825816 	blt	r4,r2,a4fc <___vfprintf_internal_r+0x125c>
    9b9c:	42000204 	addi	r8,r8,8
    9ba0:	d9003017 	ldw	r4,192(sp)
    9ba4:	00802004 	movi	r2,128
    9ba8:	2081bb26 	beq	r4,r2,a298 <___vfprintf_internal_r+0xff8>
    9bac:	d9402a17 	ldw	r5,168(sp)
    9bb0:	d8802b17 	ldw	r2,172(sp)
    9bb4:	28adc83a 	sub	r22,r5,r2
    9bb8:	0580310e 	bge	zero,r22,9c80 <___vfprintf_internal_r+0x9e0>
    9bbc:	07000404 	movi	fp,16
    9bc0:	d8801f17 	ldw	r2,124(sp)
    9bc4:	e584360e 	bge	fp,r22,aca0 <___vfprintf_internal_r+0x1a00>
    9bc8:	01400074 	movhi	r5,1
    9bcc:	295fe884 	addi	r5,r5,32674
    9bd0:	dc402a15 	stw	r17,168(sp)
    9bd4:	d9402c15 	stw	r5,176(sp)
    9bd8:	b023883a 	mov	r17,r22
    9bdc:	04c001c4 	movi	r19,7
    9be0:	a82d883a 	mov	r22,r21
    9be4:	902b883a 	mov	r21,r18
    9be8:	8025883a 	mov	r18,r16
    9bec:	dc002d17 	ldw	r16,180(sp)
    9bf0:	00000306 	br	9c00 <___vfprintf_internal_r+0x960>
    9bf4:	8c7ffc04 	addi	r17,r17,-16
    9bf8:	42000204 	addi	r8,r8,8
    9bfc:	e440110e 	bge	fp,r17,9c44 <___vfprintf_internal_r+0x9a4>
    9c00:	18c00404 	addi	r3,r3,16
    9c04:	10800044 	addi	r2,r2,1
    9c08:	45000015 	stw	r20,0(r8)
    9c0c:	47000115 	stw	fp,4(r8)
    9c10:	d8c02015 	stw	r3,128(sp)
    9c14:	d8801f15 	stw	r2,124(sp)
    9c18:	98bff60e 	bge	r19,r2,9bf4 <__alt_exception_stack_pointer+0xf8009bf4>
    9c1c:	d9801e04 	addi	r6,sp,120
    9c20:	b80b883a 	mov	r5,r23
    9c24:	8009883a 	mov	r4,r16
    9c28:	0010de80 	call	10de8 <__sprint_r>
    9c2c:	103ea01e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    9c30:	8c7ffc04 	addi	r17,r17,-16
    9c34:	d8c02017 	ldw	r3,128(sp)
    9c38:	d8801f17 	ldw	r2,124(sp)
    9c3c:	da000404 	addi	r8,sp,16
    9c40:	e47fef16 	blt	fp,r17,9c00 <__alt_exception_stack_pointer+0xf8009c00>
    9c44:	9021883a 	mov	r16,r18
    9c48:	a825883a 	mov	r18,r21
    9c4c:	b02b883a 	mov	r21,r22
    9c50:	882d883a 	mov	r22,r17
    9c54:	dc402a17 	ldw	r17,168(sp)
    9c58:	d9002c17 	ldw	r4,176(sp)
    9c5c:	1d87883a 	add	r3,r3,r22
    9c60:	10800044 	addi	r2,r2,1
    9c64:	41000015 	stw	r4,0(r8)
    9c68:	45800115 	stw	r22,4(r8)
    9c6c:	d8c02015 	stw	r3,128(sp)
    9c70:	d8801f15 	stw	r2,124(sp)
    9c74:	010001c4 	movi	r4,7
    9c78:	20821016 	blt	r4,r2,a4bc <___vfprintf_internal_r+0x121c>
    9c7c:	42000204 	addi	r8,r8,8
    9c80:	9080400c 	andi	r2,r18,256
    9c84:	10013a1e 	bne	r2,zero,a170 <___vfprintf_internal_r+0xed0>
    9c88:	d9402b17 	ldw	r5,172(sp)
    9c8c:	d8801f17 	ldw	r2,124(sp)
    9c90:	44000015 	stw	r16,0(r8)
    9c94:	1947883a 	add	r3,r3,r5
    9c98:	10800044 	addi	r2,r2,1
    9c9c:	41400115 	stw	r5,4(r8)
    9ca0:	d8c02015 	stw	r3,128(sp)
    9ca4:	d8801f15 	stw	r2,124(sp)
    9ca8:	010001c4 	movi	r4,7
    9cac:	2081f516 	blt	r4,r2,a484 <___vfprintf_internal_r+0x11e4>
    9cb0:	42000204 	addi	r8,r8,8
    9cb4:	9480010c 	andi	r18,r18,4
    9cb8:	90003226 	beq	r18,zero,9d84 <___vfprintf_internal_r+0xae4>
    9cbc:	d9403117 	ldw	r5,196(sp)
    9cc0:	d8802917 	ldw	r2,164(sp)
    9cc4:	28a1c83a 	sub	r16,r5,r2
    9cc8:	04002e0e 	bge	zero,r16,9d84 <___vfprintf_internal_r+0xae4>
    9ccc:	04400404 	movi	r17,16
    9cd0:	d8801f17 	ldw	r2,124(sp)
    9cd4:	8c04c40e 	bge	r17,r16,afe8 <___vfprintf_internal_r+0x1d48>
    9cd8:	01400074 	movhi	r5,1
    9cdc:	295fec84 	addi	r5,r5,32690
    9ce0:	d9403515 	stw	r5,212(sp)
    9ce4:	048001c4 	movi	r18,7
    9ce8:	dcc02d17 	ldw	r19,180(sp)
    9cec:	00000306 	br	9cfc <___vfprintf_internal_r+0xa5c>
    9cf0:	843ffc04 	addi	r16,r16,-16
    9cf4:	42000204 	addi	r8,r8,8
    9cf8:	8c00130e 	bge	r17,r16,9d48 <___vfprintf_internal_r+0xaa8>
    9cfc:	01000074 	movhi	r4,1
    9d00:	18c00404 	addi	r3,r3,16
    9d04:	10800044 	addi	r2,r2,1
    9d08:	211fec84 	addi	r4,r4,32690
    9d0c:	41000015 	stw	r4,0(r8)
    9d10:	44400115 	stw	r17,4(r8)
    9d14:	d8c02015 	stw	r3,128(sp)
    9d18:	d8801f15 	stw	r2,124(sp)
    9d1c:	90bff40e 	bge	r18,r2,9cf0 <__alt_exception_stack_pointer+0xf8009cf0>
    9d20:	d9801e04 	addi	r6,sp,120
    9d24:	b80b883a 	mov	r5,r23
    9d28:	9809883a 	mov	r4,r19
    9d2c:	0010de80 	call	10de8 <__sprint_r>
    9d30:	103e5f1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    9d34:	843ffc04 	addi	r16,r16,-16
    9d38:	d8c02017 	ldw	r3,128(sp)
    9d3c:	d8801f17 	ldw	r2,124(sp)
    9d40:	da000404 	addi	r8,sp,16
    9d44:	8c3fed16 	blt	r17,r16,9cfc <__alt_exception_stack_pointer+0xf8009cfc>
    9d48:	d9403517 	ldw	r5,212(sp)
    9d4c:	1c07883a 	add	r3,r3,r16
    9d50:	10800044 	addi	r2,r2,1
    9d54:	41400015 	stw	r5,0(r8)
    9d58:	44000115 	stw	r16,4(r8)
    9d5c:	d8c02015 	stw	r3,128(sp)
    9d60:	d8801f15 	stw	r2,124(sp)
    9d64:	010001c4 	movi	r4,7
    9d68:	2080060e 	bge	r4,r2,9d84 <___vfprintf_internal_r+0xae4>
    9d6c:	d9002d17 	ldw	r4,180(sp)
    9d70:	d9801e04 	addi	r6,sp,120
    9d74:	b80b883a 	mov	r5,r23
    9d78:	0010de80 	call	10de8 <__sprint_r>
    9d7c:	103e4c1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    9d80:	d8c02017 	ldw	r3,128(sp)
    9d84:	d8803117 	ldw	r2,196(sp)
    9d88:	d9002917 	ldw	r4,164(sp)
    9d8c:	1100010e 	bge	r2,r4,9d94 <___vfprintf_internal_r+0xaf4>
    9d90:	2005883a 	mov	r2,r4
    9d94:	d9402f17 	ldw	r5,188(sp)
    9d98:	288b883a 	add	r5,r5,r2
    9d9c:	d9402f15 	stw	r5,188(sp)
    9da0:	1801c01e 	bne	r3,zero,a4a4 <___vfprintf_internal_r+0x1204>
    9da4:	a8800007 	ldb	r2,0(r21)
    9da8:	d8001f15 	stw	zero,124(sp)
    9dac:	da000404 	addi	r8,sp,16
    9db0:	103d751e 	bne	r2,zero,9388 <__alt_exception_stack_pointer+0xf8009388>
    9db4:	a823883a 	mov	r17,r21
    9db8:	003d8b06 	br	93e8 <__alt_exception_stack_pointer+0xf80093e8>
    9dbc:	8025883a 	mov	r18,r16
    9dc0:	dc002903 	ldbu	r16,164(sp)
    9dc4:	e011883a 	mov	r8,fp
    9dc8:	84003fcc 	andi	r16,r16,255
    9dcc:	8005e51e 	bne	r16,zero,b564 <___vfprintf_internal_r+0x22c4>
    9dd0:	94800414 	ori	r18,r18,16
    9dd4:	9080080c 	andi	r2,r18,32
    9dd8:	10022b26 	beq	r2,zero,a688 <___vfprintf_internal_r+0x13e8>
    9ddc:	d9002e17 	ldw	r4,184(sp)
    9de0:	d9402a17 	ldw	r5,168(sp)
    9de4:	d8002785 	stb	zero,158(sp)
    9de8:	20c00204 	addi	r3,r4,8
    9dec:	24c00017 	ldw	r19,0(r4)
    9df0:	25800117 	ldw	r22,4(r4)
    9df4:	28042e16 	blt	r5,zero,aeb0 <___vfprintf_internal_r+0x1c10>
    9df8:	013fdfc4 	movi	r4,-129
    9dfc:	9d84b03a 	or	r2,r19,r22
    9e00:	d8c02e15 	stw	r3,184(sp)
    9e04:	9124703a 	and	r18,r18,r4
    9e08:	0039883a 	mov	fp,zero
    9e0c:	103e801e 	bne	r2,zero,9810 <__alt_exception_stack_pointer+0xf8009810>
    9e10:	d9002a17 	ldw	r4,168(sp)
    9e14:	2002e01e 	bne	r4,zero,a998 <___vfprintf_internal_r+0x16f8>
    9e18:	d8002a15 	stw	zero,168(sp)
    9e1c:	d8002b15 	stw	zero,172(sp)
    9e20:	dc001e04 	addi	r16,sp,120
    9e24:	003ef506 	br	99fc <__alt_exception_stack_pointer+0xf80099fc>
    9e28:	8025883a 	mov	r18,r16
    9e2c:	dc002903 	ldbu	r16,164(sp)
    9e30:	e011883a 	mov	r8,fp
    9e34:	84003fcc 	andi	r16,r16,255
    9e38:	8005ba1e 	bne	r16,zero,b524 <___vfprintf_internal_r+0x2284>
    9e3c:	01000074 	movhi	r4,1
    9e40:	211fdc04 	addi	r4,r4,32624
    9e44:	d9003915 	stw	r4,228(sp)
    9e48:	9080080c 	andi	r2,r18,32
    9e4c:	10006126 	beq	r2,zero,9fd4 <___vfprintf_internal_r+0xd34>
    9e50:	d9402e17 	ldw	r5,184(sp)
    9e54:	2cc00017 	ldw	r19,0(r5)
    9e58:	2d800117 	ldw	r22,4(r5)
    9e5c:	29400204 	addi	r5,r5,8
    9e60:	d9402e15 	stw	r5,184(sp)
    9e64:	9080004c 	andi	r2,r18,1
    9e68:	1001ac26 	beq	r2,zero,a51c <___vfprintf_internal_r+0x127c>
    9e6c:	9d84b03a 	or	r2,r19,r22
    9e70:	10038526 	beq	r2,zero,ac88 <___vfprintf_internal_r+0x19e8>
    9e74:	d8c02a17 	ldw	r3,168(sp)
    9e78:	00800c04 	movi	r2,48
    9e7c:	d8802705 	stb	r2,156(sp)
    9e80:	dc402745 	stb	r17,157(sp)
    9e84:	d8002785 	stb	zero,158(sp)
    9e88:	90800094 	ori	r2,r18,2
    9e8c:	18047916 	blt	r3,zero,b074 <___vfprintf_internal_r+0x1dd4>
    9e90:	00bfdfc4 	movi	r2,-129
    9e94:	90a4703a 	and	r18,r18,r2
    9e98:	94800094 	ori	r18,r18,2
    9e9c:	0039883a 	mov	fp,zero
    9ea0:	d9003917 	ldw	r4,228(sp)
    9ea4:	dc001e04 	addi	r16,sp,120
    9ea8:	988003cc 	andi	r2,r19,15
    9eac:	b006973a 	slli	r3,r22,28
    9eb0:	2085883a 	add	r2,r4,r2
    9eb4:	9826d13a 	srli	r19,r19,4
    9eb8:	10800003 	ldbu	r2,0(r2)
    9ebc:	b02cd13a 	srli	r22,r22,4
    9ec0:	843fffc4 	addi	r16,r16,-1
    9ec4:	1ce6b03a 	or	r19,r3,r19
    9ec8:	80800005 	stb	r2,0(r16)
    9ecc:	9d84b03a 	or	r2,r19,r22
    9ed0:	103ff51e 	bne	r2,zero,9ea8 <__alt_exception_stack_pointer+0xf8009ea8>
    9ed4:	d8c02817 	ldw	r3,160(sp)
    9ed8:	1c07c83a 	sub	r3,r3,r16
    9edc:	d8c02b15 	stw	r3,172(sp)
    9ee0:	003ec606 	br	99fc <__alt_exception_stack_pointer+0xf80099fc>
    9ee4:	8025883a 	mov	r18,r16
    9ee8:	dc002903 	ldbu	r16,164(sp)
    9eec:	e011883a 	mov	r8,fp
    9ef0:	84003fcc 	andi	r16,r16,255
    9ef4:	803e9626 	beq	r16,zero,9950 <__alt_exception_stack_pointer+0xf8009950>
    9ef8:	d8c02b03 	ldbu	r3,172(sp)
    9efc:	d8c02785 	stb	r3,158(sp)
    9f00:	003e9306 	br	9950 <__alt_exception_stack_pointer+0xf8009950>
    9f04:	00c00044 	movi	r3,1
    9f08:	d8c02905 	stb	r3,164(sp)
    9f0c:	00c00ac4 	movi	r3,43
    9f10:	d8c02b05 	stb	r3,172(sp)
    9f14:	ac400007 	ldb	r17,0(r21)
    9f18:	003d4306 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    9f1c:	84000814 	ori	r16,r16,32
    9f20:	ac400007 	ldb	r17,0(r21)
    9f24:	003d4006 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    9f28:	d8802e17 	ldw	r2,184(sp)
    9f2c:	8025883a 	mov	r18,r16
    9f30:	d8002785 	stb	zero,158(sp)
    9f34:	14000017 	ldw	r16,0(r2)
    9f38:	e011883a 	mov	r8,fp
    9f3c:	14c00104 	addi	r19,r2,4
    9f40:	80042d26 	beq	r16,zero,aff8 <___vfprintf_internal_r+0x1d58>
    9f44:	d8c02a17 	ldw	r3,168(sp)
    9f48:	1803e416 	blt	r3,zero,aedc <___vfprintf_internal_r+0x1c3c>
    9f4c:	180d883a 	mov	r6,r3
    9f50:	000b883a 	mov	r5,zero
    9f54:	8009883a 	mov	r4,r16
    9f58:	df003d15 	stw	fp,244(sp)
    9f5c:	000ef040 	call	ef04 <memchr>
    9f60:	da003d17 	ldw	r8,244(sp)
    9f64:	10046826 	beq	r2,zero,b108 <___vfprintf_internal_r+0x1e68>
    9f68:	1405c83a 	sub	r2,r2,r16
    9f6c:	d8802b15 	stw	r2,172(sp)
    9f70:	1003e016 	blt	r2,zero,aef4 <___vfprintf_internal_r+0x1c54>
    9f74:	df002783 	ldbu	fp,158(sp)
    9f78:	d8802915 	stw	r2,164(sp)
    9f7c:	dcc02e15 	stw	r19,184(sp)
    9f80:	d8002a15 	stw	zero,168(sp)
    9f84:	d8003215 	stw	zero,200(sp)
    9f88:	003ea206 	br	9a14 <__alt_exception_stack_pointer+0xf8009a14>
    9f8c:	8025883a 	mov	r18,r16
    9f90:	dc002903 	ldbu	r16,164(sp)
    9f94:	e011883a 	mov	r8,fp
    9f98:	84003fcc 	andi	r16,r16,255
    9f9c:	803f8d26 	beq	r16,zero,9dd4 <__alt_exception_stack_pointer+0xf8009dd4>
    9fa0:	d8c02b03 	ldbu	r3,172(sp)
    9fa4:	d8c02785 	stb	r3,158(sp)
    9fa8:	003f8a06 	br	9dd4 <__alt_exception_stack_pointer+0xf8009dd4>
    9fac:	8025883a 	mov	r18,r16
    9fb0:	dc002903 	ldbu	r16,164(sp)
    9fb4:	e011883a 	mov	r8,fp
    9fb8:	84003fcc 	andi	r16,r16,255
    9fbc:	8005661e 	bne	r16,zero,b558 <___vfprintf_internal_r+0x22b8>
    9fc0:	01000074 	movhi	r4,1
    9fc4:	211fe104 	addi	r4,r4,32644
    9fc8:	d9003915 	stw	r4,228(sp)
    9fcc:	9080080c 	andi	r2,r18,32
    9fd0:	103f9f1e 	bne	r2,zero,9e50 <__alt_exception_stack_pointer+0xf8009e50>
    9fd4:	9080040c 	andi	r2,r18,16
    9fd8:	1002eb26 	beq	r2,zero,ab88 <___vfprintf_internal_r+0x18e8>
    9fdc:	d8802e17 	ldw	r2,184(sp)
    9fe0:	002d883a 	mov	r22,zero
    9fe4:	14c00017 	ldw	r19,0(r2)
    9fe8:	10800104 	addi	r2,r2,4
    9fec:	d8802e15 	stw	r2,184(sp)
    9ff0:	003f9c06 	br	9e64 <__alt_exception_stack_pointer+0xf8009e64>
    9ff4:	d8802b07 	ldb	r2,172(sp)
    9ff8:	1002e11e 	bne	r2,zero,ab80 <___vfprintf_internal_r+0x18e0>
    9ffc:	00c00044 	movi	r3,1
    a000:	d8c02905 	stb	r3,164(sp)
    a004:	00c00804 	movi	r3,32
    a008:	d8c02b05 	stb	r3,172(sp)
    a00c:	ac400007 	ldb	r17,0(r21)
    a010:	003d0506 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    a014:	84000054 	ori	r16,r16,1
    a018:	ac400007 	ldb	r17,0(r21)
    a01c:	003d0206 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    a020:	8025883a 	mov	r18,r16
    a024:	dc002903 	ldbu	r16,164(sp)
    a028:	e011883a 	mov	r8,fp
    a02c:	84003fcc 	andi	r16,r16,255
    a030:	803de726 	beq	r16,zero,97d0 <__alt_exception_stack_pointer+0xf80097d0>
    a034:	d8c02b03 	ldbu	r3,172(sp)
    a038:	d8c02785 	stb	r3,158(sp)
    a03c:	003de406 	br	97d0 <__alt_exception_stack_pointer+0xf80097d0>
    a040:	84001014 	ori	r16,r16,64
    a044:	ac400007 	ldb	r17,0(r21)
    a048:	003cf706 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    a04c:	ac400007 	ldb	r17,0(r21)
    a050:	00801b04 	movi	r2,108
    a054:	88838f26 	beq	r17,r2,ae94 <___vfprintf_internal_r+0x1bf4>
    a058:	84000414 	ori	r16,r16,16
    a05c:	003cf206 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    a060:	8025883a 	mov	r18,r16
    a064:	dc002903 	ldbu	r16,164(sp)
    a068:	e011883a 	mov	r8,fp
    a06c:	84003fcc 	andi	r16,r16,255
    a070:	80053f1e 	bne	r16,zero,b570 <___vfprintf_internal_r+0x22d0>
    a074:	9080080c 	andi	r2,r18,32
    a078:	1002d226 	beq	r2,zero,abc4 <___vfprintf_internal_r+0x1924>
    a07c:	d9002e17 	ldw	r4,184(sp)
    a080:	d9402f17 	ldw	r5,188(sp)
    a084:	20800017 	ldw	r2,0(r4)
    a088:	2807d7fa 	srai	r3,r5,31
    a08c:	21000104 	addi	r4,r4,4
    a090:	d9002e15 	stw	r4,184(sp)
    a094:	11400015 	stw	r5,0(r2)
    a098:	10c00115 	stw	r3,4(r2)
    a09c:	003cb806 	br	9380 <__alt_exception_stack_pointer+0xf8009380>
    a0a0:	d8c02e17 	ldw	r3,184(sp)
    a0a4:	d9002e17 	ldw	r4,184(sp)
    a0a8:	8025883a 	mov	r18,r16
    a0ac:	18800017 	ldw	r2,0(r3)
    a0b0:	21000104 	addi	r4,r4,4
    a0b4:	00c00044 	movi	r3,1
    a0b8:	e011883a 	mov	r8,fp
    a0bc:	d8c02915 	stw	r3,164(sp)
    a0c0:	d8002785 	stb	zero,158(sp)
    a0c4:	d8801405 	stb	r2,80(sp)
    a0c8:	d9002e15 	stw	r4,184(sp)
    a0cc:	d8c02b15 	stw	r3,172(sp)
    a0d0:	d8002a15 	stw	zero,168(sp)
    a0d4:	d8003215 	stw	zero,200(sp)
    a0d8:	dc001404 	addi	r16,sp,80
    a0dc:	0039883a 	mov	fp,zero
    a0e0:	003e5306 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    a0e4:	01000074 	movhi	r4,1
    a0e8:	211fe104 	addi	r4,r4,32644
    a0ec:	0039883a 	mov	fp,zero
    a0f0:	d9003915 	stw	r4,228(sp)
    a0f4:	04401e04 	movi	r17,120
    a0f8:	003f6906 	br	9ea0 <__alt_exception_stack_pointer+0xf8009ea0>
    a0fc:	8025883a 	mov	r18,r16
    a100:	dc002903 	ldbu	r16,164(sp)
    a104:	e011883a 	mov	r8,fp
    a108:	84003fcc 	andi	r16,r16,255
    a10c:	8005081e 	bne	r16,zero,b530 <___vfprintf_internal_r+0x2290>
    a110:	883d6126 	beq	r17,zero,9698 <__alt_exception_stack_pointer+0xf8009698>
    a114:	00c00044 	movi	r3,1
    a118:	d8c02915 	stw	r3,164(sp)
    a11c:	dc401405 	stb	r17,80(sp)
    a120:	d8002785 	stb	zero,158(sp)
    a124:	003fe906 	br	a0cc <__alt_exception_stack_pointer+0xf800a0cc>
    a128:	01400074 	movhi	r5,1
    a12c:	295fe104 	addi	r5,r5,32644
    a130:	d9403915 	stw	r5,228(sp)
    a134:	d8c02e15 	stw	r3,184(sp)
    a138:	1025883a 	mov	r18,r2
    a13c:	04401e04 	movi	r17,120
    a140:	9d84b03a 	or	r2,r19,r22
    a144:	1000fc1e 	bne	r2,zero,a538 <___vfprintf_internal_r+0x1298>
    a148:	0039883a 	mov	fp,zero
    a14c:	00800084 	movi	r2,2
    a150:	10803fcc 	andi	r2,r2,255
    a154:	00c00044 	movi	r3,1
    a158:	10c20f26 	beq	r2,r3,a998 <___vfprintf_internal_r+0x16f8>
    a15c:	00c00084 	movi	r3,2
    a160:	10fd3326 	beq	r2,r3,9630 <__alt_exception_stack_pointer+0xf8009630>
    a164:	003e0b06 	br	9994 <__alt_exception_stack_pointer+0xf8009994>
    a168:	d8c02017 	ldw	r3,128(sp)
    a16c:	003e7106 	br	9b34 <__alt_exception_stack_pointer+0xf8009b34>
    a170:	00801944 	movi	r2,101
    a174:	14407e0e 	bge	r2,r17,a370 <___vfprintf_internal_r+0x10d0>
    a178:	d9003617 	ldw	r4,216(sp)
    a17c:	d9403817 	ldw	r5,224(sp)
    a180:	000d883a 	mov	r6,zero
    a184:	000f883a 	mov	r7,zero
    a188:	d8c03c15 	stw	r3,240(sp)
    a18c:	da003d15 	stw	r8,244(sp)
    a190:	0006e280 	call	6e28 <__eqdf2>
    a194:	d8c03c17 	ldw	r3,240(sp)
    a198:	da003d17 	ldw	r8,244(sp)
    a19c:	1000f71e 	bne	r2,zero,a57c <___vfprintf_internal_r+0x12dc>
    a1a0:	d8801f17 	ldw	r2,124(sp)
    a1a4:	01000074 	movhi	r4,1
    a1a8:	211fe804 	addi	r4,r4,32672
    a1ac:	18c00044 	addi	r3,r3,1
    a1b0:	10800044 	addi	r2,r2,1
    a1b4:	41000015 	stw	r4,0(r8)
    a1b8:	01000044 	movi	r4,1
    a1bc:	41000115 	stw	r4,4(r8)
    a1c0:	d8c02015 	stw	r3,128(sp)
    a1c4:	d8801f15 	stw	r2,124(sp)
    a1c8:	010001c4 	movi	r4,7
    a1cc:	2082b816 	blt	r4,r2,acb0 <___vfprintf_internal_r+0x1a10>
    a1d0:	42000204 	addi	r8,r8,8
    a1d4:	d8802617 	ldw	r2,152(sp)
    a1d8:	d9403317 	ldw	r5,204(sp)
    a1dc:	11400216 	blt	r2,r5,a1e8 <___vfprintf_internal_r+0xf48>
    a1e0:	9080004c 	andi	r2,r18,1
    a1e4:	103eb326 	beq	r2,zero,9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    a1e8:	d8803717 	ldw	r2,220(sp)
    a1ec:	d9003417 	ldw	r4,208(sp)
    a1f0:	d9403717 	ldw	r5,220(sp)
    a1f4:	1887883a 	add	r3,r3,r2
    a1f8:	d8801f17 	ldw	r2,124(sp)
    a1fc:	41000015 	stw	r4,0(r8)
    a200:	41400115 	stw	r5,4(r8)
    a204:	10800044 	addi	r2,r2,1
    a208:	d8c02015 	stw	r3,128(sp)
    a20c:	d8801f15 	stw	r2,124(sp)
    a210:	010001c4 	movi	r4,7
    a214:	20832916 	blt	r4,r2,aebc <___vfprintf_internal_r+0x1c1c>
    a218:	42000204 	addi	r8,r8,8
    a21c:	d8803317 	ldw	r2,204(sp)
    a220:	143fffc4 	addi	r16,r2,-1
    a224:	043ea30e 	bge	zero,r16,9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    a228:	04400404 	movi	r17,16
    a22c:	d8801f17 	ldw	r2,124(sp)
    a230:	8c00880e 	bge	r17,r16,a454 <___vfprintf_internal_r+0x11b4>
    a234:	01400074 	movhi	r5,1
    a238:	295fe884 	addi	r5,r5,32674
    a23c:	d9402c15 	stw	r5,176(sp)
    a240:	058001c4 	movi	r22,7
    a244:	dcc02d17 	ldw	r19,180(sp)
    a248:	00000306 	br	a258 <___vfprintf_internal_r+0xfb8>
    a24c:	42000204 	addi	r8,r8,8
    a250:	843ffc04 	addi	r16,r16,-16
    a254:	8c00820e 	bge	r17,r16,a460 <___vfprintf_internal_r+0x11c0>
    a258:	18c00404 	addi	r3,r3,16
    a25c:	10800044 	addi	r2,r2,1
    a260:	45000015 	stw	r20,0(r8)
    a264:	44400115 	stw	r17,4(r8)
    a268:	d8c02015 	stw	r3,128(sp)
    a26c:	d8801f15 	stw	r2,124(sp)
    a270:	b0bff60e 	bge	r22,r2,a24c <__alt_exception_stack_pointer+0xf800a24c>
    a274:	d9801e04 	addi	r6,sp,120
    a278:	b80b883a 	mov	r5,r23
    a27c:	9809883a 	mov	r4,r19
    a280:	0010de80 	call	10de8 <__sprint_r>
    a284:	103d0a1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a288:	d8c02017 	ldw	r3,128(sp)
    a28c:	d8801f17 	ldw	r2,124(sp)
    a290:	da000404 	addi	r8,sp,16
    a294:	003fee06 	br	a250 <__alt_exception_stack_pointer+0xf800a250>
    a298:	d9403117 	ldw	r5,196(sp)
    a29c:	d8802917 	ldw	r2,164(sp)
    a2a0:	28adc83a 	sub	r22,r5,r2
    a2a4:	05be410e 	bge	zero,r22,9bac <__alt_exception_stack_pointer+0xf8009bac>
    a2a8:	07000404 	movi	fp,16
    a2ac:	d8801f17 	ldw	r2,124(sp)
    a2b0:	e5838f0e 	bge	fp,r22,b0f0 <___vfprintf_internal_r+0x1e50>
    a2b4:	01400074 	movhi	r5,1
    a2b8:	295fe884 	addi	r5,r5,32674
    a2bc:	dc403015 	stw	r17,192(sp)
    a2c0:	d9402c15 	stw	r5,176(sp)
    a2c4:	b023883a 	mov	r17,r22
    a2c8:	04c001c4 	movi	r19,7
    a2cc:	a82d883a 	mov	r22,r21
    a2d0:	902b883a 	mov	r21,r18
    a2d4:	8025883a 	mov	r18,r16
    a2d8:	dc002d17 	ldw	r16,180(sp)
    a2dc:	00000306 	br	a2ec <___vfprintf_internal_r+0x104c>
    a2e0:	8c7ffc04 	addi	r17,r17,-16
    a2e4:	42000204 	addi	r8,r8,8
    a2e8:	e440110e 	bge	fp,r17,a330 <___vfprintf_internal_r+0x1090>
    a2ec:	18c00404 	addi	r3,r3,16
    a2f0:	10800044 	addi	r2,r2,1
    a2f4:	45000015 	stw	r20,0(r8)
    a2f8:	47000115 	stw	fp,4(r8)
    a2fc:	d8c02015 	stw	r3,128(sp)
    a300:	d8801f15 	stw	r2,124(sp)
    a304:	98bff60e 	bge	r19,r2,a2e0 <__alt_exception_stack_pointer+0xf800a2e0>
    a308:	d9801e04 	addi	r6,sp,120
    a30c:	b80b883a 	mov	r5,r23
    a310:	8009883a 	mov	r4,r16
    a314:	0010de80 	call	10de8 <__sprint_r>
    a318:	103ce51e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a31c:	8c7ffc04 	addi	r17,r17,-16
    a320:	d8c02017 	ldw	r3,128(sp)
    a324:	d8801f17 	ldw	r2,124(sp)
    a328:	da000404 	addi	r8,sp,16
    a32c:	e47fef16 	blt	fp,r17,a2ec <__alt_exception_stack_pointer+0xf800a2ec>
    a330:	9021883a 	mov	r16,r18
    a334:	a825883a 	mov	r18,r21
    a338:	b02b883a 	mov	r21,r22
    a33c:	882d883a 	mov	r22,r17
    a340:	dc403017 	ldw	r17,192(sp)
    a344:	d9002c17 	ldw	r4,176(sp)
    a348:	1d87883a 	add	r3,r3,r22
    a34c:	10800044 	addi	r2,r2,1
    a350:	41000015 	stw	r4,0(r8)
    a354:	45800115 	stw	r22,4(r8)
    a358:	d8c02015 	stw	r3,128(sp)
    a35c:	d8801f15 	stw	r2,124(sp)
    a360:	010001c4 	movi	r4,7
    a364:	20818e16 	blt	r4,r2,a9a0 <___vfprintf_internal_r+0x1700>
    a368:	42000204 	addi	r8,r8,8
    a36c:	003e0f06 	br	9bac <__alt_exception_stack_pointer+0xf8009bac>
    a370:	d9403317 	ldw	r5,204(sp)
    a374:	00800044 	movi	r2,1
    a378:	18c00044 	addi	r3,r3,1
    a37c:	1141530e 	bge	r2,r5,a8cc <___vfprintf_internal_r+0x162c>
    a380:	dc401f17 	ldw	r17,124(sp)
    a384:	00800044 	movi	r2,1
    a388:	40800115 	stw	r2,4(r8)
    a38c:	8c400044 	addi	r17,r17,1
    a390:	44000015 	stw	r16,0(r8)
    a394:	d8c02015 	stw	r3,128(sp)
    a398:	dc401f15 	stw	r17,124(sp)
    a39c:	008001c4 	movi	r2,7
    a3a0:	14416b16 	blt	r2,r17,a950 <___vfprintf_internal_r+0x16b0>
    a3a4:	42000204 	addi	r8,r8,8
    a3a8:	d8803717 	ldw	r2,220(sp)
    a3ac:	d9003417 	ldw	r4,208(sp)
    a3b0:	8c400044 	addi	r17,r17,1
    a3b4:	10c7883a 	add	r3,r2,r3
    a3b8:	40800115 	stw	r2,4(r8)
    a3bc:	41000015 	stw	r4,0(r8)
    a3c0:	d8c02015 	stw	r3,128(sp)
    a3c4:	dc401f15 	stw	r17,124(sp)
    a3c8:	008001c4 	movi	r2,7
    a3cc:	14416916 	blt	r2,r17,a974 <___vfprintf_internal_r+0x16d4>
    a3d0:	45800204 	addi	r22,r8,8
    a3d4:	d9003617 	ldw	r4,216(sp)
    a3d8:	d9403817 	ldw	r5,224(sp)
    a3dc:	000d883a 	mov	r6,zero
    a3e0:	000f883a 	mov	r7,zero
    a3e4:	d8c03c15 	stw	r3,240(sp)
    a3e8:	0006e280 	call	6e28 <__eqdf2>
    a3ec:	d8c03c17 	ldw	r3,240(sp)
    a3f0:	1000bc26 	beq	r2,zero,a6e4 <___vfprintf_internal_r+0x1444>
    a3f4:	d9403317 	ldw	r5,204(sp)
    a3f8:	84000044 	addi	r16,r16,1
    a3fc:	8c400044 	addi	r17,r17,1
    a400:	28bfffc4 	addi	r2,r5,-1
    a404:	1887883a 	add	r3,r3,r2
    a408:	b0800115 	stw	r2,4(r22)
    a40c:	b4000015 	stw	r16,0(r22)
    a410:	d8c02015 	stw	r3,128(sp)
    a414:	dc401f15 	stw	r17,124(sp)
    a418:	008001c4 	movi	r2,7
    a41c:	14414316 	blt	r2,r17,a92c <___vfprintf_internal_r+0x168c>
    a420:	b5800204 	addi	r22,r22,8
    a424:	d9003a17 	ldw	r4,232(sp)
    a428:	df0022c4 	addi	fp,sp,139
    a42c:	8c400044 	addi	r17,r17,1
    a430:	20c7883a 	add	r3,r4,r3
    a434:	b7000015 	stw	fp,0(r22)
    a438:	b1000115 	stw	r4,4(r22)
    a43c:	d8c02015 	stw	r3,128(sp)
    a440:	dc401f15 	stw	r17,124(sp)
    a444:	008001c4 	movi	r2,7
    a448:	14400e16 	blt	r2,r17,a484 <___vfprintf_internal_r+0x11e4>
    a44c:	b2000204 	addi	r8,r22,8
    a450:	003e1806 	br	9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    a454:	01000074 	movhi	r4,1
    a458:	211fe884 	addi	r4,r4,32674
    a45c:	d9002c15 	stw	r4,176(sp)
    a460:	d9002c17 	ldw	r4,176(sp)
    a464:	1c07883a 	add	r3,r3,r16
    a468:	44000115 	stw	r16,4(r8)
    a46c:	41000015 	stw	r4,0(r8)
    a470:	10800044 	addi	r2,r2,1
    a474:	d8c02015 	stw	r3,128(sp)
    a478:	d8801f15 	stw	r2,124(sp)
    a47c:	010001c4 	movi	r4,7
    a480:	20be0b0e 	bge	r4,r2,9cb0 <__alt_exception_stack_pointer+0xf8009cb0>
    a484:	d9002d17 	ldw	r4,180(sp)
    a488:	d9801e04 	addi	r6,sp,120
    a48c:	b80b883a 	mov	r5,r23
    a490:	0010de80 	call	10de8 <__sprint_r>
    a494:	103c861e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a498:	d8c02017 	ldw	r3,128(sp)
    a49c:	da000404 	addi	r8,sp,16
    a4a0:	003e0406 	br	9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    a4a4:	d9002d17 	ldw	r4,180(sp)
    a4a8:	d9801e04 	addi	r6,sp,120
    a4ac:	b80b883a 	mov	r5,r23
    a4b0:	0010de80 	call	10de8 <__sprint_r>
    a4b4:	103e3b26 	beq	r2,zero,9da4 <__alt_exception_stack_pointer+0xf8009da4>
    a4b8:	003c7d06 	br	96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a4bc:	d9002d17 	ldw	r4,180(sp)
    a4c0:	d9801e04 	addi	r6,sp,120
    a4c4:	b80b883a 	mov	r5,r23
    a4c8:	0010de80 	call	10de8 <__sprint_r>
    a4cc:	103c781e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a4d0:	d8c02017 	ldw	r3,128(sp)
    a4d4:	da000404 	addi	r8,sp,16
    a4d8:	003de906 	br	9c80 <__alt_exception_stack_pointer+0xf8009c80>
    a4dc:	d9002d17 	ldw	r4,180(sp)
    a4e0:	d9801e04 	addi	r6,sp,120
    a4e4:	b80b883a 	mov	r5,r23
    a4e8:	0010de80 	call	10de8 <__sprint_r>
    a4ec:	103c701e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a4f0:	d8c02017 	ldw	r3,128(sp)
    a4f4:	da000404 	addi	r8,sp,16
    a4f8:	003d9b06 	br	9b68 <__alt_exception_stack_pointer+0xf8009b68>
    a4fc:	d9002d17 	ldw	r4,180(sp)
    a500:	d9801e04 	addi	r6,sp,120
    a504:	b80b883a 	mov	r5,r23
    a508:	0010de80 	call	10de8 <__sprint_r>
    a50c:	103c681e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a510:	d8c02017 	ldw	r3,128(sp)
    a514:	da000404 	addi	r8,sp,16
    a518:	003da106 	br	9ba0 <__alt_exception_stack_pointer+0xf8009ba0>
    a51c:	d9402a17 	ldw	r5,168(sp)
    a520:	d8002785 	stb	zero,158(sp)
    a524:	283f0616 	blt	r5,zero,a140 <__alt_exception_stack_pointer+0xf800a140>
    a528:	00ffdfc4 	movi	r3,-129
    a52c:	9d84b03a 	or	r2,r19,r22
    a530:	90e4703a 	and	r18,r18,r3
    a534:	103c3b26 	beq	r2,zero,9624 <__alt_exception_stack_pointer+0xf8009624>
    a538:	0039883a 	mov	fp,zero
    a53c:	003e5806 	br	9ea0 <__alt_exception_stack_pointer+0xf8009ea0>
    a540:	9080040c 	andi	r2,r18,16
    a544:	1001b326 	beq	r2,zero,ac14 <___vfprintf_internal_r+0x1974>
    a548:	d8c02e17 	ldw	r3,184(sp)
    a54c:	d9002a17 	ldw	r4,168(sp)
    a550:	d8002785 	stb	zero,158(sp)
    a554:	18800104 	addi	r2,r3,4
    a558:	1cc00017 	ldw	r19,0(r3)
    a55c:	002d883a 	mov	r22,zero
    a560:	2001b516 	blt	r4,zero,ac38 <___vfprintf_internal_r+0x1998>
    a564:	00ffdfc4 	movi	r3,-129
    a568:	d8802e15 	stw	r2,184(sp)
    a56c:	90e4703a 	and	r18,r18,r3
    a570:	983d0526 	beq	r19,zero,9988 <__alt_exception_stack_pointer+0xf8009988>
    a574:	0039883a 	mov	fp,zero
    a578:	003d0806 	br	999c <__alt_exception_stack_pointer+0xf800999c>
    a57c:	dc402617 	ldw	r17,152(sp)
    a580:	0441d30e 	bge	zero,r17,acd0 <___vfprintf_internal_r+0x1a30>
    a584:	dc403217 	ldw	r17,200(sp)
    a588:	d8803317 	ldw	r2,204(sp)
    a58c:	1440010e 	bge	r2,r17,a594 <___vfprintf_internal_r+0x12f4>
    a590:	1023883a 	mov	r17,r2
    a594:	04400a0e 	bge	zero,r17,a5c0 <___vfprintf_internal_r+0x1320>
    a598:	d8801f17 	ldw	r2,124(sp)
    a59c:	1c47883a 	add	r3,r3,r17
    a5a0:	44000015 	stw	r16,0(r8)
    a5a4:	10800044 	addi	r2,r2,1
    a5a8:	44400115 	stw	r17,4(r8)
    a5ac:	d8c02015 	stw	r3,128(sp)
    a5b0:	d8801f15 	stw	r2,124(sp)
    a5b4:	010001c4 	movi	r4,7
    a5b8:	20826516 	blt	r4,r2,af50 <___vfprintf_internal_r+0x1cb0>
    a5bc:	42000204 	addi	r8,r8,8
    a5c0:	88026116 	blt	r17,zero,af48 <___vfprintf_internal_r+0x1ca8>
    a5c4:	d9003217 	ldw	r4,200(sp)
    a5c8:	2463c83a 	sub	r17,r4,r17
    a5cc:	04407b0e 	bge	zero,r17,a7bc <___vfprintf_internal_r+0x151c>
    a5d0:	05800404 	movi	r22,16
    a5d4:	d8801f17 	ldw	r2,124(sp)
    a5d8:	b4419d0e 	bge	r22,r17,ac50 <___vfprintf_internal_r+0x19b0>
    a5dc:	01000074 	movhi	r4,1
    a5e0:	211fe884 	addi	r4,r4,32674
    a5e4:	d9002c15 	stw	r4,176(sp)
    a5e8:	070001c4 	movi	fp,7
    a5ec:	dcc02d17 	ldw	r19,180(sp)
    a5f0:	00000306 	br	a600 <___vfprintf_internal_r+0x1360>
    a5f4:	42000204 	addi	r8,r8,8
    a5f8:	8c7ffc04 	addi	r17,r17,-16
    a5fc:	b441970e 	bge	r22,r17,ac5c <___vfprintf_internal_r+0x19bc>
    a600:	18c00404 	addi	r3,r3,16
    a604:	10800044 	addi	r2,r2,1
    a608:	45000015 	stw	r20,0(r8)
    a60c:	45800115 	stw	r22,4(r8)
    a610:	d8c02015 	stw	r3,128(sp)
    a614:	d8801f15 	stw	r2,124(sp)
    a618:	e0bff60e 	bge	fp,r2,a5f4 <__alt_exception_stack_pointer+0xf800a5f4>
    a61c:	d9801e04 	addi	r6,sp,120
    a620:	b80b883a 	mov	r5,r23
    a624:	9809883a 	mov	r4,r19
    a628:	0010de80 	call	10de8 <__sprint_r>
    a62c:	103c201e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a630:	d8c02017 	ldw	r3,128(sp)
    a634:	d8801f17 	ldw	r2,124(sp)
    a638:	da000404 	addi	r8,sp,16
    a63c:	003fee06 	br	a5f8 <__alt_exception_stack_pointer+0xf800a5f8>
    a640:	d9002d17 	ldw	r4,180(sp)
    a644:	d9801e04 	addi	r6,sp,120
    a648:	b80b883a 	mov	r5,r23
    a64c:	0010de80 	call	10de8 <__sprint_r>
    a650:	103c171e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a654:	d8c02017 	ldw	r3,128(sp)
    a658:	df002787 	ldb	fp,158(sp)
    a65c:	da000404 	addi	r8,sp,16
    a660:	003d3406 	br	9b34 <__alt_exception_stack_pointer+0xf8009b34>
    a664:	9080040c 	andi	r2,r18,16
    a668:	10016126 	beq	r2,zero,abf0 <___vfprintf_internal_r+0x1950>
    a66c:	d9402e17 	ldw	r5,184(sp)
    a670:	2cc00017 	ldw	r19,0(r5)
    a674:	29400104 	addi	r5,r5,4
    a678:	d9402e15 	stw	r5,184(sp)
    a67c:	982dd7fa 	srai	r22,r19,31
    a680:	b005883a 	mov	r2,r22
    a684:	003c5a06 	br	97f0 <__alt_exception_stack_pointer+0xf80097f0>
    a688:	9080040c 	andi	r2,r18,16
    a68c:	10003526 	beq	r2,zero,a764 <___vfprintf_internal_r+0x14c4>
    a690:	d8c02e17 	ldw	r3,184(sp)
    a694:	d9002a17 	ldw	r4,168(sp)
    a698:	d8002785 	stb	zero,158(sp)
    a69c:	18800104 	addi	r2,r3,4
    a6a0:	1cc00017 	ldw	r19,0(r3)
    a6a4:	002d883a 	mov	r22,zero
    a6a8:	20003716 	blt	r4,zero,a788 <___vfprintf_internal_r+0x14e8>
    a6ac:	00ffdfc4 	movi	r3,-129
    a6b0:	d8802e15 	stw	r2,184(sp)
    a6b4:	90e4703a 	and	r18,r18,r3
    a6b8:	0039883a 	mov	fp,zero
    a6bc:	983dd426 	beq	r19,zero,9e10 <__alt_exception_stack_pointer+0xf8009e10>
    a6c0:	00800244 	movi	r2,9
    a6c4:	14fc5336 	bltu	r2,r19,9814 <__alt_exception_stack_pointer+0xf8009814>
    a6c8:	d8c02817 	ldw	r3,160(sp)
    a6cc:	dc001dc4 	addi	r16,sp,119
    a6d0:	9cc00c04 	addi	r19,r19,48
    a6d4:	1c07c83a 	sub	r3,r3,r16
    a6d8:	dcc01dc5 	stb	r19,119(sp)
    a6dc:	d8c02b15 	stw	r3,172(sp)
    a6e0:	003cc606 	br	99fc <__alt_exception_stack_pointer+0xf80099fc>
    a6e4:	d8803317 	ldw	r2,204(sp)
    a6e8:	143fffc4 	addi	r16,r2,-1
    a6ec:	043f4d0e 	bge	zero,r16,a424 <__alt_exception_stack_pointer+0xf800a424>
    a6f0:	07000404 	movi	fp,16
    a6f4:	e400810e 	bge	fp,r16,a8fc <___vfprintf_internal_r+0x165c>
    a6f8:	01400074 	movhi	r5,1
    a6fc:	295fe884 	addi	r5,r5,32674
    a700:	d9402c15 	stw	r5,176(sp)
    a704:	01c001c4 	movi	r7,7
    a708:	dcc02d17 	ldw	r19,180(sp)
    a70c:	00000306 	br	a71c <___vfprintf_internal_r+0x147c>
    a710:	b5800204 	addi	r22,r22,8
    a714:	843ffc04 	addi	r16,r16,-16
    a718:	e4007b0e 	bge	fp,r16,a908 <___vfprintf_internal_r+0x1668>
    a71c:	18c00404 	addi	r3,r3,16
    a720:	8c400044 	addi	r17,r17,1
    a724:	b5000015 	stw	r20,0(r22)
    a728:	b7000115 	stw	fp,4(r22)
    a72c:	d8c02015 	stw	r3,128(sp)
    a730:	dc401f15 	stw	r17,124(sp)
    a734:	3c7ff60e 	bge	r7,r17,a710 <__alt_exception_stack_pointer+0xf800a710>
    a738:	d9801e04 	addi	r6,sp,120
    a73c:	b80b883a 	mov	r5,r23
    a740:	9809883a 	mov	r4,r19
    a744:	d9c03c15 	stw	r7,240(sp)
    a748:	0010de80 	call	10de8 <__sprint_r>
    a74c:	d9c03c17 	ldw	r7,240(sp)
    a750:	103bd71e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a754:	d8c02017 	ldw	r3,128(sp)
    a758:	dc401f17 	ldw	r17,124(sp)
    a75c:	dd800404 	addi	r22,sp,16
    a760:	003fec06 	br	a714 <__alt_exception_stack_pointer+0xf800a714>
    a764:	9080100c 	andi	r2,r18,64
    a768:	d8002785 	stb	zero,158(sp)
    a76c:	10010e26 	beq	r2,zero,aba8 <___vfprintf_internal_r+0x1908>
    a770:	d9402e17 	ldw	r5,184(sp)
    a774:	d8c02a17 	ldw	r3,168(sp)
    a778:	002d883a 	mov	r22,zero
    a77c:	28800104 	addi	r2,r5,4
    a780:	2cc0000b 	ldhu	r19,0(r5)
    a784:	183fc90e 	bge	r3,zero,a6ac <__alt_exception_stack_pointer+0xf800a6ac>
    a788:	d8802e15 	stw	r2,184(sp)
    a78c:	0039883a 	mov	fp,zero
    a790:	9d84b03a 	or	r2,r19,r22
    a794:	103c1e1e 	bne	r2,zero,9810 <__alt_exception_stack_pointer+0xf8009810>
    a798:	00800044 	movi	r2,1
    a79c:	003e6c06 	br	a150 <__alt_exception_stack_pointer+0xf800a150>
    a7a0:	d9002d17 	ldw	r4,180(sp)
    a7a4:	d9801e04 	addi	r6,sp,120
    a7a8:	b80b883a 	mov	r5,r23
    a7ac:	0010de80 	call	10de8 <__sprint_r>
    a7b0:	103bbf1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a7b4:	d8c02017 	ldw	r3,128(sp)
    a7b8:	da000404 	addi	r8,sp,16
    a7bc:	d9003217 	ldw	r4,200(sp)
    a7c0:	d8802617 	ldw	r2,152(sp)
    a7c4:	d9403317 	ldw	r5,204(sp)
    a7c8:	8123883a 	add	r17,r16,r4
    a7cc:	11400216 	blt	r2,r5,a7d8 <___vfprintf_internal_r+0x1538>
    a7d0:	9100004c 	andi	r4,r18,1
    a7d4:	20000d26 	beq	r4,zero,a80c <___vfprintf_internal_r+0x156c>
    a7d8:	d9003717 	ldw	r4,220(sp)
    a7dc:	d9403417 	ldw	r5,208(sp)
    a7e0:	1907883a 	add	r3,r3,r4
    a7e4:	d9001f17 	ldw	r4,124(sp)
    a7e8:	41400015 	stw	r5,0(r8)
    a7ec:	d9403717 	ldw	r5,220(sp)
    a7f0:	21000044 	addi	r4,r4,1
    a7f4:	d8c02015 	stw	r3,128(sp)
    a7f8:	41400115 	stw	r5,4(r8)
    a7fc:	d9001f15 	stw	r4,124(sp)
    a800:	014001c4 	movi	r5,7
    a804:	2901e816 	blt	r5,r4,afa8 <___vfprintf_internal_r+0x1d08>
    a808:	42000204 	addi	r8,r8,8
    a80c:	d9003317 	ldw	r4,204(sp)
    a810:	8121883a 	add	r16,r16,r4
    a814:	2085c83a 	sub	r2,r4,r2
    a818:	8461c83a 	sub	r16,r16,r17
    a81c:	1400010e 	bge	r2,r16,a824 <___vfprintf_internal_r+0x1584>
    a820:	1021883a 	mov	r16,r2
    a824:	04000a0e 	bge	zero,r16,a850 <___vfprintf_internal_r+0x15b0>
    a828:	d9001f17 	ldw	r4,124(sp)
    a82c:	1c07883a 	add	r3,r3,r16
    a830:	44400015 	stw	r17,0(r8)
    a834:	21000044 	addi	r4,r4,1
    a838:	44000115 	stw	r16,4(r8)
    a83c:	d8c02015 	stw	r3,128(sp)
    a840:	d9001f15 	stw	r4,124(sp)
    a844:	014001c4 	movi	r5,7
    a848:	2901fb16 	blt	r5,r4,b038 <___vfprintf_internal_r+0x1d98>
    a84c:	42000204 	addi	r8,r8,8
    a850:	8001f716 	blt	r16,zero,b030 <___vfprintf_internal_r+0x1d90>
    a854:	1421c83a 	sub	r16,r2,r16
    a858:	043d160e 	bge	zero,r16,9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    a85c:	04400404 	movi	r17,16
    a860:	d8801f17 	ldw	r2,124(sp)
    a864:	8c3efb0e 	bge	r17,r16,a454 <__alt_exception_stack_pointer+0xf800a454>
    a868:	01400074 	movhi	r5,1
    a86c:	295fe884 	addi	r5,r5,32674
    a870:	d9402c15 	stw	r5,176(sp)
    a874:	058001c4 	movi	r22,7
    a878:	dcc02d17 	ldw	r19,180(sp)
    a87c:	00000306 	br	a88c <___vfprintf_internal_r+0x15ec>
    a880:	42000204 	addi	r8,r8,8
    a884:	843ffc04 	addi	r16,r16,-16
    a888:	8c3ef50e 	bge	r17,r16,a460 <__alt_exception_stack_pointer+0xf800a460>
    a88c:	18c00404 	addi	r3,r3,16
    a890:	10800044 	addi	r2,r2,1
    a894:	45000015 	stw	r20,0(r8)
    a898:	44400115 	stw	r17,4(r8)
    a89c:	d8c02015 	stw	r3,128(sp)
    a8a0:	d8801f15 	stw	r2,124(sp)
    a8a4:	b0bff60e 	bge	r22,r2,a880 <__alt_exception_stack_pointer+0xf800a880>
    a8a8:	d9801e04 	addi	r6,sp,120
    a8ac:	b80b883a 	mov	r5,r23
    a8b0:	9809883a 	mov	r4,r19
    a8b4:	0010de80 	call	10de8 <__sprint_r>
    a8b8:	103b7d1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a8bc:	d8c02017 	ldw	r3,128(sp)
    a8c0:	d8801f17 	ldw	r2,124(sp)
    a8c4:	da000404 	addi	r8,sp,16
    a8c8:	003fee06 	br	a884 <__alt_exception_stack_pointer+0xf800a884>
    a8cc:	9088703a 	and	r4,r18,r2
    a8d0:	203eab1e 	bne	r4,zero,a380 <__alt_exception_stack_pointer+0xf800a380>
    a8d4:	dc401f17 	ldw	r17,124(sp)
    a8d8:	40800115 	stw	r2,4(r8)
    a8dc:	44000015 	stw	r16,0(r8)
    a8e0:	8c400044 	addi	r17,r17,1
    a8e4:	d8c02015 	stw	r3,128(sp)
    a8e8:	dc401f15 	stw	r17,124(sp)
    a8ec:	008001c4 	movi	r2,7
    a8f0:	14400e16 	blt	r2,r17,a92c <___vfprintf_internal_r+0x168c>
    a8f4:	45800204 	addi	r22,r8,8
    a8f8:	003eca06 	br	a424 <__alt_exception_stack_pointer+0xf800a424>
    a8fc:	01000074 	movhi	r4,1
    a900:	211fe884 	addi	r4,r4,32674
    a904:	d9002c15 	stw	r4,176(sp)
    a908:	d8802c17 	ldw	r2,176(sp)
    a90c:	1c07883a 	add	r3,r3,r16
    a910:	8c400044 	addi	r17,r17,1
    a914:	b0800015 	stw	r2,0(r22)
    a918:	b4000115 	stw	r16,4(r22)
    a91c:	d8c02015 	stw	r3,128(sp)
    a920:	dc401f15 	stw	r17,124(sp)
    a924:	008001c4 	movi	r2,7
    a928:	147ebd0e 	bge	r2,r17,a420 <__alt_exception_stack_pointer+0xf800a420>
    a92c:	d9002d17 	ldw	r4,180(sp)
    a930:	d9801e04 	addi	r6,sp,120
    a934:	b80b883a 	mov	r5,r23
    a938:	0010de80 	call	10de8 <__sprint_r>
    a93c:	103b5c1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a940:	d8c02017 	ldw	r3,128(sp)
    a944:	dc401f17 	ldw	r17,124(sp)
    a948:	dd800404 	addi	r22,sp,16
    a94c:	003eb506 	br	a424 <__alt_exception_stack_pointer+0xf800a424>
    a950:	d9002d17 	ldw	r4,180(sp)
    a954:	d9801e04 	addi	r6,sp,120
    a958:	b80b883a 	mov	r5,r23
    a95c:	0010de80 	call	10de8 <__sprint_r>
    a960:	103b531e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a964:	d8c02017 	ldw	r3,128(sp)
    a968:	dc401f17 	ldw	r17,124(sp)
    a96c:	da000404 	addi	r8,sp,16
    a970:	003e8d06 	br	a3a8 <__alt_exception_stack_pointer+0xf800a3a8>
    a974:	d9002d17 	ldw	r4,180(sp)
    a978:	d9801e04 	addi	r6,sp,120
    a97c:	b80b883a 	mov	r5,r23
    a980:	0010de80 	call	10de8 <__sprint_r>
    a984:	103b4a1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a988:	d8c02017 	ldw	r3,128(sp)
    a98c:	dc401f17 	ldw	r17,124(sp)
    a990:	dd800404 	addi	r22,sp,16
    a994:	003e8f06 	br	a3d4 <__alt_exception_stack_pointer+0xf800a3d4>
    a998:	0027883a 	mov	r19,zero
    a99c:	003f4a06 	br	a6c8 <__alt_exception_stack_pointer+0xf800a6c8>
    a9a0:	d9002d17 	ldw	r4,180(sp)
    a9a4:	d9801e04 	addi	r6,sp,120
    a9a8:	b80b883a 	mov	r5,r23
    a9ac:	0010de80 	call	10de8 <__sprint_r>
    a9b0:	103b3f1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    a9b4:	d8c02017 	ldw	r3,128(sp)
    a9b8:	da000404 	addi	r8,sp,16
    a9bc:	003c7b06 	br	9bac <__alt_exception_stack_pointer+0xf8009bac>
    a9c0:	d9402a17 	ldw	r5,168(sp)
    a9c4:	04e7c83a 	sub	r19,zero,r19
    a9c8:	07000b44 	movi	fp,45
    a9cc:	9804c03a 	cmpne	r2,r19,zero
    a9d0:	05adc83a 	sub	r22,zero,r22
    a9d4:	df002785 	stb	fp,158(sp)
    a9d8:	b0adc83a 	sub	r22,r22,r2
    a9dc:	28017b16 	blt	r5,zero,afcc <___vfprintf_internal_r+0x1d2c>
    a9e0:	00bfdfc4 	movi	r2,-129
    a9e4:	90a4703a 	and	r18,r18,r2
    a9e8:	003b8906 	br	9810 <__alt_exception_stack_pointer+0xf8009810>
    a9ec:	d9003617 	ldw	r4,216(sp)
    a9f0:	d9403817 	ldw	r5,224(sp)
    a9f4:	da003d15 	stw	r8,244(sp)
    a9f8:	00109d00 	call	109d0 <__fpclassifyd>
    a9fc:	da003d17 	ldw	r8,244(sp)
    aa00:	1000f026 	beq	r2,zero,adc4 <___vfprintf_internal_r+0x1b24>
    aa04:	d9002a17 	ldw	r4,168(sp)
    aa08:	05bff7c4 	movi	r22,-33
    aa0c:	00bfffc4 	movi	r2,-1
    aa10:	8dac703a 	and	r22,r17,r22
    aa14:	20820026 	beq	r4,r2,b218 <___vfprintf_internal_r+0x1f78>
    aa18:	008011c4 	movi	r2,71
    aa1c:	b081f726 	beq	r22,r2,b1fc <___vfprintf_internal_r+0x1f5c>
    aa20:	d9003817 	ldw	r4,224(sp)
    aa24:	90c04014 	ori	r3,r18,256
    aa28:	d8c02c15 	stw	r3,176(sp)
    aa2c:	20021516 	blt	r4,zero,b284 <___vfprintf_internal_r+0x1fe4>
    aa30:	dcc03817 	ldw	r19,224(sp)
    aa34:	d8002905 	stb	zero,164(sp)
    aa38:	00801984 	movi	r2,102
    aa3c:	8881f926 	beq	r17,r2,b224 <___vfprintf_internal_r+0x1f84>
    aa40:	00801184 	movi	r2,70
    aa44:	88821c26 	beq	r17,r2,b2b8 <___vfprintf_internal_r+0x2018>
    aa48:	00801144 	movi	r2,69
    aa4c:	b081ef26 	beq	r22,r2,b20c <___vfprintf_internal_r+0x1f6c>
    aa50:	d8c02a17 	ldw	r3,168(sp)
    aa54:	d8802104 	addi	r2,sp,132
    aa58:	d8800315 	stw	r2,12(sp)
    aa5c:	d9403617 	ldw	r5,216(sp)
    aa60:	d8802504 	addi	r2,sp,148
    aa64:	d9002d17 	ldw	r4,180(sp)
    aa68:	d8800215 	stw	r2,8(sp)
    aa6c:	d8802604 	addi	r2,sp,152
    aa70:	d8c00015 	stw	r3,0(sp)
    aa74:	d8800115 	stw	r2,4(sp)
    aa78:	01c00084 	movi	r7,2
    aa7c:	980d883a 	mov	r6,r19
    aa80:	d8c03c15 	stw	r3,240(sp)
    aa84:	da003d15 	stw	r8,244(sp)
    aa88:	000b9d00 	call	b9d0 <_dtoa_r>
    aa8c:	1021883a 	mov	r16,r2
    aa90:	008019c4 	movi	r2,103
    aa94:	d8c03c17 	ldw	r3,240(sp)
    aa98:	da003d17 	ldw	r8,244(sp)
    aa9c:	88817126 	beq	r17,r2,b064 <___vfprintf_internal_r+0x1dc4>
    aaa0:	008011c4 	movi	r2,71
    aaa4:	88829126 	beq	r17,r2,b4ec <___vfprintf_internal_r+0x224c>
    aaa8:	80f9883a 	add	fp,r16,r3
    aaac:	d9003617 	ldw	r4,216(sp)
    aab0:	000d883a 	mov	r6,zero
    aab4:	000f883a 	mov	r7,zero
    aab8:	980b883a 	mov	r5,r19
    aabc:	da003d15 	stw	r8,244(sp)
    aac0:	0006e280 	call	6e28 <__eqdf2>
    aac4:	da003d17 	ldw	r8,244(sp)
    aac8:	10018d26 	beq	r2,zero,b100 <___vfprintf_internal_r+0x1e60>
    aacc:	d8802117 	ldw	r2,132(sp)
    aad0:	1700062e 	bgeu	r2,fp,aaec <___vfprintf_internal_r+0x184c>
    aad4:	01000c04 	movi	r4,48
    aad8:	10c00044 	addi	r3,r2,1
    aadc:	d8c02115 	stw	r3,132(sp)
    aae0:	11000005 	stb	r4,0(r2)
    aae4:	d8802117 	ldw	r2,132(sp)
    aae8:	173ffb36 	bltu	r2,fp,aad8 <__alt_exception_stack_pointer+0xf800aad8>
    aaec:	1405c83a 	sub	r2,r2,r16
    aaf0:	d8803315 	stw	r2,204(sp)
    aaf4:	008011c4 	movi	r2,71
    aaf8:	b0817626 	beq	r22,r2,b0d4 <___vfprintf_internal_r+0x1e34>
    aafc:	00801944 	movi	r2,101
    ab00:	1442800e 	bge	r2,r17,b504 <___vfprintf_internal_r+0x2264>
    ab04:	d8c02617 	ldw	r3,152(sp)
    ab08:	00801984 	movi	r2,102
    ab0c:	d8c03215 	stw	r3,200(sp)
    ab10:	8881fe26 	beq	r17,r2,b30c <___vfprintf_internal_r+0x206c>
    ab14:	d8c03217 	ldw	r3,200(sp)
    ab18:	d9003317 	ldw	r4,204(sp)
    ab1c:	1901dd16 	blt	r3,r4,b294 <___vfprintf_internal_r+0x1ff4>
    ab20:	9480004c 	andi	r18,r18,1
    ab24:	90022b1e 	bne	r18,zero,b3d4 <___vfprintf_internal_r+0x2134>
    ab28:	1805883a 	mov	r2,r3
    ab2c:	18028316 	blt	r3,zero,b53c <___vfprintf_internal_r+0x229c>
    ab30:	d8c03217 	ldw	r3,200(sp)
    ab34:	044019c4 	movi	r17,103
    ab38:	d8c02b15 	stw	r3,172(sp)
    ab3c:	df002907 	ldb	fp,164(sp)
    ab40:	e001531e 	bne	fp,zero,b090 <___vfprintf_internal_r+0x1df0>
    ab44:	df002783 	ldbu	fp,158(sp)
    ab48:	d8802915 	stw	r2,164(sp)
    ab4c:	dc802c17 	ldw	r18,176(sp)
    ab50:	d8002a15 	stw	zero,168(sp)
    ab54:	003baf06 	br	9a14 <__alt_exception_stack_pointer+0xf8009a14>
    ab58:	d8c02e17 	ldw	r3,184(sp)
    ab5c:	d9002e17 	ldw	r4,184(sp)
    ab60:	d9402e17 	ldw	r5,184(sp)
    ab64:	18c00017 	ldw	r3,0(r3)
    ab68:	21000117 	ldw	r4,4(r4)
    ab6c:	29400204 	addi	r5,r5,8
    ab70:	d8c03615 	stw	r3,216(sp)
    ab74:	d9003815 	stw	r4,224(sp)
    ab78:	d9402e15 	stw	r5,184(sp)
    ab7c:	003b5006 	br	98c0 <__alt_exception_stack_pointer+0xf80098c0>
    ab80:	ac400007 	ldb	r17,0(r21)
    ab84:	003a2806 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    ab88:	9080100c 	andi	r2,r18,64
    ab8c:	1000a826 	beq	r2,zero,ae30 <___vfprintf_internal_r+0x1b90>
    ab90:	d8c02e17 	ldw	r3,184(sp)
    ab94:	002d883a 	mov	r22,zero
    ab98:	1cc0000b 	ldhu	r19,0(r3)
    ab9c:	18c00104 	addi	r3,r3,4
    aba0:	d8c02e15 	stw	r3,184(sp)
    aba4:	003caf06 	br	9e64 <__alt_exception_stack_pointer+0xf8009e64>
    aba8:	d9002e17 	ldw	r4,184(sp)
    abac:	d9402a17 	ldw	r5,168(sp)
    abb0:	002d883a 	mov	r22,zero
    abb4:	20800104 	addi	r2,r4,4
    abb8:	24c00017 	ldw	r19,0(r4)
    abbc:	283ebb0e 	bge	r5,zero,a6ac <__alt_exception_stack_pointer+0xf800a6ac>
    abc0:	003ef106 	br	a788 <__alt_exception_stack_pointer+0xf800a788>
    abc4:	9080040c 	andi	r2,r18,16
    abc8:	1000921e 	bne	r2,zero,ae14 <___vfprintf_internal_r+0x1b74>
    abcc:	9480100c 	andi	r18,r18,64
    abd0:	90013926 	beq	r18,zero,b0b8 <___vfprintf_internal_r+0x1e18>
    abd4:	d9402e17 	ldw	r5,184(sp)
    abd8:	d8c02f17 	ldw	r3,188(sp)
    abdc:	28800017 	ldw	r2,0(r5)
    abe0:	29400104 	addi	r5,r5,4
    abe4:	d9402e15 	stw	r5,184(sp)
    abe8:	10c0000d 	sth	r3,0(r2)
    abec:	0039e406 	br	9380 <__alt_exception_stack_pointer+0xf8009380>
    abf0:	9080100c 	andi	r2,r18,64
    abf4:	10008026 	beq	r2,zero,adf8 <___vfprintf_internal_r+0x1b58>
    abf8:	d8802e17 	ldw	r2,184(sp)
    abfc:	14c0000f 	ldh	r19,0(r2)
    ac00:	10800104 	addi	r2,r2,4
    ac04:	d8802e15 	stw	r2,184(sp)
    ac08:	982dd7fa 	srai	r22,r19,31
    ac0c:	b005883a 	mov	r2,r22
    ac10:	003af706 	br	97f0 <__alt_exception_stack_pointer+0xf80097f0>
    ac14:	9080100c 	andi	r2,r18,64
    ac18:	d8002785 	stb	zero,158(sp)
    ac1c:	10008a1e 	bne	r2,zero,ae48 <___vfprintf_internal_r+0x1ba8>
    ac20:	d9002e17 	ldw	r4,184(sp)
    ac24:	d9402a17 	ldw	r5,168(sp)
    ac28:	002d883a 	mov	r22,zero
    ac2c:	20800104 	addi	r2,r4,4
    ac30:	24c00017 	ldw	r19,0(r4)
    ac34:	283e4b0e 	bge	r5,zero,a564 <__alt_exception_stack_pointer+0xf800a564>
    ac38:	9d86b03a 	or	r3,r19,r22
    ac3c:	d8802e15 	stw	r2,184(sp)
    ac40:	183e4c1e 	bne	r3,zero,a574 <__alt_exception_stack_pointer+0xf800a574>
    ac44:	0039883a 	mov	fp,zero
    ac48:	0005883a 	mov	r2,zero
    ac4c:	003d4006 	br	a150 <__alt_exception_stack_pointer+0xf800a150>
    ac50:	01400074 	movhi	r5,1
    ac54:	295fe884 	addi	r5,r5,32674
    ac58:	d9402c15 	stw	r5,176(sp)
    ac5c:	d9402c17 	ldw	r5,176(sp)
    ac60:	1c47883a 	add	r3,r3,r17
    ac64:	10800044 	addi	r2,r2,1
    ac68:	41400015 	stw	r5,0(r8)
    ac6c:	44400115 	stw	r17,4(r8)
    ac70:	d8c02015 	stw	r3,128(sp)
    ac74:	d8801f15 	stw	r2,124(sp)
    ac78:	010001c4 	movi	r4,7
    ac7c:	20bec816 	blt	r4,r2,a7a0 <__alt_exception_stack_pointer+0xf800a7a0>
    ac80:	42000204 	addi	r8,r8,8
    ac84:	003ecd06 	br	a7bc <__alt_exception_stack_pointer+0xf800a7bc>
    ac88:	d9002a17 	ldw	r4,168(sp)
    ac8c:	d8002785 	stb	zero,158(sp)
    ac90:	203d2d16 	blt	r4,zero,a148 <__alt_exception_stack_pointer+0xf800a148>
    ac94:	00bfdfc4 	movi	r2,-129
    ac98:	90a4703a 	and	r18,r18,r2
    ac9c:	003a6106 	br	9624 <__alt_exception_stack_pointer+0xf8009624>
    aca0:	01000074 	movhi	r4,1
    aca4:	211fe884 	addi	r4,r4,32674
    aca8:	d9002c15 	stw	r4,176(sp)
    acac:	003bea06 	br	9c58 <__alt_exception_stack_pointer+0xf8009c58>
    acb0:	d9002d17 	ldw	r4,180(sp)
    acb4:	d9801e04 	addi	r6,sp,120
    acb8:	b80b883a 	mov	r5,r23
    acbc:	0010de80 	call	10de8 <__sprint_r>
    acc0:	103a7b1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    acc4:	d8c02017 	ldw	r3,128(sp)
    acc8:	da000404 	addi	r8,sp,16
    accc:	003d4106 	br	a1d4 <__alt_exception_stack_pointer+0xf800a1d4>
    acd0:	d8801f17 	ldw	r2,124(sp)
    acd4:	01400074 	movhi	r5,1
    acd8:	01000044 	movi	r4,1
    acdc:	18c00044 	addi	r3,r3,1
    ace0:	10800044 	addi	r2,r2,1
    ace4:	295fe804 	addi	r5,r5,32672
    ace8:	41000115 	stw	r4,4(r8)
    acec:	41400015 	stw	r5,0(r8)
    acf0:	d8c02015 	stw	r3,128(sp)
    acf4:	d8801f15 	stw	r2,124(sp)
    acf8:	010001c4 	movi	r4,7
    acfc:	20805c16 	blt	r4,r2,ae70 <___vfprintf_internal_r+0x1bd0>
    ad00:	42000204 	addi	r8,r8,8
    ad04:	8800041e 	bne	r17,zero,ad18 <___vfprintf_internal_r+0x1a78>
    ad08:	d8803317 	ldw	r2,204(sp)
    ad0c:	1000021e 	bne	r2,zero,ad18 <___vfprintf_internal_r+0x1a78>
    ad10:	9080004c 	andi	r2,r18,1
    ad14:	103be726 	beq	r2,zero,9cb4 <__alt_exception_stack_pointer+0xf8009cb4>
    ad18:	d9003717 	ldw	r4,220(sp)
    ad1c:	d8801f17 	ldw	r2,124(sp)
    ad20:	d9403417 	ldw	r5,208(sp)
    ad24:	20c7883a 	add	r3,r4,r3
    ad28:	10800044 	addi	r2,r2,1
    ad2c:	41000115 	stw	r4,4(r8)
    ad30:	41400015 	stw	r5,0(r8)
    ad34:	d8c02015 	stw	r3,128(sp)
    ad38:	d8801f15 	stw	r2,124(sp)
    ad3c:	010001c4 	movi	r4,7
    ad40:	20812116 	blt	r4,r2,b1c8 <___vfprintf_internal_r+0x1f28>
    ad44:	42000204 	addi	r8,r8,8
    ad48:	0463c83a 	sub	r17,zero,r17
    ad4c:	0440730e 	bge	zero,r17,af1c <___vfprintf_internal_r+0x1c7c>
    ad50:	05800404 	movi	r22,16
    ad54:	b440860e 	bge	r22,r17,af70 <___vfprintf_internal_r+0x1cd0>
    ad58:	01400074 	movhi	r5,1
    ad5c:	295fe884 	addi	r5,r5,32674
    ad60:	d9402c15 	stw	r5,176(sp)
    ad64:	070001c4 	movi	fp,7
    ad68:	dcc02d17 	ldw	r19,180(sp)
    ad6c:	00000306 	br	ad7c <___vfprintf_internal_r+0x1adc>
    ad70:	42000204 	addi	r8,r8,8
    ad74:	8c7ffc04 	addi	r17,r17,-16
    ad78:	b440800e 	bge	r22,r17,af7c <___vfprintf_internal_r+0x1cdc>
    ad7c:	18c00404 	addi	r3,r3,16
    ad80:	10800044 	addi	r2,r2,1
    ad84:	45000015 	stw	r20,0(r8)
    ad88:	45800115 	stw	r22,4(r8)
    ad8c:	d8c02015 	stw	r3,128(sp)
    ad90:	d8801f15 	stw	r2,124(sp)
    ad94:	e0bff60e 	bge	fp,r2,ad70 <__alt_exception_stack_pointer+0xf800ad70>
    ad98:	d9801e04 	addi	r6,sp,120
    ad9c:	b80b883a 	mov	r5,r23
    ada0:	9809883a 	mov	r4,r19
    ada4:	0010de80 	call	10de8 <__sprint_r>
    ada8:	103a411e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    adac:	d8c02017 	ldw	r3,128(sp)
    adb0:	d8801f17 	ldw	r2,124(sp)
    adb4:	da000404 	addi	r8,sp,16
    adb8:	003fee06 	br	ad74 <__alt_exception_stack_pointer+0xf800ad74>
    adbc:	00bfffc4 	movi	r2,-1
    adc0:	003a3f06 	br	96c0 <__alt_exception_stack_pointer+0xf80096c0>
    adc4:	008011c4 	movi	r2,71
    adc8:	1440b816 	blt	r2,r17,b0ac <___vfprintf_internal_r+0x1e0c>
    adcc:	04000074 	movhi	r16,1
    add0:	841fda04 	addi	r16,r16,32616
    add4:	00c000c4 	movi	r3,3
    add8:	00bfdfc4 	movi	r2,-129
    addc:	d8c02915 	stw	r3,164(sp)
    ade0:	90a4703a 	and	r18,r18,r2
    ade4:	df002783 	ldbu	fp,158(sp)
    ade8:	d8c02b15 	stw	r3,172(sp)
    adec:	d8002a15 	stw	zero,168(sp)
    adf0:	d8003215 	stw	zero,200(sp)
    adf4:	003b0706 	br	9a14 <__alt_exception_stack_pointer+0xf8009a14>
    adf8:	d8c02e17 	ldw	r3,184(sp)
    adfc:	1cc00017 	ldw	r19,0(r3)
    ae00:	18c00104 	addi	r3,r3,4
    ae04:	d8c02e15 	stw	r3,184(sp)
    ae08:	982dd7fa 	srai	r22,r19,31
    ae0c:	b005883a 	mov	r2,r22
    ae10:	003a7706 	br	97f0 <__alt_exception_stack_pointer+0xf80097f0>
    ae14:	d8c02e17 	ldw	r3,184(sp)
    ae18:	d9002f17 	ldw	r4,188(sp)
    ae1c:	18800017 	ldw	r2,0(r3)
    ae20:	18c00104 	addi	r3,r3,4
    ae24:	d8c02e15 	stw	r3,184(sp)
    ae28:	11000015 	stw	r4,0(r2)
    ae2c:	00395406 	br	9380 <__alt_exception_stack_pointer+0xf8009380>
    ae30:	d9002e17 	ldw	r4,184(sp)
    ae34:	002d883a 	mov	r22,zero
    ae38:	24c00017 	ldw	r19,0(r4)
    ae3c:	21000104 	addi	r4,r4,4
    ae40:	d9002e15 	stw	r4,184(sp)
    ae44:	003c0706 	br	9e64 <__alt_exception_stack_pointer+0xf8009e64>
    ae48:	d9402e17 	ldw	r5,184(sp)
    ae4c:	d8c02a17 	ldw	r3,168(sp)
    ae50:	002d883a 	mov	r22,zero
    ae54:	28800104 	addi	r2,r5,4
    ae58:	2cc0000b 	ldhu	r19,0(r5)
    ae5c:	183dc10e 	bge	r3,zero,a564 <__alt_exception_stack_pointer+0xf800a564>
    ae60:	003f7506 	br	ac38 <__alt_exception_stack_pointer+0xf800ac38>
    ae64:	04000074 	movhi	r16,1
    ae68:	841fd804 	addi	r16,r16,32608
    ae6c:	003aa706 	br	990c <__alt_exception_stack_pointer+0xf800990c>
    ae70:	d9002d17 	ldw	r4,180(sp)
    ae74:	d9801e04 	addi	r6,sp,120
    ae78:	b80b883a 	mov	r5,r23
    ae7c:	0010de80 	call	10de8 <__sprint_r>
    ae80:	103a0b1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    ae84:	dc402617 	ldw	r17,152(sp)
    ae88:	d8c02017 	ldw	r3,128(sp)
    ae8c:	da000404 	addi	r8,sp,16
    ae90:	003f9c06 	br	ad04 <__alt_exception_stack_pointer+0xf800ad04>
    ae94:	ac400043 	ldbu	r17,1(r21)
    ae98:	84000814 	ori	r16,r16,32
    ae9c:	ad400044 	addi	r21,r21,1
    aea0:	8c403fcc 	andi	r17,r17,255
    aea4:	8c40201c 	xori	r17,r17,128
    aea8:	8c7fe004 	addi	r17,r17,-128
    aeac:	00395e06 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    aeb0:	d8c02e15 	stw	r3,184(sp)
    aeb4:	0039883a 	mov	fp,zero
    aeb8:	003e3506 	br	a790 <__alt_exception_stack_pointer+0xf800a790>
    aebc:	d9002d17 	ldw	r4,180(sp)
    aec0:	d9801e04 	addi	r6,sp,120
    aec4:	b80b883a 	mov	r5,r23
    aec8:	0010de80 	call	10de8 <__sprint_r>
    aecc:	1039f81e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    aed0:	d8c02017 	ldw	r3,128(sp)
    aed4:	da000404 	addi	r8,sp,16
    aed8:	003cd006 	br	a21c <__alt_exception_stack_pointer+0xf800a21c>
    aedc:	8009883a 	mov	r4,r16
    aee0:	df003d15 	stw	fp,244(sp)
    aee4:	00092000 	call	9200 <strlen>
    aee8:	d8802b15 	stw	r2,172(sp)
    aeec:	da003d17 	ldw	r8,244(sp)
    aef0:	103c200e 	bge	r2,zero,9f74 <__alt_exception_stack_pointer+0xf8009f74>
    aef4:	0005883a 	mov	r2,zero
    aef8:	003c1e06 	br	9f74 <__alt_exception_stack_pointer+0xf8009f74>
    aefc:	d9002d17 	ldw	r4,180(sp)
    af00:	d9801e04 	addi	r6,sp,120
    af04:	b80b883a 	mov	r5,r23
    af08:	0010de80 	call	10de8 <__sprint_r>
    af0c:	1039e81e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    af10:	d8c02017 	ldw	r3,128(sp)
    af14:	d8801f17 	ldw	r2,124(sp)
    af18:	da000404 	addi	r8,sp,16
    af1c:	d9403317 	ldw	r5,204(sp)
    af20:	10800044 	addi	r2,r2,1
    af24:	44000015 	stw	r16,0(r8)
    af28:	28c7883a 	add	r3,r5,r3
    af2c:	003b5b06 	br	9c9c <__alt_exception_stack_pointer+0xf8009c9c>
    af30:	01000074 	movhi	r4,1
    af34:	211fec84 	addi	r4,r4,32690
    af38:	d9003515 	stw	r4,212(sp)
    af3c:	003af206 	br	9b08 <__alt_exception_stack_pointer+0xf8009b08>
    af40:	013fffc4 	movi	r4,-1
    af44:	003a0806 	br	9768 <__alt_exception_stack_pointer+0xf8009768>
    af48:	0023883a 	mov	r17,zero
    af4c:	003d9d06 	br	a5c4 <__alt_exception_stack_pointer+0xf800a5c4>
    af50:	d9002d17 	ldw	r4,180(sp)
    af54:	d9801e04 	addi	r6,sp,120
    af58:	b80b883a 	mov	r5,r23
    af5c:	0010de80 	call	10de8 <__sprint_r>
    af60:	1039d31e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    af64:	d8c02017 	ldw	r3,128(sp)
    af68:	da000404 	addi	r8,sp,16
    af6c:	003d9406 	br	a5c0 <__alt_exception_stack_pointer+0xf800a5c0>
    af70:	01000074 	movhi	r4,1
    af74:	211fe884 	addi	r4,r4,32674
    af78:	d9002c15 	stw	r4,176(sp)
    af7c:	d9002c17 	ldw	r4,176(sp)
    af80:	1c47883a 	add	r3,r3,r17
    af84:	10800044 	addi	r2,r2,1
    af88:	41000015 	stw	r4,0(r8)
    af8c:	44400115 	stw	r17,4(r8)
    af90:	d8c02015 	stw	r3,128(sp)
    af94:	d8801f15 	stw	r2,124(sp)
    af98:	010001c4 	movi	r4,7
    af9c:	20bfd716 	blt	r4,r2,aefc <__alt_exception_stack_pointer+0xf800aefc>
    afa0:	42000204 	addi	r8,r8,8
    afa4:	003fdd06 	br	af1c <__alt_exception_stack_pointer+0xf800af1c>
    afa8:	d9002d17 	ldw	r4,180(sp)
    afac:	d9801e04 	addi	r6,sp,120
    afb0:	b80b883a 	mov	r5,r23
    afb4:	0010de80 	call	10de8 <__sprint_r>
    afb8:	1039bd1e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    afbc:	d8802617 	ldw	r2,152(sp)
    afc0:	d8c02017 	ldw	r3,128(sp)
    afc4:	da000404 	addi	r8,sp,16
    afc8:	003e1006 	br	a80c <__alt_exception_stack_pointer+0xf800a80c>
    afcc:	00800044 	movi	r2,1
    afd0:	10803fcc 	andi	r2,r2,255
    afd4:	00c00044 	movi	r3,1
    afd8:	10fa0d26 	beq	r2,r3,9810 <__alt_exception_stack_pointer+0xf8009810>
    afdc:	00c00084 	movi	r3,2
    afe0:	10fbaf26 	beq	r2,r3,9ea0 <__alt_exception_stack_pointer+0xf8009ea0>
    afe4:	003a6d06 	br	999c <__alt_exception_stack_pointer+0xf800999c>
    afe8:	01000074 	movhi	r4,1
    afec:	211fec84 	addi	r4,r4,32690
    aff0:	d9003515 	stw	r4,212(sp)
    aff4:	003b5406 	br	9d48 <__alt_exception_stack_pointer+0xf8009d48>
    aff8:	d8802a17 	ldw	r2,168(sp)
    affc:	00c00184 	movi	r3,6
    b000:	1880012e 	bgeu	r3,r2,b008 <___vfprintf_internal_r+0x1d68>
    b004:	1805883a 	mov	r2,r3
    b008:	d8802b15 	stw	r2,172(sp)
    b00c:	1000ef16 	blt	r2,zero,b3cc <___vfprintf_internal_r+0x212c>
    b010:	04000074 	movhi	r16,1
    b014:	d8802915 	stw	r2,164(sp)
    b018:	dcc02e15 	stw	r19,184(sp)
    b01c:	d8002a15 	stw	zero,168(sp)
    b020:	d8003215 	stw	zero,200(sp)
    b024:	841fe604 	addi	r16,r16,32664
    b028:	0039883a 	mov	fp,zero
    b02c:	003a8006 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    b030:	0021883a 	mov	r16,zero
    b034:	003e0706 	br	a854 <__alt_exception_stack_pointer+0xf800a854>
    b038:	d9002d17 	ldw	r4,180(sp)
    b03c:	d9801e04 	addi	r6,sp,120
    b040:	b80b883a 	mov	r5,r23
    b044:	0010de80 	call	10de8 <__sprint_r>
    b048:	1039991e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    b04c:	d8802617 	ldw	r2,152(sp)
    b050:	d9403317 	ldw	r5,204(sp)
    b054:	d8c02017 	ldw	r3,128(sp)
    b058:	da000404 	addi	r8,sp,16
    b05c:	2885c83a 	sub	r2,r5,r2
    b060:	003dfb06 	br	a850 <__alt_exception_stack_pointer+0xf800a850>
    b064:	9080004c 	andi	r2,r18,1
    b068:	103e8f1e 	bne	r2,zero,aaa8 <__alt_exception_stack_pointer+0xf800aaa8>
    b06c:	d8802117 	ldw	r2,132(sp)
    b070:	003e9e06 	br	aaec <__alt_exception_stack_pointer+0xf800aaec>
    b074:	1025883a 	mov	r18,r2
    b078:	0039883a 	mov	fp,zero
    b07c:	00800084 	movi	r2,2
    b080:	003fd306 	br	afd0 <__alt_exception_stack_pointer+0xf800afd0>
    b084:	07000b44 	movi	fp,45
    b088:	df002785 	stb	fp,158(sp)
    b08c:	003a1b06 	br	98fc <__alt_exception_stack_pointer+0xf80098fc>
    b090:	00c00b44 	movi	r3,45
    b094:	d8c02785 	stb	r3,158(sp)
    b098:	d8802915 	stw	r2,164(sp)
    b09c:	dc802c17 	ldw	r18,176(sp)
    b0a0:	d8002a15 	stw	zero,168(sp)
    b0a4:	07000b44 	movi	fp,45
    b0a8:	003a5e06 	br	9a24 <__alt_exception_stack_pointer+0xf8009a24>
    b0ac:	04000074 	movhi	r16,1
    b0b0:	841fdb04 	addi	r16,r16,32620
    b0b4:	003f4706 	br	add4 <__alt_exception_stack_pointer+0xf800add4>
    b0b8:	d9002e17 	ldw	r4,184(sp)
    b0bc:	d9402f17 	ldw	r5,188(sp)
    b0c0:	20800017 	ldw	r2,0(r4)
    b0c4:	21000104 	addi	r4,r4,4
    b0c8:	d9002e15 	stw	r4,184(sp)
    b0cc:	11400015 	stw	r5,0(r2)
    b0d0:	0038ab06 	br	9380 <__alt_exception_stack_pointer+0xf8009380>
    b0d4:	dd802617 	ldw	r22,152(sp)
    b0d8:	00bfff44 	movi	r2,-3
    b0dc:	b0801c16 	blt	r22,r2,b150 <___vfprintf_internal_r+0x1eb0>
    b0e0:	d9402a17 	ldw	r5,168(sp)
    b0e4:	2d801a16 	blt	r5,r22,b150 <___vfprintf_internal_r+0x1eb0>
    b0e8:	dd803215 	stw	r22,200(sp)
    b0ec:	003e8906 	br	ab14 <__alt_exception_stack_pointer+0xf800ab14>
    b0f0:	01000074 	movhi	r4,1
    b0f4:	211fe884 	addi	r4,r4,32674
    b0f8:	d9002c15 	stw	r4,176(sp)
    b0fc:	003c9106 	br	a344 <__alt_exception_stack_pointer+0xf800a344>
    b100:	e005883a 	mov	r2,fp
    b104:	003e7906 	br	aaec <__alt_exception_stack_pointer+0xf800aaec>
    b108:	d9002a17 	ldw	r4,168(sp)
    b10c:	df002783 	ldbu	fp,158(sp)
    b110:	dcc02e15 	stw	r19,184(sp)
    b114:	d9002915 	stw	r4,164(sp)
    b118:	d9002b15 	stw	r4,172(sp)
    b11c:	d8002a15 	stw	zero,168(sp)
    b120:	d8003215 	stw	zero,200(sp)
    b124:	003a3b06 	br	9a14 <__alt_exception_stack_pointer+0xf8009a14>
    b128:	9080004c 	andi	r2,r18,1
    b12c:	0039883a 	mov	fp,zero
    b130:	10000426 	beq	r2,zero,b144 <___vfprintf_internal_r+0x1ea4>
    b134:	00800c04 	movi	r2,48
    b138:	dc001dc4 	addi	r16,sp,119
    b13c:	d8801dc5 	stb	r2,119(sp)
    b140:	003b6406 	br	9ed4 <__alt_exception_stack_pointer+0xf8009ed4>
    b144:	d8002b15 	stw	zero,172(sp)
    b148:	dc001e04 	addi	r16,sp,120
    b14c:	003a2b06 	br	99fc <__alt_exception_stack_pointer+0xf80099fc>
    b150:	8c7fff84 	addi	r17,r17,-2
    b154:	b5bfffc4 	addi	r22,r22,-1
    b158:	dd802615 	stw	r22,152(sp)
    b15c:	dc4022c5 	stb	r17,139(sp)
    b160:	b000bf16 	blt	r22,zero,b460 <___vfprintf_internal_r+0x21c0>
    b164:	00800ac4 	movi	r2,43
    b168:	d8802305 	stb	r2,140(sp)
    b16c:	00800244 	movi	r2,9
    b170:	15807016 	blt	r2,r22,b334 <___vfprintf_internal_r+0x2094>
    b174:	00800c04 	movi	r2,48
    b178:	b5800c04 	addi	r22,r22,48
    b17c:	d8802345 	stb	r2,141(sp)
    b180:	dd802385 	stb	r22,142(sp)
    b184:	d88023c4 	addi	r2,sp,143
    b188:	df0022c4 	addi	fp,sp,139
    b18c:	d8c03317 	ldw	r3,204(sp)
    b190:	1739c83a 	sub	fp,r2,fp
    b194:	d9003317 	ldw	r4,204(sp)
    b198:	e0c7883a 	add	r3,fp,r3
    b19c:	df003a15 	stw	fp,232(sp)
    b1a0:	d8c02b15 	stw	r3,172(sp)
    b1a4:	00800044 	movi	r2,1
    b1a8:	1100b30e 	bge	r2,r4,b478 <___vfprintf_internal_r+0x21d8>
    b1ac:	d8c02b17 	ldw	r3,172(sp)
    b1b0:	18c00044 	addi	r3,r3,1
    b1b4:	d8c02b15 	stw	r3,172(sp)
    b1b8:	1805883a 	mov	r2,r3
    b1bc:	1800ac16 	blt	r3,zero,b470 <___vfprintf_internal_r+0x21d0>
    b1c0:	d8003215 	stw	zero,200(sp)
    b1c4:	003e5d06 	br	ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b1c8:	d9002d17 	ldw	r4,180(sp)
    b1cc:	d9801e04 	addi	r6,sp,120
    b1d0:	b80b883a 	mov	r5,r23
    b1d4:	0010de80 	call	10de8 <__sprint_r>
    b1d8:	1039351e 	bne	r2,zero,96b0 <__alt_exception_stack_pointer+0xf80096b0>
    b1dc:	dc402617 	ldw	r17,152(sp)
    b1e0:	d8c02017 	ldw	r3,128(sp)
    b1e4:	d8801f17 	ldw	r2,124(sp)
    b1e8:	da000404 	addi	r8,sp,16
    b1ec:	003ed606 	br	ad48 <__alt_exception_stack_pointer+0xf800ad48>
    b1f0:	182b883a 	mov	r21,r3
    b1f4:	d8002a15 	stw	zero,168(sp)
    b1f8:	00388c06 	br	942c <__alt_exception_stack_pointer+0xf800942c>
    b1fc:	d8802a17 	ldw	r2,168(sp)
    b200:	103e071e 	bne	r2,zero,aa20 <__alt_exception_stack_pointer+0xf800aa20>
    b204:	dc002a15 	stw	r16,168(sp)
    b208:	003e0506 	br	aa20 <__alt_exception_stack_pointer+0xf800aa20>
    b20c:	d9002a17 	ldw	r4,168(sp)
    b210:	20c00044 	addi	r3,r4,1
    b214:	003e0f06 	br	aa54 <__alt_exception_stack_pointer+0xf800aa54>
    b218:	01400184 	movi	r5,6
    b21c:	d9402a15 	stw	r5,168(sp)
    b220:	003dff06 	br	aa20 <__alt_exception_stack_pointer+0xf800aa20>
    b224:	d8802104 	addi	r2,sp,132
    b228:	d8800315 	stw	r2,12(sp)
    b22c:	d8802504 	addi	r2,sp,148
    b230:	d8800215 	stw	r2,8(sp)
    b234:	d8802604 	addi	r2,sp,152
    b238:	d8800115 	stw	r2,4(sp)
    b23c:	d8802a17 	ldw	r2,168(sp)
    b240:	d9403617 	ldw	r5,216(sp)
    b244:	d9002d17 	ldw	r4,180(sp)
    b248:	d8800015 	stw	r2,0(sp)
    b24c:	01c000c4 	movi	r7,3
    b250:	980d883a 	mov	r6,r19
    b254:	da003d15 	stw	r8,244(sp)
    b258:	000b9d00 	call	b9d0 <_dtoa_r>
    b25c:	d8c02a17 	ldw	r3,168(sp)
    b260:	da003d17 	ldw	r8,244(sp)
    b264:	1021883a 	mov	r16,r2
    b268:	10f9883a 	add	fp,r2,r3
    b26c:	81000007 	ldb	r4,0(r16)
    b270:	00800c04 	movi	r2,48
    b274:	20805e26 	beq	r4,r2,b3f0 <___vfprintf_internal_r+0x2150>
    b278:	d8c02617 	ldw	r3,152(sp)
    b27c:	e0f9883a 	add	fp,fp,r3
    b280:	003e0a06 	br	aaac <__alt_exception_stack_pointer+0xf800aaac>
    b284:	00c00b44 	movi	r3,45
    b288:	24e0003c 	xorhi	r19,r4,32768
    b28c:	d8c02905 	stb	r3,164(sp)
    b290:	003de906 	br	aa38 <__alt_exception_stack_pointer+0xf800aa38>
    b294:	d8c03217 	ldw	r3,200(sp)
    b298:	00c07a0e 	bge	zero,r3,b484 <___vfprintf_internal_r+0x21e4>
    b29c:	00800044 	movi	r2,1
    b2a0:	d9003317 	ldw	r4,204(sp)
    b2a4:	1105883a 	add	r2,r2,r4
    b2a8:	d8802b15 	stw	r2,172(sp)
    b2ac:	10004e16 	blt	r2,zero,b3e8 <___vfprintf_internal_r+0x2148>
    b2b0:	044019c4 	movi	r17,103
    b2b4:	003e2106 	br	ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b2b8:	d9002a17 	ldw	r4,168(sp)
    b2bc:	d8802104 	addi	r2,sp,132
    b2c0:	d8800315 	stw	r2,12(sp)
    b2c4:	d9000015 	stw	r4,0(sp)
    b2c8:	d8802504 	addi	r2,sp,148
    b2cc:	d9403617 	ldw	r5,216(sp)
    b2d0:	d9002d17 	ldw	r4,180(sp)
    b2d4:	d8800215 	stw	r2,8(sp)
    b2d8:	d8802604 	addi	r2,sp,152
    b2dc:	d8800115 	stw	r2,4(sp)
    b2e0:	01c000c4 	movi	r7,3
    b2e4:	980d883a 	mov	r6,r19
    b2e8:	da003d15 	stw	r8,244(sp)
    b2ec:	000b9d00 	call	b9d0 <_dtoa_r>
    b2f0:	d8c02a17 	ldw	r3,168(sp)
    b2f4:	da003d17 	ldw	r8,244(sp)
    b2f8:	1021883a 	mov	r16,r2
    b2fc:	00801184 	movi	r2,70
    b300:	80f9883a 	add	fp,r16,r3
    b304:	88bfd926 	beq	r17,r2,b26c <__alt_exception_stack_pointer+0xf800b26c>
    b308:	003de806 	br	aaac <__alt_exception_stack_pointer+0xf800aaac>
    b30c:	d9002a17 	ldw	r4,168(sp)
    b310:	00c04d0e 	bge	zero,r3,b448 <___vfprintf_internal_r+0x21a8>
    b314:	2000441e 	bne	r4,zero,b428 <___vfprintf_internal_r+0x2188>
    b318:	9480004c 	andi	r18,r18,1
    b31c:	9000421e 	bne	r18,zero,b428 <___vfprintf_internal_r+0x2188>
    b320:	1805883a 	mov	r2,r3
    b324:	18006f16 	blt	r3,zero,b4e4 <___vfprintf_internal_r+0x2244>
    b328:	d8c03217 	ldw	r3,200(sp)
    b32c:	d8c02b15 	stw	r3,172(sp)
    b330:	003e0206 	br	ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b334:	df0022c4 	addi	fp,sp,139
    b338:	dc002a15 	stw	r16,168(sp)
    b33c:	4027883a 	mov	r19,r8
    b340:	e021883a 	mov	r16,fp
    b344:	b009883a 	mov	r4,r22
    b348:	01400284 	movi	r5,10
    b34c:	0005a540 	call	5a54 <__modsi3>
    b350:	10800c04 	addi	r2,r2,48
    b354:	843fffc4 	addi	r16,r16,-1
    b358:	b009883a 	mov	r4,r22
    b35c:	01400284 	movi	r5,10
    b360:	80800005 	stb	r2,0(r16)
    b364:	00059d00 	call	59d0 <__divsi3>
    b368:	102d883a 	mov	r22,r2
    b36c:	00800244 	movi	r2,9
    b370:	15bff416 	blt	r2,r22,b344 <__alt_exception_stack_pointer+0xf800b344>
    b374:	9811883a 	mov	r8,r19
    b378:	b0800c04 	addi	r2,r22,48
    b37c:	8027883a 	mov	r19,r16
    b380:	997fffc4 	addi	r5,r19,-1
    b384:	98bfffc5 	stb	r2,-1(r19)
    b388:	dc002a17 	ldw	r16,168(sp)
    b38c:	2f006d2e 	bgeu	r5,fp,b544 <___vfprintf_internal_r+0x22a4>
    b390:	d9c02384 	addi	r7,sp,142
    b394:	3ccfc83a 	sub	r7,r7,r19
    b398:	d9002344 	addi	r4,sp,141
    b39c:	e1cf883a 	add	r7,fp,r7
    b3a0:	00000106 	br	b3a8 <___vfprintf_internal_r+0x2108>
    b3a4:	28800003 	ldbu	r2,0(r5)
    b3a8:	20800005 	stb	r2,0(r4)
    b3ac:	21000044 	addi	r4,r4,1
    b3b0:	29400044 	addi	r5,r5,1
    b3b4:	393ffb1e 	bne	r7,r4,b3a4 <__alt_exception_stack_pointer+0xf800b3a4>
    b3b8:	d8802304 	addi	r2,sp,140
    b3bc:	14c5c83a 	sub	r2,r2,r19
    b3c0:	d8c02344 	addi	r3,sp,141
    b3c4:	1885883a 	add	r2,r3,r2
    b3c8:	003f7006 	br	b18c <__alt_exception_stack_pointer+0xf800b18c>
    b3cc:	0005883a 	mov	r2,zero
    b3d0:	003f0f06 	br	b010 <__alt_exception_stack_pointer+0xf800b010>
    b3d4:	d8c03217 	ldw	r3,200(sp)
    b3d8:	18c00044 	addi	r3,r3,1
    b3dc:	d8c02b15 	stw	r3,172(sp)
    b3e0:	1805883a 	mov	r2,r3
    b3e4:	183fb20e 	bge	r3,zero,b2b0 <__alt_exception_stack_pointer+0xf800b2b0>
    b3e8:	0005883a 	mov	r2,zero
    b3ec:	003fb006 	br	b2b0 <__alt_exception_stack_pointer+0xf800b2b0>
    b3f0:	d9003617 	ldw	r4,216(sp)
    b3f4:	000d883a 	mov	r6,zero
    b3f8:	000f883a 	mov	r7,zero
    b3fc:	980b883a 	mov	r5,r19
    b400:	d8c03c15 	stw	r3,240(sp)
    b404:	da003d15 	stw	r8,244(sp)
    b408:	0006e280 	call	6e28 <__eqdf2>
    b40c:	d8c03c17 	ldw	r3,240(sp)
    b410:	da003d17 	ldw	r8,244(sp)
    b414:	103f9826 	beq	r2,zero,b278 <__alt_exception_stack_pointer+0xf800b278>
    b418:	00800044 	movi	r2,1
    b41c:	10c7c83a 	sub	r3,r2,r3
    b420:	d8c02615 	stw	r3,152(sp)
    b424:	003f9506 	br	b27c <__alt_exception_stack_pointer+0xf800b27c>
    b428:	d9002a17 	ldw	r4,168(sp)
    b42c:	d8c03217 	ldw	r3,200(sp)
    b430:	20800044 	addi	r2,r4,1
    b434:	1885883a 	add	r2,r3,r2
    b438:	d8802b15 	stw	r2,172(sp)
    b43c:	103dbf0e 	bge	r2,zero,ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b440:	0005883a 	mov	r2,zero
    b444:	003dbd06 	br	ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b448:	2000201e 	bne	r4,zero,b4cc <___vfprintf_internal_r+0x222c>
    b44c:	9480004c 	andi	r18,r18,1
    b450:	90001e1e 	bne	r18,zero,b4cc <___vfprintf_internal_r+0x222c>
    b454:	00800044 	movi	r2,1
    b458:	d8802b15 	stw	r2,172(sp)
    b45c:	003db706 	br	ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b460:	00800b44 	movi	r2,45
    b464:	05adc83a 	sub	r22,zero,r22
    b468:	d8802305 	stb	r2,140(sp)
    b46c:	003f3f06 	br	b16c <__alt_exception_stack_pointer+0xf800b16c>
    b470:	0005883a 	mov	r2,zero
    b474:	003f5206 	br	b1c0 <__alt_exception_stack_pointer+0xf800b1c0>
    b478:	90a4703a 	and	r18,r18,r2
    b47c:	903f4e26 	beq	r18,zero,b1b8 <__alt_exception_stack_pointer+0xf800b1b8>
    b480:	003f4a06 	br	b1ac <__alt_exception_stack_pointer+0xf800b1ac>
    b484:	00800084 	movi	r2,2
    b488:	10c5c83a 	sub	r2,r2,r3
    b48c:	003f8406 	br	b2a0 <__alt_exception_stack_pointer+0xf800b2a0>
    b490:	d9402e17 	ldw	r5,184(sp)
    b494:	d9002e17 	ldw	r4,184(sp)
    b498:	ac400043 	ldbu	r17,1(r21)
    b49c:	29400017 	ldw	r5,0(r5)
    b4a0:	20800104 	addi	r2,r4,4
    b4a4:	d8802e15 	stw	r2,184(sp)
    b4a8:	d9402a15 	stw	r5,168(sp)
    b4ac:	182b883a 	mov	r21,r3
    b4b0:	283e7b0e 	bge	r5,zero,aea0 <__alt_exception_stack_pointer+0xf800aea0>
    b4b4:	8c403fcc 	andi	r17,r17,255
    b4b8:	017fffc4 	movi	r5,-1
    b4bc:	8c40201c 	xori	r17,r17,128
    b4c0:	d9402a15 	stw	r5,168(sp)
    b4c4:	8c7fe004 	addi	r17,r17,-128
    b4c8:	0037d706 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    b4cc:	d8c02a17 	ldw	r3,168(sp)
    b4d0:	18c00084 	addi	r3,r3,2
    b4d4:	d8c02b15 	stw	r3,172(sp)
    b4d8:	1805883a 	mov	r2,r3
    b4dc:	183d970e 	bge	r3,zero,ab3c <__alt_exception_stack_pointer+0xf800ab3c>
    b4e0:	003fd706 	br	b440 <__alt_exception_stack_pointer+0xf800b440>
    b4e4:	0005883a 	mov	r2,zero
    b4e8:	003f8f06 	br	b328 <__alt_exception_stack_pointer+0xf800b328>
    b4ec:	9080004c 	andi	r2,r18,1
    b4f0:	103f821e 	bne	r2,zero,b2fc <__alt_exception_stack_pointer+0xf800b2fc>
    b4f4:	d8802117 	ldw	r2,132(sp)
    b4f8:	1405c83a 	sub	r2,r2,r16
    b4fc:	d8803315 	stw	r2,204(sp)
    b500:	b47ef426 	beq	r22,r17,b0d4 <__alt_exception_stack_pointer+0xf800b0d4>
    b504:	dd802617 	ldw	r22,152(sp)
    b508:	003f1206 	br	b154 <__alt_exception_stack_pointer+0xf800b154>
    b50c:	d8c02b03 	ldbu	r3,172(sp)
    b510:	d8c02785 	stb	r3,158(sp)
    b514:	0038df06 	br	9894 <__alt_exception_stack_pointer+0xf8009894>
    b518:	d8c02b03 	ldbu	r3,172(sp)
    b51c:	d8c02785 	stb	r3,158(sp)
    b520:	0038aa06 	br	97cc <__alt_exception_stack_pointer+0xf80097cc>
    b524:	d8c02b03 	ldbu	r3,172(sp)
    b528:	d8c02785 	stb	r3,158(sp)
    b52c:	003a4306 	br	9e3c <__alt_exception_stack_pointer+0xf8009e3c>
    b530:	d8c02b03 	ldbu	r3,172(sp)
    b534:	d8c02785 	stb	r3,158(sp)
    b538:	003af506 	br	a110 <__alt_exception_stack_pointer+0xf800a110>
    b53c:	0005883a 	mov	r2,zero
    b540:	003d7b06 	br	ab30 <__alt_exception_stack_pointer+0xf800ab30>
    b544:	d8802344 	addi	r2,sp,141
    b548:	003f1006 	br	b18c <__alt_exception_stack_pointer+0xf800b18c>
    b54c:	d8c02b03 	ldbu	r3,172(sp)
    b550:	d8c02785 	stb	r3,158(sp)
    b554:	0038fd06 	br	994c <__alt_exception_stack_pointer+0xf800994c>
    b558:	d8c02b03 	ldbu	r3,172(sp)
    b55c:	d8c02785 	stb	r3,158(sp)
    b560:	003a9706 	br	9fc0 <__alt_exception_stack_pointer+0xf8009fc0>
    b564:	d8c02b03 	ldbu	r3,172(sp)
    b568:	d8c02785 	stb	r3,158(sp)
    b56c:	003a1806 	br	9dd0 <__alt_exception_stack_pointer+0xf8009dd0>
    b570:	d8c02b03 	ldbu	r3,172(sp)
    b574:	d8c02785 	stb	r3,158(sp)
    b578:	003abe06 	br	a074 <__alt_exception_stack_pointer+0xf800a074>

0000b57c <__vfprintf_internal>:
    b57c:	008000b4 	movhi	r2,2
    b580:	10a92a04 	addi	r2,r2,-23384
    b584:	300f883a 	mov	r7,r6
    b588:	280d883a 	mov	r6,r5
    b58c:	200b883a 	mov	r5,r4
    b590:	11000017 	ldw	r4,0(r2)
    b594:	00092a01 	jmpi	92a0 <___vfprintf_internal_r>

0000b598 <__sbprintf>:
    b598:	2880030b 	ldhu	r2,12(r5)
    b59c:	2ac01917 	ldw	r11,100(r5)
    b5a0:	2a80038b 	ldhu	r10,14(r5)
    b5a4:	2a400717 	ldw	r9,28(r5)
    b5a8:	2a000917 	ldw	r8,36(r5)
    b5ac:	defee204 	addi	sp,sp,-1144
    b5b0:	00c10004 	movi	r3,1024
    b5b4:	dc011a15 	stw	r16,1128(sp)
    b5b8:	10bfff4c 	andi	r2,r2,65533
    b5bc:	2821883a 	mov	r16,r5
    b5c0:	d8cb883a 	add	r5,sp,r3
    b5c4:	dc811c15 	stw	r18,1136(sp)
    b5c8:	dc411b15 	stw	r17,1132(sp)
    b5cc:	dfc11d15 	stw	ra,1140(sp)
    b5d0:	2025883a 	mov	r18,r4
    b5d4:	d881030d 	sth	r2,1036(sp)
    b5d8:	dac11915 	stw	r11,1124(sp)
    b5dc:	da81038d 	sth	r10,1038(sp)
    b5e0:	da410715 	stw	r9,1052(sp)
    b5e4:	da010915 	stw	r8,1060(sp)
    b5e8:	dec10015 	stw	sp,1024(sp)
    b5ec:	dec10415 	stw	sp,1040(sp)
    b5f0:	d8c10215 	stw	r3,1032(sp)
    b5f4:	d8c10515 	stw	r3,1044(sp)
    b5f8:	d8010615 	stw	zero,1048(sp)
    b5fc:	00092a00 	call	92a0 <___vfprintf_internal_r>
    b600:	1023883a 	mov	r17,r2
    b604:	10000416 	blt	r2,zero,b618 <__sbprintf+0x80>
    b608:	d9410004 	addi	r5,sp,1024
    b60c:	9009883a 	mov	r4,r18
    b610:	000ddac0 	call	ddac <_fflush_r>
    b614:	10000d1e 	bne	r2,zero,b64c <__sbprintf+0xb4>
    b618:	d881030b 	ldhu	r2,1036(sp)
    b61c:	1080100c 	andi	r2,r2,64
    b620:	10000326 	beq	r2,zero,b630 <__sbprintf+0x98>
    b624:	8080030b 	ldhu	r2,12(r16)
    b628:	10801014 	ori	r2,r2,64
    b62c:	8080030d 	sth	r2,12(r16)
    b630:	8805883a 	mov	r2,r17
    b634:	dfc11d17 	ldw	ra,1140(sp)
    b638:	dc811c17 	ldw	r18,1136(sp)
    b63c:	dc411b17 	ldw	r17,1132(sp)
    b640:	dc011a17 	ldw	r16,1128(sp)
    b644:	dec11e04 	addi	sp,sp,1144
    b648:	f800283a 	ret
    b64c:	047fffc4 	movi	r17,-1
    b650:	003ff106 	br	b618 <__alt_exception_stack_pointer+0xf800b618>

0000b654 <__swsetup_r>:
    b654:	008000b4 	movhi	r2,2
    b658:	defffd04 	addi	sp,sp,-12
    b65c:	10a92a04 	addi	r2,r2,-23384
    b660:	dc400115 	stw	r17,4(sp)
    b664:	2023883a 	mov	r17,r4
    b668:	11000017 	ldw	r4,0(r2)
    b66c:	dc000015 	stw	r16,0(sp)
    b670:	dfc00215 	stw	ra,8(sp)
    b674:	2821883a 	mov	r16,r5
    b678:	20000226 	beq	r4,zero,b684 <__swsetup_r+0x30>
    b67c:	20800e17 	ldw	r2,56(r4)
    b680:	10003126 	beq	r2,zero,b748 <__swsetup_r+0xf4>
    b684:	8080030b 	ldhu	r2,12(r16)
    b688:	10c0020c 	andi	r3,r2,8
    b68c:	1009883a 	mov	r4,r2
    b690:	18000f26 	beq	r3,zero,b6d0 <__swsetup_r+0x7c>
    b694:	80c00417 	ldw	r3,16(r16)
    b698:	18001526 	beq	r3,zero,b6f0 <__swsetup_r+0x9c>
    b69c:	1100004c 	andi	r4,r2,1
    b6a0:	20001c1e 	bne	r4,zero,b714 <__swsetup_r+0xc0>
    b6a4:	1080008c 	andi	r2,r2,2
    b6a8:	1000291e 	bne	r2,zero,b750 <__swsetup_r+0xfc>
    b6ac:	80800517 	ldw	r2,20(r16)
    b6b0:	80800215 	stw	r2,8(r16)
    b6b4:	18001c26 	beq	r3,zero,b728 <__swsetup_r+0xd4>
    b6b8:	0005883a 	mov	r2,zero
    b6bc:	dfc00217 	ldw	ra,8(sp)
    b6c0:	dc400117 	ldw	r17,4(sp)
    b6c4:	dc000017 	ldw	r16,0(sp)
    b6c8:	dec00304 	addi	sp,sp,12
    b6cc:	f800283a 	ret
    b6d0:	2080040c 	andi	r2,r4,16
    b6d4:	10002e26 	beq	r2,zero,b790 <__swsetup_r+0x13c>
    b6d8:	2080010c 	andi	r2,r4,4
    b6dc:	10001e1e 	bne	r2,zero,b758 <__swsetup_r+0x104>
    b6e0:	80c00417 	ldw	r3,16(r16)
    b6e4:	20800214 	ori	r2,r4,8
    b6e8:	8080030d 	sth	r2,12(r16)
    b6ec:	183feb1e 	bne	r3,zero,b69c <__alt_exception_stack_pointer+0xf800b69c>
    b6f0:	1100a00c 	andi	r4,r2,640
    b6f4:	01408004 	movi	r5,512
    b6f8:	217fe826 	beq	r4,r5,b69c <__alt_exception_stack_pointer+0xf800b69c>
    b6fc:	800b883a 	mov	r5,r16
    b700:	8809883a 	mov	r4,r17
    b704:	000ed480 	call	ed48 <__smakebuf_r>
    b708:	8080030b 	ldhu	r2,12(r16)
    b70c:	80c00417 	ldw	r3,16(r16)
    b710:	003fe206 	br	b69c <__alt_exception_stack_pointer+0xf800b69c>
    b714:	80800517 	ldw	r2,20(r16)
    b718:	80000215 	stw	zero,8(r16)
    b71c:	0085c83a 	sub	r2,zero,r2
    b720:	80800615 	stw	r2,24(r16)
    b724:	183fe41e 	bne	r3,zero,b6b8 <__alt_exception_stack_pointer+0xf800b6b8>
    b728:	80c0030b 	ldhu	r3,12(r16)
    b72c:	0005883a 	mov	r2,zero
    b730:	1900200c 	andi	r4,r3,128
    b734:	203fe126 	beq	r4,zero,b6bc <__alt_exception_stack_pointer+0xf800b6bc>
    b738:	18c01014 	ori	r3,r3,64
    b73c:	80c0030d 	sth	r3,12(r16)
    b740:	00bfffc4 	movi	r2,-1
    b744:	003fdd06 	br	b6bc <__alt_exception_stack_pointer+0xf800b6bc>
    b748:	000e1980 	call	e198 <__sinit>
    b74c:	003fcd06 	br	b684 <__alt_exception_stack_pointer+0xf800b684>
    b750:	0005883a 	mov	r2,zero
    b754:	003fd606 	br	b6b0 <__alt_exception_stack_pointer+0xf800b6b0>
    b758:	81400c17 	ldw	r5,48(r16)
    b75c:	28000626 	beq	r5,zero,b778 <__swsetup_r+0x124>
    b760:	80801004 	addi	r2,r16,64
    b764:	28800326 	beq	r5,r2,b774 <__swsetup_r+0x120>
    b768:	8809883a 	mov	r4,r17
    b76c:	000e30c0 	call	e30c <_free_r>
    b770:	8100030b 	ldhu	r4,12(r16)
    b774:	80000c15 	stw	zero,48(r16)
    b778:	80c00417 	ldw	r3,16(r16)
    b77c:	00bff6c4 	movi	r2,-37
    b780:	1108703a 	and	r4,r2,r4
    b784:	80000115 	stw	zero,4(r16)
    b788:	80c00015 	stw	r3,0(r16)
    b78c:	003fd506 	br	b6e4 <__alt_exception_stack_pointer+0xf800b6e4>
    b790:	00800244 	movi	r2,9
    b794:	88800015 	stw	r2,0(r17)
    b798:	20801014 	ori	r2,r4,64
    b79c:	8080030d 	sth	r2,12(r16)
    b7a0:	00bfffc4 	movi	r2,-1
    b7a4:	003fc506 	br	b6bc <__alt_exception_stack_pointer+0xf800b6bc>

0000b7a8 <quorem>:
    b7a8:	defff204 	addi	sp,sp,-56
    b7ac:	ddc00b15 	stw	r23,44(sp)
    b7b0:	20800417 	ldw	r2,16(r4)
    b7b4:	2dc00417 	ldw	r23,16(r5)
    b7b8:	dfc00d15 	stw	ra,52(sp)
    b7bc:	df000c15 	stw	fp,48(sp)
    b7c0:	dd800a15 	stw	r22,40(sp)
    b7c4:	dd400915 	stw	r21,36(sp)
    b7c8:	dd000815 	stw	r20,32(sp)
    b7cc:	dcc00715 	stw	r19,28(sp)
    b7d0:	dc800615 	stw	r18,24(sp)
    b7d4:	dc400515 	stw	r17,20(sp)
    b7d8:	dc000415 	stw	r16,16(sp)
    b7dc:	15c07a16 	blt	r2,r23,b9c8 <quorem+0x220>
    b7e0:	bdffffc4 	addi	r23,r23,-1
    b7e4:	bde9883a 	add	r20,r23,r23
    b7e8:	28c00504 	addi	r3,r5,20
    b7ec:	a529883a 	add	r20,r20,r20
    b7f0:	1d39883a 	add	fp,r3,r20
    b7f4:	24c00504 	addi	r19,r4,20
    b7f8:	d9400215 	stw	r5,8(sp)
    b7fc:	9d29883a 	add	r20,r19,r20
    b800:	e1400017 	ldw	r5,0(fp)
    b804:	d9000015 	stw	r4,0(sp)
    b808:	a1000017 	ldw	r4,0(r20)
    b80c:	29400044 	addi	r5,r5,1
    b810:	d8c00115 	stw	r3,4(sp)
    b814:	dd000315 	stw	r20,12(sp)
    b818:	0005ac80 	call	5ac8 <__udivsi3>
    b81c:	1025883a 	mov	r18,r2
    b820:	10003026 	beq	r2,zero,b8e4 <quorem+0x13c>
    b824:	dc400117 	ldw	r17,4(sp)
    b828:	9829883a 	mov	r20,r19
    b82c:	002d883a 	mov	r22,zero
    b830:	0021883a 	mov	r16,zero
    b834:	8d400017 	ldw	r21,0(r17)
    b838:	900b883a 	mov	r5,r18
    b83c:	8c400104 	addi	r17,r17,4
    b840:	a93fffcc 	andi	r4,r21,65535
    b844:	0005b840 	call	5b84 <__mulsi3>
    b848:	a808d43a 	srli	r4,r21,16
    b84c:	900b883a 	mov	r5,r18
    b850:	15ad883a 	add	r22,r2,r22
    b854:	0005b840 	call	5b84 <__mulsi3>
    b858:	a1000017 	ldw	r4,0(r20)
    b85c:	b00cd43a 	srli	r6,r22,16
    b860:	b0ffffcc 	andi	r3,r22,65535
    b864:	217fffcc 	andi	r5,r4,65535
    b868:	2c21883a 	add	r16,r5,r16
    b86c:	80c7c83a 	sub	r3,r16,r3
    b870:	2008d43a 	srli	r4,r4,16
    b874:	1185883a 	add	r2,r2,r6
    b878:	1821d43a 	srai	r16,r3,16
    b87c:	117fffcc 	andi	r5,r2,65535
    b880:	2149c83a 	sub	r4,r4,r5
    b884:	2421883a 	add	r16,r4,r16
    b888:	8008943a 	slli	r4,r16,16
    b88c:	18ffffcc 	andi	r3,r3,65535
    b890:	102cd43a 	srli	r22,r2,16
    b894:	20c8b03a 	or	r4,r4,r3
    b898:	a1000015 	stw	r4,0(r20)
    b89c:	8021d43a 	srai	r16,r16,16
    b8a0:	a5000104 	addi	r20,r20,4
    b8a4:	e47fe32e 	bgeu	fp,r17,b834 <__alt_exception_stack_pointer+0xf800b834>
    b8a8:	d8c00317 	ldw	r3,12(sp)
    b8ac:	18800017 	ldw	r2,0(r3)
    b8b0:	10000c1e 	bne	r2,zero,b8e4 <quorem+0x13c>
    b8b4:	18bfff04 	addi	r2,r3,-4
    b8b8:	9880082e 	bgeu	r19,r2,b8dc <quorem+0x134>
    b8bc:	18ffff17 	ldw	r3,-4(r3)
    b8c0:	18000326 	beq	r3,zero,b8d0 <quorem+0x128>
    b8c4:	00000506 	br	b8dc <quorem+0x134>
    b8c8:	10c00017 	ldw	r3,0(r2)
    b8cc:	1800031e 	bne	r3,zero,b8dc <quorem+0x134>
    b8d0:	10bfff04 	addi	r2,r2,-4
    b8d4:	bdffffc4 	addi	r23,r23,-1
    b8d8:	98bffb36 	bltu	r19,r2,b8c8 <__alt_exception_stack_pointer+0xf800b8c8>
    b8dc:	d8c00017 	ldw	r3,0(sp)
    b8e0:	1dc00415 	stw	r23,16(r3)
    b8e4:	d9400217 	ldw	r5,8(sp)
    b8e8:	d9000017 	ldw	r4,0(sp)
    b8ec:	000fd380 	call	fd38 <__mcmp>
    b8f0:	10002816 	blt	r2,zero,b994 <quorem+0x1ec>
    b8f4:	dc400117 	ldw	r17,4(sp)
    b8f8:	94800044 	addi	r18,r18,1
    b8fc:	980d883a 	mov	r6,r19
    b900:	0007883a 	mov	r3,zero
    b904:	31000017 	ldw	r4,0(r6)
    b908:	89400017 	ldw	r5,0(r17)
    b90c:	31800104 	addi	r6,r6,4
    b910:	20bfffcc 	andi	r2,r4,65535
    b914:	10c7883a 	add	r3,r2,r3
    b918:	28bfffcc 	andi	r2,r5,65535
    b91c:	1885c83a 	sub	r2,r3,r2
    b920:	280ad43a 	srli	r5,r5,16
    b924:	2008d43a 	srli	r4,r4,16
    b928:	1007d43a 	srai	r3,r2,16
    b92c:	10bfffcc 	andi	r2,r2,65535
    b930:	2149c83a 	sub	r4,r4,r5
    b934:	20c9883a 	add	r4,r4,r3
    b938:	200a943a 	slli	r5,r4,16
    b93c:	8c400104 	addi	r17,r17,4
    b940:	2007d43a 	srai	r3,r4,16
    b944:	2884b03a 	or	r2,r5,r2
    b948:	30bfff15 	stw	r2,-4(r6)
    b94c:	e47fed2e 	bgeu	fp,r17,b904 <__alt_exception_stack_pointer+0xf800b904>
    b950:	bdc5883a 	add	r2,r23,r23
    b954:	1085883a 	add	r2,r2,r2
    b958:	9887883a 	add	r3,r19,r2
    b95c:	18800017 	ldw	r2,0(r3)
    b960:	10000c1e 	bne	r2,zero,b994 <quorem+0x1ec>
    b964:	18bfff04 	addi	r2,r3,-4
    b968:	9880082e 	bgeu	r19,r2,b98c <quorem+0x1e4>
    b96c:	18ffff17 	ldw	r3,-4(r3)
    b970:	18000326 	beq	r3,zero,b980 <quorem+0x1d8>
    b974:	00000506 	br	b98c <quorem+0x1e4>
    b978:	10c00017 	ldw	r3,0(r2)
    b97c:	1800031e 	bne	r3,zero,b98c <quorem+0x1e4>
    b980:	10bfff04 	addi	r2,r2,-4
    b984:	bdffffc4 	addi	r23,r23,-1
    b988:	98bffb36 	bltu	r19,r2,b978 <__alt_exception_stack_pointer+0xf800b978>
    b98c:	d8c00017 	ldw	r3,0(sp)
    b990:	1dc00415 	stw	r23,16(r3)
    b994:	9005883a 	mov	r2,r18
    b998:	dfc00d17 	ldw	ra,52(sp)
    b99c:	df000c17 	ldw	fp,48(sp)
    b9a0:	ddc00b17 	ldw	r23,44(sp)
    b9a4:	dd800a17 	ldw	r22,40(sp)
    b9a8:	dd400917 	ldw	r21,36(sp)
    b9ac:	dd000817 	ldw	r20,32(sp)
    b9b0:	dcc00717 	ldw	r19,28(sp)
    b9b4:	dc800617 	ldw	r18,24(sp)
    b9b8:	dc400517 	ldw	r17,20(sp)
    b9bc:	dc000417 	ldw	r16,16(sp)
    b9c0:	dec00e04 	addi	sp,sp,56
    b9c4:	f800283a 	ret
    b9c8:	0005883a 	mov	r2,zero
    b9cc:	003ff206 	br	b998 <__alt_exception_stack_pointer+0xf800b998>

0000b9d0 <_dtoa_r>:
    b9d0:	20801017 	ldw	r2,64(r4)
    b9d4:	deffde04 	addi	sp,sp,-136
    b9d8:	df002015 	stw	fp,128(sp)
    b9dc:	dcc01b15 	stw	r19,108(sp)
    b9e0:	dc801a15 	stw	r18,104(sp)
    b9e4:	dc401915 	stw	r17,100(sp)
    b9e8:	dc001815 	stw	r16,96(sp)
    b9ec:	dfc02115 	stw	ra,132(sp)
    b9f0:	ddc01f15 	stw	r23,124(sp)
    b9f4:	dd801e15 	stw	r22,120(sp)
    b9f8:	dd401d15 	stw	r21,116(sp)
    b9fc:	dd001c15 	stw	r20,112(sp)
    ba00:	d9c00315 	stw	r7,12(sp)
    ba04:	2039883a 	mov	fp,r4
    ba08:	3023883a 	mov	r17,r6
    ba0c:	2825883a 	mov	r18,r5
    ba10:	dc002417 	ldw	r16,144(sp)
    ba14:	3027883a 	mov	r19,r6
    ba18:	10000826 	beq	r2,zero,ba3c <_dtoa_r+0x6c>
    ba1c:	21801117 	ldw	r6,68(r4)
    ba20:	00c00044 	movi	r3,1
    ba24:	100b883a 	mov	r5,r2
    ba28:	1986983a 	sll	r3,r3,r6
    ba2c:	11800115 	stw	r6,4(r2)
    ba30:	10c00215 	stw	r3,8(r2)
    ba34:	000f45c0 	call	f45c <_Bfree>
    ba38:	e0001015 	stw	zero,64(fp)
    ba3c:	88002e16 	blt	r17,zero,baf8 <_dtoa_r+0x128>
    ba40:	80000015 	stw	zero,0(r16)
    ba44:	889ffc2c 	andhi	r2,r17,32752
    ba48:	00dffc34 	movhi	r3,32752
    ba4c:	10c01c26 	beq	r2,r3,bac0 <_dtoa_r+0xf0>
    ba50:	000d883a 	mov	r6,zero
    ba54:	000f883a 	mov	r7,zero
    ba58:	9009883a 	mov	r4,r18
    ba5c:	980b883a 	mov	r5,r19
    ba60:	0006e280 	call	6e28 <__eqdf2>
    ba64:	10002b1e 	bne	r2,zero,bb14 <_dtoa_r+0x144>
    ba68:	d9c02317 	ldw	r7,140(sp)
    ba6c:	00800044 	movi	r2,1
    ba70:	38800015 	stw	r2,0(r7)
    ba74:	d8802517 	ldw	r2,148(sp)
    ba78:	10019e26 	beq	r2,zero,c0f4 <_dtoa_r+0x724>
    ba7c:	d8c02517 	ldw	r3,148(sp)
    ba80:	00800074 	movhi	r2,1
    ba84:	109fe844 	addi	r2,r2,32673
    ba88:	18800015 	stw	r2,0(r3)
    ba8c:	10bfffc4 	addi	r2,r2,-1
    ba90:	dfc02117 	ldw	ra,132(sp)
    ba94:	df002017 	ldw	fp,128(sp)
    ba98:	ddc01f17 	ldw	r23,124(sp)
    ba9c:	dd801e17 	ldw	r22,120(sp)
    baa0:	dd401d17 	ldw	r21,116(sp)
    baa4:	dd001c17 	ldw	r20,112(sp)
    baa8:	dcc01b17 	ldw	r19,108(sp)
    baac:	dc801a17 	ldw	r18,104(sp)
    bab0:	dc401917 	ldw	r17,100(sp)
    bab4:	dc001817 	ldw	r16,96(sp)
    bab8:	dec02204 	addi	sp,sp,136
    babc:	f800283a 	ret
    bac0:	d8c02317 	ldw	r3,140(sp)
    bac4:	0089c3c4 	movi	r2,9999
    bac8:	18800015 	stw	r2,0(r3)
    bacc:	90017726 	beq	r18,zero,c0ac <_dtoa_r+0x6dc>
    bad0:	00800074 	movhi	r2,1
    bad4:	109ff404 	addi	r2,r2,32720
    bad8:	d9002517 	ldw	r4,148(sp)
    badc:	203fec26 	beq	r4,zero,ba90 <__alt_exception_stack_pointer+0xf800ba90>
    bae0:	10c000c7 	ldb	r3,3(r2)
    bae4:	1801781e 	bne	r3,zero,c0c8 <_dtoa_r+0x6f8>
    bae8:	10c000c4 	addi	r3,r2,3
    baec:	d9802517 	ldw	r6,148(sp)
    baf0:	30c00015 	stw	r3,0(r6)
    baf4:	003fe606 	br	ba90 <__alt_exception_stack_pointer+0xf800ba90>
    baf8:	04e00034 	movhi	r19,32768
    bafc:	9cffffc4 	addi	r19,r19,-1
    bb00:	00800044 	movi	r2,1
    bb04:	8ce6703a 	and	r19,r17,r19
    bb08:	80800015 	stw	r2,0(r16)
    bb0c:	9823883a 	mov	r17,r19
    bb10:	003fcc06 	br	ba44 <__alt_exception_stack_pointer+0xf800ba44>
    bb14:	d8800204 	addi	r2,sp,8
    bb18:	d8800015 	stw	r2,0(sp)
    bb1c:	d9c00104 	addi	r7,sp,4
    bb20:	900b883a 	mov	r5,r18
    bb24:	980d883a 	mov	r6,r19
    bb28:	e009883a 	mov	r4,fp
    bb2c:	8820d53a 	srli	r16,r17,20
    bb30:	00101040 	call	10104 <__d2b>
    bb34:	d8800915 	stw	r2,36(sp)
    bb38:	8001651e 	bne	r16,zero,c0d0 <_dtoa_r+0x700>
    bb3c:	dd800217 	ldw	r22,8(sp)
    bb40:	dc000117 	ldw	r16,4(sp)
    bb44:	00800804 	movi	r2,32
    bb48:	b421883a 	add	r16,r22,r16
    bb4c:	80c10c84 	addi	r3,r16,1074
    bb50:	10c2d10e 	bge	r2,r3,c698 <_dtoa_r+0xcc8>
    bb54:	00801004 	movi	r2,64
    bb58:	81010484 	addi	r4,r16,1042
    bb5c:	10c7c83a 	sub	r3,r2,r3
    bb60:	9108d83a 	srl	r4,r18,r4
    bb64:	88e2983a 	sll	r17,r17,r3
    bb68:	2448b03a 	or	r4,r4,r17
    bb6c:	00082500 	call	8250 <__floatunsidf>
    bb70:	017f8434 	movhi	r5,65040
    bb74:	01800044 	movi	r6,1
    bb78:	1009883a 	mov	r4,r2
    bb7c:	194b883a 	add	r5,r3,r5
    bb80:	843fffc4 	addi	r16,r16,-1
    bb84:	d9801115 	stw	r6,68(sp)
    bb88:	000d883a 	mov	r6,zero
    bb8c:	01cffe34 	movhi	r7,16376
    bb90:	00077f80 	call	77f8 <__subdf3>
    bb94:	0198dbf4 	movhi	r6,25455
    bb98:	01cff4f4 	movhi	r7,16339
    bb9c:	3190d844 	addi	r6,r6,17249
    bba0:	39e1e9c4 	addi	r7,r7,-30809
    bba4:	1009883a 	mov	r4,r2
    bba8:	180b883a 	mov	r5,r3
    bbac:	0006f8c0 	call	6f8c <__muldf3>
    bbb0:	01a2d874 	movhi	r6,35681
    bbb4:	01cff1f4 	movhi	r7,16327
    bbb8:	31b22cc4 	addi	r6,r6,-14157
    bbbc:	39e28a04 	addi	r7,r7,-30168
    bbc0:	180b883a 	mov	r5,r3
    bbc4:	1009883a 	mov	r4,r2
    bbc8:	0005bac0 	call	5bac <__adddf3>
    bbcc:	8009883a 	mov	r4,r16
    bbd0:	1029883a 	mov	r20,r2
    bbd4:	1823883a 	mov	r17,r3
    bbd8:	00081740 	call	8174 <__floatsidf>
    bbdc:	019427f4 	movhi	r6,20639
    bbe0:	01cff4f4 	movhi	r7,16339
    bbe4:	319e7ec4 	addi	r6,r6,31227
    bbe8:	39d104c4 	addi	r7,r7,17427
    bbec:	1009883a 	mov	r4,r2
    bbf0:	180b883a 	mov	r5,r3
    bbf4:	0006f8c0 	call	6f8c <__muldf3>
    bbf8:	100d883a 	mov	r6,r2
    bbfc:	180f883a 	mov	r7,r3
    bc00:	a009883a 	mov	r4,r20
    bc04:	880b883a 	mov	r5,r17
    bc08:	0005bac0 	call	5bac <__adddf3>
    bc0c:	1009883a 	mov	r4,r2
    bc10:	180b883a 	mov	r5,r3
    bc14:	1029883a 	mov	r20,r2
    bc18:	1823883a 	mov	r17,r3
    bc1c:	00080f40 	call	80f4 <__fixdfsi>
    bc20:	000d883a 	mov	r6,zero
    bc24:	000f883a 	mov	r7,zero
    bc28:	a009883a 	mov	r4,r20
    bc2c:	880b883a 	mov	r5,r17
    bc30:	d8800515 	stw	r2,20(sp)
    bc34:	00138f00 	call	138f0 <__ledf2>
    bc38:	10028716 	blt	r2,zero,c658 <_dtoa_r+0xc88>
    bc3c:	d8c00517 	ldw	r3,20(sp)
    bc40:	00800584 	movi	r2,22
    bc44:	10c27536 	bltu	r2,r3,c61c <_dtoa_r+0xc4c>
    bc48:	180490fa 	slli	r2,r3,3
    bc4c:	00c000b4 	movhi	r3,2
    bc50:	18e00f04 	addi	r3,r3,-32708
    bc54:	1885883a 	add	r2,r3,r2
    bc58:	11000017 	ldw	r4,0(r2)
    bc5c:	11400117 	ldw	r5,4(r2)
    bc60:	900d883a 	mov	r6,r18
    bc64:	980f883a 	mov	r7,r19
    bc68:	0006eb00 	call	6eb0 <__gedf2>
    bc6c:	00828d0e 	bge	zero,r2,c6a4 <_dtoa_r+0xcd4>
    bc70:	d9000517 	ldw	r4,20(sp)
    bc74:	d8000e15 	stw	zero,56(sp)
    bc78:	213fffc4 	addi	r4,r4,-1
    bc7c:	d9000515 	stw	r4,20(sp)
    bc80:	b42dc83a 	sub	r22,r22,r16
    bc84:	b5bfffc4 	addi	r22,r22,-1
    bc88:	b0026f16 	blt	r22,zero,c648 <_dtoa_r+0xc78>
    bc8c:	d8000815 	stw	zero,32(sp)
    bc90:	d9c00517 	ldw	r7,20(sp)
    bc94:	38026416 	blt	r7,zero,c628 <_dtoa_r+0xc58>
    bc98:	b1ed883a 	add	r22,r22,r7
    bc9c:	d9c00d15 	stw	r7,52(sp)
    bca0:	d8000a15 	stw	zero,40(sp)
    bca4:	d9800317 	ldw	r6,12(sp)
    bca8:	00800244 	movi	r2,9
    bcac:	11811436 	bltu	r2,r6,c100 <_dtoa_r+0x730>
    bcb0:	00800144 	movi	r2,5
    bcb4:	1184e10e 	bge	r2,r6,d03c <_dtoa_r+0x166c>
    bcb8:	31bfff04 	addi	r6,r6,-4
    bcbc:	d9800315 	stw	r6,12(sp)
    bcc0:	0023883a 	mov	r17,zero
    bcc4:	d9800317 	ldw	r6,12(sp)
    bcc8:	008000c4 	movi	r2,3
    bccc:	30836726 	beq	r6,r2,ca6c <_dtoa_r+0x109c>
    bcd0:	1183410e 	bge	r2,r6,c9d8 <_dtoa_r+0x1008>
    bcd4:	d9c00317 	ldw	r7,12(sp)
    bcd8:	00800104 	movi	r2,4
    bcdc:	38827c26 	beq	r7,r2,c6d0 <_dtoa_r+0xd00>
    bce0:	00800144 	movi	r2,5
    bce4:	3884c41e 	bne	r7,r2,cff8 <_dtoa_r+0x1628>
    bce8:	00800044 	movi	r2,1
    bcec:	d8800b15 	stw	r2,44(sp)
    bcf0:	d8c00517 	ldw	r3,20(sp)
    bcf4:	d9002217 	ldw	r4,136(sp)
    bcf8:	1907883a 	add	r3,r3,r4
    bcfc:	19800044 	addi	r6,r3,1
    bd00:	d8c00c15 	stw	r3,48(sp)
    bd04:	d9800615 	stw	r6,24(sp)
    bd08:	0183a40e 	bge	zero,r6,cb9c <_dtoa_r+0x11cc>
    bd0c:	d9800617 	ldw	r6,24(sp)
    bd10:	3021883a 	mov	r16,r6
    bd14:	e0001115 	stw	zero,68(fp)
    bd18:	008005c4 	movi	r2,23
    bd1c:	1184c92e 	bgeu	r2,r6,d044 <_dtoa_r+0x1674>
    bd20:	00c00044 	movi	r3,1
    bd24:	00800104 	movi	r2,4
    bd28:	1085883a 	add	r2,r2,r2
    bd2c:	11000504 	addi	r4,r2,20
    bd30:	180b883a 	mov	r5,r3
    bd34:	18c00044 	addi	r3,r3,1
    bd38:	313ffb2e 	bgeu	r6,r4,bd28 <__alt_exception_stack_pointer+0xf800bd28>
    bd3c:	e1401115 	stw	r5,68(fp)
    bd40:	e009883a 	mov	r4,fp
    bd44:	000f3b40 	call	f3b4 <_Balloc>
    bd48:	d8800715 	stw	r2,28(sp)
    bd4c:	e0801015 	stw	r2,64(fp)
    bd50:	00800384 	movi	r2,14
    bd54:	1400f736 	bltu	r2,r16,c134 <_dtoa_r+0x764>
    bd58:	8800f626 	beq	r17,zero,c134 <_dtoa_r+0x764>
    bd5c:	d9c00517 	ldw	r7,20(sp)
    bd60:	01c39a0e 	bge	zero,r7,cbcc <_dtoa_r+0x11fc>
    bd64:	388003cc 	andi	r2,r7,15
    bd68:	100490fa 	slli	r2,r2,3
    bd6c:	382bd13a 	srai	r21,r7,4
    bd70:	00c000b4 	movhi	r3,2
    bd74:	18e00f04 	addi	r3,r3,-32708
    bd78:	1885883a 	add	r2,r3,r2
    bd7c:	a8c0040c 	andi	r3,r21,16
    bd80:	12400017 	ldw	r9,0(r2)
    bd84:	12000117 	ldw	r8,4(r2)
    bd88:	18037926 	beq	r3,zero,cb70 <_dtoa_r+0x11a0>
    bd8c:	008000b4 	movhi	r2,2
    bd90:	10a00504 	addi	r2,r2,-32748
    bd94:	11800817 	ldw	r6,32(r2)
    bd98:	11c00917 	ldw	r7,36(r2)
    bd9c:	9009883a 	mov	r4,r18
    bda0:	980b883a 	mov	r5,r19
    bda4:	da001715 	stw	r8,92(sp)
    bda8:	da401615 	stw	r9,88(sp)
    bdac:	00064580 	call	6458 <__divdf3>
    bdb0:	da001717 	ldw	r8,92(sp)
    bdb4:	da401617 	ldw	r9,88(sp)
    bdb8:	ad4003cc 	andi	r21,r21,15
    bdbc:	040000c4 	movi	r16,3
    bdc0:	1023883a 	mov	r17,r2
    bdc4:	1829883a 	mov	r20,r3
    bdc8:	a8001126 	beq	r21,zero,be10 <_dtoa_r+0x440>
    bdcc:	05c000b4 	movhi	r23,2
    bdd0:	bde00504 	addi	r23,r23,-32748
    bdd4:	4805883a 	mov	r2,r9
    bdd8:	4007883a 	mov	r3,r8
    bddc:	a980004c 	andi	r6,r21,1
    bde0:	1009883a 	mov	r4,r2
    bde4:	a82bd07a 	srai	r21,r21,1
    bde8:	180b883a 	mov	r5,r3
    bdec:	30000426 	beq	r6,zero,be00 <_dtoa_r+0x430>
    bdf0:	b9800017 	ldw	r6,0(r23)
    bdf4:	b9c00117 	ldw	r7,4(r23)
    bdf8:	84000044 	addi	r16,r16,1
    bdfc:	0006f8c0 	call	6f8c <__muldf3>
    be00:	bdc00204 	addi	r23,r23,8
    be04:	a83ff51e 	bne	r21,zero,bddc <__alt_exception_stack_pointer+0xf800bddc>
    be08:	1013883a 	mov	r9,r2
    be0c:	1811883a 	mov	r8,r3
    be10:	480d883a 	mov	r6,r9
    be14:	400f883a 	mov	r7,r8
    be18:	8809883a 	mov	r4,r17
    be1c:	a00b883a 	mov	r5,r20
    be20:	00064580 	call	6458 <__divdf3>
    be24:	d8800f15 	stw	r2,60(sp)
    be28:	d8c01015 	stw	r3,64(sp)
    be2c:	d8c00e17 	ldw	r3,56(sp)
    be30:	18000626 	beq	r3,zero,be4c <_dtoa_r+0x47c>
    be34:	d9000f17 	ldw	r4,60(sp)
    be38:	d9401017 	ldw	r5,64(sp)
    be3c:	000d883a 	mov	r6,zero
    be40:	01cffc34 	movhi	r7,16368
    be44:	00138f00 	call	138f0 <__ledf2>
    be48:	10040b16 	blt	r2,zero,ce78 <_dtoa_r+0x14a8>
    be4c:	8009883a 	mov	r4,r16
    be50:	00081740 	call	8174 <__floatsidf>
    be54:	d9800f17 	ldw	r6,60(sp)
    be58:	d9c01017 	ldw	r7,64(sp)
    be5c:	1009883a 	mov	r4,r2
    be60:	180b883a 	mov	r5,r3
    be64:	0006f8c0 	call	6f8c <__muldf3>
    be68:	000d883a 	mov	r6,zero
    be6c:	01d00734 	movhi	r7,16412
    be70:	1009883a 	mov	r4,r2
    be74:	180b883a 	mov	r5,r3
    be78:	0005bac0 	call	5bac <__adddf3>
    be7c:	1021883a 	mov	r16,r2
    be80:	d8800617 	ldw	r2,24(sp)
    be84:	047f3034 	movhi	r17,64704
    be88:	1c63883a 	add	r17,r3,r17
    be8c:	10031826 	beq	r2,zero,caf0 <_dtoa_r+0x1120>
    be90:	d8c00517 	ldw	r3,20(sp)
    be94:	db000617 	ldw	r12,24(sp)
    be98:	d8c01315 	stw	r3,76(sp)
    be9c:	d9000b17 	ldw	r4,44(sp)
    bea0:	20038f26 	beq	r4,zero,cce0 <_dtoa_r+0x1310>
    bea4:	60bfffc4 	addi	r2,r12,-1
    bea8:	100490fa 	slli	r2,r2,3
    beac:	00c000b4 	movhi	r3,2
    beb0:	18e00f04 	addi	r3,r3,-32708
    beb4:	1885883a 	add	r2,r3,r2
    beb8:	11800017 	ldw	r6,0(r2)
    bebc:	11c00117 	ldw	r7,4(r2)
    bec0:	d8800717 	ldw	r2,28(sp)
    bec4:	0009883a 	mov	r4,zero
    bec8:	014ff834 	movhi	r5,16352
    becc:	db001615 	stw	r12,88(sp)
    bed0:	15c00044 	addi	r23,r2,1
    bed4:	00064580 	call	6458 <__divdf3>
    bed8:	800d883a 	mov	r6,r16
    bedc:	880f883a 	mov	r7,r17
    bee0:	1009883a 	mov	r4,r2
    bee4:	180b883a 	mov	r5,r3
    bee8:	00077f80 	call	77f8 <__subdf3>
    beec:	d9401017 	ldw	r5,64(sp)
    bef0:	d9000f17 	ldw	r4,60(sp)
    bef4:	102b883a 	mov	r21,r2
    bef8:	d8c01215 	stw	r3,72(sp)
    befc:	00080f40 	call	80f4 <__fixdfsi>
    bf00:	1009883a 	mov	r4,r2
    bf04:	1029883a 	mov	r20,r2
    bf08:	00081740 	call	8174 <__floatsidf>
    bf0c:	d9000f17 	ldw	r4,60(sp)
    bf10:	d9401017 	ldw	r5,64(sp)
    bf14:	100d883a 	mov	r6,r2
    bf18:	180f883a 	mov	r7,r3
    bf1c:	00077f80 	call	77f8 <__subdf3>
    bf20:	1823883a 	mov	r17,r3
    bf24:	d8c00717 	ldw	r3,28(sp)
    bf28:	d9401217 	ldw	r5,72(sp)
    bf2c:	a2000c04 	addi	r8,r20,48
    bf30:	1021883a 	mov	r16,r2
    bf34:	1a000005 	stb	r8,0(r3)
    bf38:	800d883a 	mov	r6,r16
    bf3c:	880f883a 	mov	r7,r17
    bf40:	a809883a 	mov	r4,r21
    bf44:	4029883a 	mov	r20,r8
    bf48:	0006eb00 	call	6eb0 <__gedf2>
    bf4c:	00841d16 	blt	zero,r2,cfc4 <_dtoa_r+0x15f4>
    bf50:	800d883a 	mov	r6,r16
    bf54:	880f883a 	mov	r7,r17
    bf58:	0009883a 	mov	r4,zero
    bf5c:	014ffc34 	movhi	r5,16368
    bf60:	00077f80 	call	77f8 <__subdf3>
    bf64:	d9401217 	ldw	r5,72(sp)
    bf68:	100d883a 	mov	r6,r2
    bf6c:	180f883a 	mov	r7,r3
    bf70:	a809883a 	mov	r4,r21
    bf74:	0006eb00 	call	6eb0 <__gedf2>
    bf78:	db001617 	ldw	r12,88(sp)
    bf7c:	00840e16 	blt	zero,r2,cfb8 <_dtoa_r+0x15e8>
    bf80:	00800044 	movi	r2,1
    bf84:	13006b0e 	bge	r2,r12,c134 <_dtoa_r+0x764>
    bf88:	d9000717 	ldw	r4,28(sp)
    bf8c:	dd800f15 	stw	r22,60(sp)
    bf90:	dcc01015 	stw	r19,64(sp)
    bf94:	2319883a 	add	r12,r4,r12
    bf98:	dcc01217 	ldw	r19,72(sp)
    bf9c:	602d883a 	mov	r22,r12
    bfa0:	dc801215 	stw	r18,72(sp)
    bfa4:	b825883a 	mov	r18,r23
    bfa8:	00000906 	br	bfd0 <_dtoa_r+0x600>
    bfac:	00077f80 	call	77f8 <__subdf3>
    bfb0:	a80d883a 	mov	r6,r21
    bfb4:	980f883a 	mov	r7,r19
    bfb8:	1009883a 	mov	r4,r2
    bfbc:	180b883a 	mov	r5,r3
    bfc0:	00138f00 	call	138f0 <__ledf2>
    bfc4:	1003e816 	blt	r2,zero,cf68 <_dtoa_r+0x1598>
    bfc8:	b825883a 	mov	r18,r23
    bfcc:	bd83e926 	beq	r23,r22,cf74 <_dtoa_r+0x15a4>
    bfd0:	a809883a 	mov	r4,r21
    bfd4:	980b883a 	mov	r5,r19
    bfd8:	000d883a 	mov	r6,zero
    bfdc:	01d00934 	movhi	r7,16420
    bfe0:	0006f8c0 	call	6f8c <__muldf3>
    bfe4:	000d883a 	mov	r6,zero
    bfe8:	01d00934 	movhi	r7,16420
    bfec:	8009883a 	mov	r4,r16
    bff0:	880b883a 	mov	r5,r17
    bff4:	102b883a 	mov	r21,r2
    bff8:	1827883a 	mov	r19,r3
    bffc:	0006f8c0 	call	6f8c <__muldf3>
    c000:	180b883a 	mov	r5,r3
    c004:	1009883a 	mov	r4,r2
    c008:	1821883a 	mov	r16,r3
    c00c:	1023883a 	mov	r17,r2
    c010:	00080f40 	call	80f4 <__fixdfsi>
    c014:	1009883a 	mov	r4,r2
    c018:	1029883a 	mov	r20,r2
    c01c:	00081740 	call	8174 <__floatsidf>
    c020:	8809883a 	mov	r4,r17
    c024:	800b883a 	mov	r5,r16
    c028:	100d883a 	mov	r6,r2
    c02c:	180f883a 	mov	r7,r3
    c030:	00077f80 	call	77f8 <__subdf3>
    c034:	a5000c04 	addi	r20,r20,48
    c038:	a80d883a 	mov	r6,r21
    c03c:	980f883a 	mov	r7,r19
    c040:	1009883a 	mov	r4,r2
    c044:	180b883a 	mov	r5,r3
    c048:	95000005 	stb	r20,0(r18)
    c04c:	1021883a 	mov	r16,r2
    c050:	1823883a 	mov	r17,r3
    c054:	00138f00 	call	138f0 <__ledf2>
    c058:	bdc00044 	addi	r23,r23,1
    c05c:	800d883a 	mov	r6,r16
    c060:	880f883a 	mov	r7,r17
    c064:	0009883a 	mov	r4,zero
    c068:	014ffc34 	movhi	r5,16368
    c06c:	103fcf0e 	bge	r2,zero,bfac <__alt_exception_stack_pointer+0xf800bfac>
    c070:	d8c01317 	ldw	r3,76(sp)
    c074:	d8c00515 	stw	r3,20(sp)
    c078:	d9400917 	ldw	r5,36(sp)
    c07c:	e009883a 	mov	r4,fp
    c080:	000f45c0 	call	f45c <_Bfree>
    c084:	d9000517 	ldw	r4,20(sp)
    c088:	d9802317 	ldw	r6,140(sp)
    c08c:	d9c02517 	ldw	r7,148(sp)
    c090:	b8000005 	stb	zero,0(r23)
    c094:	20800044 	addi	r2,r4,1
    c098:	30800015 	stw	r2,0(r6)
    c09c:	3802aa26 	beq	r7,zero,cb48 <_dtoa_r+0x1178>
    c0a0:	3dc00015 	stw	r23,0(r7)
    c0a4:	d8800717 	ldw	r2,28(sp)
    c0a8:	003e7906 	br	ba90 <__alt_exception_stack_pointer+0xf800ba90>
    c0ac:	00800434 	movhi	r2,16
    c0b0:	10bfffc4 	addi	r2,r2,-1
    c0b4:	88a2703a 	and	r17,r17,r2
    c0b8:	883e851e 	bne	r17,zero,bad0 <__alt_exception_stack_pointer+0xf800bad0>
    c0bc:	00800074 	movhi	r2,1
    c0c0:	109ff104 	addi	r2,r2,32708
    c0c4:	003e8406 	br	bad8 <__alt_exception_stack_pointer+0xf800bad8>
    c0c8:	10c00204 	addi	r3,r2,8
    c0cc:	003e8706 	br	baec <__alt_exception_stack_pointer+0xf800baec>
    c0d0:	01400434 	movhi	r5,16
    c0d4:	297fffc4 	addi	r5,r5,-1
    c0d8:	994a703a 	and	r5,r19,r5
    c0dc:	9009883a 	mov	r4,r18
    c0e0:	843f0044 	addi	r16,r16,-1023
    c0e4:	294ffc34 	orhi	r5,r5,16368
    c0e8:	dd800217 	ldw	r22,8(sp)
    c0ec:	d8001115 	stw	zero,68(sp)
    c0f0:	003ea506 	br	bb88 <__alt_exception_stack_pointer+0xf800bb88>
    c0f4:	00800074 	movhi	r2,1
    c0f8:	109fe804 	addi	r2,r2,32672
    c0fc:	003e6406 	br	ba90 <__alt_exception_stack_pointer+0xf800ba90>
    c100:	e0001115 	stw	zero,68(fp)
    c104:	000b883a 	mov	r5,zero
    c108:	e009883a 	mov	r4,fp
    c10c:	000f3b40 	call	f3b4 <_Balloc>
    c110:	01bfffc4 	movi	r6,-1
    c114:	01c00044 	movi	r7,1
    c118:	d8800715 	stw	r2,28(sp)
    c11c:	d9800c15 	stw	r6,48(sp)
    c120:	e0801015 	stw	r2,64(fp)
    c124:	d8000315 	stw	zero,12(sp)
    c128:	d9c00b15 	stw	r7,44(sp)
    c12c:	d9800615 	stw	r6,24(sp)
    c130:	d8002215 	stw	zero,136(sp)
    c134:	d8800117 	ldw	r2,4(sp)
    c138:	10008916 	blt	r2,zero,c360 <_dtoa_r+0x990>
    c13c:	d9000517 	ldw	r4,20(sp)
    c140:	00c00384 	movi	r3,14
    c144:	19008616 	blt	r3,r4,c360 <_dtoa_r+0x990>
    c148:	200490fa 	slli	r2,r4,3
    c14c:	00c000b4 	movhi	r3,2
    c150:	d9802217 	ldw	r6,136(sp)
    c154:	18e00f04 	addi	r3,r3,-32708
    c158:	1885883a 	add	r2,r3,r2
    c15c:	14000017 	ldw	r16,0(r2)
    c160:	14400117 	ldw	r17,4(r2)
    c164:	30016316 	blt	r6,zero,c6f4 <_dtoa_r+0xd24>
    c168:	800d883a 	mov	r6,r16
    c16c:	880f883a 	mov	r7,r17
    c170:	9009883a 	mov	r4,r18
    c174:	980b883a 	mov	r5,r19
    c178:	00064580 	call	6458 <__divdf3>
    c17c:	180b883a 	mov	r5,r3
    c180:	1009883a 	mov	r4,r2
    c184:	00080f40 	call	80f4 <__fixdfsi>
    c188:	1009883a 	mov	r4,r2
    c18c:	102b883a 	mov	r21,r2
    c190:	00081740 	call	8174 <__floatsidf>
    c194:	800d883a 	mov	r6,r16
    c198:	880f883a 	mov	r7,r17
    c19c:	1009883a 	mov	r4,r2
    c1a0:	180b883a 	mov	r5,r3
    c1a4:	0006f8c0 	call	6f8c <__muldf3>
    c1a8:	100d883a 	mov	r6,r2
    c1ac:	180f883a 	mov	r7,r3
    c1b0:	9009883a 	mov	r4,r18
    c1b4:	980b883a 	mov	r5,r19
    c1b8:	00077f80 	call	77f8 <__subdf3>
    c1bc:	d9c00717 	ldw	r7,28(sp)
    c1c0:	1009883a 	mov	r4,r2
    c1c4:	a8800c04 	addi	r2,r21,48
    c1c8:	38800005 	stb	r2,0(r7)
    c1cc:	3dc00044 	addi	r23,r7,1
    c1d0:	d9c00617 	ldw	r7,24(sp)
    c1d4:	01800044 	movi	r6,1
    c1d8:	180b883a 	mov	r5,r3
    c1dc:	2005883a 	mov	r2,r4
    c1e0:	39803826 	beq	r7,r6,c2c4 <_dtoa_r+0x8f4>
    c1e4:	000d883a 	mov	r6,zero
    c1e8:	01d00934 	movhi	r7,16420
    c1ec:	0006f8c0 	call	6f8c <__muldf3>
    c1f0:	000d883a 	mov	r6,zero
    c1f4:	000f883a 	mov	r7,zero
    c1f8:	1009883a 	mov	r4,r2
    c1fc:	180b883a 	mov	r5,r3
    c200:	1025883a 	mov	r18,r2
    c204:	1827883a 	mov	r19,r3
    c208:	0006e280 	call	6e28 <__eqdf2>
    c20c:	103f9a26 	beq	r2,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c210:	d9c00617 	ldw	r7,24(sp)
    c214:	d8c00717 	ldw	r3,28(sp)
    c218:	b829883a 	mov	r20,r23
    c21c:	38bfffc4 	addi	r2,r7,-1
    c220:	18ad883a 	add	r22,r3,r2
    c224:	00000a06 	br	c250 <_dtoa_r+0x880>
    c228:	0006f8c0 	call	6f8c <__muldf3>
    c22c:	000d883a 	mov	r6,zero
    c230:	000f883a 	mov	r7,zero
    c234:	1009883a 	mov	r4,r2
    c238:	180b883a 	mov	r5,r3
    c23c:	1025883a 	mov	r18,r2
    c240:	1827883a 	mov	r19,r3
    c244:	b829883a 	mov	r20,r23
    c248:	0006e280 	call	6e28 <__eqdf2>
    c24c:	103f8a26 	beq	r2,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c250:	800d883a 	mov	r6,r16
    c254:	880f883a 	mov	r7,r17
    c258:	9009883a 	mov	r4,r18
    c25c:	980b883a 	mov	r5,r19
    c260:	00064580 	call	6458 <__divdf3>
    c264:	180b883a 	mov	r5,r3
    c268:	1009883a 	mov	r4,r2
    c26c:	00080f40 	call	80f4 <__fixdfsi>
    c270:	1009883a 	mov	r4,r2
    c274:	102b883a 	mov	r21,r2
    c278:	00081740 	call	8174 <__floatsidf>
    c27c:	800d883a 	mov	r6,r16
    c280:	880f883a 	mov	r7,r17
    c284:	1009883a 	mov	r4,r2
    c288:	180b883a 	mov	r5,r3
    c28c:	0006f8c0 	call	6f8c <__muldf3>
    c290:	100d883a 	mov	r6,r2
    c294:	180f883a 	mov	r7,r3
    c298:	9009883a 	mov	r4,r18
    c29c:	980b883a 	mov	r5,r19
    c2a0:	00077f80 	call	77f8 <__subdf3>
    c2a4:	aa000c04 	addi	r8,r21,48
    c2a8:	a2000005 	stb	r8,0(r20)
    c2ac:	000d883a 	mov	r6,zero
    c2b0:	01d00934 	movhi	r7,16420
    c2b4:	1009883a 	mov	r4,r2
    c2b8:	180b883a 	mov	r5,r3
    c2bc:	a5c00044 	addi	r23,r20,1
    c2c0:	b53fd91e 	bne	r22,r20,c228 <__alt_exception_stack_pointer+0xf800c228>
    c2c4:	100d883a 	mov	r6,r2
    c2c8:	180f883a 	mov	r7,r3
    c2cc:	1009883a 	mov	r4,r2
    c2d0:	180b883a 	mov	r5,r3
    c2d4:	0005bac0 	call	5bac <__adddf3>
    c2d8:	100d883a 	mov	r6,r2
    c2dc:	180f883a 	mov	r7,r3
    c2e0:	8009883a 	mov	r4,r16
    c2e4:	880b883a 	mov	r5,r17
    c2e8:	1027883a 	mov	r19,r2
    c2ec:	1825883a 	mov	r18,r3
    c2f0:	00138f00 	call	138f0 <__ledf2>
    c2f4:	10000816 	blt	r2,zero,c318 <_dtoa_r+0x948>
    c2f8:	980d883a 	mov	r6,r19
    c2fc:	900f883a 	mov	r7,r18
    c300:	8009883a 	mov	r4,r16
    c304:	880b883a 	mov	r5,r17
    c308:	0006e280 	call	6e28 <__eqdf2>
    c30c:	103f5a1e 	bne	r2,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c310:	ad40004c 	andi	r21,r21,1
    c314:	a83f5826 	beq	r21,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c318:	bd3fffc3 	ldbu	r20,-1(r23)
    c31c:	b8bfffc4 	addi	r2,r23,-1
    c320:	1007883a 	mov	r3,r2
    c324:	01400e44 	movi	r5,57
    c328:	d9800717 	ldw	r6,28(sp)
    c32c:	00000506 	br	c344 <_dtoa_r+0x974>
    c330:	18ffffc4 	addi	r3,r3,-1
    c334:	11824726 	beq	r2,r6,cc54 <_dtoa_r+0x1284>
    c338:	1d000003 	ldbu	r20,0(r3)
    c33c:	102f883a 	mov	r23,r2
    c340:	10bfffc4 	addi	r2,r2,-1
    c344:	a1003fcc 	andi	r4,r20,255
    c348:	2100201c 	xori	r4,r4,128
    c34c:	213fe004 	addi	r4,r4,-128
    c350:	217ff726 	beq	r4,r5,c330 <__alt_exception_stack_pointer+0xf800c330>
    c354:	a2000044 	addi	r8,r20,1
    c358:	12000005 	stb	r8,0(r2)
    c35c:	003f4606 	br	c078 <__alt_exception_stack_pointer+0xf800c078>
    c360:	d9000b17 	ldw	r4,44(sp)
    c364:	2000c826 	beq	r4,zero,c688 <_dtoa_r+0xcb8>
    c368:	d9800317 	ldw	r6,12(sp)
    c36c:	00c00044 	movi	r3,1
    c370:	1980f90e 	bge	r3,r6,c758 <_dtoa_r+0xd88>
    c374:	d8800617 	ldw	r2,24(sp)
    c378:	d8c00a17 	ldw	r3,40(sp)
    c37c:	157fffc4 	addi	r21,r2,-1
    c380:	1d41f316 	blt	r3,r21,cb50 <_dtoa_r+0x1180>
    c384:	1d6bc83a 	sub	r21,r3,r21
    c388:	d9c00617 	ldw	r7,24(sp)
    c38c:	3802aa16 	blt	r7,zero,ce38 <_dtoa_r+0x1468>
    c390:	dd000817 	ldw	r20,32(sp)
    c394:	d8800617 	ldw	r2,24(sp)
    c398:	d8c00817 	ldw	r3,32(sp)
    c39c:	01400044 	movi	r5,1
    c3a0:	e009883a 	mov	r4,fp
    c3a4:	1887883a 	add	r3,r3,r2
    c3a8:	d8c00815 	stw	r3,32(sp)
    c3ac:	b0ad883a 	add	r22,r22,r2
    c3b0:	000f7e80 	call	f7e8 <__i2b>
    c3b4:	1023883a 	mov	r17,r2
    c3b8:	a0000826 	beq	r20,zero,c3dc <_dtoa_r+0xa0c>
    c3bc:	0580070e 	bge	zero,r22,c3dc <_dtoa_r+0xa0c>
    c3c0:	a005883a 	mov	r2,r20
    c3c4:	b500b916 	blt	r22,r20,c6ac <_dtoa_r+0xcdc>
    c3c8:	d9000817 	ldw	r4,32(sp)
    c3cc:	a0a9c83a 	sub	r20,r20,r2
    c3d0:	b0adc83a 	sub	r22,r22,r2
    c3d4:	2089c83a 	sub	r4,r4,r2
    c3d8:	d9000815 	stw	r4,32(sp)
    c3dc:	d9800a17 	ldw	r6,40(sp)
    c3e0:	0181810e 	bge	zero,r6,c9e8 <_dtoa_r+0x1018>
    c3e4:	d9c00b17 	ldw	r7,44(sp)
    c3e8:	3800b326 	beq	r7,zero,c6b8 <_dtoa_r+0xce8>
    c3ec:	a800b226 	beq	r21,zero,c6b8 <_dtoa_r+0xce8>
    c3f0:	880b883a 	mov	r5,r17
    c3f4:	a80d883a 	mov	r6,r21
    c3f8:	e009883a 	mov	r4,fp
    c3fc:	000fab00 	call	fab0 <__pow5mult>
    c400:	d9800917 	ldw	r6,36(sp)
    c404:	100b883a 	mov	r5,r2
    c408:	e009883a 	mov	r4,fp
    c40c:	1023883a 	mov	r17,r2
    c410:	000f8240 	call	f824 <__multiply>
    c414:	1021883a 	mov	r16,r2
    c418:	d8800a17 	ldw	r2,40(sp)
    c41c:	d9400917 	ldw	r5,36(sp)
    c420:	e009883a 	mov	r4,fp
    c424:	1545c83a 	sub	r2,r2,r21
    c428:	d8800a15 	stw	r2,40(sp)
    c42c:	000f45c0 	call	f45c <_Bfree>
    c430:	d8c00a17 	ldw	r3,40(sp)
    c434:	18009f1e 	bne	r3,zero,c6b4 <_dtoa_r+0xce4>
    c438:	05c00044 	movi	r23,1
    c43c:	e009883a 	mov	r4,fp
    c440:	b80b883a 	mov	r5,r23
    c444:	000f7e80 	call	f7e8 <__i2b>
    c448:	d9000d17 	ldw	r4,52(sp)
    c44c:	102b883a 	mov	r21,r2
    c450:	2000ce26 	beq	r4,zero,c78c <_dtoa_r+0xdbc>
    c454:	200d883a 	mov	r6,r4
    c458:	100b883a 	mov	r5,r2
    c45c:	e009883a 	mov	r4,fp
    c460:	000fab00 	call	fab0 <__pow5mult>
    c464:	d9800317 	ldw	r6,12(sp)
    c468:	102b883a 	mov	r21,r2
    c46c:	b981810e 	bge	r23,r6,ca74 <_dtoa_r+0x10a4>
    c470:	0027883a 	mov	r19,zero
    c474:	a8800417 	ldw	r2,16(r21)
    c478:	05c00804 	movi	r23,32
    c47c:	10800104 	addi	r2,r2,4
    c480:	1085883a 	add	r2,r2,r2
    c484:	1085883a 	add	r2,r2,r2
    c488:	a885883a 	add	r2,r21,r2
    c48c:	11000017 	ldw	r4,0(r2)
    c490:	000f6d00 	call	f6d0 <__hi0bits>
    c494:	b885c83a 	sub	r2,r23,r2
    c498:	1585883a 	add	r2,r2,r22
    c49c:	108007cc 	andi	r2,r2,31
    c4a0:	1000b326 	beq	r2,zero,c770 <_dtoa_r+0xda0>
    c4a4:	00c00804 	movi	r3,32
    c4a8:	1887c83a 	sub	r3,r3,r2
    c4ac:	01000104 	movi	r4,4
    c4b0:	20c2cd0e 	bge	r4,r3,cfe8 <_dtoa_r+0x1618>
    c4b4:	00c00704 	movi	r3,28
    c4b8:	1885c83a 	sub	r2,r3,r2
    c4bc:	d8c00817 	ldw	r3,32(sp)
    c4c0:	a0a9883a 	add	r20,r20,r2
    c4c4:	b0ad883a 	add	r22,r22,r2
    c4c8:	1887883a 	add	r3,r3,r2
    c4cc:	d8c00815 	stw	r3,32(sp)
    c4d0:	d9800817 	ldw	r6,32(sp)
    c4d4:	0180040e 	bge	zero,r6,c4e8 <_dtoa_r+0xb18>
    c4d8:	800b883a 	mov	r5,r16
    c4dc:	e009883a 	mov	r4,fp
    c4e0:	000fbf00 	call	fbf0 <__lshift>
    c4e4:	1021883a 	mov	r16,r2
    c4e8:	0580050e 	bge	zero,r22,c500 <_dtoa_r+0xb30>
    c4ec:	a80b883a 	mov	r5,r21
    c4f0:	b00d883a 	mov	r6,r22
    c4f4:	e009883a 	mov	r4,fp
    c4f8:	000fbf00 	call	fbf0 <__lshift>
    c4fc:	102b883a 	mov	r21,r2
    c500:	d9c00e17 	ldw	r7,56(sp)
    c504:	3801211e 	bne	r7,zero,c98c <_dtoa_r+0xfbc>
    c508:	d9800617 	ldw	r6,24(sp)
    c50c:	0181380e 	bge	zero,r6,c9f0 <_dtoa_r+0x1020>
    c510:	d8c00b17 	ldw	r3,44(sp)
    c514:	1800ab1e 	bne	r3,zero,c7c4 <_dtoa_r+0xdf4>
    c518:	dc800717 	ldw	r18,28(sp)
    c51c:	dcc00617 	ldw	r19,24(sp)
    c520:	9029883a 	mov	r20,r18
    c524:	00000206 	br	c530 <_dtoa_r+0xb60>
    c528:	000f4840 	call	f484 <__multadd>
    c52c:	1021883a 	mov	r16,r2
    c530:	a80b883a 	mov	r5,r21
    c534:	8009883a 	mov	r4,r16
    c538:	000b7a80 	call	b7a8 <quorem>
    c53c:	10800c04 	addi	r2,r2,48
    c540:	90800005 	stb	r2,0(r18)
    c544:	94800044 	addi	r18,r18,1
    c548:	9507c83a 	sub	r3,r18,r20
    c54c:	000f883a 	mov	r7,zero
    c550:	01800284 	movi	r6,10
    c554:	800b883a 	mov	r5,r16
    c558:	e009883a 	mov	r4,fp
    c55c:	1cfff216 	blt	r3,r19,c528 <__alt_exception_stack_pointer+0xf800c528>
    c560:	1011883a 	mov	r8,r2
    c564:	d8800617 	ldw	r2,24(sp)
    c568:	0082370e 	bge	zero,r2,ce48 <_dtoa_r+0x1478>
    c56c:	d9000717 	ldw	r4,28(sp)
    c570:	0025883a 	mov	r18,zero
    c574:	20af883a 	add	r23,r4,r2
    c578:	01800044 	movi	r6,1
    c57c:	800b883a 	mov	r5,r16
    c580:	e009883a 	mov	r4,fp
    c584:	da001715 	stw	r8,92(sp)
    c588:	000fbf00 	call	fbf0 <__lshift>
    c58c:	a80b883a 	mov	r5,r21
    c590:	1009883a 	mov	r4,r2
    c594:	d8800915 	stw	r2,36(sp)
    c598:	000fd380 	call	fd38 <__mcmp>
    c59c:	da001717 	ldw	r8,92(sp)
    c5a0:	0081800e 	bge	zero,r2,cba4 <_dtoa_r+0x11d4>
    c5a4:	b93fffc3 	ldbu	r4,-1(r23)
    c5a8:	b8bfffc4 	addi	r2,r23,-1
    c5ac:	1007883a 	mov	r3,r2
    c5b0:	01800e44 	movi	r6,57
    c5b4:	d9c00717 	ldw	r7,28(sp)
    c5b8:	00000506 	br	c5d0 <_dtoa_r+0xc00>
    c5bc:	18ffffc4 	addi	r3,r3,-1
    c5c0:	11c12326 	beq	r2,r7,ca50 <_dtoa_r+0x1080>
    c5c4:	19000003 	ldbu	r4,0(r3)
    c5c8:	102f883a 	mov	r23,r2
    c5cc:	10bfffc4 	addi	r2,r2,-1
    c5d0:	21403fcc 	andi	r5,r4,255
    c5d4:	2940201c 	xori	r5,r5,128
    c5d8:	297fe004 	addi	r5,r5,-128
    c5dc:	29bff726 	beq	r5,r6,c5bc <__alt_exception_stack_pointer+0xf800c5bc>
    c5e0:	21000044 	addi	r4,r4,1
    c5e4:	11000005 	stb	r4,0(r2)
    c5e8:	a80b883a 	mov	r5,r21
    c5ec:	e009883a 	mov	r4,fp
    c5f0:	000f45c0 	call	f45c <_Bfree>
    c5f4:	883ea026 	beq	r17,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c5f8:	90000426 	beq	r18,zero,c60c <_dtoa_r+0xc3c>
    c5fc:	94400326 	beq	r18,r17,c60c <_dtoa_r+0xc3c>
    c600:	900b883a 	mov	r5,r18
    c604:	e009883a 	mov	r4,fp
    c608:	000f45c0 	call	f45c <_Bfree>
    c60c:	880b883a 	mov	r5,r17
    c610:	e009883a 	mov	r4,fp
    c614:	000f45c0 	call	f45c <_Bfree>
    c618:	003e9706 	br	c078 <__alt_exception_stack_pointer+0xf800c078>
    c61c:	01800044 	movi	r6,1
    c620:	d9800e15 	stw	r6,56(sp)
    c624:	003d9606 	br	bc80 <__alt_exception_stack_pointer+0xf800bc80>
    c628:	d8800817 	ldw	r2,32(sp)
    c62c:	d8c00517 	ldw	r3,20(sp)
    c630:	d8000d15 	stw	zero,52(sp)
    c634:	10c5c83a 	sub	r2,r2,r3
    c638:	00c9c83a 	sub	r4,zero,r3
    c63c:	d8800815 	stw	r2,32(sp)
    c640:	d9000a15 	stw	r4,40(sp)
    c644:	003d9706 	br	bca4 <__alt_exception_stack_pointer+0xf800bca4>
    c648:	05adc83a 	sub	r22,zero,r22
    c64c:	dd800815 	stw	r22,32(sp)
    c650:	002d883a 	mov	r22,zero
    c654:	003d8e06 	br	bc90 <__alt_exception_stack_pointer+0xf800bc90>
    c658:	d9000517 	ldw	r4,20(sp)
    c65c:	00081740 	call	8174 <__floatsidf>
    c660:	100d883a 	mov	r6,r2
    c664:	180f883a 	mov	r7,r3
    c668:	a009883a 	mov	r4,r20
    c66c:	880b883a 	mov	r5,r17
    c670:	0006e280 	call	6e28 <__eqdf2>
    c674:	103d7126 	beq	r2,zero,bc3c <__alt_exception_stack_pointer+0xf800bc3c>
    c678:	d9c00517 	ldw	r7,20(sp)
    c67c:	39ffffc4 	addi	r7,r7,-1
    c680:	d9c00515 	stw	r7,20(sp)
    c684:	003d6d06 	br	bc3c <__alt_exception_stack_pointer+0xf800bc3c>
    c688:	dd400a17 	ldw	r21,40(sp)
    c68c:	dd000817 	ldw	r20,32(sp)
    c690:	0023883a 	mov	r17,zero
    c694:	003f4806 	br	c3b8 <__alt_exception_stack_pointer+0xf800c3b8>
    c698:	10e3c83a 	sub	r17,r2,r3
    c69c:	9448983a 	sll	r4,r18,r17
    c6a0:	003d3206 	br	bb6c <__alt_exception_stack_pointer+0xf800bb6c>
    c6a4:	d8000e15 	stw	zero,56(sp)
    c6a8:	003d7506 	br	bc80 <__alt_exception_stack_pointer+0xf800bc80>
    c6ac:	b005883a 	mov	r2,r22
    c6b0:	003f4506 	br	c3c8 <__alt_exception_stack_pointer+0xf800c3c8>
    c6b4:	dc000915 	stw	r16,36(sp)
    c6b8:	d9800a17 	ldw	r6,40(sp)
    c6bc:	d9400917 	ldw	r5,36(sp)
    c6c0:	e009883a 	mov	r4,fp
    c6c4:	000fab00 	call	fab0 <__pow5mult>
    c6c8:	1021883a 	mov	r16,r2
    c6cc:	003f5a06 	br	c438 <__alt_exception_stack_pointer+0xf800c438>
    c6d0:	01c00044 	movi	r7,1
    c6d4:	d9c00b15 	stw	r7,44(sp)
    c6d8:	d8802217 	ldw	r2,136(sp)
    c6dc:	0081280e 	bge	zero,r2,cb80 <_dtoa_r+0x11b0>
    c6e0:	100d883a 	mov	r6,r2
    c6e4:	1021883a 	mov	r16,r2
    c6e8:	d8800c15 	stw	r2,48(sp)
    c6ec:	d8800615 	stw	r2,24(sp)
    c6f0:	003d8806 	br	bd14 <__alt_exception_stack_pointer+0xf800bd14>
    c6f4:	d8800617 	ldw	r2,24(sp)
    c6f8:	00be9b16 	blt	zero,r2,c168 <__alt_exception_stack_pointer+0xf800c168>
    c6fc:	10010f1e 	bne	r2,zero,cb3c <_dtoa_r+0x116c>
    c700:	880b883a 	mov	r5,r17
    c704:	000d883a 	mov	r6,zero
    c708:	01d00534 	movhi	r7,16404
    c70c:	8009883a 	mov	r4,r16
    c710:	0006f8c0 	call	6f8c <__muldf3>
    c714:	900d883a 	mov	r6,r18
    c718:	980f883a 	mov	r7,r19
    c71c:	1009883a 	mov	r4,r2
    c720:	180b883a 	mov	r5,r3
    c724:	0006eb00 	call	6eb0 <__gedf2>
    c728:	002b883a 	mov	r21,zero
    c72c:	0023883a 	mov	r17,zero
    c730:	1000bf16 	blt	r2,zero,ca30 <_dtoa_r+0x1060>
    c734:	d9802217 	ldw	r6,136(sp)
    c738:	ddc00717 	ldw	r23,28(sp)
    c73c:	018c303a 	nor	r6,zero,r6
    c740:	d9800515 	stw	r6,20(sp)
    c744:	a80b883a 	mov	r5,r21
    c748:	e009883a 	mov	r4,fp
    c74c:	000f45c0 	call	f45c <_Bfree>
    c750:	883e4926 	beq	r17,zero,c078 <__alt_exception_stack_pointer+0xf800c078>
    c754:	003fad06 	br	c60c <__alt_exception_stack_pointer+0xf800c60c>
    c758:	d9c01117 	ldw	r7,68(sp)
    c75c:	3801bc26 	beq	r7,zero,ce50 <_dtoa_r+0x1480>
    c760:	10810cc4 	addi	r2,r2,1075
    c764:	dd400a17 	ldw	r21,40(sp)
    c768:	dd000817 	ldw	r20,32(sp)
    c76c:	003f0a06 	br	c398 <__alt_exception_stack_pointer+0xf800c398>
    c770:	00800704 	movi	r2,28
    c774:	d9000817 	ldw	r4,32(sp)
    c778:	a0a9883a 	add	r20,r20,r2
    c77c:	b0ad883a 	add	r22,r22,r2
    c780:	2089883a 	add	r4,r4,r2
    c784:	d9000815 	stw	r4,32(sp)
    c788:	003f5106 	br	c4d0 <__alt_exception_stack_pointer+0xf800c4d0>
    c78c:	d8c00317 	ldw	r3,12(sp)
    c790:	b8c1fc0e 	bge	r23,r3,cf84 <_dtoa_r+0x15b4>
    c794:	0027883a 	mov	r19,zero
    c798:	b805883a 	mov	r2,r23
    c79c:	003f3e06 	br	c498 <__alt_exception_stack_pointer+0xf800c498>
    c7a0:	880b883a 	mov	r5,r17
    c7a4:	e009883a 	mov	r4,fp
    c7a8:	000f883a 	mov	r7,zero
    c7ac:	01800284 	movi	r6,10
    c7b0:	000f4840 	call	f484 <__multadd>
    c7b4:	d9000c17 	ldw	r4,48(sp)
    c7b8:	1023883a 	mov	r17,r2
    c7bc:	0102040e 	bge	zero,r4,cfd0 <_dtoa_r+0x1600>
    c7c0:	d9000615 	stw	r4,24(sp)
    c7c4:	0500050e 	bge	zero,r20,c7dc <_dtoa_r+0xe0c>
    c7c8:	880b883a 	mov	r5,r17
    c7cc:	a00d883a 	mov	r6,r20
    c7d0:	e009883a 	mov	r4,fp
    c7d4:	000fbf00 	call	fbf0 <__lshift>
    c7d8:	1023883a 	mov	r17,r2
    c7dc:	9801241e 	bne	r19,zero,cc70 <_dtoa_r+0x12a0>
    c7e0:	8829883a 	mov	r20,r17
    c7e4:	d9000617 	ldw	r4,24(sp)
    c7e8:	dcc00717 	ldw	r19,28(sp)
    c7ec:	9480004c 	andi	r18,r18,1
    c7f0:	20bfffc4 	addi	r2,r4,-1
    c7f4:	9885883a 	add	r2,r19,r2
    c7f8:	d8800415 	stw	r2,16(sp)
    c7fc:	dc800615 	stw	r18,24(sp)
    c800:	a80b883a 	mov	r5,r21
    c804:	8009883a 	mov	r4,r16
    c808:	000b7a80 	call	b7a8 <quorem>
    c80c:	880b883a 	mov	r5,r17
    c810:	8009883a 	mov	r4,r16
    c814:	102f883a 	mov	r23,r2
    c818:	000fd380 	call	fd38 <__mcmp>
    c81c:	a80b883a 	mov	r5,r21
    c820:	a00d883a 	mov	r6,r20
    c824:	e009883a 	mov	r4,fp
    c828:	102d883a 	mov	r22,r2
    c82c:	000fd980 	call	fd98 <__mdiff>
    c830:	1007883a 	mov	r3,r2
    c834:	10800317 	ldw	r2,12(r2)
    c838:	bc800c04 	addi	r18,r23,48
    c83c:	180b883a 	mov	r5,r3
    c840:	10004e1e 	bne	r2,zero,c97c <_dtoa_r+0xfac>
    c844:	8009883a 	mov	r4,r16
    c848:	d8c01615 	stw	r3,88(sp)
    c84c:	000fd380 	call	fd38 <__mcmp>
    c850:	d8c01617 	ldw	r3,88(sp)
    c854:	e009883a 	mov	r4,fp
    c858:	d8801615 	stw	r2,88(sp)
    c85c:	180b883a 	mov	r5,r3
    c860:	000f45c0 	call	f45c <_Bfree>
    c864:	d8801617 	ldw	r2,88(sp)
    c868:	1000041e 	bne	r2,zero,c87c <_dtoa_r+0xeac>
    c86c:	d9800317 	ldw	r6,12(sp)
    c870:	3000021e 	bne	r6,zero,c87c <_dtoa_r+0xeac>
    c874:	d8c00617 	ldw	r3,24(sp)
    c878:	18003726 	beq	r3,zero,c958 <_dtoa_r+0xf88>
    c87c:	b0002016 	blt	r22,zero,c900 <_dtoa_r+0xf30>
    c880:	b000041e 	bne	r22,zero,c894 <_dtoa_r+0xec4>
    c884:	d9000317 	ldw	r4,12(sp)
    c888:	2000021e 	bne	r4,zero,c894 <_dtoa_r+0xec4>
    c88c:	d8c00617 	ldw	r3,24(sp)
    c890:	18001b26 	beq	r3,zero,c900 <_dtoa_r+0xf30>
    c894:	00810716 	blt	zero,r2,ccb4 <_dtoa_r+0x12e4>
    c898:	d8c00417 	ldw	r3,16(sp)
    c89c:	9d800044 	addi	r22,r19,1
    c8a0:	9c800005 	stb	r18,0(r19)
    c8a4:	b02f883a 	mov	r23,r22
    c8a8:	98c10626 	beq	r19,r3,ccc4 <_dtoa_r+0x12f4>
    c8ac:	800b883a 	mov	r5,r16
    c8b0:	000f883a 	mov	r7,zero
    c8b4:	01800284 	movi	r6,10
    c8b8:	e009883a 	mov	r4,fp
    c8bc:	000f4840 	call	f484 <__multadd>
    c8c0:	1021883a 	mov	r16,r2
    c8c4:	000f883a 	mov	r7,zero
    c8c8:	01800284 	movi	r6,10
    c8cc:	880b883a 	mov	r5,r17
    c8d0:	e009883a 	mov	r4,fp
    c8d4:	8d002526 	beq	r17,r20,c96c <_dtoa_r+0xf9c>
    c8d8:	000f4840 	call	f484 <__multadd>
    c8dc:	a00b883a 	mov	r5,r20
    c8e0:	000f883a 	mov	r7,zero
    c8e4:	01800284 	movi	r6,10
    c8e8:	e009883a 	mov	r4,fp
    c8ec:	1023883a 	mov	r17,r2
    c8f0:	000f4840 	call	f484 <__multadd>
    c8f4:	1029883a 	mov	r20,r2
    c8f8:	b027883a 	mov	r19,r22
    c8fc:	003fc006 	br	c800 <__alt_exception_stack_pointer+0xf800c800>
    c900:	9011883a 	mov	r8,r18
    c904:	00800e0e 	bge	zero,r2,c940 <_dtoa_r+0xf70>
    c908:	800b883a 	mov	r5,r16
    c90c:	01800044 	movi	r6,1
    c910:	e009883a 	mov	r4,fp
    c914:	da001715 	stw	r8,92(sp)
    c918:	000fbf00 	call	fbf0 <__lshift>
    c91c:	a80b883a 	mov	r5,r21
    c920:	1009883a 	mov	r4,r2
    c924:	1021883a 	mov	r16,r2
    c928:	000fd380 	call	fd38 <__mcmp>
    c92c:	da001717 	ldw	r8,92(sp)
    c930:	0081960e 	bge	zero,r2,cf8c <_dtoa_r+0x15bc>
    c934:	00800e44 	movi	r2,57
    c938:	40817026 	beq	r8,r2,cefc <_dtoa_r+0x152c>
    c93c:	ba000c44 	addi	r8,r23,49
    c940:	8825883a 	mov	r18,r17
    c944:	9dc00044 	addi	r23,r19,1
    c948:	9a000005 	stb	r8,0(r19)
    c94c:	a023883a 	mov	r17,r20
    c950:	dc000915 	stw	r16,36(sp)
    c954:	003f2406 	br	c5e8 <__alt_exception_stack_pointer+0xf800c5e8>
    c958:	00800e44 	movi	r2,57
    c95c:	9011883a 	mov	r8,r18
    c960:	90816626 	beq	r18,r2,cefc <_dtoa_r+0x152c>
    c964:	05bff516 	blt	zero,r22,c93c <__alt_exception_stack_pointer+0xf800c93c>
    c968:	003ff506 	br	c940 <__alt_exception_stack_pointer+0xf800c940>
    c96c:	000f4840 	call	f484 <__multadd>
    c970:	1023883a 	mov	r17,r2
    c974:	1029883a 	mov	r20,r2
    c978:	003fdf06 	br	c8f8 <__alt_exception_stack_pointer+0xf800c8f8>
    c97c:	e009883a 	mov	r4,fp
    c980:	000f45c0 	call	f45c <_Bfree>
    c984:	00800044 	movi	r2,1
    c988:	003fbc06 	br	c87c <__alt_exception_stack_pointer+0xf800c87c>
    c98c:	a80b883a 	mov	r5,r21
    c990:	8009883a 	mov	r4,r16
    c994:	000fd380 	call	fd38 <__mcmp>
    c998:	103edb0e 	bge	r2,zero,c508 <__alt_exception_stack_pointer+0xf800c508>
    c99c:	800b883a 	mov	r5,r16
    c9a0:	000f883a 	mov	r7,zero
    c9a4:	01800284 	movi	r6,10
    c9a8:	e009883a 	mov	r4,fp
    c9ac:	000f4840 	call	f484 <__multadd>
    c9b0:	1021883a 	mov	r16,r2
    c9b4:	d8800517 	ldw	r2,20(sp)
    c9b8:	d8c00b17 	ldw	r3,44(sp)
    c9bc:	10bfffc4 	addi	r2,r2,-1
    c9c0:	d8800515 	stw	r2,20(sp)
    c9c4:	183f761e 	bne	r3,zero,c7a0 <__alt_exception_stack_pointer+0xf800c7a0>
    c9c8:	d9000c17 	ldw	r4,48(sp)
    c9cc:	0101730e 	bge	zero,r4,cf9c <_dtoa_r+0x15cc>
    c9d0:	d9000615 	stw	r4,24(sp)
    c9d4:	003ed006 	br	c518 <__alt_exception_stack_pointer+0xf800c518>
    c9d8:	00800084 	movi	r2,2
    c9dc:	3081861e 	bne	r6,r2,cff8 <_dtoa_r+0x1628>
    c9e0:	d8000b15 	stw	zero,44(sp)
    c9e4:	003f3c06 	br	c6d8 <__alt_exception_stack_pointer+0xf800c6d8>
    c9e8:	dc000917 	ldw	r16,36(sp)
    c9ec:	003e9206 	br	c438 <__alt_exception_stack_pointer+0xf800c438>
    c9f0:	d9c00317 	ldw	r7,12(sp)
    c9f4:	00800084 	movi	r2,2
    c9f8:	11fec50e 	bge	r2,r7,c510 <__alt_exception_stack_pointer+0xf800c510>
    c9fc:	d9000617 	ldw	r4,24(sp)
    ca00:	20013c1e 	bne	r4,zero,cef4 <_dtoa_r+0x1524>
    ca04:	a80b883a 	mov	r5,r21
    ca08:	000f883a 	mov	r7,zero
    ca0c:	01800144 	movi	r6,5
    ca10:	e009883a 	mov	r4,fp
    ca14:	000f4840 	call	f484 <__multadd>
    ca18:	100b883a 	mov	r5,r2
    ca1c:	8009883a 	mov	r4,r16
    ca20:	102b883a 	mov	r21,r2
    ca24:	000fd380 	call	fd38 <__mcmp>
    ca28:	dc000915 	stw	r16,36(sp)
    ca2c:	00bf410e 	bge	zero,r2,c734 <__alt_exception_stack_pointer+0xf800c734>
    ca30:	d9c00717 	ldw	r7,28(sp)
    ca34:	00800c44 	movi	r2,49
    ca38:	38800005 	stb	r2,0(r7)
    ca3c:	d8800517 	ldw	r2,20(sp)
    ca40:	3dc00044 	addi	r23,r7,1
    ca44:	10800044 	addi	r2,r2,1
    ca48:	d8800515 	stw	r2,20(sp)
    ca4c:	003f3d06 	br	c744 <__alt_exception_stack_pointer+0xf800c744>
    ca50:	d9800517 	ldw	r6,20(sp)
    ca54:	d9c00717 	ldw	r7,28(sp)
    ca58:	00800c44 	movi	r2,49
    ca5c:	31800044 	addi	r6,r6,1
    ca60:	d9800515 	stw	r6,20(sp)
    ca64:	38800005 	stb	r2,0(r7)
    ca68:	003edf06 	br	c5e8 <__alt_exception_stack_pointer+0xf800c5e8>
    ca6c:	d8000b15 	stw	zero,44(sp)
    ca70:	003c9f06 	br	bcf0 <__alt_exception_stack_pointer+0xf800bcf0>
    ca74:	903e7e1e 	bne	r18,zero,c470 <__alt_exception_stack_pointer+0xf800c470>
    ca78:	00800434 	movhi	r2,16
    ca7c:	10bfffc4 	addi	r2,r2,-1
    ca80:	9884703a 	and	r2,r19,r2
    ca84:	1000ea1e 	bne	r2,zero,ce30 <_dtoa_r+0x1460>
    ca88:	9cdffc2c 	andhi	r19,r19,32752
    ca8c:	9800e826 	beq	r19,zero,ce30 <_dtoa_r+0x1460>
    ca90:	d9c00817 	ldw	r7,32(sp)
    ca94:	b5800044 	addi	r22,r22,1
    ca98:	04c00044 	movi	r19,1
    ca9c:	39c00044 	addi	r7,r7,1
    caa0:	d9c00815 	stw	r7,32(sp)
    caa4:	d8800d17 	ldw	r2,52(sp)
    caa8:	103e721e 	bne	r2,zero,c474 <__alt_exception_stack_pointer+0xf800c474>
    caac:	00800044 	movi	r2,1
    cab0:	003e7906 	br	c498 <__alt_exception_stack_pointer+0xf800c498>
    cab4:	8009883a 	mov	r4,r16
    cab8:	00081740 	call	8174 <__floatsidf>
    cabc:	d9800f17 	ldw	r6,60(sp)
    cac0:	d9c01017 	ldw	r7,64(sp)
    cac4:	1009883a 	mov	r4,r2
    cac8:	180b883a 	mov	r5,r3
    cacc:	0006f8c0 	call	6f8c <__muldf3>
    cad0:	000d883a 	mov	r6,zero
    cad4:	01d00734 	movhi	r7,16412
    cad8:	1009883a 	mov	r4,r2
    cadc:	180b883a 	mov	r5,r3
    cae0:	0005bac0 	call	5bac <__adddf3>
    cae4:	047f3034 	movhi	r17,64704
    cae8:	1021883a 	mov	r16,r2
    caec:	1c63883a 	add	r17,r3,r17
    caf0:	d9000f17 	ldw	r4,60(sp)
    caf4:	d9401017 	ldw	r5,64(sp)
    caf8:	000d883a 	mov	r6,zero
    cafc:	01d00534 	movhi	r7,16404
    cb00:	00077f80 	call	77f8 <__subdf3>
    cb04:	800d883a 	mov	r6,r16
    cb08:	880f883a 	mov	r7,r17
    cb0c:	1009883a 	mov	r4,r2
    cb10:	180b883a 	mov	r5,r3
    cb14:	102b883a 	mov	r21,r2
    cb18:	1829883a 	mov	r20,r3
    cb1c:	0006eb00 	call	6eb0 <__gedf2>
    cb20:	00806c16 	blt	zero,r2,ccd4 <_dtoa_r+0x1304>
    cb24:	89e0003c 	xorhi	r7,r17,32768
    cb28:	800d883a 	mov	r6,r16
    cb2c:	a809883a 	mov	r4,r21
    cb30:	a00b883a 	mov	r5,r20
    cb34:	00138f00 	call	138f0 <__ledf2>
    cb38:	103d7e0e 	bge	r2,zero,c134 <__alt_exception_stack_pointer+0xf800c134>
    cb3c:	002b883a 	mov	r21,zero
    cb40:	0023883a 	mov	r17,zero
    cb44:	003efb06 	br	c734 <__alt_exception_stack_pointer+0xf800c734>
    cb48:	d8800717 	ldw	r2,28(sp)
    cb4c:	003bd006 	br	ba90 <__alt_exception_stack_pointer+0xf800ba90>
    cb50:	d9000a17 	ldw	r4,40(sp)
    cb54:	d9800d17 	ldw	r6,52(sp)
    cb58:	dd400a15 	stw	r21,40(sp)
    cb5c:	a905c83a 	sub	r2,r21,r4
    cb60:	308d883a 	add	r6,r6,r2
    cb64:	d9800d15 	stw	r6,52(sp)
    cb68:	002b883a 	mov	r21,zero
    cb6c:	003e0606 	br	c388 <__alt_exception_stack_pointer+0xf800c388>
    cb70:	9023883a 	mov	r17,r18
    cb74:	9829883a 	mov	r20,r19
    cb78:	04000084 	movi	r16,2
    cb7c:	003c9206 	br	bdc8 <__alt_exception_stack_pointer+0xf800bdc8>
    cb80:	04000044 	movi	r16,1
    cb84:	dc000c15 	stw	r16,48(sp)
    cb88:	dc000615 	stw	r16,24(sp)
    cb8c:	dc002215 	stw	r16,136(sp)
    cb90:	e0001115 	stw	zero,68(fp)
    cb94:	000b883a 	mov	r5,zero
    cb98:	003c6906 	br	bd40 <__alt_exception_stack_pointer+0xf800bd40>
    cb9c:	3021883a 	mov	r16,r6
    cba0:	003ffb06 	br	cb90 <__alt_exception_stack_pointer+0xf800cb90>
    cba4:	1000021e 	bne	r2,zero,cbb0 <_dtoa_r+0x11e0>
    cba8:	4200004c 	andi	r8,r8,1
    cbac:	403e7d1e 	bne	r8,zero,c5a4 <__alt_exception_stack_pointer+0xf800c5a4>
    cbb0:	01000c04 	movi	r4,48
    cbb4:	00000106 	br	cbbc <_dtoa_r+0x11ec>
    cbb8:	102f883a 	mov	r23,r2
    cbbc:	b8bfffc4 	addi	r2,r23,-1
    cbc0:	10c00007 	ldb	r3,0(r2)
    cbc4:	193ffc26 	beq	r3,r4,cbb8 <__alt_exception_stack_pointer+0xf800cbb8>
    cbc8:	003e8706 	br	c5e8 <__alt_exception_stack_pointer+0xf800c5e8>
    cbcc:	d8800517 	ldw	r2,20(sp)
    cbd0:	00a3c83a 	sub	r17,zero,r2
    cbd4:	8800a426 	beq	r17,zero,ce68 <_dtoa_r+0x1498>
    cbd8:	888003cc 	andi	r2,r17,15
    cbdc:	100490fa 	slli	r2,r2,3
    cbe0:	00c000b4 	movhi	r3,2
    cbe4:	18e00f04 	addi	r3,r3,-32708
    cbe8:	1885883a 	add	r2,r3,r2
    cbec:	11800017 	ldw	r6,0(r2)
    cbf0:	11c00117 	ldw	r7,4(r2)
    cbf4:	9009883a 	mov	r4,r18
    cbf8:	980b883a 	mov	r5,r19
    cbfc:	8823d13a 	srai	r17,r17,4
    cc00:	0006f8c0 	call	6f8c <__muldf3>
    cc04:	d8800f15 	stw	r2,60(sp)
    cc08:	d8c01015 	stw	r3,64(sp)
    cc0c:	8800e826 	beq	r17,zero,cfb0 <_dtoa_r+0x15e0>
    cc10:	050000b4 	movhi	r20,2
    cc14:	a5200504 	addi	r20,r20,-32748
    cc18:	04000084 	movi	r16,2
    cc1c:	8980004c 	andi	r6,r17,1
    cc20:	1009883a 	mov	r4,r2
    cc24:	8823d07a 	srai	r17,r17,1
    cc28:	180b883a 	mov	r5,r3
    cc2c:	30000426 	beq	r6,zero,cc40 <_dtoa_r+0x1270>
    cc30:	a1800017 	ldw	r6,0(r20)
    cc34:	a1c00117 	ldw	r7,4(r20)
    cc38:	84000044 	addi	r16,r16,1
    cc3c:	0006f8c0 	call	6f8c <__muldf3>
    cc40:	a5000204 	addi	r20,r20,8
    cc44:	883ff51e 	bne	r17,zero,cc1c <__alt_exception_stack_pointer+0xf800cc1c>
    cc48:	d8800f15 	stw	r2,60(sp)
    cc4c:	d8c01015 	stw	r3,64(sp)
    cc50:	003c7606 	br	be2c <__alt_exception_stack_pointer+0xf800be2c>
    cc54:	00c00c04 	movi	r3,48
    cc58:	10c00005 	stb	r3,0(r2)
    cc5c:	d8c00517 	ldw	r3,20(sp)
    cc60:	bd3fffc3 	ldbu	r20,-1(r23)
    cc64:	18c00044 	addi	r3,r3,1
    cc68:	d8c00515 	stw	r3,20(sp)
    cc6c:	003db906 	br	c354 <__alt_exception_stack_pointer+0xf800c354>
    cc70:	89400117 	ldw	r5,4(r17)
    cc74:	e009883a 	mov	r4,fp
    cc78:	000f3b40 	call	f3b4 <_Balloc>
    cc7c:	89800417 	ldw	r6,16(r17)
    cc80:	89400304 	addi	r5,r17,12
    cc84:	11000304 	addi	r4,r2,12
    cc88:	31800084 	addi	r6,r6,2
    cc8c:	318d883a 	add	r6,r6,r6
    cc90:	318d883a 	add	r6,r6,r6
    cc94:	1027883a 	mov	r19,r2
    cc98:	000efe80 	call	efe8 <memcpy>
    cc9c:	01800044 	movi	r6,1
    cca0:	980b883a 	mov	r5,r19
    cca4:	e009883a 	mov	r4,fp
    cca8:	000fbf00 	call	fbf0 <__lshift>
    ccac:	1029883a 	mov	r20,r2
    ccb0:	003ecc06 	br	c7e4 <__alt_exception_stack_pointer+0xf800c7e4>
    ccb4:	00800e44 	movi	r2,57
    ccb8:	90809026 	beq	r18,r2,cefc <_dtoa_r+0x152c>
    ccbc:	92000044 	addi	r8,r18,1
    ccc0:	003f1f06 	br	c940 <__alt_exception_stack_pointer+0xf800c940>
    ccc4:	9011883a 	mov	r8,r18
    ccc8:	8825883a 	mov	r18,r17
    cccc:	a023883a 	mov	r17,r20
    ccd0:	003e2906 	br	c578 <__alt_exception_stack_pointer+0xf800c578>
    ccd4:	002b883a 	mov	r21,zero
    ccd8:	0023883a 	mov	r17,zero
    ccdc:	003f5406 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    cce0:	61bfffc4 	addi	r6,r12,-1
    cce4:	300490fa 	slli	r2,r6,3
    cce8:	00c000b4 	movhi	r3,2
    ccec:	18e00f04 	addi	r3,r3,-32708
    ccf0:	1885883a 	add	r2,r3,r2
    ccf4:	11000017 	ldw	r4,0(r2)
    ccf8:	11400117 	ldw	r5,4(r2)
    ccfc:	d8800717 	ldw	r2,28(sp)
    cd00:	880f883a 	mov	r7,r17
    cd04:	d9801215 	stw	r6,72(sp)
    cd08:	800d883a 	mov	r6,r16
    cd0c:	db001615 	stw	r12,88(sp)
    cd10:	15c00044 	addi	r23,r2,1
    cd14:	0006f8c0 	call	6f8c <__muldf3>
    cd18:	d9401017 	ldw	r5,64(sp)
    cd1c:	d9000f17 	ldw	r4,60(sp)
    cd20:	d8c01515 	stw	r3,84(sp)
    cd24:	d8801415 	stw	r2,80(sp)
    cd28:	00080f40 	call	80f4 <__fixdfsi>
    cd2c:	1009883a 	mov	r4,r2
    cd30:	1021883a 	mov	r16,r2
    cd34:	00081740 	call	8174 <__floatsidf>
    cd38:	d9000f17 	ldw	r4,60(sp)
    cd3c:	d9401017 	ldw	r5,64(sp)
    cd40:	100d883a 	mov	r6,r2
    cd44:	180f883a 	mov	r7,r3
    cd48:	00077f80 	call	77f8 <__subdf3>
    cd4c:	1829883a 	mov	r20,r3
    cd50:	d8c00717 	ldw	r3,28(sp)
    cd54:	84000c04 	addi	r16,r16,48
    cd58:	1023883a 	mov	r17,r2
    cd5c:	1c000005 	stb	r16,0(r3)
    cd60:	db001617 	ldw	r12,88(sp)
    cd64:	00800044 	movi	r2,1
    cd68:	60802226 	beq	r12,r2,cdf4 <_dtoa_r+0x1424>
    cd6c:	d9c00717 	ldw	r7,28(sp)
    cd70:	8805883a 	mov	r2,r17
    cd74:	b82b883a 	mov	r21,r23
    cd78:	3b19883a 	add	r12,r7,r12
    cd7c:	6023883a 	mov	r17,r12
    cd80:	a007883a 	mov	r3,r20
    cd84:	dc800f15 	stw	r18,60(sp)
    cd88:	000d883a 	mov	r6,zero
    cd8c:	01d00934 	movhi	r7,16420
    cd90:	1009883a 	mov	r4,r2
    cd94:	180b883a 	mov	r5,r3
    cd98:	0006f8c0 	call	6f8c <__muldf3>
    cd9c:	180b883a 	mov	r5,r3
    cda0:	1009883a 	mov	r4,r2
    cda4:	1829883a 	mov	r20,r3
    cda8:	1025883a 	mov	r18,r2
    cdac:	00080f40 	call	80f4 <__fixdfsi>
    cdb0:	1009883a 	mov	r4,r2
    cdb4:	1021883a 	mov	r16,r2
    cdb8:	00081740 	call	8174 <__floatsidf>
    cdbc:	100d883a 	mov	r6,r2
    cdc0:	180f883a 	mov	r7,r3
    cdc4:	9009883a 	mov	r4,r18
    cdc8:	a00b883a 	mov	r5,r20
    cdcc:	84000c04 	addi	r16,r16,48
    cdd0:	00077f80 	call	77f8 <__subdf3>
    cdd4:	ad400044 	addi	r21,r21,1
    cdd8:	ac3fffc5 	stb	r16,-1(r21)
    cddc:	ac7fea1e 	bne	r21,r17,cd88 <__alt_exception_stack_pointer+0xf800cd88>
    cde0:	1023883a 	mov	r17,r2
    cde4:	d8801217 	ldw	r2,72(sp)
    cde8:	dc800f17 	ldw	r18,60(sp)
    cdec:	1829883a 	mov	r20,r3
    cdf0:	b8af883a 	add	r23,r23,r2
    cdf4:	d9001417 	ldw	r4,80(sp)
    cdf8:	d9401517 	ldw	r5,84(sp)
    cdfc:	000d883a 	mov	r6,zero
    ce00:	01cff834 	movhi	r7,16352
    ce04:	0005bac0 	call	5bac <__adddf3>
    ce08:	880d883a 	mov	r6,r17
    ce0c:	a00f883a 	mov	r7,r20
    ce10:	1009883a 	mov	r4,r2
    ce14:	180b883a 	mov	r5,r3
    ce18:	00138f00 	call	138f0 <__ledf2>
    ce1c:	10003e0e 	bge	r2,zero,cf18 <_dtoa_r+0x1548>
    ce20:	d9001317 	ldw	r4,76(sp)
    ce24:	bd3fffc3 	ldbu	r20,-1(r23)
    ce28:	d9000515 	stw	r4,20(sp)
    ce2c:	003d3b06 	br	c31c <__alt_exception_stack_pointer+0xf800c31c>
    ce30:	0027883a 	mov	r19,zero
    ce34:	003f1b06 	br	caa4 <__alt_exception_stack_pointer+0xf800caa4>
    ce38:	d8800817 	ldw	r2,32(sp)
    ce3c:	11e9c83a 	sub	r20,r2,r7
    ce40:	0005883a 	mov	r2,zero
    ce44:	003d5406 	br	c398 <__alt_exception_stack_pointer+0xf800c398>
    ce48:	00800044 	movi	r2,1
    ce4c:	003dc706 	br	c56c <__alt_exception_stack_pointer+0xf800c56c>
    ce50:	d8c00217 	ldw	r3,8(sp)
    ce54:	00800d84 	movi	r2,54
    ce58:	dd400a17 	ldw	r21,40(sp)
    ce5c:	10c5c83a 	sub	r2,r2,r3
    ce60:	dd000817 	ldw	r20,32(sp)
    ce64:	003d4c06 	br	c398 <__alt_exception_stack_pointer+0xf800c398>
    ce68:	dc800f15 	stw	r18,60(sp)
    ce6c:	dcc01015 	stw	r19,64(sp)
    ce70:	04000084 	movi	r16,2
    ce74:	003bed06 	br	be2c <__alt_exception_stack_pointer+0xf800be2c>
    ce78:	d9000617 	ldw	r4,24(sp)
    ce7c:	203f0d26 	beq	r4,zero,cab4 <__alt_exception_stack_pointer+0xf800cab4>
    ce80:	d9800c17 	ldw	r6,48(sp)
    ce84:	01bcab0e 	bge	zero,r6,c134 <__alt_exception_stack_pointer+0xf800c134>
    ce88:	d9401017 	ldw	r5,64(sp)
    ce8c:	d9000f17 	ldw	r4,60(sp)
    ce90:	000d883a 	mov	r6,zero
    ce94:	01d00934 	movhi	r7,16420
    ce98:	0006f8c0 	call	6f8c <__muldf3>
    ce9c:	81000044 	addi	r4,r16,1
    cea0:	d8800f15 	stw	r2,60(sp)
    cea4:	d8c01015 	stw	r3,64(sp)
    cea8:	00081740 	call	8174 <__floatsidf>
    ceac:	d9800f17 	ldw	r6,60(sp)
    ceb0:	d9c01017 	ldw	r7,64(sp)
    ceb4:	1009883a 	mov	r4,r2
    ceb8:	180b883a 	mov	r5,r3
    cebc:	0006f8c0 	call	6f8c <__muldf3>
    cec0:	01d00734 	movhi	r7,16412
    cec4:	000d883a 	mov	r6,zero
    cec8:	1009883a 	mov	r4,r2
    cecc:	180b883a 	mov	r5,r3
    ced0:	0005bac0 	call	5bac <__adddf3>
    ced4:	d9c00517 	ldw	r7,20(sp)
    ced8:	047f3034 	movhi	r17,64704
    cedc:	1021883a 	mov	r16,r2
    cee0:	39ffffc4 	addi	r7,r7,-1
    cee4:	d9c01315 	stw	r7,76(sp)
    cee8:	1c63883a 	add	r17,r3,r17
    ceec:	db000c17 	ldw	r12,48(sp)
    cef0:	003bea06 	br	be9c <__alt_exception_stack_pointer+0xf800be9c>
    cef4:	dc000915 	stw	r16,36(sp)
    cef8:	003e0e06 	br	c734 <__alt_exception_stack_pointer+0xf800c734>
    cefc:	01000e44 	movi	r4,57
    cf00:	8825883a 	mov	r18,r17
    cf04:	9dc00044 	addi	r23,r19,1
    cf08:	99000005 	stb	r4,0(r19)
    cf0c:	a023883a 	mov	r17,r20
    cf10:	dc000915 	stw	r16,36(sp)
    cf14:	003da406 	br	c5a8 <__alt_exception_stack_pointer+0xf800c5a8>
    cf18:	d9801417 	ldw	r6,80(sp)
    cf1c:	d9c01517 	ldw	r7,84(sp)
    cf20:	0009883a 	mov	r4,zero
    cf24:	014ff834 	movhi	r5,16352
    cf28:	00077f80 	call	77f8 <__subdf3>
    cf2c:	880d883a 	mov	r6,r17
    cf30:	a00f883a 	mov	r7,r20
    cf34:	1009883a 	mov	r4,r2
    cf38:	180b883a 	mov	r5,r3
    cf3c:	0006eb00 	call	6eb0 <__gedf2>
    cf40:	00bc7c0e 	bge	zero,r2,c134 <__alt_exception_stack_pointer+0xf800c134>
    cf44:	01000c04 	movi	r4,48
    cf48:	00000106 	br	cf50 <_dtoa_r+0x1580>
    cf4c:	102f883a 	mov	r23,r2
    cf50:	b8bfffc4 	addi	r2,r23,-1
    cf54:	10c00007 	ldb	r3,0(r2)
    cf58:	193ffc26 	beq	r3,r4,cf4c <__alt_exception_stack_pointer+0xf800cf4c>
    cf5c:	d9801317 	ldw	r6,76(sp)
    cf60:	d9800515 	stw	r6,20(sp)
    cf64:	003c4406 	br	c078 <__alt_exception_stack_pointer+0xf800c078>
    cf68:	d9801317 	ldw	r6,76(sp)
    cf6c:	d9800515 	stw	r6,20(sp)
    cf70:	003cea06 	br	c31c <__alt_exception_stack_pointer+0xf800c31c>
    cf74:	dd800f17 	ldw	r22,60(sp)
    cf78:	dcc01017 	ldw	r19,64(sp)
    cf7c:	dc801217 	ldw	r18,72(sp)
    cf80:	003c6c06 	br	c134 <__alt_exception_stack_pointer+0xf800c134>
    cf84:	903e031e 	bne	r18,zero,c794 <__alt_exception_stack_pointer+0xf800c794>
    cf88:	003ebb06 	br	ca78 <__alt_exception_stack_pointer+0xf800ca78>
    cf8c:	103e6c1e 	bne	r2,zero,c940 <__alt_exception_stack_pointer+0xf800c940>
    cf90:	4080004c 	andi	r2,r8,1
    cf94:	103e6a26 	beq	r2,zero,c940 <__alt_exception_stack_pointer+0xf800c940>
    cf98:	003e6606 	br	c934 <__alt_exception_stack_pointer+0xf800c934>
    cf9c:	d8c00317 	ldw	r3,12(sp)
    cfa0:	00800084 	movi	r2,2
    cfa4:	10c02916 	blt	r2,r3,d04c <_dtoa_r+0x167c>
    cfa8:	d9000c17 	ldw	r4,48(sp)
    cfac:	003e8806 	br	c9d0 <__alt_exception_stack_pointer+0xf800c9d0>
    cfb0:	04000084 	movi	r16,2
    cfb4:	003b9d06 	br	be2c <__alt_exception_stack_pointer+0xf800be2c>
    cfb8:	d9001317 	ldw	r4,76(sp)
    cfbc:	d9000515 	stw	r4,20(sp)
    cfc0:	003cd606 	br	c31c <__alt_exception_stack_pointer+0xf800c31c>
    cfc4:	d8801317 	ldw	r2,76(sp)
    cfc8:	d8800515 	stw	r2,20(sp)
    cfcc:	003c2a06 	br	c078 <__alt_exception_stack_pointer+0xf800c078>
    cfd0:	d9800317 	ldw	r6,12(sp)
    cfd4:	00800084 	movi	r2,2
    cfd8:	11801516 	blt	r2,r6,d030 <_dtoa_r+0x1660>
    cfdc:	d9c00c17 	ldw	r7,48(sp)
    cfe0:	d9c00615 	stw	r7,24(sp)
    cfe4:	003df706 	br	c7c4 <__alt_exception_stack_pointer+0xf800c7c4>
    cfe8:	193d3926 	beq	r3,r4,c4d0 <__alt_exception_stack_pointer+0xf800c4d0>
    cfec:	00c00f04 	movi	r3,60
    cff0:	1885c83a 	sub	r2,r3,r2
    cff4:	003ddf06 	br	c774 <__alt_exception_stack_pointer+0xf800c774>
    cff8:	e009883a 	mov	r4,fp
    cffc:	e0001115 	stw	zero,68(fp)
    d000:	000b883a 	mov	r5,zero
    d004:	000f3b40 	call	f3b4 <_Balloc>
    d008:	d8800715 	stw	r2,28(sp)
    d00c:	d8c00717 	ldw	r3,28(sp)
    d010:	00bfffc4 	movi	r2,-1
    d014:	01000044 	movi	r4,1
    d018:	d8800c15 	stw	r2,48(sp)
    d01c:	e0c01015 	stw	r3,64(fp)
    d020:	d9000b15 	stw	r4,44(sp)
    d024:	d8800615 	stw	r2,24(sp)
    d028:	d8002215 	stw	zero,136(sp)
    d02c:	003c4106 	br	c134 <__alt_exception_stack_pointer+0xf800c134>
    d030:	d8c00c17 	ldw	r3,48(sp)
    d034:	d8c00615 	stw	r3,24(sp)
    d038:	003e7006 	br	c9fc <__alt_exception_stack_pointer+0xf800c9fc>
    d03c:	04400044 	movi	r17,1
    d040:	003b2006 	br	bcc4 <__alt_exception_stack_pointer+0xf800bcc4>
    d044:	000b883a 	mov	r5,zero
    d048:	003b3d06 	br	bd40 <__alt_exception_stack_pointer+0xf800bd40>
    d04c:	d8800c17 	ldw	r2,48(sp)
    d050:	d8800615 	stw	r2,24(sp)
    d054:	003e6906 	br	c9fc <__alt_exception_stack_pointer+0xf800c9fc>

0000d058 <print_e>:
    d058:	defff504 	addi	sp,sp,-44
    d05c:	dc400815 	stw	r17,32(sp)
    d060:	dc400b17 	ldw	r17,44(sp)
    d064:	dc000715 	stw	r16,28(sp)
    d068:	2821883a 	mov	r16,r5
    d06c:	d9400504 	addi	r5,sp,20
    d070:	d9400315 	stw	r5,12(sp)
    d074:	300b883a 	mov	r5,r6
    d078:	d9800604 	addi	r6,sp,24
    d07c:	3805883a 	mov	r2,r7
    d080:	88c00044 	addi	r3,r17,1
    d084:	d9800215 	stw	r6,8(sp)
    d088:	d9800404 	addi	r6,sp,16
    d08c:	d9800115 	stw	r6,4(sp)
    d090:	d8c00015 	stw	r3,0(sp)
    d094:	01c00084 	movi	r7,2
    d098:	100d883a 	mov	r6,r2
    d09c:	dc800915 	stw	r18,36(sp)
    d0a0:	dfc00a15 	stw	ra,40(sp)
    d0a4:	dc800c17 	ldw	r18,48(sp)
    d0a8:	000b9d00 	call	b9d0 <_dtoa_r>
    d0ac:	d9000417 	ldw	r4,16(sp)
    d0b0:	00c9c3c4 	movi	r3,9999
    d0b4:	20c05c26 	beq	r4,r3,d228 <print_e+0x1d0>
    d0b8:	10c00003 	ldbu	r3,0(r2)
    d0bc:	900f883a 	mov	r7,r18
    d0c0:	80c00005 	stb	r3,0(r16)
    d0c4:	d8c00d17 	ldw	r3,52(sp)
    d0c8:	18004926 	beq	r3,zero,d1f0 <print_e+0x198>
    d0cc:	00c00b84 	movi	r3,46
    d0d0:	80c00045 	stb	r3,1(r16)
    d0d4:	11400043 	ldbu	r5,1(r2)
    d0d8:	80c00084 	addi	r3,r16,2
    d0dc:	29803fcc 	andi	r6,r5,255
    d0e0:	3180201c 	xori	r6,r6,128
    d0e4:	31bfe004 	addi	r6,r6,-128
    d0e8:	30000f26 	beq	r6,zero,d128 <print_e+0xd0>
    d0ec:	04400e0e 	bge	zero,r17,d128 <print_e+0xd0>
    d0f0:	10800044 	addi	r2,r2,1
    d0f4:	180d883a 	mov	r6,r3
    d0f8:	00000206 	br	d104 <print_e+0xac>
    d0fc:	180d883a 	mov	r6,r3
    d100:	88000926 	beq	r17,zero,d128 <print_e+0xd0>
    d104:	31400005 	stb	r5,0(r6)
    d108:	10800044 	addi	r2,r2,1
    d10c:	11400003 	ldbu	r5,0(r2)
    d110:	18c00044 	addi	r3,r3,1
    d114:	8c7fffc4 	addi	r17,r17,-1
    d118:	29803fcc 	andi	r6,r5,255
    d11c:	3180201c 	xori	r6,r6,128
    d120:	31bfe004 	addi	r6,r6,-128
    d124:	303ff51e 	bne	r6,zero,d0fc <__alt_exception_stack_pointer+0xf800d0fc>
    d128:	94803fcc 	andi	r18,r18,255
    d12c:	9480201c 	xori	r18,r18,128
    d130:	94bfe004 	addi	r18,r18,-128
    d134:	008019c4 	movi	r2,103
    d138:	90803026 	beq	r18,r2,d1fc <print_e+0x1a4>
    d13c:	008011c4 	movi	r2,71
    d140:	90803726 	beq	r18,r2,d220 <print_e+0x1c8>
    d144:	0440060e 	bge	zero,r17,d160 <print_e+0x108>
    d148:	180b883a 	mov	r5,r3
    d14c:	00800c04 	movi	r2,48
    d150:	1c47883a 	add	r3,r3,r17
    d154:	28800005 	stb	r2,0(r5)
    d158:	29400044 	addi	r5,r5,1
    d15c:	197ffd1e 	bne	r3,r5,d154 <__alt_exception_stack_pointer+0xf800d154>
    d160:	19c00005 	stb	r7,0(r3)
    d164:	243fffc4 	addi	r16,r4,-1
    d168:	1c400084 	addi	r17,r3,2
    d16c:	80002816 	blt	r16,zero,d210 <print_e+0x1b8>
    d170:	00800ac4 	movi	r2,43
    d174:	18800045 	stb	r2,1(r3)
    d178:	008018c4 	movi	r2,99
    d17c:	14000a0e 	bge	r2,r16,d1a8 <print_e+0x150>
    d180:	8009883a 	mov	r4,r16
    d184:	01401904 	movi	r5,100
    d188:	00059d00 	call	59d0 <__divsi3>
    d18c:	10c00c04 	addi	r3,r2,48
    d190:	88c00005 	stb	r3,0(r17)
    d194:	017fe704 	movi	r5,-100
    d198:	1009883a 	mov	r4,r2
    d19c:	0005b840 	call	5b84 <__mulsi3>
    d1a0:	8c400044 	addi	r17,r17,1
    d1a4:	80a1883a 	add	r16,r16,r2
    d1a8:	01400284 	movi	r5,10
    d1ac:	8009883a 	mov	r4,r16
    d1b0:	00059d00 	call	59d0 <__divsi3>
    d1b4:	10c00c04 	addi	r3,r2,48
    d1b8:	88c00005 	stb	r3,0(r17)
    d1bc:	017ffd84 	movi	r5,-10
    d1c0:	1009883a 	mov	r4,r2
    d1c4:	0005b840 	call	5b84 <__mulsi3>
    d1c8:	1405883a 	add	r2,r2,r16
    d1cc:	10800c04 	addi	r2,r2,48
    d1d0:	88800045 	stb	r2,1(r17)
    d1d4:	88000085 	stb	zero,2(r17)
    d1d8:	dfc00a17 	ldw	ra,40(sp)
    d1dc:	dc800917 	ldw	r18,36(sp)
    d1e0:	dc400817 	ldw	r17,32(sp)
    d1e4:	dc000717 	ldw	r16,28(sp)
    d1e8:	dec00b04 	addi	sp,sp,44
    d1ec:	f800283a 	ret
    d1f0:	883fb61e 	bne	r17,zero,d0cc <__alt_exception_stack_pointer+0xf800d0cc>
    d1f4:	80c00044 	addi	r3,r16,1
    d1f8:	003fcb06 	br	d128 <__alt_exception_stack_pointer+0xf800d128>
    d1fc:	01c01944 	movi	r7,101
    d200:	19c00005 	stb	r7,0(r3)
    d204:	243fffc4 	addi	r16,r4,-1
    d208:	1c400084 	addi	r17,r3,2
    d20c:	803fd80e 	bge	r16,zero,d170 <__alt_exception_stack_pointer+0xf800d170>
    d210:	00800b44 	movi	r2,45
    d214:	18800045 	stb	r2,1(r3)
    d218:	0421c83a 	sub	r16,zero,r16
    d21c:	003fd606 	br	d178 <__alt_exception_stack_pointer+0xf800d178>
    d220:	01c01144 	movi	r7,69
    d224:	003fce06 	br	d160 <__alt_exception_stack_pointer+0xf800d160>
    d228:	100b883a 	mov	r5,r2
    d22c:	8009883a 	mov	r4,r16
    d230:	0010c5c0 	call	10c5c <strcpy>
    d234:	003fe806 	br	d1d8 <__alt_exception_stack_pointer+0xf800d1d8>

0000d238 <fcvtbuf>:
    d238:	defff304 	addi	sp,sp,-52
    d23c:	dc000515 	stw	r16,20(sp)
    d240:	dc000e17 	ldw	r16,56(sp)
    d244:	008000b4 	movhi	r2,2
    d248:	dd400a15 	stw	r21,40(sp)
    d24c:	dd000915 	stw	r20,36(sp)
    d250:	dcc00815 	stw	r19,32(sp)
    d254:	dc800715 	stw	r18,28(sp)
    d258:	dc400615 	stw	r17,24(sp)
    d25c:	10a92a04 	addi	r2,r2,-23384
    d260:	dfc00c15 	stw	ra,48(sp)
    d264:	dd800b15 	stw	r22,44(sp)
    d268:	2027883a 	mov	r19,r4
    d26c:	2825883a 	mov	r18,r5
    d270:	3023883a 	mov	r17,r6
    d274:	3829883a 	mov	r20,r7
    d278:	15400017 	ldw	r21,0(r2)
    d27c:	80004426 	beq	r16,zero,d390 <fcvtbuf+0x158>
    d280:	000d883a 	mov	r6,zero
    d284:	01cffc34 	movhi	r7,16368
    d288:	9809883a 	mov	r4,r19
    d28c:	900b883a 	mov	r5,r18
    d290:	00138f00 	call	138f0 <__ledf2>
    d294:	10002c16 	blt	r2,zero,d348 <fcvtbuf+0x110>
    d298:	d8800404 	addi	r2,sp,16
    d29c:	d8800315 	stw	r2,12(sp)
    d2a0:	d8800d17 	ldw	r2,52(sp)
    d2a4:	dd000115 	stw	r20,4(sp)
    d2a8:	dc400015 	stw	r17,0(sp)
    d2ac:	d8800215 	stw	r2,8(sp)
    d2b0:	01c000c4 	movi	r7,3
    d2b4:	980b883a 	mov	r5,r19
    d2b8:	900d883a 	mov	r6,r18
    d2bc:	a809883a 	mov	r4,r21
    d2c0:	000b9d00 	call	b9d0 <_dtoa_r>
    d2c4:	a1400017 	ldw	r5,0(r20)
    d2c8:	d8c00417 	ldw	r3,16(sp)
    d2cc:	014bc83a 	sub	r5,zero,r5
    d2d0:	10c0342e 	bgeu	r2,r3,d3a4 <fcvtbuf+0x16c>
    d2d4:	8007883a 	mov	r3,r16
    d2d8:	11800003 	ldbu	r6,0(r2)
    d2dc:	19000044 	addi	r4,r3,1
    d2e0:	10800044 	addi	r2,r2,1
    d2e4:	19800005 	stb	r6,0(r3)
    d2e8:	d9800417 	ldw	r6,16(sp)
    d2ec:	29400044 	addi	r5,r5,1
    d2f0:	2007883a 	mov	r3,r4
    d2f4:	11bff836 	bltu	r2,r6,d2d8 <__alt_exception_stack_pointer+0xf800d2d8>
    d2f8:	2c40070e 	bge	r5,r17,d318 <fcvtbuf+0xe0>
    d2fc:	894bc83a 	sub	r5,r17,r5
    d300:	2007883a 	mov	r3,r4
    d304:	00800c04 	movi	r2,48
    d308:	2149883a 	add	r4,r4,r5
    d30c:	18800005 	stb	r2,0(r3)
    d310:	18c00044 	addi	r3,r3,1
    d314:	20fffd1e 	bne	r4,r3,d30c <__alt_exception_stack_pointer+0xf800d30c>
    d318:	20000005 	stb	zero,0(r4)
    d31c:	8005883a 	mov	r2,r16
    d320:	dfc00c17 	ldw	ra,48(sp)
    d324:	dd800b17 	ldw	r22,44(sp)
    d328:	dd400a17 	ldw	r21,40(sp)
    d32c:	dd000917 	ldw	r20,36(sp)
    d330:	dcc00817 	ldw	r19,32(sp)
    d334:	dc800717 	ldw	r18,28(sp)
    d338:	dc400617 	ldw	r17,24(sp)
    d33c:	dc000517 	ldw	r16,20(sp)
    d340:	dec00d04 	addi	sp,sp,52
    d344:	f800283a 	ret
    d348:	000d883a 	mov	r6,zero
    d34c:	01effc34 	movhi	r7,49136
    d350:	9809883a 	mov	r4,r19
    d354:	900b883a 	mov	r5,r18
    d358:	0006eb00 	call	6eb0 <__gedf2>
    d35c:	00bfce0e 	bge	zero,r2,d298 <__alt_exception_stack_pointer+0xf800d298>
    d360:	d8800404 	addi	r2,sp,16
    d364:	d8800315 	stw	r2,12(sp)
    d368:	d8800d17 	ldw	r2,52(sp)
    d36c:	dd000115 	stw	r20,4(sp)
    d370:	dc400015 	stw	r17,0(sp)
    d374:	d8800215 	stw	r2,8(sp)
    d378:	01c00084 	movi	r7,2
    d37c:	980b883a 	mov	r5,r19
    d380:	900d883a 	mov	r6,r18
    d384:	a809883a 	mov	r4,r21
    d388:	000b9d00 	call	b9d0 <_dtoa_r>
    d38c:	003fcd06 	br	d2c4 <__alt_exception_stack_pointer+0xf800d2c4>
    d390:	a8801417 	ldw	r2,80(r21)
    d394:	30c008c4 	addi	r3,r6,35
    d398:	1880040e 	bge	r3,r2,d3ac <fcvtbuf+0x174>
    d39c:	ac001517 	ldw	r16,84(r21)
    d3a0:	003fb706 	br	d280 <__alt_exception_stack_pointer+0xf800d280>
    d3a4:	8009883a 	mov	r4,r16
    d3a8:	003fd306 	br	d2f8 <__alt_exception_stack_pointer+0xf800d2f8>
    d3ac:	a9401517 	ldw	r5,84(r21)
    d3b0:	35800904 	addi	r22,r6,36
    d3b4:	b00d883a 	mov	r6,r22
    d3b8:	a809883a 	mov	r4,r21
    d3bc:	001046c0 	call	1046c <_realloc_r>
    d3c0:	1021883a 	mov	r16,r2
    d3c4:	10000326 	beq	r2,zero,d3d4 <fcvtbuf+0x19c>
    d3c8:	ad801415 	stw	r22,80(r21)
    d3cc:	a8801515 	stw	r2,84(r21)
    d3d0:	003fab06 	br	d280 <__alt_exception_stack_pointer+0xf800d280>
    d3d4:	0005883a 	mov	r2,zero
    d3d8:	003fd106 	br	d320 <__alt_exception_stack_pointer+0xf800d320>

0000d3dc <ecvtbuf>:
    d3dc:	defff304 	addi	sp,sp,-52
    d3e0:	dc000615 	stw	r16,24(sp)
    d3e4:	dc000e17 	ldw	r16,56(sp)
    d3e8:	008000b4 	movhi	r2,2
    d3ec:	dd000a15 	stw	r20,40(sp)
    d3f0:	dcc00915 	stw	r19,36(sp)
    d3f4:	dc800815 	stw	r18,32(sp)
    d3f8:	dc400715 	stw	r17,28(sp)
    d3fc:	10a92a04 	addi	r2,r2,-23384
    d400:	dfc00c15 	stw	ra,48(sp)
    d404:	dd400b15 	stw	r21,44(sp)
    d408:	2029883a 	mov	r20,r4
    d40c:	2827883a 	mov	r19,r5
    d410:	3023883a 	mov	r17,r6
    d414:	14800017 	ldw	r18,0(r2)
    d418:	80002b26 	beq	r16,zero,d4c8 <ecvtbuf+0xec>
    d41c:	d8800404 	addi	r2,sp,16
    d420:	d8800315 	stw	r2,12(sp)
    d424:	d8800d17 	ldw	r2,52(sp)
    d428:	d9c00115 	stw	r7,4(sp)
    d42c:	dc400015 	stw	r17,0(sp)
    d430:	d8800215 	stw	r2,8(sp)
    d434:	01c00084 	movi	r7,2
    d438:	a00b883a 	mov	r5,r20
    d43c:	980d883a 	mov	r6,r19
    d440:	9009883a 	mov	r4,r18
    d444:	000b9d00 	call	b9d0 <_dtoa_r>
    d448:	d8c00417 	ldw	r3,16(sp)
    d44c:	10c0222e 	bgeu	r2,r3,d4d8 <ecvtbuf+0xfc>
    d450:	01800044 	movi	r6,1
    d454:	8007883a 	mov	r3,r16
    d458:	340dc83a 	sub	r6,r6,r16
    d45c:	11400003 	ldbu	r5,0(r2)
    d460:	19000044 	addi	r4,r3,1
    d464:	10800044 	addi	r2,r2,1
    d468:	19400005 	stb	r5,0(r3)
    d46c:	d9400417 	ldw	r5,16(sp)
    d470:	30cf883a 	add	r7,r6,r3
    d474:	2007883a 	mov	r3,r4
    d478:	117ff836 	bltu	r2,r5,d45c <__alt_exception_stack_pointer+0xf800d45c>
    d47c:	3c40070e 	bge	r7,r17,d49c <ecvtbuf+0xc0>
    d480:	89cfc83a 	sub	r7,r17,r7
    d484:	2007883a 	mov	r3,r4
    d488:	01400c04 	movi	r5,48
    d48c:	21c9883a 	add	r4,r4,r7
    d490:	19400005 	stb	r5,0(r3)
    d494:	18c00044 	addi	r3,r3,1
    d498:	20fffd1e 	bne	r4,r3,d490 <__alt_exception_stack_pointer+0xf800d490>
    d49c:	20000005 	stb	zero,0(r4)
    d4a0:	8005883a 	mov	r2,r16
    d4a4:	dfc00c17 	ldw	ra,48(sp)
    d4a8:	dd400b17 	ldw	r21,44(sp)
    d4ac:	dd000a17 	ldw	r20,40(sp)
    d4b0:	dcc00917 	ldw	r19,36(sp)
    d4b4:	dc800817 	ldw	r18,32(sp)
    d4b8:	dc400717 	ldw	r17,28(sp)
    d4bc:	dc000617 	ldw	r16,24(sp)
    d4c0:	dec00d04 	addi	sp,sp,52
    d4c4:	f800283a 	ret
    d4c8:	90801417 	ldw	r2,80(r18)
    d4cc:	3080050e 	bge	r6,r2,d4e4 <ecvtbuf+0x108>
    d4d0:	94001517 	ldw	r16,84(r18)
    d4d4:	003fd106 	br	d41c <__alt_exception_stack_pointer+0xf800d41c>
    d4d8:	8009883a 	mov	r4,r16
    d4dc:	000f883a 	mov	r7,zero
    d4e0:	003fe606 	br	d47c <__alt_exception_stack_pointer+0xf800d47c>
    d4e4:	91401517 	ldw	r5,84(r18)
    d4e8:	35400044 	addi	r21,r6,1
    d4ec:	a80d883a 	mov	r6,r21
    d4f0:	9009883a 	mov	r4,r18
    d4f4:	d9c00515 	stw	r7,20(sp)
    d4f8:	001046c0 	call	1046c <_realloc_r>
    d4fc:	1021883a 	mov	r16,r2
    d500:	d9c00517 	ldw	r7,20(sp)
    d504:	10000326 	beq	r2,zero,d514 <ecvtbuf+0x138>
    d508:	95401415 	stw	r21,80(r18)
    d50c:	90801515 	stw	r2,84(r18)
    d510:	003fc206 	br	d41c <__alt_exception_stack_pointer+0xf800d41c>
    d514:	0005883a 	mov	r2,zero
    d518:	003fe206 	br	d4a4 <__alt_exception_stack_pointer+0xf800d4a4>

0000d51c <_gcvt>:
    d51c:	defff204 	addi	sp,sp,-56
    d520:	dc800915 	stw	r18,36(sp)
    d524:	3025883a 	mov	r18,r6
    d528:	dd400c15 	stw	r21,48(sp)
    d52c:	dcc00a15 	stw	r19,40(sp)
    d530:	dc400815 	stw	r17,32(sp)
    d534:	2827883a 	mov	r19,r5
    d538:	202b883a 	mov	r21,r4
    d53c:	3823883a 	mov	r17,r7
    d540:	2809883a 	mov	r4,r5
    d544:	000d883a 	mov	r6,zero
    d548:	000f883a 	mov	r7,zero
    d54c:	900b883a 	mov	r5,r18
    d550:	dd000b15 	stw	r20,44(sp)
    d554:	dc000715 	stw	r16,28(sp)
    d558:	dfc00d15 	stw	ra,52(sp)
    d55c:	dc000e17 	ldw	r16,56(sp)
    d560:	dd000f17 	ldw	r20,60(sp)
    d564:	00138f00 	call	138f0 <__ledf2>
    d568:	10009d16 	blt	r2,zero,d7e0 <_gcvt+0x2c4>
    d56c:	000d883a 	mov	r6,zero
    d570:	000f883a 	mov	r7,zero
    d574:	9809883a 	mov	r4,r19
    d578:	900b883a 	mov	r5,r18
    d57c:	0006e280 	call	6e28 <__eqdf2>
    d580:	10009326 	beq	r2,zero,d7d0 <_gcvt+0x2b4>
    d584:	01bac734 	movhi	r6,60188
    d588:	01cfc6b4 	movhi	r7,16154
    d58c:	3190cb44 	addi	r6,r6,17197
    d590:	39cdb884 	addi	r7,r7,14050
    d594:	9809883a 	mov	r4,r19
    d598:	900b883a 	mov	r5,r18
    d59c:	00138f00 	call	138f0 <__ledf2>
    d5a0:	0080740e 	bge	zero,r2,d774 <_gcvt+0x258>
    d5a4:	8809883a 	mov	r4,r17
    d5a8:	00102f40 	call	102f4 <_mprec_log10>
    d5ac:	100d883a 	mov	r6,r2
    d5b0:	180f883a 	mov	r7,r3
    d5b4:	9809883a 	mov	r4,r19
    d5b8:	900b883a 	mov	r5,r18
    d5bc:	0006eb00 	call	6eb0 <__gedf2>
    d5c0:	10006c0e 	bge	r2,zero,d774 <_gcvt+0x258>
    d5c4:	000d883a 	mov	r6,zero
    d5c8:	01cffc34 	movhi	r7,16368
    d5cc:	9809883a 	mov	r4,r19
    d5d0:	900b883a 	mov	r5,r18
    d5d4:	00138f00 	call	138f0 <__ledf2>
    d5d8:	10008316 	blt	r2,zero,d7e8 <_gcvt+0x2cc>
    d5dc:	d8800404 	addi	r2,sp,16
    d5e0:	d8800315 	stw	r2,12(sp)
    d5e4:	d8800504 	addi	r2,sp,20
    d5e8:	d8800215 	stw	r2,8(sp)
    d5ec:	d8800604 	addi	r2,sp,24
    d5f0:	d8800115 	stw	r2,4(sp)
    d5f4:	dc400015 	stw	r17,0(sp)
    d5f8:	01c00084 	movi	r7,2
    d5fc:	980b883a 	mov	r5,r19
    d600:	900d883a 	mov	r6,r18
    d604:	a809883a 	mov	r4,r21
    d608:	000b9d00 	call	b9d0 <_dtoa_r>
    d60c:	d9400617 	ldw	r5,24(sp)
    d610:	00c9c3c4 	movi	r3,9999
    d614:	28c08b26 	beq	r5,r3,d844 <_gcvt+0x328>
    d618:	11c00003 	ldbu	r7,0(r2)
    d61c:	38c03fcc 	andi	r3,r7,255
    d620:	18c0201c 	xori	r3,r3,128
    d624:	18ffe004 	addi	r3,r3,-128
    d628:	18008a26 	beq	r3,zero,d854 <_gcvt+0x338>
    d62c:	01408d0e 	bge	zero,r5,d864 <_gcvt+0x348>
    d630:	8011883a 	mov	r8,r16
    d634:	280d883a 	mov	r6,r5
    d638:	00000206 	br	d644 <_gcvt+0x128>
    d63c:	2011883a 	mov	r8,r4
    d640:	30001926 	beq	r6,zero,d6a8 <_gcvt+0x18c>
    d644:	31bfffc4 	addi	r6,r6,-1
    d648:	41c00005 	stb	r7,0(r8)
    d64c:	d9800615 	stw	r6,24(sp)
    d650:	10800044 	addi	r2,r2,1
    d654:	11c00003 	ldbu	r7,0(r2)
    d658:	41000044 	addi	r4,r8,1
    d65c:	3147c83a 	sub	r3,r6,r5
    d660:	3a003fcc 	andi	r8,r7,255
    d664:	4200201c 	xori	r8,r8,128
    d668:	423fe004 	addi	r8,r8,-128
    d66c:	1c47883a 	add	r3,r3,r17
    d670:	403ff21e 	bne	r8,zero,d63c <__alt_exception_stack_pointer+0xf800d63c>
    d674:	01800c0e 	bge	zero,r6,d6a8 <_gcvt+0x18c>
    d678:	200f883a 	mov	r7,r4
    d67c:	00c00a0e 	bge	zero,r3,d6a8 <_gcvt+0x18c>
    d680:	01400c04 	movi	r5,48
    d684:	00000206 	br	d690 <_gcvt+0x174>
    d688:	200f883a 	mov	r7,r4
    d68c:	18006326 	beq	r3,zero,d81c <_gcvt+0x300>
    d690:	39400005 	stb	r5,0(r7)
    d694:	31bfffc4 	addi	r6,r6,-1
    d698:	21000044 	addi	r4,r4,1
    d69c:	18ffffc4 	addi	r3,r3,-1
    d6a0:	303ff91e 	bne	r6,zero,d688 <__alt_exception_stack_pointer+0xf800d688>
    d6a4:	d8000615 	stw	zero,24(sp)
    d6a8:	d9401017 	ldw	r5,64(sp)
    d6ac:	2800021e 	bne	r5,zero,d6b8 <_gcvt+0x19c>
    d6b0:	11400007 	ldb	r5,0(r2)
    d6b4:	28002d26 	beq	r5,zero,d76c <_gcvt+0x250>
    d6b8:	81005e26 	beq	r16,r4,d834 <_gcvt+0x318>
    d6bc:	d9800617 	ldw	r6,24(sp)
    d6c0:	01400b84 	movi	r5,46
    d6c4:	21400005 	stb	r5,0(r4)
    d6c8:	21c00044 	addi	r7,r4,1
    d6cc:	3000680e 	bge	r6,zero,d870 <_gcvt+0x354>
    d6d0:	00c0690e 	bge	zero,r3,d878 <_gcvt+0x35c>
    d6d4:	01400c04 	movi	r5,48
    d6d8:	00000206 	br	d6e4 <_gcvt+0x1c8>
    d6dc:	200f883a 	mov	r7,r4
    d6e0:	18005026 	beq	r3,zero,d824 <_gcvt+0x308>
    d6e4:	39400005 	stb	r5,0(r7)
    d6e8:	31800044 	addi	r6,r6,1
    d6ec:	39000044 	addi	r4,r7,1
    d6f0:	18ffffc4 	addi	r3,r3,-1
    d6f4:	303ff91e 	bne	r6,zero,d6dc <__alt_exception_stack_pointer+0xf800d6dc>
    d6f8:	d8000615 	stw	zero,24(sp)
    d6fc:	11800003 	ldbu	r6,0(r2)
    d700:	31403fcc 	andi	r5,r6,255
    d704:	2940201c 	xori	r5,r5,128
    d708:	297fe004 	addi	r5,r5,-128
    d70c:	28000e26 	beq	r5,zero,d748 <_gcvt+0x22c>
    d710:	200b883a 	mov	r5,r4
    d714:	00c00316 	blt	zero,r3,d724 <_gcvt+0x208>
    d718:	00001406 	br	d76c <_gcvt+0x250>
    d71c:	200b883a 	mov	r5,r4
    d720:	18001226 	beq	r3,zero,d76c <_gcvt+0x250>
    d724:	29800005 	stb	r6,0(r5)
    d728:	10800044 	addi	r2,r2,1
    d72c:	11800003 	ldbu	r6,0(r2)
    d730:	21000044 	addi	r4,r4,1
    d734:	18ffffc4 	addi	r3,r3,-1
    d738:	31403fcc 	andi	r5,r6,255
    d73c:	2940201c 	xori	r5,r5,128
    d740:	297fe004 	addi	r5,r5,-128
    d744:	283ff51e 	bne	r5,zero,d71c <__alt_exception_stack_pointer+0xf800d71c>
    d748:	d8801017 	ldw	r2,64(sp)
    d74c:	10000726 	beq	r2,zero,d76c <_gcvt+0x250>
    d750:	00c0060e 	bge	zero,r3,d76c <_gcvt+0x250>
    d754:	2005883a 	mov	r2,r4
    d758:	01400c04 	movi	r5,48
    d75c:	20c9883a 	add	r4,r4,r3
    d760:	11400005 	stb	r5,0(r2)
    d764:	10800044 	addi	r2,r2,1
    d768:	20bffd1e 	bne	r4,r2,d760 <__alt_exception_stack_pointer+0xf800d760>
    d76c:	20000005 	stb	zero,0(r4)
    d770:	00000d06 	br	d7a8 <_gcvt+0x28c>
    d774:	a5003fcc 	andi	r20,r20,255
    d778:	d8801017 	ldw	r2,64(sp)
    d77c:	a500201c 	xori	r20,r20,128
    d780:	a53fe004 	addi	r20,r20,-128
    d784:	8c7fffc4 	addi	r17,r17,-1
    d788:	d8800215 	stw	r2,8(sp)
    d78c:	dd000115 	stw	r20,4(sp)
    d790:	dc400015 	stw	r17,0(sp)
    d794:	980d883a 	mov	r6,r19
    d798:	900f883a 	mov	r7,r18
    d79c:	800b883a 	mov	r5,r16
    d7a0:	a809883a 	mov	r4,r21
    d7a4:	000d0580 	call	d058 <print_e>
    d7a8:	8005883a 	mov	r2,r16
    d7ac:	dfc00d17 	ldw	ra,52(sp)
    d7b0:	dd400c17 	ldw	r21,48(sp)
    d7b4:	dd000b17 	ldw	r20,44(sp)
    d7b8:	dcc00a17 	ldw	r19,40(sp)
    d7bc:	dc800917 	ldw	r18,36(sp)
    d7c0:	dc400817 	ldw	r17,32(sp)
    d7c4:	dc000717 	ldw	r16,28(sp)
    d7c8:	dec00e04 	addi	sp,sp,56
    d7cc:	f800283a 	ret
    d7d0:	00800c04 	movi	r2,48
    d7d4:	80800005 	stb	r2,0(r16)
    d7d8:	80000045 	stb	zero,1(r16)
    d7dc:	003ff206 	br	d7a8 <__alt_exception_stack_pointer+0xf800d7a8>
    d7e0:	94a0003c 	xorhi	r18,r18,32768
    d7e4:	003f6106 	br	d56c <__alt_exception_stack_pointer+0xf800d56c>
    d7e8:	d8800504 	addi	r2,sp,20
    d7ec:	d9400404 	addi	r5,sp,16
    d7f0:	d8800215 	stw	r2,8(sp)
    d7f4:	d8800604 	addi	r2,sp,24
    d7f8:	d9400315 	stw	r5,12(sp)
    d7fc:	d8800115 	stw	r2,4(sp)
    d800:	dc400015 	stw	r17,0(sp)
    d804:	01c000c4 	movi	r7,3
    d808:	980b883a 	mov	r5,r19
    d80c:	900d883a 	mov	r6,r18
    d810:	a809883a 	mov	r4,r21
    d814:	000b9d00 	call	b9d0 <_dtoa_r>
    d818:	003f7c06 	br	d60c <__alt_exception_stack_pointer+0xf800d60c>
    d81c:	d9800615 	stw	r6,24(sp)
    d820:	003fa106 	br	d6a8 <__alt_exception_stack_pointer+0xf800d6a8>
    d824:	d9800615 	stw	r6,24(sp)
    d828:	10800007 	ldb	r2,0(r2)
    d82c:	103fc626 	beq	r2,zero,d748 <__alt_exception_stack_pointer+0xf800d748>
    d830:	003fce06 	br	d76c <__alt_exception_stack_pointer+0xf800d76c>
    d834:	01400c04 	movi	r5,48
    d838:	81000044 	addi	r4,r16,1
    d83c:	81400005 	stb	r5,0(r16)
    d840:	003f9e06 	br	d6bc <__alt_exception_stack_pointer+0xf800d6bc>
    d844:	100b883a 	mov	r5,r2
    d848:	8009883a 	mov	r4,r16
    d84c:	0010c5c0 	call	10c5c <strcpy>
    d850:	003fd506 	br	d7a8 <__alt_exception_stack_pointer+0xf800d7a8>
    d854:	280d883a 	mov	r6,r5
    d858:	8009883a 	mov	r4,r16
    d85c:	8807883a 	mov	r3,r17
    d860:	003f8406 	br	d674 <__alt_exception_stack_pointer+0xf800d674>
    d864:	8009883a 	mov	r4,r16
    d868:	8807883a 	mov	r3,r17
    d86c:	003f8e06 	br	d6a8 <__alt_exception_stack_pointer+0xf800d6a8>
    d870:	3809883a 	mov	r4,r7
    d874:	003fa106 	br	d6fc <__alt_exception_stack_pointer+0xf800d6fc>
    d878:	3809883a 	mov	r4,r7
    d87c:	003fea06 	br	d828 <__alt_exception_stack_pointer+0xf800d828>

0000d880 <_dcvt>:
    d880:	defff504 	addi	sp,sp,-44
    d884:	da000d17 	ldw	r8,52(sp)
    d888:	dc800915 	stw	r18,36(sp)
    d88c:	dc000715 	stw	r16,28(sp)
    d890:	40bfeec4 	addi	r2,r8,-69
    d894:	dfc00a15 	stw	ra,40(sp)
    d898:	dc400815 	stw	r17,32(sp)
    d89c:	10803fcc 	andi	r2,r2,255
    d8a0:	00c00884 	movi	r3,34
    d8a4:	2825883a 	mov	r18,r5
    d8a8:	dc000b17 	ldw	r16,44(sp)
    d8ac:	18802c36 	bltu	r3,r2,d960 <_dcvt+0xe0>
    d8b0:	100490ba 	slli	r2,r2,2
    d8b4:	00c00074 	movhi	r3,1
    d8b8:	18f63304 	addi	r3,r3,-10036
    d8bc:	10c5883a 	add	r2,r2,r3
    d8c0:	10800017 	ldw	r2,0(r2)
    d8c4:	3813883a 	mov	r9,r7
    d8c8:	1000683a 	jmp	r2
    d8cc:	0000db24 	muli	zero,zero,876
    d8d0:	0000d9b4 	movhi	zero,870
    d8d4:	0000d97c 	xorhi	zero,zero,869
    d8d8:	0000d960 	cmpeqi	zero,zero,869
    d8dc:	0000d960 	cmpeqi	zero,zero,869
    d8e0:	0000d960 	cmpeqi	zero,zero,869
    d8e4:	0000d960 	cmpeqi	zero,zero,869
    d8e8:	0000d960 	cmpeqi	zero,zero,869
    d8ec:	0000d960 	cmpeqi	zero,zero,869
    d8f0:	0000d960 	cmpeqi	zero,zero,869
    d8f4:	0000d960 	cmpeqi	zero,zero,869
    d8f8:	0000d960 	cmpeqi	zero,zero,869
    d8fc:	0000d960 	cmpeqi	zero,zero,869
    d900:	0000d960 	cmpeqi	zero,zero,869
    d904:	0000d960 	cmpeqi	zero,zero,869
    d908:	0000d960 	cmpeqi	zero,zero,869
    d90c:	0000d960 	cmpeqi	zero,zero,869
    d910:	0000d960 	cmpeqi	zero,zero,869
    d914:	0000d960 	cmpeqi	zero,zero,869
    d918:	0000d960 	cmpeqi	zero,zero,869
    d91c:	0000d960 	cmpeqi	zero,zero,869
    d920:	0000d960 	cmpeqi	zero,zero,869
    d924:	0000d960 	cmpeqi	zero,zero,869
    d928:	0000d960 	cmpeqi	zero,zero,869
    d92c:	0000d960 	cmpeqi	zero,zero,869
    d930:	0000d960 	cmpeqi	zero,zero,869
    d934:	0000d960 	cmpeqi	zero,zero,869
    d938:	0000d960 	cmpeqi	zero,zero,869
    d93c:	0000d960 	cmpeqi	zero,zero,869
    d940:	0000d960 	cmpeqi	zero,zero,869
    d944:	0000d960 	cmpeqi	zero,zero,869
    d948:	0000d960 	cmpeqi	zero,zero,869
    d94c:	0000db24 	muli	zero,zero,876
    d950:	0000d9b4 	movhi	zero,870
    d954:	0000d97c 	xorhi	zero,zero,869
    d958:	1007883a 	mov	r3,r2
    d95c:	18000005 	stb	zero,0(r3)
    d960:	9005883a 	mov	r2,r18
    d964:	dfc00a17 	ldw	ra,40(sp)
    d968:	dc800917 	ldw	r18,36(sp)
    d96c:	dc400817 	ldw	r17,32(sp)
    d970:	dc000717 	ldw	r16,28(sp)
    d974:	dec00b04 	addi	sp,sp,44
    d978:	f800283a 	ret
    d97c:	8000011e 	bne	r16,zero,d984 <_dcvt+0x104>
    d980:	04000044 	movi	r16,1
    d984:	d8800e17 	ldw	r2,56(sp)
    d988:	42003fcc 	andi	r8,r8,255
    d98c:	4200201c 	xori	r8,r8,128
    d990:	423fe004 	addi	r8,r8,-128
    d994:	300b883a 	mov	r5,r6
    d998:	d8800215 	stw	r2,8(sp)
    d99c:	da000115 	stw	r8,4(sp)
    d9a0:	dc800015 	stw	r18,0(sp)
    d9a4:	800f883a 	mov	r7,r16
    d9a8:	480d883a 	mov	r6,r9
    d9ac:	000d51c0 	call	d51c <_gcvt>
    d9b0:	003feb06 	br	d960 <__alt_exception_stack_pointer+0xf800d960>
    d9b4:	8000641e 	bne	r16,zero,db48 <_dcvt+0x2c8>
    d9b8:	dc400e17 	ldw	r17,56(sp)
    d9bc:	d8800404 	addi	r2,sp,16
    d9c0:	d8800315 	stw	r2,12(sp)
    d9c4:	d8800504 	addi	r2,sp,20
    d9c8:	d8800215 	stw	r2,8(sp)
    d9cc:	d8800604 	addi	r2,sp,24
    d9d0:	300b883a 	mov	r5,r6
    d9d4:	d8800115 	stw	r2,4(sp)
    d9d8:	480d883a 	mov	r6,r9
    d9dc:	dc000015 	stw	r16,0(sp)
    d9e0:	01c000c4 	movi	r7,3
    d9e4:	000b9d00 	call	b9d0 <_dtoa_r>
    d9e8:	d9800617 	ldw	r6,24(sp)
    d9ec:	00c9c3c4 	movi	r3,9999
    d9f0:	30c05b26 	beq	r6,r3,db60 <_dcvt+0x2e0>
    d9f4:	11c00003 	ldbu	r7,0(r2)
    d9f8:	38c03fcc 	andi	r3,r7,255
    d9fc:	18c0201c 	xori	r3,r3,128
    da00:	18ffe004 	addi	r3,r3,-128
    da04:	18005a26 	beq	r3,zero,db70 <_dcvt+0x2f0>
    da08:	01805c0e 	bge	zero,r6,db7c <_dcvt+0x2fc>
    da0c:	9011883a 	mov	r8,r18
    da10:	1009883a 	mov	r4,r2
    da14:	00000206 	br	da20 <_dcvt+0x1a0>
    da18:	1811883a 	mov	r8,r3
    da1c:	30001226 	beq	r6,zero,da68 <_dcvt+0x1e8>
    da20:	31bfffc4 	addi	r6,r6,-1
    da24:	41c00005 	stb	r7,0(r8)
    da28:	21000044 	addi	r4,r4,1
    da2c:	d9800615 	stw	r6,24(sp)
    da30:	21c00003 	ldbu	r7,0(r4)
    da34:	40c00044 	addi	r3,r8,1
    da38:	3a003fcc 	andi	r8,r7,255
    da3c:	4200201c 	xori	r8,r8,128
    da40:	423fe004 	addi	r8,r8,-128
    da44:	403ff41e 	bne	r8,zero,da18 <__alt_exception_stack_pointer+0xf800da18>
    da48:	0180070e 	bge	zero,r6,da68 <_dcvt+0x1e8>
    da4c:	180f883a 	mov	r7,r3
    da50:	02000c04 	movi	r8,48
    da54:	1987883a 	add	r3,r3,r6
    da58:	3a000005 	stb	r8,0(r7)
    da5c:	39c00044 	addi	r7,r7,1
    da60:	19fffd1e 	bne	r3,r7,da58 <__alt_exception_stack_pointer+0xf800da58>
    da64:	d8000615 	stw	zero,24(sp)
    da68:	8800021e 	bne	r17,zero,da74 <_dcvt+0x1f4>
    da6c:	21400007 	ldb	r5,0(r4)
    da70:	283fba26 	beq	r5,zero,d95c <__alt_exception_stack_pointer+0xf800d95c>
    da74:	11003626 	beq	r2,r4,db50 <_dcvt+0x2d0>
    da78:	d9400617 	ldw	r5,24(sp)
    da7c:	00800b84 	movi	r2,46
    da80:	18800005 	stb	r2,0(r3)
    da84:	18800044 	addi	r2,r3,1
    da88:	28003f0e 	bge	r5,zero,db88 <_dcvt+0x308>
    da8c:	043fb20e 	bge	zero,r16,d958 <__alt_exception_stack_pointer+0xf800d958>
    da90:	01800c04 	movi	r6,48
    da94:	00000206 	br	daa0 <_dcvt+0x220>
    da98:	1805883a 	mov	r2,r3
    da9c:	803faf26 	beq	r16,zero,d95c <__alt_exception_stack_pointer+0xf800d95c>
    daa0:	11800005 	stb	r6,0(r2)
    daa4:	29400044 	addi	r5,r5,1
    daa8:	10c00044 	addi	r3,r2,1
    daac:	843fffc4 	addi	r16,r16,-1
    dab0:	283ff91e 	bne	r5,zero,da98 <__alt_exception_stack_pointer+0xf800da98>
    dab4:	d8000615 	stw	zero,24(sp)
    dab8:	20800003 	ldbu	r2,0(r4)
    dabc:	11403fcc 	andi	r5,r2,255
    dac0:	2940201c 	xori	r5,r5,128
    dac4:	297fe004 	addi	r5,r5,-128
    dac8:	28000e26 	beq	r5,zero,db04 <_dcvt+0x284>
    dacc:	043fa30e 	bge	zero,r16,d95c <__alt_exception_stack_pointer+0xf800d95c>
    dad0:	180b883a 	mov	r5,r3
    dad4:	00000206 	br	dae0 <_dcvt+0x260>
    dad8:	180b883a 	mov	r5,r3
    dadc:	803f9f26 	beq	r16,zero,d95c <__alt_exception_stack_pointer+0xf800d95c>
    dae0:	28800005 	stb	r2,0(r5)
    dae4:	21000044 	addi	r4,r4,1
    dae8:	20800003 	ldbu	r2,0(r4)
    daec:	18c00044 	addi	r3,r3,1
    daf0:	843fffc4 	addi	r16,r16,-1
    daf4:	11403fcc 	andi	r5,r2,255
    daf8:	2940201c 	xori	r5,r5,128
    dafc:	297fe004 	addi	r5,r5,-128
    db00:	283ff51e 	bne	r5,zero,dad8 <__alt_exception_stack_pointer+0xf800dad8>
    db04:	043f950e 	bge	zero,r16,d95c <__alt_exception_stack_pointer+0xf800d95c>
    db08:	1805883a 	mov	r2,r3
    db0c:	01000c04 	movi	r4,48
    db10:	1c07883a 	add	r3,r3,r16
    db14:	11000005 	stb	r4,0(r2)
    db18:	10800044 	addi	r2,r2,1
    db1c:	18bffd1e 	bne	r3,r2,db14 <__alt_exception_stack_pointer+0xf800db14>
    db20:	003f8e06 	br	d95c <__alt_exception_stack_pointer+0xf800d95c>
    db24:	d8800e17 	ldw	r2,56(sp)
    db28:	42003fcc 	andi	r8,r8,255
    db2c:	4200201c 	xori	r8,r8,128
    db30:	423fe004 	addi	r8,r8,-128
    db34:	d8800215 	stw	r2,8(sp)
    db38:	da000115 	stw	r8,4(sp)
    db3c:	dc000015 	stw	r16,0(sp)
    db40:	000d0580 	call	d058 <print_e>
    db44:	003f8606 	br	d960 <__alt_exception_stack_pointer+0xf800d960>
    db48:	04400044 	movi	r17,1
    db4c:	003f9b06 	br	d9bc <__alt_exception_stack_pointer+0xf800d9bc>
    db50:	00800c04 	movi	r2,48
    db54:	18800005 	stb	r2,0(r3)
    db58:	18c00044 	addi	r3,r3,1
    db5c:	003fc606 	br	da78 <__alt_exception_stack_pointer+0xf800da78>
    db60:	100b883a 	mov	r5,r2
    db64:	9009883a 	mov	r4,r18
    db68:	0010c5c0 	call	10c5c <strcpy>
    db6c:	003f7c06 	br	d960 <__alt_exception_stack_pointer+0xf800d960>
    db70:	1009883a 	mov	r4,r2
    db74:	9007883a 	mov	r3,r18
    db78:	003fb306 	br	da48 <__alt_exception_stack_pointer+0xf800da48>
    db7c:	1009883a 	mov	r4,r2
    db80:	9007883a 	mov	r3,r18
    db84:	003fb806 	br	da68 <__alt_exception_stack_pointer+0xf800da68>
    db88:	1007883a 	mov	r3,r2
    db8c:	003fca06 	br	dab8 <__alt_exception_stack_pointer+0xf800dab8>

0000db90 <__sflush_r>:
    db90:	2880030b 	ldhu	r2,12(r5)
    db94:	defffb04 	addi	sp,sp,-20
    db98:	dcc00315 	stw	r19,12(sp)
    db9c:	dc400115 	stw	r17,4(sp)
    dba0:	dfc00415 	stw	ra,16(sp)
    dba4:	dc800215 	stw	r18,8(sp)
    dba8:	dc000015 	stw	r16,0(sp)
    dbac:	10c0020c 	andi	r3,r2,8
    dbb0:	2823883a 	mov	r17,r5
    dbb4:	2027883a 	mov	r19,r4
    dbb8:	1800311e 	bne	r3,zero,dc80 <__sflush_r+0xf0>
    dbbc:	28c00117 	ldw	r3,4(r5)
    dbc0:	10820014 	ori	r2,r2,2048
    dbc4:	2880030d 	sth	r2,12(r5)
    dbc8:	00c04b0e 	bge	zero,r3,dcf8 <__sflush_r+0x168>
    dbcc:	8a000a17 	ldw	r8,40(r17)
    dbd0:	40002326 	beq	r8,zero,dc60 <__sflush_r+0xd0>
    dbd4:	9c000017 	ldw	r16,0(r19)
    dbd8:	10c4000c 	andi	r3,r2,4096
    dbdc:	98000015 	stw	zero,0(r19)
    dbe0:	18004826 	beq	r3,zero,dd04 <__sflush_r+0x174>
    dbe4:	89801417 	ldw	r6,80(r17)
    dbe8:	10c0010c 	andi	r3,r2,4
    dbec:	18000626 	beq	r3,zero,dc08 <__sflush_r+0x78>
    dbf0:	88c00117 	ldw	r3,4(r17)
    dbf4:	88800c17 	ldw	r2,48(r17)
    dbf8:	30cdc83a 	sub	r6,r6,r3
    dbfc:	10000226 	beq	r2,zero,dc08 <__sflush_r+0x78>
    dc00:	88800f17 	ldw	r2,60(r17)
    dc04:	308dc83a 	sub	r6,r6,r2
    dc08:	89400717 	ldw	r5,28(r17)
    dc0c:	000f883a 	mov	r7,zero
    dc10:	9809883a 	mov	r4,r19
    dc14:	403ee83a 	callr	r8
    dc18:	00ffffc4 	movi	r3,-1
    dc1c:	10c04426 	beq	r2,r3,dd30 <__sflush_r+0x1a0>
    dc20:	88c0030b 	ldhu	r3,12(r17)
    dc24:	89000417 	ldw	r4,16(r17)
    dc28:	88000115 	stw	zero,4(r17)
    dc2c:	197dffcc 	andi	r5,r3,63487
    dc30:	8940030d 	sth	r5,12(r17)
    dc34:	89000015 	stw	r4,0(r17)
    dc38:	18c4000c 	andi	r3,r3,4096
    dc3c:	18002c1e 	bne	r3,zero,dcf0 <__sflush_r+0x160>
    dc40:	89400c17 	ldw	r5,48(r17)
    dc44:	9c000015 	stw	r16,0(r19)
    dc48:	28000526 	beq	r5,zero,dc60 <__sflush_r+0xd0>
    dc4c:	88801004 	addi	r2,r17,64
    dc50:	28800226 	beq	r5,r2,dc5c <__sflush_r+0xcc>
    dc54:	9809883a 	mov	r4,r19
    dc58:	000e30c0 	call	e30c <_free_r>
    dc5c:	88000c15 	stw	zero,48(r17)
    dc60:	0005883a 	mov	r2,zero
    dc64:	dfc00417 	ldw	ra,16(sp)
    dc68:	dcc00317 	ldw	r19,12(sp)
    dc6c:	dc800217 	ldw	r18,8(sp)
    dc70:	dc400117 	ldw	r17,4(sp)
    dc74:	dc000017 	ldw	r16,0(sp)
    dc78:	dec00504 	addi	sp,sp,20
    dc7c:	f800283a 	ret
    dc80:	2c800417 	ldw	r18,16(r5)
    dc84:	903ff626 	beq	r18,zero,dc60 <__alt_exception_stack_pointer+0xf800dc60>
    dc88:	2c000017 	ldw	r16,0(r5)
    dc8c:	108000cc 	andi	r2,r2,3
    dc90:	2c800015 	stw	r18,0(r5)
    dc94:	84a1c83a 	sub	r16,r16,r18
    dc98:	1000131e 	bne	r2,zero,dce8 <__sflush_r+0x158>
    dc9c:	28800517 	ldw	r2,20(r5)
    dca0:	88800215 	stw	r2,8(r17)
    dca4:	04000316 	blt	zero,r16,dcb4 <__sflush_r+0x124>
    dca8:	003fed06 	br	dc60 <__alt_exception_stack_pointer+0xf800dc60>
    dcac:	90a5883a 	add	r18,r18,r2
    dcb0:	043feb0e 	bge	zero,r16,dc60 <__alt_exception_stack_pointer+0xf800dc60>
    dcb4:	88800917 	ldw	r2,36(r17)
    dcb8:	89400717 	ldw	r5,28(r17)
    dcbc:	800f883a 	mov	r7,r16
    dcc0:	900d883a 	mov	r6,r18
    dcc4:	9809883a 	mov	r4,r19
    dcc8:	103ee83a 	callr	r2
    dccc:	80a1c83a 	sub	r16,r16,r2
    dcd0:	00bff616 	blt	zero,r2,dcac <__alt_exception_stack_pointer+0xf800dcac>
    dcd4:	88c0030b 	ldhu	r3,12(r17)
    dcd8:	00bfffc4 	movi	r2,-1
    dcdc:	18c01014 	ori	r3,r3,64
    dce0:	88c0030d 	sth	r3,12(r17)
    dce4:	003fdf06 	br	dc64 <__alt_exception_stack_pointer+0xf800dc64>
    dce8:	0005883a 	mov	r2,zero
    dcec:	003fec06 	br	dca0 <__alt_exception_stack_pointer+0xf800dca0>
    dcf0:	88801415 	stw	r2,80(r17)
    dcf4:	003fd206 	br	dc40 <__alt_exception_stack_pointer+0xf800dc40>
    dcf8:	28c00f17 	ldw	r3,60(r5)
    dcfc:	00ffb316 	blt	zero,r3,dbcc <__alt_exception_stack_pointer+0xf800dbcc>
    dd00:	003fd706 	br	dc60 <__alt_exception_stack_pointer+0xf800dc60>
    dd04:	89400717 	ldw	r5,28(r17)
    dd08:	000d883a 	mov	r6,zero
    dd0c:	01c00044 	movi	r7,1
    dd10:	9809883a 	mov	r4,r19
    dd14:	403ee83a 	callr	r8
    dd18:	100d883a 	mov	r6,r2
    dd1c:	00bfffc4 	movi	r2,-1
    dd20:	30801426 	beq	r6,r2,dd74 <__sflush_r+0x1e4>
    dd24:	8880030b 	ldhu	r2,12(r17)
    dd28:	8a000a17 	ldw	r8,40(r17)
    dd2c:	003fae06 	br	dbe8 <__alt_exception_stack_pointer+0xf800dbe8>
    dd30:	98c00017 	ldw	r3,0(r19)
    dd34:	183fba26 	beq	r3,zero,dc20 <__alt_exception_stack_pointer+0xf800dc20>
    dd38:	01000744 	movi	r4,29
    dd3c:	19000626 	beq	r3,r4,dd58 <__sflush_r+0x1c8>
    dd40:	01000584 	movi	r4,22
    dd44:	19000426 	beq	r3,r4,dd58 <__sflush_r+0x1c8>
    dd48:	88c0030b 	ldhu	r3,12(r17)
    dd4c:	18c01014 	ori	r3,r3,64
    dd50:	88c0030d 	sth	r3,12(r17)
    dd54:	003fc306 	br	dc64 <__alt_exception_stack_pointer+0xf800dc64>
    dd58:	8880030b 	ldhu	r2,12(r17)
    dd5c:	88c00417 	ldw	r3,16(r17)
    dd60:	88000115 	stw	zero,4(r17)
    dd64:	10bdffcc 	andi	r2,r2,63487
    dd68:	8880030d 	sth	r2,12(r17)
    dd6c:	88c00015 	stw	r3,0(r17)
    dd70:	003fb306 	br	dc40 <__alt_exception_stack_pointer+0xf800dc40>
    dd74:	98800017 	ldw	r2,0(r19)
    dd78:	103fea26 	beq	r2,zero,dd24 <__alt_exception_stack_pointer+0xf800dd24>
    dd7c:	00c00744 	movi	r3,29
    dd80:	10c00226 	beq	r2,r3,dd8c <__sflush_r+0x1fc>
    dd84:	00c00584 	movi	r3,22
    dd88:	10c0031e 	bne	r2,r3,dd98 <__sflush_r+0x208>
    dd8c:	9c000015 	stw	r16,0(r19)
    dd90:	0005883a 	mov	r2,zero
    dd94:	003fb306 	br	dc64 <__alt_exception_stack_pointer+0xf800dc64>
    dd98:	88c0030b 	ldhu	r3,12(r17)
    dd9c:	3005883a 	mov	r2,r6
    dda0:	18c01014 	ori	r3,r3,64
    dda4:	88c0030d 	sth	r3,12(r17)
    dda8:	003fae06 	br	dc64 <__alt_exception_stack_pointer+0xf800dc64>

0000ddac <_fflush_r>:
    ddac:	defffd04 	addi	sp,sp,-12
    ddb0:	dc000115 	stw	r16,4(sp)
    ddb4:	dfc00215 	stw	ra,8(sp)
    ddb8:	2021883a 	mov	r16,r4
    ddbc:	20000226 	beq	r4,zero,ddc8 <_fflush_r+0x1c>
    ddc0:	20800e17 	ldw	r2,56(r4)
    ddc4:	10000c26 	beq	r2,zero,ddf8 <_fflush_r+0x4c>
    ddc8:	2880030f 	ldh	r2,12(r5)
    ddcc:	1000051e 	bne	r2,zero,dde4 <_fflush_r+0x38>
    ddd0:	0005883a 	mov	r2,zero
    ddd4:	dfc00217 	ldw	ra,8(sp)
    ddd8:	dc000117 	ldw	r16,4(sp)
    dddc:	dec00304 	addi	sp,sp,12
    dde0:	f800283a 	ret
    dde4:	8009883a 	mov	r4,r16
    dde8:	dfc00217 	ldw	ra,8(sp)
    ddec:	dc000117 	ldw	r16,4(sp)
    ddf0:	dec00304 	addi	sp,sp,12
    ddf4:	000db901 	jmpi	db90 <__sflush_r>
    ddf8:	d9400015 	stw	r5,0(sp)
    ddfc:	000e1980 	call	e198 <__sinit>
    de00:	d9400017 	ldw	r5,0(sp)
    de04:	003ff006 	br	ddc8 <__alt_exception_stack_pointer+0xf800ddc8>

0000de08 <fflush>:
    de08:	20000526 	beq	r4,zero,de20 <fflush+0x18>
    de0c:	008000b4 	movhi	r2,2
    de10:	10a92a04 	addi	r2,r2,-23384
    de14:	200b883a 	mov	r5,r4
    de18:	11000017 	ldw	r4,0(r2)
    de1c:	000ddac1 	jmpi	ddac <_fflush_r>
    de20:	008000b4 	movhi	r2,2
    de24:	10a92904 	addi	r2,r2,-23388
    de28:	11000017 	ldw	r4,0(r2)
    de2c:	01400074 	movhi	r5,1
    de30:	29776b04 	addi	r5,r5,-8788
    de34:	000eba81 	jmpi	eba8 <_fwalk_reent>

0000de38 <__fp_unlock>:
    de38:	0005883a 	mov	r2,zero
    de3c:	f800283a 	ret

0000de40 <_cleanup_r>:
    de40:	01400074 	movhi	r5,1
    de44:	29495d04 	addi	r5,r5,9588
    de48:	000eba81 	jmpi	eba8 <_fwalk_reent>

0000de4c <__sinit.part.1>:
    de4c:	defff704 	addi	sp,sp,-36
    de50:	00c00074 	movhi	r3,1
    de54:	dfc00815 	stw	ra,32(sp)
    de58:	ddc00715 	stw	r23,28(sp)
    de5c:	dd800615 	stw	r22,24(sp)
    de60:	dd400515 	stw	r21,20(sp)
    de64:	dd000415 	stw	r20,16(sp)
    de68:	dcc00315 	stw	r19,12(sp)
    de6c:	dc800215 	stw	r18,8(sp)
    de70:	dc400115 	stw	r17,4(sp)
    de74:	dc000015 	stw	r16,0(sp)
    de78:	18f79004 	addi	r3,r3,-8640
    de7c:	24000117 	ldw	r16,4(r4)
    de80:	20c00f15 	stw	r3,60(r4)
    de84:	2080bb04 	addi	r2,r4,748
    de88:	00c000c4 	movi	r3,3
    de8c:	20c0b915 	stw	r3,740(r4)
    de90:	2080ba15 	stw	r2,744(r4)
    de94:	2000b815 	stw	zero,736(r4)
    de98:	05c00204 	movi	r23,8
    de9c:	00800104 	movi	r2,4
    dea0:	2025883a 	mov	r18,r4
    dea4:	b80d883a 	mov	r6,r23
    dea8:	81001704 	addi	r4,r16,92
    deac:	000b883a 	mov	r5,zero
    deb0:	80000015 	stw	zero,0(r16)
    deb4:	80000115 	stw	zero,4(r16)
    deb8:	80000215 	stw	zero,8(r16)
    debc:	8080030d 	sth	r2,12(r16)
    dec0:	80001915 	stw	zero,100(r16)
    dec4:	8000038d 	sth	zero,14(r16)
    dec8:	80000415 	stw	zero,16(r16)
    decc:	80000515 	stw	zero,20(r16)
    ded0:	80000615 	stw	zero,24(r16)
    ded4:	000f28c0 	call	f28c <memset>
    ded8:	05800074 	movhi	r22,1
    dedc:	94400217 	ldw	r17,8(r18)
    dee0:	05400074 	movhi	r21,1
    dee4:	05000074 	movhi	r20,1
    dee8:	04c00074 	movhi	r19,1
    deec:	b5829104 	addi	r22,r22,2628
    def0:	ad42a804 	addi	r21,r21,2720
    def4:	a502c704 	addi	r20,r20,2844
    def8:	9cc2de04 	addi	r19,r19,2936
    defc:	85800815 	stw	r22,32(r16)
    df00:	85400915 	stw	r21,36(r16)
    df04:	85000a15 	stw	r20,40(r16)
    df08:	84c00b15 	stw	r19,44(r16)
    df0c:	84000715 	stw	r16,28(r16)
    df10:	00800284 	movi	r2,10
    df14:	8880030d 	sth	r2,12(r17)
    df18:	00800044 	movi	r2,1
    df1c:	b80d883a 	mov	r6,r23
    df20:	89001704 	addi	r4,r17,92
    df24:	000b883a 	mov	r5,zero
    df28:	88000015 	stw	zero,0(r17)
    df2c:	88000115 	stw	zero,4(r17)
    df30:	88000215 	stw	zero,8(r17)
    df34:	88001915 	stw	zero,100(r17)
    df38:	8880038d 	sth	r2,14(r17)
    df3c:	88000415 	stw	zero,16(r17)
    df40:	88000515 	stw	zero,20(r17)
    df44:	88000615 	stw	zero,24(r17)
    df48:	000f28c0 	call	f28c <memset>
    df4c:	94000317 	ldw	r16,12(r18)
    df50:	00800484 	movi	r2,18
    df54:	8c400715 	stw	r17,28(r17)
    df58:	8d800815 	stw	r22,32(r17)
    df5c:	8d400915 	stw	r21,36(r17)
    df60:	8d000a15 	stw	r20,40(r17)
    df64:	8cc00b15 	stw	r19,44(r17)
    df68:	8080030d 	sth	r2,12(r16)
    df6c:	00800084 	movi	r2,2
    df70:	80000015 	stw	zero,0(r16)
    df74:	80000115 	stw	zero,4(r16)
    df78:	80000215 	stw	zero,8(r16)
    df7c:	80001915 	stw	zero,100(r16)
    df80:	8080038d 	sth	r2,14(r16)
    df84:	80000415 	stw	zero,16(r16)
    df88:	80000515 	stw	zero,20(r16)
    df8c:	80000615 	stw	zero,24(r16)
    df90:	b80d883a 	mov	r6,r23
    df94:	000b883a 	mov	r5,zero
    df98:	81001704 	addi	r4,r16,92
    df9c:	000f28c0 	call	f28c <memset>
    dfa0:	00800044 	movi	r2,1
    dfa4:	84000715 	stw	r16,28(r16)
    dfa8:	85800815 	stw	r22,32(r16)
    dfac:	85400915 	stw	r21,36(r16)
    dfb0:	85000a15 	stw	r20,40(r16)
    dfb4:	84c00b15 	stw	r19,44(r16)
    dfb8:	90800e15 	stw	r2,56(r18)
    dfbc:	dfc00817 	ldw	ra,32(sp)
    dfc0:	ddc00717 	ldw	r23,28(sp)
    dfc4:	dd800617 	ldw	r22,24(sp)
    dfc8:	dd400517 	ldw	r21,20(sp)
    dfcc:	dd000417 	ldw	r20,16(sp)
    dfd0:	dcc00317 	ldw	r19,12(sp)
    dfd4:	dc800217 	ldw	r18,8(sp)
    dfd8:	dc400117 	ldw	r17,4(sp)
    dfdc:	dc000017 	ldw	r16,0(sp)
    dfe0:	dec00904 	addi	sp,sp,36
    dfe4:	f800283a 	ret

0000dfe8 <__fp_lock>:
    dfe8:	0005883a 	mov	r2,zero
    dfec:	f800283a 	ret

0000dff0 <__sfmoreglue>:
    dff0:	defffc04 	addi	sp,sp,-16
    dff4:	dc800215 	stw	r18,8(sp)
    dff8:	2825883a 	mov	r18,r5
    dffc:	dc000015 	stw	r16,0(sp)
    e000:	01401a04 	movi	r5,104
    e004:	2021883a 	mov	r16,r4
    e008:	913fffc4 	addi	r4,r18,-1
    e00c:	dfc00315 	stw	ra,12(sp)
    e010:	dc400115 	stw	r17,4(sp)
    e014:	0005b840 	call	5b84 <__mulsi3>
    e018:	8009883a 	mov	r4,r16
    e01c:	11401d04 	addi	r5,r2,116
    e020:	1023883a 	mov	r17,r2
    e024:	00088600 	call	8860 <_malloc_r>
    e028:	1021883a 	mov	r16,r2
    e02c:	10000726 	beq	r2,zero,e04c <__sfmoreglue+0x5c>
    e030:	11000304 	addi	r4,r2,12
    e034:	10000015 	stw	zero,0(r2)
    e038:	14800115 	stw	r18,4(r2)
    e03c:	11000215 	stw	r4,8(r2)
    e040:	89801a04 	addi	r6,r17,104
    e044:	000b883a 	mov	r5,zero
    e048:	000f28c0 	call	f28c <memset>
    e04c:	8005883a 	mov	r2,r16
    e050:	dfc00317 	ldw	ra,12(sp)
    e054:	dc800217 	ldw	r18,8(sp)
    e058:	dc400117 	ldw	r17,4(sp)
    e05c:	dc000017 	ldw	r16,0(sp)
    e060:	dec00404 	addi	sp,sp,16
    e064:	f800283a 	ret

0000e068 <__sfp>:
    e068:	defffb04 	addi	sp,sp,-20
    e06c:	dc000015 	stw	r16,0(sp)
    e070:	040000b4 	movhi	r16,2
    e074:	84292904 	addi	r16,r16,-23388
    e078:	dcc00315 	stw	r19,12(sp)
    e07c:	2027883a 	mov	r19,r4
    e080:	81000017 	ldw	r4,0(r16)
    e084:	dfc00415 	stw	ra,16(sp)
    e088:	dc800215 	stw	r18,8(sp)
    e08c:	20800e17 	ldw	r2,56(r4)
    e090:	dc400115 	stw	r17,4(sp)
    e094:	1000021e 	bne	r2,zero,e0a0 <__sfp+0x38>
    e098:	000de4c0 	call	de4c <__sinit.part.1>
    e09c:	81000017 	ldw	r4,0(r16)
    e0a0:	2480b804 	addi	r18,r4,736
    e0a4:	047fffc4 	movi	r17,-1
    e0a8:	91000117 	ldw	r4,4(r18)
    e0ac:	94000217 	ldw	r16,8(r18)
    e0b0:	213fffc4 	addi	r4,r4,-1
    e0b4:	20000a16 	blt	r4,zero,e0e0 <__sfp+0x78>
    e0b8:	8080030f 	ldh	r2,12(r16)
    e0bc:	10000c26 	beq	r2,zero,e0f0 <__sfp+0x88>
    e0c0:	80c01d04 	addi	r3,r16,116
    e0c4:	00000206 	br	e0d0 <__sfp+0x68>
    e0c8:	18bfe60f 	ldh	r2,-104(r3)
    e0cc:	10000826 	beq	r2,zero,e0f0 <__sfp+0x88>
    e0d0:	213fffc4 	addi	r4,r4,-1
    e0d4:	1c3ffd04 	addi	r16,r3,-12
    e0d8:	18c01a04 	addi	r3,r3,104
    e0dc:	247ffa1e 	bne	r4,r17,e0c8 <__alt_exception_stack_pointer+0xf800e0c8>
    e0e0:	90800017 	ldw	r2,0(r18)
    e0e4:	10001d26 	beq	r2,zero,e15c <__sfp+0xf4>
    e0e8:	1025883a 	mov	r18,r2
    e0ec:	003fee06 	br	e0a8 <__alt_exception_stack_pointer+0xf800e0a8>
    e0f0:	00bfffc4 	movi	r2,-1
    e0f4:	8080038d 	sth	r2,14(r16)
    e0f8:	00800044 	movi	r2,1
    e0fc:	8080030d 	sth	r2,12(r16)
    e100:	80001915 	stw	zero,100(r16)
    e104:	80000015 	stw	zero,0(r16)
    e108:	80000215 	stw	zero,8(r16)
    e10c:	80000115 	stw	zero,4(r16)
    e110:	80000415 	stw	zero,16(r16)
    e114:	80000515 	stw	zero,20(r16)
    e118:	80000615 	stw	zero,24(r16)
    e11c:	01800204 	movi	r6,8
    e120:	000b883a 	mov	r5,zero
    e124:	81001704 	addi	r4,r16,92
    e128:	000f28c0 	call	f28c <memset>
    e12c:	8005883a 	mov	r2,r16
    e130:	80000c15 	stw	zero,48(r16)
    e134:	80000d15 	stw	zero,52(r16)
    e138:	80001115 	stw	zero,68(r16)
    e13c:	80001215 	stw	zero,72(r16)
    e140:	dfc00417 	ldw	ra,16(sp)
    e144:	dcc00317 	ldw	r19,12(sp)
    e148:	dc800217 	ldw	r18,8(sp)
    e14c:	dc400117 	ldw	r17,4(sp)
    e150:	dc000017 	ldw	r16,0(sp)
    e154:	dec00504 	addi	sp,sp,20
    e158:	f800283a 	ret
    e15c:	01400104 	movi	r5,4
    e160:	9809883a 	mov	r4,r19
    e164:	000dff00 	call	dff0 <__sfmoreglue>
    e168:	90800015 	stw	r2,0(r18)
    e16c:	103fde1e 	bne	r2,zero,e0e8 <__alt_exception_stack_pointer+0xf800e0e8>
    e170:	00800304 	movi	r2,12
    e174:	98800015 	stw	r2,0(r19)
    e178:	0005883a 	mov	r2,zero
    e17c:	003ff006 	br	e140 <__alt_exception_stack_pointer+0xf800e140>

0000e180 <_cleanup>:
    e180:	008000b4 	movhi	r2,2
    e184:	10a92904 	addi	r2,r2,-23388
    e188:	11000017 	ldw	r4,0(r2)
    e18c:	01400074 	movhi	r5,1
    e190:	29495d04 	addi	r5,r5,9588
    e194:	000eba81 	jmpi	eba8 <_fwalk_reent>

0000e198 <__sinit>:
    e198:	20800e17 	ldw	r2,56(r4)
    e19c:	10000126 	beq	r2,zero,e1a4 <__sinit+0xc>
    e1a0:	f800283a 	ret
    e1a4:	000de4c1 	jmpi	de4c <__sinit.part.1>

0000e1a8 <__sfp_lock_acquire>:
    e1a8:	f800283a 	ret

0000e1ac <__sfp_lock_release>:
    e1ac:	f800283a 	ret

0000e1b0 <__sinit_lock_acquire>:
    e1b0:	f800283a 	ret

0000e1b4 <__sinit_lock_release>:
    e1b4:	f800283a 	ret

0000e1b8 <__fp_lock_all>:
    e1b8:	008000b4 	movhi	r2,2
    e1bc:	10a92a04 	addi	r2,r2,-23384
    e1c0:	11000017 	ldw	r4,0(r2)
    e1c4:	01400074 	movhi	r5,1
    e1c8:	2977fa04 	addi	r5,r5,-8216
    e1cc:	000eae41 	jmpi	eae4 <_fwalk>

0000e1d0 <__fp_unlock_all>:
    e1d0:	008000b4 	movhi	r2,2
    e1d4:	10a92a04 	addi	r2,r2,-23384
    e1d8:	11000017 	ldw	r4,0(r2)
    e1dc:	01400074 	movhi	r5,1
    e1e0:	29778e04 	addi	r5,r5,-8648
    e1e4:	000eae41 	jmpi	eae4 <_fwalk>

0000e1e8 <_malloc_trim_r>:
    e1e8:	defffb04 	addi	sp,sp,-20
    e1ec:	dcc00315 	stw	r19,12(sp)
    e1f0:	04c000b4 	movhi	r19,2
    e1f4:	dc800215 	stw	r18,8(sp)
    e1f8:	dc400115 	stw	r17,4(sp)
    e1fc:	dc000015 	stw	r16,0(sp)
    e200:	dfc00415 	stw	ra,16(sp)
    e204:	2821883a 	mov	r16,r5
    e208:	9ce32804 	addi	r19,r19,-29536
    e20c:	2025883a 	mov	r18,r4
    e210:	00141300 	call	14130 <__malloc_lock>
    e214:	98800217 	ldw	r2,8(r19)
    e218:	14400117 	ldw	r17,4(r2)
    e21c:	00bfff04 	movi	r2,-4
    e220:	88a2703a 	and	r17,r17,r2
    e224:	8c21c83a 	sub	r16,r17,r16
    e228:	8403fbc4 	addi	r16,r16,4079
    e22c:	8020d33a 	srli	r16,r16,12
    e230:	0083ffc4 	movi	r2,4095
    e234:	843fffc4 	addi	r16,r16,-1
    e238:	8020933a 	slli	r16,r16,12
    e23c:	1400060e 	bge	r2,r16,e258 <_malloc_trim_r+0x70>
    e240:	000b883a 	mov	r5,zero
    e244:	9009883a 	mov	r4,r18
    e248:	00091ac0 	call	91ac <_sbrk_r>
    e24c:	98c00217 	ldw	r3,8(r19)
    e250:	1c47883a 	add	r3,r3,r17
    e254:	10c00a26 	beq	r2,r3,e280 <_malloc_trim_r+0x98>
    e258:	9009883a 	mov	r4,r18
    e25c:	00141540 	call	14154 <__malloc_unlock>
    e260:	0005883a 	mov	r2,zero
    e264:	dfc00417 	ldw	ra,16(sp)
    e268:	dcc00317 	ldw	r19,12(sp)
    e26c:	dc800217 	ldw	r18,8(sp)
    e270:	dc400117 	ldw	r17,4(sp)
    e274:	dc000017 	ldw	r16,0(sp)
    e278:	dec00504 	addi	sp,sp,20
    e27c:	f800283a 	ret
    e280:	040bc83a 	sub	r5,zero,r16
    e284:	9009883a 	mov	r4,r18
    e288:	00091ac0 	call	91ac <_sbrk_r>
    e28c:	00ffffc4 	movi	r3,-1
    e290:	10c00d26 	beq	r2,r3,e2c8 <_malloc_trim_r+0xe0>
    e294:	00c000b4 	movhi	r3,2
    e298:	18f22804 	addi	r3,r3,-14176
    e29c:	18800017 	ldw	r2,0(r3)
    e2a0:	99000217 	ldw	r4,8(r19)
    e2a4:	8c23c83a 	sub	r17,r17,r16
    e2a8:	8c400054 	ori	r17,r17,1
    e2ac:	1421c83a 	sub	r16,r2,r16
    e2b0:	24400115 	stw	r17,4(r4)
    e2b4:	9009883a 	mov	r4,r18
    e2b8:	1c000015 	stw	r16,0(r3)
    e2bc:	00141540 	call	14154 <__malloc_unlock>
    e2c0:	00800044 	movi	r2,1
    e2c4:	003fe706 	br	e264 <__alt_exception_stack_pointer+0xf800e264>
    e2c8:	000b883a 	mov	r5,zero
    e2cc:	9009883a 	mov	r4,r18
    e2d0:	00091ac0 	call	91ac <_sbrk_r>
    e2d4:	99000217 	ldw	r4,8(r19)
    e2d8:	014003c4 	movi	r5,15
    e2dc:	1107c83a 	sub	r3,r2,r4
    e2e0:	28ffdd0e 	bge	r5,r3,e258 <__alt_exception_stack_pointer+0xf800e258>
    e2e4:	014000b4 	movhi	r5,2
    e2e8:	29692b04 	addi	r5,r5,-23380
    e2ec:	29400017 	ldw	r5,0(r5)
    e2f0:	18c00054 	ori	r3,r3,1
    e2f4:	20c00115 	stw	r3,4(r4)
    e2f8:	00c000b4 	movhi	r3,2
    e2fc:	1145c83a 	sub	r2,r2,r5
    e300:	18f22804 	addi	r3,r3,-14176
    e304:	18800015 	stw	r2,0(r3)
    e308:	003fd306 	br	e258 <__alt_exception_stack_pointer+0xf800e258>

0000e30c <_free_r>:
    e30c:	28004126 	beq	r5,zero,e414 <_free_r+0x108>
    e310:	defffd04 	addi	sp,sp,-12
    e314:	dc400115 	stw	r17,4(sp)
    e318:	dc000015 	stw	r16,0(sp)
    e31c:	2023883a 	mov	r17,r4
    e320:	2821883a 	mov	r16,r5
    e324:	dfc00215 	stw	ra,8(sp)
    e328:	00141300 	call	14130 <__malloc_lock>
    e32c:	81ffff17 	ldw	r7,-4(r16)
    e330:	00bfff84 	movi	r2,-2
    e334:	010000b4 	movhi	r4,2
    e338:	81bffe04 	addi	r6,r16,-8
    e33c:	3884703a 	and	r2,r7,r2
    e340:	21232804 	addi	r4,r4,-29536
    e344:	308b883a 	add	r5,r6,r2
    e348:	2a400117 	ldw	r9,4(r5)
    e34c:	22000217 	ldw	r8,8(r4)
    e350:	00ffff04 	movi	r3,-4
    e354:	48c6703a 	and	r3,r9,r3
    e358:	2a005726 	beq	r5,r8,e4b8 <_free_r+0x1ac>
    e35c:	28c00115 	stw	r3,4(r5)
    e360:	39c0004c 	andi	r7,r7,1
    e364:	3800091e 	bne	r7,zero,e38c <_free_r+0x80>
    e368:	823ffe17 	ldw	r8,-8(r16)
    e36c:	22400204 	addi	r9,r4,8
    e370:	320dc83a 	sub	r6,r6,r8
    e374:	31c00217 	ldw	r7,8(r6)
    e378:	1205883a 	add	r2,r2,r8
    e37c:	3a406526 	beq	r7,r9,e514 <_free_r+0x208>
    e380:	32000317 	ldw	r8,12(r6)
    e384:	3a000315 	stw	r8,12(r7)
    e388:	41c00215 	stw	r7,8(r8)
    e38c:	28cf883a 	add	r7,r5,r3
    e390:	39c00117 	ldw	r7,4(r7)
    e394:	39c0004c 	andi	r7,r7,1
    e398:	38003a26 	beq	r7,zero,e484 <_free_r+0x178>
    e39c:	10c00054 	ori	r3,r2,1
    e3a0:	30c00115 	stw	r3,4(r6)
    e3a4:	3087883a 	add	r3,r6,r2
    e3a8:	18800015 	stw	r2,0(r3)
    e3ac:	00c07fc4 	movi	r3,511
    e3b0:	18801936 	bltu	r3,r2,e418 <_free_r+0x10c>
    e3b4:	1004d0fa 	srli	r2,r2,3
    e3b8:	01c00044 	movi	r7,1
    e3bc:	21400117 	ldw	r5,4(r4)
    e3c0:	10c00044 	addi	r3,r2,1
    e3c4:	18c7883a 	add	r3,r3,r3
    e3c8:	1005d0ba 	srai	r2,r2,2
    e3cc:	18c7883a 	add	r3,r3,r3
    e3d0:	18c7883a 	add	r3,r3,r3
    e3d4:	1907883a 	add	r3,r3,r4
    e3d8:	3884983a 	sll	r2,r7,r2
    e3dc:	19c00017 	ldw	r7,0(r3)
    e3e0:	1a3ffe04 	addi	r8,r3,-8
    e3e4:	1144b03a 	or	r2,r2,r5
    e3e8:	32000315 	stw	r8,12(r6)
    e3ec:	31c00215 	stw	r7,8(r6)
    e3f0:	20800115 	stw	r2,4(r4)
    e3f4:	19800015 	stw	r6,0(r3)
    e3f8:	39800315 	stw	r6,12(r7)
    e3fc:	8809883a 	mov	r4,r17
    e400:	dfc00217 	ldw	ra,8(sp)
    e404:	dc400117 	ldw	r17,4(sp)
    e408:	dc000017 	ldw	r16,0(sp)
    e40c:	dec00304 	addi	sp,sp,12
    e410:	00141541 	jmpi	14154 <__malloc_unlock>
    e414:	f800283a 	ret
    e418:	100ad27a 	srli	r5,r2,9
    e41c:	00c00104 	movi	r3,4
    e420:	19404a36 	bltu	r3,r5,e54c <_free_r+0x240>
    e424:	100ad1ba 	srli	r5,r2,6
    e428:	28c00e44 	addi	r3,r5,57
    e42c:	18c7883a 	add	r3,r3,r3
    e430:	29400e04 	addi	r5,r5,56
    e434:	18c7883a 	add	r3,r3,r3
    e438:	18c7883a 	add	r3,r3,r3
    e43c:	1909883a 	add	r4,r3,r4
    e440:	20c00017 	ldw	r3,0(r4)
    e444:	01c000b4 	movhi	r7,2
    e448:	213ffe04 	addi	r4,r4,-8
    e44c:	39e32804 	addi	r7,r7,-29536
    e450:	20c04426 	beq	r4,r3,e564 <_free_r+0x258>
    e454:	01ffff04 	movi	r7,-4
    e458:	19400117 	ldw	r5,4(r3)
    e45c:	29ca703a 	and	r5,r5,r7
    e460:	1140022e 	bgeu	r2,r5,e46c <_free_r+0x160>
    e464:	18c00217 	ldw	r3,8(r3)
    e468:	20fffb1e 	bne	r4,r3,e458 <__alt_exception_stack_pointer+0xf800e458>
    e46c:	19000317 	ldw	r4,12(r3)
    e470:	31000315 	stw	r4,12(r6)
    e474:	30c00215 	stw	r3,8(r6)
    e478:	21800215 	stw	r6,8(r4)
    e47c:	19800315 	stw	r6,12(r3)
    e480:	003fde06 	br	e3fc <__alt_exception_stack_pointer+0xf800e3fc>
    e484:	29c00217 	ldw	r7,8(r5)
    e488:	10c5883a 	add	r2,r2,r3
    e48c:	00c000b4 	movhi	r3,2
    e490:	18e32a04 	addi	r3,r3,-29528
    e494:	38c03b26 	beq	r7,r3,e584 <_free_r+0x278>
    e498:	2a000317 	ldw	r8,12(r5)
    e49c:	11400054 	ori	r5,r2,1
    e4a0:	3087883a 	add	r3,r6,r2
    e4a4:	3a000315 	stw	r8,12(r7)
    e4a8:	41c00215 	stw	r7,8(r8)
    e4ac:	31400115 	stw	r5,4(r6)
    e4b0:	18800015 	stw	r2,0(r3)
    e4b4:	003fbd06 	br	e3ac <__alt_exception_stack_pointer+0xf800e3ac>
    e4b8:	39c0004c 	andi	r7,r7,1
    e4bc:	10c5883a 	add	r2,r2,r3
    e4c0:	3800071e 	bne	r7,zero,e4e0 <_free_r+0x1d4>
    e4c4:	81fffe17 	ldw	r7,-8(r16)
    e4c8:	31cdc83a 	sub	r6,r6,r7
    e4cc:	30c00317 	ldw	r3,12(r6)
    e4d0:	31400217 	ldw	r5,8(r6)
    e4d4:	11c5883a 	add	r2,r2,r7
    e4d8:	28c00315 	stw	r3,12(r5)
    e4dc:	19400215 	stw	r5,8(r3)
    e4e0:	10c00054 	ori	r3,r2,1
    e4e4:	30c00115 	stw	r3,4(r6)
    e4e8:	00c000b4 	movhi	r3,2
    e4ec:	18e92c04 	addi	r3,r3,-23376
    e4f0:	18c00017 	ldw	r3,0(r3)
    e4f4:	21800215 	stw	r6,8(r4)
    e4f8:	10ffc036 	bltu	r2,r3,e3fc <__alt_exception_stack_pointer+0xf800e3fc>
    e4fc:	008000b4 	movhi	r2,2
    e500:	10b21c04 	addi	r2,r2,-14224
    e504:	11400017 	ldw	r5,0(r2)
    e508:	8809883a 	mov	r4,r17
    e50c:	000e1e80 	call	e1e8 <_malloc_trim_r>
    e510:	003fba06 	br	e3fc <__alt_exception_stack_pointer+0xf800e3fc>
    e514:	28c9883a 	add	r4,r5,r3
    e518:	21000117 	ldw	r4,4(r4)
    e51c:	2100004c 	andi	r4,r4,1
    e520:	2000391e 	bne	r4,zero,e608 <_free_r+0x2fc>
    e524:	29c00217 	ldw	r7,8(r5)
    e528:	29000317 	ldw	r4,12(r5)
    e52c:	1885883a 	add	r2,r3,r2
    e530:	10c00054 	ori	r3,r2,1
    e534:	39000315 	stw	r4,12(r7)
    e538:	21c00215 	stw	r7,8(r4)
    e53c:	30c00115 	stw	r3,4(r6)
    e540:	308d883a 	add	r6,r6,r2
    e544:	30800015 	stw	r2,0(r6)
    e548:	003fac06 	br	e3fc <__alt_exception_stack_pointer+0xf800e3fc>
    e54c:	00c00504 	movi	r3,20
    e550:	19401536 	bltu	r3,r5,e5a8 <_free_r+0x29c>
    e554:	28c01704 	addi	r3,r5,92
    e558:	18c7883a 	add	r3,r3,r3
    e55c:	294016c4 	addi	r5,r5,91
    e560:	003fb406 	br	e434 <__alt_exception_stack_pointer+0xf800e434>
    e564:	280bd0ba 	srai	r5,r5,2
    e568:	00c00044 	movi	r3,1
    e56c:	38800117 	ldw	r2,4(r7)
    e570:	194a983a 	sll	r5,r3,r5
    e574:	2007883a 	mov	r3,r4
    e578:	2884b03a 	or	r2,r5,r2
    e57c:	38800115 	stw	r2,4(r7)
    e580:	003fbb06 	br	e470 <__alt_exception_stack_pointer+0xf800e470>
    e584:	21800515 	stw	r6,20(r4)
    e588:	21800415 	stw	r6,16(r4)
    e58c:	10c00054 	ori	r3,r2,1
    e590:	31c00315 	stw	r7,12(r6)
    e594:	31c00215 	stw	r7,8(r6)
    e598:	30c00115 	stw	r3,4(r6)
    e59c:	308d883a 	add	r6,r6,r2
    e5a0:	30800015 	stw	r2,0(r6)
    e5a4:	003f9506 	br	e3fc <__alt_exception_stack_pointer+0xf800e3fc>
    e5a8:	00c01504 	movi	r3,84
    e5ac:	19400536 	bltu	r3,r5,e5c4 <_free_r+0x2b8>
    e5b0:	100ad33a 	srli	r5,r2,12
    e5b4:	28c01bc4 	addi	r3,r5,111
    e5b8:	18c7883a 	add	r3,r3,r3
    e5bc:	29401b84 	addi	r5,r5,110
    e5c0:	003f9c06 	br	e434 <__alt_exception_stack_pointer+0xf800e434>
    e5c4:	00c05504 	movi	r3,340
    e5c8:	19400536 	bltu	r3,r5,e5e0 <_free_r+0x2d4>
    e5cc:	100ad3fa 	srli	r5,r2,15
    e5d0:	28c01e04 	addi	r3,r5,120
    e5d4:	18c7883a 	add	r3,r3,r3
    e5d8:	29401dc4 	addi	r5,r5,119
    e5dc:	003f9506 	br	e434 <__alt_exception_stack_pointer+0xf800e434>
    e5e0:	00c15504 	movi	r3,1364
    e5e4:	19400536 	bltu	r3,r5,e5fc <_free_r+0x2f0>
    e5e8:	100ad4ba 	srli	r5,r2,18
    e5ec:	28c01f44 	addi	r3,r5,125
    e5f0:	18c7883a 	add	r3,r3,r3
    e5f4:	29401f04 	addi	r5,r5,124
    e5f8:	003f8e06 	br	e434 <__alt_exception_stack_pointer+0xf800e434>
    e5fc:	00c03f84 	movi	r3,254
    e600:	01401f84 	movi	r5,126
    e604:	003f8b06 	br	e434 <__alt_exception_stack_pointer+0xf800e434>
    e608:	10c00054 	ori	r3,r2,1
    e60c:	30c00115 	stw	r3,4(r6)
    e610:	308d883a 	add	r6,r6,r2
    e614:	30800015 	stw	r2,0(r6)
    e618:	003f7806 	br	e3fc <__alt_exception_stack_pointer+0xf800e3fc>

0000e61c <__sfvwrite_r>:
    e61c:	30800217 	ldw	r2,8(r6)
    e620:	10006726 	beq	r2,zero,e7c0 <__sfvwrite_r+0x1a4>
    e624:	28c0030b 	ldhu	r3,12(r5)
    e628:	defff404 	addi	sp,sp,-48
    e62c:	dd400715 	stw	r21,28(sp)
    e630:	dd000615 	stw	r20,24(sp)
    e634:	dc000215 	stw	r16,8(sp)
    e638:	dfc00b15 	stw	ra,44(sp)
    e63c:	df000a15 	stw	fp,40(sp)
    e640:	ddc00915 	stw	r23,36(sp)
    e644:	dd800815 	stw	r22,32(sp)
    e648:	dcc00515 	stw	r19,20(sp)
    e64c:	dc800415 	stw	r18,16(sp)
    e650:	dc400315 	stw	r17,12(sp)
    e654:	1880020c 	andi	r2,r3,8
    e658:	2821883a 	mov	r16,r5
    e65c:	202b883a 	mov	r21,r4
    e660:	3029883a 	mov	r20,r6
    e664:	10002726 	beq	r2,zero,e704 <__sfvwrite_r+0xe8>
    e668:	28800417 	ldw	r2,16(r5)
    e66c:	10002526 	beq	r2,zero,e704 <__sfvwrite_r+0xe8>
    e670:	1880008c 	andi	r2,r3,2
    e674:	a4400017 	ldw	r17,0(r20)
    e678:	10002a26 	beq	r2,zero,e724 <__sfvwrite_r+0x108>
    e67c:	05a00034 	movhi	r22,32768
    e680:	0027883a 	mov	r19,zero
    e684:	0025883a 	mov	r18,zero
    e688:	b5bf0004 	addi	r22,r22,-1024
    e68c:	980d883a 	mov	r6,r19
    e690:	a809883a 	mov	r4,r21
    e694:	90004626 	beq	r18,zero,e7b0 <__sfvwrite_r+0x194>
    e698:	900f883a 	mov	r7,r18
    e69c:	b480022e 	bgeu	r22,r18,e6a8 <__sfvwrite_r+0x8c>
    e6a0:	01e00034 	movhi	r7,32768
    e6a4:	39ff0004 	addi	r7,r7,-1024
    e6a8:	80800917 	ldw	r2,36(r16)
    e6ac:	81400717 	ldw	r5,28(r16)
    e6b0:	103ee83a 	callr	r2
    e6b4:	00805a0e 	bge	zero,r2,e820 <__sfvwrite_r+0x204>
    e6b8:	a0c00217 	ldw	r3,8(r20)
    e6bc:	98a7883a 	add	r19,r19,r2
    e6c0:	90a5c83a 	sub	r18,r18,r2
    e6c4:	1885c83a 	sub	r2,r3,r2
    e6c8:	a0800215 	stw	r2,8(r20)
    e6cc:	103fef1e 	bne	r2,zero,e68c <__alt_exception_stack_pointer+0xf800e68c>
    e6d0:	0005883a 	mov	r2,zero
    e6d4:	dfc00b17 	ldw	ra,44(sp)
    e6d8:	df000a17 	ldw	fp,40(sp)
    e6dc:	ddc00917 	ldw	r23,36(sp)
    e6e0:	dd800817 	ldw	r22,32(sp)
    e6e4:	dd400717 	ldw	r21,28(sp)
    e6e8:	dd000617 	ldw	r20,24(sp)
    e6ec:	dcc00517 	ldw	r19,20(sp)
    e6f0:	dc800417 	ldw	r18,16(sp)
    e6f4:	dc400317 	ldw	r17,12(sp)
    e6f8:	dc000217 	ldw	r16,8(sp)
    e6fc:	dec00c04 	addi	sp,sp,48
    e700:	f800283a 	ret
    e704:	800b883a 	mov	r5,r16
    e708:	a809883a 	mov	r4,r21
    e70c:	000b6540 	call	b654 <__swsetup_r>
    e710:	1000ee1e 	bne	r2,zero,eacc <__sfvwrite_r+0x4b0>
    e714:	80c0030b 	ldhu	r3,12(r16)
    e718:	a4400017 	ldw	r17,0(r20)
    e71c:	1880008c 	andi	r2,r3,2
    e720:	103fd61e 	bne	r2,zero,e67c <__alt_exception_stack_pointer+0xf800e67c>
    e724:	1880004c 	andi	r2,r3,1
    e728:	1000421e 	bne	r2,zero,e834 <__sfvwrite_r+0x218>
    e72c:	0039883a 	mov	fp,zero
    e730:	0025883a 	mov	r18,zero
    e734:	90001a26 	beq	r18,zero,e7a0 <__sfvwrite_r+0x184>
    e738:	1880800c 	andi	r2,r3,512
    e73c:	84c00217 	ldw	r19,8(r16)
    e740:	10002126 	beq	r2,zero,e7c8 <__sfvwrite_r+0x1ac>
    e744:	982f883a 	mov	r23,r19
    e748:	94c09636 	bltu	r18,r19,e9a4 <__sfvwrite_r+0x388>
    e74c:	1881200c 	andi	r2,r3,1152
    e750:	1000a11e 	bne	r2,zero,e9d8 <__sfvwrite_r+0x3bc>
    e754:	81000017 	ldw	r4,0(r16)
    e758:	b80d883a 	mov	r6,r23
    e75c:	e00b883a 	mov	r5,fp
    e760:	000f1300 	call	f130 <memmove>
    e764:	80c00217 	ldw	r3,8(r16)
    e768:	81000017 	ldw	r4,0(r16)
    e76c:	9005883a 	mov	r2,r18
    e770:	1ce7c83a 	sub	r19,r3,r19
    e774:	25cf883a 	add	r7,r4,r23
    e778:	84c00215 	stw	r19,8(r16)
    e77c:	81c00015 	stw	r7,0(r16)
    e780:	a0c00217 	ldw	r3,8(r20)
    e784:	e0b9883a 	add	fp,fp,r2
    e788:	90a5c83a 	sub	r18,r18,r2
    e78c:	18a7c83a 	sub	r19,r3,r2
    e790:	a4c00215 	stw	r19,8(r20)
    e794:	983fce26 	beq	r19,zero,e6d0 <__alt_exception_stack_pointer+0xf800e6d0>
    e798:	80c0030b 	ldhu	r3,12(r16)
    e79c:	903fe61e 	bne	r18,zero,e738 <__alt_exception_stack_pointer+0xf800e738>
    e7a0:	8f000017 	ldw	fp,0(r17)
    e7a4:	8c800117 	ldw	r18,4(r17)
    e7a8:	8c400204 	addi	r17,r17,8
    e7ac:	003fe106 	br	e734 <__alt_exception_stack_pointer+0xf800e734>
    e7b0:	8cc00017 	ldw	r19,0(r17)
    e7b4:	8c800117 	ldw	r18,4(r17)
    e7b8:	8c400204 	addi	r17,r17,8
    e7bc:	003fb306 	br	e68c <__alt_exception_stack_pointer+0xf800e68c>
    e7c0:	0005883a 	mov	r2,zero
    e7c4:	f800283a 	ret
    e7c8:	81000017 	ldw	r4,0(r16)
    e7cc:	80800417 	ldw	r2,16(r16)
    e7d0:	11005a36 	bltu	r2,r4,e93c <__sfvwrite_r+0x320>
    e7d4:	85c00517 	ldw	r23,20(r16)
    e7d8:	95c05836 	bltu	r18,r23,e93c <__sfvwrite_r+0x320>
    e7dc:	00a00034 	movhi	r2,32768
    e7e0:	10bfffc4 	addi	r2,r2,-1
    e7e4:	9009883a 	mov	r4,r18
    e7e8:	1480012e 	bgeu	r2,r18,e7f0 <__sfvwrite_r+0x1d4>
    e7ec:	1009883a 	mov	r4,r2
    e7f0:	b80b883a 	mov	r5,r23
    e7f4:	00059d00 	call	59d0 <__divsi3>
    e7f8:	b80b883a 	mov	r5,r23
    e7fc:	1009883a 	mov	r4,r2
    e800:	0005b840 	call	5b84 <__mulsi3>
    e804:	81400717 	ldw	r5,28(r16)
    e808:	80c00917 	ldw	r3,36(r16)
    e80c:	100f883a 	mov	r7,r2
    e810:	e00d883a 	mov	r6,fp
    e814:	a809883a 	mov	r4,r21
    e818:	183ee83a 	callr	r3
    e81c:	00bfd816 	blt	zero,r2,e780 <__alt_exception_stack_pointer+0xf800e780>
    e820:	8080030b 	ldhu	r2,12(r16)
    e824:	10801014 	ori	r2,r2,64
    e828:	8080030d 	sth	r2,12(r16)
    e82c:	00bfffc4 	movi	r2,-1
    e830:	003fa806 	br	e6d4 <__alt_exception_stack_pointer+0xf800e6d4>
    e834:	0027883a 	mov	r19,zero
    e838:	0011883a 	mov	r8,zero
    e83c:	0039883a 	mov	fp,zero
    e840:	0025883a 	mov	r18,zero
    e844:	90001f26 	beq	r18,zero,e8c4 <__sfvwrite_r+0x2a8>
    e848:	40005a26 	beq	r8,zero,e9b4 <__sfvwrite_r+0x398>
    e84c:	982d883a 	mov	r22,r19
    e850:	94c0012e 	bgeu	r18,r19,e858 <__sfvwrite_r+0x23c>
    e854:	902d883a 	mov	r22,r18
    e858:	81000017 	ldw	r4,0(r16)
    e85c:	80800417 	ldw	r2,16(r16)
    e860:	b02f883a 	mov	r23,r22
    e864:	81c00517 	ldw	r7,20(r16)
    e868:	1100032e 	bgeu	r2,r4,e878 <__sfvwrite_r+0x25c>
    e86c:	80c00217 	ldw	r3,8(r16)
    e870:	38c7883a 	add	r3,r7,r3
    e874:	1d801816 	blt	r3,r22,e8d8 <__sfvwrite_r+0x2bc>
    e878:	b1c03e16 	blt	r22,r7,e974 <__sfvwrite_r+0x358>
    e87c:	80800917 	ldw	r2,36(r16)
    e880:	81400717 	ldw	r5,28(r16)
    e884:	e00d883a 	mov	r6,fp
    e888:	da000115 	stw	r8,4(sp)
    e88c:	a809883a 	mov	r4,r21
    e890:	103ee83a 	callr	r2
    e894:	102f883a 	mov	r23,r2
    e898:	da000117 	ldw	r8,4(sp)
    e89c:	00bfe00e 	bge	zero,r2,e820 <__alt_exception_stack_pointer+0xf800e820>
    e8a0:	9de7c83a 	sub	r19,r19,r23
    e8a4:	98001f26 	beq	r19,zero,e924 <__sfvwrite_r+0x308>
    e8a8:	a0800217 	ldw	r2,8(r20)
    e8ac:	e5f9883a 	add	fp,fp,r23
    e8b0:	95e5c83a 	sub	r18,r18,r23
    e8b4:	15efc83a 	sub	r23,r2,r23
    e8b8:	a5c00215 	stw	r23,8(r20)
    e8bc:	b83f8426 	beq	r23,zero,e6d0 <__alt_exception_stack_pointer+0xf800e6d0>
    e8c0:	903fe11e 	bne	r18,zero,e848 <__alt_exception_stack_pointer+0xf800e848>
    e8c4:	8f000017 	ldw	fp,0(r17)
    e8c8:	8c800117 	ldw	r18,4(r17)
    e8cc:	0011883a 	mov	r8,zero
    e8d0:	8c400204 	addi	r17,r17,8
    e8d4:	003fdb06 	br	e844 <__alt_exception_stack_pointer+0xf800e844>
    e8d8:	180d883a 	mov	r6,r3
    e8dc:	e00b883a 	mov	r5,fp
    e8e0:	da000115 	stw	r8,4(sp)
    e8e4:	d8c00015 	stw	r3,0(sp)
    e8e8:	000f1300 	call	f130 <memmove>
    e8ec:	d8c00017 	ldw	r3,0(sp)
    e8f0:	80800017 	ldw	r2,0(r16)
    e8f4:	800b883a 	mov	r5,r16
    e8f8:	a809883a 	mov	r4,r21
    e8fc:	10c5883a 	add	r2,r2,r3
    e900:	80800015 	stw	r2,0(r16)
    e904:	d8c00015 	stw	r3,0(sp)
    e908:	000ddac0 	call	ddac <_fflush_r>
    e90c:	d8c00017 	ldw	r3,0(sp)
    e910:	da000117 	ldw	r8,4(sp)
    e914:	103fc21e 	bne	r2,zero,e820 <__alt_exception_stack_pointer+0xf800e820>
    e918:	182f883a 	mov	r23,r3
    e91c:	9de7c83a 	sub	r19,r19,r23
    e920:	983fe11e 	bne	r19,zero,e8a8 <__alt_exception_stack_pointer+0xf800e8a8>
    e924:	800b883a 	mov	r5,r16
    e928:	a809883a 	mov	r4,r21
    e92c:	000ddac0 	call	ddac <_fflush_r>
    e930:	103fbb1e 	bne	r2,zero,e820 <__alt_exception_stack_pointer+0xf800e820>
    e934:	0011883a 	mov	r8,zero
    e938:	003fdb06 	br	e8a8 <__alt_exception_stack_pointer+0xf800e8a8>
    e93c:	94c0012e 	bgeu	r18,r19,e944 <__sfvwrite_r+0x328>
    e940:	9027883a 	mov	r19,r18
    e944:	980d883a 	mov	r6,r19
    e948:	e00b883a 	mov	r5,fp
    e94c:	000f1300 	call	f130 <memmove>
    e950:	80800217 	ldw	r2,8(r16)
    e954:	80c00017 	ldw	r3,0(r16)
    e958:	14c5c83a 	sub	r2,r2,r19
    e95c:	1cc7883a 	add	r3,r3,r19
    e960:	80800215 	stw	r2,8(r16)
    e964:	80c00015 	stw	r3,0(r16)
    e968:	10004326 	beq	r2,zero,ea78 <__sfvwrite_r+0x45c>
    e96c:	9805883a 	mov	r2,r19
    e970:	003f8306 	br	e780 <__alt_exception_stack_pointer+0xf800e780>
    e974:	b00d883a 	mov	r6,r22
    e978:	e00b883a 	mov	r5,fp
    e97c:	da000115 	stw	r8,4(sp)
    e980:	000f1300 	call	f130 <memmove>
    e984:	80800217 	ldw	r2,8(r16)
    e988:	80c00017 	ldw	r3,0(r16)
    e98c:	da000117 	ldw	r8,4(sp)
    e990:	1585c83a 	sub	r2,r2,r22
    e994:	1dad883a 	add	r22,r3,r22
    e998:	80800215 	stw	r2,8(r16)
    e99c:	85800015 	stw	r22,0(r16)
    e9a0:	003fbf06 	br	e8a0 <__alt_exception_stack_pointer+0xf800e8a0>
    e9a4:	81000017 	ldw	r4,0(r16)
    e9a8:	9027883a 	mov	r19,r18
    e9ac:	902f883a 	mov	r23,r18
    e9b0:	003f6906 	br	e758 <__alt_exception_stack_pointer+0xf800e758>
    e9b4:	900d883a 	mov	r6,r18
    e9b8:	01400284 	movi	r5,10
    e9bc:	e009883a 	mov	r4,fp
    e9c0:	000ef040 	call	ef04 <memchr>
    e9c4:	10003e26 	beq	r2,zero,eac0 <__sfvwrite_r+0x4a4>
    e9c8:	10800044 	addi	r2,r2,1
    e9cc:	1727c83a 	sub	r19,r2,fp
    e9d0:	02000044 	movi	r8,1
    e9d4:	003f9d06 	br	e84c <__alt_exception_stack_pointer+0xf800e84c>
    e9d8:	80800517 	ldw	r2,20(r16)
    e9dc:	81400417 	ldw	r5,16(r16)
    e9e0:	81c00017 	ldw	r7,0(r16)
    e9e4:	10a7883a 	add	r19,r2,r2
    e9e8:	9885883a 	add	r2,r19,r2
    e9ec:	1026d7fa 	srli	r19,r2,31
    e9f0:	396dc83a 	sub	r22,r7,r5
    e9f4:	b1000044 	addi	r4,r22,1
    e9f8:	9885883a 	add	r2,r19,r2
    e9fc:	1027d07a 	srai	r19,r2,1
    ea00:	2485883a 	add	r2,r4,r18
    ea04:	980d883a 	mov	r6,r19
    ea08:	9880022e 	bgeu	r19,r2,ea14 <__sfvwrite_r+0x3f8>
    ea0c:	1027883a 	mov	r19,r2
    ea10:	100d883a 	mov	r6,r2
    ea14:	18c1000c 	andi	r3,r3,1024
    ea18:	18001c26 	beq	r3,zero,ea8c <__sfvwrite_r+0x470>
    ea1c:	300b883a 	mov	r5,r6
    ea20:	a809883a 	mov	r4,r21
    ea24:	00088600 	call	8860 <_malloc_r>
    ea28:	102f883a 	mov	r23,r2
    ea2c:	10002926 	beq	r2,zero,ead4 <__sfvwrite_r+0x4b8>
    ea30:	81400417 	ldw	r5,16(r16)
    ea34:	b00d883a 	mov	r6,r22
    ea38:	1009883a 	mov	r4,r2
    ea3c:	000efe80 	call	efe8 <memcpy>
    ea40:	8080030b 	ldhu	r2,12(r16)
    ea44:	00fedfc4 	movi	r3,-1153
    ea48:	10c4703a 	and	r2,r2,r3
    ea4c:	10802014 	ori	r2,r2,128
    ea50:	8080030d 	sth	r2,12(r16)
    ea54:	bd89883a 	add	r4,r23,r22
    ea58:	9d8fc83a 	sub	r7,r19,r22
    ea5c:	85c00415 	stw	r23,16(r16)
    ea60:	84c00515 	stw	r19,20(r16)
    ea64:	81000015 	stw	r4,0(r16)
    ea68:	9027883a 	mov	r19,r18
    ea6c:	81c00215 	stw	r7,8(r16)
    ea70:	902f883a 	mov	r23,r18
    ea74:	003f3806 	br	e758 <__alt_exception_stack_pointer+0xf800e758>
    ea78:	800b883a 	mov	r5,r16
    ea7c:	a809883a 	mov	r4,r21
    ea80:	000ddac0 	call	ddac <_fflush_r>
    ea84:	103fb926 	beq	r2,zero,e96c <__alt_exception_stack_pointer+0xf800e96c>
    ea88:	003f6506 	br	e820 <__alt_exception_stack_pointer+0xf800e820>
    ea8c:	a809883a 	mov	r4,r21
    ea90:	001046c0 	call	1046c <_realloc_r>
    ea94:	102f883a 	mov	r23,r2
    ea98:	103fee1e 	bne	r2,zero,ea54 <__alt_exception_stack_pointer+0xf800ea54>
    ea9c:	81400417 	ldw	r5,16(r16)
    eaa0:	a809883a 	mov	r4,r21
    eaa4:	000e30c0 	call	e30c <_free_r>
    eaa8:	8080030b 	ldhu	r2,12(r16)
    eaac:	00ffdfc4 	movi	r3,-129
    eab0:	1884703a 	and	r2,r3,r2
    eab4:	00c00304 	movi	r3,12
    eab8:	a8c00015 	stw	r3,0(r21)
    eabc:	003f5906 	br	e824 <__alt_exception_stack_pointer+0xf800e824>
    eac0:	94c00044 	addi	r19,r18,1
    eac4:	02000044 	movi	r8,1
    eac8:	003f6006 	br	e84c <__alt_exception_stack_pointer+0xf800e84c>
    eacc:	00bfffc4 	movi	r2,-1
    ead0:	003f0006 	br	e6d4 <__alt_exception_stack_pointer+0xf800e6d4>
    ead4:	00800304 	movi	r2,12
    ead8:	a8800015 	stw	r2,0(r21)
    eadc:	8080030b 	ldhu	r2,12(r16)
    eae0:	003f5006 	br	e824 <__alt_exception_stack_pointer+0xf800e824>

0000eae4 <_fwalk>:
    eae4:	defff704 	addi	sp,sp,-36
    eae8:	dd000415 	stw	r20,16(sp)
    eaec:	dfc00815 	stw	ra,32(sp)
    eaf0:	ddc00715 	stw	r23,28(sp)
    eaf4:	dd800615 	stw	r22,24(sp)
    eaf8:	dd400515 	stw	r21,20(sp)
    eafc:	dcc00315 	stw	r19,12(sp)
    eb00:	dc800215 	stw	r18,8(sp)
    eb04:	dc400115 	stw	r17,4(sp)
    eb08:	dc000015 	stw	r16,0(sp)
    eb0c:	2500b804 	addi	r20,r4,736
    eb10:	a0002326 	beq	r20,zero,eba0 <_fwalk+0xbc>
    eb14:	282b883a 	mov	r21,r5
    eb18:	002f883a 	mov	r23,zero
    eb1c:	05800044 	movi	r22,1
    eb20:	04ffffc4 	movi	r19,-1
    eb24:	a4400117 	ldw	r17,4(r20)
    eb28:	a4800217 	ldw	r18,8(r20)
    eb2c:	8c7fffc4 	addi	r17,r17,-1
    eb30:	88000d16 	blt	r17,zero,eb68 <_fwalk+0x84>
    eb34:	94000304 	addi	r16,r18,12
    eb38:	94800384 	addi	r18,r18,14
    eb3c:	8080000b 	ldhu	r2,0(r16)
    eb40:	8c7fffc4 	addi	r17,r17,-1
    eb44:	813ffd04 	addi	r4,r16,-12
    eb48:	b080042e 	bgeu	r22,r2,eb5c <_fwalk+0x78>
    eb4c:	9080000f 	ldh	r2,0(r18)
    eb50:	14c00226 	beq	r2,r19,eb5c <_fwalk+0x78>
    eb54:	a83ee83a 	callr	r21
    eb58:	b8aeb03a 	or	r23,r23,r2
    eb5c:	84001a04 	addi	r16,r16,104
    eb60:	94801a04 	addi	r18,r18,104
    eb64:	8cfff51e 	bne	r17,r19,eb3c <__alt_exception_stack_pointer+0xf800eb3c>
    eb68:	a5000017 	ldw	r20,0(r20)
    eb6c:	a03fed1e 	bne	r20,zero,eb24 <__alt_exception_stack_pointer+0xf800eb24>
    eb70:	b805883a 	mov	r2,r23
    eb74:	dfc00817 	ldw	ra,32(sp)
    eb78:	ddc00717 	ldw	r23,28(sp)
    eb7c:	dd800617 	ldw	r22,24(sp)
    eb80:	dd400517 	ldw	r21,20(sp)
    eb84:	dd000417 	ldw	r20,16(sp)
    eb88:	dcc00317 	ldw	r19,12(sp)
    eb8c:	dc800217 	ldw	r18,8(sp)
    eb90:	dc400117 	ldw	r17,4(sp)
    eb94:	dc000017 	ldw	r16,0(sp)
    eb98:	dec00904 	addi	sp,sp,36
    eb9c:	f800283a 	ret
    eba0:	002f883a 	mov	r23,zero
    eba4:	003ff206 	br	eb70 <__alt_exception_stack_pointer+0xf800eb70>

0000eba8 <_fwalk_reent>:
    eba8:	defff704 	addi	sp,sp,-36
    ebac:	dd000415 	stw	r20,16(sp)
    ebb0:	dfc00815 	stw	ra,32(sp)
    ebb4:	ddc00715 	stw	r23,28(sp)
    ebb8:	dd800615 	stw	r22,24(sp)
    ebbc:	dd400515 	stw	r21,20(sp)
    ebc0:	dcc00315 	stw	r19,12(sp)
    ebc4:	dc800215 	stw	r18,8(sp)
    ebc8:	dc400115 	stw	r17,4(sp)
    ebcc:	dc000015 	stw	r16,0(sp)
    ebd0:	2500b804 	addi	r20,r4,736
    ebd4:	a0002326 	beq	r20,zero,ec64 <_fwalk_reent+0xbc>
    ebd8:	282b883a 	mov	r21,r5
    ebdc:	2027883a 	mov	r19,r4
    ebe0:	002f883a 	mov	r23,zero
    ebe4:	05800044 	movi	r22,1
    ebe8:	04bfffc4 	movi	r18,-1
    ebec:	a4400117 	ldw	r17,4(r20)
    ebf0:	a4000217 	ldw	r16,8(r20)
    ebf4:	8c7fffc4 	addi	r17,r17,-1
    ebf8:	88000c16 	blt	r17,zero,ec2c <_fwalk_reent+0x84>
    ebfc:	84000304 	addi	r16,r16,12
    ec00:	8080000b 	ldhu	r2,0(r16)
    ec04:	8c7fffc4 	addi	r17,r17,-1
    ec08:	817ffd04 	addi	r5,r16,-12
    ec0c:	b080052e 	bgeu	r22,r2,ec24 <_fwalk_reent+0x7c>
    ec10:	8080008f 	ldh	r2,2(r16)
    ec14:	9809883a 	mov	r4,r19
    ec18:	14800226 	beq	r2,r18,ec24 <_fwalk_reent+0x7c>
    ec1c:	a83ee83a 	callr	r21
    ec20:	b8aeb03a 	or	r23,r23,r2
    ec24:	84001a04 	addi	r16,r16,104
    ec28:	8cbff51e 	bne	r17,r18,ec00 <__alt_exception_stack_pointer+0xf800ec00>
    ec2c:	a5000017 	ldw	r20,0(r20)
    ec30:	a03fee1e 	bne	r20,zero,ebec <__alt_exception_stack_pointer+0xf800ebec>
    ec34:	b805883a 	mov	r2,r23
    ec38:	dfc00817 	ldw	ra,32(sp)
    ec3c:	ddc00717 	ldw	r23,28(sp)
    ec40:	dd800617 	ldw	r22,24(sp)
    ec44:	dd400517 	ldw	r21,20(sp)
    ec48:	dd000417 	ldw	r20,16(sp)
    ec4c:	dcc00317 	ldw	r19,12(sp)
    ec50:	dc800217 	ldw	r18,8(sp)
    ec54:	dc400117 	ldw	r17,4(sp)
    ec58:	dc000017 	ldw	r16,0(sp)
    ec5c:	dec00904 	addi	sp,sp,36
    ec60:	f800283a 	ret
    ec64:	002f883a 	mov	r23,zero
    ec68:	003ff206 	br	ec34 <__alt_exception_stack_pointer+0xf800ec34>

0000ec6c <_setlocale_r>:
    ec6c:	30001b26 	beq	r6,zero,ecdc <_setlocale_r+0x70>
    ec70:	01400074 	movhi	r5,1
    ec74:	defffe04 	addi	sp,sp,-8
    ec78:	295ff504 	addi	r5,r5,32724
    ec7c:	3009883a 	mov	r4,r6
    ec80:	dc000015 	stw	r16,0(sp)
    ec84:	dfc00115 	stw	ra,4(sp)
    ec88:	3021883a 	mov	r16,r6
    ec8c:	0010b800 	call	10b80 <strcmp>
    ec90:	1000061e 	bne	r2,zero,ecac <_setlocale_r+0x40>
    ec94:	00800074 	movhi	r2,1
    ec98:	109fd604 	addi	r2,r2,32600
    ec9c:	dfc00117 	ldw	ra,4(sp)
    eca0:	dc000017 	ldw	r16,0(sp)
    eca4:	dec00204 	addi	sp,sp,8
    eca8:	f800283a 	ret
    ecac:	01400074 	movhi	r5,1
    ecb0:	295fd604 	addi	r5,r5,32600
    ecb4:	8009883a 	mov	r4,r16
    ecb8:	0010b800 	call	10b80 <strcmp>
    ecbc:	103ff526 	beq	r2,zero,ec94 <__alt_exception_stack_pointer+0xf800ec94>
    ecc0:	01400074 	movhi	r5,1
    ecc4:	295fe004 	addi	r5,r5,32640
    ecc8:	8009883a 	mov	r4,r16
    eccc:	0010b800 	call	10b80 <strcmp>
    ecd0:	103ff026 	beq	r2,zero,ec94 <__alt_exception_stack_pointer+0xf800ec94>
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	003ff006 	br	ec9c <__alt_exception_stack_pointer+0xf800ec9c>
    ecdc:	00800074 	movhi	r2,1
    ece0:	109fd604 	addi	r2,r2,32600
    ece4:	f800283a 	ret

0000ece8 <__locale_charset>:
    ece8:	008000b4 	movhi	r2,2
    ecec:	10a43204 	addi	r2,r2,-28472
    ecf0:	f800283a 	ret

0000ecf4 <__locale_mb_cur_max>:
    ecf4:	008000b4 	movhi	r2,2
    ecf8:	10a92d04 	addi	r2,r2,-23372
    ecfc:	10800017 	ldw	r2,0(r2)
    ed00:	f800283a 	ret

0000ed04 <__locale_msgcharset>:
    ed04:	008000b4 	movhi	r2,2
    ed08:	10a42a04 	addi	r2,r2,-28504
    ed0c:	f800283a 	ret

0000ed10 <__locale_cjk_lang>:
    ed10:	0005883a 	mov	r2,zero
    ed14:	f800283a 	ret

0000ed18 <_localeconv_r>:
    ed18:	008000b4 	movhi	r2,2
    ed1c:	10a43a04 	addi	r2,r2,-28440
    ed20:	f800283a 	ret

0000ed24 <setlocale>:
    ed24:	008000b4 	movhi	r2,2
    ed28:	10a92a04 	addi	r2,r2,-23384
    ed2c:	280d883a 	mov	r6,r5
    ed30:	200b883a 	mov	r5,r4
    ed34:	11000017 	ldw	r4,0(r2)
    ed38:	000ec6c1 	jmpi	ec6c <_setlocale_r>

0000ed3c <localeconv>:
    ed3c:	008000b4 	movhi	r2,2
    ed40:	10a43a04 	addi	r2,r2,-28440
    ed44:	f800283a 	ret

0000ed48 <__smakebuf_r>:
    ed48:	2880030b 	ldhu	r2,12(r5)
    ed4c:	10c0008c 	andi	r3,r2,2
    ed50:	1800411e 	bne	r3,zero,ee58 <__smakebuf_r+0x110>
    ed54:	deffec04 	addi	sp,sp,-80
    ed58:	dc000f15 	stw	r16,60(sp)
    ed5c:	2821883a 	mov	r16,r5
    ed60:	2940038f 	ldh	r5,14(r5)
    ed64:	dc401015 	stw	r17,64(sp)
    ed68:	dfc01315 	stw	ra,76(sp)
    ed6c:	dcc01215 	stw	r19,72(sp)
    ed70:	dc801115 	stw	r18,68(sp)
    ed74:	2023883a 	mov	r17,r4
    ed78:	28001c16 	blt	r5,zero,edec <__smakebuf_r+0xa4>
    ed7c:	d80d883a 	mov	r6,sp
    ed80:	00128800 	call	12880 <_fstat_r>
    ed84:	10001816 	blt	r2,zero,ede8 <__smakebuf_r+0xa0>
    ed88:	d8800117 	ldw	r2,4(sp)
    ed8c:	00e00014 	movui	r3,32768
    ed90:	10bc000c 	andi	r2,r2,61440
    ed94:	14c80020 	cmpeqi	r19,r2,8192
    ed98:	10c03726 	beq	r2,r3,ee78 <__smakebuf_r+0x130>
    ed9c:	80c0030b 	ldhu	r3,12(r16)
    eda0:	18c20014 	ori	r3,r3,2048
    eda4:	80c0030d 	sth	r3,12(r16)
    eda8:	00c80004 	movi	r3,8192
    edac:	10c0521e 	bne	r2,r3,eef8 <__smakebuf_r+0x1b0>
    edb0:	8140038f 	ldh	r5,14(r16)
    edb4:	8809883a 	mov	r4,r17
    edb8:	00128dc0 	call	128dc <_isatty_r>
    edbc:	10004c26 	beq	r2,zero,eef0 <__smakebuf_r+0x1a8>
    edc0:	8080030b 	ldhu	r2,12(r16)
    edc4:	80c010c4 	addi	r3,r16,67
    edc8:	80c00015 	stw	r3,0(r16)
    edcc:	10800054 	ori	r2,r2,1
    edd0:	8080030d 	sth	r2,12(r16)
    edd4:	00800044 	movi	r2,1
    edd8:	80c00415 	stw	r3,16(r16)
    eddc:	80800515 	stw	r2,20(r16)
    ede0:	04810004 	movi	r18,1024
    ede4:	00000706 	br	ee04 <__smakebuf_r+0xbc>
    ede8:	8080030b 	ldhu	r2,12(r16)
    edec:	10c0200c 	andi	r3,r2,128
    edf0:	18001f1e 	bne	r3,zero,ee70 <__smakebuf_r+0x128>
    edf4:	04810004 	movi	r18,1024
    edf8:	10820014 	ori	r2,r2,2048
    edfc:	8080030d 	sth	r2,12(r16)
    ee00:	0027883a 	mov	r19,zero
    ee04:	900b883a 	mov	r5,r18
    ee08:	8809883a 	mov	r4,r17
    ee0c:	00088600 	call	8860 <_malloc_r>
    ee10:	10002c26 	beq	r2,zero,eec4 <__smakebuf_r+0x17c>
    ee14:	80c0030b 	ldhu	r3,12(r16)
    ee18:	01000074 	movhi	r4,1
    ee1c:	21379004 	addi	r4,r4,-8640
    ee20:	89000f15 	stw	r4,60(r17)
    ee24:	18c02014 	ori	r3,r3,128
    ee28:	80c0030d 	sth	r3,12(r16)
    ee2c:	80800015 	stw	r2,0(r16)
    ee30:	80800415 	stw	r2,16(r16)
    ee34:	84800515 	stw	r18,20(r16)
    ee38:	98001a1e 	bne	r19,zero,eea4 <__smakebuf_r+0x15c>
    ee3c:	dfc01317 	ldw	ra,76(sp)
    ee40:	dcc01217 	ldw	r19,72(sp)
    ee44:	dc801117 	ldw	r18,68(sp)
    ee48:	dc401017 	ldw	r17,64(sp)
    ee4c:	dc000f17 	ldw	r16,60(sp)
    ee50:	dec01404 	addi	sp,sp,80
    ee54:	f800283a 	ret
    ee58:	288010c4 	addi	r2,r5,67
    ee5c:	28800015 	stw	r2,0(r5)
    ee60:	28800415 	stw	r2,16(r5)
    ee64:	00800044 	movi	r2,1
    ee68:	28800515 	stw	r2,20(r5)
    ee6c:	f800283a 	ret
    ee70:	04801004 	movi	r18,64
    ee74:	003fe006 	br	edf8 <__alt_exception_stack_pointer+0xf800edf8>
    ee78:	81000a17 	ldw	r4,40(r16)
    ee7c:	00c00074 	movhi	r3,1
    ee80:	18c2c704 	addi	r3,r3,2844
    ee84:	20ffc51e 	bne	r4,r3,ed9c <__alt_exception_stack_pointer+0xf800ed9c>
    ee88:	8080030b 	ldhu	r2,12(r16)
    ee8c:	04810004 	movi	r18,1024
    ee90:	84801315 	stw	r18,76(r16)
    ee94:	1484b03a 	or	r2,r2,r18
    ee98:	8080030d 	sth	r2,12(r16)
    ee9c:	0027883a 	mov	r19,zero
    eea0:	003fd806 	br	ee04 <__alt_exception_stack_pointer+0xf800ee04>
    eea4:	8140038f 	ldh	r5,14(r16)
    eea8:	8809883a 	mov	r4,r17
    eeac:	00128dc0 	call	128dc <_isatty_r>
    eeb0:	103fe226 	beq	r2,zero,ee3c <__alt_exception_stack_pointer+0xf800ee3c>
    eeb4:	8080030b 	ldhu	r2,12(r16)
    eeb8:	10800054 	ori	r2,r2,1
    eebc:	8080030d 	sth	r2,12(r16)
    eec0:	003fde06 	br	ee3c <__alt_exception_stack_pointer+0xf800ee3c>
    eec4:	8080030b 	ldhu	r2,12(r16)
    eec8:	10c0800c 	andi	r3,r2,512
    eecc:	183fdb1e 	bne	r3,zero,ee3c <__alt_exception_stack_pointer+0xf800ee3c>
    eed0:	10800094 	ori	r2,r2,2
    eed4:	80c010c4 	addi	r3,r16,67
    eed8:	8080030d 	sth	r2,12(r16)
    eedc:	00800044 	movi	r2,1
    eee0:	80c00015 	stw	r3,0(r16)
    eee4:	80c00415 	stw	r3,16(r16)
    eee8:	80800515 	stw	r2,20(r16)
    eeec:	003fd306 	br	ee3c <__alt_exception_stack_pointer+0xf800ee3c>
    eef0:	04810004 	movi	r18,1024
    eef4:	003fc306 	br	ee04 <__alt_exception_stack_pointer+0xf800ee04>
    eef8:	0027883a 	mov	r19,zero
    eefc:	04810004 	movi	r18,1024
    ef00:	003fc006 	br	ee04 <__alt_exception_stack_pointer+0xf800ee04>

0000ef04 <memchr>:
    ef04:	208000cc 	andi	r2,r4,3
    ef08:	280f883a 	mov	r7,r5
    ef0c:	10003426 	beq	r2,zero,efe0 <memchr+0xdc>
    ef10:	30bfffc4 	addi	r2,r6,-1
    ef14:	30001a26 	beq	r6,zero,ef80 <memchr+0x7c>
    ef18:	20c00003 	ldbu	r3,0(r4)
    ef1c:	29803fcc 	andi	r6,r5,255
    ef20:	30c0051e 	bne	r6,r3,ef38 <memchr+0x34>
    ef24:	00001806 	br	ef88 <memchr+0x84>
    ef28:	10001526 	beq	r2,zero,ef80 <memchr+0x7c>
    ef2c:	20c00003 	ldbu	r3,0(r4)
    ef30:	10bfffc4 	addi	r2,r2,-1
    ef34:	30c01426 	beq	r6,r3,ef88 <memchr+0x84>
    ef38:	21000044 	addi	r4,r4,1
    ef3c:	20c000cc 	andi	r3,r4,3
    ef40:	183ff91e 	bne	r3,zero,ef28 <__alt_exception_stack_pointer+0xf800ef28>
    ef44:	020000c4 	movi	r8,3
    ef48:	40801136 	bltu	r8,r2,ef90 <memchr+0x8c>
    ef4c:	10000c26 	beq	r2,zero,ef80 <memchr+0x7c>
    ef50:	20c00003 	ldbu	r3,0(r4)
    ef54:	29403fcc 	andi	r5,r5,255
    ef58:	28c00b26 	beq	r5,r3,ef88 <memchr+0x84>
    ef5c:	20c00044 	addi	r3,r4,1
    ef60:	39803fcc 	andi	r6,r7,255
    ef64:	2089883a 	add	r4,r4,r2
    ef68:	00000306 	br	ef78 <memchr+0x74>
    ef6c:	18c00044 	addi	r3,r3,1
    ef70:	197fffc3 	ldbu	r5,-1(r3)
    ef74:	31400526 	beq	r6,r5,ef8c <memchr+0x88>
    ef78:	1805883a 	mov	r2,r3
    ef7c:	20fffb1e 	bne	r4,r3,ef6c <__alt_exception_stack_pointer+0xf800ef6c>
    ef80:	0005883a 	mov	r2,zero
    ef84:	f800283a 	ret
    ef88:	2005883a 	mov	r2,r4
    ef8c:	f800283a 	ret
    ef90:	28c03fcc 	andi	r3,r5,255
    ef94:	1812923a 	slli	r9,r3,8
    ef98:	02ffbff4 	movhi	r11,65279
    ef9c:	02a02074 	movhi	r10,32897
    efa0:	48d2b03a 	or	r9,r9,r3
    efa4:	4806943a 	slli	r3,r9,16
    efa8:	5affbfc4 	addi	r11,r11,-257
    efac:	52a02004 	addi	r10,r10,-32640
    efb0:	48d2b03a 	or	r9,r9,r3
    efb4:	20c00017 	ldw	r3,0(r4)
    efb8:	48c6f03a 	xor	r3,r9,r3
    efbc:	1acd883a 	add	r6,r3,r11
    efc0:	00c6303a 	nor	r3,zero,r3
    efc4:	30c6703a 	and	r3,r6,r3
    efc8:	1a86703a 	and	r3,r3,r10
    efcc:	183fe01e 	bne	r3,zero,ef50 <__alt_exception_stack_pointer+0xf800ef50>
    efd0:	10bfff04 	addi	r2,r2,-4
    efd4:	21000104 	addi	r4,r4,4
    efd8:	40bff636 	bltu	r8,r2,efb4 <__alt_exception_stack_pointer+0xf800efb4>
    efdc:	003fdb06 	br	ef4c <__alt_exception_stack_pointer+0xf800ef4c>
    efe0:	3005883a 	mov	r2,r6
    efe4:	003fd706 	br	ef44 <__alt_exception_stack_pointer+0xf800ef44>

0000efe8 <memcpy>:
    efe8:	defffd04 	addi	sp,sp,-12
    efec:	dfc00215 	stw	ra,8(sp)
    eff0:	dc400115 	stw	r17,4(sp)
    eff4:	dc000015 	stw	r16,0(sp)
    eff8:	00c003c4 	movi	r3,15
    effc:	2005883a 	mov	r2,r4
    f000:	1980452e 	bgeu	r3,r6,f118 <memcpy+0x130>
    f004:	2906b03a 	or	r3,r5,r4
    f008:	18c000cc 	andi	r3,r3,3
    f00c:	1800441e 	bne	r3,zero,f120 <memcpy+0x138>
    f010:	347ffc04 	addi	r17,r6,-16
    f014:	8822d13a 	srli	r17,r17,4
    f018:	28c00104 	addi	r3,r5,4
    f01c:	23400104 	addi	r13,r4,4
    f020:	8820913a 	slli	r16,r17,4
    f024:	2b000204 	addi	r12,r5,8
    f028:	22c00204 	addi	r11,r4,8
    f02c:	84000504 	addi	r16,r16,20
    f030:	2a800304 	addi	r10,r5,12
    f034:	22400304 	addi	r9,r4,12
    f038:	2c21883a 	add	r16,r5,r16
    f03c:	2811883a 	mov	r8,r5
    f040:	200f883a 	mov	r7,r4
    f044:	41000017 	ldw	r4,0(r8)
    f048:	1fc00017 	ldw	ra,0(r3)
    f04c:	63c00017 	ldw	r15,0(r12)
    f050:	39000015 	stw	r4,0(r7)
    f054:	53800017 	ldw	r14,0(r10)
    f058:	6fc00015 	stw	ra,0(r13)
    f05c:	5bc00015 	stw	r15,0(r11)
    f060:	4b800015 	stw	r14,0(r9)
    f064:	18c00404 	addi	r3,r3,16
    f068:	39c00404 	addi	r7,r7,16
    f06c:	42000404 	addi	r8,r8,16
    f070:	6b400404 	addi	r13,r13,16
    f074:	63000404 	addi	r12,r12,16
    f078:	5ac00404 	addi	r11,r11,16
    f07c:	52800404 	addi	r10,r10,16
    f080:	4a400404 	addi	r9,r9,16
    f084:	1c3fef1e 	bne	r3,r16,f044 <__alt_exception_stack_pointer+0xf800f044>
    f088:	89c00044 	addi	r7,r17,1
    f08c:	380e913a 	slli	r7,r7,4
    f090:	310003cc 	andi	r4,r6,15
    f094:	02c000c4 	movi	r11,3
    f098:	11c7883a 	add	r3,r2,r7
    f09c:	29cb883a 	add	r5,r5,r7
    f0a0:	5900212e 	bgeu	r11,r4,f128 <memcpy+0x140>
    f0a4:	1813883a 	mov	r9,r3
    f0a8:	2811883a 	mov	r8,r5
    f0ac:	200f883a 	mov	r7,r4
    f0b0:	42800017 	ldw	r10,0(r8)
    f0b4:	4a400104 	addi	r9,r9,4
    f0b8:	39ffff04 	addi	r7,r7,-4
    f0bc:	4abfff15 	stw	r10,-4(r9)
    f0c0:	42000104 	addi	r8,r8,4
    f0c4:	59fffa36 	bltu	r11,r7,f0b0 <__alt_exception_stack_pointer+0xf800f0b0>
    f0c8:	213fff04 	addi	r4,r4,-4
    f0cc:	2008d0ba 	srli	r4,r4,2
    f0d0:	318000cc 	andi	r6,r6,3
    f0d4:	21000044 	addi	r4,r4,1
    f0d8:	2109883a 	add	r4,r4,r4
    f0dc:	2109883a 	add	r4,r4,r4
    f0e0:	1907883a 	add	r3,r3,r4
    f0e4:	290b883a 	add	r5,r5,r4
    f0e8:	30000626 	beq	r6,zero,f104 <memcpy+0x11c>
    f0ec:	198d883a 	add	r6,r3,r6
    f0f0:	29c00003 	ldbu	r7,0(r5)
    f0f4:	18c00044 	addi	r3,r3,1
    f0f8:	29400044 	addi	r5,r5,1
    f0fc:	19ffffc5 	stb	r7,-1(r3)
    f100:	19bffb1e 	bne	r3,r6,f0f0 <__alt_exception_stack_pointer+0xf800f0f0>
    f104:	dfc00217 	ldw	ra,8(sp)
    f108:	dc400117 	ldw	r17,4(sp)
    f10c:	dc000017 	ldw	r16,0(sp)
    f110:	dec00304 	addi	sp,sp,12
    f114:	f800283a 	ret
    f118:	2007883a 	mov	r3,r4
    f11c:	003ff206 	br	f0e8 <__alt_exception_stack_pointer+0xf800f0e8>
    f120:	2007883a 	mov	r3,r4
    f124:	003ff106 	br	f0ec <__alt_exception_stack_pointer+0xf800f0ec>
    f128:	200d883a 	mov	r6,r4
    f12c:	003fee06 	br	f0e8 <__alt_exception_stack_pointer+0xf800f0e8>

0000f130 <memmove>:
    f130:	2005883a 	mov	r2,r4
    f134:	29000b2e 	bgeu	r5,r4,f164 <memmove+0x34>
    f138:	298f883a 	add	r7,r5,r6
    f13c:	21c0092e 	bgeu	r4,r7,f164 <memmove+0x34>
    f140:	2187883a 	add	r3,r4,r6
    f144:	198bc83a 	sub	r5,r3,r6
    f148:	30004826 	beq	r6,zero,f26c <memmove+0x13c>
    f14c:	39ffffc4 	addi	r7,r7,-1
    f150:	39000003 	ldbu	r4,0(r7)
    f154:	18ffffc4 	addi	r3,r3,-1
    f158:	19000005 	stb	r4,0(r3)
    f15c:	28fffb1e 	bne	r5,r3,f14c <__alt_exception_stack_pointer+0xf800f14c>
    f160:	f800283a 	ret
    f164:	00c003c4 	movi	r3,15
    f168:	1980412e 	bgeu	r3,r6,f270 <memmove+0x140>
    f16c:	2886b03a 	or	r3,r5,r2
    f170:	18c000cc 	andi	r3,r3,3
    f174:	1800401e 	bne	r3,zero,f278 <memmove+0x148>
    f178:	33fffc04 	addi	r15,r6,-16
    f17c:	781ed13a 	srli	r15,r15,4
    f180:	28c00104 	addi	r3,r5,4
    f184:	13400104 	addi	r13,r2,4
    f188:	781c913a 	slli	r14,r15,4
    f18c:	2b000204 	addi	r12,r5,8
    f190:	12c00204 	addi	r11,r2,8
    f194:	73800504 	addi	r14,r14,20
    f198:	2a800304 	addi	r10,r5,12
    f19c:	12400304 	addi	r9,r2,12
    f1a0:	2b9d883a 	add	r14,r5,r14
    f1a4:	2811883a 	mov	r8,r5
    f1a8:	100f883a 	mov	r7,r2
    f1ac:	41000017 	ldw	r4,0(r8)
    f1b0:	39c00404 	addi	r7,r7,16
    f1b4:	18c00404 	addi	r3,r3,16
    f1b8:	393ffc15 	stw	r4,-16(r7)
    f1bc:	193ffc17 	ldw	r4,-16(r3)
    f1c0:	6b400404 	addi	r13,r13,16
    f1c4:	5ac00404 	addi	r11,r11,16
    f1c8:	693ffc15 	stw	r4,-16(r13)
    f1cc:	61000017 	ldw	r4,0(r12)
    f1d0:	4a400404 	addi	r9,r9,16
    f1d4:	42000404 	addi	r8,r8,16
    f1d8:	593ffc15 	stw	r4,-16(r11)
    f1dc:	51000017 	ldw	r4,0(r10)
    f1e0:	63000404 	addi	r12,r12,16
    f1e4:	52800404 	addi	r10,r10,16
    f1e8:	493ffc15 	stw	r4,-16(r9)
    f1ec:	1bbfef1e 	bne	r3,r14,f1ac <__alt_exception_stack_pointer+0xf800f1ac>
    f1f0:	79000044 	addi	r4,r15,1
    f1f4:	2008913a 	slli	r4,r4,4
    f1f8:	328003cc 	andi	r10,r6,15
    f1fc:	02c000c4 	movi	r11,3
    f200:	1107883a 	add	r3,r2,r4
    f204:	290b883a 	add	r5,r5,r4
    f208:	5a801e2e 	bgeu	r11,r10,f284 <memmove+0x154>
    f20c:	1813883a 	mov	r9,r3
    f210:	2811883a 	mov	r8,r5
    f214:	500f883a 	mov	r7,r10
    f218:	41000017 	ldw	r4,0(r8)
    f21c:	4a400104 	addi	r9,r9,4
    f220:	39ffff04 	addi	r7,r7,-4
    f224:	493fff15 	stw	r4,-4(r9)
    f228:	42000104 	addi	r8,r8,4
    f22c:	59fffa36 	bltu	r11,r7,f218 <__alt_exception_stack_pointer+0xf800f218>
    f230:	513fff04 	addi	r4,r10,-4
    f234:	2008d0ba 	srli	r4,r4,2
    f238:	318000cc 	andi	r6,r6,3
    f23c:	21000044 	addi	r4,r4,1
    f240:	2109883a 	add	r4,r4,r4
    f244:	2109883a 	add	r4,r4,r4
    f248:	1907883a 	add	r3,r3,r4
    f24c:	290b883a 	add	r5,r5,r4
    f250:	30000b26 	beq	r6,zero,f280 <memmove+0x150>
    f254:	198d883a 	add	r6,r3,r6
    f258:	29c00003 	ldbu	r7,0(r5)
    f25c:	18c00044 	addi	r3,r3,1
    f260:	29400044 	addi	r5,r5,1
    f264:	19ffffc5 	stb	r7,-1(r3)
    f268:	19bffb1e 	bne	r3,r6,f258 <__alt_exception_stack_pointer+0xf800f258>
    f26c:	f800283a 	ret
    f270:	1007883a 	mov	r3,r2
    f274:	003ff606 	br	f250 <__alt_exception_stack_pointer+0xf800f250>
    f278:	1007883a 	mov	r3,r2
    f27c:	003ff506 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f280:	f800283a 	ret
    f284:	500d883a 	mov	r6,r10
    f288:	003ff106 	br	f250 <__alt_exception_stack_pointer+0xf800f250>

0000f28c <memset>:
    f28c:	20c000cc 	andi	r3,r4,3
    f290:	2005883a 	mov	r2,r4
    f294:	18004426 	beq	r3,zero,f3a8 <memset+0x11c>
    f298:	31ffffc4 	addi	r7,r6,-1
    f29c:	30004026 	beq	r6,zero,f3a0 <memset+0x114>
    f2a0:	2813883a 	mov	r9,r5
    f2a4:	200d883a 	mov	r6,r4
    f2a8:	2007883a 	mov	r3,r4
    f2ac:	00000406 	br	f2c0 <memset+0x34>
    f2b0:	3a3fffc4 	addi	r8,r7,-1
    f2b4:	31800044 	addi	r6,r6,1
    f2b8:	38003926 	beq	r7,zero,f3a0 <memset+0x114>
    f2bc:	400f883a 	mov	r7,r8
    f2c0:	18c00044 	addi	r3,r3,1
    f2c4:	32400005 	stb	r9,0(r6)
    f2c8:	1a0000cc 	andi	r8,r3,3
    f2cc:	403ff81e 	bne	r8,zero,f2b0 <__alt_exception_stack_pointer+0xf800f2b0>
    f2d0:	010000c4 	movi	r4,3
    f2d4:	21c02d2e 	bgeu	r4,r7,f38c <memset+0x100>
    f2d8:	29003fcc 	andi	r4,r5,255
    f2dc:	200c923a 	slli	r6,r4,8
    f2e0:	3108b03a 	or	r4,r6,r4
    f2e4:	200c943a 	slli	r6,r4,16
    f2e8:	218cb03a 	or	r6,r4,r6
    f2ec:	010003c4 	movi	r4,15
    f2f0:	21c0182e 	bgeu	r4,r7,f354 <memset+0xc8>
    f2f4:	3b3ffc04 	addi	r12,r7,-16
    f2f8:	6018d13a 	srli	r12,r12,4
    f2fc:	1a000104 	addi	r8,r3,4
    f300:	1ac00204 	addi	r11,r3,8
    f304:	6008913a 	slli	r4,r12,4
    f308:	1a800304 	addi	r10,r3,12
    f30c:	1813883a 	mov	r9,r3
    f310:	21000504 	addi	r4,r4,20
    f314:	1909883a 	add	r4,r3,r4
    f318:	49800015 	stw	r6,0(r9)
    f31c:	41800015 	stw	r6,0(r8)
    f320:	59800015 	stw	r6,0(r11)
    f324:	51800015 	stw	r6,0(r10)
    f328:	42000404 	addi	r8,r8,16
    f32c:	4a400404 	addi	r9,r9,16
    f330:	5ac00404 	addi	r11,r11,16
    f334:	52800404 	addi	r10,r10,16
    f338:	413ff71e 	bne	r8,r4,f318 <__alt_exception_stack_pointer+0xf800f318>
    f33c:	63000044 	addi	r12,r12,1
    f340:	6018913a 	slli	r12,r12,4
    f344:	39c003cc 	andi	r7,r7,15
    f348:	010000c4 	movi	r4,3
    f34c:	1b07883a 	add	r3,r3,r12
    f350:	21c00e2e 	bgeu	r4,r7,f38c <memset+0x100>
    f354:	1813883a 	mov	r9,r3
    f358:	3811883a 	mov	r8,r7
    f35c:	010000c4 	movi	r4,3
    f360:	49800015 	stw	r6,0(r9)
    f364:	423fff04 	addi	r8,r8,-4
    f368:	4a400104 	addi	r9,r9,4
    f36c:	223ffc36 	bltu	r4,r8,f360 <__alt_exception_stack_pointer+0xf800f360>
    f370:	393fff04 	addi	r4,r7,-4
    f374:	2008d0ba 	srli	r4,r4,2
    f378:	39c000cc 	andi	r7,r7,3
    f37c:	21000044 	addi	r4,r4,1
    f380:	2109883a 	add	r4,r4,r4
    f384:	2109883a 	add	r4,r4,r4
    f388:	1907883a 	add	r3,r3,r4
    f38c:	38000526 	beq	r7,zero,f3a4 <memset+0x118>
    f390:	19cf883a 	add	r7,r3,r7
    f394:	19400005 	stb	r5,0(r3)
    f398:	18c00044 	addi	r3,r3,1
    f39c:	38fffd1e 	bne	r7,r3,f394 <__alt_exception_stack_pointer+0xf800f394>
    f3a0:	f800283a 	ret
    f3a4:	f800283a 	ret
    f3a8:	2007883a 	mov	r3,r4
    f3ac:	300f883a 	mov	r7,r6
    f3b0:	003fc706 	br	f2d0 <__alt_exception_stack_pointer+0xf800f2d0>

0000f3b4 <_Balloc>:
    f3b4:	20801317 	ldw	r2,76(r4)
    f3b8:	defffc04 	addi	sp,sp,-16
    f3bc:	dc400115 	stw	r17,4(sp)
    f3c0:	dc000015 	stw	r16,0(sp)
    f3c4:	dfc00315 	stw	ra,12(sp)
    f3c8:	dc800215 	stw	r18,8(sp)
    f3cc:	2023883a 	mov	r17,r4
    f3d0:	2821883a 	mov	r16,r5
    f3d4:	10000f26 	beq	r2,zero,f414 <_Balloc+0x60>
    f3d8:	8407883a 	add	r3,r16,r16
    f3dc:	18c7883a 	add	r3,r3,r3
    f3e0:	10c7883a 	add	r3,r2,r3
    f3e4:	18800017 	ldw	r2,0(r3)
    f3e8:	10001126 	beq	r2,zero,f430 <_Balloc+0x7c>
    f3ec:	11000017 	ldw	r4,0(r2)
    f3f0:	19000015 	stw	r4,0(r3)
    f3f4:	10000415 	stw	zero,16(r2)
    f3f8:	10000315 	stw	zero,12(r2)
    f3fc:	dfc00317 	ldw	ra,12(sp)
    f400:	dc800217 	ldw	r18,8(sp)
    f404:	dc400117 	ldw	r17,4(sp)
    f408:	dc000017 	ldw	r16,0(sp)
    f40c:	dec00404 	addi	sp,sp,16
    f410:	f800283a 	ret
    f414:	01800844 	movi	r6,33
    f418:	01400104 	movi	r5,4
    f41c:	00124980 	call	12498 <_calloc_r>
    f420:	88801315 	stw	r2,76(r17)
    f424:	103fec1e 	bne	r2,zero,f3d8 <__alt_exception_stack_pointer+0xf800f3d8>
    f428:	0005883a 	mov	r2,zero
    f42c:	003ff306 	br	f3fc <__alt_exception_stack_pointer+0xf800f3fc>
    f430:	01400044 	movi	r5,1
    f434:	2c24983a 	sll	r18,r5,r16
    f438:	8809883a 	mov	r4,r17
    f43c:	91800144 	addi	r6,r18,5
    f440:	318d883a 	add	r6,r6,r6
    f444:	318d883a 	add	r6,r6,r6
    f448:	00124980 	call	12498 <_calloc_r>
    f44c:	103ff626 	beq	r2,zero,f428 <__alt_exception_stack_pointer+0xf800f428>
    f450:	14000115 	stw	r16,4(r2)
    f454:	14800215 	stw	r18,8(r2)
    f458:	003fe606 	br	f3f4 <__alt_exception_stack_pointer+0xf800f3f4>

0000f45c <_Bfree>:
    f45c:	28000826 	beq	r5,zero,f480 <_Bfree+0x24>
    f460:	28c00117 	ldw	r3,4(r5)
    f464:	20801317 	ldw	r2,76(r4)
    f468:	18c7883a 	add	r3,r3,r3
    f46c:	18c7883a 	add	r3,r3,r3
    f470:	10c5883a 	add	r2,r2,r3
    f474:	10c00017 	ldw	r3,0(r2)
    f478:	28c00015 	stw	r3,0(r5)
    f47c:	11400015 	stw	r5,0(r2)
    f480:	f800283a 	ret

0000f484 <__multadd>:
    f484:	defff704 	addi	sp,sp,-36
    f488:	dc800215 	stw	r18,8(sp)
    f48c:	2c800417 	ldw	r18,16(r5)
    f490:	dd800615 	stw	r22,24(sp)
    f494:	dd400515 	stw	r21,20(sp)
    f498:	dd000415 	stw	r20,16(sp)
    f49c:	dcc00315 	stw	r19,12(sp)
    f4a0:	dc400115 	stw	r17,4(sp)
    f4a4:	dc000015 	stw	r16,0(sp)
    f4a8:	dfc00815 	stw	ra,32(sp)
    f4ac:	ddc00715 	stw	r23,28(sp)
    f4b0:	2827883a 	mov	r19,r5
    f4b4:	2029883a 	mov	r20,r4
    f4b8:	3023883a 	mov	r17,r6
    f4bc:	3821883a 	mov	r16,r7
    f4c0:	2d400504 	addi	r21,r5,20
    f4c4:	002d883a 	mov	r22,zero
    f4c8:	adc00017 	ldw	r23,0(r21)
    f4cc:	880b883a 	mov	r5,r17
    f4d0:	ad400104 	addi	r21,r21,4
    f4d4:	b93fffcc 	andi	r4,r23,65535
    f4d8:	0005b840 	call	5b84 <__mulsi3>
    f4dc:	b808d43a 	srli	r4,r23,16
    f4e0:	880b883a 	mov	r5,r17
    f4e4:	1421883a 	add	r16,r2,r16
    f4e8:	0005b840 	call	5b84 <__mulsi3>
    f4ec:	800ed43a 	srli	r7,r16,16
    f4f0:	80ffffcc 	andi	r3,r16,65535
    f4f4:	b5800044 	addi	r22,r22,1
    f4f8:	11c5883a 	add	r2,r2,r7
    f4fc:	100e943a 	slli	r7,r2,16
    f500:	1020d43a 	srli	r16,r2,16
    f504:	38c7883a 	add	r3,r7,r3
    f508:	a8ffff15 	stw	r3,-4(r21)
    f50c:	b4bfee16 	blt	r22,r18,f4c8 <__alt_exception_stack_pointer+0xf800f4c8>
    f510:	80000926 	beq	r16,zero,f538 <__multadd+0xb4>
    f514:	98800217 	ldw	r2,8(r19)
    f518:	9080130e 	bge	r18,r2,f568 <__multadd+0xe4>
    f51c:	90800144 	addi	r2,r18,5
    f520:	1085883a 	add	r2,r2,r2
    f524:	1085883a 	add	r2,r2,r2
    f528:	9885883a 	add	r2,r19,r2
    f52c:	14000015 	stw	r16,0(r2)
    f530:	94800044 	addi	r18,r18,1
    f534:	9c800415 	stw	r18,16(r19)
    f538:	9805883a 	mov	r2,r19
    f53c:	dfc00817 	ldw	ra,32(sp)
    f540:	ddc00717 	ldw	r23,28(sp)
    f544:	dd800617 	ldw	r22,24(sp)
    f548:	dd400517 	ldw	r21,20(sp)
    f54c:	dd000417 	ldw	r20,16(sp)
    f550:	dcc00317 	ldw	r19,12(sp)
    f554:	dc800217 	ldw	r18,8(sp)
    f558:	dc400117 	ldw	r17,4(sp)
    f55c:	dc000017 	ldw	r16,0(sp)
    f560:	dec00904 	addi	sp,sp,36
    f564:	f800283a 	ret
    f568:	99400117 	ldw	r5,4(r19)
    f56c:	a009883a 	mov	r4,r20
    f570:	29400044 	addi	r5,r5,1
    f574:	000f3b40 	call	f3b4 <_Balloc>
    f578:	99800417 	ldw	r6,16(r19)
    f57c:	99400304 	addi	r5,r19,12
    f580:	11000304 	addi	r4,r2,12
    f584:	31800084 	addi	r6,r6,2
    f588:	318d883a 	add	r6,r6,r6
    f58c:	318d883a 	add	r6,r6,r6
    f590:	1023883a 	mov	r17,r2
    f594:	000efe80 	call	efe8 <memcpy>
    f598:	98000a26 	beq	r19,zero,f5c4 <__multadd+0x140>
    f59c:	98c00117 	ldw	r3,4(r19)
    f5a0:	a0801317 	ldw	r2,76(r20)
    f5a4:	18c7883a 	add	r3,r3,r3
    f5a8:	18c7883a 	add	r3,r3,r3
    f5ac:	10c5883a 	add	r2,r2,r3
    f5b0:	10c00017 	ldw	r3,0(r2)
    f5b4:	98c00015 	stw	r3,0(r19)
    f5b8:	14c00015 	stw	r19,0(r2)
    f5bc:	8827883a 	mov	r19,r17
    f5c0:	003fd606 	br	f51c <__alt_exception_stack_pointer+0xf800f51c>
    f5c4:	8827883a 	mov	r19,r17
    f5c8:	003fd406 	br	f51c <__alt_exception_stack_pointer+0xf800f51c>

0000f5cc <__s2b>:
    f5cc:	defff904 	addi	sp,sp,-28
    f5d0:	dc400115 	stw	r17,4(sp)
    f5d4:	dc000015 	stw	r16,0(sp)
    f5d8:	2023883a 	mov	r17,r4
    f5dc:	2821883a 	mov	r16,r5
    f5e0:	39000204 	addi	r4,r7,8
    f5e4:	01400244 	movi	r5,9
    f5e8:	dcc00315 	stw	r19,12(sp)
    f5ec:	dc800215 	stw	r18,8(sp)
    f5f0:	dfc00615 	stw	ra,24(sp)
    f5f4:	dd400515 	stw	r21,20(sp)
    f5f8:	dd000415 	stw	r20,16(sp)
    f5fc:	3825883a 	mov	r18,r7
    f600:	3027883a 	mov	r19,r6
    f604:	00059d00 	call	59d0 <__divsi3>
    f608:	00c00044 	movi	r3,1
    f60c:	000b883a 	mov	r5,zero
    f610:	1880030e 	bge	r3,r2,f620 <__s2b+0x54>
    f614:	18c7883a 	add	r3,r3,r3
    f618:	29400044 	addi	r5,r5,1
    f61c:	18bffd16 	blt	r3,r2,f614 <__alt_exception_stack_pointer+0xf800f614>
    f620:	8809883a 	mov	r4,r17
    f624:	000f3b40 	call	f3b4 <_Balloc>
    f628:	d8c00717 	ldw	r3,28(sp)
    f62c:	10c00515 	stw	r3,20(r2)
    f630:	00c00044 	movi	r3,1
    f634:	10c00415 	stw	r3,16(r2)
    f638:	00c00244 	movi	r3,9
    f63c:	1cc0210e 	bge	r3,r19,f6c4 <__s2b+0xf8>
    f640:	80eb883a 	add	r21,r16,r3
    f644:	a829883a 	mov	r20,r21
    f648:	84e1883a 	add	r16,r16,r19
    f64c:	a1c00007 	ldb	r7,0(r20)
    f650:	01800284 	movi	r6,10
    f654:	a5000044 	addi	r20,r20,1
    f658:	100b883a 	mov	r5,r2
    f65c:	39fff404 	addi	r7,r7,-48
    f660:	8809883a 	mov	r4,r17
    f664:	000f4840 	call	f484 <__multadd>
    f668:	a43ff81e 	bne	r20,r16,f64c <__alt_exception_stack_pointer+0xf800f64c>
    f66c:	ace1883a 	add	r16,r21,r19
    f670:	843ffe04 	addi	r16,r16,-8
    f674:	9c800a0e 	bge	r19,r18,f6a0 <__s2b+0xd4>
    f678:	94e5c83a 	sub	r18,r18,r19
    f67c:	84a5883a 	add	r18,r16,r18
    f680:	81c00007 	ldb	r7,0(r16)
    f684:	01800284 	movi	r6,10
    f688:	84000044 	addi	r16,r16,1
    f68c:	100b883a 	mov	r5,r2
    f690:	39fff404 	addi	r7,r7,-48
    f694:	8809883a 	mov	r4,r17
    f698:	000f4840 	call	f484 <__multadd>
    f69c:	84bff81e 	bne	r16,r18,f680 <__alt_exception_stack_pointer+0xf800f680>
    f6a0:	dfc00617 	ldw	ra,24(sp)
    f6a4:	dd400517 	ldw	r21,20(sp)
    f6a8:	dd000417 	ldw	r20,16(sp)
    f6ac:	dcc00317 	ldw	r19,12(sp)
    f6b0:	dc800217 	ldw	r18,8(sp)
    f6b4:	dc400117 	ldw	r17,4(sp)
    f6b8:	dc000017 	ldw	r16,0(sp)
    f6bc:	dec00704 	addi	sp,sp,28
    f6c0:	f800283a 	ret
    f6c4:	84000284 	addi	r16,r16,10
    f6c8:	1827883a 	mov	r19,r3
    f6cc:	003fe906 	br	f674 <__alt_exception_stack_pointer+0xf800f674>

0000f6d0 <__hi0bits>:
    f6d0:	20bfffec 	andhi	r2,r4,65535
    f6d4:	1000141e 	bne	r2,zero,f728 <__hi0bits+0x58>
    f6d8:	2008943a 	slli	r4,r4,16
    f6dc:	00800404 	movi	r2,16
    f6e0:	20ffc02c 	andhi	r3,r4,65280
    f6e4:	1800021e 	bne	r3,zero,f6f0 <__hi0bits+0x20>
    f6e8:	2008923a 	slli	r4,r4,8
    f6ec:	10800204 	addi	r2,r2,8
    f6f0:	20fc002c 	andhi	r3,r4,61440
    f6f4:	1800021e 	bne	r3,zero,f700 <__hi0bits+0x30>
    f6f8:	2008913a 	slli	r4,r4,4
    f6fc:	10800104 	addi	r2,r2,4
    f700:	20f0002c 	andhi	r3,r4,49152
    f704:	1800031e 	bne	r3,zero,f714 <__hi0bits+0x44>
    f708:	2109883a 	add	r4,r4,r4
    f70c:	10800084 	addi	r2,r2,2
    f710:	2109883a 	add	r4,r4,r4
    f714:	20000316 	blt	r4,zero,f724 <__hi0bits+0x54>
    f718:	2110002c 	andhi	r4,r4,16384
    f71c:	2000041e 	bne	r4,zero,f730 <__hi0bits+0x60>
    f720:	00800804 	movi	r2,32
    f724:	f800283a 	ret
    f728:	0005883a 	mov	r2,zero
    f72c:	003fec06 	br	f6e0 <__alt_exception_stack_pointer+0xf800f6e0>
    f730:	10800044 	addi	r2,r2,1
    f734:	f800283a 	ret

0000f738 <__lo0bits>:
    f738:	20c00017 	ldw	r3,0(r4)
    f73c:	188001cc 	andi	r2,r3,7
    f740:	10000826 	beq	r2,zero,f764 <__lo0bits+0x2c>
    f744:	1880004c 	andi	r2,r3,1
    f748:	1000211e 	bne	r2,zero,f7d0 <__lo0bits+0x98>
    f74c:	1880008c 	andi	r2,r3,2
    f750:	1000211e 	bne	r2,zero,f7d8 <__lo0bits+0xa0>
    f754:	1806d0ba 	srli	r3,r3,2
    f758:	00800084 	movi	r2,2
    f75c:	20c00015 	stw	r3,0(r4)
    f760:	f800283a 	ret
    f764:	18bfffcc 	andi	r2,r3,65535
    f768:	10001326 	beq	r2,zero,f7b8 <__lo0bits+0x80>
    f76c:	0005883a 	mov	r2,zero
    f770:	19403fcc 	andi	r5,r3,255
    f774:	2800021e 	bne	r5,zero,f780 <__lo0bits+0x48>
    f778:	1806d23a 	srli	r3,r3,8
    f77c:	10800204 	addi	r2,r2,8
    f780:	194003cc 	andi	r5,r3,15
    f784:	2800021e 	bne	r5,zero,f790 <__lo0bits+0x58>
    f788:	1806d13a 	srli	r3,r3,4
    f78c:	10800104 	addi	r2,r2,4
    f790:	194000cc 	andi	r5,r3,3
    f794:	2800021e 	bne	r5,zero,f7a0 <__lo0bits+0x68>
    f798:	1806d0ba 	srli	r3,r3,2
    f79c:	10800084 	addi	r2,r2,2
    f7a0:	1940004c 	andi	r5,r3,1
    f7a4:	2800081e 	bne	r5,zero,f7c8 <__lo0bits+0x90>
    f7a8:	1806d07a 	srli	r3,r3,1
    f7ac:	1800051e 	bne	r3,zero,f7c4 <__lo0bits+0x8c>
    f7b0:	00800804 	movi	r2,32
    f7b4:	f800283a 	ret
    f7b8:	1806d43a 	srli	r3,r3,16
    f7bc:	00800404 	movi	r2,16
    f7c0:	003feb06 	br	f770 <__alt_exception_stack_pointer+0xf800f770>
    f7c4:	10800044 	addi	r2,r2,1
    f7c8:	20c00015 	stw	r3,0(r4)
    f7cc:	f800283a 	ret
    f7d0:	0005883a 	mov	r2,zero
    f7d4:	f800283a 	ret
    f7d8:	1806d07a 	srli	r3,r3,1
    f7dc:	00800044 	movi	r2,1
    f7e0:	20c00015 	stw	r3,0(r4)
    f7e4:	f800283a 	ret

0000f7e8 <__i2b>:
    f7e8:	defffd04 	addi	sp,sp,-12
    f7ec:	dc000015 	stw	r16,0(sp)
    f7f0:	04000044 	movi	r16,1
    f7f4:	dc400115 	stw	r17,4(sp)
    f7f8:	2823883a 	mov	r17,r5
    f7fc:	800b883a 	mov	r5,r16
    f800:	dfc00215 	stw	ra,8(sp)
    f804:	000f3b40 	call	f3b4 <_Balloc>
    f808:	14400515 	stw	r17,20(r2)
    f80c:	14000415 	stw	r16,16(r2)
    f810:	dfc00217 	ldw	ra,8(sp)
    f814:	dc400117 	ldw	r17,4(sp)
    f818:	dc000017 	ldw	r16,0(sp)
    f81c:	dec00304 	addi	sp,sp,12
    f820:	f800283a 	ret

0000f824 <__multiply>:
    f824:	deffef04 	addi	sp,sp,-68
    f828:	dc400815 	stw	r17,32(sp)
    f82c:	dc000715 	stw	r16,28(sp)
    f830:	34400417 	ldw	r17,16(r6)
    f834:	2c000417 	ldw	r16,16(r5)
    f838:	dd800d15 	stw	r22,52(sp)
    f83c:	dc800915 	stw	r18,36(sp)
    f840:	dfc01015 	stw	ra,64(sp)
    f844:	df000f15 	stw	fp,60(sp)
    f848:	ddc00e15 	stw	r23,56(sp)
    f84c:	dd400c15 	stw	r21,48(sp)
    f850:	dd000b15 	stw	r20,44(sp)
    f854:	dcc00a15 	stw	r19,40(sp)
    f858:	2825883a 	mov	r18,r5
    f85c:	302d883a 	mov	r22,r6
    f860:	8440050e 	bge	r16,r17,f878 <__multiply+0x54>
    f864:	8007883a 	mov	r3,r16
    f868:	3025883a 	mov	r18,r6
    f86c:	8821883a 	mov	r16,r17
    f870:	282d883a 	mov	r22,r5
    f874:	1823883a 	mov	r17,r3
    f878:	90800217 	ldw	r2,8(r18)
    f87c:	8447883a 	add	r3,r16,r17
    f880:	d8c00215 	stw	r3,8(sp)
    f884:	91400117 	ldw	r5,4(r18)
    f888:	10c0010e 	bge	r2,r3,f890 <__multiply+0x6c>
    f88c:	29400044 	addi	r5,r5,1
    f890:	000f3b40 	call	f3b4 <_Balloc>
    f894:	d8c00217 	ldw	r3,8(sp)
    f898:	d8800615 	stw	r2,24(sp)
    f89c:	18eb883a 	add	r21,r3,r3
    f8a0:	ad6b883a 	add	r21,r21,r21
    f8a4:	10c00504 	addi	r3,r2,20
    f8a8:	1d6b883a 	add	r21,r3,r21
    f8ac:	d8c00115 	stw	r3,4(sp)
    f8b0:	dd400315 	stw	r21,12(sp)
    f8b4:	1805883a 	mov	r2,r3
    f8b8:	1d40042e 	bgeu	r3,r21,f8cc <__multiply+0xa8>
    f8bc:	d8c00317 	ldw	r3,12(sp)
    f8c0:	10000015 	stw	zero,0(r2)
    f8c4:	10800104 	addi	r2,r2,4
    f8c8:	10fffc36 	bltu	r2,r3,f8bc <__alt_exception_stack_pointer+0xf800f8bc>
    f8cc:	8c63883a 	add	r17,r17,r17
    f8d0:	b5800504 	addi	r22,r22,20
    f8d4:	8c63883a 	add	r17,r17,r17
    f8d8:	94800504 	addi	r18,r18,20
    f8dc:	8421883a 	add	r16,r16,r16
    f8e0:	b463883a 	add	r17,r22,r17
    f8e4:	8421883a 	add	r16,r16,r16
    f8e8:	dd800015 	stw	r22,0(sp)
    f8ec:	dc800415 	stw	r18,16(sp)
    f8f0:	dc400515 	stw	r17,20(sp)
    f8f4:	9429883a 	add	r20,r18,r16
    f8f8:	b4404f2e 	bgeu	r22,r17,fa38 <__multiply+0x214>
    f8fc:	d8c00017 	ldw	r3,0(sp)
    f900:	1c800017 	ldw	r18,0(r3)
    f904:	947fffcc 	andi	r17,r18,65535
    f908:	88001e26 	beq	r17,zero,f984 <__multiply+0x160>
    f90c:	dd800117 	ldw	r22,4(sp)
    f910:	dd400417 	ldw	r21,16(sp)
    f914:	0027883a 	mov	r19,zero
    f918:	ac800017 	ldw	r18,0(r21)
    f91c:	b4000017 	ldw	r16,0(r22)
    f920:	880b883a 	mov	r5,r17
    f924:	913fffcc 	andi	r4,r18,65535
    f928:	0005b840 	call	5b84 <__mulsi3>
    f92c:	9008d43a 	srli	r4,r18,16
    f930:	84bfffcc 	andi	r18,r16,65535
    f934:	1485883a 	add	r2,r2,r18
    f938:	14e5883a 	add	r18,r2,r19
    f93c:	8020d43a 	srli	r16,r16,16
    f940:	9026d43a 	srli	r19,r18,16
    f944:	880b883a 	mov	r5,r17
    f948:	0005b840 	call	5b84 <__mulsi3>
    f94c:	1405883a 	add	r2,r2,r16
    f950:	14e1883a 	add	r16,r2,r19
    f954:	90ffffcc 	andi	r3,r18,65535
    f958:	8024943a 	slli	r18,r16,16
    f95c:	ad400104 	addi	r21,r21,4
    f960:	b005883a 	mov	r2,r22
    f964:	90c6b03a 	or	r3,r18,r3
    f968:	b0c00015 	stw	r3,0(r22)
    f96c:	8026d43a 	srli	r19,r16,16
    f970:	b5800104 	addi	r22,r22,4
    f974:	ad3fe836 	bltu	r21,r20,f918 <__alt_exception_stack_pointer+0xf800f918>
    f978:	d8c00017 	ldw	r3,0(sp)
    f97c:	14c00115 	stw	r19,4(r2)
    f980:	1c800017 	ldw	r18,0(r3)
    f984:	9024d43a 	srli	r18,r18,16
    f988:	90002226 	beq	r18,zero,fa14 <__multiply+0x1f0>
    f98c:	d8c00117 	ldw	r3,4(sp)
    f990:	dd800417 	ldw	r22,16(sp)
    f994:	002f883a 	mov	r23,zero
    f998:	1f000017 	ldw	fp,0(r3)
    f99c:	1823883a 	mov	r17,r3
    f9a0:	182b883a 	mov	r21,r3
    f9a4:	e021883a 	mov	r16,fp
    f9a8:	00000106 	br	f9b0 <__multiply+0x18c>
    f9ac:	982b883a 	mov	r21,r19
    f9b0:	b100000b 	ldhu	r4,0(r22)
    f9b4:	8020d43a 	srli	r16,r16,16
    f9b8:	900b883a 	mov	r5,r18
    f9bc:	0005b840 	call	5b84 <__mulsi3>
    f9c0:	1405883a 	add	r2,r2,r16
    f9c4:	15ef883a 	add	r23,r2,r23
    f9c8:	b804943a 	slli	r2,r23,16
    f9cc:	e0ffffcc 	andi	r3,fp,65535
    f9d0:	8c400104 	addi	r17,r17,4
    f9d4:	10c6b03a 	or	r3,r2,r3
    f9d8:	88ffff15 	stw	r3,-4(r17)
    f9dc:	b5800104 	addi	r22,r22,4
    f9e0:	b13fff17 	ldw	r4,-4(r22)
    f9e4:	acc00104 	addi	r19,r21,4
    f9e8:	900b883a 	mov	r5,r18
    f9ec:	2008d43a 	srli	r4,r4,16
    f9f0:	9c000017 	ldw	r16,0(r19)
    f9f4:	0005b840 	call	5b84 <__mulsi3>
    f9f8:	b806d43a 	srli	r3,r23,16
    f9fc:	813fffcc 	andi	r4,r16,65535
    fa00:	1105883a 	add	r2,r2,r4
    fa04:	10f9883a 	add	fp,r2,r3
    fa08:	e02ed43a 	srli	r23,fp,16
    fa0c:	b53fe736 	bltu	r22,r20,f9ac <__alt_exception_stack_pointer+0xf800f9ac>
    fa10:	af000115 	stw	fp,4(r21)
    fa14:	d8c00017 	ldw	r3,0(sp)
    fa18:	d9000517 	ldw	r4,20(sp)
    fa1c:	18c00104 	addi	r3,r3,4
    fa20:	d8c00015 	stw	r3,0(sp)
    fa24:	d8c00117 	ldw	r3,4(sp)
    fa28:	18c00104 	addi	r3,r3,4
    fa2c:	d8c00115 	stw	r3,4(sp)
    fa30:	d8c00017 	ldw	r3,0(sp)
    fa34:	193fb136 	bltu	r3,r4,f8fc <__alt_exception_stack_pointer+0xf800f8fc>
    fa38:	d8c00217 	ldw	r3,8(sp)
    fa3c:	00c00c0e 	bge	zero,r3,fa70 <__multiply+0x24c>
    fa40:	d8c00317 	ldw	r3,12(sp)
    fa44:	18bfff17 	ldw	r2,-4(r3)
    fa48:	1d7fff04 	addi	r21,r3,-4
    fa4c:	10000326 	beq	r2,zero,fa5c <__multiply+0x238>
    fa50:	00000706 	br	fa70 <__multiply+0x24c>
    fa54:	a8800017 	ldw	r2,0(r21)
    fa58:	1000051e 	bne	r2,zero,fa70 <__multiply+0x24c>
    fa5c:	d8c00217 	ldw	r3,8(sp)
    fa60:	ad7fff04 	addi	r21,r21,-4
    fa64:	18ffffc4 	addi	r3,r3,-1
    fa68:	d8c00215 	stw	r3,8(sp)
    fa6c:	183ff91e 	bne	r3,zero,fa54 <__alt_exception_stack_pointer+0xf800fa54>
    fa70:	d8c00617 	ldw	r3,24(sp)
    fa74:	d9000217 	ldw	r4,8(sp)
    fa78:	1805883a 	mov	r2,r3
    fa7c:	19000415 	stw	r4,16(r3)
    fa80:	dfc01017 	ldw	ra,64(sp)
    fa84:	df000f17 	ldw	fp,60(sp)
    fa88:	ddc00e17 	ldw	r23,56(sp)
    fa8c:	dd800d17 	ldw	r22,52(sp)
    fa90:	dd400c17 	ldw	r21,48(sp)
    fa94:	dd000b17 	ldw	r20,44(sp)
    fa98:	dcc00a17 	ldw	r19,40(sp)
    fa9c:	dc800917 	ldw	r18,36(sp)
    faa0:	dc400817 	ldw	r17,32(sp)
    faa4:	dc000717 	ldw	r16,28(sp)
    faa8:	dec01104 	addi	sp,sp,68
    faac:	f800283a 	ret

0000fab0 <__pow5mult>:
    fab0:	defffa04 	addi	sp,sp,-24
    fab4:	dcc00315 	stw	r19,12(sp)
    fab8:	dc000015 	stw	r16,0(sp)
    fabc:	dfc00515 	stw	ra,20(sp)
    fac0:	dd000415 	stw	r20,16(sp)
    fac4:	dc800215 	stw	r18,8(sp)
    fac8:	dc400115 	stw	r17,4(sp)
    facc:	308000cc 	andi	r2,r6,3
    fad0:	3021883a 	mov	r16,r6
    fad4:	2027883a 	mov	r19,r4
    fad8:	10002f1e 	bne	r2,zero,fb98 <__pow5mult+0xe8>
    fadc:	2825883a 	mov	r18,r5
    fae0:	8021d0ba 	srai	r16,r16,2
    fae4:	80001a26 	beq	r16,zero,fb50 <__pow5mult+0xa0>
    fae8:	9c401217 	ldw	r17,72(r19)
    faec:	8800061e 	bne	r17,zero,fb08 <__pow5mult+0x58>
    faf0:	00003406 	br	fbc4 <__pow5mult+0x114>
    faf4:	8021d07a 	srai	r16,r16,1
    faf8:	80001526 	beq	r16,zero,fb50 <__pow5mult+0xa0>
    fafc:	88800017 	ldw	r2,0(r17)
    fb00:	10001c26 	beq	r2,zero,fb74 <__pow5mult+0xc4>
    fb04:	1023883a 	mov	r17,r2
    fb08:	8080004c 	andi	r2,r16,1
    fb0c:	103ff926 	beq	r2,zero,faf4 <__alt_exception_stack_pointer+0xf800faf4>
    fb10:	880d883a 	mov	r6,r17
    fb14:	900b883a 	mov	r5,r18
    fb18:	9809883a 	mov	r4,r19
    fb1c:	000f8240 	call	f824 <__multiply>
    fb20:	90001b26 	beq	r18,zero,fb90 <__pow5mult+0xe0>
    fb24:	91000117 	ldw	r4,4(r18)
    fb28:	98c01317 	ldw	r3,76(r19)
    fb2c:	8021d07a 	srai	r16,r16,1
    fb30:	2109883a 	add	r4,r4,r4
    fb34:	2109883a 	add	r4,r4,r4
    fb38:	1907883a 	add	r3,r3,r4
    fb3c:	19000017 	ldw	r4,0(r3)
    fb40:	91000015 	stw	r4,0(r18)
    fb44:	1c800015 	stw	r18,0(r3)
    fb48:	1025883a 	mov	r18,r2
    fb4c:	803feb1e 	bne	r16,zero,fafc <__alt_exception_stack_pointer+0xf800fafc>
    fb50:	9005883a 	mov	r2,r18
    fb54:	dfc00517 	ldw	ra,20(sp)
    fb58:	dd000417 	ldw	r20,16(sp)
    fb5c:	dcc00317 	ldw	r19,12(sp)
    fb60:	dc800217 	ldw	r18,8(sp)
    fb64:	dc400117 	ldw	r17,4(sp)
    fb68:	dc000017 	ldw	r16,0(sp)
    fb6c:	dec00604 	addi	sp,sp,24
    fb70:	f800283a 	ret
    fb74:	880d883a 	mov	r6,r17
    fb78:	880b883a 	mov	r5,r17
    fb7c:	9809883a 	mov	r4,r19
    fb80:	000f8240 	call	f824 <__multiply>
    fb84:	88800015 	stw	r2,0(r17)
    fb88:	10000015 	stw	zero,0(r2)
    fb8c:	003fdd06 	br	fb04 <__alt_exception_stack_pointer+0xf800fb04>
    fb90:	1025883a 	mov	r18,r2
    fb94:	003fd706 	br	faf4 <__alt_exception_stack_pointer+0xf800faf4>
    fb98:	10bfffc4 	addi	r2,r2,-1
    fb9c:	1085883a 	add	r2,r2,r2
    fba0:	00c00074 	movhi	r3,1
    fba4:	18dff804 	addi	r3,r3,32736
    fba8:	1085883a 	add	r2,r2,r2
    fbac:	1885883a 	add	r2,r3,r2
    fbb0:	11800017 	ldw	r6,0(r2)
    fbb4:	000f883a 	mov	r7,zero
    fbb8:	000f4840 	call	f484 <__multadd>
    fbbc:	1025883a 	mov	r18,r2
    fbc0:	003fc706 	br	fae0 <__alt_exception_stack_pointer+0xf800fae0>
    fbc4:	05000044 	movi	r20,1
    fbc8:	a00b883a 	mov	r5,r20
    fbcc:	9809883a 	mov	r4,r19
    fbd0:	000f3b40 	call	f3b4 <_Balloc>
    fbd4:	1023883a 	mov	r17,r2
    fbd8:	00809c44 	movi	r2,625
    fbdc:	88800515 	stw	r2,20(r17)
    fbe0:	8d000415 	stw	r20,16(r17)
    fbe4:	9c401215 	stw	r17,72(r19)
    fbe8:	88000015 	stw	zero,0(r17)
    fbec:	003fc606 	br	fb08 <__alt_exception_stack_pointer+0xf800fb08>

0000fbf0 <__lshift>:
    fbf0:	defff904 	addi	sp,sp,-28
    fbf4:	dd400515 	stw	r21,20(sp)
    fbf8:	dcc00315 	stw	r19,12(sp)
    fbfc:	302bd17a 	srai	r21,r6,5
    fc00:	2cc00417 	ldw	r19,16(r5)
    fc04:	28800217 	ldw	r2,8(r5)
    fc08:	dd000415 	stw	r20,16(sp)
    fc0c:	ace7883a 	add	r19,r21,r19
    fc10:	dc800215 	stw	r18,8(sp)
    fc14:	dc400115 	stw	r17,4(sp)
    fc18:	dc000015 	stw	r16,0(sp)
    fc1c:	dfc00615 	stw	ra,24(sp)
    fc20:	9c000044 	addi	r16,r19,1
    fc24:	2823883a 	mov	r17,r5
    fc28:	3029883a 	mov	r20,r6
    fc2c:	2025883a 	mov	r18,r4
    fc30:	29400117 	ldw	r5,4(r5)
    fc34:	1400030e 	bge	r2,r16,fc44 <__lshift+0x54>
    fc38:	1085883a 	add	r2,r2,r2
    fc3c:	29400044 	addi	r5,r5,1
    fc40:	143ffd16 	blt	r2,r16,fc38 <__alt_exception_stack_pointer+0xf800fc38>
    fc44:	9009883a 	mov	r4,r18
    fc48:	000f3b40 	call	f3b4 <_Balloc>
    fc4c:	10c00504 	addi	r3,r2,20
    fc50:	0540070e 	bge	zero,r21,fc70 <__lshift+0x80>
    fc54:	ad6b883a 	add	r21,r21,r21
    fc58:	ad6b883a 	add	r21,r21,r21
    fc5c:	1809883a 	mov	r4,r3
    fc60:	1d47883a 	add	r3,r3,r21
    fc64:	20000015 	stw	zero,0(r4)
    fc68:	21000104 	addi	r4,r4,4
    fc6c:	193ffd1e 	bne	r3,r4,fc64 <__alt_exception_stack_pointer+0xf800fc64>
    fc70:	8a000417 	ldw	r8,16(r17)
    fc74:	89000504 	addi	r4,r17,20
    fc78:	a18007cc 	andi	r6,r20,31
    fc7c:	4211883a 	add	r8,r8,r8
    fc80:	4211883a 	add	r8,r8,r8
    fc84:	2211883a 	add	r8,r4,r8
    fc88:	30002326 	beq	r6,zero,fd18 <__lshift+0x128>
    fc8c:	02400804 	movi	r9,32
    fc90:	4993c83a 	sub	r9,r9,r6
    fc94:	000b883a 	mov	r5,zero
    fc98:	21c00017 	ldw	r7,0(r4)
    fc9c:	1815883a 	mov	r10,r3
    fca0:	18c00104 	addi	r3,r3,4
    fca4:	398e983a 	sll	r7,r7,r6
    fca8:	21000104 	addi	r4,r4,4
    fcac:	394ab03a 	or	r5,r7,r5
    fcb0:	197fff15 	stw	r5,-4(r3)
    fcb4:	217fff17 	ldw	r5,-4(r4)
    fcb8:	2a4ad83a 	srl	r5,r5,r9
    fcbc:	223ff636 	bltu	r4,r8,fc98 <__alt_exception_stack_pointer+0xf800fc98>
    fcc0:	51400115 	stw	r5,4(r10)
    fcc4:	28001a1e 	bne	r5,zero,fd30 <__lshift+0x140>
    fcc8:	843fffc4 	addi	r16,r16,-1
    fccc:	14000415 	stw	r16,16(r2)
    fcd0:	88000826 	beq	r17,zero,fcf4 <__lshift+0x104>
    fcd4:	89000117 	ldw	r4,4(r17)
    fcd8:	90c01317 	ldw	r3,76(r18)
    fcdc:	2109883a 	add	r4,r4,r4
    fce0:	2109883a 	add	r4,r4,r4
    fce4:	1907883a 	add	r3,r3,r4
    fce8:	19000017 	ldw	r4,0(r3)
    fcec:	89000015 	stw	r4,0(r17)
    fcf0:	1c400015 	stw	r17,0(r3)
    fcf4:	dfc00617 	ldw	ra,24(sp)
    fcf8:	dd400517 	ldw	r21,20(sp)
    fcfc:	dd000417 	ldw	r20,16(sp)
    fd00:	dcc00317 	ldw	r19,12(sp)
    fd04:	dc800217 	ldw	r18,8(sp)
    fd08:	dc400117 	ldw	r17,4(sp)
    fd0c:	dc000017 	ldw	r16,0(sp)
    fd10:	dec00704 	addi	sp,sp,28
    fd14:	f800283a 	ret
    fd18:	21400017 	ldw	r5,0(r4)
    fd1c:	18c00104 	addi	r3,r3,4
    fd20:	21000104 	addi	r4,r4,4
    fd24:	197fff15 	stw	r5,-4(r3)
    fd28:	223ffb36 	bltu	r4,r8,fd18 <__alt_exception_stack_pointer+0xf800fd18>
    fd2c:	003fe606 	br	fcc8 <__alt_exception_stack_pointer+0xf800fcc8>
    fd30:	9c000084 	addi	r16,r19,2
    fd34:	003fe406 	br	fcc8 <__alt_exception_stack_pointer+0xf800fcc8>

0000fd38 <__mcmp>:
    fd38:	20800417 	ldw	r2,16(r4)
    fd3c:	28c00417 	ldw	r3,16(r5)
    fd40:	10c5c83a 	sub	r2,r2,r3
    fd44:	1000111e 	bne	r2,zero,fd8c <__mcmp+0x54>
    fd48:	18c7883a 	add	r3,r3,r3
    fd4c:	18c7883a 	add	r3,r3,r3
    fd50:	21000504 	addi	r4,r4,20
    fd54:	29400504 	addi	r5,r5,20
    fd58:	20c5883a 	add	r2,r4,r3
    fd5c:	28cb883a 	add	r5,r5,r3
    fd60:	00000106 	br	fd68 <__mcmp+0x30>
    fd64:	20800a2e 	bgeu	r4,r2,fd90 <__mcmp+0x58>
    fd68:	10bfff04 	addi	r2,r2,-4
    fd6c:	297fff04 	addi	r5,r5,-4
    fd70:	11800017 	ldw	r6,0(r2)
    fd74:	28c00017 	ldw	r3,0(r5)
    fd78:	30fffa26 	beq	r6,r3,fd64 <__alt_exception_stack_pointer+0xf800fd64>
    fd7c:	30c00236 	bltu	r6,r3,fd88 <__mcmp+0x50>
    fd80:	00800044 	movi	r2,1
    fd84:	f800283a 	ret
    fd88:	00bfffc4 	movi	r2,-1
    fd8c:	f800283a 	ret
    fd90:	0005883a 	mov	r2,zero
    fd94:	f800283a 	ret

0000fd98 <__mdiff>:
    fd98:	28c00417 	ldw	r3,16(r5)
    fd9c:	30800417 	ldw	r2,16(r6)
    fda0:	defffa04 	addi	sp,sp,-24
    fda4:	dcc00315 	stw	r19,12(sp)
    fda8:	dc800215 	stw	r18,8(sp)
    fdac:	dfc00515 	stw	ra,20(sp)
    fdb0:	dd000415 	stw	r20,16(sp)
    fdb4:	dc400115 	stw	r17,4(sp)
    fdb8:	dc000015 	stw	r16,0(sp)
    fdbc:	1887c83a 	sub	r3,r3,r2
    fdc0:	2825883a 	mov	r18,r5
    fdc4:	3027883a 	mov	r19,r6
    fdc8:	1800141e 	bne	r3,zero,fe1c <__mdiff+0x84>
    fdcc:	1085883a 	add	r2,r2,r2
    fdd0:	1085883a 	add	r2,r2,r2
    fdd4:	2a000504 	addi	r8,r5,20
    fdd8:	34000504 	addi	r16,r6,20
    fddc:	4087883a 	add	r3,r8,r2
    fde0:	8085883a 	add	r2,r16,r2
    fde4:	00000106 	br	fdec <__mdiff+0x54>
    fde8:	40c0592e 	bgeu	r8,r3,ff50 <__mdiff+0x1b8>
    fdec:	18ffff04 	addi	r3,r3,-4
    fdf0:	10bfff04 	addi	r2,r2,-4
    fdf4:	19c00017 	ldw	r7,0(r3)
    fdf8:	11400017 	ldw	r5,0(r2)
    fdfc:	397ffa26 	beq	r7,r5,fde8 <__alt_exception_stack_pointer+0xf800fde8>
    fe00:	3940592e 	bgeu	r7,r5,ff68 <__mdiff+0x1d0>
    fe04:	9005883a 	mov	r2,r18
    fe08:	4023883a 	mov	r17,r8
    fe0c:	9825883a 	mov	r18,r19
    fe10:	05000044 	movi	r20,1
    fe14:	1027883a 	mov	r19,r2
    fe18:	00000406 	br	fe2c <__mdiff+0x94>
    fe1c:	18005616 	blt	r3,zero,ff78 <__mdiff+0x1e0>
    fe20:	34400504 	addi	r17,r6,20
    fe24:	2c000504 	addi	r16,r5,20
    fe28:	0029883a 	mov	r20,zero
    fe2c:	91400117 	ldw	r5,4(r18)
    fe30:	000f3b40 	call	f3b4 <_Balloc>
    fe34:	92400417 	ldw	r9,16(r18)
    fe38:	9b000417 	ldw	r12,16(r19)
    fe3c:	12c00504 	addi	r11,r2,20
    fe40:	4a51883a 	add	r8,r9,r9
    fe44:	6319883a 	add	r12,r12,r12
    fe48:	4211883a 	add	r8,r8,r8
    fe4c:	6319883a 	add	r12,r12,r12
    fe50:	15000315 	stw	r20,12(r2)
    fe54:	8211883a 	add	r8,r16,r8
    fe58:	8b19883a 	add	r12,r17,r12
    fe5c:	0007883a 	mov	r3,zero
    fe60:	81400017 	ldw	r5,0(r16)
    fe64:	89c00017 	ldw	r7,0(r17)
    fe68:	59800104 	addi	r6,r11,4
    fe6c:	293fffcc 	andi	r4,r5,65535
    fe70:	20c7883a 	add	r3,r4,r3
    fe74:	393fffcc 	andi	r4,r7,65535
    fe78:	1909c83a 	sub	r4,r3,r4
    fe7c:	280ad43a 	srli	r5,r5,16
    fe80:	380ed43a 	srli	r7,r7,16
    fe84:	2007d43a 	srai	r3,r4,16
    fe88:	213fffcc 	andi	r4,r4,65535
    fe8c:	29cbc83a 	sub	r5,r5,r7
    fe90:	28c7883a 	add	r3,r5,r3
    fe94:	180a943a 	slli	r5,r3,16
    fe98:	8c400104 	addi	r17,r17,4
    fe9c:	84000104 	addi	r16,r16,4
    fea0:	2908b03a 	or	r4,r5,r4
    fea4:	59000015 	stw	r4,0(r11)
    fea8:	1807d43a 	srai	r3,r3,16
    feac:	3015883a 	mov	r10,r6
    feb0:	3017883a 	mov	r11,r6
    feb4:	8b3fea36 	bltu	r17,r12,fe60 <__alt_exception_stack_pointer+0xf800fe60>
    feb8:	8200162e 	bgeu	r16,r8,ff14 <__mdiff+0x17c>
    febc:	8017883a 	mov	r11,r16
    fec0:	59400017 	ldw	r5,0(r11)
    fec4:	31800104 	addi	r6,r6,4
    fec8:	5ac00104 	addi	r11,r11,4
    fecc:	293fffcc 	andi	r4,r5,65535
    fed0:	20c7883a 	add	r3,r4,r3
    fed4:	280ed43a 	srli	r7,r5,16
    fed8:	180bd43a 	srai	r5,r3,16
    fedc:	193fffcc 	andi	r4,r3,65535
    fee0:	3947883a 	add	r3,r7,r5
    fee4:	180a943a 	slli	r5,r3,16
    fee8:	1807d43a 	srai	r3,r3,16
    feec:	2908b03a 	or	r4,r5,r4
    fef0:	313fff15 	stw	r4,-4(r6)
    fef4:	5a3ff236 	bltu	r11,r8,fec0 <__alt_exception_stack_pointer+0xf800fec0>
    fef8:	0406303a 	nor	r3,zero,r16
    fefc:	1a07883a 	add	r3,r3,r8
    ff00:	1806d0ba 	srli	r3,r3,2
    ff04:	18c00044 	addi	r3,r3,1
    ff08:	18c7883a 	add	r3,r3,r3
    ff0c:	18c7883a 	add	r3,r3,r3
    ff10:	50d5883a 	add	r10,r10,r3
    ff14:	50ffff04 	addi	r3,r10,-4
    ff18:	2000041e 	bne	r4,zero,ff2c <__mdiff+0x194>
    ff1c:	18ffff04 	addi	r3,r3,-4
    ff20:	19000017 	ldw	r4,0(r3)
    ff24:	4a7fffc4 	addi	r9,r9,-1
    ff28:	203ffc26 	beq	r4,zero,ff1c <__alt_exception_stack_pointer+0xf800ff1c>
    ff2c:	12400415 	stw	r9,16(r2)
    ff30:	dfc00517 	ldw	ra,20(sp)
    ff34:	dd000417 	ldw	r20,16(sp)
    ff38:	dcc00317 	ldw	r19,12(sp)
    ff3c:	dc800217 	ldw	r18,8(sp)
    ff40:	dc400117 	ldw	r17,4(sp)
    ff44:	dc000017 	ldw	r16,0(sp)
    ff48:	dec00604 	addi	sp,sp,24
    ff4c:	f800283a 	ret
    ff50:	000b883a 	mov	r5,zero
    ff54:	000f3b40 	call	f3b4 <_Balloc>
    ff58:	00c00044 	movi	r3,1
    ff5c:	10c00415 	stw	r3,16(r2)
    ff60:	10000515 	stw	zero,20(r2)
    ff64:	003ff206 	br	ff30 <__alt_exception_stack_pointer+0xf800ff30>
    ff68:	8023883a 	mov	r17,r16
    ff6c:	0029883a 	mov	r20,zero
    ff70:	4021883a 	mov	r16,r8
    ff74:	003fad06 	br	fe2c <__alt_exception_stack_pointer+0xf800fe2c>
    ff78:	9005883a 	mov	r2,r18
    ff7c:	94400504 	addi	r17,r18,20
    ff80:	9c000504 	addi	r16,r19,20
    ff84:	9825883a 	mov	r18,r19
    ff88:	05000044 	movi	r20,1
    ff8c:	1027883a 	mov	r19,r2
    ff90:	003fa606 	br	fe2c <__alt_exception_stack_pointer+0xf800fe2c>

0000ff94 <__ulp>:
    ff94:	295ffc2c 	andhi	r5,r5,32752
    ff98:	00bf3034 	movhi	r2,64704
    ff9c:	2887883a 	add	r3,r5,r2
    ffa0:	00c0020e 	bge	zero,r3,ffac <__ulp+0x18>
    ffa4:	0005883a 	mov	r2,zero
    ffa8:	f800283a 	ret
    ffac:	00c7c83a 	sub	r3,zero,r3
    ffb0:	1807d53a 	srai	r3,r3,20
    ffb4:	008004c4 	movi	r2,19
    ffb8:	10c00b0e 	bge	r2,r3,ffe8 <__ulp+0x54>
    ffbc:	18bffb04 	addi	r2,r3,-20
    ffc0:	01000784 	movi	r4,30
    ffc4:	0007883a 	mov	r3,zero
    ffc8:	20800516 	blt	r4,r2,ffe0 <__ulp+0x4c>
    ffcc:	010007c4 	movi	r4,31
    ffd0:	2089c83a 	sub	r4,r4,r2
    ffd4:	00800044 	movi	r2,1
    ffd8:	1104983a 	sll	r2,r2,r4
    ffdc:	f800283a 	ret
    ffe0:	00800044 	movi	r2,1
    ffe4:	f800283a 	ret
    ffe8:	01400234 	movhi	r5,8
    ffec:	28c7d83a 	sra	r3,r5,r3
    fff0:	0005883a 	mov	r2,zero
    fff4:	f800283a 	ret

0000fff8 <__b2d>:
    fff8:	defffa04 	addi	sp,sp,-24
    fffc:	dc000015 	stw	r16,0(sp)
   10000:	24000417 	ldw	r16,16(r4)
   10004:	dc400115 	stw	r17,4(sp)
   10008:	24400504 	addi	r17,r4,20
   1000c:	8421883a 	add	r16,r16,r16
   10010:	8421883a 	add	r16,r16,r16
   10014:	8c21883a 	add	r16,r17,r16
   10018:	dc800215 	stw	r18,8(sp)
   1001c:	84bfff17 	ldw	r18,-4(r16)
   10020:	dd000415 	stw	r20,16(sp)
   10024:	dcc00315 	stw	r19,12(sp)
   10028:	9009883a 	mov	r4,r18
   1002c:	2829883a 	mov	r20,r5
   10030:	dfc00515 	stw	ra,20(sp)
   10034:	000f6d00 	call	f6d0 <__hi0bits>
   10038:	00c00804 	movi	r3,32
   1003c:	1889c83a 	sub	r4,r3,r2
   10040:	a1000015 	stw	r4,0(r20)
   10044:	01000284 	movi	r4,10
   10048:	84ffff04 	addi	r19,r16,-4
   1004c:	20801216 	blt	r4,r2,10098 <__b2d+0xa0>
   10050:	018002c4 	movi	r6,11
   10054:	308dc83a 	sub	r6,r6,r2
   10058:	9186d83a 	srl	r3,r18,r6
   1005c:	18cffc34 	orhi	r3,r3,16368
   10060:	8cc0212e 	bgeu	r17,r19,100e8 <__b2d+0xf0>
   10064:	813ffe17 	ldw	r4,-8(r16)
   10068:	218cd83a 	srl	r6,r4,r6
   1006c:	10800544 	addi	r2,r2,21
   10070:	9084983a 	sll	r2,r18,r2
   10074:	1184b03a 	or	r2,r2,r6
   10078:	dfc00517 	ldw	ra,20(sp)
   1007c:	dd000417 	ldw	r20,16(sp)
   10080:	dcc00317 	ldw	r19,12(sp)
   10084:	dc800217 	ldw	r18,8(sp)
   10088:	dc400117 	ldw	r17,4(sp)
   1008c:	dc000017 	ldw	r16,0(sp)
   10090:	dec00604 	addi	sp,sp,24
   10094:	f800283a 	ret
   10098:	8cc00f2e 	bgeu	r17,r19,100d8 <__b2d+0xe0>
   1009c:	117ffd44 	addi	r5,r2,-11
   100a0:	80bffe17 	ldw	r2,-8(r16)
   100a4:	28000e26 	beq	r5,zero,100e0 <__b2d+0xe8>
   100a8:	1949c83a 	sub	r4,r3,r5
   100ac:	9164983a 	sll	r18,r18,r5
   100b0:	1106d83a 	srl	r3,r2,r4
   100b4:	81bffe04 	addi	r6,r16,-8
   100b8:	948ffc34 	orhi	r18,r18,16368
   100bc:	90c6b03a 	or	r3,r18,r3
   100c0:	89800e2e 	bgeu	r17,r6,100fc <__b2d+0x104>
   100c4:	81bffd17 	ldw	r6,-12(r16)
   100c8:	1144983a 	sll	r2,r2,r5
   100cc:	310ad83a 	srl	r5,r6,r4
   100d0:	2884b03a 	or	r2,r5,r2
   100d4:	003fe806 	br	10078 <__alt_exception_stack_pointer+0xf8010078>
   100d8:	10bffd44 	addi	r2,r2,-11
   100dc:	1000041e 	bne	r2,zero,100f0 <__b2d+0xf8>
   100e0:	90cffc34 	orhi	r3,r18,16368
   100e4:	003fe406 	br	10078 <__alt_exception_stack_pointer+0xf8010078>
   100e8:	000d883a 	mov	r6,zero
   100ec:	003fdf06 	br	1006c <__alt_exception_stack_pointer+0xf801006c>
   100f0:	90a4983a 	sll	r18,r18,r2
   100f4:	0005883a 	mov	r2,zero
   100f8:	003ff906 	br	100e0 <__alt_exception_stack_pointer+0xf80100e0>
   100fc:	1144983a 	sll	r2,r2,r5
   10100:	003fdd06 	br	10078 <__alt_exception_stack_pointer+0xf8010078>

00010104 <__d2b>:
   10104:	defff804 	addi	sp,sp,-32
   10108:	dc000215 	stw	r16,8(sp)
   1010c:	3021883a 	mov	r16,r6
   10110:	dc400315 	stw	r17,12(sp)
   10114:	8022907a 	slli	r17,r16,1
   10118:	dd000615 	stw	r20,24(sp)
   1011c:	2829883a 	mov	r20,r5
   10120:	01400044 	movi	r5,1
   10124:	dcc00515 	stw	r19,20(sp)
   10128:	dc800415 	stw	r18,16(sp)
   1012c:	dfc00715 	stw	ra,28(sp)
   10130:	3825883a 	mov	r18,r7
   10134:	8822d57a 	srli	r17,r17,21
   10138:	000f3b40 	call	f3b4 <_Balloc>
   1013c:	1027883a 	mov	r19,r2
   10140:	00800434 	movhi	r2,16
   10144:	10bfffc4 	addi	r2,r2,-1
   10148:	808c703a 	and	r6,r16,r2
   1014c:	88000126 	beq	r17,zero,10154 <__d2b+0x50>
   10150:	31800434 	orhi	r6,r6,16
   10154:	d9800015 	stw	r6,0(sp)
   10158:	a0002426 	beq	r20,zero,101ec <__d2b+0xe8>
   1015c:	d9000104 	addi	r4,sp,4
   10160:	dd000115 	stw	r20,4(sp)
   10164:	000f7380 	call	f738 <__lo0bits>
   10168:	d8c00017 	ldw	r3,0(sp)
   1016c:	10002f1e 	bne	r2,zero,1022c <__d2b+0x128>
   10170:	d9000117 	ldw	r4,4(sp)
   10174:	99000515 	stw	r4,20(r19)
   10178:	1821003a 	cmpeq	r16,r3,zero
   1017c:	01000084 	movi	r4,2
   10180:	2421c83a 	sub	r16,r4,r16
   10184:	98c00615 	stw	r3,24(r19)
   10188:	9c000415 	stw	r16,16(r19)
   1018c:	88001f1e 	bne	r17,zero,1020c <__d2b+0x108>
   10190:	10bef384 	addi	r2,r2,-1074
   10194:	90800015 	stw	r2,0(r18)
   10198:	00900034 	movhi	r2,16384
   1019c:	10bfffc4 	addi	r2,r2,-1
   101a0:	8085883a 	add	r2,r16,r2
   101a4:	1085883a 	add	r2,r2,r2
   101a8:	1085883a 	add	r2,r2,r2
   101ac:	9885883a 	add	r2,r19,r2
   101b0:	11000517 	ldw	r4,20(r2)
   101b4:	8020917a 	slli	r16,r16,5
   101b8:	000f6d00 	call	f6d0 <__hi0bits>
   101bc:	d8c00817 	ldw	r3,32(sp)
   101c0:	8085c83a 	sub	r2,r16,r2
   101c4:	18800015 	stw	r2,0(r3)
   101c8:	9805883a 	mov	r2,r19
   101cc:	dfc00717 	ldw	ra,28(sp)
   101d0:	dd000617 	ldw	r20,24(sp)
   101d4:	dcc00517 	ldw	r19,20(sp)
   101d8:	dc800417 	ldw	r18,16(sp)
   101dc:	dc400317 	ldw	r17,12(sp)
   101e0:	dc000217 	ldw	r16,8(sp)
   101e4:	dec00804 	addi	sp,sp,32
   101e8:	f800283a 	ret
   101ec:	d809883a 	mov	r4,sp
   101f0:	000f7380 	call	f738 <__lo0bits>
   101f4:	d8c00017 	ldw	r3,0(sp)
   101f8:	04000044 	movi	r16,1
   101fc:	9c000415 	stw	r16,16(r19)
   10200:	98c00515 	stw	r3,20(r19)
   10204:	10800804 	addi	r2,r2,32
   10208:	883fe126 	beq	r17,zero,10190 <__alt_exception_stack_pointer+0xf8010190>
   1020c:	00c00d44 	movi	r3,53
   10210:	8c7ef344 	addi	r17,r17,-1075
   10214:	88a3883a 	add	r17,r17,r2
   10218:	1885c83a 	sub	r2,r3,r2
   1021c:	d8c00817 	ldw	r3,32(sp)
   10220:	94400015 	stw	r17,0(r18)
   10224:	18800015 	stw	r2,0(r3)
   10228:	003fe706 	br	101c8 <__alt_exception_stack_pointer+0xf80101c8>
   1022c:	01000804 	movi	r4,32
   10230:	2089c83a 	sub	r4,r4,r2
   10234:	1908983a 	sll	r4,r3,r4
   10238:	d9400117 	ldw	r5,4(sp)
   1023c:	1886d83a 	srl	r3,r3,r2
   10240:	2148b03a 	or	r4,r4,r5
   10244:	99000515 	stw	r4,20(r19)
   10248:	d8c00015 	stw	r3,0(sp)
   1024c:	003fca06 	br	10178 <__alt_exception_stack_pointer+0xf8010178>

00010250 <__ratio>:
   10250:	defff904 	addi	sp,sp,-28
   10254:	dc400315 	stw	r17,12(sp)
   10258:	2823883a 	mov	r17,r5
   1025c:	d9400104 	addi	r5,sp,4
   10260:	dfc00615 	stw	ra,24(sp)
   10264:	dcc00515 	stw	r19,20(sp)
   10268:	dc800415 	stw	r18,16(sp)
   1026c:	2027883a 	mov	r19,r4
   10270:	dc000215 	stw	r16,8(sp)
   10274:	000fff80 	call	fff8 <__b2d>
   10278:	d80b883a 	mov	r5,sp
   1027c:	8809883a 	mov	r4,r17
   10280:	1025883a 	mov	r18,r2
   10284:	1821883a 	mov	r16,r3
   10288:	000fff80 	call	fff8 <__b2d>
   1028c:	8a000417 	ldw	r8,16(r17)
   10290:	99000417 	ldw	r4,16(r19)
   10294:	d9400117 	ldw	r5,4(sp)
   10298:	2209c83a 	sub	r4,r4,r8
   1029c:	2010917a 	slli	r8,r4,5
   102a0:	d9000017 	ldw	r4,0(sp)
   102a4:	2909c83a 	sub	r4,r5,r4
   102a8:	4109883a 	add	r4,r8,r4
   102ac:	01000e0e 	bge	zero,r4,102e8 <__ratio+0x98>
   102b0:	2008953a 	slli	r4,r4,20
   102b4:	2421883a 	add	r16,r4,r16
   102b8:	100d883a 	mov	r6,r2
   102bc:	180f883a 	mov	r7,r3
   102c0:	9009883a 	mov	r4,r18
   102c4:	800b883a 	mov	r5,r16
   102c8:	00064580 	call	6458 <__divdf3>
   102cc:	dfc00617 	ldw	ra,24(sp)
   102d0:	dcc00517 	ldw	r19,20(sp)
   102d4:	dc800417 	ldw	r18,16(sp)
   102d8:	dc400317 	ldw	r17,12(sp)
   102dc:	dc000217 	ldw	r16,8(sp)
   102e0:	dec00704 	addi	sp,sp,28
   102e4:	f800283a 	ret
   102e8:	2008953a 	slli	r4,r4,20
   102ec:	1907c83a 	sub	r3,r3,r4
   102f0:	003ff106 	br	102b8 <__alt_exception_stack_pointer+0xf80102b8>

000102f4 <_mprec_log10>:
   102f4:	defffe04 	addi	sp,sp,-8
   102f8:	dc000015 	stw	r16,0(sp)
   102fc:	dfc00115 	stw	ra,4(sp)
   10300:	008005c4 	movi	r2,23
   10304:	2021883a 	mov	r16,r4
   10308:	11000d0e 	bge	r2,r4,10340 <_mprec_log10+0x4c>
   1030c:	0005883a 	mov	r2,zero
   10310:	00cffc34 	movhi	r3,16368
   10314:	843fffc4 	addi	r16,r16,-1
   10318:	000d883a 	mov	r6,zero
   1031c:	01d00934 	movhi	r7,16420
   10320:	1009883a 	mov	r4,r2
   10324:	180b883a 	mov	r5,r3
   10328:	0006f8c0 	call	6f8c <__muldf3>
   1032c:	803ff91e 	bne	r16,zero,10314 <__alt_exception_stack_pointer+0xf8010314>
   10330:	dfc00117 	ldw	ra,4(sp)
   10334:	dc000017 	ldw	r16,0(sp)
   10338:	dec00204 	addi	sp,sp,8
   1033c:	f800283a 	ret
   10340:	202090fa 	slli	r16,r4,3
   10344:	008000b4 	movhi	r2,2
   10348:	10a00f04 	addi	r2,r2,-32708
   1034c:	1421883a 	add	r16,r2,r16
   10350:	80800017 	ldw	r2,0(r16)
   10354:	80c00117 	ldw	r3,4(r16)
   10358:	dfc00117 	ldw	ra,4(sp)
   1035c:	dc000017 	ldw	r16,0(sp)
   10360:	dec00204 	addi	sp,sp,8
   10364:	f800283a 	ret

00010368 <__copybits>:
   10368:	297fffc4 	addi	r5,r5,-1
   1036c:	280fd17a 	srai	r7,r5,5
   10370:	30c00417 	ldw	r3,16(r6)
   10374:	30800504 	addi	r2,r6,20
   10378:	39c00044 	addi	r7,r7,1
   1037c:	18c7883a 	add	r3,r3,r3
   10380:	39cf883a 	add	r7,r7,r7
   10384:	18c7883a 	add	r3,r3,r3
   10388:	39cf883a 	add	r7,r7,r7
   1038c:	10c7883a 	add	r3,r2,r3
   10390:	21cf883a 	add	r7,r4,r7
   10394:	10c00d2e 	bgeu	r2,r3,103cc <__copybits+0x64>
   10398:	200b883a 	mov	r5,r4
   1039c:	12000017 	ldw	r8,0(r2)
   103a0:	29400104 	addi	r5,r5,4
   103a4:	10800104 	addi	r2,r2,4
   103a8:	2a3fff15 	stw	r8,-4(r5)
   103ac:	10fffb36 	bltu	r2,r3,1039c <__alt_exception_stack_pointer+0xf801039c>
   103b0:	1985c83a 	sub	r2,r3,r6
   103b4:	10bffac4 	addi	r2,r2,-21
   103b8:	1004d0ba 	srli	r2,r2,2
   103bc:	10800044 	addi	r2,r2,1
   103c0:	1085883a 	add	r2,r2,r2
   103c4:	1085883a 	add	r2,r2,r2
   103c8:	2089883a 	add	r4,r4,r2
   103cc:	21c0032e 	bgeu	r4,r7,103dc <__copybits+0x74>
   103d0:	20000015 	stw	zero,0(r4)
   103d4:	21000104 	addi	r4,r4,4
   103d8:	21fffd36 	bltu	r4,r7,103d0 <__alt_exception_stack_pointer+0xf80103d0>
   103dc:	f800283a 	ret

000103e0 <__any_on>:
   103e0:	20c00417 	ldw	r3,16(r4)
   103e4:	2805d17a 	srai	r2,r5,5
   103e8:	21000504 	addi	r4,r4,20
   103ec:	18800d0e 	bge	r3,r2,10424 <__any_on+0x44>
   103f0:	18c7883a 	add	r3,r3,r3
   103f4:	18c7883a 	add	r3,r3,r3
   103f8:	20c7883a 	add	r3,r4,r3
   103fc:	20c0192e 	bgeu	r4,r3,10464 <__any_on+0x84>
   10400:	18bfff17 	ldw	r2,-4(r3)
   10404:	18ffff04 	addi	r3,r3,-4
   10408:	1000041e 	bne	r2,zero,1041c <__any_on+0x3c>
   1040c:	20c0142e 	bgeu	r4,r3,10460 <__any_on+0x80>
   10410:	18ffff04 	addi	r3,r3,-4
   10414:	19400017 	ldw	r5,0(r3)
   10418:	283ffc26 	beq	r5,zero,1040c <__alt_exception_stack_pointer+0xf801040c>
   1041c:	00800044 	movi	r2,1
   10420:	f800283a 	ret
   10424:	10c00a0e 	bge	r2,r3,10450 <__any_on+0x70>
   10428:	1085883a 	add	r2,r2,r2
   1042c:	1085883a 	add	r2,r2,r2
   10430:	294007cc 	andi	r5,r5,31
   10434:	2087883a 	add	r3,r4,r2
   10438:	283ff026 	beq	r5,zero,103fc <__alt_exception_stack_pointer+0xf80103fc>
   1043c:	19800017 	ldw	r6,0(r3)
   10440:	3144d83a 	srl	r2,r6,r5
   10444:	114a983a 	sll	r5,r2,r5
   10448:	317ff41e 	bne	r6,r5,1041c <__alt_exception_stack_pointer+0xf801041c>
   1044c:	003feb06 	br	103fc <__alt_exception_stack_pointer+0xf80103fc>
   10450:	1085883a 	add	r2,r2,r2
   10454:	1085883a 	add	r2,r2,r2
   10458:	2087883a 	add	r3,r4,r2
   1045c:	003fe706 	br	103fc <__alt_exception_stack_pointer+0xf80103fc>
   10460:	f800283a 	ret
   10464:	0005883a 	mov	r2,zero
   10468:	f800283a 	ret

0001046c <_realloc_r>:
   1046c:	defff604 	addi	sp,sp,-40
   10470:	dc800215 	stw	r18,8(sp)
   10474:	dfc00915 	stw	ra,36(sp)
   10478:	df000815 	stw	fp,32(sp)
   1047c:	ddc00715 	stw	r23,28(sp)
   10480:	dd800615 	stw	r22,24(sp)
   10484:	dd400515 	stw	r21,20(sp)
   10488:	dd000415 	stw	r20,16(sp)
   1048c:	dcc00315 	stw	r19,12(sp)
   10490:	dc400115 	stw	r17,4(sp)
   10494:	dc000015 	stw	r16,0(sp)
   10498:	3025883a 	mov	r18,r6
   1049c:	2800b726 	beq	r5,zero,1077c <_realloc_r+0x310>
   104a0:	282b883a 	mov	r21,r5
   104a4:	2029883a 	mov	r20,r4
   104a8:	00141300 	call	14130 <__malloc_lock>
   104ac:	a8bfff17 	ldw	r2,-4(r21)
   104b0:	043fff04 	movi	r16,-4
   104b4:	90c002c4 	addi	r3,r18,11
   104b8:	01000584 	movi	r4,22
   104bc:	acfffe04 	addi	r19,r21,-8
   104c0:	1420703a 	and	r16,r2,r16
   104c4:	20c0332e 	bgeu	r4,r3,10594 <_realloc_r+0x128>
   104c8:	047ffe04 	movi	r17,-8
   104cc:	1c62703a 	and	r17,r3,r17
   104d0:	8807883a 	mov	r3,r17
   104d4:	88005816 	blt	r17,zero,10638 <_realloc_r+0x1cc>
   104d8:	8c805736 	bltu	r17,r18,10638 <_realloc_r+0x1cc>
   104dc:	80c0300e 	bge	r16,r3,105a0 <_realloc_r+0x134>
   104e0:	070000b4 	movhi	fp,2
   104e4:	e7232804 	addi	fp,fp,-29536
   104e8:	e1c00217 	ldw	r7,8(fp)
   104ec:	9c09883a 	add	r4,r19,r16
   104f0:	22000117 	ldw	r8,4(r4)
   104f4:	21c06326 	beq	r4,r7,10684 <_realloc_r+0x218>
   104f8:	017fff84 	movi	r5,-2
   104fc:	414a703a 	and	r5,r8,r5
   10500:	214b883a 	add	r5,r4,r5
   10504:	29800117 	ldw	r6,4(r5)
   10508:	3180004c 	andi	r6,r6,1
   1050c:	30003f26 	beq	r6,zero,1060c <_realloc_r+0x1a0>
   10510:	1080004c 	andi	r2,r2,1
   10514:	10008326 	beq	r2,zero,10724 <_realloc_r+0x2b8>
   10518:	900b883a 	mov	r5,r18
   1051c:	a009883a 	mov	r4,r20
   10520:	00088600 	call	8860 <_malloc_r>
   10524:	1025883a 	mov	r18,r2
   10528:	10011e26 	beq	r2,zero,109a4 <_realloc_r+0x538>
   1052c:	a93fff17 	ldw	r4,-4(r21)
   10530:	10fffe04 	addi	r3,r2,-8
   10534:	00bfff84 	movi	r2,-2
   10538:	2084703a 	and	r2,r4,r2
   1053c:	9885883a 	add	r2,r19,r2
   10540:	1880ee26 	beq	r3,r2,108fc <_realloc_r+0x490>
   10544:	81bfff04 	addi	r6,r16,-4
   10548:	00800904 	movi	r2,36
   1054c:	1180b836 	bltu	r2,r6,10830 <_realloc_r+0x3c4>
   10550:	00c004c4 	movi	r3,19
   10554:	19809636 	bltu	r3,r6,107b0 <_realloc_r+0x344>
   10558:	9005883a 	mov	r2,r18
   1055c:	a807883a 	mov	r3,r21
   10560:	19000017 	ldw	r4,0(r3)
   10564:	11000015 	stw	r4,0(r2)
   10568:	19000117 	ldw	r4,4(r3)
   1056c:	11000115 	stw	r4,4(r2)
   10570:	18c00217 	ldw	r3,8(r3)
   10574:	10c00215 	stw	r3,8(r2)
   10578:	a80b883a 	mov	r5,r21
   1057c:	a009883a 	mov	r4,r20
   10580:	000e30c0 	call	e30c <_free_r>
   10584:	a009883a 	mov	r4,r20
   10588:	00141540 	call	14154 <__malloc_unlock>
   1058c:	9005883a 	mov	r2,r18
   10590:	00001206 	br	105dc <_realloc_r+0x170>
   10594:	00c00404 	movi	r3,16
   10598:	1823883a 	mov	r17,r3
   1059c:	003fce06 	br	104d8 <__alt_exception_stack_pointer+0xf80104d8>
   105a0:	a825883a 	mov	r18,r21
   105a4:	8445c83a 	sub	r2,r16,r17
   105a8:	00c003c4 	movi	r3,15
   105ac:	18802636 	bltu	r3,r2,10648 <_realloc_r+0x1dc>
   105b0:	99800117 	ldw	r6,4(r19)
   105b4:	9c07883a 	add	r3,r19,r16
   105b8:	3180004c 	andi	r6,r6,1
   105bc:	3420b03a 	or	r16,r6,r16
   105c0:	9c000115 	stw	r16,4(r19)
   105c4:	18800117 	ldw	r2,4(r3)
   105c8:	10800054 	ori	r2,r2,1
   105cc:	18800115 	stw	r2,4(r3)
   105d0:	a009883a 	mov	r4,r20
   105d4:	00141540 	call	14154 <__malloc_unlock>
   105d8:	9005883a 	mov	r2,r18
   105dc:	dfc00917 	ldw	ra,36(sp)
   105e0:	df000817 	ldw	fp,32(sp)
   105e4:	ddc00717 	ldw	r23,28(sp)
   105e8:	dd800617 	ldw	r22,24(sp)
   105ec:	dd400517 	ldw	r21,20(sp)
   105f0:	dd000417 	ldw	r20,16(sp)
   105f4:	dcc00317 	ldw	r19,12(sp)
   105f8:	dc800217 	ldw	r18,8(sp)
   105fc:	dc400117 	ldw	r17,4(sp)
   10600:	dc000017 	ldw	r16,0(sp)
   10604:	dec00a04 	addi	sp,sp,40
   10608:	f800283a 	ret
   1060c:	017fff04 	movi	r5,-4
   10610:	414a703a 	and	r5,r8,r5
   10614:	814d883a 	add	r6,r16,r5
   10618:	30c01f16 	blt	r6,r3,10698 <_realloc_r+0x22c>
   1061c:	20800317 	ldw	r2,12(r4)
   10620:	20c00217 	ldw	r3,8(r4)
   10624:	a825883a 	mov	r18,r21
   10628:	3021883a 	mov	r16,r6
   1062c:	18800315 	stw	r2,12(r3)
   10630:	10c00215 	stw	r3,8(r2)
   10634:	003fdb06 	br	105a4 <__alt_exception_stack_pointer+0xf80105a4>
   10638:	00800304 	movi	r2,12
   1063c:	a0800015 	stw	r2,0(r20)
   10640:	0005883a 	mov	r2,zero
   10644:	003fe506 	br	105dc <__alt_exception_stack_pointer+0xf80105dc>
   10648:	98c00117 	ldw	r3,4(r19)
   1064c:	9c4b883a 	add	r5,r19,r17
   10650:	11000054 	ori	r4,r2,1
   10654:	18c0004c 	andi	r3,r3,1
   10658:	1c62b03a 	or	r17,r3,r17
   1065c:	9c400115 	stw	r17,4(r19)
   10660:	29000115 	stw	r4,4(r5)
   10664:	2885883a 	add	r2,r5,r2
   10668:	10c00117 	ldw	r3,4(r2)
   1066c:	29400204 	addi	r5,r5,8
   10670:	a009883a 	mov	r4,r20
   10674:	18c00054 	ori	r3,r3,1
   10678:	10c00115 	stw	r3,4(r2)
   1067c:	000e30c0 	call	e30c <_free_r>
   10680:	003fd306 	br	105d0 <__alt_exception_stack_pointer+0xf80105d0>
   10684:	017fff04 	movi	r5,-4
   10688:	414a703a 	and	r5,r8,r5
   1068c:	89800404 	addi	r6,r17,16
   10690:	8151883a 	add	r8,r16,r5
   10694:	4180590e 	bge	r8,r6,107fc <_realloc_r+0x390>
   10698:	1080004c 	andi	r2,r2,1
   1069c:	103f9e1e 	bne	r2,zero,10518 <__alt_exception_stack_pointer+0xf8010518>
   106a0:	adbffe17 	ldw	r22,-8(r21)
   106a4:	00bfff04 	movi	r2,-4
   106a8:	9dadc83a 	sub	r22,r19,r22
   106ac:	b1800117 	ldw	r6,4(r22)
   106b0:	3084703a 	and	r2,r6,r2
   106b4:	20002026 	beq	r4,zero,10738 <_realloc_r+0x2cc>
   106b8:	80af883a 	add	r23,r16,r2
   106bc:	b96f883a 	add	r23,r23,r5
   106c0:	21c05f26 	beq	r4,r7,10840 <_realloc_r+0x3d4>
   106c4:	b8c01c16 	blt	r23,r3,10738 <_realloc_r+0x2cc>
   106c8:	20800317 	ldw	r2,12(r4)
   106cc:	20c00217 	ldw	r3,8(r4)
   106d0:	81bfff04 	addi	r6,r16,-4
   106d4:	01000904 	movi	r4,36
   106d8:	18800315 	stw	r2,12(r3)
   106dc:	10c00215 	stw	r3,8(r2)
   106e0:	b0c00217 	ldw	r3,8(r22)
   106e4:	b0800317 	ldw	r2,12(r22)
   106e8:	b4800204 	addi	r18,r22,8
   106ec:	18800315 	stw	r2,12(r3)
   106f0:	10c00215 	stw	r3,8(r2)
   106f4:	21801b36 	bltu	r4,r6,10764 <_realloc_r+0x2f8>
   106f8:	008004c4 	movi	r2,19
   106fc:	1180352e 	bgeu	r2,r6,107d4 <_realloc_r+0x368>
   10700:	a8800017 	ldw	r2,0(r21)
   10704:	b0800215 	stw	r2,8(r22)
   10708:	a8800117 	ldw	r2,4(r21)
   1070c:	b0800315 	stw	r2,12(r22)
   10710:	008006c4 	movi	r2,27
   10714:	11807f36 	bltu	r2,r6,10914 <_realloc_r+0x4a8>
   10718:	b0800404 	addi	r2,r22,16
   1071c:	ad400204 	addi	r21,r21,8
   10720:	00002d06 	br	107d8 <_realloc_r+0x36c>
   10724:	adbffe17 	ldw	r22,-8(r21)
   10728:	00bfff04 	movi	r2,-4
   1072c:	9dadc83a 	sub	r22,r19,r22
   10730:	b1000117 	ldw	r4,4(r22)
   10734:	2084703a 	and	r2,r4,r2
   10738:	b03f7726 	beq	r22,zero,10518 <__alt_exception_stack_pointer+0xf8010518>
   1073c:	80af883a 	add	r23,r16,r2
   10740:	b8ff7516 	blt	r23,r3,10518 <__alt_exception_stack_pointer+0xf8010518>
   10744:	b0800317 	ldw	r2,12(r22)
   10748:	b0c00217 	ldw	r3,8(r22)
   1074c:	81bfff04 	addi	r6,r16,-4
   10750:	01000904 	movi	r4,36
   10754:	18800315 	stw	r2,12(r3)
   10758:	10c00215 	stw	r3,8(r2)
   1075c:	b4800204 	addi	r18,r22,8
   10760:	21bfe52e 	bgeu	r4,r6,106f8 <__alt_exception_stack_pointer+0xf80106f8>
   10764:	a80b883a 	mov	r5,r21
   10768:	9009883a 	mov	r4,r18
   1076c:	000f1300 	call	f130 <memmove>
   10770:	b821883a 	mov	r16,r23
   10774:	b027883a 	mov	r19,r22
   10778:	003f8a06 	br	105a4 <__alt_exception_stack_pointer+0xf80105a4>
   1077c:	300b883a 	mov	r5,r6
   10780:	dfc00917 	ldw	ra,36(sp)
   10784:	df000817 	ldw	fp,32(sp)
   10788:	ddc00717 	ldw	r23,28(sp)
   1078c:	dd800617 	ldw	r22,24(sp)
   10790:	dd400517 	ldw	r21,20(sp)
   10794:	dd000417 	ldw	r20,16(sp)
   10798:	dcc00317 	ldw	r19,12(sp)
   1079c:	dc800217 	ldw	r18,8(sp)
   107a0:	dc400117 	ldw	r17,4(sp)
   107a4:	dc000017 	ldw	r16,0(sp)
   107a8:	dec00a04 	addi	sp,sp,40
   107ac:	00088601 	jmpi	8860 <_malloc_r>
   107b0:	a8c00017 	ldw	r3,0(r21)
   107b4:	90c00015 	stw	r3,0(r18)
   107b8:	a8c00117 	ldw	r3,4(r21)
   107bc:	90c00115 	stw	r3,4(r18)
   107c0:	00c006c4 	movi	r3,27
   107c4:	19804536 	bltu	r3,r6,108dc <_realloc_r+0x470>
   107c8:	90800204 	addi	r2,r18,8
   107cc:	a8c00204 	addi	r3,r21,8
   107d0:	003f6306 	br	10560 <__alt_exception_stack_pointer+0xf8010560>
   107d4:	9005883a 	mov	r2,r18
   107d8:	a8c00017 	ldw	r3,0(r21)
   107dc:	b821883a 	mov	r16,r23
   107e0:	b027883a 	mov	r19,r22
   107e4:	10c00015 	stw	r3,0(r2)
   107e8:	a8c00117 	ldw	r3,4(r21)
   107ec:	10c00115 	stw	r3,4(r2)
   107f0:	a8c00217 	ldw	r3,8(r21)
   107f4:	10c00215 	stw	r3,8(r2)
   107f8:	003f6a06 	br	105a4 <__alt_exception_stack_pointer+0xf80105a4>
   107fc:	9c67883a 	add	r19,r19,r17
   10800:	4445c83a 	sub	r2,r8,r17
   10804:	e4c00215 	stw	r19,8(fp)
   10808:	10800054 	ori	r2,r2,1
   1080c:	98800115 	stw	r2,4(r19)
   10810:	a8bfff17 	ldw	r2,-4(r21)
   10814:	a009883a 	mov	r4,r20
   10818:	1080004c 	andi	r2,r2,1
   1081c:	1462b03a 	or	r17,r2,r17
   10820:	ac7fff15 	stw	r17,-4(r21)
   10824:	00141540 	call	14154 <__malloc_unlock>
   10828:	a805883a 	mov	r2,r21
   1082c:	003f6b06 	br	105dc <__alt_exception_stack_pointer+0xf80105dc>
   10830:	a80b883a 	mov	r5,r21
   10834:	9009883a 	mov	r4,r18
   10838:	000f1300 	call	f130 <memmove>
   1083c:	003f4e06 	br	10578 <__alt_exception_stack_pointer+0xf8010578>
   10840:	89000404 	addi	r4,r17,16
   10844:	b93fbc16 	blt	r23,r4,10738 <__alt_exception_stack_pointer+0xf8010738>
   10848:	b0800317 	ldw	r2,12(r22)
   1084c:	b0c00217 	ldw	r3,8(r22)
   10850:	81bfff04 	addi	r6,r16,-4
   10854:	01000904 	movi	r4,36
   10858:	18800315 	stw	r2,12(r3)
   1085c:	10c00215 	stw	r3,8(r2)
   10860:	b4800204 	addi	r18,r22,8
   10864:	21804336 	bltu	r4,r6,10974 <_realloc_r+0x508>
   10868:	008004c4 	movi	r2,19
   1086c:	11803f2e 	bgeu	r2,r6,1096c <_realloc_r+0x500>
   10870:	a8800017 	ldw	r2,0(r21)
   10874:	b0800215 	stw	r2,8(r22)
   10878:	a8800117 	ldw	r2,4(r21)
   1087c:	b0800315 	stw	r2,12(r22)
   10880:	008006c4 	movi	r2,27
   10884:	11803f36 	bltu	r2,r6,10984 <_realloc_r+0x518>
   10888:	b0800404 	addi	r2,r22,16
   1088c:	ad400204 	addi	r21,r21,8
   10890:	a8c00017 	ldw	r3,0(r21)
   10894:	10c00015 	stw	r3,0(r2)
   10898:	a8c00117 	ldw	r3,4(r21)
   1089c:	10c00115 	stw	r3,4(r2)
   108a0:	a8c00217 	ldw	r3,8(r21)
   108a4:	10c00215 	stw	r3,8(r2)
   108a8:	b447883a 	add	r3,r22,r17
   108ac:	bc45c83a 	sub	r2,r23,r17
   108b0:	e0c00215 	stw	r3,8(fp)
   108b4:	10800054 	ori	r2,r2,1
   108b8:	18800115 	stw	r2,4(r3)
   108bc:	b0800117 	ldw	r2,4(r22)
   108c0:	a009883a 	mov	r4,r20
   108c4:	1080004c 	andi	r2,r2,1
   108c8:	1462b03a 	or	r17,r2,r17
   108cc:	b4400115 	stw	r17,4(r22)
   108d0:	00141540 	call	14154 <__malloc_unlock>
   108d4:	9005883a 	mov	r2,r18
   108d8:	003f4006 	br	105dc <__alt_exception_stack_pointer+0xf80105dc>
   108dc:	a8c00217 	ldw	r3,8(r21)
   108e0:	90c00215 	stw	r3,8(r18)
   108e4:	a8c00317 	ldw	r3,12(r21)
   108e8:	90c00315 	stw	r3,12(r18)
   108ec:	30801126 	beq	r6,r2,10934 <_realloc_r+0x4c8>
   108f0:	90800404 	addi	r2,r18,16
   108f4:	a8c00404 	addi	r3,r21,16
   108f8:	003f1906 	br	10560 <__alt_exception_stack_pointer+0xf8010560>
   108fc:	90ffff17 	ldw	r3,-4(r18)
   10900:	00bfff04 	movi	r2,-4
   10904:	a825883a 	mov	r18,r21
   10908:	1884703a 	and	r2,r3,r2
   1090c:	80a1883a 	add	r16,r16,r2
   10910:	003f2406 	br	105a4 <__alt_exception_stack_pointer+0xf80105a4>
   10914:	a8800217 	ldw	r2,8(r21)
   10918:	b0800415 	stw	r2,16(r22)
   1091c:	a8800317 	ldw	r2,12(r21)
   10920:	b0800515 	stw	r2,20(r22)
   10924:	31000a26 	beq	r6,r4,10950 <_realloc_r+0x4e4>
   10928:	b0800604 	addi	r2,r22,24
   1092c:	ad400404 	addi	r21,r21,16
   10930:	003fa906 	br	107d8 <__alt_exception_stack_pointer+0xf80107d8>
   10934:	a9000417 	ldw	r4,16(r21)
   10938:	90800604 	addi	r2,r18,24
   1093c:	a8c00604 	addi	r3,r21,24
   10940:	91000415 	stw	r4,16(r18)
   10944:	a9000517 	ldw	r4,20(r21)
   10948:	91000515 	stw	r4,20(r18)
   1094c:	003f0406 	br	10560 <__alt_exception_stack_pointer+0xf8010560>
   10950:	a8c00417 	ldw	r3,16(r21)
   10954:	ad400604 	addi	r21,r21,24
   10958:	b0800804 	addi	r2,r22,32
   1095c:	b0c00615 	stw	r3,24(r22)
   10960:	a8ffff17 	ldw	r3,-4(r21)
   10964:	b0c00715 	stw	r3,28(r22)
   10968:	003f9b06 	br	107d8 <__alt_exception_stack_pointer+0xf80107d8>
   1096c:	9005883a 	mov	r2,r18
   10970:	003fc706 	br	10890 <__alt_exception_stack_pointer+0xf8010890>
   10974:	a80b883a 	mov	r5,r21
   10978:	9009883a 	mov	r4,r18
   1097c:	000f1300 	call	f130 <memmove>
   10980:	003fc906 	br	108a8 <__alt_exception_stack_pointer+0xf80108a8>
   10984:	a8800217 	ldw	r2,8(r21)
   10988:	b0800415 	stw	r2,16(r22)
   1098c:	a8800317 	ldw	r2,12(r21)
   10990:	b0800515 	stw	r2,20(r22)
   10994:	31000726 	beq	r6,r4,109b4 <_realloc_r+0x548>
   10998:	b0800604 	addi	r2,r22,24
   1099c:	ad400404 	addi	r21,r21,16
   109a0:	003fbb06 	br	10890 <__alt_exception_stack_pointer+0xf8010890>
   109a4:	a009883a 	mov	r4,r20
   109a8:	00141540 	call	14154 <__malloc_unlock>
   109ac:	0005883a 	mov	r2,zero
   109b0:	003f0a06 	br	105dc <__alt_exception_stack_pointer+0xf80105dc>
   109b4:	a8c00417 	ldw	r3,16(r21)
   109b8:	ad400604 	addi	r21,r21,24
   109bc:	b0800804 	addi	r2,r22,32
   109c0:	b0c00615 	stw	r3,24(r22)
   109c4:	a8ffff17 	ldw	r3,-4(r21)
   109c8:	b0c00715 	stw	r3,28(r22)
   109cc:	003fb006 	br	10890 <__alt_exception_stack_pointer+0xf8010890>

000109d0 <__fpclassifyd>:
   109d0:	00a00034 	movhi	r2,32768
   109d4:	10bfffc4 	addi	r2,r2,-1
   109d8:	2884703a 	and	r2,r5,r2
   109dc:	10000726 	beq	r2,zero,109fc <__fpclassifyd+0x2c>
   109e0:	00fffc34 	movhi	r3,65520
   109e4:	019ff834 	movhi	r6,32736
   109e8:	28c7883a 	add	r3,r5,r3
   109ec:	31bfffc4 	addi	r6,r6,-1
   109f0:	30c00536 	bltu	r6,r3,10a08 <__fpclassifyd+0x38>
   109f4:	00800104 	movi	r2,4
   109f8:	f800283a 	ret
   109fc:	2000021e 	bne	r4,zero,10a08 <__fpclassifyd+0x38>
   10a00:	00800084 	movi	r2,2
   10a04:	f800283a 	ret
   10a08:	00dffc34 	movhi	r3,32752
   10a0c:	019ff834 	movhi	r6,32736
   10a10:	28cb883a 	add	r5,r5,r3
   10a14:	31bfffc4 	addi	r6,r6,-1
   10a18:	317ff62e 	bgeu	r6,r5,109f4 <__alt_exception_stack_pointer+0xf80109f4>
   10a1c:	01400434 	movhi	r5,16
   10a20:	297fffc4 	addi	r5,r5,-1
   10a24:	28800236 	bltu	r5,r2,10a30 <__fpclassifyd+0x60>
   10a28:	008000c4 	movi	r2,3
   10a2c:	f800283a 	ret
   10a30:	10c00226 	beq	r2,r3,10a3c <__fpclassifyd+0x6c>
   10a34:	0005883a 	mov	r2,zero
   10a38:	f800283a 	ret
   10a3c:	2005003a 	cmpeq	r2,r4,zero
   10a40:	f800283a 	ret

00010a44 <__sread>:
   10a44:	defffe04 	addi	sp,sp,-8
   10a48:	dc000015 	stw	r16,0(sp)
   10a4c:	2821883a 	mov	r16,r5
   10a50:	2940038f 	ldh	r5,14(r5)
   10a54:	dfc00115 	stw	ra,4(sp)
   10a58:	00129900 	call	12990 <_read_r>
   10a5c:	10000716 	blt	r2,zero,10a7c <__sread+0x38>
   10a60:	80c01417 	ldw	r3,80(r16)
   10a64:	1887883a 	add	r3,r3,r2
   10a68:	80c01415 	stw	r3,80(r16)
   10a6c:	dfc00117 	ldw	ra,4(sp)
   10a70:	dc000017 	ldw	r16,0(sp)
   10a74:	dec00204 	addi	sp,sp,8
   10a78:	f800283a 	ret
   10a7c:	80c0030b 	ldhu	r3,12(r16)
   10a80:	18fbffcc 	andi	r3,r3,61439
   10a84:	80c0030d 	sth	r3,12(r16)
   10a88:	dfc00117 	ldw	ra,4(sp)
   10a8c:	dc000017 	ldw	r16,0(sp)
   10a90:	dec00204 	addi	sp,sp,8
   10a94:	f800283a 	ret

00010a98 <__seofread>:
   10a98:	0005883a 	mov	r2,zero
   10a9c:	f800283a 	ret

00010aa0 <__swrite>:
   10aa0:	2880030b 	ldhu	r2,12(r5)
   10aa4:	defffb04 	addi	sp,sp,-20
   10aa8:	dcc00315 	stw	r19,12(sp)
   10aac:	dc800215 	stw	r18,8(sp)
   10ab0:	dc400115 	stw	r17,4(sp)
   10ab4:	dc000015 	stw	r16,0(sp)
   10ab8:	dfc00415 	stw	ra,16(sp)
   10abc:	10c0400c 	andi	r3,r2,256
   10ac0:	2821883a 	mov	r16,r5
   10ac4:	2023883a 	mov	r17,r4
   10ac8:	3025883a 	mov	r18,r6
   10acc:	3827883a 	mov	r19,r7
   10ad0:	18000526 	beq	r3,zero,10ae8 <__swrite+0x48>
   10ad4:	2940038f 	ldh	r5,14(r5)
   10ad8:	01c00084 	movi	r7,2
   10adc:	000d883a 	mov	r6,zero
   10ae0:	00129300 	call	12930 <_lseek_r>
   10ae4:	8080030b 	ldhu	r2,12(r16)
   10ae8:	8140038f 	ldh	r5,14(r16)
   10aec:	10bbffcc 	andi	r2,r2,61439
   10af0:	980f883a 	mov	r7,r19
   10af4:	900d883a 	mov	r6,r18
   10af8:	8809883a 	mov	r4,r17
   10afc:	8080030d 	sth	r2,12(r16)
   10b00:	dfc00417 	ldw	ra,16(sp)
   10b04:	dcc00317 	ldw	r19,12(sp)
   10b08:	dc800217 	ldw	r18,8(sp)
   10b0c:	dc400117 	ldw	r17,4(sp)
   10b10:	dc000017 	ldw	r16,0(sp)
   10b14:	dec00504 	addi	sp,sp,20
   10b18:	00123e41 	jmpi	123e4 <_write_r>

00010b1c <__sseek>:
   10b1c:	defffe04 	addi	sp,sp,-8
   10b20:	dc000015 	stw	r16,0(sp)
   10b24:	2821883a 	mov	r16,r5
   10b28:	2940038f 	ldh	r5,14(r5)
   10b2c:	dfc00115 	stw	ra,4(sp)
   10b30:	00129300 	call	12930 <_lseek_r>
   10b34:	00ffffc4 	movi	r3,-1
   10b38:	10c00826 	beq	r2,r3,10b5c <__sseek+0x40>
   10b3c:	80c0030b 	ldhu	r3,12(r16)
   10b40:	80801415 	stw	r2,80(r16)
   10b44:	18c40014 	ori	r3,r3,4096
   10b48:	80c0030d 	sth	r3,12(r16)
   10b4c:	dfc00117 	ldw	ra,4(sp)
   10b50:	dc000017 	ldw	r16,0(sp)
   10b54:	dec00204 	addi	sp,sp,8
   10b58:	f800283a 	ret
   10b5c:	80c0030b 	ldhu	r3,12(r16)
   10b60:	18fbffcc 	andi	r3,r3,61439
   10b64:	80c0030d 	sth	r3,12(r16)
   10b68:	dfc00117 	ldw	ra,4(sp)
   10b6c:	dc000017 	ldw	r16,0(sp)
   10b70:	dec00204 	addi	sp,sp,8
   10b74:	f800283a 	ret

00010b78 <__sclose>:
   10b78:	2940038f 	ldh	r5,14(r5)
   10b7c:	00124441 	jmpi	12444 <_close_r>

00010b80 <strcmp>:
   10b80:	2144b03a 	or	r2,r4,r5
   10b84:	108000cc 	andi	r2,r2,3
   10b88:	1000171e 	bne	r2,zero,10be8 <strcmp+0x68>
   10b8c:	20800017 	ldw	r2,0(r4)
   10b90:	28c00017 	ldw	r3,0(r5)
   10b94:	10c0141e 	bne	r2,r3,10be8 <strcmp+0x68>
   10b98:	027fbff4 	movhi	r9,65279
   10b9c:	4a7fbfc4 	addi	r9,r9,-257
   10ba0:	0086303a 	nor	r3,zero,r2
   10ba4:	02202074 	movhi	r8,32897
   10ba8:	1245883a 	add	r2,r2,r9
   10bac:	42202004 	addi	r8,r8,-32640
   10bb0:	10c4703a 	and	r2,r2,r3
   10bb4:	1204703a 	and	r2,r2,r8
   10bb8:	10000226 	beq	r2,zero,10bc4 <strcmp+0x44>
   10bbc:	00002306 	br	10c4c <strcmp+0xcc>
   10bc0:	1000221e 	bne	r2,zero,10c4c <strcmp+0xcc>
   10bc4:	21000104 	addi	r4,r4,4
   10bc8:	20c00017 	ldw	r3,0(r4)
   10bcc:	29400104 	addi	r5,r5,4
   10bd0:	29800017 	ldw	r6,0(r5)
   10bd4:	1a4f883a 	add	r7,r3,r9
   10bd8:	00c4303a 	nor	r2,zero,r3
   10bdc:	3884703a 	and	r2,r7,r2
   10be0:	1204703a 	and	r2,r2,r8
   10be4:	19bff626 	beq	r3,r6,10bc0 <__alt_exception_stack_pointer+0xf8010bc0>
   10be8:	20800003 	ldbu	r2,0(r4)
   10bec:	10c03fcc 	andi	r3,r2,255
   10bf0:	18c0201c 	xori	r3,r3,128
   10bf4:	18ffe004 	addi	r3,r3,-128
   10bf8:	18000c26 	beq	r3,zero,10c2c <strcmp+0xac>
   10bfc:	29800007 	ldb	r6,0(r5)
   10c00:	19800326 	beq	r3,r6,10c10 <strcmp+0x90>
   10c04:	00001306 	br	10c54 <strcmp+0xd4>
   10c08:	29800007 	ldb	r6,0(r5)
   10c0c:	11800b1e 	bne	r2,r6,10c3c <strcmp+0xbc>
   10c10:	21000044 	addi	r4,r4,1
   10c14:	20c00003 	ldbu	r3,0(r4)
   10c18:	29400044 	addi	r5,r5,1
   10c1c:	18803fcc 	andi	r2,r3,255
   10c20:	1080201c 	xori	r2,r2,128
   10c24:	10bfe004 	addi	r2,r2,-128
   10c28:	103ff71e 	bne	r2,zero,10c08 <__alt_exception_stack_pointer+0xf8010c08>
   10c2c:	0007883a 	mov	r3,zero
   10c30:	28800003 	ldbu	r2,0(r5)
   10c34:	1885c83a 	sub	r2,r3,r2
   10c38:	f800283a 	ret
   10c3c:	28800003 	ldbu	r2,0(r5)
   10c40:	18c03fcc 	andi	r3,r3,255
   10c44:	1885c83a 	sub	r2,r3,r2
   10c48:	f800283a 	ret
   10c4c:	0005883a 	mov	r2,zero
   10c50:	f800283a 	ret
   10c54:	10c03fcc 	andi	r3,r2,255
   10c58:	003ff506 	br	10c30 <__alt_exception_stack_pointer+0xf8010c30>

00010c5c <strcpy>:
   10c5c:	2906b03a 	or	r3,r5,r4
   10c60:	18c000cc 	andi	r3,r3,3
   10c64:	2005883a 	mov	r2,r4
   10c68:	1800161e 	bne	r3,zero,10cc4 <strcpy+0x68>
   10c6c:	29c00017 	ldw	r7,0(r5)
   10c70:	02ffbff4 	movhi	r11,65279
   10c74:	5affbfc4 	addi	r11,r11,-257
   10c78:	02a02074 	movhi	r10,32897
   10c7c:	01c6303a 	nor	r3,zero,r7
   10c80:	3ac9883a 	add	r4,r7,r11
   10c84:	52a02004 	addi	r10,r10,-32640
   10c88:	20c6703a 	and	r3,r4,r3
   10c8c:	1a86703a 	and	r3,r3,r10
   10c90:	18000c1e 	bne	r3,zero,10cc4 <strcpy+0x68>
   10c94:	1011883a 	mov	r8,r2
   10c98:	41c00015 	stw	r7,0(r8)
   10c9c:	29400104 	addi	r5,r5,4
   10ca0:	29c00017 	ldw	r7,0(r5)
   10ca4:	41800104 	addi	r6,r8,4
   10ca8:	3011883a 	mov	r8,r6
   10cac:	3ad3883a 	add	r9,r7,r11
   10cb0:	01c6303a 	nor	r3,zero,r7
   10cb4:	48c6703a 	and	r3,r9,r3
   10cb8:	1a86703a 	and	r3,r3,r10
   10cbc:	183ff626 	beq	r3,zero,10c98 <__alt_exception_stack_pointer+0xf8010c98>
   10cc0:	00000106 	br	10cc8 <strcpy+0x6c>
   10cc4:	100d883a 	mov	r6,r2
   10cc8:	28c00003 	ldbu	r3,0(r5)
   10ccc:	31800044 	addi	r6,r6,1
   10cd0:	29400044 	addi	r5,r5,1
   10cd4:	30ffffc5 	stb	r3,-1(r6)
   10cd8:	18c03fcc 	andi	r3,r3,255
   10cdc:	18c0201c 	xori	r3,r3,128
   10ce0:	18ffe004 	addi	r3,r3,-128
   10ce4:	183ff81e 	bne	r3,zero,10cc8 <__alt_exception_stack_pointer+0xf8010cc8>
   10ce8:	f800283a 	ret

00010cec <__sprint_r.part.0>:
   10cec:	28801917 	ldw	r2,100(r5)
   10cf0:	defff604 	addi	sp,sp,-40
   10cf4:	dd400515 	stw	r21,20(sp)
   10cf8:	dfc00915 	stw	ra,36(sp)
   10cfc:	df000815 	stw	fp,32(sp)
   10d00:	ddc00715 	stw	r23,28(sp)
   10d04:	dd800615 	stw	r22,24(sp)
   10d08:	dd000415 	stw	r20,16(sp)
   10d0c:	dcc00315 	stw	r19,12(sp)
   10d10:	dc800215 	stw	r18,8(sp)
   10d14:	dc400115 	stw	r17,4(sp)
   10d18:	dc000015 	stw	r16,0(sp)
   10d1c:	1088000c 	andi	r2,r2,8192
   10d20:	302b883a 	mov	r21,r6
   10d24:	10002e26 	beq	r2,zero,10de0 <__sprint_r.part.0+0xf4>
   10d28:	30800217 	ldw	r2,8(r6)
   10d2c:	35800017 	ldw	r22,0(r6)
   10d30:	10002926 	beq	r2,zero,10dd8 <__sprint_r.part.0+0xec>
   10d34:	2827883a 	mov	r19,r5
   10d38:	2029883a 	mov	r20,r4
   10d3c:	b5c00104 	addi	r23,r22,4
   10d40:	04bfffc4 	movi	r18,-1
   10d44:	bc400017 	ldw	r17,0(r23)
   10d48:	b4000017 	ldw	r16,0(r22)
   10d4c:	0039883a 	mov	fp,zero
   10d50:	8822d0ba 	srli	r17,r17,2
   10d54:	8800031e 	bne	r17,zero,10d64 <__sprint_r.part.0+0x78>
   10d58:	00001806 	br	10dbc <__sprint_r.part.0+0xd0>
   10d5c:	84000104 	addi	r16,r16,4
   10d60:	8f001526 	beq	r17,fp,10db8 <__sprint_r.part.0+0xcc>
   10d64:	81400017 	ldw	r5,0(r16)
   10d68:	980d883a 	mov	r6,r19
   10d6c:	a009883a 	mov	r4,r20
   10d70:	00127dc0 	call	127dc <_fputwc_r>
   10d74:	e7000044 	addi	fp,fp,1
   10d78:	14bff81e 	bne	r2,r18,10d5c <__alt_exception_stack_pointer+0xf8010d5c>
   10d7c:	9005883a 	mov	r2,r18
   10d80:	a8000215 	stw	zero,8(r21)
   10d84:	a8000115 	stw	zero,4(r21)
   10d88:	dfc00917 	ldw	ra,36(sp)
   10d8c:	df000817 	ldw	fp,32(sp)
   10d90:	ddc00717 	ldw	r23,28(sp)
   10d94:	dd800617 	ldw	r22,24(sp)
   10d98:	dd400517 	ldw	r21,20(sp)
   10d9c:	dd000417 	ldw	r20,16(sp)
   10da0:	dcc00317 	ldw	r19,12(sp)
   10da4:	dc800217 	ldw	r18,8(sp)
   10da8:	dc400117 	ldw	r17,4(sp)
   10dac:	dc000017 	ldw	r16,0(sp)
   10db0:	dec00a04 	addi	sp,sp,40
   10db4:	f800283a 	ret
   10db8:	a8800217 	ldw	r2,8(r21)
   10dbc:	8c63883a 	add	r17,r17,r17
   10dc0:	8c63883a 	add	r17,r17,r17
   10dc4:	1445c83a 	sub	r2,r2,r17
   10dc8:	a8800215 	stw	r2,8(r21)
   10dcc:	b5800204 	addi	r22,r22,8
   10dd0:	bdc00204 	addi	r23,r23,8
   10dd4:	103fdb1e 	bne	r2,zero,10d44 <__alt_exception_stack_pointer+0xf8010d44>
   10dd8:	0005883a 	mov	r2,zero
   10ddc:	003fe806 	br	10d80 <__alt_exception_stack_pointer+0xf8010d80>
   10de0:	000e61c0 	call	e61c <__sfvwrite_r>
   10de4:	003fe606 	br	10d80 <__alt_exception_stack_pointer+0xf8010d80>

00010de8 <__sprint_r>:
   10de8:	30c00217 	ldw	r3,8(r6)
   10dec:	18000126 	beq	r3,zero,10df4 <__sprint_r+0xc>
   10df0:	0010cec1 	jmpi	10cec <__sprint_r.part.0>
   10df4:	30000115 	stw	zero,4(r6)
   10df8:	0005883a 	mov	r2,zero
   10dfc:	f800283a 	ret

00010e00 <___vfiprintf_internal_r>:
   10e00:	deffca04 	addi	sp,sp,-216
   10e04:	dd403115 	stw	r21,196(sp)
   10e08:	dfc03515 	stw	ra,212(sp)
   10e0c:	df003415 	stw	fp,208(sp)
   10e10:	ddc03315 	stw	r23,204(sp)
   10e14:	dd803215 	stw	r22,200(sp)
   10e18:	dd003015 	stw	r20,192(sp)
   10e1c:	dcc02f15 	stw	r19,188(sp)
   10e20:	dc802e15 	stw	r18,184(sp)
   10e24:	dc402d15 	stw	r17,180(sp)
   10e28:	dc002c15 	stw	r16,176(sp)
   10e2c:	d9002115 	stw	r4,132(sp)
   10e30:	d9402015 	stw	r5,128(sp)
   10e34:	d9c02215 	stw	r7,136(sp)
   10e38:	302b883a 	mov	r21,r6
   10e3c:	20000226 	beq	r4,zero,10e48 <___vfiprintf_internal_r+0x48>
   10e40:	20800e17 	ldw	r2,56(r4)
   10e44:	1000cf26 	beq	r2,zero,11184 <___vfiprintf_internal_r+0x384>
   10e48:	d8c02017 	ldw	r3,128(sp)
   10e4c:	1880030b 	ldhu	r2,12(r3)
   10e50:	10c8000c 	andi	r3,r2,8192
   10e54:	1800071e 	bne	r3,zero,10e74 <___vfiprintf_internal_r+0x74>
   10e58:	d9402017 	ldw	r5,128(sp)
   10e5c:	00f7ffc4 	movi	r3,-8193
   10e60:	10880014 	ori	r2,r2,8192
   10e64:	29001917 	ldw	r4,100(r5)
   10e68:	2880030d 	sth	r2,12(r5)
   10e6c:	20c6703a 	and	r3,r4,r3
   10e70:	28c01915 	stw	r3,100(r5)
   10e74:	10c0020c 	andi	r3,r2,8
   10e78:	1800a526 	beq	r3,zero,11110 <___vfiprintf_internal_r+0x310>
   10e7c:	d9002017 	ldw	r4,128(sp)
   10e80:	20c00417 	ldw	r3,16(r4)
   10e84:	1800a226 	beq	r3,zero,11110 <___vfiprintf_internal_r+0x310>
   10e88:	1080068c 	andi	r2,r2,26
   10e8c:	00c00284 	movi	r3,10
   10e90:	10c0a826 	beq	r2,r3,11134 <___vfiprintf_internal_r+0x334>
   10e94:	d9001a04 	addi	r4,sp,104
   10e98:	d94019c4 	addi	r5,sp,103
   10e9c:	048000b4 	movhi	r18,2
   10ea0:	2145c83a 	sub	r2,r4,r5
   10ea4:	94a04104 	addi	r18,r18,-32508
   10ea8:	d9001e15 	stw	r4,120(sp)
   10eac:	d9401f15 	stw	r5,124(sp)
   10eb0:	dec01a15 	stw	sp,104(sp)
   10eb4:	d8001c15 	stw	zero,112(sp)
   10eb8:	d8001b15 	stw	zero,108(sp)
   10ebc:	d811883a 	mov	r8,sp
   10ec0:	d8002615 	stw	zero,152(sp)
   10ec4:	d8002415 	stw	zero,144(sp)
   10ec8:	d8802815 	stw	r2,160(sp)
   10ecc:	a82d883a 	mov	r22,r21
   10ed0:	b0800007 	ldb	r2,0(r22)
   10ed4:	10040d26 	beq	r2,zero,11f0c <___vfiprintf_internal_r+0x110c>
   10ed8:	00c00944 	movi	r3,37
   10edc:	b029883a 	mov	r20,r22
   10ee0:	10c0021e 	bne	r2,r3,10eec <___vfiprintf_internal_r+0xec>
   10ee4:	00001606 	br	10f40 <___vfiprintf_internal_r+0x140>
   10ee8:	10c00326 	beq	r2,r3,10ef8 <___vfiprintf_internal_r+0xf8>
   10eec:	a5000044 	addi	r20,r20,1
   10ef0:	a0800007 	ldb	r2,0(r20)
   10ef4:	103ffc1e 	bne	r2,zero,10ee8 <__alt_exception_stack_pointer+0xf8010ee8>
   10ef8:	a5a1c83a 	sub	r16,r20,r22
   10efc:	80001026 	beq	r16,zero,10f40 <___vfiprintf_internal_r+0x140>
   10f00:	d8c01c17 	ldw	r3,112(sp)
   10f04:	d8801b17 	ldw	r2,108(sp)
   10f08:	45800015 	stw	r22,0(r8)
   10f0c:	80c7883a 	add	r3,r16,r3
   10f10:	10800044 	addi	r2,r2,1
   10f14:	44000115 	stw	r16,4(r8)
   10f18:	d8c01c15 	stw	r3,112(sp)
   10f1c:	d8801b15 	stw	r2,108(sp)
   10f20:	010001c4 	movi	r4,7
   10f24:	2080750e 	bge	r4,r2,110fc <___vfiprintf_internal_r+0x2fc>
   10f28:	1803951e 	bne	r3,zero,11d80 <___vfiprintf_internal_r+0xf80>
   10f2c:	d8c02417 	ldw	r3,144(sp)
   10f30:	d8001b15 	stw	zero,108(sp)
   10f34:	d811883a 	mov	r8,sp
   10f38:	1c07883a 	add	r3,r3,r16
   10f3c:	d8c02415 	stw	r3,144(sp)
   10f40:	a0800007 	ldb	r2,0(r20)
   10f44:	1002e026 	beq	r2,zero,11ac8 <___vfiprintf_internal_r+0xcc8>
   10f48:	a5800044 	addi	r22,r20,1
   10f4c:	a0c00047 	ldb	r3,1(r20)
   10f50:	d8001d85 	stb	zero,118(sp)
   10f54:	0027883a 	mov	r19,zero
   10f58:	d8002305 	stb	zero,140(sp)
   10f5c:	043fffc4 	movi	r16,-1
   10f60:	d8002515 	stw	zero,148(sp)
   10f64:	0023883a 	mov	r17,zero
   10f68:	05001604 	movi	r20,88
   10f6c:	05400244 	movi	r21,9
   10f70:	402f883a 	mov	r23,r8
   10f74:	b5800044 	addi	r22,r22,1
   10f78:	18bff804 	addi	r2,r3,-32
   10f7c:	a0827736 	bltu	r20,r2,1195c <___vfiprintf_internal_r+0xb5c>
   10f80:	100490ba 	slli	r2,r2,2
   10f84:	01000074 	movhi	r4,1
   10f88:	2103e604 	addi	r4,r4,3992
   10f8c:	1105883a 	add	r2,r2,r4
   10f90:	10800017 	ldw	r2,0(r2)
   10f94:	1000683a 	jmp	r2
   10f98:	0001165c 	xori	zero,zero,1113
   10f9c:	0001195c 	xori	zero,zero,1125
   10fa0:	0001195c 	xori	zero,zero,1125
   10fa4:	00011678 	rdprs	zero,zero,1113
   10fa8:	0001195c 	xori	zero,zero,1125
   10fac:	0001195c 	xori	zero,zero,1125
   10fb0:	0001195c 	xori	zero,zero,1125
   10fb4:	0001195c 	xori	zero,zero,1125
   10fb8:	0001195c 	xori	zero,zero,1125
   10fbc:	0001195c 	xori	zero,zero,1125
   10fc0:	00011880 	call	1188 <init_keyboard+0x518>
   10fc4:	000118a4 	muli	zero,zero,1122
   10fc8:	0001195c 	xori	zero,zero,1125
   10fcc:	0001119c 	xori	zero,zero,1094
   10fd0:	000118b8 	rdprs	zero,zero,1122
   10fd4:	0001195c 	xori	zero,zero,1125
   10fd8:	00011684 	movi	zero,1114
   10fdc:	00011690 	cmplti	zero,zero,1114
   10fe0:	00011690 	cmplti	zero,zero,1114
   10fe4:	00011690 	cmplti	zero,zero,1114
   10fe8:	00011690 	cmplti	zero,zero,1114
   10fec:	00011690 	cmplti	zero,zero,1114
   10ff0:	00011690 	cmplti	zero,zero,1114
   10ff4:	00011690 	cmplti	zero,zero,1114
   10ff8:	00011690 	cmplti	zero,zero,1114
   10ffc:	00011690 	cmplti	zero,zero,1114
   11000:	0001195c 	xori	zero,zero,1125
   11004:	0001195c 	xori	zero,zero,1125
   11008:	0001195c 	xori	zero,zero,1125
   1100c:	0001195c 	xori	zero,zero,1125
   11010:	0001195c 	xori	zero,zero,1125
   11014:	0001195c 	xori	zero,zero,1125
   11018:	0001195c 	xori	zero,zero,1125
   1101c:	0001195c 	xori	zero,zero,1125
   11020:	0001195c 	xori	zero,zero,1125
   11024:	0001195c 	xori	zero,zero,1125
   11028:	000116d0 	cmplti	zero,zero,1115
   1102c:	0001195c 	xori	zero,zero,1125
   11030:	0001195c 	xori	zero,zero,1125
   11034:	0001195c 	xori	zero,zero,1125
   11038:	0001195c 	xori	zero,zero,1125
   1103c:	0001195c 	xori	zero,zero,1125
   11040:	0001195c 	xori	zero,zero,1125
   11044:	0001195c 	xori	zero,zero,1125
   11048:	0001195c 	xori	zero,zero,1125
   1104c:	0001195c 	xori	zero,zero,1125
   11050:	0001195c 	xori	zero,zero,1125
   11054:	0001170c 	andi	zero,zero,1116
   11058:	0001195c 	xori	zero,zero,1125
   1105c:	0001195c 	xori	zero,zero,1125
   11060:	0001195c 	xori	zero,zero,1125
   11064:	0001195c 	xori	zero,zero,1125
   11068:	0001195c 	xori	zero,zero,1125
   1106c:	00011768 	cmpgeui	zero,zero,1117
   11070:	0001195c 	xori	zero,zero,1125
   11074:	0001195c 	xori	zero,zero,1125
   11078:	000117dc 	xori	zero,zero,1119
   1107c:	0001195c 	xori	zero,zero,1125
   11080:	0001195c 	xori	zero,zero,1125
   11084:	0001195c 	xori	zero,zero,1125
   11088:	0001195c 	xori	zero,zero,1125
   1108c:	0001195c 	xori	zero,zero,1125
   11090:	0001195c 	xori	zero,zero,1125
   11094:	0001195c 	xori	zero,zero,1125
   11098:	0001195c 	xori	zero,zero,1125
   1109c:	0001195c 	xori	zero,zero,1125
   110a0:	0001195c 	xori	zero,zero,1125
   110a4:	00011584 	movi	zero,1110
   110a8:	000115b4 	movhi	zero,1110
   110ac:	0001195c 	xori	zero,zero,1125
   110b0:	0001195c 	xori	zero,zero,1125
   110b4:	0001195c 	xori	zero,zero,1125
   110b8:	00011904 	movi	zero,1124
   110bc:	000115b4 	movhi	zero,1110
   110c0:	0001195c 	xori	zero,zero,1125
   110c4:	0001195c 	xori	zero,zero,1125
   110c8:	0001145c 	xori	zero,zero,1105
   110cc:	0001195c 	xori	zero,zero,1125
   110d0:	00011470 	cmpltui	zero,zero,1105
   110d4:	000114a8 	cmpgeui	zero,zero,1106
   110d8:	000111a8 	cmpgeui	zero,zero,1094
   110dc:	00011450 	cmplti	zero,zero,1105
   110e0:	0001195c 	xori	zero,zero,1125
   110e4:	0001181c 	xori	zero,zero,1120
   110e8:	0001195c 	xori	zero,zero,1125
   110ec:	00011868 	cmpgeui	zero,zero,1121
   110f0:	0001195c 	xori	zero,zero,1125
   110f4:	0001195c 	xori	zero,zero,1125
   110f8:	0001152c 	andhi	zero,zero,1108
   110fc:	42000204 	addi	r8,r8,8
   11100:	d8c02417 	ldw	r3,144(sp)
   11104:	1c07883a 	add	r3,r3,r16
   11108:	d8c02415 	stw	r3,144(sp)
   1110c:	003f8c06 	br	10f40 <__alt_exception_stack_pointer+0xf8010f40>
   11110:	d9402017 	ldw	r5,128(sp)
   11114:	d9002117 	ldw	r4,132(sp)
   11118:	000b6540 	call	b654 <__swsetup_r>
   1111c:	1003c11e 	bne	r2,zero,12024 <___vfiprintf_internal_r+0x1224>
   11120:	d9402017 	ldw	r5,128(sp)
   11124:	00c00284 	movi	r3,10
   11128:	2880030b 	ldhu	r2,12(r5)
   1112c:	1080068c 	andi	r2,r2,26
   11130:	10ff581e 	bne	r2,r3,10e94 <__alt_exception_stack_pointer+0xf8010e94>
   11134:	d8c02017 	ldw	r3,128(sp)
   11138:	1880038f 	ldh	r2,14(r3)
   1113c:	103f5516 	blt	r2,zero,10e94 <__alt_exception_stack_pointer+0xf8010e94>
   11140:	d9c02217 	ldw	r7,136(sp)
   11144:	d9002117 	ldw	r4,132(sp)
   11148:	a80d883a 	mov	r6,r21
   1114c:	180b883a 	mov	r5,r3
   11150:	00123280 	call	12328 <__sbprintf>
   11154:	dfc03517 	ldw	ra,212(sp)
   11158:	df003417 	ldw	fp,208(sp)
   1115c:	ddc03317 	ldw	r23,204(sp)
   11160:	dd803217 	ldw	r22,200(sp)
   11164:	dd403117 	ldw	r21,196(sp)
   11168:	dd003017 	ldw	r20,192(sp)
   1116c:	dcc02f17 	ldw	r19,188(sp)
   11170:	dc802e17 	ldw	r18,184(sp)
   11174:	dc402d17 	ldw	r17,180(sp)
   11178:	dc002c17 	ldw	r16,176(sp)
   1117c:	dec03604 	addi	sp,sp,216
   11180:	f800283a 	ret
   11184:	000e1980 	call	e198 <__sinit>
   11188:	003f2f06 	br	10e48 <__alt_exception_stack_pointer+0xf8010e48>
   1118c:	d8c02517 	ldw	r3,148(sp)
   11190:	d8802215 	stw	r2,136(sp)
   11194:	00c7c83a 	sub	r3,zero,r3
   11198:	d8c02515 	stw	r3,148(sp)
   1119c:	8c400114 	ori	r17,r17,4
   111a0:	b0c00007 	ldb	r3,0(r22)
   111a4:	003f7306 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   111a8:	00800c04 	movi	r2,48
   111ac:	d9402217 	ldw	r5,136(sp)
   111b0:	d8801d05 	stb	r2,116(sp)
   111b4:	00801e04 	movi	r2,120
   111b8:	d8801d45 	stb	r2,117(sp)
   111bc:	d8001d85 	stb	zero,118(sp)
   111c0:	b811883a 	mov	r8,r23
   111c4:	28c00104 	addi	r3,r5,4
   111c8:	2cc00017 	ldw	r19,0(r5)
   111cc:	0029883a 	mov	r20,zero
   111d0:	88800094 	ori	r2,r17,2
   111d4:	80032516 	blt	r16,zero,11e6c <___vfiprintf_internal_r+0x106c>
   111d8:	00bfdfc4 	movi	r2,-129
   111dc:	88a2703a 	and	r17,r17,r2
   111e0:	d8c02215 	stw	r3,136(sp)
   111e4:	8c400094 	ori	r17,r17,2
   111e8:	98032a1e 	bne	r19,zero,11e94 <___vfiprintf_internal_r+0x1094>
   111ec:	00800074 	movhi	r2,1
   111f0:	109fe104 	addi	r2,r2,32644
   111f4:	d8802615 	stw	r2,152(sp)
   111f8:	002b883a 	mov	r21,zero
   111fc:	8001741e 	bne	r16,zero,117d0 <___vfiprintf_internal_r+0x9d0>
   11200:	0021883a 	mov	r16,zero
   11204:	0029883a 	mov	r20,zero
   11208:	ddc01a04 	addi	r23,sp,104
   1120c:	8027883a 	mov	r19,r16
   11210:	8500010e 	bge	r16,r20,11218 <___vfiprintf_internal_r+0x418>
   11214:	a027883a 	mov	r19,r20
   11218:	ad403fcc 	andi	r21,r21,255
   1121c:	ad40201c 	xori	r21,r21,128
   11220:	ad7fe004 	addi	r21,r21,-128
   11224:	a8000126 	beq	r21,zero,1122c <___vfiprintf_internal_r+0x42c>
   11228:	9cc00044 	addi	r19,r19,1
   1122c:	89c0008c 	andi	r7,r17,2
   11230:	38000126 	beq	r7,zero,11238 <___vfiprintf_internal_r+0x438>
   11234:	9cc00084 	addi	r19,r19,2
   11238:	88c0210c 	andi	r3,r17,132
   1123c:	1801dd1e 	bne	r3,zero,119b4 <___vfiprintf_internal_r+0xbb4>
   11240:	d9402517 	ldw	r5,148(sp)
   11244:	2cebc83a 	sub	r21,r5,r19
   11248:	0541da0e 	bge	zero,r21,119b4 <___vfiprintf_internal_r+0xbb4>
   1124c:	07000404 	movi	fp,16
   11250:	d8801c17 	ldw	r2,112(sp)
   11254:	e543be0e 	bge	fp,r21,12150 <___vfiprintf_internal_r+0x1350>
   11258:	014000b4 	movhi	r5,2
   1125c:	29604504 	addi	r5,r5,-32492
   11260:	dc002715 	stw	r16,156(sp)
   11264:	d9801b17 	ldw	r6,108(sp)
   11268:	a821883a 	mov	r16,r21
   1126c:	d9402315 	stw	r5,140(sp)
   11270:	028001c4 	movi	r10,7
   11274:	d9c02915 	stw	r7,164(sp)
   11278:	182b883a 	mov	r21,r3
   1127c:	00000506 	br	11294 <___vfiprintf_internal_r+0x494>
   11280:	31000084 	addi	r4,r6,2
   11284:	42000204 	addi	r8,r8,8
   11288:	180d883a 	mov	r6,r3
   1128c:	843ffc04 	addi	r16,r16,-16
   11290:	e4000f0e 	bge	fp,r16,112d0 <___vfiprintf_internal_r+0x4d0>
   11294:	010000b4 	movhi	r4,2
   11298:	10800404 	addi	r2,r2,16
   1129c:	30c00044 	addi	r3,r6,1
   112a0:	21204504 	addi	r4,r4,-32492
   112a4:	41000015 	stw	r4,0(r8)
   112a8:	47000115 	stw	fp,4(r8)
   112ac:	d8801c15 	stw	r2,112(sp)
   112b0:	d8c01b15 	stw	r3,108(sp)
   112b4:	50fff20e 	bge	r10,r3,11280 <__alt_exception_stack_pointer+0xf8011280>
   112b8:	1001b21e 	bne	r2,zero,11984 <___vfiprintf_internal_r+0xb84>
   112bc:	843ffc04 	addi	r16,r16,-16
   112c0:	000d883a 	mov	r6,zero
   112c4:	01000044 	movi	r4,1
   112c8:	d811883a 	mov	r8,sp
   112cc:	e43ff116 	blt	fp,r16,11294 <__alt_exception_stack_pointer+0xf8011294>
   112d0:	a807883a 	mov	r3,r21
   112d4:	d9c02917 	ldw	r7,164(sp)
   112d8:	802b883a 	mov	r21,r16
   112dc:	dc002717 	ldw	r16,156(sp)
   112e0:	d9402317 	ldw	r5,140(sp)
   112e4:	a885883a 	add	r2,r21,r2
   112e8:	45400115 	stw	r21,4(r8)
   112ec:	41400015 	stw	r5,0(r8)
   112f0:	d8801c15 	stw	r2,112(sp)
   112f4:	d9001b15 	stw	r4,108(sp)
   112f8:	014001c4 	movi	r5,7
   112fc:	29026216 	blt	r5,r4,11c88 <___vfiprintf_internal_r+0xe88>
   11300:	d9801d87 	ldb	r6,118(sp)
   11304:	42000204 	addi	r8,r8,8
   11308:	21400044 	addi	r5,r4,1
   1130c:	3001ae1e 	bne	r6,zero,119c8 <___vfiprintf_internal_r+0xbc8>
   11310:	3801bb26 	beq	r7,zero,11a00 <___vfiprintf_internal_r+0xc00>
   11314:	d9001d04 	addi	r4,sp,116
   11318:	10800084 	addi	r2,r2,2
   1131c:	41000015 	stw	r4,0(r8)
   11320:	01000084 	movi	r4,2
   11324:	41000115 	stw	r4,4(r8)
   11328:	d8801c15 	stw	r2,112(sp)
   1132c:	d9401b15 	stw	r5,108(sp)
   11330:	010001c4 	movi	r4,7
   11334:	2142680e 	bge	r4,r5,11cd8 <___vfiprintf_internal_r+0xed8>
   11338:	1002b11e 	bne	r2,zero,11e00 <___vfiprintf_internal_r+0x1000>
   1133c:	01802004 	movi	r6,128
   11340:	01400044 	movi	r5,1
   11344:	0009883a 	mov	r4,zero
   11348:	d811883a 	mov	r8,sp
   1134c:	1981ae1e 	bne	r3,r6,11a08 <___vfiprintf_internal_r+0xc08>
   11350:	d8c02517 	ldw	r3,148(sp)
   11354:	1cf9c83a 	sub	fp,r3,r19
   11358:	0701ab0e 	bge	zero,fp,11a08 <___vfiprintf_internal_r+0xc08>
   1135c:	05400404 	movi	r21,16
   11360:	af03a90e 	bge	r21,fp,12208 <___vfiprintf_internal_r+0x1408>
   11364:	014000b4 	movhi	r5,2
   11368:	29604104 	addi	r5,r5,-32508
   1136c:	d9402315 	stw	r5,140(sp)
   11370:	01c001c4 	movi	r7,7
   11374:	00000506 	br	1138c <___vfiprintf_internal_r+0x58c>
   11378:	21800084 	addi	r6,r4,2
   1137c:	42000204 	addi	r8,r8,8
   11380:	1809883a 	mov	r4,r3
   11384:	e73ffc04 	addi	fp,fp,-16
   11388:	af000d0e 	bge	r21,fp,113c0 <___vfiprintf_internal_r+0x5c0>
   1138c:	10800404 	addi	r2,r2,16
   11390:	20c00044 	addi	r3,r4,1
   11394:	44800015 	stw	r18,0(r8)
   11398:	45400115 	stw	r21,4(r8)
   1139c:	d8801c15 	stw	r2,112(sp)
   113a0:	d8c01b15 	stw	r3,108(sp)
   113a4:	38fff40e 	bge	r7,r3,11378 <__alt_exception_stack_pointer+0xf8011378>
   113a8:	10022b1e 	bne	r2,zero,11c58 <___vfiprintf_internal_r+0xe58>
   113ac:	e73ffc04 	addi	fp,fp,-16
   113b0:	01800044 	movi	r6,1
   113b4:	0009883a 	mov	r4,zero
   113b8:	d811883a 	mov	r8,sp
   113bc:	af3ff316 	blt	r21,fp,1138c <__alt_exception_stack_pointer+0xf801138c>
   113c0:	d8c02317 	ldw	r3,140(sp)
   113c4:	1705883a 	add	r2,r2,fp
   113c8:	47000115 	stw	fp,4(r8)
   113cc:	40c00015 	stw	r3,0(r8)
   113d0:	d8801c15 	stw	r2,112(sp)
   113d4:	d9801b15 	stw	r6,108(sp)
   113d8:	00c001c4 	movi	r3,7
   113dc:	19829416 	blt	r3,r6,11e30 <___vfiprintf_internal_r+0x1030>
   113e0:	8521c83a 	sub	r16,r16,r20
   113e4:	42000204 	addi	r8,r8,8
   113e8:	31400044 	addi	r5,r6,1
   113ec:	3009883a 	mov	r4,r6
   113f0:	04018716 	blt	zero,r16,11a10 <___vfiprintf_internal_r+0xc10>
   113f4:	a085883a 	add	r2,r20,r2
   113f8:	45c00015 	stw	r23,0(r8)
   113fc:	45000115 	stw	r20,4(r8)
   11400:	d8801c15 	stw	r2,112(sp)
   11404:	d9401b15 	stw	r5,108(sp)
   11408:	00c001c4 	movi	r3,7
   1140c:	1941c20e 	bge	r3,r5,11b18 <___vfiprintf_internal_r+0xd18>
   11410:	1002531e 	bne	r2,zero,11d60 <___vfiprintf_internal_r+0xf60>
   11414:	d8001b15 	stw	zero,108(sp)
   11418:	8c40010c 	andi	r17,r17,4
   1141c:	88023226 	beq	r17,zero,11ce8 <___vfiprintf_internal_r+0xee8>
   11420:	d9002517 	ldw	r4,148(sp)
   11424:	24e3c83a 	sub	r17,r4,r19
   11428:	04432916 	blt	zero,r17,120d0 <___vfiprintf_internal_r+0x12d0>
   1142c:	d8802517 	ldw	r2,148(sp)
   11430:	14c0010e 	bge	r2,r19,11438 <___vfiprintf_internal_r+0x638>
   11434:	9805883a 	mov	r2,r19
   11438:	d8c02417 	ldw	r3,144(sp)
   1143c:	1887883a 	add	r3,r3,r2
   11440:	d8c02415 	stw	r3,144(sp)
   11444:	d8001b15 	stw	zero,108(sp)
   11448:	d811883a 	mov	r8,sp
   1144c:	003ea006 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   11450:	8c400814 	ori	r17,r17,32
   11454:	b0c00007 	ldb	r3,0(r22)
   11458:	003ec606 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   1145c:	b0c00007 	ldb	r3,0(r22)
   11460:	00801b04 	movi	r2,108
   11464:	18832026 	beq	r3,r2,120e8 <___vfiprintf_internal_r+0x12e8>
   11468:	8c400414 	ori	r17,r17,16
   1146c:	003ec106 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11470:	9cc03fcc 	andi	r19,r19,255
   11474:	b811883a 	mov	r8,r23
   11478:	9803981e 	bne	r19,zero,122dc <___vfiprintf_internal_r+0x14dc>
   1147c:	8880080c 	andi	r2,r17,32
   11480:	1002be26 	beq	r2,zero,11f7c <___vfiprintf_internal_r+0x117c>
   11484:	d9002217 	ldw	r4,136(sp)
   11488:	d9402417 	ldw	r5,144(sp)
   1148c:	20800017 	ldw	r2,0(r4)
   11490:	2807d7fa 	srai	r3,r5,31
   11494:	21000104 	addi	r4,r4,4
   11498:	d9002215 	stw	r4,136(sp)
   1149c:	11400015 	stw	r5,0(r2)
   114a0:	10c00115 	stw	r3,4(r2)
   114a4:	003e8a06 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   114a8:	9cc03fcc 	andi	r19,r19,255
   114ac:	b811883a 	mov	r8,r23
   114b0:	9803871e 	bne	r19,zero,122d0 <___vfiprintf_internal_r+0x14d0>
   114b4:	8880080c 	andi	r2,r17,32
   114b8:	10009a26 	beq	r2,zero,11724 <___vfiprintf_internal_r+0x924>
   114bc:	d9002217 	ldw	r4,136(sp)
   114c0:	d8001d85 	stb	zero,118(sp)
   114c4:	20800204 	addi	r2,r4,8
   114c8:	24c00017 	ldw	r19,0(r4)
   114cc:	25000117 	ldw	r20,4(r4)
   114d0:	8002a416 	blt	r16,zero,11f64 <___vfiprintf_internal_r+0x1164>
   114d4:	013fdfc4 	movi	r4,-129
   114d8:	9d06b03a 	or	r3,r19,r20
   114dc:	d8802215 	stw	r2,136(sp)
   114e0:	8922703a 	and	r17,r17,r4
   114e4:	18009b26 	beq	r3,zero,11754 <___vfiprintf_internal_r+0x954>
   114e8:	002b883a 	mov	r21,zero
   114ec:	ddc01a04 	addi	r23,sp,104
   114f0:	9806d0fa 	srli	r3,r19,3
   114f4:	a008977a 	slli	r4,r20,29
   114f8:	a028d0fa 	srli	r20,r20,3
   114fc:	9cc001cc 	andi	r19,r19,7
   11500:	98800c04 	addi	r2,r19,48
   11504:	bdffffc4 	addi	r23,r23,-1
   11508:	20e6b03a 	or	r19,r4,r3
   1150c:	b8800005 	stb	r2,0(r23)
   11510:	9d06b03a 	or	r3,r19,r20
   11514:	183ff61e 	bne	r3,zero,114f0 <__alt_exception_stack_pointer+0xf80114f0>
   11518:	88c0004c 	andi	r3,r17,1
   1151c:	18021f1e 	bne	r3,zero,11d9c <___vfiprintf_internal_r+0xf9c>
   11520:	d9401e17 	ldw	r5,120(sp)
   11524:	2de9c83a 	sub	r20,r5,r23
   11528:	003f3806 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   1152c:	9cc03fcc 	andi	r19,r19,255
   11530:	b811883a 	mov	r8,r23
   11534:	98034f1e 	bne	r19,zero,12274 <___vfiprintf_internal_r+0x1474>
   11538:	00800074 	movhi	r2,1
   1153c:	109fe104 	addi	r2,r2,32644
   11540:	d8802615 	stw	r2,152(sp)
   11544:	8880080c 	andi	r2,r17,32
   11548:	1000ac26 	beq	r2,zero,117fc <___vfiprintf_internal_r+0x9fc>
   1154c:	d9002217 	ldw	r4,136(sp)
   11550:	24c00017 	ldw	r19,0(r4)
   11554:	25000117 	ldw	r20,4(r4)
   11558:	21000204 	addi	r4,r4,8
   1155c:	d9002215 	stw	r4,136(sp)
   11560:	8880004c 	andi	r2,r17,1
   11564:	1001e726 	beq	r2,zero,11d04 <___vfiprintf_internal_r+0xf04>
   11568:	9d04b03a 	or	r2,r19,r20
   1156c:	10025c1e 	bne	r2,zero,11ee0 <___vfiprintf_internal_r+0x10e0>
   11570:	d8001d85 	stb	zero,118(sp)
   11574:	80024416 	blt	r16,zero,11e88 <___vfiprintf_internal_r+0x1088>
   11578:	00bfdfc4 	movi	r2,-129
   1157c:	88a2703a 	and	r17,r17,r2
   11580:	003f1d06 	br	111f8 <__alt_exception_stack_pointer+0xf80111f8>
   11584:	d8c02217 	ldw	r3,136(sp)
   11588:	04c00044 	movi	r19,1
   1158c:	b811883a 	mov	r8,r23
   11590:	18800017 	ldw	r2,0(r3)
   11594:	18c00104 	addi	r3,r3,4
   11598:	d8001d85 	stb	zero,118(sp)
   1159c:	d8801005 	stb	r2,64(sp)
   115a0:	d8c02215 	stw	r3,136(sp)
   115a4:	9829883a 	mov	r20,r19
   115a8:	ddc01004 	addi	r23,sp,64
   115ac:	0021883a 	mov	r16,zero
   115b0:	003f1e06 	br	1122c <__alt_exception_stack_pointer+0xf801122c>
   115b4:	9cc03fcc 	andi	r19,r19,255
   115b8:	b811883a 	mov	r8,r23
   115bc:	9803331e 	bne	r19,zero,1228c <___vfiprintf_internal_r+0x148c>
   115c0:	8880080c 	andi	r2,r17,32
   115c4:	10004826 	beq	r2,zero,116e8 <___vfiprintf_internal_r+0x8e8>
   115c8:	d9002217 	ldw	r4,136(sp)
   115cc:	20800117 	ldw	r2,4(r4)
   115d0:	24c00017 	ldw	r19,0(r4)
   115d4:	21000204 	addi	r4,r4,8
   115d8:	d9002215 	stw	r4,136(sp)
   115dc:	1029883a 	mov	r20,r2
   115e0:	10024c16 	blt	r2,zero,11f14 <___vfiprintf_internal_r+0x1114>
   115e4:	dd401d83 	ldbu	r21,118(sp)
   115e8:	80007116 	blt	r16,zero,117b0 <___vfiprintf_internal_r+0x9b0>
   115ec:	00ffdfc4 	movi	r3,-129
   115f0:	9d04b03a 	or	r2,r19,r20
   115f4:	88e2703a 	and	r17,r17,r3
   115f8:	1000d126 	beq	r2,zero,11940 <___vfiprintf_internal_r+0xb40>
   115fc:	a0023526 	beq	r20,zero,11ed4 <___vfiprintf_internal_r+0x10d4>
   11600:	ddc01a04 	addi	r23,sp,104
   11604:	4039883a 	mov	fp,r8
   11608:	9809883a 	mov	r4,r19
   1160c:	a00b883a 	mov	r5,r20
   11610:	01800284 	movi	r6,10
   11614:	000f883a 	mov	r7,zero
   11618:	001332c0 	call	1332c <__umoddi3>
   1161c:	10800c04 	addi	r2,r2,48
   11620:	bdffffc4 	addi	r23,r23,-1
   11624:	9809883a 	mov	r4,r19
   11628:	a00b883a 	mov	r5,r20
   1162c:	b8800005 	stb	r2,0(r23)
   11630:	01800284 	movi	r6,10
   11634:	000f883a 	mov	r7,zero
   11638:	0012d300 	call	12d30 <__udivdi3>
   1163c:	1027883a 	mov	r19,r2
   11640:	10c4b03a 	or	r2,r2,r3
   11644:	1829883a 	mov	r20,r3
   11648:	103fef1e 	bne	r2,zero,11608 <__alt_exception_stack_pointer+0xf8011608>
   1164c:	d9001e17 	ldw	r4,120(sp)
   11650:	e011883a 	mov	r8,fp
   11654:	25e9c83a 	sub	r20,r4,r23
   11658:	003eec06 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   1165c:	d8802307 	ldb	r2,140(sp)
   11660:	1002361e 	bne	r2,zero,11f3c <___vfiprintf_internal_r+0x113c>
   11664:	00c00804 	movi	r3,32
   11668:	d8c02305 	stb	r3,140(sp)
   1166c:	04c00044 	movi	r19,1
   11670:	b0c00007 	ldb	r3,0(r22)
   11674:	003e3f06 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11678:	8c400054 	ori	r17,r17,1
   1167c:	b0c00007 	ldb	r3,0(r22)
   11680:	003e3c06 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11684:	8c402014 	ori	r17,r17,128
   11688:	b0c00007 	ldb	r3,0(r22)
   1168c:	003e3906 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11690:	dc002715 	stw	r16,156(sp)
   11694:	d8002515 	stw	zero,148(sp)
   11698:	1f3ff404 	addi	fp,r3,-48
   1169c:	0009883a 	mov	r4,zero
   116a0:	b021883a 	mov	r16,r22
   116a4:	01400284 	movi	r5,10
   116a8:	0005b840 	call	5b84 <__mulsi3>
   116ac:	80c00007 	ldb	r3,0(r16)
   116b0:	e089883a 	add	r4,fp,r2
   116b4:	b5800044 	addi	r22,r22,1
   116b8:	1f3ff404 	addi	fp,r3,-48
   116bc:	b021883a 	mov	r16,r22
   116c0:	af3ff82e 	bgeu	r21,fp,116a4 <__alt_exception_stack_pointer+0xf80116a4>
   116c4:	d9002515 	stw	r4,148(sp)
   116c8:	dc002717 	ldw	r16,156(sp)
   116cc:	003e2a06 	br	10f78 <__alt_exception_stack_pointer+0xf8010f78>
   116d0:	9cc03fcc 	andi	r19,r19,255
   116d4:	b811883a 	mov	r8,r23
   116d8:	9802e91e 	bne	r19,zero,12280 <___vfiprintf_internal_r+0x1480>
   116dc:	8c400414 	ori	r17,r17,16
   116e0:	8880080c 	andi	r2,r17,32
   116e4:	103fb81e 	bne	r2,zero,115c8 <__alt_exception_stack_pointer+0xf80115c8>
   116e8:	8880040c 	andi	r2,r17,16
   116ec:	10022e26 	beq	r2,zero,11fa8 <___vfiprintf_internal_r+0x11a8>
   116f0:	d9402217 	ldw	r5,136(sp)
   116f4:	2cc00017 	ldw	r19,0(r5)
   116f8:	29400104 	addi	r5,r5,4
   116fc:	d9402215 	stw	r5,136(sp)
   11700:	9829d7fa 	srai	r20,r19,31
   11704:	a005883a 	mov	r2,r20
   11708:	003fb506 	br	115e0 <__alt_exception_stack_pointer+0xf80115e0>
   1170c:	9cc03fcc 	andi	r19,r19,255
   11710:	b811883a 	mov	r8,r23
   11714:	9802fa1e 	bne	r19,zero,12300 <___vfiprintf_internal_r+0x1500>
   11718:	8c400414 	ori	r17,r17,16
   1171c:	8880080c 	andi	r2,r17,32
   11720:	103f661e 	bne	r2,zero,114bc <__alt_exception_stack_pointer+0xf80114bc>
   11724:	8880040c 	andi	r2,r17,16
   11728:	10020626 	beq	r2,zero,11f44 <___vfiprintf_internal_r+0x1144>
   1172c:	d9402217 	ldw	r5,136(sp)
   11730:	d8001d85 	stb	zero,118(sp)
   11734:	0029883a 	mov	r20,zero
   11738:	28800104 	addi	r2,r5,4
   1173c:	2cc00017 	ldw	r19,0(r5)
   11740:	80020816 	blt	r16,zero,11f64 <___vfiprintf_internal_r+0x1164>
   11744:	00ffdfc4 	movi	r3,-129
   11748:	d8802215 	stw	r2,136(sp)
   1174c:	88e2703a 	and	r17,r17,r3
   11750:	983f651e 	bne	r19,zero,114e8 <__alt_exception_stack_pointer+0xf80114e8>
   11754:	002b883a 	mov	r21,zero
   11758:	8002cf26 	beq	r16,zero,12298 <___vfiprintf_internal_r+0x1498>
   1175c:	0027883a 	mov	r19,zero
   11760:	0029883a 	mov	r20,zero
   11764:	003f6106 	br	114ec <__alt_exception_stack_pointer+0xf80114ec>
   11768:	9cc03fcc 	andi	r19,r19,255
   1176c:	b811883a 	mov	r8,r23
   11770:	9802e01e 	bne	r19,zero,122f4 <___vfiprintf_internal_r+0x14f4>
   11774:	8c400414 	ori	r17,r17,16
   11778:	8880080c 	andi	r2,r17,32
   1177c:	1000641e 	bne	r2,zero,11910 <___vfiprintf_internal_r+0xb10>
   11780:	8880040c 	andi	r2,r17,16
   11784:	1001c81e 	bne	r2,zero,11ea8 <___vfiprintf_internal_r+0x10a8>
   11788:	8880100c 	andi	r2,r17,64
   1178c:	d8001d85 	stb	zero,118(sp)
   11790:	1002281e 	bne	r2,zero,12034 <___vfiprintf_internal_r+0x1234>
   11794:	d9002217 	ldw	r4,136(sp)
   11798:	0029883a 	mov	r20,zero
   1179c:	20800104 	addi	r2,r4,4
   117a0:	24c00017 	ldw	r19,0(r4)
   117a4:	8001c60e 	bge	r16,zero,11ec0 <___vfiprintf_internal_r+0x10c0>
   117a8:	d8802215 	stw	r2,136(sp)
   117ac:	002b883a 	mov	r21,zero
   117b0:	9d04b03a 	or	r2,r19,r20
   117b4:	103f911e 	bne	r2,zero,115fc <__alt_exception_stack_pointer+0xf80115fc>
   117b8:	00800044 	movi	r2,1
   117bc:	10803fcc 	andi	r2,r2,255
   117c0:	00c00044 	movi	r3,1
   117c4:	10c05f26 	beq	r2,r3,11944 <___vfiprintf_internal_r+0xb44>
   117c8:	00c00084 	movi	r3,2
   117cc:	10ffe31e 	bne	r2,r3,1175c <__alt_exception_stack_pointer+0xf801175c>
   117d0:	0027883a 	mov	r19,zero
   117d4:	0029883a 	mov	r20,zero
   117d8:	00015106 	br	11d20 <___vfiprintf_internal_r+0xf20>
   117dc:	9cc03fcc 	andi	r19,r19,255
   117e0:	b811883a 	mov	r8,r23
   117e4:	9802c01e 	bne	r19,zero,122e8 <___vfiprintf_internal_r+0x14e8>
   117e8:	01400074 	movhi	r5,1
   117ec:	295fdc04 	addi	r5,r5,32624
   117f0:	d9402615 	stw	r5,152(sp)
   117f4:	8880080c 	andi	r2,r17,32
   117f8:	103f541e 	bne	r2,zero,1154c <__alt_exception_stack_pointer+0xf801154c>
   117fc:	8880040c 	andi	r2,r17,16
   11800:	1001f226 	beq	r2,zero,11fcc <___vfiprintf_internal_r+0x11cc>
   11804:	d9402217 	ldw	r5,136(sp)
   11808:	0029883a 	mov	r20,zero
   1180c:	2cc00017 	ldw	r19,0(r5)
   11810:	29400104 	addi	r5,r5,4
   11814:	d9402215 	stw	r5,136(sp)
   11818:	003f5106 	br	11560 <__alt_exception_stack_pointer+0xf8011560>
   1181c:	d8c02217 	ldw	r3,136(sp)
   11820:	b811883a 	mov	r8,r23
   11824:	d8001d85 	stb	zero,118(sp)
   11828:	1dc00017 	ldw	r23,0(r3)
   1182c:	1f000104 	addi	fp,r3,4
   11830:	b8025926 	beq	r23,zero,12198 <___vfiprintf_internal_r+0x1398>
   11834:	80023316 	blt	r16,zero,12104 <___vfiprintf_internal_r+0x1304>
   11838:	800d883a 	mov	r6,r16
   1183c:	000b883a 	mov	r5,zero
   11840:	b809883a 	mov	r4,r23
   11844:	da002a15 	stw	r8,168(sp)
   11848:	000ef040 	call	ef04 <memchr>
   1184c:	da002a17 	ldw	r8,168(sp)
   11850:	10026826 	beq	r2,zero,121f4 <___vfiprintf_internal_r+0x13f4>
   11854:	15e9c83a 	sub	r20,r2,r23
   11858:	dd401d83 	ldbu	r21,118(sp)
   1185c:	df002215 	stw	fp,136(sp)
   11860:	0021883a 	mov	r16,zero
   11864:	003e6906 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   11868:	9cc03fcc 	andi	r19,r19,255
   1186c:	b811883a 	mov	r8,r23
   11870:	983fc126 	beq	r19,zero,11778 <__alt_exception_stack_pointer+0xf8011778>
   11874:	d8c02303 	ldbu	r3,140(sp)
   11878:	d8c01d85 	stb	r3,118(sp)
   1187c:	003fbe06 	br	11778 <__alt_exception_stack_pointer+0xf8011778>
   11880:	d9002217 	ldw	r4,136(sp)
   11884:	d9402217 	ldw	r5,136(sp)
   11888:	21000017 	ldw	r4,0(r4)
   1188c:	28800104 	addi	r2,r5,4
   11890:	d9002515 	stw	r4,148(sp)
   11894:	203e3d16 	blt	r4,zero,1118c <__alt_exception_stack_pointer+0xf801118c>
   11898:	d8802215 	stw	r2,136(sp)
   1189c:	b0c00007 	ldb	r3,0(r22)
   118a0:	003db406 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   118a4:	00c00ac4 	movi	r3,43
   118a8:	d8c02305 	stb	r3,140(sp)
   118ac:	04c00044 	movi	r19,1
   118b0:	b0c00007 	ldb	r3,0(r22)
   118b4:	003daf06 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   118b8:	b0c00007 	ldb	r3,0(r22)
   118bc:	01000a84 	movi	r4,42
   118c0:	b4000044 	addi	r16,r22,1
   118c4:	19025e26 	beq	r3,r4,12240 <___vfiprintf_internal_r+0x1440>
   118c8:	1f3ff404 	addi	fp,r3,-48
   118cc:	0009883a 	mov	r4,zero
   118d0:	af025236 	bltu	r21,fp,1221c <___vfiprintf_internal_r+0x141c>
   118d4:	01400284 	movi	r5,10
   118d8:	0005b840 	call	5b84 <__mulsi3>
   118dc:	80c00007 	ldb	r3,0(r16)
   118e0:	1709883a 	add	r4,r2,fp
   118e4:	85800044 	addi	r22,r16,1
   118e8:	1f3ff404 	addi	fp,r3,-48
   118ec:	b021883a 	mov	r16,r22
   118f0:	af3ff82e 	bgeu	r21,fp,118d4 <__alt_exception_stack_pointer+0xf80118d4>
   118f4:	2021883a 	mov	r16,r4
   118f8:	203d9f0e 	bge	r4,zero,10f78 <__alt_exception_stack_pointer+0xf8010f78>
   118fc:	043fffc4 	movi	r16,-1
   11900:	003d9d06 	br	10f78 <__alt_exception_stack_pointer+0xf8010f78>
   11904:	8c401014 	ori	r17,r17,64
   11908:	b0c00007 	ldb	r3,0(r22)
   1190c:	003d9906 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11910:	d9002217 	ldw	r4,136(sp)
   11914:	d8001d85 	stb	zero,118(sp)
   11918:	20c00204 	addi	r3,r4,8
   1191c:	24c00017 	ldw	r19,0(r4)
   11920:	25000117 	ldw	r20,4(r4)
   11924:	8001e716 	blt	r16,zero,120c4 <___vfiprintf_internal_r+0x12c4>
   11928:	013fdfc4 	movi	r4,-129
   1192c:	9d04b03a 	or	r2,r19,r20
   11930:	d8c02215 	stw	r3,136(sp)
   11934:	8922703a 	and	r17,r17,r4
   11938:	002b883a 	mov	r21,zero
   1193c:	103f2f1e 	bne	r2,zero,115fc <__alt_exception_stack_pointer+0xf80115fc>
   11940:	803e2f26 	beq	r16,zero,11200 <__alt_exception_stack_pointer+0xf8011200>
   11944:	0027883a 	mov	r19,zero
   11948:	9cc00c04 	addi	r19,r19,48
   1194c:	dcc019c5 	stb	r19,103(sp)
   11950:	dd002817 	ldw	r20,160(sp)
   11954:	ddc019c4 	addi	r23,sp,103
   11958:	003e2c06 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   1195c:	9cc03fcc 	andi	r19,r19,255
   11960:	b811883a 	mov	r8,r23
   11964:	9802571e 	bne	r19,zero,122c4 <___vfiprintf_internal_r+0x14c4>
   11968:	18005726 	beq	r3,zero,11ac8 <___vfiprintf_internal_r+0xcc8>
   1196c:	04c00044 	movi	r19,1
   11970:	d8c01005 	stb	r3,64(sp)
   11974:	d8001d85 	stb	zero,118(sp)
   11978:	9829883a 	mov	r20,r19
   1197c:	ddc01004 	addi	r23,sp,64
   11980:	003f0a06 	br	115ac <__alt_exception_stack_pointer+0xf80115ac>
   11984:	d9402017 	ldw	r5,128(sp)
   11988:	d9002117 	ldw	r4,132(sp)
   1198c:	d9801a04 	addi	r6,sp,104
   11990:	da802a15 	stw	r10,168(sp)
   11994:	0010cec0 	call	10cec <__sprint_r.part.0>
   11998:	da802a17 	ldw	r10,168(sp)
   1199c:	1000501e 	bne	r2,zero,11ae0 <___vfiprintf_internal_r+0xce0>
   119a0:	d9801b17 	ldw	r6,108(sp)
   119a4:	d8801c17 	ldw	r2,112(sp)
   119a8:	d811883a 	mov	r8,sp
   119ac:	31000044 	addi	r4,r6,1
   119b0:	003e3606 	br	1128c <__alt_exception_stack_pointer+0xf801128c>
   119b4:	d9001b17 	ldw	r4,108(sp)
   119b8:	d8801c17 	ldw	r2,112(sp)
   119bc:	21400044 	addi	r5,r4,1
   119c0:	d9801d87 	ldb	r6,118(sp)
   119c4:	303e5226 	beq	r6,zero,11310 <__alt_exception_stack_pointer+0xf8011310>
   119c8:	01800044 	movi	r6,1
   119cc:	d9001d84 	addi	r4,sp,118
   119d0:	1185883a 	add	r2,r2,r6
   119d4:	41000015 	stw	r4,0(r8)
   119d8:	41800115 	stw	r6,4(r8)
   119dc:	d8801c15 	stw	r2,112(sp)
   119e0:	d9401b15 	stw	r5,108(sp)
   119e4:	010001c4 	movi	r4,7
   119e8:	2140b00e 	bge	r4,r5,11cac <___vfiprintf_internal_r+0xeac>
   119ec:	1000f61e 	bne	r2,zero,11dc8 <___vfiprintf_internal_r+0xfc8>
   119f0:	3800b31e 	bne	r7,zero,11cc0 <___vfiprintf_internal_r+0xec0>
   119f4:	0009883a 	mov	r4,zero
   119f8:	300b883a 	mov	r5,r6
   119fc:	d811883a 	mov	r8,sp
   11a00:	01802004 	movi	r6,128
   11a04:	19be5226 	beq	r3,r6,11350 <__alt_exception_stack_pointer+0xf8011350>
   11a08:	8521c83a 	sub	r16,r16,r20
   11a0c:	043e790e 	bge	zero,r16,113f4 <__alt_exception_stack_pointer+0xf80113f4>
   11a10:	05400404 	movi	r21,16
   11a14:	ac01b00e 	bge	r21,r16,120d8 <___vfiprintf_internal_r+0x12d8>
   11a18:	014000b4 	movhi	r5,2
   11a1c:	29604104 	addi	r5,r5,-32508
   11a20:	d9402315 	stw	r5,140(sp)
   11a24:	070001c4 	movi	fp,7
   11a28:	00000506 	br	11a40 <___vfiprintf_internal_r+0xc40>
   11a2c:	21400084 	addi	r5,r4,2
   11a30:	42000204 	addi	r8,r8,8
   11a34:	1809883a 	mov	r4,r3
   11a38:	843ffc04 	addi	r16,r16,-16
   11a3c:	ac000d0e 	bge	r21,r16,11a74 <___vfiprintf_internal_r+0xc74>
   11a40:	10800404 	addi	r2,r2,16
   11a44:	20c00044 	addi	r3,r4,1
   11a48:	44800015 	stw	r18,0(r8)
   11a4c:	45400115 	stw	r21,4(r8)
   11a50:	d8801c15 	stw	r2,112(sp)
   11a54:	d8c01b15 	stw	r3,108(sp)
   11a58:	e0fff40e 	bge	fp,r3,11a2c <__alt_exception_stack_pointer+0xf8011a2c>
   11a5c:	1000101e 	bne	r2,zero,11aa0 <___vfiprintf_internal_r+0xca0>
   11a60:	843ffc04 	addi	r16,r16,-16
   11a64:	01400044 	movi	r5,1
   11a68:	0009883a 	mov	r4,zero
   11a6c:	d811883a 	mov	r8,sp
   11a70:	ac3ff316 	blt	r21,r16,11a40 <__alt_exception_stack_pointer+0xf8011a40>
   11a74:	d8c02317 	ldw	r3,140(sp)
   11a78:	1405883a 	add	r2,r2,r16
   11a7c:	44000115 	stw	r16,4(r8)
   11a80:	40c00015 	stw	r3,0(r8)
   11a84:	d8801c15 	stw	r2,112(sp)
   11a88:	d9401b15 	stw	r5,108(sp)
   11a8c:	00c001c4 	movi	r3,7
   11a90:	19401916 	blt	r3,r5,11af8 <___vfiprintf_internal_r+0xcf8>
   11a94:	42000204 	addi	r8,r8,8
   11a98:	29400044 	addi	r5,r5,1
   11a9c:	003e5506 	br	113f4 <__alt_exception_stack_pointer+0xf80113f4>
   11aa0:	d9402017 	ldw	r5,128(sp)
   11aa4:	d9002117 	ldw	r4,132(sp)
   11aa8:	d9801a04 	addi	r6,sp,104
   11aac:	0010cec0 	call	10cec <__sprint_r.part.0>
   11ab0:	10000b1e 	bne	r2,zero,11ae0 <___vfiprintf_internal_r+0xce0>
   11ab4:	d9001b17 	ldw	r4,108(sp)
   11ab8:	d8801c17 	ldw	r2,112(sp)
   11abc:	d811883a 	mov	r8,sp
   11ac0:	21400044 	addi	r5,r4,1
   11ac4:	003fdc06 	br	11a38 <__alt_exception_stack_pointer+0xf8011a38>
   11ac8:	d8801c17 	ldw	r2,112(sp)
   11acc:	10000426 	beq	r2,zero,11ae0 <___vfiprintf_internal_r+0xce0>
   11ad0:	d9402017 	ldw	r5,128(sp)
   11ad4:	d9002117 	ldw	r4,132(sp)
   11ad8:	d9801a04 	addi	r6,sp,104
   11adc:	0010cec0 	call	10cec <__sprint_r.part.0>
   11ae0:	d9402017 	ldw	r5,128(sp)
   11ae4:	2880030b 	ldhu	r2,12(r5)
   11ae8:	1080100c 	andi	r2,r2,64
   11aec:	10014d1e 	bne	r2,zero,12024 <___vfiprintf_internal_r+0x1224>
   11af0:	d8802417 	ldw	r2,144(sp)
   11af4:	003d9706 	br	11154 <__alt_exception_stack_pointer+0xf8011154>
   11af8:	1000d21e 	bne	r2,zero,11e44 <___vfiprintf_internal_r+0x1044>
   11afc:	00c00044 	movi	r3,1
   11b00:	a005883a 	mov	r2,r20
   11b04:	ddc00015 	stw	r23,0(sp)
   11b08:	dd000115 	stw	r20,4(sp)
   11b0c:	dd001c15 	stw	r20,112(sp)
   11b10:	d8c01b15 	stw	r3,108(sp)
   11b14:	d811883a 	mov	r8,sp
   11b18:	42000204 	addi	r8,r8,8
   11b1c:	8c40010c 	andi	r17,r17,4
   11b20:	88004026 	beq	r17,zero,11c24 <___vfiprintf_internal_r+0xe24>
   11b24:	d9002517 	ldw	r4,148(sp)
   11b28:	24e3c83a 	sub	r17,r4,r19
   11b2c:	04403d0e 	bge	zero,r17,11c24 <___vfiprintf_internal_r+0xe24>
   11b30:	04000404 	movi	r16,16
   11b34:	8441a90e 	bge	r16,r17,121dc <___vfiprintf_internal_r+0x13dc>
   11b38:	00c000b4 	movhi	r3,2
   11b3c:	18e04504 	addi	r3,r3,-32492
   11b40:	d9001b17 	ldw	r4,108(sp)
   11b44:	d8c02315 	stw	r3,140(sp)
   11b48:	050001c4 	movi	r20,7
   11b4c:	dd402117 	ldw	r21,132(sp)
   11b50:	ddc02017 	ldw	r23,128(sp)
   11b54:	00000506 	br	11b6c <___vfiprintf_internal_r+0xd6c>
   11b58:	21400084 	addi	r5,r4,2
   11b5c:	42000204 	addi	r8,r8,8
   11b60:	1809883a 	mov	r4,r3
   11b64:	8c7ffc04 	addi	r17,r17,-16
   11b68:	84400f0e 	bge	r16,r17,11ba8 <___vfiprintf_internal_r+0xda8>
   11b6c:	014000b4 	movhi	r5,2
   11b70:	10800404 	addi	r2,r2,16
   11b74:	20c00044 	addi	r3,r4,1
   11b78:	29604504 	addi	r5,r5,-32492
   11b7c:	41400015 	stw	r5,0(r8)
   11b80:	44000115 	stw	r16,4(r8)
   11b84:	d8801c15 	stw	r2,112(sp)
   11b88:	d8c01b15 	stw	r3,108(sp)
   11b8c:	a0fff20e 	bge	r20,r3,11b58 <__alt_exception_stack_pointer+0xf8011b58>
   11b90:	1000141e 	bne	r2,zero,11be4 <___vfiprintf_internal_r+0xde4>
   11b94:	8c7ffc04 	addi	r17,r17,-16
   11b98:	01400044 	movi	r5,1
   11b9c:	0009883a 	mov	r4,zero
   11ba0:	d811883a 	mov	r8,sp
   11ba4:	847ff116 	blt	r16,r17,11b6c <__alt_exception_stack_pointer+0xf8011b6c>
   11ba8:	d8c02317 	ldw	r3,140(sp)
   11bac:	1445883a 	add	r2,r2,r17
   11bb0:	44400115 	stw	r17,4(r8)
   11bb4:	40c00015 	stw	r3,0(r8)
   11bb8:	d8801c15 	stw	r2,112(sp)
   11bbc:	d9401b15 	stw	r5,108(sp)
   11bc0:	00c001c4 	movi	r3,7
   11bc4:	1940170e 	bge	r3,r5,11c24 <___vfiprintf_internal_r+0xe24>
   11bc8:	1000101e 	bne	r2,zero,11c0c <___vfiprintf_internal_r+0xe0c>
   11bcc:	d8802517 	ldw	r2,148(sp)
   11bd0:	14c11616 	blt	r2,r19,1202c <___vfiprintf_internal_r+0x122c>
   11bd4:	d9002417 	ldw	r4,144(sp)
   11bd8:	2089883a 	add	r4,r4,r2
   11bdc:	d9002415 	stw	r4,144(sp)
   11be0:	003e1806 	br	11444 <__alt_exception_stack_pointer+0xf8011444>
   11be4:	d9801a04 	addi	r6,sp,104
   11be8:	b80b883a 	mov	r5,r23
   11bec:	a809883a 	mov	r4,r21
   11bf0:	0010cec0 	call	10cec <__sprint_r.part.0>
   11bf4:	103fba1e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11bf8:	d9001b17 	ldw	r4,108(sp)
   11bfc:	d8801c17 	ldw	r2,112(sp)
   11c00:	d811883a 	mov	r8,sp
   11c04:	21400044 	addi	r5,r4,1
   11c08:	003fd606 	br	11b64 <__alt_exception_stack_pointer+0xf8011b64>
   11c0c:	d9402017 	ldw	r5,128(sp)
   11c10:	d9002117 	ldw	r4,132(sp)
   11c14:	d9801a04 	addi	r6,sp,104
   11c18:	0010cec0 	call	10cec <__sprint_r.part.0>
   11c1c:	103fb01e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11c20:	d8801c17 	ldw	r2,112(sp)
   11c24:	d8c02517 	ldw	r3,148(sp)
   11c28:	1cc0010e 	bge	r3,r19,11c30 <___vfiprintf_internal_r+0xe30>
   11c2c:	9807883a 	mov	r3,r19
   11c30:	d9002417 	ldw	r4,144(sp)
   11c34:	20c9883a 	add	r4,r4,r3
   11c38:	d9002415 	stw	r4,144(sp)
   11c3c:	103e0126 	beq	r2,zero,11444 <__alt_exception_stack_pointer+0xf8011444>
   11c40:	d9402017 	ldw	r5,128(sp)
   11c44:	d9002117 	ldw	r4,132(sp)
   11c48:	d9801a04 	addi	r6,sp,104
   11c4c:	0010cec0 	call	10cec <__sprint_r.part.0>
   11c50:	103dfc26 	beq	r2,zero,11444 <__alt_exception_stack_pointer+0xf8011444>
   11c54:	003fa206 	br	11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11c58:	d9402017 	ldw	r5,128(sp)
   11c5c:	d9002117 	ldw	r4,132(sp)
   11c60:	d9801a04 	addi	r6,sp,104
   11c64:	d9c02b15 	stw	r7,172(sp)
   11c68:	0010cec0 	call	10cec <__sprint_r.part.0>
   11c6c:	d9c02b17 	ldw	r7,172(sp)
   11c70:	103f9b1e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11c74:	d9001b17 	ldw	r4,108(sp)
   11c78:	d8801c17 	ldw	r2,112(sp)
   11c7c:	d811883a 	mov	r8,sp
   11c80:	21800044 	addi	r6,r4,1
   11c84:	003dbf06 	br	11384 <__alt_exception_stack_pointer+0xf8011384>
   11c88:	1000d81e 	bne	r2,zero,11fec <___vfiprintf_internal_r+0x11ec>
   11c8c:	d9001d87 	ldb	r4,118(sp)
   11c90:	20000a26 	beq	r4,zero,11cbc <___vfiprintf_internal_r+0xebc>
   11c94:	00800044 	movi	r2,1
   11c98:	d9001d84 	addi	r4,sp,118
   11c9c:	100b883a 	mov	r5,r2
   11ca0:	d9000015 	stw	r4,0(sp)
   11ca4:	d8800115 	stw	r2,4(sp)
   11ca8:	d811883a 	mov	r8,sp
   11cac:	2809883a 	mov	r4,r5
   11cb0:	42000204 	addi	r8,r8,8
   11cb4:	29400044 	addi	r5,r5,1
   11cb8:	003d9506 	br	11310 <__alt_exception_stack_pointer+0xf8011310>
   11cbc:	3800fd26 	beq	r7,zero,120b4 <___vfiprintf_internal_r+0x12b4>
   11cc0:	00800084 	movi	r2,2
   11cc4:	d9001d04 	addi	r4,sp,116
   11cc8:	d9000015 	stw	r4,0(sp)
   11ccc:	d8800115 	stw	r2,4(sp)
   11cd0:	01400044 	movi	r5,1
   11cd4:	d811883a 	mov	r8,sp
   11cd8:	2809883a 	mov	r4,r5
   11cdc:	42000204 	addi	r8,r8,8
   11ce0:	29400044 	addi	r5,r5,1
   11ce4:	003f4606 	br	11a00 <__alt_exception_stack_pointer+0xf8011a00>
   11ce8:	d8802517 	ldw	r2,148(sp)
   11cec:	14c0010e 	bge	r2,r19,11cf4 <___vfiprintf_internal_r+0xef4>
   11cf0:	9805883a 	mov	r2,r19
   11cf4:	d9402417 	ldw	r5,144(sp)
   11cf8:	288b883a 	add	r5,r5,r2
   11cfc:	d9402415 	stw	r5,144(sp)
   11d00:	003dd006 	br	11444 <__alt_exception_stack_pointer+0xf8011444>
   11d04:	d8001d85 	stb	zero,118(sp)
   11d08:	80005d16 	blt	r16,zero,11e80 <___vfiprintf_internal_r+0x1080>
   11d0c:	00ffdfc4 	movi	r3,-129
   11d10:	9d04b03a 	or	r2,r19,r20
   11d14:	88e2703a 	and	r17,r17,r3
   11d18:	103d3726 	beq	r2,zero,111f8 <__alt_exception_stack_pointer+0xf80111f8>
   11d1c:	002b883a 	mov	r21,zero
   11d20:	d9002617 	ldw	r4,152(sp)
   11d24:	ddc01a04 	addi	r23,sp,104
   11d28:	988003cc 	andi	r2,r19,15
   11d2c:	a006973a 	slli	r3,r20,28
   11d30:	2085883a 	add	r2,r4,r2
   11d34:	9826d13a 	srli	r19,r19,4
   11d38:	10800003 	ldbu	r2,0(r2)
   11d3c:	a028d13a 	srli	r20,r20,4
   11d40:	bdffffc4 	addi	r23,r23,-1
   11d44:	1ce6b03a 	or	r19,r3,r19
   11d48:	b8800005 	stb	r2,0(r23)
   11d4c:	9d04b03a 	or	r2,r19,r20
   11d50:	103ff51e 	bne	r2,zero,11d28 <__alt_exception_stack_pointer+0xf8011d28>
   11d54:	d8801e17 	ldw	r2,120(sp)
   11d58:	15e9c83a 	sub	r20,r2,r23
   11d5c:	003d2b06 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   11d60:	d9402017 	ldw	r5,128(sp)
   11d64:	d9002117 	ldw	r4,132(sp)
   11d68:	d9801a04 	addi	r6,sp,104
   11d6c:	0010cec0 	call	10cec <__sprint_r.part.0>
   11d70:	103f5b1e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11d74:	d8801c17 	ldw	r2,112(sp)
   11d78:	d811883a 	mov	r8,sp
   11d7c:	003f6706 	br	11b1c <__alt_exception_stack_pointer+0xf8011b1c>
   11d80:	d9402017 	ldw	r5,128(sp)
   11d84:	d9002117 	ldw	r4,132(sp)
   11d88:	d9801a04 	addi	r6,sp,104
   11d8c:	0010cec0 	call	10cec <__sprint_r.part.0>
   11d90:	103f531e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11d94:	d811883a 	mov	r8,sp
   11d98:	003cd906 	br	11100 <__alt_exception_stack_pointer+0xf8011100>
   11d9c:	10803fcc 	andi	r2,r2,255
   11da0:	1080201c 	xori	r2,r2,128
   11da4:	10bfe004 	addi	r2,r2,-128
   11da8:	00c00c04 	movi	r3,48
   11dac:	10ffe926 	beq	r2,r3,11d54 <__alt_exception_stack_pointer+0xf8011d54>
   11db0:	b8ffffc5 	stb	r3,-1(r23)
   11db4:	d8c01e17 	ldw	r3,120(sp)
   11db8:	b8bfffc4 	addi	r2,r23,-1
   11dbc:	102f883a 	mov	r23,r2
   11dc0:	18a9c83a 	sub	r20,r3,r2
   11dc4:	003d1106 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   11dc8:	d9402017 	ldw	r5,128(sp)
   11dcc:	d9002117 	ldw	r4,132(sp)
   11dd0:	d9801a04 	addi	r6,sp,104
   11dd4:	d8c02a15 	stw	r3,168(sp)
   11dd8:	d9c02b15 	stw	r7,172(sp)
   11ddc:	0010cec0 	call	10cec <__sprint_r.part.0>
   11de0:	d8c02a17 	ldw	r3,168(sp)
   11de4:	d9c02b17 	ldw	r7,172(sp)
   11de8:	103f3d1e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11dec:	d9001b17 	ldw	r4,108(sp)
   11df0:	d8801c17 	ldw	r2,112(sp)
   11df4:	d811883a 	mov	r8,sp
   11df8:	21400044 	addi	r5,r4,1
   11dfc:	003d4406 	br	11310 <__alt_exception_stack_pointer+0xf8011310>
   11e00:	d9402017 	ldw	r5,128(sp)
   11e04:	d9002117 	ldw	r4,132(sp)
   11e08:	d9801a04 	addi	r6,sp,104
   11e0c:	d8c02a15 	stw	r3,168(sp)
   11e10:	0010cec0 	call	10cec <__sprint_r.part.0>
   11e14:	d8c02a17 	ldw	r3,168(sp)
   11e18:	103f311e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11e1c:	d9001b17 	ldw	r4,108(sp)
   11e20:	d8801c17 	ldw	r2,112(sp)
   11e24:	d811883a 	mov	r8,sp
   11e28:	21400044 	addi	r5,r4,1
   11e2c:	003ef406 	br	11a00 <__alt_exception_stack_pointer+0xf8011a00>
   11e30:	1000bd1e 	bne	r2,zero,12128 <___vfiprintf_internal_r+0x1328>
   11e34:	01400044 	movi	r5,1
   11e38:	0009883a 	mov	r4,zero
   11e3c:	d811883a 	mov	r8,sp
   11e40:	003ef106 	br	11a08 <__alt_exception_stack_pointer+0xf8011a08>
   11e44:	d9402017 	ldw	r5,128(sp)
   11e48:	d9002117 	ldw	r4,132(sp)
   11e4c:	d9801a04 	addi	r6,sp,104
   11e50:	0010cec0 	call	10cec <__sprint_r.part.0>
   11e54:	103f221e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   11e58:	d9401b17 	ldw	r5,108(sp)
   11e5c:	d8801c17 	ldw	r2,112(sp)
   11e60:	d811883a 	mov	r8,sp
   11e64:	29400044 	addi	r5,r5,1
   11e68:	003d6206 	br	113f4 <__alt_exception_stack_pointer+0xf80113f4>
   11e6c:	01400074 	movhi	r5,1
   11e70:	295fe104 	addi	r5,r5,32644
   11e74:	d9402615 	stw	r5,152(sp)
   11e78:	d8c02215 	stw	r3,136(sp)
   11e7c:	1023883a 	mov	r17,r2
   11e80:	9d04b03a 	or	r2,r19,r20
   11e84:	103fa51e 	bne	r2,zero,11d1c <__alt_exception_stack_pointer+0xf8011d1c>
   11e88:	002b883a 	mov	r21,zero
   11e8c:	00800084 	movi	r2,2
   11e90:	003e4a06 	br	117bc <__alt_exception_stack_pointer+0xf80117bc>
   11e94:	01400074 	movhi	r5,1
   11e98:	295fe104 	addi	r5,r5,32644
   11e9c:	002b883a 	mov	r21,zero
   11ea0:	d9402615 	stw	r5,152(sp)
   11ea4:	003f9e06 	br	11d20 <__alt_exception_stack_pointer+0xf8011d20>
   11ea8:	d9402217 	ldw	r5,136(sp)
   11eac:	d8001d85 	stb	zero,118(sp)
   11eb0:	0029883a 	mov	r20,zero
   11eb4:	28800104 	addi	r2,r5,4
   11eb8:	2cc00017 	ldw	r19,0(r5)
   11ebc:	803e3a16 	blt	r16,zero,117a8 <__alt_exception_stack_pointer+0xf80117a8>
   11ec0:	00ffdfc4 	movi	r3,-129
   11ec4:	d8802215 	stw	r2,136(sp)
   11ec8:	88e2703a 	and	r17,r17,r3
   11ecc:	002b883a 	mov	r21,zero
   11ed0:	983e9b26 	beq	r19,zero,11940 <__alt_exception_stack_pointer+0xf8011940>
   11ed4:	00800244 	movi	r2,9
   11ed8:	14fdc936 	bltu	r2,r19,11600 <__alt_exception_stack_pointer+0xf8011600>
   11edc:	003e9a06 	br	11948 <__alt_exception_stack_pointer+0xf8011948>
   11ee0:	00800c04 	movi	r2,48
   11ee4:	d8c01d45 	stb	r3,117(sp)
   11ee8:	d8801d05 	stb	r2,116(sp)
   11eec:	d8001d85 	stb	zero,118(sp)
   11ef0:	88c00094 	ori	r3,r17,2
   11ef4:	80009c16 	blt	r16,zero,12168 <___vfiprintf_internal_r+0x1368>
   11ef8:	00bfdfc4 	movi	r2,-129
   11efc:	88a2703a 	and	r17,r17,r2
   11f00:	8c400094 	ori	r17,r17,2
   11f04:	002b883a 	mov	r21,zero
   11f08:	003f8506 	br	11d20 <__alt_exception_stack_pointer+0xf8011d20>
   11f0c:	b029883a 	mov	r20,r22
   11f10:	003c0b06 	br	10f40 <__alt_exception_stack_pointer+0xf8010f40>
   11f14:	04e7c83a 	sub	r19,zero,r19
   11f18:	05400b44 	movi	r21,45
   11f1c:	9804c03a 	cmpne	r2,r19,zero
   11f20:	0529c83a 	sub	r20,zero,r20
   11f24:	dd401d85 	stb	r21,118(sp)
   11f28:	a0a9c83a 	sub	r20,r20,r2
   11f2c:	80009716 	blt	r16,zero,1218c <___vfiprintf_internal_r+0x138c>
   11f30:	00bfdfc4 	movi	r2,-129
   11f34:	88a2703a 	and	r17,r17,r2
   11f38:	003db006 	br	115fc <__alt_exception_stack_pointer+0xf80115fc>
   11f3c:	b0c00007 	ldb	r3,0(r22)
   11f40:	003c0c06 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   11f44:	8880100c 	andi	r2,r17,64
   11f48:	d8001d85 	stb	zero,118(sp)
   11f4c:	1000461e 	bne	r2,zero,12068 <___vfiprintf_internal_r+0x1268>
   11f50:	d9002217 	ldw	r4,136(sp)
   11f54:	0029883a 	mov	r20,zero
   11f58:	20800104 	addi	r2,r4,4
   11f5c:	24c00017 	ldw	r19,0(r4)
   11f60:	803df80e 	bge	r16,zero,11744 <__alt_exception_stack_pointer+0xf8011744>
   11f64:	9d06b03a 	or	r3,r19,r20
   11f68:	d8802215 	stw	r2,136(sp)
   11f6c:	183d5e1e 	bne	r3,zero,114e8 <__alt_exception_stack_pointer+0xf80114e8>
   11f70:	002b883a 	mov	r21,zero
   11f74:	0005883a 	mov	r2,zero
   11f78:	003e1006 	br	117bc <__alt_exception_stack_pointer+0xf80117bc>
   11f7c:	8880040c 	andi	r2,r17,16
   11f80:	1000321e 	bne	r2,zero,1204c <___vfiprintf_internal_r+0x124c>
   11f84:	8c40100c 	andi	r17,r17,64
   11f88:	88008d26 	beq	r17,zero,121c0 <___vfiprintf_internal_r+0x13c0>
   11f8c:	d9402217 	ldw	r5,136(sp)
   11f90:	d8c02417 	ldw	r3,144(sp)
   11f94:	28800017 	ldw	r2,0(r5)
   11f98:	29400104 	addi	r5,r5,4
   11f9c:	d9402215 	stw	r5,136(sp)
   11fa0:	10c0000d 	sth	r3,0(r2)
   11fa4:	003bca06 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   11fa8:	8880100c 	andi	r2,r17,64
   11fac:	10003a26 	beq	r2,zero,12098 <___vfiprintf_internal_r+0x1298>
   11fb0:	d8802217 	ldw	r2,136(sp)
   11fb4:	14c0000f 	ldh	r19,0(r2)
   11fb8:	10800104 	addi	r2,r2,4
   11fbc:	d8802215 	stw	r2,136(sp)
   11fc0:	9829d7fa 	srai	r20,r19,31
   11fc4:	a005883a 	mov	r2,r20
   11fc8:	003d8506 	br	115e0 <__alt_exception_stack_pointer+0xf80115e0>
   11fcc:	8880100c 	andi	r2,r17,64
   11fd0:	10002b26 	beq	r2,zero,12080 <___vfiprintf_internal_r+0x1280>
   11fd4:	d8802217 	ldw	r2,136(sp)
   11fd8:	0029883a 	mov	r20,zero
   11fdc:	14c0000b 	ldhu	r19,0(r2)
   11fe0:	10800104 	addi	r2,r2,4
   11fe4:	d8802215 	stw	r2,136(sp)
   11fe8:	003d5d06 	br	11560 <__alt_exception_stack_pointer+0xf8011560>
   11fec:	d9402017 	ldw	r5,128(sp)
   11ff0:	d9002117 	ldw	r4,132(sp)
   11ff4:	d9801a04 	addi	r6,sp,104
   11ff8:	d8c02a15 	stw	r3,168(sp)
   11ffc:	d9c02b15 	stw	r7,172(sp)
   12000:	0010cec0 	call	10cec <__sprint_r.part.0>
   12004:	d8c02a17 	ldw	r3,168(sp)
   12008:	d9c02b17 	ldw	r7,172(sp)
   1200c:	103eb41e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   12010:	d9001b17 	ldw	r4,108(sp)
   12014:	d8801c17 	ldw	r2,112(sp)
   12018:	d811883a 	mov	r8,sp
   1201c:	21400044 	addi	r5,r4,1
   12020:	003e6706 	br	119c0 <__alt_exception_stack_pointer+0xf80119c0>
   12024:	00bfffc4 	movi	r2,-1
   12028:	003c4a06 	br	11154 <__alt_exception_stack_pointer+0xf8011154>
   1202c:	9805883a 	mov	r2,r19
   12030:	003ee806 	br	11bd4 <__alt_exception_stack_pointer+0xf8011bd4>
   12034:	d8c02217 	ldw	r3,136(sp)
   12038:	0029883a 	mov	r20,zero
   1203c:	18800104 	addi	r2,r3,4
   12040:	1cc0000b 	ldhu	r19,0(r3)
   12044:	803f9e0e 	bge	r16,zero,11ec0 <__alt_exception_stack_pointer+0xf8011ec0>
   12048:	003dd706 	br	117a8 <__alt_exception_stack_pointer+0xf80117a8>
   1204c:	d8c02217 	ldw	r3,136(sp)
   12050:	d9002417 	ldw	r4,144(sp)
   12054:	18800017 	ldw	r2,0(r3)
   12058:	18c00104 	addi	r3,r3,4
   1205c:	d8c02215 	stw	r3,136(sp)
   12060:	11000015 	stw	r4,0(r2)
   12064:	003b9a06 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   12068:	d8c02217 	ldw	r3,136(sp)
   1206c:	0029883a 	mov	r20,zero
   12070:	18800104 	addi	r2,r3,4
   12074:	1cc0000b 	ldhu	r19,0(r3)
   12078:	803db20e 	bge	r16,zero,11744 <__alt_exception_stack_pointer+0xf8011744>
   1207c:	003fb906 	br	11f64 <__alt_exception_stack_pointer+0xf8011f64>
   12080:	d9002217 	ldw	r4,136(sp)
   12084:	0029883a 	mov	r20,zero
   12088:	24c00017 	ldw	r19,0(r4)
   1208c:	21000104 	addi	r4,r4,4
   12090:	d9002215 	stw	r4,136(sp)
   12094:	003d3206 	br	11560 <__alt_exception_stack_pointer+0xf8011560>
   12098:	d8c02217 	ldw	r3,136(sp)
   1209c:	1cc00017 	ldw	r19,0(r3)
   120a0:	18c00104 	addi	r3,r3,4
   120a4:	d8c02215 	stw	r3,136(sp)
   120a8:	9829d7fa 	srai	r20,r19,31
   120ac:	a005883a 	mov	r2,r20
   120b0:	003d4b06 	br	115e0 <__alt_exception_stack_pointer+0xf80115e0>
   120b4:	0009883a 	mov	r4,zero
   120b8:	01400044 	movi	r5,1
   120bc:	d811883a 	mov	r8,sp
   120c0:	003e4f06 	br	11a00 <__alt_exception_stack_pointer+0xf8011a00>
   120c4:	d8c02215 	stw	r3,136(sp)
   120c8:	002b883a 	mov	r21,zero
   120cc:	003db806 	br	117b0 <__alt_exception_stack_pointer+0xf80117b0>
   120d0:	d811883a 	mov	r8,sp
   120d4:	003e9606 	br	11b30 <__alt_exception_stack_pointer+0xf8011b30>
   120d8:	010000b4 	movhi	r4,2
   120dc:	21204104 	addi	r4,r4,-32508
   120e0:	d9002315 	stw	r4,140(sp)
   120e4:	003e6306 	br	11a74 <__alt_exception_stack_pointer+0xf8011a74>
   120e8:	b0c00043 	ldbu	r3,1(r22)
   120ec:	8c400814 	ori	r17,r17,32
   120f0:	b5800044 	addi	r22,r22,1
   120f4:	18c03fcc 	andi	r3,r3,255
   120f8:	18c0201c 	xori	r3,r3,128
   120fc:	18ffe004 	addi	r3,r3,-128
   12100:	003b9c06 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   12104:	b809883a 	mov	r4,r23
   12108:	da002a15 	stw	r8,168(sp)
   1210c:	00092000 	call	9200 <strlen>
   12110:	1029883a 	mov	r20,r2
   12114:	dd401d83 	ldbu	r21,118(sp)
   12118:	df002215 	stw	fp,136(sp)
   1211c:	0021883a 	mov	r16,zero
   12120:	da002a17 	ldw	r8,168(sp)
   12124:	003c3906 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   12128:	d9402017 	ldw	r5,128(sp)
   1212c:	d9002117 	ldw	r4,132(sp)
   12130:	d9801a04 	addi	r6,sp,104
   12134:	0010cec0 	call	10cec <__sprint_r.part.0>
   12138:	103e691e 	bne	r2,zero,11ae0 <__alt_exception_stack_pointer+0xf8011ae0>
   1213c:	d9001b17 	ldw	r4,108(sp)
   12140:	d8801c17 	ldw	r2,112(sp)
   12144:	d811883a 	mov	r8,sp
   12148:	21400044 	addi	r5,r4,1
   1214c:	003e2e06 	br	11a08 <__alt_exception_stack_pointer+0xf8011a08>
   12150:	010000b4 	movhi	r4,2
   12154:	21204504 	addi	r4,r4,-32492
   12158:	d9002315 	stw	r4,140(sp)
   1215c:	d9001b17 	ldw	r4,108(sp)
   12160:	21000044 	addi	r4,r4,1
   12164:	003c5e06 	br	112e0 <__alt_exception_stack_pointer+0xf80112e0>
   12168:	002b883a 	mov	r21,zero
   1216c:	00800084 	movi	r2,2
   12170:	10803fcc 	andi	r2,r2,255
   12174:	01000044 	movi	r4,1
   12178:	11002b26 	beq	r2,r4,12228 <___vfiprintf_internal_r+0x1428>
   1217c:	01000084 	movi	r4,2
   12180:	11002b1e 	bne	r2,r4,12230 <___vfiprintf_internal_r+0x1430>
   12184:	1823883a 	mov	r17,r3
   12188:	003ee506 	br	11d20 <__alt_exception_stack_pointer+0xf8011d20>
   1218c:	8807883a 	mov	r3,r17
   12190:	00800044 	movi	r2,1
   12194:	003ff606 	br	12170 <__alt_exception_stack_pointer+0xf8012170>
   12198:	00800184 	movi	r2,6
   1219c:	1400012e 	bgeu	r2,r16,121a4 <___vfiprintf_internal_r+0x13a4>
   121a0:	1021883a 	mov	r16,r2
   121a4:	8029883a 	mov	r20,r16
   121a8:	8027883a 	mov	r19,r16
   121ac:	80002216 	blt	r16,zero,12238 <___vfiprintf_internal_r+0x1438>
   121b0:	05c00074 	movhi	r23,1
   121b4:	df002215 	stw	fp,136(sp)
   121b8:	bddfe604 	addi	r23,r23,32664
   121bc:	003cfb06 	br	115ac <__alt_exception_stack_pointer+0xf80115ac>
   121c0:	d9002217 	ldw	r4,136(sp)
   121c4:	d9402417 	ldw	r5,144(sp)
   121c8:	20800017 	ldw	r2,0(r4)
   121cc:	21000104 	addi	r4,r4,4
   121d0:	d9002215 	stw	r4,136(sp)
   121d4:	11400015 	stw	r5,0(r2)
   121d8:	003b3d06 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   121dc:	014000b4 	movhi	r5,2
   121e0:	29604504 	addi	r5,r5,-32492
   121e4:	d9402315 	stw	r5,140(sp)
   121e8:	d9401b17 	ldw	r5,108(sp)
   121ec:	29400044 	addi	r5,r5,1
   121f0:	003e6d06 	br	11ba8 <__alt_exception_stack_pointer+0xf8011ba8>
   121f4:	8029883a 	mov	r20,r16
   121f8:	dd401d83 	ldbu	r21,118(sp)
   121fc:	df002215 	stw	fp,136(sp)
   12200:	0021883a 	mov	r16,zero
   12204:	003c0106 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   12208:	00c000b4 	movhi	r3,2
   1220c:	18e04104 	addi	r3,r3,-32508
   12210:	d8c02315 	stw	r3,140(sp)
   12214:	280d883a 	mov	r6,r5
   12218:	003c6906 	br	113c0 <__alt_exception_stack_pointer+0xf80113c0>
   1221c:	802d883a 	mov	r22,r16
   12220:	0021883a 	mov	r16,zero
   12224:	003b5406 	br	10f78 <__alt_exception_stack_pointer+0xf8010f78>
   12228:	1823883a 	mov	r17,r3
   1222c:	003cf306 	br	115fc <__alt_exception_stack_pointer+0xf80115fc>
   12230:	1823883a 	mov	r17,r3
   12234:	003cad06 	br	114ec <__alt_exception_stack_pointer+0xf80114ec>
   12238:	0027883a 	mov	r19,zero
   1223c:	003fdc06 	br	121b0 <__alt_exception_stack_pointer+0xf80121b0>
   12240:	d9402217 	ldw	r5,136(sp)
   12244:	8005883a 	mov	r2,r16
   12248:	b0c00043 	ldbu	r3,1(r22)
   1224c:	2c000017 	ldw	r16,0(r5)
   12250:	29000104 	addi	r4,r5,4
   12254:	d9002215 	stw	r4,136(sp)
   12258:	102d883a 	mov	r22,r2
   1225c:	803fa50e 	bge	r16,zero,120f4 <__alt_exception_stack_pointer+0xf80120f4>
   12260:	18c03fcc 	andi	r3,r3,255
   12264:	18c0201c 	xori	r3,r3,128
   12268:	043fffc4 	movi	r16,-1
   1226c:	18ffe004 	addi	r3,r3,-128
   12270:	003b4006 	br	10f74 <__alt_exception_stack_pointer+0xf8010f74>
   12274:	d9402303 	ldbu	r5,140(sp)
   12278:	d9401d85 	stb	r5,118(sp)
   1227c:	003cae06 	br	11538 <__alt_exception_stack_pointer+0xf8011538>
   12280:	d8c02303 	ldbu	r3,140(sp)
   12284:	d8c01d85 	stb	r3,118(sp)
   12288:	003d1406 	br	116dc <__alt_exception_stack_pointer+0xf80116dc>
   1228c:	d8c02303 	ldbu	r3,140(sp)
   12290:	d8c01d85 	stb	r3,118(sp)
   12294:	003cca06 	br	115c0 <__alt_exception_stack_pointer+0xf80115c0>
   12298:	8880004c 	andi	r2,r17,1
   1229c:	002b883a 	mov	r21,zero
   122a0:	10000526 	beq	r2,zero,122b8 <___vfiprintf_internal_r+0x14b8>
   122a4:	00800c04 	movi	r2,48
   122a8:	d88019c5 	stb	r2,103(sp)
   122ac:	dd002817 	ldw	r20,160(sp)
   122b0:	ddc019c4 	addi	r23,sp,103
   122b4:	003bd506 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   122b8:	0029883a 	mov	r20,zero
   122bc:	ddc01a04 	addi	r23,sp,104
   122c0:	003bd206 	br	1120c <__alt_exception_stack_pointer+0xf801120c>
   122c4:	d9002303 	ldbu	r4,140(sp)
   122c8:	d9001d85 	stb	r4,118(sp)
   122cc:	003da606 	br	11968 <__alt_exception_stack_pointer+0xf8011968>
   122d0:	d8c02303 	ldbu	r3,140(sp)
   122d4:	d8c01d85 	stb	r3,118(sp)
   122d8:	003c7606 	br	114b4 <__alt_exception_stack_pointer+0xf80114b4>
   122dc:	d8c02303 	ldbu	r3,140(sp)
   122e0:	d8c01d85 	stb	r3,118(sp)
   122e4:	003c6506 	br	1147c <__alt_exception_stack_pointer+0xf801147c>
   122e8:	d9002303 	ldbu	r4,140(sp)
   122ec:	d9001d85 	stb	r4,118(sp)
   122f0:	003d3d06 	br	117e8 <__alt_exception_stack_pointer+0xf80117e8>
   122f4:	d8c02303 	ldbu	r3,140(sp)
   122f8:	d8c01d85 	stb	r3,118(sp)
   122fc:	003d1d06 	br	11774 <__alt_exception_stack_pointer+0xf8011774>
   12300:	d8c02303 	ldbu	r3,140(sp)
   12304:	d8c01d85 	stb	r3,118(sp)
   12308:	003d0306 	br	11718 <__alt_exception_stack_pointer+0xf8011718>

0001230c <__vfiprintf_internal>:
   1230c:	008000b4 	movhi	r2,2
   12310:	10a92a04 	addi	r2,r2,-23384
   12314:	300f883a 	mov	r7,r6
   12318:	280d883a 	mov	r6,r5
   1231c:	200b883a 	mov	r5,r4
   12320:	11000017 	ldw	r4,0(r2)
   12324:	0010e001 	jmpi	10e00 <___vfiprintf_internal_r>

00012328 <__sbprintf>:
   12328:	2880030b 	ldhu	r2,12(r5)
   1232c:	2ac01917 	ldw	r11,100(r5)
   12330:	2a80038b 	ldhu	r10,14(r5)
   12334:	2a400717 	ldw	r9,28(r5)
   12338:	2a000917 	ldw	r8,36(r5)
   1233c:	defee204 	addi	sp,sp,-1144
   12340:	00c10004 	movi	r3,1024
   12344:	dc011a15 	stw	r16,1128(sp)
   12348:	10bfff4c 	andi	r2,r2,65533
   1234c:	2821883a 	mov	r16,r5
   12350:	d8cb883a 	add	r5,sp,r3
   12354:	dc811c15 	stw	r18,1136(sp)
   12358:	dc411b15 	stw	r17,1132(sp)
   1235c:	dfc11d15 	stw	ra,1140(sp)
   12360:	2025883a 	mov	r18,r4
   12364:	d881030d 	sth	r2,1036(sp)
   12368:	dac11915 	stw	r11,1124(sp)
   1236c:	da81038d 	sth	r10,1038(sp)
   12370:	da410715 	stw	r9,1052(sp)
   12374:	da010915 	stw	r8,1060(sp)
   12378:	dec10015 	stw	sp,1024(sp)
   1237c:	dec10415 	stw	sp,1040(sp)
   12380:	d8c10215 	stw	r3,1032(sp)
   12384:	d8c10515 	stw	r3,1044(sp)
   12388:	d8010615 	stw	zero,1048(sp)
   1238c:	0010e000 	call	10e00 <___vfiprintf_internal_r>
   12390:	1023883a 	mov	r17,r2
   12394:	10000416 	blt	r2,zero,123a8 <__sbprintf+0x80>
   12398:	d9410004 	addi	r5,sp,1024
   1239c:	9009883a 	mov	r4,r18
   123a0:	000ddac0 	call	ddac <_fflush_r>
   123a4:	10000d1e 	bne	r2,zero,123dc <__sbprintf+0xb4>
   123a8:	d881030b 	ldhu	r2,1036(sp)
   123ac:	1080100c 	andi	r2,r2,64
   123b0:	10000326 	beq	r2,zero,123c0 <__sbprintf+0x98>
   123b4:	8080030b 	ldhu	r2,12(r16)
   123b8:	10801014 	ori	r2,r2,64
   123bc:	8080030d 	sth	r2,12(r16)
   123c0:	8805883a 	mov	r2,r17
   123c4:	dfc11d17 	ldw	ra,1140(sp)
   123c8:	dc811c17 	ldw	r18,1136(sp)
   123cc:	dc411b17 	ldw	r17,1132(sp)
   123d0:	dc011a17 	ldw	r16,1128(sp)
   123d4:	dec11e04 	addi	sp,sp,1144
   123d8:	f800283a 	ret
   123dc:	047fffc4 	movi	r17,-1
   123e0:	003ff106 	br	123a8 <__alt_exception_stack_pointer+0xf80123a8>

000123e4 <_write_r>:
   123e4:	defffd04 	addi	sp,sp,-12
   123e8:	2805883a 	mov	r2,r5
   123ec:	dc000015 	stw	r16,0(sp)
   123f0:	040000b4 	movhi	r16,2
   123f4:	dc400115 	stw	r17,4(sp)
   123f8:	300b883a 	mov	r5,r6
   123fc:	84321d04 	addi	r16,r16,-14220
   12400:	2023883a 	mov	r17,r4
   12404:	380d883a 	mov	r6,r7
   12408:	1009883a 	mov	r4,r2
   1240c:	dfc00215 	stw	ra,8(sp)
   12410:	80000015 	stw	zero,0(r16)
   12414:	001450c0 	call	1450c <write>
   12418:	00ffffc4 	movi	r3,-1
   1241c:	10c00526 	beq	r2,r3,12434 <_write_r+0x50>
   12420:	dfc00217 	ldw	ra,8(sp)
   12424:	dc400117 	ldw	r17,4(sp)
   12428:	dc000017 	ldw	r16,0(sp)
   1242c:	dec00304 	addi	sp,sp,12
   12430:	f800283a 	ret
   12434:	80c00017 	ldw	r3,0(r16)
   12438:	183ff926 	beq	r3,zero,12420 <__alt_exception_stack_pointer+0xf8012420>
   1243c:	88c00015 	stw	r3,0(r17)
   12440:	003ff706 	br	12420 <__alt_exception_stack_pointer+0xf8012420>

00012444 <_close_r>:
   12444:	defffd04 	addi	sp,sp,-12
   12448:	dc000015 	stw	r16,0(sp)
   1244c:	040000b4 	movhi	r16,2
   12450:	dc400115 	stw	r17,4(sp)
   12454:	84321d04 	addi	r16,r16,-14220
   12458:	2023883a 	mov	r17,r4
   1245c:	2809883a 	mov	r4,r5
   12460:	dfc00215 	stw	ra,8(sp)
   12464:	80000015 	stw	zero,0(r16)
   12468:	0013a200 	call	13a20 <close>
   1246c:	00ffffc4 	movi	r3,-1
   12470:	10c00526 	beq	r2,r3,12488 <_close_r+0x44>
   12474:	dfc00217 	ldw	ra,8(sp)
   12478:	dc400117 	ldw	r17,4(sp)
   1247c:	dc000017 	ldw	r16,0(sp)
   12480:	dec00304 	addi	sp,sp,12
   12484:	f800283a 	ret
   12488:	80c00017 	ldw	r3,0(r16)
   1248c:	183ff926 	beq	r3,zero,12474 <__alt_exception_stack_pointer+0xf8012474>
   12490:	88c00015 	stw	r3,0(r17)
   12494:	003ff706 	br	12474 <__alt_exception_stack_pointer+0xf8012474>

00012498 <_calloc_r>:
   12498:	defffe04 	addi	sp,sp,-8
   1249c:	2805883a 	mov	r2,r5
   124a0:	dc000015 	stw	r16,0(sp)
   124a4:	300b883a 	mov	r5,r6
   124a8:	2021883a 	mov	r16,r4
   124ac:	1009883a 	mov	r4,r2
   124b0:	dfc00115 	stw	ra,4(sp)
   124b4:	0005b840 	call	5b84 <__mulsi3>
   124b8:	100b883a 	mov	r5,r2
   124bc:	8009883a 	mov	r4,r16
   124c0:	00088600 	call	8860 <_malloc_r>
   124c4:	10002926 	beq	r2,zero,1256c <_calloc_r+0xd4>
   124c8:	11bfff17 	ldw	r6,-4(r2)
   124cc:	1021883a 	mov	r16,r2
   124d0:	00bfff04 	movi	r2,-4
   124d4:	308c703a 	and	r6,r6,r2
   124d8:	00c00904 	movi	r3,36
   124dc:	308d883a 	add	r6,r6,r2
   124e0:	19801636 	bltu	r3,r6,1253c <_calloc_r+0xa4>
   124e4:	008004c4 	movi	r2,19
   124e8:	11800b2e 	bgeu	r2,r6,12518 <_calloc_r+0x80>
   124ec:	80000015 	stw	zero,0(r16)
   124f0:	80000115 	stw	zero,4(r16)
   124f4:	008006c4 	movi	r2,27
   124f8:	11801a2e 	bgeu	r2,r6,12564 <_calloc_r+0xcc>
   124fc:	80000215 	stw	zero,8(r16)
   12500:	80000315 	stw	zero,12(r16)
   12504:	30c0151e 	bne	r6,r3,1255c <_calloc_r+0xc4>
   12508:	80000415 	stw	zero,16(r16)
   1250c:	80800604 	addi	r2,r16,24
   12510:	80000515 	stw	zero,20(r16)
   12514:	00000106 	br	1251c <_calloc_r+0x84>
   12518:	8005883a 	mov	r2,r16
   1251c:	10000015 	stw	zero,0(r2)
   12520:	10000115 	stw	zero,4(r2)
   12524:	10000215 	stw	zero,8(r2)
   12528:	8005883a 	mov	r2,r16
   1252c:	dfc00117 	ldw	ra,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00204 	addi	sp,sp,8
   12538:	f800283a 	ret
   1253c:	000b883a 	mov	r5,zero
   12540:	8009883a 	mov	r4,r16
   12544:	000f28c0 	call	f28c <memset>
   12548:	8005883a 	mov	r2,r16
   1254c:	dfc00117 	ldw	ra,4(sp)
   12550:	dc000017 	ldw	r16,0(sp)
   12554:	dec00204 	addi	sp,sp,8
   12558:	f800283a 	ret
   1255c:	80800404 	addi	r2,r16,16
   12560:	003fee06 	br	1251c <__alt_exception_stack_pointer+0xf801251c>
   12564:	80800204 	addi	r2,r16,8
   12568:	003fec06 	br	1251c <__alt_exception_stack_pointer+0xf801251c>
   1256c:	0005883a 	mov	r2,zero
   12570:	003fee06 	br	1252c <__alt_exception_stack_pointer+0xf801252c>

00012574 <_fclose_r>:
   12574:	28003926 	beq	r5,zero,1265c <_fclose_r+0xe8>
   12578:	defffc04 	addi	sp,sp,-16
   1257c:	dc400115 	stw	r17,4(sp)
   12580:	dc000015 	stw	r16,0(sp)
   12584:	dfc00315 	stw	ra,12(sp)
   12588:	dc800215 	stw	r18,8(sp)
   1258c:	2023883a 	mov	r17,r4
   12590:	2821883a 	mov	r16,r5
   12594:	20000226 	beq	r4,zero,125a0 <_fclose_r+0x2c>
   12598:	20800e17 	ldw	r2,56(r4)
   1259c:	10002726 	beq	r2,zero,1263c <_fclose_r+0xc8>
   125a0:	8080030f 	ldh	r2,12(r16)
   125a4:	1000071e 	bne	r2,zero,125c4 <_fclose_r+0x50>
   125a8:	0005883a 	mov	r2,zero
   125ac:	dfc00317 	ldw	ra,12(sp)
   125b0:	dc800217 	ldw	r18,8(sp)
   125b4:	dc400117 	ldw	r17,4(sp)
   125b8:	dc000017 	ldw	r16,0(sp)
   125bc:	dec00404 	addi	sp,sp,16
   125c0:	f800283a 	ret
   125c4:	800b883a 	mov	r5,r16
   125c8:	8809883a 	mov	r4,r17
   125cc:	000db900 	call	db90 <__sflush_r>
   125d0:	1025883a 	mov	r18,r2
   125d4:	80800b17 	ldw	r2,44(r16)
   125d8:	10000426 	beq	r2,zero,125ec <_fclose_r+0x78>
   125dc:	81400717 	ldw	r5,28(r16)
   125e0:	8809883a 	mov	r4,r17
   125e4:	103ee83a 	callr	r2
   125e8:	10001616 	blt	r2,zero,12644 <_fclose_r+0xd0>
   125ec:	8080030b 	ldhu	r2,12(r16)
   125f0:	1080200c 	andi	r2,r2,128
   125f4:	1000151e 	bne	r2,zero,1264c <_fclose_r+0xd8>
   125f8:	81400c17 	ldw	r5,48(r16)
   125fc:	28000526 	beq	r5,zero,12614 <_fclose_r+0xa0>
   12600:	80801004 	addi	r2,r16,64
   12604:	28800226 	beq	r5,r2,12610 <_fclose_r+0x9c>
   12608:	8809883a 	mov	r4,r17
   1260c:	000e30c0 	call	e30c <_free_r>
   12610:	80000c15 	stw	zero,48(r16)
   12614:	81401117 	ldw	r5,68(r16)
   12618:	28000326 	beq	r5,zero,12628 <_fclose_r+0xb4>
   1261c:	8809883a 	mov	r4,r17
   12620:	000e30c0 	call	e30c <_free_r>
   12624:	80001115 	stw	zero,68(r16)
   12628:	000e1a80 	call	e1a8 <__sfp_lock_acquire>
   1262c:	8000030d 	sth	zero,12(r16)
   12630:	000e1ac0 	call	e1ac <__sfp_lock_release>
   12634:	9005883a 	mov	r2,r18
   12638:	003fdc06 	br	125ac <__alt_exception_stack_pointer+0xf80125ac>
   1263c:	000e1980 	call	e198 <__sinit>
   12640:	003fd706 	br	125a0 <__alt_exception_stack_pointer+0xf80125a0>
   12644:	04bfffc4 	movi	r18,-1
   12648:	003fe806 	br	125ec <__alt_exception_stack_pointer+0xf80125ec>
   1264c:	81400417 	ldw	r5,16(r16)
   12650:	8809883a 	mov	r4,r17
   12654:	000e30c0 	call	e30c <_free_r>
   12658:	003fe706 	br	125f8 <__alt_exception_stack_pointer+0xf80125f8>
   1265c:	0005883a 	mov	r2,zero
   12660:	f800283a 	ret

00012664 <fclose>:
   12664:	008000b4 	movhi	r2,2
   12668:	10a92a04 	addi	r2,r2,-23384
   1266c:	200b883a 	mov	r5,r4
   12670:	11000017 	ldw	r4,0(r2)
   12674:	00125741 	jmpi	12574 <_fclose_r>

00012678 <__fputwc>:
   12678:	defff804 	addi	sp,sp,-32
   1267c:	dcc00415 	stw	r19,16(sp)
   12680:	dc800315 	stw	r18,12(sp)
   12684:	dc000115 	stw	r16,4(sp)
   12688:	dfc00715 	stw	ra,28(sp)
   1268c:	dd400615 	stw	r21,24(sp)
   12690:	dd000515 	stw	r20,20(sp)
   12694:	dc400215 	stw	r17,8(sp)
   12698:	2027883a 	mov	r19,r4
   1269c:	2825883a 	mov	r18,r5
   126a0:	3021883a 	mov	r16,r6
   126a4:	000ecf40 	call	ecf4 <__locale_mb_cur_max>
   126a8:	00c00044 	movi	r3,1
   126ac:	10c03e26 	beq	r2,r3,127a8 <__fputwc+0x130>
   126b0:	81c01704 	addi	r7,r16,92
   126b4:	900d883a 	mov	r6,r18
   126b8:	d80b883a 	mov	r5,sp
   126bc:	9809883a 	mov	r4,r19
   126c0:	0012b480 	call	12b48 <_wcrtomb_r>
   126c4:	1029883a 	mov	r20,r2
   126c8:	00bfffc4 	movi	r2,-1
   126cc:	a0802026 	beq	r20,r2,12750 <__fputwc+0xd8>
   126d0:	d9400003 	ldbu	r5,0(sp)
   126d4:	a0001c26 	beq	r20,zero,12748 <__fputwc+0xd0>
   126d8:	0023883a 	mov	r17,zero
   126dc:	05400284 	movi	r21,10
   126e0:	00000906 	br	12708 <__fputwc+0x90>
   126e4:	80800017 	ldw	r2,0(r16)
   126e8:	11400005 	stb	r5,0(r2)
   126ec:	80c00017 	ldw	r3,0(r16)
   126f0:	18c00044 	addi	r3,r3,1
   126f4:	80c00015 	stw	r3,0(r16)
   126f8:	8c400044 	addi	r17,r17,1
   126fc:	dc45883a 	add	r2,sp,r17
   12700:	8d00112e 	bgeu	r17,r20,12748 <__fputwc+0xd0>
   12704:	11400003 	ldbu	r5,0(r2)
   12708:	80c00217 	ldw	r3,8(r16)
   1270c:	18ffffc4 	addi	r3,r3,-1
   12710:	80c00215 	stw	r3,8(r16)
   12714:	183ff30e 	bge	r3,zero,126e4 <__alt_exception_stack_pointer+0xf80126e4>
   12718:	80800617 	ldw	r2,24(r16)
   1271c:	18801916 	blt	r3,r2,12784 <__fputwc+0x10c>
   12720:	80800017 	ldw	r2,0(r16)
   12724:	11400005 	stb	r5,0(r2)
   12728:	80800017 	ldw	r2,0(r16)
   1272c:	10c00003 	ldbu	r3,0(r2)
   12730:	10800044 	addi	r2,r2,1
   12734:	1d402326 	beq	r3,r21,127c4 <__fputwc+0x14c>
   12738:	80800015 	stw	r2,0(r16)
   1273c:	8c400044 	addi	r17,r17,1
   12740:	dc45883a 	add	r2,sp,r17
   12744:	8d3fef36 	bltu	r17,r20,12704 <__alt_exception_stack_pointer+0xf8012704>
   12748:	9005883a 	mov	r2,r18
   1274c:	00000406 	br	12760 <__fputwc+0xe8>
   12750:	80c0030b 	ldhu	r3,12(r16)
   12754:	a005883a 	mov	r2,r20
   12758:	18c01014 	ori	r3,r3,64
   1275c:	80c0030d 	sth	r3,12(r16)
   12760:	dfc00717 	ldw	ra,28(sp)
   12764:	dd400617 	ldw	r21,24(sp)
   12768:	dd000517 	ldw	r20,20(sp)
   1276c:	dcc00417 	ldw	r19,16(sp)
   12770:	dc800317 	ldw	r18,12(sp)
   12774:	dc400217 	ldw	r17,8(sp)
   12778:	dc000117 	ldw	r16,4(sp)
   1277c:	dec00804 	addi	sp,sp,32
   12780:	f800283a 	ret
   12784:	800d883a 	mov	r6,r16
   12788:	29403fcc 	andi	r5,r5,255
   1278c:	9809883a 	mov	r4,r19
   12790:	00129f00 	call	129f0 <__swbuf_r>
   12794:	10bfffe0 	cmpeqi	r2,r2,-1
   12798:	10803fcc 	andi	r2,r2,255
   1279c:	103fd626 	beq	r2,zero,126f8 <__alt_exception_stack_pointer+0xf80126f8>
   127a0:	00bfffc4 	movi	r2,-1
   127a4:	003fee06 	br	12760 <__alt_exception_stack_pointer+0xf8012760>
   127a8:	90ffffc4 	addi	r3,r18,-1
   127ac:	01003f84 	movi	r4,254
   127b0:	20ffbf36 	bltu	r4,r3,126b0 <__alt_exception_stack_pointer+0xf80126b0>
   127b4:	900b883a 	mov	r5,r18
   127b8:	dc800005 	stb	r18,0(sp)
   127bc:	1029883a 	mov	r20,r2
   127c0:	003fc506 	br	126d8 <__alt_exception_stack_pointer+0xf80126d8>
   127c4:	800d883a 	mov	r6,r16
   127c8:	a80b883a 	mov	r5,r21
   127cc:	9809883a 	mov	r4,r19
   127d0:	00129f00 	call	129f0 <__swbuf_r>
   127d4:	10bfffe0 	cmpeqi	r2,r2,-1
   127d8:	003fef06 	br	12798 <__alt_exception_stack_pointer+0xf8012798>

000127dc <_fputwc_r>:
   127dc:	3080030b 	ldhu	r2,12(r6)
   127e0:	10c8000c 	andi	r3,r2,8192
   127e4:	1800051e 	bne	r3,zero,127fc <_fputwc_r+0x20>
   127e8:	30c01917 	ldw	r3,100(r6)
   127ec:	10880014 	ori	r2,r2,8192
   127f0:	3080030d 	sth	r2,12(r6)
   127f4:	18880014 	ori	r2,r3,8192
   127f8:	30801915 	stw	r2,100(r6)
   127fc:	00126781 	jmpi	12678 <__fputwc>

00012800 <fputwc>:
   12800:	008000b4 	movhi	r2,2
   12804:	defffc04 	addi	sp,sp,-16
   12808:	10a92a04 	addi	r2,r2,-23384
   1280c:	dc000115 	stw	r16,4(sp)
   12810:	14000017 	ldw	r16,0(r2)
   12814:	dc400215 	stw	r17,8(sp)
   12818:	dfc00315 	stw	ra,12(sp)
   1281c:	2023883a 	mov	r17,r4
   12820:	80000226 	beq	r16,zero,1282c <fputwc+0x2c>
   12824:	80800e17 	ldw	r2,56(r16)
   12828:	10001026 	beq	r2,zero,1286c <fputwc+0x6c>
   1282c:	2880030b 	ldhu	r2,12(r5)
   12830:	10c8000c 	andi	r3,r2,8192
   12834:	1800051e 	bne	r3,zero,1284c <fputwc+0x4c>
   12838:	28c01917 	ldw	r3,100(r5)
   1283c:	10880014 	ori	r2,r2,8192
   12840:	2880030d 	sth	r2,12(r5)
   12844:	18880014 	ori	r2,r3,8192
   12848:	28801915 	stw	r2,100(r5)
   1284c:	280d883a 	mov	r6,r5
   12850:	8009883a 	mov	r4,r16
   12854:	880b883a 	mov	r5,r17
   12858:	dfc00317 	ldw	ra,12(sp)
   1285c:	dc400217 	ldw	r17,8(sp)
   12860:	dc000117 	ldw	r16,4(sp)
   12864:	dec00404 	addi	sp,sp,16
   12868:	00126781 	jmpi	12678 <__fputwc>
   1286c:	8009883a 	mov	r4,r16
   12870:	d9400015 	stw	r5,0(sp)
   12874:	000e1980 	call	e198 <__sinit>
   12878:	d9400017 	ldw	r5,0(sp)
   1287c:	003feb06 	br	1282c <__alt_exception_stack_pointer+0xf801282c>

00012880 <_fstat_r>:
   12880:	defffd04 	addi	sp,sp,-12
   12884:	2805883a 	mov	r2,r5
   12888:	dc000015 	stw	r16,0(sp)
   1288c:	040000b4 	movhi	r16,2
   12890:	dc400115 	stw	r17,4(sp)
   12894:	84321d04 	addi	r16,r16,-14220
   12898:	2023883a 	mov	r17,r4
   1289c:	300b883a 	mov	r5,r6
   128a0:	1009883a 	mov	r4,r2
   128a4:	dfc00215 	stw	ra,8(sp)
   128a8:	80000015 	stw	zero,0(r16)
   128ac:	0013d100 	call	13d10 <fstat>
   128b0:	00ffffc4 	movi	r3,-1
   128b4:	10c00526 	beq	r2,r3,128cc <_fstat_r+0x4c>
   128b8:	dfc00217 	ldw	ra,8(sp)
   128bc:	dc400117 	ldw	r17,4(sp)
   128c0:	dc000017 	ldw	r16,0(sp)
   128c4:	dec00304 	addi	sp,sp,12
   128c8:	f800283a 	ret
   128cc:	80c00017 	ldw	r3,0(r16)
   128d0:	183ff926 	beq	r3,zero,128b8 <__alt_exception_stack_pointer+0xf80128b8>
   128d4:	88c00015 	stw	r3,0(r17)
   128d8:	003ff706 	br	128b8 <__alt_exception_stack_pointer+0xf80128b8>

000128dc <_isatty_r>:
   128dc:	defffd04 	addi	sp,sp,-12
   128e0:	dc000015 	stw	r16,0(sp)
   128e4:	040000b4 	movhi	r16,2
   128e8:	dc400115 	stw	r17,4(sp)
   128ec:	84321d04 	addi	r16,r16,-14220
   128f0:	2023883a 	mov	r17,r4
   128f4:	2809883a 	mov	r4,r5
   128f8:	dfc00215 	stw	ra,8(sp)
   128fc:	80000015 	stw	zero,0(r16)
   12900:	0013e040 	call	13e04 <isatty>
   12904:	00ffffc4 	movi	r3,-1
   12908:	10c00526 	beq	r2,r3,12920 <_isatty_r+0x44>
   1290c:	dfc00217 	ldw	ra,8(sp)
   12910:	dc400117 	ldw	r17,4(sp)
   12914:	dc000017 	ldw	r16,0(sp)
   12918:	dec00304 	addi	sp,sp,12
   1291c:	f800283a 	ret
   12920:	80c00017 	ldw	r3,0(r16)
   12924:	183ff926 	beq	r3,zero,1290c <__alt_exception_stack_pointer+0xf801290c>
   12928:	88c00015 	stw	r3,0(r17)
   1292c:	003ff706 	br	1290c <__alt_exception_stack_pointer+0xf801290c>

00012930 <_lseek_r>:
   12930:	defffd04 	addi	sp,sp,-12
   12934:	2805883a 	mov	r2,r5
   12938:	dc000015 	stw	r16,0(sp)
   1293c:	040000b4 	movhi	r16,2
   12940:	dc400115 	stw	r17,4(sp)
   12944:	300b883a 	mov	r5,r6
   12948:	84321d04 	addi	r16,r16,-14220
   1294c:	2023883a 	mov	r17,r4
   12950:	380d883a 	mov	r6,r7
   12954:	1009883a 	mov	r4,r2
   12958:	dfc00215 	stw	ra,8(sp)
   1295c:	80000015 	stw	zero,0(r16)
   12960:	0013fd80 	call	13fd8 <lseek>
   12964:	00ffffc4 	movi	r3,-1
   12968:	10c00526 	beq	r2,r3,12980 <_lseek_r+0x50>
   1296c:	dfc00217 	ldw	ra,8(sp)
   12970:	dc400117 	ldw	r17,4(sp)
   12974:	dc000017 	ldw	r16,0(sp)
   12978:	dec00304 	addi	sp,sp,12
   1297c:	f800283a 	ret
   12980:	80c00017 	ldw	r3,0(r16)
   12984:	183ff926 	beq	r3,zero,1296c <__alt_exception_stack_pointer+0xf801296c>
   12988:	88c00015 	stw	r3,0(r17)
   1298c:	003ff706 	br	1296c <__alt_exception_stack_pointer+0xf801296c>

00012990 <_read_r>:
   12990:	defffd04 	addi	sp,sp,-12
   12994:	2805883a 	mov	r2,r5
   12998:	dc000015 	stw	r16,0(sp)
   1299c:	040000b4 	movhi	r16,2
   129a0:	dc400115 	stw	r17,4(sp)
   129a4:	300b883a 	mov	r5,r6
   129a8:	84321d04 	addi	r16,r16,-14220
   129ac:	2023883a 	mov	r17,r4
   129b0:	380d883a 	mov	r6,r7
   129b4:	1009883a 	mov	r4,r2
   129b8:	dfc00215 	stw	ra,8(sp)
   129bc:	80000015 	stw	zero,0(r16)
   129c0:	00141b40 	call	141b4 <read>
   129c4:	00ffffc4 	movi	r3,-1
   129c8:	10c00526 	beq	r2,r3,129e0 <_read_r+0x50>
   129cc:	dfc00217 	ldw	ra,8(sp)
   129d0:	dc400117 	ldw	r17,4(sp)
   129d4:	dc000017 	ldw	r16,0(sp)
   129d8:	dec00304 	addi	sp,sp,12
   129dc:	f800283a 	ret
   129e0:	80c00017 	ldw	r3,0(r16)
   129e4:	183ff926 	beq	r3,zero,129cc <__alt_exception_stack_pointer+0xf80129cc>
   129e8:	88c00015 	stw	r3,0(r17)
   129ec:	003ff706 	br	129cc <__alt_exception_stack_pointer+0xf80129cc>

000129f0 <__swbuf_r>:
   129f0:	defffb04 	addi	sp,sp,-20
   129f4:	dcc00315 	stw	r19,12(sp)
   129f8:	dc800215 	stw	r18,8(sp)
   129fc:	dc000015 	stw	r16,0(sp)
   12a00:	dfc00415 	stw	ra,16(sp)
   12a04:	dc400115 	stw	r17,4(sp)
   12a08:	2025883a 	mov	r18,r4
   12a0c:	2827883a 	mov	r19,r5
   12a10:	3021883a 	mov	r16,r6
   12a14:	20000226 	beq	r4,zero,12a20 <__swbuf_r+0x30>
   12a18:	20800e17 	ldw	r2,56(r4)
   12a1c:	10004226 	beq	r2,zero,12b28 <__swbuf_r+0x138>
   12a20:	80800617 	ldw	r2,24(r16)
   12a24:	8100030b 	ldhu	r4,12(r16)
   12a28:	80800215 	stw	r2,8(r16)
   12a2c:	2080020c 	andi	r2,r4,8
   12a30:	10003626 	beq	r2,zero,12b0c <__swbuf_r+0x11c>
   12a34:	80c00417 	ldw	r3,16(r16)
   12a38:	18003426 	beq	r3,zero,12b0c <__swbuf_r+0x11c>
   12a3c:	2088000c 	andi	r2,r4,8192
   12a40:	9c403fcc 	andi	r17,r19,255
   12a44:	10001a26 	beq	r2,zero,12ab0 <__swbuf_r+0xc0>
   12a48:	80800017 	ldw	r2,0(r16)
   12a4c:	81000517 	ldw	r4,20(r16)
   12a50:	10c7c83a 	sub	r3,r2,r3
   12a54:	1900200e 	bge	r3,r4,12ad8 <__swbuf_r+0xe8>
   12a58:	18c00044 	addi	r3,r3,1
   12a5c:	81000217 	ldw	r4,8(r16)
   12a60:	11400044 	addi	r5,r2,1
   12a64:	81400015 	stw	r5,0(r16)
   12a68:	213fffc4 	addi	r4,r4,-1
   12a6c:	81000215 	stw	r4,8(r16)
   12a70:	14c00005 	stb	r19,0(r2)
   12a74:	80800517 	ldw	r2,20(r16)
   12a78:	10c01e26 	beq	r2,r3,12af4 <__swbuf_r+0x104>
   12a7c:	8080030b 	ldhu	r2,12(r16)
   12a80:	1080004c 	andi	r2,r2,1
   12a84:	10000226 	beq	r2,zero,12a90 <__swbuf_r+0xa0>
   12a88:	00800284 	movi	r2,10
   12a8c:	88801926 	beq	r17,r2,12af4 <__swbuf_r+0x104>
   12a90:	8805883a 	mov	r2,r17
   12a94:	dfc00417 	ldw	ra,16(sp)
   12a98:	dcc00317 	ldw	r19,12(sp)
   12a9c:	dc800217 	ldw	r18,8(sp)
   12aa0:	dc400117 	ldw	r17,4(sp)
   12aa4:	dc000017 	ldw	r16,0(sp)
   12aa8:	dec00504 	addi	sp,sp,20
   12aac:	f800283a 	ret
   12ab0:	81401917 	ldw	r5,100(r16)
   12ab4:	00b7ffc4 	movi	r2,-8193
   12ab8:	21080014 	ori	r4,r4,8192
   12abc:	2884703a 	and	r2,r5,r2
   12ac0:	80801915 	stw	r2,100(r16)
   12ac4:	80800017 	ldw	r2,0(r16)
   12ac8:	8100030d 	sth	r4,12(r16)
   12acc:	81000517 	ldw	r4,20(r16)
   12ad0:	10c7c83a 	sub	r3,r2,r3
   12ad4:	193fe016 	blt	r3,r4,12a58 <__alt_exception_stack_pointer+0xf8012a58>
   12ad8:	800b883a 	mov	r5,r16
   12adc:	9009883a 	mov	r4,r18
   12ae0:	000ddac0 	call	ddac <_fflush_r>
   12ae4:	1000071e 	bne	r2,zero,12b04 <__swbuf_r+0x114>
   12ae8:	80800017 	ldw	r2,0(r16)
   12aec:	00c00044 	movi	r3,1
   12af0:	003fda06 	br	12a5c <__alt_exception_stack_pointer+0xf8012a5c>
   12af4:	800b883a 	mov	r5,r16
   12af8:	9009883a 	mov	r4,r18
   12afc:	000ddac0 	call	ddac <_fflush_r>
   12b00:	103fe326 	beq	r2,zero,12a90 <__alt_exception_stack_pointer+0xf8012a90>
   12b04:	00bfffc4 	movi	r2,-1
   12b08:	003fe206 	br	12a94 <__alt_exception_stack_pointer+0xf8012a94>
   12b0c:	800b883a 	mov	r5,r16
   12b10:	9009883a 	mov	r4,r18
   12b14:	000b6540 	call	b654 <__swsetup_r>
   12b18:	103ffa1e 	bne	r2,zero,12b04 <__alt_exception_stack_pointer+0xf8012b04>
   12b1c:	8100030b 	ldhu	r4,12(r16)
   12b20:	80c00417 	ldw	r3,16(r16)
   12b24:	003fc506 	br	12a3c <__alt_exception_stack_pointer+0xf8012a3c>
   12b28:	000e1980 	call	e198 <__sinit>
   12b2c:	003fbc06 	br	12a20 <__alt_exception_stack_pointer+0xf8012a20>

00012b30 <__swbuf>:
   12b30:	008000b4 	movhi	r2,2
   12b34:	10a92a04 	addi	r2,r2,-23384
   12b38:	280d883a 	mov	r6,r5
   12b3c:	200b883a 	mov	r5,r4
   12b40:	11000017 	ldw	r4,0(r2)
   12b44:	00129f01 	jmpi	129f0 <__swbuf_r>

00012b48 <_wcrtomb_r>:
   12b48:	defff604 	addi	sp,sp,-40
   12b4c:	008000b4 	movhi	r2,2
   12b50:	dc800815 	stw	r18,32(sp)
   12b54:	dc400715 	stw	r17,28(sp)
   12b58:	dc000615 	stw	r16,24(sp)
   12b5c:	10a92e04 	addi	r2,r2,-23368
   12b60:	dfc00915 	stw	ra,36(sp)
   12b64:	2021883a 	mov	r16,r4
   12b68:	3823883a 	mov	r17,r7
   12b6c:	14800017 	ldw	r18,0(r2)
   12b70:	28001426 	beq	r5,zero,12bc4 <_wcrtomb_r+0x7c>
   12b74:	d9400415 	stw	r5,16(sp)
   12b78:	d9800515 	stw	r6,20(sp)
   12b7c:	000ece80 	call	ece8 <__locale_charset>
   12b80:	d9800517 	ldw	r6,20(sp)
   12b84:	d9400417 	ldw	r5,16(sp)
   12b88:	100f883a 	mov	r7,r2
   12b8c:	dc400015 	stw	r17,0(sp)
   12b90:	8009883a 	mov	r4,r16
   12b94:	903ee83a 	callr	r18
   12b98:	00ffffc4 	movi	r3,-1
   12b9c:	10c0031e 	bne	r2,r3,12bac <_wcrtomb_r+0x64>
   12ba0:	88000015 	stw	zero,0(r17)
   12ba4:	00c02284 	movi	r3,138
   12ba8:	80c00015 	stw	r3,0(r16)
   12bac:	dfc00917 	ldw	ra,36(sp)
   12bb0:	dc800817 	ldw	r18,32(sp)
   12bb4:	dc400717 	ldw	r17,28(sp)
   12bb8:	dc000617 	ldw	r16,24(sp)
   12bbc:	dec00a04 	addi	sp,sp,40
   12bc0:	f800283a 	ret
   12bc4:	000ece80 	call	ece8 <__locale_charset>
   12bc8:	100f883a 	mov	r7,r2
   12bcc:	dc400015 	stw	r17,0(sp)
   12bd0:	000d883a 	mov	r6,zero
   12bd4:	d9400104 	addi	r5,sp,4
   12bd8:	8009883a 	mov	r4,r16
   12bdc:	903ee83a 	callr	r18
   12be0:	003fed06 	br	12b98 <__alt_exception_stack_pointer+0xf8012b98>

00012be4 <wcrtomb>:
   12be4:	defff604 	addi	sp,sp,-40
   12be8:	008000b4 	movhi	r2,2
   12bec:	dc800615 	stw	r18,24(sp)
   12bf0:	dc400515 	stw	r17,20(sp)
   12bf4:	10a92a04 	addi	r2,r2,-23384
   12bf8:	dfc00915 	stw	ra,36(sp)
   12bfc:	dd000815 	stw	r20,32(sp)
   12c00:	dcc00715 	stw	r19,28(sp)
   12c04:	dc000415 	stw	r16,16(sp)
   12c08:	3025883a 	mov	r18,r6
   12c0c:	14400017 	ldw	r17,0(r2)
   12c10:	20001926 	beq	r4,zero,12c78 <wcrtomb+0x94>
   12c14:	008000b4 	movhi	r2,2
   12c18:	10a92e04 	addi	r2,r2,-23368
   12c1c:	15000017 	ldw	r20,0(r2)
   12c20:	2021883a 	mov	r16,r4
   12c24:	2827883a 	mov	r19,r5
   12c28:	000ece80 	call	ece8 <__locale_charset>
   12c2c:	100f883a 	mov	r7,r2
   12c30:	dc800015 	stw	r18,0(sp)
   12c34:	980d883a 	mov	r6,r19
   12c38:	800b883a 	mov	r5,r16
   12c3c:	8809883a 	mov	r4,r17
   12c40:	a03ee83a 	callr	r20
   12c44:	00ffffc4 	movi	r3,-1
   12c48:	10c0031e 	bne	r2,r3,12c58 <wcrtomb+0x74>
   12c4c:	90000015 	stw	zero,0(r18)
   12c50:	00c02284 	movi	r3,138
   12c54:	88c00015 	stw	r3,0(r17)
   12c58:	dfc00917 	ldw	ra,36(sp)
   12c5c:	dd000817 	ldw	r20,32(sp)
   12c60:	dcc00717 	ldw	r19,28(sp)
   12c64:	dc800617 	ldw	r18,24(sp)
   12c68:	dc400517 	ldw	r17,20(sp)
   12c6c:	dc000417 	ldw	r16,16(sp)
   12c70:	dec00a04 	addi	sp,sp,40
   12c74:	f800283a 	ret
   12c78:	008000b4 	movhi	r2,2
   12c7c:	10a92e04 	addi	r2,r2,-23368
   12c80:	14000017 	ldw	r16,0(r2)
   12c84:	000ece80 	call	ece8 <__locale_charset>
   12c88:	100f883a 	mov	r7,r2
   12c8c:	dc800015 	stw	r18,0(sp)
   12c90:	000d883a 	mov	r6,zero
   12c94:	d9400104 	addi	r5,sp,4
   12c98:	8809883a 	mov	r4,r17
   12c9c:	803ee83a 	callr	r16
   12ca0:	003fe806 	br	12c44 <__alt_exception_stack_pointer+0xf8012c44>

00012ca4 <__ascii_wctomb>:
   12ca4:	28000526 	beq	r5,zero,12cbc <__ascii_wctomb+0x18>
   12ca8:	00803fc4 	movi	r2,255
   12cac:	11800536 	bltu	r2,r6,12cc4 <__ascii_wctomb+0x20>
   12cb0:	29800005 	stb	r6,0(r5)
   12cb4:	00800044 	movi	r2,1
   12cb8:	f800283a 	ret
   12cbc:	0005883a 	mov	r2,zero
   12cc0:	f800283a 	ret
   12cc4:	00802284 	movi	r2,138
   12cc8:	20800015 	stw	r2,0(r4)
   12ccc:	00bfffc4 	movi	r2,-1
   12cd0:	f800283a 	ret

00012cd4 <_wctomb_r>:
   12cd4:	008000b4 	movhi	r2,2
   12cd8:	defff904 	addi	sp,sp,-28
   12cdc:	10a92e04 	addi	r2,r2,-23368
   12ce0:	dfc00615 	stw	ra,24(sp)
   12ce4:	dc400515 	stw	r17,20(sp)
   12ce8:	dc000415 	stw	r16,16(sp)
   12cec:	3823883a 	mov	r17,r7
   12cf0:	14000017 	ldw	r16,0(r2)
   12cf4:	d9000115 	stw	r4,4(sp)
   12cf8:	d9400215 	stw	r5,8(sp)
   12cfc:	d9800315 	stw	r6,12(sp)
   12d00:	000ece80 	call	ece8 <__locale_charset>
   12d04:	d9800317 	ldw	r6,12(sp)
   12d08:	d9400217 	ldw	r5,8(sp)
   12d0c:	d9000117 	ldw	r4,4(sp)
   12d10:	100f883a 	mov	r7,r2
   12d14:	dc400015 	stw	r17,0(sp)
   12d18:	803ee83a 	callr	r16
   12d1c:	dfc00617 	ldw	ra,24(sp)
   12d20:	dc400517 	ldw	r17,20(sp)
   12d24:	dc000417 	ldw	r16,16(sp)
   12d28:	dec00704 	addi	sp,sp,28
   12d2c:	f800283a 	ret

00012d30 <__udivdi3>:
   12d30:	defff404 	addi	sp,sp,-48
   12d34:	dcc00515 	stw	r19,20(sp)
   12d38:	dc000215 	stw	r16,8(sp)
   12d3c:	dfc00b15 	stw	ra,44(sp)
   12d40:	df000a15 	stw	fp,40(sp)
   12d44:	ddc00915 	stw	r23,36(sp)
   12d48:	dd800815 	stw	r22,32(sp)
   12d4c:	dd400715 	stw	r21,28(sp)
   12d50:	dd000615 	stw	r20,24(sp)
   12d54:	dc800415 	stw	r18,16(sp)
   12d58:	dc400315 	stw	r17,12(sp)
   12d5c:	2027883a 	mov	r19,r4
   12d60:	2821883a 	mov	r16,r5
   12d64:	3800461e 	bne	r7,zero,12e80 <__udivdi3+0x150>
   12d68:	3023883a 	mov	r17,r6
   12d6c:	2025883a 	mov	r18,r4
   12d70:	2980572e 	bgeu	r5,r6,12ed0 <__udivdi3+0x1a0>
   12d74:	00bfffd4 	movui	r2,65535
   12d78:	282d883a 	mov	r22,r5
   12d7c:	1180b236 	bltu	r2,r6,13048 <__udivdi3+0x318>
   12d80:	00803fc4 	movi	r2,255
   12d84:	1185803a 	cmpltu	r2,r2,r6
   12d88:	100490fa 	slli	r2,r2,3
   12d8c:	3086d83a 	srl	r3,r6,r2
   12d90:	01000074 	movhi	r4,1
   12d94:	211f9604 	addi	r4,r4,32344
   12d98:	20c7883a 	add	r3,r4,r3
   12d9c:	18c00003 	ldbu	r3,0(r3)
   12da0:	1885883a 	add	r2,r3,r2
   12da4:	00c00804 	movi	r3,32
   12da8:	1887c83a 	sub	r3,r3,r2
   12dac:	18000526 	beq	r3,zero,12dc4 <__udivdi3+0x94>
   12db0:	80e0983a 	sll	r16,r16,r3
   12db4:	9884d83a 	srl	r2,r19,r2
   12db8:	30e2983a 	sll	r17,r6,r3
   12dbc:	98e4983a 	sll	r18,r19,r3
   12dc0:	142cb03a 	or	r22,r2,r16
   12dc4:	882ad43a 	srli	r21,r17,16
   12dc8:	b009883a 	mov	r4,r22
   12dcc:	8d3fffcc 	andi	r20,r17,65535
   12dd0:	a80b883a 	mov	r5,r21
   12dd4:	0005b2c0 	call	5b2c <__umodsi3>
   12dd8:	b009883a 	mov	r4,r22
   12ddc:	a80b883a 	mov	r5,r21
   12de0:	1027883a 	mov	r19,r2
   12de4:	0005ac80 	call	5ac8 <__udivsi3>
   12de8:	100b883a 	mov	r5,r2
   12dec:	a009883a 	mov	r4,r20
   12df0:	102d883a 	mov	r22,r2
   12df4:	0005b840 	call	5b84 <__mulsi3>
   12df8:	9826943a 	slli	r19,r19,16
   12dfc:	9006d43a 	srli	r3,r18,16
   12e00:	1cc6b03a 	or	r3,r3,r19
   12e04:	1880052e 	bgeu	r3,r2,12e1c <__udivdi3+0xec>
   12e08:	1c47883a 	add	r3,r3,r17
   12e0c:	b13fffc4 	addi	r4,r22,-1
   12e10:	1c400136 	bltu	r3,r17,12e18 <__udivdi3+0xe8>
   12e14:	18814236 	bltu	r3,r2,13320 <__udivdi3+0x5f0>
   12e18:	202d883a 	mov	r22,r4
   12e1c:	18a1c83a 	sub	r16,r3,r2
   12e20:	8009883a 	mov	r4,r16
   12e24:	a80b883a 	mov	r5,r21
   12e28:	0005b2c0 	call	5b2c <__umodsi3>
   12e2c:	1027883a 	mov	r19,r2
   12e30:	8009883a 	mov	r4,r16
   12e34:	a80b883a 	mov	r5,r21
   12e38:	9826943a 	slli	r19,r19,16
   12e3c:	0005ac80 	call	5ac8 <__udivsi3>
   12e40:	100b883a 	mov	r5,r2
   12e44:	a009883a 	mov	r4,r20
   12e48:	94bfffcc 	andi	r18,r18,65535
   12e4c:	1021883a 	mov	r16,r2
   12e50:	94e4b03a 	or	r18,r18,r19
   12e54:	0005b840 	call	5b84 <__mulsi3>
   12e58:	9080052e 	bgeu	r18,r2,12e70 <__udivdi3+0x140>
   12e5c:	8ca5883a 	add	r18,r17,r18
   12e60:	80ffffc4 	addi	r3,r16,-1
   12e64:	94410c36 	bltu	r18,r17,13298 <__udivdi3+0x568>
   12e68:	90810b2e 	bgeu	r18,r2,13298 <__udivdi3+0x568>
   12e6c:	843fff84 	addi	r16,r16,-2
   12e70:	b004943a 	slli	r2,r22,16
   12e74:	0007883a 	mov	r3,zero
   12e78:	1404b03a 	or	r2,r2,r16
   12e7c:	00005e06 	br	12ff8 <__udivdi3+0x2c8>
   12e80:	29c05b36 	bltu	r5,r7,12ff0 <__udivdi3+0x2c0>
   12e84:	00bfffd4 	movui	r2,65535
   12e88:	11c0672e 	bgeu	r2,r7,13028 <__udivdi3+0x2f8>
   12e8c:	00804034 	movhi	r2,256
   12e90:	10bfffc4 	addi	r2,r2,-1
   12e94:	11c10a36 	bltu	r2,r7,132c0 <__udivdi3+0x590>
   12e98:	00800404 	movi	r2,16
   12e9c:	3886d83a 	srl	r3,r7,r2
   12ea0:	01000074 	movhi	r4,1
   12ea4:	211f9604 	addi	r4,r4,32344
   12ea8:	20c7883a 	add	r3,r4,r3
   12eac:	18c00003 	ldbu	r3,0(r3)
   12eb0:	05c00804 	movi	r23,32
   12eb4:	1885883a 	add	r2,r3,r2
   12eb8:	b8afc83a 	sub	r23,r23,r2
   12ebc:	b800671e 	bne	r23,zero,1305c <__udivdi3+0x32c>
   12ec0:	3c010536 	bltu	r7,r16,132d8 <__udivdi3+0x5a8>
   12ec4:	9985403a 	cmpgeu	r2,r19,r6
   12ec8:	0007883a 	mov	r3,zero
   12ecc:	00004a06 	br	12ff8 <__udivdi3+0x2c8>
   12ed0:	3000041e 	bne	r6,zero,12ee4 <__udivdi3+0x1b4>
   12ed4:	000b883a 	mov	r5,zero
   12ed8:	01000044 	movi	r4,1
   12edc:	0005ac80 	call	5ac8 <__udivsi3>
   12ee0:	1023883a 	mov	r17,r2
   12ee4:	00bfffd4 	movui	r2,65535
   12ee8:	1440532e 	bgeu	r2,r17,13038 <__udivdi3+0x308>
   12eec:	00804034 	movhi	r2,256
   12ef0:	10bfffc4 	addi	r2,r2,-1
   12ef4:	1440f436 	bltu	r2,r17,132c8 <__udivdi3+0x598>
   12ef8:	00800404 	movi	r2,16
   12efc:	8886d83a 	srl	r3,r17,r2
   12f00:	01000074 	movhi	r4,1
   12f04:	211f9604 	addi	r4,r4,32344
   12f08:	20c7883a 	add	r3,r4,r3
   12f0c:	18c00003 	ldbu	r3,0(r3)
   12f10:	1885883a 	add	r2,r3,r2
   12f14:	00c00804 	movi	r3,32
   12f18:	1887c83a 	sub	r3,r3,r2
   12f1c:	1800a51e 	bne	r3,zero,131b4 <__udivdi3+0x484>
   12f20:	882ad43a 	srli	r21,r17,16
   12f24:	8461c83a 	sub	r16,r16,r17
   12f28:	8d3fffcc 	andi	r20,r17,65535
   12f2c:	00c00044 	movi	r3,1
   12f30:	a80b883a 	mov	r5,r21
   12f34:	8009883a 	mov	r4,r16
   12f38:	d8c00115 	stw	r3,4(sp)
   12f3c:	0005b2c0 	call	5b2c <__umodsi3>
   12f40:	a80b883a 	mov	r5,r21
   12f44:	8009883a 	mov	r4,r16
   12f48:	1027883a 	mov	r19,r2
   12f4c:	0005ac80 	call	5ac8 <__udivsi3>
   12f50:	a00b883a 	mov	r5,r20
   12f54:	1009883a 	mov	r4,r2
   12f58:	102d883a 	mov	r22,r2
   12f5c:	0005b840 	call	5b84 <__mulsi3>
   12f60:	9826943a 	slli	r19,r19,16
   12f64:	900ed43a 	srli	r7,r18,16
   12f68:	d8c00117 	ldw	r3,4(sp)
   12f6c:	3cceb03a 	or	r7,r7,r19
   12f70:	3880052e 	bgeu	r7,r2,12f88 <__udivdi3+0x258>
   12f74:	3c4f883a 	add	r7,r7,r17
   12f78:	b13fffc4 	addi	r4,r22,-1
   12f7c:	3c400136 	bltu	r7,r17,12f84 <__udivdi3+0x254>
   12f80:	3880e436 	bltu	r7,r2,13314 <__udivdi3+0x5e4>
   12f84:	202d883a 	mov	r22,r4
   12f88:	38a1c83a 	sub	r16,r7,r2
   12f8c:	8009883a 	mov	r4,r16
   12f90:	a80b883a 	mov	r5,r21
   12f94:	d8c00115 	stw	r3,4(sp)
   12f98:	0005b2c0 	call	5b2c <__umodsi3>
   12f9c:	1027883a 	mov	r19,r2
   12fa0:	8009883a 	mov	r4,r16
   12fa4:	a80b883a 	mov	r5,r21
   12fa8:	9826943a 	slli	r19,r19,16
   12fac:	0005ac80 	call	5ac8 <__udivsi3>
   12fb0:	a00b883a 	mov	r5,r20
   12fb4:	1009883a 	mov	r4,r2
   12fb8:	94bfffcc 	andi	r18,r18,65535
   12fbc:	1021883a 	mov	r16,r2
   12fc0:	94e4b03a 	or	r18,r18,r19
   12fc4:	0005b840 	call	5b84 <__mulsi3>
   12fc8:	d8c00117 	ldw	r3,4(sp)
   12fcc:	9080052e 	bgeu	r18,r2,12fe4 <__udivdi3+0x2b4>
   12fd0:	8ca5883a 	add	r18,r17,r18
   12fd4:	813fffc4 	addi	r4,r16,-1
   12fd8:	9440ad36 	bltu	r18,r17,13290 <__udivdi3+0x560>
   12fdc:	9080ac2e 	bgeu	r18,r2,13290 <__udivdi3+0x560>
   12fe0:	843fff84 	addi	r16,r16,-2
   12fe4:	b004943a 	slli	r2,r22,16
   12fe8:	1404b03a 	or	r2,r2,r16
   12fec:	00000206 	br	12ff8 <__udivdi3+0x2c8>
   12ff0:	0007883a 	mov	r3,zero
   12ff4:	0005883a 	mov	r2,zero
   12ff8:	dfc00b17 	ldw	ra,44(sp)
   12ffc:	df000a17 	ldw	fp,40(sp)
   13000:	ddc00917 	ldw	r23,36(sp)
   13004:	dd800817 	ldw	r22,32(sp)
   13008:	dd400717 	ldw	r21,28(sp)
   1300c:	dd000617 	ldw	r20,24(sp)
   13010:	dcc00517 	ldw	r19,20(sp)
   13014:	dc800417 	ldw	r18,16(sp)
   13018:	dc400317 	ldw	r17,12(sp)
   1301c:	dc000217 	ldw	r16,8(sp)
   13020:	dec00c04 	addi	sp,sp,48
   13024:	f800283a 	ret
   13028:	00803fc4 	movi	r2,255
   1302c:	11c5803a 	cmpltu	r2,r2,r7
   13030:	100490fa 	slli	r2,r2,3
   13034:	003f9906 	br	12e9c <__alt_exception_stack_pointer+0xf8012e9c>
   13038:	00803fc4 	movi	r2,255
   1303c:	1445803a 	cmpltu	r2,r2,r17
   13040:	100490fa 	slli	r2,r2,3
   13044:	003fad06 	br	12efc <__alt_exception_stack_pointer+0xf8012efc>
   13048:	00804034 	movhi	r2,256
   1304c:	10bfffc4 	addi	r2,r2,-1
   13050:	11809f36 	bltu	r2,r6,132d0 <__udivdi3+0x5a0>
   13054:	00800404 	movi	r2,16
   13058:	003f4c06 	br	12d8c <__alt_exception_stack_pointer+0xf8012d8c>
   1305c:	3dce983a 	sll	r7,r7,r23
   13060:	30b8d83a 	srl	fp,r6,r2
   13064:	80a2d83a 	srl	r17,r16,r2
   13068:	35cc983a 	sll	r6,r6,r23
   1306c:	3f38b03a 	or	fp,r7,fp
   13070:	e024d43a 	srli	r18,fp,16
   13074:	9884d83a 	srl	r2,r19,r2
   13078:	85e0983a 	sll	r16,r16,r23
   1307c:	8809883a 	mov	r4,r17
   13080:	900b883a 	mov	r5,r18
   13084:	d9800015 	stw	r6,0(sp)
   13088:	1420b03a 	or	r16,r2,r16
   1308c:	0005b2c0 	call	5b2c <__umodsi3>
   13090:	900b883a 	mov	r5,r18
   13094:	8809883a 	mov	r4,r17
   13098:	1029883a 	mov	r20,r2
   1309c:	e5bfffcc 	andi	r22,fp,65535
   130a0:	0005ac80 	call	5ac8 <__udivsi3>
   130a4:	100b883a 	mov	r5,r2
   130a8:	b009883a 	mov	r4,r22
   130ac:	102b883a 	mov	r21,r2
   130b0:	0005b840 	call	5b84 <__mulsi3>
   130b4:	a028943a 	slli	r20,r20,16
   130b8:	8006d43a 	srli	r3,r16,16
   130bc:	1d06b03a 	or	r3,r3,r20
   130c0:	1880042e 	bgeu	r3,r2,130d4 <__udivdi3+0x3a4>
   130c4:	1f07883a 	add	r3,r3,fp
   130c8:	a93fffc4 	addi	r4,r21,-1
   130cc:	1f00892e 	bgeu	r3,fp,132f4 <__udivdi3+0x5c4>
   130d0:	202b883a 	mov	r21,r4
   130d4:	18a3c83a 	sub	r17,r3,r2
   130d8:	8809883a 	mov	r4,r17
   130dc:	900b883a 	mov	r5,r18
   130e0:	0005b2c0 	call	5b2c <__umodsi3>
   130e4:	1029883a 	mov	r20,r2
   130e8:	8809883a 	mov	r4,r17
   130ec:	900b883a 	mov	r5,r18
   130f0:	a028943a 	slli	r20,r20,16
   130f4:	0005ac80 	call	5ac8 <__udivsi3>
   130f8:	100b883a 	mov	r5,r2
   130fc:	b009883a 	mov	r4,r22
   13100:	843fffcc 	andi	r16,r16,65535
   13104:	1023883a 	mov	r17,r2
   13108:	8520b03a 	or	r16,r16,r20
   1310c:	0005b840 	call	5b84 <__mulsi3>
   13110:	8080042e 	bgeu	r16,r2,13124 <__udivdi3+0x3f4>
   13114:	8721883a 	add	r16,r16,fp
   13118:	88ffffc4 	addi	r3,r17,-1
   1311c:	8700712e 	bgeu	r16,fp,132e4 <__udivdi3+0x5b4>
   13120:	1823883a 	mov	r17,r3
   13124:	a80e943a 	slli	r7,r21,16
   13128:	d8c00017 	ldw	r3,0(sp)
   1312c:	80a1c83a 	sub	r16,r16,r2
   13130:	3c64b03a 	or	r18,r7,r17
   13134:	1d3fffcc 	andi	r20,r3,65535
   13138:	9022d43a 	srli	r17,r18,16
   1313c:	95bfffcc 	andi	r22,r18,65535
   13140:	a00b883a 	mov	r5,r20
   13144:	b009883a 	mov	r4,r22
   13148:	182ad43a 	srli	r21,r3,16
   1314c:	0005b840 	call	5b84 <__mulsi3>
   13150:	a00b883a 	mov	r5,r20
   13154:	8809883a 	mov	r4,r17
   13158:	1039883a 	mov	fp,r2
   1315c:	0005b840 	call	5b84 <__mulsi3>
   13160:	8809883a 	mov	r4,r17
   13164:	a80b883a 	mov	r5,r21
   13168:	1029883a 	mov	r20,r2
   1316c:	0005b840 	call	5b84 <__mulsi3>
   13170:	a80b883a 	mov	r5,r21
   13174:	b009883a 	mov	r4,r22
   13178:	1023883a 	mov	r17,r2
   1317c:	0005b840 	call	5b84 <__mulsi3>
   13180:	e006d43a 	srli	r3,fp,16
   13184:	1505883a 	add	r2,r2,r20
   13188:	1887883a 	add	r3,r3,r2
   1318c:	1d00022e 	bgeu	r3,r20,13198 <__udivdi3+0x468>
   13190:	00800074 	movhi	r2,1
   13194:	88a3883a 	add	r17,r17,r2
   13198:	1804d43a 	srli	r2,r3,16
   1319c:	1463883a 	add	r17,r2,r17
   131a0:	84404436 	bltu	r16,r17,132b4 <__udivdi3+0x584>
   131a4:	84403e26 	beq	r16,r17,132a0 <__udivdi3+0x570>
   131a8:	9005883a 	mov	r2,r18
   131ac:	0007883a 	mov	r3,zero
   131b0:	003f9106 	br	12ff8 <__alt_exception_stack_pointer+0xf8012ff8>
   131b4:	88e2983a 	sll	r17,r17,r3
   131b8:	80aed83a 	srl	r23,r16,r2
   131bc:	80e0983a 	sll	r16,r16,r3
   131c0:	882ad43a 	srli	r21,r17,16
   131c4:	9884d83a 	srl	r2,r19,r2
   131c8:	b809883a 	mov	r4,r23
   131cc:	a80b883a 	mov	r5,r21
   131d0:	98e4983a 	sll	r18,r19,r3
   131d4:	142cb03a 	or	r22,r2,r16
   131d8:	0005b2c0 	call	5b2c <__umodsi3>
   131dc:	b809883a 	mov	r4,r23
   131e0:	a80b883a 	mov	r5,r21
   131e4:	1027883a 	mov	r19,r2
   131e8:	8d3fffcc 	andi	r20,r17,65535
   131ec:	0005ac80 	call	5ac8 <__udivsi3>
   131f0:	a009883a 	mov	r4,r20
   131f4:	100b883a 	mov	r5,r2
   131f8:	102f883a 	mov	r23,r2
   131fc:	0005b840 	call	5b84 <__mulsi3>
   13200:	9826943a 	slli	r19,r19,16
   13204:	b008d43a 	srli	r4,r22,16
   13208:	24c8b03a 	or	r4,r4,r19
   1320c:	2080062e 	bgeu	r4,r2,13228 <__udivdi3+0x4f8>
   13210:	2449883a 	add	r4,r4,r17
   13214:	b8ffffc4 	addi	r3,r23,-1
   13218:	24403c36 	bltu	r4,r17,1330c <__udivdi3+0x5dc>
   1321c:	20803b2e 	bgeu	r4,r2,1330c <__udivdi3+0x5dc>
   13220:	bdffff84 	addi	r23,r23,-2
   13224:	2449883a 	add	r4,r4,r17
   13228:	20a1c83a 	sub	r16,r4,r2
   1322c:	a80b883a 	mov	r5,r21
   13230:	8009883a 	mov	r4,r16
   13234:	0005b2c0 	call	5b2c <__umodsi3>
   13238:	a80b883a 	mov	r5,r21
   1323c:	8009883a 	mov	r4,r16
   13240:	1027883a 	mov	r19,r2
   13244:	0005ac80 	call	5ac8 <__udivsi3>
   13248:	a009883a 	mov	r4,r20
   1324c:	100b883a 	mov	r5,r2
   13250:	9826943a 	slli	r19,r19,16
   13254:	1039883a 	mov	fp,r2
   13258:	0005b840 	call	5b84 <__mulsi3>
   1325c:	b13fffcc 	andi	r4,r22,65535
   13260:	24c8b03a 	or	r4,r4,r19
   13264:	2080062e 	bgeu	r4,r2,13280 <__udivdi3+0x550>
   13268:	2449883a 	add	r4,r4,r17
   1326c:	e0ffffc4 	addi	r3,fp,-1
   13270:	24402436 	bltu	r4,r17,13304 <__udivdi3+0x5d4>
   13274:	2080232e 	bgeu	r4,r2,13304 <__udivdi3+0x5d4>
   13278:	e73fff84 	addi	fp,fp,-2
   1327c:	2449883a 	add	r4,r4,r17
   13280:	b82e943a 	slli	r23,r23,16
   13284:	20a1c83a 	sub	r16,r4,r2
   13288:	bf06b03a 	or	r3,r23,fp
   1328c:	003f2806 	br	12f30 <__alt_exception_stack_pointer+0xf8012f30>
   13290:	2021883a 	mov	r16,r4
   13294:	003f5306 	br	12fe4 <__alt_exception_stack_pointer+0xf8012fe4>
   13298:	1821883a 	mov	r16,r3
   1329c:	003ef406 	br	12e70 <__alt_exception_stack_pointer+0xf8012e70>
   132a0:	1806943a 	slli	r3,r3,16
   132a4:	9de6983a 	sll	r19,r19,r23
   132a8:	e73fffcc 	andi	fp,fp,65535
   132ac:	1f07883a 	add	r3,r3,fp
   132b0:	98ffbd2e 	bgeu	r19,r3,131a8 <__alt_exception_stack_pointer+0xf80131a8>
   132b4:	90bfffc4 	addi	r2,r18,-1
   132b8:	0007883a 	mov	r3,zero
   132bc:	003f4e06 	br	12ff8 <__alt_exception_stack_pointer+0xf8012ff8>
   132c0:	00800604 	movi	r2,24
   132c4:	003ef506 	br	12e9c <__alt_exception_stack_pointer+0xf8012e9c>
   132c8:	00800604 	movi	r2,24
   132cc:	003f0b06 	br	12efc <__alt_exception_stack_pointer+0xf8012efc>
   132d0:	00800604 	movi	r2,24
   132d4:	003ead06 	br	12d8c <__alt_exception_stack_pointer+0xf8012d8c>
   132d8:	0007883a 	mov	r3,zero
   132dc:	00800044 	movi	r2,1
   132e0:	003f4506 	br	12ff8 <__alt_exception_stack_pointer+0xf8012ff8>
   132e4:	80bf8e2e 	bgeu	r16,r2,13120 <__alt_exception_stack_pointer+0xf8013120>
   132e8:	8c7fff84 	addi	r17,r17,-2
   132ec:	8721883a 	add	r16,r16,fp
   132f0:	003f8c06 	br	13124 <__alt_exception_stack_pointer+0xf8013124>
   132f4:	18bf762e 	bgeu	r3,r2,130d0 <__alt_exception_stack_pointer+0xf80130d0>
   132f8:	ad7fff84 	addi	r21,r21,-2
   132fc:	1f07883a 	add	r3,r3,fp
   13300:	003f7406 	br	130d4 <__alt_exception_stack_pointer+0xf80130d4>
   13304:	1839883a 	mov	fp,r3
   13308:	003fdd06 	br	13280 <__alt_exception_stack_pointer+0xf8013280>
   1330c:	182f883a 	mov	r23,r3
   13310:	003fc506 	br	13228 <__alt_exception_stack_pointer+0xf8013228>
   13314:	b5bfff84 	addi	r22,r22,-2
   13318:	3c4f883a 	add	r7,r7,r17
   1331c:	003f1a06 	br	12f88 <__alt_exception_stack_pointer+0xf8012f88>
   13320:	b5bfff84 	addi	r22,r22,-2
   13324:	1c47883a 	add	r3,r3,r17
   13328:	003ebc06 	br	12e1c <__alt_exception_stack_pointer+0xf8012e1c>

0001332c <__umoddi3>:
   1332c:	defff304 	addi	sp,sp,-52
   13330:	df000b15 	stw	fp,44(sp)
   13334:	dc400415 	stw	r17,16(sp)
   13338:	dc000315 	stw	r16,12(sp)
   1333c:	dfc00c15 	stw	ra,48(sp)
   13340:	ddc00a15 	stw	r23,40(sp)
   13344:	dd800915 	stw	r22,36(sp)
   13348:	dd400815 	stw	r21,32(sp)
   1334c:	dd000715 	stw	r20,28(sp)
   13350:	dcc00615 	stw	r19,24(sp)
   13354:	dc800515 	stw	r18,20(sp)
   13358:	2021883a 	mov	r16,r4
   1335c:	2823883a 	mov	r17,r5
   13360:	2839883a 	mov	fp,r5
   13364:	3800401e 	bne	r7,zero,13468 <__umoddi3+0x13c>
   13368:	3027883a 	mov	r19,r6
   1336c:	2029883a 	mov	r20,r4
   13370:	2980552e 	bgeu	r5,r6,134c8 <__umoddi3+0x19c>
   13374:	00bfffd4 	movui	r2,65535
   13378:	1180a236 	bltu	r2,r6,13604 <__umoddi3+0x2d8>
   1337c:	01003fc4 	movi	r4,255
   13380:	2189803a 	cmpltu	r4,r4,r6
   13384:	200890fa 	slli	r4,r4,3
   13388:	3104d83a 	srl	r2,r6,r4
   1338c:	00c00074 	movhi	r3,1
   13390:	18df9604 	addi	r3,r3,32344
   13394:	1885883a 	add	r2,r3,r2
   13398:	10c00003 	ldbu	r3,0(r2)
   1339c:	00800804 	movi	r2,32
   133a0:	1909883a 	add	r4,r3,r4
   133a4:	1125c83a 	sub	r18,r2,r4
   133a8:	90000526 	beq	r18,zero,133c0 <__umoddi3+0x94>
   133ac:	8ca2983a 	sll	r17,r17,r18
   133b0:	8108d83a 	srl	r4,r16,r4
   133b4:	34a6983a 	sll	r19,r6,r18
   133b8:	84a8983a 	sll	r20,r16,r18
   133bc:	2478b03a 	or	fp,r4,r17
   133c0:	982cd43a 	srli	r22,r19,16
   133c4:	e009883a 	mov	r4,fp
   133c8:	9dffffcc 	andi	r23,r19,65535
   133cc:	b00b883a 	mov	r5,r22
   133d0:	0005b2c0 	call	5b2c <__umodsi3>
   133d4:	b00b883a 	mov	r5,r22
   133d8:	e009883a 	mov	r4,fp
   133dc:	102b883a 	mov	r21,r2
   133e0:	0005ac80 	call	5ac8 <__udivsi3>
   133e4:	100b883a 	mov	r5,r2
   133e8:	b809883a 	mov	r4,r23
   133ec:	0005b840 	call	5b84 <__mulsi3>
   133f0:	a82a943a 	slli	r21,r21,16
   133f4:	a006d43a 	srli	r3,r20,16
   133f8:	1d46b03a 	or	r3,r3,r21
   133fc:	1880032e 	bgeu	r3,r2,1340c <__umoddi3+0xe0>
   13400:	1cc7883a 	add	r3,r3,r19
   13404:	1cc00136 	bltu	r3,r19,1340c <__umoddi3+0xe0>
   13408:	18813136 	bltu	r3,r2,138d0 <__umoddi3+0x5a4>
   1340c:	18a1c83a 	sub	r16,r3,r2
   13410:	b00b883a 	mov	r5,r22
   13414:	8009883a 	mov	r4,r16
   13418:	0005b2c0 	call	5b2c <__umodsi3>
   1341c:	b00b883a 	mov	r5,r22
   13420:	8009883a 	mov	r4,r16
   13424:	1023883a 	mov	r17,r2
   13428:	0005ac80 	call	5ac8 <__udivsi3>
   1342c:	100b883a 	mov	r5,r2
   13430:	b809883a 	mov	r4,r23
   13434:	8822943a 	slli	r17,r17,16
   13438:	0005b840 	call	5b84 <__mulsi3>
   1343c:	a0ffffcc 	andi	r3,r20,65535
   13440:	1c46b03a 	or	r3,r3,r17
   13444:	1880042e 	bgeu	r3,r2,13458 <__umoddi3+0x12c>
   13448:	1cc7883a 	add	r3,r3,r19
   1344c:	1cc00236 	bltu	r3,r19,13458 <__umoddi3+0x12c>
   13450:	1880012e 	bgeu	r3,r2,13458 <__umoddi3+0x12c>
   13454:	1cc7883a 	add	r3,r3,r19
   13458:	1885c83a 	sub	r2,r3,r2
   1345c:	1484d83a 	srl	r2,r2,r18
   13460:	0007883a 	mov	r3,zero
   13464:	00005306 	br	135b4 <__umoddi3+0x288>
   13468:	29c05036 	bltu	r5,r7,135ac <__umoddi3+0x280>
   1346c:	00bfffd4 	movui	r2,65535
   13470:	11c05c2e 	bgeu	r2,r7,135e4 <__umoddi3+0x2b8>
   13474:	00804034 	movhi	r2,256
   13478:	10bfffc4 	addi	r2,r2,-1
   1347c:	11c10636 	bltu	r2,r7,13898 <__umoddi3+0x56c>
   13480:	01000404 	movi	r4,16
   13484:	3904d83a 	srl	r2,r7,r4
   13488:	00c00074 	movhi	r3,1
   1348c:	18df9604 	addi	r3,r3,32344
   13490:	1885883a 	add	r2,r3,r2
   13494:	14c00003 	ldbu	r19,0(r2)
   13498:	00c00804 	movi	r3,32
   1349c:	9927883a 	add	r19,r19,r4
   134a0:	1ce9c83a 	sub	r20,r3,r19
   134a4:	a0005c1e 	bne	r20,zero,13618 <__umoddi3+0x2ec>
   134a8:	3c400136 	bltu	r7,r17,134b0 <__umoddi3+0x184>
   134ac:	81810a36 	bltu	r16,r6,138d8 <__umoddi3+0x5ac>
   134b0:	8185c83a 	sub	r2,r16,r6
   134b4:	89e3c83a 	sub	r17,r17,r7
   134b8:	8089803a 	cmpltu	r4,r16,r2
   134bc:	8939c83a 	sub	fp,r17,r4
   134c0:	e007883a 	mov	r3,fp
   134c4:	00003b06 	br	135b4 <__umoddi3+0x288>
   134c8:	3000041e 	bne	r6,zero,134dc <__umoddi3+0x1b0>
   134cc:	000b883a 	mov	r5,zero
   134d0:	01000044 	movi	r4,1
   134d4:	0005ac80 	call	5ac8 <__udivsi3>
   134d8:	1027883a 	mov	r19,r2
   134dc:	00bfffd4 	movui	r2,65535
   134e0:	14c0442e 	bgeu	r2,r19,135f4 <__umoddi3+0x2c8>
   134e4:	00804034 	movhi	r2,256
   134e8:	10bfffc4 	addi	r2,r2,-1
   134ec:	14c0ec36 	bltu	r2,r19,138a0 <__umoddi3+0x574>
   134f0:	00800404 	movi	r2,16
   134f4:	9886d83a 	srl	r3,r19,r2
   134f8:	01000074 	movhi	r4,1
   134fc:	211f9604 	addi	r4,r4,32344
   13500:	20c7883a 	add	r3,r4,r3
   13504:	18c00003 	ldbu	r3,0(r3)
   13508:	1887883a 	add	r3,r3,r2
   1350c:	00800804 	movi	r2,32
   13510:	10e5c83a 	sub	r18,r2,r3
   13514:	9000ab1e 	bne	r18,zero,137c4 <__umoddi3+0x498>
   13518:	982cd43a 	srli	r22,r19,16
   1351c:	8ce3c83a 	sub	r17,r17,r19
   13520:	9dffffcc 	andi	r23,r19,65535
   13524:	b00b883a 	mov	r5,r22
   13528:	8809883a 	mov	r4,r17
   1352c:	0005b2c0 	call	5b2c <__umodsi3>
   13530:	b00b883a 	mov	r5,r22
   13534:	8809883a 	mov	r4,r17
   13538:	102b883a 	mov	r21,r2
   1353c:	0005ac80 	call	5ac8 <__udivsi3>
   13540:	b80b883a 	mov	r5,r23
   13544:	1009883a 	mov	r4,r2
   13548:	0005b840 	call	5b84 <__mulsi3>
   1354c:	a82a943a 	slli	r21,r21,16
   13550:	a006d43a 	srli	r3,r20,16
   13554:	1d46b03a 	or	r3,r3,r21
   13558:	1880042e 	bgeu	r3,r2,1356c <__umoddi3+0x240>
   1355c:	1cc7883a 	add	r3,r3,r19
   13560:	1cc00236 	bltu	r3,r19,1356c <__umoddi3+0x240>
   13564:	1880012e 	bgeu	r3,r2,1356c <__umoddi3+0x240>
   13568:	1cc7883a 	add	r3,r3,r19
   1356c:	18a1c83a 	sub	r16,r3,r2
   13570:	b00b883a 	mov	r5,r22
   13574:	8009883a 	mov	r4,r16
   13578:	0005b2c0 	call	5b2c <__umodsi3>
   1357c:	1023883a 	mov	r17,r2
   13580:	b00b883a 	mov	r5,r22
   13584:	8009883a 	mov	r4,r16
   13588:	0005ac80 	call	5ac8 <__udivsi3>
   1358c:	8822943a 	slli	r17,r17,16
   13590:	b80b883a 	mov	r5,r23
   13594:	1009883a 	mov	r4,r2
   13598:	0005b840 	call	5b84 <__mulsi3>
   1359c:	a53fffcc 	andi	r20,r20,65535
   135a0:	a446b03a 	or	r3,r20,r17
   135a4:	18bfac2e 	bgeu	r3,r2,13458 <__alt_exception_stack_pointer+0xf8013458>
   135a8:	003fa706 	br	13448 <__alt_exception_stack_pointer+0xf8013448>
   135ac:	2005883a 	mov	r2,r4
   135b0:	2807883a 	mov	r3,r5
   135b4:	dfc00c17 	ldw	ra,48(sp)
   135b8:	df000b17 	ldw	fp,44(sp)
   135bc:	ddc00a17 	ldw	r23,40(sp)
   135c0:	dd800917 	ldw	r22,36(sp)
   135c4:	dd400817 	ldw	r21,32(sp)
   135c8:	dd000717 	ldw	r20,28(sp)
   135cc:	dcc00617 	ldw	r19,24(sp)
   135d0:	dc800517 	ldw	r18,20(sp)
   135d4:	dc400417 	ldw	r17,16(sp)
   135d8:	dc000317 	ldw	r16,12(sp)
   135dc:	dec00d04 	addi	sp,sp,52
   135e0:	f800283a 	ret
   135e4:	04c03fc4 	movi	r19,255
   135e8:	99c9803a 	cmpltu	r4,r19,r7
   135ec:	200890fa 	slli	r4,r4,3
   135f0:	003fa406 	br	13484 <__alt_exception_stack_pointer+0xf8013484>
   135f4:	00803fc4 	movi	r2,255
   135f8:	14c5803a 	cmpltu	r2,r2,r19
   135fc:	100490fa 	slli	r2,r2,3
   13600:	003fbc06 	br	134f4 <__alt_exception_stack_pointer+0xf80134f4>
   13604:	00804034 	movhi	r2,256
   13608:	10bfffc4 	addi	r2,r2,-1
   1360c:	1180a636 	bltu	r2,r6,138a8 <__umoddi3+0x57c>
   13610:	01000404 	movi	r4,16
   13614:	003f5c06 	br	13388 <__alt_exception_stack_pointer+0xf8013388>
   13618:	3d0e983a 	sll	r7,r7,r20
   1361c:	34ead83a 	srl	r21,r6,r19
   13620:	8cc6d83a 	srl	r3,r17,r19
   13624:	8d10983a 	sll	r8,r17,r20
   13628:	3d6ab03a 	or	r21,r7,r21
   1362c:	a82cd43a 	srli	r22,r21,16
   13630:	84e2d83a 	srl	r17,r16,r19
   13634:	1809883a 	mov	r4,r3
   13638:	b00b883a 	mov	r5,r22
   1363c:	8a22b03a 	or	r17,r17,r8
   13640:	3524983a 	sll	r18,r6,r20
   13644:	dc400015 	stw	r17,0(sp)
   13648:	d8c00115 	stw	r3,4(sp)
   1364c:	0005b2c0 	call	5b2c <__umodsi3>
   13650:	d8c00117 	ldw	r3,4(sp)
   13654:	b00b883a 	mov	r5,r22
   13658:	1039883a 	mov	fp,r2
   1365c:	1809883a 	mov	r4,r3
   13660:	0005ac80 	call	5ac8 <__udivsi3>
   13664:	adffffcc 	andi	r23,r21,65535
   13668:	100b883a 	mov	r5,r2
   1366c:	b809883a 	mov	r4,r23
   13670:	1023883a 	mov	r17,r2
   13674:	0005b840 	call	5b84 <__mulsi3>
   13678:	d9400017 	ldw	r5,0(sp)
   1367c:	e008943a 	slli	r4,fp,16
   13680:	8520983a 	sll	r16,r16,r20
   13684:	2806d43a 	srli	r3,r5,16
   13688:	1906b03a 	or	r3,r3,r4
   1368c:	1880042e 	bgeu	r3,r2,136a0 <__umoddi3+0x374>
   13690:	1d47883a 	add	r3,r3,r21
   13694:	893fffc4 	addi	r4,r17,-1
   13698:	1d40892e 	bgeu	r3,r21,138c0 <__umoddi3+0x594>
   1369c:	2023883a 	mov	r17,r4
   136a0:	18b9c83a 	sub	fp,r3,r2
   136a4:	b00b883a 	mov	r5,r22
   136a8:	e009883a 	mov	r4,fp
   136ac:	0005b2c0 	call	5b2c <__umodsi3>
   136b0:	b00b883a 	mov	r5,r22
   136b4:	e009883a 	mov	r4,fp
   136b8:	d8800215 	stw	r2,8(sp)
   136bc:	0005ac80 	call	5ac8 <__udivsi3>
   136c0:	100b883a 	mov	r5,r2
   136c4:	b809883a 	mov	r4,r23
   136c8:	102d883a 	mov	r22,r2
   136cc:	0005b840 	call	5b84 <__mulsi3>
   136d0:	d9800217 	ldw	r6,8(sp)
   136d4:	d8c00017 	ldw	r3,0(sp)
   136d8:	300c943a 	slli	r6,r6,16
   136dc:	1a3fffcc 	andi	r8,r3,65535
   136e0:	4190b03a 	or	r8,r8,r6
   136e4:	4080042e 	bgeu	r8,r2,136f8 <__umoddi3+0x3cc>
   136e8:	4551883a 	add	r8,r8,r21
   136ec:	b0ffffc4 	addi	r3,r22,-1
   136f0:	45406f2e 	bgeu	r8,r21,138b0 <__umoddi3+0x584>
   136f4:	182d883a 	mov	r22,r3
   136f8:	880e943a 	slli	r7,r17,16
   136fc:	9006d43a 	srli	r3,r18,16
   13700:	91bfffcc 	andi	r6,r18,65535
   13704:	3dacb03a 	or	r22,r7,r22
   13708:	b02ed43a 	srli	r23,r22,16
   1370c:	b5bfffcc 	andi	r22,r22,65535
   13710:	300b883a 	mov	r5,r6
   13714:	b009883a 	mov	r4,r22
   13718:	40a3c83a 	sub	r17,r8,r2
   1371c:	d8c00115 	stw	r3,4(sp)
   13720:	d9800215 	stw	r6,8(sp)
   13724:	0005b840 	call	5b84 <__mulsi3>
   13728:	d9800217 	ldw	r6,8(sp)
   1372c:	b809883a 	mov	r4,r23
   13730:	1039883a 	mov	fp,r2
   13734:	300b883a 	mov	r5,r6
   13738:	0005b840 	call	5b84 <__mulsi3>
   1373c:	d8c00117 	ldw	r3,4(sp)
   13740:	b809883a 	mov	r4,r23
   13744:	d8800215 	stw	r2,8(sp)
   13748:	180b883a 	mov	r5,r3
   1374c:	0005b840 	call	5b84 <__mulsi3>
   13750:	d8c00117 	ldw	r3,4(sp)
   13754:	b009883a 	mov	r4,r22
   13758:	102f883a 	mov	r23,r2
   1375c:	180b883a 	mov	r5,r3
   13760:	0005b840 	call	5b84 <__mulsi3>
   13764:	d9800217 	ldw	r6,8(sp)
   13768:	e006d43a 	srli	r3,fp,16
   1376c:	1185883a 	add	r2,r2,r6
   13770:	1885883a 	add	r2,r3,r2
   13774:	1180022e 	bgeu	r2,r6,13780 <__umoddi3+0x454>
   13778:	00c00074 	movhi	r3,1
   1377c:	b8ef883a 	add	r23,r23,r3
   13780:	1006d43a 	srli	r3,r2,16
   13784:	1004943a 	slli	r2,r2,16
   13788:	e73fffcc 	andi	fp,fp,65535
   1378c:	1dc7883a 	add	r3,r3,r23
   13790:	1739883a 	add	fp,r2,fp
   13794:	88c03a36 	bltu	r17,r3,13880 <__umoddi3+0x554>
   13798:	88c05126 	beq	r17,r3,138e0 <__umoddi3+0x5b4>
   1379c:	88c9c83a 	sub	r4,r17,r3
   137a0:	e00f883a 	mov	r7,fp
   137a4:	81cfc83a 	sub	r7,r16,r7
   137a8:	81c7803a 	cmpltu	r3,r16,r7
   137ac:	20c7c83a 	sub	r3,r4,r3
   137b0:	1cc4983a 	sll	r2,r3,r19
   137b4:	3d0ed83a 	srl	r7,r7,r20
   137b8:	1d06d83a 	srl	r3,r3,r20
   137bc:	11c4b03a 	or	r2,r2,r7
   137c0:	003f7c06 	br	135b4 <__alt_exception_stack_pointer+0xf80135b4>
   137c4:	9ca6983a 	sll	r19,r19,r18
   137c8:	88f8d83a 	srl	fp,r17,r3
   137cc:	80c4d83a 	srl	r2,r16,r3
   137d0:	982cd43a 	srli	r22,r19,16
   137d4:	8ca2983a 	sll	r17,r17,r18
   137d8:	e009883a 	mov	r4,fp
   137dc:	b00b883a 	mov	r5,r22
   137e0:	146ab03a 	or	r21,r2,r17
   137e4:	0005b2c0 	call	5b2c <__umodsi3>
   137e8:	b00b883a 	mov	r5,r22
   137ec:	e009883a 	mov	r4,fp
   137f0:	1029883a 	mov	r20,r2
   137f4:	9dffffcc 	andi	r23,r19,65535
   137f8:	0005ac80 	call	5ac8 <__udivsi3>
   137fc:	b809883a 	mov	r4,r23
   13800:	100b883a 	mov	r5,r2
   13804:	0005b840 	call	5b84 <__mulsi3>
   13808:	a008943a 	slli	r4,r20,16
   1380c:	a806d43a 	srli	r3,r21,16
   13810:	84a8983a 	sll	r20,r16,r18
   13814:	1906b03a 	or	r3,r3,r4
   13818:	1880042e 	bgeu	r3,r2,1382c <__umoddi3+0x500>
   1381c:	1cc7883a 	add	r3,r3,r19
   13820:	1cc00236 	bltu	r3,r19,1382c <__umoddi3+0x500>
   13824:	1880012e 	bgeu	r3,r2,1382c <__umoddi3+0x500>
   13828:	1cc7883a 	add	r3,r3,r19
   1382c:	18a3c83a 	sub	r17,r3,r2
   13830:	b00b883a 	mov	r5,r22
   13834:	8809883a 	mov	r4,r17
   13838:	0005b2c0 	call	5b2c <__umodsi3>
   1383c:	b00b883a 	mov	r5,r22
   13840:	8809883a 	mov	r4,r17
   13844:	1021883a 	mov	r16,r2
   13848:	0005ac80 	call	5ac8 <__udivsi3>
   1384c:	100b883a 	mov	r5,r2
   13850:	b809883a 	mov	r4,r23
   13854:	8020943a 	slli	r16,r16,16
   13858:	0005b840 	call	5b84 <__mulsi3>
   1385c:	a8ffffcc 	andi	r3,r21,65535
   13860:	1c06b03a 	or	r3,r3,r16
   13864:	1880042e 	bgeu	r3,r2,13878 <__umoddi3+0x54c>
   13868:	1cc7883a 	add	r3,r3,r19
   1386c:	1cc00236 	bltu	r3,r19,13878 <__umoddi3+0x54c>
   13870:	1880012e 	bgeu	r3,r2,13878 <__umoddi3+0x54c>
   13874:	1cc7883a 	add	r3,r3,r19
   13878:	18a3c83a 	sub	r17,r3,r2
   1387c:	003f2906 	br	13524 <__alt_exception_stack_pointer+0xf8013524>
   13880:	e48fc83a 	sub	r7,fp,r18
   13884:	1d49c83a 	sub	r4,r3,r21
   13888:	e1f9803a 	cmpltu	fp,fp,r7
   1388c:	2739c83a 	sub	fp,r4,fp
   13890:	8f09c83a 	sub	r4,r17,fp
   13894:	003fc306 	br	137a4 <__alt_exception_stack_pointer+0xf80137a4>
   13898:	01000604 	movi	r4,24
   1389c:	003ef906 	br	13484 <__alt_exception_stack_pointer+0xf8013484>
   138a0:	00800604 	movi	r2,24
   138a4:	003f1306 	br	134f4 <__alt_exception_stack_pointer+0xf80134f4>
   138a8:	01000604 	movi	r4,24
   138ac:	003eb606 	br	13388 <__alt_exception_stack_pointer+0xf8013388>
   138b0:	40bf902e 	bgeu	r8,r2,136f4 <__alt_exception_stack_pointer+0xf80136f4>
   138b4:	b5bfff84 	addi	r22,r22,-2
   138b8:	4551883a 	add	r8,r8,r21
   138bc:	003f8e06 	br	136f8 <__alt_exception_stack_pointer+0xf80136f8>
   138c0:	18bf762e 	bgeu	r3,r2,1369c <__alt_exception_stack_pointer+0xf801369c>
   138c4:	8c7fff84 	addi	r17,r17,-2
   138c8:	1d47883a 	add	r3,r3,r21
   138cc:	003f7406 	br	136a0 <__alt_exception_stack_pointer+0xf80136a0>
   138d0:	1cc7883a 	add	r3,r3,r19
   138d4:	003ecd06 	br	1340c <__alt_exception_stack_pointer+0xf801340c>
   138d8:	8005883a 	mov	r2,r16
   138dc:	003ef806 	br	134c0 <__alt_exception_stack_pointer+0xf80134c0>
   138e0:	873fe736 	bltu	r16,fp,13880 <__alt_exception_stack_pointer+0xf8013880>
   138e4:	e00f883a 	mov	r7,fp
   138e8:	0009883a 	mov	r4,zero
   138ec:	003fad06 	br	137a4 <__alt_exception_stack_pointer+0xf80137a4>

000138f0 <__ledf2>:
   138f0:	2804d53a 	srli	r2,r5,20
   138f4:	3810d53a 	srli	r8,r7,20
   138f8:	00c00434 	movhi	r3,16
   138fc:	18ffffc4 	addi	r3,r3,-1
   13900:	1081ffcc 	andi	r2,r2,2047
   13904:	0241ffc4 	movi	r9,2047
   13908:	28d4703a 	and	r10,r5,r3
   1390c:	4201ffcc 	andi	r8,r8,2047
   13910:	38c6703a 	and	r3,r7,r3
   13914:	280ad7fa 	srli	r5,r5,31
   13918:	380ed7fa 	srli	r7,r7,31
   1391c:	12401f26 	beq	r2,r9,1399c <__ledf2+0xac>
   13920:	0241ffc4 	movi	r9,2047
   13924:	42401426 	beq	r8,r9,13978 <__ledf2+0x88>
   13928:	1000091e 	bne	r2,zero,13950 <__ledf2+0x60>
   1392c:	2296b03a 	or	r11,r4,r10
   13930:	5813003a 	cmpeq	r9,r11,zero
   13934:	29403fcc 	andi	r5,r5,255
   13938:	40000a1e 	bne	r8,zero,13964 <__ledf2+0x74>
   1393c:	30d8b03a 	or	r12,r6,r3
   13940:	6000081e 	bne	r12,zero,13964 <__ledf2+0x74>
   13944:	0005883a 	mov	r2,zero
   13948:	5800111e 	bne	r11,zero,13990 <__ledf2+0xa0>
   1394c:	f800283a 	ret
   13950:	29403fcc 	andi	r5,r5,255
   13954:	40000c1e 	bne	r8,zero,13988 <__ledf2+0x98>
   13958:	30d2b03a 	or	r9,r6,r3
   1395c:	48000c26 	beq	r9,zero,13990 <__ledf2+0xa0>
   13960:	0013883a 	mov	r9,zero
   13964:	39c03fcc 	andi	r7,r7,255
   13968:	48000826 	beq	r9,zero,1398c <__ledf2+0x9c>
   1396c:	38001126 	beq	r7,zero,139b4 <__ledf2+0xc4>
   13970:	00800044 	movi	r2,1
   13974:	f800283a 	ret
   13978:	30d2b03a 	or	r9,r6,r3
   1397c:	483fea26 	beq	r9,zero,13928 <__alt_exception_stack_pointer+0xf8013928>
   13980:	00800084 	movi	r2,2
   13984:	f800283a 	ret
   13988:	39c03fcc 	andi	r7,r7,255
   1398c:	39400726 	beq	r7,r5,139ac <__ledf2+0xbc>
   13990:	2800081e 	bne	r5,zero,139b4 <__ledf2+0xc4>
   13994:	00800044 	movi	r2,1
   13998:	f800283a 	ret
   1399c:	2292b03a 	or	r9,r4,r10
   139a0:	483fdf26 	beq	r9,zero,13920 <__alt_exception_stack_pointer+0xf8013920>
   139a4:	00800084 	movi	r2,2
   139a8:	f800283a 	ret
   139ac:	4080030e 	bge	r8,r2,139bc <__ledf2+0xcc>
   139b0:	383fef26 	beq	r7,zero,13970 <__alt_exception_stack_pointer+0xf8013970>
   139b4:	00bfffc4 	movi	r2,-1
   139b8:	f800283a 	ret
   139bc:	123feb16 	blt	r2,r8,1396c <__alt_exception_stack_pointer+0xf801396c>
   139c0:	1abff336 	bltu	r3,r10,13990 <__alt_exception_stack_pointer+0xf8013990>
   139c4:	50c00326 	beq	r10,r3,139d4 <__ledf2+0xe4>
   139c8:	50c0042e 	bgeu	r10,r3,139dc <__ledf2+0xec>
   139cc:	283fe81e 	bne	r5,zero,13970 <__alt_exception_stack_pointer+0xf8013970>
   139d0:	003ff806 	br	139b4 <__alt_exception_stack_pointer+0xf80139b4>
   139d4:	313fee36 	bltu	r6,r4,13990 <__alt_exception_stack_pointer+0xf8013990>
   139d8:	21bffc36 	bltu	r4,r6,139cc <__alt_exception_stack_pointer+0xf80139cc>
   139dc:	0005883a 	mov	r2,zero
   139e0:	f800283a 	ret

000139e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139e4:	defffe04 	addi	sp,sp,-8
   139e8:	dfc00115 	stw	ra,4(sp)
   139ec:	df000015 	stw	fp,0(sp)
   139f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139f4:	d0a01117 	ldw	r2,-32700(gp)
   139f8:	10000326 	beq	r2,zero,13a08 <alt_get_errno+0x24>
   139fc:	d0a01117 	ldw	r2,-32700(gp)
   13a00:	103ee83a 	callr	r2
   13a04:	00000106 	br	13a0c <alt_get_errno+0x28>
   13a08:	d0a8f604 	addi	r2,gp,-23592
}
   13a0c:	e037883a 	mov	sp,fp
   13a10:	dfc00117 	ldw	ra,4(sp)
   13a14:	df000017 	ldw	fp,0(sp)
   13a18:	dec00204 	addi	sp,sp,8
   13a1c:	f800283a 	ret

00013a20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13a20:	defffb04 	addi	sp,sp,-20
   13a24:	dfc00415 	stw	ra,16(sp)
   13a28:	df000315 	stw	fp,12(sp)
   13a2c:	df000304 	addi	fp,sp,12
   13a30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13a34:	e0bfff17 	ldw	r2,-4(fp)
   13a38:	10000816 	blt	r2,zero,13a5c <close+0x3c>
   13a3c:	01400304 	movi	r5,12
   13a40:	e13fff17 	ldw	r4,-4(fp)
   13a44:	0005b840 	call	5b84 <__mulsi3>
   13a48:	1007883a 	mov	r3,r2
   13a4c:	008000b4 	movhi	r2,2
   13a50:	10a45204 	addi	r2,r2,-28344
   13a54:	1885883a 	add	r2,r3,r2
   13a58:	00000106 	br	13a60 <close+0x40>
   13a5c:	0005883a 	mov	r2,zero
   13a60:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13a64:	e0bffd17 	ldw	r2,-12(fp)
   13a68:	10001926 	beq	r2,zero,13ad0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13a6c:	e0bffd17 	ldw	r2,-12(fp)
   13a70:	10800017 	ldw	r2,0(r2)
   13a74:	10800417 	ldw	r2,16(r2)
   13a78:	10000626 	beq	r2,zero,13a94 <close+0x74>
   13a7c:	e0bffd17 	ldw	r2,-12(fp)
   13a80:	10800017 	ldw	r2,0(r2)
   13a84:	10800417 	ldw	r2,16(r2)
   13a88:	e13ffd17 	ldw	r4,-12(fp)
   13a8c:	103ee83a 	callr	r2
   13a90:	00000106 	br	13a98 <close+0x78>
   13a94:	0005883a 	mov	r2,zero
   13a98:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13a9c:	e13fff17 	ldw	r4,-4(fp)
   13aa0:	00142b80 	call	142b8 <alt_release_fd>
    if (rval < 0)
   13aa4:	e0bffe17 	ldw	r2,-8(fp)
   13aa8:	1000070e 	bge	r2,zero,13ac8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13aac:	00139e40 	call	139e4 <alt_get_errno>
   13ab0:	1007883a 	mov	r3,r2
   13ab4:	e0bffe17 	ldw	r2,-8(fp)
   13ab8:	0085c83a 	sub	r2,zero,r2
   13abc:	18800015 	stw	r2,0(r3)
      return -1;
   13ac0:	00bfffc4 	movi	r2,-1
   13ac4:	00000706 	br	13ae4 <close+0xc4>
    }
    return 0;
   13ac8:	0005883a 	mov	r2,zero
   13acc:	00000506 	br	13ae4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13ad0:	00139e40 	call	139e4 <alt_get_errno>
   13ad4:	1007883a 	mov	r3,r2
   13ad8:	00801444 	movi	r2,81
   13adc:	18800015 	stw	r2,0(r3)
    return -1;
   13ae0:	00bfffc4 	movi	r2,-1
  }
}
   13ae4:	e037883a 	mov	sp,fp
   13ae8:	dfc00117 	ldw	ra,4(sp)
   13aec:	df000017 	ldw	fp,0(sp)
   13af0:	dec00204 	addi	sp,sp,8
   13af4:	f800283a 	ret

00013af8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13af8:	defffc04 	addi	sp,sp,-16
   13afc:	df000315 	stw	fp,12(sp)
   13b00:	df000304 	addi	fp,sp,12
   13b04:	e13ffd15 	stw	r4,-12(fp)
   13b08:	e17ffe15 	stw	r5,-8(fp)
   13b0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13b10:	e0bfff17 	ldw	r2,-4(fp)
}
   13b14:	e037883a 	mov	sp,fp
   13b18:	df000017 	ldw	fp,0(sp)
   13b1c:	dec00104 	addi	sp,sp,4
   13b20:	f800283a 	ret

00013b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13b24:	defffe04 	addi	sp,sp,-8
   13b28:	dfc00115 	stw	ra,4(sp)
   13b2c:	df000015 	stw	fp,0(sp)
   13b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13b34:	d0a01117 	ldw	r2,-32700(gp)
   13b38:	10000326 	beq	r2,zero,13b48 <alt_get_errno+0x24>
   13b3c:	d0a01117 	ldw	r2,-32700(gp)
   13b40:	103ee83a 	callr	r2
   13b44:	00000106 	br	13b4c <alt_get_errno+0x28>
   13b48:	d0a8f604 	addi	r2,gp,-23592
}
   13b4c:	e037883a 	mov	sp,fp
   13b50:	dfc00117 	ldw	ra,4(sp)
   13b54:	df000017 	ldw	fp,0(sp)
   13b58:	dec00204 	addi	sp,sp,8
   13b5c:	f800283a 	ret

00013b60 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   13b60:	defffc04 	addi	sp,sp,-16
   13b64:	dfc00315 	stw	ra,12(sp)
   13b68:	df000215 	stw	fp,8(sp)
   13b6c:	df000204 	addi	fp,sp,8
   13b70:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   13b74:	d1600d04 	addi	r5,gp,-32716
   13b78:	e13fff17 	ldw	r4,-4(fp)
   13b7c:	0013c440 	call	13c44 <alt_find_dev>
   13b80:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   13b84:	e0bffe17 	ldw	r2,-8(fp)
   13b88:	1000041e 	bne	r2,zero,13b9c <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   13b8c:	0013b240 	call	13b24 <alt_get_errno>
   13b90:	1007883a 	mov	r3,r2
   13b94:	008004c4 	movi	r2,19
   13b98:	18800015 	stw	r2,0(r3)
  }

  return dev;
   13b9c:	e0bffe17 	ldw	r2,-8(fp)
}
   13ba0:	e037883a 	mov	sp,fp
   13ba4:	dfc00117 	ldw	ra,4(sp)
   13ba8:	df000017 	ldw	fp,0(sp)
   13bac:	dec00204 	addi	sp,sp,8
   13bb0:	f800283a 	ret

00013bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13bb4:	defffe04 	addi	sp,sp,-8
   13bb8:	dfc00115 	stw	ra,4(sp)
   13bbc:	df000015 	stw	fp,0(sp)
   13bc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13bc4:	d0a01117 	ldw	r2,-32700(gp)
   13bc8:	10000326 	beq	r2,zero,13bd8 <alt_get_errno+0x24>
   13bcc:	d0a01117 	ldw	r2,-32700(gp)
   13bd0:	103ee83a 	callr	r2
   13bd4:	00000106 	br	13bdc <alt_get_errno+0x28>
   13bd8:	d0a8f604 	addi	r2,gp,-23592
}
   13bdc:	e037883a 	mov	sp,fp
   13be0:	dfc00117 	ldw	ra,4(sp)
   13be4:	df000017 	ldw	fp,0(sp)
   13be8:	dec00204 	addi	sp,sp,8
   13bec:	f800283a 	ret

00013bf0 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   13bf0:	defffc04 	addi	sp,sp,-16
   13bf4:	dfc00315 	stw	ra,12(sp)
   13bf8:	df000215 	stw	fp,8(sp)
   13bfc:	df000204 	addi	fp,sp,8
   13c00:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   13c04:	d1600f04 	addi	r5,gp,-32708
   13c08:	e13fff17 	ldw	r4,-4(fp)
   13c0c:	0013c440 	call	13c44 <alt_find_dev>
   13c10:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   13c14:	e0bffe17 	ldw	r2,-8(fp)
   13c18:	1000041e 	bne	r2,zero,13c2c <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   13c1c:	0013bb40 	call	13bb4 <alt_get_errno>
   13c20:	1007883a 	mov	r3,r2
   13c24:	008004c4 	movi	r2,19
   13c28:	18800015 	stw	r2,0(r3)
  }

  return dev;
   13c2c:	e0bffe17 	ldw	r2,-8(fp)
}
   13c30:	e037883a 	mov	sp,fp
   13c34:	dfc00117 	ldw	ra,4(sp)
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00204 	addi	sp,sp,8
   13c40:	f800283a 	ret

00013c44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13c44:	defffa04 	addi	sp,sp,-24
   13c48:	dfc00515 	stw	ra,20(sp)
   13c4c:	df000415 	stw	fp,16(sp)
   13c50:	df000404 	addi	fp,sp,16
   13c54:	e13ffe15 	stw	r4,-8(fp)
   13c58:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
   13c60:	10800017 	ldw	r2,0(r2)
   13c64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13c68:	e13ffe17 	ldw	r4,-8(fp)
   13c6c:	00092000 	call	9200 <strlen>
   13c70:	10800044 	addi	r2,r2,1
   13c74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13c78:	00000d06 	br	13cb0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	10800217 	ldw	r2,8(r2)
   13c84:	e0fffd17 	ldw	r3,-12(fp)
   13c88:	180d883a 	mov	r6,r3
   13c8c:	e17ffe17 	ldw	r5,-8(fp)
   13c90:	1009883a 	mov	r4,r2
   13c94:	00170400 	call	17040 <memcmp>
   13c98:	1000021e 	bne	r2,zero,13ca4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13c9c:	e0bffc17 	ldw	r2,-16(fp)
   13ca0:	00000706 	br	13cc0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13ca4:	e0bffc17 	ldw	r2,-16(fp)
   13ca8:	10800017 	ldw	r2,0(r2)
   13cac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13cb0:	e0fffc17 	ldw	r3,-16(fp)
   13cb4:	e0bfff17 	ldw	r2,-4(fp)
   13cb8:	18bff01e 	bne	r3,r2,13c7c <__alt_exception_stack_pointer+0xf8013c7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13cbc:	0005883a 	mov	r2,zero
}
   13cc0:	e037883a 	mov	sp,fp
   13cc4:	dfc00117 	ldw	ra,4(sp)
   13cc8:	df000017 	ldw	fp,0(sp)
   13ccc:	dec00204 	addi	sp,sp,8
   13cd0:	f800283a 	ret

00013cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13cd4:	defffe04 	addi	sp,sp,-8
   13cd8:	dfc00115 	stw	ra,4(sp)
   13cdc:	df000015 	stw	fp,0(sp)
   13ce0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ce4:	d0a01117 	ldw	r2,-32700(gp)
   13ce8:	10000326 	beq	r2,zero,13cf8 <alt_get_errno+0x24>
   13cec:	d0a01117 	ldw	r2,-32700(gp)
   13cf0:	103ee83a 	callr	r2
   13cf4:	00000106 	br	13cfc <alt_get_errno+0x28>
   13cf8:	d0a8f604 	addi	r2,gp,-23592
}
   13cfc:	e037883a 	mov	sp,fp
   13d00:	dfc00117 	ldw	ra,4(sp)
   13d04:	df000017 	ldw	fp,0(sp)
   13d08:	dec00204 	addi	sp,sp,8
   13d0c:	f800283a 	ret

00013d10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13d10:	defffb04 	addi	sp,sp,-20
   13d14:	dfc00415 	stw	ra,16(sp)
   13d18:	df000315 	stw	fp,12(sp)
   13d1c:	df000304 	addi	fp,sp,12
   13d20:	e13ffe15 	stw	r4,-8(fp)
   13d24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13d28:	e0bffe17 	ldw	r2,-8(fp)
   13d2c:	10000816 	blt	r2,zero,13d50 <fstat+0x40>
   13d30:	01400304 	movi	r5,12
   13d34:	e13ffe17 	ldw	r4,-8(fp)
   13d38:	0005b840 	call	5b84 <__mulsi3>
   13d3c:	1007883a 	mov	r3,r2
   13d40:	008000b4 	movhi	r2,2
   13d44:	10a45204 	addi	r2,r2,-28344
   13d48:	1885883a 	add	r2,r3,r2
   13d4c:	00000106 	br	13d54 <fstat+0x44>
   13d50:	0005883a 	mov	r2,zero
   13d54:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13d58:	e0bffd17 	ldw	r2,-12(fp)
   13d5c:	10001026 	beq	r2,zero,13da0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13d60:	e0bffd17 	ldw	r2,-12(fp)
   13d64:	10800017 	ldw	r2,0(r2)
   13d68:	10800817 	ldw	r2,32(r2)
   13d6c:	10000726 	beq	r2,zero,13d8c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13d70:	e0bffd17 	ldw	r2,-12(fp)
   13d74:	10800017 	ldw	r2,0(r2)
   13d78:	10800817 	ldw	r2,32(r2)
   13d7c:	e17fff17 	ldw	r5,-4(fp)
   13d80:	e13ffd17 	ldw	r4,-12(fp)
   13d84:	103ee83a 	callr	r2
   13d88:	00000a06 	br	13db4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	00c80004 	movi	r3,8192
   13d94:	10c00115 	stw	r3,4(r2)
      return 0;
   13d98:	0005883a 	mov	r2,zero
   13d9c:	00000506 	br	13db4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13da0:	0013cd40 	call	13cd4 <alt_get_errno>
   13da4:	1007883a 	mov	r3,r2
   13da8:	00801444 	movi	r2,81
   13dac:	18800015 	stw	r2,0(r3)
    return -1;
   13db0:	00bfffc4 	movi	r2,-1
  }
}
   13db4:	e037883a 	mov	sp,fp
   13db8:	dfc00117 	ldw	ra,4(sp)
   13dbc:	df000017 	ldw	fp,0(sp)
   13dc0:	dec00204 	addi	sp,sp,8
   13dc4:	f800283a 	ret

00013dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13dc8:	defffe04 	addi	sp,sp,-8
   13dcc:	dfc00115 	stw	ra,4(sp)
   13dd0:	df000015 	stw	fp,0(sp)
   13dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13dd8:	d0a01117 	ldw	r2,-32700(gp)
   13ddc:	10000326 	beq	r2,zero,13dec <alt_get_errno+0x24>
   13de0:	d0a01117 	ldw	r2,-32700(gp)
   13de4:	103ee83a 	callr	r2
   13de8:	00000106 	br	13df0 <alt_get_errno+0x28>
   13dec:	d0a8f604 	addi	r2,gp,-23592
}
   13df0:	e037883a 	mov	sp,fp
   13df4:	dfc00117 	ldw	ra,4(sp)
   13df8:	df000017 	ldw	fp,0(sp)
   13dfc:	dec00204 	addi	sp,sp,8
   13e00:	f800283a 	ret

00013e04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13e04:	deffed04 	addi	sp,sp,-76
   13e08:	dfc01215 	stw	ra,72(sp)
   13e0c:	df001115 	stw	fp,68(sp)
   13e10:	df001104 	addi	fp,sp,68
   13e14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e18:	e0bfff17 	ldw	r2,-4(fp)
   13e1c:	10000816 	blt	r2,zero,13e40 <isatty+0x3c>
   13e20:	01400304 	movi	r5,12
   13e24:	e13fff17 	ldw	r4,-4(fp)
   13e28:	0005b840 	call	5b84 <__mulsi3>
   13e2c:	1007883a 	mov	r3,r2
   13e30:	008000b4 	movhi	r2,2
   13e34:	10a45204 	addi	r2,r2,-28344
   13e38:	1885883a 	add	r2,r3,r2
   13e3c:	00000106 	br	13e44 <isatty+0x40>
   13e40:	0005883a 	mov	r2,zero
   13e44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13e48:	e0bfef17 	ldw	r2,-68(fp)
   13e4c:	10000e26 	beq	r2,zero,13e88 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13e50:	e0bfef17 	ldw	r2,-68(fp)
   13e54:	10800017 	ldw	r2,0(r2)
   13e58:	10800817 	ldw	r2,32(r2)
   13e5c:	1000021e 	bne	r2,zero,13e68 <isatty+0x64>
    {
      return 1;
   13e60:	00800044 	movi	r2,1
   13e64:	00000d06 	br	13e9c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13e68:	e0bff004 	addi	r2,fp,-64
   13e6c:	100b883a 	mov	r5,r2
   13e70:	e13fff17 	ldw	r4,-4(fp)
   13e74:	0013d100 	call	13d10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13e78:	e0bff117 	ldw	r2,-60(fp)
   13e7c:	10880020 	cmpeqi	r2,r2,8192
   13e80:	10803fcc 	andi	r2,r2,255
   13e84:	00000506 	br	13e9c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13e88:	0013dc80 	call	13dc8 <alt_get_errno>
   13e8c:	1007883a 	mov	r3,r2
   13e90:	00801444 	movi	r2,81
   13e94:	18800015 	stw	r2,0(r3)
    return 0;
   13e98:	0005883a 	mov	r2,zero
  }
}
   13e9c:	e037883a 	mov	sp,fp
   13ea0:	dfc00117 	ldw	ra,4(sp)
   13ea4:	df000017 	ldw	fp,0(sp)
   13ea8:	dec00204 	addi	sp,sp,8
   13eac:	f800283a 	ret

00013eb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13eb0:	defffc04 	addi	sp,sp,-16
   13eb4:	df000315 	stw	fp,12(sp)
   13eb8:	df000304 	addi	fp,sp,12
   13ebc:	e13ffd15 	stw	r4,-12(fp)
   13ec0:	e17ffe15 	stw	r5,-8(fp)
   13ec4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13ec8:	e0fffe17 	ldw	r3,-8(fp)
   13ecc:	e0bffd17 	ldw	r2,-12(fp)
   13ed0:	18800c26 	beq	r3,r2,13f04 <alt_load_section+0x54>
  {
    while( to != end )
   13ed4:	00000806 	br	13ef8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13ed8:	e0bffe17 	ldw	r2,-8(fp)
   13edc:	10c00104 	addi	r3,r2,4
   13ee0:	e0fffe15 	stw	r3,-8(fp)
   13ee4:	e0fffd17 	ldw	r3,-12(fp)
   13ee8:	19000104 	addi	r4,r3,4
   13eec:	e13ffd15 	stw	r4,-12(fp)
   13ef0:	18c00017 	ldw	r3,0(r3)
   13ef4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13ef8:	e0fffe17 	ldw	r3,-8(fp)
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	18bff51e 	bne	r3,r2,13ed8 <__alt_exception_stack_pointer+0xf8013ed8>
    {
      *to++ = *from++;
    }
  }
}
   13f04:	0001883a 	nop
   13f08:	e037883a 	mov	sp,fp
   13f0c:	df000017 	ldw	fp,0(sp)
   13f10:	dec00104 	addi	sp,sp,4
   13f14:	f800283a 	ret

00013f18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13f18:	defffe04 	addi	sp,sp,-8
   13f1c:	dfc00115 	stw	ra,4(sp)
   13f20:	df000015 	stw	fp,0(sp)
   13f24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13f28:	018000b4 	movhi	r6,2
   13f2c:	31a93c04 	addi	r6,r6,-23312
   13f30:	014000b4 	movhi	r5,2
   13f34:	29606604 	addi	r5,r5,-32360
   13f38:	010000b4 	movhi	r4,2
   13f3c:	21293c04 	addi	r4,r4,-23312
   13f40:	0013eb00 	call	13eb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13f44:	01800034 	movhi	r6,0
   13f48:	31808f04 	addi	r6,r6,572
   13f4c:	01400034 	movhi	r5,0
   13f50:	29400804 	addi	r5,r5,32
   13f54:	01000034 	movhi	r4,0
   13f58:	21000804 	addi	r4,r4,32
   13f5c:	0013eb00 	call	13eb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13f60:	018000b4 	movhi	r6,2
   13f64:	31a06604 	addi	r6,r6,-32360
   13f68:	01400074 	movhi	r5,1
   13f6c:	295ce204 	addi	r5,r5,29576
   13f70:	01000074 	movhi	r4,1
   13f74:	211ce204 	addi	r4,r4,29576
   13f78:	0013eb00 	call	13eb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13f7c:	00163600 	call	16360 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13f80:	00165200 	call	16520 <alt_icache_flush_all>
}
   13f84:	0001883a 	nop
   13f88:	e037883a 	mov	sp,fp
   13f8c:	dfc00117 	ldw	ra,4(sp)
   13f90:	df000017 	ldw	fp,0(sp)
   13f94:	dec00204 	addi	sp,sp,8
   13f98:	f800283a 	ret

00013f9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13f9c:	defffe04 	addi	sp,sp,-8
   13fa0:	dfc00115 	stw	ra,4(sp)
   13fa4:	df000015 	stw	fp,0(sp)
   13fa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13fac:	d0a01117 	ldw	r2,-32700(gp)
   13fb0:	10000326 	beq	r2,zero,13fc0 <alt_get_errno+0x24>
   13fb4:	d0a01117 	ldw	r2,-32700(gp)
   13fb8:	103ee83a 	callr	r2
   13fbc:	00000106 	br	13fc4 <alt_get_errno+0x28>
   13fc0:	d0a8f604 	addi	r2,gp,-23592
}
   13fc4:	e037883a 	mov	sp,fp
   13fc8:	dfc00117 	ldw	ra,4(sp)
   13fcc:	df000017 	ldw	fp,0(sp)
   13fd0:	dec00204 	addi	sp,sp,8
   13fd4:	f800283a 	ret

00013fd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13fd8:	defff904 	addi	sp,sp,-28
   13fdc:	dfc00615 	stw	ra,24(sp)
   13fe0:	df000515 	stw	fp,20(sp)
   13fe4:	df000504 	addi	fp,sp,20
   13fe8:	e13ffd15 	stw	r4,-12(fp)
   13fec:	e17ffe15 	stw	r5,-8(fp)
   13ff0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13ff4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	10000816 	blt	r2,zero,14020 <lseek+0x48>
   14000:	01400304 	movi	r5,12
   14004:	e13ffd17 	ldw	r4,-12(fp)
   14008:	0005b840 	call	5b84 <__mulsi3>
   1400c:	1007883a 	mov	r3,r2
   14010:	008000b4 	movhi	r2,2
   14014:	10a45204 	addi	r2,r2,-28344
   14018:	1885883a 	add	r2,r3,r2
   1401c:	00000106 	br	14024 <lseek+0x4c>
   14020:	0005883a 	mov	r2,zero
   14024:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14028:	e0bffc17 	ldw	r2,-16(fp)
   1402c:	10001026 	beq	r2,zero,14070 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14030:	e0bffc17 	ldw	r2,-16(fp)
   14034:	10800017 	ldw	r2,0(r2)
   14038:	10800717 	ldw	r2,28(r2)
   1403c:	10000926 	beq	r2,zero,14064 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14040:	e0bffc17 	ldw	r2,-16(fp)
   14044:	10800017 	ldw	r2,0(r2)
   14048:	10800717 	ldw	r2,28(r2)
   1404c:	e1bfff17 	ldw	r6,-4(fp)
   14050:	e17ffe17 	ldw	r5,-8(fp)
   14054:	e13ffc17 	ldw	r4,-16(fp)
   14058:	103ee83a 	callr	r2
   1405c:	e0bffb15 	stw	r2,-20(fp)
   14060:	00000506 	br	14078 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14064:	00bfde84 	movi	r2,-134
   14068:	e0bffb15 	stw	r2,-20(fp)
   1406c:	00000206 	br	14078 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   14070:	00bfebc4 	movi	r2,-81
   14074:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14078:	e0bffb17 	ldw	r2,-20(fp)
   1407c:	1000070e 	bge	r2,zero,1409c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   14080:	0013f9c0 	call	13f9c <alt_get_errno>
   14084:	1007883a 	mov	r3,r2
   14088:	e0bffb17 	ldw	r2,-20(fp)
   1408c:	0085c83a 	sub	r2,zero,r2
   14090:	18800015 	stw	r2,0(r3)
    rc = -1;
   14094:	00bfffc4 	movi	r2,-1
   14098:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1409c:	e0bffb17 	ldw	r2,-20(fp)
}
   140a0:	e037883a 	mov	sp,fp
   140a4:	dfc00117 	ldw	ra,4(sp)
   140a8:	df000017 	ldw	fp,0(sp)
   140ac:	dec00204 	addi	sp,sp,8
   140b0:	f800283a 	ret

000140b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   140b4:	defffd04 	addi	sp,sp,-12
   140b8:	dfc00215 	stw	ra,8(sp)
   140bc:	df000115 	stw	fp,4(sp)
   140c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   140c4:	0009883a 	mov	r4,zero
   140c8:	00146400 	call	14640 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   140cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   140d0:	00146780 	call	14678 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   140d4:	018000b4 	movhi	r6,2
   140d8:	31a04c04 	addi	r6,r6,-32464
   140dc:	014000b4 	movhi	r5,2
   140e0:	29605104 	addi	r5,r5,-32444
   140e4:	010000b4 	movhi	r4,2
   140e8:	21204c04 	addi	r4,r4,-32464
   140ec:	00168c40 	call	168c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   140f0:	00164600 	call	16460 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   140f4:	01000074 	movhi	r4,1
   140f8:	21193004 	addi	r4,r4,25792
   140fc:	0016ff40 	call	16ff4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14100:	d0a8fa17 	ldw	r2,-23576(gp)
   14104:	d0e8fb17 	ldw	r3,-23572(gp)
   14108:	d128fc17 	ldw	r4,-23568(gp)
   1410c:	200d883a 	mov	r6,r4
   14110:	180b883a 	mov	r5,r3
   14114:	1009883a 	mov	r4,r2
   14118:	0001c780 	call	1c78 <main>
   1411c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14120:	01000044 	movi	r4,1
   14124:	0013a200 	call	13a20 <close>
  exit (result);
   14128:	e13fff17 	ldw	r4,-4(fp)
   1412c:	00170080 	call	17008 <exit>

00014130 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14130:	defffe04 	addi	sp,sp,-8
   14134:	df000115 	stw	fp,4(sp)
   14138:	df000104 	addi	fp,sp,4
   1413c:	e13fff15 	stw	r4,-4(fp)
}
   14140:	0001883a 	nop
   14144:	e037883a 	mov	sp,fp
   14148:	df000017 	ldw	fp,0(sp)
   1414c:	dec00104 	addi	sp,sp,4
   14150:	f800283a 	ret

00014154 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14154:	defffe04 	addi	sp,sp,-8
   14158:	df000115 	stw	fp,4(sp)
   1415c:	df000104 	addi	fp,sp,4
   14160:	e13fff15 	stw	r4,-4(fp)
}
   14164:	0001883a 	nop
   14168:	e037883a 	mov	sp,fp
   1416c:	df000017 	ldw	fp,0(sp)
   14170:	dec00104 	addi	sp,sp,4
   14174:	f800283a 	ret

00014178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14178:	defffe04 	addi	sp,sp,-8
   1417c:	dfc00115 	stw	ra,4(sp)
   14180:	df000015 	stw	fp,0(sp)
   14184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14188:	d0a01117 	ldw	r2,-32700(gp)
   1418c:	10000326 	beq	r2,zero,1419c <alt_get_errno+0x24>
   14190:	d0a01117 	ldw	r2,-32700(gp)
   14194:	103ee83a 	callr	r2
   14198:	00000106 	br	141a0 <alt_get_errno+0x28>
   1419c:	d0a8f604 	addi	r2,gp,-23592
}
   141a0:	e037883a 	mov	sp,fp
   141a4:	dfc00117 	ldw	ra,4(sp)
   141a8:	df000017 	ldw	fp,0(sp)
   141ac:	dec00204 	addi	sp,sp,8
   141b0:	f800283a 	ret

000141b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   141b4:	defff904 	addi	sp,sp,-28
   141b8:	dfc00615 	stw	ra,24(sp)
   141bc:	df000515 	stw	fp,20(sp)
   141c0:	df000504 	addi	fp,sp,20
   141c4:	e13ffd15 	stw	r4,-12(fp)
   141c8:	e17ffe15 	stw	r5,-8(fp)
   141cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   141d0:	e0bffd17 	ldw	r2,-12(fp)
   141d4:	10000816 	blt	r2,zero,141f8 <read+0x44>
   141d8:	01400304 	movi	r5,12
   141dc:	e13ffd17 	ldw	r4,-12(fp)
   141e0:	0005b840 	call	5b84 <__mulsi3>
   141e4:	1007883a 	mov	r3,r2
   141e8:	008000b4 	movhi	r2,2
   141ec:	10a45204 	addi	r2,r2,-28344
   141f0:	1885883a 	add	r2,r3,r2
   141f4:	00000106 	br	141fc <read+0x48>
   141f8:	0005883a 	mov	r2,zero
   141fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14200:	e0bffb17 	ldw	r2,-20(fp)
   14204:	10002226 	beq	r2,zero,14290 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14208:	e0bffb17 	ldw	r2,-20(fp)
   1420c:	10800217 	ldw	r2,8(r2)
   14210:	108000cc 	andi	r2,r2,3
   14214:	10800060 	cmpeqi	r2,r2,1
   14218:	1000181e 	bne	r2,zero,1427c <read+0xc8>
        (fd->dev->read))
   1421c:	e0bffb17 	ldw	r2,-20(fp)
   14220:	10800017 	ldw	r2,0(r2)
   14224:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14228:	10001426 	beq	r2,zero,1427c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1422c:	e0bffb17 	ldw	r2,-20(fp)
   14230:	10800017 	ldw	r2,0(r2)
   14234:	10800517 	ldw	r2,20(r2)
   14238:	e0ffff17 	ldw	r3,-4(fp)
   1423c:	180d883a 	mov	r6,r3
   14240:	e17ffe17 	ldw	r5,-8(fp)
   14244:	e13ffb17 	ldw	r4,-20(fp)
   14248:	103ee83a 	callr	r2
   1424c:	e0bffc15 	stw	r2,-16(fp)
   14250:	e0bffc17 	ldw	r2,-16(fp)
   14254:	1000070e 	bge	r2,zero,14274 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14258:	00141780 	call	14178 <alt_get_errno>
   1425c:	1007883a 	mov	r3,r2
   14260:	e0bffc17 	ldw	r2,-16(fp)
   14264:	0085c83a 	sub	r2,zero,r2
   14268:	18800015 	stw	r2,0(r3)
          return -1;
   1426c:	00bfffc4 	movi	r2,-1
   14270:	00000c06 	br	142a4 <read+0xf0>
        }
        return rval;
   14274:	e0bffc17 	ldw	r2,-16(fp)
   14278:	00000a06 	br	142a4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1427c:	00141780 	call	14178 <alt_get_errno>
   14280:	1007883a 	mov	r3,r2
   14284:	00800344 	movi	r2,13
   14288:	18800015 	stw	r2,0(r3)
   1428c:	00000406 	br	142a0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14290:	00141780 	call	14178 <alt_get_errno>
   14294:	1007883a 	mov	r3,r2
   14298:	00801444 	movi	r2,81
   1429c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   142a0:	00bfffc4 	movi	r2,-1
}
   142a4:	e037883a 	mov	sp,fp
   142a8:	dfc00117 	ldw	ra,4(sp)
   142ac:	df000017 	ldw	fp,0(sp)
   142b0:	dec00204 	addi	sp,sp,8
   142b4:	f800283a 	ret

000142b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   142b8:	defffc04 	addi	sp,sp,-16
   142bc:	dfc00315 	stw	ra,12(sp)
   142c0:	df000215 	stw	fp,8(sp)
   142c4:	dc000115 	stw	r16,4(sp)
   142c8:	df000204 	addi	fp,sp,8
   142cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   142d0:	e0bffe17 	ldw	r2,-8(fp)
   142d4:	108000d0 	cmplti	r2,r2,3
   142d8:	1000111e 	bne	r2,zero,14320 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   142dc:	040000b4 	movhi	r16,2
   142e0:	84245204 	addi	r16,r16,-28344
   142e4:	e0bffe17 	ldw	r2,-8(fp)
   142e8:	01400304 	movi	r5,12
   142ec:	1009883a 	mov	r4,r2
   142f0:	0005b840 	call	5b84 <__mulsi3>
   142f4:	8085883a 	add	r2,r16,r2
   142f8:	10800204 	addi	r2,r2,8
   142fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14300:	040000b4 	movhi	r16,2
   14304:	84245204 	addi	r16,r16,-28344
   14308:	e0bffe17 	ldw	r2,-8(fp)
   1430c:	01400304 	movi	r5,12
   14310:	1009883a 	mov	r4,r2
   14314:	0005b840 	call	5b84 <__mulsi3>
   14318:	8085883a 	add	r2,r16,r2
   1431c:	10000015 	stw	zero,0(r2)
  }
}
   14320:	0001883a 	nop
   14324:	e6ffff04 	addi	sp,fp,-4
   14328:	dfc00217 	ldw	ra,8(sp)
   1432c:	df000117 	ldw	fp,4(sp)
   14330:	dc000017 	ldw	r16,0(sp)
   14334:	dec00304 	addi	sp,sp,12
   14338:	f800283a 	ret

0001433c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1433c:	defff904 	addi	sp,sp,-28
   14340:	df000615 	stw	fp,24(sp)
   14344:	df000604 	addi	fp,sp,24
   14348:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1434c:	0005303a 	rdctl	r2,status
   14350:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14354:	e0fffe17 	ldw	r3,-8(fp)
   14358:	00bfff84 	movi	r2,-2
   1435c:	1884703a 	and	r2,r3,r2
   14360:	1001703a 	wrctl	status,r2
  
  return context;
   14364:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14368:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1436c:	d0a01217 	ldw	r2,-32696(gp)
   14370:	10c000c4 	addi	r3,r2,3
   14374:	00bfff04 	movi	r2,-4
   14378:	1884703a 	and	r2,r3,r2
   1437c:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14380:	d0e01217 	ldw	r3,-32696(gp)
   14384:	e0bfff17 	ldw	r2,-4(fp)
   14388:	1887883a 	add	r3,r3,r2
   1438c:	00820034 	movhi	r2,2048
   14390:	10bf0004 	addi	r2,r2,-1024
   14394:	10c0062e 	bgeu	r2,r3,143b0 <sbrk+0x74>
   14398:	e0bffb17 	ldw	r2,-20(fp)
   1439c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143a0:	e0bffa17 	ldw	r2,-24(fp)
   143a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   143a8:	00bfffc4 	movi	r2,-1
   143ac:	00000b06 	br	143dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   143b0:	d0a01217 	ldw	r2,-32696(gp)
   143b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   143b8:	d0e01217 	ldw	r3,-32696(gp)
   143bc:	e0bfff17 	ldw	r2,-4(fp)
   143c0:	1885883a 	add	r2,r3,r2
   143c4:	d0a01215 	stw	r2,-32696(gp)
   143c8:	e0bffb17 	ldw	r2,-20(fp)
   143cc:	e0bffc15 	stw	r2,-16(fp)
   143d0:	e0bffc17 	ldw	r2,-16(fp)
   143d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   143d8:	e0bffd17 	ldw	r2,-12(fp)
} 
   143dc:	e037883a 	mov	sp,fp
   143e0:	df000017 	ldw	fp,0(sp)
   143e4:	dec00104 	addi	sp,sp,4
   143e8:	f800283a 	ret

000143ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   143ec:	defffe04 	addi	sp,sp,-8
   143f0:	dfc00115 	stw	ra,4(sp)
   143f4:	df000015 	stw	fp,0(sp)
   143f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   143fc:	d0a01117 	ldw	r2,-32700(gp)
   14400:	10000326 	beq	r2,zero,14410 <alt_get_errno+0x24>
   14404:	d0a01117 	ldw	r2,-32700(gp)
   14408:	103ee83a 	callr	r2
   1440c:	00000106 	br	14414 <alt_get_errno+0x28>
   14410:	d0a8f604 	addi	r2,gp,-23592
}
   14414:	e037883a 	mov	sp,fp
   14418:	dfc00117 	ldw	ra,4(sp)
   1441c:	df000017 	ldw	fp,0(sp)
   14420:	dec00204 	addi	sp,sp,8
   14424:	f800283a 	ret

00014428 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   14428:	defffc04 	addi	sp,sp,-16
   1442c:	dfc00315 	stw	ra,12(sp)
   14430:	df000215 	stw	fp,8(sp)
   14434:	df000204 	addi	fp,sp,8
   14438:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1443c:	d0a8ff17 	ldw	r2,-23556(gp)
  clock_t ticks = alt_nticks(); 
   14440:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14444:	d0a8fe17 	ldw	r2,-23560(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   14448:	1000061e 	bne	r2,zero,14464 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1444c:	00143ec0 	call	143ec <alt_get_errno>
   14450:	1007883a 	mov	r3,r2
   14454:	00801604 	movi	r2,88
   14458:	18800015 	stw	r2,0(r3)
    return 0;
   1445c:	0005883a 	mov	r2,zero
   14460:	00000a06 	br	1448c <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   14464:	e0bfff17 	ldw	r2,-4(fp)
   14468:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1446c:	e0bfff17 	ldw	r2,-4(fp)
   14470:	e0fffe17 	ldw	r3,-8(fp)
   14474:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   14478:	e0bfff17 	ldw	r2,-4(fp)
   1447c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   14480:	e0bfff17 	ldw	r2,-4(fp)
   14484:	10000315 	stw	zero,12(r2)

  return ticks;
   14488:	e0bffe17 	ldw	r2,-8(fp)
}
   1448c:	e037883a 	mov	sp,fp
   14490:	dfc00117 	ldw	ra,4(sp)
   14494:	df000017 	ldw	fp,0(sp)
   14498:	dec00204 	addi	sp,sp,8
   1449c:	f800283a 	ret

000144a0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   144a0:	defffd04 	addi	sp,sp,-12
   144a4:	dfc00215 	stw	ra,8(sp)
   144a8:	df000115 	stw	fp,4(sp)
   144ac:	df000104 	addi	fp,sp,4
   144b0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   144b4:	e13fff17 	ldw	r4,-4(fp)
   144b8:	00162080 	call	16208 <alt_busy_sleep>
}
   144bc:	e037883a 	mov	sp,fp
   144c0:	dfc00117 	ldw	ra,4(sp)
   144c4:	df000017 	ldw	fp,0(sp)
   144c8:	dec00204 	addi	sp,sp,8
   144cc:	f800283a 	ret

000144d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144d0:	defffe04 	addi	sp,sp,-8
   144d4:	dfc00115 	stw	ra,4(sp)
   144d8:	df000015 	stw	fp,0(sp)
   144dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144e0:	d0a01117 	ldw	r2,-32700(gp)
   144e4:	10000326 	beq	r2,zero,144f4 <alt_get_errno+0x24>
   144e8:	d0a01117 	ldw	r2,-32700(gp)
   144ec:	103ee83a 	callr	r2
   144f0:	00000106 	br	144f8 <alt_get_errno+0x28>
   144f4:	d0a8f604 	addi	r2,gp,-23592
}
   144f8:	e037883a 	mov	sp,fp
   144fc:	dfc00117 	ldw	ra,4(sp)
   14500:	df000017 	ldw	fp,0(sp)
   14504:	dec00204 	addi	sp,sp,8
   14508:	f800283a 	ret

0001450c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1450c:	defff904 	addi	sp,sp,-28
   14510:	dfc00615 	stw	ra,24(sp)
   14514:	df000515 	stw	fp,20(sp)
   14518:	df000504 	addi	fp,sp,20
   1451c:	e13ffd15 	stw	r4,-12(fp)
   14520:	e17ffe15 	stw	r5,-8(fp)
   14524:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14528:	e0bffd17 	ldw	r2,-12(fp)
   1452c:	10000816 	blt	r2,zero,14550 <write+0x44>
   14530:	01400304 	movi	r5,12
   14534:	e13ffd17 	ldw	r4,-12(fp)
   14538:	0005b840 	call	5b84 <__mulsi3>
   1453c:	1007883a 	mov	r3,r2
   14540:	008000b4 	movhi	r2,2
   14544:	10a45204 	addi	r2,r2,-28344
   14548:	1885883a 	add	r2,r3,r2
   1454c:	00000106 	br	14554 <write+0x48>
   14550:	0005883a 	mov	r2,zero
   14554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14558:	e0bffb17 	ldw	r2,-20(fp)
   1455c:	10002126 	beq	r2,zero,145e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14560:	e0bffb17 	ldw	r2,-20(fp)
   14564:	10800217 	ldw	r2,8(r2)
   14568:	108000cc 	andi	r2,r2,3
   1456c:	10001826 	beq	r2,zero,145d0 <write+0xc4>
   14570:	e0bffb17 	ldw	r2,-20(fp)
   14574:	10800017 	ldw	r2,0(r2)
   14578:	10800617 	ldw	r2,24(r2)
   1457c:	10001426 	beq	r2,zero,145d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14580:	e0bffb17 	ldw	r2,-20(fp)
   14584:	10800017 	ldw	r2,0(r2)
   14588:	10800617 	ldw	r2,24(r2)
   1458c:	e0ffff17 	ldw	r3,-4(fp)
   14590:	180d883a 	mov	r6,r3
   14594:	e17ffe17 	ldw	r5,-8(fp)
   14598:	e13ffb17 	ldw	r4,-20(fp)
   1459c:	103ee83a 	callr	r2
   145a0:	e0bffc15 	stw	r2,-16(fp)
   145a4:	e0bffc17 	ldw	r2,-16(fp)
   145a8:	1000070e 	bge	r2,zero,145c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   145ac:	00144d00 	call	144d0 <alt_get_errno>
   145b0:	1007883a 	mov	r3,r2
   145b4:	e0bffc17 	ldw	r2,-16(fp)
   145b8:	0085c83a 	sub	r2,zero,r2
   145bc:	18800015 	stw	r2,0(r3)
        return -1;
   145c0:	00bfffc4 	movi	r2,-1
   145c4:	00000c06 	br	145f8 <write+0xec>
      }
      return rval;
   145c8:	e0bffc17 	ldw	r2,-16(fp)
   145cc:	00000a06 	br	145f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   145d0:	00144d00 	call	144d0 <alt_get_errno>
   145d4:	1007883a 	mov	r3,r2
   145d8:	00800344 	movi	r2,13
   145dc:	18800015 	stw	r2,0(r3)
   145e0:	00000406 	br	145f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   145e4:	00144d00 	call	144d0 <alt_get_errno>
   145e8:	1007883a 	mov	r3,r2
   145ec:	00801444 	movi	r2,81
   145f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   145f4:	00bfffc4 	movi	r2,-1
}
   145f8:	e037883a 	mov	sp,fp
   145fc:	dfc00117 	ldw	ra,4(sp)
   14600:	df000017 	ldw	fp,0(sp)
   14604:	dec00204 	addi	sp,sp,8
   14608:	f800283a 	ret

0001460c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1460c:	defffd04 	addi	sp,sp,-12
   14610:	dfc00215 	stw	ra,8(sp)
   14614:	df000115 	stw	fp,4(sp)
   14618:	df000104 	addi	fp,sp,4
   1461c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14620:	d1600a04 	addi	r5,gp,-32728
   14624:	e13fff17 	ldw	r4,-4(fp)
   14628:	00163bc0 	call	163bc <alt_dev_llist_insert>
}
   1462c:	e037883a 	mov	sp,fp
   14630:	dfc00117 	ldw	ra,4(sp)
   14634:	df000017 	ldw	fp,0(sp)
   14638:	dec00204 	addi	sp,sp,8
   1463c:	f800283a 	ret

00014640 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14640:	defffd04 	addi	sp,sp,-12
   14644:	dfc00215 	stw	ra,8(sp)
   14648:	df000115 	stw	fp,4(sp)
   1464c:	df000104 	addi	fp,sp,4
   14650:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   14654:	0016d680 	call	16d68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14658:	00800044 	movi	r2,1
   1465c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14660:	0001883a 	nop
   14664:	e037883a 	mov	sp,fp
   14668:	dfc00117 	ldw	ra,4(sp)
   1466c:	df000017 	ldw	fp,0(sp)
   14670:	dec00204 	addi	sp,sp,8
   14674:	f800283a 	ret

00014678 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14678:	defffc04 	addi	sp,sp,-16
   1467c:	dfc00315 	stw	ra,12(sp)
   14680:	df000215 	stw	fp,8(sp)
   14684:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   14688:	01c0fa04 	movi	r7,1000
   1468c:	01800044 	movi	r6,1
   14690:	000b883a 	mov	r5,zero
   14694:	01020034 	movhi	r4,2048
   14698:	210c0804 	addi	r4,r4,12320
   1469c:	00160600 	call	16060 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( COPY_DMA, copy_dma);
   146a0:	00800084 	movi	r2,2
   146a4:	d8800015 	stw	r2,0(sp)
   146a8:	000f883a 	mov	r7,zero
   146ac:	01820034 	movhi	r6,2048
   146b0:	318c0004 	addi	r6,r6,12288
   146b4:	014000b4 	movhi	r5,2
   146b8:	2964e204 	addi	r5,r5,-27768
   146bc:	010000b4 	movhi	r4,2
   146c0:	2124db04 	addi	r4,r4,-27796
   146c4:	00154cc0 	call	154cc <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   146c8:	000d883a 	mov	r6,zero
   146cc:	000b883a 	mov	r5,zero
   146d0:	010000b4 	movhi	r4,2
   146d4:	2124f304 	addi	r4,r4,-27700
   146d8:	00156e40 	call	156e4 <altera_avalon_jtag_uart_init>
   146dc:	010000b4 	movhi	r4,2
   146e0:	2124e904 	addi	r4,r4,-27740
   146e4:	001460c0 	call	1460c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   146e8:	008000b4 	movhi	r2,2
   146ec:	10a90104 	addi	r2,r2,-23548
   146f0:	10800a17 	ldw	r2,40(r2)
   146f4:	10800017 	ldw	r2,0(r2)
   146f8:	1007883a 	mov	r3,r2
   146fc:	008000b4 	movhi	r2,2
   14700:	10a90104 	addi	r2,r2,-23548
   14704:	10c00b15 	stw	r3,44(r2)
   14708:	008000b4 	movhi	r2,2
   1470c:	10a90104 	addi	r2,r2,-23548
   14710:	10800a17 	ldw	r2,40(r2)
   14714:	10800104 	addi	r2,r2,4
   14718:	10800017 	ldw	r2,0(r2)
   1471c:	1007883a 	mov	r3,r2
   14720:	008000b4 	movhi	r2,2
   14724:	10a90104 	addi	r2,r2,-23548
   14728:	10c00c15 	stw	r3,48(r2)
   1472c:	008000b4 	movhi	r2,2
   14730:	10a90104 	addi	r2,r2,-23548
   14734:	10800a17 	ldw	r2,40(r2)
   14738:	10800204 	addi	r2,r2,8
   1473c:	10800017 	ldw	r2,0(r2)
   14740:	10ffffcc 	andi	r3,r2,65535
   14744:	008000b4 	movhi	r2,2
   14748:	10a90104 	addi	r2,r2,-23548
   1474c:	10c00f15 	stw	r3,60(r2)
   14750:	008000b4 	movhi	r2,2
   14754:	10a90104 	addi	r2,r2,-23548
   14758:	10800a17 	ldw	r2,40(r2)
   1475c:	10800204 	addi	r2,r2,8
   14760:	10800017 	ldw	r2,0(r2)
   14764:	1006d43a 	srli	r3,r2,16
   14768:	008000b4 	movhi	r2,2
   1476c:	10a90104 	addi	r2,r2,-23548
   14770:	10c01015 	stw	r3,64(r2)
   14774:	008000b4 	movhi	r2,2
   14778:	10a90104 	addi	r2,r2,-23548
   1477c:	10800a17 	ldw	r2,40(r2)
   14780:	10800304 	addi	r2,r2,12
   14784:	10800017 	ldw	r2,0(r2)
   14788:	1005d07a 	srai	r2,r2,1
   1478c:	10c0004c 	andi	r3,r2,1
   14790:	008000b4 	movhi	r2,2
   14794:	10a90104 	addi	r2,r2,-23548
   14798:	10c00d15 	stw	r3,52(r2)
   1479c:	008000b4 	movhi	r2,2
   147a0:	10a90104 	addi	r2,r2,-23548
   147a4:	10800a17 	ldw	r2,40(r2)
   147a8:	10800304 	addi	r2,r2,12
   147ac:	10800017 	ldw	r2,0(r2)
   147b0:	1005d13a 	srai	r2,r2,4
   147b4:	10c003cc 	andi	r3,r2,15
   147b8:	008000b4 	movhi	r2,2
   147bc:	10a90104 	addi	r2,r2,-23548
   147c0:	10c00e15 	stw	r3,56(r2)
   147c4:	008000b4 	movhi	r2,2
   147c8:	10a90104 	addi	r2,r2,-23548
   147cc:	10800a17 	ldw	r2,40(r2)
   147d0:	10800304 	addi	r2,r2,12
   147d4:	10800017 	ldw	r2,0(r2)
   147d8:	1005d43a 	srai	r2,r2,16
   147dc:	e0bfff05 	stb	r2,-4(fp)
   147e0:	008000b4 	movhi	r2,2
   147e4:	10a90104 	addi	r2,r2,-23548
   147e8:	10800a17 	ldw	r2,40(r2)
   147ec:	10800304 	addi	r2,r2,12
   147f0:	10800017 	ldw	r2,0(r2)
   147f4:	1004d63a 	srli	r2,r2,24
   147f8:	e0bfff45 	stb	r2,-3(fp)
   147fc:	008000b4 	movhi	r2,2
   14800:	10a90104 	addi	r2,r2,-23548
   14804:	10800e17 	ldw	r2,56(r2)
   14808:	10800058 	cmpnei	r2,r2,1
   1480c:	1000041e 	bne	r2,zero,14820 <alt_sys_init+0x1a8>
   14810:	008000b4 	movhi	r2,2
   14814:	10a90104 	addi	r2,r2,-23548
   14818:	10001115 	stw	zero,68(r2)
   1481c:	00000e06 	br	14858 <alt_sys_init+0x1e0>
   14820:	008000b4 	movhi	r2,2
   14824:	10a90104 	addi	r2,r2,-23548
   14828:	10800e17 	ldw	r2,56(r2)
   1482c:	10800098 	cmpnei	r2,r2,2
   14830:	1000051e 	bne	r2,zero,14848 <alt_sys_init+0x1d0>
   14834:	008000b4 	movhi	r2,2
   14838:	10a90104 	addi	r2,r2,-23548
   1483c:	00c00044 	movi	r3,1
   14840:	10c01115 	stw	r3,68(r2)
   14844:	00000406 	br	14858 <alt_sys_init+0x1e0>
   14848:	008000b4 	movhi	r2,2
   1484c:	10a90104 	addi	r2,r2,-23548
   14850:	00c00084 	movi	r3,2
   14854:	10c01115 	stw	r3,68(r2)
   14858:	e0bfff03 	ldbu	r2,-4(fp)
   1485c:	00c00804 	movi	r3,32
   14860:	1885c83a 	sub	r2,r3,r2
   14864:	00ffffc4 	movi	r3,-1
   14868:	1886d83a 	srl	r3,r3,r2
   1486c:	008000b4 	movhi	r2,2
   14870:	10a90104 	addi	r2,r2,-23548
   14874:	10c01215 	stw	r3,72(r2)
   14878:	e0ffff03 	ldbu	r3,-4(fp)
   1487c:	008000b4 	movhi	r2,2
   14880:	10a90104 	addi	r2,r2,-23548
   14884:	10801117 	ldw	r2,68(r2)
   14888:	1887883a 	add	r3,r3,r2
   1488c:	008000b4 	movhi	r2,2
   14890:	10a90104 	addi	r2,r2,-23548
   14894:	10c01315 	stw	r3,76(r2)
   14898:	e0bfff43 	ldbu	r2,-3(fp)
   1489c:	00c00804 	movi	r3,32
   148a0:	1885c83a 	sub	r2,r3,r2
   148a4:	00ffffc4 	movi	r3,-1
   148a8:	1886d83a 	srl	r3,r3,r2
   148ac:	008000b4 	movhi	r2,2
   148b0:	10a90104 	addi	r2,r2,-23548
   148b4:	10c01415 	stw	r3,80(r2)
   148b8:	010000b4 	movhi	r4,2
   148bc:	21290104 	addi	r4,r4,-23548
   148c0:	001460c0 	call	1460c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_RESAMPLER, vga_resampler);
   148c4:	008000b4 	movhi	r2,2
   148c8:	10a91604 	addi	r2,r2,-23464
   148cc:	10800a17 	ldw	r2,40(r2)
   148d0:	10800017 	ldw	r2,0(r2)
   148d4:	10c003cc 	andi	r3,r2,15
   148d8:	008000b4 	movhi	r2,2
   148dc:	10a91604 	addi	r2,r2,-23464
   148e0:	10c00b15 	stw	r3,44(r2)
   148e4:	008000b4 	movhi	r2,2
   148e8:	10a91604 	addi	r2,r2,-23464
   148ec:	10800a17 	ldw	r2,40(r2)
   148f0:	10800017 	ldw	r2,0(r2)
   148f4:	1005d13a 	srai	r2,r2,4
   148f8:	10c0004c 	andi	r3,r2,1
   148fc:	008000b4 	movhi	r2,2
   14900:	10a91604 	addi	r2,r2,-23464
   14904:	10c00c15 	stw	r3,48(r2)
   14908:	008000b4 	movhi	r2,2
   1490c:	10a91604 	addi	r2,r2,-23464
   14910:	10800a17 	ldw	r2,40(r2)
   14914:	10800017 	ldw	r2,0(r2)
   14918:	1005d17a 	srai	r2,r2,5
   1491c:	10c0004c 	andi	r3,r2,1
   14920:	008000b4 	movhi	r2,2
   14924:	10a91604 	addi	r2,r2,-23464
   14928:	10c00d15 	stw	r3,52(r2)
   1492c:	008000b4 	movhi	r2,2
   14930:	10a91604 	addi	r2,r2,-23464
   14934:	10800a17 	ldw	r2,40(r2)
   14938:	10800017 	ldw	r2,0(r2)
   1493c:	1005d43a 	srai	r2,r2,16
   14940:	10c003cc 	andi	r3,r2,15
   14944:	008000b4 	movhi	r2,2
   14948:	10a91604 	addi	r2,r2,-23464
   1494c:	10c00e15 	stw	r3,56(r2)
   14950:	008000b4 	movhi	r2,2
   14954:	10a91604 	addi	r2,r2,-23464
   14958:	10800a17 	ldw	r2,40(r2)
   1495c:	10800017 	ldw	r2,0(r2)
   14960:	1005d53a 	srai	r2,r2,20
   14964:	10c0004c 	andi	r3,r2,1
   14968:	008000b4 	movhi	r2,2
   1496c:	10a91604 	addi	r2,r2,-23464
   14970:	10c00f15 	stw	r3,60(r2)
   14974:	008000b4 	movhi	r2,2
   14978:	10a91604 	addi	r2,r2,-23464
   1497c:	10800a17 	ldw	r2,40(r2)
   14980:	10800017 	ldw	r2,0(r2)
   14984:	1005d57a 	srai	r2,r2,21
   14988:	10c0004c 	andi	r3,r2,1
   1498c:	008000b4 	movhi	r2,2
   14990:	10a91604 	addi	r2,r2,-23464
   14994:	10c01015 	stw	r3,64(r2)
   14998:	010000b4 	movhi	r4,2
   1499c:	21291604 	addi	r4,r4,-23464
   149a0:	001460c0 	call	1460c <alt_dev_reg>
}
   149a4:	0001883a 	nop
   149a8:	e037883a 	mov	sp,fp
   149ac:	dfc00117 	ldw	ra,4(sp)
   149b0:	df000017 	ldw	fp,0(sp)
   149b4:	dec00204 	addi	sp,sp,8
   149b8:	f800283a 	ret

000149bc <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
   149bc:	defffd04 	addi	sp,sp,-12
   149c0:	dfc00215 	stw	ra,8(sp)
   149c4:	df000115 	stw	fp,4(sp)
   149c8:	df000104 	addi	fp,sp,4
   149cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
   149d0:	d1600f04 	addi	r5,gp,-32708
   149d4:	e13fff17 	ldw	r4,-4(fp)
   149d8:	00163bc0 	call	163bc <alt_dev_llist_insert>
}
   149dc:	e037883a 	mov	sp,fp
   149e0:	dfc00117 	ldw	ra,4(sp)
   149e4:	df000017 	ldw	fp,0(sp)
   149e8:	dec00204 	addi	sp,sp,8
   149ec:	f800283a 	ret

000149f0 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
   149f0:	defffd04 	addi	sp,sp,-12
   149f4:	dfc00215 	stw	ra,8(sp)
   149f8:	df000115 	stw	fp,4(sp)
   149fc:	df000104 	addi	fp,sp,4
   14a00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
   14a04:	d1600d04 	addi	r5,gp,-32716
   14a08:	e13fff17 	ldw	r4,-4(fp)
   14a0c:	00163bc0 	call	163bc <alt_dev_llist_insert>
}
   14a10:	e037883a 	mov	sp,fp
   14a14:	dfc00117 	ldw	ra,4(sp)
   14a18:	df000017 	ldw	fp,0(sp)
   14a1c:	dec00204 	addi	sp,sp,8
   14a20:	f800283a 	ret

00014a24 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
   14a24:	defffc04 	addi	sp,sp,-16
   14a28:	df000315 	stw	fp,12(sp)
   14a2c:	df000304 	addi	fp,sp,12
   14a30:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   14a34:	e0bfff17 	ldw	r2,-4(fp)
   14a38:	10c00117 	ldw	r3,4(r2)
   14a3c:	e0bfff17 	ldw	r2,-4(fp)
   14a40:	10800217 	ldw	r2,8(r2)
   14a44:	18802e26 	beq	r3,r2,14b00 <alt_avalon_dma_launch_bidir+0xdc>
   14a48:	e0bfff17 	ldw	r2,-4(fp)
   14a4c:	10c00317 	ldw	r3,12(r2)
   14a50:	e0bfff17 	ldw	r2,-4(fp)
   14a54:	10800417 	ldw	r2,16(r2)
   14a58:	18802926 	beq	r3,r2,14b00 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
   14a5c:	e0bfff17 	ldw	r2,-4(fp)
   14a60:	00c00044 	movi	r3,1
   14a64:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
   14a68:	e0bfff17 	ldw	r2,-4(fp)
   14a6c:	10800117 	ldw	r2,4(r2)
   14a70:	1004913a 	slli	r2,r2,4
   14a74:	10800904 	addi	r2,r2,36
   14a78:	e0ffff17 	ldw	r3,-4(fp)
   14a7c:	1885883a 	add	r2,r3,r2
   14a80:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
   14a84:	e0bfff17 	ldw	r2,-4(fp)
   14a88:	10800317 	ldw	r2,12(r2)
   14a8c:	1004913a 	slli	r2,r2,4
   14a90:	10801904 	addi	r2,r2,100
   14a94:	e0ffff17 	ldw	r3,-4(fp)
   14a98:	1885883a 	add	r2,r3,r2
   14a9c:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
   14aa4:	10800017 	ldw	r2,0(r2)
   14aa8:	10800104 	addi	r2,r2,4
   14aac:	e0fffd17 	ldw	r3,-12(fp)
   14ab0:	18c00017 	ldw	r3,0(r3)
   14ab4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   14ab8:	e0bfff17 	ldw	r2,-4(fp)
   14abc:	10800017 	ldw	r2,0(r2)
   14ac0:	10800204 	addi	r2,r2,8
   14ac4:	e0fffe17 	ldw	r3,-8(fp)
   14ac8:	18c00017 	ldw	r3,0(r3)
   14acc:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
   14ad0:	e0bfff17 	ldw	r2,-4(fp)
   14ad4:	10800017 	ldw	r2,0(r2)
   14ad8:	11000304 	addi	r4,r2,12
   14adc:	e0bffd17 	ldw	r2,-12(fp)
   14ae0:	11400117 	ldw	r5,4(r2)
   14ae4:	e0bffe17 	ldw	r2,-8(fp)
   14ae8:	10c00117 	ldw	r3,4(r2)
   14aec:	2805883a 	mov	r2,r5
   14af0:	1880012e 	bgeu	r3,r2,14af8 <alt_avalon_dma_launch_bidir+0xd4>
   14af4:	1805883a 	mov	r2,r3
   14af8:	20800035 	stwio	r2,0(r4)
   14afc:	00000206 	br	14b08 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
   14b00:	e0bfff17 	ldw	r2,-4(fp)
   14b04:	10000815 	stw	zero,32(r2)
  }
}
   14b08:	0001883a 	nop
   14b0c:	e037883a 	mov	sp,fp
   14b10:	df000017 	ldw	fp,0(sp)
   14b14:	dec00104 	addi	sp,sp,4
   14b18:	f800283a 	ret

00014b1c <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
   14b1c:	defffd04 	addi	sp,sp,-12
   14b20:	df000215 	stw	fp,8(sp)
   14b24:	df000204 	addi	fp,sp,8
   14b28:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   14b2c:	e0bfff17 	ldw	r2,-4(fp)
   14b30:	10c00117 	ldw	r3,4(r2)
   14b34:	e0bfff17 	ldw	r2,-4(fp)
   14b38:	10800217 	ldw	r2,8(r2)
   14b3c:	18801726 	beq	r3,r2,14b9c <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	00c00044 	movi	r3,1
   14b48:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
   14b4c:	e0bfff17 	ldw	r2,-4(fp)
   14b50:	10800117 	ldw	r2,4(r2)
   14b54:	1004913a 	slli	r2,r2,4
   14b58:	10800904 	addi	r2,r2,36
   14b5c:	e0ffff17 	ldw	r3,-4(fp)
   14b60:	1885883a 	add	r2,r3,r2
   14b64:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   14b68:	e0bfff17 	ldw	r2,-4(fp)
   14b6c:	10800017 	ldw	r2,0(r2)
   14b70:	10800104 	addi	r2,r2,4
   14b74:	e0fffe17 	ldw	r3,-8(fp)
   14b78:	18c00017 	ldw	r3,0(r3)
   14b7c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
   14b80:	e0bfff17 	ldw	r2,-4(fp)
   14b84:	10800017 	ldw	r2,0(r2)
   14b88:	10800304 	addi	r2,r2,12
   14b8c:	e0fffe17 	ldw	r3,-8(fp)
   14b90:	18c00117 	ldw	r3,4(r3)
   14b94:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   14b98:	00000206 	br	14ba4 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
   14b9c:	e0bfff17 	ldw	r2,-4(fp)
   14ba0:	10000815 	stw	zero,32(r2)
  }
}
   14ba4:	0001883a 	nop
   14ba8:	e037883a 	mov	sp,fp
   14bac:	df000017 	ldw	fp,0(sp)
   14bb0:	dec00104 	addi	sp,sp,4
   14bb4:	f800283a 	ret

00014bb8 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
   14bb8:	defffd04 	addi	sp,sp,-12
   14bbc:	df000215 	stw	fp,8(sp)
   14bc0:	df000204 	addi	fp,sp,8
   14bc4:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   14bc8:	e0bfff17 	ldw	r2,-4(fp)
   14bcc:	10c00317 	ldw	r3,12(r2)
   14bd0:	e0bfff17 	ldw	r2,-4(fp)
   14bd4:	10800417 	ldw	r2,16(r2)
   14bd8:	18801726 	beq	r3,r2,14c38 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
   14bdc:	e0bfff17 	ldw	r2,-4(fp)
   14be0:	00c00044 	movi	r3,1
   14be4:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
   14be8:	e0bfff17 	ldw	r2,-4(fp)
   14bec:	10800317 	ldw	r2,12(r2)
   14bf0:	1004913a 	slli	r2,r2,4
   14bf4:	10801904 	addi	r2,r2,100
   14bf8:	e0ffff17 	ldw	r3,-4(fp)
   14bfc:	1885883a 	add	r2,r3,r2
   14c00:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   14c04:	e0bfff17 	ldw	r2,-4(fp)
   14c08:	10800017 	ldw	r2,0(r2)
   14c0c:	10800204 	addi	r2,r2,8
   14c10:	e0fffe17 	ldw	r3,-8(fp)
   14c14:	18c00017 	ldw	r3,0(r3)
   14c18:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
   14c1c:	e0bfff17 	ldw	r2,-4(fp)
   14c20:	10800017 	ldw	r2,0(r2)
   14c24:	10800304 	addi	r2,r2,12
   14c28:	e0fffe17 	ldw	r3,-8(fp)
   14c2c:	18c00117 	ldw	r3,4(r3)
   14c30:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   14c34:	00000206 	br	14c40 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
   14c38:	e0bfff17 	ldw	r2,-4(fp)
   14c3c:	10000815 	stw	zero,32(r2)
  }
}
   14c40:	0001883a 	nop
   14c44:	e037883a 	mov	sp,fp
   14c48:	df000017 	ldw	fp,0(sp)
   14c4c:	dec00104 	addi	sp,sp,4
   14c50:	f800283a 	ret

00014c54 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
   14c54:	defffa04 	addi	sp,sp,-24
   14c58:	df000515 	stw	fp,20(sp)
   14c5c:	df000504 	addi	fp,sp,20
   14c60:	e13ffd15 	stw	r4,-12(fp)
   14c64:	e17ffe15 	stw	r5,-8(fp)
   14c68:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
   14c6c:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   14c70:	e0bffd17 	ldw	r2,-12(fp)
   14c74:	10c00117 	ldw	r3,4(r2)
   14c78:	e0bffd17 	ldw	r2,-12(fp)
   14c7c:	10800217 	ldw	r2,8(r2)
   14c80:	18800a1e 	bne	r3,r2,14cac <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
   14c84:	e0bffd17 	ldw	r2,-12(fp)
   14c88:	10c00317 	ldw	r3,12(r2)
   14c8c:	e0bffd17 	ldw	r2,-12(fp)
   14c90:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   14c94:	1880051e 	bne	r3,r2,14cac <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
   14c98:	e0bffd17 	ldw	r2,-12(fp)
   14c9c:	10800017 	ldw	r2,0(r2)
   14ca0:	10800304 	addi	r2,r2,12
   14ca4:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
   14ca8:	10000226 	beq	r2,zero,14cb4 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
   14cac:	00bffec4 	movi	r2,-5
   14cb0:	0000b506 	br	14f88 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
   14cb4:	e0bffe17 	ldw	r2,-8(fp)
   14cb8:	108002a8 	cmpgeui	r2,r2,10
   14cbc:	1000781e 	bne	r2,zero,14ea0 <alt_avalon_dma_ioctl+0x24c>
   14cc0:	e0bffe17 	ldw	r2,-8(fp)
   14cc4:	100690ba 	slli	r3,r2,2
   14cc8:	00800074 	movhi	r2,1
   14ccc:	10933704 	addi	r2,r2,19676
   14cd0:	1885883a 	add	r2,r3,r2
   14cd4:	10800017 	ldw	r2,0(r2)
   14cd8:	1000683a 	jmp	r2
   14cdc:	00014ea0 	cmpeqi	zero,zero,1338
   14ce0:	00014d04 	movi	zero,1332
   14ce4:	00014d5c 	xori	zero,zero,1333
   14ce8:	00014d88 	cmpgei	zero,zero,1334
   14cec:	00014de0 	cmpeqi	zero,zero,1335
   14cf0:	00014e0c 	andi	zero,zero,1336
   14cf4:	00014e28 	cmpgeui	zero,zero,1336
   14cf8:	00014e48 	cmpgei	zero,zero,1337
   14cfc:	00014e68 	cmpgeui	zero,zero,1337
   14d00:	00014e88 	cmpgei	zero,zero,1338
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
   14d04:	e0bffd17 	ldw	r2,-12(fp)
   14d08:	10800517 	ldw	r2,20(r2)
   14d0c:	1080100c 	andi	r2,r2,64
   14d10:	10000f1e 	bne	r2,zero,14d50 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
   14d14:	e0bffd17 	ldw	r2,-12(fp)
   14d18:	10800017 	ldw	r2,0(r2)
   14d1c:	10800104 	addi	r2,r2,4
   14d20:	e0ffff17 	ldw	r3,-4(fp)
   14d24:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   14d28:	e0bffd17 	ldw	r2,-12(fp)
   14d2c:	10800517 	ldw	r2,20(r2)
   14d30:	10c00814 	ori	r3,r2,32
   14d34:	e0bffd17 	ldw	r2,-12(fp)
   14d38:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
   14d3c:	e0fffd17 	ldw	r3,-12(fp)
   14d40:	00800074 	movhi	r2,1
   14d44:	1092ee04 	addi	r2,r2,19384
   14d48:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   14d4c:	00005606 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
   14d50:	00bffec4 	movi	r2,-5
   14d54:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   14d58:	00005306 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
   14d5c:	e0bffd17 	ldw	r2,-12(fp)
   14d60:	10c00517 	ldw	r3,20(r2)
   14d64:	00bff7c4 	movi	r2,-33
   14d68:	1886703a 	and	r3,r3,r2
   14d6c:	e0bffd17 	ldw	r2,-12(fp)
   14d70:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   14d74:	e0fffd17 	ldw	r3,-12(fp)
   14d78:	00800074 	movhi	r2,1
   14d7c:	10928904 	addi	r2,r2,18980
   14d80:	18800715 	stw	r2,28(r3)
    break;
   14d84:	00004806 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
   14d88:	e0bffd17 	ldw	r2,-12(fp)
   14d8c:	10800517 	ldw	r2,20(r2)
   14d90:	1080080c 	andi	r2,r2,32
   14d94:	10000f1e 	bne	r2,zero,14dd4 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
   14d98:	e0bffd17 	ldw	r2,-12(fp)
   14d9c:	10800017 	ldw	r2,0(r2)
   14da0:	10800204 	addi	r2,r2,8
   14da4:	e0ffff17 	ldw	r3,-4(fp)
   14da8:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   14dac:	e0bffd17 	ldw	r2,-12(fp)
   14db0:	10800517 	ldw	r2,20(r2)
   14db4:	10c01014 	ori	r3,r2,64
   14db8:	e0bffd17 	ldw	r2,-12(fp)
   14dbc:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
   14dc0:	e0fffd17 	ldw	r3,-12(fp)
   14dc4:	00800074 	movhi	r2,1
   14dc8:	1092c704 	addi	r2,r2,19228
   14dcc:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   14dd0:	00003506 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
   14dd4:	00bffec4 	movi	r2,-5
   14dd8:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   14ddc:	00003206 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
   14de0:	e0bffd17 	ldw	r2,-12(fp)
   14de4:	10c00517 	ldw	r3,20(r2)
   14de8:	00bfefc4 	movi	r2,-65
   14dec:	1886703a 	and	r3,r3,r2
   14df0:	e0bffd17 	ldw	r2,-12(fp)
   14df4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   14df8:	e0fffd17 	ldw	r3,-12(fp)
   14dfc:	00800074 	movhi	r2,1
   14e00:	10928904 	addi	r2,r2,18980
   14e04:	18800715 	stw	r2,28(r3)
    break;
   14e08:	00002706 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   14e0c:	e0bffd17 	ldw	r2,-12(fp)
   14e10:	10c00517 	ldw	r3,20(r2)
   14e14:	00bffc04 	movi	r2,-16
   14e18:	1886703a 	and	r3,r3,r2
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
   14e24:	00002006 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   14e28:	e0bffd17 	ldw	r2,-12(fp)
   14e2c:	10c00517 	ldw	r3,20(r2)
   14e30:	00bffc04 	movi	r2,-16
   14e34:	1884703a 	and	r2,r3,r2
   14e38:	10c00054 	ori	r3,r2,1
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
   14e44:	00001806 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   14e48:	e0bffd17 	ldw	r2,-12(fp)
   14e4c:	10c00517 	ldw	r3,20(r2)
   14e50:	00bffc04 	movi	r2,-16
   14e54:	1884703a 	and	r2,r3,r2
   14e58:	10c000d4 	ori	r3,r2,3
   14e5c:	e0bffd17 	ldw	r2,-12(fp)
   14e60:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
   14e64:	00001006 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   14e68:	e0bffd17 	ldw	r2,-12(fp)
   14e6c:	10c00517 	ldw	r3,20(r2)
   14e70:	00bffc04 	movi	r2,-16
   14e74:	1884703a 	and	r2,r3,r2
   14e78:	10c001d4 	ori	r3,r2,7
   14e7c:	e0bffd17 	ldw	r2,-12(fp)
   14e80:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
   14e84:	00000806 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   14e88:	e0bffd17 	ldw	r2,-12(fp)
   14e8c:	10800517 	ldw	r2,20(r2)
   14e90:	10c003d4 	ori	r3,r2,15
   14e94:	e0bffd17 	ldw	r2,-12(fp)
   14e98:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
   14e9c:	00000206 	br	14ea8 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
   14ea0:	00bff9c4 	movi	r2,-25
   14ea4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
   14ea8:	e0bffb17 	ldw	r2,-20(fp)
   14eac:	1000351e 	bne	r2,zero,14f84 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
   14eb0:	e0bffd17 	ldw	r2,-12(fp)
   14eb4:	10800517 	ldw	r2,20(r2)
   14eb8:	108003cc 	andi	r2,r2,15
   14ebc:	10c00060 	cmpeqi	r3,r2,1
   14ec0:	1800091e 	bne	r3,zero,14ee8 <alt_avalon_dma_ioctl+0x294>
   14ec4:	0080052e 	bgeu	zero,r2,14edc <alt_avalon_dma_ioctl+0x288>
   14ec8:	10c000e0 	cmpeqi	r3,r2,3
   14ecc:	1800091e 	bne	r3,zero,14ef4 <alt_avalon_dma_ioctl+0x2a0>
   14ed0:	108001e0 	cmpeqi	r2,r2,7
   14ed4:	10000a1e 	bne	r2,zero,14f00 <alt_avalon_dma_ioctl+0x2ac>
   14ed8:	00000c06 	br	14f0c <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
   14edc:	00800044 	movi	r2,1
   14ee0:	e0bffc15 	stw	r2,-16(fp)
       break;
   14ee4:	00000b06 	br	14f14 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
   14ee8:	00800084 	movi	r2,2
   14eec:	e0bffc15 	stw	r2,-16(fp)
       break;
   14ef0:	00000806 	br	14f14 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
   14ef4:	00800104 	movi	r2,4
   14ef8:	e0bffc15 	stw	r2,-16(fp)
       break;
   14efc:	00000506 	br	14f14 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
   14f00:	00810004 	movi	r2,1024
   14f04:	e0bffc15 	stw	r2,-16(fp)
       break;
   14f08:	00000206 	br	14f14 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
   14f0c:	00820004 	movi	r2,2048
   14f10:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
   14f14:	e0bffd17 	ldw	r2,-12(fp)
   14f18:	10800517 	ldw	r2,20(r2)
   14f1c:	1080080c 	andi	r2,r2,32
   14f20:	10000726 	beq	r2,zero,14f40 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	10800017 	ldw	r2,0(r2)
   14f2c:	10800604 	addi	r2,r2,24
   14f30:	e0fffc17 	ldw	r3,-16(fp)
   14f34:	18c07e14 	ori	r3,r3,504
   14f38:	10c00035 	stwio	r3,0(r2)
   14f3c:	00001106 	br	14f84 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
   14f40:	e0bffd17 	ldw	r2,-12(fp)
   14f44:	10800517 	ldw	r2,20(r2)
   14f48:	1080100c 	andi	r2,r2,64
   14f4c:	10000726 	beq	r2,zero,14f6c <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   14f50:	e0bffd17 	ldw	r2,-12(fp)
   14f54:	10800017 	ldw	r2,0(r2)
   14f58:	10800604 	addi	r2,r2,24
   14f5c:	e0fffc17 	ldw	r3,-16(fp)
   14f60:	18c0be14 	ori	r3,r3,760
   14f64:	10c00035 	stwio	r3,0(r2)
   14f68:	00000606 	br	14f84 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   14f6c:	e0bffd17 	ldw	r2,-12(fp)
   14f70:	10800017 	ldw	r2,0(r2)
   14f74:	10800604 	addi	r2,r2,24
   14f78:	e0fffc17 	ldw	r3,-16(fp)
   14f7c:	18c03e14 	ori	r3,r3,248
   14f80:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
   14f84:	e0bffb17 	ldw	r2,-20(fp)
}
   14f88:	e037883a 	mov	sp,fp
   14f8c:	df000017 	ldw	fp,0(sp)
   14f90:	dec00104 	addi	sp,sp,4
   14f94:	f800283a 	ret

00014f98 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
   14f98:	defffb04 	addi	sp,sp,-20
   14f9c:	dfc00415 	stw	ra,16(sp)
   14fa0:	df000315 	stw	fp,12(sp)
   14fa4:	df000304 	addi	fp,sp,12
   14fa8:	e13ffd15 	stw	r4,-12(fp)
   14fac:	e17ffe15 	stw	r5,-8(fp)
   14fb0:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
   14fb4:	e0bffd17 	ldw	r2,-12(fp)
   14fb8:	10800617 	ldw	r2,24(r2)
   14fbc:	e1bfff17 	ldw	r6,-4(fp)
   14fc0:	e17ffe17 	ldw	r5,-8(fp)
   14fc4:	1009883a 	mov	r4,r2
   14fc8:	0014c540 	call	14c54 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   14fcc:	e037883a 	mov	sp,fp
   14fd0:	dfc00117 	ldw	ra,4(sp)
   14fd4:	df000017 	ldw	fp,0(sp)
   14fd8:	dec00204 	addi	sp,sp,8
   14fdc:	f800283a 	ret

00014fe0 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
   14fe0:	defffb04 	addi	sp,sp,-20
   14fe4:	dfc00415 	stw	ra,16(sp)
   14fe8:	df000315 	stw	fp,12(sp)
   14fec:	df000304 	addi	fp,sp,12
   14ff0:	e13ffd15 	stw	r4,-12(fp)
   14ff4:	e17ffe15 	stw	r5,-8(fp)
   14ff8:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	10800617 	ldw	r2,24(r2)
   15004:	e1bfff17 	ldw	r6,-4(fp)
   15008:	e17ffe17 	ldw	r5,-8(fp)
   1500c:	1009883a 	mov	r4,r2
   15010:	0014c540 	call	14c54 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   15014:	e037883a 	mov	sp,fp
   15018:	dfc00117 	ldw	ra,4(sp)
   1501c:	df000017 	ldw	fp,0(sp)
   15020:	dec00204 	addi	sp,sp,8
   15024:	f800283a 	ret

00015028 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
   15028:	defff404 	addi	sp,sp,-48
   1502c:	dfc00b15 	stw	ra,44(sp)
   15030:	df000a15 	stw	fp,40(sp)
   15034:	df000a04 	addi	fp,sp,40
   15038:	e13ffc15 	stw	r4,-16(fp)
   1503c:	e17ffd15 	stw	r5,-12(fp)
   15040:	e1bffe15 	stw	r6,-8(fp)
   15044:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
   15048:	e0bffc17 	ldw	r2,-16(fp)
   1504c:	10800617 	ldw	r2,24(r2)
   15050:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   15054:	e0bff617 	ldw	r2,-40(fp)
   15058:	10800517 	ldw	r2,20(r2)
   1505c:	108003cc 	andi	r2,r2,15
   15060:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   15064:	e0fffd17 	ldw	r3,-12(fp)
   15068:	e0bff717 	ldw	r2,-36(fp)
   1506c:	1884703a 	and	r2,r3,r2
   15070:	1000081e 	bne	r2,zero,15094 <alt_avalon_dma_prepare+0x6c>
   15074:	e0fffe17 	ldw	r3,-8(fp)
   15078:	e0bff717 	ldw	r2,-36(fp)
   1507c:	1884703a 	and	r2,r3,r2
   15080:	1000041e 	bne	r2,zero,15094 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
   15084:	e0bff617 	ldw	r2,-40(fp)
   15088:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   1508c:	e0bffe17 	ldw	r2,-8(fp)
   15090:	1880022e 	bgeu	r3,r2,1509c <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
   15094:	00bffa84 	movi	r2,-22
   15098:	00002c06 	br	1514c <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
   1509c:	e0bff617 	ldw	r2,-40(fp)
   150a0:	10800317 	ldw	r2,12(r2)
   150a4:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
   150a8:	e0bff617 	ldw	r2,-40(fp)
   150ac:	10800417 	ldw	r2,16(r2)
   150b0:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
   150b4:	e0bff917 	ldw	r2,-28(fp)
   150b8:	1004913a 	slli	r2,r2,4
   150bc:	10801904 	addi	r2,r2,100
   150c0:	e0fff617 	ldw	r3,-40(fp)
   150c4:	1885883a 	add	r2,r3,r2
   150c8:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   150cc:	e0bff917 	ldw	r2,-28(fp)
   150d0:	10800044 	addi	r2,r2,1
   150d4:	108000cc 	andi	r2,r2,3
   150d8:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   150dc:	e0fffb17 	ldw	r3,-20(fp)
   150e0:	e0bff817 	ldw	r2,-32(fp)
   150e4:	1880021e 	bne	r3,r2,150f0 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
   150e8:	00bff904 	movi	r2,-28
   150ec:	00001706 	br	1514c <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
   150f0:	e0bffa17 	ldw	r2,-24(fp)
   150f4:	e0fffd17 	ldw	r3,-12(fp)
   150f8:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   150fc:	e0bffa17 	ldw	r2,-24(fp)
   15100:	e0fffe17 	ldw	r3,-8(fp)
   15104:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   15108:	e0bffa17 	ldw	r2,-24(fp)
   1510c:	e0ffff17 	ldw	r3,-4(fp)
   15110:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   15114:	e0bffa17 	ldw	r2,-24(fp)
   15118:	e0c00217 	ldw	r3,8(fp)
   1511c:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
   15120:	e0bff617 	ldw	r2,-40(fp)
   15124:	e0fffb17 	ldw	r3,-20(fp)
   15128:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
   1512c:	e0bff617 	ldw	r2,-40(fp)
   15130:	10800817 	ldw	r2,32(r2)
   15134:	1000041e 	bne	r2,zero,15148 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	10800717 	ldw	r2,28(r2)
   15140:	e13ff617 	ldw	r4,-40(fp)
   15144:	103ee83a 	callr	r2
  }

  return 0;
   15148:	0005883a 	mov	r2,zero
}
   1514c:	e037883a 	mov	sp,fp
   15150:	dfc00117 	ldw	ra,4(sp)
   15154:	df000017 	ldw	fp,0(sp)
   15158:	dec00204 	addi	sp,sp,8
   1515c:	f800283a 	ret

00015160 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
   15160:	defffb04 	addi	sp,sp,-20
   15164:	df000415 	stw	fp,16(sp)
   15168:	df000404 	addi	fp,sp,16
   1516c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   15170:	e0bfff17 	ldw	r2,-4(fp)
   15174:	10800617 	ldw	r2,24(r2)
   15178:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
   1517c:	e0bffc17 	ldw	r2,-16(fp)
   15180:	10800117 	ldw	r2,4(r2)
   15184:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
   15188:	e0bffc17 	ldw	r2,-16(fp)
   1518c:	10800217 	ldw	r2,8(r2)
   15190:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
   15194:	e0bffd17 	ldw	r2,-12(fp)
   15198:	e0fffe17 	ldw	r3,-8(fp)
   1519c:	1880052e 	bgeu	r3,r2,151b4 <alt_avalon_dma_space+0x54>
   151a0:	e0fffd17 	ldw	r3,-12(fp)
   151a4:	e0bffe17 	ldw	r2,-8(fp)
   151a8:	1885c83a 	sub	r2,r3,r2
   151ac:	10bfffc4 	addi	r2,r2,-1
   151b0:	00000406 	br	151c4 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
   151b4:	e0fffd17 	ldw	r3,-12(fp)
   151b8:	e0bffe17 	ldw	r2,-8(fp)
   151bc:	1885c83a 	sub	r2,r3,r2
   151c0:	108000c4 	addi	r2,r2,3
}
   151c4:	e037883a 	mov	sp,fp
   151c8:	df000017 	ldw	fp,0(sp)
   151cc:	dec00104 	addi	sp,sp,4
   151d0:	f800283a 	ret

000151d4 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
   151d4:	defff404 	addi	sp,sp,-48
   151d8:	dfc00b15 	stw	ra,44(sp)
   151dc:	df000a15 	stw	fp,40(sp)
   151e0:	df000a04 	addi	fp,sp,40
   151e4:	e13ffc15 	stw	r4,-16(fp)
   151e8:	e17ffd15 	stw	r5,-12(fp)
   151ec:	e1bffe15 	stw	r6,-8(fp)
   151f0:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   151f4:	e0bffc17 	ldw	r2,-16(fp)
   151f8:	10800617 	ldw	r2,24(r2)
   151fc:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   15200:	e0bff617 	ldw	r2,-40(fp)
   15204:	10800517 	ldw	r2,20(r2)
   15208:	108003cc 	andi	r2,r2,15
   1520c:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
   15210:	e0fffd17 	ldw	r3,-12(fp)
   15214:	e0bff717 	ldw	r2,-36(fp)
   15218:	1884703a 	and	r2,r3,r2
   1521c:	1000081e 	bne	r2,zero,15240 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
   15220:	e0fffe17 	ldw	r3,-8(fp)
   15224:	e0bff717 	ldw	r2,-36(fp)
   15228:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
   1522c:	1000041e 	bne	r2,zero,15240 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
   15230:	e0bff617 	ldw	r2,-40(fp)
   15234:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
   15238:	e0bffe17 	ldw	r2,-8(fp)
   1523c:	1880022e 	bgeu	r3,r2,15248 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
   15240:	00bffa84 	movi	r2,-22
   15244:	00002c06 	br	152f8 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
   15248:	e0bff617 	ldw	r2,-40(fp)
   1524c:	10800117 	ldw	r2,4(r2)
   15250:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
   15254:	e0bff617 	ldw	r2,-40(fp)
   15258:	10800217 	ldw	r2,8(r2)
   1525c:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
   15260:	e0bff917 	ldw	r2,-28(fp)
   15264:	1004913a 	slli	r2,r2,4
   15268:	10800904 	addi	r2,r2,36
   1526c:	e0fff617 	ldw	r3,-40(fp)
   15270:	1885883a 	add	r2,r3,r2
   15274:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   15278:	e0bff917 	ldw	r2,-28(fp)
   1527c:	10800044 	addi	r2,r2,1
   15280:	108000cc 	andi	r2,r2,3
   15284:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   15288:	e0fffb17 	ldw	r3,-20(fp)
   1528c:	e0bff817 	ldw	r2,-32(fp)
   15290:	1880021e 	bne	r3,r2,1529c <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
   15294:	00bff904 	movi	r2,-28
   15298:	00001706 	br	152f8 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
   1529c:	e0bffa17 	ldw	r2,-24(fp)
   152a0:	e0fffd17 	ldw	r3,-12(fp)
   152a4:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   152a8:	e0bffa17 	ldw	r2,-24(fp)
   152ac:	e0fffe17 	ldw	r3,-8(fp)
   152b0:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   152b4:	e0bffa17 	ldw	r2,-24(fp)
   152b8:	e0ffff17 	ldw	r3,-4(fp)
   152bc:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   152c0:	e0bffa17 	ldw	r2,-24(fp)
   152c4:	e0c00217 	ldw	r3,8(fp)
   152c8:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
   152cc:	e0bff617 	ldw	r2,-40(fp)
   152d0:	e0fffb17 	ldw	r3,-20(fp)
   152d4:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
   152d8:	e0bff617 	ldw	r2,-40(fp)
   152dc:	10800817 	ldw	r2,32(r2)
   152e0:	1000041e 	bne	r2,zero,152f4 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
   152e4:	e0bff617 	ldw	r2,-40(fp)
   152e8:	10800717 	ldw	r2,28(r2)
   152ec:	e13ff617 	ldw	r4,-40(fp)
   152f0:	103ee83a 	callr	r2
  }

  return 0;
   152f4:	0005883a 	mov	r2,zero
}
   152f8:	e037883a 	mov	sp,fp
   152fc:	dfc00117 	ldw	ra,4(sp)
   15300:	df000017 	ldw	fp,0(sp)
   15304:	dec00204 	addi	sp,sp,8
   15308:	f800283a 	ret

0001530c <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   1530c:	defff104 	addi	sp,sp,-60
   15310:	dfc00e15 	stw	ra,56(sp)
   15314:	df000d15 	stw	fp,52(sp)
   15318:	df000d04 	addi	fp,sp,52
   1531c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
   15320:	e0bfff17 	ldw	r2,-4(fp)
   15324:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   15328:	e0bff317 	ldw	r2,-52(fp)
   1532c:	10800517 	ldw	r2,20(r2)
   15330:	1080080c 	andi	r2,r2,32
   15334:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
   15338:	e0bff317 	ldw	r2,-52(fp)
   1533c:	10800517 	ldw	r2,20(r2)
   15340:	1080100c 	andi	r2,r2,64
   15344:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
   15348:	e0bff317 	ldw	r2,-52(fp)
   1534c:	10800117 	ldw	r2,4(r2)
   15350:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
   15354:	e0bff317 	ldw	r2,-52(fp)
   15358:	10800317 	ldw	r2,12(r2)
   1535c:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
   15360:	e0bff617 	ldw	r2,-40(fp)
   15364:	1004913a 	slli	r2,r2,4
   15368:	10800904 	addi	r2,r2,36
   1536c:	e0fff317 	ldw	r3,-52(fp)
   15370:	1885883a 	add	r2,r3,r2
   15374:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
   15378:	e0bff717 	ldw	r2,-36(fp)
   1537c:	1004913a 	slli	r2,r2,4
   15380:	10801904 	addi	r2,r2,100
   15384:	e0fff317 	ldw	r3,-52(fp)
   15388:	1885883a 	add	r2,r3,r2
   1538c:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
   15390:	e0bff417 	ldw	r2,-48(fp)
   15394:	1000051e 	bne	r2,zero,153ac <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   15398:	e0bff617 	ldw	r2,-40(fp)
   1539c:	10800044 	addi	r2,r2,1
   153a0:	10c000cc 	andi	r3,r2,3
   153a4:	e0bff317 	ldw	r2,-52(fp)
   153a8:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
   153ac:	e0bff517 	ldw	r2,-44(fp)
   153b0:	1000051e 	bne	r2,zero,153c8 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   153b4:	e0bff717 	ldw	r2,-36(fp)
   153b8:	10800044 	addi	r2,r2,1
   153bc:	10c000cc 	andi	r3,r2,3
   153c0:	e0bff317 	ldw	r2,-52(fp)
   153c4:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
   153c8:	e0bff317 	ldw	r2,-52(fp)
   153cc:	10800017 	ldw	r2,0(r2)
   153d0:	0007883a 	mov	r3,zero
   153d4:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
   153d8:	e0bff317 	ldw	r2,-52(fp)
   153dc:	10800017 	ldw	r2,0(r2)
   153e0:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
   153e4:	e0bff317 	ldw	r2,-52(fp)
   153e8:	10800717 	ldw	r2,28(r2)
   153ec:	e13ff317 	ldw	r4,-52(fp)
   153f0:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   153f4:	e0bff417 	ldw	r2,-48(fp)
   153f8:	1000151e 	bne	r2,zero,15450 <alt_avalon_dma_irq+0x144>
   153fc:	e0bff817 	ldw	r2,-32(fp)
   15400:	10800217 	ldw	r2,8(r2)
   15404:	10001226 	beq	r2,zero,15450 <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15408:	0005303a 	rdctl	r2,status
   1540c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15410:	e0fffc17 	ldw	r3,-16(fp)
   15414:	00bfff84 	movi	r2,-2
   15418:	1884703a 	and	r2,r3,r2
   1541c:	1001703a 	wrctl	status,r2
  
  return context;
   15420:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
   15424:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
   15428:	e0bff817 	ldw	r2,-32(fp)
   1542c:	10800217 	ldw	r2,8(r2)
   15430:	e0fff817 	ldw	r3,-32(fp)
   15434:	18c00317 	ldw	r3,12(r3)
   15438:	1809883a 	mov	r4,r3
   1543c:	103ee83a 	callr	r2
   15440:	e0bffb17 	ldw	r2,-20(fp)
   15444:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15448:	e0bffe17 	ldw	r2,-8(fp)
   1544c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   15450:	e0bff517 	ldw	r2,-44(fp)
   15454:	1000171e 	bne	r2,zero,154b4 <alt_avalon_dma_irq+0x1a8>
   15458:	e0bff917 	ldw	r2,-28(fp)
   1545c:	10800217 	ldw	r2,8(r2)
   15460:	10001426 	beq	r2,zero,154b4 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15464:	0005303a 	rdctl	r2,status
   15468:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1546c:	e0fffd17 	ldw	r3,-12(fp)
   15470:	00bfff84 	movi	r2,-2
   15474:	1884703a 	and	r2,r3,r2
   15478:	1001703a 	wrctl	status,r2
  
  return context;
   1547c:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
   15480:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
   15484:	e0bff917 	ldw	r2,-28(fp)
   15488:	10800217 	ldw	r2,8(r2)
   1548c:	e0fff917 	ldw	r3,-28(fp)
   15490:	19000317 	ldw	r4,12(r3)
   15494:	e0fff917 	ldw	r3,-28(fp)
   15498:	18c00017 	ldw	r3,0(r3)
   1549c:	180b883a 	mov	r5,r3
   154a0:	103ee83a 	callr	r2
   154a4:	e0bffb17 	ldw	r2,-20(fp)
   154a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154ac:	e0bffa17 	ldw	r2,-24(fp)
   154b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   154b4:	0001883a 	nop
   154b8:	e037883a 	mov	sp,fp
   154bc:	dfc00117 	ldw	ra,4(sp)
   154c0:	df000017 	ldw	fp,0(sp)
   154c4:	dec00204 	addi	sp,sp,8
   154c8:	f800283a 	ret

000154cc <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   154cc:	defff904 	addi	sp,sp,-28
   154d0:	dfc00615 	stw	ra,24(sp)
   154d4:	df000515 	stw	fp,20(sp)
   154d8:	df000504 	addi	fp,sp,20
   154dc:	e13ffc15 	stw	r4,-16(fp)
   154e0:	e17ffd15 	stw	r5,-12(fp)
   154e4:	e1bffe15 	stw	r6,-8(fp)
   154e8:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   154ec:	e0bffe17 	ldw	r2,-8(fp)
   154f0:	10800604 	addi	r2,r2,24
   154f4:	00c40004 	movi	r3,4096
   154f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   154fc:	e0bffe17 	ldw	r2,-8(fp)
   15500:	10800604 	addi	r2,r2,24
   15504:	00c40004 	movi	r3,4096
   15508:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
   1550c:	e0bffe17 	ldw	r2,-8(fp)
   15510:	10800604 	addi	r2,r2,24
   15514:	00c03f04 	movi	r3,252
   15518:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
   1551c:	0007883a 	mov	r3,zero
   15520:	e0bffe17 	ldw	r2,-8(fp)
   15524:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
   15528:	e0bffc17 	ldw	r2,-16(fp)
   1552c:	10800617 	ldw	r2,24(r2)
   15530:	d8000015 	stw	zero,0(sp)
   15534:	100f883a 	mov	r7,r2
   15538:	01800074 	movhi	r6,1
   1553c:	3194c304 	addi	r6,r6,21260
   15540:	e1400217 	ldw	r5,8(fp)
   15544:	e13fff17 	ldw	r4,-4(fp)
   15548:	00165400 	call	16540 <alt_ic_isr_register>
   1554c:	10000616 	blt	r2,zero,15568 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
   15550:	e0bffc17 	ldw	r2,-16(fp)
   15554:	1009883a 	mov	r4,r2
   15558:	00149bc0 	call	149bc <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
   1555c:	e0bffd17 	ldw	r2,-12(fp)
   15560:	1009883a 	mov	r4,r2
   15564:	00149f00 	call	149f0 <alt_dma_rxchan_reg>
  }
}
   15568:	0001883a 	nop
   1556c:	e037883a 	mov	sp,fp
   15570:	dfc00117 	ldw	ra,4(sp)
   15574:	df000017 	ldw	fp,0(sp)
   15578:	dec00204 	addi	sp,sp,8
   1557c:	f800283a 	ret

00015580 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15580:	defffa04 	addi	sp,sp,-24
   15584:	dfc00515 	stw	ra,20(sp)
   15588:	df000415 	stw	fp,16(sp)
   1558c:	df000404 	addi	fp,sp,16
   15590:	e13ffd15 	stw	r4,-12(fp)
   15594:	e17ffe15 	stw	r5,-8(fp)
   15598:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1559c:	e0bffd17 	ldw	r2,-12(fp)
   155a0:	10800017 	ldw	r2,0(r2)
   155a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   155a8:	e0bffc17 	ldw	r2,-16(fp)
   155ac:	10c00a04 	addi	r3,r2,40
   155b0:	e0bffd17 	ldw	r2,-12(fp)
   155b4:	10800217 	ldw	r2,8(r2)
   155b8:	100f883a 	mov	r7,r2
   155bc:	e1bfff17 	ldw	r6,-4(fp)
   155c0:	e17ffe17 	ldw	r5,-8(fp)
   155c4:	1809883a 	mov	r4,r3
   155c8:	0015ba80 	call	15ba8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   155cc:	e037883a 	mov	sp,fp
   155d0:	dfc00117 	ldw	ra,4(sp)
   155d4:	df000017 	ldw	fp,0(sp)
   155d8:	dec00204 	addi	sp,sp,8
   155dc:	f800283a 	ret

000155e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   155e0:	defffa04 	addi	sp,sp,-24
   155e4:	dfc00515 	stw	ra,20(sp)
   155e8:	df000415 	stw	fp,16(sp)
   155ec:	df000404 	addi	fp,sp,16
   155f0:	e13ffd15 	stw	r4,-12(fp)
   155f4:	e17ffe15 	stw	r5,-8(fp)
   155f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   155fc:	e0bffd17 	ldw	r2,-12(fp)
   15600:	10800017 	ldw	r2,0(r2)
   15604:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15608:	e0bffc17 	ldw	r2,-16(fp)
   1560c:	10c00a04 	addi	r3,r2,40
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	10800217 	ldw	r2,8(r2)
   15618:	100f883a 	mov	r7,r2
   1561c:	e1bfff17 	ldw	r6,-4(fp)
   15620:	e17ffe17 	ldw	r5,-8(fp)
   15624:	1809883a 	mov	r4,r3
   15628:	0015dc40 	call	15dc4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1562c:	e037883a 	mov	sp,fp
   15630:	dfc00117 	ldw	ra,4(sp)
   15634:	df000017 	ldw	fp,0(sp)
   15638:	dec00204 	addi	sp,sp,8
   1563c:	f800283a 	ret

00015640 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15640:	defffc04 	addi	sp,sp,-16
   15644:	dfc00315 	stw	ra,12(sp)
   15648:	df000215 	stw	fp,8(sp)
   1564c:	df000204 	addi	fp,sp,8
   15650:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15654:	e0bfff17 	ldw	r2,-4(fp)
   15658:	10800017 	ldw	r2,0(r2)
   1565c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15660:	e0bffe17 	ldw	r2,-8(fp)
   15664:	10c00a04 	addi	r3,r2,40
   15668:	e0bfff17 	ldw	r2,-4(fp)
   1566c:	10800217 	ldw	r2,8(r2)
   15670:	100b883a 	mov	r5,r2
   15674:	1809883a 	mov	r4,r3
   15678:	0015a500 	call	15a50 <altera_avalon_jtag_uart_close>
}
   1567c:	e037883a 	mov	sp,fp
   15680:	dfc00117 	ldw	ra,4(sp)
   15684:	df000017 	ldw	fp,0(sp)
   15688:	dec00204 	addi	sp,sp,8
   1568c:	f800283a 	ret

00015690 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15690:	defffa04 	addi	sp,sp,-24
   15694:	dfc00515 	stw	ra,20(sp)
   15698:	df000415 	stw	fp,16(sp)
   1569c:	df000404 	addi	fp,sp,16
   156a0:	e13ffd15 	stw	r4,-12(fp)
   156a4:	e17ffe15 	stw	r5,-8(fp)
   156a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   156ac:	e0bffd17 	ldw	r2,-12(fp)
   156b0:	10800017 	ldw	r2,0(r2)
   156b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   156b8:	e0bffc17 	ldw	r2,-16(fp)
   156bc:	10800a04 	addi	r2,r2,40
   156c0:	e1bfff17 	ldw	r6,-4(fp)
   156c4:	e17ffe17 	ldw	r5,-8(fp)
   156c8:	1009883a 	mov	r4,r2
   156cc:	0015ab80 	call	15ab8 <altera_avalon_jtag_uart_ioctl>
}
   156d0:	e037883a 	mov	sp,fp
   156d4:	dfc00117 	ldw	ra,4(sp)
   156d8:	df000017 	ldw	fp,0(sp)
   156dc:	dec00204 	addi	sp,sp,8
   156e0:	f800283a 	ret

000156e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   156e4:	defffa04 	addi	sp,sp,-24
   156e8:	dfc00515 	stw	ra,20(sp)
   156ec:	df000415 	stw	fp,16(sp)
   156f0:	df000404 	addi	fp,sp,16
   156f4:	e13ffd15 	stw	r4,-12(fp)
   156f8:	e17ffe15 	stw	r5,-8(fp)
   156fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15700:	e0bffd17 	ldw	r2,-12(fp)
   15704:	00c00044 	movi	r3,1
   15708:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1570c:	e0bffd17 	ldw	r2,-12(fp)
   15710:	10800017 	ldw	r2,0(r2)
   15714:	10800104 	addi	r2,r2,4
   15718:	1007883a 	mov	r3,r2
   1571c:	e0bffd17 	ldw	r2,-12(fp)
   15720:	10800817 	ldw	r2,32(r2)
   15724:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   15728:	e0bffe17 	ldw	r2,-8(fp)
   1572c:	e0ffff17 	ldw	r3,-4(fp)
   15730:	d8000015 	stw	zero,0(sp)
   15734:	e1fffd17 	ldw	r7,-12(fp)
   15738:	01800074 	movhi	r6,1
   1573c:	3195e904 	addi	r6,r6,22436
   15740:	180b883a 	mov	r5,r3
   15744:	1009883a 	mov	r4,r2
   15748:	00165400 	call	16540 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1574c:	e0bffd17 	ldw	r2,-12(fp)
   15750:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15754:	e0bffd17 	ldw	r2,-12(fp)
   15758:	10800204 	addi	r2,r2,8
   1575c:	d0e8fe17 	ldw	r3,-23560(gp)
   15760:	e1fffd17 	ldw	r7,-12(fp)
   15764:	01800074 	movhi	r6,1
   15768:	31966c04 	addi	r6,r6,22960
   1576c:	180b883a 	mov	r5,r3
   15770:	1009883a 	mov	r4,r2
   15774:	00160dc0 	call	160dc <alt_alarm_start>
   15778:	1000040e 	bge	r2,zero,1578c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1577c:	e0fffd17 	ldw	r3,-12(fp)
   15780:	00a00034 	movhi	r2,32768
   15784:	10bfffc4 	addi	r2,r2,-1
   15788:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1578c:	0001883a 	nop
   15790:	e037883a 	mov	sp,fp
   15794:	dfc00117 	ldw	ra,4(sp)
   15798:	df000017 	ldw	fp,0(sp)
   1579c:	dec00204 	addi	sp,sp,8
   157a0:	f800283a 	ret

000157a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   157a4:	defff804 	addi	sp,sp,-32
   157a8:	df000715 	stw	fp,28(sp)
   157ac:	df000704 	addi	fp,sp,28
   157b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   157bc:	e0bffb17 	ldw	r2,-20(fp)
   157c0:	10800017 	ldw	r2,0(r2)
   157c4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   157c8:	e0bffc17 	ldw	r2,-16(fp)
   157cc:	10800104 	addi	r2,r2,4
   157d0:	10800037 	ldwio	r2,0(r2)
   157d4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   157d8:	e0bffd17 	ldw	r2,-12(fp)
   157dc:	1080c00c 	andi	r2,r2,768
   157e0:	10006d26 	beq	r2,zero,15998 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	1080400c 	andi	r2,r2,256
   157ec:	10003526 	beq	r2,zero,158c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   157f0:	00800074 	movhi	r2,1
   157f4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   157f8:	e0bffb17 	ldw	r2,-20(fp)
   157fc:	10800a17 	ldw	r2,40(r2)
   15800:	10800044 	addi	r2,r2,1
   15804:	1081ffcc 	andi	r2,r2,2047
   15808:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1580c:	e0bffb17 	ldw	r2,-20(fp)
   15810:	10c00b17 	ldw	r3,44(r2)
   15814:	e0bffe17 	ldw	r2,-8(fp)
   15818:	18801526 	beq	r3,r2,15870 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1581c:	e0bffc17 	ldw	r2,-16(fp)
   15820:	10800037 	ldwio	r2,0(r2)
   15824:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15828:	e0bff917 	ldw	r2,-28(fp)
   1582c:	10a0000c 	andi	r2,r2,32768
   15830:	10001126 	beq	r2,zero,15878 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15834:	e0bffb17 	ldw	r2,-20(fp)
   15838:	10800a17 	ldw	r2,40(r2)
   1583c:	e0fff917 	ldw	r3,-28(fp)
   15840:	1809883a 	mov	r4,r3
   15844:	e0fffb17 	ldw	r3,-20(fp)
   15848:	1885883a 	add	r2,r3,r2
   1584c:	10800e04 	addi	r2,r2,56
   15850:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15854:	e0bffb17 	ldw	r2,-20(fp)
   15858:	10800a17 	ldw	r2,40(r2)
   1585c:	10800044 	addi	r2,r2,1
   15860:	10c1ffcc 	andi	r3,r2,2047
   15864:	e0bffb17 	ldw	r2,-20(fp)
   15868:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1586c:	003fe206 	br	157f8 <__alt_exception_stack_pointer+0xf80157f8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15870:	0001883a 	nop
   15874:	00000106 	br	1587c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15878:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1587c:	e0bff917 	ldw	r2,-28(fp)
   15880:	10bfffec 	andhi	r2,r2,65535
   15884:	10000f26 	beq	r2,zero,158c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15888:	e0bffb17 	ldw	r2,-20(fp)
   1588c:	10c00817 	ldw	r3,32(r2)
   15890:	00bfff84 	movi	r2,-2
   15894:	1886703a 	and	r3,r3,r2
   15898:	e0bffb17 	ldw	r2,-20(fp)
   1589c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   158a0:	e0bffc17 	ldw	r2,-16(fp)
   158a4:	10800104 	addi	r2,r2,4
   158a8:	1007883a 	mov	r3,r2
   158ac:	e0bffb17 	ldw	r2,-20(fp)
   158b0:	10800817 	ldw	r2,32(r2)
   158b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   158b8:	e0bffc17 	ldw	r2,-16(fp)
   158bc:	10800104 	addi	r2,r2,4
   158c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   158c4:	e0bffd17 	ldw	r2,-12(fp)
   158c8:	1080800c 	andi	r2,r2,512
   158cc:	103fbe26 	beq	r2,zero,157c8 <__alt_exception_stack_pointer+0xf80157c8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   158d0:	e0bffd17 	ldw	r2,-12(fp)
   158d4:	1004d43a 	srli	r2,r2,16
   158d8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   158dc:	00001406 	br	15930 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   158e0:	e0bffc17 	ldw	r2,-16(fp)
   158e4:	e0fffb17 	ldw	r3,-20(fp)
   158e8:	18c00d17 	ldw	r3,52(r3)
   158ec:	e13ffb17 	ldw	r4,-20(fp)
   158f0:	20c7883a 	add	r3,r4,r3
   158f4:	18c20e04 	addi	r3,r3,2104
   158f8:	18c00003 	ldbu	r3,0(r3)
   158fc:	18c03fcc 	andi	r3,r3,255
   15900:	18c0201c 	xori	r3,r3,128
   15904:	18ffe004 	addi	r3,r3,-128
   15908:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1590c:	e0bffb17 	ldw	r2,-20(fp)
   15910:	10800d17 	ldw	r2,52(r2)
   15914:	10800044 	addi	r2,r2,1
   15918:	10c1ffcc 	andi	r3,r2,2047
   1591c:	e0bffb17 	ldw	r2,-20(fp)
   15920:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15924:	e0bffa17 	ldw	r2,-24(fp)
   15928:	10bfffc4 	addi	r2,r2,-1
   1592c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15930:	e0bffa17 	ldw	r2,-24(fp)
   15934:	10000526 	beq	r2,zero,1594c <altera_avalon_jtag_uart_irq+0x1a8>
   15938:	e0bffb17 	ldw	r2,-20(fp)
   1593c:	10c00d17 	ldw	r3,52(r2)
   15940:	e0bffb17 	ldw	r2,-20(fp)
   15944:	10800c17 	ldw	r2,48(r2)
   15948:	18bfe51e 	bne	r3,r2,158e0 <__alt_exception_stack_pointer+0xf80158e0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1594c:	e0bffa17 	ldw	r2,-24(fp)
   15950:	103f9d26 	beq	r2,zero,157c8 <__alt_exception_stack_pointer+0xf80157c8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15954:	e0bffb17 	ldw	r2,-20(fp)
   15958:	10c00817 	ldw	r3,32(r2)
   1595c:	00bfff44 	movi	r2,-3
   15960:	1886703a 	and	r3,r3,r2
   15964:	e0bffb17 	ldw	r2,-20(fp)
   15968:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1596c:	e0bffb17 	ldw	r2,-20(fp)
   15970:	10800017 	ldw	r2,0(r2)
   15974:	10800104 	addi	r2,r2,4
   15978:	1007883a 	mov	r3,r2
   1597c:	e0bffb17 	ldw	r2,-20(fp)
   15980:	10800817 	ldw	r2,32(r2)
   15984:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15988:	e0bffc17 	ldw	r2,-16(fp)
   1598c:	10800104 	addi	r2,r2,4
   15990:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15994:	003f8c06 	br	157c8 <__alt_exception_stack_pointer+0xf80157c8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   15998:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1599c:	0001883a 	nop
   159a0:	e037883a 	mov	sp,fp
   159a4:	df000017 	ldw	fp,0(sp)
   159a8:	dec00104 	addi	sp,sp,4
   159ac:	f800283a 	ret

000159b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   159b0:	defff804 	addi	sp,sp,-32
   159b4:	df000715 	stw	fp,28(sp)
   159b8:	df000704 	addi	fp,sp,28
   159bc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   159c0:	e0bffb17 	ldw	r2,-20(fp)
   159c4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   159c8:	e0bff917 	ldw	r2,-28(fp)
   159cc:	10800017 	ldw	r2,0(r2)
   159d0:	10800104 	addi	r2,r2,4
   159d4:	10800037 	ldwio	r2,0(r2)
   159d8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   159dc:	e0bffa17 	ldw	r2,-24(fp)
   159e0:	1081000c 	andi	r2,r2,1024
   159e4:	10000b26 	beq	r2,zero,15a14 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   159e8:	e0bff917 	ldw	r2,-28(fp)
   159ec:	10800017 	ldw	r2,0(r2)
   159f0:	10800104 	addi	r2,r2,4
   159f4:	1007883a 	mov	r3,r2
   159f8:	e0bff917 	ldw	r2,-28(fp)
   159fc:	10800817 	ldw	r2,32(r2)
   15a00:	10810014 	ori	r2,r2,1024
   15a04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15a08:	e0bff917 	ldw	r2,-28(fp)
   15a0c:	10000915 	stw	zero,36(r2)
   15a10:	00000a06 	br	15a3c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15a14:	e0bff917 	ldw	r2,-28(fp)
   15a18:	10c00917 	ldw	r3,36(r2)
   15a1c:	00a00034 	movhi	r2,32768
   15a20:	10bfff04 	addi	r2,r2,-4
   15a24:	10c00536 	bltu	r2,r3,15a3c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   15a28:	e0bff917 	ldw	r2,-28(fp)
   15a2c:	10800917 	ldw	r2,36(r2)
   15a30:	10c00044 	addi	r3,r2,1
   15a34:	e0bff917 	ldw	r2,-28(fp)
   15a38:	10c00915 	stw	r3,36(r2)
   15a3c:	d0a8fe17 	ldw	r2,-23560(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15a40:	e037883a 	mov	sp,fp
   15a44:	df000017 	ldw	fp,0(sp)
   15a48:	dec00104 	addi	sp,sp,4
   15a4c:	f800283a 	ret

00015a50 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15a50:	defffd04 	addi	sp,sp,-12
   15a54:	df000215 	stw	fp,8(sp)
   15a58:	df000204 	addi	fp,sp,8
   15a5c:	e13ffe15 	stw	r4,-8(fp)
   15a60:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15a64:	00000506 	br	15a7c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15a68:	e0bfff17 	ldw	r2,-4(fp)
   15a6c:	1090000c 	andi	r2,r2,16384
   15a70:	10000226 	beq	r2,zero,15a7c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15a74:	00bffd44 	movi	r2,-11
   15a78:	00000b06 	br	15aa8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15a7c:	e0bffe17 	ldw	r2,-8(fp)
   15a80:	10c00d17 	ldw	r3,52(r2)
   15a84:	e0bffe17 	ldw	r2,-8(fp)
   15a88:	10800c17 	ldw	r2,48(r2)
   15a8c:	18800526 	beq	r3,r2,15aa4 <altera_avalon_jtag_uart_close+0x54>
   15a90:	e0bffe17 	ldw	r2,-8(fp)
   15a94:	10c00917 	ldw	r3,36(r2)
   15a98:	e0bffe17 	ldw	r2,-8(fp)
   15a9c:	10800117 	ldw	r2,4(r2)
   15aa0:	18bff136 	bltu	r3,r2,15a68 <__alt_exception_stack_pointer+0xf8015a68>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15aa4:	0005883a 	mov	r2,zero
}
   15aa8:	e037883a 	mov	sp,fp
   15aac:	df000017 	ldw	fp,0(sp)
   15ab0:	dec00104 	addi	sp,sp,4
   15ab4:	f800283a 	ret

00015ab8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15ab8:	defffa04 	addi	sp,sp,-24
   15abc:	df000515 	stw	fp,20(sp)
   15ac0:	df000504 	addi	fp,sp,20
   15ac4:	e13ffd15 	stw	r4,-12(fp)
   15ac8:	e17ffe15 	stw	r5,-8(fp)
   15acc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15ad0:	00bff9c4 	movi	r2,-25
   15ad4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15ad8:	e0bffe17 	ldw	r2,-8(fp)
   15adc:	10da8060 	cmpeqi	r3,r2,27137
   15ae0:	1800031e 	bne	r3,zero,15af0 <altera_avalon_jtag_uart_ioctl+0x38>
   15ae4:	109a80a0 	cmpeqi	r2,r2,27138
   15ae8:	1000181e 	bne	r2,zero,15b4c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   15aec:	00002906 	br	15b94 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15af0:	e0bffd17 	ldw	r2,-12(fp)
   15af4:	10c00117 	ldw	r3,4(r2)
   15af8:	00a00034 	movhi	r2,32768
   15afc:	10bfffc4 	addi	r2,r2,-1
   15b00:	18802126 	beq	r3,r2,15b88 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   15b04:	e0bfff17 	ldw	r2,-4(fp)
   15b08:	10800017 	ldw	r2,0(r2)
   15b0c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15b10:	e0bffc17 	ldw	r2,-16(fp)
   15b14:	10800090 	cmplti	r2,r2,2
   15b18:	1000061e 	bne	r2,zero,15b34 <altera_avalon_jtag_uart_ioctl+0x7c>
   15b1c:	e0fffc17 	ldw	r3,-16(fp)
   15b20:	00a00034 	movhi	r2,32768
   15b24:	10bfffc4 	addi	r2,r2,-1
   15b28:	18800226 	beq	r3,r2,15b34 <altera_avalon_jtag_uart_ioctl+0x7c>
   15b2c:	e0bffc17 	ldw	r2,-16(fp)
   15b30:	00000206 	br	15b3c <altera_avalon_jtag_uart_ioctl+0x84>
   15b34:	00a00034 	movhi	r2,32768
   15b38:	10bfff84 	addi	r2,r2,-2
   15b3c:	e0fffd17 	ldw	r3,-12(fp)
   15b40:	18800115 	stw	r2,4(r3)
      rc = 0;
   15b44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15b48:	00000f06 	br	15b88 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15b4c:	e0bffd17 	ldw	r2,-12(fp)
   15b50:	10c00117 	ldw	r3,4(r2)
   15b54:	00a00034 	movhi	r2,32768
   15b58:	10bfffc4 	addi	r2,r2,-1
   15b5c:	18800c26 	beq	r3,r2,15b90 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	10c00917 	ldw	r3,36(r2)
   15b68:	e0bffd17 	ldw	r2,-12(fp)
   15b6c:	10800117 	ldw	r2,4(r2)
   15b70:	1885803a 	cmpltu	r2,r3,r2
   15b74:	10c03fcc 	andi	r3,r2,255
   15b78:	e0bfff17 	ldw	r2,-4(fp)
   15b7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15b80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15b84:	00000206 	br	15b90 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15b88:	0001883a 	nop
   15b8c:	00000106 	br	15b94 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15b90:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15b94:	e0bffb17 	ldw	r2,-20(fp)
}
   15b98:	e037883a 	mov	sp,fp
   15b9c:	df000017 	ldw	fp,0(sp)
   15ba0:	dec00104 	addi	sp,sp,4
   15ba4:	f800283a 	ret

00015ba8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15ba8:	defff304 	addi	sp,sp,-52
   15bac:	dfc00c15 	stw	ra,48(sp)
   15bb0:	df000b15 	stw	fp,44(sp)
   15bb4:	df000b04 	addi	fp,sp,44
   15bb8:	e13ffc15 	stw	r4,-16(fp)
   15bbc:	e17ffd15 	stw	r5,-12(fp)
   15bc0:	e1bffe15 	stw	r6,-8(fp)
   15bc4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15bc8:	e0bffd17 	ldw	r2,-12(fp)
   15bcc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15bd0:	00004706 	br	15cf0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15bd4:	e0bffc17 	ldw	r2,-16(fp)
   15bd8:	10800a17 	ldw	r2,40(r2)
   15bdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   15be0:	e0bffc17 	ldw	r2,-16(fp)
   15be4:	10800b17 	ldw	r2,44(r2)
   15be8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   15bec:	e0fff717 	ldw	r3,-36(fp)
   15bf0:	e0bff817 	ldw	r2,-32(fp)
   15bf4:	18800536 	bltu	r3,r2,15c0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15bf8:	e0fff717 	ldw	r3,-36(fp)
   15bfc:	e0bff817 	ldw	r2,-32(fp)
   15c00:	1885c83a 	sub	r2,r3,r2
   15c04:	e0bff615 	stw	r2,-40(fp)
   15c08:	00000406 	br	15c1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15c0c:	00c20004 	movi	r3,2048
   15c10:	e0bff817 	ldw	r2,-32(fp)
   15c14:	1885c83a 	sub	r2,r3,r2
   15c18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15c1c:	e0bff617 	ldw	r2,-40(fp)
   15c20:	10001e26 	beq	r2,zero,15c9c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15c24:	e0fffe17 	ldw	r3,-8(fp)
   15c28:	e0bff617 	ldw	r2,-40(fp)
   15c2c:	1880022e 	bgeu	r3,r2,15c38 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15c30:	e0bffe17 	ldw	r2,-8(fp)
   15c34:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15c38:	e0bffc17 	ldw	r2,-16(fp)
   15c3c:	10c00e04 	addi	r3,r2,56
   15c40:	e0bff817 	ldw	r2,-32(fp)
   15c44:	1885883a 	add	r2,r3,r2
   15c48:	e1bff617 	ldw	r6,-40(fp)
   15c4c:	100b883a 	mov	r5,r2
   15c50:	e13ff517 	ldw	r4,-44(fp)
   15c54:	000efe80 	call	efe8 <memcpy>
      ptr   += n;
   15c58:	e0fff517 	ldw	r3,-44(fp)
   15c5c:	e0bff617 	ldw	r2,-40(fp)
   15c60:	1885883a 	add	r2,r3,r2
   15c64:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15c68:	e0fffe17 	ldw	r3,-8(fp)
   15c6c:	e0bff617 	ldw	r2,-40(fp)
   15c70:	1885c83a 	sub	r2,r3,r2
   15c74:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15c78:	e0fff817 	ldw	r3,-32(fp)
   15c7c:	e0bff617 	ldw	r2,-40(fp)
   15c80:	1885883a 	add	r2,r3,r2
   15c84:	10c1ffcc 	andi	r3,r2,2047
   15c88:	e0bffc17 	ldw	r2,-16(fp)
   15c8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15c90:	e0bffe17 	ldw	r2,-8(fp)
   15c94:	00bfcf16 	blt	zero,r2,15bd4 <__alt_exception_stack_pointer+0xf8015bd4>
   15c98:	00000106 	br	15ca0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15c9c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15ca0:	e0fff517 	ldw	r3,-44(fp)
   15ca4:	e0bffd17 	ldw	r2,-12(fp)
   15ca8:	1880141e 	bne	r3,r2,15cfc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15cac:	e0bfff17 	ldw	r2,-4(fp)
   15cb0:	1090000c 	andi	r2,r2,16384
   15cb4:	1000131e 	bne	r2,zero,15d04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15cb8:	0001883a 	nop
   15cbc:	e0bffc17 	ldw	r2,-16(fp)
   15cc0:	10c00a17 	ldw	r3,40(r2)
   15cc4:	e0bff717 	ldw	r2,-36(fp)
   15cc8:	1880051e 	bne	r3,r2,15ce0 <altera_avalon_jtag_uart_read+0x138>
   15ccc:	e0bffc17 	ldw	r2,-16(fp)
   15cd0:	10c00917 	ldw	r3,36(r2)
   15cd4:	e0bffc17 	ldw	r2,-16(fp)
   15cd8:	10800117 	ldw	r2,4(r2)
   15cdc:	18bff736 	bltu	r3,r2,15cbc <__alt_exception_stack_pointer+0xf8015cbc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15ce0:	e0bffc17 	ldw	r2,-16(fp)
   15ce4:	10c00a17 	ldw	r3,40(r2)
   15ce8:	e0bff717 	ldw	r2,-36(fp)
   15cec:	18800726 	beq	r3,r2,15d0c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15cf0:	e0bffe17 	ldw	r2,-8(fp)
   15cf4:	00bfb716 	blt	zero,r2,15bd4 <__alt_exception_stack_pointer+0xf8015bd4>
   15cf8:	00000506 	br	15d10 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15cfc:	0001883a 	nop
   15d00:	00000306 	br	15d10 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15d04:	0001883a 	nop
   15d08:	00000106 	br	15d10 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15d0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15d10:	e0fff517 	ldw	r3,-44(fp)
   15d14:	e0bffd17 	ldw	r2,-12(fp)
   15d18:	18801826 	beq	r3,r2,15d7c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d1c:	0005303a 	rdctl	r2,status
   15d20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d24:	e0fffb17 	ldw	r3,-20(fp)
   15d28:	00bfff84 	movi	r2,-2
   15d2c:	1884703a 	and	r2,r3,r2
   15d30:	1001703a 	wrctl	status,r2
  
  return context;
   15d34:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15d38:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15d3c:	e0bffc17 	ldw	r2,-16(fp)
   15d40:	10800817 	ldw	r2,32(r2)
   15d44:	10c00054 	ori	r3,r2,1
   15d48:	e0bffc17 	ldw	r2,-16(fp)
   15d4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15d50:	e0bffc17 	ldw	r2,-16(fp)
   15d54:	10800017 	ldw	r2,0(r2)
   15d58:	10800104 	addi	r2,r2,4
   15d5c:	1007883a 	mov	r3,r2
   15d60:	e0bffc17 	ldw	r2,-16(fp)
   15d64:	10800817 	ldw	r2,32(r2)
   15d68:	18800035 	stwio	r2,0(r3)
   15d6c:	e0bffa17 	ldw	r2,-24(fp)
   15d70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d74:	e0bff917 	ldw	r2,-28(fp)
   15d78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15d7c:	e0fff517 	ldw	r3,-44(fp)
   15d80:	e0bffd17 	ldw	r2,-12(fp)
   15d84:	18800426 	beq	r3,r2,15d98 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   15d88:	e0fff517 	ldw	r3,-44(fp)
   15d8c:	e0bffd17 	ldw	r2,-12(fp)
   15d90:	1885c83a 	sub	r2,r3,r2
   15d94:	00000606 	br	15db0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   15d98:	e0bfff17 	ldw	r2,-4(fp)
   15d9c:	1090000c 	andi	r2,r2,16384
   15da0:	10000226 	beq	r2,zero,15dac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   15da4:	00bffd44 	movi	r2,-11
   15da8:	00000106 	br	15db0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   15dac:	00bffec4 	movi	r2,-5
}
   15db0:	e037883a 	mov	sp,fp
   15db4:	dfc00117 	ldw	ra,4(sp)
   15db8:	df000017 	ldw	fp,0(sp)
   15dbc:	dec00204 	addi	sp,sp,8
   15dc0:	f800283a 	ret

00015dc4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15dc4:	defff304 	addi	sp,sp,-52
   15dc8:	dfc00c15 	stw	ra,48(sp)
   15dcc:	df000b15 	stw	fp,44(sp)
   15dd0:	df000b04 	addi	fp,sp,44
   15dd4:	e13ffc15 	stw	r4,-16(fp)
   15dd8:	e17ffd15 	stw	r5,-12(fp)
   15ddc:	e1bffe15 	stw	r6,-8(fp)
   15de0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15de4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15de8:	e0bffd17 	ldw	r2,-12(fp)
   15dec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15df0:	00003706 	br	15ed0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15df4:	e0bffc17 	ldw	r2,-16(fp)
   15df8:	10800c17 	ldw	r2,48(r2)
   15dfc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   15e00:	e0bffc17 	ldw	r2,-16(fp)
   15e04:	10800d17 	ldw	r2,52(r2)
   15e08:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   15e0c:	e0fff917 	ldw	r3,-28(fp)
   15e10:	e0bff517 	ldw	r2,-44(fp)
   15e14:	1880062e 	bgeu	r3,r2,15e30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15e18:	e0fff517 	ldw	r3,-44(fp)
   15e1c:	e0bff917 	ldw	r2,-28(fp)
   15e20:	1885c83a 	sub	r2,r3,r2
   15e24:	10bfffc4 	addi	r2,r2,-1
   15e28:	e0bff615 	stw	r2,-40(fp)
   15e2c:	00000b06 	br	15e5c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15e30:	e0bff517 	ldw	r2,-44(fp)
   15e34:	10000526 	beq	r2,zero,15e4c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15e38:	00c20004 	movi	r3,2048
   15e3c:	e0bff917 	ldw	r2,-28(fp)
   15e40:	1885c83a 	sub	r2,r3,r2
   15e44:	e0bff615 	stw	r2,-40(fp)
   15e48:	00000406 	br	15e5c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15e4c:	00c1ffc4 	movi	r3,2047
   15e50:	e0bff917 	ldw	r2,-28(fp)
   15e54:	1885c83a 	sub	r2,r3,r2
   15e58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15e5c:	e0bff617 	ldw	r2,-40(fp)
   15e60:	10001e26 	beq	r2,zero,15edc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15e64:	e0fffe17 	ldw	r3,-8(fp)
   15e68:	e0bff617 	ldw	r2,-40(fp)
   15e6c:	1880022e 	bgeu	r3,r2,15e78 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15e70:	e0bffe17 	ldw	r2,-8(fp)
   15e74:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15e78:	e0bffc17 	ldw	r2,-16(fp)
   15e7c:	10c20e04 	addi	r3,r2,2104
   15e80:	e0bff917 	ldw	r2,-28(fp)
   15e84:	1885883a 	add	r2,r3,r2
   15e88:	e1bff617 	ldw	r6,-40(fp)
   15e8c:	e17ffd17 	ldw	r5,-12(fp)
   15e90:	1009883a 	mov	r4,r2
   15e94:	000efe80 	call	efe8 <memcpy>
      ptr   += n;
   15e98:	e0fffd17 	ldw	r3,-12(fp)
   15e9c:	e0bff617 	ldw	r2,-40(fp)
   15ea0:	1885883a 	add	r2,r3,r2
   15ea4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15ea8:	e0fffe17 	ldw	r3,-8(fp)
   15eac:	e0bff617 	ldw	r2,-40(fp)
   15eb0:	1885c83a 	sub	r2,r3,r2
   15eb4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15eb8:	e0fff917 	ldw	r3,-28(fp)
   15ebc:	e0bff617 	ldw	r2,-40(fp)
   15ec0:	1885883a 	add	r2,r3,r2
   15ec4:	10c1ffcc 	andi	r3,r2,2047
   15ec8:	e0bffc17 	ldw	r2,-16(fp)
   15ecc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15ed0:	e0bffe17 	ldw	r2,-8(fp)
   15ed4:	00bfc716 	blt	zero,r2,15df4 <__alt_exception_stack_pointer+0xf8015df4>
   15ed8:	00000106 	br	15ee0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   15edc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ee0:	0005303a 	rdctl	r2,status
   15ee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ee8:	e0fffb17 	ldw	r3,-20(fp)
   15eec:	00bfff84 	movi	r2,-2
   15ef0:	1884703a 	and	r2,r3,r2
   15ef4:	1001703a 	wrctl	status,r2
  
  return context;
   15ef8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15efc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15f00:	e0bffc17 	ldw	r2,-16(fp)
   15f04:	10800817 	ldw	r2,32(r2)
   15f08:	10c00094 	ori	r3,r2,2
   15f0c:	e0bffc17 	ldw	r2,-16(fp)
   15f10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15f14:	e0bffc17 	ldw	r2,-16(fp)
   15f18:	10800017 	ldw	r2,0(r2)
   15f1c:	10800104 	addi	r2,r2,4
   15f20:	1007883a 	mov	r3,r2
   15f24:	e0bffc17 	ldw	r2,-16(fp)
   15f28:	10800817 	ldw	r2,32(r2)
   15f2c:	18800035 	stwio	r2,0(r3)
   15f30:	e0bffa17 	ldw	r2,-24(fp)
   15f34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f38:	e0bff817 	ldw	r2,-32(fp)
   15f3c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15f40:	e0bffe17 	ldw	r2,-8(fp)
   15f44:	0080100e 	bge	zero,r2,15f88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15f48:	e0bfff17 	ldw	r2,-4(fp)
   15f4c:	1090000c 	andi	r2,r2,16384
   15f50:	1000101e 	bne	r2,zero,15f94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15f54:	0001883a 	nop
   15f58:	e0bffc17 	ldw	r2,-16(fp)
   15f5c:	10c00d17 	ldw	r3,52(r2)
   15f60:	e0bff517 	ldw	r2,-44(fp)
   15f64:	1880051e 	bne	r3,r2,15f7c <altera_avalon_jtag_uart_write+0x1b8>
   15f68:	e0bffc17 	ldw	r2,-16(fp)
   15f6c:	10c00917 	ldw	r3,36(r2)
   15f70:	e0bffc17 	ldw	r2,-16(fp)
   15f74:	10800117 	ldw	r2,4(r2)
   15f78:	18bff736 	bltu	r3,r2,15f58 <__alt_exception_stack_pointer+0xf8015f58>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   15f7c:	e0bffc17 	ldw	r2,-16(fp)
   15f80:	10800917 	ldw	r2,36(r2)
   15f84:	1000051e 	bne	r2,zero,15f9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15f88:	e0bffe17 	ldw	r2,-8(fp)
   15f8c:	00bfd016 	blt	zero,r2,15ed0 <__alt_exception_stack_pointer+0xf8015ed0>
   15f90:	00000306 	br	15fa0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15f94:	0001883a 	nop
   15f98:	00000106 	br	15fa0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   15f9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15fa0:	e0fffd17 	ldw	r3,-12(fp)
   15fa4:	e0bff717 	ldw	r2,-36(fp)
   15fa8:	18800426 	beq	r3,r2,15fbc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15fac:	e0fffd17 	ldw	r3,-12(fp)
   15fb0:	e0bff717 	ldw	r2,-36(fp)
   15fb4:	1885c83a 	sub	r2,r3,r2
   15fb8:	00000606 	br	15fd4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   15fbc:	e0bfff17 	ldw	r2,-4(fp)
   15fc0:	1090000c 	andi	r2,r2,16384
   15fc4:	10000226 	beq	r2,zero,15fd0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15fc8:	00bffd44 	movi	r2,-11
   15fcc:	00000106 	br	15fd4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15fd0:	00bffec4 	movi	r2,-5
}
   15fd4:	e037883a 	mov	sp,fp
   15fd8:	dfc00117 	ldw	ra,4(sp)
   15fdc:	df000017 	ldw	fp,0(sp)
   15fe0:	dec00204 	addi	sp,sp,8
   15fe4:	f800283a 	ret

00015fe8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15fe8:	defffa04 	addi	sp,sp,-24
   15fec:	dfc00515 	stw	ra,20(sp)
   15ff0:	df000415 	stw	fp,16(sp)
   15ff4:	df000404 	addi	fp,sp,16
   15ff8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15ffc:	0007883a 	mov	r3,zero
   16000:	e0bfff17 	ldw	r2,-4(fp)
   16004:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16008:	e0bfff17 	ldw	r2,-4(fp)
   1600c:	10800104 	addi	r2,r2,4
   16010:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16014:	0005303a 	rdctl	r2,status
   16018:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1601c:	e0fffd17 	ldw	r3,-12(fp)
   16020:	00bfff84 	movi	r2,-2
   16024:	1884703a 	and	r2,r3,r2
   16028:	1001703a 	wrctl	status,r2
  
  return context;
   1602c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16030:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   16034:	0016c600 	call	16c60 <alt_tick>
   16038:	e0bffc17 	ldw	r2,-16(fp)
   1603c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16040:	e0bffe17 	ldw	r2,-8(fp)
   16044:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16048:	0001883a 	nop
   1604c:	e037883a 	mov	sp,fp
   16050:	dfc00117 	ldw	ra,4(sp)
   16054:	df000017 	ldw	fp,0(sp)
   16058:	dec00204 	addi	sp,sp,8
   1605c:	f800283a 	ret

00016060 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16060:	defff804 	addi	sp,sp,-32
   16064:	dfc00715 	stw	ra,28(sp)
   16068:	df000615 	stw	fp,24(sp)
   1606c:	df000604 	addi	fp,sp,24
   16070:	e13ffc15 	stw	r4,-16(fp)
   16074:	e17ffd15 	stw	r5,-12(fp)
   16078:	e1bffe15 	stw	r6,-8(fp)
   1607c:	e1ffff15 	stw	r7,-4(fp)
   16080:	e0bfff17 	ldw	r2,-4(fp)
   16084:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16088:	d0a8fe17 	ldw	r2,-23560(gp)
   1608c:	1000021e 	bne	r2,zero,16098 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16090:	e0bffb17 	ldw	r2,-20(fp)
   16094:	d0a8fe15 	stw	r2,-23560(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16098:	e0bffc17 	ldw	r2,-16(fp)
   1609c:	10800104 	addi	r2,r2,4
   160a0:	00c001c4 	movi	r3,7
   160a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   160a8:	d8000015 	stw	zero,0(sp)
   160ac:	e1fffc17 	ldw	r7,-16(fp)
   160b0:	01800074 	movhi	r6,1
   160b4:	3197fa04 	addi	r6,r6,24552
   160b8:	e17ffe17 	ldw	r5,-8(fp)
   160bc:	e13ffd17 	ldw	r4,-12(fp)
   160c0:	00165400 	call	16540 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   160c4:	0001883a 	nop
   160c8:	e037883a 	mov	sp,fp
   160cc:	dfc00117 	ldw	ra,4(sp)
   160d0:	df000017 	ldw	fp,0(sp)
   160d4:	dec00204 	addi	sp,sp,8
   160d8:	f800283a 	ret

000160dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   160dc:	defff504 	addi	sp,sp,-44
   160e0:	df000a15 	stw	fp,40(sp)
   160e4:	df000a04 	addi	fp,sp,40
   160e8:	e13ffc15 	stw	r4,-16(fp)
   160ec:	e17ffd15 	stw	r5,-12(fp)
   160f0:	e1bffe15 	stw	r6,-8(fp)
   160f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   160f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   160fc:	d0a8fe17 	ldw	r2,-23560(gp)
  
  if (alt_ticks_per_second ())
   16100:	10003c26 	beq	r2,zero,161f4 <alt_alarm_start+0x118>
  {
    if (alarm)
   16104:	e0bffc17 	ldw	r2,-16(fp)
   16108:	10003826 	beq	r2,zero,161ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1610c:	e0bffc17 	ldw	r2,-16(fp)
   16110:	e0fffe17 	ldw	r3,-8(fp)
   16114:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16118:	e0bffc17 	ldw	r2,-16(fp)
   1611c:	e0ffff17 	ldw	r3,-4(fp)
   16120:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16124:	0005303a 	rdctl	r2,status
   16128:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1612c:	e0fff917 	ldw	r3,-28(fp)
   16130:	00bfff84 	movi	r2,-2
   16134:	1884703a 	and	r2,r3,r2
   16138:	1001703a 	wrctl	status,r2
  
  return context;
   1613c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16140:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16144:	d0a8ff17 	ldw	r2,-23556(gp)
      
      current_nticks = alt_nticks();
   16148:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1614c:	e0fffd17 	ldw	r3,-12(fp)
   16150:	e0bff617 	ldw	r2,-40(fp)
   16154:	1885883a 	add	r2,r3,r2
   16158:	10c00044 	addi	r3,r2,1
   1615c:	e0bffc17 	ldw	r2,-16(fp)
   16160:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16164:	e0bffc17 	ldw	r2,-16(fp)
   16168:	10c00217 	ldw	r3,8(r2)
   1616c:	e0bff617 	ldw	r2,-40(fp)
   16170:	1880042e 	bgeu	r3,r2,16184 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16174:	e0bffc17 	ldw	r2,-16(fp)
   16178:	00c00044 	movi	r3,1
   1617c:	10c00405 	stb	r3,16(r2)
   16180:	00000206 	br	1618c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16184:	e0bffc17 	ldw	r2,-16(fp)
   16188:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1618c:	e0bffc17 	ldw	r2,-16(fp)
   16190:	d0e01304 	addi	r3,gp,-32692
   16194:	e0fffa15 	stw	r3,-24(fp)
   16198:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1619c:	e0bffb17 	ldw	r2,-20(fp)
   161a0:	e0fffa17 	ldw	r3,-24(fp)
   161a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   161a8:	e0bffa17 	ldw	r2,-24(fp)
   161ac:	10c00017 	ldw	r3,0(r2)
   161b0:	e0bffb17 	ldw	r2,-20(fp)
   161b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   161b8:	e0bffa17 	ldw	r2,-24(fp)
   161bc:	10800017 	ldw	r2,0(r2)
   161c0:	e0fffb17 	ldw	r3,-20(fp)
   161c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   161c8:	e0bffa17 	ldw	r2,-24(fp)
   161cc:	e0fffb17 	ldw	r3,-20(fp)
   161d0:	10c00015 	stw	r3,0(r2)
   161d4:	e0bff817 	ldw	r2,-32(fp)
   161d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161dc:	e0bff717 	ldw	r2,-36(fp)
   161e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   161e4:	0005883a 	mov	r2,zero
   161e8:	00000306 	br	161f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   161ec:	00bffa84 	movi	r2,-22
   161f0:	00000106 	br	161f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   161f4:	00bfde84 	movi	r2,-134
  }
}
   161f8:	e037883a 	mov	sp,fp
   161fc:	df000017 	ldw	fp,0(sp)
   16200:	dec00104 	addi	sp,sp,4
   16204:	f800283a 	ret

00016208 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   16208:	defffa04 	addi	sp,sp,-24
   1620c:	dfc00515 	stw	ra,20(sp)
   16210:	df000415 	stw	fp,16(sp)
   16214:	df000404 	addi	fp,sp,16
   16218:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1621c:	00800244 	movi	r2,9
   16220:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   16224:	014003f4 	movhi	r5,15
   16228:	29509004 	addi	r5,r5,16960
   1622c:	e13ffd17 	ldw	r4,-12(fp)
   16230:	0005b840 	call	5b84 <__mulsi3>
   16234:	100b883a 	mov	r5,r2
   16238:	0100bef4 	movhi	r4,763
   1623c:	213c2004 	addi	r4,r4,-3968
   16240:	0005ac80 	call	5ac8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16244:	100b883a 	mov	r5,r2
   16248:	01200034 	movhi	r4,32768
   1624c:	213fffc4 	addi	r4,r4,-1
   16250:	0005ac80 	call	5ac8 <__udivsi3>
   16254:	100b883a 	mov	r5,r2
   16258:	e13fff17 	ldw	r4,-4(fp)
   1625c:	0005ac80 	call	5ac8 <__udivsi3>
   16260:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   16264:	e0bffe17 	ldw	r2,-8(fp)
   16268:	10002a26 	beq	r2,zero,16314 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1626c:	e03ffc15 	stw	zero,-16(fp)
   16270:	00001706 	br	162d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16274:	00a00034 	movhi	r2,32768
   16278:	10bfffc4 	addi	r2,r2,-1
   1627c:	10bfffc4 	addi	r2,r2,-1
   16280:	103ffe1e 	bne	r2,zero,1627c <__alt_exception_stack_pointer+0xf801627c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   16284:	014003f4 	movhi	r5,15
   16288:	29509004 	addi	r5,r5,16960
   1628c:	e13ffd17 	ldw	r4,-12(fp)
   16290:	0005b840 	call	5b84 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16294:	100b883a 	mov	r5,r2
   16298:	0100bef4 	movhi	r4,763
   1629c:	213c2004 	addi	r4,r4,-3968
   162a0:	0005ac80 	call	5ac8 <__udivsi3>
   162a4:	100b883a 	mov	r5,r2
   162a8:	01200034 	movhi	r4,32768
   162ac:	213fffc4 	addi	r4,r4,-1
   162b0:	0005ac80 	call	5ac8 <__udivsi3>
   162b4:	1007883a 	mov	r3,r2
   162b8:	e0bfff17 	ldw	r2,-4(fp)
   162bc:	10c5c83a 	sub	r2,r2,r3
   162c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   162c4:	e0bffc17 	ldw	r2,-16(fp)
   162c8:	10800044 	addi	r2,r2,1
   162cc:	e0bffc15 	stw	r2,-16(fp)
   162d0:	e0fffc17 	ldw	r3,-16(fp)
   162d4:	e0bffe17 	ldw	r2,-8(fp)
   162d8:	18bfe616 	blt	r3,r2,16274 <__alt_exception_stack_pointer+0xf8016274>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   162dc:	014003f4 	movhi	r5,15
   162e0:	29509004 	addi	r5,r5,16960
   162e4:	e13ffd17 	ldw	r4,-12(fp)
   162e8:	0005b840 	call	5b84 <__mulsi3>
   162ec:	100b883a 	mov	r5,r2
   162f0:	0100bef4 	movhi	r4,763
   162f4:	213c2004 	addi	r4,r4,-3968
   162f8:	0005ac80 	call	5ac8 <__udivsi3>
   162fc:	e17fff17 	ldw	r5,-4(fp)
   16300:	1009883a 	mov	r4,r2
   16304:	0005b840 	call	5b84 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16308:	10bfffc4 	addi	r2,r2,-1
   1630c:	103ffe1e 	bne	r2,zero,16308 <__alt_exception_stack_pointer+0xf8016308>
   16310:	00000d06 	br	16348 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   16314:	014003f4 	movhi	r5,15
   16318:	29509004 	addi	r5,r5,16960
   1631c:	e13ffd17 	ldw	r4,-12(fp)
   16320:	0005b840 	call	5b84 <__mulsi3>
   16324:	100b883a 	mov	r5,r2
   16328:	0100bef4 	movhi	r4,763
   1632c:	213c2004 	addi	r4,r4,-3968
   16330:	0005ac80 	call	5ac8 <__udivsi3>
   16334:	e17fff17 	ldw	r5,-4(fp)
   16338:	1009883a 	mov	r4,r2
   1633c:	0005b840 	call	5b84 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16340:	10bfffc4 	addi	r2,r2,-1
   16344:	00bffe16 	blt	zero,r2,16340 <__alt_exception_stack_pointer+0xf8016340>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   16348:	0005883a 	mov	r2,zero
}
   1634c:	e037883a 	mov	sp,fp
   16350:	dfc00117 	ldw	ra,4(sp)
   16354:	df000017 	ldw	fp,0(sp)
   16358:	dec00204 	addi	sp,sp,8
   1635c:	f800283a 	ret

00016360 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16360:	deffff04 	addi	sp,sp,-4
   16364:	df000015 	stw	fp,0(sp)
   16368:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1636c:	0001883a 	nop
   16370:	e037883a 	mov	sp,fp
   16374:	df000017 	ldw	fp,0(sp)
   16378:	dec00104 	addi	sp,sp,4
   1637c:	f800283a 	ret

00016380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16380:	defffe04 	addi	sp,sp,-8
   16384:	dfc00115 	stw	ra,4(sp)
   16388:	df000015 	stw	fp,0(sp)
   1638c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16390:	d0a01117 	ldw	r2,-32700(gp)
   16394:	10000326 	beq	r2,zero,163a4 <alt_get_errno+0x24>
   16398:	d0a01117 	ldw	r2,-32700(gp)
   1639c:	103ee83a 	callr	r2
   163a0:	00000106 	br	163a8 <alt_get_errno+0x28>
   163a4:	d0a8f604 	addi	r2,gp,-23592
}
   163a8:	e037883a 	mov	sp,fp
   163ac:	dfc00117 	ldw	ra,4(sp)
   163b0:	df000017 	ldw	fp,0(sp)
   163b4:	dec00204 	addi	sp,sp,8
   163b8:	f800283a 	ret

000163bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   163bc:	defffa04 	addi	sp,sp,-24
   163c0:	dfc00515 	stw	ra,20(sp)
   163c4:	df000415 	stw	fp,16(sp)
   163c8:	df000404 	addi	fp,sp,16
   163cc:	e13ffe15 	stw	r4,-8(fp)
   163d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   163d4:	e0bffe17 	ldw	r2,-8(fp)
   163d8:	10000326 	beq	r2,zero,163e8 <alt_dev_llist_insert+0x2c>
   163dc:	e0bffe17 	ldw	r2,-8(fp)
   163e0:	10800217 	ldw	r2,8(r2)
   163e4:	1000061e 	bne	r2,zero,16400 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   163e8:	00163800 	call	16380 <alt_get_errno>
   163ec:	1007883a 	mov	r3,r2
   163f0:	00800584 	movi	r2,22
   163f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   163f8:	00bffa84 	movi	r2,-22
   163fc:	00001306 	br	1644c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16400:	e0bffe17 	ldw	r2,-8(fp)
   16404:	e0ffff17 	ldw	r3,-4(fp)
   16408:	e0fffc15 	stw	r3,-16(fp)
   1640c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16410:	e0bffd17 	ldw	r2,-12(fp)
   16414:	e0fffc17 	ldw	r3,-16(fp)
   16418:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1641c:	e0bffc17 	ldw	r2,-16(fp)
   16420:	10c00017 	ldw	r3,0(r2)
   16424:	e0bffd17 	ldw	r2,-12(fp)
   16428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1642c:	e0bffc17 	ldw	r2,-16(fp)
   16430:	10800017 	ldw	r2,0(r2)
   16434:	e0fffd17 	ldw	r3,-12(fp)
   16438:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	e0fffd17 	ldw	r3,-12(fp)
   16444:	10c00015 	stw	r3,0(r2)

  return 0;  
   16448:	0005883a 	mov	r2,zero
}
   1644c:	e037883a 	mov	sp,fp
   16450:	dfc00117 	ldw	ra,4(sp)
   16454:	df000017 	ldw	fp,0(sp)
   16458:	dec00204 	addi	sp,sp,8
   1645c:	f800283a 	ret

00016460 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16460:	defffd04 	addi	sp,sp,-12
   16464:	dfc00215 	stw	ra,8(sp)
   16468:	df000115 	stw	fp,4(sp)
   1646c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16470:	00800074 	movhi	r2,1
   16474:	109ce104 	addi	r2,r2,29572
   16478:	e0bfff15 	stw	r2,-4(fp)
   1647c:	00000606 	br	16498 <_do_ctors+0x38>
        (*ctor) (); 
   16480:	e0bfff17 	ldw	r2,-4(fp)
   16484:	10800017 	ldw	r2,0(r2)
   16488:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1648c:	e0bfff17 	ldw	r2,-4(fp)
   16490:	10bfff04 	addi	r2,r2,-4
   16494:	e0bfff15 	stw	r2,-4(fp)
   16498:	e0ffff17 	ldw	r3,-4(fp)
   1649c:	00800074 	movhi	r2,1
   164a0:	109ce204 	addi	r2,r2,29576
   164a4:	18bff62e 	bgeu	r3,r2,16480 <__alt_exception_stack_pointer+0xf8016480>
        (*ctor) (); 
}
   164a8:	0001883a 	nop
   164ac:	e037883a 	mov	sp,fp
   164b0:	dfc00117 	ldw	ra,4(sp)
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00204 	addi	sp,sp,8
   164bc:	f800283a 	ret

000164c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   164c0:	defffd04 	addi	sp,sp,-12
   164c4:	dfc00215 	stw	ra,8(sp)
   164c8:	df000115 	stw	fp,4(sp)
   164cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   164d0:	00800074 	movhi	r2,1
   164d4:	109ce104 	addi	r2,r2,29572
   164d8:	e0bfff15 	stw	r2,-4(fp)
   164dc:	00000606 	br	164f8 <_do_dtors+0x38>
        (*dtor) (); 
   164e0:	e0bfff17 	ldw	r2,-4(fp)
   164e4:	10800017 	ldw	r2,0(r2)
   164e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   164ec:	e0bfff17 	ldw	r2,-4(fp)
   164f0:	10bfff04 	addi	r2,r2,-4
   164f4:	e0bfff15 	stw	r2,-4(fp)
   164f8:	e0ffff17 	ldw	r3,-4(fp)
   164fc:	00800074 	movhi	r2,1
   16500:	109ce204 	addi	r2,r2,29576
   16504:	18bff62e 	bgeu	r3,r2,164e0 <__alt_exception_stack_pointer+0xf80164e0>
        (*dtor) (); 
}
   16508:	0001883a 	nop
   1650c:	e037883a 	mov	sp,fp
   16510:	dfc00117 	ldw	ra,4(sp)
   16514:	df000017 	ldw	fp,0(sp)
   16518:	dec00204 	addi	sp,sp,8
   1651c:	f800283a 	ret

00016520 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16520:	deffff04 	addi	sp,sp,-4
   16524:	df000015 	stw	fp,0(sp)
   16528:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1652c:	0001883a 	nop
   16530:	e037883a 	mov	sp,fp
   16534:	df000017 	ldw	fp,0(sp)
   16538:	dec00104 	addi	sp,sp,4
   1653c:	f800283a 	ret

00016540 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16540:	defff904 	addi	sp,sp,-28
   16544:	dfc00615 	stw	ra,24(sp)
   16548:	df000515 	stw	fp,20(sp)
   1654c:	df000504 	addi	fp,sp,20
   16550:	e13ffc15 	stw	r4,-16(fp)
   16554:	e17ffd15 	stw	r5,-12(fp)
   16558:	e1bffe15 	stw	r6,-8(fp)
   1655c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   16560:	e0800217 	ldw	r2,8(fp)
   16564:	d8800015 	stw	r2,0(sp)
   16568:	e1ffff17 	ldw	r7,-4(fp)
   1656c:	e1bffe17 	ldw	r6,-8(fp)
   16570:	e17ffd17 	ldw	r5,-12(fp)
   16574:	e13ffc17 	ldw	r4,-16(fp)
   16578:	00166f00 	call	166f0 <alt_iic_isr_register>
}  
   1657c:	e037883a 	mov	sp,fp
   16580:	dfc00117 	ldw	ra,4(sp)
   16584:	df000017 	ldw	fp,0(sp)
   16588:	dec00204 	addi	sp,sp,8
   1658c:	f800283a 	ret

00016590 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   16590:	defff904 	addi	sp,sp,-28
   16594:	df000615 	stw	fp,24(sp)
   16598:	df000604 	addi	fp,sp,24
   1659c:	e13ffe15 	stw	r4,-8(fp)
   165a0:	e17fff15 	stw	r5,-4(fp)
   165a4:	e0bfff17 	ldw	r2,-4(fp)
   165a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   165ac:	0005303a 	rdctl	r2,status
   165b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   165b4:	e0fffb17 	ldw	r3,-20(fp)
   165b8:	00bfff84 	movi	r2,-2
   165bc:	1884703a 	and	r2,r3,r2
   165c0:	1001703a 	wrctl	status,r2
  
  return context;
   165c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   165c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   165cc:	00c00044 	movi	r3,1
   165d0:	e0bffa17 	ldw	r2,-24(fp)
   165d4:	1884983a 	sll	r2,r3,r2
   165d8:	1007883a 	mov	r3,r2
   165dc:	d0a8fd17 	ldw	r2,-23564(gp)
   165e0:	1884b03a 	or	r2,r3,r2
   165e4:	d0a8fd15 	stw	r2,-23564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   165e8:	d0a8fd17 	ldw	r2,-23564(gp)
   165ec:	100170fa 	wrctl	ienable,r2
   165f0:	e0bffc17 	ldw	r2,-16(fp)
   165f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165f8:	e0bffd17 	ldw	r2,-12(fp)
   165fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16600:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   16604:	0001883a 	nop
}
   16608:	e037883a 	mov	sp,fp
   1660c:	df000017 	ldw	fp,0(sp)
   16610:	dec00104 	addi	sp,sp,4
   16614:	f800283a 	ret

00016618 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   16618:	defff904 	addi	sp,sp,-28
   1661c:	df000615 	stw	fp,24(sp)
   16620:	df000604 	addi	fp,sp,24
   16624:	e13ffe15 	stw	r4,-8(fp)
   16628:	e17fff15 	stw	r5,-4(fp)
   1662c:	e0bfff17 	ldw	r2,-4(fp)
   16630:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16634:	0005303a 	rdctl	r2,status
   16638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1663c:	e0fffb17 	ldw	r3,-20(fp)
   16640:	00bfff84 	movi	r2,-2
   16644:	1884703a 	and	r2,r3,r2
   16648:	1001703a 	wrctl	status,r2
  
  return context;
   1664c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16650:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   16654:	00c00044 	movi	r3,1
   16658:	e0bffa17 	ldw	r2,-24(fp)
   1665c:	1884983a 	sll	r2,r3,r2
   16660:	0084303a 	nor	r2,zero,r2
   16664:	1007883a 	mov	r3,r2
   16668:	d0a8fd17 	ldw	r2,-23564(gp)
   1666c:	1884703a 	and	r2,r3,r2
   16670:	d0a8fd15 	stw	r2,-23564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16674:	d0a8fd17 	ldw	r2,-23564(gp)
   16678:	100170fa 	wrctl	ienable,r2
   1667c:	e0bffc17 	ldw	r2,-16(fp)
   16680:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16684:	e0bffd17 	ldw	r2,-12(fp)
   16688:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1668c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   16690:	0001883a 	nop
}
   16694:	e037883a 	mov	sp,fp
   16698:	df000017 	ldw	fp,0(sp)
   1669c:	dec00104 	addi	sp,sp,4
   166a0:	f800283a 	ret

000166a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   166a4:	defffc04 	addi	sp,sp,-16
   166a8:	df000315 	stw	fp,12(sp)
   166ac:	df000304 	addi	fp,sp,12
   166b0:	e13ffe15 	stw	r4,-8(fp)
   166b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   166b8:	000530fa 	rdctl	r2,ienable
   166bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   166c0:	00c00044 	movi	r3,1
   166c4:	e0bfff17 	ldw	r2,-4(fp)
   166c8:	1884983a 	sll	r2,r3,r2
   166cc:	1007883a 	mov	r3,r2
   166d0:	e0bffd17 	ldw	r2,-12(fp)
   166d4:	1884703a 	and	r2,r3,r2
   166d8:	1004c03a 	cmpne	r2,r2,zero
   166dc:	10803fcc 	andi	r2,r2,255
}
   166e0:	e037883a 	mov	sp,fp
   166e4:	df000017 	ldw	fp,0(sp)
   166e8:	dec00104 	addi	sp,sp,4
   166ec:	f800283a 	ret

000166f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   166f0:	defff504 	addi	sp,sp,-44
   166f4:	dfc00a15 	stw	ra,40(sp)
   166f8:	df000915 	stw	fp,36(sp)
   166fc:	df000904 	addi	fp,sp,36
   16700:	e13ffc15 	stw	r4,-16(fp)
   16704:	e17ffd15 	stw	r5,-12(fp)
   16708:	e1bffe15 	stw	r6,-8(fp)
   1670c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   16710:	00bffa84 	movi	r2,-22
   16714:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   16718:	e0bffd17 	ldw	r2,-12(fp)
   1671c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16720:	e0bff817 	ldw	r2,-32(fp)
   16724:	10800808 	cmpgei	r2,r2,32
   16728:	1000271e 	bne	r2,zero,167c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1672c:	0005303a 	rdctl	r2,status
   16730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16734:	e0fffb17 	ldw	r3,-20(fp)
   16738:	00bfff84 	movi	r2,-2
   1673c:	1884703a 	and	r2,r3,r2
   16740:	1001703a 	wrctl	status,r2
  
  return context;
   16744:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   16748:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1674c:	008000b4 	movhi	r2,2
   16750:	10b23204 	addi	r2,r2,-14136
   16754:	e0fff817 	ldw	r3,-32(fp)
   16758:	180690fa 	slli	r3,r3,3
   1675c:	10c5883a 	add	r2,r2,r3
   16760:	e0fffe17 	ldw	r3,-8(fp)
   16764:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   16768:	008000b4 	movhi	r2,2
   1676c:	10b23204 	addi	r2,r2,-14136
   16770:	e0fff817 	ldw	r3,-32(fp)
   16774:	180690fa 	slli	r3,r3,3
   16778:	10c5883a 	add	r2,r2,r3
   1677c:	10800104 	addi	r2,r2,4
   16780:	e0ffff17 	ldw	r3,-4(fp)
   16784:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16788:	e0bffe17 	ldw	r2,-8(fp)
   1678c:	10000526 	beq	r2,zero,167a4 <alt_iic_isr_register+0xb4>
   16790:	e0bff817 	ldw	r2,-32(fp)
   16794:	100b883a 	mov	r5,r2
   16798:	e13ffc17 	ldw	r4,-16(fp)
   1679c:	00165900 	call	16590 <alt_ic_irq_enable>
   167a0:	00000406 	br	167b4 <alt_iic_isr_register+0xc4>
   167a4:	e0bff817 	ldw	r2,-32(fp)
   167a8:	100b883a 	mov	r5,r2
   167ac:	e13ffc17 	ldw	r4,-16(fp)
   167b0:	00166180 	call	16618 <alt_ic_irq_disable>
   167b4:	e0bff715 	stw	r2,-36(fp)
   167b8:	e0bffa17 	ldw	r2,-24(fp)
   167bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167c0:	e0bff917 	ldw	r2,-28(fp)
   167c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   167c8:	e0bff717 	ldw	r2,-36(fp)
}
   167cc:	e037883a 	mov	sp,fp
   167d0:	dfc00117 	ldw	ra,4(sp)
   167d4:	df000017 	ldw	fp,0(sp)
   167d8:	dec00204 	addi	sp,sp,8
   167dc:	f800283a 	ret

000167e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   167e0:	defff804 	addi	sp,sp,-32
   167e4:	dfc00715 	stw	ra,28(sp)
   167e8:	df000615 	stw	fp,24(sp)
   167ec:	dc000515 	stw	r16,20(sp)
   167f0:	df000604 	addi	fp,sp,24
   167f4:	e13ffb15 	stw	r4,-20(fp)
   167f8:	e17ffc15 	stw	r5,-16(fp)
   167fc:	e1bffd15 	stw	r6,-12(fp)
   16800:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   16804:	e1bffe17 	ldw	r6,-8(fp)
   16808:	e17ffd17 	ldw	r5,-12(fp)
   1680c:	e13ffc17 	ldw	r4,-16(fp)
   16810:	0016a680 	call	16a68 <open>
   16814:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   16818:	e0bffa17 	ldw	r2,-24(fp)
   1681c:	10002216 	blt	r2,zero,168a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16820:	040000b4 	movhi	r16,2
   16824:	84245204 	addi	r16,r16,-28344
   16828:	e0bffa17 	ldw	r2,-24(fp)
   1682c:	01400304 	movi	r5,12
   16830:	1009883a 	mov	r4,r2
   16834:	0005b840 	call	5b84 <__mulsi3>
   16838:	8085883a 	add	r2,r16,r2
   1683c:	10c00017 	ldw	r3,0(r2)
   16840:	e0bffb17 	ldw	r2,-20(fp)
   16844:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16848:	040000b4 	movhi	r16,2
   1684c:	84245204 	addi	r16,r16,-28344
   16850:	e0bffa17 	ldw	r2,-24(fp)
   16854:	01400304 	movi	r5,12
   16858:	1009883a 	mov	r4,r2
   1685c:	0005b840 	call	5b84 <__mulsi3>
   16860:	8085883a 	add	r2,r16,r2
   16864:	10800104 	addi	r2,r2,4
   16868:	10c00017 	ldw	r3,0(r2)
   1686c:	e0bffb17 	ldw	r2,-20(fp)
   16870:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16874:	040000b4 	movhi	r16,2
   16878:	84245204 	addi	r16,r16,-28344
   1687c:	e0bffa17 	ldw	r2,-24(fp)
   16880:	01400304 	movi	r5,12
   16884:	1009883a 	mov	r4,r2
   16888:	0005b840 	call	5b84 <__mulsi3>
   1688c:	8085883a 	add	r2,r16,r2
   16890:	10800204 	addi	r2,r2,8
   16894:	10c00017 	ldw	r3,0(r2)
   16898:	e0bffb17 	ldw	r2,-20(fp)
   1689c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   168a0:	e13ffa17 	ldw	r4,-24(fp)
   168a4:	00142b80 	call	142b8 <alt_release_fd>
  }
} 
   168a8:	0001883a 	nop
   168ac:	e6ffff04 	addi	sp,fp,-4
   168b0:	dfc00217 	ldw	ra,8(sp)
   168b4:	df000117 	ldw	fp,4(sp)
   168b8:	dc000017 	ldw	r16,0(sp)
   168bc:	dec00304 	addi	sp,sp,12
   168c0:	f800283a 	ret

000168c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   168c4:	defffb04 	addi	sp,sp,-20
   168c8:	dfc00415 	stw	ra,16(sp)
   168cc:	df000315 	stw	fp,12(sp)
   168d0:	df000304 	addi	fp,sp,12
   168d4:	e13ffd15 	stw	r4,-12(fp)
   168d8:	e17ffe15 	stw	r5,-8(fp)
   168dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   168e0:	01c07fc4 	movi	r7,511
   168e4:	01800044 	movi	r6,1
   168e8:	e17ffd17 	ldw	r5,-12(fp)
   168ec:	010000b4 	movhi	r4,2
   168f0:	21245504 	addi	r4,r4,-28332
   168f4:	00167e00 	call	167e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   168f8:	01c07fc4 	movi	r7,511
   168fc:	000d883a 	mov	r6,zero
   16900:	e17ffe17 	ldw	r5,-8(fp)
   16904:	010000b4 	movhi	r4,2
   16908:	21245204 	addi	r4,r4,-28344
   1690c:	00167e00 	call	167e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16910:	01c07fc4 	movi	r7,511
   16914:	01800044 	movi	r6,1
   16918:	e17fff17 	ldw	r5,-4(fp)
   1691c:	010000b4 	movhi	r4,2
   16920:	21245804 	addi	r4,r4,-28320
   16924:	00167e00 	call	167e0 <alt_open_fd>
}  
   16928:	0001883a 	nop
   1692c:	e037883a 	mov	sp,fp
   16930:	dfc00117 	ldw	ra,4(sp)
   16934:	df000017 	ldw	fp,0(sp)
   16938:	dec00204 	addi	sp,sp,8
   1693c:	f800283a 	ret

00016940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16940:	defffe04 	addi	sp,sp,-8
   16944:	dfc00115 	stw	ra,4(sp)
   16948:	df000015 	stw	fp,0(sp)
   1694c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16950:	d0a01117 	ldw	r2,-32700(gp)
   16954:	10000326 	beq	r2,zero,16964 <alt_get_errno+0x24>
   16958:	d0a01117 	ldw	r2,-32700(gp)
   1695c:	103ee83a 	callr	r2
   16960:	00000106 	br	16968 <alt_get_errno+0x28>
   16964:	d0a8f604 	addi	r2,gp,-23592
}
   16968:	e037883a 	mov	sp,fp
   1696c:	dfc00117 	ldw	ra,4(sp)
   16970:	df000017 	ldw	fp,0(sp)
   16974:	dec00204 	addi	sp,sp,8
   16978:	f800283a 	ret

0001697c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1697c:	defffb04 	addi	sp,sp,-20
   16980:	dfc00415 	stw	ra,16(sp)
   16984:	df000315 	stw	fp,12(sp)
   16988:	dc000215 	stw	r16,8(sp)
   1698c:	df000304 	addi	fp,sp,12
   16990:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16994:	e0bffe17 	ldw	r2,-8(fp)
   16998:	10800217 	ldw	r2,8(r2)
   1699c:	10d00034 	orhi	r3,r2,16384
   169a0:	e0bffe17 	ldw	r2,-8(fp)
   169a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   169a8:	e03ffd15 	stw	zero,-12(fp)
   169ac:	00002306 	br	16a3c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   169b0:	040000b4 	movhi	r16,2
   169b4:	84245204 	addi	r16,r16,-28344
   169b8:	e0bffd17 	ldw	r2,-12(fp)
   169bc:	01400304 	movi	r5,12
   169c0:	1009883a 	mov	r4,r2
   169c4:	0005b840 	call	5b84 <__mulsi3>
   169c8:	8085883a 	add	r2,r16,r2
   169cc:	10c00017 	ldw	r3,0(r2)
   169d0:	e0bffe17 	ldw	r2,-8(fp)
   169d4:	10800017 	ldw	r2,0(r2)
   169d8:	1880151e 	bne	r3,r2,16a30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   169dc:	040000b4 	movhi	r16,2
   169e0:	84245204 	addi	r16,r16,-28344
   169e4:	e0bffd17 	ldw	r2,-12(fp)
   169e8:	01400304 	movi	r5,12
   169ec:	1009883a 	mov	r4,r2
   169f0:	0005b840 	call	5b84 <__mulsi3>
   169f4:	8085883a 	add	r2,r16,r2
   169f8:	10800204 	addi	r2,r2,8
   169fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16a00:	10000b0e 	bge	r2,zero,16a30 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16a04:	01400304 	movi	r5,12
   16a08:	e13ffd17 	ldw	r4,-12(fp)
   16a0c:	0005b840 	call	5b84 <__mulsi3>
   16a10:	1007883a 	mov	r3,r2
   16a14:	008000b4 	movhi	r2,2
   16a18:	10a45204 	addi	r2,r2,-28344
   16a1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16a20:	e0bffe17 	ldw	r2,-8(fp)
   16a24:	18800226 	beq	r3,r2,16a30 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16a28:	00bffcc4 	movi	r2,-13
   16a2c:	00000806 	br	16a50 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16a30:	e0bffd17 	ldw	r2,-12(fp)
   16a34:	10800044 	addi	r2,r2,1
   16a38:	e0bffd15 	stw	r2,-12(fp)
   16a3c:	d0a00c17 	ldw	r2,-32720(gp)
   16a40:	1007883a 	mov	r3,r2
   16a44:	e0bffd17 	ldw	r2,-12(fp)
   16a48:	18bfd92e 	bgeu	r3,r2,169b0 <__alt_exception_stack_pointer+0xf80169b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16a4c:	0005883a 	mov	r2,zero
}
   16a50:	e6ffff04 	addi	sp,fp,-4
   16a54:	dfc00217 	ldw	ra,8(sp)
   16a58:	df000117 	ldw	fp,4(sp)
   16a5c:	dc000017 	ldw	r16,0(sp)
   16a60:	dec00304 	addi	sp,sp,12
   16a64:	f800283a 	ret

00016a68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16a68:	defff604 	addi	sp,sp,-40
   16a6c:	dfc00915 	stw	ra,36(sp)
   16a70:	df000815 	stw	fp,32(sp)
   16a74:	df000804 	addi	fp,sp,32
   16a78:	e13ffd15 	stw	r4,-12(fp)
   16a7c:	e17ffe15 	stw	r5,-8(fp)
   16a80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16a84:	00bfffc4 	movi	r2,-1
   16a88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16a8c:	00bffb44 	movi	r2,-19
   16a90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16a94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16a98:	d1600a04 	addi	r5,gp,-32728
   16a9c:	e13ffd17 	ldw	r4,-12(fp)
   16aa0:	0013c440 	call	13c44 <alt_find_dev>
   16aa4:	e0bff815 	stw	r2,-32(fp)
   16aa8:	e0bff817 	ldw	r2,-32(fp)
   16aac:	1000051e 	bne	r2,zero,16ac4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16ab0:	e13ffd17 	ldw	r4,-12(fp)
   16ab4:	0016d8c0 	call	16d8c <alt_find_file>
   16ab8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   16abc:	00800044 	movi	r2,1
   16ac0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16ac4:	e0bff817 	ldw	r2,-32(fp)
   16ac8:	10002b26 	beq	r2,zero,16b78 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16acc:	e13ff817 	ldw	r4,-32(fp)
   16ad0:	0016e940 	call	16e94 <alt_get_fd>
   16ad4:	e0bff915 	stw	r2,-28(fp)
   16ad8:	e0bff917 	ldw	r2,-28(fp)
   16adc:	1000030e 	bge	r2,zero,16aec <open+0x84>
    {
      status = index;
   16ae0:	e0bff917 	ldw	r2,-28(fp)
   16ae4:	e0bffa15 	stw	r2,-24(fp)
   16ae8:	00002506 	br	16b80 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   16aec:	01400304 	movi	r5,12
   16af0:	e13ff917 	ldw	r4,-28(fp)
   16af4:	0005b840 	call	5b84 <__mulsi3>
   16af8:	1007883a 	mov	r3,r2
   16afc:	008000b4 	movhi	r2,2
   16b00:	10a45204 	addi	r2,r2,-28344
   16b04:	1885883a 	add	r2,r3,r2
   16b08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16b0c:	e0fffe17 	ldw	r3,-8(fp)
   16b10:	00900034 	movhi	r2,16384
   16b14:	10bfffc4 	addi	r2,r2,-1
   16b18:	1886703a 	and	r3,r3,r2
   16b1c:	e0bffc17 	ldw	r2,-16(fp)
   16b20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16b24:	e0bffb17 	ldw	r2,-20(fp)
   16b28:	1000051e 	bne	r2,zero,16b40 <open+0xd8>
   16b2c:	e13ffc17 	ldw	r4,-16(fp)
   16b30:	001697c0 	call	1697c <alt_file_locked>
   16b34:	e0bffa15 	stw	r2,-24(fp)
   16b38:	e0bffa17 	ldw	r2,-24(fp)
   16b3c:	10001016 	blt	r2,zero,16b80 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16b40:	e0bff817 	ldw	r2,-32(fp)
   16b44:	10800317 	ldw	r2,12(r2)
   16b48:	10000826 	beq	r2,zero,16b6c <open+0x104>
   16b4c:	e0bff817 	ldw	r2,-32(fp)
   16b50:	10800317 	ldw	r2,12(r2)
   16b54:	e1ffff17 	ldw	r7,-4(fp)
   16b58:	e1bffe17 	ldw	r6,-8(fp)
   16b5c:	e17ffd17 	ldw	r5,-12(fp)
   16b60:	e13ffc17 	ldw	r4,-16(fp)
   16b64:	103ee83a 	callr	r2
   16b68:	00000106 	br	16b70 <open+0x108>
   16b6c:	0005883a 	mov	r2,zero
   16b70:	e0bffa15 	stw	r2,-24(fp)
   16b74:	00000206 	br	16b80 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16b78:	00bffb44 	movi	r2,-19
   16b7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16b80:	e0bffa17 	ldw	r2,-24(fp)
   16b84:	1000090e 	bge	r2,zero,16bac <open+0x144>
  {
    alt_release_fd (index);  
   16b88:	e13ff917 	ldw	r4,-28(fp)
   16b8c:	00142b80 	call	142b8 <alt_release_fd>
    ALT_ERRNO = -status;
   16b90:	00169400 	call	16940 <alt_get_errno>
   16b94:	1007883a 	mov	r3,r2
   16b98:	e0bffa17 	ldw	r2,-24(fp)
   16b9c:	0085c83a 	sub	r2,zero,r2
   16ba0:	18800015 	stw	r2,0(r3)
    return -1;
   16ba4:	00bfffc4 	movi	r2,-1
   16ba8:	00000106 	br	16bb0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   16bac:	e0bff917 	ldw	r2,-28(fp)
}
   16bb0:	e037883a 	mov	sp,fp
   16bb4:	dfc00117 	ldw	ra,4(sp)
   16bb8:	df000017 	ldw	fp,0(sp)
   16bbc:	dec00204 	addi	sp,sp,8
   16bc0:	f800283a 	ret

00016bc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   16bc4:	defffa04 	addi	sp,sp,-24
   16bc8:	df000515 	stw	fp,20(sp)
   16bcc:	df000504 	addi	fp,sp,20
   16bd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bd4:	0005303a 	rdctl	r2,status
   16bd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bdc:	e0fffc17 	ldw	r3,-16(fp)
   16be0:	00bfff84 	movi	r2,-2
   16be4:	1884703a 	and	r2,r3,r2
   16be8:	1001703a 	wrctl	status,r2
  
  return context;
   16bec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16bf0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   16bf4:	e0bfff17 	ldw	r2,-4(fp)
   16bf8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16bfc:	e0bffd17 	ldw	r2,-12(fp)
   16c00:	10800017 	ldw	r2,0(r2)
   16c04:	e0fffd17 	ldw	r3,-12(fp)
   16c08:	18c00117 	ldw	r3,4(r3)
   16c0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16c10:	e0bffd17 	ldw	r2,-12(fp)
   16c14:	10800117 	ldw	r2,4(r2)
   16c18:	e0fffd17 	ldw	r3,-12(fp)
   16c1c:	18c00017 	ldw	r3,0(r3)
   16c20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16c24:	e0bffd17 	ldw	r2,-12(fp)
   16c28:	e0fffd17 	ldw	r3,-12(fp)
   16c2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16c30:	e0bffd17 	ldw	r2,-12(fp)
   16c34:	e0fffd17 	ldw	r3,-12(fp)
   16c38:	10c00015 	stw	r3,0(r2)
   16c3c:	e0bffb17 	ldw	r2,-20(fp)
   16c40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c44:	e0bffe17 	ldw	r2,-8(fp)
   16c48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16c4c:	0001883a 	nop
   16c50:	e037883a 	mov	sp,fp
   16c54:	df000017 	ldw	fp,0(sp)
   16c58:	dec00104 	addi	sp,sp,4
   16c5c:	f800283a 	ret

00016c60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16c60:	defffb04 	addi	sp,sp,-20
   16c64:	dfc00415 	stw	ra,16(sp)
   16c68:	df000315 	stw	fp,12(sp)
   16c6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16c70:	d0a01317 	ldw	r2,-32692(gp)
   16c74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16c78:	d0a8ff17 	ldw	r2,-23556(gp)
   16c7c:	10800044 	addi	r2,r2,1
   16c80:	d0a8ff15 	stw	r2,-23556(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16c84:	00002e06 	br	16d40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16c88:	e0bffd17 	ldw	r2,-12(fp)
   16c8c:	10800017 	ldw	r2,0(r2)
   16c90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16c94:	e0bffd17 	ldw	r2,-12(fp)
   16c98:	10800403 	ldbu	r2,16(r2)
   16c9c:	10803fcc 	andi	r2,r2,255
   16ca0:	10000426 	beq	r2,zero,16cb4 <alt_tick+0x54>
   16ca4:	d0a8ff17 	ldw	r2,-23556(gp)
   16ca8:	1000021e 	bne	r2,zero,16cb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16cac:	e0bffd17 	ldw	r2,-12(fp)
   16cb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16cb4:	e0bffd17 	ldw	r2,-12(fp)
   16cb8:	10800217 	ldw	r2,8(r2)
   16cbc:	d0e8ff17 	ldw	r3,-23556(gp)
   16cc0:	18801d36 	bltu	r3,r2,16d38 <alt_tick+0xd8>
   16cc4:	e0bffd17 	ldw	r2,-12(fp)
   16cc8:	10800403 	ldbu	r2,16(r2)
   16ccc:	10803fcc 	andi	r2,r2,255
   16cd0:	1000191e 	bne	r2,zero,16d38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16cd4:	e0bffd17 	ldw	r2,-12(fp)
   16cd8:	10800317 	ldw	r2,12(r2)
   16cdc:	e0fffd17 	ldw	r3,-12(fp)
   16ce0:	18c00517 	ldw	r3,20(r3)
   16ce4:	1809883a 	mov	r4,r3
   16ce8:	103ee83a 	callr	r2
   16cec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16cf0:	e0bfff17 	ldw	r2,-4(fp)
   16cf4:	1000031e 	bne	r2,zero,16d04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16cf8:	e13ffd17 	ldw	r4,-12(fp)
   16cfc:	0016bc40 	call	16bc4 <alt_alarm_stop>
   16d00:	00000d06 	br	16d38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16d04:	e0bffd17 	ldw	r2,-12(fp)
   16d08:	10c00217 	ldw	r3,8(r2)
   16d0c:	e0bfff17 	ldw	r2,-4(fp)
   16d10:	1887883a 	add	r3,r3,r2
   16d14:	e0bffd17 	ldw	r2,-12(fp)
   16d18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16d1c:	e0bffd17 	ldw	r2,-12(fp)
   16d20:	10c00217 	ldw	r3,8(r2)
   16d24:	d0a8ff17 	ldw	r2,-23556(gp)
   16d28:	1880032e 	bgeu	r3,r2,16d38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16d2c:	e0bffd17 	ldw	r2,-12(fp)
   16d30:	00c00044 	movi	r3,1
   16d34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16d38:	e0bffe17 	ldw	r2,-8(fp)
   16d3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16d40:	e0fffd17 	ldw	r3,-12(fp)
   16d44:	d0a01304 	addi	r2,gp,-32692
   16d48:	18bfcf1e 	bne	r3,r2,16c88 <__alt_exception_stack_pointer+0xf8016c88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16d4c:	0001883a 	nop
}
   16d50:	0001883a 	nop
   16d54:	e037883a 	mov	sp,fp
   16d58:	dfc00117 	ldw	ra,4(sp)
   16d5c:	df000017 	ldw	fp,0(sp)
   16d60:	dec00204 	addi	sp,sp,8
   16d64:	f800283a 	ret

00016d68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16d68:	deffff04 	addi	sp,sp,-4
   16d6c:	df000015 	stw	fp,0(sp)
   16d70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16d74:	000170fa 	wrctl	ienable,zero
}
   16d78:	0001883a 	nop
   16d7c:	e037883a 	mov	sp,fp
   16d80:	df000017 	ldw	fp,0(sp)
   16d84:	dec00104 	addi	sp,sp,4
   16d88:	f800283a 	ret

00016d8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16d8c:	defffb04 	addi	sp,sp,-20
   16d90:	dfc00415 	stw	ra,16(sp)
   16d94:	df000315 	stw	fp,12(sp)
   16d98:	df000304 	addi	fp,sp,12
   16d9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16da0:	d0a00817 	ldw	r2,-32736(gp)
   16da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16da8:	00003106 	br	16e70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   16dac:	e0bffd17 	ldw	r2,-12(fp)
   16db0:	10800217 	ldw	r2,8(r2)
   16db4:	1009883a 	mov	r4,r2
   16db8:	00092000 	call	9200 <strlen>
   16dbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   16dc0:	e0bffd17 	ldw	r2,-12(fp)
   16dc4:	10c00217 	ldw	r3,8(r2)
   16dc8:	e0bffe17 	ldw	r2,-8(fp)
   16dcc:	10bfffc4 	addi	r2,r2,-1
   16dd0:	1885883a 	add	r2,r3,r2
   16dd4:	10800003 	ldbu	r2,0(r2)
   16dd8:	10803fcc 	andi	r2,r2,255
   16ddc:	1080201c 	xori	r2,r2,128
   16de0:	10bfe004 	addi	r2,r2,-128
   16de4:	10800bd8 	cmpnei	r2,r2,47
   16de8:	1000031e 	bne	r2,zero,16df8 <alt_find_file+0x6c>
    {
      len -= 1;
   16dec:	e0bffe17 	ldw	r2,-8(fp)
   16df0:	10bfffc4 	addi	r2,r2,-1
   16df4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16df8:	e0bffe17 	ldw	r2,-8(fp)
   16dfc:	e0ffff17 	ldw	r3,-4(fp)
   16e00:	1885883a 	add	r2,r3,r2
   16e04:	10800003 	ldbu	r2,0(r2)
   16e08:	10803fcc 	andi	r2,r2,255
   16e0c:	1080201c 	xori	r2,r2,128
   16e10:	10bfe004 	addi	r2,r2,-128
   16e14:	10800be0 	cmpeqi	r2,r2,47
   16e18:	1000081e 	bne	r2,zero,16e3c <alt_find_file+0xb0>
   16e1c:	e0bffe17 	ldw	r2,-8(fp)
   16e20:	e0ffff17 	ldw	r3,-4(fp)
   16e24:	1885883a 	add	r2,r3,r2
   16e28:	10800003 	ldbu	r2,0(r2)
   16e2c:	10803fcc 	andi	r2,r2,255
   16e30:	1080201c 	xori	r2,r2,128
   16e34:	10bfe004 	addi	r2,r2,-128
   16e38:	10000a1e 	bne	r2,zero,16e64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   16e3c:	e0bffd17 	ldw	r2,-12(fp)
   16e40:	10800217 	ldw	r2,8(r2)
   16e44:	e0fffe17 	ldw	r3,-8(fp)
   16e48:	180d883a 	mov	r6,r3
   16e4c:	e17fff17 	ldw	r5,-4(fp)
   16e50:	1009883a 	mov	r4,r2
   16e54:	00170400 	call	17040 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16e58:	1000021e 	bne	r2,zero,16e64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   16e5c:	e0bffd17 	ldw	r2,-12(fp)
   16e60:	00000706 	br	16e80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16e64:	e0bffd17 	ldw	r2,-12(fp)
   16e68:	10800017 	ldw	r2,0(r2)
   16e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16e70:	e0fffd17 	ldw	r3,-12(fp)
   16e74:	d0a00804 	addi	r2,gp,-32736
   16e78:	18bfcc1e 	bne	r3,r2,16dac <__alt_exception_stack_pointer+0xf8016dac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   16e7c:	0005883a 	mov	r2,zero
}
   16e80:	e037883a 	mov	sp,fp
   16e84:	dfc00117 	ldw	ra,4(sp)
   16e88:	df000017 	ldw	fp,0(sp)
   16e8c:	dec00204 	addi	sp,sp,8
   16e90:	f800283a 	ret

00016e94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16e94:	defffa04 	addi	sp,sp,-24
   16e98:	dfc00515 	stw	ra,20(sp)
   16e9c:	df000415 	stw	fp,16(sp)
   16ea0:	dc000315 	stw	r16,12(sp)
   16ea4:	df000404 	addi	fp,sp,16
   16ea8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   16eac:	00bffa04 	movi	r2,-24
   16eb0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16eb4:	e03ffc15 	stw	zero,-16(fp)
   16eb8:	00001d06 	br	16f30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   16ebc:	040000b4 	movhi	r16,2
   16ec0:	84245204 	addi	r16,r16,-28344
   16ec4:	e0bffc17 	ldw	r2,-16(fp)
   16ec8:	01400304 	movi	r5,12
   16ecc:	1009883a 	mov	r4,r2
   16ed0:	0005b840 	call	5b84 <__mulsi3>
   16ed4:	8085883a 	add	r2,r16,r2
   16ed8:	10800017 	ldw	r2,0(r2)
   16edc:	1000111e 	bne	r2,zero,16f24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   16ee0:	040000b4 	movhi	r16,2
   16ee4:	84245204 	addi	r16,r16,-28344
   16ee8:	e0bffc17 	ldw	r2,-16(fp)
   16eec:	01400304 	movi	r5,12
   16ef0:	1009883a 	mov	r4,r2
   16ef4:	0005b840 	call	5b84 <__mulsi3>
   16ef8:	8085883a 	add	r2,r16,r2
   16efc:	e0fffe17 	ldw	r3,-8(fp)
   16f00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   16f04:	d0e00c17 	ldw	r3,-32720(gp)
   16f08:	e0bffc17 	ldw	r2,-16(fp)
   16f0c:	1880020e 	bge	r3,r2,16f18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   16f10:	e0bffc17 	ldw	r2,-16(fp)
   16f14:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   16f18:	e0bffc17 	ldw	r2,-16(fp)
   16f1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   16f20:	00000606 	br	16f3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16f24:	e0bffc17 	ldw	r2,-16(fp)
   16f28:	10800044 	addi	r2,r2,1
   16f2c:	e0bffc15 	stw	r2,-16(fp)
   16f30:	e0bffc17 	ldw	r2,-16(fp)
   16f34:	10800810 	cmplti	r2,r2,32
   16f38:	103fe01e 	bne	r2,zero,16ebc <__alt_exception_stack_pointer+0xf8016ebc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16f3c:	e0bffd17 	ldw	r2,-12(fp)
}
   16f40:	e6ffff04 	addi	sp,fp,-4
   16f44:	dfc00217 	ldw	ra,8(sp)
   16f48:	df000117 	ldw	fp,4(sp)
   16f4c:	dc000017 	ldw	r16,0(sp)
   16f50:	dec00304 	addi	sp,sp,12
   16f54:	f800283a 	ret

00016f58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   16f58:	defffe04 	addi	sp,sp,-8
   16f5c:	df000115 	stw	fp,4(sp)
   16f60:	df000104 	addi	fp,sp,4
   16f64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   16f68:	e0bfff17 	ldw	r2,-4(fp)
   16f6c:	10bffe84 	addi	r2,r2,-6
   16f70:	10c00428 	cmpgeui	r3,r2,16
   16f74:	18001a1e 	bne	r3,zero,16fe0 <alt_exception_cause_generated_bad_addr+0x88>
   16f78:	100690ba 	slli	r3,r2,2
   16f7c:	00800074 	movhi	r2,1
   16f80:	109be404 	addi	r2,r2,28560
   16f84:	1885883a 	add	r2,r3,r2
   16f88:	10800017 	ldw	r2,0(r2)
   16f8c:	1000683a 	jmp	r2
   16f90:	00016fd0 	cmplti	zero,zero,1471
   16f94:	00016fd0 	cmplti	zero,zero,1471
   16f98:	00016fe0 	cmpeqi	zero,zero,1471
   16f9c:	00016fe0 	cmpeqi	zero,zero,1471
   16fa0:	00016fe0 	cmpeqi	zero,zero,1471
   16fa4:	00016fd0 	cmplti	zero,zero,1471
   16fa8:	00016fd8 	cmpnei	zero,zero,1471
   16fac:	00016fe0 	cmpeqi	zero,zero,1471
   16fb0:	00016fd0 	cmplti	zero,zero,1471
   16fb4:	00016fd0 	cmplti	zero,zero,1471
   16fb8:	00016fe0 	cmpeqi	zero,zero,1471
   16fbc:	00016fd0 	cmplti	zero,zero,1471
   16fc0:	00016fd8 	cmpnei	zero,zero,1471
   16fc4:	00016fe0 	cmpeqi	zero,zero,1471
   16fc8:	00016fe0 	cmpeqi	zero,zero,1471
   16fcc:	00016fd0 	cmplti	zero,zero,1471
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16fd0:	00800044 	movi	r2,1
   16fd4:	00000306 	br	16fe4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16fd8:	0005883a 	mov	r2,zero
   16fdc:	00000106 	br	16fe4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16fe0:	0005883a 	mov	r2,zero
  }
}
   16fe4:	e037883a 	mov	sp,fp
   16fe8:	df000017 	ldw	fp,0(sp)
   16fec:	dec00104 	addi	sp,sp,4
   16ff0:	f800283a 	ret

00016ff4 <atexit>:
   16ff4:	200b883a 	mov	r5,r4
   16ff8:	000f883a 	mov	r7,zero
   16ffc:	000d883a 	mov	r6,zero
   17000:	0009883a 	mov	r4,zero
   17004:	00170bc1 	jmpi	170bc <__register_exitproc>

00017008 <exit>:
   17008:	defffe04 	addi	sp,sp,-8
   1700c:	000b883a 	mov	r5,zero
   17010:	dc000015 	stw	r16,0(sp)
   17014:	dfc00115 	stw	ra,4(sp)
   17018:	2021883a 	mov	r16,r4
   1701c:	00171d40 	call	171d4 <__call_exitprocs>
   17020:	008000b4 	movhi	r2,2
   17024:	10a92904 	addi	r2,r2,-23388
   17028:	11000017 	ldw	r4,0(r2)
   1702c:	20800f17 	ldw	r2,60(r4)
   17030:	10000126 	beq	r2,zero,17038 <exit+0x30>
   17034:	103ee83a 	callr	r2
   17038:	8009883a 	mov	r4,r16
   1703c:	00173540 	call	17354 <_exit>

00017040 <memcmp>:
   17040:	01c000c4 	movi	r7,3
   17044:	3980192e 	bgeu	r7,r6,170ac <memcmp+0x6c>
   17048:	2144b03a 	or	r2,r4,r5
   1704c:	11c4703a 	and	r2,r2,r7
   17050:	10000f26 	beq	r2,zero,17090 <memcmp+0x50>
   17054:	20800003 	ldbu	r2,0(r4)
   17058:	28c00003 	ldbu	r3,0(r5)
   1705c:	10c0151e 	bne	r2,r3,170b4 <memcmp+0x74>
   17060:	31bfff84 	addi	r6,r6,-2
   17064:	01ffffc4 	movi	r7,-1
   17068:	00000406 	br	1707c <memcmp+0x3c>
   1706c:	20800003 	ldbu	r2,0(r4)
   17070:	28c00003 	ldbu	r3,0(r5)
   17074:	31bfffc4 	addi	r6,r6,-1
   17078:	10c00e1e 	bne	r2,r3,170b4 <memcmp+0x74>
   1707c:	21000044 	addi	r4,r4,1
   17080:	29400044 	addi	r5,r5,1
   17084:	31fff91e 	bne	r6,r7,1706c <__alt_exception_stack_pointer+0xf801706c>
   17088:	0005883a 	mov	r2,zero
   1708c:	f800283a 	ret
   17090:	20c00017 	ldw	r3,0(r4)
   17094:	28800017 	ldw	r2,0(r5)
   17098:	18bfee1e 	bne	r3,r2,17054 <__alt_exception_stack_pointer+0xf8017054>
   1709c:	31bfff04 	addi	r6,r6,-4
   170a0:	21000104 	addi	r4,r4,4
   170a4:	29400104 	addi	r5,r5,4
   170a8:	39bff936 	bltu	r7,r6,17090 <__alt_exception_stack_pointer+0xf8017090>
   170ac:	303fe91e 	bne	r6,zero,17054 <__alt_exception_stack_pointer+0xf8017054>
   170b0:	003ff506 	br	17088 <__alt_exception_stack_pointer+0xf8017088>
   170b4:	10c5c83a 	sub	r2,r2,r3
   170b8:	f800283a 	ret

000170bc <__register_exitproc>:
   170bc:	defffa04 	addi	sp,sp,-24
   170c0:	dc000315 	stw	r16,12(sp)
   170c4:	040000b4 	movhi	r16,2
   170c8:	84292904 	addi	r16,r16,-23388
   170cc:	80c00017 	ldw	r3,0(r16)
   170d0:	dc400415 	stw	r17,16(sp)
   170d4:	dfc00515 	stw	ra,20(sp)
   170d8:	18805217 	ldw	r2,328(r3)
   170dc:	2023883a 	mov	r17,r4
   170e0:	10003726 	beq	r2,zero,171c0 <__register_exitproc+0x104>
   170e4:	10c00117 	ldw	r3,4(r2)
   170e8:	010007c4 	movi	r4,31
   170ec:	20c00e16 	blt	r4,r3,17128 <__register_exitproc+0x6c>
   170f0:	1a000044 	addi	r8,r3,1
   170f4:	8800221e 	bne	r17,zero,17180 <__register_exitproc+0xc4>
   170f8:	18c00084 	addi	r3,r3,2
   170fc:	18c7883a 	add	r3,r3,r3
   17100:	18c7883a 	add	r3,r3,r3
   17104:	12000115 	stw	r8,4(r2)
   17108:	10c7883a 	add	r3,r2,r3
   1710c:	19400015 	stw	r5,0(r3)
   17110:	0005883a 	mov	r2,zero
   17114:	dfc00517 	ldw	ra,20(sp)
   17118:	dc400417 	ldw	r17,16(sp)
   1711c:	dc000317 	ldw	r16,12(sp)
   17120:	dec00604 	addi	sp,sp,24
   17124:	f800283a 	ret
   17128:	00800074 	movhi	r2,1
   1712c:	10a20e04 	addi	r2,r2,-30664
   17130:	10002626 	beq	r2,zero,171cc <__register_exitproc+0x110>
   17134:	01006404 	movi	r4,400
   17138:	d9400015 	stw	r5,0(sp)
   1713c:	d9800115 	stw	r6,4(sp)
   17140:	d9c00215 	stw	r7,8(sp)
   17144:	00088380 	call	8838 <malloc>
   17148:	d9400017 	ldw	r5,0(sp)
   1714c:	d9800117 	ldw	r6,4(sp)
   17150:	d9c00217 	ldw	r7,8(sp)
   17154:	10001d26 	beq	r2,zero,171cc <__register_exitproc+0x110>
   17158:	81000017 	ldw	r4,0(r16)
   1715c:	10000115 	stw	zero,4(r2)
   17160:	02000044 	movi	r8,1
   17164:	22405217 	ldw	r9,328(r4)
   17168:	0007883a 	mov	r3,zero
   1716c:	12400015 	stw	r9,0(r2)
   17170:	20805215 	stw	r2,328(r4)
   17174:	10006215 	stw	zero,392(r2)
   17178:	10006315 	stw	zero,396(r2)
   1717c:	883fde26 	beq	r17,zero,170f8 <__alt_exception_stack_pointer+0xf80170f8>
   17180:	18c9883a 	add	r4,r3,r3
   17184:	2109883a 	add	r4,r4,r4
   17188:	1109883a 	add	r4,r2,r4
   1718c:	21802215 	stw	r6,136(r4)
   17190:	01800044 	movi	r6,1
   17194:	12406217 	ldw	r9,392(r2)
   17198:	30cc983a 	sll	r6,r6,r3
   1719c:	4992b03a 	or	r9,r9,r6
   171a0:	12406215 	stw	r9,392(r2)
   171a4:	21c04215 	stw	r7,264(r4)
   171a8:	01000084 	movi	r4,2
   171ac:	893fd21e 	bne	r17,r4,170f8 <__alt_exception_stack_pointer+0xf80170f8>
   171b0:	11006317 	ldw	r4,396(r2)
   171b4:	218cb03a 	or	r6,r4,r6
   171b8:	11806315 	stw	r6,396(r2)
   171bc:	003fce06 	br	170f8 <__alt_exception_stack_pointer+0xf80170f8>
   171c0:	18805304 	addi	r2,r3,332
   171c4:	18805215 	stw	r2,328(r3)
   171c8:	003fc606 	br	170e4 <__alt_exception_stack_pointer+0xf80170e4>
   171cc:	00bfffc4 	movi	r2,-1
   171d0:	003fd006 	br	17114 <__alt_exception_stack_pointer+0xf8017114>

000171d4 <__call_exitprocs>:
   171d4:	defff504 	addi	sp,sp,-44
   171d8:	df000915 	stw	fp,36(sp)
   171dc:	dd400615 	stw	r21,24(sp)
   171e0:	dc800315 	stw	r18,12(sp)
   171e4:	dfc00a15 	stw	ra,40(sp)
   171e8:	ddc00815 	stw	r23,32(sp)
   171ec:	dd800715 	stw	r22,28(sp)
   171f0:	dd000515 	stw	r20,20(sp)
   171f4:	dcc00415 	stw	r19,16(sp)
   171f8:	dc400215 	stw	r17,8(sp)
   171fc:	dc000115 	stw	r16,4(sp)
   17200:	d9000015 	stw	r4,0(sp)
   17204:	2839883a 	mov	fp,r5
   17208:	04800044 	movi	r18,1
   1720c:	057fffc4 	movi	r21,-1
   17210:	008000b4 	movhi	r2,2
   17214:	10a92904 	addi	r2,r2,-23388
   17218:	12000017 	ldw	r8,0(r2)
   1721c:	45005217 	ldw	r20,328(r8)
   17220:	44c05204 	addi	r19,r8,328
   17224:	a0001c26 	beq	r20,zero,17298 <__call_exitprocs+0xc4>
   17228:	a0800117 	ldw	r2,4(r20)
   1722c:	15ffffc4 	addi	r23,r2,-1
   17230:	b8000d16 	blt	r23,zero,17268 <__call_exitprocs+0x94>
   17234:	14000044 	addi	r16,r2,1
   17238:	8421883a 	add	r16,r16,r16
   1723c:	8421883a 	add	r16,r16,r16
   17240:	84402004 	addi	r17,r16,128
   17244:	a463883a 	add	r17,r20,r17
   17248:	a421883a 	add	r16,r20,r16
   1724c:	e0001e26 	beq	fp,zero,172c8 <__call_exitprocs+0xf4>
   17250:	80804017 	ldw	r2,256(r16)
   17254:	e0801c26 	beq	fp,r2,172c8 <__call_exitprocs+0xf4>
   17258:	bdffffc4 	addi	r23,r23,-1
   1725c:	843fff04 	addi	r16,r16,-4
   17260:	8c7fff04 	addi	r17,r17,-4
   17264:	bd7ff91e 	bne	r23,r21,1724c <__alt_exception_stack_pointer+0xf801724c>
   17268:	00800074 	movhi	r2,1
   1726c:	10a21304 	addi	r2,r2,-30644
   17270:	10000926 	beq	r2,zero,17298 <__call_exitprocs+0xc4>
   17274:	a0800117 	ldw	r2,4(r20)
   17278:	1000301e 	bne	r2,zero,1733c <__call_exitprocs+0x168>
   1727c:	a0800017 	ldw	r2,0(r20)
   17280:	10003226 	beq	r2,zero,1734c <__call_exitprocs+0x178>
   17284:	a009883a 	mov	r4,r20
   17288:	98800015 	stw	r2,0(r19)
   1728c:	000884c0 	call	884c <free>
   17290:	9d000017 	ldw	r20,0(r19)
   17294:	a03fe41e 	bne	r20,zero,17228 <__alt_exception_stack_pointer+0xf8017228>
   17298:	dfc00a17 	ldw	ra,40(sp)
   1729c:	df000917 	ldw	fp,36(sp)
   172a0:	ddc00817 	ldw	r23,32(sp)
   172a4:	dd800717 	ldw	r22,28(sp)
   172a8:	dd400617 	ldw	r21,24(sp)
   172ac:	dd000517 	ldw	r20,20(sp)
   172b0:	dcc00417 	ldw	r19,16(sp)
   172b4:	dc800317 	ldw	r18,12(sp)
   172b8:	dc400217 	ldw	r17,8(sp)
   172bc:	dc000117 	ldw	r16,4(sp)
   172c0:	dec00b04 	addi	sp,sp,44
   172c4:	f800283a 	ret
   172c8:	a0800117 	ldw	r2,4(r20)
   172cc:	80c00017 	ldw	r3,0(r16)
   172d0:	10bfffc4 	addi	r2,r2,-1
   172d4:	15c01426 	beq	r2,r23,17328 <__call_exitprocs+0x154>
   172d8:	80000015 	stw	zero,0(r16)
   172dc:	183fde26 	beq	r3,zero,17258 <__alt_exception_stack_pointer+0xf8017258>
   172e0:	95c8983a 	sll	r4,r18,r23
   172e4:	a0806217 	ldw	r2,392(r20)
   172e8:	a5800117 	ldw	r22,4(r20)
   172ec:	2084703a 	and	r2,r4,r2
   172f0:	10000b26 	beq	r2,zero,17320 <__call_exitprocs+0x14c>
   172f4:	a0806317 	ldw	r2,396(r20)
   172f8:	2088703a 	and	r4,r4,r2
   172fc:	20000c1e 	bne	r4,zero,17330 <__call_exitprocs+0x15c>
   17300:	89400017 	ldw	r5,0(r17)
   17304:	d9000017 	ldw	r4,0(sp)
   17308:	183ee83a 	callr	r3
   1730c:	a0800117 	ldw	r2,4(r20)
   17310:	15bfbf1e 	bne	r2,r22,17210 <__alt_exception_stack_pointer+0xf8017210>
   17314:	98800017 	ldw	r2,0(r19)
   17318:	153fcf26 	beq	r2,r20,17258 <__alt_exception_stack_pointer+0xf8017258>
   1731c:	003fbc06 	br	17210 <__alt_exception_stack_pointer+0xf8017210>
   17320:	183ee83a 	callr	r3
   17324:	003ff906 	br	1730c <__alt_exception_stack_pointer+0xf801730c>
   17328:	a5c00115 	stw	r23,4(r20)
   1732c:	003feb06 	br	172dc <__alt_exception_stack_pointer+0xf80172dc>
   17330:	89000017 	ldw	r4,0(r17)
   17334:	183ee83a 	callr	r3
   17338:	003ff406 	br	1730c <__alt_exception_stack_pointer+0xf801730c>
   1733c:	a0800017 	ldw	r2,0(r20)
   17340:	a027883a 	mov	r19,r20
   17344:	1029883a 	mov	r20,r2
   17348:	003fb606 	br	17224 <__alt_exception_stack_pointer+0xf8017224>
   1734c:	0005883a 	mov	r2,zero
   17350:	003ffb06 	br	17340 <__alt_exception_stack_pointer+0xf8017340>

00017354 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17354:	defffd04 	addi	sp,sp,-12
   17358:	df000215 	stw	fp,8(sp)
   1735c:	df000204 	addi	fp,sp,8
   17360:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17364:	0001883a 	nop
   17368:	e0bfff17 	ldw	r2,-4(fp)
   1736c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17370:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17374:	10000226 	beq	r2,zero,17380 <_exit+0x2c>
    ALT_SIM_FAIL();
   17378:	002af070 	cmpltui	zero,zero,43969
   1737c:	00000106 	br	17384 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17380:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17384:	003fff06 	br	17384 <__alt_exception_stack_pointer+0xf8017384>
