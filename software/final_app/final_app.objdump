
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010f24 memsz 0x00010f24 flags r-x
    LOAD off    0x00011f44 vaddr 0x00010f44 paddr 0x00012b18 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x000146ec vaddr 0x000146ec paddr 0x000146ec align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000109d0  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000338  00010c0c  00010c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  00010f44  00012b18  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  000146ec  000146ec  000146ec  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00014850  00014850  00013b18  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013b18  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f78  00000000  00000000  00013b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025e5e  00000000  00000000  00014ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a12  00000000  00000000  0003a916  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bf2a  00000000  00000000  00044328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002488  00000000  00000000  00050254  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e49  00000000  00000000  000526dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001780d  00000000  00000000  00056525  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006dd34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006dd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072aca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00072acd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072ad2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072ad3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00072ad4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00072adf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00072ae3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00072aee  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00072af7  2**0
                  CONTENTS, READONLY
 26 .jdi          00004eb9  00000000  00000000  00072b1f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00057f64  00000000  00000000  000779d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00010c0c l    d  .rodata	00000000 .rodata
00010f44 l    d  .rwdata	00000000 .rwdata
000146ec l    d  .bss	00000000 .bss
00014850 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000278 l     F .text	00000068 alt_dma_txchan_send
000002e0 l     F .text	00000068 alt_dma_rxchan_prepare
000146ec l     O .bss	00000004 rx_done
00000348 l     F .text	00000030 done
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00010f44 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010d76 l     O .rodata	00000010 zeroes.4404
000040bc l     F .text	000000bc __sbprintf
00010d86 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000042cc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005e24 l     F .text	00000008 __fp_unlock
00005e38 l     F .text	0000019c __sinit.part.1
00005fd4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011790 l     O .rwdata	00000020 lc_ctype_charset
00011770 l     O .rwdata	00000020 lc_message_charset
000117b0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010db4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008158 l     F .text	000000fc __sprint_r.part.0
00010ed8 l     O .rodata	00000010 zeroes.4349
00009794 l     F .text	000000bc __sbprintf
00010ee8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d6ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d7c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0000d7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0000d87c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d99c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000da90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000db78 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000dc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000de40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012b0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0000e0b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0000e168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e2a4 l     F .text	00000034 alt_dev_reg
00011990 l     O .rwdata	000000a4 dma_0_priv
00011a34 l     O .rwdata	0000001c dma_0_tx
00011a50 l     O .rwdata	0000001c dma_0_rx
00011a6c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0000e398 l     F .text	00000034 alt_dma_txchan_reg
0000e3cc l     F .text	00000034 alt_dma_rxchan_reg
0000e4f8 l     F .text	0000009c alt_avalon_dma_launch_txonly
0000e594 l     F .text	0000009c alt_avalon_dma_launch_rxonly
0000e630 l     F .text	00000344 alt_avalon_dma_ioctl
0000ece8 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f180 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f38c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f9c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fc04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010064 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000101c4 l     F .text	0000003c alt_get_errno
00010200 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014724 g     O .bss	00000004 alt_instruction_exception_handler
00007cbc g     F .text	00000074 _mprec_log10
00007da8 g     F .text	0000008c __any_on
0000a210 g     F .text	00000054 _isatty_r
00010dc0 g     O .rodata	00000028 __mprec_tinytens
0000dd7c g     F .text	0000007c alt_main
00014750 g     O .bss	00000100 alt_irq
0000a264 g     F .text	00000060 _lseek_r
00000378 g     F .text	000000ec transfer
00012b18 g       *ABS*	00000000 __flash_rwdata_start
0000c190 g     F .text	00000088 .hidden __eqdf2
00014850 g       *ABS*	00000000 __alt_heap_start
00001d2c g     F .text	0000003c printf
0000ab3c g     F .text	0000009c _wcrtomb_r
00007f80 g     F .text	0000005c __sseek
00006184 g     F .text	00000010 __sinit
0000eea8 g     F .text	000000b4 alt_avalon_dma_init
0000a9e4 g     F .text	00000140 __swbuf_r
00006790 g     F .text	0000007c _setlocale_r
00005fdc g     F .text	00000078 __sfmoreglue
0000de1c g     F .text	00000024 __malloc_unlock
0000a2c4 g     F .text	0000015c memmove
0000616c g     F .text	00000018 _cleanup
00006d7c g     F .text	000000a8 _Balloc
0000c218 g     F .text	000000dc .hidden __gtdf2
000105ec g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0000e0f0 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009cec g     F .text	0000005c _fstat_r
000146fc g     O .bss	00000004 errno
00007efc g     F .text	00000008 __seofread
00014710 g     O .bss	00000004 alt_argv
0001aacc g       *ABS*	00000000 _gp
0000d8b8 g     F .text	00000054 alt_dma_txchan_open
00011810 g     O .rwdata	00000180 alt_fd_list
0000d90c g     F .text	00000090 alt_find_dev
00006b0c g     F .text	00000148 memcpy
00001dbc g     F .text	00000008 _times_r
00005e2c g     F .text	0000000c _cleanup_r
0000d5d0 g     F .text	000000dc .hidden __floatsidf
00010148 g     F .text	0000007c alt_io_redirect
0000c2f4 g     F .text	000000f4 .hidden __ltdf2
00010c0c g       *ABS*	00000000 __DTOR_END__
000107dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007e34 g     F .text	00000074 __fpclassifyd
00007c18 g     F .text	000000a4 __ratio
00009778 g     F .text	0000001c __vfiprintf_internal
0000f584 g     F .text	0000021c altera_avalon_jtag_uart_read
000014c8 g     F .text	00000014 malloc
00001cfc g     F .text	00000030 _printf_r
000008bc g     F .text	00000064 .hidden __udivsi3
0000dacc g     F .text	000000ac isatty
00010e10 g     O .rodata	000000c8 __mprec_tens
0000680c g     F .text	0000000c __locale_charset
000146f8 g     O .bss	00000004 __malloc_top_pad
00012adc g     O .rwdata	00000004 __mb_cur_max
0000683c g     F .text	0000000c _localeconv_r
00009d48 g     F .text	000004c8 __sfvwrite_r
000071b0 g     F .text	0000003c __i2b
00001d68 g     F .text	00000054 _sbrk_r
0000a420 g     F .text	00000060 _read_r
00012af4 g     O .rwdata	00000004 alt_max_fd
000099e0 g     F .text	000000f0 _fclose_r
00005df4 g     F .text	00000030 fflush
000146f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b8e4 g     F .text	000008ac .hidden __adddf3
0000e400 g     F .text	000000f8 alt_avalon_dma_launch_bidir
000079c0 g     F .text	0000010c __b2d
0000b320 g     F .text	000005c4 .hidden __umoddi3
0000d828 g     F .text	00000054 alt_dma_rxchan_open
0000dca0 g     F .text	000000dc lseek
00012acc g     O .rwdata	00000004 _global_impure_ptr
0000a480 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00014850 g       *ABS*	00000000 __bss_end
0000ff74 g     F .text	000000f0 alt_iic_isr_register
000104e4 g     F .text	00000108 alt_tick
0000ad24 g     F .text	000005fc .hidden __udivdi3
00009c48 g     F .text	00000024 _fputwc_r
00010de8 g     O .rodata	00000028 __mprec_bigtens
00006f94 g     F .text	00000104 __s2b
00001370 g     F .text	000000a8 .hidden __floatunsidf
00007700 g     F .text	00000060 __mcmp
000061a4 g     F .text	00000018 __fp_lock_all
0000ff28 g     F .text	0000004c alt_ic_irq_enabled
00010448 g     F .text	0000009c alt_alarm_stop
00014718 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
000117e8 g     O .rwdata	00000028 alt_dev_null
0000fbe4 g     F .text	00000020 alt_dcache_flush_all
00007098 g     F .text	00000068 __hi0bits
0000d550 g     F .text	00000080 .hidden __fixdfsi
00012b18 g       *ABS*	00000000 __ram_rwdata_end
00012aec g     O .rwdata	00000008 alt_dev_list
0000eb3c g     F .text	00000074 alt_avalon_dma_space
0000e1a4 g     F .text	00000100 write
00010f44 g       *ABS*	00000000 __ram_rodata_end
0000d9d8 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c2f4 g     F .text	000000f4 .hidden __ledf2
00007478 g     F .text	00000140 __pow5mult
0000826c g     F .text	0000150c ___vfiprintf_internal_r
00014708 g     O .bss	00000004 __nlocale_changed
00000920 g     F .text	00000058 .hidden __umodsi3
00014850 g       *ABS*	00000000 end
0000f0c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00010c0c g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000fa3c g     F .text	0000007c alt_avalon_timer_sc_init
00001418 g     F .text	00000064 .hidden __clzsi2
0000f7a0 g     F .text	00000224 altera_avalon_jtag_uart_write
00006194 g     F .text	00000004 __sfp_lock_acquire
00006a28 g     F .text	000000e4 memchr
00001dc4 g     F .text	000022dc ___vfprintf_internal_r
000062f8 g     F .text	00000310 _free_r
00006818 g     F .text	00000010 __locale_mb_cur_max
0000ebb0 g     F .text	00000138 alt_avalon_dma_send
00010a58 g     F .text	00000180 __call_exitprocs
00012b00 g     O .rwdata	00000008 alt_dma_txchan_list
00014704 g     O .bss	00000004 __mlocale_changed
00012ad4 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001471c g     O .bss	00000004 _alt_tick_rate
000075b8 g     F .text	00000148 __lshift
00014720 g     O .bss	00000004 _alt_nticks
0000de7c g     F .text	00000104 read
0000e310 g     F .text	00000088 alt_sys_init
00010940 g     F .text	00000118 __register_exitproc
000071ec g     F .text	0000028c __multiply
0000f42c g     F .text	00000068 altera_avalon_jtag_uart_close
00000978 g     F .text	00000028 .hidden __mulsi3
00010f44 g       *ABS*	00000000 __ram_rwdata_start
00010c0c g       *ABS*	00000000 __ram_rodata_start
00014728 g     O .bss	00000028 __malloc_current_mallinfo
00007acc g     F .text	0000014c __d2b
0000ef5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010718 g     F .text	000000c4 alt_get_fd
000098b0 g     F .text	00000054 _close_r
000108c4 g     F .text	0000007c memcmp
0000f01c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014850 g       *ABS*	00000000 __alt_stack_base
0000f06c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004178 g     F .text	00000154 __swsetup_r
000009a0 g     F .text	000009d0 .hidden __divdf3
00006054 g     F .text	00000118 __sfp
00007d30 g     F .text	00000078 __copybits
00011368 g     O .rwdata	00000408 __malloc_av_
000061a0 g     F .text	00000004 __sinit_lock_release
0000c3e8 g     F .text	0000086c .hidden __muldf3
00007ea8 g     F .text	00000054 __sread
00010610 g     F .text	00000108 alt_find_file
0000fc40 g     F .text	000000a4 alt_dev_llist_insert
0000ddf8 g     F .text	00000024 __malloc_lock
0000e004 g     F .text	000000b0 sbrk
00005d98 g     F .text	0000005c _fflush_r
00009904 g     F .text	000000dc _calloc_r
000146ec g       *ABS*	00000000 __bss_start
00006c54 g     F .text	00000128 memset
00000464 g     F .text	00000360 main
0000e9bc g     F .text	00000048 alt_avalon_dma_rx_ioctl
00014714 g     O .bss	00000004 alt_envp
000146f0 g     O .bss	00000004 __malloc_max_total_mem
0000efbc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ab24 g     F .text	00000018 __swbuf
00007fdc g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
00009ad0 g     F .text	00000014 fclose
000044f4 g     F .text	00001688 _dtoa_r
000014f0 g     F .text	0000080c _malloc_r
0000ac98 g     F .text	00000030 __ascii_wctomb
00012b08 g     O .rwdata	00000004 alt_errno
00006608 g     F .text	000000c4 _fwalk
000007c4 g     F .text	00000084 .hidden __divsi3
000061d4 g     F .text	00000124 _malloc_trim_r
00010c0c g       *ABS*	00000000 __CTOR_END__
00007fe4 g     F .text	000000dc strcmp
00010c0c g       *ABS*	00000000 __flash_rodata_start
00010c0c g       *ABS*	00000000 __DTOR_LIST__
0000c190 g     F .text	00000088 .hidden __nedf2
0000e2d8 g     F .text	00000038 alt_irq_init
0000df80 g     F .text	00000084 alt_release_fd
00010c30 g     O .rodata	00000100 .hidden __clz_tab
00014700 g     O .bss	00000004 _PathLocale
00010878 g     F .text	00000014 atexit
00009850 g     F .text	00000060 _write_r
00006848 g     F .text	00000018 setlocale
00012ad0 g     O .rwdata	00000004 _impure_ptr
0001470c g     O .bss	00000004 alt_argc
00005b7c g     F .text	0000021c __sflush_r
0000fd44 g     F .text	00000060 _do_dtors
00006834 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000795c g     F .text	00000064 __ulp
000061bc g     F .text	00000018 __fp_unlock_all
00012ae4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006860 g     F .text	0000000c localeconv
0000fdc4 g     F .text	00000050 alt_ic_isr_register
00012b18 g       *ABS*	00000000 _edata
00014850 g       *ABS*	00000000 _end
00009ae4 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000f494 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000fe9c g     F .text	0000008c alt_ic_irq_disable
00007f04 g     F .text	0000007c __swrite
00012ad8 g     O .rwdata	00000004 __malloc_trim_threshold
00006828 g     F .text	0000000c __locale_msgcharset
0001088c g     F .text	00000038 exit
000066cc g     F .text	000000c4 _fwalk_reent
00007760 g     F .text	000001fc __mdiff
00000848 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006198 g     F .text	00000004 __sfp_lock_release
00010bd8 g     F .text	00000034 _exit
0000fab8 g     F .text	0000012c alt_alarm_start
0000686c g     F .text	000001bc __smakebuf_r
000080c0 g     F .text	00000098 strlen
000102ec g     F .text	0000015c open
0000c218 g     F .text	000000dc .hidden __gedf2
0000147c g     F .text	0000004c clock
00012ae0 g     O .rwdata	00000004 __wctomb
00008254 g     F .text	00000018 __sprint_r
0000fda4 g     F .text	00000020 alt_icache_flush_all
0000fe14 g     F .text	00000088 alt_ic_irq_enable
000040a0 g     F .text	0000001c __vfprintf_internal
0000acc8 g     F .text	0000005c _wctomb_r
0000ea04 g     F .text	00000138 alt_avalon_dma_prepare
0000cc54 g     F .text	000008fc .hidden __subdf3
00012af8 g     O .rwdata	00000008 alt_dma_rxchan_list
00007100 g     F .text	000000b0 __lo0bits
00012b10 g     O .rwdata	00000008 alt_alarm_list
0000fce4 g     F .text	00000060 _do_ctors
0000abd8 g     F .text	000000c0 wcrtomb
0000d6e8 g     F .text	000000d8 close
0000dbe0 g     F .text	00000084 alt_load
0000e974 g     F .text	00000048 alt_avalon_dma_tx_ioctl
00009c6c g     F .text	00000080 fputwc
000014dc g     F .text	00000014 free
0000619c g     F .text	00000004 __sinit_lock_acquire
00006e4c g     F .text	00000148 __multadd
00006e24 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	1091d404 	addi	r2,r2,18256
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	1091d404 	addi	r2,r2,18256
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a71617 	ldw	r2,-25512(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a71617 	ldw	r2,-25512(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6aab314 	ori	gp,gp,43724
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	1091bb14 	ori	r2,r2,18156

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18d21414 	ori	r3,r3,18512

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000dbe00 	call	dbe0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000dd7c0 	call	dd7c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
     278:	defff904 	addi	sp,sp,-28
     27c:	dfc00615 	stw	ra,24(sp)
     280:	df000515 	stw	fp,20(sp)
     284:	df000504 	addi	fp,sp,20
     288:	e13ffc15 	stw	r4,-16(fp)
     28c:	e17ffd15 	stw	r5,-12(fp)
     290:	e1bffe15 	stw	r6,-8(fp)
     294:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
     298:	e0bffc17 	ldw	r2,-16(fp)
     29c:	10000a26 	beq	r2,zero,2c8 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
     2a0:	e0bffc17 	ldw	r2,-16(fp)
     2a4:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
     2a8:	e0c00217 	ldw	r3,8(fp)
     2ac:	d8c00015 	stw	r3,0(sp)
     2b0:	e1ffff17 	ldw	r7,-4(fp)
     2b4:	e1bffe17 	ldw	r6,-8(fp)
     2b8:	e17ffd17 	ldw	r5,-12(fp)
     2bc:	e13ffc17 	ldw	r4,-16(fp)
     2c0:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
     2c4:	00000106 	br	2cc <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
     2c8:	00bffb44 	movi	r2,-19
}
     2cc:	e037883a 	mov	sp,fp
     2d0:	dfc00117 	ldw	ra,4(sp)
     2d4:	df000017 	ldw	fp,0(sp)
     2d8:	dec00204 	addi	sp,sp,8
     2dc:	f800283a 	ret

000002e0 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
     2e0:	defff904 	addi	sp,sp,-28
     2e4:	dfc00615 	stw	ra,24(sp)
     2e8:	df000515 	stw	fp,20(sp)
     2ec:	df000504 	addi	fp,sp,20
     2f0:	e13ffc15 	stw	r4,-16(fp)
     2f4:	e17ffd15 	stw	r5,-12(fp)
     2f8:	e1bffe15 	stw	r6,-8(fp)
     2fc:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
     300:	e0bffc17 	ldw	r2,-16(fp)
     304:	10000a26 	beq	r2,zero,330 <alt_dma_rxchan_prepare+0x50>
     308:	e0bffc17 	ldw	r2,-16(fp)
     30c:	10800417 	ldw	r2,16(r2)
     310:	e0c00217 	ldw	r3,8(fp)
     314:	d8c00015 	stw	r3,0(sp)
     318:	e1ffff17 	ldw	r7,-4(fp)
     31c:	e1bffe17 	ldw	r6,-8(fp)
     320:	e17ffd17 	ldw	r5,-12(fp)
     324:	e13ffc17 	ldw	r4,-16(fp)
     328:	103ee83a 	callr	r2
     32c:	00000106 	br	334 <alt_dma_rxchan_prepare+0x54>
     330:	00bffb44 	movi	r2,-19
}
     334:	e037883a 	mov	sp,fp
     338:	dfc00117 	ldw	ra,4(sp)
     33c:	df000017 	ldw	fp,0(sp)
     340:	dec00204 	addi	sp,sp,8
     344:	f800283a 	ret

00000348 <done>:
static volatile int rx_done = 0;
/*
* Callback function that obtains notification that the data
* is received.*/
static void done (void* handle, void* data)
{
     348:	defffd04 	addi	sp,sp,-12
     34c:	df000215 	stw	fp,8(sp)
     350:	df000204 	addi	fp,sp,8
     354:	e13ffe15 	stw	r4,-8(fp)
     358:	e17fff15 	stw	r5,-4(fp)
rx_done = 255;
     35c:	00803fc4 	movi	r2,255
     360:	d0a70815 	stw	r2,-25568(gp)
}
     364:	0001883a 	nop
     368:	e037883a 	mov	sp,fp
     36c:	df000017 	ldw	fp,0(sp)
     370:	dec00104 	addi	sp,sp,4
     374:	f800283a 	ret

00000378 <transfer>:


char transfer(void* from, void* to, alt_u32 size) {
     378:	defff504 	addi	sp,sp,-44
     37c:	dfc00a15 	stw	ra,40(sp)
     380:	df000915 	stw	fp,36(sp)
     384:	df000904 	addi	fp,sp,36
     388:	e13ffd15 	stw	r4,-12(fp)
     38c:	e17ffe15 	stw	r5,-8(fp)
     390:	e1bfff15 	stw	r6,-4(fp)

	int rc;
	alt_dma_txchan txchan;
	alt_dma_rxchan rxchan;
	void* tx_data = (void*) from; /* pointer to data to send */
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	e0bff815 	stw	r2,-32(fp)
	void* rx_buffer = (void*) to; /* pointer to rx buffer */
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	e0bff915 	stw	r2,-28(fp)
	/* Create the transmit channel */
	if ((txchan = alt_dma_txchan_open("/dev/dma_0")) == NULL) {
     3a4:	01000074 	movhi	r4,1
     3a8:	21030304 	addi	r4,r4,3084
     3ac:	000d8b80 	call	d8b8 <alt_dma_txchan_open>
     3b0:	e0bffa15 	stw	r2,-24(fp)
     3b4:	e0bffa17 	ldw	r2,-24(fp)
     3b8:	1000021e 	bne	r2,zero,3c4 <transfer+0x4c>
		return 255;
     3bc:	00bfffc4 	movi	r2,-1
     3c0:	00002306 	br	450 <transfer+0xd8>
	}
	/* Create the receive channel */
	if ((rxchan = alt_dma_rxchan_open("/dev/dma_0")) == NULL) {
     3c4:	01000074 	movhi	r4,1
     3c8:	21030304 	addi	r4,r4,3084
     3cc:	000d8280 	call	d828 <alt_dma_rxchan_open>
     3d0:	e0bffb15 	stw	r2,-20(fp)
     3d4:	e0bffb17 	ldw	r2,-20(fp)
     3d8:	1000021e 	bne	r2,zero,3e4 <transfer+0x6c>
		return 225;
     3dc:	00bff844 	movi	r2,-31
     3e0:	00001b06 	br	450 <transfer+0xd8>
	}
	/* Post the transmit request */
	if ((rc = alt_dma_txchan_send (txchan, tx_data,
     3e4:	d8000015 	stw	zero,0(sp)
     3e8:	000f883a 	mov	r7,zero
     3ec:	e1bfff17 	ldw	r6,-4(fp)
     3f0:	e17ff817 	ldw	r5,-32(fp)
     3f4:	e13ffa17 	ldw	r4,-24(fp)
     3f8:	00002780 	call	278 <alt_dma_txchan_send>
     3fc:	e0bffc15 	stw	r2,-16(fp)
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	1000020e 	bge	r2,zero,410 <transfer+0x98>
			size, NULL, NULL)) < 0) {
	//printf ("Failed to post transmit request, reason = %i\n", rc);
		return 225;
     408:	00bff844 	movi	r2,-31
     40c:	00001006 	br	450 <transfer+0xd8>
	}
	/* Post the receive request */
	if ((rc = alt_dma_rxchan_prepare (rxchan, rx_buffer,
     410:	d8000015 	stw	zero,0(sp)
     414:	01c00034 	movhi	r7,0
     418:	39c0d204 	addi	r7,r7,840
     41c:	e1bfff17 	ldw	r6,-4(fp)
     420:	e17ff917 	ldw	r5,-28(fp)
     424:	e13ffb17 	ldw	r4,-20(fp)
     428:	00002e00 	call	2e0 <alt_dma_rxchan_prepare>
     42c:	e0bffc15 	stw	r2,-16(fp)
     430:	e0bffc17 	ldw	r2,-16(fp)
     434:	1000020e 	bge	r2,zero,440 <transfer+0xc8>
			size, done, NULL)) < 0) {
	//printf ("Failed to post read request, reason = %i\n", rc);
		return 225;
     438:	00bff844 	movi	r2,-31
     43c:	00000406 	br	450 <transfer+0xd8>
	}
	/* wait for transfer to complete */
	while (!rx_done);
     440:	0001883a 	nop
     444:	d0a70817 	ldw	r2,-25568(gp)
     448:	103ffe26 	beq	r2,zero,444 <__alt_exception_stack_pointer+0xf8000444>
	//printf ("Transfer successful!\n");
	return 0;
     44c:	0005883a 	mov	r2,zero
}
     450:	e037883a 	mov	sp,fp
     454:	dfc00117 	ldw	ra,4(sp)
     458:	df000017 	ldw	fp,0(sp)
     45c:	dec00204 	addi	sp,sp,8
     460:	f800283a 	ret

00000464 <main>:

int main()
{
     464:	defff104 	addi	sp,sp,-60
     468:	dfc00e15 	stw	ra,56(sp)
     46c:	df000d15 	stw	fp,52(sp)
     470:	dc000c15 	stw	r16,48(sp)
     474:	df000d04 	addi	fp,sp,52
	int i = 0;
     478:	e03ff815 	stw	zero,-32(fp)
	int height = 0;
     47c:	e03ff315 	stw	zero,-52(fp)

	volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
     480:	00820034 	movhi	r2,2048
     484:	10840004 	addi	r2,r2,4096
     488:	e0bff915 	stw	r2,-28(fp)

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
     48c:	010003b4 	movhi	r4,14
     490:	21040004 	addi	r4,r4,4096
     494:	00014c80 	call	14c8 <malloc>
     498:	e0bffa15 	stw	r2,-24(fp)
//		frame1->D1[i*3+0] = 0;
//		frame1->D1[i*3+1] = 255;
//		frame1->D1[i*3+2] = 0;
//	}

	clock_t start = clock();
     49c:	000147c0 	call	147c <clock>
     4a0:	e0bffb15 	stw	r2,-20(fp)
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     4a4:	e03ff415 	stw	zero,-48(fp)
     4a8:	00003f06 	br	5a8 <main+0x144>
		for(int x =0; x < SCREEN_WIDTH; x++) {
     4ac:	e03ff515 	stw	zero,-44(fp)
     4b0:	00003706 	br	590 <main+0x12c>
			frame1->D1[(y*SCREEN_WIDTH + x)*3 + 0] = (y*255) / SCREEN_HEIGHT;
     4b4:	0140a004 	movi	r5,640
     4b8:	e13ff417 	ldw	r4,-48(fp)
     4bc:	00009780 	call	978 <__mulsi3>
     4c0:	1007883a 	mov	r3,r2
     4c4:	e0bff517 	ldw	r2,-44(fp)
     4c8:	1887883a 	add	r3,r3,r2
     4cc:	1805883a 	mov	r2,r3
     4d0:	1085883a 	add	r2,r2,r2
     4d4:	10e1883a 	add	r16,r2,r3
     4d8:	01403fc4 	movi	r5,255
     4dc:	e13ff417 	ldw	r4,-48(fp)
     4e0:	00009780 	call	978 <__mulsi3>
     4e4:	01407804 	movi	r5,480
     4e8:	1009883a 	mov	r4,r2
     4ec:	00007c40 	call	7c4 <__divsi3>
     4f0:	1007883a 	mov	r3,r2
     4f4:	e0bffa17 	ldw	r2,-24(fp)
     4f8:	1405883a 	add	r2,r2,r16
     4fc:	10c00005 	stb	r3,0(r2)
			frame1->D1[(y*SCREEN_WIDTH + x)*3 + 1] = (x*255) / SCREEN_WIDTH;
     500:	0140a004 	movi	r5,640
     504:	e13ff417 	ldw	r4,-48(fp)
     508:	00009780 	call	978 <__mulsi3>
     50c:	1007883a 	mov	r3,r2
     510:	e0bff517 	ldw	r2,-44(fp)
     514:	1887883a 	add	r3,r3,r2
     518:	1805883a 	mov	r2,r3
     51c:	1085883a 	add	r2,r2,r2
     520:	10c5883a 	add	r2,r2,r3
     524:	14000044 	addi	r16,r2,1
     528:	01403fc4 	movi	r5,255
     52c:	e13ff517 	ldw	r4,-44(fp)
     530:	00009780 	call	978 <__mulsi3>
     534:	0140a004 	movi	r5,640
     538:	1009883a 	mov	r4,r2
     53c:	00007c40 	call	7c4 <__divsi3>
     540:	1007883a 	mov	r3,r2
     544:	e0bffa17 	ldw	r2,-24(fp)
     548:	1405883a 	add	r2,r2,r16
     54c:	10c00005 	stb	r3,0(r2)
			frame1->D1[(y*SCREEN_WIDTH + x)*3 + 2] = 0;
     550:	0140a004 	movi	r5,640
     554:	e13ff417 	ldw	r4,-48(fp)
     558:	00009780 	call	978 <__mulsi3>
     55c:	1007883a 	mov	r3,r2
     560:	e0bff517 	ldw	r2,-44(fp)
     564:	1887883a 	add	r3,r3,r2
     568:	1805883a 	mov	r2,r3
     56c:	1085883a 	add	r2,r2,r2
     570:	10c5883a 	add	r2,r2,r3
     574:	10800084 	addi	r2,r2,2
     578:	e0fffa17 	ldw	r3,-24(fp)
     57c:	1885883a 	add	r2,r3,r2
     580:	10000005 	stb	zero,0(r2)
//		frame1->D1[i*3+2] = 0;
//	}

	clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
		for(int x =0; x < SCREEN_WIDTH; x++) {
     584:	e0bff517 	ldw	r2,-44(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bff515 	stw	r2,-44(fp)
     590:	e0bff517 	ldw	r2,-44(fp)
     594:	1080a010 	cmplti	r2,r2,640
     598:	103fc61e 	bne	r2,zero,4b4 <__alt_exception_stack_pointer+0xf80004b4>
//		frame1->D1[i*3+1] = 255;
//		frame1->D1[i*3+2] = 0;
//	}

	clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     59c:	e0bff417 	ldw	r2,-48(fp)
     5a0:	10800044 	addi	r2,r2,1
     5a4:	e0bff415 	stw	r2,-48(fp)
     5a8:	e0bff417 	ldw	r2,-48(fp)
     5ac:	10807810 	cmplti	r2,r2,480
     5b0:	103fbe1e 	bne	r2,zero,4ac <__alt_exception_stack_pointer+0xf80004ac>
			frame1->D1[(y*SCREEN_WIDTH + x)*3 + 1] = (x*255) / SCREEN_WIDTH;
			frame1->D1[(y*SCREEN_WIDTH + x)*3 + 2] = 0;

		}
	}
	clock_t stop = clock();
     5b4:	000147c0 	call	147c <clock>
     5b8:	e0bffc15 	stw	r2,-16(fp)
	double time_spent = (double)(stop - start) / CLOCKS_PER_SEC;
     5bc:	e0fffc17 	ldw	r3,-16(fp)
     5c0:	e0bffb17 	ldw	r2,-20(fp)
     5c4:	1885c83a 	sub	r2,r3,r2
     5c8:	1009883a 	mov	r4,r2
     5cc:	00013700 	call	1370 <__floatunsidf>
     5d0:	1011883a 	mov	r8,r2
     5d4:	1813883a 	mov	r9,r3
     5d8:	000d883a 	mov	r6,zero
     5dc:	01d023f4 	movhi	r7,16527
     5e0:	39d00004 	addi	r7,r7,16384
     5e4:	4009883a 	mov	r4,r8
     5e8:	480b883a 	mov	r5,r9
     5ec:	00009a00 	call	9a0 <__divdf3>
     5f0:	1009883a 	mov	r4,r2
     5f4:	180b883a 	mov	r5,r3
     5f8:	e13ffd15 	stw	r4,-12(fp)
     5fc:	e17ffe15 	stw	r5,-8(fp)
	printf("%f\n", time_spent);
     600:	e17ffd17 	ldw	r5,-12(fp)
     604:	e1bffe17 	ldw	r6,-8(fp)
     608:	01000074 	movhi	r4,1
     60c:	21030604 	addi	r4,r4,3096
     610:	0001d2c0 	call	1d2c <printf>

	height = 0;
     614:	e03ff315 	stw	zero,-52(fp)
	transfer(frame1->D2[height], vga_cont->line2, 1920);
     618:	0141e004 	movi	r5,1920
     61c:	e13ff317 	ldw	r4,-52(fp)
     620:	00009780 	call	978 <__mulsi3>
     624:	1007883a 	mov	r3,r2
     628:	e0bffa17 	ldw	r2,-24(fp)
     62c:	10c7883a 	add	r3,r2,r3
     630:	e0bff917 	ldw	r2,-28(fp)
     634:	10820004 	addi	r2,r2,2048
     638:	0181e004 	movi	r6,1920
     63c:	100b883a 	mov	r5,r2
     640:	1809883a 	mov	r4,r3
     644:	00003780 	call	378 <transfer>
	transfer(frame1->D2[height], vga_cont->line1, 1920);
     648:	0141e004 	movi	r5,1920
     64c:	e13ff317 	ldw	r4,-52(fp)
     650:	00009780 	call	978 <__mulsi3>
     654:	1007883a 	mov	r3,r2
     658:	e0bffa17 	ldw	r2,-24(fp)
     65c:	10c5883a 	add	r2,r2,r3
     660:	e0fff917 	ldw	r3,-28(fp)
     664:	0181e004 	movi	r6,1920
     668:	180b883a 	mov	r5,r3
     66c:	1009883a 	mov	r4,r2
     670:	00003780 	call	378 <transfer>


	int flag = 0;
     674:	e03ff615 	stw	zero,-40(fp)
	int draw_index = 0;
     678:	e03ff715 	stw	zero,-36(fp)
    while(1) {
    	if(draw_index >= 480*640*3) {
     67c:	e0fff717 	ldw	r3,-36(fp)
     680:	008003b4 	movhi	r2,14
     684:	1083ffc4 	addi	r2,r2,4095
     688:	10c0010e 	bge	r2,r3,690 <main+0x22c>
    		draw_index = 0;
     68c:	e03ff715 	stw	zero,-36(fp)
    	}
        if(vga_cont->needs_write >= 1) {
     690:	e0bff917 	ldw	r2,-28(fp)
     694:	1081e043 	ldbu	r2,1921(r2)
     698:	10803fcc 	andi	r2,r2,255
     69c:	1080201c 	xori	r2,r2,128
     6a0:	10bfe004 	addi	r2,r2,-128
     6a4:	00bff50e 	bge	zero,r2,67c <__alt_exception_stack_pointer+0xf800067c>
            if(vga_cont->rendering_frame == 0) { // Write to line 0
     6a8:	e0bff917 	ldw	r2,-28(fp)
     6ac:	1081e003 	ldbu	r2,1920(r2)
     6b0:	10803fcc 	andi	r2,r2,255
     6b4:	1080201c 	xori	r2,r2,128
     6b8:	10bfe004 	addi	r2,r2,-128
     6bc:	10000c1e 	bne	r2,zero,6f0 <main+0x28c>

            	//if(height % 200 == 0) {
            		//clock_t start = clock();
            		transfer(frame1->D2[height], vga_cont->line1, 1920);
     6c0:	0141e004 	movi	r5,1920
     6c4:	e13ff317 	ldw	r4,-52(fp)
     6c8:	00009780 	call	978 <__mulsi3>
     6cc:	1007883a 	mov	r3,r2
     6d0:	e0bffa17 	ldw	r2,-24(fp)
     6d4:	10c5883a 	add	r2,r2,r3
     6d8:	e0fff917 	ldw	r3,-28(fp)
     6dc:	0181e004 	movi	r6,1920
     6e0:	180b883a 	mov	r5,r3
     6e4:	1009883a 	mov	r4,r2
     6e8:	00003780 	call	378 <transfer>
     6ec:	00000c06 	br	720 <main+0x2bc>
//        		if(flag < 50)
//        			printf("%f\n", time_spent);
//        		flag++;
                //temp = 1;
            } else { // Write to line 1
            	transfer(frame1->D2[height], vga_cont->line2, 1920);
     6f0:	0141e004 	movi	r5,1920
     6f4:	e13ff317 	ldw	r4,-52(fp)
     6f8:	00009780 	call	978 <__mulsi3>
     6fc:	1007883a 	mov	r3,r2
     700:	e0bffa17 	ldw	r2,-24(fp)
     704:	10c7883a 	add	r3,r2,r3
     708:	e0bff917 	ldw	r2,-28(fp)
     70c:	10820004 	addi	r2,r2,2048
     710:	0181e004 	movi	r6,1920
     714:	100b883a 	mov	r5,r2
     718:	1809883a 	mov	r4,r3
     71c:	00003780 	call	378 <transfer>
//                    vga_cont->line1[i*3+1] = frame1->D1[draw_index++];
//                    vga_cont->line1[i*3+2] = frame1->D1[draw_index++];
//                }
                //temp = 0;
            }
            if(flag < 10 & vga_cont->needs_write > 1) {
     720:	e0bff617 	ldw	r2,-40(fp)
     724:	10800290 	cmplti	r2,r2,10
     728:	1007883a 	mov	r3,r2
     72c:	e0bff917 	ldw	r2,-28(fp)
     730:	1081e043 	ldbu	r2,1921(r2)
     734:	10803fcc 	andi	r2,r2,255
     738:	1080201c 	xori	r2,r2,128
     73c:	10bfe004 	addi	r2,r2,-128
     740:	10800088 	cmpgei	r2,r2,2
     744:	1884703a 	and	r2,r3,r2
     748:	10803fcc 	andi	r2,r2,255
     74c:	10000f26 	beq	r2,zero,78c <main+0x328>
            	printf("Missed frame");
     750:	01000074 	movhi	r4,1
     754:	21030704 	addi	r4,r4,3100
     758:	0001d2c0 	call	1d2c <printf>
            	printf("%d\n", vga_cont->needs_write);
     75c:	e0bff917 	ldw	r2,-28(fp)
     760:	1081e043 	ldbu	r2,1921(r2)
     764:	10803fcc 	andi	r2,r2,255
     768:	1080201c 	xori	r2,r2,128
     76c:	10bfe004 	addi	r2,r2,-128
     770:	100b883a 	mov	r5,r2
     774:	01000074 	movhi	r4,1
     778:	21030b04 	addi	r4,r4,3116
     77c:	0001d2c0 	call	1d2c <printf>
            	flag++;
     780:	e0bff617 	ldw	r2,-40(fp)
     784:	10800044 	addi	r2,r2,1
     788:	e0bff615 	stw	r2,-40(fp)
            }
            height = (height + vga_cont->needs_write) % SCREEN_HEIGHT;
     78c:	e0bff917 	ldw	r2,-28(fp)
     790:	1081e043 	ldbu	r2,1921(r2)
     794:	10c03fcc 	andi	r3,r2,255
     798:	18c0201c 	xori	r3,r3,128
     79c:	18ffe004 	addi	r3,r3,-128
     7a0:	e0bff317 	ldw	r2,-52(fp)
     7a4:	1885883a 	add	r2,r3,r2
     7a8:	01407804 	movi	r5,480
     7ac:	1009883a 	mov	r4,r2
     7b0:	00008480 	call	848 <__modsi3>
     7b4:	e0bff315 	stw	r2,-52(fp)
            vga_cont->needs_write = 0;
     7b8:	e0bff917 	ldw	r2,-28(fp)
     7bc:	1001e045 	stb	zero,1921(r2)

        }
    }
     7c0:	003fae06 	br	67c <__alt_exception_stack_pointer+0xf800067c>

000007c4 <__divsi3>:
     7c4:	20001b16 	blt	r4,zero,834 <__divsi3+0x70>
     7c8:	000f883a 	mov	r7,zero
     7cc:	28001616 	blt	r5,zero,828 <__divsi3+0x64>
     7d0:	200d883a 	mov	r6,r4
     7d4:	29001a2e 	bgeu	r5,r4,840 <__divsi3+0x7c>
     7d8:	00800804 	movi	r2,32
     7dc:	00c00044 	movi	r3,1
     7e0:	00000106 	br	7e8 <__divsi3+0x24>
     7e4:	10000d26 	beq	r2,zero,81c <__divsi3+0x58>
     7e8:	294b883a 	add	r5,r5,r5
     7ec:	10bfffc4 	addi	r2,r2,-1
     7f0:	18c7883a 	add	r3,r3,r3
     7f4:	293ffb36 	bltu	r5,r4,7e4 <__alt_exception_stack_pointer+0xf80007e4>
     7f8:	0005883a 	mov	r2,zero
     7fc:	18000726 	beq	r3,zero,81c <__divsi3+0x58>
     800:	0005883a 	mov	r2,zero
     804:	31400236 	bltu	r6,r5,810 <__divsi3+0x4c>
     808:	314dc83a 	sub	r6,r6,r5
     80c:	10c4b03a 	or	r2,r2,r3
     810:	1806d07a 	srli	r3,r3,1
     814:	280ad07a 	srli	r5,r5,1
     818:	183ffa1e 	bne	r3,zero,804 <__alt_exception_stack_pointer+0xf8000804>
     81c:	38000126 	beq	r7,zero,824 <__divsi3+0x60>
     820:	0085c83a 	sub	r2,zero,r2
     824:	f800283a 	ret
     828:	014bc83a 	sub	r5,zero,r5
     82c:	39c0005c 	xori	r7,r7,1
     830:	003fe706 	br	7d0 <__alt_exception_stack_pointer+0xf80007d0>
     834:	0109c83a 	sub	r4,zero,r4
     838:	01c00044 	movi	r7,1
     83c:	003fe306 	br	7cc <__alt_exception_stack_pointer+0xf80007cc>
     840:	00c00044 	movi	r3,1
     844:	003fee06 	br	800 <__alt_exception_stack_pointer+0xf8000800>

00000848 <__modsi3>:
     848:	20001716 	blt	r4,zero,8a8 <__modsi3+0x60>
     84c:	000f883a 	mov	r7,zero
     850:	2005883a 	mov	r2,r4
     854:	28001216 	blt	r5,zero,8a0 <__modsi3+0x58>
     858:	2900162e 	bgeu	r5,r4,8b4 <__modsi3+0x6c>
     85c:	01800804 	movi	r6,32
     860:	00c00044 	movi	r3,1
     864:	00000106 	br	86c <__modsi3+0x24>
     868:	30000a26 	beq	r6,zero,894 <__modsi3+0x4c>
     86c:	294b883a 	add	r5,r5,r5
     870:	31bfffc4 	addi	r6,r6,-1
     874:	18c7883a 	add	r3,r3,r3
     878:	293ffb36 	bltu	r5,r4,868 <__alt_exception_stack_pointer+0xf8000868>
     87c:	18000526 	beq	r3,zero,894 <__modsi3+0x4c>
     880:	1806d07a 	srli	r3,r3,1
     884:	11400136 	bltu	r2,r5,88c <__modsi3+0x44>
     888:	1145c83a 	sub	r2,r2,r5
     88c:	280ad07a 	srli	r5,r5,1
     890:	183ffb1e 	bne	r3,zero,880 <__alt_exception_stack_pointer+0xf8000880>
     894:	38000126 	beq	r7,zero,89c <__modsi3+0x54>
     898:	0085c83a 	sub	r2,zero,r2
     89c:	f800283a 	ret
     8a0:	014bc83a 	sub	r5,zero,r5
     8a4:	003fec06 	br	858 <__alt_exception_stack_pointer+0xf8000858>
     8a8:	0109c83a 	sub	r4,zero,r4
     8ac:	01c00044 	movi	r7,1
     8b0:	003fe706 	br	850 <__alt_exception_stack_pointer+0xf8000850>
     8b4:	00c00044 	movi	r3,1
     8b8:	003ff106 	br	880 <__alt_exception_stack_pointer+0xf8000880>

000008bc <__udivsi3>:
     8bc:	200d883a 	mov	r6,r4
     8c0:	2900152e 	bgeu	r5,r4,918 <__udivsi3+0x5c>
     8c4:	28001416 	blt	r5,zero,918 <__udivsi3+0x5c>
     8c8:	00800804 	movi	r2,32
     8cc:	00c00044 	movi	r3,1
     8d0:	00000206 	br	8dc <__udivsi3+0x20>
     8d4:	10000e26 	beq	r2,zero,910 <__udivsi3+0x54>
     8d8:	28000516 	blt	r5,zero,8f0 <__udivsi3+0x34>
     8dc:	294b883a 	add	r5,r5,r5
     8e0:	10bfffc4 	addi	r2,r2,-1
     8e4:	18c7883a 	add	r3,r3,r3
     8e8:	293ffa36 	bltu	r5,r4,8d4 <__alt_exception_stack_pointer+0xf80008d4>
     8ec:	18000826 	beq	r3,zero,910 <__udivsi3+0x54>
     8f0:	0005883a 	mov	r2,zero
     8f4:	31400236 	bltu	r6,r5,900 <__udivsi3+0x44>
     8f8:	314dc83a 	sub	r6,r6,r5
     8fc:	10c4b03a 	or	r2,r2,r3
     900:	1806d07a 	srli	r3,r3,1
     904:	280ad07a 	srli	r5,r5,1
     908:	183ffa1e 	bne	r3,zero,8f4 <__alt_exception_stack_pointer+0xf80008f4>
     90c:	f800283a 	ret
     910:	0005883a 	mov	r2,zero
     914:	f800283a 	ret
     918:	00c00044 	movi	r3,1
     91c:	003ff406 	br	8f0 <__alt_exception_stack_pointer+0xf80008f0>

00000920 <__umodsi3>:
     920:	2005883a 	mov	r2,r4
     924:	2900122e 	bgeu	r5,r4,970 <__umodsi3+0x50>
     928:	28001116 	blt	r5,zero,970 <__umodsi3+0x50>
     92c:	01800804 	movi	r6,32
     930:	00c00044 	movi	r3,1
     934:	00000206 	br	940 <__umodsi3+0x20>
     938:	30000c26 	beq	r6,zero,96c <__umodsi3+0x4c>
     93c:	28000516 	blt	r5,zero,954 <__umodsi3+0x34>
     940:	294b883a 	add	r5,r5,r5
     944:	31bfffc4 	addi	r6,r6,-1
     948:	18c7883a 	add	r3,r3,r3
     94c:	293ffa36 	bltu	r5,r4,938 <__alt_exception_stack_pointer+0xf8000938>
     950:	18000626 	beq	r3,zero,96c <__umodsi3+0x4c>
     954:	1806d07a 	srli	r3,r3,1
     958:	11400136 	bltu	r2,r5,960 <__umodsi3+0x40>
     95c:	1145c83a 	sub	r2,r2,r5
     960:	280ad07a 	srli	r5,r5,1
     964:	183ffb1e 	bne	r3,zero,954 <__alt_exception_stack_pointer+0xf8000954>
     968:	f800283a 	ret
     96c:	f800283a 	ret
     970:	00c00044 	movi	r3,1
     974:	003ff706 	br	954 <__alt_exception_stack_pointer+0xf8000954>

00000978 <__mulsi3>:
     978:	0005883a 	mov	r2,zero
     97c:	20000726 	beq	r4,zero,99c <__mulsi3+0x24>
     980:	20c0004c 	andi	r3,r4,1
     984:	2008d07a 	srli	r4,r4,1
     988:	18000126 	beq	r3,zero,990 <__mulsi3+0x18>
     98c:	1145883a 	add	r2,r2,r5
     990:	294b883a 	add	r5,r5,r5
     994:	203ffa1e 	bne	r4,zero,980 <__alt_exception_stack_pointer+0xf8000980>
     998:	f800283a 	ret
     99c:	f800283a 	ret

000009a0 <__divdf3>:
     9a0:	defff004 	addi	sp,sp,-64
     9a4:	dc800815 	stw	r18,32(sp)
     9a8:	2824d53a 	srli	r18,r5,20
     9ac:	dd800c15 	stw	r22,48(sp)
     9b0:	282cd7fa 	srli	r22,r5,31
     9b4:	dc000615 	stw	r16,24(sp)
     9b8:	04000434 	movhi	r16,16
     9bc:	843fffc4 	addi	r16,r16,-1
     9c0:	dfc00f15 	stw	ra,60(sp)
     9c4:	df000e15 	stw	fp,56(sp)
     9c8:	ddc00d15 	stw	r23,52(sp)
     9cc:	dd400b15 	stw	r21,44(sp)
     9d0:	dd000a15 	stw	r20,40(sp)
     9d4:	dcc00915 	stw	r19,36(sp)
     9d8:	dc400715 	stw	r17,28(sp)
     9dc:	9481ffcc 	andi	r18,r18,2047
     9e0:	2c20703a 	and	r16,r5,r16
     9e4:	b2003fcc 	andi	r8,r22,255
     9e8:	90006126 	beq	r18,zero,b70 <__divdf3+0x1d0>
     9ec:	0081ffc4 	movi	r2,2047
     9f0:	202b883a 	mov	r21,r4
     9f4:	90803726 	beq	r18,r2,ad4 <__divdf3+0x134>
     9f8:	80800434 	orhi	r2,r16,16
     9fc:	100490fa 	slli	r2,r2,3
     a00:	2020d77a 	srli	r16,r4,29
     a04:	202a90fa 	slli	r21,r4,3
     a08:	94bf0044 	addi	r18,r18,-1023
     a0c:	80a0b03a 	or	r16,r16,r2
     a10:	0013883a 	mov	r9,zero
     a14:	000b883a 	mov	r5,zero
     a18:	3806d53a 	srli	r3,r7,20
     a1c:	382ed7fa 	srli	r23,r7,31
     a20:	04400434 	movhi	r17,16
     a24:	8c7fffc4 	addi	r17,r17,-1
     a28:	18c1ffcc 	andi	r3,r3,2047
     a2c:	3029883a 	mov	r20,r6
     a30:	3c62703a 	and	r17,r7,r17
     a34:	bf003fcc 	andi	fp,r23,255
     a38:	18006e26 	beq	r3,zero,bf4 <__divdf3+0x254>
     a3c:	0081ffc4 	movi	r2,2047
     a40:	18806626 	beq	r3,r2,bdc <__divdf3+0x23c>
     a44:	88800434 	orhi	r2,r17,16
     a48:	100490fa 	slli	r2,r2,3
     a4c:	3022d77a 	srli	r17,r6,29
     a50:	302890fa 	slli	r20,r6,3
     a54:	18ff0044 	addi	r3,r3,-1023
     a58:	88a2b03a 	or	r17,r17,r2
     a5c:	000f883a 	mov	r7,zero
     a60:	b5e6f03a 	xor	r19,r22,r23
     a64:	3a4cb03a 	or	r6,r7,r9
     a68:	008003c4 	movi	r2,15
     a6c:	9809883a 	mov	r4,r19
     a70:	90c7c83a 	sub	r3,r18,r3
     a74:	9cc03fcc 	andi	r19,r19,255
     a78:	11809636 	bltu	r2,r6,cd4 <__divdf3+0x334>
     a7c:	300c90ba 	slli	r6,r6,2
     a80:	00800034 	movhi	r2,0
     a84:	1082a504 	addi	r2,r2,2708
     a88:	308d883a 	add	r6,r6,r2
     a8c:	30800017 	ldw	r2,0(r6)
     a90:	1000683a 	jmp	r2
     a94:	00000cd4 	movui	zero,51
     a98:	00000b0c 	andi	zero,zero,44
     a9c:	00000cc4 	movi	zero,51
     aa0:	00000b00 	call	b0 <__flash_exceptions_start+0x90>
     aa4:	00000cc4 	movi	zero,51
     aa8:	00000c98 	cmpnei	zero,zero,50
     aac:	00000cc4 	movi	zero,51
     ab0:	00000b00 	call	b0 <__flash_exceptions_start+0x90>
     ab4:	00000b0c 	andi	zero,zero,44
     ab8:	00000b0c 	andi	zero,zero,44
     abc:	00000c98 	cmpnei	zero,zero,50
     ac0:	00000b00 	call	b0 <__flash_exceptions_start+0x90>
     ac4:	00000af0 	cmpltui	zero,zero,43
     ac8:	00000af0 	cmpltui	zero,zero,43
     acc:	00000af0 	cmpltui	zero,zero,43
     ad0:	0000105c 	xori	zero,zero,65
     ad4:	2404b03a 	or	r2,r4,r16
     ad8:	10006c1e 	bne	r2,zero,c8c <__divdf3+0x2ec>
     adc:	02400204 	movi	r9,8
     ae0:	0021883a 	mov	r16,zero
     ae4:	002b883a 	mov	r21,zero
     ae8:	01400084 	movi	r5,2
     aec:	003fca06 	br	a18 <__alt_exception_stack_pointer+0xf8000a18>
     af0:	8023883a 	mov	r17,r16
     af4:	a829883a 	mov	r20,r21
     af8:	4039883a 	mov	fp,r8
     afc:	280f883a 	mov	r7,r5
     b00:	00800084 	movi	r2,2
     b04:	3881601e 	bne	r7,r2,1088 <__divdf3+0x6e8>
     b08:	e027883a 	mov	r19,fp
     b0c:	9900004c 	andi	r4,r19,1
     b10:	0081ffc4 	movi	r2,2047
     b14:	0021883a 	mov	r16,zero
     b18:	002b883a 	mov	r21,zero
     b1c:	1004953a 	slli	r2,r2,20
     b20:	20c03fcc 	andi	r3,r4,255
     b24:	01400434 	movhi	r5,16
     b28:	297fffc4 	addi	r5,r5,-1
     b2c:	180697fa 	slli	r3,r3,31
     b30:	8160703a 	and	r16,r16,r5
     b34:	80a0b03a 	or	r16,r16,r2
     b38:	80c6b03a 	or	r3,r16,r3
     b3c:	a805883a 	mov	r2,r21
     b40:	dfc00f17 	ldw	ra,60(sp)
     b44:	df000e17 	ldw	fp,56(sp)
     b48:	ddc00d17 	ldw	r23,52(sp)
     b4c:	dd800c17 	ldw	r22,48(sp)
     b50:	dd400b17 	ldw	r21,44(sp)
     b54:	dd000a17 	ldw	r20,40(sp)
     b58:	dcc00917 	ldw	r19,36(sp)
     b5c:	dc800817 	ldw	r18,32(sp)
     b60:	dc400717 	ldw	r17,28(sp)
     b64:	dc000617 	ldw	r16,24(sp)
     b68:	dec01004 	addi	sp,sp,64
     b6c:	f800283a 	ret
     b70:	2404b03a 	or	r2,r4,r16
     b74:	2023883a 	mov	r17,r4
     b78:	10003f26 	beq	r2,zero,c78 <__divdf3+0x2d8>
     b7c:	80015e26 	beq	r16,zero,10f8 <__divdf3+0x758>
     b80:	8009883a 	mov	r4,r16
     b84:	d9800215 	stw	r6,8(sp)
     b88:	d9c00515 	stw	r7,20(sp)
     b8c:	da000415 	stw	r8,16(sp)
     b90:	00014180 	call	1418 <__clzsi2>
     b94:	d9800217 	ldw	r6,8(sp)
     b98:	d9c00517 	ldw	r7,20(sp)
     b9c:	da000417 	ldw	r8,16(sp)
     ba0:	113ffd44 	addi	r4,r2,-11
     ba4:	00c00704 	movi	r3,28
     ba8:	19014f16 	blt	r3,r4,10e8 <__divdf3+0x748>
     bac:	00c00744 	movi	r3,29
     bb0:	157ffe04 	addi	r21,r2,-8
     bb4:	1907c83a 	sub	r3,r3,r4
     bb8:	8560983a 	sll	r16,r16,r21
     bbc:	88c6d83a 	srl	r3,r17,r3
     bc0:	8d6a983a 	sll	r21,r17,r21
     bc4:	1c20b03a 	or	r16,r3,r16
     bc8:	1080fcc4 	addi	r2,r2,1011
     bcc:	00a5c83a 	sub	r18,zero,r2
     bd0:	0013883a 	mov	r9,zero
     bd4:	000b883a 	mov	r5,zero
     bd8:	003f8f06 	br	a18 <__alt_exception_stack_pointer+0xf8000a18>
     bdc:	3444b03a 	or	r2,r6,r17
     be0:	1000231e 	bne	r2,zero,c70 <__divdf3+0x2d0>
     be4:	0023883a 	mov	r17,zero
     be8:	0029883a 	mov	r20,zero
     bec:	01c00084 	movi	r7,2
     bf0:	003f9b06 	br	a60 <__alt_exception_stack_pointer+0xf8000a60>
     bf4:	3444b03a 	or	r2,r6,r17
     bf8:	10001926 	beq	r2,zero,c60 <__divdf3+0x2c0>
     bfc:	88014b26 	beq	r17,zero,112c <__divdf3+0x78c>
     c00:	8809883a 	mov	r4,r17
     c04:	d9400115 	stw	r5,4(sp)
     c08:	d9800215 	stw	r6,8(sp)
     c0c:	da000415 	stw	r8,16(sp)
     c10:	da400315 	stw	r9,12(sp)
     c14:	00014180 	call	1418 <__clzsi2>
     c18:	d9400117 	ldw	r5,4(sp)
     c1c:	d9800217 	ldw	r6,8(sp)
     c20:	da000417 	ldw	r8,16(sp)
     c24:	da400317 	ldw	r9,12(sp)
     c28:	113ffd44 	addi	r4,r2,-11
     c2c:	00c00704 	movi	r3,28
     c30:	19013a16 	blt	r3,r4,111c <__divdf3+0x77c>
     c34:	00c00744 	movi	r3,29
     c38:	153ffe04 	addi	r20,r2,-8
     c3c:	1907c83a 	sub	r3,r3,r4
     c40:	8d22983a 	sll	r17,r17,r20
     c44:	30c6d83a 	srl	r3,r6,r3
     c48:	3528983a 	sll	r20,r6,r20
     c4c:	1c62b03a 	or	r17,r3,r17
     c50:	1080fcc4 	addi	r2,r2,1011
     c54:	0087c83a 	sub	r3,zero,r2
     c58:	000f883a 	mov	r7,zero
     c5c:	003f8006 	br	a60 <__alt_exception_stack_pointer+0xf8000a60>
     c60:	0023883a 	mov	r17,zero
     c64:	0029883a 	mov	r20,zero
     c68:	01c00044 	movi	r7,1
     c6c:	003f7c06 	br	a60 <__alt_exception_stack_pointer+0xf8000a60>
     c70:	01c000c4 	movi	r7,3
     c74:	003f7a06 	br	a60 <__alt_exception_stack_pointer+0xf8000a60>
     c78:	02400104 	movi	r9,4
     c7c:	0021883a 	mov	r16,zero
     c80:	002b883a 	mov	r21,zero
     c84:	01400044 	movi	r5,1
     c88:	003f6306 	br	a18 <__alt_exception_stack_pointer+0xf8000a18>
     c8c:	02400304 	movi	r9,12
     c90:	014000c4 	movi	r5,3
     c94:	003f6006 	br	a18 <__alt_exception_stack_pointer+0xf8000a18>
     c98:	04000434 	movhi	r16,16
     c9c:	0009883a 	mov	r4,zero
     ca0:	843fffc4 	addi	r16,r16,-1
     ca4:	057fffc4 	movi	r21,-1
     ca8:	0081ffc4 	movi	r2,2047
     cac:	003f9b06 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
     cb0:	00c00044 	movi	r3,1
     cb4:	1887c83a 	sub	r3,r3,r2
     cb8:	01000e04 	movi	r4,56
     cbc:	20c1530e 	bge	r4,r3,120c <__divdf3+0x86c>
     cc0:	9900004c 	andi	r4,r19,1
     cc4:	0005883a 	mov	r2,zero
     cc8:	0021883a 	mov	r16,zero
     ccc:	002b883a 	mov	r21,zero
     cd0:	003f9206 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
     cd4:	8c012e36 	bltu	r17,r16,1190 <__divdf3+0x7f0>
     cd8:	84412c26 	beq	r16,r17,118c <__divdf3+0x7ec>
     cdc:	a82f883a 	mov	r23,r21
     ce0:	18ffffc4 	addi	r3,r3,-1
     ce4:	002b883a 	mov	r21,zero
     ce8:	a004d63a 	srli	r2,r20,24
     cec:	8822923a 	slli	r17,r17,8
     cf0:	a028923a 	slli	r20,r20,8
     cf4:	8009883a 	mov	r4,r16
     cf8:	88acb03a 	or	r22,r17,r2
     cfc:	dd000015 	stw	r20,0(sp)
     d00:	b028d43a 	srli	r20,r22,16
     d04:	d8c00215 	stw	r3,8(sp)
     d08:	b4bfffcc 	andi	r18,r22,65535
     d0c:	a00b883a 	mov	r5,r20
     d10:	00008bc0 	call	8bc <__udivsi3>
     d14:	100b883a 	mov	r5,r2
     d18:	9009883a 	mov	r4,r18
     d1c:	1023883a 	mov	r17,r2
     d20:	00009780 	call	978 <__mulsi3>
     d24:	8009883a 	mov	r4,r16
     d28:	a00b883a 	mov	r5,r20
     d2c:	1039883a 	mov	fp,r2
     d30:	00009200 	call	920 <__umodsi3>
     d34:	1004943a 	slli	r2,r2,16
     d38:	b808d43a 	srli	r4,r23,16
     d3c:	d8c00217 	ldw	r3,8(sp)
     d40:	2084b03a 	or	r2,r4,r2
     d44:	1700062e 	bgeu	r2,fp,d60 <__divdf3+0x3c0>
     d48:	1585883a 	add	r2,r2,r22
     d4c:	893fffc4 	addi	r4,r17,-1
     d50:	15811d36 	bltu	r2,r22,11c8 <__divdf3+0x828>
     d54:	17011c2e 	bgeu	r2,fp,11c8 <__divdf3+0x828>
     d58:	8c7fff84 	addi	r17,r17,-2
     d5c:	1585883a 	add	r2,r2,r22
     d60:	1739c83a 	sub	fp,r2,fp
     d64:	a00b883a 	mov	r5,r20
     d68:	e009883a 	mov	r4,fp
     d6c:	d8c00215 	stw	r3,8(sp)
     d70:	00008bc0 	call	8bc <__udivsi3>
     d74:	100b883a 	mov	r5,r2
     d78:	9009883a 	mov	r4,r18
     d7c:	1021883a 	mov	r16,r2
     d80:	00009780 	call	978 <__mulsi3>
     d84:	a00b883a 	mov	r5,r20
     d88:	e009883a 	mov	r4,fp
     d8c:	d8800415 	stw	r2,16(sp)
     d90:	00009200 	call	920 <__umodsi3>
     d94:	1004943a 	slli	r2,r2,16
     d98:	da000417 	ldw	r8,16(sp)
     d9c:	bdffffcc 	andi	r23,r23,65535
     da0:	b884b03a 	or	r2,r23,r2
     da4:	d8c00217 	ldw	r3,8(sp)
     da8:	1200062e 	bgeu	r2,r8,dc4 <__divdf3+0x424>
     dac:	1585883a 	add	r2,r2,r22
     db0:	813fffc4 	addi	r4,r16,-1
     db4:	15810236 	bltu	r2,r22,11c0 <__divdf3+0x820>
     db8:	1201012e 	bgeu	r2,r8,11c0 <__divdf3+0x820>
     dbc:	843fff84 	addi	r16,r16,-2
     dc0:	1585883a 	add	r2,r2,r22
     dc4:	8822943a 	slli	r17,r17,16
     dc8:	d9800017 	ldw	r6,0(sp)
     dcc:	1211c83a 	sub	r8,r2,r8
     dd0:	8c22b03a 	or	r17,r17,r16
     dd4:	373fffcc 	andi	fp,r6,65535
     dd8:	8abfffcc 	andi	r10,r17,65535
     ddc:	8820d43a 	srli	r16,r17,16
     de0:	5009883a 	mov	r4,r10
     de4:	e00b883a 	mov	r5,fp
     de8:	302ed43a 	srli	r23,r6,16
     dec:	d8c00215 	stw	r3,8(sp)
     df0:	da000415 	stw	r8,16(sp)
     df4:	da800115 	stw	r10,4(sp)
     df8:	00009780 	call	978 <__mulsi3>
     dfc:	800b883a 	mov	r5,r16
     e00:	e009883a 	mov	r4,fp
     e04:	d8800515 	stw	r2,20(sp)
     e08:	00009780 	call	978 <__mulsi3>
     e0c:	8009883a 	mov	r4,r16
     e10:	b80b883a 	mov	r5,r23
     e14:	d8800315 	stw	r2,12(sp)
     e18:	00009780 	call	978 <__mulsi3>
     e1c:	da800117 	ldw	r10,4(sp)
     e20:	b80b883a 	mov	r5,r23
     e24:	1021883a 	mov	r16,r2
     e28:	5009883a 	mov	r4,r10
     e2c:	00009780 	call	978 <__mulsi3>
     e30:	d9c00517 	ldw	r7,20(sp)
     e34:	da400317 	ldw	r9,12(sp)
     e38:	d8c00217 	ldw	r3,8(sp)
     e3c:	3808d43a 	srli	r4,r7,16
     e40:	1245883a 	add	r2,r2,r9
     e44:	da000417 	ldw	r8,16(sp)
     e48:	2085883a 	add	r2,r4,r2
     e4c:	1240022e 	bgeu	r2,r9,e58 <__divdf3+0x4b8>
     e50:	01000074 	movhi	r4,1
     e54:	8121883a 	add	r16,r16,r4
     e58:	1008d43a 	srli	r4,r2,16
     e5c:	1004943a 	slli	r2,r2,16
     e60:	39ffffcc 	andi	r7,r7,65535
     e64:	2409883a 	add	r4,r4,r16
     e68:	11c5883a 	add	r2,r2,r7
     e6c:	4100bb36 	bltu	r8,r4,115c <__divdf3+0x7bc>
     e70:	4100d726 	beq	r8,r4,11d0 <__divdf3+0x830>
     e74:	4109c83a 	sub	r4,r8,r4
     e78:	a8a1c83a 	sub	r16,r21,r2
     e7c:	ac2b803a 	cmpltu	r21,r21,r16
     e80:	256bc83a 	sub	r21,r4,r21
     e84:	b540d926 	beq	r22,r21,11ec <__divdf3+0x84c>
     e88:	a00b883a 	mov	r5,r20
     e8c:	a809883a 	mov	r4,r21
     e90:	d8c00215 	stw	r3,8(sp)
     e94:	00008bc0 	call	8bc <__udivsi3>
     e98:	100b883a 	mov	r5,r2
     e9c:	9009883a 	mov	r4,r18
     ea0:	d8800515 	stw	r2,20(sp)
     ea4:	00009780 	call	978 <__mulsi3>
     ea8:	a809883a 	mov	r4,r21
     eac:	a00b883a 	mov	r5,r20
     eb0:	d8800415 	stw	r2,16(sp)
     eb4:	00009200 	call	920 <__umodsi3>
     eb8:	1004943a 	slli	r2,r2,16
     ebc:	8008d43a 	srli	r4,r16,16
     ec0:	da000417 	ldw	r8,16(sp)
     ec4:	d8c00217 	ldw	r3,8(sp)
     ec8:	2084b03a 	or	r2,r4,r2
     ecc:	d9c00517 	ldw	r7,20(sp)
     ed0:	1200062e 	bgeu	r2,r8,eec <__divdf3+0x54c>
     ed4:	1585883a 	add	r2,r2,r22
     ed8:	393fffc4 	addi	r4,r7,-1
     edc:	1580c536 	bltu	r2,r22,11f4 <__divdf3+0x854>
     ee0:	1200c42e 	bgeu	r2,r8,11f4 <__divdf3+0x854>
     ee4:	39ffff84 	addi	r7,r7,-2
     ee8:	1585883a 	add	r2,r2,r22
     eec:	122bc83a 	sub	r21,r2,r8
     ef0:	a00b883a 	mov	r5,r20
     ef4:	a809883a 	mov	r4,r21
     ef8:	d8c00215 	stw	r3,8(sp)
     efc:	d9c00515 	stw	r7,20(sp)
     f00:	00008bc0 	call	8bc <__udivsi3>
     f04:	9009883a 	mov	r4,r18
     f08:	100b883a 	mov	r5,r2
     f0c:	d8800415 	stw	r2,16(sp)
     f10:	00009780 	call	978 <__mulsi3>
     f14:	a809883a 	mov	r4,r21
     f18:	a00b883a 	mov	r5,r20
     f1c:	1025883a 	mov	r18,r2
     f20:	00009200 	call	920 <__umodsi3>
     f24:	1004943a 	slli	r2,r2,16
     f28:	813fffcc 	andi	r4,r16,65535
     f2c:	d8c00217 	ldw	r3,8(sp)
     f30:	20a0b03a 	or	r16,r4,r2
     f34:	d9c00517 	ldw	r7,20(sp)
     f38:	da000417 	ldw	r8,16(sp)
     f3c:	8480062e 	bgeu	r16,r18,f58 <__divdf3+0x5b8>
     f40:	85a1883a 	add	r16,r16,r22
     f44:	40bfffc4 	addi	r2,r8,-1
     f48:	8580ac36 	bltu	r16,r22,11fc <__divdf3+0x85c>
     f4c:	8480ab2e 	bgeu	r16,r18,11fc <__divdf3+0x85c>
     f50:	423fff84 	addi	r8,r8,-2
     f54:	85a1883a 	add	r16,r16,r22
     f58:	3804943a 	slli	r2,r7,16
     f5c:	84a1c83a 	sub	r16,r16,r18
     f60:	e009883a 	mov	r4,fp
     f64:	1228b03a 	or	r20,r2,r8
     f68:	a1ffffcc 	andi	r7,r20,65535
     f6c:	a024d43a 	srli	r18,r20,16
     f70:	380b883a 	mov	r5,r7
     f74:	d8c00215 	stw	r3,8(sp)
     f78:	d9c00515 	stw	r7,20(sp)
     f7c:	00009780 	call	978 <__mulsi3>
     f80:	900b883a 	mov	r5,r18
     f84:	e009883a 	mov	r4,fp
     f88:	102b883a 	mov	r21,r2
     f8c:	00009780 	call	978 <__mulsi3>
     f90:	900b883a 	mov	r5,r18
     f94:	b809883a 	mov	r4,r23
     f98:	1039883a 	mov	fp,r2
     f9c:	00009780 	call	978 <__mulsi3>
     fa0:	d9c00517 	ldw	r7,20(sp)
     fa4:	b80b883a 	mov	r5,r23
     fa8:	1025883a 	mov	r18,r2
     fac:	3809883a 	mov	r4,r7
     fb0:	00009780 	call	978 <__mulsi3>
     fb4:	a808d43a 	srli	r4,r21,16
     fb8:	1705883a 	add	r2,r2,fp
     fbc:	d8c00217 	ldw	r3,8(sp)
     fc0:	2085883a 	add	r2,r4,r2
     fc4:	1700022e 	bgeu	r2,fp,fd0 <__divdf3+0x630>
     fc8:	01000074 	movhi	r4,1
     fcc:	9125883a 	add	r18,r18,r4
     fd0:	1008d43a 	srli	r4,r2,16
     fd4:	1004943a 	slli	r2,r2,16
     fd8:	ad7fffcc 	andi	r21,r21,65535
     fdc:	2489883a 	add	r4,r4,r18
     fe0:	1545883a 	add	r2,r2,r21
     fe4:	81003836 	bltu	r16,r4,10c8 <__divdf3+0x728>
     fe8:	81003626 	beq	r16,r4,10c4 <__divdf3+0x724>
     fec:	a5000054 	ori	r20,r20,1
     ff0:	1880ffc4 	addi	r2,r3,1023
     ff4:	00bf2e0e 	bge	zero,r2,cb0 <__alt_exception_stack_pointer+0xf8000cb0>
     ff8:	a10001cc 	andi	r4,r20,7
     ffc:	20000726 	beq	r4,zero,101c <__divdf3+0x67c>
    1000:	a10003cc 	andi	r4,r20,15
    1004:	01400104 	movi	r5,4
    1008:	21400426 	beq	r4,r5,101c <__divdf3+0x67c>
    100c:	a149883a 	add	r4,r20,r5
    1010:	2529803a 	cmpltu	r20,r4,r20
    1014:	8d23883a 	add	r17,r17,r20
    1018:	2029883a 	mov	r20,r4
    101c:	8900402c 	andhi	r4,r17,256
    1020:	20000426 	beq	r4,zero,1034 <__divdf3+0x694>
    1024:	18810004 	addi	r2,r3,1024
    1028:	00ffc034 	movhi	r3,65280
    102c:	18ffffc4 	addi	r3,r3,-1
    1030:	88e2703a 	and	r17,r17,r3
    1034:	00c1ff84 	movi	r3,2046
    1038:	18beb416 	blt	r3,r2,b0c <__alt_exception_stack_pointer+0xf8000b0c>
    103c:	a028d0fa 	srli	r20,r20,3
    1040:	882a977a 	slli	r21,r17,29
    1044:	8820927a 	slli	r16,r17,9
    1048:	1081ffcc 	andi	r2,r2,2047
    104c:	ad2ab03a 	or	r21,r21,r20
    1050:	8020d33a 	srli	r16,r16,12
    1054:	9900004c 	andi	r4,r19,1
    1058:	003eb006 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
    105c:	8080022c 	andhi	r2,r16,8
    1060:	10001226 	beq	r2,zero,10ac <__divdf3+0x70c>
    1064:	8880022c 	andhi	r2,r17,8
    1068:	1000101e 	bne	r2,zero,10ac <__divdf3+0x70c>
    106c:	00800434 	movhi	r2,16
    1070:	8c000234 	orhi	r16,r17,8
    1074:	10bfffc4 	addi	r2,r2,-1
    1078:	b809883a 	mov	r4,r23
    107c:	80a0703a 	and	r16,r16,r2
    1080:	a02b883a 	mov	r21,r20
    1084:	003f0806 	br	ca8 <__alt_exception_stack_pointer+0xf8000ca8>
    1088:	008000c4 	movi	r2,3
    108c:	3880b126 	beq	r7,r2,1354 <__divdf3+0x9b4>
    1090:	00800044 	movi	r2,1
    1094:	38805b1e 	bne	r7,r2,1204 <__divdf3+0x864>
    1098:	e009883a 	mov	r4,fp
    109c:	0005883a 	mov	r2,zero
    10a0:	0021883a 	mov	r16,zero
    10a4:	002b883a 	mov	r21,zero
    10a8:	003e9c06 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
    10ac:	00800434 	movhi	r2,16
    10b0:	84000234 	orhi	r16,r16,8
    10b4:	10bfffc4 	addi	r2,r2,-1
    10b8:	b009883a 	mov	r4,r22
    10bc:	80a0703a 	and	r16,r16,r2
    10c0:	003ef906 	br	ca8 <__alt_exception_stack_pointer+0xf8000ca8>
    10c4:	103fca26 	beq	r2,zero,ff0 <__alt_exception_stack_pointer+0xf8000ff0>
    10c8:	b421883a 	add	r16,r22,r16
    10cc:	a17fffc4 	addi	r5,r20,-1
    10d0:	8580422e 	bgeu	r16,r22,11dc <__divdf3+0x83c>
    10d4:	2829883a 	mov	r20,r5
    10d8:	813fc41e 	bne	r16,r4,fec <__alt_exception_stack_pointer+0xf8000fec>
    10dc:	d9800017 	ldw	r6,0(sp)
    10e0:	30bfc21e 	bne	r6,r2,fec <__alt_exception_stack_pointer+0xf8000fec>
    10e4:	003fc206 	br	ff0 <__alt_exception_stack_pointer+0xf8000ff0>
    10e8:	143ff604 	addi	r16,r2,-40
    10ec:	8c20983a 	sll	r16,r17,r16
    10f0:	002b883a 	mov	r21,zero
    10f4:	003eb406 	br	bc8 <__alt_exception_stack_pointer+0xf8000bc8>
    10f8:	d9800215 	stw	r6,8(sp)
    10fc:	d9c00515 	stw	r7,20(sp)
    1100:	da000415 	stw	r8,16(sp)
    1104:	00014180 	call	1418 <__clzsi2>
    1108:	10800804 	addi	r2,r2,32
    110c:	da000417 	ldw	r8,16(sp)
    1110:	d9c00517 	ldw	r7,20(sp)
    1114:	d9800217 	ldw	r6,8(sp)
    1118:	003ea106 	br	ba0 <__alt_exception_stack_pointer+0xf8000ba0>
    111c:	147ff604 	addi	r17,r2,-40
    1120:	3462983a 	sll	r17,r6,r17
    1124:	0029883a 	mov	r20,zero
    1128:	003ec906 	br	c50 <__alt_exception_stack_pointer+0xf8000c50>
    112c:	3009883a 	mov	r4,r6
    1130:	d9400115 	stw	r5,4(sp)
    1134:	d9800215 	stw	r6,8(sp)
    1138:	da000415 	stw	r8,16(sp)
    113c:	da400315 	stw	r9,12(sp)
    1140:	00014180 	call	1418 <__clzsi2>
    1144:	10800804 	addi	r2,r2,32
    1148:	da400317 	ldw	r9,12(sp)
    114c:	da000417 	ldw	r8,16(sp)
    1150:	d9800217 	ldw	r6,8(sp)
    1154:	d9400117 	ldw	r5,4(sp)
    1158:	003eb306 	br	c28 <__alt_exception_stack_pointer+0xf8000c28>
    115c:	d9800017 	ldw	r6,0(sp)
    1160:	a9ab883a 	add	r21,r21,r6
    1164:	a98b803a 	cmpltu	r5,r21,r6
    1168:	2d8b883a 	add	r5,r5,r22
    116c:	2a11883a 	add	r8,r5,r8
    1170:	897fffc4 	addi	r5,r17,-1
    1174:	b2000c2e 	bgeu	r22,r8,11a8 <__divdf3+0x808>
    1178:	41003f36 	bltu	r8,r4,1278 <__divdf3+0x8d8>
    117c:	22006c26 	beq	r4,r8,1330 <__divdf3+0x990>
    1180:	4109c83a 	sub	r4,r8,r4
    1184:	2823883a 	mov	r17,r5
    1188:	003f3b06 	br	e78 <__alt_exception_stack_pointer+0xf8000e78>
    118c:	ad3ed336 	bltu	r21,r20,cdc <__alt_exception_stack_pointer+0xf8000cdc>
    1190:	a804d07a 	srli	r2,r21,1
    1194:	802e97fa 	slli	r23,r16,31
    1198:	a82a97fa 	slli	r21,r21,31
    119c:	8020d07a 	srli	r16,r16,1
    11a0:	b8aeb03a 	or	r23,r23,r2
    11a4:	003ed006 	br	ce8 <__alt_exception_stack_pointer+0xf8000ce8>
    11a8:	b23ff51e 	bne	r22,r8,1180 <__alt_exception_stack_pointer+0xf8001180>
    11ac:	d9800017 	ldw	r6,0(sp)
    11b0:	a9bff12e 	bgeu	r21,r6,1178 <__alt_exception_stack_pointer+0xf8001178>
    11b4:	b109c83a 	sub	r4,r22,r4
    11b8:	2823883a 	mov	r17,r5
    11bc:	003f2e06 	br	e78 <__alt_exception_stack_pointer+0xf8000e78>
    11c0:	2021883a 	mov	r16,r4
    11c4:	003eff06 	br	dc4 <__alt_exception_stack_pointer+0xf8000dc4>
    11c8:	2023883a 	mov	r17,r4
    11cc:	003ee406 	br	d60 <__alt_exception_stack_pointer+0xf8000d60>
    11d0:	a8bfe236 	bltu	r21,r2,115c <__alt_exception_stack_pointer+0xf800115c>
    11d4:	0009883a 	mov	r4,zero
    11d8:	003f2706 	br	e78 <__alt_exception_stack_pointer+0xf8000e78>
    11dc:	81002d36 	bltu	r16,r4,1294 <__divdf3+0x8f4>
    11e0:	24005626 	beq	r4,r16,133c <__divdf3+0x99c>
    11e4:	2829883a 	mov	r20,r5
    11e8:	003f8006 	br	fec <__alt_exception_stack_pointer+0xf8000fec>
    11ec:	053fffc4 	movi	r20,-1
    11f0:	003f7f06 	br	ff0 <__alt_exception_stack_pointer+0xf8000ff0>
    11f4:	200f883a 	mov	r7,r4
    11f8:	003f3c06 	br	eec <__alt_exception_stack_pointer+0xf8000eec>
    11fc:	1011883a 	mov	r8,r2
    1200:	003f5506 	br	f58 <__alt_exception_stack_pointer+0xf8000f58>
    1204:	e027883a 	mov	r19,fp
    1208:	003f7906 	br	ff0 <__alt_exception_stack_pointer+0xf8000ff0>
    120c:	010007c4 	movi	r4,31
    1210:	20c02816 	blt	r4,r3,12b4 <__divdf3+0x914>
    1214:	00800804 	movi	r2,32
    1218:	10c5c83a 	sub	r2,r2,r3
    121c:	888a983a 	sll	r5,r17,r2
    1220:	a0c8d83a 	srl	r4,r20,r3
    1224:	a084983a 	sll	r2,r20,r2
    1228:	88e2d83a 	srl	r17,r17,r3
    122c:	2906b03a 	or	r3,r5,r4
    1230:	1004c03a 	cmpne	r2,r2,zero
    1234:	1886b03a 	or	r3,r3,r2
    1238:	188001cc 	andi	r2,r3,7
    123c:	10000726 	beq	r2,zero,125c <__divdf3+0x8bc>
    1240:	188003cc 	andi	r2,r3,15
    1244:	01000104 	movi	r4,4
    1248:	11000426 	beq	r2,r4,125c <__divdf3+0x8bc>
    124c:	1805883a 	mov	r2,r3
    1250:	10c00104 	addi	r3,r2,4
    1254:	1885803a 	cmpltu	r2,r3,r2
    1258:	88a3883a 	add	r17,r17,r2
    125c:	8880202c 	andhi	r2,r17,128
    1260:	10002926 	beq	r2,zero,1308 <__divdf3+0x968>
    1264:	9900004c 	andi	r4,r19,1
    1268:	00800044 	movi	r2,1
    126c:	0021883a 	mov	r16,zero
    1270:	002b883a 	mov	r21,zero
    1274:	003e2906 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
    1278:	d9800017 	ldw	r6,0(sp)
    127c:	8c7fff84 	addi	r17,r17,-2
    1280:	a9ab883a 	add	r21,r21,r6
    1284:	a98b803a 	cmpltu	r5,r21,r6
    1288:	2d8b883a 	add	r5,r5,r22
    128c:	2a11883a 	add	r8,r5,r8
    1290:	003ef806 	br	e74 <__alt_exception_stack_pointer+0xf8000e74>
    1294:	d9800017 	ldw	r6,0(sp)
    1298:	318f883a 	add	r7,r6,r6
    129c:	398b803a 	cmpltu	r5,r7,r6
    12a0:	2d8d883a 	add	r6,r5,r22
    12a4:	81a1883a 	add	r16,r16,r6
    12a8:	a17fff84 	addi	r5,r20,-2
    12ac:	d9c00015 	stw	r7,0(sp)
    12b0:	003f8806 	br	10d4 <__alt_exception_stack_pointer+0xf80010d4>
    12b4:	013ff844 	movi	r4,-31
    12b8:	2085c83a 	sub	r2,r4,r2
    12bc:	8888d83a 	srl	r4,r17,r2
    12c0:	00800804 	movi	r2,32
    12c4:	18802126 	beq	r3,r2,134c <__divdf3+0x9ac>
    12c8:	04001004 	movi	r16,64
    12cc:	80c7c83a 	sub	r3,r16,r3
    12d0:	88e0983a 	sll	r16,r17,r3
    12d4:	8504b03a 	or	r2,r16,r20
    12d8:	1004c03a 	cmpne	r2,r2,zero
    12dc:	2084b03a 	or	r2,r4,r2
    12e0:	144001cc 	andi	r17,r2,7
    12e4:	88000d1e 	bne	r17,zero,131c <__divdf3+0x97c>
    12e8:	0021883a 	mov	r16,zero
    12ec:	102ad0fa 	srli	r21,r2,3
    12f0:	9900004c 	andi	r4,r19,1
    12f4:	0005883a 	mov	r2,zero
    12f8:	ac6ab03a 	or	r21,r21,r17
    12fc:	003e0706 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
    1300:	1007883a 	mov	r3,r2
    1304:	0023883a 	mov	r17,zero
    1308:	8820927a 	slli	r16,r17,9
    130c:	1805883a 	mov	r2,r3
    1310:	8822977a 	slli	r17,r17,29
    1314:	8020d33a 	srli	r16,r16,12
    1318:	003ff406 	br	12ec <__alt_exception_stack_pointer+0xf80012ec>
    131c:	10c003cc 	andi	r3,r2,15
    1320:	01000104 	movi	r4,4
    1324:	193ff626 	beq	r3,r4,1300 <__alt_exception_stack_pointer+0xf8001300>
    1328:	0023883a 	mov	r17,zero
    132c:	003fc806 	br	1250 <__alt_exception_stack_pointer+0xf8001250>
    1330:	a8bfd136 	bltu	r21,r2,1278 <__alt_exception_stack_pointer+0xf8001278>
    1334:	2823883a 	mov	r17,r5
    1338:	003fa606 	br	11d4 <__alt_exception_stack_pointer+0xf80011d4>
    133c:	d9800017 	ldw	r6,0(sp)
    1340:	30bfd436 	bltu	r6,r2,1294 <__alt_exception_stack_pointer+0xf8001294>
    1344:	2829883a 	mov	r20,r5
    1348:	003f6406 	br	10dc <__alt_exception_stack_pointer+0xf80010dc>
    134c:	0021883a 	mov	r16,zero
    1350:	003fe006 	br	12d4 <__alt_exception_stack_pointer+0xf80012d4>
    1354:	00800434 	movhi	r2,16
    1358:	8c000234 	orhi	r16,r17,8
    135c:	10bfffc4 	addi	r2,r2,-1
    1360:	e009883a 	mov	r4,fp
    1364:	80a0703a 	and	r16,r16,r2
    1368:	a02b883a 	mov	r21,r20
    136c:	003e4e06 	br	ca8 <__alt_exception_stack_pointer+0xf8000ca8>

00001370 <__floatunsidf>:
    1370:	defffe04 	addi	sp,sp,-8
    1374:	dc000015 	stw	r16,0(sp)
    1378:	dfc00115 	stw	ra,4(sp)
    137c:	2021883a 	mov	r16,r4
    1380:	20002226 	beq	r4,zero,140c <__floatunsidf+0x9c>
    1384:	00014180 	call	1418 <__clzsi2>
    1388:	01010784 	movi	r4,1054
    138c:	2089c83a 	sub	r4,r4,r2
    1390:	01810cc4 	movi	r6,1075
    1394:	310dc83a 	sub	r6,r6,r4
    1398:	00c007c4 	movi	r3,31
    139c:	1980120e 	bge	r3,r6,13e8 <__floatunsidf+0x78>
    13a0:	00c104c4 	movi	r3,1043
    13a4:	1907c83a 	sub	r3,r3,r4
    13a8:	80ca983a 	sll	r5,r16,r3
    13ac:	00800434 	movhi	r2,16
    13b0:	10bfffc4 	addi	r2,r2,-1
    13b4:	2101ffcc 	andi	r4,r4,2047
    13b8:	0021883a 	mov	r16,zero
    13bc:	288a703a 	and	r5,r5,r2
    13c0:	2008953a 	slli	r4,r4,20
    13c4:	00c00434 	movhi	r3,16
    13c8:	18ffffc4 	addi	r3,r3,-1
    13cc:	28c6703a 	and	r3,r5,r3
    13d0:	8005883a 	mov	r2,r16
    13d4:	1906b03a 	or	r3,r3,r4
    13d8:	dfc00117 	ldw	ra,4(sp)
    13dc:	dc000017 	ldw	r16,0(sp)
    13e0:	dec00204 	addi	sp,sp,8
    13e4:	f800283a 	ret
    13e8:	00c002c4 	movi	r3,11
    13ec:	188bc83a 	sub	r5,r3,r2
    13f0:	814ad83a 	srl	r5,r16,r5
    13f4:	00c00434 	movhi	r3,16
    13f8:	18ffffc4 	addi	r3,r3,-1
    13fc:	81a0983a 	sll	r16,r16,r6
    1400:	2101ffcc 	andi	r4,r4,2047
    1404:	28ca703a 	and	r5,r5,r3
    1408:	003fed06 	br	13c0 <__alt_exception_stack_pointer+0xf80013c0>
    140c:	0009883a 	mov	r4,zero
    1410:	000b883a 	mov	r5,zero
    1414:	003fea06 	br	13c0 <__alt_exception_stack_pointer+0xf80013c0>

00001418 <__clzsi2>:
    1418:	00bfffd4 	movui	r2,65535
    141c:	11000536 	bltu	r2,r4,1434 <__clzsi2+0x1c>
    1420:	00803fc4 	movi	r2,255
    1424:	11000f36 	bltu	r2,r4,1464 <__clzsi2+0x4c>
    1428:	00800804 	movi	r2,32
    142c:	0007883a 	mov	r3,zero
    1430:	00000506 	br	1448 <__clzsi2+0x30>
    1434:	00804034 	movhi	r2,256
    1438:	10bfffc4 	addi	r2,r2,-1
    143c:	11000c2e 	bgeu	r2,r4,1470 <__clzsi2+0x58>
    1440:	00800204 	movi	r2,8
    1444:	00c00604 	movi	r3,24
    1448:	20c8d83a 	srl	r4,r4,r3
    144c:	00c00074 	movhi	r3,1
    1450:	18c30c04 	addi	r3,r3,3120
    1454:	1909883a 	add	r4,r3,r4
    1458:	20c00003 	ldbu	r3,0(r4)
    145c:	10c5c83a 	sub	r2,r2,r3
    1460:	f800283a 	ret
    1464:	00800604 	movi	r2,24
    1468:	00c00204 	movi	r3,8
    146c:	003ff606 	br	1448 <__alt_exception_stack_pointer+0xf8001448>
    1470:	00800404 	movi	r2,16
    1474:	1007883a 	mov	r3,r2
    1478:	003ff306 	br	1448 <__alt_exception_stack_pointer+0xf8001448>

0000147c <clock>:
    147c:	00800074 	movhi	r2,1
    1480:	108ab404 	addi	r2,r2,10960
    1484:	11000017 	ldw	r4,0(r2)
    1488:	defffb04 	addi	sp,sp,-20
    148c:	d80b883a 	mov	r5,sp
    1490:	dfc00415 	stw	ra,16(sp)
    1494:	0001dbc0 	call	1dbc <_times_r>
    1498:	00ffffc4 	movi	r3,-1
    149c:	10c00726 	beq	r2,r3,14bc <clock+0x40>
    14a0:	d8c00017 	ldw	r3,0(sp)
    14a4:	d8800117 	ldw	r2,4(sp)
    14a8:	1885883a 	add	r2,r3,r2
    14ac:	d8c00217 	ldw	r3,8(sp)
    14b0:	10c7883a 	add	r3,r2,r3
    14b4:	d8800317 	ldw	r2,12(sp)
    14b8:	1885883a 	add	r2,r3,r2
    14bc:	dfc00417 	ldw	ra,16(sp)
    14c0:	dec00504 	addi	sp,sp,20
    14c4:	f800283a 	ret

000014c8 <malloc>:
    14c8:	00800074 	movhi	r2,1
    14cc:	108ab404 	addi	r2,r2,10960
    14d0:	200b883a 	mov	r5,r4
    14d4:	11000017 	ldw	r4,0(r2)
    14d8:	00014f01 	jmpi	14f0 <_malloc_r>

000014dc <free>:
    14dc:	00800074 	movhi	r2,1
    14e0:	108ab404 	addi	r2,r2,10960
    14e4:	200b883a 	mov	r5,r4
    14e8:	11000017 	ldw	r4,0(r2)
    14ec:	00062f81 	jmpi	62f8 <_free_r>

000014f0 <_malloc_r>:
    14f0:	defff504 	addi	sp,sp,-44
    14f4:	dc800315 	stw	r18,12(sp)
    14f8:	dfc00a15 	stw	ra,40(sp)
    14fc:	df000915 	stw	fp,36(sp)
    1500:	ddc00815 	stw	r23,32(sp)
    1504:	dd800715 	stw	r22,28(sp)
    1508:	dd400615 	stw	r21,24(sp)
    150c:	dd000515 	stw	r20,20(sp)
    1510:	dcc00415 	stw	r19,16(sp)
    1514:	dc400215 	stw	r17,8(sp)
    1518:	dc000115 	stw	r16,4(sp)
    151c:	288002c4 	addi	r2,r5,11
    1520:	00c00584 	movi	r3,22
    1524:	2025883a 	mov	r18,r4
    1528:	18807f2e 	bgeu	r3,r2,1728 <_malloc_r+0x238>
    152c:	047ffe04 	movi	r17,-8
    1530:	1462703a 	and	r17,r2,r17
    1534:	8800a316 	blt	r17,zero,17c4 <_malloc_r+0x2d4>
    1538:	8940a236 	bltu	r17,r5,17c4 <_malloc_r+0x2d4>
    153c:	000ddf80 	call	ddf8 <__malloc_lock>
    1540:	00807dc4 	movi	r2,503
    1544:	1441e92e 	bgeu	r2,r17,1cec <_malloc_r+0x7fc>
    1548:	8804d27a 	srli	r2,r17,9
    154c:	1000a126 	beq	r2,zero,17d4 <_malloc_r+0x2e4>
    1550:	00c00104 	movi	r3,4
    1554:	18811e36 	bltu	r3,r2,19d0 <_malloc_r+0x4e0>
    1558:	8804d1ba 	srli	r2,r17,6
    155c:	12000e44 	addi	r8,r2,57
    1560:	11c00e04 	addi	r7,r2,56
    1564:	4209883a 	add	r4,r8,r8
    1568:	04c00074 	movhi	r19,1
    156c:	2109883a 	add	r4,r4,r4
    1570:	9cc4da04 	addi	r19,r19,4968
    1574:	2109883a 	add	r4,r4,r4
    1578:	9909883a 	add	r4,r19,r4
    157c:	24000117 	ldw	r16,4(r4)
    1580:	213ffe04 	addi	r4,r4,-8
    1584:	24009726 	beq	r4,r16,17e4 <_malloc_r+0x2f4>
    1588:	80800117 	ldw	r2,4(r16)
    158c:	01bfff04 	movi	r6,-4
    1590:	014003c4 	movi	r5,15
    1594:	1184703a 	and	r2,r2,r6
    1598:	1447c83a 	sub	r3,r2,r17
    159c:	28c00716 	blt	r5,r3,15bc <_malloc_r+0xcc>
    15a0:	1800920e 	bge	r3,zero,17ec <_malloc_r+0x2fc>
    15a4:	84000317 	ldw	r16,12(r16)
    15a8:	24008e26 	beq	r4,r16,17e4 <_malloc_r+0x2f4>
    15ac:	80800117 	ldw	r2,4(r16)
    15b0:	1184703a 	and	r2,r2,r6
    15b4:	1447c83a 	sub	r3,r2,r17
    15b8:	28fff90e 	bge	r5,r3,15a0 <__alt_exception_stack_pointer+0xf80015a0>
    15bc:	3809883a 	mov	r4,r7
    15c0:	01800074 	movhi	r6,1
    15c4:	9c000417 	ldw	r16,16(r19)
    15c8:	3184da04 	addi	r6,r6,4968
    15cc:	32000204 	addi	r8,r6,8
    15d0:	82013426 	beq	r16,r8,1aa4 <_malloc_r+0x5b4>
    15d4:	80c00117 	ldw	r3,4(r16)
    15d8:	00bfff04 	movi	r2,-4
    15dc:	188e703a 	and	r7,r3,r2
    15e0:	3c45c83a 	sub	r2,r7,r17
    15e4:	00c003c4 	movi	r3,15
    15e8:	18811f16 	blt	r3,r2,1a68 <_malloc_r+0x578>
    15ec:	32000515 	stw	r8,20(r6)
    15f0:	32000415 	stw	r8,16(r6)
    15f4:	10007f0e 	bge	r2,zero,17f4 <_malloc_r+0x304>
    15f8:	00807fc4 	movi	r2,511
    15fc:	11c0fd36 	bltu	r2,r7,19f4 <_malloc_r+0x504>
    1600:	3806d0fa 	srli	r3,r7,3
    1604:	01c00044 	movi	r7,1
    1608:	30800117 	ldw	r2,4(r6)
    160c:	19400044 	addi	r5,r3,1
    1610:	294b883a 	add	r5,r5,r5
    1614:	1807d0ba 	srai	r3,r3,2
    1618:	294b883a 	add	r5,r5,r5
    161c:	294b883a 	add	r5,r5,r5
    1620:	298b883a 	add	r5,r5,r6
    1624:	38c6983a 	sll	r3,r7,r3
    1628:	29c00017 	ldw	r7,0(r5)
    162c:	2a7ffe04 	addi	r9,r5,-8
    1630:	1886b03a 	or	r3,r3,r2
    1634:	82400315 	stw	r9,12(r16)
    1638:	81c00215 	stw	r7,8(r16)
    163c:	30c00115 	stw	r3,4(r6)
    1640:	2c000015 	stw	r16,0(r5)
    1644:	3c000315 	stw	r16,12(r7)
    1648:	2005d0ba 	srai	r2,r4,2
    164c:	01400044 	movi	r5,1
    1650:	288a983a 	sll	r5,r5,r2
    1654:	19406f36 	bltu	r3,r5,1814 <_malloc_r+0x324>
    1658:	28c4703a 	and	r2,r5,r3
    165c:	10000a1e 	bne	r2,zero,1688 <_malloc_r+0x198>
    1660:	00bfff04 	movi	r2,-4
    1664:	294b883a 	add	r5,r5,r5
    1668:	2088703a 	and	r4,r4,r2
    166c:	28c4703a 	and	r2,r5,r3
    1670:	21000104 	addi	r4,r4,4
    1674:	1000041e 	bne	r2,zero,1688 <_malloc_r+0x198>
    1678:	294b883a 	add	r5,r5,r5
    167c:	28c4703a 	and	r2,r5,r3
    1680:	21000104 	addi	r4,r4,4
    1684:	103ffc26 	beq	r2,zero,1678 <__alt_exception_stack_pointer+0xf8001678>
    1688:	02bfff04 	movi	r10,-4
    168c:	024003c4 	movi	r9,15
    1690:	21800044 	addi	r6,r4,1
    1694:	318d883a 	add	r6,r6,r6
    1698:	318d883a 	add	r6,r6,r6
    169c:	318d883a 	add	r6,r6,r6
    16a0:	998d883a 	add	r6,r19,r6
    16a4:	333ffe04 	addi	r12,r6,-8
    16a8:	2017883a 	mov	r11,r4
    16ac:	31800104 	addi	r6,r6,4
    16b0:	34000017 	ldw	r16,0(r6)
    16b4:	31fffd04 	addi	r7,r6,-12
    16b8:	81c0041e 	bne	r16,r7,16cc <_malloc_r+0x1dc>
    16bc:	0000fb06 	br	1aac <_malloc_r+0x5bc>
    16c0:	1801030e 	bge	r3,zero,1ad0 <_malloc_r+0x5e0>
    16c4:	84000317 	ldw	r16,12(r16)
    16c8:	81c0f826 	beq	r16,r7,1aac <_malloc_r+0x5bc>
    16cc:	80800117 	ldw	r2,4(r16)
    16d0:	1284703a 	and	r2,r2,r10
    16d4:	1447c83a 	sub	r3,r2,r17
    16d8:	48fff90e 	bge	r9,r3,16c0 <__alt_exception_stack_pointer+0xf80016c0>
    16dc:	80800317 	ldw	r2,12(r16)
    16e0:	81000217 	ldw	r4,8(r16)
    16e4:	89400054 	ori	r5,r17,1
    16e8:	81400115 	stw	r5,4(r16)
    16ec:	20800315 	stw	r2,12(r4)
    16f0:	11000215 	stw	r4,8(r2)
    16f4:	8463883a 	add	r17,r16,r17
    16f8:	9c400515 	stw	r17,20(r19)
    16fc:	9c400415 	stw	r17,16(r19)
    1700:	18800054 	ori	r2,r3,1
    1704:	88800115 	stw	r2,4(r17)
    1708:	8a000315 	stw	r8,12(r17)
    170c:	8a000215 	stw	r8,8(r17)
    1710:	88e3883a 	add	r17,r17,r3
    1714:	88c00015 	stw	r3,0(r17)
    1718:	9009883a 	mov	r4,r18
    171c:	000de1c0 	call	de1c <__malloc_unlock>
    1720:	80800204 	addi	r2,r16,8
    1724:	00001b06 	br	1794 <_malloc_r+0x2a4>
    1728:	04400404 	movi	r17,16
    172c:	89402536 	bltu	r17,r5,17c4 <_malloc_r+0x2d4>
    1730:	000ddf80 	call	ddf8 <__malloc_lock>
    1734:	00800184 	movi	r2,6
    1738:	01000084 	movi	r4,2
    173c:	04c00074 	movhi	r19,1
    1740:	1085883a 	add	r2,r2,r2
    1744:	9cc4da04 	addi	r19,r19,4968
    1748:	1085883a 	add	r2,r2,r2
    174c:	9885883a 	add	r2,r19,r2
    1750:	14000117 	ldw	r16,4(r2)
    1754:	10fffe04 	addi	r3,r2,-8
    1758:	80c0d926 	beq	r16,r3,1ac0 <_malloc_r+0x5d0>
    175c:	80c00117 	ldw	r3,4(r16)
    1760:	81000317 	ldw	r4,12(r16)
    1764:	00bfff04 	movi	r2,-4
    1768:	1884703a 	and	r2,r3,r2
    176c:	81400217 	ldw	r5,8(r16)
    1770:	8085883a 	add	r2,r16,r2
    1774:	10c00117 	ldw	r3,4(r2)
    1778:	29000315 	stw	r4,12(r5)
    177c:	21400215 	stw	r5,8(r4)
    1780:	18c00054 	ori	r3,r3,1
    1784:	10c00115 	stw	r3,4(r2)
    1788:	9009883a 	mov	r4,r18
    178c:	000de1c0 	call	de1c <__malloc_unlock>
    1790:	80800204 	addi	r2,r16,8
    1794:	dfc00a17 	ldw	ra,40(sp)
    1798:	df000917 	ldw	fp,36(sp)
    179c:	ddc00817 	ldw	r23,32(sp)
    17a0:	dd800717 	ldw	r22,28(sp)
    17a4:	dd400617 	ldw	r21,24(sp)
    17a8:	dd000517 	ldw	r20,20(sp)
    17ac:	dcc00417 	ldw	r19,16(sp)
    17b0:	dc800317 	ldw	r18,12(sp)
    17b4:	dc400217 	ldw	r17,8(sp)
    17b8:	dc000117 	ldw	r16,4(sp)
    17bc:	dec00b04 	addi	sp,sp,44
    17c0:	f800283a 	ret
    17c4:	00800304 	movi	r2,12
    17c8:	90800015 	stw	r2,0(r18)
    17cc:	0005883a 	mov	r2,zero
    17d0:	003ff006 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    17d4:	01002004 	movi	r4,128
    17d8:	02001004 	movi	r8,64
    17dc:	01c00fc4 	movi	r7,63
    17e0:	003f6106 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    17e4:	4009883a 	mov	r4,r8
    17e8:	003f7506 	br	15c0 <__alt_exception_stack_pointer+0xf80015c0>
    17ec:	81000317 	ldw	r4,12(r16)
    17f0:	003fde06 	br	176c <__alt_exception_stack_pointer+0xf800176c>
    17f4:	81c5883a 	add	r2,r16,r7
    17f8:	11400117 	ldw	r5,4(r2)
    17fc:	9009883a 	mov	r4,r18
    1800:	29400054 	ori	r5,r5,1
    1804:	11400115 	stw	r5,4(r2)
    1808:	000de1c0 	call	de1c <__malloc_unlock>
    180c:	80800204 	addi	r2,r16,8
    1810:	003fe006 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    1814:	9c000217 	ldw	r16,8(r19)
    1818:	00bfff04 	movi	r2,-4
    181c:	85800117 	ldw	r22,4(r16)
    1820:	b0ac703a 	and	r22,r22,r2
    1824:	b4400336 	bltu	r22,r17,1834 <_malloc_r+0x344>
    1828:	b445c83a 	sub	r2,r22,r17
    182c:	00c003c4 	movi	r3,15
    1830:	18805d16 	blt	r3,r2,19a8 <_malloc_r+0x4b8>
    1834:	05c00074 	movhi	r23,1
    1838:	00800074 	movhi	r2,1
    183c:	1091be04 	addi	r2,r2,18168
    1840:	bdcab504 	addi	r23,r23,10964
    1844:	15400017 	ldw	r21,0(r2)
    1848:	b8c00017 	ldw	r3,0(r23)
    184c:	00bfffc4 	movi	r2,-1
    1850:	858d883a 	add	r6,r16,r22
    1854:	8d6b883a 	add	r21,r17,r21
    1858:	1880ea26 	beq	r3,r2,1c04 <_malloc_r+0x714>
    185c:	ad4403c4 	addi	r21,r21,4111
    1860:	00bc0004 	movi	r2,-4096
    1864:	a8aa703a 	and	r21,r21,r2
    1868:	a80b883a 	mov	r5,r21
    186c:	9009883a 	mov	r4,r18
    1870:	d9800015 	stw	r6,0(sp)
    1874:	0001d680 	call	1d68 <_sbrk_r>
    1878:	1029883a 	mov	r20,r2
    187c:	00bfffc4 	movi	r2,-1
    1880:	d9800017 	ldw	r6,0(sp)
    1884:	a080e826 	beq	r20,r2,1c28 <_malloc_r+0x738>
    1888:	a180a636 	bltu	r20,r6,1b24 <_malloc_r+0x634>
    188c:	07000074 	movhi	fp,1
    1890:	e711ca04 	addi	fp,fp,18216
    1894:	e0800017 	ldw	r2,0(fp)
    1898:	a887883a 	add	r3,r21,r2
    189c:	e0c00015 	stw	r3,0(fp)
    18a0:	3500e626 	beq	r6,r20,1c3c <_malloc_r+0x74c>
    18a4:	b9000017 	ldw	r4,0(r23)
    18a8:	00bfffc4 	movi	r2,-1
    18ac:	2080ee26 	beq	r4,r2,1c68 <_malloc_r+0x778>
    18b0:	a185c83a 	sub	r2,r20,r6
    18b4:	10c5883a 	add	r2,r2,r3
    18b8:	e0800015 	stw	r2,0(fp)
    18bc:	a0c001cc 	andi	r3,r20,7
    18c0:	1800bc26 	beq	r3,zero,1bb4 <_malloc_r+0x6c4>
    18c4:	a0e9c83a 	sub	r20,r20,r3
    18c8:	00840204 	movi	r2,4104
    18cc:	a5000204 	addi	r20,r20,8
    18d0:	10c7c83a 	sub	r3,r2,r3
    18d4:	a545883a 	add	r2,r20,r21
    18d8:	1083ffcc 	andi	r2,r2,4095
    18dc:	18abc83a 	sub	r21,r3,r2
    18e0:	a80b883a 	mov	r5,r21
    18e4:	9009883a 	mov	r4,r18
    18e8:	0001d680 	call	1d68 <_sbrk_r>
    18ec:	00ffffc4 	movi	r3,-1
    18f0:	10c0e126 	beq	r2,r3,1c78 <_malloc_r+0x788>
    18f4:	1505c83a 	sub	r2,r2,r20
    18f8:	1545883a 	add	r2,r2,r21
    18fc:	10800054 	ori	r2,r2,1
    1900:	e0c00017 	ldw	r3,0(fp)
    1904:	9d000215 	stw	r20,8(r19)
    1908:	a0800115 	stw	r2,4(r20)
    190c:	a8c7883a 	add	r3,r21,r3
    1910:	e0c00015 	stw	r3,0(fp)
    1914:	84c00e26 	beq	r16,r19,1950 <_malloc_r+0x460>
    1918:	018003c4 	movi	r6,15
    191c:	3580a72e 	bgeu	r6,r22,1bbc <_malloc_r+0x6cc>
    1920:	81400117 	ldw	r5,4(r16)
    1924:	013ffe04 	movi	r4,-8
    1928:	b0bffd04 	addi	r2,r22,-12
    192c:	1104703a 	and	r2,r2,r4
    1930:	2900004c 	andi	r4,r5,1
    1934:	2088b03a 	or	r4,r4,r2
    1938:	81000115 	stw	r4,4(r16)
    193c:	01400144 	movi	r5,5
    1940:	8089883a 	add	r4,r16,r2
    1944:	21400115 	stw	r5,4(r4)
    1948:	21400215 	stw	r5,8(r4)
    194c:	3080cd36 	bltu	r6,r2,1c84 <_malloc_r+0x794>
    1950:	00800074 	movhi	r2,1
    1954:	1091bd04 	addi	r2,r2,18164
    1958:	11000017 	ldw	r4,0(r2)
    195c:	20c0012e 	bgeu	r4,r3,1964 <_malloc_r+0x474>
    1960:	10c00015 	stw	r3,0(r2)
    1964:	00800074 	movhi	r2,1
    1968:	1091bc04 	addi	r2,r2,18160
    196c:	11000017 	ldw	r4,0(r2)
    1970:	9c000217 	ldw	r16,8(r19)
    1974:	20c0012e 	bgeu	r4,r3,197c <_malloc_r+0x48c>
    1978:	10c00015 	stw	r3,0(r2)
    197c:	80c00117 	ldw	r3,4(r16)
    1980:	00bfff04 	movi	r2,-4
    1984:	1886703a 	and	r3,r3,r2
    1988:	1c45c83a 	sub	r2,r3,r17
    198c:	1c400236 	bltu	r3,r17,1998 <_malloc_r+0x4a8>
    1990:	00c003c4 	movi	r3,15
    1994:	18800416 	blt	r3,r2,19a8 <_malloc_r+0x4b8>
    1998:	9009883a 	mov	r4,r18
    199c:	000de1c0 	call	de1c <__malloc_unlock>
    19a0:	0005883a 	mov	r2,zero
    19a4:	003f7b06 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    19a8:	88c00054 	ori	r3,r17,1
    19ac:	80c00115 	stw	r3,4(r16)
    19b0:	8463883a 	add	r17,r16,r17
    19b4:	10800054 	ori	r2,r2,1
    19b8:	9c400215 	stw	r17,8(r19)
    19bc:	88800115 	stw	r2,4(r17)
    19c0:	9009883a 	mov	r4,r18
    19c4:	000de1c0 	call	de1c <__malloc_unlock>
    19c8:	80800204 	addi	r2,r16,8
    19cc:	003f7106 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    19d0:	00c00504 	movi	r3,20
    19d4:	18804a2e 	bgeu	r3,r2,1b00 <_malloc_r+0x610>
    19d8:	00c01504 	movi	r3,84
    19dc:	18806e36 	bltu	r3,r2,1b98 <_malloc_r+0x6a8>
    19e0:	8804d33a 	srli	r2,r17,12
    19e4:	12001bc4 	addi	r8,r2,111
    19e8:	11c01b84 	addi	r7,r2,110
    19ec:	4209883a 	add	r4,r8,r8
    19f0:	003edd06 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    19f4:	3804d27a 	srli	r2,r7,9
    19f8:	00c00104 	movi	r3,4
    19fc:	1880442e 	bgeu	r3,r2,1b10 <_malloc_r+0x620>
    1a00:	00c00504 	movi	r3,20
    1a04:	18808136 	bltu	r3,r2,1c0c <_malloc_r+0x71c>
    1a08:	11401704 	addi	r5,r2,92
    1a0c:	10c016c4 	addi	r3,r2,91
    1a10:	294b883a 	add	r5,r5,r5
    1a14:	294b883a 	add	r5,r5,r5
    1a18:	294b883a 	add	r5,r5,r5
    1a1c:	994b883a 	add	r5,r19,r5
    1a20:	28800017 	ldw	r2,0(r5)
    1a24:	01800074 	movhi	r6,1
    1a28:	297ffe04 	addi	r5,r5,-8
    1a2c:	3184da04 	addi	r6,r6,4968
    1a30:	28806526 	beq	r5,r2,1bc8 <_malloc_r+0x6d8>
    1a34:	01bfff04 	movi	r6,-4
    1a38:	10c00117 	ldw	r3,4(r2)
    1a3c:	1986703a 	and	r3,r3,r6
    1a40:	38c0022e 	bgeu	r7,r3,1a4c <_malloc_r+0x55c>
    1a44:	10800217 	ldw	r2,8(r2)
    1a48:	28bffb1e 	bne	r5,r2,1a38 <__alt_exception_stack_pointer+0xf8001a38>
    1a4c:	11400317 	ldw	r5,12(r2)
    1a50:	98c00117 	ldw	r3,4(r19)
    1a54:	81400315 	stw	r5,12(r16)
    1a58:	80800215 	stw	r2,8(r16)
    1a5c:	2c000215 	stw	r16,8(r5)
    1a60:	14000315 	stw	r16,12(r2)
    1a64:	003ef806 	br	1648 <__alt_exception_stack_pointer+0xf8001648>
    1a68:	88c00054 	ori	r3,r17,1
    1a6c:	80c00115 	stw	r3,4(r16)
    1a70:	8463883a 	add	r17,r16,r17
    1a74:	34400515 	stw	r17,20(r6)
    1a78:	34400415 	stw	r17,16(r6)
    1a7c:	10c00054 	ori	r3,r2,1
    1a80:	8a000315 	stw	r8,12(r17)
    1a84:	8a000215 	stw	r8,8(r17)
    1a88:	88c00115 	stw	r3,4(r17)
    1a8c:	88a3883a 	add	r17,r17,r2
    1a90:	88800015 	stw	r2,0(r17)
    1a94:	9009883a 	mov	r4,r18
    1a98:	000de1c0 	call	de1c <__malloc_unlock>
    1a9c:	80800204 	addi	r2,r16,8
    1aa0:	003f3c06 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    1aa4:	30c00117 	ldw	r3,4(r6)
    1aa8:	003ee706 	br	1648 <__alt_exception_stack_pointer+0xf8001648>
    1aac:	5ac00044 	addi	r11,r11,1
    1ab0:	588000cc 	andi	r2,r11,3
    1ab4:	31800204 	addi	r6,r6,8
    1ab8:	103efd1e 	bne	r2,zero,16b0 <__alt_exception_stack_pointer+0xf80016b0>
    1abc:	00002406 	br	1b50 <_malloc_r+0x660>
    1ac0:	14000317 	ldw	r16,12(r2)
    1ac4:	143f251e 	bne	r2,r16,175c <__alt_exception_stack_pointer+0xf800175c>
    1ac8:	21000084 	addi	r4,r4,2
    1acc:	003ebc06 	br	15c0 <__alt_exception_stack_pointer+0xf80015c0>
    1ad0:	8085883a 	add	r2,r16,r2
    1ad4:	10c00117 	ldw	r3,4(r2)
    1ad8:	81000317 	ldw	r4,12(r16)
    1adc:	81400217 	ldw	r5,8(r16)
    1ae0:	18c00054 	ori	r3,r3,1
    1ae4:	10c00115 	stw	r3,4(r2)
    1ae8:	29000315 	stw	r4,12(r5)
    1aec:	21400215 	stw	r5,8(r4)
    1af0:	9009883a 	mov	r4,r18
    1af4:	000de1c0 	call	de1c <__malloc_unlock>
    1af8:	80800204 	addi	r2,r16,8
    1afc:	003f2506 	br	1794 <__alt_exception_stack_pointer+0xf8001794>
    1b00:	12001704 	addi	r8,r2,92
    1b04:	11c016c4 	addi	r7,r2,91
    1b08:	4209883a 	add	r4,r8,r8
    1b0c:	003e9606 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    1b10:	3804d1ba 	srli	r2,r7,6
    1b14:	11400e44 	addi	r5,r2,57
    1b18:	10c00e04 	addi	r3,r2,56
    1b1c:	294b883a 	add	r5,r5,r5
    1b20:	003fbc06 	br	1a14 <__alt_exception_stack_pointer+0xf8001a14>
    1b24:	84ff5926 	beq	r16,r19,188c <__alt_exception_stack_pointer+0xf800188c>
    1b28:	00800074 	movhi	r2,1
    1b2c:	1084da04 	addi	r2,r2,4968
    1b30:	14000217 	ldw	r16,8(r2)
    1b34:	00bfff04 	movi	r2,-4
    1b38:	80c00117 	ldw	r3,4(r16)
    1b3c:	1886703a 	and	r3,r3,r2
    1b40:	003f9106 	br	1988 <__alt_exception_stack_pointer+0xf8001988>
    1b44:	60800217 	ldw	r2,8(r12)
    1b48:	213fffc4 	addi	r4,r4,-1
    1b4c:	1300651e 	bne	r2,r12,1ce4 <_malloc_r+0x7f4>
    1b50:	208000cc 	andi	r2,r4,3
    1b54:	633ffe04 	addi	r12,r12,-8
    1b58:	103ffa1e 	bne	r2,zero,1b44 <__alt_exception_stack_pointer+0xf8001b44>
    1b5c:	98800117 	ldw	r2,4(r19)
    1b60:	0146303a 	nor	r3,zero,r5
    1b64:	1884703a 	and	r2,r3,r2
    1b68:	98800115 	stw	r2,4(r19)
    1b6c:	294b883a 	add	r5,r5,r5
    1b70:	117f2836 	bltu	r2,r5,1814 <__alt_exception_stack_pointer+0xf8001814>
    1b74:	283f2726 	beq	r5,zero,1814 <__alt_exception_stack_pointer+0xf8001814>
    1b78:	2886703a 	and	r3,r5,r2
    1b7c:	5809883a 	mov	r4,r11
    1b80:	183ec31e 	bne	r3,zero,1690 <__alt_exception_stack_pointer+0xf8001690>
    1b84:	294b883a 	add	r5,r5,r5
    1b88:	2886703a 	and	r3,r5,r2
    1b8c:	21000104 	addi	r4,r4,4
    1b90:	183ffc26 	beq	r3,zero,1b84 <__alt_exception_stack_pointer+0xf8001b84>
    1b94:	003ebe06 	br	1690 <__alt_exception_stack_pointer+0xf8001690>
    1b98:	00c05504 	movi	r3,340
    1b9c:	18801236 	bltu	r3,r2,1be8 <_malloc_r+0x6f8>
    1ba0:	8804d3fa 	srli	r2,r17,15
    1ba4:	12001e04 	addi	r8,r2,120
    1ba8:	11c01dc4 	addi	r7,r2,119
    1bac:	4209883a 	add	r4,r8,r8
    1bb0:	003e6d06 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    1bb4:	00c40004 	movi	r3,4096
    1bb8:	003f4606 	br	18d4 <__alt_exception_stack_pointer+0xf80018d4>
    1bbc:	00800044 	movi	r2,1
    1bc0:	a0800115 	stw	r2,4(r20)
    1bc4:	003f7406 	br	1998 <__alt_exception_stack_pointer+0xf8001998>
    1bc8:	1805d0ba 	srai	r2,r3,2
    1bcc:	01c00044 	movi	r7,1
    1bd0:	30c00117 	ldw	r3,4(r6)
    1bd4:	388e983a 	sll	r7,r7,r2
    1bd8:	2805883a 	mov	r2,r5
    1bdc:	38c6b03a 	or	r3,r7,r3
    1be0:	30c00115 	stw	r3,4(r6)
    1be4:	003f9b06 	br	1a54 <__alt_exception_stack_pointer+0xf8001a54>
    1be8:	00c15504 	movi	r3,1364
    1bec:	18801a36 	bltu	r3,r2,1c58 <_malloc_r+0x768>
    1bf0:	8804d4ba 	srli	r2,r17,18
    1bf4:	12001f44 	addi	r8,r2,125
    1bf8:	11c01f04 	addi	r7,r2,124
    1bfc:	4209883a 	add	r4,r8,r8
    1c00:	003e5906 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    1c04:	ad400404 	addi	r21,r21,16
    1c08:	003f1706 	br	1868 <__alt_exception_stack_pointer+0xf8001868>
    1c0c:	00c01504 	movi	r3,84
    1c10:	18802336 	bltu	r3,r2,1ca0 <_malloc_r+0x7b0>
    1c14:	3804d33a 	srli	r2,r7,12
    1c18:	11401bc4 	addi	r5,r2,111
    1c1c:	10c01b84 	addi	r3,r2,110
    1c20:	294b883a 	add	r5,r5,r5
    1c24:	003f7b06 	br	1a14 <__alt_exception_stack_pointer+0xf8001a14>
    1c28:	9c000217 	ldw	r16,8(r19)
    1c2c:	00bfff04 	movi	r2,-4
    1c30:	80c00117 	ldw	r3,4(r16)
    1c34:	1886703a 	and	r3,r3,r2
    1c38:	003f5306 	br	1988 <__alt_exception_stack_pointer+0xf8001988>
    1c3c:	3083ffcc 	andi	r2,r6,4095
    1c40:	103f181e 	bne	r2,zero,18a4 <__alt_exception_stack_pointer+0xf80018a4>
    1c44:	99000217 	ldw	r4,8(r19)
    1c48:	b545883a 	add	r2,r22,r21
    1c4c:	10800054 	ori	r2,r2,1
    1c50:	20800115 	stw	r2,4(r4)
    1c54:	003f3e06 	br	1950 <__alt_exception_stack_pointer+0xf8001950>
    1c58:	01003f84 	movi	r4,254
    1c5c:	02001fc4 	movi	r8,127
    1c60:	01c01f84 	movi	r7,126
    1c64:	003e4006 	br	1568 <__alt_exception_stack_pointer+0xf8001568>
    1c68:	00800074 	movhi	r2,1
    1c6c:	108ab504 	addi	r2,r2,10964
    1c70:	15000015 	stw	r20,0(r2)
    1c74:	003f1106 	br	18bc <__alt_exception_stack_pointer+0xf80018bc>
    1c78:	00800044 	movi	r2,1
    1c7c:	002b883a 	mov	r21,zero
    1c80:	003f1f06 	br	1900 <__alt_exception_stack_pointer+0xf8001900>
    1c84:	81400204 	addi	r5,r16,8
    1c88:	9009883a 	mov	r4,r18
    1c8c:	00062f80 	call	62f8 <_free_r>
    1c90:	00800074 	movhi	r2,1
    1c94:	1091ca04 	addi	r2,r2,18216
    1c98:	10c00017 	ldw	r3,0(r2)
    1c9c:	003f2c06 	br	1950 <__alt_exception_stack_pointer+0xf8001950>
    1ca0:	00c05504 	movi	r3,340
    1ca4:	18800536 	bltu	r3,r2,1cbc <_malloc_r+0x7cc>
    1ca8:	3804d3fa 	srli	r2,r7,15
    1cac:	11401e04 	addi	r5,r2,120
    1cb0:	10c01dc4 	addi	r3,r2,119
    1cb4:	294b883a 	add	r5,r5,r5
    1cb8:	003f5606 	br	1a14 <__alt_exception_stack_pointer+0xf8001a14>
    1cbc:	00c15504 	movi	r3,1364
    1cc0:	18800536 	bltu	r3,r2,1cd8 <_malloc_r+0x7e8>
    1cc4:	3804d4ba 	srli	r2,r7,18
    1cc8:	11401f44 	addi	r5,r2,125
    1ccc:	10c01f04 	addi	r3,r2,124
    1cd0:	294b883a 	add	r5,r5,r5
    1cd4:	003f4f06 	br	1a14 <__alt_exception_stack_pointer+0xf8001a14>
    1cd8:	01403f84 	movi	r5,254
    1cdc:	00c01f84 	movi	r3,126
    1ce0:	003f4c06 	br	1a14 <__alt_exception_stack_pointer+0xf8001a14>
    1ce4:	98800117 	ldw	r2,4(r19)
    1ce8:	003fa006 	br	1b6c <__alt_exception_stack_pointer+0xf8001b6c>
    1cec:	8808d0fa 	srli	r4,r17,3
    1cf0:	20800044 	addi	r2,r4,1
    1cf4:	1085883a 	add	r2,r2,r2
    1cf8:	003e9006 	br	173c <__alt_exception_stack_pointer+0xf800173c>

00001cfc <_printf_r>:
    1cfc:	defffd04 	addi	sp,sp,-12
    1d00:	2805883a 	mov	r2,r5
    1d04:	dfc00015 	stw	ra,0(sp)
    1d08:	d9800115 	stw	r6,4(sp)
    1d0c:	d9c00215 	stw	r7,8(sp)
    1d10:	21400217 	ldw	r5,8(r4)
    1d14:	d9c00104 	addi	r7,sp,4
    1d18:	100d883a 	mov	r6,r2
    1d1c:	0001dc40 	call	1dc4 <___vfprintf_internal_r>
    1d20:	dfc00017 	ldw	ra,0(sp)
    1d24:	dec00304 	addi	sp,sp,12
    1d28:	f800283a 	ret

00001d2c <printf>:
    1d2c:	defffc04 	addi	sp,sp,-16
    1d30:	dfc00015 	stw	ra,0(sp)
    1d34:	d9400115 	stw	r5,4(sp)
    1d38:	d9800215 	stw	r6,8(sp)
    1d3c:	d9c00315 	stw	r7,12(sp)
    1d40:	00800074 	movhi	r2,1
    1d44:	108ab404 	addi	r2,r2,10960
    1d48:	10800017 	ldw	r2,0(r2)
    1d4c:	200b883a 	mov	r5,r4
    1d50:	d9800104 	addi	r6,sp,4
    1d54:	11000217 	ldw	r4,8(r2)
    1d58:	00040a00 	call	40a0 <__vfprintf_internal>
    1d5c:	dfc00017 	ldw	ra,0(sp)
    1d60:	dec00404 	addi	sp,sp,16
    1d64:	f800283a 	ret

00001d68 <_sbrk_r>:
    1d68:	defffd04 	addi	sp,sp,-12
    1d6c:	dc000015 	stw	r16,0(sp)
    1d70:	04000074 	movhi	r16,1
    1d74:	dc400115 	stw	r17,4(sp)
    1d78:	8411bf04 	addi	r16,r16,18172
    1d7c:	2023883a 	mov	r17,r4
    1d80:	2809883a 	mov	r4,r5
    1d84:	dfc00215 	stw	ra,8(sp)
    1d88:	80000015 	stw	zero,0(r16)
    1d8c:	000e0040 	call	e004 <sbrk>
    1d90:	00ffffc4 	movi	r3,-1
    1d94:	10c00526 	beq	r2,r3,1dac <_sbrk_r+0x44>
    1d98:	dfc00217 	ldw	ra,8(sp)
    1d9c:	dc400117 	ldw	r17,4(sp)
    1da0:	dc000017 	ldw	r16,0(sp)
    1da4:	dec00304 	addi	sp,sp,12
    1da8:	f800283a 	ret
    1dac:	80c00017 	ldw	r3,0(r16)
    1db0:	183ff926 	beq	r3,zero,1d98 <__alt_exception_stack_pointer+0xf8001d98>
    1db4:	88c00015 	stw	r3,0(r17)
    1db8:	003ff706 	br	1d98 <__alt_exception_stack_pointer+0xf8001d98>

00001dbc <_times_r>:
    1dbc:	2809883a 	mov	r4,r5
    1dc0:	000e0f01 	jmpi	e0f0 <times>

00001dc4 <___vfprintf_internal_r>:
    1dc4:	deffb804 	addi	sp,sp,-288
    1dc8:	dfc04715 	stw	ra,284(sp)
    1dcc:	ddc04515 	stw	r23,276(sp)
    1dd0:	dd404315 	stw	r21,268(sp)
    1dd4:	d9002d15 	stw	r4,180(sp)
    1dd8:	282f883a 	mov	r23,r5
    1ddc:	302b883a 	mov	r21,r6
    1de0:	d9c02e15 	stw	r7,184(sp)
    1de4:	df004615 	stw	fp,280(sp)
    1de8:	dd804415 	stw	r22,272(sp)
    1dec:	dd004215 	stw	r20,264(sp)
    1df0:	dcc04115 	stw	r19,260(sp)
    1df4:	dc804015 	stw	r18,256(sp)
    1df8:	dc403f15 	stw	r17,252(sp)
    1dfc:	dc003e15 	stw	r16,248(sp)
    1e00:	000683c0 	call	683c <_localeconv_r>
    1e04:	10800017 	ldw	r2,0(r2)
    1e08:	1009883a 	mov	r4,r2
    1e0c:	d8803415 	stw	r2,208(sp)
    1e10:	00080c00 	call	80c0 <strlen>
    1e14:	d8803715 	stw	r2,220(sp)
    1e18:	d8802d17 	ldw	r2,180(sp)
    1e1c:	10000226 	beq	r2,zero,1e28 <___vfprintf_internal_r+0x64>
    1e20:	10800e17 	ldw	r2,56(r2)
    1e24:	1000fb26 	beq	r2,zero,2214 <___vfprintf_internal_r+0x450>
    1e28:	b880030b 	ldhu	r2,12(r23)
    1e2c:	10c8000c 	andi	r3,r2,8192
    1e30:	1800061e 	bne	r3,zero,1e4c <___vfprintf_internal_r+0x88>
    1e34:	b9001917 	ldw	r4,100(r23)
    1e38:	00f7ffc4 	movi	r3,-8193
    1e3c:	10880014 	ori	r2,r2,8192
    1e40:	20c6703a 	and	r3,r4,r3
    1e44:	b880030d 	sth	r2,12(r23)
    1e48:	b8c01915 	stw	r3,100(r23)
    1e4c:	10c0020c 	andi	r3,r2,8
    1e50:	1800c326 	beq	r3,zero,2160 <___vfprintf_internal_r+0x39c>
    1e54:	b8c00417 	ldw	r3,16(r23)
    1e58:	1800c126 	beq	r3,zero,2160 <___vfprintf_internal_r+0x39c>
    1e5c:	1080068c 	andi	r2,r2,26
    1e60:	00c00284 	movi	r3,10
    1e64:	10c0c626 	beq	r2,r3,2180 <___vfprintf_internal_r+0x3bc>
    1e68:	d8c00404 	addi	r3,sp,16
    1e6c:	05000074 	movhi	r20,1
    1e70:	d9001e04 	addi	r4,sp,120
    1e74:	a5035d84 	addi	r20,r20,3446
    1e78:	d8c01e15 	stw	r3,120(sp)
    1e7c:	d8002015 	stw	zero,128(sp)
    1e80:	d8001f15 	stw	zero,124(sp)
    1e84:	d8003315 	stw	zero,204(sp)
    1e88:	d8003615 	stw	zero,216(sp)
    1e8c:	d8003815 	stw	zero,224(sp)
    1e90:	1811883a 	mov	r8,r3
    1e94:	d8003915 	stw	zero,228(sp)
    1e98:	d8003a15 	stw	zero,232(sp)
    1e9c:	d8002f15 	stw	zero,188(sp)
    1ea0:	d9002815 	stw	r4,160(sp)
    1ea4:	a8800007 	ldb	r2,0(r21)
    1ea8:	10028b26 	beq	r2,zero,28d8 <___vfprintf_internal_r+0xb14>
    1eac:	00c00944 	movi	r3,37
    1eb0:	a823883a 	mov	r17,r21
    1eb4:	10c0021e 	bne	r2,r3,1ec0 <___vfprintf_internal_r+0xfc>
    1eb8:	00001406 	br	1f0c <___vfprintf_internal_r+0x148>
    1ebc:	10c00326 	beq	r2,r3,1ecc <___vfprintf_internal_r+0x108>
    1ec0:	8c400044 	addi	r17,r17,1
    1ec4:	88800007 	ldb	r2,0(r17)
    1ec8:	103ffc1e 	bne	r2,zero,1ebc <__alt_exception_stack_pointer+0xf8001ebc>
    1ecc:	8d61c83a 	sub	r16,r17,r21
    1ed0:	80000e26 	beq	r16,zero,1f0c <___vfprintf_internal_r+0x148>
    1ed4:	d8c02017 	ldw	r3,128(sp)
    1ed8:	d8801f17 	ldw	r2,124(sp)
    1edc:	45400015 	stw	r21,0(r8)
    1ee0:	1c07883a 	add	r3,r3,r16
    1ee4:	10800044 	addi	r2,r2,1
    1ee8:	d8c02015 	stw	r3,128(sp)
    1eec:	44000115 	stw	r16,4(r8)
    1ef0:	d8801f15 	stw	r2,124(sp)
    1ef4:	00c001c4 	movi	r3,7
    1ef8:	1880a916 	blt	r3,r2,21a0 <___vfprintf_internal_r+0x3dc>
    1efc:	42000204 	addi	r8,r8,8
    1f00:	d9402f17 	ldw	r5,188(sp)
    1f04:	2c0b883a 	add	r5,r5,r16
    1f08:	d9402f15 	stw	r5,188(sp)
    1f0c:	88800007 	ldb	r2,0(r17)
    1f10:	1000aa26 	beq	r2,zero,21bc <___vfprintf_internal_r+0x3f8>
    1f14:	8d400044 	addi	r21,r17,1
    1f18:	8c400047 	ldb	r17,1(r17)
    1f1c:	0021883a 	mov	r16,zero
    1f20:	00bfffc4 	movi	r2,-1
    1f24:	0025883a 	mov	r18,zero
    1f28:	dc002905 	stb	r16,164(sp)
    1f2c:	d8002785 	stb	zero,158(sp)
    1f30:	d8002b05 	stb	zero,172(sp)
    1f34:	d8802a15 	stw	r2,168(sp)
    1f38:	d8003115 	stw	zero,196(sp)
    1f3c:	04c01604 	movi	r19,88
    1f40:	05800244 	movi	r22,9
    1f44:	9021883a 	mov	r16,r18
    1f48:	4039883a 	mov	fp,r8
    1f4c:	ad400044 	addi	r21,r21,1
    1f50:	88bff804 	addi	r2,r17,-32
    1f54:	98833236 	bltu	r19,r2,2c20 <___vfprintf_internal_r+0xe5c>
    1f58:	100490ba 	slli	r2,r2,2
    1f5c:	00c00034 	movhi	r3,0
    1f60:	18c7dc04 	addi	r3,r3,8048
    1f64:	10c5883a 	add	r2,r2,r3
    1f68:	10800017 	ldw	r2,0(r2)
    1f6c:	1000683a 	jmp	r2
    1f70:	00002b18 	cmpnei	zero,zero,172
    1f74:	00002c20 	cmpeqi	zero,zero,176
    1f78:	00002c20 	cmpeqi	zero,zero,176
    1f7c:	00002b38 	rdprs	zero,zero,172
    1f80:	00002c20 	cmpeqi	zero,zero,176
    1f84:	00002c20 	cmpeqi	zero,zero,176
    1f88:	00002c20 	cmpeqi	zero,zero,176
    1f8c:	00002c20 	cmpeqi	zero,zero,176
    1f90:	00002c20 	cmpeqi	zero,zero,176
    1f94:	00002c20 	cmpeqi	zero,zero,176
    1f98:	00002220 	cmpeqi	zero,zero,136
    1f9c:	00002a28 	cmpgeui	zero,zero,168
    1fa0:	00002c20 	cmpeqi	zero,zero,176
    1fa4:	000020e4 	muli	zero,zero,131
    1fa8:	00002244 	movi	zero,137
    1fac:	00002c20 	cmpeqi	zero,zero,176
    1fb0:	00002294 	movui	zero,138
    1fb4:	000022a0 	cmpeqi	zero,zero,138
    1fb8:	000022a0 	cmpeqi	zero,zero,138
    1fbc:	000022a0 	cmpeqi	zero,zero,138
    1fc0:	000022a0 	cmpeqi	zero,zero,138
    1fc4:	000022a0 	cmpeqi	zero,zero,138
    1fc8:	000022a0 	cmpeqi	zero,zero,138
    1fcc:	000022a0 	cmpeqi	zero,zero,138
    1fd0:	000022a0 	cmpeqi	zero,zero,138
    1fd4:	000022a0 	cmpeqi	zero,zero,138
    1fd8:	00002c20 	cmpeqi	zero,zero,176
    1fdc:	00002c20 	cmpeqi	zero,zero,176
    1fe0:	00002c20 	cmpeqi	zero,zero,176
    1fe4:	00002c20 	cmpeqi	zero,zero,176
    1fe8:	00002c20 	cmpeqi	zero,zero,176
    1fec:	00002c20 	cmpeqi	zero,zero,176
    1ff0:	00002c20 	cmpeqi	zero,zero,176
    1ff4:	00002c20 	cmpeqi	zero,zero,176
    1ff8:	00002c20 	cmpeqi	zero,zero,176
    1ffc:	00002c20 	cmpeqi	zero,zero,176
    2000:	000022dc 	xori	zero,zero,139
    2004:	000023a4 	muli	zero,zero,142
    2008:	00002c20 	cmpeqi	zero,zero,176
    200c:	000023a4 	muli	zero,zero,142
    2010:	00002c20 	cmpeqi	zero,zero,176
    2014:	00002c20 	cmpeqi	zero,zero,176
    2018:	00002c20 	cmpeqi	zero,zero,176
    201c:	00002c20 	cmpeqi	zero,zero,176
    2020:	00002450 	cmplti	zero,zero,145
    2024:	00002c20 	cmpeqi	zero,zero,176
    2028:	00002c20 	cmpeqi	zero,zero,176
    202c:	0000245c 	xori	zero,zero,145
    2030:	00002c20 	cmpeqi	zero,zero,176
    2034:	00002c20 	cmpeqi	zero,zero,176
    2038:	00002c20 	cmpeqi	zero,zero,176
    203c:	00002c20 	cmpeqi	zero,zero,176
    2040:	00002c20 	cmpeqi	zero,zero,176
    2044:	000028e0 	cmpeqi	zero,zero,163
    2048:	00002c20 	cmpeqi	zero,zero,176
    204c:	00002c20 	cmpeqi	zero,zero,176
    2050:	0000294c 	andi	zero,zero,165
    2054:	00002c20 	cmpeqi	zero,zero,176
    2058:	00002c20 	cmpeqi	zero,zero,176
    205c:	00002c20 	cmpeqi	zero,zero,176
    2060:	00002c20 	cmpeqi	zero,zero,176
    2064:	00002c20 	cmpeqi	zero,zero,176
    2068:	00002c20 	cmpeqi	zero,zero,176
    206c:	00002c20 	cmpeqi	zero,zero,176
    2070:	00002c20 	cmpeqi	zero,zero,176
    2074:	00002c20 	cmpeqi	zero,zero,176
    2078:	00002c20 	cmpeqi	zero,zero,176
    207c:	00002bc4 	movi	zero,175
    2080:	00002b44 	movi	zero,173
    2084:	000023a4 	muli	zero,zero,142
    2088:	000023a4 	muli	zero,zero,142
    208c:	000023a4 	muli	zero,zero,142
    2090:	00002b64 	muli	zero,zero,173
    2094:	00002b44 	movi	zero,173
    2098:	00002c20 	cmpeqi	zero,zero,176
    209c:	00002c20 	cmpeqi	zero,zero,176
    20a0:	00002b70 	cmpltui	zero,zero,173
    20a4:	00002c20 	cmpeqi	zero,zero,176
    20a8:	00002b84 	movi	zero,174
    20ac:	00002a08 	cmpgei	zero,zero,168
    20b0:	000020f0 	cmpltui	zero,zero,131
    20b4:	00002a40 	call	2a4 <alt_dma_txchan_send+0x2c>
    20b8:	00002c20 	cmpeqi	zero,zero,176
    20bc:	00002a4c 	andi	zero,zero,169
    20c0:	00002c20 	cmpeqi	zero,zero,176
    20c4:	00002ab0 	cmpltui	zero,zero,170
    20c8:	00002c20 	cmpeqi	zero,zero,176
    20cc:	00002c20 	cmpeqi	zero,zero,176
    20d0:	00002ad0 	cmplti	zero,zero,171
    20d4:	d8c03117 	ldw	r3,196(sp)
    20d8:	d8802e15 	stw	r2,184(sp)
    20dc:	00c7c83a 	sub	r3,zero,r3
    20e0:	d8c03115 	stw	r3,196(sp)
    20e4:	84000114 	ori	r16,r16,4
    20e8:	ac400007 	ldb	r17,0(r21)
    20ec:	003f9706 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    20f0:	00800c04 	movi	r2,48
    20f4:	d8802705 	stb	r2,156(sp)
    20f8:	00801e04 	movi	r2,120
    20fc:	d8802745 	stb	r2,157(sp)
    2100:	d9002a17 	ldw	r4,168(sp)
    2104:	d8802e17 	ldw	r2,184(sp)
    2108:	d8002785 	stb	zero,158(sp)
    210c:	e011883a 	mov	r8,fp
    2110:	10c00104 	addi	r3,r2,4
    2114:	14c00017 	ldw	r19,0(r2)
    2118:	002d883a 	mov	r22,zero
    211c:	80800094 	ori	r2,r16,2
    2120:	2002ca16 	blt	r4,zero,2c4c <___vfprintf_internal_r+0xe88>
    2124:	00bfdfc4 	movi	r2,-129
    2128:	80a4703a 	and	r18,r16,r2
    212c:	d8c02e15 	stw	r3,184(sp)
    2130:	94800094 	ori	r18,r18,2
    2134:	9802b41e 	bne	r19,zero,2c08 <___vfprintf_internal_r+0xe44>
    2138:	01400074 	movhi	r5,1
    213c:	29435604 	addi	r5,r5,3416
    2140:	d9403915 	stw	r5,228(sp)
    2144:	04401e04 	movi	r17,120
    2148:	d8802a17 	ldw	r2,168(sp)
    214c:	0039883a 	mov	fp,zero
    2150:	1001fa26 	beq	r2,zero,293c <___vfprintf_internal_r+0xb78>
    2154:	0027883a 	mov	r19,zero
    2158:	002d883a 	mov	r22,zero
    215c:	00021906 	br	29c4 <___vfprintf_internal_r+0xc00>
    2160:	d9002d17 	ldw	r4,180(sp)
    2164:	b80b883a 	mov	r5,r23
    2168:	00041780 	call	4178 <__swsetup_r>
    216c:	1005dc1e 	bne	r2,zero,38e0 <___vfprintf_internal_r+0x1b1c>
    2170:	b880030b 	ldhu	r2,12(r23)
    2174:	00c00284 	movi	r3,10
    2178:	1080068c 	andi	r2,r2,26
    217c:	10ff3a1e 	bne	r2,r3,1e68 <__alt_exception_stack_pointer+0xf8001e68>
    2180:	b880038f 	ldh	r2,14(r23)
    2184:	103f3816 	blt	r2,zero,1e68 <__alt_exception_stack_pointer+0xf8001e68>
    2188:	d9c02e17 	ldw	r7,184(sp)
    218c:	d9002d17 	ldw	r4,180(sp)
    2190:	a80d883a 	mov	r6,r21
    2194:	b80b883a 	mov	r5,r23
    2198:	00040bc0 	call	40bc <__sbprintf>
    219c:	00001106 	br	21e4 <___vfprintf_internal_r+0x420>
    21a0:	d9002d17 	ldw	r4,180(sp)
    21a4:	d9801e04 	addi	r6,sp,120
    21a8:	b80b883a 	mov	r5,r23
    21ac:	00082540 	call	8254 <__sprint_r>
    21b0:	1000081e 	bne	r2,zero,21d4 <___vfprintf_internal_r+0x410>
    21b4:	da000404 	addi	r8,sp,16
    21b8:	003f5106 	br	1f00 <__alt_exception_stack_pointer+0xf8001f00>
    21bc:	d8802017 	ldw	r2,128(sp)
    21c0:	10000426 	beq	r2,zero,21d4 <___vfprintf_internal_r+0x410>
    21c4:	d9002d17 	ldw	r4,180(sp)
    21c8:	d9801e04 	addi	r6,sp,120
    21cc:	b80b883a 	mov	r5,r23
    21d0:	00082540 	call	8254 <__sprint_r>
    21d4:	b880030b 	ldhu	r2,12(r23)
    21d8:	1080100c 	andi	r2,r2,64
    21dc:	1005c01e 	bne	r2,zero,38e0 <___vfprintf_internal_r+0x1b1c>
    21e0:	d8802f17 	ldw	r2,188(sp)
    21e4:	dfc04717 	ldw	ra,284(sp)
    21e8:	df004617 	ldw	fp,280(sp)
    21ec:	ddc04517 	ldw	r23,276(sp)
    21f0:	dd804417 	ldw	r22,272(sp)
    21f4:	dd404317 	ldw	r21,268(sp)
    21f8:	dd004217 	ldw	r20,264(sp)
    21fc:	dcc04117 	ldw	r19,260(sp)
    2200:	dc804017 	ldw	r18,256(sp)
    2204:	dc403f17 	ldw	r17,252(sp)
    2208:	dc003e17 	ldw	r16,248(sp)
    220c:	dec04804 	addi	sp,sp,288
    2210:	f800283a 	ret
    2214:	d9002d17 	ldw	r4,180(sp)
    2218:	00061840 	call	6184 <__sinit>
    221c:	003f0206 	br	1e28 <__alt_exception_stack_pointer+0xf8001e28>
    2220:	d9002e17 	ldw	r4,184(sp)
    2224:	d9402e17 	ldw	r5,184(sp)
    2228:	21000017 	ldw	r4,0(r4)
    222c:	28800104 	addi	r2,r5,4
    2230:	d9003115 	stw	r4,196(sp)
    2234:	203fa716 	blt	r4,zero,20d4 <__alt_exception_stack_pointer+0xf80020d4>
    2238:	d8802e15 	stw	r2,184(sp)
    223c:	ac400007 	ldb	r17,0(r21)
    2240:	003f4206 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2244:	ac400007 	ldb	r17,0(r21)
    2248:	01000a84 	movi	r4,42
    224c:	a8c00044 	addi	r3,r21,1
    2250:	89075826 	beq	r17,r4,3fb4 <___vfprintf_internal_r+0x21f0>
    2254:	8cbff404 	addi	r18,r17,-48
    2258:	b486ae36 	bltu	r22,r18,3d14 <___vfprintf_internal_r+0x1f50>
    225c:	0009883a 	mov	r4,zero
    2260:	1823883a 	mov	r17,r3
    2264:	01400284 	movi	r5,10
    2268:	00009780 	call	978 <__mulsi3>
    226c:	88c00007 	ldb	r3,0(r17)
    2270:	1489883a 	add	r4,r2,r18
    2274:	8d400044 	addi	r21,r17,1
    2278:	1cbff404 	addi	r18,r3,-48
    227c:	a823883a 	mov	r17,r21
    2280:	b4bff82e 	bgeu	r22,r18,2264 <__alt_exception_stack_pointer+0xf8002264>
    2284:	1823883a 	mov	r17,r3
    2288:	2005f616 	blt	r4,zero,3a64 <___vfprintf_internal_r+0x1ca0>
    228c:	d9002a15 	stw	r4,168(sp)
    2290:	003f2f06 	br	1f50 <__alt_exception_stack_pointer+0xf8001f50>
    2294:	84002014 	ori	r16,r16,128
    2298:	ac400007 	ldb	r17,0(r21)
    229c:	003f2b06 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    22a0:	8cbff404 	addi	r18,r17,-48
    22a4:	d8003115 	stw	zero,196(sp)
    22a8:	0009883a 	mov	r4,zero
    22ac:	a823883a 	mov	r17,r21
    22b0:	01400284 	movi	r5,10
    22b4:	00009780 	call	978 <__mulsi3>
    22b8:	88c00007 	ldb	r3,0(r17)
    22bc:	9089883a 	add	r4,r18,r2
    22c0:	ad400044 	addi	r21,r21,1
    22c4:	1cbff404 	addi	r18,r3,-48
    22c8:	a823883a 	mov	r17,r21
    22cc:	b4bff82e 	bgeu	r22,r18,22b0 <__alt_exception_stack_pointer+0xf80022b0>
    22d0:	1823883a 	mov	r17,r3
    22d4:	d9003115 	stw	r4,196(sp)
    22d8:	003f1d06 	br	1f50 <__alt_exception_stack_pointer+0xf8001f50>
    22dc:	8025883a 	mov	r18,r16
    22e0:	dc002903 	ldbu	r16,164(sp)
    22e4:	e011883a 	mov	r8,fp
    22e8:	84003fcc 	andi	r16,r16,255
    22ec:	8007531e 	bne	r16,zero,403c <___vfprintf_internal_r+0x2278>
    22f0:	94800414 	ori	r18,r18,16
    22f4:	9080080c 	andi	r2,r18,32
    22f8:	1003a326 	beq	r2,zero,3188 <___vfprintf_internal_r+0x13c4>
    22fc:	d9002e17 	ldw	r4,184(sp)
    2300:	20800117 	ldw	r2,4(r4)
    2304:	24c00017 	ldw	r19,0(r4)
    2308:	21000204 	addi	r4,r4,8
    230c:	d9002e15 	stw	r4,184(sp)
    2310:	102d883a 	mov	r22,r2
    2314:	10047316 	blt	r2,zero,34e4 <___vfprintf_internal_r+0x1720>
    2318:	d9002a17 	ldw	r4,168(sp)
    231c:	df002783 	ldbu	fp,158(sp)
    2320:	2003e416 	blt	r4,zero,32b4 <___vfprintf_internal_r+0x14f0>
    2324:	00ffdfc4 	movi	r3,-129
    2328:	9d84b03a 	or	r2,r19,r22
    232c:	90e4703a 	and	r18,r18,r3
    2330:	10018026 	beq	r2,zero,2934 <___vfprintf_internal_r+0xb70>
    2334:	b003ab26 	beq	r22,zero,31e4 <___vfprintf_internal_r+0x1420>
    2338:	dc402915 	stw	r17,164(sp)
    233c:	dc001e04 	addi	r16,sp,120
    2340:	b023883a 	mov	r17,r22
    2344:	402d883a 	mov	r22,r8
    2348:	9809883a 	mov	r4,r19
    234c:	880b883a 	mov	r5,r17
    2350:	01800284 	movi	r6,10
    2354:	000f883a 	mov	r7,zero
    2358:	000b3200 	call	b320 <__umoddi3>
    235c:	10800c04 	addi	r2,r2,48
    2360:	843fffc4 	addi	r16,r16,-1
    2364:	9809883a 	mov	r4,r19
    2368:	880b883a 	mov	r5,r17
    236c:	80800005 	stb	r2,0(r16)
    2370:	01800284 	movi	r6,10
    2374:	000f883a 	mov	r7,zero
    2378:	000ad240 	call	ad24 <__udivdi3>
    237c:	1027883a 	mov	r19,r2
    2380:	10c4b03a 	or	r2,r2,r3
    2384:	1823883a 	mov	r17,r3
    2388:	103fef1e 	bne	r2,zero,2348 <__alt_exception_stack_pointer+0xf8002348>
    238c:	d8c02817 	ldw	r3,160(sp)
    2390:	dc402917 	ldw	r17,164(sp)
    2394:	b011883a 	mov	r8,r22
    2398:	1c07c83a 	sub	r3,r3,r16
    239c:	d8c02b15 	stw	r3,172(sp)
    23a0:	00005f06 	br	2520 <___vfprintf_internal_r+0x75c>
    23a4:	8025883a 	mov	r18,r16
    23a8:	dc002903 	ldbu	r16,164(sp)
    23ac:	e011883a 	mov	r8,fp
    23b0:	84003fcc 	andi	r16,r16,255
    23b4:	80071e1e 	bne	r16,zero,4030 <___vfprintf_internal_r+0x226c>
    23b8:	9080020c 	andi	r2,r18,8
    23bc:	1004af26 	beq	r2,zero,367c <___vfprintf_internal_r+0x18b8>
    23c0:	d9002e17 	ldw	r4,184(sp)
    23c4:	d9402e17 	ldw	r5,184(sp)
    23c8:	d8802e17 	ldw	r2,184(sp)
    23cc:	21000017 	ldw	r4,0(r4)
    23d0:	29400117 	ldw	r5,4(r5)
    23d4:	10800204 	addi	r2,r2,8
    23d8:	d9003615 	stw	r4,216(sp)
    23dc:	d9403815 	stw	r5,224(sp)
    23e0:	d8802e15 	stw	r2,184(sp)
    23e4:	d9003617 	ldw	r4,216(sp)
    23e8:	d9403817 	ldw	r5,224(sp)
    23ec:	da003d15 	stw	r8,244(sp)
    23f0:	04000044 	movi	r16,1
    23f4:	0007e340 	call	7e34 <__fpclassifyd>
    23f8:	da003d17 	ldw	r8,244(sp)
    23fc:	1404441e 	bne	r2,r16,3510 <___vfprintf_internal_r+0x174c>
    2400:	d9003617 	ldw	r4,216(sp)
    2404:	d9403817 	ldw	r5,224(sp)
    2408:	000d883a 	mov	r6,zero
    240c:	000f883a 	mov	r7,zero
    2410:	000c2f40 	call	c2f4 <__ledf2>
    2414:	da003d17 	ldw	r8,244(sp)
    2418:	1005e316 	blt	r2,zero,3ba8 <___vfprintf_internal_r+0x1de4>
    241c:	df002783 	ldbu	fp,158(sp)
    2420:	008011c4 	movi	r2,71
    2424:	1445580e 	bge	r2,r17,3988 <___vfprintf_internal_r+0x1bc4>
    2428:	04000074 	movhi	r16,1
    242c:	84034e04 	addi	r16,r16,3384
    2430:	00c000c4 	movi	r3,3
    2434:	00bfdfc4 	movi	r2,-129
    2438:	d8c02915 	stw	r3,164(sp)
    243c:	90a4703a 	and	r18,r18,r2
    2440:	d8c02b15 	stw	r3,172(sp)
    2444:	d8002a15 	stw	zero,168(sp)
    2448:	d8003215 	stw	zero,200(sp)
    244c:	00003a06 	br	2538 <___vfprintf_internal_r+0x774>
    2450:	84000214 	ori	r16,r16,8
    2454:	ac400007 	ldb	r17,0(r21)
    2458:	003ebc06 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    245c:	8025883a 	mov	r18,r16
    2460:	dc002903 	ldbu	r16,164(sp)
    2464:	e011883a 	mov	r8,fp
    2468:	84003fcc 	andi	r16,r16,255
    246c:	8007001e 	bne	r16,zero,4070 <___vfprintf_internal_r+0x22ac>
    2470:	94800414 	ori	r18,r18,16
    2474:	9080080c 	andi	r2,r18,32
    2478:	1002fa26 	beq	r2,zero,3064 <___vfprintf_internal_r+0x12a0>
    247c:	d9002e17 	ldw	r4,184(sp)
    2480:	d9402a17 	ldw	r5,168(sp)
    2484:	d8002785 	stb	zero,158(sp)
    2488:	20800204 	addi	r2,r4,8
    248c:	24c00017 	ldw	r19,0(r4)
    2490:	25800117 	ldw	r22,4(r4)
    2494:	2804b116 	blt	r5,zero,375c <___vfprintf_internal_r+0x1998>
    2498:	013fdfc4 	movi	r4,-129
    249c:	9d86b03a 	or	r3,r19,r22
    24a0:	d8802e15 	stw	r2,184(sp)
    24a4:	9124703a 	and	r18,r18,r4
    24a8:	1802fb1e 	bne	r3,zero,3098 <___vfprintf_internal_r+0x12d4>
    24ac:	d8c02a17 	ldw	r3,168(sp)
    24b0:	0039883a 	mov	fp,zero
    24b4:	1805e526 	beq	r3,zero,3c4c <___vfprintf_internal_r+0x1e88>
    24b8:	0027883a 	mov	r19,zero
    24bc:	002d883a 	mov	r22,zero
    24c0:	dc001e04 	addi	r16,sp,120
    24c4:	9806d0fa 	srli	r3,r19,3
    24c8:	b008977a 	slli	r4,r22,29
    24cc:	b02cd0fa 	srli	r22,r22,3
    24d0:	9cc001cc 	andi	r19,r19,7
    24d4:	98800c04 	addi	r2,r19,48
    24d8:	843fffc4 	addi	r16,r16,-1
    24dc:	20e6b03a 	or	r19,r4,r3
    24e0:	80800005 	stb	r2,0(r16)
    24e4:	9d86b03a 	or	r3,r19,r22
    24e8:	183ff61e 	bne	r3,zero,24c4 <__alt_exception_stack_pointer+0xf80024c4>
    24ec:	90c0004c 	andi	r3,r18,1
    24f0:	18014126 	beq	r3,zero,29f8 <___vfprintf_internal_r+0xc34>
    24f4:	10803fcc 	andi	r2,r2,255
    24f8:	1080201c 	xori	r2,r2,128
    24fc:	10bfe004 	addi	r2,r2,-128
    2500:	00c00c04 	movi	r3,48
    2504:	10c13c26 	beq	r2,r3,29f8 <___vfprintf_internal_r+0xc34>
    2508:	80ffffc5 	stb	r3,-1(r16)
    250c:	d8c02817 	ldw	r3,160(sp)
    2510:	80bfffc4 	addi	r2,r16,-1
    2514:	1021883a 	mov	r16,r2
    2518:	1887c83a 	sub	r3,r3,r2
    251c:	d8c02b15 	stw	r3,172(sp)
    2520:	d8802b17 	ldw	r2,172(sp)
    2524:	d9002a17 	ldw	r4,168(sp)
    2528:	1100010e 	bge	r2,r4,2530 <___vfprintf_internal_r+0x76c>
    252c:	2005883a 	mov	r2,r4
    2530:	d8802915 	stw	r2,164(sp)
    2534:	d8003215 	stw	zero,200(sp)
    2538:	e7003fcc 	andi	fp,fp,255
    253c:	e700201c 	xori	fp,fp,128
    2540:	e73fe004 	addi	fp,fp,-128
    2544:	e0000326 	beq	fp,zero,2554 <___vfprintf_internal_r+0x790>
    2548:	d8c02917 	ldw	r3,164(sp)
    254c:	18c00044 	addi	r3,r3,1
    2550:	d8c02915 	stw	r3,164(sp)
    2554:	90c0008c 	andi	r3,r18,2
    2558:	d8c02c15 	stw	r3,176(sp)
    255c:	18000326 	beq	r3,zero,256c <___vfprintf_internal_r+0x7a8>
    2560:	d8c02917 	ldw	r3,164(sp)
    2564:	18c00084 	addi	r3,r3,2
    2568:	d8c02915 	stw	r3,164(sp)
    256c:	90c0210c 	andi	r3,r18,132
    2570:	d8c03015 	stw	r3,192(sp)
    2574:	1801c51e 	bne	r3,zero,2c8c <___vfprintf_internal_r+0xec8>
    2578:	d9003117 	ldw	r4,196(sp)
    257c:	d8c02917 	ldw	r3,164(sp)
    2580:	20e7c83a 	sub	r19,r4,r3
    2584:	04c1c10e 	bge	zero,r19,2c8c <___vfprintf_internal_r+0xec8>
    2588:	02400404 	movi	r9,16
    258c:	d8c02017 	ldw	r3,128(sp)
    2590:	d8801f17 	ldw	r2,124(sp)
    2594:	4cc52f0e 	bge	r9,r19,3a54 <___vfprintf_internal_r+0x1c90>
    2598:	01400074 	movhi	r5,1
    259c:	29436184 	addi	r5,r5,3462
    25a0:	dc403b15 	stw	r17,236(sp)
    25a4:	d9403515 	stw	r5,212(sp)
    25a8:	9823883a 	mov	r17,r19
    25ac:	482d883a 	mov	r22,r9
    25b0:	9027883a 	mov	r19,r18
    25b4:	070001c4 	movi	fp,7
    25b8:	8025883a 	mov	r18,r16
    25bc:	dc002d17 	ldw	r16,180(sp)
    25c0:	00000306 	br	25d0 <___vfprintf_internal_r+0x80c>
    25c4:	8c7ffc04 	addi	r17,r17,-16
    25c8:	42000204 	addi	r8,r8,8
    25cc:	b440130e 	bge	r22,r17,261c <___vfprintf_internal_r+0x858>
    25d0:	01000074 	movhi	r4,1
    25d4:	18c00404 	addi	r3,r3,16
    25d8:	10800044 	addi	r2,r2,1
    25dc:	21036184 	addi	r4,r4,3462
    25e0:	41000015 	stw	r4,0(r8)
    25e4:	45800115 	stw	r22,4(r8)
    25e8:	d8c02015 	stw	r3,128(sp)
    25ec:	d8801f15 	stw	r2,124(sp)
    25f0:	e0bff40e 	bge	fp,r2,25c4 <__alt_exception_stack_pointer+0xf80025c4>
    25f4:	d9801e04 	addi	r6,sp,120
    25f8:	b80b883a 	mov	r5,r23
    25fc:	8009883a 	mov	r4,r16
    2600:	00082540 	call	8254 <__sprint_r>
    2604:	103ef31e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2608:	8c7ffc04 	addi	r17,r17,-16
    260c:	d8c02017 	ldw	r3,128(sp)
    2610:	d8801f17 	ldw	r2,124(sp)
    2614:	da000404 	addi	r8,sp,16
    2618:	b47fed16 	blt	r22,r17,25d0 <__alt_exception_stack_pointer+0xf80025d0>
    261c:	9021883a 	mov	r16,r18
    2620:	9825883a 	mov	r18,r19
    2624:	8827883a 	mov	r19,r17
    2628:	dc403b17 	ldw	r17,236(sp)
    262c:	d9403517 	ldw	r5,212(sp)
    2630:	98c7883a 	add	r3,r19,r3
    2634:	10800044 	addi	r2,r2,1
    2638:	41400015 	stw	r5,0(r8)
    263c:	44c00115 	stw	r19,4(r8)
    2640:	d8c02015 	stw	r3,128(sp)
    2644:	d8801f15 	stw	r2,124(sp)
    2648:	010001c4 	movi	r4,7
    264c:	2082c516 	blt	r4,r2,3164 <___vfprintf_internal_r+0x13a0>
    2650:	df002787 	ldb	fp,158(sp)
    2654:	42000204 	addi	r8,r8,8
    2658:	e0000c26 	beq	fp,zero,268c <___vfprintf_internal_r+0x8c8>
    265c:	d8801f17 	ldw	r2,124(sp)
    2660:	d9002784 	addi	r4,sp,158
    2664:	18c00044 	addi	r3,r3,1
    2668:	10800044 	addi	r2,r2,1
    266c:	41000015 	stw	r4,0(r8)
    2670:	01000044 	movi	r4,1
    2674:	41000115 	stw	r4,4(r8)
    2678:	d8c02015 	stw	r3,128(sp)
    267c:	d8801f15 	stw	r2,124(sp)
    2680:	010001c4 	movi	r4,7
    2684:	20825e16 	blt	r4,r2,3000 <___vfprintf_internal_r+0x123c>
    2688:	42000204 	addi	r8,r8,8
    268c:	d8802c17 	ldw	r2,176(sp)
    2690:	10000c26 	beq	r2,zero,26c4 <___vfprintf_internal_r+0x900>
    2694:	d8801f17 	ldw	r2,124(sp)
    2698:	d9002704 	addi	r4,sp,156
    269c:	18c00084 	addi	r3,r3,2
    26a0:	10800044 	addi	r2,r2,1
    26a4:	41000015 	stw	r4,0(r8)
    26a8:	01000084 	movi	r4,2
    26ac:	41000115 	stw	r4,4(r8)
    26b0:	d8c02015 	stw	r3,128(sp)
    26b4:	d8801f15 	stw	r2,124(sp)
    26b8:	010001c4 	movi	r4,7
    26bc:	20825816 	blt	r4,r2,3020 <___vfprintf_internal_r+0x125c>
    26c0:	42000204 	addi	r8,r8,8
    26c4:	d9003017 	ldw	r4,192(sp)
    26c8:	00802004 	movi	r2,128
    26cc:	2081bb26 	beq	r4,r2,2dbc <___vfprintf_internal_r+0xff8>
    26d0:	d9402a17 	ldw	r5,168(sp)
    26d4:	d8802b17 	ldw	r2,172(sp)
    26d8:	28adc83a 	sub	r22,r5,r2
    26dc:	0580310e 	bge	zero,r22,27a4 <___vfprintf_internal_r+0x9e0>
    26e0:	07000404 	movi	fp,16
    26e4:	d8801f17 	ldw	r2,124(sp)
    26e8:	e584360e 	bge	fp,r22,37c4 <___vfprintf_internal_r+0x1a00>
    26ec:	01400074 	movhi	r5,1
    26f0:	29435d84 	addi	r5,r5,3446
    26f4:	dc402a15 	stw	r17,168(sp)
    26f8:	d9402c15 	stw	r5,176(sp)
    26fc:	b023883a 	mov	r17,r22
    2700:	04c001c4 	movi	r19,7
    2704:	a82d883a 	mov	r22,r21
    2708:	902b883a 	mov	r21,r18
    270c:	8025883a 	mov	r18,r16
    2710:	dc002d17 	ldw	r16,180(sp)
    2714:	00000306 	br	2724 <___vfprintf_internal_r+0x960>
    2718:	8c7ffc04 	addi	r17,r17,-16
    271c:	42000204 	addi	r8,r8,8
    2720:	e440110e 	bge	fp,r17,2768 <___vfprintf_internal_r+0x9a4>
    2724:	18c00404 	addi	r3,r3,16
    2728:	10800044 	addi	r2,r2,1
    272c:	45000015 	stw	r20,0(r8)
    2730:	47000115 	stw	fp,4(r8)
    2734:	d8c02015 	stw	r3,128(sp)
    2738:	d8801f15 	stw	r2,124(sp)
    273c:	98bff60e 	bge	r19,r2,2718 <__alt_exception_stack_pointer+0xf8002718>
    2740:	d9801e04 	addi	r6,sp,120
    2744:	b80b883a 	mov	r5,r23
    2748:	8009883a 	mov	r4,r16
    274c:	00082540 	call	8254 <__sprint_r>
    2750:	103ea01e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2754:	8c7ffc04 	addi	r17,r17,-16
    2758:	d8c02017 	ldw	r3,128(sp)
    275c:	d8801f17 	ldw	r2,124(sp)
    2760:	da000404 	addi	r8,sp,16
    2764:	e47fef16 	blt	fp,r17,2724 <__alt_exception_stack_pointer+0xf8002724>
    2768:	9021883a 	mov	r16,r18
    276c:	a825883a 	mov	r18,r21
    2770:	b02b883a 	mov	r21,r22
    2774:	882d883a 	mov	r22,r17
    2778:	dc402a17 	ldw	r17,168(sp)
    277c:	d9002c17 	ldw	r4,176(sp)
    2780:	1d87883a 	add	r3,r3,r22
    2784:	10800044 	addi	r2,r2,1
    2788:	41000015 	stw	r4,0(r8)
    278c:	45800115 	stw	r22,4(r8)
    2790:	d8c02015 	stw	r3,128(sp)
    2794:	d8801f15 	stw	r2,124(sp)
    2798:	010001c4 	movi	r4,7
    279c:	20821016 	blt	r4,r2,2fe0 <___vfprintf_internal_r+0x121c>
    27a0:	42000204 	addi	r8,r8,8
    27a4:	9080400c 	andi	r2,r18,256
    27a8:	10013a1e 	bne	r2,zero,2c94 <___vfprintf_internal_r+0xed0>
    27ac:	d9402b17 	ldw	r5,172(sp)
    27b0:	d8801f17 	ldw	r2,124(sp)
    27b4:	44000015 	stw	r16,0(r8)
    27b8:	1947883a 	add	r3,r3,r5
    27bc:	10800044 	addi	r2,r2,1
    27c0:	41400115 	stw	r5,4(r8)
    27c4:	d8c02015 	stw	r3,128(sp)
    27c8:	d8801f15 	stw	r2,124(sp)
    27cc:	010001c4 	movi	r4,7
    27d0:	2081f516 	blt	r4,r2,2fa8 <___vfprintf_internal_r+0x11e4>
    27d4:	42000204 	addi	r8,r8,8
    27d8:	9480010c 	andi	r18,r18,4
    27dc:	90003226 	beq	r18,zero,28a8 <___vfprintf_internal_r+0xae4>
    27e0:	d9403117 	ldw	r5,196(sp)
    27e4:	d8802917 	ldw	r2,164(sp)
    27e8:	28a1c83a 	sub	r16,r5,r2
    27ec:	04002e0e 	bge	zero,r16,28a8 <___vfprintf_internal_r+0xae4>
    27f0:	04400404 	movi	r17,16
    27f4:	d8801f17 	ldw	r2,124(sp)
    27f8:	8c04c40e 	bge	r17,r16,3b0c <___vfprintf_internal_r+0x1d48>
    27fc:	01400074 	movhi	r5,1
    2800:	29436184 	addi	r5,r5,3462
    2804:	d9403515 	stw	r5,212(sp)
    2808:	048001c4 	movi	r18,7
    280c:	dcc02d17 	ldw	r19,180(sp)
    2810:	00000306 	br	2820 <___vfprintf_internal_r+0xa5c>
    2814:	843ffc04 	addi	r16,r16,-16
    2818:	42000204 	addi	r8,r8,8
    281c:	8c00130e 	bge	r17,r16,286c <___vfprintf_internal_r+0xaa8>
    2820:	01000074 	movhi	r4,1
    2824:	18c00404 	addi	r3,r3,16
    2828:	10800044 	addi	r2,r2,1
    282c:	21036184 	addi	r4,r4,3462
    2830:	41000015 	stw	r4,0(r8)
    2834:	44400115 	stw	r17,4(r8)
    2838:	d8c02015 	stw	r3,128(sp)
    283c:	d8801f15 	stw	r2,124(sp)
    2840:	90bff40e 	bge	r18,r2,2814 <__alt_exception_stack_pointer+0xf8002814>
    2844:	d9801e04 	addi	r6,sp,120
    2848:	b80b883a 	mov	r5,r23
    284c:	9809883a 	mov	r4,r19
    2850:	00082540 	call	8254 <__sprint_r>
    2854:	103e5f1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2858:	843ffc04 	addi	r16,r16,-16
    285c:	d8c02017 	ldw	r3,128(sp)
    2860:	d8801f17 	ldw	r2,124(sp)
    2864:	da000404 	addi	r8,sp,16
    2868:	8c3fed16 	blt	r17,r16,2820 <__alt_exception_stack_pointer+0xf8002820>
    286c:	d9403517 	ldw	r5,212(sp)
    2870:	1c07883a 	add	r3,r3,r16
    2874:	10800044 	addi	r2,r2,1
    2878:	41400015 	stw	r5,0(r8)
    287c:	44000115 	stw	r16,4(r8)
    2880:	d8c02015 	stw	r3,128(sp)
    2884:	d8801f15 	stw	r2,124(sp)
    2888:	010001c4 	movi	r4,7
    288c:	2080060e 	bge	r4,r2,28a8 <___vfprintf_internal_r+0xae4>
    2890:	d9002d17 	ldw	r4,180(sp)
    2894:	d9801e04 	addi	r6,sp,120
    2898:	b80b883a 	mov	r5,r23
    289c:	00082540 	call	8254 <__sprint_r>
    28a0:	103e4c1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    28a4:	d8c02017 	ldw	r3,128(sp)
    28a8:	d8803117 	ldw	r2,196(sp)
    28ac:	d9002917 	ldw	r4,164(sp)
    28b0:	1100010e 	bge	r2,r4,28b8 <___vfprintf_internal_r+0xaf4>
    28b4:	2005883a 	mov	r2,r4
    28b8:	d9402f17 	ldw	r5,188(sp)
    28bc:	288b883a 	add	r5,r5,r2
    28c0:	d9402f15 	stw	r5,188(sp)
    28c4:	1801c01e 	bne	r3,zero,2fc8 <___vfprintf_internal_r+0x1204>
    28c8:	a8800007 	ldb	r2,0(r21)
    28cc:	d8001f15 	stw	zero,124(sp)
    28d0:	da000404 	addi	r8,sp,16
    28d4:	103d751e 	bne	r2,zero,1eac <__alt_exception_stack_pointer+0xf8001eac>
    28d8:	a823883a 	mov	r17,r21
    28dc:	003d8b06 	br	1f0c <__alt_exception_stack_pointer+0xf8001f0c>
    28e0:	8025883a 	mov	r18,r16
    28e4:	dc002903 	ldbu	r16,164(sp)
    28e8:	e011883a 	mov	r8,fp
    28ec:	84003fcc 	andi	r16,r16,255
    28f0:	8005e51e 	bne	r16,zero,4088 <___vfprintf_internal_r+0x22c4>
    28f4:	94800414 	ori	r18,r18,16
    28f8:	9080080c 	andi	r2,r18,32
    28fc:	10022b26 	beq	r2,zero,31ac <___vfprintf_internal_r+0x13e8>
    2900:	d9002e17 	ldw	r4,184(sp)
    2904:	d9402a17 	ldw	r5,168(sp)
    2908:	d8002785 	stb	zero,158(sp)
    290c:	20c00204 	addi	r3,r4,8
    2910:	24c00017 	ldw	r19,0(r4)
    2914:	25800117 	ldw	r22,4(r4)
    2918:	28042e16 	blt	r5,zero,39d4 <___vfprintf_internal_r+0x1c10>
    291c:	013fdfc4 	movi	r4,-129
    2920:	9d84b03a 	or	r2,r19,r22
    2924:	d8c02e15 	stw	r3,184(sp)
    2928:	9124703a 	and	r18,r18,r4
    292c:	0039883a 	mov	fp,zero
    2930:	103e801e 	bne	r2,zero,2334 <__alt_exception_stack_pointer+0xf8002334>
    2934:	d9002a17 	ldw	r4,168(sp)
    2938:	2002e01e 	bne	r4,zero,34bc <___vfprintf_internal_r+0x16f8>
    293c:	d8002a15 	stw	zero,168(sp)
    2940:	d8002b15 	stw	zero,172(sp)
    2944:	dc001e04 	addi	r16,sp,120
    2948:	003ef506 	br	2520 <__alt_exception_stack_pointer+0xf8002520>
    294c:	8025883a 	mov	r18,r16
    2950:	dc002903 	ldbu	r16,164(sp)
    2954:	e011883a 	mov	r8,fp
    2958:	84003fcc 	andi	r16,r16,255
    295c:	8005ba1e 	bne	r16,zero,4048 <___vfprintf_internal_r+0x2284>
    2960:	01000074 	movhi	r4,1
    2964:	21035104 	addi	r4,r4,3396
    2968:	d9003915 	stw	r4,228(sp)
    296c:	9080080c 	andi	r2,r18,32
    2970:	10006126 	beq	r2,zero,2af8 <___vfprintf_internal_r+0xd34>
    2974:	d9402e17 	ldw	r5,184(sp)
    2978:	2cc00017 	ldw	r19,0(r5)
    297c:	2d800117 	ldw	r22,4(r5)
    2980:	29400204 	addi	r5,r5,8
    2984:	d9402e15 	stw	r5,184(sp)
    2988:	9080004c 	andi	r2,r18,1
    298c:	1001ac26 	beq	r2,zero,3040 <___vfprintf_internal_r+0x127c>
    2990:	9d84b03a 	or	r2,r19,r22
    2994:	10038526 	beq	r2,zero,37ac <___vfprintf_internal_r+0x19e8>
    2998:	d8c02a17 	ldw	r3,168(sp)
    299c:	00800c04 	movi	r2,48
    29a0:	d8802705 	stb	r2,156(sp)
    29a4:	dc402745 	stb	r17,157(sp)
    29a8:	d8002785 	stb	zero,158(sp)
    29ac:	90800094 	ori	r2,r18,2
    29b0:	18047916 	blt	r3,zero,3b98 <___vfprintf_internal_r+0x1dd4>
    29b4:	00bfdfc4 	movi	r2,-129
    29b8:	90a4703a 	and	r18,r18,r2
    29bc:	94800094 	ori	r18,r18,2
    29c0:	0039883a 	mov	fp,zero
    29c4:	d9003917 	ldw	r4,228(sp)
    29c8:	dc001e04 	addi	r16,sp,120
    29cc:	988003cc 	andi	r2,r19,15
    29d0:	b006973a 	slli	r3,r22,28
    29d4:	2085883a 	add	r2,r4,r2
    29d8:	9826d13a 	srli	r19,r19,4
    29dc:	10800003 	ldbu	r2,0(r2)
    29e0:	b02cd13a 	srli	r22,r22,4
    29e4:	843fffc4 	addi	r16,r16,-1
    29e8:	1ce6b03a 	or	r19,r3,r19
    29ec:	80800005 	stb	r2,0(r16)
    29f0:	9d84b03a 	or	r2,r19,r22
    29f4:	103ff51e 	bne	r2,zero,29cc <__alt_exception_stack_pointer+0xf80029cc>
    29f8:	d8c02817 	ldw	r3,160(sp)
    29fc:	1c07c83a 	sub	r3,r3,r16
    2a00:	d8c02b15 	stw	r3,172(sp)
    2a04:	003ec606 	br	2520 <__alt_exception_stack_pointer+0xf8002520>
    2a08:	8025883a 	mov	r18,r16
    2a0c:	dc002903 	ldbu	r16,164(sp)
    2a10:	e011883a 	mov	r8,fp
    2a14:	84003fcc 	andi	r16,r16,255
    2a18:	803e9626 	beq	r16,zero,2474 <__alt_exception_stack_pointer+0xf8002474>
    2a1c:	d8c02b03 	ldbu	r3,172(sp)
    2a20:	d8c02785 	stb	r3,158(sp)
    2a24:	003e9306 	br	2474 <__alt_exception_stack_pointer+0xf8002474>
    2a28:	00c00044 	movi	r3,1
    2a2c:	d8c02905 	stb	r3,164(sp)
    2a30:	00c00ac4 	movi	r3,43
    2a34:	d8c02b05 	stb	r3,172(sp)
    2a38:	ac400007 	ldb	r17,0(r21)
    2a3c:	003d4306 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2a40:	84000814 	ori	r16,r16,32
    2a44:	ac400007 	ldb	r17,0(r21)
    2a48:	003d4006 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2a4c:	d8802e17 	ldw	r2,184(sp)
    2a50:	8025883a 	mov	r18,r16
    2a54:	d8002785 	stb	zero,158(sp)
    2a58:	14000017 	ldw	r16,0(r2)
    2a5c:	e011883a 	mov	r8,fp
    2a60:	14c00104 	addi	r19,r2,4
    2a64:	80042d26 	beq	r16,zero,3b1c <___vfprintf_internal_r+0x1d58>
    2a68:	d8c02a17 	ldw	r3,168(sp)
    2a6c:	1803e416 	blt	r3,zero,3a00 <___vfprintf_internal_r+0x1c3c>
    2a70:	180d883a 	mov	r6,r3
    2a74:	000b883a 	mov	r5,zero
    2a78:	8009883a 	mov	r4,r16
    2a7c:	df003d15 	stw	fp,244(sp)
    2a80:	0006a280 	call	6a28 <memchr>
    2a84:	da003d17 	ldw	r8,244(sp)
    2a88:	10046826 	beq	r2,zero,3c2c <___vfprintf_internal_r+0x1e68>
    2a8c:	1405c83a 	sub	r2,r2,r16
    2a90:	d8802b15 	stw	r2,172(sp)
    2a94:	1003e016 	blt	r2,zero,3a18 <___vfprintf_internal_r+0x1c54>
    2a98:	df002783 	ldbu	fp,158(sp)
    2a9c:	d8802915 	stw	r2,164(sp)
    2aa0:	dcc02e15 	stw	r19,184(sp)
    2aa4:	d8002a15 	stw	zero,168(sp)
    2aa8:	d8003215 	stw	zero,200(sp)
    2aac:	003ea206 	br	2538 <__alt_exception_stack_pointer+0xf8002538>
    2ab0:	8025883a 	mov	r18,r16
    2ab4:	dc002903 	ldbu	r16,164(sp)
    2ab8:	e011883a 	mov	r8,fp
    2abc:	84003fcc 	andi	r16,r16,255
    2ac0:	803f8d26 	beq	r16,zero,28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2ac4:	d8c02b03 	ldbu	r3,172(sp)
    2ac8:	d8c02785 	stb	r3,158(sp)
    2acc:	003f8a06 	br	28f8 <__alt_exception_stack_pointer+0xf80028f8>
    2ad0:	8025883a 	mov	r18,r16
    2ad4:	dc002903 	ldbu	r16,164(sp)
    2ad8:	e011883a 	mov	r8,fp
    2adc:	84003fcc 	andi	r16,r16,255
    2ae0:	8005661e 	bne	r16,zero,407c <___vfprintf_internal_r+0x22b8>
    2ae4:	01000074 	movhi	r4,1
    2ae8:	21035604 	addi	r4,r4,3416
    2aec:	d9003915 	stw	r4,228(sp)
    2af0:	9080080c 	andi	r2,r18,32
    2af4:	103f9f1e 	bne	r2,zero,2974 <__alt_exception_stack_pointer+0xf8002974>
    2af8:	9080040c 	andi	r2,r18,16
    2afc:	1002eb26 	beq	r2,zero,36ac <___vfprintf_internal_r+0x18e8>
    2b00:	d8802e17 	ldw	r2,184(sp)
    2b04:	002d883a 	mov	r22,zero
    2b08:	14c00017 	ldw	r19,0(r2)
    2b0c:	10800104 	addi	r2,r2,4
    2b10:	d8802e15 	stw	r2,184(sp)
    2b14:	003f9c06 	br	2988 <__alt_exception_stack_pointer+0xf8002988>
    2b18:	d8802b07 	ldb	r2,172(sp)
    2b1c:	1002e11e 	bne	r2,zero,36a4 <___vfprintf_internal_r+0x18e0>
    2b20:	00c00044 	movi	r3,1
    2b24:	d8c02905 	stb	r3,164(sp)
    2b28:	00c00804 	movi	r3,32
    2b2c:	d8c02b05 	stb	r3,172(sp)
    2b30:	ac400007 	ldb	r17,0(r21)
    2b34:	003d0506 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2b38:	84000054 	ori	r16,r16,1
    2b3c:	ac400007 	ldb	r17,0(r21)
    2b40:	003d0206 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2b44:	8025883a 	mov	r18,r16
    2b48:	dc002903 	ldbu	r16,164(sp)
    2b4c:	e011883a 	mov	r8,fp
    2b50:	84003fcc 	andi	r16,r16,255
    2b54:	803de726 	beq	r16,zero,22f4 <__alt_exception_stack_pointer+0xf80022f4>
    2b58:	d8c02b03 	ldbu	r3,172(sp)
    2b5c:	d8c02785 	stb	r3,158(sp)
    2b60:	003de406 	br	22f4 <__alt_exception_stack_pointer+0xf80022f4>
    2b64:	84001014 	ori	r16,r16,64
    2b68:	ac400007 	ldb	r17,0(r21)
    2b6c:	003cf706 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2b70:	ac400007 	ldb	r17,0(r21)
    2b74:	00801b04 	movi	r2,108
    2b78:	88838f26 	beq	r17,r2,39b8 <___vfprintf_internal_r+0x1bf4>
    2b7c:	84000414 	ori	r16,r16,16
    2b80:	003cf206 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2b84:	8025883a 	mov	r18,r16
    2b88:	dc002903 	ldbu	r16,164(sp)
    2b8c:	e011883a 	mov	r8,fp
    2b90:	84003fcc 	andi	r16,r16,255
    2b94:	80053f1e 	bne	r16,zero,4094 <___vfprintf_internal_r+0x22d0>
    2b98:	9080080c 	andi	r2,r18,32
    2b9c:	1002d226 	beq	r2,zero,36e8 <___vfprintf_internal_r+0x1924>
    2ba0:	d9002e17 	ldw	r4,184(sp)
    2ba4:	d9402f17 	ldw	r5,188(sp)
    2ba8:	20800017 	ldw	r2,0(r4)
    2bac:	2807d7fa 	srai	r3,r5,31
    2bb0:	21000104 	addi	r4,r4,4
    2bb4:	d9002e15 	stw	r4,184(sp)
    2bb8:	11400015 	stw	r5,0(r2)
    2bbc:	10c00115 	stw	r3,4(r2)
    2bc0:	003cb806 	br	1ea4 <__alt_exception_stack_pointer+0xf8001ea4>
    2bc4:	d8c02e17 	ldw	r3,184(sp)
    2bc8:	d9002e17 	ldw	r4,184(sp)
    2bcc:	8025883a 	mov	r18,r16
    2bd0:	18800017 	ldw	r2,0(r3)
    2bd4:	21000104 	addi	r4,r4,4
    2bd8:	00c00044 	movi	r3,1
    2bdc:	e011883a 	mov	r8,fp
    2be0:	d8c02915 	stw	r3,164(sp)
    2be4:	d8002785 	stb	zero,158(sp)
    2be8:	d8801405 	stb	r2,80(sp)
    2bec:	d9002e15 	stw	r4,184(sp)
    2bf0:	d8c02b15 	stw	r3,172(sp)
    2bf4:	d8002a15 	stw	zero,168(sp)
    2bf8:	d8003215 	stw	zero,200(sp)
    2bfc:	dc001404 	addi	r16,sp,80
    2c00:	0039883a 	mov	fp,zero
    2c04:	003e5306 	br	2554 <__alt_exception_stack_pointer+0xf8002554>
    2c08:	01000074 	movhi	r4,1
    2c0c:	21035604 	addi	r4,r4,3416
    2c10:	0039883a 	mov	fp,zero
    2c14:	d9003915 	stw	r4,228(sp)
    2c18:	04401e04 	movi	r17,120
    2c1c:	003f6906 	br	29c4 <__alt_exception_stack_pointer+0xf80029c4>
    2c20:	8025883a 	mov	r18,r16
    2c24:	dc002903 	ldbu	r16,164(sp)
    2c28:	e011883a 	mov	r8,fp
    2c2c:	84003fcc 	andi	r16,r16,255
    2c30:	8005081e 	bne	r16,zero,4054 <___vfprintf_internal_r+0x2290>
    2c34:	883d6126 	beq	r17,zero,21bc <__alt_exception_stack_pointer+0xf80021bc>
    2c38:	00c00044 	movi	r3,1
    2c3c:	d8c02915 	stw	r3,164(sp)
    2c40:	dc401405 	stb	r17,80(sp)
    2c44:	d8002785 	stb	zero,158(sp)
    2c48:	003fe906 	br	2bf0 <__alt_exception_stack_pointer+0xf8002bf0>
    2c4c:	01400074 	movhi	r5,1
    2c50:	29435604 	addi	r5,r5,3416
    2c54:	d9403915 	stw	r5,228(sp)
    2c58:	d8c02e15 	stw	r3,184(sp)
    2c5c:	1025883a 	mov	r18,r2
    2c60:	04401e04 	movi	r17,120
    2c64:	9d84b03a 	or	r2,r19,r22
    2c68:	1000fc1e 	bne	r2,zero,305c <___vfprintf_internal_r+0x1298>
    2c6c:	0039883a 	mov	fp,zero
    2c70:	00800084 	movi	r2,2
    2c74:	10803fcc 	andi	r2,r2,255
    2c78:	00c00044 	movi	r3,1
    2c7c:	10c20f26 	beq	r2,r3,34bc <___vfprintf_internal_r+0x16f8>
    2c80:	00c00084 	movi	r3,2
    2c84:	10fd3326 	beq	r2,r3,2154 <__alt_exception_stack_pointer+0xf8002154>
    2c88:	003e0b06 	br	24b8 <__alt_exception_stack_pointer+0xf80024b8>
    2c8c:	d8c02017 	ldw	r3,128(sp)
    2c90:	003e7106 	br	2658 <__alt_exception_stack_pointer+0xf8002658>
    2c94:	00801944 	movi	r2,101
    2c98:	14407e0e 	bge	r2,r17,2e94 <___vfprintf_internal_r+0x10d0>
    2c9c:	d9003617 	ldw	r4,216(sp)
    2ca0:	d9403817 	ldw	r5,224(sp)
    2ca4:	000d883a 	mov	r6,zero
    2ca8:	000f883a 	mov	r7,zero
    2cac:	d8c03c15 	stw	r3,240(sp)
    2cb0:	da003d15 	stw	r8,244(sp)
    2cb4:	000c1900 	call	c190 <__eqdf2>
    2cb8:	d8c03c17 	ldw	r3,240(sp)
    2cbc:	da003d17 	ldw	r8,244(sp)
    2cc0:	1000f71e 	bne	r2,zero,30a0 <___vfprintf_internal_r+0x12dc>
    2cc4:	d8801f17 	ldw	r2,124(sp)
    2cc8:	01000074 	movhi	r4,1
    2ccc:	21035d04 	addi	r4,r4,3444
    2cd0:	18c00044 	addi	r3,r3,1
    2cd4:	10800044 	addi	r2,r2,1
    2cd8:	41000015 	stw	r4,0(r8)
    2cdc:	01000044 	movi	r4,1
    2ce0:	41000115 	stw	r4,4(r8)
    2ce4:	d8c02015 	stw	r3,128(sp)
    2ce8:	d8801f15 	stw	r2,124(sp)
    2cec:	010001c4 	movi	r4,7
    2cf0:	2082b816 	blt	r4,r2,37d4 <___vfprintf_internal_r+0x1a10>
    2cf4:	42000204 	addi	r8,r8,8
    2cf8:	d8802617 	ldw	r2,152(sp)
    2cfc:	d9403317 	ldw	r5,204(sp)
    2d00:	11400216 	blt	r2,r5,2d0c <___vfprintf_internal_r+0xf48>
    2d04:	9080004c 	andi	r2,r18,1
    2d08:	103eb326 	beq	r2,zero,27d8 <__alt_exception_stack_pointer+0xf80027d8>
    2d0c:	d8803717 	ldw	r2,220(sp)
    2d10:	d9003417 	ldw	r4,208(sp)
    2d14:	d9403717 	ldw	r5,220(sp)
    2d18:	1887883a 	add	r3,r3,r2
    2d1c:	d8801f17 	ldw	r2,124(sp)
    2d20:	41000015 	stw	r4,0(r8)
    2d24:	41400115 	stw	r5,4(r8)
    2d28:	10800044 	addi	r2,r2,1
    2d2c:	d8c02015 	stw	r3,128(sp)
    2d30:	d8801f15 	stw	r2,124(sp)
    2d34:	010001c4 	movi	r4,7
    2d38:	20832916 	blt	r4,r2,39e0 <___vfprintf_internal_r+0x1c1c>
    2d3c:	42000204 	addi	r8,r8,8
    2d40:	d8803317 	ldw	r2,204(sp)
    2d44:	143fffc4 	addi	r16,r2,-1
    2d48:	043ea30e 	bge	zero,r16,27d8 <__alt_exception_stack_pointer+0xf80027d8>
    2d4c:	04400404 	movi	r17,16
    2d50:	d8801f17 	ldw	r2,124(sp)
    2d54:	8c00880e 	bge	r17,r16,2f78 <___vfprintf_internal_r+0x11b4>
    2d58:	01400074 	movhi	r5,1
    2d5c:	29435d84 	addi	r5,r5,3446
    2d60:	d9402c15 	stw	r5,176(sp)
    2d64:	058001c4 	movi	r22,7
    2d68:	dcc02d17 	ldw	r19,180(sp)
    2d6c:	00000306 	br	2d7c <___vfprintf_internal_r+0xfb8>
    2d70:	42000204 	addi	r8,r8,8
    2d74:	843ffc04 	addi	r16,r16,-16
    2d78:	8c00820e 	bge	r17,r16,2f84 <___vfprintf_internal_r+0x11c0>
    2d7c:	18c00404 	addi	r3,r3,16
    2d80:	10800044 	addi	r2,r2,1
    2d84:	45000015 	stw	r20,0(r8)
    2d88:	44400115 	stw	r17,4(r8)
    2d8c:	d8c02015 	stw	r3,128(sp)
    2d90:	d8801f15 	stw	r2,124(sp)
    2d94:	b0bff60e 	bge	r22,r2,2d70 <__alt_exception_stack_pointer+0xf8002d70>
    2d98:	d9801e04 	addi	r6,sp,120
    2d9c:	b80b883a 	mov	r5,r23
    2da0:	9809883a 	mov	r4,r19
    2da4:	00082540 	call	8254 <__sprint_r>
    2da8:	103d0a1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2dac:	d8c02017 	ldw	r3,128(sp)
    2db0:	d8801f17 	ldw	r2,124(sp)
    2db4:	da000404 	addi	r8,sp,16
    2db8:	003fee06 	br	2d74 <__alt_exception_stack_pointer+0xf8002d74>
    2dbc:	d9403117 	ldw	r5,196(sp)
    2dc0:	d8802917 	ldw	r2,164(sp)
    2dc4:	28adc83a 	sub	r22,r5,r2
    2dc8:	05be410e 	bge	zero,r22,26d0 <__alt_exception_stack_pointer+0xf80026d0>
    2dcc:	07000404 	movi	fp,16
    2dd0:	d8801f17 	ldw	r2,124(sp)
    2dd4:	e5838f0e 	bge	fp,r22,3c14 <___vfprintf_internal_r+0x1e50>
    2dd8:	01400074 	movhi	r5,1
    2ddc:	29435d84 	addi	r5,r5,3446
    2de0:	dc403015 	stw	r17,192(sp)
    2de4:	d9402c15 	stw	r5,176(sp)
    2de8:	b023883a 	mov	r17,r22
    2dec:	04c001c4 	movi	r19,7
    2df0:	a82d883a 	mov	r22,r21
    2df4:	902b883a 	mov	r21,r18
    2df8:	8025883a 	mov	r18,r16
    2dfc:	dc002d17 	ldw	r16,180(sp)
    2e00:	00000306 	br	2e10 <___vfprintf_internal_r+0x104c>
    2e04:	8c7ffc04 	addi	r17,r17,-16
    2e08:	42000204 	addi	r8,r8,8
    2e0c:	e440110e 	bge	fp,r17,2e54 <___vfprintf_internal_r+0x1090>
    2e10:	18c00404 	addi	r3,r3,16
    2e14:	10800044 	addi	r2,r2,1
    2e18:	45000015 	stw	r20,0(r8)
    2e1c:	47000115 	stw	fp,4(r8)
    2e20:	d8c02015 	stw	r3,128(sp)
    2e24:	d8801f15 	stw	r2,124(sp)
    2e28:	98bff60e 	bge	r19,r2,2e04 <__alt_exception_stack_pointer+0xf8002e04>
    2e2c:	d9801e04 	addi	r6,sp,120
    2e30:	b80b883a 	mov	r5,r23
    2e34:	8009883a 	mov	r4,r16
    2e38:	00082540 	call	8254 <__sprint_r>
    2e3c:	103ce51e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2e40:	8c7ffc04 	addi	r17,r17,-16
    2e44:	d8c02017 	ldw	r3,128(sp)
    2e48:	d8801f17 	ldw	r2,124(sp)
    2e4c:	da000404 	addi	r8,sp,16
    2e50:	e47fef16 	blt	fp,r17,2e10 <__alt_exception_stack_pointer+0xf8002e10>
    2e54:	9021883a 	mov	r16,r18
    2e58:	a825883a 	mov	r18,r21
    2e5c:	b02b883a 	mov	r21,r22
    2e60:	882d883a 	mov	r22,r17
    2e64:	dc403017 	ldw	r17,192(sp)
    2e68:	d9002c17 	ldw	r4,176(sp)
    2e6c:	1d87883a 	add	r3,r3,r22
    2e70:	10800044 	addi	r2,r2,1
    2e74:	41000015 	stw	r4,0(r8)
    2e78:	45800115 	stw	r22,4(r8)
    2e7c:	d8c02015 	stw	r3,128(sp)
    2e80:	d8801f15 	stw	r2,124(sp)
    2e84:	010001c4 	movi	r4,7
    2e88:	20818e16 	blt	r4,r2,34c4 <___vfprintf_internal_r+0x1700>
    2e8c:	42000204 	addi	r8,r8,8
    2e90:	003e0f06 	br	26d0 <__alt_exception_stack_pointer+0xf80026d0>
    2e94:	d9403317 	ldw	r5,204(sp)
    2e98:	00800044 	movi	r2,1
    2e9c:	18c00044 	addi	r3,r3,1
    2ea0:	1141530e 	bge	r2,r5,33f0 <___vfprintf_internal_r+0x162c>
    2ea4:	dc401f17 	ldw	r17,124(sp)
    2ea8:	00800044 	movi	r2,1
    2eac:	40800115 	stw	r2,4(r8)
    2eb0:	8c400044 	addi	r17,r17,1
    2eb4:	44000015 	stw	r16,0(r8)
    2eb8:	d8c02015 	stw	r3,128(sp)
    2ebc:	dc401f15 	stw	r17,124(sp)
    2ec0:	008001c4 	movi	r2,7
    2ec4:	14416b16 	blt	r2,r17,3474 <___vfprintf_internal_r+0x16b0>
    2ec8:	42000204 	addi	r8,r8,8
    2ecc:	d8803717 	ldw	r2,220(sp)
    2ed0:	d9003417 	ldw	r4,208(sp)
    2ed4:	8c400044 	addi	r17,r17,1
    2ed8:	10c7883a 	add	r3,r2,r3
    2edc:	40800115 	stw	r2,4(r8)
    2ee0:	41000015 	stw	r4,0(r8)
    2ee4:	d8c02015 	stw	r3,128(sp)
    2ee8:	dc401f15 	stw	r17,124(sp)
    2eec:	008001c4 	movi	r2,7
    2ef0:	14416916 	blt	r2,r17,3498 <___vfprintf_internal_r+0x16d4>
    2ef4:	45800204 	addi	r22,r8,8
    2ef8:	d9003617 	ldw	r4,216(sp)
    2efc:	d9403817 	ldw	r5,224(sp)
    2f00:	000d883a 	mov	r6,zero
    2f04:	000f883a 	mov	r7,zero
    2f08:	d8c03c15 	stw	r3,240(sp)
    2f0c:	000c1900 	call	c190 <__eqdf2>
    2f10:	d8c03c17 	ldw	r3,240(sp)
    2f14:	1000bc26 	beq	r2,zero,3208 <___vfprintf_internal_r+0x1444>
    2f18:	d9403317 	ldw	r5,204(sp)
    2f1c:	84000044 	addi	r16,r16,1
    2f20:	8c400044 	addi	r17,r17,1
    2f24:	28bfffc4 	addi	r2,r5,-1
    2f28:	1887883a 	add	r3,r3,r2
    2f2c:	b0800115 	stw	r2,4(r22)
    2f30:	b4000015 	stw	r16,0(r22)
    2f34:	d8c02015 	stw	r3,128(sp)
    2f38:	dc401f15 	stw	r17,124(sp)
    2f3c:	008001c4 	movi	r2,7
    2f40:	14414316 	blt	r2,r17,3450 <___vfprintf_internal_r+0x168c>
    2f44:	b5800204 	addi	r22,r22,8
    2f48:	d9003a17 	ldw	r4,232(sp)
    2f4c:	df0022c4 	addi	fp,sp,139
    2f50:	8c400044 	addi	r17,r17,1
    2f54:	20c7883a 	add	r3,r4,r3
    2f58:	b7000015 	stw	fp,0(r22)
    2f5c:	b1000115 	stw	r4,4(r22)
    2f60:	d8c02015 	stw	r3,128(sp)
    2f64:	dc401f15 	stw	r17,124(sp)
    2f68:	008001c4 	movi	r2,7
    2f6c:	14400e16 	blt	r2,r17,2fa8 <___vfprintf_internal_r+0x11e4>
    2f70:	b2000204 	addi	r8,r22,8
    2f74:	003e1806 	br	27d8 <__alt_exception_stack_pointer+0xf80027d8>
    2f78:	01000074 	movhi	r4,1
    2f7c:	21035d84 	addi	r4,r4,3446
    2f80:	d9002c15 	stw	r4,176(sp)
    2f84:	d9002c17 	ldw	r4,176(sp)
    2f88:	1c07883a 	add	r3,r3,r16
    2f8c:	44000115 	stw	r16,4(r8)
    2f90:	41000015 	stw	r4,0(r8)
    2f94:	10800044 	addi	r2,r2,1
    2f98:	d8c02015 	stw	r3,128(sp)
    2f9c:	d8801f15 	stw	r2,124(sp)
    2fa0:	010001c4 	movi	r4,7
    2fa4:	20be0b0e 	bge	r4,r2,27d4 <__alt_exception_stack_pointer+0xf80027d4>
    2fa8:	d9002d17 	ldw	r4,180(sp)
    2fac:	d9801e04 	addi	r6,sp,120
    2fb0:	b80b883a 	mov	r5,r23
    2fb4:	00082540 	call	8254 <__sprint_r>
    2fb8:	103c861e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2fbc:	d8c02017 	ldw	r3,128(sp)
    2fc0:	da000404 	addi	r8,sp,16
    2fc4:	003e0406 	br	27d8 <__alt_exception_stack_pointer+0xf80027d8>
    2fc8:	d9002d17 	ldw	r4,180(sp)
    2fcc:	d9801e04 	addi	r6,sp,120
    2fd0:	b80b883a 	mov	r5,r23
    2fd4:	00082540 	call	8254 <__sprint_r>
    2fd8:	103e3b26 	beq	r2,zero,28c8 <__alt_exception_stack_pointer+0xf80028c8>
    2fdc:	003c7d06 	br	21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2fe0:	d9002d17 	ldw	r4,180(sp)
    2fe4:	d9801e04 	addi	r6,sp,120
    2fe8:	b80b883a 	mov	r5,r23
    2fec:	00082540 	call	8254 <__sprint_r>
    2ff0:	103c781e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    2ff4:	d8c02017 	ldw	r3,128(sp)
    2ff8:	da000404 	addi	r8,sp,16
    2ffc:	003de906 	br	27a4 <__alt_exception_stack_pointer+0xf80027a4>
    3000:	d9002d17 	ldw	r4,180(sp)
    3004:	d9801e04 	addi	r6,sp,120
    3008:	b80b883a 	mov	r5,r23
    300c:	00082540 	call	8254 <__sprint_r>
    3010:	103c701e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3014:	d8c02017 	ldw	r3,128(sp)
    3018:	da000404 	addi	r8,sp,16
    301c:	003d9b06 	br	268c <__alt_exception_stack_pointer+0xf800268c>
    3020:	d9002d17 	ldw	r4,180(sp)
    3024:	d9801e04 	addi	r6,sp,120
    3028:	b80b883a 	mov	r5,r23
    302c:	00082540 	call	8254 <__sprint_r>
    3030:	103c681e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3034:	d8c02017 	ldw	r3,128(sp)
    3038:	da000404 	addi	r8,sp,16
    303c:	003da106 	br	26c4 <__alt_exception_stack_pointer+0xf80026c4>
    3040:	d9402a17 	ldw	r5,168(sp)
    3044:	d8002785 	stb	zero,158(sp)
    3048:	283f0616 	blt	r5,zero,2c64 <__alt_exception_stack_pointer+0xf8002c64>
    304c:	00ffdfc4 	movi	r3,-129
    3050:	9d84b03a 	or	r2,r19,r22
    3054:	90e4703a 	and	r18,r18,r3
    3058:	103c3b26 	beq	r2,zero,2148 <__alt_exception_stack_pointer+0xf8002148>
    305c:	0039883a 	mov	fp,zero
    3060:	003e5806 	br	29c4 <__alt_exception_stack_pointer+0xf80029c4>
    3064:	9080040c 	andi	r2,r18,16
    3068:	1001b326 	beq	r2,zero,3738 <___vfprintf_internal_r+0x1974>
    306c:	d8c02e17 	ldw	r3,184(sp)
    3070:	d9002a17 	ldw	r4,168(sp)
    3074:	d8002785 	stb	zero,158(sp)
    3078:	18800104 	addi	r2,r3,4
    307c:	1cc00017 	ldw	r19,0(r3)
    3080:	002d883a 	mov	r22,zero
    3084:	2001b516 	blt	r4,zero,375c <___vfprintf_internal_r+0x1998>
    3088:	00ffdfc4 	movi	r3,-129
    308c:	d8802e15 	stw	r2,184(sp)
    3090:	90e4703a 	and	r18,r18,r3
    3094:	983d0526 	beq	r19,zero,24ac <__alt_exception_stack_pointer+0xf80024ac>
    3098:	0039883a 	mov	fp,zero
    309c:	003d0806 	br	24c0 <__alt_exception_stack_pointer+0xf80024c0>
    30a0:	dc402617 	ldw	r17,152(sp)
    30a4:	0441d30e 	bge	zero,r17,37f4 <___vfprintf_internal_r+0x1a30>
    30a8:	dc403217 	ldw	r17,200(sp)
    30ac:	d8803317 	ldw	r2,204(sp)
    30b0:	1440010e 	bge	r2,r17,30b8 <___vfprintf_internal_r+0x12f4>
    30b4:	1023883a 	mov	r17,r2
    30b8:	04400a0e 	bge	zero,r17,30e4 <___vfprintf_internal_r+0x1320>
    30bc:	d8801f17 	ldw	r2,124(sp)
    30c0:	1c47883a 	add	r3,r3,r17
    30c4:	44000015 	stw	r16,0(r8)
    30c8:	10800044 	addi	r2,r2,1
    30cc:	44400115 	stw	r17,4(r8)
    30d0:	d8c02015 	stw	r3,128(sp)
    30d4:	d8801f15 	stw	r2,124(sp)
    30d8:	010001c4 	movi	r4,7
    30dc:	20826516 	blt	r4,r2,3a74 <___vfprintf_internal_r+0x1cb0>
    30e0:	42000204 	addi	r8,r8,8
    30e4:	88026116 	blt	r17,zero,3a6c <___vfprintf_internal_r+0x1ca8>
    30e8:	d9003217 	ldw	r4,200(sp)
    30ec:	2463c83a 	sub	r17,r4,r17
    30f0:	04407b0e 	bge	zero,r17,32e0 <___vfprintf_internal_r+0x151c>
    30f4:	05800404 	movi	r22,16
    30f8:	d8801f17 	ldw	r2,124(sp)
    30fc:	b4419d0e 	bge	r22,r17,3774 <___vfprintf_internal_r+0x19b0>
    3100:	01000074 	movhi	r4,1
    3104:	21035d84 	addi	r4,r4,3446
    3108:	d9002c15 	stw	r4,176(sp)
    310c:	070001c4 	movi	fp,7
    3110:	dcc02d17 	ldw	r19,180(sp)
    3114:	00000306 	br	3124 <___vfprintf_internal_r+0x1360>
    3118:	42000204 	addi	r8,r8,8
    311c:	8c7ffc04 	addi	r17,r17,-16
    3120:	b441970e 	bge	r22,r17,3780 <___vfprintf_internal_r+0x19bc>
    3124:	18c00404 	addi	r3,r3,16
    3128:	10800044 	addi	r2,r2,1
    312c:	45000015 	stw	r20,0(r8)
    3130:	45800115 	stw	r22,4(r8)
    3134:	d8c02015 	stw	r3,128(sp)
    3138:	d8801f15 	stw	r2,124(sp)
    313c:	e0bff60e 	bge	fp,r2,3118 <__alt_exception_stack_pointer+0xf8003118>
    3140:	d9801e04 	addi	r6,sp,120
    3144:	b80b883a 	mov	r5,r23
    3148:	9809883a 	mov	r4,r19
    314c:	00082540 	call	8254 <__sprint_r>
    3150:	103c201e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3154:	d8c02017 	ldw	r3,128(sp)
    3158:	d8801f17 	ldw	r2,124(sp)
    315c:	da000404 	addi	r8,sp,16
    3160:	003fee06 	br	311c <__alt_exception_stack_pointer+0xf800311c>
    3164:	d9002d17 	ldw	r4,180(sp)
    3168:	d9801e04 	addi	r6,sp,120
    316c:	b80b883a 	mov	r5,r23
    3170:	00082540 	call	8254 <__sprint_r>
    3174:	103c171e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3178:	d8c02017 	ldw	r3,128(sp)
    317c:	df002787 	ldb	fp,158(sp)
    3180:	da000404 	addi	r8,sp,16
    3184:	003d3406 	br	2658 <__alt_exception_stack_pointer+0xf8002658>
    3188:	9080040c 	andi	r2,r18,16
    318c:	10016126 	beq	r2,zero,3714 <___vfprintf_internal_r+0x1950>
    3190:	d9402e17 	ldw	r5,184(sp)
    3194:	2cc00017 	ldw	r19,0(r5)
    3198:	29400104 	addi	r5,r5,4
    319c:	d9402e15 	stw	r5,184(sp)
    31a0:	982dd7fa 	srai	r22,r19,31
    31a4:	b005883a 	mov	r2,r22
    31a8:	003c5a06 	br	2314 <__alt_exception_stack_pointer+0xf8002314>
    31ac:	9080040c 	andi	r2,r18,16
    31b0:	10003526 	beq	r2,zero,3288 <___vfprintf_internal_r+0x14c4>
    31b4:	d8c02e17 	ldw	r3,184(sp)
    31b8:	d9002a17 	ldw	r4,168(sp)
    31bc:	d8002785 	stb	zero,158(sp)
    31c0:	18800104 	addi	r2,r3,4
    31c4:	1cc00017 	ldw	r19,0(r3)
    31c8:	002d883a 	mov	r22,zero
    31cc:	20003716 	blt	r4,zero,32ac <___vfprintf_internal_r+0x14e8>
    31d0:	00ffdfc4 	movi	r3,-129
    31d4:	d8802e15 	stw	r2,184(sp)
    31d8:	90e4703a 	and	r18,r18,r3
    31dc:	0039883a 	mov	fp,zero
    31e0:	983dd426 	beq	r19,zero,2934 <__alt_exception_stack_pointer+0xf8002934>
    31e4:	00800244 	movi	r2,9
    31e8:	14fc5336 	bltu	r2,r19,2338 <__alt_exception_stack_pointer+0xf8002338>
    31ec:	d8c02817 	ldw	r3,160(sp)
    31f0:	dc001dc4 	addi	r16,sp,119
    31f4:	9cc00c04 	addi	r19,r19,48
    31f8:	1c07c83a 	sub	r3,r3,r16
    31fc:	dcc01dc5 	stb	r19,119(sp)
    3200:	d8c02b15 	stw	r3,172(sp)
    3204:	003cc606 	br	2520 <__alt_exception_stack_pointer+0xf8002520>
    3208:	d8803317 	ldw	r2,204(sp)
    320c:	143fffc4 	addi	r16,r2,-1
    3210:	043f4d0e 	bge	zero,r16,2f48 <__alt_exception_stack_pointer+0xf8002f48>
    3214:	07000404 	movi	fp,16
    3218:	e400810e 	bge	fp,r16,3420 <___vfprintf_internal_r+0x165c>
    321c:	01400074 	movhi	r5,1
    3220:	29435d84 	addi	r5,r5,3446
    3224:	d9402c15 	stw	r5,176(sp)
    3228:	01c001c4 	movi	r7,7
    322c:	dcc02d17 	ldw	r19,180(sp)
    3230:	00000306 	br	3240 <___vfprintf_internal_r+0x147c>
    3234:	b5800204 	addi	r22,r22,8
    3238:	843ffc04 	addi	r16,r16,-16
    323c:	e4007b0e 	bge	fp,r16,342c <___vfprintf_internal_r+0x1668>
    3240:	18c00404 	addi	r3,r3,16
    3244:	8c400044 	addi	r17,r17,1
    3248:	b5000015 	stw	r20,0(r22)
    324c:	b7000115 	stw	fp,4(r22)
    3250:	d8c02015 	stw	r3,128(sp)
    3254:	dc401f15 	stw	r17,124(sp)
    3258:	3c7ff60e 	bge	r7,r17,3234 <__alt_exception_stack_pointer+0xf8003234>
    325c:	d9801e04 	addi	r6,sp,120
    3260:	b80b883a 	mov	r5,r23
    3264:	9809883a 	mov	r4,r19
    3268:	d9c03c15 	stw	r7,240(sp)
    326c:	00082540 	call	8254 <__sprint_r>
    3270:	d9c03c17 	ldw	r7,240(sp)
    3274:	103bd71e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3278:	d8c02017 	ldw	r3,128(sp)
    327c:	dc401f17 	ldw	r17,124(sp)
    3280:	dd800404 	addi	r22,sp,16
    3284:	003fec06 	br	3238 <__alt_exception_stack_pointer+0xf8003238>
    3288:	9080100c 	andi	r2,r18,64
    328c:	d8002785 	stb	zero,158(sp)
    3290:	10010e26 	beq	r2,zero,36cc <___vfprintf_internal_r+0x1908>
    3294:	d9402e17 	ldw	r5,184(sp)
    3298:	d8c02a17 	ldw	r3,168(sp)
    329c:	002d883a 	mov	r22,zero
    32a0:	28800104 	addi	r2,r5,4
    32a4:	2cc0000b 	ldhu	r19,0(r5)
    32a8:	183fc90e 	bge	r3,zero,31d0 <__alt_exception_stack_pointer+0xf80031d0>
    32ac:	d8802e15 	stw	r2,184(sp)
    32b0:	0039883a 	mov	fp,zero
    32b4:	9d84b03a 	or	r2,r19,r22
    32b8:	103c1e1e 	bne	r2,zero,2334 <__alt_exception_stack_pointer+0xf8002334>
    32bc:	00800044 	movi	r2,1
    32c0:	003e6c06 	br	2c74 <__alt_exception_stack_pointer+0xf8002c74>
    32c4:	d9002d17 	ldw	r4,180(sp)
    32c8:	d9801e04 	addi	r6,sp,120
    32cc:	b80b883a 	mov	r5,r23
    32d0:	00082540 	call	8254 <__sprint_r>
    32d4:	103bbf1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    32d8:	d8c02017 	ldw	r3,128(sp)
    32dc:	da000404 	addi	r8,sp,16
    32e0:	d9003217 	ldw	r4,200(sp)
    32e4:	d8802617 	ldw	r2,152(sp)
    32e8:	d9403317 	ldw	r5,204(sp)
    32ec:	8123883a 	add	r17,r16,r4
    32f0:	11400216 	blt	r2,r5,32fc <___vfprintf_internal_r+0x1538>
    32f4:	9100004c 	andi	r4,r18,1
    32f8:	20000d26 	beq	r4,zero,3330 <___vfprintf_internal_r+0x156c>
    32fc:	d9003717 	ldw	r4,220(sp)
    3300:	d9403417 	ldw	r5,208(sp)
    3304:	1907883a 	add	r3,r3,r4
    3308:	d9001f17 	ldw	r4,124(sp)
    330c:	41400015 	stw	r5,0(r8)
    3310:	d9403717 	ldw	r5,220(sp)
    3314:	21000044 	addi	r4,r4,1
    3318:	d8c02015 	stw	r3,128(sp)
    331c:	41400115 	stw	r5,4(r8)
    3320:	d9001f15 	stw	r4,124(sp)
    3324:	014001c4 	movi	r5,7
    3328:	2901e816 	blt	r5,r4,3acc <___vfprintf_internal_r+0x1d08>
    332c:	42000204 	addi	r8,r8,8
    3330:	d9003317 	ldw	r4,204(sp)
    3334:	8121883a 	add	r16,r16,r4
    3338:	2085c83a 	sub	r2,r4,r2
    333c:	8461c83a 	sub	r16,r16,r17
    3340:	1400010e 	bge	r2,r16,3348 <___vfprintf_internal_r+0x1584>
    3344:	1021883a 	mov	r16,r2
    3348:	04000a0e 	bge	zero,r16,3374 <___vfprintf_internal_r+0x15b0>
    334c:	d9001f17 	ldw	r4,124(sp)
    3350:	1c07883a 	add	r3,r3,r16
    3354:	44400015 	stw	r17,0(r8)
    3358:	21000044 	addi	r4,r4,1
    335c:	44000115 	stw	r16,4(r8)
    3360:	d8c02015 	stw	r3,128(sp)
    3364:	d9001f15 	stw	r4,124(sp)
    3368:	014001c4 	movi	r5,7
    336c:	2901fb16 	blt	r5,r4,3b5c <___vfprintf_internal_r+0x1d98>
    3370:	42000204 	addi	r8,r8,8
    3374:	8001f716 	blt	r16,zero,3b54 <___vfprintf_internal_r+0x1d90>
    3378:	1421c83a 	sub	r16,r2,r16
    337c:	043d160e 	bge	zero,r16,27d8 <__alt_exception_stack_pointer+0xf80027d8>
    3380:	04400404 	movi	r17,16
    3384:	d8801f17 	ldw	r2,124(sp)
    3388:	8c3efb0e 	bge	r17,r16,2f78 <__alt_exception_stack_pointer+0xf8002f78>
    338c:	01400074 	movhi	r5,1
    3390:	29435d84 	addi	r5,r5,3446
    3394:	d9402c15 	stw	r5,176(sp)
    3398:	058001c4 	movi	r22,7
    339c:	dcc02d17 	ldw	r19,180(sp)
    33a0:	00000306 	br	33b0 <___vfprintf_internal_r+0x15ec>
    33a4:	42000204 	addi	r8,r8,8
    33a8:	843ffc04 	addi	r16,r16,-16
    33ac:	8c3ef50e 	bge	r17,r16,2f84 <__alt_exception_stack_pointer+0xf8002f84>
    33b0:	18c00404 	addi	r3,r3,16
    33b4:	10800044 	addi	r2,r2,1
    33b8:	45000015 	stw	r20,0(r8)
    33bc:	44400115 	stw	r17,4(r8)
    33c0:	d8c02015 	stw	r3,128(sp)
    33c4:	d8801f15 	stw	r2,124(sp)
    33c8:	b0bff60e 	bge	r22,r2,33a4 <__alt_exception_stack_pointer+0xf80033a4>
    33cc:	d9801e04 	addi	r6,sp,120
    33d0:	b80b883a 	mov	r5,r23
    33d4:	9809883a 	mov	r4,r19
    33d8:	00082540 	call	8254 <__sprint_r>
    33dc:	103b7d1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    33e0:	d8c02017 	ldw	r3,128(sp)
    33e4:	d8801f17 	ldw	r2,124(sp)
    33e8:	da000404 	addi	r8,sp,16
    33ec:	003fee06 	br	33a8 <__alt_exception_stack_pointer+0xf80033a8>
    33f0:	9088703a 	and	r4,r18,r2
    33f4:	203eab1e 	bne	r4,zero,2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    33f8:	dc401f17 	ldw	r17,124(sp)
    33fc:	40800115 	stw	r2,4(r8)
    3400:	44000015 	stw	r16,0(r8)
    3404:	8c400044 	addi	r17,r17,1
    3408:	d8c02015 	stw	r3,128(sp)
    340c:	dc401f15 	stw	r17,124(sp)
    3410:	008001c4 	movi	r2,7
    3414:	14400e16 	blt	r2,r17,3450 <___vfprintf_internal_r+0x168c>
    3418:	45800204 	addi	r22,r8,8
    341c:	003eca06 	br	2f48 <__alt_exception_stack_pointer+0xf8002f48>
    3420:	01000074 	movhi	r4,1
    3424:	21035d84 	addi	r4,r4,3446
    3428:	d9002c15 	stw	r4,176(sp)
    342c:	d8802c17 	ldw	r2,176(sp)
    3430:	1c07883a 	add	r3,r3,r16
    3434:	8c400044 	addi	r17,r17,1
    3438:	b0800015 	stw	r2,0(r22)
    343c:	b4000115 	stw	r16,4(r22)
    3440:	d8c02015 	stw	r3,128(sp)
    3444:	dc401f15 	stw	r17,124(sp)
    3448:	008001c4 	movi	r2,7
    344c:	147ebd0e 	bge	r2,r17,2f44 <__alt_exception_stack_pointer+0xf8002f44>
    3450:	d9002d17 	ldw	r4,180(sp)
    3454:	d9801e04 	addi	r6,sp,120
    3458:	b80b883a 	mov	r5,r23
    345c:	00082540 	call	8254 <__sprint_r>
    3460:	103b5c1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3464:	d8c02017 	ldw	r3,128(sp)
    3468:	dc401f17 	ldw	r17,124(sp)
    346c:	dd800404 	addi	r22,sp,16
    3470:	003eb506 	br	2f48 <__alt_exception_stack_pointer+0xf8002f48>
    3474:	d9002d17 	ldw	r4,180(sp)
    3478:	d9801e04 	addi	r6,sp,120
    347c:	b80b883a 	mov	r5,r23
    3480:	00082540 	call	8254 <__sprint_r>
    3484:	103b531e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3488:	d8c02017 	ldw	r3,128(sp)
    348c:	dc401f17 	ldw	r17,124(sp)
    3490:	da000404 	addi	r8,sp,16
    3494:	003e8d06 	br	2ecc <__alt_exception_stack_pointer+0xf8002ecc>
    3498:	d9002d17 	ldw	r4,180(sp)
    349c:	d9801e04 	addi	r6,sp,120
    34a0:	b80b883a 	mov	r5,r23
    34a4:	00082540 	call	8254 <__sprint_r>
    34a8:	103b4a1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    34ac:	d8c02017 	ldw	r3,128(sp)
    34b0:	dc401f17 	ldw	r17,124(sp)
    34b4:	dd800404 	addi	r22,sp,16
    34b8:	003e8f06 	br	2ef8 <__alt_exception_stack_pointer+0xf8002ef8>
    34bc:	0027883a 	mov	r19,zero
    34c0:	003f4a06 	br	31ec <__alt_exception_stack_pointer+0xf80031ec>
    34c4:	d9002d17 	ldw	r4,180(sp)
    34c8:	d9801e04 	addi	r6,sp,120
    34cc:	b80b883a 	mov	r5,r23
    34d0:	00082540 	call	8254 <__sprint_r>
    34d4:	103b3f1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    34d8:	d8c02017 	ldw	r3,128(sp)
    34dc:	da000404 	addi	r8,sp,16
    34e0:	003c7b06 	br	26d0 <__alt_exception_stack_pointer+0xf80026d0>
    34e4:	d9402a17 	ldw	r5,168(sp)
    34e8:	04e7c83a 	sub	r19,zero,r19
    34ec:	07000b44 	movi	fp,45
    34f0:	9804c03a 	cmpne	r2,r19,zero
    34f4:	05adc83a 	sub	r22,zero,r22
    34f8:	df002785 	stb	fp,158(sp)
    34fc:	b0adc83a 	sub	r22,r22,r2
    3500:	28017b16 	blt	r5,zero,3af0 <___vfprintf_internal_r+0x1d2c>
    3504:	00bfdfc4 	movi	r2,-129
    3508:	90a4703a 	and	r18,r18,r2
    350c:	003b8906 	br	2334 <__alt_exception_stack_pointer+0xf8002334>
    3510:	d9003617 	ldw	r4,216(sp)
    3514:	d9403817 	ldw	r5,224(sp)
    3518:	da003d15 	stw	r8,244(sp)
    351c:	0007e340 	call	7e34 <__fpclassifyd>
    3520:	da003d17 	ldw	r8,244(sp)
    3524:	1000f026 	beq	r2,zero,38e8 <___vfprintf_internal_r+0x1b24>
    3528:	d9002a17 	ldw	r4,168(sp)
    352c:	05bff7c4 	movi	r22,-33
    3530:	00bfffc4 	movi	r2,-1
    3534:	8dac703a 	and	r22,r17,r22
    3538:	20820026 	beq	r4,r2,3d3c <___vfprintf_internal_r+0x1f78>
    353c:	008011c4 	movi	r2,71
    3540:	b081f726 	beq	r22,r2,3d20 <___vfprintf_internal_r+0x1f5c>
    3544:	d9003817 	ldw	r4,224(sp)
    3548:	90c04014 	ori	r3,r18,256
    354c:	d8c02c15 	stw	r3,176(sp)
    3550:	20021516 	blt	r4,zero,3da8 <___vfprintf_internal_r+0x1fe4>
    3554:	dcc03817 	ldw	r19,224(sp)
    3558:	d8002905 	stb	zero,164(sp)
    355c:	00801984 	movi	r2,102
    3560:	8881f926 	beq	r17,r2,3d48 <___vfprintf_internal_r+0x1f84>
    3564:	00801184 	movi	r2,70
    3568:	88821c26 	beq	r17,r2,3ddc <___vfprintf_internal_r+0x2018>
    356c:	00801144 	movi	r2,69
    3570:	b081ef26 	beq	r22,r2,3d30 <___vfprintf_internal_r+0x1f6c>
    3574:	d8c02a17 	ldw	r3,168(sp)
    3578:	d8802104 	addi	r2,sp,132
    357c:	d8800315 	stw	r2,12(sp)
    3580:	d9403617 	ldw	r5,216(sp)
    3584:	d8802504 	addi	r2,sp,148
    3588:	d9002d17 	ldw	r4,180(sp)
    358c:	d8800215 	stw	r2,8(sp)
    3590:	d8802604 	addi	r2,sp,152
    3594:	d8c00015 	stw	r3,0(sp)
    3598:	d8800115 	stw	r2,4(sp)
    359c:	01c00084 	movi	r7,2
    35a0:	980d883a 	mov	r6,r19
    35a4:	d8c03c15 	stw	r3,240(sp)
    35a8:	da003d15 	stw	r8,244(sp)
    35ac:	00044f40 	call	44f4 <_dtoa_r>
    35b0:	1021883a 	mov	r16,r2
    35b4:	008019c4 	movi	r2,103
    35b8:	d8c03c17 	ldw	r3,240(sp)
    35bc:	da003d17 	ldw	r8,244(sp)
    35c0:	88817126 	beq	r17,r2,3b88 <___vfprintf_internal_r+0x1dc4>
    35c4:	008011c4 	movi	r2,71
    35c8:	88829126 	beq	r17,r2,4010 <___vfprintf_internal_r+0x224c>
    35cc:	80f9883a 	add	fp,r16,r3
    35d0:	d9003617 	ldw	r4,216(sp)
    35d4:	000d883a 	mov	r6,zero
    35d8:	000f883a 	mov	r7,zero
    35dc:	980b883a 	mov	r5,r19
    35e0:	da003d15 	stw	r8,244(sp)
    35e4:	000c1900 	call	c190 <__eqdf2>
    35e8:	da003d17 	ldw	r8,244(sp)
    35ec:	10018d26 	beq	r2,zero,3c24 <___vfprintf_internal_r+0x1e60>
    35f0:	d8802117 	ldw	r2,132(sp)
    35f4:	1700062e 	bgeu	r2,fp,3610 <___vfprintf_internal_r+0x184c>
    35f8:	01000c04 	movi	r4,48
    35fc:	10c00044 	addi	r3,r2,1
    3600:	d8c02115 	stw	r3,132(sp)
    3604:	11000005 	stb	r4,0(r2)
    3608:	d8802117 	ldw	r2,132(sp)
    360c:	173ffb36 	bltu	r2,fp,35fc <__alt_exception_stack_pointer+0xf80035fc>
    3610:	1405c83a 	sub	r2,r2,r16
    3614:	d8803315 	stw	r2,204(sp)
    3618:	008011c4 	movi	r2,71
    361c:	b0817626 	beq	r22,r2,3bf8 <___vfprintf_internal_r+0x1e34>
    3620:	00801944 	movi	r2,101
    3624:	1442800e 	bge	r2,r17,4028 <___vfprintf_internal_r+0x2264>
    3628:	d8c02617 	ldw	r3,152(sp)
    362c:	00801984 	movi	r2,102
    3630:	d8c03215 	stw	r3,200(sp)
    3634:	8881fe26 	beq	r17,r2,3e30 <___vfprintf_internal_r+0x206c>
    3638:	d8c03217 	ldw	r3,200(sp)
    363c:	d9003317 	ldw	r4,204(sp)
    3640:	1901dd16 	blt	r3,r4,3db8 <___vfprintf_internal_r+0x1ff4>
    3644:	9480004c 	andi	r18,r18,1
    3648:	90022b1e 	bne	r18,zero,3ef8 <___vfprintf_internal_r+0x2134>
    364c:	1805883a 	mov	r2,r3
    3650:	18028316 	blt	r3,zero,4060 <___vfprintf_internal_r+0x229c>
    3654:	d8c03217 	ldw	r3,200(sp)
    3658:	044019c4 	movi	r17,103
    365c:	d8c02b15 	stw	r3,172(sp)
    3660:	df002907 	ldb	fp,164(sp)
    3664:	e001531e 	bne	fp,zero,3bb4 <___vfprintf_internal_r+0x1df0>
    3668:	df002783 	ldbu	fp,158(sp)
    366c:	d8802915 	stw	r2,164(sp)
    3670:	dc802c17 	ldw	r18,176(sp)
    3674:	d8002a15 	stw	zero,168(sp)
    3678:	003baf06 	br	2538 <__alt_exception_stack_pointer+0xf8002538>
    367c:	d8c02e17 	ldw	r3,184(sp)
    3680:	d9002e17 	ldw	r4,184(sp)
    3684:	d9402e17 	ldw	r5,184(sp)
    3688:	18c00017 	ldw	r3,0(r3)
    368c:	21000117 	ldw	r4,4(r4)
    3690:	29400204 	addi	r5,r5,8
    3694:	d8c03615 	stw	r3,216(sp)
    3698:	d9003815 	stw	r4,224(sp)
    369c:	d9402e15 	stw	r5,184(sp)
    36a0:	003b5006 	br	23e4 <__alt_exception_stack_pointer+0xf80023e4>
    36a4:	ac400007 	ldb	r17,0(r21)
    36a8:	003a2806 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    36ac:	9080100c 	andi	r2,r18,64
    36b0:	1000a826 	beq	r2,zero,3954 <___vfprintf_internal_r+0x1b90>
    36b4:	d8c02e17 	ldw	r3,184(sp)
    36b8:	002d883a 	mov	r22,zero
    36bc:	1cc0000b 	ldhu	r19,0(r3)
    36c0:	18c00104 	addi	r3,r3,4
    36c4:	d8c02e15 	stw	r3,184(sp)
    36c8:	003caf06 	br	2988 <__alt_exception_stack_pointer+0xf8002988>
    36cc:	d9002e17 	ldw	r4,184(sp)
    36d0:	d9402a17 	ldw	r5,168(sp)
    36d4:	002d883a 	mov	r22,zero
    36d8:	20800104 	addi	r2,r4,4
    36dc:	24c00017 	ldw	r19,0(r4)
    36e0:	283ebb0e 	bge	r5,zero,31d0 <__alt_exception_stack_pointer+0xf80031d0>
    36e4:	003ef106 	br	32ac <__alt_exception_stack_pointer+0xf80032ac>
    36e8:	9080040c 	andi	r2,r18,16
    36ec:	1000921e 	bne	r2,zero,3938 <___vfprintf_internal_r+0x1b74>
    36f0:	9480100c 	andi	r18,r18,64
    36f4:	90013926 	beq	r18,zero,3bdc <___vfprintf_internal_r+0x1e18>
    36f8:	d9402e17 	ldw	r5,184(sp)
    36fc:	d8c02f17 	ldw	r3,188(sp)
    3700:	28800017 	ldw	r2,0(r5)
    3704:	29400104 	addi	r5,r5,4
    3708:	d9402e15 	stw	r5,184(sp)
    370c:	10c0000d 	sth	r3,0(r2)
    3710:	0039e406 	br	1ea4 <__alt_exception_stack_pointer+0xf8001ea4>
    3714:	9080100c 	andi	r2,r18,64
    3718:	10008026 	beq	r2,zero,391c <___vfprintf_internal_r+0x1b58>
    371c:	d8802e17 	ldw	r2,184(sp)
    3720:	14c0000f 	ldh	r19,0(r2)
    3724:	10800104 	addi	r2,r2,4
    3728:	d8802e15 	stw	r2,184(sp)
    372c:	982dd7fa 	srai	r22,r19,31
    3730:	b005883a 	mov	r2,r22
    3734:	003af706 	br	2314 <__alt_exception_stack_pointer+0xf8002314>
    3738:	9080100c 	andi	r2,r18,64
    373c:	d8002785 	stb	zero,158(sp)
    3740:	10008a1e 	bne	r2,zero,396c <___vfprintf_internal_r+0x1ba8>
    3744:	d9002e17 	ldw	r4,184(sp)
    3748:	d9402a17 	ldw	r5,168(sp)
    374c:	002d883a 	mov	r22,zero
    3750:	20800104 	addi	r2,r4,4
    3754:	24c00017 	ldw	r19,0(r4)
    3758:	283e4b0e 	bge	r5,zero,3088 <__alt_exception_stack_pointer+0xf8003088>
    375c:	9d86b03a 	or	r3,r19,r22
    3760:	d8802e15 	stw	r2,184(sp)
    3764:	183e4c1e 	bne	r3,zero,3098 <__alt_exception_stack_pointer+0xf8003098>
    3768:	0039883a 	mov	fp,zero
    376c:	0005883a 	mov	r2,zero
    3770:	003d4006 	br	2c74 <__alt_exception_stack_pointer+0xf8002c74>
    3774:	01400074 	movhi	r5,1
    3778:	29435d84 	addi	r5,r5,3446
    377c:	d9402c15 	stw	r5,176(sp)
    3780:	d9402c17 	ldw	r5,176(sp)
    3784:	1c47883a 	add	r3,r3,r17
    3788:	10800044 	addi	r2,r2,1
    378c:	41400015 	stw	r5,0(r8)
    3790:	44400115 	stw	r17,4(r8)
    3794:	d8c02015 	stw	r3,128(sp)
    3798:	d8801f15 	stw	r2,124(sp)
    379c:	010001c4 	movi	r4,7
    37a0:	20bec816 	blt	r4,r2,32c4 <__alt_exception_stack_pointer+0xf80032c4>
    37a4:	42000204 	addi	r8,r8,8
    37a8:	003ecd06 	br	32e0 <__alt_exception_stack_pointer+0xf80032e0>
    37ac:	d9002a17 	ldw	r4,168(sp)
    37b0:	d8002785 	stb	zero,158(sp)
    37b4:	203d2d16 	blt	r4,zero,2c6c <__alt_exception_stack_pointer+0xf8002c6c>
    37b8:	00bfdfc4 	movi	r2,-129
    37bc:	90a4703a 	and	r18,r18,r2
    37c0:	003a6106 	br	2148 <__alt_exception_stack_pointer+0xf8002148>
    37c4:	01000074 	movhi	r4,1
    37c8:	21035d84 	addi	r4,r4,3446
    37cc:	d9002c15 	stw	r4,176(sp)
    37d0:	003bea06 	br	277c <__alt_exception_stack_pointer+0xf800277c>
    37d4:	d9002d17 	ldw	r4,180(sp)
    37d8:	d9801e04 	addi	r6,sp,120
    37dc:	b80b883a 	mov	r5,r23
    37e0:	00082540 	call	8254 <__sprint_r>
    37e4:	103a7b1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    37e8:	d8c02017 	ldw	r3,128(sp)
    37ec:	da000404 	addi	r8,sp,16
    37f0:	003d4106 	br	2cf8 <__alt_exception_stack_pointer+0xf8002cf8>
    37f4:	d8801f17 	ldw	r2,124(sp)
    37f8:	01400074 	movhi	r5,1
    37fc:	01000044 	movi	r4,1
    3800:	18c00044 	addi	r3,r3,1
    3804:	10800044 	addi	r2,r2,1
    3808:	29435d04 	addi	r5,r5,3444
    380c:	41000115 	stw	r4,4(r8)
    3810:	41400015 	stw	r5,0(r8)
    3814:	d8c02015 	stw	r3,128(sp)
    3818:	d8801f15 	stw	r2,124(sp)
    381c:	010001c4 	movi	r4,7
    3820:	20805c16 	blt	r4,r2,3994 <___vfprintf_internal_r+0x1bd0>
    3824:	42000204 	addi	r8,r8,8
    3828:	8800041e 	bne	r17,zero,383c <___vfprintf_internal_r+0x1a78>
    382c:	d8803317 	ldw	r2,204(sp)
    3830:	1000021e 	bne	r2,zero,383c <___vfprintf_internal_r+0x1a78>
    3834:	9080004c 	andi	r2,r18,1
    3838:	103be726 	beq	r2,zero,27d8 <__alt_exception_stack_pointer+0xf80027d8>
    383c:	d9003717 	ldw	r4,220(sp)
    3840:	d8801f17 	ldw	r2,124(sp)
    3844:	d9403417 	ldw	r5,208(sp)
    3848:	20c7883a 	add	r3,r4,r3
    384c:	10800044 	addi	r2,r2,1
    3850:	41000115 	stw	r4,4(r8)
    3854:	41400015 	stw	r5,0(r8)
    3858:	d8c02015 	stw	r3,128(sp)
    385c:	d8801f15 	stw	r2,124(sp)
    3860:	010001c4 	movi	r4,7
    3864:	20812116 	blt	r4,r2,3cec <___vfprintf_internal_r+0x1f28>
    3868:	42000204 	addi	r8,r8,8
    386c:	0463c83a 	sub	r17,zero,r17
    3870:	0440730e 	bge	zero,r17,3a40 <___vfprintf_internal_r+0x1c7c>
    3874:	05800404 	movi	r22,16
    3878:	b440860e 	bge	r22,r17,3a94 <___vfprintf_internal_r+0x1cd0>
    387c:	01400074 	movhi	r5,1
    3880:	29435d84 	addi	r5,r5,3446
    3884:	d9402c15 	stw	r5,176(sp)
    3888:	070001c4 	movi	fp,7
    388c:	dcc02d17 	ldw	r19,180(sp)
    3890:	00000306 	br	38a0 <___vfprintf_internal_r+0x1adc>
    3894:	42000204 	addi	r8,r8,8
    3898:	8c7ffc04 	addi	r17,r17,-16
    389c:	b440800e 	bge	r22,r17,3aa0 <___vfprintf_internal_r+0x1cdc>
    38a0:	18c00404 	addi	r3,r3,16
    38a4:	10800044 	addi	r2,r2,1
    38a8:	45000015 	stw	r20,0(r8)
    38ac:	45800115 	stw	r22,4(r8)
    38b0:	d8c02015 	stw	r3,128(sp)
    38b4:	d8801f15 	stw	r2,124(sp)
    38b8:	e0bff60e 	bge	fp,r2,3894 <__alt_exception_stack_pointer+0xf8003894>
    38bc:	d9801e04 	addi	r6,sp,120
    38c0:	b80b883a 	mov	r5,r23
    38c4:	9809883a 	mov	r4,r19
    38c8:	00082540 	call	8254 <__sprint_r>
    38cc:	103a411e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    38d0:	d8c02017 	ldw	r3,128(sp)
    38d4:	d8801f17 	ldw	r2,124(sp)
    38d8:	da000404 	addi	r8,sp,16
    38dc:	003fee06 	br	3898 <__alt_exception_stack_pointer+0xf8003898>
    38e0:	00bfffc4 	movi	r2,-1
    38e4:	003a3f06 	br	21e4 <__alt_exception_stack_pointer+0xf80021e4>
    38e8:	008011c4 	movi	r2,71
    38ec:	1440b816 	blt	r2,r17,3bd0 <___vfprintf_internal_r+0x1e0c>
    38f0:	04000074 	movhi	r16,1
    38f4:	84034f04 	addi	r16,r16,3388
    38f8:	00c000c4 	movi	r3,3
    38fc:	00bfdfc4 	movi	r2,-129
    3900:	d8c02915 	stw	r3,164(sp)
    3904:	90a4703a 	and	r18,r18,r2
    3908:	df002783 	ldbu	fp,158(sp)
    390c:	d8c02b15 	stw	r3,172(sp)
    3910:	d8002a15 	stw	zero,168(sp)
    3914:	d8003215 	stw	zero,200(sp)
    3918:	003b0706 	br	2538 <__alt_exception_stack_pointer+0xf8002538>
    391c:	d8c02e17 	ldw	r3,184(sp)
    3920:	1cc00017 	ldw	r19,0(r3)
    3924:	18c00104 	addi	r3,r3,4
    3928:	d8c02e15 	stw	r3,184(sp)
    392c:	982dd7fa 	srai	r22,r19,31
    3930:	b005883a 	mov	r2,r22
    3934:	003a7706 	br	2314 <__alt_exception_stack_pointer+0xf8002314>
    3938:	d8c02e17 	ldw	r3,184(sp)
    393c:	d9002f17 	ldw	r4,188(sp)
    3940:	18800017 	ldw	r2,0(r3)
    3944:	18c00104 	addi	r3,r3,4
    3948:	d8c02e15 	stw	r3,184(sp)
    394c:	11000015 	stw	r4,0(r2)
    3950:	00395406 	br	1ea4 <__alt_exception_stack_pointer+0xf8001ea4>
    3954:	d9002e17 	ldw	r4,184(sp)
    3958:	002d883a 	mov	r22,zero
    395c:	24c00017 	ldw	r19,0(r4)
    3960:	21000104 	addi	r4,r4,4
    3964:	d9002e15 	stw	r4,184(sp)
    3968:	003c0706 	br	2988 <__alt_exception_stack_pointer+0xf8002988>
    396c:	d9402e17 	ldw	r5,184(sp)
    3970:	d8c02a17 	ldw	r3,168(sp)
    3974:	002d883a 	mov	r22,zero
    3978:	28800104 	addi	r2,r5,4
    397c:	2cc0000b 	ldhu	r19,0(r5)
    3980:	183dc10e 	bge	r3,zero,3088 <__alt_exception_stack_pointer+0xf8003088>
    3984:	003f7506 	br	375c <__alt_exception_stack_pointer+0xf800375c>
    3988:	04000074 	movhi	r16,1
    398c:	84034d04 	addi	r16,r16,3380
    3990:	003aa706 	br	2430 <__alt_exception_stack_pointer+0xf8002430>
    3994:	d9002d17 	ldw	r4,180(sp)
    3998:	d9801e04 	addi	r6,sp,120
    399c:	b80b883a 	mov	r5,r23
    39a0:	00082540 	call	8254 <__sprint_r>
    39a4:	103a0b1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    39a8:	dc402617 	ldw	r17,152(sp)
    39ac:	d8c02017 	ldw	r3,128(sp)
    39b0:	da000404 	addi	r8,sp,16
    39b4:	003f9c06 	br	3828 <__alt_exception_stack_pointer+0xf8003828>
    39b8:	ac400043 	ldbu	r17,1(r21)
    39bc:	84000814 	ori	r16,r16,32
    39c0:	ad400044 	addi	r21,r21,1
    39c4:	8c403fcc 	andi	r17,r17,255
    39c8:	8c40201c 	xori	r17,r17,128
    39cc:	8c7fe004 	addi	r17,r17,-128
    39d0:	00395e06 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    39d4:	d8c02e15 	stw	r3,184(sp)
    39d8:	0039883a 	mov	fp,zero
    39dc:	003e3506 	br	32b4 <__alt_exception_stack_pointer+0xf80032b4>
    39e0:	d9002d17 	ldw	r4,180(sp)
    39e4:	d9801e04 	addi	r6,sp,120
    39e8:	b80b883a 	mov	r5,r23
    39ec:	00082540 	call	8254 <__sprint_r>
    39f0:	1039f81e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    39f4:	d8c02017 	ldw	r3,128(sp)
    39f8:	da000404 	addi	r8,sp,16
    39fc:	003cd006 	br	2d40 <__alt_exception_stack_pointer+0xf8002d40>
    3a00:	8009883a 	mov	r4,r16
    3a04:	df003d15 	stw	fp,244(sp)
    3a08:	00080c00 	call	80c0 <strlen>
    3a0c:	d8802b15 	stw	r2,172(sp)
    3a10:	da003d17 	ldw	r8,244(sp)
    3a14:	103c200e 	bge	r2,zero,2a98 <__alt_exception_stack_pointer+0xf8002a98>
    3a18:	0005883a 	mov	r2,zero
    3a1c:	003c1e06 	br	2a98 <__alt_exception_stack_pointer+0xf8002a98>
    3a20:	d9002d17 	ldw	r4,180(sp)
    3a24:	d9801e04 	addi	r6,sp,120
    3a28:	b80b883a 	mov	r5,r23
    3a2c:	00082540 	call	8254 <__sprint_r>
    3a30:	1039e81e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3a34:	d8c02017 	ldw	r3,128(sp)
    3a38:	d8801f17 	ldw	r2,124(sp)
    3a3c:	da000404 	addi	r8,sp,16
    3a40:	d9403317 	ldw	r5,204(sp)
    3a44:	10800044 	addi	r2,r2,1
    3a48:	44000015 	stw	r16,0(r8)
    3a4c:	28c7883a 	add	r3,r5,r3
    3a50:	003b5b06 	br	27c0 <__alt_exception_stack_pointer+0xf80027c0>
    3a54:	01000074 	movhi	r4,1
    3a58:	21036184 	addi	r4,r4,3462
    3a5c:	d9003515 	stw	r4,212(sp)
    3a60:	003af206 	br	262c <__alt_exception_stack_pointer+0xf800262c>
    3a64:	013fffc4 	movi	r4,-1
    3a68:	003a0806 	br	228c <__alt_exception_stack_pointer+0xf800228c>
    3a6c:	0023883a 	mov	r17,zero
    3a70:	003d9d06 	br	30e8 <__alt_exception_stack_pointer+0xf80030e8>
    3a74:	d9002d17 	ldw	r4,180(sp)
    3a78:	d9801e04 	addi	r6,sp,120
    3a7c:	b80b883a 	mov	r5,r23
    3a80:	00082540 	call	8254 <__sprint_r>
    3a84:	1039d31e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3a88:	d8c02017 	ldw	r3,128(sp)
    3a8c:	da000404 	addi	r8,sp,16
    3a90:	003d9406 	br	30e4 <__alt_exception_stack_pointer+0xf80030e4>
    3a94:	01000074 	movhi	r4,1
    3a98:	21035d84 	addi	r4,r4,3446
    3a9c:	d9002c15 	stw	r4,176(sp)
    3aa0:	d9002c17 	ldw	r4,176(sp)
    3aa4:	1c47883a 	add	r3,r3,r17
    3aa8:	10800044 	addi	r2,r2,1
    3aac:	41000015 	stw	r4,0(r8)
    3ab0:	44400115 	stw	r17,4(r8)
    3ab4:	d8c02015 	stw	r3,128(sp)
    3ab8:	d8801f15 	stw	r2,124(sp)
    3abc:	010001c4 	movi	r4,7
    3ac0:	20bfd716 	blt	r4,r2,3a20 <__alt_exception_stack_pointer+0xf8003a20>
    3ac4:	42000204 	addi	r8,r8,8
    3ac8:	003fdd06 	br	3a40 <__alt_exception_stack_pointer+0xf8003a40>
    3acc:	d9002d17 	ldw	r4,180(sp)
    3ad0:	d9801e04 	addi	r6,sp,120
    3ad4:	b80b883a 	mov	r5,r23
    3ad8:	00082540 	call	8254 <__sprint_r>
    3adc:	1039bd1e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3ae0:	d8802617 	ldw	r2,152(sp)
    3ae4:	d8c02017 	ldw	r3,128(sp)
    3ae8:	da000404 	addi	r8,sp,16
    3aec:	003e1006 	br	3330 <__alt_exception_stack_pointer+0xf8003330>
    3af0:	00800044 	movi	r2,1
    3af4:	10803fcc 	andi	r2,r2,255
    3af8:	00c00044 	movi	r3,1
    3afc:	10fa0d26 	beq	r2,r3,2334 <__alt_exception_stack_pointer+0xf8002334>
    3b00:	00c00084 	movi	r3,2
    3b04:	10fbaf26 	beq	r2,r3,29c4 <__alt_exception_stack_pointer+0xf80029c4>
    3b08:	003a6d06 	br	24c0 <__alt_exception_stack_pointer+0xf80024c0>
    3b0c:	01000074 	movhi	r4,1
    3b10:	21036184 	addi	r4,r4,3462
    3b14:	d9003515 	stw	r4,212(sp)
    3b18:	003b5406 	br	286c <__alt_exception_stack_pointer+0xf800286c>
    3b1c:	d8802a17 	ldw	r2,168(sp)
    3b20:	00c00184 	movi	r3,6
    3b24:	1880012e 	bgeu	r3,r2,3b2c <___vfprintf_internal_r+0x1d68>
    3b28:	1805883a 	mov	r2,r3
    3b2c:	d8802b15 	stw	r2,172(sp)
    3b30:	1000ef16 	blt	r2,zero,3ef0 <___vfprintf_internal_r+0x212c>
    3b34:	04000074 	movhi	r16,1
    3b38:	d8802915 	stw	r2,164(sp)
    3b3c:	dcc02e15 	stw	r19,184(sp)
    3b40:	d8002a15 	stw	zero,168(sp)
    3b44:	d8003215 	stw	zero,200(sp)
    3b48:	84035b04 	addi	r16,r16,3436
    3b4c:	0039883a 	mov	fp,zero
    3b50:	003a8006 	br	2554 <__alt_exception_stack_pointer+0xf8002554>
    3b54:	0021883a 	mov	r16,zero
    3b58:	003e0706 	br	3378 <__alt_exception_stack_pointer+0xf8003378>
    3b5c:	d9002d17 	ldw	r4,180(sp)
    3b60:	d9801e04 	addi	r6,sp,120
    3b64:	b80b883a 	mov	r5,r23
    3b68:	00082540 	call	8254 <__sprint_r>
    3b6c:	1039991e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3b70:	d8802617 	ldw	r2,152(sp)
    3b74:	d9403317 	ldw	r5,204(sp)
    3b78:	d8c02017 	ldw	r3,128(sp)
    3b7c:	da000404 	addi	r8,sp,16
    3b80:	2885c83a 	sub	r2,r5,r2
    3b84:	003dfb06 	br	3374 <__alt_exception_stack_pointer+0xf8003374>
    3b88:	9080004c 	andi	r2,r18,1
    3b8c:	103e8f1e 	bne	r2,zero,35cc <__alt_exception_stack_pointer+0xf80035cc>
    3b90:	d8802117 	ldw	r2,132(sp)
    3b94:	003e9e06 	br	3610 <__alt_exception_stack_pointer+0xf8003610>
    3b98:	1025883a 	mov	r18,r2
    3b9c:	0039883a 	mov	fp,zero
    3ba0:	00800084 	movi	r2,2
    3ba4:	003fd306 	br	3af4 <__alt_exception_stack_pointer+0xf8003af4>
    3ba8:	07000b44 	movi	fp,45
    3bac:	df002785 	stb	fp,158(sp)
    3bb0:	003a1b06 	br	2420 <__alt_exception_stack_pointer+0xf8002420>
    3bb4:	00c00b44 	movi	r3,45
    3bb8:	d8c02785 	stb	r3,158(sp)
    3bbc:	d8802915 	stw	r2,164(sp)
    3bc0:	dc802c17 	ldw	r18,176(sp)
    3bc4:	d8002a15 	stw	zero,168(sp)
    3bc8:	07000b44 	movi	fp,45
    3bcc:	003a5e06 	br	2548 <__alt_exception_stack_pointer+0xf8002548>
    3bd0:	04000074 	movhi	r16,1
    3bd4:	84035004 	addi	r16,r16,3392
    3bd8:	003f4706 	br	38f8 <__alt_exception_stack_pointer+0xf80038f8>
    3bdc:	d9002e17 	ldw	r4,184(sp)
    3be0:	d9402f17 	ldw	r5,188(sp)
    3be4:	20800017 	ldw	r2,0(r4)
    3be8:	21000104 	addi	r4,r4,4
    3bec:	d9002e15 	stw	r4,184(sp)
    3bf0:	11400015 	stw	r5,0(r2)
    3bf4:	0038ab06 	br	1ea4 <__alt_exception_stack_pointer+0xf8001ea4>
    3bf8:	dd802617 	ldw	r22,152(sp)
    3bfc:	00bfff44 	movi	r2,-3
    3c00:	b0801c16 	blt	r22,r2,3c74 <___vfprintf_internal_r+0x1eb0>
    3c04:	d9402a17 	ldw	r5,168(sp)
    3c08:	2d801a16 	blt	r5,r22,3c74 <___vfprintf_internal_r+0x1eb0>
    3c0c:	dd803215 	stw	r22,200(sp)
    3c10:	003e8906 	br	3638 <__alt_exception_stack_pointer+0xf8003638>
    3c14:	01000074 	movhi	r4,1
    3c18:	21035d84 	addi	r4,r4,3446
    3c1c:	d9002c15 	stw	r4,176(sp)
    3c20:	003c9106 	br	2e68 <__alt_exception_stack_pointer+0xf8002e68>
    3c24:	e005883a 	mov	r2,fp
    3c28:	003e7906 	br	3610 <__alt_exception_stack_pointer+0xf8003610>
    3c2c:	d9002a17 	ldw	r4,168(sp)
    3c30:	df002783 	ldbu	fp,158(sp)
    3c34:	dcc02e15 	stw	r19,184(sp)
    3c38:	d9002915 	stw	r4,164(sp)
    3c3c:	d9002b15 	stw	r4,172(sp)
    3c40:	d8002a15 	stw	zero,168(sp)
    3c44:	d8003215 	stw	zero,200(sp)
    3c48:	003a3b06 	br	2538 <__alt_exception_stack_pointer+0xf8002538>
    3c4c:	9080004c 	andi	r2,r18,1
    3c50:	0039883a 	mov	fp,zero
    3c54:	10000426 	beq	r2,zero,3c68 <___vfprintf_internal_r+0x1ea4>
    3c58:	00800c04 	movi	r2,48
    3c5c:	dc001dc4 	addi	r16,sp,119
    3c60:	d8801dc5 	stb	r2,119(sp)
    3c64:	003b6406 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    3c68:	d8002b15 	stw	zero,172(sp)
    3c6c:	dc001e04 	addi	r16,sp,120
    3c70:	003a2b06 	br	2520 <__alt_exception_stack_pointer+0xf8002520>
    3c74:	8c7fff84 	addi	r17,r17,-2
    3c78:	b5bfffc4 	addi	r22,r22,-1
    3c7c:	dd802615 	stw	r22,152(sp)
    3c80:	dc4022c5 	stb	r17,139(sp)
    3c84:	b000bf16 	blt	r22,zero,3f84 <___vfprintf_internal_r+0x21c0>
    3c88:	00800ac4 	movi	r2,43
    3c8c:	d8802305 	stb	r2,140(sp)
    3c90:	00800244 	movi	r2,9
    3c94:	15807016 	blt	r2,r22,3e58 <___vfprintf_internal_r+0x2094>
    3c98:	00800c04 	movi	r2,48
    3c9c:	b5800c04 	addi	r22,r22,48
    3ca0:	d8802345 	stb	r2,141(sp)
    3ca4:	dd802385 	stb	r22,142(sp)
    3ca8:	d88023c4 	addi	r2,sp,143
    3cac:	df0022c4 	addi	fp,sp,139
    3cb0:	d8c03317 	ldw	r3,204(sp)
    3cb4:	1739c83a 	sub	fp,r2,fp
    3cb8:	d9003317 	ldw	r4,204(sp)
    3cbc:	e0c7883a 	add	r3,fp,r3
    3cc0:	df003a15 	stw	fp,232(sp)
    3cc4:	d8c02b15 	stw	r3,172(sp)
    3cc8:	00800044 	movi	r2,1
    3ccc:	1100b30e 	bge	r2,r4,3f9c <___vfprintf_internal_r+0x21d8>
    3cd0:	d8c02b17 	ldw	r3,172(sp)
    3cd4:	18c00044 	addi	r3,r3,1
    3cd8:	d8c02b15 	stw	r3,172(sp)
    3cdc:	1805883a 	mov	r2,r3
    3ce0:	1800ac16 	blt	r3,zero,3f94 <___vfprintf_internal_r+0x21d0>
    3ce4:	d8003215 	stw	zero,200(sp)
    3ce8:	003e5d06 	br	3660 <__alt_exception_stack_pointer+0xf8003660>
    3cec:	d9002d17 	ldw	r4,180(sp)
    3cf0:	d9801e04 	addi	r6,sp,120
    3cf4:	b80b883a 	mov	r5,r23
    3cf8:	00082540 	call	8254 <__sprint_r>
    3cfc:	1039351e 	bne	r2,zero,21d4 <__alt_exception_stack_pointer+0xf80021d4>
    3d00:	dc402617 	ldw	r17,152(sp)
    3d04:	d8c02017 	ldw	r3,128(sp)
    3d08:	d8801f17 	ldw	r2,124(sp)
    3d0c:	da000404 	addi	r8,sp,16
    3d10:	003ed606 	br	386c <__alt_exception_stack_pointer+0xf800386c>
    3d14:	182b883a 	mov	r21,r3
    3d18:	d8002a15 	stw	zero,168(sp)
    3d1c:	00388c06 	br	1f50 <__alt_exception_stack_pointer+0xf8001f50>
    3d20:	d8802a17 	ldw	r2,168(sp)
    3d24:	103e071e 	bne	r2,zero,3544 <__alt_exception_stack_pointer+0xf8003544>
    3d28:	dc002a15 	stw	r16,168(sp)
    3d2c:	003e0506 	br	3544 <__alt_exception_stack_pointer+0xf8003544>
    3d30:	d9002a17 	ldw	r4,168(sp)
    3d34:	20c00044 	addi	r3,r4,1
    3d38:	003e0f06 	br	3578 <__alt_exception_stack_pointer+0xf8003578>
    3d3c:	01400184 	movi	r5,6
    3d40:	d9402a15 	stw	r5,168(sp)
    3d44:	003dff06 	br	3544 <__alt_exception_stack_pointer+0xf8003544>
    3d48:	d8802104 	addi	r2,sp,132
    3d4c:	d8800315 	stw	r2,12(sp)
    3d50:	d8802504 	addi	r2,sp,148
    3d54:	d8800215 	stw	r2,8(sp)
    3d58:	d8802604 	addi	r2,sp,152
    3d5c:	d8800115 	stw	r2,4(sp)
    3d60:	d8802a17 	ldw	r2,168(sp)
    3d64:	d9403617 	ldw	r5,216(sp)
    3d68:	d9002d17 	ldw	r4,180(sp)
    3d6c:	d8800015 	stw	r2,0(sp)
    3d70:	01c000c4 	movi	r7,3
    3d74:	980d883a 	mov	r6,r19
    3d78:	da003d15 	stw	r8,244(sp)
    3d7c:	00044f40 	call	44f4 <_dtoa_r>
    3d80:	d8c02a17 	ldw	r3,168(sp)
    3d84:	da003d17 	ldw	r8,244(sp)
    3d88:	1021883a 	mov	r16,r2
    3d8c:	10f9883a 	add	fp,r2,r3
    3d90:	81000007 	ldb	r4,0(r16)
    3d94:	00800c04 	movi	r2,48
    3d98:	20805e26 	beq	r4,r2,3f14 <___vfprintf_internal_r+0x2150>
    3d9c:	d8c02617 	ldw	r3,152(sp)
    3da0:	e0f9883a 	add	fp,fp,r3
    3da4:	003e0a06 	br	35d0 <__alt_exception_stack_pointer+0xf80035d0>
    3da8:	00c00b44 	movi	r3,45
    3dac:	24e0003c 	xorhi	r19,r4,32768
    3db0:	d8c02905 	stb	r3,164(sp)
    3db4:	003de906 	br	355c <__alt_exception_stack_pointer+0xf800355c>
    3db8:	d8c03217 	ldw	r3,200(sp)
    3dbc:	00c07a0e 	bge	zero,r3,3fa8 <___vfprintf_internal_r+0x21e4>
    3dc0:	00800044 	movi	r2,1
    3dc4:	d9003317 	ldw	r4,204(sp)
    3dc8:	1105883a 	add	r2,r2,r4
    3dcc:	d8802b15 	stw	r2,172(sp)
    3dd0:	10004e16 	blt	r2,zero,3f0c <___vfprintf_internal_r+0x2148>
    3dd4:	044019c4 	movi	r17,103
    3dd8:	003e2106 	br	3660 <__alt_exception_stack_pointer+0xf8003660>
    3ddc:	d9002a17 	ldw	r4,168(sp)
    3de0:	d8802104 	addi	r2,sp,132
    3de4:	d8800315 	stw	r2,12(sp)
    3de8:	d9000015 	stw	r4,0(sp)
    3dec:	d8802504 	addi	r2,sp,148
    3df0:	d9403617 	ldw	r5,216(sp)
    3df4:	d9002d17 	ldw	r4,180(sp)
    3df8:	d8800215 	stw	r2,8(sp)
    3dfc:	d8802604 	addi	r2,sp,152
    3e00:	d8800115 	stw	r2,4(sp)
    3e04:	01c000c4 	movi	r7,3
    3e08:	980d883a 	mov	r6,r19
    3e0c:	da003d15 	stw	r8,244(sp)
    3e10:	00044f40 	call	44f4 <_dtoa_r>
    3e14:	d8c02a17 	ldw	r3,168(sp)
    3e18:	da003d17 	ldw	r8,244(sp)
    3e1c:	1021883a 	mov	r16,r2
    3e20:	00801184 	movi	r2,70
    3e24:	80f9883a 	add	fp,r16,r3
    3e28:	88bfd926 	beq	r17,r2,3d90 <__alt_exception_stack_pointer+0xf8003d90>
    3e2c:	003de806 	br	35d0 <__alt_exception_stack_pointer+0xf80035d0>
    3e30:	d9002a17 	ldw	r4,168(sp)
    3e34:	00c04d0e 	bge	zero,r3,3f6c <___vfprintf_internal_r+0x21a8>
    3e38:	2000441e 	bne	r4,zero,3f4c <___vfprintf_internal_r+0x2188>
    3e3c:	9480004c 	andi	r18,r18,1
    3e40:	9000421e 	bne	r18,zero,3f4c <___vfprintf_internal_r+0x2188>
    3e44:	1805883a 	mov	r2,r3
    3e48:	18006f16 	blt	r3,zero,4008 <___vfprintf_internal_r+0x2244>
    3e4c:	d8c03217 	ldw	r3,200(sp)
    3e50:	d8c02b15 	stw	r3,172(sp)
    3e54:	003e0206 	br	3660 <__alt_exception_stack_pointer+0xf8003660>
    3e58:	df0022c4 	addi	fp,sp,139
    3e5c:	dc002a15 	stw	r16,168(sp)
    3e60:	4027883a 	mov	r19,r8
    3e64:	e021883a 	mov	r16,fp
    3e68:	b009883a 	mov	r4,r22
    3e6c:	01400284 	movi	r5,10
    3e70:	00008480 	call	848 <__modsi3>
    3e74:	10800c04 	addi	r2,r2,48
    3e78:	843fffc4 	addi	r16,r16,-1
    3e7c:	b009883a 	mov	r4,r22
    3e80:	01400284 	movi	r5,10
    3e84:	80800005 	stb	r2,0(r16)
    3e88:	00007c40 	call	7c4 <__divsi3>
    3e8c:	102d883a 	mov	r22,r2
    3e90:	00800244 	movi	r2,9
    3e94:	15bff416 	blt	r2,r22,3e68 <__alt_exception_stack_pointer+0xf8003e68>
    3e98:	9811883a 	mov	r8,r19
    3e9c:	b0800c04 	addi	r2,r22,48
    3ea0:	8027883a 	mov	r19,r16
    3ea4:	997fffc4 	addi	r5,r19,-1
    3ea8:	98bfffc5 	stb	r2,-1(r19)
    3eac:	dc002a17 	ldw	r16,168(sp)
    3eb0:	2f006d2e 	bgeu	r5,fp,4068 <___vfprintf_internal_r+0x22a4>
    3eb4:	d9c02384 	addi	r7,sp,142
    3eb8:	3ccfc83a 	sub	r7,r7,r19
    3ebc:	d9002344 	addi	r4,sp,141
    3ec0:	e1cf883a 	add	r7,fp,r7
    3ec4:	00000106 	br	3ecc <___vfprintf_internal_r+0x2108>
    3ec8:	28800003 	ldbu	r2,0(r5)
    3ecc:	20800005 	stb	r2,0(r4)
    3ed0:	21000044 	addi	r4,r4,1
    3ed4:	29400044 	addi	r5,r5,1
    3ed8:	393ffb1e 	bne	r7,r4,3ec8 <__alt_exception_stack_pointer+0xf8003ec8>
    3edc:	d8802304 	addi	r2,sp,140
    3ee0:	14c5c83a 	sub	r2,r2,r19
    3ee4:	d8c02344 	addi	r3,sp,141
    3ee8:	1885883a 	add	r2,r3,r2
    3eec:	003f7006 	br	3cb0 <__alt_exception_stack_pointer+0xf8003cb0>
    3ef0:	0005883a 	mov	r2,zero
    3ef4:	003f0f06 	br	3b34 <__alt_exception_stack_pointer+0xf8003b34>
    3ef8:	d8c03217 	ldw	r3,200(sp)
    3efc:	18c00044 	addi	r3,r3,1
    3f00:	d8c02b15 	stw	r3,172(sp)
    3f04:	1805883a 	mov	r2,r3
    3f08:	183fb20e 	bge	r3,zero,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	003fb006 	br	3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    3f14:	d9003617 	ldw	r4,216(sp)
    3f18:	000d883a 	mov	r6,zero
    3f1c:	000f883a 	mov	r7,zero
    3f20:	980b883a 	mov	r5,r19
    3f24:	d8c03c15 	stw	r3,240(sp)
    3f28:	da003d15 	stw	r8,244(sp)
    3f2c:	000c1900 	call	c190 <__eqdf2>
    3f30:	d8c03c17 	ldw	r3,240(sp)
    3f34:	da003d17 	ldw	r8,244(sp)
    3f38:	103f9826 	beq	r2,zero,3d9c <__alt_exception_stack_pointer+0xf8003d9c>
    3f3c:	00800044 	movi	r2,1
    3f40:	10c7c83a 	sub	r3,r2,r3
    3f44:	d8c02615 	stw	r3,152(sp)
    3f48:	003f9506 	br	3da0 <__alt_exception_stack_pointer+0xf8003da0>
    3f4c:	d9002a17 	ldw	r4,168(sp)
    3f50:	d8c03217 	ldw	r3,200(sp)
    3f54:	20800044 	addi	r2,r4,1
    3f58:	1885883a 	add	r2,r3,r2
    3f5c:	d8802b15 	stw	r2,172(sp)
    3f60:	103dbf0e 	bge	r2,zero,3660 <__alt_exception_stack_pointer+0xf8003660>
    3f64:	0005883a 	mov	r2,zero
    3f68:	003dbd06 	br	3660 <__alt_exception_stack_pointer+0xf8003660>
    3f6c:	2000201e 	bne	r4,zero,3ff0 <___vfprintf_internal_r+0x222c>
    3f70:	9480004c 	andi	r18,r18,1
    3f74:	90001e1e 	bne	r18,zero,3ff0 <___vfprintf_internal_r+0x222c>
    3f78:	00800044 	movi	r2,1
    3f7c:	d8802b15 	stw	r2,172(sp)
    3f80:	003db706 	br	3660 <__alt_exception_stack_pointer+0xf8003660>
    3f84:	00800b44 	movi	r2,45
    3f88:	05adc83a 	sub	r22,zero,r22
    3f8c:	d8802305 	stb	r2,140(sp)
    3f90:	003f3f06 	br	3c90 <__alt_exception_stack_pointer+0xf8003c90>
    3f94:	0005883a 	mov	r2,zero
    3f98:	003f5206 	br	3ce4 <__alt_exception_stack_pointer+0xf8003ce4>
    3f9c:	90a4703a 	and	r18,r18,r2
    3fa0:	903f4e26 	beq	r18,zero,3cdc <__alt_exception_stack_pointer+0xf8003cdc>
    3fa4:	003f4a06 	br	3cd0 <__alt_exception_stack_pointer+0xf8003cd0>
    3fa8:	00800084 	movi	r2,2
    3fac:	10c5c83a 	sub	r2,r2,r3
    3fb0:	003f8406 	br	3dc4 <__alt_exception_stack_pointer+0xf8003dc4>
    3fb4:	d9402e17 	ldw	r5,184(sp)
    3fb8:	d9002e17 	ldw	r4,184(sp)
    3fbc:	ac400043 	ldbu	r17,1(r21)
    3fc0:	29400017 	ldw	r5,0(r5)
    3fc4:	20800104 	addi	r2,r4,4
    3fc8:	d8802e15 	stw	r2,184(sp)
    3fcc:	d9402a15 	stw	r5,168(sp)
    3fd0:	182b883a 	mov	r21,r3
    3fd4:	283e7b0e 	bge	r5,zero,39c4 <__alt_exception_stack_pointer+0xf80039c4>
    3fd8:	8c403fcc 	andi	r17,r17,255
    3fdc:	017fffc4 	movi	r5,-1
    3fe0:	8c40201c 	xori	r17,r17,128
    3fe4:	d9402a15 	stw	r5,168(sp)
    3fe8:	8c7fe004 	addi	r17,r17,-128
    3fec:	0037d706 	br	1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    3ff0:	d8c02a17 	ldw	r3,168(sp)
    3ff4:	18c00084 	addi	r3,r3,2
    3ff8:	d8c02b15 	stw	r3,172(sp)
    3ffc:	1805883a 	mov	r2,r3
    4000:	183d970e 	bge	r3,zero,3660 <__alt_exception_stack_pointer+0xf8003660>
    4004:	003fd706 	br	3f64 <__alt_exception_stack_pointer+0xf8003f64>
    4008:	0005883a 	mov	r2,zero
    400c:	003f8f06 	br	3e4c <__alt_exception_stack_pointer+0xf8003e4c>
    4010:	9080004c 	andi	r2,r18,1
    4014:	103f821e 	bne	r2,zero,3e20 <__alt_exception_stack_pointer+0xf8003e20>
    4018:	d8802117 	ldw	r2,132(sp)
    401c:	1405c83a 	sub	r2,r2,r16
    4020:	d8803315 	stw	r2,204(sp)
    4024:	b47ef426 	beq	r22,r17,3bf8 <__alt_exception_stack_pointer+0xf8003bf8>
    4028:	dd802617 	ldw	r22,152(sp)
    402c:	003f1206 	br	3c78 <__alt_exception_stack_pointer+0xf8003c78>
    4030:	d8c02b03 	ldbu	r3,172(sp)
    4034:	d8c02785 	stb	r3,158(sp)
    4038:	0038df06 	br	23b8 <__alt_exception_stack_pointer+0xf80023b8>
    403c:	d8c02b03 	ldbu	r3,172(sp)
    4040:	d8c02785 	stb	r3,158(sp)
    4044:	0038aa06 	br	22f0 <__alt_exception_stack_pointer+0xf80022f0>
    4048:	d8c02b03 	ldbu	r3,172(sp)
    404c:	d8c02785 	stb	r3,158(sp)
    4050:	003a4306 	br	2960 <__alt_exception_stack_pointer+0xf8002960>
    4054:	d8c02b03 	ldbu	r3,172(sp)
    4058:	d8c02785 	stb	r3,158(sp)
    405c:	003af506 	br	2c34 <__alt_exception_stack_pointer+0xf8002c34>
    4060:	0005883a 	mov	r2,zero
    4064:	003d7b06 	br	3654 <__alt_exception_stack_pointer+0xf8003654>
    4068:	d8802344 	addi	r2,sp,141
    406c:	003f1006 	br	3cb0 <__alt_exception_stack_pointer+0xf8003cb0>
    4070:	d8c02b03 	ldbu	r3,172(sp)
    4074:	d8c02785 	stb	r3,158(sp)
    4078:	0038fd06 	br	2470 <__alt_exception_stack_pointer+0xf8002470>
    407c:	d8c02b03 	ldbu	r3,172(sp)
    4080:	d8c02785 	stb	r3,158(sp)
    4084:	003a9706 	br	2ae4 <__alt_exception_stack_pointer+0xf8002ae4>
    4088:	d8c02b03 	ldbu	r3,172(sp)
    408c:	d8c02785 	stb	r3,158(sp)
    4090:	003a1806 	br	28f4 <__alt_exception_stack_pointer+0xf80028f4>
    4094:	d8c02b03 	ldbu	r3,172(sp)
    4098:	d8c02785 	stb	r3,158(sp)
    409c:	003abe06 	br	2b98 <__alt_exception_stack_pointer+0xf8002b98>

000040a0 <__vfprintf_internal>:
    40a0:	00800074 	movhi	r2,1
    40a4:	108ab404 	addi	r2,r2,10960
    40a8:	300f883a 	mov	r7,r6
    40ac:	280d883a 	mov	r6,r5
    40b0:	200b883a 	mov	r5,r4
    40b4:	11000017 	ldw	r4,0(r2)
    40b8:	0001dc41 	jmpi	1dc4 <___vfprintf_internal_r>

000040bc <__sbprintf>:
    40bc:	2880030b 	ldhu	r2,12(r5)
    40c0:	2ac01917 	ldw	r11,100(r5)
    40c4:	2a80038b 	ldhu	r10,14(r5)
    40c8:	2a400717 	ldw	r9,28(r5)
    40cc:	2a000917 	ldw	r8,36(r5)
    40d0:	defee204 	addi	sp,sp,-1144
    40d4:	00c10004 	movi	r3,1024
    40d8:	dc011a15 	stw	r16,1128(sp)
    40dc:	10bfff4c 	andi	r2,r2,65533
    40e0:	2821883a 	mov	r16,r5
    40e4:	d8cb883a 	add	r5,sp,r3
    40e8:	dc811c15 	stw	r18,1136(sp)
    40ec:	dc411b15 	stw	r17,1132(sp)
    40f0:	dfc11d15 	stw	ra,1140(sp)
    40f4:	2025883a 	mov	r18,r4
    40f8:	d881030d 	sth	r2,1036(sp)
    40fc:	dac11915 	stw	r11,1124(sp)
    4100:	da81038d 	sth	r10,1038(sp)
    4104:	da410715 	stw	r9,1052(sp)
    4108:	da010915 	stw	r8,1060(sp)
    410c:	dec10015 	stw	sp,1024(sp)
    4110:	dec10415 	stw	sp,1040(sp)
    4114:	d8c10215 	stw	r3,1032(sp)
    4118:	d8c10515 	stw	r3,1044(sp)
    411c:	d8010615 	stw	zero,1048(sp)
    4120:	0001dc40 	call	1dc4 <___vfprintf_internal_r>
    4124:	1023883a 	mov	r17,r2
    4128:	10000416 	blt	r2,zero,413c <__sbprintf+0x80>
    412c:	d9410004 	addi	r5,sp,1024
    4130:	9009883a 	mov	r4,r18
    4134:	0005d980 	call	5d98 <_fflush_r>
    4138:	10000d1e 	bne	r2,zero,4170 <__sbprintf+0xb4>
    413c:	d881030b 	ldhu	r2,1036(sp)
    4140:	1080100c 	andi	r2,r2,64
    4144:	10000326 	beq	r2,zero,4154 <__sbprintf+0x98>
    4148:	8080030b 	ldhu	r2,12(r16)
    414c:	10801014 	ori	r2,r2,64
    4150:	8080030d 	sth	r2,12(r16)
    4154:	8805883a 	mov	r2,r17
    4158:	dfc11d17 	ldw	ra,1140(sp)
    415c:	dc811c17 	ldw	r18,1136(sp)
    4160:	dc411b17 	ldw	r17,1132(sp)
    4164:	dc011a17 	ldw	r16,1128(sp)
    4168:	dec11e04 	addi	sp,sp,1144
    416c:	f800283a 	ret
    4170:	047fffc4 	movi	r17,-1
    4174:	003ff106 	br	413c <__alt_exception_stack_pointer+0xf800413c>

00004178 <__swsetup_r>:
    4178:	00800074 	movhi	r2,1
    417c:	defffd04 	addi	sp,sp,-12
    4180:	108ab404 	addi	r2,r2,10960
    4184:	dc400115 	stw	r17,4(sp)
    4188:	2023883a 	mov	r17,r4
    418c:	11000017 	ldw	r4,0(r2)
    4190:	dc000015 	stw	r16,0(sp)
    4194:	dfc00215 	stw	ra,8(sp)
    4198:	2821883a 	mov	r16,r5
    419c:	20000226 	beq	r4,zero,41a8 <__swsetup_r+0x30>
    41a0:	20800e17 	ldw	r2,56(r4)
    41a4:	10003126 	beq	r2,zero,426c <__swsetup_r+0xf4>
    41a8:	8080030b 	ldhu	r2,12(r16)
    41ac:	10c0020c 	andi	r3,r2,8
    41b0:	1009883a 	mov	r4,r2
    41b4:	18000f26 	beq	r3,zero,41f4 <__swsetup_r+0x7c>
    41b8:	80c00417 	ldw	r3,16(r16)
    41bc:	18001526 	beq	r3,zero,4214 <__swsetup_r+0x9c>
    41c0:	1100004c 	andi	r4,r2,1
    41c4:	20001c1e 	bne	r4,zero,4238 <__swsetup_r+0xc0>
    41c8:	1080008c 	andi	r2,r2,2
    41cc:	1000291e 	bne	r2,zero,4274 <__swsetup_r+0xfc>
    41d0:	80800517 	ldw	r2,20(r16)
    41d4:	80800215 	stw	r2,8(r16)
    41d8:	18001c26 	beq	r3,zero,424c <__swsetup_r+0xd4>
    41dc:	0005883a 	mov	r2,zero
    41e0:	dfc00217 	ldw	ra,8(sp)
    41e4:	dc400117 	ldw	r17,4(sp)
    41e8:	dc000017 	ldw	r16,0(sp)
    41ec:	dec00304 	addi	sp,sp,12
    41f0:	f800283a 	ret
    41f4:	2080040c 	andi	r2,r4,16
    41f8:	10002e26 	beq	r2,zero,42b4 <__swsetup_r+0x13c>
    41fc:	2080010c 	andi	r2,r4,4
    4200:	10001e1e 	bne	r2,zero,427c <__swsetup_r+0x104>
    4204:	80c00417 	ldw	r3,16(r16)
    4208:	20800214 	ori	r2,r4,8
    420c:	8080030d 	sth	r2,12(r16)
    4210:	183feb1e 	bne	r3,zero,41c0 <__alt_exception_stack_pointer+0xf80041c0>
    4214:	1100a00c 	andi	r4,r2,640
    4218:	01408004 	movi	r5,512
    421c:	217fe826 	beq	r4,r5,41c0 <__alt_exception_stack_pointer+0xf80041c0>
    4220:	800b883a 	mov	r5,r16
    4224:	8809883a 	mov	r4,r17
    4228:	000686c0 	call	686c <__smakebuf_r>
    422c:	8080030b 	ldhu	r2,12(r16)
    4230:	80c00417 	ldw	r3,16(r16)
    4234:	003fe206 	br	41c0 <__alt_exception_stack_pointer+0xf80041c0>
    4238:	80800517 	ldw	r2,20(r16)
    423c:	80000215 	stw	zero,8(r16)
    4240:	0085c83a 	sub	r2,zero,r2
    4244:	80800615 	stw	r2,24(r16)
    4248:	183fe41e 	bne	r3,zero,41dc <__alt_exception_stack_pointer+0xf80041dc>
    424c:	80c0030b 	ldhu	r3,12(r16)
    4250:	0005883a 	mov	r2,zero
    4254:	1900200c 	andi	r4,r3,128
    4258:	203fe126 	beq	r4,zero,41e0 <__alt_exception_stack_pointer+0xf80041e0>
    425c:	18c01014 	ori	r3,r3,64
    4260:	80c0030d 	sth	r3,12(r16)
    4264:	00bfffc4 	movi	r2,-1
    4268:	003fdd06 	br	41e0 <__alt_exception_stack_pointer+0xf80041e0>
    426c:	00061840 	call	6184 <__sinit>
    4270:	003fcd06 	br	41a8 <__alt_exception_stack_pointer+0xf80041a8>
    4274:	0005883a 	mov	r2,zero
    4278:	003fd606 	br	41d4 <__alt_exception_stack_pointer+0xf80041d4>
    427c:	81400c17 	ldw	r5,48(r16)
    4280:	28000626 	beq	r5,zero,429c <__swsetup_r+0x124>
    4284:	80801004 	addi	r2,r16,64
    4288:	28800326 	beq	r5,r2,4298 <__swsetup_r+0x120>
    428c:	8809883a 	mov	r4,r17
    4290:	00062f80 	call	62f8 <_free_r>
    4294:	8100030b 	ldhu	r4,12(r16)
    4298:	80000c15 	stw	zero,48(r16)
    429c:	80c00417 	ldw	r3,16(r16)
    42a0:	00bff6c4 	movi	r2,-37
    42a4:	1108703a 	and	r4,r2,r4
    42a8:	80000115 	stw	zero,4(r16)
    42ac:	80c00015 	stw	r3,0(r16)
    42b0:	003fd506 	br	4208 <__alt_exception_stack_pointer+0xf8004208>
    42b4:	00800244 	movi	r2,9
    42b8:	88800015 	stw	r2,0(r17)
    42bc:	20801014 	ori	r2,r4,64
    42c0:	8080030d 	sth	r2,12(r16)
    42c4:	00bfffc4 	movi	r2,-1
    42c8:	003fc506 	br	41e0 <__alt_exception_stack_pointer+0xf80041e0>

000042cc <quorem>:
    42cc:	defff204 	addi	sp,sp,-56
    42d0:	ddc00b15 	stw	r23,44(sp)
    42d4:	20800417 	ldw	r2,16(r4)
    42d8:	2dc00417 	ldw	r23,16(r5)
    42dc:	dfc00d15 	stw	ra,52(sp)
    42e0:	df000c15 	stw	fp,48(sp)
    42e4:	dd800a15 	stw	r22,40(sp)
    42e8:	dd400915 	stw	r21,36(sp)
    42ec:	dd000815 	stw	r20,32(sp)
    42f0:	dcc00715 	stw	r19,28(sp)
    42f4:	dc800615 	stw	r18,24(sp)
    42f8:	dc400515 	stw	r17,20(sp)
    42fc:	dc000415 	stw	r16,16(sp)
    4300:	15c07a16 	blt	r2,r23,44ec <quorem+0x220>
    4304:	bdffffc4 	addi	r23,r23,-1
    4308:	bde9883a 	add	r20,r23,r23
    430c:	28c00504 	addi	r3,r5,20
    4310:	a529883a 	add	r20,r20,r20
    4314:	1d39883a 	add	fp,r3,r20
    4318:	24c00504 	addi	r19,r4,20
    431c:	d9400215 	stw	r5,8(sp)
    4320:	9d29883a 	add	r20,r19,r20
    4324:	e1400017 	ldw	r5,0(fp)
    4328:	d9000015 	stw	r4,0(sp)
    432c:	a1000017 	ldw	r4,0(r20)
    4330:	29400044 	addi	r5,r5,1
    4334:	d8c00115 	stw	r3,4(sp)
    4338:	dd000315 	stw	r20,12(sp)
    433c:	00008bc0 	call	8bc <__udivsi3>
    4340:	1025883a 	mov	r18,r2
    4344:	10003026 	beq	r2,zero,4408 <quorem+0x13c>
    4348:	dc400117 	ldw	r17,4(sp)
    434c:	9829883a 	mov	r20,r19
    4350:	002d883a 	mov	r22,zero
    4354:	0021883a 	mov	r16,zero
    4358:	8d400017 	ldw	r21,0(r17)
    435c:	900b883a 	mov	r5,r18
    4360:	8c400104 	addi	r17,r17,4
    4364:	a93fffcc 	andi	r4,r21,65535
    4368:	00009780 	call	978 <__mulsi3>
    436c:	a808d43a 	srli	r4,r21,16
    4370:	900b883a 	mov	r5,r18
    4374:	15ad883a 	add	r22,r2,r22
    4378:	00009780 	call	978 <__mulsi3>
    437c:	a1000017 	ldw	r4,0(r20)
    4380:	b00cd43a 	srli	r6,r22,16
    4384:	b0ffffcc 	andi	r3,r22,65535
    4388:	217fffcc 	andi	r5,r4,65535
    438c:	2c21883a 	add	r16,r5,r16
    4390:	80c7c83a 	sub	r3,r16,r3
    4394:	2008d43a 	srli	r4,r4,16
    4398:	1185883a 	add	r2,r2,r6
    439c:	1821d43a 	srai	r16,r3,16
    43a0:	117fffcc 	andi	r5,r2,65535
    43a4:	2149c83a 	sub	r4,r4,r5
    43a8:	2421883a 	add	r16,r4,r16
    43ac:	8008943a 	slli	r4,r16,16
    43b0:	18ffffcc 	andi	r3,r3,65535
    43b4:	102cd43a 	srli	r22,r2,16
    43b8:	20c8b03a 	or	r4,r4,r3
    43bc:	a1000015 	stw	r4,0(r20)
    43c0:	8021d43a 	srai	r16,r16,16
    43c4:	a5000104 	addi	r20,r20,4
    43c8:	e47fe32e 	bgeu	fp,r17,4358 <__alt_exception_stack_pointer+0xf8004358>
    43cc:	d8c00317 	ldw	r3,12(sp)
    43d0:	18800017 	ldw	r2,0(r3)
    43d4:	10000c1e 	bne	r2,zero,4408 <quorem+0x13c>
    43d8:	18bfff04 	addi	r2,r3,-4
    43dc:	9880082e 	bgeu	r19,r2,4400 <quorem+0x134>
    43e0:	18ffff17 	ldw	r3,-4(r3)
    43e4:	18000326 	beq	r3,zero,43f4 <quorem+0x128>
    43e8:	00000506 	br	4400 <quorem+0x134>
    43ec:	10c00017 	ldw	r3,0(r2)
    43f0:	1800031e 	bne	r3,zero,4400 <quorem+0x134>
    43f4:	10bfff04 	addi	r2,r2,-4
    43f8:	bdffffc4 	addi	r23,r23,-1
    43fc:	98bffb36 	bltu	r19,r2,43ec <__alt_exception_stack_pointer+0xf80043ec>
    4400:	d8c00017 	ldw	r3,0(sp)
    4404:	1dc00415 	stw	r23,16(r3)
    4408:	d9400217 	ldw	r5,8(sp)
    440c:	d9000017 	ldw	r4,0(sp)
    4410:	00077000 	call	7700 <__mcmp>
    4414:	10002816 	blt	r2,zero,44b8 <quorem+0x1ec>
    4418:	dc400117 	ldw	r17,4(sp)
    441c:	94800044 	addi	r18,r18,1
    4420:	980d883a 	mov	r6,r19
    4424:	0007883a 	mov	r3,zero
    4428:	31000017 	ldw	r4,0(r6)
    442c:	89400017 	ldw	r5,0(r17)
    4430:	31800104 	addi	r6,r6,4
    4434:	20bfffcc 	andi	r2,r4,65535
    4438:	10c7883a 	add	r3,r2,r3
    443c:	28bfffcc 	andi	r2,r5,65535
    4440:	1885c83a 	sub	r2,r3,r2
    4444:	280ad43a 	srli	r5,r5,16
    4448:	2008d43a 	srli	r4,r4,16
    444c:	1007d43a 	srai	r3,r2,16
    4450:	10bfffcc 	andi	r2,r2,65535
    4454:	2149c83a 	sub	r4,r4,r5
    4458:	20c9883a 	add	r4,r4,r3
    445c:	200a943a 	slli	r5,r4,16
    4460:	8c400104 	addi	r17,r17,4
    4464:	2007d43a 	srai	r3,r4,16
    4468:	2884b03a 	or	r2,r5,r2
    446c:	30bfff15 	stw	r2,-4(r6)
    4470:	e47fed2e 	bgeu	fp,r17,4428 <__alt_exception_stack_pointer+0xf8004428>
    4474:	bdc5883a 	add	r2,r23,r23
    4478:	1085883a 	add	r2,r2,r2
    447c:	9887883a 	add	r3,r19,r2
    4480:	18800017 	ldw	r2,0(r3)
    4484:	10000c1e 	bne	r2,zero,44b8 <quorem+0x1ec>
    4488:	18bfff04 	addi	r2,r3,-4
    448c:	9880082e 	bgeu	r19,r2,44b0 <quorem+0x1e4>
    4490:	18ffff17 	ldw	r3,-4(r3)
    4494:	18000326 	beq	r3,zero,44a4 <quorem+0x1d8>
    4498:	00000506 	br	44b0 <quorem+0x1e4>
    449c:	10c00017 	ldw	r3,0(r2)
    44a0:	1800031e 	bne	r3,zero,44b0 <quorem+0x1e4>
    44a4:	10bfff04 	addi	r2,r2,-4
    44a8:	bdffffc4 	addi	r23,r23,-1
    44ac:	98bffb36 	bltu	r19,r2,449c <__alt_exception_stack_pointer+0xf800449c>
    44b0:	d8c00017 	ldw	r3,0(sp)
    44b4:	1dc00415 	stw	r23,16(r3)
    44b8:	9005883a 	mov	r2,r18
    44bc:	dfc00d17 	ldw	ra,52(sp)
    44c0:	df000c17 	ldw	fp,48(sp)
    44c4:	ddc00b17 	ldw	r23,44(sp)
    44c8:	dd800a17 	ldw	r22,40(sp)
    44cc:	dd400917 	ldw	r21,36(sp)
    44d0:	dd000817 	ldw	r20,32(sp)
    44d4:	dcc00717 	ldw	r19,28(sp)
    44d8:	dc800617 	ldw	r18,24(sp)
    44dc:	dc400517 	ldw	r17,20(sp)
    44e0:	dc000417 	ldw	r16,16(sp)
    44e4:	dec00e04 	addi	sp,sp,56
    44e8:	f800283a 	ret
    44ec:	0005883a 	mov	r2,zero
    44f0:	003ff206 	br	44bc <__alt_exception_stack_pointer+0xf80044bc>

000044f4 <_dtoa_r>:
    44f4:	20801017 	ldw	r2,64(r4)
    44f8:	deffde04 	addi	sp,sp,-136
    44fc:	df002015 	stw	fp,128(sp)
    4500:	dcc01b15 	stw	r19,108(sp)
    4504:	dc801a15 	stw	r18,104(sp)
    4508:	dc401915 	stw	r17,100(sp)
    450c:	dc001815 	stw	r16,96(sp)
    4510:	dfc02115 	stw	ra,132(sp)
    4514:	ddc01f15 	stw	r23,124(sp)
    4518:	dd801e15 	stw	r22,120(sp)
    451c:	dd401d15 	stw	r21,116(sp)
    4520:	dd001c15 	stw	r20,112(sp)
    4524:	d9c00315 	stw	r7,12(sp)
    4528:	2039883a 	mov	fp,r4
    452c:	3023883a 	mov	r17,r6
    4530:	2825883a 	mov	r18,r5
    4534:	dc002417 	ldw	r16,144(sp)
    4538:	3027883a 	mov	r19,r6
    453c:	10000826 	beq	r2,zero,4560 <_dtoa_r+0x6c>
    4540:	21801117 	ldw	r6,68(r4)
    4544:	00c00044 	movi	r3,1
    4548:	100b883a 	mov	r5,r2
    454c:	1986983a 	sll	r3,r3,r6
    4550:	11800115 	stw	r6,4(r2)
    4554:	10c00215 	stw	r3,8(r2)
    4558:	0006e240 	call	6e24 <_Bfree>
    455c:	e0001015 	stw	zero,64(fp)
    4560:	88002e16 	blt	r17,zero,461c <_dtoa_r+0x128>
    4564:	80000015 	stw	zero,0(r16)
    4568:	889ffc2c 	andhi	r2,r17,32752
    456c:	00dffc34 	movhi	r3,32752
    4570:	10c01c26 	beq	r2,r3,45e4 <_dtoa_r+0xf0>
    4574:	000d883a 	mov	r6,zero
    4578:	000f883a 	mov	r7,zero
    457c:	9009883a 	mov	r4,r18
    4580:	980b883a 	mov	r5,r19
    4584:	000c1900 	call	c190 <__eqdf2>
    4588:	10002b1e 	bne	r2,zero,4638 <_dtoa_r+0x144>
    458c:	d9c02317 	ldw	r7,140(sp)
    4590:	00800044 	movi	r2,1
    4594:	38800015 	stw	r2,0(r7)
    4598:	d8802517 	ldw	r2,148(sp)
    459c:	10019e26 	beq	r2,zero,4c18 <_dtoa_r+0x724>
    45a0:	d8c02517 	ldw	r3,148(sp)
    45a4:	00800074 	movhi	r2,1
    45a8:	10835d44 	addi	r2,r2,3445
    45ac:	18800015 	stw	r2,0(r3)
    45b0:	10bfffc4 	addi	r2,r2,-1
    45b4:	dfc02117 	ldw	ra,132(sp)
    45b8:	df002017 	ldw	fp,128(sp)
    45bc:	ddc01f17 	ldw	r23,124(sp)
    45c0:	dd801e17 	ldw	r22,120(sp)
    45c4:	dd401d17 	ldw	r21,116(sp)
    45c8:	dd001c17 	ldw	r20,112(sp)
    45cc:	dcc01b17 	ldw	r19,108(sp)
    45d0:	dc801a17 	ldw	r18,104(sp)
    45d4:	dc401917 	ldw	r17,100(sp)
    45d8:	dc001817 	ldw	r16,96(sp)
    45dc:	dec02204 	addi	sp,sp,136
    45e0:	f800283a 	ret
    45e4:	d8c02317 	ldw	r3,140(sp)
    45e8:	0089c3c4 	movi	r2,9999
    45ec:	18800015 	stw	r2,0(r3)
    45f0:	90017726 	beq	r18,zero,4bd0 <_dtoa_r+0x6dc>
    45f4:	00800074 	movhi	r2,1
    45f8:	10836904 	addi	r2,r2,3492
    45fc:	d9002517 	ldw	r4,148(sp)
    4600:	203fec26 	beq	r4,zero,45b4 <__alt_exception_stack_pointer+0xf80045b4>
    4604:	10c000c7 	ldb	r3,3(r2)
    4608:	1801781e 	bne	r3,zero,4bec <_dtoa_r+0x6f8>
    460c:	10c000c4 	addi	r3,r2,3
    4610:	d9802517 	ldw	r6,148(sp)
    4614:	30c00015 	stw	r3,0(r6)
    4618:	003fe606 	br	45b4 <__alt_exception_stack_pointer+0xf80045b4>
    461c:	04e00034 	movhi	r19,32768
    4620:	9cffffc4 	addi	r19,r19,-1
    4624:	00800044 	movi	r2,1
    4628:	8ce6703a 	and	r19,r17,r19
    462c:	80800015 	stw	r2,0(r16)
    4630:	9823883a 	mov	r17,r19
    4634:	003fcc06 	br	4568 <__alt_exception_stack_pointer+0xf8004568>
    4638:	d8800204 	addi	r2,sp,8
    463c:	d8800015 	stw	r2,0(sp)
    4640:	d9c00104 	addi	r7,sp,4
    4644:	900b883a 	mov	r5,r18
    4648:	980d883a 	mov	r6,r19
    464c:	e009883a 	mov	r4,fp
    4650:	8820d53a 	srli	r16,r17,20
    4654:	0007acc0 	call	7acc <__d2b>
    4658:	d8800915 	stw	r2,36(sp)
    465c:	8001651e 	bne	r16,zero,4bf4 <_dtoa_r+0x700>
    4660:	dd800217 	ldw	r22,8(sp)
    4664:	dc000117 	ldw	r16,4(sp)
    4668:	00800804 	movi	r2,32
    466c:	b421883a 	add	r16,r22,r16
    4670:	80c10c84 	addi	r3,r16,1074
    4674:	10c2d10e 	bge	r2,r3,51bc <_dtoa_r+0xcc8>
    4678:	00801004 	movi	r2,64
    467c:	81010484 	addi	r4,r16,1042
    4680:	10c7c83a 	sub	r3,r2,r3
    4684:	9108d83a 	srl	r4,r18,r4
    4688:	88e2983a 	sll	r17,r17,r3
    468c:	2448b03a 	or	r4,r4,r17
    4690:	00013700 	call	1370 <__floatunsidf>
    4694:	017f8434 	movhi	r5,65040
    4698:	01800044 	movi	r6,1
    469c:	1009883a 	mov	r4,r2
    46a0:	194b883a 	add	r5,r3,r5
    46a4:	843fffc4 	addi	r16,r16,-1
    46a8:	d9801115 	stw	r6,68(sp)
    46ac:	000d883a 	mov	r6,zero
    46b0:	01cffe34 	movhi	r7,16376
    46b4:	000cc540 	call	cc54 <__subdf3>
    46b8:	0198dbf4 	movhi	r6,25455
    46bc:	01cff4f4 	movhi	r7,16339
    46c0:	3190d844 	addi	r6,r6,17249
    46c4:	39e1e9c4 	addi	r7,r7,-30809
    46c8:	1009883a 	mov	r4,r2
    46cc:	180b883a 	mov	r5,r3
    46d0:	000c3e80 	call	c3e8 <__muldf3>
    46d4:	01a2d874 	movhi	r6,35681
    46d8:	01cff1f4 	movhi	r7,16327
    46dc:	31b22cc4 	addi	r6,r6,-14157
    46e0:	39e28a04 	addi	r7,r7,-30168
    46e4:	180b883a 	mov	r5,r3
    46e8:	1009883a 	mov	r4,r2
    46ec:	000b8e40 	call	b8e4 <__adddf3>
    46f0:	8009883a 	mov	r4,r16
    46f4:	1029883a 	mov	r20,r2
    46f8:	1823883a 	mov	r17,r3
    46fc:	000d5d00 	call	d5d0 <__floatsidf>
    4700:	019427f4 	movhi	r6,20639
    4704:	01cff4f4 	movhi	r7,16339
    4708:	319e7ec4 	addi	r6,r6,31227
    470c:	39d104c4 	addi	r7,r7,17427
    4710:	1009883a 	mov	r4,r2
    4714:	180b883a 	mov	r5,r3
    4718:	000c3e80 	call	c3e8 <__muldf3>
    471c:	100d883a 	mov	r6,r2
    4720:	180f883a 	mov	r7,r3
    4724:	a009883a 	mov	r4,r20
    4728:	880b883a 	mov	r5,r17
    472c:	000b8e40 	call	b8e4 <__adddf3>
    4730:	1009883a 	mov	r4,r2
    4734:	180b883a 	mov	r5,r3
    4738:	1029883a 	mov	r20,r2
    473c:	1823883a 	mov	r17,r3
    4740:	000d5500 	call	d550 <__fixdfsi>
    4744:	000d883a 	mov	r6,zero
    4748:	000f883a 	mov	r7,zero
    474c:	a009883a 	mov	r4,r20
    4750:	880b883a 	mov	r5,r17
    4754:	d8800515 	stw	r2,20(sp)
    4758:	000c2f40 	call	c2f4 <__ledf2>
    475c:	10028716 	blt	r2,zero,517c <_dtoa_r+0xc88>
    4760:	d8c00517 	ldw	r3,20(sp)
    4764:	00800584 	movi	r2,22
    4768:	10c27536 	bltu	r2,r3,5140 <_dtoa_r+0xc4c>
    476c:	180490fa 	slli	r2,r3,3
    4770:	00c00074 	movhi	r3,1
    4774:	18c38404 	addi	r3,r3,3600
    4778:	1885883a 	add	r2,r3,r2
    477c:	11000017 	ldw	r4,0(r2)
    4780:	11400117 	ldw	r5,4(r2)
    4784:	900d883a 	mov	r6,r18
    4788:	980f883a 	mov	r7,r19
    478c:	000c2180 	call	c218 <__gedf2>
    4790:	00828d0e 	bge	zero,r2,51c8 <_dtoa_r+0xcd4>
    4794:	d9000517 	ldw	r4,20(sp)
    4798:	d8000e15 	stw	zero,56(sp)
    479c:	213fffc4 	addi	r4,r4,-1
    47a0:	d9000515 	stw	r4,20(sp)
    47a4:	b42dc83a 	sub	r22,r22,r16
    47a8:	b5bfffc4 	addi	r22,r22,-1
    47ac:	b0026f16 	blt	r22,zero,516c <_dtoa_r+0xc78>
    47b0:	d8000815 	stw	zero,32(sp)
    47b4:	d9c00517 	ldw	r7,20(sp)
    47b8:	38026416 	blt	r7,zero,514c <_dtoa_r+0xc58>
    47bc:	b1ed883a 	add	r22,r22,r7
    47c0:	d9c00d15 	stw	r7,52(sp)
    47c4:	d8000a15 	stw	zero,40(sp)
    47c8:	d9800317 	ldw	r6,12(sp)
    47cc:	00800244 	movi	r2,9
    47d0:	11811436 	bltu	r2,r6,4c24 <_dtoa_r+0x730>
    47d4:	00800144 	movi	r2,5
    47d8:	1184e10e 	bge	r2,r6,5b60 <_dtoa_r+0x166c>
    47dc:	31bfff04 	addi	r6,r6,-4
    47e0:	d9800315 	stw	r6,12(sp)
    47e4:	0023883a 	mov	r17,zero
    47e8:	d9800317 	ldw	r6,12(sp)
    47ec:	008000c4 	movi	r2,3
    47f0:	30836726 	beq	r6,r2,5590 <_dtoa_r+0x109c>
    47f4:	1183410e 	bge	r2,r6,54fc <_dtoa_r+0x1008>
    47f8:	d9c00317 	ldw	r7,12(sp)
    47fc:	00800104 	movi	r2,4
    4800:	38827c26 	beq	r7,r2,51f4 <_dtoa_r+0xd00>
    4804:	00800144 	movi	r2,5
    4808:	3884c41e 	bne	r7,r2,5b1c <_dtoa_r+0x1628>
    480c:	00800044 	movi	r2,1
    4810:	d8800b15 	stw	r2,44(sp)
    4814:	d8c00517 	ldw	r3,20(sp)
    4818:	d9002217 	ldw	r4,136(sp)
    481c:	1907883a 	add	r3,r3,r4
    4820:	19800044 	addi	r6,r3,1
    4824:	d8c00c15 	stw	r3,48(sp)
    4828:	d9800615 	stw	r6,24(sp)
    482c:	0183a40e 	bge	zero,r6,56c0 <_dtoa_r+0x11cc>
    4830:	d9800617 	ldw	r6,24(sp)
    4834:	3021883a 	mov	r16,r6
    4838:	e0001115 	stw	zero,68(fp)
    483c:	008005c4 	movi	r2,23
    4840:	1184c92e 	bgeu	r2,r6,5b68 <_dtoa_r+0x1674>
    4844:	00c00044 	movi	r3,1
    4848:	00800104 	movi	r2,4
    484c:	1085883a 	add	r2,r2,r2
    4850:	11000504 	addi	r4,r2,20
    4854:	180b883a 	mov	r5,r3
    4858:	18c00044 	addi	r3,r3,1
    485c:	313ffb2e 	bgeu	r6,r4,484c <__alt_exception_stack_pointer+0xf800484c>
    4860:	e1401115 	stw	r5,68(fp)
    4864:	e009883a 	mov	r4,fp
    4868:	0006d7c0 	call	6d7c <_Balloc>
    486c:	d8800715 	stw	r2,28(sp)
    4870:	e0801015 	stw	r2,64(fp)
    4874:	00800384 	movi	r2,14
    4878:	1400f736 	bltu	r2,r16,4c58 <_dtoa_r+0x764>
    487c:	8800f626 	beq	r17,zero,4c58 <_dtoa_r+0x764>
    4880:	d9c00517 	ldw	r7,20(sp)
    4884:	01c39a0e 	bge	zero,r7,56f0 <_dtoa_r+0x11fc>
    4888:	388003cc 	andi	r2,r7,15
    488c:	100490fa 	slli	r2,r2,3
    4890:	382bd13a 	srai	r21,r7,4
    4894:	00c00074 	movhi	r3,1
    4898:	18c38404 	addi	r3,r3,3600
    489c:	1885883a 	add	r2,r3,r2
    48a0:	a8c0040c 	andi	r3,r21,16
    48a4:	12400017 	ldw	r9,0(r2)
    48a8:	12000117 	ldw	r8,4(r2)
    48ac:	18037926 	beq	r3,zero,5694 <_dtoa_r+0x11a0>
    48b0:	00800074 	movhi	r2,1
    48b4:	10837a04 	addi	r2,r2,3560
    48b8:	11800817 	ldw	r6,32(r2)
    48bc:	11c00917 	ldw	r7,36(r2)
    48c0:	9009883a 	mov	r4,r18
    48c4:	980b883a 	mov	r5,r19
    48c8:	da001715 	stw	r8,92(sp)
    48cc:	da401615 	stw	r9,88(sp)
    48d0:	00009a00 	call	9a0 <__divdf3>
    48d4:	da001717 	ldw	r8,92(sp)
    48d8:	da401617 	ldw	r9,88(sp)
    48dc:	ad4003cc 	andi	r21,r21,15
    48e0:	040000c4 	movi	r16,3
    48e4:	1023883a 	mov	r17,r2
    48e8:	1829883a 	mov	r20,r3
    48ec:	a8001126 	beq	r21,zero,4934 <_dtoa_r+0x440>
    48f0:	05c00074 	movhi	r23,1
    48f4:	bdc37a04 	addi	r23,r23,3560
    48f8:	4805883a 	mov	r2,r9
    48fc:	4007883a 	mov	r3,r8
    4900:	a980004c 	andi	r6,r21,1
    4904:	1009883a 	mov	r4,r2
    4908:	a82bd07a 	srai	r21,r21,1
    490c:	180b883a 	mov	r5,r3
    4910:	30000426 	beq	r6,zero,4924 <_dtoa_r+0x430>
    4914:	b9800017 	ldw	r6,0(r23)
    4918:	b9c00117 	ldw	r7,4(r23)
    491c:	84000044 	addi	r16,r16,1
    4920:	000c3e80 	call	c3e8 <__muldf3>
    4924:	bdc00204 	addi	r23,r23,8
    4928:	a83ff51e 	bne	r21,zero,4900 <__alt_exception_stack_pointer+0xf8004900>
    492c:	1013883a 	mov	r9,r2
    4930:	1811883a 	mov	r8,r3
    4934:	480d883a 	mov	r6,r9
    4938:	400f883a 	mov	r7,r8
    493c:	8809883a 	mov	r4,r17
    4940:	a00b883a 	mov	r5,r20
    4944:	00009a00 	call	9a0 <__divdf3>
    4948:	d8800f15 	stw	r2,60(sp)
    494c:	d8c01015 	stw	r3,64(sp)
    4950:	d8c00e17 	ldw	r3,56(sp)
    4954:	18000626 	beq	r3,zero,4970 <_dtoa_r+0x47c>
    4958:	d9000f17 	ldw	r4,60(sp)
    495c:	d9401017 	ldw	r5,64(sp)
    4960:	000d883a 	mov	r6,zero
    4964:	01cffc34 	movhi	r7,16368
    4968:	000c2f40 	call	c2f4 <__ledf2>
    496c:	10040b16 	blt	r2,zero,599c <_dtoa_r+0x14a8>
    4970:	8009883a 	mov	r4,r16
    4974:	000d5d00 	call	d5d0 <__floatsidf>
    4978:	d9800f17 	ldw	r6,60(sp)
    497c:	d9c01017 	ldw	r7,64(sp)
    4980:	1009883a 	mov	r4,r2
    4984:	180b883a 	mov	r5,r3
    4988:	000c3e80 	call	c3e8 <__muldf3>
    498c:	000d883a 	mov	r6,zero
    4990:	01d00734 	movhi	r7,16412
    4994:	1009883a 	mov	r4,r2
    4998:	180b883a 	mov	r5,r3
    499c:	000b8e40 	call	b8e4 <__adddf3>
    49a0:	1021883a 	mov	r16,r2
    49a4:	d8800617 	ldw	r2,24(sp)
    49a8:	047f3034 	movhi	r17,64704
    49ac:	1c63883a 	add	r17,r3,r17
    49b0:	10031826 	beq	r2,zero,5614 <_dtoa_r+0x1120>
    49b4:	d8c00517 	ldw	r3,20(sp)
    49b8:	db000617 	ldw	r12,24(sp)
    49bc:	d8c01315 	stw	r3,76(sp)
    49c0:	d9000b17 	ldw	r4,44(sp)
    49c4:	20038f26 	beq	r4,zero,5804 <_dtoa_r+0x1310>
    49c8:	60bfffc4 	addi	r2,r12,-1
    49cc:	100490fa 	slli	r2,r2,3
    49d0:	00c00074 	movhi	r3,1
    49d4:	18c38404 	addi	r3,r3,3600
    49d8:	1885883a 	add	r2,r3,r2
    49dc:	11800017 	ldw	r6,0(r2)
    49e0:	11c00117 	ldw	r7,4(r2)
    49e4:	d8800717 	ldw	r2,28(sp)
    49e8:	0009883a 	mov	r4,zero
    49ec:	014ff834 	movhi	r5,16352
    49f0:	db001615 	stw	r12,88(sp)
    49f4:	15c00044 	addi	r23,r2,1
    49f8:	00009a00 	call	9a0 <__divdf3>
    49fc:	800d883a 	mov	r6,r16
    4a00:	880f883a 	mov	r7,r17
    4a04:	1009883a 	mov	r4,r2
    4a08:	180b883a 	mov	r5,r3
    4a0c:	000cc540 	call	cc54 <__subdf3>
    4a10:	d9401017 	ldw	r5,64(sp)
    4a14:	d9000f17 	ldw	r4,60(sp)
    4a18:	102b883a 	mov	r21,r2
    4a1c:	d8c01215 	stw	r3,72(sp)
    4a20:	000d5500 	call	d550 <__fixdfsi>
    4a24:	1009883a 	mov	r4,r2
    4a28:	1029883a 	mov	r20,r2
    4a2c:	000d5d00 	call	d5d0 <__floatsidf>
    4a30:	d9000f17 	ldw	r4,60(sp)
    4a34:	d9401017 	ldw	r5,64(sp)
    4a38:	100d883a 	mov	r6,r2
    4a3c:	180f883a 	mov	r7,r3
    4a40:	000cc540 	call	cc54 <__subdf3>
    4a44:	1823883a 	mov	r17,r3
    4a48:	d8c00717 	ldw	r3,28(sp)
    4a4c:	d9401217 	ldw	r5,72(sp)
    4a50:	a2000c04 	addi	r8,r20,48
    4a54:	1021883a 	mov	r16,r2
    4a58:	1a000005 	stb	r8,0(r3)
    4a5c:	800d883a 	mov	r6,r16
    4a60:	880f883a 	mov	r7,r17
    4a64:	a809883a 	mov	r4,r21
    4a68:	4029883a 	mov	r20,r8
    4a6c:	000c2180 	call	c218 <__gedf2>
    4a70:	00841d16 	blt	zero,r2,5ae8 <_dtoa_r+0x15f4>
    4a74:	800d883a 	mov	r6,r16
    4a78:	880f883a 	mov	r7,r17
    4a7c:	0009883a 	mov	r4,zero
    4a80:	014ffc34 	movhi	r5,16368
    4a84:	000cc540 	call	cc54 <__subdf3>
    4a88:	d9401217 	ldw	r5,72(sp)
    4a8c:	100d883a 	mov	r6,r2
    4a90:	180f883a 	mov	r7,r3
    4a94:	a809883a 	mov	r4,r21
    4a98:	000c2180 	call	c218 <__gedf2>
    4a9c:	db001617 	ldw	r12,88(sp)
    4aa0:	00840e16 	blt	zero,r2,5adc <_dtoa_r+0x15e8>
    4aa4:	00800044 	movi	r2,1
    4aa8:	13006b0e 	bge	r2,r12,4c58 <_dtoa_r+0x764>
    4aac:	d9000717 	ldw	r4,28(sp)
    4ab0:	dd800f15 	stw	r22,60(sp)
    4ab4:	dcc01015 	stw	r19,64(sp)
    4ab8:	2319883a 	add	r12,r4,r12
    4abc:	dcc01217 	ldw	r19,72(sp)
    4ac0:	602d883a 	mov	r22,r12
    4ac4:	dc801215 	stw	r18,72(sp)
    4ac8:	b825883a 	mov	r18,r23
    4acc:	00000906 	br	4af4 <_dtoa_r+0x600>
    4ad0:	000cc540 	call	cc54 <__subdf3>
    4ad4:	a80d883a 	mov	r6,r21
    4ad8:	980f883a 	mov	r7,r19
    4adc:	1009883a 	mov	r4,r2
    4ae0:	180b883a 	mov	r5,r3
    4ae4:	000c2f40 	call	c2f4 <__ledf2>
    4ae8:	1003e816 	blt	r2,zero,5a8c <_dtoa_r+0x1598>
    4aec:	b825883a 	mov	r18,r23
    4af0:	bd83e926 	beq	r23,r22,5a98 <_dtoa_r+0x15a4>
    4af4:	a809883a 	mov	r4,r21
    4af8:	980b883a 	mov	r5,r19
    4afc:	000d883a 	mov	r6,zero
    4b00:	01d00934 	movhi	r7,16420
    4b04:	000c3e80 	call	c3e8 <__muldf3>
    4b08:	000d883a 	mov	r6,zero
    4b0c:	01d00934 	movhi	r7,16420
    4b10:	8009883a 	mov	r4,r16
    4b14:	880b883a 	mov	r5,r17
    4b18:	102b883a 	mov	r21,r2
    4b1c:	1827883a 	mov	r19,r3
    4b20:	000c3e80 	call	c3e8 <__muldf3>
    4b24:	180b883a 	mov	r5,r3
    4b28:	1009883a 	mov	r4,r2
    4b2c:	1821883a 	mov	r16,r3
    4b30:	1023883a 	mov	r17,r2
    4b34:	000d5500 	call	d550 <__fixdfsi>
    4b38:	1009883a 	mov	r4,r2
    4b3c:	1029883a 	mov	r20,r2
    4b40:	000d5d00 	call	d5d0 <__floatsidf>
    4b44:	8809883a 	mov	r4,r17
    4b48:	800b883a 	mov	r5,r16
    4b4c:	100d883a 	mov	r6,r2
    4b50:	180f883a 	mov	r7,r3
    4b54:	000cc540 	call	cc54 <__subdf3>
    4b58:	a5000c04 	addi	r20,r20,48
    4b5c:	a80d883a 	mov	r6,r21
    4b60:	980f883a 	mov	r7,r19
    4b64:	1009883a 	mov	r4,r2
    4b68:	180b883a 	mov	r5,r3
    4b6c:	95000005 	stb	r20,0(r18)
    4b70:	1021883a 	mov	r16,r2
    4b74:	1823883a 	mov	r17,r3
    4b78:	000c2f40 	call	c2f4 <__ledf2>
    4b7c:	bdc00044 	addi	r23,r23,1
    4b80:	800d883a 	mov	r6,r16
    4b84:	880f883a 	mov	r7,r17
    4b88:	0009883a 	mov	r4,zero
    4b8c:	014ffc34 	movhi	r5,16368
    4b90:	103fcf0e 	bge	r2,zero,4ad0 <__alt_exception_stack_pointer+0xf8004ad0>
    4b94:	d8c01317 	ldw	r3,76(sp)
    4b98:	d8c00515 	stw	r3,20(sp)
    4b9c:	d9400917 	ldw	r5,36(sp)
    4ba0:	e009883a 	mov	r4,fp
    4ba4:	0006e240 	call	6e24 <_Bfree>
    4ba8:	d9000517 	ldw	r4,20(sp)
    4bac:	d9802317 	ldw	r6,140(sp)
    4bb0:	d9c02517 	ldw	r7,148(sp)
    4bb4:	b8000005 	stb	zero,0(r23)
    4bb8:	20800044 	addi	r2,r4,1
    4bbc:	30800015 	stw	r2,0(r6)
    4bc0:	3802aa26 	beq	r7,zero,566c <_dtoa_r+0x1178>
    4bc4:	3dc00015 	stw	r23,0(r7)
    4bc8:	d8800717 	ldw	r2,28(sp)
    4bcc:	003e7906 	br	45b4 <__alt_exception_stack_pointer+0xf80045b4>
    4bd0:	00800434 	movhi	r2,16
    4bd4:	10bfffc4 	addi	r2,r2,-1
    4bd8:	88a2703a 	and	r17,r17,r2
    4bdc:	883e851e 	bne	r17,zero,45f4 <__alt_exception_stack_pointer+0xf80045f4>
    4be0:	00800074 	movhi	r2,1
    4be4:	10836604 	addi	r2,r2,3480
    4be8:	003e8406 	br	45fc <__alt_exception_stack_pointer+0xf80045fc>
    4bec:	10c00204 	addi	r3,r2,8
    4bf0:	003e8706 	br	4610 <__alt_exception_stack_pointer+0xf8004610>
    4bf4:	01400434 	movhi	r5,16
    4bf8:	297fffc4 	addi	r5,r5,-1
    4bfc:	994a703a 	and	r5,r19,r5
    4c00:	9009883a 	mov	r4,r18
    4c04:	843f0044 	addi	r16,r16,-1023
    4c08:	294ffc34 	orhi	r5,r5,16368
    4c0c:	dd800217 	ldw	r22,8(sp)
    4c10:	d8001115 	stw	zero,68(sp)
    4c14:	003ea506 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    4c18:	00800074 	movhi	r2,1
    4c1c:	10835d04 	addi	r2,r2,3444
    4c20:	003e6406 	br	45b4 <__alt_exception_stack_pointer+0xf80045b4>
    4c24:	e0001115 	stw	zero,68(fp)
    4c28:	000b883a 	mov	r5,zero
    4c2c:	e009883a 	mov	r4,fp
    4c30:	0006d7c0 	call	6d7c <_Balloc>
    4c34:	01bfffc4 	movi	r6,-1
    4c38:	01c00044 	movi	r7,1
    4c3c:	d8800715 	stw	r2,28(sp)
    4c40:	d9800c15 	stw	r6,48(sp)
    4c44:	e0801015 	stw	r2,64(fp)
    4c48:	d8000315 	stw	zero,12(sp)
    4c4c:	d9c00b15 	stw	r7,44(sp)
    4c50:	d9800615 	stw	r6,24(sp)
    4c54:	d8002215 	stw	zero,136(sp)
    4c58:	d8800117 	ldw	r2,4(sp)
    4c5c:	10008916 	blt	r2,zero,4e84 <_dtoa_r+0x990>
    4c60:	d9000517 	ldw	r4,20(sp)
    4c64:	00c00384 	movi	r3,14
    4c68:	19008616 	blt	r3,r4,4e84 <_dtoa_r+0x990>
    4c6c:	200490fa 	slli	r2,r4,3
    4c70:	00c00074 	movhi	r3,1
    4c74:	d9802217 	ldw	r6,136(sp)
    4c78:	18c38404 	addi	r3,r3,3600
    4c7c:	1885883a 	add	r2,r3,r2
    4c80:	14000017 	ldw	r16,0(r2)
    4c84:	14400117 	ldw	r17,4(r2)
    4c88:	30016316 	blt	r6,zero,5218 <_dtoa_r+0xd24>
    4c8c:	800d883a 	mov	r6,r16
    4c90:	880f883a 	mov	r7,r17
    4c94:	9009883a 	mov	r4,r18
    4c98:	980b883a 	mov	r5,r19
    4c9c:	00009a00 	call	9a0 <__divdf3>
    4ca0:	180b883a 	mov	r5,r3
    4ca4:	1009883a 	mov	r4,r2
    4ca8:	000d5500 	call	d550 <__fixdfsi>
    4cac:	1009883a 	mov	r4,r2
    4cb0:	102b883a 	mov	r21,r2
    4cb4:	000d5d00 	call	d5d0 <__floatsidf>
    4cb8:	800d883a 	mov	r6,r16
    4cbc:	880f883a 	mov	r7,r17
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	180b883a 	mov	r5,r3
    4cc8:	000c3e80 	call	c3e8 <__muldf3>
    4ccc:	100d883a 	mov	r6,r2
    4cd0:	180f883a 	mov	r7,r3
    4cd4:	9009883a 	mov	r4,r18
    4cd8:	980b883a 	mov	r5,r19
    4cdc:	000cc540 	call	cc54 <__subdf3>
    4ce0:	d9c00717 	ldw	r7,28(sp)
    4ce4:	1009883a 	mov	r4,r2
    4ce8:	a8800c04 	addi	r2,r21,48
    4cec:	38800005 	stb	r2,0(r7)
    4cf0:	3dc00044 	addi	r23,r7,1
    4cf4:	d9c00617 	ldw	r7,24(sp)
    4cf8:	01800044 	movi	r6,1
    4cfc:	180b883a 	mov	r5,r3
    4d00:	2005883a 	mov	r2,r4
    4d04:	39803826 	beq	r7,r6,4de8 <_dtoa_r+0x8f4>
    4d08:	000d883a 	mov	r6,zero
    4d0c:	01d00934 	movhi	r7,16420
    4d10:	000c3e80 	call	c3e8 <__muldf3>
    4d14:	000d883a 	mov	r6,zero
    4d18:	000f883a 	mov	r7,zero
    4d1c:	1009883a 	mov	r4,r2
    4d20:	180b883a 	mov	r5,r3
    4d24:	1025883a 	mov	r18,r2
    4d28:	1827883a 	mov	r19,r3
    4d2c:	000c1900 	call	c190 <__eqdf2>
    4d30:	103f9a26 	beq	r2,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    4d34:	d9c00617 	ldw	r7,24(sp)
    4d38:	d8c00717 	ldw	r3,28(sp)
    4d3c:	b829883a 	mov	r20,r23
    4d40:	38bfffc4 	addi	r2,r7,-1
    4d44:	18ad883a 	add	r22,r3,r2
    4d48:	00000a06 	br	4d74 <_dtoa_r+0x880>
    4d4c:	000c3e80 	call	c3e8 <__muldf3>
    4d50:	000d883a 	mov	r6,zero
    4d54:	000f883a 	mov	r7,zero
    4d58:	1009883a 	mov	r4,r2
    4d5c:	180b883a 	mov	r5,r3
    4d60:	1025883a 	mov	r18,r2
    4d64:	1827883a 	mov	r19,r3
    4d68:	b829883a 	mov	r20,r23
    4d6c:	000c1900 	call	c190 <__eqdf2>
    4d70:	103f8a26 	beq	r2,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    4d74:	800d883a 	mov	r6,r16
    4d78:	880f883a 	mov	r7,r17
    4d7c:	9009883a 	mov	r4,r18
    4d80:	980b883a 	mov	r5,r19
    4d84:	00009a00 	call	9a0 <__divdf3>
    4d88:	180b883a 	mov	r5,r3
    4d8c:	1009883a 	mov	r4,r2
    4d90:	000d5500 	call	d550 <__fixdfsi>
    4d94:	1009883a 	mov	r4,r2
    4d98:	102b883a 	mov	r21,r2
    4d9c:	000d5d00 	call	d5d0 <__floatsidf>
    4da0:	800d883a 	mov	r6,r16
    4da4:	880f883a 	mov	r7,r17
    4da8:	1009883a 	mov	r4,r2
    4dac:	180b883a 	mov	r5,r3
    4db0:	000c3e80 	call	c3e8 <__muldf3>
    4db4:	100d883a 	mov	r6,r2
    4db8:	180f883a 	mov	r7,r3
    4dbc:	9009883a 	mov	r4,r18
    4dc0:	980b883a 	mov	r5,r19
    4dc4:	000cc540 	call	cc54 <__subdf3>
    4dc8:	aa000c04 	addi	r8,r21,48
    4dcc:	a2000005 	stb	r8,0(r20)
    4dd0:	000d883a 	mov	r6,zero
    4dd4:	01d00934 	movhi	r7,16420
    4dd8:	1009883a 	mov	r4,r2
    4ddc:	180b883a 	mov	r5,r3
    4de0:	a5c00044 	addi	r23,r20,1
    4de4:	b53fd91e 	bne	r22,r20,4d4c <__alt_exception_stack_pointer+0xf8004d4c>
    4de8:	100d883a 	mov	r6,r2
    4dec:	180f883a 	mov	r7,r3
    4df0:	1009883a 	mov	r4,r2
    4df4:	180b883a 	mov	r5,r3
    4df8:	000b8e40 	call	b8e4 <__adddf3>
    4dfc:	100d883a 	mov	r6,r2
    4e00:	180f883a 	mov	r7,r3
    4e04:	8009883a 	mov	r4,r16
    4e08:	880b883a 	mov	r5,r17
    4e0c:	1027883a 	mov	r19,r2
    4e10:	1825883a 	mov	r18,r3
    4e14:	000c2f40 	call	c2f4 <__ledf2>
    4e18:	10000816 	blt	r2,zero,4e3c <_dtoa_r+0x948>
    4e1c:	980d883a 	mov	r6,r19
    4e20:	900f883a 	mov	r7,r18
    4e24:	8009883a 	mov	r4,r16
    4e28:	880b883a 	mov	r5,r17
    4e2c:	000c1900 	call	c190 <__eqdf2>
    4e30:	103f5a1e 	bne	r2,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    4e34:	ad40004c 	andi	r21,r21,1
    4e38:	a83f5826 	beq	r21,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    4e3c:	bd3fffc3 	ldbu	r20,-1(r23)
    4e40:	b8bfffc4 	addi	r2,r23,-1
    4e44:	1007883a 	mov	r3,r2
    4e48:	01400e44 	movi	r5,57
    4e4c:	d9800717 	ldw	r6,28(sp)
    4e50:	00000506 	br	4e68 <_dtoa_r+0x974>
    4e54:	18ffffc4 	addi	r3,r3,-1
    4e58:	11824726 	beq	r2,r6,5778 <_dtoa_r+0x1284>
    4e5c:	1d000003 	ldbu	r20,0(r3)
    4e60:	102f883a 	mov	r23,r2
    4e64:	10bfffc4 	addi	r2,r2,-1
    4e68:	a1003fcc 	andi	r4,r20,255
    4e6c:	2100201c 	xori	r4,r4,128
    4e70:	213fe004 	addi	r4,r4,-128
    4e74:	217ff726 	beq	r4,r5,4e54 <__alt_exception_stack_pointer+0xf8004e54>
    4e78:	a2000044 	addi	r8,r20,1
    4e7c:	12000005 	stb	r8,0(r2)
    4e80:	003f4606 	br	4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    4e84:	d9000b17 	ldw	r4,44(sp)
    4e88:	2000c826 	beq	r4,zero,51ac <_dtoa_r+0xcb8>
    4e8c:	d9800317 	ldw	r6,12(sp)
    4e90:	00c00044 	movi	r3,1
    4e94:	1980f90e 	bge	r3,r6,527c <_dtoa_r+0xd88>
    4e98:	d8800617 	ldw	r2,24(sp)
    4e9c:	d8c00a17 	ldw	r3,40(sp)
    4ea0:	157fffc4 	addi	r21,r2,-1
    4ea4:	1d41f316 	blt	r3,r21,5674 <_dtoa_r+0x1180>
    4ea8:	1d6bc83a 	sub	r21,r3,r21
    4eac:	d9c00617 	ldw	r7,24(sp)
    4eb0:	3802aa16 	blt	r7,zero,595c <_dtoa_r+0x1468>
    4eb4:	dd000817 	ldw	r20,32(sp)
    4eb8:	d8800617 	ldw	r2,24(sp)
    4ebc:	d8c00817 	ldw	r3,32(sp)
    4ec0:	01400044 	movi	r5,1
    4ec4:	e009883a 	mov	r4,fp
    4ec8:	1887883a 	add	r3,r3,r2
    4ecc:	d8c00815 	stw	r3,32(sp)
    4ed0:	b0ad883a 	add	r22,r22,r2
    4ed4:	00071b00 	call	71b0 <__i2b>
    4ed8:	1023883a 	mov	r17,r2
    4edc:	a0000826 	beq	r20,zero,4f00 <_dtoa_r+0xa0c>
    4ee0:	0580070e 	bge	zero,r22,4f00 <_dtoa_r+0xa0c>
    4ee4:	a005883a 	mov	r2,r20
    4ee8:	b500b916 	blt	r22,r20,51d0 <_dtoa_r+0xcdc>
    4eec:	d9000817 	ldw	r4,32(sp)
    4ef0:	a0a9c83a 	sub	r20,r20,r2
    4ef4:	b0adc83a 	sub	r22,r22,r2
    4ef8:	2089c83a 	sub	r4,r4,r2
    4efc:	d9000815 	stw	r4,32(sp)
    4f00:	d9800a17 	ldw	r6,40(sp)
    4f04:	0181810e 	bge	zero,r6,550c <_dtoa_r+0x1018>
    4f08:	d9c00b17 	ldw	r7,44(sp)
    4f0c:	3800b326 	beq	r7,zero,51dc <_dtoa_r+0xce8>
    4f10:	a800b226 	beq	r21,zero,51dc <_dtoa_r+0xce8>
    4f14:	880b883a 	mov	r5,r17
    4f18:	a80d883a 	mov	r6,r21
    4f1c:	e009883a 	mov	r4,fp
    4f20:	00074780 	call	7478 <__pow5mult>
    4f24:	d9800917 	ldw	r6,36(sp)
    4f28:	100b883a 	mov	r5,r2
    4f2c:	e009883a 	mov	r4,fp
    4f30:	1023883a 	mov	r17,r2
    4f34:	00071ec0 	call	71ec <__multiply>
    4f38:	1021883a 	mov	r16,r2
    4f3c:	d8800a17 	ldw	r2,40(sp)
    4f40:	d9400917 	ldw	r5,36(sp)
    4f44:	e009883a 	mov	r4,fp
    4f48:	1545c83a 	sub	r2,r2,r21
    4f4c:	d8800a15 	stw	r2,40(sp)
    4f50:	0006e240 	call	6e24 <_Bfree>
    4f54:	d8c00a17 	ldw	r3,40(sp)
    4f58:	18009f1e 	bne	r3,zero,51d8 <_dtoa_r+0xce4>
    4f5c:	05c00044 	movi	r23,1
    4f60:	e009883a 	mov	r4,fp
    4f64:	b80b883a 	mov	r5,r23
    4f68:	00071b00 	call	71b0 <__i2b>
    4f6c:	d9000d17 	ldw	r4,52(sp)
    4f70:	102b883a 	mov	r21,r2
    4f74:	2000ce26 	beq	r4,zero,52b0 <_dtoa_r+0xdbc>
    4f78:	200d883a 	mov	r6,r4
    4f7c:	100b883a 	mov	r5,r2
    4f80:	e009883a 	mov	r4,fp
    4f84:	00074780 	call	7478 <__pow5mult>
    4f88:	d9800317 	ldw	r6,12(sp)
    4f8c:	102b883a 	mov	r21,r2
    4f90:	b981810e 	bge	r23,r6,5598 <_dtoa_r+0x10a4>
    4f94:	0027883a 	mov	r19,zero
    4f98:	a8800417 	ldw	r2,16(r21)
    4f9c:	05c00804 	movi	r23,32
    4fa0:	10800104 	addi	r2,r2,4
    4fa4:	1085883a 	add	r2,r2,r2
    4fa8:	1085883a 	add	r2,r2,r2
    4fac:	a885883a 	add	r2,r21,r2
    4fb0:	11000017 	ldw	r4,0(r2)
    4fb4:	00070980 	call	7098 <__hi0bits>
    4fb8:	b885c83a 	sub	r2,r23,r2
    4fbc:	1585883a 	add	r2,r2,r22
    4fc0:	108007cc 	andi	r2,r2,31
    4fc4:	1000b326 	beq	r2,zero,5294 <_dtoa_r+0xda0>
    4fc8:	00c00804 	movi	r3,32
    4fcc:	1887c83a 	sub	r3,r3,r2
    4fd0:	01000104 	movi	r4,4
    4fd4:	20c2cd0e 	bge	r4,r3,5b0c <_dtoa_r+0x1618>
    4fd8:	00c00704 	movi	r3,28
    4fdc:	1885c83a 	sub	r2,r3,r2
    4fe0:	d8c00817 	ldw	r3,32(sp)
    4fe4:	a0a9883a 	add	r20,r20,r2
    4fe8:	b0ad883a 	add	r22,r22,r2
    4fec:	1887883a 	add	r3,r3,r2
    4ff0:	d8c00815 	stw	r3,32(sp)
    4ff4:	d9800817 	ldw	r6,32(sp)
    4ff8:	0180040e 	bge	zero,r6,500c <_dtoa_r+0xb18>
    4ffc:	800b883a 	mov	r5,r16
    5000:	e009883a 	mov	r4,fp
    5004:	00075b80 	call	75b8 <__lshift>
    5008:	1021883a 	mov	r16,r2
    500c:	0580050e 	bge	zero,r22,5024 <_dtoa_r+0xb30>
    5010:	a80b883a 	mov	r5,r21
    5014:	b00d883a 	mov	r6,r22
    5018:	e009883a 	mov	r4,fp
    501c:	00075b80 	call	75b8 <__lshift>
    5020:	102b883a 	mov	r21,r2
    5024:	d9c00e17 	ldw	r7,56(sp)
    5028:	3801211e 	bne	r7,zero,54b0 <_dtoa_r+0xfbc>
    502c:	d9800617 	ldw	r6,24(sp)
    5030:	0181380e 	bge	zero,r6,5514 <_dtoa_r+0x1020>
    5034:	d8c00b17 	ldw	r3,44(sp)
    5038:	1800ab1e 	bne	r3,zero,52e8 <_dtoa_r+0xdf4>
    503c:	dc800717 	ldw	r18,28(sp)
    5040:	dcc00617 	ldw	r19,24(sp)
    5044:	9029883a 	mov	r20,r18
    5048:	00000206 	br	5054 <_dtoa_r+0xb60>
    504c:	0006e4c0 	call	6e4c <__multadd>
    5050:	1021883a 	mov	r16,r2
    5054:	a80b883a 	mov	r5,r21
    5058:	8009883a 	mov	r4,r16
    505c:	00042cc0 	call	42cc <quorem>
    5060:	10800c04 	addi	r2,r2,48
    5064:	90800005 	stb	r2,0(r18)
    5068:	94800044 	addi	r18,r18,1
    506c:	9507c83a 	sub	r3,r18,r20
    5070:	000f883a 	mov	r7,zero
    5074:	01800284 	movi	r6,10
    5078:	800b883a 	mov	r5,r16
    507c:	e009883a 	mov	r4,fp
    5080:	1cfff216 	blt	r3,r19,504c <__alt_exception_stack_pointer+0xf800504c>
    5084:	1011883a 	mov	r8,r2
    5088:	d8800617 	ldw	r2,24(sp)
    508c:	0082370e 	bge	zero,r2,596c <_dtoa_r+0x1478>
    5090:	d9000717 	ldw	r4,28(sp)
    5094:	0025883a 	mov	r18,zero
    5098:	20af883a 	add	r23,r4,r2
    509c:	01800044 	movi	r6,1
    50a0:	800b883a 	mov	r5,r16
    50a4:	e009883a 	mov	r4,fp
    50a8:	da001715 	stw	r8,92(sp)
    50ac:	00075b80 	call	75b8 <__lshift>
    50b0:	a80b883a 	mov	r5,r21
    50b4:	1009883a 	mov	r4,r2
    50b8:	d8800915 	stw	r2,36(sp)
    50bc:	00077000 	call	7700 <__mcmp>
    50c0:	da001717 	ldw	r8,92(sp)
    50c4:	0081800e 	bge	zero,r2,56c8 <_dtoa_r+0x11d4>
    50c8:	b93fffc3 	ldbu	r4,-1(r23)
    50cc:	b8bfffc4 	addi	r2,r23,-1
    50d0:	1007883a 	mov	r3,r2
    50d4:	01800e44 	movi	r6,57
    50d8:	d9c00717 	ldw	r7,28(sp)
    50dc:	00000506 	br	50f4 <_dtoa_r+0xc00>
    50e0:	18ffffc4 	addi	r3,r3,-1
    50e4:	11c12326 	beq	r2,r7,5574 <_dtoa_r+0x1080>
    50e8:	19000003 	ldbu	r4,0(r3)
    50ec:	102f883a 	mov	r23,r2
    50f0:	10bfffc4 	addi	r2,r2,-1
    50f4:	21403fcc 	andi	r5,r4,255
    50f8:	2940201c 	xori	r5,r5,128
    50fc:	297fe004 	addi	r5,r5,-128
    5100:	29bff726 	beq	r5,r6,50e0 <__alt_exception_stack_pointer+0xf80050e0>
    5104:	21000044 	addi	r4,r4,1
    5108:	11000005 	stb	r4,0(r2)
    510c:	a80b883a 	mov	r5,r21
    5110:	e009883a 	mov	r4,fp
    5114:	0006e240 	call	6e24 <_Bfree>
    5118:	883ea026 	beq	r17,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    511c:	90000426 	beq	r18,zero,5130 <_dtoa_r+0xc3c>
    5120:	94400326 	beq	r18,r17,5130 <_dtoa_r+0xc3c>
    5124:	900b883a 	mov	r5,r18
    5128:	e009883a 	mov	r4,fp
    512c:	0006e240 	call	6e24 <_Bfree>
    5130:	880b883a 	mov	r5,r17
    5134:	e009883a 	mov	r4,fp
    5138:	0006e240 	call	6e24 <_Bfree>
    513c:	003e9706 	br	4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    5140:	01800044 	movi	r6,1
    5144:	d9800e15 	stw	r6,56(sp)
    5148:	003d9606 	br	47a4 <__alt_exception_stack_pointer+0xf80047a4>
    514c:	d8800817 	ldw	r2,32(sp)
    5150:	d8c00517 	ldw	r3,20(sp)
    5154:	d8000d15 	stw	zero,52(sp)
    5158:	10c5c83a 	sub	r2,r2,r3
    515c:	00c9c83a 	sub	r4,zero,r3
    5160:	d8800815 	stw	r2,32(sp)
    5164:	d9000a15 	stw	r4,40(sp)
    5168:	003d9706 	br	47c8 <__alt_exception_stack_pointer+0xf80047c8>
    516c:	05adc83a 	sub	r22,zero,r22
    5170:	dd800815 	stw	r22,32(sp)
    5174:	002d883a 	mov	r22,zero
    5178:	003d8e06 	br	47b4 <__alt_exception_stack_pointer+0xf80047b4>
    517c:	d9000517 	ldw	r4,20(sp)
    5180:	000d5d00 	call	d5d0 <__floatsidf>
    5184:	100d883a 	mov	r6,r2
    5188:	180f883a 	mov	r7,r3
    518c:	a009883a 	mov	r4,r20
    5190:	880b883a 	mov	r5,r17
    5194:	000c1900 	call	c190 <__eqdf2>
    5198:	103d7126 	beq	r2,zero,4760 <__alt_exception_stack_pointer+0xf8004760>
    519c:	d9c00517 	ldw	r7,20(sp)
    51a0:	39ffffc4 	addi	r7,r7,-1
    51a4:	d9c00515 	stw	r7,20(sp)
    51a8:	003d6d06 	br	4760 <__alt_exception_stack_pointer+0xf8004760>
    51ac:	dd400a17 	ldw	r21,40(sp)
    51b0:	dd000817 	ldw	r20,32(sp)
    51b4:	0023883a 	mov	r17,zero
    51b8:	003f4806 	br	4edc <__alt_exception_stack_pointer+0xf8004edc>
    51bc:	10e3c83a 	sub	r17,r2,r3
    51c0:	9448983a 	sll	r4,r18,r17
    51c4:	003d3206 	br	4690 <__alt_exception_stack_pointer+0xf8004690>
    51c8:	d8000e15 	stw	zero,56(sp)
    51cc:	003d7506 	br	47a4 <__alt_exception_stack_pointer+0xf80047a4>
    51d0:	b005883a 	mov	r2,r22
    51d4:	003f4506 	br	4eec <__alt_exception_stack_pointer+0xf8004eec>
    51d8:	dc000915 	stw	r16,36(sp)
    51dc:	d9800a17 	ldw	r6,40(sp)
    51e0:	d9400917 	ldw	r5,36(sp)
    51e4:	e009883a 	mov	r4,fp
    51e8:	00074780 	call	7478 <__pow5mult>
    51ec:	1021883a 	mov	r16,r2
    51f0:	003f5a06 	br	4f5c <__alt_exception_stack_pointer+0xf8004f5c>
    51f4:	01c00044 	movi	r7,1
    51f8:	d9c00b15 	stw	r7,44(sp)
    51fc:	d8802217 	ldw	r2,136(sp)
    5200:	0081280e 	bge	zero,r2,56a4 <_dtoa_r+0x11b0>
    5204:	100d883a 	mov	r6,r2
    5208:	1021883a 	mov	r16,r2
    520c:	d8800c15 	stw	r2,48(sp)
    5210:	d8800615 	stw	r2,24(sp)
    5214:	003d8806 	br	4838 <__alt_exception_stack_pointer+0xf8004838>
    5218:	d8800617 	ldw	r2,24(sp)
    521c:	00be9b16 	blt	zero,r2,4c8c <__alt_exception_stack_pointer+0xf8004c8c>
    5220:	10010f1e 	bne	r2,zero,5660 <_dtoa_r+0x116c>
    5224:	880b883a 	mov	r5,r17
    5228:	000d883a 	mov	r6,zero
    522c:	01d00534 	movhi	r7,16404
    5230:	8009883a 	mov	r4,r16
    5234:	000c3e80 	call	c3e8 <__muldf3>
    5238:	900d883a 	mov	r6,r18
    523c:	980f883a 	mov	r7,r19
    5240:	1009883a 	mov	r4,r2
    5244:	180b883a 	mov	r5,r3
    5248:	000c2180 	call	c218 <__gedf2>
    524c:	002b883a 	mov	r21,zero
    5250:	0023883a 	mov	r17,zero
    5254:	1000bf16 	blt	r2,zero,5554 <_dtoa_r+0x1060>
    5258:	d9802217 	ldw	r6,136(sp)
    525c:	ddc00717 	ldw	r23,28(sp)
    5260:	018c303a 	nor	r6,zero,r6
    5264:	d9800515 	stw	r6,20(sp)
    5268:	a80b883a 	mov	r5,r21
    526c:	e009883a 	mov	r4,fp
    5270:	0006e240 	call	6e24 <_Bfree>
    5274:	883e4926 	beq	r17,zero,4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    5278:	003fad06 	br	5130 <__alt_exception_stack_pointer+0xf8005130>
    527c:	d9c01117 	ldw	r7,68(sp)
    5280:	3801bc26 	beq	r7,zero,5974 <_dtoa_r+0x1480>
    5284:	10810cc4 	addi	r2,r2,1075
    5288:	dd400a17 	ldw	r21,40(sp)
    528c:	dd000817 	ldw	r20,32(sp)
    5290:	003f0a06 	br	4ebc <__alt_exception_stack_pointer+0xf8004ebc>
    5294:	00800704 	movi	r2,28
    5298:	d9000817 	ldw	r4,32(sp)
    529c:	a0a9883a 	add	r20,r20,r2
    52a0:	b0ad883a 	add	r22,r22,r2
    52a4:	2089883a 	add	r4,r4,r2
    52a8:	d9000815 	stw	r4,32(sp)
    52ac:	003f5106 	br	4ff4 <__alt_exception_stack_pointer+0xf8004ff4>
    52b0:	d8c00317 	ldw	r3,12(sp)
    52b4:	b8c1fc0e 	bge	r23,r3,5aa8 <_dtoa_r+0x15b4>
    52b8:	0027883a 	mov	r19,zero
    52bc:	b805883a 	mov	r2,r23
    52c0:	003f3e06 	br	4fbc <__alt_exception_stack_pointer+0xf8004fbc>
    52c4:	880b883a 	mov	r5,r17
    52c8:	e009883a 	mov	r4,fp
    52cc:	000f883a 	mov	r7,zero
    52d0:	01800284 	movi	r6,10
    52d4:	0006e4c0 	call	6e4c <__multadd>
    52d8:	d9000c17 	ldw	r4,48(sp)
    52dc:	1023883a 	mov	r17,r2
    52e0:	0102040e 	bge	zero,r4,5af4 <_dtoa_r+0x1600>
    52e4:	d9000615 	stw	r4,24(sp)
    52e8:	0500050e 	bge	zero,r20,5300 <_dtoa_r+0xe0c>
    52ec:	880b883a 	mov	r5,r17
    52f0:	a00d883a 	mov	r6,r20
    52f4:	e009883a 	mov	r4,fp
    52f8:	00075b80 	call	75b8 <__lshift>
    52fc:	1023883a 	mov	r17,r2
    5300:	9801241e 	bne	r19,zero,5794 <_dtoa_r+0x12a0>
    5304:	8829883a 	mov	r20,r17
    5308:	d9000617 	ldw	r4,24(sp)
    530c:	dcc00717 	ldw	r19,28(sp)
    5310:	9480004c 	andi	r18,r18,1
    5314:	20bfffc4 	addi	r2,r4,-1
    5318:	9885883a 	add	r2,r19,r2
    531c:	d8800415 	stw	r2,16(sp)
    5320:	dc800615 	stw	r18,24(sp)
    5324:	a80b883a 	mov	r5,r21
    5328:	8009883a 	mov	r4,r16
    532c:	00042cc0 	call	42cc <quorem>
    5330:	880b883a 	mov	r5,r17
    5334:	8009883a 	mov	r4,r16
    5338:	102f883a 	mov	r23,r2
    533c:	00077000 	call	7700 <__mcmp>
    5340:	a80b883a 	mov	r5,r21
    5344:	a00d883a 	mov	r6,r20
    5348:	e009883a 	mov	r4,fp
    534c:	102d883a 	mov	r22,r2
    5350:	00077600 	call	7760 <__mdiff>
    5354:	1007883a 	mov	r3,r2
    5358:	10800317 	ldw	r2,12(r2)
    535c:	bc800c04 	addi	r18,r23,48
    5360:	180b883a 	mov	r5,r3
    5364:	10004e1e 	bne	r2,zero,54a0 <_dtoa_r+0xfac>
    5368:	8009883a 	mov	r4,r16
    536c:	d8c01615 	stw	r3,88(sp)
    5370:	00077000 	call	7700 <__mcmp>
    5374:	d8c01617 	ldw	r3,88(sp)
    5378:	e009883a 	mov	r4,fp
    537c:	d8801615 	stw	r2,88(sp)
    5380:	180b883a 	mov	r5,r3
    5384:	0006e240 	call	6e24 <_Bfree>
    5388:	d8801617 	ldw	r2,88(sp)
    538c:	1000041e 	bne	r2,zero,53a0 <_dtoa_r+0xeac>
    5390:	d9800317 	ldw	r6,12(sp)
    5394:	3000021e 	bne	r6,zero,53a0 <_dtoa_r+0xeac>
    5398:	d8c00617 	ldw	r3,24(sp)
    539c:	18003726 	beq	r3,zero,547c <_dtoa_r+0xf88>
    53a0:	b0002016 	blt	r22,zero,5424 <_dtoa_r+0xf30>
    53a4:	b000041e 	bne	r22,zero,53b8 <_dtoa_r+0xec4>
    53a8:	d9000317 	ldw	r4,12(sp)
    53ac:	2000021e 	bne	r4,zero,53b8 <_dtoa_r+0xec4>
    53b0:	d8c00617 	ldw	r3,24(sp)
    53b4:	18001b26 	beq	r3,zero,5424 <_dtoa_r+0xf30>
    53b8:	00810716 	blt	zero,r2,57d8 <_dtoa_r+0x12e4>
    53bc:	d8c00417 	ldw	r3,16(sp)
    53c0:	9d800044 	addi	r22,r19,1
    53c4:	9c800005 	stb	r18,0(r19)
    53c8:	b02f883a 	mov	r23,r22
    53cc:	98c10626 	beq	r19,r3,57e8 <_dtoa_r+0x12f4>
    53d0:	800b883a 	mov	r5,r16
    53d4:	000f883a 	mov	r7,zero
    53d8:	01800284 	movi	r6,10
    53dc:	e009883a 	mov	r4,fp
    53e0:	0006e4c0 	call	6e4c <__multadd>
    53e4:	1021883a 	mov	r16,r2
    53e8:	000f883a 	mov	r7,zero
    53ec:	01800284 	movi	r6,10
    53f0:	880b883a 	mov	r5,r17
    53f4:	e009883a 	mov	r4,fp
    53f8:	8d002526 	beq	r17,r20,5490 <_dtoa_r+0xf9c>
    53fc:	0006e4c0 	call	6e4c <__multadd>
    5400:	a00b883a 	mov	r5,r20
    5404:	000f883a 	mov	r7,zero
    5408:	01800284 	movi	r6,10
    540c:	e009883a 	mov	r4,fp
    5410:	1023883a 	mov	r17,r2
    5414:	0006e4c0 	call	6e4c <__multadd>
    5418:	1029883a 	mov	r20,r2
    541c:	b027883a 	mov	r19,r22
    5420:	003fc006 	br	5324 <__alt_exception_stack_pointer+0xf8005324>
    5424:	9011883a 	mov	r8,r18
    5428:	00800e0e 	bge	zero,r2,5464 <_dtoa_r+0xf70>
    542c:	800b883a 	mov	r5,r16
    5430:	01800044 	movi	r6,1
    5434:	e009883a 	mov	r4,fp
    5438:	da001715 	stw	r8,92(sp)
    543c:	00075b80 	call	75b8 <__lshift>
    5440:	a80b883a 	mov	r5,r21
    5444:	1009883a 	mov	r4,r2
    5448:	1021883a 	mov	r16,r2
    544c:	00077000 	call	7700 <__mcmp>
    5450:	da001717 	ldw	r8,92(sp)
    5454:	0081960e 	bge	zero,r2,5ab0 <_dtoa_r+0x15bc>
    5458:	00800e44 	movi	r2,57
    545c:	40817026 	beq	r8,r2,5a20 <_dtoa_r+0x152c>
    5460:	ba000c44 	addi	r8,r23,49
    5464:	8825883a 	mov	r18,r17
    5468:	9dc00044 	addi	r23,r19,1
    546c:	9a000005 	stb	r8,0(r19)
    5470:	a023883a 	mov	r17,r20
    5474:	dc000915 	stw	r16,36(sp)
    5478:	003f2406 	br	510c <__alt_exception_stack_pointer+0xf800510c>
    547c:	00800e44 	movi	r2,57
    5480:	9011883a 	mov	r8,r18
    5484:	90816626 	beq	r18,r2,5a20 <_dtoa_r+0x152c>
    5488:	05bff516 	blt	zero,r22,5460 <__alt_exception_stack_pointer+0xf8005460>
    548c:	003ff506 	br	5464 <__alt_exception_stack_pointer+0xf8005464>
    5490:	0006e4c0 	call	6e4c <__multadd>
    5494:	1023883a 	mov	r17,r2
    5498:	1029883a 	mov	r20,r2
    549c:	003fdf06 	br	541c <__alt_exception_stack_pointer+0xf800541c>
    54a0:	e009883a 	mov	r4,fp
    54a4:	0006e240 	call	6e24 <_Bfree>
    54a8:	00800044 	movi	r2,1
    54ac:	003fbc06 	br	53a0 <__alt_exception_stack_pointer+0xf80053a0>
    54b0:	a80b883a 	mov	r5,r21
    54b4:	8009883a 	mov	r4,r16
    54b8:	00077000 	call	7700 <__mcmp>
    54bc:	103edb0e 	bge	r2,zero,502c <__alt_exception_stack_pointer+0xf800502c>
    54c0:	800b883a 	mov	r5,r16
    54c4:	000f883a 	mov	r7,zero
    54c8:	01800284 	movi	r6,10
    54cc:	e009883a 	mov	r4,fp
    54d0:	0006e4c0 	call	6e4c <__multadd>
    54d4:	1021883a 	mov	r16,r2
    54d8:	d8800517 	ldw	r2,20(sp)
    54dc:	d8c00b17 	ldw	r3,44(sp)
    54e0:	10bfffc4 	addi	r2,r2,-1
    54e4:	d8800515 	stw	r2,20(sp)
    54e8:	183f761e 	bne	r3,zero,52c4 <__alt_exception_stack_pointer+0xf80052c4>
    54ec:	d9000c17 	ldw	r4,48(sp)
    54f0:	0101730e 	bge	zero,r4,5ac0 <_dtoa_r+0x15cc>
    54f4:	d9000615 	stw	r4,24(sp)
    54f8:	003ed006 	br	503c <__alt_exception_stack_pointer+0xf800503c>
    54fc:	00800084 	movi	r2,2
    5500:	3081861e 	bne	r6,r2,5b1c <_dtoa_r+0x1628>
    5504:	d8000b15 	stw	zero,44(sp)
    5508:	003f3c06 	br	51fc <__alt_exception_stack_pointer+0xf80051fc>
    550c:	dc000917 	ldw	r16,36(sp)
    5510:	003e9206 	br	4f5c <__alt_exception_stack_pointer+0xf8004f5c>
    5514:	d9c00317 	ldw	r7,12(sp)
    5518:	00800084 	movi	r2,2
    551c:	11fec50e 	bge	r2,r7,5034 <__alt_exception_stack_pointer+0xf8005034>
    5520:	d9000617 	ldw	r4,24(sp)
    5524:	20013c1e 	bne	r4,zero,5a18 <_dtoa_r+0x1524>
    5528:	a80b883a 	mov	r5,r21
    552c:	000f883a 	mov	r7,zero
    5530:	01800144 	movi	r6,5
    5534:	e009883a 	mov	r4,fp
    5538:	0006e4c0 	call	6e4c <__multadd>
    553c:	100b883a 	mov	r5,r2
    5540:	8009883a 	mov	r4,r16
    5544:	102b883a 	mov	r21,r2
    5548:	00077000 	call	7700 <__mcmp>
    554c:	dc000915 	stw	r16,36(sp)
    5550:	00bf410e 	bge	zero,r2,5258 <__alt_exception_stack_pointer+0xf8005258>
    5554:	d9c00717 	ldw	r7,28(sp)
    5558:	00800c44 	movi	r2,49
    555c:	38800005 	stb	r2,0(r7)
    5560:	d8800517 	ldw	r2,20(sp)
    5564:	3dc00044 	addi	r23,r7,1
    5568:	10800044 	addi	r2,r2,1
    556c:	d8800515 	stw	r2,20(sp)
    5570:	003f3d06 	br	5268 <__alt_exception_stack_pointer+0xf8005268>
    5574:	d9800517 	ldw	r6,20(sp)
    5578:	d9c00717 	ldw	r7,28(sp)
    557c:	00800c44 	movi	r2,49
    5580:	31800044 	addi	r6,r6,1
    5584:	d9800515 	stw	r6,20(sp)
    5588:	38800005 	stb	r2,0(r7)
    558c:	003edf06 	br	510c <__alt_exception_stack_pointer+0xf800510c>
    5590:	d8000b15 	stw	zero,44(sp)
    5594:	003c9f06 	br	4814 <__alt_exception_stack_pointer+0xf8004814>
    5598:	903e7e1e 	bne	r18,zero,4f94 <__alt_exception_stack_pointer+0xf8004f94>
    559c:	00800434 	movhi	r2,16
    55a0:	10bfffc4 	addi	r2,r2,-1
    55a4:	9884703a 	and	r2,r19,r2
    55a8:	1000ea1e 	bne	r2,zero,5954 <_dtoa_r+0x1460>
    55ac:	9cdffc2c 	andhi	r19,r19,32752
    55b0:	9800e826 	beq	r19,zero,5954 <_dtoa_r+0x1460>
    55b4:	d9c00817 	ldw	r7,32(sp)
    55b8:	b5800044 	addi	r22,r22,1
    55bc:	04c00044 	movi	r19,1
    55c0:	39c00044 	addi	r7,r7,1
    55c4:	d9c00815 	stw	r7,32(sp)
    55c8:	d8800d17 	ldw	r2,52(sp)
    55cc:	103e721e 	bne	r2,zero,4f98 <__alt_exception_stack_pointer+0xf8004f98>
    55d0:	00800044 	movi	r2,1
    55d4:	003e7906 	br	4fbc <__alt_exception_stack_pointer+0xf8004fbc>
    55d8:	8009883a 	mov	r4,r16
    55dc:	000d5d00 	call	d5d0 <__floatsidf>
    55e0:	d9800f17 	ldw	r6,60(sp)
    55e4:	d9c01017 	ldw	r7,64(sp)
    55e8:	1009883a 	mov	r4,r2
    55ec:	180b883a 	mov	r5,r3
    55f0:	000c3e80 	call	c3e8 <__muldf3>
    55f4:	000d883a 	mov	r6,zero
    55f8:	01d00734 	movhi	r7,16412
    55fc:	1009883a 	mov	r4,r2
    5600:	180b883a 	mov	r5,r3
    5604:	000b8e40 	call	b8e4 <__adddf3>
    5608:	047f3034 	movhi	r17,64704
    560c:	1021883a 	mov	r16,r2
    5610:	1c63883a 	add	r17,r3,r17
    5614:	d9000f17 	ldw	r4,60(sp)
    5618:	d9401017 	ldw	r5,64(sp)
    561c:	000d883a 	mov	r6,zero
    5620:	01d00534 	movhi	r7,16404
    5624:	000cc540 	call	cc54 <__subdf3>
    5628:	800d883a 	mov	r6,r16
    562c:	880f883a 	mov	r7,r17
    5630:	1009883a 	mov	r4,r2
    5634:	180b883a 	mov	r5,r3
    5638:	102b883a 	mov	r21,r2
    563c:	1829883a 	mov	r20,r3
    5640:	000c2180 	call	c218 <__gedf2>
    5644:	00806c16 	blt	zero,r2,57f8 <_dtoa_r+0x1304>
    5648:	89e0003c 	xorhi	r7,r17,32768
    564c:	800d883a 	mov	r6,r16
    5650:	a809883a 	mov	r4,r21
    5654:	a00b883a 	mov	r5,r20
    5658:	000c2f40 	call	c2f4 <__ledf2>
    565c:	103d7e0e 	bge	r2,zero,4c58 <__alt_exception_stack_pointer+0xf8004c58>
    5660:	002b883a 	mov	r21,zero
    5664:	0023883a 	mov	r17,zero
    5668:	003efb06 	br	5258 <__alt_exception_stack_pointer+0xf8005258>
    566c:	d8800717 	ldw	r2,28(sp)
    5670:	003bd006 	br	45b4 <__alt_exception_stack_pointer+0xf80045b4>
    5674:	d9000a17 	ldw	r4,40(sp)
    5678:	d9800d17 	ldw	r6,52(sp)
    567c:	dd400a15 	stw	r21,40(sp)
    5680:	a905c83a 	sub	r2,r21,r4
    5684:	308d883a 	add	r6,r6,r2
    5688:	d9800d15 	stw	r6,52(sp)
    568c:	002b883a 	mov	r21,zero
    5690:	003e0606 	br	4eac <__alt_exception_stack_pointer+0xf8004eac>
    5694:	9023883a 	mov	r17,r18
    5698:	9829883a 	mov	r20,r19
    569c:	04000084 	movi	r16,2
    56a0:	003c9206 	br	48ec <__alt_exception_stack_pointer+0xf80048ec>
    56a4:	04000044 	movi	r16,1
    56a8:	dc000c15 	stw	r16,48(sp)
    56ac:	dc000615 	stw	r16,24(sp)
    56b0:	dc002215 	stw	r16,136(sp)
    56b4:	e0001115 	stw	zero,68(fp)
    56b8:	000b883a 	mov	r5,zero
    56bc:	003c6906 	br	4864 <__alt_exception_stack_pointer+0xf8004864>
    56c0:	3021883a 	mov	r16,r6
    56c4:	003ffb06 	br	56b4 <__alt_exception_stack_pointer+0xf80056b4>
    56c8:	1000021e 	bne	r2,zero,56d4 <_dtoa_r+0x11e0>
    56cc:	4200004c 	andi	r8,r8,1
    56d0:	403e7d1e 	bne	r8,zero,50c8 <__alt_exception_stack_pointer+0xf80050c8>
    56d4:	01000c04 	movi	r4,48
    56d8:	00000106 	br	56e0 <_dtoa_r+0x11ec>
    56dc:	102f883a 	mov	r23,r2
    56e0:	b8bfffc4 	addi	r2,r23,-1
    56e4:	10c00007 	ldb	r3,0(r2)
    56e8:	193ffc26 	beq	r3,r4,56dc <__alt_exception_stack_pointer+0xf80056dc>
    56ec:	003e8706 	br	510c <__alt_exception_stack_pointer+0xf800510c>
    56f0:	d8800517 	ldw	r2,20(sp)
    56f4:	00a3c83a 	sub	r17,zero,r2
    56f8:	8800a426 	beq	r17,zero,598c <_dtoa_r+0x1498>
    56fc:	888003cc 	andi	r2,r17,15
    5700:	100490fa 	slli	r2,r2,3
    5704:	00c00074 	movhi	r3,1
    5708:	18c38404 	addi	r3,r3,3600
    570c:	1885883a 	add	r2,r3,r2
    5710:	11800017 	ldw	r6,0(r2)
    5714:	11c00117 	ldw	r7,4(r2)
    5718:	9009883a 	mov	r4,r18
    571c:	980b883a 	mov	r5,r19
    5720:	8823d13a 	srai	r17,r17,4
    5724:	000c3e80 	call	c3e8 <__muldf3>
    5728:	d8800f15 	stw	r2,60(sp)
    572c:	d8c01015 	stw	r3,64(sp)
    5730:	8800e826 	beq	r17,zero,5ad4 <_dtoa_r+0x15e0>
    5734:	05000074 	movhi	r20,1
    5738:	a5037a04 	addi	r20,r20,3560
    573c:	04000084 	movi	r16,2
    5740:	8980004c 	andi	r6,r17,1
    5744:	1009883a 	mov	r4,r2
    5748:	8823d07a 	srai	r17,r17,1
    574c:	180b883a 	mov	r5,r3
    5750:	30000426 	beq	r6,zero,5764 <_dtoa_r+0x1270>
    5754:	a1800017 	ldw	r6,0(r20)
    5758:	a1c00117 	ldw	r7,4(r20)
    575c:	84000044 	addi	r16,r16,1
    5760:	000c3e80 	call	c3e8 <__muldf3>
    5764:	a5000204 	addi	r20,r20,8
    5768:	883ff51e 	bne	r17,zero,5740 <__alt_exception_stack_pointer+0xf8005740>
    576c:	d8800f15 	stw	r2,60(sp)
    5770:	d8c01015 	stw	r3,64(sp)
    5774:	003c7606 	br	4950 <__alt_exception_stack_pointer+0xf8004950>
    5778:	00c00c04 	movi	r3,48
    577c:	10c00005 	stb	r3,0(r2)
    5780:	d8c00517 	ldw	r3,20(sp)
    5784:	bd3fffc3 	ldbu	r20,-1(r23)
    5788:	18c00044 	addi	r3,r3,1
    578c:	d8c00515 	stw	r3,20(sp)
    5790:	003db906 	br	4e78 <__alt_exception_stack_pointer+0xf8004e78>
    5794:	89400117 	ldw	r5,4(r17)
    5798:	e009883a 	mov	r4,fp
    579c:	0006d7c0 	call	6d7c <_Balloc>
    57a0:	89800417 	ldw	r6,16(r17)
    57a4:	89400304 	addi	r5,r17,12
    57a8:	11000304 	addi	r4,r2,12
    57ac:	31800084 	addi	r6,r6,2
    57b0:	318d883a 	add	r6,r6,r6
    57b4:	318d883a 	add	r6,r6,r6
    57b8:	1027883a 	mov	r19,r2
    57bc:	0006b0c0 	call	6b0c <memcpy>
    57c0:	01800044 	movi	r6,1
    57c4:	980b883a 	mov	r5,r19
    57c8:	e009883a 	mov	r4,fp
    57cc:	00075b80 	call	75b8 <__lshift>
    57d0:	1029883a 	mov	r20,r2
    57d4:	003ecc06 	br	5308 <__alt_exception_stack_pointer+0xf8005308>
    57d8:	00800e44 	movi	r2,57
    57dc:	90809026 	beq	r18,r2,5a20 <_dtoa_r+0x152c>
    57e0:	92000044 	addi	r8,r18,1
    57e4:	003f1f06 	br	5464 <__alt_exception_stack_pointer+0xf8005464>
    57e8:	9011883a 	mov	r8,r18
    57ec:	8825883a 	mov	r18,r17
    57f0:	a023883a 	mov	r17,r20
    57f4:	003e2906 	br	509c <__alt_exception_stack_pointer+0xf800509c>
    57f8:	002b883a 	mov	r21,zero
    57fc:	0023883a 	mov	r17,zero
    5800:	003f5406 	br	5554 <__alt_exception_stack_pointer+0xf8005554>
    5804:	61bfffc4 	addi	r6,r12,-1
    5808:	300490fa 	slli	r2,r6,3
    580c:	00c00074 	movhi	r3,1
    5810:	18c38404 	addi	r3,r3,3600
    5814:	1885883a 	add	r2,r3,r2
    5818:	11000017 	ldw	r4,0(r2)
    581c:	11400117 	ldw	r5,4(r2)
    5820:	d8800717 	ldw	r2,28(sp)
    5824:	880f883a 	mov	r7,r17
    5828:	d9801215 	stw	r6,72(sp)
    582c:	800d883a 	mov	r6,r16
    5830:	db001615 	stw	r12,88(sp)
    5834:	15c00044 	addi	r23,r2,1
    5838:	000c3e80 	call	c3e8 <__muldf3>
    583c:	d9401017 	ldw	r5,64(sp)
    5840:	d9000f17 	ldw	r4,60(sp)
    5844:	d8c01515 	stw	r3,84(sp)
    5848:	d8801415 	stw	r2,80(sp)
    584c:	000d5500 	call	d550 <__fixdfsi>
    5850:	1009883a 	mov	r4,r2
    5854:	1021883a 	mov	r16,r2
    5858:	000d5d00 	call	d5d0 <__floatsidf>
    585c:	d9000f17 	ldw	r4,60(sp)
    5860:	d9401017 	ldw	r5,64(sp)
    5864:	100d883a 	mov	r6,r2
    5868:	180f883a 	mov	r7,r3
    586c:	000cc540 	call	cc54 <__subdf3>
    5870:	1829883a 	mov	r20,r3
    5874:	d8c00717 	ldw	r3,28(sp)
    5878:	84000c04 	addi	r16,r16,48
    587c:	1023883a 	mov	r17,r2
    5880:	1c000005 	stb	r16,0(r3)
    5884:	db001617 	ldw	r12,88(sp)
    5888:	00800044 	movi	r2,1
    588c:	60802226 	beq	r12,r2,5918 <_dtoa_r+0x1424>
    5890:	d9c00717 	ldw	r7,28(sp)
    5894:	8805883a 	mov	r2,r17
    5898:	b82b883a 	mov	r21,r23
    589c:	3b19883a 	add	r12,r7,r12
    58a0:	6023883a 	mov	r17,r12
    58a4:	a007883a 	mov	r3,r20
    58a8:	dc800f15 	stw	r18,60(sp)
    58ac:	000d883a 	mov	r6,zero
    58b0:	01d00934 	movhi	r7,16420
    58b4:	1009883a 	mov	r4,r2
    58b8:	180b883a 	mov	r5,r3
    58bc:	000c3e80 	call	c3e8 <__muldf3>
    58c0:	180b883a 	mov	r5,r3
    58c4:	1009883a 	mov	r4,r2
    58c8:	1829883a 	mov	r20,r3
    58cc:	1025883a 	mov	r18,r2
    58d0:	000d5500 	call	d550 <__fixdfsi>
    58d4:	1009883a 	mov	r4,r2
    58d8:	1021883a 	mov	r16,r2
    58dc:	000d5d00 	call	d5d0 <__floatsidf>
    58e0:	100d883a 	mov	r6,r2
    58e4:	180f883a 	mov	r7,r3
    58e8:	9009883a 	mov	r4,r18
    58ec:	a00b883a 	mov	r5,r20
    58f0:	84000c04 	addi	r16,r16,48
    58f4:	000cc540 	call	cc54 <__subdf3>
    58f8:	ad400044 	addi	r21,r21,1
    58fc:	ac3fffc5 	stb	r16,-1(r21)
    5900:	ac7fea1e 	bne	r21,r17,58ac <__alt_exception_stack_pointer+0xf80058ac>
    5904:	1023883a 	mov	r17,r2
    5908:	d8801217 	ldw	r2,72(sp)
    590c:	dc800f17 	ldw	r18,60(sp)
    5910:	1829883a 	mov	r20,r3
    5914:	b8af883a 	add	r23,r23,r2
    5918:	d9001417 	ldw	r4,80(sp)
    591c:	d9401517 	ldw	r5,84(sp)
    5920:	000d883a 	mov	r6,zero
    5924:	01cff834 	movhi	r7,16352
    5928:	000b8e40 	call	b8e4 <__adddf3>
    592c:	880d883a 	mov	r6,r17
    5930:	a00f883a 	mov	r7,r20
    5934:	1009883a 	mov	r4,r2
    5938:	180b883a 	mov	r5,r3
    593c:	000c2f40 	call	c2f4 <__ledf2>
    5940:	10003e0e 	bge	r2,zero,5a3c <_dtoa_r+0x1548>
    5944:	d9001317 	ldw	r4,76(sp)
    5948:	bd3fffc3 	ldbu	r20,-1(r23)
    594c:	d9000515 	stw	r4,20(sp)
    5950:	003d3b06 	br	4e40 <__alt_exception_stack_pointer+0xf8004e40>
    5954:	0027883a 	mov	r19,zero
    5958:	003f1b06 	br	55c8 <__alt_exception_stack_pointer+0xf80055c8>
    595c:	d8800817 	ldw	r2,32(sp)
    5960:	11e9c83a 	sub	r20,r2,r7
    5964:	0005883a 	mov	r2,zero
    5968:	003d5406 	br	4ebc <__alt_exception_stack_pointer+0xf8004ebc>
    596c:	00800044 	movi	r2,1
    5970:	003dc706 	br	5090 <__alt_exception_stack_pointer+0xf8005090>
    5974:	d8c00217 	ldw	r3,8(sp)
    5978:	00800d84 	movi	r2,54
    597c:	dd400a17 	ldw	r21,40(sp)
    5980:	10c5c83a 	sub	r2,r2,r3
    5984:	dd000817 	ldw	r20,32(sp)
    5988:	003d4c06 	br	4ebc <__alt_exception_stack_pointer+0xf8004ebc>
    598c:	dc800f15 	stw	r18,60(sp)
    5990:	dcc01015 	stw	r19,64(sp)
    5994:	04000084 	movi	r16,2
    5998:	003bed06 	br	4950 <__alt_exception_stack_pointer+0xf8004950>
    599c:	d9000617 	ldw	r4,24(sp)
    59a0:	203f0d26 	beq	r4,zero,55d8 <__alt_exception_stack_pointer+0xf80055d8>
    59a4:	d9800c17 	ldw	r6,48(sp)
    59a8:	01bcab0e 	bge	zero,r6,4c58 <__alt_exception_stack_pointer+0xf8004c58>
    59ac:	d9401017 	ldw	r5,64(sp)
    59b0:	d9000f17 	ldw	r4,60(sp)
    59b4:	000d883a 	mov	r6,zero
    59b8:	01d00934 	movhi	r7,16420
    59bc:	000c3e80 	call	c3e8 <__muldf3>
    59c0:	81000044 	addi	r4,r16,1
    59c4:	d8800f15 	stw	r2,60(sp)
    59c8:	d8c01015 	stw	r3,64(sp)
    59cc:	000d5d00 	call	d5d0 <__floatsidf>
    59d0:	d9800f17 	ldw	r6,60(sp)
    59d4:	d9c01017 	ldw	r7,64(sp)
    59d8:	1009883a 	mov	r4,r2
    59dc:	180b883a 	mov	r5,r3
    59e0:	000c3e80 	call	c3e8 <__muldf3>
    59e4:	01d00734 	movhi	r7,16412
    59e8:	000d883a 	mov	r6,zero
    59ec:	1009883a 	mov	r4,r2
    59f0:	180b883a 	mov	r5,r3
    59f4:	000b8e40 	call	b8e4 <__adddf3>
    59f8:	d9c00517 	ldw	r7,20(sp)
    59fc:	047f3034 	movhi	r17,64704
    5a00:	1021883a 	mov	r16,r2
    5a04:	39ffffc4 	addi	r7,r7,-1
    5a08:	d9c01315 	stw	r7,76(sp)
    5a0c:	1c63883a 	add	r17,r3,r17
    5a10:	db000c17 	ldw	r12,48(sp)
    5a14:	003bea06 	br	49c0 <__alt_exception_stack_pointer+0xf80049c0>
    5a18:	dc000915 	stw	r16,36(sp)
    5a1c:	003e0e06 	br	5258 <__alt_exception_stack_pointer+0xf8005258>
    5a20:	01000e44 	movi	r4,57
    5a24:	8825883a 	mov	r18,r17
    5a28:	9dc00044 	addi	r23,r19,1
    5a2c:	99000005 	stb	r4,0(r19)
    5a30:	a023883a 	mov	r17,r20
    5a34:	dc000915 	stw	r16,36(sp)
    5a38:	003da406 	br	50cc <__alt_exception_stack_pointer+0xf80050cc>
    5a3c:	d9801417 	ldw	r6,80(sp)
    5a40:	d9c01517 	ldw	r7,84(sp)
    5a44:	0009883a 	mov	r4,zero
    5a48:	014ff834 	movhi	r5,16352
    5a4c:	000cc540 	call	cc54 <__subdf3>
    5a50:	880d883a 	mov	r6,r17
    5a54:	a00f883a 	mov	r7,r20
    5a58:	1009883a 	mov	r4,r2
    5a5c:	180b883a 	mov	r5,r3
    5a60:	000c2180 	call	c218 <__gedf2>
    5a64:	00bc7c0e 	bge	zero,r2,4c58 <__alt_exception_stack_pointer+0xf8004c58>
    5a68:	01000c04 	movi	r4,48
    5a6c:	00000106 	br	5a74 <_dtoa_r+0x1580>
    5a70:	102f883a 	mov	r23,r2
    5a74:	b8bfffc4 	addi	r2,r23,-1
    5a78:	10c00007 	ldb	r3,0(r2)
    5a7c:	193ffc26 	beq	r3,r4,5a70 <__alt_exception_stack_pointer+0xf8005a70>
    5a80:	d9801317 	ldw	r6,76(sp)
    5a84:	d9800515 	stw	r6,20(sp)
    5a88:	003c4406 	br	4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    5a8c:	d9801317 	ldw	r6,76(sp)
    5a90:	d9800515 	stw	r6,20(sp)
    5a94:	003cea06 	br	4e40 <__alt_exception_stack_pointer+0xf8004e40>
    5a98:	dd800f17 	ldw	r22,60(sp)
    5a9c:	dcc01017 	ldw	r19,64(sp)
    5aa0:	dc801217 	ldw	r18,72(sp)
    5aa4:	003c6c06 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    5aa8:	903e031e 	bne	r18,zero,52b8 <__alt_exception_stack_pointer+0xf80052b8>
    5aac:	003ebb06 	br	559c <__alt_exception_stack_pointer+0xf800559c>
    5ab0:	103e6c1e 	bne	r2,zero,5464 <__alt_exception_stack_pointer+0xf8005464>
    5ab4:	4080004c 	andi	r2,r8,1
    5ab8:	103e6a26 	beq	r2,zero,5464 <__alt_exception_stack_pointer+0xf8005464>
    5abc:	003e6606 	br	5458 <__alt_exception_stack_pointer+0xf8005458>
    5ac0:	d8c00317 	ldw	r3,12(sp)
    5ac4:	00800084 	movi	r2,2
    5ac8:	10c02916 	blt	r2,r3,5b70 <_dtoa_r+0x167c>
    5acc:	d9000c17 	ldw	r4,48(sp)
    5ad0:	003e8806 	br	54f4 <__alt_exception_stack_pointer+0xf80054f4>
    5ad4:	04000084 	movi	r16,2
    5ad8:	003b9d06 	br	4950 <__alt_exception_stack_pointer+0xf8004950>
    5adc:	d9001317 	ldw	r4,76(sp)
    5ae0:	d9000515 	stw	r4,20(sp)
    5ae4:	003cd606 	br	4e40 <__alt_exception_stack_pointer+0xf8004e40>
    5ae8:	d8801317 	ldw	r2,76(sp)
    5aec:	d8800515 	stw	r2,20(sp)
    5af0:	003c2a06 	br	4b9c <__alt_exception_stack_pointer+0xf8004b9c>
    5af4:	d9800317 	ldw	r6,12(sp)
    5af8:	00800084 	movi	r2,2
    5afc:	11801516 	blt	r2,r6,5b54 <_dtoa_r+0x1660>
    5b00:	d9c00c17 	ldw	r7,48(sp)
    5b04:	d9c00615 	stw	r7,24(sp)
    5b08:	003df706 	br	52e8 <__alt_exception_stack_pointer+0xf80052e8>
    5b0c:	193d3926 	beq	r3,r4,4ff4 <__alt_exception_stack_pointer+0xf8004ff4>
    5b10:	00c00f04 	movi	r3,60
    5b14:	1885c83a 	sub	r2,r3,r2
    5b18:	003ddf06 	br	5298 <__alt_exception_stack_pointer+0xf8005298>
    5b1c:	e009883a 	mov	r4,fp
    5b20:	e0001115 	stw	zero,68(fp)
    5b24:	000b883a 	mov	r5,zero
    5b28:	0006d7c0 	call	6d7c <_Balloc>
    5b2c:	d8800715 	stw	r2,28(sp)
    5b30:	d8c00717 	ldw	r3,28(sp)
    5b34:	00bfffc4 	movi	r2,-1
    5b38:	01000044 	movi	r4,1
    5b3c:	d8800c15 	stw	r2,48(sp)
    5b40:	e0c01015 	stw	r3,64(fp)
    5b44:	d9000b15 	stw	r4,44(sp)
    5b48:	d8800615 	stw	r2,24(sp)
    5b4c:	d8002215 	stw	zero,136(sp)
    5b50:	003c4106 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    5b54:	d8c00c17 	ldw	r3,48(sp)
    5b58:	d8c00615 	stw	r3,24(sp)
    5b5c:	003e7006 	br	5520 <__alt_exception_stack_pointer+0xf8005520>
    5b60:	04400044 	movi	r17,1
    5b64:	003b2006 	br	47e8 <__alt_exception_stack_pointer+0xf80047e8>
    5b68:	000b883a 	mov	r5,zero
    5b6c:	003b3d06 	br	4864 <__alt_exception_stack_pointer+0xf8004864>
    5b70:	d8800c17 	ldw	r2,48(sp)
    5b74:	d8800615 	stw	r2,24(sp)
    5b78:	003e6906 	br	5520 <__alt_exception_stack_pointer+0xf8005520>

00005b7c <__sflush_r>:
    5b7c:	2880030b 	ldhu	r2,12(r5)
    5b80:	defffb04 	addi	sp,sp,-20
    5b84:	dcc00315 	stw	r19,12(sp)
    5b88:	dc400115 	stw	r17,4(sp)
    5b8c:	dfc00415 	stw	ra,16(sp)
    5b90:	dc800215 	stw	r18,8(sp)
    5b94:	dc000015 	stw	r16,0(sp)
    5b98:	10c0020c 	andi	r3,r2,8
    5b9c:	2823883a 	mov	r17,r5
    5ba0:	2027883a 	mov	r19,r4
    5ba4:	1800311e 	bne	r3,zero,5c6c <__sflush_r+0xf0>
    5ba8:	28c00117 	ldw	r3,4(r5)
    5bac:	10820014 	ori	r2,r2,2048
    5bb0:	2880030d 	sth	r2,12(r5)
    5bb4:	00c04b0e 	bge	zero,r3,5ce4 <__sflush_r+0x168>
    5bb8:	8a000a17 	ldw	r8,40(r17)
    5bbc:	40002326 	beq	r8,zero,5c4c <__sflush_r+0xd0>
    5bc0:	9c000017 	ldw	r16,0(r19)
    5bc4:	10c4000c 	andi	r3,r2,4096
    5bc8:	98000015 	stw	zero,0(r19)
    5bcc:	18004826 	beq	r3,zero,5cf0 <__sflush_r+0x174>
    5bd0:	89801417 	ldw	r6,80(r17)
    5bd4:	10c0010c 	andi	r3,r2,4
    5bd8:	18000626 	beq	r3,zero,5bf4 <__sflush_r+0x78>
    5bdc:	88c00117 	ldw	r3,4(r17)
    5be0:	88800c17 	ldw	r2,48(r17)
    5be4:	30cdc83a 	sub	r6,r6,r3
    5be8:	10000226 	beq	r2,zero,5bf4 <__sflush_r+0x78>
    5bec:	88800f17 	ldw	r2,60(r17)
    5bf0:	308dc83a 	sub	r6,r6,r2
    5bf4:	89400717 	ldw	r5,28(r17)
    5bf8:	000f883a 	mov	r7,zero
    5bfc:	9809883a 	mov	r4,r19
    5c00:	403ee83a 	callr	r8
    5c04:	00ffffc4 	movi	r3,-1
    5c08:	10c04426 	beq	r2,r3,5d1c <__sflush_r+0x1a0>
    5c0c:	88c0030b 	ldhu	r3,12(r17)
    5c10:	89000417 	ldw	r4,16(r17)
    5c14:	88000115 	stw	zero,4(r17)
    5c18:	197dffcc 	andi	r5,r3,63487
    5c1c:	8940030d 	sth	r5,12(r17)
    5c20:	89000015 	stw	r4,0(r17)
    5c24:	18c4000c 	andi	r3,r3,4096
    5c28:	18002c1e 	bne	r3,zero,5cdc <__sflush_r+0x160>
    5c2c:	89400c17 	ldw	r5,48(r17)
    5c30:	9c000015 	stw	r16,0(r19)
    5c34:	28000526 	beq	r5,zero,5c4c <__sflush_r+0xd0>
    5c38:	88801004 	addi	r2,r17,64
    5c3c:	28800226 	beq	r5,r2,5c48 <__sflush_r+0xcc>
    5c40:	9809883a 	mov	r4,r19
    5c44:	00062f80 	call	62f8 <_free_r>
    5c48:	88000c15 	stw	zero,48(r17)
    5c4c:	0005883a 	mov	r2,zero
    5c50:	dfc00417 	ldw	ra,16(sp)
    5c54:	dcc00317 	ldw	r19,12(sp)
    5c58:	dc800217 	ldw	r18,8(sp)
    5c5c:	dc400117 	ldw	r17,4(sp)
    5c60:	dc000017 	ldw	r16,0(sp)
    5c64:	dec00504 	addi	sp,sp,20
    5c68:	f800283a 	ret
    5c6c:	2c800417 	ldw	r18,16(r5)
    5c70:	903ff626 	beq	r18,zero,5c4c <__alt_exception_stack_pointer+0xf8005c4c>
    5c74:	2c000017 	ldw	r16,0(r5)
    5c78:	108000cc 	andi	r2,r2,3
    5c7c:	2c800015 	stw	r18,0(r5)
    5c80:	84a1c83a 	sub	r16,r16,r18
    5c84:	1000131e 	bne	r2,zero,5cd4 <__sflush_r+0x158>
    5c88:	28800517 	ldw	r2,20(r5)
    5c8c:	88800215 	stw	r2,8(r17)
    5c90:	04000316 	blt	zero,r16,5ca0 <__sflush_r+0x124>
    5c94:	003fed06 	br	5c4c <__alt_exception_stack_pointer+0xf8005c4c>
    5c98:	90a5883a 	add	r18,r18,r2
    5c9c:	043feb0e 	bge	zero,r16,5c4c <__alt_exception_stack_pointer+0xf8005c4c>
    5ca0:	88800917 	ldw	r2,36(r17)
    5ca4:	89400717 	ldw	r5,28(r17)
    5ca8:	800f883a 	mov	r7,r16
    5cac:	900d883a 	mov	r6,r18
    5cb0:	9809883a 	mov	r4,r19
    5cb4:	103ee83a 	callr	r2
    5cb8:	80a1c83a 	sub	r16,r16,r2
    5cbc:	00bff616 	blt	zero,r2,5c98 <__alt_exception_stack_pointer+0xf8005c98>
    5cc0:	88c0030b 	ldhu	r3,12(r17)
    5cc4:	00bfffc4 	movi	r2,-1
    5cc8:	18c01014 	ori	r3,r3,64
    5ccc:	88c0030d 	sth	r3,12(r17)
    5cd0:	003fdf06 	br	5c50 <__alt_exception_stack_pointer+0xf8005c50>
    5cd4:	0005883a 	mov	r2,zero
    5cd8:	003fec06 	br	5c8c <__alt_exception_stack_pointer+0xf8005c8c>
    5cdc:	88801415 	stw	r2,80(r17)
    5ce0:	003fd206 	br	5c2c <__alt_exception_stack_pointer+0xf8005c2c>
    5ce4:	28c00f17 	ldw	r3,60(r5)
    5ce8:	00ffb316 	blt	zero,r3,5bb8 <__alt_exception_stack_pointer+0xf8005bb8>
    5cec:	003fd706 	br	5c4c <__alt_exception_stack_pointer+0xf8005c4c>
    5cf0:	89400717 	ldw	r5,28(r17)
    5cf4:	000d883a 	mov	r6,zero
    5cf8:	01c00044 	movi	r7,1
    5cfc:	9809883a 	mov	r4,r19
    5d00:	403ee83a 	callr	r8
    5d04:	100d883a 	mov	r6,r2
    5d08:	00bfffc4 	movi	r2,-1
    5d0c:	30801426 	beq	r6,r2,5d60 <__sflush_r+0x1e4>
    5d10:	8880030b 	ldhu	r2,12(r17)
    5d14:	8a000a17 	ldw	r8,40(r17)
    5d18:	003fae06 	br	5bd4 <__alt_exception_stack_pointer+0xf8005bd4>
    5d1c:	98c00017 	ldw	r3,0(r19)
    5d20:	183fba26 	beq	r3,zero,5c0c <__alt_exception_stack_pointer+0xf8005c0c>
    5d24:	01000744 	movi	r4,29
    5d28:	19000626 	beq	r3,r4,5d44 <__sflush_r+0x1c8>
    5d2c:	01000584 	movi	r4,22
    5d30:	19000426 	beq	r3,r4,5d44 <__sflush_r+0x1c8>
    5d34:	88c0030b 	ldhu	r3,12(r17)
    5d38:	18c01014 	ori	r3,r3,64
    5d3c:	88c0030d 	sth	r3,12(r17)
    5d40:	003fc306 	br	5c50 <__alt_exception_stack_pointer+0xf8005c50>
    5d44:	8880030b 	ldhu	r2,12(r17)
    5d48:	88c00417 	ldw	r3,16(r17)
    5d4c:	88000115 	stw	zero,4(r17)
    5d50:	10bdffcc 	andi	r2,r2,63487
    5d54:	8880030d 	sth	r2,12(r17)
    5d58:	88c00015 	stw	r3,0(r17)
    5d5c:	003fb306 	br	5c2c <__alt_exception_stack_pointer+0xf8005c2c>
    5d60:	98800017 	ldw	r2,0(r19)
    5d64:	103fea26 	beq	r2,zero,5d10 <__alt_exception_stack_pointer+0xf8005d10>
    5d68:	00c00744 	movi	r3,29
    5d6c:	10c00226 	beq	r2,r3,5d78 <__sflush_r+0x1fc>
    5d70:	00c00584 	movi	r3,22
    5d74:	10c0031e 	bne	r2,r3,5d84 <__sflush_r+0x208>
    5d78:	9c000015 	stw	r16,0(r19)
    5d7c:	0005883a 	mov	r2,zero
    5d80:	003fb306 	br	5c50 <__alt_exception_stack_pointer+0xf8005c50>
    5d84:	88c0030b 	ldhu	r3,12(r17)
    5d88:	3005883a 	mov	r2,r6
    5d8c:	18c01014 	ori	r3,r3,64
    5d90:	88c0030d 	sth	r3,12(r17)
    5d94:	003fae06 	br	5c50 <__alt_exception_stack_pointer+0xf8005c50>

00005d98 <_fflush_r>:
    5d98:	defffd04 	addi	sp,sp,-12
    5d9c:	dc000115 	stw	r16,4(sp)
    5da0:	dfc00215 	stw	ra,8(sp)
    5da4:	2021883a 	mov	r16,r4
    5da8:	20000226 	beq	r4,zero,5db4 <_fflush_r+0x1c>
    5dac:	20800e17 	ldw	r2,56(r4)
    5db0:	10000c26 	beq	r2,zero,5de4 <_fflush_r+0x4c>
    5db4:	2880030f 	ldh	r2,12(r5)
    5db8:	1000051e 	bne	r2,zero,5dd0 <_fflush_r+0x38>
    5dbc:	0005883a 	mov	r2,zero
    5dc0:	dfc00217 	ldw	ra,8(sp)
    5dc4:	dc000117 	ldw	r16,4(sp)
    5dc8:	dec00304 	addi	sp,sp,12
    5dcc:	f800283a 	ret
    5dd0:	8009883a 	mov	r4,r16
    5dd4:	dfc00217 	ldw	ra,8(sp)
    5dd8:	dc000117 	ldw	r16,4(sp)
    5ddc:	dec00304 	addi	sp,sp,12
    5de0:	0005b7c1 	jmpi	5b7c <__sflush_r>
    5de4:	d9400015 	stw	r5,0(sp)
    5de8:	00061840 	call	6184 <__sinit>
    5dec:	d9400017 	ldw	r5,0(sp)
    5df0:	003ff006 	br	5db4 <__alt_exception_stack_pointer+0xf8005db4>

00005df4 <fflush>:
    5df4:	20000526 	beq	r4,zero,5e0c <fflush+0x18>
    5df8:	00800074 	movhi	r2,1
    5dfc:	108ab404 	addi	r2,r2,10960
    5e00:	200b883a 	mov	r5,r4
    5e04:	11000017 	ldw	r4,0(r2)
    5e08:	0005d981 	jmpi	5d98 <_fflush_r>
    5e0c:	00800074 	movhi	r2,1
    5e10:	108ab304 	addi	r2,r2,10956
    5e14:	11000017 	ldw	r4,0(r2)
    5e18:	01400034 	movhi	r5,0
    5e1c:	29576604 	addi	r5,r5,23960
    5e20:	00066cc1 	jmpi	66cc <_fwalk_reent>

00005e24 <__fp_unlock>:
    5e24:	0005883a 	mov	r2,zero
    5e28:	f800283a 	ret

00005e2c <_cleanup_r>:
    5e2c:	01400074 	movhi	r5,1
    5e30:	29667804 	addi	r5,r5,-26144
    5e34:	00066cc1 	jmpi	66cc <_fwalk_reent>

00005e38 <__sinit.part.1>:
    5e38:	defff704 	addi	sp,sp,-36
    5e3c:	00c00034 	movhi	r3,0
    5e40:	dfc00815 	stw	ra,32(sp)
    5e44:	ddc00715 	stw	r23,28(sp)
    5e48:	dd800615 	stw	r22,24(sp)
    5e4c:	dd400515 	stw	r21,20(sp)
    5e50:	dd000415 	stw	r20,16(sp)
    5e54:	dcc00315 	stw	r19,12(sp)
    5e58:	dc800215 	stw	r18,8(sp)
    5e5c:	dc400115 	stw	r17,4(sp)
    5e60:	dc000015 	stw	r16,0(sp)
    5e64:	18d78b04 	addi	r3,r3,24108
    5e68:	24000117 	ldw	r16,4(r4)
    5e6c:	20c00f15 	stw	r3,60(r4)
    5e70:	2080bb04 	addi	r2,r4,748
    5e74:	00c000c4 	movi	r3,3
    5e78:	20c0b915 	stw	r3,740(r4)
    5e7c:	2080ba15 	stw	r2,744(r4)
    5e80:	2000b815 	stw	zero,736(r4)
    5e84:	05c00204 	movi	r23,8
    5e88:	00800104 	movi	r2,4
    5e8c:	2025883a 	mov	r18,r4
    5e90:	b80d883a 	mov	r6,r23
    5e94:	81001704 	addi	r4,r16,92
    5e98:	000b883a 	mov	r5,zero
    5e9c:	80000015 	stw	zero,0(r16)
    5ea0:	80000115 	stw	zero,4(r16)
    5ea4:	80000215 	stw	zero,8(r16)
    5ea8:	8080030d 	sth	r2,12(r16)
    5eac:	80001915 	stw	zero,100(r16)
    5eb0:	8000038d 	sth	zero,14(r16)
    5eb4:	80000415 	stw	zero,16(r16)
    5eb8:	80000515 	stw	zero,20(r16)
    5ebc:	80000615 	stw	zero,24(r16)
    5ec0:	0006c540 	call	6c54 <memset>
    5ec4:	05800034 	movhi	r22,0
    5ec8:	94400217 	ldw	r17,8(r18)
    5ecc:	05400034 	movhi	r21,0
    5ed0:	05000034 	movhi	r20,0
    5ed4:	04c00034 	movhi	r19,0
    5ed8:	b59faa04 	addi	r22,r22,32424
    5edc:	ad5fc104 	addi	r21,r21,32516
    5ee0:	a51fe004 	addi	r20,r20,32640
    5ee4:	9cdff704 	addi	r19,r19,32732
    5ee8:	85800815 	stw	r22,32(r16)
    5eec:	85400915 	stw	r21,36(r16)
    5ef0:	85000a15 	stw	r20,40(r16)
    5ef4:	84c00b15 	stw	r19,44(r16)
    5ef8:	84000715 	stw	r16,28(r16)
    5efc:	00800284 	movi	r2,10
    5f00:	8880030d 	sth	r2,12(r17)
    5f04:	00800044 	movi	r2,1
    5f08:	b80d883a 	mov	r6,r23
    5f0c:	89001704 	addi	r4,r17,92
    5f10:	000b883a 	mov	r5,zero
    5f14:	88000015 	stw	zero,0(r17)
    5f18:	88000115 	stw	zero,4(r17)
    5f1c:	88000215 	stw	zero,8(r17)
    5f20:	88001915 	stw	zero,100(r17)
    5f24:	8880038d 	sth	r2,14(r17)
    5f28:	88000415 	stw	zero,16(r17)
    5f2c:	88000515 	stw	zero,20(r17)
    5f30:	88000615 	stw	zero,24(r17)
    5f34:	0006c540 	call	6c54 <memset>
    5f38:	94000317 	ldw	r16,12(r18)
    5f3c:	00800484 	movi	r2,18
    5f40:	8c400715 	stw	r17,28(r17)
    5f44:	8d800815 	stw	r22,32(r17)
    5f48:	8d400915 	stw	r21,36(r17)
    5f4c:	8d000a15 	stw	r20,40(r17)
    5f50:	8cc00b15 	stw	r19,44(r17)
    5f54:	8080030d 	sth	r2,12(r16)
    5f58:	00800084 	movi	r2,2
    5f5c:	80000015 	stw	zero,0(r16)
    5f60:	80000115 	stw	zero,4(r16)
    5f64:	80000215 	stw	zero,8(r16)
    5f68:	80001915 	stw	zero,100(r16)
    5f6c:	8080038d 	sth	r2,14(r16)
    5f70:	80000415 	stw	zero,16(r16)
    5f74:	80000515 	stw	zero,20(r16)
    5f78:	80000615 	stw	zero,24(r16)
    5f7c:	b80d883a 	mov	r6,r23
    5f80:	000b883a 	mov	r5,zero
    5f84:	81001704 	addi	r4,r16,92
    5f88:	0006c540 	call	6c54 <memset>
    5f8c:	00800044 	movi	r2,1
    5f90:	84000715 	stw	r16,28(r16)
    5f94:	85800815 	stw	r22,32(r16)
    5f98:	85400915 	stw	r21,36(r16)
    5f9c:	85000a15 	stw	r20,40(r16)
    5fa0:	84c00b15 	stw	r19,44(r16)
    5fa4:	90800e15 	stw	r2,56(r18)
    5fa8:	dfc00817 	ldw	ra,32(sp)
    5fac:	ddc00717 	ldw	r23,28(sp)
    5fb0:	dd800617 	ldw	r22,24(sp)
    5fb4:	dd400517 	ldw	r21,20(sp)
    5fb8:	dd000417 	ldw	r20,16(sp)
    5fbc:	dcc00317 	ldw	r19,12(sp)
    5fc0:	dc800217 	ldw	r18,8(sp)
    5fc4:	dc400117 	ldw	r17,4(sp)
    5fc8:	dc000017 	ldw	r16,0(sp)
    5fcc:	dec00904 	addi	sp,sp,36
    5fd0:	f800283a 	ret

00005fd4 <__fp_lock>:
    5fd4:	0005883a 	mov	r2,zero
    5fd8:	f800283a 	ret

00005fdc <__sfmoreglue>:
    5fdc:	defffc04 	addi	sp,sp,-16
    5fe0:	dc800215 	stw	r18,8(sp)
    5fe4:	2825883a 	mov	r18,r5
    5fe8:	dc000015 	stw	r16,0(sp)
    5fec:	01401a04 	movi	r5,104
    5ff0:	2021883a 	mov	r16,r4
    5ff4:	913fffc4 	addi	r4,r18,-1
    5ff8:	dfc00315 	stw	ra,12(sp)
    5ffc:	dc400115 	stw	r17,4(sp)
    6000:	00009780 	call	978 <__mulsi3>
    6004:	8009883a 	mov	r4,r16
    6008:	11401d04 	addi	r5,r2,116
    600c:	1023883a 	mov	r17,r2
    6010:	00014f00 	call	14f0 <_malloc_r>
    6014:	1021883a 	mov	r16,r2
    6018:	10000726 	beq	r2,zero,6038 <__sfmoreglue+0x5c>
    601c:	11000304 	addi	r4,r2,12
    6020:	10000015 	stw	zero,0(r2)
    6024:	14800115 	stw	r18,4(r2)
    6028:	11000215 	stw	r4,8(r2)
    602c:	89801a04 	addi	r6,r17,104
    6030:	000b883a 	mov	r5,zero
    6034:	0006c540 	call	6c54 <memset>
    6038:	8005883a 	mov	r2,r16
    603c:	dfc00317 	ldw	ra,12(sp)
    6040:	dc800217 	ldw	r18,8(sp)
    6044:	dc400117 	ldw	r17,4(sp)
    6048:	dc000017 	ldw	r16,0(sp)
    604c:	dec00404 	addi	sp,sp,16
    6050:	f800283a 	ret

00006054 <__sfp>:
    6054:	defffb04 	addi	sp,sp,-20
    6058:	dc000015 	stw	r16,0(sp)
    605c:	04000074 	movhi	r16,1
    6060:	840ab304 	addi	r16,r16,10956
    6064:	dcc00315 	stw	r19,12(sp)
    6068:	2027883a 	mov	r19,r4
    606c:	81000017 	ldw	r4,0(r16)
    6070:	dfc00415 	stw	ra,16(sp)
    6074:	dc800215 	stw	r18,8(sp)
    6078:	20800e17 	ldw	r2,56(r4)
    607c:	dc400115 	stw	r17,4(sp)
    6080:	1000021e 	bne	r2,zero,608c <__sfp+0x38>
    6084:	0005e380 	call	5e38 <__sinit.part.1>
    6088:	81000017 	ldw	r4,0(r16)
    608c:	2480b804 	addi	r18,r4,736
    6090:	047fffc4 	movi	r17,-1
    6094:	91000117 	ldw	r4,4(r18)
    6098:	94000217 	ldw	r16,8(r18)
    609c:	213fffc4 	addi	r4,r4,-1
    60a0:	20000a16 	blt	r4,zero,60cc <__sfp+0x78>
    60a4:	8080030f 	ldh	r2,12(r16)
    60a8:	10000c26 	beq	r2,zero,60dc <__sfp+0x88>
    60ac:	80c01d04 	addi	r3,r16,116
    60b0:	00000206 	br	60bc <__sfp+0x68>
    60b4:	18bfe60f 	ldh	r2,-104(r3)
    60b8:	10000826 	beq	r2,zero,60dc <__sfp+0x88>
    60bc:	213fffc4 	addi	r4,r4,-1
    60c0:	1c3ffd04 	addi	r16,r3,-12
    60c4:	18c01a04 	addi	r3,r3,104
    60c8:	247ffa1e 	bne	r4,r17,60b4 <__alt_exception_stack_pointer+0xf80060b4>
    60cc:	90800017 	ldw	r2,0(r18)
    60d0:	10001d26 	beq	r2,zero,6148 <__sfp+0xf4>
    60d4:	1025883a 	mov	r18,r2
    60d8:	003fee06 	br	6094 <__alt_exception_stack_pointer+0xf8006094>
    60dc:	00bfffc4 	movi	r2,-1
    60e0:	8080038d 	sth	r2,14(r16)
    60e4:	00800044 	movi	r2,1
    60e8:	8080030d 	sth	r2,12(r16)
    60ec:	80001915 	stw	zero,100(r16)
    60f0:	80000015 	stw	zero,0(r16)
    60f4:	80000215 	stw	zero,8(r16)
    60f8:	80000115 	stw	zero,4(r16)
    60fc:	80000415 	stw	zero,16(r16)
    6100:	80000515 	stw	zero,20(r16)
    6104:	80000615 	stw	zero,24(r16)
    6108:	01800204 	movi	r6,8
    610c:	000b883a 	mov	r5,zero
    6110:	81001704 	addi	r4,r16,92
    6114:	0006c540 	call	6c54 <memset>
    6118:	8005883a 	mov	r2,r16
    611c:	80000c15 	stw	zero,48(r16)
    6120:	80000d15 	stw	zero,52(r16)
    6124:	80001115 	stw	zero,68(r16)
    6128:	80001215 	stw	zero,72(r16)
    612c:	dfc00417 	ldw	ra,16(sp)
    6130:	dcc00317 	ldw	r19,12(sp)
    6134:	dc800217 	ldw	r18,8(sp)
    6138:	dc400117 	ldw	r17,4(sp)
    613c:	dc000017 	ldw	r16,0(sp)
    6140:	dec00504 	addi	sp,sp,20
    6144:	f800283a 	ret
    6148:	01400104 	movi	r5,4
    614c:	9809883a 	mov	r4,r19
    6150:	0005fdc0 	call	5fdc <__sfmoreglue>
    6154:	90800015 	stw	r2,0(r18)
    6158:	103fde1e 	bne	r2,zero,60d4 <__alt_exception_stack_pointer+0xf80060d4>
    615c:	00800304 	movi	r2,12
    6160:	98800015 	stw	r2,0(r19)
    6164:	0005883a 	mov	r2,zero
    6168:	003ff006 	br	612c <__alt_exception_stack_pointer+0xf800612c>

0000616c <_cleanup>:
    616c:	00800074 	movhi	r2,1
    6170:	108ab304 	addi	r2,r2,10956
    6174:	11000017 	ldw	r4,0(r2)
    6178:	01400074 	movhi	r5,1
    617c:	29667804 	addi	r5,r5,-26144
    6180:	00066cc1 	jmpi	66cc <_fwalk_reent>

00006184 <__sinit>:
    6184:	20800e17 	ldw	r2,56(r4)
    6188:	10000126 	beq	r2,zero,6190 <__sinit+0xc>
    618c:	f800283a 	ret
    6190:	0005e381 	jmpi	5e38 <__sinit.part.1>

00006194 <__sfp_lock_acquire>:
    6194:	f800283a 	ret

00006198 <__sfp_lock_release>:
    6198:	f800283a 	ret

0000619c <__sinit_lock_acquire>:
    619c:	f800283a 	ret

000061a0 <__sinit_lock_release>:
    61a0:	f800283a 	ret

000061a4 <__fp_lock_all>:
    61a4:	00800074 	movhi	r2,1
    61a8:	108ab404 	addi	r2,r2,10960
    61ac:	11000017 	ldw	r4,0(r2)
    61b0:	01400034 	movhi	r5,0
    61b4:	2957f504 	addi	r5,r5,24532
    61b8:	00066081 	jmpi	6608 <_fwalk>

000061bc <__fp_unlock_all>:
    61bc:	00800074 	movhi	r2,1
    61c0:	108ab404 	addi	r2,r2,10960
    61c4:	11000017 	ldw	r4,0(r2)
    61c8:	01400034 	movhi	r5,0
    61cc:	29578904 	addi	r5,r5,24100
    61d0:	00066081 	jmpi	6608 <_fwalk>

000061d4 <_malloc_trim_r>:
    61d4:	defffb04 	addi	sp,sp,-20
    61d8:	dcc00315 	stw	r19,12(sp)
    61dc:	04c00074 	movhi	r19,1
    61e0:	dc800215 	stw	r18,8(sp)
    61e4:	dc400115 	stw	r17,4(sp)
    61e8:	dc000015 	stw	r16,0(sp)
    61ec:	dfc00415 	stw	ra,16(sp)
    61f0:	2821883a 	mov	r16,r5
    61f4:	9cc4da04 	addi	r19,r19,4968
    61f8:	2025883a 	mov	r18,r4
    61fc:	000ddf80 	call	ddf8 <__malloc_lock>
    6200:	98800217 	ldw	r2,8(r19)
    6204:	14400117 	ldw	r17,4(r2)
    6208:	00bfff04 	movi	r2,-4
    620c:	88a2703a 	and	r17,r17,r2
    6210:	8c21c83a 	sub	r16,r17,r16
    6214:	8403fbc4 	addi	r16,r16,4079
    6218:	8020d33a 	srli	r16,r16,12
    621c:	0083ffc4 	movi	r2,4095
    6220:	843fffc4 	addi	r16,r16,-1
    6224:	8020933a 	slli	r16,r16,12
    6228:	1400060e 	bge	r2,r16,6244 <_malloc_trim_r+0x70>
    622c:	000b883a 	mov	r5,zero
    6230:	9009883a 	mov	r4,r18
    6234:	0001d680 	call	1d68 <_sbrk_r>
    6238:	98c00217 	ldw	r3,8(r19)
    623c:	1c47883a 	add	r3,r3,r17
    6240:	10c00a26 	beq	r2,r3,626c <_malloc_trim_r+0x98>
    6244:	9009883a 	mov	r4,r18
    6248:	000de1c0 	call	de1c <__malloc_unlock>
    624c:	0005883a 	mov	r2,zero
    6250:	dfc00417 	ldw	ra,16(sp)
    6254:	dcc00317 	ldw	r19,12(sp)
    6258:	dc800217 	ldw	r18,8(sp)
    625c:	dc400117 	ldw	r17,4(sp)
    6260:	dc000017 	ldw	r16,0(sp)
    6264:	dec00504 	addi	sp,sp,20
    6268:	f800283a 	ret
    626c:	040bc83a 	sub	r5,zero,r16
    6270:	9009883a 	mov	r4,r18
    6274:	0001d680 	call	1d68 <_sbrk_r>
    6278:	00ffffc4 	movi	r3,-1
    627c:	10c00d26 	beq	r2,r3,62b4 <_malloc_trim_r+0xe0>
    6280:	00c00074 	movhi	r3,1
    6284:	18d1ca04 	addi	r3,r3,18216
    6288:	18800017 	ldw	r2,0(r3)
    628c:	99000217 	ldw	r4,8(r19)
    6290:	8c23c83a 	sub	r17,r17,r16
    6294:	8c400054 	ori	r17,r17,1
    6298:	1421c83a 	sub	r16,r2,r16
    629c:	24400115 	stw	r17,4(r4)
    62a0:	9009883a 	mov	r4,r18
    62a4:	1c000015 	stw	r16,0(r3)
    62a8:	000de1c0 	call	de1c <__malloc_unlock>
    62ac:	00800044 	movi	r2,1
    62b0:	003fe706 	br	6250 <__alt_exception_stack_pointer+0xf8006250>
    62b4:	000b883a 	mov	r5,zero
    62b8:	9009883a 	mov	r4,r18
    62bc:	0001d680 	call	1d68 <_sbrk_r>
    62c0:	99000217 	ldw	r4,8(r19)
    62c4:	014003c4 	movi	r5,15
    62c8:	1107c83a 	sub	r3,r2,r4
    62cc:	28ffdd0e 	bge	r5,r3,6244 <__alt_exception_stack_pointer+0xf8006244>
    62d0:	01400074 	movhi	r5,1
    62d4:	294ab504 	addi	r5,r5,10964
    62d8:	29400017 	ldw	r5,0(r5)
    62dc:	18c00054 	ori	r3,r3,1
    62e0:	20c00115 	stw	r3,4(r4)
    62e4:	00c00074 	movhi	r3,1
    62e8:	1145c83a 	sub	r2,r2,r5
    62ec:	18d1ca04 	addi	r3,r3,18216
    62f0:	18800015 	stw	r2,0(r3)
    62f4:	003fd306 	br	6244 <__alt_exception_stack_pointer+0xf8006244>

000062f8 <_free_r>:
    62f8:	28004126 	beq	r5,zero,6400 <_free_r+0x108>
    62fc:	defffd04 	addi	sp,sp,-12
    6300:	dc400115 	stw	r17,4(sp)
    6304:	dc000015 	stw	r16,0(sp)
    6308:	2023883a 	mov	r17,r4
    630c:	2821883a 	mov	r16,r5
    6310:	dfc00215 	stw	ra,8(sp)
    6314:	000ddf80 	call	ddf8 <__malloc_lock>
    6318:	81ffff17 	ldw	r7,-4(r16)
    631c:	00bfff84 	movi	r2,-2
    6320:	01000074 	movhi	r4,1
    6324:	81bffe04 	addi	r6,r16,-8
    6328:	3884703a 	and	r2,r7,r2
    632c:	2104da04 	addi	r4,r4,4968
    6330:	308b883a 	add	r5,r6,r2
    6334:	2a400117 	ldw	r9,4(r5)
    6338:	22000217 	ldw	r8,8(r4)
    633c:	00ffff04 	movi	r3,-4
    6340:	48c6703a 	and	r3,r9,r3
    6344:	2a005726 	beq	r5,r8,64a4 <_free_r+0x1ac>
    6348:	28c00115 	stw	r3,4(r5)
    634c:	39c0004c 	andi	r7,r7,1
    6350:	3800091e 	bne	r7,zero,6378 <_free_r+0x80>
    6354:	823ffe17 	ldw	r8,-8(r16)
    6358:	22400204 	addi	r9,r4,8
    635c:	320dc83a 	sub	r6,r6,r8
    6360:	31c00217 	ldw	r7,8(r6)
    6364:	1205883a 	add	r2,r2,r8
    6368:	3a406526 	beq	r7,r9,6500 <_free_r+0x208>
    636c:	32000317 	ldw	r8,12(r6)
    6370:	3a000315 	stw	r8,12(r7)
    6374:	41c00215 	stw	r7,8(r8)
    6378:	28cf883a 	add	r7,r5,r3
    637c:	39c00117 	ldw	r7,4(r7)
    6380:	39c0004c 	andi	r7,r7,1
    6384:	38003a26 	beq	r7,zero,6470 <_free_r+0x178>
    6388:	10c00054 	ori	r3,r2,1
    638c:	30c00115 	stw	r3,4(r6)
    6390:	3087883a 	add	r3,r6,r2
    6394:	18800015 	stw	r2,0(r3)
    6398:	00c07fc4 	movi	r3,511
    639c:	18801936 	bltu	r3,r2,6404 <_free_r+0x10c>
    63a0:	1004d0fa 	srli	r2,r2,3
    63a4:	01c00044 	movi	r7,1
    63a8:	21400117 	ldw	r5,4(r4)
    63ac:	10c00044 	addi	r3,r2,1
    63b0:	18c7883a 	add	r3,r3,r3
    63b4:	1005d0ba 	srai	r2,r2,2
    63b8:	18c7883a 	add	r3,r3,r3
    63bc:	18c7883a 	add	r3,r3,r3
    63c0:	1907883a 	add	r3,r3,r4
    63c4:	3884983a 	sll	r2,r7,r2
    63c8:	19c00017 	ldw	r7,0(r3)
    63cc:	1a3ffe04 	addi	r8,r3,-8
    63d0:	1144b03a 	or	r2,r2,r5
    63d4:	32000315 	stw	r8,12(r6)
    63d8:	31c00215 	stw	r7,8(r6)
    63dc:	20800115 	stw	r2,4(r4)
    63e0:	19800015 	stw	r6,0(r3)
    63e4:	39800315 	stw	r6,12(r7)
    63e8:	8809883a 	mov	r4,r17
    63ec:	dfc00217 	ldw	ra,8(sp)
    63f0:	dc400117 	ldw	r17,4(sp)
    63f4:	dc000017 	ldw	r16,0(sp)
    63f8:	dec00304 	addi	sp,sp,12
    63fc:	000de1c1 	jmpi	de1c <__malloc_unlock>
    6400:	f800283a 	ret
    6404:	100ad27a 	srli	r5,r2,9
    6408:	00c00104 	movi	r3,4
    640c:	19404a36 	bltu	r3,r5,6538 <_free_r+0x240>
    6410:	100ad1ba 	srli	r5,r2,6
    6414:	28c00e44 	addi	r3,r5,57
    6418:	18c7883a 	add	r3,r3,r3
    641c:	29400e04 	addi	r5,r5,56
    6420:	18c7883a 	add	r3,r3,r3
    6424:	18c7883a 	add	r3,r3,r3
    6428:	1909883a 	add	r4,r3,r4
    642c:	20c00017 	ldw	r3,0(r4)
    6430:	01c00074 	movhi	r7,1
    6434:	213ffe04 	addi	r4,r4,-8
    6438:	39c4da04 	addi	r7,r7,4968
    643c:	20c04426 	beq	r4,r3,6550 <_free_r+0x258>
    6440:	01ffff04 	movi	r7,-4
    6444:	19400117 	ldw	r5,4(r3)
    6448:	29ca703a 	and	r5,r5,r7
    644c:	1140022e 	bgeu	r2,r5,6458 <_free_r+0x160>
    6450:	18c00217 	ldw	r3,8(r3)
    6454:	20fffb1e 	bne	r4,r3,6444 <__alt_exception_stack_pointer+0xf8006444>
    6458:	19000317 	ldw	r4,12(r3)
    645c:	31000315 	stw	r4,12(r6)
    6460:	30c00215 	stw	r3,8(r6)
    6464:	21800215 	stw	r6,8(r4)
    6468:	19800315 	stw	r6,12(r3)
    646c:	003fde06 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>
    6470:	29c00217 	ldw	r7,8(r5)
    6474:	10c5883a 	add	r2,r2,r3
    6478:	00c00074 	movhi	r3,1
    647c:	18c4dc04 	addi	r3,r3,4976
    6480:	38c03b26 	beq	r7,r3,6570 <_free_r+0x278>
    6484:	2a000317 	ldw	r8,12(r5)
    6488:	11400054 	ori	r5,r2,1
    648c:	3087883a 	add	r3,r6,r2
    6490:	3a000315 	stw	r8,12(r7)
    6494:	41c00215 	stw	r7,8(r8)
    6498:	31400115 	stw	r5,4(r6)
    649c:	18800015 	stw	r2,0(r3)
    64a0:	003fbd06 	br	6398 <__alt_exception_stack_pointer+0xf8006398>
    64a4:	39c0004c 	andi	r7,r7,1
    64a8:	10c5883a 	add	r2,r2,r3
    64ac:	3800071e 	bne	r7,zero,64cc <_free_r+0x1d4>
    64b0:	81fffe17 	ldw	r7,-8(r16)
    64b4:	31cdc83a 	sub	r6,r6,r7
    64b8:	30c00317 	ldw	r3,12(r6)
    64bc:	31400217 	ldw	r5,8(r6)
    64c0:	11c5883a 	add	r2,r2,r7
    64c4:	28c00315 	stw	r3,12(r5)
    64c8:	19400215 	stw	r5,8(r3)
    64cc:	10c00054 	ori	r3,r2,1
    64d0:	30c00115 	stw	r3,4(r6)
    64d4:	00c00074 	movhi	r3,1
    64d8:	18cab604 	addi	r3,r3,10968
    64dc:	18c00017 	ldw	r3,0(r3)
    64e0:	21800215 	stw	r6,8(r4)
    64e4:	10ffc036 	bltu	r2,r3,63e8 <__alt_exception_stack_pointer+0xf80063e8>
    64e8:	00800074 	movhi	r2,1
    64ec:	1091be04 	addi	r2,r2,18168
    64f0:	11400017 	ldw	r5,0(r2)
    64f4:	8809883a 	mov	r4,r17
    64f8:	00061d40 	call	61d4 <_malloc_trim_r>
    64fc:	003fba06 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>
    6500:	28c9883a 	add	r4,r5,r3
    6504:	21000117 	ldw	r4,4(r4)
    6508:	2100004c 	andi	r4,r4,1
    650c:	2000391e 	bne	r4,zero,65f4 <_free_r+0x2fc>
    6510:	29c00217 	ldw	r7,8(r5)
    6514:	29000317 	ldw	r4,12(r5)
    6518:	1885883a 	add	r2,r3,r2
    651c:	10c00054 	ori	r3,r2,1
    6520:	39000315 	stw	r4,12(r7)
    6524:	21c00215 	stw	r7,8(r4)
    6528:	30c00115 	stw	r3,4(r6)
    652c:	308d883a 	add	r6,r6,r2
    6530:	30800015 	stw	r2,0(r6)
    6534:	003fac06 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>
    6538:	00c00504 	movi	r3,20
    653c:	19401536 	bltu	r3,r5,6594 <_free_r+0x29c>
    6540:	28c01704 	addi	r3,r5,92
    6544:	18c7883a 	add	r3,r3,r3
    6548:	294016c4 	addi	r5,r5,91
    654c:	003fb406 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    6550:	280bd0ba 	srai	r5,r5,2
    6554:	00c00044 	movi	r3,1
    6558:	38800117 	ldw	r2,4(r7)
    655c:	194a983a 	sll	r5,r3,r5
    6560:	2007883a 	mov	r3,r4
    6564:	2884b03a 	or	r2,r5,r2
    6568:	38800115 	stw	r2,4(r7)
    656c:	003fbb06 	br	645c <__alt_exception_stack_pointer+0xf800645c>
    6570:	21800515 	stw	r6,20(r4)
    6574:	21800415 	stw	r6,16(r4)
    6578:	10c00054 	ori	r3,r2,1
    657c:	31c00315 	stw	r7,12(r6)
    6580:	31c00215 	stw	r7,8(r6)
    6584:	30c00115 	stw	r3,4(r6)
    6588:	308d883a 	add	r6,r6,r2
    658c:	30800015 	stw	r2,0(r6)
    6590:	003f9506 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>
    6594:	00c01504 	movi	r3,84
    6598:	19400536 	bltu	r3,r5,65b0 <_free_r+0x2b8>
    659c:	100ad33a 	srli	r5,r2,12
    65a0:	28c01bc4 	addi	r3,r5,111
    65a4:	18c7883a 	add	r3,r3,r3
    65a8:	29401b84 	addi	r5,r5,110
    65ac:	003f9c06 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    65b0:	00c05504 	movi	r3,340
    65b4:	19400536 	bltu	r3,r5,65cc <_free_r+0x2d4>
    65b8:	100ad3fa 	srli	r5,r2,15
    65bc:	28c01e04 	addi	r3,r5,120
    65c0:	18c7883a 	add	r3,r3,r3
    65c4:	29401dc4 	addi	r5,r5,119
    65c8:	003f9506 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    65cc:	00c15504 	movi	r3,1364
    65d0:	19400536 	bltu	r3,r5,65e8 <_free_r+0x2f0>
    65d4:	100ad4ba 	srli	r5,r2,18
    65d8:	28c01f44 	addi	r3,r5,125
    65dc:	18c7883a 	add	r3,r3,r3
    65e0:	29401f04 	addi	r5,r5,124
    65e4:	003f8e06 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    65e8:	00c03f84 	movi	r3,254
    65ec:	01401f84 	movi	r5,126
    65f0:	003f8b06 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    65f4:	10c00054 	ori	r3,r2,1
    65f8:	30c00115 	stw	r3,4(r6)
    65fc:	308d883a 	add	r6,r6,r2
    6600:	30800015 	stw	r2,0(r6)
    6604:	003f7806 	br	63e8 <__alt_exception_stack_pointer+0xf80063e8>

00006608 <_fwalk>:
    6608:	defff704 	addi	sp,sp,-36
    660c:	dd000415 	stw	r20,16(sp)
    6610:	dfc00815 	stw	ra,32(sp)
    6614:	ddc00715 	stw	r23,28(sp)
    6618:	dd800615 	stw	r22,24(sp)
    661c:	dd400515 	stw	r21,20(sp)
    6620:	dcc00315 	stw	r19,12(sp)
    6624:	dc800215 	stw	r18,8(sp)
    6628:	dc400115 	stw	r17,4(sp)
    662c:	dc000015 	stw	r16,0(sp)
    6630:	2500b804 	addi	r20,r4,736
    6634:	a0002326 	beq	r20,zero,66c4 <_fwalk+0xbc>
    6638:	282b883a 	mov	r21,r5
    663c:	002f883a 	mov	r23,zero
    6640:	05800044 	movi	r22,1
    6644:	04ffffc4 	movi	r19,-1
    6648:	a4400117 	ldw	r17,4(r20)
    664c:	a4800217 	ldw	r18,8(r20)
    6650:	8c7fffc4 	addi	r17,r17,-1
    6654:	88000d16 	blt	r17,zero,668c <_fwalk+0x84>
    6658:	94000304 	addi	r16,r18,12
    665c:	94800384 	addi	r18,r18,14
    6660:	8080000b 	ldhu	r2,0(r16)
    6664:	8c7fffc4 	addi	r17,r17,-1
    6668:	813ffd04 	addi	r4,r16,-12
    666c:	b080042e 	bgeu	r22,r2,6680 <_fwalk+0x78>
    6670:	9080000f 	ldh	r2,0(r18)
    6674:	14c00226 	beq	r2,r19,6680 <_fwalk+0x78>
    6678:	a83ee83a 	callr	r21
    667c:	b8aeb03a 	or	r23,r23,r2
    6680:	84001a04 	addi	r16,r16,104
    6684:	94801a04 	addi	r18,r18,104
    6688:	8cfff51e 	bne	r17,r19,6660 <__alt_exception_stack_pointer+0xf8006660>
    668c:	a5000017 	ldw	r20,0(r20)
    6690:	a03fed1e 	bne	r20,zero,6648 <__alt_exception_stack_pointer+0xf8006648>
    6694:	b805883a 	mov	r2,r23
    6698:	dfc00817 	ldw	ra,32(sp)
    669c:	ddc00717 	ldw	r23,28(sp)
    66a0:	dd800617 	ldw	r22,24(sp)
    66a4:	dd400517 	ldw	r21,20(sp)
    66a8:	dd000417 	ldw	r20,16(sp)
    66ac:	dcc00317 	ldw	r19,12(sp)
    66b0:	dc800217 	ldw	r18,8(sp)
    66b4:	dc400117 	ldw	r17,4(sp)
    66b8:	dc000017 	ldw	r16,0(sp)
    66bc:	dec00904 	addi	sp,sp,36
    66c0:	f800283a 	ret
    66c4:	002f883a 	mov	r23,zero
    66c8:	003ff206 	br	6694 <__alt_exception_stack_pointer+0xf8006694>

000066cc <_fwalk_reent>:
    66cc:	defff704 	addi	sp,sp,-36
    66d0:	dd000415 	stw	r20,16(sp)
    66d4:	dfc00815 	stw	ra,32(sp)
    66d8:	ddc00715 	stw	r23,28(sp)
    66dc:	dd800615 	stw	r22,24(sp)
    66e0:	dd400515 	stw	r21,20(sp)
    66e4:	dcc00315 	stw	r19,12(sp)
    66e8:	dc800215 	stw	r18,8(sp)
    66ec:	dc400115 	stw	r17,4(sp)
    66f0:	dc000015 	stw	r16,0(sp)
    66f4:	2500b804 	addi	r20,r4,736
    66f8:	a0002326 	beq	r20,zero,6788 <_fwalk_reent+0xbc>
    66fc:	282b883a 	mov	r21,r5
    6700:	2027883a 	mov	r19,r4
    6704:	002f883a 	mov	r23,zero
    6708:	05800044 	movi	r22,1
    670c:	04bfffc4 	movi	r18,-1
    6710:	a4400117 	ldw	r17,4(r20)
    6714:	a4000217 	ldw	r16,8(r20)
    6718:	8c7fffc4 	addi	r17,r17,-1
    671c:	88000c16 	blt	r17,zero,6750 <_fwalk_reent+0x84>
    6720:	84000304 	addi	r16,r16,12
    6724:	8080000b 	ldhu	r2,0(r16)
    6728:	8c7fffc4 	addi	r17,r17,-1
    672c:	817ffd04 	addi	r5,r16,-12
    6730:	b080052e 	bgeu	r22,r2,6748 <_fwalk_reent+0x7c>
    6734:	8080008f 	ldh	r2,2(r16)
    6738:	9809883a 	mov	r4,r19
    673c:	14800226 	beq	r2,r18,6748 <_fwalk_reent+0x7c>
    6740:	a83ee83a 	callr	r21
    6744:	b8aeb03a 	or	r23,r23,r2
    6748:	84001a04 	addi	r16,r16,104
    674c:	8cbff51e 	bne	r17,r18,6724 <__alt_exception_stack_pointer+0xf8006724>
    6750:	a5000017 	ldw	r20,0(r20)
    6754:	a03fee1e 	bne	r20,zero,6710 <__alt_exception_stack_pointer+0xf8006710>
    6758:	b805883a 	mov	r2,r23
    675c:	dfc00817 	ldw	ra,32(sp)
    6760:	ddc00717 	ldw	r23,28(sp)
    6764:	dd800617 	ldw	r22,24(sp)
    6768:	dd400517 	ldw	r21,20(sp)
    676c:	dd000417 	ldw	r20,16(sp)
    6770:	dcc00317 	ldw	r19,12(sp)
    6774:	dc800217 	ldw	r18,8(sp)
    6778:	dc400117 	ldw	r17,4(sp)
    677c:	dc000017 	ldw	r16,0(sp)
    6780:	dec00904 	addi	sp,sp,36
    6784:	f800283a 	ret
    6788:	002f883a 	mov	r23,zero
    678c:	003ff206 	br	6758 <__alt_exception_stack_pointer+0xf8006758>

00006790 <_setlocale_r>:
    6790:	30001b26 	beq	r6,zero,6800 <_setlocale_r+0x70>
    6794:	01400074 	movhi	r5,1
    6798:	defffe04 	addi	sp,sp,-8
    679c:	29436a04 	addi	r5,r5,3496
    67a0:	3009883a 	mov	r4,r6
    67a4:	dc000015 	stw	r16,0(sp)
    67a8:	dfc00115 	stw	ra,4(sp)
    67ac:	3021883a 	mov	r16,r6
    67b0:	0007fe40 	call	7fe4 <strcmp>
    67b4:	1000061e 	bne	r2,zero,67d0 <_setlocale_r+0x40>
    67b8:	00800074 	movhi	r2,1
    67bc:	10834c04 	addi	r2,r2,3376
    67c0:	dfc00117 	ldw	ra,4(sp)
    67c4:	dc000017 	ldw	r16,0(sp)
    67c8:	dec00204 	addi	sp,sp,8
    67cc:	f800283a 	ret
    67d0:	01400074 	movhi	r5,1
    67d4:	29434c04 	addi	r5,r5,3376
    67d8:	8009883a 	mov	r4,r16
    67dc:	0007fe40 	call	7fe4 <strcmp>
    67e0:	103ff526 	beq	r2,zero,67b8 <__alt_exception_stack_pointer+0xf80067b8>
    67e4:	01400074 	movhi	r5,1
    67e8:	29435504 	addi	r5,r5,3412
    67ec:	8009883a 	mov	r4,r16
    67f0:	0007fe40 	call	7fe4 <strcmp>
    67f4:	103ff026 	beq	r2,zero,67b8 <__alt_exception_stack_pointer+0xf80067b8>
    67f8:	0005883a 	mov	r2,zero
    67fc:	003ff006 	br	67c0 <__alt_exception_stack_pointer+0xf80067c0>
    6800:	00800074 	movhi	r2,1
    6804:	10834c04 	addi	r2,r2,3376
    6808:	f800283a 	ret

0000680c <__locale_charset>:
    680c:	00800074 	movhi	r2,1
    6810:	1085e404 	addi	r2,r2,6032
    6814:	f800283a 	ret

00006818 <__locale_mb_cur_max>:
    6818:	00800074 	movhi	r2,1
    681c:	108ab704 	addi	r2,r2,10972
    6820:	10800017 	ldw	r2,0(r2)
    6824:	f800283a 	ret

00006828 <__locale_msgcharset>:
    6828:	00800074 	movhi	r2,1
    682c:	1085dc04 	addi	r2,r2,6000
    6830:	f800283a 	ret

00006834 <__locale_cjk_lang>:
    6834:	0005883a 	mov	r2,zero
    6838:	f800283a 	ret

0000683c <_localeconv_r>:
    683c:	00800074 	movhi	r2,1
    6840:	1085ec04 	addi	r2,r2,6064
    6844:	f800283a 	ret

00006848 <setlocale>:
    6848:	00800074 	movhi	r2,1
    684c:	108ab404 	addi	r2,r2,10960
    6850:	280d883a 	mov	r6,r5
    6854:	200b883a 	mov	r5,r4
    6858:	11000017 	ldw	r4,0(r2)
    685c:	00067901 	jmpi	6790 <_setlocale_r>

00006860 <localeconv>:
    6860:	00800074 	movhi	r2,1
    6864:	1085ec04 	addi	r2,r2,6064
    6868:	f800283a 	ret

0000686c <__smakebuf_r>:
    686c:	2880030b 	ldhu	r2,12(r5)
    6870:	10c0008c 	andi	r3,r2,2
    6874:	1800411e 	bne	r3,zero,697c <__smakebuf_r+0x110>
    6878:	deffec04 	addi	sp,sp,-80
    687c:	dc000f15 	stw	r16,60(sp)
    6880:	2821883a 	mov	r16,r5
    6884:	2940038f 	ldh	r5,14(r5)
    6888:	dc401015 	stw	r17,64(sp)
    688c:	dfc01315 	stw	ra,76(sp)
    6890:	dcc01215 	stw	r19,72(sp)
    6894:	dc801115 	stw	r18,68(sp)
    6898:	2023883a 	mov	r17,r4
    689c:	28001c16 	blt	r5,zero,6910 <__smakebuf_r+0xa4>
    68a0:	d80d883a 	mov	r6,sp
    68a4:	0009cec0 	call	9cec <_fstat_r>
    68a8:	10001816 	blt	r2,zero,690c <__smakebuf_r+0xa0>
    68ac:	d8800117 	ldw	r2,4(sp)
    68b0:	00e00014 	movui	r3,32768
    68b4:	10bc000c 	andi	r2,r2,61440
    68b8:	14c80020 	cmpeqi	r19,r2,8192
    68bc:	10c03726 	beq	r2,r3,699c <__smakebuf_r+0x130>
    68c0:	80c0030b 	ldhu	r3,12(r16)
    68c4:	18c20014 	ori	r3,r3,2048
    68c8:	80c0030d 	sth	r3,12(r16)
    68cc:	00c80004 	movi	r3,8192
    68d0:	10c0521e 	bne	r2,r3,6a1c <__smakebuf_r+0x1b0>
    68d4:	8140038f 	ldh	r5,14(r16)
    68d8:	8809883a 	mov	r4,r17
    68dc:	000a2100 	call	a210 <_isatty_r>
    68e0:	10004c26 	beq	r2,zero,6a14 <__smakebuf_r+0x1a8>
    68e4:	8080030b 	ldhu	r2,12(r16)
    68e8:	80c010c4 	addi	r3,r16,67
    68ec:	80c00015 	stw	r3,0(r16)
    68f0:	10800054 	ori	r2,r2,1
    68f4:	8080030d 	sth	r2,12(r16)
    68f8:	00800044 	movi	r2,1
    68fc:	80c00415 	stw	r3,16(r16)
    6900:	80800515 	stw	r2,20(r16)
    6904:	04810004 	movi	r18,1024
    6908:	00000706 	br	6928 <__smakebuf_r+0xbc>
    690c:	8080030b 	ldhu	r2,12(r16)
    6910:	10c0200c 	andi	r3,r2,128
    6914:	18001f1e 	bne	r3,zero,6994 <__smakebuf_r+0x128>
    6918:	04810004 	movi	r18,1024
    691c:	10820014 	ori	r2,r2,2048
    6920:	8080030d 	sth	r2,12(r16)
    6924:	0027883a 	mov	r19,zero
    6928:	900b883a 	mov	r5,r18
    692c:	8809883a 	mov	r4,r17
    6930:	00014f00 	call	14f0 <_malloc_r>
    6934:	10002c26 	beq	r2,zero,69e8 <__smakebuf_r+0x17c>
    6938:	80c0030b 	ldhu	r3,12(r16)
    693c:	01000034 	movhi	r4,0
    6940:	21178b04 	addi	r4,r4,24108
    6944:	89000f15 	stw	r4,60(r17)
    6948:	18c02014 	ori	r3,r3,128
    694c:	80c0030d 	sth	r3,12(r16)
    6950:	80800015 	stw	r2,0(r16)
    6954:	80800415 	stw	r2,16(r16)
    6958:	84800515 	stw	r18,20(r16)
    695c:	98001a1e 	bne	r19,zero,69c8 <__smakebuf_r+0x15c>
    6960:	dfc01317 	ldw	ra,76(sp)
    6964:	dcc01217 	ldw	r19,72(sp)
    6968:	dc801117 	ldw	r18,68(sp)
    696c:	dc401017 	ldw	r17,64(sp)
    6970:	dc000f17 	ldw	r16,60(sp)
    6974:	dec01404 	addi	sp,sp,80
    6978:	f800283a 	ret
    697c:	288010c4 	addi	r2,r5,67
    6980:	28800015 	stw	r2,0(r5)
    6984:	28800415 	stw	r2,16(r5)
    6988:	00800044 	movi	r2,1
    698c:	28800515 	stw	r2,20(r5)
    6990:	f800283a 	ret
    6994:	04801004 	movi	r18,64
    6998:	003fe006 	br	691c <__alt_exception_stack_pointer+0xf800691c>
    699c:	81000a17 	ldw	r4,40(r16)
    69a0:	00c00034 	movhi	r3,0
    69a4:	18dfe004 	addi	r3,r3,32640
    69a8:	20ffc51e 	bne	r4,r3,68c0 <__alt_exception_stack_pointer+0xf80068c0>
    69ac:	8080030b 	ldhu	r2,12(r16)
    69b0:	04810004 	movi	r18,1024
    69b4:	84801315 	stw	r18,76(r16)
    69b8:	1484b03a 	or	r2,r2,r18
    69bc:	8080030d 	sth	r2,12(r16)
    69c0:	0027883a 	mov	r19,zero
    69c4:	003fd806 	br	6928 <__alt_exception_stack_pointer+0xf8006928>
    69c8:	8140038f 	ldh	r5,14(r16)
    69cc:	8809883a 	mov	r4,r17
    69d0:	000a2100 	call	a210 <_isatty_r>
    69d4:	103fe226 	beq	r2,zero,6960 <__alt_exception_stack_pointer+0xf8006960>
    69d8:	8080030b 	ldhu	r2,12(r16)
    69dc:	10800054 	ori	r2,r2,1
    69e0:	8080030d 	sth	r2,12(r16)
    69e4:	003fde06 	br	6960 <__alt_exception_stack_pointer+0xf8006960>
    69e8:	8080030b 	ldhu	r2,12(r16)
    69ec:	10c0800c 	andi	r3,r2,512
    69f0:	183fdb1e 	bne	r3,zero,6960 <__alt_exception_stack_pointer+0xf8006960>
    69f4:	10800094 	ori	r2,r2,2
    69f8:	80c010c4 	addi	r3,r16,67
    69fc:	8080030d 	sth	r2,12(r16)
    6a00:	00800044 	movi	r2,1
    6a04:	80c00015 	stw	r3,0(r16)
    6a08:	80c00415 	stw	r3,16(r16)
    6a0c:	80800515 	stw	r2,20(r16)
    6a10:	003fd306 	br	6960 <__alt_exception_stack_pointer+0xf8006960>
    6a14:	04810004 	movi	r18,1024
    6a18:	003fc306 	br	6928 <__alt_exception_stack_pointer+0xf8006928>
    6a1c:	0027883a 	mov	r19,zero
    6a20:	04810004 	movi	r18,1024
    6a24:	003fc006 	br	6928 <__alt_exception_stack_pointer+0xf8006928>

00006a28 <memchr>:
    6a28:	208000cc 	andi	r2,r4,3
    6a2c:	280f883a 	mov	r7,r5
    6a30:	10003426 	beq	r2,zero,6b04 <memchr+0xdc>
    6a34:	30bfffc4 	addi	r2,r6,-1
    6a38:	30001a26 	beq	r6,zero,6aa4 <memchr+0x7c>
    6a3c:	20c00003 	ldbu	r3,0(r4)
    6a40:	29803fcc 	andi	r6,r5,255
    6a44:	30c0051e 	bne	r6,r3,6a5c <memchr+0x34>
    6a48:	00001806 	br	6aac <memchr+0x84>
    6a4c:	10001526 	beq	r2,zero,6aa4 <memchr+0x7c>
    6a50:	20c00003 	ldbu	r3,0(r4)
    6a54:	10bfffc4 	addi	r2,r2,-1
    6a58:	30c01426 	beq	r6,r3,6aac <memchr+0x84>
    6a5c:	21000044 	addi	r4,r4,1
    6a60:	20c000cc 	andi	r3,r4,3
    6a64:	183ff91e 	bne	r3,zero,6a4c <__alt_exception_stack_pointer+0xf8006a4c>
    6a68:	020000c4 	movi	r8,3
    6a6c:	40801136 	bltu	r8,r2,6ab4 <memchr+0x8c>
    6a70:	10000c26 	beq	r2,zero,6aa4 <memchr+0x7c>
    6a74:	20c00003 	ldbu	r3,0(r4)
    6a78:	29403fcc 	andi	r5,r5,255
    6a7c:	28c00b26 	beq	r5,r3,6aac <memchr+0x84>
    6a80:	20c00044 	addi	r3,r4,1
    6a84:	39803fcc 	andi	r6,r7,255
    6a88:	2089883a 	add	r4,r4,r2
    6a8c:	00000306 	br	6a9c <memchr+0x74>
    6a90:	18c00044 	addi	r3,r3,1
    6a94:	197fffc3 	ldbu	r5,-1(r3)
    6a98:	31400526 	beq	r6,r5,6ab0 <memchr+0x88>
    6a9c:	1805883a 	mov	r2,r3
    6aa0:	20fffb1e 	bne	r4,r3,6a90 <__alt_exception_stack_pointer+0xf8006a90>
    6aa4:	0005883a 	mov	r2,zero
    6aa8:	f800283a 	ret
    6aac:	2005883a 	mov	r2,r4
    6ab0:	f800283a 	ret
    6ab4:	28c03fcc 	andi	r3,r5,255
    6ab8:	1812923a 	slli	r9,r3,8
    6abc:	02ffbff4 	movhi	r11,65279
    6ac0:	02a02074 	movhi	r10,32897
    6ac4:	48d2b03a 	or	r9,r9,r3
    6ac8:	4806943a 	slli	r3,r9,16
    6acc:	5affbfc4 	addi	r11,r11,-257
    6ad0:	52a02004 	addi	r10,r10,-32640
    6ad4:	48d2b03a 	or	r9,r9,r3
    6ad8:	20c00017 	ldw	r3,0(r4)
    6adc:	48c6f03a 	xor	r3,r9,r3
    6ae0:	1acd883a 	add	r6,r3,r11
    6ae4:	00c6303a 	nor	r3,zero,r3
    6ae8:	30c6703a 	and	r3,r6,r3
    6aec:	1a86703a 	and	r3,r3,r10
    6af0:	183fe01e 	bne	r3,zero,6a74 <__alt_exception_stack_pointer+0xf8006a74>
    6af4:	10bfff04 	addi	r2,r2,-4
    6af8:	21000104 	addi	r4,r4,4
    6afc:	40bff636 	bltu	r8,r2,6ad8 <__alt_exception_stack_pointer+0xf8006ad8>
    6b00:	003fdb06 	br	6a70 <__alt_exception_stack_pointer+0xf8006a70>
    6b04:	3005883a 	mov	r2,r6
    6b08:	003fd706 	br	6a68 <__alt_exception_stack_pointer+0xf8006a68>

00006b0c <memcpy>:
    6b0c:	defffd04 	addi	sp,sp,-12
    6b10:	dfc00215 	stw	ra,8(sp)
    6b14:	dc400115 	stw	r17,4(sp)
    6b18:	dc000015 	stw	r16,0(sp)
    6b1c:	00c003c4 	movi	r3,15
    6b20:	2005883a 	mov	r2,r4
    6b24:	1980452e 	bgeu	r3,r6,6c3c <memcpy+0x130>
    6b28:	2906b03a 	or	r3,r5,r4
    6b2c:	18c000cc 	andi	r3,r3,3
    6b30:	1800441e 	bne	r3,zero,6c44 <memcpy+0x138>
    6b34:	347ffc04 	addi	r17,r6,-16
    6b38:	8822d13a 	srli	r17,r17,4
    6b3c:	28c00104 	addi	r3,r5,4
    6b40:	23400104 	addi	r13,r4,4
    6b44:	8820913a 	slli	r16,r17,4
    6b48:	2b000204 	addi	r12,r5,8
    6b4c:	22c00204 	addi	r11,r4,8
    6b50:	84000504 	addi	r16,r16,20
    6b54:	2a800304 	addi	r10,r5,12
    6b58:	22400304 	addi	r9,r4,12
    6b5c:	2c21883a 	add	r16,r5,r16
    6b60:	2811883a 	mov	r8,r5
    6b64:	200f883a 	mov	r7,r4
    6b68:	41000017 	ldw	r4,0(r8)
    6b6c:	1fc00017 	ldw	ra,0(r3)
    6b70:	63c00017 	ldw	r15,0(r12)
    6b74:	39000015 	stw	r4,0(r7)
    6b78:	53800017 	ldw	r14,0(r10)
    6b7c:	6fc00015 	stw	ra,0(r13)
    6b80:	5bc00015 	stw	r15,0(r11)
    6b84:	4b800015 	stw	r14,0(r9)
    6b88:	18c00404 	addi	r3,r3,16
    6b8c:	39c00404 	addi	r7,r7,16
    6b90:	42000404 	addi	r8,r8,16
    6b94:	6b400404 	addi	r13,r13,16
    6b98:	63000404 	addi	r12,r12,16
    6b9c:	5ac00404 	addi	r11,r11,16
    6ba0:	52800404 	addi	r10,r10,16
    6ba4:	4a400404 	addi	r9,r9,16
    6ba8:	1c3fef1e 	bne	r3,r16,6b68 <__alt_exception_stack_pointer+0xf8006b68>
    6bac:	89c00044 	addi	r7,r17,1
    6bb0:	380e913a 	slli	r7,r7,4
    6bb4:	310003cc 	andi	r4,r6,15
    6bb8:	02c000c4 	movi	r11,3
    6bbc:	11c7883a 	add	r3,r2,r7
    6bc0:	29cb883a 	add	r5,r5,r7
    6bc4:	5900212e 	bgeu	r11,r4,6c4c <memcpy+0x140>
    6bc8:	1813883a 	mov	r9,r3
    6bcc:	2811883a 	mov	r8,r5
    6bd0:	200f883a 	mov	r7,r4
    6bd4:	42800017 	ldw	r10,0(r8)
    6bd8:	4a400104 	addi	r9,r9,4
    6bdc:	39ffff04 	addi	r7,r7,-4
    6be0:	4abfff15 	stw	r10,-4(r9)
    6be4:	42000104 	addi	r8,r8,4
    6be8:	59fffa36 	bltu	r11,r7,6bd4 <__alt_exception_stack_pointer+0xf8006bd4>
    6bec:	213fff04 	addi	r4,r4,-4
    6bf0:	2008d0ba 	srli	r4,r4,2
    6bf4:	318000cc 	andi	r6,r6,3
    6bf8:	21000044 	addi	r4,r4,1
    6bfc:	2109883a 	add	r4,r4,r4
    6c00:	2109883a 	add	r4,r4,r4
    6c04:	1907883a 	add	r3,r3,r4
    6c08:	290b883a 	add	r5,r5,r4
    6c0c:	30000626 	beq	r6,zero,6c28 <memcpy+0x11c>
    6c10:	198d883a 	add	r6,r3,r6
    6c14:	29c00003 	ldbu	r7,0(r5)
    6c18:	18c00044 	addi	r3,r3,1
    6c1c:	29400044 	addi	r5,r5,1
    6c20:	19ffffc5 	stb	r7,-1(r3)
    6c24:	19bffb1e 	bne	r3,r6,6c14 <__alt_exception_stack_pointer+0xf8006c14>
    6c28:	dfc00217 	ldw	ra,8(sp)
    6c2c:	dc400117 	ldw	r17,4(sp)
    6c30:	dc000017 	ldw	r16,0(sp)
    6c34:	dec00304 	addi	sp,sp,12
    6c38:	f800283a 	ret
    6c3c:	2007883a 	mov	r3,r4
    6c40:	003ff206 	br	6c0c <__alt_exception_stack_pointer+0xf8006c0c>
    6c44:	2007883a 	mov	r3,r4
    6c48:	003ff106 	br	6c10 <__alt_exception_stack_pointer+0xf8006c10>
    6c4c:	200d883a 	mov	r6,r4
    6c50:	003fee06 	br	6c0c <__alt_exception_stack_pointer+0xf8006c0c>

00006c54 <memset>:
    6c54:	20c000cc 	andi	r3,r4,3
    6c58:	2005883a 	mov	r2,r4
    6c5c:	18004426 	beq	r3,zero,6d70 <memset+0x11c>
    6c60:	31ffffc4 	addi	r7,r6,-1
    6c64:	30004026 	beq	r6,zero,6d68 <memset+0x114>
    6c68:	2813883a 	mov	r9,r5
    6c6c:	200d883a 	mov	r6,r4
    6c70:	2007883a 	mov	r3,r4
    6c74:	00000406 	br	6c88 <memset+0x34>
    6c78:	3a3fffc4 	addi	r8,r7,-1
    6c7c:	31800044 	addi	r6,r6,1
    6c80:	38003926 	beq	r7,zero,6d68 <memset+0x114>
    6c84:	400f883a 	mov	r7,r8
    6c88:	18c00044 	addi	r3,r3,1
    6c8c:	32400005 	stb	r9,0(r6)
    6c90:	1a0000cc 	andi	r8,r3,3
    6c94:	403ff81e 	bne	r8,zero,6c78 <__alt_exception_stack_pointer+0xf8006c78>
    6c98:	010000c4 	movi	r4,3
    6c9c:	21c02d2e 	bgeu	r4,r7,6d54 <memset+0x100>
    6ca0:	29003fcc 	andi	r4,r5,255
    6ca4:	200c923a 	slli	r6,r4,8
    6ca8:	3108b03a 	or	r4,r6,r4
    6cac:	200c943a 	slli	r6,r4,16
    6cb0:	218cb03a 	or	r6,r4,r6
    6cb4:	010003c4 	movi	r4,15
    6cb8:	21c0182e 	bgeu	r4,r7,6d1c <memset+0xc8>
    6cbc:	3b3ffc04 	addi	r12,r7,-16
    6cc0:	6018d13a 	srli	r12,r12,4
    6cc4:	1a000104 	addi	r8,r3,4
    6cc8:	1ac00204 	addi	r11,r3,8
    6ccc:	6008913a 	slli	r4,r12,4
    6cd0:	1a800304 	addi	r10,r3,12
    6cd4:	1813883a 	mov	r9,r3
    6cd8:	21000504 	addi	r4,r4,20
    6cdc:	1909883a 	add	r4,r3,r4
    6ce0:	49800015 	stw	r6,0(r9)
    6ce4:	41800015 	stw	r6,0(r8)
    6ce8:	59800015 	stw	r6,0(r11)
    6cec:	51800015 	stw	r6,0(r10)
    6cf0:	42000404 	addi	r8,r8,16
    6cf4:	4a400404 	addi	r9,r9,16
    6cf8:	5ac00404 	addi	r11,r11,16
    6cfc:	52800404 	addi	r10,r10,16
    6d00:	413ff71e 	bne	r8,r4,6ce0 <__alt_exception_stack_pointer+0xf8006ce0>
    6d04:	63000044 	addi	r12,r12,1
    6d08:	6018913a 	slli	r12,r12,4
    6d0c:	39c003cc 	andi	r7,r7,15
    6d10:	010000c4 	movi	r4,3
    6d14:	1b07883a 	add	r3,r3,r12
    6d18:	21c00e2e 	bgeu	r4,r7,6d54 <memset+0x100>
    6d1c:	1813883a 	mov	r9,r3
    6d20:	3811883a 	mov	r8,r7
    6d24:	010000c4 	movi	r4,3
    6d28:	49800015 	stw	r6,0(r9)
    6d2c:	423fff04 	addi	r8,r8,-4
    6d30:	4a400104 	addi	r9,r9,4
    6d34:	223ffc36 	bltu	r4,r8,6d28 <__alt_exception_stack_pointer+0xf8006d28>
    6d38:	393fff04 	addi	r4,r7,-4
    6d3c:	2008d0ba 	srli	r4,r4,2
    6d40:	39c000cc 	andi	r7,r7,3
    6d44:	21000044 	addi	r4,r4,1
    6d48:	2109883a 	add	r4,r4,r4
    6d4c:	2109883a 	add	r4,r4,r4
    6d50:	1907883a 	add	r3,r3,r4
    6d54:	38000526 	beq	r7,zero,6d6c <memset+0x118>
    6d58:	19cf883a 	add	r7,r3,r7
    6d5c:	19400005 	stb	r5,0(r3)
    6d60:	18c00044 	addi	r3,r3,1
    6d64:	38fffd1e 	bne	r7,r3,6d5c <__alt_exception_stack_pointer+0xf8006d5c>
    6d68:	f800283a 	ret
    6d6c:	f800283a 	ret
    6d70:	2007883a 	mov	r3,r4
    6d74:	300f883a 	mov	r7,r6
    6d78:	003fc706 	br	6c98 <__alt_exception_stack_pointer+0xf8006c98>

00006d7c <_Balloc>:
    6d7c:	20801317 	ldw	r2,76(r4)
    6d80:	defffc04 	addi	sp,sp,-16
    6d84:	dc400115 	stw	r17,4(sp)
    6d88:	dc000015 	stw	r16,0(sp)
    6d8c:	dfc00315 	stw	ra,12(sp)
    6d90:	dc800215 	stw	r18,8(sp)
    6d94:	2023883a 	mov	r17,r4
    6d98:	2821883a 	mov	r16,r5
    6d9c:	10000f26 	beq	r2,zero,6ddc <_Balloc+0x60>
    6da0:	8407883a 	add	r3,r16,r16
    6da4:	18c7883a 	add	r3,r3,r3
    6da8:	10c7883a 	add	r3,r2,r3
    6dac:	18800017 	ldw	r2,0(r3)
    6db0:	10001126 	beq	r2,zero,6df8 <_Balloc+0x7c>
    6db4:	11000017 	ldw	r4,0(r2)
    6db8:	19000015 	stw	r4,0(r3)
    6dbc:	10000415 	stw	zero,16(r2)
    6dc0:	10000315 	stw	zero,12(r2)
    6dc4:	dfc00317 	ldw	ra,12(sp)
    6dc8:	dc800217 	ldw	r18,8(sp)
    6dcc:	dc400117 	ldw	r17,4(sp)
    6dd0:	dc000017 	ldw	r16,0(sp)
    6dd4:	dec00404 	addi	sp,sp,16
    6dd8:	f800283a 	ret
    6ddc:	01800844 	movi	r6,33
    6de0:	01400104 	movi	r5,4
    6de4:	00099040 	call	9904 <_calloc_r>
    6de8:	88801315 	stw	r2,76(r17)
    6dec:	103fec1e 	bne	r2,zero,6da0 <__alt_exception_stack_pointer+0xf8006da0>
    6df0:	0005883a 	mov	r2,zero
    6df4:	003ff306 	br	6dc4 <__alt_exception_stack_pointer+0xf8006dc4>
    6df8:	01400044 	movi	r5,1
    6dfc:	2c24983a 	sll	r18,r5,r16
    6e00:	8809883a 	mov	r4,r17
    6e04:	91800144 	addi	r6,r18,5
    6e08:	318d883a 	add	r6,r6,r6
    6e0c:	318d883a 	add	r6,r6,r6
    6e10:	00099040 	call	9904 <_calloc_r>
    6e14:	103ff626 	beq	r2,zero,6df0 <__alt_exception_stack_pointer+0xf8006df0>
    6e18:	14000115 	stw	r16,4(r2)
    6e1c:	14800215 	stw	r18,8(r2)
    6e20:	003fe606 	br	6dbc <__alt_exception_stack_pointer+0xf8006dbc>

00006e24 <_Bfree>:
    6e24:	28000826 	beq	r5,zero,6e48 <_Bfree+0x24>
    6e28:	28c00117 	ldw	r3,4(r5)
    6e2c:	20801317 	ldw	r2,76(r4)
    6e30:	18c7883a 	add	r3,r3,r3
    6e34:	18c7883a 	add	r3,r3,r3
    6e38:	10c5883a 	add	r2,r2,r3
    6e3c:	10c00017 	ldw	r3,0(r2)
    6e40:	28c00015 	stw	r3,0(r5)
    6e44:	11400015 	stw	r5,0(r2)
    6e48:	f800283a 	ret

00006e4c <__multadd>:
    6e4c:	defff704 	addi	sp,sp,-36
    6e50:	dc800215 	stw	r18,8(sp)
    6e54:	2c800417 	ldw	r18,16(r5)
    6e58:	dd800615 	stw	r22,24(sp)
    6e5c:	dd400515 	stw	r21,20(sp)
    6e60:	dd000415 	stw	r20,16(sp)
    6e64:	dcc00315 	stw	r19,12(sp)
    6e68:	dc400115 	stw	r17,4(sp)
    6e6c:	dc000015 	stw	r16,0(sp)
    6e70:	dfc00815 	stw	ra,32(sp)
    6e74:	ddc00715 	stw	r23,28(sp)
    6e78:	2827883a 	mov	r19,r5
    6e7c:	2029883a 	mov	r20,r4
    6e80:	3023883a 	mov	r17,r6
    6e84:	3821883a 	mov	r16,r7
    6e88:	2d400504 	addi	r21,r5,20
    6e8c:	002d883a 	mov	r22,zero
    6e90:	adc00017 	ldw	r23,0(r21)
    6e94:	880b883a 	mov	r5,r17
    6e98:	ad400104 	addi	r21,r21,4
    6e9c:	b93fffcc 	andi	r4,r23,65535
    6ea0:	00009780 	call	978 <__mulsi3>
    6ea4:	b808d43a 	srli	r4,r23,16
    6ea8:	880b883a 	mov	r5,r17
    6eac:	1421883a 	add	r16,r2,r16
    6eb0:	00009780 	call	978 <__mulsi3>
    6eb4:	800ed43a 	srli	r7,r16,16
    6eb8:	80ffffcc 	andi	r3,r16,65535
    6ebc:	b5800044 	addi	r22,r22,1
    6ec0:	11c5883a 	add	r2,r2,r7
    6ec4:	100e943a 	slli	r7,r2,16
    6ec8:	1020d43a 	srli	r16,r2,16
    6ecc:	38c7883a 	add	r3,r7,r3
    6ed0:	a8ffff15 	stw	r3,-4(r21)
    6ed4:	b4bfee16 	blt	r22,r18,6e90 <__alt_exception_stack_pointer+0xf8006e90>
    6ed8:	80000926 	beq	r16,zero,6f00 <__multadd+0xb4>
    6edc:	98800217 	ldw	r2,8(r19)
    6ee0:	9080130e 	bge	r18,r2,6f30 <__multadd+0xe4>
    6ee4:	90800144 	addi	r2,r18,5
    6ee8:	1085883a 	add	r2,r2,r2
    6eec:	1085883a 	add	r2,r2,r2
    6ef0:	9885883a 	add	r2,r19,r2
    6ef4:	14000015 	stw	r16,0(r2)
    6ef8:	94800044 	addi	r18,r18,1
    6efc:	9c800415 	stw	r18,16(r19)
    6f00:	9805883a 	mov	r2,r19
    6f04:	dfc00817 	ldw	ra,32(sp)
    6f08:	ddc00717 	ldw	r23,28(sp)
    6f0c:	dd800617 	ldw	r22,24(sp)
    6f10:	dd400517 	ldw	r21,20(sp)
    6f14:	dd000417 	ldw	r20,16(sp)
    6f18:	dcc00317 	ldw	r19,12(sp)
    6f1c:	dc800217 	ldw	r18,8(sp)
    6f20:	dc400117 	ldw	r17,4(sp)
    6f24:	dc000017 	ldw	r16,0(sp)
    6f28:	dec00904 	addi	sp,sp,36
    6f2c:	f800283a 	ret
    6f30:	99400117 	ldw	r5,4(r19)
    6f34:	a009883a 	mov	r4,r20
    6f38:	29400044 	addi	r5,r5,1
    6f3c:	0006d7c0 	call	6d7c <_Balloc>
    6f40:	99800417 	ldw	r6,16(r19)
    6f44:	99400304 	addi	r5,r19,12
    6f48:	11000304 	addi	r4,r2,12
    6f4c:	31800084 	addi	r6,r6,2
    6f50:	318d883a 	add	r6,r6,r6
    6f54:	318d883a 	add	r6,r6,r6
    6f58:	1023883a 	mov	r17,r2
    6f5c:	0006b0c0 	call	6b0c <memcpy>
    6f60:	98000a26 	beq	r19,zero,6f8c <__multadd+0x140>
    6f64:	98c00117 	ldw	r3,4(r19)
    6f68:	a0801317 	ldw	r2,76(r20)
    6f6c:	18c7883a 	add	r3,r3,r3
    6f70:	18c7883a 	add	r3,r3,r3
    6f74:	10c5883a 	add	r2,r2,r3
    6f78:	10c00017 	ldw	r3,0(r2)
    6f7c:	98c00015 	stw	r3,0(r19)
    6f80:	14c00015 	stw	r19,0(r2)
    6f84:	8827883a 	mov	r19,r17
    6f88:	003fd606 	br	6ee4 <__alt_exception_stack_pointer+0xf8006ee4>
    6f8c:	8827883a 	mov	r19,r17
    6f90:	003fd406 	br	6ee4 <__alt_exception_stack_pointer+0xf8006ee4>

00006f94 <__s2b>:
    6f94:	defff904 	addi	sp,sp,-28
    6f98:	dc400115 	stw	r17,4(sp)
    6f9c:	dc000015 	stw	r16,0(sp)
    6fa0:	2023883a 	mov	r17,r4
    6fa4:	2821883a 	mov	r16,r5
    6fa8:	39000204 	addi	r4,r7,8
    6fac:	01400244 	movi	r5,9
    6fb0:	dcc00315 	stw	r19,12(sp)
    6fb4:	dc800215 	stw	r18,8(sp)
    6fb8:	dfc00615 	stw	ra,24(sp)
    6fbc:	dd400515 	stw	r21,20(sp)
    6fc0:	dd000415 	stw	r20,16(sp)
    6fc4:	3825883a 	mov	r18,r7
    6fc8:	3027883a 	mov	r19,r6
    6fcc:	00007c40 	call	7c4 <__divsi3>
    6fd0:	00c00044 	movi	r3,1
    6fd4:	000b883a 	mov	r5,zero
    6fd8:	1880030e 	bge	r3,r2,6fe8 <__s2b+0x54>
    6fdc:	18c7883a 	add	r3,r3,r3
    6fe0:	29400044 	addi	r5,r5,1
    6fe4:	18bffd16 	blt	r3,r2,6fdc <__alt_exception_stack_pointer+0xf8006fdc>
    6fe8:	8809883a 	mov	r4,r17
    6fec:	0006d7c0 	call	6d7c <_Balloc>
    6ff0:	d8c00717 	ldw	r3,28(sp)
    6ff4:	10c00515 	stw	r3,20(r2)
    6ff8:	00c00044 	movi	r3,1
    6ffc:	10c00415 	stw	r3,16(r2)
    7000:	00c00244 	movi	r3,9
    7004:	1cc0210e 	bge	r3,r19,708c <__s2b+0xf8>
    7008:	80eb883a 	add	r21,r16,r3
    700c:	a829883a 	mov	r20,r21
    7010:	84e1883a 	add	r16,r16,r19
    7014:	a1c00007 	ldb	r7,0(r20)
    7018:	01800284 	movi	r6,10
    701c:	a5000044 	addi	r20,r20,1
    7020:	100b883a 	mov	r5,r2
    7024:	39fff404 	addi	r7,r7,-48
    7028:	8809883a 	mov	r4,r17
    702c:	0006e4c0 	call	6e4c <__multadd>
    7030:	a43ff81e 	bne	r20,r16,7014 <__alt_exception_stack_pointer+0xf8007014>
    7034:	ace1883a 	add	r16,r21,r19
    7038:	843ffe04 	addi	r16,r16,-8
    703c:	9c800a0e 	bge	r19,r18,7068 <__s2b+0xd4>
    7040:	94e5c83a 	sub	r18,r18,r19
    7044:	84a5883a 	add	r18,r16,r18
    7048:	81c00007 	ldb	r7,0(r16)
    704c:	01800284 	movi	r6,10
    7050:	84000044 	addi	r16,r16,1
    7054:	100b883a 	mov	r5,r2
    7058:	39fff404 	addi	r7,r7,-48
    705c:	8809883a 	mov	r4,r17
    7060:	0006e4c0 	call	6e4c <__multadd>
    7064:	84bff81e 	bne	r16,r18,7048 <__alt_exception_stack_pointer+0xf8007048>
    7068:	dfc00617 	ldw	ra,24(sp)
    706c:	dd400517 	ldw	r21,20(sp)
    7070:	dd000417 	ldw	r20,16(sp)
    7074:	dcc00317 	ldw	r19,12(sp)
    7078:	dc800217 	ldw	r18,8(sp)
    707c:	dc400117 	ldw	r17,4(sp)
    7080:	dc000017 	ldw	r16,0(sp)
    7084:	dec00704 	addi	sp,sp,28
    7088:	f800283a 	ret
    708c:	84000284 	addi	r16,r16,10
    7090:	1827883a 	mov	r19,r3
    7094:	003fe906 	br	703c <__alt_exception_stack_pointer+0xf800703c>

00007098 <__hi0bits>:
    7098:	20bfffec 	andhi	r2,r4,65535
    709c:	1000141e 	bne	r2,zero,70f0 <__hi0bits+0x58>
    70a0:	2008943a 	slli	r4,r4,16
    70a4:	00800404 	movi	r2,16
    70a8:	20ffc02c 	andhi	r3,r4,65280
    70ac:	1800021e 	bne	r3,zero,70b8 <__hi0bits+0x20>
    70b0:	2008923a 	slli	r4,r4,8
    70b4:	10800204 	addi	r2,r2,8
    70b8:	20fc002c 	andhi	r3,r4,61440
    70bc:	1800021e 	bne	r3,zero,70c8 <__hi0bits+0x30>
    70c0:	2008913a 	slli	r4,r4,4
    70c4:	10800104 	addi	r2,r2,4
    70c8:	20f0002c 	andhi	r3,r4,49152
    70cc:	1800031e 	bne	r3,zero,70dc <__hi0bits+0x44>
    70d0:	2109883a 	add	r4,r4,r4
    70d4:	10800084 	addi	r2,r2,2
    70d8:	2109883a 	add	r4,r4,r4
    70dc:	20000316 	blt	r4,zero,70ec <__hi0bits+0x54>
    70e0:	2110002c 	andhi	r4,r4,16384
    70e4:	2000041e 	bne	r4,zero,70f8 <__hi0bits+0x60>
    70e8:	00800804 	movi	r2,32
    70ec:	f800283a 	ret
    70f0:	0005883a 	mov	r2,zero
    70f4:	003fec06 	br	70a8 <__alt_exception_stack_pointer+0xf80070a8>
    70f8:	10800044 	addi	r2,r2,1
    70fc:	f800283a 	ret

00007100 <__lo0bits>:
    7100:	20c00017 	ldw	r3,0(r4)
    7104:	188001cc 	andi	r2,r3,7
    7108:	10000826 	beq	r2,zero,712c <__lo0bits+0x2c>
    710c:	1880004c 	andi	r2,r3,1
    7110:	1000211e 	bne	r2,zero,7198 <__lo0bits+0x98>
    7114:	1880008c 	andi	r2,r3,2
    7118:	1000211e 	bne	r2,zero,71a0 <__lo0bits+0xa0>
    711c:	1806d0ba 	srli	r3,r3,2
    7120:	00800084 	movi	r2,2
    7124:	20c00015 	stw	r3,0(r4)
    7128:	f800283a 	ret
    712c:	18bfffcc 	andi	r2,r3,65535
    7130:	10001326 	beq	r2,zero,7180 <__lo0bits+0x80>
    7134:	0005883a 	mov	r2,zero
    7138:	19403fcc 	andi	r5,r3,255
    713c:	2800021e 	bne	r5,zero,7148 <__lo0bits+0x48>
    7140:	1806d23a 	srli	r3,r3,8
    7144:	10800204 	addi	r2,r2,8
    7148:	194003cc 	andi	r5,r3,15
    714c:	2800021e 	bne	r5,zero,7158 <__lo0bits+0x58>
    7150:	1806d13a 	srli	r3,r3,4
    7154:	10800104 	addi	r2,r2,4
    7158:	194000cc 	andi	r5,r3,3
    715c:	2800021e 	bne	r5,zero,7168 <__lo0bits+0x68>
    7160:	1806d0ba 	srli	r3,r3,2
    7164:	10800084 	addi	r2,r2,2
    7168:	1940004c 	andi	r5,r3,1
    716c:	2800081e 	bne	r5,zero,7190 <__lo0bits+0x90>
    7170:	1806d07a 	srli	r3,r3,1
    7174:	1800051e 	bne	r3,zero,718c <__lo0bits+0x8c>
    7178:	00800804 	movi	r2,32
    717c:	f800283a 	ret
    7180:	1806d43a 	srli	r3,r3,16
    7184:	00800404 	movi	r2,16
    7188:	003feb06 	br	7138 <__alt_exception_stack_pointer+0xf8007138>
    718c:	10800044 	addi	r2,r2,1
    7190:	20c00015 	stw	r3,0(r4)
    7194:	f800283a 	ret
    7198:	0005883a 	mov	r2,zero
    719c:	f800283a 	ret
    71a0:	1806d07a 	srli	r3,r3,1
    71a4:	00800044 	movi	r2,1
    71a8:	20c00015 	stw	r3,0(r4)
    71ac:	f800283a 	ret

000071b0 <__i2b>:
    71b0:	defffd04 	addi	sp,sp,-12
    71b4:	dc000015 	stw	r16,0(sp)
    71b8:	04000044 	movi	r16,1
    71bc:	dc400115 	stw	r17,4(sp)
    71c0:	2823883a 	mov	r17,r5
    71c4:	800b883a 	mov	r5,r16
    71c8:	dfc00215 	stw	ra,8(sp)
    71cc:	0006d7c0 	call	6d7c <_Balloc>
    71d0:	14400515 	stw	r17,20(r2)
    71d4:	14000415 	stw	r16,16(r2)
    71d8:	dfc00217 	ldw	ra,8(sp)
    71dc:	dc400117 	ldw	r17,4(sp)
    71e0:	dc000017 	ldw	r16,0(sp)
    71e4:	dec00304 	addi	sp,sp,12
    71e8:	f800283a 	ret

000071ec <__multiply>:
    71ec:	deffef04 	addi	sp,sp,-68
    71f0:	dc400815 	stw	r17,32(sp)
    71f4:	dc000715 	stw	r16,28(sp)
    71f8:	34400417 	ldw	r17,16(r6)
    71fc:	2c000417 	ldw	r16,16(r5)
    7200:	dd800d15 	stw	r22,52(sp)
    7204:	dc800915 	stw	r18,36(sp)
    7208:	dfc01015 	stw	ra,64(sp)
    720c:	df000f15 	stw	fp,60(sp)
    7210:	ddc00e15 	stw	r23,56(sp)
    7214:	dd400c15 	stw	r21,48(sp)
    7218:	dd000b15 	stw	r20,44(sp)
    721c:	dcc00a15 	stw	r19,40(sp)
    7220:	2825883a 	mov	r18,r5
    7224:	302d883a 	mov	r22,r6
    7228:	8440050e 	bge	r16,r17,7240 <__multiply+0x54>
    722c:	8007883a 	mov	r3,r16
    7230:	3025883a 	mov	r18,r6
    7234:	8821883a 	mov	r16,r17
    7238:	282d883a 	mov	r22,r5
    723c:	1823883a 	mov	r17,r3
    7240:	90800217 	ldw	r2,8(r18)
    7244:	8447883a 	add	r3,r16,r17
    7248:	d8c00215 	stw	r3,8(sp)
    724c:	91400117 	ldw	r5,4(r18)
    7250:	10c0010e 	bge	r2,r3,7258 <__multiply+0x6c>
    7254:	29400044 	addi	r5,r5,1
    7258:	0006d7c0 	call	6d7c <_Balloc>
    725c:	d8c00217 	ldw	r3,8(sp)
    7260:	d8800615 	stw	r2,24(sp)
    7264:	18eb883a 	add	r21,r3,r3
    7268:	ad6b883a 	add	r21,r21,r21
    726c:	10c00504 	addi	r3,r2,20
    7270:	1d6b883a 	add	r21,r3,r21
    7274:	d8c00115 	stw	r3,4(sp)
    7278:	dd400315 	stw	r21,12(sp)
    727c:	1805883a 	mov	r2,r3
    7280:	1d40042e 	bgeu	r3,r21,7294 <__multiply+0xa8>
    7284:	d8c00317 	ldw	r3,12(sp)
    7288:	10000015 	stw	zero,0(r2)
    728c:	10800104 	addi	r2,r2,4
    7290:	10fffc36 	bltu	r2,r3,7284 <__alt_exception_stack_pointer+0xf8007284>
    7294:	8c63883a 	add	r17,r17,r17
    7298:	b5800504 	addi	r22,r22,20
    729c:	8c63883a 	add	r17,r17,r17
    72a0:	94800504 	addi	r18,r18,20
    72a4:	8421883a 	add	r16,r16,r16
    72a8:	b463883a 	add	r17,r22,r17
    72ac:	8421883a 	add	r16,r16,r16
    72b0:	dd800015 	stw	r22,0(sp)
    72b4:	dc800415 	stw	r18,16(sp)
    72b8:	dc400515 	stw	r17,20(sp)
    72bc:	9429883a 	add	r20,r18,r16
    72c0:	b4404f2e 	bgeu	r22,r17,7400 <__multiply+0x214>
    72c4:	d8c00017 	ldw	r3,0(sp)
    72c8:	1c800017 	ldw	r18,0(r3)
    72cc:	947fffcc 	andi	r17,r18,65535
    72d0:	88001e26 	beq	r17,zero,734c <__multiply+0x160>
    72d4:	dd800117 	ldw	r22,4(sp)
    72d8:	dd400417 	ldw	r21,16(sp)
    72dc:	0027883a 	mov	r19,zero
    72e0:	ac800017 	ldw	r18,0(r21)
    72e4:	b4000017 	ldw	r16,0(r22)
    72e8:	880b883a 	mov	r5,r17
    72ec:	913fffcc 	andi	r4,r18,65535
    72f0:	00009780 	call	978 <__mulsi3>
    72f4:	9008d43a 	srli	r4,r18,16
    72f8:	84bfffcc 	andi	r18,r16,65535
    72fc:	1485883a 	add	r2,r2,r18
    7300:	14e5883a 	add	r18,r2,r19
    7304:	8020d43a 	srli	r16,r16,16
    7308:	9026d43a 	srli	r19,r18,16
    730c:	880b883a 	mov	r5,r17
    7310:	00009780 	call	978 <__mulsi3>
    7314:	1405883a 	add	r2,r2,r16
    7318:	14e1883a 	add	r16,r2,r19
    731c:	90ffffcc 	andi	r3,r18,65535
    7320:	8024943a 	slli	r18,r16,16
    7324:	ad400104 	addi	r21,r21,4
    7328:	b005883a 	mov	r2,r22
    732c:	90c6b03a 	or	r3,r18,r3
    7330:	b0c00015 	stw	r3,0(r22)
    7334:	8026d43a 	srli	r19,r16,16
    7338:	b5800104 	addi	r22,r22,4
    733c:	ad3fe836 	bltu	r21,r20,72e0 <__alt_exception_stack_pointer+0xf80072e0>
    7340:	d8c00017 	ldw	r3,0(sp)
    7344:	14c00115 	stw	r19,4(r2)
    7348:	1c800017 	ldw	r18,0(r3)
    734c:	9024d43a 	srli	r18,r18,16
    7350:	90002226 	beq	r18,zero,73dc <__multiply+0x1f0>
    7354:	d8c00117 	ldw	r3,4(sp)
    7358:	dd800417 	ldw	r22,16(sp)
    735c:	002f883a 	mov	r23,zero
    7360:	1f000017 	ldw	fp,0(r3)
    7364:	1823883a 	mov	r17,r3
    7368:	182b883a 	mov	r21,r3
    736c:	e021883a 	mov	r16,fp
    7370:	00000106 	br	7378 <__multiply+0x18c>
    7374:	982b883a 	mov	r21,r19
    7378:	b100000b 	ldhu	r4,0(r22)
    737c:	8020d43a 	srli	r16,r16,16
    7380:	900b883a 	mov	r5,r18
    7384:	00009780 	call	978 <__mulsi3>
    7388:	1405883a 	add	r2,r2,r16
    738c:	15ef883a 	add	r23,r2,r23
    7390:	b804943a 	slli	r2,r23,16
    7394:	e0ffffcc 	andi	r3,fp,65535
    7398:	8c400104 	addi	r17,r17,4
    739c:	10c6b03a 	or	r3,r2,r3
    73a0:	88ffff15 	stw	r3,-4(r17)
    73a4:	b5800104 	addi	r22,r22,4
    73a8:	b13fff17 	ldw	r4,-4(r22)
    73ac:	acc00104 	addi	r19,r21,4
    73b0:	900b883a 	mov	r5,r18
    73b4:	2008d43a 	srli	r4,r4,16
    73b8:	9c000017 	ldw	r16,0(r19)
    73bc:	00009780 	call	978 <__mulsi3>
    73c0:	b806d43a 	srli	r3,r23,16
    73c4:	813fffcc 	andi	r4,r16,65535
    73c8:	1105883a 	add	r2,r2,r4
    73cc:	10f9883a 	add	fp,r2,r3
    73d0:	e02ed43a 	srli	r23,fp,16
    73d4:	b53fe736 	bltu	r22,r20,7374 <__alt_exception_stack_pointer+0xf8007374>
    73d8:	af000115 	stw	fp,4(r21)
    73dc:	d8c00017 	ldw	r3,0(sp)
    73e0:	d9000517 	ldw	r4,20(sp)
    73e4:	18c00104 	addi	r3,r3,4
    73e8:	d8c00015 	stw	r3,0(sp)
    73ec:	d8c00117 	ldw	r3,4(sp)
    73f0:	18c00104 	addi	r3,r3,4
    73f4:	d8c00115 	stw	r3,4(sp)
    73f8:	d8c00017 	ldw	r3,0(sp)
    73fc:	193fb136 	bltu	r3,r4,72c4 <__alt_exception_stack_pointer+0xf80072c4>
    7400:	d8c00217 	ldw	r3,8(sp)
    7404:	00c00c0e 	bge	zero,r3,7438 <__multiply+0x24c>
    7408:	d8c00317 	ldw	r3,12(sp)
    740c:	18bfff17 	ldw	r2,-4(r3)
    7410:	1d7fff04 	addi	r21,r3,-4
    7414:	10000326 	beq	r2,zero,7424 <__multiply+0x238>
    7418:	00000706 	br	7438 <__multiply+0x24c>
    741c:	a8800017 	ldw	r2,0(r21)
    7420:	1000051e 	bne	r2,zero,7438 <__multiply+0x24c>
    7424:	d8c00217 	ldw	r3,8(sp)
    7428:	ad7fff04 	addi	r21,r21,-4
    742c:	18ffffc4 	addi	r3,r3,-1
    7430:	d8c00215 	stw	r3,8(sp)
    7434:	183ff91e 	bne	r3,zero,741c <__alt_exception_stack_pointer+0xf800741c>
    7438:	d8c00617 	ldw	r3,24(sp)
    743c:	d9000217 	ldw	r4,8(sp)
    7440:	1805883a 	mov	r2,r3
    7444:	19000415 	stw	r4,16(r3)
    7448:	dfc01017 	ldw	ra,64(sp)
    744c:	df000f17 	ldw	fp,60(sp)
    7450:	ddc00e17 	ldw	r23,56(sp)
    7454:	dd800d17 	ldw	r22,52(sp)
    7458:	dd400c17 	ldw	r21,48(sp)
    745c:	dd000b17 	ldw	r20,44(sp)
    7460:	dcc00a17 	ldw	r19,40(sp)
    7464:	dc800917 	ldw	r18,36(sp)
    7468:	dc400817 	ldw	r17,32(sp)
    746c:	dc000717 	ldw	r16,28(sp)
    7470:	dec01104 	addi	sp,sp,68
    7474:	f800283a 	ret

00007478 <__pow5mult>:
    7478:	defffa04 	addi	sp,sp,-24
    747c:	dcc00315 	stw	r19,12(sp)
    7480:	dc000015 	stw	r16,0(sp)
    7484:	dfc00515 	stw	ra,20(sp)
    7488:	dd000415 	stw	r20,16(sp)
    748c:	dc800215 	stw	r18,8(sp)
    7490:	dc400115 	stw	r17,4(sp)
    7494:	308000cc 	andi	r2,r6,3
    7498:	3021883a 	mov	r16,r6
    749c:	2027883a 	mov	r19,r4
    74a0:	10002f1e 	bne	r2,zero,7560 <__pow5mult+0xe8>
    74a4:	2825883a 	mov	r18,r5
    74a8:	8021d0ba 	srai	r16,r16,2
    74ac:	80001a26 	beq	r16,zero,7518 <__pow5mult+0xa0>
    74b0:	9c401217 	ldw	r17,72(r19)
    74b4:	8800061e 	bne	r17,zero,74d0 <__pow5mult+0x58>
    74b8:	00003406 	br	758c <__pow5mult+0x114>
    74bc:	8021d07a 	srai	r16,r16,1
    74c0:	80001526 	beq	r16,zero,7518 <__pow5mult+0xa0>
    74c4:	88800017 	ldw	r2,0(r17)
    74c8:	10001c26 	beq	r2,zero,753c <__pow5mult+0xc4>
    74cc:	1023883a 	mov	r17,r2
    74d0:	8080004c 	andi	r2,r16,1
    74d4:	103ff926 	beq	r2,zero,74bc <__alt_exception_stack_pointer+0xf80074bc>
    74d8:	880d883a 	mov	r6,r17
    74dc:	900b883a 	mov	r5,r18
    74e0:	9809883a 	mov	r4,r19
    74e4:	00071ec0 	call	71ec <__multiply>
    74e8:	90001b26 	beq	r18,zero,7558 <__pow5mult+0xe0>
    74ec:	91000117 	ldw	r4,4(r18)
    74f0:	98c01317 	ldw	r3,76(r19)
    74f4:	8021d07a 	srai	r16,r16,1
    74f8:	2109883a 	add	r4,r4,r4
    74fc:	2109883a 	add	r4,r4,r4
    7500:	1907883a 	add	r3,r3,r4
    7504:	19000017 	ldw	r4,0(r3)
    7508:	91000015 	stw	r4,0(r18)
    750c:	1c800015 	stw	r18,0(r3)
    7510:	1025883a 	mov	r18,r2
    7514:	803feb1e 	bne	r16,zero,74c4 <__alt_exception_stack_pointer+0xf80074c4>
    7518:	9005883a 	mov	r2,r18
    751c:	dfc00517 	ldw	ra,20(sp)
    7520:	dd000417 	ldw	r20,16(sp)
    7524:	dcc00317 	ldw	r19,12(sp)
    7528:	dc800217 	ldw	r18,8(sp)
    752c:	dc400117 	ldw	r17,4(sp)
    7530:	dc000017 	ldw	r16,0(sp)
    7534:	dec00604 	addi	sp,sp,24
    7538:	f800283a 	ret
    753c:	880d883a 	mov	r6,r17
    7540:	880b883a 	mov	r5,r17
    7544:	9809883a 	mov	r4,r19
    7548:	00071ec0 	call	71ec <__multiply>
    754c:	88800015 	stw	r2,0(r17)
    7550:	10000015 	stw	zero,0(r2)
    7554:	003fdd06 	br	74cc <__alt_exception_stack_pointer+0xf80074cc>
    7558:	1025883a 	mov	r18,r2
    755c:	003fd706 	br	74bc <__alt_exception_stack_pointer+0xf80074bc>
    7560:	10bfffc4 	addi	r2,r2,-1
    7564:	1085883a 	add	r2,r2,r2
    7568:	00c00074 	movhi	r3,1
    756c:	18c36d04 	addi	r3,r3,3508
    7570:	1085883a 	add	r2,r2,r2
    7574:	1885883a 	add	r2,r3,r2
    7578:	11800017 	ldw	r6,0(r2)
    757c:	000f883a 	mov	r7,zero
    7580:	0006e4c0 	call	6e4c <__multadd>
    7584:	1025883a 	mov	r18,r2
    7588:	003fc706 	br	74a8 <__alt_exception_stack_pointer+0xf80074a8>
    758c:	05000044 	movi	r20,1
    7590:	a00b883a 	mov	r5,r20
    7594:	9809883a 	mov	r4,r19
    7598:	0006d7c0 	call	6d7c <_Balloc>
    759c:	1023883a 	mov	r17,r2
    75a0:	00809c44 	movi	r2,625
    75a4:	88800515 	stw	r2,20(r17)
    75a8:	8d000415 	stw	r20,16(r17)
    75ac:	9c401215 	stw	r17,72(r19)
    75b0:	88000015 	stw	zero,0(r17)
    75b4:	003fc606 	br	74d0 <__alt_exception_stack_pointer+0xf80074d0>

000075b8 <__lshift>:
    75b8:	defff904 	addi	sp,sp,-28
    75bc:	dd400515 	stw	r21,20(sp)
    75c0:	dcc00315 	stw	r19,12(sp)
    75c4:	302bd17a 	srai	r21,r6,5
    75c8:	2cc00417 	ldw	r19,16(r5)
    75cc:	28800217 	ldw	r2,8(r5)
    75d0:	dd000415 	stw	r20,16(sp)
    75d4:	ace7883a 	add	r19,r21,r19
    75d8:	dc800215 	stw	r18,8(sp)
    75dc:	dc400115 	stw	r17,4(sp)
    75e0:	dc000015 	stw	r16,0(sp)
    75e4:	dfc00615 	stw	ra,24(sp)
    75e8:	9c000044 	addi	r16,r19,1
    75ec:	2823883a 	mov	r17,r5
    75f0:	3029883a 	mov	r20,r6
    75f4:	2025883a 	mov	r18,r4
    75f8:	29400117 	ldw	r5,4(r5)
    75fc:	1400030e 	bge	r2,r16,760c <__lshift+0x54>
    7600:	1085883a 	add	r2,r2,r2
    7604:	29400044 	addi	r5,r5,1
    7608:	143ffd16 	blt	r2,r16,7600 <__alt_exception_stack_pointer+0xf8007600>
    760c:	9009883a 	mov	r4,r18
    7610:	0006d7c0 	call	6d7c <_Balloc>
    7614:	10c00504 	addi	r3,r2,20
    7618:	0540070e 	bge	zero,r21,7638 <__lshift+0x80>
    761c:	ad6b883a 	add	r21,r21,r21
    7620:	ad6b883a 	add	r21,r21,r21
    7624:	1809883a 	mov	r4,r3
    7628:	1d47883a 	add	r3,r3,r21
    762c:	20000015 	stw	zero,0(r4)
    7630:	21000104 	addi	r4,r4,4
    7634:	193ffd1e 	bne	r3,r4,762c <__alt_exception_stack_pointer+0xf800762c>
    7638:	8a000417 	ldw	r8,16(r17)
    763c:	89000504 	addi	r4,r17,20
    7640:	a18007cc 	andi	r6,r20,31
    7644:	4211883a 	add	r8,r8,r8
    7648:	4211883a 	add	r8,r8,r8
    764c:	2211883a 	add	r8,r4,r8
    7650:	30002326 	beq	r6,zero,76e0 <__lshift+0x128>
    7654:	02400804 	movi	r9,32
    7658:	4993c83a 	sub	r9,r9,r6
    765c:	000b883a 	mov	r5,zero
    7660:	21c00017 	ldw	r7,0(r4)
    7664:	1815883a 	mov	r10,r3
    7668:	18c00104 	addi	r3,r3,4
    766c:	398e983a 	sll	r7,r7,r6
    7670:	21000104 	addi	r4,r4,4
    7674:	394ab03a 	or	r5,r7,r5
    7678:	197fff15 	stw	r5,-4(r3)
    767c:	217fff17 	ldw	r5,-4(r4)
    7680:	2a4ad83a 	srl	r5,r5,r9
    7684:	223ff636 	bltu	r4,r8,7660 <__alt_exception_stack_pointer+0xf8007660>
    7688:	51400115 	stw	r5,4(r10)
    768c:	28001a1e 	bne	r5,zero,76f8 <__lshift+0x140>
    7690:	843fffc4 	addi	r16,r16,-1
    7694:	14000415 	stw	r16,16(r2)
    7698:	88000826 	beq	r17,zero,76bc <__lshift+0x104>
    769c:	89000117 	ldw	r4,4(r17)
    76a0:	90c01317 	ldw	r3,76(r18)
    76a4:	2109883a 	add	r4,r4,r4
    76a8:	2109883a 	add	r4,r4,r4
    76ac:	1907883a 	add	r3,r3,r4
    76b0:	19000017 	ldw	r4,0(r3)
    76b4:	89000015 	stw	r4,0(r17)
    76b8:	1c400015 	stw	r17,0(r3)
    76bc:	dfc00617 	ldw	ra,24(sp)
    76c0:	dd400517 	ldw	r21,20(sp)
    76c4:	dd000417 	ldw	r20,16(sp)
    76c8:	dcc00317 	ldw	r19,12(sp)
    76cc:	dc800217 	ldw	r18,8(sp)
    76d0:	dc400117 	ldw	r17,4(sp)
    76d4:	dc000017 	ldw	r16,0(sp)
    76d8:	dec00704 	addi	sp,sp,28
    76dc:	f800283a 	ret
    76e0:	21400017 	ldw	r5,0(r4)
    76e4:	18c00104 	addi	r3,r3,4
    76e8:	21000104 	addi	r4,r4,4
    76ec:	197fff15 	stw	r5,-4(r3)
    76f0:	223ffb36 	bltu	r4,r8,76e0 <__alt_exception_stack_pointer+0xf80076e0>
    76f4:	003fe606 	br	7690 <__alt_exception_stack_pointer+0xf8007690>
    76f8:	9c000084 	addi	r16,r19,2
    76fc:	003fe406 	br	7690 <__alt_exception_stack_pointer+0xf8007690>

00007700 <__mcmp>:
    7700:	20800417 	ldw	r2,16(r4)
    7704:	28c00417 	ldw	r3,16(r5)
    7708:	10c5c83a 	sub	r2,r2,r3
    770c:	1000111e 	bne	r2,zero,7754 <__mcmp+0x54>
    7710:	18c7883a 	add	r3,r3,r3
    7714:	18c7883a 	add	r3,r3,r3
    7718:	21000504 	addi	r4,r4,20
    771c:	29400504 	addi	r5,r5,20
    7720:	20c5883a 	add	r2,r4,r3
    7724:	28cb883a 	add	r5,r5,r3
    7728:	00000106 	br	7730 <__mcmp+0x30>
    772c:	20800a2e 	bgeu	r4,r2,7758 <__mcmp+0x58>
    7730:	10bfff04 	addi	r2,r2,-4
    7734:	297fff04 	addi	r5,r5,-4
    7738:	11800017 	ldw	r6,0(r2)
    773c:	28c00017 	ldw	r3,0(r5)
    7740:	30fffa26 	beq	r6,r3,772c <__alt_exception_stack_pointer+0xf800772c>
    7744:	30c00236 	bltu	r6,r3,7750 <__mcmp+0x50>
    7748:	00800044 	movi	r2,1
    774c:	f800283a 	ret
    7750:	00bfffc4 	movi	r2,-1
    7754:	f800283a 	ret
    7758:	0005883a 	mov	r2,zero
    775c:	f800283a 	ret

00007760 <__mdiff>:
    7760:	28c00417 	ldw	r3,16(r5)
    7764:	30800417 	ldw	r2,16(r6)
    7768:	defffa04 	addi	sp,sp,-24
    776c:	dcc00315 	stw	r19,12(sp)
    7770:	dc800215 	stw	r18,8(sp)
    7774:	dfc00515 	stw	ra,20(sp)
    7778:	dd000415 	stw	r20,16(sp)
    777c:	dc400115 	stw	r17,4(sp)
    7780:	dc000015 	stw	r16,0(sp)
    7784:	1887c83a 	sub	r3,r3,r2
    7788:	2825883a 	mov	r18,r5
    778c:	3027883a 	mov	r19,r6
    7790:	1800141e 	bne	r3,zero,77e4 <__mdiff+0x84>
    7794:	1085883a 	add	r2,r2,r2
    7798:	1085883a 	add	r2,r2,r2
    779c:	2a000504 	addi	r8,r5,20
    77a0:	34000504 	addi	r16,r6,20
    77a4:	4087883a 	add	r3,r8,r2
    77a8:	8085883a 	add	r2,r16,r2
    77ac:	00000106 	br	77b4 <__mdiff+0x54>
    77b0:	40c0592e 	bgeu	r8,r3,7918 <__mdiff+0x1b8>
    77b4:	18ffff04 	addi	r3,r3,-4
    77b8:	10bfff04 	addi	r2,r2,-4
    77bc:	19c00017 	ldw	r7,0(r3)
    77c0:	11400017 	ldw	r5,0(r2)
    77c4:	397ffa26 	beq	r7,r5,77b0 <__alt_exception_stack_pointer+0xf80077b0>
    77c8:	3940592e 	bgeu	r7,r5,7930 <__mdiff+0x1d0>
    77cc:	9005883a 	mov	r2,r18
    77d0:	4023883a 	mov	r17,r8
    77d4:	9825883a 	mov	r18,r19
    77d8:	05000044 	movi	r20,1
    77dc:	1027883a 	mov	r19,r2
    77e0:	00000406 	br	77f4 <__mdiff+0x94>
    77e4:	18005616 	blt	r3,zero,7940 <__mdiff+0x1e0>
    77e8:	34400504 	addi	r17,r6,20
    77ec:	2c000504 	addi	r16,r5,20
    77f0:	0029883a 	mov	r20,zero
    77f4:	91400117 	ldw	r5,4(r18)
    77f8:	0006d7c0 	call	6d7c <_Balloc>
    77fc:	92400417 	ldw	r9,16(r18)
    7800:	9b000417 	ldw	r12,16(r19)
    7804:	12c00504 	addi	r11,r2,20
    7808:	4a51883a 	add	r8,r9,r9
    780c:	6319883a 	add	r12,r12,r12
    7810:	4211883a 	add	r8,r8,r8
    7814:	6319883a 	add	r12,r12,r12
    7818:	15000315 	stw	r20,12(r2)
    781c:	8211883a 	add	r8,r16,r8
    7820:	8b19883a 	add	r12,r17,r12
    7824:	0007883a 	mov	r3,zero
    7828:	81400017 	ldw	r5,0(r16)
    782c:	89c00017 	ldw	r7,0(r17)
    7830:	59800104 	addi	r6,r11,4
    7834:	293fffcc 	andi	r4,r5,65535
    7838:	20c7883a 	add	r3,r4,r3
    783c:	393fffcc 	andi	r4,r7,65535
    7840:	1909c83a 	sub	r4,r3,r4
    7844:	280ad43a 	srli	r5,r5,16
    7848:	380ed43a 	srli	r7,r7,16
    784c:	2007d43a 	srai	r3,r4,16
    7850:	213fffcc 	andi	r4,r4,65535
    7854:	29cbc83a 	sub	r5,r5,r7
    7858:	28c7883a 	add	r3,r5,r3
    785c:	180a943a 	slli	r5,r3,16
    7860:	8c400104 	addi	r17,r17,4
    7864:	84000104 	addi	r16,r16,4
    7868:	2908b03a 	or	r4,r5,r4
    786c:	59000015 	stw	r4,0(r11)
    7870:	1807d43a 	srai	r3,r3,16
    7874:	3015883a 	mov	r10,r6
    7878:	3017883a 	mov	r11,r6
    787c:	8b3fea36 	bltu	r17,r12,7828 <__alt_exception_stack_pointer+0xf8007828>
    7880:	8200162e 	bgeu	r16,r8,78dc <__mdiff+0x17c>
    7884:	8017883a 	mov	r11,r16
    7888:	59400017 	ldw	r5,0(r11)
    788c:	31800104 	addi	r6,r6,4
    7890:	5ac00104 	addi	r11,r11,4
    7894:	293fffcc 	andi	r4,r5,65535
    7898:	20c7883a 	add	r3,r4,r3
    789c:	280ed43a 	srli	r7,r5,16
    78a0:	180bd43a 	srai	r5,r3,16
    78a4:	193fffcc 	andi	r4,r3,65535
    78a8:	3947883a 	add	r3,r7,r5
    78ac:	180a943a 	slli	r5,r3,16
    78b0:	1807d43a 	srai	r3,r3,16
    78b4:	2908b03a 	or	r4,r5,r4
    78b8:	313fff15 	stw	r4,-4(r6)
    78bc:	5a3ff236 	bltu	r11,r8,7888 <__alt_exception_stack_pointer+0xf8007888>
    78c0:	0406303a 	nor	r3,zero,r16
    78c4:	1a07883a 	add	r3,r3,r8
    78c8:	1806d0ba 	srli	r3,r3,2
    78cc:	18c00044 	addi	r3,r3,1
    78d0:	18c7883a 	add	r3,r3,r3
    78d4:	18c7883a 	add	r3,r3,r3
    78d8:	50d5883a 	add	r10,r10,r3
    78dc:	50ffff04 	addi	r3,r10,-4
    78e0:	2000041e 	bne	r4,zero,78f4 <__mdiff+0x194>
    78e4:	18ffff04 	addi	r3,r3,-4
    78e8:	19000017 	ldw	r4,0(r3)
    78ec:	4a7fffc4 	addi	r9,r9,-1
    78f0:	203ffc26 	beq	r4,zero,78e4 <__alt_exception_stack_pointer+0xf80078e4>
    78f4:	12400415 	stw	r9,16(r2)
    78f8:	dfc00517 	ldw	ra,20(sp)
    78fc:	dd000417 	ldw	r20,16(sp)
    7900:	dcc00317 	ldw	r19,12(sp)
    7904:	dc800217 	ldw	r18,8(sp)
    7908:	dc400117 	ldw	r17,4(sp)
    790c:	dc000017 	ldw	r16,0(sp)
    7910:	dec00604 	addi	sp,sp,24
    7914:	f800283a 	ret
    7918:	000b883a 	mov	r5,zero
    791c:	0006d7c0 	call	6d7c <_Balloc>
    7920:	00c00044 	movi	r3,1
    7924:	10c00415 	stw	r3,16(r2)
    7928:	10000515 	stw	zero,20(r2)
    792c:	003ff206 	br	78f8 <__alt_exception_stack_pointer+0xf80078f8>
    7930:	8023883a 	mov	r17,r16
    7934:	0029883a 	mov	r20,zero
    7938:	4021883a 	mov	r16,r8
    793c:	003fad06 	br	77f4 <__alt_exception_stack_pointer+0xf80077f4>
    7940:	9005883a 	mov	r2,r18
    7944:	94400504 	addi	r17,r18,20
    7948:	9c000504 	addi	r16,r19,20
    794c:	9825883a 	mov	r18,r19
    7950:	05000044 	movi	r20,1
    7954:	1027883a 	mov	r19,r2
    7958:	003fa606 	br	77f4 <__alt_exception_stack_pointer+0xf80077f4>

0000795c <__ulp>:
    795c:	295ffc2c 	andhi	r5,r5,32752
    7960:	00bf3034 	movhi	r2,64704
    7964:	2887883a 	add	r3,r5,r2
    7968:	00c0020e 	bge	zero,r3,7974 <__ulp+0x18>
    796c:	0005883a 	mov	r2,zero
    7970:	f800283a 	ret
    7974:	00c7c83a 	sub	r3,zero,r3
    7978:	1807d53a 	srai	r3,r3,20
    797c:	008004c4 	movi	r2,19
    7980:	10c00b0e 	bge	r2,r3,79b0 <__ulp+0x54>
    7984:	18bffb04 	addi	r2,r3,-20
    7988:	01000784 	movi	r4,30
    798c:	0007883a 	mov	r3,zero
    7990:	20800516 	blt	r4,r2,79a8 <__ulp+0x4c>
    7994:	010007c4 	movi	r4,31
    7998:	2089c83a 	sub	r4,r4,r2
    799c:	00800044 	movi	r2,1
    79a0:	1104983a 	sll	r2,r2,r4
    79a4:	f800283a 	ret
    79a8:	00800044 	movi	r2,1
    79ac:	f800283a 	ret
    79b0:	01400234 	movhi	r5,8
    79b4:	28c7d83a 	sra	r3,r5,r3
    79b8:	0005883a 	mov	r2,zero
    79bc:	f800283a 	ret

000079c0 <__b2d>:
    79c0:	defffa04 	addi	sp,sp,-24
    79c4:	dc000015 	stw	r16,0(sp)
    79c8:	24000417 	ldw	r16,16(r4)
    79cc:	dc400115 	stw	r17,4(sp)
    79d0:	24400504 	addi	r17,r4,20
    79d4:	8421883a 	add	r16,r16,r16
    79d8:	8421883a 	add	r16,r16,r16
    79dc:	8c21883a 	add	r16,r17,r16
    79e0:	dc800215 	stw	r18,8(sp)
    79e4:	84bfff17 	ldw	r18,-4(r16)
    79e8:	dd000415 	stw	r20,16(sp)
    79ec:	dcc00315 	stw	r19,12(sp)
    79f0:	9009883a 	mov	r4,r18
    79f4:	2829883a 	mov	r20,r5
    79f8:	dfc00515 	stw	ra,20(sp)
    79fc:	00070980 	call	7098 <__hi0bits>
    7a00:	00c00804 	movi	r3,32
    7a04:	1889c83a 	sub	r4,r3,r2
    7a08:	a1000015 	stw	r4,0(r20)
    7a0c:	01000284 	movi	r4,10
    7a10:	84ffff04 	addi	r19,r16,-4
    7a14:	20801216 	blt	r4,r2,7a60 <__b2d+0xa0>
    7a18:	018002c4 	movi	r6,11
    7a1c:	308dc83a 	sub	r6,r6,r2
    7a20:	9186d83a 	srl	r3,r18,r6
    7a24:	18cffc34 	orhi	r3,r3,16368
    7a28:	8cc0212e 	bgeu	r17,r19,7ab0 <__b2d+0xf0>
    7a2c:	813ffe17 	ldw	r4,-8(r16)
    7a30:	218cd83a 	srl	r6,r4,r6
    7a34:	10800544 	addi	r2,r2,21
    7a38:	9084983a 	sll	r2,r18,r2
    7a3c:	1184b03a 	or	r2,r2,r6
    7a40:	dfc00517 	ldw	ra,20(sp)
    7a44:	dd000417 	ldw	r20,16(sp)
    7a48:	dcc00317 	ldw	r19,12(sp)
    7a4c:	dc800217 	ldw	r18,8(sp)
    7a50:	dc400117 	ldw	r17,4(sp)
    7a54:	dc000017 	ldw	r16,0(sp)
    7a58:	dec00604 	addi	sp,sp,24
    7a5c:	f800283a 	ret
    7a60:	8cc00f2e 	bgeu	r17,r19,7aa0 <__b2d+0xe0>
    7a64:	117ffd44 	addi	r5,r2,-11
    7a68:	80bffe17 	ldw	r2,-8(r16)
    7a6c:	28000e26 	beq	r5,zero,7aa8 <__b2d+0xe8>
    7a70:	1949c83a 	sub	r4,r3,r5
    7a74:	9164983a 	sll	r18,r18,r5
    7a78:	1106d83a 	srl	r3,r2,r4
    7a7c:	81bffe04 	addi	r6,r16,-8
    7a80:	948ffc34 	orhi	r18,r18,16368
    7a84:	90c6b03a 	or	r3,r18,r3
    7a88:	89800e2e 	bgeu	r17,r6,7ac4 <__b2d+0x104>
    7a8c:	81bffd17 	ldw	r6,-12(r16)
    7a90:	1144983a 	sll	r2,r2,r5
    7a94:	310ad83a 	srl	r5,r6,r4
    7a98:	2884b03a 	or	r2,r5,r2
    7a9c:	003fe806 	br	7a40 <__alt_exception_stack_pointer+0xf8007a40>
    7aa0:	10bffd44 	addi	r2,r2,-11
    7aa4:	1000041e 	bne	r2,zero,7ab8 <__b2d+0xf8>
    7aa8:	90cffc34 	orhi	r3,r18,16368
    7aac:	003fe406 	br	7a40 <__alt_exception_stack_pointer+0xf8007a40>
    7ab0:	000d883a 	mov	r6,zero
    7ab4:	003fdf06 	br	7a34 <__alt_exception_stack_pointer+0xf8007a34>
    7ab8:	90a4983a 	sll	r18,r18,r2
    7abc:	0005883a 	mov	r2,zero
    7ac0:	003ff906 	br	7aa8 <__alt_exception_stack_pointer+0xf8007aa8>
    7ac4:	1144983a 	sll	r2,r2,r5
    7ac8:	003fdd06 	br	7a40 <__alt_exception_stack_pointer+0xf8007a40>

00007acc <__d2b>:
    7acc:	defff804 	addi	sp,sp,-32
    7ad0:	dc000215 	stw	r16,8(sp)
    7ad4:	3021883a 	mov	r16,r6
    7ad8:	dc400315 	stw	r17,12(sp)
    7adc:	8022907a 	slli	r17,r16,1
    7ae0:	dd000615 	stw	r20,24(sp)
    7ae4:	2829883a 	mov	r20,r5
    7ae8:	01400044 	movi	r5,1
    7aec:	dcc00515 	stw	r19,20(sp)
    7af0:	dc800415 	stw	r18,16(sp)
    7af4:	dfc00715 	stw	ra,28(sp)
    7af8:	3825883a 	mov	r18,r7
    7afc:	8822d57a 	srli	r17,r17,21
    7b00:	0006d7c0 	call	6d7c <_Balloc>
    7b04:	1027883a 	mov	r19,r2
    7b08:	00800434 	movhi	r2,16
    7b0c:	10bfffc4 	addi	r2,r2,-1
    7b10:	808c703a 	and	r6,r16,r2
    7b14:	88000126 	beq	r17,zero,7b1c <__d2b+0x50>
    7b18:	31800434 	orhi	r6,r6,16
    7b1c:	d9800015 	stw	r6,0(sp)
    7b20:	a0002426 	beq	r20,zero,7bb4 <__d2b+0xe8>
    7b24:	d9000104 	addi	r4,sp,4
    7b28:	dd000115 	stw	r20,4(sp)
    7b2c:	00071000 	call	7100 <__lo0bits>
    7b30:	d8c00017 	ldw	r3,0(sp)
    7b34:	10002f1e 	bne	r2,zero,7bf4 <__d2b+0x128>
    7b38:	d9000117 	ldw	r4,4(sp)
    7b3c:	99000515 	stw	r4,20(r19)
    7b40:	1821003a 	cmpeq	r16,r3,zero
    7b44:	01000084 	movi	r4,2
    7b48:	2421c83a 	sub	r16,r4,r16
    7b4c:	98c00615 	stw	r3,24(r19)
    7b50:	9c000415 	stw	r16,16(r19)
    7b54:	88001f1e 	bne	r17,zero,7bd4 <__d2b+0x108>
    7b58:	10bef384 	addi	r2,r2,-1074
    7b5c:	90800015 	stw	r2,0(r18)
    7b60:	00900034 	movhi	r2,16384
    7b64:	10bfffc4 	addi	r2,r2,-1
    7b68:	8085883a 	add	r2,r16,r2
    7b6c:	1085883a 	add	r2,r2,r2
    7b70:	1085883a 	add	r2,r2,r2
    7b74:	9885883a 	add	r2,r19,r2
    7b78:	11000517 	ldw	r4,20(r2)
    7b7c:	8020917a 	slli	r16,r16,5
    7b80:	00070980 	call	7098 <__hi0bits>
    7b84:	d8c00817 	ldw	r3,32(sp)
    7b88:	8085c83a 	sub	r2,r16,r2
    7b8c:	18800015 	stw	r2,0(r3)
    7b90:	9805883a 	mov	r2,r19
    7b94:	dfc00717 	ldw	ra,28(sp)
    7b98:	dd000617 	ldw	r20,24(sp)
    7b9c:	dcc00517 	ldw	r19,20(sp)
    7ba0:	dc800417 	ldw	r18,16(sp)
    7ba4:	dc400317 	ldw	r17,12(sp)
    7ba8:	dc000217 	ldw	r16,8(sp)
    7bac:	dec00804 	addi	sp,sp,32
    7bb0:	f800283a 	ret
    7bb4:	d809883a 	mov	r4,sp
    7bb8:	00071000 	call	7100 <__lo0bits>
    7bbc:	d8c00017 	ldw	r3,0(sp)
    7bc0:	04000044 	movi	r16,1
    7bc4:	9c000415 	stw	r16,16(r19)
    7bc8:	98c00515 	stw	r3,20(r19)
    7bcc:	10800804 	addi	r2,r2,32
    7bd0:	883fe126 	beq	r17,zero,7b58 <__alt_exception_stack_pointer+0xf8007b58>
    7bd4:	00c00d44 	movi	r3,53
    7bd8:	8c7ef344 	addi	r17,r17,-1075
    7bdc:	88a3883a 	add	r17,r17,r2
    7be0:	1885c83a 	sub	r2,r3,r2
    7be4:	d8c00817 	ldw	r3,32(sp)
    7be8:	94400015 	stw	r17,0(r18)
    7bec:	18800015 	stw	r2,0(r3)
    7bf0:	003fe706 	br	7b90 <__alt_exception_stack_pointer+0xf8007b90>
    7bf4:	01000804 	movi	r4,32
    7bf8:	2089c83a 	sub	r4,r4,r2
    7bfc:	1908983a 	sll	r4,r3,r4
    7c00:	d9400117 	ldw	r5,4(sp)
    7c04:	1886d83a 	srl	r3,r3,r2
    7c08:	2148b03a 	or	r4,r4,r5
    7c0c:	99000515 	stw	r4,20(r19)
    7c10:	d8c00015 	stw	r3,0(sp)
    7c14:	003fca06 	br	7b40 <__alt_exception_stack_pointer+0xf8007b40>

00007c18 <__ratio>:
    7c18:	defff904 	addi	sp,sp,-28
    7c1c:	dc400315 	stw	r17,12(sp)
    7c20:	2823883a 	mov	r17,r5
    7c24:	d9400104 	addi	r5,sp,4
    7c28:	dfc00615 	stw	ra,24(sp)
    7c2c:	dcc00515 	stw	r19,20(sp)
    7c30:	dc800415 	stw	r18,16(sp)
    7c34:	2027883a 	mov	r19,r4
    7c38:	dc000215 	stw	r16,8(sp)
    7c3c:	00079c00 	call	79c0 <__b2d>
    7c40:	d80b883a 	mov	r5,sp
    7c44:	8809883a 	mov	r4,r17
    7c48:	1025883a 	mov	r18,r2
    7c4c:	1821883a 	mov	r16,r3
    7c50:	00079c00 	call	79c0 <__b2d>
    7c54:	8a000417 	ldw	r8,16(r17)
    7c58:	99000417 	ldw	r4,16(r19)
    7c5c:	d9400117 	ldw	r5,4(sp)
    7c60:	2209c83a 	sub	r4,r4,r8
    7c64:	2010917a 	slli	r8,r4,5
    7c68:	d9000017 	ldw	r4,0(sp)
    7c6c:	2909c83a 	sub	r4,r5,r4
    7c70:	4109883a 	add	r4,r8,r4
    7c74:	01000e0e 	bge	zero,r4,7cb0 <__ratio+0x98>
    7c78:	2008953a 	slli	r4,r4,20
    7c7c:	2421883a 	add	r16,r4,r16
    7c80:	100d883a 	mov	r6,r2
    7c84:	180f883a 	mov	r7,r3
    7c88:	9009883a 	mov	r4,r18
    7c8c:	800b883a 	mov	r5,r16
    7c90:	00009a00 	call	9a0 <__divdf3>
    7c94:	dfc00617 	ldw	ra,24(sp)
    7c98:	dcc00517 	ldw	r19,20(sp)
    7c9c:	dc800417 	ldw	r18,16(sp)
    7ca0:	dc400317 	ldw	r17,12(sp)
    7ca4:	dc000217 	ldw	r16,8(sp)
    7ca8:	dec00704 	addi	sp,sp,28
    7cac:	f800283a 	ret
    7cb0:	2008953a 	slli	r4,r4,20
    7cb4:	1907c83a 	sub	r3,r3,r4
    7cb8:	003ff106 	br	7c80 <__alt_exception_stack_pointer+0xf8007c80>

00007cbc <_mprec_log10>:
    7cbc:	defffe04 	addi	sp,sp,-8
    7cc0:	dc000015 	stw	r16,0(sp)
    7cc4:	dfc00115 	stw	ra,4(sp)
    7cc8:	008005c4 	movi	r2,23
    7ccc:	2021883a 	mov	r16,r4
    7cd0:	11000d0e 	bge	r2,r4,7d08 <_mprec_log10+0x4c>
    7cd4:	0005883a 	mov	r2,zero
    7cd8:	00cffc34 	movhi	r3,16368
    7cdc:	843fffc4 	addi	r16,r16,-1
    7ce0:	000d883a 	mov	r6,zero
    7ce4:	01d00934 	movhi	r7,16420
    7ce8:	1009883a 	mov	r4,r2
    7cec:	180b883a 	mov	r5,r3
    7cf0:	000c3e80 	call	c3e8 <__muldf3>
    7cf4:	803ff91e 	bne	r16,zero,7cdc <__alt_exception_stack_pointer+0xf8007cdc>
    7cf8:	dfc00117 	ldw	ra,4(sp)
    7cfc:	dc000017 	ldw	r16,0(sp)
    7d00:	dec00204 	addi	sp,sp,8
    7d04:	f800283a 	ret
    7d08:	202090fa 	slli	r16,r4,3
    7d0c:	00800074 	movhi	r2,1
    7d10:	10838404 	addi	r2,r2,3600
    7d14:	1421883a 	add	r16,r2,r16
    7d18:	80800017 	ldw	r2,0(r16)
    7d1c:	80c00117 	ldw	r3,4(r16)
    7d20:	dfc00117 	ldw	ra,4(sp)
    7d24:	dc000017 	ldw	r16,0(sp)
    7d28:	dec00204 	addi	sp,sp,8
    7d2c:	f800283a 	ret

00007d30 <__copybits>:
    7d30:	297fffc4 	addi	r5,r5,-1
    7d34:	280fd17a 	srai	r7,r5,5
    7d38:	30c00417 	ldw	r3,16(r6)
    7d3c:	30800504 	addi	r2,r6,20
    7d40:	39c00044 	addi	r7,r7,1
    7d44:	18c7883a 	add	r3,r3,r3
    7d48:	39cf883a 	add	r7,r7,r7
    7d4c:	18c7883a 	add	r3,r3,r3
    7d50:	39cf883a 	add	r7,r7,r7
    7d54:	10c7883a 	add	r3,r2,r3
    7d58:	21cf883a 	add	r7,r4,r7
    7d5c:	10c00d2e 	bgeu	r2,r3,7d94 <__copybits+0x64>
    7d60:	200b883a 	mov	r5,r4
    7d64:	12000017 	ldw	r8,0(r2)
    7d68:	29400104 	addi	r5,r5,4
    7d6c:	10800104 	addi	r2,r2,4
    7d70:	2a3fff15 	stw	r8,-4(r5)
    7d74:	10fffb36 	bltu	r2,r3,7d64 <__alt_exception_stack_pointer+0xf8007d64>
    7d78:	1985c83a 	sub	r2,r3,r6
    7d7c:	10bffac4 	addi	r2,r2,-21
    7d80:	1004d0ba 	srli	r2,r2,2
    7d84:	10800044 	addi	r2,r2,1
    7d88:	1085883a 	add	r2,r2,r2
    7d8c:	1085883a 	add	r2,r2,r2
    7d90:	2089883a 	add	r4,r4,r2
    7d94:	21c0032e 	bgeu	r4,r7,7da4 <__copybits+0x74>
    7d98:	20000015 	stw	zero,0(r4)
    7d9c:	21000104 	addi	r4,r4,4
    7da0:	21fffd36 	bltu	r4,r7,7d98 <__alt_exception_stack_pointer+0xf8007d98>
    7da4:	f800283a 	ret

00007da8 <__any_on>:
    7da8:	20c00417 	ldw	r3,16(r4)
    7dac:	2805d17a 	srai	r2,r5,5
    7db0:	21000504 	addi	r4,r4,20
    7db4:	18800d0e 	bge	r3,r2,7dec <__any_on+0x44>
    7db8:	18c7883a 	add	r3,r3,r3
    7dbc:	18c7883a 	add	r3,r3,r3
    7dc0:	20c7883a 	add	r3,r4,r3
    7dc4:	20c0192e 	bgeu	r4,r3,7e2c <__any_on+0x84>
    7dc8:	18bfff17 	ldw	r2,-4(r3)
    7dcc:	18ffff04 	addi	r3,r3,-4
    7dd0:	1000041e 	bne	r2,zero,7de4 <__any_on+0x3c>
    7dd4:	20c0142e 	bgeu	r4,r3,7e28 <__any_on+0x80>
    7dd8:	18ffff04 	addi	r3,r3,-4
    7ddc:	19400017 	ldw	r5,0(r3)
    7de0:	283ffc26 	beq	r5,zero,7dd4 <__alt_exception_stack_pointer+0xf8007dd4>
    7de4:	00800044 	movi	r2,1
    7de8:	f800283a 	ret
    7dec:	10c00a0e 	bge	r2,r3,7e18 <__any_on+0x70>
    7df0:	1085883a 	add	r2,r2,r2
    7df4:	1085883a 	add	r2,r2,r2
    7df8:	294007cc 	andi	r5,r5,31
    7dfc:	2087883a 	add	r3,r4,r2
    7e00:	283ff026 	beq	r5,zero,7dc4 <__alt_exception_stack_pointer+0xf8007dc4>
    7e04:	19800017 	ldw	r6,0(r3)
    7e08:	3144d83a 	srl	r2,r6,r5
    7e0c:	114a983a 	sll	r5,r2,r5
    7e10:	317ff41e 	bne	r6,r5,7de4 <__alt_exception_stack_pointer+0xf8007de4>
    7e14:	003feb06 	br	7dc4 <__alt_exception_stack_pointer+0xf8007dc4>
    7e18:	1085883a 	add	r2,r2,r2
    7e1c:	1085883a 	add	r2,r2,r2
    7e20:	2087883a 	add	r3,r4,r2
    7e24:	003fe706 	br	7dc4 <__alt_exception_stack_pointer+0xf8007dc4>
    7e28:	f800283a 	ret
    7e2c:	0005883a 	mov	r2,zero
    7e30:	f800283a 	ret

00007e34 <__fpclassifyd>:
    7e34:	00a00034 	movhi	r2,32768
    7e38:	10bfffc4 	addi	r2,r2,-1
    7e3c:	2884703a 	and	r2,r5,r2
    7e40:	10000726 	beq	r2,zero,7e60 <__fpclassifyd+0x2c>
    7e44:	00fffc34 	movhi	r3,65520
    7e48:	019ff834 	movhi	r6,32736
    7e4c:	28c7883a 	add	r3,r5,r3
    7e50:	31bfffc4 	addi	r6,r6,-1
    7e54:	30c00536 	bltu	r6,r3,7e6c <__fpclassifyd+0x38>
    7e58:	00800104 	movi	r2,4
    7e5c:	f800283a 	ret
    7e60:	2000021e 	bne	r4,zero,7e6c <__fpclassifyd+0x38>
    7e64:	00800084 	movi	r2,2
    7e68:	f800283a 	ret
    7e6c:	00dffc34 	movhi	r3,32752
    7e70:	019ff834 	movhi	r6,32736
    7e74:	28cb883a 	add	r5,r5,r3
    7e78:	31bfffc4 	addi	r6,r6,-1
    7e7c:	317ff62e 	bgeu	r6,r5,7e58 <__alt_exception_stack_pointer+0xf8007e58>
    7e80:	01400434 	movhi	r5,16
    7e84:	297fffc4 	addi	r5,r5,-1
    7e88:	28800236 	bltu	r5,r2,7e94 <__fpclassifyd+0x60>
    7e8c:	008000c4 	movi	r2,3
    7e90:	f800283a 	ret
    7e94:	10c00226 	beq	r2,r3,7ea0 <__fpclassifyd+0x6c>
    7e98:	0005883a 	mov	r2,zero
    7e9c:	f800283a 	ret
    7ea0:	2005003a 	cmpeq	r2,r4,zero
    7ea4:	f800283a 	ret

00007ea8 <__sread>:
    7ea8:	defffe04 	addi	sp,sp,-8
    7eac:	dc000015 	stw	r16,0(sp)
    7eb0:	2821883a 	mov	r16,r5
    7eb4:	2940038f 	ldh	r5,14(r5)
    7eb8:	dfc00115 	stw	ra,4(sp)
    7ebc:	000a4200 	call	a420 <_read_r>
    7ec0:	10000716 	blt	r2,zero,7ee0 <__sread+0x38>
    7ec4:	80c01417 	ldw	r3,80(r16)
    7ec8:	1887883a 	add	r3,r3,r2
    7ecc:	80c01415 	stw	r3,80(r16)
    7ed0:	dfc00117 	ldw	ra,4(sp)
    7ed4:	dc000017 	ldw	r16,0(sp)
    7ed8:	dec00204 	addi	sp,sp,8
    7edc:	f800283a 	ret
    7ee0:	80c0030b 	ldhu	r3,12(r16)
    7ee4:	18fbffcc 	andi	r3,r3,61439
    7ee8:	80c0030d 	sth	r3,12(r16)
    7eec:	dfc00117 	ldw	ra,4(sp)
    7ef0:	dc000017 	ldw	r16,0(sp)
    7ef4:	dec00204 	addi	sp,sp,8
    7ef8:	f800283a 	ret

00007efc <__seofread>:
    7efc:	0005883a 	mov	r2,zero
    7f00:	f800283a 	ret

00007f04 <__swrite>:
    7f04:	2880030b 	ldhu	r2,12(r5)
    7f08:	defffb04 	addi	sp,sp,-20
    7f0c:	dcc00315 	stw	r19,12(sp)
    7f10:	dc800215 	stw	r18,8(sp)
    7f14:	dc400115 	stw	r17,4(sp)
    7f18:	dc000015 	stw	r16,0(sp)
    7f1c:	dfc00415 	stw	ra,16(sp)
    7f20:	10c0400c 	andi	r3,r2,256
    7f24:	2821883a 	mov	r16,r5
    7f28:	2023883a 	mov	r17,r4
    7f2c:	3025883a 	mov	r18,r6
    7f30:	3827883a 	mov	r19,r7
    7f34:	18000526 	beq	r3,zero,7f4c <__swrite+0x48>
    7f38:	2940038f 	ldh	r5,14(r5)
    7f3c:	01c00084 	movi	r7,2
    7f40:	000d883a 	mov	r6,zero
    7f44:	000a2640 	call	a264 <_lseek_r>
    7f48:	8080030b 	ldhu	r2,12(r16)
    7f4c:	8140038f 	ldh	r5,14(r16)
    7f50:	10bbffcc 	andi	r2,r2,61439
    7f54:	980f883a 	mov	r7,r19
    7f58:	900d883a 	mov	r6,r18
    7f5c:	8809883a 	mov	r4,r17
    7f60:	8080030d 	sth	r2,12(r16)
    7f64:	dfc00417 	ldw	ra,16(sp)
    7f68:	dcc00317 	ldw	r19,12(sp)
    7f6c:	dc800217 	ldw	r18,8(sp)
    7f70:	dc400117 	ldw	r17,4(sp)
    7f74:	dc000017 	ldw	r16,0(sp)
    7f78:	dec00504 	addi	sp,sp,20
    7f7c:	00098501 	jmpi	9850 <_write_r>

00007f80 <__sseek>:
    7f80:	defffe04 	addi	sp,sp,-8
    7f84:	dc000015 	stw	r16,0(sp)
    7f88:	2821883a 	mov	r16,r5
    7f8c:	2940038f 	ldh	r5,14(r5)
    7f90:	dfc00115 	stw	ra,4(sp)
    7f94:	000a2640 	call	a264 <_lseek_r>
    7f98:	00ffffc4 	movi	r3,-1
    7f9c:	10c00826 	beq	r2,r3,7fc0 <__sseek+0x40>
    7fa0:	80c0030b 	ldhu	r3,12(r16)
    7fa4:	80801415 	stw	r2,80(r16)
    7fa8:	18c40014 	ori	r3,r3,4096
    7fac:	80c0030d 	sth	r3,12(r16)
    7fb0:	dfc00117 	ldw	ra,4(sp)
    7fb4:	dc000017 	ldw	r16,0(sp)
    7fb8:	dec00204 	addi	sp,sp,8
    7fbc:	f800283a 	ret
    7fc0:	80c0030b 	ldhu	r3,12(r16)
    7fc4:	18fbffcc 	andi	r3,r3,61439
    7fc8:	80c0030d 	sth	r3,12(r16)
    7fcc:	dfc00117 	ldw	ra,4(sp)
    7fd0:	dc000017 	ldw	r16,0(sp)
    7fd4:	dec00204 	addi	sp,sp,8
    7fd8:	f800283a 	ret

00007fdc <__sclose>:
    7fdc:	2940038f 	ldh	r5,14(r5)
    7fe0:	00098b01 	jmpi	98b0 <_close_r>

00007fe4 <strcmp>:
    7fe4:	2144b03a 	or	r2,r4,r5
    7fe8:	108000cc 	andi	r2,r2,3
    7fec:	1000171e 	bne	r2,zero,804c <strcmp+0x68>
    7ff0:	20800017 	ldw	r2,0(r4)
    7ff4:	28c00017 	ldw	r3,0(r5)
    7ff8:	10c0141e 	bne	r2,r3,804c <strcmp+0x68>
    7ffc:	027fbff4 	movhi	r9,65279
    8000:	4a7fbfc4 	addi	r9,r9,-257
    8004:	0086303a 	nor	r3,zero,r2
    8008:	02202074 	movhi	r8,32897
    800c:	1245883a 	add	r2,r2,r9
    8010:	42202004 	addi	r8,r8,-32640
    8014:	10c4703a 	and	r2,r2,r3
    8018:	1204703a 	and	r2,r2,r8
    801c:	10000226 	beq	r2,zero,8028 <strcmp+0x44>
    8020:	00002306 	br	80b0 <strcmp+0xcc>
    8024:	1000221e 	bne	r2,zero,80b0 <strcmp+0xcc>
    8028:	21000104 	addi	r4,r4,4
    802c:	20c00017 	ldw	r3,0(r4)
    8030:	29400104 	addi	r5,r5,4
    8034:	29800017 	ldw	r6,0(r5)
    8038:	1a4f883a 	add	r7,r3,r9
    803c:	00c4303a 	nor	r2,zero,r3
    8040:	3884703a 	and	r2,r7,r2
    8044:	1204703a 	and	r2,r2,r8
    8048:	19bff626 	beq	r3,r6,8024 <__alt_exception_stack_pointer+0xf8008024>
    804c:	20800003 	ldbu	r2,0(r4)
    8050:	10c03fcc 	andi	r3,r2,255
    8054:	18c0201c 	xori	r3,r3,128
    8058:	18ffe004 	addi	r3,r3,-128
    805c:	18000c26 	beq	r3,zero,8090 <strcmp+0xac>
    8060:	29800007 	ldb	r6,0(r5)
    8064:	19800326 	beq	r3,r6,8074 <strcmp+0x90>
    8068:	00001306 	br	80b8 <strcmp+0xd4>
    806c:	29800007 	ldb	r6,0(r5)
    8070:	11800b1e 	bne	r2,r6,80a0 <strcmp+0xbc>
    8074:	21000044 	addi	r4,r4,1
    8078:	20c00003 	ldbu	r3,0(r4)
    807c:	29400044 	addi	r5,r5,1
    8080:	18803fcc 	andi	r2,r3,255
    8084:	1080201c 	xori	r2,r2,128
    8088:	10bfe004 	addi	r2,r2,-128
    808c:	103ff71e 	bne	r2,zero,806c <__alt_exception_stack_pointer+0xf800806c>
    8090:	0007883a 	mov	r3,zero
    8094:	28800003 	ldbu	r2,0(r5)
    8098:	1885c83a 	sub	r2,r3,r2
    809c:	f800283a 	ret
    80a0:	28800003 	ldbu	r2,0(r5)
    80a4:	18c03fcc 	andi	r3,r3,255
    80a8:	1885c83a 	sub	r2,r3,r2
    80ac:	f800283a 	ret
    80b0:	0005883a 	mov	r2,zero
    80b4:	f800283a 	ret
    80b8:	10c03fcc 	andi	r3,r2,255
    80bc:	003ff506 	br	8094 <__alt_exception_stack_pointer+0xf8008094>

000080c0 <strlen>:
    80c0:	208000cc 	andi	r2,r4,3
    80c4:	10002026 	beq	r2,zero,8148 <strlen+0x88>
    80c8:	20800007 	ldb	r2,0(r4)
    80cc:	10002026 	beq	r2,zero,8150 <strlen+0x90>
    80d0:	2005883a 	mov	r2,r4
    80d4:	00000206 	br	80e0 <strlen+0x20>
    80d8:	10c00007 	ldb	r3,0(r2)
    80dc:	18001826 	beq	r3,zero,8140 <strlen+0x80>
    80e0:	10800044 	addi	r2,r2,1
    80e4:	10c000cc 	andi	r3,r2,3
    80e8:	183ffb1e 	bne	r3,zero,80d8 <__alt_exception_stack_pointer+0xf80080d8>
    80ec:	10c00017 	ldw	r3,0(r2)
    80f0:	01ffbff4 	movhi	r7,65279
    80f4:	39ffbfc4 	addi	r7,r7,-257
    80f8:	00ca303a 	nor	r5,zero,r3
    80fc:	01a02074 	movhi	r6,32897
    8100:	19c7883a 	add	r3,r3,r7
    8104:	31a02004 	addi	r6,r6,-32640
    8108:	1946703a 	and	r3,r3,r5
    810c:	1986703a 	and	r3,r3,r6
    8110:	1800091e 	bne	r3,zero,8138 <strlen+0x78>
    8114:	10800104 	addi	r2,r2,4
    8118:	10c00017 	ldw	r3,0(r2)
    811c:	19cb883a 	add	r5,r3,r7
    8120:	00c6303a 	nor	r3,zero,r3
    8124:	28c6703a 	and	r3,r5,r3
    8128:	1986703a 	and	r3,r3,r6
    812c:	183ff926 	beq	r3,zero,8114 <__alt_exception_stack_pointer+0xf8008114>
    8130:	00000106 	br	8138 <strlen+0x78>
    8134:	10800044 	addi	r2,r2,1
    8138:	10c00007 	ldb	r3,0(r2)
    813c:	183ffd1e 	bne	r3,zero,8134 <__alt_exception_stack_pointer+0xf8008134>
    8140:	1105c83a 	sub	r2,r2,r4
    8144:	f800283a 	ret
    8148:	2005883a 	mov	r2,r4
    814c:	003fe706 	br	80ec <__alt_exception_stack_pointer+0xf80080ec>
    8150:	0005883a 	mov	r2,zero
    8154:	f800283a 	ret

00008158 <__sprint_r.part.0>:
    8158:	28801917 	ldw	r2,100(r5)
    815c:	defff604 	addi	sp,sp,-40
    8160:	dd400515 	stw	r21,20(sp)
    8164:	dfc00915 	stw	ra,36(sp)
    8168:	df000815 	stw	fp,32(sp)
    816c:	ddc00715 	stw	r23,28(sp)
    8170:	dd800615 	stw	r22,24(sp)
    8174:	dd000415 	stw	r20,16(sp)
    8178:	dcc00315 	stw	r19,12(sp)
    817c:	dc800215 	stw	r18,8(sp)
    8180:	dc400115 	stw	r17,4(sp)
    8184:	dc000015 	stw	r16,0(sp)
    8188:	1088000c 	andi	r2,r2,8192
    818c:	302b883a 	mov	r21,r6
    8190:	10002e26 	beq	r2,zero,824c <__sprint_r.part.0+0xf4>
    8194:	30800217 	ldw	r2,8(r6)
    8198:	35800017 	ldw	r22,0(r6)
    819c:	10002926 	beq	r2,zero,8244 <__sprint_r.part.0+0xec>
    81a0:	2827883a 	mov	r19,r5
    81a4:	2029883a 	mov	r20,r4
    81a8:	b5c00104 	addi	r23,r22,4
    81ac:	04bfffc4 	movi	r18,-1
    81b0:	bc400017 	ldw	r17,0(r23)
    81b4:	b4000017 	ldw	r16,0(r22)
    81b8:	0039883a 	mov	fp,zero
    81bc:	8822d0ba 	srli	r17,r17,2
    81c0:	8800031e 	bne	r17,zero,81d0 <__sprint_r.part.0+0x78>
    81c4:	00001806 	br	8228 <__sprint_r.part.0+0xd0>
    81c8:	84000104 	addi	r16,r16,4
    81cc:	8f001526 	beq	r17,fp,8224 <__sprint_r.part.0+0xcc>
    81d0:	81400017 	ldw	r5,0(r16)
    81d4:	980d883a 	mov	r6,r19
    81d8:	a009883a 	mov	r4,r20
    81dc:	0009c480 	call	9c48 <_fputwc_r>
    81e0:	e7000044 	addi	fp,fp,1
    81e4:	14bff81e 	bne	r2,r18,81c8 <__alt_exception_stack_pointer+0xf80081c8>
    81e8:	9005883a 	mov	r2,r18
    81ec:	a8000215 	stw	zero,8(r21)
    81f0:	a8000115 	stw	zero,4(r21)
    81f4:	dfc00917 	ldw	ra,36(sp)
    81f8:	df000817 	ldw	fp,32(sp)
    81fc:	ddc00717 	ldw	r23,28(sp)
    8200:	dd800617 	ldw	r22,24(sp)
    8204:	dd400517 	ldw	r21,20(sp)
    8208:	dd000417 	ldw	r20,16(sp)
    820c:	dcc00317 	ldw	r19,12(sp)
    8210:	dc800217 	ldw	r18,8(sp)
    8214:	dc400117 	ldw	r17,4(sp)
    8218:	dc000017 	ldw	r16,0(sp)
    821c:	dec00a04 	addi	sp,sp,40
    8220:	f800283a 	ret
    8224:	a8800217 	ldw	r2,8(r21)
    8228:	8c63883a 	add	r17,r17,r17
    822c:	8c63883a 	add	r17,r17,r17
    8230:	1445c83a 	sub	r2,r2,r17
    8234:	a8800215 	stw	r2,8(r21)
    8238:	b5800204 	addi	r22,r22,8
    823c:	bdc00204 	addi	r23,r23,8
    8240:	103fdb1e 	bne	r2,zero,81b0 <__alt_exception_stack_pointer+0xf80081b0>
    8244:	0005883a 	mov	r2,zero
    8248:	003fe806 	br	81ec <__alt_exception_stack_pointer+0xf80081ec>
    824c:	0009d480 	call	9d48 <__sfvwrite_r>
    8250:	003fe606 	br	81ec <__alt_exception_stack_pointer+0xf80081ec>

00008254 <__sprint_r>:
    8254:	30c00217 	ldw	r3,8(r6)
    8258:	18000126 	beq	r3,zero,8260 <__sprint_r+0xc>
    825c:	00081581 	jmpi	8158 <__sprint_r.part.0>
    8260:	30000115 	stw	zero,4(r6)
    8264:	0005883a 	mov	r2,zero
    8268:	f800283a 	ret

0000826c <___vfiprintf_internal_r>:
    826c:	deffca04 	addi	sp,sp,-216
    8270:	dd403115 	stw	r21,196(sp)
    8274:	dfc03515 	stw	ra,212(sp)
    8278:	df003415 	stw	fp,208(sp)
    827c:	ddc03315 	stw	r23,204(sp)
    8280:	dd803215 	stw	r22,200(sp)
    8284:	dd003015 	stw	r20,192(sp)
    8288:	dcc02f15 	stw	r19,188(sp)
    828c:	dc802e15 	stw	r18,184(sp)
    8290:	dc402d15 	stw	r17,180(sp)
    8294:	dc002c15 	stw	r16,176(sp)
    8298:	d9002115 	stw	r4,132(sp)
    829c:	d9402015 	stw	r5,128(sp)
    82a0:	d9c02215 	stw	r7,136(sp)
    82a4:	302b883a 	mov	r21,r6
    82a8:	20000226 	beq	r4,zero,82b4 <___vfiprintf_internal_r+0x48>
    82ac:	20800e17 	ldw	r2,56(r4)
    82b0:	1000cf26 	beq	r2,zero,85f0 <___vfiprintf_internal_r+0x384>
    82b4:	d8c02017 	ldw	r3,128(sp)
    82b8:	1880030b 	ldhu	r2,12(r3)
    82bc:	10c8000c 	andi	r3,r2,8192
    82c0:	1800071e 	bne	r3,zero,82e0 <___vfiprintf_internal_r+0x74>
    82c4:	d9402017 	ldw	r5,128(sp)
    82c8:	00f7ffc4 	movi	r3,-8193
    82cc:	10880014 	ori	r2,r2,8192
    82d0:	29001917 	ldw	r4,100(r5)
    82d4:	2880030d 	sth	r2,12(r5)
    82d8:	20c6703a 	and	r3,r4,r3
    82dc:	28c01915 	stw	r3,100(r5)
    82e0:	10c0020c 	andi	r3,r2,8
    82e4:	1800a526 	beq	r3,zero,857c <___vfiprintf_internal_r+0x310>
    82e8:	d9002017 	ldw	r4,128(sp)
    82ec:	20c00417 	ldw	r3,16(r4)
    82f0:	1800a226 	beq	r3,zero,857c <___vfiprintf_internal_r+0x310>
    82f4:	1080068c 	andi	r2,r2,26
    82f8:	00c00284 	movi	r3,10
    82fc:	10c0a826 	beq	r2,r3,85a0 <___vfiprintf_internal_r+0x334>
    8300:	d9001a04 	addi	r4,sp,104
    8304:	d94019c4 	addi	r5,sp,103
    8308:	04800074 	movhi	r18,1
    830c:	2145c83a 	sub	r2,r4,r5
    8310:	9483b604 	addi	r18,r18,3800
    8314:	d9001e15 	stw	r4,120(sp)
    8318:	d9401f15 	stw	r5,124(sp)
    831c:	dec01a15 	stw	sp,104(sp)
    8320:	d8001c15 	stw	zero,112(sp)
    8324:	d8001b15 	stw	zero,108(sp)
    8328:	d811883a 	mov	r8,sp
    832c:	d8002615 	stw	zero,152(sp)
    8330:	d8002415 	stw	zero,144(sp)
    8334:	d8802815 	stw	r2,160(sp)
    8338:	a82d883a 	mov	r22,r21
    833c:	b0800007 	ldb	r2,0(r22)
    8340:	10040d26 	beq	r2,zero,9378 <___vfiprintf_internal_r+0x110c>
    8344:	00c00944 	movi	r3,37
    8348:	b029883a 	mov	r20,r22
    834c:	10c0021e 	bne	r2,r3,8358 <___vfiprintf_internal_r+0xec>
    8350:	00001606 	br	83ac <___vfiprintf_internal_r+0x140>
    8354:	10c00326 	beq	r2,r3,8364 <___vfiprintf_internal_r+0xf8>
    8358:	a5000044 	addi	r20,r20,1
    835c:	a0800007 	ldb	r2,0(r20)
    8360:	103ffc1e 	bne	r2,zero,8354 <__alt_exception_stack_pointer+0xf8008354>
    8364:	a5a1c83a 	sub	r16,r20,r22
    8368:	80001026 	beq	r16,zero,83ac <___vfiprintf_internal_r+0x140>
    836c:	d8c01c17 	ldw	r3,112(sp)
    8370:	d8801b17 	ldw	r2,108(sp)
    8374:	45800015 	stw	r22,0(r8)
    8378:	80c7883a 	add	r3,r16,r3
    837c:	10800044 	addi	r2,r2,1
    8380:	44000115 	stw	r16,4(r8)
    8384:	d8c01c15 	stw	r3,112(sp)
    8388:	d8801b15 	stw	r2,108(sp)
    838c:	010001c4 	movi	r4,7
    8390:	2080750e 	bge	r4,r2,8568 <___vfiprintf_internal_r+0x2fc>
    8394:	1803951e 	bne	r3,zero,91ec <___vfiprintf_internal_r+0xf80>
    8398:	d8c02417 	ldw	r3,144(sp)
    839c:	d8001b15 	stw	zero,108(sp)
    83a0:	d811883a 	mov	r8,sp
    83a4:	1c07883a 	add	r3,r3,r16
    83a8:	d8c02415 	stw	r3,144(sp)
    83ac:	a0800007 	ldb	r2,0(r20)
    83b0:	1002e026 	beq	r2,zero,8f34 <___vfiprintf_internal_r+0xcc8>
    83b4:	a5800044 	addi	r22,r20,1
    83b8:	a0c00047 	ldb	r3,1(r20)
    83bc:	d8001d85 	stb	zero,118(sp)
    83c0:	0027883a 	mov	r19,zero
    83c4:	d8002305 	stb	zero,140(sp)
    83c8:	043fffc4 	movi	r16,-1
    83cc:	d8002515 	stw	zero,148(sp)
    83d0:	0023883a 	mov	r17,zero
    83d4:	05001604 	movi	r20,88
    83d8:	05400244 	movi	r21,9
    83dc:	402f883a 	mov	r23,r8
    83e0:	b5800044 	addi	r22,r22,1
    83e4:	18bff804 	addi	r2,r3,-32
    83e8:	a0827736 	bltu	r20,r2,8dc8 <___vfiprintf_internal_r+0xb5c>
    83ec:	100490ba 	slli	r2,r2,2
    83f0:	01000074 	movhi	r4,1
    83f4:	21210104 	addi	r4,r4,-31740
    83f8:	1105883a 	add	r2,r2,r4
    83fc:	10800017 	ldw	r2,0(r2)
    8400:	1000683a 	jmp	r2
    8404:	00008ac8 	cmpgei	zero,zero,555
    8408:	00008dc8 	cmpgei	zero,zero,567
    840c:	00008dc8 	cmpgei	zero,zero,567
    8410:	00008ae4 	muli	zero,zero,555
    8414:	00008dc8 	cmpgei	zero,zero,567
    8418:	00008dc8 	cmpgei	zero,zero,567
    841c:	00008dc8 	cmpgei	zero,zero,567
    8420:	00008dc8 	cmpgei	zero,zero,567
    8424:	00008dc8 	cmpgei	zero,zero,567
    8428:	00008dc8 	cmpgei	zero,zero,567
    842c:	00008cec 	andhi	zero,zero,563
    8430:	00008d10 	cmplti	zero,zero,564
    8434:	00008dc8 	cmpgei	zero,zero,567
    8438:	00008608 	cmpgei	zero,zero,536
    843c:	00008d24 	muli	zero,zero,564
    8440:	00008dc8 	cmpgei	zero,zero,567
    8444:	00008af0 	cmpltui	zero,zero,555
    8448:	00008afc 	xorhi	zero,zero,555
    844c:	00008afc 	xorhi	zero,zero,555
    8450:	00008afc 	xorhi	zero,zero,555
    8454:	00008afc 	xorhi	zero,zero,555
    8458:	00008afc 	xorhi	zero,zero,555
    845c:	00008afc 	xorhi	zero,zero,555
    8460:	00008afc 	xorhi	zero,zero,555
    8464:	00008afc 	xorhi	zero,zero,555
    8468:	00008afc 	xorhi	zero,zero,555
    846c:	00008dc8 	cmpgei	zero,zero,567
    8470:	00008dc8 	cmpgei	zero,zero,567
    8474:	00008dc8 	cmpgei	zero,zero,567
    8478:	00008dc8 	cmpgei	zero,zero,567
    847c:	00008dc8 	cmpgei	zero,zero,567
    8480:	00008dc8 	cmpgei	zero,zero,567
    8484:	00008dc8 	cmpgei	zero,zero,567
    8488:	00008dc8 	cmpgei	zero,zero,567
    848c:	00008dc8 	cmpgei	zero,zero,567
    8490:	00008dc8 	cmpgei	zero,zero,567
    8494:	00008b3c 	xorhi	zero,zero,556
    8498:	00008dc8 	cmpgei	zero,zero,567
    849c:	00008dc8 	cmpgei	zero,zero,567
    84a0:	00008dc8 	cmpgei	zero,zero,567
    84a4:	00008dc8 	cmpgei	zero,zero,567
    84a8:	00008dc8 	cmpgei	zero,zero,567
    84ac:	00008dc8 	cmpgei	zero,zero,567
    84b0:	00008dc8 	cmpgei	zero,zero,567
    84b4:	00008dc8 	cmpgei	zero,zero,567
    84b8:	00008dc8 	cmpgei	zero,zero,567
    84bc:	00008dc8 	cmpgei	zero,zero,567
    84c0:	00008b78 	rdprs	zero,zero,557
    84c4:	00008dc8 	cmpgei	zero,zero,567
    84c8:	00008dc8 	cmpgei	zero,zero,567
    84cc:	00008dc8 	cmpgei	zero,zero,567
    84d0:	00008dc8 	cmpgei	zero,zero,567
    84d4:	00008dc8 	cmpgei	zero,zero,567
    84d8:	00008bd4 	movui	zero,559
    84dc:	00008dc8 	cmpgei	zero,zero,567
    84e0:	00008dc8 	cmpgei	zero,zero,567
    84e4:	00008c48 	cmpgei	zero,zero,561
    84e8:	00008dc8 	cmpgei	zero,zero,567
    84ec:	00008dc8 	cmpgei	zero,zero,567
    84f0:	00008dc8 	cmpgei	zero,zero,567
    84f4:	00008dc8 	cmpgei	zero,zero,567
    84f8:	00008dc8 	cmpgei	zero,zero,567
    84fc:	00008dc8 	cmpgei	zero,zero,567
    8500:	00008dc8 	cmpgei	zero,zero,567
    8504:	00008dc8 	cmpgei	zero,zero,567
    8508:	00008dc8 	cmpgei	zero,zero,567
    850c:	00008dc8 	cmpgei	zero,zero,567
    8510:	000089f0 	cmpltui	zero,zero,551
    8514:	00008a20 	cmpeqi	zero,zero,552
    8518:	00008dc8 	cmpgei	zero,zero,567
    851c:	00008dc8 	cmpgei	zero,zero,567
    8520:	00008dc8 	cmpgei	zero,zero,567
    8524:	00008d70 	cmpltui	zero,zero,565
    8528:	00008a20 	cmpeqi	zero,zero,552
    852c:	00008dc8 	cmpgei	zero,zero,567
    8530:	00008dc8 	cmpgei	zero,zero,567
    8534:	000088c8 	cmpgei	zero,zero,547
    8538:	00008dc8 	cmpgei	zero,zero,567
    853c:	000088dc 	xori	zero,zero,547
    8540:	00008914 	movui	zero,548
    8544:	00008614 	movui	zero,536
    8548:	000088bc 	xorhi	zero,zero,546
    854c:	00008dc8 	cmpgei	zero,zero,567
    8550:	00008c88 	cmpgei	zero,zero,562
    8554:	00008dc8 	cmpgei	zero,zero,567
    8558:	00008cd4 	movui	zero,563
    855c:	00008dc8 	cmpgei	zero,zero,567
    8560:	00008dc8 	cmpgei	zero,zero,567
    8564:	00008998 	cmpnei	zero,zero,550
    8568:	42000204 	addi	r8,r8,8
    856c:	d8c02417 	ldw	r3,144(sp)
    8570:	1c07883a 	add	r3,r3,r16
    8574:	d8c02415 	stw	r3,144(sp)
    8578:	003f8c06 	br	83ac <__alt_exception_stack_pointer+0xf80083ac>
    857c:	d9402017 	ldw	r5,128(sp)
    8580:	d9002117 	ldw	r4,132(sp)
    8584:	00041780 	call	4178 <__swsetup_r>
    8588:	1003c11e 	bne	r2,zero,9490 <___vfiprintf_internal_r+0x1224>
    858c:	d9402017 	ldw	r5,128(sp)
    8590:	00c00284 	movi	r3,10
    8594:	2880030b 	ldhu	r2,12(r5)
    8598:	1080068c 	andi	r2,r2,26
    859c:	10ff581e 	bne	r2,r3,8300 <__alt_exception_stack_pointer+0xf8008300>
    85a0:	d8c02017 	ldw	r3,128(sp)
    85a4:	1880038f 	ldh	r2,14(r3)
    85a8:	103f5516 	blt	r2,zero,8300 <__alt_exception_stack_pointer+0xf8008300>
    85ac:	d9c02217 	ldw	r7,136(sp)
    85b0:	d9002117 	ldw	r4,132(sp)
    85b4:	a80d883a 	mov	r6,r21
    85b8:	180b883a 	mov	r5,r3
    85bc:	00097940 	call	9794 <__sbprintf>
    85c0:	dfc03517 	ldw	ra,212(sp)
    85c4:	df003417 	ldw	fp,208(sp)
    85c8:	ddc03317 	ldw	r23,204(sp)
    85cc:	dd803217 	ldw	r22,200(sp)
    85d0:	dd403117 	ldw	r21,196(sp)
    85d4:	dd003017 	ldw	r20,192(sp)
    85d8:	dcc02f17 	ldw	r19,188(sp)
    85dc:	dc802e17 	ldw	r18,184(sp)
    85e0:	dc402d17 	ldw	r17,180(sp)
    85e4:	dc002c17 	ldw	r16,176(sp)
    85e8:	dec03604 	addi	sp,sp,216
    85ec:	f800283a 	ret
    85f0:	00061840 	call	6184 <__sinit>
    85f4:	003f2f06 	br	82b4 <__alt_exception_stack_pointer+0xf80082b4>
    85f8:	d8c02517 	ldw	r3,148(sp)
    85fc:	d8802215 	stw	r2,136(sp)
    8600:	00c7c83a 	sub	r3,zero,r3
    8604:	d8c02515 	stw	r3,148(sp)
    8608:	8c400114 	ori	r17,r17,4
    860c:	b0c00007 	ldb	r3,0(r22)
    8610:	003f7306 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8614:	00800c04 	movi	r2,48
    8618:	d9402217 	ldw	r5,136(sp)
    861c:	d8801d05 	stb	r2,116(sp)
    8620:	00801e04 	movi	r2,120
    8624:	d8801d45 	stb	r2,117(sp)
    8628:	d8001d85 	stb	zero,118(sp)
    862c:	b811883a 	mov	r8,r23
    8630:	28c00104 	addi	r3,r5,4
    8634:	2cc00017 	ldw	r19,0(r5)
    8638:	0029883a 	mov	r20,zero
    863c:	88800094 	ori	r2,r17,2
    8640:	80032516 	blt	r16,zero,92d8 <___vfiprintf_internal_r+0x106c>
    8644:	00bfdfc4 	movi	r2,-129
    8648:	88a2703a 	and	r17,r17,r2
    864c:	d8c02215 	stw	r3,136(sp)
    8650:	8c400094 	ori	r17,r17,2
    8654:	98032a1e 	bne	r19,zero,9300 <___vfiprintf_internal_r+0x1094>
    8658:	00800074 	movhi	r2,1
    865c:	10835604 	addi	r2,r2,3416
    8660:	d8802615 	stw	r2,152(sp)
    8664:	002b883a 	mov	r21,zero
    8668:	8001741e 	bne	r16,zero,8c3c <___vfiprintf_internal_r+0x9d0>
    866c:	0021883a 	mov	r16,zero
    8670:	0029883a 	mov	r20,zero
    8674:	ddc01a04 	addi	r23,sp,104
    8678:	8027883a 	mov	r19,r16
    867c:	8500010e 	bge	r16,r20,8684 <___vfiprintf_internal_r+0x418>
    8680:	a027883a 	mov	r19,r20
    8684:	ad403fcc 	andi	r21,r21,255
    8688:	ad40201c 	xori	r21,r21,128
    868c:	ad7fe004 	addi	r21,r21,-128
    8690:	a8000126 	beq	r21,zero,8698 <___vfiprintf_internal_r+0x42c>
    8694:	9cc00044 	addi	r19,r19,1
    8698:	89c0008c 	andi	r7,r17,2
    869c:	38000126 	beq	r7,zero,86a4 <___vfiprintf_internal_r+0x438>
    86a0:	9cc00084 	addi	r19,r19,2
    86a4:	88c0210c 	andi	r3,r17,132
    86a8:	1801dd1e 	bne	r3,zero,8e20 <___vfiprintf_internal_r+0xbb4>
    86ac:	d9402517 	ldw	r5,148(sp)
    86b0:	2cebc83a 	sub	r21,r5,r19
    86b4:	0541da0e 	bge	zero,r21,8e20 <___vfiprintf_internal_r+0xbb4>
    86b8:	07000404 	movi	fp,16
    86bc:	d8801c17 	ldw	r2,112(sp)
    86c0:	e543be0e 	bge	fp,r21,95bc <___vfiprintf_internal_r+0x1350>
    86c4:	01400074 	movhi	r5,1
    86c8:	2943ba04 	addi	r5,r5,3816
    86cc:	dc002715 	stw	r16,156(sp)
    86d0:	d9801b17 	ldw	r6,108(sp)
    86d4:	a821883a 	mov	r16,r21
    86d8:	d9402315 	stw	r5,140(sp)
    86dc:	028001c4 	movi	r10,7
    86e0:	d9c02915 	stw	r7,164(sp)
    86e4:	182b883a 	mov	r21,r3
    86e8:	00000506 	br	8700 <___vfiprintf_internal_r+0x494>
    86ec:	31000084 	addi	r4,r6,2
    86f0:	42000204 	addi	r8,r8,8
    86f4:	180d883a 	mov	r6,r3
    86f8:	843ffc04 	addi	r16,r16,-16
    86fc:	e4000f0e 	bge	fp,r16,873c <___vfiprintf_internal_r+0x4d0>
    8700:	01000074 	movhi	r4,1
    8704:	10800404 	addi	r2,r2,16
    8708:	30c00044 	addi	r3,r6,1
    870c:	2103ba04 	addi	r4,r4,3816
    8710:	41000015 	stw	r4,0(r8)
    8714:	47000115 	stw	fp,4(r8)
    8718:	d8801c15 	stw	r2,112(sp)
    871c:	d8c01b15 	stw	r3,108(sp)
    8720:	50fff20e 	bge	r10,r3,86ec <__alt_exception_stack_pointer+0xf80086ec>
    8724:	1001b21e 	bne	r2,zero,8df0 <___vfiprintf_internal_r+0xb84>
    8728:	843ffc04 	addi	r16,r16,-16
    872c:	000d883a 	mov	r6,zero
    8730:	01000044 	movi	r4,1
    8734:	d811883a 	mov	r8,sp
    8738:	e43ff116 	blt	fp,r16,8700 <__alt_exception_stack_pointer+0xf8008700>
    873c:	a807883a 	mov	r3,r21
    8740:	d9c02917 	ldw	r7,164(sp)
    8744:	802b883a 	mov	r21,r16
    8748:	dc002717 	ldw	r16,156(sp)
    874c:	d9402317 	ldw	r5,140(sp)
    8750:	a885883a 	add	r2,r21,r2
    8754:	45400115 	stw	r21,4(r8)
    8758:	41400015 	stw	r5,0(r8)
    875c:	d8801c15 	stw	r2,112(sp)
    8760:	d9001b15 	stw	r4,108(sp)
    8764:	014001c4 	movi	r5,7
    8768:	29026216 	blt	r5,r4,90f4 <___vfiprintf_internal_r+0xe88>
    876c:	d9801d87 	ldb	r6,118(sp)
    8770:	42000204 	addi	r8,r8,8
    8774:	21400044 	addi	r5,r4,1
    8778:	3001ae1e 	bne	r6,zero,8e34 <___vfiprintf_internal_r+0xbc8>
    877c:	3801bb26 	beq	r7,zero,8e6c <___vfiprintf_internal_r+0xc00>
    8780:	d9001d04 	addi	r4,sp,116
    8784:	10800084 	addi	r2,r2,2
    8788:	41000015 	stw	r4,0(r8)
    878c:	01000084 	movi	r4,2
    8790:	41000115 	stw	r4,4(r8)
    8794:	d8801c15 	stw	r2,112(sp)
    8798:	d9401b15 	stw	r5,108(sp)
    879c:	010001c4 	movi	r4,7
    87a0:	2142680e 	bge	r4,r5,9144 <___vfiprintf_internal_r+0xed8>
    87a4:	1002b11e 	bne	r2,zero,926c <___vfiprintf_internal_r+0x1000>
    87a8:	01802004 	movi	r6,128
    87ac:	01400044 	movi	r5,1
    87b0:	0009883a 	mov	r4,zero
    87b4:	d811883a 	mov	r8,sp
    87b8:	1981ae1e 	bne	r3,r6,8e74 <___vfiprintf_internal_r+0xc08>
    87bc:	d8c02517 	ldw	r3,148(sp)
    87c0:	1cf9c83a 	sub	fp,r3,r19
    87c4:	0701ab0e 	bge	zero,fp,8e74 <___vfiprintf_internal_r+0xc08>
    87c8:	05400404 	movi	r21,16
    87cc:	af03a90e 	bge	r21,fp,9674 <___vfiprintf_internal_r+0x1408>
    87d0:	01400074 	movhi	r5,1
    87d4:	2943b604 	addi	r5,r5,3800
    87d8:	d9402315 	stw	r5,140(sp)
    87dc:	01c001c4 	movi	r7,7
    87e0:	00000506 	br	87f8 <___vfiprintf_internal_r+0x58c>
    87e4:	21800084 	addi	r6,r4,2
    87e8:	42000204 	addi	r8,r8,8
    87ec:	1809883a 	mov	r4,r3
    87f0:	e73ffc04 	addi	fp,fp,-16
    87f4:	af000d0e 	bge	r21,fp,882c <___vfiprintf_internal_r+0x5c0>
    87f8:	10800404 	addi	r2,r2,16
    87fc:	20c00044 	addi	r3,r4,1
    8800:	44800015 	stw	r18,0(r8)
    8804:	45400115 	stw	r21,4(r8)
    8808:	d8801c15 	stw	r2,112(sp)
    880c:	d8c01b15 	stw	r3,108(sp)
    8810:	38fff40e 	bge	r7,r3,87e4 <__alt_exception_stack_pointer+0xf80087e4>
    8814:	10022b1e 	bne	r2,zero,90c4 <___vfiprintf_internal_r+0xe58>
    8818:	e73ffc04 	addi	fp,fp,-16
    881c:	01800044 	movi	r6,1
    8820:	0009883a 	mov	r4,zero
    8824:	d811883a 	mov	r8,sp
    8828:	af3ff316 	blt	r21,fp,87f8 <__alt_exception_stack_pointer+0xf80087f8>
    882c:	d8c02317 	ldw	r3,140(sp)
    8830:	1705883a 	add	r2,r2,fp
    8834:	47000115 	stw	fp,4(r8)
    8838:	40c00015 	stw	r3,0(r8)
    883c:	d8801c15 	stw	r2,112(sp)
    8840:	d9801b15 	stw	r6,108(sp)
    8844:	00c001c4 	movi	r3,7
    8848:	19829416 	blt	r3,r6,929c <___vfiprintf_internal_r+0x1030>
    884c:	8521c83a 	sub	r16,r16,r20
    8850:	42000204 	addi	r8,r8,8
    8854:	31400044 	addi	r5,r6,1
    8858:	3009883a 	mov	r4,r6
    885c:	04018716 	blt	zero,r16,8e7c <___vfiprintf_internal_r+0xc10>
    8860:	a085883a 	add	r2,r20,r2
    8864:	45c00015 	stw	r23,0(r8)
    8868:	45000115 	stw	r20,4(r8)
    886c:	d8801c15 	stw	r2,112(sp)
    8870:	d9401b15 	stw	r5,108(sp)
    8874:	00c001c4 	movi	r3,7
    8878:	1941c20e 	bge	r3,r5,8f84 <___vfiprintf_internal_r+0xd18>
    887c:	1002531e 	bne	r2,zero,91cc <___vfiprintf_internal_r+0xf60>
    8880:	d8001b15 	stw	zero,108(sp)
    8884:	8c40010c 	andi	r17,r17,4
    8888:	88023226 	beq	r17,zero,9154 <___vfiprintf_internal_r+0xee8>
    888c:	d9002517 	ldw	r4,148(sp)
    8890:	24e3c83a 	sub	r17,r4,r19
    8894:	04432916 	blt	zero,r17,953c <___vfiprintf_internal_r+0x12d0>
    8898:	d8802517 	ldw	r2,148(sp)
    889c:	14c0010e 	bge	r2,r19,88a4 <___vfiprintf_internal_r+0x638>
    88a0:	9805883a 	mov	r2,r19
    88a4:	d8c02417 	ldw	r3,144(sp)
    88a8:	1887883a 	add	r3,r3,r2
    88ac:	d8c02415 	stw	r3,144(sp)
    88b0:	d8001b15 	stw	zero,108(sp)
    88b4:	d811883a 	mov	r8,sp
    88b8:	003ea006 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    88bc:	8c400814 	ori	r17,r17,32
    88c0:	b0c00007 	ldb	r3,0(r22)
    88c4:	003ec606 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    88c8:	b0c00007 	ldb	r3,0(r22)
    88cc:	00801b04 	movi	r2,108
    88d0:	18832026 	beq	r3,r2,9554 <___vfiprintf_internal_r+0x12e8>
    88d4:	8c400414 	ori	r17,r17,16
    88d8:	003ec106 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    88dc:	9cc03fcc 	andi	r19,r19,255
    88e0:	b811883a 	mov	r8,r23
    88e4:	9803981e 	bne	r19,zero,9748 <___vfiprintf_internal_r+0x14dc>
    88e8:	8880080c 	andi	r2,r17,32
    88ec:	1002be26 	beq	r2,zero,93e8 <___vfiprintf_internal_r+0x117c>
    88f0:	d9002217 	ldw	r4,136(sp)
    88f4:	d9402417 	ldw	r5,144(sp)
    88f8:	20800017 	ldw	r2,0(r4)
    88fc:	2807d7fa 	srai	r3,r5,31
    8900:	21000104 	addi	r4,r4,4
    8904:	d9002215 	stw	r4,136(sp)
    8908:	11400015 	stw	r5,0(r2)
    890c:	10c00115 	stw	r3,4(r2)
    8910:	003e8a06 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    8914:	9cc03fcc 	andi	r19,r19,255
    8918:	b811883a 	mov	r8,r23
    891c:	9803871e 	bne	r19,zero,973c <___vfiprintf_internal_r+0x14d0>
    8920:	8880080c 	andi	r2,r17,32
    8924:	10009a26 	beq	r2,zero,8b90 <___vfiprintf_internal_r+0x924>
    8928:	d9002217 	ldw	r4,136(sp)
    892c:	d8001d85 	stb	zero,118(sp)
    8930:	20800204 	addi	r2,r4,8
    8934:	24c00017 	ldw	r19,0(r4)
    8938:	25000117 	ldw	r20,4(r4)
    893c:	8002a416 	blt	r16,zero,93d0 <___vfiprintf_internal_r+0x1164>
    8940:	013fdfc4 	movi	r4,-129
    8944:	9d06b03a 	or	r3,r19,r20
    8948:	d8802215 	stw	r2,136(sp)
    894c:	8922703a 	and	r17,r17,r4
    8950:	18009b26 	beq	r3,zero,8bc0 <___vfiprintf_internal_r+0x954>
    8954:	002b883a 	mov	r21,zero
    8958:	ddc01a04 	addi	r23,sp,104
    895c:	9806d0fa 	srli	r3,r19,3
    8960:	a008977a 	slli	r4,r20,29
    8964:	a028d0fa 	srli	r20,r20,3
    8968:	9cc001cc 	andi	r19,r19,7
    896c:	98800c04 	addi	r2,r19,48
    8970:	bdffffc4 	addi	r23,r23,-1
    8974:	20e6b03a 	or	r19,r4,r3
    8978:	b8800005 	stb	r2,0(r23)
    897c:	9d06b03a 	or	r3,r19,r20
    8980:	183ff61e 	bne	r3,zero,895c <__alt_exception_stack_pointer+0xf800895c>
    8984:	88c0004c 	andi	r3,r17,1
    8988:	18021f1e 	bne	r3,zero,9208 <___vfiprintf_internal_r+0xf9c>
    898c:	d9401e17 	ldw	r5,120(sp)
    8990:	2de9c83a 	sub	r20,r5,r23
    8994:	003f3806 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    8998:	9cc03fcc 	andi	r19,r19,255
    899c:	b811883a 	mov	r8,r23
    89a0:	98034f1e 	bne	r19,zero,96e0 <___vfiprintf_internal_r+0x1474>
    89a4:	00800074 	movhi	r2,1
    89a8:	10835604 	addi	r2,r2,3416
    89ac:	d8802615 	stw	r2,152(sp)
    89b0:	8880080c 	andi	r2,r17,32
    89b4:	1000ac26 	beq	r2,zero,8c68 <___vfiprintf_internal_r+0x9fc>
    89b8:	d9002217 	ldw	r4,136(sp)
    89bc:	24c00017 	ldw	r19,0(r4)
    89c0:	25000117 	ldw	r20,4(r4)
    89c4:	21000204 	addi	r4,r4,8
    89c8:	d9002215 	stw	r4,136(sp)
    89cc:	8880004c 	andi	r2,r17,1
    89d0:	1001e726 	beq	r2,zero,9170 <___vfiprintf_internal_r+0xf04>
    89d4:	9d04b03a 	or	r2,r19,r20
    89d8:	10025c1e 	bne	r2,zero,934c <___vfiprintf_internal_r+0x10e0>
    89dc:	d8001d85 	stb	zero,118(sp)
    89e0:	80024416 	blt	r16,zero,92f4 <___vfiprintf_internal_r+0x1088>
    89e4:	00bfdfc4 	movi	r2,-129
    89e8:	88a2703a 	and	r17,r17,r2
    89ec:	003f1d06 	br	8664 <__alt_exception_stack_pointer+0xf8008664>
    89f0:	d8c02217 	ldw	r3,136(sp)
    89f4:	04c00044 	movi	r19,1
    89f8:	b811883a 	mov	r8,r23
    89fc:	18800017 	ldw	r2,0(r3)
    8a00:	18c00104 	addi	r3,r3,4
    8a04:	d8001d85 	stb	zero,118(sp)
    8a08:	d8801005 	stb	r2,64(sp)
    8a0c:	d8c02215 	stw	r3,136(sp)
    8a10:	9829883a 	mov	r20,r19
    8a14:	ddc01004 	addi	r23,sp,64
    8a18:	0021883a 	mov	r16,zero
    8a1c:	003f1e06 	br	8698 <__alt_exception_stack_pointer+0xf8008698>
    8a20:	9cc03fcc 	andi	r19,r19,255
    8a24:	b811883a 	mov	r8,r23
    8a28:	9803331e 	bne	r19,zero,96f8 <___vfiprintf_internal_r+0x148c>
    8a2c:	8880080c 	andi	r2,r17,32
    8a30:	10004826 	beq	r2,zero,8b54 <___vfiprintf_internal_r+0x8e8>
    8a34:	d9002217 	ldw	r4,136(sp)
    8a38:	20800117 	ldw	r2,4(r4)
    8a3c:	24c00017 	ldw	r19,0(r4)
    8a40:	21000204 	addi	r4,r4,8
    8a44:	d9002215 	stw	r4,136(sp)
    8a48:	1029883a 	mov	r20,r2
    8a4c:	10024c16 	blt	r2,zero,9380 <___vfiprintf_internal_r+0x1114>
    8a50:	dd401d83 	ldbu	r21,118(sp)
    8a54:	80007116 	blt	r16,zero,8c1c <___vfiprintf_internal_r+0x9b0>
    8a58:	00ffdfc4 	movi	r3,-129
    8a5c:	9d04b03a 	or	r2,r19,r20
    8a60:	88e2703a 	and	r17,r17,r3
    8a64:	1000d126 	beq	r2,zero,8dac <___vfiprintf_internal_r+0xb40>
    8a68:	a0023526 	beq	r20,zero,9340 <___vfiprintf_internal_r+0x10d4>
    8a6c:	ddc01a04 	addi	r23,sp,104
    8a70:	4039883a 	mov	fp,r8
    8a74:	9809883a 	mov	r4,r19
    8a78:	a00b883a 	mov	r5,r20
    8a7c:	01800284 	movi	r6,10
    8a80:	000f883a 	mov	r7,zero
    8a84:	000b3200 	call	b320 <__umoddi3>
    8a88:	10800c04 	addi	r2,r2,48
    8a8c:	bdffffc4 	addi	r23,r23,-1
    8a90:	9809883a 	mov	r4,r19
    8a94:	a00b883a 	mov	r5,r20
    8a98:	b8800005 	stb	r2,0(r23)
    8a9c:	01800284 	movi	r6,10
    8aa0:	000f883a 	mov	r7,zero
    8aa4:	000ad240 	call	ad24 <__udivdi3>
    8aa8:	1027883a 	mov	r19,r2
    8aac:	10c4b03a 	or	r2,r2,r3
    8ab0:	1829883a 	mov	r20,r3
    8ab4:	103fef1e 	bne	r2,zero,8a74 <__alt_exception_stack_pointer+0xf8008a74>
    8ab8:	d9001e17 	ldw	r4,120(sp)
    8abc:	e011883a 	mov	r8,fp
    8ac0:	25e9c83a 	sub	r20,r4,r23
    8ac4:	003eec06 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    8ac8:	d8802307 	ldb	r2,140(sp)
    8acc:	1002361e 	bne	r2,zero,93a8 <___vfiprintf_internal_r+0x113c>
    8ad0:	00c00804 	movi	r3,32
    8ad4:	d8c02305 	stb	r3,140(sp)
    8ad8:	04c00044 	movi	r19,1
    8adc:	b0c00007 	ldb	r3,0(r22)
    8ae0:	003e3f06 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8ae4:	8c400054 	ori	r17,r17,1
    8ae8:	b0c00007 	ldb	r3,0(r22)
    8aec:	003e3c06 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8af0:	8c402014 	ori	r17,r17,128
    8af4:	b0c00007 	ldb	r3,0(r22)
    8af8:	003e3906 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8afc:	dc002715 	stw	r16,156(sp)
    8b00:	d8002515 	stw	zero,148(sp)
    8b04:	1f3ff404 	addi	fp,r3,-48
    8b08:	0009883a 	mov	r4,zero
    8b0c:	b021883a 	mov	r16,r22
    8b10:	01400284 	movi	r5,10
    8b14:	00009780 	call	978 <__mulsi3>
    8b18:	80c00007 	ldb	r3,0(r16)
    8b1c:	e089883a 	add	r4,fp,r2
    8b20:	b5800044 	addi	r22,r22,1
    8b24:	1f3ff404 	addi	fp,r3,-48
    8b28:	b021883a 	mov	r16,r22
    8b2c:	af3ff82e 	bgeu	r21,fp,8b10 <__alt_exception_stack_pointer+0xf8008b10>
    8b30:	d9002515 	stw	r4,148(sp)
    8b34:	dc002717 	ldw	r16,156(sp)
    8b38:	003e2a06 	br	83e4 <__alt_exception_stack_pointer+0xf80083e4>
    8b3c:	9cc03fcc 	andi	r19,r19,255
    8b40:	b811883a 	mov	r8,r23
    8b44:	9802e91e 	bne	r19,zero,96ec <___vfiprintf_internal_r+0x1480>
    8b48:	8c400414 	ori	r17,r17,16
    8b4c:	8880080c 	andi	r2,r17,32
    8b50:	103fb81e 	bne	r2,zero,8a34 <__alt_exception_stack_pointer+0xf8008a34>
    8b54:	8880040c 	andi	r2,r17,16
    8b58:	10022e26 	beq	r2,zero,9414 <___vfiprintf_internal_r+0x11a8>
    8b5c:	d9402217 	ldw	r5,136(sp)
    8b60:	2cc00017 	ldw	r19,0(r5)
    8b64:	29400104 	addi	r5,r5,4
    8b68:	d9402215 	stw	r5,136(sp)
    8b6c:	9829d7fa 	srai	r20,r19,31
    8b70:	a005883a 	mov	r2,r20
    8b74:	003fb506 	br	8a4c <__alt_exception_stack_pointer+0xf8008a4c>
    8b78:	9cc03fcc 	andi	r19,r19,255
    8b7c:	b811883a 	mov	r8,r23
    8b80:	9802fa1e 	bne	r19,zero,976c <___vfiprintf_internal_r+0x1500>
    8b84:	8c400414 	ori	r17,r17,16
    8b88:	8880080c 	andi	r2,r17,32
    8b8c:	103f661e 	bne	r2,zero,8928 <__alt_exception_stack_pointer+0xf8008928>
    8b90:	8880040c 	andi	r2,r17,16
    8b94:	10020626 	beq	r2,zero,93b0 <___vfiprintf_internal_r+0x1144>
    8b98:	d9402217 	ldw	r5,136(sp)
    8b9c:	d8001d85 	stb	zero,118(sp)
    8ba0:	0029883a 	mov	r20,zero
    8ba4:	28800104 	addi	r2,r5,4
    8ba8:	2cc00017 	ldw	r19,0(r5)
    8bac:	80020816 	blt	r16,zero,93d0 <___vfiprintf_internal_r+0x1164>
    8bb0:	00ffdfc4 	movi	r3,-129
    8bb4:	d8802215 	stw	r2,136(sp)
    8bb8:	88e2703a 	and	r17,r17,r3
    8bbc:	983f651e 	bne	r19,zero,8954 <__alt_exception_stack_pointer+0xf8008954>
    8bc0:	002b883a 	mov	r21,zero
    8bc4:	8002cf26 	beq	r16,zero,9704 <___vfiprintf_internal_r+0x1498>
    8bc8:	0027883a 	mov	r19,zero
    8bcc:	0029883a 	mov	r20,zero
    8bd0:	003f6106 	br	8958 <__alt_exception_stack_pointer+0xf8008958>
    8bd4:	9cc03fcc 	andi	r19,r19,255
    8bd8:	b811883a 	mov	r8,r23
    8bdc:	9802e01e 	bne	r19,zero,9760 <___vfiprintf_internal_r+0x14f4>
    8be0:	8c400414 	ori	r17,r17,16
    8be4:	8880080c 	andi	r2,r17,32
    8be8:	1000641e 	bne	r2,zero,8d7c <___vfiprintf_internal_r+0xb10>
    8bec:	8880040c 	andi	r2,r17,16
    8bf0:	1001c81e 	bne	r2,zero,9314 <___vfiprintf_internal_r+0x10a8>
    8bf4:	8880100c 	andi	r2,r17,64
    8bf8:	d8001d85 	stb	zero,118(sp)
    8bfc:	1002281e 	bne	r2,zero,94a0 <___vfiprintf_internal_r+0x1234>
    8c00:	d9002217 	ldw	r4,136(sp)
    8c04:	0029883a 	mov	r20,zero
    8c08:	20800104 	addi	r2,r4,4
    8c0c:	24c00017 	ldw	r19,0(r4)
    8c10:	8001c60e 	bge	r16,zero,932c <___vfiprintf_internal_r+0x10c0>
    8c14:	d8802215 	stw	r2,136(sp)
    8c18:	002b883a 	mov	r21,zero
    8c1c:	9d04b03a 	or	r2,r19,r20
    8c20:	103f911e 	bne	r2,zero,8a68 <__alt_exception_stack_pointer+0xf8008a68>
    8c24:	00800044 	movi	r2,1
    8c28:	10803fcc 	andi	r2,r2,255
    8c2c:	00c00044 	movi	r3,1
    8c30:	10c05f26 	beq	r2,r3,8db0 <___vfiprintf_internal_r+0xb44>
    8c34:	00c00084 	movi	r3,2
    8c38:	10ffe31e 	bne	r2,r3,8bc8 <__alt_exception_stack_pointer+0xf8008bc8>
    8c3c:	0027883a 	mov	r19,zero
    8c40:	0029883a 	mov	r20,zero
    8c44:	00015106 	br	918c <___vfiprintf_internal_r+0xf20>
    8c48:	9cc03fcc 	andi	r19,r19,255
    8c4c:	b811883a 	mov	r8,r23
    8c50:	9802c01e 	bne	r19,zero,9754 <___vfiprintf_internal_r+0x14e8>
    8c54:	01400074 	movhi	r5,1
    8c58:	29435104 	addi	r5,r5,3396
    8c5c:	d9402615 	stw	r5,152(sp)
    8c60:	8880080c 	andi	r2,r17,32
    8c64:	103f541e 	bne	r2,zero,89b8 <__alt_exception_stack_pointer+0xf80089b8>
    8c68:	8880040c 	andi	r2,r17,16
    8c6c:	1001f226 	beq	r2,zero,9438 <___vfiprintf_internal_r+0x11cc>
    8c70:	d9402217 	ldw	r5,136(sp)
    8c74:	0029883a 	mov	r20,zero
    8c78:	2cc00017 	ldw	r19,0(r5)
    8c7c:	29400104 	addi	r5,r5,4
    8c80:	d9402215 	stw	r5,136(sp)
    8c84:	003f5106 	br	89cc <__alt_exception_stack_pointer+0xf80089cc>
    8c88:	d8c02217 	ldw	r3,136(sp)
    8c8c:	b811883a 	mov	r8,r23
    8c90:	d8001d85 	stb	zero,118(sp)
    8c94:	1dc00017 	ldw	r23,0(r3)
    8c98:	1f000104 	addi	fp,r3,4
    8c9c:	b8025926 	beq	r23,zero,9604 <___vfiprintf_internal_r+0x1398>
    8ca0:	80023316 	blt	r16,zero,9570 <___vfiprintf_internal_r+0x1304>
    8ca4:	800d883a 	mov	r6,r16
    8ca8:	000b883a 	mov	r5,zero
    8cac:	b809883a 	mov	r4,r23
    8cb0:	da002a15 	stw	r8,168(sp)
    8cb4:	0006a280 	call	6a28 <memchr>
    8cb8:	da002a17 	ldw	r8,168(sp)
    8cbc:	10026826 	beq	r2,zero,9660 <___vfiprintf_internal_r+0x13f4>
    8cc0:	15e9c83a 	sub	r20,r2,r23
    8cc4:	dd401d83 	ldbu	r21,118(sp)
    8cc8:	df002215 	stw	fp,136(sp)
    8ccc:	0021883a 	mov	r16,zero
    8cd0:	003e6906 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    8cd4:	9cc03fcc 	andi	r19,r19,255
    8cd8:	b811883a 	mov	r8,r23
    8cdc:	983fc126 	beq	r19,zero,8be4 <__alt_exception_stack_pointer+0xf8008be4>
    8ce0:	d8c02303 	ldbu	r3,140(sp)
    8ce4:	d8c01d85 	stb	r3,118(sp)
    8ce8:	003fbe06 	br	8be4 <__alt_exception_stack_pointer+0xf8008be4>
    8cec:	d9002217 	ldw	r4,136(sp)
    8cf0:	d9402217 	ldw	r5,136(sp)
    8cf4:	21000017 	ldw	r4,0(r4)
    8cf8:	28800104 	addi	r2,r5,4
    8cfc:	d9002515 	stw	r4,148(sp)
    8d00:	203e3d16 	blt	r4,zero,85f8 <__alt_exception_stack_pointer+0xf80085f8>
    8d04:	d8802215 	stw	r2,136(sp)
    8d08:	b0c00007 	ldb	r3,0(r22)
    8d0c:	003db406 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8d10:	00c00ac4 	movi	r3,43
    8d14:	d8c02305 	stb	r3,140(sp)
    8d18:	04c00044 	movi	r19,1
    8d1c:	b0c00007 	ldb	r3,0(r22)
    8d20:	003daf06 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8d24:	b0c00007 	ldb	r3,0(r22)
    8d28:	01000a84 	movi	r4,42
    8d2c:	b4000044 	addi	r16,r22,1
    8d30:	19025e26 	beq	r3,r4,96ac <___vfiprintf_internal_r+0x1440>
    8d34:	1f3ff404 	addi	fp,r3,-48
    8d38:	0009883a 	mov	r4,zero
    8d3c:	af025236 	bltu	r21,fp,9688 <___vfiprintf_internal_r+0x141c>
    8d40:	01400284 	movi	r5,10
    8d44:	00009780 	call	978 <__mulsi3>
    8d48:	80c00007 	ldb	r3,0(r16)
    8d4c:	1709883a 	add	r4,r2,fp
    8d50:	85800044 	addi	r22,r16,1
    8d54:	1f3ff404 	addi	fp,r3,-48
    8d58:	b021883a 	mov	r16,r22
    8d5c:	af3ff82e 	bgeu	r21,fp,8d40 <__alt_exception_stack_pointer+0xf8008d40>
    8d60:	2021883a 	mov	r16,r4
    8d64:	203d9f0e 	bge	r4,zero,83e4 <__alt_exception_stack_pointer+0xf80083e4>
    8d68:	043fffc4 	movi	r16,-1
    8d6c:	003d9d06 	br	83e4 <__alt_exception_stack_pointer+0xf80083e4>
    8d70:	8c401014 	ori	r17,r17,64
    8d74:	b0c00007 	ldb	r3,0(r22)
    8d78:	003d9906 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8d7c:	d9002217 	ldw	r4,136(sp)
    8d80:	d8001d85 	stb	zero,118(sp)
    8d84:	20c00204 	addi	r3,r4,8
    8d88:	24c00017 	ldw	r19,0(r4)
    8d8c:	25000117 	ldw	r20,4(r4)
    8d90:	8001e716 	blt	r16,zero,9530 <___vfiprintf_internal_r+0x12c4>
    8d94:	013fdfc4 	movi	r4,-129
    8d98:	9d04b03a 	or	r2,r19,r20
    8d9c:	d8c02215 	stw	r3,136(sp)
    8da0:	8922703a 	and	r17,r17,r4
    8da4:	002b883a 	mov	r21,zero
    8da8:	103f2f1e 	bne	r2,zero,8a68 <__alt_exception_stack_pointer+0xf8008a68>
    8dac:	803e2f26 	beq	r16,zero,866c <__alt_exception_stack_pointer+0xf800866c>
    8db0:	0027883a 	mov	r19,zero
    8db4:	9cc00c04 	addi	r19,r19,48
    8db8:	dcc019c5 	stb	r19,103(sp)
    8dbc:	dd002817 	ldw	r20,160(sp)
    8dc0:	ddc019c4 	addi	r23,sp,103
    8dc4:	003e2c06 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    8dc8:	9cc03fcc 	andi	r19,r19,255
    8dcc:	b811883a 	mov	r8,r23
    8dd0:	9802571e 	bne	r19,zero,9730 <___vfiprintf_internal_r+0x14c4>
    8dd4:	18005726 	beq	r3,zero,8f34 <___vfiprintf_internal_r+0xcc8>
    8dd8:	04c00044 	movi	r19,1
    8ddc:	d8c01005 	stb	r3,64(sp)
    8de0:	d8001d85 	stb	zero,118(sp)
    8de4:	9829883a 	mov	r20,r19
    8de8:	ddc01004 	addi	r23,sp,64
    8dec:	003f0a06 	br	8a18 <__alt_exception_stack_pointer+0xf8008a18>
    8df0:	d9402017 	ldw	r5,128(sp)
    8df4:	d9002117 	ldw	r4,132(sp)
    8df8:	d9801a04 	addi	r6,sp,104
    8dfc:	da802a15 	stw	r10,168(sp)
    8e00:	00081580 	call	8158 <__sprint_r.part.0>
    8e04:	da802a17 	ldw	r10,168(sp)
    8e08:	1000501e 	bne	r2,zero,8f4c <___vfiprintf_internal_r+0xce0>
    8e0c:	d9801b17 	ldw	r6,108(sp)
    8e10:	d8801c17 	ldw	r2,112(sp)
    8e14:	d811883a 	mov	r8,sp
    8e18:	31000044 	addi	r4,r6,1
    8e1c:	003e3606 	br	86f8 <__alt_exception_stack_pointer+0xf80086f8>
    8e20:	d9001b17 	ldw	r4,108(sp)
    8e24:	d8801c17 	ldw	r2,112(sp)
    8e28:	21400044 	addi	r5,r4,1
    8e2c:	d9801d87 	ldb	r6,118(sp)
    8e30:	303e5226 	beq	r6,zero,877c <__alt_exception_stack_pointer+0xf800877c>
    8e34:	01800044 	movi	r6,1
    8e38:	d9001d84 	addi	r4,sp,118
    8e3c:	1185883a 	add	r2,r2,r6
    8e40:	41000015 	stw	r4,0(r8)
    8e44:	41800115 	stw	r6,4(r8)
    8e48:	d8801c15 	stw	r2,112(sp)
    8e4c:	d9401b15 	stw	r5,108(sp)
    8e50:	010001c4 	movi	r4,7
    8e54:	2140b00e 	bge	r4,r5,9118 <___vfiprintf_internal_r+0xeac>
    8e58:	1000f61e 	bne	r2,zero,9234 <___vfiprintf_internal_r+0xfc8>
    8e5c:	3800b31e 	bne	r7,zero,912c <___vfiprintf_internal_r+0xec0>
    8e60:	0009883a 	mov	r4,zero
    8e64:	300b883a 	mov	r5,r6
    8e68:	d811883a 	mov	r8,sp
    8e6c:	01802004 	movi	r6,128
    8e70:	19be5226 	beq	r3,r6,87bc <__alt_exception_stack_pointer+0xf80087bc>
    8e74:	8521c83a 	sub	r16,r16,r20
    8e78:	043e790e 	bge	zero,r16,8860 <__alt_exception_stack_pointer+0xf8008860>
    8e7c:	05400404 	movi	r21,16
    8e80:	ac01b00e 	bge	r21,r16,9544 <___vfiprintf_internal_r+0x12d8>
    8e84:	01400074 	movhi	r5,1
    8e88:	2943b604 	addi	r5,r5,3800
    8e8c:	d9402315 	stw	r5,140(sp)
    8e90:	070001c4 	movi	fp,7
    8e94:	00000506 	br	8eac <___vfiprintf_internal_r+0xc40>
    8e98:	21400084 	addi	r5,r4,2
    8e9c:	42000204 	addi	r8,r8,8
    8ea0:	1809883a 	mov	r4,r3
    8ea4:	843ffc04 	addi	r16,r16,-16
    8ea8:	ac000d0e 	bge	r21,r16,8ee0 <___vfiprintf_internal_r+0xc74>
    8eac:	10800404 	addi	r2,r2,16
    8eb0:	20c00044 	addi	r3,r4,1
    8eb4:	44800015 	stw	r18,0(r8)
    8eb8:	45400115 	stw	r21,4(r8)
    8ebc:	d8801c15 	stw	r2,112(sp)
    8ec0:	d8c01b15 	stw	r3,108(sp)
    8ec4:	e0fff40e 	bge	fp,r3,8e98 <__alt_exception_stack_pointer+0xf8008e98>
    8ec8:	1000101e 	bne	r2,zero,8f0c <___vfiprintf_internal_r+0xca0>
    8ecc:	843ffc04 	addi	r16,r16,-16
    8ed0:	01400044 	movi	r5,1
    8ed4:	0009883a 	mov	r4,zero
    8ed8:	d811883a 	mov	r8,sp
    8edc:	ac3ff316 	blt	r21,r16,8eac <__alt_exception_stack_pointer+0xf8008eac>
    8ee0:	d8c02317 	ldw	r3,140(sp)
    8ee4:	1405883a 	add	r2,r2,r16
    8ee8:	44000115 	stw	r16,4(r8)
    8eec:	40c00015 	stw	r3,0(r8)
    8ef0:	d8801c15 	stw	r2,112(sp)
    8ef4:	d9401b15 	stw	r5,108(sp)
    8ef8:	00c001c4 	movi	r3,7
    8efc:	19401916 	blt	r3,r5,8f64 <___vfiprintf_internal_r+0xcf8>
    8f00:	42000204 	addi	r8,r8,8
    8f04:	29400044 	addi	r5,r5,1
    8f08:	003e5506 	br	8860 <__alt_exception_stack_pointer+0xf8008860>
    8f0c:	d9402017 	ldw	r5,128(sp)
    8f10:	d9002117 	ldw	r4,132(sp)
    8f14:	d9801a04 	addi	r6,sp,104
    8f18:	00081580 	call	8158 <__sprint_r.part.0>
    8f1c:	10000b1e 	bne	r2,zero,8f4c <___vfiprintf_internal_r+0xce0>
    8f20:	d9001b17 	ldw	r4,108(sp)
    8f24:	d8801c17 	ldw	r2,112(sp)
    8f28:	d811883a 	mov	r8,sp
    8f2c:	21400044 	addi	r5,r4,1
    8f30:	003fdc06 	br	8ea4 <__alt_exception_stack_pointer+0xf8008ea4>
    8f34:	d8801c17 	ldw	r2,112(sp)
    8f38:	10000426 	beq	r2,zero,8f4c <___vfiprintf_internal_r+0xce0>
    8f3c:	d9402017 	ldw	r5,128(sp)
    8f40:	d9002117 	ldw	r4,132(sp)
    8f44:	d9801a04 	addi	r6,sp,104
    8f48:	00081580 	call	8158 <__sprint_r.part.0>
    8f4c:	d9402017 	ldw	r5,128(sp)
    8f50:	2880030b 	ldhu	r2,12(r5)
    8f54:	1080100c 	andi	r2,r2,64
    8f58:	10014d1e 	bne	r2,zero,9490 <___vfiprintf_internal_r+0x1224>
    8f5c:	d8802417 	ldw	r2,144(sp)
    8f60:	003d9706 	br	85c0 <__alt_exception_stack_pointer+0xf80085c0>
    8f64:	1000d21e 	bne	r2,zero,92b0 <___vfiprintf_internal_r+0x1044>
    8f68:	00c00044 	movi	r3,1
    8f6c:	a005883a 	mov	r2,r20
    8f70:	ddc00015 	stw	r23,0(sp)
    8f74:	dd000115 	stw	r20,4(sp)
    8f78:	dd001c15 	stw	r20,112(sp)
    8f7c:	d8c01b15 	stw	r3,108(sp)
    8f80:	d811883a 	mov	r8,sp
    8f84:	42000204 	addi	r8,r8,8
    8f88:	8c40010c 	andi	r17,r17,4
    8f8c:	88004026 	beq	r17,zero,9090 <___vfiprintf_internal_r+0xe24>
    8f90:	d9002517 	ldw	r4,148(sp)
    8f94:	24e3c83a 	sub	r17,r4,r19
    8f98:	04403d0e 	bge	zero,r17,9090 <___vfiprintf_internal_r+0xe24>
    8f9c:	04000404 	movi	r16,16
    8fa0:	8441a90e 	bge	r16,r17,9648 <___vfiprintf_internal_r+0x13dc>
    8fa4:	00c00074 	movhi	r3,1
    8fa8:	18c3ba04 	addi	r3,r3,3816
    8fac:	d9001b17 	ldw	r4,108(sp)
    8fb0:	d8c02315 	stw	r3,140(sp)
    8fb4:	050001c4 	movi	r20,7
    8fb8:	dd402117 	ldw	r21,132(sp)
    8fbc:	ddc02017 	ldw	r23,128(sp)
    8fc0:	00000506 	br	8fd8 <___vfiprintf_internal_r+0xd6c>
    8fc4:	21400084 	addi	r5,r4,2
    8fc8:	42000204 	addi	r8,r8,8
    8fcc:	1809883a 	mov	r4,r3
    8fd0:	8c7ffc04 	addi	r17,r17,-16
    8fd4:	84400f0e 	bge	r16,r17,9014 <___vfiprintf_internal_r+0xda8>
    8fd8:	01400074 	movhi	r5,1
    8fdc:	10800404 	addi	r2,r2,16
    8fe0:	20c00044 	addi	r3,r4,1
    8fe4:	2943ba04 	addi	r5,r5,3816
    8fe8:	41400015 	stw	r5,0(r8)
    8fec:	44000115 	stw	r16,4(r8)
    8ff0:	d8801c15 	stw	r2,112(sp)
    8ff4:	d8c01b15 	stw	r3,108(sp)
    8ff8:	a0fff20e 	bge	r20,r3,8fc4 <__alt_exception_stack_pointer+0xf8008fc4>
    8ffc:	1000141e 	bne	r2,zero,9050 <___vfiprintf_internal_r+0xde4>
    9000:	8c7ffc04 	addi	r17,r17,-16
    9004:	01400044 	movi	r5,1
    9008:	0009883a 	mov	r4,zero
    900c:	d811883a 	mov	r8,sp
    9010:	847ff116 	blt	r16,r17,8fd8 <__alt_exception_stack_pointer+0xf8008fd8>
    9014:	d8c02317 	ldw	r3,140(sp)
    9018:	1445883a 	add	r2,r2,r17
    901c:	44400115 	stw	r17,4(r8)
    9020:	40c00015 	stw	r3,0(r8)
    9024:	d8801c15 	stw	r2,112(sp)
    9028:	d9401b15 	stw	r5,108(sp)
    902c:	00c001c4 	movi	r3,7
    9030:	1940170e 	bge	r3,r5,9090 <___vfiprintf_internal_r+0xe24>
    9034:	1000101e 	bne	r2,zero,9078 <___vfiprintf_internal_r+0xe0c>
    9038:	d8802517 	ldw	r2,148(sp)
    903c:	14c11616 	blt	r2,r19,9498 <___vfiprintf_internal_r+0x122c>
    9040:	d9002417 	ldw	r4,144(sp)
    9044:	2089883a 	add	r4,r4,r2
    9048:	d9002415 	stw	r4,144(sp)
    904c:	003e1806 	br	88b0 <__alt_exception_stack_pointer+0xf80088b0>
    9050:	d9801a04 	addi	r6,sp,104
    9054:	b80b883a 	mov	r5,r23
    9058:	a809883a 	mov	r4,r21
    905c:	00081580 	call	8158 <__sprint_r.part.0>
    9060:	103fba1e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    9064:	d9001b17 	ldw	r4,108(sp)
    9068:	d8801c17 	ldw	r2,112(sp)
    906c:	d811883a 	mov	r8,sp
    9070:	21400044 	addi	r5,r4,1
    9074:	003fd606 	br	8fd0 <__alt_exception_stack_pointer+0xf8008fd0>
    9078:	d9402017 	ldw	r5,128(sp)
    907c:	d9002117 	ldw	r4,132(sp)
    9080:	d9801a04 	addi	r6,sp,104
    9084:	00081580 	call	8158 <__sprint_r.part.0>
    9088:	103fb01e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    908c:	d8801c17 	ldw	r2,112(sp)
    9090:	d8c02517 	ldw	r3,148(sp)
    9094:	1cc0010e 	bge	r3,r19,909c <___vfiprintf_internal_r+0xe30>
    9098:	9807883a 	mov	r3,r19
    909c:	d9002417 	ldw	r4,144(sp)
    90a0:	20c9883a 	add	r4,r4,r3
    90a4:	d9002415 	stw	r4,144(sp)
    90a8:	103e0126 	beq	r2,zero,88b0 <__alt_exception_stack_pointer+0xf80088b0>
    90ac:	d9402017 	ldw	r5,128(sp)
    90b0:	d9002117 	ldw	r4,132(sp)
    90b4:	d9801a04 	addi	r6,sp,104
    90b8:	00081580 	call	8158 <__sprint_r.part.0>
    90bc:	103dfc26 	beq	r2,zero,88b0 <__alt_exception_stack_pointer+0xf80088b0>
    90c0:	003fa206 	br	8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    90c4:	d9402017 	ldw	r5,128(sp)
    90c8:	d9002117 	ldw	r4,132(sp)
    90cc:	d9801a04 	addi	r6,sp,104
    90d0:	d9c02b15 	stw	r7,172(sp)
    90d4:	00081580 	call	8158 <__sprint_r.part.0>
    90d8:	d9c02b17 	ldw	r7,172(sp)
    90dc:	103f9b1e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    90e0:	d9001b17 	ldw	r4,108(sp)
    90e4:	d8801c17 	ldw	r2,112(sp)
    90e8:	d811883a 	mov	r8,sp
    90ec:	21800044 	addi	r6,r4,1
    90f0:	003dbf06 	br	87f0 <__alt_exception_stack_pointer+0xf80087f0>
    90f4:	1000d81e 	bne	r2,zero,9458 <___vfiprintf_internal_r+0x11ec>
    90f8:	d9001d87 	ldb	r4,118(sp)
    90fc:	20000a26 	beq	r4,zero,9128 <___vfiprintf_internal_r+0xebc>
    9100:	00800044 	movi	r2,1
    9104:	d9001d84 	addi	r4,sp,118
    9108:	100b883a 	mov	r5,r2
    910c:	d9000015 	stw	r4,0(sp)
    9110:	d8800115 	stw	r2,4(sp)
    9114:	d811883a 	mov	r8,sp
    9118:	2809883a 	mov	r4,r5
    911c:	42000204 	addi	r8,r8,8
    9120:	29400044 	addi	r5,r5,1
    9124:	003d9506 	br	877c <__alt_exception_stack_pointer+0xf800877c>
    9128:	3800fd26 	beq	r7,zero,9520 <___vfiprintf_internal_r+0x12b4>
    912c:	00800084 	movi	r2,2
    9130:	d9001d04 	addi	r4,sp,116
    9134:	d9000015 	stw	r4,0(sp)
    9138:	d8800115 	stw	r2,4(sp)
    913c:	01400044 	movi	r5,1
    9140:	d811883a 	mov	r8,sp
    9144:	2809883a 	mov	r4,r5
    9148:	42000204 	addi	r8,r8,8
    914c:	29400044 	addi	r5,r5,1
    9150:	003f4606 	br	8e6c <__alt_exception_stack_pointer+0xf8008e6c>
    9154:	d8802517 	ldw	r2,148(sp)
    9158:	14c0010e 	bge	r2,r19,9160 <___vfiprintf_internal_r+0xef4>
    915c:	9805883a 	mov	r2,r19
    9160:	d9402417 	ldw	r5,144(sp)
    9164:	288b883a 	add	r5,r5,r2
    9168:	d9402415 	stw	r5,144(sp)
    916c:	003dd006 	br	88b0 <__alt_exception_stack_pointer+0xf80088b0>
    9170:	d8001d85 	stb	zero,118(sp)
    9174:	80005d16 	blt	r16,zero,92ec <___vfiprintf_internal_r+0x1080>
    9178:	00ffdfc4 	movi	r3,-129
    917c:	9d04b03a 	or	r2,r19,r20
    9180:	88e2703a 	and	r17,r17,r3
    9184:	103d3726 	beq	r2,zero,8664 <__alt_exception_stack_pointer+0xf8008664>
    9188:	002b883a 	mov	r21,zero
    918c:	d9002617 	ldw	r4,152(sp)
    9190:	ddc01a04 	addi	r23,sp,104
    9194:	988003cc 	andi	r2,r19,15
    9198:	a006973a 	slli	r3,r20,28
    919c:	2085883a 	add	r2,r4,r2
    91a0:	9826d13a 	srli	r19,r19,4
    91a4:	10800003 	ldbu	r2,0(r2)
    91a8:	a028d13a 	srli	r20,r20,4
    91ac:	bdffffc4 	addi	r23,r23,-1
    91b0:	1ce6b03a 	or	r19,r3,r19
    91b4:	b8800005 	stb	r2,0(r23)
    91b8:	9d04b03a 	or	r2,r19,r20
    91bc:	103ff51e 	bne	r2,zero,9194 <__alt_exception_stack_pointer+0xf8009194>
    91c0:	d8801e17 	ldw	r2,120(sp)
    91c4:	15e9c83a 	sub	r20,r2,r23
    91c8:	003d2b06 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    91cc:	d9402017 	ldw	r5,128(sp)
    91d0:	d9002117 	ldw	r4,132(sp)
    91d4:	d9801a04 	addi	r6,sp,104
    91d8:	00081580 	call	8158 <__sprint_r.part.0>
    91dc:	103f5b1e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    91e0:	d8801c17 	ldw	r2,112(sp)
    91e4:	d811883a 	mov	r8,sp
    91e8:	003f6706 	br	8f88 <__alt_exception_stack_pointer+0xf8008f88>
    91ec:	d9402017 	ldw	r5,128(sp)
    91f0:	d9002117 	ldw	r4,132(sp)
    91f4:	d9801a04 	addi	r6,sp,104
    91f8:	00081580 	call	8158 <__sprint_r.part.0>
    91fc:	103f531e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    9200:	d811883a 	mov	r8,sp
    9204:	003cd906 	br	856c <__alt_exception_stack_pointer+0xf800856c>
    9208:	10803fcc 	andi	r2,r2,255
    920c:	1080201c 	xori	r2,r2,128
    9210:	10bfe004 	addi	r2,r2,-128
    9214:	00c00c04 	movi	r3,48
    9218:	10ffe926 	beq	r2,r3,91c0 <__alt_exception_stack_pointer+0xf80091c0>
    921c:	b8ffffc5 	stb	r3,-1(r23)
    9220:	d8c01e17 	ldw	r3,120(sp)
    9224:	b8bfffc4 	addi	r2,r23,-1
    9228:	102f883a 	mov	r23,r2
    922c:	18a9c83a 	sub	r20,r3,r2
    9230:	003d1106 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    9234:	d9402017 	ldw	r5,128(sp)
    9238:	d9002117 	ldw	r4,132(sp)
    923c:	d9801a04 	addi	r6,sp,104
    9240:	d8c02a15 	stw	r3,168(sp)
    9244:	d9c02b15 	stw	r7,172(sp)
    9248:	00081580 	call	8158 <__sprint_r.part.0>
    924c:	d8c02a17 	ldw	r3,168(sp)
    9250:	d9c02b17 	ldw	r7,172(sp)
    9254:	103f3d1e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    9258:	d9001b17 	ldw	r4,108(sp)
    925c:	d8801c17 	ldw	r2,112(sp)
    9260:	d811883a 	mov	r8,sp
    9264:	21400044 	addi	r5,r4,1
    9268:	003d4406 	br	877c <__alt_exception_stack_pointer+0xf800877c>
    926c:	d9402017 	ldw	r5,128(sp)
    9270:	d9002117 	ldw	r4,132(sp)
    9274:	d9801a04 	addi	r6,sp,104
    9278:	d8c02a15 	stw	r3,168(sp)
    927c:	00081580 	call	8158 <__sprint_r.part.0>
    9280:	d8c02a17 	ldw	r3,168(sp)
    9284:	103f311e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    9288:	d9001b17 	ldw	r4,108(sp)
    928c:	d8801c17 	ldw	r2,112(sp)
    9290:	d811883a 	mov	r8,sp
    9294:	21400044 	addi	r5,r4,1
    9298:	003ef406 	br	8e6c <__alt_exception_stack_pointer+0xf8008e6c>
    929c:	1000bd1e 	bne	r2,zero,9594 <___vfiprintf_internal_r+0x1328>
    92a0:	01400044 	movi	r5,1
    92a4:	0009883a 	mov	r4,zero
    92a8:	d811883a 	mov	r8,sp
    92ac:	003ef106 	br	8e74 <__alt_exception_stack_pointer+0xf8008e74>
    92b0:	d9402017 	ldw	r5,128(sp)
    92b4:	d9002117 	ldw	r4,132(sp)
    92b8:	d9801a04 	addi	r6,sp,104
    92bc:	00081580 	call	8158 <__sprint_r.part.0>
    92c0:	103f221e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    92c4:	d9401b17 	ldw	r5,108(sp)
    92c8:	d8801c17 	ldw	r2,112(sp)
    92cc:	d811883a 	mov	r8,sp
    92d0:	29400044 	addi	r5,r5,1
    92d4:	003d6206 	br	8860 <__alt_exception_stack_pointer+0xf8008860>
    92d8:	01400074 	movhi	r5,1
    92dc:	29435604 	addi	r5,r5,3416
    92e0:	d9402615 	stw	r5,152(sp)
    92e4:	d8c02215 	stw	r3,136(sp)
    92e8:	1023883a 	mov	r17,r2
    92ec:	9d04b03a 	or	r2,r19,r20
    92f0:	103fa51e 	bne	r2,zero,9188 <__alt_exception_stack_pointer+0xf8009188>
    92f4:	002b883a 	mov	r21,zero
    92f8:	00800084 	movi	r2,2
    92fc:	003e4a06 	br	8c28 <__alt_exception_stack_pointer+0xf8008c28>
    9300:	01400074 	movhi	r5,1
    9304:	29435604 	addi	r5,r5,3416
    9308:	002b883a 	mov	r21,zero
    930c:	d9402615 	stw	r5,152(sp)
    9310:	003f9e06 	br	918c <__alt_exception_stack_pointer+0xf800918c>
    9314:	d9402217 	ldw	r5,136(sp)
    9318:	d8001d85 	stb	zero,118(sp)
    931c:	0029883a 	mov	r20,zero
    9320:	28800104 	addi	r2,r5,4
    9324:	2cc00017 	ldw	r19,0(r5)
    9328:	803e3a16 	blt	r16,zero,8c14 <__alt_exception_stack_pointer+0xf8008c14>
    932c:	00ffdfc4 	movi	r3,-129
    9330:	d8802215 	stw	r2,136(sp)
    9334:	88e2703a 	and	r17,r17,r3
    9338:	002b883a 	mov	r21,zero
    933c:	983e9b26 	beq	r19,zero,8dac <__alt_exception_stack_pointer+0xf8008dac>
    9340:	00800244 	movi	r2,9
    9344:	14fdc936 	bltu	r2,r19,8a6c <__alt_exception_stack_pointer+0xf8008a6c>
    9348:	003e9a06 	br	8db4 <__alt_exception_stack_pointer+0xf8008db4>
    934c:	00800c04 	movi	r2,48
    9350:	d8c01d45 	stb	r3,117(sp)
    9354:	d8801d05 	stb	r2,116(sp)
    9358:	d8001d85 	stb	zero,118(sp)
    935c:	88c00094 	ori	r3,r17,2
    9360:	80009c16 	blt	r16,zero,95d4 <___vfiprintf_internal_r+0x1368>
    9364:	00bfdfc4 	movi	r2,-129
    9368:	88a2703a 	and	r17,r17,r2
    936c:	8c400094 	ori	r17,r17,2
    9370:	002b883a 	mov	r21,zero
    9374:	003f8506 	br	918c <__alt_exception_stack_pointer+0xf800918c>
    9378:	b029883a 	mov	r20,r22
    937c:	003c0b06 	br	83ac <__alt_exception_stack_pointer+0xf80083ac>
    9380:	04e7c83a 	sub	r19,zero,r19
    9384:	05400b44 	movi	r21,45
    9388:	9804c03a 	cmpne	r2,r19,zero
    938c:	0529c83a 	sub	r20,zero,r20
    9390:	dd401d85 	stb	r21,118(sp)
    9394:	a0a9c83a 	sub	r20,r20,r2
    9398:	80009716 	blt	r16,zero,95f8 <___vfiprintf_internal_r+0x138c>
    939c:	00bfdfc4 	movi	r2,-129
    93a0:	88a2703a 	and	r17,r17,r2
    93a4:	003db006 	br	8a68 <__alt_exception_stack_pointer+0xf8008a68>
    93a8:	b0c00007 	ldb	r3,0(r22)
    93ac:	003c0c06 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    93b0:	8880100c 	andi	r2,r17,64
    93b4:	d8001d85 	stb	zero,118(sp)
    93b8:	1000461e 	bne	r2,zero,94d4 <___vfiprintf_internal_r+0x1268>
    93bc:	d9002217 	ldw	r4,136(sp)
    93c0:	0029883a 	mov	r20,zero
    93c4:	20800104 	addi	r2,r4,4
    93c8:	24c00017 	ldw	r19,0(r4)
    93cc:	803df80e 	bge	r16,zero,8bb0 <__alt_exception_stack_pointer+0xf8008bb0>
    93d0:	9d06b03a 	or	r3,r19,r20
    93d4:	d8802215 	stw	r2,136(sp)
    93d8:	183d5e1e 	bne	r3,zero,8954 <__alt_exception_stack_pointer+0xf8008954>
    93dc:	002b883a 	mov	r21,zero
    93e0:	0005883a 	mov	r2,zero
    93e4:	003e1006 	br	8c28 <__alt_exception_stack_pointer+0xf8008c28>
    93e8:	8880040c 	andi	r2,r17,16
    93ec:	1000321e 	bne	r2,zero,94b8 <___vfiprintf_internal_r+0x124c>
    93f0:	8c40100c 	andi	r17,r17,64
    93f4:	88008d26 	beq	r17,zero,962c <___vfiprintf_internal_r+0x13c0>
    93f8:	d9402217 	ldw	r5,136(sp)
    93fc:	d8c02417 	ldw	r3,144(sp)
    9400:	28800017 	ldw	r2,0(r5)
    9404:	29400104 	addi	r5,r5,4
    9408:	d9402215 	stw	r5,136(sp)
    940c:	10c0000d 	sth	r3,0(r2)
    9410:	003bca06 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    9414:	8880100c 	andi	r2,r17,64
    9418:	10003a26 	beq	r2,zero,9504 <___vfiprintf_internal_r+0x1298>
    941c:	d8802217 	ldw	r2,136(sp)
    9420:	14c0000f 	ldh	r19,0(r2)
    9424:	10800104 	addi	r2,r2,4
    9428:	d8802215 	stw	r2,136(sp)
    942c:	9829d7fa 	srai	r20,r19,31
    9430:	a005883a 	mov	r2,r20
    9434:	003d8506 	br	8a4c <__alt_exception_stack_pointer+0xf8008a4c>
    9438:	8880100c 	andi	r2,r17,64
    943c:	10002b26 	beq	r2,zero,94ec <___vfiprintf_internal_r+0x1280>
    9440:	d8802217 	ldw	r2,136(sp)
    9444:	0029883a 	mov	r20,zero
    9448:	14c0000b 	ldhu	r19,0(r2)
    944c:	10800104 	addi	r2,r2,4
    9450:	d8802215 	stw	r2,136(sp)
    9454:	003d5d06 	br	89cc <__alt_exception_stack_pointer+0xf80089cc>
    9458:	d9402017 	ldw	r5,128(sp)
    945c:	d9002117 	ldw	r4,132(sp)
    9460:	d9801a04 	addi	r6,sp,104
    9464:	d8c02a15 	stw	r3,168(sp)
    9468:	d9c02b15 	stw	r7,172(sp)
    946c:	00081580 	call	8158 <__sprint_r.part.0>
    9470:	d8c02a17 	ldw	r3,168(sp)
    9474:	d9c02b17 	ldw	r7,172(sp)
    9478:	103eb41e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    947c:	d9001b17 	ldw	r4,108(sp)
    9480:	d8801c17 	ldw	r2,112(sp)
    9484:	d811883a 	mov	r8,sp
    9488:	21400044 	addi	r5,r4,1
    948c:	003e6706 	br	8e2c <__alt_exception_stack_pointer+0xf8008e2c>
    9490:	00bfffc4 	movi	r2,-1
    9494:	003c4a06 	br	85c0 <__alt_exception_stack_pointer+0xf80085c0>
    9498:	9805883a 	mov	r2,r19
    949c:	003ee806 	br	9040 <__alt_exception_stack_pointer+0xf8009040>
    94a0:	d8c02217 	ldw	r3,136(sp)
    94a4:	0029883a 	mov	r20,zero
    94a8:	18800104 	addi	r2,r3,4
    94ac:	1cc0000b 	ldhu	r19,0(r3)
    94b0:	803f9e0e 	bge	r16,zero,932c <__alt_exception_stack_pointer+0xf800932c>
    94b4:	003dd706 	br	8c14 <__alt_exception_stack_pointer+0xf8008c14>
    94b8:	d8c02217 	ldw	r3,136(sp)
    94bc:	d9002417 	ldw	r4,144(sp)
    94c0:	18800017 	ldw	r2,0(r3)
    94c4:	18c00104 	addi	r3,r3,4
    94c8:	d8c02215 	stw	r3,136(sp)
    94cc:	11000015 	stw	r4,0(r2)
    94d0:	003b9a06 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    94d4:	d8c02217 	ldw	r3,136(sp)
    94d8:	0029883a 	mov	r20,zero
    94dc:	18800104 	addi	r2,r3,4
    94e0:	1cc0000b 	ldhu	r19,0(r3)
    94e4:	803db20e 	bge	r16,zero,8bb0 <__alt_exception_stack_pointer+0xf8008bb0>
    94e8:	003fb906 	br	93d0 <__alt_exception_stack_pointer+0xf80093d0>
    94ec:	d9002217 	ldw	r4,136(sp)
    94f0:	0029883a 	mov	r20,zero
    94f4:	24c00017 	ldw	r19,0(r4)
    94f8:	21000104 	addi	r4,r4,4
    94fc:	d9002215 	stw	r4,136(sp)
    9500:	003d3206 	br	89cc <__alt_exception_stack_pointer+0xf80089cc>
    9504:	d8c02217 	ldw	r3,136(sp)
    9508:	1cc00017 	ldw	r19,0(r3)
    950c:	18c00104 	addi	r3,r3,4
    9510:	d8c02215 	stw	r3,136(sp)
    9514:	9829d7fa 	srai	r20,r19,31
    9518:	a005883a 	mov	r2,r20
    951c:	003d4b06 	br	8a4c <__alt_exception_stack_pointer+0xf8008a4c>
    9520:	0009883a 	mov	r4,zero
    9524:	01400044 	movi	r5,1
    9528:	d811883a 	mov	r8,sp
    952c:	003e4f06 	br	8e6c <__alt_exception_stack_pointer+0xf8008e6c>
    9530:	d8c02215 	stw	r3,136(sp)
    9534:	002b883a 	mov	r21,zero
    9538:	003db806 	br	8c1c <__alt_exception_stack_pointer+0xf8008c1c>
    953c:	d811883a 	mov	r8,sp
    9540:	003e9606 	br	8f9c <__alt_exception_stack_pointer+0xf8008f9c>
    9544:	01000074 	movhi	r4,1
    9548:	2103b604 	addi	r4,r4,3800
    954c:	d9002315 	stw	r4,140(sp)
    9550:	003e6306 	br	8ee0 <__alt_exception_stack_pointer+0xf8008ee0>
    9554:	b0c00043 	ldbu	r3,1(r22)
    9558:	8c400814 	ori	r17,r17,32
    955c:	b5800044 	addi	r22,r22,1
    9560:	18c03fcc 	andi	r3,r3,255
    9564:	18c0201c 	xori	r3,r3,128
    9568:	18ffe004 	addi	r3,r3,-128
    956c:	003b9c06 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    9570:	b809883a 	mov	r4,r23
    9574:	da002a15 	stw	r8,168(sp)
    9578:	00080c00 	call	80c0 <strlen>
    957c:	1029883a 	mov	r20,r2
    9580:	dd401d83 	ldbu	r21,118(sp)
    9584:	df002215 	stw	fp,136(sp)
    9588:	0021883a 	mov	r16,zero
    958c:	da002a17 	ldw	r8,168(sp)
    9590:	003c3906 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    9594:	d9402017 	ldw	r5,128(sp)
    9598:	d9002117 	ldw	r4,132(sp)
    959c:	d9801a04 	addi	r6,sp,104
    95a0:	00081580 	call	8158 <__sprint_r.part.0>
    95a4:	103e691e 	bne	r2,zero,8f4c <__alt_exception_stack_pointer+0xf8008f4c>
    95a8:	d9001b17 	ldw	r4,108(sp)
    95ac:	d8801c17 	ldw	r2,112(sp)
    95b0:	d811883a 	mov	r8,sp
    95b4:	21400044 	addi	r5,r4,1
    95b8:	003e2e06 	br	8e74 <__alt_exception_stack_pointer+0xf8008e74>
    95bc:	01000074 	movhi	r4,1
    95c0:	2103ba04 	addi	r4,r4,3816
    95c4:	d9002315 	stw	r4,140(sp)
    95c8:	d9001b17 	ldw	r4,108(sp)
    95cc:	21000044 	addi	r4,r4,1
    95d0:	003c5e06 	br	874c <__alt_exception_stack_pointer+0xf800874c>
    95d4:	002b883a 	mov	r21,zero
    95d8:	00800084 	movi	r2,2
    95dc:	10803fcc 	andi	r2,r2,255
    95e0:	01000044 	movi	r4,1
    95e4:	11002b26 	beq	r2,r4,9694 <___vfiprintf_internal_r+0x1428>
    95e8:	01000084 	movi	r4,2
    95ec:	11002b1e 	bne	r2,r4,969c <___vfiprintf_internal_r+0x1430>
    95f0:	1823883a 	mov	r17,r3
    95f4:	003ee506 	br	918c <__alt_exception_stack_pointer+0xf800918c>
    95f8:	8807883a 	mov	r3,r17
    95fc:	00800044 	movi	r2,1
    9600:	003ff606 	br	95dc <__alt_exception_stack_pointer+0xf80095dc>
    9604:	00800184 	movi	r2,6
    9608:	1400012e 	bgeu	r2,r16,9610 <___vfiprintf_internal_r+0x13a4>
    960c:	1021883a 	mov	r16,r2
    9610:	8029883a 	mov	r20,r16
    9614:	8027883a 	mov	r19,r16
    9618:	80002216 	blt	r16,zero,96a4 <___vfiprintf_internal_r+0x1438>
    961c:	05c00074 	movhi	r23,1
    9620:	df002215 	stw	fp,136(sp)
    9624:	bdc35b04 	addi	r23,r23,3436
    9628:	003cfb06 	br	8a18 <__alt_exception_stack_pointer+0xf8008a18>
    962c:	d9002217 	ldw	r4,136(sp)
    9630:	d9402417 	ldw	r5,144(sp)
    9634:	20800017 	ldw	r2,0(r4)
    9638:	21000104 	addi	r4,r4,4
    963c:	d9002215 	stw	r4,136(sp)
    9640:	11400015 	stw	r5,0(r2)
    9644:	003b3d06 	br	833c <__alt_exception_stack_pointer+0xf800833c>
    9648:	01400074 	movhi	r5,1
    964c:	2943ba04 	addi	r5,r5,3816
    9650:	d9402315 	stw	r5,140(sp)
    9654:	d9401b17 	ldw	r5,108(sp)
    9658:	29400044 	addi	r5,r5,1
    965c:	003e6d06 	br	9014 <__alt_exception_stack_pointer+0xf8009014>
    9660:	8029883a 	mov	r20,r16
    9664:	dd401d83 	ldbu	r21,118(sp)
    9668:	df002215 	stw	fp,136(sp)
    966c:	0021883a 	mov	r16,zero
    9670:	003c0106 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    9674:	00c00074 	movhi	r3,1
    9678:	18c3b604 	addi	r3,r3,3800
    967c:	d8c02315 	stw	r3,140(sp)
    9680:	280d883a 	mov	r6,r5
    9684:	003c6906 	br	882c <__alt_exception_stack_pointer+0xf800882c>
    9688:	802d883a 	mov	r22,r16
    968c:	0021883a 	mov	r16,zero
    9690:	003b5406 	br	83e4 <__alt_exception_stack_pointer+0xf80083e4>
    9694:	1823883a 	mov	r17,r3
    9698:	003cf306 	br	8a68 <__alt_exception_stack_pointer+0xf8008a68>
    969c:	1823883a 	mov	r17,r3
    96a0:	003cad06 	br	8958 <__alt_exception_stack_pointer+0xf8008958>
    96a4:	0027883a 	mov	r19,zero
    96a8:	003fdc06 	br	961c <__alt_exception_stack_pointer+0xf800961c>
    96ac:	d9402217 	ldw	r5,136(sp)
    96b0:	8005883a 	mov	r2,r16
    96b4:	b0c00043 	ldbu	r3,1(r22)
    96b8:	2c000017 	ldw	r16,0(r5)
    96bc:	29000104 	addi	r4,r5,4
    96c0:	d9002215 	stw	r4,136(sp)
    96c4:	102d883a 	mov	r22,r2
    96c8:	803fa50e 	bge	r16,zero,9560 <__alt_exception_stack_pointer+0xf8009560>
    96cc:	18c03fcc 	andi	r3,r3,255
    96d0:	18c0201c 	xori	r3,r3,128
    96d4:	043fffc4 	movi	r16,-1
    96d8:	18ffe004 	addi	r3,r3,-128
    96dc:	003b4006 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    96e0:	d9402303 	ldbu	r5,140(sp)
    96e4:	d9401d85 	stb	r5,118(sp)
    96e8:	003cae06 	br	89a4 <__alt_exception_stack_pointer+0xf80089a4>
    96ec:	d8c02303 	ldbu	r3,140(sp)
    96f0:	d8c01d85 	stb	r3,118(sp)
    96f4:	003d1406 	br	8b48 <__alt_exception_stack_pointer+0xf8008b48>
    96f8:	d8c02303 	ldbu	r3,140(sp)
    96fc:	d8c01d85 	stb	r3,118(sp)
    9700:	003cca06 	br	8a2c <__alt_exception_stack_pointer+0xf8008a2c>
    9704:	8880004c 	andi	r2,r17,1
    9708:	002b883a 	mov	r21,zero
    970c:	10000526 	beq	r2,zero,9724 <___vfiprintf_internal_r+0x14b8>
    9710:	00800c04 	movi	r2,48
    9714:	d88019c5 	stb	r2,103(sp)
    9718:	dd002817 	ldw	r20,160(sp)
    971c:	ddc019c4 	addi	r23,sp,103
    9720:	003bd506 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    9724:	0029883a 	mov	r20,zero
    9728:	ddc01a04 	addi	r23,sp,104
    972c:	003bd206 	br	8678 <__alt_exception_stack_pointer+0xf8008678>
    9730:	d9002303 	ldbu	r4,140(sp)
    9734:	d9001d85 	stb	r4,118(sp)
    9738:	003da606 	br	8dd4 <__alt_exception_stack_pointer+0xf8008dd4>
    973c:	d8c02303 	ldbu	r3,140(sp)
    9740:	d8c01d85 	stb	r3,118(sp)
    9744:	003c7606 	br	8920 <__alt_exception_stack_pointer+0xf8008920>
    9748:	d8c02303 	ldbu	r3,140(sp)
    974c:	d8c01d85 	stb	r3,118(sp)
    9750:	003c6506 	br	88e8 <__alt_exception_stack_pointer+0xf80088e8>
    9754:	d9002303 	ldbu	r4,140(sp)
    9758:	d9001d85 	stb	r4,118(sp)
    975c:	003d3d06 	br	8c54 <__alt_exception_stack_pointer+0xf8008c54>
    9760:	d8c02303 	ldbu	r3,140(sp)
    9764:	d8c01d85 	stb	r3,118(sp)
    9768:	003d1d06 	br	8be0 <__alt_exception_stack_pointer+0xf8008be0>
    976c:	d8c02303 	ldbu	r3,140(sp)
    9770:	d8c01d85 	stb	r3,118(sp)
    9774:	003d0306 	br	8b84 <__alt_exception_stack_pointer+0xf8008b84>

00009778 <__vfiprintf_internal>:
    9778:	00800074 	movhi	r2,1
    977c:	108ab404 	addi	r2,r2,10960
    9780:	300f883a 	mov	r7,r6
    9784:	280d883a 	mov	r6,r5
    9788:	200b883a 	mov	r5,r4
    978c:	11000017 	ldw	r4,0(r2)
    9790:	000826c1 	jmpi	826c <___vfiprintf_internal_r>

00009794 <__sbprintf>:
    9794:	2880030b 	ldhu	r2,12(r5)
    9798:	2ac01917 	ldw	r11,100(r5)
    979c:	2a80038b 	ldhu	r10,14(r5)
    97a0:	2a400717 	ldw	r9,28(r5)
    97a4:	2a000917 	ldw	r8,36(r5)
    97a8:	defee204 	addi	sp,sp,-1144
    97ac:	00c10004 	movi	r3,1024
    97b0:	dc011a15 	stw	r16,1128(sp)
    97b4:	10bfff4c 	andi	r2,r2,65533
    97b8:	2821883a 	mov	r16,r5
    97bc:	d8cb883a 	add	r5,sp,r3
    97c0:	dc811c15 	stw	r18,1136(sp)
    97c4:	dc411b15 	stw	r17,1132(sp)
    97c8:	dfc11d15 	stw	ra,1140(sp)
    97cc:	2025883a 	mov	r18,r4
    97d0:	d881030d 	sth	r2,1036(sp)
    97d4:	dac11915 	stw	r11,1124(sp)
    97d8:	da81038d 	sth	r10,1038(sp)
    97dc:	da410715 	stw	r9,1052(sp)
    97e0:	da010915 	stw	r8,1060(sp)
    97e4:	dec10015 	stw	sp,1024(sp)
    97e8:	dec10415 	stw	sp,1040(sp)
    97ec:	d8c10215 	stw	r3,1032(sp)
    97f0:	d8c10515 	stw	r3,1044(sp)
    97f4:	d8010615 	stw	zero,1048(sp)
    97f8:	000826c0 	call	826c <___vfiprintf_internal_r>
    97fc:	1023883a 	mov	r17,r2
    9800:	10000416 	blt	r2,zero,9814 <__sbprintf+0x80>
    9804:	d9410004 	addi	r5,sp,1024
    9808:	9009883a 	mov	r4,r18
    980c:	0005d980 	call	5d98 <_fflush_r>
    9810:	10000d1e 	bne	r2,zero,9848 <__sbprintf+0xb4>
    9814:	d881030b 	ldhu	r2,1036(sp)
    9818:	1080100c 	andi	r2,r2,64
    981c:	10000326 	beq	r2,zero,982c <__sbprintf+0x98>
    9820:	8080030b 	ldhu	r2,12(r16)
    9824:	10801014 	ori	r2,r2,64
    9828:	8080030d 	sth	r2,12(r16)
    982c:	8805883a 	mov	r2,r17
    9830:	dfc11d17 	ldw	ra,1140(sp)
    9834:	dc811c17 	ldw	r18,1136(sp)
    9838:	dc411b17 	ldw	r17,1132(sp)
    983c:	dc011a17 	ldw	r16,1128(sp)
    9840:	dec11e04 	addi	sp,sp,1144
    9844:	f800283a 	ret
    9848:	047fffc4 	movi	r17,-1
    984c:	003ff106 	br	9814 <__alt_exception_stack_pointer+0xf8009814>

00009850 <_write_r>:
    9850:	defffd04 	addi	sp,sp,-12
    9854:	2805883a 	mov	r2,r5
    9858:	dc000015 	stw	r16,0(sp)
    985c:	04000074 	movhi	r16,1
    9860:	dc400115 	stw	r17,4(sp)
    9864:	300b883a 	mov	r5,r6
    9868:	8411bf04 	addi	r16,r16,18172
    986c:	2023883a 	mov	r17,r4
    9870:	380d883a 	mov	r6,r7
    9874:	1009883a 	mov	r4,r2
    9878:	dfc00215 	stw	ra,8(sp)
    987c:	80000015 	stw	zero,0(r16)
    9880:	000e1a40 	call	e1a4 <write>
    9884:	00ffffc4 	movi	r3,-1
    9888:	10c00526 	beq	r2,r3,98a0 <_write_r+0x50>
    988c:	dfc00217 	ldw	ra,8(sp)
    9890:	dc400117 	ldw	r17,4(sp)
    9894:	dc000017 	ldw	r16,0(sp)
    9898:	dec00304 	addi	sp,sp,12
    989c:	f800283a 	ret
    98a0:	80c00017 	ldw	r3,0(r16)
    98a4:	183ff926 	beq	r3,zero,988c <__alt_exception_stack_pointer+0xf800988c>
    98a8:	88c00015 	stw	r3,0(r17)
    98ac:	003ff706 	br	988c <__alt_exception_stack_pointer+0xf800988c>

000098b0 <_close_r>:
    98b0:	defffd04 	addi	sp,sp,-12
    98b4:	dc000015 	stw	r16,0(sp)
    98b8:	04000074 	movhi	r16,1
    98bc:	dc400115 	stw	r17,4(sp)
    98c0:	8411bf04 	addi	r16,r16,18172
    98c4:	2023883a 	mov	r17,r4
    98c8:	2809883a 	mov	r4,r5
    98cc:	dfc00215 	stw	ra,8(sp)
    98d0:	80000015 	stw	zero,0(r16)
    98d4:	000d6e80 	call	d6e8 <close>
    98d8:	00ffffc4 	movi	r3,-1
    98dc:	10c00526 	beq	r2,r3,98f4 <_close_r+0x44>
    98e0:	dfc00217 	ldw	ra,8(sp)
    98e4:	dc400117 	ldw	r17,4(sp)
    98e8:	dc000017 	ldw	r16,0(sp)
    98ec:	dec00304 	addi	sp,sp,12
    98f0:	f800283a 	ret
    98f4:	80c00017 	ldw	r3,0(r16)
    98f8:	183ff926 	beq	r3,zero,98e0 <__alt_exception_stack_pointer+0xf80098e0>
    98fc:	88c00015 	stw	r3,0(r17)
    9900:	003ff706 	br	98e0 <__alt_exception_stack_pointer+0xf80098e0>

00009904 <_calloc_r>:
    9904:	defffe04 	addi	sp,sp,-8
    9908:	2805883a 	mov	r2,r5
    990c:	dc000015 	stw	r16,0(sp)
    9910:	300b883a 	mov	r5,r6
    9914:	2021883a 	mov	r16,r4
    9918:	1009883a 	mov	r4,r2
    991c:	dfc00115 	stw	ra,4(sp)
    9920:	00009780 	call	978 <__mulsi3>
    9924:	100b883a 	mov	r5,r2
    9928:	8009883a 	mov	r4,r16
    992c:	00014f00 	call	14f0 <_malloc_r>
    9930:	10002926 	beq	r2,zero,99d8 <_calloc_r+0xd4>
    9934:	11bfff17 	ldw	r6,-4(r2)
    9938:	1021883a 	mov	r16,r2
    993c:	00bfff04 	movi	r2,-4
    9940:	308c703a 	and	r6,r6,r2
    9944:	00c00904 	movi	r3,36
    9948:	308d883a 	add	r6,r6,r2
    994c:	19801636 	bltu	r3,r6,99a8 <_calloc_r+0xa4>
    9950:	008004c4 	movi	r2,19
    9954:	11800b2e 	bgeu	r2,r6,9984 <_calloc_r+0x80>
    9958:	80000015 	stw	zero,0(r16)
    995c:	80000115 	stw	zero,4(r16)
    9960:	008006c4 	movi	r2,27
    9964:	11801a2e 	bgeu	r2,r6,99d0 <_calloc_r+0xcc>
    9968:	80000215 	stw	zero,8(r16)
    996c:	80000315 	stw	zero,12(r16)
    9970:	30c0151e 	bne	r6,r3,99c8 <_calloc_r+0xc4>
    9974:	80000415 	stw	zero,16(r16)
    9978:	80800604 	addi	r2,r16,24
    997c:	80000515 	stw	zero,20(r16)
    9980:	00000106 	br	9988 <_calloc_r+0x84>
    9984:	8005883a 	mov	r2,r16
    9988:	10000015 	stw	zero,0(r2)
    998c:	10000115 	stw	zero,4(r2)
    9990:	10000215 	stw	zero,8(r2)
    9994:	8005883a 	mov	r2,r16
    9998:	dfc00117 	ldw	ra,4(sp)
    999c:	dc000017 	ldw	r16,0(sp)
    99a0:	dec00204 	addi	sp,sp,8
    99a4:	f800283a 	ret
    99a8:	000b883a 	mov	r5,zero
    99ac:	8009883a 	mov	r4,r16
    99b0:	0006c540 	call	6c54 <memset>
    99b4:	8005883a 	mov	r2,r16
    99b8:	dfc00117 	ldw	ra,4(sp)
    99bc:	dc000017 	ldw	r16,0(sp)
    99c0:	dec00204 	addi	sp,sp,8
    99c4:	f800283a 	ret
    99c8:	80800404 	addi	r2,r16,16
    99cc:	003fee06 	br	9988 <__alt_exception_stack_pointer+0xf8009988>
    99d0:	80800204 	addi	r2,r16,8
    99d4:	003fec06 	br	9988 <__alt_exception_stack_pointer+0xf8009988>
    99d8:	0005883a 	mov	r2,zero
    99dc:	003fee06 	br	9998 <__alt_exception_stack_pointer+0xf8009998>

000099e0 <_fclose_r>:
    99e0:	28003926 	beq	r5,zero,9ac8 <_fclose_r+0xe8>
    99e4:	defffc04 	addi	sp,sp,-16
    99e8:	dc400115 	stw	r17,4(sp)
    99ec:	dc000015 	stw	r16,0(sp)
    99f0:	dfc00315 	stw	ra,12(sp)
    99f4:	dc800215 	stw	r18,8(sp)
    99f8:	2023883a 	mov	r17,r4
    99fc:	2821883a 	mov	r16,r5
    9a00:	20000226 	beq	r4,zero,9a0c <_fclose_r+0x2c>
    9a04:	20800e17 	ldw	r2,56(r4)
    9a08:	10002726 	beq	r2,zero,9aa8 <_fclose_r+0xc8>
    9a0c:	8080030f 	ldh	r2,12(r16)
    9a10:	1000071e 	bne	r2,zero,9a30 <_fclose_r+0x50>
    9a14:	0005883a 	mov	r2,zero
    9a18:	dfc00317 	ldw	ra,12(sp)
    9a1c:	dc800217 	ldw	r18,8(sp)
    9a20:	dc400117 	ldw	r17,4(sp)
    9a24:	dc000017 	ldw	r16,0(sp)
    9a28:	dec00404 	addi	sp,sp,16
    9a2c:	f800283a 	ret
    9a30:	800b883a 	mov	r5,r16
    9a34:	8809883a 	mov	r4,r17
    9a38:	0005b7c0 	call	5b7c <__sflush_r>
    9a3c:	1025883a 	mov	r18,r2
    9a40:	80800b17 	ldw	r2,44(r16)
    9a44:	10000426 	beq	r2,zero,9a58 <_fclose_r+0x78>
    9a48:	81400717 	ldw	r5,28(r16)
    9a4c:	8809883a 	mov	r4,r17
    9a50:	103ee83a 	callr	r2
    9a54:	10001616 	blt	r2,zero,9ab0 <_fclose_r+0xd0>
    9a58:	8080030b 	ldhu	r2,12(r16)
    9a5c:	1080200c 	andi	r2,r2,128
    9a60:	1000151e 	bne	r2,zero,9ab8 <_fclose_r+0xd8>
    9a64:	81400c17 	ldw	r5,48(r16)
    9a68:	28000526 	beq	r5,zero,9a80 <_fclose_r+0xa0>
    9a6c:	80801004 	addi	r2,r16,64
    9a70:	28800226 	beq	r5,r2,9a7c <_fclose_r+0x9c>
    9a74:	8809883a 	mov	r4,r17
    9a78:	00062f80 	call	62f8 <_free_r>
    9a7c:	80000c15 	stw	zero,48(r16)
    9a80:	81401117 	ldw	r5,68(r16)
    9a84:	28000326 	beq	r5,zero,9a94 <_fclose_r+0xb4>
    9a88:	8809883a 	mov	r4,r17
    9a8c:	00062f80 	call	62f8 <_free_r>
    9a90:	80001115 	stw	zero,68(r16)
    9a94:	00061940 	call	6194 <__sfp_lock_acquire>
    9a98:	8000030d 	sth	zero,12(r16)
    9a9c:	00061980 	call	6198 <__sfp_lock_release>
    9aa0:	9005883a 	mov	r2,r18
    9aa4:	003fdc06 	br	9a18 <__alt_exception_stack_pointer+0xf8009a18>
    9aa8:	00061840 	call	6184 <__sinit>
    9aac:	003fd706 	br	9a0c <__alt_exception_stack_pointer+0xf8009a0c>
    9ab0:	04bfffc4 	movi	r18,-1
    9ab4:	003fe806 	br	9a58 <__alt_exception_stack_pointer+0xf8009a58>
    9ab8:	81400417 	ldw	r5,16(r16)
    9abc:	8809883a 	mov	r4,r17
    9ac0:	00062f80 	call	62f8 <_free_r>
    9ac4:	003fe706 	br	9a64 <__alt_exception_stack_pointer+0xf8009a64>
    9ac8:	0005883a 	mov	r2,zero
    9acc:	f800283a 	ret

00009ad0 <fclose>:
    9ad0:	00800074 	movhi	r2,1
    9ad4:	108ab404 	addi	r2,r2,10960
    9ad8:	200b883a 	mov	r5,r4
    9adc:	11000017 	ldw	r4,0(r2)
    9ae0:	00099e01 	jmpi	99e0 <_fclose_r>

00009ae4 <__fputwc>:
    9ae4:	defff804 	addi	sp,sp,-32
    9ae8:	dcc00415 	stw	r19,16(sp)
    9aec:	dc800315 	stw	r18,12(sp)
    9af0:	dc000115 	stw	r16,4(sp)
    9af4:	dfc00715 	stw	ra,28(sp)
    9af8:	dd400615 	stw	r21,24(sp)
    9afc:	dd000515 	stw	r20,20(sp)
    9b00:	dc400215 	stw	r17,8(sp)
    9b04:	2027883a 	mov	r19,r4
    9b08:	2825883a 	mov	r18,r5
    9b0c:	3021883a 	mov	r16,r6
    9b10:	00068180 	call	6818 <__locale_mb_cur_max>
    9b14:	00c00044 	movi	r3,1
    9b18:	10c03e26 	beq	r2,r3,9c14 <__fputwc+0x130>
    9b1c:	81c01704 	addi	r7,r16,92
    9b20:	900d883a 	mov	r6,r18
    9b24:	d80b883a 	mov	r5,sp
    9b28:	9809883a 	mov	r4,r19
    9b2c:	000ab3c0 	call	ab3c <_wcrtomb_r>
    9b30:	1029883a 	mov	r20,r2
    9b34:	00bfffc4 	movi	r2,-1
    9b38:	a0802026 	beq	r20,r2,9bbc <__fputwc+0xd8>
    9b3c:	d9400003 	ldbu	r5,0(sp)
    9b40:	a0001c26 	beq	r20,zero,9bb4 <__fputwc+0xd0>
    9b44:	0023883a 	mov	r17,zero
    9b48:	05400284 	movi	r21,10
    9b4c:	00000906 	br	9b74 <__fputwc+0x90>
    9b50:	80800017 	ldw	r2,0(r16)
    9b54:	11400005 	stb	r5,0(r2)
    9b58:	80c00017 	ldw	r3,0(r16)
    9b5c:	18c00044 	addi	r3,r3,1
    9b60:	80c00015 	stw	r3,0(r16)
    9b64:	8c400044 	addi	r17,r17,1
    9b68:	dc45883a 	add	r2,sp,r17
    9b6c:	8d00112e 	bgeu	r17,r20,9bb4 <__fputwc+0xd0>
    9b70:	11400003 	ldbu	r5,0(r2)
    9b74:	80c00217 	ldw	r3,8(r16)
    9b78:	18ffffc4 	addi	r3,r3,-1
    9b7c:	80c00215 	stw	r3,8(r16)
    9b80:	183ff30e 	bge	r3,zero,9b50 <__alt_exception_stack_pointer+0xf8009b50>
    9b84:	80800617 	ldw	r2,24(r16)
    9b88:	18801916 	blt	r3,r2,9bf0 <__fputwc+0x10c>
    9b8c:	80800017 	ldw	r2,0(r16)
    9b90:	11400005 	stb	r5,0(r2)
    9b94:	80800017 	ldw	r2,0(r16)
    9b98:	10c00003 	ldbu	r3,0(r2)
    9b9c:	10800044 	addi	r2,r2,1
    9ba0:	1d402326 	beq	r3,r21,9c30 <__fputwc+0x14c>
    9ba4:	80800015 	stw	r2,0(r16)
    9ba8:	8c400044 	addi	r17,r17,1
    9bac:	dc45883a 	add	r2,sp,r17
    9bb0:	8d3fef36 	bltu	r17,r20,9b70 <__alt_exception_stack_pointer+0xf8009b70>
    9bb4:	9005883a 	mov	r2,r18
    9bb8:	00000406 	br	9bcc <__fputwc+0xe8>
    9bbc:	80c0030b 	ldhu	r3,12(r16)
    9bc0:	a005883a 	mov	r2,r20
    9bc4:	18c01014 	ori	r3,r3,64
    9bc8:	80c0030d 	sth	r3,12(r16)
    9bcc:	dfc00717 	ldw	ra,28(sp)
    9bd0:	dd400617 	ldw	r21,24(sp)
    9bd4:	dd000517 	ldw	r20,20(sp)
    9bd8:	dcc00417 	ldw	r19,16(sp)
    9bdc:	dc800317 	ldw	r18,12(sp)
    9be0:	dc400217 	ldw	r17,8(sp)
    9be4:	dc000117 	ldw	r16,4(sp)
    9be8:	dec00804 	addi	sp,sp,32
    9bec:	f800283a 	ret
    9bf0:	800d883a 	mov	r6,r16
    9bf4:	29403fcc 	andi	r5,r5,255
    9bf8:	9809883a 	mov	r4,r19
    9bfc:	000a9e40 	call	a9e4 <__swbuf_r>
    9c00:	10bfffe0 	cmpeqi	r2,r2,-1
    9c04:	10803fcc 	andi	r2,r2,255
    9c08:	103fd626 	beq	r2,zero,9b64 <__alt_exception_stack_pointer+0xf8009b64>
    9c0c:	00bfffc4 	movi	r2,-1
    9c10:	003fee06 	br	9bcc <__alt_exception_stack_pointer+0xf8009bcc>
    9c14:	90ffffc4 	addi	r3,r18,-1
    9c18:	01003f84 	movi	r4,254
    9c1c:	20ffbf36 	bltu	r4,r3,9b1c <__alt_exception_stack_pointer+0xf8009b1c>
    9c20:	900b883a 	mov	r5,r18
    9c24:	dc800005 	stb	r18,0(sp)
    9c28:	1029883a 	mov	r20,r2
    9c2c:	003fc506 	br	9b44 <__alt_exception_stack_pointer+0xf8009b44>
    9c30:	800d883a 	mov	r6,r16
    9c34:	a80b883a 	mov	r5,r21
    9c38:	9809883a 	mov	r4,r19
    9c3c:	000a9e40 	call	a9e4 <__swbuf_r>
    9c40:	10bfffe0 	cmpeqi	r2,r2,-1
    9c44:	003fef06 	br	9c04 <__alt_exception_stack_pointer+0xf8009c04>

00009c48 <_fputwc_r>:
    9c48:	3080030b 	ldhu	r2,12(r6)
    9c4c:	10c8000c 	andi	r3,r2,8192
    9c50:	1800051e 	bne	r3,zero,9c68 <_fputwc_r+0x20>
    9c54:	30c01917 	ldw	r3,100(r6)
    9c58:	10880014 	ori	r2,r2,8192
    9c5c:	3080030d 	sth	r2,12(r6)
    9c60:	18880014 	ori	r2,r3,8192
    9c64:	30801915 	stw	r2,100(r6)
    9c68:	0009ae41 	jmpi	9ae4 <__fputwc>

00009c6c <fputwc>:
    9c6c:	00800074 	movhi	r2,1
    9c70:	defffc04 	addi	sp,sp,-16
    9c74:	108ab404 	addi	r2,r2,10960
    9c78:	dc000115 	stw	r16,4(sp)
    9c7c:	14000017 	ldw	r16,0(r2)
    9c80:	dc400215 	stw	r17,8(sp)
    9c84:	dfc00315 	stw	ra,12(sp)
    9c88:	2023883a 	mov	r17,r4
    9c8c:	80000226 	beq	r16,zero,9c98 <fputwc+0x2c>
    9c90:	80800e17 	ldw	r2,56(r16)
    9c94:	10001026 	beq	r2,zero,9cd8 <fputwc+0x6c>
    9c98:	2880030b 	ldhu	r2,12(r5)
    9c9c:	10c8000c 	andi	r3,r2,8192
    9ca0:	1800051e 	bne	r3,zero,9cb8 <fputwc+0x4c>
    9ca4:	28c01917 	ldw	r3,100(r5)
    9ca8:	10880014 	ori	r2,r2,8192
    9cac:	2880030d 	sth	r2,12(r5)
    9cb0:	18880014 	ori	r2,r3,8192
    9cb4:	28801915 	stw	r2,100(r5)
    9cb8:	280d883a 	mov	r6,r5
    9cbc:	8009883a 	mov	r4,r16
    9cc0:	880b883a 	mov	r5,r17
    9cc4:	dfc00317 	ldw	ra,12(sp)
    9cc8:	dc400217 	ldw	r17,8(sp)
    9ccc:	dc000117 	ldw	r16,4(sp)
    9cd0:	dec00404 	addi	sp,sp,16
    9cd4:	0009ae41 	jmpi	9ae4 <__fputwc>
    9cd8:	8009883a 	mov	r4,r16
    9cdc:	d9400015 	stw	r5,0(sp)
    9ce0:	00061840 	call	6184 <__sinit>
    9ce4:	d9400017 	ldw	r5,0(sp)
    9ce8:	003feb06 	br	9c98 <__alt_exception_stack_pointer+0xf8009c98>

00009cec <_fstat_r>:
    9cec:	defffd04 	addi	sp,sp,-12
    9cf0:	2805883a 	mov	r2,r5
    9cf4:	dc000015 	stw	r16,0(sp)
    9cf8:	04000074 	movhi	r16,1
    9cfc:	dc400115 	stw	r17,4(sp)
    9d00:	8411bf04 	addi	r16,r16,18172
    9d04:	2023883a 	mov	r17,r4
    9d08:	300b883a 	mov	r5,r6
    9d0c:	1009883a 	mov	r4,r2
    9d10:	dfc00215 	stw	ra,8(sp)
    9d14:	80000015 	stw	zero,0(r16)
    9d18:	000d9d80 	call	d9d8 <fstat>
    9d1c:	00ffffc4 	movi	r3,-1
    9d20:	10c00526 	beq	r2,r3,9d38 <_fstat_r+0x4c>
    9d24:	dfc00217 	ldw	ra,8(sp)
    9d28:	dc400117 	ldw	r17,4(sp)
    9d2c:	dc000017 	ldw	r16,0(sp)
    9d30:	dec00304 	addi	sp,sp,12
    9d34:	f800283a 	ret
    9d38:	80c00017 	ldw	r3,0(r16)
    9d3c:	183ff926 	beq	r3,zero,9d24 <__alt_exception_stack_pointer+0xf8009d24>
    9d40:	88c00015 	stw	r3,0(r17)
    9d44:	003ff706 	br	9d24 <__alt_exception_stack_pointer+0xf8009d24>

00009d48 <__sfvwrite_r>:
    9d48:	30800217 	ldw	r2,8(r6)
    9d4c:	10006726 	beq	r2,zero,9eec <__sfvwrite_r+0x1a4>
    9d50:	28c0030b 	ldhu	r3,12(r5)
    9d54:	defff404 	addi	sp,sp,-48
    9d58:	dd400715 	stw	r21,28(sp)
    9d5c:	dd000615 	stw	r20,24(sp)
    9d60:	dc000215 	stw	r16,8(sp)
    9d64:	dfc00b15 	stw	ra,44(sp)
    9d68:	df000a15 	stw	fp,40(sp)
    9d6c:	ddc00915 	stw	r23,36(sp)
    9d70:	dd800815 	stw	r22,32(sp)
    9d74:	dcc00515 	stw	r19,20(sp)
    9d78:	dc800415 	stw	r18,16(sp)
    9d7c:	dc400315 	stw	r17,12(sp)
    9d80:	1880020c 	andi	r2,r3,8
    9d84:	2821883a 	mov	r16,r5
    9d88:	202b883a 	mov	r21,r4
    9d8c:	3029883a 	mov	r20,r6
    9d90:	10002726 	beq	r2,zero,9e30 <__sfvwrite_r+0xe8>
    9d94:	28800417 	ldw	r2,16(r5)
    9d98:	10002526 	beq	r2,zero,9e30 <__sfvwrite_r+0xe8>
    9d9c:	1880008c 	andi	r2,r3,2
    9da0:	a4400017 	ldw	r17,0(r20)
    9da4:	10002a26 	beq	r2,zero,9e50 <__sfvwrite_r+0x108>
    9da8:	05a00034 	movhi	r22,32768
    9dac:	0027883a 	mov	r19,zero
    9db0:	0025883a 	mov	r18,zero
    9db4:	b5bf0004 	addi	r22,r22,-1024
    9db8:	980d883a 	mov	r6,r19
    9dbc:	a809883a 	mov	r4,r21
    9dc0:	90004626 	beq	r18,zero,9edc <__sfvwrite_r+0x194>
    9dc4:	900f883a 	mov	r7,r18
    9dc8:	b480022e 	bgeu	r22,r18,9dd4 <__sfvwrite_r+0x8c>
    9dcc:	01e00034 	movhi	r7,32768
    9dd0:	39ff0004 	addi	r7,r7,-1024
    9dd4:	80800917 	ldw	r2,36(r16)
    9dd8:	81400717 	ldw	r5,28(r16)
    9ddc:	103ee83a 	callr	r2
    9de0:	00805a0e 	bge	zero,r2,9f4c <__sfvwrite_r+0x204>
    9de4:	a0c00217 	ldw	r3,8(r20)
    9de8:	98a7883a 	add	r19,r19,r2
    9dec:	90a5c83a 	sub	r18,r18,r2
    9df0:	1885c83a 	sub	r2,r3,r2
    9df4:	a0800215 	stw	r2,8(r20)
    9df8:	103fef1e 	bne	r2,zero,9db8 <__alt_exception_stack_pointer+0xf8009db8>
    9dfc:	0005883a 	mov	r2,zero
    9e00:	dfc00b17 	ldw	ra,44(sp)
    9e04:	df000a17 	ldw	fp,40(sp)
    9e08:	ddc00917 	ldw	r23,36(sp)
    9e0c:	dd800817 	ldw	r22,32(sp)
    9e10:	dd400717 	ldw	r21,28(sp)
    9e14:	dd000617 	ldw	r20,24(sp)
    9e18:	dcc00517 	ldw	r19,20(sp)
    9e1c:	dc800417 	ldw	r18,16(sp)
    9e20:	dc400317 	ldw	r17,12(sp)
    9e24:	dc000217 	ldw	r16,8(sp)
    9e28:	dec00c04 	addi	sp,sp,48
    9e2c:	f800283a 	ret
    9e30:	800b883a 	mov	r5,r16
    9e34:	a809883a 	mov	r4,r21
    9e38:	00041780 	call	4178 <__swsetup_r>
    9e3c:	1000ee1e 	bne	r2,zero,a1f8 <__sfvwrite_r+0x4b0>
    9e40:	80c0030b 	ldhu	r3,12(r16)
    9e44:	a4400017 	ldw	r17,0(r20)
    9e48:	1880008c 	andi	r2,r3,2
    9e4c:	103fd61e 	bne	r2,zero,9da8 <__alt_exception_stack_pointer+0xf8009da8>
    9e50:	1880004c 	andi	r2,r3,1
    9e54:	1000421e 	bne	r2,zero,9f60 <__sfvwrite_r+0x218>
    9e58:	0039883a 	mov	fp,zero
    9e5c:	0025883a 	mov	r18,zero
    9e60:	90001a26 	beq	r18,zero,9ecc <__sfvwrite_r+0x184>
    9e64:	1880800c 	andi	r2,r3,512
    9e68:	84c00217 	ldw	r19,8(r16)
    9e6c:	10002126 	beq	r2,zero,9ef4 <__sfvwrite_r+0x1ac>
    9e70:	982f883a 	mov	r23,r19
    9e74:	94c09636 	bltu	r18,r19,a0d0 <__sfvwrite_r+0x388>
    9e78:	1881200c 	andi	r2,r3,1152
    9e7c:	1000a11e 	bne	r2,zero,a104 <__sfvwrite_r+0x3bc>
    9e80:	81000017 	ldw	r4,0(r16)
    9e84:	b80d883a 	mov	r6,r23
    9e88:	e00b883a 	mov	r5,fp
    9e8c:	000a2c40 	call	a2c4 <memmove>
    9e90:	80c00217 	ldw	r3,8(r16)
    9e94:	81000017 	ldw	r4,0(r16)
    9e98:	9005883a 	mov	r2,r18
    9e9c:	1ce7c83a 	sub	r19,r3,r19
    9ea0:	25cf883a 	add	r7,r4,r23
    9ea4:	84c00215 	stw	r19,8(r16)
    9ea8:	81c00015 	stw	r7,0(r16)
    9eac:	a0c00217 	ldw	r3,8(r20)
    9eb0:	e0b9883a 	add	fp,fp,r2
    9eb4:	90a5c83a 	sub	r18,r18,r2
    9eb8:	18a7c83a 	sub	r19,r3,r2
    9ebc:	a4c00215 	stw	r19,8(r20)
    9ec0:	983fce26 	beq	r19,zero,9dfc <__alt_exception_stack_pointer+0xf8009dfc>
    9ec4:	80c0030b 	ldhu	r3,12(r16)
    9ec8:	903fe61e 	bne	r18,zero,9e64 <__alt_exception_stack_pointer+0xf8009e64>
    9ecc:	8f000017 	ldw	fp,0(r17)
    9ed0:	8c800117 	ldw	r18,4(r17)
    9ed4:	8c400204 	addi	r17,r17,8
    9ed8:	003fe106 	br	9e60 <__alt_exception_stack_pointer+0xf8009e60>
    9edc:	8cc00017 	ldw	r19,0(r17)
    9ee0:	8c800117 	ldw	r18,4(r17)
    9ee4:	8c400204 	addi	r17,r17,8
    9ee8:	003fb306 	br	9db8 <__alt_exception_stack_pointer+0xf8009db8>
    9eec:	0005883a 	mov	r2,zero
    9ef0:	f800283a 	ret
    9ef4:	81000017 	ldw	r4,0(r16)
    9ef8:	80800417 	ldw	r2,16(r16)
    9efc:	11005a36 	bltu	r2,r4,a068 <__sfvwrite_r+0x320>
    9f00:	85c00517 	ldw	r23,20(r16)
    9f04:	95c05836 	bltu	r18,r23,a068 <__sfvwrite_r+0x320>
    9f08:	00a00034 	movhi	r2,32768
    9f0c:	10bfffc4 	addi	r2,r2,-1
    9f10:	9009883a 	mov	r4,r18
    9f14:	1480012e 	bgeu	r2,r18,9f1c <__sfvwrite_r+0x1d4>
    9f18:	1009883a 	mov	r4,r2
    9f1c:	b80b883a 	mov	r5,r23
    9f20:	00007c40 	call	7c4 <__divsi3>
    9f24:	b80b883a 	mov	r5,r23
    9f28:	1009883a 	mov	r4,r2
    9f2c:	00009780 	call	978 <__mulsi3>
    9f30:	81400717 	ldw	r5,28(r16)
    9f34:	80c00917 	ldw	r3,36(r16)
    9f38:	100f883a 	mov	r7,r2
    9f3c:	e00d883a 	mov	r6,fp
    9f40:	a809883a 	mov	r4,r21
    9f44:	183ee83a 	callr	r3
    9f48:	00bfd816 	blt	zero,r2,9eac <__alt_exception_stack_pointer+0xf8009eac>
    9f4c:	8080030b 	ldhu	r2,12(r16)
    9f50:	10801014 	ori	r2,r2,64
    9f54:	8080030d 	sth	r2,12(r16)
    9f58:	00bfffc4 	movi	r2,-1
    9f5c:	003fa806 	br	9e00 <__alt_exception_stack_pointer+0xf8009e00>
    9f60:	0027883a 	mov	r19,zero
    9f64:	0011883a 	mov	r8,zero
    9f68:	0039883a 	mov	fp,zero
    9f6c:	0025883a 	mov	r18,zero
    9f70:	90001f26 	beq	r18,zero,9ff0 <__sfvwrite_r+0x2a8>
    9f74:	40005a26 	beq	r8,zero,a0e0 <__sfvwrite_r+0x398>
    9f78:	982d883a 	mov	r22,r19
    9f7c:	94c0012e 	bgeu	r18,r19,9f84 <__sfvwrite_r+0x23c>
    9f80:	902d883a 	mov	r22,r18
    9f84:	81000017 	ldw	r4,0(r16)
    9f88:	80800417 	ldw	r2,16(r16)
    9f8c:	b02f883a 	mov	r23,r22
    9f90:	81c00517 	ldw	r7,20(r16)
    9f94:	1100032e 	bgeu	r2,r4,9fa4 <__sfvwrite_r+0x25c>
    9f98:	80c00217 	ldw	r3,8(r16)
    9f9c:	38c7883a 	add	r3,r7,r3
    9fa0:	1d801816 	blt	r3,r22,a004 <__sfvwrite_r+0x2bc>
    9fa4:	b1c03e16 	blt	r22,r7,a0a0 <__sfvwrite_r+0x358>
    9fa8:	80800917 	ldw	r2,36(r16)
    9fac:	81400717 	ldw	r5,28(r16)
    9fb0:	e00d883a 	mov	r6,fp
    9fb4:	da000115 	stw	r8,4(sp)
    9fb8:	a809883a 	mov	r4,r21
    9fbc:	103ee83a 	callr	r2
    9fc0:	102f883a 	mov	r23,r2
    9fc4:	da000117 	ldw	r8,4(sp)
    9fc8:	00bfe00e 	bge	zero,r2,9f4c <__alt_exception_stack_pointer+0xf8009f4c>
    9fcc:	9de7c83a 	sub	r19,r19,r23
    9fd0:	98001f26 	beq	r19,zero,a050 <__sfvwrite_r+0x308>
    9fd4:	a0800217 	ldw	r2,8(r20)
    9fd8:	e5f9883a 	add	fp,fp,r23
    9fdc:	95e5c83a 	sub	r18,r18,r23
    9fe0:	15efc83a 	sub	r23,r2,r23
    9fe4:	a5c00215 	stw	r23,8(r20)
    9fe8:	b83f8426 	beq	r23,zero,9dfc <__alt_exception_stack_pointer+0xf8009dfc>
    9fec:	903fe11e 	bne	r18,zero,9f74 <__alt_exception_stack_pointer+0xf8009f74>
    9ff0:	8f000017 	ldw	fp,0(r17)
    9ff4:	8c800117 	ldw	r18,4(r17)
    9ff8:	0011883a 	mov	r8,zero
    9ffc:	8c400204 	addi	r17,r17,8
    a000:	003fdb06 	br	9f70 <__alt_exception_stack_pointer+0xf8009f70>
    a004:	180d883a 	mov	r6,r3
    a008:	e00b883a 	mov	r5,fp
    a00c:	da000115 	stw	r8,4(sp)
    a010:	d8c00015 	stw	r3,0(sp)
    a014:	000a2c40 	call	a2c4 <memmove>
    a018:	d8c00017 	ldw	r3,0(sp)
    a01c:	80800017 	ldw	r2,0(r16)
    a020:	800b883a 	mov	r5,r16
    a024:	a809883a 	mov	r4,r21
    a028:	10c5883a 	add	r2,r2,r3
    a02c:	80800015 	stw	r2,0(r16)
    a030:	d8c00015 	stw	r3,0(sp)
    a034:	0005d980 	call	5d98 <_fflush_r>
    a038:	d8c00017 	ldw	r3,0(sp)
    a03c:	da000117 	ldw	r8,4(sp)
    a040:	103fc21e 	bne	r2,zero,9f4c <__alt_exception_stack_pointer+0xf8009f4c>
    a044:	182f883a 	mov	r23,r3
    a048:	9de7c83a 	sub	r19,r19,r23
    a04c:	983fe11e 	bne	r19,zero,9fd4 <__alt_exception_stack_pointer+0xf8009fd4>
    a050:	800b883a 	mov	r5,r16
    a054:	a809883a 	mov	r4,r21
    a058:	0005d980 	call	5d98 <_fflush_r>
    a05c:	103fbb1e 	bne	r2,zero,9f4c <__alt_exception_stack_pointer+0xf8009f4c>
    a060:	0011883a 	mov	r8,zero
    a064:	003fdb06 	br	9fd4 <__alt_exception_stack_pointer+0xf8009fd4>
    a068:	94c0012e 	bgeu	r18,r19,a070 <__sfvwrite_r+0x328>
    a06c:	9027883a 	mov	r19,r18
    a070:	980d883a 	mov	r6,r19
    a074:	e00b883a 	mov	r5,fp
    a078:	000a2c40 	call	a2c4 <memmove>
    a07c:	80800217 	ldw	r2,8(r16)
    a080:	80c00017 	ldw	r3,0(r16)
    a084:	14c5c83a 	sub	r2,r2,r19
    a088:	1cc7883a 	add	r3,r3,r19
    a08c:	80800215 	stw	r2,8(r16)
    a090:	80c00015 	stw	r3,0(r16)
    a094:	10004326 	beq	r2,zero,a1a4 <__sfvwrite_r+0x45c>
    a098:	9805883a 	mov	r2,r19
    a09c:	003f8306 	br	9eac <__alt_exception_stack_pointer+0xf8009eac>
    a0a0:	b00d883a 	mov	r6,r22
    a0a4:	e00b883a 	mov	r5,fp
    a0a8:	da000115 	stw	r8,4(sp)
    a0ac:	000a2c40 	call	a2c4 <memmove>
    a0b0:	80800217 	ldw	r2,8(r16)
    a0b4:	80c00017 	ldw	r3,0(r16)
    a0b8:	da000117 	ldw	r8,4(sp)
    a0bc:	1585c83a 	sub	r2,r2,r22
    a0c0:	1dad883a 	add	r22,r3,r22
    a0c4:	80800215 	stw	r2,8(r16)
    a0c8:	85800015 	stw	r22,0(r16)
    a0cc:	003fbf06 	br	9fcc <__alt_exception_stack_pointer+0xf8009fcc>
    a0d0:	81000017 	ldw	r4,0(r16)
    a0d4:	9027883a 	mov	r19,r18
    a0d8:	902f883a 	mov	r23,r18
    a0dc:	003f6906 	br	9e84 <__alt_exception_stack_pointer+0xf8009e84>
    a0e0:	900d883a 	mov	r6,r18
    a0e4:	01400284 	movi	r5,10
    a0e8:	e009883a 	mov	r4,fp
    a0ec:	0006a280 	call	6a28 <memchr>
    a0f0:	10003e26 	beq	r2,zero,a1ec <__sfvwrite_r+0x4a4>
    a0f4:	10800044 	addi	r2,r2,1
    a0f8:	1727c83a 	sub	r19,r2,fp
    a0fc:	02000044 	movi	r8,1
    a100:	003f9d06 	br	9f78 <__alt_exception_stack_pointer+0xf8009f78>
    a104:	80800517 	ldw	r2,20(r16)
    a108:	81400417 	ldw	r5,16(r16)
    a10c:	81c00017 	ldw	r7,0(r16)
    a110:	10a7883a 	add	r19,r2,r2
    a114:	9885883a 	add	r2,r19,r2
    a118:	1026d7fa 	srli	r19,r2,31
    a11c:	396dc83a 	sub	r22,r7,r5
    a120:	b1000044 	addi	r4,r22,1
    a124:	9885883a 	add	r2,r19,r2
    a128:	1027d07a 	srai	r19,r2,1
    a12c:	2485883a 	add	r2,r4,r18
    a130:	980d883a 	mov	r6,r19
    a134:	9880022e 	bgeu	r19,r2,a140 <__sfvwrite_r+0x3f8>
    a138:	1027883a 	mov	r19,r2
    a13c:	100d883a 	mov	r6,r2
    a140:	18c1000c 	andi	r3,r3,1024
    a144:	18001c26 	beq	r3,zero,a1b8 <__sfvwrite_r+0x470>
    a148:	300b883a 	mov	r5,r6
    a14c:	a809883a 	mov	r4,r21
    a150:	00014f00 	call	14f0 <_malloc_r>
    a154:	102f883a 	mov	r23,r2
    a158:	10002926 	beq	r2,zero,a200 <__sfvwrite_r+0x4b8>
    a15c:	81400417 	ldw	r5,16(r16)
    a160:	b00d883a 	mov	r6,r22
    a164:	1009883a 	mov	r4,r2
    a168:	0006b0c0 	call	6b0c <memcpy>
    a16c:	8080030b 	ldhu	r2,12(r16)
    a170:	00fedfc4 	movi	r3,-1153
    a174:	10c4703a 	and	r2,r2,r3
    a178:	10802014 	ori	r2,r2,128
    a17c:	8080030d 	sth	r2,12(r16)
    a180:	bd89883a 	add	r4,r23,r22
    a184:	9d8fc83a 	sub	r7,r19,r22
    a188:	85c00415 	stw	r23,16(r16)
    a18c:	84c00515 	stw	r19,20(r16)
    a190:	81000015 	stw	r4,0(r16)
    a194:	9027883a 	mov	r19,r18
    a198:	81c00215 	stw	r7,8(r16)
    a19c:	902f883a 	mov	r23,r18
    a1a0:	003f3806 	br	9e84 <__alt_exception_stack_pointer+0xf8009e84>
    a1a4:	800b883a 	mov	r5,r16
    a1a8:	a809883a 	mov	r4,r21
    a1ac:	0005d980 	call	5d98 <_fflush_r>
    a1b0:	103fb926 	beq	r2,zero,a098 <__alt_exception_stack_pointer+0xf800a098>
    a1b4:	003f6506 	br	9f4c <__alt_exception_stack_pointer+0xf8009f4c>
    a1b8:	a809883a 	mov	r4,r21
    a1bc:	000a4800 	call	a480 <_realloc_r>
    a1c0:	102f883a 	mov	r23,r2
    a1c4:	103fee1e 	bne	r2,zero,a180 <__alt_exception_stack_pointer+0xf800a180>
    a1c8:	81400417 	ldw	r5,16(r16)
    a1cc:	a809883a 	mov	r4,r21
    a1d0:	00062f80 	call	62f8 <_free_r>
    a1d4:	8080030b 	ldhu	r2,12(r16)
    a1d8:	00ffdfc4 	movi	r3,-129
    a1dc:	1884703a 	and	r2,r3,r2
    a1e0:	00c00304 	movi	r3,12
    a1e4:	a8c00015 	stw	r3,0(r21)
    a1e8:	003f5906 	br	9f50 <__alt_exception_stack_pointer+0xf8009f50>
    a1ec:	94c00044 	addi	r19,r18,1
    a1f0:	02000044 	movi	r8,1
    a1f4:	003f6006 	br	9f78 <__alt_exception_stack_pointer+0xf8009f78>
    a1f8:	00bfffc4 	movi	r2,-1
    a1fc:	003f0006 	br	9e00 <__alt_exception_stack_pointer+0xf8009e00>
    a200:	00800304 	movi	r2,12
    a204:	a8800015 	stw	r2,0(r21)
    a208:	8080030b 	ldhu	r2,12(r16)
    a20c:	003f5006 	br	9f50 <__alt_exception_stack_pointer+0xf8009f50>

0000a210 <_isatty_r>:
    a210:	defffd04 	addi	sp,sp,-12
    a214:	dc000015 	stw	r16,0(sp)
    a218:	04000074 	movhi	r16,1
    a21c:	dc400115 	stw	r17,4(sp)
    a220:	8411bf04 	addi	r16,r16,18172
    a224:	2023883a 	mov	r17,r4
    a228:	2809883a 	mov	r4,r5
    a22c:	dfc00215 	stw	ra,8(sp)
    a230:	80000015 	stw	zero,0(r16)
    a234:	000dacc0 	call	dacc <isatty>
    a238:	00ffffc4 	movi	r3,-1
    a23c:	10c00526 	beq	r2,r3,a254 <_isatty_r+0x44>
    a240:	dfc00217 	ldw	ra,8(sp)
    a244:	dc400117 	ldw	r17,4(sp)
    a248:	dc000017 	ldw	r16,0(sp)
    a24c:	dec00304 	addi	sp,sp,12
    a250:	f800283a 	ret
    a254:	80c00017 	ldw	r3,0(r16)
    a258:	183ff926 	beq	r3,zero,a240 <__alt_exception_stack_pointer+0xf800a240>
    a25c:	88c00015 	stw	r3,0(r17)
    a260:	003ff706 	br	a240 <__alt_exception_stack_pointer+0xf800a240>

0000a264 <_lseek_r>:
    a264:	defffd04 	addi	sp,sp,-12
    a268:	2805883a 	mov	r2,r5
    a26c:	dc000015 	stw	r16,0(sp)
    a270:	04000074 	movhi	r16,1
    a274:	dc400115 	stw	r17,4(sp)
    a278:	300b883a 	mov	r5,r6
    a27c:	8411bf04 	addi	r16,r16,18172
    a280:	2023883a 	mov	r17,r4
    a284:	380d883a 	mov	r6,r7
    a288:	1009883a 	mov	r4,r2
    a28c:	dfc00215 	stw	ra,8(sp)
    a290:	80000015 	stw	zero,0(r16)
    a294:	000dca00 	call	dca0 <lseek>
    a298:	00ffffc4 	movi	r3,-1
    a29c:	10c00526 	beq	r2,r3,a2b4 <_lseek_r+0x50>
    a2a0:	dfc00217 	ldw	ra,8(sp)
    a2a4:	dc400117 	ldw	r17,4(sp)
    a2a8:	dc000017 	ldw	r16,0(sp)
    a2ac:	dec00304 	addi	sp,sp,12
    a2b0:	f800283a 	ret
    a2b4:	80c00017 	ldw	r3,0(r16)
    a2b8:	183ff926 	beq	r3,zero,a2a0 <__alt_exception_stack_pointer+0xf800a2a0>
    a2bc:	88c00015 	stw	r3,0(r17)
    a2c0:	003ff706 	br	a2a0 <__alt_exception_stack_pointer+0xf800a2a0>

0000a2c4 <memmove>:
    a2c4:	2005883a 	mov	r2,r4
    a2c8:	29000b2e 	bgeu	r5,r4,a2f8 <memmove+0x34>
    a2cc:	298f883a 	add	r7,r5,r6
    a2d0:	21c0092e 	bgeu	r4,r7,a2f8 <memmove+0x34>
    a2d4:	2187883a 	add	r3,r4,r6
    a2d8:	198bc83a 	sub	r5,r3,r6
    a2dc:	30004826 	beq	r6,zero,a400 <memmove+0x13c>
    a2e0:	39ffffc4 	addi	r7,r7,-1
    a2e4:	39000003 	ldbu	r4,0(r7)
    a2e8:	18ffffc4 	addi	r3,r3,-1
    a2ec:	19000005 	stb	r4,0(r3)
    a2f0:	28fffb1e 	bne	r5,r3,a2e0 <__alt_exception_stack_pointer+0xf800a2e0>
    a2f4:	f800283a 	ret
    a2f8:	00c003c4 	movi	r3,15
    a2fc:	1980412e 	bgeu	r3,r6,a404 <memmove+0x140>
    a300:	2886b03a 	or	r3,r5,r2
    a304:	18c000cc 	andi	r3,r3,3
    a308:	1800401e 	bne	r3,zero,a40c <memmove+0x148>
    a30c:	33fffc04 	addi	r15,r6,-16
    a310:	781ed13a 	srli	r15,r15,4
    a314:	28c00104 	addi	r3,r5,4
    a318:	13400104 	addi	r13,r2,4
    a31c:	781c913a 	slli	r14,r15,4
    a320:	2b000204 	addi	r12,r5,8
    a324:	12c00204 	addi	r11,r2,8
    a328:	73800504 	addi	r14,r14,20
    a32c:	2a800304 	addi	r10,r5,12
    a330:	12400304 	addi	r9,r2,12
    a334:	2b9d883a 	add	r14,r5,r14
    a338:	2811883a 	mov	r8,r5
    a33c:	100f883a 	mov	r7,r2
    a340:	41000017 	ldw	r4,0(r8)
    a344:	39c00404 	addi	r7,r7,16
    a348:	18c00404 	addi	r3,r3,16
    a34c:	393ffc15 	stw	r4,-16(r7)
    a350:	193ffc17 	ldw	r4,-16(r3)
    a354:	6b400404 	addi	r13,r13,16
    a358:	5ac00404 	addi	r11,r11,16
    a35c:	693ffc15 	stw	r4,-16(r13)
    a360:	61000017 	ldw	r4,0(r12)
    a364:	4a400404 	addi	r9,r9,16
    a368:	42000404 	addi	r8,r8,16
    a36c:	593ffc15 	stw	r4,-16(r11)
    a370:	51000017 	ldw	r4,0(r10)
    a374:	63000404 	addi	r12,r12,16
    a378:	52800404 	addi	r10,r10,16
    a37c:	493ffc15 	stw	r4,-16(r9)
    a380:	1bbfef1e 	bne	r3,r14,a340 <__alt_exception_stack_pointer+0xf800a340>
    a384:	79000044 	addi	r4,r15,1
    a388:	2008913a 	slli	r4,r4,4
    a38c:	328003cc 	andi	r10,r6,15
    a390:	02c000c4 	movi	r11,3
    a394:	1107883a 	add	r3,r2,r4
    a398:	290b883a 	add	r5,r5,r4
    a39c:	5a801e2e 	bgeu	r11,r10,a418 <memmove+0x154>
    a3a0:	1813883a 	mov	r9,r3
    a3a4:	2811883a 	mov	r8,r5
    a3a8:	500f883a 	mov	r7,r10
    a3ac:	41000017 	ldw	r4,0(r8)
    a3b0:	4a400104 	addi	r9,r9,4
    a3b4:	39ffff04 	addi	r7,r7,-4
    a3b8:	493fff15 	stw	r4,-4(r9)
    a3bc:	42000104 	addi	r8,r8,4
    a3c0:	59fffa36 	bltu	r11,r7,a3ac <__alt_exception_stack_pointer+0xf800a3ac>
    a3c4:	513fff04 	addi	r4,r10,-4
    a3c8:	2008d0ba 	srli	r4,r4,2
    a3cc:	318000cc 	andi	r6,r6,3
    a3d0:	21000044 	addi	r4,r4,1
    a3d4:	2109883a 	add	r4,r4,r4
    a3d8:	2109883a 	add	r4,r4,r4
    a3dc:	1907883a 	add	r3,r3,r4
    a3e0:	290b883a 	add	r5,r5,r4
    a3e4:	30000b26 	beq	r6,zero,a414 <memmove+0x150>
    a3e8:	198d883a 	add	r6,r3,r6
    a3ec:	29c00003 	ldbu	r7,0(r5)
    a3f0:	18c00044 	addi	r3,r3,1
    a3f4:	29400044 	addi	r5,r5,1
    a3f8:	19ffffc5 	stb	r7,-1(r3)
    a3fc:	19bffb1e 	bne	r3,r6,a3ec <__alt_exception_stack_pointer+0xf800a3ec>
    a400:	f800283a 	ret
    a404:	1007883a 	mov	r3,r2
    a408:	003ff606 	br	a3e4 <__alt_exception_stack_pointer+0xf800a3e4>
    a40c:	1007883a 	mov	r3,r2
    a410:	003ff506 	br	a3e8 <__alt_exception_stack_pointer+0xf800a3e8>
    a414:	f800283a 	ret
    a418:	500d883a 	mov	r6,r10
    a41c:	003ff106 	br	a3e4 <__alt_exception_stack_pointer+0xf800a3e4>

0000a420 <_read_r>:
    a420:	defffd04 	addi	sp,sp,-12
    a424:	2805883a 	mov	r2,r5
    a428:	dc000015 	stw	r16,0(sp)
    a42c:	04000074 	movhi	r16,1
    a430:	dc400115 	stw	r17,4(sp)
    a434:	300b883a 	mov	r5,r6
    a438:	8411bf04 	addi	r16,r16,18172
    a43c:	2023883a 	mov	r17,r4
    a440:	380d883a 	mov	r6,r7
    a444:	1009883a 	mov	r4,r2
    a448:	dfc00215 	stw	ra,8(sp)
    a44c:	80000015 	stw	zero,0(r16)
    a450:	000de7c0 	call	de7c <read>
    a454:	00ffffc4 	movi	r3,-1
    a458:	10c00526 	beq	r2,r3,a470 <_read_r+0x50>
    a45c:	dfc00217 	ldw	ra,8(sp)
    a460:	dc400117 	ldw	r17,4(sp)
    a464:	dc000017 	ldw	r16,0(sp)
    a468:	dec00304 	addi	sp,sp,12
    a46c:	f800283a 	ret
    a470:	80c00017 	ldw	r3,0(r16)
    a474:	183ff926 	beq	r3,zero,a45c <__alt_exception_stack_pointer+0xf800a45c>
    a478:	88c00015 	stw	r3,0(r17)
    a47c:	003ff706 	br	a45c <__alt_exception_stack_pointer+0xf800a45c>

0000a480 <_realloc_r>:
    a480:	defff604 	addi	sp,sp,-40
    a484:	dc800215 	stw	r18,8(sp)
    a488:	dfc00915 	stw	ra,36(sp)
    a48c:	df000815 	stw	fp,32(sp)
    a490:	ddc00715 	stw	r23,28(sp)
    a494:	dd800615 	stw	r22,24(sp)
    a498:	dd400515 	stw	r21,20(sp)
    a49c:	dd000415 	stw	r20,16(sp)
    a4a0:	dcc00315 	stw	r19,12(sp)
    a4a4:	dc400115 	stw	r17,4(sp)
    a4a8:	dc000015 	stw	r16,0(sp)
    a4ac:	3025883a 	mov	r18,r6
    a4b0:	2800b726 	beq	r5,zero,a790 <_realloc_r+0x310>
    a4b4:	282b883a 	mov	r21,r5
    a4b8:	2029883a 	mov	r20,r4
    a4bc:	000ddf80 	call	ddf8 <__malloc_lock>
    a4c0:	a8bfff17 	ldw	r2,-4(r21)
    a4c4:	043fff04 	movi	r16,-4
    a4c8:	90c002c4 	addi	r3,r18,11
    a4cc:	01000584 	movi	r4,22
    a4d0:	acfffe04 	addi	r19,r21,-8
    a4d4:	1420703a 	and	r16,r2,r16
    a4d8:	20c0332e 	bgeu	r4,r3,a5a8 <_realloc_r+0x128>
    a4dc:	047ffe04 	movi	r17,-8
    a4e0:	1c62703a 	and	r17,r3,r17
    a4e4:	8807883a 	mov	r3,r17
    a4e8:	88005816 	blt	r17,zero,a64c <_realloc_r+0x1cc>
    a4ec:	8c805736 	bltu	r17,r18,a64c <_realloc_r+0x1cc>
    a4f0:	80c0300e 	bge	r16,r3,a5b4 <_realloc_r+0x134>
    a4f4:	07000074 	movhi	fp,1
    a4f8:	e704da04 	addi	fp,fp,4968
    a4fc:	e1c00217 	ldw	r7,8(fp)
    a500:	9c09883a 	add	r4,r19,r16
    a504:	22000117 	ldw	r8,4(r4)
    a508:	21c06326 	beq	r4,r7,a698 <_realloc_r+0x218>
    a50c:	017fff84 	movi	r5,-2
    a510:	414a703a 	and	r5,r8,r5
    a514:	214b883a 	add	r5,r4,r5
    a518:	29800117 	ldw	r6,4(r5)
    a51c:	3180004c 	andi	r6,r6,1
    a520:	30003f26 	beq	r6,zero,a620 <_realloc_r+0x1a0>
    a524:	1080004c 	andi	r2,r2,1
    a528:	10008326 	beq	r2,zero,a738 <_realloc_r+0x2b8>
    a52c:	900b883a 	mov	r5,r18
    a530:	a009883a 	mov	r4,r20
    a534:	00014f00 	call	14f0 <_malloc_r>
    a538:	1025883a 	mov	r18,r2
    a53c:	10011e26 	beq	r2,zero,a9b8 <_realloc_r+0x538>
    a540:	a93fff17 	ldw	r4,-4(r21)
    a544:	10fffe04 	addi	r3,r2,-8
    a548:	00bfff84 	movi	r2,-2
    a54c:	2084703a 	and	r2,r4,r2
    a550:	9885883a 	add	r2,r19,r2
    a554:	1880ee26 	beq	r3,r2,a910 <_realloc_r+0x490>
    a558:	81bfff04 	addi	r6,r16,-4
    a55c:	00800904 	movi	r2,36
    a560:	1180b836 	bltu	r2,r6,a844 <_realloc_r+0x3c4>
    a564:	00c004c4 	movi	r3,19
    a568:	19809636 	bltu	r3,r6,a7c4 <_realloc_r+0x344>
    a56c:	9005883a 	mov	r2,r18
    a570:	a807883a 	mov	r3,r21
    a574:	19000017 	ldw	r4,0(r3)
    a578:	11000015 	stw	r4,0(r2)
    a57c:	19000117 	ldw	r4,4(r3)
    a580:	11000115 	stw	r4,4(r2)
    a584:	18c00217 	ldw	r3,8(r3)
    a588:	10c00215 	stw	r3,8(r2)
    a58c:	a80b883a 	mov	r5,r21
    a590:	a009883a 	mov	r4,r20
    a594:	00062f80 	call	62f8 <_free_r>
    a598:	a009883a 	mov	r4,r20
    a59c:	000de1c0 	call	de1c <__malloc_unlock>
    a5a0:	9005883a 	mov	r2,r18
    a5a4:	00001206 	br	a5f0 <_realloc_r+0x170>
    a5a8:	00c00404 	movi	r3,16
    a5ac:	1823883a 	mov	r17,r3
    a5b0:	003fce06 	br	a4ec <__alt_exception_stack_pointer+0xf800a4ec>
    a5b4:	a825883a 	mov	r18,r21
    a5b8:	8445c83a 	sub	r2,r16,r17
    a5bc:	00c003c4 	movi	r3,15
    a5c0:	18802636 	bltu	r3,r2,a65c <_realloc_r+0x1dc>
    a5c4:	99800117 	ldw	r6,4(r19)
    a5c8:	9c07883a 	add	r3,r19,r16
    a5cc:	3180004c 	andi	r6,r6,1
    a5d0:	3420b03a 	or	r16,r6,r16
    a5d4:	9c000115 	stw	r16,4(r19)
    a5d8:	18800117 	ldw	r2,4(r3)
    a5dc:	10800054 	ori	r2,r2,1
    a5e0:	18800115 	stw	r2,4(r3)
    a5e4:	a009883a 	mov	r4,r20
    a5e8:	000de1c0 	call	de1c <__malloc_unlock>
    a5ec:	9005883a 	mov	r2,r18
    a5f0:	dfc00917 	ldw	ra,36(sp)
    a5f4:	df000817 	ldw	fp,32(sp)
    a5f8:	ddc00717 	ldw	r23,28(sp)
    a5fc:	dd800617 	ldw	r22,24(sp)
    a600:	dd400517 	ldw	r21,20(sp)
    a604:	dd000417 	ldw	r20,16(sp)
    a608:	dcc00317 	ldw	r19,12(sp)
    a60c:	dc800217 	ldw	r18,8(sp)
    a610:	dc400117 	ldw	r17,4(sp)
    a614:	dc000017 	ldw	r16,0(sp)
    a618:	dec00a04 	addi	sp,sp,40
    a61c:	f800283a 	ret
    a620:	017fff04 	movi	r5,-4
    a624:	414a703a 	and	r5,r8,r5
    a628:	814d883a 	add	r6,r16,r5
    a62c:	30c01f16 	blt	r6,r3,a6ac <_realloc_r+0x22c>
    a630:	20800317 	ldw	r2,12(r4)
    a634:	20c00217 	ldw	r3,8(r4)
    a638:	a825883a 	mov	r18,r21
    a63c:	3021883a 	mov	r16,r6
    a640:	18800315 	stw	r2,12(r3)
    a644:	10c00215 	stw	r3,8(r2)
    a648:	003fdb06 	br	a5b8 <__alt_exception_stack_pointer+0xf800a5b8>
    a64c:	00800304 	movi	r2,12
    a650:	a0800015 	stw	r2,0(r20)
    a654:	0005883a 	mov	r2,zero
    a658:	003fe506 	br	a5f0 <__alt_exception_stack_pointer+0xf800a5f0>
    a65c:	98c00117 	ldw	r3,4(r19)
    a660:	9c4b883a 	add	r5,r19,r17
    a664:	11000054 	ori	r4,r2,1
    a668:	18c0004c 	andi	r3,r3,1
    a66c:	1c62b03a 	or	r17,r3,r17
    a670:	9c400115 	stw	r17,4(r19)
    a674:	29000115 	stw	r4,4(r5)
    a678:	2885883a 	add	r2,r5,r2
    a67c:	10c00117 	ldw	r3,4(r2)
    a680:	29400204 	addi	r5,r5,8
    a684:	a009883a 	mov	r4,r20
    a688:	18c00054 	ori	r3,r3,1
    a68c:	10c00115 	stw	r3,4(r2)
    a690:	00062f80 	call	62f8 <_free_r>
    a694:	003fd306 	br	a5e4 <__alt_exception_stack_pointer+0xf800a5e4>
    a698:	017fff04 	movi	r5,-4
    a69c:	414a703a 	and	r5,r8,r5
    a6a0:	89800404 	addi	r6,r17,16
    a6a4:	8151883a 	add	r8,r16,r5
    a6a8:	4180590e 	bge	r8,r6,a810 <_realloc_r+0x390>
    a6ac:	1080004c 	andi	r2,r2,1
    a6b0:	103f9e1e 	bne	r2,zero,a52c <__alt_exception_stack_pointer+0xf800a52c>
    a6b4:	adbffe17 	ldw	r22,-8(r21)
    a6b8:	00bfff04 	movi	r2,-4
    a6bc:	9dadc83a 	sub	r22,r19,r22
    a6c0:	b1800117 	ldw	r6,4(r22)
    a6c4:	3084703a 	and	r2,r6,r2
    a6c8:	20002026 	beq	r4,zero,a74c <_realloc_r+0x2cc>
    a6cc:	80af883a 	add	r23,r16,r2
    a6d0:	b96f883a 	add	r23,r23,r5
    a6d4:	21c05f26 	beq	r4,r7,a854 <_realloc_r+0x3d4>
    a6d8:	b8c01c16 	blt	r23,r3,a74c <_realloc_r+0x2cc>
    a6dc:	20800317 	ldw	r2,12(r4)
    a6e0:	20c00217 	ldw	r3,8(r4)
    a6e4:	81bfff04 	addi	r6,r16,-4
    a6e8:	01000904 	movi	r4,36
    a6ec:	18800315 	stw	r2,12(r3)
    a6f0:	10c00215 	stw	r3,8(r2)
    a6f4:	b0c00217 	ldw	r3,8(r22)
    a6f8:	b0800317 	ldw	r2,12(r22)
    a6fc:	b4800204 	addi	r18,r22,8
    a700:	18800315 	stw	r2,12(r3)
    a704:	10c00215 	stw	r3,8(r2)
    a708:	21801b36 	bltu	r4,r6,a778 <_realloc_r+0x2f8>
    a70c:	008004c4 	movi	r2,19
    a710:	1180352e 	bgeu	r2,r6,a7e8 <_realloc_r+0x368>
    a714:	a8800017 	ldw	r2,0(r21)
    a718:	b0800215 	stw	r2,8(r22)
    a71c:	a8800117 	ldw	r2,4(r21)
    a720:	b0800315 	stw	r2,12(r22)
    a724:	008006c4 	movi	r2,27
    a728:	11807f36 	bltu	r2,r6,a928 <_realloc_r+0x4a8>
    a72c:	b0800404 	addi	r2,r22,16
    a730:	ad400204 	addi	r21,r21,8
    a734:	00002d06 	br	a7ec <_realloc_r+0x36c>
    a738:	adbffe17 	ldw	r22,-8(r21)
    a73c:	00bfff04 	movi	r2,-4
    a740:	9dadc83a 	sub	r22,r19,r22
    a744:	b1000117 	ldw	r4,4(r22)
    a748:	2084703a 	and	r2,r4,r2
    a74c:	b03f7726 	beq	r22,zero,a52c <__alt_exception_stack_pointer+0xf800a52c>
    a750:	80af883a 	add	r23,r16,r2
    a754:	b8ff7516 	blt	r23,r3,a52c <__alt_exception_stack_pointer+0xf800a52c>
    a758:	b0800317 	ldw	r2,12(r22)
    a75c:	b0c00217 	ldw	r3,8(r22)
    a760:	81bfff04 	addi	r6,r16,-4
    a764:	01000904 	movi	r4,36
    a768:	18800315 	stw	r2,12(r3)
    a76c:	10c00215 	stw	r3,8(r2)
    a770:	b4800204 	addi	r18,r22,8
    a774:	21bfe52e 	bgeu	r4,r6,a70c <__alt_exception_stack_pointer+0xf800a70c>
    a778:	a80b883a 	mov	r5,r21
    a77c:	9009883a 	mov	r4,r18
    a780:	000a2c40 	call	a2c4 <memmove>
    a784:	b821883a 	mov	r16,r23
    a788:	b027883a 	mov	r19,r22
    a78c:	003f8a06 	br	a5b8 <__alt_exception_stack_pointer+0xf800a5b8>
    a790:	300b883a 	mov	r5,r6
    a794:	dfc00917 	ldw	ra,36(sp)
    a798:	df000817 	ldw	fp,32(sp)
    a79c:	ddc00717 	ldw	r23,28(sp)
    a7a0:	dd800617 	ldw	r22,24(sp)
    a7a4:	dd400517 	ldw	r21,20(sp)
    a7a8:	dd000417 	ldw	r20,16(sp)
    a7ac:	dcc00317 	ldw	r19,12(sp)
    a7b0:	dc800217 	ldw	r18,8(sp)
    a7b4:	dc400117 	ldw	r17,4(sp)
    a7b8:	dc000017 	ldw	r16,0(sp)
    a7bc:	dec00a04 	addi	sp,sp,40
    a7c0:	00014f01 	jmpi	14f0 <_malloc_r>
    a7c4:	a8c00017 	ldw	r3,0(r21)
    a7c8:	90c00015 	stw	r3,0(r18)
    a7cc:	a8c00117 	ldw	r3,4(r21)
    a7d0:	90c00115 	stw	r3,4(r18)
    a7d4:	00c006c4 	movi	r3,27
    a7d8:	19804536 	bltu	r3,r6,a8f0 <_realloc_r+0x470>
    a7dc:	90800204 	addi	r2,r18,8
    a7e0:	a8c00204 	addi	r3,r21,8
    a7e4:	003f6306 	br	a574 <__alt_exception_stack_pointer+0xf800a574>
    a7e8:	9005883a 	mov	r2,r18
    a7ec:	a8c00017 	ldw	r3,0(r21)
    a7f0:	b821883a 	mov	r16,r23
    a7f4:	b027883a 	mov	r19,r22
    a7f8:	10c00015 	stw	r3,0(r2)
    a7fc:	a8c00117 	ldw	r3,4(r21)
    a800:	10c00115 	stw	r3,4(r2)
    a804:	a8c00217 	ldw	r3,8(r21)
    a808:	10c00215 	stw	r3,8(r2)
    a80c:	003f6a06 	br	a5b8 <__alt_exception_stack_pointer+0xf800a5b8>
    a810:	9c67883a 	add	r19,r19,r17
    a814:	4445c83a 	sub	r2,r8,r17
    a818:	e4c00215 	stw	r19,8(fp)
    a81c:	10800054 	ori	r2,r2,1
    a820:	98800115 	stw	r2,4(r19)
    a824:	a8bfff17 	ldw	r2,-4(r21)
    a828:	a009883a 	mov	r4,r20
    a82c:	1080004c 	andi	r2,r2,1
    a830:	1462b03a 	or	r17,r2,r17
    a834:	ac7fff15 	stw	r17,-4(r21)
    a838:	000de1c0 	call	de1c <__malloc_unlock>
    a83c:	a805883a 	mov	r2,r21
    a840:	003f6b06 	br	a5f0 <__alt_exception_stack_pointer+0xf800a5f0>
    a844:	a80b883a 	mov	r5,r21
    a848:	9009883a 	mov	r4,r18
    a84c:	000a2c40 	call	a2c4 <memmove>
    a850:	003f4e06 	br	a58c <__alt_exception_stack_pointer+0xf800a58c>
    a854:	89000404 	addi	r4,r17,16
    a858:	b93fbc16 	blt	r23,r4,a74c <__alt_exception_stack_pointer+0xf800a74c>
    a85c:	b0800317 	ldw	r2,12(r22)
    a860:	b0c00217 	ldw	r3,8(r22)
    a864:	81bfff04 	addi	r6,r16,-4
    a868:	01000904 	movi	r4,36
    a86c:	18800315 	stw	r2,12(r3)
    a870:	10c00215 	stw	r3,8(r2)
    a874:	b4800204 	addi	r18,r22,8
    a878:	21804336 	bltu	r4,r6,a988 <_realloc_r+0x508>
    a87c:	008004c4 	movi	r2,19
    a880:	11803f2e 	bgeu	r2,r6,a980 <_realloc_r+0x500>
    a884:	a8800017 	ldw	r2,0(r21)
    a888:	b0800215 	stw	r2,8(r22)
    a88c:	a8800117 	ldw	r2,4(r21)
    a890:	b0800315 	stw	r2,12(r22)
    a894:	008006c4 	movi	r2,27
    a898:	11803f36 	bltu	r2,r6,a998 <_realloc_r+0x518>
    a89c:	b0800404 	addi	r2,r22,16
    a8a0:	ad400204 	addi	r21,r21,8
    a8a4:	a8c00017 	ldw	r3,0(r21)
    a8a8:	10c00015 	stw	r3,0(r2)
    a8ac:	a8c00117 	ldw	r3,4(r21)
    a8b0:	10c00115 	stw	r3,4(r2)
    a8b4:	a8c00217 	ldw	r3,8(r21)
    a8b8:	10c00215 	stw	r3,8(r2)
    a8bc:	b447883a 	add	r3,r22,r17
    a8c0:	bc45c83a 	sub	r2,r23,r17
    a8c4:	e0c00215 	stw	r3,8(fp)
    a8c8:	10800054 	ori	r2,r2,1
    a8cc:	18800115 	stw	r2,4(r3)
    a8d0:	b0800117 	ldw	r2,4(r22)
    a8d4:	a009883a 	mov	r4,r20
    a8d8:	1080004c 	andi	r2,r2,1
    a8dc:	1462b03a 	or	r17,r2,r17
    a8e0:	b4400115 	stw	r17,4(r22)
    a8e4:	000de1c0 	call	de1c <__malloc_unlock>
    a8e8:	9005883a 	mov	r2,r18
    a8ec:	003f4006 	br	a5f0 <__alt_exception_stack_pointer+0xf800a5f0>
    a8f0:	a8c00217 	ldw	r3,8(r21)
    a8f4:	90c00215 	stw	r3,8(r18)
    a8f8:	a8c00317 	ldw	r3,12(r21)
    a8fc:	90c00315 	stw	r3,12(r18)
    a900:	30801126 	beq	r6,r2,a948 <_realloc_r+0x4c8>
    a904:	90800404 	addi	r2,r18,16
    a908:	a8c00404 	addi	r3,r21,16
    a90c:	003f1906 	br	a574 <__alt_exception_stack_pointer+0xf800a574>
    a910:	90ffff17 	ldw	r3,-4(r18)
    a914:	00bfff04 	movi	r2,-4
    a918:	a825883a 	mov	r18,r21
    a91c:	1884703a 	and	r2,r3,r2
    a920:	80a1883a 	add	r16,r16,r2
    a924:	003f2406 	br	a5b8 <__alt_exception_stack_pointer+0xf800a5b8>
    a928:	a8800217 	ldw	r2,8(r21)
    a92c:	b0800415 	stw	r2,16(r22)
    a930:	a8800317 	ldw	r2,12(r21)
    a934:	b0800515 	stw	r2,20(r22)
    a938:	31000a26 	beq	r6,r4,a964 <_realloc_r+0x4e4>
    a93c:	b0800604 	addi	r2,r22,24
    a940:	ad400404 	addi	r21,r21,16
    a944:	003fa906 	br	a7ec <__alt_exception_stack_pointer+0xf800a7ec>
    a948:	a9000417 	ldw	r4,16(r21)
    a94c:	90800604 	addi	r2,r18,24
    a950:	a8c00604 	addi	r3,r21,24
    a954:	91000415 	stw	r4,16(r18)
    a958:	a9000517 	ldw	r4,20(r21)
    a95c:	91000515 	stw	r4,20(r18)
    a960:	003f0406 	br	a574 <__alt_exception_stack_pointer+0xf800a574>
    a964:	a8c00417 	ldw	r3,16(r21)
    a968:	ad400604 	addi	r21,r21,24
    a96c:	b0800804 	addi	r2,r22,32
    a970:	b0c00615 	stw	r3,24(r22)
    a974:	a8ffff17 	ldw	r3,-4(r21)
    a978:	b0c00715 	stw	r3,28(r22)
    a97c:	003f9b06 	br	a7ec <__alt_exception_stack_pointer+0xf800a7ec>
    a980:	9005883a 	mov	r2,r18
    a984:	003fc706 	br	a8a4 <__alt_exception_stack_pointer+0xf800a8a4>
    a988:	a80b883a 	mov	r5,r21
    a98c:	9009883a 	mov	r4,r18
    a990:	000a2c40 	call	a2c4 <memmove>
    a994:	003fc906 	br	a8bc <__alt_exception_stack_pointer+0xf800a8bc>
    a998:	a8800217 	ldw	r2,8(r21)
    a99c:	b0800415 	stw	r2,16(r22)
    a9a0:	a8800317 	ldw	r2,12(r21)
    a9a4:	b0800515 	stw	r2,20(r22)
    a9a8:	31000726 	beq	r6,r4,a9c8 <_realloc_r+0x548>
    a9ac:	b0800604 	addi	r2,r22,24
    a9b0:	ad400404 	addi	r21,r21,16
    a9b4:	003fbb06 	br	a8a4 <__alt_exception_stack_pointer+0xf800a8a4>
    a9b8:	a009883a 	mov	r4,r20
    a9bc:	000de1c0 	call	de1c <__malloc_unlock>
    a9c0:	0005883a 	mov	r2,zero
    a9c4:	003f0a06 	br	a5f0 <__alt_exception_stack_pointer+0xf800a5f0>
    a9c8:	a8c00417 	ldw	r3,16(r21)
    a9cc:	ad400604 	addi	r21,r21,24
    a9d0:	b0800804 	addi	r2,r22,32
    a9d4:	b0c00615 	stw	r3,24(r22)
    a9d8:	a8ffff17 	ldw	r3,-4(r21)
    a9dc:	b0c00715 	stw	r3,28(r22)
    a9e0:	003fb006 	br	a8a4 <__alt_exception_stack_pointer+0xf800a8a4>

0000a9e4 <__swbuf_r>:
    a9e4:	defffb04 	addi	sp,sp,-20
    a9e8:	dcc00315 	stw	r19,12(sp)
    a9ec:	dc800215 	stw	r18,8(sp)
    a9f0:	dc000015 	stw	r16,0(sp)
    a9f4:	dfc00415 	stw	ra,16(sp)
    a9f8:	dc400115 	stw	r17,4(sp)
    a9fc:	2025883a 	mov	r18,r4
    aa00:	2827883a 	mov	r19,r5
    aa04:	3021883a 	mov	r16,r6
    aa08:	20000226 	beq	r4,zero,aa14 <__swbuf_r+0x30>
    aa0c:	20800e17 	ldw	r2,56(r4)
    aa10:	10004226 	beq	r2,zero,ab1c <__swbuf_r+0x138>
    aa14:	80800617 	ldw	r2,24(r16)
    aa18:	8100030b 	ldhu	r4,12(r16)
    aa1c:	80800215 	stw	r2,8(r16)
    aa20:	2080020c 	andi	r2,r4,8
    aa24:	10003626 	beq	r2,zero,ab00 <__swbuf_r+0x11c>
    aa28:	80c00417 	ldw	r3,16(r16)
    aa2c:	18003426 	beq	r3,zero,ab00 <__swbuf_r+0x11c>
    aa30:	2088000c 	andi	r2,r4,8192
    aa34:	9c403fcc 	andi	r17,r19,255
    aa38:	10001a26 	beq	r2,zero,aaa4 <__swbuf_r+0xc0>
    aa3c:	80800017 	ldw	r2,0(r16)
    aa40:	81000517 	ldw	r4,20(r16)
    aa44:	10c7c83a 	sub	r3,r2,r3
    aa48:	1900200e 	bge	r3,r4,aacc <__swbuf_r+0xe8>
    aa4c:	18c00044 	addi	r3,r3,1
    aa50:	81000217 	ldw	r4,8(r16)
    aa54:	11400044 	addi	r5,r2,1
    aa58:	81400015 	stw	r5,0(r16)
    aa5c:	213fffc4 	addi	r4,r4,-1
    aa60:	81000215 	stw	r4,8(r16)
    aa64:	14c00005 	stb	r19,0(r2)
    aa68:	80800517 	ldw	r2,20(r16)
    aa6c:	10c01e26 	beq	r2,r3,aae8 <__swbuf_r+0x104>
    aa70:	8080030b 	ldhu	r2,12(r16)
    aa74:	1080004c 	andi	r2,r2,1
    aa78:	10000226 	beq	r2,zero,aa84 <__swbuf_r+0xa0>
    aa7c:	00800284 	movi	r2,10
    aa80:	88801926 	beq	r17,r2,aae8 <__swbuf_r+0x104>
    aa84:	8805883a 	mov	r2,r17
    aa88:	dfc00417 	ldw	ra,16(sp)
    aa8c:	dcc00317 	ldw	r19,12(sp)
    aa90:	dc800217 	ldw	r18,8(sp)
    aa94:	dc400117 	ldw	r17,4(sp)
    aa98:	dc000017 	ldw	r16,0(sp)
    aa9c:	dec00504 	addi	sp,sp,20
    aaa0:	f800283a 	ret
    aaa4:	81401917 	ldw	r5,100(r16)
    aaa8:	00b7ffc4 	movi	r2,-8193
    aaac:	21080014 	ori	r4,r4,8192
    aab0:	2884703a 	and	r2,r5,r2
    aab4:	80801915 	stw	r2,100(r16)
    aab8:	80800017 	ldw	r2,0(r16)
    aabc:	8100030d 	sth	r4,12(r16)
    aac0:	81000517 	ldw	r4,20(r16)
    aac4:	10c7c83a 	sub	r3,r2,r3
    aac8:	193fe016 	blt	r3,r4,aa4c <__alt_exception_stack_pointer+0xf800aa4c>
    aacc:	800b883a 	mov	r5,r16
    aad0:	9009883a 	mov	r4,r18
    aad4:	0005d980 	call	5d98 <_fflush_r>
    aad8:	1000071e 	bne	r2,zero,aaf8 <__swbuf_r+0x114>
    aadc:	80800017 	ldw	r2,0(r16)
    aae0:	00c00044 	movi	r3,1
    aae4:	003fda06 	br	aa50 <__alt_exception_stack_pointer+0xf800aa50>
    aae8:	800b883a 	mov	r5,r16
    aaec:	9009883a 	mov	r4,r18
    aaf0:	0005d980 	call	5d98 <_fflush_r>
    aaf4:	103fe326 	beq	r2,zero,aa84 <__alt_exception_stack_pointer+0xf800aa84>
    aaf8:	00bfffc4 	movi	r2,-1
    aafc:	003fe206 	br	aa88 <__alt_exception_stack_pointer+0xf800aa88>
    ab00:	800b883a 	mov	r5,r16
    ab04:	9009883a 	mov	r4,r18
    ab08:	00041780 	call	4178 <__swsetup_r>
    ab0c:	103ffa1e 	bne	r2,zero,aaf8 <__alt_exception_stack_pointer+0xf800aaf8>
    ab10:	8100030b 	ldhu	r4,12(r16)
    ab14:	80c00417 	ldw	r3,16(r16)
    ab18:	003fc506 	br	aa30 <__alt_exception_stack_pointer+0xf800aa30>
    ab1c:	00061840 	call	6184 <__sinit>
    ab20:	003fbc06 	br	aa14 <__alt_exception_stack_pointer+0xf800aa14>

0000ab24 <__swbuf>:
    ab24:	00800074 	movhi	r2,1
    ab28:	108ab404 	addi	r2,r2,10960
    ab2c:	280d883a 	mov	r6,r5
    ab30:	200b883a 	mov	r5,r4
    ab34:	11000017 	ldw	r4,0(r2)
    ab38:	000a9e41 	jmpi	a9e4 <__swbuf_r>

0000ab3c <_wcrtomb_r>:
    ab3c:	defff604 	addi	sp,sp,-40
    ab40:	00800074 	movhi	r2,1
    ab44:	dc800815 	stw	r18,32(sp)
    ab48:	dc400715 	stw	r17,28(sp)
    ab4c:	dc000615 	stw	r16,24(sp)
    ab50:	108ab804 	addi	r2,r2,10976
    ab54:	dfc00915 	stw	ra,36(sp)
    ab58:	2021883a 	mov	r16,r4
    ab5c:	3823883a 	mov	r17,r7
    ab60:	14800017 	ldw	r18,0(r2)
    ab64:	28001426 	beq	r5,zero,abb8 <_wcrtomb_r+0x7c>
    ab68:	d9400415 	stw	r5,16(sp)
    ab6c:	d9800515 	stw	r6,20(sp)
    ab70:	000680c0 	call	680c <__locale_charset>
    ab74:	d9800517 	ldw	r6,20(sp)
    ab78:	d9400417 	ldw	r5,16(sp)
    ab7c:	100f883a 	mov	r7,r2
    ab80:	dc400015 	stw	r17,0(sp)
    ab84:	8009883a 	mov	r4,r16
    ab88:	903ee83a 	callr	r18
    ab8c:	00ffffc4 	movi	r3,-1
    ab90:	10c0031e 	bne	r2,r3,aba0 <_wcrtomb_r+0x64>
    ab94:	88000015 	stw	zero,0(r17)
    ab98:	00c02284 	movi	r3,138
    ab9c:	80c00015 	stw	r3,0(r16)
    aba0:	dfc00917 	ldw	ra,36(sp)
    aba4:	dc800817 	ldw	r18,32(sp)
    aba8:	dc400717 	ldw	r17,28(sp)
    abac:	dc000617 	ldw	r16,24(sp)
    abb0:	dec00a04 	addi	sp,sp,40
    abb4:	f800283a 	ret
    abb8:	000680c0 	call	680c <__locale_charset>
    abbc:	100f883a 	mov	r7,r2
    abc0:	dc400015 	stw	r17,0(sp)
    abc4:	000d883a 	mov	r6,zero
    abc8:	d9400104 	addi	r5,sp,4
    abcc:	8009883a 	mov	r4,r16
    abd0:	903ee83a 	callr	r18
    abd4:	003fed06 	br	ab8c <__alt_exception_stack_pointer+0xf800ab8c>

0000abd8 <wcrtomb>:
    abd8:	defff604 	addi	sp,sp,-40
    abdc:	00800074 	movhi	r2,1
    abe0:	dc800615 	stw	r18,24(sp)
    abe4:	dc400515 	stw	r17,20(sp)
    abe8:	108ab404 	addi	r2,r2,10960
    abec:	dfc00915 	stw	ra,36(sp)
    abf0:	dd000815 	stw	r20,32(sp)
    abf4:	dcc00715 	stw	r19,28(sp)
    abf8:	dc000415 	stw	r16,16(sp)
    abfc:	3025883a 	mov	r18,r6
    ac00:	14400017 	ldw	r17,0(r2)
    ac04:	20001926 	beq	r4,zero,ac6c <wcrtomb+0x94>
    ac08:	00800074 	movhi	r2,1
    ac0c:	108ab804 	addi	r2,r2,10976
    ac10:	15000017 	ldw	r20,0(r2)
    ac14:	2021883a 	mov	r16,r4
    ac18:	2827883a 	mov	r19,r5
    ac1c:	000680c0 	call	680c <__locale_charset>
    ac20:	100f883a 	mov	r7,r2
    ac24:	dc800015 	stw	r18,0(sp)
    ac28:	980d883a 	mov	r6,r19
    ac2c:	800b883a 	mov	r5,r16
    ac30:	8809883a 	mov	r4,r17
    ac34:	a03ee83a 	callr	r20
    ac38:	00ffffc4 	movi	r3,-1
    ac3c:	10c0031e 	bne	r2,r3,ac4c <wcrtomb+0x74>
    ac40:	90000015 	stw	zero,0(r18)
    ac44:	00c02284 	movi	r3,138
    ac48:	88c00015 	stw	r3,0(r17)
    ac4c:	dfc00917 	ldw	ra,36(sp)
    ac50:	dd000817 	ldw	r20,32(sp)
    ac54:	dcc00717 	ldw	r19,28(sp)
    ac58:	dc800617 	ldw	r18,24(sp)
    ac5c:	dc400517 	ldw	r17,20(sp)
    ac60:	dc000417 	ldw	r16,16(sp)
    ac64:	dec00a04 	addi	sp,sp,40
    ac68:	f800283a 	ret
    ac6c:	00800074 	movhi	r2,1
    ac70:	108ab804 	addi	r2,r2,10976
    ac74:	14000017 	ldw	r16,0(r2)
    ac78:	000680c0 	call	680c <__locale_charset>
    ac7c:	100f883a 	mov	r7,r2
    ac80:	dc800015 	stw	r18,0(sp)
    ac84:	000d883a 	mov	r6,zero
    ac88:	d9400104 	addi	r5,sp,4
    ac8c:	8809883a 	mov	r4,r17
    ac90:	803ee83a 	callr	r16
    ac94:	003fe806 	br	ac38 <__alt_exception_stack_pointer+0xf800ac38>

0000ac98 <__ascii_wctomb>:
    ac98:	28000526 	beq	r5,zero,acb0 <__ascii_wctomb+0x18>
    ac9c:	00803fc4 	movi	r2,255
    aca0:	11800536 	bltu	r2,r6,acb8 <__ascii_wctomb+0x20>
    aca4:	29800005 	stb	r6,0(r5)
    aca8:	00800044 	movi	r2,1
    acac:	f800283a 	ret
    acb0:	0005883a 	mov	r2,zero
    acb4:	f800283a 	ret
    acb8:	00802284 	movi	r2,138
    acbc:	20800015 	stw	r2,0(r4)
    acc0:	00bfffc4 	movi	r2,-1
    acc4:	f800283a 	ret

0000acc8 <_wctomb_r>:
    acc8:	00800074 	movhi	r2,1
    accc:	defff904 	addi	sp,sp,-28
    acd0:	108ab804 	addi	r2,r2,10976
    acd4:	dfc00615 	stw	ra,24(sp)
    acd8:	dc400515 	stw	r17,20(sp)
    acdc:	dc000415 	stw	r16,16(sp)
    ace0:	3823883a 	mov	r17,r7
    ace4:	14000017 	ldw	r16,0(r2)
    ace8:	d9000115 	stw	r4,4(sp)
    acec:	d9400215 	stw	r5,8(sp)
    acf0:	d9800315 	stw	r6,12(sp)
    acf4:	000680c0 	call	680c <__locale_charset>
    acf8:	d9800317 	ldw	r6,12(sp)
    acfc:	d9400217 	ldw	r5,8(sp)
    ad00:	d9000117 	ldw	r4,4(sp)
    ad04:	100f883a 	mov	r7,r2
    ad08:	dc400015 	stw	r17,0(sp)
    ad0c:	803ee83a 	callr	r16
    ad10:	dfc00617 	ldw	ra,24(sp)
    ad14:	dc400517 	ldw	r17,20(sp)
    ad18:	dc000417 	ldw	r16,16(sp)
    ad1c:	dec00704 	addi	sp,sp,28
    ad20:	f800283a 	ret

0000ad24 <__udivdi3>:
    ad24:	defff404 	addi	sp,sp,-48
    ad28:	dcc00515 	stw	r19,20(sp)
    ad2c:	dc000215 	stw	r16,8(sp)
    ad30:	dfc00b15 	stw	ra,44(sp)
    ad34:	df000a15 	stw	fp,40(sp)
    ad38:	ddc00915 	stw	r23,36(sp)
    ad3c:	dd800815 	stw	r22,32(sp)
    ad40:	dd400715 	stw	r21,28(sp)
    ad44:	dd000615 	stw	r20,24(sp)
    ad48:	dc800415 	stw	r18,16(sp)
    ad4c:	dc400315 	stw	r17,12(sp)
    ad50:	2027883a 	mov	r19,r4
    ad54:	2821883a 	mov	r16,r5
    ad58:	3800461e 	bne	r7,zero,ae74 <__udivdi3+0x150>
    ad5c:	3023883a 	mov	r17,r6
    ad60:	2025883a 	mov	r18,r4
    ad64:	2980572e 	bgeu	r5,r6,aec4 <__udivdi3+0x1a0>
    ad68:	00bfffd4 	movui	r2,65535
    ad6c:	282d883a 	mov	r22,r5
    ad70:	1180b236 	bltu	r2,r6,b03c <__udivdi3+0x318>
    ad74:	00803fc4 	movi	r2,255
    ad78:	1185803a 	cmpltu	r2,r2,r6
    ad7c:	100490fa 	slli	r2,r2,3
    ad80:	3086d83a 	srl	r3,r6,r2
    ad84:	01000074 	movhi	r4,1
    ad88:	21030c04 	addi	r4,r4,3120
    ad8c:	20c7883a 	add	r3,r4,r3
    ad90:	18c00003 	ldbu	r3,0(r3)
    ad94:	1885883a 	add	r2,r3,r2
    ad98:	00c00804 	movi	r3,32
    ad9c:	1887c83a 	sub	r3,r3,r2
    ada0:	18000526 	beq	r3,zero,adb8 <__udivdi3+0x94>
    ada4:	80e0983a 	sll	r16,r16,r3
    ada8:	9884d83a 	srl	r2,r19,r2
    adac:	30e2983a 	sll	r17,r6,r3
    adb0:	98e4983a 	sll	r18,r19,r3
    adb4:	142cb03a 	or	r22,r2,r16
    adb8:	882ad43a 	srli	r21,r17,16
    adbc:	b009883a 	mov	r4,r22
    adc0:	8d3fffcc 	andi	r20,r17,65535
    adc4:	a80b883a 	mov	r5,r21
    adc8:	00009200 	call	920 <__umodsi3>
    adcc:	b009883a 	mov	r4,r22
    add0:	a80b883a 	mov	r5,r21
    add4:	1027883a 	mov	r19,r2
    add8:	00008bc0 	call	8bc <__udivsi3>
    addc:	100b883a 	mov	r5,r2
    ade0:	a009883a 	mov	r4,r20
    ade4:	102d883a 	mov	r22,r2
    ade8:	00009780 	call	978 <__mulsi3>
    adec:	9826943a 	slli	r19,r19,16
    adf0:	9006d43a 	srli	r3,r18,16
    adf4:	1cc6b03a 	or	r3,r3,r19
    adf8:	1880052e 	bgeu	r3,r2,ae10 <__udivdi3+0xec>
    adfc:	1c47883a 	add	r3,r3,r17
    ae00:	b13fffc4 	addi	r4,r22,-1
    ae04:	1c400136 	bltu	r3,r17,ae0c <__udivdi3+0xe8>
    ae08:	18814236 	bltu	r3,r2,b314 <__udivdi3+0x5f0>
    ae0c:	202d883a 	mov	r22,r4
    ae10:	18a1c83a 	sub	r16,r3,r2
    ae14:	8009883a 	mov	r4,r16
    ae18:	a80b883a 	mov	r5,r21
    ae1c:	00009200 	call	920 <__umodsi3>
    ae20:	1027883a 	mov	r19,r2
    ae24:	8009883a 	mov	r4,r16
    ae28:	a80b883a 	mov	r5,r21
    ae2c:	9826943a 	slli	r19,r19,16
    ae30:	00008bc0 	call	8bc <__udivsi3>
    ae34:	100b883a 	mov	r5,r2
    ae38:	a009883a 	mov	r4,r20
    ae3c:	94bfffcc 	andi	r18,r18,65535
    ae40:	1021883a 	mov	r16,r2
    ae44:	94e4b03a 	or	r18,r18,r19
    ae48:	00009780 	call	978 <__mulsi3>
    ae4c:	9080052e 	bgeu	r18,r2,ae64 <__udivdi3+0x140>
    ae50:	8ca5883a 	add	r18,r17,r18
    ae54:	80ffffc4 	addi	r3,r16,-1
    ae58:	94410c36 	bltu	r18,r17,b28c <__udivdi3+0x568>
    ae5c:	90810b2e 	bgeu	r18,r2,b28c <__udivdi3+0x568>
    ae60:	843fff84 	addi	r16,r16,-2
    ae64:	b004943a 	slli	r2,r22,16
    ae68:	0007883a 	mov	r3,zero
    ae6c:	1404b03a 	or	r2,r2,r16
    ae70:	00005e06 	br	afec <__udivdi3+0x2c8>
    ae74:	29c05b36 	bltu	r5,r7,afe4 <__udivdi3+0x2c0>
    ae78:	00bfffd4 	movui	r2,65535
    ae7c:	11c0672e 	bgeu	r2,r7,b01c <__udivdi3+0x2f8>
    ae80:	00804034 	movhi	r2,256
    ae84:	10bfffc4 	addi	r2,r2,-1
    ae88:	11c10a36 	bltu	r2,r7,b2b4 <__udivdi3+0x590>
    ae8c:	00800404 	movi	r2,16
    ae90:	3886d83a 	srl	r3,r7,r2
    ae94:	01000074 	movhi	r4,1
    ae98:	21030c04 	addi	r4,r4,3120
    ae9c:	20c7883a 	add	r3,r4,r3
    aea0:	18c00003 	ldbu	r3,0(r3)
    aea4:	05c00804 	movi	r23,32
    aea8:	1885883a 	add	r2,r3,r2
    aeac:	b8afc83a 	sub	r23,r23,r2
    aeb0:	b800671e 	bne	r23,zero,b050 <__udivdi3+0x32c>
    aeb4:	3c010536 	bltu	r7,r16,b2cc <__udivdi3+0x5a8>
    aeb8:	9985403a 	cmpgeu	r2,r19,r6
    aebc:	0007883a 	mov	r3,zero
    aec0:	00004a06 	br	afec <__udivdi3+0x2c8>
    aec4:	3000041e 	bne	r6,zero,aed8 <__udivdi3+0x1b4>
    aec8:	000b883a 	mov	r5,zero
    aecc:	01000044 	movi	r4,1
    aed0:	00008bc0 	call	8bc <__udivsi3>
    aed4:	1023883a 	mov	r17,r2
    aed8:	00bfffd4 	movui	r2,65535
    aedc:	1440532e 	bgeu	r2,r17,b02c <__udivdi3+0x308>
    aee0:	00804034 	movhi	r2,256
    aee4:	10bfffc4 	addi	r2,r2,-1
    aee8:	1440f436 	bltu	r2,r17,b2bc <__udivdi3+0x598>
    aeec:	00800404 	movi	r2,16
    aef0:	8886d83a 	srl	r3,r17,r2
    aef4:	01000074 	movhi	r4,1
    aef8:	21030c04 	addi	r4,r4,3120
    aefc:	20c7883a 	add	r3,r4,r3
    af00:	18c00003 	ldbu	r3,0(r3)
    af04:	1885883a 	add	r2,r3,r2
    af08:	00c00804 	movi	r3,32
    af0c:	1887c83a 	sub	r3,r3,r2
    af10:	1800a51e 	bne	r3,zero,b1a8 <__udivdi3+0x484>
    af14:	882ad43a 	srli	r21,r17,16
    af18:	8461c83a 	sub	r16,r16,r17
    af1c:	8d3fffcc 	andi	r20,r17,65535
    af20:	00c00044 	movi	r3,1
    af24:	a80b883a 	mov	r5,r21
    af28:	8009883a 	mov	r4,r16
    af2c:	d8c00115 	stw	r3,4(sp)
    af30:	00009200 	call	920 <__umodsi3>
    af34:	a80b883a 	mov	r5,r21
    af38:	8009883a 	mov	r4,r16
    af3c:	1027883a 	mov	r19,r2
    af40:	00008bc0 	call	8bc <__udivsi3>
    af44:	a00b883a 	mov	r5,r20
    af48:	1009883a 	mov	r4,r2
    af4c:	102d883a 	mov	r22,r2
    af50:	00009780 	call	978 <__mulsi3>
    af54:	9826943a 	slli	r19,r19,16
    af58:	900ed43a 	srli	r7,r18,16
    af5c:	d8c00117 	ldw	r3,4(sp)
    af60:	3cceb03a 	or	r7,r7,r19
    af64:	3880052e 	bgeu	r7,r2,af7c <__udivdi3+0x258>
    af68:	3c4f883a 	add	r7,r7,r17
    af6c:	b13fffc4 	addi	r4,r22,-1
    af70:	3c400136 	bltu	r7,r17,af78 <__udivdi3+0x254>
    af74:	3880e436 	bltu	r7,r2,b308 <__udivdi3+0x5e4>
    af78:	202d883a 	mov	r22,r4
    af7c:	38a1c83a 	sub	r16,r7,r2
    af80:	8009883a 	mov	r4,r16
    af84:	a80b883a 	mov	r5,r21
    af88:	d8c00115 	stw	r3,4(sp)
    af8c:	00009200 	call	920 <__umodsi3>
    af90:	1027883a 	mov	r19,r2
    af94:	8009883a 	mov	r4,r16
    af98:	a80b883a 	mov	r5,r21
    af9c:	9826943a 	slli	r19,r19,16
    afa0:	00008bc0 	call	8bc <__udivsi3>
    afa4:	a00b883a 	mov	r5,r20
    afa8:	1009883a 	mov	r4,r2
    afac:	94bfffcc 	andi	r18,r18,65535
    afb0:	1021883a 	mov	r16,r2
    afb4:	94e4b03a 	or	r18,r18,r19
    afb8:	00009780 	call	978 <__mulsi3>
    afbc:	d8c00117 	ldw	r3,4(sp)
    afc0:	9080052e 	bgeu	r18,r2,afd8 <__udivdi3+0x2b4>
    afc4:	8ca5883a 	add	r18,r17,r18
    afc8:	813fffc4 	addi	r4,r16,-1
    afcc:	9440ad36 	bltu	r18,r17,b284 <__udivdi3+0x560>
    afd0:	9080ac2e 	bgeu	r18,r2,b284 <__udivdi3+0x560>
    afd4:	843fff84 	addi	r16,r16,-2
    afd8:	b004943a 	slli	r2,r22,16
    afdc:	1404b03a 	or	r2,r2,r16
    afe0:	00000206 	br	afec <__udivdi3+0x2c8>
    afe4:	0007883a 	mov	r3,zero
    afe8:	0005883a 	mov	r2,zero
    afec:	dfc00b17 	ldw	ra,44(sp)
    aff0:	df000a17 	ldw	fp,40(sp)
    aff4:	ddc00917 	ldw	r23,36(sp)
    aff8:	dd800817 	ldw	r22,32(sp)
    affc:	dd400717 	ldw	r21,28(sp)
    b000:	dd000617 	ldw	r20,24(sp)
    b004:	dcc00517 	ldw	r19,20(sp)
    b008:	dc800417 	ldw	r18,16(sp)
    b00c:	dc400317 	ldw	r17,12(sp)
    b010:	dc000217 	ldw	r16,8(sp)
    b014:	dec00c04 	addi	sp,sp,48
    b018:	f800283a 	ret
    b01c:	00803fc4 	movi	r2,255
    b020:	11c5803a 	cmpltu	r2,r2,r7
    b024:	100490fa 	slli	r2,r2,3
    b028:	003f9906 	br	ae90 <__alt_exception_stack_pointer+0xf800ae90>
    b02c:	00803fc4 	movi	r2,255
    b030:	1445803a 	cmpltu	r2,r2,r17
    b034:	100490fa 	slli	r2,r2,3
    b038:	003fad06 	br	aef0 <__alt_exception_stack_pointer+0xf800aef0>
    b03c:	00804034 	movhi	r2,256
    b040:	10bfffc4 	addi	r2,r2,-1
    b044:	11809f36 	bltu	r2,r6,b2c4 <__udivdi3+0x5a0>
    b048:	00800404 	movi	r2,16
    b04c:	003f4c06 	br	ad80 <__alt_exception_stack_pointer+0xf800ad80>
    b050:	3dce983a 	sll	r7,r7,r23
    b054:	30b8d83a 	srl	fp,r6,r2
    b058:	80a2d83a 	srl	r17,r16,r2
    b05c:	35cc983a 	sll	r6,r6,r23
    b060:	3f38b03a 	or	fp,r7,fp
    b064:	e024d43a 	srli	r18,fp,16
    b068:	9884d83a 	srl	r2,r19,r2
    b06c:	85e0983a 	sll	r16,r16,r23
    b070:	8809883a 	mov	r4,r17
    b074:	900b883a 	mov	r5,r18
    b078:	d9800015 	stw	r6,0(sp)
    b07c:	1420b03a 	or	r16,r2,r16
    b080:	00009200 	call	920 <__umodsi3>
    b084:	900b883a 	mov	r5,r18
    b088:	8809883a 	mov	r4,r17
    b08c:	1029883a 	mov	r20,r2
    b090:	e5bfffcc 	andi	r22,fp,65535
    b094:	00008bc0 	call	8bc <__udivsi3>
    b098:	100b883a 	mov	r5,r2
    b09c:	b009883a 	mov	r4,r22
    b0a0:	102b883a 	mov	r21,r2
    b0a4:	00009780 	call	978 <__mulsi3>
    b0a8:	a028943a 	slli	r20,r20,16
    b0ac:	8006d43a 	srli	r3,r16,16
    b0b0:	1d06b03a 	or	r3,r3,r20
    b0b4:	1880042e 	bgeu	r3,r2,b0c8 <__udivdi3+0x3a4>
    b0b8:	1f07883a 	add	r3,r3,fp
    b0bc:	a93fffc4 	addi	r4,r21,-1
    b0c0:	1f00892e 	bgeu	r3,fp,b2e8 <__udivdi3+0x5c4>
    b0c4:	202b883a 	mov	r21,r4
    b0c8:	18a3c83a 	sub	r17,r3,r2
    b0cc:	8809883a 	mov	r4,r17
    b0d0:	900b883a 	mov	r5,r18
    b0d4:	00009200 	call	920 <__umodsi3>
    b0d8:	1029883a 	mov	r20,r2
    b0dc:	8809883a 	mov	r4,r17
    b0e0:	900b883a 	mov	r5,r18
    b0e4:	a028943a 	slli	r20,r20,16
    b0e8:	00008bc0 	call	8bc <__udivsi3>
    b0ec:	100b883a 	mov	r5,r2
    b0f0:	b009883a 	mov	r4,r22
    b0f4:	843fffcc 	andi	r16,r16,65535
    b0f8:	1023883a 	mov	r17,r2
    b0fc:	8520b03a 	or	r16,r16,r20
    b100:	00009780 	call	978 <__mulsi3>
    b104:	8080042e 	bgeu	r16,r2,b118 <__udivdi3+0x3f4>
    b108:	8721883a 	add	r16,r16,fp
    b10c:	88ffffc4 	addi	r3,r17,-1
    b110:	8700712e 	bgeu	r16,fp,b2d8 <__udivdi3+0x5b4>
    b114:	1823883a 	mov	r17,r3
    b118:	a80e943a 	slli	r7,r21,16
    b11c:	d8c00017 	ldw	r3,0(sp)
    b120:	80a1c83a 	sub	r16,r16,r2
    b124:	3c64b03a 	or	r18,r7,r17
    b128:	1d3fffcc 	andi	r20,r3,65535
    b12c:	9022d43a 	srli	r17,r18,16
    b130:	95bfffcc 	andi	r22,r18,65535
    b134:	a00b883a 	mov	r5,r20
    b138:	b009883a 	mov	r4,r22
    b13c:	182ad43a 	srli	r21,r3,16
    b140:	00009780 	call	978 <__mulsi3>
    b144:	a00b883a 	mov	r5,r20
    b148:	8809883a 	mov	r4,r17
    b14c:	1039883a 	mov	fp,r2
    b150:	00009780 	call	978 <__mulsi3>
    b154:	8809883a 	mov	r4,r17
    b158:	a80b883a 	mov	r5,r21
    b15c:	1029883a 	mov	r20,r2
    b160:	00009780 	call	978 <__mulsi3>
    b164:	a80b883a 	mov	r5,r21
    b168:	b009883a 	mov	r4,r22
    b16c:	1023883a 	mov	r17,r2
    b170:	00009780 	call	978 <__mulsi3>
    b174:	e006d43a 	srli	r3,fp,16
    b178:	1505883a 	add	r2,r2,r20
    b17c:	1887883a 	add	r3,r3,r2
    b180:	1d00022e 	bgeu	r3,r20,b18c <__udivdi3+0x468>
    b184:	00800074 	movhi	r2,1
    b188:	88a3883a 	add	r17,r17,r2
    b18c:	1804d43a 	srli	r2,r3,16
    b190:	1463883a 	add	r17,r2,r17
    b194:	84404436 	bltu	r16,r17,b2a8 <__udivdi3+0x584>
    b198:	84403e26 	beq	r16,r17,b294 <__udivdi3+0x570>
    b19c:	9005883a 	mov	r2,r18
    b1a0:	0007883a 	mov	r3,zero
    b1a4:	003f9106 	br	afec <__alt_exception_stack_pointer+0xf800afec>
    b1a8:	88e2983a 	sll	r17,r17,r3
    b1ac:	80aed83a 	srl	r23,r16,r2
    b1b0:	80e0983a 	sll	r16,r16,r3
    b1b4:	882ad43a 	srli	r21,r17,16
    b1b8:	9884d83a 	srl	r2,r19,r2
    b1bc:	b809883a 	mov	r4,r23
    b1c0:	a80b883a 	mov	r5,r21
    b1c4:	98e4983a 	sll	r18,r19,r3
    b1c8:	142cb03a 	or	r22,r2,r16
    b1cc:	00009200 	call	920 <__umodsi3>
    b1d0:	b809883a 	mov	r4,r23
    b1d4:	a80b883a 	mov	r5,r21
    b1d8:	1027883a 	mov	r19,r2
    b1dc:	8d3fffcc 	andi	r20,r17,65535
    b1e0:	00008bc0 	call	8bc <__udivsi3>
    b1e4:	a009883a 	mov	r4,r20
    b1e8:	100b883a 	mov	r5,r2
    b1ec:	102f883a 	mov	r23,r2
    b1f0:	00009780 	call	978 <__mulsi3>
    b1f4:	9826943a 	slli	r19,r19,16
    b1f8:	b008d43a 	srli	r4,r22,16
    b1fc:	24c8b03a 	or	r4,r4,r19
    b200:	2080062e 	bgeu	r4,r2,b21c <__udivdi3+0x4f8>
    b204:	2449883a 	add	r4,r4,r17
    b208:	b8ffffc4 	addi	r3,r23,-1
    b20c:	24403c36 	bltu	r4,r17,b300 <__udivdi3+0x5dc>
    b210:	20803b2e 	bgeu	r4,r2,b300 <__udivdi3+0x5dc>
    b214:	bdffff84 	addi	r23,r23,-2
    b218:	2449883a 	add	r4,r4,r17
    b21c:	20a1c83a 	sub	r16,r4,r2
    b220:	a80b883a 	mov	r5,r21
    b224:	8009883a 	mov	r4,r16
    b228:	00009200 	call	920 <__umodsi3>
    b22c:	a80b883a 	mov	r5,r21
    b230:	8009883a 	mov	r4,r16
    b234:	1027883a 	mov	r19,r2
    b238:	00008bc0 	call	8bc <__udivsi3>
    b23c:	a009883a 	mov	r4,r20
    b240:	100b883a 	mov	r5,r2
    b244:	9826943a 	slli	r19,r19,16
    b248:	1039883a 	mov	fp,r2
    b24c:	00009780 	call	978 <__mulsi3>
    b250:	b13fffcc 	andi	r4,r22,65535
    b254:	24c8b03a 	or	r4,r4,r19
    b258:	2080062e 	bgeu	r4,r2,b274 <__udivdi3+0x550>
    b25c:	2449883a 	add	r4,r4,r17
    b260:	e0ffffc4 	addi	r3,fp,-1
    b264:	24402436 	bltu	r4,r17,b2f8 <__udivdi3+0x5d4>
    b268:	2080232e 	bgeu	r4,r2,b2f8 <__udivdi3+0x5d4>
    b26c:	e73fff84 	addi	fp,fp,-2
    b270:	2449883a 	add	r4,r4,r17
    b274:	b82e943a 	slli	r23,r23,16
    b278:	20a1c83a 	sub	r16,r4,r2
    b27c:	bf06b03a 	or	r3,r23,fp
    b280:	003f2806 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    b284:	2021883a 	mov	r16,r4
    b288:	003f5306 	br	afd8 <__alt_exception_stack_pointer+0xf800afd8>
    b28c:	1821883a 	mov	r16,r3
    b290:	003ef406 	br	ae64 <__alt_exception_stack_pointer+0xf800ae64>
    b294:	1806943a 	slli	r3,r3,16
    b298:	9de6983a 	sll	r19,r19,r23
    b29c:	e73fffcc 	andi	fp,fp,65535
    b2a0:	1f07883a 	add	r3,r3,fp
    b2a4:	98ffbd2e 	bgeu	r19,r3,b19c <__alt_exception_stack_pointer+0xf800b19c>
    b2a8:	90bfffc4 	addi	r2,r18,-1
    b2ac:	0007883a 	mov	r3,zero
    b2b0:	003f4e06 	br	afec <__alt_exception_stack_pointer+0xf800afec>
    b2b4:	00800604 	movi	r2,24
    b2b8:	003ef506 	br	ae90 <__alt_exception_stack_pointer+0xf800ae90>
    b2bc:	00800604 	movi	r2,24
    b2c0:	003f0b06 	br	aef0 <__alt_exception_stack_pointer+0xf800aef0>
    b2c4:	00800604 	movi	r2,24
    b2c8:	003ead06 	br	ad80 <__alt_exception_stack_pointer+0xf800ad80>
    b2cc:	0007883a 	mov	r3,zero
    b2d0:	00800044 	movi	r2,1
    b2d4:	003f4506 	br	afec <__alt_exception_stack_pointer+0xf800afec>
    b2d8:	80bf8e2e 	bgeu	r16,r2,b114 <__alt_exception_stack_pointer+0xf800b114>
    b2dc:	8c7fff84 	addi	r17,r17,-2
    b2e0:	8721883a 	add	r16,r16,fp
    b2e4:	003f8c06 	br	b118 <__alt_exception_stack_pointer+0xf800b118>
    b2e8:	18bf762e 	bgeu	r3,r2,b0c4 <__alt_exception_stack_pointer+0xf800b0c4>
    b2ec:	ad7fff84 	addi	r21,r21,-2
    b2f0:	1f07883a 	add	r3,r3,fp
    b2f4:	003f7406 	br	b0c8 <__alt_exception_stack_pointer+0xf800b0c8>
    b2f8:	1839883a 	mov	fp,r3
    b2fc:	003fdd06 	br	b274 <__alt_exception_stack_pointer+0xf800b274>
    b300:	182f883a 	mov	r23,r3
    b304:	003fc506 	br	b21c <__alt_exception_stack_pointer+0xf800b21c>
    b308:	b5bfff84 	addi	r22,r22,-2
    b30c:	3c4f883a 	add	r7,r7,r17
    b310:	003f1a06 	br	af7c <__alt_exception_stack_pointer+0xf800af7c>
    b314:	b5bfff84 	addi	r22,r22,-2
    b318:	1c47883a 	add	r3,r3,r17
    b31c:	003ebc06 	br	ae10 <__alt_exception_stack_pointer+0xf800ae10>

0000b320 <__umoddi3>:
    b320:	defff304 	addi	sp,sp,-52
    b324:	df000b15 	stw	fp,44(sp)
    b328:	dc400415 	stw	r17,16(sp)
    b32c:	dc000315 	stw	r16,12(sp)
    b330:	dfc00c15 	stw	ra,48(sp)
    b334:	ddc00a15 	stw	r23,40(sp)
    b338:	dd800915 	stw	r22,36(sp)
    b33c:	dd400815 	stw	r21,32(sp)
    b340:	dd000715 	stw	r20,28(sp)
    b344:	dcc00615 	stw	r19,24(sp)
    b348:	dc800515 	stw	r18,20(sp)
    b34c:	2021883a 	mov	r16,r4
    b350:	2823883a 	mov	r17,r5
    b354:	2839883a 	mov	fp,r5
    b358:	3800401e 	bne	r7,zero,b45c <__umoddi3+0x13c>
    b35c:	3027883a 	mov	r19,r6
    b360:	2029883a 	mov	r20,r4
    b364:	2980552e 	bgeu	r5,r6,b4bc <__umoddi3+0x19c>
    b368:	00bfffd4 	movui	r2,65535
    b36c:	1180a236 	bltu	r2,r6,b5f8 <__umoddi3+0x2d8>
    b370:	01003fc4 	movi	r4,255
    b374:	2189803a 	cmpltu	r4,r4,r6
    b378:	200890fa 	slli	r4,r4,3
    b37c:	3104d83a 	srl	r2,r6,r4
    b380:	00c00074 	movhi	r3,1
    b384:	18c30c04 	addi	r3,r3,3120
    b388:	1885883a 	add	r2,r3,r2
    b38c:	10c00003 	ldbu	r3,0(r2)
    b390:	00800804 	movi	r2,32
    b394:	1909883a 	add	r4,r3,r4
    b398:	1125c83a 	sub	r18,r2,r4
    b39c:	90000526 	beq	r18,zero,b3b4 <__umoddi3+0x94>
    b3a0:	8ca2983a 	sll	r17,r17,r18
    b3a4:	8108d83a 	srl	r4,r16,r4
    b3a8:	34a6983a 	sll	r19,r6,r18
    b3ac:	84a8983a 	sll	r20,r16,r18
    b3b0:	2478b03a 	or	fp,r4,r17
    b3b4:	982cd43a 	srli	r22,r19,16
    b3b8:	e009883a 	mov	r4,fp
    b3bc:	9dffffcc 	andi	r23,r19,65535
    b3c0:	b00b883a 	mov	r5,r22
    b3c4:	00009200 	call	920 <__umodsi3>
    b3c8:	b00b883a 	mov	r5,r22
    b3cc:	e009883a 	mov	r4,fp
    b3d0:	102b883a 	mov	r21,r2
    b3d4:	00008bc0 	call	8bc <__udivsi3>
    b3d8:	100b883a 	mov	r5,r2
    b3dc:	b809883a 	mov	r4,r23
    b3e0:	00009780 	call	978 <__mulsi3>
    b3e4:	a82a943a 	slli	r21,r21,16
    b3e8:	a006d43a 	srli	r3,r20,16
    b3ec:	1d46b03a 	or	r3,r3,r21
    b3f0:	1880032e 	bgeu	r3,r2,b400 <__umoddi3+0xe0>
    b3f4:	1cc7883a 	add	r3,r3,r19
    b3f8:	1cc00136 	bltu	r3,r19,b400 <__umoddi3+0xe0>
    b3fc:	18813136 	bltu	r3,r2,b8c4 <__umoddi3+0x5a4>
    b400:	18a1c83a 	sub	r16,r3,r2
    b404:	b00b883a 	mov	r5,r22
    b408:	8009883a 	mov	r4,r16
    b40c:	00009200 	call	920 <__umodsi3>
    b410:	b00b883a 	mov	r5,r22
    b414:	8009883a 	mov	r4,r16
    b418:	1023883a 	mov	r17,r2
    b41c:	00008bc0 	call	8bc <__udivsi3>
    b420:	100b883a 	mov	r5,r2
    b424:	b809883a 	mov	r4,r23
    b428:	8822943a 	slli	r17,r17,16
    b42c:	00009780 	call	978 <__mulsi3>
    b430:	a0ffffcc 	andi	r3,r20,65535
    b434:	1c46b03a 	or	r3,r3,r17
    b438:	1880042e 	bgeu	r3,r2,b44c <__umoddi3+0x12c>
    b43c:	1cc7883a 	add	r3,r3,r19
    b440:	1cc00236 	bltu	r3,r19,b44c <__umoddi3+0x12c>
    b444:	1880012e 	bgeu	r3,r2,b44c <__umoddi3+0x12c>
    b448:	1cc7883a 	add	r3,r3,r19
    b44c:	1885c83a 	sub	r2,r3,r2
    b450:	1484d83a 	srl	r2,r2,r18
    b454:	0007883a 	mov	r3,zero
    b458:	00005306 	br	b5a8 <__umoddi3+0x288>
    b45c:	29c05036 	bltu	r5,r7,b5a0 <__umoddi3+0x280>
    b460:	00bfffd4 	movui	r2,65535
    b464:	11c05c2e 	bgeu	r2,r7,b5d8 <__umoddi3+0x2b8>
    b468:	00804034 	movhi	r2,256
    b46c:	10bfffc4 	addi	r2,r2,-1
    b470:	11c10636 	bltu	r2,r7,b88c <__umoddi3+0x56c>
    b474:	01000404 	movi	r4,16
    b478:	3904d83a 	srl	r2,r7,r4
    b47c:	00c00074 	movhi	r3,1
    b480:	18c30c04 	addi	r3,r3,3120
    b484:	1885883a 	add	r2,r3,r2
    b488:	14c00003 	ldbu	r19,0(r2)
    b48c:	00c00804 	movi	r3,32
    b490:	9927883a 	add	r19,r19,r4
    b494:	1ce9c83a 	sub	r20,r3,r19
    b498:	a0005c1e 	bne	r20,zero,b60c <__umoddi3+0x2ec>
    b49c:	3c400136 	bltu	r7,r17,b4a4 <__umoddi3+0x184>
    b4a0:	81810a36 	bltu	r16,r6,b8cc <__umoddi3+0x5ac>
    b4a4:	8185c83a 	sub	r2,r16,r6
    b4a8:	89e3c83a 	sub	r17,r17,r7
    b4ac:	8089803a 	cmpltu	r4,r16,r2
    b4b0:	8939c83a 	sub	fp,r17,r4
    b4b4:	e007883a 	mov	r3,fp
    b4b8:	00003b06 	br	b5a8 <__umoddi3+0x288>
    b4bc:	3000041e 	bne	r6,zero,b4d0 <__umoddi3+0x1b0>
    b4c0:	000b883a 	mov	r5,zero
    b4c4:	01000044 	movi	r4,1
    b4c8:	00008bc0 	call	8bc <__udivsi3>
    b4cc:	1027883a 	mov	r19,r2
    b4d0:	00bfffd4 	movui	r2,65535
    b4d4:	14c0442e 	bgeu	r2,r19,b5e8 <__umoddi3+0x2c8>
    b4d8:	00804034 	movhi	r2,256
    b4dc:	10bfffc4 	addi	r2,r2,-1
    b4e0:	14c0ec36 	bltu	r2,r19,b894 <__umoddi3+0x574>
    b4e4:	00800404 	movi	r2,16
    b4e8:	9886d83a 	srl	r3,r19,r2
    b4ec:	01000074 	movhi	r4,1
    b4f0:	21030c04 	addi	r4,r4,3120
    b4f4:	20c7883a 	add	r3,r4,r3
    b4f8:	18c00003 	ldbu	r3,0(r3)
    b4fc:	1887883a 	add	r3,r3,r2
    b500:	00800804 	movi	r2,32
    b504:	10e5c83a 	sub	r18,r2,r3
    b508:	9000ab1e 	bne	r18,zero,b7b8 <__umoddi3+0x498>
    b50c:	982cd43a 	srli	r22,r19,16
    b510:	8ce3c83a 	sub	r17,r17,r19
    b514:	9dffffcc 	andi	r23,r19,65535
    b518:	b00b883a 	mov	r5,r22
    b51c:	8809883a 	mov	r4,r17
    b520:	00009200 	call	920 <__umodsi3>
    b524:	b00b883a 	mov	r5,r22
    b528:	8809883a 	mov	r4,r17
    b52c:	102b883a 	mov	r21,r2
    b530:	00008bc0 	call	8bc <__udivsi3>
    b534:	b80b883a 	mov	r5,r23
    b538:	1009883a 	mov	r4,r2
    b53c:	00009780 	call	978 <__mulsi3>
    b540:	a82a943a 	slli	r21,r21,16
    b544:	a006d43a 	srli	r3,r20,16
    b548:	1d46b03a 	or	r3,r3,r21
    b54c:	1880042e 	bgeu	r3,r2,b560 <__umoddi3+0x240>
    b550:	1cc7883a 	add	r3,r3,r19
    b554:	1cc00236 	bltu	r3,r19,b560 <__umoddi3+0x240>
    b558:	1880012e 	bgeu	r3,r2,b560 <__umoddi3+0x240>
    b55c:	1cc7883a 	add	r3,r3,r19
    b560:	18a1c83a 	sub	r16,r3,r2
    b564:	b00b883a 	mov	r5,r22
    b568:	8009883a 	mov	r4,r16
    b56c:	00009200 	call	920 <__umodsi3>
    b570:	1023883a 	mov	r17,r2
    b574:	b00b883a 	mov	r5,r22
    b578:	8009883a 	mov	r4,r16
    b57c:	00008bc0 	call	8bc <__udivsi3>
    b580:	8822943a 	slli	r17,r17,16
    b584:	b80b883a 	mov	r5,r23
    b588:	1009883a 	mov	r4,r2
    b58c:	00009780 	call	978 <__mulsi3>
    b590:	a53fffcc 	andi	r20,r20,65535
    b594:	a446b03a 	or	r3,r20,r17
    b598:	18bfac2e 	bgeu	r3,r2,b44c <__alt_exception_stack_pointer+0xf800b44c>
    b59c:	003fa706 	br	b43c <__alt_exception_stack_pointer+0xf800b43c>
    b5a0:	2005883a 	mov	r2,r4
    b5a4:	2807883a 	mov	r3,r5
    b5a8:	dfc00c17 	ldw	ra,48(sp)
    b5ac:	df000b17 	ldw	fp,44(sp)
    b5b0:	ddc00a17 	ldw	r23,40(sp)
    b5b4:	dd800917 	ldw	r22,36(sp)
    b5b8:	dd400817 	ldw	r21,32(sp)
    b5bc:	dd000717 	ldw	r20,28(sp)
    b5c0:	dcc00617 	ldw	r19,24(sp)
    b5c4:	dc800517 	ldw	r18,20(sp)
    b5c8:	dc400417 	ldw	r17,16(sp)
    b5cc:	dc000317 	ldw	r16,12(sp)
    b5d0:	dec00d04 	addi	sp,sp,52
    b5d4:	f800283a 	ret
    b5d8:	04c03fc4 	movi	r19,255
    b5dc:	99c9803a 	cmpltu	r4,r19,r7
    b5e0:	200890fa 	slli	r4,r4,3
    b5e4:	003fa406 	br	b478 <__alt_exception_stack_pointer+0xf800b478>
    b5e8:	00803fc4 	movi	r2,255
    b5ec:	14c5803a 	cmpltu	r2,r2,r19
    b5f0:	100490fa 	slli	r2,r2,3
    b5f4:	003fbc06 	br	b4e8 <__alt_exception_stack_pointer+0xf800b4e8>
    b5f8:	00804034 	movhi	r2,256
    b5fc:	10bfffc4 	addi	r2,r2,-1
    b600:	1180a636 	bltu	r2,r6,b89c <__umoddi3+0x57c>
    b604:	01000404 	movi	r4,16
    b608:	003f5c06 	br	b37c <__alt_exception_stack_pointer+0xf800b37c>
    b60c:	3d0e983a 	sll	r7,r7,r20
    b610:	34ead83a 	srl	r21,r6,r19
    b614:	8cc6d83a 	srl	r3,r17,r19
    b618:	8d10983a 	sll	r8,r17,r20
    b61c:	3d6ab03a 	or	r21,r7,r21
    b620:	a82cd43a 	srli	r22,r21,16
    b624:	84e2d83a 	srl	r17,r16,r19
    b628:	1809883a 	mov	r4,r3
    b62c:	b00b883a 	mov	r5,r22
    b630:	8a22b03a 	or	r17,r17,r8
    b634:	3524983a 	sll	r18,r6,r20
    b638:	dc400015 	stw	r17,0(sp)
    b63c:	d8c00115 	stw	r3,4(sp)
    b640:	00009200 	call	920 <__umodsi3>
    b644:	d8c00117 	ldw	r3,4(sp)
    b648:	b00b883a 	mov	r5,r22
    b64c:	1039883a 	mov	fp,r2
    b650:	1809883a 	mov	r4,r3
    b654:	00008bc0 	call	8bc <__udivsi3>
    b658:	adffffcc 	andi	r23,r21,65535
    b65c:	100b883a 	mov	r5,r2
    b660:	b809883a 	mov	r4,r23
    b664:	1023883a 	mov	r17,r2
    b668:	00009780 	call	978 <__mulsi3>
    b66c:	d9400017 	ldw	r5,0(sp)
    b670:	e008943a 	slli	r4,fp,16
    b674:	8520983a 	sll	r16,r16,r20
    b678:	2806d43a 	srli	r3,r5,16
    b67c:	1906b03a 	or	r3,r3,r4
    b680:	1880042e 	bgeu	r3,r2,b694 <__umoddi3+0x374>
    b684:	1d47883a 	add	r3,r3,r21
    b688:	893fffc4 	addi	r4,r17,-1
    b68c:	1d40892e 	bgeu	r3,r21,b8b4 <__umoddi3+0x594>
    b690:	2023883a 	mov	r17,r4
    b694:	18b9c83a 	sub	fp,r3,r2
    b698:	b00b883a 	mov	r5,r22
    b69c:	e009883a 	mov	r4,fp
    b6a0:	00009200 	call	920 <__umodsi3>
    b6a4:	b00b883a 	mov	r5,r22
    b6a8:	e009883a 	mov	r4,fp
    b6ac:	d8800215 	stw	r2,8(sp)
    b6b0:	00008bc0 	call	8bc <__udivsi3>
    b6b4:	100b883a 	mov	r5,r2
    b6b8:	b809883a 	mov	r4,r23
    b6bc:	102d883a 	mov	r22,r2
    b6c0:	00009780 	call	978 <__mulsi3>
    b6c4:	d9800217 	ldw	r6,8(sp)
    b6c8:	d8c00017 	ldw	r3,0(sp)
    b6cc:	300c943a 	slli	r6,r6,16
    b6d0:	1a3fffcc 	andi	r8,r3,65535
    b6d4:	4190b03a 	or	r8,r8,r6
    b6d8:	4080042e 	bgeu	r8,r2,b6ec <__umoddi3+0x3cc>
    b6dc:	4551883a 	add	r8,r8,r21
    b6e0:	b0ffffc4 	addi	r3,r22,-1
    b6e4:	45406f2e 	bgeu	r8,r21,b8a4 <__umoddi3+0x584>
    b6e8:	182d883a 	mov	r22,r3
    b6ec:	880e943a 	slli	r7,r17,16
    b6f0:	9006d43a 	srli	r3,r18,16
    b6f4:	91bfffcc 	andi	r6,r18,65535
    b6f8:	3dacb03a 	or	r22,r7,r22
    b6fc:	b02ed43a 	srli	r23,r22,16
    b700:	b5bfffcc 	andi	r22,r22,65535
    b704:	300b883a 	mov	r5,r6
    b708:	b009883a 	mov	r4,r22
    b70c:	40a3c83a 	sub	r17,r8,r2
    b710:	d8c00115 	stw	r3,4(sp)
    b714:	d9800215 	stw	r6,8(sp)
    b718:	00009780 	call	978 <__mulsi3>
    b71c:	d9800217 	ldw	r6,8(sp)
    b720:	b809883a 	mov	r4,r23
    b724:	1039883a 	mov	fp,r2
    b728:	300b883a 	mov	r5,r6
    b72c:	00009780 	call	978 <__mulsi3>
    b730:	d8c00117 	ldw	r3,4(sp)
    b734:	b809883a 	mov	r4,r23
    b738:	d8800215 	stw	r2,8(sp)
    b73c:	180b883a 	mov	r5,r3
    b740:	00009780 	call	978 <__mulsi3>
    b744:	d8c00117 	ldw	r3,4(sp)
    b748:	b009883a 	mov	r4,r22
    b74c:	102f883a 	mov	r23,r2
    b750:	180b883a 	mov	r5,r3
    b754:	00009780 	call	978 <__mulsi3>
    b758:	d9800217 	ldw	r6,8(sp)
    b75c:	e006d43a 	srli	r3,fp,16
    b760:	1185883a 	add	r2,r2,r6
    b764:	1885883a 	add	r2,r3,r2
    b768:	1180022e 	bgeu	r2,r6,b774 <__umoddi3+0x454>
    b76c:	00c00074 	movhi	r3,1
    b770:	b8ef883a 	add	r23,r23,r3
    b774:	1006d43a 	srli	r3,r2,16
    b778:	1004943a 	slli	r2,r2,16
    b77c:	e73fffcc 	andi	fp,fp,65535
    b780:	1dc7883a 	add	r3,r3,r23
    b784:	1739883a 	add	fp,r2,fp
    b788:	88c03a36 	bltu	r17,r3,b874 <__umoddi3+0x554>
    b78c:	88c05126 	beq	r17,r3,b8d4 <__umoddi3+0x5b4>
    b790:	88c9c83a 	sub	r4,r17,r3
    b794:	e00f883a 	mov	r7,fp
    b798:	81cfc83a 	sub	r7,r16,r7
    b79c:	81c7803a 	cmpltu	r3,r16,r7
    b7a0:	20c7c83a 	sub	r3,r4,r3
    b7a4:	1cc4983a 	sll	r2,r3,r19
    b7a8:	3d0ed83a 	srl	r7,r7,r20
    b7ac:	1d06d83a 	srl	r3,r3,r20
    b7b0:	11c4b03a 	or	r2,r2,r7
    b7b4:	003f7c06 	br	b5a8 <__alt_exception_stack_pointer+0xf800b5a8>
    b7b8:	9ca6983a 	sll	r19,r19,r18
    b7bc:	88f8d83a 	srl	fp,r17,r3
    b7c0:	80c4d83a 	srl	r2,r16,r3
    b7c4:	982cd43a 	srli	r22,r19,16
    b7c8:	8ca2983a 	sll	r17,r17,r18
    b7cc:	e009883a 	mov	r4,fp
    b7d0:	b00b883a 	mov	r5,r22
    b7d4:	146ab03a 	or	r21,r2,r17
    b7d8:	00009200 	call	920 <__umodsi3>
    b7dc:	b00b883a 	mov	r5,r22
    b7e0:	e009883a 	mov	r4,fp
    b7e4:	1029883a 	mov	r20,r2
    b7e8:	9dffffcc 	andi	r23,r19,65535
    b7ec:	00008bc0 	call	8bc <__udivsi3>
    b7f0:	b809883a 	mov	r4,r23
    b7f4:	100b883a 	mov	r5,r2
    b7f8:	00009780 	call	978 <__mulsi3>
    b7fc:	a008943a 	slli	r4,r20,16
    b800:	a806d43a 	srli	r3,r21,16
    b804:	84a8983a 	sll	r20,r16,r18
    b808:	1906b03a 	or	r3,r3,r4
    b80c:	1880042e 	bgeu	r3,r2,b820 <__umoddi3+0x500>
    b810:	1cc7883a 	add	r3,r3,r19
    b814:	1cc00236 	bltu	r3,r19,b820 <__umoddi3+0x500>
    b818:	1880012e 	bgeu	r3,r2,b820 <__umoddi3+0x500>
    b81c:	1cc7883a 	add	r3,r3,r19
    b820:	18a3c83a 	sub	r17,r3,r2
    b824:	b00b883a 	mov	r5,r22
    b828:	8809883a 	mov	r4,r17
    b82c:	00009200 	call	920 <__umodsi3>
    b830:	b00b883a 	mov	r5,r22
    b834:	8809883a 	mov	r4,r17
    b838:	1021883a 	mov	r16,r2
    b83c:	00008bc0 	call	8bc <__udivsi3>
    b840:	100b883a 	mov	r5,r2
    b844:	b809883a 	mov	r4,r23
    b848:	8020943a 	slli	r16,r16,16
    b84c:	00009780 	call	978 <__mulsi3>
    b850:	a8ffffcc 	andi	r3,r21,65535
    b854:	1c06b03a 	or	r3,r3,r16
    b858:	1880042e 	bgeu	r3,r2,b86c <__umoddi3+0x54c>
    b85c:	1cc7883a 	add	r3,r3,r19
    b860:	1cc00236 	bltu	r3,r19,b86c <__umoddi3+0x54c>
    b864:	1880012e 	bgeu	r3,r2,b86c <__umoddi3+0x54c>
    b868:	1cc7883a 	add	r3,r3,r19
    b86c:	18a3c83a 	sub	r17,r3,r2
    b870:	003f2906 	br	b518 <__alt_exception_stack_pointer+0xf800b518>
    b874:	e48fc83a 	sub	r7,fp,r18
    b878:	1d49c83a 	sub	r4,r3,r21
    b87c:	e1f9803a 	cmpltu	fp,fp,r7
    b880:	2739c83a 	sub	fp,r4,fp
    b884:	8f09c83a 	sub	r4,r17,fp
    b888:	003fc306 	br	b798 <__alt_exception_stack_pointer+0xf800b798>
    b88c:	01000604 	movi	r4,24
    b890:	003ef906 	br	b478 <__alt_exception_stack_pointer+0xf800b478>
    b894:	00800604 	movi	r2,24
    b898:	003f1306 	br	b4e8 <__alt_exception_stack_pointer+0xf800b4e8>
    b89c:	01000604 	movi	r4,24
    b8a0:	003eb606 	br	b37c <__alt_exception_stack_pointer+0xf800b37c>
    b8a4:	40bf902e 	bgeu	r8,r2,b6e8 <__alt_exception_stack_pointer+0xf800b6e8>
    b8a8:	b5bfff84 	addi	r22,r22,-2
    b8ac:	4551883a 	add	r8,r8,r21
    b8b0:	003f8e06 	br	b6ec <__alt_exception_stack_pointer+0xf800b6ec>
    b8b4:	18bf762e 	bgeu	r3,r2,b690 <__alt_exception_stack_pointer+0xf800b690>
    b8b8:	8c7fff84 	addi	r17,r17,-2
    b8bc:	1d47883a 	add	r3,r3,r21
    b8c0:	003f7406 	br	b694 <__alt_exception_stack_pointer+0xf800b694>
    b8c4:	1cc7883a 	add	r3,r3,r19
    b8c8:	003ecd06 	br	b400 <__alt_exception_stack_pointer+0xf800b400>
    b8cc:	8005883a 	mov	r2,r16
    b8d0:	003ef806 	br	b4b4 <__alt_exception_stack_pointer+0xf800b4b4>
    b8d4:	873fe736 	bltu	r16,fp,b874 <__alt_exception_stack_pointer+0xf800b874>
    b8d8:	e00f883a 	mov	r7,fp
    b8dc:	0009883a 	mov	r4,zero
    b8e0:	003fad06 	br	b798 <__alt_exception_stack_pointer+0xf800b798>

0000b8e4 <__adddf3>:
    b8e4:	02c00434 	movhi	r11,16
    b8e8:	5affffc4 	addi	r11,r11,-1
    b8ec:	2806d7fa 	srli	r3,r5,31
    b8f0:	2ad4703a 	and	r10,r5,r11
    b8f4:	3ad2703a 	and	r9,r7,r11
    b8f8:	3804d53a 	srli	r2,r7,20
    b8fc:	3018d77a 	srli	r12,r6,29
    b900:	280ad53a 	srli	r5,r5,20
    b904:	501490fa 	slli	r10,r10,3
    b908:	2010d77a 	srli	r8,r4,29
    b90c:	481290fa 	slli	r9,r9,3
    b910:	380ed7fa 	srli	r7,r7,31
    b914:	defffb04 	addi	sp,sp,-20
    b918:	dc800215 	stw	r18,8(sp)
    b91c:	dc400115 	stw	r17,4(sp)
    b920:	dc000015 	stw	r16,0(sp)
    b924:	dfc00415 	stw	ra,16(sp)
    b928:	dcc00315 	stw	r19,12(sp)
    b92c:	1c803fcc 	andi	r18,r3,255
    b930:	2c01ffcc 	andi	r16,r5,2047
    b934:	5210b03a 	or	r8,r10,r8
    b938:	202290fa 	slli	r17,r4,3
    b93c:	1081ffcc 	andi	r2,r2,2047
    b940:	4b12b03a 	or	r9,r9,r12
    b944:	300c90fa 	slli	r6,r6,3
    b948:	91c07526 	beq	r18,r7,bb20 <__adddf3+0x23c>
    b94c:	8087c83a 	sub	r3,r16,r2
    b950:	00c0ab0e 	bge	zero,r3,bc00 <__adddf3+0x31c>
    b954:	10002a1e 	bne	r2,zero,ba00 <__adddf3+0x11c>
    b958:	4984b03a 	or	r2,r9,r6
    b95c:	1000961e 	bne	r2,zero,bbb8 <__adddf3+0x2d4>
    b960:	888001cc 	andi	r2,r17,7
    b964:	10000726 	beq	r2,zero,b984 <__adddf3+0xa0>
    b968:	888003cc 	andi	r2,r17,15
    b96c:	00c00104 	movi	r3,4
    b970:	10c00426 	beq	r2,r3,b984 <__adddf3+0xa0>
    b974:	88c7883a 	add	r3,r17,r3
    b978:	1c63803a 	cmpltu	r17,r3,r17
    b97c:	4451883a 	add	r8,r8,r17
    b980:	1823883a 	mov	r17,r3
    b984:	4080202c 	andhi	r2,r8,128
    b988:	10005926 	beq	r2,zero,baf0 <__adddf3+0x20c>
    b98c:	84000044 	addi	r16,r16,1
    b990:	0081ffc4 	movi	r2,2047
    b994:	8080ba26 	beq	r16,r2,bc80 <__adddf3+0x39c>
    b998:	00bfe034 	movhi	r2,65408
    b99c:	10bfffc4 	addi	r2,r2,-1
    b9a0:	4090703a 	and	r8,r8,r2
    b9a4:	4004977a 	slli	r2,r8,29
    b9a8:	4010927a 	slli	r8,r8,9
    b9ac:	8822d0fa 	srli	r17,r17,3
    b9b0:	8401ffcc 	andi	r16,r16,2047
    b9b4:	4010d33a 	srli	r8,r8,12
    b9b8:	9007883a 	mov	r3,r18
    b9bc:	1444b03a 	or	r2,r2,r17
    b9c0:	8401ffcc 	andi	r16,r16,2047
    b9c4:	8020953a 	slli	r16,r16,20
    b9c8:	18c03fcc 	andi	r3,r3,255
    b9cc:	01000434 	movhi	r4,16
    b9d0:	213fffc4 	addi	r4,r4,-1
    b9d4:	180697fa 	slli	r3,r3,31
    b9d8:	4110703a 	and	r8,r8,r4
    b9dc:	4410b03a 	or	r8,r8,r16
    b9e0:	40c6b03a 	or	r3,r8,r3
    b9e4:	dfc00417 	ldw	ra,16(sp)
    b9e8:	dcc00317 	ldw	r19,12(sp)
    b9ec:	dc800217 	ldw	r18,8(sp)
    b9f0:	dc400117 	ldw	r17,4(sp)
    b9f4:	dc000017 	ldw	r16,0(sp)
    b9f8:	dec00504 	addi	sp,sp,20
    b9fc:	f800283a 	ret
    ba00:	0081ffc4 	movi	r2,2047
    ba04:	80bfd626 	beq	r16,r2,b960 <__alt_exception_stack_pointer+0xf800b960>
    ba08:	4a402034 	orhi	r9,r9,128
    ba0c:	00800e04 	movi	r2,56
    ba10:	10c09f16 	blt	r2,r3,bc90 <__adddf3+0x3ac>
    ba14:	008007c4 	movi	r2,31
    ba18:	10c0c216 	blt	r2,r3,bd24 <__adddf3+0x440>
    ba1c:	00800804 	movi	r2,32
    ba20:	10c5c83a 	sub	r2,r2,r3
    ba24:	488a983a 	sll	r5,r9,r2
    ba28:	30c8d83a 	srl	r4,r6,r3
    ba2c:	3084983a 	sll	r2,r6,r2
    ba30:	48c6d83a 	srl	r3,r9,r3
    ba34:	290cb03a 	or	r6,r5,r4
    ba38:	1004c03a 	cmpne	r2,r2,zero
    ba3c:	308cb03a 	or	r6,r6,r2
    ba40:	898dc83a 	sub	r6,r17,r6
    ba44:	89a3803a 	cmpltu	r17,r17,r6
    ba48:	40d1c83a 	sub	r8,r8,r3
    ba4c:	4451c83a 	sub	r8,r8,r17
    ba50:	3023883a 	mov	r17,r6
    ba54:	4080202c 	andhi	r2,r8,128
    ba58:	10002326 	beq	r2,zero,bae8 <__adddf3+0x204>
    ba5c:	04c02034 	movhi	r19,128
    ba60:	9cffffc4 	addi	r19,r19,-1
    ba64:	44e6703a 	and	r19,r8,r19
    ba68:	98007626 	beq	r19,zero,bc44 <__adddf3+0x360>
    ba6c:	9809883a 	mov	r4,r19
    ba70:	00014180 	call	1418 <__clzsi2>
    ba74:	10fffe04 	addi	r3,r2,-8
    ba78:	010007c4 	movi	r4,31
    ba7c:	20c07716 	blt	r4,r3,bc5c <__adddf3+0x378>
    ba80:	00800804 	movi	r2,32
    ba84:	10c5c83a 	sub	r2,r2,r3
    ba88:	8884d83a 	srl	r2,r17,r2
    ba8c:	98d0983a 	sll	r8,r19,r3
    ba90:	88e2983a 	sll	r17,r17,r3
    ba94:	1204b03a 	or	r2,r2,r8
    ba98:	1c007416 	blt	r3,r16,bc6c <__adddf3+0x388>
    ba9c:	1c21c83a 	sub	r16,r3,r16
    baa0:	82000044 	addi	r8,r16,1
    baa4:	00c007c4 	movi	r3,31
    baa8:	1a009116 	blt	r3,r8,bcf0 <__adddf3+0x40c>
    baac:	00c00804 	movi	r3,32
    bab0:	1a07c83a 	sub	r3,r3,r8
    bab4:	8a08d83a 	srl	r4,r17,r8
    bab8:	88e2983a 	sll	r17,r17,r3
    babc:	10c6983a 	sll	r3,r2,r3
    bac0:	1210d83a 	srl	r8,r2,r8
    bac4:	8804c03a 	cmpne	r2,r17,zero
    bac8:	1906b03a 	or	r3,r3,r4
    bacc:	18a2b03a 	or	r17,r3,r2
    bad0:	0021883a 	mov	r16,zero
    bad4:	003fa206 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bad8:	1890b03a 	or	r8,r3,r2
    badc:	40017d26 	beq	r8,zero,c0d4 <__adddf3+0x7f0>
    bae0:	1011883a 	mov	r8,r2
    bae4:	1823883a 	mov	r17,r3
    bae8:	888001cc 	andi	r2,r17,7
    baec:	103f9e1e 	bne	r2,zero,b968 <__alt_exception_stack_pointer+0xf800b968>
    baf0:	4004977a 	slli	r2,r8,29
    baf4:	8822d0fa 	srli	r17,r17,3
    baf8:	4010d0fa 	srli	r8,r8,3
    bafc:	9007883a 	mov	r3,r18
    bb00:	1444b03a 	or	r2,r2,r17
    bb04:	0101ffc4 	movi	r4,2047
    bb08:	81002426 	beq	r16,r4,bb9c <__adddf3+0x2b8>
    bb0c:	8120703a 	and	r16,r16,r4
    bb10:	01000434 	movhi	r4,16
    bb14:	213fffc4 	addi	r4,r4,-1
    bb18:	4110703a 	and	r8,r8,r4
    bb1c:	003fa806 	br	b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bb20:	8089c83a 	sub	r4,r16,r2
    bb24:	01005e0e 	bge	zero,r4,bca0 <__adddf3+0x3bc>
    bb28:	10002b26 	beq	r2,zero,bbd8 <__adddf3+0x2f4>
    bb2c:	0081ffc4 	movi	r2,2047
    bb30:	80bf8b26 	beq	r16,r2,b960 <__alt_exception_stack_pointer+0xf800b960>
    bb34:	4a402034 	orhi	r9,r9,128
    bb38:	00800e04 	movi	r2,56
    bb3c:	1100a40e 	bge	r2,r4,bdd0 <__adddf3+0x4ec>
    bb40:	498cb03a 	or	r6,r9,r6
    bb44:	300ac03a 	cmpne	r5,r6,zero
    bb48:	0013883a 	mov	r9,zero
    bb4c:	2c4b883a 	add	r5,r5,r17
    bb50:	2c63803a 	cmpltu	r17,r5,r17
    bb54:	4a11883a 	add	r8,r9,r8
    bb58:	8a11883a 	add	r8,r17,r8
    bb5c:	2823883a 	mov	r17,r5
    bb60:	4080202c 	andhi	r2,r8,128
    bb64:	103fe026 	beq	r2,zero,bae8 <__alt_exception_stack_pointer+0xf800bae8>
    bb68:	84000044 	addi	r16,r16,1
    bb6c:	0081ffc4 	movi	r2,2047
    bb70:	8080d226 	beq	r16,r2,bebc <__adddf3+0x5d8>
    bb74:	00bfe034 	movhi	r2,65408
    bb78:	10bfffc4 	addi	r2,r2,-1
    bb7c:	4090703a 	and	r8,r8,r2
    bb80:	880ad07a 	srli	r5,r17,1
    bb84:	400897fa 	slli	r4,r8,31
    bb88:	88c0004c 	andi	r3,r17,1
    bb8c:	28e2b03a 	or	r17,r5,r3
    bb90:	4010d07a 	srli	r8,r8,1
    bb94:	2462b03a 	or	r17,r4,r17
    bb98:	003f7106 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bb9c:	4088b03a 	or	r4,r8,r2
    bba0:	20014526 	beq	r4,zero,c0b8 <__adddf3+0x7d4>
    bba4:	01000434 	movhi	r4,16
    bba8:	42000234 	orhi	r8,r8,8
    bbac:	213fffc4 	addi	r4,r4,-1
    bbb0:	4110703a 	and	r8,r8,r4
    bbb4:	003f8206 	br	b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bbb8:	18ffffc4 	addi	r3,r3,-1
    bbbc:	1800491e 	bne	r3,zero,bce4 <__adddf3+0x400>
    bbc0:	898bc83a 	sub	r5,r17,r6
    bbc4:	8963803a 	cmpltu	r17,r17,r5
    bbc8:	4251c83a 	sub	r8,r8,r9
    bbcc:	4451c83a 	sub	r8,r8,r17
    bbd0:	2823883a 	mov	r17,r5
    bbd4:	003f9f06 	br	ba54 <__alt_exception_stack_pointer+0xf800ba54>
    bbd8:	4984b03a 	or	r2,r9,r6
    bbdc:	103f6026 	beq	r2,zero,b960 <__alt_exception_stack_pointer+0xf800b960>
    bbe0:	213fffc4 	addi	r4,r4,-1
    bbe4:	2000931e 	bne	r4,zero,be34 <__adddf3+0x550>
    bbe8:	898d883a 	add	r6,r17,r6
    bbec:	3463803a 	cmpltu	r17,r6,r17
    bbf0:	4251883a 	add	r8,r8,r9
    bbf4:	8a11883a 	add	r8,r17,r8
    bbf8:	3023883a 	mov	r17,r6
    bbfc:	003fd806 	br	bb60 <__alt_exception_stack_pointer+0xf800bb60>
    bc00:	1800541e 	bne	r3,zero,bd54 <__adddf3+0x470>
    bc04:	80800044 	addi	r2,r16,1
    bc08:	1081ffcc 	andi	r2,r2,2047
    bc0c:	00c00044 	movi	r3,1
    bc10:	1880a00e 	bge	r3,r2,be94 <__adddf3+0x5b0>
    bc14:	8989c83a 	sub	r4,r17,r6
    bc18:	8905803a 	cmpltu	r2,r17,r4
    bc1c:	4267c83a 	sub	r19,r8,r9
    bc20:	98a7c83a 	sub	r19,r19,r2
    bc24:	9880202c 	andhi	r2,r19,128
    bc28:	10006326 	beq	r2,zero,bdb8 <__adddf3+0x4d4>
    bc2c:	3463c83a 	sub	r17,r6,r17
    bc30:	4a07c83a 	sub	r3,r9,r8
    bc34:	344d803a 	cmpltu	r6,r6,r17
    bc38:	19a7c83a 	sub	r19,r3,r6
    bc3c:	3825883a 	mov	r18,r7
    bc40:	983f8a1e 	bne	r19,zero,ba6c <__alt_exception_stack_pointer+0xf800ba6c>
    bc44:	8809883a 	mov	r4,r17
    bc48:	00014180 	call	1418 <__clzsi2>
    bc4c:	10800804 	addi	r2,r2,32
    bc50:	10fffe04 	addi	r3,r2,-8
    bc54:	010007c4 	movi	r4,31
    bc58:	20ff890e 	bge	r4,r3,ba80 <__alt_exception_stack_pointer+0xf800ba80>
    bc5c:	10bff604 	addi	r2,r2,-40
    bc60:	8884983a 	sll	r2,r17,r2
    bc64:	0023883a 	mov	r17,zero
    bc68:	1c3f8c0e 	bge	r3,r16,ba9c <__alt_exception_stack_pointer+0xf800ba9c>
    bc6c:	023fe034 	movhi	r8,65408
    bc70:	423fffc4 	addi	r8,r8,-1
    bc74:	80e1c83a 	sub	r16,r16,r3
    bc78:	1210703a 	and	r8,r2,r8
    bc7c:	003f3806 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bc80:	9007883a 	mov	r3,r18
    bc84:	0011883a 	mov	r8,zero
    bc88:	0005883a 	mov	r2,zero
    bc8c:	003f4c06 	br	b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bc90:	498cb03a 	or	r6,r9,r6
    bc94:	300cc03a 	cmpne	r6,r6,zero
    bc98:	0007883a 	mov	r3,zero
    bc9c:	003f6806 	br	ba40 <__alt_exception_stack_pointer+0xf800ba40>
    bca0:	20009c1e 	bne	r4,zero,bf14 <__adddf3+0x630>
    bca4:	80800044 	addi	r2,r16,1
    bca8:	1141ffcc 	andi	r5,r2,2047
    bcac:	01000044 	movi	r4,1
    bcb0:	2140670e 	bge	r4,r5,be50 <__adddf3+0x56c>
    bcb4:	0101ffc4 	movi	r4,2047
    bcb8:	11007f26 	beq	r2,r4,beb8 <__adddf3+0x5d4>
    bcbc:	898d883a 	add	r6,r17,r6
    bcc0:	4247883a 	add	r3,r8,r9
    bcc4:	3451803a 	cmpltu	r8,r6,r17
    bcc8:	40d1883a 	add	r8,r8,r3
    bccc:	402297fa 	slli	r17,r8,31
    bcd0:	300cd07a 	srli	r6,r6,1
    bcd4:	4010d07a 	srli	r8,r8,1
    bcd8:	1021883a 	mov	r16,r2
    bcdc:	89a2b03a 	or	r17,r17,r6
    bce0:	003f1f06 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bce4:	0081ffc4 	movi	r2,2047
    bce8:	80bf481e 	bne	r16,r2,ba0c <__alt_exception_stack_pointer+0xf800ba0c>
    bcec:	003f1c06 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bcf0:	843ff844 	addi	r16,r16,-31
    bcf4:	01000804 	movi	r4,32
    bcf8:	1406d83a 	srl	r3,r2,r16
    bcfc:	41005026 	beq	r8,r4,be40 <__adddf3+0x55c>
    bd00:	01001004 	movi	r4,64
    bd04:	2211c83a 	sub	r8,r4,r8
    bd08:	1204983a 	sll	r2,r2,r8
    bd0c:	88a2b03a 	or	r17,r17,r2
    bd10:	8822c03a 	cmpne	r17,r17,zero
    bd14:	1c62b03a 	or	r17,r3,r17
    bd18:	0011883a 	mov	r8,zero
    bd1c:	0021883a 	mov	r16,zero
    bd20:	003f7106 	br	bae8 <__alt_exception_stack_pointer+0xf800bae8>
    bd24:	193ff804 	addi	r4,r3,-32
    bd28:	00800804 	movi	r2,32
    bd2c:	4908d83a 	srl	r4,r9,r4
    bd30:	18804526 	beq	r3,r2,be48 <__adddf3+0x564>
    bd34:	00801004 	movi	r2,64
    bd38:	10c5c83a 	sub	r2,r2,r3
    bd3c:	4886983a 	sll	r3,r9,r2
    bd40:	198cb03a 	or	r6,r3,r6
    bd44:	300cc03a 	cmpne	r6,r6,zero
    bd48:	218cb03a 	or	r6,r4,r6
    bd4c:	0007883a 	mov	r3,zero
    bd50:	003f3b06 	br	ba40 <__alt_exception_stack_pointer+0xf800ba40>
    bd54:	80002a26 	beq	r16,zero,be00 <__adddf3+0x51c>
    bd58:	0101ffc4 	movi	r4,2047
    bd5c:	11006826 	beq	r2,r4,bf00 <__adddf3+0x61c>
    bd60:	00c7c83a 	sub	r3,zero,r3
    bd64:	42002034 	orhi	r8,r8,128
    bd68:	01000e04 	movi	r4,56
    bd6c:	20c07c16 	blt	r4,r3,bf60 <__adddf3+0x67c>
    bd70:	010007c4 	movi	r4,31
    bd74:	20c0da16 	blt	r4,r3,c0e0 <__adddf3+0x7fc>
    bd78:	01000804 	movi	r4,32
    bd7c:	20c9c83a 	sub	r4,r4,r3
    bd80:	4114983a 	sll	r10,r8,r4
    bd84:	88cad83a 	srl	r5,r17,r3
    bd88:	8908983a 	sll	r4,r17,r4
    bd8c:	40c6d83a 	srl	r3,r8,r3
    bd90:	5162b03a 	or	r17,r10,r5
    bd94:	2008c03a 	cmpne	r4,r4,zero
    bd98:	8922b03a 	or	r17,r17,r4
    bd9c:	3463c83a 	sub	r17,r6,r17
    bda0:	48c7c83a 	sub	r3,r9,r3
    bda4:	344d803a 	cmpltu	r6,r6,r17
    bda8:	1991c83a 	sub	r8,r3,r6
    bdac:	1021883a 	mov	r16,r2
    bdb0:	3825883a 	mov	r18,r7
    bdb4:	003f2706 	br	ba54 <__alt_exception_stack_pointer+0xf800ba54>
    bdb8:	24d0b03a 	or	r8,r4,r19
    bdbc:	40001b1e 	bne	r8,zero,be2c <__adddf3+0x548>
    bdc0:	0005883a 	mov	r2,zero
    bdc4:	0007883a 	mov	r3,zero
    bdc8:	0021883a 	mov	r16,zero
    bdcc:	003f4d06 	br	bb04 <__alt_exception_stack_pointer+0xf800bb04>
    bdd0:	008007c4 	movi	r2,31
    bdd4:	11003c16 	blt	r2,r4,bec8 <__adddf3+0x5e4>
    bdd8:	00800804 	movi	r2,32
    bddc:	1105c83a 	sub	r2,r2,r4
    bde0:	488e983a 	sll	r7,r9,r2
    bde4:	310ad83a 	srl	r5,r6,r4
    bde8:	3084983a 	sll	r2,r6,r2
    bdec:	4912d83a 	srl	r9,r9,r4
    bdf0:	394ab03a 	or	r5,r7,r5
    bdf4:	1004c03a 	cmpne	r2,r2,zero
    bdf8:	288ab03a 	or	r5,r5,r2
    bdfc:	003f5306 	br	bb4c <__alt_exception_stack_pointer+0xf800bb4c>
    be00:	4448b03a 	or	r4,r8,r17
    be04:	20003e26 	beq	r4,zero,bf00 <__adddf3+0x61c>
    be08:	00c6303a 	nor	r3,zero,r3
    be0c:	18003a1e 	bne	r3,zero,bef8 <__adddf3+0x614>
    be10:	3463c83a 	sub	r17,r6,r17
    be14:	4a07c83a 	sub	r3,r9,r8
    be18:	344d803a 	cmpltu	r6,r6,r17
    be1c:	1991c83a 	sub	r8,r3,r6
    be20:	1021883a 	mov	r16,r2
    be24:	3825883a 	mov	r18,r7
    be28:	003f0a06 	br	ba54 <__alt_exception_stack_pointer+0xf800ba54>
    be2c:	2023883a 	mov	r17,r4
    be30:	003f0d06 	br	ba68 <__alt_exception_stack_pointer+0xf800ba68>
    be34:	0081ffc4 	movi	r2,2047
    be38:	80bf3f1e 	bne	r16,r2,bb38 <__alt_exception_stack_pointer+0xf800bb38>
    be3c:	003ec806 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    be40:	0005883a 	mov	r2,zero
    be44:	003fb106 	br	bd0c <__alt_exception_stack_pointer+0xf800bd0c>
    be48:	0007883a 	mov	r3,zero
    be4c:	003fbc06 	br	bd40 <__alt_exception_stack_pointer+0xf800bd40>
    be50:	4444b03a 	or	r2,r8,r17
    be54:	8000871e 	bne	r16,zero,c074 <__adddf3+0x790>
    be58:	1000ba26 	beq	r2,zero,c144 <__adddf3+0x860>
    be5c:	4984b03a 	or	r2,r9,r6
    be60:	103ebf26 	beq	r2,zero,b960 <__alt_exception_stack_pointer+0xf800b960>
    be64:	8985883a 	add	r2,r17,r6
    be68:	4247883a 	add	r3,r8,r9
    be6c:	1451803a 	cmpltu	r8,r2,r17
    be70:	40d1883a 	add	r8,r8,r3
    be74:	40c0202c 	andhi	r3,r8,128
    be78:	1023883a 	mov	r17,r2
    be7c:	183f1a26 	beq	r3,zero,bae8 <__alt_exception_stack_pointer+0xf800bae8>
    be80:	00bfe034 	movhi	r2,65408
    be84:	10bfffc4 	addi	r2,r2,-1
    be88:	2021883a 	mov	r16,r4
    be8c:	4090703a 	and	r8,r8,r2
    be90:	003eb306 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    be94:	4444b03a 	or	r2,r8,r17
    be98:	8000291e 	bne	r16,zero,bf40 <__adddf3+0x65c>
    be9c:	10004b1e 	bne	r2,zero,bfcc <__adddf3+0x6e8>
    bea0:	4990b03a 	or	r8,r9,r6
    bea4:	40008b26 	beq	r8,zero,c0d4 <__adddf3+0x7f0>
    bea8:	4811883a 	mov	r8,r9
    beac:	3023883a 	mov	r17,r6
    beb0:	3825883a 	mov	r18,r7
    beb4:	003eaa06 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    beb8:	1021883a 	mov	r16,r2
    bebc:	0011883a 	mov	r8,zero
    bec0:	0005883a 	mov	r2,zero
    bec4:	003f0f06 	br	bb04 <__alt_exception_stack_pointer+0xf800bb04>
    bec8:	217ff804 	addi	r5,r4,-32
    becc:	00800804 	movi	r2,32
    bed0:	494ad83a 	srl	r5,r9,r5
    bed4:	20807d26 	beq	r4,r2,c0cc <__adddf3+0x7e8>
    bed8:	00801004 	movi	r2,64
    bedc:	1109c83a 	sub	r4,r2,r4
    bee0:	4912983a 	sll	r9,r9,r4
    bee4:	498cb03a 	or	r6,r9,r6
    bee8:	300cc03a 	cmpne	r6,r6,zero
    beec:	298ab03a 	or	r5,r5,r6
    bef0:	0013883a 	mov	r9,zero
    bef4:	003f1506 	br	bb4c <__alt_exception_stack_pointer+0xf800bb4c>
    bef8:	0101ffc4 	movi	r4,2047
    befc:	113f9a1e 	bne	r2,r4,bd68 <__alt_exception_stack_pointer+0xf800bd68>
    bf00:	4811883a 	mov	r8,r9
    bf04:	3023883a 	mov	r17,r6
    bf08:	1021883a 	mov	r16,r2
    bf0c:	3825883a 	mov	r18,r7
    bf10:	003e9306 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bf14:	8000161e 	bne	r16,zero,bf70 <__adddf3+0x68c>
    bf18:	444ab03a 	or	r5,r8,r17
    bf1c:	28005126 	beq	r5,zero,c064 <__adddf3+0x780>
    bf20:	0108303a 	nor	r4,zero,r4
    bf24:	20004d1e 	bne	r4,zero,c05c <__adddf3+0x778>
    bf28:	89a3883a 	add	r17,r17,r6
    bf2c:	4253883a 	add	r9,r8,r9
    bf30:	898d803a 	cmpltu	r6,r17,r6
    bf34:	3251883a 	add	r8,r6,r9
    bf38:	1021883a 	mov	r16,r2
    bf3c:	003f0806 	br	bb60 <__alt_exception_stack_pointer+0xf800bb60>
    bf40:	1000301e 	bne	r2,zero,c004 <__adddf3+0x720>
    bf44:	4984b03a 	or	r2,r9,r6
    bf48:	10007126 	beq	r2,zero,c110 <__adddf3+0x82c>
    bf4c:	4811883a 	mov	r8,r9
    bf50:	3023883a 	mov	r17,r6
    bf54:	3825883a 	mov	r18,r7
    bf58:	0401ffc4 	movi	r16,2047
    bf5c:	003e8006 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    bf60:	4462b03a 	or	r17,r8,r17
    bf64:	8822c03a 	cmpne	r17,r17,zero
    bf68:	0007883a 	mov	r3,zero
    bf6c:	003f8b06 	br	bd9c <__alt_exception_stack_pointer+0xf800bd9c>
    bf70:	0141ffc4 	movi	r5,2047
    bf74:	11403b26 	beq	r2,r5,c064 <__adddf3+0x780>
    bf78:	0109c83a 	sub	r4,zero,r4
    bf7c:	42002034 	orhi	r8,r8,128
    bf80:	01400e04 	movi	r5,56
    bf84:	29006716 	blt	r5,r4,c124 <__adddf3+0x840>
    bf88:	014007c4 	movi	r5,31
    bf8c:	29007016 	blt	r5,r4,c150 <__adddf3+0x86c>
    bf90:	01400804 	movi	r5,32
    bf94:	290bc83a 	sub	r5,r5,r4
    bf98:	4154983a 	sll	r10,r8,r5
    bf9c:	890ed83a 	srl	r7,r17,r4
    bfa0:	894a983a 	sll	r5,r17,r5
    bfa4:	4108d83a 	srl	r4,r8,r4
    bfa8:	51e2b03a 	or	r17,r10,r7
    bfac:	280ac03a 	cmpne	r5,r5,zero
    bfb0:	8962b03a 	or	r17,r17,r5
    bfb4:	89a3883a 	add	r17,r17,r6
    bfb8:	2253883a 	add	r9,r4,r9
    bfbc:	898d803a 	cmpltu	r6,r17,r6
    bfc0:	3251883a 	add	r8,r6,r9
    bfc4:	1021883a 	mov	r16,r2
    bfc8:	003ee506 	br	bb60 <__alt_exception_stack_pointer+0xf800bb60>
    bfcc:	4984b03a 	or	r2,r9,r6
    bfd0:	103e6326 	beq	r2,zero,b960 <__alt_exception_stack_pointer+0xf800b960>
    bfd4:	8987c83a 	sub	r3,r17,r6
    bfd8:	88c9803a 	cmpltu	r4,r17,r3
    bfdc:	4245c83a 	sub	r2,r8,r9
    bfe0:	1105c83a 	sub	r2,r2,r4
    bfe4:	1100202c 	andhi	r4,r2,128
    bfe8:	203ebb26 	beq	r4,zero,bad8 <__alt_exception_stack_pointer+0xf800bad8>
    bfec:	3463c83a 	sub	r17,r6,r17
    bff0:	4a07c83a 	sub	r3,r9,r8
    bff4:	344d803a 	cmpltu	r6,r6,r17
    bff8:	1991c83a 	sub	r8,r3,r6
    bffc:	3825883a 	mov	r18,r7
    c000:	003e5706 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c004:	4984b03a 	or	r2,r9,r6
    c008:	10002e26 	beq	r2,zero,c0c4 <__adddf3+0x7e0>
    c00c:	4004d0fa 	srli	r2,r8,3
    c010:	8822d0fa 	srli	r17,r17,3
    c014:	4010977a 	slli	r8,r8,29
    c018:	10c0022c 	andhi	r3,r2,8
    c01c:	4462b03a 	or	r17,r8,r17
    c020:	18000826 	beq	r3,zero,c044 <__adddf3+0x760>
    c024:	4808d0fa 	srli	r4,r9,3
    c028:	20c0022c 	andhi	r3,r4,8
    c02c:	1800051e 	bne	r3,zero,c044 <__adddf3+0x760>
    c030:	300cd0fa 	srli	r6,r6,3
    c034:	4806977a 	slli	r3,r9,29
    c038:	2005883a 	mov	r2,r4
    c03c:	3825883a 	mov	r18,r7
    c040:	19a2b03a 	or	r17,r3,r6
    c044:	8810d77a 	srli	r8,r17,29
    c048:	100490fa 	slli	r2,r2,3
    c04c:	882290fa 	slli	r17,r17,3
    c050:	0401ffc4 	movi	r16,2047
    c054:	4090b03a 	or	r8,r8,r2
    c058:	003e4106 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c05c:	0141ffc4 	movi	r5,2047
    c060:	117fc71e 	bne	r2,r5,bf80 <__alt_exception_stack_pointer+0xf800bf80>
    c064:	4811883a 	mov	r8,r9
    c068:	3023883a 	mov	r17,r6
    c06c:	1021883a 	mov	r16,r2
    c070:	003e3b06 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c074:	10002f26 	beq	r2,zero,c134 <__adddf3+0x850>
    c078:	4984b03a 	or	r2,r9,r6
    c07c:	10001126 	beq	r2,zero,c0c4 <__adddf3+0x7e0>
    c080:	4004d0fa 	srli	r2,r8,3
    c084:	8822d0fa 	srli	r17,r17,3
    c088:	4010977a 	slli	r8,r8,29
    c08c:	10c0022c 	andhi	r3,r2,8
    c090:	4462b03a 	or	r17,r8,r17
    c094:	183feb26 	beq	r3,zero,c044 <__alt_exception_stack_pointer+0xf800c044>
    c098:	4808d0fa 	srli	r4,r9,3
    c09c:	20c0022c 	andhi	r3,r4,8
    c0a0:	183fe81e 	bne	r3,zero,c044 <__alt_exception_stack_pointer+0xf800c044>
    c0a4:	300cd0fa 	srli	r6,r6,3
    c0a8:	4806977a 	slli	r3,r9,29
    c0ac:	2005883a 	mov	r2,r4
    c0b0:	19a2b03a 	or	r17,r3,r6
    c0b4:	003fe306 	br	c044 <__alt_exception_stack_pointer+0xf800c044>
    c0b8:	0011883a 	mov	r8,zero
    c0bc:	0005883a 	mov	r2,zero
    c0c0:	003e3f06 	br	b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    c0c4:	0401ffc4 	movi	r16,2047
    c0c8:	003e2506 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c0cc:	0013883a 	mov	r9,zero
    c0d0:	003f8406 	br	bee4 <__alt_exception_stack_pointer+0xf800bee4>
    c0d4:	0005883a 	mov	r2,zero
    c0d8:	0007883a 	mov	r3,zero
    c0dc:	003e8906 	br	bb04 <__alt_exception_stack_pointer+0xf800bb04>
    c0e0:	197ff804 	addi	r5,r3,-32
    c0e4:	01000804 	movi	r4,32
    c0e8:	414ad83a 	srl	r5,r8,r5
    c0ec:	19002426 	beq	r3,r4,c180 <__adddf3+0x89c>
    c0f0:	01001004 	movi	r4,64
    c0f4:	20c7c83a 	sub	r3,r4,r3
    c0f8:	40c6983a 	sll	r3,r8,r3
    c0fc:	1c46b03a 	or	r3,r3,r17
    c100:	1806c03a 	cmpne	r3,r3,zero
    c104:	28e2b03a 	or	r17,r5,r3
    c108:	0007883a 	mov	r3,zero
    c10c:	003f2306 	br	bd9c <__alt_exception_stack_pointer+0xf800bd9c>
    c110:	0007883a 	mov	r3,zero
    c114:	5811883a 	mov	r8,r11
    c118:	00bfffc4 	movi	r2,-1
    c11c:	0401ffc4 	movi	r16,2047
    c120:	003e7806 	br	bb04 <__alt_exception_stack_pointer+0xf800bb04>
    c124:	4462b03a 	or	r17,r8,r17
    c128:	8822c03a 	cmpne	r17,r17,zero
    c12c:	0009883a 	mov	r4,zero
    c130:	003fa006 	br	bfb4 <__alt_exception_stack_pointer+0xf800bfb4>
    c134:	4811883a 	mov	r8,r9
    c138:	3023883a 	mov	r17,r6
    c13c:	0401ffc4 	movi	r16,2047
    c140:	003e0706 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c144:	4811883a 	mov	r8,r9
    c148:	3023883a 	mov	r17,r6
    c14c:	003e0406 	br	b960 <__alt_exception_stack_pointer+0xf800b960>
    c150:	21fff804 	addi	r7,r4,-32
    c154:	01400804 	movi	r5,32
    c158:	41ced83a 	srl	r7,r8,r7
    c15c:	21400a26 	beq	r4,r5,c188 <__adddf3+0x8a4>
    c160:	01401004 	movi	r5,64
    c164:	2909c83a 	sub	r4,r5,r4
    c168:	4108983a 	sll	r4,r8,r4
    c16c:	2448b03a 	or	r4,r4,r17
    c170:	2008c03a 	cmpne	r4,r4,zero
    c174:	3922b03a 	or	r17,r7,r4
    c178:	0009883a 	mov	r4,zero
    c17c:	003f8d06 	br	bfb4 <__alt_exception_stack_pointer+0xf800bfb4>
    c180:	0007883a 	mov	r3,zero
    c184:	003fdd06 	br	c0fc <__alt_exception_stack_pointer+0xf800c0fc>
    c188:	0009883a 	mov	r4,zero
    c18c:	003ff706 	br	c16c <__alt_exception_stack_pointer+0xf800c16c>

0000c190 <__eqdf2>:
    c190:	2804d53a 	srli	r2,r5,20
    c194:	3806d53a 	srli	r3,r7,20
    c198:	02000434 	movhi	r8,16
    c19c:	423fffc4 	addi	r8,r8,-1
    c1a0:	1081ffcc 	andi	r2,r2,2047
    c1a4:	0281ffc4 	movi	r10,2047
    c1a8:	2a12703a 	and	r9,r5,r8
    c1ac:	18c1ffcc 	andi	r3,r3,2047
    c1b0:	3a10703a 	and	r8,r7,r8
    c1b4:	280ad7fa 	srli	r5,r5,31
    c1b8:	380ed7fa 	srli	r7,r7,31
    c1bc:	12801026 	beq	r2,r10,c200 <__eqdf2+0x70>
    c1c0:	0281ffc4 	movi	r10,2047
    c1c4:	1a800a26 	beq	r3,r10,c1f0 <__eqdf2+0x60>
    c1c8:	10c00226 	beq	r2,r3,c1d4 <__eqdf2+0x44>
    c1cc:	00800044 	movi	r2,1
    c1d0:	f800283a 	ret
    c1d4:	4a3ffd1e 	bne	r9,r8,c1cc <__alt_exception_stack_pointer+0xf800c1cc>
    c1d8:	21bffc1e 	bne	r4,r6,c1cc <__alt_exception_stack_pointer+0xf800c1cc>
    c1dc:	29c00c26 	beq	r5,r7,c210 <__eqdf2+0x80>
    c1e0:	103ffa1e 	bne	r2,zero,c1cc <__alt_exception_stack_pointer+0xf800c1cc>
    c1e4:	2244b03a 	or	r2,r4,r9
    c1e8:	1004c03a 	cmpne	r2,r2,zero
    c1ec:	f800283a 	ret
    c1f0:	3214b03a 	or	r10,r6,r8
    c1f4:	503ff426 	beq	r10,zero,c1c8 <__alt_exception_stack_pointer+0xf800c1c8>
    c1f8:	00800044 	movi	r2,1
    c1fc:	f800283a 	ret
    c200:	2254b03a 	or	r10,r4,r9
    c204:	503fee26 	beq	r10,zero,c1c0 <__alt_exception_stack_pointer+0xf800c1c0>
    c208:	00800044 	movi	r2,1
    c20c:	f800283a 	ret
    c210:	0005883a 	mov	r2,zero
    c214:	f800283a 	ret

0000c218 <__gedf2>:
    c218:	2804d53a 	srli	r2,r5,20
    c21c:	3806d53a 	srli	r3,r7,20
    c220:	02000434 	movhi	r8,16
    c224:	423fffc4 	addi	r8,r8,-1
    c228:	1081ffcc 	andi	r2,r2,2047
    c22c:	0241ffc4 	movi	r9,2047
    c230:	2a14703a 	and	r10,r5,r8
    c234:	18c1ffcc 	andi	r3,r3,2047
    c238:	3a10703a 	and	r8,r7,r8
    c23c:	280ad7fa 	srli	r5,r5,31
    c240:	380ed7fa 	srli	r7,r7,31
    c244:	12401d26 	beq	r2,r9,c2bc <__gedf2+0xa4>
    c248:	0241ffc4 	movi	r9,2047
    c24c:	1a401226 	beq	r3,r9,c298 <__gedf2+0x80>
    c250:	1000081e 	bne	r2,zero,c274 <__gedf2+0x5c>
    c254:	2296b03a 	or	r11,r4,r10
    c258:	5813003a 	cmpeq	r9,r11,zero
    c25c:	1800091e 	bne	r3,zero,c284 <__gedf2+0x6c>
    c260:	3218b03a 	or	r12,r6,r8
    c264:	6000071e 	bne	r12,zero,c284 <__gedf2+0x6c>
    c268:	0005883a 	mov	r2,zero
    c26c:	5800101e 	bne	r11,zero,c2b0 <__gedf2+0x98>
    c270:	f800283a 	ret
    c274:	18000c1e 	bne	r3,zero,c2a8 <__gedf2+0x90>
    c278:	3212b03a 	or	r9,r6,r8
    c27c:	48000c26 	beq	r9,zero,c2b0 <__gedf2+0x98>
    c280:	0013883a 	mov	r9,zero
    c284:	39c03fcc 	andi	r7,r7,255
    c288:	48000826 	beq	r9,zero,c2ac <__gedf2+0x94>
    c28c:	38000926 	beq	r7,zero,c2b4 <__gedf2+0x9c>
    c290:	00800044 	movi	r2,1
    c294:	f800283a 	ret
    c298:	3212b03a 	or	r9,r6,r8
    c29c:	483fec26 	beq	r9,zero,c250 <__alt_exception_stack_pointer+0xf800c250>
    c2a0:	00bfff84 	movi	r2,-2
    c2a4:	f800283a 	ret
    c2a8:	39c03fcc 	andi	r7,r7,255
    c2ac:	29c00626 	beq	r5,r7,c2c8 <__gedf2+0xb0>
    c2b0:	283ff726 	beq	r5,zero,c290 <__alt_exception_stack_pointer+0xf800c290>
    c2b4:	00bfffc4 	movi	r2,-1
    c2b8:	f800283a 	ret
    c2bc:	2292b03a 	or	r9,r4,r10
    c2c0:	483fe126 	beq	r9,zero,c248 <__alt_exception_stack_pointer+0xf800c248>
    c2c4:	003ff606 	br	c2a0 <__alt_exception_stack_pointer+0xf800c2a0>
    c2c8:	18bff916 	blt	r3,r2,c2b0 <__alt_exception_stack_pointer+0xf800c2b0>
    c2cc:	10c00316 	blt	r2,r3,c2dc <__gedf2+0xc4>
    c2d0:	42bff736 	bltu	r8,r10,c2b0 <__alt_exception_stack_pointer+0xf800c2b0>
    c2d4:	52000326 	beq	r10,r8,c2e4 <__gedf2+0xcc>
    c2d8:	5200042e 	bgeu	r10,r8,c2ec <__gedf2+0xd4>
    c2dc:	283fec1e 	bne	r5,zero,c290 <__alt_exception_stack_pointer+0xf800c290>
    c2e0:	003ff406 	br	c2b4 <__alt_exception_stack_pointer+0xf800c2b4>
    c2e4:	313ff236 	bltu	r6,r4,c2b0 <__alt_exception_stack_pointer+0xf800c2b0>
    c2e8:	21bffc36 	bltu	r4,r6,c2dc <__alt_exception_stack_pointer+0xf800c2dc>
    c2ec:	0005883a 	mov	r2,zero
    c2f0:	f800283a 	ret

0000c2f4 <__ledf2>:
    c2f4:	2804d53a 	srli	r2,r5,20
    c2f8:	3810d53a 	srli	r8,r7,20
    c2fc:	00c00434 	movhi	r3,16
    c300:	18ffffc4 	addi	r3,r3,-1
    c304:	1081ffcc 	andi	r2,r2,2047
    c308:	0241ffc4 	movi	r9,2047
    c30c:	28d4703a 	and	r10,r5,r3
    c310:	4201ffcc 	andi	r8,r8,2047
    c314:	38c6703a 	and	r3,r7,r3
    c318:	280ad7fa 	srli	r5,r5,31
    c31c:	380ed7fa 	srli	r7,r7,31
    c320:	12401f26 	beq	r2,r9,c3a0 <__ledf2+0xac>
    c324:	0241ffc4 	movi	r9,2047
    c328:	42401426 	beq	r8,r9,c37c <__ledf2+0x88>
    c32c:	1000091e 	bne	r2,zero,c354 <__ledf2+0x60>
    c330:	2296b03a 	or	r11,r4,r10
    c334:	5813003a 	cmpeq	r9,r11,zero
    c338:	29403fcc 	andi	r5,r5,255
    c33c:	40000a1e 	bne	r8,zero,c368 <__ledf2+0x74>
    c340:	30d8b03a 	or	r12,r6,r3
    c344:	6000081e 	bne	r12,zero,c368 <__ledf2+0x74>
    c348:	0005883a 	mov	r2,zero
    c34c:	5800111e 	bne	r11,zero,c394 <__ledf2+0xa0>
    c350:	f800283a 	ret
    c354:	29403fcc 	andi	r5,r5,255
    c358:	40000c1e 	bne	r8,zero,c38c <__ledf2+0x98>
    c35c:	30d2b03a 	or	r9,r6,r3
    c360:	48000c26 	beq	r9,zero,c394 <__ledf2+0xa0>
    c364:	0013883a 	mov	r9,zero
    c368:	39c03fcc 	andi	r7,r7,255
    c36c:	48000826 	beq	r9,zero,c390 <__ledf2+0x9c>
    c370:	38001126 	beq	r7,zero,c3b8 <__ledf2+0xc4>
    c374:	00800044 	movi	r2,1
    c378:	f800283a 	ret
    c37c:	30d2b03a 	or	r9,r6,r3
    c380:	483fea26 	beq	r9,zero,c32c <__alt_exception_stack_pointer+0xf800c32c>
    c384:	00800084 	movi	r2,2
    c388:	f800283a 	ret
    c38c:	39c03fcc 	andi	r7,r7,255
    c390:	39400726 	beq	r7,r5,c3b0 <__ledf2+0xbc>
    c394:	2800081e 	bne	r5,zero,c3b8 <__ledf2+0xc4>
    c398:	00800044 	movi	r2,1
    c39c:	f800283a 	ret
    c3a0:	2292b03a 	or	r9,r4,r10
    c3a4:	483fdf26 	beq	r9,zero,c324 <__alt_exception_stack_pointer+0xf800c324>
    c3a8:	00800084 	movi	r2,2
    c3ac:	f800283a 	ret
    c3b0:	4080030e 	bge	r8,r2,c3c0 <__ledf2+0xcc>
    c3b4:	383fef26 	beq	r7,zero,c374 <__alt_exception_stack_pointer+0xf800c374>
    c3b8:	00bfffc4 	movi	r2,-1
    c3bc:	f800283a 	ret
    c3c0:	123feb16 	blt	r2,r8,c370 <__alt_exception_stack_pointer+0xf800c370>
    c3c4:	1abff336 	bltu	r3,r10,c394 <__alt_exception_stack_pointer+0xf800c394>
    c3c8:	50c00326 	beq	r10,r3,c3d8 <__ledf2+0xe4>
    c3cc:	50c0042e 	bgeu	r10,r3,c3e0 <__ledf2+0xec>
    c3d0:	283fe81e 	bne	r5,zero,c374 <__alt_exception_stack_pointer+0xf800c374>
    c3d4:	003ff806 	br	c3b8 <__alt_exception_stack_pointer+0xf800c3b8>
    c3d8:	313fee36 	bltu	r6,r4,c394 <__alt_exception_stack_pointer+0xf800c394>
    c3dc:	21bffc36 	bltu	r4,r6,c3d0 <__alt_exception_stack_pointer+0xf800c3d0>
    c3e0:	0005883a 	mov	r2,zero
    c3e4:	f800283a 	ret

0000c3e8 <__muldf3>:
    c3e8:	deffee04 	addi	sp,sp,-72
    c3ec:	dd000c15 	stw	r20,48(sp)
    c3f0:	2828d53a 	srli	r20,r5,20
    c3f4:	ddc00f15 	stw	r23,60(sp)
    c3f8:	282ed7fa 	srli	r23,r5,31
    c3fc:	dc000815 	stw	r16,32(sp)
    c400:	04000434 	movhi	r16,16
    c404:	dcc00b15 	stw	r19,44(sp)
    c408:	843fffc4 	addi	r16,r16,-1
    c40c:	dfc01115 	stw	ra,68(sp)
    c410:	df001015 	stw	fp,64(sp)
    c414:	dd800e15 	stw	r22,56(sp)
    c418:	dd400d15 	stw	r21,52(sp)
    c41c:	dc800a15 	stw	r18,40(sp)
    c420:	dc400915 	stw	r17,36(sp)
    c424:	a501ffcc 	andi	r20,r20,2047
    c428:	2c20703a 	and	r16,r5,r16
    c42c:	b827883a 	mov	r19,r23
    c430:	ba403fcc 	andi	r9,r23,255
    c434:	a0006026 	beq	r20,zero,c5b8 <__muldf3+0x1d0>
    c438:	0081ffc4 	movi	r2,2047
    c43c:	202d883a 	mov	r22,r4
    c440:	a0803626 	beq	r20,r2,c51c <__muldf3+0x134>
    c444:	84000434 	orhi	r16,r16,16
    c448:	200ad77a 	srli	r5,r4,29
    c44c:	800490fa 	slli	r2,r16,3
    c450:	202c90fa 	slli	r22,r4,3
    c454:	a53f0044 	addi	r20,r20,-1023
    c458:	28a0b03a 	or	r16,r5,r2
    c45c:	002b883a 	mov	r21,zero
    c460:	000b883a 	mov	r5,zero
    c464:	3804d53a 	srli	r2,r7,20
    c468:	3838d7fa 	srli	fp,r7,31
    c46c:	04400434 	movhi	r17,16
    c470:	8c7fffc4 	addi	r17,r17,-1
    c474:	1081ffcc 	andi	r2,r2,2047
    c478:	3025883a 	mov	r18,r6
    c47c:	3c62703a 	and	r17,r7,r17
    c480:	e2803fcc 	andi	r10,fp,255
    c484:	10006d26 	beq	r2,zero,c63c <__muldf3+0x254>
    c488:	00c1ffc4 	movi	r3,2047
    c48c:	10c06526 	beq	r2,r3,c624 <__muldf3+0x23c>
    c490:	8c400434 	orhi	r17,r17,16
    c494:	300ed77a 	srli	r7,r6,29
    c498:	880690fa 	slli	r3,r17,3
    c49c:	302490fa 	slli	r18,r6,3
    c4a0:	10bf0044 	addi	r2,r2,-1023
    c4a4:	38e2b03a 	or	r17,r7,r3
    c4a8:	000f883a 	mov	r7,zero
    c4ac:	a087883a 	add	r3,r20,r2
    c4b0:	010003c4 	movi	r4,15
    c4b4:	3d44b03a 	or	r2,r7,r21
    c4b8:	e5ccf03a 	xor	r6,fp,r23
    c4bc:	1a000044 	addi	r8,r3,1
    c4c0:	20809b36 	bltu	r4,r2,c730 <__muldf3+0x348>
    c4c4:	100490ba 	slli	r2,r2,2
    c4c8:	01000074 	movhi	r4,1
    c4cc:	21313704 	addi	r4,r4,-15140
    c4d0:	1105883a 	add	r2,r2,r4
    c4d4:	10800017 	ldw	r2,0(r2)
    c4d8:	1000683a 	jmp	r2
    c4dc:	0000c730 	cmpltui	zero,zero,796
    c4e0:	0000c53c 	xorhi	zero,zero,788
    c4e4:	0000c53c 	xorhi	zero,zero,788
    c4e8:	0000c538 	rdprs	zero,zero,788
    c4ec:	0000c70c 	andi	zero,zero,796
    c4f0:	0000c70c 	andi	zero,zero,796
    c4f4:	0000c6f4 	movhi	zero,795
    c4f8:	0000c538 	rdprs	zero,zero,788
    c4fc:	0000c70c 	andi	zero,zero,796
    c500:	0000c6f4 	movhi	zero,795
    c504:	0000c70c 	andi	zero,zero,796
    c508:	0000c538 	rdprs	zero,zero,788
    c50c:	0000c71c 	xori	zero,zero,796
    c510:	0000c71c 	xori	zero,zero,796
    c514:	0000c71c 	xori	zero,zero,796
    c518:	0000ca7c 	xorhi	zero,zero,809
    c51c:	2404b03a 	or	r2,r4,r16
    c520:	1000711e 	bne	r2,zero,c6e8 <__muldf3+0x300>
    c524:	05400204 	movi	r21,8
    c528:	0021883a 	mov	r16,zero
    c52c:	002d883a 	mov	r22,zero
    c530:	01400084 	movi	r5,2
    c534:	003fcb06 	br	c464 <__alt_exception_stack_pointer+0xf800c464>
    c538:	500d883a 	mov	r6,r10
    c53c:	00800084 	movi	r2,2
    c540:	38805926 	beq	r7,r2,c6a8 <__muldf3+0x2c0>
    c544:	008000c4 	movi	r2,3
    c548:	3881bb26 	beq	r7,r2,cc38 <__muldf3+0x850>
    c54c:	00800044 	movi	r2,1
    c550:	3881961e 	bne	r7,r2,cbac <__muldf3+0x7c4>
    c554:	3027883a 	mov	r19,r6
    c558:	0005883a 	mov	r2,zero
    c55c:	0021883a 	mov	r16,zero
    c560:	002d883a 	mov	r22,zero
    c564:	1004953a 	slli	r2,r2,20
    c568:	98c03fcc 	andi	r3,r19,255
    c56c:	04400434 	movhi	r17,16
    c570:	8c7fffc4 	addi	r17,r17,-1
    c574:	180697fa 	slli	r3,r3,31
    c578:	8460703a 	and	r16,r16,r17
    c57c:	80a0b03a 	or	r16,r16,r2
    c580:	80c6b03a 	or	r3,r16,r3
    c584:	b005883a 	mov	r2,r22
    c588:	dfc01117 	ldw	ra,68(sp)
    c58c:	df001017 	ldw	fp,64(sp)
    c590:	ddc00f17 	ldw	r23,60(sp)
    c594:	dd800e17 	ldw	r22,56(sp)
    c598:	dd400d17 	ldw	r21,52(sp)
    c59c:	dd000c17 	ldw	r20,48(sp)
    c5a0:	dcc00b17 	ldw	r19,44(sp)
    c5a4:	dc800a17 	ldw	r18,40(sp)
    c5a8:	dc400917 	ldw	r17,36(sp)
    c5ac:	dc000817 	ldw	r16,32(sp)
    c5b0:	dec01204 	addi	sp,sp,72
    c5b4:	f800283a 	ret
    c5b8:	2404b03a 	or	r2,r4,r16
    c5bc:	202b883a 	mov	r21,r4
    c5c0:	10004426 	beq	r2,zero,c6d4 <__muldf3+0x2ec>
    c5c4:	80015126 	beq	r16,zero,cb0c <__muldf3+0x724>
    c5c8:	8009883a 	mov	r4,r16
    c5cc:	d9800715 	stw	r6,28(sp)
    c5d0:	d9c00215 	stw	r7,8(sp)
    c5d4:	da400415 	stw	r9,16(sp)
    c5d8:	00014180 	call	1418 <__clzsi2>
    c5dc:	d9800717 	ldw	r6,28(sp)
    c5e0:	d9c00217 	ldw	r7,8(sp)
    c5e4:	da400417 	ldw	r9,16(sp)
    c5e8:	113ffd44 	addi	r4,r2,-11
    c5ec:	00c00704 	movi	r3,28
    c5f0:	19014216 	blt	r3,r4,cafc <__muldf3+0x714>
    c5f4:	00c00744 	movi	r3,29
    c5f8:	15bffe04 	addi	r22,r2,-8
    c5fc:	1907c83a 	sub	r3,r3,r4
    c600:	85a0983a 	sll	r16,r16,r22
    c604:	a8c6d83a 	srl	r3,r21,r3
    c608:	adac983a 	sll	r22,r21,r22
    c60c:	1c20b03a 	or	r16,r3,r16
    c610:	1080fcc4 	addi	r2,r2,1011
    c614:	00a9c83a 	sub	r20,zero,r2
    c618:	002b883a 	mov	r21,zero
    c61c:	000b883a 	mov	r5,zero
    c620:	003f9006 	br	c464 <__alt_exception_stack_pointer+0xf800c464>
    c624:	3446b03a 	or	r3,r6,r17
    c628:	1800281e 	bne	r3,zero,c6cc <__muldf3+0x2e4>
    c62c:	0023883a 	mov	r17,zero
    c630:	0025883a 	mov	r18,zero
    c634:	01c00084 	movi	r7,2
    c638:	003f9c06 	br	c4ac <__alt_exception_stack_pointer+0xf800c4ac>
    c63c:	3446b03a 	or	r3,r6,r17
    c640:	18001e26 	beq	r3,zero,c6bc <__muldf3+0x2d4>
    c644:	88012126 	beq	r17,zero,cacc <__muldf3+0x6e4>
    c648:	8809883a 	mov	r4,r17
    c64c:	d9400215 	stw	r5,8(sp)
    c650:	d9800715 	stw	r6,28(sp)
    c654:	da400415 	stw	r9,16(sp)
    c658:	da800315 	stw	r10,12(sp)
    c65c:	00014180 	call	1418 <__clzsi2>
    c660:	d9400217 	ldw	r5,8(sp)
    c664:	d9800717 	ldw	r6,28(sp)
    c668:	da400417 	ldw	r9,16(sp)
    c66c:	da800317 	ldw	r10,12(sp)
    c670:	113ffd44 	addi	r4,r2,-11
    c674:	00c00704 	movi	r3,28
    c678:	19011016 	blt	r3,r4,cabc <__muldf3+0x6d4>
    c67c:	00c00744 	movi	r3,29
    c680:	14bffe04 	addi	r18,r2,-8
    c684:	1907c83a 	sub	r3,r3,r4
    c688:	8ca2983a 	sll	r17,r17,r18
    c68c:	30c6d83a 	srl	r3,r6,r3
    c690:	34a4983a 	sll	r18,r6,r18
    c694:	1c62b03a 	or	r17,r3,r17
    c698:	1080fcc4 	addi	r2,r2,1011
    c69c:	0085c83a 	sub	r2,zero,r2
    c6a0:	000f883a 	mov	r7,zero
    c6a4:	003f8106 	br	c4ac <__alt_exception_stack_pointer+0xf800c4ac>
    c6a8:	3027883a 	mov	r19,r6
    c6ac:	0081ffc4 	movi	r2,2047
    c6b0:	0021883a 	mov	r16,zero
    c6b4:	002d883a 	mov	r22,zero
    c6b8:	003faa06 	br	c564 <__alt_exception_stack_pointer+0xf800c564>
    c6bc:	0023883a 	mov	r17,zero
    c6c0:	0025883a 	mov	r18,zero
    c6c4:	01c00044 	movi	r7,1
    c6c8:	003f7806 	br	c4ac <__alt_exception_stack_pointer+0xf800c4ac>
    c6cc:	01c000c4 	movi	r7,3
    c6d0:	003f7606 	br	c4ac <__alt_exception_stack_pointer+0xf800c4ac>
    c6d4:	05400104 	movi	r21,4
    c6d8:	0021883a 	mov	r16,zero
    c6dc:	002d883a 	mov	r22,zero
    c6e0:	01400044 	movi	r5,1
    c6e4:	003f5f06 	br	c464 <__alt_exception_stack_pointer+0xf800c464>
    c6e8:	05400304 	movi	r21,12
    c6ec:	014000c4 	movi	r5,3
    c6f0:	003f5c06 	br	c464 <__alt_exception_stack_pointer+0xf800c464>
    c6f4:	04000434 	movhi	r16,16
    c6f8:	0027883a 	mov	r19,zero
    c6fc:	843fffc4 	addi	r16,r16,-1
    c700:	05bfffc4 	movi	r22,-1
    c704:	0081ffc4 	movi	r2,2047
    c708:	003f9606 	br	c564 <__alt_exception_stack_pointer+0xf800c564>
    c70c:	8023883a 	mov	r17,r16
    c710:	b025883a 	mov	r18,r22
    c714:	280f883a 	mov	r7,r5
    c718:	003f8806 	br	c53c <__alt_exception_stack_pointer+0xf800c53c>
    c71c:	8023883a 	mov	r17,r16
    c720:	b025883a 	mov	r18,r22
    c724:	480d883a 	mov	r6,r9
    c728:	280f883a 	mov	r7,r5
    c72c:	003f8306 	br	c53c <__alt_exception_stack_pointer+0xf800c53c>
    c730:	b026d43a 	srli	r19,r22,16
    c734:	902ed43a 	srli	r23,r18,16
    c738:	b5bfffcc 	andi	r22,r22,65535
    c73c:	94bfffcc 	andi	r18,r18,65535
    c740:	b00b883a 	mov	r5,r22
    c744:	9009883a 	mov	r4,r18
    c748:	d8c00515 	stw	r3,20(sp)
    c74c:	d9800715 	stw	r6,28(sp)
    c750:	da000615 	stw	r8,24(sp)
    c754:	00009780 	call	978 <__mulsi3>
    c758:	980b883a 	mov	r5,r19
    c75c:	9009883a 	mov	r4,r18
    c760:	1029883a 	mov	r20,r2
    c764:	00009780 	call	978 <__mulsi3>
    c768:	b80b883a 	mov	r5,r23
    c76c:	9809883a 	mov	r4,r19
    c770:	102b883a 	mov	r21,r2
    c774:	00009780 	call	978 <__mulsi3>
    c778:	b809883a 	mov	r4,r23
    c77c:	b00b883a 	mov	r5,r22
    c780:	1039883a 	mov	fp,r2
    c784:	00009780 	call	978 <__mulsi3>
    c788:	a008d43a 	srli	r4,r20,16
    c78c:	1545883a 	add	r2,r2,r21
    c790:	d8c00517 	ldw	r3,20(sp)
    c794:	2085883a 	add	r2,r4,r2
    c798:	d9800717 	ldw	r6,28(sp)
    c79c:	da000617 	ldw	r8,24(sp)
    c7a0:	1540022e 	bgeu	r2,r21,c7ac <__muldf3+0x3c4>
    c7a4:	01000074 	movhi	r4,1
    c7a8:	e139883a 	add	fp,fp,r4
    c7ac:	100e943a 	slli	r7,r2,16
    c7b0:	1004d43a 	srli	r2,r2,16
    c7b4:	882ad43a 	srli	r21,r17,16
    c7b8:	a53fffcc 	andi	r20,r20,65535
    c7bc:	8c7fffcc 	andi	r17,r17,65535
    c7c0:	3d29883a 	add	r20,r7,r20
    c7c4:	b00b883a 	mov	r5,r22
    c7c8:	8809883a 	mov	r4,r17
    c7cc:	d8c00515 	stw	r3,20(sp)
    c7d0:	d9800715 	stw	r6,28(sp)
    c7d4:	da000615 	stw	r8,24(sp)
    c7d8:	dd000115 	stw	r20,4(sp)
    c7dc:	d8800015 	stw	r2,0(sp)
    c7e0:	00009780 	call	978 <__mulsi3>
    c7e4:	980b883a 	mov	r5,r19
    c7e8:	8809883a 	mov	r4,r17
    c7ec:	d8800215 	stw	r2,8(sp)
    c7f0:	00009780 	call	978 <__mulsi3>
    c7f4:	9809883a 	mov	r4,r19
    c7f8:	a80b883a 	mov	r5,r21
    c7fc:	1029883a 	mov	r20,r2
    c800:	00009780 	call	978 <__mulsi3>
    c804:	b00b883a 	mov	r5,r22
    c808:	a809883a 	mov	r4,r21
    c80c:	d8800415 	stw	r2,16(sp)
    c810:	00009780 	call	978 <__mulsi3>
    c814:	d9c00217 	ldw	r7,8(sp)
    c818:	1505883a 	add	r2,r2,r20
    c81c:	d8c00517 	ldw	r3,20(sp)
    c820:	3826d43a 	srli	r19,r7,16
    c824:	d9800717 	ldw	r6,28(sp)
    c828:	da000617 	ldw	r8,24(sp)
    c82c:	9885883a 	add	r2,r19,r2
    c830:	da400417 	ldw	r9,16(sp)
    c834:	1500022e 	bgeu	r2,r20,c840 <__muldf3+0x458>
    c838:	01000074 	movhi	r4,1
    c83c:	4913883a 	add	r9,r9,r4
    c840:	1028d43a 	srli	r20,r2,16
    c844:	1004943a 	slli	r2,r2,16
    c848:	802cd43a 	srli	r22,r16,16
    c84c:	843fffcc 	andi	r16,r16,65535
    c850:	3cffffcc 	andi	r19,r7,65535
    c854:	9009883a 	mov	r4,r18
    c858:	800b883a 	mov	r5,r16
    c85c:	a269883a 	add	r20,r20,r9
    c860:	d8c00515 	stw	r3,20(sp)
    c864:	d9800715 	stw	r6,28(sp)
    c868:	da000615 	stw	r8,24(sp)
    c86c:	14e7883a 	add	r19,r2,r19
    c870:	00009780 	call	978 <__mulsi3>
    c874:	9009883a 	mov	r4,r18
    c878:	b00b883a 	mov	r5,r22
    c87c:	d8800315 	stw	r2,12(sp)
    c880:	00009780 	call	978 <__mulsi3>
    c884:	b809883a 	mov	r4,r23
    c888:	b00b883a 	mov	r5,r22
    c88c:	d8800215 	stw	r2,8(sp)
    c890:	00009780 	call	978 <__mulsi3>
    c894:	b80b883a 	mov	r5,r23
    c898:	8009883a 	mov	r4,r16
    c89c:	d8800415 	stw	r2,16(sp)
    c8a0:	00009780 	call	978 <__mulsi3>
    c8a4:	da800317 	ldw	r10,12(sp)
    c8a8:	d9c00217 	ldw	r7,8(sp)
    c8ac:	d9000017 	ldw	r4,0(sp)
    c8b0:	502ed43a 	srli	r23,r10,16
    c8b4:	11c5883a 	add	r2,r2,r7
    c8b8:	24e5883a 	add	r18,r4,r19
    c8bc:	b885883a 	add	r2,r23,r2
    c8c0:	d8c00517 	ldw	r3,20(sp)
    c8c4:	d9800717 	ldw	r6,28(sp)
    c8c8:	da000617 	ldw	r8,24(sp)
    c8cc:	da400417 	ldw	r9,16(sp)
    c8d0:	11c0022e 	bgeu	r2,r7,c8dc <__muldf3+0x4f4>
    c8d4:	01000074 	movhi	r4,1
    c8d8:	4913883a 	add	r9,r9,r4
    c8dc:	100ed43a 	srli	r7,r2,16
    c8e0:	1004943a 	slli	r2,r2,16
    c8e4:	55ffffcc 	andi	r23,r10,65535
    c8e8:	3a53883a 	add	r9,r7,r9
    c8ec:	8809883a 	mov	r4,r17
    c8f0:	800b883a 	mov	r5,r16
    c8f4:	d8c00515 	stw	r3,20(sp)
    c8f8:	d9800715 	stw	r6,28(sp)
    c8fc:	da000615 	stw	r8,24(sp)
    c900:	da400415 	stw	r9,16(sp)
    c904:	15ef883a 	add	r23,r2,r23
    c908:	00009780 	call	978 <__mulsi3>
    c90c:	8809883a 	mov	r4,r17
    c910:	b00b883a 	mov	r5,r22
    c914:	d8800215 	stw	r2,8(sp)
    c918:	00009780 	call	978 <__mulsi3>
    c91c:	b00b883a 	mov	r5,r22
    c920:	a809883a 	mov	r4,r21
    c924:	d8800315 	stw	r2,12(sp)
    c928:	00009780 	call	978 <__mulsi3>
    c92c:	8009883a 	mov	r4,r16
    c930:	a80b883a 	mov	r5,r21
    c934:	1023883a 	mov	r17,r2
    c938:	00009780 	call	978 <__mulsi3>
    c93c:	d9c00217 	ldw	r7,8(sp)
    c940:	da800317 	ldw	r10,12(sp)
    c944:	d8c00517 	ldw	r3,20(sp)
    c948:	3808d43a 	srli	r4,r7,16
    c94c:	1285883a 	add	r2,r2,r10
    c950:	d9800717 	ldw	r6,28(sp)
    c954:	2085883a 	add	r2,r4,r2
    c958:	da000617 	ldw	r8,24(sp)
    c95c:	da400417 	ldw	r9,16(sp)
    c960:	1280022e 	bgeu	r2,r10,c96c <__muldf3+0x584>
    c964:	01000074 	movhi	r4,1
    c968:	8923883a 	add	r17,r17,r4
    c96c:	1008943a 	slli	r4,r2,16
    c970:	39ffffcc 	andi	r7,r7,65535
    c974:	e4b9883a 	add	fp,fp,r18
    c978:	21cf883a 	add	r7,r4,r7
    c97c:	e4e7803a 	cmpltu	r19,fp,r19
    c980:	3d0f883a 	add	r7,r7,r20
    c984:	bf39883a 	add	fp,r23,fp
    c988:	99c9883a 	add	r4,r19,r7
    c98c:	e5ef803a 	cmpltu	r23,fp,r23
    c990:	490b883a 	add	r5,r9,r4
    c994:	1004d43a 	srli	r2,r2,16
    c998:	b965883a 	add	r18,r23,r5
    c99c:	24c9803a 	cmpltu	r4,r4,r19
    c9a0:	3d29803a 	cmpltu	r20,r7,r20
    c9a4:	a128b03a 	or	r20,r20,r4
    c9a8:	95ef803a 	cmpltu	r23,r18,r23
    c9ac:	2a53803a 	cmpltu	r9,r5,r9
    c9b0:	a0a9883a 	add	r20,r20,r2
    c9b4:	4deeb03a 	or	r23,r9,r23
    c9b8:	a5ef883a 	add	r23,r20,r23
    c9bc:	bc63883a 	add	r17,r23,r17
    c9c0:	e004927a 	slli	r2,fp,9
    c9c4:	d9000117 	ldw	r4,4(sp)
    c9c8:	882e927a 	slli	r23,r17,9
    c9cc:	9022d5fa 	srli	r17,r18,23
    c9d0:	e038d5fa 	srli	fp,fp,23
    c9d4:	1104b03a 	or	r2,r2,r4
    c9d8:	9024927a 	slli	r18,r18,9
    c9dc:	1004c03a 	cmpne	r2,r2,zero
    c9e0:	bc62b03a 	or	r17,r23,r17
    c9e4:	1738b03a 	or	fp,r2,fp
    c9e8:	8880402c 	andhi	r2,r17,256
    c9ec:	e4a4b03a 	or	r18,fp,r18
    c9f0:	10000726 	beq	r2,zero,ca10 <__muldf3+0x628>
    c9f4:	9006d07a 	srli	r3,r18,1
    c9f8:	880497fa 	slli	r2,r17,31
    c9fc:	9480004c 	andi	r18,r18,1
    ca00:	8822d07a 	srli	r17,r17,1
    ca04:	1ca4b03a 	or	r18,r3,r18
    ca08:	14a4b03a 	or	r18,r2,r18
    ca0c:	4007883a 	mov	r3,r8
    ca10:	1880ffc4 	addi	r2,r3,1023
    ca14:	0080460e 	bge	zero,r2,cb30 <__muldf3+0x748>
    ca18:	910001cc 	andi	r4,r18,7
    ca1c:	20000726 	beq	r4,zero,ca3c <__muldf3+0x654>
    ca20:	910003cc 	andi	r4,r18,15
    ca24:	01400104 	movi	r5,4
    ca28:	21400426 	beq	r4,r5,ca3c <__muldf3+0x654>
    ca2c:	9149883a 	add	r4,r18,r5
    ca30:	24a5803a 	cmpltu	r18,r4,r18
    ca34:	8ca3883a 	add	r17,r17,r18
    ca38:	2025883a 	mov	r18,r4
    ca3c:	8900402c 	andhi	r4,r17,256
    ca40:	20000426 	beq	r4,zero,ca54 <__muldf3+0x66c>
    ca44:	18810004 	addi	r2,r3,1024
    ca48:	00ffc034 	movhi	r3,65280
    ca4c:	18ffffc4 	addi	r3,r3,-1
    ca50:	88e2703a 	and	r17,r17,r3
    ca54:	00c1ff84 	movi	r3,2046
    ca58:	18bf1316 	blt	r3,r2,c6a8 <__alt_exception_stack_pointer+0xf800c6a8>
    ca5c:	882c977a 	slli	r22,r17,29
    ca60:	9024d0fa 	srli	r18,r18,3
    ca64:	8822927a 	slli	r17,r17,9
    ca68:	1081ffcc 	andi	r2,r2,2047
    ca6c:	b4acb03a 	or	r22,r22,r18
    ca70:	8820d33a 	srli	r16,r17,12
    ca74:	3027883a 	mov	r19,r6
    ca78:	003eba06 	br	c564 <__alt_exception_stack_pointer+0xf800c564>
    ca7c:	8080022c 	andhi	r2,r16,8
    ca80:	10000926 	beq	r2,zero,caa8 <__muldf3+0x6c0>
    ca84:	8880022c 	andhi	r2,r17,8
    ca88:	1000071e 	bne	r2,zero,caa8 <__muldf3+0x6c0>
    ca8c:	00800434 	movhi	r2,16
    ca90:	8c000234 	orhi	r16,r17,8
    ca94:	10bfffc4 	addi	r2,r2,-1
    ca98:	e027883a 	mov	r19,fp
    ca9c:	80a0703a 	and	r16,r16,r2
    caa0:	902d883a 	mov	r22,r18
    caa4:	003f1706 	br	c704 <__alt_exception_stack_pointer+0xf800c704>
    caa8:	00800434 	movhi	r2,16
    caac:	84000234 	orhi	r16,r16,8
    cab0:	10bfffc4 	addi	r2,r2,-1
    cab4:	80a0703a 	and	r16,r16,r2
    cab8:	003f1206 	br	c704 <__alt_exception_stack_pointer+0xf800c704>
    cabc:	147ff604 	addi	r17,r2,-40
    cac0:	3462983a 	sll	r17,r6,r17
    cac4:	0025883a 	mov	r18,zero
    cac8:	003ef306 	br	c698 <__alt_exception_stack_pointer+0xf800c698>
    cacc:	3009883a 	mov	r4,r6
    cad0:	d9400215 	stw	r5,8(sp)
    cad4:	d9800715 	stw	r6,28(sp)
    cad8:	da400415 	stw	r9,16(sp)
    cadc:	da800315 	stw	r10,12(sp)
    cae0:	00014180 	call	1418 <__clzsi2>
    cae4:	10800804 	addi	r2,r2,32
    cae8:	da800317 	ldw	r10,12(sp)
    caec:	da400417 	ldw	r9,16(sp)
    caf0:	d9800717 	ldw	r6,28(sp)
    caf4:	d9400217 	ldw	r5,8(sp)
    caf8:	003edd06 	br	c670 <__alt_exception_stack_pointer+0xf800c670>
    cafc:	143ff604 	addi	r16,r2,-40
    cb00:	ac20983a 	sll	r16,r21,r16
    cb04:	002d883a 	mov	r22,zero
    cb08:	003ec106 	br	c610 <__alt_exception_stack_pointer+0xf800c610>
    cb0c:	d9800715 	stw	r6,28(sp)
    cb10:	d9c00215 	stw	r7,8(sp)
    cb14:	da400415 	stw	r9,16(sp)
    cb18:	00014180 	call	1418 <__clzsi2>
    cb1c:	10800804 	addi	r2,r2,32
    cb20:	da400417 	ldw	r9,16(sp)
    cb24:	d9c00217 	ldw	r7,8(sp)
    cb28:	d9800717 	ldw	r6,28(sp)
    cb2c:	003eae06 	br	c5e8 <__alt_exception_stack_pointer+0xf800c5e8>
    cb30:	00c00044 	movi	r3,1
    cb34:	1887c83a 	sub	r3,r3,r2
    cb38:	01000e04 	movi	r4,56
    cb3c:	20fe8516 	blt	r4,r3,c554 <__alt_exception_stack_pointer+0xf800c554>
    cb40:	010007c4 	movi	r4,31
    cb44:	20c01b16 	blt	r4,r3,cbb4 <__muldf3+0x7cc>
    cb48:	00800804 	movi	r2,32
    cb4c:	10c5c83a 	sub	r2,r2,r3
    cb50:	888a983a 	sll	r5,r17,r2
    cb54:	90c8d83a 	srl	r4,r18,r3
    cb58:	9084983a 	sll	r2,r18,r2
    cb5c:	88e2d83a 	srl	r17,r17,r3
    cb60:	2906b03a 	or	r3,r5,r4
    cb64:	1004c03a 	cmpne	r2,r2,zero
    cb68:	1886b03a 	or	r3,r3,r2
    cb6c:	188001cc 	andi	r2,r3,7
    cb70:	10000726 	beq	r2,zero,cb90 <__muldf3+0x7a8>
    cb74:	188003cc 	andi	r2,r3,15
    cb78:	01000104 	movi	r4,4
    cb7c:	11000426 	beq	r2,r4,cb90 <__muldf3+0x7a8>
    cb80:	1805883a 	mov	r2,r3
    cb84:	10c00104 	addi	r3,r2,4
    cb88:	1885803a 	cmpltu	r2,r3,r2
    cb8c:	88a3883a 	add	r17,r17,r2
    cb90:	8880202c 	andhi	r2,r17,128
    cb94:	10001c26 	beq	r2,zero,cc08 <__muldf3+0x820>
    cb98:	3027883a 	mov	r19,r6
    cb9c:	00800044 	movi	r2,1
    cba0:	0021883a 	mov	r16,zero
    cba4:	002d883a 	mov	r22,zero
    cba8:	003e6e06 	br	c564 <__alt_exception_stack_pointer+0xf800c564>
    cbac:	4007883a 	mov	r3,r8
    cbb0:	003f9706 	br	ca10 <__alt_exception_stack_pointer+0xf800ca10>
    cbb4:	017ff844 	movi	r5,-31
    cbb8:	2885c83a 	sub	r2,r5,r2
    cbbc:	888ad83a 	srl	r5,r17,r2
    cbc0:	00800804 	movi	r2,32
    cbc4:	18801a26 	beq	r3,r2,cc30 <__muldf3+0x848>
    cbc8:	01001004 	movi	r4,64
    cbcc:	20c7c83a 	sub	r3,r4,r3
    cbd0:	88e2983a 	sll	r17,r17,r3
    cbd4:	8ca4b03a 	or	r18,r17,r18
    cbd8:	9004c03a 	cmpne	r2,r18,zero
    cbdc:	2884b03a 	or	r2,r5,r2
    cbe0:	144001cc 	andi	r17,r2,7
    cbe4:	88000d1e 	bne	r17,zero,cc1c <__muldf3+0x834>
    cbe8:	0021883a 	mov	r16,zero
    cbec:	102cd0fa 	srli	r22,r2,3
    cbf0:	3027883a 	mov	r19,r6
    cbf4:	0005883a 	mov	r2,zero
    cbf8:	b46cb03a 	or	r22,r22,r17
    cbfc:	003e5906 	br	c564 <__alt_exception_stack_pointer+0xf800c564>
    cc00:	1007883a 	mov	r3,r2
    cc04:	0023883a 	mov	r17,zero
    cc08:	8820927a 	slli	r16,r17,9
    cc0c:	1805883a 	mov	r2,r3
    cc10:	8822977a 	slli	r17,r17,29
    cc14:	8020d33a 	srli	r16,r16,12
    cc18:	003ff406 	br	cbec <__alt_exception_stack_pointer+0xf800cbec>
    cc1c:	10c003cc 	andi	r3,r2,15
    cc20:	01000104 	movi	r4,4
    cc24:	193ff626 	beq	r3,r4,cc00 <__alt_exception_stack_pointer+0xf800cc00>
    cc28:	0023883a 	mov	r17,zero
    cc2c:	003fd506 	br	cb84 <__alt_exception_stack_pointer+0xf800cb84>
    cc30:	0023883a 	mov	r17,zero
    cc34:	003fe706 	br	cbd4 <__alt_exception_stack_pointer+0xf800cbd4>
    cc38:	00800434 	movhi	r2,16
    cc3c:	8c000234 	orhi	r16,r17,8
    cc40:	10bfffc4 	addi	r2,r2,-1
    cc44:	3027883a 	mov	r19,r6
    cc48:	80a0703a 	and	r16,r16,r2
    cc4c:	902d883a 	mov	r22,r18
    cc50:	003eac06 	br	c704 <__alt_exception_stack_pointer+0xf800c704>

0000cc54 <__subdf3>:
    cc54:	02000434 	movhi	r8,16
    cc58:	423fffc4 	addi	r8,r8,-1
    cc5c:	defffb04 	addi	sp,sp,-20
    cc60:	2a14703a 	and	r10,r5,r8
    cc64:	3812d53a 	srli	r9,r7,20
    cc68:	3a10703a 	and	r8,r7,r8
    cc6c:	2006d77a 	srli	r3,r4,29
    cc70:	3004d77a 	srli	r2,r6,29
    cc74:	dc000015 	stw	r16,0(sp)
    cc78:	501490fa 	slli	r10,r10,3
    cc7c:	2820d53a 	srli	r16,r5,20
    cc80:	401090fa 	slli	r8,r8,3
    cc84:	dc800215 	stw	r18,8(sp)
    cc88:	dc400115 	stw	r17,4(sp)
    cc8c:	dfc00415 	stw	ra,16(sp)
    cc90:	202290fa 	slli	r17,r4,3
    cc94:	dcc00315 	stw	r19,12(sp)
    cc98:	4a41ffcc 	andi	r9,r9,2047
    cc9c:	0101ffc4 	movi	r4,2047
    cca0:	2824d7fa 	srli	r18,r5,31
    cca4:	8401ffcc 	andi	r16,r16,2047
    cca8:	50c6b03a 	or	r3,r10,r3
    ccac:	380ed7fa 	srli	r7,r7,31
    ccb0:	408ab03a 	or	r5,r8,r2
    ccb4:	300c90fa 	slli	r6,r6,3
    ccb8:	49009626 	beq	r9,r4,cf14 <__subdf3+0x2c0>
    ccbc:	39c0005c 	xori	r7,r7,1
    ccc0:	8245c83a 	sub	r2,r16,r9
    ccc4:	3c807426 	beq	r7,r18,ce98 <__subdf3+0x244>
    ccc8:	0080af0e 	bge	zero,r2,cf88 <__subdf3+0x334>
    cccc:	48002a1e 	bne	r9,zero,cd78 <__subdf3+0x124>
    ccd0:	2988b03a 	or	r4,r5,r6
    ccd4:	20009a1e 	bne	r4,zero,cf40 <__subdf3+0x2ec>
    ccd8:	888001cc 	andi	r2,r17,7
    ccdc:	10000726 	beq	r2,zero,ccfc <__subdf3+0xa8>
    cce0:	888003cc 	andi	r2,r17,15
    cce4:	01000104 	movi	r4,4
    cce8:	11000426 	beq	r2,r4,ccfc <__subdf3+0xa8>
    ccec:	890b883a 	add	r5,r17,r4
    ccf0:	2c63803a 	cmpltu	r17,r5,r17
    ccf4:	1c47883a 	add	r3,r3,r17
    ccf8:	2823883a 	mov	r17,r5
    ccfc:	1880202c 	andhi	r2,r3,128
    cd00:	10005926 	beq	r2,zero,ce68 <__subdf3+0x214>
    cd04:	84000044 	addi	r16,r16,1
    cd08:	0081ffc4 	movi	r2,2047
    cd0c:	8080be26 	beq	r16,r2,d008 <__subdf3+0x3b4>
    cd10:	017fe034 	movhi	r5,65408
    cd14:	297fffc4 	addi	r5,r5,-1
    cd18:	1946703a 	and	r3,r3,r5
    cd1c:	1804977a 	slli	r2,r3,29
    cd20:	1806927a 	slli	r3,r3,9
    cd24:	8822d0fa 	srli	r17,r17,3
    cd28:	8401ffcc 	andi	r16,r16,2047
    cd2c:	180ad33a 	srli	r5,r3,12
    cd30:	9100004c 	andi	r4,r18,1
    cd34:	1444b03a 	or	r2,r2,r17
    cd38:	80c1ffcc 	andi	r3,r16,2047
    cd3c:	1820953a 	slli	r16,r3,20
    cd40:	20c03fcc 	andi	r3,r4,255
    cd44:	180897fa 	slli	r4,r3,31
    cd48:	00c00434 	movhi	r3,16
    cd4c:	18ffffc4 	addi	r3,r3,-1
    cd50:	28c6703a 	and	r3,r5,r3
    cd54:	1c06b03a 	or	r3,r3,r16
    cd58:	1906b03a 	or	r3,r3,r4
    cd5c:	dfc00417 	ldw	ra,16(sp)
    cd60:	dcc00317 	ldw	r19,12(sp)
    cd64:	dc800217 	ldw	r18,8(sp)
    cd68:	dc400117 	ldw	r17,4(sp)
    cd6c:	dc000017 	ldw	r16,0(sp)
    cd70:	dec00504 	addi	sp,sp,20
    cd74:	f800283a 	ret
    cd78:	0101ffc4 	movi	r4,2047
    cd7c:	813fd626 	beq	r16,r4,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    cd80:	29402034 	orhi	r5,r5,128
    cd84:	01000e04 	movi	r4,56
    cd88:	2080a316 	blt	r4,r2,d018 <__subdf3+0x3c4>
    cd8c:	010007c4 	movi	r4,31
    cd90:	2080c616 	blt	r4,r2,d0ac <__subdf3+0x458>
    cd94:	01000804 	movi	r4,32
    cd98:	2089c83a 	sub	r4,r4,r2
    cd9c:	2910983a 	sll	r8,r5,r4
    cda0:	308ed83a 	srl	r7,r6,r2
    cda4:	3108983a 	sll	r4,r6,r4
    cda8:	2884d83a 	srl	r2,r5,r2
    cdac:	41ccb03a 	or	r6,r8,r7
    cdb0:	2008c03a 	cmpne	r4,r4,zero
    cdb4:	310cb03a 	or	r6,r6,r4
    cdb8:	898dc83a 	sub	r6,r17,r6
    cdbc:	89a3803a 	cmpltu	r17,r17,r6
    cdc0:	1887c83a 	sub	r3,r3,r2
    cdc4:	1c47c83a 	sub	r3,r3,r17
    cdc8:	3023883a 	mov	r17,r6
    cdcc:	1880202c 	andhi	r2,r3,128
    cdd0:	10002326 	beq	r2,zero,ce60 <__subdf3+0x20c>
    cdd4:	04c02034 	movhi	r19,128
    cdd8:	9cffffc4 	addi	r19,r19,-1
    cddc:	1ce6703a 	and	r19,r3,r19
    cde0:	98007a26 	beq	r19,zero,cfcc <__subdf3+0x378>
    cde4:	9809883a 	mov	r4,r19
    cde8:	00014180 	call	1418 <__clzsi2>
    cdec:	113ffe04 	addi	r4,r2,-8
    cdf0:	00c007c4 	movi	r3,31
    cdf4:	19007b16 	blt	r3,r4,cfe4 <__subdf3+0x390>
    cdf8:	00800804 	movi	r2,32
    cdfc:	1105c83a 	sub	r2,r2,r4
    ce00:	8884d83a 	srl	r2,r17,r2
    ce04:	9906983a 	sll	r3,r19,r4
    ce08:	8922983a 	sll	r17,r17,r4
    ce0c:	10c4b03a 	or	r2,r2,r3
    ce10:	24007816 	blt	r4,r16,cff4 <__subdf3+0x3a0>
    ce14:	2421c83a 	sub	r16,r4,r16
    ce18:	80c00044 	addi	r3,r16,1
    ce1c:	010007c4 	movi	r4,31
    ce20:	20c09516 	blt	r4,r3,d078 <__subdf3+0x424>
    ce24:	01400804 	movi	r5,32
    ce28:	28cbc83a 	sub	r5,r5,r3
    ce2c:	88c8d83a 	srl	r4,r17,r3
    ce30:	8962983a 	sll	r17,r17,r5
    ce34:	114a983a 	sll	r5,r2,r5
    ce38:	10c6d83a 	srl	r3,r2,r3
    ce3c:	8804c03a 	cmpne	r2,r17,zero
    ce40:	290ab03a 	or	r5,r5,r4
    ce44:	28a2b03a 	or	r17,r5,r2
    ce48:	0021883a 	mov	r16,zero
    ce4c:	003fa206 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    ce50:	2090b03a 	or	r8,r4,r2
    ce54:	40018e26 	beq	r8,zero,d490 <__subdf3+0x83c>
    ce58:	1007883a 	mov	r3,r2
    ce5c:	2023883a 	mov	r17,r4
    ce60:	888001cc 	andi	r2,r17,7
    ce64:	103f9e1e 	bne	r2,zero,cce0 <__alt_exception_stack_pointer+0xf800cce0>
    ce68:	1804977a 	slli	r2,r3,29
    ce6c:	8822d0fa 	srli	r17,r17,3
    ce70:	1810d0fa 	srli	r8,r3,3
    ce74:	9100004c 	andi	r4,r18,1
    ce78:	1444b03a 	or	r2,r2,r17
    ce7c:	00c1ffc4 	movi	r3,2047
    ce80:	80c02826 	beq	r16,r3,cf24 <__subdf3+0x2d0>
    ce84:	01400434 	movhi	r5,16
    ce88:	297fffc4 	addi	r5,r5,-1
    ce8c:	80e0703a 	and	r16,r16,r3
    ce90:	414a703a 	and	r5,r8,r5
    ce94:	003fa806 	br	cd38 <__alt_exception_stack_pointer+0xf800cd38>
    ce98:	0080630e 	bge	zero,r2,d028 <__subdf3+0x3d4>
    ce9c:	48003026 	beq	r9,zero,cf60 <__subdf3+0x30c>
    cea0:	0101ffc4 	movi	r4,2047
    cea4:	813f8c26 	beq	r16,r4,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    cea8:	29402034 	orhi	r5,r5,128
    ceac:	01000e04 	movi	r4,56
    ceb0:	2080a90e 	bge	r4,r2,d158 <__subdf3+0x504>
    ceb4:	298cb03a 	or	r6,r5,r6
    ceb8:	3012c03a 	cmpne	r9,r6,zero
    cebc:	0005883a 	mov	r2,zero
    cec0:	4c53883a 	add	r9,r9,r17
    cec4:	4c63803a 	cmpltu	r17,r9,r17
    cec8:	10c7883a 	add	r3,r2,r3
    cecc:	88c7883a 	add	r3,r17,r3
    ced0:	4823883a 	mov	r17,r9
    ced4:	1880202c 	andhi	r2,r3,128
    ced8:	1000d026 	beq	r2,zero,d21c <__subdf3+0x5c8>
    cedc:	84000044 	addi	r16,r16,1
    cee0:	0081ffc4 	movi	r2,2047
    cee4:	8080fe26 	beq	r16,r2,d2e0 <__subdf3+0x68c>
    cee8:	00bfe034 	movhi	r2,65408
    ceec:	10bfffc4 	addi	r2,r2,-1
    cef0:	1886703a 	and	r3,r3,r2
    cef4:	880ad07a 	srli	r5,r17,1
    cef8:	180497fa 	slli	r2,r3,31
    cefc:	8900004c 	andi	r4,r17,1
    cf00:	2922b03a 	or	r17,r5,r4
    cf04:	1806d07a 	srli	r3,r3,1
    cf08:	1462b03a 	or	r17,r2,r17
    cf0c:	3825883a 	mov	r18,r7
    cf10:	003f7106 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    cf14:	2984b03a 	or	r2,r5,r6
    cf18:	103f6826 	beq	r2,zero,ccbc <__alt_exception_stack_pointer+0xf800ccbc>
    cf1c:	39c03fcc 	andi	r7,r7,255
    cf20:	003f6706 	br	ccc0 <__alt_exception_stack_pointer+0xf800ccc0>
    cf24:	4086b03a 	or	r3,r8,r2
    cf28:	18015226 	beq	r3,zero,d474 <__subdf3+0x820>
    cf2c:	00c00434 	movhi	r3,16
    cf30:	41400234 	orhi	r5,r8,8
    cf34:	18ffffc4 	addi	r3,r3,-1
    cf38:	28ca703a 	and	r5,r5,r3
    cf3c:	003f7e06 	br	cd38 <__alt_exception_stack_pointer+0xf800cd38>
    cf40:	10bfffc4 	addi	r2,r2,-1
    cf44:	1000491e 	bne	r2,zero,d06c <__subdf3+0x418>
    cf48:	898fc83a 	sub	r7,r17,r6
    cf4c:	89e3803a 	cmpltu	r17,r17,r7
    cf50:	1947c83a 	sub	r3,r3,r5
    cf54:	1c47c83a 	sub	r3,r3,r17
    cf58:	3823883a 	mov	r17,r7
    cf5c:	003f9b06 	br	cdcc <__alt_exception_stack_pointer+0xf800cdcc>
    cf60:	2988b03a 	or	r4,r5,r6
    cf64:	203f5c26 	beq	r4,zero,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    cf68:	10bfffc4 	addi	r2,r2,-1
    cf6c:	1000931e 	bne	r2,zero,d1bc <__subdf3+0x568>
    cf70:	898d883a 	add	r6,r17,r6
    cf74:	3463803a 	cmpltu	r17,r6,r17
    cf78:	1947883a 	add	r3,r3,r5
    cf7c:	88c7883a 	add	r3,r17,r3
    cf80:	3023883a 	mov	r17,r6
    cf84:	003fd306 	br	ced4 <__alt_exception_stack_pointer+0xf800ced4>
    cf88:	1000541e 	bne	r2,zero,d0dc <__subdf3+0x488>
    cf8c:	80800044 	addi	r2,r16,1
    cf90:	1081ffcc 	andi	r2,r2,2047
    cf94:	01000044 	movi	r4,1
    cf98:	2080a20e 	bge	r4,r2,d224 <__subdf3+0x5d0>
    cf9c:	8989c83a 	sub	r4,r17,r6
    cfa0:	8905803a 	cmpltu	r2,r17,r4
    cfa4:	1967c83a 	sub	r19,r3,r5
    cfa8:	98a7c83a 	sub	r19,r19,r2
    cfac:	9880202c 	andhi	r2,r19,128
    cfb0:	10006326 	beq	r2,zero,d140 <__subdf3+0x4ec>
    cfb4:	3463c83a 	sub	r17,r6,r17
    cfb8:	28c7c83a 	sub	r3,r5,r3
    cfbc:	344d803a 	cmpltu	r6,r6,r17
    cfc0:	19a7c83a 	sub	r19,r3,r6
    cfc4:	3825883a 	mov	r18,r7
    cfc8:	983f861e 	bne	r19,zero,cde4 <__alt_exception_stack_pointer+0xf800cde4>
    cfcc:	8809883a 	mov	r4,r17
    cfd0:	00014180 	call	1418 <__clzsi2>
    cfd4:	10800804 	addi	r2,r2,32
    cfd8:	113ffe04 	addi	r4,r2,-8
    cfdc:	00c007c4 	movi	r3,31
    cfe0:	193f850e 	bge	r3,r4,cdf8 <__alt_exception_stack_pointer+0xf800cdf8>
    cfe4:	10bff604 	addi	r2,r2,-40
    cfe8:	8884983a 	sll	r2,r17,r2
    cfec:	0023883a 	mov	r17,zero
    cff0:	243f880e 	bge	r4,r16,ce14 <__alt_exception_stack_pointer+0xf800ce14>
    cff4:	00ffe034 	movhi	r3,65408
    cff8:	18ffffc4 	addi	r3,r3,-1
    cffc:	8121c83a 	sub	r16,r16,r4
    d000:	10c6703a 	and	r3,r2,r3
    d004:	003f3406 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d008:	9100004c 	andi	r4,r18,1
    d00c:	000b883a 	mov	r5,zero
    d010:	0005883a 	mov	r2,zero
    d014:	003f4806 	br	cd38 <__alt_exception_stack_pointer+0xf800cd38>
    d018:	298cb03a 	or	r6,r5,r6
    d01c:	300cc03a 	cmpne	r6,r6,zero
    d020:	0005883a 	mov	r2,zero
    d024:	003f6406 	br	cdb8 <__alt_exception_stack_pointer+0xf800cdb8>
    d028:	10009a1e 	bne	r2,zero,d294 <__subdf3+0x640>
    d02c:	82400044 	addi	r9,r16,1
    d030:	4881ffcc 	andi	r2,r9,2047
    d034:	02800044 	movi	r10,1
    d038:	5080670e 	bge	r10,r2,d1d8 <__subdf3+0x584>
    d03c:	0081ffc4 	movi	r2,2047
    d040:	4880af26 	beq	r9,r2,d300 <__subdf3+0x6ac>
    d044:	898d883a 	add	r6,r17,r6
    d048:	1945883a 	add	r2,r3,r5
    d04c:	3447803a 	cmpltu	r3,r6,r17
    d050:	1887883a 	add	r3,r3,r2
    d054:	182297fa 	slli	r17,r3,31
    d058:	300cd07a 	srli	r6,r6,1
    d05c:	1806d07a 	srli	r3,r3,1
    d060:	4821883a 	mov	r16,r9
    d064:	89a2b03a 	or	r17,r17,r6
    d068:	003f1b06 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d06c:	0101ffc4 	movi	r4,2047
    d070:	813f441e 	bne	r16,r4,cd84 <__alt_exception_stack_pointer+0xf800cd84>
    d074:	003f1806 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d078:	843ff844 	addi	r16,r16,-31
    d07c:	01400804 	movi	r5,32
    d080:	1408d83a 	srl	r4,r2,r16
    d084:	19405026 	beq	r3,r5,d1c8 <__subdf3+0x574>
    d088:	01401004 	movi	r5,64
    d08c:	28c7c83a 	sub	r3,r5,r3
    d090:	10c4983a 	sll	r2,r2,r3
    d094:	88a2b03a 	or	r17,r17,r2
    d098:	8822c03a 	cmpne	r17,r17,zero
    d09c:	2462b03a 	or	r17,r4,r17
    d0a0:	0007883a 	mov	r3,zero
    d0a4:	0021883a 	mov	r16,zero
    d0a8:	003f6d06 	br	ce60 <__alt_exception_stack_pointer+0xf800ce60>
    d0ac:	11fff804 	addi	r7,r2,-32
    d0b0:	01000804 	movi	r4,32
    d0b4:	29ced83a 	srl	r7,r5,r7
    d0b8:	11004526 	beq	r2,r4,d1d0 <__subdf3+0x57c>
    d0bc:	01001004 	movi	r4,64
    d0c0:	2089c83a 	sub	r4,r4,r2
    d0c4:	2904983a 	sll	r2,r5,r4
    d0c8:	118cb03a 	or	r6,r2,r6
    d0cc:	300cc03a 	cmpne	r6,r6,zero
    d0d0:	398cb03a 	or	r6,r7,r6
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	003f3706 	br	cdb8 <__alt_exception_stack_pointer+0xf800cdb8>
    d0dc:	80002a26 	beq	r16,zero,d188 <__subdf3+0x534>
    d0e0:	0101ffc4 	movi	r4,2047
    d0e4:	49006626 	beq	r9,r4,d280 <__subdf3+0x62c>
    d0e8:	0085c83a 	sub	r2,zero,r2
    d0ec:	18c02034 	orhi	r3,r3,128
    d0f0:	01000e04 	movi	r4,56
    d0f4:	20807e16 	blt	r4,r2,d2f0 <__subdf3+0x69c>
    d0f8:	010007c4 	movi	r4,31
    d0fc:	2080e716 	blt	r4,r2,d49c <__subdf3+0x848>
    d100:	01000804 	movi	r4,32
    d104:	2089c83a 	sub	r4,r4,r2
    d108:	1914983a 	sll	r10,r3,r4
    d10c:	8890d83a 	srl	r8,r17,r2
    d110:	8908983a 	sll	r4,r17,r4
    d114:	1884d83a 	srl	r2,r3,r2
    d118:	5222b03a 	or	r17,r10,r8
    d11c:	2006c03a 	cmpne	r3,r4,zero
    d120:	88e2b03a 	or	r17,r17,r3
    d124:	3463c83a 	sub	r17,r6,r17
    d128:	2885c83a 	sub	r2,r5,r2
    d12c:	344d803a 	cmpltu	r6,r6,r17
    d130:	1187c83a 	sub	r3,r2,r6
    d134:	4821883a 	mov	r16,r9
    d138:	3825883a 	mov	r18,r7
    d13c:	003f2306 	br	cdcc <__alt_exception_stack_pointer+0xf800cdcc>
    d140:	24d0b03a 	or	r8,r4,r19
    d144:	40001b1e 	bne	r8,zero,d1b4 <__subdf3+0x560>
    d148:	0005883a 	mov	r2,zero
    d14c:	0009883a 	mov	r4,zero
    d150:	0021883a 	mov	r16,zero
    d154:	003f4906 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    d158:	010007c4 	movi	r4,31
    d15c:	20803a16 	blt	r4,r2,d248 <__subdf3+0x5f4>
    d160:	01000804 	movi	r4,32
    d164:	2089c83a 	sub	r4,r4,r2
    d168:	2912983a 	sll	r9,r5,r4
    d16c:	3090d83a 	srl	r8,r6,r2
    d170:	3108983a 	sll	r4,r6,r4
    d174:	2884d83a 	srl	r2,r5,r2
    d178:	4a12b03a 	or	r9,r9,r8
    d17c:	2008c03a 	cmpne	r4,r4,zero
    d180:	4912b03a 	or	r9,r9,r4
    d184:	003f4e06 	br	cec0 <__alt_exception_stack_pointer+0xf800cec0>
    d188:	1c48b03a 	or	r4,r3,r17
    d18c:	20003c26 	beq	r4,zero,d280 <__subdf3+0x62c>
    d190:	0084303a 	nor	r2,zero,r2
    d194:	1000381e 	bne	r2,zero,d278 <__subdf3+0x624>
    d198:	3463c83a 	sub	r17,r6,r17
    d19c:	28c5c83a 	sub	r2,r5,r3
    d1a0:	344d803a 	cmpltu	r6,r6,r17
    d1a4:	1187c83a 	sub	r3,r2,r6
    d1a8:	4821883a 	mov	r16,r9
    d1ac:	3825883a 	mov	r18,r7
    d1b0:	003f0606 	br	cdcc <__alt_exception_stack_pointer+0xf800cdcc>
    d1b4:	2023883a 	mov	r17,r4
    d1b8:	003f0906 	br	cde0 <__alt_exception_stack_pointer+0xf800cde0>
    d1bc:	0101ffc4 	movi	r4,2047
    d1c0:	813f3a1e 	bne	r16,r4,ceac <__alt_exception_stack_pointer+0xf800ceac>
    d1c4:	003ec406 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d1c8:	0005883a 	mov	r2,zero
    d1cc:	003fb106 	br	d094 <__alt_exception_stack_pointer+0xf800d094>
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	003fbc06 	br	d0c8 <__alt_exception_stack_pointer+0xf800d0c8>
    d1d8:	1c44b03a 	or	r2,r3,r17
    d1dc:	80008e1e 	bne	r16,zero,d418 <__subdf3+0x7c4>
    d1e0:	1000c826 	beq	r2,zero,d504 <__subdf3+0x8b0>
    d1e4:	2984b03a 	or	r2,r5,r6
    d1e8:	103ebb26 	beq	r2,zero,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d1ec:	8989883a 	add	r4,r17,r6
    d1f0:	1945883a 	add	r2,r3,r5
    d1f4:	2447803a 	cmpltu	r3,r4,r17
    d1f8:	1887883a 	add	r3,r3,r2
    d1fc:	1880202c 	andhi	r2,r3,128
    d200:	2023883a 	mov	r17,r4
    d204:	103f1626 	beq	r2,zero,ce60 <__alt_exception_stack_pointer+0xf800ce60>
    d208:	00bfe034 	movhi	r2,65408
    d20c:	10bfffc4 	addi	r2,r2,-1
    d210:	5021883a 	mov	r16,r10
    d214:	1886703a 	and	r3,r3,r2
    d218:	003eaf06 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d21c:	3825883a 	mov	r18,r7
    d220:	003f0f06 	br	ce60 <__alt_exception_stack_pointer+0xf800ce60>
    d224:	1c44b03a 	or	r2,r3,r17
    d228:	8000251e 	bne	r16,zero,d2c0 <__subdf3+0x66c>
    d22c:	1000661e 	bne	r2,zero,d3c8 <__subdf3+0x774>
    d230:	2990b03a 	or	r8,r5,r6
    d234:	40009626 	beq	r8,zero,d490 <__subdf3+0x83c>
    d238:	2807883a 	mov	r3,r5
    d23c:	3023883a 	mov	r17,r6
    d240:	3825883a 	mov	r18,r7
    d244:	003ea406 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d248:	127ff804 	addi	r9,r2,-32
    d24c:	01000804 	movi	r4,32
    d250:	2a52d83a 	srl	r9,r5,r9
    d254:	11008c26 	beq	r2,r4,d488 <__subdf3+0x834>
    d258:	01001004 	movi	r4,64
    d25c:	2085c83a 	sub	r2,r4,r2
    d260:	2884983a 	sll	r2,r5,r2
    d264:	118cb03a 	or	r6,r2,r6
    d268:	300cc03a 	cmpne	r6,r6,zero
    d26c:	4992b03a 	or	r9,r9,r6
    d270:	0005883a 	mov	r2,zero
    d274:	003f1206 	br	cec0 <__alt_exception_stack_pointer+0xf800cec0>
    d278:	0101ffc4 	movi	r4,2047
    d27c:	493f9c1e 	bne	r9,r4,d0f0 <__alt_exception_stack_pointer+0xf800d0f0>
    d280:	2807883a 	mov	r3,r5
    d284:	3023883a 	mov	r17,r6
    d288:	4821883a 	mov	r16,r9
    d28c:	3825883a 	mov	r18,r7
    d290:	003e9106 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d294:	80001f1e 	bne	r16,zero,d314 <__subdf3+0x6c0>
    d298:	1c48b03a 	or	r4,r3,r17
    d29c:	20005a26 	beq	r4,zero,d408 <__subdf3+0x7b4>
    d2a0:	0084303a 	nor	r2,zero,r2
    d2a4:	1000561e 	bne	r2,zero,d400 <__subdf3+0x7ac>
    d2a8:	89a3883a 	add	r17,r17,r6
    d2ac:	1945883a 	add	r2,r3,r5
    d2b0:	898d803a 	cmpltu	r6,r17,r6
    d2b4:	3087883a 	add	r3,r6,r2
    d2b8:	4821883a 	mov	r16,r9
    d2bc:	003f0506 	br	ced4 <__alt_exception_stack_pointer+0xf800ced4>
    d2c0:	10002b1e 	bne	r2,zero,d370 <__subdf3+0x71c>
    d2c4:	2984b03a 	or	r2,r5,r6
    d2c8:	10008026 	beq	r2,zero,d4cc <__subdf3+0x878>
    d2cc:	2807883a 	mov	r3,r5
    d2d0:	3023883a 	mov	r17,r6
    d2d4:	3825883a 	mov	r18,r7
    d2d8:	0401ffc4 	movi	r16,2047
    d2dc:	003e7e06 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d2e0:	3809883a 	mov	r4,r7
    d2e4:	0011883a 	mov	r8,zero
    d2e8:	0005883a 	mov	r2,zero
    d2ec:	003ee306 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    d2f0:	1c62b03a 	or	r17,r3,r17
    d2f4:	8822c03a 	cmpne	r17,r17,zero
    d2f8:	0005883a 	mov	r2,zero
    d2fc:	003f8906 	br	d124 <__alt_exception_stack_pointer+0xf800d124>
    d300:	3809883a 	mov	r4,r7
    d304:	4821883a 	mov	r16,r9
    d308:	0011883a 	mov	r8,zero
    d30c:	0005883a 	mov	r2,zero
    d310:	003eda06 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    d314:	0101ffc4 	movi	r4,2047
    d318:	49003b26 	beq	r9,r4,d408 <__subdf3+0x7b4>
    d31c:	0085c83a 	sub	r2,zero,r2
    d320:	18c02034 	orhi	r3,r3,128
    d324:	01000e04 	movi	r4,56
    d328:	20806e16 	blt	r4,r2,d4e4 <__subdf3+0x890>
    d32c:	010007c4 	movi	r4,31
    d330:	20807716 	blt	r4,r2,d510 <__subdf3+0x8bc>
    d334:	01000804 	movi	r4,32
    d338:	2089c83a 	sub	r4,r4,r2
    d33c:	1914983a 	sll	r10,r3,r4
    d340:	8890d83a 	srl	r8,r17,r2
    d344:	8908983a 	sll	r4,r17,r4
    d348:	1884d83a 	srl	r2,r3,r2
    d34c:	5222b03a 	or	r17,r10,r8
    d350:	2006c03a 	cmpne	r3,r4,zero
    d354:	88e2b03a 	or	r17,r17,r3
    d358:	89a3883a 	add	r17,r17,r6
    d35c:	1145883a 	add	r2,r2,r5
    d360:	898d803a 	cmpltu	r6,r17,r6
    d364:	3087883a 	add	r3,r6,r2
    d368:	4821883a 	mov	r16,r9
    d36c:	003ed906 	br	ced4 <__alt_exception_stack_pointer+0xf800ced4>
    d370:	2984b03a 	or	r2,r5,r6
    d374:	10004226 	beq	r2,zero,d480 <__subdf3+0x82c>
    d378:	1808d0fa 	srli	r4,r3,3
    d37c:	8822d0fa 	srli	r17,r17,3
    d380:	1806977a 	slli	r3,r3,29
    d384:	2080022c 	andhi	r2,r4,8
    d388:	1c62b03a 	or	r17,r3,r17
    d38c:	10000826 	beq	r2,zero,d3b0 <__subdf3+0x75c>
    d390:	2812d0fa 	srli	r9,r5,3
    d394:	4880022c 	andhi	r2,r9,8
    d398:	1000051e 	bne	r2,zero,d3b0 <__subdf3+0x75c>
    d39c:	300cd0fa 	srli	r6,r6,3
    d3a0:	2804977a 	slli	r2,r5,29
    d3a4:	4809883a 	mov	r4,r9
    d3a8:	3825883a 	mov	r18,r7
    d3ac:	11a2b03a 	or	r17,r2,r6
    d3b0:	8806d77a 	srli	r3,r17,29
    d3b4:	200890fa 	slli	r4,r4,3
    d3b8:	882290fa 	slli	r17,r17,3
    d3bc:	0401ffc4 	movi	r16,2047
    d3c0:	1906b03a 	or	r3,r3,r4
    d3c4:	003e4406 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d3c8:	2984b03a 	or	r2,r5,r6
    d3cc:	103e4226 	beq	r2,zero,ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d3d0:	8989c83a 	sub	r4,r17,r6
    d3d4:	8911803a 	cmpltu	r8,r17,r4
    d3d8:	1945c83a 	sub	r2,r3,r5
    d3dc:	1205c83a 	sub	r2,r2,r8
    d3e0:	1200202c 	andhi	r8,r2,128
    d3e4:	403e9a26 	beq	r8,zero,ce50 <__alt_exception_stack_pointer+0xf800ce50>
    d3e8:	3463c83a 	sub	r17,r6,r17
    d3ec:	28c5c83a 	sub	r2,r5,r3
    d3f0:	344d803a 	cmpltu	r6,r6,r17
    d3f4:	1187c83a 	sub	r3,r2,r6
    d3f8:	3825883a 	mov	r18,r7
    d3fc:	003e3606 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d400:	0101ffc4 	movi	r4,2047
    d404:	493fc71e 	bne	r9,r4,d324 <__alt_exception_stack_pointer+0xf800d324>
    d408:	2807883a 	mov	r3,r5
    d40c:	3023883a 	mov	r17,r6
    d410:	4821883a 	mov	r16,r9
    d414:	003e3006 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d418:	10003626 	beq	r2,zero,d4f4 <__subdf3+0x8a0>
    d41c:	2984b03a 	or	r2,r5,r6
    d420:	10001726 	beq	r2,zero,d480 <__subdf3+0x82c>
    d424:	1808d0fa 	srli	r4,r3,3
    d428:	8822d0fa 	srli	r17,r17,3
    d42c:	1806977a 	slli	r3,r3,29
    d430:	2080022c 	andhi	r2,r4,8
    d434:	1c62b03a 	or	r17,r3,r17
    d438:	10000726 	beq	r2,zero,d458 <__subdf3+0x804>
    d43c:	2812d0fa 	srli	r9,r5,3
    d440:	4880022c 	andhi	r2,r9,8
    d444:	1000041e 	bne	r2,zero,d458 <__subdf3+0x804>
    d448:	300cd0fa 	srli	r6,r6,3
    d44c:	2804977a 	slli	r2,r5,29
    d450:	4809883a 	mov	r4,r9
    d454:	11a2b03a 	or	r17,r2,r6
    d458:	8806d77a 	srli	r3,r17,29
    d45c:	200890fa 	slli	r4,r4,3
    d460:	882290fa 	slli	r17,r17,3
    d464:	3825883a 	mov	r18,r7
    d468:	1906b03a 	or	r3,r3,r4
    d46c:	0401ffc4 	movi	r16,2047
    d470:	003e1906 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d474:	000b883a 	mov	r5,zero
    d478:	0005883a 	mov	r2,zero
    d47c:	003e2e06 	br	cd38 <__alt_exception_stack_pointer+0xf800cd38>
    d480:	0401ffc4 	movi	r16,2047
    d484:	003e1406 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d488:	0005883a 	mov	r2,zero
    d48c:	003f7506 	br	d264 <__alt_exception_stack_pointer+0xf800d264>
    d490:	0005883a 	mov	r2,zero
    d494:	0009883a 	mov	r4,zero
    d498:	003e7806 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    d49c:	123ff804 	addi	r8,r2,-32
    d4a0:	01000804 	movi	r4,32
    d4a4:	1a10d83a 	srl	r8,r3,r8
    d4a8:	11002526 	beq	r2,r4,d540 <__subdf3+0x8ec>
    d4ac:	01001004 	movi	r4,64
    d4b0:	2085c83a 	sub	r2,r4,r2
    d4b4:	1884983a 	sll	r2,r3,r2
    d4b8:	1444b03a 	or	r2,r2,r17
    d4bc:	1004c03a 	cmpne	r2,r2,zero
    d4c0:	40a2b03a 	or	r17,r8,r2
    d4c4:	0005883a 	mov	r2,zero
    d4c8:	003f1606 	br	d124 <__alt_exception_stack_pointer+0xf800d124>
    d4cc:	02000434 	movhi	r8,16
    d4d0:	0009883a 	mov	r4,zero
    d4d4:	423fffc4 	addi	r8,r8,-1
    d4d8:	00bfffc4 	movi	r2,-1
    d4dc:	0401ffc4 	movi	r16,2047
    d4e0:	003e6606 	br	ce7c <__alt_exception_stack_pointer+0xf800ce7c>
    d4e4:	1c62b03a 	or	r17,r3,r17
    d4e8:	8822c03a 	cmpne	r17,r17,zero
    d4ec:	0005883a 	mov	r2,zero
    d4f0:	003f9906 	br	d358 <__alt_exception_stack_pointer+0xf800d358>
    d4f4:	2807883a 	mov	r3,r5
    d4f8:	3023883a 	mov	r17,r6
    d4fc:	0401ffc4 	movi	r16,2047
    d500:	003df506 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d504:	2807883a 	mov	r3,r5
    d508:	3023883a 	mov	r17,r6
    d50c:	003df206 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d510:	123ff804 	addi	r8,r2,-32
    d514:	01000804 	movi	r4,32
    d518:	1a10d83a 	srl	r8,r3,r8
    d51c:	11000a26 	beq	r2,r4,d548 <__subdf3+0x8f4>
    d520:	01001004 	movi	r4,64
    d524:	2085c83a 	sub	r2,r4,r2
    d528:	1884983a 	sll	r2,r3,r2
    d52c:	1444b03a 	or	r2,r2,r17
    d530:	1004c03a 	cmpne	r2,r2,zero
    d534:	40a2b03a 	or	r17,r8,r2
    d538:	0005883a 	mov	r2,zero
    d53c:	003f8606 	br	d358 <__alt_exception_stack_pointer+0xf800d358>
    d540:	0005883a 	mov	r2,zero
    d544:	003fdc06 	br	d4b8 <__alt_exception_stack_pointer+0xf800d4b8>
    d548:	0005883a 	mov	r2,zero
    d54c:	003ff706 	br	d52c <__alt_exception_stack_pointer+0xf800d52c>

0000d550 <__fixdfsi>:
    d550:	280cd53a 	srli	r6,r5,20
    d554:	00c00434 	movhi	r3,16
    d558:	18ffffc4 	addi	r3,r3,-1
    d55c:	3181ffcc 	andi	r6,r6,2047
    d560:	01c0ff84 	movi	r7,1022
    d564:	28c6703a 	and	r3,r5,r3
    d568:	280ad7fa 	srli	r5,r5,31
    d56c:	3980120e 	bge	r7,r6,d5b8 <__fixdfsi+0x68>
    d570:	00810744 	movi	r2,1053
    d574:	11800c16 	blt	r2,r6,d5a8 <__fixdfsi+0x58>
    d578:	00810cc4 	movi	r2,1075
    d57c:	1185c83a 	sub	r2,r2,r6
    d580:	01c007c4 	movi	r7,31
    d584:	18c00434 	orhi	r3,r3,16
    d588:	38800d16 	blt	r7,r2,d5c0 <__fixdfsi+0x70>
    d58c:	31befb44 	addi	r6,r6,-1043
    d590:	2084d83a 	srl	r2,r4,r2
    d594:	1986983a 	sll	r3,r3,r6
    d598:	1884b03a 	or	r2,r3,r2
    d59c:	28000726 	beq	r5,zero,d5bc <__fixdfsi+0x6c>
    d5a0:	0085c83a 	sub	r2,zero,r2
    d5a4:	f800283a 	ret
    d5a8:	00a00034 	movhi	r2,32768
    d5ac:	10bfffc4 	addi	r2,r2,-1
    d5b0:	2885883a 	add	r2,r5,r2
    d5b4:	f800283a 	ret
    d5b8:	0005883a 	mov	r2,zero
    d5bc:	f800283a 	ret
    d5c0:	008104c4 	movi	r2,1043
    d5c4:	1185c83a 	sub	r2,r2,r6
    d5c8:	1884d83a 	srl	r2,r3,r2
    d5cc:	003ff306 	br	d59c <__alt_exception_stack_pointer+0xf800d59c>

0000d5d0 <__floatsidf>:
    d5d0:	defffd04 	addi	sp,sp,-12
    d5d4:	dfc00215 	stw	ra,8(sp)
    d5d8:	dc400115 	stw	r17,4(sp)
    d5dc:	dc000015 	stw	r16,0(sp)
    d5e0:	20002b26 	beq	r4,zero,d690 <__floatsidf+0xc0>
    d5e4:	2023883a 	mov	r17,r4
    d5e8:	2020d7fa 	srli	r16,r4,31
    d5ec:	20002d16 	blt	r4,zero,d6a4 <__floatsidf+0xd4>
    d5f0:	8809883a 	mov	r4,r17
    d5f4:	00014180 	call	1418 <__clzsi2>
    d5f8:	01410784 	movi	r5,1054
    d5fc:	288bc83a 	sub	r5,r5,r2
    d600:	01010cc4 	movi	r4,1075
    d604:	2149c83a 	sub	r4,r4,r5
    d608:	00c007c4 	movi	r3,31
    d60c:	1900160e 	bge	r3,r4,d668 <__floatsidf+0x98>
    d610:	00c104c4 	movi	r3,1043
    d614:	1947c83a 	sub	r3,r3,r5
    d618:	88c6983a 	sll	r3,r17,r3
    d61c:	00800434 	movhi	r2,16
    d620:	10bfffc4 	addi	r2,r2,-1
    d624:	1886703a 	and	r3,r3,r2
    d628:	2941ffcc 	andi	r5,r5,2047
    d62c:	800d883a 	mov	r6,r16
    d630:	0005883a 	mov	r2,zero
    d634:	280a953a 	slli	r5,r5,20
    d638:	31803fcc 	andi	r6,r6,255
    d63c:	01000434 	movhi	r4,16
    d640:	300c97fa 	slli	r6,r6,31
    d644:	213fffc4 	addi	r4,r4,-1
    d648:	1906703a 	and	r3,r3,r4
    d64c:	1946b03a 	or	r3,r3,r5
    d650:	1986b03a 	or	r3,r3,r6
    d654:	dfc00217 	ldw	ra,8(sp)
    d658:	dc400117 	ldw	r17,4(sp)
    d65c:	dc000017 	ldw	r16,0(sp)
    d660:	dec00304 	addi	sp,sp,12
    d664:	f800283a 	ret
    d668:	00c002c4 	movi	r3,11
    d66c:	1887c83a 	sub	r3,r3,r2
    d670:	88c6d83a 	srl	r3,r17,r3
    d674:	8904983a 	sll	r2,r17,r4
    d678:	01000434 	movhi	r4,16
    d67c:	213fffc4 	addi	r4,r4,-1
    d680:	2941ffcc 	andi	r5,r5,2047
    d684:	1906703a 	and	r3,r3,r4
    d688:	800d883a 	mov	r6,r16
    d68c:	003fe906 	br	d634 <__alt_exception_stack_pointer+0xf800d634>
    d690:	000d883a 	mov	r6,zero
    d694:	000b883a 	mov	r5,zero
    d698:	0007883a 	mov	r3,zero
    d69c:	0005883a 	mov	r2,zero
    d6a0:	003fe406 	br	d634 <__alt_exception_stack_pointer+0xf800d634>
    d6a4:	0123c83a 	sub	r17,zero,r4
    d6a8:	003fd106 	br	d5f0 <__alt_exception_stack_pointer+0xf800d5f0>

0000d6ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6ac:	defffe04 	addi	sp,sp,-8
    d6b0:	dfc00115 	stw	ra,4(sp)
    d6b4:	df000015 	stw	fp,0(sp)
    d6b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6bc:	d0a00f17 	ldw	r2,-32708(gp)
    d6c0:	10000326 	beq	r2,zero,d6d0 <alt_get_errno+0x24>
    d6c4:	d0a00f17 	ldw	r2,-32708(gp)
    d6c8:	103ee83a 	callr	r2
    d6cc:	00000106 	br	d6d4 <alt_get_errno+0x28>
    d6d0:	d0a70c04 	addi	r2,gp,-25552
}
    d6d4:	e037883a 	mov	sp,fp
    d6d8:	dfc00117 	ldw	ra,4(sp)
    d6dc:	df000017 	ldw	fp,0(sp)
    d6e0:	dec00204 	addi	sp,sp,8
    d6e4:	f800283a 	ret

0000d6e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d6e8:	defffb04 	addi	sp,sp,-20
    d6ec:	dfc00415 	stw	ra,16(sp)
    d6f0:	df000315 	stw	fp,12(sp)
    d6f4:	df000304 	addi	fp,sp,12
    d6f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d6fc:	e0bfff17 	ldw	r2,-4(fp)
    d700:	10000816 	blt	r2,zero,d724 <close+0x3c>
    d704:	01400304 	movi	r5,12
    d708:	e13fff17 	ldw	r4,-4(fp)
    d70c:	00009780 	call	978 <__mulsi3>
    d710:	1007883a 	mov	r3,r2
    d714:	00800074 	movhi	r2,1
    d718:	10860404 	addi	r2,r2,6160
    d71c:	1885883a 	add	r2,r3,r2
    d720:	00000106 	br	d728 <close+0x40>
    d724:	0005883a 	mov	r2,zero
    d728:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d72c:	e0bffd17 	ldw	r2,-12(fp)
    d730:	10001926 	beq	r2,zero,d798 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d734:	e0bffd17 	ldw	r2,-12(fp)
    d738:	10800017 	ldw	r2,0(r2)
    d73c:	10800417 	ldw	r2,16(r2)
    d740:	10000626 	beq	r2,zero,d75c <close+0x74>
    d744:	e0bffd17 	ldw	r2,-12(fp)
    d748:	10800017 	ldw	r2,0(r2)
    d74c:	10800417 	ldw	r2,16(r2)
    d750:	e13ffd17 	ldw	r4,-12(fp)
    d754:	103ee83a 	callr	r2
    d758:	00000106 	br	d760 <close+0x78>
    d75c:	0005883a 	mov	r2,zero
    d760:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d764:	e13fff17 	ldw	r4,-4(fp)
    d768:	000df800 	call	df80 <alt_release_fd>
    if (rval < 0)
    d76c:	e0bffe17 	ldw	r2,-8(fp)
    d770:	1000070e 	bge	r2,zero,d790 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d774:	000d6ac0 	call	d6ac <alt_get_errno>
    d778:	1007883a 	mov	r3,r2
    d77c:	e0bffe17 	ldw	r2,-8(fp)
    d780:	0085c83a 	sub	r2,zero,r2
    d784:	18800015 	stw	r2,0(r3)
      return -1;
    d788:	00bfffc4 	movi	r2,-1
    d78c:	00000706 	br	d7ac <close+0xc4>
    }
    return 0;
    d790:	0005883a 	mov	r2,zero
    d794:	00000506 	br	d7ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d798:	000d6ac0 	call	d6ac <alt_get_errno>
    d79c:	1007883a 	mov	r3,r2
    d7a0:	00801444 	movi	r2,81
    d7a4:	18800015 	stw	r2,0(r3)
    return -1;
    d7a8:	00bfffc4 	movi	r2,-1
  }
}
    d7ac:	e037883a 	mov	sp,fp
    d7b0:	dfc00117 	ldw	ra,4(sp)
    d7b4:	df000017 	ldw	fp,0(sp)
    d7b8:	dec00204 	addi	sp,sp,8
    d7bc:	f800283a 	ret

0000d7c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d7c0:	defffc04 	addi	sp,sp,-16
    d7c4:	df000315 	stw	fp,12(sp)
    d7c8:	df000304 	addi	fp,sp,12
    d7cc:	e13ffd15 	stw	r4,-12(fp)
    d7d0:	e17ffe15 	stw	r5,-8(fp)
    d7d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d7d8:	e0bfff17 	ldw	r2,-4(fp)
}
    d7dc:	e037883a 	mov	sp,fp
    d7e0:	df000017 	ldw	fp,0(sp)
    d7e4:	dec00104 	addi	sp,sp,4
    d7e8:	f800283a 	ret

0000d7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7ec:	defffe04 	addi	sp,sp,-8
    d7f0:	dfc00115 	stw	ra,4(sp)
    d7f4:	df000015 	stw	fp,0(sp)
    d7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7fc:	d0a00f17 	ldw	r2,-32708(gp)
    d800:	10000326 	beq	r2,zero,d810 <alt_get_errno+0x24>
    d804:	d0a00f17 	ldw	r2,-32708(gp)
    d808:	103ee83a 	callr	r2
    d80c:	00000106 	br	d814 <alt_get_errno+0x28>
    d810:	d0a70c04 	addi	r2,gp,-25552
}
    d814:	e037883a 	mov	sp,fp
    d818:	dfc00117 	ldw	ra,4(sp)
    d81c:	df000017 	ldw	fp,0(sp)
    d820:	dec00204 	addi	sp,sp,8
    d824:	f800283a 	ret

0000d828 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    d828:	defffc04 	addi	sp,sp,-16
    d82c:	dfc00315 	stw	ra,12(sp)
    d830:	df000215 	stw	fp,8(sp)
    d834:	df000204 	addi	fp,sp,8
    d838:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    d83c:	d1600b04 	addi	r5,gp,-32724
    d840:	e13fff17 	ldw	r4,-4(fp)
    d844:	000d90c0 	call	d90c <alt_find_dev>
    d848:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    d84c:	e0bffe17 	ldw	r2,-8(fp)
    d850:	1000041e 	bne	r2,zero,d864 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    d854:	000d7ec0 	call	d7ec <alt_get_errno>
    d858:	1007883a 	mov	r3,r2
    d85c:	008004c4 	movi	r2,19
    d860:	18800015 	stw	r2,0(r3)
  }

  return dev;
    d864:	e0bffe17 	ldw	r2,-8(fp)
}
    d868:	e037883a 	mov	sp,fp
    d86c:	dfc00117 	ldw	ra,4(sp)
    d870:	df000017 	ldw	fp,0(sp)
    d874:	dec00204 	addi	sp,sp,8
    d878:	f800283a 	ret

0000d87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d87c:	defffe04 	addi	sp,sp,-8
    d880:	dfc00115 	stw	ra,4(sp)
    d884:	df000015 	stw	fp,0(sp)
    d888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d88c:	d0a00f17 	ldw	r2,-32708(gp)
    d890:	10000326 	beq	r2,zero,d8a0 <alt_get_errno+0x24>
    d894:	d0a00f17 	ldw	r2,-32708(gp)
    d898:	103ee83a 	callr	r2
    d89c:	00000106 	br	d8a4 <alt_get_errno+0x28>
    d8a0:	d0a70c04 	addi	r2,gp,-25552
}
    d8a4:	e037883a 	mov	sp,fp
    d8a8:	dfc00117 	ldw	ra,4(sp)
    d8ac:	df000017 	ldw	fp,0(sp)
    d8b0:	dec00204 	addi	sp,sp,8
    d8b4:	f800283a 	ret

0000d8b8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    d8b8:	defffc04 	addi	sp,sp,-16
    d8bc:	dfc00315 	stw	ra,12(sp)
    d8c0:	df000215 	stw	fp,8(sp)
    d8c4:	df000204 	addi	fp,sp,8
    d8c8:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    d8cc:	d1600d04 	addi	r5,gp,-32716
    d8d0:	e13fff17 	ldw	r4,-4(fp)
    d8d4:	000d90c0 	call	d90c <alt_find_dev>
    d8d8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    d8dc:	e0bffe17 	ldw	r2,-8(fp)
    d8e0:	1000041e 	bne	r2,zero,d8f4 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    d8e4:	000d87c0 	call	d87c <alt_get_errno>
    d8e8:	1007883a 	mov	r3,r2
    d8ec:	008004c4 	movi	r2,19
    d8f0:	18800015 	stw	r2,0(r3)
  }

  return dev;
    d8f4:	e0bffe17 	ldw	r2,-8(fp)
}
    d8f8:	e037883a 	mov	sp,fp
    d8fc:	dfc00117 	ldw	ra,4(sp)
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00204 	addi	sp,sp,8
    d908:	f800283a 	ret

0000d90c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d90c:	defffa04 	addi	sp,sp,-24
    d910:	dfc00515 	stw	ra,20(sp)
    d914:	df000415 	stw	fp,16(sp)
    d918:	df000404 	addi	fp,sp,16
    d91c:	e13ffe15 	stw	r4,-8(fp)
    d920:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d924:	e0bfff17 	ldw	r2,-4(fp)
    d928:	10800017 	ldw	r2,0(r2)
    d92c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d930:	e13ffe17 	ldw	r4,-8(fp)
    d934:	00080c00 	call	80c0 <strlen>
    d938:	10800044 	addi	r2,r2,1
    d93c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d940:	00000d06 	br	d978 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d944:	e0bffc17 	ldw	r2,-16(fp)
    d948:	10800217 	ldw	r2,8(r2)
    d94c:	e0fffd17 	ldw	r3,-12(fp)
    d950:	180d883a 	mov	r6,r3
    d954:	e17ffe17 	ldw	r5,-8(fp)
    d958:	1009883a 	mov	r4,r2
    d95c:	00108c40 	call	108c4 <memcmp>
    d960:	1000021e 	bne	r2,zero,d96c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d964:	e0bffc17 	ldw	r2,-16(fp)
    d968:	00000706 	br	d988 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d96c:	e0bffc17 	ldw	r2,-16(fp)
    d970:	10800017 	ldw	r2,0(r2)
    d974:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d978:	e0fffc17 	ldw	r3,-16(fp)
    d97c:	e0bfff17 	ldw	r2,-4(fp)
    d980:	18bff01e 	bne	r3,r2,d944 <__alt_exception_stack_pointer+0xf800d944>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d984:	0005883a 	mov	r2,zero
}
    d988:	e037883a 	mov	sp,fp
    d98c:	dfc00117 	ldw	ra,4(sp)
    d990:	df000017 	ldw	fp,0(sp)
    d994:	dec00204 	addi	sp,sp,8
    d998:	f800283a 	ret

0000d99c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d99c:	defffe04 	addi	sp,sp,-8
    d9a0:	dfc00115 	stw	ra,4(sp)
    d9a4:	df000015 	stw	fp,0(sp)
    d9a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9ac:	d0a00f17 	ldw	r2,-32708(gp)
    d9b0:	10000326 	beq	r2,zero,d9c0 <alt_get_errno+0x24>
    d9b4:	d0a00f17 	ldw	r2,-32708(gp)
    d9b8:	103ee83a 	callr	r2
    d9bc:	00000106 	br	d9c4 <alt_get_errno+0x28>
    d9c0:	d0a70c04 	addi	r2,gp,-25552
}
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	dfc00117 	ldw	ra,4(sp)
    d9cc:	df000017 	ldw	fp,0(sp)
    d9d0:	dec00204 	addi	sp,sp,8
    d9d4:	f800283a 	ret

0000d9d8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d9d8:	defffb04 	addi	sp,sp,-20
    d9dc:	dfc00415 	stw	ra,16(sp)
    d9e0:	df000315 	stw	fp,12(sp)
    d9e4:	df000304 	addi	fp,sp,12
    d9e8:	e13ffe15 	stw	r4,-8(fp)
    d9ec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9f0:	e0bffe17 	ldw	r2,-8(fp)
    d9f4:	10000816 	blt	r2,zero,da18 <fstat+0x40>
    d9f8:	01400304 	movi	r5,12
    d9fc:	e13ffe17 	ldw	r4,-8(fp)
    da00:	00009780 	call	978 <__mulsi3>
    da04:	1007883a 	mov	r3,r2
    da08:	00800074 	movhi	r2,1
    da0c:	10860404 	addi	r2,r2,6160
    da10:	1885883a 	add	r2,r3,r2
    da14:	00000106 	br	da1c <fstat+0x44>
    da18:	0005883a 	mov	r2,zero
    da1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    da20:	e0bffd17 	ldw	r2,-12(fp)
    da24:	10001026 	beq	r2,zero,da68 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    da28:	e0bffd17 	ldw	r2,-12(fp)
    da2c:	10800017 	ldw	r2,0(r2)
    da30:	10800817 	ldw	r2,32(r2)
    da34:	10000726 	beq	r2,zero,da54 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    da38:	e0bffd17 	ldw	r2,-12(fp)
    da3c:	10800017 	ldw	r2,0(r2)
    da40:	10800817 	ldw	r2,32(r2)
    da44:	e17fff17 	ldw	r5,-4(fp)
    da48:	e13ffd17 	ldw	r4,-12(fp)
    da4c:	103ee83a 	callr	r2
    da50:	00000a06 	br	da7c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    da54:	e0bfff17 	ldw	r2,-4(fp)
    da58:	00c80004 	movi	r3,8192
    da5c:	10c00115 	stw	r3,4(r2)
      return 0;
    da60:	0005883a 	mov	r2,zero
    da64:	00000506 	br	da7c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    da68:	000d99c0 	call	d99c <alt_get_errno>
    da6c:	1007883a 	mov	r3,r2
    da70:	00801444 	movi	r2,81
    da74:	18800015 	stw	r2,0(r3)
    return -1;
    da78:	00bfffc4 	movi	r2,-1
  }
}
    da7c:	e037883a 	mov	sp,fp
    da80:	dfc00117 	ldw	ra,4(sp)
    da84:	df000017 	ldw	fp,0(sp)
    da88:	dec00204 	addi	sp,sp,8
    da8c:	f800283a 	ret

0000da90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    da90:	defffe04 	addi	sp,sp,-8
    da94:	dfc00115 	stw	ra,4(sp)
    da98:	df000015 	stw	fp,0(sp)
    da9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    daa0:	d0a00f17 	ldw	r2,-32708(gp)
    daa4:	10000326 	beq	r2,zero,dab4 <alt_get_errno+0x24>
    daa8:	d0a00f17 	ldw	r2,-32708(gp)
    daac:	103ee83a 	callr	r2
    dab0:	00000106 	br	dab8 <alt_get_errno+0x28>
    dab4:	d0a70c04 	addi	r2,gp,-25552
}
    dab8:	e037883a 	mov	sp,fp
    dabc:	dfc00117 	ldw	ra,4(sp)
    dac0:	df000017 	ldw	fp,0(sp)
    dac4:	dec00204 	addi	sp,sp,8
    dac8:	f800283a 	ret

0000dacc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    dacc:	deffed04 	addi	sp,sp,-76
    dad0:	dfc01215 	stw	ra,72(sp)
    dad4:	df001115 	stw	fp,68(sp)
    dad8:	df001104 	addi	fp,sp,68
    dadc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dae0:	e0bfff17 	ldw	r2,-4(fp)
    dae4:	10000816 	blt	r2,zero,db08 <isatty+0x3c>
    dae8:	01400304 	movi	r5,12
    daec:	e13fff17 	ldw	r4,-4(fp)
    daf0:	00009780 	call	978 <__mulsi3>
    daf4:	1007883a 	mov	r3,r2
    daf8:	00800074 	movhi	r2,1
    dafc:	10860404 	addi	r2,r2,6160
    db00:	1885883a 	add	r2,r3,r2
    db04:	00000106 	br	db0c <isatty+0x40>
    db08:	0005883a 	mov	r2,zero
    db0c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    db10:	e0bfef17 	ldw	r2,-68(fp)
    db14:	10000e26 	beq	r2,zero,db50 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    db18:	e0bfef17 	ldw	r2,-68(fp)
    db1c:	10800017 	ldw	r2,0(r2)
    db20:	10800817 	ldw	r2,32(r2)
    db24:	1000021e 	bne	r2,zero,db30 <isatty+0x64>
    {
      return 1;
    db28:	00800044 	movi	r2,1
    db2c:	00000d06 	br	db64 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    db30:	e0bff004 	addi	r2,fp,-64
    db34:	100b883a 	mov	r5,r2
    db38:	e13fff17 	ldw	r4,-4(fp)
    db3c:	000d9d80 	call	d9d8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    db40:	e0bff117 	ldw	r2,-60(fp)
    db44:	10880020 	cmpeqi	r2,r2,8192
    db48:	10803fcc 	andi	r2,r2,255
    db4c:	00000506 	br	db64 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    db50:	000da900 	call	da90 <alt_get_errno>
    db54:	1007883a 	mov	r3,r2
    db58:	00801444 	movi	r2,81
    db5c:	18800015 	stw	r2,0(r3)
    return 0;
    db60:	0005883a 	mov	r2,zero
  }
}
    db64:	e037883a 	mov	sp,fp
    db68:	dfc00117 	ldw	ra,4(sp)
    db6c:	df000017 	ldw	fp,0(sp)
    db70:	dec00204 	addi	sp,sp,8
    db74:	f800283a 	ret

0000db78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    db78:	defffc04 	addi	sp,sp,-16
    db7c:	df000315 	stw	fp,12(sp)
    db80:	df000304 	addi	fp,sp,12
    db84:	e13ffd15 	stw	r4,-12(fp)
    db88:	e17ffe15 	stw	r5,-8(fp)
    db8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    db90:	e0fffe17 	ldw	r3,-8(fp)
    db94:	e0bffd17 	ldw	r2,-12(fp)
    db98:	18800c26 	beq	r3,r2,dbcc <alt_load_section+0x54>
  {
    while( to != end )
    db9c:	00000806 	br	dbc0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    dba0:	e0bffe17 	ldw	r2,-8(fp)
    dba4:	10c00104 	addi	r3,r2,4
    dba8:	e0fffe15 	stw	r3,-8(fp)
    dbac:	e0fffd17 	ldw	r3,-12(fp)
    dbb0:	19000104 	addi	r4,r3,4
    dbb4:	e13ffd15 	stw	r4,-12(fp)
    dbb8:	18c00017 	ldw	r3,0(r3)
    dbbc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    dbc0:	e0fffe17 	ldw	r3,-8(fp)
    dbc4:	e0bfff17 	ldw	r2,-4(fp)
    dbc8:	18bff51e 	bne	r3,r2,dba0 <__alt_exception_stack_pointer+0xf800dba0>
    {
      *to++ = *from++;
    }
  }
}
    dbcc:	0001883a 	nop
    dbd0:	e037883a 	mov	sp,fp
    dbd4:	df000017 	ldw	fp,0(sp)
    dbd8:	dec00104 	addi	sp,sp,4
    dbdc:	f800283a 	ret

0000dbe0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    dbe0:	defffe04 	addi	sp,sp,-8
    dbe4:	dfc00115 	stw	ra,4(sp)
    dbe8:	df000015 	stw	fp,0(sp)
    dbec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    dbf0:	01800074 	movhi	r6,1
    dbf4:	318ac604 	addi	r6,r6,11032
    dbf8:	01400074 	movhi	r5,1
    dbfc:	2943d104 	addi	r5,r5,3908
    dc00:	01000074 	movhi	r4,1
    dc04:	210ac604 	addi	r4,r4,11032
    dc08:	000db780 	call	db78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    dc0c:	01800034 	movhi	r6,0
    dc10:	31808f04 	addi	r6,r6,572
    dc14:	01400034 	movhi	r5,0
    dc18:	29400804 	addi	r5,r5,32
    dc1c:	01000034 	movhi	r4,0
    dc20:	21000804 	addi	r4,r4,32
    dc24:	000db780 	call	db78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dc28:	01800074 	movhi	r6,1
    dc2c:	3183d104 	addi	r6,r6,3908
    dc30:	01400074 	movhi	r5,1
    dc34:	29430304 	addi	r5,r5,3084
    dc38:	01000074 	movhi	r4,1
    dc3c:	21030304 	addi	r4,r4,3084
    dc40:	000db780 	call	db78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dc44:	000fbe40 	call	fbe4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    dc48:	000fda40 	call	fda4 <alt_icache_flush_all>
}
    dc4c:	0001883a 	nop
    dc50:	e037883a 	mov	sp,fp
    dc54:	dfc00117 	ldw	ra,4(sp)
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00204 	addi	sp,sp,8
    dc60:	f800283a 	ret

0000dc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc64:	defffe04 	addi	sp,sp,-8
    dc68:	dfc00115 	stw	ra,4(sp)
    dc6c:	df000015 	stw	fp,0(sp)
    dc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc74:	d0a00f17 	ldw	r2,-32708(gp)
    dc78:	10000326 	beq	r2,zero,dc88 <alt_get_errno+0x24>
    dc7c:	d0a00f17 	ldw	r2,-32708(gp)
    dc80:	103ee83a 	callr	r2
    dc84:	00000106 	br	dc8c <alt_get_errno+0x28>
    dc88:	d0a70c04 	addi	r2,gp,-25552
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00117 	ldw	ra,4(sp)
    dc94:	df000017 	ldw	fp,0(sp)
    dc98:	dec00204 	addi	sp,sp,8
    dc9c:	f800283a 	ret

0000dca0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    dca0:	defff904 	addi	sp,sp,-28
    dca4:	dfc00615 	stw	ra,24(sp)
    dca8:	df000515 	stw	fp,20(sp)
    dcac:	df000504 	addi	fp,sp,20
    dcb0:	e13ffd15 	stw	r4,-12(fp)
    dcb4:	e17ffe15 	stw	r5,-8(fp)
    dcb8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    dcbc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dcc0:	e0bffd17 	ldw	r2,-12(fp)
    dcc4:	10000816 	blt	r2,zero,dce8 <lseek+0x48>
    dcc8:	01400304 	movi	r5,12
    dccc:	e13ffd17 	ldw	r4,-12(fp)
    dcd0:	00009780 	call	978 <__mulsi3>
    dcd4:	1007883a 	mov	r3,r2
    dcd8:	00800074 	movhi	r2,1
    dcdc:	10860404 	addi	r2,r2,6160
    dce0:	1885883a 	add	r2,r3,r2
    dce4:	00000106 	br	dcec <lseek+0x4c>
    dce8:	0005883a 	mov	r2,zero
    dcec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dcf0:	e0bffc17 	ldw	r2,-16(fp)
    dcf4:	10001026 	beq	r2,zero,dd38 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dcf8:	e0bffc17 	ldw	r2,-16(fp)
    dcfc:	10800017 	ldw	r2,0(r2)
    dd00:	10800717 	ldw	r2,28(r2)
    dd04:	10000926 	beq	r2,zero,dd2c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dd08:	e0bffc17 	ldw	r2,-16(fp)
    dd0c:	10800017 	ldw	r2,0(r2)
    dd10:	10800717 	ldw	r2,28(r2)
    dd14:	e1bfff17 	ldw	r6,-4(fp)
    dd18:	e17ffe17 	ldw	r5,-8(fp)
    dd1c:	e13ffc17 	ldw	r4,-16(fp)
    dd20:	103ee83a 	callr	r2
    dd24:	e0bffb15 	stw	r2,-20(fp)
    dd28:	00000506 	br	dd40 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dd2c:	00bfde84 	movi	r2,-134
    dd30:	e0bffb15 	stw	r2,-20(fp)
    dd34:	00000206 	br	dd40 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dd38:	00bfebc4 	movi	r2,-81
    dd3c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dd40:	e0bffb17 	ldw	r2,-20(fp)
    dd44:	1000070e 	bge	r2,zero,dd64 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dd48:	000dc640 	call	dc64 <alt_get_errno>
    dd4c:	1007883a 	mov	r3,r2
    dd50:	e0bffb17 	ldw	r2,-20(fp)
    dd54:	0085c83a 	sub	r2,zero,r2
    dd58:	18800015 	stw	r2,0(r3)
    rc = -1;
    dd5c:	00bfffc4 	movi	r2,-1
    dd60:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dd64:	e0bffb17 	ldw	r2,-20(fp)
}
    dd68:	e037883a 	mov	sp,fp
    dd6c:	dfc00117 	ldw	ra,4(sp)
    dd70:	df000017 	ldw	fp,0(sp)
    dd74:	dec00204 	addi	sp,sp,8
    dd78:	f800283a 	ret

0000dd7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dd7c:	defffd04 	addi	sp,sp,-12
    dd80:	dfc00215 	stw	ra,8(sp)
    dd84:	df000115 	stw	fp,4(sp)
    dd88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dd8c:	0009883a 	mov	r4,zero
    dd90:	000e2d80 	call	e2d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dd94:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dd98:	000e3100 	call	e310 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dd9c:	01800074 	movhi	r6,1
    dda0:	3183c104 	addi	r6,r6,3844
    dda4:	01400074 	movhi	r5,1
    dda8:	2943c604 	addi	r5,r5,3864
    ddac:	01000074 	movhi	r4,1
    ddb0:	2103c104 	addi	r4,r4,3844
    ddb4:	00101480 	call	10148 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ddb8:	000fce40 	call	fce4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ddbc:	01000074 	movhi	r4,1
    ddc0:	213f5104 	addi	r4,r4,-700
    ddc4:	00108780 	call	10878 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ddc8:	d0a71017 	ldw	r2,-25536(gp)
    ddcc:	d0e71117 	ldw	r3,-25532(gp)
    ddd0:	d1271217 	ldw	r4,-25528(gp)
    ddd4:	200d883a 	mov	r6,r4
    ddd8:	180b883a 	mov	r5,r3
    dddc:	1009883a 	mov	r4,r2
    dde0:	00004640 	call	464 <main>
    dde4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dde8:	01000044 	movi	r4,1
    ddec:	000d6e80 	call	d6e8 <close>
  exit (result);
    ddf0:	e13fff17 	ldw	r4,-4(fp)
    ddf4:	001088c0 	call	1088c <exit>

0000ddf8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ddf8:	defffe04 	addi	sp,sp,-8
    ddfc:	df000115 	stw	fp,4(sp)
    de00:	df000104 	addi	fp,sp,4
    de04:	e13fff15 	stw	r4,-4(fp)
}
    de08:	0001883a 	nop
    de0c:	e037883a 	mov	sp,fp
    de10:	df000017 	ldw	fp,0(sp)
    de14:	dec00104 	addi	sp,sp,4
    de18:	f800283a 	ret

0000de1c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    de1c:	defffe04 	addi	sp,sp,-8
    de20:	df000115 	stw	fp,4(sp)
    de24:	df000104 	addi	fp,sp,4
    de28:	e13fff15 	stw	r4,-4(fp)
}
    de2c:	0001883a 	nop
    de30:	e037883a 	mov	sp,fp
    de34:	df000017 	ldw	fp,0(sp)
    de38:	dec00104 	addi	sp,sp,4
    de3c:	f800283a 	ret

0000de40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de40:	defffe04 	addi	sp,sp,-8
    de44:	dfc00115 	stw	ra,4(sp)
    de48:	df000015 	stw	fp,0(sp)
    de4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de50:	d0a00f17 	ldw	r2,-32708(gp)
    de54:	10000326 	beq	r2,zero,de64 <alt_get_errno+0x24>
    de58:	d0a00f17 	ldw	r2,-32708(gp)
    de5c:	103ee83a 	callr	r2
    de60:	00000106 	br	de68 <alt_get_errno+0x28>
    de64:	d0a70c04 	addi	r2,gp,-25552
}
    de68:	e037883a 	mov	sp,fp
    de6c:	dfc00117 	ldw	ra,4(sp)
    de70:	df000017 	ldw	fp,0(sp)
    de74:	dec00204 	addi	sp,sp,8
    de78:	f800283a 	ret

0000de7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    de7c:	defff904 	addi	sp,sp,-28
    de80:	dfc00615 	stw	ra,24(sp)
    de84:	df000515 	stw	fp,20(sp)
    de88:	df000504 	addi	fp,sp,20
    de8c:	e13ffd15 	stw	r4,-12(fp)
    de90:	e17ffe15 	stw	r5,-8(fp)
    de94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de98:	e0bffd17 	ldw	r2,-12(fp)
    de9c:	10000816 	blt	r2,zero,dec0 <read+0x44>
    dea0:	01400304 	movi	r5,12
    dea4:	e13ffd17 	ldw	r4,-12(fp)
    dea8:	00009780 	call	978 <__mulsi3>
    deac:	1007883a 	mov	r3,r2
    deb0:	00800074 	movhi	r2,1
    deb4:	10860404 	addi	r2,r2,6160
    deb8:	1885883a 	add	r2,r3,r2
    debc:	00000106 	br	dec4 <read+0x48>
    dec0:	0005883a 	mov	r2,zero
    dec4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dec8:	e0bffb17 	ldw	r2,-20(fp)
    decc:	10002226 	beq	r2,zero,df58 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ded0:	e0bffb17 	ldw	r2,-20(fp)
    ded4:	10800217 	ldw	r2,8(r2)
    ded8:	108000cc 	andi	r2,r2,3
    dedc:	10800060 	cmpeqi	r2,r2,1
    dee0:	1000181e 	bne	r2,zero,df44 <read+0xc8>
        (fd->dev->read))
    dee4:	e0bffb17 	ldw	r2,-20(fp)
    dee8:	10800017 	ldw	r2,0(r2)
    deec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    def0:	10001426 	beq	r2,zero,df44 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    def4:	e0bffb17 	ldw	r2,-20(fp)
    def8:	10800017 	ldw	r2,0(r2)
    defc:	10800517 	ldw	r2,20(r2)
    df00:	e0ffff17 	ldw	r3,-4(fp)
    df04:	180d883a 	mov	r6,r3
    df08:	e17ffe17 	ldw	r5,-8(fp)
    df0c:	e13ffb17 	ldw	r4,-20(fp)
    df10:	103ee83a 	callr	r2
    df14:	e0bffc15 	stw	r2,-16(fp)
    df18:	e0bffc17 	ldw	r2,-16(fp)
    df1c:	1000070e 	bge	r2,zero,df3c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    df20:	000de400 	call	de40 <alt_get_errno>
    df24:	1007883a 	mov	r3,r2
    df28:	e0bffc17 	ldw	r2,-16(fp)
    df2c:	0085c83a 	sub	r2,zero,r2
    df30:	18800015 	stw	r2,0(r3)
          return -1;
    df34:	00bfffc4 	movi	r2,-1
    df38:	00000c06 	br	df6c <read+0xf0>
        }
        return rval;
    df3c:	e0bffc17 	ldw	r2,-16(fp)
    df40:	00000a06 	br	df6c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    df44:	000de400 	call	de40 <alt_get_errno>
    df48:	1007883a 	mov	r3,r2
    df4c:	00800344 	movi	r2,13
    df50:	18800015 	stw	r2,0(r3)
    df54:	00000406 	br	df68 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    df58:	000de400 	call	de40 <alt_get_errno>
    df5c:	1007883a 	mov	r3,r2
    df60:	00801444 	movi	r2,81
    df64:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df68:	00bfffc4 	movi	r2,-1
}
    df6c:	e037883a 	mov	sp,fp
    df70:	dfc00117 	ldw	ra,4(sp)
    df74:	df000017 	ldw	fp,0(sp)
    df78:	dec00204 	addi	sp,sp,8
    df7c:	f800283a 	ret

0000df80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    df80:	defffc04 	addi	sp,sp,-16
    df84:	dfc00315 	stw	ra,12(sp)
    df88:	df000215 	stw	fp,8(sp)
    df8c:	dc000115 	stw	r16,4(sp)
    df90:	df000204 	addi	fp,sp,8
    df94:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    df98:	e0bffe17 	ldw	r2,-8(fp)
    df9c:	108000d0 	cmplti	r2,r2,3
    dfa0:	1000111e 	bne	r2,zero,dfe8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    dfa4:	04000074 	movhi	r16,1
    dfa8:	84060404 	addi	r16,r16,6160
    dfac:	e0bffe17 	ldw	r2,-8(fp)
    dfb0:	01400304 	movi	r5,12
    dfb4:	1009883a 	mov	r4,r2
    dfb8:	00009780 	call	978 <__mulsi3>
    dfbc:	8085883a 	add	r2,r16,r2
    dfc0:	10800204 	addi	r2,r2,8
    dfc4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dfc8:	04000074 	movhi	r16,1
    dfcc:	84060404 	addi	r16,r16,6160
    dfd0:	e0bffe17 	ldw	r2,-8(fp)
    dfd4:	01400304 	movi	r5,12
    dfd8:	1009883a 	mov	r4,r2
    dfdc:	00009780 	call	978 <__mulsi3>
    dfe0:	8085883a 	add	r2,r16,r2
    dfe4:	10000015 	stw	zero,0(r2)
  }
}
    dfe8:	0001883a 	nop
    dfec:	e6ffff04 	addi	sp,fp,-4
    dff0:	dfc00217 	ldw	ra,8(sp)
    dff4:	df000117 	ldw	fp,4(sp)
    dff8:	dc000017 	ldw	r16,0(sp)
    dffc:	dec00304 	addi	sp,sp,12
    e000:	f800283a 	ret

0000e004 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e004:	defff904 	addi	sp,sp,-28
    e008:	df000615 	stw	fp,24(sp)
    e00c:	df000604 	addi	fp,sp,24
    e010:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e014:	0005303a 	rdctl	r2,status
    e018:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e01c:	e0fffe17 	ldw	r3,-8(fp)
    e020:	00bfff84 	movi	r2,-2
    e024:	1884703a 	and	r2,r3,r2
    e028:	1001703a 	wrctl	status,r2
  
  return context;
    e02c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e030:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e034:	d0a01017 	ldw	r2,-32704(gp)
    e038:	10c000c4 	addi	r3,r2,3
    e03c:	00bfff04 	movi	r2,-4
    e040:	1884703a 	and	r2,r3,r2
    e044:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e048:	d0e01017 	ldw	r3,-32704(gp)
    e04c:	e0bfff17 	ldw	r2,-4(fp)
    e050:	1887883a 	add	r3,r3,r2
    e054:	00820034 	movhi	r2,2048
    e058:	10bf0004 	addi	r2,r2,-1024
    e05c:	10c0062e 	bgeu	r2,r3,e078 <sbrk+0x74>
    e060:	e0bffb17 	ldw	r2,-20(fp)
    e064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e068:	e0bffa17 	ldw	r2,-24(fp)
    e06c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e070:	00bfffc4 	movi	r2,-1
    e074:	00000b06 	br	e0a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e078:	d0a01017 	ldw	r2,-32704(gp)
    e07c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e080:	d0e01017 	ldw	r3,-32704(gp)
    e084:	e0bfff17 	ldw	r2,-4(fp)
    e088:	1885883a 	add	r2,r3,r2
    e08c:	d0a01015 	stw	r2,-32704(gp)
    e090:	e0bffb17 	ldw	r2,-20(fp)
    e094:	e0bffc15 	stw	r2,-16(fp)
    e098:	e0bffc17 	ldw	r2,-16(fp)
    e09c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e0a0:	e0bffd17 	ldw	r2,-12(fp)
} 
    e0a4:	e037883a 	mov	sp,fp
    e0a8:	df000017 	ldw	fp,0(sp)
    e0ac:	dec00104 	addi	sp,sp,4
    e0b0:	f800283a 	ret

0000e0b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0b4:	defffe04 	addi	sp,sp,-8
    e0b8:	dfc00115 	stw	ra,4(sp)
    e0bc:	df000015 	stw	fp,0(sp)
    e0c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e0c4:	d0a00f17 	ldw	r2,-32708(gp)
    e0c8:	10000326 	beq	r2,zero,e0d8 <alt_get_errno+0x24>
    e0cc:	d0a00f17 	ldw	r2,-32708(gp)
    e0d0:	103ee83a 	callr	r2
    e0d4:	00000106 	br	e0dc <alt_get_errno+0x28>
    e0d8:	d0a70c04 	addi	r2,gp,-25552
}
    e0dc:	e037883a 	mov	sp,fp
    e0e0:	dfc00117 	ldw	ra,4(sp)
    e0e4:	df000017 	ldw	fp,0(sp)
    e0e8:	dec00204 	addi	sp,sp,8
    e0ec:	f800283a 	ret

0000e0f0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    e0f0:	defffc04 	addi	sp,sp,-16
    e0f4:	dfc00315 	stw	ra,12(sp)
    e0f8:	df000215 	stw	fp,8(sp)
    e0fc:	df000204 	addi	fp,sp,8
    e100:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e104:	d0a71517 	ldw	r2,-25516(gp)
  clock_t ticks = alt_nticks(); 
    e108:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e10c:	d0a71417 	ldw	r2,-25520(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    e110:	1000061e 	bne	r2,zero,e12c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
    e114:	000e0b40 	call	e0b4 <alt_get_errno>
    e118:	1007883a 	mov	r3,r2
    e11c:	00801604 	movi	r2,88
    e120:	18800015 	stw	r2,0(r3)
    return 0;
    e124:	0005883a 	mov	r2,zero
    e128:	00000a06 	br	e154 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    e12c:	e0bfff17 	ldw	r2,-4(fp)
    e130:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
    e134:	e0bfff17 	ldw	r2,-4(fp)
    e138:	e0fffe17 	ldw	r3,-8(fp)
    e13c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
    e140:	e0bfff17 	ldw	r2,-4(fp)
    e144:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
    e148:	e0bfff17 	ldw	r2,-4(fp)
    e14c:	10000315 	stw	zero,12(r2)

  return ticks;
    e150:	e0bffe17 	ldw	r2,-8(fp)
}
    e154:	e037883a 	mov	sp,fp
    e158:	dfc00117 	ldw	ra,4(sp)
    e15c:	df000017 	ldw	fp,0(sp)
    e160:	dec00204 	addi	sp,sp,8
    e164:	f800283a 	ret

0000e168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e168:	defffe04 	addi	sp,sp,-8
    e16c:	dfc00115 	stw	ra,4(sp)
    e170:	df000015 	stw	fp,0(sp)
    e174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e178:	d0a00f17 	ldw	r2,-32708(gp)
    e17c:	10000326 	beq	r2,zero,e18c <alt_get_errno+0x24>
    e180:	d0a00f17 	ldw	r2,-32708(gp)
    e184:	103ee83a 	callr	r2
    e188:	00000106 	br	e190 <alt_get_errno+0x28>
    e18c:	d0a70c04 	addi	r2,gp,-25552
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e1a4:	defff904 	addi	sp,sp,-28
    e1a8:	dfc00615 	stw	ra,24(sp)
    e1ac:	df000515 	stw	fp,20(sp)
    e1b0:	df000504 	addi	fp,sp,20
    e1b4:	e13ffd15 	stw	r4,-12(fp)
    e1b8:	e17ffe15 	stw	r5,-8(fp)
    e1bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1c0:	e0bffd17 	ldw	r2,-12(fp)
    e1c4:	10000816 	blt	r2,zero,e1e8 <write+0x44>
    e1c8:	01400304 	movi	r5,12
    e1cc:	e13ffd17 	ldw	r4,-12(fp)
    e1d0:	00009780 	call	978 <__mulsi3>
    e1d4:	1007883a 	mov	r3,r2
    e1d8:	00800074 	movhi	r2,1
    e1dc:	10860404 	addi	r2,r2,6160
    e1e0:	1885883a 	add	r2,r3,r2
    e1e4:	00000106 	br	e1ec <write+0x48>
    e1e8:	0005883a 	mov	r2,zero
    e1ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e1f0:	e0bffb17 	ldw	r2,-20(fp)
    e1f4:	10002126 	beq	r2,zero,e27c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e1f8:	e0bffb17 	ldw	r2,-20(fp)
    e1fc:	10800217 	ldw	r2,8(r2)
    e200:	108000cc 	andi	r2,r2,3
    e204:	10001826 	beq	r2,zero,e268 <write+0xc4>
    e208:	e0bffb17 	ldw	r2,-20(fp)
    e20c:	10800017 	ldw	r2,0(r2)
    e210:	10800617 	ldw	r2,24(r2)
    e214:	10001426 	beq	r2,zero,e268 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e218:	e0bffb17 	ldw	r2,-20(fp)
    e21c:	10800017 	ldw	r2,0(r2)
    e220:	10800617 	ldw	r2,24(r2)
    e224:	e0ffff17 	ldw	r3,-4(fp)
    e228:	180d883a 	mov	r6,r3
    e22c:	e17ffe17 	ldw	r5,-8(fp)
    e230:	e13ffb17 	ldw	r4,-20(fp)
    e234:	103ee83a 	callr	r2
    e238:	e0bffc15 	stw	r2,-16(fp)
    e23c:	e0bffc17 	ldw	r2,-16(fp)
    e240:	1000070e 	bge	r2,zero,e260 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e244:	000e1680 	call	e168 <alt_get_errno>
    e248:	1007883a 	mov	r3,r2
    e24c:	e0bffc17 	ldw	r2,-16(fp)
    e250:	0085c83a 	sub	r2,zero,r2
    e254:	18800015 	stw	r2,0(r3)
        return -1;
    e258:	00bfffc4 	movi	r2,-1
    e25c:	00000c06 	br	e290 <write+0xec>
      }
      return rval;
    e260:	e0bffc17 	ldw	r2,-16(fp)
    e264:	00000a06 	br	e290 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e268:	000e1680 	call	e168 <alt_get_errno>
    e26c:	1007883a 	mov	r3,r2
    e270:	00800344 	movi	r2,13
    e274:	18800015 	stw	r2,0(r3)
    e278:	00000406 	br	e28c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e27c:	000e1680 	call	e168 <alt_get_errno>
    e280:	1007883a 	mov	r3,r2
    e284:	00801444 	movi	r2,81
    e288:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e28c:	00bfffc4 	movi	r2,-1
}
    e290:	e037883a 	mov	sp,fp
    e294:	dfc00117 	ldw	ra,4(sp)
    e298:	df000017 	ldw	fp,0(sp)
    e29c:	dec00204 	addi	sp,sp,8
    e2a0:	f800283a 	ret

0000e2a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e2a4:	defffd04 	addi	sp,sp,-12
    e2a8:	dfc00215 	stw	ra,8(sp)
    e2ac:	df000115 	stw	fp,4(sp)
    e2b0:	df000104 	addi	fp,sp,4
    e2b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e2b8:	d1600804 	addi	r5,gp,-32736
    e2bc:	e13fff17 	ldw	r4,-4(fp)
    e2c0:	000fc400 	call	fc40 <alt_dev_llist_insert>
}
    e2c4:	e037883a 	mov	sp,fp
    e2c8:	dfc00117 	ldw	ra,4(sp)
    e2cc:	df000017 	ldw	fp,0(sp)
    e2d0:	dec00204 	addi	sp,sp,8
    e2d4:	f800283a 	ret

0000e2d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e2d8:	defffd04 	addi	sp,sp,-12
    e2dc:	dfc00215 	stw	ra,8(sp)
    e2e0:	df000115 	stw	fp,4(sp)
    e2e4:	df000104 	addi	fp,sp,4
    e2e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    e2ec:	00105ec0 	call	105ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e2f0:	00800044 	movi	r2,1
    e2f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e2f8:	0001883a 	nop
    e2fc:	e037883a 	mov	sp,fp
    e300:	dfc00117 	ldw	ra,4(sp)
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00204 	addi	sp,sp,8
    e30c:	f800283a 	ret

0000e310 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e310:	defffd04 	addi	sp,sp,-12
    e314:	dfc00215 	stw	ra,8(sp)
    e318:	df000115 	stw	fp,4(sp)
    e31c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    e320:	01c0fa04 	movi	r7,1000
    e324:	01800044 	movi	r6,1
    e328:	000b883a 	mov	r5,zero
    e32c:	01020034 	movhi	r4,2048
    e330:	210c1804 	addi	r4,r4,12384
    e334:	000fa3c0 	call	fa3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
    e338:	00800084 	movi	r2,2
    e33c:	d8800015 	stw	r2,0(sp)
    e340:	000f883a 	mov	r7,zero
    e344:	01820034 	movhi	r6,2048
    e348:	318c1004 	addi	r6,r6,12352
    e34c:	01400074 	movhi	r5,1
    e350:	29469404 	addi	r5,r5,6736
    e354:	01000074 	movhi	r4,1
    e358:	21068d04 	addi	r4,r4,6708
    e35c:	000eea80 	call	eea8 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e360:	000d883a 	mov	r6,zero
    e364:	000b883a 	mov	r5,zero
    e368:	01000074 	movhi	r4,1
    e36c:	2106a504 	addi	r4,r4,6804
    e370:	000f0c00 	call	f0c0 <altera_avalon_jtag_uart_init>
    e374:	01000074 	movhi	r4,1
    e378:	21069b04 	addi	r4,r4,6764
    e37c:	000e2a40 	call	e2a4 <alt_dev_reg>
}
    e380:	0001883a 	nop
    e384:	e037883a 	mov	sp,fp
    e388:	dfc00117 	ldw	ra,4(sp)
    e38c:	df000017 	ldw	fp,0(sp)
    e390:	dec00204 	addi	sp,sp,8
    e394:	f800283a 	ret

0000e398 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
    e398:	defffd04 	addi	sp,sp,-12
    e39c:	dfc00215 	stw	ra,8(sp)
    e3a0:	df000115 	stw	fp,4(sp)
    e3a4:	df000104 	addi	fp,sp,4
    e3a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
    e3ac:	d1600d04 	addi	r5,gp,-32716
    e3b0:	e13fff17 	ldw	r4,-4(fp)
    e3b4:	000fc400 	call	fc40 <alt_dev_llist_insert>
}
    e3b8:	e037883a 	mov	sp,fp
    e3bc:	dfc00117 	ldw	ra,4(sp)
    e3c0:	df000017 	ldw	fp,0(sp)
    e3c4:	dec00204 	addi	sp,sp,8
    e3c8:	f800283a 	ret

0000e3cc <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
    e3cc:	defffd04 	addi	sp,sp,-12
    e3d0:	dfc00215 	stw	ra,8(sp)
    e3d4:	df000115 	stw	fp,4(sp)
    e3d8:	df000104 	addi	fp,sp,4
    e3dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
    e3e0:	d1600b04 	addi	r5,gp,-32724
    e3e4:	e13fff17 	ldw	r4,-4(fp)
    e3e8:	000fc400 	call	fc40 <alt_dev_llist_insert>
}
    e3ec:	e037883a 	mov	sp,fp
    e3f0:	dfc00117 	ldw	ra,4(sp)
    e3f4:	df000017 	ldw	fp,0(sp)
    e3f8:	dec00204 	addi	sp,sp,8
    e3fc:	f800283a 	ret

0000e400 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
    e400:	defffc04 	addi	sp,sp,-16
    e404:	df000315 	stw	fp,12(sp)
    e408:	df000304 	addi	fp,sp,12
    e40c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    e410:	e0bfff17 	ldw	r2,-4(fp)
    e414:	10c00117 	ldw	r3,4(r2)
    e418:	e0bfff17 	ldw	r2,-4(fp)
    e41c:	10800217 	ldw	r2,8(r2)
    e420:	18802e26 	beq	r3,r2,e4dc <alt_avalon_dma_launch_bidir+0xdc>
    e424:	e0bfff17 	ldw	r2,-4(fp)
    e428:	10c00317 	ldw	r3,12(r2)
    e42c:	e0bfff17 	ldw	r2,-4(fp)
    e430:	10800417 	ldw	r2,16(r2)
    e434:	18802926 	beq	r3,r2,e4dc <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
    e438:	e0bfff17 	ldw	r2,-4(fp)
    e43c:	00c00044 	movi	r3,1
    e440:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
    e444:	e0bfff17 	ldw	r2,-4(fp)
    e448:	10800117 	ldw	r2,4(r2)
    e44c:	1004913a 	slli	r2,r2,4
    e450:	10800904 	addi	r2,r2,36
    e454:	e0ffff17 	ldw	r3,-4(fp)
    e458:	1885883a 	add	r2,r3,r2
    e45c:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
    e460:	e0bfff17 	ldw	r2,-4(fp)
    e464:	10800317 	ldw	r2,12(r2)
    e468:	1004913a 	slli	r2,r2,4
    e46c:	10801904 	addi	r2,r2,100
    e470:	e0ffff17 	ldw	r3,-4(fp)
    e474:	1885883a 	add	r2,r3,r2
    e478:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    e47c:	e0bfff17 	ldw	r2,-4(fp)
    e480:	10800017 	ldw	r2,0(r2)
    e484:	10800104 	addi	r2,r2,4
    e488:	e0fffd17 	ldw	r3,-12(fp)
    e48c:	18c00017 	ldw	r3,0(r3)
    e490:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    e494:	e0bfff17 	ldw	r2,-4(fp)
    e498:	10800017 	ldw	r2,0(r2)
    e49c:	10800204 	addi	r2,r2,8
    e4a0:	e0fffe17 	ldw	r3,-8(fp)
    e4a4:	18c00017 	ldw	r3,0(r3)
    e4a8:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
    e4ac:	e0bfff17 	ldw	r2,-4(fp)
    e4b0:	10800017 	ldw	r2,0(r2)
    e4b4:	11000304 	addi	r4,r2,12
    e4b8:	e0bffd17 	ldw	r2,-12(fp)
    e4bc:	11400117 	ldw	r5,4(r2)
    e4c0:	e0bffe17 	ldw	r2,-8(fp)
    e4c4:	10c00117 	ldw	r3,4(r2)
    e4c8:	2805883a 	mov	r2,r5
    e4cc:	1880012e 	bgeu	r3,r2,e4d4 <alt_avalon_dma_launch_bidir+0xd4>
    e4d0:	1805883a 	mov	r2,r3
    e4d4:	20800035 	stwio	r2,0(r4)
    e4d8:	00000206 	br	e4e4 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
    e4dc:	e0bfff17 	ldw	r2,-4(fp)
    e4e0:	10000815 	stw	zero,32(r2)
  }
}
    e4e4:	0001883a 	nop
    e4e8:	e037883a 	mov	sp,fp
    e4ec:	df000017 	ldw	fp,0(sp)
    e4f0:	dec00104 	addi	sp,sp,4
    e4f4:	f800283a 	ret

0000e4f8 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
    e4f8:	defffd04 	addi	sp,sp,-12
    e4fc:	df000215 	stw	fp,8(sp)
    e500:	df000204 	addi	fp,sp,8
    e504:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
    e508:	e0bfff17 	ldw	r2,-4(fp)
    e50c:	10c00117 	ldw	r3,4(r2)
    e510:	e0bfff17 	ldw	r2,-4(fp)
    e514:	10800217 	ldw	r2,8(r2)
    e518:	18801726 	beq	r3,r2,e578 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
    e51c:	e0bfff17 	ldw	r2,-4(fp)
    e520:	00c00044 	movi	r3,1
    e524:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
    e528:	e0bfff17 	ldw	r2,-4(fp)
    e52c:	10800117 	ldw	r2,4(r2)
    e530:	1004913a 	slli	r2,r2,4
    e534:	10800904 	addi	r2,r2,36
    e538:	e0ffff17 	ldw	r3,-4(fp)
    e53c:	1885883a 	add	r2,r3,r2
    e540:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    e544:	e0bfff17 	ldw	r2,-4(fp)
    e548:	10800017 	ldw	r2,0(r2)
    e54c:	10800104 	addi	r2,r2,4
    e550:	e0fffe17 	ldw	r3,-8(fp)
    e554:	18c00017 	ldw	r3,0(r3)
    e558:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
    e55c:	e0bfff17 	ldw	r2,-4(fp)
    e560:	10800017 	ldw	r2,0(r2)
    e564:	10800304 	addi	r2,r2,12
    e568:	e0fffe17 	ldw	r3,-8(fp)
    e56c:	18c00117 	ldw	r3,4(r3)
    e570:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    e574:	00000206 	br	e580 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
    e578:	e0bfff17 	ldw	r2,-4(fp)
    e57c:	10000815 	stw	zero,32(r2)
  }
}
    e580:	0001883a 	nop
    e584:	e037883a 	mov	sp,fp
    e588:	df000017 	ldw	fp,0(sp)
    e58c:	dec00104 	addi	sp,sp,4
    e590:	f800283a 	ret

0000e594 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
    e594:	defffd04 	addi	sp,sp,-12
    e598:	df000215 	stw	fp,8(sp)
    e59c:	df000204 	addi	fp,sp,8
    e5a0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	10c00317 	ldw	r3,12(r2)
    e5ac:	e0bfff17 	ldw	r2,-4(fp)
    e5b0:	10800417 	ldw	r2,16(r2)
    e5b4:	18801726 	beq	r3,r2,e614 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
    e5b8:	e0bfff17 	ldw	r2,-4(fp)
    e5bc:	00c00044 	movi	r3,1
    e5c0:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
    e5c4:	e0bfff17 	ldw	r2,-4(fp)
    e5c8:	10800317 	ldw	r2,12(r2)
    e5cc:	1004913a 	slli	r2,r2,4
    e5d0:	10801904 	addi	r2,r2,100
    e5d4:	e0ffff17 	ldw	r3,-4(fp)
    e5d8:	1885883a 	add	r2,r3,r2
    e5dc:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    e5e0:	e0bfff17 	ldw	r2,-4(fp)
    e5e4:	10800017 	ldw	r2,0(r2)
    e5e8:	10800204 	addi	r2,r2,8
    e5ec:	e0fffe17 	ldw	r3,-8(fp)
    e5f0:	18c00017 	ldw	r3,0(r3)
    e5f4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
    e5f8:	e0bfff17 	ldw	r2,-4(fp)
    e5fc:	10800017 	ldw	r2,0(r2)
    e600:	10800304 	addi	r2,r2,12
    e604:	e0fffe17 	ldw	r3,-8(fp)
    e608:	18c00117 	ldw	r3,4(r3)
    e60c:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    e610:	00000206 	br	e61c <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
    e614:	e0bfff17 	ldw	r2,-4(fp)
    e618:	10000815 	stw	zero,32(r2)
  }
}
    e61c:	0001883a 	nop
    e620:	e037883a 	mov	sp,fp
    e624:	df000017 	ldw	fp,0(sp)
    e628:	dec00104 	addi	sp,sp,4
    e62c:	f800283a 	ret

0000e630 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
    e630:	defffa04 	addi	sp,sp,-24
    e634:	df000515 	stw	fp,20(sp)
    e638:	df000504 	addi	fp,sp,20
    e63c:	e13ffd15 	stw	r4,-12(fp)
    e640:	e17ffe15 	stw	r5,-8(fp)
    e644:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
    e648:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    e64c:	e0bffd17 	ldw	r2,-12(fp)
    e650:	10c00117 	ldw	r3,4(r2)
    e654:	e0bffd17 	ldw	r2,-12(fp)
    e658:	10800217 	ldw	r2,8(r2)
    e65c:	18800a1e 	bne	r3,r2,e688 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
    e660:	e0bffd17 	ldw	r2,-12(fp)
    e664:	10c00317 	ldw	r3,12(r2)
    e668:	e0bffd17 	ldw	r2,-12(fp)
    e66c:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    e670:	1880051e 	bne	r3,r2,e688 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
    e674:	e0bffd17 	ldw	r2,-12(fp)
    e678:	10800017 	ldw	r2,0(r2)
    e67c:	10800304 	addi	r2,r2,12
    e680:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
    e684:	10000226 	beq	r2,zero,e690 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
    e688:	00bffec4 	movi	r2,-5
    e68c:	0000b506 	br	e964 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
    e690:	e0bffe17 	ldw	r2,-8(fp)
    e694:	108002a8 	cmpgeui	r2,r2,10
    e698:	1000781e 	bne	r2,zero,e87c <alt_avalon_dma_ioctl+0x24c>
    e69c:	e0bffe17 	ldw	r2,-8(fp)
    e6a0:	100690ba 	slli	r3,r2,2
    e6a4:	00800074 	movhi	r2,1
    e6a8:	10b9ae04 	addi	r2,r2,-6472
    e6ac:	1885883a 	add	r2,r3,r2
    e6b0:	10800017 	ldw	r2,0(r2)
    e6b4:	1000683a 	jmp	r2
    e6b8:	0000e87c 	xorhi	zero,zero,929
    e6bc:	0000e6e0 	cmpeqi	zero,zero,923
    e6c0:	0000e738 	rdprs	zero,zero,924
    e6c4:	0000e764 	muli	zero,zero,925
    e6c8:	0000e7bc 	xorhi	zero,zero,926
    e6cc:	0000e7e8 	cmpgeui	zero,zero,927
    e6d0:	0000e804 	movi	zero,928
    e6d4:	0000e824 	muli	zero,zero,928
    e6d8:	0000e844 	movi	zero,929
    e6dc:	0000e864 	muli	zero,zero,929
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10800517 	ldw	r2,20(r2)
    e6e8:	1080100c 	andi	r2,r2,64
    e6ec:	10000f1e 	bne	r2,zero,e72c <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
    e6f0:	e0bffd17 	ldw	r2,-12(fp)
    e6f4:	10800017 	ldw	r2,0(r2)
    e6f8:	10800104 	addi	r2,r2,4
    e6fc:	e0ffff17 	ldw	r3,-4(fp)
    e700:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
    e704:	e0bffd17 	ldw	r2,-12(fp)
    e708:	10800517 	ldw	r2,20(r2)
    e70c:	10c00814 	ori	r3,r2,32
    e710:	e0bffd17 	ldw	r2,-12(fp)
    e714:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
    e718:	e0fffd17 	ldw	r3,-12(fp)
    e71c:	00800074 	movhi	r2,1
    e720:	10b96504 	addi	r2,r2,-6764
    e724:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    e728:	00005606 	br	e884 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
    e72c:	00bffec4 	movi	r2,-5
    e730:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    e734:	00005306 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
    e738:	e0bffd17 	ldw	r2,-12(fp)
    e73c:	10c00517 	ldw	r3,20(r2)
    e740:	00bff7c4 	movi	r2,-33
    e744:	1886703a 	and	r3,r3,r2
    e748:	e0bffd17 	ldw	r2,-12(fp)
    e74c:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    e750:	e0fffd17 	ldw	r3,-12(fp)
    e754:	00800074 	movhi	r2,1
    e758:	10b90004 	addi	r2,r2,-7168
    e75c:	18800715 	stw	r2,28(r3)
    break;
    e760:	00004806 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    e764:	e0bffd17 	ldw	r2,-12(fp)
    e768:	10800517 	ldw	r2,20(r2)
    e76c:	1080080c 	andi	r2,r2,32
    e770:	10000f1e 	bne	r2,zero,e7b0 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
    e774:	e0bffd17 	ldw	r2,-12(fp)
    e778:	10800017 	ldw	r2,0(r2)
    e77c:	10800204 	addi	r2,r2,8
    e780:	e0ffff17 	ldw	r3,-4(fp)
    e784:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
    e788:	e0bffd17 	ldw	r2,-12(fp)
    e78c:	10800517 	ldw	r2,20(r2)
    e790:	10c01014 	ori	r3,r2,64
    e794:	e0bffd17 	ldw	r2,-12(fp)
    e798:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
    e79c:	e0fffd17 	ldw	r3,-12(fp)
    e7a0:	00800074 	movhi	r2,1
    e7a4:	10b93e04 	addi	r2,r2,-6920
    e7a8:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    e7ac:	00003506 	br	e884 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
    e7b0:	00bffec4 	movi	r2,-5
    e7b4:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    e7b8:	00003206 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
    e7c0:	10c00517 	ldw	r3,20(r2)
    e7c4:	00bfefc4 	movi	r2,-65
    e7c8:	1886703a 	and	r3,r3,r2
    e7cc:	e0bffd17 	ldw	r2,-12(fp)
    e7d0:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    e7d4:	e0fffd17 	ldw	r3,-12(fp)
    e7d8:	00800074 	movhi	r2,1
    e7dc:	10b90004 	addi	r2,r2,-7168
    e7e0:	18800715 	stw	r2,28(r3)
    break;
    e7e4:	00002706 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    e7e8:	e0bffd17 	ldw	r2,-12(fp)
    e7ec:	10c00517 	ldw	r3,20(r2)
    e7f0:	00bffc04 	movi	r2,-16
    e7f4:	1886703a 	and	r3,r3,r2
    e7f8:	e0bffd17 	ldw	r2,-12(fp)
    e7fc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
    e800:	00002006 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	10c00517 	ldw	r3,20(r2)
    e80c:	00bffc04 	movi	r2,-16
    e810:	1884703a 	and	r2,r3,r2
    e814:	10c00054 	ori	r3,r2,1
    e818:	e0bffd17 	ldw	r2,-12(fp)
    e81c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
    e820:	00001806 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    e824:	e0bffd17 	ldw	r2,-12(fp)
    e828:	10c00517 	ldw	r3,20(r2)
    e82c:	00bffc04 	movi	r2,-16
    e830:	1884703a 	and	r2,r3,r2
    e834:	10c000d4 	ori	r3,r2,3
    e838:	e0bffd17 	ldw	r2,-12(fp)
    e83c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
    e840:	00001006 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    e844:	e0bffd17 	ldw	r2,-12(fp)
    e848:	10c00517 	ldw	r3,20(r2)
    e84c:	00bffc04 	movi	r2,-16
    e850:	1884703a 	and	r2,r3,r2
    e854:	10c001d4 	ori	r3,r2,7
    e858:	e0bffd17 	ldw	r2,-12(fp)
    e85c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
    e860:	00000806 	br	e884 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    e864:	e0bffd17 	ldw	r2,-12(fp)
    e868:	10800517 	ldw	r2,20(r2)
    e86c:	10c003d4 	ori	r3,r2,15
    e870:	e0bffd17 	ldw	r2,-12(fp)
    e874:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
    e878:	00000206 	br	e884 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
    e87c:	00bff9c4 	movi	r2,-25
    e880:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
    e884:	e0bffb17 	ldw	r2,-20(fp)
    e888:	1000351e 	bne	r2,zero,e960 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    e88c:	e0bffd17 	ldw	r2,-12(fp)
    e890:	10800517 	ldw	r2,20(r2)
    e894:	108003cc 	andi	r2,r2,15
    e898:	10c00060 	cmpeqi	r3,r2,1
    e89c:	1800091e 	bne	r3,zero,e8c4 <alt_avalon_dma_ioctl+0x294>
    e8a0:	0080052e 	bgeu	zero,r2,e8b8 <alt_avalon_dma_ioctl+0x288>
    e8a4:	10c000e0 	cmpeqi	r3,r2,3
    e8a8:	1800091e 	bne	r3,zero,e8d0 <alt_avalon_dma_ioctl+0x2a0>
    e8ac:	108001e0 	cmpeqi	r2,r2,7
    e8b0:	10000a1e 	bne	r2,zero,e8dc <alt_avalon_dma_ioctl+0x2ac>
    e8b4:	00000c06 	br	e8e8 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
    e8b8:	00800044 	movi	r2,1
    e8bc:	e0bffc15 	stw	r2,-16(fp)
       break;
    e8c0:	00000b06 	br	e8f0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
    e8c4:	00800084 	movi	r2,2
    e8c8:	e0bffc15 	stw	r2,-16(fp)
       break;
    e8cc:	00000806 	br	e8f0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
    e8d0:	00800104 	movi	r2,4
    e8d4:	e0bffc15 	stw	r2,-16(fp)
       break;
    e8d8:	00000506 	br	e8f0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
    e8dc:	00810004 	movi	r2,1024
    e8e0:	e0bffc15 	stw	r2,-16(fp)
       break;
    e8e4:	00000206 	br	e8f0 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
    e8e8:	00820004 	movi	r2,2048
    e8ec:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
    e8f0:	e0bffd17 	ldw	r2,-12(fp)
    e8f4:	10800517 	ldw	r2,20(r2)
    e8f8:	1080080c 	andi	r2,r2,32
    e8fc:	10000726 	beq	r2,zero,e91c <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e900:	e0bffd17 	ldw	r2,-12(fp)
    e904:	10800017 	ldw	r2,0(r2)
    e908:	10800604 	addi	r2,r2,24
    e90c:	e0fffc17 	ldw	r3,-16(fp)
    e910:	18c07e14 	ori	r3,r3,504
    e914:	10c00035 	stwio	r3,0(r2)
    e918:	00001106 	br	e960 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
    e91c:	e0bffd17 	ldw	r2,-12(fp)
    e920:	10800517 	ldw	r2,20(r2)
    e924:	1080100c 	andi	r2,r2,64
    e928:	10000726 	beq	r2,zero,e948 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e92c:	e0bffd17 	ldw	r2,-12(fp)
    e930:	10800017 	ldw	r2,0(r2)
    e934:	10800604 	addi	r2,r2,24
    e938:	e0fffc17 	ldw	r3,-16(fp)
    e93c:	18c0be14 	ori	r3,r3,760
    e940:	10c00035 	stwio	r3,0(r2)
    e944:	00000606 	br	e960 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e948:	e0bffd17 	ldw	r2,-12(fp)
    e94c:	10800017 	ldw	r2,0(r2)
    e950:	10800604 	addi	r2,r2,24
    e954:	e0fffc17 	ldw	r3,-16(fp)
    e958:	18c03e14 	ori	r3,r3,248
    e95c:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
    e960:	e0bffb17 	ldw	r2,-20(fp)
}
    e964:	e037883a 	mov	sp,fp
    e968:	df000017 	ldw	fp,0(sp)
    e96c:	dec00104 	addi	sp,sp,4
    e970:	f800283a 	ret

0000e974 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
    e974:	defffb04 	addi	sp,sp,-20
    e978:	dfc00415 	stw	ra,16(sp)
    e97c:	df000315 	stw	fp,12(sp)
    e980:	df000304 	addi	fp,sp,12
    e984:	e13ffd15 	stw	r4,-12(fp)
    e988:	e17ffe15 	stw	r5,-8(fp)
    e98c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
    e990:	e0bffd17 	ldw	r2,-12(fp)
    e994:	10800617 	ldw	r2,24(r2)
    e998:	e1bfff17 	ldw	r6,-4(fp)
    e99c:	e17ffe17 	ldw	r5,-8(fp)
    e9a0:	1009883a 	mov	r4,r2
    e9a4:	000e6300 	call	e630 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    e9a8:	e037883a 	mov	sp,fp
    e9ac:	dfc00117 	ldw	ra,4(sp)
    e9b0:	df000017 	ldw	fp,0(sp)
    e9b4:	dec00204 	addi	sp,sp,8
    e9b8:	f800283a 	ret

0000e9bc <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
    e9bc:	defffb04 	addi	sp,sp,-20
    e9c0:	dfc00415 	stw	ra,16(sp)
    e9c4:	df000315 	stw	fp,12(sp)
    e9c8:	df000304 	addi	fp,sp,12
    e9cc:	e13ffd15 	stw	r4,-12(fp)
    e9d0:	e17ffe15 	stw	r5,-8(fp)
    e9d4:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
    e9d8:	e0bffd17 	ldw	r2,-12(fp)
    e9dc:	10800617 	ldw	r2,24(r2)
    e9e0:	e1bfff17 	ldw	r6,-4(fp)
    e9e4:	e17ffe17 	ldw	r5,-8(fp)
    e9e8:	1009883a 	mov	r4,r2
    e9ec:	000e6300 	call	e630 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    e9f0:	e037883a 	mov	sp,fp
    e9f4:	dfc00117 	ldw	ra,4(sp)
    e9f8:	df000017 	ldw	fp,0(sp)
    e9fc:	dec00204 	addi	sp,sp,8
    ea00:	f800283a 	ret

0000ea04 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    ea04:	defff404 	addi	sp,sp,-48
    ea08:	dfc00b15 	stw	ra,44(sp)
    ea0c:	df000a15 	stw	fp,40(sp)
    ea10:	df000a04 	addi	fp,sp,40
    ea14:	e13ffc15 	stw	r4,-16(fp)
    ea18:	e17ffd15 	stw	r5,-12(fp)
    ea1c:	e1bffe15 	stw	r6,-8(fp)
    ea20:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
    ea24:	e0bffc17 	ldw	r2,-16(fp)
    ea28:	10800617 	ldw	r2,24(r2)
    ea2c:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    ea30:	e0bff617 	ldw	r2,-40(fp)
    ea34:	10800517 	ldw	r2,20(r2)
    ea38:	108003cc 	andi	r2,r2,15
    ea3c:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    ea40:	e0fffd17 	ldw	r3,-12(fp)
    ea44:	e0bff717 	ldw	r2,-36(fp)
    ea48:	1884703a 	and	r2,r3,r2
    ea4c:	1000081e 	bne	r2,zero,ea70 <alt_avalon_dma_prepare+0x6c>
    ea50:	e0fffe17 	ldw	r3,-8(fp)
    ea54:	e0bff717 	ldw	r2,-36(fp)
    ea58:	1884703a 	and	r2,r3,r2
    ea5c:	1000041e 	bne	r2,zero,ea70 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
    ea60:	e0bff617 	ldw	r2,-40(fp)
    ea64:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    ea68:	e0bffe17 	ldw	r2,-8(fp)
    ea6c:	1880022e 	bgeu	r3,r2,ea78 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
    ea70:	00bffa84 	movi	r2,-22
    ea74:	00002c06 	br	eb28 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
    ea78:	e0bff617 	ldw	r2,-40(fp)
    ea7c:	10800317 	ldw	r2,12(r2)
    ea80:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
    ea84:	e0bff617 	ldw	r2,-40(fp)
    ea88:	10800417 	ldw	r2,16(r2)
    ea8c:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
    ea90:	e0bff917 	ldw	r2,-28(fp)
    ea94:	1004913a 	slli	r2,r2,4
    ea98:	10801904 	addi	r2,r2,100
    ea9c:	e0fff617 	ldw	r3,-40(fp)
    eaa0:	1885883a 	add	r2,r3,r2
    eaa4:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    eaa8:	e0bff917 	ldw	r2,-28(fp)
    eaac:	10800044 	addi	r2,r2,1
    eab0:	108000cc 	andi	r2,r2,3
    eab4:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    eab8:	e0fffb17 	ldw	r3,-20(fp)
    eabc:	e0bff817 	ldw	r2,-32(fp)
    eac0:	1880021e 	bne	r3,r2,eacc <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
    eac4:	00bff904 	movi	r2,-28
    eac8:	00001706 	br	eb28 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
    eacc:	e0bffa17 	ldw	r2,-24(fp)
    ead0:	e0fffd17 	ldw	r3,-12(fp)
    ead4:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    ead8:	e0bffa17 	ldw	r2,-24(fp)
    eadc:	e0fffe17 	ldw	r3,-8(fp)
    eae0:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    eae4:	e0bffa17 	ldw	r2,-24(fp)
    eae8:	e0ffff17 	ldw	r3,-4(fp)
    eaec:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    eaf0:	e0bffa17 	ldw	r2,-24(fp)
    eaf4:	e0c00217 	ldw	r3,8(fp)
    eaf8:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
    eafc:	e0bff617 	ldw	r2,-40(fp)
    eb00:	e0fffb17 	ldw	r3,-20(fp)
    eb04:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
    eb08:	e0bff617 	ldw	r2,-40(fp)
    eb0c:	10800817 	ldw	r2,32(r2)
    eb10:	1000041e 	bne	r2,zero,eb24 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
    eb14:	e0bff617 	ldw	r2,-40(fp)
    eb18:	10800717 	ldw	r2,28(r2)
    eb1c:	e13ff617 	ldw	r4,-40(fp)
    eb20:	103ee83a 	callr	r2
  }

  return 0;
    eb24:	0005883a 	mov	r2,zero
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	dfc00117 	ldw	ra,4(sp)
    eb30:	df000017 	ldw	fp,0(sp)
    eb34:	dec00204 	addi	sp,sp,8
    eb38:	f800283a 	ret

0000eb3c <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
    eb3c:	defffb04 	addi	sp,sp,-20
    eb40:	df000415 	stw	fp,16(sp)
    eb44:	df000404 	addi	fp,sp,16
    eb48:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    eb4c:	e0bfff17 	ldw	r2,-4(fp)
    eb50:	10800617 	ldw	r2,24(r2)
    eb54:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
    eb58:	e0bffc17 	ldw	r2,-16(fp)
    eb5c:	10800117 	ldw	r2,4(r2)
    eb60:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
    eb64:	e0bffc17 	ldw	r2,-16(fp)
    eb68:	10800217 	ldw	r2,8(r2)
    eb6c:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
    eb70:	e0bffd17 	ldw	r2,-12(fp)
    eb74:	e0fffe17 	ldw	r3,-8(fp)
    eb78:	1880052e 	bgeu	r3,r2,eb90 <alt_avalon_dma_space+0x54>
    eb7c:	e0fffd17 	ldw	r3,-12(fp)
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	1885c83a 	sub	r2,r3,r2
    eb88:	10bfffc4 	addi	r2,r2,-1
    eb8c:	00000406 	br	eba0 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
    eb90:	e0fffd17 	ldw	r3,-12(fp)
    eb94:	e0bffe17 	ldw	r2,-8(fp)
    eb98:	1885c83a 	sub	r2,r3,r2
    eb9c:	108000c4 	addi	r2,r2,3
}
    eba0:	e037883a 	mov	sp,fp
    eba4:	df000017 	ldw	fp,0(sp)
    eba8:	dec00104 	addi	sp,sp,4
    ebac:	f800283a 	ret

0000ebb0 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    ebb0:	defff404 	addi	sp,sp,-48
    ebb4:	dfc00b15 	stw	ra,44(sp)
    ebb8:	df000a15 	stw	fp,40(sp)
    ebbc:	df000a04 	addi	fp,sp,40
    ebc0:	e13ffc15 	stw	r4,-16(fp)
    ebc4:	e17ffd15 	stw	r5,-12(fp)
    ebc8:	e1bffe15 	stw	r6,-8(fp)
    ebcc:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    ebd0:	e0bffc17 	ldw	r2,-16(fp)
    ebd4:	10800617 	ldw	r2,24(r2)
    ebd8:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    ebdc:	e0bff617 	ldw	r2,-40(fp)
    ebe0:	10800517 	ldw	r2,20(r2)
    ebe4:	108003cc 	andi	r2,r2,15
    ebe8:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
    ebec:	e0fffd17 	ldw	r3,-12(fp)
    ebf0:	e0bff717 	ldw	r2,-36(fp)
    ebf4:	1884703a 	and	r2,r3,r2
    ebf8:	1000081e 	bne	r2,zero,ec1c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
    ebfc:	e0fffe17 	ldw	r3,-8(fp)
    ec00:	e0bff717 	ldw	r2,-36(fp)
    ec04:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
    ec08:	1000041e 	bne	r2,zero,ec1c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
    ec0c:	e0bff617 	ldw	r2,-40(fp)
    ec10:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
    ec14:	e0bffe17 	ldw	r2,-8(fp)
    ec18:	1880022e 	bgeu	r3,r2,ec24 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
    ec1c:	00bffa84 	movi	r2,-22
    ec20:	00002c06 	br	ecd4 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
    ec24:	e0bff617 	ldw	r2,-40(fp)
    ec28:	10800117 	ldw	r2,4(r2)
    ec2c:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
    ec30:	e0bff617 	ldw	r2,-40(fp)
    ec34:	10800217 	ldw	r2,8(r2)
    ec38:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
    ec3c:	e0bff917 	ldw	r2,-28(fp)
    ec40:	1004913a 	slli	r2,r2,4
    ec44:	10800904 	addi	r2,r2,36
    ec48:	e0fff617 	ldw	r3,-40(fp)
    ec4c:	1885883a 	add	r2,r3,r2
    ec50:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    ec54:	e0bff917 	ldw	r2,-28(fp)
    ec58:	10800044 	addi	r2,r2,1
    ec5c:	108000cc 	andi	r2,r2,3
    ec60:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    ec64:	e0fffb17 	ldw	r3,-20(fp)
    ec68:	e0bff817 	ldw	r2,-32(fp)
    ec6c:	1880021e 	bne	r3,r2,ec78 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
    ec70:	00bff904 	movi	r2,-28
    ec74:	00001706 	br	ecd4 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
    ec78:	e0bffa17 	ldw	r2,-24(fp)
    ec7c:	e0fffd17 	ldw	r3,-12(fp)
    ec80:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    ec84:	e0bffa17 	ldw	r2,-24(fp)
    ec88:	e0fffe17 	ldw	r3,-8(fp)
    ec8c:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    ec90:	e0bffa17 	ldw	r2,-24(fp)
    ec94:	e0ffff17 	ldw	r3,-4(fp)
    ec98:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    ec9c:	e0bffa17 	ldw	r2,-24(fp)
    eca0:	e0c00217 	ldw	r3,8(fp)
    eca4:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
    eca8:	e0bff617 	ldw	r2,-40(fp)
    ecac:	e0fffb17 	ldw	r3,-20(fp)
    ecb0:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
    ecb4:	e0bff617 	ldw	r2,-40(fp)
    ecb8:	10800817 	ldw	r2,32(r2)
    ecbc:	1000041e 	bne	r2,zero,ecd0 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
    ecc0:	e0bff617 	ldw	r2,-40(fp)
    ecc4:	10800717 	ldw	r2,28(r2)
    ecc8:	e13ff617 	ldw	r4,-40(fp)
    eccc:	103ee83a 	callr	r2
  }

  return 0;
    ecd0:	0005883a 	mov	r2,zero
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	dfc00117 	ldw	ra,4(sp)
    ecdc:	df000017 	ldw	fp,0(sp)
    ece0:	dec00204 	addi	sp,sp,8
    ece4:	f800283a 	ret

0000ece8 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    ece8:	defff104 	addi	sp,sp,-60
    ecec:	dfc00e15 	stw	ra,56(sp)
    ecf0:	df000d15 	stw	fp,52(sp)
    ecf4:	df000d04 	addi	fp,sp,52
    ecf8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
    ecfc:	e0bfff17 	ldw	r2,-4(fp)
    ed00:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    ed04:	e0bff317 	ldw	r2,-52(fp)
    ed08:	10800517 	ldw	r2,20(r2)
    ed0c:	1080080c 	andi	r2,r2,32
    ed10:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
    ed14:	e0bff317 	ldw	r2,-52(fp)
    ed18:	10800517 	ldw	r2,20(r2)
    ed1c:	1080100c 	andi	r2,r2,64
    ed20:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
    ed24:	e0bff317 	ldw	r2,-52(fp)
    ed28:	10800117 	ldw	r2,4(r2)
    ed2c:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
    ed30:	e0bff317 	ldw	r2,-52(fp)
    ed34:	10800317 	ldw	r2,12(r2)
    ed38:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
    ed3c:	e0bff617 	ldw	r2,-40(fp)
    ed40:	1004913a 	slli	r2,r2,4
    ed44:	10800904 	addi	r2,r2,36
    ed48:	e0fff317 	ldw	r3,-52(fp)
    ed4c:	1885883a 	add	r2,r3,r2
    ed50:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
    ed54:	e0bff717 	ldw	r2,-36(fp)
    ed58:	1004913a 	slli	r2,r2,4
    ed5c:	10801904 	addi	r2,r2,100
    ed60:	e0fff317 	ldw	r3,-52(fp)
    ed64:	1885883a 	add	r2,r3,r2
    ed68:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
    ed6c:	e0bff417 	ldw	r2,-48(fp)
    ed70:	1000051e 	bne	r2,zero,ed88 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    ed74:	e0bff617 	ldw	r2,-40(fp)
    ed78:	10800044 	addi	r2,r2,1
    ed7c:	10c000cc 	andi	r3,r2,3
    ed80:	e0bff317 	ldw	r2,-52(fp)
    ed84:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
    ed88:	e0bff517 	ldw	r2,-44(fp)
    ed8c:	1000051e 	bne	r2,zero,eda4 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    ed90:	e0bff717 	ldw	r2,-36(fp)
    ed94:	10800044 	addi	r2,r2,1
    ed98:	10c000cc 	andi	r3,r2,3
    ed9c:	e0bff317 	ldw	r2,-52(fp)
    eda0:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
    eda4:	e0bff317 	ldw	r2,-52(fp)
    eda8:	10800017 	ldw	r2,0(r2)
    edac:	0007883a 	mov	r3,zero
    edb0:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
    edb4:	e0bff317 	ldw	r2,-52(fp)
    edb8:	10800017 	ldw	r2,0(r2)
    edbc:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
    edc0:	e0bff317 	ldw	r2,-52(fp)
    edc4:	10800717 	ldw	r2,28(r2)
    edc8:	e13ff317 	ldw	r4,-52(fp)
    edcc:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
    edd0:	e0bff417 	ldw	r2,-48(fp)
    edd4:	1000151e 	bne	r2,zero,ee2c <alt_avalon_dma_irq+0x144>
    edd8:	e0bff817 	ldw	r2,-32(fp)
    eddc:	10800217 	ldw	r2,8(r2)
    ede0:	10001226 	beq	r2,zero,ee2c <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ede4:	0005303a 	rdctl	r2,status
    ede8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    edec:	e0fffc17 	ldw	r3,-16(fp)
    edf0:	00bfff84 	movi	r2,-2
    edf4:	1884703a 	and	r2,r3,r2
    edf8:	1001703a 	wrctl	status,r2
  
  return context;
    edfc:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
    ee00:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
    ee04:	e0bff817 	ldw	r2,-32(fp)
    ee08:	10800217 	ldw	r2,8(r2)
    ee0c:	e0fff817 	ldw	r3,-32(fp)
    ee10:	18c00317 	ldw	r3,12(r3)
    ee14:	1809883a 	mov	r4,r3
    ee18:	103ee83a 	callr	r2
    ee1c:	e0bffb17 	ldw	r2,-20(fp)
    ee20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee24:	e0bffe17 	ldw	r2,-8(fp)
    ee28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
    ee2c:	e0bff517 	ldw	r2,-44(fp)
    ee30:	1000171e 	bne	r2,zero,ee90 <alt_avalon_dma_irq+0x1a8>
    ee34:	e0bff917 	ldw	r2,-28(fp)
    ee38:	10800217 	ldw	r2,8(r2)
    ee3c:	10001426 	beq	r2,zero,ee90 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee40:	0005303a 	rdctl	r2,status
    ee44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee48:	e0fffd17 	ldw	r3,-12(fp)
    ee4c:	00bfff84 	movi	r2,-2
    ee50:	1884703a 	and	r2,r3,r2
    ee54:	1001703a 	wrctl	status,r2
  
  return context;
    ee58:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
    ee5c:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
    ee60:	e0bff917 	ldw	r2,-28(fp)
    ee64:	10800217 	ldw	r2,8(r2)
    ee68:	e0fff917 	ldw	r3,-28(fp)
    ee6c:	19000317 	ldw	r4,12(r3)
    ee70:	e0fff917 	ldw	r3,-28(fp)
    ee74:	18c00017 	ldw	r3,0(r3)
    ee78:	180b883a 	mov	r5,r3
    ee7c:	103ee83a 	callr	r2
    ee80:	e0bffb17 	ldw	r2,-20(fp)
    ee84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee88:	e0bffa17 	ldw	r2,-24(fp)
    ee8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    ee90:	0001883a 	nop
    ee94:	e037883a 	mov	sp,fp
    ee98:	dfc00117 	ldw	ra,4(sp)
    ee9c:	df000017 	ldw	fp,0(sp)
    eea0:	dec00204 	addi	sp,sp,8
    eea4:	f800283a 	ret

0000eea8 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
    eea8:	defff904 	addi	sp,sp,-28
    eeac:	dfc00615 	stw	ra,24(sp)
    eeb0:	df000515 	stw	fp,20(sp)
    eeb4:	df000504 	addi	fp,sp,20
    eeb8:	e13ffc15 	stw	r4,-16(fp)
    eebc:	e17ffd15 	stw	r5,-12(fp)
    eec0:	e1bffe15 	stw	r6,-8(fp)
    eec4:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    eec8:	e0bffe17 	ldw	r2,-8(fp)
    eecc:	10800604 	addi	r2,r2,24
    eed0:	00c40004 	movi	r3,4096
    eed4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    eed8:	e0bffe17 	ldw	r2,-8(fp)
    eedc:	10800604 	addi	r2,r2,24
    eee0:	00c40004 	movi	r3,4096
    eee4:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
    eee8:	e0bffe17 	ldw	r2,-8(fp)
    eeec:	10800604 	addi	r2,r2,24
    eef0:	00c03f04 	movi	r3,252
    eef4:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
    eef8:	0007883a 	mov	r3,zero
    eefc:	e0bffe17 	ldw	r2,-8(fp)
    ef00:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
    ef04:	e0bffc17 	ldw	r2,-16(fp)
    ef08:	10800617 	ldw	r2,24(r2)
    ef0c:	d8000015 	stw	zero,0(sp)
    ef10:	100f883a 	mov	r7,r2
    ef14:	01800074 	movhi	r6,1
    ef18:	31bb3a04 	addi	r6,r6,-4888
    ef1c:	e1400217 	ldw	r5,8(fp)
    ef20:	e13fff17 	ldw	r4,-4(fp)
    ef24:	000fdc40 	call	fdc4 <alt_ic_isr_register>
    ef28:	10000616 	blt	r2,zero,ef44 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    ef2c:	e0bffc17 	ldw	r2,-16(fp)
    ef30:	1009883a 	mov	r4,r2
    ef34:	000e3980 	call	e398 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
    ef38:	e0bffd17 	ldw	r2,-12(fp)
    ef3c:	1009883a 	mov	r4,r2
    ef40:	000e3cc0 	call	e3cc <alt_dma_rxchan_reg>
  }
}
    ef44:	0001883a 	nop
    ef48:	e037883a 	mov	sp,fp
    ef4c:	dfc00117 	ldw	ra,4(sp)
    ef50:	df000017 	ldw	fp,0(sp)
    ef54:	dec00204 	addi	sp,sp,8
    ef58:	f800283a 	ret

0000ef5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ef5c:	defffa04 	addi	sp,sp,-24
    ef60:	dfc00515 	stw	ra,20(sp)
    ef64:	df000415 	stw	fp,16(sp)
    ef68:	df000404 	addi	fp,sp,16
    ef6c:	e13ffd15 	stw	r4,-12(fp)
    ef70:	e17ffe15 	stw	r5,-8(fp)
    ef74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef78:	e0bffd17 	ldw	r2,-12(fp)
    ef7c:	10800017 	ldw	r2,0(r2)
    ef80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ef84:	e0bffc17 	ldw	r2,-16(fp)
    ef88:	10c00a04 	addi	r3,r2,40
    ef8c:	e0bffd17 	ldw	r2,-12(fp)
    ef90:	10800217 	ldw	r2,8(r2)
    ef94:	100f883a 	mov	r7,r2
    ef98:	e1bfff17 	ldw	r6,-4(fp)
    ef9c:	e17ffe17 	ldw	r5,-8(fp)
    efa0:	1809883a 	mov	r4,r3
    efa4:	000f5840 	call	f584 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    efbc:	defffa04 	addi	sp,sp,-24
    efc0:	dfc00515 	stw	ra,20(sp)
    efc4:	df000415 	stw	fp,16(sp)
    efc8:	df000404 	addi	fp,sp,16
    efcc:	e13ffd15 	stw	r4,-12(fp)
    efd0:	e17ffe15 	stw	r5,-8(fp)
    efd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efd8:	e0bffd17 	ldw	r2,-12(fp)
    efdc:	10800017 	ldw	r2,0(r2)
    efe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    efe4:	e0bffc17 	ldw	r2,-16(fp)
    efe8:	10c00a04 	addi	r3,r2,40
    efec:	e0bffd17 	ldw	r2,-12(fp)
    eff0:	10800217 	ldw	r2,8(r2)
    eff4:	100f883a 	mov	r7,r2
    eff8:	e1bfff17 	ldw	r6,-4(fp)
    effc:	e17ffe17 	ldw	r5,-8(fp)
    f000:	1809883a 	mov	r4,r3
    f004:	000f7a00 	call	f7a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f008:	e037883a 	mov	sp,fp
    f00c:	dfc00117 	ldw	ra,4(sp)
    f010:	df000017 	ldw	fp,0(sp)
    f014:	dec00204 	addi	sp,sp,8
    f018:	f800283a 	ret

0000f01c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f01c:	defffc04 	addi	sp,sp,-16
    f020:	dfc00315 	stw	ra,12(sp)
    f024:	df000215 	stw	fp,8(sp)
    f028:	df000204 	addi	fp,sp,8
    f02c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f030:	e0bfff17 	ldw	r2,-4(fp)
    f034:	10800017 	ldw	r2,0(r2)
    f038:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f03c:	e0bffe17 	ldw	r2,-8(fp)
    f040:	10c00a04 	addi	r3,r2,40
    f044:	e0bfff17 	ldw	r2,-4(fp)
    f048:	10800217 	ldw	r2,8(r2)
    f04c:	100b883a 	mov	r5,r2
    f050:	1809883a 	mov	r4,r3
    f054:	000f42c0 	call	f42c <altera_avalon_jtag_uart_close>
}
    f058:	e037883a 	mov	sp,fp
    f05c:	dfc00117 	ldw	ra,4(sp)
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00204 	addi	sp,sp,8
    f068:	f800283a 	ret

0000f06c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f06c:	defffa04 	addi	sp,sp,-24
    f070:	dfc00515 	stw	ra,20(sp)
    f074:	df000415 	stw	fp,16(sp)
    f078:	df000404 	addi	fp,sp,16
    f07c:	e13ffd15 	stw	r4,-12(fp)
    f080:	e17ffe15 	stw	r5,-8(fp)
    f084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f088:	e0bffd17 	ldw	r2,-12(fp)
    f08c:	10800017 	ldw	r2,0(r2)
    f090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f094:	e0bffc17 	ldw	r2,-16(fp)
    f098:	10800a04 	addi	r2,r2,40
    f09c:	e1bfff17 	ldw	r6,-4(fp)
    f0a0:	e17ffe17 	ldw	r5,-8(fp)
    f0a4:	1009883a 	mov	r4,r2
    f0a8:	000f4940 	call	f494 <altera_avalon_jtag_uart_ioctl>
}
    f0ac:	e037883a 	mov	sp,fp
    f0b0:	dfc00117 	ldw	ra,4(sp)
    f0b4:	df000017 	ldw	fp,0(sp)
    f0b8:	dec00204 	addi	sp,sp,8
    f0bc:	f800283a 	ret

0000f0c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f0c0:	defffa04 	addi	sp,sp,-24
    f0c4:	dfc00515 	stw	ra,20(sp)
    f0c8:	df000415 	stw	fp,16(sp)
    f0cc:	df000404 	addi	fp,sp,16
    f0d0:	e13ffd15 	stw	r4,-12(fp)
    f0d4:	e17ffe15 	stw	r5,-8(fp)
    f0d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0dc:	e0bffd17 	ldw	r2,-12(fp)
    f0e0:	00c00044 	movi	r3,1
    f0e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f0e8:	e0bffd17 	ldw	r2,-12(fp)
    f0ec:	10800017 	ldw	r2,0(r2)
    f0f0:	10800104 	addi	r2,r2,4
    f0f4:	1007883a 	mov	r3,r2
    f0f8:	e0bffd17 	ldw	r2,-12(fp)
    f0fc:	10800817 	ldw	r2,32(r2)
    f100:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f104:	e0bffe17 	ldw	r2,-8(fp)
    f108:	e0ffff17 	ldw	r3,-4(fp)
    f10c:	d8000015 	stw	zero,0(sp)
    f110:	e1fffd17 	ldw	r7,-12(fp)
    f114:	01800074 	movhi	r6,1
    f118:	31bc6004 	addi	r6,r6,-3712
    f11c:	180b883a 	mov	r5,r3
    f120:	1009883a 	mov	r4,r2
    f124:	000fdc40 	call	fdc4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f128:	e0bffd17 	ldw	r2,-12(fp)
    f12c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	10800204 	addi	r2,r2,8
    f138:	d0e71417 	ldw	r3,-25520(gp)
    f13c:	e1fffd17 	ldw	r7,-12(fp)
    f140:	01800074 	movhi	r6,1
    f144:	31bce304 	addi	r6,r6,-3188
    f148:	180b883a 	mov	r5,r3
    f14c:	1009883a 	mov	r4,r2
    f150:	000fab80 	call	fab8 <alt_alarm_start>
    f154:	1000040e 	bge	r2,zero,f168 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f158:	e0fffd17 	ldw	r3,-12(fp)
    f15c:	00a00034 	movhi	r2,32768
    f160:	10bfffc4 	addi	r2,r2,-1
    f164:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f168:	0001883a 	nop
    f16c:	e037883a 	mov	sp,fp
    f170:	dfc00117 	ldw	ra,4(sp)
    f174:	df000017 	ldw	fp,0(sp)
    f178:	dec00204 	addi	sp,sp,8
    f17c:	f800283a 	ret

0000f180 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f180:	defff804 	addi	sp,sp,-32
    f184:	df000715 	stw	fp,28(sp)
    f188:	df000704 	addi	fp,sp,28
    f18c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f190:	e0bfff17 	ldw	r2,-4(fp)
    f194:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f198:	e0bffb17 	ldw	r2,-20(fp)
    f19c:	10800017 	ldw	r2,0(r2)
    f1a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1a4:	e0bffc17 	ldw	r2,-16(fp)
    f1a8:	10800104 	addi	r2,r2,4
    f1ac:	10800037 	ldwio	r2,0(r2)
    f1b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f1b4:	e0bffd17 	ldw	r2,-12(fp)
    f1b8:	1080c00c 	andi	r2,r2,768
    f1bc:	10006d26 	beq	r2,zero,f374 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f1c0:	e0bffd17 	ldw	r2,-12(fp)
    f1c4:	1080400c 	andi	r2,r2,256
    f1c8:	10003526 	beq	r2,zero,f2a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f1cc:	00800074 	movhi	r2,1
    f1d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1d4:	e0bffb17 	ldw	r2,-20(fp)
    f1d8:	10800a17 	ldw	r2,40(r2)
    f1dc:	10800044 	addi	r2,r2,1
    f1e0:	1081ffcc 	andi	r2,r2,2047
    f1e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f1e8:	e0bffb17 	ldw	r2,-20(fp)
    f1ec:	10c00b17 	ldw	r3,44(r2)
    f1f0:	e0bffe17 	ldw	r2,-8(fp)
    f1f4:	18801526 	beq	r3,r2,f24c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f1f8:	e0bffc17 	ldw	r2,-16(fp)
    f1fc:	10800037 	ldwio	r2,0(r2)
    f200:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f204:	e0bff917 	ldw	r2,-28(fp)
    f208:	10a0000c 	andi	r2,r2,32768
    f20c:	10001126 	beq	r2,zero,f254 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	10800a17 	ldw	r2,40(r2)
    f218:	e0fff917 	ldw	r3,-28(fp)
    f21c:	1809883a 	mov	r4,r3
    f220:	e0fffb17 	ldw	r3,-20(fp)
    f224:	1885883a 	add	r2,r3,r2
    f228:	10800e04 	addi	r2,r2,56
    f22c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f230:	e0bffb17 	ldw	r2,-20(fp)
    f234:	10800a17 	ldw	r2,40(r2)
    f238:	10800044 	addi	r2,r2,1
    f23c:	10c1ffcc 	andi	r3,r2,2047
    f240:	e0bffb17 	ldw	r2,-20(fp)
    f244:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f248:	003fe206 	br	f1d4 <__alt_exception_stack_pointer+0xf800f1d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f24c:	0001883a 	nop
    f250:	00000106 	br	f258 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f254:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f258:	e0bff917 	ldw	r2,-28(fp)
    f25c:	10bfffec 	andhi	r2,r2,65535
    f260:	10000f26 	beq	r2,zero,f2a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f264:	e0bffb17 	ldw	r2,-20(fp)
    f268:	10c00817 	ldw	r3,32(r2)
    f26c:	00bfff84 	movi	r2,-2
    f270:	1886703a 	and	r3,r3,r2
    f274:	e0bffb17 	ldw	r2,-20(fp)
    f278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f27c:	e0bffc17 	ldw	r2,-16(fp)
    f280:	10800104 	addi	r2,r2,4
    f284:	1007883a 	mov	r3,r2
    f288:	e0bffb17 	ldw	r2,-20(fp)
    f28c:	10800817 	ldw	r2,32(r2)
    f290:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f294:	e0bffc17 	ldw	r2,-16(fp)
    f298:	10800104 	addi	r2,r2,4
    f29c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f2a0:	e0bffd17 	ldw	r2,-12(fp)
    f2a4:	1080800c 	andi	r2,r2,512
    f2a8:	103fbe26 	beq	r2,zero,f1a4 <__alt_exception_stack_pointer+0xf800f1a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f2ac:	e0bffd17 	ldw	r2,-12(fp)
    f2b0:	1004d43a 	srli	r2,r2,16
    f2b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2b8:	00001406 	br	f30c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f2bc:	e0bffc17 	ldw	r2,-16(fp)
    f2c0:	e0fffb17 	ldw	r3,-20(fp)
    f2c4:	18c00d17 	ldw	r3,52(r3)
    f2c8:	e13ffb17 	ldw	r4,-20(fp)
    f2cc:	20c7883a 	add	r3,r4,r3
    f2d0:	18c20e04 	addi	r3,r3,2104
    f2d4:	18c00003 	ldbu	r3,0(r3)
    f2d8:	18c03fcc 	andi	r3,r3,255
    f2dc:	18c0201c 	xori	r3,r3,128
    f2e0:	18ffe004 	addi	r3,r3,-128
    f2e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2e8:	e0bffb17 	ldw	r2,-20(fp)
    f2ec:	10800d17 	ldw	r2,52(r2)
    f2f0:	10800044 	addi	r2,r2,1
    f2f4:	10c1ffcc 	andi	r3,r2,2047
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f300:	e0bffa17 	ldw	r2,-24(fp)
    f304:	10bfffc4 	addi	r2,r2,-1
    f308:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f30c:	e0bffa17 	ldw	r2,-24(fp)
    f310:	10000526 	beq	r2,zero,f328 <altera_avalon_jtag_uart_irq+0x1a8>
    f314:	e0bffb17 	ldw	r2,-20(fp)
    f318:	10c00d17 	ldw	r3,52(r2)
    f31c:	e0bffb17 	ldw	r2,-20(fp)
    f320:	10800c17 	ldw	r2,48(r2)
    f324:	18bfe51e 	bne	r3,r2,f2bc <__alt_exception_stack_pointer+0xf800f2bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f328:	e0bffa17 	ldw	r2,-24(fp)
    f32c:	103f9d26 	beq	r2,zero,f1a4 <__alt_exception_stack_pointer+0xf800f1a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f330:	e0bffb17 	ldw	r2,-20(fp)
    f334:	10c00817 	ldw	r3,32(r2)
    f338:	00bfff44 	movi	r2,-3
    f33c:	1886703a 	and	r3,r3,r2
    f340:	e0bffb17 	ldw	r2,-20(fp)
    f344:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f348:	e0bffb17 	ldw	r2,-20(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	10800104 	addi	r2,r2,4
    f354:	1007883a 	mov	r3,r2
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	10800817 	ldw	r2,32(r2)
    f360:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f364:	e0bffc17 	ldw	r2,-16(fp)
    f368:	10800104 	addi	r2,r2,4
    f36c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f370:	003f8c06 	br	f1a4 <__alt_exception_stack_pointer+0xf800f1a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f374:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f378:	0001883a 	nop
    f37c:	e037883a 	mov	sp,fp
    f380:	df000017 	ldw	fp,0(sp)
    f384:	dec00104 	addi	sp,sp,4
    f388:	f800283a 	ret

0000f38c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f38c:	defff804 	addi	sp,sp,-32
    f390:	df000715 	stw	fp,28(sp)
    f394:	df000704 	addi	fp,sp,28
    f398:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f39c:	e0bffb17 	ldw	r2,-20(fp)
    f3a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f3a4:	e0bff917 	ldw	r2,-28(fp)
    f3a8:	10800017 	ldw	r2,0(r2)
    f3ac:	10800104 	addi	r2,r2,4
    f3b0:	10800037 	ldwio	r2,0(r2)
    f3b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f3b8:	e0bffa17 	ldw	r2,-24(fp)
    f3bc:	1081000c 	andi	r2,r2,1024
    f3c0:	10000b26 	beq	r2,zero,f3f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f3c4:	e0bff917 	ldw	r2,-28(fp)
    f3c8:	10800017 	ldw	r2,0(r2)
    f3cc:	10800104 	addi	r2,r2,4
    f3d0:	1007883a 	mov	r3,r2
    f3d4:	e0bff917 	ldw	r2,-28(fp)
    f3d8:	10800817 	ldw	r2,32(r2)
    f3dc:	10810014 	ori	r2,r2,1024
    f3e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f3e4:	e0bff917 	ldw	r2,-28(fp)
    f3e8:	10000915 	stw	zero,36(r2)
    f3ec:	00000a06 	br	f418 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f3f0:	e0bff917 	ldw	r2,-28(fp)
    f3f4:	10c00917 	ldw	r3,36(r2)
    f3f8:	00a00034 	movhi	r2,32768
    f3fc:	10bfff04 	addi	r2,r2,-4
    f400:	10c00536 	bltu	r2,r3,f418 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f404:	e0bff917 	ldw	r2,-28(fp)
    f408:	10800917 	ldw	r2,36(r2)
    f40c:	10c00044 	addi	r3,r2,1
    f410:	e0bff917 	ldw	r2,-28(fp)
    f414:	10c00915 	stw	r3,36(r2)
    f418:	d0a71417 	ldw	r2,-25520(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f41c:	e037883a 	mov	sp,fp
    f420:	df000017 	ldw	fp,0(sp)
    f424:	dec00104 	addi	sp,sp,4
    f428:	f800283a 	ret

0000f42c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f42c:	defffd04 	addi	sp,sp,-12
    f430:	df000215 	stw	fp,8(sp)
    f434:	df000204 	addi	fp,sp,8
    f438:	e13ffe15 	stw	r4,-8(fp)
    f43c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f440:	00000506 	br	f458 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f444:	e0bfff17 	ldw	r2,-4(fp)
    f448:	1090000c 	andi	r2,r2,16384
    f44c:	10000226 	beq	r2,zero,f458 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f450:	00bffd44 	movi	r2,-11
    f454:	00000b06 	br	f484 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f458:	e0bffe17 	ldw	r2,-8(fp)
    f45c:	10c00d17 	ldw	r3,52(r2)
    f460:	e0bffe17 	ldw	r2,-8(fp)
    f464:	10800c17 	ldw	r2,48(r2)
    f468:	18800526 	beq	r3,r2,f480 <altera_avalon_jtag_uart_close+0x54>
    f46c:	e0bffe17 	ldw	r2,-8(fp)
    f470:	10c00917 	ldw	r3,36(r2)
    f474:	e0bffe17 	ldw	r2,-8(fp)
    f478:	10800117 	ldw	r2,4(r2)
    f47c:	18bff136 	bltu	r3,r2,f444 <__alt_exception_stack_pointer+0xf800f444>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f480:	0005883a 	mov	r2,zero
}
    f484:	e037883a 	mov	sp,fp
    f488:	df000017 	ldw	fp,0(sp)
    f48c:	dec00104 	addi	sp,sp,4
    f490:	f800283a 	ret

0000f494 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f494:	defffa04 	addi	sp,sp,-24
    f498:	df000515 	stw	fp,20(sp)
    f49c:	df000504 	addi	fp,sp,20
    f4a0:	e13ffd15 	stw	r4,-12(fp)
    f4a4:	e17ffe15 	stw	r5,-8(fp)
    f4a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f4ac:	00bff9c4 	movi	r2,-25
    f4b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f4b4:	e0bffe17 	ldw	r2,-8(fp)
    f4b8:	10da8060 	cmpeqi	r3,r2,27137
    f4bc:	1800031e 	bne	r3,zero,f4cc <altera_avalon_jtag_uart_ioctl+0x38>
    f4c0:	109a80a0 	cmpeqi	r2,r2,27138
    f4c4:	1000181e 	bne	r2,zero,f528 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f4c8:	00002906 	br	f570 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f4cc:	e0bffd17 	ldw	r2,-12(fp)
    f4d0:	10c00117 	ldw	r3,4(r2)
    f4d4:	00a00034 	movhi	r2,32768
    f4d8:	10bfffc4 	addi	r2,r2,-1
    f4dc:	18802126 	beq	r3,r2,f564 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f4e0:	e0bfff17 	ldw	r2,-4(fp)
    f4e4:	10800017 	ldw	r2,0(r2)
    f4e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f4ec:	e0bffc17 	ldw	r2,-16(fp)
    f4f0:	10800090 	cmplti	r2,r2,2
    f4f4:	1000061e 	bne	r2,zero,f510 <altera_avalon_jtag_uart_ioctl+0x7c>
    f4f8:	e0fffc17 	ldw	r3,-16(fp)
    f4fc:	00a00034 	movhi	r2,32768
    f500:	10bfffc4 	addi	r2,r2,-1
    f504:	18800226 	beq	r3,r2,f510 <altera_avalon_jtag_uart_ioctl+0x7c>
    f508:	e0bffc17 	ldw	r2,-16(fp)
    f50c:	00000206 	br	f518 <altera_avalon_jtag_uart_ioctl+0x84>
    f510:	00a00034 	movhi	r2,32768
    f514:	10bfff84 	addi	r2,r2,-2
    f518:	e0fffd17 	ldw	r3,-12(fp)
    f51c:	18800115 	stw	r2,4(r3)
      rc = 0;
    f520:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f524:	00000f06 	br	f564 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f528:	e0bffd17 	ldw	r2,-12(fp)
    f52c:	10c00117 	ldw	r3,4(r2)
    f530:	00a00034 	movhi	r2,32768
    f534:	10bfffc4 	addi	r2,r2,-1
    f538:	18800c26 	beq	r3,r2,f56c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f53c:	e0bffd17 	ldw	r2,-12(fp)
    f540:	10c00917 	ldw	r3,36(r2)
    f544:	e0bffd17 	ldw	r2,-12(fp)
    f548:	10800117 	ldw	r2,4(r2)
    f54c:	1885803a 	cmpltu	r2,r3,r2
    f550:	10c03fcc 	andi	r3,r2,255
    f554:	e0bfff17 	ldw	r2,-4(fp)
    f558:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f55c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f560:	00000206 	br	f56c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f564:	0001883a 	nop
    f568:	00000106 	br	f570 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f56c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f570:	e0bffb17 	ldw	r2,-20(fp)
}
    f574:	e037883a 	mov	sp,fp
    f578:	df000017 	ldw	fp,0(sp)
    f57c:	dec00104 	addi	sp,sp,4
    f580:	f800283a 	ret

0000f584 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f584:	defff304 	addi	sp,sp,-52
    f588:	dfc00c15 	stw	ra,48(sp)
    f58c:	df000b15 	stw	fp,44(sp)
    f590:	df000b04 	addi	fp,sp,44
    f594:	e13ffc15 	stw	r4,-16(fp)
    f598:	e17ffd15 	stw	r5,-12(fp)
    f59c:	e1bffe15 	stw	r6,-8(fp)
    f5a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f5a4:	e0bffd17 	ldw	r2,-12(fp)
    f5a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f5ac:	00004706 	br	f6cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f5b0:	e0bffc17 	ldw	r2,-16(fp)
    f5b4:	10800a17 	ldw	r2,40(r2)
    f5b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f5bc:	e0bffc17 	ldw	r2,-16(fp)
    f5c0:	10800b17 	ldw	r2,44(r2)
    f5c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f5c8:	e0fff717 	ldw	r3,-36(fp)
    f5cc:	e0bff817 	ldw	r2,-32(fp)
    f5d0:	18800536 	bltu	r3,r2,f5e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f5d4:	e0fff717 	ldw	r3,-36(fp)
    f5d8:	e0bff817 	ldw	r2,-32(fp)
    f5dc:	1885c83a 	sub	r2,r3,r2
    f5e0:	e0bff615 	stw	r2,-40(fp)
    f5e4:	00000406 	br	f5f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f5e8:	00c20004 	movi	r3,2048
    f5ec:	e0bff817 	ldw	r2,-32(fp)
    f5f0:	1885c83a 	sub	r2,r3,r2
    f5f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f5f8:	e0bff617 	ldw	r2,-40(fp)
    f5fc:	10001e26 	beq	r2,zero,f678 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f600:	e0fffe17 	ldw	r3,-8(fp)
    f604:	e0bff617 	ldw	r2,-40(fp)
    f608:	1880022e 	bgeu	r3,r2,f614 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f60c:	e0bffe17 	ldw	r2,-8(fp)
    f610:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f614:	e0bffc17 	ldw	r2,-16(fp)
    f618:	10c00e04 	addi	r3,r2,56
    f61c:	e0bff817 	ldw	r2,-32(fp)
    f620:	1885883a 	add	r2,r3,r2
    f624:	e1bff617 	ldw	r6,-40(fp)
    f628:	100b883a 	mov	r5,r2
    f62c:	e13ff517 	ldw	r4,-44(fp)
    f630:	0006b0c0 	call	6b0c <memcpy>
      ptr   += n;
    f634:	e0fff517 	ldw	r3,-44(fp)
    f638:	e0bff617 	ldw	r2,-40(fp)
    f63c:	1885883a 	add	r2,r3,r2
    f640:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f644:	e0fffe17 	ldw	r3,-8(fp)
    f648:	e0bff617 	ldw	r2,-40(fp)
    f64c:	1885c83a 	sub	r2,r3,r2
    f650:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f654:	e0fff817 	ldw	r3,-32(fp)
    f658:	e0bff617 	ldw	r2,-40(fp)
    f65c:	1885883a 	add	r2,r3,r2
    f660:	10c1ffcc 	andi	r3,r2,2047
    f664:	e0bffc17 	ldw	r2,-16(fp)
    f668:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f66c:	e0bffe17 	ldw	r2,-8(fp)
    f670:	00bfcf16 	blt	zero,r2,f5b0 <__alt_exception_stack_pointer+0xf800f5b0>
    f674:	00000106 	br	f67c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f678:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f67c:	e0fff517 	ldw	r3,-44(fp)
    f680:	e0bffd17 	ldw	r2,-12(fp)
    f684:	1880141e 	bne	r3,r2,f6d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f688:	e0bfff17 	ldw	r2,-4(fp)
    f68c:	1090000c 	andi	r2,r2,16384
    f690:	1000131e 	bne	r2,zero,f6e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f694:	0001883a 	nop
    f698:	e0bffc17 	ldw	r2,-16(fp)
    f69c:	10c00a17 	ldw	r3,40(r2)
    f6a0:	e0bff717 	ldw	r2,-36(fp)
    f6a4:	1880051e 	bne	r3,r2,f6bc <altera_avalon_jtag_uart_read+0x138>
    f6a8:	e0bffc17 	ldw	r2,-16(fp)
    f6ac:	10c00917 	ldw	r3,36(r2)
    f6b0:	e0bffc17 	ldw	r2,-16(fp)
    f6b4:	10800117 	ldw	r2,4(r2)
    f6b8:	18bff736 	bltu	r3,r2,f698 <__alt_exception_stack_pointer+0xf800f698>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f6bc:	e0bffc17 	ldw	r2,-16(fp)
    f6c0:	10c00a17 	ldw	r3,40(r2)
    f6c4:	e0bff717 	ldw	r2,-36(fp)
    f6c8:	18800726 	beq	r3,r2,f6e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f6cc:	e0bffe17 	ldw	r2,-8(fp)
    f6d0:	00bfb716 	blt	zero,r2,f5b0 <__alt_exception_stack_pointer+0xf800f5b0>
    f6d4:	00000506 	br	f6ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f6d8:	0001883a 	nop
    f6dc:	00000306 	br	f6ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f6e0:	0001883a 	nop
    f6e4:	00000106 	br	f6ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f6e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f6ec:	e0fff517 	ldw	r3,-44(fp)
    f6f0:	e0bffd17 	ldw	r2,-12(fp)
    f6f4:	18801826 	beq	r3,r2,f758 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6f8:	0005303a 	rdctl	r2,status
    f6fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f700:	e0fffb17 	ldw	r3,-20(fp)
    f704:	00bfff84 	movi	r2,-2
    f708:	1884703a 	and	r2,r3,r2
    f70c:	1001703a 	wrctl	status,r2
  
  return context;
    f710:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f714:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f718:	e0bffc17 	ldw	r2,-16(fp)
    f71c:	10800817 	ldw	r2,32(r2)
    f720:	10c00054 	ori	r3,r2,1
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f72c:	e0bffc17 	ldw	r2,-16(fp)
    f730:	10800017 	ldw	r2,0(r2)
    f734:	10800104 	addi	r2,r2,4
    f738:	1007883a 	mov	r3,r2
    f73c:	e0bffc17 	ldw	r2,-16(fp)
    f740:	10800817 	ldw	r2,32(r2)
    f744:	18800035 	stwio	r2,0(r3)
    f748:	e0bffa17 	ldw	r2,-24(fp)
    f74c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f750:	e0bff917 	ldw	r2,-28(fp)
    f754:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f758:	e0fff517 	ldw	r3,-44(fp)
    f75c:	e0bffd17 	ldw	r2,-12(fp)
    f760:	18800426 	beq	r3,r2,f774 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f764:	e0fff517 	ldw	r3,-44(fp)
    f768:	e0bffd17 	ldw	r2,-12(fp)
    f76c:	1885c83a 	sub	r2,r3,r2
    f770:	00000606 	br	f78c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f774:	e0bfff17 	ldw	r2,-4(fp)
    f778:	1090000c 	andi	r2,r2,16384
    f77c:	10000226 	beq	r2,zero,f788 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f780:	00bffd44 	movi	r2,-11
    f784:	00000106 	br	f78c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f788:	00bffec4 	movi	r2,-5
}
    f78c:	e037883a 	mov	sp,fp
    f790:	dfc00117 	ldw	ra,4(sp)
    f794:	df000017 	ldw	fp,0(sp)
    f798:	dec00204 	addi	sp,sp,8
    f79c:	f800283a 	ret

0000f7a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f7a0:	defff304 	addi	sp,sp,-52
    f7a4:	dfc00c15 	stw	ra,48(sp)
    f7a8:	df000b15 	stw	fp,44(sp)
    f7ac:	df000b04 	addi	fp,sp,44
    f7b0:	e13ffc15 	stw	r4,-16(fp)
    f7b4:	e17ffd15 	stw	r5,-12(fp)
    f7b8:	e1bffe15 	stw	r6,-8(fp)
    f7bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f7c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f7c4:	e0bffd17 	ldw	r2,-12(fp)
    f7c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f7cc:	00003706 	br	f8ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f7d0:	e0bffc17 	ldw	r2,-16(fp)
    f7d4:	10800c17 	ldw	r2,48(r2)
    f7d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f7dc:	e0bffc17 	ldw	r2,-16(fp)
    f7e0:	10800d17 	ldw	r2,52(r2)
    f7e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f7e8:	e0fff917 	ldw	r3,-28(fp)
    f7ec:	e0bff517 	ldw	r2,-44(fp)
    f7f0:	1880062e 	bgeu	r3,r2,f80c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f7f4:	e0fff517 	ldw	r3,-44(fp)
    f7f8:	e0bff917 	ldw	r2,-28(fp)
    f7fc:	1885c83a 	sub	r2,r3,r2
    f800:	10bfffc4 	addi	r2,r2,-1
    f804:	e0bff615 	stw	r2,-40(fp)
    f808:	00000b06 	br	f838 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f80c:	e0bff517 	ldw	r2,-44(fp)
    f810:	10000526 	beq	r2,zero,f828 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f814:	00c20004 	movi	r3,2048
    f818:	e0bff917 	ldw	r2,-28(fp)
    f81c:	1885c83a 	sub	r2,r3,r2
    f820:	e0bff615 	stw	r2,-40(fp)
    f824:	00000406 	br	f838 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f828:	00c1ffc4 	movi	r3,2047
    f82c:	e0bff917 	ldw	r2,-28(fp)
    f830:	1885c83a 	sub	r2,r3,r2
    f834:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f838:	e0bff617 	ldw	r2,-40(fp)
    f83c:	10001e26 	beq	r2,zero,f8b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f840:	e0fffe17 	ldw	r3,-8(fp)
    f844:	e0bff617 	ldw	r2,-40(fp)
    f848:	1880022e 	bgeu	r3,r2,f854 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f84c:	e0bffe17 	ldw	r2,-8(fp)
    f850:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f854:	e0bffc17 	ldw	r2,-16(fp)
    f858:	10c20e04 	addi	r3,r2,2104
    f85c:	e0bff917 	ldw	r2,-28(fp)
    f860:	1885883a 	add	r2,r3,r2
    f864:	e1bff617 	ldw	r6,-40(fp)
    f868:	e17ffd17 	ldw	r5,-12(fp)
    f86c:	1009883a 	mov	r4,r2
    f870:	0006b0c0 	call	6b0c <memcpy>
      ptr   += n;
    f874:	e0fffd17 	ldw	r3,-12(fp)
    f878:	e0bff617 	ldw	r2,-40(fp)
    f87c:	1885883a 	add	r2,r3,r2
    f880:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f884:	e0fffe17 	ldw	r3,-8(fp)
    f888:	e0bff617 	ldw	r2,-40(fp)
    f88c:	1885c83a 	sub	r2,r3,r2
    f890:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f894:	e0fff917 	ldw	r3,-28(fp)
    f898:	e0bff617 	ldw	r2,-40(fp)
    f89c:	1885883a 	add	r2,r3,r2
    f8a0:	10c1ffcc 	andi	r3,r2,2047
    f8a4:	e0bffc17 	ldw	r2,-16(fp)
    f8a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f8ac:	e0bffe17 	ldw	r2,-8(fp)
    f8b0:	00bfc716 	blt	zero,r2,f7d0 <__alt_exception_stack_pointer+0xf800f7d0>
    f8b4:	00000106 	br	f8bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f8b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8bc:	0005303a 	rdctl	r2,status
    f8c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8c4:	e0fffb17 	ldw	r3,-20(fp)
    f8c8:	00bfff84 	movi	r2,-2
    f8cc:	1884703a 	and	r2,r3,r2
    f8d0:	1001703a 	wrctl	status,r2
  
  return context;
    f8d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f8d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f8dc:	e0bffc17 	ldw	r2,-16(fp)
    f8e0:	10800817 	ldw	r2,32(r2)
    f8e4:	10c00094 	ori	r3,r2,2
    f8e8:	e0bffc17 	ldw	r2,-16(fp)
    f8ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10800017 	ldw	r2,0(r2)
    f8f8:	10800104 	addi	r2,r2,4
    f8fc:	1007883a 	mov	r3,r2
    f900:	e0bffc17 	ldw	r2,-16(fp)
    f904:	10800817 	ldw	r2,32(r2)
    f908:	18800035 	stwio	r2,0(r3)
    f90c:	e0bffa17 	ldw	r2,-24(fp)
    f910:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f914:	e0bff817 	ldw	r2,-32(fp)
    f918:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f91c:	e0bffe17 	ldw	r2,-8(fp)
    f920:	0080100e 	bge	zero,r2,f964 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f924:	e0bfff17 	ldw	r2,-4(fp)
    f928:	1090000c 	andi	r2,r2,16384
    f92c:	1000101e 	bne	r2,zero,f970 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f930:	0001883a 	nop
    f934:	e0bffc17 	ldw	r2,-16(fp)
    f938:	10c00d17 	ldw	r3,52(r2)
    f93c:	e0bff517 	ldw	r2,-44(fp)
    f940:	1880051e 	bne	r3,r2,f958 <altera_avalon_jtag_uart_write+0x1b8>
    f944:	e0bffc17 	ldw	r2,-16(fp)
    f948:	10c00917 	ldw	r3,36(r2)
    f94c:	e0bffc17 	ldw	r2,-16(fp)
    f950:	10800117 	ldw	r2,4(r2)
    f954:	18bff736 	bltu	r3,r2,f934 <__alt_exception_stack_pointer+0xf800f934>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f958:	e0bffc17 	ldw	r2,-16(fp)
    f95c:	10800917 	ldw	r2,36(r2)
    f960:	1000051e 	bne	r2,zero,f978 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f964:	e0bffe17 	ldw	r2,-8(fp)
    f968:	00bfd016 	blt	zero,r2,f8ac <__alt_exception_stack_pointer+0xf800f8ac>
    f96c:	00000306 	br	f97c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f970:	0001883a 	nop
    f974:	00000106 	br	f97c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f978:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f97c:	e0fffd17 	ldw	r3,-12(fp)
    f980:	e0bff717 	ldw	r2,-36(fp)
    f984:	18800426 	beq	r3,r2,f998 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f988:	e0fffd17 	ldw	r3,-12(fp)
    f98c:	e0bff717 	ldw	r2,-36(fp)
    f990:	1885c83a 	sub	r2,r3,r2
    f994:	00000606 	br	f9b0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f998:	e0bfff17 	ldw	r2,-4(fp)
    f99c:	1090000c 	andi	r2,r2,16384
    f9a0:	10000226 	beq	r2,zero,f9ac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f9a4:	00bffd44 	movi	r2,-11
    f9a8:	00000106 	br	f9b0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f9ac:	00bffec4 	movi	r2,-5
}
    f9b0:	e037883a 	mov	sp,fp
    f9b4:	dfc00117 	ldw	ra,4(sp)
    f9b8:	df000017 	ldw	fp,0(sp)
    f9bc:	dec00204 	addi	sp,sp,8
    f9c0:	f800283a 	ret

0000f9c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f9c4:	defffa04 	addi	sp,sp,-24
    f9c8:	dfc00515 	stw	ra,20(sp)
    f9cc:	df000415 	stw	fp,16(sp)
    f9d0:	df000404 	addi	fp,sp,16
    f9d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f9d8:	0007883a 	mov	r3,zero
    f9dc:	e0bfff17 	ldw	r2,-4(fp)
    f9e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f9e4:	e0bfff17 	ldw	r2,-4(fp)
    f9e8:	10800104 	addi	r2,r2,4
    f9ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9f0:	0005303a 	rdctl	r2,status
    f9f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9f8:	e0fffd17 	ldw	r3,-12(fp)
    f9fc:	00bfff84 	movi	r2,-2
    fa00:	1884703a 	and	r2,r3,r2
    fa04:	1001703a 	wrctl	status,r2
  
  return context;
    fa08:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fa0c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fa10:	00104e40 	call	104e4 <alt_tick>
    fa14:	e0bffc17 	ldw	r2,-16(fp)
    fa18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa1c:	e0bffe17 	ldw	r2,-8(fp)
    fa20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fa24:	0001883a 	nop
    fa28:	e037883a 	mov	sp,fp
    fa2c:	dfc00117 	ldw	ra,4(sp)
    fa30:	df000017 	ldw	fp,0(sp)
    fa34:	dec00204 	addi	sp,sp,8
    fa38:	f800283a 	ret

0000fa3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fa3c:	defff804 	addi	sp,sp,-32
    fa40:	dfc00715 	stw	ra,28(sp)
    fa44:	df000615 	stw	fp,24(sp)
    fa48:	df000604 	addi	fp,sp,24
    fa4c:	e13ffc15 	stw	r4,-16(fp)
    fa50:	e17ffd15 	stw	r5,-12(fp)
    fa54:	e1bffe15 	stw	r6,-8(fp)
    fa58:	e1ffff15 	stw	r7,-4(fp)
    fa5c:	e0bfff17 	ldw	r2,-4(fp)
    fa60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fa64:	d0a71417 	ldw	r2,-25520(gp)
    fa68:	1000021e 	bne	r2,zero,fa74 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fa6c:	e0bffb17 	ldw	r2,-20(fp)
    fa70:	d0a71415 	stw	r2,-25520(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fa74:	e0bffc17 	ldw	r2,-16(fp)
    fa78:	10800104 	addi	r2,r2,4
    fa7c:	00c001c4 	movi	r3,7
    fa80:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fa84:	d8000015 	stw	zero,0(sp)
    fa88:	e1fffc17 	ldw	r7,-16(fp)
    fa8c:	01800074 	movhi	r6,1
    fa90:	31be7104 	addi	r6,r6,-1596
    fa94:	e17ffe17 	ldw	r5,-8(fp)
    fa98:	e13ffd17 	ldw	r4,-12(fp)
    fa9c:	000fdc40 	call	fdc4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    faa0:	0001883a 	nop
    faa4:	e037883a 	mov	sp,fp
    faa8:	dfc00117 	ldw	ra,4(sp)
    faac:	df000017 	ldw	fp,0(sp)
    fab0:	dec00204 	addi	sp,sp,8
    fab4:	f800283a 	ret

0000fab8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fab8:	defff504 	addi	sp,sp,-44
    fabc:	df000a15 	stw	fp,40(sp)
    fac0:	df000a04 	addi	fp,sp,40
    fac4:	e13ffc15 	stw	r4,-16(fp)
    fac8:	e17ffd15 	stw	r5,-12(fp)
    facc:	e1bffe15 	stw	r6,-8(fp)
    fad0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fad4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fad8:	d0a71417 	ldw	r2,-25520(gp)
  
  if (alt_ticks_per_second ())
    fadc:	10003c26 	beq	r2,zero,fbd0 <alt_alarm_start+0x118>
  {
    if (alarm)
    fae0:	e0bffc17 	ldw	r2,-16(fp)
    fae4:	10003826 	beq	r2,zero,fbc8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fae8:	e0bffc17 	ldw	r2,-16(fp)
    faec:	e0fffe17 	ldw	r3,-8(fp)
    faf0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    faf4:	e0bffc17 	ldw	r2,-16(fp)
    faf8:	e0ffff17 	ldw	r3,-4(fp)
    fafc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb00:	0005303a 	rdctl	r2,status
    fb04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb08:	e0fff917 	ldw	r3,-28(fp)
    fb0c:	00bfff84 	movi	r2,-2
    fb10:	1884703a 	and	r2,r3,r2
    fb14:	1001703a 	wrctl	status,r2
  
  return context;
    fb18:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fb1c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fb20:	d0a71517 	ldw	r2,-25516(gp)
      
      current_nticks = alt_nticks();
    fb24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fb28:	e0fffd17 	ldw	r3,-12(fp)
    fb2c:	e0bff617 	ldw	r2,-40(fp)
    fb30:	1885883a 	add	r2,r3,r2
    fb34:	10c00044 	addi	r3,r2,1
    fb38:	e0bffc17 	ldw	r2,-16(fp)
    fb3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fb40:	e0bffc17 	ldw	r2,-16(fp)
    fb44:	10c00217 	ldw	r3,8(r2)
    fb48:	e0bff617 	ldw	r2,-40(fp)
    fb4c:	1880042e 	bgeu	r3,r2,fb60 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fb50:	e0bffc17 	ldw	r2,-16(fp)
    fb54:	00c00044 	movi	r3,1
    fb58:	10c00405 	stb	r3,16(r2)
    fb5c:	00000206 	br	fb68 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fb60:	e0bffc17 	ldw	r2,-16(fp)
    fb64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fb68:	e0bffc17 	ldw	r2,-16(fp)
    fb6c:	d0e01104 	addi	r3,gp,-32700
    fb70:	e0fffa15 	stw	r3,-24(fp)
    fb74:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fb78:	e0bffb17 	ldw	r2,-20(fp)
    fb7c:	e0fffa17 	ldw	r3,-24(fp)
    fb80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fb84:	e0bffa17 	ldw	r2,-24(fp)
    fb88:	10c00017 	ldw	r3,0(r2)
    fb8c:	e0bffb17 	ldw	r2,-20(fp)
    fb90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fb94:	e0bffa17 	ldw	r2,-24(fp)
    fb98:	10800017 	ldw	r2,0(r2)
    fb9c:	e0fffb17 	ldw	r3,-20(fp)
    fba0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fba4:	e0bffa17 	ldw	r2,-24(fp)
    fba8:	e0fffb17 	ldw	r3,-20(fp)
    fbac:	10c00015 	stw	r3,0(r2)
    fbb0:	e0bff817 	ldw	r2,-32(fp)
    fbb4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbb8:	e0bff717 	ldw	r2,-36(fp)
    fbbc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fbc0:	0005883a 	mov	r2,zero
    fbc4:	00000306 	br	fbd4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fbc8:	00bffa84 	movi	r2,-22
    fbcc:	00000106 	br	fbd4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fbd0:	00bfde84 	movi	r2,-134
  }
}
    fbd4:	e037883a 	mov	sp,fp
    fbd8:	df000017 	ldw	fp,0(sp)
    fbdc:	dec00104 	addi	sp,sp,4
    fbe0:	f800283a 	ret

0000fbe4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fbe4:	deffff04 	addi	sp,sp,-4
    fbe8:	df000015 	stw	fp,0(sp)
    fbec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fbf0:	0001883a 	nop
    fbf4:	e037883a 	mov	sp,fp
    fbf8:	df000017 	ldw	fp,0(sp)
    fbfc:	dec00104 	addi	sp,sp,4
    fc00:	f800283a 	ret

0000fc04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc04:	defffe04 	addi	sp,sp,-8
    fc08:	dfc00115 	stw	ra,4(sp)
    fc0c:	df000015 	stw	fp,0(sp)
    fc10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc14:	d0a00f17 	ldw	r2,-32708(gp)
    fc18:	10000326 	beq	r2,zero,fc28 <alt_get_errno+0x24>
    fc1c:	d0a00f17 	ldw	r2,-32708(gp)
    fc20:	103ee83a 	callr	r2
    fc24:	00000106 	br	fc2c <alt_get_errno+0x28>
    fc28:	d0a70c04 	addi	r2,gp,-25552
}
    fc2c:	e037883a 	mov	sp,fp
    fc30:	dfc00117 	ldw	ra,4(sp)
    fc34:	df000017 	ldw	fp,0(sp)
    fc38:	dec00204 	addi	sp,sp,8
    fc3c:	f800283a 	ret

0000fc40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fc40:	defffa04 	addi	sp,sp,-24
    fc44:	dfc00515 	stw	ra,20(sp)
    fc48:	df000415 	stw	fp,16(sp)
    fc4c:	df000404 	addi	fp,sp,16
    fc50:	e13ffe15 	stw	r4,-8(fp)
    fc54:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fc58:	e0bffe17 	ldw	r2,-8(fp)
    fc5c:	10000326 	beq	r2,zero,fc6c <alt_dev_llist_insert+0x2c>
    fc60:	e0bffe17 	ldw	r2,-8(fp)
    fc64:	10800217 	ldw	r2,8(r2)
    fc68:	1000061e 	bne	r2,zero,fc84 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fc6c:	000fc040 	call	fc04 <alt_get_errno>
    fc70:	1007883a 	mov	r3,r2
    fc74:	00800584 	movi	r2,22
    fc78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fc7c:	00bffa84 	movi	r2,-22
    fc80:	00001306 	br	fcd0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fc84:	e0bffe17 	ldw	r2,-8(fp)
    fc88:	e0ffff17 	ldw	r3,-4(fp)
    fc8c:	e0fffc15 	stw	r3,-16(fp)
    fc90:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fc94:	e0bffd17 	ldw	r2,-12(fp)
    fc98:	e0fffc17 	ldw	r3,-16(fp)
    fc9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fca0:	e0bffc17 	ldw	r2,-16(fp)
    fca4:	10c00017 	ldw	r3,0(r2)
    fca8:	e0bffd17 	ldw	r2,-12(fp)
    fcac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	10800017 	ldw	r2,0(r2)
    fcb8:	e0fffd17 	ldw	r3,-12(fp)
    fcbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fcc0:	e0bffc17 	ldw	r2,-16(fp)
    fcc4:	e0fffd17 	ldw	r3,-12(fp)
    fcc8:	10c00015 	stw	r3,0(r2)

  return 0;  
    fccc:	0005883a 	mov	r2,zero
}
    fcd0:	e037883a 	mov	sp,fp
    fcd4:	dfc00117 	ldw	ra,4(sp)
    fcd8:	df000017 	ldw	fp,0(sp)
    fcdc:	dec00204 	addi	sp,sp,8
    fce0:	f800283a 	ret

0000fce4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fce4:	defffd04 	addi	sp,sp,-12
    fce8:	dfc00215 	stw	ra,8(sp)
    fcec:	df000115 	stw	fp,4(sp)
    fcf0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fcf4:	00800074 	movhi	r2,1
    fcf8:	10830204 	addi	r2,r2,3080
    fcfc:	e0bfff15 	stw	r2,-4(fp)
    fd00:	00000606 	br	fd1c <_do_ctors+0x38>
        (*ctor) (); 
    fd04:	e0bfff17 	ldw	r2,-4(fp)
    fd08:	10800017 	ldw	r2,0(r2)
    fd0c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fd10:	e0bfff17 	ldw	r2,-4(fp)
    fd14:	10bfff04 	addi	r2,r2,-4
    fd18:	e0bfff15 	stw	r2,-4(fp)
    fd1c:	e0ffff17 	ldw	r3,-4(fp)
    fd20:	00800074 	movhi	r2,1
    fd24:	10830304 	addi	r2,r2,3084
    fd28:	18bff62e 	bgeu	r3,r2,fd04 <__alt_exception_stack_pointer+0xf800fd04>
        (*ctor) (); 
}
    fd2c:	0001883a 	nop
    fd30:	e037883a 	mov	sp,fp
    fd34:	dfc00117 	ldw	ra,4(sp)
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00204 	addi	sp,sp,8
    fd40:	f800283a 	ret

0000fd44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fd44:	defffd04 	addi	sp,sp,-12
    fd48:	dfc00215 	stw	ra,8(sp)
    fd4c:	df000115 	stw	fp,4(sp)
    fd50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fd54:	00800074 	movhi	r2,1
    fd58:	10830204 	addi	r2,r2,3080
    fd5c:	e0bfff15 	stw	r2,-4(fp)
    fd60:	00000606 	br	fd7c <_do_dtors+0x38>
        (*dtor) (); 
    fd64:	e0bfff17 	ldw	r2,-4(fp)
    fd68:	10800017 	ldw	r2,0(r2)
    fd6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fd70:	e0bfff17 	ldw	r2,-4(fp)
    fd74:	10bfff04 	addi	r2,r2,-4
    fd78:	e0bfff15 	stw	r2,-4(fp)
    fd7c:	e0ffff17 	ldw	r3,-4(fp)
    fd80:	00800074 	movhi	r2,1
    fd84:	10830304 	addi	r2,r2,3084
    fd88:	18bff62e 	bgeu	r3,r2,fd64 <__alt_exception_stack_pointer+0xf800fd64>
        (*dtor) (); 
}
    fd8c:	0001883a 	nop
    fd90:	e037883a 	mov	sp,fp
    fd94:	dfc00117 	ldw	ra,4(sp)
    fd98:	df000017 	ldw	fp,0(sp)
    fd9c:	dec00204 	addi	sp,sp,8
    fda0:	f800283a 	ret

0000fda4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    fda4:	deffff04 	addi	sp,sp,-4
    fda8:	df000015 	stw	fp,0(sp)
    fdac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    fdb0:	0001883a 	nop
    fdb4:	e037883a 	mov	sp,fp
    fdb8:	df000017 	ldw	fp,0(sp)
    fdbc:	dec00104 	addi	sp,sp,4
    fdc0:	f800283a 	ret

0000fdc4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    fdc4:	defff904 	addi	sp,sp,-28
    fdc8:	dfc00615 	stw	ra,24(sp)
    fdcc:	df000515 	stw	fp,20(sp)
    fdd0:	df000504 	addi	fp,sp,20
    fdd4:	e13ffc15 	stw	r4,-16(fp)
    fdd8:	e17ffd15 	stw	r5,-12(fp)
    fddc:	e1bffe15 	stw	r6,-8(fp)
    fde0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    fde4:	e0800217 	ldw	r2,8(fp)
    fde8:	d8800015 	stw	r2,0(sp)
    fdec:	e1ffff17 	ldw	r7,-4(fp)
    fdf0:	e1bffe17 	ldw	r6,-8(fp)
    fdf4:	e17ffd17 	ldw	r5,-12(fp)
    fdf8:	e13ffc17 	ldw	r4,-16(fp)
    fdfc:	000ff740 	call	ff74 <alt_iic_isr_register>
}  
    fe00:	e037883a 	mov	sp,fp
    fe04:	dfc00117 	ldw	ra,4(sp)
    fe08:	df000017 	ldw	fp,0(sp)
    fe0c:	dec00204 	addi	sp,sp,8
    fe10:	f800283a 	ret

0000fe14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    fe14:	defff904 	addi	sp,sp,-28
    fe18:	df000615 	stw	fp,24(sp)
    fe1c:	df000604 	addi	fp,sp,24
    fe20:	e13ffe15 	stw	r4,-8(fp)
    fe24:	e17fff15 	stw	r5,-4(fp)
    fe28:	e0bfff17 	ldw	r2,-4(fp)
    fe2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe30:	0005303a 	rdctl	r2,status
    fe34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe38:	e0fffb17 	ldw	r3,-20(fp)
    fe3c:	00bfff84 	movi	r2,-2
    fe40:	1884703a 	and	r2,r3,r2
    fe44:	1001703a 	wrctl	status,r2
  
  return context;
    fe48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fe4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    fe50:	00c00044 	movi	r3,1
    fe54:	e0bffa17 	ldw	r2,-24(fp)
    fe58:	1884983a 	sll	r2,r3,r2
    fe5c:	1007883a 	mov	r3,r2
    fe60:	d0a71317 	ldw	r2,-25524(gp)
    fe64:	1884b03a 	or	r2,r3,r2
    fe68:	d0a71315 	stw	r2,-25524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fe6c:	d0a71317 	ldw	r2,-25524(gp)
    fe70:	100170fa 	wrctl	ienable,r2
    fe74:	e0bffc17 	ldw	r2,-16(fp)
    fe78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe7c:	e0bffd17 	ldw	r2,-12(fp)
    fe80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fe84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    fe88:	0001883a 	nop
}
    fe8c:	e037883a 	mov	sp,fp
    fe90:	df000017 	ldw	fp,0(sp)
    fe94:	dec00104 	addi	sp,sp,4
    fe98:	f800283a 	ret

0000fe9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    fe9c:	defff904 	addi	sp,sp,-28
    fea0:	df000615 	stw	fp,24(sp)
    fea4:	df000604 	addi	fp,sp,24
    fea8:	e13ffe15 	stw	r4,-8(fp)
    feac:	e17fff15 	stw	r5,-4(fp)
    feb0:	e0bfff17 	ldw	r2,-4(fp)
    feb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    feb8:	0005303a 	rdctl	r2,status
    febc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fec0:	e0fffb17 	ldw	r3,-20(fp)
    fec4:	00bfff84 	movi	r2,-2
    fec8:	1884703a 	and	r2,r3,r2
    fecc:	1001703a 	wrctl	status,r2
  
  return context;
    fed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fed4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    fed8:	00c00044 	movi	r3,1
    fedc:	e0bffa17 	ldw	r2,-24(fp)
    fee0:	1884983a 	sll	r2,r3,r2
    fee4:	0084303a 	nor	r2,zero,r2
    fee8:	1007883a 	mov	r3,r2
    feec:	d0a71317 	ldw	r2,-25524(gp)
    fef0:	1884703a 	and	r2,r3,r2
    fef4:	d0a71315 	stw	r2,-25524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fef8:	d0a71317 	ldw	r2,-25524(gp)
    fefc:	100170fa 	wrctl	ienable,r2
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff08:	e0bffd17 	ldw	r2,-12(fp)
    ff0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ff10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ff14:	0001883a 	nop
}
    ff18:	e037883a 	mov	sp,fp
    ff1c:	df000017 	ldw	fp,0(sp)
    ff20:	dec00104 	addi	sp,sp,4
    ff24:	f800283a 	ret

0000ff28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ff28:	defffc04 	addi	sp,sp,-16
    ff2c:	df000315 	stw	fp,12(sp)
    ff30:	df000304 	addi	fp,sp,12
    ff34:	e13ffe15 	stw	r4,-8(fp)
    ff38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ff3c:	000530fa 	rdctl	r2,ienable
    ff40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ff44:	00c00044 	movi	r3,1
    ff48:	e0bfff17 	ldw	r2,-4(fp)
    ff4c:	1884983a 	sll	r2,r3,r2
    ff50:	1007883a 	mov	r3,r2
    ff54:	e0bffd17 	ldw	r2,-12(fp)
    ff58:	1884703a 	and	r2,r3,r2
    ff5c:	1004c03a 	cmpne	r2,r2,zero
    ff60:	10803fcc 	andi	r2,r2,255
}
    ff64:	e037883a 	mov	sp,fp
    ff68:	df000017 	ldw	fp,0(sp)
    ff6c:	dec00104 	addi	sp,sp,4
    ff70:	f800283a 	ret

0000ff74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ff74:	defff504 	addi	sp,sp,-44
    ff78:	dfc00a15 	stw	ra,40(sp)
    ff7c:	df000915 	stw	fp,36(sp)
    ff80:	df000904 	addi	fp,sp,36
    ff84:	e13ffc15 	stw	r4,-16(fp)
    ff88:	e17ffd15 	stw	r5,-12(fp)
    ff8c:	e1bffe15 	stw	r6,-8(fp)
    ff90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ff94:	00bffa84 	movi	r2,-22
    ff98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ff9c:	e0bffd17 	ldw	r2,-12(fp)
    ffa0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ffa4:	e0bff817 	ldw	r2,-32(fp)
    ffa8:	10800808 	cmpgei	r2,r2,32
    ffac:	1000271e 	bne	r2,zero,1004c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffb0:	0005303a 	rdctl	r2,status
    ffb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffb8:	e0fffb17 	ldw	r3,-20(fp)
    ffbc:	00bfff84 	movi	r2,-2
    ffc0:	1884703a 	and	r2,r3,r2
    ffc4:	1001703a 	wrctl	status,r2
  
  return context;
    ffc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ffcc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    ffd0:	00800074 	movhi	r2,1
    ffd4:	1091d404 	addi	r2,r2,18256
    ffd8:	e0fff817 	ldw	r3,-32(fp)
    ffdc:	180690fa 	slli	r3,r3,3
    ffe0:	10c5883a 	add	r2,r2,r3
    ffe4:	e0fffe17 	ldw	r3,-8(fp)
    ffe8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ffec:	00800074 	movhi	r2,1
    fff0:	1091d404 	addi	r2,r2,18256
    fff4:	e0fff817 	ldw	r3,-32(fp)
    fff8:	180690fa 	slli	r3,r3,3
    fffc:	10c5883a 	add	r2,r2,r3
   10000:	10800104 	addi	r2,r2,4
   10004:	e0ffff17 	ldw	r3,-4(fp)
   10008:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1000c:	e0bffe17 	ldw	r2,-8(fp)
   10010:	10000526 	beq	r2,zero,10028 <alt_iic_isr_register+0xb4>
   10014:	e0bff817 	ldw	r2,-32(fp)
   10018:	100b883a 	mov	r5,r2
   1001c:	e13ffc17 	ldw	r4,-16(fp)
   10020:	000fe140 	call	fe14 <alt_ic_irq_enable>
   10024:	00000406 	br	10038 <alt_iic_isr_register+0xc4>
   10028:	e0bff817 	ldw	r2,-32(fp)
   1002c:	100b883a 	mov	r5,r2
   10030:	e13ffc17 	ldw	r4,-16(fp)
   10034:	000fe9c0 	call	fe9c <alt_ic_irq_disable>
   10038:	e0bff715 	stw	r2,-36(fp)
   1003c:	e0bffa17 	ldw	r2,-24(fp)
   10040:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10044:	e0bff917 	ldw	r2,-28(fp)
   10048:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1004c:	e0bff717 	ldw	r2,-36(fp)
}
   10050:	e037883a 	mov	sp,fp
   10054:	dfc00117 	ldw	ra,4(sp)
   10058:	df000017 	ldw	fp,0(sp)
   1005c:	dec00204 	addi	sp,sp,8
   10060:	f800283a 	ret

00010064 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10064:	defff804 	addi	sp,sp,-32
   10068:	dfc00715 	stw	ra,28(sp)
   1006c:	df000615 	stw	fp,24(sp)
   10070:	dc000515 	stw	r16,20(sp)
   10074:	df000604 	addi	fp,sp,24
   10078:	e13ffb15 	stw	r4,-20(fp)
   1007c:	e17ffc15 	stw	r5,-16(fp)
   10080:	e1bffd15 	stw	r6,-12(fp)
   10084:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10088:	e1bffe17 	ldw	r6,-8(fp)
   1008c:	e17ffd17 	ldw	r5,-12(fp)
   10090:	e13ffc17 	ldw	r4,-16(fp)
   10094:	00102ec0 	call	102ec <open>
   10098:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1009c:	e0bffa17 	ldw	r2,-24(fp)
   100a0:	10002216 	blt	r2,zero,1012c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   100a4:	04000074 	movhi	r16,1
   100a8:	84060404 	addi	r16,r16,6160
   100ac:	e0bffa17 	ldw	r2,-24(fp)
   100b0:	01400304 	movi	r5,12
   100b4:	1009883a 	mov	r4,r2
   100b8:	00009780 	call	978 <__mulsi3>
   100bc:	8085883a 	add	r2,r16,r2
   100c0:	10c00017 	ldw	r3,0(r2)
   100c4:	e0bffb17 	ldw	r2,-20(fp)
   100c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   100cc:	04000074 	movhi	r16,1
   100d0:	84060404 	addi	r16,r16,6160
   100d4:	e0bffa17 	ldw	r2,-24(fp)
   100d8:	01400304 	movi	r5,12
   100dc:	1009883a 	mov	r4,r2
   100e0:	00009780 	call	978 <__mulsi3>
   100e4:	8085883a 	add	r2,r16,r2
   100e8:	10800104 	addi	r2,r2,4
   100ec:	10c00017 	ldw	r3,0(r2)
   100f0:	e0bffb17 	ldw	r2,-20(fp)
   100f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   100f8:	04000074 	movhi	r16,1
   100fc:	84060404 	addi	r16,r16,6160
   10100:	e0bffa17 	ldw	r2,-24(fp)
   10104:	01400304 	movi	r5,12
   10108:	1009883a 	mov	r4,r2
   1010c:	00009780 	call	978 <__mulsi3>
   10110:	8085883a 	add	r2,r16,r2
   10114:	10800204 	addi	r2,r2,8
   10118:	10c00017 	ldw	r3,0(r2)
   1011c:	e0bffb17 	ldw	r2,-20(fp)
   10120:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10124:	e13ffa17 	ldw	r4,-24(fp)
   10128:	000df800 	call	df80 <alt_release_fd>
  }
} 
   1012c:	0001883a 	nop
   10130:	e6ffff04 	addi	sp,fp,-4
   10134:	dfc00217 	ldw	ra,8(sp)
   10138:	df000117 	ldw	fp,4(sp)
   1013c:	dc000017 	ldw	r16,0(sp)
   10140:	dec00304 	addi	sp,sp,12
   10144:	f800283a 	ret

00010148 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10148:	defffb04 	addi	sp,sp,-20
   1014c:	dfc00415 	stw	ra,16(sp)
   10150:	df000315 	stw	fp,12(sp)
   10154:	df000304 	addi	fp,sp,12
   10158:	e13ffd15 	stw	r4,-12(fp)
   1015c:	e17ffe15 	stw	r5,-8(fp)
   10160:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10164:	01c07fc4 	movi	r7,511
   10168:	01800044 	movi	r6,1
   1016c:	e17ffd17 	ldw	r5,-12(fp)
   10170:	01000074 	movhi	r4,1
   10174:	21060704 	addi	r4,r4,6172
   10178:	00100640 	call	10064 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1017c:	01c07fc4 	movi	r7,511
   10180:	000d883a 	mov	r6,zero
   10184:	e17ffe17 	ldw	r5,-8(fp)
   10188:	01000074 	movhi	r4,1
   1018c:	21060404 	addi	r4,r4,6160
   10190:	00100640 	call	10064 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10194:	01c07fc4 	movi	r7,511
   10198:	01800044 	movi	r6,1
   1019c:	e17fff17 	ldw	r5,-4(fp)
   101a0:	01000074 	movhi	r4,1
   101a4:	21060a04 	addi	r4,r4,6184
   101a8:	00100640 	call	10064 <alt_open_fd>
}  
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   101c4:	defffe04 	addi	sp,sp,-8
   101c8:	dfc00115 	stw	ra,4(sp)
   101cc:	df000015 	stw	fp,0(sp)
   101d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   101d4:	d0a00f17 	ldw	r2,-32708(gp)
   101d8:	10000326 	beq	r2,zero,101e8 <alt_get_errno+0x24>
   101dc:	d0a00f17 	ldw	r2,-32708(gp)
   101e0:	103ee83a 	callr	r2
   101e4:	00000106 	br	101ec <alt_get_errno+0x28>
   101e8:	d0a70c04 	addi	r2,gp,-25552
}
   101ec:	e037883a 	mov	sp,fp
   101f0:	dfc00117 	ldw	ra,4(sp)
   101f4:	df000017 	ldw	fp,0(sp)
   101f8:	dec00204 	addi	sp,sp,8
   101fc:	f800283a 	ret

00010200 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10200:	defffb04 	addi	sp,sp,-20
   10204:	dfc00415 	stw	ra,16(sp)
   10208:	df000315 	stw	fp,12(sp)
   1020c:	dc000215 	stw	r16,8(sp)
   10210:	df000304 	addi	fp,sp,12
   10214:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10218:	e0bffe17 	ldw	r2,-8(fp)
   1021c:	10800217 	ldw	r2,8(r2)
   10220:	10d00034 	orhi	r3,r2,16384
   10224:	e0bffe17 	ldw	r2,-8(fp)
   10228:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1022c:	e03ffd15 	stw	zero,-12(fp)
   10230:	00002306 	br	102c0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10234:	04000074 	movhi	r16,1
   10238:	84060404 	addi	r16,r16,6160
   1023c:	e0bffd17 	ldw	r2,-12(fp)
   10240:	01400304 	movi	r5,12
   10244:	1009883a 	mov	r4,r2
   10248:	00009780 	call	978 <__mulsi3>
   1024c:	8085883a 	add	r2,r16,r2
   10250:	10c00017 	ldw	r3,0(r2)
   10254:	e0bffe17 	ldw	r2,-8(fp)
   10258:	10800017 	ldw	r2,0(r2)
   1025c:	1880151e 	bne	r3,r2,102b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10260:	04000074 	movhi	r16,1
   10264:	84060404 	addi	r16,r16,6160
   10268:	e0bffd17 	ldw	r2,-12(fp)
   1026c:	01400304 	movi	r5,12
   10270:	1009883a 	mov	r4,r2
   10274:	00009780 	call	978 <__mulsi3>
   10278:	8085883a 	add	r2,r16,r2
   1027c:	10800204 	addi	r2,r2,8
   10280:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10284:	10000b0e 	bge	r2,zero,102b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10288:	01400304 	movi	r5,12
   1028c:	e13ffd17 	ldw	r4,-12(fp)
   10290:	00009780 	call	978 <__mulsi3>
   10294:	1007883a 	mov	r3,r2
   10298:	00800074 	movhi	r2,1
   1029c:	10860404 	addi	r2,r2,6160
   102a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   102a4:	e0bffe17 	ldw	r2,-8(fp)
   102a8:	18800226 	beq	r3,r2,102b4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   102ac:	00bffcc4 	movi	r2,-13
   102b0:	00000806 	br	102d4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   102b4:	e0bffd17 	ldw	r2,-12(fp)
   102b8:	10800044 	addi	r2,r2,1
   102bc:	e0bffd15 	stw	r2,-12(fp)
   102c0:	d0a00a17 	ldw	r2,-32728(gp)
   102c4:	1007883a 	mov	r3,r2
   102c8:	e0bffd17 	ldw	r2,-12(fp)
   102cc:	18bfd92e 	bgeu	r3,r2,10234 <__alt_exception_stack_pointer+0xf8010234>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   102d0:	0005883a 	mov	r2,zero
}
   102d4:	e6ffff04 	addi	sp,fp,-4
   102d8:	dfc00217 	ldw	ra,8(sp)
   102dc:	df000117 	ldw	fp,4(sp)
   102e0:	dc000017 	ldw	r16,0(sp)
   102e4:	dec00304 	addi	sp,sp,12
   102e8:	f800283a 	ret

000102ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   102ec:	defff604 	addi	sp,sp,-40
   102f0:	dfc00915 	stw	ra,36(sp)
   102f4:	df000815 	stw	fp,32(sp)
   102f8:	df000804 	addi	fp,sp,32
   102fc:	e13ffd15 	stw	r4,-12(fp)
   10300:	e17ffe15 	stw	r5,-8(fp)
   10304:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10308:	00bfffc4 	movi	r2,-1
   1030c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10310:	00bffb44 	movi	r2,-19
   10314:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10318:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1031c:	d1600804 	addi	r5,gp,-32736
   10320:	e13ffd17 	ldw	r4,-12(fp)
   10324:	000d90c0 	call	d90c <alt_find_dev>
   10328:	e0bff815 	stw	r2,-32(fp)
   1032c:	e0bff817 	ldw	r2,-32(fp)
   10330:	1000051e 	bne	r2,zero,10348 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10334:	e13ffd17 	ldw	r4,-12(fp)
   10338:	00106100 	call	10610 <alt_find_file>
   1033c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10340:	00800044 	movi	r2,1
   10344:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10348:	e0bff817 	ldw	r2,-32(fp)
   1034c:	10002b26 	beq	r2,zero,103fc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10350:	e13ff817 	ldw	r4,-32(fp)
   10354:	00107180 	call	10718 <alt_get_fd>
   10358:	e0bff915 	stw	r2,-28(fp)
   1035c:	e0bff917 	ldw	r2,-28(fp)
   10360:	1000030e 	bge	r2,zero,10370 <open+0x84>
    {
      status = index;
   10364:	e0bff917 	ldw	r2,-28(fp)
   10368:	e0bffa15 	stw	r2,-24(fp)
   1036c:	00002506 	br	10404 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   10370:	01400304 	movi	r5,12
   10374:	e13ff917 	ldw	r4,-28(fp)
   10378:	00009780 	call	978 <__mulsi3>
   1037c:	1007883a 	mov	r3,r2
   10380:	00800074 	movhi	r2,1
   10384:	10860404 	addi	r2,r2,6160
   10388:	1885883a 	add	r2,r3,r2
   1038c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10390:	e0fffe17 	ldw	r3,-8(fp)
   10394:	00900034 	movhi	r2,16384
   10398:	10bfffc4 	addi	r2,r2,-1
   1039c:	1886703a 	and	r3,r3,r2
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   103a8:	e0bffb17 	ldw	r2,-20(fp)
   103ac:	1000051e 	bne	r2,zero,103c4 <open+0xd8>
   103b0:	e13ffc17 	ldw	r4,-16(fp)
   103b4:	00102000 	call	10200 <alt_file_locked>
   103b8:	e0bffa15 	stw	r2,-24(fp)
   103bc:	e0bffa17 	ldw	r2,-24(fp)
   103c0:	10001016 	blt	r2,zero,10404 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   103c4:	e0bff817 	ldw	r2,-32(fp)
   103c8:	10800317 	ldw	r2,12(r2)
   103cc:	10000826 	beq	r2,zero,103f0 <open+0x104>
   103d0:	e0bff817 	ldw	r2,-32(fp)
   103d4:	10800317 	ldw	r2,12(r2)
   103d8:	e1ffff17 	ldw	r7,-4(fp)
   103dc:	e1bffe17 	ldw	r6,-8(fp)
   103e0:	e17ffd17 	ldw	r5,-12(fp)
   103e4:	e13ffc17 	ldw	r4,-16(fp)
   103e8:	103ee83a 	callr	r2
   103ec:	00000106 	br	103f4 <open+0x108>
   103f0:	0005883a 	mov	r2,zero
   103f4:	e0bffa15 	stw	r2,-24(fp)
   103f8:	00000206 	br	10404 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   103fc:	00bffb44 	movi	r2,-19
   10400:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10404:	e0bffa17 	ldw	r2,-24(fp)
   10408:	1000090e 	bge	r2,zero,10430 <open+0x144>
  {
    alt_release_fd (index);  
   1040c:	e13ff917 	ldw	r4,-28(fp)
   10410:	000df800 	call	df80 <alt_release_fd>
    ALT_ERRNO = -status;
   10414:	00101c40 	call	101c4 <alt_get_errno>
   10418:	1007883a 	mov	r3,r2
   1041c:	e0bffa17 	ldw	r2,-24(fp)
   10420:	0085c83a 	sub	r2,zero,r2
   10424:	18800015 	stw	r2,0(r3)
    return -1;
   10428:	00bfffc4 	movi	r2,-1
   1042c:	00000106 	br	10434 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   10430:	e0bff917 	ldw	r2,-28(fp)
}
   10434:	e037883a 	mov	sp,fp
   10438:	dfc00117 	ldw	ra,4(sp)
   1043c:	df000017 	ldw	fp,0(sp)
   10440:	dec00204 	addi	sp,sp,8
   10444:	f800283a 	ret

00010448 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10448:	defffa04 	addi	sp,sp,-24
   1044c:	df000515 	stw	fp,20(sp)
   10450:	df000504 	addi	fp,sp,20
   10454:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10458:	0005303a 	rdctl	r2,status
   1045c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10460:	e0fffc17 	ldw	r3,-16(fp)
   10464:	00bfff84 	movi	r2,-2
   10468:	1884703a 	and	r2,r3,r2
   1046c:	1001703a 	wrctl	status,r2
  
  return context;
   10470:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10474:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10478:	e0bfff17 	ldw	r2,-4(fp)
   1047c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10480:	e0bffd17 	ldw	r2,-12(fp)
   10484:	10800017 	ldw	r2,0(r2)
   10488:	e0fffd17 	ldw	r3,-12(fp)
   1048c:	18c00117 	ldw	r3,4(r3)
   10490:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10494:	e0bffd17 	ldw	r2,-12(fp)
   10498:	10800117 	ldw	r2,4(r2)
   1049c:	e0fffd17 	ldw	r3,-12(fp)
   104a0:	18c00017 	ldw	r3,0(r3)
   104a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   104a8:	e0bffd17 	ldw	r2,-12(fp)
   104ac:	e0fffd17 	ldw	r3,-12(fp)
   104b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   104b4:	e0bffd17 	ldw	r2,-12(fp)
   104b8:	e0fffd17 	ldw	r3,-12(fp)
   104bc:	10c00015 	stw	r3,0(r2)
   104c0:	e0bffb17 	ldw	r2,-20(fp)
   104c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   104d0:	0001883a 	nop
   104d4:	e037883a 	mov	sp,fp
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   104e0:	f800283a 	ret

000104e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   104e4:	defffb04 	addi	sp,sp,-20
   104e8:	dfc00415 	stw	ra,16(sp)
   104ec:	df000315 	stw	fp,12(sp)
   104f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   104f4:	d0a01117 	ldw	r2,-32700(gp)
   104f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   104fc:	d0a71517 	ldw	r2,-25516(gp)
   10500:	10800044 	addi	r2,r2,1
   10504:	d0a71515 	stw	r2,-25516(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10508:	00002e06 	br	105c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1050c:	e0bffd17 	ldw	r2,-12(fp)
   10510:	10800017 	ldw	r2,0(r2)
   10514:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10518:	e0bffd17 	ldw	r2,-12(fp)
   1051c:	10800403 	ldbu	r2,16(r2)
   10520:	10803fcc 	andi	r2,r2,255
   10524:	10000426 	beq	r2,zero,10538 <alt_tick+0x54>
   10528:	d0a71517 	ldw	r2,-25516(gp)
   1052c:	1000021e 	bne	r2,zero,10538 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10530:	e0bffd17 	ldw	r2,-12(fp)
   10534:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10538:	e0bffd17 	ldw	r2,-12(fp)
   1053c:	10800217 	ldw	r2,8(r2)
   10540:	d0e71517 	ldw	r3,-25516(gp)
   10544:	18801d36 	bltu	r3,r2,105bc <alt_tick+0xd8>
   10548:	e0bffd17 	ldw	r2,-12(fp)
   1054c:	10800403 	ldbu	r2,16(r2)
   10550:	10803fcc 	andi	r2,r2,255
   10554:	1000191e 	bne	r2,zero,105bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10558:	e0bffd17 	ldw	r2,-12(fp)
   1055c:	10800317 	ldw	r2,12(r2)
   10560:	e0fffd17 	ldw	r3,-12(fp)
   10564:	18c00517 	ldw	r3,20(r3)
   10568:	1809883a 	mov	r4,r3
   1056c:	103ee83a 	callr	r2
   10570:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10574:	e0bfff17 	ldw	r2,-4(fp)
   10578:	1000031e 	bne	r2,zero,10588 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1057c:	e13ffd17 	ldw	r4,-12(fp)
   10580:	00104480 	call	10448 <alt_alarm_stop>
   10584:	00000d06 	br	105bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10588:	e0bffd17 	ldw	r2,-12(fp)
   1058c:	10c00217 	ldw	r3,8(r2)
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	1887883a 	add	r3,r3,r2
   10598:	e0bffd17 	ldw	r2,-12(fp)
   1059c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   105a0:	e0bffd17 	ldw	r2,-12(fp)
   105a4:	10c00217 	ldw	r3,8(r2)
   105a8:	d0a71517 	ldw	r2,-25516(gp)
   105ac:	1880032e 	bgeu	r3,r2,105bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   105b0:	e0bffd17 	ldw	r2,-12(fp)
   105b4:	00c00044 	movi	r3,1
   105b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   105bc:	e0bffe17 	ldw	r2,-8(fp)
   105c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   105c4:	e0fffd17 	ldw	r3,-12(fp)
   105c8:	d0a01104 	addi	r2,gp,-32700
   105cc:	18bfcf1e 	bne	r3,r2,1050c <__alt_exception_stack_pointer+0xf801050c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   105d0:	0001883a 	nop
}
   105d4:	0001883a 	nop
   105d8:	e037883a 	mov	sp,fp
   105dc:	dfc00117 	ldw	ra,4(sp)
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00204 	addi	sp,sp,8
   105e8:	f800283a 	ret

000105ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   105ec:	deffff04 	addi	sp,sp,-4
   105f0:	df000015 	stw	fp,0(sp)
   105f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   105f8:	000170fa 	wrctl	ienable,zero
}
   105fc:	0001883a 	nop
   10600:	e037883a 	mov	sp,fp
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00104 	addi	sp,sp,4
   1060c:	f800283a 	ret

00010610 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10610:	defffb04 	addi	sp,sp,-20
   10614:	dfc00415 	stw	ra,16(sp)
   10618:	df000315 	stw	fp,12(sp)
   1061c:	df000304 	addi	fp,sp,12
   10620:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10624:	d0a00617 	ldw	r2,-32744(gp)
   10628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1062c:	00003106 	br	106f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10630:	e0bffd17 	ldw	r2,-12(fp)
   10634:	10800217 	ldw	r2,8(r2)
   10638:	1009883a 	mov	r4,r2
   1063c:	00080c00 	call	80c0 <strlen>
   10640:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10644:	e0bffd17 	ldw	r2,-12(fp)
   10648:	10c00217 	ldw	r3,8(r2)
   1064c:	e0bffe17 	ldw	r2,-8(fp)
   10650:	10bfffc4 	addi	r2,r2,-1
   10654:	1885883a 	add	r2,r3,r2
   10658:	10800003 	ldbu	r2,0(r2)
   1065c:	10803fcc 	andi	r2,r2,255
   10660:	1080201c 	xori	r2,r2,128
   10664:	10bfe004 	addi	r2,r2,-128
   10668:	10800bd8 	cmpnei	r2,r2,47
   1066c:	1000031e 	bne	r2,zero,1067c <alt_find_file+0x6c>
    {
      len -= 1;
   10670:	e0bffe17 	ldw	r2,-8(fp)
   10674:	10bfffc4 	addi	r2,r2,-1
   10678:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1067c:	e0bffe17 	ldw	r2,-8(fp)
   10680:	e0ffff17 	ldw	r3,-4(fp)
   10684:	1885883a 	add	r2,r3,r2
   10688:	10800003 	ldbu	r2,0(r2)
   1068c:	10803fcc 	andi	r2,r2,255
   10690:	1080201c 	xori	r2,r2,128
   10694:	10bfe004 	addi	r2,r2,-128
   10698:	10800be0 	cmpeqi	r2,r2,47
   1069c:	1000081e 	bne	r2,zero,106c0 <alt_find_file+0xb0>
   106a0:	e0bffe17 	ldw	r2,-8(fp)
   106a4:	e0ffff17 	ldw	r3,-4(fp)
   106a8:	1885883a 	add	r2,r3,r2
   106ac:	10800003 	ldbu	r2,0(r2)
   106b0:	10803fcc 	andi	r2,r2,255
   106b4:	1080201c 	xori	r2,r2,128
   106b8:	10bfe004 	addi	r2,r2,-128
   106bc:	10000a1e 	bne	r2,zero,106e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	10800217 	ldw	r2,8(r2)
   106c8:	e0fffe17 	ldw	r3,-8(fp)
   106cc:	180d883a 	mov	r6,r3
   106d0:	e17fff17 	ldw	r5,-4(fp)
   106d4:	1009883a 	mov	r4,r2
   106d8:	00108c40 	call	108c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   106dc:	1000021e 	bne	r2,zero,106e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   106e0:	e0bffd17 	ldw	r2,-12(fp)
   106e4:	00000706 	br	10704 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   106e8:	e0bffd17 	ldw	r2,-12(fp)
   106ec:	10800017 	ldw	r2,0(r2)
   106f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   106f4:	e0fffd17 	ldw	r3,-12(fp)
   106f8:	d0a00604 	addi	r2,gp,-32744
   106fc:	18bfcc1e 	bne	r3,r2,10630 <__alt_exception_stack_pointer+0xf8010630>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10700:	0005883a 	mov	r2,zero
}
   10704:	e037883a 	mov	sp,fp
   10708:	dfc00117 	ldw	ra,4(sp)
   1070c:	df000017 	ldw	fp,0(sp)
   10710:	dec00204 	addi	sp,sp,8
   10714:	f800283a 	ret

00010718 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10718:	defffa04 	addi	sp,sp,-24
   1071c:	dfc00515 	stw	ra,20(sp)
   10720:	df000415 	stw	fp,16(sp)
   10724:	dc000315 	stw	r16,12(sp)
   10728:	df000404 	addi	fp,sp,16
   1072c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10730:	00bffa04 	movi	r2,-24
   10734:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10738:	e03ffc15 	stw	zero,-16(fp)
   1073c:	00001d06 	br	107b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   10740:	04000074 	movhi	r16,1
   10744:	84060404 	addi	r16,r16,6160
   10748:	e0bffc17 	ldw	r2,-16(fp)
   1074c:	01400304 	movi	r5,12
   10750:	1009883a 	mov	r4,r2
   10754:	00009780 	call	978 <__mulsi3>
   10758:	8085883a 	add	r2,r16,r2
   1075c:	10800017 	ldw	r2,0(r2)
   10760:	1000111e 	bne	r2,zero,107a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   10764:	04000074 	movhi	r16,1
   10768:	84060404 	addi	r16,r16,6160
   1076c:	e0bffc17 	ldw	r2,-16(fp)
   10770:	01400304 	movi	r5,12
   10774:	1009883a 	mov	r4,r2
   10778:	00009780 	call	978 <__mulsi3>
   1077c:	8085883a 	add	r2,r16,r2
   10780:	e0fffe17 	ldw	r3,-8(fp)
   10784:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10788:	d0e00a17 	ldw	r3,-32728(gp)
   1078c:	e0bffc17 	ldw	r2,-16(fp)
   10790:	1880020e 	bge	r3,r2,1079c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   10794:	e0bffc17 	ldw	r2,-16(fp)
   10798:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1079c:	e0bffc17 	ldw	r2,-16(fp)
   107a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   107a4:	00000606 	br	107c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   107a8:	e0bffc17 	ldw	r2,-16(fp)
   107ac:	10800044 	addi	r2,r2,1
   107b0:	e0bffc15 	stw	r2,-16(fp)
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800810 	cmplti	r2,r2,32
   107bc:	103fe01e 	bne	r2,zero,10740 <__alt_exception_stack_pointer+0xf8010740>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   107c0:	e0bffd17 	ldw	r2,-12(fp)
}
   107c4:	e6ffff04 	addi	sp,fp,-4
   107c8:	dfc00217 	ldw	ra,8(sp)
   107cc:	df000117 	ldw	fp,4(sp)
   107d0:	dc000017 	ldw	r16,0(sp)
   107d4:	dec00304 	addi	sp,sp,12
   107d8:	f800283a 	ret

000107dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   107dc:	defffe04 	addi	sp,sp,-8
   107e0:	df000115 	stw	fp,4(sp)
   107e4:	df000104 	addi	fp,sp,4
   107e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   107ec:	e0bfff17 	ldw	r2,-4(fp)
   107f0:	10bffe84 	addi	r2,r2,-6
   107f4:	10c00428 	cmpgeui	r3,r2,16
   107f8:	18001a1e 	bne	r3,zero,10864 <alt_exception_cause_generated_bad_addr+0x88>
   107fc:	100690ba 	slli	r3,r2,2
   10800:	00800074 	movhi	r2,1
   10804:	10820504 	addi	r2,r2,2068
   10808:	1885883a 	add	r2,r3,r2
   1080c:	10800017 	ldw	r2,0(r2)
   10810:	1000683a 	jmp	r2
   10814:	00010854 	movui	zero,1057
   10818:	00010854 	movui	zero,1057
   1081c:	00010864 	muli	zero,zero,1057
   10820:	00010864 	muli	zero,zero,1057
   10824:	00010864 	muli	zero,zero,1057
   10828:	00010854 	movui	zero,1057
   1082c:	0001085c 	xori	zero,zero,1057
   10830:	00010864 	muli	zero,zero,1057
   10834:	00010854 	movui	zero,1057
   10838:	00010854 	movui	zero,1057
   1083c:	00010864 	muli	zero,zero,1057
   10840:	00010854 	movui	zero,1057
   10844:	0001085c 	xori	zero,zero,1057
   10848:	00010864 	muli	zero,zero,1057
   1084c:	00010864 	muli	zero,zero,1057
   10850:	00010854 	movui	zero,1057
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10854:	00800044 	movi	r2,1
   10858:	00000306 	br	10868 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1085c:	0005883a 	mov	r2,zero
   10860:	00000106 	br	10868 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10864:	0005883a 	mov	r2,zero
  }
}
   10868:	e037883a 	mov	sp,fp
   1086c:	df000017 	ldw	fp,0(sp)
   10870:	dec00104 	addi	sp,sp,4
   10874:	f800283a 	ret

00010878 <atexit>:
   10878:	200b883a 	mov	r5,r4
   1087c:	000f883a 	mov	r7,zero
   10880:	000d883a 	mov	r6,zero
   10884:	0009883a 	mov	r4,zero
   10888:	00109401 	jmpi	10940 <__register_exitproc>

0001088c <exit>:
   1088c:	defffe04 	addi	sp,sp,-8
   10890:	000b883a 	mov	r5,zero
   10894:	dc000015 	stw	r16,0(sp)
   10898:	dfc00115 	stw	ra,4(sp)
   1089c:	2021883a 	mov	r16,r4
   108a0:	0010a580 	call	10a58 <__call_exitprocs>
   108a4:	00800074 	movhi	r2,1
   108a8:	108ab304 	addi	r2,r2,10956
   108ac:	11000017 	ldw	r4,0(r2)
   108b0:	20800f17 	ldw	r2,60(r4)
   108b4:	10000126 	beq	r2,zero,108bc <exit+0x30>
   108b8:	103ee83a 	callr	r2
   108bc:	8009883a 	mov	r4,r16
   108c0:	0010bd80 	call	10bd8 <_exit>

000108c4 <memcmp>:
   108c4:	01c000c4 	movi	r7,3
   108c8:	3980192e 	bgeu	r7,r6,10930 <memcmp+0x6c>
   108cc:	2144b03a 	or	r2,r4,r5
   108d0:	11c4703a 	and	r2,r2,r7
   108d4:	10000f26 	beq	r2,zero,10914 <memcmp+0x50>
   108d8:	20800003 	ldbu	r2,0(r4)
   108dc:	28c00003 	ldbu	r3,0(r5)
   108e0:	10c0151e 	bne	r2,r3,10938 <memcmp+0x74>
   108e4:	31bfff84 	addi	r6,r6,-2
   108e8:	01ffffc4 	movi	r7,-1
   108ec:	00000406 	br	10900 <memcmp+0x3c>
   108f0:	20800003 	ldbu	r2,0(r4)
   108f4:	28c00003 	ldbu	r3,0(r5)
   108f8:	31bfffc4 	addi	r6,r6,-1
   108fc:	10c00e1e 	bne	r2,r3,10938 <memcmp+0x74>
   10900:	21000044 	addi	r4,r4,1
   10904:	29400044 	addi	r5,r5,1
   10908:	31fff91e 	bne	r6,r7,108f0 <__alt_exception_stack_pointer+0xf80108f0>
   1090c:	0005883a 	mov	r2,zero
   10910:	f800283a 	ret
   10914:	20c00017 	ldw	r3,0(r4)
   10918:	28800017 	ldw	r2,0(r5)
   1091c:	18bfee1e 	bne	r3,r2,108d8 <__alt_exception_stack_pointer+0xf80108d8>
   10920:	31bfff04 	addi	r6,r6,-4
   10924:	21000104 	addi	r4,r4,4
   10928:	29400104 	addi	r5,r5,4
   1092c:	39bff936 	bltu	r7,r6,10914 <__alt_exception_stack_pointer+0xf8010914>
   10930:	303fe91e 	bne	r6,zero,108d8 <__alt_exception_stack_pointer+0xf80108d8>
   10934:	003ff506 	br	1090c <__alt_exception_stack_pointer+0xf801090c>
   10938:	10c5c83a 	sub	r2,r2,r3
   1093c:	f800283a 	ret

00010940 <__register_exitproc>:
   10940:	defffa04 	addi	sp,sp,-24
   10944:	dc000315 	stw	r16,12(sp)
   10948:	04000074 	movhi	r16,1
   1094c:	840ab304 	addi	r16,r16,10956
   10950:	80c00017 	ldw	r3,0(r16)
   10954:	dc400415 	stw	r17,16(sp)
   10958:	dfc00515 	stw	ra,20(sp)
   1095c:	18805217 	ldw	r2,328(r3)
   10960:	2023883a 	mov	r17,r4
   10964:	10003726 	beq	r2,zero,10a44 <__register_exitproc+0x104>
   10968:	10c00117 	ldw	r3,4(r2)
   1096c:	010007c4 	movi	r4,31
   10970:	20c00e16 	blt	r4,r3,109ac <__register_exitproc+0x6c>
   10974:	1a000044 	addi	r8,r3,1
   10978:	8800221e 	bne	r17,zero,10a04 <__register_exitproc+0xc4>
   1097c:	18c00084 	addi	r3,r3,2
   10980:	18c7883a 	add	r3,r3,r3
   10984:	18c7883a 	add	r3,r3,r3
   10988:	12000115 	stw	r8,4(r2)
   1098c:	10c7883a 	add	r3,r2,r3
   10990:	19400015 	stw	r5,0(r3)
   10994:	0005883a 	mov	r2,zero
   10998:	dfc00517 	ldw	ra,20(sp)
   1099c:	dc400417 	ldw	r17,16(sp)
   109a0:	dc000317 	ldw	r16,12(sp)
   109a4:	dec00604 	addi	sp,sp,24
   109a8:	f800283a 	ret
   109ac:	00800034 	movhi	r2,0
   109b0:	10853204 	addi	r2,r2,5320
   109b4:	10002626 	beq	r2,zero,10a50 <__register_exitproc+0x110>
   109b8:	01006404 	movi	r4,400
   109bc:	d9400015 	stw	r5,0(sp)
   109c0:	d9800115 	stw	r6,4(sp)
   109c4:	d9c00215 	stw	r7,8(sp)
   109c8:	00014c80 	call	14c8 <malloc>
   109cc:	d9400017 	ldw	r5,0(sp)
   109d0:	d9800117 	ldw	r6,4(sp)
   109d4:	d9c00217 	ldw	r7,8(sp)
   109d8:	10001d26 	beq	r2,zero,10a50 <__register_exitproc+0x110>
   109dc:	81000017 	ldw	r4,0(r16)
   109e0:	10000115 	stw	zero,4(r2)
   109e4:	02000044 	movi	r8,1
   109e8:	22405217 	ldw	r9,328(r4)
   109ec:	0007883a 	mov	r3,zero
   109f0:	12400015 	stw	r9,0(r2)
   109f4:	20805215 	stw	r2,328(r4)
   109f8:	10006215 	stw	zero,392(r2)
   109fc:	10006315 	stw	zero,396(r2)
   10a00:	883fde26 	beq	r17,zero,1097c <__alt_exception_stack_pointer+0xf801097c>
   10a04:	18c9883a 	add	r4,r3,r3
   10a08:	2109883a 	add	r4,r4,r4
   10a0c:	1109883a 	add	r4,r2,r4
   10a10:	21802215 	stw	r6,136(r4)
   10a14:	01800044 	movi	r6,1
   10a18:	12406217 	ldw	r9,392(r2)
   10a1c:	30cc983a 	sll	r6,r6,r3
   10a20:	4992b03a 	or	r9,r9,r6
   10a24:	12406215 	stw	r9,392(r2)
   10a28:	21c04215 	stw	r7,264(r4)
   10a2c:	01000084 	movi	r4,2
   10a30:	893fd21e 	bne	r17,r4,1097c <__alt_exception_stack_pointer+0xf801097c>
   10a34:	11006317 	ldw	r4,396(r2)
   10a38:	218cb03a 	or	r6,r4,r6
   10a3c:	11806315 	stw	r6,396(r2)
   10a40:	003fce06 	br	1097c <__alt_exception_stack_pointer+0xf801097c>
   10a44:	18805304 	addi	r2,r3,332
   10a48:	18805215 	stw	r2,328(r3)
   10a4c:	003fc606 	br	10968 <__alt_exception_stack_pointer+0xf8010968>
   10a50:	00bfffc4 	movi	r2,-1
   10a54:	003fd006 	br	10998 <__alt_exception_stack_pointer+0xf8010998>

00010a58 <__call_exitprocs>:
   10a58:	defff504 	addi	sp,sp,-44
   10a5c:	df000915 	stw	fp,36(sp)
   10a60:	dd400615 	stw	r21,24(sp)
   10a64:	dc800315 	stw	r18,12(sp)
   10a68:	dfc00a15 	stw	ra,40(sp)
   10a6c:	ddc00815 	stw	r23,32(sp)
   10a70:	dd800715 	stw	r22,28(sp)
   10a74:	dd000515 	stw	r20,20(sp)
   10a78:	dcc00415 	stw	r19,16(sp)
   10a7c:	dc400215 	stw	r17,8(sp)
   10a80:	dc000115 	stw	r16,4(sp)
   10a84:	d9000015 	stw	r4,0(sp)
   10a88:	2839883a 	mov	fp,r5
   10a8c:	04800044 	movi	r18,1
   10a90:	057fffc4 	movi	r21,-1
   10a94:	00800074 	movhi	r2,1
   10a98:	108ab304 	addi	r2,r2,10956
   10a9c:	12000017 	ldw	r8,0(r2)
   10aa0:	45005217 	ldw	r20,328(r8)
   10aa4:	44c05204 	addi	r19,r8,328
   10aa8:	a0001c26 	beq	r20,zero,10b1c <__call_exitprocs+0xc4>
   10aac:	a0800117 	ldw	r2,4(r20)
   10ab0:	15ffffc4 	addi	r23,r2,-1
   10ab4:	b8000d16 	blt	r23,zero,10aec <__call_exitprocs+0x94>
   10ab8:	14000044 	addi	r16,r2,1
   10abc:	8421883a 	add	r16,r16,r16
   10ac0:	8421883a 	add	r16,r16,r16
   10ac4:	84402004 	addi	r17,r16,128
   10ac8:	a463883a 	add	r17,r20,r17
   10acc:	a421883a 	add	r16,r20,r16
   10ad0:	e0001e26 	beq	fp,zero,10b4c <__call_exitprocs+0xf4>
   10ad4:	80804017 	ldw	r2,256(r16)
   10ad8:	e0801c26 	beq	fp,r2,10b4c <__call_exitprocs+0xf4>
   10adc:	bdffffc4 	addi	r23,r23,-1
   10ae0:	843fff04 	addi	r16,r16,-4
   10ae4:	8c7fff04 	addi	r17,r17,-4
   10ae8:	bd7ff91e 	bne	r23,r21,10ad0 <__alt_exception_stack_pointer+0xf8010ad0>
   10aec:	00800034 	movhi	r2,0
   10af0:	10853704 	addi	r2,r2,5340
   10af4:	10000926 	beq	r2,zero,10b1c <__call_exitprocs+0xc4>
   10af8:	a0800117 	ldw	r2,4(r20)
   10afc:	1000301e 	bne	r2,zero,10bc0 <__call_exitprocs+0x168>
   10b00:	a0800017 	ldw	r2,0(r20)
   10b04:	10003226 	beq	r2,zero,10bd0 <__call_exitprocs+0x178>
   10b08:	a009883a 	mov	r4,r20
   10b0c:	98800015 	stw	r2,0(r19)
   10b10:	00014dc0 	call	14dc <free>
   10b14:	9d000017 	ldw	r20,0(r19)
   10b18:	a03fe41e 	bne	r20,zero,10aac <__alt_exception_stack_pointer+0xf8010aac>
   10b1c:	dfc00a17 	ldw	ra,40(sp)
   10b20:	df000917 	ldw	fp,36(sp)
   10b24:	ddc00817 	ldw	r23,32(sp)
   10b28:	dd800717 	ldw	r22,28(sp)
   10b2c:	dd400617 	ldw	r21,24(sp)
   10b30:	dd000517 	ldw	r20,20(sp)
   10b34:	dcc00417 	ldw	r19,16(sp)
   10b38:	dc800317 	ldw	r18,12(sp)
   10b3c:	dc400217 	ldw	r17,8(sp)
   10b40:	dc000117 	ldw	r16,4(sp)
   10b44:	dec00b04 	addi	sp,sp,44
   10b48:	f800283a 	ret
   10b4c:	a0800117 	ldw	r2,4(r20)
   10b50:	80c00017 	ldw	r3,0(r16)
   10b54:	10bfffc4 	addi	r2,r2,-1
   10b58:	15c01426 	beq	r2,r23,10bac <__call_exitprocs+0x154>
   10b5c:	80000015 	stw	zero,0(r16)
   10b60:	183fde26 	beq	r3,zero,10adc <__alt_exception_stack_pointer+0xf8010adc>
   10b64:	95c8983a 	sll	r4,r18,r23
   10b68:	a0806217 	ldw	r2,392(r20)
   10b6c:	a5800117 	ldw	r22,4(r20)
   10b70:	2084703a 	and	r2,r4,r2
   10b74:	10000b26 	beq	r2,zero,10ba4 <__call_exitprocs+0x14c>
   10b78:	a0806317 	ldw	r2,396(r20)
   10b7c:	2088703a 	and	r4,r4,r2
   10b80:	20000c1e 	bne	r4,zero,10bb4 <__call_exitprocs+0x15c>
   10b84:	89400017 	ldw	r5,0(r17)
   10b88:	d9000017 	ldw	r4,0(sp)
   10b8c:	183ee83a 	callr	r3
   10b90:	a0800117 	ldw	r2,4(r20)
   10b94:	15bfbf1e 	bne	r2,r22,10a94 <__alt_exception_stack_pointer+0xf8010a94>
   10b98:	98800017 	ldw	r2,0(r19)
   10b9c:	153fcf26 	beq	r2,r20,10adc <__alt_exception_stack_pointer+0xf8010adc>
   10ba0:	003fbc06 	br	10a94 <__alt_exception_stack_pointer+0xf8010a94>
   10ba4:	183ee83a 	callr	r3
   10ba8:	003ff906 	br	10b90 <__alt_exception_stack_pointer+0xf8010b90>
   10bac:	a5c00115 	stw	r23,4(r20)
   10bb0:	003feb06 	br	10b60 <__alt_exception_stack_pointer+0xf8010b60>
   10bb4:	89000017 	ldw	r4,0(r17)
   10bb8:	183ee83a 	callr	r3
   10bbc:	003ff406 	br	10b90 <__alt_exception_stack_pointer+0xf8010b90>
   10bc0:	a0800017 	ldw	r2,0(r20)
   10bc4:	a027883a 	mov	r19,r20
   10bc8:	1029883a 	mov	r20,r2
   10bcc:	003fb606 	br	10aa8 <__alt_exception_stack_pointer+0xf8010aa8>
   10bd0:	0005883a 	mov	r2,zero
   10bd4:	003ffb06 	br	10bc4 <__alt_exception_stack_pointer+0xf8010bc4>

00010bd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10bd8:	defffd04 	addi	sp,sp,-12
   10bdc:	df000215 	stw	fp,8(sp)
   10be0:	df000204 	addi	fp,sp,8
   10be4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10be8:	0001883a 	nop
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10bf4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10bf8:	10000226 	beq	r2,zero,10c04 <_exit+0x2c>
    ALT_SIM_FAIL();
   10bfc:	002af070 	cmpltui	zero,zero,43969
   10c00:	00000106 	br	10c08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10c04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10c08:	003fff06 	br	10c08 <__alt_exception_stack_pointer+0xf8010c08>
