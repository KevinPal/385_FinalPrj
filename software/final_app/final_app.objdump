
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000130a4 memsz 0x000130a4 flags r-x
    LOAD off    0x000140c4 vaddr 0x000130c4 paddr 0x00014c48 align 2**12
         filesz 0x00001b84 memsz 0x00001b84 flags rw-
    LOAD off    0x000167cc vaddr 0x000167cc paddr 0x000167cc align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012324  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b64  00012560  00012560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  000130c4  00014c48  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  000167cc  000167cc  000167cc  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00016944  00016944  00015c48  2**0
                  CONTENTS
  7 .frame_buffer 00000000  08000000  08000000  00015c48  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015c48  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe0  00000000  00000000  00015c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025c55  00000000  00000000  00016c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009aa0  00000000  00000000  0003c8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c32b  00000000  00000000  00046345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002590  00000000  00000000  00052670  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e9e  00000000  00000000  00054c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017924  00000000  00000000  00058a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000703c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001908  00000000  00000000  00070408  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075332  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00075335  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007533a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007533b  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0007533c  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00075347  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0007534b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00075356  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0007535f  2**0
                  CONTENTS, READONLY
 27 .jdi          000061b4  00000000  00000000  00075387  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0009efdb  00000000  00000000  0007b53b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00012560 l    d  .rodata	00000000 .rodata
000130c4 l    d  .rwdata	00000000 .rwdata
000167cc l    d  .bss	00000000 .bss
00016944 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .frame_buffer	00000000 .frame_buffer
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
000167cc l     O .bss	00000002 ctl_reg
000167ce l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000130c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012dd6 l     O .rodata	00000010 zeroes.4404
000056b8 l     F .text	000000bc __sbprintf
00012de6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000058c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007420 l     F .text	00000008 __fp_unlock
00007434 l     F .text	0000019c __sinit.part.1
000075d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013910 l     O .rwdata	00000020 lc_ctype_charset
000138f0 l     O .rwdata	00000020 lc_message_charset
00013930 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012e14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a244 l     F .text	000000fc __sprint_r.part.0
00012f38 l     O .rodata	00000010 zeroes.4349
0000b880 l     F .text	000000bc __sbprintf
00012f48 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f8c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f9dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000fa08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fafc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fbe4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fcd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000feac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014c3c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00010120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010340 l     F .text	00000034 alt_dev_reg
00013b10 l     O .rwdata	00001060 jtag_uart_0
00014b70 l     O .rwdata	00000054 pixel_dma
00014bc4 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000108ec l     F .text	0000020c altera_avalon_jtag_uart_irq
00010af8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011130 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000114c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011928 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011a88 l     F .text	0000003c alt_get_errno
00011ac4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016818 g     O .bss	00000004 alt_instruction_exception_handler
000098dc g     F .text	00000074 _mprec_log10
000099c8 g     F .text	0000008c __any_on
0000be34 g     F .text	00000054 _isatty_r
00012e20 g     O .rodata	00000028 __mprec_tinytens
0000fde8 g     F .text	0000007c alt_main
000031f8 g     F .text	000000c0 _puts_r
00016844 g     O .bss	00000100 alt_irq
0000be88 g     F .text	00000060 _lseek_r
00014c48 g       *ABS*	00000000 __flash_rwdata_start
0000e2a0 g     F .text	00000088 .hidden __eqdf2
00016944 g       *ABS*	00000000 __alt_heap_start
000031bc g     F .text	0000003c printf
0000c0a0 g     F .text	0000009c _wcrtomb_r
00014c08 g     O .rwdata	00000004 gpu
000167da g     O .bss	00000002 usb_ctl_val
0000a104 g     F .text	0000005c __sseek
00007780 g     F .text	00000010 __sinit
000167d4 g     O .bss	00000004 keycode
0000bf48 g     F .text	00000140 __swbuf_r
00008254 g     F .text	0000007c _setlocale_r
000075d8 g     F .text	00000078 __sfmoreglue
0000fe88 g     F .text	00000024 __malloc_unlock
00002804 g     F .text	00000088 UsbGetRetryCnt
00008718 g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
00007768 g     F .text	00000018 _cleanup
0000899c g     F .text	000000a8 _Balloc
0000e328 g     F .text	000000dc .hidden __gtdf2
00011eb0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001015c g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bdd8 g     F .text	0000005c _fstat_r
000167f0 g     O .bss	00000004 errno
0000a080 g     F .text	00000008 __seofread
00016804 g     O .bss	00000004 alt_argv
0001cc08 g       *ABS*	00000000 _gp
000101d4 g     F .text	00000030 usleep
00013990 g     O .rwdata	00000180 alt_fd_list
00011ed4 g     F .text	00000090 alt_find_dev
000085d0 g     F .text	00000148 memcpy
000033b8 g     F .text	00000008 _times_r
00007428 g     F .text	0000000c _cleanup_r
0000f6e0 g     F .text	000000dc .hidden __floatsidf
00011a0c g     F .text	0000007c alt_io_redirect
000167dc g     O .bss	00000001 data_size
0000e404 g     F .text	000000f4 .hidden __ltdf2
00012560 g       *ABS*	00000000 __DTOR_END__
000032b8 g     F .text	00000014 puts
00012130 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009fb8 g     F .text	00000074 __fpclassifyd
00009838 g     F .text	000000a4 __ratio
0000b864 g     F .text	0000001c __vfiprintf_internal
00010cf0 g     F .text	0000021c altera_avalon_jtag_uart_read
00002958 g     F .text	00000014 malloc
0000318c g     F .text	00000030 _printf_r
0000cf40 g     F .text	00000064 .hidden __udivsi3
0000fb38 g     F .text	000000ac isatty
00012e70 g     O .rodata	000000c8 __mprec_tens
000082d0 g     F .text	0000000c __locale_charset
000167ec g     O .bss	00000004 __malloc_top_pad
00001e90 g     F .text	00000268 UsbGetConfigDesc2
000013f0 g     F .text	00000074 clear_depth
00014c1c g     O .rwdata	00000004 __mb_cur_max
00008300 g     F .text	0000000c _localeconv_r
00008dd0 g     F .text	0000003c __i2b
00007c04 g     F .text	000004c8 __sfvwrite_r
000167de g     O .bss	00000002 intStat
000032cc g     F .text	00000054 _sbrk_r
0000bee8 g     F .text	00000060 _read_r
00014c34 g     O .rwdata	00000004 alt_max_fd
0000bacc g     F .text	000000f0 _fclose_r
000073f0 g     F .text	00000030 fflush
000167e8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d024 g     F .text	000008ac .hidden __adddf3
000095e0 g     F .text	0000010c __b2d
0000c884 g     F .text	000005c4 .hidden __umoddi3
0000fd0c g     F .text	000000dc lseek
00014c0c g     O .rwdata	00000004 _global_impure_ptr
00009a54 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00016944 g       *ABS*	00000000 __bss_end
00011838 g     F .text	000000f0 alt_iic_isr_register
00011da8 g     F .text	00000108 alt_tick
0000c288 g     F .text	000005fc .hidden __udivdi3
0000bd34 g     F .text	00000024 _fputwc_r
00012e48 g     O .rodata	00000028 __mprec_bigtens
00008bb4 g     F .text	00000104 __s2b
0000f7bc g     F .text	000000a8 .hidden __floatunsidf
00009320 g     F .text	00000060 __mcmp
000018e0 g     F .text	00000100 UsbSetAddress
000077a0 g     F .text	00000018 __fp_lock_all
000117ec g     F .text	0000004c alt_ic_irq_enabled
00011d0c g     F .text	0000009c alt_alarm_stop
0001680c g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00013968 g     O .rwdata	00000028 alt_dev_null
000114a8 g     F .text	00000020 alt_dcache_flush_all
00008cb8 g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
0000f660 g     F .text	00000080 .hidden __fixdfsi
00014c48 g       *ABS*	00000000 __ram_rwdata_end
00014c2c g     O .rwdata	00000008 alt_dev_list
00010240 g     F .text	00000100 write
000130c4 g       *ABS*	00000000 __ram_rodata_end
0000fa44 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000e404 g     F .text	000000f4 .hidden __ledf2
0000288c g     F .text	00000080 UsbPrintMem
00009098 g     F .text	00000140 __pow5mult
0000a358 g     F .text	0000150c ___vfiprintf_internal_r
000167fc g     O .bss	00000004 __nlocale_changed
0000cfa4 g     F .text	00000058 .hidden __umodsi3
00016944 g       *ABS*	00000000 end
000012a8 g     F .text	000000d4 draw_cube
0001082c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00012560 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
000111a8 g     F .text	0000007c alt_avalon_timer_sc_init
0000f864 g     F .text	00000064 .hidden __clzsi2
00010f0c g     F .text	00000224 altera_avalon_jtag_uart_write
00007790 g     F .text	00000004 __sfp_lock_acquire
000084ec g     F .text	000000e4 memchr
000033c0 g     F .text	000022dc ___vfprintf_internal_r
000021f8 g     F .text	00000100 UsbClassRequest
000078f4 g     F .text	00000310 _free_r
000082dc g     F .text	00000010 __locale_mb_cur_max
000123ac g     F .text	00000180 __call_exitprocs
000167f8 g     O .bss	00000004 __mlocale_changed
00014c14 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00016810 g     O .bss	00000004 _alt_tick_rate
000091d8 g     F .text	00000148 __lshift
00016814 g     O .bss	00000004 _alt_nticks
0000fee8 g     F .text	00000104 read
000103ac g     F .text	0000031c alt_sys_init
00012294 g     F .text	00000118 __register_exitproc
00008e0c g     F .text	0000028c __multiply
00010b98 g     F .text	00000068 altera_avalon_jtag_uart_close
0000cffc g     F .text	00000028 .hidden __mulsi3
000130c4 g       *ABS*	00000000 __ram_rwdata_start
00012560 g       *ABS*	00000000 __ram_rodata_start
0001681c g     O .bss	00000028 __malloc_current_mallinfo
000096ec g     F .text	0000014c __d2b
08000000 g       *ABS*	00000000 __alt_mem_frame_buffer
000019e0 g     F .text	00000148 UsbGetDeviceDesc1
000106c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001206c g     F .text	000000c4 alt_get_fd
00011350 g     F .text	00000158 alt_busy_sleep
0000b99c g     F .text	00000054 _close_r
00012218 g     F .text	0000007c memcmp
00010788 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016944 g       *ABS*	00000000 __alt_stack_base
000107d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005774 g     F .text	00000154 __swsetup_r
0000d8d0 g     F .text	000009d0 .hidden __divdf3
00007650 g     F .text	00000118 __sfp
00009950 g     F .text	00000078 __copybits
000134e8 g     O .rwdata	00000408 __malloc_av_
0000779c g     F .text	00000004 __sinit_lock_release
0000e4f8 g     F .text	0000086c .hidden __muldf3
0000a02c g     F .text	00000054 __sread
00002780 g     F .text	00000084 UsbWaitTDListDone
00011f64 g     F .text	00000108 alt_find_file
00011504 g     F .text	000000a4 alt_dev_llist_insert
0000fe64 g     F .text	00000024 __malloc_lock
00010070 g     F .text	000000b0 sbrk
00007394 g     F .text	0000005c _fflush_r
0000b9f0 g     F .text	000000dc _calloc_r
000167e0 g     O .bss	00000001 hot_plug_count
000167cc g       *ABS*	00000000 __bss_start
00008874 g     F .text	00000128 memset
00001464 g     F .text	0000032c main
00016808 g     O .bss	00000004 alt_envp
000167e4 g     O .bss	00000004 __malloc_max_total_mem
00010728 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000020f8 g     F .text	00000100 UsbSetConfig
0000c088 g     F .text	00000018 __swbuf
0000a160 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
0000bbbc g     F .text	00000014 fclose
00005af0 g     F .text	00001688 _dtoa_r
00002980 g     F .text	0000080c _malloc_r
0000c1fc g     F .text	00000030 __ascii_wctomb
00014c38 g     O .rwdata	00000004 alt_errno
000080cc g     F .text	000000c4 _fwalk
0000ce48 g     F .text	00000084 .hidden __divsi3
000077d0 g     F .text	00000124 _malloc_trim_r
000022f8 g     F .text	00000148 UsbGetHidDesc
00012560 g       *ABS*	00000000 __CTOR_END__
0000a168 g     F .text	000000dc strcmp
00012560 g       *ABS*	00000000 __flash_rodata_start
00012560 g       *ABS*	00000000 __DTOR_LIST__
0000e2a0 g     F .text	00000088 .hidden __nedf2
000017e8 g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
00010374 g     F .text	00000038 alt_irq_init
0000ffec g     F .text	00000084 alt_release_fd
00012f58 g     O .rodata	00000100 .hidden __clz_tab
000167f4 g     O .bss	00000004 _PathLocale
000121cc g     F .text	00000014 atexit
0000b93c g     F .text	00000060 _write_r
0000830c g     F .text	00000018 setlocale
00014c10 g     O .rwdata	00000004 _impure_ptr
00016800 g     O .bss	00000004 alt_argc
00007178 g     F .text	0000021c __sflush_r
00011608 g     F .text	00000060 _do_dtors
000082f8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000957c g     F .text	00000064 __ulp
000077b8 g     F .text	00000018 __fp_unlock_all
000167d8 g     O .bss	00000001 toggle
00014c24 g     O .rwdata	00000008 alt_fs_list
00002440 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008324 g     F .text	0000000c localeconv
00011688 g     F .text	00000050 alt_ic_isr_register
00014c48 g       *ABS*	00000000 _edata
00016944 g       *ABS*	00000000 _end
00001790 g     F .text	00000058 UsbWrite
0000bbd0 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00010c00 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000167e2 g     O .bss	00000002 code
00011760 g     F .text	0000008c alt_ic_irq_disable
0000a088 g     F .text	0000007c __swrite
00014c18 g     O .rwdata	00000004 __malloc_trim_threshold
000082ec g     F .text	0000000c __locale_msgcharset
000167d0 g     O .bss	00000002 fs_device
000121e0 g     F .text	00000038 exit
00008190 g     F .text	000000c4 _fwalk_reent
00009380 g     F .text	000001fc __mdiff
0000cecc g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007794 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
0001252c g     F .text	00000034 _exit
00011224 g     F .text	0000012c alt_alarm_start
00008330 g     F .text	000001bc __smakebuf_r
00003320 g     F .text	00000098 strlen
00011bb0 g     F .text	0000015c open
0000e328 g     F .text	000000dc .hidden __gedf2
0000290c g     F .text	0000004c clock
00014c20 g     O .rwdata	00000004 __wctomb
0000a340 g     F .text	00000018 __sprint_r
00011668 g     F .text	00000020 alt_icache_flush_all
000116d8 g     F .text	00000088 alt_ic_irq_enable
0000569c g     F .text	0000001c __vfprintf_internal
0000c22c g     F .text	0000005c _wctomb_r
0000137c g     F .text	00000074 clear_screen
0000ed64 g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
00008d20 g     F .text	000000b0 __lo0bits
00001d00 g     F .text	00000190 UsbGetConfigDesc1
00014c40 g     O .rwdata	00000008 alt_alarm_list
000115a8 g     F .text	00000060 _do_ctors
0000182c g     F .text	000000b4 UsbSoftReset
0000c13c g     F .text	000000c0 wcrtomb
0000f904 g     F .text	000000d8 close
00001b28 g     F .text	000001d8 UsbGetDeviceDesc2
0000fc4c g     F .text	00000084 alt_load
0000bd58 g     F .text	00000080 fputwc
0000296c g     F .text	00000014 free
00007798 g     F .text	00000004 __sinit_lock_acquire
00008a6c g     F .text	00000148 __multadd
00008a44 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	109a1104 	addi	r2,r2,26692
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	109a1104 	addi	r2,r2,26692
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a70417 	ldw	r2,-25584(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a70417 	ldw	r2,-25584(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6b30214 	ori	gp,gp,52232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	1099f314 	ori	r2,r2,26572

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18da5114 	ori	r3,r3,26948

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000fc4c0 	call	fc4c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000fde80 	call	fde8 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820234 	movhi	r2,2056
     288:	108c0c04 	addi	r2,r2,12336
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820234 	movhi	r2,2056
     298:	108c1004 	addi	r2,r2,12352
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820234 	movhi	r2,2056
     2a8:	108c1804 	addi	r2,r2,12384
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820234 	movhi	r2,2056
     2b8:	108c1404 	addi	r2,r2,12368
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820234 	movhi	r2,2056
     2c8:	108c2004 	addi	r2,r2,12416
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820234 	movhi	r2,2056
     2d4:	108c1c04 	addi	r2,r2,12400
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820234 	movhi	r2,2056
     2e0:	108c1004 	addi	r2,r2,12352
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820234 	movhi	r2,2056
     2ec:	108c0c04 	addi	r2,r2,12336
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820234 	movhi	r2,2056
     2f8:	108c0c04 	addi	r2,r2,12336
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820234 	movhi	r2,2056
     308:	108c1004 	addi	r2,r2,12352
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820234 	movhi	r2,2056
     348:	108c2004 	addi	r2,r2,12416
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820234 	movhi	r2,2056
     358:	108c1c04 	addi	r2,r2,12400
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820234 	movhi	r2,2056
     368:	108c1004 	addi	r2,r2,12352
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820234 	movhi	r2,2056
     374:	108c1404 	addi	r2,r2,12368
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820234 	movhi	r2,2056
     380:	108c1404 	addi	r2,r2,12368
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820234 	movhi	r2,2056
     390:	108c1004 	addi	r2,r2,12352
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820234 	movhi	r2,2056
     3c8:	108c2004 	addi	r2,r2,12416
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820234 	movhi	r2,2056
     3d8:	108c1004 	addi	r2,r2,12352
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820234 	movhi	r2,2056
     3e4:	108c1804 	addi	r2,r2,12384
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820234 	movhi	r2,2056
     3f0:	108c1c04 	addi	r2,r2,12400
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820234 	movhi	r2,2056
     400:	108c1804 	addi	r2,r2,12384
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820234 	movhi	r2,2056
     410:	108c1004 	addi	r2,r2,12352
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a6f403 	ldbu	r2,-25648(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a6f405 	stb	r2,-25648(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a6f503 	ldbu	r2,-25644(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a6f403 	ldbu	r2,-25648(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	00017900 	call	1790 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a6f503 	ldbu	r2,-25644(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a6f403 	ldbu	r2,-25648(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	00017900 	call	1790 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	00101d40 	call	101d4 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	00027800 	call	2780 <UsbWaitTDListDone>
     58c:	d0a6f48d 	sth	r2,-25646(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	00017e80 	call	17e8 <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a6f315 	stw	r2,-25652(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a6f317 	ldw	r2,-25652(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	21095804 	addi	r4,r4,9568
     5b0:	00031bc0 	call	31bc <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820234 	movhi	r2,2056
     5b8:	108c2404 	addi	r2,r2,12432
     5bc:	d0e6f317 	ldw	r3,-25652(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a6f317 	ldw	r2,-25652(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	00101d40 	call	101d4 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a6f10b 	ldhu	r2,-25660(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	00017e80 	call	17e8 <UsbRead>
     5ec:	d0a6f48d 	sth	r2,-25646(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e6f48b 	ldhu	r3,-25646(gp)
     5f4:	d0a6f18b 	ldhu	r2,-25658(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d026f605 	stb	zero,-25640(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	00101d40 	call	101d4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a6f10b 	ldhu	r2,-25660(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	00017e80 	call	17e8 <UsbRead>
     624:	d0a6f48d 	sth	r2,-25646(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e6f48b 	ldhu	r3,-25646(gp)
     62c:	d0a6f18b 	ldhu	r2,-25658(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a6f603 	ldbu	r2,-25640(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a6f605 	stb	r2,-25640(gp)
     648:	d0a6f603 	ldbu	r2,-25640(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e6f48b 	ldhu	r3,-25646(gp)
     664:	d0a6f18b 	ldhu	r2,-25658(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	21096104 	addi	r4,r4,9604
     67c:	00032b80 	call	32b8 <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	21096c04 	addi	r4,r4,9648
     688:	00032b80 	call	32b8 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6f10b 	ldhu	r2,-25660(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	00017e80 	call	17e8 <UsbRead>
     6a0:	d0a6f48d 	sth	r2,-25646(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	00101d40 	call	101d4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a6f10b 	ldhu	r2,-25660(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	00017e80 	call	17e8 <UsbRead>
     6bc:	d0a6f48d 	sth	r2,-25646(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	00101d40 	call	101d4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a6f10b 	ldhu	r2,-25660(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	00017e80 	call	17e8 <UsbRead>
     6d8:	d0a6f48d 	sth	r2,-25646(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	00101d40 	call	101d4 <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e6f48b 	ldhu	r3,-25646(gp)
     6e8:	d0a6f18b 	ldhu	r2,-25658(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	00101d40 	call	101d4 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e6f48b 	ldhu	r3,-25646(gp)
     708:	d0a6f18b 	ldhu	r2,-25658(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	21097404 	addi	r4,r4,9680
     74c:	00032b80 	call	32b8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	000182c0 	call	182c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	00017900 	call	1790 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	00017900 	call	1790 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	00017900 	call	1790 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a6f48d 	sth	r2,-25646(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a6f48b 	ldhu	r2,-25646(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	00017900 	call	1790 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a6f58d 	sth	r2,-25642(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a6f58b 	ldhu	r2,-25642(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	00017900 	call	1790 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	00017900 	call	1790 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	21097a04 	addi	r4,r4,9704
     8a0:	00031bc0 	call	31bc <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	21098304 	addi	r4,r4,9740
     8c4:	00031bc0 	call	31bc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	00017900 	call	1790 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	00017900 	call	1790 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	21097a04 	addi	r4,r4,9704
     9b8:	00031bc0 	call	31bc <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a6f10d 	sth	r2,-25660(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a6f18d 	sth	r2,-25658(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a6f20d 	sth	r2,-25656(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a6f10b 	ldhu	r2,-25660(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	00017e80 	call	17e8 <UsbRead>
     9e8:	d0a6f48d 	sth	r2,-25646(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e6f48b 	ldhu	r3,-25646(gp)
     9f0:	d0a6f18b 	ldhu	r2,-25658(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d026f605 	stb	zero,-25640(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	00101d40 	call	101d4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a6f10b 	ldhu	r2,-25660(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	00017e80 	call	17e8 <UsbRead>
     a20:	d0a6f48d 	sth	r2,-25646(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e6f48b 	ldhu	r3,-25646(gp)
     a28:	d0a6f18b 	ldhu	r2,-25658(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a6f603 	ldbu	r2,-25640(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a6f605 	stb	r2,-25640(gp)
     a44:	d0a6f603 	ldbu	r2,-25640(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e6f48b 	ldhu	r3,-25646(gp)
     a60:	d0a6f18b 	ldhu	r2,-25658(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	21098704 	addi	r4,r4,9756
     a78:	00032b80 	call	32b8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	21099104 	addi	r4,r4,9796
     a84:	00032b80 	call	32b8 <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a6f10b 	ldhu	r2,-25660(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	00017e80 	call	17e8 <UsbRead>
     a9c:	d0a6f48d 	sth	r2,-25646(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e6f48b 	ldhu	r3,-25646(gp)
     aa4:	d0a6f18b 	ldhu	r2,-25658(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	00101d40 	call	101d4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e6f48b 	ldhu	r3,-25646(gp)
     ac4:	d0a6f18b 	ldhu	r2,-25658(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e6f48b 	ldhu	r3,-25646(gp)
     adc:	d0a6f20b 	ldhu	r2,-25656(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	21099d04 	addi	r4,r4,9844
     af4:	00032b80 	call	32b8 <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	2109a404 	addi	r4,r4,9872
     b04:	00032b80 	call	32b8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	00018e00 	call	18e0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	00018e00 	call	18e0 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	00101d40 	call	101d4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	2109ab04 	addi	r4,r4,9900
     b58:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a6f48b 	ldhu	r2,-25646(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	2109b604 	addi	r4,r4,9944
     b88:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a6f48b 	ldhu	r2,-25646(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	00028040 	call	2804 <UsbGetRetryCnt>
     ba4:	d0a6f48d 	sth	r2,-25646(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	2109c204 	addi	r4,r4,9992
     bb4:	00032b80 	call	32b8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	00019e00 	call	19e0 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	00101d40 	call	101d4 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	00019e00 	call	19e0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	00101d40 	call	101d4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	2109d104 	addi	r4,r4,10052
     c10:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a6f48b 	ldhu	r2,-25646(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	2109dc04 	addi	r4,r4,10096
     c40:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a6f48b 	ldhu	r2,-25646(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	00028040 	call	2804 <UsbGetRetryCnt>
     c5c:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	2109e804 	addi	r4,r4,10144
     c68:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	2109f104 	addi	r4,r4,10180
     c78:	00032b80 	call	32b8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	0001b280 	call	1b28 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	0001b280 	call	1b28 <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	00101d40 	call	101d4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	2109d104 	addi	r4,r4,10052
     ccc:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a6f48b 	ldhu	r2,-25646(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	2109dc04 	addi	r4,r4,10096
     cfc:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a6f48b 	ldhu	r2,-25646(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	00028040 	call	2804 <UsbGetRetryCnt>
     d18:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	2109e804 	addi	r4,r4,10144
     d24:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	210a0504 	addi	r4,r4,10260
     d34:	00032b80 	call	32b8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	0001d000 	call	1d00 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	0001d000 	call	1d00 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	00101d40 	call	101d4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	210a1704 	addi	r4,r4,10332
     d88:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a6f48b 	ldhu	r2,-25646(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	210a2204 	addi	r4,r4,10376
     db8:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a6f48b 	ldhu	r2,-25646(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	00028040 	call	2804 <UsbGetRetryCnt>
     dd4:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	2109e804 	addi	r4,r4,10144
     de0:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	210a2e04 	addi	r4,r4,10424
     df0:	00032b80 	call	32b8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	0001e900 	call	1e90 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	00101d40 	call	101d4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	0001e900 	call	1e90 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	00101d40 	call	101d4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	210a4104 	addi	r4,r4,10500
     e50:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a6f48b 	ldhu	r2,-25646(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	210a4c04 	addi	r4,r4,10544
     e80:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a6f48b 	ldhu	r2,-25646(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	00028040 	call	2804 <UsbGetRetryCnt>
     e9c:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	2109e804 	addi	r4,r4,10144
     ea8:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	210a5804 	addi	r4,r4,10592
     eb8:	00032b80 	call	32b8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a6f68d 	sth	r2,-25638(gp)
	code = code & 0x003;
     ed4:	d0a6f68b 	ldhu	r2,-25638(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a6f68d 	sth	r2,-25638(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a6f68b 	ldhu	r2,-25638(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	210a6b04 	addi	r4,r4,10668
     ef4:	00031bc0 	call	31bc <printf>

	if (code == 0x01)
     ef8:	d0a6f68b 	ldhu	r2,-25638(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	210a6e04 	addi	r4,r4,10680
     f10:	00032b80 	call	32b8 <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	210a7d04 	addi	r4,r4,10740
     f20:	00032b80 	call	32b8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	00017900 	call	1790 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a6f505 	stb	r2,-25644(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a6f503 	ldbu	r2,-25644(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	210a8604 	addi	r4,r4,10776
     fa4:	00031bc0 	call	31bc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	00020f80 	call	20f8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	00020f80 	call	20f8 <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	00101d40 	call	101d4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	210a9004 	addi	r4,r4,10816
     ff8:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a6f48b 	ldhu	r2,-25646(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	210a9b04 	addi	r4,r4,10860
    1028:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a6f48b 	ldhu	r2,-25646(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	00028040 	call	2804 <UsbGetRetryCnt>
    1044:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	2109e804 	addi	r4,r4,10144
    1050:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	210aa704 	addi	r4,r4,10908
    1060:	00032b80 	call	32b8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	00021f80 	call	21f8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	00021f80 	call	21f8 <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	00101d40 	call	101d4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	210ab904 	addi	r4,r4,10980
    10b4:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a6f48b 	ldhu	r2,-25646(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	210ac404 	addi	r4,r4,11024
    10e4:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a6f48b 	ldhu	r2,-25646(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	00028040 	call	2804 <UsbGetRetryCnt>
    1100:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	2109e804 	addi	r4,r4,10144
    110c:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	210ad004 	addi	r4,r4,11072
    111c:	00032b80 	call	32b8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	00022f80 	call	22f8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	00022f80 	call	22f8 <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	00101d40 	call	101d4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	210ab904 	addi	r4,r4,10980
    1170:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a6f48b 	ldhu	r2,-25646(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	210ac404 	addi	r4,r4,11024
    11a0:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a6f48b 	ldhu	r2,-25646(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	00028040 	call	2804 <UsbGetRetryCnt>
    11bc:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	2109e804 	addi	r4,r4,10144
    11c8:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	210ae204 	addi	r4,r4,11144
    11d8:	00032b80 	call	32b8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	00024400 	call	2440 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	00024400 	call	2440 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	00027800 	call	2780 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	210af604 	addi	r4,r4,11224
    1224:	00031bc0 	call	31bc <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a6f48d 	sth	r2,-25646(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a6f48b 	ldhu	r2,-25646(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	210b0204 	addi	r4,r4,11272
    1254:	00031bc0 	call	31bc <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a6f48b 	ldhu	r2,-25646(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	00028040 	call	2804 <UsbGetRetryCnt>
    1270:	d0a6f48d 	sth	r2,-25646(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	2109e804 	addi	r4,r4,10144
    127c:	00032b80 	call	32b8 <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	210b0e04 	addi	r4,r4,11320
    128c:	00032b80 	call	32b8 <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <draw_cube>:
#include "sys/alt_dma.h"
#include "alt_types.h"
#include "keyboard.h"

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
    12c8:	e0bffc17 	ldw	r2,-16(fp)
    12cc:	00c00044 	movi	r3,1
    12d0:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
    12d4:	e0bffc17 	ldw	r2,-16(fp)
    12d8:	e0c00317 	ldw	r3,12(fp)
    12dc:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	1006923a 	slli	r3,r2,8
    12e8:	e0bffc17 	ldw	r2,-16(fp)
    12ec:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    12f0:	e0bffe17 	ldw	r2,-8(fp)
    12f4:	1006923a 	slli	r3,r2,8
    12f8:	e0bffc17 	ldw	r2,-16(fp)
    12fc:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	1006923a 	slli	r3,r2,8
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10c00615 	stw	r3,24(r2)
	gpu->z = z * (FP_SCALE);
    1310:	e0800217 	ldw	r2,8(fp)
    1314:	1006923a 	slli	r3,r2,8
    1318:	e0bffc17 	ldw	r2,-16(fp)
    131c:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    1320:	e0bffc17 	ldw	r2,-16(fp)
    1324:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	00c00044 	movi	r3,1
    1338:	10c00115 	stw	r3,4(r2)
	time_t start = clock();
    133c:	000290c0 	call	290c <clock>
    1340:	e0bffb15 	stw	r2,-20(fp)
	while (gpu->done == 0) {
    1344:	0001883a 	nop
    1348:	e0bffc17 	ldw	r2,-16(fp)
    134c:	10800217 	ldw	r2,8(r2)
    1350:	103ffd26 	beq	r2,zero,1348 <__alt_exception_stack_pointer+0xf8001348>
	}
//	time_t delta = clock() - start;
//	if (delta > 100) {
//		printf("Render ticks %d\n", delta);
//	}
	gpu->done = 0;
    1354:	e0bffc17 	ldw	r2,-16(fp)
    1358:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    135c:	e0bffc17 	ldw	r2,-16(fp)
    1360:	10000815 	stw	zero,32(r2)

}
    1364:	0001883a 	nop
    1368:	e037883a 	mov	sp,fp
    136c:	dfc00117 	ldw	ra,4(sp)
    1370:	df000017 	ldw	fp,0(sp)
    1374:	dec00204 	addi	sp,sp,8
    1378:	f800283a 	ret

0000137c <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    137c:	defffd04 	addi	sp,sp,-12
    1380:	df000215 	stw	fp,8(sp)
    1384:	df000204 	addi	fp,sp,8
    1388:	e13ffe15 	stw	r4,-8(fp)
    138c:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
    1390:	e0bffe17 	ldw	r2,-8(fp)
    1394:	00c00084 	movi	r3,2
    1398:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    139c:	e0bffe17 	ldw	r2,-8(fp)
    13a0:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	00c00044 	movi	r3,1
    13b4:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    13b8:	e0bfff17 	ldw	r2,-4(fp)
    13bc:	10800058 	cmpnei	r2,r2,1
    13c0:	1000041e 	bne	r2,zero,13d4 <clear_screen+0x58>
		while (gpu->done == 0) {
    13c4:	0001883a 	nop
    13c8:	e0bffe17 	ldw	r2,-8(fp)
    13cc:	10800217 	ldw	r2,8(r2)
    13d0:	103ffd26 	beq	r2,zero,13c8 <__alt_exception_stack_pointer+0xf80013c8>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    13d4:	e0bffe17 	ldw	r2,-8(fp)
    13d8:	10000815 	stw	zero,32(r2)
}
    13dc:	0001883a 	nop
    13e0:	e037883a 	mov	sp,fp
    13e4:	df000017 	ldw	fp,0(sp)
    13e8:	dec00104 	addi	sp,sp,4
    13ec:	f800283a 	ret

000013f0 <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
    13f0:	defffd04 	addi	sp,sp,-12
    13f4:	df000215 	stw	fp,8(sp)
    13f8:	df000204 	addi	fp,sp,8
    13fc:	e13ffe15 	stw	r4,-8(fp)
    1400:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
    1404:	e0bffe17 	ldw	r2,-8(fp)
    1408:	00c000c4 	movi	r3,3
    140c:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    1410:	e0bffe17 	ldw	r2,-8(fp)
    1414:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	00c00044 	movi	r3,1
    1428:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	if (should_wait == 1) {
    142c:	e0bfff17 	ldw	r2,-4(fp)
    1430:	10800058 	cmpnei	r2,r2,1
    1434:	1000041e 	bne	r2,zero,1448 <clear_depth+0x58>
		while (gpu->done == 0) {
    1438:	0001883a 	nop
    143c:	e0bffe17 	ldw	r2,-8(fp)
    1440:	10800217 	ldw	r2,8(r2)
    1444:	103ffd26 	beq	r2,zero,143c <__alt_exception_stack_pointer+0xf800143c>
		}
	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
    1448:	e0bffe17 	ldw	r2,-8(fp)
    144c:	10000815 	stw	zero,32(r2)
}
    1450:	0001883a 	nop
    1454:	e037883a 	mov	sp,fp
    1458:	df000017 	ldw	fp,0(sp)
    145c:	dec00104 	addi	sp,sp,4
    1460:	f800283a 	ret

00001464 <main>:
//	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
//	vga_cont->frame_pointer = gpu->frame_pointer;
//	gpu->frame_pointer = temp;
//}

int main() {
    1464:	defff304 	addi	sp,sp,-52
    1468:	dfc00c15 	stw	ra,48(sp)
    146c:	df000b15 	stw	fp,44(sp)
    1470:	df000b04 	addi	fp,sp,44

	printf("Starting up");
    1474:	01000074 	movhi	r4,1
    1478:	210b2204 	addi	r4,r4,11400
    147c:	00031bc0 	call	31bc <printf>

	union frame_buffer_t* frame1 = (frame_buffer_t*) 0x08000000;
    1480:	00820034 	movhi	r2,2048
    1484:	e0bffb15 	stw	r2,-20(fp)
	//malloc(sizeof(frame_buffer_t));
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    1488:	010004f4 	movhi	r4,19
    148c:	21300004 	addi	r4,r4,-16384
    1490:	00029580 	call	2958 <malloc>
    1494:	e0bffc15 	stw	r2,-16(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    1498:	010004f4 	movhi	r4,19
    149c:	21300004 	addi	r4,r4,-16384
    14a0:	00029580 	call	2958 <malloc>
    14a4:	e0bffd15 	stw	r2,-12(fp)

	gpu->frame_pointer = frame1;
    14a8:	d0a00017 	ldw	r2,-32768(gp)
    14ac:	e0fffb17 	ldw	r3,-20(fp)
    14b0:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    14b4:	d0a00017 	ldw	r2,-32768(gp)
    14b8:	e0fffd17 	ldw	r3,-12(fp)
    14bc:	10c00315 	stw	r3,12(r2)
	//vga_cont->frame_pointer = frame1;

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    14c0:	e1fffd17 	ldw	r7,-12(fp)
    14c4:	e1bffc17 	ldw	r6,-16(fp)
    14c8:	e17ffb17 	ldw	r5,-20(fp)
    14cc:	01000074 	movhi	r4,1
    14d0:	210b2504 	addi	r4,r4,11412
    14d4:	00031bc0 	call	31bc <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    14d8:	01000074 	movhi	r4,1
    14dc:	210b3304 	addi	r4,r4,11468
    14e0:	00032b80 	call	32b8 <puts>
	//init_keyboard();




	int keycode = 0;
    14e4:	e03ffe15 	stw	zero,-8(fp)
	while (1) {
		time_t start_time = clock();
    14e8:	000290c0 	call	290c <clock>
    14ec:	e0bfff15 	stw	r2,-4(fp)
		clear_depth(gpu, 1);
    14f0:	d0a00017 	ldw	r2,-32768(gp)
    14f4:	01400044 	movi	r5,1
    14f8:	1009883a 	mov	r4,r2
    14fc:	00013f00 	call	13f0 <clear_depth>
		clear_screen(gpu, 1);
    1500:	d0a00017 	ldw	r2,-32768(gp)
    1504:	01400044 	movi	r5,1
    1508:	1009883a 	mov	r4,r2
    150c:	000137c0 	call	137c <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    1510:	000290c0 	call	290c <clock>
    1514:	1007883a 	mov	r3,r2
    1518:	e0bfff17 	ldw	r2,-4(fp)
    151c:	1885c83a 	sub	r2,r3,r2
    1520:	100b883a 	mov	r5,r2
    1524:	01000074 	movhi	r4,1
    1528:	210b3d04 	addi	r4,r4,11508
    152c:	00031bc0 	call	31bc <printf>
		start_time = clock();
    1530:	000290c0 	call	290c <clock>
    1534:	e0bfff15 	stw	r2,-4(fp)

		for(int z = 5; z > -7; z--) {
    1538:	00800144 	movi	r2,5
    153c:	e0bff715 	stw	r2,-36(fp)
    1540:	00001a06 	br	15ac <main+0x148>
		for(int x = 30; x > -30; x--) {
    1544:	00800784 	movi	r2,30
    1548:	e0bff815 	stw	r2,-32(fp)
    154c:	00001106 	br	1594 <main+0x130>

					draw_cube(gpu, 8, -16 + 8*x, -16, -64 + 8*z, 0);
    1550:	d0e00017 	ldw	r3,-32768(gp)
    1554:	e0bff817 	ldw	r2,-32(fp)
    1558:	10bfff84 	addi	r2,r2,-2
    155c:	100890fa 	slli	r4,r2,3
    1560:	e0bff717 	ldw	r2,-36(fp)
    1564:	10bffe04 	addi	r2,r2,-8
    1568:	100490fa 	slli	r2,r2,3
    156c:	d8000115 	stw	zero,4(sp)
    1570:	d8800015 	stw	r2,0(sp)
    1574:	01fffc04 	movi	r7,-16
    1578:	200d883a 	mov	r6,r4
    157c:	01400204 	movi	r5,8
    1580:	1809883a 	mov	r4,r3
    1584:	00012a80 	call	12a8 <draw_cube>
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 5; z > -7; z--) {
		for(int x = 30; x > -30; x--) {
    1588:	e0bff817 	ldw	r2,-32(fp)
    158c:	10bfffc4 	addi	r2,r2,-1
    1590:	e0bff815 	stw	r2,-32(fp)
    1594:	e0bff817 	ldw	r2,-32(fp)
    1598:	10bff8c8 	cmpgei	r2,r2,-29
    159c:	103fec1e 	bne	r2,zero,1550 <__alt_exception_stack_pointer+0xf8001550>
		clear_depth(gpu, 1);
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for(int z = 5; z > -7; z--) {
    15a0:	e0bff717 	ldw	r2,-36(fp)
    15a4:	10bfffc4 	addi	r2,r2,-1
    15a8:	e0bff715 	stw	r2,-36(fp)
    15ac:	e0bff717 	ldw	r2,-36(fp)
    15b0:	10bffe88 	cmpgei	r2,r2,-6
    15b4:	103fe31e 	bne	r2,zero,1544 <__alt_exception_stack_pointer+0xf8001544>

					//usleep(1000);
			}
		}

		for(int y = 1; y < 6; y++) {
    15b8:	00800044 	movi	r2,1
    15bc:	e0bff915 	stw	r2,-28(fp)
    15c0:	00001006 	br	1604 <main+0x1a0>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
    15c4:	d0e00017 	ldw	r3,-32768(gp)
    15c8:	e0bff917 	ldw	r2,-28(fp)
    15cc:	10bfff84 	addi	r2,r2,-2
    15d0:	100890fa 	slli	r4,r2,3
    15d4:	00800084 	movi	r2,2
    15d8:	d8800115 	stw	r2,4(sp)
    15dc:	00bff404 	movi	r2,-48
    15e0:	d8800015 	stw	r2,0(sp)
    15e4:	200f883a 	mov	r7,r4
    15e8:	01bffc04 	movi	r6,-16
    15ec:	01400204 	movi	r5,8
    15f0:	1809883a 	mov	r4,r3
    15f4:	00012a80 	call	12a8 <draw_cube>

					//usleep(1000);
			}
		}

		for(int y = 1; y < 6; y++) {
    15f8:	e0bff917 	ldw	r2,-28(fp)
    15fc:	10800044 	addi	r2,r2,1
    1600:	e0bff915 	stw	r2,-28(fp)
    1604:	e0bff917 	ldw	r2,-28(fp)
    1608:	10800190 	cmplti	r2,r2,6
    160c:	103fed1e 	bne	r2,zero,15c4 <__alt_exception_stack_pointer+0xf80015c4>
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1610:	00800044 	movi	r2,1
    1614:	e0bffa15 	stw	r2,-24(fp)
    1618:	00001006 	br	165c <main+0x1f8>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
    161c:	d0e00017 	ldw	r3,-32768(gp)
    1620:	e0bffa17 	ldw	r2,-24(fp)
    1624:	10bfff84 	addi	r2,r2,-2
    1628:	100890fa 	slli	r4,r2,3
    162c:	00800084 	movi	r2,2
    1630:	d8800115 	stw	r2,4(sp)
    1634:	00bff004 	movi	r2,-64
    1638:	d8800015 	stw	r2,0(sp)
    163c:	200f883a 	mov	r7,r4
    1640:	000d883a 	mov	r6,zero
    1644:	01400204 	movi	r5,8
    1648:	1809883a 	mov	r4,r3
    164c:	00012a80 	call	12a8 <draw_cube>

		for(int y = 1; y < 6; y++) {
			draw_cube(gpu, 8, -16, -16+8*y, -64 + 16, 2);
		}

		for(int y = 1; y < 6; y++) {
    1650:	e0bffa17 	ldw	r2,-24(fp)
    1654:	10800044 	addi	r2,r2,1
    1658:	e0bffa15 	stw	r2,-24(fp)
    165c:	e0bffa17 	ldw	r2,-24(fp)
    1660:	10800190 	cmplti	r2,r2,6
    1664:	103fed1e 	bne	r2,zero,161c <__alt_exception_stack_pointer+0xf800161c>
			draw_cube(gpu, 8, -16+16, -16+8*y, -64 + 16-16, 2);
		}

		draw_cube(gpu, 8, 16, -8, -40, 3);
    1668:	d0e00017 	ldw	r3,-32768(gp)
    166c:	008000c4 	movi	r2,3
    1670:	d8800115 	stw	r2,4(sp)
    1674:	00bff604 	movi	r2,-40
    1678:	d8800015 	stw	r2,0(sp)
    167c:	01fffe04 	movi	r7,-8
    1680:	01800404 	movi	r6,16
    1684:	01400204 	movi	r5,8
    1688:	1809883a 	mov	r4,r3
    168c:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 8, -8, -40, 3);
    1690:	d0e00017 	ldw	r3,-32768(gp)
    1694:	008000c4 	movi	r2,3
    1698:	d8800115 	stw	r2,4(sp)
    169c:	00bff604 	movi	r2,-40
    16a0:	d8800015 	stw	r2,0(sp)
    16a4:	01fffe04 	movi	r7,-8
    16a8:	01800204 	movi	r6,8
    16ac:	01400204 	movi	r5,8
    16b0:	1809883a 	mov	r4,r3
    16b4:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 24, -8, -40, 3);
    16b8:	d0e00017 	ldw	r3,-32768(gp)
    16bc:	008000c4 	movi	r2,3
    16c0:	d8800115 	stw	r2,4(sp)
    16c4:	00bff604 	movi	r2,-40
    16c8:	d8800015 	stw	r2,0(sp)
    16cc:	01fffe04 	movi	r7,-8
    16d0:	01800604 	movi	r6,24
    16d4:	01400204 	movi	r5,8
    16d8:	1809883a 	mov	r4,r3
    16dc:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40-8, 3);
    16e0:	d0e00017 	ldw	r3,-32768(gp)
    16e4:	008000c4 	movi	r2,3
    16e8:	d8800115 	stw	r2,4(sp)
    16ec:	00bff404 	movi	r2,-48
    16f0:	d8800015 	stw	r2,0(sp)
    16f4:	01fffe04 	movi	r7,-8
    16f8:	01800404 	movi	r6,16
    16fc:	01400204 	movi	r5,8
    1700:	1809883a 	mov	r4,r3
    1704:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40+8, 3);
    1708:	d0e00017 	ldw	r3,-32768(gp)
    170c:	008000c4 	movi	r2,3
    1710:	d8800115 	stw	r2,4(sp)
    1714:	00bff804 	movi	r2,-32
    1718:	d8800015 	stw	r2,0(sp)
    171c:	01fffe04 	movi	r7,-8
    1720:	01800404 	movi	r6,16
    1724:	01400204 	movi	r5,8
    1728:	1809883a 	mov	r4,r3
    172c:	00012a80 	call	12a8 <draw_cube>
		draw_cube(gpu, 8, 16, 0, -40, 6);
    1730:	d0e00017 	ldw	r3,-32768(gp)
    1734:	00800184 	movi	r2,6
    1738:	d8800115 	stw	r2,4(sp)
    173c:	00bff604 	movi	r2,-40
    1740:	d8800015 	stw	r2,0(sp)
    1744:	000f883a 	mov	r7,zero
    1748:	01800404 	movi	r6,16
    174c:	01400204 	movi	r5,8
    1750:	1809883a 	mov	r4,r3
    1754:	00012a80 	call	12a8 <draw_cube>





		printf("Render ticks %d\n", clock() - start_time);
    1758:	000290c0 	call	290c <clock>
    175c:	1007883a 	mov	r3,r2
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	1885c83a 	sub	r2,r3,r2
    1768:	100b883a 	mov	r5,r2
    176c:	01000074 	movhi	r4,1
    1770:	210b4104 	addi	r4,r4,11524
    1774:	00031bc0 	call	31bc <printf>
		start_time = clock();
    1778:	000290c0 	call	290c <clock>
    177c:	e0bfff15 	stw	r2,-4(fp)
		usleep(500000);
    1780:	01000234 	movhi	r4,8
    1784:	21284804 	addi	r4,r4,-24288
    1788:	00101d40 	call	101d4 <usleep>
//			y -= 5;
//		} else if(keycode == 81) {
//			y += 5;
//		}

	}
    178c:	003f5606 	br	14e8 <__alt_exception_stack_pointer+0xf80014e8>

00001790 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1790:	defffc04 	addi	sp,sp,-16
    1794:	dfc00315 	stw	ra,12(sp)
    1798:	df000215 	stw	fp,8(sp)
    179c:	df000204 	addi	fp,sp,8
    17a0:	2007883a 	mov	r3,r4
    17a4:	2805883a 	mov	r2,r5
    17a8:	e0fffe0d 	sth	r3,-8(fp)
    17ac:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    17b0:	e0bffe0b 	ldhu	r2,-8(fp)
    17b4:	100b883a 	mov	r5,r2
    17b8:	01000084 	movi	r4,2
    17bc:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    17c0:	e0bfff0b 	ldhu	r2,-4(fp)
    17c4:	100b883a 	mov	r5,r2
    17c8:	0009883a 	mov	r4,zero
    17cc:	00003280 	call	328 <IO_write>
}
    17d0:	0001883a 	nop
    17d4:	e037883a 	mov	sp,fp
    17d8:	dfc00117 	ldw	ra,4(sp)
    17dc:	df000017 	ldw	fp,0(sp)
    17e0:	dec00204 	addi	sp,sp,8
    17e4:	f800283a 	ret

000017e8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    17e8:	defffd04 	addi	sp,sp,-12
    17ec:	dfc00215 	stw	ra,8(sp)
    17f0:	df000115 	stw	fp,4(sp)
    17f4:	df000104 	addi	fp,sp,4
    17f8:	2005883a 	mov	r2,r4
    17fc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1800:	e0bfff0b 	ldhu	r2,-4(fp)
    1804:	100b883a 	mov	r5,r2
    1808:	01000084 	movi	r4,2
    180c:	00003280 	call	328 <IO_write>
	return IO_read(0);
    1810:	0009883a 	mov	r4,zero
    1814:	00003b00 	call	3b0 <IO_read>

}
    1818:	e037883a 	mov	sp,fp
    181c:	dfc00117 	ldw	ra,4(sp)
    1820:	df000017 	ldw	fp,0(sp)
    1824:	dec00204 	addi	sp,sp,8
    1828:	f800283a 	ret

0000182c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    182c:	defffe04 	addi	sp,sp,-8
    1830:	dfc00115 	stw	ra,4(sp)
    1834:	df000015 	stw	fp,0(sp)
    1838:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    183c:	017e9414 	movui	r5,64080
    1840:	01000044 	movi	r4,1
    1844:	00003280 	call	328 <IO_write>
	usleep(100000);
    1848:	010000b4 	movhi	r4,2
    184c:	2121a804 	addi	r4,r4,-31072
    1850:	00101d40 	call	101d4 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1854:	01000074 	movhi	r4,1
    1858:	210b4604 	addi	r4,r4,11544
    185c:	00032b80 	call	32b8 <puts>

	usleep(500000);
    1860:	01000234 	movhi	r4,8
    1864:	21284804 	addi	r4,r4,-24288
    1868:	00101d40 	call	101d4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    186c:	01000074 	movhi	r4,1
    1870:	210b4d04 	addi	r4,r4,11572
    1874:	00032b80 	call	32b8 <puts>
	IO_read(HPI_MAILBOX);
    1878:	01000044 	movi	r4,1
    187c:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1880:	010000c4 	movi	r4,3
    1884:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1888:	01005104 	movi	r4,324
    188c:	00017e80 	call	17e8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1890:	000b883a 	mov	r5,zero
    1894:	01005104 	movi	r4,324
    1898:	00017900 	call	1790 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    189c:	01005204 	movi	r4,328
    18a0:	00017e80 	call	17e8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    18a4:	000b883a 	mov	r5,zero
    18a8:	01005204 	movi	r4,328
    18ac:	00017900 	call	1790 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    18b0:	017fffd4 	movui	r5,65535
    18b4:	01302414 	movui	r4,49296
    18b8:	00017900 	call	1790 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    18bc:	017fffd4 	movui	r5,65535
    18c0:	01302c14 	movui	r4,49328
    18c4:	00017900 	call	1790 <UsbWrite>
}
    18c8:	0001883a 	nop
    18cc:	e037883a 	mov	sp,fp
    18d0:	dfc00117 	ldw	ra,4(sp)
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00204 	addi	sp,sp,8
    18dc:	f800283a 	ret

000018e0 <UsbSetAddress>:


void UsbSetAddress()
{
    18e0:	defffe04 	addi	sp,sp,-8
    18e4:	dfc00115 	stw	ra,4(sp)
    18e8:	df000015 	stw	fp,0(sp)
    18ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    18f0:	01414004 	movi	r5,1280
    18f4:	01000084 	movi	r4,2
    18f8:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    18fc:	01414304 	movi	r5,1292
    1900:	0009883a 	mov	r4,zero
    1904:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1908:	01400204 	movi	r5,8
    190c:	0009883a 	mov	r4,zero
    1910:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1914:	01403404 	movi	r5,208
    1918:	0009883a 	mov	r4,zero
    191c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1920:	01400044 	movi	r5,1
    1924:	0009883a 	mov	r4,zero
    1928:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    192c:	014004c4 	movi	r5,19
    1930:	0009883a 	mov	r4,zero
    1934:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1938:	01414504 	movi	r5,1300
    193c:	0009883a 	mov	r4,zero
    1940:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1944:	01414004 	movi	r5,1280
    1948:	0009883a 	mov	r4,zero
    194c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1950:	01400084 	movi	r5,2
    1954:	0009883a 	mov	r4,zero
    1958:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    195c:	000b883a 	mov	r5,zero
    1960:	0009883a 	mov	r4,zero
    1964:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1968:	000b883a 	mov	r5,zero
    196c:	0009883a 	mov	r4,zero
    1970:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1974:	000b883a 	mov	r5,zero
    1978:	0009883a 	mov	r4,zero
    197c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1980:	000b883a 	mov	r5,zero
    1984:	0009883a 	mov	r4,zero
    1988:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    198c:	01402404 	movi	r5,144
    1990:	0009883a 	mov	r4,zero
    1994:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1998:	01401044 	movi	r5,65
    199c:	0009883a 	mov	r4,zero
    19a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19a4:	014004c4 	movi	r5,19
    19a8:	0009883a 	mov	r4,zero
    19ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19b0:	000b883a 	mov	r5,zero
    19b4:	0009883a 	mov	r4,zero
    19b8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    19bc:	01414004 	movi	r5,1280
    19c0:	01006c04 	movi	r4,432
    19c4:	00017900 	call	1790 <UsbWrite>
}
    19c8:	0001883a 	nop
    19cc:	e037883a 	mov	sp,fp
    19d0:	dfc00117 	ldw	ra,4(sp)
    19d4:	df000017 	ldw	fp,0(sp)
    19d8:	dec00204 	addi	sp,sp,8
    19dc:	f800283a 	ret

000019e0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    19e0:	defffe04 	addi	sp,sp,-8
    19e4:	dfc00115 	stw	ra,4(sp)
    19e8:	df000015 	stw	fp,0(sp)
    19ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    19f0:	01414004 	movi	r5,1280
    19f4:	01000084 	movi	r4,2
    19f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    19fc:	01414304 	movi	r5,1292
    1a00:	0009883a 	mov	r4,zero
    1a04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a08:	01400204 	movi	r5,8
    1a0c:	0009883a 	mov	r4,zero
    1a10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a14:	0140b404 	movi	r5,720
    1a18:	0009883a 	mov	r4,zero
    1a1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a20:	01400044 	movi	r5,1
    1a24:	0009883a 	mov	r4,zero
    1a28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a2c:	014004c4 	movi	r5,19
    1a30:	0009883a 	mov	r4,zero
    1a34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1a38:	01414504 	movi	r5,1300
    1a3c:	0009883a 	mov	r4,zero
    1a40:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1a44:	0141a004 	movi	r5,1664
    1a48:	0009883a 	mov	r4,zero
    1a4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1a50:	01404004 	movi	r5,256
    1a54:	0009883a 	mov	r4,zero
    1a58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1a5c:	000b883a 	mov	r5,zero
    1a60:	0009883a 	mov	r4,zero
    1a64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1a68:	01400204 	movi	r5,8
    1a6c:	0009883a 	mov	r4,zero
    1a70:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1a74:	01414b04 	movi	r5,1324
    1a78:	0009883a 	mov	r4,zero
    1a7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1a80:	01400204 	movi	r5,8
    1a84:	0009883a 	mov	r4,zero
    1a88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1a8c:	0140a404 	movi	r5,656
    1a90:	0009883a 	mov	r4,zero
    1a94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1a98:	01401044 	movi	r5,65
    1a9c:	0009883a 	mov	r4,zero
    1aa0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1aa4:	014004c4 	movi	r5,19
    1aa8:	0009883a 	mov	r4,zero
    1aac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1ab0:	01414804 	movi	r5,1312
    1ab4:	0009883a 	mov	r4,zero
    1ab8:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1abc:	000b883a 	mov	r5,zero
    1ac0:	0009883a 	mov	r4,zero
    1ac4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1ac8:	000b883a 	mov	r5,zero
    1acc:	0009883a 	mov	r4,zero
    1ad0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1ad4:	01408404 	movi	r5,528
    1ad8:	0009883a 	mov	r4,zero
    1adc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1ae0:	01401044 	movi	r5,65
    1ae4:	0009883a 	mov	r4,zero
    1ae8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1aec:	014004c4 	movi	r5,19
    1af0:	0009883a 	mov	r4,zero
    1af4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1af8:	000b883a 	mov	r5,zero
    1afc:	0009883a 	mov	r4,zero
    1b00:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b04:	01414004 	movi	r5,1280
    1b08:	01006c04 	movi	r4,432
    1b0c:	00017900 	call	1790 <UsbWrite>
}
    1b10:	0001883a 	nop
    1b14:	e037883a 	mov	sp,fp
    1b18:	dfc00117 	ldw	ra,4(sp)
    1b1c:	df000017 	ldw	fp,0(sp)
    1b20:	dec00204 	addi	sp,sp,8
    1b24:	f800283a 	ret

00001b28 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1b28:	defffe04 	addi	sp,sp,-8
    1b2c:	dfc00115 	stw	ra,4(sp)
    1b30:	df000015 	stw	fp,0(sp)
    1b34:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b38:	01414004 	movi	r5,1280
    1b3c:	01000084 	movi	r4,2
    1b40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b44:	01414304 	movi	r5,1292
    1b48:	0009883a 	mov	r4,zero
    1b4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1b50:	01400204 	movi	r5,8
    1b54:	0009883a 	mov	r4,zero
    1b58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1b5c:	0140b404 	movi	r5,720
    1b60:	0009883a 	mov	r4,zero
    1b64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1b68:	01400044 	movi	r5,1
    1b6c:	0009883a 	mov	r4,zero
    1b70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b74:	014004c4 	movi	r5,19
    1b78:	0009883a 	mov	r4,zero
    1b7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1b80:	01414504 	movi	r5,1300
    1b84:	0009883a 	mov	r4,zero
    1b88:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1b8c:	0141a004 	movi	r5,1664
    1b90:	0009883a 	mov	r4,zero
    1b94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1b98:	01404004 	movi	r5,256
    1b9c:	0009883a 	mov	r4,zero
    1ba0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1ba4:	000b883a 	mov	r5,zero
    1ba8:	0009883a 	mov	r4,zero
    1bac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1bb0:	01400484 	movi	r5,18
    1bb4:	0009883a 	mov	r4,zero
    1bb8:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1bbc:	01415104 	movi	r5,1348
    1bc0:	0009883a 	mov	r4,zero
    1bc4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1bc8:	01400204 	movi	r5,8
    1bcc:	0009883a 	mov	r4,zero
    1bd0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1bd4:	0140a404 	movi	r5,656
    1bd8:	0009883a 	mov	r4,zero
    1bdc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1be0:	01401044 	movi	r5,65
    1be4:	0009883a 	mov	r4,zero
    1be8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1bec:	014004c4 	movi	r5,19
    1bf0:	0009883a 	mov	r4,zero
    1bf4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1bf8:	01414804 	movi	r5,1312
    1bfc:	0009883a 	mov	r4,zero
    1c00:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1c04:	01415304 	movi	r5,1356
    1c08:	0009883a 	mov	r4,zero
    1c0c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1c10:	01400204 	movi	r5,8
    1c14:	0009883a 	mov	r4,zero
    1c18:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1c1c:	0140a404 	movi	r5,656
    1c20:	0009883a 	mov	r4,zero
    1c24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1c28:	01400044 	movi	r5,1
    1c2c:	0009883a 	mov	r4,zero
    1c30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1c34:	014004c4 	movi	r5,19
    1c38:	0009883a 	mov	r4,zero
    1c3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1c40:	01414b04 	movi	r5,1324
    1c44:	0009883a 	mov	r4,zero
    1c48:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1c4c:	01415504 	movi	r5,1364
    1c50:	0009883a 	mov	r4,zero
    1c54:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1c58:	01400084 	movi	r5,2
    1c5c:	0009883a 	mov	r4,zero
    1c60:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1c64:	0140a404 	movi	r5,656
    1c68:	0009883a 	mov	r4,zero
    1c6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1c70:	01401044 	movi	r5,65
    1c74:	0009883a 	mov	r4,zero
    1c78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1c7c:	014004c4 	movi	r5,19
    1c80:	0009883a 	mov	r4,zero
    1c84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1c88:	01414e04 	movi	r5,1336
    1c8c:	0009883a 	mov	r4,zero
    1c90:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1c94:	000b883a 	mov	r5,zero
    1c98:	0009883a 	mov	r4,zero
    1c9c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1ca0:	000b883a 	mov	r5,zero
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1cac:	01408404 	movi	r5,528
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1cb8:	01401044 	movi	r5,65
    1cbc:	0009883a 	mov	r4,zero
    1cc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1cc4:	014004c4 	movi	r5,19
    1cc8:	0009883a 	mov	r4,zero
    1ccc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1cd0:	000b883a 	mov	r5,zero
    1cd4:	0009883a 	mov	r4,zero
    1cd8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1cdc:	01414004 	movi	r5,1280
    1ce0:	01006c04 	movi	r4,432
    1ce4:	00017900 	call	1790 <UsbWrite>
}
    1ce8:	0001883a 	nop
    1cec:	e037883a 	mov	sp,fp
    1cf0:	dfc00117 	ldw	ra,4(sp)
    1cf4:	df000017 	ldw	fp,0(sp)
    1cf8:	dec00204 	addi	sp,sp,8
    1cfc:	f800283a 	ret

00001d00 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1d00:	defffe04 	addi	sp,sp,-8
    1d04:	dfc00115 	stw	ra,4(sp)
    1d08:	df000015 	stw	fp,0(sp)
    1d0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d10:	01414004 	movi	r5,1280
    1d14:	01000084 	movi	r4,2
    1d18:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d1c:	01414304 	movi	r5,1292
    1d20:	0009883a 	mov	r4,zero
    1d24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d28:	01400204 	movi	r5,8
    1d2c:	0009883a 	mov	r4,zero
    1d30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d34:	0140b404 	movi	r5,720
    1d38:	0009883a 	mov	r4,zero
    1d3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d40:	01400044 	movi	r5,1
    1d44:	0009883a 	mov	r4,zero
    1d48:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d4c:	014004c4 	movi	r5,19
    1d50:	0009883a 	mov	r4,zero
    1d54:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d58:	01414504 	movi	r5,1300
    1d5c:	0009883a 	mov	r4,zero
    1d60:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1d64:	0141a004 	movi	r5,1664
    1d68:	0009883a 	mov	r4,zero
    1d6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1d70:	01408004 	movi	r5,512
    1d74:	0009883a 	mov	r4,zero
    1d78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1d7c:	000b883a 	mov	r5,zero
    1d80:	0009883a 	mov	r4,zero
    1d84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1d88:	01400244 	movi	r5,9
    1d8c:	0009883a 	mov	r4,zero
    1d90:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d94:	01415104 	movi	r5,1348
    1d98:	0009883a 	mov	r4,zero
    1d9c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1da0:	01400204 	movi	r5,8
    1da4:	0009883a 	mov	r4,zero
    1da8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1dac:	0140a404 	movi	r5,656
    1db0:	0009883a 	mov	r4,zero
    1db4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1db8:	01401044 	movi	r5,65
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1dc4:	014004c4 	movi	r5,19
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1dd0:	01414804 	movi	r5,1312
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1ddc:	01415304 	movi	r5,1356
    1de0:	0009883a 	mov	r4,zero
    1de4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1de8:	01400044 	movi	r5,1
    1dec:	0009883a 	mov	r4,zero
    1df0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1df4:	0140a404 	movi	r5,656
    1df8:	0009883a 	mov	r4,zero
    1dfc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1e00:	01400044 	movi	r5,1
    1e04:	0009883a 	mov	r4,zero
    1e08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e0c:	014004c4 	movi	r5,19
    1e10:	0009883a 	mov	r4,zero
    1e14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1e18:	01414b04 	movi	r5,1324
    1e1c:	0009883a 	mov	r4,zero
    1e20:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1e24:	000b883a 	mov	r5,zero
    1e28:	0009883a 	mov	r4,zero
    1e2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1e30:	000b883a 	mov	r5,zero
    1e34:	0009883a 	mov	r4,zero
    1e38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1e3c:	01408404 	movi	r5,528
    1e40:	0009883a 	mov	r4,zero
    1e44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1e48:	01401044 	movi	r5,65
    1e4c:	0009883a 	mov	r4,zero
    1e50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1e54:	014004c4 	movi	r5,19
    1e58:	0009883a 	mov	r4,zero
    1e5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1e60:	000b883a 	mov	r5,zero
    1e64:	0009883a 	mov	r4,zero
    1e68:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e6c:	01414004 	movi	r5,1280
    1e70:	01006c04 	movi	r4,432
    1e74:	00017900 	call	1790 <UsbWrite>
}
    1e78:	0001883a 	nop
    1e7c:	e037883a 	mov	sp,fp
    1e80:	dfc00117 	ldw	ra,4(sp)
    1e84:	df000017 	ldw	fp,0(sp)
    1e88:	dec00204 	addi	sp,sp,8
    1e8c:	f800283a 	ret

00001e90 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1e90:	defffe04 	addi	sp,sp,-8
    1e94:	dfc00115 	stw	ra,4(sp)
    1e98:	df000015 	stw	fp,0(sp)
    1e9c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ea0:	01414004 	movi	r5,1280
    1ea4:	01000084 	movi	r4,2
    1ea8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1eac:	01414304 	movi	r5,1292
    1eb0:	0009883a 	mov	r4,zero
    1eb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1eb8:	01400204 	movi	r5,8
    1ebc:	0009883a 	mov	r4,zero
    1ec0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1ec4:	0140b404 	movi	r5,720
    1ec8:	0009883a 	mov	r4,zero
    1ecc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ed0:	01400044 	movi	r5,1
    1ed4:	0009883a 	mov	r4,zero
    1ed8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1edc:	014004c4 	movi	r5,19
    1ee0:	0009883a 	mov	r4,zero
    1ee4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ee8:	01414504 	movi	r5,1300
    1eec:	0009883a 	mov	r4,zero
    1ef0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1ef4:	0141a004 	movi	r5,1664
    1ef8:	0009883a 	mov	r4,zero
    1efc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1f00:	01408004 	movi	r5,512
    1f04:	0009883a 	mov	r4,zero
    1f08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f0c:	000b883a 	mov	r5,zero
    1f10:	0009883a 	mov	r4,zero
    1f14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1f18:	01403fc4 	movi	r5,255
    1f1c:	0009883a 	mov	r4,zero
    1f20:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1f24:	01415704 	movi	r5,1372
    1f28:	0009883a 	mov	r4,zero
    1f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f30:	01400204 	movi	r5,8
    1f34:	0009883a 	mov	r4,zero
    1f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f3c:	0140a404 	movi	r5,656
    1f40:	0009883a 	mov	r4,zero
    1f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f48:	01401044 	movi	r5,65
    1f4c:	0009883a 	mov	r4,zero
    1f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f54:	014004c4 	movi	r5,19
    1f58:	0009883a 	mov	r4,zero
    1f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f60:	01414804 	movi	r5,1312
    1f64:	0009883a 	mov	r4,zero
    1f68:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1f6c:	01415904 	movi	r5,1380
    1f70:	0009883a 	mov	r4,zero
    1f74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1f78:	01400204 	movi	r5,8
    1f7c:	0009883a 	mov	r4,zero
    1f80:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1f84:	0140a404 	movi	r5,656
    1f88:	0009883a 	mov	r4,zero
    1f8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1f90:	01400044 	movi	r5,1
    1f94:	0009883a 	mov	r4,zero
    1f98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f9c:	014004c4 	movi	r5,19
    1fa0:	0009883a 	mov	r4,zero
    1fa4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1fa8:	01414b04 	movi	r5,1324
    1fac:	0009883a 	mov	r4,zero
    1fb0:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1fb4:	01415b04 	movi	r5,1388
    1fb8:	0009883a 	mov	r4,zero
    1fbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1fc0:	01400204 	movi	r5,8
    1fc4:	0009883a 	mov	r4,zero
    1fc8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1fcc:	0140a404 	movi	r5,656
    1fd0:	0009883a 	mov	r4,zero
    1fd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1fd8:	01401044 	movi	r5,65
    1fdc:	0009883a 	mov	r4,zero
    1fe0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1fe4:	014004c4 	movi	r5,19
    1fe8:	0009883a 	mov	r4,zero
    1fec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1ff0:	01414e04 	movi	r5,1336
    1ff4:	0009883a 	mov	r4,zero
    1ff8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1ffc:	01415d04 	movi	r5,1396
    2000:	0009883a 	mov	r4,zero
    2004:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2008:	01400204 	movi	r5,8
    200c:	0009883a 	mov	r4,zero
    2010:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2014:	0140a404 	movi	r5,656
    2018:	0009883a 	mov	r4,zero
    201c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2020:	01400044 	movi	r5,1
    2024:	0009883a 	mov	r4,zero
    2028:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    202c:	014004c4 	movi	r5,19
    2030:	0009883a 	mov	r4,zero
    2034:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2038:	01415104 	movi	r5,1348
    203c:	0009883a 	mov	r4,zero
    2040:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2044:	01415f04 	movi	r5,1404
    2048:	0009883a 	mov	r4,zero
    204c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2050:	01400084 	movi	r5,2
    2054:	0009883a 	mov	r4,zero
    2058:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    205c:	0140a404 	movi	r5,656
    2060:	0009883a 	mov	r4,zero
    2064:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2068:	01401044 	movi	r5,65
    206c:	0009883a 	mov	r4,zero
    2070:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2074:	014004c4 	movi	r5,19
    2078:	0009883a 	mov	r4,zero
    207c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2080:	01415404 	movi	r5,1360
    2084:	0009883a 	mov	r4,zero
    2088:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    208c:	000b883a 	mov	r5,zero
    2090:	0009883a 	mov	r4,zero
    2094:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2098:	000b883a 	mov	r5,zero
    209c:	0009883a 	mov	r4,zero
    20a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    20a4:	01408404 	movi	r5,528
    20a8:	0009883a 	mov	r4,zero
    20ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    20b0:	01401044 	movi	r5,65
    20b4:	0009883a 	mov	r4,zero
    20b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    20bc:	014004c4 	movi	r5,19
    20c0:	0009883a 	mov	r4,zero
    20c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    20c8:	000b883a 	mov	r5,zero
    20cc:	0009883a 	mov	r4,zero
    20d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20d4:	01414004 	movi	r5,1280
    20d8:	01006c04 	movi	r4,432
    20dc:	00017900 	call	1790 <UsbWrite>
}
    20e0:	0001883a 	nop
    20e4:	e037883a 	mov	sp,fp
    20e8:	dfc00117 	ldw	ra,4(sp)
    20ec:	df000017 	ldw	fp,0(sp)
    20f0:	dec00204 	addi	sp,sp,8
    20f4:	f800283a 	ret

000020f8 <UsbSetConfig>:

void UsbSetConfig()
{
    20f8:	defffe04 	addi	sp,sp,-8
    20fc:	dfc00115 	stw	ra,4(sp)
    2100:	df000015 	stw	fp,0(sp)
    2104:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2108:	01414004 	movi	r5,1280
    210c:	01000084 	movi	r4,2
    2110:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2114:	01414304 	movi	r5,1292
    2118:	0009883a 	mov	r4,zero
    211c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2120:	01400204 	movi	r5,8
    2124:	0009883a 	mov	r4,zero
    2128:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    212c:	0140b404 	movi	r5,720
    2130:	0009883a 	mov	r4,zero
    2134:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2138:	01400044 	movi	r5,1
    213c:	0009883a 	mov	r4,zero
    2140:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2144:	014004c4 	movi	r5,19
    2148:	0009883a 	mov	r4,zero
    214c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2150:	01414504 	movi	r5,1300
    2154:	0009883a 	mov	r4,zero
    2158:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    215c:	01424004 	movi	r5,2304
    2160:	0009883a 	mov	r4,zero
    2164:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2168:	01400044 	movi	r5,1
    216c:	0009883a 	mov	r4,zero
    2170:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2174:	000b883a 	mov	r5,zero
    2178:	0009883a 	mov	r4,zero
    217c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2180:	000b883a 	mov	r5,zero
    2184:	0009883a 	mov	r4,zero
    2188:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    218c:	000b883a 	mov	r5,zero
    2190:	0009883a 	mov	r4,zero
    2194:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2198:	000b883a 	mov	r5,zero
    219c:	0009883a 	mov	r4,zero
    21a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    21a4:	0140a404 	movi	r5,656
    21a8:	0009883a 	mov	r4,zero
    21ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    21b0:	01401044 	movi	r5,65
    21b4:	0009883a 	mov	r4,zero
    21b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21bc:	014004c4 	movi	r5,19
    21c0:	0009883a 	mov	r4,zero
    21c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21c8:	000b883a 	mov	r5,zero
    21cc:	0009883a 	mov	r4,zero
    21d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21d4:	01414004 	movi	r5,1280
    21d8:	01006c04 	movi	r4,432
    21dc:	00017900 	call	1790 <UsbWrite>

}
    21e0:	0001883a 	nop
    21e4:	e037883a 	mov	sp,fp
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	df000017 	ldw	fp,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret

000021f8 <UsbClassRequest>:

void UsbClassRequest()
{
    21f8:	defffe04 	addi	sp,sp,-8
    21fc:	dfc00115 	stw	ra,4(sp)
    2200:	df000015 	stw	fp,0(sp)
    2204:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2208:	01414004 	movi	r5,1280
    220c:	01000084 	movi	r4,2
    2210:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2214:	01414304 	movi	r5,1292
    2218:	0009883a 	mov	r4,zero
    221c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2220:	01400204 	movi	r5,8
    2224:	0009883a 	mov	r4,zero
    2228:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    222c:	0140b404 	movi	r5,720
    2230:	0009883a 	mov	r4,zero
    2234:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2238:	01400044 	movi	r5,1
    223c:	0009883a 	mov	r4,zero
    2240:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2244:	014004c4 	movi	r5,19
    2248:	0009883a 	mov	r4,zero
    224c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2250:	01414504 	movi	r5,1300
    2254:	0009883a 	mov	r4,zero
    2258:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    225c:	01428844 	movi	r5,2593
    2260:	0009883a 	mov	r4,zero
    2264:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2268:	000b883a 	mov	r5,zero
    226c:	0009883a 	mov	r4,zero
    2270:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2274:	000b883a 	mov	r5,zero
    2278:	0009883a 	mov	r4,zero
    227c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2280:	000b883a 	mov	r5,zero
    2284:	0009883a 	mov	r4,zero
    2288:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    228c:	000b883a 	mov	r5,zero
    2290:	0009883a 	mov	r4,zero
    2294:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2298:	000b883a 	mov	r5,zero
    229c:	0009883a 	mov	r4,zero
    22a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    22a4:	0140a404 	movi	r5,656
    22a8:	0009883a 	mov	r4,zero
    22ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    22b0:	01401044 	movi	r5,65
    22b4:	0009883a 	mov	r4,zero
    22b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    22bc:	014004c4 	movi	r5,19
    22c0:	0009883a 	mov	r4,zero
    22c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22c8:	000b883a 	mov	r5,zero
    22cc:	0009883a 	mov	r4,zero
    22d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22d4:	01414004 	movi	r5,1280
    22d8:	01006c04 	movi	r4,432
    22dc:	00017900 	call	1790 <UsbWrite>
}
    22e0:	0001883a 	nop
    22e4:	e037883a 	mov	sp,fp
    22e8:	dfc00117 	ldw	ra,4(sp)
    22ec:	df000017 	ldw	fp,0(sp)
    22f0:	dec00204 	addi	sp,sp,8
    22f4:	f800283a 	ret

000022f8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    22f8:	defffe04 	addi	sp,sp,-8
    22fc:	dfc00115 	stw	ra,4(sp)
    2300:	df000015 	stw	fp,0(sp)
    2304:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2308:	01414004 	movi	r5,1280
    230c:	01000084 	movi	r4,2
    2310:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2314:	01414304 	movi	r5,1292
    2318:	0009883a 	mov	r4,zero
    231c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2320:	01400204 	movi	r5,8
    2324:	0009883a 	mov	r4,zero
    2328:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    232c:	0140b404 	movi	r5,720
    2330:	0009883a 	mov	r4,zero
    2334:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2338:	01400044 	movi	r5,1
    233c:	0009883a 	mov	r4,zero
    2340:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2344:	014004c4 	movi	r5,19
    2348:	0009883a 	mov	r4,zero
    234c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2350:	01414504 	movi	r5,1300
    2354:	0009883a 	mov	r4,zero
    2358:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    235c:	0141a044 	movi	r5,1665
    2360:	0009883a 	mov	r4,zero
    2364:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2368:	01484004 	movi	r5,8448
    236c:	0009883a 	mov	r4,zero
    2370:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2374:	000b883a 	mov	r5,zero
    2378:	0009883a 	mov	r4,zero
    237c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2380:	01401ec4 	movi	r5,123
    2384:	0009883a 	mov	r4,zero
    2388:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    238c:	01415104 	movi	r5,1348
    2390:	0009883a 	mov	r4,zero
    2394:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2398:	01400204 	movi	r5,8
    239c:	0009883a 	mov	r4,zero
    23a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    23a4:	0140a404 	movi	r5,656
    23a8:	0009883a 	mov	r4,zero
    23ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    23b0:	01401044 	movi	r5,65
    23b4:	0009883a 	mov	r4,zero
    23b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23bc:	014004c4 	movi	r5,19
    23c0:	0009883a 	mov	r4,zero
    23c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    23c8:	01414804 	movi	r5,1312
    23cc:	0009883a 	mov	r4,zero
    23d0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    23d4:	000b883a 	mov	r5,zero
    23d8:	0009883a 	mov	r4,zero
    23dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    23e0:	000b883a 	mov	r5,zero
    23e4:	0009883a 	mov	r4,zero
    23e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    23ec:	01408404 	movi	r5,528
    23f0:	0009883a 	mov	r4,zero
    23f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    23f8:	01401044 	movi	r5,65
    23fc:	0009883a 	mov	r4,zero
    2400:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2404:	014004c4 	movi	r5,19
    2408:	0009883a 	mov	r4,zero
    240c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2410:	000b883a 	mov	r5,zero
    2414:	0009883a 	mov	r4,zero
    2418:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    241c:	01414004 	movi	r5,1280
    2420:	01006c04 	movi	r4,432
    2424:	00017900 	call	1790 <UsbWrite>

}
    2428:	0001883a 	nop
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2440:	defffe04 	addi	sp,sp,-8
    2444:	dfc00115 	stw	ra,4(sp)
    2448:	df000015 	stw	fp,0(sp)
    244c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2450:	01414004 	movi	r5,1280
    2454:	01000084 	movi	r4,2
    2458:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    245c:	01414304 	movi	r5,1292
    2460:	0009883a 	mov	r4,zero
    2464:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2468:	01400204 	movi	r5,8
    246c:	0009883a 	mov	r4,zero
    2470:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2474:	0140b404 	movi	r5,720
    2478:	0009883a 	mov	r4,zero
    247c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2480:	01400044 	movi	r5,1
    2484:	0009883a 	mov	r4,zero
    2488:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    248c:	014004c4 	movi	r5,19
    2490:	0009883a 	mov	r4,zero
    2494:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2498:	01414504 	movi	r5,1300
    249c:	0009883a 	mov	r4,zero
    24a0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    24a4:	0141a044 	movi	r5,1665
    24a8:	0009883a 	mov	r4,zero
    24ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    24b0:	01488004 	movi	r5,8704
    24b4:	0009883a 	mov	r4,zero
    24b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    24bc:	000b883a 	mov	r5,zero
    24c0:	0009883a 	mov	r4,zero
    24c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    24c8:	01401ec4 	movi	r5,123
    24cc:	0009883a 	mov	r4,zero
    24d0:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    24d4:	01416004 	movi	r5,1408
    24d8:	0009883a 	mov	r4,zero
    24dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    24e0:	01400204 	movi	r5,8
    24e4:	0009883a 	mov	r4,zero
    24e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    24ec:	0140a404 	movi	r5,656
    24f0:	0009883a 	mov	r4,zero
    24f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    24f8:	01401044 	movi	r5,65
    24fc:	0009883a 	mov	r4,zero
    2500:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2504:	014004c4 	movi	r5,19
    2508:	0009883a 	mov	r4,zero
    250c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2510:	01414804 	movi	r5,1312
    2514:	0009883a 	mov	r4,zero
    2518:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    251c:	01416204 	movi	r5,1416
    2520:	0009883a 	mov	r4,zero
    2524:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2528:	01400204 	movi	r5,8
    252c:	0009883a 	mov	r4,zero
    2530:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2534:	0140a404 	movi	r5,656
    2538:	0009883a 	mov	r4,zero
    253c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2540:	01400044 	movi	r5,1
    2544:	0009883a 	mov	r4,zero
    2548:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    254c:	014004c4 	movi	r5,19
    2550:	0009883a 	mov	r4,zero
    2554:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2558:	01414b04 	movi	r5,1324
    255c:	0009883a 	mov	r4,zero
    2560:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2564:	01416404 	movi	r5,1424
    2568:	0009883a 	mov	r4,zero
    256c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2570:	01400204 	movi	r5,8
    2574:	0009883a 	mov	r4,zero
    2578:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    257c:	0140a404 	movi	r5,656
    2580:	0009883a 	mov	r4,zero
    2584:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2588:	01401044 	movi	r5,65
    258c:	0009883a 	mov	r4,zero
    2590:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2594:	014004c4 	movi	r5,19
    2598:	0009883a 	mov	r4,zero
    259c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    25a0:	01414e04 	movi	r5,1336
    25a4:	0009883a 	mov	r4,zero
    25a8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    25ac:	01416604 	movi	r5,1432
    25b0:	0009883a 	mov	r4,zero
    25b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    25b8:	01400204 	movi	r5,8
    25bc:	0009883a 	mov	r4,zero
    25c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    25c4:	0140a404 	movi	r5,656
    25c8:	0009883a 	mov	r4,zero
    25cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    25d0:	01400044 	movi	r5,1
    25d4:	0009883a 	mov	r4,zero
    25d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    25dc:	014004c4 	movi	r5,19
    25e0:	0009883a 	mov	r4,zero
    25e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    25e8:	01415104 	movi	r5,1348
    25ec:	0009883a 	mov	r4,zero
    25f0:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    25f4:	01416804 	movi	r5,1440
    25f8:	0009883a 	mov	r4,zero
    25fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2600:	01400204 	movi	r5,8
    2604:	0009883a 	mov	r4,zero
    2608:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    260c:	0140a404 	movi	r5,656
    2610:	0009883a 	mov	r4,zero
    2614:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2618:	01401044 	movi	r5,65
    261c:	0009883a 	mov	r4,zero
    2620:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2624:	014004c4 	movi	r5,19
    2628:	0009883a 	mov	r4,zero
    262c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2630:	01415404 	movi	r5,1360
    2634:	0009883a 	mov	r4,zero
    2638:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    263c:	01416a04 	movi	r5,1448
    2640:	0009883a 	mov	r4,zero
    2644:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2648:	01400204 	movi	r5,8
    264c:	0009883a 	mov	r4,zero
    2650:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2654:	0140a404 	movi	r5,656
    2658:	0009883a 	mov	r4,zero
    265c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2660:	01400044 	movi	r5,1
    2664:	0009883a 	mov	r4,zero
    2668:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    266c:	014004c4 	movi	r5,19
    2670:	0009883a 	mov	r4,zero
    2674:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2678:	01415704 	movi	r5,1372
    267c:	0009883a 	mov	r4,zero
    2680:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2684:	01416c04 	movi	r5,1456
    2688:	0009883a 	mov	r4,zero
    268c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2690:	01400204 	movi	r5,8
    2694:	0009883a 	mov	r4,zero
    2698:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    269c:	0140a404 	movi	r5,656
    26a0:	0009883a 	mov	r4,zero
    26a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    26a8:	01401044 	movi	r5,65
    26ac:	0009883a 	mov	r4,zero
    26b0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    26b4:	014004c4 	movi	r5,19
    26b8:	0009883a 	mov	r4,zero
    26bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    26c0:	01415a04 	movi	r5,1384
    26c4:	0009883a 	mov	r4,zero
    26c8:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    26cc:	01416e04 	movi	r5,1464
    26d0:	0009883a 	mov	r4,zero
    26d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    26d8:	014000c4 	movi	r5,3
    26dc:	0009883a 	mov	r4,zero
    26e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    26e4:	0140a404 	movi	r5,656
    26e8:	0009883a 	mov	r4,zero
    26ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    26f0:	01400044 	movi	r5,1
    26f4:	0009883a 	mov	r4,zero
    26f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    26fc:	014004c4 	movi	r5,19
    2700:	0009883a 	mov	r4,zero
    2704:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2708:	01415d04 	movi	r5,1396
    270c:	0009883a 	mov	r4,zero
    2710:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2714:	000b883a 	mov	r5,zero
    2718:	0009883a 	mov	r4,zero
    271c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2720:	000b883a 	mov	r5,zero
    2724:	0009883a 	mov	r4,zero
    2728:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    272c:	01408404 	movi	r5,528
    2730:	0009883a 	mov	r4,zero
    2734:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2738:	01401044 	movi	r5,65
    273c:	0009883a 	mov	r4,zero
    2740:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2744:	014004c4 	movi	r5,19
    2748:	0009883a 	mov	r4,zero
    274c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2750:	000b883a 	mov	r5,zero
    2754:	0009883a 	mov	r4,zero
    2758:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    275c:	01414004 	movi	r5,1280
    2760:	01006c04 	movi	r4,432
    2764:	00017900 	call	1790 <UsbWrite>

}
    2768:	0001883a 	nop
    276c:	e037883a 	mov	sp,fp
    2770:	dfc00117 	ldw	ra,4(sp)
    2774:	df000017 	ldw	fp,0(sp)
    2778:	dec00204 	addi	sp,sp,8
    277c:	f800283a 	ret

00002780 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2780:	defffd04 	addi	sp,sp,-12
    2784:	dfc00215 	stw	ra,8(sp)
    2788:	df000115 	stw	fp,4(sp)
    278c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2790:	01005104 	movi	r4,324
    2794:	00017e80 	call	17e8 <UsbRead>
    2798:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    279c:	000b883a 	mov	r5,zero
    27a0:	01005104 	movi	r4,324
    27a4:	00017900 	call	1790 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    27a8:	00000d06 	br	27e0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    27ac:	e0bfff0b 	ldhu	r2,-4(fp)
    27b0:	10000526 	beq	r2,zero,27c8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    27b4:	e0bfff0b 	ldhu	r2,-4(fp)
    27b8:	100b883a 	mov	r5,r2
    27bc:	01000074 	movhi	r4,1
    27c0:	210b5604 	addi	r4,r4,11608
    27c4:	00031bc0 	call	31bc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    27c8:	01005104 	movi	r4,324
    27cc:	00017e80 	call	17e8 <UsbRead>
    27d0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    27d4:	000b883a 	mov	r5,zero
    27d8:	01005104 	movi	r4,324
    27dc:	00017900 	call	1790 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    27e0:	e0bfff0b 	ldhu	r2,-4(fp)
    27e4:	10840018 	cmpnei	r2,r2,4096
    27e8:	103ff01e 	bne	r2,zero,27ac <__alt_exception_stack_pointer+0xf80027ac>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    27ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
    27f0:	e037883a 	mov	sp,fp
    27f4:	dfc00117 	ldw	ra,4(sp)
    27f8:	df000017 	ldw	fp,0(sp)
    27fc:	dec00204 	addi	sp,sp,8
    2800:	f800283a 	ret

00002804 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2804:	defffd04 	addi	sp,sp,-12
    2808:	dfc00215 	stw	ra,8(sp)
    280c:	df000115 	stw	fp,4(sp)
    2810:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2814:	010000c4 	movi	r4,3
    2818:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    281c:	01005104 	movi	r4,324
    2820:	00017e80 	call	17e8 <UsbRead>
    2824:	10bfffcc 	andi	r2,r2,65535
    2828:	10840018 	cmpnei	r2,r2,4096
    282c:	1000091e 	bne	r2,zero,2854 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2830:	000b883a 	mov	r5,zero
    2834:	01005104 	movi	r4,324
    2838:	00017900 	call	1790 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    283c:	0001883a 	nop
    2840:	010000c4 	movi	r4,3
    2844:	00003b00 	call	3b0 <IO_read>
    2848:	10bfffcc 	andi	r2,r2,65535
    284c:	1080040c 	andi	r2,r2,16
    2850:	103ffb26 	beq	r2,zero,2840 <__alt_exception_stack_pointer+0xf8002840>
		{
		}
	}
	usleep(1000);
    2854:	0100fa04 	movi	r4,1000
    2858:	00101d40 	call	101d4 <usleep>
	IO_write(HPI_ADDR,0x0508);
    285c:	01414204 	movi	r5,1288
    2860:	01000084 	movi	r4,2
    2864:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2868:	0009883a 	mov	r4,zero
    286c:	00003b00 	call	3b0 <IO_read>
    2870:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2874:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2878:	e037883a 	mov	sp,fp
    287c:	dfc00117 	ldw	ra,4(sp)
    2880:	df000017 	ldw	fp,0(sp)
    2884:	dec00204 	addi	sp,sp,8
    2888:	f800283a 	ret

0000288c <UsbPrintMem>:


void UsbPrintMem()
{
    288c:	defffc04 	addi	sp,sp,-16
    2890:	dfc00315 	stw	ra,12(sp)
    2894:	df000215 	stw	fp,8(sp)
    2898:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    289c:	01414004 	movi	r5,1280
    28a0:	01000084 	movi	r4,2
    28a4:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    28a8:	e03ffe15 	stw	zero,-8(fp)
    28ac:	00000e06 	br	28e8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    28b0:	0009883a 	mov	r4,zero
    28b4:	00003b00 	call	3b0 <IO_read>
    28b8:	10bfffcc 	andi	r2,r2,65535
    28bc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    28c0:	e0bffe17 	ldw	r2,-8(fp)
    28c4:	10814004 	addi	r2,r2,1280
    28c8:	e1bfff17 	ldw	r6,-4(fp)
    28cc:	100b883a 	mov	r5,r2
    28d0:	01000074 	movhi	r4,1
    28d4:	210b5e04 	addi	r4,r4,11640
    28d8:	00031bc0 	call	31bc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    28dc:	e0bffe17 	ldw	r2,-8(fp)
    28e0:	10800084 	addi	r2,r2,2
    28e4:	e0bffe15 	stw	r2,-8(fp)
    28e8:	e0bffe17 	ldw	r2,-8(fp)
    28ec:	10803250 	cmplti	r2,r2,201
    28f0:	103fef1e 	bne	r2,zero,28b0 <__alt_exception_stack_pointer+0xf80028b0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    28f4:	0001883a 	nop
    28f8:	e037883a 	mov	sp,fp
    28fc:	dfc00117 	ldw	ra,4(sp)
    2900:	df000017 	ldw	fp,0(sp)
    2904:	dec00204 	addi	sp,sp,8
    2908:	f800283a 	ret

0000290c <clock>:
    290c:	00800074 	movhi	r2,1
    2910:	10930404 	addi	r2,r2,19472
    2914:	11000017 	ldw	r4,0(r2)
    2918:	defffb04 	addi	sp,sp,-20
    291c:	d80b883a 	mov	r5,sp
    2920:	dfc00415 	stw	ra,16(sp)
    2924:	00033b80 	call	33b8 <_times_r>
    2928:	00ffffc4 	movi	r3,-1
    292c:	10c00726 	beq	r2,r3,294c <clock+0x40>
    2930:	d8c00017 	ldw	r3,0(sp)
    2934:	d8800117 	ldw	r2,4(sp)
    2938:	1885883a 	add	r2,r3,r2
    293c:	d8c00217 	ldw	r3,8(sp)
    2940:	10c7883a 	add	r3,r2,r3
    2944:	d8800317 	ldw	r2,12(sp)
    2948:	1885883a 	add	r2,r3,r2
    294c:	dfc00417 	ldw	ra,16(sp)
    2950:	dec00504 	addi	sp,sp,20
    2954:	f800283a 	ret

00002958 <malloc>:
    2958:	00800074 	movhi	r2,1
    295c:	10930404 	addi	r2,r2,19472
    2960:	200b883a 	mov	r5,r4
    2964:	11000017 	ldw	r4,0(r2)
    2968:	00029801 	jmpi	2980 <_malloc_r>

0000296c <free>:
    296c:	00800074 	movhi	r2,1
    2970:	10930404 	addi	r2,r2,19472
    2974:	200b883a 	mov	r5,r4
    2978:	11000017 	ldw	r4,0(r2)
    297c:	00078f41 	jmpi	78f4 <_free_r>

00002980 <_malloc_r>:
    2980:	defff504 	addi	sp,sp,-44
    2984:	dc800315 	stw	r18,12(sp)
    2988:	dfc00a15 	stw	ra,40(sp)
    298c:	df000915 	stw	fp,36(sp)
    2990:	ddc00815 	stw	r23,32(sp)
    2994:	dd800715 	stw	r22,28(sp)
    2998:	dd400615 	stw	r21,24(sp)
    299c:	dd000515 	stw	r20,20(sp)
    29a0:	dcc00415 	stw	r19,16(sp)
    29a4:	dc400215 	stw	r17,8(sp)
    29a8:	dc000115 	stw	r16,4(sp)
    29ac:	288002c4 	addi	r2,r5,11
    29b0:	00c00584 	movi	r3,22
    29b4:	2025883a 	mov	r18,r4
    29b8:	18807f2e 	bgeu	r3,r2,2bb8 <_malloc_r+0x238>
    29bc:	047ffe04 	movi	r17,-8
    29c0:	1462703a 	and	r17,r2,r17
    29c4:	8800a316 	blt	r17,zero,2c54 <_malloc_r+0x2d4>
    29c8:	8940a236 	bltu	r17,r5,2c54 <_malloc_r+0x2d4>
    29cc:	000fe640 	call	fe64 <__malloc_lock>
    29d0:	00807dc4 	movi	r2,503
    29d4:	1441e92e 	bgeu	r2,r17,317c <_malloc_r+0x7fc>
    29d8:	8804d27a 	srli	r2,r17,9
    29dc:	1000a126 	beq	r2,zero,2c64 <_malloc_r+0x2e4>
    29e0:	00c00104 	movi	r3,4
    29e4:	18811e36 	bltu	r3,r2,2e60 <_malloc_r+0x4e0>
    29e8:	8804d1ba 	srli	r2,r17,6
    29ec:	12000e44 	addi	r8,r2,57
    29f0:	11c00e04 	addi	r7,r2,56
    29f4:	4209883a 	add	r4,r8,r8
    29f8:	04c00074 	movhi	r19,1
    29fc:	2109883a 	add	r4,r4,r4
    2a00:	9ccd3a04 	addi	r19,r19,13544
    2a04:	2109883a 	add	r4,r4,r4
    2a08:	9909883a 	add	r4,r19,r4
    2a0c:	24000117 	ldw	r16,4(r4)
    2a10:	213ffe04 	addi	r4,r4,-8
    2a14:	24009726 	beq	r4,r16,2c74 <_malloc_r+0x2f4>
    2a18:	80800117 	ldw	r2,4(r16)
    2a1c:	01bfff04 	movi	r6,-4
    2a20:	014003c4 	movi	r5,15
    2a24:	1184703a 	and	r2,r2,r6
    2a28:	1447c83a 	sub	r3,r2,r17
    2a2c:	28c00716 	blt	r5,r3,2a4c <_malloc_r+0xcc>
    2a30:	1800920e 	bge	r3,zero,2c7c <_malloc_r+0x2fc>
    2a34:	84000317 	ldw	r16,12(r16)
    2a38:	24008e26 	beq	r4,r16,2c74 <_malloc_r+0x2f4>
    2a3c:	80800117 	ldw	r2,4(r16)
    2a40:	1184703a 	and	r2,r2,r6
    2a44:	1447c83a 	sub	r3,r2,r17
    2a48:	28fff90e 	bge	r5,r3,2a30 <__alt_exception_stack_pointer+0xf8002a30>
    2a4c:	3809883a 	mov	r4,r7
    2a50:	01800074 	movhi	r6,1
    2a54:	9c000417 	ldw	r16,16(r19)
    2a58:	318d3a04 	addi	r6,r6,13544
    2a5c:	32000204 	addi	r8,r6,8
    2a60:	82013426 	beq	r16,r8,2f34 <_malloc_r+0x5b4>
    2a64:	80c00117 	ldw	r3,4(r16)
    2a68:	00bfff04 	movi	r2,-4
    2a6c:	188e703a 	and	r7,r3,r2
    2a70:	3c45c83a 	sub	r2,r7,r17
    2a74:	00c003c4 	movi	r3,15
    2a78:	18811f16 	blt	r3,r2,2ef8 <_malloc_r+0x578>
    2a7c:	32000515 	stw	r8,20(r6)
    2a80:	32000415 	stw	r8,16(r6)
    2a84:	10007f0e 	bge	r2,zero,2c84 <_malloc_r+0x304>
    2a88:	00807fc4 	movi	r2,511
    2a8c:	11c0fd36 	bltu	r2,r7,2e84 <_malloc_r+0x504>
    2a90:	3806d0fa 	srli	r3,r7,3
    2a94:	01c00044 	movi	r7,1
    2a98:	30800117 	ldw	r2,4(r6)
    2a9c:	19400044 	addi	r5,r3,1
    2aa0:	294b883a 	add	r5,r5,r5
    2aa4:	1807d0ba 	srai	r3,r3,2
    2aa8:	294b883a 	add	r5,r5,r5
    2aac:	294b883a 	add	r5,r5,r5
    2ab0:	298b883a 	add	r5,r5,r6
    2ab4:	38c6983a 	sll	r3,r7,r3
    2ab8:	29c00017 	ldw	r7,0(r5)
    2abc:	2a7ffe04 	addi	r9,r5,-8
    2ac0:	1886b03a 	or	r3,r3,r2
    2ac4:	82400315 	stw	r9,12(r16)
    2ac8:	81c00215 	stw	r7,8(r16)
    2acc:	30c00115 	stw	r3,4(r6)
    2ad0:	2c000015 	stw	r16,0(r5)
    2ad4:	3c000315 	stw	r16,12(r7)
    2ad8:	2005d0ba 	srai	r2,r4,2
    2adc:	01400044 	movi	r5,1
    2ae0:	288a983a 	sll	r5,r5,r2
    2ae4:	19406f36 	bltu	r3,r5,2ca4 <_malloc_r+0x324>
    2ae8:	28c4703a 	and	r2,r5,r3
    2aec:	10000a1e 	bne	r2,zero,2b18 <_malloc_r+0x198>
    2af0:	00bfff04 	movi	r2,-4
    2af4:	294b883a 	add	r5,r5,r5
    2af8:	2088703a 	and	r4,r4,r2
    2afc:	28c4703a 	and	r2,r5,r3
    2b00:	21000104 	addi	r4,r4,4
    2b04:	1000041e 	bne	r2,zero,2b18 <_malloc_r+0x198>
    2b08:	294b883a 	add	r5,r5,r5
    2b0c:	28c4703a 	and	r2,r5,r3
    2b10:	21000104 	addi	r4,r4,4
    2b14:	103ffc26 	beq	r2,zero,2b08 <__alt_exception_stack_pointer+0xf8002b08>
    2b18:	02bfff04 	movi	r10,-4
    2b1c:	024003c4 	movi	r9,15
    2b20:	21800044 	addi	r6,r4,1
    2b24:	318d883a 	add	r6,r6,r6
    2b28:	318d883a 	add	r6,r6,r6
    2b2c:	318d883a 	add	r6,r6,r6
    2b30:	998d883a 	add	r6,r19,r6
    2b34:	333ffe04 	addi	r12,r6,-8
    2b38:	2017883a 	mov	r11,r4
    2b3c:	31800104 	addi	r6,r6,4
    2b40:	34000017 	ldw	r16,0(r6)
    2b44:	31fffd04 	addi	r7,r6,-12
    2b48:	81c0041e 	bne	r16,r7,2b5c <_malloc_r+0x1dc>
    2b4c:	0000fb06 	br	2f3c <_malloc_r+0x5bc>
    2b50:	1801030e 	bge	r3,zero,2f60 <_malloc_r+0x5e0>
    2b54:	84000317 	ldw	r16,12(r16)
    2b58:	81c0f826 	beq	r16,r7,2f3c <_malloc_r+0x5bc>
    2b5c:	80800117 	ldw	r2,4(r16)
    2b60:	1284703a 	and	r2,r2,r10
    2b64:	1447c83a 	sub	r3,r2,r17
    2b68:	48fff90e 	bge	r9,r3,2b50 <__alt_exception_stack_pointer+0xf8002b50>
    2b6c:	80800317 	ldw	r2,12(r16)
    2b70:	81000217 	ldw	r4,8(r16)
    2b74:	89400054 	ori	r5,r17,1
    2b78:	81400115 	stw	r5,4(r16)
    2b7c:	20800315 	stw	r2,12(r4)
    2b80:	11000215 	stw	r4,8(r2)
    2b84:	8463883a 	add	r17,r16,r17
    2b88:	9c400515 	stw	r17,20(r19)
    2b8c:	9c400415 	stw	r17,16(r19)
    2b90:	18800054 	ori	r2,r3,1
    2b94:	88800115 	stw	r2,4(r17)
    2b98:	8a000315 	stw	r8,12(r17)
    2b9c:	8a000215 	stw	r8,8(r17)
    2ba0:	88e3883a 	add	r17,r17,r3
    2ba4:	88c00015 	stw	r3,0(r17)
    2ba8:	9009883a 	mov	r4,r18
    2bac:	000fe880 	call	fe88 <__malloc_unlock>
    2bb0:	80800204 	addi	r2,r16,8
    2bb4:	00001b06 	br	2c24 <_malloc_r+0x2a4>
    2bb8:	04400404 	movi	r17,16
    2bbc:	89402536 	bltu	r17,r5,2c54 <_malloc_r+0x2d4>
    2bc0:	000fe640 	call	fe64 <__malloc_lock>
    2bc4:	00800184 	movi	r2,6
    2bc8:	01000084 	movi	r4,2
    2bcc:	04c00074 	movhi	r19,1
    2bd0:	1085883a 	add	r2,r2,r2
    2bd4:	9ccd3a04 	addi	r19,r19,13544
    2bd8:	1085883a 	add	r2,r2,r2
    2bdc:	9885883a 	add	r2,r19,r2
    2be0:	14000117 	ldw	r16,4(r2)
    2be4:	10fffe04 	addi	r3,r2,-8
    2be8:	80c0d926 	beq	r16,r3,2f50 <_malloc_r+0x5d0>
    2bec:	80c00117 	ldw	r3,4(r16)
    2bf0:	81000317 	ldw	r4,12(r16)
    2bf4:	00bfff04 	movi	r2,-4
    2bf8:	1884703a 	and	r2,r3,r2
    2bfc:	81400217 	ldw	r5,8(r16)
    2c00:	8085883a 	add	r2,r16,r2
    2c04:	10c00117 	ldw	r3,4(r2)
    2c08:	29000315 	stw	r4,12(r5)
    2c0c:	21400215 	stw	r5,8(r4)
    2c10:	18c00054 	ori	r3,r3,1
    2c14:	10c00115 	stw	r3,4(r2)
    2c18:	9009883a 	mov	r4,r18
    2c1c:	000fe880 	call	fe88 <__malloc_unlock>
    2c20:	80800204 	addi	r2,r16,8
    2c24:	dfc00a17 	ldw	ra,40(sp)
    2c28:	df000917 	ldw	fp,36(sp)
    2c2c:	ddc00817 	ldw	r23,32(sp)
    2c30:	dd800717 	ldw	r22,28(sp)
    2c34:	dd400617 	ldw	r21,24(sp)
    2c38:	dd000517 	ldw	r20,20(sp)
    2c3c:	dcc00417 	ldw	r19,16(sp)
    2c40:	dc800317 	ldw	r18,12(sp)
    2c44:	dc400217 	ldw	r17,8(sp)
    2c48:	dc000117 	ldw	r16,4(sp)
    2c4c:	dec00b04 	addi	sp,sp,44
    2c50:	f800283a 	ret
    2c54:	00800304 	movi	r2,12
    2c58:	90800015 	stw	r2,0(r18)
    2c5c:	0005883a 	mov	r2,zero
    2c60:	003ff006 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2c64:	01002004 	movi	r4,128
    2c68:	02001004 	movi	r8,64
    2c6c:	01c00fc4 	movi	r7,63
    2c70:	003f6106 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    2c74:	4009883a 	mov	r4,r8
    2c78:	003f7506 	br	2a50 <__alt_exception_stack_pointer+0xf8002a50>
    2c7c:	81000317 	ldw	r4,12(r16)
    2c80:	003fde06 	br	2bfc <__alt_exception_stack_pointer+0xf8002bfc>
    2c84:	81c5883a 	add	r2,r16,r7
    2c88:	11400117 	ldw	r5,4(r2)
    2c8c:	9009883a 	mov	r4,r18
    2c90:	29400054 	ori	r5,r5,1
    2c94:	11400115 	stw	r5,4(r2)
    2c98:	000fe880 	call	fe88 <__malloc_unlock>
    2c9c:	80800204 	addi	r2,r16,8
    2ca0:	003fe006 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2ca4:	9c000217 	ldw	r16,8(r19)
    2ca8:	00bfff04 	movi	r2,-4
    2cac:	85800117 	ldw	r22,4(r16)
    2cb0:	b0ac703a 	and	r22,r22,r2
    2cb4:	b4400336 	bltu	r22,r17,2cc4 <_malloc_r+0x344>
    2cb8:	b445c83a 	sub	r2,r22,r17
    2cbc:	00c003c4 	movi	r3,15
    2cc0:	18805d16 	blt	r3,r2,2e38 <_malloc_r+0x4b8>
    2cc4:	05c00074 	movhi	r23,1
    2cc8:	00800074 	movhi	r2,1
    2ccc:	1099fb04 	addi	r2,r2,26604
    2cd0:	bdd30504 	addi	r23,r23,19476
    2cd4:	15400017 	ldw	r21,0(r2)
    2cd8:	b8c00017 	ldw	r3,0(r23)
    2cdc:	00bfffc4 	movi	r2,-1
    2ce0:	858d883a 	add	r6,r16,r22
    2ce4:	8d6b883a 	add	r21,r17,r21
    2ce8:	1880ea26 	beq	r3,r2,3094 <_malloc_r+0x714>
    2cec:	ad4403c4 	addi	r21,r21,4111
    2cf0:	00bc0004 	movi	r2,-4096
    2cf4:	a8aa703a 	and	r21,r21,r2
    2cf8:	a80b883a 	mov	r5,r21
    2cfc:	9009883a 	mov	r4,r18
    2d00:	d9800015 	stw	r6,0(sp)
    2d04:	00032cc0 	call	32cc <_sbrk_r>
    2d08:	1029883a 	mov	r20,r2
    2d0c:	00bfffc4 	movi	r2,-1
    2d10:	d9800017 	ldw	r6,0(sp)
    2d14:	a080e826 	beq	r20,r2,30b8 <_malloc_r+0x738>
    2d18:	a180a636 	bltu	r20,r6,2fb4 <_malloc_r+0x634>
    2d1c:	07000074 	movhi	fp,1
    2d20:	e71a0704 	addi	fp,fp,26652
    2d24:	e0800017 	ldw	r2,0(fp)
    2d28:	a887883a 	add	r3,r21,r2
    2d2c:	e0c00015 	stw	r3,0(fp)
    2d30:	3500e626 	beq	r6,r20,30cc <_malloc_r+0x74c>
    2d34:	b9000017 	ldw	r4,0(r23)
    2d38:	00bfffc4 	movi	r2,-1
    2d3c:	2080ee26 	beq	r4,r2,30f8 <_malloc_r+0x778>
    2d40:	a185c83a 	sub	r2,r20,r6
    2d44:	10c5883a 	add	r2,r2,r3
    2d48:	e0800015 	stw	r2,0(fp)
    2d4c:	a0c001cc 	andi	r3,r20,7
    2d50:	1800bc26 	beq	r3,zero,3044 <_malloc_r+0x6c4>
    2d54:	a0e9c83a 	sub	r20,r20,r3
    2d58:	00840204 	movi	r2,4104
    2d5c:	a5000204 	addi	r20,r20,8
    2d60:	10c7c83a 	sub	r3,r2,r3
    2d64:	a545883a 	add	r2,r20,r21
    2d68:	1083ffcc 	andi	r2,r2,4095
    2d6c:	18abc83a 	sub	r21,r3,r2
    2d70:	a80b883a 	mov	r5,r21
    2d74:	9009883a 	mov	r4,r18
    2d78:	00032cc0 	call	32cc <_sbrk_r>
    2d7c:	00ffffc4 	movi	r3,-1
    2d80:	10c0e126 	beq	r2,r3,3108 <_malloc_r+0x788>
    2d84:	1505c83a 	sub	r2,r2,r20
    2d88:	1545883a 	add	r2,r2,r21
    2d8c:	10800054 	ori	r2,r2,1
    2d90:	e0c00017 	ldw	r3,0(fp)
    2d94:	9d000215 	stw	r20,8(r19)
    2d98:	a0800115 	stw	r2,4(r20)
    2d9c:	a8c7883a 	add	r3,r21,r3
    2da0:	e0c00015 	stw	r3,0(fp)
    2da4:	84c00e26 	beq	r16,r19,2de0 <_malloc_r+0x460>
    2da8:	018003c4 	movi	r6,15
    2dac:	3580a72e 	bgeu	r6,r22,304c <_malloc_r+0x6cc>
    2db0:	81400117 	ldw	r5,4(r16)
    2db4:	013ffe04 	movi	r4,-8
    2db8:	b0bffd04 	addi	r2,r22,-12
    2dbc:	1104703a 	and	r2,r2,r4
    2dc0:	2900004c 	andi	r4,r5,1
    2dc4:	2088b03a 	or	r4,r4,r2
    2dc8:	81000115 	stw	r4,4(r16)
    2dcc:	01400144 	movi	r5,5
    2dd0:	8089883a 	add	r4,r16,r2
    2dd4:	21400115 	stw	r5,4(r4)
    2dd8:	21400215 	stw	r5,8(r4)
    2ddc:	3080cd36 	bltu	r6,r2,3114 <_malloc_r+0x794>
    2de0:	00800074 	movhi	r2,1
    2de4:	1099fa04 	addi	r2,r2,26600
    2de8:	11000017 	ldw	r4,0(r2)
    2dec:	20c0012e 	bgeu	r4,r3,2df4 <_malloc_r+0x474>
    2df0:	10c00015 	stw	r3,0(r2)
    2df4:	00800074 	movhi	r2,1
    2df8:	1099f904 	addi	r2,r2,26596
    2dfc:	11000017 	ldw	r4,0(r2)
    2e00:	9c000217 	ldw	r16,8(r19)
    2e04:	20c0012e 	bgeu	r4,r3,2e0c <_malloc_r+0x48c>
    2e08:	10c00015 	stw	r3,0(r2)
    2e0c:	80c00117 	ldw	r3,4(r16)
    2e10:	00bfff04 	movi	r2,-4
    2e14:	1886703a 	and	r3,r3,r2
    2e18:	1c45c83a 	sub	r2,r3,r17
    2e1c:	1c400236 	bltu	r3,r17,2e28 <_malloc_r+0x4a8>
    2e20:	00c003c4 	movi	r3,15
    2e24:	18800416 	blt	r3,r2,2e38 <_malloc_r+0x4b8>
    2e28:	9009883a 	mov	r4,r18
    2e2c:	000fe880 	call	fe88 <__malloc_unlock>
    2e30:	0005883a 	mov	r2,zero
    2e34:	003f7b06 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2e38:	88c00054 	ori	r3,r17,1
    2e3c:	80c00115 	stw	r3,4(r16)
    2e40:	8463883a 	add	r17,r16,r17
    2e44:	10800054 	ori	r2,r2,1
    2e48:	9c400215 	stw	r17,8(r19)
    2e4c:	88800115 	stw	r2,4(r17)
    2e50:	9009883a 	mov	r4,r18
    2e54:	000fe880 	call	fe88 <__malloc_unlock>
    2e58:	80800204 	addi	r2,r16,8
    2e5c:	003f7106 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2e60:	00c00504 	movi	r3,20
    2e64:	18804a2e 	bgeu	r3,r2,2f90 <_malloc_r+0x610>
    2e68:	00c01504 	movi	r3,84
    2e6c:	18806e36 	bltu	r3,r2,3028 <_malloc_r+0x6a8>
    2e70:	8804d33a 	srli	r2,r17,12
    2e74:	12001bc4 	addi	r8,r2,111
    2e78:	11c01b84 	addi	r7,r2,110
    2e7c:	4209883a 	add	r4,r8,r8
    2e80:	003edd06 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    2e84:	3804d27a 	srli	r2,r7,9
    2e88:	00c00104 	movi	r3,4
    2e8c:	1880442e 	bgeu	r3,r2,2fa0 <_malloc_r+0x620>
    2e90:	00c00504 	movi	r3,20
    2e94:	18808136 	bltu	r3,r2,309c <_malloc_r+0x71c>
    2e98:	11401704 	addi	r5,r2,92
    2e9c:	10c016c4 	addi	r3,r2,91
    2ea0:	294b883a 	add	r5,r5,r5
    2ea4:	294b883a 	add	r5,r5,r5
    2ea8:	294b883a 	add	r5,r5,r5
    2eac:	994b883a 	add	r5,r19,r5
    2eb0:	28800017 	ldw	r2,0(r5)
    2eb4:	01800074 	movhi	r6,1
    2eb8:	297ffe04 	addi	r5,r5,-8
    2ebc:	318d3a04 	addi	r6,r6,13544
    2ec0:	28806526 	beq	r5,r2,3058 <_malloc_r+0x6d8>
    2ec4:	01bfff04 	movi	r6,-4
    2ec8:	10c00117 	ldw	r3,4(r2)
    2ecc:	1986703a 	and	r3,r3,r6
    2ed0:	38c0022e 	bgeu	r7,r3,2edc <_malloc_r+0x55c>
    2ed4:	10800217 	ldw	r2,8(r2)
    2ed8:	28bffb1e 	bne	r5,r2,2ec8 <__alt_exception_stack_pointer+0xf8002ec8>
    2edc:	11400317 	ldw	r5,12(r2)
    2ee0:	98c00117 	ldw	r3,4(r19)
    2ee4:	81400315 	stw	r5,12(r16)
    2ee8:	80800215 	stw	r2,8(r16)
    2eec:	2c000215 	stw	r16,8(r5)
    2ef0:	14000315 	stw	r16,12(r2)
    2ef4:	003ef806 	br	2ad8 <__alt_exception_stack_pointer+0xf8002ad8>
    2ef8:	88c00054 	ori	r3,r17,1
    2efc:	80c00115 	stw	r3,4(r16)
    2f00:	8463883a 	add	r17,r16,r17
    2f04:	34400515 	stw	r17,20(r6)
    2f08:	34400415 	stw	r17,16(r6)
    2f0c:	10c00054 	ori	r3,r2,1
    2f10:	8a000315 	stw	r8,12(r17)
    2f14:	8a000215 	stw	r8,8(r17)
    2f18:	88c00115 	stw	r3,4(r17)
    2f1c:	88a3883a 	add	r17,r17,r2
    2f20:	88800015 	stw	r2,0(r17)
    2f24:	9009883a 	mov	r4,r18
    2f28:	000fe880 	call	fe88 <__malloc_unlock>
    2f2c:	80800204 	addi	r2,r16,8
    2f30:	003f3c06 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2f34:	30c00117 	ldw	r3,4(r6)
    2f38:	003ee706 	br	2ad8 <__alt_exception_stack_pointer+0xf8002ad8>
    2f3c:	5ac00044 	addi	r11,r11,1
    2f40:	588000cc 	andi	r2,r11,3
    2f44:	31800204 	addi	r6,r6,8
    2f48:	103efd1e 	bne	r2,zero,2b40 <__alt_exception_stack_pointer+0xf8002b40>
    2f4c:	00002406 	br	2fe0 <_malloc_r+0x660>
    2f50:	14000317 	ldw	r16,12(r2)
    2f54:	143f251e 	bne	r2,r16,2bec <__alt_exception_stack_pointer+0xf8002bec>
    2f58:	21000084 	addi	r4,r4,2
    2f5c:	003ebc06 	br	2a50 <__alt_exception_stack_pointer+0xf8002a50>
    2f60:	8085883a 	add	r2,r16,r2
    2f64:	10c00117 	ldw	r3,4(r2)
    2f68:	81000317 	ldw	r4,12(r16)
    2f6c:	81400217 	ldw	r5,8(r16)
    2f70:	18c00054 	ori	r3,r3,1
    2f74:	10c00115 	stw	r3,4(r2)
    2f78:	29000315 	stw	r4,12(r5)
    2f7c:	21400215 	stw	r5,8(r4)
    2f80:	9009883a 	mov	r4,r18
    2f84:	000fe880 	call	fe88 <__malloc_unlock>
    2f88:	80800204 	addi	r2,r16,8
    2f8c:	003f2506 	br	2c24 <__alt_exception_stack_pointer+0xf8002c24>
    2f90:	12001704 	addi	r8,r2,92
    2f94:	11c016c4 	addi	r7,r2,91
    2f98:	4209883a 	add	r4,r8,r8
    2f9c:	003e9606 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    2fa0:	3804d1ba 	srli	r2,r7,6
    2fa4:	11400e44 	addi	r5,r2,57
    2fa8:	10c00e04 	addi	r3,r2,56
    2fac:	294b883a 	add	r5,r5,r5
    2fb0:	003fbc06 	br	2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    2fb4:	84ff5926 	beq	r16,r19,2d1c <__alt_exception_stack_pointer+0xf8002d1c>
    2fb8:	00800074 	movhi	r2,1
    2fbc:	108d3a04 	addi	r2,r2,13544
    2fc0:	14000217 	ldw	r16,8(r2)
    2fc4:	00bfff04 	movi	r2,-4
    2fc8:	80c00117 	ldw	r3,4(r16)
    2fcc:	1886703a 	and	r3,r3,r2
    2fd0:	003f9106 	br	2e18 <__alt_exception_stack_pointer+0xf8002e18>
    2fd4:	60800217 	ldw	r2,8(r12)
    2fd8:	213fffc4 	addi	r4,r4,-1
    2fdc:	1300651e 	bne	r2,r12,3174 <_malloc_r+0x7f4>
    2fe0:	208000cc 	andi	r2,r4,3
    2fe4:	633ffe04 	addi	r12,r12,-8
    2fe8:	103ffa1e 	bne	r2,zero,2fd4 <__alt_exception_stack_pointer+0xf8002fd4>
    2fec:	98800117 	ldw	r2,4(r19)
    2ff0:	0146303a 	nor	r3,zero,r5
    2ff4:	1884703a 	and	r2,r3,r2
    2ff8:	98800115 	stw	r2,4(r19)
    2ffc:	294b883a 	add	r5,r5,r5
    3000:	117f2836 	bltu	r2,r5,2ca4 <__alt_exception_stack_pointer+0xf8002ca4>
    3004:	283f2726 	beq	r5,zero,2ca4 <__alt_exception_stack_pointer+0xf8002ca4>
    3008:	2886703a 	and	r3,r5,r2
    300c:	5809883a 	mov	r4,r11
    3010:	183ec31e 	bne	r3,zero,2b20 <__alt_exception_stack_pointer+0xf8002b20>
    3014:	294b883a 	add	r5,r5,r5
    3018:	2886703a 	and	r3,r5,r2
    301c:	21000104 	addi	r4,r4,4
    3020:	183ffc26 	beq	r3,zero,3014 <__alt_exception_stack_pointer+0xf8003014>
    3024:	003ebe06 	br	2b20 <__alt_exception_stack_pointer+0xf8002b20>
    3028:	00c05504 	movi	r3,340
    302c:	18801236 	bltu	r3,r2,3078 <_malloc_r+0x6f8>
    3030:	8804d3fa 	srli	r2,r17,15
    3034:	12001e04 	addi	r8,r2,120
    3038:	11c01dc4 	addi	r7,r2,119
    303c:	4209883a 	add	r4,r8,r8
    3040:	003e6d06 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    3044:	00c40004 	movi	r3,4096
    3048:	003f4606 	br	2d64 <__alt_exception_stack_pointer+0xf8002d64>
    304c:	00800044 	movi	r2,1
    3050:	a0800115 	stw	r2,4(r20)
    3054:	003f7406 	br	2e28 <__alt_exception_stack_pointer+0xf8002e28>
    3058:	1805d0ba 	srai	r2,r3,2
    305c:	01c00044 	movi	r7,1
    3060:	30c00117 	ldw	r3,4(r6)
    3064:	388e983a 	sll	r7,r7,r2
    3068:	2805883a 	mov	r2,r5
    306c:	38c6b03a 	or	r3,r7,r3
    3070:	30c00115 	stw	r3,4(r6)
    3074:	003f9b06 	br	2ee4 <__alt_exception_stack_pointer+0xf8002ee4>
    3078:	00c15504 	movi	r3,1364
    307c:	18801a36 	bltu	r3,r2,30e8 <_malloc_r+0x768>
    3080:	8804d4ba 	srli	r2,r17,18
    3084:	12001f44 	addi	r8,r2,125
    3088:	11c01f04 	addi	r7,r2,124
    308c:	4209883a 	add	r4,r8,r8
    3090:	003e5906 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    3094:	ad400404 	addi	r21,r21,16
    3098:	003f1706 	br	2cf8 <__alt_exception_stack_pointer+0xf8002cf8>
    309c:	00c01504 	movi	r3,84
    30a0:	18802336 	bltu	r3,r2,3130 <_malloc_r+0x7b0>
    30a4:	3804d33a 	srli	r2,r7,12
    30a8:	11401bc4 	addi	r5,r2,111
    30ac:	10c01b84 	addi	r3,r2,110
    30b0:	294b883a 	add	r5,r5,r5
    30b4:	003f7b06 	br	2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    30b8:	9c000217 	ldw	r16,8(r19)
    30bc:	00bfff04 	movi	r2,-4
    30c0:	80c00117 	ldw	r3,4(r16)
    30c4:	1886703a 	and	r3,r3,r2
    30c8:	003f5306 	br	2e18 <__alt_exception_stack_pointer+0xf8002e18>
    30cc:	3083ffcc 	andi	r2,r6,4095
    30d0:	103f181e 	bne	r2,zero,2d34 <__alt_exception_stack_pointer+0xf8002d34>
    30d4:	99000217 	ldw	r4,8(r19)
    30d8:	b545883a 	add	r2,r22,r21
    30dc:	10800054 	ori	r2,r2,1
    30e0:	20800115 	stw	r2,4(r4)
    30e4:	003f3e06 	br	2de0 <__alt_exception_stack_pointer+0xf8002de0>
    30e8:	01003f84 	movi	r4,254
    30ec:	02001fc4 	movi	r8,127
    30f0:	01c01f84 	movi	r7,126
    30f4:	003e4006 	br	29f8 <__alt_exception_stack_pointer+0xf80029f8>
    30f8:	00800074 	movhi	r2,1
    30fc:	10930504 	addi	r2,r2,19476
    3100:	15000015 	stw	r20,0(r2)
    3104:	003f1106 	br	2d4c <__alt_exception_stack_pointer+0xf8002d4c>
    3108:	00800044 	movi	r2,1
    310c:	002b883a 	mov	r21,zero
    3110:	003f1f06 	br	2d90 <__alt_exception_stack_pointer+0xf8002d90>
    3114:	81400204 	addi	r5,r16,8
    3118:	9009883a 	mov	r4,r18
    311c:	00078f40 	call	78f4 <_free_r>
    3120:	00800074 	movhi	r2,1
    3124:	109a0704 	addi	r2,r2,26652
    3128:	10c00017 	ldw	r3,0(r2)
    312c:	003f2c06 	br	2de0 <__alt_exception_stack_pointer+0xf8002de0>
    3130:	00c05504 	movi	r3,340
    3134:	18800536 	bltu	r3,r2,314c <_malloc_r+0x7cc>
    3138:	3804d3fa 	srli	r2,r7,15
    313c:	11401e04 	addi	r5,r2,120
    3140:	10c01dc4 	addi	r3,r2,119
    3144:	294b883a 	add	r5,r5,r5
    3148:	003f5606 	br	2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    314c:	00c15504 	movi	r3,1364
    3150:	18800536 	bltu	r3,r2,3168 <_malloc_r+0x7e8>
    3154:	3804d4ba 	srli	r2,r7,18
    3158:	11401f44 	addi	r5,r2,125
    315c:	10c01f04 	addi	r3,r2,124
    3160:	294b883a 	add	r5,r5,r5
    3164:	003f4f06 	br	2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    3168:	01403f84 	movi	r5,254
    316c:	00c01f84 	movi	r3,126
    3170:	003f4c06 	br	2ea4 <__alt_exception_stack_pointer+0xf8002ea4>
    3174:	98800117 	ldw	r2,4(r19)
    3178:	003fa006 	br	2ffc <__alt_exception_stack_pointer+0xf8002ffc>
    317c:	8808d0fa 	srli	r4,r17,3
    3180:	20800044 	addi	r2,r4,1
    3184:	1085883a 	add	r2,r2,r2
    3188:	003e9006 	br	2bcc <__alt_exception_stack_pointer+0xf8002bcc>

0000318c <_printf_r>:
    318c:	defffd04 	addi	sp,sp,-12
    3190:	2805883a 	mov	r2,r5
    3194:	dfc00015 	stw	ra,0(sp)
    3198:	d9800115 	stw	r6,4(sp)
    319c:	d9c00215 	stw	r7,8(sp)
    31a0:	21400217 	ldw	r5,8(r4)
    31a4:	d9c00104 	addi	r7,sp,4
    31a8:	100d883a 	mov	r6,r2
    31ac:	00033c00 	call	33c0 <___vfprintf_internal_r>
    31b0:	dfc00017 	ldw	ra,0(sp)
    31b4:	dec00304 	addi	sp,sp,12
    31b8:	f800283a 	ret

000031bc <printf>:
    31bc:	defffc04 	addi	sp,sp,-16
    31c0:	dfc00015 	stw	ra,0(sp)
    31c4:	d9400115 	stw	r5,4(sp)
    31c8:	d9800215 	stw	r6,8(sp)
    31cc:	d9c00315 	stw	r7,12(sp)
    31d0:	00800074 	movhi	r2,1
    31d4:	10930404 	addi	r2,r2,19472
    31d8:	10800017 	ldw	r2,0(r2)
    31dc:	200b883a 	mov	r5,r4
    31e0:	d9800104 	addi	r6,sp,4
    31e4:	11000217 	ldw	r4,8(r2)
    31e8:	000569c0 	call	569c <__vfprintf_internal>
    31ec:	dfc00017 	ldw	ra,0(sp)
    31f0:	dec00404 	addi	sp,sp,16
    31f4:	f800283a 	ret

000031f8 <_puts_r>:
    31f8:	defff604 	addi	sp,sp,-40
    31fc:	dc000715 	stw	r16,28(sp)
    3200:	2021883a 	mov	r16,r4
    3204:	2809883a 	mov	r4,r5
    3208:	dc400815 	stw	r17,32(sp)
    320c:	dfc00915 	stw	ra,36(sp)
    3210:	2823883a 	mov	r17,r5
    3214:	00033200 	call	3320 <strlen>
    3218:	10c00044 	addi	r3,r2,1
    321c:	d8800115 	stw	r2,4(sp)
    3220:	00800074 	movhi	r2,1
    3224:	108b6404 	addi	r2,r2,11664
    3228:	d8800215 	stw	r2,8(sp)
    322c:	00800044 	movi	r2,1
    3230:	d8800315 	stw	r2,12(sp)
    3234:	00800084 	movi	r2,2
    3238:	dc400015 	stw	r17,0(sp)
    323c:	d8c00615 	stw	r3,24(sp)
    3240:	dec00415 	stw	sp,16(sp)
    3244:	d8800515 	stw	r2,20(sp)
    3248:	80000226 	beq	r16,zero,3254 <_puts_r+0x5c>
    324c:	80800e17 	ldw	r2,56(r16)
    3250:	10001426 	beq	r2,zero,32a4 <_puts_r+0xac>
    3254:	81400217 	ldw	r5,8(r16)
    3258:	2880030b 	ldhu	r2,12(r5)
    325c:	10c8000c 	andi	r3,r2,8192
    3260:	1800061e 	bne	r3,zero,327c <_puts_r+0x84>
    3264:	29001917 	ldw	r4,100(r5)
    3268:	00f7ffc4 	movi	r3,-8193
    326c:	10880014 	ori	r2,r2,8192
    3270:	20c6703a 	and	r3,r4,r3
    3274:	2880030d 	sth	r2,12(r5)
    3278:	28c01915 	stw	r3,100(r5)
    327c:	d9800404 	addi	r6,sp,16
    3280:	8009883a 	mov	r4,r16
    3284:	0007c040 	call	7c04 <__sfvwrite_r>
    3288:	1000091e 	bne	r2,zero,32b0 <_puts_r+0xb8>
    328c:	00800284 	movi	r2,10
    3290:	dfc00917 	ldw	ra,36(sp)
    3294:	dc400817 	ldw	r17,32(sp)
    3298:	dc000717 	ldw	r16,28(sp)
    329c:	dec00a04 	addi	sp,sp,40
    32a0:	f800283a 	ret
    32a4:	8009883a 	mov	r4,r16
    32a8:	00077800 	call	7780 <__sinit>
    32ac:	003fe906 	br	3254 <__alt_exception_stack_pointer+0xf8003254>
    32b0:	00bfffc4 	movi	r2,-1
    32b4:	003ff606 	br	3290 <__alt_exception_stack_pointer+0xf8003290>

000032b8 <puts>:
    32b8:	00800074 	movhi	r2,1
    32bc:	10930404 	addi	r2,r2,19472
    32c0:	200b883a 	mov	r5,r4
    32c4:	11000017 	ldw	r4,0(r2)
    32c8:	00031f81 	jmpi	31f8 <_puts_r>

000032cc <_sbrk_r>:
    32cc:	defffd04 	addi	sp,sp,-12
    32d0:	dc000015 	stw	r16,0(sp)
    32d4:	04000074 	movhi	r16,1
    32d8:	dc400115 	stw	r17,4(sp)
    32dc:	8419fc04 	addi	r16,r16,26608
    32e0:	2023883a 	mov	r17,r4
    32e4:	2809883a 	mov	r4,r5
    32e8:	dfc00215 	stw	ra,8(sp)
    32ec:	80000015 	stw	zero,0(r16)
    32f0:	00100700 	call	10070 <sbrk>
    32f4:	00ffffc4 	movi	r3,-1
    32f8:	10c00526 	beq	r2,r3,3310 <_sbrk_r+0x44>
    32fc:	dfc00217 	ldw	ra,8(sp)
    3300:	dc400117 	ldw	r17,4(sp)
    3304:	dc000017 	ldw	r16,0(sp)
    3308:	dec00304 	addi	sp,sp,12
    330c:	f800283a 	ret
    3310:	80c00017 	ldw	r3,0(r16)
    3314:	183ff926 	beq	r3,zero,32fc <__alt_exception_stack_pointer+0xf80032fc>
    3318:	88c00015 	stw	r3,0(r17)
    331c:	003ff706 	br	32fc <__alt_exception_stack_pointer+0xf80032fc>

00003320 <strlen>:
    3320:	208000cc 	andi	r2,r4,3
    3324:	10002026 	beq	r2,zero,33a8 <strlen+0x88>
    3328:	20800007 	ldb	r2,0(r4)
    332c:	10002026 	beq	r2,zero,33b0 <strlen+0x90>
    3330:	2005883a 	mov	r2,r4
    3334:	00000206 	br	3340 <strlen+0x20>
    3338:	10c00007 	ldb	r3,0(r2)
    333c:	18001826 	beq	r3,zero,33a0 <strlen+0x80>
    3340:	10800044 	addi	r2,r2,1
    3344:	10c000cc 	andi	r3,r2,3
    3348:	183ffb1e 	bne	r3,zero,3338 <__alt_exception_stack_pointer+0xf8003338>
    334c:	10c00017 	ldw	r3,0(r2)
    3350:	01ffbff4 	movhi	r7,65279
    3354:	39ffbfc4 	addi	r7,r7,-257
    3358:	00ca303a 	nor	r5,zero,r3
    335c:	01a02074 	movhi	r6,32897
    3360:	19c7883a 	add	r3,r3,r7
    3364:	31a02004 	addi	r6,r6,-32640
    3368:	1946703a 	and	r3,r3,r5
    336c:	1986703a 	and	r3,r3,r6
    3370:	1800091e 	bne	r3,zero,3398 <strlen+0x78>
    3374:	10800104 	addi	r2,r2,4
    3378:	10c00017 	ldw	r3,0(r2)
    337c:	19cb883a 	add	r5,r3,r7
    3380:	00c6303a 	nor	r3,zero,r3
    3384:	28c6703a 	and	r3,r5,r3
    3388:	1986703a 	and	r3,r3,r6
    338c:	183ff926 	beq	r3,zero,3374 <__alt_exception_stack_pointer+0xf8003374>
    3390:	00000106 	br	3398 <strlen+0x78>
    3394:	10800044 	addi	r2,r2,1
    3398:	10c00007 	ldb	r3,0(r2)
    339c:	183ffd1e 	bne	r3,zero,3394 <__alt_exception_stack_pointer+0xf8003394>
    33a0:	1105c83a 	sub	r2,r2,r4
    33a4:	f800283a 	ret
    33a8:	2005883a 	mov	r2,r4
    33ac:	003fe706 	br	334c <__alt_exception_stack_pointer+0xf800334c>
    33b0:	0005883a 	mov	r2,zero
    33b4:	f800283a 	ret

000033b8 <_times_r>:
    33b8:	2809883a 	mov	r4,r5
    33bc:	001015c1 	jmpi	1015c <times>

000033c0 <___vfprintf_internal_r>:
    33c0:	deffb804 	addi	sp,sp,-288
    33c4:	dfc04715 	stw	ra,284(sp)
    33c8:	ddc04515 	stw	r23,276(sp)
    33cc:	dd404315 	stw	r21,268(sp)
    33d0:	d9002d15 	stw	r4,180(sp)
    33d4:	282f883a 	mov	r23,r5
    33d8:	302b883a 	mov	r21,r6
    33dc:	d9c02e15 	stw	r7,184(sp)
    33e0:	df004615 	stw	fp,280(sp)
    33e4:	dd804415 	stw	r22,272(sp)
    33e8:	dd004215 	stw	r20,264(sp)
    33ec:	dcc04115 	stw	r19,260(sp)
    33f0:	dc804015 	stw	r18,256(sp)
    33f4:	dc403f15 	stw	r17,252(sp)
    33f8:	dc003e15 	stw	r16,248(sp)
    33fc:	00083000 	call	8300 <_localeconv_r>
    3400:	10800017 	ldw	r2,0(r2)
    3404:	1009883a 	mov	r4,r2
    3408:	d8803415 	stw	r2,208(sp)
    340c:	00033200 	call	3320 <strlen>
    3410:	d8803715 	stw	r2,220(sp)
    3414:	d8802d17 	ldw	r2,180(sp)
    3418:	10000226 	beq	r2,zero,3424 <___vfprintf_internal_r+0x64>
    341c:	10800e17 	ldw	r2,56(r2)
    3420:	1000fb26 	beq	r2,zero,3810 <___vfprintf_internal_r+0x450>
    3424:	b880030b 	ldhu	r2,12(r23)
    3428:	10c8000c 	andi	r3,r2,8192
    342c:	1800061e 	bne	r3,zero,3448 <___vfprintf_internal_r+0x88>
    3430:	b9001917 	ldw	r4,100(r23)
    3434:	00f7ffc4 	movi	r3,-8193
    3438:	10880014 	ori	r2,r2,8192
    343c:	20c6703a 	and	r3,r4,r3
    3440:	b880030d 	sth	r2,12(r23)
    3444:	b8c01915 	stw	r3,100(r23)
    3448:	10c0020c 	andi	r3,r2,8
    344c:	1800c326 	beq	r3,zero,375c <___vfprintf_internal_r+0x39c>
    3450:	b8c00417 	ldw	r3,16(r23)
    3454:	1800c126 	beq	r3,zero,375c <___vfprintf_internal_r+0x39c>
    3458:	1080068c 	andi	r2,r2,26
    345c:	00c00284 	movi	r3,10
    3460:	10c0c626 	beq	r2,r3,377c <___vfprintf_internal_r+0x3bc>
    3464:	d8c00404 	addi	r3,sp,16
    3468:	05000074 	movhi	r20,1
    346c:	d9001e04 	addi	r4,sp,120
    3470:	a50b7584 	addi	r20,r20,11734
    3474:	d8c01e15 	stw	r3,120(sp)
    3478:	d8002015 	stw	zero,128(sp)
    347c:	d8001f15 	stw	zero,124(sp)
    3480:	d8003315 	stw	zero,204(sp)
    3484:	d8003615 	stw	zero,216(sp)
    3488:	d8003815 	stw	zero,224(sp)
    348c:	1811883a 	mov	r8,r3
    3490:	d8003915 	stw	zero,228(sp)
    3494:	d8003a15 	stw	zero,232(sp)
    3498:	d8002f15 	stw	zero,188(sp)
    349c:	d9002815 	stw	r4,160(sp)
    34a0:	a8800007 	ldb	r2,0(r21)
    34a4:	10028b26 	beq	r2,zero,3ed4 <___vfprintf_internal_r+0xb14>
    34a8:	00c00944 	movi	r3,37
    34ac:	a823883a 	mov	r17,r21
    34b0:	10c0021e 	bne	r2,r3,34bc <___vfprintf_internal_r+0xfc>
    34b4:	00001406 	br	3508 <___vfprintf_internal_r+0x148>
    34b8:	10c00326 	beq	r2,r3,34c8 <___vfprintf_internal_r+0x108>
    34bc:	8c400044 	addi	r17,r17,1
    34c0:	88800007 	ldb	r2,0(r17)
    34c4:	103ffc1e 	bne	r2,zero,34b8 <__alt_exception_stack_pointer+0xf80034b8>
    34c8:	8d61c83a 	sub	r16,r17,r21
    34cc:	80000e26 	beq	r16,zero,3508 <___vfprintf_internal_r+0x148>
    34d0:	d8c02017 	ldw	r3,128(sp)
    34d4:	d8801f17 	ldw	r2,124(sp)
    34d8:	45400015 	stw	r21,0(r8)
    34dc:	1c07883a 	add	r3,r3,r16
    34e0:	10800044 	addi	r2,r2,1
    34e4:	d8c02015 	stw	r3,128(sp)
    34e8:	44000115 	stw	r16,4(r8)
    34ec:	d8801f15 	stw	r2,124(sp)
    34f0:	00c001c4 	movi	r3,7
    34f4:	1880a916 	blt	r3,r2,379c <___vfprintf_internal_r+0x3dc>
    34f8:	42000204 	addi	r8,r8,8
    34fc:	d9402f17 	ldw	r5,188(sp)
    3500:	2c0b883a 	add	r5,r5,r16
    3504:	d9402f15 	stw	r5,188(sp)
    3508:	88800007 	ldb	r2,0(r17)
    350c:	1000aa26 	beq	r2,zero,37b8 <___vfprintf_internal_r+0x3f8>
    3510:	8d400044 	addi	r21,r17,1
    3514:	8c400047 	ldb	r17,1(r17)
    3518:	0021883a 	mov	r16,zero
    351c:	00bfffc4 	movi	r2,-1
    3520:	0025883a 	mov	r18,zero
    3524:	dc002905 	stb	r16,164(sp)
    3528:	d8002785 	stb	zero,158(sp)
    352c:	d8002b05 	stb	zero,172(sp)
    3530:	d8802a15 	stw	r2,168(sp)
    3534:	d8003115 	stw	zero,196(sp)
    3538:	04c01604 	movi	r19,88
    353c:	05800244 	movi	r22,9
    3540:	9021883a 	mov	r16,r18
    3544:	4039883a 	mov	fp,r8
    3548:	ad400044 	addi	r21,r21,1
    354c:	88bff804 	addi	r2,r17,-32
    3550:	98833236 	bltu	r19,r2,421c <___vfprintf_internal_r+0xe5c>
    3554:	100490ba 	slli	r2,r2,2
    3558:	00c00034 	movhi	r3,0
    355c:	18cd5b04 	addi	r3,r3,13676
    3560:	10c5883a 	add	r2,r2,r3
    3564:	10800017 	ldw	r2,0(r2)
    3568:	1000683a 	jmp	r2
    356c:	00004114 	movui	zero,260
    3570:	0000421c 	xori	zero,zero,264
    3574:	0000421c 	xori	zero,zero,264
    3578:	00004134 	movhi	zero,260
    357c:	0000421c 	xori	zero,zero,264
    3580:	0000421c 	xori	zero,zero,264
    3584:	0000421c 	xori	zero,zero,264
    3588:	0000421c 	xori	zero,zero,264
    358c:	0000421c 	xori	zero,zero,264
    3590:	0000421c 	xori	zero,zero,264
    3594:	0000381c 	xori	zero,zero,224
    3598:	00004024 	muli	zero,zero,256
    359c:	0000421c 	xori	zero,zero,264
    35a0:	000036e0 	cmpeqi	zero,zero,219
    35a4:	00003840 	call	384 <IO_write+0x5c>
    35a8:	0000421c 	xori	zero,zero,264
    35ac:	00003890 	cmplti	zero,zero,226
    35b0:	0000389c 	xori	zero,zero,226
    35b4:	0000389c 	xori	zero,zero,226
    35b8:	0000389c 	xori	zero,zero,226
    35bc:	0000389c 	xori	zero,zero,226
    35c0:	0000389c 	xori	zero,zero,226
    35c4:	0000389c 	xori	zero,zero,226
    35c8:	0000389c 	xori	zero,zero,226
    35cc:	0000389c 	xori	zero,zero,226
    35d0:	0000389c 	xori	zero,zero,226
    35d4:	0000421c 	xori	zero,zero,264
    35d8:	0000421c 	xori	zero,zero,264
    35dc:	0000421c 	xori	zero,zero,264
    35e0:	0000421c 	xori	zero,zero,264
    35e4:	0000421c 	xori	zero,zero,264
    35e8:	0000421c 	xori	zero,zero,264
    35ec:	0000421c 	xori	zero,zero,264
    35f0:	0000421c 	xori	zero,zero,264
    35f4:	0000421c 	xori	zero,zero,264
    35f8:	0000421c 	xori	zero,zero,264
    35fc:	000038d8 	cmpnei	zero,zero,227
    3600:	000039a0 	cmpeqi	zero,zero,230
    3604:	0000421c 	xori	zero,zero,264
    3608:	000039a0 	cmpeqi	zero,zero,230
    360c:	0000421c 	xori	zero,zero,264
    3610:	0000421c 	xori	zero,zero,264
    3614:	0000421c 	xori	zero,zero,264
    3618:	0000421c 	xori	zero,zero,264
    361c:	00003a4c 	andi	zero,zero,233
    3620:	0000421c 	xori	zero,zero,264
    3624:	0000421c 	xori	zero,zero,264
    3628:	00003a58 	cmpnei	zero,zero,233
    362c:	0000421c 	xori	zero,zero,264
    3630:	0000421c 	xori	zero,zero,264
    3634:	0000421c 	xori	zero,zero,264
    3638:	0000421c 	xori	zero,zero,264
    363c:	0000421c 	xori	zero,zero,264
    3640:	00003edc 	xori	zero,zero,251
    3644:	0000421c 	xori	zero,zero,264
    3648:	0000421c 	xori	zero,zero,264
    364c:	00003f48 	cmpgei	zero,zero,253
    3650:	0000421c 	xori	zero,zero,264
    3654:	0000421c 	xori	zero,zero,264
    3658:	0000421c 	xori	zero,zero,264
    365c:	0000421c 	xori	zero,zero,264
    3660:	0000421c 	xori	zero,zero,264
    3664:	0000421c 	xori	zero,zero,264
    3668:	0000421c 	xori	zero,zero,264
    366c:	0000421c 	xori	zero,zero,264
    3670:	0000421c 	xori	zero,zero,264
    3674:	0000421c 	xori	zero,zero,264
    3678:	000041c0 	call	41c <IO_read+0x6c>
    367c:	00004140 	call	414 <IO_read+0x64>
    3680:	000039a0 	cmpeqi	zero,zero,230
    3684:	000039a0 	cmpeqi	zero,zero,230
    3688:	000039a0 	cmpeqi	zero,zero,230
    368c:	00004160 	cmpeqi	zero,zero,261
    3690:	00004140 	call	414 <IO_read+0x64>
    3694:	0000421c 	xori	zero,zero,264
    3698:	0000421c 	xori	zero,zero,264
    369c:	0000416c 	andhi	zero,zero,261
    36a0:	0000421c 	xori	zero,zero,264
    36a4:	00004180 	call	418 <IO_read+0x68>
    36a8:	00004004 	movi	zero,256
    36ac:	000036ec 	andhi	zero,zero,219
    36b0:	0000403c 	xorhi	zero,zero,256
    36b4:	0000421c 	xori	zero,zero,264
    36b8:	00004048 	cmpgei	zero,zero,257
    36bc:	0000421c 	xori	zero,zero,264
    36c0:	000040ac 	andhi	zero,zero,258
    36c4:	0000421c 	xori	zero,zero,264
    36c8:	0000421c 	xori	zero,zero,264
    36cc:	000040cc 	andi	zero,zero,259
    36d0:	d8c03117 	ldw	r3,196(sp)
    36d4:	d8802e15 	stw	r2,184(sp)
    36d8:	00c7c83a 	sub	r3,zero,r3
    36dc:	d8c03115 	stw	r3,196(sp)
    36e0:	84000114 	ori	r16,r16,4
    36e4:	ac400007 	ldb	r17,0(r21)
    36e8:	003f9706 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    36ec:	00800c04 	movi	r2,48
    36f0:	d8802705 	stb	r2,156(sp)
    36f4:	00801e04 	movi	r2,120
    36f8:	d8802745 	stb	r2,157(sp)
    36fc:	d9002a17 	ldw	r4,168(sp)
    3700:	d8802e17 	ldw	r2,184(sp)
    3704:	d8002785 	stb	zero,158(sp)
    3708:	e011883a 	mov	r8,fp
    370c:	10c00104 	addi	r3,r2,4
    3710:	14c00017 	ldw	r19,0(r2)
    3714:	002d883a 	mov	r22,zero
    3718:	80800094 	ori	r2,r16,2
    371c:	2002ca16 	blt	r4,zero,4248 <___vfprintf_internal_r+0xe88>
    3720:	00bfdfc4 	movi	r2,-129
    3724:	80a4703a 	and	r18,r16,r2
    3728:	d8c02e15 	stw	r3,184(sp)
    372c:	94800094 	ori	r18,r18,2
    3730:	9802b41e 	bne	r19,zero,4204 <___vfprintf_internal_r+0xe44>
    3734:	01400074 	movhi	r5,1
    3738:	294b6e04 	addi	r5,r5,11704
    373c:	d9403915 	stw	r5,228(sp)
    3740:	04401e04 	movi	r17,120
    3744:	d8802a17 	ldw	r2,168(sp)
    3748:	0039883a 	mov	fp,zero
    374c:	1001fa26 	beq	r2,zero,3f38 <___vfprintf_internal_r+0xb78>
    3750:	0027883a 	mov	r19,zero
    3754:	002d883a 	mov	r22,zero
    3758:	00021906 	br	3fc0 <___vfprintf_internal_r+0xc00>
    375c:	d9002d17 	ldw	r4,180(sp)
    3760:	b80b883a 	mov	r5,r23
    3764:	00057740 	call	5774 <__swsetup_r>
    3768:	1005dc1e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x1b1c>
    376c:	b880030b 	ldhu	r2,12(r23)
    3770:	00c00284 	movi	r3,10
    3774:	1080068c 	andi	r2,r2,26
    3778:	10ff3a1e 	bne	r2,r3,3464 <__alt_exception_stack_pointer+0xf8003464>
    377c:	b880038f 	ldh	r2,14(r23)
    3780:	103f3816 	blt	r2,zero,3464 <__alt_exception_stack_pointer+0xf8003464>
    3784:	d9c02e17 	ldw	r7,184(sp)
    3788:	d9002d17 	ldw	r4,180(sp)
    378c:	a80d883a 	mov	r6,r21
    3790:	b80b883a 	mov	r5,r23
    3794:	00056b80 	call	56b8 <__sbprintf>
    3798:	00001106 	br	37e0 <___vfprintf_internal_r+0x420>
    379c:	d9002d17 	ldw	r4,180(sp)
    37a0:	d9801e04 	addi	r6,sp,120
    37a4:	b80b883a 	mov	r5,r23
    37a8:	000a3400 	call	a340 <__sprint_r>
    37ac:	1000081e 	bne	r2,zero,37d0 <___vfprintf_internal_r+0x410>
    37b0:	da000404 	addi	r8,sp,16
    37b4:	003f5106 	br	34fc <__alt_exception_stack_pointer+0xf80034fc>
    37b8:	d8802017 	ldw	r2,128(sp)
    37bc:	10000426 	beq	r2,zero,37d0 <___vfprintf_internal_r+0x410>
    37c0:	d9002d17 	ldw	r4,180(sp)
    37c4:	d9801e04 	addi	r6,sp,120
    37c8:	b80b883a 	mov	r5,r23
    37cc:	000a3400 	call	a340 <__sprint_r>
    37d0:	b880030b 	ldhu	r2,12(r23)
    37d4:	1080100c 	andi	r2,r2,64
    37d8:	1005c01e 	bne	r2,zero,4edc <___vfprintf_internal_r+0x1b1c>
    37dc:	d8802f17 	ldw	r2,188(sp)
    37e0:	dfc04717 	ldw	ra,284(sp)
    37e4:	df004617 	ldw	fp,280(sp)
    37e8:	ddc04517 	ldw	r23,276(sp)
    37ec:	dd804417 	ldw	r22,272(sp)
    37f0:	dd404317 	ldw	r21,268(sp)
    37f4:	dd004217 	ldw	r20,264(sp)
    37f8:	dcc04117 	ldw	r19,260(sp)
    37fc:	dc804017 	ldw	r18,256(sp)
    3800:	dc403f17 	ldw	r17,252(sp)
    3804:	dc003e17 	ldw	r16,248(sp)
    3808:	dec04804 	addi	sp,sp,288
    380c:	f800283a 	ret
    3810:	d9002d17 	ldw	r4,180(sp)
    3814:	00077800 	call	7780 <__sinit>
    3818:	003f0206 	br	3424 <__alt_exception_stack_pointer+0xf8003424>
    381c:	d9002e17 	ldw	r4,184(sp)
    3820:	d9402e17 	ldw	r5,184(sp)
    3824:	21000017 	ldw	r4,0(r4)
    3828:	28800104 	addi	r2,r5,4
    382c:	d9003115 	stw	r4,196(sp)
    3830:	203fa716 	blt	r4,zero,36d0 <__alt_exception_stack_pointer+0xf80036d0>
    3834:	d8802e15 	stw	r2,184(sp)
    3838:	ac400007 	ldb	r17,0(r21)
    383c:	003f4206 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    3840:	ac400007 	ldb	r17,0(r21)
    3844:	01000a84 	movi	r4,42
    3848:	a8c00044 	addi	r3,r21,1
    384c:	89075826 	beq	r17,r4,55b0 <___vfprintf_internal_r+0x21f0>
    3850:	8cbff404 	addi	r18,r17,-48
    3854:	b486ae36 	bltu	r22,r18,5310 <___vfprintf_internal_r+0x1f50>
    3858:	0009883a 	mov	r4,zero
    385c:	1823883a 	mov	r17,r3
    3860:	01400284 	movi	r5,10
    3864:	000cffc0 	call	cffc <__mulsi3>
    3868:	88c00007 	ldb	r3,0(r17)
    386c:	1489883a 	add	r4,r2,r18
    3870:	8d400044 	addi	r21,r17,1
    3874:	1cbff404 	addi	r18,r3,-48
    3878:	a823883a 	mov	r17,r21
    387c:	b4bff82e 	bgeu	r22,r18,3860 <__alt_exception_stack_pointer+0xf8003860>
    3880:	1823883a 	mov	r17,r3
    3884:	2005f616 	blt	r4,zero,5060 <___vfprintf_internal_r+0x1ca0>
    3888:	d9002a15 	stw	r4,168(sp)
    388c:	003f2f06 	br	354c <__alt_exception_stack_pointer+0xf800354c>
    3890:	84002014 	ori	r16,r16,128
    3894:	ac400007 	ldb	r17,0(r21)
    3898:	003f2b06 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    389c:	8cbff404 	addi	r18,r17,-48
    38a0:	d8003115 	stw	zero,196(sp)
    38a4:	0009883a 	mov	r4,zero
    38a8:	a823883a 	mov	r17,r21
    38ac:	01400284 	movi	r5,10
    38b0:	000cffc0 	call	cffc <__mulsi3>
    38b4:	88c00007 	ldb	r3,0(r17)
    38b8:	9089883a 	add	r4,r18,r2
    38bc:	ad400044 	addi	r21,r21,1
    38c0:	1cbff404 	addi	r18,r3,-48
    38c4:	a823883a 	mov	r17,r21
    38c8:	b4bff82e 	bgeu	r22,r18,38ac <__alt_exception_stack_pointer+0xf80038ac>
    38cc:	1823883a 	mov	r17,r3
    38d0:	d9003115 	stw	r4,196(sp)
    38d4:	003f1d06 	br	354c <__alt_exception_stack_pointer+0xf800354c>
    38d8:	8025883a 	mov	r18,r16
    38dc:	dc002903 	ldbu	r16,164(sp)
    38e0:	e011883a 	mov	r8,fp
    38e4:	84003fcc 	andi	r16,r16,255
    38e8:	8007531e 	bne	r16,zero,5638 <___vfprintf_internal_r+0x2278>
    38ec:	94800414 	ori	r18,r18,16
    38f0:	9080080c 	andi	r2,r18,32
    38f4:	1003a326 	beq	r2,zero,4784 <___vfprintf_internal_r+0x13c4>
    38f8:	d9002e17 	ldw	r4,184(sp)
    38fc:	20800117 	ldw	r2,4(r4)
    3900:	24c00017 	ldw	r19,0(r4)
    3904:	21000204 	addi	r4,r4,8
    3908:	d9002e15 	stw	r4,184(sp)
    390c:	102d883a 	mov	r22,r2
    3910:	10047316 	blt	r2,zero,4ae0 <___vfprintf_internal_r+0x1720>
    3914:	d9002a17 	ldw	r4,168(sp)
    3918:	df002783 	ldbu	fp,158(sp)
    391c:	2003e416 	blt	r4,zero,48b0 <___vfprintf_internal_r+0x14f0>
    3920:	00ffdfc4 	movi	r3,-129
    3924:	9d84b03a 	or	r2,r19,r22
    3928:	90e4703a 	and	r18,r18,r3
    392c:	10018026 	beq	r2,zero,3f30 <___vfprintf_internal_r+0xb70>
    3930:	b003ab26 	beq	r22,zero,47e0 <___vfprintf_internal_r+0x1420>
    3934:	dc402915 	stw	r17,164(sp)
    3938:	dc001e04 	addi	r16,sp,120
    393c:	b023883a 	mov	r17,r22
    3940:	402d883a 	mov	r22,r8
    3944:	9809883a 	mov	r4,r19
    3948:	880b883a 	mov	r5,r17
    394c:	01800284 	movi	r6,10
    3950:	000f883a 	mov	r7,zero
    3954:	000c8840 	call	c884 <__umoddi3>
    3958:	10800c04 	addi	r2,r2,48
    395c:	843fffc4 	addi	r16,r16,-1
    3960:	9809883a 	mov	r4,r19
    3964:	880b883a 	mov	r5,r17
    3968:	80800005 	stb	r2,0(r16)
    396c:	01800284 	movi	r6,10
    3970:	000f883a 	mov	r7,zero
    3974:	000c2880 	call	c288 <__udivdi3>
    3978:	1027883a 	mov	r19,r2
    397c:	10c4b03a 	or	r2,r2,r3
    3980:	1823883a 	mov	r17,r3
    3984:	103fef1e 	bne	r2,zero,3944 <__alt_exception_stack_pointer+0xf8003944>
    3988:	d8c02817 	ldw	r3,160(sp)
    398c:	dc402917 	ldw	r17,164(sp)
    3990:	b011883a 	mov	r8,r22
    3994:	1c07c83a 	sub	r3,r3,r16
    3998:	d8c02b15 	stw	r3,172(sp)
    399c:	00005f06 	br	3b1c <___vfprintf_internal_r+0x75c>
    39a0:	8025883a 	mov	r18,r16
    39a4:	dc002903 	ldbu	r16,164(sp)
    39a8:	e011883a 	mov	r8,fp
    39ac:	84003fcc 	andi	r16,r16,255
    39b0:	80071e1e 	bne	r16,zero,562c <___vfprintf_internal_r+0x226c>
    39b4:	9080020c 	andi	r2,r18,8
    39b8:	1004af26 	beq	r2,zero,4c78 <___vfprintf_internal_r+0x18b8>
    39bc:	d9002e17 	ldw	r4,184(sp)
    39c0:	d9402e17 	ldw	r5,184(sp)
    39c4:	d8802e17 	ldw	r2,184(sp)
    39c8:	21000017 	ldw	r4,0(r4)
    39cc:	29400117 	ldw	r5,4(r5)
    39d0:	10800204 	addi	r2,r2,8
    39d4:	d9003615 	stw	r4,216(sp)
    39d8:	d9403815 	stw	r5,224(sp)
    39dc:	d8802e15 	stw	r2,184(sp)
    39e0:	d9003617 	ldw	r4,216(sp)
    39e4:	d9403817 	ldw	r5,224(sp)
    39e8:	da003d15 	stw	r8,244(sp)
    39ec:	04000044 	movi	r16,1
    39f0:	0009fb80 	call	9fb8 <__fpclassifyd>
    39f4:	da003d17 	ldw	r8,244(sp)
    39f8:	1404441e 	bne	r2,r16,4b0c <___vfprintf_internal_r+0x174c>
    39fc:	d9003617 	ldw	r4,216(sp)
    3a00:	d9403817 	ldw	r5,224(sp)
    3a04:	000d883a 	mov	r6,zero
    3a08:	000f883a 	mov	r7,zero
    3a0c:	000e4040 	call	e404 <__ledf2>
    3a10:	da003d17 	ldw	r8,244(sp)
    3a14:	1005e316 	blt	r2,zero,51a4 <___vfprintf_internal_r+0x1de4>
    3a18:	df002783 	ldbu	fp,158(sp)
    3a1c:	008011c4 	movi	r2,71
    3a20:	1445580e 	bge	r2,r17,4f84 <___vfprintf_internal_r+0x1bc4>
    3a24:	04000074 	movhi	r16,1
    3a28:	840b6604 	addi	r16,r16,11672
    3a2c:	00c000c4 	movi	r3,3
    3a30:	00bfdfc4 	movi	r2,-129
    3a34:	d8c02915 	stw	r3,164(sp)
    3a38:	90a4703a 	and	r18,r18,r2
    3a3c:	d8c02b15 	stw	r3,172(sp)
    3a40:	d8002a15 	stw	zero,168(sp)
    3a44:	d8003215 	stw	zero,200(sp)
    3a48:	00003a06 	br	3b34 <___vfprintf_internal_r+0x774>
    3a4c:	84000214 	ori	r16,r16,8
    3a50:	ac400007 	ldb	r17,0(r21)
    3a54:	003ebc06 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    3a58:	8025883a 	mov	r18,r16
    3a5c:	dc002903 	ldbu	r16,164(sp)
    3a60:	e011883a 	mov	r8,fp
    3a64:	84003fcc 	andi	r16,r16,255
    3a68:	8007001e 	bne	r16,zero,566c <___vfprintf_internal_r+0x22ac>
    3a6c:	94800414 	ori	r18,r18,16
    3a70:	9080080c 	andi	r2,r18,32
    3a74:	1002fa26 	beq	r2,zero,4660 <___vfprintf_internal_r+0x12a0>
    3a78:	d9002e17 	ldw	r4,184(sp)
    3a7c:	d9402a17 	ldw	r5,168(sp)
    3a80:	d8002785 	stb	zero,158(sp)
    3a84:	20800204 	addi	r2,r4,8
    3a88:	24c00017 	ldw	r19,0(r4)
    3a8c:	25800117 	ldw	r22,4(r4)
    3a90:	2804b116 	blt	r5,zero,4d58 <___vfprintf_internal_r+0x1998>
    3a94:	013fdfc4 	movi	r4,-129
    3a98:	9d86b03a 	or	r3,r19,r22
    3a9c:	d8802e15 	stw	r2,184(sp)
    3aa0:	9124703a 	and	r18,r18,r4
    3aa4:	1802fb1e 	bne	r3,zero,4694 <___vfprintf_internal_r+0x12d4>
    3aa8:	d8c02a17 	ldw	r3,168(sp)
    3aac:	0039883a 	mov	fp,zero
    3ab0:	1805e526 	beq	r3,zero,5248 <___vfprintf_internal_r+0x1e88>
    3ab4:	0027883a 	mov	r19,zero
    3ab8:	002d883a 	mov	r22,zero
    3abc:	dc001e04 	addi	r16,sp,120
    3ac0:	9806d0fa 	srli	r3,r19,3
    3ac4:	b008977a 	slli	r4,r22,29
    3ac8:	b02cd0fa 	srli	r22,r22,3
    3acc:	9cc001cc 	andi	r19,r19,7
    3ad0:	98800c04 	addi	r2,r19,48
    3ad4:	843fffc4 	addi	r16,r16,-1
    3ad8:	20e6b03a 	or	r19,r4,r3
    3adc:	80800005 	stb	r2,0(r16)
    3ae0:	9d86b03a 	or	r3,r19,r22
    3ae4:	183ff61e 	bne	r3,zero,3ac0 <__alt_exception_stack_pointer+0xf8003ac0>
    3ae8:	90c0004c 	andi	r3,r18,1
    3aec:	18014126 	beq	r3,zero,3ff4 <___vfprintf_internal_r+0xc34>
    3af0:	10803fcc 	andi	r2,r2,255
    3af4:	1080201c 	xori	r2,r2,128
    3af8:	10bfe004 	addi	r2,r2,-128
    3afc:	00c00c04 	movi	r3,48
    3b00:	10c13c26 	beq	r2,r3,3ff4 <___vfprintf_internal_r+0xc34>
    3b04:	80ffffc5 	stb	r3,-1(r16)
    3b08:	d8c02817 	ldw	r3,160(sp)
    3b0c:	80bfffc4 	addi	r2,r16,-1
    3b10:	1021883a 	mov	r16,r2
    3b14:	1887c83a 	sub	r3,r3,r2
    3b18:	d8c02b15 	stw	r3,172(sp)
    3b1c:	d8802b17 	ldw	r2,172(sp)
    3b20:	d9002a17 	ldw	r4,168(sp)
    3b24:	1100010e 	bge	r2,r4,3b2c <___vfprintf_internal_r+0x76c>
    3b28:	2005883a 	mov	r2,r4
    3b2c:	d8802915 	stw	r2,164(sp)
    3b30:	d8003215 	stw	zero,200(sp)
    3b34:	e7003fcc 	andi	fp,fp,255
    3b38:	e700201c 	xori	fp,fp,128
    3b3c:	e73fe004 	addi	fp,fp,-128
    3b40:	e0000326 	beq	fp,zero,3b50 <___vfprintf_internal_r+0x790>
    3b44:	d8c02917 	ldw	r3,164(sp)
    3b48:	18c00044 	addi	r3,r3,1
    3b4c:	d8c02915 	stw	r3,164(sp)
    3b50:	90c0008c 	andi	r3,r18,2
    3b54:	d8c02c15 	stw	r3,176(sp)
    3b58:	18000326 	beq	r3,zero,3b68 <___vfprintf_internal_r+0x7a8>
    3b5c:	d8c02917 	ldw	r3,164(sp)
    3b60:	18c00084 	addi	r3,r3,2
    3b64:	d8c02915 	stw	r3,164(sp)
    3b68:	90c0210c 	andi	r3,r18,132
    3b6c:	d8c03015 	stw	r3,192(sp)
    3b70:	1801c51e 	bne	r3,zero,4288 <___vfprintf_internal_r+0xec8>
    3b74:	d9003117 	ldw	r4,196(sp)
    3b78:	d8c02917 	ldw	r3,164(sp)
    3b7c:	20e7c83a 	sub	r19,r4,r3
    3b80:	04c1c10e 	bge	zero,r19,4288 <___vfprintf_internal_r+0xec8>
    3b84:	02400404 	movi	r9,16
    3b88:	d8c02017 	ldw	r3,128(sp)
    3b8c:	d8801f17 	ldw	r2,124(sp)
    3b90:	4cc52f0e 	bge	r9,r19,5050 <___vfprintf_internal_r+0x1c90>
    3b94:	01400074 	movhi	r5,1
    3b98:	294b7984 	addi	r5,r5,11750
    3b9c:	dc403b15 	stw	r17,236(sp)
    3ba0:	d9403515 	stw	r5,212(sp)
    3ba4:	9823883a 	mov	r17,r19
    3ba8:	482d883a 	mov	r22,r9
    3bac:	9027883a 	mov	r19,r18
    3bb0:	070001c4 	movi	fp,7
    3bb4:	8025883a 	mov	r18,r16
    3bb8:	dc002d17 	ldw	r16,180(sp)
    3bbc:	00000306 	br	3bcc <___vfprintf_internal_r+0x80c>
    3bc0:	8c7ffc04 	addi	r17,r17,-16
    3bc4:	42000204 	addi	r8,r8,8
    3bc8:	b440130e 	bge	r22,r17,3c18 <___vfprintf_internal_r+0x858>
    3bcc:	01000074 	movhi	r4,1
    3bd0:	18c00404 	addi	r3,r3,16
    3bd4:	10800044 	addi	r2,r2,1
    3bd8:	210b7984 	addi	r4,r4,11750
    3bdc:	41000015 	stw	r4,0(r8)
    3be0:	45800115 	stw	r22,4(r8)
    3be4:	d8c02015 	stw	r3,128(sp)
    3be8:	d8801f15 	stw	r2,124(sp)
    3bec:	e0bff40e 	bge	fp,r2,3bc0 <__alt_exception_stack_pointer+0xf8003bc0>
    3bf0:	d9801e04 	addi	r6,sp,120
    3bf4:	b80b883a 	mov	r5,r23
    3bf8:	8009883a 	mov	r4,r16
    3bfc:	000a3400 	call	a340 <__sprint_r>
    3c00:	103ef31e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    3c04:	8c7ffc04 	addi	r17,r17,-16
    3c08:	d8c02017 	ldw	r3,128(sp)
    3c0c:	d8801f17 	ldw	r2,124(sp)
    3c10:	da000404 	addi	r8,sp,16
    3c14:	b47fed16 	blt	r22,r17,3bcc <__alt_exception_stack_pointer+0xf8003bcc>
    3c18:	9021883a 	mov	r16,r18
    3c1c:	9825883a 	mov	r18,r19
    3c20:	8827883a 	mov	r19,r17
    3c24:	dc403b17 	ldw	r17,236(sp)
    3c28:	d9403517 	ldw	r5,212(sp)
    3c2c:	98c7883a 	add	r3,r19,r3
    3c30:	10800044 	addi	r2,r2,1
    3c34:	41400015 	stw	r5,0(r8)
    3c38:	44c00115 	stw	r19,4(r8)
    3c3c:	d8c02015 	stw	r3,128(sp)
    3c40:	d8801f15 	stw	r2,124(sp)
    3c44:	010001c4 	movi	r4,7
    3c48:	2082c516 	blt	r4,r2,4760 <___vfprintf_internal_r+0x13a0>
    3c4c:	df002787 	ldb	fp,158(sp)
    3c50:	42000204 	addi	r8,r8,8
    3c54:	e0000c26 	beq	fp,zero,3c88 <___vfprintf_internal_r+0x8c8>
    3c58:	d8801f17 	ldw	r2,124(sp)
    3c5c:	d9002784 	addi	r4,sp,158
    3c60:	18c00044 	addi	r3,r3,1
    3c64:	10800044 	addi	r2,r2,1
    3c68:	41000015 	stw	r4,0(r8)
    3c6c:	01000044 	movi	r4,1
    3c70:	41000115 	stw	r4,4(r8)
    3c74:	d8c02015 	stw	r3,128(sp)
    3c78:	d8801f15 	stw	r2,124(sp)
    3c7c:	010001c4 	movi	r4,7
    3c80:	20825e16 	blt	r4,r2,45fc <___vfprintf_internal_r+0x123c>
    3c84:	42000204 	addi	r8,r8,8
    3c88:	d8802c17 	ldw	r2,176(sp)
    3c8c:	10000c26 	beq	r2,zero,3cc0 <___vfprintf_internal_r+0x900>
    3c90:	d8801f17 	ldw	r2,124(sp)
    3c94:	d9002704 	addi	r4,sp,156
    3c98:	18c00084 	addi	r3,r3,2
    3c9c:	10800044 	addi	r2,r2,1
    3ca0:	41000015 	stw	r4,0(r8)
    3ca4:	01000084 	movi	r4,2
    3ca8:	41000115 	stw	r4,4(r8)
    3cac:	d8c02015 	stw	r3,128(sp)
    3cb0:	d8801f15 	stw	r2,124(sp)
    3cb4:	010001c4 	movi	r4,7
    3cb8:	20825816 	blt	r4,r2,461c <___vfprintf_internal_r+0x125c>
    3cbc:	42000204 	addi	r8,r8,8
    3cc0:	d9003017 	ldw	r4,192(sp)
    3cc4:	00802004 	movi	r2,128
    3cc8:	2081bb26 	beq	r4,r2,43b8 <___vfprintf_internal_r+0xff8>
    3ccc:	d9402a17 	ldw	r5,168(sp)
    3cd0:	d8802b17 	ldw	r2,172(sp)
    3cd4:	28adc83a 	sub	r22,r5,r2
    3cd8:	0580310e 	bge	zero,r22,3da0 <___vfprintf_internal_r+0x9e0>
    3cdc:	07000404 	movi	fp,16
    3ce0:	d8801f17 	ldw	r2,124(sp)
    3ce4:	e584360e 	bge	fp,r22,4dc0 <___vfprintf_internal_r+0x1a00>
    3ce8:	01400074 	movhi	r5,1
    3cec:	294b7584 	addi	r5,r5,11734
    3cf0:	dc402a15 	stw	r17,168(sp)
    3cf4:	d9402c15 	stw	r5,176(sp)
    3cf8:	b023883a 	mov	r17,r22
    3cfc:	04c001c4 	movi	r19,7
    3d00:	a82d883a 	mov	r22,r21
    3d04:	902b883a 	mov	r21,r18
    3d08:	8025883a 	mov	r18,r16
    3d0c:	dc002d17 	ldw	r16,180(sp)
    3d10:	00000306 	br	3d20 <___vfprintf_internal_r+0x960>
    3d14:	8c7ffc04 	addi	r17,r17,-16
    3d18:	42000204 	addi	r8,r8,8
    3d1c:	e440110e 	bge	fp,r17,3d64 <___vfprintf_internal_r+0x9a4>
    3d20:	18c00404 	addi	r3,r3,16
    3d24:	10800044 	addi	r2,r2,1
    3d28:	45000015 	stw	r20,0(r8)
    3d2c:	47000115 	stw	fp,4(r8)
    3d30:	d8c02015 	stw	r3,128(sp)
    3d34:	d8801f15 	stw	r2,124(sp)
    3d38:	98bff60e 	bge	r19,r2,3d14 <__alt_exception_stack_pointer+0xf8003d14>
    3d3c:	d9801e04 	addi	r6,sp,120
    3d40:	b80b883a 	mov	r5,r23
    3d44:	8009883a 	mov	r4,r16
    3d48:	000a3400 	call	a340 <__sprint_r>
    3d4c:	103ea01e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    3d50:	8c7ffc04 	addi	r17,r17,-16
    3d54:	d8c02017 	ldw	r3,128(sp)
    3d58:	d8801f17 	ldw	r2,124(sp)
    3d5c:	da000404 	addi	r8,sp,16
    3d60:	e47fef16 	blt	fp,r17,3d20 <__alt_exception_stack_pointer+0xf8003d20>
    3d64:	9021883a 	mov	r16,r18
    3d68:	a825883a 	mov	r18,r21
    3d6c:	b02b883a 	mov	r21,r22
    3d70:	882d883a 	mov	r22,r17
    3d74:	dc402a17 	ldw	r17,168(sp)
    3d78:	d9002c17 	ldw	r4,176(sp)
    3d7c:	1d87883a 	add	r3,r3,r22
    3d80:	10800044 	addi	r2,r2,1
    3d84:	41000015 	stw	r4,0(r8)
    3d88:	45800115 	stw	r22,4(r8)
    3d8c:	d8c02015 	stw	r3,128(sp)
    3d90:	d8801f15 	stw	r2,124(sp)
    3d94:	010001c4 	movi	r4,7
    3d98:	20821016 	blt	r4,r2,45dc <___vfprintf_internal_r+0x121c>
    3d9c:	42000204 	addi	r8,r8,8
    3da0:	9080400c 	andi	r2,r18,256
    3da4:	10013a1e 	bne	r2,zero,4290 <___vfprintf_internal_r+0xed0>
    3da8:	d9402b17 	ldw	r5,172(sp)
    3dac:	d8801f17 	ldw	r2,124(sp)
    3db0:	44000015 	stw	r16,0(r8)
    3db4:	1947883a 	add	r3,r3,r5
    3db8:	10800044 	addi	r2,r2,1
    3dbc:	41400115 	stw	r5,4(r8)
    3dc0:	d8c02015 	stw	r3,128(sp)
    3dc4:	d8801f15 	stw	r2,124(sp)
    3dc8:	010001c4 	movi	r4,7
    3dcc:	2081f516 	blt	r4,r2,45a4 <___vfprintf_internal_r+0x11e4>
    3dd0:	42000204 	addi	r8,r8,8
    3dd4:	9480010c 	andi	r18,r18,4
    3dd8:	90003226 	beq	r18,zero,3ea4 <___vfprintf_internal_r+0xae4>
    3ddc:	d9403117 	ldw	r5,196(sp)
    3de0:	d8802917 	ldw	r2,164(sp)
    3de4:	28a1c83a 	sub	r16,r5,r2
    3de8:	04002e0e 	bge	zero,r16,3ea4 <___vfprintf_internal_r+0xae4>
    3dec:	04400404 	movi	r17,16
    3df0:	d8801f17 	ldw	r2,124(sp)
    3df4:	8c04c40e 	bge	r17,r16,5108 <___vfprintf_internal_r+0x1d48>
    3df8:	01400074 	movhi	r5,1
    3dfc:	294b7984 	addi	r5,r5,11750
    3e00:	d9403515 	stw	r5,212(sp)
    3e04:	048001c4 	movi	r18,7
    3e08:	dcc02d17 	ldw	r19,180(sp)
    3e0c:	00000306 	br	3e1c <___vfprintf_internal_r+0xa5c>
    3e10:	843ffc04 	addi	r16,r16,-16
    3e14:	42000204 	addi	r8,r8,8
    3e18:	8c00130e 	bge	r17,r16,3e68 <___vfprintf_internal_r+0xaa8>
    3e1c:	01000074 	movhi	r4,1
    3e20:	18c00404 	addi	r3,r3,16
    3e24:	10800044 	addi	r2,r2,1
    3e28:	210b7984 	addi	r4,r4,11750
    3e2c:	41000015 	stw	r4,0(r8)
    3e30:	44400115 	stw	r17,4(r8)
    3e34:	d8c02015 	stw	r3,128(sp)
    3e38:	d8801f15 	stw	r2,124(sp)
    3e3c:	90bff40e 	bge	r18,r2,3e10 <__alt_exception_stack_pointer+0xf8003e10>
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	b80b883a 	mov	r5,r23
    3e48:	9809883a 	mov	r4,r19
    3e4c:	000a3400 	call	a340 <__sprint_r>
    3e50:	103e5f1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    3e54:	843ffc04 	addi	r16,r16,-16
    3e58:	d8c02017 	ldw	r3,128(sp)
    3e5c:	d8801f17 	ldw	r2,124(sp)
    3e60:	da000404 	addi	r8,sp,16
    3e64:	8c3fed16 	blt	r17,r16,3e1c <__alt_exception_stack_pointer+0xf8003e1c>
    3e68:	d9403517 	ldw	r5,212(sp)
    3e6c:	1c07883a 	add	r3,r3,r16
    3e70:	10800044 	addi	r2,r2,1
    3e74:	41400015 	stw	r5,0(r8)
    3e78:	44000115 	stw	r16,4(r8)
    3e7c:	d8c02015 	stw	r3,128(sp)
    3e80:	d8801f15 	stw	r2,124(sp)
    3e84:	010001c4 	movi	r4,7
    3e88:	2080060e 	bge	r4,r2,3ea4 <___vfprintf_internal_r+0xae4>
    3e8c:	d9002d17 	ldw	r4,180(sp)
    3e90:	d9801e04 	addi	r6,sp,120
    3e94:	b80b883a 	mov	r5,r23
    3e98:	000a3400 	call	a340 <__sprint_r>
    3e9c:	103e4c1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    3ea0:	d8c02017 	ldw	r3,128(sp)
    3ea4:	d8803117 	ldw	r2,196(sp)
    3ea8:	d9002917 	ldw	r4,164(sp)
    3eac:	1100010e 	bge	r2,r4,3eb4 <___vfprintf_internal_r+0xaf4>
    3eb0:	2005883a 	mov	r2,r4
    3eb4:	d9402f17 	ldw	r5,188(sp)
    3eb8:	288b883a 	add	r5,r5,r2
    3ebc:	d9402f15 	stw	r5,188(sp)
    3ec0:	1801c01e 	bne	r3,zero,45c4 <___vfprintf_internal_r+0x1204>
    3ec4:	a8800007 	ldb	r2,0(r21)
    3ec8:	d8001f15 	stw	zero,124(sp)
    3ecc:	da000404 	addi	r8,sp,16
    3ed0:	103d751e 	bne	r2,zero,34a8 <__alt_exception_stack_pointer+0xf80034a8>
    3ed4:	a823883a 	mov	r17,r21
    3ed8:	003d8b06 	br	3508 <__alt_exception_stack_pointer+0xf8003508>
    3edc:	8025883a 	mov	r18,r16
    3ee0:	dc002903 	ldbu	r16,164(sp)
    3ee4:	e011883a 	mov	r8,fp
    3ee8:	84003fcc 	andi	r16,r16,255
    3eec:	8005e51e 	bne	r16,zero,5684 <___vfprintf_internal_r+0x22c4>
    3ef0:	94800414 	ori	r18,r18,16
    3ef4:	9080080c 	andi	r2,r18,32
    3ef8:	10022b26 	beq	r2,zero,47a8 <___vfprintf_internal_r+0x13e8>
    3efc:	d9002e17 	ldw	r4,184(sp)
    3f00:	d9402a17 	ldw	r5,168(sp)
    3f04:	d8002785 	stb	zero,158(sp)
    3f08:	20c00204 	addi	r3,r4,8
    3f0c:	24c00017 	ldw	r19,0(r4)
    3f10:	25800117 	ldw	r22,4(r4)
    3f14:	28042e16 	blt	r5,zero,4fd0 <___vfprintf_internal_r+0x1c10>
    3f18:	013fdfc4 	movi	r4,-129
    3f1c:	9d84b03a 	or	r2,r19,r22
    3f20:	d8c02e15 	stw	r3,184(sp)
    3f24:	9124703a 	and	r18,r18,r4
    3f28:	0039883a 	mov	fp,zero
    3f2c:	103e801e 	bne	r2,zero,3930 <__alt_exception_stack_pointer+0xf8003930>
    3f30:	d9002a17 	ldw	r4,168(sp)
    3f34:	2002e01e 	bne	r4,zero,4ab8 <___vfprintf_internal_r+0x16f8>
    3f38:	d8002a15 	stw	zero,168(sp)
    3f3c:	d8002b15 	stw	zero,172(sp)
    3f40:	dc001e04 	addi	r16,sp,120
    3f44:	003ef506 	br	3b1c <__alt_exception_stack_pointer+0xf8003b1c>
    3f48:	8025883a 	mov	r18,r16
    3f4c:	dc002903 	ldbu	r16,164(sp)
    3f50:	e011883a 	mov	r8,fp
    3f54:	84003fcc 	andi	r16,r16,255
    3f58:	8005ba1e 	bne	r16,zero,5644 <___vfprintf_internal_r+0x2284>
    3f5c:	01000074 	movhi	r4,1
    3f60:	210b6904 	addi	r4,r4,11684
    3f64:	d9003915 	stw	r4,228(sp)
    3f68:	9080080c 	andi	r2,r18,32
    3f6c:	10006126 	beq	r2,zero,40f4 <___vfprintf_internal_r+0xd34>
    3f70:	d9402e17 	ldw	r5,184(sp)
    3f74:	2cc00017 	ldw	r19,0(r5)
    3f78:	2d800117 	ldw	r22,4(r5)
    3f7c:	29400204 	addi	r5,r5,8
    3f80:	d9402e15 	stw	r5,184(sp)
    3f84:	9080004c 	andi	r2,r18,1
    3f88:	1001ac26 	beq	r2,zero,463c <___vfprintf_internal_r+0x127c>
    3f8c:	9d84b03a 	or	r2,r19,r22
    3f90:	10038526 	beq	r2,zero,4da8 <___vfprintf_internal_r+0x19e8>
    3f94:	d8c02a17 	ldw	r3,168(sp)
    3f98:	00800c04 	movi	r2,48
    3f9c:	d8802705 	stb	r2,156(sp)
    3fa0:	dc402745 	stb	r17,157(sp)
    3fa4:	d8002785 	stb	zero,158(sp)
    3fa8:	90800094 	ori	r2,r18,2
    3fac:	18047916 	blt	r3,zero,5194 <___vfprintf_internal_r+0x1dd4>
    3fb0:	00bfdfc4 	movi	r2,-129
    3fb4:	90a4703a 	and	r18,r18,r2
    3fb8:	94800094 	ori	r18,r18,2
    3fbc:	0039883a 	mov	fp,zero
    3fc0:	d9003917 	ldw	r4,228(sp)
    3fc4:	dc001e04 	addi	r16,sp,120
    3fc8:	988003cc 	andi	r2,r19,15
    3fcc:	b006973a 	slli	r3,r22,28
    3fd0:	2085883a 	add	r2,r4,r2
    3fd4:	9826d13a 	srli	r19,r19,4
    3fd8:	10800003 	ldbu	r2,0(r2)
    3fdc:	b02cd13a 	srli	r22,r22,4
    3fe0:	843fffc4 	addi	r16,r16,-1
    3fe4:	1ce6b03a 	or	r19,r3,r19
    3fe8:	80800005 	stb	r2,0(r16)
    3fec:	9d84b03a 	or	r2,r19,r22
    3ff0:	103ff51e 	bne	r2,zero,3fc8 <__alt_exception_stack_pointer+0xf8003fc8>
    3ff4:	d8c02817 	ldw	r3,160(sp)
    3ff8:	1c07c83a 	sub	r3,r3,r16
    3ffc:	d8c02b15 	stw	r3,172(sp)
    4000:	003ec606 	br	3b1c <__alt_exception_stack_pointer+0xf8003b1c>
    4004:	8025883a 	mov	r18,r16
    4008:	dc002903 	ldbu	r16,164(sp)
    400c:	e011883a 	mov	r8,fp
    4010:	84003fcc 	andi	r16,r16,255
    4014:	803e9626 	beq	r16,zero,3a70 <__alt_exception_stack_pointer+0xf8003a70>
    4018:	d8c02b03 	ldbu	r3,172(sp)
    401c:	d8c02785 	stb	r3,158(sp)
    4020:	003e9306 	br	3a70 <__alt_exception_stack_pointer+0xf8003a70>
    4024:	00c00044 	movi	r3,1
    4028:	d8c02905 	stb	r3,164(sp)
    402c:	00c00ac4 	movi	r3,43
    4030:	d8c02b05 	stb	r3,172(sp)
    4034:	ac400007 	ldb	r17,0(r21)
    4038:	003d4306 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    403c:	84000814 	ori	r16,r16,32
    4040:	ac400007 	ldb	r17,0(r21)
    4044:	003d4006 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4048:	d8802e17 	ldw	r2,184(sp)
    404c:	8025883a 	mov	r18,r16
    4050:	d8002785 	stb	zero,158(sp)
    4054:	14000017 	ldw	r16,0(r2)
    4058:	e011883a 	mov	r8,fp
    405c:	14c00104 	addi	r19,r2,4
    4060:	80042d26 	beq	r16,zero,5118 <___vfprintf_internal_r+0x1d58>
    4064:	d8c02a17 	ldw	r3,168(sp)
    4068:	1803e416 	blt	r3,zero,4ffc <___vfprintf_internal_r+0x1c3c>
    406c:	180d883a 	mov	r6,r3
    4070:	000b883a 	mov	r5,zero
    4074:	8009883a 	mov	r4,r16
    4078:	df003d15 	stw	fp,244(sp)
    407c:	00084ec0 	call	84ec <memchr>
    4080:	da003d17 	ldw	r8,244(sp)
    4084:	10046826 	beq	r2,zero,5228 <___vfprintf_internal_r+0x1e68>
    4088:	1405c83a 	sub	r2,r2,r16
    408c:	d8802b15 	stw	r2,172(sp)
    4090:	1003e016 	blt	r2,zero,5014 <___vfprintf_internal_r+0x1c54>
    4094:	df002783 	ldbu	fp,158(sp)
    4098:	d8802915 	stw	r2,164(sp)
    409c:	dcc02e15 	stw	r19,184(sp)
    40a0:	d8002a15 	stw	zero,168(sp)
    40a4:	d8003215 	stw	zero,200(sp)
    40a8:	003ea206 	br	3b34 <__alt_exception_stack_pointer+0xf8003b34>
    40ac:	8025883a 	mov	r18,r16
    40b0:	dc002903 	ldbu	r16,164(sp)
    40b4:	e011883a 	mov	r8,fp
    40b8:	84003fcc 	andi	r16,r16,255
    40bc:	803f8d26 	beq	r16,zero,3ef4 <__alt_exception_stack_pointer+0xf8003ef4>
    40c0:	d8c02b03 	ldbu	r3,172(sp)
    40c4:	d8c02785 	stb	r3,158(sp)
    40c8:	003f8a06 	br	3ef4 <__alt_exception_stack_pointer+0xf8003ef4>
    40cc:	8025883a 	mov	r18,r16
    40d0:	dc002903 	ldbu	r16,164(sp)
    40d4:	e011883a 	mov	r8,fp
    40d8:	84003fcc 	andi	r16,r16,255
    40dc:	8005661e 	bne	r16,zero,5678 <___vfprintf_internal_r+0x22b8>
    40e0:	01000074 	movhi	r4,1
    40e4:	210b6e04 	addi	r4,r4,11704
    40e8:	d9003915 	stw	r4,228(sp)
    40ec:	9080080c 	andi	r2,r18,32
    40f0:	103f9f1e 	bne	r2,zero,3f70 <__alt_exception_stack_pointer+0xf8003f70>
    40f4:	9080040c 	andi	r2,r18,16
    40f8:	1002eb26 	beq	r2,zero,4ca8 <___vfprintf_internal_r+0x18e8>
    40fc:	d8802e17 	ldw	r2,184(sp)
    4100:	002d883a 	mov	r22,zero
    4104:	14c00017 	ldw	r19,0(r2)
    4108:	10800104 	addi	r2,r2,4
    410c:	d8802e15 	stw	r2,184(sp)
    4110:	003f9c06 	br	3f84 <__alt_exception_stack_pointer+0xf8003f84>
    4114:	d8802b07 	ldb	r2,172(sp)
    4118:	1002e11e 	bne	r2,zero,4ca0 <___vfprintf_internal_r+0x18e0>
    411c:	00c00044 	movi	r3,1
    4120:	d8c02905 	stb	r3,164(sp)
    4124:	00c00804 	movi	r3,32
    4128:	d8c02b05 	stb	r3,172(sp)
    412c:	ac400007 	ldb	r17,0(r21)
    4130:	003d0506 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4134:	84000054 	ori	r16,r16,1
    4138:	ac400007 	ldb	r17,0(r21)
    413c:	003d0206 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4140:	8025883a 	mov	r18,r16
    4144:	dc002903 	ldbu	r16,164(sp)
    4148:	e011883a 	mov	r8,fp
    414c:	84003fcc 	andi	r16,r16,255
    4150:	803de726 	beq	r16,zero,38f0 <__alt_exception_stack_pointer+0xf80038f0>
    4154:	d8c02b03 	ldbu	r3,172(sp)
    4158:	d8c02785 	stb	r3,158(sp)
    415c:	003de406 	br	38f0 <__alt_exception_stack_pointer+0xf80038f0>
    4160:	84001014 	ori	r16,r16,64
    4164:	ac400007 	ldb	r17,0(r21)
    4168:	003cf706 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    416c:	ac400007 	ldb	r17,0(r21)
    4170:	00801b04 	movi	r2,108
    4174:	88838f26 	beq	r17,r2,4fb4 <___vfprintf_internal_r+0x1bf4>
    4178:	84000414 	ori	r16,r16,16
    417c:	003cf206 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4180:	8025883a 	mov	r18,r16
    4184:	dc002903 	ldbu	r16,164(sp)
    4188:	e011883a 	mov	r8,fp
    418c:	84003fcc 	andi	r16,r16,255
    4190:	80053f1e 	bne	r16,zero,5690 <___vfprintf_internal_r+0x22d0>
    4194:	9080080c 	andi	r2,r18,32
    4198:	1002d226 	beq	r2,zero,4ce4 <___vfprintf_internal_r+0x1924>
    419c:	d9002e17 	ldw	r4,184(sp)
    41a0:	d9402f17 	ldw	r5,188(sp)
    41a4:	20800017 	ldw	r2,0(r4)
    41a8:	2807d7fa 	srai	r3,r5,31
    41ac:	21000104 	addi	r4,r4,4
    41b0:	d9002e15 	stw	r4,184(sp)
    41b4:	11400015 	stw	r5,0(r2)
    41b8:	10c00115 	stw	r3,4(r2)
    41bc:	003cb806 	br	34a0 <__alt_exception_stack_pointer+0xf80034a0>
    41c0:	d8c02e17 	ldw	r3,184(sp)
    41c4:	d9002e17 	ldw	r4,184(sp)
    41c8:	8025883a 	mov	r18,r16
    41cc:	18800017 	ldw	r2,0(r3)
    41d0:	21000104 	addi	r4,r4,4
    41d4:	00c00044 	movi	r3,1
    41d8:	e011883a 	mov	r8,fp
    41dc:	d8c02915 	stw	r3,164(sp)
    41e0:	d8002785 	stb	zero,158(sp)
    41e4:	d8801405 	stb	r2,80(sp)
    41e8:	d9002e15 	stw	r4,184(sp)
    41ec:	d8c02b15 	stw	r3,172(sp)
    41f0:	d8002a15 	stw	zero,168(sp)
    41f4:	d8003215 	stw	zero,200(sp)
    41f8:	dc001404 	addi	r16,sp,80
    41fc:	0039883a 	mov	fp,zero
    4200:	003e5306 	br	3b50 <__alt_exception_stack_pointer+0xf8003b50>
    4204:	01000074 	movhi	r4,1
    4208:	210b6e04 	addi	r4,r4,11704
    420c:	0039883a 	mov	fp,zero
    4210:	d9003915 	stw	r4,228(sp)
    4214:	04401e04 	movi	r17,120
    4218:	003f6906 	br	3fc0 <__alt_exception_stack_pointer+0xf8003fc0>
    421c:	8025883a 	mov	r18,r16
    4220:	dc002903 	ldbu	r16,164(sp)
    4224:	e011883a 	mov	r8,fp
    4228:	84003fcc 	andi	r16,r16,255
    422c:	8005081e 	bne	r16,zero,5650 <___vfprintf_internal_r+0x2290>
    4230:	883d6126 	beq	r17,zero,37b8 <__alt_exception_stack_pointer+0xf80037b8>
    4234:	00c00044 	movi	r3,1
    4238:	d8c02915 	stw	r3,164(sp)
    423c:	dc401405 	stb	r17,80(sp)
    4240:	d8002785 	stb	zero,158(sp)
    4244:	003fe906 	br	41ec <__alt_exception_stack_pointer+0xf80041ec>
    4248:	01400074 	movhi	r5,1
    424c:	294b6e04 	addi	r5,r5,11704
    4250:	d9403915 	stw	r5,228(sp)
    4254:	d8c02e15 	stw	r3,184(sp)
    4258:	1025883a 	mov	r18,r2
    425c:	04401e04 	movi	r17,120
    4260:	9d84b03a 	or	r2,r19,r22
    4264:	1000fc1e 	bne	r2,zero,4658 <___vfprintf_internal_r+0x1298>
    4268:	0039883a 	mov	fp,zero
    426c:	00800084 	movi	r2,2
    4270:	10803fcc 	andi	r2,r2,255
    4274:	00c00044 	movi	r3,1
    4278:	10c20f26 	beq	r2,r3,4ab8 <___vfprintf_internal_r+0x16f8>
    427c:	00c00084 	movi	r3,2
    4280:	10fd3326 	beq	r2,r3,3750 <__alt_exception_stack_pointer+0xf8003750>
    4284:	003e0b06 	br	3ab4 <__alt_exception_stack_pointer+0xf8003ab4>
    4288:	d8c02017 	ldw	r3,128(sp)
    428c:	003e7106 	br	3c54 <__alt_exception_stack_pointer+0xf8003c54>
    4290:	00801944 	movi	r2,101
    4294:	14407e0e 	bge	r2,r17,4490 <___vfprintf_internal_r+0x10d0>
    4298:	d9003617 	ldw	r4,216(sp)
    429c:	d9403817 	ldw	r5,224(sp)
    42a0:	000d883a 	mov	r6,zero
    42a4:	000f883a 	mov	r7,zero
    42a8:	d8c03c15 	stw	r3,240(sp)
    42ac:	da003d15 	stw	r8,244(sp)
    42b0:	000e2a00 	call	e2a0 <__eqdf2>
    42b4:	d8c03c17 	ldw	r3,240(sp)
    42b8:	da003d17 	ldw	r8,244(sp)
    42bc:	1000f71e 	bne	r2,zero,469c <___vfprintf_internal_r+0x12dc>
    42c0:	d8801f17 	ldw	r2,124(sp)
    42c4:	01000074 	movhi	r4,1
    42c8:	210b7504 	addi	r4,r4,11732
    42cc:	18c00044 	addi	r3,r3,1
    42d0:	10800044 	addi	r2,r2,1
    42d4:	41000015 	stw	r4,0(r8)
    42d8:	01000044 	movi	r4,1
    42dc:	41000115 	stw	r4,4(r8)
    42e0:	d8c02015 	stw	r3,128(sp)
    42e4:	d8801f15 	stw	r2,124(sp)
    42e8:	010001c4 	movi	r4,7
    42ec:	2082b816 	blt	r4,r2,4dd0 <___vfprintf_internal_r+0x1a10>
    42f0:	42000204 	addi	r8,r8,8
    42f4:	d8802617 	ldw	r2,152(sp)
    42f8:	d9403317 	ldw	r5,204(sp)
    42fc:	11400216 	blt	r2,r5,4308 <___vfprintf_internal_r+0xf48>
    4300:	9080004c 	andi	r2,r18,1
    4304:	103eb326 	beq	r2,zero,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    4308:	d8803717 	ldw	r2,220(sp)
    430c:	d9003417 	ldw	r4,208(sp)
    4310:	d9403717 	ldw	r5,220(sp)
    4314:	1887883a 	add	r3,r3,r2
    4318:	d8801f17 	ldw	r2,124(sp)
    431c:	41000015 	stw	r4,0(r8)
    4320:	41400115 	stw	r5,4(r8)
    4324:	10800044 	addi	r2,r2,1
    4328:	d8c02015 	stw	r3,128(sp)
    432c:	d8801f15 	stw	r2,124(sp)
    4330:	010001c4 	movi	r4,7
    4334:	20832916 	blt	r4,r2,4fdc <___vfprintf_internal_r+0x1c1c>
    4338:	42000204 	addi	r8,r8,8
    433c:	d8803317 	ldw	r2,204(sp)
    4340:	143fffc4 	addi	r16,r2,-1
    4344:	043ea30e 	bge	zero,r16,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    4348:	04400404 	movi	r17,16
    434c:	d8801f17 	ldw	r2,124(sp)
    4350:	8c00880e 	bge	r17,r16,4574 <___vfprintf_internal_r+0x11b4>
    4354:	01400074 	movhi	r5,1
    4358:	294b7584 	addi	r5,r5,11734
    435c:	d9402c15 	stw	r5,176(sp)
    4360:	058001c4 	movi	r22,7
    4364:	dcc02d17 	ldw	r19,180(sp)
    4368:	00000306 	br	4378 <___vfprintf_internal_r+0xfb8>
    436c:	42000204 	addi	r8,r8,8
    4370:	843ffc04 	addi	r16,r16,-16
    4374:	8c00820e 	bge	r17,r16,4580 <___vfprintf_internal_r+0x11c0>
    4378:	18c00404 	addi	r3,r3,16
    437c:	10800044 	addi	r2,r2,1
    4380:	45000015 	stw	r20,0(r8)
    4384:	44400115 	stw	r17,4(r8)
    4388:	d8c02015 	stw	r3,128(sp)
    438c:	d8801f15 	stw	r2,124(sp)
    4390:	b0bff60e 	bge	r22,r2,436c <__alt_exception_stack_pointer+0xf800436c>
    4394:	d9801e04 	addi	r6,sp,120
    4398:	b80b883a 	mov	r5,r23
    439c:	9809883a 	mov	r4,r19
    43a0:	000a3400 	call	a340 <__sprint_r>
    43a4:	103d0a1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    43a8:	d8c02017 	ldw	r3,128(sp)
    43ac:	d8801f17 	ldw	r2,124(sp)
    43b0:	da000404 	addi	r8,sp,16
    43b4:	003fee06 	br	4370 <__alt_exception_stack_pointer+0xf8004370>
    43b8:	d9403117 	ldw	r5,196(sp)
    43bc:	d8802917 	ldw	r2,164(sp)
    43c0:	28adc83a 	sub	r22,r5,r2
    43c4:	05be410e 	bge	zero,r22,3ccc <__alt_exception_stack_pointer+0xf8003ccc>
    43c8:	07000404 	movi	fp,16
    43cc:	d8801f17 	ldw	r2,124(sp)
    43d0:	e5838f0e 	bge	fp,r22,5210 <___vfprintf_internal_r+0x1e50>
    43d4:	01400074 	movhi	r5,1
    43d8:	294b7584 	addi	r5,r5,11734
    43dc:	dc403015 	stw	r17,192(sp)
    43e0:	d9402c15 	stw	r5,176(sp)
    43e4:	b023883a 	mov	r17,r22
    43e8:	04c001c4 	movi	r19,7
    43ec:	a82d883a 	mov	r22,r21
    43f0:	902b883a 	mov	r21,r18
    43f4:	8025883a 	mov	r18,r16
    43f8:	dc002d17 	ldw	r16,180(sp)
    43fc:	00000306 	br	440c <___vfprintf_internal_r+0x104c>
    4400:	8c7ffc04 	addi	r17,r17,-16
    4404:	42000204 	addi	r8,r8,8
    4408:	e440110e 	bge	fp,r17,4450 <___vfprintf_internal_r+0x1090>
    440c:	18c00404 	addi	r3,r3,16
    4410:	10800044 	addi	r2,r2,1
    4414:	45000015 	stw	r20,0(r8)
    4418:	47000115 	stw	fp,4(r8)
    441c:	d8c02015 	stw	r3,128(sp)
    4420:	d8801f15 	stw	r2,124(sp)
    4424:	98bff60e 	bge	r19,r2,4400 <__alt_exception_stack_pointer+0xf8004400>
    4428:	d9801e04 	addi	r6,sp,120
    442c:	b80b883a 	mov	r5,r23
    4430:	8009883a 	mov	r4,r16
    4434:	000a3400 	call	a340 <__sprint_r>
    4438:	103ce51e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    443c:	8c7ffc04 	addi	r17,r17,-16
    4440:	d8c02017 	ldw	r3,128(sp)
    4444:	d8801f17 	ldw	r2,124(sp)
    4448:	da000404 	addi	r8,sp,16
    444c:	e47fef16 	blt	fp,r17,440c <__alt_exception_stack_pointer+0xf800440c>
    4450:	9021883a 	mov	r16,r18
    4454:	a825883a 	mov	r18,r21
    4458:	b02b883a 	mov	r21,r22
    445c:	882d883a 	mov	r22,r17
    4460:	dc403017 	ldw	r17,192(sp)
    4464:	d9002c17 	ldw	r4,176(sp)
    4468:	1d87883a 	add	r3,r3,r22
    446c:	10800044 	addi	r2,r2,1
    4470:	41000015 	stw	r4,0(r8)
    4474:	45800115 	stw	r22,4(r8)
    4478:	d8c02015 	stw	r3,128(sp)
    447c:	d8801f15 	stw	r2,124(sp)
    4480:	010001c4 	movi	r4,7
    4484:	20818e16 	blt	r4,r2,4ac0 <___vfprintf_internal_r+0x1700>
    4488:	42000204 	addi	r8,r8,8
    448c:	003e0f06 	br	3ccc <__alt_exception_stack_pointer+0xf8003ccc>
    4490:	d9403317 	ldw	r5,204(sp)
    4494:	00800044 	movi	r2,1
    4498:	18c00044 	addi	r3,r3,1
    449c:	1141530e 	bge	r2,r5,49ec <___vfprintf_internal_r+0x162c>
    44a0:	dc401f17 	ldw	r17,124(sp)
    44a4:	00800044 	movi	r2,1
    44a8:	40800115 	stw	r2,4(r8)
    44ac:	8c400044 	addi	r17,r17,1
    44b0:	44000015 	stw	r16,0(r8)
    44b4:	d8c02015 	stw	r3,128(sp)
    44b8:	dc401f15 	stw	r17,124(sp)
    44bc:	008001c4 	movi	r2,7
    44c0:	14416b16 	blt	r2,r17,4a70 <___vfprintf_internal_r+0x16b0>
    44c4:	42000204 	addi	r8,r8,8
    44c8:	d8803717 	ldw	r2,220(sp)
    44cc:	d9003417 	ldw	r4,208(sp)
    44d0:	8c400044 	addi	r17,r17,1
    44d4:	10c7883a 	add	r3,r2,r3
    44d8:	40800115 	stw	r2,4(r8)
    44dc:	41000015 	stw	r4,0(r8)
    44e0:	d8c02015 	stw	r3,128(sp)
    44e4:	dc401f15 	stw	r17,124(sp)
    44e8:	008001c4 	movi	r2,7
    44ec:	14416916 	blt	r2,r17,4a94 <___vfprintf_internal_r+0x16d4>
    44f0:	45800204 	addi	r22,r8,8
    44f4:	d9003617 	ldw	r4,216(sp)
    44f8:	d9403817 	ldw	r5,224(sp)
    44fc:	000d883a 	mov	r6,zero
    4500:	000f883a 	mov	r7,zero
    4504:	d8c03c15 	stw	r3,240(sp)
    4508:	000e2a00 	call	e2a0 <__eqdf2>
    450c:	d8c03c17 	ldw	r3,240(sp)
    4510:	1000bc26 	beq	r2,zero,4804 <___vfprintf_internal_r+0x1444>
    4514:	d9403317 	ldw	r5,204(sp)
    4518:	84000044 	addi	r16,r16,1
    451c:	8c400044 	addi	r17,r17,1
    4520:	28bfffc4 	addi	r2,r5,-1
    4524:	1887883a 	add	r3,r3,r2
    4528:	b0800115 	stw	r2,4(r22)
    452c:	b4000015 	stw	r16,0(r22)
    4530:	d8c02015 	stw	r3,128(sp)
    4534:	dc401f15 	stw	r17,124(sp)
    4538:	008001c4 	movi	r2,7
    453c:	14414316 	blt	r2,r17,4a4c <___vfprintf_internal_r+0x168c>
    4540:	b5800204 	addi	r22,r22,8
    4544:	d9003a17 	ldw	r4,232(sp)
    4548:	df0022c4 	addi	fp,sp,139
    454c:	8c400044 	addi	r17,r17,1
    4550:	20c7883a 	add	r3,r4,r3
    4554:	b7000015 	stw	fp,0(r22)
    4558:	b1000115 	stw	r4,4(r22)
    455c:	d8c02015 	stw	r3,128(sp)
    4560:	dc401f15 	stw	r17,124(sp)
    4564:	008001c4 	movi	r2,7
    4568:	14400e16 	blt	r2,r17,45a4 <___vfprintf_internal_r+0x11e4>
    456c:	b2000204 	addi	r8,r22,8
    4570:	003e1806 	br	3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    4574:	01000074 	movhi	r4,1
    4578:	210b7584 	addi	r4,r4,11734
    457c:	d9002c15 	stw	r4,176(sp)
    4580:	d9002c17 	ldw	r4,176(sp)
    4584:	1c07883a 	add	r3,r3,r16
    4588:	44000115 	stw	r16,4(r8)
    458c:	41000015 	stw	r4,0(r8)
    4590:	10800044 	addi	r2,r2,1
    4594:	d8c02015 	stw	r3,128(sp)
    4598:	d8801f15 	stw	r2,124(sp)
    459c:	010001c4 	movi	r4,7
    45a0:	20be0b0e 	bge	r4,r2,3dd0 <__alt_exception_stack_pointer+0xf8003dd0>
    45a4:	d9002d17 	ldw	r4,180(sp)
    45a8:	d9801e04 	addi	r6,sp,120
    45ac:	b80b883a 	mov	r5,r23
    45b0:	000a3400 	call	a340 <__sprint_r>
    45b4:	103c861e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    45b8:	d8c02017 	ldw	r3,128(sp)
    45bc:	da000404 	addi	r8,sp,16
    45c0:	003e0406 	br	3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    45c4:	d9002d17 	ldw	r4,180(sp)
    45c8:	d9801e04 	addi	r6,sp,120
    45cc:	b80b883a 	mov	r5,r23
    45d0:	000a3400 	call	a340 <__sprint_r>
    45d4:	103e3b26 	beq	r2,zero,3ec4 <__alt_exception_stack_pointer+0xf8003ec4>
    45d8:	003c7d06 	br	37d0 <__alt_exception_stack_pointer+0xf80037d0>
    45dc:	d9002d17 	ldw	r4,180(sp)
    45e0:	d9801e04 	addi	r6,sp,120
    45e4:	b80b883a 	mov	r5,r23
    45e8:	000a3400 	call	a340 <__sprint_r>
    45ec:	103c781e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    45f0:	d8c02017 	ldw	r3,128(sp)
    45f4:	da000404 	addi	r8,sp,16
    45f8:	003de906 	br	3da0 <__alt_exception_stack_pointer+0xf8003da0>
    45fc:	d9002d17 	ldw	r4,180(sp)
    4600:	d9801e04 	addi	r6,sp,120
    4604:	b80b883a 	mov	r5,r23
    4608:	000a3400 	call	a340 <__sprint_r>
    460c:	103c701e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4610:	d8c02017 	ldw	r3,128(sp)
    4614:	da000404 	addi	r8,sp,16
    4618:	003d9b06 	br	3c88 <__alt_exception_stack_pointer+0xf8003c88>
    461c:	d9002d17 	ldw	r4,180(sp)
    4620:	d9801e04 	addi	r6,sp,120
    4624:	b80b883a 	mov	r5,r23
    4628:	000a3400 	call	a340 <__sprint_r>
    462c:	103c681e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4630:	d8c02017 	ldw	r3,128(sp)
    4634:	da000404 	addi	r8,sp,16
    4638:	003da106 	br	3cc0 <__alt_exception_stack_pointer+0xf8003cc0>
    463c:	d9402a17 	ldw	r5,168(sp)
    4640:	d8002785 	stb	zero,158(sp)
    4644:	283f0616 	blt	r5,zero,4260 <__alt_exception_stack_pointer+0xf8004260>
    4648:	00ffdfc4 	movi	r3,-129
    464c:	9d84b03a 	or	r2,r19,r22
    4650:	90e4703a 	and	r18,r18,r3
    4654:	103c3b26 	beq	r2,zero,3744 <__alt_exception_stack_pointer+0xf8003744>
    4658:	0039883a 	mov	fp,zero
    465c:	003e5806 	br	3fc0 <__alt_exception_stack_pointer+0xf8003fc0>
    4660:	9080040c 	andi	r2,r18,16
    4664:	1001b326 	beq	r2,zero,4d34 <___vfprintf_internal_r+0x1974>
    4668:	d8c02e17 	ldw	r3,184(sp)
    466c:	d9002a17 	ldw	r4,168(sp)
    4670:	d8002785 	stb	zero,158(sp)
    4674:	18800104 	addi	r2,r3,4
    4678:	1cc00017 	ldw	r19,0(r3)
    467c:	002d883a 	mov	r22,zero
    4680:	2001b516 	blt	r4,zero,4d58 <___vfprintf_internal_r+0x1998>
    4684:	00ffdfc4 	movi	r3,-129
    4688:	d8802e15 	stw	r2,184(sp)
    468c:	90e4703a 	and	r18,r18,r3
    4690:	983d0526 	beq	r19,zero,3aa8 <__alt_exception_stack_pointer+0xf8003aa8>
    4694:	0039883a 	mov	fp,zero
    4698:	003d0806 	br	3abc <__alt_exception_stack_pointer+0xf8003abc>
    469c:	dc402617 	ldw	r17,152(sp)
    46a0:	0441d30e 	bge	zero,r17,4df0 <___vfprintf_internal_r+0x1a30>
    46a4:	dc403217 	ldw	r17,200(sp)
    46a8:	d8803317 	ldw	r2,204(sp)
    46ac:	1440010e 	bge	r2,r17,46b4 <___vfprintf_internal_r+0x12f4>
    46b0:	1023883a 	mov	r17,r2
    46b4:	04400a0e 	bge	zero,r17,46e0 <___vfprintf_internal_r+0x1320>
    46b8:	d8801f17 	ldw	r2,124(sp)
    46bc:	1c47883a 	add	r3,r3,r17
    46c0:	44000015 	stw	r16,0(r8)
    46c4:	10800044 	addi	r2,r2,1
    46c8:	44400115 	stw	r17,4(r8)
    46cc:	d8c02015 	stw	r3,128(sp)
    46d0:	d8801f15 	stw	r2,124(sp)
    46d4:	010001c4 	movi	r4,7
    46d8:	20826516 	blt	r4,r2,5070 <___vfprintf_internal_r+0x1cb0>
    46dc:	42000204 	addi	r8,r8,8
    46e0:	88026116 	blt	r17,zero,5068 <___vfprintf_internal_r+0x1ca8>
    46e4:	d9003217 	ldw	r4,200(sp)
    46e8:	2463c83a 	sub	r17,r4,r17
    46ec:	04407b0e 	bge	zero,r17,48dc <___vfprintf_internal_r+0x151c>
    46f0:	05800404 	movi	r22,16
    46f4:	d8801f17 	ldw	r2,124(sp)
    46f8:	b4419d0e 	bge	r22,r17,4d70 <___vfprintf_internal_r+0x19b0>
    46fc:	01000074 	movhi	r4,1
    4700:	210b7584 	addi	r4,r4,11734
    4704:	d9002c15 	stw	r4,176(sp)
    4708:	070001c4 	movi	fp,7
    470c:	dcc02d17 	ldw	r19,180(sp)
    4710:	00000306 	br	4720 <___vfprintf_internal_r+0x1360>
    4714:	42000204 	addi	r8,r8,8
    4718:	8c7ffc04 	addi	r17,r17,-16
    471c:	b441970e 	bge	r22,r17,4d7c <___vfprintf_internal_r+0x19bc>
    4720:	18c00404 	addi	r3,r3,16
    4724:	10800044 	addi	r2,r2,1
    4728:	45000015 	stw	r20,0(r8)
    472c:	45800115 	stw	r22,4(r8)
    4730:	d8c02015 	stw	r3,128(sp)
    4734:	d8801f15 	stw	r2,124(sp)
    4738:	e0bff60e 	bge	fp,r2,4714 <__alt_exception_stack_pointer+0xf8004714>
    473c:	d9801e04 	addi	r6,sp,120
    4740:	b80b883a 	mov	r5,r23
    4744:	9809883a 	mov	r4,r19
    4748:	000a3400 	call	a340 <__sprint_r>
    474c:	103c201e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4750:	d8c02017 	ldw	r3,128(sp)
    4754:	d8801f17 	ldw	r2,124(sp)
    4758:	da000404 	addi	r8,sp,16
    475c:	003fee06 	br	4718 <__alt_exception_stack_pointer+0xf8004718>
    4760:	d9002d17 	ldw	r4,180(sp)
    4764:	d9801e04 	addi	r6,sp,120
    4768:	b80b883a 	mov	r5,r23
    476c:	000a3400 	call	a340 <__sprint_r>
    4770:	103c171e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4774:	d8c02017 	ldw	r3,128(sp)
    4778:	df002787 	ldb	fp,158(sp)
    477c:	da000404 	addi	r8,sp,16
    4780:	003d3406 	br	3c54 <__alt_exception_stack_pointer+0xf8003c54>
    4784:	9080040c 	andi	r2,r18,16
    4788:	10016126 	beq	r2,zero,4d10 <___vfprintf_internal_r+0x1950>
    478c:	d9402e17 	ldw	r5,184(sp)
    4790:	2cc00017 	ldw	r19,0(r5)
    4794:	29400104 	addi	r5,r5,4
    4798:	d9402e15 	stw	r5,184(sp)
    479c:	982dd7fa 	srai	r22,r19,31
    47a0:	b005883a 	mov	r2,r22
    47a4:	003c5a06 	br	3910 <__alt_exception_stack_pointer+0xf8003910>
    47a8:	9080040c 	andi	r2,r18,16
    47ac:	10003526 	beq	r2,zero,4884 <___vfprintf_internal_r+0x14c4>
    47b0:	d8c02e17 	ldw	r3,184(sp)
    47b4:	d9002a17 	ldw	r4,168(sp)
    47b8:	d8002785 	stb	zero,158(sp)
    47bc:	18800104 	addi	r2,r3,4
    47c0:	1cc00017 	ldw	r19,0(r3)
    47c4:	002d883a 	mov	r22,zero
    47c8:	20003716 	blt	r4,zero,48a8 <___vfprintf_internal_r+0x14e8>
    47cc:	00ffdfc4 	movi	r3,-129
    47d0:	d8802e15 	stw	r2,184(sp)
    47d4:	90e4703a 	and	r18,r18,r3
    47d8:	0039883a 	mov	fp,zero
    47dc:	983dd426 	beq	r19,zero,3f30 <__alt_exception_stack_pointer+0xf8003f30>
    47e0:	00800244 	movi	r2,9
    47e4:	14fc5336 	bltu	r2,r19,3934 <__alt_exception_stack_pointer+0xf8003934>
    47e8:	d8c02817 	ldw	r3,160(sp)
    47ec:	dc001dc4 	addi	r16,sp,119
    47f0:	9cc00c04 	addi	r19,r19,48
    47f4:	1c07c83a 	sub	r3,r3,r16
    47f8:	dcc01dc5 	stb	r19,119(sp)
    47fc:	d8c02b15 	stw	r3,172(sp)
    4800:	003cc606 	br	3b1c <__alt_exception_stack_pointer+0xf8003b1c>
    4804:	d8803317 	ldw	r2,204(sp)
    4808:	143fffc4 	addi	r16,r2,-1
    480c:	043f4d0e 	bge	zero,r16,4544 <__alt_exception_stack_pointer+0xf8004544>
    4810:	07000404 	movi	fp,16
    4814:	e400810e 	bge	fp,r16,4a1c <___vfprintf_internal_r+0x165c>
    4818:	01400074 	movhi	r5,1
    481c:	294b7584 	addi	r5,r5,11734
    4820:	d9402c15 	stw	r5,176(sp)
    4824:	01c001c4 	movi	r7,7
    4828:	dcc02d17 	ldw	r19,180(sp)
    482c:	00000306 	br	483c <___vfprintf_internal_r+0x147c>
    4830:	b5800204 	addi	r22,r22,8
    4834:	843ffc04 	addi	r16,r16,-16
    4838:	e4007b0e 	bge	fp,r16,4a28 <___vfprintf_internal_r+0x1668>
    483c:	18c00404 	addi	r3,r3,16
    4840:	8c400044 	addi	r17,r17,1
    4844:	b5000015 	stw	r20,0(r22)
    4848:	b7000115 	stw	fp,4(r22)
    484c:	d8c02015 	stw	r3,128(sp)
    4850:	dc401f15 	stw	r17,124(sp)
    4854:	3c7ff60e 	bge	r7,r17,4830 <__alt_exception_stack_pointer+0xf8004830>
    4858:	d9801e04 	addi	r6,sp,120
    485c:	b80b883a 	mov	r5,r23
    4860:	9809883a 	mov	r4,r19
    4864:	d9c03c15 	stw	r7,240(sp)
    4868:	000a3400 	call	a340 <__sprint_r>
    486c:	d9c03c17 	ldw	r7,240(sp)
    4870:	103bd71e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4874:	d8c02017 	ldw	r3,128(sp)
    4878:	dc401f17 	ldw	r17,124(sp)
    487c:	dd800404 	addi	r22,sp,16
    4880:	003fec06 	br	4834 <__alt_exception_stack_pointer+0xf8004834>
    4884:	9080100c 	andi	r2,r18,64
    4888:	d8002785 	stb	zero,158(sp)
    488c:	10010e26 	beq	r2,zero,4cc8 <___vfprintf_internal_r+0x1908>
    4890:	d9402e17 	ldw	r5,184(sp)
    4894:	d8c02a17 	ldw	r3,168(sp)
    4898:	002d883a 	mov	r22,zero
    489c:	28800104 	addi	r2,r5,4
    48a0:	2cc0000b 	ldhu	r19,0(r5)
    48a4:	183fc90e 	bge	r3,zero,47cc <__alt_exception_stack_pointer+0xf80047cc>
    48a8:	d8802e15 	stw	r2,184(sp)
    48ac:	0039883a 	mov	fp,zero
    48b0:	9d84b03a 	or	r2,r19,r22
    48b4:	103c1e1e 	bne	r2,zero,3930 <__alt_exception_stack_pointer+0xf8003930>
    48b8:	00800044 	movi	r2,1
    48bc:	003e6c06 	br	4270 <__alt_exception_stack_pointer+0xf8004270>
    48c0:	d9002d17 	ldw	r4,180(sp)
    48c4:	d9801e04 	addi	r6,sp,120
    48c8:	b80b883a 	mov	r5,r23
    48cc:	000a3400 	call	a340 <__sprint_r>
    48d0:	103bbf1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    48d4:	d8c02017 	ldw	r3,128(sp)
    48d8:	da000404 	addi	r8,sp,16
    48dc:	d9003217 	ldw	r4,200(sp)
    48e0:	d8802617 	ldw	r2,152(sp)
    48e4:	d9403317 	ldw	r5,204(sp)
    48e8:	8123883a 	add	r17,r16,r4
    48ec:	11400216 	blt	r2,r5,48f8 <___vfprintf_internal_r+0x1538>
    48f0:	9100004c 	andi	r4,r18,1
    48f4:	20000d26 	beq	r4,zero,492c <___vfprintf_internal_r+0x156c>
    48f8:	d9003717 	ldw	r4,220(sp)
    48fc:	d9403417 	ldw	r5,208(sp)
    4900:	1907883a 	add	r3,r3,r4
    4904:	d9001f17 	ldw	r4,124(sp)
    4908:	41400015 	stw	r5,0(r8)
    490c:	d9403717 	ldw	r5,220(sp)
    4910:	21000044 	addi	r4,r4,1
    4914:	d8c02015 	stw	r3,128(sp)
    4918:	41400115 	stw	r5,4(r8)
    491c:	d9001f15 	stw	r4,124(sp)
    4920:	014001c4 	movi	r5,7
    4924:	2901e816 	blt	r5,r4,50c8 <___vfprintf_internal_r+0x1d08>
    4928:	42000204 	addi	r8,r8,8
    492c:	d9003317 	ldw	r4,204(sp)
    4930:	8121883a 	add	r16,r16,r4
    4934:	2085c83a 	sub	r2,r4,r2
    4938:	8461c83a 	sub	r16,r16,r17
    493c:	1400010e 	bge	r2,r16,4944 <___vfprintf_internal_r+0x1584>
    4940:	1021883a 	mov	r16,r2
    4944:	04000a0e 	bge	zero,r16,4970 <___vfprintf_internal_r+0x15b0>
    4948:	d9001f17 	ldw	r4,124(sp)
    494c:	1c07883a 	add	r3,r3,r16
    4950:	44400015 	stw	r17,0(r8)
    4954:	21000044 	addi	r4,r4,1
    4958:	44000115 	stw	r16,4(r8)
    495c:	d8c02015 	stw	r3,128(sp)
    4960:	d9001f15 	stw	r4,124(sp)
    4964:	014001c4 	movi	r5,7
    4968:	2901fb16 	blt	r5,r4,5158 <___vfprintf_internal_r+0x1d98>
    496c:	42000204 	addi	r8,r8,8
    4970:	8001f716 	blt	r16,zero,5150 <___vfprintf_internal_r+0x1d90>
    4974:	1421c83a 	sub	r16,r2,r16
    4978:	043d160e 	bge	zero,r16,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    497c:	04400404 	movi	r17,16
    4980:	d8801f17 	ldw	r2,124(sp)
    4984:	8c3efb0e 	bge	r17,r16,4574 <__alt_exception_stack_pointer+0xf8004574>
    4988:	01400074 	movhi	r5,1
    498c:	294b7584 	addi	r5,r5,11734
    4990:	d9402c15 	stw	r5,176(sp)
    4994:	058001c4 	movi	r22,7
    4998:	dcc02d17 	ldw	r19,180(sp)
    499c:	00000306 	br	49ac <___vfprintf_internal_r+0x15ec>
    49a0:	42000204 	addi	r8,r8,8
    49a4:	843ffc04 	addi	r16,r16,-16
    49a8:	8c3ef50e 	bge	r17,r16,4580 <__alt_exception_stack_pointer+0xf8004580>
    49ac:	18c00404 	addi	r3,r3,16
    49b0:	10800044 	addi	r2,r2,1
    49b4:	45000015 	stw	r20,0(r8)
    49b8:	44400115 	stw	r17,4(r8)
    49bc:	d8c02015 	stw	r3,128(sp)
    49c0:	d8801f15 	stw	r2,124(sp)
    49c4:	b0bff60e 	bge	r22,r2,49a0 <__alt_exception_stack_pointer+0xf80049a0>
    49c8:	d9801e04 	addi	r6,sp,120
    49cc:	b80b883a 	mov	r5,r23
    49d0:	9809883a 	mov	r4,r19
    49d4:	000a3400 	call	a340 <__sprint_r>
    49d8:	103b7d1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    49dc:	d8c02017 	ldw	r3,128(sp)
    49e0:	d8801f17 	ldw	r2,124(sp)
    49e4:	da000404 	addi	r8,sp,16
    49e8:	003fee06 	br	49a4 <__alt_exception_stack_pointer+0xf80049a4>
    49ec:	9088703a 	and	r4,r18,r2
    49f0:	203eab1e 	bne	r4,zero,44a0 <__alt_exception_stack_pointer+0xf80044a0>
    49f4:	dc401f17 	ldw	r17,124(sp)
    49f8:	40800115 	stw	r2,4(r8)
    49fc:	44000015 	stw	r16,0(r8)
    4a00:	8c400044 	addi	r17,r17,1
    4a04:	d8c02015 	stw	r3,128(sp)
    4a08:	dc401f15 	stw	r17,124(sp)
    4a0c:	008001c4 	movi	r2,7
    4a10:	14400e16 	blt	r2,r17,4a4c <___vfprintf_internal_r+0x168c>
    4a14:	45800204 	addi	r22,r8,8
    4a18:	003eca06 	br	4544 <__alt_exception_stack_pointer+0xf8004544>
    4a1c:	01000074 	movhi	r4,1
    4a20:	210b7584 	addi	r4,r4,11734
    4a24:	d9002c15 	stw	r4,176(sp)
    4a28:	d8802c17 	ldw	r2,176(sp)
    4a2c:	1c07883a 	add	r3,r3,r16
    4a30:	8c400044 	addi	r17,r17,1
    4a34:	b0800015 	stw	r2,0(r22)
    4a38:	b4000115 	stw	r16,4(r22)
    4a3c:	d8c02015 	stw	r3,128(sp)
    4a40:	dc401f15 	stw	r17,124(sp)
    4a44:	008001c4 	movi	r2,7
    4a48:	147ebd0e 	bge	r2,r17,4540 <__alt_exception_stack_pointer+0xf8004540>
    4a4c:	d9002d17 	ldw	r4,180(sp)
    4a50:	d9801e04 	addi	r6,sp,120
    4a54:	b80b883a 	mov	r5,r23
    4a58:	000a3400 	call	a340 <__sprint_r>
    4a5c:	103b5c1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4a60:	d8c02017 	ldw	r3,128(sp)
    4a64:	dc401f17 	ldw	r17,124(sp)
    4a68:	dd800404 	addi	r22,sp,16
    4a6c:	003eb506 	br	4544 <__alt_exception_stack_pointer+0xf8004544>
    4a70:	d9002d17 	ldw	r4,180(sp)
    4a74:	d9801e04 	addi	r6,sp,120
    4a78:	b80b883a 	mov	r5,r23
    4a7c:	000a3400 	call	a340 <__sprint_r>
    4a80:	103b531e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4a84:	d8c02017 	ldw	r3,128(sp)
    4a88:	dc401f17 	ldw	r17,124(sp)
    4a8c:	da000404 	addi	r8,sp,16
    4a90:	003e8d06 	br	44c8 <__alt_exception_stack_pointer+0xf80044c8>
    4a94:	d9002d17 	ldw	r4,180(sp)
    4a98:	d9801e04 	addi	r6,sp,120
    4a9c:	b80b883a 	mov	r5,r23
    4aa0:	000a3400 	call	a340 <__sprint_r>
    4aa4:	103b4a1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4aa8:	d8c02017 	ldw	r3,128(sp)
    4aac:	dc401f17 	ldw	r17,124(sp)
    4ab0:	dd800404 	addi	r22,sp,16
    4ab4:	003e8f06 	br	44f4 <__alt_exception_stack_pointer+0xf80044f4>
    4ab8:	0027883a 	mov	r19,zero
    4abc:	003f4a06 	br	47e8 <__alt_exception_stack_pointer+0xf80047e8>
    4ac0:	d9002d17 	ldw	r4,180(sp)
    4ac4:	d9801e04 	addi	r6,sp,120
    4ac8:	b80b883a 	mov	r5,r23
    4acc:	000a3400 	call	a340 <__sprint_r>
    4ad0:	103b3f1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4ad4:	d8c02017 	ldw	r3,128(sp)
    4ad8:	da000404 	addi	r8,sp,16
    4adc:	003c7b06 	br	3ccc <__alt_exception_stack_pointer+0xf8003ccc>
    4ae0:	d9402a17 	ldw	r5,168(sp)
    4ae4:	04e7c83a 	sub	r19,zero,r19
    4ae8:	07000b44 	movi	fp,45
    4aec:	9804c03a 	cmpne	r2,r19,zero
    4af0:	05adc83a 	sub	r22,zero,r22
    4af4:	df002785 	stb	fp,158(sp)
    4af8:	b0adc83a 	sub	r22,r22,r2
    4afc:	28017b16 	blt	r5,zero,50ec <___vfprintf_internal_r+0x1d2c>
    4b00:	00bfdfc4 	movi	r2,-129
    4b04:	90a4703a 	and	r18,r18,r2
    4b08:	003b8906 	br	3930 <__alt_exception_stack_pointer+0xf8003930>
    4b0c:	d9003617 	ldw	r4,216(sp)
    4b10:	d9403817 	ldw	r5,224(sp)
    4b14:	da003d15 	stw	r8,244(sp)
    4b18:	0009fb80 	call	9fb8 <__fpclassifyd>
    4b1c:	da003d17 	ldw	r8,244(sp)
    4b20:	1000f026 	beq	r2,zero,4ee4 <___vfprintf_internal_r+0x1b24>
    4b24:	d9002a17 	ldw	r4,168(sp)
    4b28:	05bff7c4 	movi	r22,-33
    4b2c:	00bfffc4 	movi	r2,-1
    4b30:	8dac703a 	and	r22,r17,r22
    4b34:	20820026 	beq	r4,r2,5338 <___vfprintf_internal_r+0x1f78>
    4b38:	008011c4 	movi	r2,71
    4b3c:	b081f726 	beq	r22,r2,531c <___vfprintf_internal_r+0x1f5c>
    4b40:	d9003817 	ldw	r4,224(sp)
    4b44:	90c04014 	ori	r3,r18,256
    4b48:	d8c02c15 	stw	r3,176(sp)
    4b4c:	20021516 	blt	r4,zero,53a4 <___vfprintf_internal_r+0x1fe4>
    4b50:	dcc03817 	ldw	r19,224(sp)
    4b54:	d8002905 	stb	zero,164(sp)
    4b58:	00801984 	movi	r2,102
    4b5c:	8881f926 	beq	r17,r2,5344 <___vfprintf_internal_r+0x1f84>
    4b60:	00801184 	movi	r2,70
    4b64:	88821c26 	beq	r17,r2,53d8 <___vfprintf_internal_r+0x2018>
    4b68:	00801144 	movi	r2,69
    4b6c:	b081ef26 	beq	r22,r2,532c <___vfprintf_internal_r+0x1f6c>
    4b70:	d8c02a17 	ldw	r3,168(sp)
    4b74:	d8802104 	addi	r2,sp,132
    4b78:	d8800315 	stw	r2,12(sp)
    4b7c:	d9403617 	ldw	r5,216(sp)
    4b80:	d8802504 	addi	r2,sp,148
    4b84:	d9002d17 	ldw	r4,180(sp)
    4b88:	d8800215 	stw	r2,8(sp)
    4b8c:	d8802604 	addi	r2,sp,152
    4b90:	d8c00015 	stw	r3,0(sp)
    4b94:	d8800115 	stw	r2,4(sp)
    4b98:	01c00084 	movi	r7,2
    4b9c:	980d883a 	mov	r6,r19
    4ba0:	d8c03c15 	stw	r3,240(sp)
    4ba4:	da003d15 	stw	r8,244(sp)
    4ba8:	0005af00 	call	5af0 <_dtoa_r>
    4bac:	1021883a 	mov	r16,r2
    4bb0:	008019c4 	movi	r2,103
    4bb4:	d8c03c17 	ldw	r3,240(sp)
    4bb8:	da003d17 	ldw	r8,244(sp)
    4bbc:	88817126 	beq	r17,r2,5184 <___vfprintf_internal_r+0x1dc4>
    4bc0:	008011c4 	movi	r2,71
    4bc4:	88829126 	beq	r17,r2,560c <___vfprintf_internal_r+0x224c>
    4bc8:	80f9883a 	add	fp,r16,r3
    4bcc:	d9003617 	ldw	r4,216(sp)
    4bd0:	000d883a 	mov	r6,zero
    4bd4:	000f883a 	mov	r7,zero
    4bd8:	980b883a 	mov	r5,r19
    4bdc:	da003d15 	stw	r8,244(sp)
    4be0:	000e2a00 	call	e2a0 <__eqdf2>
    4be4:	da003d17 	ldw	r8,244(sp)
    4be8:	10018d26 	beq	r2,zero,5220 <___vfprintf_internal_r+0x1e60>
    4bec:	d8802117 	ldw	r2,132(sp)
    4bf0:	1700062e 	bgeu	r2,fp,4c0c <___vfprintf_internal_r+0x184c>
    4bf4:	01000c04 	movi	r4,48
    4bf8:	10c00044 	addi	r3,r2,1
    4bfc:	d8c02115 	stw	r3,132(sp)
    4c00:	11000005 	stb	r4,0(r2)
    4c04:	d8802117 	ldw	r2,132(sp)
    4c08:	173ffb36 	bltu	r2,fp,4bf8 <__alt_exception_stack_pointer+0xf8004bf8>
    4c0c:	1405c83a 	sub	r2,r2,r16
    4c10:	d8803315 	stw	r2,204(sp)
    4c14:	008011c4 	movi	r2,71
    4c18:	b0817626 	beq	r22,r2,51f4 <___vfprintf_internal_r+0x1e34>
    4c1c:	00801944 	movi	r2,101
    4c20:	1442800e 	bge	r2,r17,5624 <___vfprintf_internal_r+0x2264>
    4c24:	d8c02617 	ldw	r3,152(sp)
    4c28:	00801984 	movi	r2,102
    4c2c:	d8c03215 	stw	r3,200(sp)
    4c30:	8881fe26 	beq	r17,r2,542c <___vfprintf_internal_r+0x206c>
    4c34:	d8c03217 	ldw	r3,200(sp)
    4c38:	d9003317 	ldw	r4,204(sp)
    4c3c:	1901dd16 	blt	r3,r4,53b4 <___vfprintf_internal_r+0x1ff4>
    4c40:	9480004c 	andi	r18,r18,1
    4c44:	90022b1e 	bne	r18,zero,54f4 <___vfprintf_internal_r+0x2134>
    4c48:	1805883a 	mov	r2,r3
    4c4c:	18028316 	blt	r3,zero,565c <___vfprintf_internal_r+0x229c>
    4c50:	d8c03217 	ldw	r3,200(sp)
    4c54:	044019c4 	movi	r17,103
    4c58:	d8c02b15 	stw	r3,172(sp)
    4c5c:	df002907 	ldb	fp,164(sp)
    4c60:	e001531e 	bne	fp,zero,51b0 <___vfprintf_internal_r+0x1df0>
    4c64:	df002783 	ldbu	fp,158(sp)
    4c68:	d8802915 	stw	r2,164(sp)
    4c6c:	dc802c17 	ldw	r18,176(sp)
    4c70:	d8002a15 	stw	zero,168(sp)
    4c74:	003baf06 	br	3b34 <__alt_exception_stack_pointer+0xf8003b34>
    4c78:	d8c02e17 	ldw	r3,184(sp)
    4c7c:	d9002e17 	ldw	r4,184(sp)
    4c80:	d9402e17 	ldw	r5,184(sp)
    4c84:	18c00017 	ldw	r3,0(r3)
    4c88:	21000117 	ldw	r4,4(r4)
    4c8c:	29400204 	addi	r5,r5,8
    4c90:	d8c03615 	stw	r3,216(sp)
    4c94:	d9003815 	stw	r4,224(sp)
    4c98:	d9402e15 	stw	r5,184(sp)
    4c9c:	003b5006 	br	39e0 <__alt_exception_stack_pointer+0xf80039e0>
    4ca0:	ac400007 	ldb	r17,0(r21)
    4ca4:	003a2806 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4ca8:	9080100c 	andi	r2,r18,64
    4cac:	1000a826 	beq	r2,zero,4f50 <___vfprintf_internal_r+0x1b90>
    4cb0:	d8c02e17 	ldw	r3,184(sp)
    4cb4:	002d883a 	mov	r22,zero
    4cb8:	1cc0000b 	ldhu	r19,0(r3)
    4cbc:	18c00104 	addi	r3,r3,4
    4cc0:	d8c02e15 	stw	r3,184(sp)
    4cc4:	003caf06 	br	3f84 <__alt_exception_stack_pointer+0xf8003f84>
    4cc8:	d9002e17 	ldw	r4,184(sp)
    4ccc:	d9402a17 	ldw	r5,168(sp)
    4cd0:	002d883a 	mov	r22,zero
    4cd4:	20800104 	addi	r2,r4,4
    4cd8:	24c00017 	ldw	r19,0(r4)
    4cdc:	283ebb0e 	bge	r5,zero,47cc <__alt_exception_stack_pointer+0xf80047cc>
    4ce0:	003ef106 	br	48a8 <__alt_exception_stack_pointer+0xf80048a8>
    4ce4:	9080040c 	andi	r2,r18,16
    4ce8:	1000921e 	bne	r2,zero,4f34 <___vfprintf_internal_r+0x1b74>
    4cec:	9480100c 	andi	r18,r18,64
    4cf0:	90013926 	beq	r18,zero,51d8 <___vfprintf_internal_r+0x1e18>
    4cf4:	d9402e17 	ldw	r5,184(sp)
    4cf8:	d8c02f17 	ldw	r3,188(sp)
    4cfc:	28800017 	ldw	r2,0(r5)
    4d00:	29400104 	addi	r5,r5,4
    4d04:	d9402e15 	stw	r5,184(sp)
    4d08:	10c0000d 	sth	r3,0(r2)
    4d0c:	0039e406 	br	34a0 <__alt_exception_stack_pointer+0xf80034a0>
    4d10:	9080100c 	andi	r2,r18,64
    4d14:	10008026 	beq	r2,zero,4f18 <___vfprintf_internal_r+0x1b58>
    4d18:	d8802e17 	ldw	r2,184(sp)
    4d1c:	14c0000f 	ldh	r19,0(r2)
    4d20:	10800104 	addi	r2,r2,4
    4d24:	d8802e15 	stw	r2,184(sp)
    4d28:	982dd7fa 	srai	r22,r19,31
    4d2c:	b005883a 	mov	r2,r22
    4d30:	003af706 	br	3910 <__alt_exception_stack_pointer+0xf8003910>
    4d34:	9080100c 	andi	r2,r18,64
    4d38:	d8002785 	stb	zero,158(sp)
    4d3c:	10008a1e 	bne	r2,zero,4f68 <___vfprintf_internal_r+0x1ba8>
    4d40:	d9002e17 	ldw	r4,184(sp)
    4d44:	d9402a17 	ldw	r5,168(sp)
    4d48:	002d883a 	mov	r22,zero
    4d4c:	20800104 	addi	r2,r4,4
    4d50:	24c00017 	ldw	r19,0(r4)
    4d54:	283e4b0e 	bge	r5,zero,4684 <__alt_exception_stack_pointer+0xf8004684>
    4d58:	9d86b03a 	or	r3,r19,r22
    4d5c:	d8802e15 	stw	r2,184(sp)
    4d60:	183e4c1e 	bne	r3,zero,4694 <__alt_exception_stack_pointer+0xf8004694>
    4d64:	0039883a 	mov	fp,zero
    4d68:	0005883a 	mov	r2,zero
    4d6c:	003d4006 	br	4270 <__alt_exception_stack_pointer+0xf8004270>
    4d70:	01400074 	movhi	r5,1
    4d74:	294b7584 	addi	r5,r5,11734
    4d78:	d9402c15 	stw	r5,176(sp)
    4d7c:	d9402c17 	ldw	r5,176(sp)
    4d80:	1c47883a 	add	r3,r3,r17
    4d84:	10800044 	addi	r2,r2,1
    4d88:	41400015 	stw	r5,0(r8)
    4d8c:	44400115 	stw	r17,4(r8)
    4d90:	d8c02015 	stw	r3,128(sp)
    4d94:	d8801f15 	stw	r2,124(sp)
    4d98:	010001c4 	movi	r4,7
    4d9c:	20bec816 	blt	r4,r2,48c0 <__alt_exception_stack_pointer+0xf80048c0>
    4da0:	42000204 	addi	r8,r8,8
    4da4:	003ecd06 	br	48dc <__alt_exception_stack_pointer+0xf80048dc>
    4da8:	d9002a17 	ldw	r4,168(sp)
    4dac:	d8002785 	stb	zero,158(sp)
    4db0:	203d2d16 	blt	r4,zero,4268 <__alt_exception_stack_pointer+0xf8004268>
    4db4:	00bfdfc4 	movi	r2,-129
    4db8:	90a4703a 	and	r18,r18,r2
    4dbc:	003a6106 	br	3744 <__alt_exception_stack_pointer+0xf8003744>
    4dc0:	01000074 	movhi	r4,1
    4dc4:	210b7584 	addi	r4,r4,11734
    4dc8:	d9002c15 	stw	r4,176(sp)
    4dcc:	003bea06 	br	3d78 <__alt_exception_stack_pointer+0xf8003d78>
    4dd0:	d9002d17 	ldw	r4,180(sp)
    4dd4:	d9801e04 	addi	r6,sp,120
    4dd8:	b80b883a 	mov	r5,r23
    4ddc:	000a3400 	call	a340 <__sprint_r>
    4de0:	103a7b1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4de4:	d8c02017 	ldw	r3,128(sp)
    4de8:	da000404 	addi	r8,sp,16
    4dec:	003d4106 	br	42f4 <__alt_exception_stack_pointer+0xf80042f4>
    4df0:	d8801f17 	ldw	r2,124(sp)
    4df4:	01400074 	movhi	r5,1
    4df8:	01000044 	movi	r4,1
    4dfc:	18c00044 	addi	r3,r3,1
    4e00:	10800044 	addi	r2,r2,1
    4e04:	294b7504 	addi	r5,r5,11732
    4e08:	41000115 	stw	r4,4(r8)
    4e0c:	41400015 	stw	r5,0(r8)
    4e10:	d8c02015 	stw	r3,128(sp)
    4e14:	d8801f15 	stw	r2,124(sp)
    4e18:	010001c4 	movi	r4,7
    4e1c:	20805c16 	blt	r4,r2,4f90 <___vfprintf_internal_r+0x1bd0>
    4e20:	42000204 	addi	r8,r8,8
    4e24:	8800041e 	bne	r17,zero,4e38 <___vfprintf_internal_r+0x1a78>
    4e28:	d8803317 	ldw	r2,204(sp)
    4e2c:	1000021e 	bne	r2,zero,4e38 <___vfprintf_internal_r+0x1a78>
    4e30:	9080004c 	andi	r2,r18,1
    4e34:	103be726 	beq	r2,zero,3dd4 <__alt_exception_stack_pointer+0xf8003dd4>
    4e38:	d9003717 	ldw	r4,220(sp)
    4e3c:	d8801f17 	ldw	r2,124(sp)
    4e40:	d9403417 	ldw	r5,208(sp)
    4e44:	20c7883a 	add	r3,r4,r3
    4e48:	10800044 	addi	r2,r2,1
    4e4c:	41000115 	stw	r4,4(r8)
    4e50:	41400015 	stw	r5,0(r8)
    4e54:	d8c02015 	stw	r3,128(sp)
    4e58:	d8801f15 	stw	r2,124(sp)
    4e5c:	010001c4 	movi	r4,7
    4e60:	20812116 	blt	r4,r2,52e8 <___vfprintf_internal_r+0x1f28>
    4e64:	42000204 	addi	r8,r8,8
    4e68:	0463c83a 	sub	r17,zero,r17
    4e6c:	0440730e 	bge	zero,r17,503c <___vfprintf_internal_r+0x1c7c>
    4e70:	05800404 	movi	r22,16
    4e74:	b440860e 	bge	r22,r17,5090 <___vfprintf_internal_r+0x1cd0>
    4e78:	01400074 	movhi	r5,1
    4e7c:	294b7584 	addi	r5,r5,11734
    4e80:	d9402c15 	stw	r5,176(sp)
    4e84:	070001c4 	movi	fp,7
    4e88:	dcc02d17 	ldw	r19,180(sp)
    4e8c:	00000306 	br	4e9c <___vfprintf_internal_r+0x1adc>
    4e90:	42000204 	addi	r8,r8,8
    4e94:	8c7ffc04 	addi	r17,r17,-16
    4e98:	b440800e 	bge	r22,r17,509c <___vfprintf_internal_r+0x1cdc>
    4e9c:	18c00404 	addi	r3,r3,16
    4ea0:	10800044 	addi	r2,r2,1
    4ea4:	45000015 	stw	r20,0(r8)
    4ea8:	45800115 	stw	r22,4(r8)
    4eac:	d8c02015 	stw	r3,128(sp)
    4eb0:	d8801f15 	stw	r2,124(sp)
    4eb4:	e0bff60e 	bge	fp,r2,4e90 <__alt_exception_stack_pointer+0xf8004e90>
    4eb8:	d9801e04 	addi	r6,sp,120
    4ebc:	b80b883a 	mov	r5,r23
    4ec0:	9809883a 	mov	r4,r19
    4ec4:	000a3400 	call	a340 <__sprint_r>
    4ec8:	103a411e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4ecc:	d8c02017 	ldw	r3,128(sp)
    4ed0:	d8801f17 	ldw	r2,124(sp)
    4ed4:	da000404 	addi	r8,sp,16
    4ed8:	003fee06 	br	4e94 <__alt_exception_stack_pointer+0xf8004e94>
    4edc:	00bfffc4 	movi	r2,-1
    4ee0:	003a3f06 	br	37e0 <__alt_exception_stack_pointer+0xf80037e0>
    4ee4:	008011c4 	movi	r2,71
    4ee8:	1440b816 	blt	r2,r17,51cc <___vfprintf_internal_r+0x1e0c>
    4eec:	04000074 	movhi	r16,1
    4ef0:	840b6704 	addi	r16,r16,11676
    4ef4:	00c000c4 	movi	r3,3
    4ef8:	00bfdfc4 	movi	r2,-129
    4efc:	d8c02915 	stw	r3,164(sp)
    4f00:	90a4703a 	and	r18,r18,r2
    4f04:	df002783 	ldbu	fp,158(sp)
    4f08:	d8c02b15 	stw	r3,172(sp)
    4f0c:	d8002a15 	stw	zero,168(sp)
    4f10:	d8003215 	stw	zero,200(sp)
    4f14:	003b0706 	br	3b34 <__alt_exception_stack_pointer+0xf8003b34>
    4f18:	d8c02e17 	ldw	r3,184(sp)
    4f1c:	1cc00017 	ldw	r19,0(r3)
    4f20:	18c00104 	addi	r3,r3,4
    4f24:	d8c02e15 	stw	r3,184(sp)
    4f28:	982dd7fa 	srai	r22,r19,31
    4f2c:	b005883a 	mov	r2,r22
    4f30:	003a7706 	br	3910 <__alt_exception_stack_pointer+0xf8003910>
    4f34:	d8c02e17 	ldw	r3,184(sp)
    4f38:	d9002f17 	ldw	r4,188(sp)
    4f3c:	18800017 	ldw	r2,0(r3)
    4f40:	18c00104 	addi	r3,r3,4
    4f44:	d8c02e15 	stw	r3,184(sp)
    4f48:	11000015 	stw	r4,0(r2)
    4f4c:	00395406 	br	34a0 <__alt_exception_stack_pointer+0xf80034a0>
    4f50:	d9002e17 	ldw	r4,184(sp)
    4f54:	002d883a 	mov	r22,zero
    4f58:	24c00017 	ldw	r19,0(r4)
    4f5c:	21000104 	addi	r4,r4,4
    4f60:	d9002e15 	stw	r4,184(sp)
    4f64:	003c0706 	br	3f84 <__alt_exception_stack_pointer+0xf8003f84>
    4f68:	d9402e17 	ldw	r5,184(sp)
    4f6c:	d8c02a17 	ldw	r3,168(sp)
    4f70:	002d883a 	mov	r22,zero
    4f74:	28800104 	addi	r2,r5,4
    4f78:	2cc0000b 	ldhu	r19,0(r5)
    4f7c:	183dc10e 	bge	r3,zero,4684 <__alt_exception_stack_pointer+0xf8004684>
    4f80:	003f7506 	br	4d58 <__alt_exception_stack_pointer+0xf8004d58>
    4f84:	04000074 	movhi	r16,1
    4f88:	840b6504 	addi	r16,r16,11668
    4f8c:	003aa706 	br	3a2c <__alt_exception_stack_pointer+0xf8003a2c>
    4f90:	d9002d17 	ldw	r4,180(sp)
    4f94:	d9801e04 	addi	r6,sp,120
    4f98:	b80b883a 	mov	r5,r23
    4f9c:	000a3400 	call	a340 <__sprint_r>
    4fa0:	103a0b1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4fa4:	dc402617 	ldw	r17,152(sp)
    4fa8:	d8c02017 	ldw	r3,128(sp)
    4fac:	da000404 	addi	r8,sp,16
    4fb0:	003f9c06 	br	4e24 <__alt_exception_stack_pointer+0xf8004e24>
    4fb4:	ac400043 	ldbu	r17,1(r21)
    4fb8:	84000814 	ori	r16,r16,32
    4fbc:	ad400044 	addi	r21,r21,1
    4fc0:	8c403fcc 	andi	r17,r17,255
    4fc4:	8c40201c 	xori	r17,r17,128
    4fc8:	8c7fe004 	addi	r17,r17,-128
    4fcc:	00395e06 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    4fd0:	d8c02e15 	stw	r3,184(sp)
    4fd4:	0039883a 	mov	fp,zero
    4fd8:	003e3506 	br	48b0 <__alt_exception_stack_pointer+0xf80048b0>
    4fdc:	d9002d17 	ldw	r4,180(sp)
    4fe0:	d9801e04 	addi	r6,sp,120
    4fe4:	b80b883a 	mov	r5,r23
    4fe8:	000a3400 	call	a340 <__sprint_r>
    4fec:	1039f81e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4ff0:	d8c02017 	ldw	r3,128(sp)
    4ff4:	da000404 	addi	r8,sp,16
    4ff8:	003cd006 	br	433c <__alt_exception_stack_pointer+0xf800433c>
    4ffc:	8009883a 	mov	r4,r16
    5000:	df003d15 	stw	fp,244(sp)
    5004:	00033200 	call	3320 <strlen>
    5008:	d8802b15 	stw	r2,172(sp)
    500c:	da003d17 	ldw	r8,244(sp)
    5010:	103c200e 	bge	r2,zero,4094 <__alt_exception_stack_pointer+0xf8004094>
    5014:	0005883a 	mov	r2,zero
    5018:	003c1e06 	br	4094 <__alt_exception_stack_pointer+0xf8004094>
    501c:	d9002d17 	ldw	r4,180(sp)
    5020:	d9801e04 	addi	r6,sp,120
    5024:	b80b883a 	mov	r5,r23
    5028:	000a3400 	call	a340 <__sprint_r>
    502c:	1039e81e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    5030:	d8c02017 	ldw	r3,128(sp)
    5034:	d8801f17 	ldw	r2,124(sp)
    5038:	da000404 	addi	r8,sp,16
    503c:	d9403317 	ldw	r5,204(sp)
    5040:	10800044 	addi	r2,r2,1
    5044:	44000015 	stw	r16,0(r8)
    5048:	28c7883a 	add	r3,r5,r3
    504c:	003b5b06 	br	3dbc <__alt_exception_stack_pointer+0xf8003dbc>
    5050:	01000074 	movhi	r4,1
    5054:	210b7984 	addi	r4,r4,11750
    5058:	d9003515 	stw	r4,212(sp)
    505c:	003af206 	br	3c28 <__alt_exception_stack_pointer+0xf8003c28>
    5060:	013fffc4 	movi	r4,-1
    5064:	003a0806 	br	3888 <__alt_exception_stack_pointer+0xf8003888>
    5068:	0023883a 	mov	r17,zero
    506c:	003d9d06 	br	46e4 <__alt_exception_stack_pointer+0xf80046e4>
    5070:	d9002d17 	ldw	r4,180(sp)
    5074:	d9801e04 	addi	r6,sp,120
    5078:	b80b883a 	mov	r5,r23
    507c:	000a3400 	call	a340 <__sprint_r>
    5080:	1039d31e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    5084:	d8c02017 	ldw	r3,128(sp)
    5088:	da000404 	addi	r8,sp,16
    508c:	003d9406 	br	46e0 <__alt_exception_stack_pointer+0xf80046e0>
    5090:	01000074 	movhi	r4,1
    5094:	210b7584 	addi	r4,r4,11734
    5098:	d9002c15 	stw	r4,176(sp)
    509c:	d9002c17 	ldw	r4,176(sp)
    50a0:	1c47883a 	add	r3,r3,r17
    50a4:	10800044 	addi	r2,r2,1
    50a8:	41000015 	stw	r4,0(r8)
    50ac:	44400115 	stw	r17,4(r8)
    50b0:	d8c02015 	stw	r3,128(sp)
    50b4:	d8801f15 	stw	r2,124(sp)
    50b8:	010001c4 	movi	r4,7
    50bc:	20bfd716 	blt	r4,r2,501c <__alt_exception_stack_pointer+0xf800501c>
    50c0:	42000204 	addi	r8,r8,8
    50c4:	003fdd06 	br	503c <__alt_exception_stack_pointer+0xf800503c>
    50c8:	d9002d17 	ldw	r4,180(sp)
    50cc:	d9801e04 	addi	r6,sp,120
    50d0:	b80b883a 	mov	r5,r23
    50d4:	000a3400 	call	a340 <__sprint_r>
    50d8:	1039bd1e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    50dc:	d8802617 	ldw	r2,152(sp)
    50e0:	d8c02017 	ldw	r3,128(sp)
    50e4:	da000404 	addi	r8,sp,16
    50e8:	003e1006 	br	492c <__alt_exception_stack_pointer+0xf800492c>
    50ec:	00800044 	movi	r2,1
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	00c00044 	movi	r3,1
    50f8:	10fa0d26 	beq	r2,r3,3930 <__alt_exception_stack_pointer+0xf8003930>
    50fc:	00c00084 	movi	r3,2
    5100:	10fbaf26 	beq	r2,r3,3fc0 <__alt_exception_stack_pointer+0xf8003fc0>
    5104:	003a6d06 	br	3abc <__alt_exception_stack_pointer+0xf8003abc>
    5108:	01000074 	movhi	r4,1
    510c:	210b7984 	addi	r4,r4,11750
    5110:	d9003515 	stw	r4,212(sp)
    5114:	003b5406 	br	3e68 <__alt_exception_stack_pointer+0xf8003e68>
    5118:	d8802a17 	ldw	r2,168(sp)
    511c:	00c00184 	movi	r3,6
    5120:	1880012e 	bgeu	r3,r2,5128 <___vfprintf_internal_r+0x1d68>
    5124:	1805883a 	mov	r2,r3
    5128:	d8802b15 	stw	r2,172(sp)
    512c:	1000ef16 	blt	r2,zero,54ec <___vfprintf_internal_r+0x212c>
    5130:	04000074 	movhi	r16,1
    5134:	d8802915 	stw	r2,164(sp)
    5138:	dcc02e15 	stw	r19,184(sp)
    513c:	d8002a15 	stw	zero,168(sp)
    5140:	d8003215 	stw	zero,200(sp)
    5144:	840b7304 	addi	r16,r16,11724
    5148:	0039883a 	mov	fp,zero
    514c:	003a8006 	br	3b50 <__alt_exception_stack_pointer+0xf8003b50>
    5150:	0021883a 	mov	r16,zero
    5154:	003e0706 	br	4974 <__alt_exception_stack_pointer+0xf8004974>
    5158:	d9002d17 	ldw	r4,180(sp)
    515c:	d9801e04 	addi	r6,sp,120
    5160:	b80b883a 	mov	r5,r23
    5164:	000a3400 	call	a340 <__sprint_r>
    5168:	1039991e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    516c:	d8802617 	ldw	r2,152(sp)
    5170:	d9403317 	ldw	r5,204(sp)
    5174:	d8c02017 	ldw	r3,128(sp)
    5178:	da000404 	addi	r8,sp,16
    517c:	2885c83a 	sub	r2,r5,r2
    5180:	003dfb06 	br	4970 <__alt_exception_stack_pointer+0xf8004970>
    5184:	9080004c 	andi	r2,r18,1
    5188:	103e8f1e 	bne	r2,zero,4bc8 <__alt_exception_stack_pointer+0xf8004bc8>
    518c:	d8802117 	ldw	r2,132(sp)
    5190:	003e9e06 	br	4c0c <__alt_exception_stack_pointer+0xf8004c0c>
    5194:	1025883a 	mov	r18,r2
    5198:	0039883a 	mov	fp,zero
    519c:	00800084 	movi	r2,2
    51a0:	003fd306 	br	50f0 <__alt_exception_stack_pointer+0xf80050f0>
    51a4:	07000b44 	movi	fp,45
    51a8:	df002785 	stb	fp,158(sp)
    51ac:	003a1b06 	br	3a1c <__alt_exception_stack_pointer+0xf8003a1c>
    51b0:	00c00b44 	movi	r3,45
    51b4:	d8c02785 	stb	r3,158(sp)
    51b8:	d8802915 	stw	r2,164(sp)
    51bc:	dc802c17 	ldw	r18,176(sp)
    51c0:	d8002a15 	stw	zero,168(sp)
    51c4:	07000b44 	movi	fp,45
    51c8:	003a5e06 	br	3b44 <__alt_exception_stack_pointer+0xf8003b44>
    51cc:	04000074 	movhi	r16,1
    51d0:	840b6804 	addi	r16,r16,11680
    51d4:	003f4706 	br	4ef4 <__alt_exception_stack_pointer+0xf8004ef4>
    51d8:	d9002e17 	ldw	r4,184(sp)
    51dc:	d9402f17 	ldw	r5,188(sp)
    51e0:	20800017 	ldw	r2,0(r4)
    51e4:	21000104 	addi	r4,r4,4
    51e8:	d9002e15 	stw	r4,184(sp)
    51ec:	11400015 	stw	r5,0(r2)
    51f0:	0038ab06 	br	34a0 <__alt_exception_stack_pointer+0xf80034a0>
    51f4:	dd802617 	ldw	r22,152(sp)
    51f8:	00bfff44 	movi	r2,-3
    51fc:	b0801c16 	blt	r22,r2,5270 <___vfprintf_internal_r+0x1eb0>
    5200:	d9402a17 	ldw	r5,168(sp)
    5204:	2d801a16 	blt	r5,r22,5270 <___vfprintf_internal_r+0x1eb0>
    5208:	dd803215 	stw	r22,200(sp)
    520c:	003e8906 	br	4c34 <__alt_exception_stack_pointer+0xf8004c34>
    5210:	01000074 	movhi	r4,1
    5214:	210b7584 	addi	r4,r4,11734
    5218:	d9002c15 	stw	r4,176(sp)
    521c:	003c9106 	br	4464 <__alt_exception_stack_pointer+0xf8004464>
    5220:	e005883a 	mov	r2,fp
    5224:	003e7906 	br	4c0c <__alt_exception_stack_pointer+0xf8004c0c>
    5228:	d9002a17 	ldw	r4,168(sp)
    522c:	df002783 	ldbu	fp,158(sp)
    5230:	dcc02e15 	stw	r19,184(sp)
    5234:	d9002915 	stw	r4,164(sp)
    5238:	d9002b15 	stw	r4,172(sp)
    523c:	d8002a15 	stw	zero,168(sp)
    5240:	d8003215 	stw	zero,200(sp)
    5244:	003a3b06 	br	3b34 <__alt_exception_stack_pointer+0xf8003b34>
    5248:	9080004c 	andi	r2,r18,1
    524c:	0039883a 	mov	fp,zero
    5250:	10000426 	beq	r2,zero,5264 <___vfprintf_internal_r+0x1ea4>
    5254:	00800c04 	movi	r2,48
    5258:	dc001dc4 	addi	r16,sp,119
    525c:	d8801dc5 	stb	r2,119(sp)
    5260:	003b6406 	br	3ff4 <__alt_exception_stack_pointer+0xf8003ff4>
    5264:	d8002b15 	stw	zero,172(sp)
    5268:	dc001e04 	addi	r16,sp,120
    526c:	003a2b06 	br	3b1c <__alt_exception_stack_pointer+0xf8003b1c>
    5270:	8c7fff84 	addi	r17,r17,-2
    5274:	b5bfffc4 	addi	r22,r22,-1
    5278:	dd802615 	stw	r22,152(sp)
    527c:	dc4022c5 	stb	r17,139(sp)
    5280:	b000bf16 	blt	r22,zero,5580 <___vfprintf_internal_r+0x21c0>
    5284:	00800ac4 	movi	r2,43
    5288:	d8802305 	stb	r2,140(sp)
    528c:	00800244 	movi	r2,9
    5290:	15807016 	blt	r2,r22,5454 <___vfprintf_internal_r+0x2094>
    5294:	00800c04 	movi	r2,48
    5298:	b5800c04 	addi	r22,r22,48
    529c:	d8802345 	stb	r2,141(sp)
    52a0:	dd802385 	stb	r22,142(sp)
    52a4:	d88023c4 	addi	r2,sp,143
    52a8:	df0022c4 	addi	fp,sp,139
    52ac:	d8c03317 	ldw	r3,204(sp)
    52b0:	1739c83a 	sub	fp,r2,fp
    52b4:	d9003317 	ldw	r4,204(sp)
    52b8:	e0c7883a 	add	r3,fp,r3
    52bc:	df003a15 	stw	fp,232(sp)
    52c0:	d8c02b15 	stw	r3,172(sp)
    52c4:	00800044 	movi	r2,1
    52c8:	1100b30e 	bge	r2,r4,5598 <___vfprintf_internal_r+0x21d8>
    52cc:	d8c02b17 	ldw	r3,172(sp)
    52d0:	18c00044 	addi	r3,r3,1
    52d4:	d8c02b15 	stw	r3,172(sp)
    52d8:	1805883a 	mov	r2,r3
    52dc:	1800ac16 	blt	r3,zero,5590 <___vfprintf_internal_r+0x21d0>
    52e0:	d8003215 	stw	zero,200(sp)
    52e4:	003e5d06 	br	4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    52e8:	d9002d17 	ldw	r4,180(sp)
    52ec:	d9801e04 	addi	r6,sp,120
    52f0:	b80b883a 	mov	r5,r23
    52f4:	000a3400 	call	a340 <__sprint_r>
    52f8:	1039351e 	bne	r2,zero,37d0 <__alt_exception_stack_pointer+0xf80037d0>
    52fc:	dc402617 	ldw	r17,152(sp)
    5300:	d8c02017 	ldw	r3,128(sp)
    5304:	d8801f17 	ldw	r2,124(sp)
    5308:	da000404 	addi	r8,sp,16
    530c:	003ed606 	br	4e68 <__alt_exception_stack_pointer+0xf8004e68>
    5310:	182b883a 	mov	r21,r3
    5314:	d8002a15 	stw	zero,168(sp)
    5318:	00388c06 	br	354c <__alt_exception_stack_pointer+0xf800354c>
    531c:	d8802a17 	ldw	r2,168(sp)
    5320:	103e071e 	bne	r2,zero,4b40 <__alt_exception_stack_pointer+0xf8004b40>
    5324:	dc002a15 	stw	r16,168(sp)
    5328:	003e0506 	br	4b40 <__alt_exception_stack_pointer+0xf8004b40>
    532c:	d9002a17 	ldw	r4,168(sp)
    5330:	20c00044 	addi	r3,r4,1
    5334:	003e0f06 	br	4b74 <__alt_exception_stack_pointer+0xf8004b74>
    5338:	01400184 	movi	r5,6
    533c:	d9402a15 	stw	r5,168(sp)
    5340:	003dff06 	br	4b40 <__alt_exception_stack_pointer+0xf8004b40>
    5344:	d8802104 	addi	r2,sp,132
    5348:	d8800315 	stw	r2,12(sp)
    534c:	d8802504 	addi	r2,sp,148
    5350:	d8800215 	stw	r2,8(sp)
    5354:	d8802604 	addi	r2,sp,152
    5358:	d8800115 	stw	r2,4(sp)
    535c:	d8802a17 	ldw	r2,168(sp)
    5360:	d9403617 	ldw	r5,216(sp)
    5364:	d9002d17 	ldw	r4,180(sp)
    5368:	d8800015 	stw	r2,0(sp)
    536c:	01c000c4 	movi	r7,3
    5370:	980d883a 	mov	r6,r19
    5374:	da003d15 	stw	r8,244(sp)
    5378:	0005af00 	call	5af0 <_dtoa_r>
    537c:	d8c02a17 	ldw	r3,168(sp)
    5380:	da003d17 	ldw	r8,244(sp)
    5384:	1021883a 	mov	r16,r2
    5388:	10f9883a 	add	fp,r2,r3
    538c:	81000007 	ldb	r4,0(r16)
    5390:	00800c04 	movi	r2,48
    5394:	20805e26 	beq	r4,r2,5510 <___vfprintf_internal_r+0x2150>
    5398:	d8c02617 	ldw	r3,152(sp)
    539c:	e0f9883a 	add	fp,fp,r3
    53a0:	003e0a06 	br	4bcc <__alt_exception_stack_pointer+0xf8004bcc>
    53a4:	00c00b44 	movi	r3,45
    53a8:	24e0003c 	xorhi	r19,r4,32768
    53ac:	d8c02905 	stb	r3,164(sp)
    53b0:	003de906 	br	4b58 <__alt_exception_stack_pointer+0xf8004b58>
    53b4:	d8c03217 	ldw	r3,200(sp)
    53b8:	00c07a0e 	bge	zero,r3,55a4 <___vfprintf_internal_r+0x21e4>
    53bc:	00800044 	movi	r2,1
    53c0:	d9003317 	ldw	r4,204(sp)
    53c4:	1105883a 	add	r2,r2,r4
    53c8:	d8802b15 	stw	r2,172(sp)
    53cc:	10004e16 	blt	r2,zero,5508 <___vfprintf_internal_r+0x2148>
    53d0:	044019c4 	movi	r17,103
    53d4:	003e2106 	br	4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    53d8:	d9002a17 	ldw	r4,168(sp)
    53dc:	d8802104 	addi	r2,sp,132
    53e0:	d8800315 	stw	r2,12(sp)
    53e4:	d9000015 	stw	r4,0(sp)
    53e8:	d8802504 	addi	r2,sp,148
    53ec:	d9403617 	ldw	r5,216(sp)
    53f0:	d9002d17 	ldw	r4,180(sp)
    53f4:	d8800215 	stw	r2,8(sp)
    53f8:	d8802604 	addi	r2,sp,152
    53fc:	d8800115 	stw	r2,4(sp)
    5400:	01c000c4 	movi	r7,3
    5404:	980d883a 	mov	r6,r19
    5408:	da003d15 	stw	r8,244(sp)
    540c:	0005af00 	call	5af0 <_dtoa_r>
    5410:	d8c02a17 	ldw	r3,168(sp)
    5414:	da003d17 	ldw	r8,244(sp)
    5418:	1021883a 	mov	r16,r2
    541c:	00801184 	movi	r2,70
    5420:	80f9883a 	add	fp,r16,r3
    5424:	88bfd926 	beq	r17,r2,538c <__alt_exception_stack_pointer+0xf800538c>
    5428:	003de806 	br	4bcc <__alt_exception_stack_pointer+0xf8004bcc>
    542c:	d9002a17 	ldw	r4,168(sp)
    5430:	00c04d0e 	bge	zero,r3,5568 <___vfprintf_internal_r+0x21a8>
    5434:	2000441e 	bne	r4,zero,5548 <___vfprintf_internal_r+0x2188>
    5438:	9480004c 	andi	r18,r18,1
    543c:	9000421e 	bne	r18,zero,5548 <___vfprintf_internal_r+0x2188>
    5440:	1805883a 	mov	r2,r3
    5444:	18006f16 	blt	r3,zero,5604 <___vfprintf_internal_r+0x2244>
    5448:	d8c03217 	ldw	r3,200(sp)
    544c:	d8c02b15 	stw	r3,172(sp)
    5450:	003e0206 	br	4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    5454:	df0022c4 	addi	fp,sp,139
    5458:	dc002a15 	stw	r16,168(sp)
    545c:	4027883a 	mov	r19,r8
    5460:	e021883a 	mov	r16,fp
    5464:	b009883a 	mov	r4,r22
    5468:	01400284 	movi	r5,10
    546c:	000cecc0 	call	cecc <__modsi3>
    5470:	10800c04 	addi	r2,r2,48
    5474:	843fffc4 	addi	r16,r16,-1
    5478:	b009883a 	mov	r4,r22
    547c:	01400284 	movi	r5,10
    5480:	80800005 	stb	r2,0(r16)
    5484:	000ce480 	call	ce48 <__divsi3>
    5488:	102d883a 	mov	r22,r2
    548c:	00800244 	movi	r2,9
    5490:	15bff416 	blt	r2,r22,5464 <__alt_exception_stack_pointer+0xf8005464>
    5494:	9811883a 	mov	r8,r19
    5498:	b0800c04 	addi	r2,r22,48
    549c:	8027883a 	mov	r19,r16
    54a0:	997fffc4 	addi	r5,r19,-1
    54a4:	98bfffc5 	stb	r2,-1(r19)
    54a8:	dc002a17 	ldw	r16,168(sp)
    54ac:	2f006d2e 	bgeu	r5,fp,5664 <___vfprintf_internal_r+0x22a4>
    54b0:	d9c02384 	addi	r7,sp,142
    54b4:	3ccfc83a 	sub	r7,r7,r19
    54b8:	d9002344 	addi	r4,sp,141
    54bc:	e1cf883a 	add	r7,fp,r7
    54c0:	00000106 	br	54c8 <___vfprintf_internal_r+0x2108>
    54c4:	28800003 	ldbu	r2,0(r5)
    54c8:	20800005 	stb	r2,0(r4)
    54cc:	21000044 	addi	r4,r4,1
    54d0:	29400044 	addi	r5,r5,1
    54d4:	393ffb1e 	bne	r7,r4,54c4 <__alt_exception_stack_pointer+0xf80054c4>
    54d8:	d8802304 	addi	r2,sp,140
    54dc:	14c5c83a 	sub	r2,r2,r19
    54e0:	d8c02344 	addi	r3,sp,141
    54e4:	1885883a 	add	r2,r3,r2
    54e8:	003f7006 	br	52ac <__alt_exception_stack_pointer+0xf80052ac>
    54ec:	0005883a 	mov	r2,zero
    54f0:	003f0f06 	br	5130 <__alt_exception_stack_pointer+0xf8005130>
    54f4:	d8c03217 	ldw	r3,200(sp)
    54f8:	18c00044 	addi	r3,r3,1
    54fc:	d8c02b15 	stw	r3,172(sp)
    5500:	1805883a 	mov	r2,r3
    5504:	183fb20e 	bge	r3,zero,53d0 <__alt_exception_stack_pointer+0xf80053d0>
    5508:	0005883a 	mov	r2,zero
    550c:	003fb006 	br	53d0 <__alt_exception_stack_pointer+0xf80053d0>
    5510:	d9003617 	ldw	r4,216(sp)
    5514:	000d883a 	mov	r6,zero
    5518:	000f883a 	mov	r7,zero
    551c:	980b883a 	mov	r5,r19
    5520:	d8c03c15 	stw	r3,240(sp)
    5524:	da003d15 	stw	r8,244(sp)
    5528:	000e2a00 	call	e2a0 <__eqdf2>
    552c:	d8c03c17 	ldw	r3,240(sp)
    5530:	da003d17 	ldw	r8,244(sp)
    5534:	103f9826 	beq	r2,zero,5398 <__alt_exception_stack_pointer+0xf8005398>
    5538:	00800044 	movi	r2,1
    553c:	10c7c83a 	sub	r3,r2,r3
    5540:	d8c02615 	stw	r3,152(sp)
    5544:	003f9506 	br	539c <__alt_exception_stack_pointer+0xf800539c>
    5548:	d9002a17 	ldw	r4,168(sp)
    554c:	d8c03217 	ldw	r3,200(sp)
    5550:	20800044 	addi	r2,r4,1
    5554:	1885883a 	add	r2,r3,r2
    5558:	d8802b15 	stw	r2,172(sp)
    555c:	103dbf0e 	bge	r2,zero,4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    5560:	0005883a 	mov	r2,zero
    5564:	003dbd06 	br	4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    5568:	2000201e 	bne	r4,zero,55ec <___vfprintf_internal_r+0x222c>
    556c:	9480004c 	andi	r18,r18,1
    5570:	90001e1e 	bne	r18,zero,55ec <___vfprintf_internal_r+0x222c>
    5574:	00800044 	movi	r2,1
    5578:	d8802b15 	stw	r2,172(sp)
    557c:	003db706 	br	4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    5580:	00800b44 	movi	r2,45
    5584:	05adc83a 	sub	r22,zero,r22
    5588:	d8802305 	stb	r2,140(sp)
    558c:	003f3f06 	br	528c <__alt_exception_stack_pointer+0xf800528c>
    5590:	0005883a 	mov	r2,zero
    5594:	003f5206 	br	52e0 <__alt_exception_stack_pointer+0xf80052e0>
    5598:	90a4703a 	and	r18,r18,r2
    559c:	903f4e26 	beq	r18,zero,52d8 <__alt_exception_stack_pointer+0xf80052d8>
    55a0:	003f4a06 	br	52cc <__alt_exception_stack_pointer+0xf80052cc>
    55a4:	00800084 	movi	r2,2
    55a8:	10c5c83a 	sub	r2,r2,r3
    55ac:	003f8406 	br	53c0 <__alt_exception_stack_pointer+0xf80053c0>
    55b0:	d9402e17 	ldw	r5,184(sp)
    55b4:	d9002e17 	ldw	r4,184(sp)
    55b8:	ac400043 	ldbu	r17,1(r21)
    55bc:	29400017 	ldw	r5,0(r5)
    55c0:	20800104 	addi	r2,r4,4
    55c4:	d8802e15 	stw	r2,184(sp)
    55c8:	d9402a15 	stw	r5,168(sp)
    55cc:	182b883a 	mov	r21,r3
    55d0:	283e7b0e 	bge	r5,zero,4fc0 <__alt_exception_stack_pointer+0xf8004fc0>
    55d4:	8c403fcc 	andi	r17,r17,255
    55d8:	017fffc4 	movi	r5,-1
    55dc:	8c40201c 	xori	r17,r17,128
    55e0:	d9402a15 	stw	r5,168(sp)
    55e4:	8c7fe004 	addi	r17,r17,-128
    55e8:	0037d706 	br	3548 <__alt_exception_stack_pointer+0xf8003548>
    55ec:	d8c02a17 	ldw	r3,168(sp)
    55f0:	18c00084 	addi	r3,r3,2
    55f4:	d8c02b15 	stw	r3,172(sp)
    55f8:	1805883a 	mov	r2,r3
    55fc:	183d970e 	bge	r3,zero,4c5c <__alt_exception_stack_pointer+0xf8004c5c>
    5600:	003fd706 	br	5560 <__alt_exception_stack_pointer+0xf8005560>
    5604:	0005883a 	mov	r2,zero
    5608:	003f8f06 	br	5448 <__alt_exception_stack_pointer+0xf8005448>
    560c:	9080004c 	andi	r2,r18,1
    5610:	103f821e 	bne	r2,zero,541c <__alt_exception_stack_pointer+0xf800541c>
    5614:	d8802117 	ldw	r2,132(sp)
    5618:	1405c83a 	sub	r2,r2,r16
    561c:	d8803315 	stw	r2,204(sp)
    5620:	b47ef426 	beq	r22,r17,51f4 <__alt_exception_stack_pointer+0xf80051f4>
    5624:	dd802617 	ldw	r22,152(sp)
    5628:	003f1206 	br	5274 <__alt_exception_stack_pointer+0xf8005274>
    562c:	d8c02b03 	ldbu	r3,172(sp)
    5630:	d8c02785 	stb	r3,158(sp)
    5634:	0038df06 	br	39b4 <__alt_exception_stack_pointer+0xf80039b4>
    5638:	d8c02b03 	ldbu	r3,172(sp)
    563c:	d8c02785 	stb	r3,158(sp)
    5640:	0038aa06 	br	38ec <__alt_exception_stack_pointer+0xf80038ec>
    5644:	d8c02b03 	ldbu	r3,172(sp)
    5648:	d8c02785 	stb	r3,158(sp)
    564c:	003a4306 	br	3f5c <__alt_exception_stack_pointer+0xf8003f5c>
    5650:	d8c02b03 	ldbu	r3,172(sp)
    5654:	d8c02785 	stb	r3,158(sp)
    5658:	003af506 	br	4230 <__alt_exception_stack_pointer+0xf8004230>
    565c:	0005883a 	mov	r2,zero
    5660:	003d7b06 	br	4c50 <__alt_exception_stack_pointer+0xf8004c50>
    5664:	d8802344 	addi	r2,sp,141
    5668:	003f1006 	br	52ac <__alt_exception_stack_pointer+0xf80052ac>
    566c:	d8c02b03 	ldbu	r3,172(sp)
    5670:	d8c02785 	stb	r3,158(sp)
    5674:	0038fd06 	br	3a6c <__alt_exception_stack_pointer+0xf8003a6c>
    5678:	d8c02b03 	ldbu	r3,172(sp)
    567c:	d8c02785 	stb	r3,158(sp)
    5680:	003a9706 	br	40e0 <__alt_exception_stack_pointer+0xf80040e0>
    5684:	d8c02b03 	ldbu	r3,172(sp)
    5688:	d8c02785 	stb	r3,158(sp)
    568c:	003a1806 	br	3ef0 <__alt_exception_stack_pointer+0xf8003ef0>
    5690:	d8c02b03 	ldbu	r3,172(sp)
    5694:	d8c02785 	stb	r3,158(sp)
    5698:	003abe06 	br	4194 <__alt_exception_stack_pointer+0xf8004194>

0000569c <__vfprintf_internal>:
    569c:	00800074 	movhi	r2,1
    56a0:	10930404 	addi	r2,r2,19472
    56a4:	300f883a 	mov	r7,r6
    56a8:	280d883a 	mov	r6,r5
    56ac:	200b883a 	mov	r5,r4
    56b0:	11000017 	ldw	r4,0(r2)
    56b4:	00033c01 	jmpi	33c0 <___vfprintf_internal_r>

000056b8 <__sbprintf>:
    56b8:	2880030b 	ldhu	r2,12(r5)
    56bc:	2ac01917 	ldw	r11,100(r5)
    56c0:	2a80038b 	ldhu	r10,14(r5)
    56c4:	2a400717 	ldw	r9,28(r5)
    56c8:	2a000917 	ldw	r8,36(r5)
    56cc:	defee204 	addi	sp,sp,-1144
    56d0:	00c10004 	movi	r3,1024
    56d4:	dc011a15 	stw	r16,1128(sp)
    56d8:	10bfff4c 	andi	r2,r2,65533
    56dc:	2821883a 	mov	r16,r5
    56e0:	d8cb883a 	add	r5,sp,r3
    56e4:	dc811c15 	stw	r18,1136(sp)
    56e8:	dc411b15 	stw	r17,1132(sp)
    56ec:	dfc11d15 	stw	ra,1140(sp)
    56f0:	2025883a 	mov	r18,r4
    56f4:	d881030d 	sth	r2,1036(sp)
    56f8:	dac11915 	stw	r11,1124(sp)
    56fc:	da81038d 	sth	r10,1038(sp)
    5700:	da410715 	stw	r9,1052(sp)
    5704:	da010915 	stw	r8,1060(sp)
    5708:	dec10015 	stw	sp,1024(sp)
    570c:	dec10415 	stw	sp,1040(sp)
    5710:	d8c10215 	stw	r3,1032(sp)
    5714:	d8c10515 	stw	r3,1044(sp)
    5718:	d8010615 	stw	zero,1048(sp)
    571c:	00033c00 	call	33c0 <___vfprintf_internal_r>
    5720:	1023883a 	mov	r17,r2
    5724:	10000416 	blt	r2,zero,5738 <__sbprintf+0x80>
    5728:	d9410004 	addi	r5,sp,1024
    572c:	9009883a 	mov	r4,r18
    5730:	00073940 	call	7394 <_fflush_r>
    5734:	10000d1e 	bne	r2,zero,576c <__sbprintf+0xb4>
    5738:	d881030b 	ldhu	r2,1036(sp)
    573c:	1080100c 	andi	r2,r2,64
    5740:	10000326 	beq	r2,zero,5750 <__sbprintf+0x98>
    5744:	8080030b 	ldhu	r2,12(r16)
    5748:	10801014 	ori	r2,r2,64
    574c:	8080030d 	sth	r2,12(r16)
    5750:	8805883a 	mov	r2,r17
    5754:	dfc11d17 	ldw	ra,1140(sp)
    5758:	dc811c17 	ldw	r18,1136(sp)
    575c:	dc411b17 	ldw	r17,1132(sp)
    5760:	dc011a17 	ldw	r16,1128(sp)
    5764:	dec11e04 	addi	sp,sp,1144
    5768:	f800283a 	ret
    576c:	047fffc4 	movi	r17,-1
    5770:	003ff106 	br	5738 <__alt_exception_stack_pointer+0xf8005738>

00005774 <__swsetup_r>:
    5774:	00800074 	movhi	r2,1
    5778:	defffd04 	addi	sp,sp,-12
    577c:	10930404 	addi	r2,r2,19472
    5780:	dc400115 	stw	r17,4(sp)
    5784:	2023883a 	mov	r17,r4
    5788:	11000017 	ldw	r4,0(r2)
    578c:	dc000015 	stw	r16,0(sp)
    5790:	dfc00215 	stw	ra,8(sp)
    5794:	2821883a 	mov	r16,r5
    5798:	20000226 	beq	r4,zero,57a4 <__swsetup_r+0x30>
    579c:	20800e17 	ldw	r2,56(r4)
    57a0:	10003126 	beq	r2,zero,5868 <__swsetup_r+0xf4>
    57a4:	8080030b 	ldhu	r2,12(r16)
    57a8:	10c0020c 	andi	r3,r2,8
    57ac:	1009883a 	mov	r4,r2
    57b0:	18000f26 	beq	r3,zero,57f0 <__swsetup_r+0x7c>
    57b4:	80c00417 	ldw	r3,16(r16)
    57b8:	18001526 	beq	r3,zero,5810 <__swsetup_r+0x9c>
    57bc:	1100004c 	andi	r4,r2,1
    57c0:	20001c1e 	bne	r4,zero,5834 <__swsetup_r+0xc0>
    57c4:	1080008c 	andi	r2,r2,2
    57c8:	1000291e 	bne	r2,zero,5870 <__swsetup_r+0xfc>
    57cc:	80800517 	ldw	r2,20(r16)
    57d0:	80800215 	stw	r2,8(r16)
    57d4:	18001c26 	beq	r3,zero,5848 <__swsetup_r+0xd4>
    57d8:	0005883a 	mov	r2,zero
    57dc:	dfc00217 	ldw	ra,8(sp)
    57e0:	dc400117 	ldw	r17,4(sp)
    57e4:	dc000017 	ldw	r16,0(sp)
    57e8:	dec00304 	addi	sp,sp,12
    57ec:	f800283a 	ret
    57f0:	2080040c 	andi	r2,r4,16
    57f4:	10002e26 	beq	r2,zero,58b0 <__swsetup_r+0x13c>
    57f8:	2080010c 	andi	r2,r4,4
    57fc:	10001e1e 	bne	r2,zero,5878 <__swsetup_r+0x104>
    5800:	80c00417 	ldw	r3,16(r16)
    5804:	20800214 	ori	r2,r4,8
    5808:	8080030d 	sth	r2,12(r16)
    580c:	183feb1e 	bne	r3,zero,57bc <__alt_exception_stack_pointer+0xf80057bc>
    5810:	1100a00c 	andi	r4,r2,640
    5814:	01408004 	movi	r5,512
    5818:	217fe826 	beq	r4,r5,57bc <__alt_exception_stack_pointer+0xf80057bc>
    581c:	800b883a 	mov	r5,r16
    5820:	8809883a 	mov	r4,r17
    5824:	00083300 	call	8330 <__smakebuf_r>
    5828:	8080030b 	ldhu	r2,12(r16)
    582c:	80c00417 	ldw	r3,16(r16)
    5830:	003fe206 	br	57bc <__alt_exception_stack_pointer+0xf80057bc>
    5834:	80800517 	ldw	r2,20(r16)
    5838:	80000215 	stw	zero,8(r16)
    583c:	0085c83a 	sub	r2,zero,r2
    5840:	80800615 	stw	r2,24(r16)
    5844:	183fe41e 	bne	r3,zero,57d8 <__alt_exception_stack_pointer+0xf80057d8>
    5848:	80c0030b 	ldhu	r3,12(r16)
    584c:	0005883a 	mov	r2,zero
    5850:	1900200c 	andi	r4,r3,128
    5854:	203fe126 	beq	r4,zero,57dc <__alt_exception_stack_pointer+0xf80057dc>
    5858:	18c01014 	ori	r3,r3,64
    585c:	80c0030d 	sth	r3,12(r16)
    5860:	00bfffc4 	movi	r2,-1
    5864:	003fdd06 	br	57dc <__alt_exception_stack_pointer+0xf80057dc>
    5868:	00077800 	call	7780 <__sinit>
    586c:	003fcd06 	br	57a4 <__alt_exception_stack_pointer+0xf80057a4>
    5870:	0005883a 	mov	r2,zero
    5874:	003fd606 	br	57d0 <__alt_exception_stack_pointer+0xf80057d0>
    5878:	81400c17 	ldw	r5,48(r16)
    587c:	28000626 	beq	r5,zero,5898 <__swsetup_r+0x124>
    5880:	80801004 	addi	r2,r16,64
    5884:	28800326 	beq	r5,r2,5894 <__swsetup_r+0x120>
    5888:	8809883a 	mov	r4,r17
    588c:	00078f40 	call	78f4 <_free_r>
    5890:	8100030b 	ldhu	r4,12(r16)
    5894:	80000c15 	stw	zero,48(r16)
    5898:	80c00417 	ldw	r3,16(r16)
    589c:	00bff6c4 	movi	r2,-37
    58a0:	1108703a 	and	r4,r2,r4
    58a4:	80000115 	stw	zero,4(r16)
    58a8:	80c00015 	stw	r3,0(r16)
    58ac:	003fd506 	br	5804 <__alt_exception_stack_pointer+0xf8005804>
    58b0:	00800244 	movi	r2,9
    58b4:	88800015 	stw	r2,0(r17)
    58b8:	20801014 	ori	r2,r4,64
    58bc:	8080030d 	sth	r2,12(r16)
    58c0:	00bfffc4 	movi	r2,-1
    58c4:	003fc506 	br	57dc <__alt_exception_stack_pointer+0xf80057dc>

000058c8 <quorem>:
    58c8:	defff204 	addi	sp,sp,-56
    58cc:	ddc00b15 	stw	r23,44(sp)
    58d0:	20800417 	ldw	r2,16(r4)
    58d4:	2dc00417 	ldw	r23,16(r5)
    58d8:	dfc00d15 	stw	ra,52(sp)
    58dc:	df000c15 	stw	fp,48(sp)
    58e0:	dd800a15 	stw	r22,40(sp)
    58e4:	dd400915 	stw	r21,36(sp)
    58e8:	dd000815 	stw	r20,32(sp)
    58ec:	dcc00715 	stw	r19,28(sp)
    58f0:	dc800615 	stw	r18,24(sp)
    58f4:	dc400515 	stw	r17,20(sp)
    58f8:	dc000415 	stw	r16,16(sp)
    58fc:	15c07a16 	blt	r2,r23,5ae8 <quorem+0x220>
    5900:	bdffffc4 	addi	r23,r23,-1
    5904:	bde9883a 	add	r20,r23,r23
    5908:	28c00504 	addi	r3,r5,20
    590c:	a529883a 	add	r20,r20,r20
    5910:	1d39883a 	add	fp,r3,r20
    5914:	24c00504 	addi	r19,r4,20
    5918:	d9400215 	stw	r5,8(sp)
    591c:	9d29883a 	add	r20,r19,r20
    5920:	e1400017 	ldw	r5,0(fp)
    5924:	d9000015 	stw	r4,0(sp)
    5928:	a1000017 	ldw	r4,0(r20)
    592c:	29400044 	addi	r5,r5,1
    5930:	d8c00115 	stw	r3,4(sp)
    5934:	dd000315 	stw	r20,12(sp)
    5938:	000cf400 	call	cf40 <__udivsi3>
    593c:	1025883a 	mov	r18,r2
    5940:	10003026 	beq	r2,zero,5a04 <quorem+0x13c>
    5944:	dc400117 	ldw	r17,4(sp)
    5948:	9829883a 	mov	r20,r19
    594c:	002d883a 	mov	r22,zero
    5950:	0021883a 	mov	r16,zero
    5954:	8d400017 	ldw	r21,0(r17)
    5958:	900b883a 	mov	r5,r18
    595c:	8c400104 	addi	r17,r17,4
    5960:	a93fffcc 	andi	r4,r21,65535
    5964:	000cffc0 	call	cffc <__mulsi3>
    5968:	a808d43a 	srli	r4,r21,16
    596c:	900b883a 	mov	r5,r18
    5970:	15ad883a 	add	r22,r2,r22
    5974:	000cffc0 	call	cffc <__mulsi3>
    5978:	a1000017 	ldw	r4,0(r20)
    597c:	b00cd43a 	srli	r6,r22,16
    5980:	b0ffffcc 	andi	r3,r22,65535
    5984:	217fffcc 	andi	r5,r4,65535
    5988:	2c21883a 	add	r16,r5,r16
    598c:	80c7c83a 	sub	r3,r16,r3
    5990:	2008d43a 	srli	r4,r4,16
    5994:	1185883a 	add	r2,r2,r6
    5998:	1821d43a 	srai	r16,r3,16
    599c:	117fffcc 	andi	r5,r2,65535
    59a0:	2149c83a 	sub	r4,r4,r5
    59a4:	2421883a 	add	r16,r4,r16
    59a8:	8008943a 	slli	r4,r16,16
    59ac:	18ffffcc 	andi	r3,r3,65535
    59b0:	102cd43a 	srli	r22,r2,16
    59b4:	20c8b03a 	or	r4,r4,r3
    59b8:	a1000015 	stw	r4,0(r20)
    59bc:	8021d43a 	srai	r16,r16,16
    59c0:	a5000104 	addi	r20,r20,4
    59c4:	e47fe32e 	bgeu	fp,r17,5954 <__alt_exception_stack_pointer+0xf8005954>
    59c8:	d8c00317 	ldw	r3,12(sp)
    59cc:	18800017 	ldw	r2,0(r3)
    59d0:	10000c1e 	bne	r2,zero,5a04 <quorem+0x13c>
    59d4:	18bfff04 	addi	r2,r3,-4
    59d8:	9880082e 	bgeu	r19,r2,59fc <quorem+0x134>
    59dc:	18ffff17 	ldw	r3,-4(r3)
    59e0:	18000326 	beq	r3,zero,59f0 <quorem+0x128>
    59e4:	00000506 	br	59fc <quorem+0x134>
    59e8:	10c00017 	ldw	r3,0(r2)
    59ec:	1800031e 	bne	r3,zero,59fc <quorem+0x134>
    59f0:	10bfff04 	addi	r2,r2,-4
    59f4:	bdffffc4 	addi	r23,r23,-1
    59f8:	98bffb36 	bltu	r19,r2,59e8 <__alt_exception_stack_pointer+0xf80059e8>
    59fc:	d8c00017 	ldw	r3,0(sp)
    5a00:	1dc00415 	stw	r23,16(r3)
    5a04:	d9400217 	ldw	r5,8(sp)
    5a08:	d9000017 	ldw	r4,0(sp)
    5a0c:	00093200 	call	9320 <__mcmp>
    5a10:	10002816 	blt	r2,zero,5ab4 <quorem+0x1ec>
    5a14:	dc400117 	ldw	r17,4(sp)
    5a18:	94800044 	addi	r18,r18,1
    5a1c:	980d883a 	mov	r6,r19
    5a20:	0007883a 	mov	r3,zero
    5a24:	31000017 	ldw	r4,0(r6)
    5a28:	89400017 	ldw	r5,0(r17)
    5a2c:	31800104 	addi	r6,r6,4
    5a30:	20bfffcc 	andi	r2,r4,65535
    5a34:	10c7883a 	add	r3,r2,r3
    5a38:	28bfffcc 	andi	r2,r5,65535
    5a3c:	1885c83a 	sub	r2,r3,r2
    5a40:	280ad43a 	srli	r5,r5,16
    5a44:	2008d43a 	srli	r4,r4,16
    5a48:	1007d43a 	srai	r3,r2,16
    5a4c:	10bfffcc 	andi	r2,r2,65535
    5a50:	2149c83a 	sub	r4,r4,r5
    5a54:	20c9883a 	add	r4,r4,r3
    5a58:	200a943a 	slli	r5,r4,16
    5a5c:	8c400104 	addi	r17,r17,4
    5a60:	2007d43a 	srai	r3,r4,16
    5a64:	2884b03a 	or	r2,r5,r2
    5a68:	30bfff15 	stw	r2,-4(r6)
    5a6c:	e47fed2e 	bgeu	fp,r17,5a24 <__alt_exception_stack_pointer+0xf8005a24>
    5a70:	bdc5883a 	add	r2,r23,r23
    5a74:	1085883a 	add	r2,r2,r2
    5a78:	9887883a 	add	r3,r19,r2
    5a7c:	18800017 	ldw	r2,0(r3)
    5a80:	10000c1e 	bne	r2,zero,5ab4 <quorem+0x1ec>
    5a84:	18bfff04 	addi	r2,r3,-4
    5a88:	9880082e 	bgeu	r19,r2,5aac <quorem+0x1e4>
    5a8c:	18ffff17 	ldw	r3,-4(r3)
    5a90:	18000326 	beq	r3,zero,5aa0 <quorem+0x1d8>
    5a94:	00000506 	br	5aac <quorem+0x1e4>
    5a98:	10c00017 	ldw	r3,0(r2)
    5a9c:	1800031e 	bne	r3,zero,5aac <quorem+0x1e4>
    5aa0:	10bfff04 	addi	r2,r2,-4
    5aa4:	bdffffc4 	addi	r23,r23,-1
    5aa8:	98bffb36 	bltu	r19,r2,5a98 <__alt_exception_stack_pointer+0xf8005a98>
    5aac:	d8c00017 	ldw	r3,0(sp)
    5ab0:	1dc00415 	stw	r23,16(r3)
    5ab4:	9005883a 	mov	r2,r18
    5ab8:	dfc00d17 	ldw	ra,52(sp)
    5abc:	df000c17 	ldw	fp,48(sp)
    5ac0:	ddc00b17 	ldw	r23,44(sp)
    5ac4:	dd800a17 	ldw	r22,40(sp)
    5ac8:	dd400917 	ldw	r21,36(sp)
    5acc:	dd000817 	ldw	r20,32(sp)
    5ad0:	dcc00717 	ldw	r19,28(sp)
    5ad4:	dc800617 	ldw	r18,24(sp)
    5ad8:	dc400517 	ldw	r17,20(sp)
    5adc:	dc000417 	ldw	r16,16(sp)
    5ae0:	dec00e04 	addi	sp,sp,56
    5ae4:	f800283a 	ret
    5ae8:	0005883a 	mov	r2,zero
    5aec:	003ff206 	br	5ab8 <__alt_exception_stack_pointer+0xf8005ab8>

00005af0 <_dtoa_r>:
    5af0:	20801017 	ldw	r2,64(r4)
    5af4:	deffde04 	addi	sp,sp,-136
    5af8:	df002015 	stw	fp,128(sp)
    5afc:	dcc01b15 	stw	r19,108(sp)
    5b00:	dc801a15 	stw	r18,104(sp)
    5b04:	dc401915 	stw	r17,100(sp)
    5b08:	dc001815 	stw	r16,96(sp)
    5b0c:	dfc02115 	stw	ra,132(sp)
    5b10:	ddc01f15 	stw	r23,124(sp)
    5b14:	dd801e15 	stw	r22,120(sp)
    5b18:	dd401d15 	stw	r21,116(sp)
    5b1c:	dd001c15 	stw	r20,112(sp)
    5b20:	d9c00315 	stw	r7,12(sp)
    5b24:	2039883a 	mov	fp,r4
    5b28:	3023883a 	mov	r17,r6
    5b2c:	2825883a 	mov	r18,r5
    5b30:	dc002417 	ldw	r16,144(sp)
    5b34:	3027883a 	mov	r19,r6
    5b38:	10000826 	beq	r2,zero,5b5c <_dtoa_r+0x6c>
    5b3c:	21801117 	ldw	r6,68(r4)
    5b40:	00c00044 	movi	r3,1
    5b44:	100b883a 	mov	r5,r2
    5b48:	1986983a 	sll	r3,r3,r6
    5b4c:	11800115 	stw	r6,4(r2)
    5b50:	10c00215 	stw	r3,8(r2)
    5b54:	0008a440 	call	8a44 <_Bfree>
    5b58:	e0001015 	stw	zero,64(fp)
    5b5c:	88002e16 	blt	r17,zero,5c18 <_dtoa_r+0x128>
    5b60:	80000015 	stw	zero,0(r16)
    5b64:	889ffc2c 	andhi	r2,r17,32752
    5b68:	00dffc34 	movhi	r3,32752
    5b6c:	10c01c26 	beq	r2,r3,5be0 <_dtoa_r+0xf0>
    5b70:	000d883a 	mov	r6,zero
    5b74:	000f883a 	mov	r7,zero
    5b78:	9009883a 	mov	r4,r18
    5b7c:	980b883a 	mov	r5,r19
    5b80:	000e2a00 	call	e2a0 <__eqdf2>
    5b84:	10002b1e 	bne	r2,zero,5c34 <_dtoa_r+0x144>
    5b88:	d9c02317 	ldw	r7,140(sp)
    5b8c:	00800044 	movi	r2,1
    5b90:	38800015 	stw	r2,0(r7)
    5b94:	d8802517 	ldw	r2,148(sp)
    5b98:	10019e26 	beq	r2,zero,6214 <_dtoa_r+0x724>
    5b9c:	d8c02517 	ldw	r3,148(sp)
    5ba0:	00800074 	movhi	r2,1
    5ba4:	108b7544 	addi	r2,r2,11733
    5ba8:	18800015 	stw	r2,0(r3)
    5bac:	10bfffc4 	addi	r2,r2,-1
    5bb0:	dfc02117 	ldw	ra,132(sp)
    5bb4:	df002017 	ldw	fp,128(sp)
    5bb8:	ddc01f17 	ldw	r23,124(sp)
    5bbc:	dd801e17 	ldw	r22,120(sp)
    5bc0:	dd401d17 	ldw	r21,116(sp)
    5bc4:	dd001c17 	ldw	r20,112(sp)
    5bc8:	dcc01b17 	ldw	r19,108(sp)
    5bcc:	dc801a17 	ldw	r18,104(sp)
    5bd0:	dc401917 	ldw	r17,100(sp)
    5bd4:	dc001817 	ldw	r16,96(sp)
    5bd8:	dec02204 	addi	sp,sp,136
    5bdc:	f800283a 	ret
    5be0:	d8c02317 	ldw	r3,140(sp)
    5be4:	0089c3c4 	movi	r2,9999
    5be8:	18800015 	stw	r2,0(r3)
    5bec:	90017726 	beq	r18,zero,61cc <_dtoa_r+0x6dc>
    5bf0:	00800074 	movhi	r2,1
    5bf4:	108b8104 	addi	r2,r2,11780
    5bf8:	d9002517 	ldw	r4,148(sp)
    5bfc:	203fec26 	beq	r4,zero,5bb0 <__alt_exception_stack_pointer+0xf8005bb0>
    5c00:	10c000c7 	ldb	r3,3(r2)
    5c04:	1801781e 	bne	r3,zero,61e8 <_dtoa_r+0x6f8>
    5c08:	10c000c4 	addi	r3,r2,3
    5c0c:	d9802517 	ldw	r6,148(sp)
    5c10:	30c00015 	stw	r3,0(r6)
    5c14:	003fe606 	br	5bb0 <__alt_exception_stack_pointer+0xf8005bb0>
    5c18:	04e00034 	movhi	r19,32768
    5c1c:	9cffffc4 	addi	r19,r19,-1
    5c20:	00800044 	movi	r2,1
    5c24:	8ce6703a 	and	r19,r17,r19
    5c28:	80800015 	stw	r2,0(r16)
    5c2c:	9823883a 	mov	r17,r19
    5c30:	003fcc06 	br	5b64 <__alt_exception_stack_pointer+0xf8005b64>
    5c34:	d8800204 	addi	r2,sp,8
    5c38:	d8800015 	stw	r2,0(sp)
    5c3c:	d9c00104 	addi	r7,sp,4
    5c40:	900b883a 	mov	r5,r18
    5c44:	980d883a 	mov	r6,r19
    5c48:	e009883a 	mov	r4,fp
    5c4c:	8820d53a 	srli	r16,r17,20
    5c50:	00096ec0 	call	96ec <__d2b>
    5c54:	d8800915 	stw	r2,36(sp)
    5c58:	8001651e 	bne	r16,zero,61f0 <_dtoa_r+0x700>
    5c5c:	dd800217 	ldw	r22,8(sp)
    5c60:	dc000117 	ldw	r16,4(sp)
    5c64:	00800804 	movi	r2,32
    5c68:	b421883a 	add	r16,r22,r16
    5c6c:	80c10c84 	addi	r3,r16,1074
    5c70:	10c2d10e 	bge	r2,r3,67b8 <_dtoa_r+0xcc8>
    5c74:	00801004 	movi	r2,64
    5c78:	81010484 	addi	r4,r16,1042
    5c7c:	10c7c83a 	sub	r3,r2,r3
    5c80:	9108d83a 	srl	r4,r18,r4
    5c84:	88e2983a 	sll	r17,r17,r3
    5c88:	2448b03a 	or	r4,r4,r17
    5c8c:	000f7bc0 	call	f7bc <__floatunsidf>
    5c90:	017f8434 	movhi	r5,65040
    5c94:	01800044 	movi	r6,1
    5c98:	1009883a 	mov	r4,r2
    5c9c:	194b883a 	add	r5,r3,r5
    5ca0:	843fffc4 	addi	r16,r16,-1
    5ca4:	d9801115 	stw	r6,68(sp)
    5ca8:	000d883a 	mov	r6,zero
    5cac:	01cffe34 	movhi	r7,16376
    5cb0:	000ed640 	call	ed64 <__subdf3>
    5cb4:	0198dbf4 	movhi	r6,25455
    5cb8:	01cff4f4 	movhi	r7,16339
    5cbc:	3190d844 	addi	r6,r6,17249
    5cc0:	39e1e9c4 	addi	r7,r7,-30809
    5cc4:	1009883a 	mov	r4,r2
    5cc8:	180b883a 	mov	r5,r3
    5ccc:	000e4f80 	call	e4f8 <__muldf3>
    5cd0:	01a2d874 	movhi	r6,35681
    5cd4:	01cff1f4 	movhi	r7,16327
    5cd8:	31b22cc4 	addi	r6,r6,-14157
    5cdc:	39e28a04 	addi	r7,r7,-30168
    5ce0:	180b883a 	mov	r5,r3
    5ce4:	1009883a 	mov	r4,r2
    5ce8:	000d0240 	call	d024 <__adddf3>
    5cec:	8009883a 	mov	r4,r16
    5cf0:	1029883a 	mov	r20,r2
    5cf4:	1823883a 	mov	r17,r3
    5cf8:	000f6e00 	call	f6e0 <__floatsidf>
    5cfc:	019427f4 	movhi	r6,20639
    5d00:	01cff4f4 	movhi	r7,16339
    5d04:	319e7ec4 	addi	r6,r6,31227
    5d08:	39d104c4 	addi	r7,r7,17427
    5d0c:	1009883a 	mov	r4,r2
    5d10:	180b883a 	mov	r5,r3
    5d14:	000e4f80 	call	e4f8 <__muldf3>
    5d18:	100d883a 	mov	r6,r2
    5d1c:	180f883a 	mov	r7,r3
    5d20:	a009883a 	mov	r4,r20
    5d24:	880b883a 	mov	r5,r17
    5d28:	000d0240 	call	d024 <__adddf3>
    5d2c:	1009883a 	mov	r4,r2
    5d30:	180b883a 	mov	r5,r3
    5d34:	1029883a 	mov	r20,r2
    5d38:	1823883a 	mov	r17,r3
    5d3c:	000f6600 	call	f660 <__fixdfsi>
    5d40:	000d883a 	mov	r6,zero
    5d44:	000f883a 	mov	r7,zero
    5d48:	a009883a 	mov	r4,r20
    5d4c:	880b883a 	mov	r5,r17
    5d50:	d8800515 	stw	r2,20(sp)
    5d54:	000e4040 	call	e404 <__ledf2>
    5d58:	10028716 	blt	r2,zero,6778 <_dtoa_r+0xc88>
    5d5c:	d8c00517 	ldw	r3,20(sp)
    5d60:	00800584 	movi	r2,22
    5d64:	10c27536 	bltu	r2,r3,673c <_dtoa_r+0xc4c>
    5d68:	180490fa 	slli	r2,r3,3
    5d6c:	00c00074 	movhi	r3,1
    5d70:	18cb9c04 	addi	r3,r3,11888
    5d74:	1885883a 	add	r2,r3,r2
    5d78:	11000017 	ldw	r4,0(r2)
    5d7c:	11400117 	ldw	r5,4(r2)
    5d80:	900d883a 	mov	r6,r18
    5d84:	980f883a 	mov	r7,r19
    5d88:	000e3280 	call	e328 <__gedf2>
    5d8c:	00828d0e 	bge	zero,r2,67c4 <_dtoa_r+0xcd4>
    5d90:	d9000517 	ldw	r4,20(sp)
    5d94:	d8000e15 	stw	zero,56(sp)
    5d98:	213fffc4 	addi	r4,r4,-1
    5d9c:	d9000515 	stw	r4,20(sp)
    5da0:	b42dc83a 	sub	r22,r22,r16
    5da4:	b5bfffc4 	addi	r22,r22,-1
    5da8:	b0026f16 	blt	r22,zero,6768 <_dtoa_r+0xc78>
    5dac:	d8000815 	stw	zero,32(sp)
    5db0:	d9c00517 	ldw	r7,20(sp)
    5db4:	38026416 	blt	r7,zero,6748 <_dtoa_r+0xc58>
    5db8:	b1ed883a 	add	r22,r22,r7
    5dbc:	d9c00d15 	stw	r7,52(sp)
    5dc0:	d8000a15 	stw	zero,40(sp)
    5dc4:	d9800317 	ldw	r6,12(sp)
    5dc8:	00800244 	movi	r2,9
    5dcc:	11811436 	bltu	r2,r6,6220 <_dtoa_r+0x730>
    5dd0:	00800144 	movi	r2,5
    5dd4:	1184e10e 	bge	r2,r6,715c <_dtoa_r+0x166c>
    5dd8:	31bfff04 	addi	r6,r6,-4
    5ddc:	d9800315 	stw	r6,12(sp)
    5de0:	0023883a 	mov	r17,zero
    5de4:	d9800317 	ldw	r6,12(sp)
    5de8:	008000c4 	movi	r2,3
    5dec:	30836726 	beq	r6,r2,6b8c <_dtoa_r+0x109c>
    5df0:	1183410e 	bge	r2,r6,6af8 <_dtoa_r+0x1008>
    5df4:	d9c00317 	ldw	r7,12(sp)
    5df8:	00800104 	movi	r2,4
    5dfc:	38827c26 	beq	r7,r2,67f0 <_dtoa_r+0xd00>
    5e00:	00800144 	movi	r2,5
    5e04:	3884c41e 	bne	r7,r2,7118 <_dtoa_r+0x1628>
    5e08:	00800044 	movi	r2,1
    5e0c:	d8800b15 	stw	r2,44(sp)
    5e10:	d8c00517 	ldw	r3,20(sp)
    5e14:	d9002217 	ldw	r4,136(sp)
    5e18:	1907883a 	add	r3,r3,r4
    5e1c:	19800044 	addi	r6,r3,1
    5e20:	d8c00c15 	stw	r3,48(sp)
    5e24:	d9800615 	stw	r6,24(sp)
    5e28:	0183a40e 	bge	zero,r6,6cbc <_dtoa_r+0x11cc>
    5e2c:	d9800617 	ldw	r6,24(sp)
    5e30:	3021883a 	mov	r16,r6
    5e34:	e0001115 	stw	zero,68(fp)
    5e38:	008005c4 	movi	r2,23
    5e3c:	1184c92e 	bgeu	r2,r6,7164 <_dtoa_r+0x1674>
    5e40:	00c00044 	movi	r3,1
    5e44:	00800104 	movi	r2,4
    5e48:	1085883a 	add	r2,r2,r2
    5e4c:	11000504 	addi	r4,r2,20
    5e50:	180b883a 	mov	r5,r3
    5e54:	18c00044 	addi	r3,r3,1
    5e58:	313ffb2e 	bgeu	r6,r4,5e48 <__alt_exception_stack_pointer+0xf8005e48>
    5e5c:	e1401115 	stw	r5,68(fp)
    5e60:	e009883a 	mov	r4,fp
    5e64:	000899c0 	call	899c <_Balloc>
    5e68:	d8800715 	stw	r2,28(sp)
    5e6c:	e0801015 	stw	r2,64(fp)
    5e70:	00800384 	movi	r2,14
    5e74:	1400f736 	bltu	r2,r16,6254 <_dtoa_r+0x764>
    5e78:	8800f626 	beq	r17,zero,6254 <_dtoa_r+0x764>
    5e7c:	d9c00517 	ldw	r7,20(sp)
    5e80:	01c39a0e 	bge	zero,r7,6cec <_dtoa_r+0x11fc>
    5e84:	388003cc 	andi	r2,r7,15
    5e88:	100490fa 	slli	r2,r2,3
    5e8c:	382bd13a 	srai	r21,r7,4
    5e90:	00c00074 	movhi	r3,1
    5e94:	18cb9c04 	addi	r3,r3,11888
    5e98:	1885883a 	add	r2,r3,r2
    5e9c:	a8c0040c 	andi	r3,r21,16
    5ea0:	12400017 	ldw	r9,0(r2)
    5ea4:	12000117 	ldw	r8,4(r2)
    5ea8:	18037926 	beq	r3,zero,6c90 <_dtoa_r+0x11a0>
    5eac:	00800074 	movhi	r2,1
    5eb0:	108b9204 	addi	r2,r2,11848
    5eb4:	11800817 	ldw	r6,32(r2)
    5eb8:	11c00917 	ldw	r7,36(r2)
    5ebc:	9009883a 	mov	r4,r18
    5ec0:	980b883a 	mov	r5,r19
    5ec4:	da001715 	stw	r8,92(sp)
    5ec8:	da401615 	stw	r9,88(sp)
    5ecc:	000d8d00 	call	d8d0 <__divdf3>
    5ed0:	da001717 	ldw	r8,92(sp)
    5ed4:	da401617 	ldw	r9,88(sp)
    5ed8:	ad4003cc 	andi	r21,r21,15
    5edc:	040000c4 	movi	r16,3
    5ee0:	1023883a 	mov	r17,r2
    5ee4:	1829883a 	mov	r20,r3
    5ee8:	a8001126 	beq	r21,zero,5f30 <_dtoa_r+0x440>
    5eec:	05c00074 	movhi	r23,1
    5ef0:	bdcb9204 	addi	r23,r23,11848
    5ef4:	4805883a 	mov	r2,r9
    5ef8:	4007883a 	mov	r3,r8
    5efc:	a980004c 	andi	r6,r21,1
    5f00:	1009883a 	mov	r4,r2
    5f04:	a82bd07a 	srai	r21,r21,1
    5f08:	180b883a 	mov	r5,r3
    5f0c:	30000426 	beq	r6,zero,5f20 <_dtoa_r+0x430>
    5f10:	b9800017 	ldw	r6,0(r23)
    5f14:	b9c00117 	ldw	r7,4(r23)
    5f18:	84000044 	addi	r16,r16,1
    5f1c:	000e4f80 	call	e4f8 <__muldf3>
    5f20:	bdc00204 	addi	r23,r23,8
    5f24:	a83ff51e 	bne	r21,zero,5efc <__alt_exception_stack_pointer+0xf8005efc>
    5f28:	1013883a 	mov	r9,r2
    5f2c:	1811883a 	mov	r8,r3
    5f30:	480d883a 	mov	r6,r9
    5f34:	400f883a 	mov	r7,r8
    5f38:	8809883a 	mov	r4,r17
    5f3c:	a00b883a 	mov	r5,r20
    5f40:	000d8d00 	call	d8d0 <__divdf3>
    5f44:	d8800f15 	stw	r2,60(sp)
    5f48:	d8c01015 	stw	r3,64(sp)
    5f4c:	d8c00e17 	ldw	r3,56(sp)
    5f50:	18000626 	beq	r3,zero,5f6c <_dtoa_r+0x47c>
    5f54:	d9000f17 	ldw	r4,60(sp)
    5f58:	d9401017 	ldw	r5,64(sp)
    5f5c:	000d883a 	mov	r6,zero
    5f60:	01cffc34 	movhi	r7,16368
    5f64:	000e4040 	call	e404 <__ledf2>
    5f68:	10040b16 	blt	r2,zero,6f98 <_dtoa_r+0x14a8>
    5f6c:	8009883a 	mov	r4,r16
    5f70:	000f6e00 	call	f6e0 <__floatsidf>
    5f74:	d9800f17 	ldw	r6,60(sp)
    5f78:	d9c01017 	ldw	r7,64(sp)
    5f7c:	1009883a 	mov	r4,r2
    5f80:	180b883a 	mov	r5,r3
    5f84:	000e4f80 	call	e4f8 <__muldf3>
    5f88:	000d883a 	mov	r6,zero
    5f8c:	01d00734 	movhi	r7,16412
    5f90:	1009883a 	mov	r4,r2
    5f94:	180b883a 	mov	r5,r3
    5f98:	000d0240 	call	d024 <__adddf3>
    5f9c:	1021883a 	mov	r16,r2
    5fa0:	d8800617 	ldw	r2,24(sp)
    5fa4:	047f3034 	movhi	r17,64704
    5fa8:	1c63883a 	add	r17,r3,r17
    5fac:	10031826 	beq	r2,zero,6c10 <_dtoa_r+0x1120>
    5fb0:	d8c00517 	ldw	r3,20(sp)
    5fb4:	db000617 	ldw	r12,24(sp)
    5fb8:	d8c01315 	stw	r3,76(sp)
    5fbc:	d9000b17 	ldw	r4,44(sp)
    5fc0:	20038f26 	beq	r4,zero,6e00 <_dtoa_r+0x1310>
    5fc4:	60bfffc4 	addi	r2,r12,-1
    5fc8:	100490fa 	slli	r2,r2,3
    5fcc:	00c00074 	movhi	r3,1
    5fd0:	18cb9c04 	addi	r3,r3,11888
    5fd4:	1885883a 	add	r2,r3,r2
    5fd8:	11800017 	ldw	r6,0(r2)
    5fdc:	11c00117 	ldw	r7,4(r2)
    5fe0:	d8800717 	ldw	r2,28(sp)
    5fe4:	0009883a 	mov	r4,zero
    5fe8:	014ff834 	movhi	r5,16352
    5fec:	db001615 	stw	r12,88(sp)
    5ff0:	15c00044 	addi	r23,r2,1
    5ff4:	000d8d00 	call	d8d0 <__divdf3>
    5ff8:	800d883a 	mov	r6,r16
    5ffc:	880f883a 	mov	r7,r17
    6000:	1009883a 	mov	r4,r2
    6004:	180b883a 	mov	r5,r3
    6008:	000ed640 	call	ed64 <__subdf3>
    600c:	d9401017 	ldw	r5,64(sp)
    6010:	d9000f17 	ldw	r4,60(sp)
    6014:	102b883a 	mov	r21,r2
    6018:	d8c01215 	stw	r3,72(sp)
    601c:	000f6600 	call	f660 <__fixdfsi>
    6020:	1009883a 	mov	r4,r2
    6024:	1029883a 	mov	r20,r2
    6028:	000f6e00 	call	f6e0 <__floatsidf>
    602c:	d9000f17 	ldw	r4,60(sp)
    6030:	d9401017 	ldw	r5,64(sp)
    6034:	100d883a 	mov	r6,r2
    6038:	180f883a 	mov	r7,r3
    603c:	000ed640 	call	ed64 <__subdf3>
    6040:	1823883a 	mov	r17,r3
    6044:	d8c00717 	ldw	r3,28(sp)
    6048:	d9401217 	ldw	r5,72(sp)
    604c:	a2000c04 	addi	r8,r20,48
    6050:	1021883a 	mov	r16,r2
    6054:	1a000005 	stb	r8,0(r3)
    6058:	800d883a 	mov	r6,r16
    605c:	880f883a 	mov	r7,r17
    6060:	a809883a 	mov	r4,r21
    6064:	4029883a 	mov	r20,r8
    6068:	000e3280 	call	e328 <__gedf2>
    606c:	00841d16 	blt	zero,r2,70e4 <_dtoa_r+0x15f4>
    6070:	800d883a 	mov	r6,r16
    6074:	880f883a 	mov	r7,r17
    6078:	0009883a 	mov	r4,zero
    607c:	014ffc34 	movhi	r5,16368
    6080:	000ed640 	call	ed64 <__subdf3>
    6084:	d9401217 	ldw	r5,72(sp)
    6088:	100d883a 	mov	r6,r2
    608c:	180f883a 	mov	r7,r3
    6090:	a809883a 	mov	r4,r21
    6094:	000e3280 	call	e328 <__gedf2>
    6098:	db001617 	ldw	r12,88(sp)
    609c:	00840e16 	blt	zero,r2,70d8 <_dtoa_r+0x15e8>
    60a0:	00800044 	movi	r2,1
    60a4:	13006b0e 	bge	r2,r12,6254 <_dtoa_r+0x764>
    60a8:	d9000717 	ldw	r4,28(sp)
    60ac:	dd800f15 	stw	r22,60(sp)
    60b0:	dcc01015 	stw	r19,64(sp)
    60b4:	2319883a 	add	r12,r4,r12
    60b8:	dcc01217 	ldw	r19,72(sp)
    60bc:	602d883a 	mov	r22,r12
    60c0:	dc801215 	stw	r18,72(sp)
    60c4:	b825883a 	mov	r18,r23
    60c8:	00000906 	br	60f0 <_dtoa_r+0x600>
    60cc:	000ed640 	call	ed64 <__subdf3>
    60d0:	a80d883a 	mov	r6,r21
    60d4:	980f883a 	mov	r7,r19
    60d8:	1009883a 	mov	r4,r2
    60dc:	180b883a 	mov	r5,r3
    60e0:	000e4040 	call	e404 <__ledf2>
    60e4:	1003e816 	blt	r2,zero,7088 <_dtoa_r+0x1598>
    60e8:	b825883a 	mov	r18,r23
    60ec:	bd83e926 	beq	r23,r22,7094 <_dtoa_r+0x15a4>
    60f0:	a809883a 	mov	r4,r21
    60f4:	980b883a 	mov	r5,r19
    60f8:	000d883a 	mov	r6,zero
    60fc:	01d00934 	movhi	r7,16420
    6100:	000e4f80 	call	e4f8 <__muldf3>
    6104:	000d883a 	mov	r6,zero
    6108:	01d00934 	movhi	r7,16420
    610c:	8009883a 	mov	r4,r16
    6110:	880b883a 	mov	r5,r17
    6114:	102b883a 	mov	r21,r2
    6118:	1827883a 	mov	r19,r3
    611c:	000e4f80 	call	e4f8 <__muldf3>
    6120:	180b883a 	mov	r5,r3
    6124:	1009883a 	mov	r4,r2
    6128:	1821883a 	mov	r16,r3
    612c:	1023883a 	mov	r17,r2
    6130:	000f6600 	call	f660 <__fixdfsi>
    6134:	1009883a 	mov	r4,r2
    6138:	1029883a 	mov	r20,r2
    613c:	000f6e00 	call	f6e0 <__floatsidf>
    6140:	8809883a 	mov	r4,r17
    6144:	800b883a 	mov	r5,r16
    6148:	100d883a 	mov	r6,r2
    614c:	180f883a 	mov	r7,r3
    6150:	000ed640 	call	ed64 <__subdf3>
    6154:	a5000c04 	addi	r20,r20,48
    6158:	a80d883a 	mov	r6,r21
    615c:	980f883a 	mov	r7,r19
    6160:	1009883a 	mov	r4,r2
    6164:	180b883a 	mov	r5,r3
    6168:	95000005 	stb	r20,0(r18)
    616c:	1021883a 	mov	r16,r2
    6170:	1823883a 	mov	r17,r3
    6174:	000e4040 	call	e404 <__ledf2>
    6178:	bdc00044 	addi	r23,r23,1
    617c:	800d883a 	mov	r6,r16
    6180:	880f883a 	mov	r7,r17
    6184:	0009883a 	mov	r4,zero
    6188:	014ffc34 	movhi	r5,16368
    618c:	103fcf0e 	bge	r2,zero,60cc <__alt_exception_stack_pointer+0xf80060cc>
    6190:	d8c01317 	ldw	r3,76(sp)
    6194:	d8c00515 	stw	r3,20(sp)
    6198:	d9400917 	ldw	r5,36(sp)
    619c:	e009883a 	mov	r4,fp
    61a0:	0008a440 	call	8a44 <_Bfree>
    61a4:	d9000517 	ldw	r4,20(sp)
    61a8:	d9802317 	ldw	r6,140(sp)
    61ac:	d9c02517 	ldw	r7,148(sp)
    61b0:	b8000005 	stb	zero,0(r23)
    61b4:	20800044 	addi	r2,r4,1
    61b8:	30800015 	stw	r2,0(r6)
    61bc:	3802aa26 	beq	r7,zero,6c68 <_dtoa_r+0x1178>
    61c0:	3dc00015 	stw	r23,0(r7)
    61c4:	d8800717 	ldw	r2,28(sp)
    61c8:	003e7906 	br	5bb0 <__alt_exception_stack_pointer+0xf8005bb0>
    61cc:	00800434 	movhi	r2,16
    61d0:	10bfffc4 	addi	r2,r2,-1
    61d4:	88a2703a 	and	r17,r17,r2
    61d8:	883e851e 	bne	r17,zero,5bf0 <__alt_exception_stack_pointer+0xf8005bf0>
    61dc:	00800074 	movhi	r2,1
    61e0:	108b7e04 	addi	r2,r2,11768
    61e4:	003e8406 	br	5bf8 <__alt_exception_stack_pointer+0xf8005bf8>
    61e8:	10c00204 	addi	r3,r2,8
    61ec:	003e8706 	br	5c0c <__alt_exception_stack_pointer+0xf8005c0c>
    61f0:	01400434 	movhi	r5,16
    61f4:	297fffc4 	addi	r5,r5,-1
    61f8:	994a703a 	and	r5,r19,r5
    61fc:	9009883a 	mov	r4,r18
    6200:	843f0044 	addi	r16,r16,-1023
    6204:	294ffc34 	orhi	r5,r5,16368
    6208:	dd800217 	ldw	r22,8(sp)
    620c:	d8001115 	stw	zero,68(sp)
    6210:	003ea506 	br	5ca8 <__alt_exception_stack_pointer+0xf8005ca8>
    6214:	00800074 	movhi	r2,1
    6218:	108b7504 	addi	r2,r2,11732
    621c:	003e6406 	br	5bb0 <__alt_exception_stack_pointer+0xf8005bb0>
    6220:	e0001115 	stw	zero,68(fp)
    6224:	000b883a 	mov	r5,zero
    6228:	e009883a 	mov	r4,fp
    622c:	000899c0 	call	899c <_Balloc>
    6230:	01bfffc4 	movi	r6,-1
    6234:	01c00044 	movi	r7,1
    6238:	d8800715 	stw	r2,28(sp)
    623c:	d9800c15 	stw	r6,48(sp)
    6240:	e0801015 	stw	r2,64(fp)
    6244:	d8000315 	stw	zero,12(sp)
    6248:	d9c00b15 	stw	r7,44(sp)
    624c:	d9800615 	stw	r6,24(sp)
    6250:	d8002215 	stw	zero,136(sp)
    6254:	d8800117 	ldw	r2,4(sp)
    6258:	10008916 	blt	r2,zero,6480 <_dtoa_r+0x990>
    625c:	d9000517 	ldw	r4,20(sp)
    6260:	00c00384 	movi	r3,14
    6264:	19008616 	blt	r3,r4,6480 <_dtoa_r+0x990>
    6268:	200490fa 	slli	r2,r4,3
    626c:	00c00074 	movhi	r3,1
    6270:	d9802217 	ldw	r6,136(sp)
    6274:	18cb9c04 	addi	r3,r3,11888
    6278:	1885883a 	add	r2,r3,r2
    627c:	14000017 	ldw	r16,0(r2)
    6280:	14400117 	ldw	r17,4(r2)
    6284:	30016316 	blt	r6,zero,6814 <_dtoa_r+0xd24>
    6288:	800d883a 	mov	r6,r16
    628c:	880f883a 	mov	r7,r17
    6290:	9009883a 	mov	r4,r18
    6294:	980b883a 	mov	r5,r19
    6298:	000d8d00 	call	d8d0 <__divdf3>
    629c:	180b883a 	mov	r5,r3
    62a0:	1009883a 	mov	r4,r2
    62a4:	000f6600 	call	f660 <__fixdfsi>
    62a8:	1009883a 	mov	r4,r2
    62ac:	102b883a 	mov	r21,r2
    62b0:	000f6e00 	call	f6e0 <__floatsidf>
    62b4:	800d883a 	mov	r6,r16
    62b8:	880f883a 	mov	r7,r17
    62bc:	1009883a 	mov	r4,r2
    62c0:	180b883a 	mov	r5,r3
    62c4:	000e4f80 	call	e4f8 <__muldf3>
    62c8:	100d883a 	mov	r6,r2
    62cc:	180f883a 	mov	r7,r3
    62d0:	9009883a 	mov	r4,r18
    62d4:	980b883a 	mov	r5,r19
    62d8:	000ed640 	call	ed64 <__subdf3>
    62dc:	d9c00717 	ldw	r7,28(sp)
    62e0:	1009883a 	mov	r4,r2
    62e4:	a8800c04 	addi	r2,r21,48
    62e8:	38800005 	stb	r2,0(r7)
    62ec:	3dc00044 	addi	r23,r7,1
    62f0:	d9c00617 	ldw	r7,24(sp)
    62f4:	01800044 	movi	r6,1
    62f8:	180b883a 	mov	r5,r3
    62fc:	2005883a 	mov	r2,r4
    6300:	39803826 	beq	r7,r6,63e4 <_dtoa_r+0x8f4>
    6304:	000d883a 	mov	r6,zero
    6308:	01d00934 	movhi	r7,16420
    630c:	000e4f80 	call	e4f8 <__muldf3>
    6310:	000d883a 	mov	r6,zero
    6314:	000f883a 	mov	r7,zero
    6318:	1009883a 	mov	r4,r2
    631c:	180b883a 	mov	r5,r3
    6320:	1025883a 	mov	r18,r2
    6324:	1827883a 	mov	r19,r3
    6328:	000e2a00 	call	e2a0 <__eqdf2>
    632c:	103f9a26 	beq	r2,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6330:	d9c00617 	ldw	r7,24(sp)
    6334:	d8c00717 	ldw	r3,28(sp)
    6338:	b829883a 	mov	r20,r23
    633c:	38bfffc4 	addi	r2,r7,-1
    6340:	18ad883a 	add	r22,r3,r2
    6344:	00000a06 	br	6370 <_dtoa_r+0x880>
    6348:	000e4f80 	call	e4f8 <__muldf3>
    634c:	000d883a 	mov	r6,zero
    6350:	000f883a 	mov	r7,zero
    6354:	1009883a 	mov	r4,r2
    6358:	180b883a 	mov	r5,r3
    635c:	1025883a 	mov	r18,r2
    6360:	1827883a 	mov	r19,r3
    6364:	b829883a 	mov	r20,r23
    6368:	000e2a00 	call	e2a0 <__eqdf2>
    636c:	103f8a26 	beq	r2,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6370:	800d883a 	mov	r6,r16
    6374:	880f883a 	mov	r7,r17
    6378:	9009883a 	mov	r4,r18
    637c:	980b883a 	mov	r5,r19
    6380:	000d8d00 	call	d8d0 <__divdf3>
    6384:	180b883a 	mov	r5,r3
    6388:	1009883a 	mov	r4,r2
    638c:	000f6600 	call	f660 <__fixdfsi>
    6390:	1009883a 	mov	r4,r2
    6394:	102b883a 	mov	r21,r2
    6398:	000f6e00 	call	f6e0 <__floatsidf>
    639c:	800d883a 	mov	r6,r16
    63a0:	880f883a 	mov	r7,r17
    63a4:	1009883a 	mov	r4,r2
    63a8:	180b883a 	mov	r5,r3
    63ac:	000e4f80 	call	e4f8 <__muldf3>
    63b0:	100d883a 	mov	r6,r2
    63b4:	180f883a 	mov	r7,r3
    63b8:	9009883a 	mov	r4,r18
    63bc:	980b883a 	mov	r5,r19
    63c0:	000ed640 	call	ed64 <__subdf3>
    63c4:	aa000c04 	addi	r8,r21,48
    63c8:	a2000005 	stb	r8,0(r20)
    63cc:	000d883a 	mov	r6,zero
    63d0:	01d00934 	movhi	r7,16420
    63d4:	1009883a 	mov	r4,r2
    63d8:	180b883a 	mov	r5,r3
    63dc:	a5c00044 	addi	r23,r20,1
    63e0:	b53fd91e 	bne	r22,r20,6348 <__alt_exception_stack_pointer+0xf8006348>
    63e4:	100d883a 	mov	r6,r2
    63e8:	180f883a 	mov	r7,r3
    63ec:	1009883a 	mov	r4,r2
    63f0:	180b883a 	mov	r5,r3
    63f4:	000d0240 	call	d024 <__adddf3>
    63f8:	100d883a 	mov	r6,r2
    63fc:	180f883a 	mov	r7,r3
    6400:	8009883a 	mov	r4,r16
    6404:	880b883a 	mov	r5,r17
    6408:	1027883a 	mov	r19,r2
    640c:	1825883a 	mov	r18,r3
    6410:	000e4040 	call	e404 <__ledf2>
    6414:	10000816 	blt	r2,zero,6438 <_dtoa_r+0x948>
    6418:	980d883a 	mov	r6,r19
    641c:	900f883a 	mov	r7,r18
    6420:	8009883a 	mov	r4,r16
    6424:	880b883a 	mov	r5,r17
    6428:	000e2a00 	call	e2a0 <__eqdf2>
    642c:	103f5a1e 	bne	r2,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6430:	ad40004c 	andi	r21,r21,1
    6434:	a83f5826 	beq	r21,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6438:	bd3fffc3 	ldbu	r20,-1(r23)
    643c:	b8bfffc4 	addi	r2,r23,-1
    6440:	1007883a 	mov	r3,r2
    6444:	01400e44 	movi	r5,57
    6448:	d9800717 	ldw	r6,28(sp)
    644c:	00000506 	br	6464 <_dtoa_r+0x974>
    6450:	18ffffc4 	addi	r3,r3,-1
    6454:	11824726 	beq	r2,r6,6d74 <_dtoa_r+0x1284>
    6458:	1d000003 	ldbu	r20,0(r3)
    645c:	102f883a 	mov	r23,r2
    6460:	10bfffc4 	addi	r2,r2,-1
    6464:	a1003fcc 	andi	r4,r20,255
    6468:	2100201c 	xori	r4,r4,128
    646c:	213fe004 	addi	r4,r4,-128
    6470:	217ff726 	beq	r4,r5,6450 <__alt_exception_stack_pointer+0xf8006450>
    6474:	a2000044 	addi	r8,r20,1
    6478:	12000005 	stb	r8,0(r2)
    647c:	003f4606 	br	6198 <__alt_exception_stack_pointer+0xf8006198>
    6480:	d9000b17 	ldw	r4,44(sp)
    6484:	2000c826 	beq	r4,zero,67a8 <_dtoa_r+0xcb8>
    6488:	d9800317 	ldw	r6,12(sp)
    648c:	00c00044 	movi	r3,1
    6490:	1980f90e 	bge	r3,r6,6878 <_dtoa_r+0xd88>
    6494:	d8800617 	ldw	r2,24(sp)
    6498:	d8c00a17 	ldw	r3,40(sp)
    649c:	157fffc4 	addi	r21,r2,-1
    64a0:	1d41f316 	blt	r3,r21,6c70 <_dtoa_r+0x1180>
    64a4:	1d6bc83a 	sub	r21,r3,r21
    64a8:	d9c00617 	ldw	r7,24(sp)
    64ac:	3802aa16 	blt	r7,zero,6f58 <_dtoa_r+0x1468>
    64b0:	dd000817 	ldw	r20,32(sp)
    64b4:	d8800617 	ldw	r2,24(sp)
    64b8:	d8c00817 	ldw	r3,32(sp)
    64bc:	01400044 	movi	r5,1
    64c0:	e009883a 	mov	r4,fp
    64c4:	1887883a 	add	r3,r3,r2
    64c8:	d8c00815 	stw	r3,32(sp)
    64cc:	b0ad883a 	add	r22,r22,r2
    64d0:	0008dd00 	call	8dd0 <__i2b>
    64d4:	1023883a 	mov	r17,r2
    64d8:	a0000826 	beq	r20,zero,64fc <_dtoa_r+0xa0c>
    64dc:	0580070e 	bge	zero,r22,64fc <_dtoa_r+0xa0c>
    64e0:	a005883a 	mov	r2,r20
    64e4:	b500b916 	blt	r22,r20,67cc <_dtoa_r+0xcdc>
    64e8:	d9000817 	ldw	r4,32(sp)
    64ec:	a0a9c83a 	sub	r20,r20,r2
    64f0:	b0adc83a 	sub	r22,r22,r2
    64f4:	2089c83a 	sub	r4,r4,r2
    64f8:	d9000815 	stw	r4,32(sp)
    64fc:	d9800a17 	ldw	r6,40(sp)
    6500:	0181810e 	bge	zero,r6,6b08 <_dtoa_r+0x1018>
    6504:	d9c00b17 	ldw	r7,44(sp)
    6508:	3800b326 	beq	r7,zero,67d8 <_dtoa_r+0xce8>
    650c:	a800b226 	beq	r21,zero,67d8 <_dtoa_r+0xce8>
    6510:	880b883a 	mov	r5,r17
    6514:	a80d883a 	mov	r6,r21
    6518:	e009883a 	mov	r4,fp
    651c:	00090980 	call	9098 <__pow5mult>
    6520:	d9800917 	ldw	r6,36(sp)
    6524:	100b883a 	mov	r5,r2
    6528:	e009883a 	mov	r4,fp
    652c:	1023883a 	mov	r17,r2
    6530:	0008e0c0 	call	8e0c <__multiply>
    6534:	1021883a 	mov	r16,r2
    6538:	d8800a17 	ldw	r2,40(sp)
    653c:	d9400917 	ldw	r5,36(sp)
    6540:	e009883a 	mov	r4,fp
    6544:	1545c83a 	sub	r2,r2,r21
    6548:	d8800a15 	stw	r2,40(sp)
    654c:	0008a440 	call	8a44 <_Bfree>
    6550:	d8c00a17 	ldw	r3,40(sp)
    6554:	18009f1e 	bne	r3,zero,67d4 <_dtoa_r+0xce4>
    6558:	05c00044 	movi	r23,1
    655c:	e009883a 	mov	r4,fp
    6560:	b80b883a 	mov	r5,r23
    6564:	0008dd00 	call	8dd0 <__i2b>
    6568:	d9000d17 	ldw	r4,52(sp)
    656c:	102b883a 	mov	r21,r2
    6570:	2000ce26 	beq	r4,zero,68ac <_dtoa_r+0xdbc>
    6574:	200d883a 	mov	r6,r4
    6578:	100b883a 	mov	r5,r2
    657c:	e009883a 	mov	r4,fp
    6580:	00090980 	call	9098 <__pow5mult>
    6584:	d9800317 	ldw	r6,12(sp)
    6588:	102b883a 	mov	r21,r2
    658c:	b981810e 	bge	r23,r6,6b94 <_dtoa_r+0x10a4>
    6590:	0027883a 	mov	r19,zero
    6594:	a8800417 	ldw	r2,16(r21)
    6598:	05c00804 	movi	r23,32
    659c:	10800104 	addi	r2,r2,4
    65a0:	1085883a 	add	r2,r2,r2
    65a4:	1085883a 	add	r2,r2,r2
    65a8:	a885883a 	add	r2,r21,r2
    65ac:	11000017 	ldw	r4,0(r2)
    65b0:	0008cb80 	call	8cb8 <__hi0bits>
    65b4:	b885c83a 	sub	r2,r23,r2
    65b8:	1585883a 	add	r2,r2,r22
    65bc:	108007cc 	andi	r2,r2,31
    65c0:	1000b326 	beq	r2,zero,6890 <_dtoa_r+0xda0>
    65c4:	00c00804 	movi	r3,32
    65c8:	1887c83a 	sub	r3,r3,r2
    65cc:	01000104 	movi	r4,4
    65d0:	20c2cd0e 	bge	r4,r3,7108 <_dtoa_r+0x1618>
    65d4:	00c00704 	movi	r3,28
    65d8:	1885c83a 	sub	r2,r3,r2
    65dc:	d8c00817 	ldw	r3,32(sp)
    65e0:	a0a9883a 	add	r20,r20,r2
    65e4:	b0ad883a 	add	r22,r22,r2
    65e8:	1887883a 	add	r3,r3,r2
    65ec:	d8c00815 	stw	r3,32(sp)
    65f0:	d9800817 	ldw	r6,32(sp)
    65f4:	0180040e 	bge	zero,r6,6608 <_dtoa_r+0xb18>
    65f8:	800b883a 	mov	r5,r16
    65fc:	e009883a 	mov	r4,fp
    6600:	00091d80 	call	91d8 <__lshift>
    6604:	1021883a 	mov	r16,r2
    6608:	0580050e 	bge	zero,r22,6620 <_dtoa_r+0xb30>
    660c:	a80b883a 	mov	r5,r21
    6610:	b00d883a 	mov	r6,r22
    6614:	e009883a 	mov	r4,fp
    6618:	00091d80 	call	91d8 <__lshift>
    661c:	102b883a 	mov	r21,r2
    6620:	d9c00e17 	ldw	r7,56(sp)
    6624:	3801211e 	bne	r7,zero,6aac <_dtoa_r+0xfbc>
    6628:	d9800617 	ldw	r6,24(sp)
    662c:	0181380e 	bge	zero,r6,6b10 <_dtoa_r+0x1020>
    6630:	d8c00b17 	ldw	r3,44(sp)
    6634:	1800ab1e 	bne	r3,zero,68e4 <_dtoa_r+0xdf4>
    6638:	dc800717 	ldw	r18,28(sp)
    663c:	dcc00617 	ldw	r19,24(sp)
    6640:	9029883a 	mov	r20,r18
    6644:	00000206 	br	6650 <_dtoa_r+0xb60>
    6648:	0008a6c0 	call	8a6c <__multadd>
    664c:	1021883a 	mov	r16,r2
    6650:	a80b883a 	mov	r5,r21
    6654:	8009883a 	mov	r4,r16
    6658:	00058c80 	call	58c8 <quorem>
    665c:	10800c04 	addi	r2,r2,48
    6660:	90800005 	stb	r2,0(r18)
    6664:	94800044 	addi	r18,r18,1
    6668:	9507c83a 	sub	r3,r18,r20
    666c:	000f883a 	mov	r7,zero
    6670:	01800284 	movi	r6,10
    6674:	800b883a 	mov	r5,r16
    6678:	e009883a 	mov	r4,fp
    667c:	1cfff216 	blt	r3,r19,6648 <__alt_exception_stack_pointer+0xf8006648>
    6680:	1011883a 	mov	r8,r2
    6684:	d8800617 	ldw	r2,24(sp)
    6688:	0082370e 	bge	zero,r2,6f68 <_dtoa_r+0x1478>
    668c:	d9000717 	ldw	r4,28(sp)
    6690:	0025883a 	mov	r18,zero
    6694:	20af883a 	add	r23,r4,r2
    6698:	01800044 	movi	r6,1
    669c:	800b883a 	mov	r5,r16
    66a0:	e009883a 	mov	r4,fp
    66a4:	da001715 	stw	r8,92(sp)
    66a8:	00091d80 	call	91d8 <__lshift>
    66ac:	a80b883a 	mov	r5,r21
    66b0:	1009883a 	mov	r4,r2
    66b4:	d8800915 	stw	r2,36(sp)
    66b8:	00093200 	call	9320 <__mcmp>
    66bc:	da001717 	ldw	r8,92(sp)
    66c0:	0081800e 	bge	zero,r2,6cc4 <_dtoa_r+0x11d4>
    66c4:	b93fffc3 	ldbu	r4,-1(r23)
    66c8:	b8bfffc4 	addi	r2,r23,-1
    66cc:	1007883a 	mov	r3,r2
    66d0:	01800e44 	movi	r6,57
    66d4:	d9c00717 	ldw	r7,28(sp)
    66d8:	00000506 	br	66f0 <_dtoa_r+0xc00>
    66dc:	18ffffc4 	addi	r3,r3,-1
    66e0:	11c12326 	beq	r2,r7,6b70 <_dtoa_r+0x1080>
    66e4:	19000003 	ldbu	r4,0(r3)
    66e8:	102f883a 	mov	r23,r2
    66ec:	10bfffc4 	addi	r2,r2,-1
    66f0:	21403fcc 	andi	r5,r4,255
    66f4:	2940201c 	xori	r5,r5,128
    66f8:	297fe004 	addi	r5,r5,-128
    66fc:	29bff726 	beq	r5,r6,66dc <__alt_exception_stack_pointer+0xf80066dc>
    6700:	21000044 	addi	r4,r4,1
    6704:	11000005 	stb	r4,0(r2)
    6708:	a80b883a 	mov	r5,r21
    670c:	e009883a 	mov	r4,fp
    6710:	0008a440 	call	8a44 <_Bfree>
    6714:	883ea026 	beq	r17,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6718:	90000426 	beq	r18,zero,672c <_dtoa_r+0xc3c>
    671c:	94400326 	beq	r18,r17,672c <_dtoa_r+0xc3c>
    6720:	900b883a 	mov	r5,r18
    6724:	e009883a 	mov	r4,fp
    6728:	0008a440 	call	8a44 <_Bfree>
    672c:	880b883a 	mov	r5,r17
    6730:	e009883a 	mov	r4,fp
    6734:	0008a440 	call	8a44 <_Bfree>
    6738:	003e9706 	br	6198 <__alt_exception_stack_pointer+0xf8006198>
    673c:	01800044 	movi	r6,1
    6740:	d9800e15 	stw	r6,56(sp)
    6744:	003d9606 	br	5da0 <__alt_exception_stack_pointer+0xf8005da0>
    6748:	d8800817 	ldw	r2,32(sp)
    674c:	d8c00517 	ldw	r3,20(sp)
    6750:	d8000d15 	stw	zero,52(sp)
    6754:	10c5c83a 	sub	r2,r2,r3
    6758:	00c9c83a 	sub	r4,zero,r3
    675c:	d8800815 	stw	r2,32(sp)
    6760:	d9000a15 	stw	r4,40(sp)
    6764:	003d9706 	br	5dc4 <__alt_exception_stack_pointer+0xf8005dc4>
    6768:	05adc83a 	sub	r22,zero,r22
    676c:	dd800815 	stw	r22,32(sp)
    6770:	002d883a 	mov	r22,zero
    6774:	003d8e06 	br	5db0 <__alt_exception_stack_pointer+0xf8005db0>
    6778:	d9000517 	ldw	r4,20(sp)
    677c:	000f6e00 	call	f6e0 <__floatsidf>
    6780:	100d883a 	mov	r6,r2
    6784:	180f883a 	mov	r7,r3
    6788:	a009883a 	mov	r4,r20
    678c:	880b883a 	mov	r5,r17
    6790:	000e2a00 	call	e2a0 <__eqdf2>
    6794:	103d7126 	beq	r2,zero,5d5c <__alt_exception_stack_pointer+0xf8005d5c>
    6798:	d9c00517 	ldw	r7,20(sp)
    679c:	39ffffc4 	addi	r7,r7,-1
    67a0:	d9c00515 	stw	r7,20(sp)
    67a4:	003d6d06 	br	5d5c <__alt_exception_stack_pointer+0xf8005d5c>
    67a8:	dd400a17 	ldw	r21,40(sp)
    67ac:	dd000817 	ldw	r20,32(sp)
    67b0:	0023883a 	mov	r17,zero
    67b4:	003f4806 	br	64d8 <__alt_exception_stack_pointer+0xf80064d8>
    67b8:	10e3c83a 	sub	r17,r2,r3
    67bc:	9448983a 	sll	r4,r18,r17
    67c0:	003d3206 	br	5c8c <__alt_exception_stack_pointer+0xf8005c8c>
    67c4:	d8000e15 	stw	zero,56(sp)
    67c8:	003d7506 	br	5da0 <__alt_exception_stack_pointer+0xf8005da0>
    67cc:	b005883a 	mov	r2,r22
    67d0:	003f4506 	br	64e8 <__alt_exception_stack_pointer+0xf80064e8>
    67d4:	dc000915 	stw	r16,36(sp)
    67d8:	d9800a17 	ldw	r6,40(sp)
    67dc:	d9400917 	ldw	r5,36(sp)
    67e0:	e009883a 	mov	r4,fp
    67e4:	00090980 	call	9098 <__pow5mult>
    67e8:	1021883a 	mov	r16,r2
    67ec:	003f5a06 	br	6558 <__alt_exception_stack_pointer+0xf8006558>
    67f0:	01c00044 	movi	r7,1
    67f4:	d9c00b15 	stw	r7,44(sp)
    67f8:	d8802217 	ldw	r2,136(sp)
    67fc:	0081280e 	bge	zero,r2,6ca0 <_dtoa_r+0x11b0>
    6800:	100d883a 	mov	r6,r2
    6804:	1021883a 	mov	r16,r2
    6808:	d8800c15 	stw	r2,48(sp)
    680c:	d8800615 	stw	r2,24(sp)
    6810:	003d8806 	br	5e34 <__alt_exception_stack_pointer+0xf8005e34>
    6814:	d8800617 	ldw	r2,24(sp)
    6818:	00be9b16 	blt	zero,r2,6288 <__alt_exception_stack_pointer+0xf8006288>
    681c:	10010f1e 	bne	r2,zero,6c5c <_dtoa_r+0x116c>
    6820:	880b883a 	mov	r5,r17
    6824:	000d883a 	mov	r6,zero
    6828:	01d00534 	movhi	r7,16404
    682c:	8009883a 	mov	r4,r16
    6830:	000e4f80 	call	e4f8 <__muldf3>
    6834:	900d883a 	mov	r6,r18
    6838:	980f883a 	mov	r7,r19
    683c:	1009883a 	mov	r4,r2
    6840:	180b883a 	mov	r5,r3
    6844:	000e3280 	call	e328 <__gedf2>
    6848:	002b883a 	mov	r21,zero
    684c:	0023883a 	mov	r17,zero
    6850:	1000bf16 	blt	r2,zero,6b50 <_dtoa_r+0x1060>
    6854:	d9802217 	ldw	r6,136(sp)
    6858:	ddc00717 	ldw	r23,28(sp)
    685c:	018c303a 	nor	r6,zero,r6
    6860:	d9800515 	stw	r6,20(sp)
    6864:	a80b883a 	mov	r5,r21
    6868:	e009883a 	mov	r4,fp
    686c:	0008a440 	call	8a44 <_Bfree>
    6870:	883e4926 	beq	r17,zero,6198 <__alt_exception_stack_pointer+0xf8006198>
    6874:	003fad06 	br	672c <__alt_exception_stack_pointer+0xf800672c>
    6878:	d9c01117 	ldw	r7,68(sp)
    687c:	3801bc26 	beq	r7,zero,6f70 <_dtoa_r+0x1480>
    6880:	10810cc4 	addi	r2,r2,1075
    6884:	dd400a17 	ldw	r21,40(sp)
    6888:	dd000817 	ldw	r20,32(sp)
    688c:	003f0a06 	br	64b8 <__alt_exception_stack_pointer+0xf80064b8>
    6890:	00800704 	movi	r2,28
    6894:	d9000817 	ldw	r4,32(sp)
    6898:	a0a9883a 	add	r20,r20,r2
    689c:	b0ad883a 	add	r22,r22,r2
    68a0:	2089883a 	add	r4,r4,r2
    68a4:	d9000815 	stw	r4,32(sp)
    68a8:	003f5106 	br	65f0 <__alt_exception_stack_pointer+0xf80065f0>
    68ac:	d8c00317 	ldw	r3,12(sp)
    68b0:	b8c1fc0e 	bge	r23,r3,70a4 <_dtoa_r+0x15b4>
    68b4:	0027883a 	mov	r19,zero
    68b8:	b805883a 	mov	r2,r23
    68bc:	003f3e06 	br	65b8 <__alt_exception_stack_pointer+0xf80065b8>
    68c0:	880b883a 	mov	r5,r17
    68c4:	e009883a 	mov	r4,fp
    68c8:	000f883a 	mov	r7,zero
    68cc:	01800284 	movi	r6,10
    68d0:	0008a6c0 	call	8a6c <__multadd>
    68d4:	d9000c17 	ldw	r4,48(sp)
    68d8:	1023883a 	mov	r17,r2
    68dc:	0102040e 	bge	zero,r4,70f0 <_dtoa_r+0x1600>
    68e0:	d9000615 	stw	r4,24(sp)
    68e4:	0500050e 	bge	zero,r20,68fc <_dtoa_r+0xe0c>
    68e8:	880b883a 	mov	r5,r17
    68ec:	a00d883a 	mov	r6,r20
    68f0:	e009883a 	mov	r4,fp
    68f4:	00091d80 	call	91d8 <__lshift>
    68f8:	1023883a 	mov	r17,r2
    68fc:	9801241e 	bne	r19,zero,6d90 <_dtoa_r+0x12a0>
    6900:	8829883a 	mov	r20,r17
    6904:	d9000617 	ldw	r4,24(sp)
    6908:	dcc00717 	ldw	r19,28(sp)
    690c:	9480004c 	andi	r18,r18,1
    6910:	20bfffc4 	addi	r2,r4,-1
    6914:	9885883a 	add	r2,r19,r2
    6918:	d8800415 	stw	r2,16(sp)
    691c:	dc800615 	stw	r18,24(sp)
    6920:	a80b883a 	mov	r5,r21
    6924:	8009883a 	mov	r4,r16
    6928:	00058c80 	call	58c8 <quorem>
    692c:	880b883a 	mov	r5,r17
    6930:	8009883a 	mov	r4,r16
    6934:	102f883a 	mov	r23,r2
    6938:	00093200 	call	9320 <__mcmp>
    693c:	a80b883a 	mov	r5,r21
    6940:	a00d883a 	mov	r6,r20
    6944:	e009883a 	mov	r4,fp
    6948:	102d883a 	mov	r22,r2
    694c:	00093800 	call	9380 <__mdiff>
    6950:	1007883a 	mov	r3,r2
    6954:	10800317 	ldw	r2,12(r2)
    6958:	bc800c04 	addi	r18,r23,48
    695c:	180b883a 	mov	r5,r3
    6960:	10004e1e 	bne	r2,zero,6a9c <_dtoa_r+0xfac>
    6964:	8009883a 	mov	r4,r16
    6968:	d8c01615 	stw	r3,88(sp)
    696c:	00093200 	call	9320 <__mcmp>
    6970:	d8c01617 	ldw	r3,88(sp)
    6974:	e009883a 	mov	r4,fp
    6978:	d8801615 	stw	r2,88(sp)
    697c:	180b883a 	mov	r5,r3
    6980:	0008a440 	call	8a44 <_Bfree>
    6984:	d8801617 	ldw	r2,88(sp)
    6988:	1000041e 	bne	r2,zero,699c <_dtoa_r+0xeac>
    698c:	d9800317 	ldw	r6,12(sp)
    6990:	3000021e 	bne	r6,zero,699c <_dtoa_r+0xeac>
    6994:	d8c00617 	ldw	r3,24(sp)
    6998:	18003726 	beq	r3,zero,6a78 <_dtoa_r+0xf88>
    699c:	b0002016 	blt	r22,zero,6a20 <_dtoa_r+0xf30>
    69a0:	b000041e 	bne	r22,zero,69b4 <_dtoa_r+0xec4>
    69a4:	d9000317 	ldw	r4,12(sp)
    69a8:	2000021e 	bne	r4,zero,69b4 <_dtoa_r+0xec4>
    69ac:	d8c00617 	ldw	r3,24(sp)
    69b0:	18001b26 	beq	r3,zero,6a20 <_dtoa_r+0xf30>
    69b4:	00810716 	blt	zero,r2,6dd4 <_dtoa_r+0x12e4>
    69b8:	d8c00417 	ldw	r3,16(sp)
    69bc:	9d800044 	addi	r22,r19,1
    69c0:	9c800005 	stb	r18,0(r19)
    69c4:	b02f883a 	mov	r23,r22
    69c8:	98c10626 	beq	r19,r3,6de4 <_dtoa_r+0x12f4>
    69cc:	800b883a 	mov	r5,r16
    69d0:	000f883a 	mov	r7,zero
    69d4:	01800284 	movi	r6,10
    69d8:	e009883a 	mov	r4,fp
    69dc:	0008a6c0 	call	8a6c <__multadd>
    69e0:	1021883a 	mov	r16,r2
    69e4:	000f883a 	mov	r7,zero
    69e8:	01800284 	movi	r6,10
    69ec:	880b883a 	mov	r5,r17
    69f0:	e009883a 	mov	r4,fp
    69f4:	8d002526 	beq	r17,r20,6a8c <_dtoa_r+0xf9c>
    69f8:	0008a6c0 	call	8a6c <__multadd>
    69fc:	a00b883a 	mov	r5,r20
    6a00:	000f883a 	mov	r7,zero
    6a04:	01800284 	movi	r6,10
    6a08:	e009883a 	mov	r4,fp
    6a0c:	1023883a 	mov	r17,r2
    6a10:	0008a6c0 	call	8a6c <__multadd>
    6a14:	1029883a 	mov	r20,r2
    6a18:	b027883a 	mov	r19,r22
    6a1c:	003fc006 	br	6920 <__alt_exception_stack_pointer+0xf8006920>
    6a20:	9011883a 	mov	r8,r18
    6a24:	00800e0e 	bge	zero,r2,6a60 <_dtoa_r+0xf70>
    6a28:	800b883a 	mov	r5,r16
    6a2c:	01800044 	movi	r6,1
    6a30:	e009883a 	mov	r4,fp
    6a34:	da001715 	stw	r8,92(sp)
    6a38:	00091d80 	call	91d8 <__lshift>
    6a3c:	a80b883a 	mov	r5,r21
    6a40:	1009883a 	mov	r4,r2
    6a44:	1021883a 	mov	r16,r2
    6a48:	00093200 	call	9320 <__mcmp>
    6a4c:	da001717 	ldw	r8,92(sp)
    6a50:	0081960e 	bge	zero,r2,70ac <_dtoa_r+0x15bc>
    6a54:	00800e44 	movi	r2,57
    6a58:	40817026 	beq	r8,r2,701c <_dtoa_r+0x152c>
    6a5c:	ba000c44 	addi	r8,r23,49
    6a60:	8825883a 	mov	r18,r17
    6a64:	9dc00044 	addi	r23,r19,1
    6a68:	9a000005 	stb	r8,0(r19)
    6a6c:	a023883a 	mov	r17,r20
    6a70:	dc000915 	stw	r16,36(sp)
    6a74:	003f2406 	br	6708 <__alt_exception_stack_pointer+0xf8006708>
    6a78:	00800e44 	movi	r2,57
    6a7c:	9011883a 	mov	r8,r18
    6a80:	90816626 	beq	r18,r2,701c <_dtoa_r+0x152c>
    6a84:	05bff516 	blt	zero,r22,6a5c <__alt_exception_stack_pointer+0xf8006a5c>
    6a88:	003ff506 	br	6a60 <__alt_exception_stack_pointer+0xf8006a60>
    6a8c:	0008a6c0 	call	8a6c <__multadd>
    6a90:	1023883a 	mov	r17,r2
    6a94:	1029883a 	mov	r20,r2
    6a98:	003fdf06 	br	6a18 <__alt_exception_stack_pointer+0xf8006a18>
    6a9c:	e009883a 	mov	r4,fp
    6aa0:	0008a440 	call	8a44 <_Bfree>
    6aa4:	00800044 	movi	r2,1
    6aa8:	003fbc06 	br	699c <__alt_exception_stack_pointer+0xf800699c>
    6aac:	a80b883a 	mov	r5,r21
    6ab0:	8009883a 	mov	r4,r16
    6ab4:	00093200 	call	9320 <__mcmp>
    6ab8:	103edb0e 	bge	r2,zero,6628 <__alt_exception_stack_pointer+0xf8006628>
    6abc:	800b883a 	mov	r5,r16
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	01800284 	movi	r6,10
    6ac8:	e009883a 	mov	r4,fp
    6acc:	0008a6c0 	call	8a6c <__multadd>
    6ad0:	1021883a 	mov	r16,r2
    6ad4:	d8800517 	ldw	r2,20(sp)
    6ad8:	d8c00b17 	ldw	r3,44(sp)
    6adc:	10bfffc4 	addi	r2,r2,-1
    6ae0:	d8800515 	stw	r2,20(sp)
    6ae4:	183f761e 	bne	r3,zero,68c0 <__alt_exception_stack_pointer+0xf80068c0>
    6ae8:	d9000c17 	ldw	r4,48(sp)
    6aec:	0101730e 	bge	zero,r4,70bc <_dtoa_r+0x15cc>
    6af0:	d9000615 	stw	r4,24(sp)
    6af4:	003ed006 	br	6638 <__alt_exception_stack_pointer+0xf8006638>
    6af8:	00800084 	movi	r2,2
    6afc:	3081861e 	bne	r6,r2,7118 <_dtoa_r+0x1628>
    6b00:	d8000b15 	stw	zero,44(sp)
    6b04:	003f3c06 	br	67f8 <__alt_exception_stack_pointer+0xf80067f8>
    6b08:	dc000917 	ldw	r16,36(sp)
    6b0c:	003e9206 	br	6558 <__alt_exception_stack_pointer+0xf8006558>
    6b10:	d9c00317 	ldw	r7,12(sp)
    6b14:	00800084 	movi	r2,2
    6b18:	11fec50e 	bge	r2,r7,6630 <__alt_exception_stack_pointer+0xf8006630>
    6b1c:	d9000617 	ldw	r4,24(sp)
    6b20:	20013c1e 	bne	r4,zero,7014 <_dtoa_r+0x1524>
    6b24:	a80b883a 	mov	r5,r21
    6b28:	000f883a 	mov	r7,zero
    6b2c:	01800144 	movi	r6,5
    6b30:	e009883a 	mov	r4,fp
    6b34:	0008a6c0 	call	8a6c <__multadd>
    6b38:	100b883a 	mov	r5,r2
    6b3c:	8009883a 	mov	r4,r16
    6b40:	102b883a 	mov	r21,r2
    6b44:	00093200 	call	9320 <__mcmp>
    6b48:	dc000915 	stw	r16,36(sp)
    6b4c:	00bf410e 	bge	zero,r2,6854 <__alt_exception_stack_pointer+0xf8006854>
    6b50:	d9c00717 	ldw	r7,28(sp)
    6b54:	00800c44 	movi	r2,49
    6b58:	38800005 	stb	r2,0(r7)
    6b5c:	d8800517 	ldw	r2,20(sp)
    6b60:	3dc00044 	addi	r23,r7,1
    6b64:	10800044 	addi	r2,r2,1
    6b68:	d8800515 	stw	r2,20(sp)
    6b6c:	003f3d06 	br	6864 <__alt_exception_stack_pointer+0xf8006864>
    6b70:	d9800517 	ldw	r6,20(sp)
    6b74:	d9c00717 	ldw	r7,28(sp)
    6b78:	00800c44 	movi	r2,49
    6b7c:	31800044 	addi	r6,r6,1
    6b80:	d9800515 	stw	r6,20(sp)
    6b84:	38800005 	stb	r2,0(r7)
    6b88:	003edf06 	br	6708 <__alt_exception_stack_pointer+0xf8006708>
    6b8c:	d8000b15 	stw	zero,44(sp)
    6b90:	003c9f06 	br	5e10 <__alt_exception_stack_pointer+0xf8005e10>
    6b94:	903e7e1e 	bne	r18,zero,6590 <__alt_exception_stack_pointer+0xf8006590>
    6b98:	00800434 	movhi	r2,16
    6b9c:	10bfffc4 	addi	r2,r2,-1
    6ba0:	9884703a 	and	r2,r19,r2
    6ba4:	1000ea1e 	bne	r2,zero,6f50 <_dtoa_r+0x1460>
    6ba8:	9cdffc2c 	andhi	r19,r19,32752
    6bac:	9800e826 	beq	r19,zero,6f50 <_dtoa_r+0x1460>
    6bb0:	d9c00817 	ldw	r7,32(sp)
    6bb4:	b5800044 	addi	r22,r22,1
    6bb8:	04c00044 	movi	r19,1
    6bbc:	39c00044 	addi	r7,r7,1
    6bc0:	d9c00815 	stw	r7,32(sp)
    6bc4:	d8800d17 	ldw	r2,52(sp)
    6bc8:	103e721e 	bne	r2,zero,6594 <__alt_exception_stack_pointer+0xf8006594>
    6bcc:	00800044 	movi	r2,1
    6bd0:	003e7906 	br	65b8 <__alt_exception_stack_pointer+0xf80065b8>
    6bd4:	8009883a 	mov	r4,r16
    6bd8:	000f6e00 	call	f6e0 <__floatsidf>
    6bdc:	d9800f17 	ldw	r6,60(sp)
    6be0:	d9c01017 	ldw	r7,64(sp)
    6be4:	1009883a 	mov	r4,r2
    6be8:	180b883a 	mov	r5,r3
    6bec:	000e4f80 	call	e4f8 <__muldf3>
    6bf0:	000d883a 	mov	r6,zero
    6bf4:	01d00734 	movhi	r7,16412
    6bf8:	1009883a 	mov	r4,r2
    6bfc:	180b883a 	mov	r5,r3
    6c00:	000d0240 	call	d024 <__adddf3>
    6c04:	047f3034 	movhi	r17,64704
    6c08:	1021883a 	mov	r16,r2
    6c0c:	1c63883a 	add	r17,r3,r17
    6c10:	d9000f17 	ldw	r4,60(sp)
    6c14:	d9401017 	ldw	r5,64(sp)
    6c18:	000d883a 	mov	r6,zero
    6c1c:	01d00534 	movhi	r7,16404
    6c20:	000ed640 	call	ed64 <__subdf3>
    6c24:	800d883a 	mov	r6,r16
    6c28:	880f883a 	mov	r7,r17
    6c2c:	1009883a 	mov	r4,r2
    6c30:	180b883a 	mov	r5,r3
    6c34:	102b883a 	mov	r21,r2
    6c38:	1829883a 	mov	r20,r3
    6c3c:	000e3280 	call	e328 <__gedf2>
    6c40:	00806c16 	blt	zero,r2,6df4 <_dtoa_r+0x1304>
    6c44:	89e0003c 	xorhi	r7,r17,32768
    6c48:	800d883a 	mov	r6,r16
    6c4c:	a809883a 	mov	r4,r21
    6c50:	a00b883a 	mov	r5,r20
    6c54:	000e4040 	call	e404 <__ledf2>
    6c58:	103d7e0e 	bge	r2,zero,6254 <__alt_exception_stack_pointer+0xf8006254>
    6c5c:	002b883a 	mov	r21,zero
    6c60:	0023883a 	mov	r17,zero
    6c64:	003efb06 	br	6854 <__alt_exception_stack_pointer+0xf8006854>
    6c68:	d8800717 	ldw	r2,28(sp)
    6c6c:	003bd006 	br	5bb0 <__alt_exception_stack_pointer+0xf8005bb0>
    6c70:	d9000a17 	ldw	r4,40(sp)
    6c74:	d9800d17 	ldw	r6,52(sp)
    6c78:	dd400a15 	stw	r21,40(sp)
    6c7c:	a905c83a 	sub	r2,r21,r4
    6c80:	308d883a 	add	r6,r6,r2
    6c84:	d9800d15 	stw	r6,52(sp)
    6c88:	002b883a 	mov	r21,zero
    6c8c:	003e0606 	br	64a8 <__alt_exception_stack_pointer+0xf80064a8>
    6c90:	9023883a 	mov	r17,r18
    6c94:	9829883a 	mov	r20,r19
    6c98:	04000084 	movi	r16,2
    6c9c:	003c9206 	br	5ee8 <__alt_exception_stack_pointer+0xf8005ee8>
    6ca0:	04000044 	movi	r16,1
    6ca4:	dc000c15 	stw	r16,48(sp)
    6ca8:	dc000615 	stw	r16,24(sp)
    6cac:	dc002215 	stw	r16,136(sp)
    6cb0:	e0001115 	stw	zero,68(fp)
    6cb4:	000b883a 	mov	r5,zero
    6cb8:	003c6906 	br	5e60 <__alt_exception_stack_pointer+0xf8005e60>
    6cbc:	3021883a 	mov	r16,r6
    6cc0:	003ffb06 	br	6cb0 <__alt_exception_stack_pointer+0xf8006cb0>
    6cc4:	1000021e 	bne	r2,zero,6cd0 <_dtoa_r+0x11e0>
    6cc8:	4200004c 	andi	r8,r8,1
    6ccc:	403e7d1e 	bne	r8,zero,66c4 <__alt_exception_stack_pointer+0xf80066c4>
    6cd0:	01000c04 	movi	r4,48
    6cd4:	00000106 	br	6cdc <_dtoa_r+0x11ec>
    6cd8:	102f883a 	mov	r23,r2
    6cdc:	b8bfffc4 	addi	r2,r23,-1
    6ce0:	10c00007 	ldb	r3,0(r2)
    6ce4:	193ffc26 	beq	r3,r4,6cd8 <__alt_exception_stack_pointer+0xf8006cd8>
    6ce8:	003e8706 	br	6708 <__alt_exception_stack_pointer+0xf8006708>
    6cec:	d8800517 	ldw	r2,20(sp)
    6cf0:	00a3c83a 	sub	r17,zero,r2
    6cf4:	8800a426 	beq	r17,zero,6f88 <_dtoa_r+0x1498>
    6cf8:	888003cc 	andi	r2,r17,15
    6cfc:	100490fa 	slli	r2,r2,3
    6d00:	00c00074 	movhi	r3,1
    6d04:	18cb9c04 	addi	r3,r3,11888
    6d08:	1885883a 	add	r2,r3,r2
    6d0c:	11800017 	ldw	r6,0(r2)
    6d10:	11c00117 	ldw	r7,4(r2)
    6d14:	9009883a 	mov	r4,r18
    6d18:	980b883a 	mov	r5,r19
    6d1c:	8823d13a 	srai	r17,r17,4
    6d20:	000e4f80 	call	e4f8 <__muldf3>
    6d24:	d8800f15 	stw	r2,60(sp)
    6d28:	d8c01015 	stw	r3,64(sp)
    6d2c:	8800e826 	beq	r17,zero,70d0 <_dtoa_r+0x15e0>
    6d30:	05000074 	movhi	r20,1
    6d34:	a50b9204 	addi	r20,r20,11848
    6d38:	04000084 	movi	r16,2
    6d3c:	8980004c 	andi	r6,r17,1
    6d40:	1009883a 	mov	r4,r2
    6d44:	8823d07a 	srai	r17,r17,1
    6d48:	180b883a 	mov	r5,r3
    6d4c:	30000426 	beq	r6,zero,6d60 <_dtoa_r+0x1270>
    6d50:	a1800017 	ldw	r6,0(r20)
    6d54:	a1c00117 	ldw	r7,4(r20)
    6d58:	84000044 	addi	r16,r16,1
    6d5c:	000e4f80 	call	e4f8 <__muldf3>
    6d60:	a5000204 	addi	r20,r20,8
    6d64:	883ff51e 	bne	r17,zero,6d3c <__alt_exception_stack_pointer+0xf8006d3c>
    6d68:	d8800f15 	stw	r2,60(sp)
    6d6c:	d8c01015 	stw	r3,64(sp)
    6d70:	003c7606 	br	5f4c <__alt_exception_stack_pointer+0xf8005f4c>
    6d74:	00c00c04 	movi	r3,48
    6d78:	10c00005 	stb	r3,0(r2)
    6d7c:	d8c00517 	ldw	r3,20(sp)
    6d80:	bd3fffc3 	ldbu	r20,-1(r23)
    6d84:	18c00044 	addi	r3,r3,1
    6d88:	d8c00515 	stw	r3,20(sp)
    6d8c:	003db906 	br	6474 <__alt_exception_stack_pointer+0xf8006474>
    6d90:	89400117 	ldw	r5,4(r17)
    6d94:	e009883a 	mov	r4,fp
    6d98:	000899c0 	call	899c <_Balloc>
    6d9c:	89800417 	ldw	r6,16(r17)
    6da0:	89400304 	addi	r5,r17,12
    6da4:	11000304 	addi	r4,r2,12
    6da8:	31800084 	addi	r6,r6,2
    6dac:	318d883a 	add	r6,r6,r6
    6db0:	318d883a 	add	r6,r6,r6
    6db4:	1027883a 	mov	r19,r2
    6db8:	00085d00 	call	85d0 <memcpy>
    6dbc:	01800044 	movi	r6,1
    6dc0:	980b883a 	mov	r5,r19
    6dc4:	e009883a 	mov	r4,fp
    6dc8:	00091d80 	call	91d8 <__lshift>
    6dcc:	1029883a 	mov	r20,r2
    6dd0:	003ecc06 	br	6904 <__alt_exception_stack_pointer+0xf8006904>
    6dd4:	00800e44 	movi	r2,57
    6dd8:	90809026 	beq	r18,r2,701c <_dtoa_r+0x152c>
    6ddc:	92000044 	addi	r8,r18,1
    6de0:	003f1f06 	br	6a60 <__alt_exception_stack_pointer+0xf8006a60>
    6de4:	9011883a 	mov	r8,r18
    6de8:	8825883a 	mov	r18,r17
    6dec:	a023883a 	mov	r17,r20
    6df0:	003e2906 	br	6698 <__alt_exception_stack_pointer+0xf8006698>
    6df4:	002b883a 	mov	r21,zero
    6df8:	0023883a 	mov	r17,zero
    6dfc:	003f5406 	br	6b50 <__alt_exception_stack_pointer+0xf8006b50>
    6e00:	61bfffc4 	addi	r6,r12,-1
    6e04:	300490fa 	slli	r2,r6,3
    6e08:	00c00074 	movhi	r3,1
    6e0c:	18cb9c04 	addi	r3,r3,11888
    6e10:	1885883a 	add	r2,r3,r2
    6e14:	11000017 	ldw	r4,0(r2)
    6e18:	11400117 	ldw	r5,4(r2)
    6e1c:	d8800717 	ldw	r2,28(sp)
    6e20:	880f883a 	mov	r7,r17
    6e24:	d9801215 	stw	r6,72(sp)
    6e28:	800d883a 	mov	r6,r16
    6e2c:	db001615 	stw	r12,88(sp)
    6e30:	15c00044 	addi	r23,r2,1
    6e34:	000e4f80 	call	e4f8 <__muldf3>
    6e38:	d9401017 	ldw	r5,64(sp)
    6e3c:	d9000f17 	ldw	r4,60(sp)
    6e40:	d8c01515 	stw	r3,84(sp)
    6e44:	d8801415 	stw	r2,80(sp)
    6e48:	000f6600 	call	f660 <__fixdfsi>
    6e4c:	1009883a 	mov	r4,r2
    6e50:	1021883a 	mov	r16,r2
    6e54:	000f6e00 	call	f6e0 <__floatsidf>
    6e58:	d9000f17 	ldw	r4,60(sp)
    6e5c:	d9401017 	ldw	r5,64(sp)
    6e60:	100d883a 	mov	r6,r2
    6e64:	180f883a 	mov	r7,r3
    6e68:	000ed640 	call	ed64 <__subdf3>
    6e6c:	1829883a 	mov	r20,r3
    6e70:	d8c00717 	ldw	r3,28(sp)
    6e74:	84000c04 	addi	r16,r16,48
    6e78:	1023883a 	mov	r17,r2
    6e7c:	1c000005 	stb	r16,0(r3)
    6e80:	db001617 	ldw	r12,88(sp)
    6e84:	00800044 	movi	r2,1
    6e88:	60802226 	beq	r12,r2,6f14 <_dtoa_r+0x1424>
    6e8c:	d9c00717 	ldw	r7,28(sp)
    6e90:	8805883a 	mov	r2,r17
    6e94:	b82b883a 	mov	r21,r23
    6e98:	3b19883a 	add	r12,r7,r12
    6e9c:	6023883a 	mov	r17,r12
    6ea0:	a007883a 	mov	r3,r20
    6ea4:	dc800f15 	stw	r18,60(sp)
    6ea8:	000d883a 	mov	r6,zero
    6eac:	01d00934 	movhi	r7,16420
    6eb0:	1009883a 	mov	r4,r2
    6eb4:	180b883a 	mov	r5,r3
    6eb8:	000e4f80 	call	e4f8 <__muldf3>
    6ebc:	180b883a 	mov	r5,r3
    6ec0:	1009883a 	mov	r4,r2
    6ec4:	1829883a 	mov	r20,r3
    6ec8:	1025883a 	mov	r18,r2
    6ecc:	000f6600 	call	f660 <__fixdfsi>
    6ed0:	1009883a 	mov	r4,r2
    6ed4:	1021883a 	mov	r16,r2
    6ed8:	000f6e00 	call	f6e0 <__floatsidf>
    6edc:	100d883a 	mov	r6,r2
    6ee0:	180f883a 	mov	r7,r3
    6ee4:	9009883a 	mov	r4,r18
    6ee8:	a00b883a 	mov	r5,r20
    6eec:	84000c04 	addi	r16,r16,48
    6ef0:	000ed640 	call	ed64 <__subdf3>
    6ef4:	ad400044 	addi	r21,r21,1
    6ef8:	ac3fffc5 	stb	r16,-1(r21)
    6efc:	ac7fea1e 	bne	r21,r17,6ea8 <__alt_exception_stack_pointer+0xf8006ea8>
    6f00:	1023883a 	mov	r17,r2
    6f04:	d8801217 	ldw	r2,72(sp)
    6f08:	dc800f17 	ldw	r18,60(sp)
    6f0c:	1829883a 	mov	r20,r3
    6f10:	b8af883a 	add	r23,r23,r2
    6f14:	d9001417 	ldw	r4,80(sp)
    6f18:	d9401517 	ldw	r5,84(sp)
    6f1c:	000d883a 	mov	r6,zero
    6f20:	01cff834 	movhi	r7,16352
    6f24:	000d0240 	call	d024 <__adddf3>
    6f28:	880d883a 	mov	r6,r17
    6f2c:	a00f883a 	mov	r7,r20
    6f30:	1009883a 	mov	r4,r2
    6f34:	180b883a 	mov	r5,r3
    6f38:	000e4040 	call	e404 <__ledf2>
    6f3c:	10003e0e 	bge	r2,zero,7038 <_dtoa_r+0x1548>
    6f40:	d9001317 	ldw	r4,76(sp)
    6f44:	bd3fffc3 	ldbu	r20,-1(r23)
    6f48:	d9000515 	stw	r4,20(sp)
    6f4c:	003d3b06 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    6f50:	0027883a 	mov	r19,zero
    6f54:	003f1b06 	br	6bc4 <__alt_exception_stack_pointer+0xf8006bc4>
    6f58:	d8800817 	ldw	r2,32(sp)
    6f5c:	11e9c83a 	sub	r20,r2,r7
    6f60:	0005883a 	mov	r2,zero
    6f64:	003d5406 	br	64b8 <__alt_exception_stack_pointer+0xf80064b8>
    6f68:	00800044 	movi	r2,1
    6f6c:	003dc706 	br	668c <__alt_exception_stack_pointer+0xf800668c>
    6f70:	d8c00217 	ldw	r3,8(sp)
    6f74:	00800d84 	movi	r2,54
    6f78:	dd400a17 	ldw	r21,40(sp)
    6f7c:	10c5c83a 	sub	r2,r2,r3
    6f80:	dd000817 	ldw	r20,32(sp)
    6f84:	003d4c06 	br	64b8 <__alt_exception_stack_pointer+0xf80064b8>
    6f88:	dc800f15 	stw	r18,60(sp)
    6f8c:	dcc01015 	stw	r19,64(sp)
    6f90:	04000084 	movi	r16,2
    6f94:	003bed06 	br	5f4c <__alt_exception_stack_pointer+0xf8005f4c>
    6f98:	d9000617 	ldw	r4,24(sp)
    6f9c:	203f0d26 	beq	r4,zero,6bd4 <__alt_exception_stack_pointer+0xf8006bd4>
    6fa0:	d9800c17 	ldw	r6,48(sp)
    6fa4:	01bcab0e 	bge	zero,r6,6254 <__alt_exception_stack_pointer+0xf8006254>
    6fa8:	d9401017 	ldw	r5,64(sp)
    6fac:	d9000f17 	ldw	r4,60(sp)
    6fb0:	000d883a 	mov	r6,zero
    6fb4:	01d00934 	movhi	r7,16420
    6fb8:	000e4f80 	call	e4f8 <__muldf3>
    6fbc:	81000044 	addi	r4,r16,1
    6fc0:	d8800f15 	stw	r2,60(sp)
    6fc4:	d8c01015 	stw	r3,64(sp)
    6fc8:	000f6e00 	call	f6e0 <__floatsidf>
    6fcc:	d9800f17 	ldw	r6,60(sp)
    6fd0:	d9c01017 	ldw	r7,64(sp)
    6fd4:	1009883a 	mov	r4,r2
    6fd8:	180b883a 	mov	r5,r3
    6fdc:	000e4f80 	call	e4f8 <__muldf3>
    6fe0:	01d00734 	movhi	r7,16412
    6fe4:	000d883a 	mov	r6,zero
    6fe8:	1009883a 	mov	r4,r2
    6fec:	180b883a 	mov	r5,r3
    6ff0:	000d0240 	call	d024 <__adddf3>
    6ff4:	d9c00517 	ldw	r7,20(sp)
    6ff8:	047f3034 	movhi	r17,64704
    6ffc:	1021883a 	mov	r16,r2
    7000:	39ffffc4 	addi	r7,r7,-1
    7004:	d9c01315 	stw	r7,76(sp)
    7008:	1c63883a 	add	r17,r3,r17
    700c:	db000c17 	ldw	r12,48(sp)
    7010:	003bea06 	br	5fbc <__alt_exception_stack_pointer+0xf8005fbc>
    7014:	dc000915 	stw	r16,36(sp)
    7018:	003e0e06 	br	6854 <__alt_exception_stack_pointer+0xf8006854>
    701c:	01000e44 	movi	r4,57
    7020:	8825883a 	mov	r18,r17
    7024:	9dc00044 	addi	r23,r19,1
    7028:	99000005 	stb	r4,0(r19)
    702c:	a023883a 	mov	r17,r20
    7030:	dc000915 	stw	r16,36(sp)
    7034:	003da406 	br	66c8 <__alt_exception_stack_pointer+0xf80066c8>
    7038:	d9801417 	ldw	r6,80(sp)
    703c:	d9c01517 	ldw	r7,84(sp)
    7040:	0009883a 	mov	r4,zero
    7044:	014ff834 	movhi	r5,16352
    7048:	000ed640 	call	ed64 <__subdf3>
    704c:	880d883a 	mov	r6,r17
    7050:	a00f883a 	mov	r7,r20
    7054:	1009883a 	mov	r4,r2
    7058:	180b883a 	mov	r5,r3
    705c:	000e3280 	call	e328 <__gedf2>
    7060:	00bc7c0e 	bge	zero,r2,6254 <__alt_exception_stack_pointer+0xf8006254>
    7064:	01000c04 	movi	r4,48
    7068:	00000106 	br	7070 <_dtoa_r+0x1580>
    706c:	102f883a 	mov	r23,r2
    7070:	b8bfffc4 	addi	r2,r23,-1
    7074:	10c00007 	ldb	r3,0(r2)
    7078:	193ffc26 	beq	r3,r4,706c <__alt_exception_stack_pointer+0xf800706c>
    707c:	d9801317 	ldw	r6,76(sp)
    7080:	d9800515 	stw	r6,20(sp)
    7084:	003c4406 	br	6198 <__alt_exception_stack_pointer+0xf8006198>
    7088:	d9801317 	ldw	r6,76(sp)
    708c:	d9800515 	stw	r6,20(sp)
    7090:	003cea06 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    7094:	dd800f17 	ldw	r22,60(sp)
    7098:	dcc01017 	ldw	r19,64(sp)
    709c:	dc801217 	ldw	r18,72(sp)
    70a0:	003c6c06 	br	6254 <__alt_exception_stack_pointer+0xf8006254>
    70a4:	903e031e 	bne	r18,zero,68b4 <__alt_exception_stack_pointer+0xf80068b4>
    70a8:	003ebb06 	br	6b98 <__alt_exception_stack_pointer+0xf8006b98>
    70ac:	103e6c1e 	bne	r2,zero,6a60 <__alt_exception_stack_pointer+0xf8006a60>
    70b0:	4080004c 	andi	r2,r8,1
    70b4:	103e6a26 	beq	r2,zero,6a60 <__alt_exception_stack_pointer+0xf8006a60>
    70b8:	003e6606 	br	6a54 <__alt_exception_stack_pointer+0xf8006a54>
    70bc:	d8c00317 	ldw	r3,12(sp)
    70c0:	00800084 	movi	r2,2
    70c4:	10c02916 	blt	r2,r3,716c <_dtoa_r+0x167c>
    70c8:	d9000c17 	ldw	r4,48(sp)
    70cc:	003e8806 	br	6af0 <__alt_exception_stack_pointer+0xf8006af0>
    70d0:	04000084 	movi	r16,2
    70d4:	003b9d06 	br	5f4c <__alt_exception_stack_pointer+0xf8005f4c>
    70d8:	d9001317 	ldw	r4,76(sp)
    70dc:	d9000515 	stw	r4,20(sp)
    70e0:	003cd606 	br	643c <__alt_exception_stack_pointer+0xf800643c>
    70e4:	d8801317 	ldw	r2,76(sp)
    70e8:	d8800515 	stw	r2,20(sp)
    70ec:	003c2a06 	br	6198 <__alt_exception_stack_pointer+0xf8006198>
    70f0:	d9800317 	ldw	r6,12(sp)
    70f4:	00800084 	movi	r2,2
    70f8:	11801516 	blt	r2,r6,7150 <_dtoa_r+0x1660>
    70fc:	d9c00c17 	ldw	r7,48(sp)
    7100:	d9c00615 	stw	r7,24(sp)
    7104:	003df706 	br	68e4 <__alt_exception_stack_pointer+0xf80068e4>
    7108:	193d3926 	beq	r3,r4,65f0 <__alt_exception_stack_pointer+0xf80065f0>
    710c:	00c00f04 	movi	r3,60
    7110:	1885c83a 	sub	r2,r3,r2
    7114:	003ddf06 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    7118:	e009883a 	mov	r4,fp
    711c:	e0001115 	stw	zero,68(fp)
    7120:	000b883a 	mov	r5,zero
    7124:	000899c0 	call	899c <_Balloc>
    7128:	d8800715 	stw	r2,28(sp)
    712c:	d8c00717 	ldw	r3,28(sp)
    7130:	00bfffc4 	movi	r2,-1
    7134:	01000044 	movi	r4,1
    7138:	d8800c15 	stw	r2,48(sp)
    713c:	e0c01015 	stw	r3,64(fp)
    7140:	d9000b15 	stw	r4,44(sp)
    7144:	d8800615 	stw	r2,24(sp)
    7148:	d8002215 	stw	zero,136(sp)
    714c:	003c4106 	br	6254 <__alt_exception_stack_pointer+0xf8006254>
    7150:	d8c00c17 	ldw	r3,48(sp)
    7154:	d8c00615 	stw	r3,24(sp)
    7158:	003e7006 	br	6b1c <__alt_exception_stack_pointer+0xf8006b1c>
    715c:	04400044 	movi	r17,1
    7160:	003b2006 	br	5de4 <__alt_exception_stack_pointer+0xf8005de4>
    7164:	000b883a 	mov	r5,zero
    7168:	003b3d06 	br	5e60 <__alt_exception_stack_pointer+0xf8005e60>
    716c:	d8800c17 	ldw	r2,48(sp)
    7170:	d8800615 	stw	r2,24(sp)
    7174:	003e6906 	br	6b1c <__alt_exception_stack_pointer+0xf8006b1c>

00007178 <__sflush_r>:
    7178:	2880030b 	ldhu	r2,12(r5)
    717c:	defffb04 	addi	sp,sp,-20
    7180:	dcc00315 	stw	r19,12(sp)
    7184:	dc400115 	stw	r17,4(sp)
    7188:	dfc00415 	stw	ra,16(sp)
    718c:	dc800215 	stw	r18,8(sp)
    7190:	dc000015 	stw	r16,0(sp)
    7194:	10c0020c 	andi	r3,r2,8
    7198:	2823883a 	mov	r17,r5
    719c:	2027883a 	mov	r19,r4
    71a0:	1800311e 	bne	r3,zero,7268 <__sflush_r+0xf0>
    71a4:	28c00117 	ldw	r3,4(r5)
    71a8:	10820014 	ori	r2,r2,2048
    71ac:	2880030d 	sth	r2,12(r5)
    71b0:	00c04b0e 	bge	zero,r3,72e0 <__sflush_r+0x168>
    71b4:	8a000a17 	ldw	r8,40(r17)
    71b8:	40002326 	beq	r8,zero,7248 <__sflush_r+0xd0>
    71bc:	9c000017 	ldw	r16,0(r19)
    71c0:	10c4000c 	andi	r3,r2,4096
    71c4:	98000015 	stw	zero,0(r19)
    71c8:	18004826 	beq	r3,zero,72ec <__sflush_r+0x174>
    71cc:	89801417 	ldw	r6,80(r17)
    71d0:	10c0010c 	andi	r3,r2,4
    71d4:	18000626 	beq	r3,zero,71f0 <__sflush_r+0x78>
    71d8:	88c00117 	ldw	r3,4(r17)
    71dc:	88800c17 	ldw	r2,48(r17)
    71e0:	30cdc83a 	sub	r6,r6,r3
    71e4:	10000226 	beq	r2,zero,71f0 <__sflush_r+0x78>
    71e8:	88800f17 	ldw	r2,60(r17)
    71ec:	308dc83a 	sub	r6,r6,r2
    71f0:	89400717 	ldw	r5,28(r17)
    71f4:	000f883a 	mov	r7,zero
    71f8:	9809883a 	mov	r4,r19
    71fc:	403ee83a 	callr	r8
    7200:	00ffffc4 	movi	r3,-1
    7204:	10c04426 	beq	r2,r3,7318 <__sflush_r+0x1a0>
    7208:	88c0030b 	ldhu	r3,12(r17)
    720c:	89000417 	ldw	r4,16(r17)
    7210:	88000115 	stw	zero,4(r17)
    7214:	197dffcc 	andi	r5,r3,63487
    7218:	8940030d 	sth	r5,12(r17)
    721c:	89000015 	stw	r4,0(r17)
    7220:	18c4000c 	andi	r3,r3,4096
    7224:	18002c1e 	bne	r3,zero,72d8 <__sflush_r+0x160>
    7228:	89400c17 	ldw	r5,48(r17)
    722c:	9c000015 	stw	r16,0(r19)
    7230:	28000526 	beq	r5,zero,7248 <__sflush_r+0xd0>
    7234:	88801004 	addi	r2,r17,64
    7238:	28800226 	beq	r5,r2,7244 <__sflush_r+0xcc>
    723c:	9809883a 	mov	r4,r19
    7240:	00078f40 	call	78f4 <_free_r>
    7244:	88000c15 	stw	zero,48(r17)
    7248:	0005883a 	mov	r2,zero
    724c:	dfc00417 	ldw	ra,16(sp)
    7250:	dcc00317 	ldw	r19,12(sp)
    7254:	dc800217 	ldw	r18,8(sp)
    7258:	dc400117 	ldw	r17,4(sp)
    725c:	dc000017 	ldw	r16,0(sp)
    7260:	dec00504 	addi	sp,sp,20
    7264:	f800283a 	ret
    7268:	2c800417 	ldw	r18,16(r5)
    726c:	903ff626 	beq	r18,zero,7248 <__alt_exception_stack_pointer+0xf8007248>
    7270:	2c000017 	ldw	r16,0(r5)
    7274:	108000cc 	andi	r2,r2,3
    7278:	2c800015 	stw	r18,0(r5)
    727c:	84a1c83a 	sub	r16,r16,r18
    7280:	1000131e 	bne	r2,zero,72d0 <__sflush_r+0x158>
    7284:	28800517 	ldw	r2,20(r5)
    7288:	88800215 	stw	r2,8(r17)
    728c:	04000316 	blt	zero,r16,729c <__sflush_r+0x124>
    7290:	003fed06 	br	7248 <__alt_exception_stack_pointer+0xf8007248>
    7294:	90a5883a 	add	r18,r18,r2
    7298:	043feb0e 	bge	zero,r16,7248 <__alt_exception_stack_pointer+0xf8007248>
    729c:	88800917 	ldw	r2,36(r17)
    72a0:	89400717 	ldw	r5,28(r17)
    72a4:	800f883a 	mov	r7,r16
    72a8:	900d883a 	mov	r6,r18
    72ac:	9809883a 	mov	r4,r19
    72b0:	103ee83a 	callr	r2
    72b4:	80a1c83a 	sub	r16,r16,r2
    72b8:	00bff616 	blt	zero,r2,7294 <__alt_exception_stack_pointer+0xf8007294>
    72bc:	88c0030b 	ldhu	r3,12(r17)
    72c0:	00bfffc4 	movi	r2,-1
    72c4:	18c01014 	ori	r3,r3,64
    72c8:	88c0030d 	sth	r3,12(r17)
    72cc:	003fdf06 	br	724c <__alt_exception_stack_pointer+0xf800724c>
    72d0:	0005883a 	mov	r2,zero
    72d4:	003fec06 	br	7288 <__alt_exception_stack_pointer+0xf8007288>
    72d8:	88801415 	stw	r2,80(r17)
    72dc:	003fd206 	br	7228 <__alt_exception_stack_pointer+0xf8007228>
    72e0:	28c00f17 	ldw	r3,60(r5)
    72e4:	00ffb316 	blt	zero,r3,71b4 <__alt_exception_stack_pointer+0xf80071b4>
    72e8:	003fd706 	br	7248 <__alt_exception_stack_pointer+0xf8007248>
    72ec:	89400717 	ldw	r5,28(r17)
    72f0:	000d883a 	mov	r6,zero
    72f4:	01c00044 	movi	r7,1
    72f8:	9809883a 	mov	r4,r19
    72fc:	403ee83a 	callr	r8
    7300:	100d883a 	mov	r6,r2
    7304:	00bfffc4 	movi	r2,-1
    7308:	30801426 	beq	r6,r2,735c <__sflush_r+0x1e4>
    730c:	8880030b 	ldhu	r2,12(r17)
    7310:	8a000a17 	ldw	r8,40(r17)
    7314:	003fae06 	br	71d0 <__alt_exception_stack_pointer+0xf80071d0>
    7318:	98c00017 	ldw	r3,0(r19)
    731c:	183fba26 	beq	r3,zero,7208 <__alt_exception_stack_pointer+0xf8007208>
    7320:	01000744 	movi	r4,29
    7324:	19000626 	beq	r3,r4,7340 <__sflush_r+0x1c8>
    7328:	01000584 	movi	r4,22
    732c:	19000426 	beq	r3,r4,7340 <__sflush_r+0x1c8>
    7330:	88c0030b 	ldhu	r3,12(r17)
    7334:	18c01014 	ori	r3,r3,64
    7338:	88c0030d 	sth	r3,12(r17)
    733c:	003fc306 	br	724c <__alt_exception_stack_pointer+0xf800724c>
    7340:	8880030b 	ldhu	r2,12(r17)
    7344:	88c00417 	ldw	r3,16(r17)
    7348:	88000115 	stw	zero,4(r17)
    734c:	10bdffcc 	andi	r2,r2,63487
    7350:	8880030d 	sth	r2,12(r17)
    7354:	88c00015 	stw	r3,0(r17)
    7358:	003fb306 	br	7228 <__alt_exception_stack_pointer+0xf8007228>
    735c:	98800017 	ldw	r2,0(r19)
    7360:	103fea26 	beq	r2,zero,730c <__alt_exception_stack_pointer+0xf800730c>
    7364:	00c00744 	movi	r3,29
    7368:	10c00226 	beq	r2,r3,7374 <__sflush_r+0x1fc>
    736c:	00c00584 	movi	r3,22
    7370:	10c0031e 	bne	r2,r3,7380 <__sflush_r+0x208>
    7374:	9c000015 	stw	r16,0(r19)
    7378:	0005883a 	mov	r2,zero
    737c:	003fb306 	br	724c <__alt_exception_stack_pointer+0xf800724c>
    7380:	88c0030b 	ldhu	r3,12(r17)
    7384:	3005883a 	mov	r2,r6
    7388:	18c01014 	ori	r3,r3,64
    738c:	88c0030d 	sth	r3,12(r17)
    7390:	003fae06 	br	724c <__alt_exception_stack_pointer+0xf800724c>

00007394 <_fflush_r>:
    7394:	defffd04 	addi	sp,sp,-12
    7398:	dc000115 	stw	r16,4(sp)
    739c:	dfc00215 	stw	ra,8(sp)
    73a0:	2021883a 	mov	r16,r4
    73a4:	20000226 	beq	r4,zero,73b0 <_fflush_r+0x1c>
    73a8:	20800e17 	ldw	r2,56(r4)
    73ac:	10000c26 	beq	r2,zero,73e0 <_fflush_r+0x4c>
    73b0:	2880030f 	ldh	r2,12(r5)
    73b4:	1000051e 	bne	r2,zero,73cc <_fflush_r+0x38>
    73b8:	0005883a 	mov	r2,zero
    73bc:	dfc00217 	ldw	ra,8(sp)
    73c0:	dc000117 	ldw	r16,4(sp)
    73c4:	dec00304 	addi	sp,sp,12
    73c8:	f800283a 	ret
    73cc:	8009883a 	mov	r4,r16
    73d0:	dfc00217 	ldw	ra,8(sp)
    73d4:	dc000117 	ldw	r16,4(sp)
    73d8:	dec00304 	addi	sp,sp,12
    73dc:	00071781 	jmpi	7178 <__sflush_r>
    73e0:	d9400015 	stw	r5,0(sp)
    73e4:	00077800 	call	7780 <__sinit>
    73e8:	d9400017 	ldw	r5,0(sp)
    73ec:	003ff006 	br	73b0 <__alt_exception_stack_pointer+0xf80073b0>

000073f0 <fflush>:
    73f0:	20000526 	beq	r4,zero,7408 <fflush+0x18>
    73f4:	00800074 	movhi	r2,1
    73f8:	10930404 	addi	r2,r2,19472
    73fc:	200b883a 	mov	r5,r4
    7400:	11000017 	ldw	r4,0(r2)
    7404:	00073941 	jmpi	7394 <_fflush_r>
    7408:	00800074 	movhi	r2,1
    740c:	10930304 	addi	r2,r2,19468
    7410:	11000017 	ldw	r4,0(r2)
    7414:	01400034 	movhi	r5,0
    7418:	295ce504 	addi	r5,r5,29588
    741c:	00081901 	jmpi	8190 <_fwalk_reent>

00007420 <__fp_unlock>:
    7420:	0005883a 	mov	r2,zero
    7424:	f800283a 	ret

00007428 <_cleanup_r>:
    7428:	01400074 	movhi	r5,1
    742c:	296eb304 	addi	r5,r5,-17716
    7430:	00081901 	jmpi	8190 <_fwalk_reent>

00007434 <__sinit.part.1>:
    7434:	defff704 	addi	sp,sp,-36
    7438:	00c00034 	movhi	r3,0
    743c:	dfc00815 	stw	ra,32(sp)
    7440:	ddc00715 	stw	r23,28(sp)
    7444:	dd800615 	stw	r22,24(sp)
    7448:	dd400515 	stw	r21,20(sp)
    744c:	dd000415 	stw	r20,16(sp)
    7450:	dcc00315 	stw	r19,12(sp)
    7454:	dc800215 	stw	r18,8(sp)
    7458:	dc400115 	stw	r17,4(sp)
    745c:	dc000015 	stw	r16,0(sp)
    7460:	18dd0a04 	addi	r3,r3,29736
    7464:	24000117 	ldw	r16,4(r4)
    7468:	20c00f15 	stw	r3,60(r4)
    746c:	2080bb04 	addi	r2,r4,748
    7470:	00c000c4 	movi	r3,3
    7474:	20c0b915 	stw	r3,740(r4)
    7478:	2080ba15 	stw	r2,744(r4)
    747c:	2000b815 	stw	zero,736(r4)
    7480:	05c00204 	movi	r23,8
    7484:	00800104 	movi	r2,4
    7488:	2025883a 	mov	r18,r4
    748c:	b80d883a 	mov	r6,r23
    7490:	81001704 	addi	r4,r16,92
    7494:	000b883a 	mov	r5,zero
    7498:	80000015 	stw	zero,0(r16)
    749c:	80000115 	stw	zero,4(r16)
    74a0:	80000215 	stw	zero,8(r16)
    74a4:	8080030d 	sth	r2,12(r16)
    74a8:	80001915 	stw	zero,100(r16)
    74ac:	8000038d 	sth	zero,14(r16)
    74b0:	80000415 	stw	zero,16(r16)
    74b4:	80000515 	stw	zero,20(r16)
    74b8:	80000615 	stw	zero,24(r16)
    74bc:	00088740 	call	8874 <memset>
    74c0:	05800074 	movhi	r22,1
    74c4:	94400217 	ldw	r17,8(r18)
    74c8:	05400074 	movhi	r21,1
    74cc:	05000074 	movhi	r20,1
    74d0:	04c00074 	movhi	r19,1
    74d4:	b5a80b04 	addi	r22,r22,-24532
    74d8:	ad682204 	addi	r21,r21,-24440
    74dc:	a5284104 	addi	r20,r20,-24316
    74e0:	9ce85804 	addi	r19,r19,-24224
    74e4:	85800815 	stw	r22,32(r16)
    74e8:	85400915 	stw	r21,36(r16)
    74ec:	85000a15 	stw	r20,40(r16)
    74f0:	84c00b15 	stw	r19,44(r16)
    74f4:	84000715 	stw	r16,28(r16)
    74f8:	00800284 	movi	r2,10
    74fc:	8880030d 	sth	r2,12(r17)
    7500:	00800044 	movi	r2,1
    7504:	b80d883a 	mov	r6,r23
    7508:	89001704 	addi	r4,r17,92
    750c:	000b883a 	mov	r5,zero
    7510:	88000015 	stw	zero,0(r17)
    7514:	88000115 	stw	zero,4(r17)
    7518:	88000215 	stw	zero,8(r17)
    751c:	88001915 	stw	zero,100(r17)
    7520:	8880038d 	sth	r2,14(r17)
    7524:	88000415 	stw	zero,16(r17)
    7528:	88000515 	stw	zero,20(r17)
    752c:	88000615 	stw	zero,24(r17)
    7530:	00088740 	call	8874 <memset>
    7534:	94000317 	ldw	r16,12(r18)
    7538:	00800484 	movi	r2,18
    753c:	8c400715 	stw	r17,28(r17)
    7540:	8d800815 	stw	r22,32(r17)
    7544:	8d400915 	stw	r21,36(r17)
    7548:	8d000a15 	stw	r20,40(r17)
    754c:	8cc00b15 	stw	r19,44(r17)
    7550:	8080030d 	sth	r2,12(r16)
    7554:	00800084 	movi	r2,2
    7558:	80000015 	stw	zero,0(r16)
    755c:	80000115 	stw	zero,4(r16)
    7560:	80000215 	stw	zero,8(r16)
    7564:	80001915 	stw	zero,100(r16)
    7568:	8080038d 	sth	r2,14(r16)
    756c:	80000415 	stw	zero,16(r16)
    7570:	80000515 	stw	zero,20(r16)
    7574:	80000615 	stw	zero,24(r16)
    7578:	b80d883a 	mov	r6,r23
    757c:	000b883a 	mov	r5,zero
    7580:	81001704 	addi	r4,r16,92
    7584:	00088740 	call	8874 <memset>
    7588:	00800044 	movi	r2,1
    758c:	84000715 	stw	r16,28(r16)
    7590:	85800815 	stw	r22,32(r16)
    7594:	85400915 	stw	r21,36(r16)
    7598:	85000a15 	stw	r20,40(r16)
    759c:	84c00b15 	stw	r19,44(r16)
    75a0:	90800e15 	stw	r2,56(r18)
    75a4:	dfc00817 	ldw	ra,32(sp)
    75a8:	ddc00717 	ldw	r23,28(sp)
    75ac:	dd800617 	ldw	r22,24(sp)
    75b0:	dd400517 	ldw	r21,20(sp)
    75b4:	dd000417 	ldw	r20,16(sp)
    75b8:	dcc00317 	ldw	r19,12(sp)
    75bc:	dc800217 	ldw	r18,8(sp)
    75c0:	dc400117 	ldw	r17,4(sp)
    75c4:	dc000017 	ldw	r16,0(sp)
    75c8:	dec00904 	addi	sp,sp,36
    75cc:	f800283a 	ret

000075d0 <__fp_lock>:
    75d0:	0005883a 	mov	r2,zero
    75d4:	f800283a 	ret

000075d8 <__sfmoreglue>:
    75d8:	defffc04 	addi	sp,sp,-16
    75dc:	dc800215 	stw	r18,8(sp)
    75e0:	2825883a 	mov	r18,r5
    75e4:	dc000015 	stw	r16,0(sp)
    75e8:	01401a04 	movi	r5,104
    75ec:	2021883a 	mov	r16,r4
    75f0:	913fffc4 	addi	r4,r18,-1
    75f4:	dfc00315 	stw	ra,12(sp)
    75f8:	dc400115 	stw	r17,4(sp)
    75fc:	000cffc0 	call	cffc <__mulsi3>
    7600:	8009883a 	mov	r4,r16
    7604:	11401d04 	addi	r5,r2,116
    7608:	1023883a 	mov	r17,r2
    760c:	00029800 	call	2980 <_malloc_r>
    7610:	1021883a 	mov	r16,r2
    7614:	10000726 	beq	r2,zero,7634 <__sfmoreglue+0x5c>
    7618:	11000304 	addi	r4,r2,12
    761c:	10000015 	stw	zero,0(r2)
    7620:	14800115 	stw	r18,4(r2)
    7624:	11000215 	stw	r4,8(r2)
    7628:	89801a04 	addi	r6,r17,104
    762c:	000b883a 	mov	r5,zero
    7630:	00088740 	call	8874 <memset>
    7634:	8005883a 	mov	r2,r16
    7638:	dfc00317 	ldw	ra,12(sp)
    763c:	dc800217 	ldw	r18,8(sp)
    7640:	dc400117 	ldw	r17,4(sp)
    7644:	dc000017 	ldw	r16,0(sp)
    7648:	dec00404 	addi	sp,sp,16
    764c:	f800283a 	ret

00007650 <__sfp>:
    7650:	defffb04 	addi	sp,sp,-20
    7654:	dc000015 	stw	r16,0(sp)
    7658:	04000074 	movhi	r16,1
    765c:	84130304 	addi	r16,r16,19468
    7660:	dcc00315 	stw	r19,12(sp)
    7664:	2027883a 	mov	r19,r4
    7668:	81000017 	ldw	r4,0(r16)
    766c:	dfc00415 	stw	ra,16(sp)
    7670:	dc800215 	stw	r18,8(sp)
    7674:	20800e17 	ldw	r2,56(r4)
    7678:	dc400115 	stw	r17,4(sp)
    767c:	1000021e 	bne	r2,zero,7688 <__sfp+0x38>
    7680:	00074340 	call	7434 <__sinit.part.1>
    7684:	81000017 	ldw	r4,0(r16)
    7688:	2480b804 	addi	r18,r4,736
    768c:	047fffc4 	movi	r17,-1
    7690:	91000117 	ldw	r4,4(r18)
    7694:	94000217 	ldw	r16,8(r18)
    7698:	213fffc4 	addi	r4,r4,-1
    769c:	20000a16 	blt	r4,zero,76c8 <__sfp+0x78>
    76a0:	8080030f 	ldh	r2,12(r16)
    76a4:	10000c26 	beq	r2,zero,76d8 <__sfp+0x88>
    76a8:	80c01d04 	addi	r3,r16,116
    76ac:	00000206 	br	76b8 <__sfp+0x68>
    76b0:	18bfe60f 	ldh	r2,-104(r3)
    76b4:	10000826 	beq	r2,zero,76d8 <__sfp+0x88>
    76b8:	213fffc4 	addi	r4,r4,-1
    76bc:	1c3ffd04 	addi	r16,r3,-12
    76c0:	18c01a04 	addi	r3,r3,104
    76c4:	247ffa1e 	bne	r4,r17,76b0 <__alt_exception_stack_pointer+0xf80076b0>
    76c8:	90800017 	ldw	r2,0(r18)
    76cc:	10001d26 	beq	r2,zero,7744 <__sfp+0xf4>
    76d0:	1025883a 	mov	r18,r2
    76d4:	003fee06 	br	7690 <__alt_exception_stack_pointer+0xf8007690>
    76d8:	00bfffc4 	movi	r2,-1
    76dc:	8080038d 	sth	r2,14(r16)
    76e0:	00800044 	movi	r2,1
    76e4:	8080030d 	sth	r2,12(r16)
    76e8:	80001915 	stw	zero,100(r16)
    76ec:	80000015 	stw	zero,0(r16)
    76f0:	80000215 	stw	zero,8(r16)
    76f4:	80000115 	stw	zero,4(r16)
    76f8:	80000415 	stw	zero,16(r16)
    76fc:	80000515 	stw	zero,20(r16)
    7700:	80000615 	stw	zero,24(r16)
    7704:	01800204 	movi	r6,8
    7708:	000b883a 	mov	r5,zero
    770c:	81001704 	addi	r4,r16,92
    7710:	00088740 	call	8874 <memset>
    7714:	8005883a 	mov	r2,r16
    7718:	80000c15 	stw	zero,48(r16)
    771c:	80000d15 	stw	zero,52(r16)
    7720:	80001115 	stw	zero,68(r16)
    7724:	80001215 	stw	zero,72(r16)
    7728:	dfc00417 	ldw	ra,16(sp)
    772c:	dcc00317 	ldw	r19,12(sp)
    7730:	dc800217 	ldw	r18,8(sp)
    7734:	dc400117 	ldw	r17,4(sp)
    7738:	dc000017 	ldw	r16,0(sp)
    773c:	dec00504 	addi	sp,sp,20
    7740:	f800283a 	ret
    7744:	01400104 	movi	r5,4
    7748:	9809883a 	mov	r4,r19
    774c:	00075d80 	call	75d8 <__sfmoreglue>
    7750:	90800015 	stw	r2,0(r18)
    7754:	103fde1e 	bne	r2,zero,76d0 <__alt_exception_stack_pointer+0xf80076d0>
    7758:	00800304 	movi	r2,12
    775c:	98800015 	stw	r2,0(r19)
    7760:	0005883a 	mov	r2,zero
    7764:	003ff006 	br	7728 <__alt_exception_stack_pointer+0xf8007728>

00007768 <_cleanup>:
    7768:	00800074 	movhi	r2,1
    776c:	10930304 	addi	r2,r2,19468
    7770:	11000017 	ldw	r4,0(r2)
    7774:	01400074 	movhi	r5,1
    7778:	296eb304 	addi	r5,r5,-17716
    777c:	00081901 	jmpi	8190 <_fwalk_reent>

00007780 <__sinit>:
    7780:	20800e17 	ldw	r2,56(r4)
    7784:	10000126 	beq	r2,zero,778c <__sinit+0xc>
    7788:	f800283a 	ret
    778c:	00074341 	jmpi	7434 <__sinit.part.1>

00007790 <__sfp_lock_acquire>:
    7790:	f800283a 	ret

00007794 <__sfp_lock_release>:
    7794:	f800283a 	ret

00007798 <__sinit_lock_acquire>:
    7798:	f800283a 	ret

0000779c <__sinit_lock_release>:
    779c:	f800283a 	ret

000077a0 <__fp_lock_all>:
    77a0:	00800074 	movhi	r2,1
    77a4:	10930404 	addi	r2,r2,19472
    77a8:	11000017 	ldw	r4,0(r2)
    77ac:	01400034 	movhi	r5,0
    77b0:	295d7404 	addi	r5,r5,30160
    77b4:	00080cc1 	jmpi	80cc <_fwalk>

000077b8 <__fp_unlock_all>:
    77b8:	00800074 	movhi	r2,1
    77bc:	10930404 	addi	r2,r2,19472
    77c0:	11000017 	ldw	r4,0(r2)
    77c4:	01400034 	movhi	r5,0
    77c8:	295d0804 	addi	r5,r5,29728
    77cc:	00080cc1 	jmpi	80cc <_fwalk>

000077d0 <_malloc_trim_r>:
    77d0:	defffb04 	addi	sp,sp,-20
    77d4:	dcc00315 	stw	r19,12(sp)
    77d8:	04c00074 	movhi	r19,1
    77dc:	dc800215 	stw	r18,8(sp)
    77e0:	dc400115 	stw	r17,4(sp)
    77e4:	dc000015 	stw	r16,0(sp)
    77e8:	dfc00415 	stw	ra,16(sp)
    77ec:	2821883a 	mov	r16,r5
    77f0:	9ccd3a04 	addi	r19,r19,13544
    77f4:	2025883a 	mov	r18,r4
    77f8:	000fe640 	call	fe64 <__malloc_lock>
    77fc:	98800217 	ldw	r2,8(r19)
    7800:	14400117 	ldw	r17,4(r2)
    7804:	00bfff04 	movi	r2,-4
    7808:	88a2703a 	and	r17,r17,r2
    780c:	8c21c83a 	sub	r16,r17,r16
    7810:	8403fbc4 	addi	r16,r16,4079
    7814:	8020d33a 	srli	r16,r16,12
    7818:	0083ffc4 	movi	r2,4095
    781c:	843fffc4 	addi	r16,r16,-1
    7820:	8020933a 	slli	r16,r16,12
    7824:	1400060e 	bge	r2,r16,7840 <_malloc_trim_r+0x70>
    7828:	000b883a 	mov	r5,zero
    782c:	9009883a 	mov	r4,r18
    7830:	00032cc0 	call	32cc <_sbrk_r>
    7834:	98c00217 	ldw	r3,8(r19)
    7838:	1c47883a 	add	r3,r3,r17
    783c:	10c00a26 	beq	r2,r3,7868 <_malloc_trim_r+0x98>
    7840:	9009883a 	mov	r4,r18
    7844:	000fe880 	call	fe88 <__malloc_unlock>
    7848:	0005883a 	mov	r2,zero
    784c:	dfc00417 	ldw	ra,16(sp)
    7850:	dcc00317 	ldw	r19,12(sp)
    7854:	dc800217 	ldw	r18,8(sp)
    7858:	dc400117 	ldw	r17,4(sp)
    785c:	dc000017 	ldw	r16,0(sp)
    7860:	dec00504 	addi	sp,sp,20
    7864:	f800283a 	ret
    7868:	040bc83a 	sub	r5,zero,r16
    786c:	9009883a 	mov	r4,r18
    7870:	00032cc0 	call	32cc <_sbrk_r>
    7874:	00ffffc4 	movi	r3,-1
    7878:	10c00d26 	beq	r2,r3,78b0 <_malloc_trim_r+0xe0>
    787c:	00c00074 	movhi	r3,1
    7880:	18da0704 	addi	r3,r3,26652
    7884:	18800017 	ldw	r2,0(r3)
    7888:	99000217 	ldw	r4,8(r19)
    788c:	8c23c83a 	sub	r17,r17,r16
    7890:	8c400054 	ori	r17,r17,1
    7894:	1421c83a 	sub	r16,r2,r16
    7898:	24400115 	stw	r17,4(r4)
    789c:	9009883a 	mov	r4,r18
    78a0:	1c000015 	stw	r16,0(r3)
    78a4:	000fe880 	call	fe88 <__malloc_unlock>
    78a8:	00800044 	movi	r2,1
    78ac:	003fe706 	br	784c <__alt_exception_stack_pointer+0xf800784c>
    78b0:	000b883a 	mov	r5,zero
    78b4:	9009883a 	mov	r4,r18
    78b8:	00032cc0 	call	32cc <_sbrk_r>
    78bc:	99000217 	ldw	r4,8(r19)
    78c0:	014003c4 	movi	r5,15
    78c4:	1107c83a 	sub	r3,r2,r4
    78c8:	28ffdd0e 	bge	r5,r3,7840 <__alt_exception_stack_pointer+0xf8007840>
    78cc:	01400074 	movhi	r5,1
    78d0:	29530504 	addi	r5,r5,19476
    78d4:	29400017 	ldw	r5,0(r5)
    78d8:	18c00054 	ori	r3,r3,1
    78dc:	20c00115 	stw	r3,4(r4)
    78e0:	00c00074 	movhi	r3,1
    78e4:	1145c83a 	sub	r2,r2,r5
    78e8:	18da0704 	addi	r3,r3,26652
    78ec:	18800015 	stw	r2,0(r3)
    78f0:	003fd306 	br	7840 <__alt_exception_stack_pointer+0xf8007840>

000078f4 <_free_r>:
    78f4:	28004126 	beq	r5,zero,79fc <_free_r+0x108>
    78f8:	defffd04 	addi	sp,sp,-12
    78fc:	dc400115 	stw	r17,4(sp)
    7900:	dc000015 	stw	r16,0(sp)
    7904:	2023883a 	mov	r17,r4
    7908:	2821883a 	mov	r16,r5
    790c:	dfc00215 	stw	ra,8(sp)
    7910:	000fe640 	call	fe64 <__malloc_lock>
    7914:	81ffff17 	ldw	r7,-4(r16)
    7918:	00bfff84 	movi	r2,-2
    791c:	01000074 	movhi	r4,1
    7920:	81bffe04 	addi	r6,r16,-8
    7924:	3884703a 	and	r2,r7,r2
    7928:	210d3a04 	addi	r4,r4,13544
    792c:	308b883a 	add	r5,r6,r2
    7930:	2a400117 	ldw	r9,4(r5)
    7934:	22000217 	ldw	r8,8(r4)
    7938:	00ffff04 	movi	r3,-4
    793c:	48c6703a 	and	r3,r9,r3
    7940:	2a005726 	beq	r5,r8,7aa0 <_free_r+0x1ac>
    7944:	28c00115 	stw	r3,4(r5)
    7948:	39c0004c 	andi	r7,r7,1
    794c:	3800091e 	bne	r7,zero,7974 <_free_r+0x80>
    7950:	823ffe17 	ldw	r8,-8(r16)
    7954:	22400204 	addi	r9,r4,8
    7958:	320dc83a 	sub	r6,r6,r8
    795c:	31c00217 	ldw	r7,8(r6)
    7960:	1205883a 	add	r2,r2,r8
    7964:	3a406526 	beq	r7,r9,7afc <_free_r+0x208>
    7968:	32000317 	ldw	r8,12(r6)
    796c:	3a000315 	stw	r8,12(r7)
    7970:	41c00215 	stw	r7,8(r8)
    7974:	28cf883a 	add	r7,r5,r3
    7978:	39c00117 	ldw	r7,4(r7)
    797c:	39c0004c 	andi	r7,r7,1
    7980:	38003a26 	beq	r7,zero,7a6c <_free_r+0x178>
    7984:	10c00054 	ori	r3,r2,1
    7988:	30c00115 	stw	r3,4(r6)
    798c:	3087883a 	add	r3,r6,r2
    7990:	18800015 	stw	r2,0(r3)
    7994:	00c07fc4 	movi	r3,511
    7998:	18801936 	bltu	r3,r2,7a00 <_free_r+0x10c>
    799c:	1004d0fa 	srli	r2,r2,3
    79a0:	01c00044 	movi	r7,1
    79a4:	21400117 	ldw	r5,4(r4)
    79a8:	10c00044 	addi	r3,r2,1
    79ac:	18c7883a 	add	r3,r3,r3
    79b0:	1005d0ba 	srai	r2,r2,2
    79b4:	18c7883a 	add	r3,r3,r3
    79b8:	18c7883a 	add	r3,r3,r3
    79bc:	1907883a 	add	r3,r3,r4
    79c0:	3884983a 	sll	r2,r7,r2
    79c4:	19c00017 	ldw	r7,0(r3)
    79c8:	1a3ffe04 	addi	r8,r3,-8
    79cc:	1144b03a 	or	r2,r2,r5
    79d0:	32000315 	stw	r8,12(r6)
    79d4:	31c00215 	stw	r7,8(r6)
    79d8:	20800115 	stw	r2,4(r4)
    79dc:	19800015 	stw	r6,0(r3)
    79e0:	39800315 	stw	r6,12(r7)
    79e4:	8809883a 	mov	r4,r17
    79e8:	dfc00217 	ldw	ra,8(sp)
    79ec:	dc400117 	ldw	r17,4(sp)
    79f0:	dc000017 	ldw	r16,0(sp)
    79f4:	dec00304 	addi	sp,sp,12
    79f8:	000fe881 	jmpi	fe88 <__malloc_unlock>
    79fc:	f800283a 	ret
    7a00:	100ad27a 	srli	r5,r2,9
    7a04:	00c00104 	movi	r3,4
    7a08:	19404a36 	bltu	r3,r5,7b34 <_free_r+0x240>
    7a0c:	100ad1ba 	srli	r5,r2,6
    7a10:	28c00e44 	addi	r3,r5,57
    7a14:	18c7883a 	add	r3,r3,r3
    7a18:	29400e04 	addi	r5,r5,56
    7a1c:	18c7883a 	add	r3,r3,r3
    7a20:	18c7883a 	add	r3,r3,r3
    7a24:	1909883a 	add	r4,r3,r4
    7a28:	20c00017 	ldw	r3,0(r4)
    7a2c:	01c00074 	movhi	r7,1
    7a30:	213ffe04 	addi	r4,r4,-8
    7a34:	39cd3a04 	addi	r7,r7,13544
    7a38:	20c04426 	beq	r4,r3,7b4c <_free_r+0x258>
    7a3c:	01ffff04 	movi	r7,-4
    7a40:	19400117 	ldw	r5,4(r3)
    7a44:	29ca703a 	and	r5,r5,r7
    7a48:	1140022e 	bgeu	r2,r5,7a54 <_free_r+0x160>
    7a4c:	18c00217 	ldw	r3,8(r3)
    7a50:	20fffb1e 	bne	r4,r3,7a40 <__alt_exception_stack_pointer+0xf8007a40>
    7a54:	19000317 	ldw	r4,12(r3)
    7a58:	31000315 	stw	r4,12(r6)
    7a5c:	30c00215 	stw	r3,8(r6)
    7a60:	21800215 	stw	r6,8(r4)
    7a64:	19800315 	stw	r6,12(r3)
    7a68:	003fde06 	br	79e4 <__alt_exception_stack_pointer+0xf80079e4>
    7a6c:	29c00217 	ldw	r7,8(r5)
    7a70:	10c5883a 	add	r2,r2,r3
    7a74:	00c00074 	movhi	r3,1
    7a78:	18cd3c04 	addi	r3,r3,13552
    7a7c:	38c03b26 	beq	r7,r3,7b6c <_free_r+0x278>
    7a80:	2a000317 	ldw	r8,12(r5)
    7a84:	11400054 	ori	r5,r2,1
    7a88:	3087883a 	add	r3,r6,r2
    7a8c:	3a000315 	stw	r8,12(r7)
    7a90:	41c00215 	stw	r7,8(r8)
    7a94:	31400115 	stw	r5,4(r6)
    7a98:	18800015 	stw	r2,0(r3)
    7a9c:	003fbd06 	br	7994 <__alt_exception_stack_pointer+0xf8007994>
    7aa0:	39c0004c 	andi	r7,r7,1
    7aa4:	10c5883a 	add	r2,r2,r3
    7aa8:	3800071e 	bne	r7,zero,7ac8 <_free_r+0x1d4>
    7aac:	81fffe17 	ldw	r7,-8(r16)
    7ab0:	31cdc83a 	sub	r6,r6,r7
    7ab4:	30c00317 	ldw	r3,12(r6)
    7ab8:	31400217 	ldw	r5,8(r6)
    7abc:	11c5883a 	add	r2,r2,r7
    7ac0:	28c00315 	stw	r3,12(r5)
    7ac4:	19400215 	stw	r5,8(r3)
    7ac8:	10c00054 	ori	r3,r2,1
    7acc:	30c00115 	stw	r3,4(r6)
    7ad0:	00c00074 	movhi	r3,1
    7ad4:	18d30604 	addi	r3,r3,19480
    7ad8:	18c00017 	ldw	r3,0(r3)
    7adc:	21800215 	stw	r6,8(r4)
    7ae0:	10ffc036 	bltu	r2,r3,79e4 <__alt_exception_stack_pointer+0xf80079e4>
    7ae4:	00800074 	movhi	r2,1
    7ae8:	1099fb04 	addi	r2,r2,26604
    7aec:	11400017 	ldw	r5,0(r2)
    7af0:	8809883a 	mov	r4,r17
    7af4:	00077d00 	call	77d0 <_malloc_trim_r>
    7af8:	003fba06 	br	79e4 <__alt_exception_stack_pointer+0xf80079e4>
    7afc:	28c9883a 	add	r4,r5,r3
    7b00:	21000117 	ldw	r4,4(r4)
    7b04:	2100004c 	andi	r4,r4,1
    7b08:	2000391e 	bne	r4,zero,7bf0 <_free_r+0x2fc>
    7b0c:	29c00217 	ldw	r7,8(r5)
    7b10:	29000317 	ldw	r4,12(r5)
    7b14:	1885883a 	add	r2,r3,r2
    7b18:	10c00054 	ori	r3,r2,1
    7b1c:	39000315 	stw	r4,12(r7)
    7b20:	21c00215 	stw	r7,8(r4)
    7b24:	30c00115 	stw	r3,4(r6)
    7b28:	308d883a 	add	r6,r6,r2
    7b2c:	30800015 	stw	r2,0(r6)
    7b30:	003fac06 	br	79e4 <__alt_exception_stack_pointer+0xf80079e4>
    7b34:	00c00504 	movi	r3,20
    7b38:	19401536 	bltu	r3,r5,7b90 <_free_r+0x29c>
    7b3c:	28c01704 	addi	r3,r5,92
    7b40:	18c7883a 	add	r3,r3,r3
    7b44:	294016c4 	addi	r5,r5,91
    7b48:	003fb406 	br	7a1c <__alt_exception_stack_pointer+0xf8007a1c>
    7b4c:	280bd0ba 	srai	r5,r5,2
    7b50:	00c00044 	movi	r3,1
    7b54:	38800117 	ldw	r2,4(r7)
    7b58:	194a983a 	sll	r5,r3,r5
    7b5c:	2007883a 	mov	r3,r4
    7b60:	2884b03a 	or	r2,r5,r2
    7b64:	38800115 	stw	r2,4(r7)
    7b68:	003fbb06 	br	7a58 <__alt_exception_stack_pointer+0xf8007a58>
    7b6c:	21800515 	stw	r6,20(r4)
    7b70:	21800415 	stw	r6,16(r4)
    7b74:	10c00054 	ori	r3,r2,1
    7b78:	31c00315 	stw	r7,12(r6)
    7b7c:	31c00215 	stw	r7,8(r6)
    7b80:	30c00115 	stw	r3,4(r6)
    7b84:	308d883a 	add	r6,r6,r2
    7b88:	30800015 	stw	r2,0(r6)
    7b8c:	003f9506 	br	79e4 <__alt_exception_stack_pointer+0xf80079e4>
    7b90:	00c01504 	movi	r3,84
    7b94:	19400536 	bltu	r3,r5,7bac <_free_r+0x2b8>
    7b98:	100ad33a 	srli	r5,r2,12
    7b9c:	28c01bc4 	addi	r3,r5,111
    7ba0:	18c7883a 	add	r3,r3,r3
    7ba4:	29401b84 	addi	r5,r5,110
    7ba8:	003f9c06 	br	7a1c <__alt_exception_stack_pointer+0xf8007a1c>
    7bac:	00c05504 	movi	r3,340
    7bb0:	19400536 	bltu	r3,r5,7bc8 <_free_r+0x2d4>
    7bb4:	100ad3fa 	srli	r5,r2,15
    7bb8:	28c01e04 	addi	r3,r5,120
    7bbc:	18c7883a 	add	r3,r3,r3
    7bc0:	29401dc4 	addi	r5,r5,119
    7bc4:	003f9506 	br	7a1c <__alt_exception_stack_pointer+0xf8007a1c>
    7bc8:	00c15504 	movi	r3,1364
    7bcc:	19400536 	bltu	r3,r5,7be4 <_free_r+0x2f0>
    7bd0:	100ad4ba 	srli	r5,r2,18
    7bd4:	28c01f44 	addi	r3,r5,125
    7bd8:	18c7883a 	add	r3,r3,r3
    7bdc:	29401f04 	addi	r5,r5,124
    7be0:	003f8e06 	br	7a1c <__alt_exception_stack_pointer+0xf8007a1c>
    7be4:	00c03f84 	movi	r3,254
    7be8:	01401f84 	movi	r5,126
    7bec:	003f8b06 	br	7a1c <__alt_exception_stack_pointer+0xf8007a1c>
    7bf0:	10c00054 	ori	r3,r2,1
    7bf4:	30c00115 	stw	r3,4(r6)
    7bf8:	308d883a 	add	r6,r6,r2
    7bfc:	30800015 	stw	r2,0(r6)
    7c00:	003f7806 	br	79e4 <__alt_exception_stack_pointer+0xf80079e4>

00007c04 <__sfvwrite_r>:
    7c04:	30800217 	ldw	r2,8(r6)
    7c08:	10006726 	beq	r2,zero,7da8 <__sfvwrite_r+0x1a4>
    7c0c:	28c0030b 	ldhu	r3,12(r5)
    7c10:	defff404 	addi	sp,sp,-48
    7c14:	dd400715 	stw	r21,28(sp)
    7c18:	dd000615 	stw	r20,24(sp)
    7c1c:	dc000215 	stw	r16,8(sp)
    7c20:	dfc00b15 	stw	ra,44(sp)
    7c24:	df000a15 	stw	fp,40(sp)
    7c28:	ddc00915 	stw	r23,36(sp)
    7c2c:	dd800815 	stw	r22,32(sp)
    7c30:	dcc00515 	stw	r19,20(sp)
    7c34:	dc800415 	stw	r18,16(sp)
    7c38:	dc400315 	stw	r17,12(sp)
    7c3c:	1880020c 	andi	r2,r3,8
    7c40:	2821883a 	mov	r16,r5
    7c44:	202b883a 	mov	r21,r4
    7c48:	3029883a 	mov	r20,r6
    7c4c:	10002726 	beq	r2,zero,7cec <__sfvwrite_r+0xe8>
    7c50:	28800417 	ldw	r2,16(r5)
    7c54:	10002526 	beq	r2,zero,7cec <__sfvwrite_r+0xe8>
    7c58:	1880008c 	andi	r2,r3,2
    7c5c:	a4400017 	ldw	r17,0(r20)
    7c60:	10002a26 	beq	r2,zero,7d0c <__sfvwrite_r+0x108>
    7c64:	05a00034 	movhi	r22,32768
    7c68:	0027883a 	mov	r19,zero
    7c6c:	0025883a 	mov	r18,zero
    7c70:	b5bf0004 	addi	r22,r22,-1024
    7c74:	980d883a 	mov	r6,r19
    7c78:	a809883a 	mov	r4,r21
    7c7c:	90004626 	beq	r18,zero,7d98 <__sfvwrite_r+0x194>
    7c80:	900f883a 	mov	r7,r18
    7c84:	b480022e 	bgeu	r22,r18,7c90 <__sfvwrite_r+0x8c>
    7c88:	01e00034 	movhi	r7,32768
    7c8c:	39ff0004 	addi	r7,r7,-1024
    7c90:	80800917 	ldw	r2,36(r16)
    7c94:	81400717 	ldw	r5,28(r16)
    7c98:	103ee83a 	callr	r2
    7c9c:	00805a0e 	bge	zero,r2,7e08 <__sfvwrite_r+0x204>
    7ca0:	a0c00217 	ldw	r3,8(r20)
    7ca4:	98a7883a 	add	r19,r19,r2
    7ca8:	90a5c83a 	sub	r18,r18,r2
    7cac:	1885c83a 	sub	r2,r3,r2
    7cb0:	a0800215 	stw	r2,8(r20)
    7cb4:	103fef1e 	bne	r2,zero,7c74 <__alt_exception_stack_pointer+0xf8007c74>
    7cb8:	0005883a 	mov	r2,zero
    7cbc:	dfc00b17 	ldw	ra,44(sp)
    7cc0:	df000a17 	ldw	fp,40(sp)
    7cc4:	ddc00917 	ldw	r23,36(sp)
    7cc8:	dd800817 	ldw	r22,32(sp)
    7ccc:	dd400717 	ldw	r21,28(sp)
    7cd0:	dd000617 	ldw	r20,24(sp)
    7cd4:	dcc00517 	ldw	r19,20(sp)
    7cd8:	dc800417 	ldw	r18,16(sp)
    7cdc:	dc400317 	ldw	r17,12(sp)
    7ce0:	dc000217 	ldw	r16,8(sp)
    7ce4:	dec00c04 	addi	sp,sp,48
    7ce8:	f800283a 	ret
    7cec:	800b883a 	mov	r5,r16
    7cf0:	a809883a 	mov	r4,r21
    7cf4:	00057740 	call	5774 <__swsetup_r>
    7cf8:	1000ee1e 	bne	r2,zero,80b4 <__sfvwrite_r+0x4b0>
    7cfc:	80c0030b 	ldhu	r3,12(r16)
    7d00:	a4400017 	ldw	r17,0(r20)
    7d04:	1880008c 	andi	r2,r3,2
    7d08:	103fd61e 	bne	r2,zero,7c64 <__alt_exception_stack_pointer+0xf8007c64>
    7d0c:	1880004c 	andi	r2,r3,1
    7d10:	1000421e 	bne	r2,zero,7e1c <__sfvwrite_r+0x218>
    7d14:	0039883a 	mov	fp,zero
    7d18:	0025883a 	mov	r18,zero
    7d1c:	90001a26 	beq	r18,zero,7d88 <__sfvwrite_r+0x184>
    7d20:	1880800c 	andi	r2,r3,512
    7d24:	84c00217 	ldw	r19,8(r16)
    7d28:	10002126 	beq	r2,zero,7db0 <__sfvwrite_r+0x1ac>
    7d2c:	982f883a 	mov	r23,r19
    7d30:	94c09636 	bltu	r18,r19,7f8c <__sfvwrite_r+0x388>
    7d34:	1881200c 	andi	r2,r3,1152
    7d38:	1000a11e 	bne	r2,zero,7fc0 <__sfvwrite_r+0x3bc>
    7d3c:	81000017 	ldw	r4,0(r16)
    7d40:	b80d883a 	mov	r6,r23
    7d44:	e00b883a 	mov	r5,fp
    7d48:	00087180 	call	8718 <memmove>
    7d4c:	80c00217 	ldw	r3,8(r16)
    7d50:	81000017 	ldw	r4,0(r16)
    7d54:	9005883a 	mov	r2,r18
    7d58:	1ce7c83a 	sub	r19,r3,r19
    7d5c:	25cf883a 	add	r7,r4,r23
    7d60:	84c00215 	stw	r19,8(r16)
    7d64:	81c00015 	stw	r7,0(r16)
    7d68:	a0c00217 	ldw	r3,8(r20)
    7d6c:	e0b9883a 	add	fp,fp,r2
    7d70:	90a5c83a 	sub	r18,r18,r2
    7d74:	18a7c83a 	sub	r19,r3,r2
    7d78:	a4c00215 	stw	r19,8(r20)
    7d7c:	983fce26 	beq	r19,zero,7cb8 <__alt_exception_stack_pointer+0xf8007cb8>
    7d80:	80c0030b 	ldhu	r3,12(r16)
    7d84:	903fe61e 	bne	r18,zero,7d20 <__alt_exception_stack_pointer+0xf8007d20>
    7d88:	8f000017 	ldw	fp,0(r17)
    7d8c:	8c800117 	ldw	r18,4(r17)
    7d90:	8c400204 	addi	r17,r17,8
    7d94:	003fe106 	br	7d1c <__alt_exception_stack_pointer+0xf8007d1c>
    7d98:	8cc00017 	ldw	r19,0(r17)
    7d9c:	8c800117 	ldw	r18,4(r17)
    7da0:	8c400204 	addi	r17,r17,8
    7da4:	003fb306 	br	7c74 <__alt_exception_stack_pointer+0xf8007c74>
    7da8:	0005883a 	mov	r2,zero
    7dac:	f800283a 	ret
    7db0:	81000017 	ldw	r4,0(r16)
    7db4:	80800417 	ldw	r2,16(r16)
    7db8:	11005a36 	bltu	r2,r4,7f24 <__sfvwrite_r+0x320>
    7dbc:	85c00517 	ldw	r23,20(r16)
    7dc0:	95c05836 	bltu	r18,r23,7f24 <__sfvwrite_r+0x320>
    7dc4:	00a00034 	movhi	r2,32768
    7dc8:	10bfffc4 	addi	r2,r2,-1
    7dcc:	9009883a 	mov	r4,r18
    7dd0:	1480012e 	bgeu	r2,r18,7dd8 <__sfvwrite_r+0x1d4>
    7dd4:	1009883a 	mov	r4,r2
    7dd8:	b80b883a 	mov	r5,r23
    7ddc:	000ce480 	call	ce48 <__divsi3>
    7de0:	b80b883a 	mov	r5,r23
    7de4:	1009883a 	mov	r4,r2
    7de8:	000cffc0 	call	cffc <__mulsi3>
    7dec:	81400717 	ldw	r5,28(r16)
    7df0:	80c00917 	ldw	r3,36(r16)
    7df4:	100f883a 	mov	r7,r2
    7df8:	e00d883a 	mov	r6,fp
    7dfc:	a809883a 	mov	r4,r21
    7e00:	183ee83a 	callr	r3
    7e04:	00bfd816 	blt	zero,r2,7d68 <__alt_exception_stack_pointer+0xf8007d68>
    7e08:	8080030b 	ldhu	r2,12(r16)
    7e0c:	10801014 	ori	r2,r2,64
    7e10:	8080030d 	sth	r2,12(r16)
    7e14:	00bfffc4 	movi	r2,-1
    7e18:	003fa806 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    7e1c:	0027883a 	mov	r19,zero
    7e20:	0011883a 	mov	r8,zero
    7e24:	0039883a 	mov	fp,zero
    7e28:	0025883a 	mov	r18,zero
    7e2c:	90001f26 	beq	r18,zero,7eac <__sfvwrite_r+0x2a8>
    7e30:	40005a26 	beq	r8,zero,7f9c <__sfvwrite_r+0x398>
    7e34:	982d883a 	mov	r22,r19
    7e38:	94c0012e 	bgeu	r18,r19,7e40 <__sfvwrite_r+0x23c>
    7e3c:	902d883a 	mov	r22,r18
    7e40:	81000017 	ldw	r4,0(r16)
    7e44:	80800417 	ldw	r2,16(r16)
    7e48:	b02f883a 	mov	r23,r22
    7e4c:	81c00517 	ldw	r7,20(r16)
    7e50:	1100032e 	bgeu	r2,r4,7e60 <__sfvwrite_r+0x25c>
    7e54:	80c00217 	ldw	r3,8(r16)
    7e58:	38c7883a 	add	r3,r7,r3
    7e5c:	1d801816 	blt	r3,r22,7ec0 <__sfvwrite_r+0x2bc>
    7e60:	b1c03e16 	blt	r22,r7,7f5c <__sfvwrite_r+0x358>
    7e64:	80800917 	ldw	r2,36(r16)
    7e68:	81400717 	ldw	r5,28(r16)
    7e6c:	e00d883a 	mov	r6,fp
    7e70:	da000115 	stw	r8,4(sp)
    7e74:	a809883a 	mov	r4,r21
    7e78:	103ee83a 	callr	r2
    7e7c:	102f883a 	mov	r23,r2
    7e80:	da000117 	ldw	r8,4(sp)
    7e84:	00bfe00e 	bge	zero,r2,7e08 <__alt_exception_stack_pointer+0xf8007e08>
    7e88:	9de7c83a 	sub	r19,r19,r23
    7e8c:	98001f26 	beq	r19,zero,7f0c <__sfvwrite_r+0x308>
    7e90:	a0800217 	ldw	r2,8(r20)
    7e94:	e5f9883a 	add	fp,fp,r23
    7e98:	95e5c83a 	sub	r18,r18,r23
    7e9c:	15efc83a 	sub	r23,r2,r23
    7ea0:	a5c00215 	stw	r23,8(r20)
    7ea4:	b83f8426 	beq	r23,zero,7cb8 <__alt_exception_stack_pointer+0xf8007cb8>
    7ea8:	903fe11e 	bne	r18,zero,7e30 <__alt_exception_stack_pointer+0xf8007e30>
    7eac:	8f000017 	ldw	fp,0(r17)
    7eb0:	8c800117 	ldw	r18,4(r17)
    7eb4:	0011883a 	mov	r8,zero
    7eb8:	8c400204 	addi	r17,r17,8
    7ebc:	003fdb06 	br	7e2c <__alt_exception_stack_pointer+0xf8007e2c>
    7ec0:	180d883a 	mov	r6,r3
    7ec4:	e00b883a 	mov	r5,fp
    7ec8:	da000115 	stw	r8,4(sp)
    7ecc:	d8c00015 	stw	r3,0(sp)
    7ed0:	00087180 	call	8718 <memmove>
    7ed4:	d8c00017 	ldw	r3,0(sp)
    7ed8:	80800017 	ldw	r2,0(r16)
    7edc:	800b883a 	mov	r5,r16
    7ee0:	a809883a 	mov	r4,r21
    7ee4:	10c5883a 	add	r2,r2,r3
    7ee8:	80800015 	stw	r2,0(r16)
    7eec:	d8c00015 	stw	r3,0(sp)
    7ef0:	00073940 	call	7394 <_fflush_r>
    7ef4:	d8c00017 	ldw	r3,0(sp)
    7ef8:	da000117 	ldw	r8,4(sp)
    7efc:	103fc21e 	bne	r2,zero,7e08 <__alt_exception_stack_pointer+0xf8007e08>
    7f00:	182f883a 	mov	r23,r3
    7f04:	9de7c83a 	sub	r19,r19,r23
    7f08:	983fe11e 	bne	r19,zero,7e90 <__alt_exception_stack_pointer+0xf8007e90>
    7f0c:	800b883a 	mov	r5,r16
    7f10:	a809883a 	mov	r4,r21
    7f14:	00073940 	call	7394 <_fflush_r>
    7f18:	103fbb1e 	bne	r2,zero,7e08 <__alt_exception_stack_pointer+0xf8007e08>
    7f1c:	0011883a 	mov	r8,zero
    7f20:	003fdb06 	br	7e90 <__alt_exception_stack_pointer+0xf8007e90>
    7f24:	94c0012e 	bgeu	r18,r19,7f2c <__sfvwrite_r+0x328>
    7f28:	9027883a 	mov	r19,r18
    7f2c:	980d883a 	mov	r6,r19
    7f30:	e00b883a 	mov	r5,fp
    7f34:	00087180 	call	8718 <memmove>
    7f38:	80800217 	ldw	r2,8(r16)
    7f3c:	80c00017 	ldw	r3,0(r16)
    7f40:	14c5c83a 	sub	r2,r2,r19
    7f44:	1cc7883a 	add	r3,r3,r19
    7f48:	80800215 	stw	r2,8(r16)
    7f4c:	80c00015 	stw	r3,0(r16)
    7f50:	10004326 	beq	r2,zero,8060 <__sfvwrite_r+0x45c>
    7f54:	9805883a 	mov	r2,r19
    7f58:	003f8306 	br	7d68 <__alt_exception_stack_pointer+0xf8007d68>
    7f5c:	b00d883a 	mov	r6,r22
    7f60:	e00b883a 	mov	r5,fp
    7f64:	da000115 	stw	r8,4(sp)
    7f68:	00087180 	call	8718 <memmove>
    7f6c:	80800217 	ldw	r2,8(r16)
    7f70:	80c00017 	ldw	r3,0(r16)
    7f74:	da000117 	ldw	r8,4(sp)
    7f78:	1585c83a 	sub	r2,r2,r22
    7f7c:	1dad883a 	add	r22,r3,r22
    7f80:	80800215 	stw	r2,8(r16)
    7f84:	85800015 	stw	r22,0(r16)
    7f88:	003fbf06 	br	7e88 <__alt_exception_stack_pointer+0xf8007e88>
    7f8c:	81000017 	ldw	r4,0(r16)
    7f90:	9027883a 	mov	r19,r18
    7f94:	902f883a 	mov	r23,r18
    7f98:	003f6906 	br	7d40 <__alt_exception_stack_pointer+0xf8007d40>
    7f9c:	900d883a 	mov	r6,r18
    7fa0:	01400284 	movi	r5,10
    7fa4:	e009883a 	mov	r4,fp
    7fa8:	00084ec0 	call	84ec <memchr>
    7fac:	10003e26 	beq	r2,zero,80a8 <__sfvwrite_r+0x4a4>
    7fb0:	10800044 	addi	r2,r2,1
    7fb4:	1727c83a 	sub	r19,r2,fp
    7fb8:	02000044 	movi	r8,1
    7fbc:	003f9d06 	br	7e34 <__alt_exception_stack_pointer+0xf8007e34>
    7fc0:	80800517 	ldw	r2,20(r16)
    7fc4:	81400417 	ldw	r5,16(r16)
    7fc8:	81c00017 	ldw	r7,0(r16)
    7fcc:	10a7883a 	add	r19,r2,r2
    7fd0:	9885883a 	add	r2,r19,r2
    7fd4:	1026d7fa 	srli	r19,r2,31
    7fd8:	396dc83a 	sub	r22,r7,r5
    7fdc:	b1000044 	addi	r4,r22,1
    7fe0:	9885883a 	add	r2,r19,r2
    7fe4:	1027d07a 	srai	r19,r2,1
    7fe8:	2485883a 	add	r2,r4,r18
    7fec:	980d883a 	mov	r6,r19
    7ff0:	9880022e 	bgeu	r19,r2,7ffc <__sfvwrite_r+0x3f8>
    7ff4:	1027883a 	mov	r19,r2
    7ff8:	100d883a 	mov	r6,r2
    7ffc:	18c1000c 	andi	r3,r3,1024
    8000:	18001c26 	beq	r3,zero,8074 <__sfvwrite_r+0x470>
    8004:	300b883a 	mov	r5,r6
    8008:	a809883a 	mov	r4,r21
    800c:	00029800 	call	2980 <_malloc_r>
    8010:	102f883a 	mov	r23,r2
    8014:	10002926 	beq	r2,zero,80bc <__sfvwrite_r+0x4b8>
    8018:	81400417 	ldw	r5,16(r16)
    801c:	b00d883a 	mov	r6,r22
    8020:	1009883a 	mov	r4,r2
    8024:	00085d00 	call	85d0 <memcpy>
    8028:	8080030b 	ldhu	r2,12(r16)
    802c:	00fedfc4 	movi	r3,-1153
    8030:	10c4703a 	and	r2,r2,r3
    8034:	10802014 	ori	r2,r2,128
    8038:	8080030d 	sth	r2,12(r16)
    803c:	bd89883a 	add	r4,r23,r22
    8040:	9d8fc83a 	sub	r7,r19,r22
    8044:	85c00415 	stw	r23,16(r16)
    8048:	84c00515 	stw	r19,20(r16)
    804c:	81000015 	stw	r4,0(r16)
    8050:	9027883a 	mov	r19,r18
    8054:	81c00215 	stw	r7,8(r16)
    8058:	902f883a 	mov	r23,r18
    805c:	003f3806 	br	7d40 <__alt_exception_stack_pointer+0xf8007d40>
    8060:	800b883a 	mov	r5,r16
    8064:	a809883a 	mov	r4,r21
    8068:	00073940 	call	7394 <_fflush_r>
    806c:	103fb926 	beq	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8070:	003f6506 	br	7e08 <__alt_exception_stack_pointer+0xf8007e08>
    8074:	a809883a 	mov	r4,r21
    8078:	0009a540 	call	9a54 <_realloc_r>
    807c:	102f883a 	mov	r23,r2
    8080:	103fee1e 	bne	r2,zero,803c <__alt_exception_stack_pointer+0xf800803c>
    8084:	81400417 	ldw	r5,16(r16)
    8088:	a809883a 	mov	r4,r21
    808c:	00078f40 	call	78f4 <_free_r>
    8090:	8080030b 	ldhu	r2,12(r16)
    8094:	00ffdfc4 	movi	r3,-129
    8098:	1884703a 	and	r2,r3,r2
    809c:	00c00304 	movi	r3,12
    80a0:	a8c00015 	stw	r3,0(r21)
    80a4:	003f5906 	br	7e0c <__alt_exception_stack_pointer+0xf8007e0c>
    80a8:	94c00044 	addi	r19,r18,1
    80ac:	02000044 	movi	r8,1
    80b0:	003f6006 	br	7e34 <__alt_exception_stack_pointer+0xf8007e34>
    80b4:	00bfffc4 	movi	r2,-1
    80b8:	003f0006 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    80bc:	00800304 	movi	r2,12
    80c0:	a8800015 	stw	r2,0(r21)
    80c4:	8080030b 	ldhu	r2,12(r16)
    80c8:	003f5006 	br	7e0c <__alt_exception_stack_pointer+0xf8007e0c>

000080cc <_fwalk>:
    80cc:	defff704 	addi	sp,sp,-36
    80d0:	dd000415 	stw	r20,16(sp)
    80d4:	dfc00815 	stw	ra,32(sp)
    80d8:	ddc00715 	stw	r23,28(sp)
    80dc:	dd800615 	stw	r22,24(sp)
    80e0:	dd400515 	stw	r21,20(sp)
    80e4:	dcc00315 	stw	r19,12(sp)
    80e8:	dc800215 	stw	r18,8(sp)
    80ec:	dc400115 	stw	r17,4(sp)
    80f0:	dc000015 	stw	r16,0(sp)
    80f4:	2500b804 	addi	r20,r4,736
    80f8:	a0002326 	beq	r20,zero,8188 <_fwalk+0xbc>
    80fc:	282b883a 	mov	r21,r5
    8100:	002f883a 	mov	r23,zero
    8104:	05800044 	movi	r22,1
    8108:	04ffffc4 	movi	r19,-1
    810c:	a4400117 	ldw	r17,4(r20)
    8110:	a4800217 	ldw	r18,8(r20)
    8114:	8c7fffc4 	addi	r17,r17,-1
    8118:	88000d16 	blt	r17,zero,8150 <_fwalk+0x84>
    811c:	94000304 	addi	r16,r18,12
    8120:	94800384 	addi	r18,r18,14
    8124:	8080000b 	ldhu	r2,0(r16)
    8128:	8c7fffc4 	addi	r17,r17,-1
    812c:	813ffd04 	addi	r4,r16,-12
    8130:	b080042e 	bgeu	r22,r2,8144 <_fwalk+0x78>
    8134:	9080000f 	ldh	r2,0(r18)
    8138:	14c00226 	beq	r2,r19,8144 <_fwalk+0x78>
    813c:	a83ee83a 	callr	r21
    8140:	b8aeb03a 	or	r23,r23,r2
    8144:	84001a04 	addi	r16,r16,104
    8148:	94801a04 	addi	r18,r18,104
    814c:	8cfff51e 	bne	r17,r19,8124 <__alt_exception_stack_pointer+0xf8008124>
    8150:	a5000017 	ldw	r20,0(r20)
    8154:	a03fed1e 	bne	r20,zero,810c <__alt_exception_stack_pointer+0xf800810c>
    8158:	b805883a 	mov	r2,r23
    815c:	dfc00817 	ldw	ra,32(sp)
    8160:	ddc00717 	ldw	r23,28(sp)
    8164:	dd800617 	ldw	r22,24(sp)
    8168:	dd400517 	ldw	r21,20(sp)
    816c:	dd000417 	ldw	r20,16(sp)
    8170:	dcc00317 	ldw	r19,12(sp)
    8174:	dc800217 	ldw	r18,8(sp)
    8178:	dc400117 	ldw	r17,4(sp)
    817c:	dc000017 	ldw	r16,0(sp)
    8180:	dec00904 	addi	sp,sp,36
    8184:	f800283a 	ret
    8188:	002f883a 	mov	r23,zero
    818c:	003ff206 	br	8158 <__alt_exception_stack_pointer+0xf8008158>

00008190 <_fwalk_reent>:
    8190:	defff704 	addi	sp,sp,-36
    8194:	dd000415 	stw	r20,16(sp)
    8198:	dfc00815 	stw	ra,32(sp)
    819c:	ddc00715 	stw	r23,28(sp)
    81a0:	dd800615 	stw	r22,24(sp)
    81a4:	dd400515 	stw	r21,20(sp)
    81a8:	dcc00315 	stw	r19,12(sp)
    81ac:	dc800215 	stw	r18,8(sp)
    81b0:	dc400115 	stw	r17,4(sp)
    81b4:	dc000015 	stw	r16,0(sp)
    81b8:	2500b804 	addi	r20,r4,736
    81bc:	a0002326 	beq	r20,zero,824c <_fwalk_reent+0xbc>
    81c0:	282b883a 	mov	r21,r5
    81c4:	2027883a 	mov	r19,r4
    81c8:	002f883a 	mov	r23,zero
    81cc:	05800044 	movi	r22,1
    81d0:	04bfffc4 	movi	r18,-1
    81d4:	a4400117 	ldw	r17,4(r20)
    81d8:	a4000217 	ldw	r16,8(r20)
    81dc:	8c7fffc4 	addi	r17,r17,-1
    81e0:	88000c16 	blt	r17,zero,8214 <_fwalk_reent+0x84>
    81e4:	84000304 	addi	r16,r16,12
    81e8:	8080000b 	ldhu	r2,0(r16)
    81ec:	8c7fffc4 	addi	r17,r17,-1
    81f0:	817ffd04 	addi	r5,r16,-12
    81f4:	b080052e 	bgeu	r22,r2,820c <_fwalk_reent+0x7c>
    81f8:	8080008f 	ldh	r2,2(r16)
    81fc:	9809883a 	mov	r4,r19
    8200:	14800226 	beq	r2,r18,820c <_fwalk_reent+0x7c>
    8204:	a83ee83a 	callr	r21
    8208:	b8aeb03a 	or	r23,r23,r2
    820c:	84001a04 	addi	r16,r16,104
    8210:	8cbff51e 	bne	r17,r18,81e8 <__alt_exception_stack_pointer+0xf80081e8>
    8214:	a5000017 	ldw	r20,0(r20)
    8218:	a03fee1e 	bne	r20,zero,81d4 <__alt_exception_stack_pointer+0xf80081d4>
    821c:	b805883a 	mov	r2,r23
    8220:	dfc00817 	ldw	ra,32(sp)
    8224:	ddc00717 	ldw	r23,28(sp)
    8228:	dd800617 	ldw	r22,24(sp)
    822c:	dd400517 	ldw	r21,20(sp)
    8230:	dd000417 	ldw	r20,16(sp)
    8234:	dcc00317 	ldw	r19,12(sp)
    8238:	dc800217 	ldw	r18,8(sp)
    823c:	dc400117 	ldw	r17,4(sp)
    8240:	dc000017 	ldw	r16,0(sp)
    8244:	dec00904 	addi	sp,sp,36
    8248:	f800283a 	ret
    824c:	002f883a 	mov	r23,zero
    8250:	003ff206 	br	821c <__alt_exception_stack_pointer+0xf800821c>

00008254 <_setlocale_r>:
    8254:	30001b26 	beq	r6,zero,82c4 <_setlocale_r+0x70>
    8258:	01400074 	movhi	r5,1
    825c:	defffe04 	addi	sp,sp,-8
    8260:	294b8204 	addi	r5,r5,11784
    8264:	3009883a 	mov	r4,r6
    8268:	dc000015 	stw	r16,0(sp)
    826c:	dfc00115 	stw	ra,4(sp)
    8270:	3021883a 	mov	r16,r6
    8274:	000a1680 	call	a168 <strcmp>
    8278:	1000061e 	bne	r2,zero,8294 <_setlocale_r+0x40>
    827c:	00800074 	movhi	r2,1
    8280:	108b6304 	addi	r2,r2,11660
    8284:	dfc00117 	ldw	ra,4(sp)
    8288:	dc000017 	ldw	r16,0(sp)
    828c:	dec00204 	addi	sp,sp,8
    8290:	f800283a 	ret
    8294:	01400074 	movhi	r5,1
    8298:	294b6304 	addi	r5,r5,11660
    829c:	8009883a 	mov	r4,r16
    82a0:	000a1680 	call	a168 <strcmp>
    82a4:	103ff526 	beq	r2,zero,827c <__alt_exception_stack_pointer+0xf800827c>
    82a8:	01400074 	movhi	r5,1
    82ac:	294b6d04 	addi	r5,r5,11700
    82b0:	8009883a 	mov	r4,r16
    82b4:	000a1680 	call	a168 <strcmp>
    82b8:	103ff026 	beq	r2,zero,827c <__alt_exception_stack_pointer+0xf800827c>
    82bc:	0005883a 	mov	r2,zero
    82c0:	003ff006 	br	8284 <__alt_exception_stack_pointer+0xf8008284>
    82c4:	00800074 	movhi	r2,1
    82c8:	108b6304 	addi	r2,r2,11660
    82cc:	f800283a 	ret

000082d0 <__locale_charset>:
    82d0:	00800074 	movhi	r2,1
    82d4:	108e4404 	addi	r2,r2,14608
    82d8:	f800283a 	ret

000082dc <__locale_mb_cur_max>:
    82dc:	00800074 	movhi	r2,1
    82e0:	10930704 	addi	r2,r2,19484
    82e4:	10800017 	ldw	r2,0(r2)
    82e8:	f800283a 	ret

000082ec <__locale_msgcharset>:
    82ec:	00800074 	movhi	r2,1
    82f0:	108e3c04 	addi	r2,r2,14576
    82f4:	f800283a 	ret

000082f8 <__locale_cjk_lang>:
    82f8:	0005883a 	mov	r2,zero
    82fc:	f800283a 	ret

00008300 <_localeconv_r>:
    8300:	00800074 	movhi	r2,1
    8304:	108e4c04 	addi	r2,r2,14640
    8308:	f800283a 	ret

0000830c <setlocale>:
    830c:	00800074 	movhi	r2,1
    8310:	10930404 	addi	r2,r2,19472
    8314:	280d883a 	mov	r6,r5
    8318:	200b883a 	mov	r5,r4
    831c:	11000017 	ldw	r4,0(r2)
    8320:	00082541 	jmpi	8254 <_setlocale_r>

00008324 <localeconv>:
    8324:	00800074 	movhi	r2,1
    8328:	108e4c04 	addi	r2,r2,14640
    832c:	f800283a 	ret

00008330 <__smakebuf_r>:
    8330:	2880030b 	ldhu	r2,12(r5)
    8334:	10c0008c 	andi	r3,r2,2
    8338:	1800411e 	bne	r3,zero,8440 <__smakebuf_r+0x110>
    833c:	deffec04 	addi	sp,sp,-80
    8340:	dc000f15 	stw	r16,60(sp)
    8344:	2821883a 	mov	r16,r5
    8348:	2940038f 	ldh	r5,14(r5)
    834c:	dc401015 	stw	r17,64(sp)
    8350:	dfc01315 	stw	ra,76(sp)
    8354:	dcc01215 	stw	r19,72(sp)
    8358:	dc801115 	stw	r18,68(sp)
    835c:	2023883a 	mov	r17,r4
    8360:	28001c16 	blt	r5,zero,83d4 <__smakebuf_r+0xa4>
    8364:	d80d883a 	mov	r6,sp
    8368:	000bdd80 	call	bdd8 <_fstat_r>
    836c:	10001816 	blt	r2,zero,83d0 <__smakebuf_r+0xa0>
    8370:	d8800117 	ldw	r2,4(sp)
    8374:	00e00014 	movui	r3,32768
    8378:	10bc000c 	andi	r2,r2,61440
    837c:	14c80020 	cmpeqi	r19,r2,8192
    8380:	10c03726 	beq	r2,r3,8460 <__smakebuf_r+0x130>
    8384:	80c0030b 	ldhu	r3,12(r16)
    8388:	18c20014 	ori	r3,r3,2048
    838c:	80c0030d 	sth	r3,12(r16)
    8390:	00c80004 	movi	r3,8192
    8394:	10c0521e 	bne	r2,r3,84e0 <__smakebuf_r+0x1b0>
    8398:	8140038f 	ldh	r5,14(r16)
    839c:	8809883a 	mov	r4,r17
    83a0:	000be340 	call	be34 <_isatty_r>
    83a4:	10004c26 	beq	r2,zero,84d8 <__smakebuf_r+0x1a8>
    83a8:	8080030b 	ldhu	r2,12(r16)
    83ac:	80c010c4 	addi	r3,r16,67
    83b0:	80c00015 	stw	r3,0(r16)
    83b4:	10800054 	ori	r2,r2,1
    83b8:	8080030d 	sth	r2,12(r16)
    83bc:	00800044 	movi	r2,1
    83c0:	80c00415 	stw	r3,16(r16)
    83c4:	80800515 	stw	r2,20(r16)
    83c8:	04810004 	movi	r18,1024
    83cc:	00000706 	br	83ec <__smakebuf_r+0xbc>
    83d0:	8080030b 	ldhu	r2,12(r16)
    83d4:	10c0200c 	andi	r3,r2,128
    83d8:	18001f1e 	bne	r3,zero,8458 <__smakebuf_r+0x128>
    83dc:	04810004 	movi	r18,1024
    83e0:	10820014 	ori	r2,r2,2048
    83e4:	8080030d 	sth	r2,12(r16)
    83e8:	0027883a 	mov	r19,zero
    83ec:	900b883a 	mov	r5,r18
    83f0:	8809883a 	mov	r4,r17
    83f4:	00029800 	call	2980 <_malloc_r>
    83f8:	10002c26 	beq	r2,zero,84ac <__smakebuf_r+0x17c>
    83fc:	80c0030b 	ldhu	r3,12(r16)
    8400:	01000034 	movhi	r4,0
    8404:	211d0a04 	addi	r4,r4,29736
    8408:	89000f15 	stw	r4,60(r17)
    840c:	18c02014 	ori	r3,r3,128
    8410:	80c0030d 	sth	r3,12(r16)
    8414:	80800015 	stw	r2,0(r16)
    8418:	80800415 	stw	r2,16(r16)
    841c:	84800515 	stw	r18,20(r16)
    8420:	98001a1e 	bne	r19,zero,848c <__smakebuf_r+0x15c>
    8424:	dfc01317 	ldw	ra,76(sp)
    8428:	dcc01217 	ldw	r19,72(sp)
    842c:	dc801117 	ldw	r18,68(sp)
    8430:	dc401017 	ldw	r17,64(sp)
    8434:	dc000f17 	ldw	r16,60(sp)
    8438:	dec01404 	addi	sp,sp,80
    843c:	f800283a 	ret
    8440:	288010c4 	addi	r2,r5,67
    8444:	28800015 	stw	r2,0(r5)
    8448:	28800415 	stw	r2,16(r5)
    844c:	00800044 	movi	r2,1
    8450:	28800515 	stw	r2,20(r5)
    8454:	f800283a 	ret
    8458:	04801004 	movi	r18,64
    845c:	003fe006 	br	83e0 <__alt_exception_stack_pointer+0xf80083e0>
    8460:	81000a17 	ldw	r4,40(r16)
    8464:	00c00074 	movhi	r3,1
    8468:	18e84104 	addi	r3,r3,-24316
    846c:	20ffc51e 	bne	r4,r3,8384 <__alt_exception_stack_pointer+0xf8008384>
    8470:	8080030b 	ldhu	r2,12(r16)
    8474:	04810004 	movi	r18,1024
    8478:	84801315 	stw	r18,76(r16)
    847c:	1484b03a 	or	r2,r2,r18
    8480:	8080030d 	sth	r2,12(r16)
    8484:	0027883a 	mov	r19,zero
    8488:	003fd806 	br	83ec <__alt_exception_stack_pointer+0xf80083ec>
    848c:	8140038f 	ldh	r5,14(r16)
    8490:	8809883a 	mov	r4,r17
    8494:	000be340 	call	be34 <_isatty_r>
    8498:	103fe226 	beq	r2,zero,8424 <__alt_exception_stack_pointer+0xf8008424>
    849c:	8080030b 	ldhu	r2,12(r16)
    84a0:	10800054 	ori	r2,r2,1
    84a4:	8080030d 	sth	r2,12(r16)
    84a8:	003fde06 	br	8424 <__alt_exception_stack_pointer+0xf8008424>
    84ac:	8080030b 	ldhu	r2,12(r16)
    84b0:	10c0800c 	andi	r3,r2,512
    84b4:	183fdb1e 	bne	r3,zero,8424 <__alt_exception_stack_pointer+0xf8008424>
    84b8:	10800094 	ori	r2,r2,2
    84bc:	80c010c4 	addi	r3,r16,67
    84c0:	8080030d 	sth	r2,12(r16)
    84c4:	00800044 	movi	r2,1
    84c8:	80c00015 	stw	r3,0(r16)
    84cc:	80c00415 	stw	r3,16(r16)
    84d0:	80800515 	stw	r2,20(r16)
    84d4:	003fd306 	br	8424 <__alt_exception_stack_pointer+0xf8008424>
    84d8:	04810004 	movi	r18,1024
    84dc:	003fc306 	br	83ec <__alt_exception_stack_pointer+0xf80083ec>
    84e0:	0027883a 	mov	r19,zero
    84e4:	04810004 	movi	r18,1024
    84e8:	003fc006 	br	83ec <__alt_exception_stack_pointer+0xf80083ec>

000084ec <memchr>:
    84ec:	208000cc 	andi	r2,r4,3
    84f0:	280f883a 	mov	r7,r5
    84f4:	10003426 	beq	r2,zero,85c8 <memchr+0xdc>
    84f8:	30bfffc4 	addi	r2,r6,-1
    84fc:	30001a26 	beq	r6,zero,8568 <memchr+0x7c>
    8500:	20c00003 	ldbu	r3,0(r4)
    8504:	29803fcc 	andi	r6,r5,255
    8508:	30c0051e 	bne	r6,r3,8520 <memchr+0x34>
    850c:	00001806 	br	8570 <memchr+0x84>
    8510:	10001526 	beq	r2,zero,8568 <memchr+0x7c>
    8514:	20c00003 	ldbu	r3,0(r4)
    8518:	10bfffc4 	addi	r2,r2,-1
    851c:	30c01426 	beq	r6,r3,8570 <memchr+0x84>
    8520:	21000044 	addi	r4,r4,1
    8524:	20c000cc 	andi	r3,r4,3
    8528:	183ff91e 	bne	r3,zero,8510 <__alt_exception_stack_pointer+0xf8008510>
    852c:	020000c4 	movi	r8,3
    8530:	40801136 	bltu	r8,r2,8578 <memchr+0x8c>
    8534:	10000c26 	beq	r2,zero,8568 <memchr+0x7c>
    8538:	20c00003 	ldbu	r3,0(r4)
    853c:	29403fcc 	andi	r5,r5,255
    8540:	28c00b26 	beq	r5,r3,8570 <memchr+0x84>
    8544:	20c00044 	addi	r3,r4,1
    8548:	39803fcc 	andi	r6,r7,255
    854c:	2089883a 	add	r4,r4,r2
    8550:	00000306 	br	8560 <memchr+0x74>
    8554:	18c00044 	addi	r3,r3,1
    8558:	197fffc3 	ldbu	r5,-1(r3)
    855c:	31400526 	beq	r6,r5,8574 <memchr+0x88>
    8560:	1805883a 	mov	r2,r3
    8564:	20fffb1e 	bne	r4,r3,8554 <__alt_exception_stack_pointer+0xf8008554>
    8568:	0005883a 	mov	r2,zero
    856c:	f800283a 	ret
    8570:	2005883a 	mov	r2,r4
    8574:	f800283a 	ret
    8578:	28c03fcc 	andi	r3,r5,255
    857c:	1812923a 	slli	r9,r3,8
    8580:	02ffbff4 	movhi	r11,65279
    8584:	02a02074 	movhi	r10,32897
    8588:	48d2b03a 	or	r9,r9,r3
    858c:	4806943a 	slli	r3,r9,16
    8590:	5affbfc4 	addi	r11,r11,-257
    8594:	52a02004 	addi	r10,r10,-32640
    8598:	48d2b03a 	or	r9,r9,r3
    859c:	20c00017 	ldw	r3,0(r4)
    85a0:	48c6f03a 	xor	r3,r9,r3
    85a4:	1acd883a 	add	r6,r3,r11
    85a8:	00c6303a 	nor	r3,zero,r3
    85ac:	30c6703a 	and	r3,r6,r3
    85b0:	1a86703a 	and	r3,r3,r10
    85b4:	183fe01e 	bne	r3,zero,8538 <__alt_exception_stack_pointer+0xf8008538>
    85b8:	10bfff04 	addi	r2,r2,-4
    85bc:	21000104 	addi	r4,r4,4
    85c0:	40bff636 	bltu	r8,r2,859c <__alt_exception_stack_pointer+0xf800859c>
    85c4:	003fdb06 	br	8534 <__alt_exception_stack_pointer+0xf8008534>
    85c8:	3005883a 	mov	r2,r6
    85cc:	003fd706 	br	852c <__alt_exception_stack_pointer+0xf800852c>

000085d0 <memcpy>:
    85d0:	defffd04 	addi	sp,sp,-12
    85d4:	dfc00215 	stw	ra,8(sp)
    85d8:	dc400115 	stw	r17,4(sp)
    85dc:	dc000015 	stw	r16,0(sp)
    85e0:	00c003c4 	movi	r3,15
    85e4:	2005883a 	mov	r2,r4
    85e8:	1980452e 	bgeu	r3,r6,8700 <memcpy+0x130>
    85ec:	2906b03a 	or	r3,r5,r4
    85f0:	18c000cc 	andi	r3,r3,3
    85f4:	1800441e 	bne	r3,zero,8708 <memcpy+0x138>
    85f8:	347ffc04 	addi	r17,r6,-16
    85fc:	8822d13a 	srli	r17,r17,4
    8600:	28c00104 	addi	r3,r5,4
    8604:	23400104 	addi	r13,r4,4
    8608:	8820913a 	slli	r16,r17,4
    860c:	2b000204 	addi	r12,r5,8
    8610:	22c00204 	addi	r11,r4,8
    8614:	84000504 	addi	r16,r16,20
    8618:	2a800304 	addi	r10,r5,12
    861c:	22400304 	addi	r9,r4,12
    8620:	2c21883a 	add	r16,r5,r16
    8624:	2811883a 	mov	r8,r5
    8628:	200f883a 	mov	r7,r4
    862c:	41000017 	ldw	r4,0(r8)
    8630:	1fc00017 	ldw	ra,0(r3)
    8634:	63c00017 	ldw	r15,0(r12)
    8638:	39000015 	stw	r4,0(r7)
    863c:	53800017 	ldw	r14,0(r10)
    8640:	6fc00015 	stw	ra,0(r13)
    8644:	5bc00015 	stw	r15,0(r11)
    8648:	4b800015 	stw	r14,0(r9)
    864c:	18c00404 	addi	r3,r3,16
    8650:	39c00404 	addi	r7,r7,16
    8654:	42000404 	addi	r8,r8,16
    8658:	6b400404 	addi	r13,r13,16
    865c:	63000404 	addi	r12,r12,16
    8660:	5ac00404 	addi	r11,r11,16
    8664:	52800404 	addi	r10,r10,16
    8668:	4a400404 	addi	r9,r9,16
    866c:	1c3fef1e 	bne	r3,r16,862c <__alt_exception_stack_pointer+0xf800862c>
    8670:	89c00044 	addi	r7,r17,1
    8674:	380e913a 	slli	r7,r7,4
    8678:	310003cc 	andi	r4,r6,15
    867c:	02c000c4 	movi	r11,3
    8680:	11c7883a 	add	r3,r2,r7
    8684:	29cb883a 	add	r5,r5,r7
    8688:	5900212e 	bgeu	r11,r4,8710 <memcpy+0x140>
    868c:	1813883a 	mov	r9,r3
    8690:	2811883a 	mov	r8,r5
    8694:	200f883a 	mov	r7,r4
    8698:	42800017 	ldw	r10,0(r8)
    869c:	4a400104 	addi	r9,r9,4
    86a0:	39ffff04 	addi	r7,r7,-4
    86a4:	4abfff15 	stw	r10,-4(r9)
    86a8:	42000104 	addi	r8,r8,4
    86ac:	59fffa36 	bltu	r11,r7,8698 <__alt_exception_stack_pointer+0xf8008698>
    86b0:	213fff04 	addi	r4,r4,-4
    86b4:	2008d0ba 	srli	r4,r4,2
    86b8:	318000cc 	andi	r6,r6,3
    86bc:	21000044 	addi	r4,r4,1
    86c0:	2109883a 	add	r4,r4,r4
    86c4:	2109883a 	add	r4,r4,r4
    86c8:	1907883a 	add	r3,r3,r4
    86cc:	290b883a 	add	r5,r5,r4
    86d0:	30000626 	beq	r6,zero,86ec <memcpy+0x11c>
    86d4:	198d883a 	add	r6,r3,r6
    86d8:	29c00003 	ldbu	r7,0(r5)
    86dc:	18c00044 	addi	r3,r3,1
    86e0:	29400044 	addi	r5,r5,1
    86e4:	19ffffc5 	stb	r7,-1(r3)
    86e8:	19bffb1e 	bne	r3,r6,86d8 <__alt_exception_stack_pointer+0xf80086d8>
    86ec:	dfc00217 	ldw	ra,8(sp)
    86f0:	dc400117 	ldw	r17,4(sp)
    86f4:	dc000017 	ldw	r16,0(sp)
    86f8:	dec00304 	addi	sp,sp,12
    86fc:	f800283a 	ret
    8700:	2007883a 	mov	r3,r4
    8704:	003ff206 	br	86d0 <__alt_exception_stack_pointer+0xf80086d0>
    8708:	2007883a 	mov	r3,r4
    870c:	003ff106 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8710:	200d883a 	mov	r6,r4
    8714:	003fee06 	br	86d0 <__alt_exception_stack_pointer+0xf80086d0>

00008718 <memmove>:
    8718:	2005883a 	mov	r2,r4
    871c:	29000b2e 	bgeu	r5,r4,874c <memmove+0x34>
    8720:	298f883a 	add	r7,r5,r6
    8724:	21c0092e 	bgeu	r4,r7,874c <memmove+0x34>
    8728:	2187883a 	add	r3,r4,r6
    872c:	198bc83a 	sub	r5,r3,r6
    8730:	30004826 	beq	r6,zero,8854 <memmove+0x13c>
    8734:	39ffffc4 	addi	r7,r7,-1
    8738:	39000003 	ldbu	r4,0(r7)
    873c:	18ffffc4 	addi	r3,r3,-1
    8740:	19000005 	stb	r4,0(r3)
    8744:	28fffb1e 	bne	r5,r3,8734 <__alt_exception_stack_pointer+0xf8008734>
    8748:	f800283a 	ret
    874c:	00c003c4 	movi	r3,15
    8750:	1980412e 	bgeu	r3,r6,8858 <memmove+0x140>
    8754:	2886b03a 	or	r3,r5,r2
    8758:	18c000cc 	andi	r3,r3,3
    875c:	1800401e 	bne	r3,zero,8860 <memmove+0x148>
    8760:	33fffc04 	addi	r15,r6,-16
    8764:	781ed13a 	srli	r15,r15,4
    8768:	28c00104 	addi	r3,r5,4
    876c:	13400104 	addi	r13,r2,4
    8770:	781c913a 	slli	r14,r15,4
    8774:	2b000204 	addi	r12,r5,8
    8778:	12c00204 	addi	r11,r2,8
    877c:	73800504 	addi	r14,r14,20
    8780:	2a800304 	addi	r10,r5,12
    8784:	12400304 	addi	r9,r2,12
    8788:	2b9d883a 	add	r14,r5,r14
    878c:	2811883a 	mov	r8,r5
    8790:	100f883a 	mov	r7,r2
    8794:	41000017 	ldw	r4,0(r8)
    8798:	39c00404 	addi	r7,r7,16
    879c:	18c00404 	addi	r3,r3,16
    87a0:	393ffc15 	stw	r4,-16(r7)
    87a4:	193ffc17 	ldw	r4,-16(r3)
    87a8:	6b400404 	addi	r13,r13,16
    87ac:	5ac00404 	addi	r11,r11,16
    87b0:	693ffc15 	stw	r4,-16(r13)
    87b4:	61000017 	ldw	r4,0(r12)
    87b8:	4a400404 	addi	r9,r9,16
    87bc:	42000404 	addi	r8,r8,16
    87c0:	593ffc15 	stw	r4,-16(r11)
    87c4:	51000017 	ldw	r4,0(r10)
    87c8:	63000404 	addi	r12,r12,16
    87cc:	52800404 	addi	r10,r10,16
    87d0:	493ffc15 	stw	r4,-16(r9)
    87d4:	1bbfef1e 	bne	r3,r14,8794 <__alt_exception_stack_pointer+0xf8008794>
    87d8:	79000044 	addi	r4,r15,1
    87dc:	2008913a 	slli	r4,r4,4
    87e0:	328003cc 	andi	r10,r6,15
    87e4:	02c000c4 	movi	r11,3
    87e8:	1107883a 	add	r3,r2,r4
    87ec:	290b883a 	add	r5,r5,r4
    87f0:	5a801e2e 	bgeu	r11,r10,886c <memmove+0x154>
    87f4:	1813883a 	mov	r9,r3
    87f8:	2811883a 	mov	r8,r5
    87fc:	500f883a 	mov	r7,r10
    8800:	41000017 	ldw	r4,0(r8)
    8804:	4a400104 	addi	r9,r9,4
    8808:	39ffff04 	addi	r7,r7,-4
    880c:	493fff15 	stw	r4,-4(r9)
    8810:	42000104 	addi	r8,r8,4
    8814:	59fffa36 	bltu	r11,r7,8800 <__alt_exception_stack_pointer+0xf8008800>
    8818:	513fff04 	addi	r4,r10,-4
    881c:	2008d0ba 	srli	r4,r4,2
    8820:	318000cc 	andi	r6,r6,3
    8824:	21000044 	addi	r4,r4,1
    8828:	2109883a 	add	r4,r4,r4
    882c:	2109883a 	add	r4,r4,r4
    8830:	1907883a 	add	r3,r3,r4
    8834:	290b883a 	add	r5,r5,r4
    8838:	30000b26 	beq	r6,zero,8868 <memmove+0x150>
    883c:	198d883a 	add	r6,r3,r6
    8840:	29c00003 	ldbu	r7,0(r5)
    8844:	18c00044 	addi	r3,r3,1
    8848:	29400044 	addi	r5,r5,1
    884c:	19ffffc5 	stb	r7,-1(r3)
    8850:	19bffb1e 	bne	r3,r6,8840 <__alt_exception_stack_pointer+0xf8008840>
    8854:	f800283a 	ret
    8858:	1007883a 	mov	r3,r2
    885c:	003ff606 	br	8838 <__alt_exception_stack_pointer+0xf8008838>
    8860:	1007883a 	mov	r3,r2
    8864:	003ff506 	br	883c <__alt_exception_stack_pointer+0xf800883c>
    8868:	f800283a 	ret
    886c:	500d883a 	mov	r6,r10
    8870:	003ff106 	br	8838 <__alt_exception_stack_pointer+0xf8008838>

00008874 <memset>:
    8874:	20c000cc 	andi	r3,r4,3
    8878:	2005883a 	mov	r2,r4
    887c:	18004426 	beq	r3,zero,8990 <memset+0x11c>
    8880:	31ffffc4 	addi	r7,r6,-1
    8884:	30004026 	beq	r6,zero,8988 <memset+0x114>
    8888:	2813883a 	mov	r9,r5
    888c:	200d883a 	mov	r6,r4
    8890:	2007883a 	mov	r3,r4
    8894:	00000406 	br	88a8 <memset+0x34>
    8898:	3a3fffc4 	addi	r8,r7,-1
    889c:	31800044 	addi	r6,r6,1
    88a0:	38003926 	beq	r7,zero,8988 <memset+0x114>
    88a4:	400f883a 	mov	r7,r8
    88a8:	18c00044 	addi	r3,r3,1
    88ac:	32400005 	stb	r9,0(r6)
    88b0:	1a0000cc 	andi	r8,r3,3
    88b4:	403ff81e 	bne	r8,zero,8898 <__alt_exception_stack_pointer+0xf8008898>
    88b8:	010000c4 	movi	r4,3
    88bc:	21c02d2e 	bgeu	r4,r7,8974 <memset+0x100>
    88c0:	29003fcc 	andi	r4,r5,255
    88c4:	200c923a 	slli	r6,r4,8
    88c8:	3108b03a 	or	r4,r6,r4
    88cc:	200c943a 	slli	r6,r4,16
    88d0:	218cb03a 	or	r6,r4,r6
    88d4:	010003c4 	movi	r4,15
    88d8:	21c0182e 	bgeu	r4,r7,893c <memset+0xc8>
    88dc:	3b3ffc04 	addi	r12,r7,-16
    88e0:	6018d13a 	srli	r12,r12,4
    88e4:	1a000104 	addi	r8,r3,4
    88e8:	1ac00204 	addi	r11,r3,8
    88ec:	6008913a 	slli	r4,r12,4
    88f0:	1a800304 	addi	r10,r3,12
    88f4:	1813883a 	mov	r9,r3
    88f8:	21000504 	addi	r4,r4,20
    88fc:	1909883a 	add	r4,r3,r4
    8900:	49800015 	stw	r6,0(r9)
    8904:	41800015 	stw	r6,0(r8)
    8908:	59800015 	stw	r6,0(r11)
    890c:	51800015 	stw	r6,0(r10)
    8910:	42000404 	addi	r8,r8,16
    8914:	4a400404 	addi	r9,r9,16
    8918:	5ac00404 	addi	r11,r11,16
    891c:	52800404 	addi	r10,r10,16
    8920:	413ff71e 	bne	r8,r4,8900 <__alt_exception_stack_pointer+0xf8008900>
    8924:	63000044 	addi	r12,r12,1
    8928:	6018913a 	slli	r12,r12,4
    892c:	39c003cc 	andi	r7,r7,15
    8930:	010000c4 	movi	r4,3
    8934:	1b07883a 	add	r3,r3,r12
    8938:	21c00e2e 	bgeu	r4,r7,8974 <memset+0x100>
    893c:	1813883a 	mov	r9,r3
    8940:	3811883a 	mov	r8,r7
    8944:	010000c4 	movi	r4,3
    8948:	49800015 	stw	r6,0(r9)
    894c:	423fff04 	addi	r8,r8,-4
    8950:	4a400104 	addi	r9,r9,4
    8954:	223ffc36 	bltu	r4,r8,8948 <__alt_exception_stack_pointer+0xf8008948>
    8958:	393fff04 	addi	r4,r7,-4
    895c:	2008d0ba 	srli	r4,r4,2
    8960:	39c000cc 	andi	r7,r7,3
    8964:	21000044 	addi	r4,r4,1
    8968:	2109883a 	add	r4,r4,r4
    896c:	2109883a 	add	r4,r4,r4
    8970:	1907883a 	add	r3,r3,r4
    8974:	38000526 	beq	r7,zero,898c <memset+0x118>
    8978:	19cf883a 	add	r7,r3,r7
    897c:	19400005 	stb	r5,0(r3)
    8980:	18c00044 	addi	r3,r3,1
    8984:	38fffd1e 	bne	r7,r3,897c <__alt_exception_stack_pointer+0xf800897c>
    8988:	f800283a 	ret
    898c:	f800283a 	ret
    8990:	2007883a 	mov	r3,r4
    8994:	300f883a 	mov	r7,r6
    8998:	003fc706 	br	88b8 <__alt_exception_stack_pointer+0xf80088b8>

0000899c <_Balloc>:
    899c:	20801317 	ldw	r2,76(r4)
    89a0:	defffc04 	addi	sp,sp,-16
    89a4:	dc400115 	stw	r17,4(sp)
    89a8:	dc000015 	stw	r16,0(sp)
    89ac:	dfc00315 	stw	ra,12(sp)
    89b0:	dc800215 	stw	r18,8(sp)
    89b4:	2023883a 	mov	r17,r4
    89b8:	2821883a 	mov	r16,r5
    89bc:	10000f26 	beq	r2,zero,89fc <_Balloc+0x60>
    89c0:	8407883a 	add	r3,r16,r16
    89c4:	18c7883a 	add	r3,r3,r3
    89c8:	10c7883a 	add	r3,r2,r3
    89cc:	18800017 	ldw	r2,0(r3)
    89d0:	10001126 	beq	r2,zero,8a18 <_Balloc+0x7c>
    89d4:	11000017 	ldw	r4,0(r2)
    89d8:	19000015 	stw	r4,0(r3)
    89dc:	10000415 	stw	zero,16(r2)
    89e0:	10000315 	stw	zero,12(r2)
    89e4:	dfc00317 	ldw	ra,12(sp)
    89e8:	dc800217 	ldw	r18,8(sp)
    89ec:	dc400117 	ldw	r17,4(sp)
    89f0:	dc000017 	ldw	r16,0(sp)
    89f4:	dec00404 	addi	sp,sp,16
    89f8:	f800283a 	ret
    89fc:	01800844 	movi	r6,33
    8a00:	01400104 	movi	r5,4
    8a04:	000b9f00 	call	b9f0 <_calloc_r>
    8a08:	88801315 	stw	r2,76(r17)
    8a0c:	103fec1e 	bne	r2,zero,89c0 <__alt_exception_stack_pointer+0xf80089c0>
    8a10:	0005883a 	mov	r2,zero
    8a14:	003ff306 	br	89e4 <__alt_exception_stack_pointer+0xf80089e4>
    8a18:	01400044 	movi	r5,1
    8a1c:	2c24983a 	sll	r18,r5,r16
    8a20:	8809883a 	mov	r4,r17
    8a24:	91800144 	addi	r6,r18,5
    8a28:	318d883a 	add	r6,r6,r6
    8a2c:	318d883a 	add	r6,r6,r6
    8a30:	000b9f00 	call	b9f0 <_calloc_r>
    8a34:	103ff626 	beq	r2,zero,8a10 <__alt_exception_stack_pointer+0xf8008a10>
    8a38:	14000115 	stw	r16,4(r2)
    8a3c:	14800215 	stw	r18,8(r2)
    8a40:	003fe606 	br	89dc <__alt_exception_stack_pointer+0xf80089dc>

00008a44 <_Bfree>:
    8a44:	28000826 	beq	r5,zero,8a68 <_Bfree+0x24>
    8a48:	28c00117 	ldw	r3,4(r5)
    8a4c:	20801317 	ldw	r2,76(r4)
    8a50:	18c7883a 	add	r3,r3,r3
    8a54:	18c7883a 	add	r3,r3,r3
    8a58:	10c5883a 	add	r2,r2,r3
    8a5c:	10c00017 	ldw	r3,0(r2)
    8a60:	28c00015 	stw	r3,0(r5)
    8a64:	11400015 	stw	r5,0(r2)
    8a68:	f800283a 	ret

00008a6c <__multadd>:
    8a6c:	defff704 	addi	sp,sp,-36
    8a70:	dc800215 	stw	r18,8(sp)
    8a74:	2c800417 	ldw	r18,16(r5)
    8a78:	dd800615 	stw	r22,24(sp)
    8a7c:	dd400515 	stw	r21,20(sp)
    8a80:	dd000415 	stw	r20,16(sp)
    8a84:	dcc00315 	stw	r19,12(sp)
    8a88:	dc400115 	stw	r17,4(sp)
    8a8c:	dc000015 	stw	r16,0(sp)
    8a90:	dfc00815 	stw	ra,32(sp)
    8a94:	ddc00715 	stw	r23,28(sp)
    8a98:	2827883a 	mov	r19,r5
    8a9c:	2029883a 	mov	r20,r4
    8aa0:	3023883a 	mov	r17,r6
    8aa4:	3821883a 	mov	r16,r7
    8aa8:	2d400504 	addi	r21,r5,20
    8aac:	002d883a 	mov	r22,zero
    8ab0:	adc00017 	ldw	r23,0(r21)
    8ab4:	880b883a 	mov	r5,r17
    8ab8:	ad400104 	addi	r21,r21,4
    8abc:	b93fffcc 	andi	r4,r23,65535
    8ac0:	000cffc0 	call	cffc <__mulsi3>
    8ac4:	b808d43a 	srli	r4,r23,16
    8ac8:	880b883a 	mov	r5,r17
    8acc:	1421883a 	add	r16,r2,r16
    8ad0:	000cffc0 	call	cffc <__mulsi3>
    8ad4:	800ed43a 	srli	r7,r16,16
    8ad8:	80ffffcc 	andi	r3,r16,65535
    8adc:	b5800044 	addi	r22,r22,1
    8ae0:	11c5883a 	add	r2,r2,r7
    8ae4:	100e943a 	slli	r7,r2,16
    8ae8:	1020d43a 	srli	r16,r2,16
    8aec:	38c7883a 	add	r3,r7,r3
    8af0:	a8ffff15 	stw	r3,-4(r21)
    8af4:	b4bfee16 	blt	r22,r18,8ab0 <__alt_exception_stack_pointer+0xf8008ab0>
    8af8:	80000926 	beq	r16,zero,8b20 <__multadd+0xb4>
    8afc:	98800217 	ldw	r2,8(r19)
    8b00:	9080130e 	bge	r18,r2,8b50 <__multadd+0xe4>
    8b04:	90800144 	addi	r2,r18,5
    8b08:	1085883a 	add	r2,r2,r2
    8b0c:	1085883a 	add	r2,r2,r2
    8b10:	9885883a 	add	r2,r19,r2
    8b14:	14000015 	stw	r16,0(r2)
    8b18:	94800044 	addi	r18,r18,1
    8b1c:	9c800415 	stw	r18,16(r19)
    8b20:	9805883a 	mov	r2,r19
    8b24:	dfc00817 	ldw	ra,32(sp)
    8b28:	ddc00717 	ldw	r23,28(sp)
    8b2c:	dd800617 	ldw	r22,24(sp)
    8b30:	dd400517 	ldw	r21,20(sp)
    8b34:	dd000417 	ldw	r20,16(sp)
    8b38:	dcc00317 	ldw	r19,12(sp)
    8b3c:	dc800217 	ldw	r18,8(sp)
    8b40:	dc400117 	ldw	r17,4(sp)
    8b44:	dc000017 	ldw	r16,0(sp)
    8b48:	dec00904 	addi	sp,sp,36
    8b4c:	f800283a 	ret
    8b50:	99400117 	ldw	r5,4(r19)
    8b54:	a009883a 	mov	r4,r20
    8b58:	29400044 	addi	r5,r5,1
    8b5c:	000899c0 	call	899c <_Balloc>
    8b60:	99800417 	ldw	r6,16(r19)
    8b64:	99400304 	addi	r5,r19,12
    8b68:	11000304 	addi	r4,r2,12
    8b6c:	31800084 	addi	r6,r6,2
    8b70:	318d883a 	add	r6,r6,r6
    8b74:	318d883a 	add	r6,r6,r6
    8b78:	1023883a 	mov	r17,r2
    8b7c:	00085d00 	call	85d0 <memcpy>
    8b80:	98000a26 	beq	r19,zero,8bac <__multadd+0x140>
    8b84:	98c00117 	ldw	r3,4(r19)
    8b88:	a0801317 	ldw	r2,76(r20)
    8b8c:	18c7883a 	add	r3,r3,r3
    8b90:	18c7883a 	add	r3,r3,r3
    8b94:	10c5883a 	add	r2,r2,r3
    8b98:	10c00017 	ldw	r3,0(r2)
    8b9c:	98c00015 	stw	r3,0(r19)
    8ba0:	14c00015 	stw	r19,0(r2)
    8ba4:	8827883a 	mov	r19,r17
    8ba8:	003fd606 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>
    8bac:	8827883a 	mov	r19,r17
    8bb0:	003fd406 	br	8b04 <__alt_exception_stack_pointer+0xf8008b04>

00008bb4 <__s2b>:
    8bb4:	defff904 	addi	sp,sp,-28
    8bb8:	dc400115 	stw	r17,4(sp)
    8bbc:	dc000015 	stw	r16,0(sp)
    8bc0:	2023883a 	mov	r17,r4
    8bc4:	2821883a 	mov	r16,r5
    8bc8:	39000204 	addi	r4,r7,8
    8bcc:	01400244 	movi	r5,9
    8bd0:	dcc00315 	stw	r19,12(sp)
    8bd4:	dc800215 	stw	r18,8(sp)
    8bd8:	dfc00615 	stw	ra,24(sp)
    8bdc:	dd400515 	stw	r21,20(sp)
    8be0:	dd000415 	stw	r20,16(sp)
    8be4:	3825883a 	mov	r18,r7
    8be8:	3027883a 	mov	r19,r6
    8bec:	000ce480 	call	ce48 <__divsi3>
    8bf0:	00c00044 	movi	r3,1
    8bf4:	000b883a 	mov	r5,zero
    8bf8:	1880030e 	bge	r3,r2,8c08 <__s2b+0x54>
    8bfc:	18c7883a 	add	r3,r3,r3
    8c00:	29400044 	addi	r5,r5,1
    8c04:	18bffd16 	blt	r3,r2,8bfc <__alt_exception_stack_pointer+0xf8008bfc>
    8c08:	8809883a 	mov	r4,r17
    8c0c:	000899c0 	call	899c <_Balloc>
    8c10:	d8c00717 	ldw	r3,28(sp)
    8c14:	10c00515 	stw	r3,20(r2)
    8c18:	00c00044 	movi	r3,1
    8c1c:	10c00415 	stw	r3,16(r2)
    8c20:	00c00244 	movi	r3,9
    8c24:	1cc0210e 	bge	r3,r19,8cac <__s2b+0xf8>
    8c28:	80eb883a 	add	r21,r16,r3
    8c2c:	a829883a 	mov	r20,r21
    8c30:	84e1883a 	add	r16,r16,r19
    8c34:	a1c00007 	ldb	r7,0(r20)
    8c38:	01800284 	movi	r6,10
    8c3c:	a5000044 	addi	r20,r20,1
    8c40:	100b883a 	mov	r5,r2
    8c44:	39fff404 	addi	r7,r7,-48
    8c48:	8809883a 	mov	r4,r17
    8c4c:	0008a6c0 	call	8a6c <__multadd>
    8c50:	a43ff81e 	bne	r20,r16,8c34 <__alt_exception_stack_pointer+0xf8008c34>
    8c54:	ace1883a 	add	r16,r21,r19
    8c58:	843ffe04 	addi	r16,r16,-8
    8c5c:	9c800a0e 	bge	r19,r18,8c88 <__s2b+0xd4>
    8c60:	94e5c83a 	sub	r18,r18,r19
    8c64:	84a5883a 	add	r18,r16,r18
    8c68:	81c00007 	ldb	r7,0(r16)
    8c6c:	01800284 	movi	r6,10
    8c70:	84000044 	addi	r16,r16,1
    8c74:	100b883a 	mov	r5,r2
    8c78:	39fff404 	addi	r7,r7,-48
    8c7c:	8809883a 	mov	r4,r17
    8c80:	0008a6c0 	call	8a6c <__multadd>
    8c84:	84bff81e 	bne	r16,r18,8c68 <__alt_exception_stack_pointer+0xf8008c68>
    8c88:	dfc00617 	ldw	ra,24(sp)
    8c8c:	dd400517 	ldw	r21,20(sp)
    8c90:	dd000417 	ldw	r20,16(sp)
    8c94:	dcc00317 	ldw	r19,12(sp)
    8c98:	dc800217 	ldw	r18,8(sp)
    8c9c:	dc400117 	ldw	r17,4(sp)
    8ca0:	dc000017 	ldw	r16,0(sp)
    8ca4:	dec00704 	addi	sp,sp,28
    8ca8:	f800283a 	ret
    8cac:	84000284 	addi	r16,r16,10
    8cb0:	1827883a 	mov	r19,r3
    8cb4:	003fe906 	br	8c5c <__alt_exception_stack_pointer+0xf8008c5c>

00008cb8 <__hi0bits>:
    8cb8:	20bfffec 	andhi	r2,r4,65535
    8cbc:	1000141e 	bne	r2,zero,8d10 <__hi0bits+0x58>
    8cc0:	2008943a 	slli	r4,r4,16
    8cc4:	00800404 	movi	r2,16
    8cc8:	20ffc02c 	andhi	r3,r4,65280
    8ccc:	1800021e 	bne	r3,zero,8cd8 <__hi0bits+0x20>
    8cd0:	2008923a 	slli	r4,r4,8
    8cd4:	10800204 	addi	r2,r2,8
    8cd8:	20fc002c 	andhi	r3,r4,61440
    8cdc:	1800021e 	bne	r3,zero,8ce8 <__hi0bits+0x30>
    8ce0:	2008913a 	slli	r4,r4,4
    8ce4:	10800104 	addi	r2,r2,4
    8ce8:	20f0002c 	andhi	r3,r4,49152
    8cec:	1800031e 	bne	r3,zero,8cfc <__hi0bits+0x44>
    8cf0:	2109883a 	add	r4,r4,r4
    8cf4:	10800084 	addi	r2,r2,2
    8cf8:	2109883a 	add	r4,r4,r4
    8cfc:	20000316 	blt	r4,zero,8d0c <__hi0bits+0x54>
    8d00:	2110002c 	andhi	r4,r4,16384
    8d04:	2000041e 	bne	r4,zero,8d18 <__hi0bits+0x60>
    8d08:	00800804 	movi	r2,32
    8d0c:	f800283a 	ret
    8d10:	0005883a 	mov	r2,zero
    8d14:	003fec06 	br	8cc8 <__alt_exception_stack_pointer+0xf8008cc8>
    8d18:	10800044 	addi	r2,r2,1
    8d1c:	f800283a 	ret

00008d20 <__lo0bits>:
    8d20:	20c00017 	ldw	r3,0(r4)
    8d24:	188001cc 	andi	r2,r3,7
    8d28:	10000826 	beq	r2,zero,8d4c <__lo0bits+0x2c>
    8d2c:	1880004c 	andi	r2,r3,1
    8d30:	1000211e 	bne	r2,zero,8db8 <__lo0bits+0x98>
    8d34:	1880008c 	andi	r2,r3,2
    8d38:	1000211e 	bne	r2,zero,8dc0 <__lo0bits+0xa0>
    8d3c:	1806d0ba 	srli	r3,r3,2
    8d40:	00800084 	movi	r2,2
    8d44:	20c00015 	stw	r3,0(r4)
    8d48:	f800283a 	ret
    8d4c:	18bfffcc 	andi	r2,r3,65535
    8d50:	10001326 	beq	r2,zero,8da0 <__lo0bits+0x80>
    8d54:	0005883a 	mov	r2,zero
    8d58:	19403fcc 	andi	r5,r3,255
    8d5c:	2800021e 	bne	r5,zero,8d68 <__lo0bits+0x48>
    8d60:	1806d23a 	srli	r3,r3,8
    8d64:	10800204 	addi	r2,r2,8
    8d68:	194003cc 	andi	r5,r3,15
    8d6c:	2800021e 	bne	r5,zero,8d78 <__lo0bits+0x58>
    8d70:	1806d13a 	srli	r3,r3,4
    8d74:	10800104 	addi	r2,r2,4
    8d78:	194000cc 	andi	r5,r3,3
    8d7c:	2800021e 	bne	r5,zero,8d88 <__lo0bits+0x68>
    8d80:	1806d0ba 	srli	r3,r3,2
    8d84:	10800084 	addi	r2,r2,2
    8d88:	1940004c 	andi	r5,r3,1
    8d8c:	2800081e 	bne	r5,zero,8db0 <__lo0bits+0x90>
    8d90:	1806d07a 	srli	r3,r3,1
    8d94:	1800051e 	bne	r3,zero,8dac <__lo0bits+0x8c>
    8d98:	00800804 	movi	r2,32
    8d9c:	f800283a 	ret
    8da0:	1806d43a 	srli	r3,r3,16
    8da4:	00800404 	movi	r2,16
    8da8:	003feb06 	br	8d58 <__alt_exception_stack_pointer+0xf8008d58>
    8dac:	10800044 	addi	r2,r2,1
    8db0:	20c00015 	stw	r3,0(r4)
    8db4:	f800283a 	ret
    8db8:	0005883a 	mov	r2,zero
    8dbc:	f800283a 	ret
    8dc0:	1806d07a 	srli	r3,r3,1
    8dc4:	00800044 	movi	r2,1
    8dc8:	20c00015 	stw	r3,0(r4)
    8dcc:	f800283a 	ret

00008dd0 <__i2b>:
    8dd0:	defffd04 	addi	sp,sp,-12
    8dd4:	dc000015 	stw	r16,0(sp)
    8dd8:	04000044 	movi	r16,1
    8ddc:	dc400115 	stw	r17,4(sp)
    8de0:	2823883a 	mov	r17,r5
    8de4:	800b883a 	mov	r5,r16
    8de8:	dfc00215 	stw	ra,8(sp)
    8dec:	000899c0 	call	899c <_Balloc>
    8df0:	14400515 	stw	r17,20(r2)
    8df4:	14000415 	stw	r16,16(r2)
    8df8:	dfc00217 	ldw	ra,8(sp)
    8dfc:	dc400117 	ldw	r17,4(sp)
    8e00:	dc000017 	ldw	r16,0(sp)
    8e04:	dec00304 	addi	sp,sp,12
    8e08:	f800283a 	ret

00008e0c <__multiply>:
    8e0c:	deffef04 	addi	sp,sp,-68
    8e10:	dc400815 	stw	r17,32(sp)
    8e14:	dc000715 	stw	r16,28(sp)
    8e18:	34400417 	ldw	r17,16(r6)
    8e1c:	2c000417 	ldw	r16,16(r5)
    8e20:	dd800d15 	stw	r22,52(sp)
    8e24:	dc800915 	stw	r18,36(sp)
    8e28:	dfc01015 	stw	ra,64(sp)
    8e2c:	df000f15 	stw	fp,60(sp)
    8e30:	ddc00e15 	stw	r23,56(sp)
    8e34:	dd400c15 	stw	r21,48(sp)
    8e38:	dd000b15 	stw	r20,44(sp)
    8e3c:	dcc00a15 	stw	r19,40(sp)
    8e40:	2825883a 	mov	r18,r5
    8e44:	302d883a 	mov	r22,r6
    8e48:	8440050e 	bge	r16,r17,8e60 <__multiply+0x54>
    8e4c:	8007883a 	mov	r3,r16
    8e50:	3025883a 	mov	r18,r6
    8e54:	8821883a 	mov	r16,r17
    8e58:	282d883a 	mov	r22,r5
    8e5c:	1823883a 	mov	r17,r3
    8e60:	90800217 	ldw	r2,8(r18)
    8e64:	8447883a 	add	r3,r16,r17
    8e68:	d8c00215 	stw	r3,8(sp)
    8e6c:	91400117 	ldw	r5,4(r18)
    8e70:	10c0010e 	bge	r2,r3,8e78 <__multiply+0x6c>
    8e74:	29400044 	addi	r5,r5,1
    8e78:	000899c0 	call	899c <_Balloc>
    8e7c:	d8c00217 	ldw	r3,8(sp)
    8e80:	d8800615 	stw	r2,24(sp)
    8e84:	18eb883a 	add	r21,r3,r3
    8e88:	ad6b883a 	add	r21,r21,r21
    8e8c:	10c00504 	addi	r3,r2,20
    8e90:	1d6b883a 	add	r21,r3,r21
    8e94:	d8c00115 	stw	r3,4(sp)
    8e98:	dd400315 	stw	r21,12(sp)
    8e9c:	1805883a 	mov	r2,r3
    8ea0:	1d40042e 	bgeu	r3,r21,8eb4 <__multiply+0xa8>
    8ea4:	d8c00317 	ldw	r3,12(sp)
    8ea8:	10000015 	stw	zero,0(r2)
    8eac:	10800104 	addi	r2,r2,4
    8eb0:	10fffc36 	bltu	r2,r3,8ea4 <__alt_exception_stack_pointer+0xf8008ea4>
    8eb4:	8c63883a 	add	r17,r17,r17
    8eb8:	b5800504 	addi	r22,r22,20
    8ebc:	8c63883a 	add	r17,r17,r17
    8ec0:	94800504 	addi	r18,r18,20
    8ec4:	8421883a 	add	r16,r16,r16
    8ec8:	b463883a 	add	r17,r22,r17
    8ecc:	8421883a 	add	r16,r16,r16
    8ed0:	dd800015 	stw	r22,0(sp)
    8ed4:	dc800415 	stw	r18,16(sp)
    8ed8:	dc400515 	stw	r17,20(sp)
    8edc:	9429883a 	add	r20,r18,r16
    8ee0:	b4404f2e 	bgeu	r22,r17,9020 <__multiply+0x214>
    8ee4:	d8c00017 	ldw	r3,0(sp)
    8ee8:	1c800017 	ldw	r18,0(r3)
    8eec:	947fffcc 	andi	r17,r18,65535
    8ef0:	88001e26 	beq	r17,zero,8f6c <__multiply+0x160>
    8ef4:	dd800117 	ldw	r22,4(sp)
    8ef8:	dd400417 	ldw	r21,16(sp)
    8efc:	0027883a 	mov	r19,zero
    8f00:	ac800017 	ldw	r18,0(r21)
    8f04:	b4000017 	ldw	r16,0(r22)
    8f08:	880b883a 	mov	r5,r17
    8f0c:	913fffcc 	andi	r4,r18,65535
    8f10:	000cffc0 	call	cffc <__mulsi3>
    8f14:	9008d43a 	srli	r4,r18,16
    8f18:	84bfffcc 	andi	r18,r16,65535
    8f1c:	1485883a 	add	r2,r2,r18
    8f20:	14e5883a 	add	r18,r2,r19
    8f24:	8020d43a 	srli	r16,r16,16
    8f28:	9026d43a 	srli	r19,r18,16
    8f2c:	880b883a 	mov	r5,r17
    8f30:	000cffc0 	call	cffc <__mulsi3>
    8f34:	1405883a 	add	r2,r2,r16
    8f38:	14e1883a 	add	r16,r2,r19
    8f3c:	90ffffcc 	andi	r3,r18,65535
    8f40:	8024943a 	slli	r18,r16,16
    8f44:	ad400104 	addi	r21,r21,4
    8f48:	b005883a 	mov	r2,r22
    8f4c:	90c6b03a 	or	r3,r18,r3
    8f50:	b0c00015 	stw	r3,0(r22)
    8f54:	8026d43a 	srli	r19,r16,16
    8f58:	b5800104 	addi	r22,r22,4
    8f5c:	ad3fe836 	bltu	r21,r20,8f00 <__alt_exception_stack_pointer+0xf8008f00>
    8f60:	d8c00017 	ldw	r3,0(sp)
    8f64:	14c00115 	stw	r19,4(r2)
    8f68:	1c800017 	ldw	r18,0(r3)
    8f6c:	9024d43a 	srli	r18,r18,16
    8f70:	90002226 	beq	r18,zero,8ffc <__multiply+0x1f0>
    8f74:	d8c00117 	ldw	r3,4(sp)
    8f78:	dd800417 	ldw	r22,16(sp)
    8f7c:	002f883a 	mov	r23,zero
    8f80:	1f000017 	ldw	fp,0(r3)
    8f84:	1823883a 	mov	r17,r3
    8f88:	182b883a 	mov	r21,r3
    8f8c:	e021883a 	mov	r16,fp
    8f90:	00000106 	br	8f98 <__multiply+0x18c>
    8f94:	982b883a 	mov	r21,r19
    8f98:	b100000b 	ldhu	r4,0(r22)
    8f9c:	8020d43a 	srli	r16,r16,16
    8fa0:	900b883a 	mov	r5,r18
    8fa4:	000cffc0 	call	cffc <__mulsi3>
    8fa8:	1405883a 	add	r2,r2,r16
    8fac:	15ef883a 	add	r23,r2,r23
    8fb0:	b804943a 	slli	r2,r23,16
    8fb4:	e0ffffcc 	andi	r3,fp,65535
    8fb8:	8c400104 	addi	r17,r17,4
    8fbc:	10c6b03a 	or	r3,r2,r3
    8fc0:	88ffff15 	stw	r3,-4(r17)
    8fc4:	b5800104 	addi	r22,r22,4
    8fc8:	b13fff17 	ldw	r4,-4(r22)
    8fcc:	acc00104 	addi	r19,r21,4
    8fd0:	900b883a 	mov	r5,r18
    8fd4:	2008d43a 	srli	r4,r4,16
    8fd8:	9c000017 	ldw	r16,0(r19)
    8fdc:	000cffc0 	call	cffc <__mulsi3>
    8fe0:	b806d43a 	srli	r3,r23,16
    8fe4:	813fffcc 	andi	r4,r16,65535
    8fe8:	1105883a 	add	r2,r2,r4
    8fec:	10f9883a 	add	fp,r2,r3
    8ff0:	e02ed43a 	srli	r23,fp,16
    8ff4:	b53fe736 	bltu	r22,r20,8f94 <__alt_exception_stack_pointer+0xf8008f94>
    8ff8:	af000115 	stw	fp,4(r21)
    8ffc:	d8c00017 	ldw	r3,0(sp)
    9000:	d9000517 	ldw	r4,20(sp)
    9004:	18c00104 	addi	r3,r3,4
    9008:	d8c00015 	stw	r3,0(sp)
    900c:	d8c00117 	ldw	r3,4(sp)
    9010:	18c00104 	addi	r3,r3,4
    9014:	d8c00115 	stw	r3,4(sp)
    9018:	d8c00017 	ldw	r3,0(sp)
    901c:	193fb136 	bltu	r3,r4,8ee4 <__alt_exception_stack_pointer+0xf8008ee4>
    9020:	d8c00217 	ldw	r3,8(sp)
    9024:	00c00c0e 	bge	zero,r3,9058 <__multiply+0x24c>
    9028:	d8c00317 	ldw	r3,12(sp)
    902c:	18bfff17 	ldw	r2,-4(r3)
    9030:	1d7fff04 	addi	r21,r3,-4
    9034:	10000326 	beq	r2,zero,9044 <__multiply+0x238>
    9038:	00000706 	br	9058 <__multiply+0x24c>
    903c:	a8800017 	ldw	r2,0(r21)
    9040:	1000051e 	bne	r2,zero,9058 <__multiply+0x24c>
    9044:	d8c00217 	ldw	r3,8(sp)
    9048:	ad7fff04 	addi	r21,r21,-4
    904c:	18ffffc4 	addi	r3,r3,-1
    9050:	d8c00215 	stw	r3,8(sp)
    9054:	183ff91e 	bne	r3,zero,903c <__alt_exception_stack_pointer+0xf800903c>
    9058:	d8c00617 	ldw	r3,24(sp)
    905c:	d9000217 	ldw	r4,8(sp)
    9060:	1805883a 	mov	r2,r3
    9064:	19000415 	stw	r4,16(r3)
    9068:	dfc01017 	ldw	ra,64(sp)
    906c:	df000f17 	ldw	fp,60(sp)
    9070:	ddc00e17 	ldw	r23,56(sp)
    9074:	dd800d17 	ldw	r22,52(sp)
    9078:	dd400c17 	ldw	r21,48(sp)
    907c:	dd000b17 	ldw	r20,44(sp)
    9080:	dcc00a17 	ldw	r19,40(sp)
    9084:	dc800917 	ldw	r18,36(sp)
    9088:	dc400817 	ldw	r17,32(sp)
    908c:	dc000717 	ldw	r16,28(sp)
    9090:	dec01104 	addi	sp,sp,68
    9094:	f800283a 	ret

00009098 <__pow5mult>:
    9098:	defffa04 	addi	sp,sp,-24
    909c:	dcc00315 	stw	r19,12(sp)
    90a0:	dc000015 	stw	r16,0(sp)
    90a4:	dfc00515 	stw	ra,20(sp)
    90a8:	dd000415 	stw	r20,16(sp)
    90ac:	dc800215 	stw	r18,8(sp)
    90b0:	dc400115 	stw	r17,4(sp)
    90b4:	308000cc 	andi	r2,r6,3
    90b8:	3021883a 	mov	r16,r6
    90bc:	2027883a 	mov	r19,r4
    90c0:	10002f1e 	bne	r2,zero,9180 <__pow5mult+0xe8>
    90c4:	2825883a 	mov	r18,r5
    90c8:	8021d0ba 	srai	r16,r16,2
    90cc:	80001a26 	beq	r16,zero,9138 <__pow5mult+0xa0>
    90d0:	9c401217 	ldw	r17,72(r19)
    90d4:	8800061e 	bne	r17,zero,90f0 <__pow5mult+0x58>
    90d8:	00003406 	br	91ac <__pow5mult+0x114>
    90dc:	8021d07a 	srai	r16,r16,1
    90e0:	80001526 	beq	r16,zero,9138 <__pow5mult+0xa0>
    90e4:	88800017 	ldw	r2,0(r17)
    90e8:	10001c26 	beq	r2,zero,915c <__pow5mult+0xc4>
    90ec:	1023883a 	mov	r17,r2
    90f0:	8080004c 	andi	r2,r16,1
    90f4:	103ff926 	beq	r2,zero,90dc <__alt_exception_stack_pointer+0xf80090dc>
    90f8:	880d883a 	mov	r6,r17
    90fc:	900b883a 	mov	r5,r18
    9100:	9809883a 	mov	r4,r19
    9104:	0008e0c0 	call	8e0c <__multiply>
    9108:	90001b26 	beq	r18,zero,9178 <__pow5mult+0xe0>
    910c:	91000117 	ldw	r4,4(r18)
    9110:	98c01317 	ldw	r3,76(r19)
    9114:	8021d07a 	srai	r16,r16,1
    9118:	2109883a 	add	r4,r4,r4
    911c:	2109883a 	add	r4,r4,r4
    9120:	1907883a 	add	r3,r3,r4
    9124:	19000017 	ldw	r4,0(r3)
    9128:	91000015 	stw	r4,0(r18)
    912c:	1c800015 	stw	r18,0(r3)
    9130:	1025883a 	mov	r18,r2
    9134:	803feb1e 	bne	r16,zero,90e4 <__alt_exception_stack_pointer+0xf80090e4>
    9138:	9005883a 	mov	r2,r18
    913c:	dfc00517 	ldw	ra,20(sp)
    9140:	dd000417 	ldw	r20,16(sp)
    9144:	dcc00317 	ldw	r19,12(sp)
    9148:	dc800217 	ldw	r18,8(sp)
    914c:	dc400117 	ldw	r17,4(sp)
    9150:	dc000017 	ldw	r16,0(sp)
    9154:	dec00604 	addi	sp,sp,24
    9158:	f800283a 	ret
    915c:	880d883a 	mov	r6,r17
    9160:	880b883a 	mov	r5,r17
    9164:	9809883a 	mov	r4,r19
    9168:	0008e0c0 	call	8e0c <__multiply>
    916c:	88800015 	stw	r2,0(r17)
    9170:	10000015 	stw	zero,0(r2)
    9174:	003fdd06 	br	90ec <__alt_exception_stack_pointer+0xf80090ec>
    9178:	1025883a 	mov	r18,r2
    917c:	003fd706 	br	90dc <__alt_exception_stack_pointer+0xf80090dc>
    9180:	10bfffc4 	addi	r2,r2,-1
    9184:	1085883a 	add	r2,r2,r2
    9188:	00c00074 	movhi	r3,1
    918c:	18cb8504 	addi	r3,r3,11796
    9190:	1085883a 	add	r2,r2,r2
    9194:	1885883a 	add	r2,r3,r2
    9198:	11800017 	ldw	r6,0(r2)
    919c:	000f883a 	mov	r7,zero
    91a0:	0008a6c0 	call	8a6c <__multadd>
    91a4:	1025883a 	mov	r18,r2
    91a8:	003fc706 	br	90c8 <__alt_exception_stack_pointer+0xf80090c8>
    91ac:	05000044 	movi	r20,1
    91b0:	a00b883a 	mov	r5,r20
    91b4:	9809883a 	mov	r4,r19
    91b8:	000899c0 	call	899c <_Balloc>
    91bc:	1023883a 	mov	r17,r2
    91c0:	00809c44 	movi	r2,625
    91c4:	88800515 	stw	r2,20(r17)
    91c8:	8d000415 	stw	r20,16(r17)
    91cc:	9c401215 	stw	r17,72(r19)
    91d0:	88000015 	stw	zero,0(r17)
    91d4:	003fc606 	br	90f0 <__alt_exception_stack_pointer+0xf80090f0>

000091d8 <__lshift>:
    91d8:	defff904 	addi	sp,sp,-28
    91dc:	dd400515 	stw	r21,20(sp)
    91e0:	dcc00315 	stw	r19,12(sp)
    91e4:	302bd17a 	srai	r21,r6,5
    91e8:	2cc00417 	ldw	r19,16(r5)
    91ec:	28800217 	ldw	r2,8(r5)
    91f0:	dd000415 	stw	r20,16(sp)
    91f4:	ace7883a 	add	r19,r21,r19
    91f8:	dc800215 	stw	r18,8(sp)
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	dc000015 	stw	r16,0(sp)
    9204:	dfc00615 	stw	ra,24(sp)
    9208:	9c000044 	addi	r16,r19,1
    920c:	2823883a 	mov	r17,r5
    9210:	3029883a 	mov	r20,r6
    9214:	2025883a 	mov	r18,r4
    9218:	29400117 	ldw	r5,4(r5)
    921c:	1400030e 	bge	r2,r16,922c <__lshift+0x54>
    9220:	1085883a 	add	r2,r2,r2
    9224:	29400044 	addi	r5,r5,1
    9228:	143ffd16 	blt	r2,r16,9220 <__alt_exception_stack_pointer+0xf8009220>
    922c:	9009883a 	mov	r4,r18
    9230:	000899c0 	call	899c <_Balloc>
    9234:	10c00504 	addi	r3,r2,20
    9238:	0540070e 	bge	zero,r21,9258 <__lshift+0x80>
    923c:	ad6b883a 	add	r21,r21,r21
    9240:	ad6b883a 	add	r21,r21,r21
    9244:	1809883a 	mov	r4,r3
    9248:	1d47883a 	add	r3,r3,r21
    924c:	20000015 	stw	zero,0(r4)
    9250:	21000104 	addi	r4,r4,4
    9254:	193ffd1e 	bne	r3,r4,924c <__alt_exception_stack_pointer+0xf800924c>
    9258:	8a000417 	ldw	r8,16(r17)
    925c:	89000504 	addi	r4,r17,20
    9260:	a18007cc 	andi	r6,r20,31
    9264:	4211883a 	add	r8,r8,r8
    9268:	4211883a 	add	r8,r8,r8
    926c:	2211883a 	add	r8,r4,r8
    9270:	30002326 	beq	r6,zero,9300 <__lshift+0x128>
    9274:	02400804 	movi	r9,32
    9278:	4993c83a 	sub	r9,r9,r6
    927c:	000b883a 	mov	r5,zero
    9280:	21c00017 	ldw	r7,0(r4)
    9284:	1815883a 	mov	r10,r3
    9288:	18c00104 	addi	r3,r3,4
    928c:	398e983a 	sll	r7,r7,r6
    9290:	21000104 	addi	r4,r4,4
    9294:	394ab03a 	or	r5,r7,r5
    9298:	197fff15 	stw	r5,-4(r3)
    929c:	217fff17 	ldw	r5,-4(r4)
    92a0:	2a4ad83a 	srl	r5,r5,r9
    92a4:	223ff636 	bltu	r4,r8,9280 <__alt_exception_stack_pointer+0xf8009280>
    92a8:	51400115 	stw	r5,4(r10)
    92ac:	28001a1e 	bne	r5,zero,9318 <__lshift+0x140>
    92b0:	843fffc4 	addi	r16,r16,-1
    92b4:	14000415 	stw	r16,16(r2)
    92b8:	88000826 	beq	r17,zero,92dc <__lshift+0x104>
    92bc:	89000117 	ldw	r4,4(r17)
    92c0:	90c01317 	ldw	r3,76(r18)
    92c4:	2109883a 	add	r4,r4,r4
    92c8:	2109883a 	add	r4,r4,r4
    92cc:	1907883a 	add	r3,r3,r4
    92d0:	19000017 	ldw	r4,0(r3)
    92d4:	89000015 	stw	r4,0(r17)
    92d8:	1c400015 	stw	r17,0(r3)
    92dc:	dfc00617 	ldw	ra,24(sp)
    92e0:	dd400517 	ldw	r21,20(sp)
    92e4:	dd000417 	ldw	r20,16(sp)
    92e8:	dcc00317 	ldw	r19,12(sp)
    92ec:	dc800217 	ldw	r18,8(sp)
    92f0:	dc400117 	ldw	r17,4(sp)
    92f4:	dc000017 	ldw	r16,0(sp)
    92f8:	dec00704 	addi	sp,sp,28
    92fc:	f800283a 	ret
    9300:	21400017 	ldw	r5,0(r4)
    9304:	18c00104 	addi	r3,r3,4
    9308:	21000104 	addi	r4,r4,4
    930c:	197fff15 	stw	r5,-4(r3)
    9310:	223ffb36 	bltu	r4,r8,9300 <__alt_exception_stack_pointer+0xf8009300>
    9314:	003fe606 	br	92b0 <__alt_exception_stack_pointer+0xf80092b0>
    9318:	9c000084 	addi	r16,r19,2
    931c:	003fe406 	br	92b0 <__alt_exception_stack_pointer+0xf80092b0>

00009320 <__mcmp>:
    9320:	20800417 	ldw	r2,16(r4)
    9324:	28c00417 	ldw	r3,16(r5)
    9328:	10c5c83a 	sub	r2,r2,r3
    932c:	1000111e 	bne	r2,zero,9374 <__mcmp+0x54>
    9330:	18c7883a 	add	r3,r3,r3
    9334:	18c7883a 	add	r3,r3,r3
    9338:	21000504 	addi	r4,r4,20
    933c:	29400504 	addi	r5,r5,20
    9340:	20c5883a 	add	r2,r4,r3
    9344:	28cb883a 	add	r5,r5,r3
    9348:	00000106 	br	9350 <__mcmp+0x30>
    934c:	20800a2e 	bgeu	r4,r2,9378 <__mcmp+0x58>
    9350:	10bfff04 	addi	r2,r2,-4
    9354:	297fff04 	addi	r5,r5,-4
    9358:	11800017 	ldw	r6,0(r2)
    935c:	28c00017 	ldw	r3,0(r5)
    9360:	30fffa26 	beq	r6,r3,934c <__alt_exception_stack_pointer+0xf800934c>
    9364:	30c00236 	bltu	r6,r3,9370 <__mcmp+0x50>
    9368:	00800044 	movi	r2,1
    936c:	f800283a 	ret
    9370:	00bfffc4 	movi	r2,-1
    9374:	f800283a 	ret
    9378:	0005883a 	mov	r2,zero
    937c:	f800283a 	ret

00009380 <__mdiff>:
    9380:	28c00417 	ldw	r3,16(r5)
    9384:	30800417 	ldw	r2,16(r6)
    9388:	defffa04 	addi	sp,sp,-24
    938c:	dcc00315 	stw	r19,12(sp)
    9390:	dc800215 	stw	r18,8(sp)
    9394:	dfc00515 	stw	ra,20(sp)
    9398:	dd000415 	stw	r20,16(sp)
    939c:	dc400115 	stw	r17,4(sp)
    93a0:	dc000015 	stw	r16,0(sp)
    93a4:	1887c83a 	sub	r3,r3,r2
    93a8:	2825883a 	mov	r18,r5
    93ac:	3027883a 	mov	r19,r6
    93b0:	1800141e 	bne	r3,zero,9404 <__mdiff+0x84>
    93b4:	1085883a 	add	r2,r2,r2
    93b8:	1085883a 	add	r2,r2,r2
    93bc:	2a000504 	addi	r8,r5,20
    93c0:	34000504 	addi	r16,r6,20
    93c4:	4087883a 	add	r3,r8,r2
    93c8:	8085883a 	add	r2,r16,r2
    93cc:	00000106 	br	93d4 <__mdiff+0x54>
    93d0:	40c0592e 	bgeu	r8,r3,9538 <__mdiff+0x1b8>
    93d4:	18ffff04 	addi	r3,r3,-4
    93d8:	10bfff04 	addi	r2,r2,-4
    93dc:	19c00017 	ldw	r7,0(r3)
    93e0:	11400017 	ldw	r5,0(r2)
    93e4:	397ffa26 	beq	r7,r5,93d0 <__alt_exception_stack_pointer+0xf80093d0>
    93e8:	3940592e 	bgeu	r7,r5,9550 <__mdiff+0x1d0>
    93ec:	9005883a 	mov	r2,r18
    93f0:	4023883a 	mov	r17,r8
    93f4:	9825883a 	mov	r18,r19
    93f8:	05000044 	movi	r20,1
    93fc:	1027883a 	mov	r19,r2
    9400:	00000406 	br	9414 <__mdiff+0x94>
    9404:	18005616 	blt	r3,zero,9560 <__mdiff+0x1e0>
    9408:	34400504 	addi	r17,r6,20
    940c:	2c000504 	addi	r16,r5,20
    9410:	0029883a 	mov	r20,zero
    9414:	91400117 	ldw	r5,4(r18)
    9418:	000899c0 	call	899c <_Balloc>
    941c:	92400417 	ldw	r9,16(r18)
    9420:	9b000417 	ldw	r12,16(r19)
    9424:	12c00504 	addi	r11,r2,20
    9428:	4a51883a 	add	r8,r9,r9
    942c:	6319883a 	add	r12,r12,r12
    9430:	4211883a 	add	r8,r8,r8
    9434:	6319883a 	add	r12,r12,r12
    9438:	15000315 	stw	r20,12(r2)
    943c:	8211883a 	add	r8,r16,r8
    9440:	8b19883a 	add	r12,r17,r12
    9444:	0007883a 	mov	r3,zero
    9448:	81400017 	ldw	r5,0(r16)
    944c:	89c00017 	ldw	r7,0(r17)
    9450:	59800104 	addi	r6,r11,4
    9454:	293fffcc 	andi	r4,r5,65535
    9458:	20c7883a 	add	r3,r4,r3
    945c:	393fffcc 	andi	r4,r7,65535
    9460:	1909c83a 	sub	r4,r3,r4
    9464:	280ad43a 	srli	r5,r5,16
    9468:	380ed43a 	srli	r7,r7,16
    946c:	2007d43a 	srai	r3,r4,16
    9470:	213fffcc 	andi	r4,r4,65535
    9474:	29cbc83a 	sub	r5,r5,r7
    9478:	28c7883a 	add	r3,r5,r3
    947c:	180a943a 	slli	r5,r3,16
    9480:	8c400104 	addi	r17,r17,4
    9484:	84000104 	addi	r16,r16,4
    9488:	2908b03a 	or	r4,r5,r4
    948c:	59000015 	stw	r4,0(r11)
    9490:	1807d43a 	srai	r3,r3,16
    9494:	3015883a 	mov	r10,r6
    9498:	3017883a 	mov	r11,r6
    949c:	8b3fea36 	bltu	r17,r12,9448 <__alt_exception_stack_pointer+0xf8009448>
    94a0:	8200162e 	bgeu	r16,r8,94fc <__mdiff+0x17c>
    94a4:	8017883a 	mov	r11,r16
    94a8:	59400017 	ldw	r5,0(r11)
    94ac:	31800104 	addi	r6,r6,4
    94b0:	5ac00104 	addi	r11,r11,4
    94b4:	293fffcc 	andi	r4,r5,65535
    94b8:	20c7883a 	add	r3,r4,r3
    94bc:	280ed43a 	srli	r7,r5,16
    94c0:	180bd43a 	srai	r5,r3,16
    94c4:	193fffcc 	andi	r4,r3,65535
    94c8:	3947883a 	add	r3,r7,r5
    94cc:	180a943a 	slli	r5,r3,16
    94d0:	1807d43a 	srai	r3,r3,16
    94d4:	2908b03a 	or	r4,r5,r4
    94d8:	313fff15 	stw	r4,-4(r6)
    94dc:	5a3ff236 	bltu	r11,r8,94a8 <__alt_exception_stack_pointer+0xf80094a8>
    94e0:	0406303a 	nor	r3,zero,r16
    94e4:	1a07883a 	add	r3,r3,r8
    94e8:	1806d0ba 	srli	r3,r3,2
    94ec:	18c00044 	addi	r3,r3,1
    94f0:	18c7883a 	add	r3,r3,r3
    94f4:	18c7883a 	add	r3,r3,r3
    94f8:	50d5883a 	add	r10,r10,r3
    94fc:	50ffff04 	addi	r3,r10,-4
    9500:	2000041e 	bne	r4,zero,9514 <__mdiff+0x194>
    9504:	18ffff04 	addi	r3,r3,-4
    9508:	19000017 	ldw	r4,0(r3)
    950c:	4a7fffc4 	addi	r9,r9,-1
    9510:	203ffc26 	beq	r4,zero,9504 <__alt_exception_stack_pointer+0xf8009504>
    9514:	12400415 	stw	r9,16(r2)
    9518:	dfc00517 	ldw	ra,20(sp)
    951c:	dd000417 	ldw	r20,16(sp)
    9520:	dcc00317 	ldw	r19,12(sp)
    9524:	dc800217 	ldw	r18,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00604 	addi	sp,sp,24
    9534:	f800283a 	ret
    9538:	000b883a 	mov	r5,zero
    953c:	000899c0 	call	899c <_Balloc>
    9540:	00c00044 	movi	r3,1
    9544:	10c00415 	stw	r3,16(r2)
    9548:	10000515 	stw	zero,20(r2)
    954c:	003ff206 	br	9518 <__alt_exception_stack_pointer+0xf8009518>
    9550:	8023883a 	mov	r17,r16
    9554:	0029883a 	mov	r20,zero
    9558:	4021883a 	mov	r16,r8
    955c:	003fad06 	br	9414 <__alt_exception_stack_pointer+0xf8009414>
    9560:	9005883a 	mov	r2,r18
    9564:	94400504 	addi	r17,r18,20
    9568:	9c000504 	addi	r16,r19,20
    956c:	9825883a 	mov	r18,r19
    9570:	05000044 	movi	r20,1
    9574:	1027883a 	mov	r19,r2
    9578:	003fa606 	br	9414 <__alt_exception_stack_pointer+0xf8009414>

0000957c <__ulp>:
    957c:	295ffc2c 	andhi	r5,r5,32752
    9580:	00bf3034 	movhi	r2,64704
    9584:	2887883a 	add	r3,r5,r2
    9588:	00c0020e 	bge	zero,r3,9594 <__ulp+0x18>
    958c:	0005883a 	mov	r2,zero
    9590:	f800283a 	ret
    9594:	00c7c83a 	sub	r3,zero,r3
    9598:	1807d53a 	srai	r3,r3,20
    959c:	008004c4 	movi	r2,19
    95a0:	10c00b0e 	bge	r2,r3,95d0 <__ulp+0x54>
    95a4:	18bffb04 	addi	r2,r3,-20
    95a8:	01000784 	movi	r4,30
    95ac:	0007883a 	mov	r3,zero
    95b0:	20800516 	blt	r4,r2,95c8 <__ulp+0x4c>
    95b4:	010007c4 	movi	r4,31
    95b8:	2089c83a 	sub	r4,r4,r2
    95bc:	00800044 	movi	r2,1
    95c0:	1104983a 	sll	r2,r2,r4
    95c4:	f800283a 	ret
    95c8:	00800044 	movi	r2,1
    95cc:	f800283a 	ret
    95d0:	01400234 	movhi	r5,8
    95d4:	28c7d83a 	sra	r3,r5,r3
    95d8:	0005883a 	mov	r2,zero
    95dc:	f800283a 	ret

000095e0 <__b2d>:
    95e0:	defffa04 	addi	sp,sp,-24
    95e4:	dc000015 	stw	r16,0(sp)
    95e8:	24000417 	ldw	r16,16(r4)
    95ec:	dc400115 	stw	r17,4(sp)
    95f0:	24400504 	addi	r17,r4,20
    95f4:	8421883a 	add	r16,r16,r16
    95f8:	8421883a 	add	r16,r16,r16
    95fc:	8c21883a 	add	r16,r17,r16
    9600:	dc800215 	stw	r18,8(sp)
    9604:	84bfff17 	ldw	r18,-4(r16)
    9608:	dd000415 	stw	r20,16(sp)
    960c:	dcc00315 	stw	r19,12(sp)
    9610:	9009883a 	mov	r4,r18
    9614:	2829883a 	mov	r20,r5
    9618:	dfc00515 	stw	ra,20(sp)
    961c:	0008cb80 	call	8cb8 <__hi0bits>
    9620:	00c00804 	movi	r3,32
    9624:	1889c83a 	sub	r4,r3,r2
    9628:	a1000015 	stw	r4,0(r20)
    962c:	01000284 	movi	r4,10
    9630:	84ffff04 	addi	r19,r16,-4
    9634:	20801216 	blt	r4,r2,9680 <__b2d+0xa0>
    9638:	018002c4 	movi	r6,11
    963c:	308dc83a 	sub	r6,r6,r2
    9640:	9186d83a 	srl	r3,r18,r6
    9644:	18cffc34 	orhi	r3,r3,16368
    9648:	8cc0212e 	bgeu	r17,r19,96d0 <__b2d+0xf0>
    964c:	813ffe17 	ldw	r4,-8(r16)
    9650:	218cd83a 	srl	r6,r4,r6
    9654:	10800544 	addi	r2,r2,21
    9658:	9084983a 	sll	r2,r18,r2
    965c:	1184b03a 	or	r2,r2,r6
    9660:	dfc00517 	ldw	ra,20(sp)
    9664:	dd000417 	ldw	r20,16(sp)
    9668:	dcc00317 	ldw	r19,12(sp)
    966c:	dc800217 	ldw	r18,8(sp)
    9670:	dc400117 	ldw	r17,4(sp)
    9674:	dc000017 	ldw	r16,0(sp)
    9678:	dec00604 	addi	sp,sp,24
    967c:	f800283a 	ret
    9680:	8cc00f2e 	bgeu	r17,r19,96c0 <__b2d+0xe0>
    9684:	117ffd44 	addi	r5,r2,-11
    9688:	80bffe17 	ldw	r2,-8(r16)
    968c:	28000e26 	beq	r5,zero,96c8 <__b2d+0xe8>
    9690:	1949c83a 	sub	r4,r3,r5
    9694:	9164983a 	sll	r18,r18,r5
    9698:	1106d83a 	srl	r3,r2,r4
    969c:	81bffe04 	addi	r6,r16,-8
    96a0:	948ffc34 	orhi	r18,r18,16368
    96a4:	90c6b03a 	or	r3,r18,r3
    96a8:	89800e2e 	bgeu	r17,r6,96e4 <__b2d+0x104>
    96ac:	81bffd17 	ldw	r6,-12(r16)
    96b0:	1144983a 	sll	r2,r2,r5
    96b4:	310ad83a 	srl	r5,r6,r4
    96b8:	2884b03a 	or	r2,r5,r2
    96bc:	003fe806 	br	9660 <__alt_exception_stack_pointer+0xf8009660>
    96c0:	10bffd44 	addi	r2,r2,-11
    96c4:	1000041e 	bne	r2,zero,96d8 <__b2d+0xf8>
    96c8:	90cffc34 	orhi	r3,r18,16368
    96cc:	003fe406 	br	9660 <__alt_exception_stack_pointer+0xf8009660>
    96d0:	000d883a 	mov	r6,zero
    96d4:	003fdf06 	br	9654 <__alt_exception_stack_pointer+0xf8009654>
    96d8:	90a4983a 	sll	r18,r18,r2
    96dc:	0005883a 	mov	r2,zero
    96e0:	003ff906 	br	96c8 <__alt_exception_stack_pointer+0xf80096c8>
    96e4:	1144983a 	sll	r2,r2,r5
    96e8:	003fdd06 	br	9660 <__alt_exception_stack_pointer+0xf8009660>

000096ec <__d2b>:
    96ec:	defff804 	addi	sp,sp,-32
    96f0:	dc000215 	stw	r16,8(sp)
    96f4:	3021883a 	mov	r16,r6
    96f8:	dc400315 	stw	r17,12(sp)
    96fc:	8022907a 	slli	r17,r16,1
    9700:	dd000615 	stw	r20,24(sp)
    9704:	2829883a 	mov	r20,r5
    9708:	01400044 	movi	r5,1
    970c:	dcc00515 	stw	r19,20(sp)
    9710:	dc800415 	stw	r18,16(sp)
    9714:	dfc00715 	stw	ra,28(sp)
    9718:	3825883a 	mov	r18,r7
    971c:	8822d57a 	srli	r17,r17,21
    9720:	000899c0 	call	899c <_Balloc>
    9724:	1027883a 	mov	r19,r2
    9728:	00800434 	movhi	r2,16
    972c:	10bfffc4 	addi	r2,r2,-1
    9730:	808c703a 	and	r6,r16,r2
    9734:	88000126 	beq	r17,zero,973c <__d2b+0x50>
    9738:	31800434 	orhi	r6,r6,16
    973c:	d9800015 	stw	r6,0(sp)
    9740:	a0002426 	beq	r20,zero,97d4 <__d2b+0xe8>
    9744:	d9000104 	addi	r4,sp,4
    9748:	dd000115 	stw	r20,4(sp)
    974c:	0008d200 	call	8d20 <__lo0bits>
    9750:	d8c00017 	ldw	r3,0(sp)
    9754:	10002f1e 	bne	r2,zero,9814 <__d2b+0x128>
    9758:	d9000117 	ldw	r4,4(sp)
    975c:	99000515 	stw	r4,20(r19)
    9760:	1821003a 	cmpeq	r16,r3,zero
    9764:	01000084 	movi	r4,2
    9768:	2421c83a 	sub	r16,r4,r16
    976c:	98c00615 	stw	r3,24(r19)
    9770:	9c000415 	stw	r16,16(r19)
    9774:	88001f1e 	bne	r17,zero,97f4 <__d2b+0x108>
    9778:	10bef384 	addi	r2,r2,-1074
    977c:	90800015 	stw	r2,0(r18)
    9780:	00900034 	movhi	r2,16384
    9784:	10bfffc4 	addi	r2,r2,-1
    9788:	8085883a 	add	r2,r16,r2
    978c:	1085883a 	add	r2,r2,r2
    9790:	1085883a 	add	r2,r2,r2
    9794:	9885883a 	add	r2,r19,r2
    9798:	11000517 	ldw	r4,20(r2)
    979c:	8020917a 	slli	r16,r16,5
    97a0:	0008cb80 	call	8cb8 <__hi0bits>
    97a4:	d8c00817 	ldw	r3,32(sp)
    97a8:	8085c83a 	sub	r2,r16,r2
    97ac:	18800015 	stw	r2,0(r3)
    97b0:	9805883a 	mov	r2,r19
    97b4:	dfc00717 	ldw	ra,28(sp)
    97b8:	dd000617 	ldw	r20,24(sp)
    97bc:	dcc00517 	ldw	r19,20(sp)
    97c0:	dc800417 	ldw	r18,16(sp)
    97c4:	dc400317 	ldw	r17,12(sp)
    97c8:	dc000217 	ldw	r16,8(sp)
    97cc:	dec00804 	addi	sp,sp,32
    97d0:	f800283a 	ret
    97d4:	d809883a 	mov	r4,sp
    97d8:	0008d200 	call	8d20 <__lo0bits>
    97dc:	d8c00017 	ldw	r3,0(sp)
    97e0:	04000044 	movi	r16,1
    97e4:	9c000415 	stw	r16,16(r19)
    97e8:	98c00515 	stw	r3,20(r19)
    97ec:	10800804 	addi	r2,r2,32
    97f0:	883fe126 	beq	r17,zero,9778 <__alt_exception_stack_pointer+0xf8009778>
    97f4:	00c00d44 	movi	r3,53
    97f8:	8c7ef344 	addi	r17,r17,-1075
    97fc:	88a3883a 	add	r17,r17,r2
    9800:	1885c83a 	sub	r2,r3,r2
    9804:	d8c00817 	ldw	r3,32(sp)
    9808:	94400015 	stw	r17,0(r18)
    980c:	18800015 	stw	r2,0(r3)
    9810:	003fe706 	br	97b0 <__alt_exception_stack_pointer+0xf80097b0>
    9814:	01000804 	movi	r4,32
    9818:	2089c83a 	sub	r4,r4,r2
    981c:	1908983a 	sll	r4,r3,r4
    9820:	d9400117 	ldw	r5,4(sp)
    9824:	1886d83a 	srl	r3,r3,r2
    9828:	2148b03a 	or	r4,r4,r5
    982c:	99000515 	stw	r4,20(r19)
    9830:	d8c00015 	stw	r3,0(sp)
    9834:	003fca06 	br	9760 <__alt_exception_stack_pointer+0xf8009760>

00009838 <__ratio>:
    9838:	defff904 	addi	sp,sp,-28
    983c:	dc400315 	stw	r17,12(sp)
    9840:	2823883a 	mov	r17,r5
    9844:	d9400104 	addi	r5,sp,4
    9848:	dfc00615 	stw	ra,24(sp)
    984c:	dcc00515 	stw	r19,20(sp)
    9850:	dc800415 	stw	r18,16(sp)
    9854:	2027883a 	mov	r19,r4
    9858:	dc000215 	stw	r16,8(sp)
    985c:	00095e00 	call	95e0 <__b2d>
    9860:	d80b883a 	mov	r5,sp
    9864:	8809883a 	mov	r4,r17
    9868:	1025883a 	mov	r18,r2
    986c:	1821883a 	mov	r16,r3
    9870:	00095e00 	call	95e0 <__b2d>
    9874:	8a000417 	ldw	r8,16(r17)
    9878:	99000417 	ldw	r4,16(r19)
    987c:	d9400117 	ldw	r5,4(sp)
    9880:	2209c83a 	sub	r4,r4,r8
    9884:	2010917a 	slli	r8,r4,5
    9888:	d9000017 	ldw	r4,0(sp)
    988c:	2909c83a 	sub	r4,r5,r4
    9890:	4109883a 	add	r4,r8,r4
    9894:	01000e0e 	bge	zero,r4,98d0 <__ratio+0x98>
    9898:	2008953a 	slli	r4,r4,20
    989c:	2421883a 	add	r16,r4,r16
    98a0:	100d883a 	mov	r6,r2
    98a4:	180f883a 	mov	r7,r3
    98a8:	9009883a 	mov	r4,r18
    98ac:	800b883a 	mov	r5,r16
    98b0:	000d8d00 	call	d8d0 <__divdf3>
    98b4:	dfc00617 	ldw	ra,24(sp)
    98b8:	dcc00517 	ldw	r19,20(sp)
    98bc:	dc800417 	ldw	r18,16(sp)
    98c0:	dc400317 	ldw	r17,12(sp)
    98c4:	dc000217 	ldw	r16,8(sp)
    98c8:	dec00704 	addi	sp,sp,28
    98cc:	f800283a 	ret
    98d0:	2008953a 	slli	r4,r4,20
    98d4:	1907c83a 	sub	r3,r3,r4
    98d8:	003ff106 	br	98a0 <__alt_exception_stack_pointer+0xf80098a0>

000098dc <_mprec_log10>:
    98dc:	defffe04 	addi	sp,sp,-8
    98e0:	dc000015 	stw	r16,0(sp)
    98e4:	dfc00115 	stw	ra,4(sp)
    98e8:	008005c4 	movi	r2,23
    98ec:	2021883a 	mov	r16,r4
    98f0:	11000d0e 	bge	r2,r4,9928 <_mprec_log10+0x4c>
    98f4:	0005883a 	mov	r2,zero
    98f8:	00cffc34 	movhi	r3,16368
    98fc:	843fffc4 	addi	r16,r16,-1
    9900:	000d883a 	mov	r6,zero
    9904:	01d00934 	movhi	r7,16420
    9908:	1009883a 	mov	r4,r2
    990c:	180b883a 	mov	r5,r3
    9910:	000e4f80 	call	e4f8 <__muldf3>
    9914:	803ff91e 	bne	r16,zero,98fc <__alt_exception_stack_pointer+0xf80098fc>
    9918:	dfc00117 	ldw	ra,4(sp)
    991c:	dc000017 	ldw	r16,0(sp)
    9920:	dec00204 	addi	sp,sp,8
    9924:	f800283a 	ret
    9928:	202090fa 	slli	r16,r4,3
    992c:	00800074 	movhi	r2,1
    9930:	108b9c04 	addi	r2,r2,11888
    9934:	1421883a 	add	r16,r2,r16
    9938:	80800017 	ldw	r2,0(r16)
    993c:	80c00117 	ldw	r3,4(r16)
    9940:	dfc00117 	ldw	ra,4(sp)
    9944:	dc000017 	ldw	r16,0(sp)
    9948:	dec00204 	addi	sp,sp,8
    994c:	f800283a 	ret

00009950 <__copybits>:
    9950:	297fffc4 	addi	r5,r5,-1
    9954:	280fd17a 	srai	r7,r5,5
    9958:	30c00417 	ldw	r3,16(r6)
    995c:	30800504 	addi	r2,r6,20
    9960:	39c00044 	addi	r7,r7,1
    9964:	18c7883a 	add	r3,r3,r3
    9968:	39cf883a 	add	r7,r7,r7
    996c:	18c7883a 	add	r3,r3,r3
    9970:	39cf883a 	add	r7,r7,r7
    9974:	10c7883a 	add	r3,r2,r3
    9978:	21cf883a 	add	r7,r4,r7
    997c:	10c00d2e 	bgeu	r2,r3,99b4 <__copybits+0x64>
    9980:	200b883a 	mov	r5,r4
    9984:	12000017 	ldw	r8,0(r2)
    9988:	29400104 	addi	r5,r5,4
    998c:	10800104 	addi	r2,r2,4
    9990:	2a3fff15 	stw	r8,-4(r5)
    9994:	10fffb36 	bltu	r2,r3,9984 <__alt_exception_stack_pointer+0xf8009984>
    9998:	1985c83a 	sub	r2,r3,r6
    999c:	10bffac4 	addi	r2,r2,-21
    99a0:	1004d0ba 	srli	r2,r2,2
    99a4:	10800044 	addi	r2,r2,1
    99a8:	1085883a 	add	r2,r2,r2
    99ac:	1085883a 	add	r2,r2,r2
    99b0:	2089883a 	add	r4,r4,r2
    99b4:	21c0032e 	bgeu	r4,r7,99c4 <__copybits+0x74>
    99b8:	20000015 	stw	zero,0(r4)
    99bc:	21000104 	addi	r4,r4,4
    99c0:	21fffd36 	bltu	r4,r7,99b8 <__alt_exception_stack_pointer+0xf80099b8>
    99c4:	f800283a 	ret

000099c8 <__any_on>:
    99c8:	20c00417 	ldw	r3,16(r4)
    99cc:	2805d17a 	srai	r2,r5,5
    99d0:	21000504 	addi	r4,r4,20
    99d4:	18800d0e 	bge	r3,r2,9a0c <__any_on+0x44>
    99d8:	18c7883a 	add	r3,r3,r3
    99dc:	18c7883a 	add	r3,r3,r3
    99e0:	20c7883a 	add	r3,r4,r3
    99e4:	20c0192e 	bgeu	r4,r3,9a4c <__any_on+0x84>
    99e8:	18bfff17 	ldw	r2,-4(r3)
    99ec:	18ffff04 	addi	r3,r3,-4
    99f0:	1000041e 	bne	r2,zero,9a04 <__any_on+0x3c>
    99f4:	20c0142e 	bgeu	r4,r3,9a48 <__any_on+0x80>
    99f8:	18ffff04 	addi	r3,r3,-4
    99fc:	19400017 	ldw	r5,0(r3)
    9a00:	283ffc26 	beq	r5,zero,99f4 <__alt_exception_stack_pointer+0xf80099f4>
    9a04:	00800044 	movi	r2,1
    9a08:	f800283a 	ret
    9a0c:	10c00a0e 	bge	r2,r3,9a38 <__any_on+0x70>
    9a10:	1085883a 	add	r2,r2,r2
    9a14:	1085883a 	add	r2,r2,r2
    9a18:	294007cc 	andi	r5,r5,31
    9a1c:	2087883a 	add	r3,r4,r2
    9a20:	283ff026 	beq	r5,zero,99e4 <__alt_exception_stack_pointer+0xf80099e4>
    9a24:	19800017 	ldw	r6,0(r3)
    9a28:	3144d83a 	srl	r2,r6,r5
    9a2c:	114a983a 	sll	r5,r2,r5
    9a30:	317ff41e 	bne	r6,r5,9a04 <__alt_exception_stack_pointer+0xf8009a04>
    9a34:	003feb06 	br	99e4 <__alt_exception_stack_pointer+0xf80099e4>
    9a38:	1085883a 	add	r2,r2,r2
    9a3c:	1085883a 	add	r2,r2,r2
    9a40:	2087883a 	add	r3,r4,r2
    9a44:	003fe706 	br	99e4 <__alt_exception_stack_pointer+0xf80099e4>
    9a48:	f800283a 	ret
    9a4c:	0005883a 	mov	r2,zero
    9a50:	f800283a 	ret

00009a54 <_realloc_r>:
    9a54:	defff604 	addi	sp,sp,-40
    9a58:	dc800215 	stw	r18,8(sp)
    9a5c:	dfc00915 	stw	ra,36(sp)
    9a60:	df000815 	stw	fp,32(sp)
    9a64:	ddc00715 	stw	r23,28(sp)
    9a68:	dd800615 	stw	r22,24(sp)
    9a6c:	dd400515 	stw	r21,20(sp)
    9a70:	dd000415 	stw	r20,16(sp)
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	dc400115 	stw	r17,4(sp)
    9a7c:	dc000015 	stw	r16,0(sp)
    9a80:	3025883a 	mov	r18,r6
    9a84:	2800b726 	beq	r5,zero,9d64 <_realloc_r+0x310>
    9a88:	282b883a 	mov	r21,r5
    9a8c:	2029883a 	mov	r20,r4
    9a90:	000fe640 	call	fe64 <__malloc_lock>
    9a94:	a8bfff17 	ldw	r2,-4(r21)
    9a98:	043fff04 	movi	r16,-4
    9a9c:	90c002c4 	addi	r3,r18,11
    9aa0:	01000584 	movi	r4,22
    9aa4:	acfffe04 	addi	r19,r21,-8
    9aa8:	1420703a 	and	r16,r2,r16
    9aac:	20c0332e 	bgeu	r4,r3,9b7c <_realloc_r+0x128>
    9ab0:	047ffe04 	movi	r17,-8
    9ab4:	1c62703a 	and	r17,r3,r17
    9ab8:	8807883a 	mov	r3,r17
    9abc:	88005816 	blt	r17,zero,9c20 <_realloc_r+0x1cc>
    9ac0:	8c805736 	bltu	r17,r18,9c20 <_realloc_r+0x1cc>
    9ac4:	80c0300e 	bge	r16,r3,9b88 <_realloc_r+0x134>
    9ac8:	07000074 	movhi	fp,1
    9acc:	e70d3a04 	addi	fp,fp,13544
    9ad0:	e1c00217 	ldw	r7,8(fp)
    9ad4:	9c09883a 	add	r4,r19,r16
    9ad8:	22000117 	ldw	r8,4(r4)
    9adc:	21c06326 	beq	r4,r7,9c6c <_realloc_r+0x218>
    9ae0:	017fff84 	movi	r5,-2
    9ae4:	414a703a 	and	r5,r8,r5
    9ae8:	214b883a 	add	r5,r4,r5
    9aec:	29800117 	ldw	r6,4(r5)
    9af0:	3180004c 	andi	r6,r6,1
    9af4:	30003f26 	beq	r6,zero,9bf4 <_realloc_r+0x1a0>
    9af8:	1080004c 	andi	r2,r2,1
    9afc:	10008326 	beq	r2,zero,9d0c <_realloc_r+0x2b8>
    9b00:	900b883a 	mov	r5,r18
    9b04:	a009883a 	mov	r4,r20
    9b08:	00029800 	call	2980 <_malloc_r>
    9b0c:	1025883a 	mov	r18,r2
    9b10:	10011e26 	beq	r2,zero,9f8c <_realloc_r+0x538>
    9b14:	a93fff17 	ldw	r4,-4(r21)
    9b18:	10fffe04 	addi	r3,r2,-8
    9b1c:	00bfff84 	movi	r2,-2
    9b20:	2084703a 	and	r2,r4,r2
    9b24:	9885883a 	add	r2,r19,r2
    9b28:	1880ee26 	beq	r3,r2,9ee4 <_realloc_r+0x490>
    9b2c:	81bfff04 	addi	r6,r16,-4
    9b30:	00800904 	movi	r2,36
    9b34:	1180b836 	bltu	r2,r6,9e18 <_realloc_r+0x3c4>
    9b38:	00c004c4 	movi	r3,19
    9b3c:	19809636 	bltu	r3,r6,9d98 <_realloc_r+0x344>
    9b40:	9005883a 	mov	r2,r18
    9b44:	a807883a 	mov	r3,r21
    9b48:	19000017 	ldw	r4,0(r3)
    9b4c:	11000015 	stw	r4,0(r2)
    9b50:	19000117 	ldw	r4,4(r3)
    9b54:	11000115 	stw	r4,4(r2)
    9b58:	18c00217 	ldw	r3,8(r3)
    9b5c:	10c00215 	stw	r3,8(r2)
    9b60:	a80b883a 	mov	r5,r21
    9b64:	a009883a 	mov	r4,r20
    9b68:	00078f40 	call	78f4 <_free_r>
    9b6c:	a009883a 	mov	r4,r20
    9b70:	000fe880 	call	fe88 <__malloc_unlock>
    9b74:	9005883a 	mov	r2,r18
    9b78:	00001206 	br	9bc4 <_realloc_r+0x170>
    9b7c:	00c00404 	movi	r3,16
    9b80:	1823883a 	mov	r17,r3
    9b84:	003fce06 	br	9ac0 <__alt_exception_stack_pointer+0xf8009ac0>
    9b88:	a825883a 	mov	r18,r21
    9b8c:	8445c83a 	sub	r2,r16,r17
    9b90:	00c003c4 	movi	r3,15
    9b94:	18802636 	bltu	r3,r2,9c30 <_realloc_r+0x1dc>
    9b98:	99800117 	ldw	r6,4(r19)
    9b9c:	9c07883a 	add	r3,r19,r16
    9ba0:	3180004c 	andi	r6,r6,1
    9ba4:	3420b03a 	or	r16,r6,r16
    9ba8:	9c000115 	stw	r16,4(r19)
    9bac:	18800117 	ldw	r2,4(r3)
    9bb0:	10800054 	ori	r2,r2,1
    9bb4:	18800115 	stw	r2,4(r3)
    9bb8:	a009883a 	mov	r4,r20
    9bbc:	000fe880 	call	fe88 <__malloc_unlock>
    9bc0:	9005883a 	mov	r2,r18
    9bc4:	dfc00917 	ldw	ra,36(sp)
    9bc8:	df000817 	ldw	fp,32(sp)
    9bcc:	ddc00717 	ldw	r23,28(sp)
    9bd0:	dd800617 	ldw	r22,24(sp)
    9bd4:	dd400517 	ldw	r21,20(sp)
    9bd8:	dd000417 	ldw	r20,16(sp)
    9bdc:	dcc00317 	ldw	r19,12(sp)
    9be0:	dc800217 	ldw	r18,8(sp)
    9be4:	dc400117 	ldw	r17,4(sp)
    9be8:	dc000017 	ldw	r16,0(sp)
    9bec:	dec00a04 	addi	sp,sp,40
    9bf0:	f800283a 	ret
    9bf4:	017fff04 	movi	r5,-4
    9bf8:	414a703a 	and	r5,r8,r5
    9bfc:	814d883a 	add	r6,r16,r5
    9c00:	30c01f16 	blt	r6,r3,9c80 <_realloc_r+0x22c>
    9c04:	20800317 	ldw	r2,12(r4)
    9c08:	20c00217 	ldw	r3,8(r4)
    9c0c:	a825883a 	mov	r18,r21
    9c10:	3021883a 	mov	r16,r6
    9c14:	18800315 	stw	r2,12(r3)
    9c18:	10c00215 	stw	r3,8(r2)
    9c1c:	003fdb06 	br	9b8c <__alt_exception_stack_pointer+0xf8009b8c>
    9c20:	00800304 	movi	r2,12
    9c24:	a0800015 	stw	r2,0(r20)
    9c28:	0005883a 	mov	r2,zero
    9c2c:	003fe506 	br	9bc4 <__alt_exception_stack_pointer+0xf8009bc4>
    9c30:	98c00117 	ldw	r3,4(r19)
    9c34:	9c4b883a 	add	r5,r19,r17
    9c38:	11000054 	ori	r4,r2,1
    9c3c:	18c0004c 	andi	r3,r3,1
    9c40:	1c62b03a 	or	r17,r3,r17
    9c44:	9c400115 	stw	r17,4(r19)
    9c48:	29000115 	stw	r4,4(r5)
    9c4c:	2885883a 	add	r2,r5,r2
    9c50:	10c00117 	ldw	r3,4(r2)
    9c54:	29400204 	addi	r5,r5,8
    9c58:	a009883a 	mov	r4,r20
    9c5c:	18c00054 	ori	r3,r3,1
    9c60:	10c00115 	stw	r3,4(r2)
    9c64:	00078f40 	call	78f4 <_free_r>
    9c68:	003fd306 	br	9bb8 <__alt_exception_stack_pointer+0xf8009bb8>
    9c6c:	017fff04 	movi	r5,-4
    9c70:	414a703a 	and	r5,r8,r5
    9c74:	89800404 	addi	r6,r17,16
    9c78:	8151883a 	add	r8,r16,r5
    9c7c:	4180590e 	bge	r8,r6,9de4 <_realloc_r+0x390>
    9c80:	1080004c 	andi	r2,r2,1
    9c84:	103f9e1e 	bne	r2,zero,9b00 <__alt_exception_stack_pointer+0xf8009b00>
    9c88:	adbffe17 	ldw	r22,-8(r21)
    9c8c:	00bfff04 	movi	r2,-4
    9c90:	9dadc83a 	sub	r22,r19,r22
    9c94:	b1800117 	ldw	r6,4(r22)
    9c98:	3084703a 	and	r2,r6,r2
    9c9c:	20002026 	beq	r4,zero,9d20 <_realloc_r+0x2cc>
    9ca0:	80af883a 	add	r23,r16,r2
    9ca4:	b96f883a 	add	r23,r23,r5
    9ca8:	21c05f26 	beq	r4,r7,9e28 <_realloc_r+0x3d4>
    9cac:	b8c01c16 	blt	r23,r3,9d20 <_realloc_r+0x2cc>
    9cb0:	20800317 	ldw	r2,12(r4)
    9cb4:	20c00217 	ldw	r3,8(r4)
    9cb8:	81bfff04 	addi	r6,r16,-4
    9cbc:	01000904 	movi	r4,36
    9cc0:	18800315 	stw	r2,12(r3)
    9cc4:	10c00215 	stw	r3,8(r2)
    9cc8:	b0c00217 	ldw	r3,8(r22)
    9ccc:	b0800317 	ldw	r2,12(r22)
    9cd0:	b4800204 	addi	r18,r22,8
    9cd4:	18800315 	stw	r2,12(r3)
    9cd8:	10c00215 	stw	r3,8(r2)
    9cdc:	21801b36 	bltu	r4,r6,9d4c <_realloc_r+0x2f8>
    9ce0:	008004c4 	movi	r2,19
    9ce4:	1180352e 	bgeu	r2,r6,9dbc <_realloc_r+0x368>
    9ce8:	a8800017 	ldw	r2,0(r21)
    9cec:	b0800215 	stw	r2,8(r22)
    9cf0:	a8800117 	ldw	r2,4(r21)
    9cf4:	b0800315 	stw	r2,12(r22)
    9cf8:	008006c4 	movi	r2,27
    9cfc:	11807f36 	bltu	r2,r6,9efc <_realloc_r+0x4a8>
    9d00:	b0800404 	addi	r2,r22,16
    9d04:	ad400204 	addi	r21,r21,8
    9d08:	00002d06 	br	9dc0 <_realloc_r+0x36c>
    9d0c:	adbffe17 	ldw	r22,-8(r21)
    9d10:	00bfff04 	movi	r2,-4
    9d14:	9dadc83a 	sub	r22,r19,r22
    9d18:	b1000117 	ldw	r4,4(r22)
    9d1c:	2084703a 	and	r2,r4,r2
    9d20:	b03f7726 	beq	r22,zero,9b00 <__alt_exception_stack_pointer+0xf8009b00>
    9d24:	80af883a 	add	r23,r16,r2
    9d28:	b8ff7516 	blt	r23,r3,9b00 <__alt_exception_stack_pointer+0xf8009b00>
    9d2c:	b0800317 	ldw	r2,12(r22)
    9d30:	b0c00217 	ldw	r3,8(r22)
    9d34:	81bfff04 	addi	r6,r16,-4
    9d38:	01000904 	movi	r4,36
    9d3c:	18800315 	stw	r2,12(r3)
    9d40:	10c00215 	stw	r3,8(r2)
    9d44:	b4800204 	addi	r18,r22,8
    9d48:	21bfe52e 	bgeu	r4,r6,9ce0 <__alt_exception_stack_pointer+0xf8009ce0>
    9d4c:	a80b883a 	mov	r5,r21
    9d50:	9009883a 	mov	r4,r18
    9d54:	00087180 	call	8718 <memmove>
    9d58:	b821883a 	mov	r16,r23
    9d5c:	b027883a 	mov	r19,r22
    9d60:	003f8a06 	br	9b8c <__alt_exception_stack_pointer+0xf8009b8c>
    9d64:	300b883a 	mov	r5,r6
    9d68:	dfc00917 	ldw	ra,36(sp)
    9d6c:	df000817 	ldw	fp,32(sp)
    9d70:	ddc00717 	ldw	r23,28(sp)
    9d74:	dd800617 	ldw	r22,24(sp)
    9d78:	dd400517 	ldw	r21,20(sp)
    9d7c:	dd000417 	ldw	r20,16(sp)
    9d80:	dcc00317 	ldw	r19,12(sp)
    9d84:	dc800217 	ldw	r18,8(sp)
    9d88:	dc400117 	ldw	r17,4(sp)
    9d8c:	dc000017 	ldw	r16,0(sp)
    9d90:	dec00a04 	addi	sp,sp,40
    9d94:	00029801 	jmpi	2980 <_malloc_r>
    9d98:	a8c00017 	ldw	r3,0(r21)
    9d9c:	90c00015 	stw	r3,0(r18)
    9da0:	a8c00117 	ldw	r3,4(r21)
    9da4:	90c00115 	stw	r3,4(r18)
    9da8:	00c006c4 	movi	r3,27
    9dac:	19804536 	bltu	r3,r6,9ec4 <_realloc_r+0x470>
    9db0:	90800204 	addi	r2,r18,8
    9db4:	a8c00204 	addi	r3,r21,8
    9db8:	003f6306 	br	9b48 <__alt_exception_stack_pointer+0xf8009b48>
    9dbc:	9005883a 	mov	r2,r18
    9dc0:	a8c00017 	ldw	r3,0(r21)
    9dc4:	b821883a 	mov	r16,r23
    9dc8:	b027883a 	mov	r19,r22
    9dcc:	10c00015 	stw	r3,0(r2)
    9dd0:	a8c00117 	ldw	r3,4(r21)
    9dd4:	10c00115 	stw	r3,4(r2)
    9dd8:	a8c00217 	ldw	r3,8(r21)
    9ddc:	10c00215 	stw	r3,8(r2)
    9de0:	003f6a06 	br	9b8c <__alt_exception_stack_pointer+0xf8009b8c>
    9de4:	9c67883a 	add	r19,r19,r17
    9de8:	4445c83a 	sub	r2,r8,r17
    9dec:	e4c00215 	stw	r19,8(fp)
    9df0:	10800054 	ori	r2,r2,1
    9df4:	98800115 	stw	r2,4(r19)
    9df8:	a8bfff17 	ldw	r2,-4(r21)
    9dfc:	a009883a 	mov	r4,r20
    9e00:	1080004c 	andi	r2,r2,1
    9e04:	1462b03a 	or	r17,r2,r17
    9e08:	ac7fff15 	stw	r17,-4(r21)
    9e0c:	000fe880 	call	fe88 <__malloc_unlock>
    9e10:	a805883a 	mov	r2,r21
    9e14:	003f6b06 	br	9bc4 <__alt_exception_stack_pointer+0xf8009bc4>
    9e18:	a80b883a 	mov	r5,r21
    9e1c:	9009883a 	mov	r4,r18
    9e20:	00087180 	call	8718 <memmove>
    9e24:	003f4e06 	br	9b60 <__alt_exception_stack_pointer+0xf8009b60>
    9e28:	89000404 	addi	r4,r17,16
    9e2c:	b93fbc16 	blt	r23,r4,9d20 <__alt_exception_stack_pointer+0xf8009d20>
    9e30:	b0800317 	ldw	r2,12(r22)
    9e34:	b0c00217 	ldw	r3,8(r22)
    9e38:	81bfff04 	addi	r6,r16,-4
    9e3c:	01000904 	movi	r4,36
    9e40:	18800315 	stw	r2,12(r3)
    9e44:	10c00215 	stw	r3,8(r2)
    9e48:	b4800204 	addi	r18,r22,8
    9e4c:	21804336 	bltu	r4,r6,9f5c <_realloc_r+0x508>
    9e50:	008004c4 	movi	r2,19
    9e54:	11803f2e 	bgeu	r2,r6,9f54 <_realloc_r+0x500>
    9e58:	a8800017 	ldw	r2,0(r21)
    9e5c:	b0800215 	stw	r2,8(r22)
    9e60:	a8800117 	ldw	r2,4(r21)
    9e64:	b0800315 	stw	r2,12(r22)
    9e68:	008006c4 	movi	r2,27
    9e6c:	11803f36 	bltu	r2,r6,9f6c <_realloc_r+0x518>
    9e70:	b0800404 	addi	r2,r22,16
    9e74:	ad400204 	addi	r21,r21,8
    9e78:	a8c00017 	ldw	r3,0(r21)
    9e7c:	10c00015 	stw	r3,0(r2)
    9e80:	a8c00117 	ldw	r3,4(r21)
    9e84:	10c00115 	stw	r3,4(r2)
    9e88:	a8c00217 	ldw	r3,8(r21)
    9e8c:	10c00215 	stw	r3,8(r2)
    9e90:	b447883a 	add	r3,r22,r17
    9e94:	bc45c83a 	sub	r2,r23,r17
    9e98:	e0c00215 	stw	r3,8(fp)
    9e9c:	10800054 	ori	r2,r2,1
    9ea0:	18800115 	stw	r2,4(r3)
    9ea4:	b0800117 	ldw	r2,4(r22)
    9ea8:	a009883a 	mov	r4,r20
    9eac:	1080004c 	andi	r2,r2,1
    9eb0:	1462b03a 	or	r17,r2,r17
    9eb4:	b4400115 	stw	r17,4(r22)
    9eb8:	000fe880 	call	fe88 <__malloc_unlock>
    9ebc:	9005883a 	mov	r2,r18
    9ec0:	003f4006 	br	9bc4 <__alt_exception_stack_pointer+0xf8009bc4>
    9ec4:	a8c00217 	ldw	r3,8(r21)
    9ec8:	90c00215 	stw	r3,8(r18)
    9ecc:	a8c00317 	ldw	r3,12(r21)
    9ed0:	90c00315 	stw	r3,12(r18)
    9ed4:	30801126 	beq	r6,r2,9f1c <_realloc_r+0x4c8>
    9ed8:	90800404 	addi	r2,r18,16
    9edc:	a8c00404 	addi	r3,r21,16
    9ee0:	003f1906 	br	9b48 <__alt_exception_stack_pointer+0xf8009b48>
    9ee4:	90ffff17 	ldw	r3,-4(r18)
    9ee8:	00bfff04 	movi	r2,-4
    9eec:	a825883a 	mov	r18,r21
    9ef0:	1884703a 	and	r2,r3,r2
    9ef4:	80a1883a 	add	r16,r16,r2
    9ef8:	003f2406 	br	9b8c <__alt_exception_stack_pointer+0xf8009b8c>
    9efc:	a8800217 	ldw	r2,8(r21)
    9f00:	b0800415 	stw	r2,16(r22)
    9f04:	a8800317 	ldw	r2,12(r21)
    9f08:	b0800515 	stw	r2,20(r22)
    9f0c:	31000a26 	beq	r6,r4,9f38 <_realloc_r+0x4e4>
    9f10:	b0800604 	addi	r2,r22,24
    9f14:	ad400404 	addi	r21,r21,16
    9f18:	003fa906 	br	9dc0 <__alt_exception_stack_pointer+0xf8009dc0>
    9f1c:	a9000417 	ldw	r4,16(r21)
    9f20:	90800604 	addi	r2,r18,24
    9f24:	a8c00604 	addi	r3,r21,24
    9f28:	91000415 	stw	r4,16(r18)
    9f2c:	a9000517 	ldw	r4,20(r21)
    9f30:	91000515 	stw	r4,20(r18)
    9f34:	003f0406 	br	9b48 <__alt_exception_stack_pointer+0xf8009b48>
    9f38:	a8c00417 	ldw	r3,16(r21)
    9f3c:	ad400604 	addi	r21,r21,24
    9f40:	b0800804 	addi	r2,r22,32
    9f44:	b0c00615 	stw	r3,24(r22)
    9f48:	a8ffff17 	ldw	r3,-4(r21)
    9f4c:	b0c00715 	stw	r3,28(r22)
    9f50:	003f9b06 	br	9dc0 <__alt_exception_stack_pointer+0xf8009dc0>
    9f54:	9005883a 	mov	r2,r18
    9f58:	003fc706 	br	9e78 <__alt_exception_stack_pointer+0xf8009e78>
    9f5c:	a80b883a 	mov	r5,r21
    9f60:	9009883a 	mov	r4,r18
    9f64:	00087180 	call	8718 <memmove>
    9f68:	003fc906 	br	9e90 <__alt_exception_stack_pointer+0xf8009e90>
    9f6c:	a8800217 	ldw	r2,8(r21)
    9f70:	b0800415 	stw	r2,16(r22)
    9f74:	a8800317 	ldw	r2,12(r21)
    9f78:	b0800515 	stw	r2,20(r22)
    9f7c:	31000726 	beq	r6,r4,9f9c <_realloc_r+0x548>
    9f80:	b0800604 	addi	r2,r22,24
    9f84:	ad400404 	addi	r21,r21,16
    9f88:	003fbb06 	br	9e78 <__alt_exception_stack_pointer+0xf8009e78>
    9f8c:	a009883a 	mov	r4,r20
    9f90:	000fe880 	call	fe88 <__malloc_unlock>
    9f94:	0005883a 	mov	r2,zero
    9f98:	003f0a06 	br	9bc4 <__alt_exception_stack_pointer+0xf8009bc4>
    9f9c:	a8c00417 	ldw	r3,16(r21)
    9fa0:	ad400604 	addi	r21,r21,24
    9fa4:	b0800804 	addi	r2,r22,32
    9fa8:	b0c00615 	stw	r3,24(r22)
    9fac:	a8ffff17 	ldw	r3,-4(r21)
    9fb0:	b0c00715 	stw	r3,28(r22)
    9fb4:	003fb006 	br	9e78 <__alt_exception_stack_pointer+0xf8009e78>

00009fb8 <__fpclassifyd>:
    9fb8:	00a00034 	movhi	r2,32768
    9fbc:	10bfffc4 	addi	r2,r2,-1
    9fc0:	2884703a 	and	r2,r5,r2
    9fc4:	10000726 	beq	r2,zero,9fe4 <__fpclassifyd+0x2c>
    9fc8:	00fffc34 	movhi	r3,65520
    9fcc:	019ff834 	movhi	r6,32736
    9fd0:	28c7883a 	add	r3,r5,r3
    9fd4:	31bfffc4 	addi	r6,r6,-1
    9fd8:	30c00536 	bltu	r6,r3,9ff0 <__fpclassifyd+0x38>
    9fdc:	00800104 	movi	r2,4
    9fe0:	f800283a 	ret
    9fe4:	2000021e 	bne	r4,zero,9ff0 <__fpclassifyd+0x38>
    9fe8:	00800084 	movi	r2,2
    9fec:	f800283a 	ret
    9ff0:	00dffc34 	movhi	r3,32752
    9ff4:	019ff834 	movhi	r6,32736
    9ff8:	28cb883a 	add	r5,r5,r3
    9ffc:	31bfffc4 	addi	r6,r6,-1
    a000:	317ff62e 	bgeu	r6,r5,9fdc <__alt_exception_stack_pointer+0xf8009fdc>
    a004:	01400434 	movhi	r5,16
    a008:	297fffc4 	addi	r5,r5,-1
    a00c:	28800236 	bltu	r5,r2,a018 <__fpclassifyd+0x60>
    a010:	008000c4 	movi	r2,3
    a014:	f800283a 	ret
    a018:	10c00226 	beq	r2,r3,a024 <__fpclassifyd+0x6c>
    a01c:	0005883a 	mov	r2,zero
    a020:	f800283a 	ret
    a024:	2005003a 	cmpeq	r2,r4,zero
    a028:	f800283a 	ret

0000a02c <__sread>:
    a02c:	defffe04 	addi	sp,sp,-8
    a030:	dc000015 	stw	r16,0(sp)
    a034:	2821883a 	mov	r16,r5
    a038:	2940038f 	ldh	r5,14(r5)
    a03c:	dfc00115 	stw	ra,4(sp)
    a040:	000bee80 	call	bee8 <_read_r>
    a044:	10000716 	blt	r2,zero,a064 <__sread+0x38>
    a048:	80c01417 	ldw	r3,80(r16)
    a04c:	1887883a 	add	r3,r3,r2
    a050:	80c01415 	stw	r3,80(r16)
    a054:	dfc00117 	ldw	ra,4(sp)
    a058:	dc000017 	ldw	r16,0(sp)
    a05c:	dec00204 	addi	sp,sp,8
    a060:	f800283a 	ret
    a064:	80c0030b 	ldhu	r3,12(r16)
    a068:	18fbffcc 	andi	r3,r3,61439
    a06c:	80c0030d 	sth	r3,12(r16)
    a070:	dfc00117 	ldw	ra,4(sp)
    a074:	dc000017 	ldw	r16,0(sp)
    a078:	dec00204 	addi	sp,sp,8
    a07c:	f800283a 	ret

0000a080 <__seofread>:
    a080:	0005883a 	mov	r2,zero
    a084:	f800283a 	ret

0000a088 <__swrite>:
    a088:	2880030b 	ldhu	r2,12(r5)
    a08c:	defffb04 	addi	sp,sp,-20
    a090:	dcc00315 	stw	r19,12(sp)
    a094:	dc800215 	stw	r18,8(sp)
    a098:	dc400115 	stw	r17,4(sp)
    a09c:	dc000015 	stw	r16,0(sp)
    a0a0:	dfc00415 	stw	ra,16(sp)
    a0a4:	10c0400c 	andi	r3,r2,256
    a0a8:	2821883a 	mov	r16,r5
    a0ac:	2023883a 	mov	r17,r4
    a0b0:	3025883a 	mov	r18,r6
    a0b4:	3827883a 	mov	r19,r7
    a0b8:	18000526 	beq	r3,zero,a0d0 <__swrite+0x48>
    a0bc:	2940038f 	ldh	r5,14(r5)
    a0c0:	01c00084 	movi	r7,2
    a0c4:	000d883a 	mov	r6,zero
    a0c8:	000be880 	call	be88 <_lseek_r>
    a0cc:	8080030b 	ldhu	r2,12(r16)
    a0d0:	8140038f 	ldh	r5,14(r16)
    a0d4:	10bbffcc 	andi	r2,r2,61439
    a0d8:	980f883a 	mov	r7,r19
    a0dc:	900d883a 	mov	r6,r18
    a0e0:	8809883a 	mov	r4,r17
    a0e4:	8080030d 	sth	r2,12(r16)
    a0e8:	dfc00417 	ldw	ra,16(sp)
    a0ec:	dcc00317 	ldw	r19,12(sp)
    a0f0:	dc800217 	ldw	r18,8(sp)
    a0f4:	dc400117 	ldw	r17,4(sp)
    a0f8:	dc000017 	ldw	r16,0(sp)
    a0fc:	dec00504 	addi	sp,sp,20
    a100:	000b93c1 	jmpi	b93c <_write_r>

0000a104 <__sseek>:
    a104:	defffe04 	addi	sp,sp,-8
    a108:	dc000015 	stw	r16,0(sp)
    a10c:	2821883a 	mov	r16,r5
    a110:	2940038f 	ldh	r5,14(r5)
    a114:	dfc00115 	stw	ra,4(sp)
    a118:	000be880 	call	be88 <_lseek_r>
    a11c:	00ffffc4 	movi	r3,-1
    a120:	10c00826 	beq	r2,r3,a144 <__sseek+0x40>
    a124:	80c0030b 	ldhu	r3,12(r16)
    a128:	80801415 	stw	r2,80(r16)
    a12c:	18c40014 	ori	r3,r3,4096
    a130:	80c0030d 	sth	r3,12(r16)
    a134:	dfc00117 	ldw	ra,4(sp)
    a138:	dc000017 	ldw	r16,0(sp)
    a13c:	dec00204 	addi	sp,sp,8
    a140:	f800283a 	ret
    a144:	80c0030b 	ldhu	r3,12(r16)
    a148:	18fbffcc 	andi	r3,r3,61439
    a14c:	80c0030d 	sth	r3,12(r16)
    a150:	dfc00117 	ldw	ra,4(sp)
    a154:	dc000017 	ldw	r16,0(sp)
    a158:	dec00204 	addi	sp,sp,8
    a15c:	f800283a 	ret

0000a160 <__sclose>:
    a160:	2940038f 	ldh	r5,14(r5)
    a164:	000b99c1 	jmpi	b99c <_close_r>

0000a168 <strcmp>:
    a168:	2144b03a 	or	r2,r4,r5
    a16c:	108000cc 	andi	r2,r2,3
    a170:	1000171e 	bne	r2,zero,a1d0 <strcmp+0x68>
    a174:	20800017 	ldw	r2,0(r4)
    a178:	28c00017 	ldw	r3,0(r5)
    a17c:	10c0141e 	bne	r2,r3,a1d0 <strcmp+0x68>
    a180:	027fbff4 	movhi	r9,65279
    a184:	4a7fbfc4 	addi	r9,r9,-257
    a188:	0086303a 	nor	r3,zero,r2
    a18c:	02202074 	movhi	r8,32897
    a190:	1245883a 	add	r2,r2,r9
    a194:	42202004 	addi	r8,r8,-32640
    a198:	10c4703a 	and	r2,r2,r3
    a19c:	1204703a 	and	r2,r2,r8
    a1a0:	10000226 	beq	r2,zero,a1ac <strcmp+0x44>
    a1a4:	00002306 	br	a234 <strcmp+0xcc>
    a1a8:	1000221e 	bne	r2,zero,a234 <strcmp+0xcc>
    a1ac:	21000104 	addi	r4,r4,4
    a1b0:	20c00017 	ldw	r3,0(r4)
    a1b4:	29400104 	addi	r5,r5,4
    a1b8:	29800017 	ldw	r6,0(r5)
    a1bc:	1a4f883a 	add	r7,r3,r9
    a1c0:	00c4303a 	nor	r2,zero,r3
    a1c4:	3884703a 	and	r2,r7,r2
    a1c8:	1204703a 	and	r2,r2,r8
    a1cc:	19bff626 	beq	r3,r6,a1a8 <__alt_exception_stack_pointer+0xf800a1a8>
    a1d0:	20800003 	ldbu	r2,0(r4)
    a1d4:	10c03fcc 	andi	r3,r2,255
    a1d8:	18c0201c 	xori	r3,r3,128
    a1dc:	18ffe004 	addi	r3,r3,-128
    a1e0:	18000c26 	beq	r3,zero,a214 <strcmp+0xac>
    a1e4:	29800007 	ldb	r6,0(r5)
    a1e8:	19800326 	beq	r3,r6,a1f8 <strcmp+0x90>
    a1ec:	00001306 	br	a23c <strcmp+0xd4>
    a1f0:	29800007 	ldb	r6,0(r5)
    a1f4:	11800b1e 	bne	r2,r6,a224 <strcmp+0xbc>
    a1f8:	21000044 	addi	r4,r4,1
    a1fc:	20c00003 	ldbu	r3,0(r4)
    a200:	29400044 	addi	r5,r5,1
    a204:	18803fcc 	andi	r2,r3,255
    a208:	1080201c 	xori	r2,r2,128
    a20c:	10bfe004 	addi	r2,r2,-128
    a210:	103ff71e 	bne	r2,zero,a1f0 <__alt_exception_stack_pointer+0xf800a1f0>
    a214:	0007883a 	mov	r3,zero
    a218:	28800003 	ldbu	r2,0(r5)
    a21c:	1885c83a 	sub	r2,r3,r2
    a220:	f800283a 	ret
    a224:	28800003 	ldbu	r2,0(r5)
    a228:	18c03fcc 	andi	r3,r3,255
    a22c:	1885c83a 	sub	r2,r3,r2
    a230:	f800283a 	ret
    a234:	0005883a 	mov	r2,zero
    a238:	f800283a 	ret
    a23c:	10c03fcc 	andi	r3,r2,255
    a240:	003ff506 	br	a218 <__alt_exception_stack_pointer+0xf800a218>

0000a244 <__sprint_r.part.0>:
    a244:	28801917 	ldw	r2,100(r5)
    a248:	defff604 	addi	sp,sp,-40
    a24c:	dd400515 	stw	r21,20(sp)
    a250:	dfc00915 	stw	ra,36(sp)
    a254:	df000815 	stw	fp,32(sp)
    a258:	ddc00715 	stw	r23,28(sp)
    a25c:	dd800615 	stw	r22,24(sp)
    a260:	dd000415 	stw	r20,16(sp)
    a264:	dcc00315 	stw	r19,12(sp)
    a268:	dc800215 	stw	r18,8(sp)
    a26c:	dc400115 	stw	r17,4(sp)
    a270:	dc000015 	stw	r16,0(sp)
    a274:	1088000c 	andi	r2,r2,8192
    a278:	302b883a 	mov	r21,r6
    a27c:	10002e26 	beq	r2,zero,a338 <__sprint_r.part.0+0xf4>
    a280:	30800217 	ldw	r2,8(r6)
    a284:	35800017 	ldw	r22,0(r6)
    a288:	10002926 	beq	r2,zero,a330 <__sprint_r.part.0+0xec>
    a28c:	2827883a 	mov	r19,r5
    a290:	2029883a 	mov	r20,r4
    a294:	b5c00104 	addi	r23,r22,4
    a298:	04bfffc4 	movi	r18,-1
    a29c:	bc400017 	ldw	r17,0(r23)
    a2a0:	b4000017 	ldw	r16,0(r22)
    a2a4:	0039883a 	mov	fp,zero
    a2a8:	8822d0ba 	srli	r17,r17,2
    a2ac:	8800031e 	bne	r17,zero,a2bc <__sprint_r.part.0+0x78>
    a2b0:	00001806 	br	a314 <__sprint_r.part.0+0xd0>
    a2b4:	84000104 	addi	r16,r16,4
    a2b8:	8f001526 	beq	r17,fp,a310 <__sprint_r.part.0+0xcc>
    a2bc:	81400017 	ldw	r5,0(r16)
    a2c0:	980d883a 	mov	r6,r19
    a2c4:	a009883a 	mov	r4,r20
    a2c8:	000bd340 	call	bd34 <_fputwc_r>
    a2cc:	e7000044 	addi	fp,fp,1
    a2d0:	14bff81e 	bne	r2,r18,a2b4 <__alt_exception_stack_pointer+0xf800a2b4>
    a2d4:	9005883a 	mov	r2,r18
    a2d8:	a8000215 	stw	zero,8(r21)
    a2dc:	a8000115 	stw	zero,4(r21)
    a2e0:	dfc00917 	ldw	ra,36(sp)
    a2e4:	df000817 	ldw	fp,32(sp)
    a2e8:	ddc00717 	ldw	r23,28(sp)
    a2ec:	dd800617 	ldw	r22,24(sp)
    a2f0:	dd400517 	ldw	r21,20(sp)
    a2f4:	dd000417 	ldw	r20,16(sp)
    a2f8:	dcc00317 	ldw	r19,12(sp)
    a2fc:	dc800217 	ldw	r18,8(sp)
    a300:	dc400117 	ldw	r17,4(sp)
    a304:	dc000017 	ldw	r16,0(sp)
    a308:	dec00a04 	addi	sp,sp,40
    a30c:	f800283a 	ret
    a310:	a8800217 	ldw	r2,8(r21)
    a314:	8c63883a 	add	r17,r17,r17
    a318:	8c63883a 	add	r17,r17,r17
    a31c:	1445c83a 	sub	r2,r2,r17
    a320:	a8800215 	stw	r2,8(r21)
    a324:	b5800204 	addi	r22,r22,8
    a328:	bdc00204 	addi	r23,r23,8
    a32c:	103fdb1e 	bne	r2,zero,a29c <__alt_exception_stack_pointer+0xf800a29c>
    a330:	0005883a 	mov	r2,zero
    a334:	003fe806 	br	a2d8 <__alt_exception_stack_pointer+0xf800a2d8>
    a338:	0007c040 	call	7c04 <__sfvwrite_r>
    a33c:	003fe606 	br	a2d8 <__alt_exception_stack_pointer+0xf800a2d8>

0000a340 <__sprint_r>:
    a340:	30c00217 	ldw	r3,8(r6)
    a344:	18000126 	beq	r3,zero,a34c <__sprint_r+0xc>
    a348:	000a2441 	jmpi	a244 <__sprint_r.part.0>
    a34c:	30000115 	stw	zero,4(r6)
    a350:	0005883a 	mov	r2,zero
    a354:	f800283a 	ret

0000a358 <___vfiprintf_internal_r>:
    a358:	deffca04 	addi	sp,sp,-216
    a35c:	dd403115 	stw	r21,196(sp)
    a360:	dfc03515 	stw	ra,212(sp)
    a364:	df003415 	stw	fp,208(sp)
    a368:	ddc03315 	stw	r23,204(sp)
    a36c:	dd803215 	stw	r22,200(sp)
    a370:	dd003015 	stw	r20,192(sp)
    a374:	dcc02f15 	stw	r19,188(sp)
    a378:	dc802e15 	stw	r18,184(sp)
    a37c:	dc402d15 	stw	r17,180(sp)
    a380:	dc002c15 	stw	r16,176(sp)
    a384:	d9002115 	stw	r4,132(sp)
    a388:	d9402015 	stw	r5,128(sp)
    a38c:	d9c02215 	stw	r7,136(sp)
    a390:	302b883a 	mov	r21,r6
    a394:	20000226 	beq	r4,zero,a3a0 <___vfiprintf_internal_r+0x48>
    a398:	20800e17 	ldw	r2,56(r4)
    a39c:	1000cf26 	beq	r2,zero,a6dc <___vfiprintf_internal_r+0x384>
    a3a0:	d8c02017 	ldw	r3,128(sp)
    a3a4:	1880030b 	ldhu	r2,12(r3)
    a3a8:	10c8000c 	andi	r3,r2,8192
    a3ac:	1800071e 	bne	r3,zero,a3cc <___vfiprintf_internal_r+0x74>
    a3b0:	d9402017 	ldw	r5,128(sp)
    a3b4:	00f7ffc4 	movi	r3,-8193
    a3b8:	10880014 	ori	r2,r2,8192
    a3bc:	29001917 	ldw	r4,100(r5)
    a3c0:	2880030d 	sth	r2,12(r5)
    a3c4:	20c6703a 	and	r3,r4,r3
    a3c8:	28c01915 	stw	r3,100(r5)
    a3cc:	10c0020c 	andi	r3,r2,8
    a3d0:	1800a526 	beq	r3,zero,a668 <___vfiprintf_internal_r+0x310>
    a3d4:	d9002017 	ldw	r4,128(sp)
    a3d8:	20c00417 	ldw	r3,16(r4)
    a3dc:	1800a226 	beq	r3,zero,a668 <___vfiprintf_internal_r+0x310>
    a3e0:	1080068c 	andi	r2,r2,26
    a3e4:	00c00284 	movi	r3,10
    a3e8:	10c0a826 	beq	r2,r3,a68c <___vfiprintf_internal_r+0x334>
    a3ec:	d9001a04 	addi	r4,sp,104
    a3f0:	d94019c4 	addi	r5,sp,103
    a3f4:	04800074 	movhi	r18,1
    a3f8:	2145c83a 	sub	r2,r4,r5
    a3fc:	948bce04 	addi	r18,r18,12088
    a400:	d9001e15 	stw	r4,120(sp)
    a404:	d9401f15 	stw	r5,124(sp)
    a408:	dec01a15 	stw	sp,104(sp)
    a40c:	d8001c15 	stw	zero,112(sp)
    a410:	d8001b15 	stw	zero,108(sp)
    a414:	d811883a 	mov	r8,sp
    a418:	d8002615 	stw	zero,152(sp)
    a41c:	d8002415 	stw	zero,144(sp)
    a420:	d8802815 	stw	r2,160(sp)
    a424:	a82d883a 	mov	r22,r21
    a428:	b0800007 	ldb	r2,0(r22)
    a42c:	10040d26 	beq	r2,zero,b464 <___vfiprintf_internal_r+0x110c>
    a430:	00c00944 	movi	r3,37
    a434:	b029883a 	mov	r20,r22
    a438:	10c0021e 	bne	r2,r3,a444 <___vfiprintf_internal_r+0xec>
    a43c:	00001606 	br	a498 <___vfiprintf_internal_r+0x140>
    a440:	10c00326 	beq	r2,r3,a450 <___vfiprintf_internal_r+0xf8>
    a444:	a5000044 	addi	r20,r20,1
    a448:	a0800007 	ldb	r2,0(r20)
    a44c:	103ffc1e 	bne	r2,zero,a440 <__alt_exception_stack_pointer+0xf800a440>
    a450:	a5a1c83a 	sub	r16,r20,r22
    a454:	80001026 	beq	r16,zero,a498 <___vfiprintf_internal_r+0x140>
    a458:	d8c01c17 	ldw	r3,112(sp)
    a45c:	d8801b17 	ldw	r2,108(sp)
    a460:	45800015 	stw	r22,0(r8)
    a464:	80c7883a 	add	r3,r16,r3
    a468:	10800044 	addi	r2,r2,1
    a46c:	44000115 	stw	r16,4(r8)
    a470:	d8c01c15 	stw	r3,112(sp)
    a474:	d8801b15 	stw	r2,108(sp)
    a478:	010001c4 	movi	r4,7
    a47c:	2080750e 	bge	r4,r2,a654 <___vfiprintf_internal_r+0x2fc>
    a480:	1803951e 	bne	r3,zero,b2d8 <___vfiprintf_internal_r+0xf80>
    a484:	d8c02417 	ldw	r3,144(sp)
    a488:	d8001b15 	stw	zero,108(sp)
    a48c:	d811883a 	mov	r8,sp
    a490:	1c07883a 	add	r3,r3,r16
    a494:	d8c02415 	stw	r3,144(sp)
    a498:	a0800007 	ldb	r2,0(r20)
    a49c:	1002e026 	beq	r2,zero,b020 <___vfiprintf_internal_r+0xcc8>
    a4a0:	a5800044 	addi	r22,r20,1
    a4a4:	a0c00047 	ldb	r3,1(r20)
    a4a8:	d8001d85 	stb	zero,118(sp)
    a4ac:	0027883a 	mov	r19,zero
    a4b0:	d8002305 	stb	zero,140(sp)
    a4b4:	043fffc4 	movi	r16,-1
    a4b8:	d8002515 	stw	zero,148(sp)
    a4bc:	0023883a 	mov	r17,zero
    a4c0:	05001604 	movi	r20,88
    a4c4:	05400244 	movi	r21,9
    a4c8:	402f883a 	mov	r23,r8
    a4cc:	b5800044 	addi	r22,r22,1
    a4d0:	18bff804 	addi	r2,r3,-32
    a4d4:	a0827736 	bltu	r20,r2,aeb4 <___vfiprintf_internal_r+0xb5c>
    a4d8:	100490ba 	slli	r2,r2,2
    a4dc:	01000074 	movhi	r4,1
    a4e0:	21293c04 	addi	r4,r4,-23312
    a4e4:	1105883a 	add	r2,r2,r4
    a4e8:	10800017 	ldw	r2,0(r2)
    a4ec:	1000683a 	jmp	r2
    a4f0:	0000abb4 	movhi	zero,686
    a4f4:	0000aeb4 	movhi	zero,698
    a4f8:	0000aeb4 	movhi	zero,698
    a4fc:	0000abd0 	cmplti	zero,zero,687
    a500:	0000aeb4 	movhi	zero,698
    a504:	0000aeb4 	movhi	zero,698
    a508:	0000aeb4 	movhi	zero,698
    a50c:	0000aeb4 	movhi	zero,698
    a510:	0000aeb4 	movhi	zero,698
    a514:	0000aeb4 	movhi	zero,698
    a518:	0000add8 	cmpnei	zero,zero,695
    a51c:	0000adfc 	xorhi	zero,zero,695
    a520:	0000aeb4 	movhi	zero,698
    a524:	0000a6f4 	movhi	zero,667
    a528:	0000ae10 	cmplti	zero,zero,696
    a52c:	0000aeb4 	movhi	zero,698
    a530:	0000abdc 	xori	zero,zero,687
    a534:	0000abe8 	cmpgeui	zero,zero,687
    a538:	0000abe8 	cmpgeui	zero,zero,687
    a53c:	0000abe8 	cmpgeui	zero,zero,687
    a540:	0000abe8 	cmpgeui	zero,zero,687
    a544:	0000abe8 	cmpgeui	zero,zero,687
    a548:	0000abe8 	cmpgeui	zero,zero,687
    a54c:	0000abe8 	cmpgeui	zero,zero,687
    a550:	0000abe8 	cmpgeui	zero,zero,687
    a554:	0000abe8 	cmpgeui	zero,zero,687
    a558:	0000aeb4 	movhi	zero,698
    a55c:	0000aeb4 	movhi	zero,698
    a560:	0000aeb4 	movhi	zero,698
    a564:	0000aeb4 	movhi	zero,698
    a568:	0000aeb4 	movhi	zero,698
    a56c:	0000aeb4 	movhi	zero,698
    a570:	0000aeb4 	movhi	zero,698
    a574:	0000aeb4 	movhi	zero,698
    a578:	0000aeb4 	movhi	zero,698
    a57c:	0000aeb4 	movhi	zero,698
    a580:	0000ac28 	cmpgeui	zero,zero,688
    a584:	0000aeb4 	movhi	zero,698
    a588:	0000aeb4 	movhi	zero,698
    a58c:	0000aeb4 	movhi	zero,698
    a590:	0000aeb4 	movhi	zero,698
    a594:	0000aeb4 	movhi	zero,698
    a598:	0000aeb4 	movhi	zero,698
    a59c:	0000aeb4 	movhi	zero,698
    a5a0:	0000aeb4 	movhi	zero,698
    a5a4:	0000aeb4 	movhi	zero,698
    a5a8:	0000aeb4 	movhi	zero,698
    a5ac:	0000ac64 	muli	zero,zero,689
    a5b0:	0000aeb4 	movhi	zero,698
    a5b4:	0000aeb4 	movhi	zero,698
    a5b8:	0000aeb4 	movhi	zero,698
    a5bc:	0000aeb4 	movhi	zero,698
    a5c0:	0000aeb4 	movhi	zero,698
    a5c4:	0000acc0 	call	acc <init_keyboard+0x39c>
    a5c8:	0000aeb4 	movhi	zero,698
    a5cc:	0000aeb4 	movhi	zero,698
    a5d0:	0000ad34 	movhi	zero,692
    a5d4:	0000aeb4 	movhi	zero,698
    a5d8:	0000aeb4 	movhi	zero,698
    a5dc:	0000aeb4 	movhi	zero,698
    a5e0:	0000aeb4 	movhi	zero,698
    a5e4:	0000aeb4 	movhi	zero,698
    a5e8:	0000aeb4 	movhi	zero,698
    a5ec:	0000aeb4 	movhi	zero,698
    a5f0:	0000aeb4 	movhi	zero,698
    a5f4:	0000aeb4 	movhi	zero,698
    a5f8:	0000aeb4 	movhi	zero,698
    a5fc:	0000aadc 	xori	zero,zero,683
    a600:	0000ab0c 	andi	zero,zero,684
    a604:	0000aeb4 	movhi	zero,698
    a608:	0000aeb4 	movhi	zero,698
    a60c:	0000aeb4 	movhi	zero,698
    a610:	0000ae5c 	xori	zero,zero,697
    a614:	0000ab0c 	andi	zero,zero,684
    a618:	0000aeb4 	movhi	zero,698
    a61c:	0000aeb4 	movhi	zero,698
    a620:	0000a9b4 	movhi	zero,678
    a624:	0000aeb4 	movhi	zero,698
    a628:	0000a9c8 	cmpgei	zero,zero,679
    a62c:	0000aa00 	call	aa0 <init_keyboard+0x370>
    a630:	0000a700 	call	a70 <init_keyboard+0x340>
    a634:	0000a9a8 	cmpgeui	zero,zero,678
    a638:	0000aeb4 	movhi	zero,698
    a63c:	0000ad74 	movhi	zero,693
    a640:	0000aeb4 	movhi	zero,698
    a644:	0000adc0 	call	adc <init_keyboard+0x3ac>
    a648:	0000aeb4 	movhi	zero,698
    a64c:	0000aeb4 	movhi	zero,698
    a650:	0000aa84 	movi	zero,682
    a654:	42000204 	addi	r8,r8,8
    a658:	d8c02417 	ldw	r3,144(sp)
    a65c:	1c07883a 	add	r3,r3,r16
    a660:	d8c02415 	stw	r3,144(sp)
    a664:	003f8c06 	br	a498 <__alt_exception_stack_pointer+0xf800a498>
    a668:	d9402017 	ldw	r5,128(sp)
    a66c:	d9002117 	ldw	r4,132(sp)
    a670:	00057740 	call	5774 <__swsetup_r>
    a674:	1003c11e 	bne	r2,zero,b57c <___vfiprintf_internal_r+0x1224>
    a678:	d9402017 	ldw	r5,128(sp)
    a67c:	00c00284 	movi	r3,10
    a680:	2880030b 	ldhu	r2,12(r5)
    a684:	1080068c 	andi	r2,r2,26
    a688:	10ff581e 	bne	r2,r3,a3ec <__alt_exception_stack_pointer+0xf800a3ec>
    a68c:	d8c02017 	ldw	r3,128(sp)
    a690:	1880038f 	ldh	r2,14(r3)
    a694:	103f5516 	blt	r2,zero,a3ec <__alt_exception_stack_pointer+0xf800a3ec>
    a698:	d9c02217 	ldw	r7,136(sp)
    a69c:	d9002117 	ldw	r4,132(sp)
    a6a0:	a80d883a 	mov	r6,r21
    a6a4:	180b883a 	mov	r5,r3
    a6a8:	000b8800 	call	b880 <__sbprintf>
    a6ac:	dfc03517 	ldw	ra,212(sp)
    a6b0:	df003417 	ldw	fp,208(sp)
    a6b4:	ddc03317 	ldw	r23,204(sp)
    a6b8:	dd803217 	ldw	r22,200(sp)
    a6bc:	dd403117 	ldw	r21,196(sp)
    a6c0:	dd003017 	ldw	r20,192(sp)
    a6c4:	dcc02f17 	ldw	r19,188(sp)
    a6c8:	dc802e17 	ldw	r18,184(sp)
    a6cc:	dc402d17 	ldw	r17,180(sp)
    a6d0:	dc002c17 	ldw	r16,176(sp)
    a6d4:	dec03604 	addi	sp,sp,216
    a6d8:	f800283a 	ret
    a6dc:	00077800 	call	7780 <__sinit>
    a6e0:	003f2f06 	br	a3a0 <__alt_exception_stack_pointer+0xf800a3a0>
    a6e4:	d8c02517 	ldw	r3,148(sp)
    a6e8:	d8802215 	stw	r2,136(sp)
    a6ec:	00c7c83a 	sub	r3,zero,r3
    a6f0:	d8c02515 	stw	r3,148(sp)
    a6f4:	8c400114 	ori	r17,r17,4
    a6f8:	b0c00007 	ldb	r3,0(r22)
    a6fc:	003f7306 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    a700:	00800c04 	movi	r2,48
    a704:	d9402217 	ldw	r5,136(sp)
    a708:	d8801d05 	stb	r2,116(sp)
    a70c:	00801e04 	movi	r2,120
    a710:	d8801d45 	stb	r2,117(sp)
    a714:	d8001d85 	stb	zero,118(sp)
    a718:	b811883a 	mov	r8,r23
    a71c:	28c00104 	addi	r3,r5,4
    a720:	2cc00017 	ldw	r19,0(r5)
    a724:	0029883a 	mov	r20,zero
    a728:	88800094 	ori	r2,r17,2
    a72c:	80032516 	blt	r16,zero,b3c4 <___vfiprintf_internal_r+0x106c>
    a730:	00bfdfc4 	movi	r2,-129
    a734:	88a2703a 	and	r17,r17,r2
    a738:	d8c02215 	stw	r3,136(sp)
    a73c:	8c400094 	ori	r17,r17,2
    a740:	98032a1e 	bne	r19,zero,b3ec <___vfiprintf_internal_r+0x1094>
    a744:	00800074 	movhi	r2,1
    a748:	108b6e04 	addi	r2,r2,11704
    a74c:	d8802615 	stw	r2,152(sp)
    a750:	002b883a 	mov	r21,zero
    a754:	8001741e 	bne	r16,zero,ad28 <___vfiprintf_internal_r+0x9d0>
    a758:	0021883a 	mov	r16,zero
    a75c:	0029883a 	mov	r20,zero
    a760:	ddc01a04 	addi	r23,sp,104
    a764:	8027883a 	mov	r19,r16
    a768:	8500010e 	bge	r16,r20,a770 <___vfiprintf_internal_r+0x418>
    a76c:	a027883a 	mov	r19,r20
    a770:	ad403fcc 	andi	r21,r21,255
    a774:	ad40201c 	xori	r21,r21,128
    a778:	ad7fe004 	addi	r21,r21,-128
    a77c:	a8000126 	beq	r21,zero,a784 <___vfiprintf_internal_r+0x42c>
    a780:	9cc00044 	addi	r19,r19,1
    a784:	89c0008c 	andi	r7,r17,2
    a788:	38000126 	beq	r7,zero,a790 <___vfiprintf_internal_r+0x438>
    a78c:	9cc00084 	addi	r19,r19,2
    a790:	88c0210c 	andi	r3,r17,132
    a794:	1801dd1e 	bne	r3,zero,af0c <___vfiprintf_internal_r+0xbb4>
    a798:	d9402517 	ldw	r5,148(sp)
    a79c:	2cebc83a 	sub	r21,r5,r19
    a7a0:	0541da0e 	bge	zero,r21,af0c <___vfiprintf_internal_r+0xbb4>
    a7a4:	07000404 	movi	fp,16
    a7a8:	d8801c17 	ldw	r2,112(sp)
    a7ac:	e543be0e 	bge	fp,r21,b6a8 <___vfiprintf_internal_r+0x1350>
    a7b0:	01400074 	movhi	r5,1
    a7b4:	294bd204 	addi	r5,r5,12104
    a7b8:	dc002715 	stw	r16,156(sp)
    a7bc:	d9801b17 	ldw	r6,108(sp)
    a7c0:	a821883a 	mov	r16,r21
    a7c4:	d9402315 	stw	r5,140(sp)
    a7c8:	028001c4 	movi	r10,7
    a7cc:	d9c02915 	stw	r7,164(sp)
    a7d0:	182b883a 	mov	r21,r3
    a7d4:	00000506 	br	a7ec <___vfiprintf_internal_r+0x494>
    a7d8:	31000084 	addi	r4,r6,2
    a7dc:	42000204 	addi	r8,r8,8
    a7e0:	180d883a 	mov	r6,r3
    a7e4:	843ffc04 	addi	r16,r16,-16
    a7e8:	e4000f0e 	bge	fp,r16,a828 <___vfiprintf_internal_r+0x4d0>
    a7ec:	01000074 	movhi	r4,1
    a7f0:	10800404 	addi	r2,r2,16
    a7f4:	30c00044 	addi	r3,r6,1
    a7f8:	210bd204 	addi	r4,r4,12104
    a7fc:	41000015 	stw	r4,0(r8)
    a800:	47000115 	stw	fp,4(r8)
    a804:	d8801c15 	stw	r2,112(sp)
    a808:	d8c01b15 	stw	r3,108(sp)
    a80c:	50fff20e 	bge	r10,r3,a7d8 <__alt_exception_stack_pointer+0xf800a7d8>
    a810:	1001b21e 	bne	r2,zero,aedc <___vfiprintf_internal_r+0xb84>
    a814:	843ffc04 	addi	r16,r16,-16
    a818:	000d883a 	mov	r6,zero
    a81c:	01000044 	movi	r4,1
    a820:	d811883a 	mov	r8,sp
    a824:	e43ff116 	blt	fp,r16,a7ec <__alt_exception_stack_pointer+0xf800a7ec>
    a828:	a807883a 	mov	r3,r21
    a82c:	d9c02917 	ldw	r7,164(sp)
    a830:	802b883a 	mov	r21,r16
    a834:	dc002717 	ldw	r16,156(sp)
    a838:	d9402317 	ldw	r5,140(sp)
    a83c:	a885883a 	add	r2,r21,r2
    a840:	45400115 	stw	r21,4(r8)
    a844:	41400015 	stw	r5,0(r8)
    a848:	d8801c15 	stw	r2,112(sp)
    a84c:	d9001b15 	stw	r4,108(sp)
    a850:	014001c4 	movi	r5,7
    a854:	29026216 	blt	r5,r4,b1e0 <___vfiprintf_internal_r+0xe88>
    a858:	d9801d87 	ldb	r6,118(sp)
    a85c:	42000204 	addi	r8,r8,8
    a860:	21400044 	addi	r5,r4,1
    a864:	3001ae1e 	bne	r6,zero,af20 <___vfiprintf_internal_r+0xbc8>
    a868:	3801bb26 	beq	r7,zero,af58 <___vfiprintf_internal_r+0xc00>
    a86c:	d9001d04 	addi	r4,sp,116
    a870:	10800084 	addi	r2,r2,2
    a874:	41000015 	stw	r4,0(r8)
    a878:	01000084 	movi	r4,2
    a87c:	41000115 	stw	r4,4(r8)
    a880:	d8801c15 	stw	r2,112(sp)
    a884:	d9401b15 	stw	r5,108(sp)
    a888:	010001c4 	movi	r4,7
    a88c:	2142680e 	bge	r4,r5,b230 <___vfiprintf_internal_r+0xed8>
    a890:	1002b11e 	bne	r2,zero,b358 <___vfiprintf_internal_r+0x1000>
    a894:	01802004 	movi	r6,128
    a898:	01400044 	movi	r5,1
    a89c:	0009883a 	mov	r4,zero
    a8a0:	d811883a 	mov	r8,sp
    a8a4:	1981ae1e 	bne	r3,r6,af60 <___vfiprintf_internal_r+0xc08>
    a8a8:	d8c02517 	ldw	r3,148(sp)
    a8ac:	1cf9c83a 	sub	fp,r3,r19
    a8b0:	0701ab0e 	bge	zero,fp,af60 <___vfiprintf_internal_r+0xc08>
    a8b4:	05400404 	movi	r21,16
    a8b8:	af03a90e 	bge	r21,fp,b760 <___vfiprintf_internal_r+0x1408>
    a8bc:	01400074 	movhi	r5,1
    a8c0:	294bce04 	addi	r5,r5,12088
    a8c4:	d9402315 	stw	r5,140(sp)
    a8c8:	01c001c4 	movi	r7,7
    a8cc:	00000506 	br	a8e4 <___vfiprintf_internal_r+0x58c>
    a8d0:	21800084 	addi	r6,r4,2
    a8d4:	42000204 	addi	r8,r8,8
    a8d8:	1809883a 	mov	r4,r3
    a8dc:	e73ffc04 	addi	fp,fp,-16
    a8e0:	af000d0e 	bge	r21,fp,a918 <___vfiprintf_internal_r+0x5c0>
    a8e4:	10800404 	addi	r2,r2,16
    a8e8:	20c00044 	addi	r3,r4,1
    a8ec:	44800015 	stw	r18,0(r8)
    a8f0:	45400115 	stw	r21,4(r8)
    a8f4:	d8801c15 	stw	r2,112(sp)
    a8f8:	d8c01b15 	stw	r3,108(sp)
    a8fc:	38fff40e 	bge	r7,r3,a8d0 <__alt_exception_stack_pointer+0xf800a8d0>
    a900:	10022b1e 	bne	r2,zero,b1b0 <___vfiprintf_internal_r+0xe58>
    a904:	e73ffc04 	addi	fp,fp,-16
    a908:	01800044 	movi	r6,1
    a90c:	0009883a 	mov	r4,zero
    a910:	d811883a 	mov	r8,sp
    a914:	af3ff316 	blt	r21,fp,a8e4 <__alt_exception_stack_pointer+0xf800a8e4>
    a918:	d8c02317 	ldw	r3,140(sp)
    a91c:	1705883a 	add	r2,r2,fp
    a920:	47000115 	stw	fp,4(r8)
    a924:	40c00015 	stw	r3,0(r8)
    a928:	d8801c15 	stw	r2,112(sp)
    a92c:	d9801b15 	stw	r6,108(sp)
    a930:	00c001c4 	movi	r3,7
    a934:	19829416 	blt	r3,r6,b388 <___vfiprintf_internal_r+0x1030>
    a938:	8521c83a 	sub	r16,r16,r20
    a93c:	42000204 	addi	r8,r8,8
    a940:	31400044 	addi	r5,r6,1
    a944:	3009883a 	mov	r4,r6
    a948:	04018716 	blt	zero,r16,af68 <___vfiprintf_internal_r+0xc10>
    a94c:	a085883a 	add	r2,r20,r2
    a950:	45c00015 	stw	r23,0(r8)
    a954:	45000115 	stw	r20,4(r8)
    a958:	d8801c15 	stw	r2,112(sp)
    a95c:	d9401b15 	stw	r5,108(sp)
    a960:	00c001c4 	movi	r3,7
    a964:	1941c20e 	bge	r3,r5,b070 <___vfiprintf_internal_r+0xd18>
    a968:	1002531e 	bne	r2,zero,b2b8 <___vfiprintf_internal_r+0xf60>
    a96c:	d8001b15 	stw	zero,108(sp)
    a970:	8c40010c 	andi	r17,r17,4
    a974:	88023226 	beq	r17,zero,b240 <___vfiprintf_internal_r+0xee8>
    a978:	d9002517 	ldw	r4,148(sp)
    a97c:	24e3c83a 	sub	r17,r4,r19
    a980:	04432916 	blt	zero,r17,b628 <___vfiprintf_internal_r+0x12d0>
    a984:	d8802517 	ldw	r2,148(sp)
    a988:	14c0010e 	bge	r2,r19,a990 <___vfiprintf_internal_r+0x638>
    a98c:	9805883a 	mov	r2,r19
    a990:	d8c02417 	ldw	r3,144(sp)
    a994:	1887883a 	add	r3,r3,r2
    a998:	d8c02415 	stw	r3,144(sp)
    a99c:	d8001b15 	stw	zero,108(sp)
    a9a0:	d811883a 	mov	r8,sp
    a9a4:	003ea006 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    a9a8:	8c400814 	ori	r17,r17,32
    a9ac:	b0c00007 	ldb	r3,0(r22)
    a9b0:	003ec606 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    a9b4:	b0c00007 	ldb	r3,0(r22)
    a9b8:	00801b04 	movi	r2,108
    a9bc:	18832026 	beq	r3,r2,b640 <___vfiprintf_internal_r+0x12e8>
    a9c0:	8c400414 	ori	r17,r17,16
    a9c4:	003ec106 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    a9c8:	9cc03fcc 	andi	r19,r19,255
    a9cc:	b811883a 	mov	r8,r23
    a9d0:	9803981e 	bne	r19,zero,b834 <___vfiprintf_internal_r+0x14dc>
    a9d4:	8880080c 	andi	r2,r17,32
    a9d8:	1002be26 	beq	r2,zero,b4d4 <___vfiprintf_internal_r+0x117c>
    a9dc:	d9002217 	ldw	r4,136(sp)
    a9e0:	d9402417 	ldw	r5,144(sp)
    a9e4:	20800017 	ldw	r2,0(r4)
    a9e8:	2807d7fa 	srai	r3,r5,31
    a9ec:	21000104 	addi	r4,r4,4
    a9f0:	d9002215 	stw	r4,136(sp)
    a9f4:	11400015 	stw	r5,0(r2)
    a9f8:	10c00115 	stw	r3,4(r2)
    a9fc:	003e8a06 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    aa00:	9cc03fcc 	andi	r19,r19,255
    aa04:	b811883a 	mov	r8,r23
    aa08:	9803871e 	bne	r19,zero,b828 <___vfiprintf_internal_r+0x14d0>
    aa0c:	8880080c 	andi	r2,r17,32
    aa10:	10009a26 	beq	r2,zero,ac7c <___vfiprintf_internal_r+0x924>
    aa14:	d9002217 	ldw	r4,136(sp)
    aa18:	d8001d85 	stb	zero,118(sp)
    aa1c:	20800204 	addi	r2,r4,8
    aa20:	24c00017 	ldw	r19,0(r4)
    aa24:	25000117 	ldw	r20,4(r4)
    aa28:	8002a416 	blt	r16,zero,b4bc <___vfiprintf_internal_r+0x1164>
    aa2c:	013fdfc4 	movi	r4,-129
    aa30:	9d06b03a 	or	r3,r19,r20
    aa34:	d8802215 	stw	r2,136(sp)
    aa38:	8922703a 	and	r17,r17,r4
    aa3c:	18009b26 	beq	r3,zero,acac <___vfiprintf_internal_r+0x954>
    aa40:	002b883a 	mov	r21,zero
    aa44:	ddc01a04 	addi	r23,sp,104
    aa48:	9806d0fa 	srli	r3,r19,3
    aa4c:	a008977a 	slli	r4,r20,29
    aa50:	a028d0fa 	srli	r20,r20,3
    aa54:	9cc001cc 	andi	r19,r19,7
    aa58:	98800c04 	addi	r2,r19,48
    aa5c:	bdffffc4 	addi	r23,r23,-1
    aa60:	20e6b03a 	or	r19,r4,r3
    aa64:	b8800005 	stb	r2,0(r23)
    aa68:	9d06b03a 	or	r3,r19,r20
    aa6c:	183ff61e 	bne	r3,zero,aa48 <__alt_exception_stack_pointer+0xf800aa48>
    aa70:	88c0004c 	andi	r3,r17,1
    aa74:	18021f1e 	bne	r3,zero,b2f4 <___vfiprintf_internal_r+0xf9c>
    aa78:	d9401e17 	ldw	r5,120(sp)
    aa7c:	2de9c83a 	sub	r20,r5,r23
    aa80:	003f3806 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    aa84:	9cc03fcc 	andi	r19,r19,255
    aa88:	b811883a 	mov	r8,r23
    aa8c:	98034f1e 	bne	r19,zero,b7cc <___vfiprintf_internal_r+0x1474>
    aa90:	00800074 	movhi	r2,1
    aa94:	108b6e04 	addi	r2,r2,11704
    aa98:	d8802615 	stw	r2,152(sp)
    aa9c:	8880080c 	andi	r2,r17,32
    aaa0:	1000ac26 	beq	r2,zero,ad54 <___vfiprintf_internal_r+0x9fc>
    aaa4:	d9002217 	ldw	r4,136(sp)
    aaa8:	24c00017 	ldw	r19,0(r4)
    aaac:	25000117 	ldw	r20,4(r4)
    aab0:	21000204 	addi	r4,r4,8
    aab4:	d9002215 	stw	r4,136(sp)
    aab8:	8880004c 	andi	r2,r17,1
    aabc:	1001e726 	beq	r2,zero,b25c <___vfiprintf_internal_r+0xf04>
    aac0:	9d04b03a 	or	r2,r19,r20
    aac4:	10025c1e 	bne	r2,zero,b438 <___vfiprintf_internal_r+0x10e0>
    aac8:	d8001d85 	stb	zero,118(sp)
    aacc:	80024416 	blt	r16,zero,b3e0 <___vfiprintf_internal_r+0x1088>
    aad0:	00bfdfc4 	movi	r2,-129
    aad4:	88a2703a 	and	r17,r17,r2
    aad8:	003f1d06 	br	a750 <__alt_exception_stack_pointer+0xf800a750>
    aadc:	d8c02217 	ldw	r3,136(sp)
    aae0:	04c00044 	movi	r19,1
    aae4:	b811883a 	mov	r8,r23
    aae8:	18800017 	ldw	r2,0(r3)
    aaec:	18c00104 	addi	r3,r3,4
    aaf0:	d8001d85 	stb	zero,118(sp)
    aaf4:	d8801005 	stb	r2,64(sp)
    aaf8:	d8c02215 	stw	r3,136(sp)
    aafc:	9829883a 	mov	r20,r19
    ab00:	ddc01004 	addi	r23,sp,64
    ab04:	0021883a 	mov	r16,zero
    ab08:	003f1e06 	br	a784 <__alt_exception_stack_pointer+0xf800a784>
    ab0c:	9cc03fcc 	andi	r19,r19,255
    ab10:	b811883a 	mov	r8,r23
    ab14:	9803331e 	bne	r19,zero,b7e4 <___vfiprintf_internal_r+0x148c>
    ab18:	8880080c 	andi	r2,r17,32
    ab1c:	10004826 	beq	r2,zero,ac40 <___vfiprintf_internal_r+0x8e8>
    ab20:	d9002217 	ldw	r4,136(sp)
    ab24:	20800117 	ldw	r2,4(r4)
    ab28:	24c00017 	ldw	r19,0(r4)
    ab2c:	21000204 	addi	r4,r4,8
    ab30:	d9002215 	stw	r4,136(sp)
    ab34:	1029883a 	mov	r20,r2
    ab38:	10024c16 	blt	r2,zero,b46c <___vfiprintf_internal_r+0x1114>
    ab3c:	dd401d83 	ldbu	r21,118(sp)
    ab40:	80007116 	blt	r16,zero,ad08 <___vfiprintf_internal_r+0x9b0>
    ab44:	00ffdfc4 	movi	r3,-129
    ab48:	9d04b03a 	or	r2,r19,r20
    ab4c:	88e2703a 	and	r17,r17,r3
    ab50:	1000d126 	beq	r2,zero,ae98 <___vfiprintf_internal_r+0xb40>
    ab54:	a0023526 	beq	r20,zero,b42c <___vfiprintf_internal_r+0x10d4>
    ab58:	ddc01a04 	addi	r23,sp,104
    ab5c:	4039883a 	mov	fp,r8
    ab60:	9809883a 	mov	r4,r19
    ab64:	a00b883a 	mov	r5,r20
    ab68:	01800284 	movi	r6,10
    ab6c:	000f883a 	mov	r7,zero
    ab70:	000c8840 	call	c884 <__umoddi3>
    ab74:	10800c04 	addi	r2,r2,48
    ab78:	bdffffc4 	addi	r23,r23,-1
    ab7c:	9809883a 	mov	r4,r19
    ab80:	a00b883a 	mov	r5,r20
    ab84:	b8800005 	stb	r2,0(r23)
    ab88:	01800284 	movi	r6,10
    ab8c:	000f883a 	mov	r7,zero
    ab90:	000c2880 	call	c288 <__udivdi3>
    ab94:	1027883a 	mov	r19,r2
    ab98:	10c4b03a 	or	r2,r2,r3
    ab9c:	1829883a 	mov	r20,r3
    aba0:	103fef1e 	bne	r2,zero,ab60 <__alt_exception_stack_pointer+0xf800ab60>
    aba4:	d9001e17 	ldw	r4,120(sp)
    aba8:	e011883a 	mov	r8,fp
    abac:	25e9c83a 	sub	r20,r4,r23
    abb0:	003eec06 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    abb4:	d8802307 	ldb	r2,140(sp)
    abb8:	1002361e 	bne	r2,zero,b494 <___vfiprintf_internal_r+0x113c>
    abbc:	00c00804 	movi	r3,32
    abc0:	d8c02305 	stb	r3,140(sp)
    abc4:	04c00044 	movi	r19,1
    abc8:	b0c00007 	ldb	r3,0(r22)
    abcc:	003e3f06 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    abd0:	8c400054 	ori	r17,r17,1
    abd4:	b0c00007 	ldb	r3,0(r22)
    abd8:	003e3c06 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    abdc:	8c402014 	ori	r17,r17,128
    abe0:	b0c00007 	ldb	r3,0(r22)
    abe4:	003e3906 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    abe8:	dc002715 	stw	r16,156(sp)
    abec:	d8002515 	stw	zero,148(sp)
    abf0:	1f3ff404 	addi	fp,r3,-48
    abf4:	0009883a 	mov	r4,zero
    abf8:	b021883a 	mov	r16,r22
    abfc:	01400284 	movi	r5,10
    ac00:	000cffc0 	call	cffc <__mulsi3>
    ac04:	80c00007 	ldb	r3,0(r16)
    ac08:	e089883a 	add	r4,fp,r2
    ac0c:	b5800044 	addi	r22,r22,1
    ac10:	1f3ff404 	addi	fp,r3,-48
    ac14:	b021883a 	mov	r16,r22
    ac18:	af3ff82e 	bgeu	r21,fp,abfc <__alt_exception_stack_pointer+0xf800abfc>
    ac1c:	d9002515 	stw	r4,148(sp)
    ac20:	dc002717 	ldw	r16,156(sp)
    ac24:	003e2a06 	br	a4d0 <__alt_exception_stack_pointer+0xf800a4d0>
    ac28:	9cc03fcc 	andi	r19,r19,255
    ac2c:	b811883a 	mov	r8,r23
    ac30:	9802e91e 	bne	r19,zero,b7d8 <___vfiprintf_internal_r+0x1480>
    ac34:	8c400414 	ori	r17,r17,16
    ac38:	8880080c 	andi	r2,r17,32
    ac3c:	103fb81e 	bne	r2,zero,ab20 <__alt_exception_stack_pointer+0xf800ab20>
    ac40:	8880040c 	andi	r2,r17,16
    ac44:	10022e26 	beq	r2,zero,b500 <___vfiprintf_internal_r+0x11a8>
    ac48:	d9402217 	ldw	r5,136(sp)
    ac4c:	2cc00017 	ldw	r19,0(r5)
    ac50:	29400104 	addi	r5,r5,4
    ac54:	d9402215 	stw	r5,136(sp)
    ac58:	9829d7fa 	srai	r20,r19,31
    ac5c:	a005883a 	mov	r2,r20
    ac60:	003fb506 	br	ab38 <__alt_exception_stack_pointer+0xf800ab38>
    ac64:	9cc03fcc 	andi	r19,r19,255
    ac68:	b811883a 	mov	r8,r23
    ac6c:	9802fa1e 	bne	r19,zero,b858 <___vfiprintf_internal_r+0x1500>
    ac70:	8c400414 	ori	r17,r17,16
    ac74:	8880080c 	andi	r2,r17,32
    ac78:	103f661e 	bne	r2,zero,aa14 <__alt_exception_stack_pointer+0xf800aa14>
    ac7c:	8880040c 	andi	r2,r17,16
    ac80:	10020626 	beq	r2,zero,b49c <___vfiprintf_internal_r+0x1144>
    ac84:	d9402217 	ldw	r5,136(sp)
    ac88:	d8001d85 	stb	zero,118(sp)
    ac8c:	0029883a 	mov	r20,zero
    ac90:	28800104 	addi	r2,r5,4
    ac94:	2cc00017 	ldw	r19,0(r5)
    ac98:	80020816 	blt	r16,zero,b4bc <___vfiprintf_internal_r+0x1164>
    ac9c:	00ffdfc4 	movi	r3,-129
    aca0:	d8802215 	stw	r2,136(sp)
    aca4:	88e2703a 	and	r17,r17,r3
    aca8:	983f651e 	bne	r19,zero,aa40 <__alt_exception_stack_pointer+0xf800aa40>
    acac:	002b883a 	mov	r21,zero
    acb0:	8002cf26 	beq	r16,zero,b7f0 <___vfiprintf_internal_r+0x1498>
    acb4:	0027883a 	mov	r19,zero
    acb8:	0029883a 	mov	r20,zero
    acbc:	003f6106 	br	aa44 <__alt_exception_stack_pointer+0xf800aa44>
    acc0:	9cc03fcc 	andi	r19,r19,255
    acc4:	b811883a 	mov	r8,r23
    acc8:	9802e01e 	bne	r19,zero,b84c <___vfiprintf_internal_r+0x14f4>
    accc:	8c400414 	ori	r17,r17,16
    acd0:	8880080c 	andi	r2,r17,32
    acd4:	1000641e 	bne	r2,zero,ae68 <___vfiprintf_internal_r+0xb10>
    acd8:	8880040c 	andi	r2,r17,16
    acdc:	1001c81e 	bne	r2,zero,b400 <___vfiprintf_internal_r+0x10a8>
    ace0:	8880100c 	andi	r2,r17,64
    ace4:	d8001d85 	stb	zero,118(sp)
    ace8:	1002281e 	bne	r2,zero,b58c <___vfiprintf_internal_r+0x1234>
    acec:	d9002217 	ldw	r4,136(sp)
    acf0:	0029883a 	mov	r20,zero
    acf4:	20800104 	addi	r2,r4,4
    acf8:	24c00017 	ldw	r19,0(r4)
    acfc:	8001c60e 	bge	r16,zero,b418 <___vfiprintf_internal_r+0x10c0>
    ad00:	d8802215 	stw	r2,136(sp)
    ad04:	002b883a 	mov	r21,zero
    ad08:	9d04b03a 	or	r2,r19,r20
    ad0c:	103f911e 	bne	r2,zero,ab54 <__alt_exception_stack_pointer+0xf800ab54>
    ad10:	00800044 	movi	r2,1
    ad14:	10803fcc 	andi	r2,r2,255
    ad18:	00c00044 	movi	r3,1
    ad1c:	10c05f26 	beq	r2,r3,ae9c <___vfiprintf_internal_r+0xb44>
    ad20:	00c00084 	movi	r3,2
    ad24:	10ffe31e 	bne	r2,r3,acb4 <__alt_exception_stack_pointer+0xf800acb4>
    ad28:	0027883a 	mov	r19,zero
    ad2c:	0029883a 	mov	r20,zero
    ad30:	00015106 	br	b278 <___vfiprintf_internal_r+0xf20>
    ad34:	9cc03fcc 	andi	r19,r19,255
    ad38:	b811883a 	mov	r8,r23
    ad3c:	9802c01e 	bne	r19,zero,b840 <___vfiprintf_internal_r+0x14e8>
    ad40:	01400074 	movhi	r5,1
    ad44:	294b6904 	addi	r5,r5,11684
    ad48:	d9402615 	stw	r5,152(sp)
    ad4c:	8880080c 	andi	r2,r17,32
    ad50:	103f541e 	bne	r2,zero,aaa4 <__alt_exception_stack_pointer+0xf800aaa4>
    ad54:	8880040c 	andi	r2,r17,16
    ad58:	1001f226 	beq	r2,zero,b524 <___vfiprintf_internal_r+0x11cc>
    ad5c:	d9402217 	ldw	r5,136(sp)
    ad60:	0029883a 	mov	r20,zero
    ad64:	2cc00017 	ldw	r19,0(r5)
    ad68:	29400104 	addi	r5,r5,4
    ad6c:	d9402215 	stw	r5,136(sp)
    ad70:	003f5106 	br	aab8 <__alt_exception_stack_pointer+0xf800aab8>
    ad74:	d8c02217 	ldw	r3,136(sp)
    ad78:	b811883a 	mov	r8,r23
    ad7c:	d8001d85 	stb	zero,118(sp)
    ad80:	1dc00017 	ldw	r23,0(r3)
    ad84:	1f000104 	addi	fp,r3,4
    ad88:	b8025926 	beq	r23,zero,b6f0 <___vfiprintf_internal_r+0x1398>
    ad8c:	80023316 	blt	r16,zero,b65c <___vfiprintf_internal_r+0x1304>
    ad90:	800d883a 	mov	r6,r16
    ad94:	000b883a 	mov	r5,zero
    ad98:	b809883a 	mov	r4,r23
    ad9c:	da002a15 	stw	r8,168(sp)
    ada0:	00084ec0 	call	84ec <memchr>
    ada4:	da002a17 	ldw	r8,168(sp)
    ada8:	10026826 	beq	r2,zero,b74c <___vfiprintf_internal_r+0x13f4>
    adac:	15e9c83a 	sub	r20,r2,r23
    adb0:	dd401d83 	ldbu	r21,118(sp)
    adb4:	df002215 	stw	fp,136(sp)
    adb8:	0021883a 	mov	r16,zero
    adbc:	003e6906 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    adc0:	9cc03fcc 	andi	r19,r19,255
    adc4:	b811883a 	mov	r8,r23
    adc8:	983fc126 	beq	r19,zero,acd0 <__alt_exception_stack_pointer+0xf800acd0>
    adcc:	d8c02303 	ldbu	r3,140(sp)
    add0:	d8c01d85 	stb	r3,118(sp)
    add4:	003fbe06 	br	acd0 <__alt_exception_stack_pointer+0xf800acd0>
    add8:	d9002217 	ldw	r4,136(sp)
    addc:	d9402217 	ldw	r5,136(sp)
    ade0:	21000017 	ldw	r4,0(r4)
    ade4:	28800104 	addi	r2,r5,4
    ade8:	d9002515 	stw	r4,148(sp)
    adec:	203e3d16 	blt	r4,zero,a6e4 <__alt_exception_stack_pointer+0xf800a6e4>
    adf0:	d8802215 	stw	r2,136(sp)
    adf4:	b0c00007 	ldb	r3,0(r22)
    adf8:	003db406 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    adfc:	00c00ac4 	movi	r3,43
    ae00:	d8c02305 	stb	r3,140(sp)
    ae04:	04c00044 	movi	r19,1
    ae08:	b0c00007 	ldb	r3,0(r22)
    ae0c:	003daf06 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    ae10:	b0c00007 	ldb	r3,0(r22)
    ae14:	01000a84 	movi	r4,42
    ae18:	b4000044 	addi	r16,r22,1
    ae1c:	19025e26 	beq	r3,r4,b798 <___vfiprintf_internal_r+0x1440>
    ae20:	1f3ff404 	addi	fp,r3,-48
    ae24:	0009883a 	mov	r4,zero
    ae28:	af025236 	bltu	r21,fp,b774 <___vfiprintf_internal_r+0x141c>
    ae2c:	01400284 	movi	r5,10
    ae30:	000cffc0 	call	cffc <__mulsi3>
    ae34:	80c00007 	ldb	r3,0(r16)
    ae38:	1709883a 	add	r4,r2,fp
    ae3c:	85800044 	addi	r22,r16,1
    ae40:	1f3ff404 	addi	fp,r3,-48
    ae44:	b021883a 	mov	r16,r22
    ae48:	af3ff82e 	bgeu	r21,fp,ae2c <__alt_exception_stack_pointer+0xf800ae2c>
    ae4c:	2021883a 	mov	r16,r4
    ae50:	203d9f0e 	bge	r4,zero,a4d0 <__alt_exception_stack_pointer+0xf800a4d0>
    ae54:	043fffc4 	movi	r16,-1
    ae58:	003d9d06 	br	a4d0 <__alt_exception_stack_pointer+0xf800a4d0>
    ae5c:	8c401014 	ori	r17,r17,64
    ae60:	b0c00007 	ldb	r3,0(r22)
    ae64:	003d9906 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    ae68:	d9002217 	ldw	r4,136(sp)
    ae6c:	d8001d85 	stb	zero,118(sp)
    ae70:	20c00204 	addi	r3,r4,8
    ae74:	24c00017 	ldw	r19,0(r4)
    ae78:	25000117 	ldw	r20,4(r4)
    ae7c:	8001e716 	blt	r16,zero,b61c <___vfiprintf_internal_r+0x12c4>
    ae80:	013fdfc4 	movi	r4,-129
    ae84:	9d04b03a 	or	r2,r19,r20
    ae88:	d8c02215 	stw	r3,136(sp)
    ae8c:	8922703a 	and	r17,r17,r4
    ae90:	002b883a 	mov	r21,zero
    ae94:	103f2f1e 	bne	r2,zero,ab54 <__alt_exception_stack_pointer+0xf800ab54>
    ae98:	803e2f26 	beq	r16,zero,a758 <__alt_exception_stack_pointer+0xf800a758>
    ae9c:	0027883a 	mov	r19,zero
    aea0:	9cc00c04 	addi	r19,r19,48
    aea4:	dcc019c5 	stb	r19,103(sp)
    aea8:	dd002817 	ldw	r20,160(sp)
    aeac:	ddc019c4 	addi	r23,sp,103
    aeb0:	003e2c06 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    aeb4:	9cc03fcc 	andi	r19,r19,255
    aeb8:	b811883a 	mov	r8,r23
    aebc:	9802571e 	bne	r19,zero,b81c <___vfiprintf_internal_r+0x14c4>
    aec0:	18005726 	beq	r3,zero,b020 <___vfiprintf_internal_r+0xcc8>
    aec4:	04c00044 	movi	r19,1
    aec8:	d8c01005 	stb	r3,64(sp)
    aecc:	d8001d85 	stb	zero,118(sp)
    aed0:	9829883a 	mov	r20,r19
    aed4:	ddc01004 	addi	r23,sp,64
    aed8:	003f0a06 	br	ab04 <__alt_exception_stack_pointer+0xf800ab04>
    aedc:	d9402017 	ldw	r5,128(sp)
    aee0:	d9002117 	ldw	r4,132(sp)
    aee4:	d9801a04 	addi	r6,sp,104
    aee8:	da802a15 	stw	r10,168(sp)
    aeec:	000a2440 	call	a244 <__sprint_r.part.0>
    aef0:	da802a17 	ldw	r10,168(sp)
    aef4:	1000501e 	bne	r2,zero,b038 <___vfiprintf_internal_r+0xce0>
    aef8:	d9801b17 	ldw	r6,108(sp)
    aefc:	d8801c17 	ldw	r2,112(sp)
    af00:	d811883a 	mov	r8,sp
    af04:	31000044 	addi	r4,r6,1
    af08:	003e3606 	br	a7e4 <__alt_exception_stack_pointer+0xf800a7e4>
    af0c:	d9001b17 	ldw	r4,108(sp)
    af10:	d8801c17 	ldw	r2,112(sp)
    af14:	21400044 	addi	r5,r4,1
    af18:	d9801d87 	ldb	r6,118(sp)
    af1c:	303e5226 	beq	r6,zero,a868 <__alt_exception_stack_pointer+0xf800a868>
    af20:	01800044 	movi	r6,1
    af24:	d9001d84 	addi	r4,sp,118
    af28:	1185883a 	add	r2,r2,r6
    af2c:	41000015 	stw	r4,0(r8)
    af30:	41800115 	stw	r6,4(r8)
    af34:	d8801c15 	stw	r2,112(sp)
    af38:	d9401b15 	stw	r5,108(sp)
    af3c:	010001c4 	movi	r4,7
    af40:	2140b00e 	bge	r4,r5,b204 <___vfiprintf_internal_r+0xeac>
    af44:	1000f61e 	bne	r2,zero,b320 <___vfiprintf_internal_r+0xfc8>
    af48:	3800b31e 	bne	r7,zero,b218 <___vfiprintf_internal_r+0xec0>
    af4c:	0009883a 	mov	r4,zero
    af50:	300b883a 	mov	r5,r6
    af54:	d811883a 	mov	r8,sp
    af58:	01802004 	movi	r6,128
    af5c:	19be5226 	beq	r3,r6,a8a8 <__alt_exception_stack_pointer+0xf800a8a8>
    af60:	8521c83a 	sub	r16,r16,r20
    af64:	043e790e 	bge	zero,r16,a94c <__alt_exception_stack_pointer+0xf800a94c>
    af68:	05400404 	movi	r21,16
    af6c:	ac01b00e 	bge	r21,r16,b630 <___vfiprintf_internal_r+0x12d8>
    af70:	01400074 	movhi	r5,1
    af74:	294bce04 	addi	r5,r5,12088
    af78:	d9402315 	stw	r5,140(sp)
    af7c:	070001c4 	movi	fp,7
    af80:	00000506 	br	af98 <___vfiprintf_internal_r+0xc40>
    af84:	21400084 	addi	r5,r4,2
    af88:	42000204 	addi	r8,r8,8
    af8c:	1809883a 	mov	r4,r3
    af90:	843ffc04 	addi	r16,r16,-16
    af94:	ac000d0e 	bge	r21,r16,afcc <___vfiprintf_internal_r+0xc74>
    af98:	10800404 	addi	r2,r2,16
    af9c:	20c00044 	addi	r3,r4,1
    afa0:	44800015 	stw	r18,0(r8)
    afa4:	45400115 	stw	r21,4(r8)
    afa8:	d8801c15 	stw	r2,112(sp)
    afac:	d8c01b15 	stw	r3,108(sp)
    afb0:	e0fff40e 	bge	fp,r3,af84 <__alt_exception_stack_pointer+0xf800af84>
    afb4:	1000101e 	bne	r2,zero,aff8 <___vfiprintf_internal_r+0xca0>
    afb8:	843ffc04 	addi	r16,r16,-16
    afbc:	01400044 	movi	r5,1
    afc0:	0009883a 	mov	r4,zero
    afc4:	d811883a 	mov	r8,sp
    afc8:	ac3ff316 	blt	r21,r16,af98 <__alt_exception_stack_pointer+0xf800af98>
    afcc:	d8c02317 	ldw	r3,140(sp)
    afd0:	1405883a 	add	r2,r2,r16
    afd4:	44000115 	stw	r16,4(r8)
    afd8:	40c00015 	stw	r3,0(r8)
    afdc:	d8801c15 	stw	r2,112(sp)
    afe0:	d9401b15 	stw	r5,108(sp)
    afe4:	00c001c4 	movi	r3,7
    afe8:	19401916 	blt	r3,r5,b050 <___vfiprintf_internal_r+0xcf8>
    afec:	42000204 	addi	r8,r8,8
    aff0:	29400044 	addi	r5,r5,1
    aff4:	003e5506 	br	a94c <__alt_exception_stack_pointer+0xf800a94c>
    aff8:	d9402017 	ldw	r5,128(sp)
    affc:	d9002117 	ldw	r4,132(sp)
    b000:	d9801a04 	addi	r6,sp,104
    b004:	000a2440 	call	a244 <__sprint_r.part.0>
    b008:	10000b1e 	bne	r2,zero,b038 <___vfiprintf_internal_r+0xce0>
    b00c:	d9001b17 	ldw	r4,108(sp)
    b010:	d8801c17 	ldw	r2,112(sp)
    b014:	d811883a 	mov	r8,sp
    b018:	21400044 	addi	r5,r4,1
    b01c:	003fdc06 	br	af90 <__alt_exception_stack_pointer+0xf800af90>
    b020:	d8801c17 	ldw	r2,112(sp)
    b024:	10000426 	beq	r2,zero,b038 <___vfiprintf_internal_r+0xce0>
    b028:	d9402017 	ldw	r5,128(sp)
    b02c:	d9002117 	ldw	r4,132(sp)
    b030:	d9801a04 	addi	r6,sp,104
    b034:	000a2440 	call	a244 <__sprint_r.part.0>
    b038:	d9402017 	ldw	r5,128(sp)
    b03c:	2880030b 	ldhu	r2,12(r5)
    b040:	1080100c 	andi	r2,r2,64
    b044:	10014d1e 	bne	r2,zero,b57c <___vfiprintf_internal_r+0x1224>
    b048:	d8802417 	ldw	r2,144(sp)
    b04c:	003d9706 	br	a6ac <__alt_exception_stack_pointer+0xf800a6ac>
    b050:	1000d21e 	bne	r2,zero,b39c <___vfiprintf_internal_r+0x1044>
    b054:	00c00044 	movi	r3,1
    b058:	a005883a 	mov	r2,r20
    b05c:	ddc00015 	stw	r23,0(sp)
    b060:	dd000115 	stw	r20,4(sp)
    b064:	dd001c15 	stw	r20,112(sp)
    b068:	d8c01b15 	stw	r3,108(sp)
    b06c:	d811883a 	mov	r8,sp
    b070:	42000204 	addi	r8,r8,8
    b074:	8c40010c 	andi	r17,r17,4
    b078:	88004026 	beq	r17,zero,b17c <___vfiprintf_internal_r+0xe24>
    b07c:	d9002517 	ldw	r4,148(sp)
    b080:	24e3c83a 	sub	r17,r4,r19
    b084:	04403d0e 	bge	zero,r17,b17c <___vfiprintf_internal_r+0xe24>
    b088:	04000404 	movi	r16,16
    b08c:	8441a90e 	bge	r16,r17,b734 <___vfiprintf_internal_r+0x13dc>
    b090:	00c00074 	movhi	r3,1
    b094:	18cbd204 	addi	r3,r3,12104
    b098:	d9001b17 	ldw	r4,108(sp)
    b09c:	d8c02315 	stw	r3,140(sp)
    b0a0:	050001c4 	movi	r20,7
    b0a4:	dd402117 	ldw	r21,132(sp)
    b0a8:	ddc02017 	ldw	r23,128(sp)
    b0ac:	00000506 	br	b0c4 <___vfiprintf_internal_r+0xd6c>
    b0b0:	21400084 	addi	r5,r4,2
    b0b4:	42000204 	addi	r8,r8,8
    b0b8:	1809883a 	mov	r4,r3
    b0bc:	8c7ffc04 	addi	r17,r17,-16
    b0c0:	84400f0e 	bge	r16,r17,b100 <___vfiprintf_internal_r+0xda8>
    b0c4:	01400074 	movhi	r5,1
    b0c8:	10800404 	addi	r2,r2,16
    b0cc:	20c00044 	addi	r3,r4,1
    b0d0:	294bd204 	addi	r5,r5,12104
    b0d4:	41400015 	stw	r5,0(r8)
    b0d8:	44000115 	stw	r16,4(r8)
    b0dc:	d8801c15 	stw	r2,112(sp)
    b0e0:	d8c01b15 	stw	r3,108(sp)
    b0e4:	a0fff20e 	bge	r20,r3,b0b0 <__alt_exception_stack_pointer+0xf800b0b0>
    b0e8:	1000141e 	bne	r2,zero,b13c <___vfiprintf_internal_r+0xde4>
    b0ec:	8c7ffc04 	addi	r17,r17,-16
    b0f0:	01400044 	movi	r5,1
    b0f4:	0009883a 	mov	r4,zero
    b0f8:	d811883a 	mov	r8,sp
    b0fc:	847ff116 	blt	r16,r17,b0c4 <__alt_exception_stack_pointer+0xf800b0c4>
    b100:	d8c02317 	ldw	r3,140(sp)
    b104:	1445883a 	add	r2,r2,r17
    b108:	44400115 	stw	r17,4(r8)
    b10c:	40c00015 	stw	r3,0(r8)
    b110:	d8801c15 	stw	r2,112(sp)
    b114:	d9401b15 	stw	r5,108(sp)
    b118:	00c001c4 	movi	r3,7
    b11c:	1940170e 	bge	r3,r5,b17c <___vfiprintf_internal_r+0xe24>
    b120:	1000101e 	bne	r2,zero,b164 <___vfiprintf_internal_r+0xe0c>
    b124:	d8802517 	ldw	r2,148(sp)
    b128:	14c11616 	blt	r2,r19,b584 <___vfiprintf_internal_r+0x122c>
    b12c:	d9002417 	ldw	r4,144(sp)
    b130:	2089883a 	add	r4,r4,r2
    b134:	d9002415 	stw	r4,144(sp)
    b138:	003e1806 	br	a99c <__alt_exception_stack_pointer+0xf800a99c>
    b13c:	d9801a04 	addi	r6,sp,104
    b140:	b80b883a 	mov	r5,r23
    b144:	a809883a 	mov	r4,r21
    b148:	000a2440 	call	a244 <__sprint_r.part.0>
    b14c:	103fba1e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b150:	d9001b17 	ldw	r4,108(sp)
    b154:	d8801c17 	ldw	r2,112(sp)
    b158:	d811883a 	mov	r8,sp
    b15c:	21400044 	addi	r5,r4,1
    b160:	003fd606 	br	b0bc <__alt_exception_stack_pointer+0xf800b0bc>
    b164:	d9402017 	ldw	r5,128(sp)
    b168:	d9002117 	ldw	r4,132(sp)
    b16c:	d9801a04 	addi	r6,sp,104
    b170:	000a2440 	call	a244 <__sprint_r.part.0>
    b174:	103fb01e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b178:	d8801c17 	ldw	r2,112(sp)
    b17c:	d8c02517 	ldw	r3,148(sp)
    b180:	1cc0010e 	bge	r3,r19,b188 <___vfiprintf_internal_r+0xe30>
    b184:	9807883a 	mov	r3,r19
    b188:	d9002417 	ldw	r4,144(sp)
    b18c:	20c9883a 	add	r4,r4,r3
    b190:	d9002415 	stw	r4,144(sp)
    b194:	103e0126 	beq	r2,zero,a99c <__alt_exception_stack_pointer+0xf800a99c>
    b198:	d9402017 	ldw	r5,128(sp)
    b19c:	d9002117 	ldw	r4,132(sp)
    b1a0:	d9801a04 	addi	r6,sp,104
    b1a4:	000a2440 	call	a244 <__sprint_r.part.0>
    b1a8:	103dfc26 	beq	r2,zero,a99c <__alt_exception_stack_pointer+0xf800a99c>
    b1ac:	003fa206 	br	b038 <__alt_exception_stack_pointer+0xf800b038>
    b1b0:	d9402017 	ldw	r5,128(sp)
    b1b4:	d9002117 	ldw	r4,132(sp)
    b1b8:	d9801a04 	addi	r6,sp,104
    b1bc:	d9c02b15 	stw	r7,172(sp)
    b1c0:	000a2440 	call	a244 <__sprint_r.part.0>
    b1c4:	d9c02b17 	ldw	r7,172(sp)
    b1c8:	103f9b1e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b1cc:	d9001b17 	ldw	r4,108(sp)
    b1d0:	d8801c17 	ldw	r2,112(sp)
    b1d4:	d811883a 	mov	r8,sp
    b1d8:	21800044 	addi	r6,r4,1
    b1dc:	003dbf06 	br	a8dc <__alt_exception_stack_pointer+0xf800a8dc>
    b1e0:	1000d81e 	bne	r2,zero,b544 <___vfiprintf_internal_r+0x11ec>
    b1e4:	d9001d87 	ldb	r4,118(sp)
    b1e8:	20000a26 	beq	r4,zero,b214 <___vfiprintf_internal_r+0xebc>
    b1ec:	00800044 	movi	r2,1
    b1f0:	d9001d84 	addi	r4,sp,118
    b1f4:	100b883a 	mov	r5,r2
    b1f8:	d9000015 	stw	r4,0(sp)
    b1fc:	d8800115 	stw	r2,4(sp)
    b200:	d811883a 	mov	r8,sp
    b204:	2809883a 	mov	r4,r5
    b208:	42000204 	addi	r8,r8,8
    b20c:	29400044 	addi	r5,r5,1
    b210:	003d9506 	br	a868 <__alt_exception_stack_pointer+0xf800a868>
    b214:	3800fd26 	beq	r7,zero,b60c <___vfiprintf_internal_r+0x12b4>
    b218:	00800084 	movi	r2,2
    b21c:	d9001d04 	addi	r4,sp,116
    b220:	d9000015 	stw	r4,0(sp)
    b224:	d8800115 	stw	r2,4(sp)
    b228:	01400044 	movi	r5,1
    b22c:	d811883a 	mov	r8,sp
    b230:	2809883a 	mov	r4,r5
    b234:	42000204 	addi	r8,r8,8
    b238:	29400044 	addi	r5,r5,1
    b23c:	003f4606 	br	af58 <__alt_exception_stack_pointer+0xf800af58>
    b240:	d8802517 	ldw	r2,148(sp)
    b244:	14c0010e 	bge	r2,r19,b24c <___vfiprintf_internal_r+0xef4>
    b248:	9805883a 	mov	r2,r19
    b24c:	d9402417 	ldw	r5,144(sp)
    b250:	288b883a 	add	r5,r5,r2
    b254:	d9402415 	stw	r5,144(sp)
    b258:	003dd006 	br	a99c <__alt_exception_stack_pointer+0xf800a99c>
    b25c:	d8001d85 	stb	zero,118(sp)
    b260:	80005d16 	blt	r16,zero,b3d8 <___vfiprintf_internal_r+0x1080>
    b264:	00ffdfc4 	movi	r3,-129
    b268:	9d04b03a 	or	r2,r19,r20
    b26c:	88e2703a 	and	r17,r17,r3
    b270:	103d3726 	beq	r2,zero,a750 <__alt_exception_stack_pointer+0xf800a750>
    b274:	002b883a 	mov	r21,zero
    b278:	d9002617 	ldw	r4,152(sp)
    b27c:	ddc01a04 	addi	r23,sp,104
    b280:	988003cc 	andi	r2,r19,15
    b284:	a006973a 	slli	r3,r20,28
    b288:	2085883a 	add	r2,r4,r2
    b28c:	9826d13a 	srli	r19,r19,4
    b290:	10800003 	ldbu	r2,0(r2)
    b294:	a028d13a 	srli	r20,r20,4
    b298:	bdffffc4 	addi	r23,r23,-1
    b29c:	1ce6b03a 	or	r19,r3,r19
    b2a0:	b8800005 	stb	r2,0(r23)
    b2a4:	9d04b03a 	or	r2,r19,r20
    b2a8:	103ff51e 	bne	r2,zero,b280 <__alt_exception_stack_pointer+0xf800b280>
    b2ac:	d8801e17 	ldw	r2,120(sp)
    b2b0:	15e9c83a 	sub	r20,r2,r23
    b2b4:	003d2b06 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b2b8:	d9402017 	ldw	r5,128(sp)
    b2bc:	d9002117 	ldw	r4,132(sp)
    b2c0:	d9801a04 	addi	r6,sp,104
    b2c4:	000a2440 	call	a244 <__sprint_r.part.0>
    b2c8:	103f5b1e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b2cc:	d8801c17 	ldw	r2,112(sp)
    b2d0:	d811883a 	mov	r8,sp
    b2d4:	003f6706 	br	b074 <__alt_exception_stack_pointer+0xf800b074>
    b2d8:	d9402017 	ldw	r5,128(sp)
    b2dc:	d9002117 	ldw	r4,132(sp)
    b2e0:	d9801a04 	addi	r6,sp,104
    b2e4:	000a2440 	call	a244 <__sprint_r.part.0>
    b2e8:	103f531e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b2ec:	d811883a 	mov	r8,sp
    b2f0:	003cd906 	br	a658 <__alt_exception_stack_pointer+0xf800a658>
    b2f4:	10803fcc 	andi	r2,r2,255
    b2f8:	1080201c 	xori	r2,r2,128
    b2fc:	10bfe004 	addi	r2,r2,-128
    b300:	00c00c04 	movi	r3,48
    b304:	10ffe926 	beq	r2,r3,b2ac <__alt_exception_stack_pointer+0xf800b2ac>
    b308:	b8ffffc5 	stb	r3,-1(r23)
    b30c:	d8c01e17 	ldw	r3,120(sp)
    b310:	b8bfffc4 	addi	r2,r23,-1
    b314:	102f883a 	mov	r23,r2
    b318:	18a9c83a 	sub	r20,r3,r2
    b31c:	003d1106 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b320:	d9402017 	ldw	r5,128(sp)
    b324:	d9002117 	ldw	r4,132(sp)
    b328:	d9801a04 	addi	r6,sp,104
    b32c:	d8c02a15 	stw	r3,168(sp)
    b330:	d9c02b15 	stw	r7,172(sp)
    b334:	000a2440 	call	a244 <__sprint_r.part.0>
    b338:	d8c02a17 	ldw	r3,168(sp)
    b33c:	d9c02b17 	ldw	r7,172(sp)
    b340:	103f3d1e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b344:	d9001b17 	ldw	r4,108(sp)
    b348:	d8801c17 	ldw	r2,112(sp)
    b34c:	d811883a 	mov	r8,sp
    b350:	21400044 	addi	r5,r4,1
    b354:	003d4406 	br	a868 <__alt_exception_stack_pointer+0xf800a868>
    b358:	d9402017 	ldw	r5,128(sp)
    b35c:	d9002117 	ldw	r4,132(sp)
    b360:	d9801a04 	addi	r6,sp,104
    b364:	d8c02a15 	stw	r3,168(sp)
    b368:	000a2440 	call	a244 <__sprint_r.part.0>
    b36c:	d8c02a17 	ldw	r3,168(sp)
    b370:	103f311e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b374:	d9001b17 	ldw	r4,108(sp)
    b378:	d8801c17 	ldw	r2,112(sp)
    b37c:	d811883a 	mov	r8,sp
    b380:	21400044 	addi	r5,r4,1
    b384:	003ef406 	br	af58 <__alt_exception_stack_pointer+0xf800af58>
    b388:	1000bd1e 	bne	r2,zero,b680 <___vfiprintf_internal_r+0x1328>
    b38c:	01400044 	movi	r5,1
    b390:	0009883a 	mov	r4,zero
    b394:	d811883a 	mov	r8,sp
    b398:	003ef106 	br	af60 <__alt_exception_stack_pointer+0xf800af60>
    b39c:	d9402017 	ldw	r5,128(sp)
    b3a0:	d9002117 	ldw	r4,132(sp)
    b3a4:	d9801a04 	addi	r6,sp,104
    b3a8:	000a2440 	call	a244 <__sprint_r.part.0>
    b3ac:	103f221e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b3b0:	d9401b17 	ldw	r5,108(sp)
    b3b4:	d8801c17 	ldw	r2,112(sp)
    b3b8:	d811883a 	mov	r8,sp
    b3bc:	29400044 	addi	r5,r5,1
    b3c0:	003d6206 	br	a94c <__alt_exception_stack_pointer+0xf800a94c>
    b3c4:	01400074 	movhi	r5,1
    b3c8:	294b6e04 	addi	r5,r5,11704
    b3cc:	d9402615 	stw	r5,152(sp)
    b3d0:	d8c02215 	stw	r3,136(sp)
    b3d4:	1023883a 	mov	r17,r2
    b3d8:	9d04b03a 	or	r2,r19,r20
    b3dc:	103fa51e 	bne	r2,zero,b274 <__alt_exception_stack_pointer+0xf800b274>
    b3e0:	002b883a 	mov	r21,zero
    b3e4:	00800084 	movi	r2,2
    b3e8:	003e4a06 	br	ad14 <__alt_exception_stack_pointer+0xf800ad14>
    b3ec:	01400074 	movhi	r5,1
    b3f0:	294b6e04 	addi	r5,r5,11704
    b3f4:	002b883a 	mov	r21,zero
    b3f8:	d9402615 	stw	r5,152(sp)
    b3fc:	003f9e06 	br	b278 <__alt_exception_stack_pointer+0xf800b278>
    b400:	d9402217 	ldw	r5,136(sp)
    b404:	d8001d85 	stb	zero,118(sp)
    b408:	0029883a 	mov	r20,zero
    b40c:	28800104 	addi	r2,r5,4
    b410:	2cc00017 	ldw	r19,0(r5)
    b414:	803e3a16 	blt	r16,zero,ad00 <__alt_exception_stack_pointer+0xf800ad00>
    b418:	00ffdfc4 	movi	r3,-129
    b41c:	d8802215 	stw	r2,136(sp)
    b420:	88e2703a 	and	r17,r17,r3
    b424:	002b883a 	mov	r21,zero
    b428:	983e9b26 	beq	r19,zero,ae98 <__alt_exception_stack_pointer+0xf800ae98>
    b42c:	00800244 	movi	r2,9
    b430:	14fdc936 	bltu	r2,r19,ab58 <__alt_exception_stack_pointer+0xf800ab58>
    b434:	003e9a06 	br	aea0 <__alt_exception_stack_pointer+0xf800aea0>
    b438:	00800c04 	movi	r2,48
    b43c:	d8c01d45 	stb	r3,117(sp)
    b440:	d8801d05 	stb	r2,116(sp)
    b444:	d8001d85 	stb	zero,118(sp)
    b448:	88c00094 	ori	r3,r17,2
    b44c:	80009c16 	blt	r16,zero,b6c0 <___vfiprintf_internal_r+0x1368>
    b450:	00bfdfc4 	movi	r2,-129
    b454:	88a2703a 	and	r17,r17,r2
    b458:	8c400094 	ori	r17,r17,2
    b45c:	002b883a 	mov	r21,zero
    b460:	003f8506 	br	b278 <__alt_exception_stack_pointer+0xf800b278>
    b464:	b029883a 	mov	r20,r22
    b468:	003c0b06 	br	a498 <__alt_exception_stack_pointer+0xf800a498>
    b46c:	04e7c83a 	sub	r19,zero,r19
    b470:	05400b44 	movi	r21,45
    b474:	9804c03a 	cmpne	r2,r19,zero
    b478:	0529c83a 	sub	r20,zero,r20
    b47c:	dd401d85 	stb	r21,118(sp)
    b480:	a0a9c83a 	sub	r20,r20,r2
    b484:	80009716 	blt	r16,zero,b6e4 <___vfiprintf_internal_r+0x138c>
    b488:	00bfdfc4 	movi	r2,-129
    b48c:	88a2703a 	and	r17,r17,r2
    b490:	003db006 	br	ab54 <__alt_exception_stack_pointer+0xf800ab54>
    b494:	b0c00007 	ldb	r3,0(r22)
    b498:	003c0c06 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    b49c:	8880100c 	andi	r2,r17,64
    b4a0:	d8001d85 	stb	zero,118(sp)
    b4a4:	1000461e 	bne	r2,zero,b5c0 <___vfiprintf_internal_r+0x1268>
    b4a8:	d9002217 	ldw	r4,136(sp)
    b4ac:	0029883a 	mov	r20,zero
    b4b0:	20800104 	addi	r2,r4,4
    b4b4:	24c00017 	ldw	r19,0(r4)
    b4b8:	803df80e 	bge	r16,zero,ac9c <__alt_exception_stack_pointer+0xf800ac9c>
    b4bc:	9d06b03a 	or	r3,r19,r20
    b4c0:	d8802215 	stw	r2,136(sp)
    b4c4:	183d5e1e 	bne	r3,zero,aa40 <__alt_exception_stack_pointer+0xf800aa40>
    b4c8:	002b883a 	mov	r21,zero
    b4cc:	0005883a 	mov	r2,zero
    b4d0:	003e1006 	br	ad14 <__alt_exception_stack_pointer+0xf800ad14>
    b4d4:	8880040c 	andi	r2,r17,16
    b4d8:	1000321e 	bne	r2,zero,b5a4 <___vfiprintf_internal_r+0x124c>
    b4dc:	8c40100c 	andi	r17,r17,64
    b4e0:	88008d26 	beq	r17,zero,b718 <___vfiprintf_internal_r+0x13c0>
    b4e4:	d9402217 	ldw	r5,136(sp)
    b4e8:	d8c02417 	ldw	r3,144(sp)
    b4ec:	28800017 	ldw	r2,0(r5)
    b4f0:	29400104 	addi	r5,r5,4
    b4f4:	d9402215 	stw	r5,136(sp)
    b4f8:	10c0000d 	sth	r3,0(r2)
    b4fc:	003bca06 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    b500:	8880100c 	andi	r2,r17,64
    b504:	10003a26 	beq	r2,zero,b5f0 <___vfiprintf_internal_r+0x1298>
    b508:	d8802217 	ldw	r2,136(sp)
    b50c:	14c0000f 	ldh	r19,0(r2)
    b510:	10800104 	addi	r2,r2,4
    b514:	d8802215 	stw	r2,136(sp)
    b518:	9829d7fa 	srai	r20,r19,31
    b51c:	a005883a 	mov	r2,r20
    b520:	003d8506 	br	ab38 <__alt_exception_stack_pointer+0xf800ab38>
    b524:	8880100c 	andi	r2,r17,64
    b528:	10002b26 	beq	r2,zero,b5d8 <___vfiprintf_internal_r+0x1280>
    b52c:	d8802217 	ldw	r2,136(sp)
    b530:	0029883a 	mov	r20,zero
    b534:	14c0000b 	ldhu	r19,0(r2)
    b538:	10800104 	addi	r2,r2,4
    b53c:	d8802215 	stw	r2,136(sp)
    b540:	003d5d06 	br	aab8 <__alt_exception_stack_pointer+0xf800aab8>
    b544:	d9402017 	ldw	r5,128(sp)
    b548:	d9002117 	ldw	r4,132(sp)
    b54c:	d9801a04 	addi	r6,sp,104
    b550:	d8c02a15 	stw	r3,168(sp)
    b554:	d9c02b15 	stw	r7,172(sp)
    b558:	000a2440 	call	a244 <__sprint_r.part.0>
    b55c:	d8c02a17 	ldw	r3,168(sp)
    b560:	d9c02b17 	ldw	r7,172(sp)
    b564:	103eb41e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b568:	d9001b17 	ldw	r4,108(sp)
    b56c:	d8801c17 	ldw	r2,112(sp)
    b570:	d811883a 	mov	r8,sp
    b574:	21400044 	addi	r5,r4,1
    b578:	003e6706 	br	af18 <__alt_exception_stack_pointer+0xf800af18>
    b57c:	00bfffc4 	movi	r2,-1
    b580:	003c4a06 	br	a6ac <__alt_exception_stack_pointer+0xf800a6ac>
    b584:	9805883a 	mov	r2,r19
    b588:	003ee806 	br	b12c <__alt_exception_stack_pointer+0xf800b12c>
    b58c:	d8c02217 	ldw	r3,136(sp)
    b590:	0029883a 	mov	r20,zero
    b594:	18800104 	addi	r2,r3,4
    b598:	1cc0000b 	ldhu	r19,0(r3)
    b59c:	803f9e0e 	bge	r16,zero,b418 <__alt_exception_stack_pointer+0xf800b418>
    b5a0:	003dd706 	br	ad00 <__alt_exception_stack_pointer+0xf800ad00>
    b5a4:	d8c02217 	ldw	r3,136(sp)
    b5a8:	d9002417 	ldw	r4,144(sp)
    b5ac:	18800017 	ldw	r2,0(r3)
    b5b0:	18c00104 	addi	r3,r3,4
    b5b4:	d8c02215 	stw	r3,136(sp)
    b5b8:	11000015 	stw	r4,0(r2)
    b5bc:	003b9a06 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    b5c0:	d8c02217 	ldw	r3,136(sp)
    b5c4:	0029883a 	mov	r20,zero
    b5c8:	18800104 	addi	r2,r3,4
    b5cc:	1cc0000b 	ldhu	r19,0(r3)
    b5d0:	803db20e 	bge	r16,zero,ac9c <__alt_exception_stack_pointer+0xf800ac9c>
    b5d4:	003fb906 	br	b4bc <__alt_exception_stack_pointer+0xf800b4bc>
    b5d8:	d9002217 	ldw	r4,136(sp)
    b5dc:	0029883a 	mov	r20,zero
    b5e0:	24c00017 	ldw	r19,0(r4)
    b5e4:	21000104 	addi	r4,r4,4
    b5e8:	d9002215 	stw	r4,136(sp)
    b5ec:	003d3206 	br	aab8 <__alt_exception_stack_pointer+0xf800aab8>
    b5f0:	d8c02217 	ldw	r3,136(sp)
    b5f4:	1cc00017 	ldw	r19,0(r3)
    b5f8:	18c00104 	addi	r3,r3,4
    b5fc:	d8c02215 	stw	r3,136(sp)
    b600:	9829d7fa 	srai	r20,r19,31
    b604:	a005883a 	mov	r2,r20
    b608:	003d4b06 	br	ab38 <__alt_exception_stack_pointer+0xf800ab38>
    b60c:	0009883a 	mov	r4,zero
    b610:	01400044 	movi	r5,1
    b614:	d811883a 	mov	r8,sp
    b618:	003e4f06 	br	af58 <__alt_exception_stack_pointer+0xf800af58>
    b61c:	d8c02215 	stw	r3,136(sp)
    b620:	002b883a 	mov	r21,zero
    b624:	003db806 	br	ad08 <__alt_exception_stack_pointer+0xf800ad08>
    b628:	d811883a 	mov	r8,sp
    b62c:	003e9606 	br	b088 <__alt_exception_stack_pointer+0xf800b088>
    b630:	01000074 	movhi	r4,1
    b634:	210bce04 	addi	r4,r4,12088
    b638:	d9002315 	stw	r4,140(sp)
    b63c:	003e6306 	br	afcc <__alt_exception_stack_pointer+0xf800afcc>
    b640:	b0c00043 	ldbu	r3,1(r22)
    b644:	8c400814 	ori	r17,r17,32
    b648:	b5800044 	addi	r22,r22,1
    b64c:	18c03fcc 	andi	r3,r3,255
    b650:	18c0201c 	xori	r3,r3,128
    b654:	18ffe004 	addi	r3,r3,-128
    b658:	003b9c06 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    b65c:	b809883a 	mov	r4,r23
    b660:	da002a15 	stw	r8,168(sp)
    b664:	00033200 	call	3320 <strlen>
    b668:	1029883a 	mov	r20,r2
    b66c:	dd401d83 	ldbu	r21,118(sp)
    b670:	df002215 	stw	fp,136(sp)
    b674:	0021883a 	mov	r16,zero
    b678:	da002a17 	ldw	r8,168(sp)
    b67c:	003c3906 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b680:	d9402017 	ldw	r5,128(sp)
    b684:	d9002117 	ldw	r4,132(sp)
    b688:	d9801a04 	addi	r6,sp,104
    b68c:	000a2440 	call	a244 <__sprint_r.part.0>
    b690:	103e691e 	bne	r2,zero,b038 <__alt_exception_stack_pointer+0xf800b038>
    b694:	d9001b17 	ldw	r4,108(sp)
    b698:	d8801c17 	ldw	r2,112(sp)
    b69c:	d811883a 	mov	r8,sp
    b6a0:	21400044 	addi	r5,r4,1
    b6a4:	003e2e06 	br	af60 <__alt_exception_stack_pointer+0xf800af60>
    b6a8:	01000074 	movhi	r4,1
    b6ac:	210bd204 	addi	r4,r4,12104
    b6b0:	d9002315 	stw	r4,140(sp)
    b6b4:	d9001b17 	ldw	r4,108(sp)
    b6b8:	21000044 	addi	r4,r4,1
    b6bc:	003c5e06 	br	a838 <__alt_exception_stack_pointer+0xf800a838>
    b6c0:	002b883a 	mov	r21,zero
    b6c4:	00800084 	movi	r2,2
    b6c8:	10803fcc 	andi	r2,r2,255
    b6cc:	01000044 	movi	r4,1
    b6d0:	11002b26 	beq	r2,r4,b780 <___vfiprintf_internal_r+0x1428>
    b6d4:	01000084 	movi	r4,2
    b6d8:	11002b1e 	bne	r2,r4,b788 <___vfiprintf_internal_r+0x1430>
    b6dc:	1823883a 	mov	r17,r3
    b6e0:	003ee506 	br	b278 <__alt_exception_stack_pointer+0xf800b278>
    b6e4:	8807883a 	mov	r3,r17
    b6e8:	00800044 	movi	r2,1
    b6ec:	003ff606 	br	b6c8 <__alt_exception_stack_pointer+0xf800b6c8>
    b6f0:	00800184 	movi	r2,6
    b6f4:	1400012e 	bgeu	r2,r16,b6fc <___vfiprintf_internal_r+0x13a4>
    b6f8:	1021883a 	mov	r16,r2
    b6fc:	8029883a 	mov	r20,r16
    b700:	8027883a 	mov	r19,r16
    b704:	80002216 	blt	r16,zero,b790 <___vfiprintf_internal_r+0x1438>
    b708:	05c00074 	movhi	r23,1
    b70c:	df002215 	stw	fp,136(sp)
    b710:	bdcb7304 	addi	r23,r23,11724
    b714:	003cfb06 	br	ab04 <__alt_exception_stack_pointer+0xf800ab04>
    b718:	d9002217 	ldw	r4,136(sp)
    b71c:	d9402417 	ldw	r5,144(sp)
    b720:	20800017 	ldw	r2,0(r4)
    b724:	21000104 	addi	r4,r4,4
    b728:	d9002215 	stw	r4,136(sp)
    b72c:	11400015 	stw	r5,0(r2)
    b730:	003b3d06 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    b734:	01400074 	movhi	r5,1
    b738:	294bd204 	addi	r5,r5,12104
    b73c:	d9402315 	stw	r5,140(sp)
    b740:	d9401b17 	ldw	r5,108(sp)
    b744:	29400044 	addi	r5,r5,1
    b748:	003e6d06 	br	b100 <__alt_exception_stack_pointer+0xf800b100>
    b74c:	8029883a 	mov	r20,r16
    b750:	dd401d83 	ldbu	r21,118(sp)
    b754:	df002215 	stw	fp,136(sp)
    b758:	0021883a 	mov	r16,zero
    b75c:	003c0106 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b760:	00c00074 	movhi	r3,1
    b764:	18cbce04 	addi	r3,r3,12088
    b768:	d8c02315 	stw	r3,140(sp)
    b76c:	280d883a 	mov	r6,r5
    b770:	003c6906 	br	a918 <__alt_exception_stack_pointer+0xf800a918>
    b774:	802d883a 	mov	r22,r16
    b778:	0021883a 	mov	r16,zero
    b77c:	003b5406 	br	a4d0 <__alt_exception_stack_pointer+0xf800a4d0>
    b780:	1823883a 	mov	r17,r3
    b784:	003cf306 	br	ab54 <__alt_exception_stack_pointer+0xf800ab54>
    b788:	1823883a 	mov	r17,r3
    b78c:	003cad06 	br	aa44 <__alt_exception_stack_pointer+0xf800aa44>
    b790:	0027883a 	mov	r19,zero
    b794:	003fdc06 	br	b708 <__alt_exception_stack_pointer+0xf800b708>
    b798:	d9402217 	ldw	r5,136(sp)
    b79c:	8005883a 	mov	r2,r16
    b7a0:	b0c00043 	ldbu	r3,1(r22)
    b7a4:	2c000017 	ldw	r16,0(r5)
    b7a8:	29000104 	addi	r4,r5,4
    b7ac:	d9002215 	stw	r4,136(sp)
    b7b0:	102d883a 	mov	r22,r2
    b7b4:	803fa50e 	bge	r16,zero,b64c <__alt_exception_stack_pointer+0xf800b64c>
    b7b8:	18c03fcc 	andi	r3,r3,255
    b7bc:	18c0201c 	xori	r3,r3,128
    b7c0:	043fffc4 	movi	r16,-1
    b7c4:	18ffe004 	addi	r3,r3,-128
    b7c8:	003b4006 	br	a4cc <__alt_exception_stack_pointer+0xf800a4cc>
    b7cc:	d9402303 	ldbu	r5,140(sp)
    b7d0:	d9401d85 	stb	r5,118(sp)
    b7d4:	003cae06 	br	aa90 <__alt_exception_stack_pointer+0xf800aa90>
    b7d8:	d8c02303 	ldbu	r3,140(sp)
    b7dc:	d8c01d85 	stb	r3,118(sp)
    b7e0:	003d1406 	br	ac34 <__alt_exception_stack_pointer+0xf800ac34>
    b7e4:	d8c02303 	ldbu	r3,140(sp)
    b7e8:	d8c01d85 	stb	r3,118(sp)
    b7ec:	003cca06 	br	ab18 <__alt_exception_stack_pointer+0xf800ab18>
    b7f0:	8880004c 	andi	r2,r17,1
    b7f4:	002b883a 	mov	r21,zero
    b7f8:	10000526 	beq	r2,zero,b810 <___vfiprintf_internal_r+0x14b8>
    b7fc:	00800c04 	movi	r2,48
    b800:	d88019c5 	stb	r2,103(sp)
    b804:	dd002817 	ldw	r20,160(sp)
    b808:	ddc019c4 	addi	r23,sp,103
    b80c:	003bd506 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b810:	0029883a 	mov	r20,zero
    b814:	ddc01a04 	addi	r23,sp,104
    b818:	003bd206 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    b81c:	d9002303 	ldbu	r4,140(sp)
    b820:	d9001d85 	stb	r4,118(sp)
    b824:	003da606 	br	aec0 <__alt_exception_stack_pointer+0xf800aec0>
    b828:	d8c02303 	ldbu	r3,140(sp)
    b82c:	d8c01d85 	stb	r3,118(sp)
    b830:	003c7606 	br	aa0c <__alt_exception_stack_pointer+0xf800aa0c>
    b834:	d8c02303 	ldbu	r3,140(sp)
    b838:	d8c01d85 	stb	r3,118(sp)
    b83c:	003c6506 	br	a9d4 <__alt_exception_stack_pointer+0xf800a9d4>
    b840:	d9002303 	ldbu	r4,140(sp)
    b844:	d9001d85 	stb	r4,118(sp)
    b848:	003d3d06 	br	ad40 <__alt_exception_stack_pointer+0xf800ad40>
    b84c:	d8c02303 	ldbu	r3,140(sp)
    b850:	d8c01d85 	stb	r3,118(sp)
    b854:	003d1d06 	br	accc <__alt_exception_stack_pointer+0xf800accc>
    b858:	d8c02303 	ldbu	r3,140(sp)
    b85c:	d8c01d85 	stb	r3,118(sp)
    b860:	003d0306 	br	ac70 <__alt_exception_stack_pointer+0xf800ac70>

0000b864 <__vfiprintf_internal>:
    b864:	00800074 	movhi	r2,1
    b868:	10930404 	addi	r2,r2,19472
    b86c:	300f883a 	mov	r7,r6
    b870:	280d883a 	mov	r6,r5
    b874:	200b883a 	mov	r5,r4
    b878:	11000017 	ldw	r4,0(r2)
    b87c:	000a3581 	jmpi	a358 <___vfiprintf_internal_r>

0000b880 <__sbprintf>:
    b880:	2880030b 	ldhu	r2,12(r5)
    b884:	2ac01917 	ldw	r11,100(r5)
    b888:	2a80038b 	ldhu	r10,14(r5)
    b88c:	2a400717 	ldw	r9,28(r5)
    b890:	2a000917 	ldw	r8,36(r5)
    b894:	defee204 	addi	sp,sp,-1144
    b898:	00c10004 	movi	r3,1024
    b89c:	dc011a15 	stw	r16,1128(sp)
    b8a0:	10bfff4c 	andi	r2,r2,65533
    b8a4:	2821883a 	mov	r16,r5
    b8a8:	d8cb883a 	add	r5,sp,r3
    b8ac:	dc811c15 	stw	r18,1136(sp)
    b8b0:	dc411b15 	stw	r17,1132(sp)
    b8b4:	dfc11d15 	stw	ra,1140(sp)
    b8b8:	2025883a 	mov	r18,r4
    b8bc:	d881030d 	sth	r2,1036(sp)
    b8c0:	dac11915 	stw	r11,1124(sp)
    b8c4:	da81038d 	sth	r10,1038(sp)
    b8c8:	da410715 	stw	r9,1052(sp)
    b8cc:	da010915 	stw	r8,1060(sp)
    b8d0:	dec10015 	stw	sp,1024(sp)
    b8d4:	dec10415 	stw	sp,1040(sp)
    b8d8:	d8c10215 	stw	r3,1032(sp)
    b8dc:	d8c10515 	stw	r3,1044(sp)
    b8e0:	d8010615 	stw	zero,1048(sp)
    b8e4:	000a3580 	call	a358 <___vfiprintf_internal_r>
    b8e8:	1023883a 	mov	r17,r2
    b8ec:	10000416 	blt	r2,zero,b900 <__sbprintf+0x80>
    b8f0:	d9410004 	addi	r5,sp,1024
    b8f4:	9009883a 	mov	r4,r18
    b8f8:	00073940 	call	7394 <_fflush_r>
    b8fc:	10000d1e 	bne	r2,zero,b934 <__sbprintf+0xb4>
    b900:	d881030b 	ldhu	r2,1036(sp)
    b904:	1080100c 	andi	r2,r2,64
    b908:	10000326 	beq	r2,zero,b918 <__sbprintf+0x98>
    b90c:	8080030b 	ldhu	r2,12(r16)
    b910:	10801014 	ori	r2,r2,64
    b914:	8080030d 	sth	r2,12(r16)
    b918:	8805883a 	mov	r2,r17
    b91c:	dfc11d17 	ldw	ra,1140(sp)
    b920:	dc811c17 	ldw	r18,1136(sp)
    b924:	dc411b17 	ldw	r17,1132(sp)
    b928:	dc011a17 	ldw	r16,1128(sp)
    b92c:	dec11e04 	addi	sp,sp,1144
    b930:	f800283a 	ret
    b934:	047fffc4 	movi	r17,-1
    b938:	003ff106 	br	b900 <__alt_exception_stack_pointer+0xf800b900>

0000b93c <_write_r>:
    b93c:	defffd04 	addi	sp,sp,-12
    b940:	2805883a 	mov	r2,r5
    b944:	dc000015 	stw	r16,0(sp)
    b948:	04000074 	movhi	r16,1
    b94c:	dc400115 	stw	r17,4(sp)
    b950:	300b883a 	mov	r5,r6
    b954:	8419fc04 	addi	r16,r16,26608
    b958:	2023883a 	mov	r17,r4
    b95c:	380d883a 	mov	r6,r7
    b960:	1009883a 	mov	r4,r2
    b964:	dfc00215 	stw	ra,8(sp)
    b968:	80000015 	stw	zero,0(r16)
    b96c:	00102400 	call	10240 <write>
    b970:	00ffffc4 	movi	r3,-1
    b974:	10c00526 	beq	r2,r3,b98c <_write_r+0x50>
    b978:	dfc00217 	ldw	ra,8(sp)
    b97c:	dc400117 	ldw	r17,4(sp)
    b980:	dc000017 	ldw	r16,0(sp)
    b984:	dec00304 	addi	sp,sp,12
    b988:	f800283a 	ret
    b98c:	80c00017 	ldw	r3,0(r16)
    b990:	183ff926 	beq	r3,zero,b978 <__alt_exception_stack_pointer+0xf800b978>
    b994:	88c00015 	stw	r3,0(r17)
    b998:	003ff706 	br	b978 <__alt_exception_stack_pointer+0xf800b978>

0000b99c <_close_r>:
    b99c:	defffd04 	addi	sp,sp,-12
    b9a0:	dc000015 	stw	r16,0(sp)
    b9a4:	04000074 	movhi	r16,1
    b9a8:	dc400115 	stw	r17,4(sp)
    b9ac:	8419fc04 	addi	r16,r16,26608
    b9b0:	2023883a 	mov	r17,r4
    b9b4:	2809883a 	mov	r4,r5
    b9b8:	dfc00215 	stw	ra,8(sp)
    b9bc:	80000015 	stw	zero,0(r16)
    b9c0:	000f9040 	call	f904 <close>
    b9c4:	00ffffc4 	movi	r3,-1
    b9c8:	10c00526 	beq	r2,r3,b9e0 <_close_r+0x44>
    b9cc:	dfc00217 	ldw	ra,8(sp)
    b9d0:	dc400117 	ldw	r17,4(sp)
    b9d4:	dc000017 	ldw	r16,0(sp)
    b9d8:	dec00304 	addi	sp,sp,12
    b9dc:	f800283a 	ret
    b9e0:	80c00017 	ldw	r3,0(r16)
    b9e4:	183ff926 	beq	r3,zero,b9cc <__alt_exception_stack_pointer+0xf800b9cc>
    b9e8:	88c00015 	stw	r3,0(r17)
    b9ec:	003ff706 	br	b9cc <__alt_exception_stack_pointer+0xf800b9cc>

0000b9f0 <_calloc_r>:
    b9f0:	defffe04 	addi	sp,sp,-8
    b9f4:	2805883a 	mov	r2,r5
    b9f8:	dc000015 	stw	r16,0(sp)
    b9fc:	300b883a 	mov	r5,r6
    ba00:	2021883a 	mov	r16,r4
    ba04:	1009883a 	mov	r4,r2
    ba08:	dfc00115 	stw	ra,4(sp)
    ba0c:	000cffc0 	call	cffc <__mulsi3>
    ba10:	100b883a 	mov	r5,r2
    ba14:	8009883a 	mov	r4,r16
    ba18:	00029800 	call	2980 <_malloc_r>
    ba1c:	10002926 	beq	r2,zero,bac4 <_calloc_r+0xd4>
    ba20:	11bfff17 	ldw	r6,-4(r2)
    ba24:	1021883a 	mov	r16,r2
    ba28:	00bfff04 	movi	r2,-4
    ba2c:	308c703a 	and	r6,r6,r2
    ba30:	00c00904 	movi	r3,36
    ba34:	308d883a 	add	r6,r6,r2
    ba38:	19801636 	bltu	r3,r6,ba94 <_calloc_r+0xa4>
    ba3c:	008004c4 	movi	r2,19
    ba40:	11800b2e 	bgeu	r2,r6,ba70 <_calloc_r+0x80>
    ba44:	80000015 	stw	zero,0(r16)
    ba48:	80000115 	stw	zero,4(r16)
    ba4c:	008006c4 	movi	r2,27
    ba50:	11801a2e 	bgeu	r2,r6,babc <_calloc_r+0xcc>
    ba54:	80000215 	stw	zero,8(r16)
    ba58:	80000315 	stw	zero,12(r16)
    ba5c:	30c0151e 	bne	r6,r3,bab4 <_calloc_r+0xc4>
    ba60:	80000415 	stw	zero,16(r16)
    ba64:	80800604 	addi	r2,r16,24
    ba68:	80000515 	stw	zero,20(r16)
    ba6c:	00000106 	br	ba74 <_calloc_r+0x84>
    ba70:	8005883a 	mov	r2,r16
    ba74:	10000015 	stw	zero,0(r2)
    ba78:	10000115 	stw	zero,4(r2)
    ba7c:	10000215 	stw	zero,8(r2)
    ba80:	8005883a 	mov	r2,r16
    ba84:	dfc00117 	ldw	ra,4(sp)
    ba88:	dc000017 	ldw	r16,0(sp)
    ba8c:	dec00204 	addi	sp,sp,8
    ba90:	f800283a 	ret
    ba94:	000b883a 	mov	r5,zero
    ba98:	8009883a 	mov	r4,r16
    ba9c:	00088740 	call	8874 <memset>
    baa0:	8005883a 	mov	r2,r16
    baa4:	dfc00117 	ldw	ra,4(sp)
    baa8:	dc000017 	ldw	r16,0(sp)
    baac:	dec00204 	addi	sp,sp,8
    bab0:	f800283a 	ret
    bab4:	80800404 	addi	r2,r16,16
    bab8:	003fee06 	br	ba74 <__alt_exception_stack_pointer+0xf800ba74>
    babc:	80800204 	addi	r2,r16,8
    bac0:	003fec06 	br	ba74 <__alt_exception_stack_pointer+0xf800ba74>
    bac4:	0005883a 	mov	r2,zero
    bac8:	003fee06 	br	ba84 <__alt_exception_stack_pointer+0xf800ba84>

0000bacc <_fclose_r>:
    bacc:	28003926 	beq	r5,zero,bbb4 <_fclose_r+0xe8>
    bad0:	defffc04 	addi	sp,sp,-16
    bad4:	dc400115 	stw	r17,4(sp)
    bad8:	dc000015 	stw	r16,0(sp)
    badc:	dfc00315 	stw	ra,12(sp)
    bae0:	dc800215 	stw	r18,8(sp)
    bae4:	2023883a 	mov	r17,r4
    bae8:	2821883a 	mov	r16,r5
    baec:	20000226 	beq	r4,zero,baf8 <_fclose_r+0x2c>
    baf0:	20800e17 	ldw	r2,56(r4)
    baf4:	10002726 	beq	r2,zero,bb94 <_fclose_r+0xc8>
    baf8:	8080030f 	ldh	r2,12(r16)
    bafc:	1000071e 	bne	r2,zero,bb1c <_fclose_r+0x50>
    bb00:	0005883a 	mov	r2,zero
    bb04:	dfc00317 	ldw	ra,12(sp)
    bb08:	dc800217 	ldw	r18,8(sp)
    bb0c:	dc400117 	ldw	r17,4(sp)
    bb10:	dc000017 	ldw	r16,0(sp)
    bb14:	dec00404 	addi	sp,sp,16
    bb18:	f800283a 	ret
    bb1c:	800b883a 	mov	r5,r16
    bb20:	8809883a 	mov	r4,r17
    bb24:	00071780 	call	7178 <__sflush_r>
    bb28:	1025883a 	mov	r18,r2
    bb2c:	80800b17 	ldw	r2,44(r16)
    bb30:	10000426 	beq	r2,zero,bb44 <_fclose_r+0x78>
    bb34:	81400717 	ldw	r5,28(r16)
    bb38:	8809883a 	mov	r4,r17
    bb3c:	103ee83a 	callr	r2
    bb40:	10001616 	blt	r2,zero,bb9c <_fclose_r+0xd0>
    bb44:	8080030b 	ldhu	r2,12(r16)
    bb48:	1080200c 	andi	r2,r2,128
    bb4c:	1000151e 	bne	r2,zero,bba4 <_fclose_r+0xd8>
    bb50:	81400c17 	ldw	r5,48(r16)
    bb54:	28000526 	beq	r5,zero,bb6c <_fclose_r+0xa0>
    bb58:	80801004 	addi	r2,r16,64
    bb5c:	28800226 	beq	r5,r2,bb68 <_fclose_r+0x9c>
    bb60:	8809883a 	mov	r4,r17
    bb64:	00078f40 	call	78f4 <_free_r>
    bb68:	80000c15 	stw	zero,48(r16)
    bb6c:	81401117 	ldw	r5,68(r16)
    bb70:	28000326 	beq	r5,zero,bb80 <_fclose_r+0xb4>
    bb74:	8809883a 	mov	r4,r17
    bb78:	00078f40 	call	78f4 <_free_r>
    bb7c:	80001115 	stw	zero,68(r16)
    bb80:	00077900 	call	7790 <__sfp_lock_acquire>
    bb84:	8000030d 	sth	zero,12(r16)
    bb88:	00077940 	call	7794 <__sfp_lock_release>
    bb8c:	9005883a 	mov	r2,r18
    bb90:	003fdc06 	br	bb04 <__alt_exception_stack_pointer+0xf800bb04>
    bb94:	00077800 	call	7780 <__sinit>
    bb98:	003fd706 	br	baf8 <__alt_exception_stack_pointer+0xf800baf8>
    bb9c:	04bfffc4 	movi	r18,-1
    bba0:	003fe806 	br	bb44 <__alt_exception_stack_pointer+0xf800bb44>
    bba4:	81400417 	ldw	r5,16(r16)
    bba8:	8809883a 	mov	r4,r17
    bbac:	00078f40 	call	78f4 <_free_r>
    bbb0:	003fe706 	br	bb50 <__alt_exception_stack_pointer+0xf800bb50>
    bbb4:	0005883a 	mov	r2,zero
    bbb8:	f800283a 	ret

0000bbbc <fclose>:
    bbbc:	00800074 	movhi	r2,1
    bbc0:	10930404 	addi	r2,r2,19472
    bbc4:	200b883a 	mov	r5,r4
    bbc8:	11000017 	ldw	r4,0(r2)
    bbcc:	000bacc1 	jmpi	bacc <_fclose_r>

0000bbd0 <__fputwc>:
    bbd0:	defff804 	addi	sp,sp,-32
    bbd4:	dcc00415 	stw	r19,16(sp)
    bbd8:	dc800315 	stw	r18,12(sp)
    bbdc:	dc000115 	stw	r16,4(sp)
    bbe0:	dfc00715 	stw	ra,28(sp)
    bbe4:	dd400615 	stw	r21,24(sp)
    bbe8:	dd000515 	stw	r20,20(sp)
    bbec:	dc400215 	stw	r17,8(sp)
    bbf0:	2027883a 	mov	r19,r4
    bbf4:	2825883a 	mov	r18,r5
    bbf8:	3021883a 	mov	r16,r6
    bbfc:	00082dc0 	call	82dc <__locale_mb_cur_max>
    bc00:	00c00044 	movi	r3,1
    bc04:	10c03e26 	beq	r2,r3,bd00 <__fputwc+0x130>
    bc08:	81c01704 	addi	r7,r16,92
    bc0c:	900d883a 	mov	r6,r18
    bc10:	d80b883a 	mov	r5,sp
    bc14:	9809883a 	mov	r4,r19
    bc18:	000c0a00 	call	c0a0 <_wcrtomb_r>
    bc1c:	1029883a 	mov	r20,r2
    bc20:	00bfffc4 	movi	r2,-1
    bc24:	a0802026 	beq	r20,r2,bca8 <__fputwc+0xd8>
    bc28:	d9400003 	ldbu	r5,0(sp)
    bc2c:	a0001c26 	beq	r20,zero,bca0 <__fputwc+0xd0>
    bc30:	0023883a 	mov	r17,zero
    bc34:	05400284 	movi	r21,10
    bc38:	00000906 	br	bc60 <__fputwc+0x90>
    bc3c:	80800017 	ldw	r2,0(r16)
    bc40:	11400005 	stb	r5,0(r2)
    bc44:	80c00017 	ldw	r3,0(r16)
    bc48:	18c00044 	addi	r3,r3,1
    bc4c:	80c00015 	stw	r3,0(r16)
    bc50:	8c400044 	addi	r17,r17,1
    bc54:	dc45883a 	add	r2,sp,r17
    bc58:	8d00112e 	bgeu	r17,r20,bca0 <__fputwc+0xd0>
    bc5c:	11400003 	ldbu	r5,0(r2)
    bc60:	80c00217 	ldw	r3,8(r16)
    bc64:	18ffffc4 	addi	r3,r3,-1
    bc68:	80c00215 	stw	r3,8(r16)
    bc6c:	183ff30e 	bge	r3,zero,bc3c <__alt_exception_stack_pointer+0xf800bc3c>
    bc70:	80800617 	ldw	r2,24(r16)
    bc74:	18801916 	blt	r3,r2,bcdc <__fputwc+0x10c>
    bc78:	80800017 	ldw	r2,0(r16)
    bc7c:	11400005 	stb	r5,0(r2)
    bc80:	80800017 	ldw	r2,0(r16)
    bc84:	10c00003 	ldbu	r3,0(r2)
    bc88:	10800044 	addi	r2,r2,1
    bc8c:	1d402326 	beq	r3,r21,bd1c <__fputwc+0x14c>
    bc90:	80800015 	stw	r2,0(r16)
    bc94:	8c400044 	addi	r17,r17,1
    bc98:	dc45883a 	add	r2,sp,r17
    bc9c:	8d3fef36 	bltu	r17,r20,bc5c <__alt_exception_stack_pointer+0xf800bc5c>
    bca0:	9005883a 	mov	r2,r18
    bca4:	00000406 	br	bcb8 <__fputwc+0xe8>
    bca8:	80c0030b 	ldhu	r3,12(r16)
    bcac:	a005883a 	mov	r2,r20
    bcb0:	18c01014 	ori	r3,r3,64
    bcb4:	80c0030d 	sth	r3,12(r16)
    bcb8:	dfc00717 	ldw	ra,28(sp)
    bcbc:	dd400617 	ldw	r21,24(sp)
    bcc0:	dd000517 	ldw	r20,20(sp)
    bcc4:	dcc00417 	ldw	r19,16(sp)
    bcc8:	dc800317 	ldw	r18,12(sp)
    bccc:	dc400217 	ldw	r17,8(sp)
    bcd0:	dc000117 	ldw	r16,4(sp)
    bcd4:	dec00804 	addi	sp,sp,32
    bcd8:	f800283a 	ret
    bcdc:	800d883a 	mov	r6,r16
    bce0:	29403fcc 	andi	r5,r5,255
    bce4:	9809883a 	mov	r4,r19
    bce8:	000bf480 	call	bf48 <__swbuf_r>
    bcec:	10bfffe0 	cmpeqi	r2,r2,-1
    bcf0:	10803fcc 	andi	r2,r2,255
    bcf4:	103fd626 	beq	r2,zero,bc50 <__alt_exception_stack_pointer+0xf800bc50>
    bcf8:	00bfffc4 	movi	r2,-1
    bcfc:	003fee06 	br	bcb8 <__alt_exception_stack_pointer+0xf800bcb8>
    bd00:	90ffffc4 	addi	r3,r18,-1
    bd04:	01003f84 	movi	r4,254
    bd08:	20ffbf36 	bltu	r4,r3,bc08 <__alt_exception_stack_pointer+0xf800bc08>
    bd0c:	900b883a 	mov	r5,r18
    bd10:	dc800005 	stb	r18,0(sp)
    bd14:	1029883a 	mov	r20,r2
    bd18:	003fc506 	br	bc30 <__alt_exception_stack_pointer+0xf800bc30>
    bd1c:	800d883a 	mov	r6,r16
    bd20:	a80b883a 	mov	r5,r21
    bd24:	9809883a 	mov	r4,r19
    bd28:	000bf480 	call	bf48 <__swbuf_r>
    bd2c:	10bfffe0 	cmpeqi	r2,r2,-1
    bd30:	003fef06 	br	bcf0 <__alt_exception_stack_pointer+0xf800bcf0>

0000bd34 <_fputwc_r>:
    bd34:	3080030b 	ldhu	r2,12(r6)
    bd38:	10c8000c 	andi	r3,r2,8192
    bd3c:	1800051e 	bne	r3,zero,bd54 <_fputwc_r+0x20>
    bd40:	30c01917 	ldw	r3,100(r6)
    bd44:	10880014 	ori	r2,r2,8192
    bd48:	3080030d 	sth	r2,12(r6)
    bd4c:	18880014 	ori	r2,r3,8192
    bd50:	30801915 	stw	r2,100(r6)
    bd54:	000bbd01 	jmpi	bbd0 <__fputwc>

0000bd58 <fputwc>:
    bd58:	00800074 	movhi	r2,1
    bd5c:	defffc04 	addi	sp,sp,-16
    bd60:	10930404 	addi	r2,r2,19472
    bd64:	dc000115 	stw	r16,4(sp)
    bd68:	14000017 	ldw	r16,0(r2)
    bd6c:	dc400215 	stw	r17,8(sp)
    bd70:	dfc00315 	stw	ra,12(sp)
    bd74:	2023883a 	mov	r17,r4
    bd78:	80000226 	beq	r16,zero,bd84 <fputwc+0x2c>
    bd7c:	80800e17 	ldw	r2,56(r16)
    bd80:	10001026 	beq	r2,zero,bdc4 <fputwc+0x6c>
    bd84:	2880030b 	ldhu	r2,12(r5)
    bd88:	10c8000c 	andi	r3,r2,8192
    bd8c:	1800051e 	bne	r3,zero,bda4 <fputwc+0x4c>
    bd90:	28c01917 	ldw	r3,100(r5)
    bd94:	10880014 	ori	r2,r2,8192
    bd98:	2880030d 	sth	r2,12(r5)
    bd9c:	18880014 	ori	r2,r3,8192
    bda0:	28801915 	stw	r2,100(r5)
    bda4:	280d883a 	mov	r6,r5
    bda8:	8009883a 	mov	r4,r16
    bdac:	880b883a 	mov	r5,r17
    bdb0:	dfc00317 	ldw	ra,12(sp)
    bdb4:	dc400217 	ldw	r17,8(sp)
    bdb8:	dc000117 	ldw	r16,4(sp)
    bdbc:	dec00404 	addi	sp,sp,16
    bdc0:	000bbd01 	jmpi	bbd0 <__fputwc>
    bdc4:	8009883a 	mov	r4,r16
    bdc8:	d9400015 	stw	r5,0(sp)
    bdcc:	00077800 	call	7780 <__sinit>
    bdd0:	d9400017 	ldw	r5,0(sp)
    bdd4:	003feb06 	br	bd84 <__alt_exception_stack_pointer+0xf800bd84>

0000bdd8 <_fstat_r>:
    bdd8:	defffd04 	addi	sp,sp,-12
    bddc:	2805883a 	mov	r2,r5
    bde0:	dc000015 	stw	r16,0(sp)
    bde4:	04000074 	movhi	r16,1
    bde8:	dc400115 	stw	r17,4(sp)
    bdec:	8419fc04 	addi	r16,r16,26608
    bdf0:	2023883a 	mov	r17,r4
    bdf4:	300b883a 	mov	r5,r6
    bdf8:	1009883a 	mov	r4,r2
    bdfc:	dfc00215 	stw	ra,8(sp)
    be00:	80000015 	stw	zero,0(r16)
    be04:	000fa440 	call	fa44 <fstat>
    be08:	00ffffc4 	movi	r3,-1
    be0c:	10c00526 	beq	r2,r3,be24 <_fstat_r+0x4c>
    be10:	dfc00217 	ldw	ra,8(sp)
    be14:	dc400117 	ldw	r17,4(sp)
    be18:	dc000017 	ldw	r16,0(sp)
    be1c:	dec00304 	addi	sp,sp,12
    be20:	f800283a 	ret
    be24:	80c00017 	ldw	r3,0(r16)
    be28:	183ff926 	beq	r3,zero,be10 <__alt_exception_stack_pointer+0xf800be10>
    be2c:	88c00015 	stw	r3,0(r17)
    be30:	003ff706 	br	be10 <__alt_exception_stack_pointer+0xf800be10>

0000be34 <_isatty_r>:
    be34:	defffd04 	addi	sp,sp,-12
    be38:	dc000015 	stw	r16,0(sp)
    be3c:	04000074 	movhi	r16,1
    be40:	dc400115 	stw	r17,4(sp)
    be44:	8419fc04 	addi	r16,r16,26608
    be48:	2023883a 	mov	r17,r4
    be4c:	2809883a 	mov	r4,r5
    be50:	dfc00215 	stw	ra,8(sp)
    be54:	80000015 	stw	zero,0(r16)
    be58:	000fb380 	call	fb38 <isatty>
    be5c:	00ffffc4 	movi	r3,-1
    be60:	10c00526 	beq	r2,r3,be78 <_isatty_r+0x44>
    be64:	dfc00217 	ldw	ra,8(sp)
    be68:	dc400117 	ldw	r17,4(sp)
    be6c:	dc000017 	ldw	r16,0(sp)
    be70:	dec00304 	addi	sp,sp,12
    be74:	f800283a 	ret
    be78:	80c00017 	ldw	r3,0(r16)
    be7c:	183ff926 	beq	r3,zero,be64 <__alt_exception_stack_pointer+0xf800be64>
    be80:	88c00015 	stw	r3,0(r17)
    be84:	003ff706 	br	be64 <__alt_exception_stack_pointer+0xf800be64>

0000be88 <_lseek_r>:
    be88:	defffd04 	addi	sp,sp,-12
    be8c:	2805883a 	mov	r2,r5
    be90:	dc000015 	stw	r16,0(sp)
    be94:	04000074 	movhi	r16,1
    be98:	dc400115 	stw	r17,4(sp)
    be9c:	300b883a 	mov	r5,r6
    bea0:	8419fc04 	addi	r16,r16,26608
    bea4:	2023883a 	mov	r17,r4
    bea8:	380d883a 	mov	r6,r7
    beac:	1009883a 	mov	r4,r2
    beb0:	dfc00215 	stw	ra,8(sp)
    beb4:	80000015 	stw	zero,0(r16)
    beb8:	000fd0c0 	call	fd0c <lseek>
    bebc:	00ffffc4 	movi	r3,-1
    bec0:	10c00526 	beq	r2,r3,bed8 <_lseek_r+0x50>
    bec4:	dfc00217 	ldw	ra,8(sp)
    bec8:	dc400117 	ldw	r17,4(sp)
    becc:	dc000017 	ldw	r16,0(sp)
    bed0:	dec00304 	addi	sp,sp,12
    bed4:	f800283a 	ret
    bed8:	80c00017 	ldw	r3,0(r16)
    bedc:	183ff926 	beq	r3,zero,bec4 <__alt_exception_stack_pointer+0xf800bec4>
    bee0:	88c00015 	stw	r3,0(r17)
    bee4:	003ff706 	br	bec4 <__alt_exception_stack_pointer+0xf800bec4>

0000bee8 <_read_r>:
    bee8:	defffd04 	addi	sp,sp,-12
    beec:	2805883a 	mov	r2,r5
    bef0:	dc000015 	stw	r16,0(sp)
    bef4:	04000074 	movhi	r16,1
    bef8:	dc400115 	stw	r17,4(sp)
    befc:	300b883a 	mov	r5,r6
    bf00:	8419fc04 	addi	r16,r16,26608
    bf04:	2023883a 	mov	r17,r4
    bf08:	380d883a 	mov	r6,r7
    bf0c:	1009883a 	mov	r4,r2
    bf10:	dfc00215 	stw	ra,8(sp)
    bf14:	80000015 	stw	zero,0(r16)
    bf18:	000fee80 	call	fee8 <read>
    bf1c:	00ffffc4 	movi	r3,-1
    bf20:	10c00526 	beq	r2,r3,bf38 <_read_r+0x50>
    bf24:	dfc00217 	ldw	ra,8(sp)
    bf28:	dc400117 	ldw	r17,4(sp)
    bf2c:	dc000017 	ldw	r16,0(sp)
    bf30:	dec00304 	addi	sp,sp,12
    bf34:	f800283a 	ret
    bf38:	80c00017 	ldw	r3,0(r16)
    bf3c:	183ff926 	beq	r3,zero,bf24 <__alt_exception_stack_pointer+0xf800bf24>
    bf40:	88c00015 	stw	r3,0(r17)
    bf44:	003ff706 	br	bf24 <__alt_exception_stack_pointer+0xf800bf24>

0000bf48 <__swbuf_r>:
    bf48:	defffb04 	addi	sp,sp,-20
    bf4c:	dcc00315 	stw	r19,12(sp)
    bf50:	dc800215 	stw	r18,8(sp)
    bf54:	dc000015 	stw	r16,0(sp)
    bf58:	dfc00415 	stw	ra,16(sp)
    bf5c:	dc400115 	stw	r17,4(sp)
    bf60:	2025883a 	mov	r18,r4
    bf64:	2827883a 	mov	r19,r5
    bf68:	3021883a 	mov	r16,r6
    bf6c:	20000226 	beq	r4,zero,bf78 <__swbuf_r+0x30>
    bf70:	20800e17 	ldw	r2,56(r4)
    bf74:	10004226 	beq	r2,zero,c080 <__swbuf_r+0x138>
    bf78:	80800617 	ldw	r2,24(r16)
    bf7c:	8100030b 	ldhu	r4,12(r16)
    bf80:	80800215 	stw	r2,8(r16)
    bf84:	2080020c 	andi	r2,r4,8
    bf88:	10003626 	beq	r2,zero,c064 <__swbuf_r+0x11c>
    bf8c:	80c00417 	ldw	r3,16(r16)
    bf90:	18003426 	beq	r3,zero,c064 <__swbuf_r+0x11c>
    bf94:	2088000c 	andi	r2,r4,8192
    bf98:	9c403fcc 	andi	r17,r19,255
    bf9c:	10001a26 	beq	r2,zero,c008 <__swbuf_r+0xc0>
    bfa0:	80800017 	ldw	r2,0(r16)
    bfa4:	81000517 	ldw	r4,20(r16)
    bfa8:	10c7c83a 	sub	r3,r2,r3
    bfac:	1900200e 	bge	r3,r4,c030 <__swbuf_r+0xe8>
    bfb0:	18c00044 	addi	r3,r3,1
    bfb4:	81000217 	ldw	r4,8(r16)
    bfb8:	11400044 	addi	r5,r2,1
    bfbc:	81400015 	stw	r5,0(r16)
    bfc0:	213fffc4 	addi	r4,r4,-1
    bfc4:	81000215 	stw	r4,8(r16)
    bfc8:	14c00005 	stb	r19,0(r2)
    bfcc:	80800517 	ldw	r2,20(r16)
    bfd0:	10c01e26 	beq	r2,r3,c04c <__swbuf_r+0x104>
    bfd4:	8080030b 	ldhu	r2,12(r16)
    bfd8:	1080004c 	andi	r2,r2,1
    bfdc:	10000226 	beq	r2,zero,bfe8 <__swbuf_r+0xa0>
    bfe0:	00800284 	movi	r2,10
    bfe4:	88801926 	beq	r17,r2,c04c <__swbuf_r+0x104>
    bfe8:	8805883a 	mov	r2,r17
    bfec:	dfc00417 	ldw	ra,16(sp)
    bff0:	dcc00317 	ldw	r19,12(sp)
    bff4:	dc800217 	ldw	r18,8(sp)
    bff8:	dc400117 	ldw	r17,4(sp)
    bffc:	dc000017 	ldw	r16,0(sp)
    c000:	dec00504 	addi	sp,sp,20
    c004:	f800283a 	ret
    c008:	81401917 	ldw	r5,100(r16)
    c00c:	00b7ffc4 	movi	r2,-8193
    c010:	21080014 	ori	r4,r4,8192
    c014:	2884703a 	and	r2,r5,r2
    c018:	80801915 	stw	r2,100(r16)
    c01c:	80800017 	ldw	r2,0(r16)
    c020:	8100030d 	sth	r4,12(r16)
    c024:	81000517 	ldw	r4,20(r16)
    c028:	10c7c83a 	sub	r3,r2,r3
    c02c:	193fe016 	blt	r3,r4,bfb0 <__alt_exception_stack_pointer+0xf800bfb0>
    c030:	800b883a 	mov	r5,r16
    c034:	9009883a 	mov	r4,r18
    c038:	00073940 	call	7394 <_fflush_r>
    c03c:	1000071e 	bne	r2,zero,c05c <__swbuf_r+0x114>
    c040:	80800017 	ldw	r2,0(r16)
    c044:	00c00044 	movi	r3,1
    c048:	003fda06 	br	bfb4 <__alt_exception_stack_pointer+0xf800bfb4>
    c04c:	800b883a 	mov	r5,r16
    c050:	9009883a 	mov	r4,r18
    c054:	00073940 	call	7394 <_fflush_r>
    c058:	103fe326 	beq	r2,zero,bfe8 <__alt_exception_stack_pointer+0xf800bfe8>
    c05c:	00bfffc4 	movi	r2,-1
    c060:	003fe206 	br	bfec <__alt_exception_stack_pointer+0xf800bfec>
    c064:	800b883a 	mov	r5,r16
    c068:	9009883a 	mov	r4,r18
    c06c:	00057740 	call	5774 <__swsetup_r>
    c070:	103ffa1e 	bne	r2,zero,c05c <__alt_exception_stack_pointer+0xf800c05c>
    c074:	8100030b 	ldhu	r4,12(r16)
    c078:	80c00417 	ldw	r3,16(r16)
    c07c:	003fc506 	br	bf94 <__alt_exception_stack_pointer+0xf800bf94>
    c080:	00077800 	call	7780 <__sinit>
    c084:	003fbc06 	br	bf78 <__alt_exception_stack_pointer+0xf800bf78>

0000c088 <__swbuf>:
    c088:	00800074 	movhi	r2,1
    c08c:	10930404 	addi	r2,r2,19472
    c090:	280d883a 	mov	r6,r5
    c094:	200b883a 	mov	r5,r4
    c098:	11000017 	ldw	r4,0(r2)
    c09c:	000bf481 	jmpi	bf48 <__swbuf_r>

0000c0a0 <_wcrtomb_r>:
    c0a0:	defff604 	addi	sp,sp,-40
    c0a4:	00800074 	movhi	r2,1
    c0a8:	dc800815 	stw	r18,32(sp)
    c0ac:	dc400715 	stw	r17,28(sp)
    c0b0:	dc000615 	stw	r16,24(sp)
    c0b4:	10930804 	addi	r2,r2,19488
    c0b8:	dfc00915 	stw	ra,36(sp)
    c0bc:	2021883a 	mov	r16,r4
    c0c0:	3823883a 	mov	r17,r7
    c0c4:	14800017 	ldw	r18,0(r2)
    c0c8:	28001426 	beq	r5,zero,c11c <_wcrtomb_r+0x7c>
    c0cc:	d9400415 	stw	r5,16(sp)
    c0d0:	d9800515 	stw	r6,20(sp)
    c0d4:	00082d00 	call	82d0 <__locale_charset>
    c0d8:	d9800517 	ldw	r6,20(sp)
    c0dc:	d9400417 	ldw	r5,16(sp)
    c0e0:	100f883a 	mov	r7,r2
    c0e4:	dc400015 	stw	r17,0(sp)
    c0e8:	8009883a 	mov	r4,r16
    c0ec:	903ee83a 	callr	r18
    c0f0:	00ffffc4 	movi	r3,-1
    c0f4:	10c0031e 	bne	r2,r3,c104 <_wcrtomb_r+0x64>
    c0f8:	88000015 	stw	zero,0(r17)
    c0fc:	00c02284 	movi	r3,138
    c100:	80c00015 	stw	r3,0(r16)
    c104:	dfc00917 	ldw	ra,36(sp)
    c108:	dc800817 	ldw	r18,32(sp)
    c10c:	dc400717 	ldw	r17,28(sp)
    c110:	dc000617 	ldw	r16,24(sp)
    c114:	dec00a04 	addi	sp,sp,40
    c118:	f800283a 	ret
    c11c:	00082d00 	call	82d0 <__locale_charset>
    c120:	100f883a 	mov	r7,r2
    c124:	dc400015 	stw	r17,0(sp)
    c128:	000d883a 	mov	r6,zero
    c12c:	d9400104 	addi	r5,sp,4
    c130:	8009883a 	mov	r4,r16
    c134:	903ee83a 	callr	r18
    c138:	003fed06 	br	c0f0 <__alt_exception_stack_pointer+0xf800c0f0>

0000c13c <wcrtomb>:
    c13c:	defff604 	addi	sp,sp,-40
    c140:	00800074 	movhi	r2,1
    c144:	dc800615 	stw	r18,24(sp)
    c148:	dc400515 	stw	r17,20(sp)
    c14c:	10930404 	addi	r2,r2,19472
    c150:	dfc00915 	stw	ra,36(sp)
    c154:	dd000815 	stw	r20,32(sp)
    c158:	dcc00715 	stw	r19,28(sp)
    c15c:	dc000415 	stw	r16,16(sp)
    c160:	3025883a 	mov	r18,r6
    c164:	14400017 	ldw	r17,0(r2)
    c168:	20001926 	beq	r4,zero,c1d0 <wcrtomb+0x94>
    c16c:	00800074 	movhi	r2,1
    c170:	10930804 	addi	r2,r2,19488
    c174:	15000017 	ldw	r20,0(r2)
    c178:	2021883a 	mov	r16,r4
    c17c:	2827883a 	mov	r19,r5
    c180:	00082d00 	call	82d0 <__locale_charset>
    c184:	100f883a 	mov	r7,r2
    c188:	dc800015 	stw	r18,0(sp)
    c18c:	980d883a 	mov	r6,r19
    c190:	800b883a 	mov	r5,r16
    c194:	8809883a 	mov	r4,r17
    c198:	a03ee83a 	callr	r20
    c19c:	00ffffc4 	movi	r3,-1
    c1a0:	10c0031e 	bne	r2,r3,c1b0 <wcrtomb+0x74>
    c1a4:	90000015 	stw	zero,0(r18)
    c1a8:	00c02284 	movi	r3,138
    c1ac:	88c00015 	stw	r3,0(r17)
    c1b0:	dfc00917 	ldw	ra,36(sp)
    c1b4:	dd000817 	ldw	r20,32(sp)
    c1b8:	dcc00717 	ldw	r19,28(sp)
    c1bc:	dc800617 	ldw	r18,24(sp)
    c1c0:	dc400517 	ldw	r17,20(sp)
    c1c4:	dc000417 	ldw	r16,16(sp)
    c1c8:	dec00a04 	addi	sp,sp,40
    c1cc:	f800283a 	ret
    c1d0:	00800074 	movhi	r2,1
    c1d4:	10930804 	addi	r2,r2,19488
    c1d8:	14000017 	ldw	r16,0(r2)
    c1dc:	00082d00 	call	82d0 <__locale_charset>
    c1e0:	100f883a 	mov	r7,r2
    c1e4:	dc800015 	stw	r18,0(sp)
    c1e8:	000d883a 	mov	r6,zero
    c1ec:	d9400104 	addi	r5,sp,4
    c1f0:	8809883a 	mov	r4,r17
    c1f4:	803ee83a 	callr	r16
    c1f8:	003fe806 	br	c19c <__alt_exception_stack_pointer+0xf800c19c>

0000c1fc <__ascii_wctomb>:
    c1fc:	28000526 	beq	r5,zero,c214 <__ascii_wctomb+0x18>
    c200:	00803fc4 	movi	r2,255
    c204:	11800536 	bltu	r2,r6,c21c <__ascii_wctomb+0x20>
    c208:	29800005 	stb	r6,0(r5)
    c20c:	00800044 	movi	r2,1
    c210:	f800283a 	ret
    c214:	0005883a 	mov	r2,zero
    c218:	f800283a 	ret
    c21c:	00802284 	movi	r2,138
    c220:	20800015 	stw	r2,0(r4)
    c224:	00bfffc4 	movi	r2,-1
    c228:	f800283a 	ret

0000c22c <_wctomb_r>:
    c22c:	00800074 	movhi	r2,1
    c230:	defff904 	addi	sp,sp,-28
    c234:	10930804 	addi	r2,r2,19488
    c238:	dfc00615 	stw	ra,24(sp)
    c23c:	dc400515 	stw	r17,20(sp)
    c240:	dc000415 	stw	r16,16(sp)
    c244:	3823883a 	mov	r17,r7
    c248:	14000017 	ldw	r16,0(r2)
    c24c:	d9000115 	stw	r4,4(sp)
    c250:	d9400215 	stw	r5,8(sp)
    c254:	d9800315 	stw	r6,12(sp)
    c258:	00082d00 	call	82d0 <__locale_charset>
    c25c:	d9800317 	ldw	r6,12(sp)
    c260:	d9400217 	ldw	r5,8(sp)
    c264:	d9000117 	ldw	r4,4(sp)
    c268:	100f883a 	mov	r7,r2
    c26c:	dc400015 	stw	r17,0(sp)
    c270:	803ee83a 	callr	r16
    c274:	dfc00617 	ldw	ra,24(sp)
    c278:	dc400517 	ldw	r17,20(sp)
    c27c:	dc000417 	ldw	r16,16(sp)
    c280:	dec00704 	addi	sp,sp,28
    c284:	f800283a 	ret

0000c288 <__udivdi3>:
    c288:	defff404 	addi	sp,sp,-48
    c28c:	dcc00515 	stw	r19,20(sp)
    c290:	dc000215 	stw	r16,8(sp)
    c294:	dfc00b15 	stw	ra,44(sp)
    c298:	df000a15 	stw	fp,40(sp)
    c29c:	ddc00915 	stw	r23,36(sp)
    c2a0:	dd800815 	stw	r22,32(sp)
    c2a4:	dd400715 	stw	r21,28(sp)
    c2a8:	dd000615 	stw	r20,24(sp)
    c2ac:	dc800415 	stw	r18,16(sp)
    c2b0:	dc400315 	stw	r17,12(sp)
    c2b4:	2027883a 	mov	r19,r4
    c2b8:	2821883a 	mov	r16,r5
    c2bc:	3800461e 	bne	r7,zero,c3d8 <__udivdi3+0x150>
    c2c0:	3023883a 	mov	r17,r6
    c2c4:	2025883a 	mov	r18,r4
    c2c8:	2980572e 	bgeu	r5,r6,c428 <__udivdi3+0x1a0>
    c2cc:	00bfffd4 	movui	r2,65535
    c2d0:	282d883a 	mov	r22,r5
    c2d4:	1180b236 	bltu	r2,r6,c5a0 <__udivdi3+0x318>
    c2d8:	00803fc4 	movi	r2,255
    c2dc:	1185803a 	cmpltu	r2,r2,r6
    c2e0:	100490fa 	slli	r2,r2,3
    c2e4:	3086d83a 	srl	r3,r6,r2
    c2e8:	01000074 	movhi	r4,1
    c2ec:	210bd604 	addi	r4,r4,12120
    c2f0:	20c7883a 	add	r3,r4,r3
    c2f4:	18c00003 	ldbu	r3,0(r3)
    c2f8:	1885883a 	add	r2,r3,r2
    c2fc:	00c00804 	movi	r3,32
    c300:	1887c83a 	sub	r3,r3,r2
    c304:	18000526 	beq	r3,zero,c31c <__udivdi3+0x94>
    c308:	80e0983a 	sll	r16,r16,r3
    c30c:	9884d83a 	srl	r2,r19,r2
    c310:	30e2983a 	sll	r17,r6,r3
    c314:	98e4983a 	sll	r18,r19,r3
    c318:	142cb03a 	or	r22,r2,r16
    c31c:	882ad43a 	srli	r21,r17,16
    c320:	b009883a 	mov	r4,r22
    c324:	8d3fffcc 	andi	r20,r17,65535
    c328:	a80b883a 	mov	r5,r21
    c32c:	000cfa40 	call	cfa4 <__umodsi3>
    c330:	b009883a 	mov	r4,r22
    c334:	a80b883a 	mov	r5,r21
    c338:	1027883a 	mov	r19,r2
    c33c:	000cf400 	call	cf40 <__udivsi3>
    c340:	100b883a 	mov	r5,r2
    c344:	a009883a 	mov	r4,r20
    c348:	102d883a 	mov	r22,r2
    c34c:	000cffc0 	call	cffc <__mulsi3>
    c350:	9826943a 	slli	r19,r19,16
    c354:	9006d43a 	srli	r3,r18,16
    c358:	1cc6b03a 	or	r3,r3,r19
    c35c:	1880052e 	bgeu	r3,r2,c374 <__udivdi3+0xec>
    c360:	1c47883a 	add	r3,r3,r17
    c364:	b13fffc4 	addi	r4,r22,-1
    c368:	1c400136 	bltu	r3,r17,c370 <__udivdi3+0xe8>
    c36c:	18814236 	bltu	r3,r2,c878 <__udivdi3+0x5f0>
    c370:	202d883a 	mov	r22,r4
    c374:	18a1c83a 	sub	r16,r3,r2
    c378:	8009883a 	mov	r4,r16
    c37c:	a80b883a 	mov	r5,r21
    c380:	000cfa40 	call	cfa4 <__umodsi3>
    c384:	1027883a 	mov	r19,r2
    c388:	8009883a 	mov	r4,r16
    c38c:	a80b883a 	mov	r5,r21
    c390:	9826943a 	slli	r19,r19,16
    c394:	000cf400 	call	cf40 <__udivsi3>
    c398:	100b883a 	mov	r5,r2
    c39c:	a009883a 	mov	r4,r20
    c3a0:	94bfffcc 	andi	r18,r18,65535
    c3a4:	1021883a 	mov	r16,r2
    c3a8:	94e4b03a 	or	r18,r18,r19
    c3ac:	000cffc0 	call	cffc <__mulsi3>
    c3b0:	9080052e 	bgeu	r18,r2,c3c8 <__udivdi3+0x140>
    c3b4:	8ca5883a 	add	r18,r17,r18
    c3b8:	80ffffc4 	addi	r3,r16,-1
    c3bc:	94410c36 	bltu	r18,r17,c7f0 <__udivdi3+0x568>
    c3c0:	90810b2e 	bgeu	r18,r2,c7f0 <__udivdi3+0x568>
    c3c4:	843fff84 	addi	r16,r16,-2
    c3c8:	b004943a 	slli	r2,r22,16
    c3cc:	0007883a 	mov	r3,zero
    c3d0:	1404b03a 	or	r2,r2,r16
    c3d4:	00005e06 	br	c550 <__udivdi3+0x2c8>
    c3d8:	29c05b36 	bltu	r5,r7,c548 <__udivdi3+0x2c0>
    c3dc:	00bfffd4 	movui	r2,65535
    c3e0:	11c0672e 	bgeu	r2,r7,c580 <__udivdi3+0x2f8>
    c3e4:	00804034 	movhi	r2,256
    c3e8:	10bfffc4 	addi	r2,r2,-1
    c3ec:	11c10a36 	bltu	r2,r7,c818 <__udivdi3+0x590>
    c3f0:	00800404 	movi	r2,16
    c3f4:	3886d83a 	srl	r3,r7,r2
    c3f8:	01000074 	movhi	r4,1
    c3fc:	210bd604 	addi	r4,r4,12120
    c400:	20c7883a 	add	r3,r4,r3
    c404:	18c00003 	ldbu	r3,0(r3)
    c408:	05c00804 	movi	r23,32
    c40c:	1885883a 	add	r2,r3,r2
    c410:	b8afc83a 	sub	r23,r23,r2
    c414:	b800671e 	bne	r23,zero,c5b4 <__udivdi3+0x32c>
    c418:	3c010536 	bltu	r7,r16,c830 <__udivdi3+0x5a8>
    c41c:	9985403a 	cmpgeu	r2,r19,r6
    c420:	0007883a 	mov	r3,zero
    c424:	00004a06 	br	c550 <__udivdi3+0x2c8>
    c428:	3000041e 	bne	r6,zero,c43c <__udivdi3+0x1b4>
    c42c:	000b883a 	mov	r5,zero
    c430:	01000044 	movi	r4,1
    c434:	000cf400 	call	cf40 <__udivsi3>
    c438:	1023883a 	mov	r17,r2
    c43c:	00bfffd4 	movui	r2,65535
    c440:	1440532e 	bgeu	r2,r17,c590 <__udivdi3+0x308>
    c444:	00804034 	movhi	r2,256
    c448:	10bfffc4 	addi	r2,r2,-1
    c44c:	1440f436 	bltu	r2,r17,c820 <__udivdi3+0x598>
    c450:	00800404 	movi	r2,16
    c454:	8886d83a 	srl	r3,r17,r2
    c458:	01000074 	movhi	r4,1
    c45c:	210bd604 	addi	r4,r4,12120
    c460:	20c7883a 	add	r3,r4,r3
    c464:	18c00003 	ldbu	r3,0(r3)
    c468:	1885883a 	add	r2,r3,r2
    c46c:	00c00804 	movi	r3,32
    c470:	1887c83a 	sub	r3,r3,r2
    c474:	1800a51e 	bne	r3,zero,c70c <__udivdi3+0x484>
    c478:	882ad43a 	srli	r21,r17,16
    c47c:	8461c83a 	sub	r16,r16,r17
    c480:	8d3fffcc 	andi	r20,r17,65535
    c484:	00c00044 	movi	r3,1
    c488:	a80b883a 	mov	r5,r21
    c48c:	8009883a 	mov	r4,r16
    c490:	d8c00115 	stw	r3,4(sp)
    c494:	000cfa40 	call	cfa4 <__umodsi3>
    c498:	a80b883a 	mov	r5,r21
    c49c:	8009883a 	mov	r4,r16
    c4a0:	1027883a 	mov	r19,r2
    c4a4:	000cf400 	call	cf40 <__udivsi3>
    c4a8:	a00b883a 	mov	r5,r20
    c4ac:	1009883a 	mov	r4,r2
    c4b0:	102d883a 	mov	r22,r2
    c4b4:	000cffc0 	call	cffc <__mulsi3>
    c4b8:	9826943a 	slli	r19,r19,16
    c4bc:	900ed43a 	srli	r7,r18,16
    c4c0:	d8c00117 	ldw	r3,4(sp)
    c4c4:	3cceb03a 	or	r7,r7,r19
    c4c8:	3880052e 	bgeu	r7,r2,c4e0 <__udivdi3+0x258>
    c4cc:	3c4f883a 	add	r7,r7,r17
    c4d0:	b13fffc4 	addi	r4,r22,-1
    c4d4:	3c400136 	bltu	r7,r17,c4dc <__udivdi3+0x254>
    c4d8:	3880e436 	bltu	r7,r2,c86c <__udivdi3+0x5e4>
    c4dc:	202d883a 	mov	r22,r4
    c4e0:	38a1c83a 	sub	r16,r7,r2
    c4e4:	8009883a 	mov	r4,r16
    c4e8:	a80b883a 	mov	r5,r21
    c4ec:	d8c00115 	stw	r3,4(sp)
    c4f0:	000cfa40 	call	cfa4 <__umodsi3>
    c4f4:	1027883a 	mov	r19,r2
    c4f8:	8009883a 	mov	r4,r16
    c4fc:	a80b883a 	mov	r5,r21
    c500:	9826943a 	slli	r19,r19,16
    c504:	000cf400 	call	cf40 <__udivsi3>
    c508:	a00b883a 	mov	r5,r20
    c50c:	1009883a 	mov	r4,r2
    c510:	94bfffcc 	andi	r18,r18,65535
    c514:	1021883a 	mov	r16,r2
    c518:	94e4b03a 	or	r18,r18,r19
    c51c:	000cffc0 	call	cffc <__mulsi3>
    c520:	d8c00117 	ldw	r3,4(sp)
    c524:	9080052e 	bgeu	r18,r2,c53c <__udivdi3+0x2b4>
    c528:	8ca5883a 	add	r18,r17,r18
    c52c:	813fffc4 	addi	r4,r16,-1
    c530:	9440ad36 	bltu	r18,r17,c7e8 <__udivdi3+0x560>
    c534:	9080ac2e 	bgeu	r18,r2,c7e8 <__udivdi3+0x560>
    c538:	843fff84 	addi	r16,r16,-2
    c53c:	b004943a 	slli	r2,r22,16
    c540:	1404b03a 	or	r2,r2,r16
    c544:	00000206 	br	c550 <__udivdi3+0x2c8>
    c548:	0007883a 	mov	r3,zero
    c54c:	0005883a 	mov	r2,zero
    c550:	dfc00b17 	ldw	ra,44(sp)
    c554:	df000a17 	ldw	fp,40(sp)
    c558:	ddc00917 	ldw	r23,36(sp)
    c55c:	dd800817 	ldw	r22,32(sp)
    c560:	dd400717 	ldw	r21,28(sp)
    c564:	dd000617 	ldw	r20,24(sp)
    c568:	dcc00517 	ldw	r19,20(sp)
    c56c:	dc800417 	ldw	r18,16(sp)
    c570:	dc400317 	ldw	r17,12(sp)
    c574:	dc000217 	ldw	r16,8(sp)
    c578:	dec00c04 	addi	sp,sp,48
    c57c:	f800283a 	ret
    c580:	00803fc4 	movi	r2,255
    c584:	11c5803a 	cmpltu	r2,r2,r7
    c588:	100490fa 	slli	r2,r2,3
    c58c:	003f9906 	br	c3f4 <__alt_exception_stack_pointer+0xf800c3f4>
    c590:	00803fc4 	movi	r2,255
    c594:	1445803a 	cmpltu	r2,r2,r17
    c598:	100490fa 	slli	r2,r2,3
    c59c:	003fad06 	br	c454 <__alt_exception_stack_pointer+0xf800c454>
    c5a0:	00804034 	movhi	r2,256
    c5a4:	10bfffc4 	addi	r2,r2,-1
    c5a8:	11809f36 	bltu	r2,r6,c828 <__udivdi3+0x5a0>
    c5ac:	00800404 	movi	r2,16
    c5b0:	003f4c06 	br	c2e4 <__alt_exception_stack_pointer+0xf800c2e4>
    c5b4:	3dce983a 	sll	r7,r7,r23
    c5b8:	30b8d83a 	srl	fp,r6,r2
    c5bc:	80a2d83a 	srl	r17,r16,r2
    c5c0:	35cc983a 	sll	r6,r6,r23
    c5c4:	3f38b03a 	or	fp,r7,fp
    c5c8:	e024d43a 	srli	r18,fp,16
    c5cc:	9884d83a 	srl	r2,r19,r2
    c5d0:	85e0983a 	sll	r16,r16,r23
    c5d4:	8809883a 	mov	r4,r17
    c5d8:	900b883a 	mov	r5,r18
    c5dc:	d9800015 	stw	r6,0(sp)
    c5e0:	1420b03a 	or	r16,r2,r16
    c5e4:	000cfa40 	call	cfa4 <__umodsi3>
    c5e8:	900b883a 	mov	r5,r18
    c5ec:	8809883a 	mov	r4,r17
    c5f0:	1029883a 	mov	r20,r2
    c5f4:	e5bfffcc 	andi	r22,fp,65535
    c5f8:	000cf400 	call	cf40 <__udivsi3>
    c5fc:	100b883a 	mov	r5,r2
    c600:	b009883a 	mov	r4,r22
    c604:	102b883a 	mov	r21,r2
    c608:	000cffc0 	call	cffc <__mulsi3>
    c60c:	a028943a 	slli	r20,r20,16
    c610:	8006d43a 	srli	r3,r16,16
    c614:	1d06b03a 	or	r3,r3,r20
    c618:	1880042e 	bgeu	r3,r2,c62c <__udivdi3+0x3a4>
    c61c:	1f07883a 	add	r3,r3,fp
    c620:	a93fffc4 	addi	r4,r21,-1
    c624:	1f00892e 	bgeu	r3,fp,c84c <__udivdi3+0x5c4>
    c628:	202b883a 	mov	r21,r4
    c62c:	18a3c83a 	sub	r17,r3,r2
    c630:	8809883a 	mov	r4,r17
    c634:	900b883a 	mov	r5,r18
    c638:	000cfa40 	call	cfa4 <__umodsi3>
    c63c:	1029883a 	mov	r20,r2
    c640:	8809883a 	mov	r4,r17
    c644:	900b883a 	mov	r5,r18
    c648:	a028943a 	slli	r20,r20,16
    c64c:	000cf400 	call	cf40 <__udivsi3>
    c650:	100b883a 	mov	r5,r2
    c654:	b009883a 	mov	r4,r22
    c658:	843fffcc 	andi	r16,r16,65535
    c65c:	1023883a 	mov	r17,r2
    c660:	8520b03a 	or	r16,r16,r20
    c664:	000cffc0 	call	cffc <__mulsi3>
    c668:	8080042e 	bgeu	r16,r2,c67c <__udivdi3+0x3f4>
    c66c:	8721883a 	add	r16,r16,fp
    c670:	88ffffc4 	addi	r3,r17,-1
    c674:	8700712e 	bgeu	r16,fp,c83c <__udivdi3+0x5b4>
    c678:	1823883a 	mov	r17,r3
    c67c:	a80e943a 	slli	r7,r21,16
    c680:	d8c00017 	ldw	r3,0(sp)
    c684:	80a1c83a 	sub	r16,r16,r2
    c688:	3c64b03a 	or	r18,r7,r17
    c68c:	1d3fffcc 	andi	r20,r3,65535
    c690:	9022d43a 	srli	r17,r18,16
    c694:	95bfffcc 	andi	r22,r18,65535
    c698:	a00b883a 	mov	r5,r20
    c69c:	b009883a 	mov	r4,r22
    c6a0:	182ad43a 	srli	r21,r3,16
    c6a4:	000cffc0 	call	cffc <__mulsi3>
    c6a8:	a00b883a 	mov	r5,r20
    c6ac:	8809883a 	mov	r4,r17
    c6b0:	1039883a 	mov	fp,r2
    c6b4:	000cffc0 	call	cffc <__mulsi3>
    c6b8:	8809883a 	mov	r4,r17
    c6bc:	a80b883a 	mov	r5,r21
    c6c0:	1029883a 	mov	r20,r2
    c6c4:	000cffc0 	call	cffc <__mulsi3>
    c6c8:	a80b883a 	mov	r5,r21
    c6cc:	b009883a 	mov	r4,r22
    c6d0:	1023883a 	mov	r17,r2
    c6d4:	000cffc0 	call	cffc <__mulsi3>
    c6d8:	e006d43a 	srli	r3,fp,16
    c6dc:	1505883a 	add	r2,r2,r20
    c6e0:	1887883a 	add	r3,r3,r2
    c6e4:	1d00022e 	bgeu	r3,r20,c6f0 <__udivdi3+0x468>
    c6e8:	00800074 	movhi	r2,1
    c6ec:	88a3883a 	add	r17,r17,r2
    c6f0:	1804d43a 	srli	r2,r3,16
    c6f4:	1463883a 	add	r17,r2,r17
    c6f8:	84404436 	bltu	r16,r17,c80c <__udivdi3+0x584>
    c6fc:	84403e26 	beq	r16,r17,c7f8 <__udivdi3+0x570>
    c700:	9005883a 	mov	r2,r18
    c704:	0007883a 	mov	r3,zero
    c708:	003f9106 	br	c550 <__alt_exception_stack_pointer+0xf800c550>
    c70c:	88e2983a 	sll	r17,r17,r3
    c710:	80aed83a 	srl	r23,r16,r2
    c714:	80e0983a 	sll	r16,r16,r3
    c718:	882ad43a 	srli	r21,r17,16
    c71c:	9884d83a 	srl	r2,r19,r2
    c720:	b809883a 	mov	r4,r23
    c724:	a80b883a 	mov	r5,r21
    c728:	98e4983a 	sll	r18,r19,r3
    c72c:	142cb03a 	or	r22,r2,r16
    c730:	000cfa40 	call	cfa4 <__umodsi3>
    c734:	b809883a 	mov	r4,r23
    c738:	a80b883a 	mov	r5,r21
    c73c:	1027883a 	mov	r19,r2
    c740:	8d3fffcc 	andi	r20,r17,65535
    c744:	000cf400 	call	cf40 <__udivsi3>
    c748:	a009883a 	mov	r4,r20
    c74c:	100b883a 	mov	r5,r2
    c750:	102f883a 	mov	r23,r2
    c754:	000cffc0 	call	cffc <__mulsi3>
    c758:	9826943a 	slli	r19,r19,16
    c75c:	b008d43a 	srli	r4,r22,16
    c760:	24c8b03a 	or	r4,r4,r19
    c764:	2080062e 	bgeu	r4,r2,c780 <__udivdi3+0x4f8>
    c768:	2449883a 	add	r4,r4,r17
    c76c:	b8ffffc4 	addi	r3,r23,-1
    c770:	24403c36 	bltu	r4,r17,c864 <__udivdi3+0x5dc>
    c774:	20803b2e 	bgeu	r4,r2,c864 <__udivdi3+0x5dc>
    c778:	bdffff84 	addi	r23,r23,-2
    c77c:	2449883a 	add	r4,r4,r17
    c780:	20a1c83a 	sub	r16,r4,r2
    c784:	a80b883a 	mov	r5,r21
    c788:	8009883a 	mov	r4,r16
    c78c:	000cfa40 	call	cfa4 <__umodsi3>
    c790:	a80b883a 	mov	r5,r21
    c794:	8009883a 	mov	r4,r16
    c798:	1027883a 	mov	r19,r2
    c79c:	000cf400 	call	cf40 <__udivsi3>
    c7a0:	a009883a 	mov	r4,r20
    c7a4:	100b883a 	mov	r5,r2
    c7a8:	9826943a 	slli	r19,r19,16
    c7ac:	1039883a 	mov	fp,r2
    c7b0:	000cffc0 	call	cffc <__mulsi3>
    c7b4:	b13fffcc 	andi	r4,r22,65535
    c7b8:	24c8b03a 	or	r4,r4,r19
    c7bc:	2080062e 	bgeu	r4,r2,c7d8 <__udivdi3+0x550>
    c7c0:	2449883a 	add	r4,r4,r17
    c7c4:	e0ffffc4 	addi	r3,fp,-1
    c7c8:	24402436 	bltu	r4,r17,c85c <__udivdi3+0x5d4>
    c7cc:	2080232e 	bgeu	r4,r2,c85c <__udivdi3+0x5d4>
    c7d0:	e73fff84 	addi	fp,fp,-2
    c7d4:	2449883a 	add	r4,r4,r17
    c7d8:	b82e943a 	slli	r23,r23,16
    c7dc:	20a1c83a 	sub	r16,r4,r2
    c7e0:	bf06b03a 	or	r3,r23,fp
    c7e4:	003f2806 	br	c488 <__alt_exception_stack_pointer+0xf800c488>
    c7e8:	2021883a 	mov	r16,r4
    c7ec:	003f5306 	br	c53c <__alt_exception_stack_pointer+0xf800c53c>
    c7f0:	1821883a 	mov	r16,r3
    c7f4:	003ef406 	br	c3c8 <__alt_exception_stack_pointer+0xf800c3c8>
    c7f8:	1806943a 	slli	r3,r3,16
    c7fc:	9de6983a 	sll	r19,r19,r23
    c800:	e73fffcc 	andi	fp,fp,65535
    c804:	1f07883a 	add	r3,r3,fp
    c808:	98ffbd2e 	bgeu	r19,r3,c700 <__alt_exception_stack_pointer+0xf800c700>
    c80c:	90bfffc4 	addi	r2,r18,-1
    c810:	0007883a 	mov	r3,zero
    c814:	003f4e06 	br	c550 <__alt_exception_stack_pointer+0xf800c550>
    c818:	00800604 	movi	r2,24
    c81c:	003ef506 	br	c3f4 <__alt_exception_stack_pointer+0xf800c3f4>
    c820:	00800604 	movi	r2,24
    c824:	003f0b06 	br	c454 <__alt_exception_stack_pointer+0xf800c454>
    c828:	00800604 	movi	r2,24
    c82c:	003ead06 	br	c2e4 <__alt_exception_stack_pointer+0xf800c2e4>
    c830:	0007883a 	mov	r3,zero
    c834:	00800044 	movi	r2,1
    c838:	003f4506 	br	c550 <__alt_exception_stack_pointer+0xf800c550>
    c83c:	80bf8e2e 	bgeu	r16,r2,c678 <__alt_exception_stack_pointer+0xf800c678>
    c840:	8c7fff84 	addi	r17,r17,-2
    c844:	8721883a 	add	r16,r16,fp
    c848:	003f8c06 	br	c67c <__alt_exception_stack_pointer+0xf800c67c>
    c84c:	18bf762e 	bgeu	r3,r2,c628 <__alt_exception_stack_pointer+0xf800c628>
    c850:	ad7fff84 	addi	r21,r21,-2
    c854:	1f07883a 	add	r3,r3,fp
    c858:	003f7406 	br	c62c <__alt_exception_stack_pointer+0xf800c62c>
    c85c:	1839883a 	mov	fp,r3
    c860:	003fdd06 	br	c7d8 <__alt_exception_stack_pointer+0xf800c7d8>
    c864:	182f883a 	mov	r23,r3
    c868:	003fc506 	br	c780 <__alt_exception_stack_pointer+0xf800c780>
    c86c:	b5bfff84 	addi	r22,r22,-2
    c870:	3c4f883a 	add	r7,r7,r17
    c874:	003f1a06 	br	c4e0 <__alt_exception_stack_pointer+0xf800c4e0>
    c878:	b5bfff84 	addi	r22,r22,-2
    c87c:	1c47883a 	add	r3,r3,r17
    c880:	003ebc06 	br	c374 <__alt_exception_stack_pointer+0xf800c374>

0000c884 <__umoddi3>:
    c884:	defff304 	addi	sp,sp,-52
    c888:	df000b15 	stw	fp,44(sp)
    c88c:	dc400415 	stw	r17,16(sp)
    c890:	dc000315 	stw	r16,12(sp)
    c894:	dfc00c15 	stw	ra,48(sp)
    c898:	ddc00a15 	stw	r23,40(sp)
    c89c:	dd800915 	stw	r22,36(sp)
    c8a0:	dd400815 	stw	r21,32(sp)
    c8a4:	dd000715 	stw	r20,28(sp)
    c8a8:	dcc00615 	stw	r19,24(sp)
    c8ac:	dc800515 	stw	r18,20(sp)
    c8b0:	2021883a 	mov	r16,r4
    c8b4:	2823883a 	mov	r17,r5
    c8b8:	2839883a 	mov	fp,r5
    c8bc:	3800401e 	bne	r7,zero,c9c0 <__umoddi3+0x13c>
    c8c0:	3027883a 	mov	r19,r6
    c8c4:	2029883a 	mov	r20,r4
    c8c8:	2980552e 	bgeu	r5,r6,ca20 <__umoddi3+0x19c>
    c8cc:	00bfffd4 	movui	r2,65535
    c8d0:	1180a236 	bltu	r2,r6,cb5c <__umoddi3+0x2d8>
    c8d4:	01003fc4 	movi	r4,255
    c8d8:	2189803a 	cmpltu	r4,r4,r6
    c8dc:	200890fa 	slli	r4,r4,3
    c8e0:	3104d83a 	srl	r2,r6,r4
    c8e4:	00c00074 	movhi	r3,1
    c8e8:	18cbd604 	addi	r3,r3,12120
    c8ec:	1885883a 	add	r2,r3,r2
    c8f0:	10c00003 	ldbu	r3,0(r2)
    c8f4:	00800804 	movi	r2,32
    c8f8:	1909883a 	add	r4,r3,r4
    c8fc:	1125c83a 	sub	r18,r2,r4
    c900:	90000526 	beq	r18,zero,c918 <__umoddi3+0x94>
    c904:	8ca2983a 	sll	r17,r17,r18
    c908:	8108d83a 	srl	r4,r16,r4
    c90c:	34a6983a 	sll	r19,r6,r18
    c910:	84a8983a 	sll	r20,r16,r18
    c914:	2478b03a 	or	fp,r4,r17
    c918:	982cd43a 	srli	r22,r19,16
    c91c:	e009883a 	mov	r4,fp
    c920:	9dffffcc 	andi	r23,r19,65535
    c924:	b00b883a 	mov	r5,r22
    c928:	000cfa40 	call	cfa4 <__umodsi3>
    c92c:	b00b883a 	mov	r5,r22
    c930:	e009883a 	mov	r4,fp
    c934:	102b883a 	mov	r21,r2
    c938:	000cf400 	call	cf40 <__udivsi3>
    c93c:	100b883a 	mov	r5,r2
    c940:	b809883a 	mov	r4,r23
    c944:	000cffc0 	call	cffc <__mulsi3>
    c948:	a82a943a 	slli	r21,r21,16
    c94c:	a006d43a 	srli	r3,r20,16
    c950:	1d46b03a 	or	r3,r3,r21
    c954:	1880032e 	bgeu	r3,r2,c964 <__umoddi3+0xe0>
    c958:	1cc7883a 	add	r3,r3,r19
    c95c:	1cc00136 	bltu	r3,r19,c964 <__umoddi3+0xe0>
    c960:	18813136 	bltu	r3,r2,ce28 <__umoddi3+0x5a4>
    c964:	18a1c83a 	sub	r16,r3,r2
    c968:	b00b883a 	mov	r5,r22
    c96c:	8009883a 	mov	r4,r16
    c970:	000cfa40 	call	cfa4 <__umodsi3>
    c974:	b00b883a 	mov	r5,r22
    c978:	8009883a 	mov	r4,r16
    c97c:	1023883a 	mov	r17,r2
    c980:	000cf400 	call	cf40 <__udivsi3>
    c984:	100b883a 	mov	r5,r2
    c988:	b809883a 	mov	r4,r23
    c98c:	8822943a 	slli	r17,r17,16
    c990:	000cffc0 	call	cffc <__mulsi3>
    c994:	a0ffffcc 	andi	r3,r20,65535
    c998:	1c46b03a 	or	r3,r3,r17
    c99c:	1880042e 	bgeu	r3,r2,c9b0 <__umoddi3+0x12c>
    c9a0:	1cc7883a 	add	r3,r3,r19
    c9a4:	1cc00236 	bltu	r3,r19,c9b0 <__umoddi3+0x12c>
    c9a8:	1880012e 	bgeu	r3,r2,c9b0 <__umoddi3+0x12c>
    c9ac:	1cc7883a 	add	r3,r3,r19
    c9b0:	1885c83a 	sub	r2,r3,r2
    c9b4:	1484d83a 	srl	r2,r2,r18
    c9b8:	0007883a 	mov	r3,zero
    c9bc:	00005306 	br	cb0c <__umoddi3+0x288>
    c9c0:	29c05036 	bltu	r5,r7,cb04 <__umoddi3+0x280>
    c9c4:	00bfffd4 	movui	r2,65535
    c9c8:	11c05c2e 	bgeu	r2,r7,cb3c <__umoddi3+0x2b8>
    c9cc:	00804034 	movhi	r2,256
    c9d0:	10bfffc4 	addi	r2,r2,-1
    c9d4:	11c10636 	bltu	r2,r7,cdf0 <__umoddi3+0x56c>
    c9d8:	01000404 	movi	r4,16
    c9dc:	3904d83a 	srl	r2,r7,r4
    c9e0:	00c00074 	movhi	r3,1
    c9e4:	18cbd604 	addi	r3,r3,12120
    c9e8:	1885883a 	add	r2,r3,r2
    c9ec:	14c00003 	ldbu	r19,0(r2)
    c9f0:	00c00804 	movi	r3,32
    c9f4:	9927883a 	add	r19,r19,r4
    c9f8:	1ce9c83a 	sub	r20,r3,r19
    c9fc:	a0005c1e 	bne	r20,zero,cb70 <__umoddi3+0x2ec>
    ca00:	3c400136 	bltu	r7,r17,ca08 <__umoddi3+0x184>
    ca04:	81810a36 	bltu	r16,r6,ce30 <__umoddi3+0x5ac>
    ca08:	8185c83a 	sub	r2,r16,r6
    ca0c:	89e3c83a 	sub	r17,r17,r7
    ca10:	8089803a 	cmpltu	r4,r16,r2
    ca14:	8939c83a 	sub	fp,r17,r4
    ca18:	e007883a 	mov	r3,fp
    ca1c:	00003b06 	br	cb0c <__umoddi3+0x288>
    ca20:	3000041e 	bne	r6,zero,ca34 <__umoddi3+0x1b0>
    ca24:	000b883a 	mov	r5,zero
    ca28:	01000044 	movi	r4,1
    ca2c:	000cf400 	call	cf40 <__udivsi3>
    ca30:	1027883a 	mov	r19,r2
    ca34:	00bfffd4 	movui	r2,65535
    ca38:	14c0442e 	bgeu	r2,r19,cb4c <__umoddi3+0x2c8>
    ca3c:	00804034 	movhi	r2,256
    ca40:	10bfffc4 	addi	r2,r2,-1
    ca44:	14c0ec36 	bltu	r2,r19,cdf8 <__umoddi3+0x574>
    ca48:	00800404 	movi	r2,16
    ca4c:	9886d83a 	srl	r3,r19,r2
    ca50:	01000074 	movhi	r4,1
    ca54:	210bd604 	addi	r4,r4,12120
    ca58:	20c7883a 	add	r3,r4,r3
    ca5c:	18c00003 	ldbu	r3,0(r3)
    ca60:	1887883a 	add	r3,r3,r2
    ca64:	00800804 	movi	r2,32
    ca68:	10e5c83a 	sub	r18,r2,r3
    ca6c:	9000ab1e 	bne	r18,zero,cd1c <__umoddi3+0x498>
    ca70:	982cd43a 	srli	r22,r19,16
    ca74:	8ce3c83a 	sub	r17,r17,r19
    ca78:	9dffffcc 	andi	r23,r19,65535
    ca7c:	b00b883a 	mov	r5,r22
    ca80:	8809883a 	mov	r4,r17
    ca84:	000cfa40 	call	cfa4 <__umodsi3>
    ca88:	b00b883a 	mov	r5,r22
    ca8c:	8809883a 	mov	r4,r17
    ca90:	102b883a 	mov	r21,r2
    ca94:	000cf400 	call	cf40 <__udivsi3>
    ca98:	b80b883a 	mov	r5,r23
    ca9c:	1009883a 	mov	r4,r2
    caa0:	000cffc0 	call	cffc <__mulsi3>
    caa4:	a82a943a 	slli	r21,r21,16
    caa8:	a006d43a 	srli	r3,r20,16
    caac:	1d46b03a 	or	r3,r3,r21
    cab0:	1880042e 	bgeu	r3,r2,cac4 <__umoddi3+0x240>
    cab4:	1cc7883a 	add	r3,r3,r19
    cab8:	1cc00236 	bltu	r3,r19,cac4 <__umoddi3+0x240>
    cabc:	1880012e 	bgeu	r3,r2,cac4 <__umoddi3+0x240>
    cac0:	1cc7883a 	add	r3,r3,r19
    cac4:	18a1c83a 	sub	r16,r3,r2
    cac8:	b00b883a 	mov	r5,r22
    cacc:	8009883a 	mov	r4,r16
    cad0:	000cfa40 	call	cfa4 <__umodsi3>
    cad4:	1023883a 	mov	r17,r2
    cad8:	b00b883a 	mov	r5,r22
    cadc:	8009883a 	mov	r4,r16
    cae0:	000cf400 	call	cf40 <__udivsi3>
    cae4:	8822943a 	slli	r17,r17,16
    cae8:	b80b883a 	mov	r5,r23
    caec:	1009883a 	mov	r4,r2
    caf0:	000cffc0 	call	cffc <__mulsi3>
    caf4:	a53fffcc 	andi	r20,r20,65535
    caf8:	a446b03a 	or	r3,r20,r17
    cafc:	18bfac2e 	bgeu	r3,r2,c9b0 <__alt_exception_stack_pointer+0xf800c9b0>
    cb00:	003fa706 	br	c9a0 <__alt_exception_stack_pointer+0xf800c9a0>
    cb04:	2005883a 	mov	r2,r4
    cb08:	2807883a 	mov	r3,r5
    cb0c:	dfc00c17 	ldw	ra,48(sp)
    cb10:	df000b17 	ldw	fp,44(sp)
    cb14:	ddc00a17 	ldw	r23,40(sp)
    cb18:	dd800917 	ldw	r22,36(sp)
    cb1c:	dd400817 	ldw	r21,32(sp)
    cb20:	dd000717 	ldw	r20,28(sp)
    cb24:	dcc00617 	ldw	r19,24(sp)
    cb28:	dc800517 	ldw	r18,20(sp)
    cb2c:	dc400417 	ldw	r17,16(sp)
    cb30:	dc000317 	ldw	r16,12(sp)
    cb34:	dec00d04 	addi	sp,sp,52
    cb38:	f800283a 	ret
    cb3c:	04c03fc4 	movi	r19,255
    cb40:	99c9803a 	cmpltu	r4,r19,r7
    cb44:	200890fa 	slli	r4,r4,3
    cb48:	003fa406 	br	c9dc <__alt_exception_stack_pointer+0xf800c9dc>
    cb4c:	00803fc4 	movi	r2,255
    cb50:	14c5803a 	cmpltu	r2,r2,r19
    cb54:	100490fa 	slli	r2,r2,3
    cb58:	003fbc06 	br	ca4c <__alt_exception_stack_pointer+0xf800ca4c>
    cb5c:	00804034 	movhi	r2,256
    cb60:	10bfffc4 	addi	r2,r2,-1
    cb64:	1180a636 	bltu	r2,r6,ce00 <__umoddi3+0x57c>
    cb68:	01000404 	movi	r4,16
    cb6c:	003f5c06 	br	c8e0 <__alt_exception_stack_pointer+0xf800c8e0>
    cb70:	3d0e983a 	sll	r7,r7,r20
    cb74:	34ead83a 	srl	r21,r6,r19
    cb78:	8cc6d83a 	srl	r3,r17,r19
    cb7c:	8d10983a 	sll	r8,r17,r20
    cb80:	3d6ab03a 	or	r21,r7,r21
    cb84:	a82cd43a 	srli	r22,r21,16
    cb88:	84e2d83a 	srl	r17,r16,r19
    cb8c:	1809883a 	mov	r4,r3
    cb90:	b00b883a 	mov	r5,r22
    cb94:	8a22b03a 	or	r17,r17,r8
    cb98:	3524983a 	sll	r18,r6,r20
    cb9c:	dc400015 	stw	r17,0(sp)
    cba0:	d8c00115 	stw	r3,4(sp)
    cba4:	000cfa40 	call	cfa4 <__umodsi3>
    cba8:	d8c00117 	ldw	r3,4(sp)
    cbac:	b00b883a 	mov	r5,r22
    cbb0:	1039883a 	mov	fp,r2
    cbb4:	1809883a 	mov	r4,r3
    cbb8:	000cf400 	call	cf40 <__udivsi3>
    cbbc:	adffffcc 	andi	r23,r21,65535
    cbc0:	100b883a 	mov	r5,r2
    cbc4:	b809883a 	mov	r4,r23
    cbc8:	1023883a 	mov	r17,r2
    cbcc:	000cffc0 	call	cffc <__mulsi3>
    cbd0:	d9400017 	ldw	r5,0(sp)
    cbd4:	e008943a 	slli	r4,fp,16
    cbd8:	8520983a 	sll	r16,r16,r20
    cbdc:	2806d43a 	srli	r3,r5,16
    cbe0:	1906b03a 	or	r3,r3,r4
    cbe4:	1880042e 	bgeu	r3,r2,cbf8 <__umoddi3+0x374>
    cbe8:	1d47883a 	add	r3,r3,r21
    cbec:	893fffc4 	addi	r4,r17,-1
    cbf0:	1d40892e 	bgeu	r3,r21,ce18 <__umoddi3+0x594>
    cbf4:	2023883a 	mov	r17,r4
    cbf8:	18b9c83a 	sub	fp,r3,r2
    cbfc:	b00b883a 	mov	r5,r22
    cc00:	e009883a 	mov	r4,fp
    cc04:	000cfa40 	call	cfa4 <__umodsi3>
    cc08:	b00b883a 	mov	r5,r22
    cc0c:	e009883a 	mov	r4,fp
    cc10:	d8800215 	stw	r2,8(sp)
    cc14:	000cf400 	call	cf40 <__udivsi3>
    cc18:	100b883a 	mov	r5,r2
    cc1c:	b809883a 	mov	r4,r23
    cc20:	102d883a 	mov	r22,r2
    cc24:	000cffc0 	call	cffc <__mulsi3>
    cc28:	d9800217 	ldw	r6,8(sp)
    cc2c:	d8c00017 	ldw	r3,0(sp)
    cc30:	300c943a 	slli	r6,r6,16
    cc34:	1a3fffcc 	andi	r8,r3,65535
    cc38:	4190b03a 	or	r8,r8,r6
    cc3c:	4080042e 	bgeu	r8,r2,cc50 <__umoddi3+0x3cc>
    cc40:	4551883a 	add	r8,r8,r21
    cc44:	b0ffffc4 	addi	r3,r22,-1
    cc48:	45406f2e 	bgeu	r8,r21,ce08 <__umoddi3+0x584>
    cc4c:	182d883a 	mov	r22,r3
    cc50:	880e943a 	slli	r7,r17,16
    cc54:	9006d43a 	srli	r3,r18,16
    cc58:	91bfffcc 	andi	r6,r18,65535
    cc5c:	3dacb03a 	or	r22,r7,r22
    cc60:	b02ed43a 	srli	r23,r22,16
    cc64:	b5bfffcc 	andi	r22,r22,65535
    cc68:	300b883a 	mov	r5,r6
    cc6c:	b009883a 	mov	r4,r22
    cc70:	40a3c83a 	sub	r17,r8,r2
    cc74:	d8c00115 	stw	r3,4(sp)
    cc78:	d9800215 	stw	r6,8(sp)
    cc7c:	000cffc0 	call	cffc <__mulsi3>
    cc80:	d9800217 	ldw	r6,8(sp)
    cc84:	b809883a 	mov	r4,r23
    cc88:	1039883a 	mov	fp,r2
    cc8c:	300b883a 	mov	r5,r6
    cc90:	000cffc0 	call	cffc <__mulsi3>
    cc94:	d8c00117 	ldw	r3,4(sp)
    cc98:	b809883a 	mov	r4,r23
    cc9c:	d8800215 	stw	r2,8(sp)
    cca0:	180b883a 	mov	r5,r3
    cca4:	000cffc0 	call	cffc <__mulsi3>
    cca8:	d8c00117 	ldw	r3,4(sp)
    ccac:	b009883a 	mov	r4,r22
    ccb0:	102f883a 	mov	r23,r2
    ccb4:	180b883a 	mov	r5,r3
    ccb8:	000cffc0 	call	cffc <__mulsi3>
    ccbc:	d9800217 	ldw	r6,8(sp)
    ccc0:	e006d43a 	srli	r3,fp,16
    ccc4:	1185883a 	add	r2,r2,r6
    ccc8:	1885883a 	add	r2,r3,r2
    cccc:	1180022e 	bgeu	r2,r6,ccd8 <__umoddi3+0x454>
    ccd0:	00c00074 	movhi	r3,1
    ccd4:	b8ef883a 	add	r23,r23,r3
    ccd8:	1006d43a 	srli	r3,r2,16
    ccdc:	1004943a 	slli	r2,r2,16
    cce0:	e73fffcc 	andi	fp,fp,65535
    cce4:	1dc7883a 	add	r3,r3,r23
    cce8:	1739883a 	add	fp,r2,fp
    ccec:	88c03a36 	bltu	r17,r3,cdd8 <__umoddi3+0x554>
    ccf0:	88c05126 	beq	r17,r3,ce38 <__umoddi3+0x5b4>
    ccf4:	88c9c83a 	sub	r4,r17,r3
    ccf8:	e00f883a 	mov	r7,fp
    ccfc:	81cfc83a 	sub	r7,r16,r7
    cd00:	81c7803a 	cmpltu	r3,r16,r7
    cd04:	20c7c83a 	sub	r3,r4,r3
    cd08:	1cc4983a 	sll	r2,r3,r19
    cd0c:	3d0ed83a 	srl	r7,r7,r20
    cd10:	1d06d83a 	srl	r3,r3,r20
    cd14:	11c4b03a 	or	r2,r2,r7
    cd18:	003f7c06 	br	cb0c <__alt_exception_stack_pointer+0xf800cb0c>
    cd1c:	9ca6983a 	sll	r19,r19,r18
    cd20:	88f8d83a 	srl	fp,r17,r3
    cd24:	80c4d83a 	srl	r2,r16,r3
    cd28:	982cd43a 	srli	r22,r19,16
    cd2c:	8ca2983a 	sll	r17,r17,r18
    cd30:	e009883a 	mov	r4,fp
    cd34:	b00b883a 	mov	r5,r22
    cd38:	146ab03a 	or	r21,r2,r17
    cd3c:	000cfa40 	call	cfa4 <__umodsi3>
    cd40:	b00b883a 	mov	r5,r22
    cd44:	e009883a 	mov	r4,fp
    cd48:	1029883a 	mov	r20,r2
    cd4c:	9dffffcc 	andi	r23,r19,65535
    cd50:	000cf400 	call	cf40 <__udivsi3>
    cd54:	b809883a 	mov	r4,r23
    cd58:	100b883a 	mov	r5,r2
    cd5c:	000cffc0 	call	cffc <__mulsi3>
    cd60:	a008943a 	slli	r4,r20,16
    cd64:	a806d43a 	srli	r3,r21,16
    cd68:	84a8983a 	sll	r20,r16,r18
    cd6c:	1906b03a 	or	r3,r3,r4
    cd70:	1880042e 	bgeu	r3,r2,cd84 <__umoddi3+0x500>
    cd74:	1cc7883a 	add	r3,r3,r19
    cd78:	1cc00236 	bltu	r3,r19,cd84 <__umoddi3+0x500>
    cd7c:	1880012e 	bgeu	r3,r2,cd84 <__umoddi3+0x500>
    cd80:	1cc7883a 	add	r3,r3,r19
    cd84:	18a3c83a 	sub	r17,r3,r2
    cd88:	b00b883a 	mov	r5,r22
    cd8c:	8809883a 	mov	r4,r17
    cd90:	000cfa40 	call	cfa4 <__umodsi3>
    cd94:	b00b883a 	mov	r5,r22
    cd98:	8809883a 	mov	r4,r17
    cd9c:	1021883a 	mov	r16,r2
    cda0:	000cf400 	call	cf40 <__udivsi3>
    cda4:	100b883a 	mov	r5,r2
    cda8:	b809883a 	mov	r4,r23
    cdac:	8020943a 	slli	r16,r16,16
    cdb0:	000cffc0 	call	cffc <__mulsi3>
    cdb4:	a8ffffcc 	andi	r3,r21,65535
    cdb8:	1c06b03a 	or	r3,r3,r16
    cdbc:	1880042e 	bgeu	r3,r2,cdd0 <__umoddi3+0x54c>
    cdc0:	1cc7883a 	add	r3,r3,r19
    cdc4:	1cc00236 	bltu	r3,r19,cdd0 <__umoddi3+0x54c>
    cdc8:	1880012e 	bgeu	r3,r2,cdd0 <__umoddi3+0x54c>
    cdcc:	1cc7883a 	add	r3,r3,r19
    cdd0:	18a3c83a 	sub	r17,r3,r2
    cdd4:	003f2906 	br	ca7c <__alt_exception_stack_pointer+0xf800ca7c>
    cdd8:	e48fc83a 	sub	r7,fp,r18
    cddc:	1d49c83a 	sub	r4,r3,r21
    cde0:	e1f9803a 	cmpltu	fp,fp,r7
    cde4:	2739c83a 	sub	fp,r4,fp
    cde8:	8f09c83a 	sub	r4,r17,fp
    cdec:	003fc306 	br	ccfc <__alt_exception_stack_pointer+0xf800ccfc>
    cdf0:	01000604 	movi	r4,24
    cdf4:	003ef906 	br	c9dc <__alt_exception_stack_pointer+0xf800c9dc>
    cdf8:	00800604 	movi	r2,24
    cdfc:	003f1306 	br	ca4c <__alt_exception_stack_pointer+0xf800ca4c>
    ce00:	01000604 	movi	r4,24
    ce04:	003eb606 	br	c8e0 <__alt_exception_stack_pointer+0xf800c8e0>
    ce08:	40bf902e 	bgeu	r8,r2,cc4c <__alt_exception_stack_pointer+0xf800cc4c>
    ce0c:	b5bfff84 	addi	r22,r22,-2
    ce10:	4551883a 	add	r8,r8,r21
    ce14:	003f8e06 	br	cc50 <__alt_exception_stack_pointer+0xf800cc50>
    ce18:	18bf762e 	bgeu	r3,r2,cbf4 <__alt_exception_stack_pointer+0xf800cbf4>
    ce1c:	8c7fff84 	addi	r17,r17,-2
    ce20:	1d47883a 	add	r3,r3,r21
    ce24:	003f7406 	br	cbf8 <__alt_exception_stack_pointer+0xf800cbf8>
    ce28:	1cc7883a 	add	r3,r3,r19
    ce2c:	003ecd06 	br	c964 <__alt_exception_stack_pointer+0xf800c964>
    ce30:	8005883a 	mov	r2,r16
    ce34:	003ef806 	br	ca18 <__alt_exception_stack_pointer+0xf800ca18>
    ce38:	873fe736 	bltu	r16,fp,cdd8 <__alt_exception_stack_pointer+0xf800cdd8>
    ce3c:	e00f883a 	mov	r7,fp
    ce40:	0009883a 	mov	r4,zero
    ce44:	003fad06 	br	ccfc <__alt_exception_stack_pointer+0xf800ccfc>

0000ce48 <__divsi3>:
    ce48:	20001b16 	blt	r4,zero,ceb8 <__divsi3+0x70>
    ce4c:	000f883a 	mov	r7,zero
    ce50:	28001616 	blt	r5,zero,ceac <__divsi3+0x64>
    ce54:	200d883a 	mov	r6,r4
    ce58:	29001a2e 	bgeu	r5,r4,cec4 <__divsi3+0x7c>
    ce5c:	00800804 	movi	r2,32
    ce60:	00c00044 	movi	r3,1
    ce64:	00000106 	br	ce6c <__divsi3+0x24>
    ce68:	10000d26 	beq	r2,zero,cea0 <__divsi3+0x58>
    ce6c:	294b883a 	add	r5,r5,r5
    ce70:	10bfffc4 	addi	r2,r2,-1
    ce74:	18c7883a 	add	r3,r3,r3
    ce78:	293ffb36 	bltu	r5,r4,ce68 <__alt_exception_stack_pointer+0xf800ce68>
    ce7c:	0005883a 	mov	r2,zero
    ce80:	18000726 	beq	r3,zero,cea0 <__divsi3+0x58>
    ce84:	0005883a 	mov	r2,zero
    ce88:	31400236 	bltu	r6,r5,ce94 <__divsi3+0x4c>
    ce8c:	314dc83a 	sub	r6,r6,r5
    ce90:	10c4b03a 	or	r2,r2,r3
    ce94:	1806d07a 	srli	r3,r3,1
    ce98:	280ad07a 	srli	r5,r5,1
    ce9c:	183ffa1e 	bne	r3,zero,ce88 <__alt_exception_stack_pointer+0xf800ce88>
    cea0:	38000126 	beq	r7,zero,cea8 <__divsi3+0x60>
    cea4:	0085c83a 	sub	r2,zero,r2
    cea8:	f800283a 	ret
    ceac:	014bc83a 	sub	r5,zero,r5
    ceb0:	39c0005c 	xori	r7,r7,1
    ceb4:	003fe706 	br	ce54 <__alt_exception_stack_pointer+0xf800ce54>
    ceb8:	0109c83a 	sub	r4,zero,r4
    cebc:	01c00044 	movi	r7,1
    cec0:	003fe306 	br	ce50 <__alt_exception_stack_pointer+0xf800ce50>
    cec4:	00c00044 	movi	r3,1
    cec8:	003fee06 	br	ce84 <__alt_exception_stack_pointer+0xf800ce84>

0000cecc <__modsi3>:
    cecc:	20001716 	blt	r4,zero,cf2c <__modsi3+0x60>
    ced0:	000f883a 	mov	r7,zero
    ced4:	2005883a 	mov	r2,r4
    ced8:	28001216 	blt	r5,zero,cf24 <__modsi3+0x58>
    cedc:	2900162e 	bgeu	r5,r4,cf38 <__modsi3+0x6c>
    cee0:	01800804 	movi	r6,32
    cee4:	00c00044 	movi	r3,1
    cee8:	00000106 	br	cef0 <__modsi3+0x24>
    ceec:	30000a26 	beq	r6,zero,cf18 <__modsi3+0x4c>
    cef0:	294b883a 	add	r5,r5,r5
    cef4:	31bfffc4 	addi	r6,r6,-1
    cef8:	18c7883a 	add	r3,r3,r3
    cefc:	293ffb36 	bltu	r5,r4,ceec <__alt_exception_stack_pointer+0xf800ceec>
    cf00:	18000526 	beq	r3,zero,cf18 <__modsi3+0x4c>
    cf04:	1806d07a 	srli	r3,r3,1
    cf08:	11400136 	bltu	r2,r5,cf10 <__modsi3+0x44>
    cf0c:	1145c83a 	sub	r2,r2,r5
    cf10:	280ad07a 	srli	r5,r5,1
    cf14:	183ffb1e 	bne	r3,zero,cf04 <__alt_exception_stack_pointer+0xf800cf04>
    cf18:	38000126 	beq	r7,zero,cf20 <__modsi3+0x54>
    cf1c:	0085c83a 	sub	r2,zero,r2
    cf20:	f800283a 	ret
    cf24:	014bc83a 	sub	r5,zero,r5
    cf28:	003fec06 	br	cedc <__alt_exception_stack_pointer+0xf800cedc>
    cf2c:	0109c83a 	sub	r4,zero,r4
    cf30:	01c00044 	movi	r7,1
    cf34:	003fe706 	br	ced4 <__alt_exception_stack_pointer+0xf800ced4>
    cf38:	00c00044 	movi	r3,1
    cf3c:	003ff106 	br	cf04 <__alt_exception_stack_pointer+0xf800cf04>

0000cf40 <__udivsi3>:
    cf40:	200d883a 	mov	r6,r4
    cf44:	2900152e 	bgeu	r5,r4,cf9c <__udivsi3+0x5c>
    cf48:	28001416 	blt	r5,zero,cf9c <__udivsi3+0x5c>
    cf4c:	00800804 	movi	r2,32
    cf50:	00c00044 	movi	r3,1
    cf54:	00000206 	br	cf60 <__udivsi3+0x20>
    cf58:	10000e26 	beq	r2,zero,cf94 <__udivsi3+0x54>
    cf5c:	28000516 	blt	r5,zero,cf74 <__udivsi3+0x34>
    cf60:	294b883a 	add	r5,r5,r5
    cf64:	10bfffc4 	addi	r2,r2,-1
    cf68:	18c7883a 	add	r3,r3,r3
    cf6c:	293ffa36 	bltu	r5,r4,cf58 <__alt_exception_stack_pointer+0xf800cf58>
    cf70:	18000826 	beq	r3,zero,cf94 <__udivsi3+0x54>
    cf74:	0005883a 	mov	r2,zero
    cf78:	31400236 	bltu	r6,r5,cf84 <__udivsi3+0x44>
    cf7c:	314dc83a 	sub	r6,r6,r5
    cf80:	10c4b03a 	or	r2,r2,r3
    cf84:	1806d07a 	srli	r3,r3,1
    cf88:	280ad07a 	srli	r5,r5,1
    cf8c:	183ffa1e 	bne	r3,zero,cf78 <__alt_exception_stack_pointer+0xf800cf78>
    cf90:	f800283a 	ret
    cf94:	0005883a 	mov	r2,zero
    cf98:	f800283a 	ret
    cf9c:	00c00044 	movi	r3,1
    cfa0:	003ff406 	br	cf74 <__alt_exception_stack_pointer+0xf800cf74>

0000cfa4 <__umodsi3>:
    cfa4:	2005883a 	mov	r2,r4
    cfa8:	2900122e 	bgeu	r5,r4,cff4 <__umodsi3+0x50>
    cfac:	28001116 	blt	r5,zero,cff4 <__umodsi3+0x50>
    cfb0:	01800804 	movi	r6,32
    cfb4:	00c00044 	movi	r3,1
    cfb8:	00000206 	br	cfc4 <__umodsi3+0x20>
    cfbc:	30000c26 	beq	r6,zero,cff0 <__umodsi3+0x4c>
    cfc0:	28000516 	blt	r5,zero,cfd8 <__umodsi3+0x34>
    cfc4:	294b883a 	add	r5,r5,r5
    cfc8:	31bfffc4 	addi	r6,r6,-1
    cfcc:	18c7883a 	add	r3,r3,r3
    cfd0:	293ffa36 	bltu	r5,r4,cfbc <__alt_exception_stack_pointer+0xf800cfbc>
    cfd4:	18000626 	beq	r3,zero,cff0 <__umodsi3+0x4c>
    cfd8:	1806d07a 	srli	r3,r3,1
    cfdc:	11400136 	bltu	r2,r5,cfe4 <__umodsi3+0x40>
    cfe0:	1145c83a 	sub	r2,r2,r5
    cfe4:	280ad07a 	srli	r5,r5,1
    cfe8:	183ffb1e 	bne	r3,zero,cfd8 <__alt_exception_stack_pointer+0xf800cfd8>
    cfec:	f800283a 	ret
    cff0:	f800283a 	ret
    cff4:	00c00044 	movi	r3,1
    cff8:	003ff706 	br	cfd8 <__alt_exception_stack_pointer+0xf800cfd8>

0000cffc <__mulsi3>:
    cffc:	0005883a 	mov	r2,zero
    d000:	20000726 	beq	r4,zero,d020 <__mulsi3+0x24>
    d004:	20c0004c 	andi	r3,r4,1
    d008:	2008d07a 	srli	r4,r4,1
    d00c:	18000126 	beq	r3,zero,d014 <__mulsi3+0x18>
    d010:	1145883a 	add	r2,r2,r5
    d014:	294b883a 	add	r5,r5,r5
    d018:	203ffa1e 	bne	r4,zero,d004 <__alt_exception_stack_pointer+0xf800d004>
    d01c:	f800283a 	ret
    d020:	f800283a 	ret

0000d024 <__adddf3>:
    d024:	02c00434 	movhi	r11,16
    d028:	5affffc4 	addi	r11,r11,-1
    d02c:	2806d7fa 	srli	r3,r5,31
    d030:	2ad4703a 	and	r10,r5,r11
    d034:	3ad2703a 	and	r9,r7,r11
    d038:	3804d53a 	srli	r2,r7,20
    d03c:	3018d77a 	srli	r12,r6,29
    d040:	280ad53a 	srli	r5,r5,20
    d044:	501490fa 	slli	r10,r10,3
    d048:	2010d77a 	srli	r8,r4,29
    d04c:	481290fa 	slli	r9,r9,3
    d050:	380ed7fa 	srli	r7,r7,31
    d054:	defffb04 	addi	sp,sp,-20
    d058:	dc800215 	stw	r18,8(sp)
    d05c:	dc400115 	stw	r17,4(sp)
    d060:	dc000015 	stw	r16,0(sp)
    d064:	dfc00415 	stw	ra,16(sp)
    d068:	dcc00315 	stw	r19,12(sp)
    d06c:	1c803fcc 	andi	r18,r3,255
    d070:	2c01ffcc 	andi	r16,r5,2047
    d074:	5210b03a 	or	r8,r10,r8
    d078:	202290fa 	slli	r17,r4,3
    d07c:	1081ffcc 	andi	r2,r2,2047
    d080:	4b12b03a 	or	r9,r9,r12
    d084:	300c90fa 	slli	r6,r6,3
    d088:	91c07526 	beq	r18,r7,d260 <__adddf3+0x23c>
    d08c:	8087c83a 	sub	r3,r16,r2
    d090:	00c0ab0e 	bge	zero,r3,d340 <__adddf3+0x31c>
    d094:	10002a1e 	bne	r2,zero,d140 <__adddf3+0x11c>
    d098:	4984b03a 	or	r2,r9,r6
    d09c:	1000961e 	bne	r2,zero,d2f8 <__adddf3+0x2d4>
    d0a0:	888001cc 	andi	r2,r17,7
    d0a4:	10000726 	beq	r2,zero,d0c4 <__adddf3+0xa0>
    d0a8:	888003cc 	andi	r2,r17,15
    d0ac:	00c00104 	movi	r3,4
    d0b0:	10c00426 	beq	r2,r3,d0c4 <__adddf3+0xa0>
    d0b4:	88c7883a 	add	r3,r17,r3
    d0b8:	1c63803a 	cmpltu	r17,r3,r17
    d0bc:	4451883a 	add	r8,r8,r17
    d0c0:	1823883a 	mov	r17,r3
    d0c4:	4080202c 	andhi	r2,r8,128
    d0c8:	10005926 	beq	r2,zero,d230 <__adddf3+0x20c>
    d0cc:	84000044 	addi	r16,r16,1
    d0d0:	0081ffc4 	movi	r2,2047
    d0d4:	8080ba26 	beq	r16,r2,d3c0 <__adddf3+0x39c>
    d0d8:	00bfe034 	movhi	r2,65408
    d0dc:	10bfffc4 	addi	r2,r2,-1
    d0e0:	4090703a 	and	r8,r8,r2
    d0e4:	4004977a 	slli	r2,r8,29
    d0e8:	4010927a 	slli	r8,r8,9
    d0ec:	8822d0fa 	srli	r17,r17,3
    d0f0:	8401ffcc 	andi	r16,r16,2047
    d0f4:	4010d33a 	srli	r8,r8,12
    d0f8:	9007883a 	mov	r3,r18
    d0fc:	1444b03a 	or	r2,r2,r17
    d100:	8401ffcc 	andi	r16,r16,2047
    d104:	8020953a 	slli	r16,r16,20
    d108:	18c03fcc 	andi	r3,r3,255
    d10c:	01000434 	movhi	r4,16
    d110:	213fffc4 	addi	r4,r4,-1
    d114:	180697fa 	slli	r3,r3,31
    d118:	4110703a 	and	r8,r8,r4
    d11c:	4410b03a 	or	r8,r8,r16
    d120:	40c6b03a 	or	r3,r8,r3
    d124:	dfc00417 	ldw	ra,16(sp)
    d128:	dcc00317 	ldw	r19,12(sp)
    d12c:	dc800217 	ldw	r18,8(sp)
    d130:	dc400117 	ldw	r17,4(sp)
    d134:	dc000017 	ldw	r16,0(sp)
    d138:	dec00504 	addi	sp,sp,20
    d13c:	f800283a 	ret
    d140:	0081ffc4 	movi	r2,2047
    d144:	80bfd626 	beq	r16,r2,d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d148:	4a402034 	orhi	r9,r9,128
    d14c:	00800e04 	movi	r2,56
    d150:	10c09f16 	blt	r2,r3,d3d0 <__adddf3+0x3ac>
    d154:	008007c4 	movi	r2,31
    d158:	10c0c216 	blt	r2,r3,d464 <__adddf3+0x440>
    d15c:	00800804 	movi	r2,32
    d160:	10c5c83a 	sub	r2,r2,r3
    d164:	488a983a 	sll	r5,r9,r2
    d168:	30c8d83a 	srl	r4,r6,r3
    d16c:	3084983a 	sll	r2,r6,r2
    d170:	48c6d83a 	srl	r3,r9,r3
    d174:	290cb03a 	or	r6,r5,r4
    d178:	1004c03a 	cmpne	r2,r2,zero
    d17c:	308cb03a 	or	r6,r6,r2
    d180:	898dc83a 	sub	r6,r17,r6
    d184:	89a3803a 	cmpltu	r17,r17,r6
    d188:	40d1c83a 	sub	r8,r8,r3
    d18c:	4451c83a 	sub	r8,r8,r17
    d190:	3023883a 	mov	r17,r6
    d194:	4080202c 	andhi	r2,r8,128
    d198:	10002326 	beq	r2,zero,d228 <__adddf3+0x204>
    d19c:	04c02034 	movhi	r19,128
    d1a0:	9cffffc4 	addi	r19,r19,-1
    d1a4:	44e6703a 	and	r19,r8,r19
    d1a8:	98007626 	beq	r19,zero,d384 <__adddf3+0x360>
    d1ac:	9809883a 	mov	r4,r19
    d1b0:	000f8640 	call	f864 <__clzsi2>
    d1b4:	10fffe04 	addi	r3,r2,-8
    d1b8:	010007c4 	movi	r4,31
    d1bc:	20c07716 	blt	r4,r3,d39c <__adddf3+0x378>
    d1c0:	00800804 	movi	r2,32
    d1c4:	10c5c83a 	sub	r2,r2,r3
    d1c8:	8884d83a 	srl	r2,r17,r2
    d1cc:	98d0983a 	sll	r8,r19,r3
    d1d0:	88e2983a 	sll	r17,r17,r3
    d1d4:	1204b03a 	or	r2,r2,r8
    d1d8:	1c007416 	blt	r3,r16,d3ac <__adddf3+0x388>
    d1dc:	1c21c83a 	sub	r16,r3,r16
    d1e0:	82000044 	addi	r8,r16,1
    d1e4:	00c007c4 	movi	r3,31
    d1e8:	1a009116 	blt	r3,r8,d430 <__adddf3+0x40c>
    d1ec:	00c00804 	movi	r3,32
    d1f0:	1a07c83a 	sub	r3,r3,r8
    d1f4:	8a08d83a 	srl	r4,r17,r8
    d1f8:	88e2983a 	sll	r17,r17,r3
    d1fc:	10c6983a 	sll	r3,r2,r3
    d200:	1210d83a 	srl	r8,r2,r8
    d204:	8804c03a 	cmpne	r2,r17,zero
    d208:	1906b03a 	or	r3,r3,r4
    d20c:	18a2b03a 	or	r17,r3,r2
    d210:	0021883a 	mov	r16,zero
    d214:	003fa206 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d218:	1890b03a 	or	r8,r3,r2
    d21c:	40017d26 	beq	r8,zero,d814 <__adddf3+0x7f0>
    d220:	1011883a 	mov	r8,r2
    d224:	1823883a 	mov	r17,r3
    d228:	888001cc 	andi	r2,r17,7
    d22c:	103f9e1e 	bne	r2,zero,d0a8 <__alt_exception_stack_pointer+0xf800d0a8>
    d230:	4004977a 	slli	r2,r8,29
    d234:	8822d0fa 	srli	r17,r17,3
    d238:	4010d0fa 	srli	r8,r8,3
    d23c:	9007883a 	mov	r3,r18
    d240:	1444b03a 	or	r2,r2,r17
    d244:	0101ffc4 	movi	r4,2047
    d248:	81002426 	beq	r16,r4,d2dc <__adddf3+0x2b8>
    d24c:	8120703a 	and	r16,r16,r4
    d250:	01000434 	movhi	r4,16
    d254:	213fffc4 	addi	r4,r4,-1
    d258:	4110703a 	and	r8,r8,r4
    d25c:	003fa806 	br	d100 <__alt_exception_stack_pointer+0xf800d100>
    d260:	8089c83a 	sub	r4,r16,r2
    d264:	01005e0e 	bge	zero,r4,d3e0 <__adddf3+0x3bc>
    d268:	10002b26 	beq	r2,zero,d318 <__adddf3+0x2f4>
    d26c:	0081ffc4 	movi	r2,2047
    d270:	80bf8b26 	beq	r16,r2,d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d274:	4a402034 	orhi	r9,r9,128
    d278:	00800e04 	movi	r2,56
    d27c:	1100a40e 	bge	r2,r4,d510 <__adddf3+0x4ec>
    d280:	498cb03a 	or	r6,r9,r6
    d284:	300ac03a 	cmpne	r5,r6,zero
    d288:	0013883a 	mov	r9,zero
    d28c:	2c4b883a 	add	r5,r5,r17
    d290:	2c63803a 	cmpltu	r17,r5,r17
    d294:	4a11883a 	add	r8,r9,r8
    d298:	8a11883a 	add	r8,r17,r8
    d29c:	2823883a 	mov	r17,r5
    d2a0:	4080202c 	andhi	r2,r8,128
    d2a4:	103fe026 	beq	r2,zero,d228 <__alt_exception_stack_pointer+0xf800d228>
    d2a8:	84000044 	addi	r16,r16,1
    d2ac:	0081ffc4 	movi	r2,2047
    d2b0:	8080d226 	beq	r16,r2,d5fc <__adddf3+0x5d8>
    d2b4:	00bfe034 	movhi	r2,65408
    d2b8:	10bfffc4 	addi	r2,r2,-1
    d2bc:	4090703a 	and	r8,r8,r2
    d2c0:	880ad07a 	srli	r5,r17,1
    d2c4:	400897fa 	slli	r4,r8,31
    d2c8:	88c0004c 	andi	r3,r17,1
    d2cc:	28e2b03a 	or	r17,r5,r3
    d2d0:	4010d07a 	srli	r8,r8,1
    d2d4:	2462b03a 	or	r17,r4,r17
    d2d8:	003f7106 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d2dc:	4088b03a 	or	r4,r8,r2
    d2e0:	20014526 	beq	r4,zero,d7f8 <__adddf3+0x7d4>
    d2e4:	01000434 	movhi	r4,16
    d2e8:	42000234 	orhi	r8,r8,8
    d2ec:	213fffc4 	addi	r4,r4,-1
    d2f0:	4110703a 	and	r8,r8,r4
    d2f4:	003f8206 	br	d100 <__alt_exception_stack_pointer+0xf800d100>
    d2f8:	18ffffc4 	addi	r3,r3,-1
    d2fc:	1800491e 	bne	r3,zero,d424 <__adddf3+0x400>
    d300:	898bc83a 	sub	r5,r17,r6
    d304:	8963803a 	cmpltu	r17,r17,r5
    d308:	4251c83a 	sub	r8,r8,r9
    d30c:	4451c83a 	sub	r8,r8,r17
    d310:	2823883a 	mov	r17,r5
    d314:	003f9f06 	br	d194 <__alt_exception_stack_pointer+0xf800d194>
    d318:	4984b03a 	or	r2,r9,r6
    d31c:	103f6026 	beq	r2,zero,d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d320:	213fffc4 	addi	r4,r4,-1
    d324:	2000931e 	bne	r4,zero,d574 <__adddf3+0x550>
    d328:	898d883a 	add	r6,r17,r6
    d32c:	3463803a 	cmpltu	r17,r6,r17
    d330:	4251883a 	add	r8,r8,r9
    d334:	8a11883a 	add	r8,r17,r8
    d338:	3023883a 	mov	r17,r6
    d33c:	003fd806 	br	d2a0 <__alt_exception_stack_pointer+0xf800d2a0>
    d340:	1800541e 	bne	r3,zero,d494 <__adddf3+0x470>
    d344:	80800044 	addi	r2,r16,1
    d348:	1081ffcc 	andi	r2,r2,2047
    d34c:	00c00044 	movi	r3,1
    d350:	1880a00e 	bge	r3,r2,d5d4 <__adddf3+0x5b0>
    d354:	8989c83a 	sub	r4,r17,r6
    d358:	8905803a 	cmpltu	r2,r17,r4
    d35c:	4267c83a 	sub	r19,r8,r9
    d360:	98a7c83a 	sub	r19,r19,r2
    d364:	9880202c 	andhi	r2,r19,128
    d368:	10006326 	beq	r2,zero,d4f8 <__adddf3+0x4d4>
    d36c:	3463c83a 	sub	r17,r6,r17
    d370:	4a07c83a 	sub	r3,r9,r8
    d374:	344d803a 	cmpltu	r6,r6,r17
    d378:	19a7c83a 	sub	r19,r3,r6
    d37c:	3825883a 	mov	r18,r7
    d380:	983f8a1e 	bne	r19,zero,d1ac <__alt_exception_stack_pointer+0xf800d1ac>
    d384:	8809883a 	mov	r4,r17
    d388:	000f8640 	call	f864 <__clzsi2>
    d38c:	10800804 	addi	r2,r2,32
    d390:	10fffe04 	addi	r3,r2,-8
    d394:	010007c4 	movi	r4,31
    d398:	20ff890e 	bge	r4,r3,d1c0 <__alt_exception_stack_pointer+0xf800d1c0>
    d39c:	10bff604 	addi	r2,r2,-40
    d3a0:	8884983a 	sll	r2,r17,r2
    d3a4:	0023883a 	mov	r17,zero
    d3a8:	1c3f8c0e 	bge	r3,r16,d1dc <__alt_exception_stack_pointer+0xf800d1dc>
    d3ac:	023fe034 	movhi	r8,65408
    d3b0:	423fffc4 	addi	r8,r8,-1
    d3b4:	80e1c83a 	sub	r16,r16,r3
    d3b8:	1210703a 	and	r8,r2,r8
    d3bc:	003f3806 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d3c0:	9007883a 	mov	r3,r18
    d3c4:	0011883a 	mov	r8,zero
    d3c8:	0005883a 	mov	r2,zero
    d3cc:	003f4c06 	br	d100 <__alt_exception_stack_pointer+0xf800d100>
    d3d0:	498cb03a 	or	r6,r9,r6
    d3d4:	300cc03a 	cmpne	r6,r6,zero
    d3d8:	0007883a 	mov	r3,zero
    d3dc:	003f6806 	br	d180 <__alt_exception_stack_pointer+0xf800d180>
    d3e0:	20009c1e 	bne	r4,zero,d654 <__adddf3+0x630>
    d3e4:	80800044 	addi	r2,r16,1
    d3e8:	1141ffcc 	andi	r5,r2,2047
    d3ec:	01000044 	movi	r4,1
    d3f0:	2140670e 	bge	r4,r5,d590 <__adddf3+0x56c>
    d3f4:	0101ffc4 	movi	r4,2047
    d3f8:	11007f26 	beq	r2,r4,d5f8 <__adddf3+0x5d4>
    d3fc:	898d883a 	add	r6,r17,r6
    d400:	4247883a 	add	r3,r8,r9
    d404:	3451803a 	cmpltu	r8,r6,r17
    d408:	40d1883a 	add	r8,r8,r3
    d40c:	402297fa 	slli	r17,r8,31
    d410:	300cd07a 	srli	r6,r6,1
    d414:	4010d07a 	srli	r8,r8,1
    d418:	1021883a 	mov	r16,r2
    d41c:	89a2b03a 	or	r17,r17,r6
    d420:	003f1f06 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d424:	0081ffc4 	movi	r2,2047
    d428:	80bf481e 	bne	r16,r2,d14c <__alt_exception_stack_pointer+0xf800d14c>
    d42c:	003f1c06 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d430:	843ff844 	addi	r16,r16,-31
    d434:	01000804 	movi	r4,32
    d438:	1406d83a 	srl	r3,r2,r16
    d43c:	41005026 	beq	r8,r4,d580 <__adddf3+0x55c>
    d440:	01001004 	movi	r4,64
    d444:	2211c83a 	sub	r8,r4,r8
    d448:	1204983a 	sll	r2,r2,r8
    d44c:	88a2b03a 	or	r17,r17,r2
    d450:	8822c03a 	cmpne	r17,r17,zero
    d454:	1c62b03a 	or	r17,r3,r17
    d458:	0011883a 	mov	r8,zero
    d45c:	0021883a 	mov	r16,zero
    d460:	003f7106 	br	d228 <__alt_exception_stack_pointer+0xf800d228>
    d464:	193ff804 	addi	r4,r3,-32
    d468:	00800804 	movi	r2,32
    d46c:	4908d83a 	srl	r4,r9,r4
    d470:	18804526 	beq	r3,r2,d588 <__adddf3+0x564>
    d474:	00801004 	movi	r2,64
    d478:	10c5c83a 	sub	r2,r2,r3
    d47c:	4886983a 	sll	r3,r9,r2
    d480:	198cb03a 	or	r6,r3,r6
    d484:	300cc03a 	cmpne	r6,r6,zero
    d488:	218cb03a 	or	r6,r4,r6
    d48c:	0007883a 	mov	r3,zero
    d490:	003f3b06 	br	d180 <__alt_exception_stack_pointer+0xf800d180>
    d494:	80002a26 	beq	r16,zero,d540 <__adddf3+0x51c>
    d498:	0101ffc4 	movi	r4,2047
    d49c:	11006826 	beq	r2,r4,d640 <__adddf3+0x61c>
    d4a0:	00c7c83a 	sub	r3,zero,r3
    d4a4:	42002034 	orhi	r8,r8,128
    d4a8:	01000e04 	movi	r4,56
    d4ac:	20c07c16 	blt	r4,r3,d6a0 <__adddf3+0x67c>
    d4b0:	010007c4 	movi	r4,31
    d4b4:	20c0da16 	blt	r4,r3,d820 <__adddf3+0x7fc>
    d4b8:	01000804 	movi	r4,32
    d4bc:	20c9c83a 	sub	r4,r4,r3
    d4c0:	4114983a 	sll	r10,r8,r4
    d4c4:	88cad83a 	srl	r5,r17,r3
    d4c8:	8908983a 	sll	r4,r17,r4
    d4cc:	40c6d83a 	srl	r3,r8,r3
    d4d0:	5162b03a 	or	r17,r10,r5
    d4d4:	2008c03a 	cmpne	r4,r4,zero
    d4d8:	8922b03a 	or	r17,r17,r4
    d4dc:	3463c83a 	sub	r17,r6,r17
    d4e0:	48c7c83a 	sub	r3,r9,r3
    d4e4:	344d803a 	cmpltu	r6,r6,r17
    d4e8:	1991c83a 	sub	r8,r3,r6
    d4ec:	1021883a 	mov	r16,r2
    d4f0:	3825883a 	mov	r18,r7
    d4f4:	003f2706 	br	d194 <__alt_exception_stack_pointer+0xf800d194>
    d4f8:	24d0b03a 	or	r8,r4,r19
    d4fc:	40001b1e 	bne	r8,zero,d56c <__adddf3+0x548>
    d500:	0005883a 	mov	r2,zero
    d504:	0007883a 	mov	r3,zero
    d508:	0021883a 	mov	r16,zero
    d50c:	003f4d06 	br	d244 <__alt_exception_stack_pointer+0xf800d244>
    d510:	008007c4 	movi	r2,31
    d514:	11003c16 	blt	r2,r4,d608 <__adddf3+0x5e4>
    d518:	00800804 	movi	r2,32
    d51c:	1105c83a 	sub	r2,r2,r4
    d520:	488e983a 	sll	r7,r9,r2
    d524:	310ad83a 	srl	r5,r6,r4
    d528:	3084983a 	sll	r2,r6,r2
    d52c:	4912d83a 	srl	r9,r9,r4
    d530:	394ab03a 	or	r5,r7,r5
    d534:	1004c03a 	cmpne	r2,r2,zero
    d538:	288ab03a 	or	r5,r5,r2
    d53c:	003f5306 	br	d28c <__alt_exception_stack_pointer+0xf800d28c>
    d540:	4448b03a 	or	r4,r8,r17
    d544:	20003e26 	beq	r4,zero,d640 <__adddf3+0x61c>
    d548:	00c6303a 	nor	r3,zero,r3
    d54c:	18003a1e 	bne	r3,zero,d638 <__adddf3+0x614>
    d550:	3463c83a 	sub	r17,r6,r17
    d554:	4a07c83a 	sub	r3,r9,r8
    d558:	344d803a 	cmpltu	r6,r6,r17
    d55c:	1991c83a 	sub	r8,r3,r6
    d560:	1021883a 	mov	r16,r2
    d564:	3825883a 	mov	r18,r7
    d568:	003f0a06 	br	d194 <__alt_exception_stack_pointer+0xf800d194>
    d56c:	2023883a 	mov	r17,r4
    d570:	003f0d06 	br	d1a8 <__alt_exception_stack_pointer+0xf800d1a8>
    d574:	0081ffc4 	movi	r2,2047
    d578:	80bf3f1e 	bne	r16,r2,d278 <__alt_exception_stack_pointer+0xf800d278>
    d57c:	003ec806 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d580:	0005883a 	mov	r2,zero
    d584:	003fb106 	br	d44c <__alt_exception_stack_pointer+0xf800d44c>
    d588:	0007883a 	mov	r3,zero
    d58c:	003fbc06 	br	d480 <__alt_exception_stack_pointer+0xf800d480>
    d590:	4444b03a 	or	r2,r8,r17
    d594:	8000871e 	bne	r16,zero,d7b4 <__adddf3+0x790>
    d598:	1000ba26 	beq	r2,zero,d884 <__adddf3+0x860>
    d59c:	4984b03a 	or	r2,r9,r6
    d5a0:	103ebf26 	beq	r2,zero,d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d5a4:	8985883a 	add	r2,r17,r6
    d5a8:	4247883a 	add	r3,r8,r9
    d5ac:	1451803a 	cmpltu	r8,r2,r17
    d5b0:	40d1883a 	add	r8,r8,r3
    d5b4:	40c0202c 	andhi	r3,r8,128
    d5b8:	1023883a 	mov	r17,r2
    d5bc:	183f1a26 	beq	r3,zero,d228 <__alt_exception_stack_pointer+0xf800d228>
    d5c0:	00bfe034 	movhi	r2,65408
    d5c4:	10bfffc4 	addi	r2,r2,-1
    d5c8:	2021883a 	mov	r16,r4
    d5cc:	4090703a 	and	r8,r8,r2
    d5d0:	003eb306 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d5d4:	4444b03a 	or	r2,r8,r17
    d5d8:	8000291e 	bne	r16,zero,d680 <__adddf3+0x65c>
    d5dc:	10004b1e 	bne	r2,zero,d70c <__adddf3+0x6e8>
    d5e0:	4990b03a 	or	r8,r9,r6
    d5e4:	40008b26 	beq	r8,zero,d814 <__adddf3+0x7f0>
    d5e8:	4811883a 	mov	r8,r9
    d5ec:	3023883a 	mov	r17,r6
    d5f0:	3825883a 	mov	r18,r7
    d5f4:	003eaa06 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d5f8:	1021883a 	mov	r16,r2
    d5fc:	0011883a 	mov	r8,zero
    d600:	0005883a 	mov	r2,zero
    d604:	003f0f06 	br	d244 <__alt_exception_stack_pointer+0xf800d244>
    d608:	217ff804 	addi	r5,r4,-32
    d60c:	00800804 	movi	r2,32
    d610:	494ad83a 	srl	r5,r9,r5
    d614:	20807d26 	beq	r4,r2,d80c <__adddf3+0x7e8>
    d618:	00801004 	movi	r2,64
    d61c:	1109c83a 	sub	r4,r2,r4
    d620:	4912983a 	sll	r9,r9,r4
    d624:	498cb03a 	or	r6,r9,r6
    d628:	300cc03a 	cmpne	r6,r6,zero
    d62c:	298ab03a 	or	r5,r5,r6
    d630:	0013883a 	mov	r9,zero
    d634:	003f1506 	br	d28c <__alt_exception_stack_pointer+0xf800d28c>
    d638:	0101ffc4 	movi	r4,2047
    d63c:	113f9a1e 	bne	r2,r4,d4a8 <__alt_exception_stack_pointer+0xf800d4a8>
    d640:	4811883a 	mov	r8,r9
    d644:	3023883a 	mov	r17,r6
    d648:	1021883a 	mov	r16,r2
    d64c:	3825883a 	mov	r18,r7
    d650:	003e9306 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d654:	8000161e 	bne	r16,zero,d6b0 <__adddf3+0x68c>
    d658:	444ab03a 	or	r5,r8,r17
    d65c:	28005126 	beq	r5,zero,d7a4 <__adddf3+0x780>
    d660:	0108303a 	nor	r4,zero,r4
    d664:	20004d1e 	bne	r4,zero,d79c <__adddf3+0x778>
    d668:	89a3883a 	add	r17,r17,r6
    d66c:	4253883a 	add	r9,r8,r9
    d670:	898d803a 	cmpltu	r6,r17,r6
    d674:	3251883a 	add	r8,r6,r9
    d678:	1021883a 	mov	r16,r2
    d67c:	003f0806 	br	d2a0 <__alt_exception_stack_pointer+0xf800d2a0>
    d680:	1000301e 	bne	r2,zero,d744 <__adddf3+0x720>
    d684:	4984b03a 	or	r2,r9,r6
    d688:	10007126 	beq	r2,zero,d850 <__adddf3+0x82c>
    d68c:	4811883a 	mov	r8,r9
    d690:	3023883a 	mov	r17,r6
    d694:	3825883a 	mov	r18,r7
    d698:	0401ffc4 	movi	r16,2047
    d69c:	003e8006 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d6a0:	4462b03a 	or	r17,r8,r17
    d6a4:	8822c03a 	cmpne	r17,r17,zero
    d6a8:	0007883a 	mov	r3,zero
    d6ac:	003f8b06 	br	d4dc <__alt_exception_stack_pointer+0xf800d4dc>
    d6b0:	0141ffc4 	movi	r5,2047
    d6b4:	11403b26 	beq	r2,r5,d7a4 <__adddf3+0x780>
    d6b8:	0109c83a 	sub	r4,zero,r4
    d6bc:	42002034 	orhi	r8,r8,128
    d6c0:	01400e04 	movi	r5,56
    d6c4:	29006716 	blt	r5,r4,d864 <__adddf3+0x840>
    d6c8:	014007c4 	movi	r5,31
    d6cc:	29007016 	blt	r5,r4,d890 <__adddf3+0x86c>
    d6d0:	01400804 	movi	r5,32
    d6d4:	290bc83a 	sub	r5,r5,r4
    d6d8:	4154983a 	sll	r10,r8,r5
    d6dc:	890ed83a 	srl	r7,r17,r4
    d6e0:	894a983a 	sll	r5,r17,r5
    d6e4:	4108d83a 	srl	r4,r8,r4
    d6e8:	51e2b03a 	or	r17,r10,r7
    d6ec:	280ac03a 	cmpne	r5,r5,zero
    d6f0:	8962b03a 	or	r17,r17,r5
    d6f4:	89a3883a 	add	r17,r17,r6
    d6f8:	2253883a 	add	r9,r4,r9
    d6fc:	898d803a 	cmpltu	r6,r17,r6
    d700:	3251883a 	add	r8,r6,r9
    d704:	1021883a 	mov	r16,r2
    d708:	003ee506 	br	d2a0 <__alt_exception_stack_pointer+0xf800d2a0>
    d70c:	4984b03a 	or	r2,r9,r6
    d710:	103e6326 	beq	r2,zero,d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d714:	8987c83a 	sub	r3,r17,r6
    d718:	88c9803a 	cmpltu	r4,r17,r3
    d71c:	4245c83a 	sub	r2,r8,r9
    d720:	1105c83a 	sub	r2,r2,r4
    d724:	1100202c 	andhi	r4,r2,128
    d728:	203ebb26 	beq	r4,zero,d218 <__alt_exception_stack_pointer+0xf800d218>
    d72c:	3463c83a 	sub	r17,r6,r17
    d730:	4a07c83a 	sub	r3,r9,r8
    d734:	344d803a 	cmpltu	r6,r6,r17
    d738:	1991c83a 	sub	r8,r3,r6
    d73c:	3825883a 	mov	r18,r7
    d740:	003e5706 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d744:	4984b03a 	or	r2,r9,r6
    d748:	10002e26 	beq	r2,zero,d804 <__adddf3+0x7e0>
    d74c:	4004d0fa 	srli	r2,r8,3
    d750:	8822d0fa 	srli	r17,r17,3
    d754:	4010977a 	slli	r8,r8,29
    d758:	10c0022c 	andhi	r3,r2,8
    d75c:	4462b03a 	or	r17,r8,r17
    d760:	18000826 	beq	r3,zero,d784 <__adddf3+0x760>
    d764:	4808d0fa 	srli	r4,r9,3
    d768:	20c0022c 	andhi	r3,r4,8
    d76c:	1800051e 	bne	r3,zero,d784 <__adddf3+0x760>
    d770:	300cd0fa 	srli	r6,r6,3
    d774:	4806977a 	slli	r3,r9,29
    d778:	2005883a 	mov	r2,r4
    d77c:	3825883a 	mov	r18,r7
    d780:	19a2b03a 	or	r17,r3,r6
    d784:	8810d77a 	srli	r8,r17,29
    d788:	100490fa 	slli	r2,r2,3
    d78c:	882290fa 	slli	r17,r17,3
    d790:	0401ffc4 	movi	r16,2047
    d794:	4090b03a 	or	r8,r8,r2
    d798:	003e4106 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d79c:	0141ffc4 	movi	r5,2047
    d7a0:	117fc71e 	bne	r2,r5,d6c0 <__alt_exception_stack_pointer+0xf800d6c0>
    d7a4:	4811883a 	mov	r8,r9
    d7a8:	3023883a 	mov	r17,r6
    d7ac:	1021883a 	mov	r16,r2
    d7b0:	003e3b06 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d7b4:	10002f26 	beq	r2,zero,d874 <__adddf3+0x850>
    d7b8:	4984b03a 	or	r2,r9,r6
    d7bc:	10001126 	beq	r2,zero,d804 <__adddf3+0x7e0>
    d7c0:	4004d0fa 	srli	r2,r8,3
    d7c4:	8822d0fa 	srli	r17,r17,3
    d7c8:	4010977a 	slli	r8,r8,29
    d7cc:	10c0022c 	andhi	r3,r2,8
    d7d0:	4462b03a 	or	r17,r8,r17
    d7d4:	183feb26 	beq	r3,zero,d784 <__alt_exception_stack_pointer+0xf800d784>
    d7d8:	4808d0fa 	srli	r4,r9,3
    d7dc:	20c0022c 	andhi	r3,r4,8
    d7e0:	183fe81e 	bne	r3,zero,d784 <__alt_exception_stack_pointer+0xf800d784>
    d7e4:	300cd0fa 	srli	r6,r6,3
    d7e8:	4806977a 	slli	r3,r9,29
    d7ec:	2005883a 	mov	r2,r4
    d7f0:	19a2b03a 	or	r17,r3,r6
    d7f4:	003fe306 	br	d784 <__alt_exception_stack_pointer+0xf800d784>
    d7f8:	0011883a 	mov	r8,zero
    d7fc:	0005883a 	mov	r2,zero
    d800:	003e3f06 	br	d100 <__alt_exception_stack_pointer+0xf800d100>
    d804:	0401ffc4 	movi	r16,2047
    d808:	003e2506 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d80c:	0013883a 	mov	r9,zero
    d810:	003f8406 	br	d624 <__alt_exception_stack_pointer+0xf800d624>
    d814:	0005883a 	mov	r2,zero
    d818:	0007883a 	mov	r3,zero
    d81c:	003e8906 	br	d244 <__alt_exception_stack_pointer+0xf800d244>
    d820:	197ff804 	addi	r5,r3,-32
    d824:	01000804 	movi	r4,32
    d828:	414ad83a 	srl	r5,r8,r5
    d82c:	19002426 	beq	r3,r4,d8c0 <__adddf3+0x89c>
    d830:	01001004 	movi	r4,64
    d834:	20c7c83a 	sub	r3,r4,r3
    d838:	40c6983a 	sll	r3,r8,r3
    d83c:	1c46b03a 	or	r3,r3,r17
    d840:	1806c03a 	cmpne	r3,r3,zero
    d844:	28e2b03a 	or	r17,r5,r3
    d848:	0007883a 	mov	r3,zero
    d84c:	003f2306 	br	d4dc <__alt_exception_stack_pointer+0xf800d4dc>
    d850:	0007883a 	mov	r3,zero
    d854:	5811883a 	mov	r8,r11
    d858:	00bfffc4 	movi	r2,-1
    d85c:	0401ffc4 	movi	r16,2047
    d860:	003e7806 	br	d244 <__alt_exception_stack_pointer+0xf800d244>
    d864:	4462b03a 	or	r17,r8,r17
    d868:	8822c03a 	cmpne	r17,r17,zero
    d86c:	0009883a 	mov	r4,zero
    d870:	003fa006 	br	d6f4 <__alt_exception_stack_pointer+0xf800d6f4>
    d874:	4811883a 	mov	r8,r9
    d878:	3023883a 	mov	r17,r6
    d87c:	0401ffc4 	movi	r16,2047
    d880:	003e0706 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d884:	4811883a 	mov	r8,r9
    d888:	3023883a 	mov	r17,r6
    d88c:	003e0406 	br	d0a0 <__alt_exception_stack_pointer+0xf800d0a0>
    d890:	21fff804 	addi	r7,r4,-32
    d894:	01400804 	movi	r5,32
    d898:	41ced83a 	srl	r7,r8,r7
    d89c:	21400a26 	beq	r4,r5,d8c8 <__adddf3+0x8a4>
    d8a0:	01401004 	movi	r5,64
    d8a4:	2909c83a 	sub	r4,r5,r4
    d8a8:	4108983a 	sll	r4,r8,r4
    d8ac:	2448b03a 	or	r4,r4,r17
    d8b0:	2008c03a 	cmpne	r4,r4,zero
    d8b4:	3922b03a 	or	r17,r7,r4
    d8b8:	0009883a 	mov	r4,zero
    d8bc:	003f8d06 	br	d6f4 <__alt_exception_stack_pointer+0xf800d6f4>
    d8c0:	0007883a 	mov	r3,zero
    d8c4:	003fdd06 	br	d83c <__alt_exception_stack_pointer+0xf800d83c>
    d8c8:	0009883a 	mov	r4,zero
    d8cc:	003ff706 	br	d8ac <__alt_exception_stack_pointer+0xf800d8ac>

0000d8d0 <__divdf3>:
    d8d0:	defff004 	addi	sp,sp,-64
    d8d4:	dc800815 	stw	r18,32(sp)
    d8d8:	2824d53a 	srli	r18,r5,20
    d8dc:	dd800c15 	stw	r22,48(sp)
    d8e0:	282cd7fa 	srli	r22,r5,31
    d8e4:	dc000615 	stw	r16,24(sp)
    d8e8:	04000434 	movhi	r16,16
    d8ec:	843fffc4 	addi	r16,r16,-1
    d8f0:	dfc00f15 	stw	ra,60(sp)
    d8f4:	df000e15 	stw	fp,56(sp)
    d8f8:	ddc00d15 	stw	r23,52(sp)
    d8fc:	dd400b15 	stw	r21,44(sp)
    d900:	dd000a15 	stw	r20,40(sp)
    d904:	dcc00915 	stw	r19,36(sp)
    d908:	dc400715 	stw	r17,28(sp)
    d90c:	9481ffcc 	andi	r18,r18,2047
    d910:	2c20703a 	and	r16,r5,r16
    d914:	b2003fcc 	andi	r8,r22,255
    d918:	90006126 	beq	r18,zero,daa0 <__divdf3+0x1d0>
    d91c:	0081ffc4 	movi	r2,2047
    d920:	202b883a 	mov	r21,r4
    d924:	90803726 	beq	r18,r2,da04 <__divdf3+0x134>
    d928:	80800434 	orhi	r2,r16,16
    d92c:	100490fa 	slli	r2,r2,3
    d930:	2020d77a 	srli	r16,r4,29
    d934:	202a90fa 	slli	r21,r4,3
    d938:	94bf0044 	addi	r18,r18,-1023
    d93c:	80a0b03a 	or	r16,r16,r2
    d940:	0013883a 	mov	r9,zero
    d944:	000b883a 	mov	r5,zero
    d948:	3806d53a 	srli	r3,r7,20
    d94c:	382ed7fa 	srli	r23,r7,31
    d950:	04400434 	movhi	r17,16
    d954:	8c7fffc4 	addi	r17,r17,-1
    d958:	18c1ffcc 	andi	r3,r3,2047
    d95c:	3029883a 	mov	r20,r6
    d960:	3c62703a 	and	r17,r7,r17
    d964:	bf003fcc 	andi	fp,r23,255
    d968:	18006e26 	beq	r3,zero,db24 <__divdf3+0x254>
    d96c:	0081ffc4 	movi	r2,2047
    d970:	18806626 	beq	r3,r2,db0c <__divdf3+0x23c>
    d974:	88800434 	orhi	r2,r17,16
    d978:	100490fa 	slli	r2,r2,3
    d97c:	3022d77a 	srli	r17,r6,29
    d980:	302890fa 	slli	r20,r6,3
    d984:	18ff0044 	addi	r3,r3,-1023
    d988:	88a2b03a 	or	r17,r17,r2
    d98c:	000f883a 	mov	r7,zero
    d990:	b5e6f03a 	xor	r19,r22,r23
    d994:	3a4cb03a 	or	r6,r7,r9
    d998:	008003c4 	movi	r2,15
    d99c:	9809883a 	mov	r4,r19
    d9a0:	90c7c83a 	sub	r3,r18,r3
    d9a4:	9cc03fcc 	andi	r19,r19,255
    d9a8:	11809636 	bltu	r2,r6,dc04 <__divdf3+0x334>
    d9ac:	300c90ba 	slli	r6,r6,2
    d9b0:	00800074 	movhi	r2,1
    d9b4:	10b67104 	addi	r2,r2,-9788
    d9b8:	308d883a 	add	r6,r6,r2
    d9bc:	30800017 	ldw	r2,0(r6)
    d9c0:	1000683a 	jmp	r2
    d9c4:	0000dc04 	movi	zero,880
    d9c8:	0000da3c 	xorhi	zero,zero,872
    d9cc:	0000dbf4 	movhi	zero,879
    d9d0:	0000da30 	cmpltui	zero,zero,872
    d9d4:	0000dbf4 	movhi	zero,879
    d9d8:	0000dbc8 	cmpgei	zero,zero,879
    d9dc:	0000dbf4 	movhi	zero,879
    d9e0:	0000da30 	cmpltui	zero,zero,872
    d9e4:	0000da3c 	xorhi	zero,zero,872
    d9e8:	0000da3c 	xorhi	zero,zero,872
    d9ec:	0000dbc8 	cmpgei	zero,zero,879
    d9f0:	0000da30 	cmpltui	zero,zero,872
    d9f4:	0000da20 	cmpeqi	zero,zero,872
    d9f8:	0000da20 	cmpeqi	zero,zero,872
    d9fc:	0000da20 	cmpeqi	zero,zero,872
    da00:	0000df8c 	andi	zero,zero,894
    da04:	2404b03a 	or	r2,r4,r16
    da08:	10006c1e 	bne	r2,zero,dbbc <__divdf3+0x2ec>
    da0c:	02400204 	movi	r9,8
    da10:	0021883a 	mov	r16,zero
    da14:	002b883a 	mov	r21,zero
    da18:	01400084 	movi	r5,2
    da1c:	003fca06 	br	d948 <__alt_exception_stack_pointer+0xf800d948>
    da20:	8023883a 	mov	r17,r16
    da24:	a829883a 	mov	r20,r21
    da28:	4039883a 	mov	fp,r8
    da2c:	280f883a 	mov	r7,r5
    da30:	00800084 	movi	r2,2
    da34:	3881601e 	bne	r7,r2,dfb8 <__divdf3+0x6e8>
    da38:	e027883a 	mov	r19,fp
    da3c:	9900004c 	andi	r4,r19,1
    da40:	0081ffc4 	movi	r2,2047
    da44:	0021883a 	mov	r16,zero
    da48:	002b883a 	mov	r21,zero
    da4c:	1004953a 	slli	r2,r2,20
    da50:	20c03fcc 	andi	r3,r4,255
    da54:	01400434 	movhi	r5,16
    da58:	297fffc4 	addi	r5,r5,-1
    da5c:	180697fa 	slli	r3,r3,31
    da60:	8160703a 	and	r16,r16,r5
    da64:	80a0b03a 	or	r16,r16,r2
    da68:	80c6b03a 	or	r3,r16,r3
    da6c:	a805883a 	mov	r2,r21
    da70:	dfc00f17 	ldw	ra,60(sp)
    da74:	df000e17 	ldw	fp,56(sp)
    da78:	ddc00d17 	ldw	r23,52(sp)
    da7c:	dd800c17 	ldw	r22,48(sp)
    da80:	dd400b17 	ldw	r21,44(sp)
    da84:	dd000a17 	ldw	r20,40(sp)
    da88:	dcc00917 	ldw	r19,36(sp)
    da8c:	dc800817 	ldw	r18,32(sp)
    da90:	dc400717 	ldw	r17,28(sp)
    da94:	dc000617 	ldw	r16,24(sp)
    da98:	dec01004 	addi	sp,sp,64
    da9c:	f800283a 	ret
    daa0:	2404b03a 	or	r2,r4,r16
    daa4:	2023883a 	mov	r17,r4
    daa8:	10003f26 	beq	r2,zero,dba8 <__divdf3+0x2d8>
    daac:	80015e26 	beq	r16,zero,e028 <__divdf3+0x758>
    dab0:	8009883a 	mov	r4,r16
    dab4:	d9800215 	stw	r6,8(sp)
    dab8:	d9c00515 	stw	r7,20(sp)
    dabc:	da000415 	stw	r8,16(sp)
    dac0:	000f8640 	call	f864 <__clzsi2>
    dac4:	d9800217 	ldw	r6,8(sp)
    dac8:	d9c00517 	ldw	r7,20(sp)
    dacc:	da000417 	ldw	r8,16(sp)
    dad0:	113ffd44 	addi	r4,r2,-11
    dad4:	00c00704 	movi	r3,28
    dad8:	19014f16 	blt	r3,r4,e018 <__divdf3+0x748>
    dadc:	00c00744 	movi	r3,29
    dae0:	157ffe04 	addi	r21,r2,-8
    dae4:	1907c83a 	sub	r3,r3,r4
    dae8:	8560983a 	sll	r16,r16,r21
    daec:	88c6d83a 	srl	r3,r17,r3
    daf0:	8d6a983a 	sll	r21,r17,r21
    daf4:	1c20b03a 	or	r16,r3,r16
    daf8:	1080fcc4 	addi	r2,r2,1011
    dafc:	00a5c83a 	sub	r18,zero,r2
    db00:	0013883a 	mov	r9,zero
    db04:	000b883a 	mov	r5,zero
    db08:	003f8f06 	br	d948 <__alt_exception_stack_pointer+0xf800d948>
    db0c:	3444b03a 	or	r2,r6,r17
    db10:	1000231e 	bne	r2,zero,dba0 <__divdf3+0x2d0>
    db14:	0023883a 	mov	r17,zero
    db18:	0029883a 	mov	r20,zero
    db1c:	01c00084 	movi	r7,2
    db20:	003f9b06 	br	d990 <__alt_exception_stack_pointer+0xf800d990>
    db24:	3444b03a 	or	r2,r6,r17
    db28:	10001926 	beq	r2,zero,db90 <__divdf3+0x2c0>
    db2c:	88014b26 	beq	r17,zero,e05c <__divdf3+0x78c>
    db30:	8809883a 	mov	r4,r17
    db34:	d9400115 	stw	r5,4(sp)
    db38:	d9800215 	stw	r6,8(sp)
    db3c:	da000415 	stw	r8,16(sp)
    db40:	da400315 	stw	r9,12(sp)
    db44:	000f8640 	call	f864 <__clzsi2>
    db48:	d9400117 	ldw	r5,4(sp)
    db4c:	d9800217 	ldw	r6,8(sp)
    db50:	da000417 	ldw	r8,16(sp)
    db54:	da400317 	ldw	r9,12(sp)
    db58:	113ffd44 	addi	r4,r2,-11
    db5c:	00c00704 	movi	r3,28
    db60:	19013a16 	blt	r3,r4,e04c <__divdf3+0x77c>
    db64:	00c00744 	movi	r3,29
    db68:	153ffe04 	addi	r20,r2,-8
    db6c:	1907c83a 	sub	r3,r3,r4
    db70:	8d22983a 	sll	r17,r17,r20
    db74:	30c6d83a 	srl	r3,r6,r3
    db78:	3528983a 	sll	r20,r6,r20
    db7c:	1c62b03a 	or	r17,r3,r17
    db80:	1080fcc4 	addi	r2,r2,1011
    db84:	0087c83a 	sub	r3,zero,r2
    db88:	000f883a 	mov	r7,zero
    db8c:	003f8006 	br	d990 <__alt_exception_stack_pointer+0xf800d990>
    db90:	0023883a 	mov	r17,zero
    db94:	0029883a 	mov	r20,zero
    db98:	01c00044 	movi	r7,1
    db9c:	003f7c06 	br	d990 <__alt_exception_stack_pointer+0xf800d990>
    dba0:	01c000c4 	movi	r7,3
    dba4:	003f7a06 	br	d990 <__alt_exception_stack_pointer+0xf800d990>
    dba8:	02400104 	movi	r9,4
    dbac:	0021883a 	mov	r16,zero
    dbb0:	002b883a 	mov	r21,zero
    dbb4:	01400044 	movi	r5,1
    dbb8:	003f6306 	br	d948 <__alt_exception_stack_pointer+0xf800d948>
    dbbc:	02400304 	movi	r9,12
    dbc0:	014000c4 	movi	r5,3
    dbc4:	003f6006 	br	d948 <__alt_exception_stack_pointer+0xf800d948>
    dbc8:	04000434 	movhi	r16,16
    dbcc:	0009883a 	mov	r4,zero
    dbd0:	843fffc4 	addi	r16,r16,-1
    dbd4:	057fffc4 	movi	r21,-1
    dbd8:	0081ffc4 	movi	r2,2047
    dbdc:	003f9b06 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    dbe0:	00c00044 	movi	r3,1
    dbe4:	1887c83a 	sub	r3,r3,r2
    dbe8:	01000e04 	movi	r4,56
    dbec:	20c1530e 	bge	r4,r3,e13c <__divdf3+0x86c>
    dbf0:	9900004c 	andi	r4,r19,1
    dbf4:	0005883a 	mov	r2,zero
    dbf8:	0021883a 	mov	r16,zero
    dbfc:	002b883a 	mov	r21,zero
    dc00:	003f9206 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    dc04:	8c012e36 	bltu	r17,r16,e0c0 <__divdf3+0x7f0>
    dc08:	84412c26 	beq	r16,r17,e0bc <__divdf3+0x7ec>
    dc0c:	a82f883a 	mov	r23,r21
    dc10:	18ffffc4 	addi	r3,r3,-1
    dc14:	002b883a 	mov	r21,zero
    dc18:	a004d63a 	srli	r2,r20,24
    dc1c:	8822923a 	slli	r17,r17,8
    dc20:	a028923a 	slli	r20,r20,8
    dc24:	8009883a 	mov	r4,r16
    dc28:	88acb03a 	or	r22,r17,r2
    dc2c:	dd000015 	stw	r20,0(sp)
    dc30:	b028d43a 	srli	r20,r22,16
    dc34:	d8c00215 	stw	r3,8(sp)
    dc38:	b4bfffcc 	andi	r18,r22,65535
    dc3c:	a00b883a 	mov	r5,r20
    dc40:	000cf400 	call	cf40 <__udivsi3>
    dc44:	100b883a 	mov	r5,r2
    dc48:	9009883a 	mov	r4,r18
    dc4c:	1023883a 	mov	r17,r2
    dc50:	000cffc0 	call	cffc <__mulsi3>
    dc54:	8009883a 	mov	r4,r16
    dc58:	a00b883a 	mov	r5,r20
    dc5c:	1039883a 	mov	fp,r2
    dc60:	000cfa40 	call	cfa4 <__umodsi3>
    dc64:	1004943a 	slli	r2,r2,16
    dc68:	b808d43a 	srli	r4,r23,16
    dc6c:	d8c00217 	ldw	r3,8(sp)
    dc70:	2084b03a 	or	r2,r4,r2
    dc74:	1700062e 	bgeu	r2,fp,dc90 <__divdf3+0x3c0>
    dc78:	1585883a 	add	r2,r2,r22
    dc7c:	893fffc4 	addi	r4,r17,-1
    dc80:	15811d36 	bltu	r2,r22,e0f8 <__divdf3+0x828>
    dc84:	17011c2e 	bgeu	r2,fp,e0f8 <__divdf3+0x828>
    dc88:	8c7fff84 	addi	r17,r17,-2
    dc8c:	1585883a 	add	r2,r2,r22
    dc90:	1739c83a 	sub	fp,r2,fp
    dc94:	a00b883a 	mov	r5,r20
    dc98:	e009883a 	mov	r4,fp
    dc9c:	d8c00215 	stw	r3,8(sp)
    dca0:	000cf400 	call	cf40 <__udivsi3>
    dca4:	100b883a 	mov	r5,r2
    dca8:	9009883a 	mov	r4,r18
    dcac:	1021883a 	mov	r16,r2
    dcb0:	000cffc0 	call	cffc <__mulsi3>
    dcb4:	a00b883a 	mov	r5,r20
    dcb8:	e009883a 	mov	r4,fp
    dcbc:	d8800415 	stw	r2,16(sp)
    dcc0:	000cfa40 	call	cfa4 <__umodsi3>
    dcc4:	1004943a 	slli	r2,r2,16
    dcc8:	da000417 	ldw	r8,16(sp)
    dccc:	bdffffcc 	andi	r23,r23,65535
    dcd0:	b884b03a 	or	r2,r23,r2
    dcd4:	d8c00217 	ldw	r3,8(sp)
    dcd8:	1200062e 	bgeu	r2,r8,dcf4 <__divdf3+0x424>
    dcdc:	1585883a 	add	r2,r2,r22
    dce0:	813fffc4 	addi	r4,r16,-1
    dce4:	15810236 	bltu	r2,r22,e0f0 <__divdf3+0x820>
    dce8:	1201012e 	bgeu	r2,r8,e0f0 <__divdf3+0x820>
    dcec:	843fff84 	addi	r16,r16,-2
    dcf0:	1585883a 	add	r2,r2,r22
    dcf4:	8822943a 	slli	r17,r17,16
    dcf8:	d9800017 	ldw	r6,0(sp)
    dcfc:	1211c83a 	sub	r8,r2,r8
    dd00:	8c22b03a 	or	r17,r17,r16
    dd04:	373fffcc 	andi	fp,r6,65535
    dd08:	8abfffcc 	andi	r10,r17,65535
    dd0c:	8820d43a 	srli	r16,r17,16
    dd10:	5009883a 	mov	r4,r10
    dd14:	e00b883a 	mov	r5,fp
    dd18:	302ed43a 	srli	r23,r6,16
    dd1c:	d8c00215 	stw	r3,8(sp)
    dd20:	da000415 	stw	r8,16(sp)
    dd24:	da800115 	stw	r10,4(sp)
    dd28:	000cffc0 	call	cffc <__mulsi3>
    dd2c:	800b883a 	mov	r5,r16
    dd30:	e009883a 	mov	r4,fp
    dd34:	d8800515 	stw	r2,20(sp)
    dd38:	000cffc0 	call	cffc <__mulsi3>
    dd3c:	8009883a 	mov	r4,r16
    dd40:	b80b883a 	mov	r5,r23
    dd44:	d8800315 	stw	r2,12(sp)
    dd48:	000cffc0 	call	cffc <__mulsi3>
    dd4c:	da800117 	ldw	r10,4(sp)
    dd50:	b80b883a 	mov	r5,r23
    dd54:	1021883a 	mov	r16,r2
    dd58:	5009883a 	mov	r4,r10
    dd5c:	000cffc0 	call	cffc <__mulsi3>
    dd60:	d9c00517 	ldw	r7,20(sp)
    dd64:	da400317 	ldw	r9,12(sp)
    dd68:	d8c00217 	ldw	r3,8(sp)
    dd6c:	3808d43a 	srli	r4,r7,16
    dd70:	1245883a 	add	r2,r2,r9
    dd74:	da000417 	ldw	r8,16(sp)
    dd78:	2085883a 	add	r2,r4,r2
    dd7c:	1240022e 	bgeu	r2,r9,dd88 <__divdf3+0x4b8>
    dd80:	01000074 	movhi	r4,1
    dd84:	8121883a 	add	r16,r16,r4
    dd88:	1008d43a 	srli	r4,r2,16
    dd8c:	1004943a 	slli	r2,r2,16
    dd90:	39ffffcc 	andi	r7,r7,65535
    dd94:	2409883a 	add	r4,r4,r16
    dd98:	11c5883a 	add	r2,r2,r7
    dd9c:	4100bb36 	bltu	r8,r4,e08c <__divdf3+0x7bc>
    dda0:	4100d726 	beq	r8,r4,e100 <__divdf3+0x830>
    dda4:	4109c83a 	sub	r4,r8,r4
    dda8:	a8a1c83a 	sub	r16,r21,r2
    ddac:	ac2b803a 	cmpltu	r21,r21,r16
    ddb0:	256bc83a 	sub	r21,r4,r21
    ddb4:	b540d926 	beq	r22,r21,e11c <__divdf3+0x84c>
    ddb8:	a00b883a 	mov	r5,r20
    ddbc:	a809883a 	mov	r4,r21
    ddc0:	d8c00215 	stw	r3,8(sp)
    ddc4:	000cf400 	call	cf40 <__udivsi3>
    ddc8:	100b883a 	mov	r5,r2
    ddcc:	9009883a 	mov	r4,r18
    ddd0:	d8800515 	stw	r2,20(sp)
    ddd4:	000cffc0 	call	cffc <__mulsi3>
    ddd8:	a809883a 	mov	r4,r21
    dddc:	a00b883a 	mov	r5,r20
    dde0:	d8800415 	stw	r2,16(sp)
    dde4:	000cfa40 	call	cfa4 <__umodsi3>
    dde8:	1004943a 	slli	r2,r2,16
    ddec:	8008d43a 	srli	r4,r16,16
    ddf0:	da000417 	ldw	r8,16(sp)
    ddf4:	d8c00217 	ldw	r3,8(sp)
    ddf8:	2084b03a 	or	r2,r4,r2
    ddfc:	d9c00517 	ldw	r7,20(sp)
    de00:	1200062e 	bgeu	r2,r8,de1c <__divdf3+0x54c>
    de04:	1585883a 	add	r2,r2,r22
    de08:	393fffc4 	addi	r4,r7,-1
    de0c:	1580c536 	bltu	r2,r22,e124 <__divdf3+0x854>
    de10:	1200c42e 	bgeu	r2,r8,e124 <__divdf3+0x854>
    de14:	39ffff84 	addi	r7,r7,-2
    de18:	1585883a 	add	r2,r2,r22
    de1c:	122bc83a 	sub	r21,r2,r8
    de20:	a00b883a 	mov	r5,r20
    de24:	a809883a 	mov	r4,r21
    de28:	d8c00215 	stw	r3,8(sp)
    de2c:	d9c00515 	stw	r7,20(sp)
    de30:	000cf400 	call	cf40 <__udivsi3>
    de34:	9009883a 	mov	r4,r18
    de38:	100b883a 	mov	r5,r2
    de3c:	d8800415 	stw	r2,16(sp)
    de40:	000cffc0 	call	cffc <__mulsi3>
    de44:	a809883a 	mov	r4,r21
    de48:	a00b883a 	mov	r5,r20
    de4c:	1025883a 	mov	r18,r2
    de50:	000cfa40 	call	cfa4 <__umodsi3>
    de54:	1004943a 	slli	r2,r2,16
    de58:	813fffcc 	andi	r4,r16,65535
    de5c:	d8c00217 	ldw	r3,8(sp)
    de60:	20a0b03a 	or	r16,r4,r2
    de64:	d9c00517 	ldw	r7,20(sp)
    de68:	da000417 	ldw	r8,16(sp)
    de6c:	8480062e 	bgeu	r16,r18,de88 <__divdf3+0x5b8>
    de70:	85a1883a 	add	r16,r16,r22
    de74:	40bfffc4 	addi	r2,r8,-1
    de78:	8580ac36 	bltu	r16,r22,e12c <__divdf3+0x85c>
    de7c:	8480ab2e 	bgeu	r16,r18,e12c <__divdf3+0x85c>
    de80:	423fff84 	addi	r8,r8,-2
    de84:	85a1883a 	add	r16,r16,r22
    de88:	3804943a 	slli	r2,r7,16
    de8c:	84a1c83a 	sub	r16,r16,r18
    de90:	e009883a 	mov	r4,fp
    de94:	1228b03a 	or	r20,r2,r8
    de98:	a1ffffcc 	andi	r7,r20,65535
    de9c:	a024d43a 	srli	r18,r20,16
    dea0:	380b883a 	mov	r5,r7
    dea4:	d8c00215 	stw	r3,8(sp)
    dea8:	d9c00515 	stw	r7,20(sp)
    deac:	000cffc0 	call	cffc <__mulsi3>
    deb0:	900b883a 	mov	r5,r18
    deb4:	e009883a 	mov	r4,fp
    deb8:	102b883a 	mov	r21,r2
    debc:	000cffc0 	call	cffc <__mulsi3>
    dec0:	900b883a 	mov	r5,r18
    dec4:	b809883a 	mov	r4,r23
    dec8:	1039883a 	mov	fp,r2
    decc:	000cffc0 	call	cffc <__mulsi3>
    ded0:	d9c00517 	ldw	r7,20(sp)
    ded4:	b80b883a 	mov	r5,r23
    ded8:	1025883a 	mov	r18,r2
    dedc:	3809883a 	mov	r4,r7
    dee0:	000cffc0 	call	cffc <__mulsi3>
    dee4:	a808d43a 	srli	r4,r21,16
    dee8:	1705883a 	add	r2,r2,fp
    deec:	d8c00217 	ldw	r3,8(sp)
    def0:	2085883a 	add	r2,r4,r2
    def4:	1700022e 	bgeu	r2,fp,df00 <__divdf3+0x630>
    def8:	01000074 	movhi	r4,1
    defc:	9125883a 	add	r18,r18,r4
    df00:	1008d43a 	srli	r4,r2,16
    df04:	1004943a 	slli	r2,r2,16
    df08:	ad7fffcc 	andi	r21,r21,65535
    df0c:	2489883a 	add	r4,r4,r18
    df10:	1545883a 	add	r2,r2,r21
    df14:	81003836 	bltu	r16,r4,dff8 <__divdf3+0x728>
    df18:	81003626 	beq	r16,r4,dff4 <__divdf3+0x724>
    df1c:	a5000054 	ori	r20,r20,1
    df20:	1880ffc4 	addi	r2,r3,1023
    df24:	00bf2e0e 	bge	zero,r2,dbe0 <__alt_exception_stack_pointer+0xf800dbe0>
    df28:	a10001cc 	andi	r4,r20,7
    df2c:	20000726 	beq	r4,zero,df4c <__divdf3+0x67c>
    df30:	a10003cc 	andi	r4,r20,15
    df34:	01400104 	movi	r5,4
    df38:	21400426 	beq	r4,r5,df4c <__divdf3+0x67c>
    df3c:	a149883a 	add	r4,r20,r5
    df40:	2529803a 	cmpltu	r20,r4,r20
    df44:	8d23883a 	add	r17,r17,r20
    df48:	2029883a 	mov	r20,r4
    df4c:	8900402c 	andhi	r4,r17,256
    df50:	20000426 	beq	r4,zero,df64 <__divdf3+0x694>
    df54:	18810004 	addi	r2,r3,1024
    df58:	00ffc034 	movhi	r3,65280
    df5c:	18ffffc4 	addi	r3,r3,-1
    df60:	88e2703a 	and	r17,r17,r3
    df64:	00c1ff84 	movi	r3,2046
    df68:	18beb416 	blt	r3,r2,da3c <__alt_exception_stack_pointer+0xf800da3c>
    df6c:	a028d0fa 	srli	r20,r20,3
    df70:	882a977a 	slli	r21,r17,29
    df74:	8820927a 	slli	r16,r17,9
    df78:	1081ffcc 	andi	r2,r2,2047
    df7c:	ad2ab03a 	or	r21,r21,r20
    df80:	8020d33a 	srli	r16,r16,12
    df84:	9900004c 	andi	r4,r19,1
    df88:	003eb006 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    df8c:	8080022c 	andhi	r2,r16,8
    df90:	10001226 	beq	r2,zero,dfdc <__divdf3+0x70c>
    df94:	8880022c 	andhi	r2,r17,8
    df98:	1000101e 	bne	r2,zero,dfdc <__divdf3+0x70c>
    df9c:	00800434 	movhi	r2,16
    dfa0:	8c000234 	orhi	r16,r17,8
    dfa4:	10bfffc4 	addi	r2,r2,-1
    dfa8:	b809883a 	mov	r4,r23
    dfac:	80a0703a 	and	r16,r16,r2
    dfb0:	a02b883a 	mov	r21,r20
    dfb4:	003f0806 	br	dbd8 <__alt_exception_stack_pointer+0xf800dbd8>
    dfb8:	008000c4 	movi	r2,3
    dfbc:	3880b126 	beq	r7,r2,e284 <__divdf3+0x9b4>
    dfc0:	00800044 	movi	r2,1
    dfc4:	38805b1e 	bne	r7,r2,e134 <__divdf3+0x864>
    dfc8:	e009883a 	mov	r4,fp
    dfcc:	0005883a 	mov	r2,zero
    dfd0:	0021883a 	mov	r16,zero
    dfd4:	002b883a 	mov	r21,zero
    dfd8:	003e9c06 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    dfdc:	00800434 	movhi	r2,16
    dfe0:	84000234 	orhi	r16,r16,8
    dfe4:	10bfffc4 	addi	r2,r2,-1
    dfe8:	b009883a 	mov	r4,r22
    dfec:	80a0703a 	and	r16,r16,r2
    dff0:	003ef906 	br	dbd8 <__alt_exception_stack_pointer+0xf800dbd8>
    dff4:	103fca26 	beq	r2,zero,df20 <__alt_exception_stack_pointer+0xf800df20>
    dff8:	b421883a 	add	r16,r22,r16
    dffc:	a17fffc4 	addi	r5,r20,-1
    e000:	8580422e 	bgeu	r16,r22,e10c <__divdf3+0x83c>
    e004:	2829883a 	mov	r20,r5
    e008:	813fc41e 	bne	r16,r4,df1c <__alt_exception_stack_pointer+0xf800df1c>
    e00c:	d9800017 	ldw	r6,0(sp)
    e010:	30bfc21e 	bne	r6,r2,df1c <__alt_exception_stack_pointer+0xf800df1c>
    e014:	003fc206 	br	df20 <__alt_exception_stack_pointer+0xf800df20>
    e018:	143ff604 	addi	r16,r2,-40
    e01c:	8c20983a 	sll	r16,r17,r16
    e020:	002b883a 	mov	r21,zero
    e024:	003eb406 	br	daf8 <__alt_exception_stack_pointer+0xf800daf8>
    e028:	d9800215 	stw	r6,8(sp)
    e02c:	d9c00515 	stw	r7,20(sp)
    e030:	da000415 	stw	r8,16(sp)
    e034:	000f8640 	call	f864 <__clzsi2>
    e038:	10800804 	addi	r2,r2,32
    e03c:	da000417 	ldw	r8,16(sp)
    e040:	d9c00517 	ldw	r7,20(sp)
    e044:	d9800217 	ldw	r6,8(sp)
    e048:	003ea106 	br	dad0 <__alt_exception_stack_pointer+0xf800dad0>
    e04c:	147ff604 	addi	r17,r2,-40
    e050:	3462983a 	sll	r17,r6,r17
    e054:	0029883a 	mov	r20,zero
    e058:	003ec906 	br	db80 <__alt_exception_stack_pointer+0xf800db80>
    e05c:	3009883a 	mov	r4,r6
    e060:	d9400115 	stw	r5,4(sp)
    e064:	d9800215 	stw	r6,8(sp)
    e068:	da000415 	stw	r8,16(sp)
    e06c:	da400315 	stw	r9,12(sp)
    e070:	000f8640 	call	f864 <__clzsi2>
    e074:	10800804 	addi	r2,r2,32
    e078:	da400317 	ldw	r9,12(sp)
    e07c:	da000417 	ldw	r8,16(sp)
    e080:	d9800217 	ldw	r6,8(sp)
    e084:	d9400117 	ldw	r5,4(sp)
    e088:	003eb306 	br	db58 <__alt_exception_stack_pointer+0xf800db58>
    e08c:	d9800017 	ldw	r6,0(sp)
    e090:	a9ab883a 	add	r21,r21,r6
    e094:	a98b803a 	cmpltu	r5,r21,r6
    e098:	2d8b883a 	add	r5,r5,r22
    e09c:	2a11883a 	add	r8,r5,r8
    e0a0:	897fffc4 	addi	r5,r17,-1
    e0a4:	b2000c2e 	bgeu	r22,r8,e0d8 <__divdf3+0x808>
    e0a8:	41003f36 	bltu	r8,r4,e1a8 <__divdf3+0x8d8>
    e0ac:	22006c26 	beq	r4,r8,e260 <__divdf3+0x990>
    e0b0:	4109c83a 	sub	r4,r8,r4
    e0b4:	2823883a 	mov	r17,r5
    e0b8:	003f3b06 	br	dda8 <__alt_exception_stack_pointer+0xf800dda8>
    e0bc:	ad3ed336 	bltu	r21,r20,dc0c <__alt_exception_stack_pointer+0xf800dc0c>
    e0c0:	a804d07a 	srli	r2,r21,1
    e0c4:	802e97fa 	slli	r23,r16,31
    e0c8:	a82a97fa 	slli	r21,r21,31
    e0cc:	8020d07a 	srli	r16,r16,1
    e0d0:	b8aeb03a 	or	r23,r23,r2
    e0d4:	003ed006 	br	dc18 <__alt_exception_stack_pointer+0xf800dc18>
    e0d8:	b23ff51e 	bne	r22,r8,e0b0 <__alt_exception_stack_pointer+0xf800e0b0>
    e0dc:	d9800017 	ldw	r6,0(sp)
    e0e0:	a9bff12e 	bgeu	r21,r6,e0a8 <__alt_exception_stack_pointer+0xf800e0a8>
    e0e4:	b109c83a 	sub	r4,r22,r4
    e0e8:	2823883a 	mov	r17,r5
    e0ec:	003f2e06 	br	dda8 <__alt_exception_stack_pointer+0xf800dda8>
    e0f0:	2021883a 	mov	r16,r4
    e0f4:	003eff06 	br	dcf4 <__alt_exception_stack_pointer+0xf800dcf4>
    e0f8:	2023883a 	mov	r17,r4
    e0fc:	003ee406 	br	dc90 <__alt_exception_stack_pointer+0xf800dc90>
    e100:	a8bfe236 	bltu	r21,r2,e08c <__alt_exception_stack_pointer+0xf800e08c>
    e104:	0009883a 	mov	r4,zero
    e108:	003f2706 	br	dda8 <__alt_exception_stack_pointer+0xf800dda8>
    e10c:	81002d36 	bltu	r16,r4,e1c4 <__divdf3+0x8f4>
    e110:	24005626 	beq	r4,r16,e26c <__divdf3+0x99c>
    e114:	2829883a 	mov	r20,r5
    e118:	003f8006 	br	df1c <__alt_exception_stack_pointer+0xf800df1c>
    e11c:	053fffc4 	movi	r20,-1
    e120:	003f7f06 	br	df20 <__alt_exception_stack_pointer+0xf800df20>
    e124:	200f883a 	mov	r7,r4
    e128:	003f3c06 	br	de1c <__alt_exception_stack_pointer+0xf800de1c>
    e12c:	1011883a 	mov	r8,r2
    e130:	003f5506 	br	de88 <__alt_exception_stack_pointer+0xf800de88>
    e134:	e027883a 	mov	r19,fp
    e138:	003f7906 	br	df20 <__alt_exception_stack_pointer+0xf800df20>
    e13c:	010007c4 	movi	r4,31
    e140:	20c02816 	blt	r4,r3,e1e4 <__divdf3+0x914>
    e144:	00800804 	movi	r2,32
    e148:	10c5c83a 	sub	r2,r2,r3
    e14c:	888a983a 	sll	r5,r17,r2
    e150:	a0c8d83a 	srl	r4,r20,r3
    e154:	a084983a 	sll	r2,r20,r2
    e158:	88e2d83a 	srl	r17,r17,r3
    e15c:	2906b03a 	or	r3,r5,r4
    e160:	1004c03a 	cmpne	r2,r2,zero
    e164:	1886b03a 	or	r3,r3,r2
    e168:	188001cc 	andi	r2,r3,7
    e16c:	10000726 	beq	r2,zero,e18c <__divdf3+0x8bc>
    e170:	188003cc 	andi	r2,r3,15
    e174:	01000104 	movi	r4,4
    e178:	11000426 	beq	r2,r4,e18c <__divdf3+0x8bc>
    e17c:	1805883a 	mov	r2,r3
    e180:	10c00104 	addi	r3,r2,4
    e184:	1885803a 	cmpltu	r2,r3,r2
    e188:	88a3883a 	add	r17,r17,r2
    e18c:	8880202c 	andhi	r2,r17,128
    e190:	10002926 	beq	r2,zero,e238 <__divdf3+0x968>
    e194:	9900004c 	andi	r4,r19,1
    e198:	00800044 	movi	r2,1
    e19c:	0021883a 	mov	r16,zero
    e1a0:	002b883a 	mov	r21,zero
    e1a4:	003e2906 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    e1a8:	d9800017 	ldw	r6,0(sp)
    e1ac:	8c7fff84 	addi	r17,r17,-2
    e1b0:	a9ab883a 	add	r21,r21,r6
    e1b4:	a98b803a 	cmpltu	r5,r21,r6
    e1b8:	2d8b883a 	add	r5,r5,r22
    e1bc:	2a11883a 	add	r8,r5,r8
    e1c0:	003ef806 	br	dda4 <__alt_exception_stack_pointer+0xf800dda4>
    e1c4:	d9800017 	ldw	r6,0(sp)
    e1c8:	318f883a 	add	r7,r6,r6
    e1cc:	398b803a 	cmpltu	r5,r7,r6
    e1d0:	2d8d883a 	add	r6,r5,r22
    e1d4:	81a1883a 	add	r16,r16,r6
    e1d8:	a17fff84 	addi	r5,r20,-2
    e1dc:	d9c00015 	stw	r7,0(sp)
    e1e0:	003f8806 	br	e004 <__alt_exception_stack_pointer+0xf800e004>
    e1e4:	013ff844 	movi	r4,-31
    e1e8:	2085c83a 	sub	r2,r4,r2
    e1ec:	8888d83a 	srl	r4,r17,r2
    e1f0:	00800804 	movi	r2,32
    e1f4:	18802126 	beq	r3,r2,e27c <__divdf3+0x9ac>
    e1f8:	04001004 	movi	r16,64
    e1fc:	80c7c83a 	sub	r3,r16,r3
    e200:	88e0983a 	sll	r16,r17,r3
    e204:	8504b03a 	or	r2,r16,r20
    e208:	1004c03a 	cmpne	r2,r2,zero
    e20c:	2084b03a 	or	r2,r4,r2
    e210:	144001cc 	andi	r17,r2,7
    e214:	88000d1e 	bne	r17,zero,e24c <__divdf3+0x97c>
    e218:	0021883a 	mov	r16,zero
    e21c:	102ad0fa 	srli	r21,r2,3
    e220:	9900004c 	andi	r4,r19,1
    e224:	0005883a 	mov	r2,zero
    e228:	ac6ab03a 	or	r21,r21,r17
    e22c:	003e0706 	br	da4c <__alt_exception_stack_pointer+0xf800da4c>
    e230:	1007883a 	mov	r3,r2
    e234:	0023883a 	mov	r17,zero
    e238:	8820927a 	slli	r16,r17,9
    e23c:	1805883a 	mov	r2,r3
    e240:	8822977a 	slli	r17,r17,29
    e244:	8020d33a 	srli	r16,r16,12
    e248:	003ff406 	br	e21c <__alt_exception_stack_pointer+0xf800e21c>
    e24c:	10c003cc 	andi	r3,r2,15
    e250:	01000104 	movi	r4,4
    e254:	193ff626 	beq	r3,r4,e230 <__alt_exception_stack_pointer+0xf800e230>
    e258:	0023883a 	mov	r17,zero
    e25c:	003fc806 	br	e180 <__alt_exception_stack_pointer+0xf800e180>
    e260:	a8bfd136 	bltu	r21,r2,e1a8 <__alt_exception_stack_pointer+0xf800e1a8>
    e264:	2823883a 	mov	r17,r5
    e268:	003fa606 	br	e104 <__alt_exception_stack_pointer+0xf800e104>
    e26c:	d9800017 	ldw	r6,0(sp)
    e270:	30bfd436 	bltu	r6,r2,e1c4 <__alt_exception_stack_pointer+0xf800e1c4>
    e274:	2829883a 	mov	r20,r5
    e278:	003f6406 	br	e00c <__alt_exception_stack_pointer+0xf800e00c>
    e27c:	0021883a 	mov	r16,zero
    e280:	003fe006 	br	e204 <__alt_exception_stack_pointer+0xf800e204>
    e284:	00800434 	movhi	r2,16
    e288:	8c000234 	orhi	r16,r17,8
    e28c:	10bfffc4 	addi	r2,r2,-1
    e290:	e009883a 	mov	r4,fp
    e294:	80a0703a 	and	r16,r16,r2
    e298:	a02b883a 	mov	r21,r20
    e29c:	003e4e06 	br	dbd8 <__alt_exception_stack_pointer+0xf800dbd8>

0000e2a0 <__eqdf2>:
    e2a0:	2804d53a 	srli	r2,r5,20
    e2a4:	3806d53a 	srli	r3,r7,20
    e2a8:	02000434 	movhi	r8,16
    e2ac:	423fffc4 	addi	r8,r8,-1
    e2b0:	1081ffcc 	andi	r2,r2,2047
    e2b4:	0281ffc4 	movi	r10,2047
    e2b8:	2a12703a 	and	r9,r5,r8
    e2bc:	18c1ffcc 	andi	r3,r3,2047
    e2c0:	3a10703a 	and	r8,r7,r8
    e2c4:	280ad7fa 	srli	r5,r5,31
    e2c8:	380ed7fa 	srli	r7,r7,31
    e2cc:	12801026 	beq	r2,r10,e310 <__eqdf2+0x70>
    e2d0:	0281ffc4 	movi	r10,2047
    e2d4:	1a800a26 	beq	r3,r10,e300 <__eqdf2+0x60>
    e2d8:	10c00226 	beq	r2,r3,e2e4 <__eqdf2+0x44>
    e2dc:	00800044 	movi	r2,1
    e2e0:	f800283a 	ret
    e2e4:	4a3ffd1e 	bne	r9,r8,e2dc <__alt_exception_stack_pointer+0xf800e2dc>
    e2e8:	21bffc1e 	bne	r4,r6,e2dc <__alt_exception_stack_pointer+0xf800e2dc>
    e2ec:	29c00c26 	beq	r5,r7,e320 <__eqdf2+0x80>
    e2f0:	103ffa1e 	bne	r2,zero,e2dc <__alt_exception_stack_pointer+0xf800e2dc>
    e2f4:	2244b03a 	or	r2,r4,r9
    e2f8:	1004c03a 	cmpne	r2,r2,zero
    e2fc:	f800283a 	ret
    e300:	3214b03a 	or	r10,r6,r8
    e304:	503ff426 	beq	r10,zero,e2d8 <__alt_exception_stack_pointer+0xf800e2d8>
    e308:	00800044 	movi	r2,1
    e30c:	f800283a 	ret
    e310:	2254b03a 	or	r10,r4,r9
    e314:	503fee26 	beq	r10,zero,e2d0 <__alt_exception_stack_pointer+0xf800e2d0>
    e318:	00800044 	movi	r2,1
    e31c:	f800283a 	ret
    e320:	0005883a 	mov	r2,zero
    e324:	f800283a 	ret

0000e328 <__gedf2>:
    e328:	2804d53a 	srli	r2,r5,20
    e32c:	3806d53a 	srli	r3,r7,20
    e330:	02000434 	movhi	r8,16
    e334:	423fffc4 	addi	r8,r8,-1
    e338:	1081ffcc 	andi	r2,r2,2047
    e33c:	0241ffc4 	movi	r9,2047
    e340:	2a14703a 	and	r10,r5,r8
    e344:	18c1ffcc 	andi	r3,r3,2047
    e348:	3a10703a 	and	r8,r7,r8
    e34c:	280ad7fa 	srli	r5,r5,31
    e350:	380ed7fa 	srli	r7,r7,31
    e354:	12401d26 	beq	r2,r9,e3cc <__gedf2+0xa4>
    e358:	0241ffc4 	movi	r9,2047
    e35c:	1a401226 	beq	r3,r9,e3a8 <__gedf2+0x80>
    e360:	1000081e 	bne	r2,zero,e384 <__gedf2+0x5c>
    e364:	2296b03a 	or	r11,r4,r10
    e368:	5813003a 	cmpeq	r9,r11,zero
    e36c:	1800091e 	bne	r3,zero,e394 <__gedf2+0x6c>
    e370:	3218b03a 	or	r12,r6,r8
    e374:	6000071e 	bne	r12,zero,e394 <__gedf2+0x6c>
    e378:	0005883a 	mov	r2,zero
    e37c:	5800101e 	bne	r11,zero,e3c0 <__gedf2+0x98>
    e380:	f800283a 	ret
    e384:	18000c1e 	bne	r3,zero,e3b8 <__gedf2+0x90>
    e388:	3212b03a 	or	r9,r6,r8
    e38c:	48000c26 	beq	r9,zero,e3c0 <__gedf2+0x98>
    e390:	0013883a 	mov	r9,zero
    e394:	39c03fcc 	andi	r7,r7,255
    e398:	48000826 	beq	r9,zero,e3bc <__gedf2+0x94>
    e39c:	38000926 	beq	r7,zero,e3c4 <__gedf2+0x9c>
    e3a0:	00800044 	movi	r2,1
    e3a4:	f800283a 	ret
    e3a8:	3212b03a 	or	r9,r6,r8
    e3ac:	483fec26 	beq	r9,zero,e360 <__alt_exception_stack_pointer+0xf800e360>
    e3b0:	00bfff84 	movi	r2,-2
    e3b4:	f800283a 	ret
    e3b8:	39c03fcc 	andi	r7,r7,255
    e3bc:	29c00626 	beq	r5,r7,e3d8 <__gedf2+0xb0>
    e3c0:	283ff726 	beq	r5,zero,e3a0 <__alt_exception_stack_pointer+0xf800e3a0>
    e3c4:	00bfffc4 	movi	r2,-1
    e3c8:	f800283a 	ret
    e3cc:	2292b03a 	or	r9,r4,r10
    e3d0:	483fe126 	beq	r9,zero,e358 <__alt_exception_stack_pointer+0xf800e358>
    e3d4:	003ff606 	br	e3b0 <__alt_exception_stack_pointer+0xf800e3b0>
    e3d8:	18bff916 	blt	r3,r2,e3c0 <__alt_exception_stack_pointer+0xf800e3c0>
    e3dc:	10c00316 	blt	r2,r3,e3ec <__gedf2+0xc4>
    e3e0:	42bff736 	bltu	r8,r10,e3c0 <__alt_exception_stack_pointer+0xf800e3c0>
    e3e4:	52000326 	beq	r10,r8,e3f4 <__gedf2+0xcc>
    e3e8:	5200042e 	bgeu	r10,r8,e3fc <__gedf2+0xd4>
    e3ec:	283fec1e 	bne	r5,zero,e3a0 <__alt_exception_stack_pointer+0xf800e3a0>
    e3f0:	003ff406 	br	e3c4 <__alt_exception_stack_pointer+0xf800e3c4>
    e3f4:	313ff236 	bltu	r6,r4,e3c0 <__alt_exception_stack_pointer+0xf800e3c0>
    e3f8:	21bffc36 	bltu	r4,r6,e3ec <__alt_exception_stack_pointer+0xf800e3ec>
    e3fc:	0005883a 	mov	r2,zero
    e400:	f800283a 	ret

0000e404 <__ledf2>:
    e404:	2804d53a 	srli	r2,r5,20
    e408:	3810d53a 	srli	r8,r7,20
    e40c:	00c00434 	movhi	r3,16
    e410:	18ffffc4 	addi	r3,r3,-1
    e414:	1081ffcc 	andi	r2,r2,2047
    e418:	0241ffc4 	movi	r9,2047
    e41c:	28d4703a 	and	r10,r5,r3
    e420:	4201ffcc 	andi	r8,r8,2047
    e424:	38c6703a 	and	r3,r7,r3
    e428:	280ad7fa 	srli	r5,r5,31
    e42c:	380ed7fa 	srli	r7,r7,31
    e430:	12401f26 	beq	r2,r9,e4b0 <__ledf2+0xac>
    e434:	0241ffc4 	movi	r9,2047
    e438:	42401426 	beq	r8,r9,e48c <__ledf2+0x88>
    e43c:	1000091e 	bne	r2,zero,e464 <__ledf2+0x60>
    e440:	2296b03a 	or	r11,r4,r10
    e444:	5813003a 	cmpeq	r9,r11,zero
    e448:	29403fcc 	andi	r5,r5,255
    e44c:	40000a1e 	bne	r8,zero,e478 <__ledf2+0x74>
    e450:	30d8b03a 	or	r12,r6,r3
    e454:	6000081e 	bne	r12,zero,e478 <__ledf2+0x74>
    e458:	0005883a 	mov	r2,zero
    e45c:	5800111e 	bne	r11,zero,e4a4 <__ledf2+0xa0>
    e460:	f800283a 	ret
    e464:	29403fcc 	andi	r5,r5,255
    e468:	40000c1e 	bne	r8,zero,e49c <__ledf2+0x98>
    e46c:	30d2b03a 	or	r9,r6,r3
    e470:	48000c26 	beq	r9,zero,e4a4 <__ledf2+0xa0>
    e474:	0013883a 	mov	r9,zero
    e478:	39c03fcc 	andi	r7,r7,255
    e47c:	48000826 	beq	r9,zero,e4a0 <__ledf2+0x9c>
    e480:	38001126 	beq	r7,zero,e4c8 <__ledf2+0xc4>
    e484:	00800044 	movi	r2,1
    e488:	f800283a 	ret
    e48c:	30d2b03a 	or	r9,r6,r3
    e490:	483fea26 	beq	r9,zero,e43c <__alt_exception_stack_pointer+0xf800e43c>
    e494:	00800084 	movi	r2,2
    e498:	f800283a 	ret
    e49c:	39c03fcc 	andi	r7,r7,255
    e4a0:	39400726 	beq	r7,r5,e4c0 <__ledf2+0xbc>
    e4a4:	2800081e 	bne	r5,zero,e4c8 <__ledf2+0xc4>
    e4a8:	00800044 	movi	r2,1
    e4ac:	f800283a 	ret
    e4b0:	2292b03a 	or	r9,r4,r10
    e4b4:	483fdf26 	beq	r9,zero,e434 <__alt_exception_stack_pointer+0xf800e434>
    e4b8:	00800084 	movi	r2,2
    e4bc:	f800283a 	ret
    e4c0:	4080030e 	bge	r8,r2,e4d0 <__ledf2+0xcc>
    e4c4:	383fef26 	beq	r7,zero,e484 <__alt_exception_stack_pointer+0xf800e484>
    e4c8:	00bfffc4 	movi	r2,-1
    e4cc:	f800283a 	ret
    e4d0:	123feb16 	blt	r2,r8,e480 <__alt_exception_stack_pointer+0xf800e480>
    e4d4:	1abff336 	bltu	r3,r10,e4a4 <__alt_exception_stack_pointer+0xf800e4a4>
    e4d8:	50c00326 	beq	r10,r3,e4e8 <__ledf2+0xe4>
    e4dc:	50c0042e 	bgeu	r10,r3,e4f0 <__ledf2+0xec>
    e4e0:	283fe81e 	bne	r5,zero,e484 <__alt_exception_stack_pointer+0xf800e484>
    e4e4:	003ff806 	br	e4c8 <__alt_exception_stack_pointer+0xf800e4c8>
    e4e8:	313fee36 	bltu	r6,r4,e4a4 <__alt_exception_stack_pointer+0xf800e4a4>
    e4ec:	21bffc36 	bltu	r4,r6,e4e0 <__alt_exception_stack_pointer+0xf800e4e0>
    e4f0:	0005883a 	mov	r2,zero
    e4f4:	f800283a 	ret

0000e4f8 <__muldf3>:
    e4f8:	deffee04 	addi	sp,sp,-72
    e4fc:	dd000c15 	stw	r20,48(sp)
    e500:	2828d53a 	srli	r20,r5,20
    e504:	ddc00f15 	stw	r23,60(sp)
    e508:	282ed7fa 	srli	r23,r5,31
    e50c:	dc000815 	stw	r16,32(sp)
    e510:	04000434 	movhi	r16,16
    e514:	dcc00b15 	stw	r19,44(sp)
    e518:	843fffc4 	addi	r16,r16,-1
    e51c:	dfc01115 	stw	ra,68(sp)
    e520:	df001015 	stw	fp,64(sp)
    e524:	dd800e15 	stw	r22,56(sp)
    e528:	dd400d15 	stw	r21,52(sp)
    e52c:	dc800a15 	stw	r18,40(sp)
    e530:	dc400915 	stw	r17,36(sp)
    e534:	a501ffcc 	andi	r20,r20,2047
    e538:	2c20703a 	and	r16,r5,r16
    e53c:	b827883a 	mov	r19,r23
    e540:	ba403fcc 	andi	r9,r23,255
    e544:	a0006026 	beq	r20,zero,e6c8 <__muldf3+0x1d0>
    e548:	0081ffc4 	movi	r2,2047
    e54c:	202d883a 	mov	r22,r4
    e550:	a0803626 	beq	r20,r2,e62c <__muldf3+0x134>
    e554:	84000434 	orhi	r16,r16,16
    e558:	200ad77a 	srli	r5,r4,29
    e55c:	800490fa 	slli	r2,r16,3
    e560:	202c90fa 	slli	r22,r4,3
    e564:	a53f0044 	addi	r20,r20,-1023
    e568:	28a0b03a 	or	r16,r5,r2
    e56c:	002b883a 	mov	r21,zero
    e570:	000b883a 	mov	r5,zero
    e574:	3804d53a 	srli	r2,r7,20
    e578:	3838d7fa 	srli	fp,r7,31
    e57c:	04400434 	movhi	r17,16
    e580:	8c7fffc4 	addi	r17,r17,-1
    e584:	1081ffcc 	andi	r2,r2,2047
    e588:	3025883a 	mov	r18,r6
    e58c:	3c62703a 	and	r17,r7,r17
    e590:	e2803fcc 	andi	r10,fp,255
    e594:	10006d26 	beq	r2,zero,e74c <__muldf3+0x254>
    e598:	00c1ffc4 	movi	r3,2047
    e59c:	10c06526 	beq	r2,r3,e734 <__muldf3+0x23c>
    e5a0:	8c400434 	orhi	r17,r17,16
    e5a4:	300ed77a 	srli	r7,r6,29
    e5a8:	880690fa 	slli	r3,r17,3
    e5ac:	302490fa 	slli	r18,r6,3
    e5b0:	10bf0044 	addi	r2,r2,-1023
    e5b4:	38e2b03a 	or	r17,r7,r3
    e5b8:	000f883a 	mov	r7,zero
    e5bc:	a087883a 	add	r3,r20,r2
    e5c0:	010003c4 	movi	r4,15
    e5c4:	3d44b03a 	or	r2,r7,r21
    e5c8:	e5ccf03a 	xor	r6,fp,r23
    e5cc:	1a000044 	addi	r8,r3,1
    e5d0:	20809b36 	bltu	r4,r2,e840 <__muldf3+0x348>
    e5d4:	100490ba 	slli	r2,r2,2
    e5d8:	01000074 	movhi	r4,1
    e5dc:	21397b04 	addi	r4,r4,-6676
    e5e0:	1105883a 	add	r2,r2,r4
    e5e4:	10800017 	ldw	r2,0(r2)
    e5e8:	1000683a 	jmp	r2
    e5ec:	0000e840 	call	e84 <init_keyboard+0x754>
    e5f0:	0000e64c 	andi	zero,zero,921
    e5f4:	0000e64c 	andi	zero,zero,921
    e5f8:	0000e648 	cmpgei	zero,zero,921
    e5fc:	0000e81c 	xori	zero,zero,928
    e600:	0000e81c 	xori	zero,zero,928
    e604:	0000e804 	movi	zero,928
    e608:	0000e648 	cmpgei	zero,zero,921
    e60c:	0000e81c 	xori	zero,zero,928
    e610:	0000e804 	movi	zero,928
    e614:	0000e81c 	xori	zero,zero,928
    e618:	0000e648 	cmpgei	zero,zero,921
    e61c:	0000e82c 	andhi	zero,zero,928
    e620:	0000e82c 	andhi	zero,zero,928
    e624:	0000e82c 	andhi	zero,zero,928
    e628:	0000eb8c 	andi	zero,zero,942
    e62c:	2404b03a 	or	r2,r4,r16
    e630:	1000711e 	bne	r2,zero,e7f8 <__muldf3+0x300>
    e634:	05400204 	movi	r21,8
    e638:	0021883a 	mov	r16,zero
    e63c:	002d883a 	mov	r22,zero
    e640:	01400084 	movi	r5,2
    e644:	003fcb06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e648:	500d883a 	mov	r6,r10
    e64c:	00800084 	movi	r2,2
    e650:	38805926 	beq	r7,r2,e7b8 <__muldf3+0x2c0>
    e654:	008000c4 	movi	r2,3
    e658:	3881bb26 	beq	r7,r2,ed48 <__muldf3+0x850>
    e65c:	00800044 	movi	r2,1
    e660:	3881961e 	bne	r7,r2,ecbc <__muldf3+0x7c4>
    e664:	3027883a 	mov	r19,r6
    e668:	0005883a 	mov	r2,zero
    e66c:	0021883a 	mov	r16,zero
    e670:	002d883a 	mov	r22,zero
    e674:	1004953a 	slli	r2,r2,20
    e678:	98c03fcc 	andi	r3,r19,255
    e67c:	04400434 	movhi	r17,16
    e680:	8c7fffc4 	addi	r17,r17,-1
    e684:	180697fa 	slli	r3,r3,31
    e688:	8460703a 	and	r16,r16,r17
    e68c:	80a0b03a 	or	r16,r16,r2
    e690:	80c6b03a 	or	r3,r16,r3
    e694:	b005883a 	mov	r2,r22
    e698:	dfc01117 	ldw	ra,68(sp)
    e69c:	df001017 	ldw	fp,64(sp)
    e6a0:	ddc00f17 	ldw	r23,60(sp)
    e6a4:	dd800e17 	ldw	r22,56(sp)
    e6a8:	dd400d17 	ldw	r21,52(sp)
    e6ac:	dd000c17 	ldw	r20,48(sp)
    e6b0:	dcc00b17 	ldw	r19,44(sp)
    e6b4:	dc800a17 	ldw	r18,40(sp)
    e6b8:	dc400917 	ldw	r17,36(sp)
    e6bc:	dc000817 	ldw	r16,32(sp)
    e6c0:	dec01204 	addi	sp,sp,72
    e6c4:	f800283a 	ret
    e6c8:	2404b03a 	or	r2,r4,r16
    e6cc:	202b883a 	mov	r21,r4
    e6d0:	10004426 	beq	r2,zero,e7e4 <__muldf3+0x2ec>
    e6d4:	80015126 	beq	r16,zero,ec1c <__muldf3+0x724>
    e6d8:	8009883a 	mov	r4,r16
    e6dc:	d9800715 	stw	r6,28(sp)
    e6e0:	d9c00215 	stw	r7,8(sp)
    e6e4:	da400415 	stw	r9,16(sp)
    e6e8:	000f8640 	call	f864 <__clzsi2>
    e6ec:	d9800717 	ldw	r6,28(sp)
    e6f0:	d9c00217 	ldw	r7,8(sp)
    e6f4:	da400417 	ldw	r9,16(sp)
    e6f8:	113ffd44 	addi	r4,r2,-11
    e6fc:	00c00704 	movi	r3,28
    e700:	19014216 	blt	r3,r4,ec0c <__muldf3+0x714>
    e704:	00c00744 	movi	r3,29
    e708:	15bffe04 	addi	r22,r2,-8
    e70c:	1907c83a 	sub	r3,r3,r4
    e710:	85a0983a 	sll	r16,r16,r22
    e714:	a8c6d83a 	srl	r3,r21,r3
    e718:	adac983a 	sll	r22,r21,r22
    e71c:	1c20b03a 	or	r16,r3,r16
    e720:	1080fcc4 	addi	r2,r2,1011
    e724:	00a9c83a 	sub	r20,zero,r2
    e728:	002b883a 	mov	r21,zero
    e72c:	000b883a 	mov	r5,zero
    e730:	003f9006 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e734:	3446b03a 	or	r3,r6,r17
    e738:	1800281e 	bne	r3,zero,e7dc <__muldf3+0x2e4>
    e73c:	0023883a 	mov	r17,zero
    e740:	0025883a 	mov	r18,zero
    e744:	01c00084 	movi	r7,2
    e748:	003f9c06 	br	e5bc <__alt_exception_stack_pointer+0xf800e5bc>
    e74c:	3446b03a 	or	r3,r6,r17
    e750:	18001e26 	beq	r3,zero,e7cc <__muldf3+0x2d4>
    e754:	88012126 	beq	r17,zero,ebdc <__muldf3+0x6e4>
    e758:	8809883a 	mov	r4,r17
    e75c:	d9400215 	stw	r5,8(sp)
    e760:	d9800715 	stw	r6,28(sp)
    e764:	da400415 	stw	r9,16(sp)
    e768:	da800315 	stw	r10,12(sp)
    e76c:	000f8640 	call	f864 <__clzsi2>
    e770:	d9400217 	ldw	r5,8(sp)
    e774:	d9800717 	ldw	r6,28(sp)
    e778:	da400417 	ldw	r9,16(sp)
    e77c:	da800317 	ldw	r10,12(sp)
    e780:	113ffd44 	addi	r4,r2,-11
    e784:	00c00704 	movi	r3,28
    e788:	19011016 	blt	r3,r4,ebcc <__muldf3+0x6d4>
    e78c:	00c00744 	movi	r3,29
    e790:	14bffe04 	addi	r18,r2,-8
    e794:	1907c83a 	sub	r3,r3,r4
    e798:	8ca2983a 	sll	r17,r17,r18
    e79c:	30c6d83a 	srl	r3,r6,r3
    e7a0:	34a4983a 	sll	r18,r6,r18
    e7a4:	1c62b03a 	or	r17,r3,r17
    e7a8:	1080fcc4 	addi	r2,r2,1011
    e7ac:	0085c83a 	sub	r2,zero,r2
    e7b0:	000f883a 	mov	r7,zero
    e7b4:	003f8106 	br	e5bc <__alt_exception_stack_pointer+0xf800e5bc>
    e7b8:	3027883a 	mov	r19,r6
    e7bc:	0081ffc4 	movi	r2,2047
    e7c0:	0021883a 	mov	r16,zero
    e7c4:	002d883a 	mov	r22,zero
    e7c8:	003faa06 	br	e674 <__alt_exception_stack_pointer+0xf800e674>
    e7cc:	0023883a 	mov	r17,zero
    e7d0:	0025883a 	mov	r18,zero
    e7d4:	01c00044 	movi	r7,1
    e7d8:	003f7806 	br	e5bc <__alt_exception_stack_pointer+0xf800e5bc>
    e7dc:	01c000c4 	movi	r7,3
    e7e0:	003f7606 	br	e5bc <__alt_exception_stack_pointer+0xf800e5bc>
    e7e4:	05400104 	movi	r21,4
    e7e8:	0021883a 	mov	r16,zero
    e7ec:	002d883a 	mov	r22,zero
    e7f0:	01400044 	movi	r5,1
    e7f4:	003f5f06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e7f8:	05400304 	movi	r21,12
    e7fc:	014000c4 	movi	r5,3
    e800:	003f5c06 	br	e574 <__alt_exception_stack_pointer+0xf800e574>
    e804:	04000434 	movhi	r16,16
    e808:	0027883a 	mov	r19,zero
    e80c:	843fffc4 	addi	r16,r16,-1
    e810:	05bfffc4 	movi	r22,-1
    e814:	0081ffc4 	movi	r2,2047
    e818:	003f9606 	br	e674 <__alt_exception_stack_pointer+0xf800e674>
    e81c:	8023883a 	mov	r17,r16
    e820:	b025883a 	mov	r18,r22
    e824:	280f883a 	mov	r7,r5
    e828:	003f8806 	br	e64c <__alt_exception_stack_pointer+0xf800e64c>
    e82c:	8023883a 	mov	r17,r16
    e830:	b025883a 	mov	r18,r22
    e834:	480d883a 	mov	r6,r9
    e838:	280f883a 	mov	r7,r5
    e83c:	003f8306 	br	e64c <__alt_exception_stack_pointer+0xf800e64c>
    e840:	b026d43a 	srli	r19,r22,16
    e844:	902ed43a 	srli	r23,r18,16
    e848:	b5bfffcc 	andi	r22,r22,65535
    e84c:	94bfffcc 	andi	r18,r18,65535
    e850:	b00b883a 	mov	r5,r22
    e854:	9009883a 	mov	r4,r18
    e858:	d8c00515 	stw	r3,20(sp)
    e85c:	d9800715 	stw	r6,28(sp)
    e860:	da000615 	stw	r8,24(sp)
    e864:	000cffc0 	call	cffc <__mulsi3>
    e868:	980b883a 	mov	r5,r19
    e86c:	9009883a 	mov	r4,r18
    e870:	1029883a 	mov	r20,r2
    e874:	000cffc0 	call	cffc <__mulsi3>
    e878:	b80b883a 	mov	r5,r23
    e87c:	9809883a 	mov	r4,r19
    e880:	102b883a 	mov	r21,r2
    e884:	000cffc0 	call	cffc <__mulsi3>
    e888:	b809883a 	mov	r4,r23
    e88c:	b00b883a 	mov	r5,r22
    e890:	1039883a 	mov	fp,r2
    e894:	000cffc0 	call	cffc <__mulsi3>
    e898:	a008d43a 	srli	r4,r20,16
    e89c:	1545883a 	add	r2,r2,r21
    e8a0:	d8c00517 	ldw	r3,20(sp)
    e8a4:	2085883a 	add	r2,r4,r2
    e8a8:	d9800717 	ldw	r6,28(sp)
    e8ac:	da000617 	ldw	r8,24(sp)
    e8b0:	1540022e 	bgeu	r2,r21,e8bc <__muldf3+0x3c4>
    e8b4:	01000074 	movhi	r4,1
    e8b8:	e139883a 	add	fp,fp,r4
    e8bc:	100e943a 	slli	r7,r2,16
    e8c0:	1004d43a 	srli	r2,r2,16
    e8c4:	882ad43a 	srli	r21,r17,16
    e8c8:	a53fffcc 	andi	r20,r20,65535
    e8cc:	8c7fffcc 	andi	r17,r17,65535
    e8d0:	3d29883a 	add	r20,r7,r20
    e8d4:	b00b883a 	mov	r5,r22
    e8d8:	8809883a 	mov	r4,r17
    e8dc:	d8c00515 	stw	r3,20(sp)
    e8e0:	d9800715 	stw	r6,28(sp)
    e8e4:	da000615 	stw	r8,24(sp)
    e8e8:	dd000115 	stw	r20,4(sp)
    e8ec:	d8800015 	stw	r2,0(sp)
    e8f0:	000cffc0 	call	cffc <__mulsi3>
    e8f4:	980b883a 	mov	r5,r19
    e8f8:	8809883a 	mov	r4,r17
    e8fc:	d8800215 	stw	r2,8(sp)
    e900:	000cffc0 	call	cffc <__mulsi3>
    e904:	9809883a 	mov	r4,r19
    e908:	a80b883a 	mov	r5,r21
    e90c:	1029883a 	mov	r20,r2
    e910:	000cffc0 	call	cffc <__mulsi3>
    e914:	b00b883a 	mov	r5,r22
    e918:	a809883a 	mov	r4,r21
    e91c:	d8800415 	stw	r2,16(sp)
    e920:	000cffc0 	call	cffc <__mulsi3>
    e924:	d9c00217 	ldw	r7,8(sp)
    e928:	1505883a 	add	r2,r2,r20
    e92c:	d8c00517 	ldw	r3,20(sp)
    e930:	3826d43a 	srli	r19,r7,16
    e934:	d9800717 	ldw	r6,28(sp)
    e938:	da000617 	ldw	r8,24(sp)
    e93c:	9885883a 	add	r2,r19,r2
    e940:	da400417 	ldw	r9,16(sp)
    e944:	1500022e 	bgeu	r2,r20,e950 <__muldf3+0x458>
    e948:	01000074 	movhi	r4,1
    e94c:	4913883a 	add	r9,r9,r4
    e950:	1028d43a 	srli	r20,r2,16
    e954:	1004943a 	slli	r2,r2,16
    e958:	802cd43a 	srli	r22,r16,16
    e95c:	843fffcc 	andi	r16,r16,65535
    e960:	3cffffcc 	andi	r19,r7,65535
    e964:	9009883a 	mov	r4,r18
    e968:	800b883a 	mov	r5,r16
    e96c:	a269883a 	add	r20,r20,r9
    e970:	d8c00515 	stw	r3,20(sp)
    e974:	d9800715 	stw	r6,28(sp)
    e978:	da000615 	stw	r8,24(sp)
    e97c:	14e7883a 	add	r19,r2,r19
    e980:	000cffc0 	call	cffc <__mulsi3>
    e984:	9009883a 	mov	r4,r18
    e988:	b00b883a 	mov	r5,r22
    e98c:	d8800315 	stw	r2,12(sp)
    e990:	000cffc0 	call	cffc <__mulsi3>
    e994:	b809883a 	mov	r4,r23
    e998:	b00b883a 	mov	r5,r22
    e99c:	d8800215 	stw	r2,8(sp)
    e9a0:	000cffc0 	call	cffc <__mulsi3>
    e9a4:	b80b883a 	mov	r5,r23
    e9a8:	8009883a 	mov	r4,r16
    e9ac:	d8800415 	stw	r2,16(sp)
    e9b0:	000cffc0 	call	cffc <__mulsi3>
    e9b4:	da800317 	ldw	r10,12(sp)
    e9b8:	d9c00217 	ldw	r7,8(sp)
    e9bc:	d9000017 	ldw	r4,0(sp)
    e9c0:	502ed43a 	srli	r23,r10,16
    e9c4:	11c5883a 	add	r2,r2,r7
    e9c8:	24e5883a 	add	r18,r4,r19
    e9cc:	b885883a 	add	r2,r23,r2
    e9d0:	d8c00517 	ldw	r3,20(sp)
    e9d4:	d9800717 	ldw	r6,28(sp)
    e9d8:	da000617 	ldw	r8,24(sp)
    e9dc:	da400417 	ldw	r9,16(sp)
    e9e0:	11c0022e 	bgeu	r2,r7,e9ec <__muldf3+0x4f4>
    e9e4:	01000074 	movhi	r4,1
    e9e8:	4913883a 	add	r9,r9,r4
    e9ec:	100ed43a 	srli	r7,r2,16
    e9f0:	1004943a 	slli	r2,r2,16
    e9f4:	55ffffcc 	andi	r23,r10,65535
    e9f8:	3a53883a 	add	r9,r7,r9
    e9fc:	8809883a 	mov	r4,r17
    ea00:	800b883a 	mov	r5,r16
    ea04:	d8c00515 	stw	r3,20(sp)
    ea08:	d9800715 	stw	r6,28(sp)
    ea0c:	da000615 	stw	r8,24(sp)
    ea10:	da400415 	stw	r9,16(sp)
    ea14:	15ef883a 	add	r23,r2,r23
    ea18:	000cffc0 	call	cffc <__mulsi3>
    ea1c:	8809883a 	mov	r4,r17
    ea20:	b00b883a 	mov	r5,r22
    ea24:	d8800215 	stw	r2,8(sp)
    ea28:	000cffc0 	call	cffc <__mulsi3>
    ea2c:	b00b883a 	mov	r5,r22
    ea30:	a809883a 	mov	r4,r21
    ea34:	d8800315 	stw	r2,12(sp)
    ea38:	000cffc0 	call	cffc <__mulsi3>
    ea3c:	8009883a 	mov	r4,r16
    ea40:	a80b883a 	mov	r5,r21
    ea44:	1023883a 	mov	r17,r2
    ea48:	000cffc0 	call	cffc <__mulsi3>
    ea4c:	d9c00217 	ldw	r7,8(sp)
    ea50:	da800317 	ldw	r10,12(sp)
    ea54:	d8c00517 	ldw	r3,20(sp)
    ea58:	3808d43a 	srli	r4,r7,16
    ea5c:	1285883a 	add	r2,r2,r10
    ea60:	d9800717 	ldw	r6,28(sp)
    ea64:	2085883a 	add	r2,r4,r2
    ea68:	da000617 	ldw	r8,24(sp)
    ea6c:	da400417 	ldw	r9,16(sp)
    ea70:	1280022e 	bgeu	r2,r10,ea7c <__muldf3+0x584>
    ea74:	01000074 	movhi	r4,1
    ea78:	8923883a 	add	r17,r17,r4
    ea7c:	1008943a 	slli	r4,r2,16
    ea80:	39ffffcc 	andi	r7,r7,65535
    ea84:	e4b9883a 	add	fp,fp,r18
    ea88:	21cf883a 	add	r7,r4,r7
    ea8c:	e4e7803a 	cmpltu	r19,fp,r19
    ea90:	3d0f883a 	add	r7,r7,r20
    ea94:	bf39883a 	add	fp,r23,fp
    ea98:	99c9883a 	add	r4,r19,r7
    ea9c:	e5ef803a 	cmpltu	r23,fp,r23
    eaa0:	490b883a 	add	r5,r9,r4
    eaa4:	1004d43a 	srli	r2,r2,16
    eaa8:	b965883a 	add	r18,r23,r5
    eaac:	24c9803a 	cmpltu	r4,r4,r19
    eab0:	3d29803a 	cmpltu	r20,r7,r20
    eab4:	a128b03a 	or	r20,r20,r4
    eab8:	95ef803a 	cmpltu	r23,r18,r23
    eabc:	2a53803a 	cmpltu	r9,r5,r9
    eac0:	a0a9883a 	add	r20,r20,r2
    eac4:	4deeb03a 	or	r23,r9,r23
    eac8:	a5ef883a 	add	r23,r20,r23
    eacc:	bc63883a 	add	r17,r23,r17
    ead0:	e004927a 	slli	r2,fp,9
    ead4:	d9000117 	ldw	r4,4(sp)
    ead8:	882e927a 	slli	r23,r17,9
    eadc:	9022d5fa 	srli	r17,r18,23
    eae0:	e038d5fa 	srli	fp,fp,23
    eae4:	1104b03a 	or	r2,r2,r4
    eae8:	9024927a 	slli	r18,r18,9
    eaec:	1004c03a 	cmpne	r2,r2,zero
    eaf0:	bc62b03a 	or	r17,r23,r17
    eaf4:	1738b03a 	or	fp,r2,fp
    eaf8:	8880402c 	andhi	r2,r17,256
    eafc:	e4a4b03a 	or	r18,fp,r18
    eb00:	10000726 	beq	r2,zero,eb20 <__muldf3+0x628>
    eb04:	9006d07a 	srli	r3,r18,1
    eb08:	880497fa 	slli	r2,r17,31
    eb0c:	9480004c 	andi	r18,r18,1
    eb10:	8822d07a 	srli	r17,r17,1
    eb14:	1ca4b03a 	or	r18,r3,r18
    eb18:	14a4b03a 	or	r18,r2,r18
    eb1c:	4007883a 	mov	r3,r8
    eb20:	1880ffc4 	addi	r2,r3,1023
    eb24:	0080460e 	bge	zero,r2,ec40 <__muldf3+0x748>
    eb28:	910001cc 	andi	r4,r18,7
    eb2c:	20000726 	beq	r4,zero,eb4c <__muldf3+0x654>
    eb30:	910003cc 	andi	r4,r18,15
    eb34:	01400104 	movi	r5,4
    eb38:	21400426 	beq	r4,r5,eb4c <__muldf3+0x654>
    eb3c:	9149883a 	add	r4,r18,r5
    eb40:	24a5803a 	cmpltu	r18,r4,r18
    eb44:	8ca3883a 	add	r17,r17,r18
    eb48:	2025883a 	mov	r18,r4
    eb4c:	8900402c 	andhi	r4,r17,256
    eb50:	20000426 	beq	r4,zero,eb64 <__muldf3+0x66c>
    eb54:	18810004 	addi	r2,r3,1024
    eb58:	00ffc034 	movhi	r3,65280
    eb5c:	18ffffc4 	addi	r3,r3,-1
    eb60:	88e2703a 	and	r17,r17,r3
    eb64:	00c1ff84 	movi	r3,2046
    eb68:	18bf1316 	blt	r3,r2,e7b8 <__alt_exception_stack_pointer+0xf800e7b8>
    eb6c:	882c977a 	slli	r22,r17,29
    eb70:	9024d0fa 	srli	r18,r18,3
    eb74:	8822927a 	slli	r17,r17,9
    eb78:	1081ffcc 	andi	r2,r2,2047
    eb7c:	b4acb03a 	or	r22,r22,r18
    eb80:	8820d33a 	srli	r16,r17,12
    eb84:	3027883a 	mov	r19,r6
    eb88:	003eba06 	br	e674 <__alt_exception_stack_pointer+0xf800e674>
    eb8c:	8080022c 	andhi	r2,r16,8
    eb90:	10000926 	beq	r2,zero,ebb8 <__muldf3+0x6c0>
    eb94:	8880022c 	andhi	r2,r17,8
    eb98:	1000071e 	bne	r2,zero,ebb8 <__muldf3+0x6c0>
    eb9c:	00800434 	movhi	r2,16
    eba0:	8c000234 	orhi	r16,r17,8
    eba4:	10bfffc4 	addi	r2,r2,-1
    eba8:	e027883a 	mov	r19,fp
    ebac:	80a0703a 	and	r16,r16,r2
    ebb0:	902d883a 	mov	r22,r18
    ebb4:	003f1706 	br	e814 <__alt_exception_stack_pointer+0xf800e814>
    ebb8:	00800434 	movhi	r2,16
    ebbc:	84000234 	orhi	r16,r16,8
    ebc0:	10bfffc4 	addi	r2,r2,-1
    ebc4:	80a0703a 	and	r16,r16,r2
    ebc8:	003f1206 	br	e814 <__alt_exception_stack_pointer+0xf800e814>
    ebcc:	147ff604 	addi	r17,r2,-40
    ebd0:	3462983a 	sll	r17,r6,r17
    ebd4:	0025883a 	mov	r18,zero
    ebd8:	003ef306 	br	e7a8 <__alt_exception_stack_pointer+0xf800e7a8>
    ebdc:	3009883a 	mov	r4,r6
    ebe0:	d9400215 	stw	r5,8(sp)
    ebe4:	d9800715 	stw	r6,28(sp)
    ebe8:	da400415 	stw	r9,16(sp)
    ebec:	da800315 	stw	r10,12(sp)
    ebf0:	000f8640 	call	f864 <__clzsi2>
    ebf4:	10800804 	addi	r2,r2,32
    ebf8:	da800317 	ldw	r10,12(sp)
    ebfc:	da400417 	ldw	r9,16(sp)
    ec00:	d9800717 	ldw	r6,28(sp)
    ec04:	d9400217 	ldw	r5,8(sp)
    ec08:	003edd06 	br	e780 <__alt_exception_stack_pointer+0xf800e780>
    ec0c:	143ff604 	addi	r16,r2,-40
    ec10:	ac20983a 	sll	r16,r21,r16
    ec14:	002d883a 	mov	r22,zero
    ec18:	003ec106 	br	e720 <__alt_exception_stack_pointer+0xf800e720>
    ec1c:	d9800715 	stw	r6,28(sp)
    ec20:	d9c00215 	stw	r7,8(sp)
    ec24:	da400415 	stw	r9,16(sp)
    ec28:	000f8640 	call	f864 <__clzsi2>
    ec2c:	10800804 	addi	r2,r2,32
    ec30:	da400417 	ldw	r9,16(sp)
    ec34:	d9c00217 	ldw	r7,8(sp)
    ec38:	d9800717 	ldw	r6,28(sp)
    ec3c:	003eae06 	br	e6f8 <__alt_exception_stack_pointer+0xf800e6f8>
    ec40:	00c00044 	movi	r3,1
    ec44:	1887c83a 	sub	r3,r3,r2
    ec48:	01000e04 	movi	r4,56
    ec4c:	20fe8516 	blt	r4,r3,e664 <__alt_exception_stack_pointer+0xf800e664>
    ec50:	010007c4 	movi	r4,31
    ec54:	20c01b16 	blt	r4,r3,ecc4 <__muldf3+0x7cc>
    ec58:	00800804 	movi	r2,32
    ec5c:	10c5c83a 	sub	r2,r2,r3
    ec60:	888a983a 	sll	r5,r17,r2
    ec64:	90c8d83a 	srl	r4,r18,r3
    ec68:	9084983a 	sll	r2,r18,r2
    ec6c:	88e2d83a 	srl	r17,r17,r3
    ec70:	2906b03a 	or	r3,r5,r4
    ec74:	1004c03a 	cmpne	r2,r2,zero
    ec78:	1886b03a 	or	r3,r3,r2
    ec7c:	188001cc 	andi	r2,r3,7
    ec80:	10000726 	beq	r2,zero,eca0 <__muldf3+0x7a8>
    ec84:	188003cc 	andi	r2,r3,15
    ec88:	01000104 	movi	r4,4
    ec8c:	11000426 	beq	r2,r4,eca0 <__muldf3+0x7a8>
    ec90:	1805883a 	mov	r2,r3
    ec94:	10c00104 	addi	r3,r2,4
    ec98:	1885803a 	cmpltu	r2,r3,r2
    ec9c:	88a3883a 	add	r17,r17,r2
    eca0:	8880202c 	andhi	r2,r17,128
    eca4:	10001c26 	beq	r2,zero,ed18 <__muldf3+0x820>
    eca8:	3027883a 	mov	r19,r6
    ecac:	00800044 	movi	r2,1
    ecb0:	0021883a 	mov	r16,zero
    ecb4:	002d883a 	mov	r22,zero
    ecb8:	003e6e06 	br	e674 <__alt_exception_stack_pointer+0xf800e674>
    ecbc:	4007883a 	mov	r3,r8
    ecc0:	003f9706 	br	eb20 <__alt_exception_stack_pointer+0xf800eb20>
    ecc4:	017ff844 	movi	r5,-31
    ecc8:	2885c83a 	sub	r2,r5,r2
    eccc:	888ad83a 	srl	r5,r17,r2
    ecd0:	00800804 	movi	r2,32
    ecd4:	18801a26 	beq	r3,r2,ed40 <__muldf3+0x848>
    ecd8:	01001004 	movi	r4,64
    ecdc:	20c7c83a 	sub	r3,r4,r3
    ece0:	88e2983a 	sll	r17,r17,r3
    ece4:	8ca4b03a 	or	r18,r17,r18
    ece8:	9004c03a 	cmpne	r2,r18,zero
    ecec:	2884b03a 	or	r2,r5,r2
    ecf0:	144001cc 	andi	r17,r2,7
    ecf4:	88000d1e 	bne	r17,zero,ed2c <__muldf3+0x834>
    ecf8:	0021883a 	mov	r16,zero
    ecfc:	102cd0fa 	srli	r22,r2,3
    ed00:	3027883a 	mov	r19,r6
    ed04:	0005883a 	mov	r2,zero
    ed08:	b46cb03a 	or	r22,r22,r17
    ed0c:	003e5906 	br	e674 <__alt_exception_stack_pointer+0xf800e674>
    ed10:	1007883a 	mov	r3,r2
    ed14:	0023883a 	mov	r17,zero
    ed18:	8820927a 	slli	r16,r17,9
    ed1c:	1805883a 	mov	r2,r3
    ed20:	8822977a 	slli	r17,r17,29
    ed24:	8020d33a 	srli	r16,r16,12
    ed28:	003ff406 	br	ecfc <__alt_exception_stack_pointer+0xf800ecfc>
    ed2c:	10c003cc 	andi	r3,r2,15
    ed30:	01000104 	movi	r4,4
    ed34:	193ff626 	beq	r3,r4,ed10 <__alt_exception_stack_pointer+0xf800ed10>
    ed38:	0023883a 	mov	r17,zero
    ed3c:	003fd506 	br	ec94 <__alt_exception_stack_pointer+0xf800ec94>
    ed40:	0023883a 	mov	r17,zero
    ed44:	003fe706 	br	ece4 <__alt_exception_stack_pointer+0xf800ece4>
    ed48:	00800434 	movhi	r2,16
    ed4c:	8c000234 	orhi	r16,r17,8
    ed50:	10bfffc4 	addi	r2,r2,-1
    ed54:	3027883a 	mov	r19,r6
    ed58:	80a0703a 	and	r16,r16,r2
    ed5c:	902d883a 	mov	r22,r18
    ed60:	003eac06 	br	e814 <__alt_exception_stack_pointer+0xf800e814>

0000ed64 <__subdf3>:
    ed64:	02000434 	movhi	r8,16
    ed68:	423fffc4 	addi	r8,r8,-1
    ed6c:	defffb04 	addi	sp,sp,-20
    ed70:	2a14703a 	and	r10,r5,r8
    ed74:	3812d53a 	srli	r9,r7,20
    ed78:	3a10703a 	and	r8,r7,r8
    ed7c:	2006d77a 	srli	r3,r4,29
    ed80:	3004d77a 	srli	r2,r6,29
    ed84:	dc000015 	stw	r16,0(sp)
    ed88:	501490fa 	slli	r10,r10,3
    ed8c:	2820d53a 	srli	r16,r5,20
    ed90:	401090fa 	slli	r8,r8,3
    ed94:	dc800215 	stw	r18,8(sp)
    ed98:	dc400115 	stw	r17,4(sp)
    ed9c:	dfc00415 	stw	ra,16(sp)
    eda0:	202290fa 	slli	r17,r4,3
    eda4:	dcc00315 	stw	r19,12(sp)
    eda8:	4a41ffcc 	andi	r9,r9,2047
    edac:	0101ffc4 	movi	r4,2047
    edb0:	2824d7fa 	srli	r18,r5,31
    edb4:	8401ffcc 	andi	r16,r16,2047
    edb8:	50c6b03a 	or	r3,r10,r3
    edbc:	380ed7fa 	srli	r7,r7,31
    edc0:	408ab03a 	or	r5,r8,r2
    edc4:	300c90fa 	slli	r6,r6,3
    edc8:	49009626 	beq	r9,r4,f024 <__subdf3+0x2c0>
    edcc:	39c0005c 	xori	r7,r7,1
    edd0:	8245c83a 	sub	r2,r16,r9
    edd4:	3c807426 	beq	r7,r18,efa8 <__subdf3+0x244>
    edd8:	0080af0e 	bge	zero,r2,f098 <__subdf3+0x334>
    eddc:	48002a1e 	bne	r9,zero,ee88 <__subdf3+0x124>
    ede0:	2988b03a 	or	r4,r5,r6
    ede4:	20009a1e 	bne	r4,zero,f050 <__subdf3+0x2ec>
    ede8:	888001cc 	andi	r2,r17,7
    edec:	10000726 	beq	r2,zero,ee0c <__subdf3+0xa8>
    edf0:	888003cc 	andi	r2,r17,15
    edf4:	01000104 	movi	r4,4
    edf8:	11000426 	beq	r2,r4,ee0c <__subdf3+0xa8>
    edfc:	890b883a 	add	r5,r17,r4
    ee00:	2c63803a 	cmpltu	r17,r5,r17
    ee04:	1c47883a 	add	r3,r3,r17
    ee08:	2823883a 	mov	r17,r5
    ee0c:	1880202c 	andhi	r2,r3,128
    ee10:	10005926 	beq	r2,zero,ef78 <__subdf3+0x214>
    ee14:	84000044 	addi	r16,r16,1
    ee18:	0081ffc4 	movi	r2,2047
    ee1c:	8080be26 	beq	r16,r2,f118 <__subdf3+0x3b4>
    ee20:	017fe034 	movhi	r5,65408
    ee24:	297fffc4 	addi	r5,r5,-1
    ee28:	1946703a 	and	r3,r3,r5
    ee2c:	1804977a 	slli	r2,r3,29
    ee30:	1806927a 	slli	r3,r3,9
    ee34:	8822d0fa 	srli	r17,r17,3
    ee38:	8401ffcc 	andi	r16,r16,2047
    ee3c:	180ad33a 	srli	r5,r3,12
    ee40:	9100004c 	andi	r4,r18,1
    ee44:	1444b03a 	or	r2,r2,r17
    ee48:	80c1ffcc 	andi	r3,r16,2047
    ee4c:	1820953a 	slli	r16,r3,20
    ee50:	20c03fcc 	andi	r3,r4,255
    ee54:	180897fa 	slli	r4,r3,31
    ee58:	00c00434 	movhi	r3,16
    ee5c:	18ffffc4 	addi	r3,r3,-1
    ee60:	28c6703a 	and	r3,r5,r3
    ee64:	1c06b03a 	or	r3,r3,r16
    ee68:	1906b03a 	or	r3,r3,r4
    ee6c:	dfc00417 	ldw	ra,16(sp)
    ee70:	dcc00317 	ldw	r19,12(sp)
    ee74:	dc800217 	ldw	r18,8(sp)
    ee78:	dc400117 	ldw	r17,4(sp)
    ee7c:	dc000017 	ldw	r16,0(sp)
    ee80:	dec00504 	addi	sp,sp,20
    ee84:	f800283a 	ret
    ee88:	0101ffc4 	movi	r4,2047
    ee8c:	813fd626 	beq	r16,r4,ede8 <__alt_exception_stack_pointer+0xf800ede8>
    ee90:	29402034 	orhi	r5,r5,128
    ee94:	01000e04 	movi	r4,56
    ee98:	2080a316 	blt	r4,r2,f128 <__subdf3+0x3c4>
    ee9c:	010007c4 	movi	r4,31
    eea0:	2080c616 	blt	r4,r2,f1bc <__subdf3+0x458>
    eea4:	01000804 	movi	r4,32
    eea8:	2089c83a 	sub	r4,r4,r2
    eeac:	2910983a 	sll	r8,r5,r4
    eeb0:	308ed83a 	srl	r7,r6,r2
    eeb4:	3108983a 	sll	r4,r6,r4
    eeb8:	2884d83a 	srl	r2,r5,r2
    eebc:	41ccb03a 	or	r6,r8,r7
    eec0:	2008c03a 	cmpne	r4,r4,zero
    eec4:	310cb03a 	or	r6,r6,r4
    eec8:	898dc83a 	sub	r6,r17,r6
    eecc:	89a3803a 	cmpltu	r17,r17,r6
    eed0:	1887c83a 	sub	r3,r3,r2
    eed4:	1c47c83a 	sub	r3,r3,r17
    eed8:	3023883a 	mov	r17,r6
    eedc:	1880202c 	andhi	r2,r3,128
    eee0:	10002326 	beq	r2,zero,ef70 <__subdf3+0x20c>
    eee4:	04c02034 	movhi	r19,128
    eee8:	9cffffc4 	addi	r19,r19,-1
    eeec:	1ce6703a 	and	r19,r3,r19
    eef0:	98007a26 	beq	r19,zero,f0dc <__subdf3+0x378>
    eef4:	9809883a 	mov	r4,r19
    eef8:	000f8640 	call	f864 <__clzsi2>
    eefc:	113ffe04 	addi	r4,r2,-8
    ef00:	00c007c4 	movi	r3,31
    ef04:	19007b16 	blt	r3,r4,f0f4 <__subdf3+0x390>
    ef08:	00800804 	movi	r2,32
    ef0c:	1105c83a 	sub	r2,r2,r4
    ef10:	8884d83a 	srl	r2,r17,r2
    ef14:	9906983a 	sll	r3,r19,r4
    ef18:	8922983a 	sll	r17,r17,r4
    ef1c:	10c4b03a 	or	r2,r2,r3
    ef20:	24007816 	blt	r4,r16,f104 <__subdf3+0x3a0>
    ef24:	2421c83a 	sub	r16,r4,r16
    ef28:	80c00044 	addi	r3,r16,1
    ef2c:	010007c4 	movi	r4,31
    ef30:	20c09516 	blt	r4,r3,f188 <__subdf3+0x424>
    ef34:	01400804 	movi	r5,32
    ef38:	28cbc83a 	sub	r5,r5,r3
    ef3c:	88c8d83a 	srl	r4,r17,r3
    ef40:	8962983a 	sll	r17,r17,r5
    ef44:	114a983a 	sll	r5,r2,r5
    ef48:	10c6d83a 	srl	r3,r2,r3
    ef4c:	8804c03a 	cmpne	r2,r17,zero
    ef50:	290ab03a 	or	r5,r5,r4
    ef54:	28a2b03a 	or	r17,r5,r2
    ef58:	0021883a 	mov	r16,zero
    ef5c:	003fa206 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    ef60:	2090b03a 	or	r8,r4,r2
    ef64:	40018e26 	beq	r8,zero,f5a0 <__subdf3+0x83c>
    ef68:	1007883a 	mov	r3,r2
    ef6c:	2023883a 	mov	r17,r4
    ef70:	888001cc 	andi	r2,r17,7
    ef74:	103f9e1e 	bne	r2,zero,edf0 <__alt_exception_stack_pointer+0xf800edf0>
    ef78:	1804977a 	slli	r2,r3,29
    ef7c:	8822d0fa 	srli	r17,r17,3
    ef80:	1810d0fa 	srli	r8,r3,3
    ef84:	9100004c 	andi	r4,r18,1
    ef88:	1444b03a 	or	r2,r2,r17
    ef8c:	00c1ffc4 	movi	r3,2047
    ef90:	80c02826 	beq	r16,r3,f034 <__subdf3+0x2d0>
    ef94:	01400434 	movhi	r5,16
    ef98:	297fffc4 	addi	r5,r5,-1
    ef9c:	80e0703a 	and	r16,r16,r3
    efa0:	414a703a 	and	r5,r8,r5
    efa4:	003fa806 	br	ee48 <__alt_exception_stack_pointer+0xf800ee48>
    efa8:	0080630e 	bge	zero,r2,f138 <__subdf3+0x3d4>
    efac:	48003026 	beq	r9,zero,f070 <__subdf3+0x30c>
    efb0:	0101ffc4 	movi	r4,2047
    efb4:	813f8c26 	beq	r16,r4,ede8 <__alt_exception_stack_pointer+0xf800ede8>
    efb8:	29402034 	orhi	r5,r5,128
    efbc:	01000e04 	movi	r4,56
    efc0:	2080a90e 	bge	r4,r2,f268 <__subdf3+0x504>
    efc4:	298cb03a 	or	r6,r5,r6
    efc8:	3012c03a 	cmpne	r9,r6,zero
    efcc:	0005883a 	mov	r2,zero
    efd0:	4c53883a 	add	r9,r9,r17
    efd4:	4c63803a 	cmpltu	r17,r9,r17
    efd8:	10c7883a 	add	r3,r2,r3
    efdc:	88c7883a 	add	r3,r17,r3
    efe0:	4823883a 	mov	r17,r9
    efe4:	1880202c 	andhi	r2,r3,128
    efe8:	1000d026 	beq	r2,zero,f32c <__subdf3+0x5c8>
    efec:	84000044 	addi	r16,r16,1
    eff0:	0081ffc4 	movi	r2,2047
    eff4:	8080fe26 	beq	r16,r2,f3f0 <__subdf3+0x68c>
    eff8:	00bfe034 	movhi	r2,65408
    effc:	10bfffc4 	addi	r2,r2,-1
    f000:	1886703a 	and	r3,r3,r2
    f004:	880ad07a 	srli	r5,r17,1
    f008:	180497fa 	slli	r2,r3,31
    f00c:	8900004c 	andi	r4,r17,1
    f010:	2922b03a 	or	r17,r5,r4
    f014:	1806d07a 	srli	r3,r3,1
    f018:	1462b03a 	or	r17,r2,r17
    f01c:	3825883a 	mov	r18,r7
    f020:	003f7106 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f024:	2984b03a 	or	r2,r5,r6
    f028:	103f6826 	beq	r2,zero,edcc <__alt_exception_stack_pointer+0xf800edcc>
    f02c:	39c03fcc 	andi	r7,r7,255
    f030:	003f6706 	br	edd0 <__alt_exception_stack_pointer+0xf800edd0>
    f034:	4086b03a 	or	r3,r8,r2
    f038:	18015226 	beq	r3,zero,f584 <__subdf3+0x820>
    f03c:	00c00434 	movhi	r3,16
    f040:	41400234 	orhi	r5,r8,8
    f044:	18ffffc4 	addi	r3,r3,-1
    f048:	28ca703a 	and	r5,r5,r3
    f04c:	003f7e06 	br	ee48 <__alt_exception_stack_pointer+0xf800ee48>
    f050:	10bfffc4 	addi	r2,r2,-1
    f054:	1000491e 	bne	r2,zero,f17c <__subdf3+0x418>
    f058:	898fc83a 	sub	r7,r17,r6
    f05c:	89e3803a 	cmpltu	r17,r17,r7
    f060:	1947c83a 	sub	r3,r3,r5
    f064:	1c47c83a 	sub	r3,r3,r17
    f068:	3823883a 	mov	r17,r7
    f06c:	003f9b06 	br	eedc <__alt_exception_stack_pointer+0xf800eedc>
    f070:	2988b03a 	or	r4,r5,r6
    f074:	203f5c26 	beq	r4,zero,ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f078:	10bfffc4 	addi	r2,r2,-1
    f07c:	1000931e 	bne	r2,zero,f2cc <__subdf3+0x568>
    f080:	898d883a 	add	r6,r17,r6
    f084:	3463803a 	cmpltu	r17,r6,r17
    f088:	1947883a 	add	r3,r3,r5
    f08c:	88c7883a 	add	r3,r17,r3
    f090:	3023883a 	mov	r17,r6
    f094:	003fd306 	br	efe4 <__alt_exception_stack_pointer+0xf800efe4>
    f098:	1000541e 	bne	r2,zero,f1ec <__subdf3+0x488>
    f09c:	80800044 	addi	r2,r16,1
    f0a0:	1081ffcc 	andi	r2,r2,2047
    f0a4:	01000044 	movi	r4,1
    f0a8:	2080a20e 	bge	r4,r2,f334 <__subdf3+0x5d0>
    f0ac:	8989c83a 	sub	r4,r17,r6
    f0b0:	8905803a 	cmpltu	r2,r17,r4
    f0b4:	1967c83a 	sub	r19,r3,r5
    f0b8:	98a7c83a 	sub	r19,r19,r2
    f0bc:	9880202c 	andhi	r2,r19,128
    f0c0:	10006326 	beq	r2,zero,f250 <__subdf3+0x4ec>
    f0c4:	3463c83a 	sub	r17,r6,r17
    f0c8:	28c7c83a 	sub	r3,r5,r3
    f0cc:	344d803a 	cmpltu	r6,r6,r17
    f0d0:	19a7c83a 	sub	r19,r3,r6
    f0d4:	3825883a 	mov	r18,r7
    f0d8:	983f861e 	bne	r19,zero,eef4 <__alt_exception_stack_pointer+0xf800eef4>
    f0dc:	8809883a 	mov	r4,r17
    f0e0:	000f8640 	call	f864 <__clzsi2>
    f0e4:	10800804 	addi	r2,r2,32
    f0e8:	113ffe04 	addi	r4,r2,-8
    f0ec:	00c007c4 	movi	r3,31
    f0f0:	193f850e 	bge	r3,r4,ef08 <__alt_exception_stack_pointer+0xf800ef08>
    f0f4:	10bff604 	addi	r2,r2,-40
    f0f8:	8884983a 	sll	r2,r17,r2
    f0fc:	0023883a 	mov	r17,zero
    f100:	243f880e 	bge	r4,r16,ef24 <__alt_exception_stack_pointer+0xf800ef24>
    f104:	00ffe034 	movhi	r3,65408
    f108:	18ffffc4 	addi	r3,r3,-1
    f10c:	8121c83a 	sub	r16,r16,r4
    f110:	10c6703a 	and	r3,r2,r3
    f114:	003f3406 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f118:	9100004c 	andi	r4,r18,1
    f11c:	000b883a 	mov	r5,zero
    f120:	0005883a 	mov	r2,zero
    f124:	003f4806 	br	ee48 <__alt_exception_stack_pointer+0xf800ee48>
    f128:	298cb03a 	or	r6,r5,r6
    f12c:	300cc03a 	cmpne	r6,r6,zero
    f130:	0005883a 	mov	r2,zero
    f134:	003f6406 	br	eec8 <__alt_exception_stack_pointer+0xf800eec8>
    f138:	10009a1e 	bne	r2,zero,f3a4 <__subdf3+0x640>
    f13c:	82400044 	addi	r9,r16,1
    f140:	4881ffcc 	andi	r2,r9,2047
    f144:	02800044 	movi	r10,1
    f148:	5080670e 	bge	r10,r2,f2e8 <__subdf3+0x584>
    f14c:	0081ffc4 	movi	r2,2047
    f150:	4880af26 	beq	r9,r2,f410 <__subdf3+0x6ac>
    f154:	898d883a 	add	r6,r17,r6
    f158:	1945883a 	add	r2,r3,r5
    f15c:	3447803a 	cmpltu	r3,r6,r17
    f160:	1887883a 	add	r3,r3,r2
    f164:	182297fa 	slli	r17,r3,31
    f168:	300cd07a 	srli	r6,r6,1
    f16c:	1806d07a 	srli	r3,r3,1
    f170:	4821883a 	mov	r16,r9
    f174:	89a2b03a 	or	r17,r17,r6
    f178:	003f1b06 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f17c:	0101ffc4 	movi	r4,2047
    f180:	813f441e 	bne	r16,r4,ee94 <__alt_exception_stack_pointer+0xf800ee94>
    f184:	003f1806 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f188:	843ff844 	addi	r16,r16,-31
    f18c:	01400804 	movi	r5,32
    f190:	1408d83a 	srl	r4,r2,r16
    f194:	19405026 	beq	r3,r5,f2d8 <__subdf3+0x574>
    f198:	01401004 	movi	r5,64
    f19c:	28c7c83a 	sub	r3,r5,r3
    f1a0:	10c4983a 	sll	r2,r2,r3
    f1a4:	88a2b03a 	or	r17,r17,r2
    f1a8:	8822c03a 	cmpne	r17,r17,zero
    f1ac:	2462b03a 	or	r17,r4,r17
    f1b0:	0007883a 	mov	r3,zero
    f1b4:	0021883a 	mov	r16,zero
    f1b8:	003f6d06 	br	ef70 <__alt_exception_stack_pointer+0xf800ef70>
    f1bc:	11fff804 	addi	r7,r2,-32
    f1c0:	01000804 	movi	r4,32
    f1c4:	29ced83a 	srl	r7,r5,r7
    f1c8:	11004526 	beq	r2,r4,f2e0 <__subdf3+0x57c>
    f1cc:	01001004 	movi	r4,64
    f1d0:	2089c83a 	sub	r4,r4,r2
    f1d4:	2904983a 	sll	r2,r5,r4
    f1d8:	118cb03a 	or	r6,r2,r6
    f1dc:	300cc03a 	cmpne	r6,r6,zero
    f1e0:	398cb03a 	or	r6,r7,r6
    f1e4:	0005883a 	mov	r2,zero
    f1e8:	003f3706 	br	eec8 <__alt_exception_stack_pointer+0xf800eec8>
    f1ec:	80002a26 	beq	r16,zero,f298 <__subdf3+0x534>
    f1f0:	0101ffc4 	movi	r4,2047
    f1f4:	49006626 	beq	r9,r4,f390 <__subdf3+0x62c>
    f1f8:	0085c83a 	sub	r2,zero,r2
    f1fc:	18c02034 	orhi	r3,r3,128
    f200:	01000e04 	movi	r4,56
    f204:	20807e16 	blt	r4,r2,f400 <__subdf3+0x69c>
    f208:	010007c4 	movi	r4,31
    f20c:	2080e716 	blt	r4,r2,f5ac <__subdf3+0x848>
    f210:	01000804 	movi	r4,32
    f214:	2089c83a 	sub	r4,r4,r2
    f218:	1914983a 	sll	r10,r3,r4
    f21c:	8890d83a 	srl	r8,r17,r2
    f220:	8908983a 	sll	r4,r17,r4
    f224:	1884d83a 	srl	r2,r3,r2
    f228:	5222b03a 	or	r17,r10,r8
    f22c:	2006c03a 	cmpne	r3,r4,zero
    f230:	88e2b03a 	or	r17,r17,r3
    f234:	3463c83a 	sub	r17,r6,r17
    f238:	2885c83a 	sub	r2,r5,r2
    f23c:	344d803a 	cmpltu	r6,r6,r17
    f240:	1187c83a 	sub	r3,r2,r6
    f244:	4821883a 	mov	r16,r9
    f248:	3825883a 	mov	r18,r7
    f24c:	003f2306 	br	eedc <__alt_exception_stack_pointer+0xf800eedc>
    f250:	24d0b03a 	or	r8,r4,r19
    f254:	40001b1e 	bne	r8,zero,f2c4 <__subdf3+0x560>
    f258:	0005883a 	mov	r2,zero
    f25c:	0009883a 	mov	r4,zero
    f260:	0021883a 	mov	r16,zero
    f264:	003f4906 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    f268:	010007c4 	movi	r4,31
    f26c:	20803a16 	blt	r4,r2,f358 <__subdf3+0x5f4>
    f270:	01000804 	movi	r4,32
    f274:	2089c83a 	sub	r4,r4,r2
    f278:	2912983a 	sll	r9,r5,r4
    f27c:	3090d83a 	srl	r8,r6,r2
    f280:	3108983a 	sll	r4,r6,r4
    f284:	2884d83a 	srl	r2,r5,r2
    f288:	4a12b03a 	or	r9,r9,r8
    f28c:	2008c03a 	cmpne	r4,r4,zero
    f290:	4912b03a 	or	r9,r9,r4
    f294:	003f4e06 	br	efd0 <__alt_exception_stack_pointer+0xf800efd0>
    f298:	1c48b03a 	or	r4,r3,r17
    f29c:	20003c26 	beq	r4,zero,f390 <__subdf3+0x62c>
    f2a0:	0084303a 	nor	r2,zero,r2
    f2a4:	1000381e 	bne	r2,zero,f388 <__subdf3+0x624>
    f2a8:	3463c83a 	sub	r17,r6,r17
    f2ac:	28c5c83a 	sub	r2,r5,r3
    f2b0:	344d803a 	cmpltu	r6,r6,r17
    f2b4:	1187c83a 	sub	r3,r2,r6
    f2b8:	4821883a 	mov	r16,r9
    f2bc:	3825883a 	mov	r18,r7
    f2c0:	003f0606 	br	eedc <__alt_exception_stack_pointer+0xf800eedc>
    f2c4:	2023883a 	mov	r17,r4
    f2c8:	003f0906 	br	eef0 <__alt_exception_stack_pointer+0xf800eef0>
    f2cc:	0101ffc4 	movi	r4,2047
    f2d0:	813f3a1e 	bne	r16,r4,efbc <__alt_exception_stack_pointer+0xf800efbc>
    f2d4:	003ec406 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f2d8:	0005883a 	mov	r2,zero
    f2dc:	003fb106 	br	f1a4 <__alt_exception_stack_pointer+0xf800f1a4>
    f2e0:	0005883a 	mov	r2,zero
    f2e4:	003fbc06 	br	f1d8 <__alt_exception_stack_pointer+0xf800f1d8>
    f2e8:	1c44b03a 	or	r2,r3,r17
    f2ec:	80008e1e 	bne	r16,zero,f528 <__subdf3+0x7c4>
    f2f0:	1000c826 	beq	r2,zero,f614 <__subdf3+0x8b0>
    f2f4:	2984b03a 	or	r2,r5,r6
    f2f8:	103ebb26 	beq	r2,zero,ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f2fc:	8989883a 	add	r4,r17,r6
    f300:	1945883a 	add	r2,r3,r5
    f304:	2447803a 	cmpltu	r3,r4,r17
    f308:	1887883a 	add	r3,r3,r2
    f30c:	1880202c 	andhi	r2,r3,128
    f310:	2023883a 	mov	r17,r4
    f314:	103f1626 	beq	r2,zero,ef70 <__alt_exception_stack_pointer+0xf800ef70>
    f318:	00bfe034 	movhi	r2,65408
    f31c:	10bfffc4 	addi	r2,r2,-1
    f320:	5021883a 	mov	r16,r10
    f324:	1886703a 	and	r3,r3,r2
    f328:	003eaf06 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f32c:	3825883a 	mov	r18,r7
    f330:	003f0f06 	br	ef70 <__alt_exception_stack_pointer+0xf800ef70>
    f334:	1c44b03a 	or	r2,r3,r17
    f338:	8000251e 	bne	r16,zero,f3d0 <__subdf3+0x66c>
    f33c:	1000661e 	bne	r2,zero,f4d8 <__subdf3+0x774>
    f340:	2990b03a 	or	r8,r5,r6
    f344:	40009626 	beq	r8,zero,f5a0 <__subdf3+0x83c>
    f348:	2807883a 	mov	r3,r5
    f34c:	3023883a 	mov	r17,r6
    f350:	3825883a 	mov	r18,r7
    f354:	003ea406 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f358:	127ff804 	addi	r9,r2,-32
    f35c:	01000804 	movi	r4,32
    f360:	2a52d83a 	srl	r9,r5,r9
    f364:	11008c26 	beq	r2,r4,f598 <__subdf3+0x834>
    f368:	01001004 	movi	r4,64
    f36c:	2085c83a 	sub	r2,r4,r2
    f370:	2884983a 	sll	r2,r5,r2
    f374:	118cb03a 	or	r6,r2,r6
    f378:	300cc03a 	cmpne	r6,r6,zero
    f37c:	4992b03a 	or	r9,r9,r6
    f380:	0005883a 	mov	r2,zero
    f384:	003f1206 	br	efd0 <__alt_exception_stack_pointer+0xf800efd0>
    f388:	0101ffc4 	movi	r4,2047
    f38c:	493f9c1e 	bne	r9,r4,f200 <__alt_exception_stack_pointer+0xf800f200>
    f390:	2807883a 	mov	r3,r5
    f394:	3023883a 	mov	r17,r6
    f398:	4821883a 	mov	r16,r9
    f39c:	3825883a 	mov	r18,r7
    f3a0:	003e9106 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f3a4:	80001f1e 	bne	r16,zero,f424 <__subdf3+0x6c0>
    f3a8:	1c48b03a 	or	r4,r3,r17
    f3ac:	20005a26 	beq	r4,zero,f518 <__subdf3+0x7b4>
    f3b0:	0084303a 	nor	r2,zero,r2
    f3b4:	1000561e 	bne	r2,zero,f510 <__subdf3+0x7ac>
    f3b8:	89a3883a 	add	r17,r17,r6
    f3bc:	1945883a 	add	r2,r3,r5
    f3c0:	898d803a 	cmpltu	r6,r17,r6
    f3c4:	3087883a 	add	r3,r6,r2
    f3c8:	4821883a 	mov	r16,r9
    f3cc:	003f0506 	br	efe4 <__alt_exception_stack_pointer+0xf800efe4>
    f3d0:	10002b1e 	bne	r2,zero,f480 <__subdf3+0x71c>
    f3d4:	2984b03a 	or	r2,r5,r6
    f3d8:	10008026 	beq	r2,zero,f5dc <__subdf3+0x878>
    f3dc:	2807883a 	mov	r3,r5
    f3e0:	3023883a 	mov	r17,r6
    f3e4:	3825883a 	mov	r18,r7
    f3e8:	0401ffc4 	movi	r16,2047
    f3ec:	003e7e06 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f3f0:	3809883a 	mov	r4,r7
    f3f4:	0011883a 	mov	r8,zero
    f3f8:	0005883a 	mov	r2,zero
    f3fc:	003ee306 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    f400:	1c62b03a 	or	r17,r3,r17
    f404:	8822c03a 	cmpne	r17,r17,zero
    f408:	0005883a 	mov	r2,zero
    f40c:	003f8906 	br	f234 <__alt_exception_stack_pointer+0xf800f234>
    f410:	3809883a 	mov	r4,r7
    f414:	4821883a 	mov	r16,r9
    f418:	0011883a 	mov	r8,zero
    f41c:	0005883a 	mov	r2,zero
    f420:	003eda06 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    f424:	0101ffc4 	movi	r4,2047
    f428:	49003b26 	beq	r9,r4,f518 <__subdf3+0x7b4>
    f42c:	0085c83a 	sub	r2,zero,r2
    f430:	18c02034 	orhi	r3,r3,128
    f434:	01000e04 	movi	r4,56
    f438:	20806e16 	blt	r4,r2,f5f4 <__subdf3+0x890>
    f43c:	010007c4 	movi	r4,31
    f440:	20807716 	blt	r4,r2,f620 <__subdf3+0x8bc>
    f444:	01000804 	movi	r4,32
    f448:	2089c83a 	sub	r4,r4,r2
    f44c:	1914983a 	sll	r10,r3,r4
    f450:	8890d83a 	srl	r8,r17,r2
    f454:	8908983a 	sll	r4,r17,r4
    f458:	1884d83a 	srl	r2,r3,r2
    f45c:	5222b03a 	or	r17,r10,r8
    f460:	2006c03a 	cmpne	r3,r4,zero
    f464:	88e2b03a 	or	r17,r17,r3
    f468:	89a3883a 	add	r17,r17,r6
    f46c:	1145883a 	add	r2,r2,r5
    f470:	898d803a 	cmpltu	r6,r17,r6
    f474:	3087883a 	add	r3,r6,r2
    f478:	4821883a 	mov	r16,r9
    f47c:	003ed906 	br	efe4 <__alt_exception_stack_pointer+0xf800efe4>
    f480:	2984b03a 	or	r2,r5,r6
    f484:	10004226 	beq	r2,zero,f590 <__subdf3+0x82c>
    f488:	1808d0fa 	srli	r4,r3,3
    f48c:	8822d0fa 	srli	r17,r17,3
    f490:	1806977a 	slli	r3,r3,29
    f494:	2080022c 	andhi	r2,r4,8
    f498:	1c62b03a 	or	r17,r3,r17
    f49c:	10000826 	beq	r2,zero,f4c0 <__subdf3+0x75c>
    f4a0:	2812d0fa 	srli	r9,r5,3
    f4a4:	4880022c 	andhi	r2,r9,8
    f4a8:	1000051e 	bne	r2,zero,f4c0 <__subdf3+0x75c>
    f4ac:	300cd0fa 	srli	r6,r6,3
    f4b0:	2804977a 	slli	r2,r5,29
    f4b4:	4809883a 	mov	r4,r9
    f4b8:	3825883a 	mov	r18,r7
    f4bc:	11a2b03a 	or	r17,r2,r6
    f4c0:	8806d77a 	srli	r3,r17,29
    f4c4:	200890fa 	slli	r4,r4,3
    f4c8:	882290fa 	slli	r17,r17,3
    f4cc:	0401ffc4 	movi	r16,2047
    f4d0:	1906b03a 	or	r3,r3,r4
    f4d4:	003e4406 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f4d8:	2984b03a 	or	r2,r5,r6
    f4dc:	103e4226 	beq	r2,zero,ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f4e0:	8989c83a 	sub	r4,r17,r6
    f4e4:	8911803a 	cmpltu	r8,r17,r4
    f4e8:	1945c83a 	sub	r2,r3,r5
    f4ec:	1205c83a 	sub	r2,r2,r8
    f4f0:	1200202c 	andhi	r8,r2,128
    f4f4:	403e9a26 	beq	r8,zero,ef60 <__alt_exception_stack_pointer+0xf800ef60>
    f4f8:	3463c83a 	sub	r17,r6,r17
    f4fc:	28c5c83a 	sub	r2,r5,r3
    f500:	344d803a 	cmpltu	r6,r6,r17
    f504:	1187c83a 	sub	r3,r2,r6
    f508:	3825883a 	mov	r18,r7
    f50c:	003e3606 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f510:	0101ffc4 	movi	r4,2047
    f514:	493fc71e 	bne	r9,r4,f434 <__alt_exception_stack_pointer+0xf800f434>
    f518:	2807883a 	mov	r3,r5
    f51c:	3023883a 	mov	r17,r6
    f520:	4821883a 	mov	r16,r9
    f524:	003e3006 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f528:	10003626 	beq	r2,zero,f604 <__subdf3+0x8a0>
    f52c:	2984b03a 	or	r2,r5,r6
    f530:	10001726 	beq	r2,zero,f590 <__subdf3+0x82c>
    f534:	1808d0fa 	srli	r4,r3,3
    f538:	8822d0fa 	srli	r17,r17,3
    f53c:	1806977a 	slli	r3,r3,29
    f540:	2080022c 	andhi	r2,r4,8
    f544:	1c62b03a 	or	r17,r3,r17
    f548:	10000726 	beq	r2,zero,f568 <__subdf3+0x804>
    f54c:	2812d0fa 	srli	r9,r5,3
    f550:	4880022c 	andhi	r2,r9,8
    f554:	1000041e 	bne	r2,zero,f568 <__subdf3+0x804>
    f558:	300cd0fa 	srli	r6,r6,3
    f55c:	2804977a 	slli	r2,r5,29
    f560:	4809883a 	mov	r4,r9
    f564:	11a2b03a 	or	r17,r2,r6
    f568:	8806d77a 	srli	r3,r17,29
    f56c:	200890fa 	slli	r4,r4,3
    f570:	882290fa 	slli	r17,r17,3
    f574:	3825883a 	mov	r18,r7
    f578:	1906b03a 	or	r3,r3,r4
    f57c:	0401ffc4 	movi	r16,2047
    f580:	003e1906 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f584:	000b883a 	mov	r5,zero
    f588:	0005883a 	mov	r2,zero
    f58c:	003e2e06 	br	ee48 <__alt_exception_stack_pointer+0xf800ee48>
    f590:	0401ffc4 	movi	r16,2047
    f594:	003e1406 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f598:	0005883a 	mov	r2,zero
    f59c:	003f7506 	br	f374 <__alt_exception_stack_pointer+0xf800f374>
    f5a0:	0005883a 	mov	r2,zero
    f5a4:	0009883a 	mov	r4,zero
    f5a8:	003e7806 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    f5ac:	123ff804 	addi	r8,r2,-32
    f5b0:	01000804 	movi	r4,32
    f5b4:	1a10d83a 	srl	r8,r3,r8
    f5b8:	11002526 	beq	r2,r4,f650 <__subdf3+0x8ec>
    f5bc:	01001004 	movi	r4,64
    f5c0:	2085c83a 	sub	r2,r4,r2
    f5c4:	1884983a 	sll	r2,r3,r2
    f5c8:	1444b03a 	or	r2,r2,r17
    f5cc:	1004c03a 	cmpne	r2,r2,zero
    f5d0:	40a2b03a 	or	r17,r8,r2
    f5d4:	0005883a 	mov	r2,zero
    f5d8:	003f1606 	br	f234 <__alt_exception_stack_pointer+0xf800f234>
    f5dc:	02000434 	movhi	r8,16
    f5e0:	0009883a 	mov	r4,zero
    f5e4:	423fffc4 	addi	r8,r8,-1
    f5e8:	00bfffc4 	movi	r2,-1
    f5ec:	0401ffc4 	movi	r16,2047
    f5f0:	003e6606 	br	ef8c <__alt_exception_stack_pointer+0xf800ef8c>
    f5f4:	1c62b03a 	or	r17,r3,r17
    f5f8:	8822c03a 	cmpne	r17,r17,zero
    f5fc:	0005883a 	mov	r2,zero
    f600:	003f9906 	br	f468 <__alt_exception_stack_pointer+0xf800f468>
    f604:	2807883a 	mov	r3,r5
    f608:	3023883a 	mov	r17,r6
    f60c:	0401ffc4 	movi	r16,2047
    f610:	003df506 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f614:	2807883a 	mov	r3,r5
    f618:	3023883a 	mov	r17,r6
    f61c:	003df206 	br	ede8 <__alt_exception_stack_pointer+0xf800ede8>
    f620:	123ff804 	addi	r8,r2,-32
    f624:	01000804 	movi	r4,32
    f628:	1a10d83a 	srl	r8,r3,r8
    f62c:	11000a26 	beq	r2,r4,f658 <__subdf3+0x8f4>
    f630:	01001004 	movi	r4,64
    f634:	2085c83a 	sub	r2,r4,r2
    f638:	1884983a 	sll	r2,r3,r2
    f63c:	1444b03a 	or	r2,r2,r17
    f640:	1004c03a 	cmpne	r2,r2,zero
    f644:	40a2b03a 	or	r17,r8,r2
    f648:	0005883a 	mov	r2,zero
    f64c:	003f8606 	br	f468 <__alt_exception_stack_pointer+0xf800f468>
    f650:	0005883a 	mov	r2,zero
    f654:	003fdc06 	br	f5c8 <__alt_exception_stack_pointer+0xf800f5c8>
    f658:	0005883a 	mov	r2,zero
    f65c:	003ff706 	br	f63c <__alt_exception_stack_pointer+0xf800f63c>

0000f660 <__fixdfsi>:
    f660:	280cd53a 	srli	r6,r5,20
    f664:	00c00434 	movhi	r3,16
    f668:	18ffffc4 	addi	r3,r3,-1
    f66c:	3181ffcc 	andi	r6,r6,2047
    f670:	01c0ff84 	movi	r7,1022
    f674:	28c6703a 	and	r3,r5,r3
    f678:	280ad7fa 	srli	r5,r5,31
    f67c:	3980120e 	bge	r7,r6,f6c8 <__fixdfsi+0x68>
    f680:	00810744 	movi	r2,1053
    f684:	11800c16 	blt	r2,r6,f6b8 <__fixdfsi+0x58>
    f688:	00810cc4 	movi	r2,1075
    f68c:	1185c83a 	sub	r2,r2,r6
    f690:	01c007c4 	movi	r7,31
    f694:	18c00434 	orhi	r3,r3,16
    f698:	38800d16 	blt	r7,r2,f6d0 <__fixdfsi+0x70>
    f69c:	31befb44 	addi	r6,r6,-1043
    f6a0:	2084d83a 	srl	r2,r4,r2
    f6a4:	1986983a 	sll	r3,r3,r6
    f6a8:	1884b03a 	or	r2,r3,r2
    f6ac:	28000726 	beq	r5,zero,f6cc <__fixdfsi+0x6c>
    f6b0:	0085c83a 	sub	r2,zero,r2
    f6b4:	f800283a 	ret
    f6b8:	00a00034 	movhi	r2,32768
    f6bc:	10bfffc4 	addi	r2,r2,-1
    f6c0:	2885883a 	add	r2,r5,r2
    f6c4:	f800283a 	ret
    f6c8:	0005883a 	mov	r2,zero
    f6cc:	f800283a 	ret
    f6d0:	008104c4 	movi	r2,1043
    f6d4:	1185c83a 	sub	r2,r2,r6
    f6d8:	1884d83a 	srl	r2,r3,r2
    f6dc:	003ff306 	br	f6ac <__alt_exception_stack_pointer+0xf800f6ac>

0000f6e0 <__floatsidf>:
    f6e0:	defffd04 	addi	sp,sp,-12
    f6e4:	dfc00215 	stw	ra,8(sp)
    f6e8:	dc400115 	stw	r17,4(sp)
    f6ec:	dc000015 	stw	r16,0(sp)
    f6f0:	20002b26 	beq	r4,zero,f7a0 <__floatsidf+0xc0>
    f6f4:	2023883a 	mov	r17,r4
    f6f8:	2020d7fa 	srli	r16,r4,31
    f6fc:	20002d16 	blt	r4,zero,f7b4 <__floatsidf+0xd4>
    f700:	8809883a 	mov	r4,r17
    f704:	000f8640 	call	f864 <__clzsi2>
    f708:	01410784 	movi	r5,1054
    f70c:	288bc83a 	sub	r5,r5,r2
    f710:	01010cc4 	movi	r4,1075
    f714:	2149c83a 	sub	r4,r4,r5
    f718:	00c007c4 	movi	r3,31
    f71c:	1900160e 	bge	r3,r4,f778 <__floatsidf+0x98>
    f720:	00c104c4 	movi	r3,1043
    f724:	1947c83a 	sub	r3,r3,r5
    f728:	88c6983a 	sll	r3,r17,r3
    f72c:	00800434 	movhi	r2,16
    f730:	10bfffc4 	addi	r2,r2,-1
    f734:	1886703a 	and	r3,r3,r2
    f738:	2941ffcc 	andi	r5,r5,2047
    f73c:	800d883a 	mov	r6,r16
    f740:	0005883a 	mov	r2,zero
    f744:	280a953a 	slli	r5,r5,20
    f748:	31803fcc 	andi	r6,r6,255
    f74c:	01000434 	movhi	r4,16
    f750:	300c97fa 	slli	r6,r6,31
    f754:	213fffc4 	addi	r4,r4,-1
    f758:	1906703a 	and	r3,r3,r4
    f75c:	1946b03a 	or	r3,r3,r5
    f760:	1986b03a 	or	r3,r3,r6
    f764:	dfc00217 	ldw	ra,8(sp)
    f768:	dc400117 	ldw	r17,4(sp)
    f76c:	dc000017 	ldw	r16,0(sp)
    f770:	dec00304 	addi	sp,sp,12
    f774:	f800283a 	ret
    f778:	00c002c4 	movi	r3,11
    f77c:	1887c83a 	sub	r3,r3,r2
    f780:	88c6d83a 	srl	r3,r17,r3
    f784:	8904983a 	sll	r2,r17,r4
    f788:	01000434 	movhi	r4,16
    f78c:	213fffc4 	addi	r4,r4,-1
    f790:	2941ffcc 	andi	r5,r5,2047
    f794:	1906703a 	and	r3,r3,r4
    f798:	800d883a 	mov	r6,r16
    f79c:	003fe906 	br	f744 <__alt_exception_stack_pointer+0xf800f744>
    f7a0:	000d883a 	mov	r6,zero
    f7a4:	000b883a 	mov	r5,zero
    f7a8:	0007883a 	mov	r3,zero
    f7ac:	0005883a 	mov	r2,zero
    f7b0:	003fe406 	br	f744 <__alt_exception_stack_pointer+0xf800f744>
    f7b4:	0123c83a 	sub	r17,zero,r4
    f7b8:	003fd106 	br	f700 <__alt_exception_stack_pointer+0xf800f700>

0000f7bc <__floatunsidf>:
    f7bc:	defffe04 	addi	sp,sp,-8
    f7c0:	dc000015 	stw	r16,0(sp)
    f7c4:	dfc00115 	stw	ra,4(sp)
    f7c8:	2021883a 	mov	r16,r4
    f7cc:	20002226 	beq	r4,zero,f858 <__floatunsidf+0x9c>
    f7d0:	000f8640 	call	f864 <__clzsi2>
    f7d4:	01010784 	movi	r4,1054
    f7d8:	2089c83a 	sub	r4,r4,r2
    f7dc:	01810cc4 	movi	r6,1075
    f7e0:	310dc83a 	sub	r6,r6,r4
    f7e4:	00c007c4 	movi	r3,31
    f7e8:	1980120e 	bge	r3,r6,f834 <__floatunsidf+0x78>
    f7ec:	00c104c4 	movi	r3,1043
    f7f0:	1907c83a 	sub	r3,r3,r4
    f7f4:	80ca983a 	sll	r5,r16,r3
    f7f8:	00800434 	movhi	r2,16
    f7fc:	10bfffc4 	addi	r2,r2,-1
    f800:	2101ffcc 	andi	r4,r4,2047
    f804:	0021883a 	mov	r16,zero
    f808:	288a703a 	and	r5,r5,r2
    f80c:	2008953a 	slli	r4,r4,20
    f810:	00c00434 	movhi	r3,16
    f814:	18ffffc4 	addi	r3,r3,-1
    f818:	28c6703a 	and	r3,r5,r3
    f81c:	8005883a 	mov	r2,r16
    f820:	1906b03a 	or	r3,r3,r4
    f824:	dfc00117 	ldw	ra,4(sp)
    f828:	dc000017 	ldw	r16,0(sp)
    f82c:	dec00204 	addi	sp,sp,8
    f830:	f800283a 	ret
    f834:	00c002c4 	movi	r3,11
    f838:	188bc83a 	sub	r5,r3,r2
    f83c:	814ad83a 	srl	r5,r16,r5
    f840:	00c00434 	movhi	r3,16
    f844:	18ffffc4 	addi	r3,r3,-1
    f848:	81a0983a 	sll	r16,r16,r6
    f84c:	2101ffcc 	andi	r4,r4,2047
    f850:	28ca703a 	and	r5,r5,r3
    f854:	003fed06 	br	f80c <__alt_exception_stack_pointer+0xf800f80c>
    f858:	0009883a 	mov	r4,zero
    f85c:	000b883a 	mov	r5,zero
    f860:	003fea06 	br	f80c <__alt_exception_stack_pointer+0xf800f80c>

0000f864 <__clzsi2>:
    f864:	00bfffd4 	movui	r2,65535
    f868:	11000536 	bltu	r2,r4,f880 <__clzsi2+0x1c>
    f86c:	00803fc4 	movi	r2,255
    f870:	11000f36 	bltu	r2,r4,f8b0 <__clzsi2+0x4c>
    f874:	00800804 	movi	r2,32
    f878:	0007883a 	mov	r3,zero
    f87c:	00000506 	br	f894 <__clzsi2+0x30>
    f880:	00804034 	movhi	r2,256
    f884:	10bfffc4 	addi	r2,r2,-1
    f888:	11000c2e 	bgeu	r2,r4,f8bc <__clzsi2+0x58>
    f88c:	00800204 	movi	r2,8
    f890:	00c00604 	movi	r3,24
    f894:	20c8d83a 	srl	r4,r4,r3
    f898:	00c00074 	movhi	r3,1
    f89c:	18cbd604 	addi	r3,r3,12120
    f8a0:	1909883a 	add	r4,r3,r4
    f8a4:	20c00003 	ldbu	r3,0(r4)
    f8a8:	10c5c83a 	sub	r2,r2,r3
    f8ac:	f800283a 	ret
    f8b0:	00800604 	movi	r2,24
    f8b4:	00c00204 	movi	r3,8
    f8b8:	003ff606 	br	f894 <__alt_exception_stack_pointer+0xf800f894>
    f8bc:	00800404 	movi	r2,16
    f8c0:	1007883a 	mov	r3,r2
    f8c4:	003ff306 	br	f894 <__alt_exception_stack_pointer+0xf800f894>

0000f8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8c8:	defffe04 	addi	sp,sp,-8
    f8cc:	dfc00115 	stw	ra,4(sp)
    f8d0:	df000015 	stw	fp,0(sp)
    f8d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8d8:	d0a00c17 	ldw	r2,-32720(gp)
    f8dc:	10000326 	beq	r2,zero,f8ec <alt_get_errno+0x24>
    f8e0:	d0a00c17 	ldw	r2,-32720(gp)
    f8e4:	103ee83a 	callr	r2
    f8e8:	00000106 	br	f8f0 <alt_get_errno+0x28>
    f8ec:	d0a6fa04 	addi	r2,gp,-25624
}
    f8f0:	e037883a 	mov	sp,fp
    f8f4:	dfc00117 	ldw	ra,4(sp)
    f8f8:	df000017 	ldw	fp,0(sp)
    f8fc:	dec00204 	addi	sp,sp,8
    f900:	f800283a 	ret

0000f904 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f904:	defffb04 	addi	sp,sp,-20
    f908:	dfc00415 	stw	ra,16(sp)
    f90c:	df000315 	stw	fp,12(sp)
    f910:	df000304 	addi	fp,sp,12
    f914:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f918:	e0bfff17 	ldw	r2,-4(fp)
    f91c:	10000816 	blt	r2,zero,f940 <close+0x3c>
    f920:	01400304 	movi	r5,12
    f924:	e13fff17 	ldw	r4,-4(fp)
    f928:	000cffc0 	call	cffc <__mulsi3>
    f92c:	1007883a 	mov	r3,r2
    f930:	00800074 	movhi	r2,1
    f934:	108e6404 	addi	r2,r2,14736
    f938:	1885883a 	add	r2,r3,r2
    f93c:	00000106 	br	f944 <close+0x40>
    f940:	0005883a 	mov	r2,zero
    f944:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10001926 	beq	r2,zero,f9b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f950:	e0bffd17 	ldw	r2,-12(fp)
    f954:	10800017 	ldw	r2,0(r2)
    f958:	10800417 	ldw	r2,16(r2)
    f95c:	10000626 	beq	r2,zero,f978 <close+0x74>
    f960:	e0bffd17 	ldw	r2,-12(fp)
    f964:	10800017 	ldw	r2,0(r2)
    f968:	10800417 	ldw	r2,16(r2)
    f96c:	e13ffd17 	ldw	r4,-12(fp)
    f970:	103ee83a 	callr	r2
    f974:	00000106 	br	f97c <close+0x78>
    f978:	0005883a 	mov	r2,zero
    f97c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f980:	e13fff17 	ldw	r4,-4(fp)
    f984:	000ffec0 	call	ffec <alt_release_fd>
    if (rval < 0)
    f988:	e0bffe17 	ldw	r2,-8(fp)
    f98c:	1000070e 	bge	r2,zero,f9ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f990:	000f8c80 	call	f8c8 <alt_get_errno>
    f994:	1007883a 	mov	r3,r2
    f998:	e0bffe17 	ldw	r2,-8(fp)
    f99c:	0085c83a 	sub	r2,zero,r2
    f9a0:	18800015 	stw	r2,0(r3)
      return -1;
    f9a4:	00bfffc4 	movi	r2,-1
    f9a8:	00000706 	br	f9c8 <close+0xc4>
    }
    return 0;
    f9ac:	0005883a 	mov	r2,zero
    f9b0:	00000506 	br	f9c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f9b4:	000f8c80 	call	f8c8 <alt_get_errno>
    f9b8:	1007883a 	mov	r3,r2
    f9bc:	00801444 	movi	r2,81
    f9c0:	18800015 	stw	r2,0(r3)
    return -1;
    f9c4:	00bfffc4 	movi	r2,-1
  }
}
    f9c8:	e037883a 	mov	sp,fp
    f9cc:	dfc00117 	ldw	ra,4(sp)
    f9d0:	df000017 	ldw	fp,0(sp)
    f9d4:	dec00204 	addi	sp,sp,8
    f9d8:	f800283a 	ret

0000f9dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f9dc:	defffc04 	addi	sp,sp,-16
    f9e0:	df000315 	stw	fp,12(sp)
    f9e4:	df000304 	addi	fp,sp,12
    f9e8:	e13ffd15 	stw	r4,-12(fp)
    f9ec:	e17ffe15 	stw	r5,-8(fp)
    f9f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f9f4:	e0bfff17 	ldw	r2,-4(fp)
}
    f9f8:	e037883a 	mov	sp,fp
    f9fc:	df000017 	ldw	fp,0(sp)
    fa00:	dec00104 	addi	sp,sp,4
    fa04:	f800283a 	ret

0000fa08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fa08:	defffe04 	addi	sp,sp,-8
    fa0c:	dfc00115 	stw	ra,4(sp)
    fa10:	df000015 	stw	fp,0(sp)
    fa14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa18:	d0a00c17 	ldw	r2,-32720(gp)
    fa1c:	10000326 	beq	r2,zero,fa2c <alt_get_errno+0x24>
    fa20:	d0a00c17 	ldw	r2,-32720(gp)
    fa24:	103ee83a 	callr	r2
    fa28:	00000106 	br	fa30 <alt_get_errno+0x28>
    fa2c:	d0a6fa04 	addi	r2,gp,-25624
}
    fa30:	e037883a 	mov	sp,fp
    fa34:	dfc00117 	ldw	ra,4(sp)
    fa38:	df000017 	ldw	fp,0(sp)
    fa3c:	dec00204 	addi	sp,sp,8
    fa40:	f800283a 	ret

0000fa44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    fa44:	defffb04 	addi	sp,sp,-20
    fa48:	dfc00415 	stw	ra,16(sp)
    fa4c:	df000315 	stw	fp,12(sp)
    fa50:	df000304 	addi	fp,sp,12
    fa54:	e13ffe15 	stw	r4,-8(fp)
    fa58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa5c:	e0bffe17 	ldw	r2,-8(fp)
    fa60:	10000816 	blt	r2,zero,fa84 <fstat+0x40>
    fa64:	01400304 	movi	r5,12
    fa68:	e13ffe17 	ldw	r4,-8(fp)
    fa6c:	000cffc0 	call	cffc <__mulsi3>
    fa70:	1007883a 	mov	r3,r2
    fa74:	00800074 	movhi	r2,1
    fa78:	108e6404 	addi	r2,r2,14736
    fa7c:	1885883a 	add	r2,r3,r2
    fa80:	00000106 	br	fa88 <fstat+0x44>
    fa84:	0005883a 	mov	r2,zero
    fa88:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    fa8c:	e0bffd17 	ldw	r2,-12(fp)
    fa90:	10001026 	beq	r2,zero,fad4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    fa94:	e0bffd17 	ldw	r2,-12(fp)
    fa98:	10800017 	ldw	r2,0(r2)
    fa9c:	10800817 	ldw	r2,32(r2)
    faa0:	10000726 	beq	r2,zero,fac0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    faa4:	e0bffd17 	ldw	r2,-12(fp)
    faa8:	10800017 	ldw	r2,0(r2)
    faac:	10800817 	ldw	r2,32(r2)
    fab0:	e17fff17 	ldw	r5,-4(fp)
    fab4:	e13ffd17 	ldw	r4,-12(fp)
    fab8:	103ee83a 	callr	r2
    fabc:	00000a06 	br	fae8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    fac0:	e0bfff17 	ldw	r2,-4(fp)
    fac4:	00c80004 	movi	r3,8192
    fac8:	10c00115 	stw	r3,4(r2)
      return 0;
    facc:	0005883a 	mov	r2,zero
    fad0:	00000506 	br	fae8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fad4:	000fa080 	call	fa08 <alt_get_errno>
    fad8:	1007883a 	mov	r3,r2
    fadc:	00801444 	movi	r2,81
    fae0:	18800015 	stw	r2,0(r3)
    return -1;
    fae4:	00bfffc4 	movi	r2,-1
  }
}
    fae8:	e037883a 	mov	sp,fp
    faec:	dfc00117 	ldw	ra,4(sp)
    faf0:	df000017 	ldw	fp,0(sp)
    faf4:	dec00204 	addi	sp,sp,8
    faf8:	f800283a 	ret

0000fafc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fafc:	defffe04 	addi	sp,sp,-8
    fb00:	dfc00115 	stw	ra,4(sp)
    fb04:	df000015 	stw	fp,0(sp)
    fb08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb0c:	d0a00c17 	ldw	r2,-32720(gp)
    fb10:	10000326 	beq	r2,zero,fb20 <alt_get_errno+0x24>
    fb14:	d0a00c17 	ldw	r2,-32720(gp)
    fb18:	103ee83a 	callr	r2
    fb1c:	00000106 	br	fb24 <alt_get_errno+0x28>
    fb20:	d0a6fa04 	addi	r2,gp,-25624
}
    fb24:	e037883a 	mov	sp,fp
    fb28:	dfc00117 	ldw	ra,4(sp)
    fb2c:	df000017 	ldw	fp,0(sp)
    fb30:	dec00204 	addi	sp,sp,8
    fb34:	f800283a 	ret

0000fb38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fb38:	deffed04 	addi	sp,sp,-76
    fb3c:	dfc01215 	stw	ra,72(sp)
    fb40:	df001115 	stw	fp,68(sp)
    fb44:	df001104 	addi	fp,sp,68
    fb48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb4c:	e0bfff17 	ldw	r2,-4(fp)
    fb50:	10000816 	blt	r2,zero,fb74 <isatty+0x3c>
    fb54:	01400304 	movi	r5,12
    fb58:	e13fff17 	ldw	r4,-4(fp)
    fb5c:	000cffc0 	call	cffc <__mulsi3>
    fb60:	1007883a 	mov	r3,r2
    fb64:	00800074 	movhi	r2,1
    fb68:	108e6404 	addi	r2,r2,14736
    fb6c:	1885883a 	add	r2,r3,r2
    fb70:	00000106 	br	fb78 <isatty+0x40>
    fb74:	0005883a 	mov	r2,zero
    fb78:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fb7c:	e0bfef17 	ldw	r2,-68(fp)
    fb80:	10000e26 	beq	r2,zero,fbbc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fb84:	e0bfef17 	ldw	r2,-68(fp)
    fb88:	10800017 	ldw	r2,0(r2)
    fb8c:	10800817 	ldw	r2,32(r2)
    fb90:	1000021e 	bne	r2,zero,fb9c <isatty+0x64>
    {
      return 1;
    fb94:	00800044 	movi	r2,1
    fb98:	00000d06 	br	fbd0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fb9c:	e0bff004 	addi	r2,fp,-64
    fba0:	100b883a 	mov	r5,r2
    fba4:	e13fff17 	ldw	r4,-4(fp)
    fba8:	000fa440 	call	fa44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fbac:	e0bff117 	ldw	r2,-60(fp)
    fbb0:	10880020 	cmpeqi	r2,r2,8192
    fbb4:	10803fcc 	andi	r2,r2,255
    fbb8:	00000506 	br	fbd0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fbbc:	000fafc0 	call	fafc <alt_get_errno>
    fbc0:	1007883a 	mov	r3,r2
    fbc4:	00801444 	movi	r2,81
    fbc8:	18800015 	stw	r2,0(r3)
    return 0;
    fbcc:	0005883a 	mov	r2,zero
  }
}
    fbd0:	e037883a 	mov	sp,fp
    fbd4:	dfc00117 	ldw	ra,4(sp)
    fbd8:	df000017 	ldw	fp,0(sp)
    fbdc:	dec00204 	addi	sp,sp,8
    fbe0:	f800283a 	ret

0000fbe4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fbe4:	defffc04 	addi	sp,sp,-16
    fbe8:	df000315 	stw	fp,12(sp)
    fbec:	df000304 	addi	fp,sp,12
    fbf0:	e13ffd15 	stw	r4,-12(fp)
    fbf4:	e17ffe15 	stw	r5,-8(fp)
    fbf8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fbfc:	e0fffe17 	ldw	r3,-8(fp)
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	18800c26 	beq	r3,r2,fc38 <alt_load_section+0x54>
  {
    while( to != end )
    fc08:	00000806 	br	fc2c <alt_load_section+0x48>
    {
      *to++ = *from++;
    fc0c:	e0bffe17 	ldw	r2,-8(fp)
    fc10:	10c00104 	addi	r3,r2,4
    fc14:	e0fffe15 	stw	r3,-8(fp)
    fc18:	e0fffd17 	ldw	r3,-12(fp)
    fc1c:	19000104 	addi	r4,r3,4
    fc20:	e13ffd15 	stw	r4,-12(fp)
    fc24:	18c00017 	ldw	r3,0(r3)
    fc28:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fc2c:	e0fffe17 	ldw	r3,-8(fp)
    fc30:	e0bfff17 	ldw	r2,-4(fp)
    fc34:	18bff51e 	bne	r3,r2,fc0c <__alt_exception_stack_pointer+0xf800fc0c>
    {
      *to++ = *from++;
    }
  }
}
    fc38:	0001883a 	nop
    fc3c:	e037883a 	mov	sp,fp
    fc40:	df000017 	ldw	fp,0(sp)
    fc44:	dec00104 	addi	sp,sp,4
    fc48:	f800283a 	ret

0000fc4c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    fc4c:	defffe04 	addi	sp,sp,-8
    fc50:	dfc00115 	stw	ra,4(sp)
    fc54:	df000015 	stw	fp,0(sp)
    fc58:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fc5c:	01800074 	movhi	r6,1
    fc60:	31931204 	addi	r6,r6,19528
    fc64:	01400074 	movhi	r5,1
    fc68:	294c3104 	addi	r5,r5,12484
    fc6c:	01000074 	movhi	r4,1
    fc70:	21131204 	addi	r4,r4,19528
    fc74:	000fbe40 	call	fbe4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fc78:	01800034 	movhi	r6,0
    fc7c:	31808f04 	addi	r6,r6,572
    fc80:	01400034 	movhi	r5,0
    fc84:	29400804 	addi	r5,r5,32
    fc88:	01000034 	movhi	r4,0
    fc8c:	21000804 	addi	r4,r4,32
    fc90:	000fbe40 	call	fbe4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fc94:	01800074 	movhi	r6,1
    fc98:	318c3104 	addi	r6,r6,12484
    fc9c:	01400074 	movhi	r5,1
    fca0:	29495804 	addi	r5,r5,9568
    fca4:	01000074 	movhi	r4,1
    fca8:	21095804 	addi	r4,r4,9568
    fcac:	000fbe40 	call	fbe4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fcb0:	00114a80 	call	114a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    fcb4:	00116680 	call	11668 <alt_icache_flush_all>
}
    fcb8:	0001883a 	nop
    fcbc:	e037883a 	mov	sp,fp
    fcc0:	dfc00117 	ldw	ra,4(sp)
    fcc4:	df000017 	ldw	fp,0(sp)
    fcc8:	dec00204 	addi	sp,sp,8
    fccc:	f800283a 	ret

0000fcd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fcd0:	defffe04 	addi	sp,sp,-8
    fcd4:	dfc00115 	stw	ra,4(sp)
    fcd8:	df000015 	stw	fp,0(sp)
    fcdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fce0:	d0a00c17 	ldw	r2,-32720(gp)
    fce4:	10000326 	beq	r2,zero,fcf4 <alt_get_errno+0x24>
    fce8:	d0a00c17 	ldw	r2,-32720(gp)
    fcec:	103ee83a 	callr	r2
    fcf0:	00000106 	br	fcf8 <alt_get_errno+0x28>
    fcf4:	d0a6fa04 	addi	r2,gp,-25624
}
    fcf8:	e037883a 	mov	sp,fp
    fcfc:	dfc00117 	ldw	ra,4(sp)
    fd00:	df000017 	ldw	fp,0(sp)
    fd04:	dec00204 	addi	sp,sp,8
    fd08:	f800283a 	ret

0000fd0c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fd0c:	defff904 	addi	sp,sp,-28
    fd10:	dfc00615 	stw	ra,24(sp)
    fd14:	df000515 	stw	fp,20(sp)
    fd18:	df000504 	addi	fp,sp,20
    fd1c:	e13ffd15 	stw	r4,-12(fp)
    fd20:	e17ffe15 	stw	r5,-8(fp)
    fd24:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fd28:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fd2c:	e0bffd17 	ldw	r2,-12(fp)
    fd30:	10000816 	blt	r2,zero,fd54 <lseek+0x48>
    fd34:	01400304 	movi	r5,12
    fd38:	e13ffd17 	ldw	r4,-12(fp)
    fd3c:	000cffc0 	call	cffc <__mulsi3>
    fd40:	1007883a 	mov	r3,r2
    fd44:	00800074 	movhi	r2,1
    fd48:	108e6404 	addi	r2,r2,14736
    fd4c:	1885883a 	add	r2,r3,r2
    fd50:	00000106 	br	fd58 <lseek+0x4c>
    fd54:	0005883a 	mov	r2,zero
    fd58:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fd5c:	e0bffc17 	ldw	r2,-16(fp)
    fd60:	10001026 	beq	r2,zero,fda4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fd64:	e0bffc17 	ldw	r2,-16(fp)
    fd68:	10800017 	ldw	r2,0(r2)
    fd6c:	10800717 	ldw	r2,28(r2)
    fd70:	10000926 	beq	r2,zero,fd98 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fd74:	e0bffc17 	ldw	r2,-16(fp)
    fd78:	10800017 	ldw	r2,0(r2)
    fd7c:	10800717 	ldw	r2,28(r2)
    fd80:	e1bfff17 	ldw	r6,-4(fp)
    fd84:	e17ffe17 	ldw	r5,-8(fp)
    fd88:	e13ffc17 	ldw	r4,-16(fp)
    fd8c:	103ee83a 	callr	r2
    fd90:	e0bffb15 	stw	r2,-20(fp)
    fd94:	00000506 	br	fdac <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fd98:	00bfde84 	movi	r2,-134
    fd9c:	e0bffb15 	stw	r2,-20(fp)
    fda0:	00000206 	br	fdac <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    fda4:	00bfebc4 	movi	r2,-81
    fda8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fdac:	e0bffb17 	ldw	r2,-20(fp)
    fdb0:	1000070e 	bge	r2,zero,fdd0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    fdb4:	000fcd00 	call	fcd0 <alt_get_errno>
    fdb8:	1007883a 	mov	r3,r2
    fdbc:	e0bffb17 	ldw	r2,-20(fp)
    fdc0:	0085c83a 	sub	r2,zero,r2
    fdc4:	18800015 	stw	r2,0(r3)
    rc = -1;
    fdc8:	00bfffc4 	movi	r2,-1
    fdcc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fdd0:	e0bffb17 	ldw	r2,-20(fp)
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	dfc00117 	ldw	ra,4(sp)
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00204 	addi	sp,sp,8
    fde4:	f800283a 	ret

0000fde8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fde8:	defffd04 	addi	sp,sp,-12
    fdec:	dfc00215 	stw	ra,8(sp)
    fdf0:	df000115 	stw	fp,4(sp)
    fdf4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fdf8:	0009883a 	mov	r4,zero
    fdfc:	00103740 	call	10374 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fe00:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fe04:	00103ac0 	call	103ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fe08:	01800074 	movhi	r6,1
    fe0c:	318c1904 	addi	r6,r6,12388
    fe10:	01400074 	movhi	r5,1
    fe14:	294c1e04 	addi	r5,r5,12408
    fe18:	01000074 	movhi	r4,1
    fe1c:	210c1904 	addi	r4,r4,12388
    fe20:	0011a0c0 	call	11a0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fe24:	00115a80 	call	115a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fe28:	01000074 	movhi	r4,1
    fe2c:	21058204 	addi	r4,r4,5640
    fe30:	00121cc0 	call	121cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fe34:	d0a6fe17 	ldw	r2,-25608(gp)
    fe38:	d0e6ff17 	ldw	r3,-25604(gp)
    fe3c:	d1270017 	ldw	r4,-25600(gp)
    fe40:	200d883a 	mov	r6,r4
    fe44:	180b883a 	mov	r5,r3
    fe48:	1009883a 	mov	r4,r2
    fe4c:	00014640 	call	1464 <main>
    fe50:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fe54:	01000044 	movi	r4,1
    fe58:	000f9040 	call	f904 <close>
  exit (result);
    fe5c:	e13fff17 	ldw	r4,-4(fp)
    fe60:	00121e00 	call	121e0 <exit>

0000fe64 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fe64:	defffe04 	addi	sp,sp,-8
    fe68:	df000115 	stw	fp,4(sp)
    fe6c:	df000104 	addi	fp,sp,4
    fe70:	e13fff15 	stw	r4,-4(fp)
}
    fe74:	0001883a 	nop
    fe78:	e037883a 	mov	sp,fp
    fe7c:	df000017 	ldw	fp,0(sp)
    fe80:	dec00104 	addi	sp,sp,4
    fe84:	f800283a 	ret

0000fe88 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fe88:	defffe04 	addi	sp,sp,-8
    fe8c:	df000115 	stw	fp,4(sp)
    fe90:	df000104 	addi	fp,sp,4
    fe94:	e13fff15 	stw	r4,-4(fp)
}
    fe98:	0001883a 	nop
    fe9c:	e037883a 	mov	sp,fp
    fea0:	df000017 	ldw	fp,0(sp)
    fea4:	dec00104 	addi	sp,sp,4
    fea8:	f800283a 	ret

0000feac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    feac:	defffe04 	addi	sp,sp,-8
    feb0:	dfc00115 	stw	ra,4(sp)
    feb4:	df000015 	stw	fp,0(sp)
    feb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    febc:	d0a00c17 	ldw	r2,-32720(gp)
    fec0:	10000326 	beq	r2,zero,fed0 <alt_get_errno+0x24>
    fec4:	d0a00c17 	ldw	r2,-32720(gp)
    fec8:	103ee83a 	callr	r2
    fecc:	00000106 	br	fed4 <alt_get_errno+0x28>
    fed0:	d0a6fa04 	addi	r2,gp,-25624
}
    fed4:	e037883a 	mov	sp,fp
    fed8:	dfc00117 	ldw	ra,4(sp)
    fedc:	df000017 	ldw	fp,0(sp)
    fee0:	dec00204 	addi	sp,sp,8
    fee4:	f800283a 	ret

0000fee8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fee8:	defff904 	addi	sp,sp,-28
    feec:	dfc00615 	stw	ra,24(sp)
    fef0:	df000515 	stw	fp,20(sp)
    fef4:	df000504 	addi	fp,sp,20
    fef8:	e13ffd15 	stw	r4,-12(fp)
    fefc:	e17ffe15 	stw	r5,-8(fp)
    ff00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ff04:	e0bffd17 	ldw	r2,-12(fp)
    ff08:	10000816 	blt	r2,zero,ff2c <read+0x44>
    ff0c:	01400304 	movi	r5,12
    ff10:	e13ffd17 	ldw	r4,-12(fp)
    ff14:	000cffc0 	call	cffc <__mulsi3>
    ff18:	1007883a 	mov	r3,r2
    ff1c:	00800074 	movhi	r2,1
    ff20:	108e6404 	addi	r2,r2,14736
    ff24:	1885883a 	add	r2,r3,r2
    ff28:	00000106 	br	ff30 <read+0x48>
    ff2c:	0005883a 	mov	r2,zero
    ff30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ff34:	e0bffb17 	ldw	r2,-20(fp)
    ff38:	10002226 	beq	r2,zero,ffc4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ff3c:	e0bffb17 	ldw	r2,-20(fp)
    ff40:	10800217 	ldw	r2,8(r2)
    ff44:	108000cc 	andi	r2,r2,3
    ff48:	10800060 	cmpeqi	r2,r2,1
    ff4c:	1000181e 	bne	r2,zero,ffb0 <read+0xc8>
        (fd->dev->read))
    ff50:	e0bffb17 	ldw	r2,-20(fp)
    ff54:	10800017 	ldw	r2,0(r2)
    ff58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ff5c:	10001426 	beq	r2,zero,ffb0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ff60:	e0bffb17 	ldw	r2,-20(fp)
    ff64:	10800017 	ldw	r2,0(r2)
    ff68:	10800517 	ldw	r2,20(r2)
    ff6c:	e0ffff17 	ldw	r3,-4(fp)
    ff70:	180d883a 	mov	r6,r3
    ff74:	e17ffe17 	ldw	r5,-8(fp)
    ff78:	e13ffb17 	ldw	r4,-20(fp)
    ff7c:	103ee83a 	callr	r2
    ff80:	e0bffc15 	stw	r2,-16(fp)
    ff84:	e0bffc17 	ldw	r2,-16(fp)
    ff88:	1000070e 	bge	r2,zero,ffa8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    ff8c:	000feac0 	call	feac <alt_get_errno>
    ff90:	1007883a 	mov	r3,r2
    ff94:	e0bffc17 	ldw	r2,-16(fp)
    ff98:	0085c83a 	sub	r2,zero,r2
    ff9c:	18800015 	stw	r2,0(r3)
          return -1;
    ffa0:	00bfffc4 	movi	r2,-1
    ffa4:	00000c06 	br	ffd8 <read+0xf0>
        }
        return rval;
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	00000a06 	br	ffd8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ffb0:	000feac0 	call	feac <alt_get_errno>
    ffb4:	1007883a 	mov	r3,r2
    ffb8:	00800344 	movi	r2,13
    ffbc:	18800015 	stw	r2,0(r3)
    ffc0:	00000406 	br	ffd4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ffc4:	000feac0 	call	feac <alt_get_errno>
    ffc8:	1007883a 	mov	r3,r2
    ffcc:	00801444 	movi	r2,81
    ffd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ffd4:	00bfffc4 	movi	r2,-1
}
    ffd8:	e037883a 	mov	sp,fp
    ffdc:	dfc00117 	ldw	ra,4(sp)
    ffe0:	df000017 	ldw	fp,0(sp)
    ffe4:	dec00204 	addi	sp,sp,8
    ffe8:	f800283a 	ret

0000ffec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ffec:	defffc04 	addi	sp,sp,-16
    fff0:	dfc00315 	stw	ra,12(sp)
    fff4:	df000215 	stw	fp,8(sp)
    fff8:	dc000115 	stw	r16,4(sp)
    fffc:	df000204 	addi	fp,sp,8
   10000:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10004:	e0bffe17 	ldw	r2,-8(fp)
   10008:	108000d0 	cmplti	r2,r2,3
   1000c:	1000111e 	bne	r2,zero,10054 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10010:	04000074 	movhi	r16,1
   10014:	840e6404 	addi	r16,r16,14736
   10018:	e0bffe17 	ldw	r2,-8(fp)
   1001c:	01400304 	movi	r5,12
   10020:	1009883a 	mov	r4,r2
   10024:	000cffc0 	call	cffc <__mulsi3>
   10028:	8085883a 	add	r2,r16,r2
   1002c:	10800204 	addi	r2,r2,8
   10030:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10034:	04000074 	movhi	r16,1
   10038:	840e6404 	addi	r16,r16,14736
   1003c:	e0bffe17 	ldw	r2,-8(fp)
   10040:	01400304 	movi	r5,12
   10044:	1009883a 	mov	r4,r2
   10048:	000cffc0 	call	cffc <__mulsi3>
   1004c:	8085883a 	add	r2,r16,r2
   10050:	10000015 	stw	zero,0(r2)
  }
}
   10054:	0001883a 	nop
   10058:	e6ffff04 	addi	sp,fp,-4
   1005c:	dfc00217 	ldw	ra,8(sp)
   10060:	df000117 	ldw	fp,4(sp)
   10064:	dc000017 	ldw	r16,0(sp)
   10068:	dec00304 	addi	sp,sp,12
   1006c:	f800283a 	ret

00010070 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10070:	defff904 	addi	sp,sp,-28
   10074:	df000615 	stw	fp,24(sp)
   10078:	df000604 	addi	fp,sp,24
   1007c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10080:	0005303a 	rdctl	r2,status
   10084:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10088:	e0fffe17 	ldw	r3,-8(fp)
   1008c:	00bfff84 	movi	r2,-2
   10090:	1884703a 	and	r2,r3,r2
   10094:	1001703a 	wrctl	status,r2
  
  return context;
   10098:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1009c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   100a0:	d0a00d17 	ldw	r2,-32716(gp)
   100a4:	10c000c4 	addi	r3,r2,3
   100a8:	00bfff04 	movi	r2,-4
   100ac:	1884703a 	and	r2,r3,r2
   100b0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   100b4:	d0e00d17 	ldw	r3,-32716(gp)
   100b8:	e0bfff17 	ldw	r2,-4(fp)
   100bc:	1887883a 	add	r3,r3,r2
   100c0:	00820034 	movhi	r2,2048
   100c4:	10bf0004 	addi	r2,r2,-1024
   100c8:	10c0062e 	bgeu	r2,r3,100e4 <sbrk+0x74>
   100cc:	e0bffb17 	ldw	r2,-20(fp)
   100d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100d4:	e0bffa17 	ldw	r2,-24(fp)
   100d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   100dc:	00bfffc4 	movi	r2,-1
   100e0:	00000b06 	br	10110 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   100e4:	d0a00d17 	ldw	r2,-32716(gp)
   100e8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   100ec:	d0e00d17 	ldw	r3,-32716(gp)
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	1885883a 	add	r2,r3,r2
   100f8:	d0a00d15 	stw	r2,-32716(gp)
   100fc:	e0bffb17 	ldw	r2,-20(fp)
   10100:	e0bffc15 	stw	r2,-16(fp)
   10104:	e0bffc17 	ldw	r2,-16(fp)
   10108:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1010c:	e0bffd17 	ldw	r2,-12(fp)
} 
   10110:	e037883a 	mov	sp,fp
   10114:	df000017 	ldw	fp,0(sp)
   10118:	dec00104 	addi	sp,sp,4
   1011c:	f800283a 	ret

00010120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10120:	defffe04 	addi	sp,sp,-8
   10124:	dfc00115 	stw	ra,4(sp)
   10128:	df000015 	stw	fp,0(sp)
   1012c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10130:	d0a00c17 	ldw	r2,-32720(gp)
   10134:	10000326 	beq	r2,zero,10144 <alt_get_errno+0x24>
   10138:	d0a00c17 	ldw	r2,-32720(gp)
   1013c:	103ee83a 	callr	r2
   10140:	00000106 	br	10148 <alt_get_errno+0x28>
   10144:	d0a6fa04 	addi	r2,gp,-25624
}
   10148:	e037883a 	mov	sp,fp
   1014c:	dfc00117 	ldw	ra,4(sp)
   10150:	df000017 	ldw	fp,0(sp)
   10154:	dec00204 	addi	sp,sp,8
   10158:	f800283a 	ret

0001015c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1015c:	defffc04 	addi	sp,sp,-16
   10160:	dfc00315 	stw	ra,12(sp)
   10164:	df000215 	stw	fp,8(sp)
   10168:	df000204 	addi	fp,sp,8
   1016c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10170:	d0a70317 	ldw	r2,-25588(gp)
  clock_t ticks = alt_nticks(); 
   10174:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10178:	d0a70217 	ldw	r2,-25592(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1017c:	1000061e 	bne	r2,zero,10198 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   10180:	00101200 	call	10120 <alt_get_errno>
   10184:	1007883a 	mov	r3,r2
   10188:	00801604 	movi	r2,88
   1018c:	18800015 	stw	r2,0(r3)
    return 0;
   10190:	0005883a 	mov	r2,zero
   10194:	00000a06 	br	101c0 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   10198:	e0bfff17 	ldw	r2,-4(fp)
   1019c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	e0fffe17 	ldw	r3,-8(fp)
   101a8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   101ac:	e0bfff17 	ldw	r2,-4(fp)
   101b0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   101b4:	e0bfff17 	ldw	r2,-4(fp)
   101b8:	10000315 	stw	zero,12(r2)

  return ticks;
   101bc:	e0bffe17 	ldw	r2,-8(fp)
}
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   101d4:	defffd04 	addi	sp,sp,-12
   101d8:	dfc00215 	stw	ra,8(sp)
   101dc:	df000115 	stw	fp,4(sp)
   101e0:	df000104 	addi	fp,sp,4
   101e4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   101e8:	e13fff17 	ldw	r4,-4(fp)
   101ec:	00113500 	call	11350 <alt_busy_sleep>
}
   101f0:	e037883a 	mov	sp,fp
   101f4:	dfc00117 	ldw	ra,4(sp)
   101f8:	df000017 	ldw	fp,0(sp)
   101fc:	dec00204 	addi	sp,sp,8
   10200:	f800283a 	ret

00010204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10204:	defffe04 	addi	sp,sp,-8
   10208:	dfc00115 	stw	ra,4(sp)
   1020c:	df000015 	stw	fp,0(sp)
   10210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10214:	d0a00c17 	ldw	r2,-32720(gp)
   10218:	10000326 	beq	r2,zero,10228 <alt_get_errno+0x24>
   1021c:	d0a00c17 	ldw	r2,-32720(gp)
   10220:	103ee83a 	callr	r2
   10224:	00000106 	br	1022c <alt_get_errno+0x28>
   10228:	d0a6fa04 	addi	r2,gp,-25624
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

00010240 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10240:	defff904 	addi	sp,sp,-28
   10244:	dfc00615 	stw	ra,24(sp)
   10248:	df000515 	stw	fp,20(sp)
   1024c:	df000504 	addi	fp,sp,20
   10250:	e13ffd15 	stw	r4,-12(fp)
   10254:	e17ffe15 	stw	r5,-8(fp)
   10258:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1025c:	e0bffd17 	ldw	r2,-12(fp)
   10260:	10000816 	blt	r2,zero,10284 <write+0x44>
   10264:	01400304 	movi	r5,12
   10268:	e13ffd17 	ldw	r4,-12(fp)
   1026c:	000cffc0 	call	cffc <__mulsi3>
   10270:	1007883a 	mov	r3,r2
   10274:	00800074 	movhi	r2,1
   10278:	108e6404 	addi	r2,r2,14736
   1027c:	1885883a 	add	r2,r3,r2
   10280:	00000106 	br	10288 <write+0x48>
   10284:	0005883a 	mov	r2,zero
   10288:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1028c:	e0bffb17 	ldw	r2,-20(fp)
   10290:	10002126 	beq	r2,zero,10318 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10294:	e0bffb17 	ldw	r2,-20(fp)
   10298:	10800217 	ldw	r2,8(r2)
   1029c:	108000cc 	andi	r2,r2,3
   102a0:	10001826 	beq	r2,zero,10304 <write+0xc4>
   102a4:	e0bffb17 	ldw	r2,-20(fp)
   102a8:	10800017 	ldw	r2,0(r2)
   102ac:	10800617 	ldw	r2,24(r2)
   102b0:	10001426 	beq	r2,zero,10304 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   102b4:	e0bffb17 	ldw	r2,-20(fp)
   102b8:	10800017 	ldw	r2,0(r2)
   102bc:	10800617 	ldw	r2,24(r2)
   102c0:	e0ffff17 	ldw	r3,-4(fp)
   102c4:	180d883a 	mov	r6,r3
   102c8:	e17ffe17 	ldw	r5,-8(fp)
   102cc:	e13ffb17 	ldw	r4,-20(fp)
   102d0:	103ee83a 	callr	r2
   102d4:	e0bffc15 	stw	r2,-16(fp)
   102d8:	e0bffc17 	ldw	r2,-16(fp)
   102dc:	1000070e 	bge	r2,zero,102fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   102e0:	00102040 	call	10204 <alt_get_errno>
   102e4:	1007883a 	mov	r3,r2
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	0085c83a 	sub	r2,zero,r2
   102f0:	18800015 	stw	r2,0(r3)
        return -1;
   102f4:	00bfffc4 	movi	r2,-1
   102f8:	00000c06 	br	1032c <write+0xec>
      }
      return rval;
   102fc:	e0bffc17 	ldw	r2,-16(fp)
   10300:	00000a06 	br	1032c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10304:	00102040 	call	10204 <alt_get_errno>
   10308:	1007883a 	mov	r3,r2
   1030c:	00800344 	movi	r2,13
   10310:	18800015 	stw	r2,0(r3)
   10314:	00000406 	br	10328 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10318:	00102040 	call	10204 <alt_get_errno>
   1031c:	1007883a 	mov	r3,r2
   10320:	00801444 	movi	r2,81
   10324:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10328:	00bfffc4 	movi	r2,-1
}
   1032c:	e037883a 	mov	sp,fp
   10330:	dfc00117 	ldw	ra,4(sp)
   10334:	df000017 	ldw	fp,0(sp)
   10338:	dec00204 	addi	sp,sp,8
   1033c:	f800283a 	ret

00010340 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10340:	defffd04 	addi	sp,sp,-12
   10344:	dfc00215 	stw	ra,8(sp)
   10348:	df000115 	stw	fp,4(sp)
   1034c:	df000104 	addi	fp,sp,4
   10350:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10354:	d1600904 	addi	r5,gp,-32732
   10358:	e13fff17 	ldw	r4,-4(fp)
   1035c:	00115040 	call	11504 <alt_dev_llist_insert>
}
   10360:	e037883a 	mov	sp,fp
   10364:	dfc00117 	ldw	ra,4(sp)
   10368:	df000017 	ldw	fp,0(sp)
   1036c:	dec00204 	addi	sp,sp,8
   10370:	f800283a 	ret

00010374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10374:	defffd04 	addi	sp,sp,-12
   10378:	dfc00215 	stw	ra,8(sp)
   1037c:	df000115 	stw	fp,4(sp)
   10380:	df000104 	addi	fp,sp,4
   10384:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   10388:	0011eb00 	call	11eb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1038c:	00800044 	movi	r2,1
   10390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10394:	0001883a 	nop
   10398:	e037883a 	mov	sp,fp
   1039c:	dfc00117 	ldw	ra,4(sp)
   103a0:	df000017 	ldw	fp,0(sp)
   103a4:	dec00204 	addi	sp,sp,8
   103a8:	f800283a 	ret

000103ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   103ac:	defffd04 	addi	sp,sp,-12
   103b0:	dfc00215 	stw	ra,8(sp)
   103b4:	df000115 	stw	fp,4(sp)
   103b8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   103bc:	01c0fa04 	movi	r7,1000
   103c0:	01800044 	movi	r6,1
   103c4:	000b883a 	mov	r5,zero
   103c8:	01020234 	movhi	r4,2056
   103cc:	210c0004 	addi	r4,r4,12288
   103d0:	00111a80 	call	111a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   103d4:	000d883a 	mov	r6,zero
   103d8:	000b883a 	mov	r5,zero
   103dc:	01000074 	movhi	r4,1
   103e0:	210ece04 	addi	r4,r4,15160
   103e4:	001082c0 	call	1082c <altera_avalon_jtag_uart_init>
   103e8:	01000074 	movhi	r4,1
   103ec:	210ec404 	addi	r4,r4,15120
   103f0:	00103400 	call	10340 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   103f4:	00800074 	movhi	r2,1
   103f8:	1092dc04 	addi	r2,r2,19312
   103fc:	10800a17 	ldw	r2,40(r2)
   10400:	10800017 	ldw	r2,0(r2)
   10404:	1007883a 	mov	r3,r2
   10408:	00800074 	movhi	r2,1
   1040c:	1092dc04 	addi	r2,r2,19312
   10410:	10c00b15 	stw	r3,44(r2)
   10414:	00800074 	movhi	r2,1
   10418:	1092dc04 	addi	r2,r2,19312
   1041c:	10800a17 	ldw	r2,40(r2)
   10420:	10800104 	addi	r2,r2,4
   10424:	10800017 	ldw	r2,0(r2)
   10428:	1007883a 	mov	r3,r2
   1042c:	00800074 	movhi	r2,1
   10430:	1092dc04 	addi	r2,r2,19312
   10434:	10c00c15 	stw	r3,48(r2)
   10438:	00800074 	movhi	r2,1
   1043c:	1092dc04 	addi	r2,r2,19312
   10440:	10800a17 	ldw	r2,40(r2)
   10444:	10800204 	addi	r2,r2,8
   10448:	10800017 	ldw	r2,0(r2)
   1044c:	10ffffcc 	andi	r3,r2,65535
   10450:	00800074 	movhi	r2,1
   10454:	1092dc04 	addi	r2,r2,19312
   10458:	10c00f15 	stw	r3,60(r2)
   1045c:	00800074 	movhi	r2,1
   10460:	1092dc04 	addi	r2,r2,19312
   10464:	10800a17 	ldw	r2,40(r2)
   10468:	10800204 	addi	r2,r2,8
   1046c:	10800017 	ldw	r2,0(r2)
   10470:	1006d43a 	srli	r3,r2,16
   10474:	00800074 	movhi	r2,1
   10478:	1092dc04 	addi	r2,r2,19312
   1047c:	10c01015 	stw	r3,64(r2)
   10480:	00800074 	movhi	r2,1
   10484:	1092dc04 	addi	r2,r2,19312
   10488:	10800a17 	ldw	r2,40(r2)
   1048c:	10800304 	addi	r2,r2,12
   10490:	10800017 	ldw	r2,0(r2)
   10494:	1005d07a 	srai	r2,r2,1
   10498:	10c0004c 	andi	r3,r2,1
   1049c:	00800074 	movhi	r2,1
   104a0:	1092dc04 	addi	r2,r2,19312
   104a4:	10c00d15 	stw	r3,52(r2)
   104a8:	00800074 	movhi	r2,1
   104ac:	1092dc04 	addi	r2,r2,19312
   104b0:	10800a17 	ldw	r2,40(r2)
   104b4:	10800304 	addi	r2,r2,12
   104b8:	10800017 	ldw	r2,0(r2)
   104bc:	1005d13a 	srai	r2,r2,4
   104c0:	10c003cc 	andi	r3,r2,15
   104c4:	00800074 	movhi	r2,1
   104c8:	1092dc04 	addi	r2,r2,19312
   104cc:	10c00e15 	stw	r3,56(r2)
   104d0:	00800074 	movhi	r2,1
   104d4:	1092dc04 	addi	r2,r2,19312
   104d8:	10800a17 	ldw	r2,40(r2)
   104dc:	10800304 	addi	r2,r2,12
   104e0:	10800017 	ldw	r2,0(r2)
   104e4:	1005d43a 	srai	r2,r2,16
   104e8:	e0bfff05 	stb	r2,-4(fp)
   104ec:	00800074 	movhi	r2,1
   104f0:	1092dc04 	addi	r2,r2,19312
   104f4:	10800a17 	ldw	r2,40(r2)
   104f8:	10800304 	addi	r2,r2,12
   104fc:	10800017 	ldw	r2,0(r2)
   10500:	1004d63a 	srli	r2,r2,24
   10504:	e0bfff45 	stb	r2,-3(fp)
   10508:	00800074 	movhi	r2,1
   1050c:	1092dc04 	addi	r2,r2,19312
   10510:	10800e17 	ldw	r2,56(r2)
   10514:	10800058 	cmpnei	r2,r2,1
   10518:	1000041e 	bne	r2,zero,1052c <alt_sys_init+0x180>
   1051c:	00800074 	movhi	r2,1
   10520:	1092dc04 	addi	r2,r2,19312
   10524:	10001115 	stw	zero,68(r2)
   10528:	00000e06 	br	10564 <alt_sys_init+0x1b8>
   1052c:	00800074 	movhi	r2,1
   10530:	1092dc04 	addi	r2,r2,19312
   10534:	10800e17 	ldw	r2,56(r2)
   10538:	10800098 	cmpnei	r2,r2,2
   1053c:	1000051e 	bne	r2,zero,10554 <alt_sys_init+0x1a8>
   10540:	00800074 	movhi	r2,1
   10544:	1092dc04 	addi	r2,r2,19312
   10548:	00c00044 	movi	r3,1
   1054c:	10c01115 	stw	r3,68(r2)
   10550:	00000406 	br	10564 <alt_sys_init+0x1b8>
   10554:	00800074 	movhi	r2,1
   10558:	1092dc04 	addi	r2,r2,19312
   1055c:	00c00084 	movi	r3,2
   10560:	10c01115 	stw	r3,68(r2)
   10564:	e0bfff03 	ldbu	r2,-4(fp)
   10568:	00c00804 	movi	r3,32
   1056c:	1885c83a 	sub	r2,r3,r2
   10570:	00ffffc4 	movi	r3,-1
   10574:	1886d83a 	srl	r3,r3,r2
   10578:	00800074 	movhi	r2,1
   1057c:	1092dc04 	addi	r2,r2,19312
   10580:	10c01215 	stw	r3,72(r2)
   10584:	e0ffff03 	ldbu	r3,-4(fp)
   10588:	00800074 	movhi	r2,1
   1058c:	1092dc04 	addi	r2,r2,19312
   10590:	10801117 	ldw	r2,68(r2)
   10594:	1887883a 	add	r3,r3,r2
   10598:	00800074 	movhi	r2,1
   1059c:	1092dc04 	addi	r2,r2,19312
   105a0:	10c01315 	stw	r3,76(r2)
   105a4:	e0bfff43 	ldbu	r2,-3(fp)
   105a8:	00c00804 	movi	r3,32
   105ac:	1885c83a 	sub	r2,r3,r2
   105b0:	00ffffc4 	movi	r3,-1
   105b4:	1886d83a 	srl	r3,r3,r2
   105b8:	00800074 	movhi	r2,1
   105bc:	1092dc04 	addi	r2,r2,19312
   105c0:	10c01415 	stw	r3,80(r2)
   105c4:	01000074 	movhi	r4,1
   105c8:	2112dc04 	addi	r4,r4,19312
   105cc:	00103400 	call	10340 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
   105d0:	00800074 	movhi	r2,1
   105d4:	1092f104 	addi	r2,r2,19396
   105d8:	10800a17 	ldw	r2,40(r2)
   105dc:	10800017 	ldw	r2,0(r2)
   105e0:	10c003cc 	andi	r3,r2,15
   105e4:	00800074 	movhi	r2,1
   105e8:	1092f104 	addi	r2,r2,19396
   105ec:	10c00b15 	stw	r3,44(r2)
   105f0:	00800074 	movhi	r2,1
   105f4:	1092f104 	addi	r2,r2,19396
   105f8:	10800a17 	ldw	r2,40(r2)
   105fc:	10800017 	ldw	r2,0(r2)
   10600:	1005d13a 	srai	r2,r2,4
   10604:	10c0004c 	andi	r3,r2,1
   10608:	00800074 	movhi	r2,1
   1060c:	1092f104 	addi	r2,r2,19396
   10610:	10c00c15 	stw	r3,48(r2)
   10614:	00800074 	movhi	r2,1
   10618:	1092f104 	addi	r2,r2,19396
   1061c:	10800a17 	ldw	r2,40(r2)
   10620:	10800017 	ldw	r2,0(r2)
   10624:	1005d17a 	srai	r2,r2,5
   10628:	10c0004c 	andi	r3,r2,1
   1062c:	00800074 	movhi	r2,1
   10630:	1092f104 	addi	r2,r2,19396
   10634:	10c00d15 	stw	r3,52(r2)
   10638:	00800074 	movhi	r2,1
   1063c:	1092f104 	addi	r2,r2,19396
   10640:	10800a17 	ldw	r2,40(r2)
   10644:	10800017 	ldw	r2,0(r2)
   10648:	1005d43a 	srai	r2,r2,16
   1064c:	10c003cc 	andi	r3,r2,15
   10650:	00800074 	movhi	r2,1
   10654:	1092f104 	addi	r2,r2,19396
   10658:	10c00e15 	stw	r3,56(r2)
   1065c:	00800074 	movhi	r2,1
   10660:	1092f104 	addi	r2,r2,19396
   10664:	10800a17 	ldw	r2,40(r2)
   10668:	10800017 	ldw	r2,0(r2)
   1066c:	1005d53a 	srai	r2,r2,20
   10670:	10c0004c 	andi	r3,r2,1
   10674:	00800074 	movhi	r2,1
   10678:	1092f104 	addi	r2,r2,19396
   1067c:	10c00f15 	stw	r3,60(r2)
   10680:	00800074 	movhi	r2,1
   10684:	1092f104 	addi	r2,r2,19396
   10688:	10800a17 	ldw	r2,40(r2)
   1068c:	10800017 	ldw	r2,0(r2)
   10690:	1005d57a 	srai	r2,r2,21
   10694:	10c0004c 	andi	r3,r2,1
   10698:	00800074 	movhi	r2,1
   1069c:	1092f104 	addi	r2,r2,19396
   106a0:	10c01015 	stw	r3,64(r2)
   106a4:	01000074 	movhi	r4,1
   106a8:	2112f104 	addi	r4,r4,19396
   106ac:	00103400 	call	10340 <alt_dev_reg>
}
   106b0:	0001883a 	nop
   106b4:	e037883a 	mov	sp,fp
   106b8:	dfc00117 	ldw	ra,4(sp)
   106bc:	df000017 	ldw	fp,0(sp)
   106c0:	dec00204 	addi	sp,sp,8
   106c4:	f800283a 	ret

000106c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   106c8:	defffa04 	addi	sp,sp,-24
   106cc:	dfc00515 	stw	ra,20(sp)
   106d0:	df000415 	stw	fp,16(sp)
   106d4:	df000404 	addi	fp,sp,16
   106d8:	e13ffd15 	stw	r4,-12(fp)
   106dc:	e17ffe15 	stw	r5,-8(fp)
   106e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   106e4:	e0bffd17 	ldw	r2,-12(fp)
   106e8:	10800017 	ldw	r2,0(r2)
   106ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   106f0:	e0bffc17 	ldw	r2,-16(fp)
   106f4:	10c00a04 	addi	r3,r2,40
   106f8:	e0bffd17 	ldw	r2,-12(fp)
   106fc:	10800217 	ldw	r2,8(r2)
   10700:	100f883a 	mov	r7,r2
   10704:	e1bfff17 	ldw	r6,-4(fp)
   10708:	e17ffe17 	ldw	r5,-8(fp)
   1070c:	1809883a 	mov	r4,r3
   10710:	0010cf00 	call	10cf0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10714:	e037883a 	mov	sp,fp
   10718:	dfc00117 	ldw	ra,4(sp)
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00204 	addi	sp,sp,8
   10724:	f800283a 	ret

00010728 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10728:	defffa04 	addi	sp,sp,-24
   1072c:	dfc00515 	stw	ra,20(sp)
   10730:	df000415 	stw	fp,16(sp)
   10734:	df000404 	addi	fp,sp,16
   10738:	e13ffd15 	stw	r4,-12(fp)
   1073c:	e17ffe15 	stw	r5,-8(fp)
   10740:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10744:	e0bffd17 	ldw	r2,-12(fp)
   10748:	10800017 	ldw	r2,0(r2)
   1074c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10750:	e0bffc17 	ldw	r2,-16(fp)
   10754:	10c00a04 	addi	r3,r2,40
   10758:	e0bffd17 	ldw	r2,-12(fp)
   1075c:	10800217 	ldw	r2,8(r2)
   10760:	100f883a 	mov	r7,r2
   10764:	e1bfff17 	ldw	r6,-4(fp)
   10768:	e17ffe17 	ldw	r5,-8(fp)
   1076c:	1809883a 	mov	r4,r3
   10770:	0010f0c0 	call	10f0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10788:	defffc04 	addi	sp,sp,-16
   1078c:	dfc00315 	stw	ra,12(sp)
   10790:	df000215 	stw	fp,8(sp)
   10794:	df000204 	addi	fp,sp,8
   10798:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1079c:	e0bfff17 	ldw	r2,-4(fp)
   107a0:	10800017 	ldw	r2,0(r2)
   107a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   107a8:	e0bffe17 	ldw	r2,-8(fp)
   107ac:	10c00a04 	addi	r3,r2,40
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	10800217 	ldw	r2,8(r2)
   107b8:	100b883a 	mov	r5,r2
   107bc:	1809883a 	mov	r4,r3
   107c0:	0010b980 	call	10b98 <altera_avalon_jtag_uart_close>
}
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   107d8:	defffa04 	addi	sp,sp,-24
   107dc:	dfc00515 	stw	ra,20(sp)
   107e0:	df000415 	stw	fp,16(sp)
   107e4:	df000404 	addi	fp,sp,16
   107e8:	e13ffd15 	stw	r4,-12(fp)
   107ec:	e17ffe15 	stw	r5,-8(fp)
   107f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   107f4:	e0bffd17 	ldw	r2,-12(fp)
   107f8:	10800017 	ldw	r2,0(r2)
   107fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10800:	e0bffc17 	ldw	r2,-16(fp)
   10804:	10800a04 	addi	r2,r2,40
   10808:	e1bfff17 	ldw	r6,-4(fp)
   1080c:	e17ffe17 	ldw	r5,-8(fp)
   10810:	1009883a 	mov	r4,r2
   10814:	0010c000 	call	10c00 <altera_avalon_jtag_uart_ioctl>
}
   10818:	e037883a 	mov	sp,fp
   1081c:	dfc00117 	ldw	ra,4(sp)
   10820:	df000017 	ldw	fp,0(sp)
   10824:	dec00204 	addi	sp,sp,8
   10828:	f800283a 	ret

0001082c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1082c:	defffa04 	addi	sp,sp,-24
   10830:	dfc00515 	stw	ra,20(sp)
   10834:	df000415 	stw	fp,16(sp)
   10838:	df000404 	addi	fp,sp,16
   1083c:	e13ffd15 	stw	r4,-12(fp)
   10840:	e17ffe15 	stw	r5,-8(fp)
   10844:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10848:	e0bffd17 	ldw	r2,-12(fp)
   1084c:	00c00044 	movi	r3,1
   10850:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	10800017 	ldw	r2,0(r2)
   1085c:	10800104 	addi	r2,r2,4
   10860:	1007883a 	mov	r3,r2
   10864:	e0bffd17 	ldw	r2,-12(fp)
   10868:	10800817 	ldw	r2,32(r2)
   1086c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10870:	e0bffe17 	ldw	r2,-8(fp)
   10874:	e0ffff17 	ldw	r3,-4(fp)
   10878:	d8000015 	stw	zero,0(sp)
   1087c:	e1fffd17 	ldw	r7,-12(fp)
   10880:	01800074 	movhi	r6,1
   10884:	31823b04 	addi	r6,r6,2284
   10888:	180b883a 	mov	r5,r3
   1088c:	1009883a 	mov	r4,r2
   10890:	00116880 	call	11688 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10894:	e0bffd17 	ldw	r2,-12(fp)
   10898:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1089c:	e0bffd17 	ldw	r2,-12(fp)
   108a0:	10800204 	addi	r2,r2,8
   108a4:	d0e70217 	ldw	r3,-25592(gp)
   108a8:	e1fffd17 	ldw	r7,-12(fp)
   108ac:	01800074 	movhi	r6,1
   108b0:	3182be04 	addi	r6,r6,2808
   108b4:	180b883a 	mov	r5,r3
   108b8:	1009883a 	mov	r4,r2
   108bc:	00112240 	call	11224 <alt_alarm_start>
   108c0:	1000040e 	bge	r2,zero,108d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   108c4:	e0fffd17 	ldw	r3,-12(fp)
   108c8:	00a00034 	movhi	r2,32768
   108cc:	10bfffc4 	addi	r2,r2,-1
   108d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   108d4:	0001883a 	nop
   108d8:	e037883a 	mov	sp,fp
   108dc:	dfc00117 	ldw	ra,4(sp)
   108e0:	df000017 	ldw	fp,0(sp)
   108e4:	dec00204 	addi	sp,sp,8
   108e8:	f800283a 	ret

000108ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   108ec:	defff804 	addi	sp,sp,-32
   108f0:	df000715 	stw	fp,28(sp)
   108f4:	df000704 	addi	fp,sp,28
   108f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   108fc:	e0bfff17 	ldw	r2,-4(fp)
   10900:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10904:	e0bffb17 	ldw	r2,-20(fp)
   10908:	10800017 	ldw	r2,0(r2)
   1090c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	10800104 	addi	r2,r2,4
   10918:	10800037 	ldwio	r2,0(r2)
   1091c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10920:	e0bffd17 	ldw	r2,-12(fp)
   10924:	1080c00c 	andi	r2,r2,768
   10928:	10006d26 	beq	r2,zero,10ae0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	1080400c 	andi	r2,r2,256
   10934:	10003526 	beq	r2,zero,10a0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10938:	00800074 	movhi	r2,1
   1093c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10940:	e0bffb17 	ldw	r2,-20(fp)
   10944:	10800a17 	ldw	r2,40(r2)
   10948:	10800044 	addi	r2,r2,1
   1094c:	1081ffcc 	andi	r2,r2,2047
   10950:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10954:	e0bffb17 	ldw	r2,-20(fp)
   10958:	10c00b17 	ldw	r3,44(r2)
   1095c:	e0bffe17 	ldw	r2,-8(fp)
   10960:	18801526 	beq	r3,r2,109b8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10964:	e0bffc17 	ldw	r2,-16(fp)
   10968:	10800037 	ldwio	r2,0(r2)
   1096c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10970:	e0bff917 	ldw	r2,-28(fp)
   10974:	10a0000c 	andi	r2,r2,32768
   10978:	10001126 	beq	r2,zero,109c0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1097c:	e0bffb17 	ldw	r2,-20(fp)
   10980:	10800a17 	ldw	r2,40(r2)
   10984:	e0fff917 	ldw	r3,-28(fp)
   10988:	1809883a 	mov	r4,r3
   1098c:	e0fffb17 	ldw	r3,-20(fp)
   10990:	1885883a 	add	r2,r3,r2
   10994:	10800e04 	addi	r2,r2,56
   10998:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1099c:	e0bffb17 	ldw	r2,-20(fp)
   109a0:	10800a17 	ldw	r2,40(r2)
   109a4:	10800044 	addi	r2,r2,1
   109a8:	10c1ffcc 	andi	r3,r2,2047
   109ac:	e0bffb17 	ldw	r2,-20(fp)
   109b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   109b4:	003fe206 	br	10940 <__alt_exception_stack_pointer+0xf8010940>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   109b8:	0001883a 	nop
   109bc:	00000106 	br	109c4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   109c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   109c4:	e0bff917 	ldw	r2,-28(fp)
   109c8:	10bfffec 	andhi	r2,r2,65535
   109cc:	10000f26 	beq	r2,zero,10a0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   109d0:	e0bffb17 	ldw	r2,-20(fp)
   109d4:	10c00817 	ldw	r3,32(r2)
   109d8:	00bfff84 	movi	r2,-2
   109dc:	1886703a 	and	r3,r3,r2
   109e0:	e0bffb17 	ldw	r2,-20(fp)
   109e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   109e8:	e0bffc17 	ldw	r2,-16(fp)
   109ec:	10800104 	addi	r2,r2,4
   109f0:	1007883a 	mov	r3,r2
   109f4:	e0bffb17 	ldw	r2,-20(fp)
   109f8:	10800817 	ldw	r2,32(r2)
   109fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10a00:	e0bffc17 	ldw	r2,-16(fp)
   10a04:	10800104 	addi	r2,r2,4
   10a08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10a0c:	e0bffd17 	ldw	r2,-12(fp)
   10a10:	1080800c 	andi	r2,r2,512
   10a14:	103fbe26 	beq	r2,zero,10910 <__alt_exception_stack_pointer+0xf8010910>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10a18:	e0bffd17 	ldw	r2,-12(fp)
   10a1c:	1004d43a 	srli	r2,r2,16
   10a20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10a24:	00001406 	br	10a78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10a28:	e0bffc17 	ldw	r2,-16(fp)
   10a2c:	e0fffb17 	ldw	r3,-20(fp)
   10a30:	18c00d17 	ldw	r3,52(r3)
   10a34:	e13ffb17 	ldw	r4,-20(fp)
   10a38:	20c7883a 	add	r3,r4,r3
   10a3c:	18c20e04 	addi	r3,r3,2104
   10a40:	18c00003 	ldbu	r3,0(r3)
   10a44:	18c03fcc 	andi	r3,r3,255
   10a48:	18c0201c 	xori	r3,r3,128
   10a4c:	18ffe004 	addi	r3,r3,-128
   10a50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a54:	e0bffb17 	ldw	r2,-20(fp)
   10a58:	10800d17 	ldw	r2,52(r2)
   10a5c:	10800044 	addi	r2,r2,1
   10a60:	10c1ffcc 	andi	r3,r2,2047
   10a64:	e0bffb17 	ldw	r2,-20(fp)
   10a68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10a6c:	e0bffa17 	ldw	r2,-24(fp)
   10a70:	10bfffc4 	addi	r2,r2,-1
   10a74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10a78:	e0bffa17 	ldw	r2,-24(fp)
   10a7c:	10000526 	beq	r2,zero,10a94 <altera_avalon_jtag_uart_irq+0x1a8>
   10a80:	e0bffb17 	ldw	r2,-20(fp)
   10a84:	10c00d17 	ldw	r3,52(r2)
   10a88:	e0bffb17 	ldw	r2,-20(fp)
   10a8c:	10800c17 	ldw	r2,48(r2)
   10a90:	18bfe51e 	bne	r3,r2,10a28 <__alt_exception_stack_pointer+0xf8010a28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10a94:	e0bffa17 	ldw	r2,-24(fp)
   10a98:	103f9d26 	beq	r2,zero,10910 <__alt_exception_stack_pointer+0xf8010910>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10a9c:	e0bffb17 	ldw	r2,-20(fp)
   10aa0:	10c00817 	ldw	r3,32(r2)
   10aa4:	00bfff44 	movi	r2,-3
   10aa8:	1886703a 	and	r3,r3,r2
   10aac:	e0bffb17 	ldw	r2,-20(fp)
   10ab0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ab4:	e0bffb17 	ldw	r2,-20(fp)
   10ab8:	10800017 	ldw	r2,0(r2)
   10abc:	10800104 	addi	r2,r2,4
   10ac0:	1007883a 	mov	r3,r2
   10ac4:	e0bffb17 	ldw	r2,-20(fp)
   10ac8:	10800817 	ldw	r2,32(r2)
   10acc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10ad0:	e0bffc17 	ldw	r2,-16(fp)
   10ad4:	10800104 	addi	r2,r2,4
   10ad8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10adc:	003f8c06 	br	10910 <__alt_exception_stack_pointer+0xf8010910>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10ae0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10ae4:	0001883a 	nop
   10ae8:	e037883a 	mov	sp,fp
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00104 	addi	sp,sp,4
   10af4:	f800283a 	ret

00010af8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10af8:	defff804 	addi	sp,sp,-32
   10afc:	df000715 	stw	fp,28(sp)
   10b00:	df000704 	addi	fp,sp,28
   10b04:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10b08:	e0bffb17 	ldw	r2,-20(fp)
   10b0c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10b10:	e0bff917 	ldw	r2,-28(fp)
   10b14:	10800017 	ldw	r2,0(r2)
   10b18:	10800104 	addi	r2,r2,4
   10b1c:	10800037 	ldwio	r2,0(r2)
   10b20:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10b24:	e0bffa17 	ldw	r2,-24(fp)
   10b28:	1081000c 	andi	r2,r2,1024
   10b2c:	10000b26 	beq	r2,zero,10b5c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10b30:	e0bff917 	ldw	r2,-28(fp)
   10b34:	10800017 	ldw	r2,0(r2)
   10b38:	10800104 	addi	r2,r2,4
   10b3c:	1007883a 	mov	r3,r2
   10b40:	e0bff917 	ldw	r2,-28(fp)
   10b44:	10800817 	ldw	r2,32(r2)
   10b48:	10810014 	ori	r2,r2,1024
   10b4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10b50:	e0bff917 	ldw	r2,-28(fp)
   10b54:	10000915 	stw	zero,36(r2)
   10b58:	00000a06 	br	10b84 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10b5c:	e0bff917 	ldw	r2,-28(fp)
   10b60:	10c00917 	ldw	r3,36(r2)
   10b64:	00a00034 	movhi	r2,32768
   10b68:	10bfff04 	addi	r2,r2,-4
   10b6c:	10c00536 	bltu	r2,r3,10b84 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10b70:	e0bff917 	ldw	r2,-28(fp)
   10b74:	10800917 	ldw	r2,36(r2)
   10b78:	10c00044 	addi	r3,r2,1
   10b7c:	e0bff917 	ldw	r2,-28(fp)
   10b80:	10c00915 	stw	r3,36(r2)
   10b84:	d0a70217 	ldw	r2,-25592(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10b88:	e037883a 	mov	sp,fp
   10b8c:	df000017 	ldw	fp,0(sp)
   10b90:	dec00104 	addi	sp,sp,4
   10b94:	f800283a 	ret

00010b98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10b98:	defffd04 	addi	sp,sp,-12
   10b9c:	df000215 	stw	fp,8(sp)
   10ba0:	df000204 	addi	fp,sp,8
   10ba4:	e13ffe15 	stw	r4,-8(fp)
   10ba8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10bac:	00000506 	br	10bc4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	1090000c 	andi	r2,r2,16384
   10bb8:	10000226 	beq	r2,zero,10bc4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10bbc:	00bffd44 	movi	r2,-11
   10bc0:	00000b06 	br	10bf0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10bc4:	e0bffe17 	ldw	r2,-8(fp)
   10bc8:	10c00d17 	ldw	r3,52(r2)
   10bcc:	e0bffe17 	ldw	r2,-8(fp)
   10bd0:	10800c17 	ldw	r2,48(r2)
   10bd4:	18800526 	beq	r3,r2,10bec <altera_avalon_jtag_uart_close+0x54>
   10bd8:	e0bffe17 	ldw	r2,-8(fp)
   10bdc:	10c00917 	ldw	r3,36(r2)
   10be0:	e0bffe17 	ldw	r2,-8(fp)
   10be4:	10800117 	ldw	r2,4(r2)
   10be8:	18bff136 	bltu	r3,r2,10bb0 <__alt_exception_stack_pointer+0xf8010bb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10bec:	0005883a 	mov	r2,zero
}
   10bf0:	e037883a 	mov	sp,fp
   10bf4:	df000017 	ldw	fp,0(sp)
   10bf8:	dec00104 	addi	sp,sp,4
   10bfc:	f800283a 	ret

00010c00 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10c00:	defffa04 	addi	sp,sp,-24
   10c04:	df000515 	stw	fp,20(sp)
   10c08:	df000504 	addi	fp,sp,20
   10c0c:	e13ffd15 	stw	r4,-12(fp)
   10c10:	e17ffe15 	stw	r5,-8(fp)
   10c14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10c18:	00bff9c4 	movi	r2,-25
   10c1c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10c20:	e0bffe17 	ldw	r2,-8(fp)
   10c24:	10da8060 	cmpeqi	r3,r2,27137
   10c28:	1800031e 	bne	r3,zero,10c38 <altera_avalon_jtag_uart_ioctl+0x38>
   10c2c:	109a80a0 	cmpeqi	r2,r2,27138
   10c30:	1000181e 	bne	r2,zero,10c94 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10c34:	00002906 	br	10cdc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10c38:	e0bffd17 	ldw	r2,-12(fp)
   10c3c:	10c00117 	ldw	r3,4(r2)
   10c40:	00a00034 	movhi	r2,32768
   10c44:	10bfffc4 	addi	r2,r2,-1
   10c48:	18802126 	beq	r3,r2,10cd0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10c4c:	e0bfff17 	ldw	r2,-4(fp)
   10c50:	10800017 	ldw	r2,0(r2)
   10c54:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10c58:	e0bffc17 	ldw	r2,-16(fp)
   10c5c:	10800090 	cmplti	r2,r2,2
   10c60:	1000061e 	bne	r2,zero,10c7c <altera_avalon_jtag_uart_ioctl+0x7c>
   10c64:	e0fffc17 	ldw	r3,-16(fp)
   10c68:	00a00034 	movhi	r2,32768
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	18800226 	beq	r3,r2,10c7c <altera_avalon_jtag_uart_ioctl+0x7c>
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	00000206 	br	10c84 <altera_avalon_jtag_uart_ioctl+0x84>
   10c7c:	00a00034 	movhi	r2,32768
   10c80:	10bfff84 	addi	r2,r2,-2
   10c84:	e0fffd17 	ldw	r3,-12(fp)
   10c88:	18800115 	stw	r2,4(r3)
      rc = 0;
   10c8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10c90:	00000f06 	br	10cd0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10c94:	e0bffd17 	ldw	r2,-12(fp)
   10c98:	10c00117 	ldw	r3,4(r2)
   10c9c:	00a00034 	movhi	r2,32768
   10ca0:	10bfffc4 	addi	r2,r2,-1
   10ca4:	18800c26 	beq	r3,r2,10cd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	10c00917 	ldw	r3,36(r2)
   10cb0:	e0bffd17 	ldw	r2,-12(fp)
   10cb4:	10800117 	ldw	r2,4(r2)
   10cb8:	1885803a 	cmpltu	r2,r3,r2
   10cbc:	10c03fcc 	andi	r3,r2,255
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10cc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10ccc:	00000206 	br	10cd8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10cd0:	0001883a 	nop
   10cd4:	00000106 	br	10cdc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10cd8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10cdc:	e0bffb17 	ldw	r2,-20(fp)
}
   10ce0:	e037883a 	mov	sp,fp
   10ce4:	df000017 	ldw	fp,0(sp)
   10ce8:	dec00104 	addi	sp,sp,4
   10cec:	f800283a 	ret

00010cf0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10cf0:	defff304 	addi	sp,sp,-52
   10cf4:	dfc00c15 	stw	ra,48(sp)
   10cf8:	df000b15 	stw	fp,44(sp)
   10cfc:	df000b04 	addi	fp,sp,44
   10d00:	e13ffc15 	stw	r4,-16(fp)
   10d04:	e17ffd15 	stw	r5,-12(fp)
   10d08:	e1bffe15 	stw	r6,-8(fp)
   10d0c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10d10:	e0bffd17 	ldw	r2,-12(fp)
   10d14:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10d18:	00004706 	br	10e38 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10d1c:	e0bffc17 	ldw	r2,-16(fp)
   10d20:	10800a17 	ldw	r2,40(r2)
   10d24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10d28:	e0bffc17 	ldw	r2,-16(fp)
   10d2c:	10800b17 	ldw	r2,44(r2)
   10d30:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10d34:	e0fff717 	ldw	r3,-36(fp)
   10d38:	e0bff817 	ldw	r2,-32(fp)
   10d3c:	18800536 	bltu	r3,r2,10d54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10d40:	e0fff717 	ldw	r3,-36(fp)
   10d44:	e0bff817 	ldw	r2,-32(fp)
   10d48:	1885c83a 	sub	r2,r3,r2
   10d4c:	e0bff615 	stw	r2,-40(fp)
   10d50:	00000406 	br	10d64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10d54:	00c20004 	movi	r3,2048
   10d58:	e0bff817 	ldw	r2,-32(fp)
   10d5c:	1885c83a 	sub	r2,r3,r2
   10d60:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10d64:	e0bff617 	ldw	r2,-40(fp)
   10d68:	10001e26 	beq	r2,zero,10de4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10d6c:	e0fffe17 	ldw	r3,-8(fp)
   10d70:	e0bff617 	ldw	r2,-40(fp)
   10d74:	1880022e 	bgeu	r3,r2,10d80 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10d78:	e0bffe17 	ldw	r2,-8(fp)
   10d7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10d80:	e0bffc17 	ldw	r2,-16(fp)
   10d84:	10c00e04 	addi	r3,r2,56
   10d88:	e0bff817 	ldw	r2,-32(fp)
   10d8c:	1885883a 	add	r2,r3,r2
   10d90:	e1bff617 	ldw	r6,-40(fp)
   10d94:	100b883a 	mov	r5,r2
   10d98:	e13ff517 	ldw	r4,-44(fp)
   10d9c:	00085d00 	call	85d0 <memcpy>
      ptr   += n;
   10da0:	e0fff517 	ldw	r3,-44(fp)
   10da4:	e0bff617 	ldw	r2,-40(fp)
   10da8:	1885883a 	add	r2,r3,r2
   10dac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10db0:	e0fffe17 	ldw	r3,-8(fp)
   10db4:	e0bff617 	ldw	r2,-40(fp)
   10db8:	1885c83a 	sub	r2,r3,r2
   10dbc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10dc0:	e0fff817 	ldw	r3,-32(fp)
   10dc4:	e0bff617 	ldw	r2,-40(fp)
   10dc8:	1885883a 	add	r2,r3,r2
   10dcc:	10c1ffcc 	andi	r3,r2,2047
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	00bfcf16 	blt	zero,r2,10d1c <__alt_exception_stack_pointer+0xf8010d1c>
   10de0:	00000106 	br	10de8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10de4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10de8:	e0fff517 	ldw	r3,-44(fp)
   10dec:	e0bffd17 	ldw	r2,-12(fp)
   10df0:	1880141e 	bne	r3,r2,10e44 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10df4:	e0bfff17 	ldw	r2,-4(fp)
   10df8:	1090000c 	andi	r2,r2,16384
   10dfc:	1000131e 	bne	r2,zero,10e4c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10e00:	0001883a 	nop
   10e04:	e0bffc17 	ldw	r2,-16(fp)
   10e08:	10c00a17 	ldw	r3,40(r2)
   10e0c:	e0bff717 	ldw	r2,-36(fp)
   10e10:	1880051e 	bne	r3,r2,10e28 <altera_avalon_jtag_uart_read+0x138>
   10e14:	e0bffc17 	ldw	r2,-16(fp)
   10e18:	10c00917 	ldw	r3,36(r2)
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10800117 	ldw	r2,4(r2)
   10e24:	18bff736 	bltu	r3,r2,10e04 <__alt_exception_stack_pointer+0xf8010e04>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10e28:	e0bffc17 	ldw	r2,-16(fp)
   10e2c:	10c00a17 	ldw	r3,40(r2)
   10e30:	e0bff717 	ldw	r2,-36(fp)
   10e34:	18800726 	beq	r3,r2,10e54 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10e38:	e0bffe17 	ldw	r2,-8(fp)
   10e3c:	00bfb716 	blt	zero,r2,10d1c <__alt_exception_stack_pointer+0xf8010d1c>
   10e40:	00000506 	br	10e58 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10e44:	0001883a 	nop
   10e48:	00000306 	br	10e58 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10e4c:	0001883a 	nop
   10e50:	00000106 	br	10e58 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10e54:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10e58:	e0fff517 	ldw	r3,-44(fp)
   10e5c:	e0bffd17 	ldw	r2,-12(fp)
   10e60:	18801826 	beq	r3,r2,10ec4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e64:	0005303a 	rdctl	r2,status
   10e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e6c:	e0fffb17 	ldw	r3,-20(fp)
   10e70:	00bfff84 	movi	r2,-2
   10e74:	1884703a 	and	r2,r3,r2
   10e78:	1001703a 	wrctl	status,r2
  
  return context;
   10e7c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10e80:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10e84:	e0bffc17 	ldw	r2,-16(fp)
   10e88:	10800817 	ldw	r2,32(r2)
   10e8c:	10c00054 	ori	r3,r2,1
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	10800017 	ldw	r2,0(r2)
   10ea0:	10800104 	addi	r2,r2,4
   10ea4:	1007883a 	mov	r3,r2
   10ea8:	e0bffc17 	ldw	r2,-16(fp)
   10eac:	10800817 	ldw	r2,32(r2)
   10eb0:	18800035 	stwio	r2,0(r3)
   10eb4:	e0bffa17 	ldw	r2,-24(fp)
   10eb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ebc:	e0bff917 	ldw	r2,-28(fp)
   10ec0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10ec4:	e0fff517 	ldw	r3,-44(fp)
   10ec8:	e0bffd17 	ldw	r2,-12(fp)
   10ecc:	18800426 	beq	r3,r2,10ee0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10ed0:	e0fff517 	ldw	r3,-44(fp)
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	1885c83a 	sub	r2,r3,r2
   10edc:	00000606 	br	10ef8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10ee0:	e0bfff17 	ldw	r2,-4(fp)
   10ee4:	1090000c 	andi	r2,r2,16384
   10ee8:	10000226 	beq	r2,zero,10ef4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10eec:	00bffd44 	movi	r2,-11
   10ef0:	00000106 	br	10ef8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10ef4:	00bffec4 	movi	r2,-5
}
   10ef8:	e037883a 	mov	sp,fp
   10efc:	dfc00117 	ldw	ra,4(sp)
   10f00:	df000017 	ldw	fp,0(sp)
   10f04:	dec00204 	addi	sp,sp,8
   10f08:	f800283a 	ret

00010f0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10f0c:	defff304 	addi	sp,sp,-52
   10f10:	dfc00c15 	stw	ra,48(sp)
   10f14:	df000b15 	stw	fp,44(sp)
   10f18:	df000b04 	addi	fp,sp,44
   10f1c:	e13ffc15 	stw	r4,-16(fp)
   10f20:	e17ffd15 	stw	r5,-12(fp)
   10f24:	e1bffe15 	stw	r6,-8(fp)
   10f28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10f2c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10f30:	e0bffd17 	ldw	r2,-12(fp)
   10f34:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10f38:	00003706 	br	11018 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	10800c17 	ldw	r2,48(r2)
   10f44:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10f48:	e0bffc17 	ldw	r2,-16(fp)
   10f4c:	10800d17 	ldw	r2,52(r2)
   10f50:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10f54:	e0fff917 	ldw	r3,-28(fp)
   10f58:	e0bff517 	ldw	r2,-44(fp)
   10f5c:	1880062e 	bgeu	r3,r2,10f78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10f60:	e0fff517 	ldw	r3,-44(fp)
   10f64:	e0bff917 	ldw	r2,-28(fp)
   10f68:	1885c83a 	sub	r2,r3,r2
   10f6c:	10bfffc4 	addi	r2,r2,-1
   10f70:	e0bff615 	stw	r2,-40(fp)
   10f74:	00000b06 	br	10fa4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10f78:	e0bff517 	ldw	r2,-44(fp)
   10f7c:	10000526 	beq	r2,zero,10f94 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10f80:	00c20004 	movi	r3,2048
   10f84:	e0bff917 	ldw	r2,-28(fp)
   10f88:	1885c83a 	sub	r2,r3,r2
   10f8c:	e0bff615 	stw	r2,-40(fp)
   10f90:	00000406 	br	10fa4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10f94:	00c1ffc4 	movi	r3,2047
   10f98:	e0bff917 	ldw	r2,-28(fp)
   10f9c:	1885c83a 	sub	r2,r3,r2
   10fa0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10fa4:	e0bff617 	ldw	r2,-40(fp)
   10fa8:	10001e26 	beq	r2,zero,11024 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10fac:	e0fffe17 	ldw	r3,-8(fp)
   10fb0:	e0bff617 	ldw	r2,-40(fp)
   10fb4:	1880022e 	bgeu	r3,r2,10fc0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10fb8:	e0bffe17 	ldw	r2,-8(fp)
   10fbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10fc0:	e0bffc17 	ldw	r2,-16(fp)
   10fc4:	10c20e04 	addi	r3,r2,2104
   10fc8:	e0bff917 	ldw	r2,-28(fp)
   10fcc:	1885883a 	add	r2,r3,r2
   10fd0:	e1bff617 	ldw	r6,-40(fp)
   10fd4:	e17ffd17 	ldw	r5,-12(fp)
   10fd8:	1009883a 	mov	r4,r2
   10fdc:	00085d00 	call	85d0 <memcpy>
      ptr   += n;
   10fe0:	e0fffd17 	ldw	r3,-12(fp)
   10fe4:	e0bff617 	ldw	r2,-40(fp)
   10fe8:	1885883a 	add	r2,r3,r2
   10fec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10ff0:	e0fffe17 	ldw	r3,-8(fp)
   10ff4:	e0bff617 	ldw	r2,-40(fp)
   10ff8:	1885c83a 	sub	r2,r3,r2
   10ffc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11000:	e0fff917 	ldw	r3,-28(fp)
   11004:	e0bff617 	ldw	r2,-40(fp)
   11008:	1885883a 	add	r2,r3,r2
   1100c:	10c1ffcc 	andi	r3,r2,2047
   11010:	e0bffc17 	ldw	r2,-16(fp)
   11014:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11018:	e0bffe17 	ldw	r2,-8(fp)
   1101c:	00bfc716 	blt	zero,r2,10f3c <__alt_exception_stack_pointer+0xf8010f3c>
   11020:	00000106 	br	11028 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11024:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11028:	0005303a 	rdctl	r2,status
   1102c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11030:	e0fffb17 	ldw	r3,-20(fp)
   11034:	00bfff84 	movi	r2,-2
   11038:	1884703a 	and	r2,r3,r2
   1103c:	1001703a 	wrctl	status,r2
  
  return context;
   11040:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11044:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11048:	e0bffc17 	ldw	r2,-16(fp)
   1104c:	10800817 	ldw	r2,32(r2)
   11050:	10c00094 	ori	r3,r2,2
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1105c:	e0bffc17 	ldw	r2,-16(fp)
   11060:	10800017 	ldw	r2,0(r2)
   11064:	10800104 	addi	r2,r2,4
   11068:	1007883a 	mov	r3,r2
   1106c:	e0bffc17 	ldw	r2,-16(fp)
   11070:	10800817 	ldw	r2,32(r2)
   11074:	18800035 	stwio	r2,0(r3)
   11078:	e0bffa17 	ldw	r2,-24(fp)
   1107c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11080:	e0bff817 	ldw	r2,-32(fp)
   11084:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11088:	e0bffe17 	ldw	r2,-8(fp)
   1108c:	0080100e 	bge	zero,r2,110d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11090:	e0bfff17 	ldw	r2,-4(fp)
   11094:	1090000c 	andi	r2,r2,16384
   11098:	1000101e 	bne	r2,zero,110dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1109c:	0001883a 	nop
   110a0:	e0bffc17 	ldw	r2,-16(fp)
   110a4:	10c00d17 	ldw	r3,52(r2)
   110a8:	e0bff517 	ldw	r2,-44(fp)
   110ac:	1880051e 	bne	r3,r2,110c4 <altera_avalon_jtag_uart_write+0x1b8>
   110b0:	e0bffc17 	ldw	r2,-16(fp)
   110b4:	10c00917 	ldw	r3,36(r2)
   110b8:	e0bffc17 	ldw	r2,-16(fp)
   110bc:	10800117 	ldw	r2,4(r2)
   110c0:	18bff736 	bltu	r3,r2,110a0 <__alt_exception_stack_pointer+0xf80110a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   110c4:	e0bffc17 	ldw	r2,-16(fp)
   110c8:	10800917 	ldw	r2,36(r2)
   110cc:	1000051e 	bne	r2,zero,110e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   110d0:	e0bffe17 	ldw	r2,-8(fp)
   110d4:	00bfd016 	blt	zero,r2,11018 <__alt_exception_stack_pointer+0xf8011018>
   110d8:	00000306 	br	110e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   110dc:	0001883a 	nop
   110e0:	00000106 	br	110e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   110e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   110e8:	e0fffd17 	ldw	r3,-12(fp)
   110ec:	e0bff717 	ldw	r2,-36(fp)
   110f0:	18800426 	beq	r3,r2,11104 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   110f4:	e0fffd17 	ldw	r3,-12(fp)
   110f8:	e0bff717 	ldw	r2,-36(fp)
   110fc:	1885c83a 	sub	r2,r3,r2
   11100:	00000606 	br	1111c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11104:	e0bfff17 	ldw	r2,-4(fp)
   11108:	1090000c 	andi	r2,r2,16384
   1110c:	10000226 	beq	r2,zero,11118 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11110:	00bffd44 	movi	r2,-11
   11114:	00000106 	br	1111c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11118:	00bffec4 	movi	r2,-5
}
   1111c:	e037883a 	mov	sp,fp
   11120:	dfc00117 	ldw	ra,4(sp)
   11124:	df000017 	ldw	fp,0(sp)
   11128:	dec00204 	addi	sp,sp,8
   1112c:	f800283a 	ret

00011130 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11130:	defffa04 	addi	sp,sp,-24
   11134:	dfc00515 	stw	ra,20(sp)
   11138:	df000415 	stw	fp,16(sp)
   1113c:	df000404 	addi	fp,sp,16
   11140:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11144:	0007883a 	mov	r3,zero
   11148:	e0bfff17 	ldw	r2,-4(fp)
   1114c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11150:	e0bfff17 	ldw	r2,-4(fp)
   11154:	10800104 	addi	r2,r2,4
   11158:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1115c:	0005303a 	rdctl	r2,status
   11160:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11164:	e0fffd17 	ldw	r3,-12(fp)
   11168:	00bfff84 	movi	r2,-2
   1116c:	1884703a 	and	r2,r3,r2
   11170:	1001703a 	wrctl	status,r2
  
  return context;
   11174:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11178:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1117c:	0011da80 	call	11da8 <alt_tick>
   11180:	e0bffc17 	ldw	r2,-16(fp)
   11184:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11188:	e0bffe17 	ldw	r2,-8(fp)
   1118c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11190:	0001883a 	nop
   11194:	e037883a 	mov	sp,fp
   11198:	dfc00117 	ldw	ra,4(sp)
   1119c:	df000017 	ldw	fp,0(sp)
   111a0:	dec00204 	addi	sp,sp,8
   111a4:	f800283a 	ret

000111a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   111a8:	defff804 	addi	sp,sp,-32
   111ac:	dfc00715 	stw	ra,28(sp)
   111b0:	df000615 	stw	fp,24(sp)
   111b4:	df000604 	addi	fp,sp,24
   111b8:	e13ffc15 	stw	r4,-16(fp)
   111bc:	e17ffd15 	stw	r5,-12(fp)
   111c0:	e1bffe15 	stw	r6,-8(fp)
   111c4:	e1ffff15 	stw	r7,-4(fp)
   111c8:	e0bfff17 	ldw	r2,-4(fp)
   111cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   111d0:	d0a70217 	ldw	r2,-25592(gp)
   111d4:	1000021e 	bne	r2,zero,111e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   111d8:	e0bffb17 	ldw	r2,-20(fp)
   111dc:	d0a70215 	stw	r2,-25592(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	10800104 	addi	r2,r2,4
   111e8:	00c001c4 	movi	r3,7
   111ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   111f0:	d8000015 	stw	zero,0(sp)
   111f4:	e1fffc17 	ldw	r7,-16(fp)
   111f8:	01800074 	movhi	r6,1
   111fc:	31844c04 	addi	r6,r6,4400
   11200:	e17ffe17 	ldw	r5,-8(fp)
   11204:	e13ffd17 	ldw	r4,-12(fp)
   11208:	00116880 	call	11688 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1120c:	0001883a 	nop
   11210:	e037883a 	mov	sp,fp
   11214:	dfc00117 	ldw	ra,4(sp)
   11218:	df000017 	ldw	fp,0(sp)
   1121c:	dec00204 	addi	sp,sp,8
   11220:	f800283a 	ret

00011224 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11224:	defff504 	addi	sp,sp,-44
   11228:	df000a15 	stw	fp,40(sp)
   1122c:	df000a04 	addi	fp,sp,40
   11230:	e13ffc15 	stw	r4,-16(fp)
   11234:	e17ffd15 	stw	r5,-12(fp)
   11238:	e1bffe15 	stw	r6,-8(fp)
   1123c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11240:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11244:	d0a70217 	ldw	r2,-25592(gp)
  
  if (alt_ticks_per_second ())
   11248:	10003c26 	beq	r2,zero,1133c <alt_alarm_start+0x118>
  {
    if (alarm)
   1124c:	e0bffc17 	ldw	r2,-16(fp)
   11250:	10003826 	beq	r2,zero,11334 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11254:	e0bffc17 	ldw	r2,-16(fp)
   11258:	e0fffe17 	ldw	r3,-8(fp)
   1125c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	e0ffff17 	ldw	r3,-4(fp)
   11268:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1126c:	0005303a 	rdctl	r2,status
   11270:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11274:	e0fff917 	ldw	r3,-28(fp)
   11278:	00bfff84 	movi	r2,-2
   1127c:	1884703a 	and	r2,r3,r2
   11280:	1001703a 	wrctl	status,r2
  
  return context;
   11284:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11288:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1128c:	d0a70317 	ldw	r2,-25588(gp)
      
      current_nticks = alt_nticks();
   11290:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11294:	e0fffd17 	ldw	r3,-12(fp)
   11298:	e0bff617 	ldw	r2,-40(fp)
   1129c:	1885883a 	add	r2,r3,r2
   112a0:	10c00044 	addi	r3,r2,1
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	10c00217 	ldw	r3,8(r2)
   112b4:	e0bff617 	ldw	r2,-40(fp)
   112b8:	1880042e 	bgeu	r3,r2,112cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   112bc:	e0bffc17 	ldw	r2,-16(fp)
   112c0:	00c00044 	movi	r3,1
   112c4:	10c00405 	stb	r3,16(r2)
   112c8:	00000206 	br	112d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   112cc:	e0bffc17 	ldw	r2,-16(fp)
   112d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   112d4:	e0bffc17 	ldw	r2,-16(fp)
   112d8:	d0e00e04 	addi	r3,gp,-32712
   112dc:	e0fffa15 	stw	r3,-24(fp)
   112e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   112e4:	e0bffb17 	ldw	r2,-20(fp)
   112e8:	e0fffa17 	ldw	r3,-24(fp)
   112ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   112f0:	e0bffa17 	ldw	r2,-24(fp)
   112f4:	10c00017 	ldw	r3,0(r2)
   112f8:	e0bffb17 	ldw	r2,-20(fp)
   112fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11300:	e0bffa17 	ldw	r2,-24(fp)
   11304:	10800017 	ldw	r2,0(r2)
   11308:	e0fffb17 	ldw	r3,-20(fp)
   1130c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11310:	e0bffa17 	ldw	r2,-24(fp)
   11314:	e0fffb17 	ldw	r3,-20(fp)
   11318:	10c00015 	stw	r3,0(r2)
   1131c:	e0bff817 	ldw	r2,-32(fp)
   11320:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11324:	e0bff717 	ldw	r2,-36(fp)
   11328:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1132c:	0005883a 	mov	r2,zero
   11330:	00000306 	br	11340 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11334:	00bffa84 	movi	r2,-22
   11338:	00000106 	br	11340 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1133c:	00bfde84 	movi	r2,-134
  }
}
   11340:	e037883a 	mov	sp,fp
   11344:	df000017 	ldw	fp,0(sp)
   11348:	dec00104 	addi	sp,sp,4
   1134c:	f800283a 	ret

00011350 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11350:	defffa04 	addi	sp,sp,-24
   11354:	dfc00515 	stw	ra,20(sp)
   11358:	df000415 	stw	fp,16(sp)
   1135c:	df000404 	addi	fp,sp,16
   11360:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11364:	00800244 	movi	r2,9
   11368:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1136c:	014003f4 	movhi	r5,15
   11370:	29509004 	addi	r5,r5,16960
   11374:	e13ffd17 	ldw	r4,-12(fp)
   11378:	000cffc0 	call	cffc <__mulsi3>
   1137c:	100b883a 	mov	r5,r2
   11380:	0100bef4 	movhi	r4,763
   11384:	213c2004 	addi	r4,r4,-3968
   11388:	000cf400 	call	cf40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1138c:	100b883a 	mov	r5,r2
   11390:	01200034 	movhi	r4,32768
   11394:	213fffc4 	addi	r4,r4,-1
   11398:	000cf400 	call	cf40 <__udivsi3>
   1139c:	100b883a 	mov	r5,r2
   113a0:	e13fff17 	ldw	r4,-4(fp)
   113a4:	000cf400 	call	cf40 <__udivsi3>
   113a8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   113ac:	e0bffe17 	ldw	r2,-8(fp)
   113b0:	10002a26 	beq	r2,zero,1145c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   113b4:	e03ffc15 	stw	zero,-16(fp)
   113b8:	00001706 	br	11418 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   113bc:	00a00034 	movhi	r2,32768
   113c0:	10bfffc4 	addi	r2,r2,-1
   113c4:	10bfffc4 	addi	r2,r2,-1
   113c8:	103ffe1e 	bne	r2,zero,113c4 <__alt_exception_stack_pointer+0xf80113c4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   113cc:	014003f4 	movhi	r5,15
   113d0:	29509004 	addi	r5,r5,16960
   113d4:	e13ffd17 	ldw	r4,-12(fp)
   113d8:	000cffc0 	call	cffc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   113dc:	100b883a 	mov	r5,r2
   113e0:	0100bef4 	movhi	r4,763
   113e4:	213c2004 	addi	r4,r4,-3968
   113e8:	000cf400 	call	cf40 <__udivsi3>
   113ec:	100b883a 	mov	r5,r2
   113f0:	01200034 	movhi	r4,32768
   113f4:	213fffc4 	addi	r4,r4,-1
   113f8:	000cf400 	call	cf40 <__udivsi3>
   113fc:	1007883a 	mov	r3,r2
   11400:	e0bfff17 	ldw	r2,-4(fp)
   11404:	10c5c83a 	sub	r2,r2,r3
   11408:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1140c:	e0bffc17 	ldw	r2,-16(fp)
   11410:	10800044 	addi	r2,r2,1
   11414:	e0bffc15 	stw	r2,-16(fp)
   11418:	e0fffc17 	ldw	r3,-16(fp)
   1141c:	e0bffe17 	ldw	r2,-8(fp)
   11420:	18bfe616 	blt	r3,r2,113bc <__alt_exception_stack_pointer+0xf80113bc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11424:	014003f4 	movhi	r5,15
   11428:	29509004 	addi	r5,r5,16960
   1142c:	e13ffd17 	ldw	r4,-12(fp)
   11430:	000cffc0 	call	cffc <__mulsi3>
   11434:	100b883a 	mov	r5,r2
   11438:	0100bef4 	movhi	r4,763
   1143c:	213c2004 	addi	r4,r4,-3968
   11440:	000cf400 	call	cf40 <__udivsi3>
   11444:	e17fff17 	ldw	r5,-4(fp)
   11448:	1009883a 	mov	r4,r2
   1144c:	000cffc0 	call	cffc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11450:	10bfffc4 	addi	r2,r2,-1
   11454:	103ffe1e 	bne	r2,zero,11450 <__alt_exception_stack_pointer+0xf8011450>
   11458:	00000d06 	br	11490 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1145c:	014003f4 	movhi	r5,15
   11460:	29509004 	addi	r5,r5,16960
   11464:	e13ffd17 	ldw	r4,-12(fp)
   11468:	000cffc0 	call	cffc <__mulsi3>
   1146c:	100b883a 	mov	r5,r2
   11470:	0100bef4 	movhi	r4,763
   11474:	213c2004 	addi	r4,r4,-3968
   11478:	000cf400 	call	cf40 <__udivsi3>
   1147c:	e17fff17 	ldw	r5,-4(fp)
   11480:	1009883a 	mov	r4,r2
   11484:	000cffc0 	call	cffc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11488:	10bfffc4 	addi	r2,r2,-1
   1148c:	00bffe16 	blt	zero,r2,11488 <__alt_exception_stack_pointer+0xf8011488>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11490:	0005883a 	mov	r2,zero
}
   11494:	e037883a 	mov	sp,fp
   11498:	dfc00117 	ldw	ra,4(sp)
   1149c:	df000017 	ldw	fp,0(sp)
   114a0:	dec00204 	addi	sp,sp,8
   114a4:	f800283a 	ret

000114a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   114a8:	deffff04 	addi	sp,sp,-4
   114ac:	df000015 	stw	fp,0(sp)
   114b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   114b4:	0001883a 	nop
   114b8:	e037883a 	mov	sp,fp
   114bc:	df000017 	ldw	fp,0(sp)
   114c0:	dec00104 	addi	sp,sp,4
   114c4:	f800283a 	ret

000114c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   114c8:	defffe04 	addi	sp,sp,-8
   114cc:	dfc00115 	stw	ra,4(sp)
   114d0:	df000015 	stw	fp,0(sp)
   114d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   114d8:	d0a00c17 	ldw	r2,-32720(gp)
   114dc:	10000326 	beq	r2,zero,114ec <alt_get_errno+0x24>
   114e0:	d0a00c17 	ldw	r2,-32720(gp)
   114e4:	103ee83a 	callr	r2
   114e8:	00000106 	br	114f0 <alt_get_errno+0x28>
   114ec:	d0a6fa04 	addi	r2,gp,-25624
}
   114f0:	e037883a 	mov	sp,fp
   114f4:	dfc00117 	ldw	ra,4(sp)
   114f8:	df000017 	ldw	fp,0(sp)
   114fc:	dec00204 	addi	sp,sp,8
   11500:	f800283a 	ret

00011504 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11504:	defffa04 	addi	sp,sp,-24
   11508:	dfc00515 	stw	ra,20(sp)
   1150c:	df000415 	stw	fp,16(sp)
   11510:	df000404 	addi	fp,sp,16
   11514:	e13ffe15 	stw	r4,-8(fp)
   11518:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1151c:	e0bffe17 	ldw	r2,-8(fp)
   11520:	10000326 	beq	r2,zero,11530 <alt_dev_llist_insert+0x2c>
   11524:	e0bffe17 	ldw	r2,-8(fp)
   11528:	10800217 	ldw	r2,8(r2)
   1152c:	1000061e 	bne	r2,zero,11548 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11530:	00114c80 	call	114c8 <alt_get_errno>
   11534:	1007883a 	mov	r3,r2
   11538:	00800584 	movi	r2,22
   1153c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11540:	00bffa84 	movi	r2,-22
   11544:	00001306 	br	11594 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11548:	e0bffe17 	ldw	r2,-8(fp)
   1154c:	e0ffff17 	ldw	r3,-4(fp)
   11550:	e0fffc15 	stw	r3,-16(fp)
   11554:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11558:	e0bffd17 	ldw	r2,-12(fp)
   1155c:	e0fffc17 	ldw	r3,-16(fp)
   11560:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11564:	e0bffc17 	ldw	r2,-16(fp)
   11568:	10c00017 	ldw	r3,0(r2)
   1156c:	e0bffd17 	ldw	r2,-12(fp)
   11570:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11574:	e0bffc17 	ldw	r2,-16(fp)
   11578:	10800017 	ldw	r2,0(r2)
   1157c:	e0fffd17 	ldw	r3,-12(fp)
   11580:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11584:	e0bffc17 	ldw	r2,-16(fp)
   11588:	e0fffd17 	ldw	r3,-12(fp)
   1158c:	10c00015 	stw	r3,0(r2)

  return 0;  
   11590:	0005883a 	mov	r2,zero
}
   11594:	e037883a 	mov	sp,fp
   11598:	dfc00117 	ldw	ra,4(sp)
   1159c:	df000017 	ldw	fp,0(sp)
   115a0:	dec00204 	addi	sp,sp,8
   115a4:	f800283a 	ret

000115a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   115a8:	defffd04 	addi	sp,sp,-12
   115ac:	dfc00215 	stw	ra,8(sp)
   115b0:	df000115 	stw	fp,4(sp)
   115b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   115b8:	00800074 	movhi	r2,1
   115bc:	10895704 	addi	r2,r2,9564
   115c0:	e0bfff15 	stw	r2,-4(fp)
   115c4:	00000606 	br	115e0 <_do_ctors+0x38>
        (*ctor) (); 
   115c8:	e0bfff17 	ldw	r2,-4(fp)
   115cc:	10800017 	ldw	r2,0(r2)
   115d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   115d4:	e0bfff17 	ldw	r2,-4(fp)
   115d8:	10bfff04 	addi	r2,r2,-4
   115dc:	e0bfff15 	stw	r2,-4(fp)
   115e0:	e0ffff17 	ldw	r3,-4(fp)
   115e4:	00800074 	movhi	r2,1
   115e8:	10895804 	addi	r2,r2,9568
   115ec:	18bff62e 	bgeu	r3,r2,115c8 <__alt_exception_stack_pointer+0xf80115c8>
        (*ctor) (); 
}
   115f0:	0001883a 	nop
   115f4:	e037883a 	mov	sp,fp
   115f8:	dfc00117 	ldw	ra,4(sp)
   115fc:	df000017 	ldw	fp,0(sp)
   11600:	dec00204 	addi	sp,sp,8
   11604:	f800283a 	ret

00011608 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11608:	defffd04 	addi	sp,sp,-12
   1160c:	dfc00215 	stw	ra,8(sp)
   11610:	df000115 	stw	fp,4(sp)
   11614:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11618:	00800074 	movhi	r2,1
   1161c:	10895704 	addi	r2,r2,9564
   11620:	e0bfff15 	stw	r2,-4(fp)
   11624:	00000606 	br	11640 <_do_dtors+0x38>
        (*dtor) (); 
   11628:	e0bfff17 	ldw	r2,-4(fp)
   1162c:	10800017 	ldw	r2,0(r2)
   11630:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11634:	e0bfff17 	ldw	r2,-4(fp)
   11638:	10bfff04 	addi	r2,r2,-4
   1163c:	e0bfff15 	stw	r2,-4(fp)
   11640:	e0ffff17 	ldw	r3,-4(fp)
   11644:	00800074 	movhi	r2,1
   11648:	10895804 	addi	r2,r2,9568
   1164c:	18bff62e 	bgeu	r3,r2,11628 <__alt_exception_stack_pointer+0xf8011628>
        (*dtor) (); 
}
   11650:	0001883a 	nop
   11654:	e037883a 	mov	sp,fp
   11658:	dfc00117 	ldw	ra,4(sp)
   1165c:	df000017 	ldw	fp,0(sp)
   11660:	dec00204 	addi	sp,sp,8
   11664:	f800283a 	ret

00011668 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11668:	deffff04 	addi	sp,sp,-4
   1166c:	df000015 	stw	fp,0(sp)
   11670:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11674:	0001883a 	nop
   11678:	e037883a 	mov	sp,fp
   1167c:	df000017 	ldw	fp,0(sp)
   11680:	dec00104 	addi	sp,sp,4
   11684:	f800283a 	ret

00011688 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11688:	defff904 	addi	sp,sp,-28
   1168c:	dfc00615 	stw	ra,24(sp)
   11690:	df000515 	stw	fp,20(sp)
   11694:	df000504 	addi	fp,sp,20
   11698:	e13ffc15 	stw	r4,-16(fp)
   1169c:	e17ffd15 	stw	r5,-12(fp)
   116a0:	e1bffe15 	stw	r6,-8(fp)
   116a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   116a8:	e0800217 	ldw	r2,8(fp)
   116ac:	d8800015 	stw	r2,0(sp)
   116b0:	e1ffff17 	ldw	r7,-4(fp)
   116b4:	e1bffe17 	ldw	r6,-8(fp)
   116b8:	e17ffd17 	ldw	r5,-12(fp)
   116bc:	e13ffc17 	ldw	r4,-16(fp)
   116c0:	00118380 	call	11838 <alt_iic_isr_register>
}  
   116c4:	e037883a 	mov	sp,fp
   116c8:	dfc00117 	ldw	ra,4(sp)
   116cc:	df000017 	ldw	fp,0(sp)
   116d0:	dec00204 	addi	sp,sp,8
   116d4:	f800283a 	ret

000116d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   116d8:	defff904 	addi	sp,sp,-28
   116dc:	df000615 	stw	fp,24(sp)
   116e0:	df000604 	addi	fp,sp,24
   116e4:	e13ffe15 	stw	r4,-8(fp)
   116e8:	e17fff15 	stw	r5,-4(fp)
   116ec:	e0bfff17 	ldw	r2,-4(fp)
   116f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116f4:	0005303a 	rdctl	r2,status
   116f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116fc:	e0fffb17 	ldw	r3,-20(fp)
   11700:	00bfff84 	movi	r2,-2
   11704:	1884703a 	and	r2,r3,r2
   11708:	1001703a 	wrctl	status,r2
  
  return context;
   1170c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11710:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11714:	00c00044 	movi	r3,1
   11718:	e0bffa17 	ldw	r2,-24(fp)
   1171c:	1884983a 	sll	r2,r3,r2
   11720:	1007883a 	mov	r3,r2
   11724:	d0a70117 	ldw	r2,-25596(gp)
   11728:	1884b03a 	or	r2,r3,r2
   1172c:	d0a70115 	stw	r2,-25596(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11730:	d0a70117 	ldw	r2,-25596(gp)
   11734:	100170fa 	wrctl	ienable,r2
   11738:	e0bffc17 	ldw	r2,-16(fp)
   1173c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11740:	e0bffd17 	ldw	r2,-12(fp)
   11744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1174c:	0001883a 	nop
}
   11750:	e037883a 	mov	sp,fp
   11754:	df000017 	ldw	fp,0(sp)
   11758:	dec00104 	addi	sp,sp,4
   1175c:	f800283a 	ret

00011760 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11760:	defff904 	addi	sp,sp,-28
   11764:	df000615 	stw	fp,24(sp)
   11768:	df000604 	addi	fp,sp,24
   1176c:	e13ffe15 	stw	r4,-8(fp)
   11770:	e17fff15 	stw	r5,-4(fp)
   11774:	e0bfff17 	ldw	r2,-4(fp)
   11778:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1177c:	0005303a 	rdctl	r2,status
   11780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11784:	e0fffb17 	ldw	r3,-20(fp)
   11788:	00bfff84 	movi	r2,-2
   1178c:	1884703a 	and	r2,r3,r2
   11790:	1001703a 	wrctl	status,r2
  
  return context;
   11794:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11798:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1179c:	00c00044 	movi	r3,1
   117a0:	e0bffa17 	ldw	r2,-24(fp)
   117a4:	1884983a 	sll	r2,r3,r2
   117a8:	0084303a 	nor	r2,zero,r2
   117ac:	1007883a 	mov	r3,r2
   117b0:	d0a70117 	ldw	r2,-25596(gp)
   117b4:	1884703a 	and	r2,r3,r2
   117b8:	d0a70115 	stw	r2,-25596(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   117bc:	d0a70117 	ldw	r2,-25596(gp)
   117c0:	100170fa 	wrctl	ienable,r2
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   117d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   117d8:	0001883a 	nop
}
   117dc:	e037883a 	mov	sp,fp
   117e0:	df000017 	ldw	fp,0(sp)
   117e4:	dec00104 	addi	sp,sp,4
   117e8:	f800283a 	ret

000117ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   117ec:	defffc04 	addi	sp,sp,-16
   117f0:	df000315 	stw	fp,12(sp)
   117f4:	df000304 	addi	fp,sp,12
   117f8:	e13ffe15 	stw	r4,-8(fp)
   117fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11800:	000530fa 	rdctl	r2,ienable
   11804:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11808:	00c00044 	movi	r3,1
   1180c:	e0bfff17 	ldw	r2,-4(fp)
   11810:	1884983a 	sll	r2,r3,r2
   11814:	1007883a 	mov	r3,r2
   11818:	e0bffd17 	ldw	r2,-12(fp)
   1181c:	1884703a 	and	r2,r3,r2
   11820:	1004c03a 	cmpne	r2,r2,zero
   11824:	10803fcc 	andi	r2,r2,255
}
   11828:	e037883a 	mov	sp,fp
   1182c:	df000017 	ldw	fp,0(sp)
   11830:	dec00104 	addi	sp,sp,4
   11834:	f800283a 	ret

00011838 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11838:	defff504 	addi	sp,sp,-44
   1183c:	dfc00a15 	stw	ra,40(sp)
   11840:	df000915 	stw	fp,36(sp)
   11844:	df000904 	addi	fp,sp,36
   11848:	e13ffc15 	stw	r4,-16(fp)
   1184c:	e17ffd15 	stw	r5,-12(fp)
   11850:	e1bffe15 	stw	r6,-8(fp)
   11854:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11858:	00bffa84 	movi	r2,-22
   1185c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11868:	e0bff817 	ldw	r2,-32(fp)
   1186c:	10800808 	cmpgei	r2,r2,32
   11870:	1000271e 	bne	r2,zero,11910 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11874:	0005303a 	rdctl	r2,status
   11878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1187c:	e0fffb17 	ldw	r3,-20(fp)
   11880:	00bfff84 	movi	r2,-2
   11884:	1884703a 	and	r2,r3,r2
   11888:	1001703a 	wrctl	status,r2
  
  return context;
   1188c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11890:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11894:	00800074 	movhi	r2,1
   11898:	109a1104 	addi	r2,r2,26692
   1189c:	e0fff817 	ldw	r3,-32(fp)
   118a0:	180690fa 	slli	r3,r3,3
   118a4:	10c5883a 	add	r2,r2,r3
   118a8:	e0fffe17 	ldw	r3,-8(fp)
   118ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   118b0:	00800074 	movhi	r2,1
   118b4:	109a1104 	addi	r2,r2,26692
   118b8:	e0fff817 	ldw	r3,-32(fp)
   118bc:	180690fa 	slli	r3,r3,3
   118c0:	10c5883a 	add	r2,r2,r3
   118c4:	10800104 	addi	r2,r2,4
   118c8:	e0ffff17 	ldw	r3,-4(fp)
   118cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10000526 	beq	r2,zero,118ec <alt_iic_isr_register+0xb4>
   118d8:	e0bff817 	ldw	r2,-32(fp)
   118dc:	100b883a 	mov	r5,r2
   118e0:	e13ffc17 	ldw	r4,-16(fp)
   118e4:	00116d80 	call	116d8 <alt_ic_irq_enable>
   118e8:	00000406 	br	118fc <alt_iic_isr_register+0xc4>
   118ec:	e0bff817 	ldw	r2,-32(fp)
   118f0:	100b883a 	mov	r5,r2
   118f4:	e13ffc17 	ldw	r4,-16(fp)
   118f8:	00117600 	call	11760 <alt_ic_irq_disable>
   118fc:	e0bff715 	stw	r2,-36(fp)
   11900:	e0bffa17 	ldw	r2,-24(fp)
   11904:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11908:	e0bff917 	ldw	r2,-28(fp)
   1190c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11910:	e0bff717 	ldw	r2,-36(fp)
}
   11914:	e037883a 	mov	sp,fp
   11918:	dfc00117 	ldw	ra,4(sp)
   1191c:	df000017 	ldw	fp,0(sp)
   11920:	dec00204 	addi	sp,sp,8
   11924:	f800283a 	ret

00011928 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11928:	defff804 	addi	sp,sp,-32
   1192c:	dfc00715 	stw	ra,28(sp)
   11930:	df000615 	stw	fp,24(sp)
   11934:	dc000515 	stw	r16,20(sp)
   11938:	df000604 	addi	fp,sp,24
   1193c:	e13ffb15 	stw	r4,-20(fp)
   11940:	e17ffc15 	stw	r5,-16(fp)
   11944:	e1bffd15 	stw	r6,-12(fp)
   11948:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1194c:	e1bffe17 	ldw	r6,-8(fp)
   11950:	e17ffd17 	ldw	r5,-12(fp)
   11954:	e13ffc17 	ldw	r4,-16(fp)
   11958:	0011bb00 	call	11bb0 <open>
   1195c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11960:	e0bffa17 	ldw	r2,-24(fp)
   11964:	10002216 	blt	r2,zero,119f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11968:	04000074 	movhi	r16,1
   1196c:	840e6404 	addi	r16,r16,14736
   11970:	e0bffa17 	ldw	r2,-24(fp)
   11974:	01400304 	movi	r5,12
   11978:	1009883a 	mov	r4,r2
   1197c:	000cffc0 	call	cffc <__mulsi3>
   11980:	8085883a 	add	r2,r16,r2
   11984:	10c00017 	ldw	r3,0(r2)
   11988:	e0bffb17 	ldw	r2,-20(fp)
   1198c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11990:	04000074 	movhi	r16,1
   11994:	840e6404 	addi	r16,r16,14736
   11998:	e0bffa17 	ldw	r2,-24(fp)
   1199c:	01400304 	movi	r5,12
   119a0:	1009883a 	mov	r4,r2
   119a4:	000cffc0 	call	cffc <__mulsi3>
   119a8:	8085883a 	add	r2,r16,r2
   119ac:	10800104 	addi	r2,r2,4
   119b0:	10c00017 	ldw	r3,0(r2)
   119b4:	e0bffb17 	ldw	r2,-20(fp)
   119b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   119bc:	04000074 	movhi	r16,1
   119c0:	840e6404 	addi	r16,r16,14736
   119c4:	e0bffa17 	ldw	r2,-24(fp)
   119c8:	01400304 	movi	r5,12
   119cc:	1009883a 	mov	r4,r2
   119d0:	000cffc0 	call	cffc <__mulsi3>
   119d4:	8085883a 	add	r2,r16,r2
   119d8:	10800204 	addi	r2,r2,8
   119dc:	10c00017 	ldw	r3,0(r2)
   119e0:	e0bffb17 	ldw	r2,-20(fp)
   119e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   119e8:	e13ffa17 	ldw	r4,-24(fp)
   119ec:	000ffec0 	call	ffec <alt_release_fd>
  }
} 
   119f0:	0001883a 	nop
   119f4:	e6ffff04 	addi	sp,fp,-4
   119f8:	dfc00217 	ldw	ra,8(sp)
   119fc:	df000117 	ldw	fp,4(sp)
   11a00:	dc000017 	ldw	r16,0(sp)
   11a04:	dec00304 	addi	sp,sp,12
   11a08:	f800283a 	ret

00011a0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11a0c:	defffb04 	addi	sp,sp,-20
   11a10:	dfc00415 	stw	ra,16(sp)
   11a14:	df000315 	stw	fp,12(sp)
   11a18:	df000304 	addi	fp,sp,12
   11a1c:	e13ffd15 	stw	r4,-12(fp)
   11a20:	e17ffe15 	stw	r5,-8(fp)
   11a24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11a28:	01c07fc4 	movi	r7,511
   11a2c:	01800044 	movi	r6,1
   11a30:	e17ffd17 	ldw	r5,-12(fp)
   11a34:	01000074 	movhi	r4,1
   11a38:	210e6704 	addi	r4,r4,14748
   11a3c:	00119280 	call	11928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11a40:	01c07fc4 	movi	r7,511
   11a44:	000d883a 	mov	r6,zero
   11a48:	e17ffe17 	ldw	r5,-8(fp)
   11a4c:	01000074 	movhi	r4,1
   11a50:	210e6404 	addi	r4,r4,14736
   11a54:	00119280 	call	11928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11a58:	01c07fc4 	movi	r7,511
   11a5c:	01800044 	movi	r6,1
   11a60:	e17fff17 	ldw	r5,-4(fp)
   11a64:	01000074 	movhi	r4,1
   11a68:	210e6a04 	addi	r4,r4,14760
   11a6c:	00119280 	call	11928 <alt_open_fd>
}  
   11a70:	0001883a 	nop
   11a74:	e037883a 	mov	sp,fp
   11a78:	dfc00117 	ldw	ra,4(sp)
   11a7c:	df000017 	ldw	fp,0(sp)
   11a80:	dec00204 	addi	sp,sp,8
   11a84:	f800283a 	ret

00011a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a88:	defffe04 	addi	sp,sp,-8
   11a8c:	dfc00115 	stw	ra,4(sp)
   11a90:	df000015 	stw	fp,0(sp)
   11a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11a98:	d0a00c17 	ldw	r2,-32720(gp)
   11a9c:	10000326 	beq	r2,zero,11aac <alt_get_errno+0x24>
   11aa0:	d0a00c17 	ldw	r2,-32720(gp)
   11aa4:	103ee83a 	callr	r2
   11aa8:	00000106 	br	11ab0 <alt_get_errno+0x28>
   11aac:	d0a6fa04 	addi	r2,gp,-25624
}
   11ab0:	e037883a 	mov	sp,fp
   11ab4:	dfc00117 	ldw	ra,4(sp)
   11ab8:	df000017 	ldw	fp,0(sp)
   11abc:	dec00204 	addi	sp,sp,8
   11ac0:	f800283a 	ret

00011ac4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11ac4:	defffb04 	addi	sp,sp,-20
   11ac8:	dfc00415 	stw	ra,16(sp)
   11acc:	df000315 	stw	fp,12(sp)
   11ad0:	dc000215 	stw	r16,8(sp)
   11ad4:	df000304 	addi	fp,sp,12
   11ad8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11adc:	e0bffe17 	ldw	r2,-8(fp)
   11ae0:	10800217 	ldw	r2,8(r2)
   11ae4:	10d00034 	orhi	r3,r2,16384
   11ae8:	e0bffe17 	ldw	r2,-8(fp)
   11aec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11af0:	e03ffd15 	stw	zero,-12(fp)
   11af4:	00002306 	br	11b84 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11af8:	04000074 	movhi	r16,1
   11afc:	840e6404 	addi	r16,r16,14736
   11b00:	e0bffd17 	ldw	r2,-12(fp)
   11b04:	01400304 	movi	r5,12
   11b08:	1009883a 	mov	r4,r2
   11b0c:	000cffc0 	call	cffc <__mulsi3>
   11b10:	8085883a 	add	r2,r16,r2
   11b14:	10c00017 	ldw	r3,0(r2)
   11b18:	e0bffe17 	ldw	r2,-8(fp)
   11b1c:	10800017 	ldw	r2,0(r2)
   11b20:	1880151e 	bne	r3,r2,11b78 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11b24:	04000074 	movhi	r16,1
   11b28:	840e6404 	addi	r16,r16,14736
   11b2c:	e0bffd17 	ldw	r2,-12(fp)
   11b30:	01400304 	movi	r5,12
   11b34:	1009883a 	mov	r4,r2
   11b38:	000cffc0 	call	cffc <__mulsi3>
   11b3c:	8085883a 	add	r2,r16,r2
   11b40:	10800204 	addi	r2,r2,8
   11b44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11b48:	10000b0e 	bge	r2,zero,11b78 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11b4c:	01400304 	movi	r5,12
   11b50:	e13ffd17 	ldw	r4,-12(fp)
   11b54:	000cffc0 	call	cffc <__mulsi3>
   11b58:	1007883a 	mov	r3,r2
   11b5c:	00800074 	movhi	r2,1
   11b60:	108e6404 	addi	r2,r2,14736
   11b64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	18800226 	beq	r3,r2,11b78 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11b70:	00bffcc4 	movi	r2,-13
   11b74:	00000806 	br	11b98 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11b78:	e0bffd17 	ldw	r2,-12(fp)
   11b7c:	10800044 	addi	r2,r2,1
   11b80:	e0bffd15 	stw	r2,-12(fp)
   11b84:	d0a00b17 	ldw	r2,-32724(gp)
   11b88:	1007883a 	mov	r3,r2
   11b8c:	e0bffd17 	ldw	r2,-12(fp)
   11b90:	18bfd92e 	bgeu	r3,r2,11af8 <__alt_exception_stack_pointer+0xf8011af8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11b94:	0005883a 	mov	r2,zero
}
   11b98:	e6ffff04 	addi	sp,fp,-4
   11b9c:	dfc00217 	ldw	ra,8(sp)
   11ba0:	df000117 	ldw	fp,4(sp)
   11ba4:	dc000017 	ldw	r16,0(sp)
   11ba8:	dec00304 	addi	sp,sp,12
   11bac:	f800283a 	ret

00011bb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11bb0:	defff604 	addi	sp,sp,-40
   11bb4:	dfc00915 	stw	ra,36(sp)
   11bb8:	df000815 	stw	fp,32(sp)
   11bbc:	df000804 	addi	fp,sp,32
   11bc0:	e13ffd15 	stw	r4,-12(fp)
   11bc4:	e17ffe15 	stw	r5,-8(fp)
   11bc8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11bcc:	00bfffc4 	movi	r2,-1
   11bd0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11bd4:	00bffb44 	movi	r2,-19
   11bd8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11bdc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11be0:	d1600904 	addi	r5,gp,-32732
   11be4:	e13ffd17 	ldw	r4,-12(fp)
   11be8:	0011ed40 	call	11ed4 <alt_find_dev>
   11bec:	e0bff815 	stw	r2,-32(fp)
   11bf0:	e0bff817 	ldw	r2,-32(fp)
   11bf4:	1000051e 	bne	r2,zero,11c0c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11bf8:	e13ffd17 	ldw	r4,-12(fp)
   11bfc:	0011f640 	call	11f64 <alt_find_file>
   11c00:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11c04:	00800044 	movi	r2,1
   11c08:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11c0c:	e0bff817 	ldw	r2,-32(fp)
   11c10:	10002b26 	beq	r2,zero,11cc0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11c14:	e13ff817 	ldw	r4,-32(fp)
   11c18:	001206c0 	call	1206c <alt_get_fd>
   11c1c:	e0bff915 	stw	r2,-28(fp)
   11c20:	e0bff917 	ldw	r2,-28(fp)
   11c24:	1000030e 	bge	r2,zero,11c34 <open+0x84>
    {
      status = index;
   11c28:	e0bff917 	ldw	r2,-28(fp)
   11c2c:	e0bffa15 	stw	r2,-24(fp)
   11c30:	00002506 	br	11cc8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11c34:	01400304 	movi	r5,12
   11c38:	e13ff917 	ldw	r4,-28(fp)
   11c3c:	000cffc0 	call	cffc <__mulsi3>
   11c40:	1007883a 	mov	r3,r2
   11c44:	00800074 	movhi	r2,1
   11c48:	108e6404 	addi	r2,r2,14736
   11c4c:	1885883a 	add	r2,r3,r2
   11c50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11c54:	e0fffe17 	ldw	r3,-8(fp)
   11c58:	00900034 	movhi	r2,16384
   11c5c:	10bfffc4 	addi	r2,r2,-1
   11c60:	1886703a 	and	r3,r3,r2
   11c64:	e0bffc17 	ldw	r2,-16(fp)
   11c68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11c6c:	e0bffb17 	ldw	r2,-20(fp)
   11c70:	1000051e 	bne	r2,zero,11c88 <open+0xd8>
   11c74:	e13ffc17 	ldw	r4,-16(fp)
   11c78:	0011ac40 	call	11ac4 <alt_file_locked>
   11c7c:	e0bffa15 	stw	r2,-24(fp)
   11c80:	e0bffa17 	ldw	r2,-24(fp)
   11c84:	10001016 	blt	r2,zero,11cc8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11c88:	e0bff817 	ldw	r2,-32(fp)
   11c8c:	10800317 	ldw	r2,12(r2)
   11c90:	10000826 	beq	r2,zero,11cb4 <open+0x104>
   11c94:	e0bff817 	ldw	r2,-32(fp)
   11c98:	10800317 	ldw	r2,12(r2)
   11c9c:	e1ffff17 	ldw	r7,-4(fp)
   11ca0:	e1bffe17 	ldw	r6,-8(fp)
   11ca4:	e17ffd17 	ldw	r5,-12(fp)
   11ca8:	e13ffc17 	ldw	r4,-16(fp)
   11cac:	103ee83a 	callr	r2
   11cb0:	00000106 	br	11cb8 <open+0x108>
   11cb4:	0005883a 	mov	r2,zero
   11cb8:	e0bffa15 	stw	r2,-24(fp)
   11cbc:	00000206 	br	11cc8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11cc0:	00bffb44 	movi	r2,-19
   11cc4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11cc8:	e0bffa17 	ldw	r2,-24(fp)
   11ccc:	1000090e 	bge	r2,zero,11cf4 <open+0x144>
  {
    alt_release_fd (index);  
   11cd0:	e13ff917 	ldw	r4,-28(fp)
   11cd4:	000ffec0 	call	ffec <alt_release_fd>
    ALT_ERRNO = -status;
   11cd8:	0011a880 	call	11a88 <alt_get_errno>
   11cdc:	1007883a 	mov	r3,r2
   11ce0:	e0bffa17 	ldw	r2,-24(fp)
   11ce4:	0085c83a 	sub	r2,zero,r2
   11ce8:	18800015 	stw	r2,0(r3)
    return -1;
   11cec:	00bfffc4 	movi	r2,-1
   11cf0:	00000106 	br	11cf8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11cf4:	e0bff917 	ldw	r2,-28(fp)
}
   11cf8:	e037883a 	mov	sp,fp
   11cfc:	dfc00117 	ldw	ra,4(sp)
   11d00:	df000017 	ldw	fp,0(sp)
   11d04:	dec00204 	addi	sp,sp,8
   11d08:	f800283a 	ret

00011d0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11d0c:	defffa04 	addi	sp,sp,-24
   11d10:	df000515 	stw	fp,20(sp)
   11d14:	df000504 	addi	fp,sp,20
   11d18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d1c:	0005303a 	rdctl	r2,status
   11d20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d24:	e0fffc17 	ldw	r3,-16(fp)
   11d28:	00bfff84 	movi	r2,-2
   11d2c:	1884703a 	and	r2,r3,r2
   11d30:	1001703a 	wrctl	status,r2
  
  return context;
   11d34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11d38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11d3c:	e0bfff17 	ldw	r2,-4(fp)
   11d40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11d44:	e0bffd17 	ldw	r2,-12(fp)
   11d48:	10800017 	ldw	r2,0(r2)
   11d4c:	e0fffd17 	ldw	r3,-12(fp)
   11d50:	18c00117 	ldw	r3,4(r3)
   11d54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11d58:	e0bffd17 	ldw	r2,-12(fp)
   11d5c:	10800117 	ldw	r2,4(r2)
   11d60:	e0fffd17 	ldw	r3,-12(fp)
   11d64:	18c00017 	ldw	r3,0(r3)
   11d68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11d6c:	e0bffd17 	ldw	r2,-12(fp)
   11d70:	e0fffd17 	ldw	r3,-12(fp)
   11d74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11d78:	e0bffd17 	ldw	r2,-12(fp)
   11d7c:	e0fffd17 	ldw	r3,-12(fp)
   11d80:	10c00015 	stw	r3,0(r2)
   11d84:	e0bffb17 	ldw	r2,-20(fp)
   11d88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d8c:	e0bffe17 	ldw	r2,-8(fp)
   11d90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11d94:	0001883a 	nop
   11d98:	e037883a 	mov	sp,fp
   11d9c:	df000017 	ldw	fp,0(sp)
   11da0:	dec00104 	addi	sp,sp,4
   11da4:	f800283a 	ret

00011da8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11da8:	defffb04 	addi	sp,sp,-20
   11dac:	dfc00415 	stw	ra,16(sp)
   11db0:	df000315 	stw	fp,12(sp)
   11db4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11db8:	d0a00e17 	ldw	r2,-32712(gp)
   11dbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11dc0:	d0a70317 	ldw	r2,-25588(gp)
   11dc4:	10800044 	addi	r2,r2,1
   11dc8:	d0a70315 	stw	r2,-25588(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11dcc:	00002e06 	br	11e88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	10800017 	ldw	r2,0(r2)
   11dd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10800403 	ldbu	r2,16(r2)
   11de4:	10803fcc 	andi	r2,r2,255
   11de8:	10000426 	beq	r2,zero,11dfc <alt_tick+0x54>
   11dec:	d0a70317 	ldw	r2,-25588(gp)
   11df0:	1000021e 	bne	r2,zero,11dfc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11df4:	e0bffd17 	ldw	r2,-12(fp)
   11df8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11dfc:	e0bffd17 	ldw	r2,-12(fp)
   11e00:	10800217 	ldw	r2,8(r2)
   11e04:	d0e70317 	ldw	r3,-25588(gp)
   11e08:	18801d36 	bltu	r3,r2,11e80 <alt_tick+0xd8>
   11e0c:	e0bffd17 	ldw	r2,-12(fp)
   11e10:	10800403 	ldbu	r2,16(r2)
   11e14:	10803fcc 	andi	r2,r2,255
   11e18:	1000191e 	bne	r2,zero,11e80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11e1c:	e0bffd17 	ldw	r2,-12(fp)
   11e20:	10800317 	ldw	r2,12(r2)
   11e24:	e0fffd17 	ldw	r3,-12(fp)
   11e28:	18c00517 	ldw	r3,20(r3)
   11e2c:	1809883a 	mov	r4,r3
   11e30:	103ee83a 	callr	r2
   11e34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11e38:	e0bfff17 	ldw	r2,-4(fp)
   11e3c:	1000031e 	bne	r2,zero,11e4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11e40:	e13ffd17 	ldw	r4,-12(fp)
   11e44:	0011d0c0 	call	11d0c <alt_alarm_stop>
   11e48:	00000d06 	br	11e80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11e4c:	e0bffd17 	ldw	r2,-12(fp)
   11e50:	10c00217 	ldw	r3,8(r2)
   11e54:	e0bfff17 	ldw	r2,-4(fp)
   11e58:	1887883a 	add	r3,r3,r2
   11e5c:	e0bffd17 	ldw	r2,-12(fp)
   11e60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11e64:	e0bffd17 	ldw	r2,-12(fp)
   11e68:	10c00217 	ldw	r3,8(r2)
   11e6c:	d0a70317 	ldw	r2,-25588(gp)
   11e70:	1880032e 	bgeu	r3,r2,11e80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11e74:	e0bffd17 	ldw	r2,-12(fp)
   11e78:	00c00044 	movi	r3,1
   11e7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11e80:	e0bffe17 	ldw	r2,-8(fp)
   11e84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11e88:	e0fffd17 	ldw	r3,-12(fp)
   11e8c:	d0a00e04 	addi	r2,gp,-32712
   11e90:	18bfcf1e 	bne	r3,r2,11dd0 <__alt_exception_stack_pointer+0xf8011dd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11e94:	0001883a 	nop
}
   11e98:	0001883a 	nop
   11e9c:	e037883a 	mov	sp,fp
   11ea0:	dfc00117 	ldw	ra,4(sp)
   11ea4:	df000017 	ldw	fp,0(sp)
   11ea8:	dec00204 	addi	sp,sp,8
   11eac:	f800283a 	ret

00011eb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11eb0:	deffff04 	addi	sp,sp,-4
   11eb4:	df000015 	stw	fp,0(sp)
   11eb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11ebc:	000170fa 	wrctl	ienable,zero
}
   11ec0:	0001883a 	nop
   11ec4:	e037883a 	mov	sp,fp
   11ec8:	df000017 	ldw	fp,0(sp)
   11ecc:	dec00104 	addi	sp,sp,4
   11ed0:	f800283a 	ret

00011ed4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11ed4:	defffa04 	addi	sp,sp,-24
   11ed8:	dfc00515 	stw	ra,20(sp)
   11edc:	df000415 	stw	fp,16(sp)
   11ee0:	df000404 	addi	fp,sp,16
   11ee4:	e13ffe15 	stw	r4,-8(fp)
   11ee8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	10800017 	ldw	r2,0(r2)
   11ef4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11ef8:	e13ffe17 	ldw	r4,-8(fp)
   11efc:	00033200 	call	3320 <strlen>
   11f00:	10800044 	addi	r2,r2,1
   11f04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11f08:	00000d06 	br	11f40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
   11f10:	10800217 	ldw	r2,8(r2)
   11f14:	e0fffd17 	ldw	r3,-12(fp)
   11f18:	180d883a 	mov	r6,r3
   11f1c:	e17ffe17 	ldw	r5,-8(fp)
   11f20:	1009883a 	mov	r4,r2
   11f24:	00122180 	call	12218 <memcmp>
   11f28:	1000021e 	bne	r2,zero,11f34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11f2c:	e0bffc17 	ldw	r2,-16(fp)
   11f30:	00000706 	br	11f50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11f34:	e0bffc17 	ldw	r2,-16(fp)
   11f38:	10800017 	ldw	r2,0(r2)
   11f3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11f40:	e0fffc17 	ldw	r3,-16(fp)
   11f44:	e0bfff17 	ldw	r2,-4(fp)
   11f48:	18bff01e 	bne	r3,r2,11f0c <__alt_exception_stack_pointer+0xf8011f0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11f4c:	0005883a 	mov	r2,zero
}
   11f50:	e037883a 	mov	sp,fp
   11f54:	dfc00117 	ldw	ra,4(sp)
   11f58:	df000017 	ldw	fp,0(sp)
   11f5c:	dec00204 	addi	sp,sp,8
   11f60:	f800283a 	ret

00011f64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11f64:	defffb04 	addi	sp,sp,-20
   11f68:	dfc00415 	stw	ra,16(sp)
   11f6c:	df000315 	stw	fp,12(sp)
   11f70:	df000304 	addi	fp,sp,12
   11f74:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11f78:	d0a00717 	ldw	r2,-32740(gp)
   11f7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11f80:	00003106 	br	12048 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11f84:	e0bffd17 	ldw	r2,-12(fp)
   11f88:	10800217 	ldw	r2,8(r2)
   11f8c:	1009883a 	mov	r4,r2
   11f90:	00033200 	call	3320 <strlen>
   11f94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11f98:	e0bffd17 	ldw	r2,-12(fp)
   11f9c:	10c00217 	ldw	r3,8(r2)
   11fa0:	e0bffe17 	ldw	r2,-8(fp)
   11fa4:	10bfffc4 	addi	r2,r2,-1
   11fa8:	1885883a 	add	r2,r3,r2
   11fac:	10800003 	ldbu	r2,0(r2)
   11fb0:	10803fcc 	andi	r2,r2,255
   11fb4:	1080201c 	xori	r2,r2,128
   11fb8:	10bfe004 	addi	r2,r2,-128
   11fbc:	10800bd8 	cmpnei	r2,r2,47
   11fc0:	1000031e 	bne	r2,zero,11fd0 <alt_find_file+0x6c>
    {
      len -= 1;
   11fc4:	e0bffe17 	ldw	r2,-8(fp)
   11fc8:	10bfffc4 	addi	r2,r2,-1
   11fcc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11fd0:	e0bffe17 	ldw	r2,-8(fp)
   11fd4:	e0ffff17 	ldw	r3,-4(fp)
   11fd8:	1885883a 	add	r2,r3,r2
   11fdc:	10800003 	ldbu	r2,0(r2)
   11fe0:	10803fcc 	andi	r2,r2,255
   11fe4:	1080201c 	xori	r2,r2,128
   11fe8:	10bfe004 	addi	r2,r2,-128
   11fec:	10800be0 	cmpeqi	r2,r2,47
   11ff0:	1000081e 	bne	r2,zero,12014 <alt_find_file+0xb0>
   11ff4:	e0bffe17 	ldw	r2,-8(fp)
   11ff8:	e0ffff17 	ldw	r3,-4(fp)
   11ffc:	1885883a 	add	r2,r3,r2
   12000:	10800003 	ldbu	r2,0(r2)
   12004:	10803fcc 	andi	r2,r2,255
   12008:	1080201c 	xori	r2,r2,128
   1200c:	10bfe004 	addi	r2,r2,-128
   12010:	10000a1e 	bne	r2,zero,1203c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12014:	e0bffd17 	ldw	r2,-12(fp)
   12018:	10800217 	ldw	r2,8(r2)
   1201c:	e0fffe17 	ldw	r3,-8(fp)
   12020:	180d883a 	mov	r6,r3
   12024:	e17fff17 	ldw	r5,-4(fp)
   12028:	1009883a 	mov	r4,r2
   1202c:	00122180 	call	12218 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12030:	1000021e 	bne	r2,zero,1203c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12034:	e0bffd17 	ldw	r2,-12(fp)
   12038:	00000706 	br	12058 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1203c:	e0bffd17 	ldw	r2,-12(fp)
   12040:	10800017 	ldw	r2,0(r2)
   12044:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12048:	e0fffd17 	ldw	r3,-12(fp)
   1204c:	d0a00704 	addi	r2,gp,-32740
   12050:	18bfcc1e 	bne	r3,r2,11f84 <__alt_exception_stack_pointer+0xf8011f84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12054:	0005883a 	mov	r2,zero
}
   12058:	e037883a 	mov	sp,fp
   1205c:	dfc00117 	ldw	ra,4(sp)
   12060:	df000017 	ldw	fp,0(sp)
   12064:	dec00204 	addi	sp,sp,8
   12068:	f800283a 	ret

0001206c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1206c:	defffa04 	addi	sp,sp,-24
   12070:	dfc00515 	stw	ra,20(sp)
   12074:	df000415 	stw	fp,16(sp)
   12078:	dc000315 	stw	r16,12(sp)
   1207c:	df000404 	addi	fp,sp,16
   12080:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12084:	00bffa04 	movi	r2,-24
   12088:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1208c:	e03ffc15 	stw	zero,-16(fp)
   12090:	00001d06 	br	12108 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12094:	04000074 	movhi	r16,1
   12098:	840e6404 	addi	r16,r16,14736
   1209c:	e0bffc17 	ldw	r2,-16(fp)
   120a0:	01400304 	movi	r5,12
   120a4:	1009883a 	mov	r4,r2
   120a8:	000cffc0 	call	cffc <__mulsi3>
   120ac:	8085883a 	add	r2,r16,r2
   120b0:	10800017 	ldw	r2,0(r2)
   120b4:	1000111e 	bne	r2,zero,120fc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   120b8:	04000074 	movhi	r16,1
   120bc:	840e6404 	addi	r16,r16,14736
   120c0:	e0bffc17 	ldw	r2,-16(fp)
   120c4:	01400304 	movi	r5,12
   120c8:	1009883a 	mov	r4,r2
   120cc:	000cffc0 	call	cffc <__mulsi3>
   120d0:	8085883a 	add	r2,r16,r2
   120d4:	e0fffe17 	ldw	r3,-8(fp)
   120d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   120dc:	d0e00b17 	ldw	r3,-32724(gp)
   120e0:	e0bffc17 	ldw	r2,-16(fp)
   120e4:	1880020e 	bge	r3,r2,120f0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   120e8:	e0bffc17 	ldw	r2,-16(fp)
   120ec:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   120f0:	e0bffc17 	ldw	r2,-16(fp)
   120f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   120f8:	00000606 	br	12114 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   120fc:	e0bffc17 	ldw	r2,-16(fp)
   12100:	10800044 	addi	r2,r2,1
   12104:	e0bffc15 	stw	r2,-16(fp)
   12108:	e0bffc17 	ldw	r2,-16(fp)
   1210c:	10800810 	cmplti	r2,r2,32
   12110:	103fe01e 	bne	r2,zero,12094 <__alt_exception_stack_pointer+0xf8012094>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12114:	e0bffd17 	ldw	r2,-12(fp)
}
   12118:	e6ffff04 	addi	sp,fp,-4
   1211c:	dfc00217 	ldw	ra,8(sp)
   12120:	df000117 	ldw	fp,4(sp)
   12124:	dc000017 	ldw	r16,0(sp)
   12128:	dec00304 	addi	sp,sp,12
   1212c:	f800283a 	ret

00012130 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12130:	defffe04 	addi	sp,sp,-8
   12134:	df000115 	stw	fp,4(sp)
   12138:	df000104 	addi	fp,sp,4
   1213c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12140:	e0bfff17 	ldw	r2,-4(fp)
   12144:	10bffe84 	addi	r2,r2,-6
   12148:	10c00428 	cmpgeui	r3,r2,16
   1214c:	18001a1e 	bne	r3,zero,121b8 <alt_exception_cause_generated_bad_addr+0x88>
   12150:	100690ba 	slli	r3,r2,2
   12154:	00800074 	movhi	r2,1
   12158:	10885a04 	addi	r2,r2,8552
   1215c:	1885883a 	add	r2,r3,r2
   12160:	10800017 	ldw	r2,0(r2)
   12164:	1000683a 	jmp	r2
   12168:	000121a8 	cmpgeui	zero,zero,1158
   1216c:	000121a8 	cmpgeui	zero,zero,1158
   12170:	000121b8 	rdprs	zero,zero,1158
   12174:	000121b8 	rdprs	zero,zero,1158
   12178:	000121b8 	rdprs	zero,zero,1158
   1217c:	000121a8 	cmpgeui	zero,zero,1158
   12180:	000121b0 	cmpltui	zero,zero,1158
   12184:	000121b8 	rdprs	zero,zero,1158
   12188:	000121a8 	cmpgeui	zero,zero,1158
   1218c:	000121a8 	cmpgeui	zero,zero,1158
   12190:	000121b8 	rdprs	zero,zero,1158
   12194:	000121a8 	cmpgeui	zero,zero,1158
   12198:	000121b0 	cmpltui	zero,zero,1158
   1219c:	000121b8 	rdprs	zero,zero,1158
   121a0:	000121b8 	rdprs	zero,zero,1158
   121a4:	000121a8 	cmpgeui	zero,zero,1158
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   121a8:	00800044 	movi	r2,1
   121ac:	00000306 	br	121bc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   121b0:	0005883a 	mov	r2,zero
   121b4:	00000106 	br	121bc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   121b8:	0005883a 	mov	r2,zero
  }
}
   121bc:	e037883a 	mov	sp,fp
   121c0:	df000017 	ldw	fp,0(sp)
   121c4:	dec00104 	addi	sp,sp,4
   121c8:	f800283a 	ret

000121cc <atexit>:
   121cc:	200b883a 	mov	r5,r4
   121d0:	000f883a 	mov	r7,zero
   121d4:	000d883a 	mov	r6,zero
   121d8:	0009883a 	mov	r4,zero
   121dc:	00122941 	jmpi	12294 <__register_exitproc>

000121e0 <exit>:
   121e0:	defffe04 	addi	sp,sp,-8
   121e4:	000b883a 	mov	r5,zero
   121e8:	dc000015 	stw	r16,0(sp)
   121ec:	dfc00115 	stw	ra,4(sp)
   121f0:	2021883a 	mov	r16,r4
   121f4:	00123ac0 	call	123ac <__call_exitprocs>
   121f8:	00800074 	movhi	r2,1
   121fc:	10930304 	addi	r2,r2,19468
   12200:	11000017 	ldw	r4,0(r2)
   12204:	20800f17 	ldw	r2,60(r4)
   12208:	10000126 	beq	r2,zero,12210 <exit+0x30>
   1220c:	103ee83a 	callr	r2
   12210:	8009883a 	mov	r4,r16
   12214:	001252c0 	call	1252c <_exit>

00012218 <memcmp>:
   12218:	01c000c4 	movi	r7,3
   1221c:	3980192e 	bgeu	r7,r6,12284 <memcmp+0x6c>
   12220:	2144b03a 	or	r2,r4,r5
   12224:	11c4703a 	and	r2,r2,r7
   12228:	10000f26 	beq	r2,zero,12268 <memcmp+0x50>
   1222c:	20800003 	ldbu	r2,0(r4)
   12230:	28c00003 	ldbu	r3,0(r5)
   12234:	10c0151e 	bne	r2,r3,1228c <memcmp+0x74>
   12238:	31bfff84 	addi	r6,r6,-2
   1223c:	01ffffc4 	movi	r7,-1
   12240:	00000406 	br	12254 <memcmp+0x3c>
   12244:	20800003 	ldbu	r2,0(r4)
   12248:	28c00003 	ldbu	r3,0(r5)
   1224c:	31bfffc4 	addi	r6,r6,-1
   12250:	10c00e1e 	bne	r2,r3,1228c <memcmp+0x74>
   12254:	21000044 	addi	r4,r4,1
   12258:	29400044 	addi	r5,r5,1
   1225c:	31fff91e 	bne	r6,r7,12244 <__alt_exception_stack_pointer+0xf8012244>
   12260:	0005883a 	mov	r2,zero
   12264:	f800283a 	ret
   12268:	20c00017 	ldw	r3,0(r4)
   1226c:	28800017 	ldw	r2,0(r5)
   12270:	18bfee1e 	bne	r3,r2,1222c <__alt_exception_stack_pointer+0xf801222c>
   12274:	31bfff04 	addi	r6,r6,-4
   12278:	21000104 	addi	r4,r4,4
   1227c:	29400104 	addi	r5,r5,4
   12280:	39bff936 	bltu	r7,r6,12268 <__alt_exception_stack_pointer+0xf8012268>
   12284:	303fe91e 	bne	r6,zero,1222c <__alt_exception_stack_pointer+0xf801222c>
   12288:	003ff506 	br	12260 <__alt_exception_stack_pointer+0xf8012260>
   1228c:	10c5c83a 	sub	r2,r2,r3
   12290:	f800283a 	ret

00012294 <__register_exitproc>:
   12294:	defffa04 	addi	sp,sp,-24
   12298:	dc000315 	stw	r16,12(sp)
   1229c:	04000074 	movhi	r16,1
   122a0:	84130304 	addi	r16,r16,19468
   122a4:	80c00017 	ldw	r3,0(r16)
   122a8:	dc400415 	stw	r17,16(sp)
   122ac:	dfc00515 	stw	ra,20(sp)
   122b0:	18805217 	ldw	r2,328(r3)
   122b4:	2023883a 	mov	r17,r4
   122b8:	10003726 	beq	r2,zero,12398 <__register_exitproc+0x104>
   122bc:	10c00117 	ldw	r3,4(r2)
   122c0:	010007c4 	movi	r4,31
   122c4:	20c00e16 	blt	r4,r3,12300 <__register_exitproc+0x6c>
   122c8:	1a000044 	addi	r8,r3,1
   122cc:	8800221e 	bne	r17,zero,12358 <__register_exitproc+0xc4>
   122d0:	18c00084 	addi	r3,r3,2
   122d4:	18c7883a 	add	r3,r3,r3
   122d8:	18c7883a 	add	r3,r3,r3
   122dc:	12000115 	stw	r8,4(r2)
   122e0:	10c7883a 	add	r3,r2,r3
   122e4:	19400015 	stw	r5,0(r3)
   122e8:	0005883a 	mov	r2,zero
   122ec:	dfc00517 	ldw	ra,20(sp)
   122f0:	dc400417 	ldw	r17,16(sp)
   122f4:	dc000317 	ldw	r16,12(sp)
   122f8:	dec00604 	addi	sp,sp,24
   122fc:	f800283a 	ret
   12300:	00800034 	movhi	r2,0
   12304:	108a5604 	addi	r2,r2,10584
   12308:	10002626 	beq	r2,zero,123a4 <__register_exitproc+0x110>
   1230c:	01006404 	movi	r4,400
   12310:	d9400015 	stw	r5,0(sp)
   12314:	d9800115 	stw	r6,4(sp)
   12318:	d9c00215 	stw	r7,8(sp)
   1231c:	00029580 	call	2958 <malloc>
   12320:	d9400017 	ldw	r5,0(sp)
   12324:	d9800117 	ldw	r6,4(sp)
   12328:	d9c00217 	ldw	r7,8(sp)
   1232c:	10001d26 	beq	r2,zero,123a4 <__register_exitproc+0x110>
   12330:	81000017 	ldw	r4,0(r16)
   12334:	10000115 	stw	zero,4(r2)
   12338:	02000044 	movi	r8,1
   1233c:	22405217 	ldw	r9,328(r4)
   12340:	0007883a 	mov	r3,zero
   12344:	12400015 	stw	r9,0(r2)
   12348:	20805215 	stw	r2,328(r4)
   1234c:	10006215 	stw	zero,392(r2)
   12350:	10006315 	stw	zero,396(r2)
   12354:	883fde26 	beq	r17,zero,122d0 <__alt_exception_stack_pointer+0xf80122d0>
   12358:	18c9883a 	add	r4,r3,r3
   1235c:	2109883a 	add	r4,r4,r4
   12360:	1109883a 	add	r4,r2,r4
   12364:	21802215 	stw	r6,136(r4)
   12368:	01800044 	movi	r6,1
   1236c:	12406217 	ldw	r9,392(r2)
   12370:	30cc983a 	sll	r6,r6,r3
   12374:	4992b03a 	or	r9,r9,r6
   12378:	12406215 	stw	r9,392(r2)
   1237c:	21c04215 	stw	r7,264(r4)
   12380:	01000084 	movi	r4,2
   12384:	893fd21e 	bne	r17,r4,122d0 <__alt_exception_stack_pointer+0xf80122d0>
   12388:	11006317 	ldw	r4,396(r2)
   1238c:	218cb03a 	or	r6,r4,r6
   12390:	11806315 	stw	r6,396(r2)
   12394:	003fce06 	br	122d0 <__alt_exception_stack_pointer+0xf80122d0>
   12398:	18805304 	addi	r2,r3,332
   1239c:	18805215 	stw	r2,328(r3)
   123a0:	003fc606 	br	122bc <__alt_exception_stack_pointer+0xf80122bc>
   123a4:	00bfffc4 	movi	r2,-1
   123a8:	003fd006 	br	122ec <__alt_exception_stack_pointer+0xf80122ec>

000123ac <__call_exitprocs>:
   123ac:	defff504 	addi	sp,sp,-44
   123b0:	df000915 	stw	fp,36(sp)
   123b4:	dd400615 	stw	r21,24(sp)
   123b8:	dc800315 	stw	r18,12(sp)
   123bc:	dfc00a15 	stw	ra,40(sp)
   123c0:	ddc00815 	stw	r23,32(sp)
   123c4:	dd800715 	stw	r22,28(sp)
   123c8:	dd000515 	stw	r20,20(sp)
   123cc:	dcc00415 	stw	r19,16(sp)
   123d0:	dc400215 	stw	r17,8(sp)
   123d4:	dc000115 	stw	r16,4(sp)
   123d8:	d9000015 	stw	r4,0(sp)
   123dc:	2839883a 	mov	fp,r5
   123e0:	04800044 	movi	r18,1
   123e4:	057fffc4 	movi	r21,-1
   123e8:	00800074 	movhi	r2,1
   123ec:	10930304 	addi	r2,r2,19468
   123f0:	12000017 	ldw	r8,0(r2)
   123f4:	45005217 	ldw	r20,328(r8)
   123f8:	44c05204 	addi	r19,r8,328
   123fc:	a0001c26 	beq	r20,zero,12470 <__call_exitprocs+0xc4>
   12400:	a0800117 	ldw	r2,4(r20)
   12404:	15ffffc4 	addi	r23,r2,-1
   12408:	b8000d16 	blt	r23,zero,12440 <__call_exitprocs+0x94>
   1240c:	14000044 	addi	r16,r2,1
   12410:	8421883a 	add	r16,r16,r16
   12414:	8421883a 	add	r16,r16,r16
   12418:	84402004 	addi	r17,r16,128
   1241c:	a463883a 	add	r17,r20,r17
   12420:	a421883a 	add	r16,r20,r16
   12424:	e0001e26 	beq	fp,zero,124a0 <__call_exitprocs+0xf4>
   12428:	80804017 	ldw	r2,256(r16)
   1242c:	e0801c26 	beq	fp,r2,124a0 <__call_exitprocs+0xf4>
   12430:	bdffffc4 	addi	r23,r23,-1
   12434:	843fff04 	addi	r16,r16,-4
   12438:	8c7fff04 	addi	r17,r17,-4
   1243c:	bd7ff91e 	bne	r23,r21,12424 <__alt_exception_stack_pointer+0xf8012424>
   12440:	00800034 	movhi	r2,0
   12444:	108a5b04 	addi	r2,r2,10604
   12448:	10000926 	beq	r2,zero,12470 <__call_exitprocs+0xc4>
   1244c:	a0800117 	ldw	r2,4(r20)
   12450:	1000301e 	bne	r2,zero,12514 <__call_exitprocs+0x168>
   12454:	a0800017 	ldw	r2,0(r20)
   12458:	10003226 	beq	r2,zero,12524 <__call_exitprocs+0x178>
   1245c:	a009883a 	mov	r4,r20
   12460:	98800015 	stw	r2,0(r19)
   12464:	000296c0 	call	296c <free>
   12468:	9d000017 	ldw	r20,0(r19)
   1246c:	a03fe41e 	bne	r20,zero,12400 <__alt_exception_stack_pointer+0xf8012400>
   12470:	dfc00a17 	ldw	ra,40(sp)
   12474:	df000917 	ldw	fp,36(sp)
   12478:	ddc00817 	ldw	r23,32(sp)
   1247c:	dd800717 	ldw	r22,28(sp)
   12480:	dd400617 	ldw	r21,24(sp)
   12484:	dd000517 	ldw	r20,20(sp)
   12488:	dcc00417 	ldw	r19,16(sp)
   1248c:	dc800317 	ldw	r18,12(sp)
   12490:	dc400217 	ldw	r17,8(sp)
   12494:	dc000117 	ldw	r16,4(sp)
   12498:	dec00b04 	addi	sp,sp,44
   1249c:	f800283a 	ret
   124a0:	a0800117 	ldw	r2,4(r20)
   124a4:	80c00017 	ldw	r3,0(r16)
   124a8:	10bfffc4 	addi	r2,r2,-1
   124ac:	15c01426 	beq	r2,r23,12500 <__call_exitprocs+0x154>
   124b0:	80000015 	stw	zero,0(r16)
   124b4:	183fde26 	beq	r3,zero,12430 <__alt_exception_stack_pointer+0xf8012430>
   124b8:	95c8983a 	sll	r4,r18,r23
   124bc:	a0806217 	ldw	r2,392(r20)
   124c0:	a5800117 	ldw	r22,4(r20)
   124c4:	2084703a 	and	r2,r4,r2
   124c8:	10000b26 	beq	r2,zero,124f8 <__call_exitprocs+0x14c>
   124cc:	a0806317 	ldw	r2,396(r20)
   124d0:	2088703a 	and	r4,r4,r2
   124d4:	20000c1e 	bne	r4,zero,12508 <__call_exitprocs+0x15c>
   124d8:	89400017 	ldw	r5,0(r17)
   124dc:	d9000017 	ldw	r4,0(sp)
   124e0:	183ee83a 	callr	r3
   124e4:	a0800117 	ldw	r2,4(r20)
   124e8:	15bfbf1e 	bne	r2,r22,123e8 <__alt_exception_stack_pointer+0xf80123e8>
   124ec:	98800017 	ldw	r2,0(r19)
   124f0:	153fcf26 	beq	r2,r20,12430 <__alt_exception_stack_pointer+0xf8012430>
   124f4:	003fbc06 	br	123e8 <__alt_exception_stack_pointer+0xf80123e8>
   124f8:	183ee83a 	callr	r3
   124fc:	003ff906 	br	124e4 <__alt_exception_stack_pointer+0xf80124e4>
   12500:	a5c00115 	stw	r23,4(r20)
   12504:	003feb06 	br	124b4 <__alt_exception_stack_pointer+0xf80124b4>
   12508:	89000017 	ldw	r4,0(r17)
   1250c:	183ee83a 	callr	r3
   12510:	003ff406 	br	124e4 <__alt_exception_stack_pointer+0xf80124e4>
   12514:	a0800017 	ldw	r2,0(r20)
   12518:	a027883a 	mov	r19,r20
   1251c:	1029883a 	mov	r20,r2
   12520:	003fb606 	br	123fc <__alt_exception_stack_pointer+0xf80123fc>
   12524:	0005883a 	mov	r2,zero
   12528:	003ffb06 	br	12518 <__alt_exception_stack_pointer+0xf8012518>

0001252c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1252c:	defffd04 	addi	sp,sp,-12
   12530:	df000215 	stw	fp,8(sp)
   12534:	df000204 	addi	fp,sp,8
   12538:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1253c:	0001883a 	nop
   12540:	e0bfff17 	ldw	r2,-4(fp)
   12544:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12548:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1254c:	10000226 	beq	r2,zero,12558 <_exit+0x2c>
    ALT_SIM_FAIL();
   12550:	002af070 	cmpltui	zero,zero,43969
   12554:	00000106 	br	1255c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12558:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1255c:	003fff06 	br	1255c <__alt_exception_stack_pointer+0xf801255c>
