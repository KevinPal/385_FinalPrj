
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003e4c memsz 0x00003e4c flags r-x
    LOAD off    0x00004e6c vaddr 0x00003e6c paddr 0x000059c0 align 2**12
         filesz 0x00001b54 memsz 0x00001b54 flags rw-
    LOAD off    0x00007514 vaddr 0x00007514 paddr 0x00007514 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c00  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00003e3c  00003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00003e6c  000059c0  00004e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00007514  00007514  00007514  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00007668  00007668  000069c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000688  00000000  00000000  000069e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b2ca  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036b0  00000000  00000000  0001233a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003838  00000000  00000000  000159ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e10  00000000  00000000  00019224  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002299  00000000  00000000  0001a034  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d83  00000000  00000000  0001c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001e050  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0001e060  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020233  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY
 26 .jdi          00004eb9  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00057f64  00000000  00000000  0002512a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00003e3c l    d  .rodata	00000000 .rodata
00003e6c l    d  .rwdata	00000000 .rwdata
00007514 l    d  .bss	00000000 .bss
00007668 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00004274 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000013d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000598c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001614 l     F .text	00000034 alt_dev_reg
00004698 l     O .rwdata	000000a4 dma_0_priv
0000473c l     O .rwdata	0000001c dma_0_tx
00004758 l     O .rwdata	0000001c dma_0_rx
00004774 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
000016f0 l     F .text	00000034 alt_dma_txchan_reg
00001724 l     F .text	00000034 alt_dma_rxchan_reg
00001850 l     F .text	0000009c alt_avalon_dma_launch_txonly
000018ec l     F .text	0000009c alt_avalon_dma_launch_rxonly
00001988 l     F .text	00000344 alt_avalon_dma_ioctl
00002040 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000024d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000026e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002e48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002f7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00003088 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00003118 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000753c g     O .bss	00000004 alt_instruction_exception_handler
000014bc g     F .text	00000060 alt_main
00007568 g     O .bss	00000100 alt_irq
000059c0 g       *ABS*	00000000 __flash_rwdata_start
00007668 g       *ABS*	00000000 __alt_heap_start
00002200 g     F .text	000000b4 alt_avalon_dma_init
00001540 g     F .text	00000024 __malloc_unlock
000037e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007520 g     O .bss	00000004 errno
00007528 g     O .bss	00000004 alt_argv
0000d97c g       *ABS*	00000000 _gp
00003154 g     F .text	00000054 alt_dma_txchan_open
000057fc g     O .rwdata	00000180 alt_fd_list
00003268 g     F .text	00000090 alt_find_dev
00003968 g     F .text	00000148 memcpy
00003e3c g       *ABS*	00000000 __DTOR_END__
00003804 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000028dc g     F .text	0000021c altera_avalon_jtag_uart_read
00000714 g     F .text	00000014 malloc
00000658 g     F .text	00000064 .hidden __udivsi3
0000751c g     O .bss	00000004 __malloc_top_pad
00000f48 g     F .text	00000054 _sbrk_r
000059a0 g     O .rwdata	00000004 alt_max_fd
00007518 g     O .bss	00000004 __malloc_max_sbrked_mem
00001758 g     F .text	000000f8 alt_avalon_dma_launch_bidir
000030c4 g     F .text	00000054 alt_dma_rxchan_open
00005984 g     O .rwdata	00000004 _global_impure_ptr
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00007668 g       *ABS*	00000000 __bss_end
000034c8 g     F .text	000000f0 alt_iic_isr_register
000036d8 g     F .text	00000108 alt_tick
0000347c g     F .text	0000004c alt_ic_irq_enabled
0000363c g     F .text	0000009c alt_alarm_stop
00007530 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
000057d4 g     O .rwdata	00000028 alt_dev_null
00002f5c g     F .text	00000020 alt_dcache_flush_all
000059c0 g       *ABS*	00000000 __ram_rwdata_end
00005998 g     O .rwdata	00000008 alt_dev_list
00001e94 g     F .text	00000074 alt_avalon_dma_space
00003e6c g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000006bc g     F .text	00000058 .hidden __umodsi3
00007668 g       *ABS*	00000000 end
00002418 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00003e3c g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
00002af8 g     F .text	00000224 altera_avalon_jtag_uart_write
000010c0 g     F .text	00000310 _free_r
00001f08 g     F .text	00000138 alt_avalon_dma_send
00003c60 g     F .text	00000180 __call_exitprocs
000059ac g     O .rwdata	00000008 alt_dma_txchan_list
0000597c g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00007534 g     O .bss	00000004 _alt_tick_rate
00007538 g     O .bss	00000004 _alt_nticks
00001680 g     F .text	00000070 alt_sys_init
00003b48 g     F .text	00000118 __register_exitproc
00002784 g     F .text	00000068 altera_avalon_jtag_uart_close
00003de0 g     F .text	00000028 .hidden __mulsi3
00003e6c g       *ABS*	00000000 __ram_rwdata_start
00003e3c g       *ABS*	00000000 __ram_rodata_start
00007540 g     O .bss	00000028 __malloc_current_mallinfo
000022b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000038ec g     F .text	0000007c memcmp
00002374 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007668 g       *ABS*	00000000 __alt_stack_base
000023c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003e6c g     O .rwdata	00000408 __malloc_av_
00002fe4 g     F .text	000000a4 alt_dev_llist_insert
0000151c g     F .text	00000024 __malloc_lock
00001564 g     F .text	000000b0 sbrk
00007514 g       *ABS*	00000000 __bss_start
00000278 g     F .text	000002e8 main
00001d14 g     F .text	00000048 alt_avalon_dma_rx_ioctl
0000752c g     O .bss	00000004 alt_envp
00007514 g     O .bss	00000004 __malloc_max_total_mem
00002314 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
07fffc00 g       *ABS*	00000000 __alt_heap_limit
0000073c g     F .text	0000080c _malloc_r
000059b4 g     O .rwdata	00000004 alt_errno
00000560 g     F .text	00000084 .hidden __divsi3
00000f9c g     F .text	00000124 _malloc_trim_r
00003e3c g       *ABS*	00000000 __CTOR_END__
00003e3c g       *ABS*	00000000 __flash_rodata_start
00003e3c g       *ABS*	00000000 __DTOR_LIST__
00001648 g     F .text	00000038 alt_irq_init
000035b8 g     F .text	00000084 alt_release_fd
000038a0 g     F .text	00000014 atexit
00005988 g     O .rwdata	00000004 _impure_ptr
00007524 g     O .bss	00000004 alt_argc
00003208 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005990 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003318 g     F .text	00000050 alt_ic_isr_register
000059c0 g       *ABS*	00000000 _edata
00007668 g       *ABS*	00000000 _end
0000023c g       *ABS*	00000000 __ram_exceptions_end
000027ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000033f0 g     F .text	0000008c alt_ic_irq_disable
00005980 g     O .rwdata	00000004 __malloc_trim_threshold
000038b4 g     F .text	00000038 exit
000005e4 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003e08 g     F .text	00000034 _exit
00002d1c g     F .text	0000012c alt_alarm_start
00003ab0 g     F .text	00000098 strlen
000032f8 g     F .text	00000020 alt_icache_flush_all
00003368 g     F .text	00000088 alt_ic_irq_enable
00001d5c g     F .text	00000138 alt_avalon_dma_prepare
000059a4 g     O .rwdata	00000008 alt_dma_rxchan_list
000059b8 g     O .rwdata	00000008 alt_alarm_list
000031a8 g     F .text	00000060 _do_ctors
00002e84 g     F .text	000000d8 close
00001438 g     F .text	00000084 alt_load
00001ccc g     F .text	00000048 alt_avalon_dma_tx_ioctl
00000728 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800034 	movhi	r2,0
 14c:	109d5a04 	addi	r2,r2,30056
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800034 	movhi	r2,0
 164:	109d5a04 	addi	r2,r2,30056
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6f017 	ldw	r2,-25664(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6f017 	ldw	r2,-25664(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     248:	d6b65f14 	ori	gp,gp,55676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     250:	109d4514 	ori	r2,r2,29972

    movhi r3, %hi(__bss_end)
     254:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     258:	18dd9a14 	ori	r3,r3,30312

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00014380 	call	1438 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00014bc0 	call	14bc <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <main>:
#include <stdlib.h>



int main()
{
     278:	defff804 	addi	sp,sp,-32
     27c:	dfc00715 	stw	ra,28(sp)
     280:	df000615 	stw	fp,24(sp)
     284:	dc000515 	stw	r16,20(sp)
     288:	df000604 	addi	fp,sp,24
	int i = 0;
     28c:	e03ffa15 	stw	zero,-24(fp)
	int height = 0;
     290:	e03ffb15 	stw	zero,-20(fp)

	volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
     294:	00820034 	movhi	r2,2048
     298:	10840004 	addi	r2,r2,4096
     29c:	e0bffd15 	stw	r2,-12(fp)

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
     2a0:	01000334 	movhi	r4,12
     2a4:	21138004 	addi	r4,r4,19968
     2a8:	00007140 	call	714 <malloc>
     2ac:	e0bffe15 	stw	r2,-8(fp)

	for(i = 0; i < SCREEN_WIDTH * SCREEN_HEIGHT; i++) {
     2b0:	e03ffa15 	stw	zero,-24(fp)
     2b4:	00002406 	br	348 <main+0xd0>
		frame1->D1[i*3+0] = i % SCREEN_WIDTH;
     2b8:	e0fffa17 	ldw	r3,-24(fp)
     2bc:	1805883a 	mov	r2,r3
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	10e1883a 	add	r16,r2,r3
     2c8:	e0bffa17 	ldw	r2,-24(fp)
     2cc:	0140a004 	movi	r5,640
     2d0:	1009883a 	mov	r4,r2
     2d4:	00005e40 	call	5e4 <__modsi3>
     2d8:	1007883a 	mov	r3,r2
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	1405883a 	add	r2,r2,r16
     2e4:	10c00005 	stb	r3,0(r2)
		frame1->D1[i*3+1] = i % SCREEN_HEIGHT;
     2e8:	e0fffa17 	ldw	r3,-24(fp)
     2ec:	1805883a 	mov	r2,r3
     2f0:	1085883a 	add	r2,r2,r2
     2f4:	10c5883a 	add	r2,r2,r3
     2f8:	14000044 	addi	r16,r2,1
     2fc:	e0bffa17 	ldw	r2,-24(fp)
     300:	01407804 	movi	r5,480
     304:	1009883a 	mov	r4,r2
     308:	00005e40 	call	5e4 <__modsi3>
     30c:	1007883a 	mov	r3,r2
     310:	e0bffe17 	ldw	r2,-8(fp)
     314:	1405883a 	add	r2,r2,r16
     318:	10c00005 	stb	r3,0(r2)
		frame1->D1[i*3+2] = 0;
     31c:	e0fffa17 	ldw	r3,-24(fp)
     320:	1805883a 	mov	r2,r3
     324:	1085883a 	add	r2,r2,r2
     328:	10c5883a 	add	r2,r2,r3
     32c:	10800084 	addi	r2,r2,2
     330:	e0fffe17 	ldw	r3,-8(fp)
     334:	1885883a 	add	r2,r3,r2
     338:	10000005 	stb	zero,0(r2)

	volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));

	for(i = 0; i < SCREEN_WIDTH * SCREEN_HEIGHT; i++) {
     33c:	e0bffa17 	ldw	r2,-24(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bffa15 	stw	r2,-24(fp)
     348:	e0fffa17 	ldw	r3,-24(fp)
     34c:	00800174 	movhi	r2,5
     350:	10abffc4 	addi	r2,r2,-20481
     354:	10ffd80e 	bge	r2,r3,2b8 <__alt_exception_stack_pointer+0xf80002b8>
		frame1->D1[i*3+0] = i % SCREEN_WIDTH;
		frame1->D1[i*3+1] = i % SCREEN_HEIGHT;
		frame1->D1[i*3+2] = 0;
	}
	int draw_index = 0;
     358:	e03ffc15 	stw	zero,-16(fp)
    while(1) {
    	if(draw_index >= 480*640*3) {
     35c:	e0fffc17 	ldw	r3,-16(fp)
     360:	008003b4 	movhi	r2,14
     364:	1083ffc4 	addi	r2,r2,4095
     368:	10c0010e 	bge	r2,r3,370 <main+0xf8>
    		draw_index = 0;
     36c:	e03ffc15 	stw	zero,-16(fp)
    	}
        if(vga_cont->needs_write == 1) {
     370:	e0bffd17 	ldw	r2,-12(fp)
     374:	1081e043 	ldbu	r2,1921(r2)
     378:	10803fcc 	andi	r2,r2,255
     37c:	1080201c 	xori	r2,r2,128
     380:	10bfe004 	addi	r2,r2,-128
     384:	10800058 	cmpnei	r2,r2,1
     388:	103ff41e 	bne	r2,zero,35c <__alt_exception_stack_pointer+0xf800035c>
            if(vga_cont->rendering_frame == 0) {
     38c:	e0bffd17 	ldw	r2,-12(fp)
     390:	1081e003 	ldbu	r2,1920(r2)
     394:	10803fcc 	andi	r2,r2,255
     398:	1080201c 	xori	r2,r2,128
     39c:	10bfe004 	addi	r2,r2,-128
     3a0:	1000351e 	bne	r2,zero,478 <main+0x200>
            	//clock_t start = clock();
                for(i = 0; i < SCREEN_WIDTH; i++) {
     3a4:	e03ffa15 	stw	zero,-24(fp)
     3a8:	00002f06 	br	468 <main+0x1f0>
                    vga_cont->line2[i*3+0] = frame1->D1[draw_index++];
     3ac:	e0fffa17 	ldw	r3,-24(fp)
     3b0:	1805883a 	mov	r2,r3
     3b4:	1085883a 	add	r2,r2,r2
     3b8:	10c9883a 	add	r4,r2,r3
     3bc:	e0bffc17 	ldw	r2,-16(fp)
     3c0:	10c00044 	addi	r3,r2,1
     3c4:	e0fffc15 	stw	r3,-16(fp)
     3c8:	e0fffe17 	ldw	r3,-8(fp)
     3cc:	1885883a 	add	r2,r3,r2
     3d0:	10c00003 	ldbu	r3,0(r2)
     3d4:	e0bffd17 	ldw	r2,-12(fp)
     3d8:	1105883a 	add	r2,r2,r4
     3dc:	10820004 	addi	r2,r2,2048
     3e0:	10c00005 	stb	r3,0(r2)
                    vga_cont->line2[i*3+1] = frame1->D1[draw_index++];
     3e4:	e0fffa17 	ldw	r3,-24(fp)
     3e8:	1805883a 	mov	r2,r3
     3ec:	1085883a 	add	r2,r2,r2
     3f0:	10c5883a 	add	r2,r2,r3
     3f4:	11000044 	addi	r4,r2,1
     3f8:	e0bffc17 	ldw	r2,-16(fp)
     3fc:	10c00044 	addi	r3,r2,1
     400:	e0fffc15 	stw	r3,-16(fp)
     404:	e0fffe17 	ldw	r3,-8(fp)
     408:	1885883a 	add	r2,r3,r2
     40c:	10c00003 	ldbu	r3,0(r2)
     410:	e0bffd17 	ldw	r2,-12(fp)
     414:	1105883a 	add	r2,r2,r4
     418:	10820004 	addi	r2,r2,2048
     41c:	10c00005 	stb	r3,0(r2)
                    vga_cont->line2[i*3+2] = frame1->D1[draw_index++];
     420:	e0fffa17 	ldw	r3,-24(fp)
     424:	1805883a 	mov	r2,r3
     428:	1085883a 	add	r2,r2,r2
     42c:	10c5883a 	add	r2,r2,r3
     430:	11000084 	addi	r4,r2,2
     434:	e0bffc17 	ldw	r2,-16(fp)
     438:	10c00044 	addi	r3,r2,1
     43c:	e0fffc15 	stw	r3,-16(fp)
     440:	e0fffe17 	ldw	r3,-8(fp)
     444:	1885883a 	add	r2,r3,r2
     448:	10c00003 	ldbu	r3,0(r2)
     44c:	e0bffd17 	ldw	r2,-12(fp)
     450:	1105883a 	add	r2,r2,r4
     454:	10820004 	addi	r2,r2,2048
     458:	10c00005 	stb	r3,0(r2)
    		draw_index = 0;
    	}
        if(vga_cont->needs_write == 1) {
            if(vga_cont->rendering_frame == 0) {
            	//clock_t start = clock();
                for(i = 0; i < SCREEN_WIDTH; i++) {
     45c:	e0bffa17 	ldw	r2,-24(fp)
     460:	10800044 	addi	r2,r2,1
     464:	e0bffa15 	stw	r2,-24(fp)
     468:	e0bffa17 	ldw	r2,-24(fp)
     46c:	1080a010 	cmplti	r2,r2,640
     470:	103fce1e 	bne	r2,zero,3ac <__alt_exception_stack_pointer+0xf80003ac>
     474:	00003106 	br	53c <main+0x2c4>
                //clock_t stop = clock();
        		//double time_spent = (double)(stop - start) / CLOCKS_PER_SEC;
        		//printf("%f\n", time_spent);
                //temp = 1;
            } else {
                for(i = 0; i < SCREEN_WIDTH; i++) {
     478:	e03ffa15 	stw	zero,-24(fp)
     47c:	00002c06 	br	530 <main+0x2b8>
                    vga_cont->line1[i*3+0] = frame1->D1[draw_index++];
     480:	e0fffa17 	ldw	r3,-24(fp)
     484:	1805883a 	mov	r2,r3
     488:	1085883a 	add	r2,r2,r2
     48c:	10c9883a 	add	r4,r2,r3
     490:	e0bffc17 	ldw	r2,-16(fp)
     494:	10c00044 	addi	r3,r2,1
     498:	e0fffc15 	stw	r3,-16(fp)
     49c:	e0fffe17 	ldw	r3,-8(fp)
     4a0:	1885883a 	add	r2,r3,r2
     4a4:	10c00003 	ldbu	r3,0(r2)
     4a8:	e0bffd17 	ldw	r2,-12(fp)
     4ac:	1105883a 	add	r2,r2,r4
     4b0:	10c00005 	stb	r3,0(r2)
                    vga_cont->line1[i*3+1] = frame1->D1[draw_index++];
     4b4:	e0fffa17 	ldw	r3,-24(fp)
     4b8:	1805883a 	mov	r2,r3
     4bc:	1085883a 	add	r2,r2,r2
     4c0:	10c5883a 	add	r2,r2,r3
     4c4:	11000044 	addi	r4,r2,1
     4c8:	e0bffc17 	ldw	r2,-16(fp)
     4cc:	10c00044 	addi	r3,r2,1
     4d0:	e0fffc15 	stw	r3,-16(fp)
     4d4:	e0fffe17 	ldw	r3,-8(fp)
     4d8:	1885883a 	add	r2,r3,r2
     4dc:	10c00003 	ldbu	r3,0(r2)
     4e0:	e0bffd17 	ldw	r2,-12(fp)
     4e4:	1105883a 	add	r2,r2,r4
     4e8:	10c00005 	stb	r3,0(r2)
                    vga_cont->line1[i*3+2] = frame1->D1[draw_index++];
     4ec:	e0fffa17 	ldw	r3,-24(fp)
     4f0:	1805883a 	mov	r2,r3
     4f4:	1085883a 	add	r2,r2,r2
     4f8:	10c5883a 	add	r2,r2,r3
     4fc:	11000084 	addi	r4,r2,2
     500:	e0bffc17 	ldw	r2,-16(fp)
     504:	10c00044 	addi	r3,r2,1
     508:	e0fffc15 	stw	r3,-16(fp)
     50c:	e0fffe17 	ldw	r3,-8(fp)
     510:	1885883a 	add	r2,r3,r2
     514:	10c00003 	ldbu	r3,0(r2)
     518:	e0bffd17 	ldw	r2,-12(fp)
     51c:	1105883a 	add	r2,r2,r4
     520:	10c00005 	stb	r3,0(r2)
                //clock_t stop = clock();
        		//double time_spent = (double)(stop - start) / CLOCKS_PER_SEC;
        		//printf("%f\n", time_spent);
                //temp = 1;
            } else {
                for(i = 0; i < SCREEN_WIDTH; i++) {
     524:	e0bffa17 	ldw	r2,-24(fp)
     528:	10800044 	addi	r2,r2,1
     52c:	e0bffa15 	stw	r2,-24(fp)
     530:	e0bffa17 	ldw	r2,-24(fp)
     534:	1080a010 	cmplti	r2,r2,640
     538:	103fd11e 	bne	r2,zero,480 <__alt_exception_stack_pointer+0xf8000480>
                    vga_cont->line1[i*3+1] = frame1->D1[draw_index++];
                    vga_cont->line1[i*3+2] = frame1->D1[draw_index++];
                }
                //temp = 0;
            }
            height = (height + 1) % SCREEN_HEIGHT;
     53c:	e0bffb17 	ldw	r2,-20(fp)
     540:	10800044 	addi	r2,r2,1
     544:	01407804 	movi	r5,480
     548:	1009883a 	mov	r4,r2
     54c:	00005e40 	call	5e4 <__modsi3>
     550:	e0bffb15 	stw	r2,-20(fp)
            vga_cont->needs_write = 0;
     554:	e0bffd17 	ldw	r2,-12(fp)
     558:	1001e045 	stb	zero,1921(r2)

        }
    }
     55c:	003f7f06 	br	35c <__alt_exception_stack_pointer+0xf800035c>

00000560 <__divsi3>:
     560:	20001b16 	blt	r4,zero,5d0 <__divsi3+0x70>
     564:	000f883a 	mov	r7,zero
     568:	28001616 	blt	r5,zero,5c4 <__divsi3+0x64>
     56c:	200d883a 	mov	r6,r4
     570:	29001a2e 	bgeu	r5,r4,5dc <__divsi3+0x7c>
     574:	00800804 	movi	r2,32
     578:	00c00044 	movi	r3,1
     57c:	00000106 	br	584 <__divsi3+0x24>
     580:	10000d26 	beq	r2,zero,5b8 <__divsi3+0x58>
     584:	294b883a 	add	r5,r5,r5
     588:	10bfffc4 	addi	r2,r2,-1
     58c:	18c7883a 	add	r3,r3,r3
     590:	293ffb36 	bltu	r5,r4,580 <__alt_exception_stack_pointer+0xf8000580>
     594:	0005883a 	mov	r2,zero
     598:	18000726 	beq	r3,zero,5b8 <__divsi3+0x58>
     59c:	0005883a 	mov	r2,zero
     5a0:	31400236 	bltu	r6,r5,5ac <__divsi3+0x4c>
     5a4:	314dc83a 	sub	r6,r6,r5
     5a8:	10c4b03a 	or	r2,r2,r3
     5ac:	1806d07a 	srli	r3,r3,1
     5b0:	280ad07a 	srli	r5,r5,1
     5b4:	183ffa1e 	bne	r3,zero,5a0 <__alt_exception_stack_pointer+0xf80005a0>
     5b8:	38000126 	beq	r7,zero,5c0 <__divsi3+0x60>
     5bc:	0085c83a 	sub	r2,zero,r2
     5c0:	f800283a 	ret
     5c4:	014bc83a 	sub	r5,zero,r5
     5c8:	39c0005c 	xori	r7,r7,1
     5cc:	003fe706 	br	56c <__alt_exception_stack_pointer+0xf800056c>
     5d0:	0109c83a 	sub	r4,zero,r4
     5d4:	01c00044 	movi	r7,1
     5d8:	003fe306 	br	568 <__alt_exception_stack_pointer+0xf8000568>
     5dc:	00c00044 	movi	r3,1
     5e0:	003fee06 	br	59c <__alt_exception_stack_pointer+0xf800059c>

000005e4 <__modsi3>:
     5e4:	20001716 	blt	r4,zero,644 <__modsi3+0x60>
     5e8:	000f883a 	mov	r7,zero
     5ec:	2005883a 	mov	r2,r4
     5f0:	28001216 	blt	r5,zero,63c <__modsi3+0x58>
     5f4:	2900162e 	bgeu	r5,r4,650 <__modsi3+0x6c>
     5f8:	01800804 	movi	r6,32
     5fc:	00c00044 	movi	r3,1
     600:	00000106 	br	608 <__modsi3+0x24>
     604:	30000a26 	beq	r6,zero,630 <__modsi3+0x4c>
     608:	294b883a 	add	r5,r5,r5
     60c:	31bfffc4 	addi	r6,r6,-1
     610:	18c7883a 	add	r3,r3,r3
     614:	293ffb36 	bltu	r5,r4,604 <__alt_exception_stack_pointer+0xf8000604>
     618:	18000526 	beq	r3,zero,630 <__modsi3+0x4c>
     61c:	1806d07a 	srli	r3,r3,1
     620:	11400136 	bltu	r2,r5,628 <__modsi3+0x44>
     624:	1145c83a 	sub	r2,r2,r5
     628:	280ad07a 	srli	r5,r5,1
     62c:	183ffb1e 	bne	r3,zero,61c <__alt_exception_stack_pointer+0xf800061c>
     630:	38000126 	beq	r7,zero,638 <__modsi3+0x54>
     634:	0085c83a 	sub	r2,zero,r2
     638:	f800283a 	ret
     63c:	014bc83a 	sub	r5,zero,r5
     640:	003fec06 	br	5f4 <__alt_exception_stack_pointer+0xf80005f4>
     644:	0109c83a 	sub	r4,zero,r4
     648:	01c00044 	movi	r7,1
     64c:	003fe706 	br	5ec <__alt_exception_stack_pointer+0xf80005ec>
     650:	00c00044 	movi	r3,1
     654:	003ff106 	br	61c <__alt_exception_stack_pointer+0xf800061c>

00000658 <__udivsi3>:
     658:	200d883a 	mov	r6,r4
     65c:	2900152e 	bgeu	r5,r4,6b4 <__udivsi3+0x5c>
     660:	28001416 	blt	r5,zero,6b4 <__udivsi3+0x5c>
     664:	00800804 	movi	r2,32
     668:	00c00044 	movi	r3,1
     66c:	00000206 	br	678 <__udivsi3+0x20>
     670:	10000e26 	beq	r2,zero,6ac <__udivsi3+0x54>
     674:	28000516 	blt	r5,zero,68c <__udivsi3+0x34>
     678:	294b883a 	add	r5,r5,r5
     67c:	10bfffc4 	addi	r2,r2,-1
     680:	18c7883a 	add	r3,r3,r3
     684:	293ffa36 	bltu	r5,r4,670 <__alt_exception_stack_pointer+0xf8000670>
     688:	18000826 	beq	r3,zero,6ac <__udivsi3+0x54>
     68c:	0005883a 	mov	r2,zero
     690:	31400236 	bltu	r6,r5,69c <__udivsi3+0x44>
     694:	314dc83a 	sub	r6,r6,r5
     698:	10c4b03a 	or	r2,r2,r3
     69c:	1806d07a 	srli	r3,r3,1
     6a0:	280ad07a 	srli	r5,r5,1
     6a4:	183ffa1e 	bne	r3,zero,690 <__alt_exception_stack_pointer+0xf8000690>
     6a8:	f800283a 	ret
     6ac:	0005883a 	mov	r2,zero
     6b0:	f800283a 	ret
     6b4:	00c00044 	movi	r3,1
     6b8:	003ff406 	br	68c <__alt_exception_stack_pointer+0xf800068c>

000006bc <__umodsi3>:
     6bc:	2005883a 	mov	r2,r4
     6c0:	2900122e 	bgeu	r5,r4,70c <__umodsi3+0x50>
     6c4:	28001116 	blt	r5,zero,70c <__umodsi3+0x50>
     6c8:	01800804 	movi	r6,32
     6cc:	00c00044 	movi	r3,1
     6d0:	00000206 	br	6dc <__umodsi3+0x20>
     6d4:	30000c26 	beq	r6,zero,708 <__umodsi3+0x4c>
     6d8:	28000516 	blt	r5,zero,6f0 <__umodsi3+0x34>
     6dc:	294b883a 	add	r5,r5,r5
     6e0:	31bfffc4 	addi	r6,r6,-1
     6e4:	18c7883a 	add	r3,r3,r3
     6e8:	293ffa36 	bltu	r5,r4,6d4 <__alt_exception_stack_pointer+0xf80006d4>
     6ec:	18000626 	beq	r3,zero,708 <__umodsi3+0x4c>
     6f0:	1806d07a 	srli	r3,r3,1
     6f4:	11400136 	bltu	r2,r5,6fc <__umodsi3+0x40>
     6f8:	1145c83a 	sub	r2,r2,r5
     6fc:	280ad07a 	srli	r5,r5,1
     700:	183ffb1e 	bne	r3,zero,6f0 <__alt_exception_stack_pointer+0xf80006f0>
     704:	f800283a 	ret
     708:	f800283a 	ret
     70c:	00c00044 	movi	r3,1
     710:	003ff706 	br	6f0 <__alt_exception_stack_pointer+0xf80006f0>

00000714 <malloc>:
     714:	00800034 	movhi	r2,0
     718:	10966204 	addi	r2,r2,22920
     71c:	200b883a 	mov	r5,r4
     720:	11000017 	ldw	r4,0(r2)
     724:	000073c1 	jmpi	73c <_malloc_r>

00000728 <free>:
     728:	00800034 	movhi	r2,0
     72c:	10966204 	addi	r2,r2,22920
     730:	200b883a 	mov	r5,r4
     734:	11000017 	ldw	r4,0(r2)
     738:	00010c01 	jmpi	10c0 <_free_r>

0000073c <_malloc_r>:
     73c:	defff504 	addi	sp,sp,-44
     740:	dc800315 	stw	r18,12(sp)
     744:	dfc00a15 	stw	ra,40(sp)
     748:	df000915 	stw	fp,36(sp)
     74c:	ddc00815 	stw	r23,32(sp)
     750:	dd800715 	stw	r22,28(sp)
     754:	dd400615 	stw	r21,24(sp)
     758:	dd000515 	stw	r20,20(sp)
     75c:	dcc00415 	stw	r19,16(sp)
     760:	dc400215 	stw	r17,8(sp)
     764:	dc000115 	stw	r16,4(sp)
     768:	288002c4 	addi	r2,r5,11
     76c:	00c00584 	movi	r3,22
     770:	2025883a 	mov	r18,r4
     774:	18807f2e 	bgeu	r3,r2,974 <_malloc_r+0x238>
     778:	047ffe04 	movi	r17,-8
     77c:	1462703a 	and	r17,r2,r17
     780:	8800a316 	blt	r17,zero,a10 <_malloc_r+0x2d4>
     784:	8940a236 	bltu	r17,r5,a10 <_malloc_r+0x2d4>
     788:	000151c0 	call	151c <__malloc_lock>
     78c:	00807dc4 	movi	r2,503
     790:	1441e92e 	bgeu	r2,r17,f38 <_malloc_r+0x7fc>
     794:	8804d27a 	srli	r2,r17,9
     798:	1000a126 	beq	r2,zero,a20 <_malloc_r+0x2e4>
     79c:	00c00104 	movi	r3,4
     7a0:	18811e36 	bltu	r3,r2,c1c <_malloc_r+0x4e0>
     7a4:	8804d1ba 	srli	r2,r17,6
     7a8:	12000e44 	addi	r8,r2,57
     7ac:	11c00e04 	addi	r7,r2,56
     7b0:	4209883a 	add	r4,r8,r8
     7b4:	04c00034 	movhi	r19,0
     7b8:	2109883a 	add	r4,r4,r4
     7bc:	9ccf9b04 	addi	r19,r19,15980
     7c0:	2109883a 	add	r4,r4,r4
     7c4:	9909883a 	add	r4,r19,r4
     7c8:	24000117 	ldw	r16,4(r4)
     7cc:	213ffe04 	addi	r4,r4,-8
     7d0:	24009726 	beq	r4,r16,a30 <_malloc_r+0x2f4>
     7d4:	80800117 	ldw	r2,4(r16)
     7d8:	01bfff04 	movi	r6,-4
     7dc:	014003c4 	movi	r5,15
     7e0:	1184703a 	and	r2,r2,r6
     7e4:	1447c83a 	sub	r3,r2,r17
     7e8:	28c00716 	blt	r5,r3,808 <_malloc_r+0xcc>
     7ec:	1800920e 	bge	r3,zero,a38 <_malloc_r+0x2fc>
     7f0:	84000317 	ldw	r16,12(r16)
     7f4:	24008e26 	beq	r4,r16,a30 <_malloc_r+0x2f4>
     7f8:	80800117 	ldw	r2,4(r16)
     7fc:	1184703a 	and	r2,r2,r6
     800:	1447c83a 	sub	r3,r2,r17
     804:	28fff90e 	bge	r5,r3,7ec <__alt_exception_stack_pointer+0xf80007ec>
     808:	3809883a 	mov	r4,r7
     80c:	01800034 	movhi	r6,0
     810:	9c000417 	ldw	r16,16(r19)
     814:	318f9b04 	addi	r6,r6,15980
     818:	32000204 	addi	r8,r6,8
     81c:	82013426 	beq	r16,r8,cf0 <_malloc_r+0x5b4>
     820:	80c00117 	ldw	r3,4(r16)
     824:	00bfff04 	movi	r2,-4
     828:	188e703a 	and	r7,r3,r2
     82c:	3c45c83a 	sub	r2,r7,r17
     830:	00c003c4 	movi	r3,15
     834:	18811f16 	blt	r3,r2,cb4 <_malloc_r+0x578>
     838:	32000515 	stw	r8,20(r6)
     83c:	32000415 	stw	r8,16(r6)
     840:	10007f0e 	bge	r2,zero,a40 <_malloc_r+0x304>
     844:	00807fc4 	movi	r2,511
     848:	11c0fd36 	bltu	r2,r7,c40 <_malloc_r+0x504>
     84c:	3806d0fa 	srli	r3,r7,3
     850:	01c00044 	movi	r7,1
     854:	30800117 	ldw	r2,4(r6)
     858:	19400044 	addi	r5,r3,1
     85c:	294b883a 	add	r5,r5,r5
     860:	1807d0ba 	srai	r3,r3,2
     864:	294b883a 	add	r5,r5,r5
     868:	294b883a 	add	r5,r5,r5
     86c:	298b883a 	add	r5,r5,r6
     870:	38c6983a 	sll	r3,r7,r3
     874:	29c00017 	ldw	r7,0(r5)
     878:	2a7ffe04 	addi	r9,r5,-8
     87c:	1886b03a 	or	r3,r3,r2
     880:	82400315 	stw	r9,12(r16)
     884:	81c00215 	stw	r7,8(r16)
     888:	30c00115 	stw	r3,4(r6)
     88c:	2c000015 	stw	r16,0(r5)
     890:	3c000315 	stw	r16,12(r7)
     894:	2005d0ba 	srai	r2,r4,2
     898:	01400044 	movi	r5,1
     89c:	288a983a 	sll	r5,r5,r2
     8a0:	19406f36 	bltu	r3,r5,a60 <_malloc_r+0x324>
     8a4:	28c4703a 	and	r2,r5,r3
     8a8:	10000a1e 	bne	r2,zero,8d4 <_malloc_r+0x198>
     8ac:	00bfff04 	movi	r2,-4
     8b0:	294b883a 	add	r5,r5,r5
     8b4:	2088703a 	and	r4,r4,r2
     8b8:	28c4703a 	and	r2,r5,r3
     8bc:	21000104 	addi	r4,r4,4
     8c0:	1000041e 	bne	r2,zero,8d4 <_malloc_r+0x198>
     8c4:	294b883a 	add	r5,r5,r5
     8c8:	28c4703a 	and	r2,r5,r3
     8cc:	21000104 	addi	r4,r4,4
     8d0:	103ffc26 	beq	r2,zero,8c4 <__alt_exception_stack_pointer+0xf80008c4>
     8d4:	02bfff04 	movi	r10,-4
     8d8:	024003c4 	movi	r9,15
     8dc:	21800044 	addi	r6,r4,1
     8e0:	318d883a 	add	r6,r6,r6
     8e4:	318d883a 	add	r6,r6,r6
     8e8:	318d883a 	add	r6,r6,r6
     8ec:	998d883a 	add	r6,r19,r6
     8f0:	333ffe04 	addi	r12,r6,-8
     8f4:	2017883a 	mov	r11,r4
     8f8:	31800104 	addi	r6,r6,4
     8fc:	34000017 	ldw	r16,0(r6)
     900:	31fffd04 	addi	r7,r6,-12
     904:	81c0041e 	bne	r16,r7,918 <_malloc_r+0x1dc>
     908:	0000fb06 	br	cf8 <_malloc_r+0x5bc>
     90c:	1801030e 	bge	r3,zero,d1c <_malloc_r+0x5e0>
     910:	84000317 	ldw	r16,12(r16)
     914:	81c0f826 	beq	r16,r7,cf8 <_malloc_r+0x5bc>
     918:	80800117 	ldw	r2,4(r16)
     91c:	1284703a 	and	r2,r2,r10
     920:	1447c83a 	sub	r3,r2,r17
     924:	48fff90e 	bge	r9,r3,90c <__alt_exception_stack_pointer+0xf800090c>
     928:	80800317 	ldw	r2,12(r16)
     92c:	81000217 	ldw	r4,8(r16)
     930:	89400054 	ori	r5,r17,1
     934:	81400115 	stw	r5,4(r16)
     938:	20800315 	stw	r2,12(r4)
     93c:	11000215 	stw	r4,8(r2)
     940:	8463883a 	add	r17,r16,r17
     944:	9c400515 	stw	r17,20(r19)
     948:	9c400415 	stw	r17,16(r19)
     94c:	18800054 	ori	r2,r3,1
     950:	88800115 	stw	r2,4(r17)
     954:	8a000315 	stw	r8,12(r17)
     958:	8a000215 	stw	r8,8(r17)
     95c:	88e3883a 	add	r17,r17,r3
     960:	88c00015 	stw	r3,0(r17)
     964:	9009883a 	mov	r4,r18
     968:	00015400 	call	1540 <__malloc_unlock>
     96c:	80800204 	addi	r2,r16,8
     970:	00001b06 	br	9e0 <_malloc_r+0x2a4>
     974:	04400404 	movi	r17,16
     978:	89402536 	bltu	r17,r5,a10 <_malloc_r+0x2d4>
     97c:	000151c0 	call	151c <__malloc_lock>
     980:	00800184 	movi	r2,6
     984:	01000084 	movi	r4,2
     988:	04c00034 	movhi	r19,0
     98c:	1085883a 	add	r2,r2,r2
     990:	9ccf9b04 	addi	r19,r19,15980
     994:	1085883a 	add	r2,r2,r2
     998:	9885883a 	add	r2,r19,r2
     99c:	14000117 	ldw	r16,4(r2)
     9a0:	10fffe04 	addi	r3,r2,-8
     9a4:	80c0d926 	beq	r16,r3,d0c <_malloc_r+0x5d0>
     9a8:	80c00117 	ldw	r3,4(r16)
     9ac:	81000317 	ldw	r4,12(r16)
     9b0:	00bfff04 	movi	r2,-4
     9b4:	1884703a 	and	r2,r3,r2
     9b8:	81400217 	ldw	r5,8(r16)
     9bc:	8085883a 	add	r2,r16,r2
     9c0:	10c00117 	ldw	r3,4(r2)
     9c4:	29000315 	stw	r4,12(r5)
     9c8:	21400215 	stw	r5,8(r4)
     9cc:	18c00054 	ori	r3,r3,1
     9d0:	10c00115 	stw	r3,4(r2)
     9d4:	9009883a 	mov	r4,r18
     9d8:	00015400 	call	1540 <__malloc_unlock>
     9dc:	80800204 	addi	r2,r16,8
     9e0:	dfc00a17 	ldw	ra,40(sp)
     9e4:	df000917 	ldw	fp,36(sp)
     9e8:	ddc00817 	ldw	r23,32(sp)
     9ec:	dd800717 	ldw	r22,28(sp)
     9f0:	dd400617 	ldw	r21,24(sp)
     9f4:	dd000517 	ldw	r20,20(sp)
     9f8:	dcc00417 	ldw	r19,16(sp)
     9fc:	dc800317 	ldw	r18,12(sp)
     a00:	dc400217 	ldw	r17,8(sp)
     a04:	dc000117 	ldw	r16,4(sp)
     a08:	dec00b04 	addi	sp,sp,44
     a0c:	f800283a 	ret
     a10:	00800304 	movi	r2,12
     a14:	90800015 	stw	r2,0(r18)
     a18:	0005883a 	mov	r2,zero
     a1c:	003ff006 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     a20:	01002004 	movi	r4,128
     a24:	02001004 	movi	r8,64
     a28:	01c00fc4 	movi	r7,63
     a2c:	003f6106 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     a30:	4009883a 	mov	r4,r8
     a34:	003f7506 	br	80c <__alt_exception_stack_pointer+0xf800080c>
     a38:	81000317 	ldw	r4,12(r16)
     a3c:	003fde06 	br	9b8 <__alt_exception_stack_pointer+0xf80009b8>
     a40:	81c5883a 	add	r2,r16,r7
     a44:	11400117 	ldw	r5,4(r2)
     a48:	9009883a 	mov	r4,r18
     a4c:	29400054 	ori	r5,r5,1
     a50:	11400115 	stw	r5,4(r2)
     a54:	00015400 	call	1540 <__malloc_unlock>
     a58:	80800204 	addi	r2,r16,8
     a5c:	003fe006 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     a60:	9c000217 	ldw	r16,8(r19)
     a64:	00bfff04 	movi	r2,-4
     a68:	85800117 	ldw	r22,4(r16)
     a6c:	b0ac703a 	and	r22,r22,r2
     a70:	b4400336 	bltu	r22,r17,a80 <_malloc_r+0x344>
     a74:	b445c83a 	sub	r2,r22,r17
     a78:	00c003c4 	movi	r3,15
     a7c:	18805d16 	blt	r3,r2,bf4 <_malloc_r+0x4b8>
     a80:	05c00034 	movhi	r23,0
     a84:	00800034 	movhi	r2,0
     a88:	109d4704 	addi	r2,r2,29980
     a8c:	bdd65f04 	addi	r23,r23,22908
     a90:	15400017 	ldw	r21,0(r2)
     a94:	b8c00017 	ldw	r3,0(r23)
     a98:	00bfffc4 	movi	r2,-1
     a9c:	858d883a 	add	r6,r16,r22
     aa0:	8d6b883a 	add	r21,r17,r21
     aa4:	1880ea26 	beq	r3,r2,e50 <_malloc_r+0x714>
     aa8:	ad4403c4 	addi	r21,r21,4111
     aac:	00bc0004 	movi	r2,-4096
     ab0:	a8aa703a 	and	r21,r21,r2
     ab4:	a80b883a 	mov	r5,r21
     ab8:	9009883a 	mov	r4,r18
     abc:	d9800015 	stw	r6,0(sp)
     ac0:	0000f480 	call	f48 <_sbrk_r>
     ac4:	1029883a 	mov	r20,r2
     ac8:	00bfffc4 	movi	r2,-1
     acc:	d9800017 	ldw	r6,0(sp)
     ad0:	a080e826 	beq	r20,r2,e74 <_malloc_r+0x738>
     ad4:	a180a636 	bltu	r20,r6,d70 <_malloc_r+0x634>
     ad8:	07000034 	movhi	fp,0
     adc:	e71d5004 	addi	fp,fp,30016
     ae0:	e0800017 	ldw	r2,0(fp)
     ae4:	a887883a 	add	r3,r21,r2
     ae8:	e0c00015 	stw	r3,0(fp)
     aec:	3500e626 	beq	r6,r20,e88 <_malloc_r+0x74c>
     af0:	b9000017 	ldw	r4,0(r23)
     af4:	00bfffc4 	movi	r2,-1
     af8:	2080ee26 	beq	r4,r2,eb4 <_malloc_r+0x778>
     afc:	a185c83a 	sub	r2,r20,r6
     b00:	10c5883a 	add	r2,r2,r3
     b04:	e0800015 	stw	r2,0(fp)
     b08:	a0c001cc 	andi	r3,r20,7
     b0c:	1800bc26 	beq	r3,zero,e00 <_malloc_r+0x6c4>
     b10:	a0e9c83a 	sub	r20,r20,r3
     b14:	00840204 	movi	r2,4104
     b18:	a5000204 	addi	r20,r20,8
     b1c:	10c7c83a 	sub	r3,r2,r3
     b20:	a545883a 	add	r2,r20,r21
     b24:	1083ffcc 	andi	r2,r2,4095
     b28:	18abc83a 	sub	r21,r3,r2
     b2c:	a80b883a 	mov	r5,r21
     b30:	9009883a 	mov	r4,r18
     b34:	0000f480 	call	f48 <_sbrk_r>
     b38:	00ffffc4 	movi	r3,-1
     b3c:	10c0e126 	beq	r2,r3,ec4 <_malloc_r+0x788>
     b40:	1505c83a 	sub	r2,r2,r20
     b44:	1545883a 	add	r2,r2,r21
     b48:	10800054 	ori	r2,r2,1
     b4c:	e0c00017 	ldw	r3,0(fp)
     b50:	9d000215 	stw	r20,8(r19)
     b54:	a0800115 	stw	r2,4(r20)
     b58:	a8c7883a 	add	r3,r21,r3
     b5c:	e0c00015 	stw	r3,0(fp)
     b60:	84c00e26 	beq	r16,r19,b9c <_malloc_r+0x460>
     b64:	018003c4 	movi	r6,15
     b68:	3580a72e 	bgeu	r6,r22,e08 <_malloc_r+0x6cc>
     b6c:	81400117 	ldw	r5,4(r16)
     b70:	013ffe04 	movi	r4,-8
     b74:	b0bffd04 	addi	r2,r22,-12
     b78:	1104703a 	and	r2,r2,r4
     b7c:	2900004c 	andi	r4,r5,1
     b80:	2088b03a 	or	r4,r4,r2
     b84:	81000115 	stw	r4,4(r16)
     b88:	01400144 	movi	r5,5
     b8c:	8089883a 	add	r4,r16,r2
     b90:	21400115 	stw	r5,4(r4)
     b94:	21400215 	stw	r5,8(r4)
     b98:	3080cd36 	bltu	r6,r2,ed0 <_malloc_r+0x794>
     b9c:	00800034 	movhi	r2,0
     ba0:	109d4604 	addi	r2,r2,29976
     ba4:	11000017 	ldw	r4,0(r2)
     ba8:	20c0012e 	bgeu	r4,r3,bb0 <_malloc_r+0x474>
     bac:	10c00015 	stw	r3,0(r2)
     bb0:	00800034 	movhi	r2,0
     bb4:	109d4504 	addi	r2,r2,29972
     bb8:	11000017 	ldw	r4,0(r2)
     bbc:	9c000217 	ldw	r16,8(r19)
     bc0:	20c0012e 	bgeu	r4,r3,bc8 <_malloc_r+0x48c>
     bc4:	10c00015 	stw	r3,0(r2)
     bc8:	80c00117 	ldw	r3,4(r16)
     bcc:	00bfff04 	movi	r2,-4
     bd0:	1886703a 	and	r3,r3,r2
     bd4:	1c45c83a 	sub	r2,r3,r17
     bd8:	1c400236 	bltu	r3,r17,be4 <_malloc_r+0x4a8>
     bdc:	00c003c4 	movi	r3,15
     be0:	18800416 	blt	r3,r2,bf4 <_malloc_r+0x4b8>
     be4:	9009883a 	mov	r4,r18
     be8:	00015400 	call	1540 <__malloc_unlock>
     bec:	0005883a 	mov	r2,zero
     bf0:	003f7b06 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     bf4:	88c00054 	ori	r3,r17,1
     bf8:	80c00115 	stw	r3,4(r16)
     bfc:	8463883a 	add	r17,r16,r17
     c00:	10800054 	ori	r2,r2,1
     c04:	9c400215 	stw	r17,8(r19)
     c08:	88800115 	stw	r2,4(r17)
     c0c:	9009883a 	mov	r4,r18
     c10:	00015400 	call	1540 <__malloc_unlock>
     c14:	80800204 	addi	r2,r16,8
     c18:	003f7106 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     c1c:	00c00504 	movi	r3,20
     c20:	18804a2e 	bgeu	r3,r2,d4c <_malloc_r+0x610>
     c24:	00c01504 	movi	r3,84
     c28:	18806e36 	bltu	r3,r2,de4 <_malloc_r+0x6a8>
     c2c:	8804d33a 	srli	r2,r17,12
     c30:	12001bc4 	addi	r8,r2,111
     c34:	11c01b84 	addi	r7,r2,110
     c38:	4209883a 	add	r4,r8,r8
     c3c:	003edd06 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     c40:	3804d27a 	srli	r2,r7,9
     c44:	00c00104 	movi	r3,4
     c48:	1880442e 	bgeu	r3,r2,d5c <_malloc_r+0x620>
     c4c:	00c00504 	movi	r3,20
     c50:	18808136 	bltu	r3,r2,e58 <_malloc_r+0x71c>
     c54:	11401704 	addi	r5,r2,92
     c58:	10c016c4 	addi	r3,r2,91
     c5c:	294b883a 	add	r5,r5,r5
     c60:	294b883a 	add	r5,r5,r5
     c64:	294b883a 	add	r5,r5,r5
     c68:	994b883a 	add	r5,r19,r5
     c6c:	28800017 	ldw	r2,0(r5)
     c70:	01800034 	movhi	r6,0
     c74:	297ffe04 	addi	r5,r5,-8
     c78:	318f9b04 	addi	r6,r6,15980
     c7c:	28806526 	beq	r5,r2,e14 <_malloc_r+0x6d8>
     c80:	01bfff04 	movi	r6,-4
     c84:	10c00117 	ldw	r3,4(r2)
     c88:	1986703a 	and	r3,r3,r6
     c8c:	38c0022e 	bgeu	r7,r3,c98 <_malloc_r+0x55c>
     c90:	10800217 	ldw	r2,8(r2)
     c94:	28bffb1e 	bne	r5,r2,c84 <__alt_exception_stack_pointer+0xf8000c84>
     c98:	11400317 	ldw	r5,12(r2)
     c9c:	98c00117 	ldw	r3,4(r19)
     ca0:	81400315 	stw	r5,12(r16)
     ca4:	80800215 	stw	r2,8(r16)
     ca8:	2c000215 	stw	r16,8(r5)
     cac:	14000315 	stw	r16,12(r2)
     cb0:	003ef806 	br	894 <__alt_exception_stack_pointer+0xf8000894>
     cb4:	88c00054 	ori	r3,r17,1
     cb8:	80c00115 	stw	r3,4(r16)
     cbc:	8463883a 	add	r17,r16,r17
     cc0:	34400515 	stw	r17,20(r6)
     cc4:	34400415 	stw	r17,16(r6)
     cc8:	10c00054 	ori	r3,r2,1
     ccc:	8a000315 	stw	r8,12(r17)
     cd0:	8a000215 	stw	r8,8(r17)
     cd4:	88c00115 	stw	r3,4(r17)
     cd8:	88a3883a 	add	r17,r17,r2
     cdc:	88800015 	stw	r2,0(r17)
     ce0:	9009883a 	mov	r4,r18
     ce4:	00015400 	call	1540 <__malloc_unlock>
     ce8:	80800204 	addi	r2,r16,8
     cec:	003f3c06 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     cf0:	30c00117 	ldw	r3,4(r6)
     cf4:	003ee706 	br	894 <__alt_exception_stack_pointer+0xf8000894>
     cf8:	5ac00044 	addi	r11,r11,1
     cfc:	588000cc 	andi	r2,r11,3
     d00:	31800204 	addi	r6,r6,8
     d04:	103efd1e 	bne	r2,zero,8fc <__alt_exception_stack_pointer+0xf80008fc>
     d08:	00002406 	br	d9c <_malloc_r+0x660>
     d0c:	14000317 	ldw	r16,12(r2)
     d10:	143f251e 	bne	r2,r16,9a8 <__alt_exception_stack_pointer+0xf80009a8>
     d14:	21000084 	addi	r4,r4,2
     d18:	003ebc06 	br	80c <__alt_exception_stack_pointer+0xf800080c>
     d1c:	8085883a 	add	r2,r16,r2
     d20:	10c00117 	ldw	r3,4(r2)
     d24:	81000317 	ldw	r4,12(r16)
     d28:	81400217 	ldw	r5,8(r16)
     d2c:	18c00054 	ori	r3,r3,1
     d30:	10c00115 	stw	r3,4(r2)
     d34:	29000315 	stw	r4,12(r5)
     d38:	21400215 	stw	r5,8(r4)
     d3c:	9009883a 	mov	r4,r18
     d40:	00015400 	call	1540 <__malloc_unlock>
     d44:	80800204 	addi	r2,r16,8
     d48:	003f2506 	br	9e0 <__alt_exception_stack_pointer+0xf80009e0>
     d4c:	12001704 	addi	r8,r2,92
     d50:	11c016c4 	addi	r7,r2,91
     d54:	4209883a 	add	r4,r8,r8
     d58:	003e9606 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     d5c:	3804d1ba 	srli	r2,r7,6
     d60:	11400e44 	addi	r5,r2,57
     d64:	10c00e04 	addi	r3,r2,56
     d68:	294b883a 	add	r5,r5,r5
     d6c:	003fbc06 	br	c60 <__alt_exception_stack_pointer+0xf8000c60>
     d70:	84ff5926 	beq	r16,r19,ad8 <__alt_exception_stack_pointer+0xf8000ad8>
     d74:	00800034 	movhi	r2,0
     d78:	108f9b04 	addi	r2,r2,15980
     d7c:	14000217 	ldw	r16,8(r2)
     d80:	00bfff04 	movi	r2,-4
     d84:	80c00117 	ldw	r3,4(r16)
     d88:	1886703a 	and	r3,r3,r2
     d8c:	003f9106 	br	bd4 <__alt_exception_stack_pointer+0xf8000bd4>
     d90:	60800217 	ldw	r2,8(r12)
     d94:	213fffc4 	addi	r4,r4,-1
     d98:	1300651e 	bne	r2,r12,f30 <_malloc_r+0x7f4>
     d9c:	208000cc 	andi	r2,r4,3
     da0:	633ffe04 	addi	r12,r12,-8
     da4:	103ffa1e 	bne	r2,zero,d90 <__alt_exception_stack_pointer+0xf8000d90>
     da8:	98800117 	ldw	r2,4(r19)
     dac:	0146303a 	nor	r3,zero,r5
     db0:	1884703a 	and	r2,r3,r2
     db4:	98800115 	stw	r2,4(r19)
     db8:	294b883a 	add	r5,r5,r5
     dbc:	117f2836 	bltu	r2,r5,a60 <__alt_exception_stack_pointer+0xf8000a60>
     dc0:	283f2726 	beq	r5,zero,a60 <__alt_exception_stack_pointer+0xf8000a60>
     dc4:	2886703a 	and	r3,r5,r2
     dc8:	5809883a 	mov	r4,r11
     dcc:	183ec31e 	bne	r3,zero,8dc <__alt_exception_stack_pointer+0xf80008dc>
     dd0:	294b883a 	add	r5,r5,r5
     dd4:	2886703a 	and	r3,r5,r2
     dd8:	21000104 	addi	r4,r4,4
     ddc:	183ffc26 	beq	r3,zero,dd0 <__alt_exception_stack_pointer+0xf8000dd0>
     de0:	003ebe06 	br	8dc <__alt_exception_stack_pointer+0xf80008dc>
     de4:	00c05504 	movi	r3,340
     de8:	18801236 	bltu	r3,r2,e34 <_malloc_r+0x6f8>
     dec:	8804d3fa 	srli	r2,r17,15
     df0:	12001e04 	addi	r8,r2,120
     df4:	11c01dc4 	addi	r7,r2,119
     df8:	4209883a 	add	r4,r8,r8
     dfc:	003e6d06 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     e00:	00c40004 	movi	r3,4096
     e04:	003f4606 	br	b20 <__alt_exception_stack_pointer+0xf8000b20>
     e08:	00800044 	movi	r2,1
     e0c:	a0800115 	stw	r2,4(r20)
     e10:	003f7406 	br	be4 <__alt_exception_stack_pointer+0xf8000be4>
     e14:	1805d0ba 	srai	r2,r3,2
     e18:	01c00044 	movi	r7,1
     e1c:	30c00117 	ldw	r3,4(r6)
     e20:	388e983a 	sll	r7,r7,r2
     e24:	2805883a 	mov	r2,r5
     e28:	38c6b03a 	or	r3,r7,r3
     e2c:	30c00115 	stw	r3,4(r6)
     e30:	003f9b06 	br	ca0 <__alt_exception_stack_pointer+0xf8000ca0>
     e34:	00c15504 	movi	r3,1364
     e38:	18801a36 	bltu	r3,r2,ea4 <_malloc_r+0x768>
     e3c:	8804d4ba 	srli	r2,r17,18
     e40:	12001f44 	addi	r8,r2,125
     e44:	11c01f04 	addi	r7,r2,124
     e48:	4209883a 	add	r4,r8,r8
     e4c:	003e5906 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     e50:	ad400404 	addi	r21,r21,16
     e54:	003f1706 	br	ab4 <__alt_exception_stack_pointer+0xf8000ab4>
     e58:	00c01504 	movi	r3,84
     e5c:	18802336 	bltu	r3,r2,eec <_malloc_r+0x7b0>
     e60:	3804d33a 	srli	r2,r7,12
     e64:	11401bc4 	addi	r5,r2,111
     e68:	10c01b84 	addi	r3,r2,110
     e6c:	294b883a 	add	r5,r5,r5
     e70:	003f7b06 	br	c60 <__alt_exception_stack_pointer+0xf8000c60>
     e74:	9c000217 	ldw	r16,8(r19)
     e78:	00bfff04 	movi	r2,-4
     e7c:	80c00117 	ldw	r3,4(r16)
     e80:	1886703a 	and	r3,r3,r2
     e84:	003f5306 	br	bd4 <__alt_exception_stack_pointer+0xf8000bd4>
     e88:	3083ffcc 	andi	r2,r6,4095
     e8c:	103f181e 	bne	r2,zero,af0 <__alt_exception_stack_pointer+0xf8000af0>
     e90:	99000217 	ldw	r4,8(r19)
     e94:	b545883a 	add	r2,r22,r21
     e98:	10800054 	ori	r2,r2,1
     e9c:	20800115 	stw	r2,4(r4)
     ea0:	003f3e06 	br	b9c <__alt_exception_stack_pointer+0xf8000b9c>
     ea4:	01003f84 	movi	r4,254
     ea8:	02001fc4 	movi	r8,127
     eac:	01c01f84 	movi	r7,126
     eb0:	003e4006 	br	7b4 <__alt_exception_stack_pointer+0xf80007b4>
     eb4:	00800034 	movhi	r2,0
     eb8:	10965f04 	addi	r2,r2,22908
     ebc:	15000015 	stw	r20,0(r2)
     ec0:	003f1106 	br	b08 <__alt_exception_stack_pointer+0xf8000b08>
     ec4:	00800044 	movi	r2,1
     ec8:	002b883a 	mov	r21,zero
     ecc:	003f1f06 	br	b4c <__alt_exception_stack_pointer+0xf8000b4c>
     ed0:	81400204 	addi	r5,r16,8
     ed4:	9009883a 	mov	r4,r18
     ed8:	00010c00 	call	10c0 <_free_r>
     edc:	00800034 	movhi	r2,0
     ee0:	109d5004 	addi	r2,r2,30016
     ee4:	10c00017 	ldw	r3,0(r2)
     ee8:	003f2c06 	br	b9c <__alt_exception_stack_pointer+0xf8000b9c>
     eec:	00c05504 	movi	r3,340
     ef0:	18800536 	bltu	r3,r2,f08 <_malloc_r+0x7cc>
     ef4:	3804d3fa 	srli	r2,r7,15
     ef8:	11401e04 	addi	r5,r2,120
     efc:	10c01dc4 	addi	r3,r2,119
     f00:	294b883a 	add	r5,r5,r5
     f04:	003f5606 	br	c60 <__alt_exception_stack_pointer+0xf8000c60>
     f08:	00c15504 	movi	r3,1364
     f0c:	18800536 	bltu	r3,r2,f24 <_malloc_r+0x7e8>
     f10:	3804d4ba 	srli	r2,r7,18
     f14:	11401f44 	addi	r5,r2,125
     f18:	10c01f04 	addi	r3,r2,124
     f1c:	294b883a 	add	r5,r5,r5
     f20:	003f4f06 	br	c60 <__alt_exception_stack_pointer+0xf8000c60>
     f24:	01403f84 	movi	r5,254
     f28:	00c01f84 	movi	r3,126
     f2c:	003f4c06 	br	c60 <__alt_exception_stack_pointer+0xf8000c60>
     f30:	98800117 	ldw	r2,4(r19)
     f34:	003fa006 	br	db8 <__alt_exception_stack_pointer+0xf8000db8>
     f38:	8808d0fa 	srli	r4,r17,3
     f3c:	20800044 	addi	r2,r4,1
     f40:	1085883a 	add	r2,r2,r2
     f44:	003e9006 	br	988 <__alt_exception_stack_pointer+0xf8000988>

00000f48 <_sbrk_r>:
     f48:	defffd04 	addi	sp,sp,-12
     f4c:	dc000015 	stw	r16,0(sp)
     f50:	04000034 	movhi	r16,0
     f54:	dc400115 	stw	r17,4(sp)
     f58:	841d4804 	addi	r16,r16,29984
     f5c:	2023883a 	mov	r17,r4
     f60:	2809883a 	mov	r4,r5
     f64:	dfc00215 	stw	ra,8(sp)
     f68:	80000015 	stw	zero,0(r16)
     f6c:	00015640 	call	1564 <sbrk>
     f70:	00ffffc4 	movi	r3,-1
     f74:	10c00526 	beq	r2,r3,f8c <_sbrk_r+0x44>
     f78:	dfc00217 	ldw	ra,8(sp)
     f7c:	dc400117 	ldw	r17,4(sp)
     f80:	dc000017 	ldw	r16,0(sp)
     f84:	dec00304 	addi	sp,sp,12
     f88:	f800283a 	ret
     f8c:	80c00017 	ldw	r3,0(r16)
     f90:	183ff926 	beq	r3,zero,f78 <__alt_exception_stack_pointer+0xf8000f78>
     f94:	88c00015 	stw	r3,0(r17)
     f98:	003ff706 	br	f78 <__alt_exception_stack_pointer+0xf8000f78>

00000f9c <_malloc_trim_r>:
     f9c:	defffb04 	addi	sp,sp,-20
     fa0:	dcc00315 	stw	r19,12(sp)
     fa4:	04c00034 	movhi	r19,0
     fa8:	dc800215 	stw	r18,8(sp)
     fac:	dc400115 	stw	r17,4(sp)
     fb0:	dc000015 	stw	r16,0(sp)
     fb4:	dfc00415 	stw	ra,16(sp)
     fb8:	2821883a 	mov	r16,r5
     fbc:	9ccf9b04 	addi	r19,r19,15980
     fc0:	2025883a 	mov	r18,r4
     fc4:	000151c0 	call	151c <__malloc_lock>
     fc8:	98800217 	ldw	r2,8(r19)
     fcc:	14400117 	ldw	r17,4(r2)
     fd0:	00bfff04 	movi	r2,-4
     fd4:	88a2703a 	and	r17,r17,r2
     fd8:	8c21c83a 	sub	r16,r17,r16
     fdc:	8403fbc4 	addi	r16,r16,4079
     fe0:	8020d33a 	srli	r16,r16,12
     fe4:	0083ffc4 	movi	r2,4095
     fe8:	843fffc4 	addi	r16,r16,-1
     fec:	8020933a 	slli	r16,r16,12
     ff0:	1400060e 	bge	r2,r16,100c <_malloc_trim_r+0x70>
     ff4:	000b883a 	mov	r5,zero
     ff8:	9009883a 	mov	r4,r18
     ffc:	0000f480 	call	f48 <_sbrk_r>
    1000:	98c00217 	ldw	r3,8(r19)
    1004:	1c47883a 	add	r3,r3,r17
    1008:	10c00a26 	beq	r2,r3,1034 <_malloc_trim_r+0x98>
    100c:	9009883a 	mov	r4,r18
    1010:	00015400 	call	1540 <__malloc_unlock>
    1014:	0005883a 	mov	r2,zero
    1018:	dfc00417 	ldw	ra,16(sp)
    101c:	dcc00317 	ldw	r19,12(sp)
    1020:	dc800217 	ldw	r18,8(sp)
    1024:	dc400117 	ldw	r17,4(sp)
    1028:	dc000017 	ldw	r16,0(sp)
    102c:	dec00504 	addi	sp,sp,20
    1030:	f800283a 	ret
    1034:	040bc83a 	sub	r5,zero,r16
    1038:	9009883a 	mov	r4,r18
    103c:	0000f480 	call	f48 <_sbrk_r>
    1040:	00ffffc4 	movi	r3,-1
    1044:	10c00d26 	beq	r2,r3,107c <_malloc_trim_r+0xe0>
    1048:	00c00034 	movhi	r3,0
    104c:	18dd5004 	addi	r3,r3,30016
    1050:	18800017 	ldw	r2,0(r3)
    1054:	99000217 	ldw	r4,8(r19)
    1058:	8c23c83a 	sub	r17,r17,r16
    105c:	8c400054 	ori	r17,r17,1
    1060:	1421c83a 	sub	r16,r2,r16
    1064:	24400115 	stw	r17,4(r4)
    1068:	9009883a 	mov	r4,r18
    106c:	1c000015 	stw	r16,0(r3)
    1070:	00015400 	call	1540 <__malloc_unlock>
    1074:	00800044 	movi	r2,1
    1078:	003fe706 	br	1018 <__alt_exception_stack_pointer+0xf8001018>
    107c:	000b883a 	mov	r5,zero
    1080:	9009883a 	mov	r4,r18
    1084:	0000f480 	call	f48 <_sbrk_r>
    1088:	99000217 	ldw	r4,8(r19)
    108c:	014003c4 	movi	r5,15
    1090:	1107c83a 	sub	r3,r2,r4
    1094:	28ffdd0e 	bge	r5,r3,100c <__alt_exception_stack_pointer+0xf800100c>
    1098:	01400034 	movhi	r5,0
    109c:	29565f04 	addi	r5,r5,22908
    10a0:	29400017 	ldw	r5,0(r5)
    10a4:	18c00054 	ori	r3,r3,1
    10a8:	20c00115 	stw	r3,4(r4)
    10ac:	00c00034 	movhi	r3,0
    10b0:	1145c83a 	sub	r2,r2,r5
    10b4:	18dd5004 	addi	r3,r3,30016
    10b8:	18800015 	stw	r2,0(r3)
    10bc:	003fd306 	br	100c <__alt_exception_stack_pointer+0xf800100c>

000010c0 <_free_r>:
    10c0:	28004126 	beq	r5,zero,11c8 <_free_r+0x108>
    10c4:	defffd04 	addi	sp,sp,-12
    10c8:	dc400115 	stw	r17,4(sp)
    10cc:	dc000015 	stw	r16,0(sp)
    10d0:	2023883a 	mov	r17,r4
    10d4:	2821883a 	mov	r16,r5
    10d8:	dfc00215 	stw	ra,8(sp)
    10dc:	000151c0 	call	151c <__malloc_lock>
    10e0:	81ffff17 	ldw	r7,-4(r16)
    10e4:	00bfff84 	movi	r2,-2
    10e8:	01000034 	movhi	r4,0
    10ec:	81bffe04 	addi	r6,r16,-8
    10f0:	3884703a 	and	r2,r7,r2
    10f4:	210f9b04 	addi	r4,r4,15980
    10f8:	308b883a 	add	r5,r6,r2
    10fc:	2a400117 	ldw	r9,4(r5)
    1100:	22000217 	ldw	r8,8(r4)
    1104:	00ffff04 	movi	r3,-4
    1108:	48c6703a 	and	r3,r9,r3
    110c:	2a005726 	beq	r5,r8,126c <_free_r+0x1ac>
    1110:	28c00115 	stw	r3,4(r5)
    1114:	39c0004c 	andi	r7,r7,1
    1118:	3800091e 	bne	r7,zero,1140 <_free_r+0x80>
    111c:	823ffe17 	ldw	r8,-8(r16)
    1120:	22400204 	addi	r9,r4,8
    1124:	320dc83a 	sub	r6,r6,r8
    1128:	31c00217 	ldw	r7,8(r6)
    112c:	1205883a 	add	r2,r2,r8
    1130:	3a406526 	beq	r7,r9,12c8 <_free_r+0x208>
    1134:	32000317 	ldw	r8,12(r6)
    1138:	3a000315 	stw	r8,12(r7)
    113c:	41c00215 	stw	r7,8(r8)
    1140:	28cf883a 	add	r7,r5,r3
    1144:	39c00117 	ldw	r7,4(r7)
    1148:	39c0004c 	andi	r7,r7,1
    114c:	38003a26 	beq	r7,zero,1238 <_free_r+0x178>
    1150:	10c00054 	ori	r3,r2,1
    1154:	30c00115 	stw	r3,4(r6)
    1158:	3087883a 	add	r3,r6,r2
    115c:	18800015 	stw	r2,0(r3)
    1160:	00c07fc4 	movi	r3,511
    1164:	18801936 	bltu	r3,r2,11cc <_free_r+0x10c>
    1168:	1004d0fa 	srli	r2,r2,3
    116c:	01c00044 	movi	r7,1
    1170:	21400117 	ldw	r5,4(r4)
    1174:	10c00044 	addi	r3,r2,1
    1178:	18c7883a 	add	r3,r3,r3
    117c:	1005d0ba 	srai	r2,r2,2
    1180:	18c7883a 	add	r3,r3,r3
    1184:	18c7883a 	add	r3,r3,r3
    1188:	1907883a 	add	r3,r3,r4
    118c:	3884983a 	sll	r2,r7,r2
    1190:	19c00017 	ldw	r7,0(r3)
    1194:	1a3ffe04 	addi	r8,r3,-8
    1198:	1144b03a 	or	r2,r2,r5
    119c:	32000315 	stw	r8,12(r6)
    11a0:	31c00215 	stw	r7,8(r6)
    11a4:	20800115 	stw	r2,4(r4)
    11a8:	19800015 	stw	r6,0(r3)
    11ac:	39800315 	stw	r6,12(r7)
    11b0:	8809883a 	mov	r4,r17
    11b4:	dfc00217 	ldw	ra,8(sp)
    11b8:	dc400117 	ldw	r17,4(sp)
    11bc:	dc000017 	ldw	r16,0(sp)
    11c0:	dec00304 	addi	sp,sp,12
    11c4:	00015401 	jmpi	1540 <__malloc_unlock>
    11c8:	f800283a 	ret
    11cc:	100ad27a 	srli	r5,r2,9
    11d0:	00c00104 	movi	r3,4
    11d4:	19404a36 	bltu	r3,r5,1300 <_free_r+0x240>
    11d8:	100ad1ba 	srli	r5,r2,6
    11dc:	28c00e44 	addi	r3,r5,57
    11e0:	18c7883a 	add	r3,r3,r3
    11e4:	29400e04 	addi	r5,r5,56
    11e8:	18c7883a 	add	r3,r3,r3
    11ec:	18c7883a 	add	r3,r3,r3
    11f0:	1909883a 	add	r4,r3,r4
    11f4:	20c00017 	ldw	r3,0(r4)
    11f8:	01c00034 	movhi	r7,0
    11fc:	213ffe04 	addi	r4,r4,-8
    1200:	39cf9b04 	addi	r7,r7,15980
    1204:	20c04426 	beq	r4,r3,1318 <_free_r+0x258>
    1208:	01ffff04 	movi	r7,-4
    120c:	19400117 	ldw	r5,4(r3)
    1210:	29ca703a 	and	r5,r5,r7
    1214:	1140022e 	bgeu	r2,r5,1220 <_free_r+0x160>
    1218:	18c00217 	ldw	r3,8(r3)
    121c:	20fffb1e 	bne	r4,r3,120c <__alt_exception_stack_pointer+0xf800120c>
    1220:	19000317 	ldw	r4,12(r3)
    1224:	31000315 	stw	r4,12(r6)
    1228:	30c00215 	stw	r3,8(r6)
    122c:	21800215 	stw	r6,8(r4)
    1230:	19800315 	stw	r6,12(r3)
    1234:	003fde06 	br	11b0 <__alt_exception_stack_pointer+0xf80011b0>
    1238:	29c00217 	ldw	r7,8(r5)
    123c:	10c5883a 	add	r2,r2,r3
    1240:	00c00034 	movhi	r3,0
    1244:	18cf9d04 	addi	r3,r3,15988
    1248:	38c03b26 	beq	r7,r3,1338 <_free_r+0x278>
    124c:	2a000317 	ldw	r8,12(r5)
    1250:	11400054 	ori	r5,r2,1
    1254:	3087883a 	add	r3,r6,r2
    1258:	3a000315 	stw	r8,12(r7)
    125c:	41c00215 	stw	r7,8(r8)
    1260:	31400115 	stw	r5,4(r6)
    1264:	18800015 	stw	r2,0(r3)
    1268:	003fbd06 	br	1160 <__alt_exception_stack_pointer+0xf8001160>
    126c:	39c0004c 	andi	r7,r7,1
    1270:	10c5883a 	add	r2,r2,r3
    1274:	3800071e 	bne	r7,zero,1294 <_free_r+0x1d4>
    1278:	81fffe17 	ldw	r7,-8(r16)
    127c:	31cdc83a 	sub	r6,r6,r7
    1280:	30c00317 	ldw	r3,12(r6)
    1284:	31400217 	ldw	r5,8(r6)
    1288:	11c5883a 	add	r2,r2,r7
    128c:	28c00315 	stw	r3,12(r5)
    1290:	19400215 	stw	r5,8(r3)
    1294:	10c00054 	ori	r3,r2,1
    1298:	30c00115 	stw	r3,4(r6)
    129c:	00c00034 	movhi	r3,0
    12a0:	18d66004 	addi	r3,r3,22912
    12a4:	18c00017 	ldw	r3,0(r3)
    12a8:	21800215 	stw	r6,8(r4)
    12ac:	10ffc036 	bltu	r2,r3,11b0 <__alt_exception_stack_pointer+0xf80011b0>
    12b0:	00800034 	movhi	r2,0
    12b4:	109d4704 	addi	r2,r2,29980
    12b8:	11400017 	ldw	r5,0(r2)
    12bc:	8809883a 	mov	r4,r17
    12c0:	0000f9c0 	call	f9c <_malloc_trim_r>
    12c4:	003fba06 	br	11b0 <__alt_exception_stack_pointer+0xf80011b0>
    12c8:	28c9883a 	add	r4,r5,r3
    12cc:	21000117 	ldw	r4,4(r4)
    12d0:	2100004c 	andi	r4,r4,1
    12d4:	2000391e 	bne	r4,zero,13bc <_free_r+0x2fc>
    12d8:	29c00217 	ldw	r7,8(r5)
    12dc:	29000317 	ldw	r4,12(r5)
    12e0:	1885883a 	add	r2,r3,r2
    12e4:	10c00054 	ori	r3,r2,1
    12e8:	39000315 	stw	r4,12(r7)
    12ec:	21c00215 	stw	r7,8(r4)
    12f0:	30c00115 	stw	r3,4(r6)
    12f4:	308d883a 	add	r6,r6,r2
    12f8:	30800015 	stw	r2,0(r6)
    12fc:	003fac06 	br	11b0 <__alt_exception_stack_pointer+0xf80011b0>
    1300:	00c00504 	movi	r3,20
    1304:	19401536 	bltu	r3,r5,135c <_free_r+0x29c>
    1308:	28c01704 	addi	r3,r5,92
    130c:	18c7883a 	add	r3,r3,r3
    1310:	294016c4 	addi	r5,r5,91
    1314:	003fb406 	br	11e8 <__alt_exception_stack_pointer+0xf80011e8>
    1318:	280bd0ba 	srai	r5,r5,2
    131c:	00c00044 	movi	r3,1
    1320:	38800117 	ldw	r2,4(r7)
    1324:	194a983a 	sll	r5,r3,r5
    1328:	2007883a 	mov	r3,r4
    132c:	2884b03a 	or	r2,r5,r2
    1330:	38800115 	stw	r2,4(r7)
    1334:	003fbb06 	br	1224 <__alt_exception_stack_pointer+0xf8001224>
    1338:	21800515 	stw	r6,20(r4)
    133c:	21800415 	stw	r6,16(r4)
    1340:	10c00054 	ori	r3,r2,1
    1344:	31c00315 	stw	r7,12(r6)
    1348:	31c00215 	stw	r7,8(r6)
    134c:	30c00115 	stw	r3,4(r6)
    1350:	308d883a 	add	r6,r6,r2
    1354:	30800015 	stw	r2,0(r6)
    1358:	003f9506 	br	11b0 <__alt_exception_stack_pointer+0xf80011b0>
    135c:	00c01504 	movi	r3,84
    1360:	19400536 	bltu	r3,r5,1378 <_free_r+0x2b8>
    1364:	100ad33a 	srli	r5,r2,12
    1368:	28c01bc4 	addi	r3,r5,111
    136c:	18c7883a 	add	r3,r3,r3
    1370:	29401b84 	addi	r5,r5,110
    1374:	003f9c06 	br	11e8 <__alt_exception_stack_pointer+0xf80011e8>
    1378:	00c05504 	movi	r3,340
    137c:	19400536 	bltu	r3,r5,1394 <_free_r+0x2d4>
    1380:	100ad3fa 	srli	r5,r2,15
    1384:	28c01e04 	addi	r3,r5,120
    1388:	18c7883a 	add	r3,r3,r3
    138c:	29401dc4 	addi	r5,r5,119
    1390:	003f9506 	br	11e8 <__alt_exception_stack_pointer+0xf80011e8>
    1394:	00c15504 	movi	r3,1364
    1398:	19400536 	bltu	r3,r5,13b0 <_free_r+0x2f0>
    139c:	100ad4ba 	srli	r5,r2,18
    13a0:	28c01f44 	addi	r3,r5,125
    13a4:	18c7883a 	add	r3,r3,r3
    13a8:	29401f04 	addi	r5,r5,124
    13ac:	003f8e06 	br	11e8 <__alt_exception_stack_pointer+0xf80011e8>
    13b0:	00c03f84 	movi	r3,254
    13b4:	01401f84 	movi	r5,126
    13b8:	003f8b06 	br	11e8 <__alt_exception_stack_pointer+0xf80011e8>
    13bc:	10c00054 	ori	r3,r2,1
    13c0:	30c00115 	stw	r3,4(r6)
    13c4:	308d883a 	add	r6,r6,r2
    13c8:	30800015 	stw	r2,0(r6)
    13cc:	003f7806 	br	11b0 <__alt_exception_stack_pointer+0xf80011b0>

000013d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    13d0:	defffc04 	addi	sp,sp,-16
    13d4:	df000315 	stw	fp,12(sp)
    13d8:	df000304 	addi	fp,sp,12
    13dc:	e13ffd15 	stw	r4,-12(fp)
    13e0:	e17ffe15 	stw	r5,-8(fp)
    13e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    13e8:	e0fffe17 	ldw	r3,-8(fp)
    13ec:	e0bffd17 	ldw	r2,-12(fp)
    13f0:	18800c26 	beq	r3,r2,1424 <alt_load_section+0x54>
  {
    while( to != end )
    13f4:	00000806 	br	1418 <alt_load_section+0x48>
    {
      *to++ = *from++;
    13f8:	e0bffe17 	ldw	r2,-8(fp)
    13fc:	10c00104 	addi	r3,r2,4
    1400:	e0fffe15 	stw	r3,-8(fp)
    1404:	e0fffd17 	ldw	r3,-12(fp)
    1408:	19000104 	addi	r4,r3,4
    140c:	e13ffd15 	stw	r4,-12(fp)
    1410:	18c00017 	ldw	r3,0(r3)
    1414:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1418:	e0fffe17 	ldw	r3,-8(fp)
    141c:	e0bfff17 	ldw	r2,-4(fp)
    1420:	18bff51e 	bne	r3,r2,13f8 <__alt_exception_stack_pointer+0xf80013f8>
    {
      *to++ = *from++;
    }
  }
}
    1424:	0001883a 	nop
    1428:	e037883a 	mov	sp,fp
    142c:	df000017 	ldw	fp,0(sp)
    1430:	dec00104 	addi	sp,sp,4
    1434:	f800283a 	ret

00001438 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1438:	defffe04 	addi	sp,sp,-8
    143c:	dfc00115 	stw	ra,4(sp)
    1440:	df000015 	stw	fp,0(sp)
    1444:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1448:	01800034 	movhi	r6,0
    144c:	31967004 	addi	r6,r6,22976
    1450:	01400034 	movhi	r5,0
    1454:	294f9b04 	addi	r5,r5,15980
    1458:	01000034 	movhi	r4,0
    145c:	21167004 	addi	r4,r4,22976
    1460:	00013d00 	call	13d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1464:	01800034 	movhi	r6,0
    1468:	31808f04 	addi	r6,r6,572
    146c:	01400034 	movhi	r5,0
    1470:	29400804 	addi	r5,r5,32
    1474:	01000034 	movhi	r4,0
    1478:	21000804 	addi	r4,r4,32
    147c:	00013d00 	call	13d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1480:	01800034 	movhi	r6,0
    1484:	318f9b04 	addi	r6,r6,15980
    1488:	01400034 	movhi	r5,0
    148c:	294f8f04 	addi	r5,r5,15932
    1490:	01000034 	movhi	r4,0
    1494:	210f8f04 	addi	r4,r4,15932
    1498:	00013d00 	call	13d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    149c:	0002f5c0 	call	2f5c <alt_dcache_flush_all>
  alt_icache_flush_all();
    14a0:	00032f80 	call	32f8 <alt_icache_flush_all>
}
    14a4:	0001883a 	nop
    14a8:	e037883a 	mov	sp,fp
    14ac:	dfc00117 	ldw	ra,4(sp)
    14b0:	df000017 	ldw	fp,0(sp)
    14b4:	dec00204 	addi	sp,sp,8
    14b8:	f800283a 	ret

000014bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    14bc:	defffd04 	addi	sp,sp,-12
    14c0:	dfc00215 	stw	ra,8(sp)
    14c4:	df000115 	stw	fp,4(sp)
    14c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    14cc:	0009883a 	mov	r4,zero
    14d0:	00016480 	call	1648 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    14d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    14d8:	00016800 	call	1680 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    14dc:	00031a80 	call	31a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    14e0:	01000034 	movhi	r4,0
    14e4:	210c8204 	addi	r4,r4,12808
    14e8:	00038a00 	call	38a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    14ec:	d0a6ea17 	ldw	r2,-25688(gp)
    14f0:	d0e6eb17 	ldw	r3,-25684(gp)
    14f4:	d126ec17 	ldw	r4,-25680(gp)
    14f8:	200d883a 	mov	r6,r4
    14fc:	180b883a 	mov	r5,r3
    1500:	1009883a 	mov	r4,r2
    1504:	00002780 	call	278 <main>
    1508:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    150c:	01000044 	movi	r4,1
    1510:	0002e840 	call	2e84 <close>
  exit (result);
    1514:	e13fff17 	ldw	r4,-4(fp)
    1518:	00038b40 	call	38b4 <exit>

0000151c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    151c:	defffe04 	addi	sp,sp,-8
    1520:	df000115 	stw	fp,4(sp)
    1524:	df000104 	addi	fp,sp,4
    1528:	e13fff15 	stw	r4,-4(fp)
}
    152c:	0001883a 	nop
    1530:	e037883a 	mov	sp,fp
    1534:	df000017 	ldw	fp,0(sp)
    1538:	dec00104 	addi	sp,sp,4
    153c:	f800283a 	ret

00001540 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    1540:	defffe04 	addi	sp,sp,-8
    1544:	df000115 	stw	fp,4(sp)
    1548:	df000104 	addi	fp,sp,4
    154c:	e13fff15 	stw	r4,-4(fp)
}
    1550:	0001883a 	nop
    1554:	e037883a 	mov	sp,fp
    1558:	df000017 	ldw	fp,0(sp)
    155c:	dec00104 	addi	sp,sp,4
    1560:	f800283a 	ret

00001564 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    1564:	defff904 	addi	sp,sp,-28
    1568:	df000615 	stw	fp,24(sp)
    156c:	df000604 	addi	fp,sp,24
    1570:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1574:	0005303a 	rdctl	r2,status
    1578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    157c:	e0fffe17 	ldw	r3,-8(fp)
    1580:	00bfff84 	movi	r2,-2
    1584:	1884703a 	and	r2,r3,r2
    1588:	1001703a 	wrctl	status,r2
  
  return context;
    158c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    1590:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1594:	d0a00417 	ldw	r2,-32752(gp)
    1598:	10c000c4 	addi	r3,r2,3
    159c:	00bfff04 	movi	r2,-4
    15a0:	1884703a 	and	r2,r3,r2
    15a4:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    15a8:	d0e00417 	ldw	r3,-32752(gp)
    15ac:	e0bfff17 	ldw	r2,-4(fp)
    15b0:	1887883a 	add	r3,r3,r2
    15b4:	00820034 	movhi	r2,2048
    15b8:	10bf0004 	addi	r2,r2,-1024
    15bc:	10c0062e 	bgeu	r2,r3,15d8 <sbrk+0x74>
    15c0:	e0bffb17 	ldw	r2,-20(fp)
    15c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15c8:	e0bffa17 	ldw	r2,-24(fp)
    15cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    15d0:	00bfffc4 	movi	r2,-1
    15d4:	00000b06 	br	1604 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    15d8:	d0a00417 	ldw	r2,-32752(gp)
    15dc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    15e0:	d0e00417 	ldw	r3,-32752(gp)
    15e4:	e0bfff17 	ldw	r2,-4(fp)
    15e8:	1885883a 	add	r2,r3,r2
    15ec:	d0a00415 	stw	r2,-32752(gp)
    15f0:	e0bffb17 	ldw	r2,-20(fp)
    15f4:	e0bffc15 	stw	r2,-16(fp)
    15f8:	e0bffc17 	ldw	r2,-16(fp)
    15fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1600:	e0bffd17 	ldw	r2,-12(fp)
} 
    1604:	e037883a 	mov	sp,fp
    1608:	df000017 	ldw	fp,0(sp)
    160c:	dec00104 	addi	sp,sp,4
    1610:	f800283a 	ret

00001614 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1614:	defffd04 	addi	sp,sp,-12
    1618:	dfc00215 	stw	ra,8(sp)
    161c:	df000115 	stw	fp,4(sp)
    1620:	df000104 	addi	fp,sp,4
    1624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1628:	d1600704 	addi	r5,gp,-32740
    162c:	e13fff17 	ldw	r4,-4(fp)
    1630:	0002fe40 	call	2fe4 <alt_dev_llist_insert>
}
    1634:	e037883a 	mov	sp,fp
    1638:	dfc00117 	ldw	ra,4(sp)
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00204 	addi	sp,sp,8
    1644:	f800283a 	ret

00001648 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1648:	defffd04 	addi	sp,sp,-12
    164c:	dfc00215 	stw	ra,8(sp)
    1650:	df000115 	stw	fp,4(sp)
    1654:	df000104 	addi	fp,sp,4
    1658:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    165c:	00037e00 	call	37e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1660:	00800044 	movi	r2,1
    1664:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1668:	0001883a 	nop
    166c:	e037883a 	mov	sp,fp
    1670:	dfc00117 	ldw	ra,4(sp)
    1674:	df000017 	ldw	fp,0(sp)
    1678:	dec00204 	addi	sp,sp,8
    167c:	f800283a 	ret

00001680 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1680:	defffd04 	addi	sp,sp,-12
    1684:	dfc00215 	stw	ra,8(sp)
    1688:	df000115 	stw	fp,4(sp)
    168c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
    1690:	00800084 	movi	r2,2
    1694:	d8800015 	stw	r2,0(sp)
    1698:	000f883a 	mov	r7,zero
    169c:	01820034 	movhi	r6,2048
    16a0:	318c1004 	addi	r6,r6,12352
    16a4:	01400034 	movhi	r5,0
    16a8:	2951d604 	addi	r5,r5,18264
    16ac:	01000034 	movhi	r4,0
    16b0:	2111cf04 	addi	r4,r4,18236
    16b4:	00022000 	call	2200 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    16b8:	000d883a 	mov	r6,zero
    16bc:	000b883a 	mov	r5,zero
    16c0:	01000034 	movhi	r4,0
    16c4:	2111e704 	addi	r4,r4,18332
    16c8:	00024180 	call	2418 <altera_avalon_jtag_uart_init>
    16cc:	01000034 	movhi	r4,0
    16d0:	2111dd04 	addi	r4,r4,18292
    16d4:	00016140 	call	1614 <alt_dev_reg>
}
    16d8:	0001883a 	nop
    16dc:	e037883a 	mov	sp,fp
    16e0:	dfc00117 	ldw	ra,4(sp)
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00204 	addi	sp,sp,8
    16ec:	f800283a 	ret

000016f0 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
    16f0:	defffd04 	addi	sp,sp,-12
    16f4:	dfc00215 	stw	ra,8(sp)
    16f8:	df000115 	stw	fp,4(sp)
    16fc:	df000104 	addi	fp,sp,4
    1700:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
    1704:	d1600c04 	addi	r5,gp,-32720
    1708:	e13fff17 	ldw	r4,-4(fp)
    170c:	0002fe40 	call	2fe4 <alt_dev_llist_insert>
}
    1710:	e037883a 	mov	sp,fp
    1714:	dfc00117 	ldw	ra,4(sp)
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00204 	addi	sp,sp,8
    1720:	f800283a 	ret

00001724 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
    1724:	defffd04 	addi	sp,sp,-12
    1728:	dfc00215 	stw	ra,8(sp)
    172c:	df000115 	stw	fp,4(sp)
    1730:	df000104 	addi	fp,sp,4
    1734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
    1738:	d1600a04 	addi	r5,gp,-32728
    173c:	e13fff17 	ldw	r4,-4(fp)
    1740:	0002fe40 	call	2fe4 <alt_dev_llist_insert>
}
    1744:	e037883a 	mov	sp,fp
    1748:	dfc00117 	ldw	ra,4(sp)
    174c:	df000017 	ldw	fp,0(sp)
    1750:	dec00204 	addi	sp,sp,8
    1754:	f800283a 	ret

00001758 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
    1758:	defffc04 	addi	sp,sp,-16
    175c:	df000315 	stw	fp,12(sp)
    1760:	df000304 	addi	fp,sp,12
    1764:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    1768:	e0bfff17 	ldw	r2,-4(fp)
    176c:	10c00117 	ldw	r3,4(r2)
    1770:	e0bfff17 	ldw	r2,-4(fp)
    1774:	10800217 	ldw	r2,8(r2)
    1778:	18802e26 	beq	r3,r2,1834 <alt_avalon_dma_launch_bidir+0xdc>
    177c:	e0bfff17 	ldw	r2,-4(fp)
    1780:	10c00317 	ldw	r3,12(r2)
    1784:	e0bfff17 	ldw	r2,-4(fp)
    1788:	10800417 	ldw	r2,16(r2)
    178c:	18802926 	beq	r3,r2,1834 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
    1790:	e0bfff17 	ldw	r2,-4(fp)
    1794:	00c00044 	movi	r3,1
    1798:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
    179c:	e0bfff17 	ldw	r2,-4(fp)
    17a0:	10800117 	ldw	r2,4(r2)
    17a4:	1004913a 	slli	r2,r2,4
    17a8:	10800904 	addi	r2,r2,36
    17ac:	e0ffff17 	ldw	r3,-4(fp)
    17b0:	1885883a 	add	r2,r3,r2
    17b4:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
    17b8:	e0bfff17 	ldw	r2,-4(fp)
    17bc:	10800317 	ldw	r2,12(r2)
    17c0:	1004913a 	slli	r2,r2,4
    17c4:	10801904 	addi	r2,r2,100
    17c8:	e0ffff17 	ldw	r3,-4(fp)
    17cc:	1885883a 	add	r2,r3,r2
    17d0:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    17d4:	e0bfff17 	ldw	r2,-4(fp)
    17d8:	10800017 	ldw	r2,0(r2)
    17dc:	10800104 	addi	r2,r2,4
    17e0:	e0fffd17 	ldw	r3,-12(fp)
    17e4:	18c00017 	ldw	r3,0(r3)
    17e8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    17ec:	e0bfff17 	ldw	r2,-4(fp)
    17f0:	10800017 	ldw	r2,0(r2)
    17f4:	10800204 	addi	r2,r2,8
    17f8:	e0fffe17 	ldw	r3,-8(fp)
    17fc:	18c00017 	ldw	r3,0(r3)
    1800:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	10800017 	ldw	r2,0(r2)
    180c:	11000304 	addi	r4,r2,12
    1810:	e0bffd17 	ldw	r2,-12(fp)
    1814:	11400117 	ldw	r5,4(r2)
    1818:	e0bffe17 	ldw	r2,-8(fp)
    181c:	10c00117 	ldw	r3,4(r2)
    1820:	2805883a 	mov	r2,r5
    1824:	1880012e 	bgeu	r3,r2,182c <alt_avalon_dma_launch_bidir+0xd4>
    1828:	1805883a 	mov	r2,r3
    182c:	20800035 	stwio	r2,0(r4)
    1830:	00000206 	br	183c <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
    1834:	e0bfff17 	ldw	r2,-4(fp)
    1838:	10000815 	stw	zero,32(r2)
  }
}
    183c:	0001883a 	nop
    1840:	e037883a 	mov	sp,fp
    1844:	df000017 	ldw	fp,0(sp)
    1848:	dec00104 	addi	sp,sp,4
    184c:	f800283a 	ret

00001850 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
    1850:	defffd04 	addi	sp,sp,-12
    1854:	df000215 	stw	fp,8(sp)
    1858:	df000204 	addi	fp,sp,8
    185c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
    1860:	e0bfff17 	ldw	r2,-4(fp)
    1864:	10c00117 	ldw	r3,4(r2)
    1868:	e0bfff17 	ldw	r2,-4(fp)
    186c:	10800217 	ldw	r2,8(r2)
    1870:	18801726 	beq	r3,r2,18d0 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
    1874:	e0bfff17 	ldw	r2,-4(fp)
    1878:	00c00044 	movi	r3,1
    187c:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
    1880:	e0bfff17 	ldw	r2,-4(fp)
    1884:	10800117 	ldw	r2,4(r2)
    1888:	1004913a 	slli	r2,r2,4
    188c:	10800904 	addi	r2,r2,36
    1890:	e0ffff17 	ldw	r3,-4(fp)
    1894:	1885883a 	add	r2,r3,r2
    1898:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    189c:	e0bfff17 	ldw	r2,-4(fp)
    18a0:	10800017 	ldw	r2,0(r2)
    18a4:	10800104 	addi	r2,r2,4
    18a8:	e0fffe17 	ldw	r3,-8(fp)
    18ac:	18c00017 	ldw	r3,0(r3)
    18b0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
    18b4:	e0bfff17 	ldw	r2,-4(fp)
    18b8:	10800017 	ldw	r2,0(r2)
    18bc:	10800304 	addi	r2,r2,12
    18c0:	e0fffe17 	ldw	r3,-8(fp)
    18c4:	18c00117 	ldw	r3,4(r3)
    18c8:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    18cc:	00000206 	br	18d8 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
    18d0:	e0bfff17 	ldw	r2,-4(fp)
    18d4:	10000815 	stw	zero,32(r2)
  }
}
    18d8:	0001883a 	nop
    18dc:	e037883a 	mov	sp,fp
    18e0:	df000017 	ldw	fp,0(sp)
    18e4:	dec00104 	addi	sp,sp,4
    18e8:	f800283a 	ret

000018ec <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
    18ec:	defffd04 	addi	sp,sp,-12
    18f0:	df000215 	stw	fp,8(sp)
    18f4:	df000204 	addi	fp,sp,8
    18f8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	10c00317 	ldw	r3,12(r2)
    1904:	e0bfff17 	ldw	r2,-4(fp)
    1908:	10800417 	ldw	r2,16(r2)
    190c:	18801726 	beq	r3,r2,196c <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	00c00044 	movi	r3,1
    1918:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
    191c:	e0bfff17 	ldw	r2,-4(fp)
    1920:	10800317 	ldw	r2,12(r2)
    1924:	1004913a 	slli	r2,r2,4
    1928:	10801904 	addi	r2,r2,100
    192c:	e0ffff17 	ldw	r3,-4(fp)
    1930:	1885883a 	add	r2,r3,r2
    1934:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    1938:	e0bfff17 	ldw	r2,-4(fp)
    193c:	10800017 	ldw	r2,0(r2)
    1940:	10800204 	addi	r2,r2,8
    1944:	e0fffe17 	ldw	r3,-8(fp)
    1948:	18c00017 	ldw	r3,0(r3)
    194c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
    1950:	e0bfff17 	ldw	r2,-4(fp)
    1954:	10800017 	ldw	r2,0(r2)
    1958:	10800304 	addi	r2,r2,12
    195c:	e0fffe17 	ldw	r3,-8(fp)
    1960:	18c00117 	ldw	r3,4(r3)
    1964:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    1968:	00000206 	br	1974 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	10000815 	stw	zero,32(r2)
  }
}
    1974:	0001883a 	nop
    1978:	e037883a 	mov	sp,fp
    197c:	df000017 	ldw	fp,0(sp)
    1980:	dec00104 	addi	sp,sp,4
    1984:	f800283a 	ret

00001988 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
    1988:	defffa04 	addi	sp,sp,-24
    198c:	df000515 	stw	fp,20(sp)
    1990:	df000504 	addi	fp,sp,20
    1994:	e13ffd15 	stw	r4,-12(fp)
    1998:	e17ffe15 	stw	r5,-8(fp)
    199c:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
    19a0:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    19a4:	e0bffd17 	ldw	r2,-12(fp)
    19a8:	10c00117 	ldw	r3,4(r2)
    19ac:	e0bffd17 	ldw	r2,-12(fp)
    19b0:	10800217 	ldw	r2,8(r2)
    19b4:	18800a1e 	bne	r3,r2,19e0 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	10c00317 	ldw	r3,12(r2)
    19c0:	e0bffd17 	ldw	r2,-12(fp)
    19c4:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    19c8:	1880051e 	bne	r3,r2,19e0 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
    19cc:	e0bffd17 	ldw	r2,-12(fp)
    19d0:	10800017 	ldw	r2,0(r2)
    19d4:	10800304 	addi	r2,r2,12
    19d8:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
    19dc:	10000226 	beq	r2,zero,19e8 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
    19e0:	00bffec4 	movi	r2,-5
    19e4:	0000b506 	br	1cbc <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
    19e8:	e0bffe17 	ldw	r2,-8(fp)
    19ec:	108002a8 	cmpgeui	r2,r2,10
    19f0:	1000781e 	bne	r2,zero,1bd4 <alt_avalon_dma_ioctl+0x24c>
    19f4:	e0bffe17 	ldw	r2,-8(fp)
    19f8:	100690ba 	slli	r3,r2,2
    19fc:	00800034 	movhi	r2,0
    1a00:	10868404 	addi	r2,r2,6672
    1a04:	1885883a 	add	r2,r3,r2
    1a08:	10800017 	ldw	r2,0(r2)
    1a0c:	1000683a 	jmp	r2
    1a10:	00001bd4 	movui	zero,111
    1a14:	00001a38 	rdprs	zero,zero,104
    1a18:	00001a90 	cmplti	zero,zero,106
    1a1c:	00001abc 	xorhi	zero,zero,106
    1a20:	00001b14 	movui	zero,108
    1a24:	00001b40 	call	1b4 <alt_irq_handler+0xac>
    1a28:	00001b5c 	xori	zero,zero,109
    1a2c:	00001b7c 	xorhi	zero,zero,109
    1a30:	00001b9c 	xori	zero,zero,110
    1a34:	00001bbc 	xorhi	zero,zero,110
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    1a38:	e0bffd17 	ldw	r2,-12(fp)
    1a3c:	10800517 	ldw	r2,20(r2)
    1a40:	1080100c 	andi	r2,r2,64
    1a44:	10000f1e 	bne	r2,zero,1a84 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
    1a48:	e0bffd17 	ldw	r2,-12(fp)
    1a4c:	10800017 	ldw	r2,0(r2)
    1a50:	10800104 	addi	r2,r2,4
    1a54:	e0ffff17 	ldw	r3,-4(fp)
    1a58:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
    1a5c:	e0bffd17 	ldw	r2,-12(fp)
    1a60:	10800517 	ldw	r2,20(r2)
    1a64:	10c00814 	ori	r3,r2,32
    1a68:	e0bffd17 	ldw	r2,-12(fp)
    1a6c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
    1a70:	e0fffd17 	ldw	r3,-12(fp)
    1a74:	00800034 	movhi	r2,0
    1a78:	10863b04 	addi	r2,r2,6380
    1a7c:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    1a80:	00005606 	br	1bdc <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
    1a84:	00bffec4 	movi	r2,-5
    1a88:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    1a8c:	00005306 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
    1a90:	e0bffd17 	ldw	r2,-12(fp)
    1a94:	10c00517 	ldw	r3,20(r2)
    1a98:	00bff7c4 	movi	r2,-33
    1a9c:	1886703a 	and	r3,r3,r2
    1aa0:	e0bffd17 	ldw	r2,-12(fp)
    1aa4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    1aa8:	e0fffd17 	ldw	r3,-12(fp)
    1aac:	00800034 	movhi	r2,0
    1ab0:	1085d604 	addi	r2,r2,5976
    1ab4:	18800715 	stw	r2,28(r3)
    break;
    1ab8:	00004806 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	10800517 	ldw	r2,20(r2)
    1ac4:	1080080c 	andi	r2,r2,32
    1ac8:	10000f1e 	bne	r2,zero,1b08 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
    1acc:	e0bffd17 	ldw	r2,-12(fp)
    1ad0:	10800017 	ldw	r2,0(r2)
    1ad4:	10800204 	addi	r2,r2,8
    1ad8:	e0ffff17 	ldw	r3,-4(fp)
    1adc:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
    1ae0:	e0bffd17 	ldw	r2,-12(fp)
    1ae4:	10800517 	ldw	r2,20(r2)
    1ae8:	10c01014 	ori	r3,r2,64
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
    1af4:	e0fffd17 	ldw	r3,-12(fp)
    1af8:	00800034 	movhi	r2,0
    1afc:	10861404 	addi	r2,r2,6224
    1b00:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    1b04:	00003506 	br	1bdc <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
    1b08:	00bffec4 	movi	r2,-5
    1b0c:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    1b10:	00003206 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
    1b14:	e0bffd17 	ldw	r2,-12(fp)
    1b18:	10c00517 	ldw	r3,20(r2)
    1b1c:	00bfefc4 	movi	r2,-65
    1b20:	1886703a 	and	r3,r3,r2
    1b24:	e0bffd17 	ldw	r2,-12(fp)
    1b28:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    1b2c:	e0fffd17 	ldw	r3,-12(fp)
    1b30:	00800034 	movhi	r2,0
    1b34:	1085d604 	addi	r2,r2,5976
    1b38:	18800715 	stw	r2,28(r3)
    break;
    1b3c:	00002706 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10c00517 	ldw	r3,20(r2)
    1b48:	00bffc04 	movi	r2,-16
    1b4c:	1886703a 	and	r3,r3,r2
    1b50:	e0bffd17 	ldw	r2,-12(fp)
    1b54:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
    1b58:	00002006 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    1b5c:	e0bffd17 	ldw	r2,-12(fp)
    1b60:	10c00517 	ldw	r3,20(r2)
    1b64:	00bffc04 	movi	r2,-16
    1b68:	1884703a 	and	r2,r3,r2
    1b6c:	10c00054 	ori	r3,r2,1
    1b70:	e0bffd17 	ldw	r2,-12(fp)
    1b74:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
    1b78:	00001806 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10c00517 	ldw	r3,20(r2)
    1b84:	00bffc04 	movi	r2,-16
    1b88:	1884703a 	and	r2,r3,r2
    1b8c:	10c000d4 	ori	r3,r2,3
    1b90:	e0bffd17 	ldw	r2,-12(fp)
    1b94:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
    1b98:	00001006 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    1b9c:	e0bffd17 	ldw	r2,-12(fp)
    1ba0:	10c00517 	ldw	r3,20(r2)
    1ba4:	00bffc04 	movi	r2,-16
    1ba8:	1884703a 	and	r2,r3,r2
    1bac:	10c001d4 	ori	r3,r2,7
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
    1bb8:	00000806 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    1bbc:	e0bffd17 	ldw	r2,-12(fp)
    1bc0:	10800517 	ldw	r2,20(r2)
    1bc4:	10c003d4 	ori	r3,r2,15
    1bc8:	e0bffd17 	ldw	r2,-12(fp)
    1bcc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
    1bd0:	00000206 	br	1bdc <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
    1bd4:	00bff9c4 	movi	r2,-25
    1bd8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
    1bdc:	e0bffb17 	ldw	r2,-20(fp)
    1be0:	1000351e 	bne	r2,zero,1cb8 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    1be4:	e0bffd17 	ldw	r2,-12(fp)
    1be8:	10800517 	ldw	r2,20(r2)
    1bec:	108003cc 	andi	r2,r2,15
    1bf0:	10c00060 	cmpeqi	r3,r2,1
    1bf4:	1800091e 	bne	r3,zero,1c1c <alt_avalon_dma_ioctl+0x294>
    1bf8:	0080052e 	bgeu	zero,r2,1c10 <alt_avalon_dma_ioctl+0x288>
    1bfc:	10c000e0 	cmpeqi	r3,r2,3
    1c00:	1800091e 	bne	r3,zero,1c28 <alt_avalon_dma_ioctl+0x2a0>
    1c04:	108001e0 	cmpeqi	r2,r2,7
    1c08:	10000a1e 	bne	r2,zero,1c34 <alt_avalon_dma_ioctl+0x2ac>
    1c0c:	00000c06 	br	1c40 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
    1c10:	00800044 	movi	r2,1
    1c14:	e0bffc15 	stw	r2,-16(fp)
       break;
    1c18:	00000b06 	br	1c48 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
    1c1c:	00800084 	movi	r2,2
    1c20:	e0bffc15 	stw	r2,-16(fp)
       break;
    1c24:	00000806 	br	1c48 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
    1c28:	00800104 	movi	r2,4
    1c2c:	e0bffc15 	stw	r2,-16(fp)
       break;
    1c30:	00000506 	br	1c48 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
    1c34:	00810004 	movi	r2,1024
    1c38:	e0bffc15 	stw	r2,-16(fp)
       break;
    1c3c:	00000206 	br	1c48 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
    1c40:	00820004 	movi	r2,2048
    1c44:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
    1c48:	e0bffd17 	ldw	r2,-12(fp)
    1c4c:	10800517 	ldw	r2,20(r2)
    1c50:	1080080c 	andi	r2,r2,32
    1c54:	10000726 	beq	r2,zero,1c74 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    1c58:	e0bffd17 	ldw	r2,-12(fp)
    1c5c:	10800017 	ldw	r2,0(r2)
    1c60:	10800604 	addi	r2,r2,24
    1c64:	e0fffc17 	ldw	r3,-16(fp)
    1c68:	18c07e14 	ori	r3,r3,504
    1c6c:	10c00035 	stwio	r3,0(r2)
    1c70:	00001106 	br	1cb8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	10800517 	ldw	r2,20(r2)
    1c7c:	1080100c 	andi	r2,r2,64
    1c80:	10000726 	beq	r2,zero,1ca0 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    1c84:	e0bffd17 	ldw	r2,-12(fp)
    1c88:	10800017 	ldw	r2,0(r2)
    1c8c:	10800604 	addi	r2,r2,24
    1c90:	e0fffc17 	ldw	r3,-16(fp)
    1c94:	18c0be14 	ori	r3,r3,760
    1c98:	10c00035 	stwio	r3,0(r2)
    1c9c:	00000606 	br	1cb8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    1ca0:	e0bffd17 	ldw	r2,-12(fp)
    1ca4:	10800017 	ldw	r2,0(r2)
    1ca8:	10800604 	addi	r2,r2,24
    1cac:	e0fffc17 	ldw	r3,-16(fp)
    1cb0:	18c03e14 	ori	r3,r3,248
    1cb4:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
    1cb8:	e0bffb17 	ldw	r2,-20(fp)
}
    1cbc:	e037883a 	mov	sp,fp
    1cc0:	df000017 	ldw	fp,0(sp)
    1cc4:	dec00104 	addi	sp,sp,4
    1cc8:	f800283a 	ret

00001ccc <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
    1ccc:	defffb04 	addi	sp,sp,-20
    1cd0:	dfc00415 	stw	ra,16(sp)
    1cd4:	df000315 	stw	fp,12(sp)
    1cd8:	df000304 	addi	fp,sp,12
    1cdc:	e13ffd15 	stw	r4,-12(fp)
    1ce0:	e17ffe15 	stw	r5,-8(fp)
    1ce4:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
    1ce8:	e0bffd17 	ldw	r2,-12(fp)
    1cec:	10800617 	ldw	r2,24(r2)
    1cf0:	e1bfff17 	ldw	r6,-4(fp)
    1cf4:	e17ffe17 	ldw	r5,-8(fp)
    1cf8:	1009883a 	mov	r4,r2
    1cfc:	00019880 	call	1988 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    1d00:	e037883a 	mov	sp,fp
    1d04:	dfc00117 	ldw	ra,4(sp)
    1d08:	df000017 	ldw	fp,0(sp)
    1d0c:	dec00204 	addi	sp,sp,8
    1d10:	f800283a 	ret

00001d14 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
    1d14:	defffb04 	addi	sp,sp,-20
    1d18:	dfc00415 	stw	ra,16(sp)
    1d1c:	df000315 	stw	fp,12(sp)
    1d20:	df000304 	addi	fp,sp,12
    1d24:	e13ffd15 	stw	r4,-12(fp)
    1d28:	e17ffe15 	stw	r5,-8(fp)
    1d2c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
    1d30:	e0bffd17 	ldw	r2,-12(fp)
    1d34:	10800617 	ldw	r2,24(r2)
    1d38:	e1bfff17 	ldw	r6,-4(fp)
    1d3c:	e17ffe17 	ldw	r5,-8(fp)
    1d40:	1009883a 	mov	r4,r2
    1d44:	00019880 	call	1988 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	dfc00117 	ldw	ra,4(sp)
    1d50:	df000017 	ldw	fp,0(sp)
    1d54:	dec00204 	addi	sp,sp,8
    1d58:	f800283a 	ret

00001d5c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    1d5c:	defff404 	addi	sp,sp,-48
    1d60:	dfc00b15 	stw	ra,44(sp)
    1d64:	df000a15 	stw	fp,40(sp)
    1d68:	df000a04 	addi	fp,sp,40
    1d6c:	e13ffc15 	stw	r4,-16(fp)
    1d70:	e17ffd15 	stw	r5,-12(fp)
    1d74:	e1bffe15 	stw	r6,-8(fp)
    1d78:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
    1d7c:	e0bffc17 	ldw	r2,-16(fp)
    1d80:	10800617 	ldw	r2,24(r2)
    1d84:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    1d88:	e0bff617 	ldw	r2,-40(fp)
    1d8c:	10800517 	ldw	r2,20(r2)
    1d90:	108003cc 	andi	r2,r2,15
    1d94:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    1d98:	e0fffd17 	ldw	r3,-12(fp)
    1d9c:	e0bff717 	ldw	r2,-36(fp)
    1da0:	1884703a 	and	r2,r3,r2
    1da4:	1000081e 	bne	r2,zero,1dc8 <alt_avalon_dma_prepare+0x6c>
    1da8:	e0fffe17 	ldw	r3,-8(fp)
    1dac:	e0bff717 	ldw	r2,-36(fp)
    1db0:	1884703a 	and	r2,r3,r2
    1db4:	1000041e 	bne	r2,zero,1dc8 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
    1db8:	e0bff617 	ldw	r2,-40(fp)
    1dbc:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    1dc0:	e0bffe17 	ldw	r2,-8(fp)
    1dc4:	1880022e 	bgeu	r3,r2,1dd0 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
    1dc8:	00bffa84 	movi	r2,-22
    1dcc:	00002c06 	br	1e80 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
    1dd0:	e0bff617 	ldw	r2,-40(fp)
    1dd4:	10800317 	ldw	r2,12(r2)
    1dd8:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
    1ddc:	e0bff617 	ldw	r2,-40(fp)
    1de0:	10800417 	ldw	r2,16(r2)
    1de4:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
    1de8:	e0bff917 	ldw	r2,-28(fp)
    1dec:	1004913a 	slli	r2,r2,4
    1df0:	10801904 	addi	r2,r2,100
    1df4:	e0fff617 	ldw	r3,-40(fp)
    1df8:	1885883a 	add	r2,r3,r2
    1dfc:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    1e00:	e0bff917 	ldw	r2,-28(fp)
    1e04:	10800044 	addi	r2,r2,1
    1e08:	108000cc 	andi	r2,r2,3
    1e0c:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    1e10:	e0fffb17 	ldw	r3,-20(fp)
    1e14:	e0bff817 	ldw	r2,-32(fp)
    1e18:	1880021e 	bne	r3,r2,1e24 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
    1e1c:	00bff904 	movi	r2,-28
    1e20:	00001706 	br	1e80 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
    1e24:	e0bffa17 	ldw	r2,-24(fp)
    1e28:	e0fffd17 	ldw	r3,-12(fp)
    1e2c:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    1e30:	e0bffa17 	ldw	r2,-24(fp)
    1e34:	e0fffe17 	ldw	r3,-8(fp)
    1e38:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    1e3c:	e0bffa17 	ldw	r2,-24(fp)
    1e40:	e0ffff17 	ldw	r3,-4(fp)
    1e44:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    1e48:	e0bffa17 	ldw	r2,-24(fp)
    1e4c:	e0c00217 	ldw	r3,8(fp)
    1e50:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
    1e54:	e0bff617 	ldw	r2,-40(fp)
    1e58:	e0fffb17 	ldw	r3,-20(fp)
    1e5c:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
    1e60:	e0bff617 	ldw	r2,-40(fp)
    1e64:	10800817 	ldw	r2,32(r2)
    1e68:	1000041e 	bne	r2,zero,1e7c <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
    1e6c:	e0bff617 	ldw	r2,-40(fp)
    1e70:	10800717 	ldw	r2,28(r2)
    1e74:	e13ff617 	ldw	r4,-40(fp)
    1e78:	103ee83a 	callr	r2
  }

  return 0;
    1e7c:	0005883a 	mov	r2,zero
}
    1e80:	e037883a 	mov	sp,fp
    1e84:	dfc00117 	ldw	ra,4(sp)
    1e88:	df000017 	ldw	fp,0(sp)
    1e8c:	dec00204 	addi	sp,sp,8
    1e90:	f800283a 	ret

00001e94 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
    1e94:	defffb04 	addi	sp,sp,-20
    1e98:	df000415 	stw	fp,16(sp)
    1e9c:	df000404 	addi	fp,sp,16
    1ea0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    1ea4:	e0bfff17 	ldw	r2,-4(fp)
    1ea8:	10800617 	ldw	r2,24(r2)
    1eac:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
    1eb0:	e0bffc17 	ldw	r2,-16(fp)
    1eb4:	10800117 	ldw	r2,4(r2)
    1eb8:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
    1ebc:	e0bffc17 	ldw	r2,-16(fp)
    1ec0:	10800217 	ldw	r2,8(r2)
    1ec4:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
    1ec8:	e0bffd17 	ldw	r2,-12(fp)
    1ecc:	e0fffe17 	ldw	r3,-8(fp)
    1ed0:	1880052e 	bgeu	r3,r2,1ee8 <alt_avalon_dma_space+0x54>
    1ed4:	e0fffd17 	ldw	r3,-12(fp)
    1ed8:	e0bffe17 	ldw	r2,-8(fp)
    1edc:	1885c83a 	sub	r2,r3,r2
    1ee0:	10bfffc4 	addi	r2,r2,-1
    1ee4:	00000406 	br	1ef8 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
    1ee8:	e0fffd17 	ldw	r3,-12(fp)
    1eec:	e0bffe17 	ldw	r2,-8(fp)
    1ef0:	1885c83a 	sub	r2,r3,r2
    1ef4:	108000c4 	addi	r2,r2,3
}
    1ef8:	e037883a 	mov	sp,fp
    1efc:	df000017 	ldw	fp,0(sp)
    1f00:	dec00104 	addi	sp,sp,4
    1f04:	f800283a 	ret

00001f08 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    1f08:	defff404 	addi	sp,sp,-48
    1f0c:	dfc00b15 	stw	ra,44(sp)
    1f10:	df000a15 	stw	fp,40(sp)
    1f14:	df000a04 	addi	fp,sp,40
    1f18:	e13ffc15 	stw	r4,-16(fp)
    1f1c:	e17ffd15 	stw	r5,-12(fp)
    1f20:	e1bffe15 	stw	r6,-8(fp)
    1f24:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    1f28:	e0bffc17 	ldw	r2,-16(fp)
    1f2c:	10800617 	ldw	r2,24(r2)
    1f30:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    1f34:	e0bff617 	ldw	r2,-40(fp)
    1f38:	10800517 	ldw	r2,20(r2)
    1f3c:	108003cc 	andi	r2,r2,15
    1f40:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
    1f44:	e0fffd17 	ldw	r3,-12(fp)
    1f48:	e0bff717 	ldw	r2,-36(fp)
    1f4c:	1884703a 	and	r2,r3,r2
    1f50:	1000081e 	bne	r2,zero,1f74 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
    1f54:	e0fffe17 	ldw	r3,-8(fp)
    1f58:	e0bff717 	ldw	r2,-36(fp)
    1f5c:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
    1f60:	1000041e 	bne	r2,zero,1f74 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
    1f64:	e0bff617 	ldw	r2,-40(fp)
    1f68:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	1880022e 	bgeu	r3,r2,1f7c <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
    1f74:	00bffa84 	movi	r2,-22
    1f78:	00002c06 	br	202c <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
    1f7c:	e0bff617 	ldw	r2,-40(fp)
    1f80:	10800117 	ldw	r2,4(r2)
    1f84:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
    1f88:	e0bff617 	ldw	r2,-40(fp)
    1f8c:	10800217 	ldw	r2,8(r2)
    1f90:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
    1f94:	e0bff917 	ldw	r2,-28(fp)
    1f98:	1004913a 	slli	r2,r2,4
    1f9c:	10800904 	addi	r2,r2,36
    1fa0:	e0fff617 	ldw	r3,-40(fp)
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    1fac:	e0bff917 	ldw	r2,-28(fp)
    1fb0:	10800044 	addi	r2,r2,1
    1fb4:	108000cc 	andi	r2,r2,3
    1fb8:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    1fbc:	e0fffb17 	ldw	r3,-20(fp)
    1fc0:	e0bff817 	ldw	r2,-32(fp)
    1fc4:	1880021e 	bne	r3,r2,1fd0 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
    1fc8:	00bff904 	movi	r2,-28
    1fcc:	00001706 	br	202c <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
    1fd0:	e0bffa17 	ldw	r2,-24(fp)
    1fd4:	e0fffd17 	ldw	r3,-12(fp)
    1fd8:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    1fdc:	e0bffa17 	ldw	r2,-24(fp)
    1fe0:	e0fffe17 	ldw	r3,-8(fp)
    1fe4:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    1fe8:	e0bffa17 	ldw	r2,-24(fp)
    1fec:	e0ffff17 	ldw	r3,-4(fp)
    1ff0:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    1ff4:	e0bffa17 	ldw	r2,-24(fp)
    1ff8:	e0c00217 	ldw	r3,8(fp)
    1ffc:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
    2000:	e0bff617 	ldw	r2,-40(fp)
    2004:	e0fffb17 	ldw	r3,-20(fp)
    2008:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
    200c:	e0bff617 	ldw	r2,-40(fp)
    2010:	10800817 	ldw	r2,32(r2)
    2014:	1000041e 	bne	r2,zero,2028 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
    2018:	e0bff617 	ldw	r2,-40(fp)
    201c:	10800717 	ldw	r2,28(r2)
    2020:	e13ff617 	ldw	r4,-40(fp)
    2024:	103ee83a 	callr	r2
  }

  return 0;
    2028:	0005883a 	mov	r2,zero
}
    202c:	e037883a 	mov	sp,fp
    2030:	dfc00117 	ldw	ra,4(sp)
    2034:	df000017 	ldw	fp,0(sp)
    2038:	dec00204 	addi	sp,sp,8
    203c:	f800283a 	ret

00002040 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    2040:	defff104 	addi	sp,sp,-60
    2044:	dfc00e15 	stw	ra,56(sp)
    2048:	df000d15 	stw	fp,52(sp)
    204c:	df000d04 	addi	fp,sp,52
    2050:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
    2054:	e0bfff17 	ldw	r2,-4(fp)
    2058:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    205c:	e0bff317 	ldw	r2,-52(fp)
    2060:	10800517 	ldw	r2,20(r2)
    2064:	1080080c 	andi	r2,r2,32
    2068:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
    206c:	e0bff317 	ldw	r2,-52(fp)
    2070:	10800517 	ldw	r2,20(r2)
    2074:	1080100c 	andi	r2,r2,64
    2078:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
    207c:	e0bff317 	ldw	r2,-52(fp)
    2080:	10800117 	ldw	r2,4(r2)
    2084:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
    2088:	e0bff317 	ldw	r2,-52(fp)
    208c:	10800317 	ldw	r2,12(r2)
    2090:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
    2094:	e0bff617 	ldw	r2,-40(fp)
    2098:	1004913a 	slli	r2,r2,4
    209c:	10800904 	addi	r2,r2,36
    20a0:	e0fff317 	ldw	r3,-52(fp)
    20a4:	1885883a 	add	r2,r3,r2
    20a8:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
    20ac:	e0bff717 	ldw	r2,-36(fp)
    20b0:	1004913a 	slli	r2,r2,4
    20b4:	10801904 	addi	r2,r2,100
    20b8:	e0fff317 	ldw	r3,-52(fp)
    20bc:	1885883a 	add	r2,r3,r2
    20c0:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
    20c4:	e0bff417 	ldw	r2,-48(fp)
    20c8:	1000051e 	bne	r2,zero,20e0 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    20cc:	e0bff617 	ldw	r2,-40(fp)
    20d0:	10800044 	addi	r2,r2,1
    20d4:	10c000cc 	andi	r3,r2,3
    20d8:	e0bff317 	ldw	r2,-52(fp)
    20dc:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
    20e0:	e0bff517 	ldw	r2,-44(fp)
    20e4:	1000051e 	bne	r2,zero,20fc <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    20e8:	e0bff717 	ldw	r2,-36(fp)
    20ec:	10800044 	addi	r2,r2,1
    20f0:	10c000cc 	andi	r3,r2,3
    20f4:	e0bff317 	ldw	r2,-52(fp)
    20f8:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
    20fc:	e0bff317 	ldw	r2,-52(fp)
    2100:	10800017 	ldw	r2,0(r2)
    2104:	0007883a 	mov	r3,zero
    2108:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
    210c:	e0bff317 	ldw	r2,-52(fp)
    2110:	10800017 	ldw	r2,0(r2)
    2114:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
    2118:	e0bff317 	ldw	r2,-52(fp)
    211c:	10800717 	ldw	r2,28(r2)
    2120:	e13ff317 	ldw	r4,-52(fp)
    2124:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
    2128:	e0bff417 	ldw	r2,-48(fp)
    212c:	1000151e 	bne	r2,zero,2184 <alt_avalon_dma_irq+0x144>
    2130:	e0bff817 	ldw	r2,-32(fp)
    2134:	10800217 	ldw	r2,8(r2)
    2138:	10001226 	beq	r2,zero,2184 <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    213c:	0005303a 	rdctl	r2,status
    2140:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2144:	e0fffc17 	ldw	r3,-16(fp)
    2148:	00bfff84 	movi	r2,-2
    214c:	1884703a 	and	r2,r3,r2
    2150:	1001703a 	wrctl	status,r2
  
  return context;
    2154:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
    2158:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
    215c:	e0bff817 	ldw	r2,-32(fp)
    2160:	10800217 	ldw	r2,8(r2)
    2164:	e0fff817 	ldw	r3,-32(fp)
    2168:	18c00317 	ldw	r3,12(r3)
    216c:	1809883a 	mov	r4,r3
    2170:	103ee83a 	callr	r2
    2174:	e0bffb17 	ldw	r2,-20(fp)
    2178:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    217c:	e0bffe17 	ldw	r2,-8(fp)
    2180:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
    2184:	e0bff517 	ldw	r2,-44(fp)
    2188:	1000171e 	bne	r2,zero,21e8 <alt_avalon_dma_irq+0x1a8>
    218c:	e0bff917 	ldw	r2,-28(fp)
    2190:	10800217 	ldw	r2,8(r2)
    2194:	10001426 	beq	r2,zero,21e8 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2198:	0005303a 	rdctl	r2,status
    219c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21a0:	e0fffd17 	ldw	r3,-12(fp)
    21a4:	00bfff84 	movi	r2,-2
    21a8:	1884703a 	and	r2,r3,r2
    21ac:	1001703a 	wrctl	status,r2
  
  return context;
    21b0:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
    21b4:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
    21b8:	e0bff917 	ldw	r2,-28(fp)
    21bc:	10800217 	ldw	r2,8(r2)
    21c0:	e0fff917 	ldw	r3,-28(fp)
    21c4:	19000317 	ldw	r4,12(r3)
    21c8:	e0fff917 	ldw	r3,-28(fp)
    21cc:	18c00017 	ldw	r3,0(r3)
    21d0:	180b883a 	mov	r5,r3
    21d4:	103ee83a 	callr	r2
    21d8:	e0bffb17 	ldw	r2,-20(fp)
    21dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21e0:	e0bffa17 	ldw	r2,-24(fp)
    21e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    21e8:	0001883a 	nop
    21ec:	e037883a 	mov	sp,fp
    21f0:	dfc00117 	ldw	ra,4(sp)
    21f4:	df000017 	ldw	fp,0(sp)
    21f8:	dec00204 	addi	sp,sp,8
    21fc:	f800283a 	ret

00002200 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
    2200:	defff904 	addi	sp,sp,-28
    2204:	dfc00615 	stw	ra,24(sp)
    2208:	df000515 	stw	fp,20(sp)
    220c:	df000504 	addi	fp,sp,20
    2210:	e13ffc15 	stw	r4,-16(fp)
    2214:	e17ffd15 	stw	r5,-12(fp)
    2218:	e1bffe15 	stw	r6,-8(fp)
    221c:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    2220:	e0bffe17 	ldw	r2,-8(fp)
    2224:	10800604 	addi	r2,r2,24
    2228:	00c40004 	movi	r3,4096
    222c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    2230:	e0bffe17 	ldw	r2,-8(fp)
    2234:	10800604 	addi	r2,r2,24
    2238:	00c40004 	movi	r3,4096
    223c:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
    2240:	e0bffe17 	ldw	r2,-8(fp)
    2244:	10800604 	addi	r2,r2,24
    2248:	00c03f04 	movi	r3,252
    224c:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
    2250:	0007883a 	mov	r3,zero
    2254:	e0bffe17 	ldw	r2,-8(fp)
    2258:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
    225c:	e0bffc17 	ldw	r2,-16(fp)
    2260:	10800617 	ldw	r2,24(r2)
    2264:	d8000015 	stw	zero,0(sp)
    2268:	100f883a 	mov	r7,r2
    226c:	01800034 	movhi	r6,0
    2270:	31881004 	addi	r6,r6,8256
    2274:	e1400217 	ldw	r5,8(fp)
    2278:	e13fff17 	ldw	r4,-4(fp)
    227c:	00033180 	call	3318 <alt_ic_isr_register>
    2280:	10000616 	blt	r2,zero,229c <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    2284:	e0bffc17 	ldw	r2,-16(fp)
    2288:	1009883a 	mov	r4,r2
    228c:	00016f00 	call	16f0 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
    2290:	e0bffd17 	ldw	r2,-12(fp)
    2294:	1009883a 	mov	r4,r2
    2298:	00017240 	call	1724 <alt_dma_rxchan_reg>
  }
}
    229c:	0001883a 	nop
    22a0:	e037883a 	mov	sp,fp
    22a4:	dfc00117 	ldw	ra,4(sp)
    22a8:	df000017 	ldw	fp,0(sp)
    22ac:	dec00204 	addi	sp,sp,8
    22b0:	f800283a 	ret

000022b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    22b4:	defffa04 	addi	sp,sp,-24
    22b8:	dfc00515 	stw	ra,20(sp)
    22bc:	df000415 	stw	fp,16(sp)
    22c0:	df000404 	addi	fp,sp,16
    22c4:	e13ffd15 	stw	r4,-12(fp)
    22c8:	e17ffe15 	stw	r5,-8(fp)
    22cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	10800017 	ldw	r2,0(r2)
    22d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    22dc:	e0bffc17 	ldw	r2,-16(fp)
    22e0:	10c00a04 	addi	r3,r2,40
    22e4:	e0bffd17 	ldw	r2,-12(fp)
    22e8:	10800217 	ldw	r2,8(r2)
    22ec:	100f883a 	mov	r7,r2
    22f0:	e1bfff17 	ldw	r6,-4(fp)
    22f4:	e17ffe17 	ldw	r5,-8(fp)
    22f8:	1809883a 	mov	r4,r3
    22fc:	00028dc0 	call	28dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    2300:	e037883a 	mov	sp,fp
    2304:	dfc00117 	ldw	ra,4(sp)
    2308:	df000017 	ldw	fp,0(sp)
    230c:	dec00204 	addi	sp,sp,8
    2310:	f800283a 	ret

00002314 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    2314:	defffa04 	addi	sp,sp,-24
    2318:	dfc00515 	stw	ra,20(sp)
    231c:	df000415 	stw	fp,16(sp)
    2320:	df000404 	addi	fp,sp,16
    2324:	e13ffd15 	stw	r4,-12(fp)
    2328:	e17ffe15 	stw	r5,-8(fp)
    232c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2330:	e0bffd17 	ldw	r2,-12(fp)
    2334:	10800017 	ldw	r2,0(r2)
    2338:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    233c:	e0bffc17 	ldw	r2,-16(fp)
    2340:	10c00a04 	addi	r3,r2,40
    2344:	e0bffd17 	ldw	r2,-12(fp)
    2348:	10800217 	ldw	r2,8(r2)
    234c:	100f883a 	mov	r7,r2
    2350:	e1bfff17 	ldw	r6,-4(fp)
    2354:	e17ffe17 	ldw	r5,-8(fp)
    2358:	1809883a 	mov	r4,r3
    235c:	0002af80 	call	2af8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    2360:	e037883a 	mov	sp,fp
    2364:	dfc00117 	ldw	ra,4(sp)
    2368:	df000017 	ldw	fp,0(sp)
    236c:	dec00204 	addi	sp,sp,8
    2370:	f800283a 	ret

00002374 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    2374:	defffc04 	addi	sp,sp,-16
    2378:	dfc00315 	stw	ra,12(sp)
    237c:	df000215 	stw	fp,8(sp)
    2380:	df000204 	addi	fp,sp,8
    2384:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2388:	e0bfff17 	ldw	r2,-4(fp)
    238c:	10800017 	ldw	r2,0(r2)
    2390:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    2394:	e0bffe17 	ldw	r2,-8(fp)
    2398:	10c00a04 	addi	r3,r2,40
    239c:	e0bfff17 	ldw	r2,-4(fp)
    23a0:	10800217 	ldw	r2,8(r2)
    23a4:	100b883a 	mov	r5,r2
    23a8:	1809883a 	mov	r4,r3
    23ac:	00027840 	call	2784 <altera_avalon_jtag_uart_close>
}
    23b0:	e037883a 	mov	sp,fp
    23b4:	dfc00117 	ldw	ra,4(sp)
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00204 	addi	sp,sp,8
    23c0:	f800283a 	ret

000023c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    23c4:	defffa04 	addi	sp,sp,-24
    23c8:	dfc00515 	stw	ra,20(sp)
    23cc:	df000415 	stw	fp,16(sp)
    23d0:	df000404 	addi	fp,sp,16
    23d4:	e13ffd15 	stw	r4,-12(fp)
    23d8:	e17ffe15 	stw	r5,-8(fp)
    23dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    23e0:	e0bffd17 	ldw	r2,-12(fp)
    23e4:	10800017 	ldw	r2,0(r2)
    23e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    23ec:	e0bffc17 	ldw	r2,-16(fp)
    23f0:	10800a04 	addi	r2,r2,40
    23f4:	e1bfff17 	ldw	r6,-4(fp)
    23f8:	e17ffe17 	ldw	r5,-8(fp)
    23fc:	1009883a 	mov	r4,r2
    2400:	00027ec0 	call	27ec <altera_avalon_jtag_uart_ioctl>
}
    2404:	e037883a 	mov	sp,fp
    2408:	dfc00117 	ldw	ra,4(sp)
    240c:	df000017 	ldw	fp,0(sp)
    2410:	dec00204 	addi	sp,sp,8
    2414:	f800283a 	ret

00002418 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2418:	defffa04 	addi	sp,sp,-24
    241c:	dfc00515 	stw	ra,20(sp)
    2420:	df000415 	stw	fp,16(sp)
    2424:	df000404 	addi	fp,sp,16
    2428:	e13ffd15 	stw	r4,-12(fp)
    242c:	e17ffe15 	stw	r5,-8(fp)
    2430:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2434:	e0bffd17 	ldw	r2,-12(fp)
    2438:	00c00044 	movi	r3,1
    243c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    2440:	e0bffd17 	ldw	r2,-12(fp)
    2444:	10800017 	ldw	r2,0(r2)
    2448:	10800104 	addi	r2,r2,4
    244c:	1007883a 	mov	r3,r2
    2450:	e0bffd17 	ldw	r2,-12(fp)
    2454:	10800817 	ldw	r2,32(r2)
    2458:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    245c:	e0bffe17 	ldw	r2,-8(fp)
    2460:	e0ffff17 	ldw	r3,-4(fp)
    2464:	d8000015 	stw	zero,0(sp)
    2468:	e1fffd17 	ldw	r7,-12(fp)
    246c:	01800034 	movhi	r6,0
    2470:	31893604 	addi	r6,r6,9432
    2474:	180b883a 	mov	r5,r3
    2478:	1009883a 	mov	r4,r2
    247c:	00033180 	call	3318 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    2480:	e0bffd17 	ldw	r2,-12(fp)
    2484:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    2488:	e0bffd17 	ldw	r2,-12(fp)
    248c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2490:	d0e6ee17 	ldw	r3,-25672(gp)
    2494:	e1fffd17 	ldw	r7,-12(fp)
    2498:	01800034 	movhi	r6,0
    249c:	3189b904 	addi	r6,r6,9956
    24a0:	180b883a 	mov	r5,r3
    24a4:	1009883a 	mov	r4,r2
    24a8:	0002d1c0 	call	2d1c <alt_alarm_start>
    24ac:	1000040e 	bge	r2,zero,24c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    24b0:	e0fffd17 	ldw	r3,-12(fp)
    24b4:	00a00034 	movhi	r2,32768
    24b8:	10bfffc4 	addi	r2,r2,-1
    24bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    24c0:	0001883a 	nop
    24c4:	e037883a 	mov	sp,fp
    24c8:	dfc00117 	ldw	ra,4(sp)
    24cc:	df000017 	ldw	fp,0(sp)
    24d0:	dec00204 	addi	sp,sp,8
    24d4:	f800283a 	ret

000024d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    24d8:	defff804 	addi	sp,sp,-32
    24dc:	df000715 	stw	fp,28(sp)
    24e0:	df000704 	addi	fp,sp,28
    24e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    24f0:	e0bffb17 	ldw	r2,-20(fp)
    24f4:	10800017 	ldw	r2,0(r2)
    24f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    24fc:	e0bffc17 	ldw	r2,-16(fp)
    2500:	10800104 	addi	r2,r2,4
    2504:	10800037 	ldwio	r2,0(r2)
    2508:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    250c:	e0bffd17 	ldw	r2,-12(fp)
    2510:	1080c00c 	andi	r2,r2,768
    2514:	10006d26 	beq	r2,zero,26cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    2518:	e0bffd17 	ldw	r2,-12(fp)
    251c:	1080400c 	andi	r2,r2,256
    2520:	10003526 	beq	r2,zero,25f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    2524:	00800074 	movhi	r2,1
    2528:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    252c:	e0bffb17 	ldw	r2,-20(fp)
    2530:	10800a17 	ldw	r2,40(r2)
    2534:	10800044 	addi	r2,r2,1
    2538:	1081ffcc 	andi	r2,r2,2047
    253c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    2540:	e0bffb17 	ldw	r2,-20(fp)
    2544:	10c00b17 	ldw	r3,44(r2)
    2548:	e0bffe17 	ldw	r2,-8(fp)
    254c:	18801526 	beq	r3,r2,25a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    2550:	e0bffc17 	ldw	r2,-16(fp)
    2554:	10800037 	ldwio	r2,0(r2)
    2558:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    255c:	e0bff917 	ldw	r2,-28(fp)
    2560:	10a0000c 	andi	r2,r2,32768
    2564:	10001126 	beq	r2,zero,25ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2568:	e0bffb17 	ldw	r2,-20(fp)
    256c:	10800a17 	ldw	r2,40(r2)
    2570:	e0fff917 	ldw	r3,-28(fp)
    2574:	1809883a 	mov	r4,r3
    2578:	e0fffb17 	ldw	r3,-20(fp)
    257c:	1885883a 	add	r2,r3,r2
    2580:	10800e04 	addi	r2,r2,56
    2584:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2588:	e0bffb17 	ldw	r2,-20(fp)
    258c:	10800a17 	ldw	r2,40(r2)
    2590:	10800044 	addi	r2,r2,1
    2594:	10c1ffcc 	andi	r3,r2,2047
    2598:	e0bffb17 	ldw	r2,-20(fp)
    259c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    25a0:	003fe206 	br	252c <__alt_exception_stack_pointer+0xf800252c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    25a4:	0001883a 	nop
    25a8:	00000106 	br	25b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    25ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    25b0:	e0bff917 	ldw	r2,-28(fp)
    25b4:	10bfffec 	andhi	r2,r2,65535
    25b8:	10000f26 	beq	r2,zero,25f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    25bc:	e0bffb17 	ldw	r2,-20(fp)
    25c0:	10c00817 	ldw	r3,32(r2)
    25c4:	00bfff84 	movi	r2,-2
    25c8:	1886703a 	and	r3,r3,r2
    25cc:	e0bffb17 	ldw	r2,-20(fp)
    25d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    25d4:	e0bffc17 	ldw	r2,-16(fp)
    25d8:	10800104 	addi	r2,r2,4
    25dc:	1007883a 	mov	r3,r2
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	10800817 	ldw	r2,32(r2)
    25e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    25ec:	e0bffc17 	ldw	r2,-16(fp)
    25f0:	10800104 	addi	r2,r2,4
    25f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    25f8:	e0bffd17 	ldw	r2,-12(fp)
    25fc:	1080800c 	andi	r2,r2,512
    2600:	103fbe26 	beq	r2,zero,24fc <__alt_exception_stack_pointer+0xf80024fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    2604:	e0bffd17 	ldw	r2,-12(fp)
    2608:	1004d43a 	srli	r2,r2,16
    260c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    2610:	00001406 	br	2664 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    2614:	e0bffc17 	ldw	r2,-16(fp)
    2618:	e0fffb17 	ldw	r3,-20(fp)
    261c:	18c00d17 	ldw	r3,52(r3)
    2620:	e13ffb17 	ldw	r4,-20(fp)
    2624:	20c7883a 	add	r3,r4,r3
    2628:	18c20e04 	addi	r3,r3,2104
    262c:	18c00003 	ldbu	r3,0(r3)
    2630:	18c03fcc 	andi	r3,r3,255
    2634:	18c0201c 	xori	r3,r3,128
    2638:	18ffe004 	addi	r3,r3,-128
    263c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2640:	e0bffb17 	ldw	r2,-20(fp)
    2644:	10800d17 	ldw	r2,52(r2)
    2648:	10800044 	addi	r2,r2,1
    264c:	10c1ffcc 	andi	r3,r2,2047
    2650:	e0bffb17 	ldw	r2,-20(fp)
    2654:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2658:	e0bffa17 	ldw	r2,-24(fp)
    265c:	10bfffc4 	addi	r2,r2,-1
    2660:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    2664:	e0bffa17 	ldw	r2,-24(fp)
    2668:	10000526 	beq	r2,zero,2680 <altera_avalon_jtag_uart_irq+0x1a8>
    266c:	e0bffb17 	ldw	r2,-20(fp)
    2670:	10c00d17 	ldw	r3,52(r2)
    2674:	e0bffb17 	ldw	r2,-20(fp)
    2678:	10800c17 	ldw	r2,48(r2)
    267c:	18bfe51e 	bne	r3,r2,2614 <__alt_exception_stack_pointer+0xf8002614>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    2680:	e0bffa17 	ldw	r2,-24(fp)
    2684:	103f9d26 	beq	r2,zero,24fc <__alt_exception_stack_pointer+0xf80024fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2688:	e0bffb17 	ldw	r2,-20(fp)
    268c:	10c00817 	ldw	r3,32(r2)
    2690:	00bfff44 	movi	r2,-3
    2694:	1886703a 	and	r3,r3,r2
    2698:	e0bffb17 	ldw	r2,-20(fp)
    269c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    26a0:	e0bffb17 	ldw	r2,-20(fp)
    26a4:	10800017 	ldw	r2,0(r2)
    26a8:	10800104 	addi	r2,r2,4
    26ac:	1007883a 	mov	r3,r2
    26b0:	e0bffb17 	ldw	r2,-20(fp)
    26b4:	10800817 	ldw	r2,32(r2)
    26b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    26bc:	e0bffc17 	ldw	r2,-16(fp)
    26c0:	10800104 	addi	r2,r2,4
    26c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    26c8:	003f8c06 	br	24fc <__alt_exception_stack_pointer+0xf80024fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    26cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    26d0:	0001883a 	nop
    26d4:	e037883a 	mov	sp,fp
    26d8:	df000017 	ldw	fp,0(sp)
    26dc:	dec00104 	addi	sp,sp,4
    26e0:	f800283a 	ret

000026e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    26e4:	defff804 	addi	sp,sp,-32
    26e8:	df000715 	stw	fp,28(sp)
    26ec:	df000704 	addi	fp,sp,28
    26f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    26f4:	e0bffb17 	ldw	r2,-20(fp)
    26f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    26fc:	e0bff917 	ldw	r2,-28(fp)
    2700:	10800017 	ldw	r2,0(r2)
    2704:	10800104 	addi	r2,r2,4
    2708:	10800037 	ldwio	r2,0(r2)
    270c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    2710:	e0bffa17 	ldw	r2,-24(fp)
    2714:	1081000c 	andi	r2,r2,1024
    2718:	10000b26 	beq	r2,zero,2748 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    271c:	e0bff917 	ldw	r2,-28(fp)
    2720:	10800017 	ldw	r2,0(r2)
    2724:	10800104 	addi	r2,r2,4
    2728:	1007883a 	mov	r3,r2
    272c:	e0bff917 	ldw	r2,-28(fp)
    2730:	10800817 	ldw	r2,32(r2)
    2734:	10810014 	ori	r2,r2,1024
    2738:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    273c:	e0bff917 	ldw	r2,-28(fp)
    2740:	10000915 	stw	zero,36(r2)
    2744:	00000a06 	br	2770 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    2748:	e0bff917 	ldw	r2,-28(fp)
    274c:	10c00917 	ldw	r3,36(r2)
    2750:	00a00034 	movhi	r2,32768
    2754:	10bfff04 	addi	r2,r2,-4
    2758:	10c00536 	bltu	r2,r3,2770 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    275c:	e0bff917 	ldw	r2,-28(fp)
    2760:	10800917 	ldw	r2,36(r2)
    2764:	10c00044 	addi	r3,r2,1
    2768:	e0bff917 	ldw	r2,-28(fp)
    276c:	10c00915 	stw	r3,36(r2)
    2770:	d0a6ee17 	ldw	r2,-25672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2774:	e037883a 	mov	sp,fp
    2778:	df000017 	ldw	fp,0(sp)
    277c:	dec00104 	addi	sp,sp,4
    2780:	f800283a 	ret

00002784 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    2784:	defffd04 	addi	sp,sp,-12
    2788:	df000215 	stw	fp,8(sp)
    278c:	df000204 	addi	fp,sp,8
    2790:	e13ffe15 	stw	r4,-8(fp)
    2794:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    2798:	00000506 	br	27b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    279c:	e0bfff17 	ldw	r2,-4(fp)
    27a0:	1090000c 	andi	r2,r2,16384
    27a4:	10000226 	beq	r2,zero,27b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    27a8:	00bffd44 	movi	r2,-11
    27ac:	00000b06 	br	27dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    27b0:	e0bffe17 	ldw	r2,-8(fp)
    27b4:	10c00d17 	ldw	r3,52(r2)
    27b8:	e0bffe17 	ldw	r2,-8(fp)
    27bc:	10800c17 	ldw	r2,48(r2)
    27c0:	18800526 	beq	r3,r2,27d8 <altera_avalon_jtag_uart_close+0x54>
    27c4:	e0bffe17 	ldw	r2,-8(fp)
    27c8:	10c00917 	ldw	r3,36(r2)
    27cc:	e0bffe17 	ldw	r2,-8(fp)
    27d0:	10800117 	ldw	r2,4(r2)
    27d4:	18bff136 	bltu	r3,r2,279c <__alt_exception_stack_pointer+0xf800279c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    27d8:	0005883a 	mov	r2,zero
}
    27dc:	e037883a 	mov	sp,fp
    27e0:	df000017 	ldw	fp,0(sp)
    27e4:	dec00104 	addi	sp,sp,4
    27e8:	f800283a 	ret

000027ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    27ec:	defffa04 	addi	sp,sp,-24
    27f0:	df000515 	stw	fp,20(sp)
    27f4:	df000504 	addi	fp,sp,20
    27f8:	e13ffd15 	stw	r4,-12(fp)
    27fc:	e17ffe15 	stw	r5,-8(fp)
    2800:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    2804:	00bff9c4 	movi	r2,-25
    2808:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    280c:	e0bffe17 	ldw	r2,-8(fp)
    2810:	10da8060 	cmpeqi	r3,r2,27137
    2814:	1800031e 	bne	r3,zero,2824 <altera_avalon_jtag_uart_ioctl+0x38>
    2818:	109a80a0 	cmpeqi	r2,r2,27138
    281c:	1000181e 	bne	r2,zero,2880 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    2820:	00002906 	br	28c8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    2824:	e0bffd17 	ldw	r2,-12(fp)
    2828:	10c00117 	ldw	r3,4(r2)
    282c:	00a00034 	movhi	r2,32768
    2830:	10bfffc4 	addi	r2,r2,-1
    2834:	18802126 	beq	r3,r2,28bc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    2838:	e0bfff17 	ldw	r2,-4(fp)
    283c:	10800017 	ldw	r2,0(r2)
    2840:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2844:	e0bffc17 	ldw	r2,-16(fp)
    2848:	10800090 	cmplti	r2,r2,2
    284c:	1000061e 	bne	r2,zero,2868 <altera_avalon_jtag_uart_ioctl+0x7c>
    2850:	e0fffc17 	ldw	r3,-16(fp)
    2854:	00a00034 	movhi	r2,32768
    2858:	10bfffc4 	addi	r2,r2,-1
    285c:	18800226 	beq	r3,r2,2868 <altera_avalon_jtag_uart_ioctl+0x7c>
    2860:	e0bffc17 	ldw	r2,-16(fp)
    2864:	00000206 	br	2870 <altera_avalon_jtag_uart_ioctl+0x84>
    2868:	00a00034 	movhi	r2,32768
    286c:	10bfff84 	addi	r2,r2,-2
    2870:	e0fffd17 	ldw	r3,-12(fp)
    2874:	18800115 	stw	r2,4(r3)
      rc = 0;
    2878:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    287c:	00000f06 	br	28bc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    2880:	e0bffd17 	ldw	r2,-12(fp)
    2884:	10c00117 	ldw	r3,4(r2)
    2888:	00a00034 	movhi	r2,32768
    288c:	10bfffc4 	addi	r2,r2,-1
    2890:	18800c26 	beq	r3,r2,28c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    2894:	e0bffd17 	ldw	r2,-12(fp)
    2898:	10c00917 	ldw	r3,36(r2)
    289c:	e0bffd17 	ldw	r2,-12(fp)
    28a0:	10800117 	ldw	r2,4(r2)
    28a4:	1885803a 	cmpltu	r2,r3,r2
    28a8:	10c03fcc 	andi	r3,r2,255
    28ac:	e0bfff17 	ldw	r2,-4(fp)
    28b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    28b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    28b8:	00000206 	br	28c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    28bc:	0001883a 	nop
    28c0:	00000106 	br	28c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    28c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    28c8:	e0bffb17 	ldw	r2,-20(fp)
}
    28cc:	e037883a 	mov	sp,fp
    28d0:	df000017 	ldw	fp,0(sp)
    28d4:	dec00104 	addi	sp,sp,4
    28d8:	f800283a 	ret

000028dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    28dc:	defff304 	addi	sp,sp,-52
    28e0:	dfc00c15 	stw	ra,48(sp)
    28e4:	df000b15 	stw	fp,44(sp)
    28e8:	df000b04 	addi	fp,sp,44
    28ec:	e13ffc15 	stw	r4,-16(fp)
    28f0:	e17ffd15 	stw	r5,-12(fp)
    28f4:	e1bffe15 	stw	r6,-8(fp)
    28f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    28fc:	e0bffd17 	ldw	r2,-12(fp)
    2900:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2904:	00004706 	br	2a24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2908:	e0bffc17 	ldw	r2,-16(fp)
    290c:	10800a17 	ldw	r2,40(r2)
    2910:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    2914:	e0bffc17 	ldw	r2,-16(fp)
    2918:	10800b17 	ldw	r2,44(r2)
    291c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    2920:	e0fff717 	ldw	r3,-36(fp)
    2924:	e0bff817 	ldw	r2,-32(fp)
    2928:	18800536 	bltu	r3,r2,2940 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    292c:	e0fff717 	ldw	r3,-36(fp)
    2930:	e0bff817 	ldw	r2,-32(fp)
    2934:	1885c83a 	sub	r2,r3,r2
    2938:	e0bff615 	stw	r2,-40(fp)
    293c:	00000406 	br	2950 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    2940:	00c20004 	movi	r3,2048
    2944:	e0bff817 	ldw	r2,-32(fp)
    2948:	1885c83a 	sub	r2,r3,r2
    294c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    2950:	e0bff617 	ldw	r2,-40(fp)
    2954:	10001e26 	beq	r2,zero,29d0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    2958:	e0fffe17 	ldw	r3,-8(fp)
    295c:	e0bff617 	ldw	r2,-40(fp)
    2960:	1880022e 	bgeu	r3,r2,296c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    2964:	e0bffe17 	ldw	r2,-8(fp)
    2968:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    296c:	e0bffc17 	ldw	r2,-16(fp)
    2970:	10c00e04 	addi	r3,r2,56
    2974:	e0bff817 	ldw	r2,-32(fp)
    2978:	1885883a 	add	r2,r3,r2
    297c:	e1bff617 	ldw	r6,-40(fp)
    2980:	100b883a 	mov	r5,r2
    2984:	e13ff517 	ldw	r4,-44(fp)
    2988:	00039680 	call	3968 <memcpy>
      ptr   += n;
    298c:	e0fff517 	ldw	r3,-44(fp)
    2990:	e0bff617 	ldw	r2,-40(fp)
    2994:	1885883a 	add	r2,r3,r2
    2998:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    299c:	e0fffe17 	ldw	r3,-8(fp)
    29a0:	e0bff617 	ldw	r2,-40(fp)
    29a4:	1885c83a 	sub	r2,r3,r2
    29a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    29ac:	e0fff817 	ldw	r3,-32(fp)
    29b0:	e0bff617 	ldw	r2,-40(fp)
    29b4:	1885883a 	add	r2,r3,r2
    29b8:	10c1ffcc 	andi	r3,r2,2047
    29bc:	e0bffc17 	ldw	r2,-16(fp)
    29c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    29c4:	e0bffe17 	ldw	r2,-8(fp)
    29c8:	00bfcf16 	blt	zero,r2,2908 <__alt_exception_stack_pointer+0xf8002908>
    29cc:	00000106 	br	29d4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    29d0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    29d4:	e0fff517 	ldw	r3,-44(fp)
    29d8:	e0bffd17 	ldw	r2,-12(fp)
    29dc:	1880141e 	bne	r3,r2,2a30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    29e0:	e0bfff17 	ldw	r2,-4(fp)
    29e4:	1090000c 	andi	r2,r2,16384
    29e8:	1000131e 	bne	r2,zero,2a38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    29ec:	0001883a 	nop
    29f0:	e0bffc17 	ldw	r2,-16(fp)
    29f4:	10c00a17 	ldw	r3,40(r2)
    29f8:	e0bff717 	ldw	r2,-36(fp)
    29fc:	1880051e 	bne	r3,r2,2a14 <altera_avalon_jtag_uart_read+0x138>
    2a00:	e0bffc17 	ldw	r2,-16(fp)
    2a04:	10c00917 	ldw	r3,36(r2)
    2a08:	e0bffc17 	ldw	r2,-16(fp)
    2a0c:	10800117 	ldw	r2,4(r2)
    2a10:	18bff736 	bltu	r3,r2,29f0 <__alt_exception_stack_pointer+0xf80029f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    2a14:	e0bffc17 	ldw	r2,-16(fp)
    2a18:	10c00a17 	ldw	r3,40(r2)
    2a1c:	e0bff717 	ldw	r2,-36(fp)
    2a20:	18800726 	beq	r3,r2,2a40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2a24:	e0bffe17 	ldw	r2,-8(fp)
    2a28:	00bfb716 	blt	zero,r2,2908 <__alt_exception_stack_pointer+0xf8002908>
    2a2c:	00000506 	br	2a44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    2a30:	0001883a 	nop
    2a34:	00000306 	br	2a44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    2a38:	0001883a 	nop
    2a3c:	00000106 	br	2a44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    2a40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    2a44:	e0fff517 	ldw	r3,-44(fp)
    2a48:	e0bffd17 	ldw	r2,-12(fp)
    2a4c:	18801826 	beq	r3,r2,2ab0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a50:	0005303a 	rdctl	r2,status
    2a54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a58:	e0fffb17 	ldw	r3,-20(fp)
    2a5c:	00bfff84 	movi	r2,-2
    2a60:	1884703a 	and	r2,r3,r2
    2a64:	1001703a 	wrctl	status,r2
  
  return context;
    2a68:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2a6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2a70:	e0bffc17 	ldw	r2,-16(fp)
    2a74:	10800817 	ldw	r2,32(r2)
    2a78:	10c00054 	ori	r3,r2,1
    2a7c:	e0bffc17 	ldw	r2,-16(fp)
    2a80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2a84:	e0bffc17 	ldw	r2,-16(fp)
    2a88:	10800017 	ldw	r2,0(r2)
    2a8c:	10800104 	addi	r2,r2,4
    2a90:	1007883a 	mov	r3,r2
    2a94:	e0bffc17 	ldw	r2,-16(fp)
    2a98:	10800817 	ldw	r2,32(r2)
    2a9c:	18800035 	stwio	r2,0(r3)
    2aa0:	e0bffa17 	ldw	r2,-24(fp)
    2aa4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2aa8:	e0bff917 	ldw	r2,-28(fp)
    2aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    2ab0:	e0fff517 	ldw	r3,-44(fp)
    2ab4:	e0bffd17 	ldw	r2,-12(fp)
    2ab8:	18800426 	beq	r3,r2,2acc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    2abc:	e0fff517 	ldw	r3,-44(fp)
    2ac0:	e0bffd17 	ldw	r2,-12(fp)
    2ac4:	1885c83a 	sub	r2,r3,r2
    2ac8:	00000606 	br	2ae4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    2acc:	e0bfff17 	ldw	r2,-4(fp)
    2ad0:	1090000c 	andi	r2,r2,16384
    2ad4:	10000226 	beq	r2,zero,2ae0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    2ad8:	00bffd44 	movi	r2,-11
    2adc:	00000106 	br	2ae4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    2ae0:	00bffec4 	movi	r2,-5
}
    2ae4:	e037883a 	mov	sp,fp
    2ae8:	dfc00117 	ldw	ra,4(sp)
    2aec:	df000017 	ldw	fp,0(sp)
    2af0:	dec00204 	addi	sp,sp,8
    2af4:	f800283a 	ret

00002af8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2af8:	defff304 	addi	sp,sp,-52
    2afc:	dfc00c15 	stw	ra,48(sp)
    2b00:	df000b15 	stw	fp,44(sp)
    2b04:	df000b04 	addi	fp,sp,44
    2b08:	e13ffc15 	stw	r4,-16(fp)
    2b0c:	e17ffd15 	stw	r5,-12(fp)
    2b10:	e1bffe15 	stw	r6,-8(fp)
    2b14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2b18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2b1c:	e0bffd17 	ldw	r2,-12(fp)
    2b20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2b24:	00003706 	br	2c04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2b28:	e0bffc17 	ldw	r2,-16(fp)
    2b2c:	10800c17 	ldw	r2,48(r2)
    2b30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    2b34:	e0bffc17 	ldw	r2,-16(fp)
    2b38:	10800d17 	ldw	r2,52(r2)
    2b3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    2b40:	e0fff917 	ldw	r3,-28(fp)
    2b44:	e0bff517 	ldw	r2,-44(fp)
    2b48:	1880062e 	bgeu	r3,r2,2b64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2b4c:	e0fff517 	ldw	r3,-44(fp)
    2b50:	e0bff917 	ldw	r2,-28(fp)
    2b54:	1885c83a 	sub	r2,r3,r2
    2b58:	10bfffc4 	addi	r2,r2,-1
    2b5c:	e0bff615 	stw	r2,-40(fp)
    2b60:	00000b06 	br	2b90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    2b64:	e0bff517 	ldw	r2,-44(fp)
    2b68:	10000526 	beq	r2,zero,2b80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2b6c:	00c20004 	movi	r3,2048
    2b70:	e0bff917 	ldw	r2,-28(fp)
    2b74:	1885c83a 	sub	r2,r3,r2
    2b78:	e0bff615 	stw	r2,-40(fp)
    2b7c:	00000406 	br	2b90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2b80:	00c1ffc4 	movi	r3,2047
    2b84:	e0bff917 	ldw	r2,-28(fp)
    2b88:	1885c83a 	sub	r2,r3,r2
    2b8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    2b90:	e0bff617 	ldw	r2,-40(fp)
    2b94:	10001e26 	beq	r2,zero,2c10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    2b98:	e0fffe17 	ldw	r3,-8(fp)
    2b9c:	e0bff617 	ldw	r2,-40(fp)
    2ba0:	1880022e 	bgeu	r3,r2,2bac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    2ba4:	e0bffe17 	ldw	r2,-8(fp)
    2ba8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    2bac:	e0bffc17 	ldw	r2,-16(fp)
    2bb0:	10c20e04 	addi	r3,r2,2104
    2bb4:	e0bff917 	ldw	r2,-28(fp)
    2bb8:	1885883a 	add	r2,r3,r2
    2bbc:	e1bff617 	ldw	r6,-40(fp)
    2bc0:	e17ffd17 	ldw	r5,-12(fp)
    2bc4:	1009883a 	mov	r4,r2
    2bc8:	00039680 	call	3968 <memcpy>
      ptr   += n;
    2bcc:	e0fffd17 	ldw	r3,-12(fp)
    2bd0:	e0bff617 	ldw	r2,-40(fp)
    2bd4:	1885883a 	add	r2,r3,r2
    2bd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    2bdc:	e0fffe17 	ldw	r3,-8(fp)
    2be0:	e0bff617 	ldw	r2,-40(fp)
    2be4:	1885c83a 	sub	r2,r3,r2
    2be8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2bec:	e0fff917 	ldw	r3,-28(fp)
    2bf0:	e0bff617 	ldw	r2,-40(fp)
    2bf4:	1885883a 	add	r2,r3,r2
    2bf8:	10c1ffcc 	andi	r3,r2,2047
    2bfc:	e0bffc17 	ldw	r2,-16(fp)
    2c00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2c04:	e0bffe17 	ldw	r2,-8(fp)
    2c08:	00bfc716 	blt	zero,r2,2b28 <__alt_exception_stack_pointer+0xf8002b28>
    2c0c:	00000106 	br	2c14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    2c10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c14:	0005303a 	rdctl	r2,status
    2c18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c1c:	e0fffb17 	ldw	r3,-20(fp)
    2c20:	00bfff84 	movi	r2,-2
    2c24:	1884703a 	and	r2,r3,r2
    2c28:	1001703a 	wrctl	status,r2
  
  return context;
    2c2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    2c30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2c34:	e0bffc17 	ldw	r2,-16(fp)
    2c38:	10800817 	ldw	r2,32(r2)
    2c3c:	10c00094 	ori	r3,r2,2
    2c40:	e0bffc17 	ldw	r2,-16(fp)
    2c44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2c48:	e0bffc17 	ldw	r2,-16(fp)
    2c4c:	10800017 	ldw	r2,0(r2)
    2c50:	10800104 	addi	r2,r2,4
    2c54:	1007883a 	mov	r3,r2
    2c58:	e0bffc17 	ldw	r2,-16(fp)
    2c5c:	10800817 	ldw	r2,32(r2)
    2c60:	18800035 	stwio	r2,0(r3)
    2c64:	e0bffa17 	ldw	r2,-24(fp)
    2c68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c6c:	e0bff817 	ldw	r2,-32(fp)
    2c70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2c74:	e0bffe17 	ldw	r2,-8(fp)
    2c78:	0080100e 	bge	zero,r2,2cbc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    2c7c:	e0bfff17 	ldw	r2,-4(fp)
    2c80:	1090000c 	andi	r2,r2,16384
    2c84:	1000101e 	bne	r2,zero,2cc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2c88:	0001883a 	nop
    2c8c:	e0bffc17 	ldw	r2,-16(fp)
    2c90:	10c00d17 	ldw	r3,52(r2)
    2c94:	e0bff517 	ldw	r2,-44(fp)
    2c98:	1880051e 	bne	r3,r2,2cb0 <altera_avalon_jtag_uart_write+0x1b8>
    2c9c:	e0bffc17 	ldw	r2,-16(fp)
    2ca0:	10c00917 	ldw	r3,36(r2)
    2ca4:	e0bffc17 	ldw	r2,-16(fp)
    2ca8:	10800117 	ldw	r2,4(r2)
    2cac:	18bff736 	bltu	r3,r2,2c8c <__alt_exception_stack_pointer+0xf8002c8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    2cb0:	e0bffc17 	ldw	r2,-16(fp)
    2cb4:	10800917 	ldw	r2,36(r2)
    2cb8:	1000051e 	bne	r2,zero,2cd0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    2cbc:	e0bffe17 	ldw	r2,-8(fp)
    2cc0:	00bfd016 	blt	zero,r2,2c04 <__alt_exception_stack_pointer+0xf8002c04>
    2cc4:	00000306 	br	2cd4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    2cc8:	0001883a 	nop
    2ccc:	00000106 	br	2cd4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    2cd0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2cd4:	e0fffd17 	ldw	r3,-12(fp)
    2cd8:	e0bff717 	ldw	r2,-36(fp)
    2cdc:	18800426 	beq	r3,r2,2cf0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    2ce0:	e0fffd17 	ldw	r3,-12(fp)
    2ce4:	e0bff717 	ldw	r2,-36(fp)
    2ce8:	1885c83a 	sub	r2,r3,r2
    2cec:	00000606 	br	2d08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    2cf0:	e0bfff17 	ldw	r2,-4(fp)
    2cf4:	1090000c 	andi	r2,r2,16384
    2cf8:	10000226 	beq	r2,zero,2d04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    2cfc:	00bffd44 	movi	r2,-11
    2d00:	00000106 	br	2d08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    2d04:	00bffec4 	movi	r2,-5
}
    2d08:	e037883a 	mov	sp,fp
    2d0c:	dfc00117 	ldw	ra,4(sp)
    2d10:	df000017 	ldw	fp,0(sp)
    2d14:	dec00204 	addi	sp,sp,8
    2d18:	f800283a 	ret

00002d1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2d1c:	defff504 	addi	sp,sp,-44
    2d20:	df000a15 	stw	fp,40(sp)
    2d24:	df000a04 	addi	fp,sp,40
    2d28:	e13ffc15 	stw	r4,-16(fp)
    2d2c:	e17ffd15 	stw	r5,-12(fp)
    2d30:	e1bffe15 	stw	r6,-8(fp)
    2d34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2d38:	e03ff615 	stw	zero,-40(fp)
    2d3c:	d0a6ee17 	ldw	r2,-25672(gp)
  
  if (alt_ticks_per_second ())
    2d40:	10003c26 	beq	r2,zero,2e34 <alt_alarm_start+0x118>
  {
    if (alarm)
    2d44:	e0bffc17 	ldw	r2,-16(fp)
    2d48:	10003826 	beq	r2,zero,2e2c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    2d4c:	e0bffc17 	ldw	r2,-16(fp)
    2d50:	e0fffe17 	ldw	r3,-8(fp)
    2d54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2d58:	e0bffc17 	ldw	r2,-16(fp)
    2d5c:	e0ffff17 	ldw	r3,-4(fp)
    2d60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d64:	0005303a 	rdctl	r2,status
    2d68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d6c:	e0fff917 	ldw	r3,-28(fp)
    2d70:	00bfff84 	movi	r2,-2
    2d74:	1884703a 	and	r2,r3,r2
    2d78:	1001703a 	wrctl	status,r2
  
  return context;
    2d7c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    2d80:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2d84:	d0a6ef17 	ldw	r2,-25668(gp)
      
      current_nticks = alt_nticks();
    2d88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2d8c:	e0fffd17 	ldw	r3,-12(fp)
    2d90:	e0bff617 	ldw	r2,-40(fp)
    2d94:	1885883a 	add	r2,r3,r2
    2d98:	10c00044 	addi	r3,r2,1
    2d9c:	e0bffc17 	ldw	r2,-16(fp)
    2da0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2da4:	e0bffc17 	ldw	r2,-16(fp)
    2da8:	10c00217 	ldw	r3,8(r2)
    2dac:	e0bff617 	ldw	r2,-40(fp)
    2db0:	1880042e 	bgeu	r3,r2,2dc4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    2db4:	e0bffc17 	ldw	r2,-16(fp)
    2db8:	00c00044 	movi	r3,1
    2dbc:	10c00405 	stb	r3,16(r2)
    2dc0:	00000206 	br	2dcc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    2dc4:	e0bffc17 	ldw	r2,-16(fp)
    2dc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2dcc:	e0bffc17 	ldw	r2,-16(fp)
    2dd0:	d0e00f04 	addi	r3,gp,-32708
    2dd4:	e0fffa15 	stw	r3,-24(fp)
    2dd8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2ddc:	e0bffb17 	ldw	r2,-20(fp)
    2de0:	e0fffa17 	ldw	r3,-24(fp)
    2de4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2de8:	e0bffa17 	ldw	r2,-24(fp)
    2dec:	10c00017 	ldw	r3,0(r2)
    2df0:	e0bffb17 	ldw	r2,-20(fp)
    2df4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2df8:	e0bffa17 	ldw	r2,-24(fp)
    2dfc:	10800017 	ldw	r2,0(r2)
    2e00:	e0fffb17 	ldw	r3,-20(fp)
    2e04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2e08:	e0bffa17 	ldw	r2,-24(fp)
    2e0c:	e0fffb17 	ldw	r3,-20(fp)
    2e10:	10c00015 	stw	r3,0(r2)
    2e14:	e0bff817 	ldw	r2,-32(fp)
    2e18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e1c:	e0bff717 	ldw	r2,-36(fp)
    2e20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2e24:	0005883a 	mov	r2,zero
    2e28:	00000306 	br	2e38 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    2e2c:	00bffa84 	movi	r2,-22
    2e30:	00000106 	br	2e38 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    2e34:	00bfde84 	movi	r2,-134
  }
}
    2e38:	e037883a 	mov	sp,fp
    2e3c:	df000017 	ldw	fp,0(sp)
    2e40:	dec00104 	addi	sp,sp,4
    2e44:	f800283a 	ret

00002e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e48:	defffe04 	addi	sp,sp,-8
    2e4c:	dfc00115 	stw	ra,4(sp)
    2e50:	df000015 	stw	fp,0(sp)
    2e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2e58:	d0a00e17 	ldw	r2,-32712(gp)
    2e5c:	10000326 	beq	r2,zero,2e6c <alt_get_errno+0x24>
    2e60:	d0a00e17 	ldw	r2,-32712(gp)
    2e64:	103ee83a 	callr	r2
    2e68:	00000106 	br	2e70 <alt_get_errno+0x28>
    2e6c:	d0a6e904 	addi	r2,gp,-25692
}
    2e70:	e037883a 	mov	sp,fp
    2e74:	dfc00117 	ldw	ra,4(sp)
    2e78:	df000017 	ldw	fp,0(sp)
    2e7c:	dec00204 	addi	sp,sp,8
    2e80:	f800283a 	ret

00002e84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2e84:	defffb04 	addi	sp,sp,-20
    2e88:	dfc00415 	stw	ra,16(sp)
    2e8c:	df000315 	stw	fp,12(sp)
    2e90:	df000304 	addi	fp,sp,12
    2e94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2e98:	e0bfff17 	ldw	r2,-4(fp)
    2e9c:	10000816 	blt	r2,zero,2ec0 <close+0x3c>
    2ea0:	01400304 	movi	r5,12
    2ea4:	e13fff17 	ldw	r4,-4(fp)
    2ea8:	0003de00 	call	3de0 <__mulsi3>
    2eac:	1007883a 	mov	r3,r2
    2eb0:	00800034 	movhi	r2,0
    2eb4:	1095ff04 	addi	r2,r2,22524
    2eb8:	1885883a 	add	r2,r3,r2
    2ebc:	00000106 	br	2ec4 <close+0x40>
    2ec0:	0005883a 	mov	r2,zero
    2ec4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2ec8:	e0bffd17 	ldw	r2,-12(fp)
    2ecc:	10001926 	beq	r2,zero,2f34 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2ed0:	e0bffd17 	ldw	r2,-12(fp)
    2ed4:	10800017 	ldw	r2,0(r2)
    2ed8:	10800417 	ldw	r2,16(r2)
    2edc:	10000626 	beq	r2,zero,2ef8 <close+0x74>
    2ee0:	e0bffd17 	ldw	r2,-12(fp)
    2ee4:	10800017 	ldw	r2,0(r2)
    2ee8:	10800417 	ldw	r2,16(r2)
    2eec:	e13ffd17 	ldw	r4,-12(fp)
    2ef0:	103ee83a 	callr	r2
    2ef4:	00000106 	br	2efc <close+0x78>
    2ef8:	0005883a 	mov	r2,zero
    2efc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2f00:	e13fff17 	ldw	r4,-4(fp)
    2f04:	00035b80 	call	35b8 <alt_release_fd>
    if (rval < 0)
    2f08:	e0bffe17 	ldw	r2,-8(fp)
    2f0c:	1000070e 	bge	r2,zero,2f2c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    2f10:	0002e480 	call	2e48 <alt_get_errno>
    2f14:	1007883a 	mov	r3,r2
    2f18:	e0bffe17 	ldw	r2,-8(fp)
    2f1c:	0085c83a 	sub	r2,zero,r2
    2f20:	18800015 	stw	r2,0(r3)
      return -1;
    2f24:	00bfffc4 	movi	r2,-1
    2f28:	00000706 	br	2f48 <close+0xc4>
    }
    return 0;
    2f2c:	0005883a 	mov	r2,zero
    2f30:	00000506 	br	2f48 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2f34:	0002e480 	call	2e48 <alt_get_errno>
    2f38:	1007883a 	mov	r3,r2
    2f3c:	00801444 	movi	r2,81
    2f40:	18800015 	stw	r2,0(r3)
    return -1;
    2f44:	00bfffc4 	movi	r2,-1
  }
}
    2f48:	e037883a 	mov	sp,fp
    2f4c:	dfc00117 	ldw	ra,4(sp)
    2f50:	df000017 	ldw	fp,0(sp)
    2f54:	dec00204 	addi	sp,sp,8
    2f58:	f800283a 	ret

00002f5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2f5c:	deffff04 	addi	sp,sp,-4
    2f60:	df000015 	stw	fp,0(sp)
    2f64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2f68:	0001883a 	nop
    2f6c:	e037883a 	mov	sp,fp
    2f70:	df000017 	ldw	fp,0(sp)
    2f74:	dec00104 	addi	sp,sp,4
    2f78:	f800283a 	ret

00002f7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2f7c:	defffc04 	addi	sp,sp,-16
    2f80:	df000315 	stw	fp,12(sp)
    2f84:	df000304 	addi	fp,sp,12
    2f88:	e13ffd15 	stw	r4,-12(fp)
    2f8c:	e17ffe15 	stw	r5,-8(fp)
    2f90:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2f94:	e0bfff17 	ldw	r2,-4(fp)
}
    2f98:	e037883a 	mov	sp,fp
    2f9c:	df000017 	ldw	fp,0(sp)
    2fa0:	dec00104 	addi	sp,sp,4
    2fa4:	f800283a 	ret

00002fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2fa8:	defffe04 	addi	sp,sp,-8
    2fac:	dfc00115 	stw	ra,4(sp)
    2fb0:	df000015 	stw	fp,0(sp)
    2fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2fb8:	d0a00e17 	ldw	r2,-32712(gp)
    2fbc:	10000326 	beq	r2,zero,2fcc <alt_get_errno+0x24>
    2fc0:	d0a00e17 	ldw	r2,-32712(gp)
    2fc4:	103ee83a 	callr	r2
    2fc8:	00000106 	br	2fd0 <alt_get_errno+0x28>
    2fcc:	d0a6e904 	addi	r2,gp,-25692
}
    2fd0:	e037883a 	mov	sp,fp
    2fd4:	dfc00117 	ldw	ra,4(sp)
    2fd8:	df000017 	ldw	fp,0(sp)
    2fdc:	dec00204 	addi	sp,sp,8
    2fe0:	f800283a 	ret

00002fe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2fe4:	defffa04 	addi	sp,sp,-24
    2fe8:	dfc00515 	stw	ra,20(sp)
    2fec:	df000415 	stw	fp,16(sp)
    2ff0:	df000404 	addi	fp,sp,16
    2ff4:	e13ffe15 	stw	r4,-8(fp)
    2ff8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2ffc:	e0bffe17 	ldw	r2,-8(fp)
    3000:	10000326 	beq	r2,zero,3010 <alt_dev_llist_insert+0x2c>
    3004:	e0bffe17 	ldw	r2,-8(fp)
    3008:	10800217 	ldw	r2,8(r2)
    300c:	1000061e 	bne	r2,zero,3028 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3010:	0002fa80 	call	2fa8 <alt_get_errno>
    3014:	1007883a 	mov	r3,r2
    3018:	00800584 	movi	r2,22
    301c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3020:	00bffa84 	movi	r2,-22
    3024:	00001306 	br	3074 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3028:	e0bffe17 	ldw	r2,-8(fp)
    302c:	e0ffff17 	ldw	r3,-4(fp)
    3030:	e0fffc15 	stw	r3,-16(fp)
    3034:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3038:	e0bffd17 	ldw	r2,-12(fp)
    303c:	e0fffc17 	ldw	r3,-16(fp)
    3040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3044:	e0bffc17 	ldw	r2,-16(fp)
    3048:	10c00017 	ldw	r3,0(r2)
    304c:	e0bffd17 	ldw	r2,-12(fp)
    3050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3054:	e0bffc17 	ldw	r2,-16(fp)
    3058:	10800017 	ldw	r2,0(r2)
    305c:	e0fffd17 	ldw	r3,-12(fp)
    3060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3064:	e0bffc17 	ldw	r2,-16(fp)
    3068:	e0fffd17 	ldw	r3,-12(fp)
    306c:	10c00015 	stw	r3,0(r2)

  return 0;  
    3070:	0005883a 	mov	r2,zero
}
    3074:	e037883a 	mov	sp,fp
    3078:	dfc00117 	ldw	ra,4(sp)
    307c:	df000017 	ldw	fp,0(sp)
    3080:	dec00204 	addi	sp,sp,8
    3084:	f800283a 	ret

00003088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3088:	defffe04 	addi	sp,sp,-8
    308c:	dfc00115 	stw	ra,4(sp)
    3090:	df000015 	stw	fp,0(sp)
    3094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3098:	d0a00e17 	ldw	r2,-32712(gp)
    309c:	10000326 	beq	r2,zero,30ac <alt_get_errno+0x24>
    30a0:	d0a00e17 	ldw	r2,-32712(gp)
    30a4:	103ee83a 	callr	r2
    30a8:	00000106 	br	30b0 <alt_get_errno+0x28>
    30ac:	d0a6e904 	addi	r2,gp,-25692
}
    30b0:	e037883a 	mov	sp,fp
    30b4:	dfc00117 	ldw	ra,4(sp)
    30b8:	df000017 	ldw	fp,0(sp)
    30bc:	dec00204 	addi	sp,sp,8
    30c0:	f800283a 	ret

000030c4 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    30c4:	defffc04 	addi	sp,sp,-16
    30c8:	dfc00315 	stw	ra,12(sp)
    30cc:	df000215 	stw	fp,8(sp)
    30d0:	df000204 	addi	fp,sp,8
    30d4:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    30d8:	d1600a04 	addi	r5,gp,-32728
    30dc:	e13fff17 	ldw	r4,-4(fp)
    30e0:	00032680 	call	3268 <alt_find_dev>
    30e4:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    30e8:	e0bffe17 	ldw	r2,-8(fp)
    30ec:	1000041e 	bne	r2,zero,3100 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    30f0:	00030880 	call	3088 <alt_get_errno>
    30f4:	1007883a 	mov	r3,r2
    30f8:	008004c4 	movi	r2,19
    30fc:	18800015 	stw	r2,0(r3)
  }

  return dev;
    3100:	e0bffe17 	ldw	r2,-8(fp)
}
    3104:	e037883a 	mov	sp,fp
    3108:	dfc00117 	ldw	ra,4(sp)
    310c:	df000017 	ldw	fp,0(sp)
    3110:	dec00204 	addi	sp,sp,8
    3114:	f800283a 	ret

00003118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3118:	defffe04 	addi	sp,sp,-8
    311c:	dfc00115 	stw	ra,4(sp)
    3120:	df000015 	stw	fp,0(sp)
    3124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3128:	d0a00e17 	ldw	r2,-32712(gp)
    312c:	10000326 	beq	r2,zero,313c <alt_get_errno+0x24>
    3130:	d0a00e17 	ldw	r2,-32712(gp)
    3134:	103ee83a 	callr	r2
    3138:	00000106 	br	3140 <alt_get_errno+0x28>
    313c:	d0a6e904 	addi	r2,gp,-25692
}
    3140:	e037883a 	mov	sp,fp
    3144:	dfc00117 	ldw	ra,4(sp)
    3148:	df000017 	ldw	fp,0(sp)
    314c:	dec00204 	addi	sp,sp,8
    3150:	f800283a 	ret

00003154 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    3154:	defffc04 	addi	sp,sp,-16
    3158:	dfc00315 	stw	ra,12(sp)
    315c:	df000215 	stw	fp,8(sp)
    3160:	df000204 	addi	fp,sp,8
    3164:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    3168:	d1600c04 	addi	r5,gp,-32720
    316c:	e13fff17 	ldw	r4,-4(fp)
    3170:	00032680 	call	3268 <alt_find_dev>
    3174:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    3178:	e0bffe17 	ldw	r2,-8(fp)
    317c:	1000041e 	bne	r2,zero,3190 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    3180:	00031180 	call	3118 <alt_get_errno>
    3184:	1007883a 	mov	r3,r2
    3188:	008004c4 	movi	r2,19
    318c:	18800015 	stw	r2,0(r3)
  }

  return dev;
    3190:	e0bffe17 	ldw	r2,-8(fp)
}
    3194:	e037883a 	mov	sp,fp
    3198:	dfc00117 	ldw	ra,4(sp)
    319c:	df000017 	ldw	fp,0(sp)
    31a0:	dec00204 	addi	sp,sp,8
    31a4:	f800283a 	ret

000031a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    31a8:	defffd04 	addi	sp,sp,-12
    31ac:	dfc00215 	stw	ra,8(sp)
    31b0:	df000115 	stw	fp,4(sp)
    31b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    31b8:	00800034 	movhi	r2,0
    31bc:	108f8e04 	addi	r2,r2,15928
    31c0:	e0bfff15 	stw	r2,-4(fp)
    31c4:	00000606 	br	31e0 <_do_ctors+0x38>
        (*ctor) (); 
    31c8:	e0bfff17 	ldw	r2,-4(fp)
    31cc:	10800017 	ldw	r2,0(r2)
    31d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    31d4:	e0bfff17 	ldw	r2,-4(fp)
    31d8:	10bfff04 	addi	r2,r2,-4
    31dc:	e0bfff15 	stw	r2,-4(fp)
    31e0:	e0ffff17 	ldw	r3,-4(fp)
    31e4:	00800034 	movhi	r2,0
    31e8:	108f8f04 	addi	r2,r2,15932
    31ec:	18bff62e 	bgeu	r3,r2,31c8 <__alt_exception_stack_pointer+0xf80031c8>
        (*ctor) (); 
}
    31f0:	0001883a 	nop
    31f4:	e037883a 	mov	sp,fp
    31f8:	dfc00117 	ldw	ra,4(sp)
    31fc:	df000017 	ldw	fp,0(sp)
    3200:	dec00204 	addi	sp,sp,8
    3204:	f800283a 	ret

00003208 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3208:	defffd04 	addi	sp,sp,-12
    320c:	dfc00215 	stw	ra,8(sp)
    3210:	df000115 	stw	fp,4(sp)
    3214:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3218:	00800034 	movhi	r2,0
    321c:	108f8e04 	addi	r2,r2,15928
    3220:	e0bfff15 	stw	r2,-4(fp)
    3224:	00000606 	br	3240 <_do_dtors+0x38>
        (*dtor) (); 
    3228:	e0bfff17 	ldw	r2,-4(fp)
    322c:	10800017 	ldw	r2,0(r2)
    3230:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3234:	e0bfff17 	ldw	r2,-4(fp)
    3238:	10bfff04 	addi	r2,r2,-4
    323c:	e0bfff15 	stw	r2,-4(fp)
    3240:	e0ffff17 	ldw	r3,-4(fp)
    3244:	00800034 	movhi	r2,0
    3248:	108f8f04 	addi	r2,r2,15932
    324c:	18bff62e 	bgeu	r3,r2,3228 <__alt_exception_stack_pointer+0xf8003228>
        (*dtor) (); 
}
    3250:	0001883a 	nop
    3254:	e037883a 	mov	sp,fp
    3258:	dfc00117 	ldw	ra,4(sp)
    325c:	df000017 	ldw	fp,0(sp)
    3260:	dec00204 	addi	sp,sp,8
    3264:	f800283a 	ret

00003268 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3268:	defffa04 	addi	sp,sp,-24
    326c:	dfc00515 	stw	ra,20(sp)
    3270:	df000415 	stw	fp,16(sp)
    3274:	df000404 	addi	fp,sp,16
    3278:	e13ffe15 	stw	r4,-8(fp)
    327c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3280:	e0bfff17 	ldw	r2,-4(fp)
    3284:	10800017 	ldw	r2,0(r2)
    3288:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    328c:	e13ffe17 	ldw	r4,-8(fp)
    3290:	0003ab00 	call	3ab0 <strlen>
    3294:	10800044 	addi	r2,r2,1
    3298:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    329c:	00000d06 	br	32d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    32a0:	e0bffc17 	ldw	r2,-16(fp)
    32a4:	10800217 	ldw	r2,8(r2)
    32a8:	e0fffd17 	ldw	r3,-12(fp)
    32ac:	180d883a 	mov	r6,r3
    32b0:	e17ffe17 	ldw	r5,-8(fp)
    32b4:	1009883a 	mov	r4,r2
    32b8:	00038ec0 	call	38ec <memcmp>
    32bc:	1000021e 	bne	r2,zero,32c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    32c0:	e0bffc17 	ldw	r2,-16(fp)
    32c4:	00000706 	br	32e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    32c8:	e0bffc17 	ldw	r2,-16(fp)
    32cc:	10800017 	ldw	r2,0(r2)
    32d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    32d4:	e0fffc17 	ldw	r3,-16(fp)
    32d8:	e0bfff17 	ldw	r2,-4(fp)
    32dc:	18bff01e 	bne	r3,r2,32a0 <__alt_exception_stack_pointer+0xf80032a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    32e0:	0005883a 	mov	r2,zero
}
    32e4:	e037883a 	mov	sp,fp
    32e8:	dfc00117 	ldw	ra,4(sp)
    32ec:	df000017 	ldw	fp,0(sp)
    32f0:	dec00204 	addi	sp,sp,8
    32f4:	f800283a 	ret

000032f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    32f8:	deffff04 	addi	sp,sp,-4
    32fc:	df000015 	stw	fp,0(sp)
    3300:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3304:	0001883a 	nop
    3308:	e037883a 	mov	sp,fp
    330c:	df000017 	ldw	fp,0(sp)
    3310:	dec00104 	addi	sp,sp,4
    3314:	f800283a 	ret

00003318 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3318:	defff904 	addi	sp,sp,-28
    331c:	dfc00615 	stw	ra,24(sp)
    3320:	df000515 	stw	fp,20(sp)
    3324:	df000504 	addi	fp,sp,20
    3328:	e13ffc15 	stw	r4,-16(fp)
    332c:	e17ffd15 	stw	r5,-12(fp)
    3330:	e1bffe15 	stw	r6,-8(fp)
    3334:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    3338:	e0800217 	ldw	r2,8(fp)
    333c:	d8800015 	stw	r2,0(sp)
    3340:	e1ffff17 	ldw	r7,-4(fp)
    3344:	e1bffe17 	ldw	r6,-8(fp)
    3348:	e17ffd17 	ldw	r5,-12(fp)
    334c:	e13ffc17 	ldw	r4,-16(fp)
    3350:	00034c80 	call	34c8 <alt_iic_isr_register>
}  
    3354:	e037883a 	mov	sp,fp
    3358:	dfc00117 	ldw	ra,4(sp)
    335c:	df000017 	ldw	fp,0(sp)
    3360:	dec00204 	addi	sp,sp,8
    3364:	f800283a 	ret

00003368 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    3368:	defff904 	addi	sp,sp,-28
    336c:	df000615 	stw	fp,24(sp)
    3370:	df000604 	addi	fp,sp,24
    3374:	e13ffe15 	stw	r4,-8(fp)
    3378:	e17fff15 	stw	r5,-4(fp)
    337c:	e0bfff17 	ldw	r2,-4(fp)
    3380:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3384:	0005303a 	rdctl	r2,status
    3388:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    338c:	e0fffb17 	ldw	r3,-20(fp)
    3390:	00bfff84 	movi	r2,-2
    3394:	1884703a 	and	r2,r3,r2
    3398:	1001703a 	wrctl	status,r2
  
  return context;
    339c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    33a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    33a4:	00c00044 	movi	r3,1
    33a8:	e0bffa17 	ldw	r2,-24(fp)
    33ac:	1884983a 	sll	r2,r3,r2
    33b0:	1007883a 	mov	r3,r2
    33b4:	d0a6ed17 	ldw	r2,-25676(gp)
    33b8:	1884b03a 	or	r2,r3,r2
    33bc:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    33c0:	d0a6ed17 	ldw	r2,-25676(gp)
    33c4:	100170fa 	wrctl	ienable,r2
    33c8:	e0bffc17 	ldw	r2,-16(fp)
    33cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    33d0:	e0bffd17 	ldw	r2,-12(fp)
    33d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    33d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    33dc:	0001883a 	nop
}
    33e0:	e037883a 	mov	sp,fp
    33e4:	df000017 	ldw	fp,0(sp)
    33e8:	dec00104 	addi	sp,sp,4
    33ec:	f800283a 	ret

000033f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    33f0:	defff904 	addi	sp,sp,-28
    33f4:	df000615 	stw	fp,24(sp)
    33f8:	df000604 	addi	fp,sp,24
    33fc:	e13ffe15 	stw	r4,-8(fp)
    3400:	e17fff15 	stw	r5,-4(fp)
    3404:	e0bfff17 	ldw	r2,-4(fp)
    3408:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    340c:	0005303a 	rdctl	r2,status
    3410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3414:	e0fffb17 	ldw	r3,-20(fp)
    3418:	00bfff84 	movi	r2,-2
    341c:	1884703a 	and	r2,r3,r2
    3420:	1001703a 	wrctl	status,r2
  
  return context;
    3424:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3428:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    342c:	00c00044 	movi	r3,1
    3430:	e0bffa17 	ldw	r2,-24(fp)
    3434:	1884983a 	sll	r2,r3,r2
    3438:	0084303a 	nor	r2,zero,r2
    343c:	1007883a 	mov	r3,r2
    3440:	d0a6ed17 	ldw	r2,-25676(gp)
    3444:	1884703a 	and	r2,r3,r2
    3448:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    344c:	d0a6ed17 	ldw	r2,-25676(gp)
    3450:	100170fa 	wrctl	ienable,r2
    3454:	e0bffc17 	ldw	r2,-16(fp)
    3458:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    345c:	e0bffd17 	ldw	r2,-12(fp)
    3460:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3464:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    3468:	0001883a 	nop
}
    346c:	e037883a 	mov	sp,fp
    3470:	df000017 	ldw	fp,0(sp)
    3474:	dec00104 	addi	sp,sp,4
    3478:	f800283a 	ret

0000347c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    347c:	defffc04 	addi	sp,sp,-16
    3480:	df000315 	stw	fp,12(sp)
    3484:	df000304 	addi	fp,sp,12
    3488:	e13ffe15 	stw	r4,-8(fp)
    348c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    3490:	000530fa 	rdctl	r2,ienable
    3494:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    3498:	00c00044 	movi	r3,1
    349c:	e0bfff17 	ldw	r2,-4(fp)
    34a0:	1884983a 	sll	r2,r3,r2
    34a4:	1007883a 	mov	r3,r2
    34a8:	e0bffd17 	ldw	r2,-12(fp)
    34ac:	1884703a 	and	r2,r3,r2
    34b0:	1004c03a 	cmpne	r2,r2,zero
    34b4:	10803fcc 	andi	r2,r2,255
}
    34b8:	e037883a 	mov	sp,fp
    34bc:	df000017 	ldw	fp,0(sp)
    34c0:	dec00104 	addi	sp,sp,4
    34c4:	f800283a 	ret

000034c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    34c8:	defff504 	addi	sp,sp,-44
    34cc:	dfc00a15 	stw	ra,40(sp)
    34d0:	df000915 	stw	fp,36(sp)
    34d4:	df000904 	addi	fp,sp,36
    34d8:	e13ffc15 	stw	r4,-16(fp)
    34dc:	e17ffd15 	stw	r5,-12(fp)
    34e0:	e1bffe15 	stw	r6,-8(fp)
    34e4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    34e8:	00bffa84 	movi	r2,-22
    34ec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    34f0:	e0bffd17 	ldw	r2,-12(fp)
    34f4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    34f8:	e0bff817 	ldw	r2,-32(fp)
    34fc:	10800808 	cmpgei	r2,r2,32
    3500:	1000271e 	bne	r2,zero,35a0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3504:	0005303a 	rdctl	r2,status
    3508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    350c:	e0fffb17 	ldw	r3,-20(fp)
    3510:	00bfff84 	movi	r2,-2
    3514:	1884703a 	and	r2,r3,r2
    3518:	1001703a 	wrctl	status,r2
  
  return context;
    351c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    3520:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    3524:	00800034 	movhi	r2,0
    3528:	109d5a04 	addi	r2,r2,30056
    352c:	e0fff817 	ldw	r3,-32(fp)
    3530:	180690fa 	slli	r3,r3,3
    3534:	10c5883a 	add	r2,r2,r3
    3538:	e0fffe17 	ldw	r3,-8(fp)
    353c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    3540:	00800034 	movhi	r2,0
    3544:	109d5a04 	addi	r2,r2,30056
    3548:	e0fff817 	ldw	r3,-32(fp)
    354c:	180690fa 	slli	r3,r3,3
    3550:	10c5883a 	add	r2,r2,r3
    3554:	10800104 	addi	r2,r2,4
    3558:	e0ffff17 	ldw	r3,-4(fp)
    355c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    3560:	e0bffe17 	ldw	r2,-8(fp)
    3564:	10000526 	beq	r2,zero,357c <alt_iic_isr_register+0xb4>
    3568:	e0bff817 	ldw	r2,-32(fp)
    356c:	100b883a 	mov	r5,r2
    3570:	e13ffc17 	ldw	r4,-16(fp)
    3574:	00033680 	call	3368 <alt_ic_irq_enable>
    3578:	00000406 	br	358c <alt_iic_isr_register+0xc4>
    357c:	e0bff817 	ldw	r2,-32(fp)
    3580:	100b883a 	mov	r5,r2
    3584:	e13ffc17 	ldw	r4,-16(fp)
    3588:	00033f00 	call	33f0 <alt_ic_irq_disable>
    358c:	e0bff715 	stw	r2,-36(fp)
    3590:	e0bffa17 	ldw	r2,-24(fp)
    3594:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3598:	e0bff917 	ldw	r2,-28(fp)
    359c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    35a0:	e0bff717 	ldw	r2,-36(fp)
}
    35a4:	e037883a 	mov	sp,fp
    35a8:	dfc00117 	ldw	ra,4(sp)
    35ac:	df000017 	ldw	fp,0(sp)
    35b0:	dec00204 	addi	sp,sp,8
    35b4:	f800283a 	ret

000035b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    35b8:	defffc04 	addi	sp,sp,-16
    35bc:	dfc00315 	stw	ra,12(sp)
    35c0:	df000215 	stw	fp,8(sp)
    35c4:	dc000115 	stw	r16,4(sp)
    35c8:	df000204 	addi	fp,sp,8
    35cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    35d0:	e0bffe17 	ldw	r2,-8(fp)
    35d4:	108000d0 	cmplti	r2,r2,3
    35d8:	1000111e 	bne	r2,zero,3620 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    35dc:	04000034 	movhi	r16,0
    35e0:	8415ff04 	addi	r16,r16,22524
    35e4:	e0bffe17 	ldw	r2,-8(fp)
    35e8:	01400304 	movi	r5,12
    35ec:	1009883a 	mov	r4,r2
    35f0:	0003de00 	call	3de0 <__mulsi3>
    35f4:	8085883a 	add	r2,r16,r2
    35f8:	10800204 	addi	r2,r2,8
    35fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3600:	04000034 	movhi	r16,0
    3604:	8415ff04 	addi	r16,r16,22524
    3608:	e0bffe17 	ldw	r2,-8(fp)
    360c:	01400304 	movi	r5,12
    3610:	1009883a 	mov	r4,r2
    3614:	0003de00 	call	3de0 <__mulsi3>
    3618:	8085883a 	add	r2,r16,r2
    361c:	10000015 	stw	zero,0(r2)
  }
}
    3620:	0001883a 	nop
    3624:	e6ffff04 	addi	sp,fp,-4
    3628:	dfc00217 	ldw	ra,8(sp)
    362c:	df000117 	ldw	fp,4(sp)
    3630:	dc000017 	ldw	r16,0(sp)
    3634:	dec00304 	addi	sp,sp,12
    3638:	f800283a 	ret

0000363c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    363c:	defffa04 	addi	sp,sp,-24
    3640:	df000515 	stw	fp,20(sp)
    3644:	df000504 	addi	fp,sp,20
    3648:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    364c:	0005303a 	rdctl	r2,status
    3650:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3654:	e0fffc17 	ldw	r3,-16(fp)
    3658:	00bfff84 	movi	r2,-2
    365c:	1884703a 	and	r2,r3,r2
    3660:	1001703a 	wrctl	status,r2
  
  return context;
    3664:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3668:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    366c:	e0bfff17 	ldw	r2,-4(fp)
    3670:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3674:	e0bffd17 	ldw	r2,-12(fp)
    3678:	10800017 	ldw	r2,0(r2)
    367c:	e0fffd17 	ldw	r3,-12(fp)
    3680:	18c00117 	ldw	r3,4(r3)
    3684:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    3688:	e0bffd17 	ldw	r2,-12(fp)
    368c:	10800117 	ldw	r2,4(r2)
    3690:	e0fffd17 	ldw	r3,-12(fp)
    3694:	18c00017 	ldw	r3,0(r3)
    3698:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    369c:	e0bffd17 	ldw	r2,-12(fp)
    36a0:	e0fffd17 	ldw	r3,-12(fp)
    36a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    36a8:	e0bffd17 	ldw	r2,-12(fp)
    36ac:	e0fffd17 	ldw	r3,-12(fp)
    36b0:	10c00015 	stw	r3,0(r2)
    36b4:	e0bffb17 	ldw	r2,-20(fp)
    36b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    36bc:	e0bffe17 	ldw	r2,-8(fp)
    36c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    36c4:	0001883a 	nop
    36c8:	e037883a 	mov	sp,fp
    36cc:	df000017 	ldw	fp,0(sp)
    36d0:	dec00104 	addi	sp,sp,4
    36d4:	f800283a 	ret

000036d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    36d8:	defffb04 	addi	sp,sp,-20
    36dc:	dfc00415 	stw	ra,16(sp)
    36e0:	df000315 	stw	fp,12(sp)
    36e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    36e8:	d0a00f17 	ldw	r2,-32708(gp)
    36ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    36f0:	d0a6ef17 	ldw	r2,-25668(gp)
    36f4:	10800044 	addi	r2,r2,1
    36f8:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    36fc:	00002e06 	br	37b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    3700:	e0bffd17 	ldw	r2,-12(fp)
    3704:	10800017 	ldw	r2,0(r2)
    3708:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    370c:	e0bffd17 	ldw	r2,-12(fp)
    3710:	10800403 	ldbu	r2,16(r2)
    3714:	10803fcc 	andi	r2,r2,255
    3718:	10000426 	beq	r2,zero,372c <alt_tick+0x54>
    371c:	d0a6ef17 	ldw	r2,-25668(gp)
    3720:	1000021e 	bne	r2,zero,372c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    372c:	e0bffd17 	ldw	r2,-12(fp)
    3730:	10800217 	ldw	r2,8(r2)
    3734:	d0e6ef17 	ldw	r3,-25668(gp)
    3738:	18801d36 	bltu	r3,r2,37b0 <alt_tick+0xd8>
    373c:	e0bffd17 	ldw	r2,-12(fp)
    3740:	10800403 	ldbu	r2,16(r2)
    3744:	10803fcc 	andi	r2,r2,255
    3748:	1000191e 	bne	r2,zero,37b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    374c:	e0bffd17 	ldw	r2,-12(fp)
    3750:	10800317 	ldw	r2,12(r2)
    3754:	e0fffd17 	ldw	r3,-12(fp)
    3758:	18c00517 	ldw	r3,20(r3)
    375c:	1809883a 	mov	r4,r3
    3760:	103ee83a 	callr	r2
    3764:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3768:	e0bfff17 	ldw	r2,-4(fp)
    376c:	1000031e 	bne	r2,zero,377c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    3770:	e13ffd17 	ldw	r4,-12(fp)
    3774:	000363c0 	call	363c <alt_alarm_stop>
    3778:	00000d06 	br	37b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    377c:	e0bffd17 	ldw	r2,-12(fp)
    3780:	10c00217 	ldw	r3,8(r2)
    3784:	e0bfff17 	ldw	r2,-4(fp)
    3788:	1887883a 	add	r3,r3,r2
    378c:	e0bffd17 	ldw	r2,-12(fp)
    3790:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3794:	e0bffd17 	ldw	r2,-12(fp)
    3798:	10c00217 	ldw	r3,8(r2)
    379c:	d0a6ef17 	ldw	r2,-25668(gp)
    37a0:	1880032e 	bgeu	r3,r2,37b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    37a4:	e0bffd17 	ldw	r2,-12(fp)
    37a8:	00c00044 	movi	r3,1
    37ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    37b0:	e0bffe17 	ldw	r2,-8(fp)
    37b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    37b8:	e0fffd17 	ldw	r3,-12(fp)
    37bc:	d0a00f04 	addi	r2,gp,-32708
    37c0:	18bfcf1e 	bne	r3,r2,3700 <__alt_exception_stack_pointer+0xf8003700>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    37c4:	0001883a 	nop
}
    37c8:	0001883a 	nop
    37cc:	e037883a 	mov	sp,fp
    37d0:	dfc00117 	ldw	ra,4(sp)
    37d4:	df000017 	ldw	fp,0(sp)
    37d8:	dec00204 	addi	sp,sp,8
    37dc:	f800283a 	ret

000037e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    37e0:	deffff04 	addi	sp,sp,-4
    37e4:	df000015 	stw	fp,0(sp)
    37e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    37ec:	000170fa 	wrctl	ienable,zero
}
    37f0:	0001883a 	nop
    37f4:	e037883a 	mov	sp,fp
    37f8:	df000017 	ldw	fp,0(sp)
    37fc:	dec00104 	addi	sp,sp,4
    3800:	f800283a 	ret

00003804 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    3804:	defffe04 	addi	sp,sp,-8
    3808:	df000115 	stw	fp,4(sp)
    380c:	df000104 	addi	fp,sp,4
    3810:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    3814:	e0bfff17 	ldw	r2,-4(fp)
    3818:	10bffe84 	addi	r2,r2,-6
    381c:	10c00428 	cmpgeui	r3,r2,16
    3820:	18001a1e 	bne	r3,zero,388c <alt_exception_cause_generated_bad_addr+0x88>
    3824:	100690ba 	slli	r3,r2,2
    3828:	00800034 	movhi	r2,0
    382c:	108e0f04 	addi	r2,r2,14396
    3830:	1885883a 	add	r2,r3,r2
    3834:	10800017 	ldw	r2,0(r2)
    3838:	1000683a 	jmp	r2
    383c:	0000387c 	xorhi	zero,zero,225
    3840:	0000387c 	xorhi	zero,zero,225
    3844:	0000388c 	andi	zero,zero,226
    3848:	0000388c 	andi	zero,zero,226
    384c:	0000388c 	andi	zero,zero,226
    3850:	0000387c 	xorhi	zero,zero,225
    3854:	00003884 	movi	zero,226
    3858:	0000388c 	andi	zero,zero,226
    385c:	0000387c 	xorhi	zero,zero,225
    3860:	0000387c 	xorhi	zero,zero,225
    3864:	0000388c 	andi	zero,zero,226
    3868:	0000387c 	xorhi	zero,zero,225
    386c:	00003884 	movi	zero,226
    3870:	0000388c 	andi	zero,zero,226
    3874:	0000388c 	andi	zero,zero,226
    3878:	0000387c 	xorhi	zero,zero,225
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    387c:	00800044 	movi	r2,1
    3880:	00000306 	br	3890 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    3884:	0005883a 	mov	r2,zero
    3888:	00000106 	br	3890 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    388c:	0005883a 	mov	r2,zero
  }
}
    3890:	e037883a 	mov	sp,fp
    3894:	df000017 	ldw	fp,0(sp)
    3898:	dec00104 	addi	sp,sp,4
    389c:	f800283a 	ret

000038a0 <atexit>:
    38a0:	200b883a 	mov	r5,r4
    38a4:	000f883a 	mov	r7,zero
    38a8:	000d883a 	mov	r6,zero
    38ac:	0009883a 	mov	r4,zero
    38b0:	0003b481 	jmpi	3b48 <__register_exitproc>

000038b4 <exit>:
    38b4:	defffe04 	addi	sp,sp,-8
    38b8:	000b883a 	mov	r5,zero
    38bc:	dc000015 	stw	r16,0(sp)
    38c0:	dfc00115 	stw	ra,4(sp)
    38c4:	2021883a 	mov	r16,r4
    38c8:	0003c600 	call	3c60 <__call_exitprocs>
    38cc:	00800034 	movhi	r2,0
    38d0:	10966104 	addi	r2,r2,22916
    38d4:	11000017 	ldw	r4,0(r2)
    38d8:	20800f17 	ldw	r2,60(r4)
    38dc:	10000126 	beq	r2,zero,38e4 <exit+0x30>
    38e0:	103ee83a 	callr	r2
    38e4:	8009883a 	mov	r4,r16
    38e8:	0003e080 	call	3e08 <_exit>

000038ec <memcmp>:
    38ec:	01c000c4 	movi	r7,3
    38f0:	3980192e 	bgeu	r7,r6,3958 <memcmp+0x6c>
    38f4:	2144b03a 	or	r2,r4,r5
    38f8:	11c4703a 	and	r2,r2,r7
    38fc:	10000f26 	beq	r2,zero,393c <memcmp+0x50>
    3900:	20800003 	ldbu	r2,0(r4)
    3904:	28c00003 	ldbu	r3,0(r5)
    3908:	10c0151e 	bne	r2,r3,3960 <memcmp+0x74>
    390c:	31bfff84 	addi	r6,r6,-2
    3910:	01ffffc4 	movi	r7,-1
    3914:	00000406 	br	3928 <memcmp+0x3c>
    3918:	20800003 	ldbu	r2,0(r4)
    391c:	28c00003 	ldbu	r3,0(r5)
    3920:	31bfffc4 	addi	r6,r6,-1
    3924:	10c00e1e 	bne	r2,r3,3960 <memcmp+0x74>
    3928:	21000044 	addi	r4,r4,1
    392c:	29400044 	addi	r5,r5,1
    3930:	31fff91e 	bne	r6,r7,3918 <__alt_exception_stack_pointer+0xf8003918>
    3934:	0005883a 	mov	r2,zero
    3938:	f800283a 	ret
    393c:	20c00017 	ldw	r3,0(r4)
    3940:	28800017 	ldw	r2,0(r5)
    3944:	18bfee1e 	bne	r3,r2,3900 <__alt_exception_stack_pointer+0xf8003900>
    3948:	31bfff04 	addi	r6,r6,-4
    394c:	21000104 	addi	r4,r4,4
    3950:	29400104 	addi	r5,r5,4
    3954:	39bff936 	bltu	r7,r6,393c <__alt_exception_stack_pointer+0xf800393c>
    3958:	303fe91e 	bne	r6,zero,3900 <__alt_exception_stack_pointer+0xf8003900>
    395c:	003ff506 	br	3934 <__alt_exception_stack_pointer+0xf8003934>
    3960:	10c5c83a 	sub	r2,r2,r3
    3964:	f800283a 	ret

00003968 <memcpy>:
    3968:	defffd04 	addi	sp,sp,-12
    396c:	dfc00215 	stw	ra,8(sp)
    3970:	dc400115 	stw	r17,4(sp)
    3974:	dc000015 	stw	r16,0(sp)
    3978:	00c003c4 	movi	r3,15
    397c:	2005883a 	mov	r2,r4
    3980:	1980452e 	bgeu	r3,r6,3a98 <memcpy+0x130>
    3984:	2906b03a 	or	r3,r5,r4
    3988:	18c000cc 	andi	r3,r3,3
    398c:	1800441e 	bne	r3,zero,3aa0 <memcpy+0x138>
    3990:	347ffc04 	addi	r17,r6,-16
    3994:	8822d13a 	srli	r17,r17,4
    3998:	28c00104 	addi	r3,r5,4
    399c:	23400104 	addi	r13,r4,4
    39a0:	8820913a 	slli	r16,r17,4
    39a4:	2b000204 	addi	r12,r5,8
    39a8:	22c00204 	addi	r11,r4,8
    39ac:	84000504 	addi	r16,r16,20
    39b0:	2a800304 	addi	r10,r5,12
    39b4:	22400304 	addi	r9,r4,12
    39b8:	2c21883a 	add	r16,r5,r16
    39bc:	2811883a 	mov	r8,r5
    39c0:	200f883a 	mov	r7,r4
    39c4:	41000017 	ldw	r4,0(r8)
    39c8:	1fc00017 	ldw	ra,0(r3)
    39cc:	63c00017 	ldw	r15,0(r12)
    39d0:	39000015 	stw	r4,0(r7)
    39d4:	53800017 	ldw	r14,0(r10)
    39d8:	6fc00015 	stw	ra,0(r13)
    39dc:	5bc00015 	stw	r15,0(r11)
    39e0:	4b800015 	stw	r14,0(r9)
    39e4:	18c00404 	addi	r3,r3,16
    39e8:	39c00404 	addi	r7,r7,16
    39ec:	42000404 	addi	r8,r8,16
    39f0:	6b400404 	addi	r13,r13,16
    39f4:	63000404 	addi	r12,r12,16
    39f8:	5ac00404 	addi	r11,r11,16
    39fc:	52800404 	addi	r10,r10,16
    3a00:	4a400404 	addi	r9,r9,16
    3a04:	1c3fef1e 	bne	r3,r16,39c4 <__alt_exception_stack_pointer+0xf80039c4>
    3a08:	89c00044 	addi	r7,r17,1
    3a0c:	380e913a 	slli	r7,r7,4
    3a10:	310003cc 	andi	r4,r6,15
    3a14:	02c000c4 	movi	r11,3
    3a18:	11c7883a 	add	r3,r2,r7
    3a1c:	29cb883a 	add	r5,r5,r7
    3a20:	5900212e 	bgeu	r11,r4,3aa8 <memcpy+0x140>
    3a24:	1813883a 	mov	r9,r3
    3a28:	2811883a 	mov	r8,r5
    3a2c:	200f883a 	mov	r7,r4
    3a30:	42800017 	ldw	r10,0(r8)
    3a34:	4a400104 	addi	r9,r9,4
    3a38:	39ffff04 	addi	r7,r7,-4
    3a3c:	4abfff15 	stw	r10,-4(r9)
    3a40:	42000104 	addi	r8,r8,4
    3a44:	59fffa36 	bltu	r11,r7,3a30 <__alt_exception_stack_pointer+0xf8003a30>
    3a48:	213fff04 	addi	r4,r4,-4
    3a4c:	2008d0ba 	srli	r4,r4,2
    3a50:	318000cc 	andi	r6,r6,3
    3a54:	21000044 	addi	r4,r4,1
    3a58:	2109883a 	add	r4,r4,r4
    3a5c:	2109883a 	add	r4,r4,r4
    3a60:	1907883a 	add	r3,r3,r4
    3a64:	290b883a 	add	r5,r5,r4
    3a68:	30000626 	beq	r6,zero,3a84 <memcpy+0x11c>
    3a6c:	198d883a 	add	r6,r3,r6
    3a70:	29c00003 	ldbu	r7,0(r5)
    3a74:	18c00044 	addi	r3,r3,1
    3a78:	29400044 	addi	r5,r5,1
    3a7c:	19ffffc5 	stb	r7,-1(r3)
    3a80:	19bffb1e 	bne	r3,r6,3a70 <__alt_exception_stack_pointer+0xf8003a70>
    3a84:	dfc00217 	ldw	ra,8(sp)
    3a88:	dc400117 	ldw	r17,4(sp)
    3a8c:	dc000017 	ldw	r16,0(sp)
    3a90:	dec00304 	addi	sp,sp,12
    3a94:	f800283a 	ret
    3a98:	2007883a 	mov	r3,r4
    3a9c:	003ff206 	br	3a68 <__alt_exception_stack_pointer+0xf8003a68>
    3aa0:	2007883a 	mov	r3,r4
    3aa4:	003ff106 	br	3a6c <__alt_exception_stack_pointer+0xf8003a6c>
    3aa8:	200d883a 	mov	r6,r4
    3aac:	003fee06 	br	3a68 <__alt_exception_stack_pointer+0xf8003a68>

00003ab0 <strlen>:
    3ab0:	208000cc 	andi	r2,r4,3
    3ab4:	10002026 	beq	r2,zero,3b38 <strlen+0x88>
    3ab8:	20800007 	ldb	r2,0(r4)
    3abc:	10002026 	beq	r2,zero,3b40 <strlen+0x90>
    3ac0:	2005883a 	mov	r2,r4
    3ac4:	00000206 	br	3ad0 <strlen+0x20>
    3ac8:	10c00007 	ldb	r3,0(r2)
    3acc:	18001826 	beq	r3,zero,3b30 <strlen+0x80>
    3ad0:	10800044 	addi	r2,r2,1
    3ad4:	10c000cc 	andi	r3,r2,3
    3ad8:	183ffb1e 	bne	r3,zero,3ac8 <__alt_exception_stack_pointer+0xf8003ac8>
    3adc:	10c00017 	ldw	r3,0(r2)
    3ae0:	01ffbff4 	movhi	r7,65279
    3ae4:	39ffbfc4 	addi	r7,r7,-257
    3ae8:	00ca303a 	nor	r5,zero,r3
    3aec:	01a02074 	movhi	r6,32897
    3af0:	19c7883a 	add	r3,r3,r7
    3af4:	31a02004 	addi	r6,r6,-32640
    3af8:	1946703a 	and	r3,r3,r5
    3afc:	1986703a 	and	r3,r3,r6
    3b00:	1800091e 	bne	r3,zero,3b28 <strlen+0x78>
    3b04:	10800104 	addi	r2,r2,4
    3b08:	10c00017 	ldw	r3,0(r2)
    3b0c:	19cb883a 	add	r5,r3,r7
    3b10:	00c6303a 	nor	r3,zero,r3
    3b14:	28c6703a 	and	r3,r5,r3
    3b18:	1986703a 	and	r3,r3,r6
    3b1c:	183ff926 	beq	r3,zero,3b04 <__alt_exception_stack_pointer+0xf8003b04>
    3b20:	00000106 	br	3b28 <strlen+0x78>
    3b24:	10800044 	addi	r2,r2,1
    3b28:	10c00007 	ldb	r3,0(r2)
    3b2c:	183ffd1e 	bne	r3,zero,3b24 <__alt_exception_stack_pointer+0xf8003b24>
    3b30:	1105c83a 	sub	r2,r2,r4
    3b34:	f800283a 	ret
    3b38:	2005883a 	mov	r2,r4
    3b3c:	003fe706 	br	3adc <__alt_exception_stack_pointer+0xf8003adc>
    3b40:	0005883a 	mov	r2,zero
    3b44:	f800283a 	ret

00003b48 <__register_exitproc>:
    3b48:	defffa04 	addi	sp,sp,-24
    3b4c:	dc000315 	stw	r16,12(sp)
    3b50:	04000034 	movhi	r16,0
    3b54:	84166104 	addi	r16,r16,22916
    3b58:	80c00017 	ldw	r3,0(r16)
    3b5c:	dc400415 	stw	r17,16(sp)
    3b60:	dfc00515 	stw	ra,20(sp)
    3b64:	18805217 	ldw	r2,328(r3)
    3b68:	2023883a 	mov	r17,r4
    3b6c:	10003726 	beq	r2,zero,3c4c <__register_exitproc+0x104>
    3b70:	10c00117 	ldw	r3,4(r2)
    3b74:	010007c4 	movi	r4,31
    3b78:	20c00e16 	blt	r4,r3,3bb4 <__register_exitproc+0x6c>
    3b7c:	1a000044 	addi	r8,r3,1
    3b80:	8800221e 	bne	r17,zero,3c0c <__register_exitproc+0xc4>
    3b84:	18c00084 	addi	r3,r3,2
    3b88:	18c7883a 	add	r3,r3,r3
    3b8c:	18c7883a 	add	r3,r3,r3
    3b90:	12000115 	stw	r8,4(r2)
    3b94:	10c7883a 	add	r3,r2,r3
    3b98:	19400015 	stw	r5,0(r3)
    3b9c:	0005883a 	mov	r2,zero
    3ba0:	dfc00517 	ldw	ra,20(sp)
    3ba4:	dc400417 	ldw	r17,16(sp)
    3ba8:	dc000317 	ldw	r16,12(sp)
    3bac:	dec00604 	addi	sp,sp,24
    3bb0:	f800283a 	ret
    3bb4:	00800034 	movhi	r2,0
    3bb8:	1081c504 	addi	r2,r2,1812
    3bbc:	10002626 	beq	r2,zero,3c58 <__register_exitproc+0x110>
    3bc0:	01006404 	movi	r4,400
    3bc4:	d9400015 	stw	r5,0(sp)
    3bc8:	d9800115 	stw	r6,4(sp)
    3bcc:	d9c00215 	stw	r7,8(sp)
    3bd0:	00007140 	call	714 <malloc>
    3bd4:	d9400017 	ldw	r5,0(sp)
    3bd8:	d9800117 	ldw	r6,4(sp)
    3bdc:	d9c00217 	ldw	r7,8(sp)
    3be0:	10001d26 	beq	r2,zero,3c58 <__register_exitproc+0x110>
    3be4:	81000017 	ldw	r4,0(r16)
    3be8:	10000115 	stw	zero,4(r2)
    3bec:	02000044 	movi	r8,1
    3bf0:	22405217 	ldw	r9,328(r4)
    3bf4:	0007883a 	mov	r3,zero
    3bf8:	12400015 	stw	r9,0(r2)
    3bfc:	20805215 	stw	r2,328(r4)
    3c00:	10006215 	stw	zero,392(r2)
    3c04:	10006315 	stw	zero,396(r2)
    3c08:	883fde26 	beq	r17,zero,3b84 <__alt_exception_stack_pointer+0xf8003b84>
    3c0c:	18c9883a 	add	r4,r3,r3
    3c10:	2109883a 	add	r4,r4,r4
    3c14:	1109883a 	add	r4,r2,r4
    3c18:	21802215 	stw	r6,136(r4)
    3c1c:	01800044 	movi	r6,1
    3c20:	12406217 	ldw	r9,392(r2)
    3c24:	30cc983a 	sll	r6,r6,r3
    3c28:	4992b03a 	or	r9,r9,r6
    3c2c:	12406215 	stw	r9,392(r2)
    3c30:	21c04215 	stw	r7,264(r4)
    3c34:	01000084 	movi	r4,2
    3c38:	893fd21e 	bne	r17,r4,3b84 <__alt_exception_stack_pointer+0xf8003b84>
    3c3c:	11006317 	ldw	r4,396(r2)
    3c40:	218cb03a 	or	r6,r4,r6
    3c44:	11806315 	stw	r6,396(r2)
    3c48:	003fce06 	br	3b84 <__alt_exception_stack_pointer+0xf8003b84>
    3c4c:	18805304 	addi	r2,r3,332
    3c50:	18805215 	stw	r2,328(r3)
    3c54:	003fc606 	br	3b70 <__alt_exception_stack_pointer+0xf8003b70>
    3c58:	00bfffc4 	movi	r2,-1
    3c5c:	003fd006 	br	3ba0 <__alt_exception_stack_pointer+0xf8003ba0>

00003c60 <__call_exitprocs>:
    3c60:	defff504 	addi	sp,sp,-44
    3c64:	df000915 	stw	fp,36(sp)
    3c68:	dd400615 	stw	r21,24(sp)
    3c6c:	dc800315 	stw	r18,12(sp)
    3c70:	dfc00a15 	stw	ra,40(sp)
    3c74:	ddc00815 	stw	r23,32(sp)
    3c78:	dd800715 	stw	r22,28(sp)
    3c7c:	dd000515 	stw	r20,20(sp)
    3c80:	dcc00415 	stw	r19,16(sp)
    3c84:	dc400215 	stw	r17,8(sp)
    3c88:	dc000115 	stw	r16,4(sp)
    3c8c:	d9000015 	stw	r4,0(sp)
    3c90:	2839883a 	mov	fp,r5
    3c94:	04800044 	movi	r18,1
    3c98:	057fffc4 	movi	r21,-1
    3c9c:	00800034 	movhi	r2,0
    3ca0:	10966104 	addi	r2,r2,22916
    3ca4:	12000017 	ldw	r8,0(r2)
    3ca8:	45005217 	ldw	r20,328(r8)
    3cac:	44c05204 	addi	r19,r8,328
    3cb0:	a0001c26 	beq	r20,zero,3d24 <__call_exitprocs+0xc4>
    3cb4:	a0800117 	ldw	r2,4(r20)
    3cb8:	15ffffc4 	addi	r23,r2,-1
    3cbc:	b8000d16 	blt	r23,zero,3cf4 <__call_exitprocs+0x94>
    3cc0:	14000044 	addi	r16,r2,1
    3cc4:	8421883a 	add	r16,r16,r16
    3cc8:	8421883a 	add	r16,r16,r16
    3ccc:	84402004 	addi	r17,r16,128
    3cd0:	a463883a 	add	r17,r20,r17
    3cd4:	a421883a 	add	r16,r20,r16
    3cd8:	e0001e26 	beq	fp,zero,3d54 <__call_exitprocs+0xf4>
    3cdc:	80804017 	ldw	r2,256(r16)
    3ce0:	e0801c26 	beq	fp,r2,3d54 <__call_exitprocs+0xf4>
    3ce4:	bdffffc4 	addi	r23,r23,-1
    3ce8:	843fff04 	addi	r16,r16,-4
    3cec:	8c7fff04 	addi	r17,r17,-4
    3cf0:	bd7ff91e 	bne	r23,r21,3cd8 <__alt_exception_stack_pointer+0xf8003cd8>
    3cf4:	00800034 	movhi	r2,0
    3cf8:	1081ca04 	addi	r2,r2,1832
    3cfc:	10000926 	beq	r2,zero,3d24 <__call_exitprocs+0xc4>
    3d00:	a0800117 	ldw	r2,4(r20)
    3d04:	1000301e 	bne	r2,zero,3dc8 <__call_exitprocs+0x168>
    3d08:	a0800017 	ldw	r2,0(r20)
    3d0c:	10003226 	beq	r2,zero,3dd8 <__call_exitprocs+0x178>
    3d10:	a009883a 	mov	r4,r20
    3d14:	98800015 	stw	r2,0(r19)
    3d18:	00007280 	call	728 <free>
    3d1c:	9d000017 	ldw	r20,0(r19)
    3d20:	a03fe41e 	bne	r20,zero,3cb4 <__alt_exception_stack_pointer+0xf8003cb4>
    3d24:	dfc00a17 	ldw	ra,40(sp)
    3d28:	df000917 	ldw	fp,36(sp)
    3d2c:	ddc00817 	ldw	r23,32(sp)
    3d30:	dd800717 	ldw	r22,28(sp)
    3d34:	dd400617 	ldw	r21,24(sp)
    3d38:	dd000517 	ldw	r20,20(sp)
    3d3c:	dcc00417 	ldw	r19,16(sp)
    3d40:	dc800317 	ldw	r18,12(sp)
    3d44:	dc400217 	ldw	r17,8(sp)
    3d48:	dc000117 	ldw	r16,4(sp)
    3d4c:	dec00b04 	addi	sp,sp,44
    3d50:	f800283a 	ret
    3d54:	a0800117 	ldw	r2,4(r20)
    3d58:	80c00017 	ldw	r3,0(r16)
    3d5c:	10bfffc4 	addi	r2,r2,-1
    3d60:	15c01426 	beq	r2,r23,3db4 <__call_exitprocs+0x154>
    3d64:	80000015 	stw	zero,0(r16)
    3d68:	183fde26 	beq	r3,zero,3ce4 <__alt_exception_stack_pointer+0xf8003ce4>
    3d6c:	95c8983a 	sll	r4,r18,r23
    3d70:	a0806217 	ldw	r2,392(r20)
    3d74:	a5800117 	ldw	r22,4(r20)
    3d78:	2084703a 	and	r2,r4,r2
    3d7c:	10000b26 	beq	r2,zero,3dac <__call_exitprocs+0x14c>
    3d80:	a0806317 	ldw	r2,396(r20)
    3d84:	2088703a 	and	r4,r4,r2
    3d88:	20000c1e 	bne	r4,zero,3dbc <__call_exitprocs+0x15c>
    3d8c:	89400017 	ldw	r5,0(r17)
    3d90:	d9000017 	ldw	r4,0(sp)
    3d94:	183ee83a 	callr	r3
    3d98:	a0800117 	ldw	r2,4(r20)
    3d9c:	15bfbf1e 	bne	r2,r22,3c9c <__alt_exception_stack_pointer+0xf8003c9c>
    3da0:	98800017 	ldw	r2,0(r19)
    3da4:	153fcf26 	beq	r2,r20,3ce4 <__alt_exception_stack_pointer+0xf8003ce4>
    3da8:	003fbc06 	br	3c9c <__alt_exception_stack_pointer+0xf8003c9c>
    3dac:	183ee83a 	callr	r3
    3db0:	003ff906 	br	3d98 <__alt_exception_stack_pointer+0xf8003d98>
    3db4:	a5c00115 	stw	r23,4(r20)
    3db8:	003feb06 	br	3d68 <__alt_exception_stack_pointer+0xf8003d68>
    3dbc:	89000017 	ldw	r4,0(r17)
    3dc0:	183ee83a 	callr	r3
    3dc4:	003ff406 	br	3d98 <__alt_exception_stack_pointer+0xf8003d98>
    3dc8:	a0800017 	ldw	r2,0(r20)
    3dcc:	a027883a 	mov	r19,r20
    3dd0:	1029883a 	mov	r20,r2
    3dd4:	003fb606 	br	3cb0 <__alt_exception_stack_pointer+0xf8003cb0>
    3dd8:	0005883a 	mov	r2,zero
    3ddc:	003ffb06 	br	3dcc <__alt_exception_stack_pointer+0xf8003dcc>

00003de0 <__mulsi3>:
    3de0:	0005883a 	mov	r2,zero
    3de4:	20000726 	beq	r4,zero,3e04 <__mulsi3+0x24>
    3de8:	20c0004c 	andi	r3,r4,1
    3dec:	2008d07a 	srli	r4,r4,1
    3df0:	18000126 	beq	r3,zero,3df8 <__mulsi3+0x18>
    3df4:	1145883a 	add	r2,r2,r5
    3df8:	294b883a 	add	r5,r5,r5
    3dfc:	203ffa1e 	bne	r4,zero,3de8 <__alt_exception_stack_pointer+0xf8003de8>
    3e00:	f800283a 	ret
    3e04:	f800283a 	ret

00003e08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3e08:	defffd04 	addi	sp,sp,-12
    3e0c:	df000215 	stw	fp,8(sp)
    3e10:	df000204 	addi	fp,sp,8
    3e14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    3e18:	0001883a 	nop
    3e1c:	e0bfff17 	ldw	r2,-4(fp)
    3e20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    3e24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3e28:	10000226 	beq	r2,zero,3e34 <_exit+0x2c>
    ALT_SIM_FAIL();
    3e2c:	002af070 	cmpltui	zero,zero,43969
    3e30:	00000106 	br	3e38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    3e34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3e38:	003fff06 	br	3e38 <__alt_exception_stack_pointer+0xf8003e38>
