
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001695c memsz 0x0001695c flags r-x
    LOAD off    0x0001797c vaddr 0x0001697c paddr 0x000185f0 align 2**12
         filesz 0x00001c74 memsz 0x00001c74 flags rw-
    LOAD off    0x0001a264 vaddr 0x0001a264 paddr 0x0001a264 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015938  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e08  00015b74  00015b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c74  0001697c  000185f0  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  0001a264  0001a264  0001a264  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001a3e4  0001a3e4  000195f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000195f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001180  00000000  00000000  00019618  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000286cb  00000000  00000000  0001a798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a8e4  00000000  00000000  00042e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000db53  00000000  00000000  0004d747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b9c  00000000  00000000  0005b29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004688  00000000  00000000  0005de38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000198ba  00000000  00000000  000624c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0007bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019c8  00000000  00000000  0007bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000813b2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000813b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000813ba  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000813bb  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000813bc  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000813c7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000813cb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000813d6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  000813df  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  00081407  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a99e1  00000000  00000000  00086260  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00015b74 l    d  .rodata	00000000 .rodata
0001697c l    d  .rwdata	00000000 .rwdata
0001a264 l    d  .bss	00000000 .bss
0001a3e4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
0001a264 l     O .bss	00000002 ctl_reg
0001a266 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
000012a8 l     F .text	00000068 alt_dma_txchan_send
00001310 l     F .text	00000068 alt_dma_rxchan_prepare
0001a280 l     O .bss	00000004 copy_done
00001378 l     F .text	00000030 done
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000164e4 l     O .rodata	00000108 two_over_pi
00016464 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001662c l     O .rodata	00000010 init_jk
000165ec l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0001697c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00016786 l     O .rodata	00000010 zeroes.4404
00009ed4 l     F .text	000000bc __sbprintf
00016796 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000a0e4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000bc3c l     F .text	00000008 __fp_unlock
0000bc50 l     F .text	0000019c __sinit.part.1
0000bdec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000171c8 l     O .rwdata	00000020 lc_ctype_charset
000171a8 l     O .rwdata	00000020 lc_message_charset
000171e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000167c4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ea60 l     F .text	000000fc __sprint_r.part.0
000168e8 l     O .rodata	00000010 zeroes.4349
0001009c l     F .text	000000bc __sbprintf
000168f8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000121d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000122e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00012310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
000123a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000124c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000125b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001269c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012788 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00012964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000185e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00012bd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00012cbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012df8 l     F .text	00000034 alt_dev_reg
000173c8 l     O .rwdata	000000a4 copy_dma_priv
0001746c l     O .rwdata	0000001c copy_dma_tx
00017488 l     O .rwdata	0000001c copy_dma_rx
000174a4 l     O .rwdata	00001060 jtag_uart_0
00018504 l     O .rwdata	00000054 pixel_dma
00018558 l     O .rwdata	00000044 vga_resampler
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
000131a8 l     F .text	00000034 alt_dma_txchan_reg
000131dc l     F .text	00000034 alt_dma_rxchan_reg
00013308 l     F .text	0000009c alt_avalon_dma_launch_txonly
000133a4 l     F .text	0000009c alt_avalon_dma_launch_rxonly
00013440 l     F .text	00000344 alt_avalon_dma_ioctl
00013af8 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013f90 l     F .text	0000020c altera_avalon_jtag_uart_irq
0001419c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000147d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014fcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001512c l     F .text	0000003c alt_get_errno
00015168 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001a2b8 g     O .bss	00000004 alt_instruction_exception_handler
0000e0f8 g     F .text	00000074 _mprec_log10
0000e1e4 g     F .text	0000008c __any_on
00010650 g     F .text	00000054 _isatty_r
000167d0 g     O .rodata	00000028 __mprec_tinytens
000128a0 g     F .text	0000007c alt_main
00007a14 g     F .text	000000c0 _puts_r
0001a2e4 g     O .bss	00000100 alt_irq
00004e5c g     F .text	00000014 fabs
000106a4 g     F .text	00000060 _lseek_r
000013a8 g     F .text	00000128 transfer
000185f0 g       *ABS*	00000000 __flash_rwdata_start
00005c9c g     F .text	00000088 .hidden __eqdf2
0001a3e4 g       *ABS*	00000000 __alt_heap_start
000185a0 g     O .rwdata	00000004 dma
000079d8 g     F .text	0000003c printf
000108bc g     F .text	0000009c _wcrtomb_r
0001859c g     O .rwdata	00000004 gpu
0001a272 g     O .bss	00000002 usb_ctl_val
0000e920 g     F .text	0000005c __sseek
0000bf9c g     F .text	00000010 __sinit
00013cb8 g     F .text	000000b4 alt_avalon_dma_init
0001a26c g     O .bss	00000004 keycode
00010764 g     F .text	00000140 __swbuf_r
0000ca70 g     F .text	0000007c _setlocale_r
0000bdf4 g     F .text	00000078 __sfmoreglue
00012940 g     F .text	00000024 __malloc_unlock
00002f04 g     F .text	00000088 UsbGetRetryCnt
0000cf34 g     F .text	0000015c memmove
00000278 g     F .text	000000b0 IO_init
0000bf84 g     F .text	00000018 _cleanup
0000d1b8 g     F .text	000000a8 _Balloc
00005d24 g     F .text	000000dc .hidden __gtdf2
00015554 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00012c14 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
000105f4 g     F .text	0000005c _fstat_r
0001a290 g     O .bss	00000004 errno
00004e70 g     F .text	000001ec floor
0000e89c g     F .text	00000008 __seofread
0001a2a4 g     O .bss	00000004 alt_argv
0002059c g       *ABS*	00000000 _gp
00012c8c g     F .text	00000030 usleep
000123dc g     F .text	00000054 alt_dma_txchan_open
00017248 g     O .rwdata	00000180 alt_fd_list
000031e8 g     F .text	0000076c __ieee754_rem_pio2
00012430 g     F .text	00000090 alt_find_dev
0000cdec g     F .text	00000148 memcpy
00007bd4 g     F .text	00000008 _times_r
0000bc44 g     F .text	0000000c _cleanup_r
00006fe8 g     F .text	000000dc .hidden __floatsidf
000150b0 g     F .text	0000007c alt_io_redirect
0001a274 g     O .bss	00000001 data_size
00012034 g     F .text	000000f4 .hidden __ltdf2
00015b74 g       *ABS*	00000000 __DTOR_END__
00007ad4 g     F .text	00000014 puts
00015744 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e7d4 g     F .text	00000074 __fpclassifyd
0000e054 g     F .text	000000a4 __ratio
00010080 g     F .text	0000001c __vfiprintf_internal
00014394 g     F .text	0000021c altera_avalon_jtag_uart_read
00007174 g     F .text	00000014 malloc
000079a8 g     F .text	00000030 _printf_r
0000530c g     F .text	00000064 .hidden __udivsi3
000125f0 g     F .text	000000ac isatty
00016820 g     O .rodata	000000c8 __mprec_tens
0000caec g     F .text	0000000c __locale_charset
00003954 g     F .text	000004a4 __kernel_cos
0001a28c g     O .bss	00000004 __malloc_top_pad
00002590 g     F .text	00000268 UsbGetConfigDesc2
00001620 g     F .text	00000074 clear_depth
000185b4 g     O .rwdata	00000004 __mb_cur_max
0000cb1c g     F .text	0000000c _localeconv_r
0000d5ec g     F .text	0000003c __i2b
0000c420 g     F .text	000004c8 __sfvwrite_r
0001a276 g     O .bss	00000002 intStat
00007ae8 g     F .text	00000054 _sbrk_r
00010704 g     F .text	00000060 _read_r
000185cc g     O .rwdata	00000004 alt_max_fd
000102e8 g     F .text	000000f0 _fclose_r
0000bc0c g     F .text	00000030 fflush
0001a288 g     O .bss	00000004 __malloc_max_sbrked_mem
00004b90 g     F .text	000002cc __kernel_sin
000053f0 g     F .text	000008ac .hidden __adddf3
00013210 g     F .text	000000f8 alt_avalon_dma_launch_bidir
0000ddfc g     F .text	0000010c __b2d
000110a0 g     F .text	000005c4 .hidden __umoddi3
0001234c g     F .text	00000054 alt_dma_rxchan_open
000127c4 g     F .text	000000dc lseek
000185a4 g     O .rwdata	00000004 _global_impure_ptr
0000e270 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
0001a3e4 g       *ABS*	00000000 __bss_end
00014edc g     F .text	000000f0 alt_iic_isr_register
0001544c g     F .text	00000108 alt_tick
00010aa4 g     F .text	000005fc .hidden __udivdi3
00010550 g     F .text	00000024 _fputwc_r
000167f8 g     O .rodata	00000028 __mprec_bigtens
0000d3d0 g     F .text	00000104 __s2b
00012128 g     F .text	000000a8 .hidden __floatunsidf
0000db3c g     F .text	00000060 __mcmp
00001fe0 g     F .text	00000100 UsbSetAddress
0000bfbc g     F .text	00000018 __fp_lock_all
00014e90 g     F .text	0000004c alt_ic_irq_enabled
000153b0 g     F .text	0000009c alt_alarm_stop
0001a2ac g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00017220 g     O .rwdata	00000028 alt_dev_null
00003df8 g     F .text	00000d98 __kernel_rem_pio2
00014b4c g     F .text	00000020 alt_dcache_flush_all
0000d4d4 g     F .text	00000068 __hi0bits
000003b0 g     F .text	00000080 IO_read
00006f68 g     F .text	00000080 .hidden __fixdfsi
000185f0 g       *ABS*	00000000 __ram_rwdata_end
000185c4 g     O .rwdata	00000008 alt_dev_list
0001394c g     F .text	00000074 alt_avalon_dma_space
00012cf8 g     F .text	00000100 write
0001697c g       *ABS*	00000000 __ram_rodata_end
000124fc g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00012034 g     F .text	000000f4 .hidden __ledf2
00002f8c g     F .text	00000080 UsbPrintMem
0000d8b4 g     F .text	00000140 __pow5mult
0000eb74 g     F .text	0000150c ___vfiprintf_internal_r
0001a29c g     O .bss	00000004 __nlocale_changed
00005370 g     F .text	00000058 .hidden __umodsi3
0001a3e4 g       *ABS*	00000000 end
000014d0 g     F .text	000000dc draw_cube
00013ed0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00015b74 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0001484c g     F .text	0000007c alt_avalon_timer_sc_init
000070c4 g     F .text	00000064 .hidden __clzsi2
000145b0 g     F .text	00000224 altera_avalon_jtag_uart_write
0000300c g     F .text	000000ec cos
0000bfac g     F .text	00000004 __sfp_lock_acquire
0000cd08 g     F .text	000000e4 memchr
00007bdc g     F .text	000022dc ___vfprintf_internal_r
000028f8 g     F .text	00000100 UsbClassRequest
0000c110 g     F .text	00000310 _free_r
0000caf8 g     F .text	00000010 __locale_mb_cur_max
000139c0 g     F .text	00000138 alt_avalon_dma_send
000159c0 g     F .text	00000180 __call_exitprocs
000185d8 g     O .rwdata	00000008 alt_dma_txchan_list
0001a298 g     O .bss	00000004 __mlocale_changed
000185ac g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001a2b0 g     O .bss	00000004 _alt_tick_rate
000030f8 g     F .text	000000f0 sin
0000d9f4 g     F .text	00000148 __lshift
0001a2b4 g     O .bss	00000004 _alt_nticks
000129a0 g     F .text	00000104 read
00012e64 g     F .text	00000344 alt_sys_init
000158a8 g     F .text	00000118 __register_exitproc
0000d628 g     F .text	0000028c __multiply
0001423c g     F .text	00000068 altera_avalon_jtag_uart_close
000053c8 g     F .text	00000028 .hidden __mulsi3
0001697c g       *ABS*	00000000 __ram_rwdata_start
00015b74 g       *ABS*	00000000 __ram_rodata_start
0001a2bc g     O .bss	00000028 __malloc_current_mallinfo
0000df08 g     F .text	0000014c __d2b
000020e0 g     F .text	00000148 UsbGetDeviceDesc1
00013d6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015680 g     F .text	000000c4 alt_get_fd
000149f4 g     F .text	00000158 alt_busy_sleep
000101b8 g     F .text	00000054 _close_r
0001582c g     F .text	0000007c memcmp
00013e2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a3e4 g       *ABS*	00000000 __alt_stack_base
00013e7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009f90 g     F .text	00000154 __swsetup_r
00011664 g     F .text	000009d0 .hidden __divdf3
0000be6c g     F .text	00000118 __sfp
0000e16c g     F .text	00000078 __copybits
00016da0 g     O .rwdata	00000408 __malloc_av_
0000bfb8 g     F .text	00000004 __sinit_lock_release
00005e00 g     F .text	0000086c .hidden __muldf3
0000e848 g     F .text	00000054 __sread
00002e80 g     F .text	00000084 UsbWaitTDListDone
00015578 g     F .text	00000108 alt_find_file
00014ba8 g     F .text	000000a4 alt_dev_llist_insert
0001291c g     F .text	00000024 __malloc_lock
00012b28 g     F .text	000000b0 sbrk
0000bbb0 g     F .text	0000005c _fflush_r
0001020c g     F .text	000000dc _calloc_r
0001a278 g     O .bss	00000001 hot_plug_count
0001a264 g       *ABS*	00000000 __bss_start
0000d090 g     F .text	00000128 memset
00001694 g     F .text	000007fc main
000137cc g     F .text	00000048 alt_avalon_dma_rx_ioctl
0001a2a8 g     O .bss	00000004 alt_envp
0001a284 g     O .bss	00000004 __malloc_max_total_mem
00013dcc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000027f8 g     F .text	00000100 UsbSetConfig
000108a4 g     F .text	00000018 __swbuf
0000e97c g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
000103d8 g     F .text	00000014 fclose
0000a30c g     F .text	00001688 _dtoa_r
0000719c g     F .text	0000080c _malloc_r
00010a18 g     F .text	00000030 __ascii_wctomb
000185e0 g     O .rwdata	00000004 alt_errno
0000c8e8 g     F .text	000000c4 _fwalk
00005214 g     F .text	00000084 .hidden __divsi3
0000bfec g     F .text	00000124 _malloc_trim_r
000029f8 g     F .text	00000148 UsbGetHidDesc
00015b74 g       *ABS*	00000000 __CTOR_END__
0000e984 g     F .text	000000dc strcmp
00015b74 g       *ABS*	00000000 __flash_rodata_start
00015b74 g       *ABS*	00000000 __DTOR_LIST__
000051f8 g     F .text	0000001c copysign
00005c9c g     F .text	00000088 .hidden __nedf2
00001ee8 g     F .text	00000044 UsbRead
00000430 g     F .text	00000300 loop_keyboard
00012e2c g     F .text	00000038 alt_irq_init
00012aa4 g     F .text	00000084 alt_release_fd
0001663c g     O .rodata	00000100 .hidden __clz_tab
0001a294 g     O .bss	00000004 _PathLocale
000157e0 g     F .text	00000014 atexit
00010158 g     F .text	00000060 _write_r
0000cb28 g     F .text	00000018 setlocale
000185a8 g     O .rwdata	00000004 _impure_ptr
0001a2a0 g     O .bss	00000004 alt_argc
0000b994 g     F .text	0000021c __sflush_r
0000505c g     F .text	0000019c scalbn
00014cac g     F .text	00000060 _do_dtors
0000cb14 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000dd98 g     F .text	00000064 __ulp
0000bfd4 g     F .text	00000018 __fp_unlock_all
0001a270 g     O .bss	00000001 toggle
000185bc g     O .rwdata	00000008 alt_fs_list
0001a27c g     O .bss	00000004 offset
00002b40 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000cb40 g     F .text	0000000c localeconv
00014d2c g     F .text	00000050 alt_ic_isr_register
000185f0 g       *ABS*	00000000 _edata
0001a3e4 g       *ABS*	00000000 _end
00001e90 g     F .text	00000058 UsbWrite
000103ec g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
000142a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001a27a g     O .bss	00000002 code
00014e04 g     F .text	0000008c alt_ic_irq_disable
0000e8a4 g     F .text	0000007c __swrite
000185b0 g     O .rwdata	00000004 __malloc_trim_threshold
0000cb08 g     F .text	0000000c __locale_msgcharset
0001a268 g     O .bss	00000002 fs_device
000157f4 g     F .text	00000038 exit
0000c9ac g     F .text	000000c4 _fwalk_reent
0000db9c g     F .text	000001fc __mdiff
00005298 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000bfb0 g     F .text	00000004 __sfp_lock_release
00000328 g     F .text	00000088 IO_write
00015b40 g     F .text	00000034 _exit
000148c8 g     F .text	0000012c alt_alarm_start
0000cb4c g     F .text	000001bc __smakebuf_r
00007b3c g     F .text	00000098 strlen
00015254 g     F .text	0000015c open
00005d24 g     F .text	000000dc .hidden __gedf2
00007128 g     F .text	0000004c clock
000185b8 g     O .rwdata	00000004 __wctomb
0000eb5c g     F .text	00000018 __sprint_r
00014d0c g     F .text	00000020 alt_icache_flush_all
00014d7c g     F .text	00000088 alt_ic_irq_enable
00009eb8 g     F .text	0000001c __vfprintf_internal
00010a48 g     F .text	0000005c _wctomb_r
00013814 g     F .text	00000138 alt_avalon_dma_prepare
000015ac g     F .text	00000074 clear_screen
0000666c g     F .text	000008fc .hidden __subdf3
00000730 g     F .text	00000b78 init_keyboard
000185d0 g     O .rwdata	00000008 alt_dma_rxchan_list
0000d53c g     F .text	000000b0 __lo0bits
00002400 g     F .text	00000190 UsbGetConfigDesc1
000185e8 g     O .rwdata	00000008 alt_alarm_list
00014c4c g     F .text	00000060 _do_ctors
00001f2c g     F .text	000000b4 UsbSoftReset
00010958 g     F .text	000000c0 wcrtomb
0001220c g     F .text	000000d8 close
00002228 g     F .text	000001d8 UsbGetDeviceDesc2
00012704 g     F .text	00000084 alt_load
00013784 g     F .text	00000048 alt_avalon_dma_tx_ioctl
00010574 g     F .text	00000080 fputwc
00007188 g     F .text	00000014 free
0000bfb4 g     F .text	00000004 __sinit_lock_acquire
0000d288 g     F .text	00000148 __multadd
0000d260 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008000b4 	movhi	r2,2
 14c:	10a8b904 	addi	r2,r2,-23836
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008000b4 	movhi	r2,2
 164:	10a8b904 	addi	r2,r2,-23836
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a74717 	ldw	r2,-25316(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a74717 	ldw	r2,-25316(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d6816714 	ori	gp,gp,1436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10a89914 	ori	r2,r2,41572

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18e8f914 	ori	r3,r3,41956

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00127040 	call	12704 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	00128a00 	call	128a0 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     284:	00820034 	movhi	r2,2048
     288:	108c1004 	addi	r2,r2,12352
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     294:	00820034 	movhi	r2,2048
     298:	108c1404 	addi	r2,r2,12368
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     2a4:	00820034 	movhi	r2,2048
     2a8:	108c1c04 	addi	r2,r2,12400
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2b4:	00820034 	movhi	r2,2048
     2b8:	108c1804 	addi	r2,r2,12384
     2bc:	00c00044 	movi	r3,1
     2c0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2c4:	00820034 	movhi	r2,2048
     2c8:	108c2404 	addi	r2,r2,12432
     2cc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2d0:	00820034 	movhi	r2,2048
     2d4:	108c2004 	addi	r2,r2,12416
     2d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2dc:	00820034 	movhi	r2,2048
     2e0:	108c1404 	addi	r2,r2,12368
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2e8:	00820034 	movhi	r2,2048
     2ec:	108c1004 	addi	r2,r2,12352
     2f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2f4:	00820034 	movhi	r2,2048
     2f8:	108c1004 	addi	r2,r2,12352
     2fc:	00c00044 	movi	r3,1
     300:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     304:	00820034 	movhi	r2,2048
     308:	108c1404 	addi	r2,r2,12368
     30c:	00c00044 	movi	r3,1
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	2007883a 	mov	r3,r4
     338:	2805883a 	mov	r2,r5
     33c:	e0fffe05 	stb	r3,-8(fp)
     340:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     344:	00820034 	movhi	r2,2048
     348:	108c2404 	addi	r2,r2,12432
     34c:	e0fffe03 	ldbu	r3,-8(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     354:	00820034 	movhi	r2,2048
     358:	108c2004 	addi	r2,r2,12416
     35c:	e0ffff0b 	ldhu	r3,-4(fp)
     360:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     364:	00820034 	movhi	r2,2048
     368:	108c1404 	addi	r2,r2,12368
     36c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     370:	00820034 	movhi	r2,2048
     374:	108c1804 	addi	r2,r2,12384
     378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     37c:	00820034 	movhi	r2,2048
     380:	108c1804 	addi	r2,r2,12384
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     38c:	00820034 	movhi	r2,2048
     390:	108c1404 	addi	r2,r2,12368
     394:	00c00044 	movi	r3,1
     398:	10c00005 	stb	r3,0(r2)

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	2005883a 	mov	r2,r4
     3c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     3c4:	00820034 	movhi	r2,2048
     3c8:	108c2404 	addi	r2,r2,12432
     3cc:	e0ffff03 	ldbu	r3,-4(fp)
     3d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3d4:	00820034 	movhi	r2,2048
     3d8:	108c1404 	addi	r2,r2,12368
     3dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3e0:	00820034 	movhi	r2,2048
     3e4:	108c1c04 	addi	r2,r2,12400
     3e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     3ec:	00820034 	movhi	r2,2048
     3f0:	108c2004 	addi	r2,r2,12416
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     3fc:	00820034 	movhi	r2,2048
     400:	108c1c04 	addi	r2,r2,12400
     404:	00c00044 	movi	r3,1
     408:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     40c:	00820034 	movhi	r2,2048
     410:	108c1404 	addi	r2,r2,12368
     414:	00c00044 	movi	r3,1
     418:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     41c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     444:	d0a73503 	ldbu	r2,-25388(gp)
     448:	10800044 	addi	r2,r2,1
     44c:	d0a73505 	stb	r2,-25388(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     450:	01414004 	movi	r5,1280
     454:	01000084 	movi	r4,2
     458:	00003280 	call	328 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     45c:	01414704 	movi	r5,1308
     460:	0009883a 	mov	r4,zero
     464:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     468:	d0a73603 	ldbu	r2,-25384(gp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	108003cc 	andi	r2,r2,15
     474:	100b883a 	mov	r5,r2
     478:	0009883a 	mov	r4,zero
     47c:	00003280 	call	328 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     480:	0140a444 	movi	r5,657
     484:	0009883a 	mov	r4,zero
     488:	00003280 	call	328 <IO_write>
	if(toggle%2)
     48c:	d0a73503 	ldbu	r2,-25388(gp)
     490:	1080004c 	andi	r2,r2,1
     494:	10803fcc 	andi	r2,r2,255
     498:	10000426 	beq	r2,zero,4ac <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     49c:	01400044 	movi	r5,1
     4a0:	0009883a 	mov	r4,zero
     4a4:	00003280 	call	328 <IO_write>
     4a8:	00000306 	br	4b8 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     4ac:	01401044 	movi	r5,65
     4b0:	0009883a 	mov	r4,zero
     4b4:	00003280 	call	328 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     4b8:	014004c4 	movi	r5,19
     4bc:	0009883a 	mov	r4,zero
     4c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     4c4:	000b883a 	mov	r5,zero
     4c8:	0009883a 	mov	r4,zero
     4cc:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4d0:	01414004 	movi	r5,1280
     4d4:	01006c04 	movi	r4,432
     4d8:	0001e900 	call	1e90 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	00002506 	br	574 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     4e0:	01414004 	movi	r5,1280
     4e4:	01000084 	movi	r4,2
     4e8:	00003280 	call	328 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     4ec:	01414704 	movi	r5,1308
     4f0:	0009883a 	mov	r4,zero
     4f4:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     4f8:	d0a73603 	ldbu	r2,-25384(gp)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	108003cc 	andi	r2,r2,15
     504:	100b883a 	mov	r5,r2
     508:	0009883a 	mov	r4,zero
     50c:	00003280 	call	328 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     510:	0140a444 	movi	r5,657
     514:	0009883a 	mov	r4,zero
     518:	00003280 	call	328 <IO_write>
		if(toggle%2)
     51c:	d0a73503 	ldbu	r2,-25388(gp)
     520:	1080004c 	andi	r2,r2,1
     524:	10803fcc 	andi	r2,r2,255
     528:	10000426 	beq	r2,zero,53c <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     52c:	01400044 	movi	r5,1
     530:	0009883a 	mov	r4,zero
     534:	00003280 	call	328 <IO_write>
     538:	00000306 	br	548 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     53c:	01401044 	movi	r5,65
     540:	0009883a 	mov	r4,zero
     544:	00003280 	call	328 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     548:	014004c4 	movi	r5,19
     54c:	0009883a 	mov	r4,zero
     550:	00003280 	call	328 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     554:	000b883a 	mov	r5,zero
     558:	0009883a 	mov	r4,zero
     55c:	00003280 	call	328 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     560:	01414004 	movi	r5,1280
     564:	01006c04 	movi	r4,432
     568:	0001e900 	call	1e90 <UsbWrite>
		usleep(10*1000);
     56c:	0109c404 	movi	r4,10000
     570:	0012c8c0 	call	12c8c <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     574:	010000c4 	movi	r4,3
     578:	00003b00 	call	3b0 <IO_read>
     57c:	10bfffcc 	andi	r2,r2,65535
     580:	1080040c 	andi	r2,r2,16
     584:	103fd626 	beq	r2,zero,4e0 <__alt_exception_stack_pointer+0xf80004e0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     588:	0002e800 	call	2e80 <UsbWaitTDListDone>
     58c:	d0a7358d 	sth	r2,-25386(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     590:	01014784 	movi	r4,1310
     594:	0001ee80 	call	1ee8 <UsbRead>
     598:	10bfffcc 	andi	r2,r2,65535
     59c:	d0a73415 	stw	r2,-25392(gp)
	printf("\nfirst two keycode values are %04x\n",keycode);
     5a0:	d0a73417 	ldw	r2,-25392(gp)
     5a4:	100b883a 	mov	r5,r2
     5a8:	01000074 	movhi	r4,1
     5ac:	2116dd04 	addi	r4,r4,23412
     5b0:	00079d80 	call	79d8 <printf>
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     5b4:	00820034 	movhi	r2,2048
     5b8:	108c2804 	addi	r2,r2,12448
     5bc:	d0e73417 	ldw	r3,-25392(gp)
     5c0:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     5c4:	d0a73417 	ldw	r2,-25392(gp)
     5c8:	10c03fcc 	andi	r3,r2,255
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     5d4:	01003204 	movi	r4,200
     5d8:	0012c8c0 	call	12c8c <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     5dc:	d0a7320b 	ldhu	r2,-25400(gp)
     5e0:	10bfffcc 	andi	r2,r2,65535
     5e4:	1009883a 	mov	r4,r2
     5e8:	0001ee80 	call	1ee8 <UsbRead>
     5ec:	d0a7358d 	sth	r2,-25386(gp)

	if(!(usb_ctl_val & no_device))
     5f0:	d0e7358b 	ldhu	r3,-25386(gp)
     5f4:	d0a7328b 	ldhu	r2,-25398(gp)
     5f8:	1884703a 	and	r2,r3,r2
     5fc:	10bfffcc 	andi	r2,r2,65535
     600:	1000401e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     604:	d0273705 	stb	zero,-25380(gp)
     608:	00000f06 	br	648 <loop_keyboard+0x218>
		{
			usleep(5*1000);
     60c:	0104e204 	movi	r4,5000
     610:	0012c8c0 	call	12c8c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     614:	d0a7320b 	ldhu	r2,-25400(gp)
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1009883a 	mov	r4,r2
     620:	0001ee80 	call	1ee8 <UsbRead>
     624:	d0a7358d 	sth	r2,-25386(gp)
			if(usb_ctl_val & no_device) break;
     628:	d0e7358b 	ldhu	r3,-25386(gp)
     62c:	d0a7328b 	ldhu	r2,-25398(gp)
     630:	1884703a 	and	r2,r3,r2
     634:	10bfffcc 	andi	r2,r2,65535
     638:	1000081e 	bne	r2,zero,65c <loop_keyboard+0x22c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     63c:	d0a73703 	ldbu	r2,-25380(gp)
     640:	10800044 	addi	r2,r2,1
     644:	d0a73705 	stb	r2,-25380(gp)
     648:	d0a73703 	ldbu	r2,-25380(gp)
     64c:	10803fcc 	andi	r2,r2,255
     650:	108001f0 	cmpltui	r2,r2,7
     654:	103fed1e 	bne	r2,zero,60c <__alt_exception_stack_pointer+0xf800060c>
     658:	00000106 	br	660 <loop_keyboard+0x230>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     65c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     660:	d0e7358b 	ldhu	r3,-25386(gp)
     664:	d0a7328b 	ldhu	r2,-25398(gp)
     668:	1884703a 	and	r2,r3,r2
     66c:	10bfffcc 	andi	r2,r2,65535
     670:	1000241e 	bne	r2,zero,704 <loop_keyboard+0x2d4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     674:	01000074 	movhi	r4,1
     678:	2116e604 	addi	r4,r4,23448
     67c:	0007ad40 	call	7ad4 <puts>
			printf("[INFO]: please insert again!!! \n");
     680:	01000074 	movhi	r4,1
     684:	2116f104 	addi	r4,r4,23492
     688:	0007ad40 	call	7ad4 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     68c:	00001d06 	br	704 <loop_keyboard+0x2d4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a7320b 	ldhu	r2,-25400(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	0001ee80 	call	1ee8 <UsbRead>
     6a0:	d0a7358d 	sth	r2,-25386(gp)
		usleep(5*1000);
     6a4:	0104e204 	movi	r4,5000
     6a8:	0012c8c0 	call	12c8c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6ac:	d0a7320b 	ldhu	r2,-25400(gp)
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1009883a 	mov	r4,r2
     6b8:	0001ee80 	call	1ee8 <UsbRead>
     6bc:	d0a7358d 	sth	r2,-25386(gp)
		usleep(5*1000);
     6c0:	0104e204 	movi	r4,5000
     6c4:	0012c8c0 	call	12c8c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     6c8:	d0a7320b 	ldhu	r2,-25400(gp)
     6cc:	10bfffcc 	andi	r2,r2,65535
     6d0:	1009883a 	mov	r4,r2
     6d4:	0001ee80 	call	1ee8 <UsbRead>
     6d8:	d0a7358d 	sth	r2,-25386(gp)
		usleep(5*1000);
     6dc:	0104e204 	movi	r4,5000
     6e0:	0012c8c0 	call	12c8c <usleep>

		if(usb_ctl_val & no_device)
     6e4:	d0e7358b 	ldhu	r3,-25386(gp)
     6e8:	d0a7328b 	ldhu	r2,-25398(gp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	10000126 	beq	r2,zero,6fc <loop_keyboard+0x2cc>
			init_keyboard();
     6f8:	00007300 	call	730 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     6fc:	01003204 	movi	r4,200
     700:	0012c8c0 	call	12c8c <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     704:	d0e7358b 	ldhu	r3,-25386(gp)
     708:	d0a7328b 	ldhu	r2,-25398(gp)
     70c:	1884703a 	and	r2,r3,r2
     710:	10bfffcc 	andi	r2,r2,65535
     714:	103fde26 	beq	r2,zero,690 <__alt_exception_stack_pointer+0xf8000690>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <init_keyboard>:

void init_keyboard() {
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
	IO_init();
     740:	00002780 	call	278 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     744:	01000074 	movhi	r4,1
     748:	2116f904 	addi	r4,r4,23524
     74c:	0007ad40 	call	7ad4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     750:	0001f2c0 	call	1f2c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     754:	000b883a 	mov	r5,zero
     758:	01005104 	movi	r4,324
     75c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     760:	017fffd4 	movui	r5,65535
     764:	01302414 	movui	r4,49296
     768:	0001e900 	call	1e90 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     76c:	01409604 	movi	r5,600
     770:	01006d04 	movi	r4,436
     774:	0001e900 	call	1e90 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     778:	00811004 	movi	r2,1088
     77c:	d0a7358d 	sth	r2,-25386(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     780:	d0a7358b 	ldhu	r2,-25386(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	100b883a 	mov	r5,r2
     78c:	01005084 	movi	r4,322
     790:	0001e900 	call	1e90 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     794:	00808404 	movi	r2,528
     798:	d0a7368d 	sth	r2,-25382(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     79c:	d0a7368b 	ldhu	r2,-25382(gp)
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	100b883a 	mov	r5,r2
     7a8:	01302314 	movui	r4,49292
     7ac:	0001e900 	call	1e90 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     7b0:	000b883a 	mov	r5,zero
     7b4:	01007104 	movi	r4,452
     7b8:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     7bc:	000b883a 	mov	r5,zero
     7c0:	01007184 	movi	r4,454
     7c4:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     7c8:	000b883a 	mov	r5,zero
     7cc:	01007204 	movi	r4,456
     7d0:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     7d4:	000b883a 	mov	r5,zero
     7d8:	01007284 	movi	r4,458
     7dc:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     7e0:	000b883a 	mov	r5,zero
     7e4:	01007304 	movi	r4,460
     7e8:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     7ec:	000b883a 	mov	r5,zero
     7f0:	01007384 	movi	r4,462
     7f4:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     7f8:	000b883a 	mov	r5,zero
     7fc:	01007404 	movi	r4,464
     800:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     804:	000b883a 	mov	r5,zero
     808:	01007484 	movi	r4,466
     80c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     810:	000b883a 	mov	r5,zero
     814:	01007504 	movi	r4,468
     818:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     81c:	000b883a 	mov	r5,zero
     820:	01007584 	movi	r4,470
     824:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     828:	000b883a 	mov	r5,zero
     82c:	01007604 	movi	r4,472
     830:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     834:	000b883a 	mov	r5,zero
     838:	01007684 	movi	r4,474
     83c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     840:	000b883a 	mov	r5,zero
     844:	01007704 	movi	r4,476
     848:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     84c:	000b883a 	mov	r5,zero
     850:	01007784 	movi	r4,478
     854:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     858:	01401c84 	movi	r5,114
     85c:	01007084 	movi	r4,450
     860:	0001e900 	call	1e90 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     864:	01738054 	movui	r5,52737
     868:	01000044 	movi	r4,1
     86c:	00003280 	call	328 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     870:	0001883a 	nop
     874:	010000c4 	movi	r4,3
     878:	00003b00 	call	3b0 <IO_read>
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	103ffc26 	beq	r2,zero,874 <__alt_exception_stack_pointer+0xf8000874>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     884:	00000806 	br	8a8 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     888:	01000044 	movi	r4,1
     88c:	00003b00 	call	3b0 <IO_read>
     890:	10bfffcc 	andi	r2,r2,65535
     894:	100b883a 	mov	r5,r2
     898:	01000074 	movhi	r4,1
     89c:	2116ff04 	addi	r4,r4,23548
     8a0:	00079d80 	call	79d8 <printf>
		goto USB_HOT_PLUG;
     8a4:	003faa06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8a8:	01000044 	movi	r4,1
     8ac:	00003b00 	call	3b0 <IO_read>
     8b0:	10bfffcc 	andi	r2,r2,65535
     8b4:	1083fb58 	cmpnei	r2,r2,4077
     8b8:	103ff31e 	bne	r2,zero,888 <__alt_exception_stack_pointer+0xf8000888>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     8bc:	01000074 	movhi	r4,1
     8c0:	21170804 	addi	r4,r4,23584
     8c4:	00079d80 	call	79d8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8c8:	01401d04 	movi	r5,116
     8cc:	01007084 	movi	r4,450
     8d0:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     8d4:	01400f04 	movi	r5,60
     8d8:	01007104 	movi	r4,452
     8dc:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     8e0:	000b883a 	mov	r5,zero
     8e4:	01007184 	movi	r4,454
     8e8:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     8ec:	000b883a 	mov	r5,zero
     8f0:	01007204 	movi	r4,456
     8f4:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     8f8:	000b883a 	mov	r5,zero
     8fc:	01007284 	movi	r4,458
     900:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     904:	000b883a 	mov	r5,zero
     908:	01007304 	movi	r4,460
     90c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     910:	000b883a 	mov	r5,zero
     914:	01007384 	movi	r4,462
     918:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     91c:	000b883a 	mov	r5,zero
     920:	01007404 	movi	r4,464
     924:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     928:	000b883a 	mov	r5,zero
     92c:	01007484 	movi	r4,466
     930:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     934:	000b883a 	mov	r5,zero
     938:	01007504 	movi	r4,468
     93c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     940:	000b883a 	mov	r5,zero
     944:	01007584 	movi	r4,470
     948:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     94c:	000b883a 	mov	r5,zero
     950:	01007604 	movi	r4,472
     954:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     958:	000b883a 	mov	r5,zero
     95c:	01007684 	movi	r4,474
     960:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     964:	000b883a 	mov	r5,zero
     968:	01007704 	movi	r4,476
     96c:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     970:	000b883a 	mov	r5,zero
     974:	01007784 	movi	r4,478
     978:	0001e900 	call	1e90 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     97c:	01738054 	movui	r5,52737
     980:	01000044 	movi	r4,1
     984:	00003280 	call	328 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     988:	0001883a 	nop
     98c:	01000044 	movi	r4,1
     990:	00003b00 	call	3b0 <IO_read>
     994:	10bfffcc 	andi	r2,r2,65535
     998:	1083fb58 	cmpnei	r2,r2,4077
     99c:	10000826 	beq	r2,zero,9c0 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9a0:	01000044 	movi	r4,1
     9a4:	00003b00 	call	3b0 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	100b883a 	mov	r5,r2
     9b0:	01000074 	movhi	r4,1
     9b4:	2116ff04 	addi	r4,r4,23548
     9b8:	00079d80 	call	79d8 <printf>
		goto USB_HOT_PLUG;
     9bc:	003f6406 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     9c0:	00b02284 	movi	r2,-16246
     9c4:	d0a7320d 	sth	r2,-25400(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     9c8:	008c0004 	movi	r2,12288
     9cc:	d0a7328d 	sth	r2,-25398(gp)
	fs_device = A_DP_STAT;
     9d0:	00880004 	movi	r2,8192
     9d4:	d0a7330d 	sth	r2,-25396(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     9d8:	d0a7320b 	ldhu	r2,-25400(gp)
     9dc:	10bfffcc 	andi	r2,r2,65535
     9e0:	1009883a 	mov	r4,r2
     9e4:	0001ee80 	call	1ee8 <UsbRead>
     9e8:	d0a7358d 	sth	r2,-25386(gp)

	if (!(usb_ctl_val & no_device))
     9ec:	d0e7358b 	ldhu	r3,-25386(gp)
     9f0:	d0a7328b 	ldhu	r2,-25398(gp)
     9f4:	1884703a 	and	r2,r3,r2
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	1000361e 	bne	r2,zero,ad8 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a00:	d0273705 	stb	zero,-25380(gp)
     a04:	00000f06 	br	a44 <init_keyboard+0x314>
		{
			usleep(5*1000);
     a08:	0104e204 	movi	r4,5000
     a0c:	0012c8c0 	call	12c8c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     a10:	d0a7320b 	ldhu	r2,-25400(gp)
     a14:	10bfffcc 	andi	r2,r2,65535
     a18:	1009883a 	mov	r4,r2
     a1c:	0001ee80 	call	1ee8 <UsbRead>
     a20:	d0a7358d 	sth	r2,-25386(gp)
			if(usb_ctl_val & no_device) break;
     a24:	d0e7358b 	ldhu	r3,-25386(gp)
     a28:	d0a7328b 	ldhu	r2,-25398(gp)
     a2c:	1884703a 	and	r2,r3,r2
     a30:	10bfffcc 	andi	r2,r2,65535
     a34:	1000081e 	bne	r2,zero,a58 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a38:	d0a73703 	ldbu	r2,-25380(gp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	d0a73705 	stb	r2,-25380(gp)
     a44:	d0a73703 	ldbu	r2,-25380(gp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	10800170 	cmpltui	r2,r2,5
     a50:	103fed1e 	bne	r2,zero,a08 <__alt_exception_stack_pointer+0xf8000a08>
     a54:	00000106 	br	a5c <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     a58:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     a5c:	d0e7358b 	ldhu	r3,-25386(gp)
     a60:	d0a7328b 	ldhu	r2,-25398(gp)
     a64:	1884703a 	and	r2,r3,r2
     a68:	10bfffcc 	andi	r2,r2,65535
     a6c:	1000261e 	bne	r2,zero,b08 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     a70:	01000074 	movhi	r4,1
     a74:	21170c04 	addi	r4,r4,23600
     a78:	0007ad40 	call	7ad4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     a7c:	01000074 	movhi	r4,1
     a80:	21171604 	addi	r4,r4,23640
     a84:	0007ad40 	call	7ad4 <puts>
			while (!(usb_ctl_val & no_device))
     a88:	00000d06 	br	ac0 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     a8c:	d0a7320b 	ldhu	r2,-25400(gp)
     a90:	10bfffcc 	andi	r2,r2,65535
     a94:	1009883a 	mov	r4,r2
     a98:	0001ee80 	call	1ee8 <UsbRead>
     a9c:	d0a7358d 	sth	r2,-25386(gp)
				if(usb_ctl_val & no_device)
     aa0:	d0e7358b 	ldhu	r3,-25386(gp)
     aa4:	d0a7328b 	ldhu	r2,-25398(gp)
     aa8:	1884703a 	and	r2,r3,r2
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	10000126 	beq	r2,zero,ab8 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
     ab4:	003f2606 	br	750 <__alt_exception_stack_pointer+0xf8000750>

				usleep(2000);
     ab8:	0101f404 	movi	r4,2000
     abc:	0012c8c0 	call	12c8c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     ac0:	d0e7358b 	ldhu	r3,-25386(gp)
     ac4:	d0a7328b 	ldhu	r2,-25398(gp)
     ac8:	1884703a 	and	r2,r3,r2
     acc:	10bfffcc 	andi	r2,r2,65535
     ad0:	103fee26 	beq	r2,zero,a8c <__alt_exception_stack_pointer+0xf8000a8c>
     ad4:	00000c06 	br	b08 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     ad8:	d0e7358b 	ldhu	r3,-25386(gp)
     adc:	d0a7330b 	ldhu	r2,-25396(gp)
     ae0:	1884703a 	and	r2,r3,r2
     ae4:	10bfffcc 	andi	r2,r2,65535
     ae8:	10000426 	beq	r2,zero,afc <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     aec:	01000074 	movhi	r4,1
     af0:	21172204 	addi	r4,r4,23688
     af4:	0007ad40 	call	7ad4 <puts>
     af8:	00000306 	br	b08 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     afc:	01000074 	movhi	r4,1
     b00:	21172904 	addi	r4,r4,23716
     b04:	0007ad40 	call	7ad4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     b08:	0001fe00 	call	1fe0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	00000306 	br	b1c <init_keyboard+0x3ec>
	{
		UsbSetAddress();
     b10:	0001fe00 	call	1fe0 <UsbSetAddress>
		usleep(10*1000);
     b14:	0109c404 	movi	r4,10000
     b18:	0012c8c0 	call	12c8c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b1c:	010000c4 	movi	r4,3
     b20:	00003b00 	call	3b0 <IO_read>
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	1080040c 	andi	r2,r2,16
     b2c:	103ff826 	beq	r2,zero,b10 <__alt_exception_stack_pointer+0xf8000b10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b30:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     b34:	01414184 	movi	r5,1286
     b38:	01000084 	movi	r4,2
     b3c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b40:	0009883a 	mov	r4,zero
     b44:	00003b00 	call	3b0 <IO_read>
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100b883a 	mov	r5,r2
     b50:	01000074 	movhi	r4,1
     b54:	21173004 	addi	r4,r4,23744
     b58:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     b5c:	01414204 	movi	r5,1288
     b60:	01000084 	movi	r4,2
     b64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b68:	0009883a 	mov	r4,zero
     b6c:	00003b00 	call	3b0 <IO_read>
     b70:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     b74:	d0a7358b 	ldhu	r2,-25386(gp)
     b78:	10bfffcc 	andi	r2,r2,65535
     b7c:	100b883a 	mov	r5,r2
     b80:	01000074 	movhi	r4,1
     b84:	21173b04 	addi	r4,r4,23788
     b88:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     b8c:	0001883a 	nop
     b90:	d0a7358b 	ldhu	r2,-25386(gp)
     b94:	10bfffcc 	andi	r2,r2,65535
     b98:	108000d8 	cmpnei	r2,r2,3
     b9c:	10000326 	beq	r2,zero,bac <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ba0:	0002f040 	call	2f04 <UsbGetRetryCnt>
     ba4:	d0a7358d 	sth	r2,-25386(gp)

		goto USB_HOT_PLUG;
     ba8:	003ee906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     bac:	01000074 	movhi	r4,1
     bb0:	21174704 	addi	r4,r4,23836
     bb4:	0007ad40 	call	7ad4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     bb8:	00020e00 	call	20e0 <UsbGetDeviceDesc1>

	usleep(10*1000);
     bbc:	0109c404 	movi	r4,10000
     bc0:	0012c8c0 	call	12c8c <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc4:	00000306 	br	bd4 <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     bc8:	00020e00 	call	20e0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     bcc:	0109c404 	movi	r4,10000
     bd0:	0012c8c0 	call	12c8c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd4:	010000c4 	movi	r4,3
     bd8:	00003b00 	call	3b0 <IO_read>
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1080040c 	andi	r2,r2,16
     be4:	103ff826 	beq	r2,zero,bc8 <__alt_exception_stack_pointer+0xf8000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     be8:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bec:	01414184 	movi	r5,1286
     bf0:	01000084 	movi	r4,2
     bf4:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bf8:	0009883a 	mov	r4,zero
     bfc:	00003b00 	call	3b0 <IO_read>
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	21175604 	addi	r4,r4,23896
     c10:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
     c14:	01414204 	movi	r5,1288
     c18:	01000084 	movi	r4,2
     c1c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c20:	0009883a 	mov	r4,zero
     c24:	00003b00 	call	3b0 <IO_read>
     c28:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     c2c:	d0a7358b 	ldhu	r2,-25386(gp)
     c30:	10bfffcc 	andi	r2,r2,65535
     c34:	100b883a 	mov	r5,r2
     c38:	01000074 	movhi	r4,1
     c3c:	21176104 	addi	r4,r4,23940
     c40:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
     c44:	0001883a 	nop
     c48:	d0a7358b 	ldhu	r2,-25386(gp)
     c4c:	10bfffcc 	andi	r2,r2,65535
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	10000626 	beq	r2,zero,c70 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c58:	0002f040 	call	2f04 <UsbGetRetryCnt>
     c5c:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     c60:	01000074 	movhi	r4,1
     c64:	21176d04 	addi	r4,r4,23988
     c68:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
     c6c:	003eb806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	21177604 	addi	r4,r4,24024
     c78:	0007ad40 	call	7ad4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     c7c:	00022280 	call	2228 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00000306 	br	c90 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     c84:	00022280 	call	2228 <UsbGetDeviceDesc2>
		usleep(10*1000);
     c88:	0109c404 	movi	r4,10000
     c8c:	0012c8c0 	call	12c8c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c90:	010000c4 	movi	r4,3
     c94:	00003b00 	call	3b0 <IO_read>
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	1080040c 	andi	r2,r2,16
     ca0:	103ff826 	beq	r2,zero,c84 <__alt_exception_stack_pointer+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ca4:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ca8:	01414184 	movi	r5,1286
     cac:	01000084 	movi	r4,2
     cb0:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cb4:	0009883a 	mov	r4,zero
     cb8:	00003b00 	call	3b0 <IO_read>
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	100b883a 	mov	r5,r2
     cc4:	01000074 	movhi	r4,1
     cc8:	21175604 	addi	r4,r4,23896
     ccc:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
     cd0:	01414204 	movi	r5,1288
     cd4:	01000084 	movi	r4,2
     cd8:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cdc:	0009883a 	mov	r4,zero
     ce0:	00003b00 	call	3b0 <IO_read>
     ce4:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     ce8:	d0a7358b 	ldhu	r2,-25386(gp)
     cec:	10bfffcc 	andi	r2,r2,65535
     cf0:	100b883a 	mov	r5,r2
     cf4:	01000074 	movhi	r4,1
     cf8:	21176104 	addi	r4,r4,23940
     cfc:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
     d00:	0001883a 	nop
     d04:	d0a7358b 	ldhu	r2,-25386(gp)
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	108000d8 	cmpnei	r2,r2,3
     d10:	10000626 	beq	r2,zero,d2c <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	0002f040 	call	2f04 <UsbGetRetryCnt>
     d18:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	21176d04 	addi	r4,r4,23988
     d24:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
     d28:	003e8906 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	21178a04 	addi	r4,r4,24104
     d34:	0007ad40 	call	7ad4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     d38:	00024000 	call	2400 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     d40:	00024000 	call	2400 <UsbGetConfigDesc1>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	0012c8c0 	call	12c8c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b00 	call	3b0 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_exception_stack_pointer+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b00 	call	3b0 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	21179c04 	addi	r4,r4,24176
     d88:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b00 	call	3b0 <IO_read>
     da0:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     da4:	d0a7358b 	ldhu	r2,-25386(gp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	2117a704 	addi	r4,r4,24220
     db8:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
     dbc:	0001883a 	nop
     dc0:	d0a7358b 	ldhu	r2,-25386(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	108000d8 	cmpnei	r2,r2,3
     dcc:	10000626 	beq	r2,zero,de8 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dd0:	0002f040 	call	2f04 <UsbGetRetryCnt>
     dd4:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	21176d04 	addi	r4,r4,23988
     de0:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
     de4:	003e5a06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     de8:	01000074 	movhi	r4,1
     dec:	2117b304 	addi	r4,r4,24268
     df0:	0007ad40 	call	7ad4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     df4:	00025900 	call	2590 <UsbGetConfigDesc2>

	usleep(100*1000);
     df8:	010000b4 	movhi	r4,2
     dfc:	2121a804 	addi	r4,r4,-31072
     e00:	0012c8c0 	call	12c8c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e04:	00000306 	br	e14 <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     e08:	00025900 	call	2590 <UsbGetConfigDesc2>
		usleep(10*1000);
     e0c:	0109c404 	movi	r4,10000
     e10:	0012c8c0 	call	12c8c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e14:	010000c4 	movi	r4,3
     e18:	00003b00 	call	3b0 <IO_read>
     e1c:	10bfffcc 	andi	r2,r2,65535
     e20:	1080040c 	andi	r2,r2,16
     e24:	103ff826 	beq	r2,zero,e08 <__alt_exception_stack_pointer+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e28:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e2c:	01414184 	movi	r5,1286
     e30:	01000084 	movi	r4,2
     e34:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e38:	0009883a 	mov	r4,zero
     e3c:	00003b00 	call	3b0 <IO_read>
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	100b883a 	mov	r5,r2
     e48:	01000074 	movhi	r4,1
     e4c:	2117c604 	addi	r4,r4,24344
     e50:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
     e54:	01414204 	movi	r5,1288
     e58:	01000084 	movi	r4,2
     e5c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e60:	0009883a 	mov	r4,zero
     e64:	00003b00 	call	3b0 <IO_read>
     e68:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     e6c:	d0a7358b 	ldhu	r2,-25386(gp)
     e70:	10bfffcc 	andi	r2,r2,65535
     e74:	100b883a 	mov	r5,r2
     e78:	01000074 	movhi	r4,1
     e7c:	2117d104 	addi	r4,r4,24388
     e80:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
     e84:	0001883a 	nop
     e88:	d0a7358b 	ldhu	r2,-25386(gp)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	108000d8 	cmpnei	r2,r2,3
     e94:	10000626 	beq	r2,zero,eb0 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e98:	0002f040 	call	2f04 <UsbGetRetryCnt>
     e9c:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	21176d04 	addi	r4,r4,23988
     ea8:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
     eac:	003e2806 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	2117dd04 	addi	r4,r4,24436
     eb8:	0007ad40 	call	7ad4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ebc:	01415b04 	movi	r5,1388
     ec0:	01000084 	movi	r4,2
     ec4:	00003280 	call	328 <IO_write>
	code = IO_read(HPI_DATA);
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003b00 	call	3b0 <IO_read>
     ed0:	d0a7378d 	sth	r2,-25378(gp)
	code = code & 0x003;
     ed4:	d0a7378b 	ldhu	r2,-25378(gp)
     ed8:	108000cc 	andi	r2,r2,3
     edc:	d0a7378d 	sth	r2,-25378(gp)
	printf("\ncode = %x\n", code);
     ee0:	d0a7378b 	ldhu	r2,-25378(gp)
     ee4:	10bfffcc 	andi	r2,r2,65535
     ee8:	100b883a 	mov	r5,r2
     eec:	01000074 	movhi	r4,1
     ef0:	2117f004 	addi	r4,r4,24512
     ef4:	00079d80 	call	79d8 <printf>

	if (code == 0x01)
     ef8:	d0a7378b 	ldhu	r2,-25378(gp)
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000041e 	bne	r2,zero,f18 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     f08:	01000074 	movhi	r4,1
     f0c:	2117f304 	addi	r4,r4,24524
     f10:	0007ad40 	call	7ad4 <puts>
     f14:	00000306 	br	f24 <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     f18:	01000074 	movhi	r4,1
     f1c:	21180204 	addi	r4,r4,24584
     f20:	0007ad40 	call	7ad4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     f24:	01415d84 	movi	r5,1398
     f28:	01000084 	movi	r4,2
     f2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x073F);
     f30:	0141cfc4 	movi	r5,1855
     f34:	0009883a 	mov	r4,zero
     f38:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x8105);
     f3c:	01604154 	movui	r5,33029
     f40:	0009883a 	mov	r4,zero
     f44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);
     f48:	014000c4 	movi	r5,3
     f4c:	0009883a 	mov	r4,zero
     f50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
     f54:	01400204 	movi	r5,8
     f58:	0009883a 	mov	r4,zero
     f5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     f60:	016b0294 	movui	r5,44042
     f64:	0009883a 	mov	r4,zero
     f68:	00003280 	call	328 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     f6c:	01415d84 	movi	r5,1398
     f70:	01006c04 	movi	r4,432
     f74:	0001e900 	call	1e90 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     f78:	01415f04 	movi	r5,1404
     f7c:	01000084 	movi	r4,2
     f80:	00003280 	call	328 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     f84:	0009883a 	mov	r4,zero
     f88:	00003b00 	call	3b0 <IO_read>
     f8c:	d0a73605 	stb	r2,-25384(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     f90:	d0a73603 	ldbu	r2,-25384(gp)
     f94:	10803fcc 	andi	r2,r2,255
     f98:	100b883a 	mov	r5,r2
     f9c:	01000074 	movhi	r4,1
     fa0:	21180b04 	addi	r4,r4,24620
     fa4:	00079d80 	call	79d8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     fa8:	00027f80 	call	27f8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fac:	00000306 	br	fbc <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     fb0:	00027f80 	call	27f8 <UsbSetConfig>
		usleep(10*1000);
     fb4:	0109c404 	movi	r4,10000
     fb8:	0012c8c0 	call	12c8c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fbc:	010000c4 	movi	r4,3
     fc0:	00003b00 	call	3b0 <IO_read>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	1080040c 	andi	r2,r2,16
     fcc:	103ff826 	beq	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     fd0:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     fd4:	01414184 	movi	r5,1286
     fd8:	01000084 	movi	r4,2
     fdc:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe0:	0009883a 	mov	r4,zero
     fe4:	00003b00 	call	3b0 <IO_read>
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	100b883a 	mov	r5,r2
     ff0:	01000074 	movhi	r4,1
     ff4:	21181504 	addi	r4,r4,24660
     ff8:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
     ffc:	01414204 	movi	r5,1288
    1000:	01000084 	movi	r4,2
    1004:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1008:	0009883a 	mov	r4,zero
    100c:	00003b00 	call	3b0 <IO_read>
    1010:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1014:	d0a7358b 	ldhu	r2,-25386(gp)
    1018:	10bfffcc 	andi	r2,r2,65535
    101c:	100b883a 	mov	r5,r2
    1020:	01000074 	movhi	r4,1
    1024:	21182004 	addi	r4,r4,24704
    1028:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
    102c:	0001883a 	nop
    1030:	d0a7358b 	ldhu	r2,-25386(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	108000d8 	cmpnei	r2,r2,3
    103c:	10000626 	beq	r2,zero,1058 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1040:	0002f040 	call	2f04 <UsbGetRetryCnt>
    1044:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1048:	01000074 	movhi	r4,1
    104c:	21176d04 	addi	r4,r4,23988
    1050:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
    1054:	003dbe06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1058:	01000074 	movhi	r4,1
    105c:	21182c04 	addi	r4,r4,24752
    1060:	0007ad40 	call	7ad4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    1064:	00028f80 	call	28f8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1068:	00000306 	br	1078 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    106c:	00028f80 	call	28f8 <UsbClassRequest>
		usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	0012c8c0 	call	12c8c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b00 	call	3b0 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103ff826 	beq	r2,zero,106c <__alt_exception_stack_pointer+0xf800106c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    108c:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1090:	01414184 	movi	r5,1286
    1094:	01000084 	movi	r4,2
    1098:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    109c:	0009883a 	mov	r4,zero
    10a0:	00003b00 	call	3b0 <IO_read>
    10a4:	10bfffcc 	andi	r2,r2,65535
    10a8:	100b883a 	mov	r5,r2
    10ac:	01000074 	movhi	r4,1
    10b0:	21183e04 	addi	r4,r4,24824
    10b4:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
    10b8:	01414204 	movi	r5,1288
    10bc:	01000084 	movi	r4,2
    10c0:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    10c4:	0009883a 	mov	r4,zero
    10c8:	00003b00 	call	3b0 <IO_read>
    10cc:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    10d0:	d0a7358b 	ldhu	r2,-25386(gp)
    10d4:	10bfffcc 	andi	r2,r2,65535
    10d8:	100b883a 	mov	r5,r2
    10dc:	01000074 	movhi	r4,1
    10e0:	21184904 	addi	r4,r4,24868
    10e4:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
    10e8:	0001883a 	nop
    10ec:	d0a7358b 	ldhu	r2,-25386(gp)
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	108000d8 	cmpnei	r2,r2,3
    10f8:	10000626 	beq	r2,zero,1114 <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    10fc:	0002f040 	call	2f04 <UsbGetRetryCnt>
    1100:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1104:	01000074 	movhi	r4,1
    1108:	21176d04 	addi	r4,r4,23988
    110c:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
    1110:	003d8f06 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1114:	01000074 	movhi	r4,1
    1118:	21185504 	addi	r4,r4,24916
    111c:	0007ad40 	call	7ad4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    1120:	00029f80 	call	29f8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1124:	00000306 	br	1134 <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    1128:	00029f80 	call	29f8 <UsbGetHidDesc>
		usleep(10*1000);
    112c:	0109c404 	movi	r4,10000
    1130:	0012c8c0 	call	12c8c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1134:	010000c4 	movi	r4,3
    1138:	00003b00 	call	3b0 <IO_read>
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	1080040c 	andi	r2,r2,16
    1144:	103ff826 	beq	r2,zero,1128 <__alt_exception_stack_pointer+0xf8001128>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1148:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    114c:	01414184 	movi	r5,1286
    1150:	01000084 	movi	r4,2
    1154:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1158:	0009883a 	mov	r4,zero
    115c:	00003b00 	call	3b0 <IO_read>
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	100b883a 	mov	r5,r2
    1168:	01000074 	movhi	r4,1
    116c:	21183e04 	addi	r4,r4,24824
    1170:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
    1174:	01414204 	movi	r5,1288
    1178:	01000084 	movi	r4,2
    117c:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1180:	0009883a 	mov	r4,zero
    1184:	00003b00 	call	3b0 <IO_read>
    1188:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    118c:	d0a7358b 	ldhu	r2,-25386(gp)
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	100b883a 	mov	r5,r2
    1198:	01000074 	movhi	r4,1
    119c:	21184904 	addi	r4,r4,24868
    11a0:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
    11a4:	0001883a 	nop
    11a8:	d0a7358b 	ldhu	r2,-25386(gp)
    11ac:	10bfffcc 	andi	r2,r2,65535
    11b0:	108000d8 	cmpnei	r2,r2,3
    11b4:	10000626 	beq	r2,zero,11d0 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    11b8:	0002f040 	call	2f04 <UsbGetRetryCnt>
    11bc:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    11c0:	01000074 	movhi	r4,1
    11c4:	21176d04 	addi	r4,r4,23988
    11c8:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
    11cc:	003d6006 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    11d0:	01000074 	movhi	r4,1
    11d4:	21186704 	addi	r4,r4,24988
    11d8:	0007ad40 	call	7ad4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    11dc:	0002b400 	call	2b40 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e0:	00000106 	br	11e8 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    11e4:	0002b400 	call	2b40 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    11e8:	010000c4 	movi	r4,3
    11ec:	00003b00 	call	3b0 <IO_read>
    11f0:	10bfffcc 	andi	r2,r2,65535
    11f4:	1080040c 	andi	r2,r2,16
    11f8:	103ffa26 	beq	r2,zero,11e4 <__alt_exception_stack_pointer+0xf80011e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    11fc:	0002e800 	call	2e80 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1200:	01414184 	movi	r5,1286
    1204:	01000084 	movi	r4,2
    1208:	00003280 	call	328 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    120c:	0009883a 	mov	r4,zero
    1210:	00003b00 	call	3b0 <IO_read>
    1214:	10bfffcc 	andi	r2,r2,65535
    1218:	100b883a 	mov	r5,r2
    121c:	01000074 	movhi	r4,1
    1220:	21187b04 	addi	r4,r4,25068
    1224:	00079d80 	call	79d8 <printf>

	IO_write(HPI_ADDR,0x0508);
    1228:	01414204 	movi	r5,1288
    122c:	01000084 	movi	r4,2
    1230:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1234:	0009883a 	mov	r4,zero
    1238:	00003b00 	call	3b0 <IO_read>
    123c:	d0a7358d 	sth	r2,-25386(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1240:	d0a7358b 	ldhu	r2,-25386(gp)
    1244:	10bfffcc 	andi	r2,r2,65535
    1248:	100b883a 	mov	r5,r2
    124c:	01000074 	movhi	r4,1
    1250:	21188704 	addi	r4,r4,25116
    1254:	00079d80 	call	79d8 <printf>
	while (usb_ctl_val != 0x03)
    1258:	0001883a 	nop
    125c:	d0a7358b 	ldhu	r2,-25386(gp)
    1260:	10bfffcc 	andi	r2,r2,65535
    1264:	108000d8 	cmpnei	r2,r2,3
    1268:	10000626 	beq	r2,zero,1284 <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    126c:	0002f040 	call	2f04 <UsbGetRetryCnt>
    1270:	d0a7358d 	sth	r2,-25386(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1274:	01000074 	movhi	r4,1
    1278:	21176d04 	addi	r4,r4,23988
    127c:	0007ad40 	call	7ad4 <puts>
		goto USB_HOT_PLUG;
    1280:	003d3306 	br	750 <__alt_exception_stack_pointer+0xf8000750>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1284:	01000074 	movhi	r4,1
    1288:	21189304 	addi	r4,r4,25164
    128c:	0007ad40 	call	7ad4 <puts>


}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
    12a8:	defff904 	addi	sp,sp,-28
    12ac:	dfc00615 	stw	ra,24(sp)
    12b0:	df000515 	stw	fp,20(sp)
    12b4:	df000504 	addi	fp,sp,20
    12b8:	e13ffc15 	stw	r4,-16(fp)
    12bc:	e17ffd15 	stw	r5,-12(fp)
    12c0:	e1bffe15 	stw	r6,-8(fp)
    12c4:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
    12c8:	e0bffc17 	ldw	r2,-16(fp)
    12cc:	10000a26 	beq	r2,zero,12f8 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    12d0:	e0bffc17 	ldw	r2,-16(fp)
    12d4:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
    12d8:	e0c00217 	ldw	r3,8(fp)
    12dc:	d8c00015 	stw	r3,0(sp)
    12e0:	e1ffff17 	ldw	r7,-4(fp)
    12e4:	e1bffe17 	ldw	r6,-8(fp)
    12e8:	e17ffd17 	ldw	r5,-12(fp)
    12ec:	e13ffc17 	ldw	r4,-16(fp)
    12f0:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    12f4:	00000106 	br	12fc <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
    12f8:	00bffb44 	movi	r2,-19
}
    12fc:	e037883a 	mov	sp,fp
    1300:	dfc00117 	ldw	ra,4(sp)
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00204 	addi	sp,sp,8
    130c:	f800283a 	ret

00001310 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
    1310:	defff904 	addi	sp,sp,-28
    1314:	dfc00615 	stw	ra,24(sp)
    1318:	df000515 	stw	fp,20(sp)
    131c:	df000504 	addi	fp,sp,20
    1320:	e13ffc15 	stw	r4,-16(fp)
    1324:	e17ffd15 	stw	r5,-12(fp)
    1328:	e1bffe15 	stw	r6,-8(fp)
    132c:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	10000a26 	beq	r2,zero,1360 <alt_dma_rxchan_prepare+0x50>
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	10800417 	ldw	r2,16(r2)
    1340:	e0c00217 	ldw	r3,8(fp)
    1344:	d8c00015 	stw	r3,0(sp)
    1348:	e1ffff17 	ldw	r7,-4(fp)
    134c:	e1bffe17 	ldw	r6,-8(fp)
    1350:	e17ffd17 	ldw	r5,-12(fp)
    1354:	e13ffc17 	ldw	r4,-16(fp)
    1358:	103ee83a 	callr	r2
    135c:	00000106 	br	1364 <alt_dma_rxchan_prepare+0x54>
    1360:	00bffb44 	movi	r2,-19
}
    1364:	e037883a 	mov	sp,fp
    1368:	dfc00117 	ldw	ra,4(sp)
    136c:	df000017 	ldw	fp,0(sp)
    1370:	dec00204 	addi	sp,sp,8
    1374:	f800283a 	ret

00001378 <done>:
#include "math.h"

int offset = 0;
static volatile int copy_done = 0;

static void done(void* handle, void* data) {
    1378:	defffd04 	addi	sp,sp,-12
    137c:	df000215 	stw	fp,8(sp)
    1380:	df000204 	addi	fp,sp,8
    1384:	e13ffe15 	stw	r4,-8(fp)
    1388:	e17fff15 	stw	r5,-4(fp)
	copy_done = 255;
    138c:	00803fc4 	movi	r2,255
    1390:	d0a73915 	stw	r2,-25372(gp)
}
    1394:	0001883a 	nop
    1398:	e037883a 	mov	sp,fp
    139c:	df000017 	ldw	fp,0(sp)
    13a0:	dec00104 	addi	sp,sp,4
    13a4:	f800283a 	ret

000013a8 <transfer>:

char transfer(volatile void* from, volatile void* to, alt_u32 size) {
    13a8:	defff504 	addi	sp,sp,-44
    13ac:	dfc00a15 	stw	ra,40(sp)
    13b0:	df000915 	stw	fp,36(sp)
    13b4:	df000904 	addi	fp,sp,36
    13b8:	e13ffd15 	stw	r4,-12(fp)
    13bc:	e17ffe15 	stw	r5,-8(fp)
    13c0:	e1bfff15 	stw	r6,-4(fp)
	copy_done = 0;
    13c4:	d0273915 	stw	zero,-25372(gp)
	int rc;
	alt_dma_txchan txchan;
	alt_dma_rxchan rxchan;
	void* tx_data = (void*) from; /* pointer to data to send */
    13c8:	e0bffd17 	ldw	r2,-12(fp)
    13cc:	e0bff815 	stw	r2,-32(fp)
	void* rx_buffer = (void*) to; /* pointer to rx buffer */
    13d0:	e0bffe17 	ldw	r2,-8(fp)
    13d4:	e0bff915 	stw	r2,-28(fp)
	/* Create the transmit channel */
	if ((txchan = alt_dma_txchan_open("/dev/copy_dma")) == NULL) {
    13d8:	01000074 	movhi	r4,1
    13dc:	2118a704 	addi	r4,r4,25244
    13e0:	00123dc0 	call	123dc <alt_dma_txchan_open>
    13e4:	e0bffa15 	stw	r2,-24(fp)
    13e8:	e0bffa17 	ldw	r2,-24(fp)
    13ec:	1000051e 	bne	r2,zero,1404 <transfer+0x5c>
		printf("Failed to create transmit channel");
    13f0:	01000074 	movhi	r4,1
    13f4:	2118ab04 	addi	r4,r4,25260
    13f8:	00079d80 	call	79d8 <printf>
		return 255;
    13fc:	00bfffc4 	movi	r2,-1
    1400:	00002e06 	br	14bc <transfer+0x114>
	}
	/* Create the receive channel */
	if ((rxchan = alt_dma_rxchan_open("/dev/copy_dma")) == NULL) {
    1404:	01000074 	movhi	r4,1
    1408:	2118a704 	addi	r4,r4,25244
    140c:	001234c0 	call	1234c <alt_dma_rxchan_open>
    1410:	e0bffb15 	stw	r2,-20(fp)
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	1000051e 	bne	r2,zero,1430 <transfer+0x88>
		printf("Failed to create receive channel");
    141c:	01000074 	movhi	r4,1
    1420:	2118b404 	addi	r4,r4,25296
    1424:	00079d80 	call	79d8 <printf>
		return 225;
    1428:	00bff844 	movi	r2,-31
    142c:	00002306 	br	14bc <transfer+0x114>
	}
	/* Post the transmit request */
	if ((rc = alt_dma_txchan_send(txchan, tx_data, size, NULL, NULL)) < 0) {
    1430:	d8000015 	stw	zero,0(sp)
    1434:	000f883a 	mov	r7,zero
    1438:	e1bfff17 	ldw	r6,-4(fp)
    143c:	e17ff817 	ldw	r5,-32(fp)
    1440:	e13ffa17 	ldw	r4,-24(fp)
    1444:	00012a80 	call	12a8 <alt_dma_txchan_send>
    1448:	e0bffc15 	stw	r2,-16(fp)
    144c:	e0bffc17 	ldw	r2,-16(fp)
    1450:	1000060e 	bge	r2,zero,146c <transfer+0xc4>
		printf("Failed to post transmit request, reason = %i\n", rc);
    1454:	e17ffc17 	ldw	r5,-16(fp)
    1458:	01000074 	movhi	r4,1
    145c:	2118bd04 	addi	r4,r4,25332
    1460:	00079d80 	call	79d8 <printf>
		return 225;
    1464:	00bff844 	movi	r2,-31
    1468:	00001406 	br	14bc <transfer+0x114>
	}
	/* Post the receive request */
	if ((rc = alt_dma_rxchan_prepare(rxchan, rx_buffer, size, done, NULL))
    146c:	d8000015 	stw	zero,0(sp)
    1470:	01c00034 	movhi	r7,0
    1474:	39c4de04 	addi	r7,r7,4984
    1478:	e1bfff17 	ldw	r6,-4(fp)
    147c:	e17ff917 	ldw	r5,-28(fp)
    1480:	e13ffb17 	ldw	r4,-20(fp)
    1484:	00013100 	call	1310 <alt_dma_rxchan_prepare>
    1488:	e0bffc15 	stw	r2,-16(fp)
    148c:	e0bffc17 	ldw	r2,-16(fp)
    1490:	1000060e 	bge	r2,zero,14ac <transfer+0x104>
			< 0) {
		printf("Failed to post read request, reason = %i\n", rc);
    1494:	e17ffc17 	ldw	r5,-16(fp)
    1498:	01000074 	movhi	r4,1
    149c:	2118c904 	addi	r4,r4,25380
    14a0:	00079d80 	call	79d8 <printf>
		return 225;
    14a4:	00bff844 	movi	r2,-31
    14a8:	00000406 	br	14bc <transfer+0x114>
	}
	/* wait for transfer to complete */
	while (!copy_done);
    14ac:	0001883a 	nop
    14b0:	d0a73917 	ldw	r2,-25372(gp)
    14b4:	103ffe26 	beq	r2,zero,14b0 <__alt_exception_stack_pointer+0xf80014b0>
	return 0;
    14b8:	0005883a 	mov	r2,zero
}
    14bc:	e037883a 	mov	sp,fp
    14c0:	dfc00117 	ldw	ra,4(sp)
    14c4:	df000017 	ldw	fp,0(sp)
    14c8:	dec00204 	addi	sp,sp,8
    14cc:	f800283a 	ret

000014d0 <draw_cube>:

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
    14d0:	defff904 	addi	sp,sp,-28
    14d4:	dfc00615 	stw	ra,24(sp)
    14d8:	df000515 	stw	fp,20(sp)
    14dc:	df000504 	addi	fp,sp,20
    14e0:	e13ffc15 	stw	r4,-16(fp)
    14e4:	e17ffd15 	stw	r5,-12(fp)
    14e8:	e1bffe15 	stw	r6,-8(fp)
    14ec:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
    14f0:	e0bffc17 	ldw	r2,-16(fp)
    14f4:	00c00044 	movi	r3,1
    14f8:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
    14fc:	e0bffc17 	ldw	r2,-16(fp)
    1500:	e0c00317 	ldw	r3,12(fp)
    1504:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
    1508:	e0bffd17 	ldw	r2,-12(fp)
    150c:	1006923a 	slli	r3,r2,8
    1510:	e0bffc17 	ldw	r2,-16(fp)
    1514:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (FP_SCALE);
    1518:	e0bffe17 	ldw	r2,-8(fp)
    151c:	1006923a 	slli	r3,r2,8
    1520:	e0bffc17 	ldw	r2,-16(fp)
    1524:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (FP_SCALE);
    1528:	e0bfff17 	ldw	r2,-4(fp)
    152c:	1006923a 	slli	r3,r2,8
    1530:	e0bffc17 	ldw	r2,-16(fp)
    1534:	10c00615 	stw	r3,24(r2)
	gpu->z = (z - offset) * (FP_SCALE);
    1538:	d0a73817 	ldw	r2,-25376(gp)
    153c:	e0c00217 	ldw	r3,8(fp)
    1540:	1885c83a 	sub	r2,r3,r2
    1544:	1006923a 	slli	r3,r2,8
    1548:	e0bffc17 	ldw	r2,-16(fp)
    154c:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
    1550:	e0bffc17 	ldw	r2,-16(fp)
    1554:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1558:	e0bffc17 	ldw	r2,-16(fp)
    155c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1560:	e0bffc17 	ldw	r2,-16(fp)
    1564:	00c00044 	movi	r3,1
    1568:	10c00115 	stw	r3,4(r2)
	time_t start = clock();
    156c:	00071280 	call	7128 <clock>
    1570:	e0bffb15 	stw	r2,-20(fp)
	while (gpu->done == 0) {
    1574:	0001883a 	nop
    1578:	e0bffc17 	ldw	r2,-16(fp)
    157c:	10800217 	ldw	r2,8(r2)
    1580:	103ffd26 	beq	r2,zero,1578 <__alt_exception_stack_pointer+0xf8001578>
	}
//	time_t delta = clock() - start;
//	if (delta > 100) {
//		printf("Render ticks %d\n", delta);
//	}
	gpu->done = 0;
    1584:	e0bffc17 	ldw	r2,-16(fp)
    1588:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
    158c:	e0bffc17 	ldw	r2,-16(fp)
    1590:	10000815 	stw	zero,32(r2)

}
    1594:	0001883a 	nop
    1598:	e037883a 	mov	sp,fp
    159c:	dfc00117 	ldw	ra,4(sp)
    15a0:	df000017 	ldw	fp,0(sp)
    15a4:	dec00204 	addi	sp,sp,8
    15a8:	f800283a 	ret

000015ac <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
    15ac:	defffd04 	addi	sp,sp,-12
    15b0:	df000215 	stw	fp,8(sp)
    15b4:	df000204 	addi	fp,sp,8
    15b8:	e13ffe15 	stw	r4,-8(fp)
    15bc:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
    15c0:	e0bffe17 	ldw	r2,-8(fp)
    15c4:	00c00084 	movi	r3,2
    15c8:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    15dc:	e0bffe17 	ldw	r2,-8(fp)
    15e0:	00c00044 	movi	r3,1
    15e4:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
    15e8:	e0bfff17 	ldw	r2,-4(fp)
    15ec:	10800058 	cmpnei	r2,r2,1
    15f0:	1000041e 	bne	r2,zero,1604 <clear_screen+0x58>
		while (gpu->done == 0) {
    15f4:	0001883a 	nop
    15f8:	e0bffe17 	ldw	r2,-8(fp)
    15fc:	10800217 	ldw	r2,8(r2)
    1600:	103ffd26 	beq	r2,zero,15f8 <__alt_exception_stack_pointer+0xf80015f8>
		}
	}
	gpu->mode = GPU_MODE_IDLE;
    1604:	e0bffe17 	ldw	r2,-8(fp)
    1608:	10000815 	stw	zero,32(r2)
}
    160c:	0001883a 	nop
    1610:	e037883a 	mov	sp,fp
    1614:	df000017 	ldw	fp,0(sp)
    1618:	dec00104 	addi	sp,sp,4
    161c:	f800283a 	ret

00001620 <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
    1620:	defffd04 	addi	sp,sp,-12
    1624:	df000215 	stw	fp,8(sp)
    1628:	df000204 	addi	fp,sp,8
    162c:	e13ffe15 	stw	r4,-8(fp)
    1630:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
    1634:	e0bffe17 	ldw	r2,-8(fp)
    1638:	00c000c4 	movi	r3,3
    163c:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
    1648:	e0bffe17 	ldw	r2,-8(fp)
    164c:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
    1650:	e0bffe17 	ldw	r2,-8(fp)
    1654:	00c00044 	movi	r3,1
    1658:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	10800058 	cmpnei	r2,r2,1
    1664:	1000041e 	bne	r2,zero,1678 <clear_depth+0x58>
		while (gpu->done == 0) {
    1668:	0001883a 	nop
    166c:	e0bffe17 	ldw	r2,-8(fp)
    1670:	10800217 	ldw	r2,8(r2)
    1674:	103ffd26 	beq	r2,zero,166c <__alt_exception_stack_pointer+0xf800166c>
		}
	}
	gpu->mode = GPU_MODE_IDLE;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10000815 	stw	zero,32(r2)
}
    1680:	0001883a 	nop
    1684:	e037883a 	mov	sp,fp
    1688:	df000017 	ldw	fp,0(sp)
    168c:	dec00104 	addi	sp,sp,4
    1690:	f800283a 	ret

00001694 <main>:
//	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
//	vga_cont->frame_pointer = gpu->frame_pointer;
//	gpu->frame_pointer = temp;
//}

int main() {
    1694:	deffe504 	addi	sp,sp,-108
    1698:	dfc01a15 	stw	ra,104(sp)
    169c:	df001915 	stw	fp,100(sp)
    16a0:	dc001815 	stw	r16,96(sp)
    16a4:	df001904 	addi	fp,sp,100

	printf("Starting up");
    16a8:	01000074 	movhi	r4,1
    16ac:	2118d404 	addi	r4,r4,25424
    16b0:	00079d80 	call	79d8 <printf>

	union frame_buffer_t* frame1 = (frame_buffer_t*) COPY_DMA_WRITE_MASTER_FRAME_BUFFER_BASE;
    16b4:	00820034 	movhi	r2,2048
    16b8:	e0bff315 	stw	r2,-52(fp)
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    16bc:	01000174 	movhi	r4,5
    16c0:	212c0004 	addi	r4,r4,-20480
    16c4:	00071740 	call	7174 <malloc>
    16c8:	e0bff415 	stw	r2,-48(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    16cc:	01000174 	movhi	r4,5
    16d0:	212c0004 	addi	r4,r4,-20480
    16d4:	00071740 	call	7174 <malloc>
    16d8:	e0bff515 	stw	r2,-44(fp)

	dma->back_buffer = frame1;
    16dc:	d0a00117 	ldw	r2,-32764(gp)
    16e0:	e0fff317 	ldw	r3,-52(fp)
    16e4:	10c00115 	stw	r3,4(r2)
	dma->front_buffer = 0; //swap
    16e8:	d0a00117 	ldw	r2,-32764(gp)
    16ec:	10000015 	stw	zero,0(r2)

	gpu->frame_pointer = frame2;
    16f0:	d0a00017 	ldw	r2,-32768(gp)
    16f4:	e0fff417 	ldw	r3,-48(fp)
    16f8:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    16fc:	d0a00017 	ldw	r2,-32768(gp)
    1700:	e0fff517 	ldw	r3,-44(fp)
    1704:	10c00315 	stw	r3,12(r2)


	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    1708:	e1fff517 	ldw	r7,-44(fp)
    170c:	e1bff417 	ldw	r6,-48(fp)
    1710:	e17ff317 	ldw	r5,-52(fp)
    1714:	01000074 	movhi	r4,1
    1718:	2118d704 	addi	r4,r4,25436
    171c:	00079d80 	call	79d8 <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    1720:	01000074 	movhi	r4,1
    1724:	2118e504 	addi	r4,r4,25492
    1728:	0007ad40 	call	7ad4 <puts>
	init_keyboard();
    172c:	00007300 	call	730 <init_keyboard>

	double theta = 0;
    1730:	e03fe915 	stw	zero,-92(fp)
    1734:	e03fea15 	stw	zero,-88(fp)
	double phi = 0;
    1738:	e03feb15 	stw	zero,-84(fp)
    173c:	e03fec15 	stw	zero,-80(fp)

	gpu->cam_pos.z = 0;
    1740:	d0a00017 	ldw	r2,-32768(gp)
    1744:	10001515 	stw	zero,84(r2)
	gpu->cam_pos.y = 0;
    1748:	d0a00017 	ldw	r2,-32768(gp)
    174c:	10001415 	stw	zero,80(r2)

	int keycode = 0;
    1750:	e03ffd15 	stw	zero,-12(fp)
	while (1) {
		time_t start_time = clock();
    1754:	00071280 	call	7128 <clock>
    1758:	e0bff615 	stw	r2,-40(fp)
		clear_depth(gpu, 1);
    175c:	d0a00017 	ldw	r2,-32768(gp)
    1760:	01400044 	movi	r5,1
    1764:	1009883a 	mov	r4,r2
    1768:	00016200 	call	1620 <clear_depth>
		clear_screen(gpu, 1);
    176c:	d0a00017 	ldw	r2,-32768(gp)
    1770:	01400044 	movi	r5,1
    1774:	1009883a 	mov	r4,r2
    1778:	00015ac0 	call	15ac <clear_screen>
		printf("Clear ticks %d\n", clock() - start_time);
    177c:	00071280 	call	7128 <clock>
    1780:	1007883a 	mov	r3,r2
    1784:	e0bff617 	ldw	r2,-40(fp)
    1788:	1885c83a 	sub	r2,r3,r2
    178c:	100b883a 	mov	r5,r2
    1790:	01000074 	movhi	r4,1
    1794:	2118ef04 	addi	r4,r4,25532
    1798:	00079d80 	call	79d8 <printf>
		start_time = clock();
    179c:	00071280 	call	7128 <clock>
    17a0:	e0bff615 	stw	r2,-40(fp)

		for (int z = 4; z > 0; z--) {
    17a4:	00800104 	movi	r2,4
    17a8:	e0bfed15 	stw	r2,-76(fp)
    17ac:	00001a06 	br	1818 <main+0x184>
			for (int x = 10; x > -5; x--) {
    17b0:	00800284 	movi	r2,10
    17b4:	e0bfee15 	stw	r2,-72(fp)
    17b8:	00001106 	br	1800 <main+0x16c>
				draw_cube(gpu, 8, -16 + 8 * x, -16, -64 + 8 * z, 0);
    17bc:	d0e00017 	ldw	r3,-32768(gp)
    17c0:	e0bfee17 	ldw	r2,-72(fp)
    17c4:	10bfff84 	addi	r2,r2,-2
    17c8:	100890fa 	slli	r4,r2,3
    17cc:	e0bfed17 	ldw	r2,-76(fp)
    17d0:	10bffe04 	addi	r2,r2,-8
    17d4:	100490fa 	slli	r2,r2,3
    17d8:	d8000115 	stw	zero,4(sp)
    17dc:	d8800015 	stw	r2,0(sp)
    17e0:	01fffc04 	movi	r7,-16
    17e4:	200d883a 	mov	r6,r4
    17e8:	01400204 	movi	r5,8
    17ec:	1809883a 	mov	r4,r3
    17f0:	00014d00 	call	14d0 <draw_cube>
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for (int z = 4; z > 0; z--) {
			for (int x = 10; x > -5; x--) {
    17f4:	e0bfee17 	ldw	r2,-72(fp)
    17f8:	10bfffc4 	addi	r2,r2,-1
    17fc:	e0bfee15 	stw	r2,-72(fp)
    1800:	e0bfee17 	ldw	r2,-72(fp)
    1804:	10bfff08 	cmpgei	r2,r2,-4
    1808:	103fec1e 	bne	r2,zero,17bc <__alt_exception_stack_pointer+0xf80017bc>
		clear_depth(gpu, 1);
		clear_screen(gpu, 1);
		printf("Clear ticks %d\n", clock() - start_time);
		start_time = clock();

		for (int z = 4; z > 0; z--) {
    180c:	e0bfed17 	ldw	r2,-76(fp)
    1810:	10bfffc4 	addi	r2,r2,-1
    1814:	e0bfed15 	stw	r2,-76(fp)
    1818:	e0bfed17 	ldw	r2,-76(fp)
    181c:	00bfe416 	blt	zero,r2,17b0 <__alt_exception_stack_pointer+0xf80017b0>
			for (int x = 10; x > -5; x--) {
				draw_cube(gpu, 8, -16 + 8 * x, -16, -64 + 8 * z, 0);
			}
		}

		for (int y = 1; y < 6; y++) {
    1820:	00800044 	movi	r2,1
    1824:	e0bfef15 	stw	r2,-68(fp)
    1828:	00001006 	br	186c <main+0x1d8>
			draw_cube(gpu, 8, -16, -16 + 8 * y, -64 + 16, 2);
    182c:	d0e00017 	ldw	r3,-32768(gp)
    1830:	e0bfef17 	ldw	r2,-68(fp)
    1834:	10bfff84 	addi	r2,r2,-2
    1838:	100890fa 	slli	r4,r2,3
    183c:	00800084 	movi	r2,2
    1840:	d8800115 	stw	r2,4(sp)
    1844:	00bff404 	movi	r2,-48
    1848:	d8800015 	stw	r2,0(sp)
    184c:	200f883a 	mov	r7,r4
    1850:	01bffc04 	movi	r6,-16
    1854:	01400204 	movi	r5,8
    1858:	1809883a 	mov	r4,r3
    185c:	00014d00 	call	14d0 <draw_cube>
			for (int x = 10; x > -5; x--) {
				draw_cube(gpu, 8, -16 + 8 * x, -16, -64 + 8 * z, 0);
			}
		}

		for (int y = 1; y < 6; y++) {
    1860:	e0bfef17 	ldw	r2,-68(fp)
    1864:	10800044 	addi	r2,r2,1
    1868:	e0bfef15 	stw	r2,-68(fp)
    186c:	e0bfef17 	ldw	r2,-68(fp)
    1870:	10800190 	cmplti	r2,r2,6
    1874:	103fed1e 	bne	r2,zero,182c <__alt_exception_stack_pointer+0xf800182c>
			draw_cube(gpu, 8, -16, -16 + 8 * y, -64 + 16, 2);
		}

		for (int y = 1; y < 6; y++) {
    1878:	00800044 	movi	r2,1
    187c:	e0bff015 	stw	r2,-64(fp)
    1880:	00001006 	br	18c4 <main+0x230>
			draw_cube(gpu, 8, -16 + 16, -16 + 8 * y, -64 + 16 - 16, 2);
    1884:	d0e00017 	ldw	r3,-32768(gp)
    1888:	e0bff017 	ldw	r2,-64(fp)
    188c:	10bfff84 	addi	r2,r2,-2
    1890:	100890fa 	slli	r4,r2,3
    1894:	00800084 	movi	r2,2
    1898:	d8800115 	stw	r2,4(sp)
    189c:	00bff004 	movi	r2,-64
    18a0:	d8800015 	stw	r2,0(sp)
    18a4:	200f883a 	mov	r7,r4
    18a8:	000d883a 	mov	r6,zero
    18ac:	01400204 	movi	r5,8
    18b0:	1809883a 	mov	r4,r3
    18b4:	00014d00 	call	14d0 <draw_cube>

		for (int y = 1; y < 6; y++) {
			draw_cube(gpu, 8, -16, -16 + 8 * y, -64 + 16, 2);
		}

		for (int y = 1; y < 6; y++) {
    18b8:	e0bff017 	ldw	r2,-64(fp)
    18bc:	10800044 	addi	r2,r2,1
    18c0:	e0bff015 	stw	r2,-64(fp)
    18c4:	e0bff017 	ldw	r2,-64(fp)
    18c8:	10800190 	cmplti	r2,r2,6
    18cc:	103fed1e 	bne	r2,zero,1884 <__alt_exception_stack_pointer+0xf8001884>
			draw_cube(gpu, 8, -16 + 16, -16 + 8 * y, -64 + 16 - 16, 2);
		}

		draw_cube(gpu, 8, 16, -8, -40, 3);
    18d0:	d0e00017 	ldw	r3,-32768(gp)
    18d4:	008000c4 	movi	r2,3
    18d8:	d8800115 	stw	r2,4(sp)
    18dc:	00bff604 	movi	r2,-40
    18e0:	d8800015 	stw	r2,0(sp)
    18e4:	01fffe04 	movi	r7,-8
    18e8:	01800404 	movi	r6,16
    18ec:	01400204 	movi	r5,8
    18f0:	1809883a 	mov	r4,r3
    18f4:	00014d00 	call	14d0 <draw_cube>
		draw_cube(gpu, 8, 8, -8, -40, 3);
    18f8:	d0e00017 	ldw	r3,-32768(gp)
    18fc:	008000c4 	movi	r2,3
    1900:	d8800115 	stw	r2,4(sp)
    1904:	00bff604 	movi	r2,-40
    1908:	d8800015 	stw	r2,0(sp)
    190c:	01fffe04 	movi	r7,-8
    1910:	01800204 	movi	r6,8
    1914:	01400204 	movi	r5,8
    1918:	1809883a 	mov	r4,r3
    191c:	00014d00 	call	14d0 <draw_cube>
		draw_cube(gpu, 8, 24, -8, -40, 3);
    1920:	d0e00017 	ldw	r3,-32768(gp)
    1924:	008000c4 	movi	r2,3
    1928:	d8800115 	stw	r2,4(sp)
    192c:	00bff604 	movi	r2,-40
    1930:	d8800015 	stw	r2,0(sp)
    1934:	01fffe04 	movi	r7,-8
    1938:	01800604 	movi	r6,24
    193c:	01400204 	movi	r5,8
    1940:	1809883a 	mov	r4,r3
    1944:	00014d00 	call	14d0 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40 - 8, 3);
    1948:	d0e00017 	ldw	r3,-32768(gp)
    194c:	008000c4 	movi	r2,3
    1950:	d8800115 	stw	r2,4(sp)
    1954:	00bff404 	movi	r2,-48
    1958:	d8800015 	stw	r2,0(sp)
    195c:	01fffe04 	movi	r7,-8
    1960:	01800404 	movi	r6,16
    1964:	01400204 	movi	r5,8
    1968:	1809883a 	mov	r4,r3
    196c:	00014d00 	call	14d0 <draw_cube>
		draw_cube(gpu, 8, 16, -8, -40 + 8, 3);
    1970:	d0e00017 	ldw	r3,-32768(gp)
    1974:	008000c4 	movi	r2,3
    1978:	d8800115 	stw	r2,4(sp)
    197c:	00bff804 	movi	r2,-32
    1980:	d8800015 	stw	r2,0(sp)
    1984:	01fffe04 	movi	r7,-8
    1988:	01800404 	movi	r6,16
    198c:	01400204 	movi	r5,8
    1990:	1809883a 	mov	r4,r3
    1994:	00014d00 	call	14d0 <draw_cube>
		draw_cube(gpu, 8, 16, 0, -40, 6);
    1998:	d0e00017 	ldw	r3,-32768(gp)
    199c:	00800184 	movi	r2,6
    19a0:	d8800115 	stw	r2,4(sp)
    19a4:	00bff604 	movi	r2,-40
    19a8:	d8800015 	stw	r2,0(sp)
    19ac:	000f883a 	mov	r7,zero
    19b0:	01800404 	movi	r6,16
    19b4:	01400204 	movi	r5,8
    19b8:	1809883a 	mov	r4,r3
    19bc:	00014d00 	call	14d0 <draw_cube>

		int c_w = 3;
    19c0:	008000c4 	movi	r2,3
    19c4:	e0bff715 	stw	r2,-36(fp)
		int c_h = 3;
    19c8:	008000c4 	movi	r2,3
    19cc:	e0bff815 	stw	r2,-32(fp)
		pixel_t pixel = {200, 200, 200, 0};
    19d0:	00bff204 	movi	r2,-56
    19d4:	e0bffe05 	stb	r2,-8(fp)
    19d8:	00bff204 	movi	r2,-56
    19dc:	e0bffe45 	stb	r2,-7(fp)
    19e0:	00bff204 	movi	r2,-56
    19e4:	e0bffe85 	stb	r2,-6(fp)
    19e8:	e03ffec5 	stb	zero,-5(fp)
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
    19ec:	00c01e04 	movi	r3,120
    19f0:	e0bff717 	ldw	r2,-36(fp)
    19f4:	1885c83a 	sub	r2,r3,r2
    19f8:	e0bff115 	stw	r2,-60(fp)
    19fc:	00001206 	br	1a48 <main+0x3b4>
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;
    1a00:	e43ff417 	ldw	r16,-48(fp)
    1a04:	e0bff117 	ldw	r2,-60(fp)
    1a08:	01414004 	movi	r5,1280
    1a0c:	1009883a 	mov	r4,r2
    1a10:	00053c80 	call	53c8 <__mulsi3>
    1a14:	8085883a 	add	r2,r16,r2
    1a18:	1080a004 	addi	r2,r2,640
    1a1c:	e0fffe03 	ldbu	r3,-8(fp)
    1a20:	10c00005 	stb	r3,0(r2)
    1a24:	e0fffe43 	ldbu	r3,-7(fp)
    1a28:	10c00045 	stb	r3,1(r2)
    1a2c:	e0fffe83 	ldbu	r3,-6(fp)
    1a30:	10c00085 	stb	r3,2(r2)
    1a34:	e0fffec3 	ldbu	r3,-5(fp)
    1a38:	10c000c5 	stb	r3,3(r2)
		draw_cube(gpu, 8, 16, 0, -40, 6);

		int c_w = 3;
		int c_h = 3;
		pixel_t pixel = {200, 200, 200, 0};
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
    1a3c:	e0bff117 	ldw	r2,-60(fp)
    1a40:	10800044 	addi	r2,r2,1
    1a44:	e0bff115 	stw	r2,-60(fp)
    1a48:	e0bff717 	ldw	r2,-36(fp)
    1a4c:	10801e44 	addi	r2,r2,121
    1a50:	e0fff117 	ldw	r3,-60(fp)
    1a54:	18bfea16 	blt	r3,r2,1a00 <__alt_exception_stack_pointer+0xf8001a00>
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;

		}
		for(int c = SCREEN_WIDTH/2 - c_h; c < SCREEN_WIDTH/2 + c_h + 1;c++) {
    1a58:	00c02804 	movi	r3,160
    1a5c:	e0bff817 	ldw	r2,-32(fp)
    1a60:	1885c83a 	sub	r2,r3,r2
    1a64:	e0bff215 	stw	r2,-56(fp)
    1a68:	00001206 	br	1ab4 <main+0x420>
			frame2->D2[SCREEN_HEIGHT/2][c] = pixel;
    1a6c:	e0fff417 	ldw	r3,-48(fp)
    1a70:	e13ff217 	ldw	r4,-56(fp)
    1a74:	00a58014 	movui	r2,38400
    1a78:	2085883a 	add	r2,r4,r2
    1a7c:	1085883a 	add	r2,r2,r2
    1a80:	1085883a 	add	r2,r2,r2
    1a84:	1885883a 	add	r2,r3,r2
    1a88:	e0fffe03 	ldbu	r3,-8(fp)
    1a8c:	10c00005 	stb	r3,0(r2)
    1a90:	e0fffe43 	ldbu	r3,-7(fp)
    1a94:	10c00045 	stb	r3,1(r2)
    1a98:	e0fffe83 	ldbu	r3,-6(fp)
    1a9c:	10c00085 	stb	r3,2(r2)
    1aa0:	e0fffec3 	ldbu	r3,-5(fp)
    1aa4:	10c000c5 	stb	r3,3(r2)
		pixel_t pixel = {200, 200, 200, 0};
		for(int c = SCREEN_HEIGHT/2 - c_w; c < SCREEN_HEIGHT/2 + c_w + 1;c++) {
			frame2->D2[c][SCREEN_WIDTH/2] = pixel;

		}
		for(int c = SCREEN_WIDTH/2 - c_h; c < SCREEN_WIDTH/2 + c_h + 1;c++) {
    1aa8:	e0bff217 	ldw	r2,-56(fp)
    1aac:	10800044 	addi	r2,r2,1
    1ab0:	e0bff215 	stw	r2,-56(fp)
    1ab4:	e0bff817 	ldw	r2,-32(fp)
    1ab8:	10802844 	addi	r2,r2,161
    1abc:	e0fff217 	ldw	r3,-56(fp)
    1ac0:	18bfea16 	blt	r3,r2,1a6c <__alt_exception_stack_pointer+0xf8001a6c>
			frame2->D2[SCREEN_HEIGHT/2][c] = pixel;
		}

		printf("Render ticks %d\n", clock() - start_time);
    1ac4:	00071280 	call	7128 <clock>
    1ac8:	1007883a 	mov	r3,r2
    1acc:	e0bff617 	ldw	r2,-40(fp)
    1ad0:	1885c83a 	sub	r2,r3,r2
    1ad4:	100b883a 	mov	r5,r2
    1ad8:	01000074 	movhi	r4,1
    1adc:	2118f304 	addi	r4,r4,25548
    1ae0:	00079d80 	call	79d8 <printf>
		start_time = clock();
    1ae4:	00071280 	call	7128 <clock>
    1ae8:	e0bff615 	stw	r2,-40(fp)

		//memcpy(frame1, frame2, sizeof(frame1->D1));
		//printf("%d", );
		transfer(frame2, frame1,sizeof(frame1->D1));
    1aec:	01800174 	movhi	r6,5
    1af0:	31ac0004 	addi	r6,r6,-20480
    1af4:	e17ff317 	ldw	r5,-52(fp)
    1af8:	e13ff417 	ldw	r4,-48(fp)
    1afc:	00013a80 	call	13a8 <transfer>

		printf("Copy ticks %d\n", clock() - start_time);
    1b00:	00071280 	call	7128 <clock>
    1b04:	1007883a 	mov	r3,r2
    1b08:	e0bff617 	ldw	r2,-40(fp)
    1b0c:	1885c83a 	sub	r2,r3,r2
    1b10:	100b883a 	mov	r5,r2
    1b14:	01000074 	movhi	r4,1
    1b18:	2118f804 	addi	r4,r4,25568
    1b1c:	00079d80 	call	79d8 <printf>
		start_time = clock();
    1b20:	00071280 	call	7128 <clock>
    1b24:	e0bff615 	stw	r2,-40(fp)


		loop_keyboard(&keycode);
    1b28:	e0bffd04 	addi	r2,fp,-12
    1b2c:	1009883a 	mov	r4,r2
    1b30:	00004300 	call	430 <loop_keyboard>
		if(keycode == KEY_S) {
    1b34:	e0bffd17 	ldw	r2,-12(fp)
    1b38:	10800598 	cmpnei	r2,r2,22
    1b3c:	1000061e 	bne	r2,zero,1b58 <main+0x4c4>
			gpu->cam_pos.z += 1;
    1b40:	d0a00017 	ldw	r2,-32768(gp)
    1b44:	d0e00017 	ldw	r3,-32768(gp)
    1b48:	18c01517 	ldw	r3,84(r3)
    1b4c:	18c00044 	addi	r3,r3,1
    1b50:	10c01515 	stw	r3,84(r2)
    1b54:	00000806 	br	1b78 <main+0x4e4>
		} else if (keycode == KEY_W) {
    1b58:	e0bffd17 	ldw	r2,-12(fp)
    1b5c:	10800698 	cmpnei	r2,r2,26
    1b60:	1000051e 	bne	r2,zero,1b78 <main+0x4e4>
			gpu->cam_pos.z -= 1;
    1b64:	d0a00017 	ldw	r2,-32768(gp)
    1b68:	d0e00017 	ldw	r3,-32768(gp)
    1b6c:	18c01517 	ldw	r3,84(r3)
    1b70:	18ffffc4 	addi	r3,r3,-1
    1b74:	10c01515 	stw	r3,84(r2)
		}

		if(keycode == KEY_A) {
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800118 	cmpnei	r2,r2,4
    1b80:	1000061e 	bne	r2,zero,1b9c <main+0x508>
			gpu->cam_pos.x += 1;
    1b84:	d0a00017 	ldw	r2,-32768(gp)
    1b88:	d0e00017 	ldw	r3,-32768(gp)
    1b8c:	18c01317 	ldw	r3,76(r3)
    1b90:	18c00044 	addi	r3,r3,1
    1b94:	10c01315 	stw	r3,76(r2)
    1b98:	00000806 	br	1bbc <main+0x528>
		} else if (keycode == KEY_D) {
    1b9c:	e0bffd17 	ldw	r2,-12(fp)
    1ba0:	108001d8 	cmpnei	r2,r2,7
    1ba4:	1000051e 	bne	r2,zero,1bbc <main+0x528>
			gpu->cam_pos.x -= 1;
    1ba8:	d0a00017 	ldw	r2,-32768(gp)
    1bac:	d0e00017 	ldw	r3,-32768(gp)
    1bb0:	18c01317 	ldw	r3,76(r3)
    1bb4:	18ffffc4 	addi	r3,r3,-1
    1bb8:	10c01315 	stw	r3,76(r2)
		}

		if(keycode == KEY_UP) {
    1bbc:	e0bffd17 	ldw	r2,-12(fp)
    1bc0:	10801498 	cmpnei	r2,r2,82
    1bc4:	10000c1e 	bne	r2,zero,1bf8 <main+0x564>
			theta += 0.01;
    1bc8:	0191ebb4 	movhi	r6,18350
    1bcc:	31851ec4 	addi	r6,r6,5243
    1bd0:	01cfe134 	movhi	r7,16260
    1bd4:	39deb844 	addi	r7,r7,31457
    1bd8:	e13fe917 	ldw	r4,-92(fp)
    1bdc:	e17fea17 	ldw	r5,-88(fp)
    1be0:	00053f00 	call	53f0 <__adddf3>
    1be4:	1009883a 	mov	r4,r2
    1be8:	180b883a 	mov	r5,r3
    1bec:	e13fe915 	stw	r4,-92(fp)
    1bf0:	e17fea15 	stw	r5,-88(fp)
    1bf4:	00000e06 	br	1c30 <main+0x59c>
		} else if(keycode == KEY_DOWN) {
    1bf8:	e0bffd17 	ldw	r2,-12(fp)
    1bfc:	10801458 	cmpnei	r2,r2,81
    1c00:	10000b1e 	bne	r2,zero,1c30 <main+0x59c>
			theta -= 0.01;
    1c04:	0191ebb4 	movhi	r6,18350
    1c08:	31851ec4 	addi	r6,r6,5243
    1c0c:	01cfe134 	movhi	r7,16260
    1c10:	39deb844 	addi	r7,r7,31457
    1c14:	e13fe917 	ldw	r4,-92(fp)
    1c18:	e17fea17 	ldw	r5,-88(fp)
    1c1c:	000666c0 	call	666c <__subdf3>
    1c20:	1009883a 	mov	r4,r2
    1c24:	180b883a 	mov	r5,r3
    1c28:	e13fe915 	stw	r4,-92(fp)
    1c2c:	e17fea15 	stw	r5,-88(fp)
		}

		if(keycode == KEY_LEFT) {
    1c30:	e0bffd17 	ldw	r2,-12(fp)
    1c34:	10801418 	cmpnei	r2,r2,80
    1c38:	10000c1e 	bne	r2,zero,1c6c <main+0x5d8>
			phi += 0.01;
    1c3c:	0191ebb4 	movhi	r6,18350
    1c40:	31851ec4 	addi	r6,r6,5243
    1c44:	01cfe134 	movhi	r7,16260
    1c48:	39deb844 	addi	r7,r7,31457
    1c4c:	e13feb17 	ldw	r4,-84(fp)
    1c50:	e17fec17 	ldw	r5,-80(fp)
    1c54:	00053f00 	call	53f0 <__adddf3>
    1c58:	1009883a 	mov	r4,r2
    1c5c:	180b883a 	mov	r5,r3
    1c60:	e13feb15 	stw	r4,-84(fp)
    1c64:	e17fec15 	stw	r5,-80(fp)
    1c68:	00000e06 	br	1ca4 <main+0x610>
		} else if(keycode == KEY_RIGHT) {
    1c6c:	e0bffd17 	ldw	r2,-12(fp)
    1c70:	108013d8 	cmpnei	r2,r2,79
    1c74:	10000b1e 	bne	r2,zero,1ca4 <main+0x610>
			phi -= 0.01;
    1c78:	0191ebb4 	movhi	r6,18350
    1c7c:	31851ec4 	addi	r6,r6,5243
    1c80:	01cfe134 	movhi	r7,16260
    1c84:	39deb844 	addi	r7,r7,31457
    1c88:	e13feb17 	ldw	r4,-84(fp)
    1c8c:	e17fec17 	ldw	r5,-80(fp)
    1c90:	000666c0 	call	666c <__subdf3>
    1c94:	1009883a 	mov	r4,r2
    1c98:	180b883a 	mov	r5,r3
    1c9c:	e13feb15 	stw	r4,-84(fp)
    1ca0:	e17fec15 	stw	r5,-80(fp)
		}

		int s_t = (int) (sin(theta) * (1 << 8));
    1ca4:	e13fe917 	ldw	r4,-92(fp)
    1ca8:	e17fea17 	ldw	r5,-88(fp)
    1cac:	00030f80 	call	30f8 <sin>
    1cb0:	1011883a 	mov	r8,r2
    1cb4:	1813883a 	mov	r9,r3
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	01d01c34 	movhi	r7,16496
    1cc0:	4009883a 	mov	r4,r8
    1cc4:	480b883a 	mov	r5,r9
    1cc8:	0005e000 	call	5e00 <__muldf3>
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	180b883a 	mov	r5,r3
    1cd4:	2005883a 	mov	r2,r4
    1cd8:	2807883a 	mov	r3,r5
    1cdc:	1009883a 	mov	r4,r2
    1ce0:	180b883a 	mov	r5,r3
    1ce4:	0006f680 	call	6f68 <__fixdfsi>
    1ce8:	e0bff915 	stw	r2,-28(fp)
		int c_t = (int) (cos(theta) * (1 << 8));
    1cec:	e13fe917 	ldw	r4,-92(fp)
    1cf0:	e17fea17 	ldw	r5,-88(fp)
    1cf4:	000300c0 	call	300c <cos>
    1cf8:	1011883a 	mov	r8,r2
    1cfc:	1813883a 	mov	r9,r3
    1d00:	000d883a 	mov	r6,zero
    1d04:	01d01c34 	movhi	r7,16496
    1d08:	4009883a 	mov	r4,r8
    1d0c:	480b883a 	mov	r5,r9
    1d10:	0005e000 	call	5e00 <__muldf3>
    1d14:	1009883a 	mov	r4,r2
    1d18:	180b883a 	mov	r5,r3
    1d1c:	2005883a 	mov	r2,r4
    1d20:	2807883a 	mov	r3,r5
    1d24:	1009883a 	mov	r4,r2
    1d28:	180b883a 	mov	r5,r3
    1d2c:	0006f680 	call	6f68 <__fixdfsi>
    1d30:	e0bffa15 	stw	r2,-24(fp)

		int s_p = (int) (sin(phi) * (1 << 8));
    1d34:	e13feb17 	ldw	r4,-84(fp)
    1d38:	e17fec17 	ldw	r5,-80(fp)
    1d3c:	00030f80 	call	30f8 <sin>
    1d40:	1011883a 	mov	r8,r2
    1d44:	1813883a 	mov	r9,r3
    1d48:	000d883a 	mov	r6,zero
    1d4c:	01d01c34 	movhi	r7,16496
    1d50:	4009883a 	mov	r4,r8
    1d54:	480b883a 	mov	r5,r9
    1d58:	0005e000 	call	5e00 <__muldf3>
    1d5c:	1009883a 	mov	r4,r2
    1d60:	180b883a 	mov	r5,r3
    1d64:	2005883a 	mov	r2,r4
    1d68:	2807883a 	mov	r3,r5
    1d6c:	1009883a 	mov	r4,r2
    1d70:	180b883a 	mov	r5,r3
    1d74:	0006f680 	call	6f68 <__fixdfsi>
    1d78:	e0bffb15 	stw	r2,-20(fp)
		int c_p = (int) (cos(phi) * (1 << 8));
    1d7c:	e13feb17 	ldw	r4,-84(fp)
    1d80:	e17fec17 	ldw	r5,-80(fp)
    1d84:	000300c0 	call	300c <cos>
    1d88:	1011883a 	mov	r8,r2
    1d8c:	1813883a 	mov	r9,r3
    1d90:	000d883a 	mov	r6,zero
    1d94:	01d01c34 	movhi	r7,16496
    1d98:	4009883a 	mov	r4,r8
    1d9c:	480b883a 	mov	r5,r9
    1da0:	0005e000 	call	5e00 <__muldf3>
    1da4:	1009883a 	mov	r4,r2
    1da8:	180b883a 	mov	r5,r3
    1dac:	2005883a 	mov	r2,r4
    1db0:	2807883a 	mov	r3,r5
    1db4:	1009883a 	mov	r4,r2
    1db8:	180b883a 	mov	r5,r3
    1dbc:	0006f680 	call	6f68 <__fixdfsi>
    1dc0:	e0bffc15 	stw	r2,-16(fp)

		//        Matrix([[cos(phi), 			0,			 sin(phi), 0],
		//                [sin(phi)*sin(theta), cos(theta), -sin(theta)*cos(phi), 0],
		//                [-sin(phi)*cos(theta), sin(theta), cos(phi)*cos(theta), 0], [0, 0, 0, 1]]

		gpu->cam_x_axis.x = c_p;
    1dc4:	d0a00017 	ldw	r2,-32768(gp)
    1dc8:	e0fffc17 	ldw	r3,-16(fp)
    1dcc:	10c00a15 	stw	r3,40(r2)
		gpu->cam_x_axis.y = s_p * s_t / (1 << 8);
    1dd0:	d4200017 	ldw	r16,-32768(gp)
    1dd4:	e17ff917 	ldw	r5,-28(fp)
    1dd8:	e13ffb17 	ldw	r4,-20(fp)
    1ddc:	00053c80 	call	53c8 <__mulsi3>
    1de0:	1000010e 	bge	r2,zero,1de8 <main+0x754>
    1de4:	10803fc4 	addi	r2,r2,255
    1de8:	1005d23a 	srai	r2,r2,8
    1dec:	80800b15 	stw	r2,44(r16)
		gpu->cam_x_axis.z = -s_p * c_t / (1 << 8);
    1df0:	d4200017 	ldw	r16,-32768(gp)
    1df4:	e0bffb17 	ldw	r2,-20(fp)
    1df8:	0085c83a 	sub	r2,zero,r2
    1dfc:	e17ffa17 	ldw	r5,-24(fp)
    1e00:	1009883a 	mov	r4,r2
    1e04:	00053c80 	call	53c8 <__mulsi3>
    1e08:	1000010e 	bge	r2,zero,1e10 <main+0x77c>
    1e0c:	10803fc4 	addi	r2,r2,255
    1e10:	1005d23a 	srai	r2,r2,8
    1e14:	80800c15 	stw	r2,48(r16)

		gpu->cam_y_axis.x = 0;
    1e18:	d0a00017 	ldw	r2,-32768(gp)
    1e1c:	10000d15 	stw	zero,52(r2)
		gpu->cam_y_axis.y = c_t;
    1e20:	d0a00017 	ldw	r2,-32768(gp)
    1e24:	e0fffa17 	ldw	r3,-24(fp)
    1e28:	10c00e15 	stw	r3,56(r2)
		gpu->cam_y_axis.z = s_t;
    1e2c:	d0a00017 	ldw	r2,-32768(gp)
    1e30:	e0fff917 	ldw	r3,-28(fp)
    1e34:	10c00f15 	stw	r3,60(r2)

		gpu->cam_z_axis.x = s_p;
    1e38:	d0a00017 	ldw	r2,-32768(gp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10c01015 	stw	r3,64(r2)
		gpu->cam_z_axis.y = -s_t * c_p / (1 << 8);
    1e44:	d4200017 	ldw	r16,-32768(gp)
    1e48:	e0bff917 	ldw	r2,-28(fp)
    1e4c:	0085c83a 	sub	r2,zero,r2
    1e50:	e17ffc17 	ldw	r5,-16(fp)
    1e54:	1009883a 	mov	r4,r2
    1e58:	00053c80 	call	53c8 <__mulsi3>
    1e5c:	1000010e 	bge	r2,zero,1e64 <main+0x7d0>
    1e60:	10803fc4 	addi	r2,r2,255
    1e64:	1005d23a 	srai	r2,r2,8
    1e68:	80801115 	stw	r2,68(r16)
		gpu->cam_z_axis.z = c_p * c_t / (1 << 8);
    1e6c:	d4200017 	ldw	r16,-32768(gp)
    1e70:	e17ffa17 	ldw	r5,-24(fp)
    1e74:	e13ffc17 	ldw	r4,-16(fp)
    1e78:	00053c80 	call	53c8 <__mulsi3>
    1e7c:	1000010e 	bge	r2,zero,1e84 <main+0x7f0>
    1e80:	10803fc4 	addi	r2,r2,255
    1e84:	1005d23a 	srai	r2,r2,8
    1e88:	80801215 	stw	r2,72(r16)
	}
    1e8c:	003e3106 	br	1754 <__alt_exception_stack_pointer+0xf8001754>

00001e90 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1e90:	defffc04 	addi	sp,sp,-16
    1e94:	dfc00315 	stw	ra,12(sp)
    1e98:	df000215 	stw	fp,8(sp)
    1e9c:	df000204 	addi	fp,sp,8
    1ea0:	2007883a 	mov	r3,r4
    1ea4:	2805883a 	mov	r2,r5
    1ea8:	e0fffe0d 	sth	r3,-8(fp)
    1eac:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1eb0:	e0bffe0b 	ldhu	r2,-8(fp)
    1eb4:	100b883a 	mov	r5,r2
    1eb8:	01000084 	movi	r4,2
    1ebc:	00003280 	call	328 <IO_write>
	IO_write(0, Data);
    1ec0:	e0bfff0b 	ldhu	r2,-4(fp)
    1ec4:	100b883a 	mov	r5,r2
    1ec8:	0009883a 	mov	r4,zero
    1ecc:	00003280 	call	328 <IO_write>
}
    1ed0:	0001883a 	nop
    1ed4:	e037883a 	mov	sp,fp
    1ed8:	dfc00117 	ldw	ra,4(sp)
    1edc:	df000017 	ldw	fp,0(sp)
    1ee0:	dec00204 	addi	sp,sp,8
    1ee4:	f800283a 	ret

00001ee8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1ee8:	defffd04 	addi	sp,sp,-12
    1eec:	dfc00215 	stw	ra,8(sp)
    1ef0:	df000115 	stw	fp,4(sp)
    1ef4:	df000104 	addi	fp,sp,4
    1ef8:	2005883a 	mov	r2,r4
    1efc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    1f00:	e0bfff0b 	ldhu	r2,-4(fp)
    1f04:	100b883a 	mov	r5,r2
    1f08:	01000084 	movi	r4,2
    1f0c:	00003280 	call	328 <IO_write>
	return IO_read(0);
    1f10:	0009883a 	mov	r4,zero
    1f14:	00003b00 	call	3b0 <IO_read>

}
    1f18:	e037883a 	mov	sp,fp
    1f1c:	dfc00117 	ldw	ra,4(sp)
    1f20:	df000017 	ldw	fp,0(sp)
    1f24:	dec00204 	addi	sp,sp,8
    1f28:	f800283a 	ret

00001f2c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1f2c:	defffe04 	addi	sp,sp,-8
    1f30:	dfc00115 	stw	ra,4(sp)
    1f34:	df000015 	stw	fp,0(sp)
    1f38:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1f3c:	017e9414 	movui	r5,64080
    1f40:	01000044 	movi	r4,1
    1f44:	00003280 	call	328 <IO_write>
	usleep(100000);
    1f48:	010000b4 	movhi	r4,2
    1f4c:	2121a804 	addi	r4,r4,-31072
    1f50:	0012c8c0 	call	12c8c <usleep>
	printf("[USB INIT]:reset finished!\n");
    1f54:	01000074 	movhi	r4,1
    1f58:	2118fc04 	addi	r4,r4,25584
    1f5c:	0007ad40 	call	7ad4 <puts>

	usleep(500000);
    1f60:	01000234 	movhi	r4,8
    1f64:	21284804 	addi	r4,r4,-24288
    1f68:	0012c8c0 	call	12c8c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1f6c:	01000074 	movhi	r4,1
    1f70:	21190304 	addi	r4,r4,25612
    1f74:	0007ad40 	call	7ad4 <puts>
	IO_read(HPI_MAILBOX);
    1f78:	01000044 	movi	r4,1
    1f7c:	00003b00 	call	3b0 <IO_read>
	IO_read(HPI_STATUS);
    1f80:	010000c4 	movi	r4,3
    1f84:	00003b00 	call	3b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1f88:	01005104 	movi	r4,324
    1f8c:	0001ee80 	call	1ee8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1f90:	000b883a 	mov	r5,zero
    1f94:	01005104 	movi	r4,324
    1f98:	0001e900 	call	1e90 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1f9c:	01005204 	movi	r4,328
    1fa0:	0001ee80 	call	1ee8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1fa4:	000b883a 	mov	r5,zero
    1fa8:	01005204 	movi	r4,328
    1fac:	0001e900 	call	1e90 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1fb0:	017fffd4 	movui	r5,65535
    1fb4:	01302414 	movui	r4,49296
    1fb8:	0001e900 	call	1e90 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1fbc:	017fffd4 	movui	r5,65535
    1fc0:	01302c14 	movui	r4,49328
    1fc4:	0001e900 	call	1e90 <UsbWrite>
}
    1fc8:	0001883a 	nop
    1fcc:	e037883a 	mov	sp,fp
    1fd0:	dfc00117 	ldw	ra,4(sp)
    1fd4:	df000017 	ldw	fp,0(sp)
    1fd8:	dec00204 	addi	sp,sp,8
    1fdc:	f800283a 	ret

00001fe0 <UsbSetAddress>:


void UsbSetAddress()
{
    1fe0:	defffe04 	addi	sp,sp,-8
    1fe4:	dfc00115 	stw	ra,4(sp)
    1fe8:	df000015 	stw	fp,0(sp)
    1fec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ff0:	01414004 	movi	r5,1280
    1ff4:	01000084 	movi	r4,2
    1ff8:	00003280 	call	328 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1ffc:	01414304 	movi	r5,1292
    2000:	0009883a 	mov	r4,zero
    2004:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2008:	01400204 	movi	r5,8
    200c:	0009883a 	mov	r4,zero
    2010:	00003280 	call	328 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    2014:	01403404 	movi	r5,208
    2018:	0009883a 	mov	r4,zero
    201c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2020:	01400044 	movi	r5,1
    2024:	0009883a 	mov	r4,zero
    2028:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    202c:	014004c4 	movi	r5,19
    2030:	0009883a 	mov	r4,zero
    2034:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2038:	01414504 	movi	r5,1300
    203c:	0009883a 	mov	r4,zero
    2040:	00003280 	call	328 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    2044:	01414004 	movi	r5,1280
    2048:	0009883a 	mov	r4,zero
    204c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);
    2050:	01400084 	movi	r5,2
    2054:	0009883a 	mov	r4,zero
    2058:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    205c:	000b883a 	mov	r5,zero
    2060:	0009883a 	mov	r4,zero
    2064:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2068:	000b883a 	mov	r5,zero
    206c:	0009883a 	mov	r4,zero
    2070:	00003280 	call	328 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    2074:	000b883a 	mov	r5,zero
    2078:	0009883a 	mov	r4,zero
    207c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    2080:	000b883a 	mov	r5,zero
    2084:	0009883a 	mov	r4,zero
    2088:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    208c:	01402404 	movi	r5,144
    2090:	0009883a 	mov	r4,zero
    2094:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2098:	01401044 	movi	r5,65
    209c:	0009883a 	mov	r4,zero
    20a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20a4:	014004c4 	movi	r5,19
    20a8:	0009883a 	mov	r4,zero
    20ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    20b0:	000b883a 	mov	r5,zero
    20b4:	0009883a 	mov	r4,zero
    20b8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20bc:	01414004 	movi	r5,1280
    20c0:	01006c04 	movi	r4,432
    20c4:	0001e900 	call	1e90 <UsbWrite>
}
    20c8:	0001883a 	nop
    20cc:	e037883a 	mov	sp,fp
    20d0:	dfc00117 	ldw	ra,4(sp)
    20d4:	df000017 	ldw	fp,0(sp)
    20d8:	dec00204 	addi	sp,sp,8
    20dc:	f800283a 	ret

000020e0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    20e0:	defffe04 	addi	sp,sp,-8
    20e4:	dfc00115 	stw	ra,4(sp)
    20e8:	df000015 	stw	fp,0(sp)
    20ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    20f0:	01414004 	movi	r5,1280
    20f4:	01000084 	movi	r4,2
    20f8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    20fc:	01414304 	movi	r5,1292
    2100:	0009883a 	mov	r4,zero
    2104:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2108:	01400204 	movi	r5,8
    210c:	0009883a 	mov	r4,zero
    2110:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2114:	0140b404 	movi	r5,720
    2118:	0009883a 	mov	r4,zero
    211c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2120:	01400044 	movi	r5,1
    2124:	0009883a 	mov	r4,zero
    2128:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    212c:	014004c4 	movi	r5,19
    2130:	0009883a 	mov	r4,zero
    2134:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2138:	01414504 	movi	r5,1300
    213c:	0009883a 	mov	r4,zero
    2140:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2144:	0141a004 	movi	r5,1664
    2148:	0009883a 	mov	r4,zero
    214c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    2150:	01404004 	movi	r5,256
    2154:	0009883a 	mov	r4,zero
    2158:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    215c:	000b883a 	mov	r5,zero
    2160:	0009883a 	mov	r4,zero
    2164:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);
    2168:	01400204 	movi	r5,8
    216c:	0009883a 	mov	r4,zero
    2170:	00003280 	call	328 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    2174:	01414b04 	movi	r5,1324
    2178:	0009883a 	mov	r4,zero
    217c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    2180:	01400204 	movi	r5,8
    2184:	0009883a 	mov	r4,zero
    2188:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    218c:	0140a404 	movi	r5,656
    2190:	0009883a 	mov	r4,zero
    2194:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2198:	01401044 	movi	r5,65
    219c:	0009883a 	mov	r4,zero
    21a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21a4:	014004c4 	movi	r5,19
    21a8:	0009883a 	mov	r4,zero
    21ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);
    21b0:	01414804 	movi	r5,1312
    21b4:	0009883a 	mov	r4,zero
    21b8:	00003280 	call	328 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    21bc:	000b883a 	mov	r5,zero
    21c0:	0009883a 	mov	r4,zero
    21c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    21c8:	000b883a 	mov	r5,zero
    21cc:	0009883a 	mov	r4,zero
    21d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    21d4:	01408404 	movi	r5,528
    21d8:	0009883a 	mov	r4,zero
    21dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);
    21e0:	01401044 	movi	r5,65
    21e4:	0009883a 	mov	r4,zero
    21e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21ec:	014004c4 	movi	r5,19
    21f0:	0009883a 	mov	r4,zero
    21f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21f8:	000b883a 	mov	r5,zero
    21fc:	0009883a 	mov	r4,zero
    2200:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2204:	01414004 	movi	r5,1280
    2208:	01006c04 	movi	r4,432
    220c:	0001e900 	call	1e90 <UsbWrite>
}
    2210:	0001883a 	nop
    2214:	e037883a 	mov	sp,fp
    2218:	dfc00117 	ldw	ra,4(sp)
    221c:	df000017 	ldw	fp,0(sp)
    2220:	dec00204 	addi	sp,sp,8
    2224:	f800283a 	ret

00002228 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    2228:	defffe04 	addi	sp,sp,-8
    222c:	dfc00115 	stw	ra,4(sp)
    2230:	df000015 	stw	fp,0(sp)
    2234:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2238:	01414004 	movi	r5,1280
    223c:	01000084 	movi	r4,2
    2240:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2244:	01414304 	movi	r5,1292
    2248:	0009883a 	mov	r4,zero
    224c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2250:	01400204 	movi	r5,8
    2254:	0009883a 	mov	r4,zero
    2258:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    225c:	0140b404 	movi	r5,720
    2260:	0009883a 	mov	r4,zero
    2264:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2268:	01400044 	movi	r5,1
    226c:	0009883a 	mov	r4,zero
    2270:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2274:	014004c4 	movi	r5,19
    2278:	0009883a 	mov	r4,zero
    227c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2280:	01414504 	movi	r5,1300
    2284:	0009883a 	mov	r4,zero
    2288:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    228c:	0141a004 	movi	r5,1664
    2290:	0009883a 	mov	r4,zero
    2294:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    2298:	01404004 	movi	r5,256
    229c:	0009883a 	mov	r4,zero
    22a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    22a4:	000b883a 	mov	r5,zero
    22a8:	0009883a 	mov	r4,zero
    22ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    22b0:	01400484 	movi	r5,18
    22b4:	0009883a 	mov	r4,zero
    22b8:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    22bc:	01415104 	movi	r5,1348
    22c0:	0009883a 	mov	r4,zero
    22c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    22c8:	01400204 	movi	r5,8
    22cc:	0009883a 	mov	r4,zero
    22d0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    22d4:	0140a404 	movi	r5,656
    22d8:	0009883a 	mov	r4,zero
    22dc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    22e0:	01401044 	movi	r5,65
    22e4:	0009883a 	mov	r4,zero
    22e8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    22ec:	014004c4 	movi	r5,19
    22f0:	0009883a 	mov	r4,zero
    22f4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    22f8:	01414804 	movi	r5,1312
    22fc:	0009883a 	mov	r4,zero
    2300:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2304:	01415304 	movi	r5,1356
    2308:	0009883a 	mov	r4,zero
    230c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2310:	01400204 	movi	r5,8
    2314:	0009883a 	mov	r4,zero
    2318:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    231c:	0140a404 	movi	r5,656
    2320:	0009883a 	mov	r4,zero
    2324:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    2328:	01400044 	movi	r5,1
    232c:	0009883a 	mov	r4,zero
    2330:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2334:	014004c4 	movi	r5,19
    2338:	0009883a 	mov	r4,zero
    233c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2340:	01414b04 	movi	r5,1324
    2344:	0009883a 	mov	r4,zero
    2348:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    234c:	01415504 	movi	r5,1364
    2350:	0009883a 	mov	r4,zero
    2354:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    2358:	01400084 	movi	r5,2
    235c:	0009883a 	mov	r4,zero
    2360:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2364:	0140a404 	movi	r5,656
    2368:	0009883a 	mov	r4,zero
    236c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2370:	01401044 	movi	r5,65
    2374:	0009883a 	mov	r4,zero
    2378:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    237c:	014004c4 	movi	r5,19
    2380:	0009883a 	mov	r4,zero
    2384:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2388:	01414e04 	movi	r5,1336
    238c:	0009883a 	mov	r4,zero
    2390:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    2394:	000b883a 	mov	r5,zero
    2398:	0009883a 	mov	r4,zero
    239c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    23a0:	000b883a 	mov	r5,zero
    23a4:	0009883a 	mov	r4,zero
    23a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    23ac:	01408404 	movi	r5,528
    23b0:	0009883a 	mov	r4,zero
    23b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    23b8:	01401044 	movi	r5,65
    23bc:	0009883a 	mov	r4,zero
    23c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    23c4:	014004c4 	movi	r5,19
    23c8:	0009883a 	mov	r4,zero
    23cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    23d0:	000b883a 	mov	r5,zero
    23d4:	0009883a 	mov	r4,zero
    23d8:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    23dc:	01414004 	movi	r5,1280
    23e0:	01006c04 	movi	r4,432
    23e4:	0001e900 	call	1e90 <UsbWrite>
}
    23e8:	0001883a 	nop
    23ec:	e037883a 	mov	sp,fp
    23f0:	dfc00117 	ldw	ra,4(sp)
    23f4:	df000017 	ldw	fp,0(sp)
    23f8:	dec00204 	addi	sp,sp,8
    23fc:	f800283a 	ret

00002400 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2400:	defffe04 	addi	sp,sp,-8
    2404:	dfc00115 	stw	ra,4(sp)
    2408:	df000015 	stw	fp,0(sp)
    240c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2410:	01414004 	movi	r5,1280
    2414:	01000084 	movi	r4,2
    2418:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    241c:	01414304 	movi	r5,1292
    2420:	0009883a 	mov	r4,zero
    2424:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2428:	01400204 	movi	r5,8
    242c:	0009883a 	mov	r4,zero
    2430:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2434:	0140b404 	movi	r5,720
    2438:	0009883a 	mov	r4,zero
    243c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2440:	01400044 	movi	r5,1
    2444:	0009883a 	mov	r4,zero
    2448:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    244c:	014004c4 	movi	r5,19
    2450:	0009883a 	mov	r4,zero
    2454:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2458:	01414504 	movi	r5,1300
    245c:	0009883a 	mov	r4,zero
    2460:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2464:	0141a004 	movi	r5,1664
    2468:	0009883a 	mov	r4,zero
    246c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2470:	01408004 	movi	r5,512
    2474:	0009883a 	mov	r4,zero
    2478:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    247c:	000b883a 	mov	r5,zero
    2480:	0009883a 	mov	r4,zero
    2484:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    2488:	01400244 	movi	r5,9
    248c:	0009883a 	mov	r4,zero
    2490:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2494:	01415104 	movi	r5,1348
    2498:	0009883a 	mov	r4,zero
    249c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    24a0:	01400204 	movi	r5,8
    24a4:	0009883a 	mov	r4,zero
    24a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    24ac:	0140a404 	movi	r5,656
    24b0:	0009883a 	mov	r4,zero
    24b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    24b8:	01401044 	movi	r5,65
    24bc:	0009883a 	mov	r4,zero
    24c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    24c4:	014004c4 	movi	r5,19
    24c8:	0009883a 	mov	r4,zero
    24cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    24d0:	01414804 	movi	r5,1312
    24d4:	0009883a 	mov	r4,zero
    24d8:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    24dc:	01415304 	movi	r5,1356
    24e0:	0009883a 	mov	r4,zero
    24e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    24e8:	01400044 	movi	r5,1
    24ec:	0009883a 	mov	r4,zero
    24f0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    24f4:	0140a404 	movi	r5,656
    24f8:	0009883a 	mov	r4,zero
    24fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2500:	01400044 	movi	r5,1
    2504:	0009883a 	mov	r4,zero
    2508:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    250c:	014004c4 	movi	r5,19
    2510:	0009883a 	mov	r4,zero
    2514:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2518:	01414b04 	movi	r5,1324
    251c:	0009883a 	mov	r4,zero
    2520:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2524:	000b883a 	mov	r5,zero
    2528:	0009883a 	mov	r4,zero
    252c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2530:	000b883a 	mov	r5,zero
    2534:	0009883a 	mov	r4,zero
    2538:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    253c:	01408404 	movi	r5,528
    2540:	0009883a 	mov	r4,zero
    2544:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2548:	01401044 	movi	r5,65
    254c:	0009883a 	mov	r4,zero
    2550:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2554:	014004c4 	movi	r5,19
    2558:	0009883a 	mov	r4,zero
    255c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2560:	000b883a 	mov	r5,zero
    2564:	0009883a 	mov	r4,zero
    2568:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    256c:	01414004 	movi	r5,1280
    2570:	01006c04 	movi	r4,432
    2574:	0001e900 	call	1e90 <UsbWrite>
}
    2578:	0001883a 	nop
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    2590:	defffe04 	addi	sp,sp,-8
    2594:	dfc00115 	stw	ra,4(sp)
    2598:	df000015 	stw	fp,0(sp)
    259c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    25a0:	01414004 	movi	r5,1280
    25a4:	01000084 	movi	r4,2
    25a8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    25ac:	01414304 	movi	r5,1292
    25b0:	0009883a 	mov	r4,zero
    25b4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    25b8:	01400204 	movi	r5,8
    25bc:	0009883a 	mov	r4,zero
    25c0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    25c4:	0140b404 	movi	r5,720
    25c8:	0009883a 	mov	r4,zero
    25cc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    25d0:	01400044 	movi	r5,1
    25d4:	0009883a 	mov	r4,zero
    25d8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    25dc:	014004c4 	movi	r5,19
    25e0:	0009883a 	mov	r4,zero
    25e4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    25e8:	01414504 	movi	r5,1300
    25ec:	0009883a 	mov	r4,zero
    25f0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    25f4:	0141a004 	movi	r5,1664
    25f8:	0009883a 	mov	r4,zero
    25fc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2600:	01408004 	movi	r5,512
    2604:	0009883a 	mov	r4,zero
    2608:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    260c:	000b883a 	mov	r5,zero
    2610:	0009883a 	mov	r4,zero
    2614:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2618:	01403fc4 	movi	r5,255
    261c:	0009883a 	mov	r4,zero
    2620:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2624:	01415704 	movi	r5,1372
    2628:	0009883a 	mov	r4,zero
    262c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2630:	01400204 	movi	r5,8
    2634:	0009883a 	mov	r4,zero
    2638:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    263c:	0140a404 	movi	r5,656
    2640:	0009883a 	mov	r4,zero
    2644:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2648:	01401044 	movi	r5,65
    264c:	0009883a 	mov	r4,zero
    2650:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2654:	014004c4 	movi	r5,19
    2658:	0009883a 	mov	r4,zero
    265c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2660:	01414804 	movi	r5,1312
    2664:	0009883a 	mov	r4,zero
    2668:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    266c:	01415904 	movi	r5,1380
    2670:	0009883a 	mov	r4,zero
    2674:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2678:	01400204 	movi	r5,8
    267c:	0009883a 	mov	r4,zero
    2680:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2684:	0140a404 	movi	r5,656
    2688:	0009883a 	mov	r4,zero
    268c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2690:	01400044 	movi	r5,1
    2694:	0009883a 	mov	r4,zero
    2698:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    269c:	014004c4 	movi	r5,19
    26a0:	0009883a 	mov	r4,zero
    26a4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    26a8:	01414b04 	movi	r5,1324
    26ac:	0009883a 	mov	r4,zero
    26b0:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    26b4:	01415b04 	movi	r5,1388
    26b8:	0009883a 	mov	r4,zero
    26bc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    26c0:	01400204 	movi	r5,8
    26c4:	0009883a 	mov	r4,zero
    26c8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    26cc:	0140a404 	movi	r5,656
    26d0:	0009883a 	mov	r4,zero
    26d4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    26d8:	01401044 	movi	r5,65
    26dc:	0009883a 	mov	r4,zero
    26e0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    26e4:	014004c4 	movi	r5,19
    26e8:	0009883a 	mov	r4,zero
    26ec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    26f0:	01414e04 	movi	r5,1336
    26f4:	0009883a 	mov	r4,zero
    26f8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    26fc:	01415d04 	movi	r5,1396
    2700:	0009883a 	mov	r4,zero
    2704:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2708:	01400204 	movi	r5,8
    270c:	0009883a 	mov	r4,zero
    2710:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2714:	0140a404 	movi	r5,656
    2718:	0009883a 	mov	r4,zero
    271c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2720:	01400044 	movi	r5,1
    2724:	0009883a 	mov	r4,zero
    2728:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    272c:	014004c4 	movi	r5,19
    2730:	0009883a 	mov	r4,zero
    2734:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2738:	01415104 	movi	r5,1348
    273c:	0009883a 	mov	r4,zero
    2740:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2744:	01415f04 	movi	r5,1404
    2748:	0009883a 	mov	r4,zero
    274c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2750:	01400084 	movi	r5,2
    2754:	0009883a 	mov	r4,zero
    2758:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    275c:	0140a404 	movi	r5,656
    2760:	0009883a 	mov	r4,zero
    2764:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2768:	01401044 	movi	r5,65
    276c:	0009883a 	mov	r4,zero
    2770:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2774:	014004c4 	movi	r5,19
    2778:	0009883a 	mov	r4,zero
    277c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2780:	01415404 	movi	r5,1360
    2784:	0009883a 	mov	r4,zero
    2788:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    278c:	000b883a 	mov	r5,zero
    2790:	0009883a 	mov	r4,zero
    2794:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2798:	000b883a 	mov	r5,zero
    279c:	0009883a 	mov	r4,zero
    27a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    27a4:	01408404 	movi	r5,528
    27a8:	0009883a 	mov	r4,zero
    27ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    27b0:	01401044 	movi	r5,65
    27b4:	0009883a 	mov	r4,zero
    27b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    27bc:	014004c4 	movi	r5,19
    27c0:	0009883a 	mov	r4,zero
    27c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    27c8:	000b883a 	mov	r5,zero
    27cc:	0009883a 	mov	r4,zero
    27d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    27d4:	01414004 	movi	r5,1280
    27d8:	01006c04 	movi	r4,432
    27dc:	0001e900 	call	1e90 <UsbWrite>
}
    27e0:	0001883a 	nop
    27e4:	e037883a 	mov	sp,fp
    27e8:	dfc00117 	ldw	ra,4(sp)
    27ec:	df000017 	ldw	fp,0(sp)
    27f0:	dec00204 	addi	sp,sp,8
    27f4:	f800283a 	ret

000027f8 <UsbSetConfig>:

void UsbSetConfig()
{
    27f8:	defffe04 	addi	sp,sp,-8
    27fc:	dfc00115 	stw	ra,4(sp)
    2800:	df000015 	stw	fp,0(sp)
    2804:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2808:	01414004 	movi	r5,1280
    280c:	01000084 	movi	r4,2
    2810:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2814:	01414304 	movi	r5,1292
    2818:	0009883a 	mov	r4,zero
    281c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2820:	01400204 	movi	r5,8
    2824:	0009883a 	mov	r4,zero
    2828:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    282c:	0140b404 	movi	r5,720
    2830:	0009883a 	mov	r4,zero
    2834:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2838:	01400044 	movi	r5,1
    283c:	0009883a 	mov	r4,zero
    2840:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2844:	014004c4 	movi	r5,19
    2848:	0009883a 	mov	r4,zero
    284c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2850:	01414504 	movi	r5,1300
    2854:	0009883a 	mov	r4,zero
    2858:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    285c:	01424004 	movi	r5,2304
    2860:	0009883a 	mov	r4,zero
    2864:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2868:	01400044 	movi	r5,1
    286c:	0009883a 	mov	r4,zero
    2870:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2874:	000b883a 	mov	r5,zero
    2878:	0009883a 	mov	r4,zero
    287c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2880:	000b883a 	mov	r5,zero
    2884:	0009883a 	mov	r4,zero
    2888:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    288c:	000b883a 	mov	r5,zero
    2890:	0009883a 	mov	r4,zero
    2894:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2898:	000b883a 	mov	r5,zero
    289c:	0009883a 	mov	r4,zero
    28a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    28a4:	0140a404 	movi	r5,656
    28a8:	0009883a 	mov	r4,zero
    28ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    28b0:	01401044 	movi	r5,65
    28b4:	0009883a 	mov	r4,zero
    28b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    28bc:	014004c4 	movi	r5,19
    28c0:	0009883a 	mov	r4,zero
    28c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    28c8:	000b883a 	mov	r5,zero
    28cc:	0009883a 	mov	r4,zero
    28d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    28d4:	01414004 	movi	r5,1280
    28d8:	01006c04 	movi	r4,432
    28dc:	0001e900 	call	1e90 <UsbWrite>

}
    28e0:	0001883a 	nop
    28e4:	e037883a 	mov	sp,fp
    28e8:	dfc00117 	ldw	ra,4(sp)
    28ec:	df000017 	ldw	fp,0(sp)
    28f0:	dec00204 	addi	sp,sp,8
    28f4:	f800283a 	ret

000028f8 <UsbClassRequest>:

void UsbClassRequest()
{
    28f8:	defffe04 	addi	sp,sp,-8
    28fc:	dfc00115 	stw	ra,4(sp)
    2900:	df000015 	stw	fp,0(sp)
    2904:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2908:	01414004 	movi	r5,1280
    290c:	01000084 	movi	r4,2
    2910:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2914:	01414304 	movi	r5,1292
    2918:	0009883a 	mov	r4,zero
    291c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2920:	01400204 	movi	r5,8
    2924:	0009883a 	mov	r4,zero
    2928:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    292c:	0140b404 	movi	r5,720
    2930:	0009883a 	mov	r4,zero
    2934:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2938:	01400044 	movi	r5,1
    293c:	0009883a 	mov	r4,zero
    2940:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2944:	014004c4 	movi	r5,19
    2948:	0009883a 	mov	r4,zero
    294c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2950:	01414504 	movi	r5,1300
    2954:	0009883a 	mov	r4,zero
    2958:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    295c:	01428844 	movi	r5,2593
    2960:	0009883a 	mov	r4,zero
    2964:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2968:	000b883a 	mov	r5,zero
    296c:	0009883a 	mov	r4,zero
    2970:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2974:	000b883a 	mov	r5,zero
    2978:	0009883a 	mov	r4,zero
    297c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2980:	000b883a 	mov	r5,zero
    2984:	0009883a 	mov	r4,zero
    2988:	00003280 	call	328 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    298c:	000b883a 	mov	r5,zero
    2990:	0009883a 	mov	r4,zero
    2994:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2998:	000b883a 	mov	r5,zero
    299c:	0009883a 	mov	r4,zero
    29a0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    29a4:	0140a404 	movi	r5,656
    29a8:	0009883a 	mov	r4,zero
    29ac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    29b0:	01401044 	movi	r5,65
    29b4:	0009883a 	mov	r4,zero
    29b8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    29bc:	014004c4 	movi	r5,19
    29c0:	0009883a 	mov	r4,zero
    29c4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);
    29c8:	000b883a 	mov	r5,zero
    29cc:	0009883a 	mov	r4,zero
    29d0:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    29d4:	01414004 	movi	r5,1280
    29d8:	01006c04 	movi	r4,432
    29dc:	0001e900 	call	1e90 <UsbWrite>
}
    29e0:	0001883a 	nop
    29e4:	e037883a 	mov	sp,fp
    29e8:	dfc00117 	ldw	ra,4(sp)
    29ec:	df000017 	ldw	fp,0(sp)
    29f0:	dec00204 	addi	sp,sp,8
    29f4:	f800283a 	ret

000029f8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    29f8:	defffe04 	addi	sp,sp,-8
    29fc:	dfc00115 	stw	ra,4(sp)
    2a00:	df000015 	stw	fp,0(sp)
    2a04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2a08:	01414004 	movi	r5,1280
    2a0c:	01000084 	movi	r4,2
    2a10:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2a14:	01414304 	movi	r5,1292
    2a18:	0009883a 	mov	r4,zero
    2a1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2a20:	01400204 	movi	r5,8
    2a24:	0009883a 	mov	r4,zero
    2a28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2a2c:	0140b404 	movi	r5,720
    2a30:	0009883a 	mov	r4,zero
    2a34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2a38:	01400044 	movi	r5,1
    2a3c:	0009883a 	mov	r4,zero
    2a40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2a44:	014004c4 	movi	r5,19
    2a48:	0009883a 	mov	r4,zero
    2a4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a50:	01414504 	movi	r5,1300
    2a54:	0009883a 	mov	r4,zero
    2a58:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2a5c:	0141a044 	movi	r5,1665
    2a60:	0009883a 	mov	r4,zero
    2a64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2a68:	01484004 	movi	r5,8448
    2a6c:	0009883a 	mov	r4,zero
    2a70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2a74:	000b883a 	mov	r5,zero
    2a78:	0009883a 	mov	r4,zero
    2a7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2a80:	01401ec4 	movi	r5,123
    2a84:	0009883a 	mov	r4,zero
    2a88:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2a8c:	01415104 	movi	r5,1348
    2a90:	0009883a 	mov	r4,zero
    2a94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2a98:	01400204 	movi	r5,8
    2a9c:	0009883a 	mov	r4,zero
    2aa0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2aa4:	0140a404 	movi	r5,656
    2aa8:	0009883a 	mov	r4,zero
    2aac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2ab0:	01401044 	movi	r5,65
    2ab4:	0009883a 	mov	r4,zero
    2ab8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2abc:	014004c4 	movi	r5,19
    2ac0:	0009883a 	mov	r4,zero
    2ac4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2ac8:	01414804 	movi	r5,1312
    2acc:	0009883a 	mov	r4,zero
    2ad0:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2ad4:	000b883a 	mov	r5,zero
    2ad8:	0009883a 	mov	r4,zero
    2adc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2ae0:	000b883a 	mov	r5,zero
    2ae4:	0009883a 	mov	r4,zero
    2ae8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2aec:	01408404 	movi	r5,528
    2af0:	0009883a 	mov	r4,zero
    2af4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2af8:	01401044 	movi	r5,65
    2afc:	0009883a 	mov	r4,zero
    2b00:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b04:	014004c4 	movi	r5,19
    2b08:	0009883a 	mov	r4,zero
    2b0c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2b10:	000b883a 	mov	r5,zero
    2b14:	0009883a 	mov	r4,zero
    2b18:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2b1c:	01414004 	movi	r5,1280
    2b20:	01006c04 	movi	r4,432
    2b24:	0001e900 	call	1e90 <UsbWrite>

}
    2b28:	0001883a 	nop
    2b2c:	e037883a 	mov	sp,fp
    2b30:	dfc00117 	ldw	ra,4(sp)
    2b34:	df000017 	ldw	fp,0(sp)
    2b38:	dec00204 	addi	sp,sp,8
    2b3c:	f800283a 	ret

00002b40 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2b40:	defffe04 	addi	sp,sp,-8
    2b44:	dfc00115 	stw	ra,4(sp)
    2b48:	df000015 	stw	fp,0(sp)
    2b4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2b50:	01414004 	movi	r5,1280
    2b54:	01000084 	movi	r4,2
    2b58:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2b5c:	01414304 	movi	r5,1292
    2b60:	0009883a 	mov	r4,zero
    2b64:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2b68:	01400204 	movi	r5,8
    2b6c:	0009883a 	mov	r4,zero
    2b70:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2b74:	0140b404 	movi	r5,720
    2b78:	0009883a 	mov	r4,zero
    2b7c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2b80:	01400044 	movi	r5,1
    2b84:	0009883a 	mov	r4,zero
    2b88:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2b8c:	014004c4 	movi	r5,19
    2b90:	0009883a 	mov	r4,zero
    2b94:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2b98:	01414504 	movi	r5,1300
    2b9c:	0009883a 	mov	r4,zero
    2ba0:	00003280 	call	328 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2ba4:	0141a044 	movi	r5,1665
    2ba8:	0009883a 	mov	r4,zero
    2bac:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2bb0:	01488004 	movi	r5,8704
    2bb4:	0009883a 	mov	r4,zero
    2bb8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2bbc:	000b883a 	mov	r5,zero
    2bc0:	0009883a 	mov	r4,zero
    2bc4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2bc8:	01401ec4 	movi	r5,123
    2bcc:	0009883a 	mov	r4,zero
    2bd0:	00003280 	call	328 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2bd4:	01416004 	movi	r5,1408
    2bd8:	0009883a 	mov	r4,zero
    2bdc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2be0:	01400204 	movi	r5,8
    2be4:	0009883a 	mov	r4,zero
    2be8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2bec:	0140a404 	movi	r5,656
    2bf0:	0009883a 	mov	r4,zero
    2bf4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2bf8:	01401044 	movi	r5,65
    2bfc:	0009883a 	mov	r4,zero
    2c00:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2c04:	014004c4 	movi	r5,19
    2c08:	0009883a 	mov	r4,zero
    2c0c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2c10:	01414804 	movi	r5,1312
    2c14:	0009883a 	mov	r4,zero
    2c18:	00003280 	call	328 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2c1c:	01416204 	movi	r5,1416
    2c20:	0009883a 	mov	r4,zero
    2c24:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2c28:	01400204 	movi	r5,8
    2c2c:	0009883a 	mov	r4,zero
    2c30:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2c34:	0140a404 	movi	r5,656
    2c38:	0009883a 	mov	r4,zero
    2c3c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2c40:	01400044 	movi	r5,1
    2c44:	0009883a 	mov	r4,zero
    2c48:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2c4c:	014004c4 	movi	r5,19
    2c50:	0009883a 	mov	r4,zero
    2c54:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2c58:	01414b04 	movi	r5,1324
    2c5c:	0009883a 	mov	r4,zero
    2c60:	00003280 	call	328 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2c64:	01416404 	movi	r5,1424
    2c68:	0009883a 	mov	r4,zero
    2c6c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2c70:	01400204 	movi	r5,8
    2c74:	0009883a 	mov	r4,zero
    2c78:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2c7c:	0140a404 	movi	r5,656
    2c80:	0009883a 	mov	r4,zero
    2c84:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2c88:	01401044 	movi	r5,65
    2c8c:	0009883a 	mov	r4,zero
    2c90:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2c94:	014004c4 	movi	r5,19
    2c98:	0009883a 	mov	r4,zero
    2c9c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2ca0:	01414e04 	movi	r5,1336
    2ca4:	0009883a 	mov	r4,zero
    2ca8:	00003280 	call	328 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2cac:	01416604 	movi	r5,1432
    2cb0:	0009883a 	mov	r4,zero
    2cb4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2cb8:	01400204 	movi	r5,8
    2cbc:	0009883a 	mov	r4,zero
    2cc0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2cc4:	0140a404 	movi	r5,656
    2cc8:	0009883a 	mov	r4,zero
    2ccc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2cd0:	01400044 	movi	r5,1
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2cdc:	014004c4 	movi	r5,19
    2ce0:	0009883a 	mov	r4,zero
    2ce4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2ce8:	01415104 	movi	r5,1348
    2cec:	0009883a 	mov	r4,zero
    2cf0:	00003280 	call	328 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2cf4:	01416804 	movi	r5,1440
    2cf8:	0009883a 	mov	r4,zero
    2cfc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2d00:	01400204 	movi	r5,8
    2d04:	0009883a 	mov	r4,zero
    2d08:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2d0c:	0140a404 	movi	r5,656
    2d10:	0009883a 	mov	r4,zero
    2d14:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2d18:	01401044 	movi	r5,65
    2d1c:	0009883a 	mov	r4,zero
    2d20:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2d24:	014004c4 	movi	r5,19
    2d28:	0009883a 	mov	r4,zero
    2d2c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2d30:	01415404 	movi	r5,1360
    2d34:	0009883a 	mov	r4,zero
    2d38:	00003280 	call	328 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2d3c:	01416a04 	movi	r5,1448
    2d40:	0009883a 	mov	r4,zero
    2d44:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2d48:	01400204 	movi	r5,8
    2d4c:	0009883a 	mov	r4,zero
    2d50:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2d54:	0140a404 	movi	r5,656
    2d58:	0009883a 	mov	r4,zero
    2d5c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2d60:	01400044 	movi	r5,1
    2d64:	0009883a 	mov	r4,zero
    2d68:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2d6c:	014004c4 	movi	r5,19
    2d70:	0009883a 	mov	r4,zero
    2d74:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2d78:	01415704 	movi	r5,1372
    2d7c:	0009883a 	mov	r4,zero
    2d80:	00003280 	call	328 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2d84:	01416c04 	movi	r5,1456
    2d88:	0009883a 	mov	r4,zero
    2d8c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2d90:	01400204 	movi	r5,8
    2d94:	0009883a 	mov	r4,zero
    2d98:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2d9c:	0140a404 	movi	r5,656
    2da0:	0009883a 	mov	r4,zero
    2da4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2da8:	01401044 	movi	r5,65
    2dac:	0009883a 	mov	r4,zero
    2db0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2db4:	014004c4 	movi	r5,19
    2db8:	0009883a 	mov	r4,zero
    2dbc:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2dc0:	01415a04 	movi	r5,1384
    2dc4:	0009883a 	mov	r4,zero
    2dc8:	00003280 	call	328 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2dcc:	01416e04 	movi	r5,1464
    2dd0:	0009883a 	mov	r4,zero
    2dd4:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2dd8:	014000c4 	movi	r5,3
    2ddc:	0009883a 	mov	r4,zero
    2de0:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2de4:	0140a404 	movi	r5,656
    2de8:	0009883a 	mov	r4,zero
    2dec:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2df0:	01400044 	movi	r5,1
    2df4:	0009883a 	mov	r4,zero
    2df8:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2dfc:	014004c4 	movi	r5,19
    2e00:	0009883a 	mov	r4,zero
    2e04:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2e08:	01415d04 	movi	r5,1396
    2e0c:	0009883a 	mov	r4,zero
    2e10:	00003280 	call	328 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2e14:	000b883a 	mov	r5,zero
    2e18:	0009883a 	mov	r4,zero
    2e1c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2e20:	000b883a 	mov	r5,zero
    2e24:	0009883a 	mov	r4,zero
    2e28:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2e2c:	01408404 	movi	r5,528
    2e30:	0009883a 	mov	r4,zero
    2e34:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2e38:	01401044 	movi	r5,65
    2e3c:	0009883a 	mov	r4,zero
    2e40:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2e44:	014004c4 	movi	r5,19
    2e48:	0009883a 	mov	r4,zero
    2e4c:	00003280 	call	328 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2e50:	000b883a 	mov	r5,zero
    2e54:	0009883a 	mov	r4,zero
    2e58:	00003280 	call	328 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2e5c:	01414004 	movi	r5,1280
    2e60:	01006c04 	movi	r4,432
    2e64:	0001e900 	call	1e90 <UsbWrite>

}
    2e68:	0001883a 	nop
    2e6c:	e037883a 	mov	sp,fp
    2e70:	dfc00117 	ldw	ra,4(sp)
    2e74:	df000017 	ldw	fp,0(sp)
    2e78:	dec00204 	addi	sp,sp,8
    2e7c:	f800283a 	ret

00002e80 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2e80:	defffd04 	addi	sp,sp,-12
    2e84:	dfc00215 	stw	ra,8(sp)
    2e88:	df000115 	stw	fp,4(sp)
    2e8c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2e90:	01005104 	movi	r4,324
    2e94:	0001ee80 	call	1ee8 <UsbRead>
    2e98:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2e9c:	000b883a 	mov	r5,zero
    2ea0:	01005104 	movi	r4,324
    2ea4:	0001e900 	call	1e90 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2ea8:	00000d06 	br	2ee0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2eac:	e0bfff0b 	ldhu	r2,-4(fp)
    2eb0:	10000526 	beq	r2,zero,2ec8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2eb4:	e0bfff0b 	ldhu	r2,-4(fp)
    2eb8:	100b883a 	mov	r5,r2
    2ebc:	01000074 	movhi	r4,1
    2ec0:	21190c04 	addi	r4,r4,25648
    2ec4:	00079d80 	call	79d8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2ec8:	01005104 	movi	r4,324
    2ecc:	0001ee80 	call	1ee8 <UsbRead>
    2ed0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2ed4:	000b883a 	mov	r5,zero
    2ed8:	01005104 	movi	r4,324
    2edc:	0001e900 	call	1e90 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2ee0:	e0bfff0b 	ldhu	r2,-4(fp)
    2ee4:	10840018 	cmpnei	r2,r2,4096
    2ee8:	103ff01e 	bne	r2,zero,2eac <__alt_exception_stack_pointer+0xf8002eac>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2eec:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2ef0:	e037883a 	mov	sp,fp
    2ef4:	dfc00117 	ldw	ra,4(sp)
    2ef8:	df000017 	ldw	fp,0(sp)
    2efc:	dec00204 	addi	sp,sp,8
    2f00:	f800283a 	ret

00002f04 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2f04:	defffd04 	addi	sp,sp,-12
    2f08:	dfc00215 	stw	ra,8(sp)
    2f0c:	df000115 	stw	fp,4(sp)
    2f10:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2f14:	010000c4 	movi	r4,3
    2f18:	00003b00 	call	3b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2f1c:	01005104 	movi	r4,324
    2f20:	0001ee80 	call	1ee8 <UsbRead>
    2f24:	10bfffcc 	andi	r2,r2,65535
    2f28:	10840018 	cmpnei	r2,r2,4096
    2f2c:	1000091e 	bne	r2,zero,2f54 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2f30:	000b883a 	mov	r5,zero
    2f34:	01005104 	movi	r4,324
    2f38:	0001e900 	call	1e90 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2f3c:	0001883a 	nop
    2f40:	010000c4 	movi	r4,3
    2f44:	00003b00 	call	3b0 <IO_read>
    2f48:	10bfffcc 	andi	r2,r2,65535
    2f4c:	1080040c 	andi	r2,r2,16
    2f50:	103ffb26 	beq	r2,zero,2f40 <__alt_exception_stack_pointer+0xf8002f40>
		{
		}
	}
	usleep(1000);
    2f54:	0100fa04 	movi	r4,1000
    2f58:	0012c8c0 	call	12c8c <usleep>
	IO_write(HPI_ADDR,0x0508);
    2f5c:	01414204 	movi	r5,1288
    2f60:	01000084 	movi	r4,2
    2f64:	00003280 	call	328 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2f68:	0009883a 	mov	r4,zero
    2f6c:	00003b00 	call	3b0 <IO_read>
    2f70:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2f74:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2f78:	e037883a 	mov	sp,fp
    2f7c:	dfc00117 	ldw	ra,4(sp)
    2f80:	df000017 	ldw	fp,0(sp)
    2f84:	dec00204 	addi	sp,sp,8
    2f88:	f800283a 	ret

00002f8c <UsbPrintMem>:


void UsbPrintMem()
{
    2f8c:	defffc04 	addi	sp,sp,-16
    2f90:	dfc00315 	stw	ra,12(sp)
    2f94:	df000215 	stw	fp,8(sp)
    2f98:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2f9c:	01414004 	movi	r5,1280
    2fa0:	01000084 	movi	r4,2
    2fa4:	00003280 	call	328 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2fa8:	e03ffe15 	stw	zero,-8(fp)
    2fac:	00000e06 	br	2fe8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2fb0:	0009883a 	mov	r4,zero
    2fb4:	00003b00 	call	3b0 <IO_read>
    2fb8:	10bfffcc 	andi	r2,r2,65535
    2fbc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2fc0:	e0bffe17 	ldw	r2,-8(fp)
    2fc4:	10814004 	addi	r2,r2,1280
    2fc8:	e1bfff17 	ldw	r6,-4(fp)
    2fcc:	100b883a 	mov	r5,r2
    2fd0:	01000074 	movhi	r4,1
    2fd4:	21191404 	addi	r4,r4,25680
    2fd8:	00079d80 	call	79d8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2fdc:	e0bffe17 	ldw	r2,-8(fp)
    2fe0:	10800084 	addi	r2,r2,2
    2fe4:	e0bffe15 	stw	r2,-8(fp)
    2fe8:	e0bffe17 	ldw	r2,-8(fp)
    2fec:	10803250 	cmplti	r2,r2,201
    2ff0:	103fef1e 	bne	r2,zero,2fb0 <__alt_exception_stack_pointer+0xf8002fb0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2ff4:	0001883a 	nop
    2ff8:	e037883a 	mov	sp,fp
    2ffc:	dfc00117 	ldw	ra,4(sp)
    3000:	df000017 	ldw	fp,0(sp)
    3004:	dec00204 	addi	sp,sp,8
    3008:	f800283a 	ret

0000300c <cos>:
    300c:	00a00034 	movhi	r2,32768
    3010:	defffa04 	addi	sp,sp,-24
    3014:	10bfffc4 	addi	r2,r2,-1
    3018:	00cffa74 	movhi	r3,16361
    301c:	dfc00515 	stw	ra,20(sp)
    3020:	2884703a 	and	r2,r5,r2
    3024:	18c87ec4 	addi	r3,r3,8699
    3028:	1880180e 	bge	r3,r2,308c <cos+0x80>
    302c:	00dffc34 	movhi	r3,32752
    3030:	18ffffc4 	addi	r3,r3,-1
    3034:	1880060e 	bge	r3,r2,3050 <cos+0x44>
    3038:	280f883a 	mov	r7,r5
    303c:	200d883a 	mov	r6,r4
    3040:	000666c0 	call	666c <__subdf3>
    3044:	dfc00517 	ldw	ra,20(sp)
    3048:	dec00604 	addi	sp,sp,24
    304c:	f800283a 	ret
    3050:	d9800104 	addi	r6,sp,4
    3054:	00031e80 	call	31e8 <__ieee754_rem_pio2>
    3058:	108000cc 	andi	r2,r2,3
    305c:	00c00044 	movi	r3,1
    3060:	10c01726 	beq	r2,r3,30c0 <cos+0xb4>
    3064:	01000084 	movi	r4,2
    3068:	11000e26 	beq	r2,r4,30a4 <cos+0x98>
    306c:	10001c26 	beq	r2,zero,30e0 <cos+0xd4>
    3070:	d9800317 	ldw	r6,12(sp)
    3074:	d9c00417 	ldw	r7,16(sp)
    3078:	d9000117 	ldw	r4,4(sp)
    307c:	d9400217 	ldw	r5,8(sp)
    3080:	d8c00015 	stw	r3,0(sp)
    3084:	0004b900 	call	4b90 <__kernel_sin>
    3088:	003fee06 	br	3044 <__alt_exception_stack_pointer+0xf8003044>
    308c:	000d883a 	mov	r6,zero
    3090:	000f883a 	mov	r7,zero
    3094:	00039540 	call	3954 <__kernel_cos>
    3098:	dfc00517 	ldw	ra,20(sp)
    309c:	dec00604 	addi	sp,sp,24
    30a0:	f800283a 	ret
    30a4:	d9800317 	ldw	r6,12(sp)
    30a8:	d9c00417 	ldw	r7,16(sp)
    30ac:	d9000117 	ldw	r4,4(sp)
    30b0:	d9400217 	ldw	r5,8(sp)
    30b4:	00039540 	call	3954 <__kernel_cos>
    30b8:	18e0003c 	xorhi	r3,r3,32768
    30bc:	003fe106 	br	3044 <__alt_exception_stack_pointer+0xf8003044>
    30c0:	d9800317 	ldw	r6,12(sp)
    30c4:	d9c00417 	ldw	r7,16(sp)
    30c8:	d9000117 	ldw	r4,4(sp)
    30cc:	d9400217 	ldw	r5,8(sp)
    30d0:	d8800015 	stw	r2,0(sp)
    30d4:	0004b900 	call	4b90 <__kernel_sin>
    30d8:	18e0003c 	xorhi	r3,r3,32768
    30dc:	003fd906 	br	3044 <__alt_exception_stack_pointer+0xf8003044>
    30e0:	d9800317 	ldw	r6,12(sp)
    30e4:	d9c00417 	ldw	r7,16(sp)
    30e8:	d9000117 	ldw	r4,4(sp)
    30ec:	d9400217 	ldw	r5,8(sp)
    30f0:	00039540 	call	3954 <__kernel_cos>
    30f4:	003fd306 	br	3044 <__alt_exception_stack_pointer+0xf8003044>

000030f8 <sin>:
    30f8:	00a00034 	movhi	r2,32768
    30fc:	defffa04 	addi	sp,sp,-24
    3100:	10bfffc4 	addi	r2,r2,-1
    3104:	00cffa74 	movhi	r3,16361
    3108:	dfc00515 	stw	ra,20(sp)
    310c:	2884703a 	and	r2,r5,r2
    3110:	18c87ec4 	addi	r3,r3,8699
    3114:	1880180e 	bge	r3,r2,3178 <sin+0x80>
    3118:	00dffc34 	movhi	r3,32752
    311c:	18ffffc4 	addi	r3,r3,-1
    3120:	1880060e 	bge	r3,r2,313c <sin+0x44>
    3124:	280f883a 	mov	r7,r5
    3128:	200d883a 	mov	r6,r4
    312c:	000666c0 	call	666c <__subdf3>
    3130:	dfc00517 	ldw	ra,20(sp)
    3134:	dec00604 	addi	sp,sp,24
    3138:	f800283a 	ret
    313c:	d9800104 	addi	r6,sp,4
    3140:	00031e80 	call	31e8 <__ieee754_rem_pio2>
    3144:	108000cc 	andi	r2,r2,3
    3148:	00c00044 	movi	r3,1
    314c:	10c01926 	beq	r2,r3,31b4 <sin+0xbc>
    3150:	01000084 	movi	r4,2
    3154:	11000f26 	beq	r2,r4,3194 <sin+0x9c>
    3158:	10001c26 	beq	r2,zero,31cc <sin+0xd4>
    315c:	d9800317 	ldw	r6,12(sp)
    3160:	d9c00417 	ldw	r7,16(sp)
    3164:	d9000117 	ldw	r4,4(sp)
    3168:	d9400217 	ldw	r5,8(sp)
    316c:	00039540 	call	3954 <__kernel_cos>
    3170:	18e0003c 	xorhi	r3,r3,32768
    3174:	003fee06 	br	3130 <__alt_exception_stack_pointer+0xf8003130>
    3178:	d8000015 	stw	zero,0(sp)
    317c:	000d883a 	mov	r6,zero
    3180:	000f883a 	mov	r7,zero
    3184:	0004b900 	call	4b90 <__kernel_sin>
    3188:	dfc00517 	ldw	ra,20(sp)
    318c:	dec00604 	addi	sp,sp,24
    3190:	f800283a 	ret
    3194:	d9800317 	ldw	r6,12(sp)
    3198:	d9c00417 	ldw	r7,16(sp)
    319c:	d9000117 	ldw	r4,4(sp)
    31a0:	d9400217 	ldw	r5,8(sp)
    31a4:	d8c00015 	stw	r3,0(sp)
    31a8:	0004b900 	call	4b90 <__kernel_sin>
    31ac:	18e0003c 	xorhi	r3,r3,32768
    31b0:	003fdf06 	br	3130 <__alt_exception_stack_pointer+0xf8003130>
    31b4:	d9800317 	ldw	r6,12(sp)
    31b8:	d9c00417 	ldw	r7,16(sp)
    31bc:	d9000117 	ldw	r4,4(sp)
    31c0:	d9400217 	ldw	r5,8(sp)
    31c4:	00039540 	call	3954 <__kernel_cos>
    31c8:	003fd906 	br	3130 <__alt_exception_stack_pointer+0xf8003130>
    31cc:	d9800317 	ldw	r6,12(sp)
    31d0:	d9c00417 	ldw	r7,16(sp)
    31d4:	d9000117 	ldw	r4,4(sp)
    31d8:	d9400217 	ldw	r5,8(sp)
    31dc:	d8c00015 	stw	r3,0(sp)
    31e0:	0004b900 	call	4b90 <__kernel_sin>
    31e4:	003fd206 	br	3130 <__alt_exception_stack_pointer+0xf8003130>

000031e8 <__ieee754_rem_pio2>:
    31e8:	02200034 	movhi	r8,32768
    31ec:	deffea04 	addi	sp,sp,-88
    31f0:	423fffc4 	addi	r8,r8,-1
    31f4:	00cffa74 	movhi	r3,16361
    31f8:	ddc01315 	stw	r23,76(sp)
    31fc:	dc400d15 	stw	r17,52(sp)
    3200:	dfc01515 	stw	ra,84(sp)
    3204:	df001415 	stw	fp,80(sp)
    3208:	dd801215 	stw	r22,72(sp)
    320c:	dd401115 	stw	r21,68(sp)
    3210:	dd001015 	stw	r20,64(sp)
    3214:	dcc00f15 	stw	r19,60(sp)
    3218:	dc800e15 	stw	r18,56(sp)
    321c:	dc000c15 	stw	r16,48(sp)
    3220:	2a2e703a 	and	r23,r5,r8
    3224:	18c87ec4 	addi	r3,r3,8699
    3228:	2823883a 	mov	r17,r5
    322c:	1dc0790e 	bge	r3,r23,3414 <__ieee754_rem_pio2+0x22c>
    3230:	009000f4 	movhi	r2,16387
    3234:	10b65ec4 	addi	r2,r2,-9861
    3238:	3021883a 	mov	r16,r6
    323c:	2027883a 	mov	r19,r4
    3240:	15c02316 	blt	r2,r23,32d0 <__ieee754_rem_pio2+0xe8>
    3244:	01cffe74 	movhi	r7,16377
    3248:	39c87ec4 	addi	r7,r7,8699
    324c:	01951034 	movhi	r6,21568
    3250:	01417a0e 	bge	zero,r5,383c <__ieee754_rem_pio2+0x654>
    3254:	000666c0 	call	666c <__subdf3>
    3258:	1025883a 	mov	r18,r2
    325c:	008ffe74 	movhi	r2,16377
    3260:	10887ec4 	addi	r2,r2,8699
    3264:	1823883a 	mov	r17,r3
    3268:	b8808426 	beq	r23,r2,347c <__ieee754_rem_pio2+0x294>
    326c:	018698b4 	movhi	r6,6754
    3270:	01cf7474 	movhi	r7,15825
    3274:	3198cc44 	addi	r6,r6,25393
    3278:	39ed1844 	addi	r7,r7,-19359
    327c:	9009883a 	mov	r4,r18
    3280:	180b883a 	mov	r5,r3
    3284:	000666c0 	call	666c <__subdf3>
    3288:	100d883a 	mov	r6,r2
    328c:	180f883a 	mov	r7,r3
    3290:	9009883a 	mov	r4,r18
    3294:	880b883a 	mov	r5,r17
    3298:	80800015 	stw	r2,0(r16)
    329c:	80c00115 	stw	r3,4(r16)
    32a0:	000666c0 	call	666c <__subdf3>
    32a4:	018698b4 	movhi	r6,6754
    32a8:	01cf7474 	movhi	r7,15825
    32ac:	3198cc44 	addi	r6,r6,25393
    32b0:	39ed1844 	addi	r7,r7,-19359
    32b4:	1009883a 	mov	r4,r2
    32b8:	180b883a 	mov	r5,r3
    32bc:	000666c0 	call	666c <__subdf3>
    32c0:	80800215 	stw	r2,8(r16)
    32c4:	80c00315 	stw	r3,12(r16)
    32c8:	00800044 	movi	r2,1
    32cc:	00005606 	br	3428 <__ieee754_rem_pio2+0x240>
    32d0:	00904e74 	movhi	r2,16697
    32d4:	10887ec4 	addi	r2,r2,8699
    32d8:	15c0830e 	bge	r2,r23,34e8 <__ieee754_rem_pio2+0x300>
    32dc:	009ffc34 	movhi	r2,32752
    32e0:	10bfffc4 	addi	r2,r2,-1
    32e4:	15c05c16 	blt	r2,r23,3458 <__ieee754_rem_pio2+0x270>
    32e8:	b829d53a 	srai	r20,r23,20
    32ec:	a53efa84 	addi	r20,r20,-1046
    32f0:	a024953a 	slli	r18,r20,20
    32f4:	bca5c83a 	sub	r18,r23,r18
    32f8:	900b883a 	mov	r5,r18
    32fc:	0006f680 	call	6f68 <__fixdfsi>
    3300:	1009883a 	mov	r4,r2
    3304:	0006fe80 	call	6fe8 <__floatsidf>
    3308:	9809883a 	mov	r4,r19
    330c:	900b883a 	mov	r5,r18
    3310:	100d883a 	mov	r6,r2
    3314:	180f883a 	mov	r7,r3
    3318:	d8800215 	stw	r2,8(sp)
    331c:	d8c00315 	stw	r3,12(sp)
    3320:	000666c0 	call	666c <__subdf3>
    3324:	000d883a 	mov	r6,zero
    3328:	01d05c34 	movhi	r7,16752
    332c:	1009883a 	mov	r4,r2
    3330:	180b883a 	mov	r5,r3
    3334:	0005e000 	call	5e00 <__muldf3>
    3338:	180b883a 	mov	r5,r3
    333c:	1009883a 	mov	r4,r2
    3340:	182b883a 	mov	r21,r3
    3344:	102d883a 	mov	r22,r2
    3348:	0006f680 	call	6f68 <__fixdfsi>
    334c:	1009883a 	mov	r4,r2
    3350:	0006fe80 	call	6fe8 <__floatsidf>
    3354:	100d883a 	mov	r6,r2
    3358:	180f883a 	mov	r7,r3
    335c:	b009883a 	mov	r4,r22
    3360:	a80b883a 	mov	r5,r21
    3364:	1027883a 	mov	r19,r2
    3368:	1825883a 	mov	r18,r3
    336c:	d8800415 	stw	r2,16(sp)
    3370:	d8c00515 	stw	r3,20(sp)
    3374:	000666c0 	call	666c <__subdf3>
    3378:	000d883a 	mov	r6,zero
    337c:	01d05c34 	movhi	r7,16752
    3380:	1009883a 	mov	r4,r2
    3384:	180b883a 	mov	r5,r3
    3388:	0005e000 	call	5e00 <__muldf3>
    338c:	000d883a 	mov	r6,zero
    3390:	000f883a 	mov	r7,zero
    3394:	1009883a 	mov	r4,r2
    3398:	180b883a 	mov	r5,r3
    339c:	d8800615 	stw	r2,24(sp)
    33a0:	d8c00715 	stw	r3,28(sp)
    33a4:	0005c9c0 	call	5c9c <__eqdf2>
    33a8:	1001431e 	bne	r2,zero,38b8 <__ieee754_rem_pio2+0x6d0>
    33ac:	000f883a 	mov	r7,zero
    33b0:	000d883a 	mov	r6,zero
    33b4:	9809883a 	mov	r4,r19
    33b8:	900b883a 	mov	r5,r18
    33bc:	0005c9c0 	call	5c9c <__eqdf2>
    33c0:	100f003a 	cmpeq	r7,r2,zero
    33c4:	00800084 	movi	r2,2
    33c8:	11cfc83a 	sub	r7,r2,r7
    33cc:	00800084 	movi	r2,2
    33d0:	d8800015 	stw	r2,0(sp)
    33d4:	00800074 	movhi	r2,1
    33d8:	10993904 	addi	r2,r2,25828
    33dc:	d8800115 	stw	r2,4(sp)
    33e0:	a00d883a 	mov	r6,r20
    33e4:	800b883a 	mov	r5,r16
    33e8:	d9000204 	addi	r4,sp,8
    33ec:	0003df80 	call	3df8 <__kernel_rem_pio2>
    33f0:	88000d0e 	bge	r17,zero,3428 <__ieee754_rem_pio2+0x240>
    33f4:	81000117 	ldw	r4,4(r16)
    33f8:	80c00317 	ldw	r3,12(r16)
    33fc:	0085c83a 	sub	r2,zero,r2
    3400:	2120003c 	xorhi	r4,r4,32768
    3404:	18e0003c 	xorhi	r3,r3,32768
    3408:	81000115 	stw	r4,4(r16)
    340c:	80c00315 	stw	r3,12(r16)
    3410:	00000506 	br	3428 <__ieee754_rem_pio2+0x240>
    3414:	31000015 	stw	r4,0(r6)
    3418:	31400115 	stw	r5,4(r6)
    341c:	30000215 	stw	zero,8(r6)
    3420:	30000315 	stw	zero,12(r6)
    3424:	0005883a 	mov	r2,zero
    3428:	dfc01517 	ldw	ra,84(sp)
    342c:	df001417 	ldw	fp,80(sp)
    3430:	ddc01317 	ldw	r23,76(sp)
    3434:	dd801217 	ldw	r22,72(sp)
    3438:	dd401117 	ldw	r21,68(sp)
    343c:	dd001017 	ldw	r20,64(sp)
    3440:	dcc00f17 	ldw	r19,60(sp)
    3444:	dc800e17 	ldw	r18,56(sp)
    3448:	dc400d17 	ldw	r17,52(sp)
    344c:	dc000c17 	ldw	r16,48(sp)
    3450:	dec01604 	addi	sp,sp,88
    3454:	f800283a 	ret
    3458:	200d883a 	mov	r6,r4
    345c:	280f883a 	mov	r7,r5
    3460:	000666c0 	call	666c <__subdf3>
    3464:	80800215 	stw	r2,8(r16)
    3468:	80800015 	stw	r2,0(r16)
    346c:	80c00315 	stw	r3,12(r16)
    3470:	80c00115 	stw	r3,4(r16)
    3474:	0005883a 	mov	r2,zero
    3478:	003feb06 	br	3428 <__alt_exception_stack_pointer+0xf8003428>
    347c:	01cf7474 	movhi	r7,15825
    3480:	9009883a 	mov	r4,r18
    3484:	39ed1844 	addi	r7,r7,-19359
    3488:	01869834 	movhi	r6,6752
    348c:	180b883a 	mov	r5,r3
    3490:	000666c0 	call	666c <__subdf3>
    3494:	018b80f4 	movhi	r6,11779
    3498:	01cee8f4 	movhi	r7,15267
    349c:	319c1cc4 	addi	r6,r6,28787
    34a0:	39c66284 	addi	r7,r7,6538
    34a4:	1009883a 	mov	r4,r2
    34a8:	180b883a 	mov	r5,r3
    34ac:	1025883a 	mov	r18,r2
    34b0:	1823883a 	mov	r17,r3
    34b4:	000666c0 	call	666c <__subdf3>
    34b8:	100d883a 	mov	r6,r2
    34bc:	180f883a 	mov	r7,r3
    34c0:	9009883a 	mov	r4,r18
    34c4:	880b883a 	mov	r5,r17
    34c8:	80800015 	stw	r2,0(r16)
    34cc:	80c00115 	stw	r3,4(r16)
    34d0:	000666c0 	call	666c <__subdf3>
    34d4:	018b80f4 	movhi	r6,11779
    34d8:	01cee8f4 	movhi	r7,15267
    34dc:	319c1cc4 	addi	r6,r6,28787
    34e0:	39c66284 	addi	r7,r7,6538
    34e4:	003f7306 	br	32b4 <__alt_exception_stack_pointer+0xf80032b4>
    34e8:	0004e5c0 	call	4e5c <fabs>
    34ec:	019b72b4 	movhi	r6,28106
    34f0:	01cff934 	movhi	r7,16356
    34f4:	31b220c4 	addi	r6,r6,-14205
    34f8:	39d7cc04 	addi	r7,r7,24368
    34fc:	1009883a 	mov	r4,r2
    3500:	180b883a 	mov	r5,r3
    3504:	102d883a 	mov	r22,r2
    3508:	182b883a 	mov	r21,r3
    350c:	0005e000 	call	5e00 <__muldf3>
    3510:	000d883a 	mov	r6,zero
    3514:	01cff834 	movhi	r7,16352
    3518:	1009883a 	mov	r4,r2
    351c:	180b883a 	mov	r5,r3
    3520:	00053f00 	call	53f0 <__adddf3>
    3524:	180b883a 	mov	r5,r3
    3528:	1009883a 	mov	r4,r2
    352c:	0006f680 	call	6f68 <__fixdfsi>
    3530:	1009883a 	mov	r4,r2
    3534:	1025883a 	mov	r18,r2
    3538:	0006fe80 	call	6fe8 <__floatsidf>
    353c:	01cffe74 	movhi	r7,16377
    3540:	39c87ec4 	addi	r7,r7,8699
    3544:	01951034 	movhi	r6,21568
    3548:	1009883a 	mov	r4,r2
    354c:	180b883a 	mov	r5,r3
    3550:	1029883a 	mov	r20,r2
    3554:	1827883a 	mov	r19,r3
    3558:	0005e000 	call	5e00 <__muldf3>
    355c:	b009883a 	mov	r4,r22
    3560:	a80b883a 	mov	r5,r21
    3564:	100d883a 	mov	r6,r2
    3568:	180f883a 	mov	r7,r3
    356c:	000666c0 	call	666c <__subdf3>
    3570:	018698b4 	movhi	r6,6754
    3574:	01cf7474 	movhi	r7,15825
    3578:	a009883a 	mov	r4,r20
    357c:	3198cc44 	addi	r6,r6,25393
    3580:	39ed1844 	addi	r7,r7,-19359
    3584:	980b883a 	mov	r5,r19
    3588:	1039883a 	mov	fp,r2
    358c:	d8c00815 	stw	r3,32(sp)
    3590:	0005e000 	call	5e00 <__muldf3>
    3594:	010007c4 	movi	r4,31
    3598:	e017883a 	mov	r11,fp
    359c:	da800817 	ldw	r10,32(sp)
    35a0:	102d883a 	mov	r22,r2
    35a4:	182b883a 	mov	r21,r3
    35a8:	24802816 	blt	r4,r18,364c <__ieee754_rem_pio2+0x464>
    35ac:	913fffc4 	addi	r4,r18,-1
    35b0:	2109883a 	add	r4,r4,r4
    35b4:	01400074 	movhi	r5,1
    35b8:	2109883a 	add	r4,r4,r4
    35bc:	29591904 	addi	r5,r5,25700
    35c0:	2909883a 	add	r4,r5,r4
    35c4:	21000017 	ldw	r4,0(r4)
    35c8:	b9002026 	beq	r23,r4,364c <__ieee754_rem_pio2+0x464>
    35cc:	100d883a 	mov	r6,r2
    35d0:	180f883a 	mov	r7,r3
    35d4:	e009883a 	mov	r4,fp
    35d8:	500b883a 	mov	r5,r10
    35dc:	da800b15 	stw	r10,44(sp)
    35e0:	df000a15 	stw	fp,40(sp)
    35e4:	000666c0 	call	666c <__subdf3>
    35e8:	da800b17 	ldw	r10,44(sp)
    35ec:	dac00a17 	ldw	r11,40(sp)
    35f0:	1019883a 	mov	r12,r2
    35f4:	1813883a 	mov	r9,r3
    35f8:	80800015 	stw	r2,0(r16)
    35fc:	80c00115 	stw	r3,4(r16)
    3600:	600d883a 	mov	r6,r12
    3604:	480f883a 	mov	r7,r9
    3608:	5809883a 	mov	r4,r11
    360c:	500b883a 	mov	r5,r10
    3610:	da400b15 	stw	r9,44(sp)
    3614:	db000a15 	stw	r12,40(sp)
    3618:	000666c0 	call	666c <__subdf3>
    361c:	b00d883a 	mov	r6,r22
    3620:	a80f883a 	mov	r7,r21
    3624:	1009883a 	mov	r4,r2
    3628:	180b883a 	mov	r5,r3
    362c:	000666c0 	call	666c <__subdf3>
    3630:	80800215 	stw	r2,8(r16)
    3634:	80c00315 	stw	r3,12(r16)
    3638:	da400b17 	ldw	r9,44(sp)
    363c:	db000a17 	ldw	r12,40(sp)
    3640:	88009f16 	blt	r17,zero,38c0 <__ieee754_rem_pio2+0x6d8>
    3644:	9005883a 	mov	r2,r18
    3648:	003f7706 	br	3428 <__alt_exception_stack_pointer+0xf8003428>
    364c:	d9400817 	ldw	r5,32(sp)
    3650:	100d883a 	mov	r6,r2
    3654:	180f883a 	mov	r7,r3
    3658:	e009883a 	mov	r4,fp
    365c:	da800b15 	stw	r10,44(sp)
    3660:	dac00a15 	stw	r11,40(sp)
    3664:	000666c0 	call	666c <__subdf3>
    3668:	1019883a 	mov	r12,r2
    366c:	1804d53a 	srli	r2,r3,20
    3670:	b811d53a 	srai	r8,r23,20
    3674:	1813883a 	mov	r9,r3
    3678:	1081ffcc 	andi	r2,r2,2047
    367c:	80c00115 	stw	r3,4(r16)
    3680:	83000015 	stw	r12,0(r16)
    3684:	4085c83a 	sub	r2,r8,r2
    3688:	00c00404 	movi	r3,16
    368c:	da800b17 	ldw	r10,44(sp)
    3690:	dac00a17 	ldw	r11,40(sp)
    3694:	18bfda0e 	bge	r3,r2,3600 <__alt_exception_stack_pointer+0xf8003600>
    3698:	01cf7474 	movhi	r7,15825
    369c:	39ed1844 	addi	r7,r7,-19359
    36a0:	01869834 	movhi	r6,6752
    36a4:	a009883a 	mov	r4,r20
    36a8:	980b883a 	mov	r5,r19
    36ac:	da000a15 	stw	r8,40(sp)
    36b0:	0005e000 	call	5e00 <__muldf3>
    36b4:	d9400817 	ldw	r5,32(sp)
    36b8:	100d883a 	mov	r6,r2
    36bc:	180f883a 	mov	r7,r3
    36c0:	e009883a 	mov	r4,fp
    36c4:	102d883a 	mov	r22,r2
    36c8:	182b883a 	mov	r21,r3
    36cc:	000666c0 	call	666c <__subdf3>
    36d0:	d9400817 	ldw	r5,32(sp)
    36d4:	100d883a 	mov	r6,r2
    36d8:	180f883a 	mov	r7,r3
    36dc:	e009883a 	mov	r4,fp
    36e0:	182f883a 	mov	r23,r3
    36e4:	d8800915 	stw	r2,36(sp)
    36e8:	000666c0 	call	666c <__subdf3>
    36ec:	b00d883a 	mov	r6,r22
    36f0:	a80f883a 	mov	r7,r21
    36f4:	1009883a 	mov	r4,r2
    36f8:	180b883a 	mov	r5,r3
    36fc:	000666c0 	call	666c <__subdf3>
    3700:	018b80f4 	movhi	r6,11779
    3704:	01cee8f4 	movhi	r7,15267
    3708:	319c1cc4 	addi	r6,r6,28787
    370c:	39c66284 	addi	r7,r7,6538
    3710:	a009883a 	mov	r4,r20
    3714:	980b883a 	mov	r5,r19
    3718:	102d883a 	mov	r22,r2
    371c:	182b883a 	mov	r21,r3
    3720:	0005e000 	call	5e00 <__muldf3>
    3724:	b00d883a 	mov	r6,r22
    3728:	a80f883a 	mov	r7,r21
    372c:	1009883a 	mov	r4,r2
    3730:	180b883a 	mov	r5,r3
    3734:	000666c0 	call	666c <__subdf3>
    3738:	d9000917 	ldw	r4,36(sp)
    373c:	100d883a 	mov	r6,r2
    3740:	180f883a 	mov	r7,r3
    3744:	b80b883a 	mov	r5,r23
    3748:	102d883a 	mov	r22,r2
    374c:	182b883a 	mov	r21,r3
    3750:	000666c0 	call	666c <__subdf3>
    3754:	1019883a 	mov	r12,r2
    3758:	1804d53a 	srli	r2,r3,20
    375c:	da000a17 	ldw	r8,40(sp)
    3760:	83000015 	stw	r12,0(r16)
    3764:	1081ffcc 	andi	r2,r2,2047
    3768:	4091c83a 	sub	r8,r8,r2
    376c:	80c00115 	stw	r3,4(r16)
    3770:	00800c44 	movi	r2,49
    3774:	1813883a 	mov	r9,r3
    3778:	1200730e 	bge	r2,r8,3948 <__ieee754_rem_pio2+0x760>
    377c:	01cee8f4 	movhi	r7,15267
    3780:	39c66284 	addi	r7,r7,6538
    3784:	018b8034 	movhi	r6,11776
    3788:	a009883a 	mov	r4,r20
    378c:	980b883a 	mov	r5,r19
    3790:	0005e000 	call	5e00 <__muldf3>
    3794:	d9000917 	ldw	r4,36(sp)
    3798:	100d883a 	mov	r6,r2
    379c:	180f883a 	mov	r7,r3
    37a0:	b80b883a 	mov	r5,r23
    37a4:	102d883a 	mov	r22,r2
    37a8:	182b883a 	mov	r21,r3
    37ac:	000666c0 	call	666c <__subdf3>
    37b0:	d9000917 	ldw	r4,36(sp)
    37b4:	100d883a 	mov	r6,r2
    37b8:	180f883a 	mov	r7,r3
    37bc:	b80b883a 	mov	r5,r23
    37c0:	d8c00b15 	stw	r3,44(sp)
    37c4:	d8800a15 	stw	r2,40(sp)
    37c8:	000666c0 	call	666c <__subdf3>
    37cc:	b00d883a 	mov	r6,r22
    37d0:	a80f883a 	mov	r7,r21
    37d4:	1009883a 	mov	r4,r2
    37d8:	180b883a 	mov	r5,r3
    37dc:	000666c0 	call	666c <__subdf3>
    37e0:	01894834 	movhi	r6,9504
    37e4:	01ce5f34 	movhi	r7,14716
    37e8:	31927044 	addi	r6,r6,18881
    37ec:	39e0e684 	addi	r7,r7,-31846
    37f0:	a009883a 	mov	r4,r20
    37f4:	980b883a 	mov	r5,r19
    37f8:	102d883a 	mov	r22,r2
    37fc:	182b883a 	mov	r21,r3
    3800:	0005e000 	call	5e00 <__muldf3>
    3804:	b00d883a 	mov	r6,r22
    3808:	a80f883a 	mov	r7,r21
    380c:	1009883a 	mov	r4,r2
    3810:	180b883a 	mov	r5,r3
    3814:	000666c0 	call	666c <__subdf3>
    3818:	dac00a17 	ldw	r11,40(sp)
    381c:	da800b17 	ldw	r10,44(sp)
    3820:	102d883a 	mov	r22,r2
    3824:	182b883a 	mov	r21,r3
    3828:	100d883a 	mov	r6,r2
    382c:	180f883a 	mov	r7,r3
    3830:	5809883a 	mov	r4,r11
    3834:	500b883a 	mov	r5,r10
    3838:	003f6a06 	br	35e4 <__alt_exception_stack_pointer+0xf80035e4>
    383c:	00053f00 	call	53f0 <__adddf3>
    3840:	1025883a 	mov	r18,r2
    3844:	008ffe74 	movhi	r2,16377
    3848:	10887ec4 	addi	r2,r2,8699
    384c:	1823883a 	mov	r17,r3
    3850:	b8802226 	beq	r23,r2,38dc <__ieee754_rem_pio2+0x6f4>
    3854:	018698b4 	movhi	r6,6754
    3858:	01cf7474 	movhi	r7,15825
    385c:	3198cc44 	addi	r6,r6,25393
    3860:	39ed1844 	addi	r7,r7,-19359
    3864:	9009883a 	mov	r4,r18
    3868:	180b883a 	mov	r5,r3
    386c:	00053f00 	call	53f0 <__adddf3>
    3870:	100d883a 	mov	r6,r2
    3874:	180f883a 	mov	r7,r3
    3878:	9009883a 	mov	r4,r18
    387c:	880b883a 	mov	r5,r17
    3880:	80800015 	stw	r2,0(r16)
    3884:	80c00115 	stw	r3,4(r16)
    3888:	000666c0 	call	666c <__subdf3>
    388c:	018698b4 	movhi	r6,6754
    3890:	01cf7474 	movhi	r7,15825
    3894:	3198cc44 	addi	r6,r6,25393
    3898:	39ed1844 	addi	r7,r7,-19359
    389c:	1009883a 	mov	r4,r2
    38a0:	180b883a 	mov	r5,r3
    38a4:	00053f00 	call	53f0 <__adddf3>
    38a8:	80800215 	stw	r2,8(r16)
    38ac:	80c00315 	stw	r3,12(r16)
    38b0:	00bfffc4 	movi	r2,-1
    38b4:	003edc06 	br	3428 <__alt_exception_stack_pointer+0xf8003428>
    38b8:	01c000c4 	movi	r7,3
    38bc:	003ec306 	br	33cc <__alt_exception_stack_pointer+0xf80033cc>
    38c0:	4a60003c 	xorhi	r9,r9,32768
    38c4:	18e0003c 	xorhi	r3,r3,32768
    38c8:	83000015 	stw	r12,0(r16)
    38cc:	82400115 	stw	r9,4(r16)
    38d0:	80c00315 	stw	r3,12(r16)
    38d4:	0485c83a 	sub	r2,zero,r18
    38d8:	003ed306 	br	3428 <__alt_exception_stack_pointer+0xf8003428>
    38dc:	01cf7474 	movhi	r7,15825
    38e0:	9009883a 	mov	r4,r18
    38e4:	39ed1844 	addi	r7,r7,-19359
    38e8:	01869834 	movhi	r6,6752
    38ec:	180b883a 	mov	r5,r3
    38f0:	00053f00 	call	53f0 <__adddf3>
    38f4:	018b80f4 	movhi	r6,11779
    38f8:	01cee8f4 	movhi	r7,15267
    38fc:	319c1cc4 	addi	r6,r6,28787
    3900:	39c66284 	addi	r7,r7,6538
    3904:	1009883a 	mov	r4,r2
    3908:	180b883a 	mov	r5,r3
    390c:	1025883a 	mov	r18,r2
    3910:	1823883a 	mov	r17,r3
    3914:	00053f00 	call	53f0 <__adddf3>
    3918:	100d883a 	mov	r6,r2
    391c:	180f883a 	mov	r7,r3
    3920:	9009883a 	mov	r4,r18
    3924:	880b883a 	mov	r5,r17
    3928:	80800015 	stw	r2,0(r16)
    392c:	80c00115 	stw	r3,4(r16)
    3930:	000666c0 	call	666c <__subdf3>
    3934:	018b80f4 	movhi	r6,11779
    3938:	01cee8f4 	movhi	r7,15267
    393c:	319c1cc4 	addi	r6,r6,28787
    3940:	39c66284 	addi	r7,r7,6538
    3944:	003fd506 	br	389c <__alt_exception_stack_pointer+0xf800389c>
    3948:	dac00917 	ldw	r11,36(sp)
    394c:	b815883a 	mov	r10,r23
    3950:	003f2b06 	br	3600 <__alt_exception_stack_pointer+0xf8003600>

00003954 <__kernel_cos>:
    3954:	defff304 	addi	sp,sp,-52
    3958:	dc000315 	stw	r16,12(sp)
    395c:	04200034 	movhi	r16,32768
    3960:	843fffc4 	addi	r16,r16,-1
    3964:	008f9034 	movhi	r2,15936
    3968:	df000b15 	stw	fp,44(sp)
    396c:	ddc00a15 	stw	r23,40(sp)
    3970:	dd800915 	stw	r22,36(sp)
    3974:	dcc00615 	stw	r19,24(sp)
    3978:	dfc00c15 	stw	ra,48(sp)
    397c:	dd400815 	stw	r21,32(sp)
    3980:	dd000715 	stw	r20,28(sp)
    3984:	dc800515 	stw	r18,20(sp)
    3988:	dc400415 	stw	r17,16(sp)
    398c:	2c20703a 	and	r16,r5,r16
    3990:	10bfffc4 	addi	r2,r2,-1
    3994:	2827883a 	mov	r19,r5
    3998:	202d883a 	mov	r22,r4
    399c:	302f883a 	mov	r23,r6
    39a0:	3839883a 	mov	fp,r7
    39a4:	14007516 	blt	r2,r16,3b7c <__kernel_cos+0x228>
    39a8:	0006f680 	call	6f68 <__fixdfsi>
    39ac:	10010f26 	beq	r2,zero,3dec <__kernel_cos+0x498>
    39b0:	b00d883a 	mov	r6,r22
    39b4:	980f883a 	mov	r7,r19
    39b8:	b009883a 	mov	r4,r22
    39bc:	980b883a 	mov	r5,r19
    39c0:	0005e000 	call	5e00 <__muldf3>
    39c4:	01afa234 	movhi	r6,48776
    39c8:	01ef6a74 	movhi	r7,48553
    39cc:	318e3504 	addi	r6,r6,14548
    39d0:	39feba44 	addi	r7,r7,-1303
    39d4:	1009883a 	mov	r4,r2
    39d8:	180b883a 	mov	r5,r3
    39dc:	102b883a 	mov	r21,r2
    39e0:	1829883a 	mov	r20,r3
    39e4:	0005e000 	call	5e00 <__muldf3>
    39e8:	01af6d74 	movhi	r6,48565
    39ec:	01cf88b4 	movhi	r7,15906
    39f0:	31ac7104 	addi	r6,r6,-20028
    39f4:	39fba784 	addi	r7,r7,-4450
    39f8:	1009883a 	mov	r4,r2
    39fc:	180b883a 	mov	r5,r3
    3a00:	00053f00 	call	53f0 <__adddf3>
    3a04:	a80d883a 	mov	r6,r21
    3a08:	a00f883a 	mov	r7,r20
    3a0c:	1009883a 	mov	r4,r2
    3a10:	180b883a 	mov	r5,r3
    3a14:	0005e000 	call	5e00 <__muldf3>
    3a18:	01a02734 	movhi	r6,32924
    3a1c:	01cfa4b4 	movhi	r7,16018
    3a20:	3194ab44 	addi	r6,r6,21165
    3a24:	39df93c4 	addi	r7,r7,32335
    3a28:	1009883a 	mov	r4,r2
    3a2c:	180b883a 	mov	r5,r3
    3a30:	000666c0 	call	666c <__subdf3>
    3a34:	a80d883a 	mov	r6,r21
    3a38:	a00f883a 	mov	r7,r20
    3a3c:	1009883a 	mov	r4,r2
    3a40:	180b883a 	mov	r5,r3
    3a44:	0005e000 	call	5e00 <__muldf3>
    3a48:	018672f4 	movhi	r6,6603
    3a4c:	01cfbeb4 	movhi	r7,16122
    3a50:	31856404 	addi	r6,r6,5520
    3a54:	39c06804 	addi	r7,r7,416
    3a58:	1009883a 	mov	r4,r2
    3a5c:	180b883a 	mov	r5,r3
    3a60:	00053f00 	call	53f0 <__adddf3>
    3a64:	a80d883a 	mov	r6,r21
    3a68:	a00f883a 	mov	r7,r20
    3a6c:	1009883a 	mov	r4,r2
    3a70:	180b883a 	mov	r5,r3
    3a74:	0005e000 	call	5e00 <__muldf3>
    3a78:	0185b074 	movhi	r6,5825
    3a7c:	01cfd5f4 	movhi	r7,16215
    3a80:	31945dc4 	addi	r6,r6,20855
    3a84:	39f05b04 	addi	r7,r7,-16020
    3a88:	1009883a 	mov	r4,r2
    3a8c:	180b883a 	mov	r5,r3
    3a90:	000666c0 	call	666c <__subdf3>
    3a94:	a80d883a 	mov	r6,r21
    3a98:	a00f883a 	mov	r7,r20
    3a9c:	1009883a 	mov	r4,r2
    3aa0:	180b883a 	mov	r5,r3
    3aa4:	0005e000 	call	5e00 <__muldf3>
    3aa8:	01955574 	movhi	r6,21845
    3aac:	01cfe974 	movhi	r7,16293
    3ab0:	31955304 	addi	r6,r6,21836
    3ab4:	39d55544 	addi	r7,r7,21845
    3ab8:	1009883a 	mov	r4,r2
    3abc:	180b883a 	mov	r5,r3
    3ac0:	00053f00 	call	53f0 <__adddf3>
    3ac4:	a80d883a 	mov	r6,r21
    3ac8:	a00f883a 	mov	r7,r20
    3acc:	1009883a 	mov	r4,r2
    3ad0:	180b883a 	mov	r5,r3
    3ad4:	0005e000 	call	5e00 <__muldf3>
    3ad8:	1017883a 	mov	r11,r2
    3adc:	1815883a 	mov	r10,r3
    3ae0:	a809883a 	mov	r4,r21
    3ae4:	a00b883a 	mov	r5,r20
    3ae8:	000d883a 	mov	r6,zero
    3aec:	01cff834 	movhi	r7,16352
    3af0:	da800215 	stw	r10,8(sp)
    3af4:	dac00115 	stw	r11,4(sp)
    3af8:	0005e000 	call	5e00 <__muldf3>
    3afc:	dac00117 	ldw	r11,4(sp)
    3b00:	da800217 	ldw	r10,8(sp)
    3b04:	a809883a 	mov	r4,r21
    3b08:	580d883a 	mov	r6,r11
    3b0c:	500f883a 	mov	r7,r10
    3b10:	a00b883a 	mov	r5,r20
    3b14:	1023883a 	mov	r17,r2
    3b18:	1821883a 	mov	r16,r3
    3b1c:	0005e000 	call	5e00 <__muldf3>
    3b20:	b80d883a 	mov	r6,r23
    3b24:	e00f883a 	mov	r7,fp
    3b28:	b009883a 	mov	r4,r22
    3b2c:	980b883a 	mov	r5,r19
    3b30:	1029883a 	mov	r20,r2
    3b34:	1825883a 	mov	r18,r3
    3b38:	0005e000 	call	5e00 <__muldf3>
    3b3c:	a009883a 	mov	r4,r20
    3b40:	900b883a 	mov	r5,r18
    3b44:	100d883a 	mov	r6,r2
    3b48:	180f883a 	mov	r7,r3
    3b4c:	000666c0 	call	666c <__subdf3>
    3b50:	8809883a 	mov	r4,r17
    3b54:	800b883a 	mov	r5,r16
    3b58:	100d883a 	mov	r6,r2
    3b5c:	180f883a 	mov	r7,r3
    3b60:	000666c0 	call	666c <__subdf3>
    3b64:	100d883a 	mov	r6,r2
    3b68:	180f883a 	mov	r7,r3
    3b6c:	0009883a 	mov	r4,zero
    3b70:	014ffc34 	movhi	r5,16368
    3b74:	000666c0 	call	666c <__subdf3>
    3b78:	00008b06 	br	3da8 <__kernel_cos+0x454>
    3b7c:	200d883a 	mov	r6,r4
    3b80:	280f883a 	mov	r7,r5
    3b84:	0005e000 	call	5e00 <__muldf3>
    3b88:	01afa234 	movhi	r6,48776
    3b8c:	01ef6a74 	movhi	r7,48553
    3b90:	318e3504 	addi	r6,r6,14548
    3b94:	39feba44 	addi	r7,r7,-1303
    3b98:	1009883a 	mov	r4,r2
    3b9c:	180b883a 	mov	r5,r3
    3ba0:	1025883a 	mov	r18,r2
    3ba4:	1823883a 	mov	r17,r3
    3ba8:	0005e000 	call	5e00 <__muldf3>
    3bac:	01af6d74 	movhi	r6,48565
    3bb0:	01cf88b4 	movhi	r7,15906
    3bb4:	31ac7104 	addi	r6,r6,-20028
    3bb8:	39fba784 	addi	r7,r7,-4450
    3bbc:	1009883a 	mov	r4,r2
    3bc0:	180b883a 	mov	r5,r3
    3bc4:	00053f00 	call	53f0 <__adddf3>
    3bc8:	900d883a 	mov	r6,r18
    3bcc:	880f883a 	mov	r7,r17
    3bd0:	1009883a 	mov	r4,r2
    3bd4:	180b883a 	mov	r5,r3
    3bd8:	0005e000 	call	5e00 <__muldf3>
    3bdc:	01a02734 	movhi	r6,32924
    3be0:	01cfa4b4 	movhi	r7,16018
    3be4:	3194ab44 	addi	r6,r6,21165
    3be8:	39df93c4 	addi	r7,r7,32335
    3bec:	1009883a 	mov	r4,r2
    3bf0:	180b883a 	mov	r5,r3
    3bf4:	000666c0 	call	666c <__subdf3>
    3bf8:	900d883a 	mov	r6,r18
    3bfc:	880f883a 	mov	r7,r17
    3c00:	1009883a 	mov	r4,r2
    3c04:	180b883a 	mov	r5,r3
    3c08:	0005e000 	call	5e00 <__muldf3>
    3c0c:	018672f4 	movhi	r6,6603
    3c10:	01cfbeb4 	movhi	r7,16122
    3c14:	31856404 	addi	r6,r6,5520
    3c18:	39c06804 	addi	r7,r7,416
    3c1c:	1009883a 	mov	r4,r2
    3c20:	180b883a 	mov	r5,r3
    3c24:	00053f00 	call	53f0 <__adddf3>
    3c28:	900d883a 	mov	r6,r18
    3c2c:	880f883a 	mov	r7,r17
    3c30:	1009883a 	mov	r4,r2
    3c34:	180b883a 	mov	r5,r3
    3c38:	0005e000 	call	5e00 <__muldf3>
    3c3c:	0185b074 	movhi	r6,5825
    3c40:	01cfd5f4 	movhi	r7,16215
    3c44:	31945dc4 	addi	r6,r6,20855
    3c48:	39f05b04 	addi	r7,r7,-16020
    3c4c:	1009883a 	mov	r4,r2
    3c50:	180b883a 	mov	r5,r3
    3c54:	000666c0 	call	666c <__subdf3>
    3c58:	900d883a 	mov	r6,r18
    3c5c:	880f883a 	mov	r7,r17
    3c60:	1009883a 	mov	r4,r2
    3c64:	180b883a 	mov	r5,r3
    3c68:	0005e000 	call	5e00 <__muldf3>
    3c6c:	01955574 	movhi	r6,21845
    3c70:	01cfe974 	movhi	r7,16293
    3c74:	31955304 	addi	r6,r6,21836
    3c78:	39d55544 	addi	r7,r7,21845
    3c7c:	1009883a 	mov	r4,r2
    3c80:	180b883a 	mov	r5,r3
    3c84:	00053f00 	call	53f0 <__adddf3>
    3c88:	900d883a 	mov	r6,r18
    3c8c:	880f883a 	mov	r7,r17
    3c90:	1009883a 	mov	r4,r2
    3c94:	180b883a 	mov	r5,r3
    3c98:	0005e000 	call	5e00 <__muldf3>
    3c9c:	1013883a 	mov	r9,r2
    3ca0:	1017883a 	mov	r11,r2
    3ca4:	008ff4f4 	movhi	r2,16339
    3ca8:	108ccc84 	addi	r2,r2,13106
    3cac:	1811883a 	mov	r8,r3
    3cb0:	902b883a 	mov	r21,r18
    3cb4:	8829883a 	mov	r20,r17
    3cb8:	1815883a 	mov	r10,r3
    3cbc:	143f880e 	bge	r2,r16,3ae0 <__alt_exception_stack_pointer+0xf8003ae0>
    3cc0:	008ffa74 	movhi	r2,16361
    3cc4:	14004416 	blt	r2,r16,3dd8 <__kernel_cos+0x484>
    3cc8:	00bff834 	movhi	r2,65504
    3ccc:	80a1883a 	add	r16,r16,r2
    3cd0:	000d883a 	mov	r6,zero
    3cd4:	800f883a 	mov	r7,r16
    3cd8:	0009883a 	mov	r4,zero
    3cdc:	014ffc34 	movhi	r5,16368
    3ce0:	da400115 	stw	r9,4(sp)
    3ce4:	d8c00215 	stw	r3,8(sp)
    3ce8:	000666c0 	call	666c <__subdf3>
    3cec:	da000217 	ldw	r8,8(sp)
    3cf0:	da400117 	ldw	r9,4(sp)
    3cf4:	102b883a 	mov	r21,r2
    3cf8:	d8c00015 	stw	r3,0(sp)
    3cfc:	9009883a 	mov	r4,r18
    3d00:	880b883a 	mov	r5,r17
    3d04:	000d883a 	mov	r6,zero
    3d08:	01cff834 	movhi	r7,16352
    3d0c:	da000215 	stw	r8,8(sp)
    3d10:	da400115 	stw	r9,4(sp)
    3d14:	0005e000 	call	5e00 <__muldf3>
    3d18:	800f883a 	mov	r7,r16
    3d1c:	000d883a 	mov	r6,zero
    3d20:	1009883a 	mov	r4,r2
    3d24:	180b883a 	mov	r5,r3
    3d28:	000666c0 	call	666c <__subdf3>
    3d2c:	da400117 	ldw	r9,4(sp)
    3d30:	da000217 	ldw	r8,8(sp)
    3d34:	9009883a 	mov	r4,r18
    3d38:	480d883a 	mov	r6,r9
    3d3c:	400f883a 	mov	r7,r8
    3d40:	880b883a 	mov	r5,r17
    3d44:	1029883a 	mov	r20,r2
    3d48:	1821883a 	mov	r16,r3
    3d4c:	0005e000 	call	5e00 <__muldf3>
    3d50:	b80d883a 	mov	r6,r23
    3d54:	e00f883a 	mov	r7,fp
    3d58:	b009883a 	mov	r4,r22
    3d5c:	980b883a 	mov	r5,r19
    3d60:	1025883a 	mov	r18,r2
    3d64:	1823883a 	mov	r17,r3
    3d68:	0005e000 	call	5e00 <__muldf3>
    3d6c:	100d883a 	mov	r6,r2
    3d70:	180f883a 	mov	r7,r3
    3d74:	9009883a 	mov	r4,r18
    3d78:	880b883a 	mov	r5,r17
    3d7c:	000666c0 	call	666c <__subdf3>
    3d80:	100d883a 	mov	r6,r2
    3d84:	180f883a 	mov	r7,r3
    3d88:	a009883a 	mov	r4,r20
    3d8c:	800b883a 	mov	r5,r16
    3d90:	000666c0 	call	666c <__subdf3>
    3d94:	d9400017 	ldw	r5,0(sp)
    3d98:	100d883a 	mov	r6,r2
    3d9c:	180f883a 	mov	r7,r3
    3da0:	a809883a 	mov	r4,r21
    3da4:	000666c0 	call	666c <__subdf3>
    3da8:	dfc00c17 	ldw	ra,48(sp)
    3dac:	df000b17 	ldw	fp,44(sp)
    3db0:	ddc00a17 	ldw	r23,40(sp)
    3db4:	dd800917 	ldw	r22,36(sp)
    3db8:	dd400817 	ldw	r21,32(sp)
    3dbc:	dd000717 	ldw	r20,28(sp)
    3dc0:	dcc00617 	ldw	r19,24(sp)
    3dc4:	dc800517 	ldw	r18,20(sp)
    3dc8:	dc400417 	ldw	r17,16(sp)
    3dcc:	dc000317 	ldw	r16,12(sp)
    3dd0:	dec00d04 	addi	sp,sp,52
    3dd4:	f800283a 	ret
    3dd8:	008ff9f4 	movhi	r2,16359
    3ddc:	002b883a 	mov	r21,zero
    3de0:	d8800015 	stw	r2,0(sp)
    3de4:	040ff4b4 	movhi	r16,16338
    3de8:	003fc406 	br	3cfc <__alt_exception_stack_pointer+0xf8003cfc>
    3dec:	0005883a 	mov	r2,zero
    3df0:	00cffc34 	movhi	r3,16368
    3df4:	003fec06 	br	3da8 <__alt_exception_stack_pointer+0xf8003da8>

00003df8 <__kernel_rem_pio2>:
    3df8:	deff5a04 	addi	sp,sp,-664
    3dfc:	da00a617 	ldw	r8,664(sp)
    3e00:	00c00074 	movhi	r3,1
    3e04:	18d98b04 	addi	r3,r3,26156
    3e08:	4205883a 	add	r2,r8,r8
    3e0c:	1085883a 	add	r2,r2,r2
    3e10:	1885883a 	add	r2,r3,r2
    3e14:	d9008e15 	stw	r4,568(sp)
    3e18:	d9408f15 	stw	r5,572(sp)
    3e1c:	313fff44 	addi	r4,r6,-3
    3e20:	01400604 	movi	r5,24
    3e24:	dd80a215 	stw	r22,648(sp)
    3e28:	dc009c15 	stw	r16,624(sp)
    3e2c:	dfc0a515 	stw	ra,660(sp)
    3e30:	df00a415 	stw	fp,656(sp)
    3e34:	ddc0a315 	stw	r23,652(sp)
    3e38:	dd40a115 	stw	r21,644(sp)
    3e3c:	dd00a015 	stw	r20,640(sp)
    3e40:	dcc09f15 	stw	r19,636(sp)
    3e44:	dc809e15 	stw	r18,632(sp)
    3e48:	dc409d15 	stw	r17,628(sp)
    3e4c:	3021883a 	mov	r16,r6
    3e50:	d9c09315 	stw	r7,588(sp)
    3e54:	15800017 	ldw	r22,0(r2)
    3e58:	00052140 	call	5214 <__divsi3>
    3e5c:	da009317 	ldw	r8,588(sp)
    3e60:	d8809215 	stw	r2,584(sp)
    3e64:	423fffc4 	addi	r8,r8,-1
    3e68:	da008d15 	stw	r8,564(sp)
    3e6c:	10033d16 	blt	r2,zero,4b64 <__kernel_rem_pio2+0xd6c>
    3e70:	da009217 	ldw	r8,584(sp)
    3e74:	017ffa04 	movi	r5,-24
    3e78:	42000044 	addi	r8,r8,1
    3e7c:	4009883a 	mov	r4,r8
    3e80:	da009515 	stw	r8,596(sp)
    3e84:	00053c80 	call	53c8 <__mulsi3>
    3e88:	da008d17 	ldw	r8,564(sp)
    3e8c:	1421883a 	add	r16,r2,r16
    3e90:	d8809217 	ldw	r2,584(sp)
    3e94:	b207883a 	add	r3,r22,r8
    3e98:	dc009015 	stw	r16,576(sp)
    3e9c:	1223c83a 	sub	r17,r2,r8
    3ea0:	18001016 	blt	r3,zero,3ee4 <__kernel_rem_pio2+0xec>
    3ea4:	da00a717 	ldw	r8,668(sp)
    3ea8:	8c65883a 	add	r18,r17,r17
    3eac:	94a5883a 	add	r18,r18,r18
    3eb0:	1c47883a 	add	r3,r3,r17
    3eb4:	dcc05004 	addi	r19,sp,320
    3eb8:	44a5883a 	add	r18,r8,r18
    3ebc:	1c000044 	addi	r16,r3,1
    3ec0:	88015316 	blt	r17,zero,4410 <__kernel_rem_pio2+0x618>
    3ec4:	91000017 	ldw	r4,0(r18)
    3ec8:	0006fe80 	call	6fe8 <__floatsidf>
    3ecc:	98800015 	stw	r2,0(r19)
    3ed0:	98c00115 	stw	r3,4(r19)
    3ed4:	8c400044 	addi	r17,r17,1
    3ed8:	9cc00204 	addi	r19,r19,8
    3edc:	94800104 	addi	r18,r18,4
    3ee0:	8c3ff71e 	bne	r17,r16,3ec0 <__alt_exception_stack_pointer+0xf8003ec0>
    3ee4:	b0002816 	blt	r22,zero,3f88 <__kernel_rem_pio2+0x190>
    3ee8:	da008d17 	ldw	r8,564(sp)
    3eec:	b4c00044 	addi	r19,r22,1
    3ef0:	982690fa 	slli	r19,r19,3
    3ef4:	402490fa 	slli	r18,r8,3
    3ef8:	da008e17 	ldw	r8,568(sp)
    3efc:	d8805004 	addi	r2,sp,320
    3f00:	94000204 	addi	r16,r18,8
    3f04:	d823883a 	mov	r17,sp
    3f08:	14a5883a 	add	r18,r2,r18
    3f0c:	dcef883a 	add	r23,sp,r19
    3f10:	4421883a 	add	r16,r8,r16
    3f14:	dd809115 	stw	r22,580(sp)
    3f18:	4039883a 	mov	fp,r8
    3f1c:	da008d17 	ldw	r8,564(sp)
    3f20:	40016016 	blt	r8,zero,44a4 <__kernel_rem_pio2+0x6ac>
    3f24:	e027883a 	mov	r19,fp
    3f28:	9029883a 	mov	r20,r18
    3f2c:	002d883a 	mov	r22,zero
    3f30:	002b883a 	mov	r21,zero
    3f34:	a1800017 	ldw	r6,0(r20)
    3f38:	a1c00117 	ldw	r7,4(r20)
    3f3c:	99000017 	ldw	r4,0(r19)
    3f40:	99400117 	ldw	r5,4(r19)
    3f44:	9cc00204 	addi	r19,r19,8
    3f48:	a53ffe04 	addi	r20,r20,-8
    3f4c:	0005e000 	call	5e00 <__muldf3>
    3f50:	b009883a 	mov	r4,r22
    3f54:	a80b883a 	mov	r5,r21
    3f58:	100d883a 	mov	r6,r2
    3f5c:	180f883a 	mov	r7,r3
    3f60:	00053f00 	call	53f0 <__adddf3>
    3f64:	102d883a 	mov	r22,r2
    3f68:	182b883a 	mov	r21,r3
    3f6c:	9c3ff11e 	bne	r19,r16,3f34 <__alt_exception_stack_pointer+0xf8003f34>
    3f70:	8d800015 	stw	r22,0(r17)
    3f74:	8d400115 	stw	r21,4(r17)
    3f78:	8c400204 	addi	r17,r17,8
    3f7c:	94800204 	addi	r18,r18,8
    3f80:	8dffe61e 	bne	r17,r23,3f1c <__alt_exception_stack_pointer+0xf8003f1c>
    3f84:	dd809117 	ldw	r22,580(sp)
    3f88:	00d00034 	movhi	r3,16384
    3f8c:	da009317 	ldw	r8,588(sp)
    3f90:	18ffff84 	addi	r3,r3,-2
    3f94:	b0c7883a 	add	r3,r22,r3
    3f98:	18c7883a 	add	r3,r3,r3
    3f9c:	402090fa 	slli	r16,r8,3
    3fa0:	18c7883a 	add	r3,r3,r3
    3fa4:	da007804 	addi	r8,sp,480
    3fa8:	40d1883a 	add	r8,r8,r3
    3fac:	b0bfffc4 	addi	r2,r22,-1
    3fb0:	da009615 	stw	r8,600(sp)
    3fb4:	da008e17 	ldw	r8,568(sp)
    3fb8:	1085883a 	add	r2,r2,r2
    3fbc:	1085883a 	add	r2,r2,r2
    3fc0:	19000104 	addi	r4,r3,4
    3fc4:	d885883a 	add	r2,sp,r2
    3fc8:	4421883a 	add	r16,r8,r16
    3fcc:	da007804 	addi	r8,sp,480
    3fd0:	4111883a 	add	r8,r8,r4
    3fd4:	10807804 	addi	r2,r2,480
    3fd8:	da009715 	stw	r8,604(sp)
    3fdc:	b025883a 	mov	r18,r22
    3fe0:	d8809815 	stw	r2,608(sp)
    3fe4:	dd809415 	stw	r22,592(sp)
    3fe8:	900490fa 	slli	r2,r18,3
    3fec:	d885883a 	add	r2,sp,r2
    3ff0:	17000017 	ldw	fp,0(r2)
    3ff4:	15400117 	ldw	r21,4(r2)
    3ff8:	04802b0e 	bge	zero,r18,40a8 <__kernel_rem_pio2+0x2b0>
    3ffc:	00880034 	movhi	r2,8192
    4000:	10bfffc4 	addi	r2,r2,-1
    4004:	90a9883a 	add	r20,r18,r2
    4008:	a02890fa 	slli	r20,r20,3
    400c:	dc407804 	addi	r17,sp,480
    4010:	dcfffe04 	addi	r19,sp,-8
    4014:	dd29883a 	add	r20,sp,r20
    4018:	000d883a 	mov	r6,zero
    401c:	01cf9c34 	movhi	r7,15984
    4020:	e009883a 	mov	r4,fp
    4024:	a80b883a 	mov	r5,r21
    4028:	0005e000 	call	5e00 <__muldf3>
    402c:	180b883a 	mov	r5,r3
    4030:	1009883a 	mov	r4,r2
    4034:	0006f680 	call	6f68 <__fixdfsi>
    4038:	1009883a 	mov	r4,r2
    403c:	0006fe80 	call	6fe8 <__floatsidf>
    4040:	000d883a 	mov	r6,zero
    4044:	01d05c34 	movhi	r7,16752
    4048:	1009883a 	mov	r4,r2
    404c:	180b883a 	mov	r5,r3
    4050:	102f883a 	mov	r23,r2
    4054:	182d883a 	mov	r22,r3
    4058:	0005e000 	call	5e00 <__muldf3>
    405c:	100d883a 	mov	r6,r2
    4060:	180f883a 	mov	r7,r3
    4064:	e009883a 	mov	r4,fp
    4068:	a80b883a 	mov	r5,r21
    406c:	000666c0 	call	666c <__subdf3>
    4070:	180b883a 	mov	r5,r3
    4074:	1009883a 	mov	r4,r2
    4078:	0006f680 	call	6f68 <__fixdfsi>
    407c:	a1800017 	ldw	r6,0(r20)
    4080:	a1c00117 	ldw	r7,4(r20)
    4084:	88800015 	stw	r2,0(r17)
    4088:	b809883a 	mov	r4,r23
    408c:	b00b883a 	mov	r5,r22
    4090:	00053f00 	call	53f0 <__adddf3>
    4094:	a53ffe04 	addi	r20,r20,-8
    4098:	1039883a 	mov	fp,r2
    409c:	182b883a 	mov	r21,r3
    40a0:	8c400104 	addi	r17,r17,4
    40a4:	a4ffdc1e 	bne	r20,r19,4018 <__alt_exception_stack_pointer+0xf8004018>
    40a8:	d9809017 	ldw	r6,576(sp)
    40ac:	a80b883a 	mov	r5,r21
    40b0:	e009883a 	mov	r4,fp
    40b4:	000505c0 	call	505c <scalbn>
    40b8:	000d883a 	mov	r6,zero
    40bc:	01cff034 	movhi	r7,16320
    40c0:	1009883a 	mov	r4,r2
    40c4:	180b883a 	mov	r5,r3
    40c8:	1027883a 	mov	r19,r2
    40cc:	1823883a 	mov	r17,r3
    40d0:	0005e000 	call	5e00 <__muldf3>
    40d4:	1009883a 	mov	r4,r2
    40d8:	180b883a 	mov	r5,r3
    40dc:	0004e700 	call	4e70 <floor>
    40e0:	000d883a 	mov	r6,zero
    40e4:	01d00834 	movhi	r7,16416
    40e8:	1009883a 	mov	r4,r2
    40ec:	180b883a 	mov	r5,r3
    40f0:	0005e000 	call	5e00 <__muldf3>
    40f4:	100d883a 	mov	r6,r2
    40f8:	180f883a 	mov	r7,r3
    40fc:	9809883a 	mov	r4,r19
    4100:	880b883a 	mov	r5,r17
    4104:	000666c0 	call	666c <__subdf3>
    4108:	180b883a 	mov	r5,r3
    410c:	1009883a 	mov	r4,r2
    4110:	1827883a 	mov	r19,r3
    4114:	1029883a 	mov	r20,r2
    4118:	0006f680 	call	6f68 <__fixdfsi>
    411c:	1009883a 	mov	r4,r2
    4120:	1023883a 	mov	r17,r2
    4124:	0006fe80 	call	6fe8 <__floatsidf>
    4128:	a009883a 	mov	r4,r20
    412c:	100d883a 	mov	r6,r2
    4130:	180f883a 	mov	r7,r3
    4134:	980b883a 	mov	r5,r19
    4138:	000666c0 	call	666c <__subdf3>
    413c:	d9009017 	ldw	r4,576(sp)
    4140:	1013883a 	mov	r9,r2
    4144:	102b883a 	mov	r21,r2
    4148:	1811883a 	mov	r8,r3
    414c:	0100b30e 	bge	zero,r4,441c <__kernel_rem_pio2+0x624>
    4150:	90bfffc4 	addi	r2,r18,-1
    4154:	1085883a 	add	r2,r2,r2
    4158:	1085883a 	add	r2,r2,r2
    415c:	d885883a 	add	r2,sp,r2
    4160:	10807804 	addi	r2,r2,480
    4164:	d9809017 	ldw	r6,576(sp)
    4168:	11400017 	ldw	r5,0(r2)
    416c:	01000604 	movi	r4,24
    4170:	2189c83a 	sub	r4,r4,r6
    4174:	290dd83a 	sra	r6,r5,r4
    4178:	d9c09017 	ldw	r7,576(sp)
    417c:	04c005c4 	movi	r19,23
    4180:	3108983a 	sll	r4,r6,r4
    4184:	99e7c83a 	sub	r19,r19,r7
    4188:	89a3883a 	add	r17,r17,r6
    418c:	2909c83a 	sub	r4,r5,r4
    4190:	24e7d83a 	sra	r19,r4,r19
    4194:	11000015 	stw	r4,0(r2)
    4198:	04c02a0e 	bge	zero,r19,4244 <__kernel_rem_pio2+0x44c>
    419c:	8c400044 	addi	r17,r17,1
    41a0:	0481570e 	bge	zero,r18,4700 <__kernel_rem_pio2+0x908>
    41a4:	02804034 	movhi	r10,256
    41a8:	52bfffc4 	addi	r10,r10,-1
    41ac:	d8807804 	addi	r2,sp,480
    41b0:	000b883a 	mov	r5,zero
    41b4:	0029883a 	mov	r20,zero
    41b8:	01c04034 	movhi	r7,256
    41bc:	00000706 	br	41dc <__kernel_rem_pio2+0x3e4>
    41c0:	390dc83a 	sub	r6,r7,r4
    41c4:	20000226 	beq	r4,zero,41d0 <__kernel_rem_pio2+0x3d8>
    41c8:	11800015 	stw	r6,0(r2)
    41cc:	05000044 	movi	r20,1
    41d0:	29400044 	addi	r5,r5,1
    41d4:	10800104 	addi	r2,r2,4
    41d8:	2c80080e 	bge	r5,r18,41fc <__kernel_rem_pio2+0x404>
    41dc:	11000017 	ldw	r4,0(r2)
    41e0:	a03ff726 	beq	r20,zero,41c0 <__alt_exception_stack_pointer+0xf80041c0>
    41e4:	5109c83a 	sub	r4,r10,r4
    41e8:	11000015 	stw	r4,0(r2)
    41ec:	29400044 	addi	r5,r5,1
    41f0:	05000044 	movi	r20,1
    41f4:	10800104 	addi	r2,r2,4
    41f8:	2cbff816 	blt	r5,r18,41dc <__alt_exception_stack_pointer+0xf80041dc>
    41fc:	d9009017 	ldw	r4,576(sp)
    4200:	01000e0e 	bge	zero,r4,423c <__kernel_rem_pio2+0x444>
    4204:	00800044 	movi	r2,1
    4208:	20808d26 	beq	r4,r2,4440 <__kernel_rem_pio2+0x648>
    420c:	00800084 	movi	r2,2
    4210:	20800a1e 	bne	r4,r2,423c <__kernel_rem_pio2+0x444>
    4214:	90bfffc4 	addi	r2,r18,-1
    4218:	1085883a 	add	r2,r2,r2
    421c:	1085883a 	add	r2,r2,r2
    4220:	d885883a 	add	r2,sp,r2
    4224:	10807804 	addi	r2,r2,480
    4228:	11400017 	ldw	r5,0(r2)
    422c:	01001034 	movhi	r4,64
    4230:	213fffc4 	addi	r4,r4,-1
    4234:	2908703a 	and	r4,r5,r4
    4238:	11000015 	stw	r4,0(r2)
    423c:	00800084 	movi	r2,2
    4240:	98805d26 	beq	r19,r2,43b8 <__kernel_rem_pio2+0x5c0>
    4244:	400b883a 	mov	r5,r8
    4248:	000d883a 	mov	r6,zero
    424c:	000f883a 	mov	r7,zero
    4250:	a809883a 	mov	r4,r21
    4254:	da009b15 	stw	r8,620(sp)
    4258:	0005c9c0 	call	5c9c <__eqdf2>
    425c:	da009b17 	ldw	r8,620(sp)
    4260:	10012b1e 	bne	r2,zero,4710 <__kernel_rem_pio2+0x918>
    4264:	da009417 	ldw	r8,592(sp)
    4268:	917fffc4 	addi	r5,r18,-1
    426c:	2a000e16 	blt	r5,r8,42a8 <__kernel_rem_pio2+0x4b0>
    4270:	00900034 	movhi	r2,16384
    4274:	10bfffc4 	addi	r2,r2,-1
    4278:	9085883a 	add	r2,r18,r2
    427c:	1085883a 	add	r2,r2,r2
    4280:	d9809717 	ldw	r6,604(sp)
    4284:	1085883a 	add	r2,r2,r2
    4288:	d9007804 	addi	r4,sp,480
    428c:	0007883a 	mov	r3,zero
    4290:	2085883a 	add	r2,r4,r2
    4294:	11000017 	ldw	r4,0(r2)
    4298:	10bfff04 	addi	r2,r2,-4
    429c:	1906b03a 	or	r3,r3,r4
    42a0:	11bffc1e 	bne	r2,r6,4294 <__alt_exception_stack_pointer+0xf8004294>
    42a4:	1800821e 	bne	r3,zero,44b0 <__kernel_rem_pio2+0x6b8>
    42a8:	da009817 	ldw	r8,608(sp)
    42ac:	40800017 	ldw	r2,0(r8)
    42b0:	1001151e 	bne	r2,zero,4708 <__kernel_rem_pio2+0x910>
    42b4:	d8809617 	ldw	r2,600(sp)
    42b8:	05000044 	movi	r20,1
    42bc:	10bfff04 	addi	r2,r2,-4
    42c0:	10c00117 	ldw	r3,4(r2)
    42c4:	a5000044 	addi	r20,r20,1
    42c8:	183ffc26 	beq	r3,zero,42bc <__alt_exception_stack_pointer+0xf80042bc>
    42cc:	9529883a 	add	r20,r18,r20
    42d0:	90800044 	addi	r2,r18,1
    42d4:	dd009115 	stw	r20,580(sp)
    42d8:	a0803216 	blt	r20,r2,43a4 <__kernel_rem_pio2+0x5ac>
    42dc:	da009317 	ldw	r8,588(sp)
    42e0:	d8c09117 	ldw	r3,580(sp)
    42e4:	44a3883a 	add	r17,r8,r18
    42e8:	da009217 	ldw	r8,584(sp)
    42ec:	882290fa 	slli	r17,r17,3
    42f0:	40a5883a 	add	r18,r8,r2
    42f4:	da009517 	ldw	r8,596(sp)
    42f8:	100490fa 	slli	r2,r2,3
    42fc:	94a5883a 	add	r18,r18,r18
    4300:	40eb883a 	add	r21,r8,r3
    4304:	da00a717 	ldw	r8,668(sp)
    4308:	ad6b883a 	add	r21,r21,r21
    430c:	94a5883a 	add	r18,r18,r18
    4310:	ad6b883a 	add	r21,r21,r21
    4314:	d8c05004 	addi	r3,sp,320
    4318:	44a5883a 	add	r18,r8,r18
    431c:	1c63883a 	add	r17,r3,r17
    4320:	d8a7883a 	add	r19,sp,r2
    4324:	456b883a 	add	r21,r8,r21
    4328:	91000017 	ldw	r4,0(r18)
    432c:	0006fe80 	call	6fe8 <__floatsidf>
    4330:	da008d17 	ldw	r8,564(sp)
    4334:	88800015 	stw	r2,0(r17)
    4338:	88c00115 	stw	r3,4(r17)
    433c:	40001b16 	blt	r8,zero,43ac <__kernel_rem_pio2+0x5b4>
    4340:	dd008e17 	ldw	r20,568(sp)
    4344:	882d883a 	mov	r22,r17
    4348:	002f883a 	mov	r23,zero
    434c:	0039883a 	mov	fp,zero
    4350:	b1800017 	ldw	r6,0(r22)
    4354:	b1c00117 	ldw	r7,4(r22)
    4358:	a1000017 	ldw	r4,0(r20)
    435c:	a1400117 	ldw	r5,4(r20)
    4360:	a5000204 	addi	r20,r20,8
    4364:	b5bffe04 	addi	r22,r22,-8
    4368:	0005e000 	call	5e00 <__muldf3>
    436c:	b809883a 	mov	r4,r23
    4370:	e00b883a 	mov	r5,fp
    4374:	100d883a 	mov	r6,r2
    4378:	180f883a 	mov	r7,r3
    437c:	00053f00 	call	53f0 <__adddf3>
    4380:	102f883a 	mov	r23,r2
    4384:	1839883a 	mov	fp,r3
    4388:	a43ff11e 	bne	r20,r16,4350 <__alt_exception_stack_pointer+0xf8004350>
    438c:	9dc00015 	stw	r23,0(r19)
    4390:	9f000115 	stw	fp,4(r19)
    4394:	94800104 	addi	r18,r18,4
    4398:	8c400204 	addi	r17,r17,8
    439c:	9cc00204 	addi	r19,r19,8
    43a0:	957fe11e 	bne	r18,r21,4328 <__alt_exception_stack_pointer+0xf8004328>
    43a4:	dc809117 	ldw	r18,580(sp)
    43a8:	003f0f06 	br	3fe8 <__alt_exception_stack_pointer+0xf8003fe8>
    43ac:	002f883a 	mov	r23,zero
    43b0:	0039883a 	mov	fp,zero
    43b4:	003ff506 	br	438c <__alt_exception_stack_pointer+0xf800438c>
    43b8:	480d883a 	mov	r6,r9
    43bc:	180f883a 	mov	r7,r3
    43c0:	0009883a 	mov	r4,zero
    43c4:	014ffc34 	movhi	r5,16368
    43c8:	000666c0 	call	666c <__subdf3>
    43cc:	102b883a 	mov	r21,r2
    43d0:	1811883a 	mov	r8,r3
    43d4:	a03f9b26 	beq	r20,zero,4244 <__alt_exception_stack_pointer+0xf8004244>
    43d8:	d9809017 	ldw	r6,576(sp)
    43dc:	0009883a 	mov	r4,zero
    43e0:	014ffc34 	movhi	r5,16368
    43e4:	d8c09b15 	stw	r3,620(sp)
    43e8:	000505c0 	call	505c <scalbn>
    43ec:	da009b17 	ldw	r8,620(sp)
    43f0:	a809883a 	mov	r4,r21
    43f4:	100d883a 	mov	r6,r2
    43f8:	400b883a 	mov	r5,r8
    43fc:	180f883a 	mov	r7,r3
    4400:	000666c0 	call	666c <__subdf3>
    4404:	102b883a 	mov	r21,r2
    4408:	1811883a 	mov	r8,r3
    440c:	003f8d06 	br	4244 <__alt_exception_stack_pointer+0xf8004244>
    4410:	0005883a 	mov	r2,zero
    4414:	0007883a 	mov	r3,zero
    4418:	003eac06 	br	3ecc <__alt_exception_stack_pointer+0xf8003ecc>
    441c:	d8809017 	ldw	r2,576(sp)
    4420:	1000121e 	bne	r2,zero,446c <__kernel_rem_pio2+0x674>
    4424:	90bfffc4 	addi	r2,r18,-1
    4428:	1085883a 	add	r2,r2,r2
    442c:	1085883a 	add	r2,r2,r2
    4430:	d885883a 	add	r2,sp,r2
    4434:	14c07817 	ldw	r19,480(r2)
    4438:	9827d5fa 	srai	r19,r19,23
    443c:	003f5606 	br	4198 <__alt_exception_stack_pointer+0xf8004198>
    4440:	90bfffc4 	addi	r2,r18,-1
    4444:	1085883a 	add	r2,r2,r2
    4448:	1085883a 	add	r2,r2,r2
    444c:	d885883a 	add	r2,sp,r2
    4450:	10807804 	addi	r2,r2,480
    4454:	11000017 	ldw	r4,0(r2)
    4458:	01402034 	movhi	r5,128
    445c:	297fffc4 	addi	r5,r5,-1
    4460:	2148703a 	and	r4,r4,r5
    4464:	11000015 	stw	r4,0(r2)
    4468:	003f7406 	br	423c <__alt_exception_stack_pointer+0xf800423c>
    446c:	4809883a 	mov	r4,r9
    4470:	180b883a 	mov	r5,r3
    4474:	000d883a 	mov	r6,zero
    4478:	01cff834 	movhi	r7,16352
    447c:	d8c09a15 	stw	r3,616(sp)
    4480:	d8c09b15 	stw	r3,620(sp)
    4484:	da409915 	stw	r9,612(sp)
    4488:	0005d240 	call	5d24 <__gedf2>
    448c:	d8c09a17 	ldw	r3,616(sp)
    4490:	da009b17 	ldw	r8,620(sp)
    4494:	da409917 	ldw	r9,612(sp)
    4498:	1000920e 	bge	r2,zero,46e4 <__kernel_rem_pio2+0x8ec>
    449c:	0027883a 	mov	r19,zero
    44a0:	003f6806 	br	4244 <__alt_exception_stack_pointer+0xf8004244>
    44a4:	002d883a 	mov	r22,zero
    44a8:	002b883a 	mov	r21,zero
    44ac:	003eb006 	br	3f70 <__alt_exception_stack_pointer+0xf8003f70>
    44b0:	2945883a 	add	r2,r5,r5
    44b4:	da009017 	ldw	r8,576(sp)
    44b8:	1085883a 	add	r2,r2,r2
    44bc:	d885883a 	add	r2,sp,r2
    44c0:	10807817 	ldw	r2,480(r2)
    44c4:	423ffa04 	addi	r8,r8,-24
    44c8:	dc409115 	stw	r17,580(sp)
    44cc:	dcc08d15 	stw	r19,564(sp)
    44d0:	da009015 	stw	r8,576(sp)
    44d4:	dd809417 	ldw	r22,592(sp)
    44d8:	2823883a 	mov	r17,r5
    44dc:	10000e1e 	bne	r2,zero,4518 <__kernel_rem_pio2+0x720>
    44e0:	00900034 	movhi	r2,16384
    44e4:	10bfffc4 	addi	r2,r2,-1
    44e8:	2885883a 	add	r2,r5,r2
    44ec:	1085883a 	add	r2,r2,r2
    44f0:	d8c07804 	addi	r3,sp,480
    44f4:	1085883a 	add	r2,r2,r2
    44f8:	1885883a 	add	r2,r3,r2
    44fc:	4007883a 	mov	r3,r8
    4500:	10bfff04 	addi	r2,r2,-4
    4504:	11000117 	ldw	r4,4(r2)
    4508:	8c7fffc4 	addi	r17,r17,-1
    450c:	18fffa04 	addi	r3,r3,-24
    4510:	203ffb26 	beq	r4,zero,4500 <__alt_exception_stack_pointer+0xf8004500>
    4514:	d8c09015 	stw	r3,576(sp)
    4518:	d9809017 	ldw	r6,576(sp)
    451c:	0009883a 	mov	r4,zero
    4520:	014ffc34 	movhi	r5,16368
    4524:	000505c0 	call	505c <scalbn>
    4528:	1029883a 	mov	r20,r2
    452c:	182b883a 	mov	r21,r3
    4530:	88018416 	blt	r17,zero,4b44 <__kernel_rem_pio2+0xd4c>
    4534:	881090fa 	slli	r8,r17,3
    4538:	d8c07804 	addi	r3,sp,480
    453c:	da008e15 	stw	r8,568(sp)
    4540:	d8808e17 	ldw	r2,568(sp)
    4544:	8c51883a 	add	r8,r17,r17
    4548:	4211883a 	add	r8,r8,r8
    454c:	d8a1883a 	add	r16,sp,r2
    4550:	1a25883a 	add	r18,r3,r8
    4554:	da3ffe04 	addi	r8,sp,-8
    4558:	da008c15 	stw	r8,560(sp)
    455c:	8039883a 	mov	fp,r16
    4560:	91000017 	ldw	r4,0(r18)
    4564:	e73ffe04 	addi	fp,fp,-8
    4568:	94bfff04 	addi	r18,r18,-4
    456c:	0006fe80 	call	6fe8 <__floatsidf>
    4570:	a00d883a 	mov	r6,r20
    4574:	a80f883a 	mov	r7,r21
    4578:	1009883a 	mov	r4,r2
    457c:	180b883a 	mov	r5,r3
    4580:	0005e000 	call	5e00 <__muldf3>
    4584:	a009883a 	mov	r4,r20
    4588:	a80b883a 	mov	r5,r21
    458c:	e0800215 	stw	r2,8(fp)
    4590:	e0c00315 	stw	r3,12(fp)
    4594:	000d883a 	mov	r6,zero
    4598:	01cf9c34 	movhi	r7,15984
    459c:	0005e000 	call	5e00 <__muldf3>
    45a0:	da008c17 	ldw	r8,560(sp)
    45a4:	1029883a 	mov	r20,r2
    45a8:	182b883a 	mov	r21,r3
    45ac:	e23fec1e 	bne	fp,r8,4560 <__alt_exception_stack_pointer+0xf8004560>
    45b0:	0029883a 	mov	r20,zero
    45b4:	b0004f16 	blt	r22,zero,46f4 <__kernel_rem_pio2+0x8fc>
    45b8:	05400074 	movhi	r21,1
    45bc:	014ffe74 	movhi	r5,16377
    45c0:	ad597d04 	addi	r21,r21,26100
    45c4:	8027883a 	mov	r19,r16
    45c8:	01100034 	movhi	r4,16384
    45cc:	29487ec4 	addi	r5,r5,8699
    45d0:	0039883a 	mov	fp,zero
    45d4:	002f883a 	mov	r23,zero
    45d8:	0025883a 	mov	r18,zero
    45dc:	00000506 	br	45f4 <__kernel_rem_pio2+0x7fc>
    45e0:	9cc00204 	addi	r19,r19,8
    45e4:	a4800f16 	blt	r20,r18,4624 <__kernel_rem_pio2+0x82c>
    45e8:	a9000017 	ldw	r4,0(r21)
    45ec:	a9400117 	ldw	r5,4(r21)
    45f0:	ad400204 	addi	r21,r21,8
    45f4:	99800017 	ldw	r6,0(r19)
    45f8:	99c00117 	ldw	r7,4(r19)
    45fc:	94800044 	addi	r18,r18,1
    4600:	0005e000 	call	5e00 <__muldf3>
    4604:	e009883a 	mov	r4,fp
    4608:	b80b883a 	mov	r5,r23
    460c:	100d883a 	mov	r6,r2
    4610:	180f883a 	mov	r7,r3
    4614:	00053f00 	call	53f0 <__adddf3>
    4618:	1039883a 	mov	fp,r2
    461c:	182f883a 	mov	r23,r3
    4620:	b4bfef0e 	bge	r22,r18,45e0 <__alt_exception_stack_pointer+0xf80045e0>
    4624:	a00490fa 	slli	r2,r20,3
    4628:	da008c17 	ldw	r8,560(sp)
    462c:	843ffe04 	addi	r16,r16,-8
    4630:	d885883a 	add	r2,sp,r2
    4634:	10802804 	addi	r2,r2,160
    4638:	17000015 	stw	fp,0(r2)
    463c:	15c00115 	stw	r23,4(r2)
    4640:	a5000044 	addi	r20,r20,1
    4644:	823fdb1e 	bne	r16,r8,45b4 <__alt_exception_stack_pointer+0xf80045b4>
    4648:	da00a617 	ldw	r8,664(sp)
    464c:	00800084 	movi	r2,2
    4650:	12006616 	blt	r2,r8,47ec <__kernel_rem_pio2+0x9f4>
    4654:	0200de16 	blt	zero,r8,49d0 <__kernel_rem_pio2+0xbd8>
    4658:	4000141e 	bne	r8,zero,46ac <__kernel_rem_pio2+0x8b4>
    465c:	da008e17 	ldw	r8,568(sp)
    4660:	d8802804 	addi	r2,sp,160
    4664:	0007883a 	mov	r3,zero
    4668:	1225883a 	add	r18,r2,r8
    466c:	043fffc4 	movi	r16,-1
    4670:	0005883a 	mov	r2,zero
    4674:	91800017 	ldw	r6,0(r18)
    4678:	91c00117 	ldw	r7,4(r18)
    467c:	1009883a 	mov	r4,r2
    4680:	180b883a 	mov	r5,r3
    4684:	8c7fffc4 	addi	r17,r17,-1
    4688:	00053f00 	call	53f0 <__adddf3>
    468c:	94bffe04 	addi	r18,r18,-8
    4690:	8c3ff81e 	bne	r17,r16,4674 <__alt_exception_stack_pointer+0xf8004674>
    4694:	da008d17 	ldw	r8,564(sp)
    4698:	40000126 	beq	r8,zero,46a0 <__kernel_rem_pio2+0x8a8>
    469c:	18e0003c 	xorhi	r3,r3,32768
    46a0:	da008f17 	ldw	r8,572(sp)
    46a4:	40800015 	stw	r2,0(r8)
    46a8:	40c00115 	stw	r3,4(r8)
    46ac:	da009117 	ldw	r8,580(sp)
    46b0:	408001cc 	andi	r2,r8,7
    46b4:	dfc0a517 	ldw	ra,660(sp)
    46b8:	df00a417 	ldw	fp,656(sp)
    46bc:	ddc0a317 	ldw	r23,652(sp)
    46c0:	dd80a217 	ldw	r22,648(sp)
    46c4:	dd40a117 	ldw	r21,644(sp)
    46c8:	dd00a017 	ldw	r20,640(sp)
    46cc:	dcc09f17 	ldw	r19,636(sp)
    46d0:	dc809e17 	ldw	r18,632(sp)
    46d4:	dc409d17 	ldw	r17,628(sp)
    46d8:	dc009c17 	ldw	r16,624(sp)
    46dc:	dec0a604 	addi	sp,sp,664
    46e0:	f800283a 	ret
    46e4:	8c400044 	addi	r17,r17,1
    46e8:	04810d0e 	bge	zero,r18,4b20 <__kernel_rem_pio2+0xd28>
    46ec:	04c00084 	movi	r19,2
    46f0:	003eac06 	br	41a4 <__alt_exception_stack_pointer+0xf80041a4>
    46f4:	0039883a 	mov	fp,zero
    46f8:	002f883a 	mov	r23,zero
    46fc:	003fc906 	br	4624 <__alt_exception_stack_pointer+0xf8004624>
    4700:	0029883a 	mov	r20,zero
    4704:	003ebd06 	br	41fc <__alt_exception_stack_pointer+0xf80041fc>
    4708:	05000044 	movi	r20,1
    470c:	003eef06 	br	42cc <__alt_exception_stack_pointer+0xf80042cc>
    4710:	4029883a 	mov	r20,r8
    4714:	da009017 	ldw	r8,576(sp)
    4718:	a809883a 	mov	r4,r21
    471c:	a00b883a 	mov	r5,r20
    4720:	020dc83a 	sub	r6,zero,r8
    4724:	dc409115 	stw	r17,580(sp)
    4728:	dd809417 	ldw	r22,592(sp)
    472c:	dcc08d15 	stw	r19,564(sp)
    4730:	000505c0 	call	505c <scalbn>
    4734:	000d883a 	mov	r6,zero
    4738:	01d05c34 	movhi	r7,16752
    473c:	1009883a 	mov	r4,r2
    4740:	180b883a 	mov	r5,r3
    4744:	102b883a 	mov	r21,r2
    4748:	1823883a 	mov	r17,r3
    474c:	0005d240 	call	5d24 <__gedf2>
    4750:	1000e916 	blt	r2,zero,4af8 <__kernel_rem_pio2+0xd00>
    4754:	000d883a 	mov	r6,zero
    4758:	01cf9c34 	movhi	r7,15984
    475c:	880b883a 	mov	r5,r17
    4760:	a809883a 	mov	r4,r21
    4764:	0005e000 	call	5e00 <__muldf3>
    4768:	180b883a 	mov	r5,r3
    476c:	1009883a 	mov	r4,r2
    4770:	0006f680 	call	6f68 <__fixdfsi>
    4774:	1029883a 	mov	r20,r2
    4778:	9485883a 	add	r2,r18,r18
    477c:	1085883a 	add	r2,r2,r2
    4780:	a009883a 	mov	r4,r20
    4784:	d8a1883a 	add	r16,sp,r2
    4788:	0006fe80 	call	6fe8 <__floatsidf>
    478c:	000d883a 	mov	r6,zero
    4790:	01d05c34 	movhi	r7,16752
    4794:	1009883a 	mov	r4,r2
    4798:	180b883a 	mov	r5,r3
    479c:	0005e000 	call	5e00 <__muldf3>
    47a0:	880b883a 	mov	r5,r17
    47a4:	100d883a 	mov	r6,r2
    47a8:	180f883a 	mov	r7,r3
    47ac:	a809883a 	mov	r4,r21
    47b0:	000666c0 	call	666c <__subdf3>
    47b4:	180b883a 	mov	r5,r3
    47b8:	1009883a 	mov	r4,r2
    47bc:	0006f680 	call	6f68 <__fixdfsi>
    47c0:	da009017 	ldw	r8,576(sp)
    47c4:	94400044 	addi	r17,r18,1
    47c8:	8c47883a 	add	r3,r17,r17
    47cc:	84007804 	addi	r16,r16,480
    47d0:	18c7883a 	add	r3,r3,r3
    47d4:	80800015 	stw	r2,0(r16)
    47d8:	d8c7883a 	add	r3,sp,r3
    47dc:	42000604 	addi	r8,r8,24
    47e0:	da009015 	stw	r8,576(sp)
    47e4:	1d007815 	stw	r20,480(r3)
    47e8:	003f4b06 	br	4518 <__alt_exception_stack_pointer+0xf8004518>
    47ec:	da00a617 	ldw	r8,664(sp)
    47f0:	008000c4 	movi	r2,3
    47f4:	40bfad1e 	bne	r8,r2,46ac <__alt_exception_stack_pointer+0xf80046ac>
    47f8:	0440bc0e 	bge	zero,r17,4aec <__kernel_rem_pio2+0xcf4>
    47fc:	da008e17 	ldw	r8,568(sp)
    4800:	882090fa 	slli	r16,r17,3
    4804:	dd402804 	addi	r21,sp,160
    4808:	da05883a 	add	r2,sp,r8
    480c:	10802804 	addi	r2,r2,160
    4810:	15c00017 	ldw	r23,0(r2)
    4814:	15800117 	ldw	r22,4(r2)
    4818:	8029883a 	mov	r20,r16
    481c:	843ffe04 	addi	r16,r16,-8
    4820:	ac21883a 	add	r16,r21,r16
    4824:	ad29883a 	add	r20,r21,r20
    4828:	dac02604 	addi	r11,sp,152
    482c:	8811883a 	mov	r8,r17
    4830:	84400017 	ldw	r17,0(r16)
    4834:	87000117 	ldw	fp,4(r16)
    4838:	b80d883a 	mov	r6,r23
    483c:	b00f883a 	mov	r7,r22
    4840:	8809883a 	mov	r4,r17
    4844:	e00b883a 	mov	r5,fp
    4848:	da009b15 	stw	r8,620(sp)
    484c:	dac09915 	stw	r11,612(sp)
    4850:	00053f00 	call	53f0 <__adddf3>
    4854:	100d883a 	mov	r6,r2
    4858:	180f883a 	mov	r7,r3
    485c:	8809883a 	mov	r4,r17
    4860:	e00b883a 	mov	r5,fp
    4864:	1027883a 	mov	r19,r2
    4868:	1825883a 	mov	r18,r3
    486c:	000666c0 	call	666c <__subdf3>
    4870:	b80d883a 	mov	r6,r23
    4874:	b00f883a 	mov	r7,r22
    4878:	1009883a 	mov	r4,r2
    487c:	180b883a 	mov	r5,r3
    4880:	00053f00 	call	53f0 <__adddf3>
    4884:	dac09917 	ldw	r11,612(sp)
    4888:	a0800015 	stw	r2,0(r20)
    488c:	a0c00115 	stw	r3,4(r20)
    4890:	84c00015 	stw	r19,0(r16)
    4894:	84800115 	stw	r18,4(r16)
    4898:	843ffe04 	addi	r16,r16,-8
    489c:	a53ffe04 	addi	r20,r20,-8
    48a0:	982f883a 	mov	r23,r19
    48a4:	902d883a 	mov	r22,r18
    48a8:	da009b17 	ldw	r8,620(sp)
    48ac:	5c3fe01e 	bne	r11,r16,4830 <__alt_exception_stack_pointer+0xf8004830>
    48b0:	00800044 	movi	r2,1
    48b4:	12008d0e 	bge	r2,r8,4aec <__kernel_rem_pio2+0xcf4>
    48b8:	402090fa 	slli	r16,r8,3
    48bc:	da008e17 	ldw	r8,568(sp)
    48c0:	8023883a 	mov	r17,r16
    48c4:	da05883a 	add	r2,sp,r8
    48c8:	10802804 	addi	r2,r2,160
    48cc:	15800017 	ldw	r22,0(r2)
    48d0:	15000117 	ldw	r20,4(r2)
    48d4:	ac63883a 	add	r17,r21,r17
    48d8:	843ffe04 	addi	r16,r16,-8
    48dc:	ac21883a 	add	r16,r21,r16
    48e0:	8825883a 	mov	r18,r17
    48e4:	8811883a 	mov	r8,r17
    48e8:	84400017 	ldw	r17,0(r16)
    48ec:	87000117 	ldw	fp,4(r16)
    48f0:	b009883a 	mov	r4,r22
    48f4:	a00b883a 	mov	r5,r20
    48f8:	880d883a 	mov	r6,r17
    48fc:	e00f883a 	mov	r7,fp
    4900:	da009b15 	stw	r8,620(sp)
    4904:	00053f00 	call	53f0 <__adddf3>
    4908:	100d883a 	mov	r6,r2
    490c:	180f883a 	mov	r7,r3
    4910:	8809883a 	mov	r4,r17
    4914:	e00b883a 	mov	r5,fp
    4918:	102f883a 	mov	r23,r2
    491c:	1827883a 	mov	r19,r3
    4920:	000666c0 	call	666c <__subdf3>
    4924:	b00d883a 	mov	r6,r22
    4928:	a00f883a 	mov	r7,r20
    492c:	1009883a 	mov	r4,r2
    4930:	180b883a 	mov	r5,r3
    4934:	00053f00 	call	53f0 <__adddf3>
    4938:	90800015 	stw	r2,0(r18)
    493c:	90c00115 	stw	r3,4(r18)
    4940:	85c00015 	stw	r23,0(r16)
    4944:	84c00115 	stw	r19,4(r16)
    4948:	843ffe04 	addi	r16,r16,-8
    494c:	94bffe04 	addi	r18,r18,-8
    4950:	b82d883a 	mov	r22,r23
    4954:	9829883a 	mov	r20,r19
    4958:	da009b17 	ldw	r8,620(sp)
    495c:	ac3fe21e 	bne	r21,r16,48e8 <__alt_exception_stack_pointer+0xf80048e8>
    4960:	4023883a 	mov	r17,r8
    4964:	dc002a04 	addi	r16,sp,168
    4968:	0005883a 	mov	r2,zero
    496c:	0007883a 	mov	r3,zero
    4970:	89800017 	ldw	r6,0(r17)
    4974:	89c00117 	ldw	r7,4(r17)
    4978:	1009883a 	mov	r4,r2
    497c:	8c7ffe04 	addi	r17,r17,-8
    4980:	180b883a 	mov	r5,r3
    4984:	00053f00 	call	53f0 <__adddf3>
    4988:	847ff91e 	bne	r16,r17,4970 <__alt_exception_stack_pointer+0xf8004970>
    498c:	da008d17 	ldw	r8,564(sp)
    4990:	40004726 	beq	r8,zero,4ab0 <__kernel_rem_pio2+0xcb8>
    4994:	d9002b17 	ldw	r4,172(sp)
    4998:	d9402917 	ldw	r5,164(sp)
    499c:	d9802a17 	ldw	r6,168(sp)
    49a0:	da008f17 	ldw	r8,572(sp)
    49a4:	d9c02817 	ldw	r7,160(sp)
    49a8:	2960003c 	xorhi	r5,r5,32768
    49ac:	2120003c 	xorhi	r4,r4,32768
    49b0:	18e0003c 	xorhi	r3,r3,32768
    49b4:	41c00015 	stw	r7,0(r8)
    49b8:	41400115 	stw	r5,4(r8)
    49bc:	41800215 	stw	r6,8(r8)
    49c0:	41000315 	stw	r4,12(r8)
    49c4:	40800415 	stw	r2,16(r8)
    49c8:	40c00515 	stw	r3,20(r8)
    49cc:	003f3706 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    49d0:	da008e17 	ldw	r8,568(sp)
    49d4:	d8802804 	addi	r2,sp,160
    49d8:	dc002604 	addi	r16,sp,152
    49dc:	1225883a 	add	r18,r2,r8
    49e0:	0007883a 	mov	r3,zero
    49e4:	0005883a 	mov	r2,zero
    49e8:	91800017 	ldw	r6,0(r18)
    49ec:	91c00117 	ldw	r7,4(r18)
    49f0:	1009883a 	mov	r4,r2
    49f4:	94bffe04 	addi	r18,r18,-8
    49f8:	180b883a 	mov	r5,r3
    49fc:	00053f00 	call	53f0 <__adddf3>
    4a00:	943ff91e 	bne	r18,r16,49e8 <__alt_exception_stack_pointer+0xf80049e8>
    4a04:	da008d17 	ldw	r8,564(sp)
    4a08:	d9002817 	ldw	r4,160(sp)
    4a0c:	d9402917 	ldw	r5,164(sp)
    4a10:	40001a26 	beq	r8,zero,4a7c <__kernel_rem_pio2+0xc84>
    4a14:	da008f17 	ldw	r8,572(sp)
    4a18:	19a0003c 	xorhi	r6,r3,32768
    4a1c:	180f883a 	mov	r7,r3
    4a20:	41800115 	stw	r6,4(r8)
    4a24:	40800015 	stw	r2,0(r8)
    4a28:	100d883a 	mov	r6,r2
    4a2c:	000666c0 	call	666c <__subdf3>
    4a30:	04400c0e 	bge	zero,r17,4a64 <__kernel_rem_pio2+0xc6c>
    4a34:	dc002a04 	addi	r16,sp,168
    4a38:	04800044 	movi	r18,1
    4a3c:	81800017 	ldw	r6,0(r16)
    4a40:	81c00117 	ldw	r7,4(r16)
    4a44:	1009883a 	mov	r4,r2
    4a48:	180b883a 	mov	r5,r3
    4a4c:	94800044 	addi	r18,r18,1
    4a50:	00053f00 	call	53f0 <__adddf3>
    4a54:	84000204 	addi	r16,r16,8
    4a58:	8cbff80e 	bge	r17,r18,4a3c <__alt_exception_stack_pointer+0xf8004a3c>
    4a5c:	da008d17 	ldw	r8,564(sp)
    4a60:	40004226 	beq	r8,zero,4b6c <__kernel_rem_pio2+0xd74>
    4a64:	da008f17 	ldw	r8,572(sp)
    4a68:	1009883a 	mov	r4,r2
    4a6c:	18a0003c 	xorhi	r2,r3,32768
    4a70:	41000215 	stw	r4,8(r8)
    4a74:	40800315 	stw	r2,12(r8)
    4a78:	003f0c06 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    4a7c:	da008f17 	ldw	r8,572(sp)
    4a80:	100d883a 	mov	r6,r2
    4a84:	180f883a 	mov	r7,r3
    4a88:	40800015 	stw	r2,0(r8)
    4a8c:	40c00115 	stw	r3,4(r8)
    4a90:	000666c0 	call	666c <__subdf3>
    4a94:	047fe716 	blt	zero,r17,4a34 <__alt_exception_stack_pointer+0xf8004a34>
    4a98:	da008f17 	ldw	r8,572(sp)
    4a9c:	1009883a 	mov	r4,r2
    4aa0:	1805883a 	mov	r2,r3
    4aa4:	41000215 	stw	r4,8(r8)
    4aa8:	40800315 	stw	r2,12(r8)
    4aac:	003eff06 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    4ab0:	da008f17 	ldw	r8,572(sp)
    4ab4:	d9802817 	ldw	r6,160(sp)
    4ab8:	d9402a17 	ldw	r5,168(sp)
    4abc:	d9002b17 	ldw	r4,172(sp)
    4ac0:	41800015 	stw	r6,0(r8)
    4ac4:	d9802917 	ldw	r6,164(sp)
    4ac8:	41400215 	stw	r5,8(r8)
    4acc:	41000315 	stw	r4,12(r8)
    4ad0:	41800115 	stw	r6,4(r8)
    4ad4:	40800415 	stw	r2,16(r8)
    4ad8:	40c00515 	stw	r3,20(r8)
    4adc:	003ef306 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    4ae0:	da00a617 	ldw	r8,664(sp)
    4ae4:	008000c4 	movi	r2,3
    4ae8:	40bef01e 	bne	r8,r2,46ac <__alt_exception_stack_pointer+0xf80046ac>
    4aec:	0005883a 	mov	r2,zero
    4af0:	0007883a 	mov	r3,zero
    4af4:	003fa506 	br	498c <__alt_exception_stack_pointer+0xf800498c>
    4af8:	9485883a 	add	r2,r18,r18
    4afc:	1085883a 	add	r2,r2,r2
    4b00:	d8a1883a 	add	r16,sp,r2
    4b04:	880b883a 	mov	r5,r17
    4b08:	a809883a 	mov	r4,r21
    4b0c:	84007804 	addi	r16,r16,480
    4b10:	0006f680 	call	6f68 <__fixdfsi>
    4b14:	80800015 	stw	r2,0(r16)
    4b18:	9023883a 	mov	r17,r18
    4b1c:	003e7e06 	br	4518 <__alt_exception_stack_pointer+0xf8004518>
    4b20:	a80d883a 	mov	r6,r21
    4b24:	400f883a 	mov	r7,r8
    4b28:	0009883a 	mov	r4,zero
    4b2c:	014ffc34 	movhi	r5,16368
    4b30:	000666c0 	call	666c <__subdf3>
    4b34:	102b883a 	mov	r21,r2
    4b38:	1811883a 	mov	r8,r3
    4b3c:	04c00084 	movi	r19,2
    4b40:	003dc006 	br	4244 <__alt_exception_stack_pointer+0xf8004244>
    4b44:	da00a617 	ldw	r8,664(sp)
    4b48:	00800084 	movi	r2,2
    4b4c:	123fe416 	blt	r2,r8,4ae0 <__alt_exception_stack_pointer+0xf8004ae0>
    4b50:	02000c16 	blt	zero,r8,4b84 <__kernel_rem_pio2+0xd8c>
    4b54:	403ed51e 	bne	r8,zero,46ac <__alt_exception_stack_pointer+0xf80046ac>
    4b58:	0005883a 	mov	r2,zero
    4b5c:	0007883a 	mov	r3,zero
    4b60:	003ecc06 	br	4694 <__alt_exception_stack_pointer+0xf8004694>
    4b64:	d8009215 	stw	zero,584(sp)
    4b68:	003cc106 	br	3e70 <__alt_exception_stack_pointer+0xf8003e70>
    4b6c:	da008f17 	ldw	r8,572(sp)
    4b70:	1009883a 	mov	r4,r2
    4b74:	1805883a 	mov	r2,r3
    4b78:	41000215 	stw	r4,8(r8)
    4b7c:	40800315 	stw	r2,12(r8)
    4b80:	003eca06 	br	46ac <__alt_exception_stack_pointer+0xf80046ac>
    4b84:	0005883a 	mov	r2,zero
    4b88:	0007883a 	mov	r3,zero
    4b8c:	003f9d06 	br	4a04 <__alt_exception_stack_pointer+0xf8004a04>

00004b90 <__kernel_sin>:
    4b90:	00a00034 	movhi	r2,32768
    4b94:	defff404 	addi	sp,sp,-48
    4b98:	10bfffc4 	addi	r2,r2,-1
    4b9c:	00cf9034 	movhi	r3,15936
    4ba0:	ddc00915 	stw	r23,36(sp)
    4ba4:	dd800815 	stw	r22,32(sp)
    4ba8:	dc400315 	stw	r17,12(sp)
    4bac:	dc000215 	stw	r16,8(sp)
    4bb0:	dfc00b15 	stw	ra,44(sp)
    4bb4:	df000a15 	stw	fp,40(sp)
    4bb8:	dd400715 	stw	r21,28(sp)
    4bbc:	dd000615 	stw	r20,24(sp)
    4bc0:	dcc00515 	stw	r19,20(sp)
    4bc4:	dc800415 	stw	r18,16(sp)
    4bc8:	2884703a 	and	r2,r5,r2
    4bcc:	18ffffc4 	addi	r3,r3,-1
    4bd0:	2821883a 	mov	r16,r5
    4bd4:	2023883a 	mov	r17,r4
    4bd8:	302f883a 	mov	r23,r6
    4bdc:	382d883a 	mov	r22,r7
    4be0:	18800216 	blt	r3,r2,4bec <__kernel_sin+0x5c>
    4be4:	0006f680 	call	6f68 <__fixdfsi>
    4be8:	10009926 	beq	r2,zero,4e50 <__kernel_sin+0x2c0>
    4bec:	880d883a 	mov	r6,r17
    4bf0:	800f883a 	mov	r7,r16
    4bf4:	8809883a 	mov	r4,r17
    4bf8:	800b883a 	mov	r5,r16
    4bfc:	0005e000 	call	5e00 <__muldf3>
    4c00:	100d883a 	mov	r6,r2
    4c04:	180f883a 	mov	r7,r3
    4c08:	8809883a 	mov	r4,r17
    4c0c:	800b883a 	mov	r5,r16
    4c10:	1027883a 	mov	r19,r2
    4c14:	1825883a 	mov	r18,r3
    4c18:	0005e000 	call	5e00 <__muldf3>
    4c1c:	0196b434 	movhi	r6,23248
    4c20:	01cf79b4 	movhi	r7,15846
    4c24:	31b55f04 	addi	r6,r6,-10884
    4c28:	39f64e84 	addi	r7,r7,-9926
    4c2c:	9809883a 	mov	r4,r19
    4c30:	900b883a 	mov	r5,r18
    4c34:	102b883a 	mov	r21,r2
    4c38:	1829883a 	mov	r20,r3
    4c3c:	0005e000 	call	5e00 <__muldf3>
    4c40:	01a28b34 	movhi	r6,35372
    4c44:	01cf96f4 	movhi	r7,15963
    4c48:	31a73ac4 	addi	r6,r6,-25365
    4c4c:	39f97984 	addi	r7,r7,-6682
    4c50:	1009883a 	mov	r4,r2
    4c54:	180b883a 	mov	r5,r3
    4c58:	000666c0 	call	666c <__subdf3>
    4c5c:	980d883a 	mov	r6,r19
    4c60:	900f883a 	mov	r7,r18
    4c64:	1009883a 	mov	r4,r2
    4c68:	180b883a 	mov	r5,r3
    4c6c:	0005e000 	call	5e00 <__muldf3>
    4c70:	0195ecb4 	movhi	r6,22450
    4c74:	01cfb1f4 	movhi	r7,16071
    4c78:	31bf9f44 	addi	r6,r6,-387
    4c7c:	39c778c4 	addi	r7,r7,7651
    4c80:	1009883a 	mov	r4,r2
    4c84:	180b883a 	mov	r5,r3
    4c88:	00053f00 	call	53f0 <__adddf3>
    4c8c:	980d883a 	mov	r6,r19
    4c90:	900f883a 	mov	r7,r18
    4c94:	1009883a 	mov	r4,r2
    4c98:	180b883a 	mov	r5,r3
    4c9c:	0005e000 	call	5e00 <__muldf3>
    4ca0:	01867074 	movhi	r6,6593
    4ca4:	01cfcab4 	movhi	r7,16170
    4ca8:	31987544 	addi	r6,r6,25045
    4cac:	39c06804 	addi	r7,r7,416
    4cb0:	1009883a 	mov	r4,r2
    4cb4:	180b883a 	mov	r5,r3
    4cb8:	000666c0 	call	666c <__subdf3>
    4cbc:	980d883a 	mov	r6,r19
    4cc0:	900f883a 	mov	r7,r18
    4cc4:	1009883a 	mov	r4,r2
    4cc8:	180b883a 	mov	r5,r3
    4ccc:	0005e000 	call	5e00 <__muldf3>
    4cd0:	01844474 	movhi	r6,4369
    4cd4:	01cfe074 	movhi	r7,16257
    4cd8:	31be2984 	addi	r6,r6,-1882
    4cdc:	39c44444 	addi	r7,r7,4369
    4ce0:	1009883a 	mov	r4,r2
    4ce4:	180b883a 	mov	r5,r3
    4ce8:	00053f00 	call	53f0 <__adddf3>
    4cec:	1011883a 	mov	r8,r2
    4cf0:	d8800c17 	ldw	r2,48(sp)
    4cf4:	1839883a 	mov	fp,r3
    4cf8:	10003e26 	beq	r2,zero,4df4 <__kernel_sin+0x264>
    4cfc:	000d883a 	mov	r6,zero
    4d00:	01cff834 	movhi	r7,16352
    4d04:	b809883a 	mov	r4,r23
    4d08:	b00b883a 	mov	r5,r22
    4d0c:	da000015 	stw	r8,0(sp)
    4d10:	0005e000 	call	5e00 <__muldf3>
    4d14:	da000017 	ldw	r8,0(sp)
    4d18:	e00f883a 	mov	r7,fp
    4d1c:	a809883a 	mov	r4,r21
    4d20:	400d883a 	mov	r6,r8
    4d24:	a00b883a 	mov	r5,r20
    4d28:	d8c00115 	stw	r3,4(sp)
    4d2c:	d8800015 	stw	r2,0(sp)
    4d30:	0005e000 	call	5e00 <__muldf3>
    4d34:	da800017 	ldw	r10,0(sp)
    4d38:	da400117 	ldw	r9,4(sp)
    4d3c:	100d883a 	mov	r6,r2
    4d40:	5009883a 	mov	r4,r10
    4d44:	480b883a 	mov	r5,r9
    4d48:	180f883a 	mov	r7,r3
    4d4c:	000666c0 	call	666c <__subdf3>
    4d50:	980d883a 	mov	r6,r19
    4d54:	900f883a 	mov	r7,r18
    4d58:	1009883a 	mov	r4,r2
    4d5c:	180b883a 	mov	r5,r3
    4d60:	0005e000 	call	5e00 <__muldf3>
    4d64:	b80d883a 	mov	r6,r23
    4d68:	b00f883a 	mov	r7,r22
    4d6c:	1009883a 	mov	r4,r2
    4d70:	180b883a 	mov	r5,r3
    4d74:	000666c0 	call	666c <__subdf3>
    4d78:	01955574 	movhi	r6,21845
    4d7c:	01cff174 	movhi	r7,16325
    4d80:	31955244 	addi	r6,r6,21833
    4d84:	39d55544 	addi	r7,r7,21845
    4d88:	a809883a 	mov	r4,r21
    4d8c:	a00b883a 	mov	r5,r20
    4d90:	1027883a 	mov	r19,r2
    4d94:	1825883a 	mov	r18,r3
    4d98:	0005e000 	call	5e00 <__muldf3>
    4d9c:	100d883a 	mov	r6,r2
    4da0:	180f883a 	mov	r7,r3
    4da4:	9809883a 	mov	r4,r19
    4da8:	900b883a 	mov	r5,r18
    4dac:	00053f00 	call	53f0 <__adddf3>
    4db0:	100d883a 	mov	r6,r2
    4db4:	180f883a 	mov	r7,r3
    4db8:	8809883a 	mov	r4,r17
    4dbc:	800b883a 	mov	r5,r16
    4dc0:	000666c0 	call	666c <__subdf3>
    4dc4:	dfc00b17 	ldw	ra,44(sp)
    4dc8:	df000a17 	ldw	fp,40(sp)
    4dcc:	ddc00917 	ldw	r23,36(sp)
    4dd0:	dd800817 	ldw	r22,32(sp)
    4dd4:	dd400717 	ldw	r21,28(sp)
    4dd8:	dd000617 	ldw	r20,24(sp)
    4ddc:	dcc00517 	ldw	r19,20(sp)
    4de0:	dc800417 	ldw	r18,16(sp)
    4de4:	dc400317 	ldw	r17,12(sp)
    4de8:	dc000217 	ldw	r16,8(sp)
    4dec:	dec00c04 	addi	sp,sp,48
    4df0:	f800283a 	ret
    4df4:	400d883a 	mov	r6,r8
    4df8:	9809883a 	mov	r4,r19
    4dfc:	900b883a 	mov	r5,r18
    4e00:	180f883a 	mov	r7,r3
    4e04:	0005e000 	call	5e00 <__muldf3>
    4e08:	01955574 	movhi	r6,21845
    4e0c:	01cff174 	movhi	r7,16325
    4e10:	31955244 	addi	r6,r6,21833
    4e14:	39d55544 	addi	r7,r7,21845
    4e18:	1009883a 	mov	r4,r2
    4e1c:	180b883a 	mov	r5,r3
    4e20:	000666c0 	call	666c <__subdf3>
    4e24:	a80d883a 	mov	r6,r21
    4e28:	a00f883a 	mov	r7,r20
    4e2c:	1009883a 	mov	r4,r2
    4e30:	180b883a 	mov	r5,r3
    4e34:	0005e000 	call	5e00 <__muldf3>
    4e38:	880d883a 	mov	r6,r17
    4e3c:	800f883a 	mov	r7,r16
    4e40:	1009883a 	mov	r4,r2
    4e44:	180b883a 	mov	r5,r3
    4e48:	00053f00 	call	53f0 <__adddf3>
    4e4c:	003fdd06 	br	4dc4 <__alt_exception_stack_pointer+0xf8004dc4>
    4e50:	8805883a 	mov	r2,r17
    4e54:	8007883a 	mov	r3,r16
    4e58:	003fda06 	br	4dc4 <__alt_exception_stack_pointer+0xf8004dc4>

00004e5c <fabs>:
    4e5c:	00e00034 	movhi	r3,32768
    4e60:	18ffffc4 	addi	r3,r3,-1
    4e64:	2005883a 	mov	r2,r4
    4e68:	28c6703a 	and	r3,r5,r3
    4e6c:	f800283a 	ret

00004e70 <floor>:
    4e70:	2811d53a 	srai	r8,r5,20
    4e74:	defffa04 	addi	sp,sp,-24
    4e78:	dcc00315 	stw	r19,12(sp)
    4e7c:	4201ffcc 	andi	r8,r8,2047
    4e80:	dc800215 	stw	r18,8(sp)
    4e84:	dc400115 	stw	r17,4(sp)
    4e88:	dc000015 	stw	r16,0(sp)
    4e8c:	dfc00515 	stw	ra,20(sp)
    4e90:	dd000415 	stw	r20,16(sp)
    4e94:	44bf0044 	addi	r18,r8,-1023
    4e98:	018004c4 	movi	r6,19
    4e9c:	2821883a 	mov	r16,r5
    4ea0:	2005883a 	mov	r2,r4
    4ea4:	280f883a 	mov	r7,r5
    4ea8:	2827883a 	mov	r19,r5
    4eac:	2023883a 	mov	r17,r4
    4eb0:	34801916 	blt	r6,r18,4f18 <floor+0xa8>
    4eb4:	90003c16 	blt	r18,zero,4fa8 <floor+0x138>
    4eb8:	05000434 	movhi	r20,16
    4ebc:	a53fffc4 	addi	r20,r20,-1
    4ec0:	a4a9d83a 	sra	r20,r20,r18
    4ec4:	2d0c703a 	and	r6,r5,r20
    4ec8:	310cb03a 	or	r6,r6,r4
    4ecc:	30001626 	beq	r6,zero,4f28 <floor+0xb8>
    4ed0:	01a20034 	movhi	r6,34816
    4ed4:	01df8e34 	movhi	r7,32312
    4ed8:	319d6704 	addi	r6,r6,30108
    4edc:	39f90f04 	addi	r7,r7,-7108
    4ee0:	00053f00 	call	53f0 <__adddf3>
    4ee4:	000d883a 	mov	r6,zero
    4ee8:	000f883a 	mov	r7,zero
    4eec:	1009883a 	mov	r4,r2
    4ef0:	180b883a 	mov	r5,r3
    4ef4:	0005d240 	call	5d24 <__gedf2>
    4ef8:	0080040e 	bge	zero,r2,4f0c <floor+0x9c>
    4efc:	80003c16 	blt	r16,zero,4ff0 <floor+0x180>
    4f00:	0520303a 	nor	r16,zero,r20
    4f04:	84e0703a 	and	r16,r16,r19
    4f08:	0023883a 	mov	r17,zero
    4f0c:	8805883a 	mov	r2,r17
    4f10:	8007883a 	mov	r3,r16
    4f14:	00000506 	br	4f2c <floor+0xbc>
    4f18:	01800cc4 	movi	r6,51
    4f1c:	34800b0e 	bge	r6,r18,4f4c <floor+0xdc>
    4f20:	01810004 	movi	r6,1024
    4f24:	91802f26 	beq	r18,r6,4fe4 <floor+0x174>
    4f28:	3807883a 	mov	r3,r7
    4f2c:	dfc00517 	ldw	ra,20(sp)
    4f30:	dd000417 	ldw	r20,16(sp)
    4f34:	dcc00317 	ldw	r19,12(sp)
    4f38:	dc800217 	ldw	r18,8(sp)
    4f3c:	dc400117 	ldw	r17,4(sp)
    4f40:	dc000017 	ldw	r16,0(sp)
    4f44:	dec00604 	addi	sp,sp,24
    4f48:	f800283a 	ret
    4f4c:	423efb44 	addi	r8,r8,-1043
    4f50:	053fffc4 	movi	r20,-1
    4f54:	a228d83a 	srl	r20,r20,r8
    4f58:	250c703a 	and	r6,r4,r20
    4f5c:	303ff226 	beq	r6,zero,4f28 <__alt_exception_stack_pointer+0xf8004f28>
    4f60:	01a20034 	movhi	r6,34816
    4f64:	01df8e34 	movhi	r7,32312
    4f68:	319d6704 	addi	r6,r6,30108
    4f6c:	39f90f04 	addi	r7,r7,-7108
    4f70:	00053f00 	call	53f0 <__adddf3>
    4f74:	000d883a 	mov	r6,zero
    4f78:	000f883a 	mov	r7,zero
    4f7c:	1009883a 	mov	r4,r2
    4f80:	180b883a 	mov	r5,r3
    4f84:	0005d240 	call	5d24 <__gedf2>
    4f88:	00bfe00e 	bge	zero,r2,4f0c <__alt_exception_stack_pointer+0xf8004f0c>
    4f8c:	80001c16 	blt	r16,zero,5000 <floor+0x190>
    4f90:	0510303a 	nor	r8,zero,r20
    4f94:	9821883a 	mov	r16,r19
    4f98:	8a22703a 	and	r17,r17,r8
    4f9c:	8805883a 	mov	r2,r17
    4fa0:	8007883a 	mov	r3,r16
    4fa4:	003fe106 	br	4f2c <__alt_exception_stack_pointer+0xf8004f2c>
    4fa8:	01a20034 	movhi	r6,34816
    4fac:	01df8e34 	movhi	r7,32312
    4fb0:	319d6704 	addi	r6,r6,30108
    4fb4:	39f90f04 	addi	r7,r7,-7108
    4fb8:	00053f00 	call	53f0 <__adddf3>
    4fbc:	000d883a 	mov	r6,zero
    4fc0:	000f883a 	mov	r7,zero
    4fc4:	1009883a 	mov	r4,r2
    4fc8:	180b883a 	mov	r5,r3
    4fcc:	0005d240 	call	5d24 <__gedf2>
    4fd0:	00bfce0e 	bge	zero,r2,4f0c <__alt_exception_stack_pointer+0xf8004f0c>
    4fd4:	80001516 	blt	r16,zero,502c <floor+0x1bc>
    4fd8:	0023883a 	mov	r17,zero
    4fdc:	0021883a 	mov	r16,zero
    4fe0:	003fca06 	br	4f0c <__alt_exception_stack_pointer+0xf8004f0c>
    4fe4:	200d883a 	mov	r6,r4
    4fe8:	00053f00 	call	53f0 <__adddf3>
    4fec:	003fcf06 	br	4f2c <__alt_exception_stack_pointer+0xf8004f2c>
    4ff0:	00800434 	movhi	r2,16
    4ff4:	14a5d83a 	sra	r18,r2,r18
    4ff8:	84a7883a 	add	r19,r16,r18
    4ffc:	003fc006 	br	4f00 <__alt_exception_stack_pointer+0xf8004f00>
    5000:	00800504 	movi	r2,20
    5004:	90801326 	beq	r18,r2,5054 <floor+0x1e4>
    5008:	00800d04 	movi	r2,52
    500c:	14a5c83a 	sub	r18,r2,r18
    5010:	00800044 	movi	r2,1
    5014:	1484983a 	sll	r2,r2,r18
    5018:	1445883a 	add	r2,r2,r17
    501c:	14400b2e 	bgeu	r2,r17,504c <floor+0x1dc>
    5020:	84c00044 	addi	r19,r16,1
    5024:	1023883a 	mov	r17,r2
    5028:	003fd906 	br	4f90 <__alt_exception_stack_pointer+0xf8004f90>
    502c:	00a00034 	movhi	r2,32768
    5030:	10bfffc4 	addi	r2,r2,-1
    5034:	8084703a 	and	r2,r16,r2
    5038:	1462b03a 	or	r17,r2,r17
    503c:	883fb326 	beq	r17,zero,4f0c <__alt_exception_stack_pointer+0xf8004f0c>
    5040:	0023883a 	mov	r17,zero
    5044:	042ffc34 	movhi	r16,49136
    5048:	003fb006 	br	4f0c <__alt_exception_stack_pointer+0xf8004f0c>
    504c:	1023883a 	mov	r17,r2
    5050:	003fcf06 	br	4f90 <__alt_exception_stack_pointer+0xf8004f90>
    5054:	84c00044 	addi	r19,r16,1
    5058:	003fcd06 	br	4f90 <__alt_exception_stack_pointer+0xf8004f90>

0000505c <scalbn>:
    505c:	2a1ffc2c 	andhi	r8,r5,32752
    5060:	4011d53a 	srai	r8,r8,20
    5064:	defffe04 	addi	sp,sp,-8
    5068:	dc000015 	stw	r16,0(sp)
    506c:	dfc00115 	stw	ra,4(sp)
    5070:	280f883a 	mov	r7,r5
    5074:	2015883a 	mov	r10,r4
    5078:	3021883a 	mov	r16,r6
    507c:	40001e1e 	bne	r8,zero,50f8 <scalbn+0x9c>
    5080:	00a00034 	movhi	r2,32768
    5084:	10bfffc4 	addi	r2,r2,-1
    5088:	2884703a 	and	r2,r5,r2
    508c:	1104b03a 	or	r2,r2,r4
    5090:	10002226 	beq	r2,zero,511c <scalbn+0xc0>
    5094:	01d0d434 	movhi	r7,17232
    5098:	000d883a 	mov	r6,zero
    509c:	0005e000 	call	5e00 <__muldf3>
    50a0:	013ffff4 	movhi	r4,65535
    50a4:	210f2c04 	addi	r4,r4,15536
    50a8:	1015883a 	mov	r10,r2
    50ac:	180f883a 	mov	r7,r3
    50b0:	81002a16 	blt	r16,r4,515c <scalbn+0x100>
    50b4:	191ffc2c 	andhi	r4,r3,32752
    50b8:	2009d53a 	srai	r4,r4,20
    50bc:	223ff284 	addi	r8,r4,-54
    50c0:	8211883a 	add	r8,r16,r8
    50c4:	0081ff84 	movi	r2,2046
    50c8:	12002f16 	blt	r2,r8,5188 <scalbn+0x12c>
    50cc:	0200190e 	bge	zero,r8,5134 <scalbn+0xd8>
    50d0:	4010953a 	slli	r8,r8,20
    50d4:	01600434 	movhi	r5,32784
    50d8:	297fffc4 	addi	r5,r5,-1
    50dc:	194e703a 	and	r7,r3,r5
    50e0:	5005883a 	mov	r2,r10
    50e4:	3a06b03a 	or	r3,r7,r8
    50e8:	dfc00117 	ldw	ra,4(sp)
    50ec:	dc000017 	ldw	r16,0(sp)
    50f0:	dec00204 	addi	sp,sp,8
    50f4:	f800283a 	ret
    50f8:	0081ffc4 	movi	r2,2047
    50fc:	2807883a 	mov	r3,r5
    5100:	40bfef1e 	bne	r8,r2,50c0 <__alt_exception_stack_pointer+0xf80050c0>
    5104:	200d883a 	mov	r6,r4
    5108:	00053f00 	call	53f0 <__adddf3>
    510c:	dfc00117 	ldw	ra,4(sp)
    5110:	dc000017 	ldw	r16,0(sp)
    5114:	dec00204 	addi	sp,sp,8
    5118:	f800283a 	ret
    511c:	2005883a 	mov	r2,r4
    5120:	2807883a 	mov	r3,r5
    5124:	dfc00117 	ldw	ra,4(sp)
    5128:	dc000017 	ldw	r16,0(sp)
    512c:	dec00204 	addi	sp,sp,8
    5130:	f800283a 	ret
    5134:	00bff2c4 	movi	r2,-53
    5138:	4080240e 	bge	r8,r2,51cc <scalbn+0x170>
    513c:	00b0d414 	movui	r2,50000
    5140:	14001116 	blt	r2,r16,5188 <scalbn+0x12c>
    5144:	0130be74 	movhi	r4,49913
    5148:	01406974 	movhi	r5,421
    514c:	213cd644 	addi	r4,r4,-3239
    5150:	295b87c4 	addi	r5,r5,28191
    5154:	500d883a 	mov	r6,r10
    5158:	00051f80 	call	51f8 <copysign>
    515c:	01b0be74 	movhi	r6,49913
    5160:	01c06974 	movhi	r7,421
    5164:	31bcd644 	addi	r6,r6,-3239
    5168:	39db87c4 	addi	r7,r7,28191
    516c:	1009883a 	mov	r4,r2
    5170:	180b883a 	mov	r5,r3
    5174:	0005e000 	call	5e00 <__muldf3>
    5178:	dfc00117 	ldw	ra,4(sp)
    517c:	dc000017 	ldw	r16,0(sp)
    5180:	dec00204 	addi	sp,sp,8
    5184:	f800283a 	ret
    5188:	01220034 	movhi	r4,34816
    518c:	015f8e34 	movhi	r5,32312
    5190:	500d883a 	mov	r6,r10
    5194:	211d6704 	addi	r4,r4,30108
    5198:	29790f04 	addi	r5,r5,-7108
    519c:	00051f80 	call	51f8 <copysign>
    51a0:	01a20034 	movhi	r6,34816
    51a4:	01df8e34 	movhi	r7,32312
    51a8:	319d6704 	addi	r6,r6,30108
    51ac:	39f90f04 	addi	r7,r7,-7108
    51b0:	1009883a 	mov	r4,r2
    51b4:	180b883a 	mov	r5,r3
    51b8:	0005e000 	call	5e00 <__muldf3>
    51bc:	dfc00117 	ldw	ra,4(sp)
    51c0:	dc000017 	ldw	r16,0(sp)
    51c4:	dec00204 	addi	sp,sp,8
    51c8:	f800283a 	ret
    51cc:	42000d84 	addi	r8,r8,54
    51d0:	4012953a 	slli	r9,r8,20
    51d4:	01e00434 	movhi	r7,32784
    51d8:	39ffffc4 	addi	r7,r7,-1
    51dc:	19ca703a 	and	r5,r3,r7
    51e0:	000d883a 	mov	r6,zero
    51e4:	01cf2434 	movhi	r7,15504
    51e8:	5009883a 	mov	r4,r10
    51ec:	494ab03a 	or	r5,r9,r5
    51f0:	0005e000 	call	5e00 <__muldf3>
    51f4:	003fbc06 	br	50e8 <__alt_exception_stack_pointer+0xf80050e8>

000051f8 <copysign>:
    51f8:	2005883a 	mov	r2,r4
    51fc:	01200034 	movhi	r4,32768
    5200:	213fffc4 	addi	r4,r4,-1
    5204:	38e0002c 	andhi	r3,r7,32768
    5208:	290a703a 	and	r5,r5,r4
    520c:	28c6b03a 	or	r3,r5,r3
    5210:	f800283a 	ret

00005214 <__divsi3>:
    5214:	20001b16 	blt	r4,zero,5284 <__divsi3+0x70>
    5218:	000f883a 	mov	r7,zero
    521c:	28001616 	blt	r5,zero,5278 <__divsi3+0x64>
    5220:	200d883a 	mov	r6,r4
    5224:	29001a2e 	bgeu	r5,r4,5290 <__divsi3+0x7c>
    5228:	00800804 	movi	r2,32
    522c:	00c00044 	movi	r3,1
    5230:	00000106 	br	5238 <__divsi3+0x24>
    5234:	10000d26 	beq	r2,zero,526c <__divsi3+0x58>
    5238:	294b883a 	add	r5,r5,r5
    523c:	10bfffc4 	addi	r2,r2,-1
    5240:	18c7883a 	add	r3,r3,r3
    5244:	293ffb36 	bltu	r5,r4,5234 <__alt_exception_stack_pointer+0xf8005234>
    5248:	0005883a 	mov	r2,zero
    524c:	18000726 	beq	r3,zero,526c <__divsi3+0x58>
    5250:	0005883a 	mov	r2,zero
    5254:	31400236 	bltu	r6,r5,5260 <__divsi3+0x4c>
    5258:	314dc83a 	sub	r6,r6,r5
    525c:	10c4b03a 	or	r2,r2,r3
    5260:	1806d07a 	srli	r3,r3,1
    5264:	280ad07a 	srli	r5,r5,1
    5268:	183ffa1e 	bne	r3,zero,5254 <__alt_exception_stack_pointer+0xf8005254>
    526c:	38000126 	beq	r7,zero,5274 <__divsi3+0x60>
    5270:	0085c83a 	sub	r2,zero,r2
    5274:	f800283a 	ret
    5278:	014bc83a 	sub	r5,zero,r5
    527c:	39c0005c 	xori	r7,r7,1
    5280:	003fe706 	br	5220 <__alt_exception_stack_pointer+0xf8005220>
    5284:	0109c83a 	sub	r4,zero,r4
    5288:	01c00044 	movi	r7,1
    528c:	003fe306 	br	521c <__alt_exception_stack_pointer+0xf800521c>
    5290:	00c00044 	movi	r3,1
    5294:	003fee06 	br	5250 <__alt_exception_stack_pointer+0xf8005250>

00005298 <__modsi3>:
    5298:	20001716 	blt	r4,zero,52f8 <__modsi3+0x60>
    529c:	000f883a 	mov	r7,zero
    52a0:	2005883a 	mov	r2,r4
    52a4:	28001216 	blt	r5,zero,52f0 <__modsi3+0x58>
    52a8:	2900162e 	bgeu	r5,r4,5304 <__modsi3+0x6c>
    52ac:	01800804 	movi	r6,32
    52b0:	00c00044 	movi	r3,1
    52b4:	00000106 	br	52bc <__modsi3+0x24>
    52b8:	30000a26 	beq	r6,zero,52e4 <__modsi3+0x4c>
    52bc:	294b883a 	add	r5,r5,r5
    52c0:	31bfffc4 	addi	r6,r6,-1
    52c4:	18c7883a 	add	r3,r3,r3
    52c8:	293ffb36 	bltu	r5,r4,52b8 <__alt_exception_stack_pointer+0xf80052b8>
    52cc:	18000526 	beq	r3,zero,52e4 <__modsi3+0x4c>
    52d0:	1806d07a 	srli	r3,r3,1
    52d4:	11400136 	bltu	r2,r5,52dc <__modsi3+0x44>
    52d8:	1145c83a 	sub	r2,r2,r5
    52dc:	280ad07a 	srli	r5,r5,1
    52e0:	183ffb1e 	bne	r3,zero,52d0 <__alt_exception_stack_pointer+0xf80052d0>
    52e4:	38000126 	beq	r7,zero,52ec <__modsi3+0x54>
    52e8:	0085c83a 	sub	r2,zero,r2
    52ec:	f800283a 	ret
    52f0:	014bc83a 	sub	r5,zero,r5
    52f4:	003fec06 	br	52a8 <__alt_exception_stack_pointer+0xf80052a8>
    52f8:	0109c83a 	sub	r4,zero,r4
    52fc:	01c00044 	movi	r7,1
    5300:	003fe706 	br	52a0 <__alt_exception_stack_pointer+0xf80052a0>
    5304:	00c00044 	movi	r3,1
    5308:	003ff106 	br	52d0 <__alt_exception_stack_pointer+0xf80052d0>

0000530c <__udivsi3>:
    530c:	200d883a 	mov	r6,r4
    5310:	2900152e 	bgeu	r5,r4,5368 <__udivsi3+0x5c>
    5314:	28001416 	blt	r5,zero,5368 <__udivsi3+0x5c>
    5318:	00800804 	movi	r2,32
    531c:	00c00044 	movi	r3,1
    5320:	00000206 	br	532c <__udivsi3+0x20>
    5324:	10000e26 	beq	r2,zero,5360 <__udivsi3+0x54>
    5328:	28000516 	blt	r5,zero,5340 <__udivsi3+0x34>
    532c:	294b883a 	add	r5,r5,r5
    5330:	10bfffc4 	addi	r2,r2,-1
    5334:	18c7883a 	add	r3,r3,r3
    5338:	293ffa36 	bltu	r5,r4,5324 <__alt_exception_stack_pointer+0xf8005324>
    533c:	18000826 	beq	r3,zero,5360 <__udivsi3+0x54>
    5340:	0005883a 	mov	r2,zero
    5344:	31400236 	bltu	r6,r5,5350 <__udivsi3+0x44>
    5348:	314dc83a 	sub	r6,r6,r5
    534c:	10c4b03a 	or	r2,r2,r3
    5350:	1806d07a 	srli	r3,r3,1
    5354:	280ad07a 	srli	r5,r5,1
    5358:	183ffa1e 	bne	r3,zero,5344 <__alt_exception_stack_pointer+0xf8005344>
    535c:	f800283a 	ret
    5360:	0005883a 	mov	r2,zero
    5364:	f800283a 	ret
    5368:	00c00044 	movi	r3,1
    536c:	003ff406 	br	5340 <__alt_exception_stack_pointer+0xf8005340>

00005370 <__umodsi3>:
    5370:	2005883a 	mov	r2,r4
    5374:	2900122e 	bgeu	r5,r4,53c0 <__umodsi3+0x50>
    5378:	28001116 	blt	r5,zero,53c0 <__umodsi3+0x50>
    537c:	01800804 	movi	r6,32
    5380:	00c00044 	movi	r3,1
    5384:	00000206 	br	5390 <__umodsi3+0x20>
    5388:	30000c26 	beq	r6,zero,53bc <__umodsi3+0x4c>
    538c:	28000516 	blt	r5,zero,53a4 <__umodsi3+0x34>
    5390:	294b883a 	add	r5,r5,r5
    5394:	31bfffc4 	addi	r6,r6,-1
    5398:	18c7883a 	add	r3,r3,r3
    539c:	293ffa36 	bltu	r5,r4,5388 <__alt_exception_stack_pointer+0xf8005388>
    53a0:	18000626 	beq	r3,zero,53bc <__umodsi3+0x4c>
    53a4:	1806d07a 	srli	r3,r3,1
    53a8:	11400136 	bltu	r2,r5,53b0 <__umodsi3+0x40>
    53ac:	1145c83a 	sub	r2,r2,r5
    53b0:	280ad07a 	srli	r5,r5,1
    53b4:	183ffb1e 	bne	r3,zero,53a4 <__alt_exception_stack_pointer+0xf80053a4>
    53b8:	f800283a 	ret
    53bc:	f800283a 	ret
    53c0:	00c00044 	movi	r3,1
    53c4:	003ff706 	br	53a4 <__alt_exception_stack_pointer+0xf80053a4>

000053c8 <__mulsi3>:
    53c8:	0005883a 	mov	r2,zero
    53cc:	20000726 	beq	r4,zero,53ec <__mulsi3+0x24>
    53d0:	20c0004c 	andi	r3,r4,1
    53d4:	2008d07a 	srli	r4,r4,1
    53d8:	18000126 	beq	r3,zero,53e0 <__mulsi3+0x18>
    53dc:	1145883a 	add	r2,r2,r5
    53e0:	294b883a 	add	r5,r5,r5
    53e4:	203ffa1e 	bne	r4,zero,53d0 <__alt_exception_stack_pointer+0xf80053d0>
    53e8:	f800283a 	ret
    53ec:	f800283a 	ret

000053f0 <__adddf3>:
    53f0:	02c00434 	movhi	r11,16
    53f4:	5affffc4 	addi	r11,r11,-1
    53f8:	2806d7fa 	srli	r3,r5,31
    53fc:	2ad4703a 	and	r10,r5,r11
    5400:	3ad2703a 	and	r9,r7,r11
    5404:	3804d53a 	srli	r2,r7,20
    5408:	3018d77a 	srli	r12,r6,29
    540c:	280ad53a 	srli	r5,r5,20
    5410:	501490fa 	slli	r10,r10,3
    5414:	2010d77a 	srli	r8,r4,29
    5418:	481290fa 	slli	r9,r9,3
    541c:	380ed7fa 	srli	r7,r7,31
    5420:	defffb04 	addi	sp,sp,-20
    5424:	dc800215 	stw	r18,8(sp)
    5428:	dc400115 	stw	r17,4(sp)
    542c:	dc000015 	stw	r16,0(sp)
    5430:	dfc00415 	stw	ra,16(sp)
    5434:	dcc00315 	stw	r19,12(sp)
    5438:	1c803fcc 	andi	r18,r3,255
    543c:	2c01ffcc 	andi	r16,r5,2047
    5440:	5210b03a 	or	r8,r10,r8
    5444:	202290fa 	slli	r17,r4,3
    5448:	1081ffcc 	andi	r2,r2,2047
    544c:	4b12b03a 	or	r9,r9,r12
    5450:	300c90fa 	slli	r6,r6,3
    5454:	91c07526 	beq	r18,r7,562c <__adddf3+0x23c>
    5458:	8087c83a 	sub	r3,r16,r2
    545c:	00c0ab0e 	bge	zero,r3,570c <__adddf3+0x31c>
    5460:	10002a1e 	bne	r2,zero,550c <__adddf3+0x11c>
    5464:	4984b03a 	or	r2,r9,r6
    5468:	1000961e 	bne	r2,zero,56c4 <__adddf3+0x2d4>
    546c:	888001cc 	andi	r2,r17,7
    5470:	10000726 	beq	r2,zero,5490 <__adddf3+0xa0>
    5474:	888003cc 	andi	r2,r17,15
    5478:	00c00104 	movi	r3,4
    547c:	10c00426 	beq	r2,r3,5490 <__adddf3+0xa0>
    5480:	88c7883a 	add	r3,r17,r3
    5484:	1c63803a 	cmpltu	r17,r3,r17
    5488:	4451883a 	add	r8,r8,r17
    548c:	1823883a 	mov	r17,r3
    5490:	4080202c 	andhi	r2,r8,128
    5494:	10005926 	beq	r2,zero,55fc <__adddf3+0x20c>
    5498:	84000044 	addi	r16,r16,1
    549c:	0081ffc4 	movi	r2,2047
    54a0:	8080ba26 	beq	r16,r2,578c <__adddf3+0x39c>
    54a4:	00bfe034 	movhi	r2,65408
    54a8:	10bfffc4 	addi	r2,r2,-1
    54ac:	4090703a 	and	r8,r8,r2
    54b0:	4004977a 	slli	r2,r8,29
    54b4:	4010927a 	slli	r8,r8,9
    54b8:	8822d0fa 	srli	r17,r17,3
    54bc:	8401ffcc 	andi	r16,r16,2047
    54c0:	4010d33a 	srli	r8,r8,12
    54c4:	9007883a 	mov	r3,r18
    54c8:	1444b03a 	or	r2,r2,r17
    54cc:	8401ffcc 	andi	r16,r16,2047
    54d0:	8020953a 	slli	r16,r16,20
    54d4:	18c03fcc 	andi	r3,r3,255
    54d8:	01000434 	movhi	r4,16
    54dc:	213fffc4 	addi	r4,r4,-1
    54e0:	180697fa 	slli	r3,r3,31
    54e4:	4110703a 	and	r8,r8,r4
    54e8:	4410b03a 	or	r8,r8,r16
    54ec:	40c6b03a 	or	r3,r8,r3
    54f0:	dfc00417 	ldw	ra,16(sp)
    54f4:	dcc00317 	ldw	r19,12(sp)
    54f8:	dc800217 	ldw	r18,8(sp)
    54fc:	dc400117 	ldw	r17,4(sp)
    5500:	dc000017 	ldw	r16,0(sp)
    5504:	dec00504 	addi	sp,sp,20
    5508:	f800283a 	ret
    550c:	0081ffc4 	movi	r2,2047
    5510:	80bfd626 	beq	r16,r2,546c <__alt_exception_stack_pointer+0xf800546c>
    5514:	4a402034 	orhi	r9,r9,128
    5518:	00800e04 	movi	r2,56
    551c:	10c09f16 	blt	r2,r3,579c <__adddf3+0x3ac>
    5520:	008007c4 	movi	r2,31
    5524:	10c0c216 	blt	r2,r3,5830 <__adddf3+0x440>
    5528:	00800804 	movi	r2,32
    552c:	10c5c83a 	sub	r2,r2,r3
    5530:	488a983a 	sll	r5,r9,r2
    5534:	30c8d83a 	srl	r4,r6,r3
    5538:	3084983a 	sll	r2,r6,r2
    553c:	48c6d83a 	srl	r3,r9,r3
    5540:	290cb03a 	or	r6,r5,r4
    5544:	1004c03a 	cmpne	r2,r2,zero
    5548:	308cb03a 	or	r6,r6,r2
    554c:	898dc83a 	sub	r6,r17,r6
    5550:	89a3803a 	cmpltu	r17,r17,r6
    5554:	40d1c83a 	sub	r8,r8,r3
    5558:	4451c83a 	sub	r8,r8,r17
    555c:	3023883a 	mov	r17,r6
    5560:	4080202c 	andhi	r2,r8,128
    5564:	10002326 	beq	r2,zero,55f4 <__adddf3+0x204>
    5568:	04c02034 	movhi	r19,128
    556c:	9cffffc4 	addi	r19,r19,-1
    5570:	44e6703a 	and	r19,r8,r19
    5574:	98007626 	beq	r19,zero,5750 <__adddf3+0x360>
    5578:	9809883a 	mov	r4,r19
    557c:	00070c40 	call	70c4 <__clzsi2>
    5580:	10fffe04 	addi	r3,r2,-8
    5584:	010007c4 	movi	r4,31
    5588:	20c07716 	blt	r4,r3,5768 <__adddf3+0x378>
    558c:	00800804 	movi	r2,32
    5590:	10c5c83a 	sub	r2,r2,r3
    5594:	8884d83a 	srl	r2,r17,r2
    5598:	98d0983a 	sll	r8,r19,r3
    559c:	88e2983a 	sll	r17,r17,r3
    55a0:	1204b03a 	or	r2,r2,r8
    55a4:	1c007416 	blt	r3,r16,5778 <__adddf3+0x388>
    55a8:	1c21c83a 	sub	r16,r3,r16
    55ac:	82000044 	addi	r8,r16,1
    55b0:	00c007c4 	movi	r3,31
    55b4:	1a009116 	blt	r3,r8,57fc <__adddf3+0x40c>
    55b8:	00c00804 	movi	r3,32
    55bc:	1a07c83a 	sub	r3,r3,r8
    55c0:	8a08d83a 	srl	r4,r17,r8
    55c4:	88e2983a 	sll	r17,r17,r3
    55c8:	10c6983a 	sll	r3,r2,r3
    55cc:	1210d83a 	srl	r8,r2,r8
    55d0:	8804c03a 	cmpne	r2,r17,zero
    55d4:	1906b03a 	or	r3,r3,r4
    55d8:	18a2b03a 	or	r17,r3,r2
    55dc:	0021883a 	mov	r16,zero
    55e0:	003fa206 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    55e4:	1890b03a 	or	r8,r3,r2
    55e8:	40017d26 	beq	r8,zero,5be0 <__adddf3+0x7f0>
    55ec:	1011883a 	mov	r8,r2
    55f0:	1823883a 	mov	r17,r3
    55f4:	888001cc 	andi	r2,r17,7
    55f8:	103f9e1e 	bne	r2,zero,5474 <__alt_exception_stack_pointer+0xf8005474>
    55fc:	4004977a 	slli	r2,r8,29
    5600:	8822d0fa 	srli	r17,r17,3
    5604:	4010d0fa 	srli	r8,r8,3
    5608:	9007883a 	mov	r3,r18
    560c:	1444b03a 	or	r2,r2,r17
    5610:	0101ffc4 	movi	r4,2047
    5614:	81002426 	beq	r16,r4,56a8 <__adddf3+0x2b8>
    5618:	8120703a 	and	r16,r16,r4
    561c:	01000434 	movhi	r4,16
    5620:	213fffc4 	addi	r4,r4,-1
    5624:	4110703a 	and	r8,r8,r4
    5628:	003fa806 	br	54cc <__alt_exception_stack_pointer+0xf80054cc>
    562c:	8089c83a 	sub	r4,r16,r2
    5630:	01005e0e 	bge	zero,r4,57ac <__adddf3+0x3bc>
    5634:	10002b26 	beq	r2,zero,56e4 <__adddf3+0x2f4>
    5638:	0081ffc4 	movi	r2,2047
    563c:	80bf8b26 	beq	r16,r2,546c <__alt_exception_stack_pointer+0xf800546c>
    5640:	4a402034 	orhi	r9,r9,128
    5644:	00800e04 	movi	r2,56
    5648:	1100a40e 	bge	r2,r4,58dc <__adddf3+0x4ec>
    564c:	498cb03a 	or	r6,r9,r6
    5650:	300ac03a 	cmpne	r5,r6,zero
    5654:	0013883a 	mov	r9,zero
    5658:	2c4b883a 	add	r5,r5,r17
    565c:	2c63803a 	cmpltu	r17,r5,r17
    5660:	4a11883a 	add	r8,r9,r8
    5664:	8a11883a 	add	r8,r17,r8
    5668:	2823883a 	mov	r17,r5
    566c:	4080202c 	andhi	r2,r8,128
    5670:	103fe026 	beq	r2,zero,55f4 <__alt_exception_stack_pointer+0xf80055f4>
    5674:	84000044 	addi	r16,r16,1
    5678:	0081ffc4 	movi	r2,2047
    567c:	8080d226 	beq	r16,r2,59c8 <__adddf3+0x5d8>
    5680:	00bfe034 	movhi	r2,65408
    5684:	10bfffc4 	addi	r2,r2,-1
    5688:	4090703a 	and	r8,r8,r2
    568c:	880ad07a 	srli	r5,r17,1
    5690:	400897fa 	slli	r4,r8,31
    5694:	88c0004c 	andi	r3,r17,1
    5698:	28e2b03a 	or	r17,r5,r3
    569c:	4010d07a 	srli	r8,r8,1
    56a0:	2462b03a 	or	r17,r4,r17
    56a4:	003f7106 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    56a8:	4088b03a 	or	r4,r8,r2
    56ac:	20014526 	beq	r4,zero,5bc4 <__adddf3+0x7d4>
    56b0:	01000434 	movhi	r4,16
    56b4:	42000234 	orhi	r8,r8,8
    56b8:	213fffc4 	addi	r4,r4,-1
    56bc:	4110703a 	and	r8,r8,r4
    56c0:	003f8206 	br	54cc <__alt_exception_stack_pointer+0xf80054cc>
    56c4:	18ffffc4 	addi	r3,r3,-1
    56c8:	1800491e 	bne	r3,zero,57f0 <__adddf3+0x400>
    56cc:	898bc83a 	sub	r5,r17,r6
    56d0:	8963803a 	cmpltu	r17,r17,r5
    56d4:	4251c83a 	sub	r8,r8,r9
    56d8:	4451c83a 	sub	r8,r8,r17
    56dc:	2823883a 	mov	r17,r5
    56e0:	003f9f06 	br	5560 <__alt_exception_stack_pointer+0xf8005560>
    56e4:	4984b03a 	or	r2,r9,r6
    56e8:	103f6026 	beq	r2,zero,546c <__alt_exception_stack_pointer+0xf800546c>
    56ec:	213fffc4 	addi	r4,r4,-1
    56f0:	2000931e 	bne	r4,zero,5940 <__adddf3+0x550>
    56f4:	898d883a 	add	r6,r17,r6
    56f8:	3463803a 	cmpltu	r17,r6,r17
    56fc:	4251883a 	add	r8,r8,r9
    5700:	8a11883a 	add	r8,r17,r8
    5704:	3023883a 	mov	r17,r6
    5708:	003fd806 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    570c:	1800541e 	bne	r3,zero,5860 <__adddf3+0x470>
    5710:	80800044 	addi	r2,r16,1
    5714:	1081ffcc 	andi	r2,r2,2047
    5718:	00c00044 	movi	r3,1
    571c:	1880a00e 	bge	r3,r2,59a0 <__adddf3+0x5b0>
    5720:	8989c83a 	sub	r4,r17,r6
    5724:	8905803a 	cmpltu	r2,r17,r4
    5728:	4267c83a 	sub	r19,r8,r9
    572c:	98a7c83a 	sub	r19,r19,r2
    5730:	9880202c 	andhi	r2,r19,128
    5734:	10006326 	beq	r2,zero,58c4 <__adddf3+0x4d4>
    5738:	3463c83a 	sub	r17,r6,r17
    573c:	4a07c83a 	sub	r3,r9,r8
    5740:	344d803a 	cmpltu	r6,r6,r17
    5744:	19a7c83a 	sub	r19,r3,r6
    5748:	3825883a 	mov	r18,r7
    574c:	983f8a1e 	bne	r19,zero,5578 <__alt_exception_stack_pointer+0xf8005578>
    5750:	8809883a 	mov	r4,r17
    5754:	00070c40 	call	70c4 <__clzsi2>
    5758:	10800804 	addi	r2,r2,32
    575c:	10fffe04 	addi	r3,r2,-8
    5760:	010007c4 	movi	r4,31
    5764:	20ff890e 	bge	r4,r3,558c <__alt_exception_stack_pointer+0xf800558c>
    5768:	10bff604 	addi	r2,r2,-40
    576c:	8884983a 	sll	r2,r17,r2
    5770:	0023883a 	mov	r17,zero
    5774:	1c3f8c0e 	bge	r3,r16,55a8 <__alt_exception_stack_pointer+0xf80055a8>
    5778:	023fe034 	movhi	r8,65408
    577c:	423fffc4 	addi	r8,r8,-1
    5780:	80e1c83a 	sub	r16,r16,r3
    5784:	1210703a 	and	r8,r2,r8
    5788:	003f3806 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    578c:	9007883a 	mov	r3,r18
    5790:	0011883a 	mov	r8,zero
    5794:	0005883a 	mov	r2,zero
    5798:	003f4c06 	br	54cc <__alt_exception_stack_pointer+0xf80054cc>
    579c:	498cb03a 	or	r6,r9,r6
    57a0:	300cc03a 	cmpne	r6,r6,zero
    57a4:	0007883a 	mov	r3,zero
    57a8:	003f6806 	br	554c <__alt_exception_stack_pointer+0xf800554c>
    57ac:	20009c1e 	bne	r4,zero,5a20 <__adddf3+0x630>
    57b0:	80800044 	addi	r2,r16,1
    57b4:	1141ffcc 	andi	r5,r2,2047
    57b8:	01000044 	movi	r4,1
    57bc:	2140670e 	bge	r4,r5,595c <__adddf3+0x56c>
    57c0:	0101ffc4 	movi	r4,2047
    57c4:	11007f26 	beq	r2,r4,59c4 <__adddf3+0x5d4>
    57c8:	898d883a 	add	r6,r17,r6
    57cc:	4247883a 	add	r3,r8,r9
    57d0:	3451803a 	cmpltu	r8,r6,r17
    57d4:	40d1883a 	add	r8,r8,r3
    57d8:	402297fa 	slli	r17,r8,31
    57dc:	300cd07a 	srli	r6,r6,1
    57e0:	4010d07a 	srli	r8,r8,1
    57e4:	1021883a 	mov	r16,r2
    57e8:	89a2b03a 	or	r17,r17,r6
    57ec:	003f1f06 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    57f0:	0081ffc4 	movi	r2,2047
    57f4:	80bf481e 	bne	r16,r2,5518 <__alt_exception_stack_pointer+0xf8005518>
    57f8:	003f1c06 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    57fc:	843ff844 	addi	r16,r16,-31
    5800:	01000804 	movi	r4,32
    5804:	1406d83a 	srl	r3,r2,r16
    5808:	41005026 	beq	r8,r4,594c <__adddf3+0x55c>
    580c:	01001004 	movi	r4,64
    5810:	2211c83a 	sub	r8,r4,r8
    5814:	1204983a 	sll	r2,r2,r8
    5818:	88a2b03a 	or	r17,r17,r2
    581c:	8822c03a 	cmpne	r17,r17,zero
    5820:	1c62b03a 	or	r17,r3,r17
    5824:	0011883a 	mov	r8,zero
    5828:	0021883a 	mov	r16,zero
    582c:	003f7106 	br	55f4 <__alt_exception_stack_pointer+0xf80055f4>
    5830:	193ff804 	addi	r4,r3,-32
    5834:	00800804 	movi	r2,32
    5838:	4908d83a 	srl	r4,r9,r4
    583c:	18804526 	beq	r3,r2,5954 <__adddf3+0x564>
    5840:	00801004 	movi	r2,64
    5844:	10c5c83a 	sub	r2,r2,r3
    5848:	4886983a 	sll	r3,r9,r2
    584c:	198cb03a 	or	r6,r3,r6
    5850:	300cc03a 	cmpne	r6,r6,zero
    5854:	218cb03a 	or	r6,r4,r6
    5858:	0007883a 	mov	r3,zero
    585c:	003f3b06 	br	554c <__alt_exception_stack_pointer+0xf800554c>
    5860:	80002a26 	beq	r16,zero,590c <__adddf3+0x51c>
    5864:	0101ffc4 	movi	r4,2047
    5868:	11006826 	beq	r2,r4,5a0c <__adddf3+0x61c>
    586c:	00c7c83a 	sub	r3,zero,r3
    5870:	42002034 	orhi	r8,r8,128
    5874:	01000e04 	movi	r4,56
    5878:	20c07c16 	blt	r4,r3,5a6c <__adddf3+0x67c>
    587c:	010007c4 	movi	r4,31
    5880:	20c0da16 	blt	r4,r3,5bec <__adddf3+0x7fc>
    5884:	01000804 	movi	r4,32
    5888:	20c9c83a 	sub	r4,r4,r3
    588c:	4114983a 	sll	r10,r8,r4
    5890:	88cad83a 	srl	r5,r17,r3
    5894:	8908983a 	sll	r4,r17,r4
    5898:	40c6d83a 	srl	r3,r8,r3
    589c:	5162b03a 	or	r17,r10,r5
    58a0:	2008c03a 	cmpne	r4,r4,zero
    58a4:	8922b03a 	or	r17,r17,r4
    58a8:	3463c83a 	sub	r17,r6,r17
    58ac:	48c7c83a 	sub	r3,r9,r3
    58b0:	344d803a 	cmpltu	r6,r6,r17
    58b4:	1991c83a 	sub	r8,r3,r6
    58b8:	1021883a 	mov	r16,r2
    58bc:	3825883a 	mov	r18,r7
    58c0:	003f2706 	br	5560 <__alt_exception_stack_pointer+0xf8005560>
    58c4:	24d0b03a 	or	r8,r4,r19
    58c8:	40001b1e 	bne	r8,zero,5938 <__adddf3+0x548>
    58cc:	0005883a 	mov	r2,zero
    58d0:	0007883a 	mov	r3,zero
    58d4:	0021883a 	mov	r16,zero
    58d8:	003f4d06 	br	5610 <__alt_exception_stack_pointer+0xf8005610>
    58dc:	008007c4 	movi	r2,31
    58e0:	11003c16 	blt	r2,r4,59d4 <__adddf3+0x5e4>
    58e4:	00800804 	movi	r2,32
    58e8:	1105c83a 	sub	r2,r2,r4
    58ec:	488e983a 	sll	r7,r9,r2
    58f0:	310ad83a 	srl	r5,r6,r4
    58f4:	3084983a 	sll	r2,r6,r2
    58f8:	4912d83a 	srl	r9,r9,r4
    58fc:	394ab03a 	or	r5,r7,r5
    5900:	1004c03a 	cmpne	r2,r2,zero
    5904:	288ab03a 	or	r5,r5,r2
    5908:	003f5306 	br	5658 <__alt_exception_stack_pointer+0xf8005658>
    590c:	4448b03a 	or	r4,r8,r17
    5910:	20003e26 	beq	r4,zero,5a0c <__adddf3+0x61c>
    5914:	00c6303a 	nor	r3,zero,r3
    5918:	18003a1e 	bne	r3,zero,5a04 <__adddf3+0x614>
    591c:	3463c83a 	sub	r17,r6,r17
    5920:	4a07c83a 	sub	r3,r9,r8
    5924:	344d803a 	cmpltu	r6,r6,r17
    5928:	1991c83a 	sub	r8,r3,r6
    592c:	1021883a 	mov	r16,r2
    5930:	3825883a 	mov	r18,r7
    5934:	003f0a06 	br	5560 <__alt_exception_stack_pointer+0xf8005560>
    5938:	2023883a 	mov	r17,r4
    593c:	003f0d06 	br	5574 <__alt_exception_stack_pointer+0xf8005574>
    5940:	0081ffc4 	movi	r2,2047
    5944:	80bf3f1e 	bne	r16,r2,5644 <__alt_exception_stack_pointer+0xf8005644>
    5948:	003ec806 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    594c:	0005883a 	mov	r2,zero
    5950:	003fb106 	br	5818 <__alt_exception_stack_pointer+0xf8005818>
    5954:	0007883a 	mov	r3,zero
    5958:	003fbc06 	br	584c <__alt_exception_stack_pointer+0xf800584c>
    595c:	4444b03a 	or	r2,r8,r17
    5960:	8000871e 	bne	r16,zero,5b80 <__adddf3+0x790>
    5964:	1000ba26 	beq	r2,zero,5c50 <__adddf3+0x860>
    5968:	4984b03a 	or	r2,r9,r6
    596c:	103ebf26 	beq	r2,zero,546c <__alt_exception_stack_pointer+0xf800546c>
    5970:	8985883a 	add	r2,r17,r6
    5974:	4247883a 	add	r3,r8,r9
    5978:	1451803a 	cmpltu	r8,r2,r17
    597c:	40d1883a 	add	r8,r8,r3
    5980:	40c0202c 	andhi	r3,r8,128
    5984:	1023883a 	mov	r17,r2
    5988:	183f1a26 	beq	r3,zero,55f4 <__alt_exception_stack_pointer+0xf80055f4>
    598c:	00bfe034 	movhi	r2,65408
    5990:	10bfffc4 	addi	r2,r2,-1
    5994:	2021883a 	mov	r16,r4
    5998:	4090703a 	and	r8,r8,r2
    599c:	003eb306 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    59a0:	4444b03a 	or	r2,r8,r17
    59a4:	8000291e 	bne	r16,zero,5a4c <__adddf3+0x65c>
    59a8:	10004b1e 	bne	r2,zero,5ad8 <__adddf3+0x6e8>
    59ac:	4990b03a 	or	r8,r9,r6
    59b0:	40008b26 	beq	r8,zero,5be0 <__adddf3+0x7f0>
    59b4:	4811883a 	mov	r8,r9
    59b8:	3023883a 	mov	r17,r6
    59bc:	3825883a 	mov	r18,r7
    59c0:	003eaa06 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    59c4:	1021883a 	mov	r16,r2
    59c8:	0011883a 	mov	r8,zero
    59cc:	0005883a 	mov	r2,zero
    59d0:	003f0f06 	br	5610 <__alt_exception_stack_pointer+0xf8005610>
    59d4:	217ff804 	addi	r5,r4,-32
    59d8:	00800804 	movi	r2,32
    59dc:	494ad83a 	srl	r5,r9,r5
    59e0:	20807d26 	beq	r4,r2,5bd8 <__adddf3+0x7e8>
    59e4:	00801004 	movi	r2,64
    59e8:	1109c83a 	sub	r4,r2,r4
    59ec:	4912983a 	sll	r9,r9,r4
    59f0:	498cb03a 	or	r6,r9,r6
    59f4:	300cc03a 	cmpne	r6,r6,zero
    59f8:	298ab03a 	or	r5,r5,r6
    59fc:	0013883a 	mov	r9,zero
    5a00:	003f1506 	br	5658 <__alt_exception_stack_pointer+0xf8005658>
    5a04:	0101ffc4 	movi	r4,2047
    5a08:	113f9a1e 	bne	r2,r4,5874 <__alt_exception_stack_pointer+0xf8005874>
    5a0c:	4811883a 	mov	r8,r9
    5a10:	3023883a 	mov	r17,r6
    5a14:	1021883a 	mov	r16,r2
    5a18:	3825883a 	mov	r18,r7
    5a1c:	003e9306 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5a20:	8000161e 	bne	r16,zero,5a7c <__adddf3+0x68c>
    5a24:	444ab03a 	or	r5,r8,r17
    5a28:	28005126 	beq	r5,zero,5b70 <__adddf3+0x780>
    5a2c:	0108303a 	nor	r4,zero,r4
    5a30:	20004d1e 	bne	r4,zero,5b68 <__adddf3+0x778>
    5a34:	89a3883a 	add	r17,r17,r6
    5a38:	4253883a 	add	r9,r8,r9
    5a3c:	898d803a 	cmpltu	r6,r17,r6
    5a40:	3251883a 	add	r8,r6,r9
    5a44:	1021883a 	mov	r16,r2
    5a48:	003f0806 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    5a4c:	1000301e 	bne	r2,zero,5b10 <__adddf3+0x720>
    5a50:	4984b03a 	or	r2,r9,r6
    5a54:	10007126 	beq	r2,zero,5c1c <__adddf3+0x82c>
    5a58:	4811883a 	mov	r8,r9
    5a5c:	3023883a 	mov	r17,r6
    5a60:	3825883a 	mov	r18,r7
    5a64:	0401ffc4 	movi	r16,2047
    5a68:	003e8006 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5a6c:	4462b03a 	or	r17,r8,r17
    5a70:	8822c03a 	cmpne	r17,r17,zero
    5a74:	0007883a 	mov	r3,zero
    5a78:	003f8b06 	br	58a8 <__alt_exception_stack_pointer+0xf80058a8>
    5a7c:	0141ffc4 	movi	r5,2047
    5a80:	11403b26 	beq	r2,r5,5b70 <__adddf3+0x780>
    5a84:	0109c83a 	sub	r4,zero,r4
    5a88:	42002034 	orhi	r8,r8,128
    5a8c:	01400e04 	movi	r5,56
    5a90:	29006716 	blt	r5,r4,5c30 <__adddf3+0x840>
    5a94:	014007c4 	movi	r5,31
    5a98:	29007016 	blt	r5,r4,5c5c <__adddf3+0x86c>
    5a9c:	01400804 	movi	r5,32
    5aa0:	290bc83a 	sub	r5,r5,r4
    5aa4:	4154983a 	sll	r10,r8,r5
    5aa8:	890ed83a 	srl	r7,r17,r4
    5aac:	894a983a 	sll	r5,r17,r5
    5ab0:	4108d83a 	srl	r4,r8,r4
    5ab4:	51e2b03a 	or	r17,r10,r7
    5ab8:	280ac03a 	cmpne	r5,r5,zero
    5abc:	8962b03a 	or	r17,r17,r5
    5ac0:	89a3883a 	add	r17,r17,r6
    5ac4:	2253883a 	add	r9,r4,r9
    5ac8:	898d803a 	cmpltu	r6,r17,r6
    5acc:	3251883a 	add	r8,r6,r9
    5ad0:	1021883a 	mov	r16,r2
    5ad4:	003ee506 	br	566c <__alt_exception_stack_pointer+0xf800566c>
    5ad8:	4984b03a 	or	r2,r9,r6
    5adc:	103e6326 	beq	r2,zero,546c <__alt_exception_stack_pointer+0xf800546c>
    5ae0:	8987c83a 	sub	r3,r17,r6
    5ae4:	88c9803a 	cmpltu	r4,r17,r3
    5ae8:	4245c83a 	sub	r2,r8,r9
    5aec:	1105c83a 	sub	r2,r2,r4
    5af0:	1100202c 	andhi	r4,r2,128
    5af4:	203ebb26 	beq	r4,zero,55e4 <__alt_exception_stack_pointer+0xf80055e4>
    5af8:	3463c83a 	sub	r17,r6,r17
    5afc:	4a07c83a 	sub	r3,r9,r8
    5b00:	344d803a 	cmpltu	r6,r6,r17
    5b04:	1991c83a 	sub	r8,r3,r6
    5b08:	3825883a 	mov	r18,r7
    5b0c:	003e5706 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5b10:	4984b03a 	or	r2,r9,r6
    5b14:	10002e26 	beq	r2,zero,5bd0 <__adddf3+0x7e0>
    5b18:	4004d0fa 	srli	r2,r8,3
    5b1c:	8822d0fa 	srli	r17,r17,3
    5b20:	4010977a 	slli	r8,r8,29
    5b24:	10c0022c 	andhi	r3,r2,8
    5b28:	4462b03a 	or	r17,r8,r17
    5b2c:	18000826 	beq	r3,zero,5b50 <__adddf3+0x760>
    5b30:	4808d0fa 	srli	r4,r9,3
    5b34:	20c0022c 	andhi	r3,r4,8
    5b38:	1800051e 	bne	r3,zero,5b50 <__adddf3+0x760>
    5b3c:	300cd0fa 	srli	r6,r6,3
    5b40:	4806977a 	slli	r3,r9,29
    5b44:	2005883a 	mov	r2,r4
    5b48:	3825883a 	mov	r18,r7
    5b4c:	19a2b03a 	or	r17,r3,r6
    5b50:	8810d77a 	srli	r8,r17,29
    5b54:	100490fa 	slli	r2,r2,3
    5b58:	882290fa 	slli	r17,r17,3
    5b5c:	0401ffc4 	movi	r16,2047
    5b60:	4090b03a 	or	r8,r8,r2
    5b64:	003e4106 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5b68:	0141ffc4 	movi	r5,2047
    5b6c:	117fc71e 	bne	r2,r5,5a8c <__alt_exception_stack_pointer+0xf8005a8c>
    5b70:	4811883a 	mov	r8,r9
    5b74:	3023883a 	mov	r17,r6
    5b78:	1021883a 	mov	r16,r2
    5b7c:	003e3b06 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5b80:	10002f26 	beq	r2,zero,5c40 <__adddf3+0x850>
    5b84:	4984b03a 	or	r2,r9,r6
    5b88:	10001126 	beq	r2,zero,5bd0 <__adddf3+0x7e0>
    5b8c:	4004d0fa 	srli	r2,r8,3
    5b90:	8822d0fa 	srli	r17,r17,3
    5b94:	4010977a 	slli	r8,r8,29
    5b98:	10c0022c 	andhi	r3,r2,8
    5b9c:	4462b03a 	or	r17,r8,r17
    5ba0:	183feb26 	beq	r3,zero,5b50 <__alt_exception_stack_pointer+0xf8005b50>
    5ba4:	4808d0fa 	srli	r4,r9,3
    5ba8:	20c0022c 	andhi	r3,r4,8
    5bac:	183fe81e 	bne	r3,zero,5b50 <__alt_exception_stack_pointer+0xf8005b50>
    5bb0:	300cd0fa 	srli	r6,r6,3
    5bb4:	4806977a 	slli	r3,r9,29
    5bb8:	2005883a 	mov	r2,r4
    5bbc:	19a2b03a 	or	r17,r3,r6
    5bc0:	003fe306 	br	5b50 <__alt_exception_stack_pointer+0xf8005b50>
    5bc4:	0011883a 	mov	r8,zero
    5bc8:	0005883a 	mov	r2,zero
    5bcc:	003e3f06 	br	54cc <__alt_exception_stack_pointer+0xf80054cc>
    5bd0:	0401ffc4 	movi	r16,2047
    5bd4:	003e2506 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5bd8:	0013883a 	mov	r9,zero
    5bdc:	003f8406 	br	59f0 <__alt_exception_stack_pointer+0xf80059f0>
    5be0:	0005883a 	mov	r2,zero
    5be4:	0007883a 	mov	r3,zero
    5be8:	003e8906 	br	5610 <__alt_exception_stack_pointer+0xf8005610>
    5bec:	197ff804 	addi	r5,r3,-32
    5bf0:	01000804 	movi	r4,32
    5bf4:	414ad83a 	srl	r5,r8,r5
    5bf8:	19002426 	beq	r3,r4,5c8c <__adddf3+0x89c>
    5bfc:	01001004 	movi	r4,64
    5c00:	20c7c83a 	sub	r3,r4,r3
    5c04:	40c6983a 	sll	r3,r8,r3
    5c08:	1c46b03a 	or	r3,r3,r17
    5c0c:	1806c03a 	cmpne	r3,r3,zero
    5c10:	28e2b03a 	or	r17,r5,r3
    5c14:	0007883a 	mov	r3,zero
    5c18:	003f2306 	br	58a8 <__alt_exception_stack_pointer+0xf80058a8>
    5c1c:	0007883a 	mov	r3,zero
    5c20:	5811883a 	mov	r8,r11
    5c24:	00bfffc4 	movi	r2,-1
    5c28:	0401ffc4 	movi	r16,2047
    5c2c:	003e7806 	br	5610 <__alt_exception_stack_pointer+0xf8005610>
    5c30:	4462b03a 	or	r17,r8,r17
    5c34:	8822c03a 	cmpne	r17,r17,zero
    5c38:	0009883a 	mov	r4,zero
    5c3c:	003fa006 	br	5ac0 <__alt_exception_stack_pointer+0xf8005ac0>
    5c40:	4811883a 	mov	r8,r9
    5c44:	3023883a 	mov	r17,r6
    5c48:	0401ffc4 	movi	r16,2047
    5c4c:	003e0706 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5c50:	4811883a 	mov	r8,r9
    5c54:	3023883a 	mov	r17,r6
    5c58:	003e0406 	br	546c <__alt_exception_stack_pointer+0xf800546c>
    5c5c:	21fff804 	addi	r7,r4,-32
    5c60:	01400804 	movi	r5,32
    5c64:	41ced83a 	srl	r7,r8,r7
    5c68:	21400a26 	beq	r4,r5,5c94 <__adddf3+0x8a4>
    5c6c:	01401004 	movi	r5,64
    5c70:	2909c83a 	sub	r4,r5,r4
    5c74:	4108983a 	sll	r4,r8,r4
    5c78:	2448b03a 	or	r4,r4,r17
    5c7c:	2008c03a 	cmpne	r4,r4,zero
    5c80:	3922b03a 	or	r17,r7,r4
    5c84:	0009883a 	mov	r4,zero
    5c88:	003f8d06 	br	5ac0 <__alt_exception_stack_pointer+0xf8005ac0>
    5c8c:	0007883a 	mov	r3,zero
    5c90:	003fdd06 	br	5c08 <__alt_exception_stack_pointer+0xf8005c08>
    5c94:	0009883a 	mov	r4,zero
    5c98:	003ff706 	br	5c78 <__alt_exception_stack_pointer+0xf8005c78>

00005c9c <__eqdf2>:
    5c9c:	2804d53a 	srli	r2,r5,20
    5ca0:	3806d53a 	srli	r3,r7,20
    5ca4:	02000434 	movhi	r8,16
    5ca8:	423fffc4 	addi	r8,r8,-1
    5cac:	1081ffcc 	andi	r2,r2,2047
    5cb0:	0281ffc4 	movi	r10,2047
    5cb4:	2a12703a 	and	r9,r5,r8
    5cb8:	18c1ffcc 	andi	r3,r3,2047
    5cbc:	3a10703a 	and	r8,r7,r8
    5cc0:	280ad7fa 	srli	r5,r5,31
    5cc4:	380ed7fa 	srli	r7,r7,31
    5cc8:	12801026 	beq	r2,r10,5d0c <__eqdf2+0x70>
    5ccc:	0281ffc4 	movi	r10,2047
    5cd0:	1a800a26 	beq	r3,r10,5cfc <__eqdf2+0x60>
    5cd4:	10c00226 	beq	r2,r3,5ce0 <__eqdf2+0x44>
    5cd8:	00800044 	movi	r2,1
    5cdc:	f800283a 	ret
    5ce0:	4a3ffd1e 	bne	r9,r8,5cd8 <__alt_exception_stack_pointer+0xf8005cd8>
    5ce4:	21bffc1e 	bne	r4,r6,5cd8 <__alt_exception_stack_pointer+0xf8005cd8>
    5ce8:	29c00c26 	beq	r5,r7,5d1c <__eqdf2+0x80>
    5cec:	103ffa1e 	bne	r2,zero,5cd8 <__alt_exception_stack_pointer+0xf8005cd8>
    5cf0:	2244b03a 	or	r2,r4,r9
    5cf4:	1004c03a 	cmpne	r2,r2,zero
    5cf8:	f800283a 	ret
    5cfc:	3214b03a 	or	r10,r6,r8
    5d00:	503ff426 	beq	r10,zero,5cd4 <__alt_exception_stack_pointer+0xf8005cd4>
    5d04:	00800044 	movi	r2,1
    5d08:	f800283a 	ret
    5d0c:	2254b03a 	or	r10,r4,r9
    5d10:	503fee26 	beq	r10,zero,5ccc <__alt_exception_stack_pointer+0xf8005ccc>
    5d14:	00800044 	movi	r2,1
    5d18:	f800283a 	ret
    5d1c:	0005883a 	mov	r2,zero
    5d20:	f800283a 	ret

00005d24 <__gedf2>:
    5d24:	2804d53a 	srli	r2,r5,20
    5d28:	3806d53a 	srli	r3,r7,20
    5d2c:	02000434 	movhi	r8,16
    5d30:	423fffc4 	addi	r8,r8,-1
    5d34:	1081ffcc 	andi	r2,r2,2047
    5d38:	0241ffc4 	movi	r9,2047
    5d3c:	2a14703a 	and	r10,r5,r8
    5d40:	18c1ffcc 	andi	r3,r3,2047
    5d44:	3a10703a 	and	r8,r7,r8
    5d48:	280ad7fa 	srli	r5,r5,31
    5d4c:	380ed7fa 	srli	r7,r7,31
    5d50:	12401d26 	beq	r2,r9,5dc8 <__gedf2+0xa4>
    5d54:	0241ffc4 	movi	r9,2047
    5d58:	1a401226 	beq	r3,r9,5da4 <__gedf2+0x80>
    5d5c:	1000081e 	bne	r2,zero,5d80 <__gedf2+0x5c>
    5d60:	2296b03a 	or	r11,r4,r10
    5d64:	5813003a 	cmpeq	r9,r11,zero
    5d68:	1800091e 	bne	r3,zero,5d90 <__gedf2+0x6c>
    5d6c:	3218b03a 	or	r12,r6,r8
    5d70:	6000071e 	bne	r12,zero,5d90 <__gedf2+0x6c>
    5d74:	0005883a 	mov	r2,zero
    5d78:	5800101e 	bne	r11,zero,5dbc <__gedf2+0x98>
    5d7c:	f800283a 	ret
    5d80:	18000c1e 	bne	r3,zero,5db4 <__gedf2+0x90>
    5d84:	3212b03a 	or	r9,r6,r8
    5d88:	48000c26 	beq	r9,zero,5dbc <__gedf2+0x98>
    5d8c:	0013883a 	mov	r9,zero
    5d90:	39c03fcc 	andi	r7,r7,255
    5d94:	48000826 	beq	r9,zero,5db8 <__gedf2+0x94>
    5d98:	38000926 	beq	r7,zero,5dc0 <__gedf2+0x9c>
    5d9c:	00800044 	movi	r2,1
    5da0:	f800283a 	ret
    5da4:	3212b03a 	or	r9,r6,r8
    5da8:	483fec26 	beq	r9,zero,5d5c <__alt_exception_stack_pointer+0xf8005d5c>
    5dac:	00bfff84 	movi	r2,-2
    5db0:	f800283a 	ret
    5db4:	39c03fcc 	andi	r7,r7,255
    5db8:	29c00626 	beq	r5,r7,5dd4 <__gedf2+0xb0>
    5dbc:	283ff726 	beq	r5,zero,5d9c <__alt_exception_stack_pointer+0xf8005d9c>
    5dc0:	00bfffc4 	movi	r2,-1
    5dc4:	f800283a 	ret
    5dc8:	2292b03a 	or	r9,r4,r10
    5dcc:	483fe126 	beq	r9,zero,5d54 <__alt_exception_stack_pointer+0xf8005d54>
    5dd0:	003ff606 	br	5dac <__alt_exception_stack_pointer+0xf8005dac>
    5dd4:	18bff916 	blt	r3,r2,5dbc <__alt_exception_stack_pointer+0xf8005dbc>
    5dd8:	10c00316 	blt	r2,r3,5de8 <__gedf2+0xc4>
    5ddc:	42bff736 	bltu	r8,r10,5dbc <__alt_exception_stack_pointer+0xf8005dbc>
    5de0:	52000326 	beq	r10,r8,5df0 <__gedf2+0xcc>
    5de4:	5200042e 	bgeu	r10,r8,5df8 <__gedf2+0xd4>
    5de8:	283fec1e 	bne	r5,zero,5d9c <__alt_exception_stack_pointer+0xf8005d9c>
    5dec:	003ff406 	br	5dc0 <__alt_exception_stack_pointer+0xf8005dc0>
    5df0:	313ff236 	bltu	r6,r4,5dbc <__alt_exception_stack_pointer+0xf8005dbc>
    5df4:	21bffc36 	bltu	r4,r6,5de8 <__alt_exception_stack_pointer+0xf8005de8>
    5df8:	0005883a 	mov	r2,zero
    5dfc:	f800283a 	ret

00005e00 <__muldf3>:
    5e00:	deffee04 	addi	sp,sp,-72
    5e04:	dd000c15 	stw	r20,48(sp)
    5e08:	2828d53a 	srli	r20,r5,20
    5e0c:	ddc00f15 	stw	r23,60(sp)
    5e10:	282ed7fa 	srli	r23,r5,31
    5e14:	dc000815 	stw	r16,32(sp)
    5e18:	04000434 	movhi	r16,16
    5e1c:	dcc00b15 	stw	r19,44(sp)
    5e20:	843fffc4 	addi	r16,r16,-1
    5e24:	dfc01115 	stw	ra,68(sp)
    5e28:	df001015 	stw	fp,64(sp)
    5e2c:	dd800e15 	stw	r22,56(sp)
    5e30:	dd400d15 	stw	r21,52(sp)
    5e34:	dc800a15 	stw	r18,40(sp)
    5e38:	dc400915 	stw	r17,36(sp)
    5e3c:	a501ffcc 	andi	r20,r20,2047
    5e40:	2c20703a 	and	r16,r5,r16
    5e44:	b827883a 	mov	r19,r23
    5e48:	ba403fcc 	andi	r9,r23,255
    5e4c:	a0006026 	beq	r20,zero,5fd0 <__muldf3+0x1d0>
    5e50:	0081ffc4 	movi	r2,2047
    5e54:	202d883a 	mov	r22,r4
    5e58:	a0803626 	beq	r20,r2,5f34 <__muldf3+0x134>
    5e5c:	84000434 	orhi	r16,r16,16
    5e60:	200ad77a 	srli	r5,r4,29
    5e64:	800490fa 	slli	r2,r16,3
    5e68:	202c90fa 	slli	r22,r4,3
    5e6c:	a53f0044 	addi	r20,r20,-1023
    5e70:	28a0b03a 	or	r16,r5,r2
    5e74:	002b883a 	mov	r21,zero
    5e78:	000b883a 	mov	r5,zero
    5e7c:	3804d53a 	srli	r2,r7,20
    5e80:	3838d7fa 	srli	fp,r7,31
    5e84:	04400434 	movhi	r17,16
    5e88:	8c7fffc4 	addi	r17,r17,-1
    5e8c:	1081ffcc 	andi	r2,r2,2047
    5e90:	3025883a 	mov	r18,r6
    5e94:	3c62703a 	and	r17,r7,r17
    5e98:	e2803fcc 	andi	r10,fp,255
    5e9c:	10006d26 	beq	r2,zero,6054 <__muldf3+0x254>
    5ea0:	00c1ffc4 	movi	r3,2047
    5ea4:	10c06526 	beq	r2,r3,603c <__muldf3+0x23c>
    5ea8:	8c400434 	orhi	r17,r17,16
    5eac:	300ed77a 	srli	r7,r6,29
    5eb0:	880690fa 	slli	r3,r17,3
    5eb4:	302490fa 	slli	r18,r6,3
    5eb8:	10bf0044 	addi	r2,r2,-1023
    5ebc:	38e2b03a 	or	r17,r7,r3
    5ec0:	000f883a 	mov	r7,zero
    5ec4:	a087883a 	add	r3,r20,r2
    5ec8:	010003c4 	movi	r4,15
    5ecc:	3d44b03a 	or	r2,r7,r21
    5ed0:	e5ccf03a 	xor	r6,fp,r23
    5ed4:	1a000044 	addi	r8,r3,1
    5ed8:	20809b36 	bltu	r4,r2,6148 <__muldf3+0x348>
    5edc:	100490ba 	slli	r2,r2,2
    5ee0:	01000034 	movhi	r4,0
    5ee4:	2117bd04 	addi	r4,r4,24308
    5ee8:	1105883a 	add	r2,r2,r4
    5eec:	10800017 	ldw	r2,0(r2)
    5ef0:	1000683a 	jmp	r2
    5ef4:	00006148 	cmpgei	zero,zero,389
    5ef8:	00005f54 	movui	zero,381
    5efc:	00005f54 	movui	zero,381
    5f00:	00005f50 	cmplti	zero,zero,381
    5f04:	00006124 	muli	zero,zero,388
    5f08:	00006124 	muli	zero,zero,388
    5f0c:	0000610c 	andi	zero,zero,388
    5f10:	00005f50 	cmplti	zero,zero,381
    5f14:	00006124 	muli	zero,zero,388
    5f18:	0000610c 	andi	zero,zero,388
    5f1c:	00006124 	muli	zero,zero,388
    5f20:	00005f50 	cmplti	zero,zero,381
    5f24:	00006134 	movhi	zero,388
    5f28:	00006134 	movhi	zero,388
    5f2c:	00006134 	movhi	zero,388
    5f30:	00006494 	movui	zero,402
    5f34:	2404b03a 	or	r2,r4,r16
    5f38:	1000711e 	bne	r2,zero,6100 <__muldf3+0x300>
    5f3c:	05400204 	movi	r21,8
    5f40:	0021883a 	mov	r16,zero
    5f44:	002d883a 	mov	r22,zero
    5f48:	01400084 	movi	r5,2
    5f4c:	003fcb06 	br	5e7c <__alt_exception_stack_pointer+0xf8005e7c>
    5f50:	500d883a 	mov	r6,r10
    5f54:	00800084 	movi	r2,2
    5f58:	38805926 	beq	r7,r2,60c0 <__muldf3+0x2c0>
    5f5c:	008000c4 	movi	r2,3
    5f60:	3881bb26 	beq	r7,r2,6650 <__muldf3+0x850>
    5f64:	00800044 	movi	r2,1
    5f68:	3881961e 	bne	r7,r2,65c4 <__muldf3+0x7c4>
    5f6c:	3027883a 	mov	r19,r6
    5f70:	0005883a 	mov	r2,zero
    5f74:	0021883a 	mov	r16,zero
    5f78:	002d883a 	mov	r22,zero
    5f7c:	1004953a 	slli	r2,r2,20
    5f80:	98c03fcc 	andi	r3,r19,255
    5f84:	04400434 	movhi	r17,16
    5f88:	8c7fffc4 	addi	r17,r17,-1
    5f8c:	180697fa 	slli	r3,r3,31
    5f90:	8460703a 	and	r16,r16,r17
    5f94:	80a0b03a 	or	r16,r16,r2
    5f98:	80c6b03a 	or	r3,r16,r3
    5f9c:	b005883a 	mov	r2,r22
    5fa0:	dfc01117 	ldw	ra,68(sp)
    5fa4:	df001017 	ldw	fp,64(sp)
    5fa8:	ddc00f17 	ldw	r23,60(sp)
    5fac:	dd800e17 	ldw	r22,56(sp)
    5fb0:	dd400d17 	ldw	r21,52(sp)
    5fb4:	dd000c17 	ldw	r20,48(sp)
    5fb8:	dcc00b17 	ldw	r19,44(sp)
    5fbc:	dc800a17 	ldw	r18,40(sp)
    5fc0:	dc400917 	ldw	r17,36(sp)
    5fc4:	dc000817 	ldw	r16,32(sp)
    5fc8:	dec01204 	addi	sp,sp,72
    5fcc:	f800283a 	ret
    5fd0:	2404b03a 	or	r2,r4,r16
    5fd4:	202b883a 	mov	r21,r4
    5fd8:	10004426 	beq	r2,zero,60ec <__muldf3+0x2ec>
    5fdc:	80015126 	beq	r16,zero,6524 <__muldf3+0x724>
    5fe0:	8009883a 	mov	r4,r16
    5fe4:	d9800715 	stw	r6,28(sp)
    5fe8:	d9c00215 	stw	r7,8(sp)
    5fec:	da400415 	stw	r9,16(sp)
    5ff0:	00070c40 	call	70c4 <__clzsi2>
    5ff4:	d9800717 	ldw	r6,28(sp)
    5ff8:	d9c00217 	ldw	r7,8(sp)
    5ffc:	da400417 	ldw	r9,16(sp)
    6000:	113ffd44 	addi	r4,r2,-11
    6004:	00c00704 	movi	r3,28
    6008:	19014216 	blt	r3,r4,6514 <__muldf3+0x714>
    600c:	00c00744 	movi	r3,29
    6010:	15bffe04 	addi	r22,r2,-8
    6014:	1907c83a 	sub	r3,r3,r4
    6018:	85a0983a 	sll	r16,r16,r22
    601c:	a8c6d83a 	srl	r3,r21,r3
    6020:	adac983a 	sll	r22,r21,r22
    6024:	1c20b03a 	or	r16,r3,r16
    6028:	1080fcc4 	addi	r2,r2,1011
    602c:	00a9c83a 	sub	r20,zero,r2
    6030:	002b883a 	mov	r21,zero
    6034:	000b883a 	mov	r5,zero
    6038:	003f9006 	br	5e7c <__alt_exception_stack_pointer+0xf8005e7c>
    603c:	3446b03a 	or	r3,r6,r17
    6040:	1800281e 	bne	r3,zero,60e4 <__muldf3+0x2e4>
    6044:	0023883a 	mov	r17,zero
    6048:	0025883a 	mov	r18,zero
    604c:	01c00084 	movi	r7,2
    6050:	003f9c06 	br	5ec4 <__alt_exception_stack_pointer+0xf8005ec4>
    6054:	3446b03a 	or	r3,r6,r17
    6058:	18001e26 	beq	r3,zero,60d4 <__muldf3+0x2d4>
    605c:	88012126 	beq	r17,zero,64e4 <__muldf3+0x6e4>
    6060:	8809883a 	mov	r4,r17
    6064:	d9400215 	stw	r5,8(sp)
    6068:	d9800715 	stw	r6,28(sp)
    606c:	da400415 	stw	r9,16(sp)
    6070:	da800315 	stw	r10,12(sp)
    6074:	00070c40 	call	70c4 <__clzsi2>
    6078:	d9400217 	ldw	r5,8(sp)
    607c:	d9800717 	ldw	r6,28(sp)
    6080:	da400417 	ldw	r9,16(sp)
    6084:	da800317 	ldw	r10,12(sp)
    6088:	113ffd44 	addi	r4,r2,-11
    608c:	00c00704 	movi	r3,28
    6090:	19011016 	blt	r3,r4,64d4 <__muldf3+0x6d4>
    6094:	00c00744 	movi	r3,29
    6098:	14bffe04 	addi	r18,r2,-8
    609c:	1907c83a 	sub	r3,r3,r4
    60a0:	8ca2983a 	sll	r17,r17,r18
    60a4:	30c6d83a 	srl	r3,r6,r3
    60a8:	34a4983a 	sll	r18,r6,r18
    60ac:	1c62b03a 	or	r17,r3,r17
    60b0:	1080fcc4 	addi	r2,r2,1011
    60b4:	0085c83a 	sub	r2,zero,r2
    60b8:	000f883a 	mov	r7,zero
    60bc:	003f8106 	br	5ec4 <__alt_exception_stack_pointer+0xf8005ec4>
    60c0:	3027883a 	mov	r19,r6
    60c4:	0081ffc4 	movi	r2,2047
    60c8:	0021883a 	mov	r16,zero
    60cc:	002d883a 	mov	r22,zero
    60d0:	003faa06 	br	5f7c <__alt_exception_stack_pointer+0xf8005f7c>
    60d4:	0023883a 	mov	r17,zero
    60d8:	0025883a 	mov	r18,zero
    60dc:	01c00044 	movi	r7,1
    60e0:	003f7806 	br	5ec4 <__alt_exception_stack_pointer+0xf8005ec4>
    60e4:	01c000c4 	movi	r7,3
    60e8:	003f7606 	br	5ec4 <__alt_exception_stack_pointer+0xf8005ec4>
    60ec:	05400104 	movi	r21,4
    60f0:	0021883a 	mov	r16,zero
    60f4:	002d883a 	mov	r22,zero
    60f8:	01400044 	movi	r5,1
    60fc:	003f5f06 	br	5e7c <__alt_exception_stack_pointer+0xf8005e7c>
    6100:	05400304 	movi	r21,12
    6104:	014000c4 	movi	r5,3
    6108:	003f5c06 	br	5e7c <__alt_exception_stack_pointer+0xf8005e7c>
    610c:	04000434 	movhi	r16,16
    6110:	0027883a 	mov	r19,zero
    6114:	843fffc4 	addi	r16,r16,-1
    6118:	05bfffc4 	movi	r22,-1
    611c:	0081ffc4 	movi	r2,2047
    6120:	003f9606 	br	5f7c <__alt_exception_stack_pointer+0xf8005f7c>
    6124:	8023883a 	mov	r17,r16
    6128:	b025883a 	mov	r18,r22
    612c:	280f883a 	mov	r7,r5
    6130:	003f8806 	br	5f54 <__alt_exception_stack_pointer+0xf8005f54>
    6134:	8023883a 	mov	r17,r16
    6138:	b025883a 	mov	r18,r22
    613c:	480d883a 	mov	r6,r9
    6140:	280f883a 	mov	r7,r5
    6144:	003f8306 	br	5f54 <__alt_exception_stack_pointer+0xf8005f54>
    6148:	b026d43a 	srli	r19,r22,16
    614c:	902ed43a 	srli	r23,r18,16
    6150:	b5bfffcc 	andi	r22,r22,65535
    6154:	94bfffcc 	andi	r18,r18,65535
    6158:	b00b883a 	mov	r5,r22
    615c:	9009883a 	mov	r4,r18
    6160:	d8c00515 	stw	r3,20(sp)
    6164:	d9800715 	stw	r6,28(sp)
    6168:	da000615 	stw	r8,24(sp)
    616c:	00053c80 	call	53c8 <__mulsi3>
    6170:	980b883a 	mov	r5,r19
    6174:	9009883a 	mov	r4,r18
    6178:	1029883a 	mov	r20,r2
    617c:	00053c80 	call	53c8 <__mulsi3>
    6180:	b80b883a 	mov	r5,r23
    6184:	9809883a 	mov	r4,r19
    6188:	102b883a 	mov	r21,r2
    618c:	00053c80 	call	53c8 <__mulsi3>
    6190:	b809883a 	mov	r4,r23
    6194:	b00b883a 	mov	r5,r22
    6198:	1039883a 	mov	fp,r2
    619c:	00053c80 	call	53c8 <__mulsi3>
    61a0:	a008d43a 	srli	r4,r20,16
    61a4:	1545883a 	add	r2,r2,r21
    61a8:	d8c00517 	ldw	r3,20(sp)
    61ac:	2085883a 	add	r2,r4,r2
    61b0:	d9800717 	ldw	r6,28(sp)
    61b4:	da000617 	ldw	r8,24(sp)
    61b8:	1540022e 	bgeu	r2,r21,61c4 <__muldf3+0x3c4>
    61bc:	01000074 	movhi	r4,1
    61c0:	e139883a 	add	fp,fp,r4
    61c4:	100e943a 	slli	r7,r2,16
    61c8:	1004d43a 	srli	r2,r2,16
    61cc:	882ad43a 	srli	r21,r17,16
    61d0:	a53fffcc 	andi	r20,r20,65535
    61d4:	8c7fffcc 	andi	r17,r17,65535
    61d8:	3d29883a 	add	r20,r7,r20
    61dc:	b00b883a 	mov	r5,r22
    61e0:	8809883a 	mov	r4,r17
    61e4:	d8c00515 	stw	r3,20(sp)
    61e8:	d9800715 	stw	r6,28(sp)
    61ec:	da000615 	stw	r8,24(sp)
    61f0:	dd000115 	stw	r20,4(sp)
    61f4:	d8800015 	stw	r2,0(sp)
    61f8:	00053c80 	call	53c8 <__mulsi3>
    61fc:	980b883a 	mov	r5,r19
    6200:	8809883a 	mov	r4,r17
    6204:	d8800215 	stw	r2,8(sp)
    6208:	00053c80 	call	53c8 <__mulsi3>
    620c:	9809883a 	mov	r4,r19
    6210:	a80b883a 	mov	r5,r21
    6214:	1029883a 	mov	r20,r2
    6218:	00053c80 	call	53c8 <__mulsi3>
    621c:	b00b883a 	mov	r5,r22
    6220:	a809883a 	mov	r4,r21
    6224:	d8800415 	stw	r2,16(sp)
    6228:	00053c80 	call	53c8 <__mulsi3>
    622c:	d9c00217 	ldw	r7,8(sp)
    6230:	1505883a 	add	r2,r2,r20
    6234:	d8c00517 	ldw	r3,20(sp)
    6238:	3826d43a 	srli	r19,r7,16
    623c:	d9800717 	ldw	r6,28(sp)
    6240:	da000617 	ldw	r8,24(sp)
    6244:	9885883a 	add	r2,r19,r2
    6248:	da400417 	ldw	r9,16(sp)
    624c:	1500022e 	bgeu	r2,r20,6258 <__muldf3+0x458>
    6250:	01000074 	movhi	r4,1
    6254:	4913883a 	add	r9,r9,r4
    6258:	1028d43a 	srli	r20,r2,16
    625c:	1004943a 	slli	r2,r2,16
    6260:	802cd43a 	srli	r22,r16,16
    6264:	843fffcc 	andi	r16,r16,65535
    6268:	3cffffcc 	andi	r19,r7,65535
    626c:	9009883a 	mov	r4,r18
    6270:	800b883a 	mov	r5,r16
    6274:	a269883a 	add	r20,r20,r9
    6278:	d8c00515 	stw	r3,20(sp)
    627c:	d9800715 	stw	r6,28(sp)
    6280:	da000615 	stw	r8,24(sp)
    6284:	14e7883a 	add	r19,r2,r19
    6288:	00053c80 	call	53c8 <__mulsi3>
    628c:	9009883a 	mov	r4,r18
    6290:	b00b883a 	mov	r5,r22
    6294:	d8800315 	stw	r2,12(sp)
    6298:	00053c80 	call	53c8 <__mulsi3>
    629c:	b809883a 	mov	r4,r23
    62a0:	b00b883a 	mov	r5,r22
    62a4:	d8800215 	stw	r2,8(sp)
    62a8:	00053c80 	call	53c8 <__mulsi3>
    62ac:	b80b883a 	mov	r5,r23
    62b0:	8009883a 	mov	r4,r16
    62b4:	d8800415 	stw	r2,16(sp)
    62b8:	00053c80 	call	53c8 <__mulsi3>
    62bc:	da800317 	ldw	r10,12(sp)
    62c0:	d9c00217 	ldw	r7,8(sp)
    62c4:	d9000017 	ldw	r4,0(sp)
    62c8:	502ed43a 	srli	r23,r10,16
    62cc:	11c5883a 	add	r2,r2,r7
    62d0:	24e5883a 	add	r18,r4,r19
    62d4:	b885883a 	add	r2,r23,r2
    62d8:	d8c00517 	ldw	r3,20(sp)
    62dc:	d9800717 	ldw	r6,28(sp)
    62e0:	da000617 	ldw	r8,24(sp)
    62e4:	da400417 	ldw	r9,16(sp)
    62e8:	11c0022e 	bgeu	r2,r7,62f4 <__muldf3+0x4f4>
    62ec:	01000074 	movhi	r4,1
    62f0:	4913883a 	add	r9,r9,r4
    62f4:	100ed43a 	srli	r7,r2,16
    62f8:	1004943a 	slli	r2,r2,16
    62fc:	55ffffcc 	andi	r23,r10,65535
    6300:	3a53883a 	add	r9,r7,r9
    6304:	8809883a 	mov	r4,r17
    6308:	800b883a 	mov	r5,r16
    630c:	d8c00515 	stw	r3,20(sp)
    6310:	d9800715 	stw	r6,28(sp)
    6314:	da000615 	stw	r8,24(sp)
    6318:	da400415 	stw	r9,16(sp)
    631c:	15ef883a 	add	r23,r2,r23
    6320:	00053c80 	call	53c8 <__mulsi3>
    6324:	8809883a 	mov	r4,r17
    6328:	b00b883a 	mov	r5,r22
    632c:	d8800215 	stw	r2,8(sp)
    6330:	00053c80 	call	53c8 <__mulsi3>
    6334:	b00b883a 	mov	r5,r22
    6338:	a809883a 	mov	r4,r21
    633c:	d8800315 	stw	r2,12(sp)
    6340:	00053c80 	call	53c8 <__mulsi3>
    6344:	8009883a 	mov	r4,r16
    6348:	a80b883a 	mov	r5,r21
    634c:	1023883a 	mov	r17,r2
    6350:	00053c80 	call	53c8 <__mulsi3>
    6354:	d9c00217 	ldw	r7,8(sp)
    6358:	da800317 	ldw	r10,12(sp)
    635c:	d8c00517 	ldw	r3,20(sp)
    6360:	3808d43a 	srli	r4,r7,16
    6364:	1285883a 	add	r2,r2,r10
    6368:	d9800717 	ldw	r6,28(sp)
    636c:	2085883a 	add	r2,r4,r2
    6370:	da000617 	ldw	r8,24(sp)
    6374:	da400417 	ldw	r9,16(sp)
    6378:	1280022e 	bgeu	r2,r10,6384 <__muldf3+0x584>
    637c:	01000074 	movhi	r4,1
    6380:	8923883a 	add	r17,r17,r4
    6384:	1008943a 	slli	r4,r2,16
    6388:	39ffffcc 	andi	r7,r7,65535
    638c:	e4b9883a 	add	fp,fp,r18
    6390:	21cf883a 	add	r7,r4,r7
    6394:	e4e7803a 	cmpltu	r19,fp,r19
    6398:	3d0f883a 	add	r7,r7,r20
    639c:	bf39883a 	add	fp,r23,fp
    63a0:	99c9883a 	add	r4,r19,r7
    63a4:	e5ef803a 	cmpltu	r23,fp,r23
    63a8:	490b883a 	add	r5,r9,r4
    63ac:	1004d43a 	srli	r2,r2,16
    63b0:	b965883a 	add	r18,r23,r5
    63b4:	24c9803a 	cmpltu	r4,r4,r19
    63b8:	3d29803a 	cmpltu	r20,r7,r20
    63bc:	a128b03a 	or	r20,r20,r4
    63c0:	95ef803a 	cmpltu	r23,r18,r23
    63c4:	2a53803a 	cmpltu	r9,r5,r9
    63c8:	a0a9883a 	add	r20,r20,r2
    63cc:	4deeb03a 	or	r23,r9,r23
    63d0:	a5ef883a 	add	r23,r20,r23
    63d4:	bc63883a 	add	r17,r23,r17
    63d8:	e004927a 	slli	r2,fp,9
    63dc:	d9000117 	ldw	r4,4(sp)
    63e0:	882e927a 	slli	r23,r17,9
    63e4:	9022d5fa 	srli	r17,r18,23
    63e8:	e038d5fa 	srli	fp,fp,23
    63ec:	1104b03a 	or	r2,r2,r4
    63f0:	9024927a 	slli	r18,r18,9
    63f4:	1004c03a 	cmpne	r2,r2,zero
    63f8:	bc62b03a 	or	r17,r23,r17
    63fc:	1738b03a 	or	fp,r2,fp
    6400:	8880402c 	andhi	r2,r17,256
    6404:	e4a4b03a 	or	r18,fp,r18
    6408:	10000726 	beq	r2,zero,6428 <__muldf3+0x628>
    640c:	9006d07a 	srli	r3,r18,1
    6410:	880497fa 	slli	r2,r17,31
    6414:	9480004c 	andi	r18,r18,1
    6418:	8822d07a 	srli	r17,r17,1
    641c:	1ca4b03a 	or	r18,r3,r18
    6420:	14a4b03a 	or	r18,r2,r18
    6424:	4007883a 	mov	r3,r8
    6428:	1880ffc4 	addi	r2,r3,1023
    642c:	0080460e 	bge	zero,r2,6548 <__muldf3+0x748>
    6430:	910001cc 	andi	r4,r18,7
    6434:	20000726 	beq	r4,zero,6454 <__muldf3+0x654>
    6438:	910003cc 	andi	r4,r18,15
    643c:	01400104 	movi	r5,4
    6440:	21400426 	beq	r4,r5,6454 <__muldf3+0x654>
    6444:	9149883a 	add	r4,r18,r5
    6448:	24a5803a 	cmpltu	r18,r4,r18
    644c:	8ca3883a 	add	r17,r17,r18
    6450:	2025883a 	mov	r18,r4
    6454:	8900402c 	andhi	r4,r17,256
    6458:	20000426 	beq	r4,zero,646c <__muldf3+0x66c>
    645c:	18810004 	addi	r2,r3,1024
    6460:	00ffc034 	movhi	r3,65280
    6464:	18ffffc4 	addi	r3,r3,-1
    6468:	88e2703a 	and	r17,r17,r3
    646c:	00c1ff84 	movi	r3,2046
    6470:	18bf1316 	blt	r3,r2,60c0 <__alt_exception_stack_pointer+0xf80060c0>
    6474:	882c977a 	slli	r22,r17,29
    6478:	9024d0fa 	srli	r18,r18,3
    647c:	8822927a 	slli	r17,r17,9
    6480:	1081ffcc 	andi	r2,r2,2047
    6484:	b4acb03a 	or	r22,r22,r18
    6488:	8820d33a 	srli	r16,r17,12
    648c:	3027883a 	mov	r19,r6
    6490:	003eba06 	br	5f7c <__alt_exception_stack_pointer+0xf8005f7c>
    6494:	8080022c 	andhi	r2,r16,8
    6498:	10000926 	beq	r2,zero,64c0 <__muldf3+0x6c0>
    649c:	8880022c 	andhi	r2,r17,8
    64a0:	1000071e 	bne	r2,zero,64c0 <__muldf3+0x6c0>
    64a4:	00800434 	movhi	r2,16
    64a8:	8c000234 	orhi	r16,r17,8
    64ac:	10bfffc4 	addi	r2,r2,-1
    64b0:	e027883a 	mov	r19,fp
    64b4:	80a0703a 	and	r16,r16,r2
    64b8:	902d883a 	mov	r22,r18
    64bc:	003f1706 	br	611c <__alt_exception_stack_pointer+0xf800611c>
    64c0:	00800434 	movhi	r2,16
    64c4:	84000234 	orhi	r16,r16,8
    64c8:	10bfffc4 	addi	r2,r2,-1
    64cc:	80a0703a 	and	r16,r16,r2
    64d0:	003f1206 	br	611c <__alt_exception_stack_pointer+0xf800611c>
    64d4:	147ff604 	addi	r17,r2,-40
    64d8:	3462983a 	sll	r17,r6,r17
    64dc:	0025883a 	mov	r18,zero
    64e0:	003ef306 	br	60b0 <__alt_exception_stack_pointer+0xf80060b0>
    64e4:	3009883a 	mov	r4,r6
    64e8:	d9400215 	stw	r5,8(sp)
    64ec:	d9800715 	stw	r6,28(sp)
    64f0:	da400415 	stw	r9,16(sp)
    64f4:	da800315 	stw	r10,12(sp)
    64f8:	00070c40 	call	70c4 <__clzsi2>
    64fc:	10800804 	addi	r2,r2,32
    6500:	da800317 	ldw	r10,12(sp)
    6504:	da400417 	ldw	r9,16(sp)
    6508:	d9800717 	ldw	r6,28(sp)
    650c:	d9400217 	ldw	r5,8(sp)
    6510:	003edd06 	br	6088 <__alt_exception_stack_pointer+0xf8006088>
    6514:	143ff604 	addi	r16,r2,-40
    6518:	ac20983a 	sll	r16,r21,r16
    651c:	002d883a 	mov	r22,zero
    6520:	003ec106 	br	6028 <__alt_exception_stack_pointer+0xf8006028>
    6524:	d9800715 	stw	r6,28(sp)
    6528:	d9c00215 	stw	r7,8(sp)
    652c:	da400415 	stw	r9,16(sp)
    6530:	00070c40 	call	70c4 <__clzsi2>
    6534:	10800804 	addi	r2,r2,32
    6538:	da400417 	ldw	r9,16(sp)
    653c:	d9c00217 	ldw	r7,8(sp)
    6540:	d9800717 	ldw	r6,28(sp)
    6544:	003eae06 	br	6000 <__alt_exception_stack_pointer+0xf8006000>
    6548:	00c00044 	movi	r3,1
    654c:	1887c83a 	sub	r3,r3,r2
    6550:	01000e04 	movi	r4,56
    6554:	20fe8516 	blt	r4,r3,5f6c <__alt_exception_stack_pointer+0xf8005f6c>
    6558:	010007c4 	movi	r4,31
    655c:	20c01b16 	blt	r4,r3,65cc <__muldf3+0x7cc>
    6560:	00800804 	movi	r2,32
    6564:	10c5c83a 	sub	r2,r2,r3
    6568:	888a983a 	sll	r5,r17,r2
    656c:	90c8d83a 	srl	r4,r18,r3
    6570:	9084983a 	sll	r2,r18,r2
    6574:	88e2d83a 	srl	r17,r17,r3
    6578:	2906b03a 	or	r3,r5,r4
    657c:	1004c03a 	cmpne	r2,r2,zero
    6580:	1886b03a 	or	r3,r3,r2
    6584:	188001cc 	andi	r2,r3,7
    6588:	10000726 	beq	r2,zero,65a8 <__muldf3+0x7a8>
    658c:	188003cc 	andi	r2,r3,15
    6590:	01000104 	movi	r4,4
    6594:	11000426 	beq	r2,r4,65a8 <__muldf3+0x7a8>
    6598:	1805883a 	mov	r2,r3
    659c:	10c00104 	addi	r3,r2,4
    65a0:	1885803a 	cmpltu	r2,r3,r2
    65a4:	88a3883a 	add	r17,r17,r2
    65a8:	8880202c 	andhi	r2,r17,128
    65ac:	10001c26 	beq	r2,zero,6620 <__muldf3+0x820>
    65b0:	3027883a 	mov	r19,r6
    65b4:	00800044 	movi	r2,1
    65b8:	0021883a 	mov	r16,zero
    65bc:	002d883a 	mov	r22,zero
    65c0:	003e6e06 	br	5f7c <__alt_exception_stack_pointer+0xf8005f7c>
    65c4:	4007883a 	mov	r3,r8
    65c8:	003f9706 	br	6428 <__alt_exception_stack_pointer+0xf8006428>
    65cc:	017ff844 	movi	r5,-31
    65d0:	2885c83a 	sub	r2,r5,r2
    65d4:	888ad83a 	srl	r5,r17,r2
    65d8:	00800804 	movi	r2,32
    65dc:	18801a26 	beq	r3,r2,6648 <__muldf3+0x848>
    65e0:	01001004 	movi	r4,64
    65e4:	20c7c83a 	sub	r3,r4,r3
    65e8:	88e2983a 	sll	r17,r17,r3
    65ec:	8ca4b03a 	or	r18,r17,r18
    65f0:	9004c03a 	cmpne	r2,r18,zero
    65f4:	2884b03a 	or	r2,r5,r2
    65f8:	144001cc 	andi	r17,r2,7
    65fc:	88000d1e 	bne	r17,zero,6634 <__muldf3+0x834>
    6600:	0021883a 	mov	r16,zero
    6604:	102cd0fa 	srli	r22,r2,3
    6608:	3027883a 	mov	r19,r6
    660c:	0005883a 	mov	r2,zero
    6610:	b46cb03a 	or	r22,r22,r17
    6614:	003e5906 	br	5f7c <__alt_exception_stack_pointer+0xf8005f7c>
    6618:	1007883a 	mov	r3,r2
    661c:	0023883a 	mov	r17,zero
    6620:	8820927a 	slli	r16,r17,9
    6624:	1805883a 	mov	r2,r3
    6628:	8822977a 	slli	r17,r17,29
    662c:	8020d33a 	srli	r16,r16,12
    6630:	003ff406 	br	6604 <__alt_exception_stack_pointer+0xf8006604>
    6634:	10c003cc 	andi	r3,r2,15
    6638:	01000104 	movi	r4,4
    663c:	193ff626 	beq	r3,r4,6618 <__alt_exception_stack_pointer+0xf8006618>
    6640:	0023883a 	mov	r17,zero
    6644:	003fd506 	br	659c <__alt_exception_stack_pointer+0xf800659c>
    6648:	0023883a 	mov	r17,zero
    664c:	003fe706 	br	65ec <__alt_exception_stack_pointer+0xf80065ec>
    6650:	00800434 	movhi	r2,16
    6654:	8c000234 	orhi	r16,r17,8
    6658:	10bfffc4 	addi	r2,r2,-1
    665c:	3027883a 	mov	r19,r6
    6660:	80a0703a 	and	r16,r16,r2
    6664:	902d883a 	mov	r22,r18
    6668:	003eac06 	br	611c <__alt_exception_stack_pointer+0xf800611c>

0000666c <__subdf3>:
    666c:	02000434 	movhi	r8,16
    6670:	423fffc4 	addi	r8,r8,-1
    6674:	defffb04 	addi	sp,sp,-20
    6678:	2a14703a 	and	r10,r5,r8
    667c:	3812d53a 	srli	r9,r7,20
    6680:	3a10703a 	and	r8,r7,r8
    6684:	2006d77a 	srli	r3,r4,29
    6688:	3004d77a 	srli	r2,r6,29
    668c:	dc000015 	stw	r16,0(sp)
    6690:	501490fa 	slli	r10,r10,3
    6694:	2820d53a 	srli	r16,r5,20
    6698:	401090fa 	slli	r8,r8,3
    669c:	dc800215 	stw	r18,8(sp)
    66a0:	dc400115 	stw	r17,4(sp)
    66a4:	dfc00415 	stw	ra,16(sp)
    66a8:	202290fa 	slli	r17,r4,3
    66ac:	dcc00315 	stw	r19,12(sp)
    66b0:	4a41ffcc 	andi	r9,r9,2047
    66b4:	0101ffc4 	movi	r4,2047
    66b8:	2824d7fa 	srli	r18,r5,31
    66bc:	8401ffcc 	andi	r16,r16,2047
    66c0:	50c6b03a 	or	r3,r10,r3
    66c4:	380ed7fa 	srli	r7,r7,31
    66c8:	408ab03a 	or	r5,r8,r2
    66cc:	300c90fa 	slli	r6,r6,3
    66d0:	49009626 	beq	r9,r4,692c <__subdf3+0x2c0>
    66d4:	39c0005c 	xori	r7,r7,1
    66d8:	8245c83a 	sub	r2,r16,r9
    66dc:	3c807426 	beq	r7,r18,68b0 <__subdf3+0x244>
    66e0:	0080af0e 	bge	zero,r2,69a0 <__subdf3+0x334>
    66e4:	48002a1e 	bne	r9,zero,6790 <__subdf3+0x124>
    66e8:	2988b03a 	or	r4,r5,r6
    66ec:	20009a1e 	bne	r4,zero,6958 <__subdf3+0x2ec>
    66f0:	888001cc 	andi	r2,r17,7
    66f4:	10000726 	beq	r2,zero,6714 <__subdf3+0xa8>
    66f8:	888003cc 	andi	r2,r17,15
    66fc:	01000104 	movi	r4,4
    6700:	11000426 	beq	r2,r4,6714 <__subdf3+0xa8>
    6704:	890b883a 	add	r5,r17,r4
    6708:	2c63803a 	cmpltu	r17,r5,r17
    670c:	1c47883a 	add	r3,r3,r17
    6710:	2823883a 	mov	r17,r5
    6714:	1880202c 	andhi	r2,r3,128
    6718:	10005926 	beq	r2,zero,6880 <__subdf3+0x214>
    671c:	84000044 	addi	r16,r16,1
    6720:	0081ffc4 	movi	r2,2047
    6724:	8080be26 	beq	r16,r2,6a20 <__subdf3+0x3b4>
    6728:	017fe034 	movhi	r5,65408
    672c:	297fffc4 	addi	r5,r5,-1
    6730:	1946703a 	and	r3,r3,r5
    6734:	1804977a 	slli	r2,r3,29
    6738:	1806927a 	slli	r3,r3,9
    673c:	8822d0fa 	srli	r17,r17,3
    6740:	8401ffcc 	andi	r16,r16,2047
    6744:	180ad33a 	srli	r5,r3,12
    6748:	9100004c 	andi	r4,r18,1
    674c:	1444b03a 	or	r2,r2,r17
    6750:	80c1ffcc 	andi	r3,r16,2047
    6754:	1820953a 	slli	r16,r3,20
    6758:	20c03fcc 	andi	r3,r4,255
    675c:	180897fa 	slli	r4,r3,31
    6760:	00c00434 	movhi	r3,16
    6764:	18ffffc4 	addi	r3,r3,-1
    6768:	28c6703a 	and	r3,r5,r3
    676c:	1c06b03a 	or	r3,r3,r16
    6770:	1906b03a 	or	r3,r3,r4
    6774:	dfc00417 	ldw	ra,16(sp)
    6778:	dcc00317 	ldw	r19,12(sp)
    677c:	dc800217 	ldw	r18,8(sp)
    6780:	dc400117 	ldw	r17,4(sp)
    6784:	dc000017 	ldw	r16,0(sp)
    6788:	dec00504 	addi	sp,sp,20
    678c:	f800283a 	ret
    6790:	0101ffc4 	movi	r4,2047
    6794:	813fd626 	beq	r16,r4,66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6798:	29402034 	orhi	r5,r5,128
    679c:	01000e04 	movi	r4,56
    67a0:	2080a316 	blt	r4,r2,6a30 <__subdf3+0x3c4>
    67a4:	010007c4 	movi	r4,31
    67a8:	2080c616 	blt	r4,r2,6ac4 <__subdf3+0x458>
    67ac:	01000804 	movi	r4,32
    67b0:	2089c83a 	sub	r4,r4,r2
    67b4:	2910983a 	sll	r8,r5,r4
    67b8:	308ed83a 	srl	r7,r6,r2
    67bc:	3108983a 	sll	r4,r6,r4
    67c0:	2884d83a 	srl	r2,r5,r2
    67c4:	41ccb03a 	or	r6,r8,r7
    67c8:	2008c03a 	cmpne	r4,r4,zero
    67cc:	310cb03a 	or	r6,r6,r4
    67d0:	898dc83a 	sub	r6,r17,r6
    67d4:	89a3803a 	cmpltu	r17,r17,r6
    67d8:	1887c83a 	sub	r3,r3,r2
    67dc:	1c47c83a 	sub	r3,r3,r17
    67e0:	3023883a 	mov	r17,r6
    67e4:	1880202c 	andhi	r2,r3,128
    67e8:	10002326 	beq	r2,zero,6878 <__subdf3+0x20c>
    67ec:	04c02034 	movhi	r19,128
    67f0:	9cffffc4 	addi	r19,r19,-1
    67f4:	1ce6703a 	and	r19,r3,r19
    67f8:	98007a26 	beq	r19,zero,69e4 <__subdf3+0x378>
    67fc:	9809883a 	mov	r4,r19
    6800:	00070c40 	call	70c4 <__clzsi2>
    6804:	113ffe04 	addi	r4,r2,-8
    6808:	00c007c4 	movi	r3,31
    680c:	19007b16 	blt	r3,r4,69fc <__subdf3+0x390>
    6810:	00800804 	movi	r2,32
    6814:	1105c83a 	sub	r2,r2,r4
    6818:	8884d83a 	srl	r2,r17,r2
    681c:	9906983a 	sll	r3,r19,r4
    6820:	8922983a 	sll	r17,r17,r4
    6824:	10c4b03a 	or	r2,r2,r3
    6828:	24007816 	blt	r4,r16,6a0c <__subdf3+0x3a0>
    682c:	2421c83a 	sub	r16,r4,r16
    6830:	80c00044 	addi	r3,r16,1
    6834:	010007c4 	movi	r4,31
    6838:	20c09516 	blt	r4,r3,6a90 <__subdf3+0x424>
    683c:	01400804 	movi	r5,32
    6840:	28cbc83a 	sub	r5,r5,r3
    6844:	88c8d83a 	srl	r4,r17,r3
    6848:	8962983a 	sll	r17,r17,r5
    684c:	114a983a 	sll	r5,r2,r5
    6850:	10c6d83a 	srl	r3,r2,r3
    6854:	8804c03a 	cmpne	r2,r17,zero
    6858:	290ab03a 	or	r5,r5,r4
    685c:	28a2b03a 	or	r17,r5,r2
    6860:	0021883a 	mov	r16,zero
    6864:	003fa206 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6868:	2090b03a 	or	r8,r4,r2
    686c:	40018e26 	beq	r8,zero,6ea8 <__subdf3+0x83c>
    6870:	1007883a 	mov	r3,r2
    6874:	2023883a 	mov	r17,r4
    6878:	888001cc 	andi	r2,r17,7
    687c:	103f9e1e 	bne	r2,zero,66f8 <__alt_exception_stack_pointer+0xf80066f8>
    6880:	1804977a 	slli	r2,r3,29
    6884:	8822d0fa 	srli	r17,r17,3
    6888:	1810d0fa 	srli	r8,r3,3
    688c:	9100004c 	andi	r4,r18,1
    6890:	1444b03a 	or	r2,r2,r17
    6894:	00c1ffc4 	movi	r3,2047
    6898:	80c02826 	beq	r16,r3,693c <__subdf3+0x2d0>
    689c:	01400434 	movhi	r5,16
    68a0:	297fffc4 	addi	r5,r5,-1
    68a4:	80e0703a 	and	r16,r16,r3
    68a8:	414a703a 	and	r5,r8,r5
    68ac:	003fa806 	br	6750 <__alt_exception_stack_pointer+0xf8006750>
    68b0:	0080630e 	bge	zero,r2,6a40 <__subdf3+0x3d4>
    68b4:	48003026 	beq	r9,zero,6978 <__subdf3+0x30c>
    68b8:	0101ffc4 	movi	r4,2047
    68bc:	813f8c26 	beq	r16,r4,66f0 <__alt_exception_stack_pointer+0xf80066f0>
    68c0:	29402034 	orhi	r5,r5,128
    68c4:	01000e04 	movi	r4,56
    68c8:	2080a90e 	bge	r4,r2,6b70 <__subdf3+0x504>
    68cc:	298cb03a 	or	r6,r5,r6
    68d0:	3012c03a 	cmpne	r9,r6,zero
    68d4:	0005883a 	mov	r2,zero
    68d8:	4c53883a 	add	r9,r9,r17
    68dc:	4c63803a 	cmpltu	r17,r9,r17
    68e0:	10c7883a 	add	r3,r2,r3
    68e4:	88c7883a 	add	r3,r17,r3
    68e8:	4823883a 	mov	r17,r9
    68ec:	1880202c 	andhi	r2,r3,128
    68f0:	1000d026 	beq	r2,zero,6c34 <__subdf3+0x5c8>
    68f4:	84000044 	addi	r16,r16,1
    68f8:	0081ffc4 	movi	r2,2047
    68fc:	8080fe26 	beq	r16,r2,6cf8 <__subdf3+0x68c>
    6900:	00bfe034 	movhi	r2,65408
    6904:	10bfffc4 	addi	r2,r2,-1
    6908:	1886703a 	and	r3,r3,r2
    690c:	880ad07a 	srli	r5,r17,1
    6910:	180497fa 	slli	r2,r3,31
    6914:	8900004c 	andi	r4,r17,1
    6918:	2922b03a 	or	r17,r5,r4
    691c:	1806d07a 	srli	r3,r3,1
    6920:	1462b03a 	or	r17,r2,r17
    6924:	3825883a 	mov	r18,r7
    6928:	003f7106 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    692c:	2984b03a 	or	r2,r5,r6
    6930:	103f6826 	beq	r2,zero,66d4 <__alt_exception_stack_pointer+0xf80066d4>
    6934:	39c03fcc 	andi	r7,r7,255
    6938:	003f6706 	br	66d8 <__alt_exception_stack_pointer+0xf80066d8>
    693c:	4086b03a 	or	r3,r8,r2
    6940:	18015226 	beq	r3,zero,6e8c <__subdf3+0x820>
    6944:	00c00434 	movhi	r3,16
    6948:	41400234 	orhi	r5,r8,8
    694c:	18ffffc4 	addi	r3,r3,-1
    6950:	28ca703a 	and	r5,r5,r3
    6954:	003f7e06 	br	6750 <__alt_exception_stack_pointer+0xf8006750>
    6958:	10bfffc4 	addi	r2,r2,-1
    695c:	1000491e 	bne	r2,zero,6a84 <__subdf3+0x418>
    6960:	898fc83a 	sub	r7,r17,r6
    6964:	89e3803a 	cmpltu	r17,r17,r7
    6968:	1947c83a 	sub	r3,r3,r5
    696c:	1c47c83a 	sub	r3,r3,r17
    6970:	3823883a 	mov	r17,r7
    6974:	003f9b06 	br	67e4 <__alt_exception_stack_pointer+0xf80067e4>
    6978:	2988b03a 	or	r4,r5,r6
    697c:	203f5c26 	beq	r4,zero,66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6980:	10bfffc4 	addi	r2,r2,-1
    6984:	1000931e 	bne	r2,zero,6bd4 <__subdf3+0x568>
    6988:	898d883a 	add	r6,r17,r6
    698c:	3463803a 	cmpltu	r17,r6,r17
    6990:	1947883a 	add	r3,r3,r5
    6994:	88c7883a 	add	r3,r17,r3
    6998:	3023883a 	mov	r17,r6
    699c:	003fd306 	br	68ec <__alt_exception_stack_pointer+0xf80068ec>
    69a0:	1000541e 	bne	r2,zero,6af4 <__subdf3+0x488>
    69a4:	80800044 	addi	r2,r16,1
    69a8:	1081ffcc 	andi	r2,r2,2047
    69ac:	01000044 	movi	r4,1
    69b0:	2080a20e 	bge	r4,r2,6c3c <__subdf3+0x5d0>
    69b4:	8989c83a 	sub	r4,r17,r6
    69b8:	8905803a 	cmpltu	r2,r17,r4
    69bc:	1967c83a 	sub	r19,r3,r5
    69c0:	98a7c83a 	sub	r19,r19,r2
    69c4:	9880202c 	andhi	r2,r19,128
    69c8:	10006326 	beq	r2,zero,6b58 <__subdf3+0x4ec>
    69cc:	3463c83a 	sub	r17,r6,r17
    69d0:	28c7c83a 	sub	r3,r5,r3
    69d4:	344d803a 	cmpltu	r6,r6,r17
    69d8:	19a7c83a 	sub	r19,r3,r6
    69dc:	3825883a 	mov	r18,r7
    69e0:	983f861e 	bne	r19,zero,67fc <__alt_exception_stack_pointer+0xf80067fc>
    69e4:	8809883a 	mov	r4,r17
    69e8:	00070c40 	call	70c4 <__clzsi2>
    69ec:	10800804 	addi	r2,r2,32
    69f0:	113ffe04 	addi	r4,r2,-8
    69f4:	00c007c4 	movi	r3,31
    69f8:	193f850e 	bge	r3,r4,6810 <__alt_exception_stack_pointer+0xf8006810>
    69fc:	10bff604 	addi	r2,r2,-40
    6a00:	8884983a 	sll	r2,r17,r2
    6a04:	0023883a 	mov	r17,zero
    6a08:	243f880e 	bge	r4,r16,682c <__alt_exception_stack_pointer+0xf800682c>
    6a0c:	00ffe034 	movhi	r3,65408
    6a10:	18ffffc4 	addi	r3,r3,-1
    6a14:	8121c83a 	sub	r16,r16,r4
    6a18:	10c6703a 	and	r3,r2,r3
    6a1c:	003f3406 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6a20:	9100004c 	andi	r4,r18,1
    6a24:	000b883a 	mov	r5,zero
    6a28:	0005883a 	mov	r2,zero
    6a2c:	003f4806 	br	6750 <__alt_exception_stack_pointer+0xf8006750>
    6a30:	298cb03a 	or	r6,r5,r6
    6a34:	300cc03a 	cmpne	r6,r6,zero
    6a38:	0005883a 	mov	r2,zero
    6a3c:	003f6406 	br	67d0 <__alt_exception_stack_pointer+0xf80067d0>
    6a40:	10009a1e 	bne	r2,zero,6cac <__subdf3+0x640>
    6a44:	82400044 	addi	r9,r16,1
    6a48:	4881ffcc 	andi	r2,r9,2047
    6a4c:	02800044 	movi	r10,1
    6a50:	5080670e 	bge	r10,r2,6bf0 <__subdf3+0x584>
    6a54:	0081ffc4 	movi	r2,2047
    6a58:	4880af26 	beq	r9,r2,6d18 <__subdf3+0x6ac>
    6a5c:	898d883a 	add	r6,r17,r6
    6a60:	1945883a 	add	r2,r3,r5
    6a64:	3447803a 	cmpltu	r3,r6,r17
    6a68:	1887883a 	add	r3,r3,r2
    6a6c:	182297fa 	slli	r17,r3,31
    6a70:	300cd07a 	srli	r6,r6,1
    6a74:	1806d07a 	srli	r3,r3,1
    6a78:	4821883a 	mov	r16,r9
    6a7c:	89a2b03a 	or	r17,r17,r6
    6a80:	003f1b06 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6a84:	0101ffc4 	movi	r4,2047
    6a88:	813f441e 	bne	r16,r4,679c <__alt_exception_stack_pointer+0xf800679c>
    6a8c:	003f1806 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6a90:	843ff844 	addi	r16,r16,-31
    6a94:	01400804 	movi	r5,32
    6a98:	1408d83a 	srl	r4,r2,r16
    6a9c:	19405026 	beq	r3,r5,6be0 <__subdf3+0x574>
    6aa0:	01401004 	movi	r5,64
    6aa4:	28c7c83a 	sub	r3,r5,r3
    6aa8:	10c4983a 	sll	r2,r2,r3
    6aac:	88a2b03a 	or	r17,r17,r2
    6ab0:	8822c03a 	cmpne	r17,r17,zero
    6ab4:	2462b03a 	or	r17,r4,r17
    6ab8:	0007883a 	mov	r3,zero
    6abc:	0021883a 	mov	r16,zero
    6ac0:	003f6d06 	br	6878 <__alt_exception_stack_pointer+0xf8006878>
    6ac4:	11fff804 	addi	r7,r2,-32
    6ac8:	01000804 	movi	r4,32
    6acc:	29ced83a 	srl	r7,r5,r7
    6ad0:	11004526 	beq	r2,r4,6be8 <__subdf3+0x57c>
    6ad4:	01001004 	movi	r4,64
    6ad8:	2089c83a 	sub	r4,r4,r2
    6adc:	2904983a 	sll	r2,r5,r4
    6ae0:	118cb03a 	or	r6,r2,r6
    6ae4:	300cc03a 	cmpne	r6,r6,zero
    6ae8:	398cb03a 	or	r6,r7,r6
    6aec:	0005883a 	mov	r2,zero
    6af0:	003f3706 	br	67d0 <__alt_exception_stack_pointer+0xf80067d0>
    6af4:	80002a26 	beq	r16,zero,6ba0 <__subdf3+0x534>
    6af8:	0101ffc4 	movi	r4,2047
    6afc:	49006626 	beq	r9,r4,6c98 <__subdf3+0x62c>
    6b00:	0085c83a 	sub	r2,zero,r2
    6b04:	18c02034 	orhi	r3,r3,128
    6b08:	01000e04 	movi	r4,56
    6b0c:	20807e16 	blt	r4,r2,6d08 <__subdf3+0x69c>
    6b10:	010007c4 	movi	r4,31
    6b14:	2080e716 	blt	r4,r2,6eb4 <__subdf3+0x848>
    6b18:	01000804 	movi	r4,32
    6b1c:	2089c83a 	sub	r4,r4,r2
    6b20:	1914983a 	sll	r10,r3,r4
    6b24:	8890d83a 	srl	r8,r17,r2
    6b28:	8908983a 	sll	r4,r17,r4
    6b2c:	1884d83a 	srl	r2,r3,r2
    6b30:	5222b03a 	or	r17,r10,r8
    6b34:	2006c03a 	cmpne	r3,r4,zero
    6b38:	88e2b03a 	or	r17,r17,r3
    6b3c:	3463c83a 	sub	r17,r6,r17
    6b40:	2885c83a 	sub	r2,r5,r2
    6b44:	344d803a 	cmpltu	r6,r6,r17
    6b48:	1187c83a 	sub	r3,r2,r6
    6b4c:	4821883a 	mov	r16,r9
    6b50:	3825883a 	mov	r18,r7
    6b54:	003f2306 	br	67e4 <__alt_exception_stack_pointer+0xf80067e4>
    6b58:	24d0b03a 	or	r8,r4,r19
    6b5c:	40001b1e 	bne	r8,zero,6bcc <__subdf3+0x560>
    6b60:	0005883a 	mov	r2,zero
    6b64:	0009883a 	mov	r4,zero
    6b68:	0021883a 	mov	r16,zero
    6b6c:	003f4906 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    6b70:	010007c4 	movi	r4,31
    6b74:	20803a16 	blt	r4,r2,6c60 <__subdf3+0x5f4>
    6b78:	01000804 	movi	r4,32
    6b7c:	2089c83a 	sub	r4,r4,r2
    6b80:	2912983a 	sll	r9,r5,r4
    6b84:	3090d83a 	srl	r8,r6,r2
    6b88:	3108983a 	sll	r4,r6,r4
    6b8c:	2884d83a 	srl	r2,r5,r2
    6b90:	4a12b03a 	or	r9,r9,r8
    6b94:	2008c03a 	cmpne	r4,r4,zero
    6b98:	4912b03a 	or	r9,r9,r4
    6b9c:	003f4e06 	br	68d8 <__alt_exception_stack_pointer+0xf80068d8>
    6ba0:	1c48b03a 	or	r4,r3,r17
    6ba4:	20003c26 	beq	r4,zero,6c98 <__subdf3+0x62c>
    6ba8:	0084303a 	nor	r2,zero,r2
    6bac:	1000381e 	bne	r2,zero,6c90 <__subdf3+0x624>
    6bb0:	3463c83a 	sub	r17,r6,r17
    6bb4:	28c5c83a 	sub	r2,r5,r3
    6bb8:	344d803a 	cmpltu	r6,r6,r17
    6bbc:	1187c83a 	sub	r3,r2,r6
    6bc0:	4821883a 	mov	r16,r9
    6bc4:	3825883a 	mov	r18,r7
    6bc8:	003f0606 	br	67e4 <__alt_exception_stack_pointer+0xf80067e4>
    6bcc:	2023883a 	mov	r17,r4
    6bd0:	003f0906 	br	67f8 <__alt_exception_stack_pointer+0xf80067f8>
    6bd4:	0101ffc4 	movi	r4,2047
    6bd8:	813f3a1e 	bne	r16,r4,68c4 <__alt_exception_stack_pointer+0xf80068c4>
    6bdc:	003ec406 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6be0:	0005883a 	mov	r2,zero
    6be4:	003fb106 	br	6aac <__alt_exception_stack_pointer+0xf8006aac>
    6be8:	0005883a 	mov	r2,zero
    6bec:	003fbc06 	br	6ae0 <__alt_exception_stack_pointer+0xf8006ae0>
    6bf0:	1c44b03a 	or	r2,r3,r17
    6bf4:	80008e1e 	bne	r16,zero,6e30 <__subdf3+0x7c4>
    6bf8:	1000c826 	beq	r2,zero,6f1c <__subdf3+0x8b0>
    6bfc:	2984b03a 	or	r2,r5,r6
    6c00:	103ebb26 	beq	r2,zero,66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6c04:	8989883a 	add	r4,r17,r6
    6c08:	1945883a 	add	r2,r3,r5
    6c0c:	2447803a 	cmpltu	r3,r4,r17
    6c10:	1887883a 	add	r3,r3,r2
    6c14:	1880202c 	andhi	r2,r3,128
    6c18:	2023883a 	mov	r17,r4
    6c1c:	103f1626 	beq	r2,zero,6878 <__alt_exception_stack_pointer+0xf8006878>
    6c20:	00bfe034 	movhi	r2,65408
    6c24:	10bfffc4 	addi	r2,r2,-1
    6c28:	5021883a 	mov	r16,r10
    6c2c:	1886703a 	and	r3,r3,r2
    6c30:	003eaf06 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6c34:	3825883a 	mov	r18,r7
    6c38:	003f0f06 	br	6878 <__alt_exception_stack_pointer+0xf8006878>
    6c3c:	1c44b03a 	or	r2,r3,r17
    6c40:	8000251e 	bne	r16,zero,6cd8 <__subdf3+0x66c>
    6c44:	1000661e 	bne	r2,zero,6de0 <__subdf3+0x774>
    6c48:	2990b03a 	or	r8,r5,r6
    6c4c:	40009626 	beq	r8,zero,6ea8 <__subdf3+0x83c>
    6c50:	2807883a 	mov	r3,r5
    6c54:	3023883a 	mov	r17,r6
    6c58:	3825883a 	mov	r18,r7
    6c5c:	003ea406 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6c60:	127ff804 	addi	r9,r2,-32
    6c64:	01000804 	movi	r4,32
    6c68:	2a52d83a 	srl	r9,r5,r9
    6c6c:	11008c26 	beq	r2,r4,6ea0 <__subdf3+0x834>
    6c70:	01001004 	movi	r4,64
    6c74:	2085c83a 	sub	r2,r4,r2
    6c78:	2884983a 	sll	r2,r5,r2
    6c7c:	118cb03a 	or	r6,r2,r6
    6c80:	300cc03a 	cmpne	r6,r6,zero
    6c84:	4992b03a 	or	r9,r9,r6
    6c88:	0005883a 	mov	r2,zero
    6c8c:	003f1206 	br	68d8 <__alt_exception_stack_pointer+0xf80068d8>
    6c90:	0101ffc4 	movi	r4,2047
    6c94:	493f9c1e 	bne	r9,r4,6b08 <__alt_exception_stack_pointer+0xf8006b08>
    6c98:	2807883a 	mov	r3,r5
    6c9c:	3023883a 	mov	r17,r6
    6ca0:	4821883a 	mov	r16,r9
    6ca4:	3825883a 	mov	r18,r7
    6ca8:	003e9106 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6cac:	80001f1e 	bne	r16,zero,6d2c <__subdf3+0x6c0>
    6cb0:	1c48b03a 	or	r4,r3,r17
    6cb4:	20005a26 	beq	r4,zero,6e20 <__subdf3+0x7b4>
    6cb8:	0084303a 	nor	r2,zero,r2
    6cbc:	1000561e 	bne	r2,zero,6e18 <__subdf3+0x7ac>
    6cc0:	89a3883a 	add	r17,r17,r6
    6cc4:	1945883a 	add	r2,r3,r5
    6cc8:	898d803a 	cmpltu	r6,r17,r6
    6ccc:	3087883a 	add	r3,r6,r2
    6cd0:	4821883a 	mov	r16,r9
    6cd4:	003f0506 	br	68ec <__alt_exception_stack_pointer+0xf80068ec>
    6cd8:	10002b1e 	bne	r2,zero,6d88 <__subdf3+0x71c>
    6cdc:	2984b03a 	or	r2,r5,r6
    6ce0:	10008026 	beq	r2,zero,6ee4 <__subdf3+0x878>
    6ce4:	2807883a 	mov	r3,r5
    6ce8:	3023883a 	mov	r17,r6
    6cec:	3825883a 	mov	r18,r7
    6cf0:	0401ffc4 	movi	r16,2047
    6cf4:	003e7e06 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6cf8:	3809883a 	mov	r4,r7
    6cfc:	0011883a 	mov	r8,zero
    6d00:	0005883a 	mov	r2,zero
    6d04:	003ee306 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    6d08:	1c62b03a 	or	r17,r3,r17
    6d0c:	8822c03a 	cmpne	r17,r17,zero
    6d10:	0005883a 	mov	r2,zero
    6d14:	003f8906 	br	6b3c <__alt_exception_stack_pointer+0xf8006b3c>
    6d18:	3809883a 	mov	r4,r7
    6d1c:	4821883a 	mov	r16,r9
    6d20:	0011883a 	mov	r8,zero
    6d24:	0005883a 	mov	r2,zero
    6d28:	003eda06 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    6d2c:	0101ffc4 	movi	r4,2047
    6d30:	49003b26 	beq	r9,r4,6e20 <__subdf3+0x7b4>
    6d34:	0085c83a 	sub	r2,zero,r2
    6d38:	18c02034 	orhi	r3,r3,128
    6d3c:	01000e04 	movi	r4,56
    6d40:	20806e16 	blt	r4,r2,6efc <__subdf3+0x890>
    6d44:	010007c4 	movi	r4,31
    6d48:	20807716 	blt	r4,r2,6f28 <__subdf3+0x8bc>
    6d4c:	01000804 	movi	r4,32
    6d50:	2089c83a 	sub	r4,r4,r2
    6d54:	1914983a 	sll	r10,r3,r4
    6d58:	8890d83a 	srl	r8,r17,r2
    6d5c:	8908983a 	sll	r4,r17,r4
    6d60:	1884d83a 	srl	r2,r3,r2
    6d64:	5222b03a 	or	r17,r10,r8
    6d68:	2006c03a 	cmpne	r3,r4,zero
    6d6c:	88e2b03a 	or	r17,r17,r3
    6d70:	89a3883a 	add	r17,r17,r6
    6d74:	1145883a 	add	r2,r2,r5
    6d78:	898d803a 	cmpltu	r6,r17,r6
    6d7c:	3087883a 	add	r3,r6,r2
    6d80:	4821883a 	mov	r16,r9
    6d84:	003ed906 	br	68ec <__alt_exception_stack_pointer+0xf80068ec>
    6d88:	2984b03a 	or	r2,r5,r6
    6d8c:	10004226 	beq	r2,zero,6e98 <__subdf3+0x82c>
    6d90:	1808d0fa 	srli	r4,r3,3
    6d94:	8822d0fa 	srli	r17,r17,3
    6d98:	1806977a 	slli	r3,r3,29
    6d9c:	2080022c 	andhi	r2,r4,8
    6da0:	1c62b03a 	or	r17,r3,r17
    6da4:	10000826 	beq	r2,zero,6dc8 <__subdf3+0x75c>
    6da8:	2812d0fa 	srli	r9,r5,3
    6dac:	4880022c 	andhi	r2,r9,8
    6db0:	1000051e 	bne	r2,zero,6dc8 <__subdf3+0x75c>
    6db4:	300cd0fa 	srli	r6,r6,3
    6db8:	2804977a 	slli	r2,r5,29
    6dbc:	4809883a 	mov	r4,r9
    6dc0:	3825883a 	mov	r18,r7
    6dc4:	11a2b03a 	or	r17,r2,r6
    6dc8:	8806d77a 	srli	r3,r17,29
    6dcc:	200890fa 	slli	r4,r4,3
    6dd0:	882290fa 	slli	r17,r17,3
    6dd4:	0401ffc4 	movi	r16,2047
    6dd8:	1906b03a 	or	r3,r3,r4
    6ddc:	003e4406 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6de0:	2984b03a 	or	r2,r5,r6
    6de4:	103e4226 	beq	r2,zero,66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6de8:	8989c83a 	sub	r4,r17,r6
    6dec:	8911803a 	cmpltu	r8,r17,r4
    6df0:	1945c83a 	sub	r2,r3,r5
    6df4:	1205c83a 	sub	r2,r2,r8
    6df8:	1200202c 	andhi	r8,r2,128
    6dfc:	403e9a26 	beq	r8,zero,6868 <__alt_exception_stack_pointer+0xf8006868>
    6e00:	3463c83a 	sub	r17,r6,r17
    6e04:	28c5c83a 	sub	r2,r5,r3
    6e08:	344d803a 	cmpltu	r6,r6,r17
    6e0c:	1187c83a 	sub	r3,r2,r6
    6e10:	3825883a 	mov	r18,r7
    6e14:	003e3606 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6e18:	0101ffc4 	movi	r4,2047
    6e1c:	493fc71e 	bne	r9,r4,6d3c <__alt_exception_stack_pointer+0xf8006d3c>
    6e20:	2807883a 	mov	r3,r5
    6e24:	3023883a 	mov	r17,r6
    6e28:	4821883a 	mov	r16,r9
    6e2c:	003e3006 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6e30:	10003626 	beq	r2,zero,6f0c <__subdf3+0x8a0>
    6e34:	2984b03a 	or	r2,r5,r6
    6e38:	10001726 	beq	r2,zero,6e98 <__subdf3+0x82c>
    6e3c:	1808d0fa 	srli	r4,r3,3
    6e40:	8822d0fa 	srli	r17,r17,3
    6e44:	1806977a 	slli	r3,r3,29
    6e48:	2080022c 	andhi	r2,r4,8
    6e4c:	1c62b03a 	or	r17,r3,r17
    6e50:	10000726 	beq	r2,zero,6e70 <__subdf3+0x804>
    6e54:	2812d0fa 	srli	r9,r5,3
    6e58:	4880022c 	andhi	r2,r9,8
    6e5c:	1000041e 	bne	r2,zero,6e70 <__subdf3+0x804>
    6e60:	300cd0fa 	srli	r6,r6,3
    6e64:	2804977a 	slli	r2,r5,29
    6e68:	4809883a 	mov	r4,r9
    6e6c:	11a2b03a 	or	r17,r2,r6
    6e70:	8806d77a 	srli	r3,r17,29
    6e74:	200890fa 	slli	r4,r4,3
    6e78:	882290fa 	slli	r17,r17,3
    6e7c:	3825883a 	mov	r18,r7
    6e80:	1906b03a 	or	r3,r3,r4
    6e84:	0401ffc4 	movi	r16,2047
    6e88:	003e1906 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6e8c:	000b883a 	mov	r5,zero
    6e90:	0005883a 	mov	r2,zero
    6e94:	003e2e06 	br	6750 <__alt_exception_stack_pointer+0xf8006750>
    6e98:	0401ffc4 	movi	r16,2047
    6e9c:	003e1406 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6ea0:	0005883a 	mov	r2,zero
    6ea4:	003f7506 	br	6c7c <__alt_exception_stack_pointer+0xf8006c7c>
    6ea8:	0005883a 	mov	r2,zero
    6eac:	0009883a 	mov	r4,zero
    6eb0:	003e7806 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    6eb4:	123ff804 	addi	r8,r2,-32
    6eb8:	01000804 	movi	r4,32
    6ebc:	1a10d83a 	srl	r8,r3,r8
    6ec0:	11002526 	beq	r2,r4,6f58 <__subdf3+0x8ec>
    6ec4:	01001004 	movi	r4,64
    6ec8:	2085c83a 	sub	r2,r4,r2
    6ecc:	1884983a 	sll	r2,r3,r2
    6ed0:	1444b03a 	or	r2,r2,r17
    6ed4:	1004c03a 	cmpne	r2,r2,zero
    6ed8:	40a2b03a 	or	r17,r8,r2
    6edc:	0005883a 	mov	r2,zero
    6ee0:	003f1606 	br	6b3c <__alt_exception_stack_pointer+0xf8006b3c>
    6ee4:	02000434 	movhi	r8,16
    6ee8:	0009883a 	mov	r4,zero
    6eec:	423fffc4 	addi	r8,r8,-1
    6ef0:	00bfffc4 	movi	r2,-1
    6ef4:	0401ffc4 	movi	r16,2047
    6ef8:	003e6606 	br	6894 <__alt_exception_stack_pointer+0xf8006894>
    6efc:	1c62b03a 	or	r17,r3,r17
    6f00:	8822c03a 	cmpne	r17,r17,zero
    6f04:	0005883a 	mov	r2,zero
    6f08:	003f9906 	br	6d70 <__alt_exception_stack_pointer+0xf8006d70>
    6f0c:	2807883a 	mov	r3,r5
    6f10:	3023883a 	mov	r17,r6
    6f14:	0401ffc4 	movi	r16,2047
    6f18:	003df506 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6f1c:	2807883a 	mov	r3,r5
    6f20:	3023883a 	mov	r17,r6
    6f24:	003df206 	br	66f0 <__alt_exception_stack_pointer+0xf80066f0>
    6f28:	123ff804 	addi	r8,r2,-32
    6f2c:	01000804 	movi	r4,32
    6f30:	1a10d83a 	srl	r8,r3,r8
    6f34:	11000a26 	beq	r2,r4,6f60 <__subdf3+0x8f4>
    6f38:	01001004 	movi	r4,64
    6f3c:	2085c83a 	sub	r2,r4,r2
    6f40:	1884983a 	sll	r2,r3,r2
    6f44:	1444b03a 	or	r2,r2,r17
    6f48:	1004c03a 	cmpne	r2,r2,zero
    6f4c:	40a2b03a 	or	r17,r8,r2
    6f50:	0005883a 	mov	r2,zero
    6f54:	003f8606 	br	6d70 <__alt_exception_stack_pointer+0xf8006d70>
    6f58:	0005883a 	mov	r2,zero
    6f5c:	003fdc06 	br	6ed0 <__alt_exception_stack_pointer+0xf8006ed0>
    6f60:	0005883a 	mov	r2,zero
    6f64:	003ff706 	br	6f44 <__alt_exception_stack_pointer+0xf8006f44>

00006f68 <__fixdfsi>:
    6f68:	280cd53a 	srli	r6,r5,20
    6f6c:	00c00434 	movhi	r3,16
    6f70:	18ffffc4 	addi	r3,r3,-1
    6f74:	3181ffcc 	andi	r6,r6,2047
    6f78:	01c0ff84 	movi	r7,1022
    6f7c:	28c6703a 	and	r3,r5,r3
    6f80:	280ad7fa 	srli	r5,r5,31
    6f84:	3980120e 	bge	r7,r6,6fd0 <__fixdfsi+0x68>
    6f88:	00810744 	movi	r2,1053
    6f8c:	11800c16 	blt	r2,r6,6fc0 <__fixdfsi+0x58>
    6f90:	00810cc4 	movi	r2,1075
    6f94:	1185c83a 	sub	r2,r2,r6
    6f98:	01c007c4 	movi	r7,31
    6f9c:	18c00434 	orhi	r3,r3,16
    6fa0:	38800d16 	blt	r7,r2,6fd8 <__fixdfsi+0x70>
    6fa4:	31befb44 	addi	r6,r6,-1043
    6fa8:	2084d83a 	srl	r2,r4,r2
    6fac:	1986983a 	sll	r3,r3,r6
    6fb0:	1884b03a 	or	r2,r3,r2
    6fb4:	28000726 	beq	r5,zero,6fd4 <__fixdfsi+0x6c>
    6fb8:	0085c83a 	sub	r2,zero,r2
    6fbc:	f800283a 	ret
    6fc0:	00a00034 	movhi	r2,32768
    6fc4:	10bfffc4 	addi	r2,r2,-1
    6fc8:	2885883a 	add	r2,r5,r2
    6fcc:	f800283a 	ret
    6fd0:	0005883a 	mov	r2,zero
    6fd4:	f800283a 	ret
    6fd8:	008104c4 	movi	r2,1043
    6fdc:	1185c83a 	sub	r2,r2,r6
    6fe0:	1884d83a 	srl	r2,r3,r2
    6fe4:	003ff306 	br	6fb4 <__alt_exception_stack_pointer+0xf8006fb4>

00006fe8 <__floatsidf>:
    6fe8:	defffd04 	addi	sp,sp,-12
    6fec:	dfc00215 	stw	ra,8(sp)
    6ff0:	dc400115 	stw	r17,4(sp)
    6ff4:	dc000015 	stw	r16,0(sp)
    6ff8:	20002b26 	beq	r4,zero,70a8 <__floatsidf+0xc0>
    6ffc:	2023883a 	mov	r17,r4
    7000:	2020d7fa 	srli	r16,r4,31
    7004:	20002d16 	blt	r4,zero,70bc <__floatsidf+0xd4>
    7008:	8809883a 	mov	r4,r17
    700c:	00070c40 	call	70c4 <__clzsi2>
    7010:	01410784 	movi	r5,1054
    7014:	288bc83a 	sub	r5,r5,r2
    7018:	01010cc4 	movi	r4,1075
    701c:	2149c83a 	sub	r4,r4,r5
    7020:	00c007c4 	movi	r3,31
    7024:	1900160e 	bge	r3,r4,7080 <__floatsidf+0x98>
    7028:	00c104c4 	movi	r3,1043
    702c:	1947c83a 	sub	r3,r3,r5
    7030:	88c6983a 	sll	r3,r17,r3
    7034:	00800434 	movhi	r2,16
    7038:	10bfffc4 	addi	r2,r2,-1
    703c:	1886703a 	and	r3,r3,r2
    7040:	2941ffcc 	andi	r5,r5,2047
    7044:	800d883a 	mov	r6,r16
    7048:	0005883a 	mov	r2,zero
    704c:	280a953a 	slli	r5,r5,20
    7050:	31803fcc 	andi	r6,r6,255
    7054:	01000434 	movhi	r4,16
    7058:	300c97fa 	slli	r6,r6,31
    705c:	213fffc4 	addi	r4,r4,-1
    7060:	1906703a 	and	r3,r3,r4
    7064:	1946b03a 	or	r3,r3,r5
    7068:	1986b03a 	or	r3,r3,r6
    706c:	dfc00217 	ldw	ra,8(sp)
    7070:	dc400117 	ldw	r17,4(sp)
    7074:	dc000017 	ldw	r16,0(sp)
    7078:	dec00304 	addi	sp,sp,12
    707c:	f800283a 	ret
    7080:	00c002c4 	movi	r3,11
    7084:	1887c83a 	sub	r3,r3,r2
    7088:	88c6d83a 	srl	r3,r17,r3
    708c:	8904983a 	sll	r2,r17,r4
    7090:	01000434 	movhi	r4,16
    7094:	213fffc4 	addi	r4,r4,-1
    7098:	2941ffcc 	andi	r5,r5,2047
    709c:	1906703a 	and	r3,r3,r4
    70a0:	800d883a 	mov	r6,r16
    70a4:	003fe906 	br	704c <__alt_exception_stack_pointer+0xf800704c>
    70a8:	000d883a 	mov	r6,zero
    70ac:	000b883a 	mov	r5,zero
    70b0:	0007883a 	mov	r3,zero
    70b4:	0005883a 	mov	r2,zero
    70b8:	003fe406 	br	704c <__alt_exception_stack_pointer+0xf800704c>
    70bc:	0123c83a 	sub	r17,zero,r4
    70c0:	003fd106 	br	7008 <__alt_exception_stack_pointer+0xf8007008>

000070c4 <__clzsi2>:
    70c4:	00bfffd4 	movui	r2,65535
    70c8:	11000536 	bltu	r2,r4,70e0 <__clzsi2+0x1c>
    70cc:	00803fc4 	movi	r2,255
    70d0:	11000f36 	bltu	r2,r4,7110 <__clzsi2+0x4c>
    70d4:	00800804 	movi	r2,32
    70d8:	0007883a 	mov	r3,zero
    70dc:	00000506 	br	70f4 <__clzsi2+0x30>
    70e0:	00804034 	movhi	r2,256
    70e4:	10bfffc4 	addi	r2,r2,-1
    70e8:	11000c2e 	bgeu	r2,r4,711c <__clzsi2+0x58>
    70ec:	00800204 	movi	r2,8
    70f0:	00c00604 	movi	r3,24
    70f4:	20c8d83a 	srl	r4,r4,r3
    70f8:	00c00074 	movhi	r3,1
    70fc:	18d98f04 	addi	r3,r3,26172
    7100:	1909883a 	add	r4,r3,r4
    7104:	20c00003 	ldbu	r3,0(r4)
    7108:	10c5c83a 	sub	r2,r2,r3
    710c:	f800283a 	ret
    7110:	00800604 	movi	r2,24
    7114:	00c00204 	movi	r3,8
    7118:	003ff606 	br	70f4 <__alt_exception_stack_pointer+0xf80070f4>
    711c:	00800404 	movi	r2,16
    7120:	1007883a 	mov	r3,r2
    7124:	003ff306 	br	70f4 <__alt_exception_stack_pointer+0xf80070f4>

00007128 <clock>:
    7128:	008000b4 	movhi	r2,2
    712c:	10a16a04 	addi	r2,r2,-31320
    7130:	11000017 	ldw	r4,0(r2)
    7134:	defffb04 	addi	sp,sp,-20
    7138:	d80b883a 	mov	r5,sp
    713c:	dfc00415 	stw	ra,16(sp)
    7140:	0007bd40 	call	7bd4 <_times_r>
    7144:	00ffffc4 	movi	r3,-1
    7148:	10c00726 	beq	r2,r3,7168 <clock+0x40>
    714c:	d8c00017 	ldw	r3,0(sp)
    7150:	d8800117 	ldw	r2,4(sp)
    7154:	1885883a 	add	r2,r3,r2
    7158:	d8c00217 	ldw	r3,8(sp)
    715c:	10c7883a 	add	r3,r2,r3
    7160:	d8800317 	ldw	r2,12(sp)
    7164:	1885883a 	add	r2,r3,r2
    7168:	dfc00417 	ldw	ra,16(sp)
    716c:	dec00504 	addi	sp,sp,20
    7170:	f800283a 	ret

00007174 <malloc>:
    7174:	008000b4 	movhi	r2,2
    7178:	10a16a04 	addi	r2,r2,-31320
    717c:	200b883a 	mov	r5,r4
    7180:	11000017 	ldw	r4,0(r2)
    7184:	000719c1 	jmpi	719c <_malloc_r>

00007188 <free>:
    7188:	008000b4 	movhi	r2,2
    718c:	10a16a04 	addi	r2,r2,-31320
    7190:	200b883a 	mov	r5,r4
    7194:	11000017 	ldw	r4,0(r2)
    7198:	000c1101 	jmpi	c110 <_free_r>

0000719c <_malloc_r>:
    719c:	defff504 	addi	sp,sp,-44
    71a0:	dc800315 	stw	r18,12(sp)
    71a4:	dfc00a15 	stw	ra,40(sp)
    71a8:	df000915 	stw	fp,36(sp)
    71ac:	ddc00815 	stw	r23,32(sp)
    71b0:	dd800715 	stw	r22,28(sp)
    71b4:	dd400615 	stw	r21,24(sp)
    71b8:	dd000515 	stw	r20,20(sp)
    71bc:	dcc00415 	stw	r19,16(sp)
    71c0:	dc400215 	stw	r17,8(sp)
    71c4:	dc000115 	stw	r16,4(sp)
    71c8:	288002c4 	addi	r2,r5,11
    71cc:	00c00584 	movi	r3,22
    71d0:	2025883a 	mov	r18,r4
    71d4:	18807f2e 	bgeu	r3,r2,73d4 <_malloc_r+0x238>
    71d8:	047ffe04 	movi	r17,-8
    71dc:	1462703a 	and	r17,r2,r17
    71e0:	8800a316 	blt	r17,zero,7470 <_malloc_r+0x2d4>
    71e4:	8940a236 	bltu	r17,r5,7470 <_malloc_r+0x2d4>
    71e8:	001291c0 	call	1291c <__malloc_lock>
    71ec:	00807dc4 	movi	r2,503
    71f0:	1441e92e 	bgeu	r2,r17,7998 <_malloc_r+0x7fc>
    71f4:	8804d27a 	srli	r2,r17,9
    71f8:	1000a126 	beq	r2,zero,7480 <_malloc_r+0x2e4>
    71fc:	00c00104 	movi	r3,4
    7200:	18811e36 	bltu	r3,r2,767c <_malloc_r+0x4e0>
    7204:	8804d1ba 	srli	r2,r17,6
    7208:	12000e44 	addi	r8,r2,57
    720c:	11c00e04 	addi	r7,r2,56
    7210:	4209883a 	add	r4,r8,r8
    7214:	04c00074 	movhi	r19,1
    7218:	2109883a 	add	r4,r4,r4
    721c:	9cdb6804 	addi	r19,r19,28064
    7220:	2109883a 	add	r4,r4,r4
    7224:	9909883a 	add	r4,r19,r4
    7228:	24000117 	ldw	r16,4(r4)
    722c:	213ffe04 	addi	r4,r4,-8
    7230:	24009726 	beq	r4,r16,7490 <_malloc_r+0x2f4>
    7234:	80800117 	ldw	r2,4(r16)
    7238:	01bfff04 	movi	r6,-4
    723c:	014003c4 	movi	r5,15
    7240:	1184703a 	and	r2,r2,r6
    7244:	1447c83a 	sub	r3,r2,r17
    7248:	28c00716 	blt	r5,r3,7268 <_malloc_r+0xcc>
    724c:	1800920e 	bge	r3,zero,7498 <_malloc_r+0x2fc>
    7250:	84000317 	ldw	r16,12(r16)
    7254:	24008e26 	beq	r4,r16,7490 <_malloc_r+0x2f4>
    7258:	80800117 	ldw	r2,4(r16)
    725c:	1184703a 	and	r2,r2,r6
    7260:	1447c83a 	sub	r3,r2,r17
    7264:	28fff90e 	bge	r5,r3,724c <__alt_exception_stack_pointer+0xf800724c>
    7268:	3809883a 	mov	r4,r7
    726c:	01800074 	movhi	r6,1
    7270:	9c000417 	ldw	r16,16(r19)
    7274:	319b6804 	addi	r6,r6,28064
    7278:	32000204 	addi	r8,r6,8
    727c:	82013426 	beq	r16,r8,7750 <_malloc_r+0x5b4>
    7280:	80c00117 	ldw	r3,4(r16)
    7284:	00bfff04 	movi	r2,-4
    7288:	188e703a 	and	r7,r3,r2
    728c:	3c45c83a 	sub	r2,r7,r17
    7290:	00c003c4 	movi	r3,15
    7294:	18811f16 	blt	r3,r2,7714 <_malloc_r+0x578>
    7298:	32000515 	stw	r8,20(r6)
    729c:	32000415 	stw	r8,16(r6)
    72a0:	10007f0e 	bge	r2,zero,74a0 <_malloc_r+0x304>
    72a4:	00807fc4 	movi	r2,511
    72a8:	11c0fd36 	bltu	r2,r7,76a0 <_malloc_r+0x504>
    72ac:	3806d0fa 	srli	r3,r7,3
    72b0:	01c00044 	movi	r7,1
    72b4:	30800117 	ldw	r2,4(r6)
    72b8:	19400044 	addi	r5,r3,1
    72bc:	294b883a 	add	r5,r5,r5
    72c0:	1807d0ba 	srai	r3,r3,2
    72c4:	294b883a 	add	r5,r5,r5
    72c8:	294b883a 	add	r5,r5,r5
    72cc:	298b883a 	add	r5,r5,r6
    72d0:	38c6983a 	sll	r3,r7,r3
    72d4:	29c00017 	ldw	r7,0(r5)
    72d8:	2a7ffe04 	addi	r9,r5,-8
    72dc:	1886b03a 	or	r3,r3,r2
    72e0:	82400315 	stw	r9,12(r16)
    72e4:	81c00215 	stw	r7,8(r16)
    72e8:	30c00115 	stw	r3,4(r6)
    72ec:	2c000015 	stw	r16,0(r5)
    72f0:	3c000315 	stw	r16,12(r7)
    72f4:	2005d0ba 	srai	r2,r4,2
    72f8:	01400044 	movi	r5,1
    72fc:	288a983a 	sll	r5,r5,r2
    7300:	19406f36 	bltu	r3,r5,74c0 <_malloc_r+0x324>
    7304:	28c4703a 	and	r2,r5,r3
    7308:	10000a1e 	bne	r2,zero,7334 <_malloc_r+0x198>
    730c:	00bfff04 	movi	r2,-4
    7310:	294b883a 	add	r5,r5,r5
    7314:	2088703a 	and	r4,r4,r2
    7318:	28c4703a 	and	r2,r5,r3
    731c:	21000104 	addi	r4,r4,4
    7320:	1000041e 	bne	r2,zero,7334 <_malloc_r+0x198>
    7324:	294b883a 	add	r5,r5,r5
    7328:	28c4703a 	and	r2,r5,r3
    732c:	21000104 	addi	r4,r4,4
    7330:	103ffc26 	beq	r2,zero,7324 <__alt_exception_stack_pointer+0xf8007324>
    7334:	02bfff04 	movi	r10,-4
    7338:	024003c4 	movi	r9,15
    733c:	21800044 	addi	r6,r4,1
    7340:	318d883a 	add	r6,r6,r6
    7344:	318d883a 	add	r6,r6,r6
    7348:	318d883a 	add	r6,r6,r6
    734c:	998d883a 	add	r6,r19,r6
    7350:	333ffe04 	addi	r12,r6,-8
    7354:	2017883a 	mov	r11,r4
    7358:	31800104 	addi	r6,r6,4
    735c:	34000017 	ldw	r16,0(r6)
    7360:	31fffd04 	addi	r7,r6,-12
    7364:	81c0041e 	bne	r16,r7,7378 <_malloc_r+0x1dc>
    7368:	0000fb06 	br	7758 <_malloc_r+0x5bc>
    736c:	1801030e 	bge	r3,zero,777c <_malloc_r+0x5e0>
    7370:	84000317 	ldw	r16,12(r16)
    7374:	81c0f826 	beq	r16,r7,7758 <_malloc_r+0x5bc>
    7378:	80800117 	ldw	r2,4(r16)
    737c:	1284703a 	and	r2,r2,r10
    7380:	1447c83a 	sub	r3,r2,r17
    7384:	48fff90e 	bge	r9,r3,736c <__alt_exception_stack_pointer+0xf800736c>
    7388:	80800317 	ldw	r2,12(r16)
    738c:	81000217 	ldw	r4,8(r16)
    7390:	89400054 	ori	r5,r17,1
    7394:	81400115 	stw	r5,4(r16)
    7398:	20800315 	stw	r2,12(r4)
    739c:	11000215 	stw	r4,8(r2)
    73a0:	8463883a 	add	r17,r16,r17
    73a4:	9c400515 	stw	r17,20(r19)
    73a8:	9c400415 	stw	r17,16(r19)
    73ac:	18800054 	ori	r2,r3,1
    73b0:	88800115 	stw	r2,4(r17)
    73b4:	8a000315 	stw	r8,12(r17)
    73b8:	8a000215 	stw	r8,8(r17)
    73bc:	88e3883a 	add	r17,r17,r3
    73c0:	88c00015 	stw	r3,0(r17)
    73c4:	9009883a 	mov	r4,r18
    73c8:	00129400 	call	12940 <__malloc_unlock>
    73cc:	80800204 	addi	r2,r16,8
    73d0:	00001b06 	br	7440 <_malloc_r+0x2a4>
    73d4:	04400404 	movi	r17,16
    73d8:	89402536 	bltu	r17,r5,7470 <_malloc_r+0x2d4>
    73dc:	001291c0 	call	1291c <__malloc_lock>
    73e0:	00800184 	movi	r2,6
    73e4:	01000084 	movi	r4,2
    73e8:	04c00074 	movhi	r19,1
    73ec:	1085883a 	add	r2,r2,r2
    73f0:	9cdb6804 	addi	r19,r19,28064
    73f4:	1085883a 	add	r2,r2,r2
    73f8:	9885883a 	add	r2,r19,r2
    73fc:	14000117 	ldw	r16,4(r2)
    7400:	10fffe04 	addi	r3,r2,-8
    7404:	80c0d926 	beq	r16,r3,776c <_malloc_r+0x5d0>
    7408:	80c00117 	ldw	r3,4(r16)
    740c:	81000317 	ldw	r4,12(r16)
    7410:	00bfff04 	movi	r2,-4
    7414:	1884703a 	and	r2,r3,r2
    7418:	81400217 	ldw	r5,8(r16)
    741c:	8085883a 	add	r2,r16,r2
    7420:	10c00117 	ldw	r3,4(r2)
    7424:	29000315 	stw	r4,12(r5)
    7428:	21400215 	stw	r5,8(r4)
    742c:	18c00054 	ori	r3,r3,1
    7430:	10c00115 	stw	r3,4(r2)
    7434:	9009883a 	mov	r4,r18
    7438:	00129400 	call	12940 <__malloc_unlock>
    743c:	80800204 	addi	r2,r16,8
    7440:	dfc00a17 	ldw	ra,40(sp)
    7444:	df000917 	ldw	fp,36(sp)
    7448:	ddc00817 	ldw	r23,32(sp)
    744c:	dd800717 	ldw	r22,28(sp)
    7450:	dd400617 	ldw	r21,24(sp)
    7454:	dd000517 	ldw	r20,20(sp)
    7458:	dcc00417 	ldw	r19,16(sp)
    745c:	dc800317 	ldw	r18,12(sp)
    7460:	dc400217 	ldw	r17,8(sp)
    7464:	dc000117 	ldw	r16,4(sp)
    7468:	dec00b04 	addi	sp,sp,44
    746c:	f800283a 	ret
    7470:	00800304 	movi	r2,12
    7474:	90800015 	stw	r2,0(r18)
    7478:	0005883a 	mov	r2,zero
    747c:	003ff006 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    7480:	01002004 	movi	r4,128
    7484:	02001004 	movi	r8,64
    7488:	01c00fc4 	movi	r7,63
    748c:	003f6106 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    7490:	4009883a 	mov	r4,r8
    7494:	003f7506 	br	726c <__alt_exception_stack_pointer+0xf800726c>
    7498:	81000317 	ldw	r4,12(r16)
    749c:	003fde06 	br	7418 <__alt_exception_stack_pointer+0xf8007418>
    74a0:	81c5883a 	add	r2,r16,r7
    74a4:	11400117 	ldw	r5,4(r2)
    74a8:	9009883a 	mov	r4,r18
    74ac:	29400054 	ori	r5,r5,1
    74b0:	11400115 	stw	r5,4(r2)
    74b4:	00129400 	call	12940 <__malloc_unlock>
    74b8:	80800204 	addi	r2,r16,8
    74bc:	003fe006 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    74c0:	9c000217 	ldw	r16,8(r19)
    74c4:	00bfff04 	movi	r2,-4
    74c8:	85800117 	ldw	r22,4(r16)
    74cc:	b0ac703a 	and	r22,r22,r2
    74d0:	b4400336 	bltu	r22,r17,74e0 <_malloc_r+0x344>
    74d4:	b445c83a 	sub	r2,r22,r17
    74d8:	00c003c4 	movi	r3,15
    74dc:	18805d16 	blt	r3,r2,7654 <_malloc_r+0x4b8>
    74e0:	05c000b4 	movhi	r23,2
    74e4:	008000b4 	movhi	r2,2
    74e8:	10a8a304 	addi	r2,r2,-23924
    74ec:	bde16b04 	addi	r23,r23,-31316
    74f0:	15400017 	ldw	r21,0(r2)
    74f4:	b8c00017 	ldw	r3,0(r23)
    74f8:	00bfffc4 	movi	r2,-1
    74fc:	858d883a 	add	r6,r16,r22
    7500:	8d6b883a 	add	r21,r17,r21
    7504:	1880ea26 	beq	r3,r2,78b0 <_malloc_r+0x714>
    7508:	ad4403c4 	addi	r21,r21,4111
    750c:	00bc0004 	movi	r2,-4096
    7510:	a8aa703a 	and	r21,r21,r2
    7514:	a80b883a 	mov	r5,r21
    7518:	9009883a 	mov	r4,r18
    751c:	d9800015 	stw	r6,0(sp)
    7520:	0007ae80 	call	7ae8 <_sbrk_r>
    7524:	1029883a 	mov	r20,r2
    7528:	00bfffc4 	movi	r2,-1
    752c:	d9800017 	ldw	r6,0(sp)
    7530:	a080e826 	beq	r20,r2,78d4 <_malloc_r+0x738>
    7534:	a180a636 	bltu	r20,r6,77d0 <_malloc_r+0x634>
    7538:	070000b4 	movhi	fp,2
    753c:	e728af04 	addi	fp,fp,-23876
    7540:	e0800017 	ldw	r2,0(fp)
    7544:	a887883a 	add	r3,r21,r2
    7548:	e0c00015 	stw	r3,0(fp)
    754c:	3500e626 	beq	r6,r20,78e8 <_malloc_r+0x74c>
    7550:	b9000017 	ldw	r4,0(r23)
    7554:	00bfffc4 	movi	r2,-1
    7558:	2080ee26 	beq	r4,r2,7914 <_malloc_r+0x778>
    755c:	a185c83a 	sub	r2,r20,r6
    7560:	10c5883a 	add	r2,r2,r3
    7564:	e0800015 	stw	r2,0(fp)
    7568:	a0c001cc 	andi	r3,r20,7
    756c:	1800bc26 	beq	r3,zero,7860 <_malloc_r+0x6c4>
    7570:	a0e9c83a 	sub	r20,r20,r3
    7574:	00840204 	movi	r2,4104
    7578:	a5000204 	addi	r20,r20,8
    757c:	10c7c83a 	sub	r3,r2,r3
    7580:	a545883a 	add	r2,r20,r21
    7584:	1083ffcc 	andi	r2,r2,4095
    7588:	18abc83a 	sub	r21,r3,r2
    758c:	a80b883a 	mov	r5,r21
    7590:	9009883a 	mov	r4,r18
    7594:	0007ae80 	call	7ae8 <_sbrk_r>
    7598:	00ffffc4 	movi	r3,-1
    759c:	10c0e126 	beq	r2,r3,7924 <_malloc_r+0x788>
    75a0:	1505c83a 	sub	r2,r2,r20
    75a4:	1545883a 	add	r2,r2,r21
    75a8:	10800054 	ori	r2,r2,1
    75ac:	e0c00017 	ldw	r3,0(fp)
    75b0:	9d000215 	stw	r20,8(r19)
    75b4:	a0800115 	stw	r2,4(r20)
    75b8:	a8c7883a 	add	r3,r21,r3
    75bc:	e0c00015 	stw	r3,0(fp)
    75c0:	84c00e26 	beq	r16,r19,75fc <_malloc_r+0x460>
    75c4:	018003c4 	movi	r6,15
    75c8:	3580a72e 	bgeu	r6,r22,7868 <_malloc_r+0x6cc>
    75cc:	81400117 	ldw	r5,4(r16)
    75d0:	013ffe04 	movi	r4,-8
    75d4:	b0bffd04 	addi	r2,r22,-12
    75d8:	1104703a 	and	r2,r2,r4
    75dc:	2900004c 	andi	r4,r5,1
    75e0:	2088b03a 	or	r4,r4,r2
    75e4:	81000115 	stw	r4,4(r16)
    75e8:	01400144 	movi	r5,5
    75ec:	8089883a 	add	r4,r16,r2
    75f0:	21400115 	stw	r5,4(r4)
    75f4:	21400215 	stw	r5,8(r4)
    75f8:	3080cd36 	bltu	r6,r2,7930 <_malloc_r+0x794>
    75fc:	008000b4 	movhi	r2,2
    7600:	10a8a204 	addi	r2,r2,-23928
    7604:	11000017 	ldw	r4,0(r2)
    7608:	20c0012e 	bgeu	r4,r3,7610 <_malloc_r+0x474>
    760c:	10c00015 	stw	r3,0(r2)
    7610:	008000b4 	movhi	r2,2
    7614:	10a8a104 	addi	r2,r2,-23932
    7618:	11000017 	ldw	r4,0(r2)
    761c:	9c000217 	ldw	r16,8(r19)
    7620:	20c0012e 	bgeu	r4,r3,7628 <_malloc_r+0x48c>
    7624:	10c00015 	stw	r3,0(r2)
    7628:	80c00117 	ldw	r3,4(r16)
    762c:	00bfff04 	movi	r2,-4
    7630:	1886703a 	and	r3,r3,r2
    7634:	1c45c83a 	sub	r2,r3,r17
    7638:	1c400236 	bltu	r3,r17,7644 <_malloc_r+0x4a8>
    763c:	00c003c4 	movi	r3,15
    7640:	18800416 	blt	r3,r2,7654 <_malloc_r+0x4b8>
    7644:	9009883a 	mov	r4,r18
    7648:	00129400 	call	12940 <__malloc_unlock>
    764c:	0005883a 	mov	r2,zero
    7650:	003f7b06 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    7654:	88c00054 	ori	r3,r17,1
    7658:	80c00115 	stw	r3,4(r16)
    765c:	8463883a 	add	r17,r16,r17
    7660:	10800054 	ori	r2,r2,1
    7664:	9c400215 	stw	r17,8(r19)
    7668:	88800115 	stw	r2,4(r17)
    766c:	9009883a 	mov	r4,r18
    7670:	00129400 	call	12940 <__malloc_unlock>
    7674:	80800204 	addi	r2,r16,8
    7678:	003f7106 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    767c:	00c00504 	movi	r3,20
    7680:	18804a2e 	bgeu	r3,r2,77ac <_malloc_r+0x610>
    7684:	00c01504 	movi	r3,84
    7688:	18806e36 	bltu	r3,r2,7844 <_malloc_r+0x6a8>
    768c:	8804d33a 	srli	r2,r17,12
    7690:	12001bc4 	addi	r8,r2,111
    7694:	11c01b84 	addi	r7,r2,110
    7698:	4209883a 	add	r4,r8,r8
    769c:	003edd06 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    76a0:	3804d27a 	srli	r2,r7,9
    76a4:	00c00104 	movi	r3,4
    76a8:	1880442e 	bgeu	r3,r2,77bc <_malloc_r+0x620>
    76ac:	00c00504 	movi	r3,20
    76b0:	18808136 	bltu	r3,r2,78b8 <_malloc_r+0x71c>
    76b4:	11401704 	addi	r5,r2,92
    76b8:	10c016c4 	addi	r3,r2,91
    76bc:	294b883a 	add	r5,r5,r5
    76c0:	294b883a 	add	r5,r5,r5
    76c4:	294b883a 	add	r5,r5,r5
    76c8:	994b883a 	add	r5,r19,r5
    76cc:	28800017 	ldw	r2,0(r5)
    76d0:	01800074 	movhi	r6,1
    76d4:	297ffe04 	addi	r5,r5,-8
    76d8:	319b6804 	addi	r6,r6,28064
    76dc:	28806526 	beq	r5,r2,7874 <_malloc_r+0x6d8>
    76e0:	01bfff04 	movi	r6,-4
    76e4:	10c00117 	ldw	r3,4(r2)
    76e8:	1986703a 	and	r3,r3,r6
    76ec:	38c0022e 	bgeu	r7,r3,76f8 <_malloc_r+0x55c>
    76f0:	10800217 	ldw	r2,8(r2)
    76f4:	28bffb1e 	bne	r5,r2,76e4 <__alt_exception_stack_pointer+0xf80076e4>
    76f8:	11400317 	ldw	r5,12(r2)
    76fc:	98c00117 	ldw	r3,4(r19)
    7700:	81400315 	stw	r5,12(r16)
    7704:	80800215 	stw	r2,8(r16)
    7708:	2c000215 	stw	r16,8(r5)
    770c:	14000315 	stw	r16,12(r2)
    7710:	003ef806 	br	72f4 <__alt_exception_stack_pointer+0xf80072f4>
    7714:	88c00054 	ori	r3,r17,1
    7718:	80c00115 	stw	r3,4(r16)
    771c:	8463883a 	add	r17,r16,r17
    7720:	34400515 	stw	r17,20(r6)
    7724:	34400415 	stw	r17,16(r6)
    7728:	10c00054 	ori	r3,r2,1
    772c:	8a000315 	stw	r8,12(r17)
    7730:	8a000215 	stw	r8,8(r17)
    7734:	88c00115 	stw	r3,4(r17)
    7738:	88a3883a 	add	r17,r17,r2
    773c:	88800015 	stw	r2,0(r17)
    7740:	9009883a 	mov	r4,r18
    7744:	00129400 	call	12940 <__malloc_unlock>
    7748:	80800204 	addi	r2,r16,8
    774c:	003f3c06 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    7750:	30c00117 	ldw	r3,4(r6)
    7754:	003ee706 	br	72f4 <__alt_exception_stack_pointer+0xf80072f4>
    7758:	5ac00044 	addi	r11,r11,1
    775c:	588000cc 	andi	r2,r11,3
    7760:	31800204 	addi	r6,r6,8
    7764:	103efd1e 	bne	r2,zero,735c <__alt_exception_stack_pointer+0xf800735c>
    7768:	00002406 	br	77fc <_malloc_r+0x660>
    776c:	14000317 	ldw	r16,12(r2)
    7770:	143f251e 	bne	r2,r16,7408 <__alt_exception_stack_pointer+0xf8007408>
    7774:	21000084 	addi	r4,r4,2
    7778:	003ebc06 	br	726c <__alt_exception_stack_pointer+0xf800726c>
    777c:	8085883a 	add	r2,r16,r2
    7780:	10c00117 	ldw	r3,4(r2)
    7784:	81000317 	ldw	r4,12(r16)
    7788:	81400217 	ldw	r5,8(r16)
    778c:	18c00054 	ori	r3,r3,1
    7790:	10c00115 	stw	r3,4(r2)
    7794:	29000315 	stw	r4,12(r5)
    7798:	21400215 	stw	r5,8(r4)
    779c:	9009883a 	mov	r4,r18
    77a0:	00129400 	call	12940 <__malloc_unlock>
    77a4:	80800204 	addi	r2,r16,8
    77a8:	003f2506 	br	7440 <__alt_exception_stack_pointer+0xf8007440>
    77ac:	12001704 	addi	r8,r2,92
    77b0:	11c016c4 	addi	r7,r2,91
    77b4:	4209883a 	add	r4,r8,r8
    77b8:	003e9606 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    77bc:	3804d1ba 	srli	r2,r7,6
    77c0:	11400e44 	addi	r5,r2,57
    77c4:	10c00e04 	addi	r3,r2,56
    77c8:	294b883a 	add	r5,r5,r5
    77cc:	003fbc06 	br	76c0 <__alt_exception_stack_pointer+0xf80076c0>
    77d0:	84ff5926 	beq	r16,r19,7538 <__alt_exception_stack_pointer+0xf8007538>
    77d4:	00800074 	movhi	r2,1
    77d8:	109b6804 	addi	r2,r2,28064
    77dc:	14000217 	ldw	r16,8(r2)
    77e0:	00bfff04 	movi	r2,-4
    77e4:	80c00117 	ldw	r3,4(r16)
    77e8:	1886703a 	and	r3,r3,r2
    77ec:	003f9106 	br	7634 <__alt_exception_stack_pointer+0xf8007634>
    77f0:	60800217 	ldw	r2,8(r12)
    77f4:	213fffc4 	addi	r4,r4,-1
    77f8:	1300651e 	bne	r2,r12,7990 <_malloc_r+0x7f4>
    77fc:	208000cc 	andi	r2,r4,3
    7800:	633ffe04 	addi	r12,r12,-8
    7804:	103ffa1e 	bne	r2,zero,77f0 <__alt_exception_stack_pointer+0xf80077f0>
    7808:	98800117 	ldw	r2,4(r19)
    780c:	0146303a 	nor	r3,zero,r5
    7810:	1884703a 	and	r2,r3,r2
    7814:	98800115 	stw	r2,4(r19)
    7818:	294b883a 	add	r5,r5,r5
    781c:	117f2836 	bltu	r2,r5,74c0 <__alt_exception_stack_pointer+0xf80074c0>
    7820:	283f2726 	beq	r5,zero,74c0 <__alt_exception_stack_pointer+0xf80074c0>
    7824:	2886703a 	and	r3,r5,r2
    7828:	5809883a 	mov	r4,r11
    782c:	183ec31e 	bne	r3,zero,733c <__alt_exception_stack_pointer+0xf800733c>
    7830:	294b883a 	add	r5,r5,r5
    7834:	2886703a 	and	r3,r5,r2
    7838:	21000104 	addi	r4,r4,4
    783c:	183ffc26 	beq	r3,zero,7830 <__alt_exception_stack_pointer+0xf8007830>
    7840:	003ebe06 	br	733c <__alt_exception_stack_pointer+0xf800733c>
    7844:	00c05504 	movi	r3,340
    7848:	18801236 	bltu	r3,r2,7894 <_malloc_r+0x6f8>
    784c:	8804d3fa 	srli	r2,r17,15
    7850:	12001e04 	addi	r8,r2,120
    7854:	11c01dc4 	addi	r7,r2,119
    7858:	4209883a 	add	r4,r8,r8
    785c:	003e6d06 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    7860:	00c40004 	movi	r3,4096
    7864:	003f4606 	br	7580 <__alt_exception_stack_pointer+0xf8007580>
    7868:	00800044 	movi	r2,1
    786c:	a0800115 	stw	r2,4(r20)
    7870:	003f7406 	br	7644 <__alt_exception_stack_pointer+0xf8007644>
    7874:	1805d0ba 	srai	r2,r3,2
    7878:	01c00044 	movi	r7,1
    787c:	30c00117 	ldw	r3,4(r6)
    7880:	388e983a 	sll	r7,r7,r2
    7884:	2805883a 	mov	r2,r5
    7888:	38c6b03a 	or	r3,r7,r3
    788c:	30c00115 	stw	r3,4(r6)
    7890:	003f9b06 	br	7700 <__alt_exception_stack_pointer+0xf8007700>
    7894:	00c15504 	movi	r3,1364
    7898:	18801a36 	bltu	r3,r2,7904 <_malloc_r+0x768>
    789c:	8804d4ba 	srli	r2,r17,18
    78a0:	12001f44 	addi	r8,r2,125
    78a4:	11c01f04 	addi	r7,r2,124
    78a8:	4209883a 	add	r4,r8,r8
    78ac:	003e5906 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    78b0:	ad400404 	addi	r21,r21,16
    78b4:	003f1706 	br	7514 <__alt_exception_stack_pointer+0xf8007514>
    78b8:	00c01504 	movi	r3,84
    78bc:	18802336 	bltu	r3,r2,794c <_malloc_r+0x7b0>
    78c0:	3804d33a 	srli	r2,r7,12
    78c4:	11401bc4 	addi	r5,r2,111
    78c8:	10c01b84 	addi	r3,r2,110
    78cc:	294b883a 	add	r5,r5,r5
    78d0:	003f7b06 	br	76c0 <__alt_exception_stack_pointer+0xf80076c0>
    78d4:	9c000217 	ldw	r16,8(r19)
    78d8:	00bfff04 	movi	r2,-4
    78dc:	80c00117 	ldw	r3,4(r16)
    78e0:	1886703a 	and	r3,r3,r2
    78e4:	003f5306 	br	7634 <__alt_exception_stack_pointer+0xf8007634>
    78e8:	3083ffcc 	andi	r2,r6,4095
    78ec:	103f181e 	bne	r2,zero,7550 <__alt_exception_stack_pointer+0xf8007550>
    78f0:	99000217 	ldw	r4,8(r19)
    78f4:	b545883a 	add	r2,r22,r21
    78f8:	10800054 	ori	r2,r2,1
    78fc:	20800115 	stw	r2,4(r4)
    7900:	003f3e06 	br	75fc <__alt_exception_stack_pointer+0xf80075fc>
    7904:	01003f84 	movi	r4,254
    7908:	02001fc4 	movi	r8,127
    790c:	01c01f84 	movi	r7,126
    7910:	003e4006 	br	7214 <__alt_exception_stack_pointer+0xf8007214>
    7914:	008000b4 	movhi	r2,2
    7918:	10a16b04 	addi	r2,r2,-31316
    791c:	15000015 	stw	r20,0(r2)
    7920:	003f1106 	br	7568 <__alt_exception_stack_pointer+0xf8007568>
    7924:	00800044 	movi	r2,1
    7928:	002b883a 	mov	r21,zero
    792c:	003f1f06 	br	75ac <__alt_exception_stack_pointer+0xf80075ac>
    7930:	81400204 	addi	r5,r16,8
    7934:	9009883a 	mov	r4,r18
    7938:	000c1100 	call	c110 <_free_r>
    793c:	008000b4 	movhi	r2,2
    7940:	10a8af04 	addi	r2,r2,-23876
    7944:	10c00017 	ldw	r3,0(r2)
    7948:	003f2c06 	br	75fc <__alt_exception_stack_pointer+0xf80075fc>
    794c:	00c05504 	movi	r3,340
    7950:	18800536 	bltu	r3,r2,7968 <_malloc_r+0x7cc>
    7954:	3804d3fa 	srli	r2,r7,15
    7958:	11401e04 	addi	r5,r2,120
    795c:	10c01dc4 	addi	r3,r2,119
    7960:	294b883a 	add	r5,r5,r5
    7964:	003f5606 	br	76c0 <__alt_exception_stack_pointer+0xf80076c0>
    7968:	00c15504 	movi	r3,1364
    796c:	18800536 	bltu	r3,r2,7984 <_malloc_r+0x7e8>
    7970:	3804d4ba 	srli	r2,r7,18
    7974:	11401f44 	addi	r5,r2,125
    7978:	10c01f04 	addi	r3,r2,124
    797c:	294b883a 	add	r5,r5,r5
    7980:	003f4f06 	br	76c0 <__alt_exception_stack_pointer+0xf80076c0>
    7984:	01403f84 	movi	r5,254
    7988:	00c01f84 	movi	r3,126
    798c:	003f4c06 	br	76c0 <__alt_exception_stack_pointer+0xf80076c0>
    7990:	98800117 	ldw	r2,4(r19)
    7994:	003fa006 	br	7818 <__alt_exception_stack_pointer+0xf8007818>
    7998:	8808d0fa 	srli	r4,r17,3
    799c:	20800044 	addi	r2,r4,1
    79a0:	1085883a 	add	r2,r2,r2
    79a4:	003e9006 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>

000079a8 <_printf_r>:
    79a8:	defffd04 	addi	sp,sp,-12
    79ac:	2805883a 	mov	r2,r5
    79b0:	dfc00015 	stw	ra,0(sp)
    79b4:	d9800115 	stw	r6,4(sp)
    79b8:	d9c00215 	stw	r7,8(sp)
    79bc:	21400217 	ldw	r5,8(r4)
    79c0:	d9c00104 	addi	r7,sp,4
    79c4:	100d883a 	mov	r6,r2
    79c8:	0007bdc0 	call	7bdc <___vfprintf_internal_r>
    79cc:	dfc00017 	ldw	ra,0(sp)
    79d0:	dec00304 	addi	sp,sp,12
    79d4:	f800283a 	ret

000079d8 <printf>:
    79d8:	defffc04 	addi	sp,sp,-16
    79dc:	dfc00015 	stw	ra,0(sp)
    79e0:	d9400115 	stw	r5,4(sp)
    79e4:	d9800215 	stw	r6,8(sp)
    79e8:	d9c00315 	stw	r7,12(sp)
    79ec:	008000b4 	movhi	r2,2
    79f0:	10a16a04 	addi	r2,r2,-31320
    79f4:	10800017 	ldw	r2,0(r2)
    79f8:	200b883a 	mov	r5,r4
    79fc:	d9800104 	addi	r6,sp,4
    7a00:	11000217 	ldw	r4,8(r2)
    7a04:	0009eb80 	call	9eb8 <__vfprintf_internal>
    7a08:	dfc00017 	ldw	ra,0(sp)
    7a0c:	dec00404 	addi	sp,sp,16
    7a10:	f800283a 	ret

00007a14 <_puts_r>:
    7a14:	defff604 	addi	sp,sp,-40
    7a18:	dc000715 	stw	r16,28(sp)
    7a1c:	2021883a 	mov	r16,r4
    7a20:	2809883a 	mov	r4,r5
    7a24:	dc400815 	stw	r17,32(sp)
    7a28:	dfc00915 	stw	ra,36(sp)
    7a2c:	2823883a 	mov	r17,r5
    7a30:	0007b3c0 	call	7b3c <strlen>
    7a34:	10c00044 	addi	r3,r2,1
    7a38:	d8800115 	stw	r2,4(sp)
    7a3c:	00800074 	movhi	r2,1
    7a40:	1099d004 	addi	r2,r2,26432
    7a44:	d8800215 	stw	r2,8(sp)
    7a48:	00800044 	movi	r2,1
    7a4c:	d8800315 	stw	r2,12(sp)
    7a50:	00800084 	movi	r2,2
    7a54:	dc400015 	stw	r17,0(sp)
    7a58:	d8c00615 	stw	r3,24(sp)
    7a5c:	dec00415 	stw	sp,16(sp)
    7a60:	d8800515 	stw	r2,20(sp)
    7a64:	80000226 	beq	r16,zero,7a70 <_puts_r+0x5c>
    7a68:	80800e17 	ldw	r2,56(r16)
    7a6c:	10001426 	beq	r2,zero,7ac0 <_puts_r+0xac>
    7a70:	81400217 	ldw	r5,8(r16)
    7a74:	2880030b 	ldhu	r2,12(r5)
    7a78:	10c8000c 	andi	r3,r2,8192
    7a7c:	1800061e 	bne	r3,zero,7a98 <_puts_r+0x84>
    7a80:	29001917 	ldw	r4,100(r5)
    7a84:	00f7ffc4 	movi	r3,-8193
    7a88:	10880014 	ori	r2,r2,8192
    7a8c:	20c6703a 	and	r3,r4,r3
    7a90:	2880030d 	sth	r2,12(r5)
    7a94:	28c01915 	stw	r3,100(r5)
    7a98:	d9800404 	addi	r6,sp,16
    7a9c:	8009883a 	mov	r4,r16
    7aa0:	000c4200 	call	c420 <__sfvwrite_r>
    7aa4:	1000091e 	bne	r2,zero,7acc <_puts_r+0xb8>
    7aa8:	00800284 	movi	r2,10
    7aac:	dfc00917 	ldw	ra,36(sp)
    7ab0:	dc400817 	ldw	r17,32(sp)
    7ab4:	dc000717 	ldw	r16,28(sp)
    7ab8:	dec00a04 	addi	sp,sp,40
    7abc:	f800283a 	ret
    7ac0:	8009883a 	mov	r4,r16
    7ac4:	000bf9c0 	call	bf9c <__sinit>
    7ac8:	003fe906 	br	7a70 <__alt_exception_stack_pointer+0xf8007a70>
    7acc:	00bfffc4 	movi	r2,-1
    7ad0:	003ff606 	br	7aac <__alt_exception_stack_pointer+0xf8007aac>

00007ad4 <puts>:
    7ad4:	008000b4 	movhi	r2,2
    7ad8:	10a16a04 	addi	r2,r2,-31320
    7adc:	200b883a 	mov	r5,r4
    7ae0:	11000017 	ldw	r4,0(r2)
    7ae4:	0007a141 	jmpi	7a14 <_puts_r>

00007ae8 <_sbrk_r>:
    7ae8:	defffd04 	addi	sp,sp,-12
    7aec:	dc000015 	stw	r16,0(sp)
    7af0:	040000b4 	movhi	r16,2
    7af4:	dc400115 	stw	r17,4(sp)
    7af8:	8428a404 	addi	r16,r16,-23920
    7afc:	2023883a 	mov	r17,r4
    7b00:	2809883a 	mov	r4,r5
    7b04:	dfc00215 	stw	ra,8(sp)
    7b08:	80000015 	stw	zero,0(r16)
    7b0c:	0012b280 	call	12b28 <sbrk>
    7b10:	00ffffc4 	movi	r3,-1
    7b14:	10c00526 	beq	r2,r3,7b2c <_sbrk_r+0x44>
    7b18:	dfc00217 	ldw	ra,8(sp)
    7b1c:	dc400117 	ldw	r17,4(sp)
    7b20:	dc000017 	ldw	r16,0(sp)
    7b24:	dec00304 	addi	sp,sp,12
    7b28:	f800283a 	ret
    7b2c:	80c00017 	ldw	r3,0(r16)
    7b30:	183ff926 	beq	r3,zero,7b18 <__alt_exception_stack_pointer+0xf8007b18>
    7b34:	88c00015 	stw	r3,0(r17)
    7b38:	003ff706 	br	7b18 <__alt_exception_stack_pointer+0xf8007b18>

00007b3c <strlen>:
    7b3c:	208000cc 	andi	r2,r4,3
    7b40:	10002026 	beq	r2,zero,7bc4 <strlen+0x88>
    7b44:	20800007 	ldb	r2,0(r4)
    7b48:	10002026 	beq	r2,zero,7bcc <strlen+0x90>
    7b4c:	2005883a 	mov	r2,r4
    7b50:	00000206 	br	7b5c <strlen+0x20>
    7b54:	10c00007 	ldb	r3,0(r2)
    7b58:	18001826 	beq	r3,zero,7bbc <strlen+0x80>
    7b5c:	10800044 	addi	r2,r2,1
    7b60:	10c000cc 	andi	r3,r2,3
    7b64:	183ffb1e 	bne	r3,zero,7b54 <__alt_exception_stack_pointer+0xf8007b54>
    7b68:	10c00017 	ldw	r3,0(r2)
    7b6c:	01ffbff4 	movhi	r7,65279
    7b70:	39ffbfc4 	addi	r7,r7,-257
    7b74:	00ca303a 	nor	r5,zero,r3
    7b78:	01a02074 	movhi	r6,32897
    7b7c:	19c7883a 	add	r3,r3,r7
    7b80:	31a02004 	addi	r6,r6,-32640
    7b84:	1946703a 	and	r3,r3,r5
    7b88:	1986703a 	and	r3,r3,r6
    7b8c:	1800091e 	bne	r3,zero,7bb4 <strlen+0x78>
    7b90:	10800104 	addi	r2,r2,4
    7b94:	10c00017 	ldw	r3,0(r2)
    7b98:	19cb883a 	add	r5,r3,r7
    7b9c:	00c6303a 	nor	r3,zero,r3
    7ba0:	28c6703a 	and	r3,r5,r3
    7ba4:	1986703a 	and	r3,r3,r6
    7ba8:	183ff926 	beq	r3,zero,7b90 <__alt_exception_stack_pointer+0xf8007b90>
    7bac:	00000106 	br	7bb4 <strlen+0x78>
    7bb0:	10800044 	addi	r2,r2,1
    7bb4:	10c00007 	ldb	r3,0(r2)
    7bb8:	183ffd1e 	bne	r3,zero,7bb0 <__alt_exception_stack_pointer+0xf8007bb0>
    7bbc:	1105c83a 	sub	r2,r2,r4
    7bc0:	f800283a 	ret
    7bc4:	2005883a 	mov	r2,r4
    7bc8:	003fe706 	br	7b68 <__alt_exception_stack_pointer+0xf8007b68>
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	f800283a 	ret

00007bd4 <_times_r>:
    7bd4:	2809883a 	mov	r4,r5
    7bd8:	0012c141 	jmpi	12c14 <times>

00007bdc <___vfprintf_internal_r>:
    7bdc:	deffb804 	addi	sp,sp,-288
    7be0:	dfc04715 	stw	ra,284(sp)
    7be4:	ddc04515 	stw	r23,276(sp)
    7be8:	dd404315 	stw	r21,268(sp)
    7bec:	d9002d15 	stw	r4,180(sp)
    7bf0:	282f883a 	mov	r23,r5
    7bf4:	302b883a 	mov	r21,r6
    7bf8:	d9c02e15 	stw	r7,184(sp)
    7bfc:	df004615 	stw	fp,280(sp)
    7c00:	dd804415 	stw	r22,272(sp)
    7c04:	dd004215 	stw	r20,264(sp)
    7c08:	dcc04115 	stw	r19,260(sp)
    7c0c:	dc804015 	stw	r18,256(sp)
    7c10:	dc403f15 	stw	r17,252(sp)
    7c14:	dc003e15 	stw	r16,248(sp)
    7c18:	000cb1c0 	call	cb1c <_localeconv_r>
    7c1c:	10800017 	ldw	r2,0(r2)
    7c20:	1009883a 	mov	r4,r2
    7c24:	d8803415 	stw	r2,208(sp)
    7c28:	0007b3c0 	call	7b3c <strlen>
    7c2c:	d8803715 	stw	r2,220(sp)
    7c30:	d8802d17 	ldw	r2,180(sp)
    7c34:	10000226 	beq	r2,zero,7c40 <___vfprintf_internal_r+0x64>
    7c38:	10800e17 	ldw	r2,56(r2)
    7c3c:	1000fb26 	beq	r2,zero,802c <___vfprintf_internal_r+0x450>
    7c40:	b880030b 	ldhu	r2,12(r23)
    7c44:	10c8000c 	andi	r3,r2,8192
    7c48:	1800061e 	bne	r3,zero,7c64 <___vfprintf_internal_r+0x88>
    7c4c:	b9001917 	ldw	r4,100(r23)
    7c50:	00f7ffc4 	movi	r3,-8193
    7c54:	10880014 	ori	r2,r2,8192
    7c58:	20c6703a 	and	r3,r4,r3
    7c5c:	b880030d 	sth	r2,12(r23)
    7c60:	b8c01915 	stw	r3,100(r23)
    7c64:	10c0020c 	andi	r3,r2,8
    7c68:	1800c326 	beq	r3,zero,7f78 <___vfprintf_internal_r+0x39c>
    7c6c:	b8c00417 	ldw	r3,16(r23)
    7c70:	1800c126 	beq	r3,zero,7f78 <___vfprintf_internal_r+0x39c>
    7c74:	1080068c 	andi	r2,r2,26
    7c78:	00c00284 	movi	r3,10
    7c7c:	10c0c626 	beq	r2,r3,7f98 <___vfprintf_internal_r+0x3bc>
    7c80:	d8c00404 	addi	r3,sp,16
    7c84:	05000074 	movhi	r20,1
    7c88:	d9001e04 	addi	r4,sp,120
    7c8c:	a519e184 	addi	r20,r20,26502
    7c90:	d8c01e15 	stw	r3,120(sp)
    7c94:	d8002015 	stw	zero,128(sp)
    7c98:	d8001f15 	stw	zero,124(sp)
    7c9c:	d8003315 	stw	zero,204(sp)
    7ca0:	d8003615 	stw	zero,216(sp)
    7ca4:	d8003815 	stw	zero,224(sp)
    7ca8:	1811883a 	mov	r8,r3
    7cac:	d8003915 	stw	zero,228(sp)
    7cb0:	d8003a15 	stw	zero,232(sp)
    7cb4:	d8002f15 	stw	zero,188(sp)
    7cb8:	d9002815 	stw	r4,160(sp)
    7cbc:	a8800007 	ldb	r2,0(r21)
    7cc0:	10028b26 	beq	r2,zero,86f0 <___vfprintf_internal_r+0xb14>
    7cc4:	00c00944 	movi	r3,37
    7cc8:	a823883a 	mov	r17,r21
    7ccc:	10c0021e 	bne	r2,r3,7cd8 <___vfprintf_internal_r+0xfc>
    7cd0:	00001406 	br	7d24 <___vfprintf_internal_r+0x148>
    7cd4:	10c00326 	beq	r2,r3,7ce4 <___vfprintf_internal_r+0x108>
    7cd8:	8c400044 	addi	r17,r17,1
    7cdc:	88800007 	ldb	r2,0(r17)
    7ce0:	103ffc1e 	bne	r2,zero,7cd4 <__alt_exception_stack_pointer+0xf8007cd4>
    7ce4:	8d61c83a 	sub	r16,r17,r21
    7ce8:	80000e26 	beq	r16,zero,7d24 <___vfprintf_internal_r+0x148>
    7cec:	d8c02017 	ldw	r3,128(sp)
    7cf0:	d8801f17 	ldw	r2,124(sp)
    7cf4:	45400015 	stw	r21,0(r8)
    7cf8:	1c07883a 	add	r3,r3,r16
    7cfc:	10800044 	addi	r2,r2,1
    7d00:	d8c02015 	stw	r3,128(sp)
    7d04:	44000115 	stw	r16,4(r8)
    7d08:	d8801f15 	stw	r2,124(sp)
    7d0c:	00c001c4 	movi	r3,7
    7d10:	1880a916 	blt	r3,r2,7fb8 <___vfprintf_internal_r+0x3dc>
    7d14:	42000204 	addi	r8,r8,8
    7d18:	d9402f17 	ldw	r5,188(sp)
    7d1c:	2c0b883a 	add	r5,r5,r16
    7d20:	d9402f15 	stw	r5,188(sp)
    7d24:	88800007 	ldb	r2,0(r17)
    7d28:	1000aa26 	beq	r2,zero,7fd4 <___vfprintf_internal_r+0x3f8>
    7d2c:	8d400044 	addi	r21,r17,1
    7d30:	8c400047 	ldb	r17,1(r17)
    7d34:	0021883a 	mov	r16,zero
    7d38:	00bfffc4 	movi	r2,-1
    7d3c:	0025883a 	mov	r18,zero
    7d40:	dc002905 	stb	r16,164(sp)
    7d44:	d8002785 	stb	zero,158(sp)
    7d48:	d8002b05 	stb	zero,172(sp)
    7d4c:	d8802a15 	stw	r2,168(sp)
    7d50:	d8003115 	stw	zero,196(sp)
    7d54:	04c01604 	movi	r19,88
    7d58:	05800244 	movi	r22,9
    7d5c:	9021883a 	mov	r16,r18
    7d60:	4039883a 	mov	fp,r8
    7d64:	ad400044 	addi	r21,r21,1
    7d68:	88bff804 	addi	r2,r17,-32
    7d6c:	98833236 	bltu	r19,r2,8a38 <___vfprintf_internal_r+0xe5c>
    7d70:	100490ba 	slli	r2,r2,2
    7d74:	00c00034 	movhi	r3,0
    7d78:	18df6204 	addi	r3,r3,32136
    7d7c:	10c5883a 	add	r2,r2,r3
    7d80:	10800017 	ldw	r2,0(r2)
    7d84:	1000683a 	jmp	r2
    7d88:	00008930 	cmpltui	zero,zero,548
    7d8c:	00008a38 	rdprs	zero,zero,552
    7d90:	00008a38 	rdprs	zero,zero,552
    7d94:	00008950 	cmplti	zero,zero,549
    7d98:	00008a38 	rdprs	zero,zero,552
    7d9c:	00008a38 	rdprs	zero,zero,552
    7da0:	00008a38 	rdprs	zero,zero,552
    7da4:	00008a38 	rdprs	zero,zero,552
    7da8:	00008a38 	rdprs	zero,zero,552
    7dac:	00008a38 	rdprs	zero,zero,552
    7db0:	00008038 	rdprs	zero,zero,512
    7db4:	00008840 	call	884 <init_keyboard+0x154>
    7db8:	00008a38 	rdprs	zero,zero,552
    7dbc:	00007efc 	xorhi	zero,zero,507
    7dc0:	0000805c 	xori	zero,zero,513
    7dc4:	00008a38 	rdprs	zero,zero,552
    7dc8:	000080ac 	andhi	zero,zero,514
    7dcc:	000080b8 	rdprs	zero,zero,514
    7dd0:	000080b8 	rdprs	zero,zero,514
    7dd4:	000080b8 	rdprs	zero,zero,514
    7dd8:	000080b8 	rdprs	zero,zero,514
    7ddc:	000080b8 	rdprs	zero,zero,514
    7de0:	000080b8 	rdprs	zero,zero,514
    7de4:	000080b8 	rdprs	zero,zero,514
    7de8:	000080b8 	rdprs	zero,zero,514
    7dec:	000080b8 	rdprs	zero,zero,514
    7df0:	00008a38 	rdprs	zero,zero,552
    7df4:	00008a38 	rdprs	zero,zero,552
    7df8:	00008a38 	rdprs	zero,zero,552
    7dfc:	00008a38 	rdprs	zero,zero,552
    7e00:	00008a38 	rdprs	zero,zero,552
    7e04:	00008a38 	rdprs	zero,zero,552
    7e08:	00008a38 	rdprs	zero,zero,552
    7e0c:	00008a38 	rdprs	zero,zero,552
    7e10:	00008a38 	rdprs	zero,zero,552
    7e14:	00008a38 	rdprs	zero,zero,552
    7e18:	000080f4 	movhi	zero,515
    7e1c:	000081bc 	xorhi	zero,zero,518
    7e20:	00008a38 	rdprs	zero,zero,552
    7e24:	000081bc 	xorhi	zero,zero,518
    7e28:	00008a38 	rdprs	zero,zero,552
    7e2c:	00008a38 	rdprs	zero,zero,552
    7e30:	00008a38 	rdprs	zero,zero,552
    7e34:	00008a38 	rdprs	zero,zero,552
    7e38:	00008268 	cmpgeui	zero,zero,521
    7e3c:	00008a38 	rdprs	zero,zero,552
    7e40:	00008a38 	rdprs	zero,zero,552
    7e44:	00008274 	movhi	zero,521
    7e48:	00008a38 	rdprs	zero,zero,552
    7e4c:	00008a38 	rdprs	zero,zero,552
    7e50:	00008a38 	rdprs	zero,zero,552
    7e54:	00008a38 	rdprs	zero,zero,552
    7e58:	00008a38 	rdprs	zero,zero,552
    7e5c:	000086f8 	rdprs	zero,zero,539
    7e60:	00008a38 	rdprs	zero,zero,552
    7e64:	00008a38 	rdprs	zero,zero,552
    7e68:	00008764 	muli	zero,zero,541
    7e6c:	00008a38 	rdprs	zero,zero,552
    7e70:	00008a38 	rdprs	zero,zero,552
    7e74:	00008a38 	rdprs	zero,zero,552
    7e78:	00008a38 	rdprs	zero,zero,552
    7e7c:	00008a38 	rdprs	zero,zero,552
    7e80:	00008a38 	rdprs	zero,zero,552
    7e84:	00008a38 	rdprs	zero,zero,552
    7e88:	00008a38 	rdprs	zero,zero,552
    7e8c:	00008a38 	rdprs	zero,zero,552
    7e90:	00008a38 	rdprs	zero,zero,552
    7e94:	000089dc 	xori	zero,zero,551
    7e98:	0000895c 	xori	zero,zero,549
    7e9c:	000081bc 	xorhi	zero,zero,518
    7ea0:	000081bc 	xorhi	zero,zero,518
    7ea4:	000081bc 	xorhi	zero,zero,518
    7ea8:	0000897c 	xorhi	zero,zero,549
    7eac:	0000895c 	xori	zero,zero,549
    7eb0:	00008a38 	rdprs	zero,zero,552
    7eb4:	00008a38 	rdprs	zero,zero,552
    7eb8:	00008988 	cmpgei	zero,zero,550
    7ebc:	00008a38 	rdprs	zero,zero,552
    7ec0:	0000899c 	xori	zero,zero,550
    7ec4:	00008820 	cmpeqi	zero,zero,544
    7ec8:	00007f08 	cmpgei	zero,zero,508
    7ecc:	00008858 	cmpnei	zero,zero,545
    7ed0:	00008a38 	rdprs	zero,zero,552
    7ed4:	00008864 	muli	zero,zero,545
    7ed8:	00008a38 	rdprs	zero,zero,552
    7edc:	000088c8 	cmpgei	zero,zero,547
    7ee0:	00008a38 	rdprs	zero,zero,552
    7ee4:	00008a38 	rdprs	zero,zero,552
    7ee8:	000088e8 	cmpgeui	zero,zero,547
    7eec:	d8c03117 	ldw	r3,196(sp)
    7ef0:	d8802e15 	stw	r2,184(sp)
    7ef4:	00c7c83a 	sub	r3,zero,r3
    7ef8:	d8c03115 	stw	r3,196(sp)
    7efc:	84000114 	ori	r16,r16,4
    7f00:	ac400007 	ldb	r17,0(r21)
    7f04:	003f9706 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    7f08:	00800c04 	movi	r2,48
    7f0c:	d8802705 	stb	r2,156(sp)
    7f10:	00801e04 	movi	r2,120
    7f14:	d8802745 	stb	r2,157(sp)
    7f18:	d9002a17 	ldw	r4,168(sp)
    7f1c:	d8802e17 	ldw	r2,184(sp)
    7f20:	d8002785 	stb	zero,158(sp)
    7f24:	e011883a 	mov	r8,fp
    7f28:	10c00104 	addi	r3,r2,4
    7f2c:	14c00017 	ldw	r19,0(r2)
    7f30:	002d883a 	mov	r22,zero
    7f34:	80800094 	ori	r2,r16,2
    7f38:	2002ca16 	blt	r4,zero,8a64 <___vfprintf_internal_r+0xe88>
    7f3c:	00bfdfc4 	movi	r2,-129
    7f40:	80a4703a 	and	r18,r16,r2
    7f44:	d8c02e15 	stw	r3,184(sp)
    7f48:	94800094 	ori	r18,r18,2
    7f4c:	9802b41e 	bne	r19,zero,8a20 <___vfprintf_internal_r+0xe44>
    7f50:	01400074 	movhi	r5,1
    7f54:	2959da04 	addi	r5,r5,26472
    7f58:	d9403915 	stw	r5,228(sp)
    7f5c:	04401e04 	movi	r17,120
    7f60:	d8802a17 	ldw	r2,168(sp)
    7f64:	0039883a 	mov	fp,zero
    7f68:	1001fa26 	beq	r2,zero,8754 <___vfprintf_internal_r+0xb78>
    7f6c:	0027883a 	mov	r19,zero
    7f70:	002d883a 	mov	r22,zero
    7f74:	00021906 	br	87dc <___vfprintf_internal_r+0xc00>
    7f78:	d9002d17 	ldw	r4,180(sp)
    7f7c:	b80b883a 	mov	r5,r23
    7f80:	0009f900 	call	9f90 <__swsetup_r>
    7f84:	1005dc1e 	bne	r2,zero,96f8 <___vfprintf_internal_r+0x1b1c>
    7f88:	b880030b 	ldhu	r2,12(r23)
    7f8c:	00c00284 	movi	r3,10
    7f90:	1080068c 	andi	r2,r2,26
    7f94:	10ff3a1e 	bne	r2,r3,7c80 <__alt_exception_stack_pointer+0xf8007c80>
    7f98:	b880038f 	ldh	r2,14(r23)
    7f9c:	103f3816 	blt	r2,zero,7c80 <__alt_exception_stack_pointer+0xf8007c80>
    7fa0:	d9c02e17 	ldw	r7,184(sp)
    7fa4:	d9002d17 	ldw	r4,180(sp)
    7fa8:	a80d883a 	mov	r6,r21
    7fac:	b80b883a 	mov	r5,r23
    7fb0:	0009ed40 	call	9ed4 <__sbprintf>
    7fb4:	00001106 	br	7ffc <___vfprintf_internal_r+0x420>
    7fb8:	d9002d17 	ldw	r4,180(sp)
    7fbc:	d9801e04 	addi	r6,sp,120
    7fc0:	b80b883a 	mov	r5,r23
    7fc4:	000eb5c0 	call	eb5c <__sprint_r>
    7fc8:	1000081e 	bne	r2,zero,7fec <___vfprintf_internal_r+0x410>
    7fcc:	da000404 	addi	r8,sp,16
    7fd0:	003f5106 	br	7d18 <__alt_exception_stack_pointer+0xf8007d18>
    7fd4:	d8802017 	ldw	r2,128(sp)
    7fd8:	10000426 	beq	r2,zero,7fec <___vfprintf_internal_r+0x410>
    7fdc:	d9002d17 	ldw	r4,180(sp)
    7fe0:	d9801e04 	addi	r6,sp,120
    7fe4:	b80b883a 	mov	r5,r23
    7fe8:	000eb5c0 	call	eb5c <__sprint_r>
    7fec:	b880030b 	ldhu	r2,12(r23)
    7ff0:	1080100c 	andi	r2,r2,64
    7ff4:	1005c01e 	bne	r2,zero,96f8 <___vfprintf_internal_r+0x1b1c>
    7ff8:	d8802f17 	ldw	r2,188(sp)
    7ffc:	dfc04717 	ldw	ra,284(sp)
    8000:	df004617 	ldw	fp,280(sp)
    8004:	ddc04517 	ldw	r23,276(sp)
    8008:	dd804417 	ldw	r22,272(sp)
    800c:	dd404317 	ldw	r21,268(sp)
    8010:	dd004217 	ldw	r20,264(sp)
    8014:	dcc04117 	ldw	r19,260(sp)
    8018:	dc804017 	ldw	r18,256(sp)
    801c:	dc403f17 	ldw	r17,252(sp)
    8020:	dc003e17 	ldw	r16,248(sp)
    8024:	dec04804 	addi	sp,sp,288
    8028:	f800283a 	ret
    802c:	d9002d17 	ldw	r4,180(sp)
    8030:	000bf9c0 	call	bf9c <__sinit>
    8034:	003f0206 	br	7c40 <__alt_exception_stack_pointer+0xf8007c40>
    8038:	d9002e17 	ldw	r4,184(sp)
    803c:	d9402e17 	ldw	r5,184(sp)
    8040:	21000017 	ldw	r4,0(r4)
    8044:	28800104 	addi	r2,r5,4
    8048:	d9003115 	stw	r4,196(sp)
    804c:	203fa716 	blt	r4,zero,7eec <__alt_exception_stack_pointer+0xf8007eec>
    8050:	d8802e15 	stw	r2,184(sp)
    8054:	ac400007 	ldb	r17,0(r21)
    8058:	003f4206 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    805c:	ac400007 	ldb	r17,0(r21)
    8060:	01000a84 	movi	r4,42
    8064:	a8c00044 	addi	r3,r21,1
    8068:	89075826 	beq	r17,r4,9dcc <___vfprintf_internal_r+0x21f0>
    806c:	8cbff404 	addi	r18,r17,-48
    8070:	b486ae36 	bltu	r22,r18,9b2c <___vfprintf_internal_r+0x1f50>
    8074:	0009883a 	mov	r4,zero
    8078:	1823883a 	mov	r17,r3
    807c:	01400284 	movi	r5,10
    8080:	00053c80 	call	53c8 <__mulsi3>
    8084:	88c00007 	ldb	r3,0(r17)
    8088:	1489883a 	add	r4,r2,r18
    808c:	8d400044 	addi	r21,r17,1
    8090:	1cbff404 	addi	r18,r3,-48
    8094:	a823883a 	mov	r17,r21
    8098:	b4bff82e 	bgeu	r22,r18,807c <__alt_exception_stack_pointer+0xf800807c>
    809c:	1823883a 	mov	r17,r3
    80a0:	2005f616 	blt	r4,zero,987c <___vfprintf_internal_r+0x1ca0>
    80a4:	d9002a15 	stw	r4,168(sp)
    80a8:	003f2f06 	br	7d68 <__alt_exception_stack_pointer+0xf8007d68>
    80ac:	84002014 	ori	r16,r16,128
    80b0:	ac400007 	ldb	r17,0(r21)
    80b4:	003f2b06 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    80b8:	8cbff404 	addi	r18,r17,-48
    80bc:	d8003115 	stw	zero,196(sp)
    80c0:	0009883a 	mov	r4,zero
    80c4:	a823883a 	mov	r17,r21
    80c8:	01400284 	movi	r5,10
    80cc:	00053c80 	call	53c8 <__mulsi3>
    80d0:	88c00007 	ldb	r3,0(r17)
    80d4:	9089883a 	add	r4,r18,r2
    80d8:	ad400044 	addi	r21,r21,1
    80dc:	1cbff404 	addi	r18,r3,-48
    80e0:	a823883a 	mov	r17,r21
    80e4:	b4bff82e 	bgeu	r22,r18,80c8 <__alt_exception_stack_pointer+0xf80080c8>
    80e8:	1823883a 	mov	r17,r3
    80ec:	d9003115 	stw	r4,196(sp)
    80f0:	003f1d06 	br	7d68 <__alt_exception_stack_pointer+0xf8007d68>
    80f4:	8025883a 	mov	r18,r16
    80f8:	dc002903 	ldbu	r16,164(sp)
    80fc:	e011883a 	mov	r8,fp
    8100:	84003fcc 	andi	r16,r16,255
    8104:	8007531e 	bne	r16,zero,9e54 <___vfprintf_internal_r+0x2278>
    8108:	94800414 	ori	r18,r18,16
    810c:	9080080c 	andi	r2,r18,32
    8110:	1003a326 	beq	r2,zero,8fa0 <___vfprintf_internal_r+0x13c4>
    8114:	d9002e17 	ldw	r4,184(sp)
    8118:	20800117 	ldw	r2,4(r4)
    811c:	24c00017 	ldw	r19,0(r4)
    8120:	21000204 	addi	r4,r4,8
    8124:	d9002e15 	stw	r4,184(sp)
    8128:	102d883a 	mov	r22,r2
    812c:	10047316 	blt	r2,zero,92fc <___vfprintf_internal_r+0x1720>
    8130:	d9002a17 	ldw	r4,168(sp)
    8134:	df002783 	ldbu	fp,158(sp)
    8138:	2003e416 	blt	r4,zero,90cc <___vfprintf_internal_r+0x14f0>
    813c:	00ffdfc4 	movi	r3,-129
    8140:	9d84b03a 	or	r2,r19,r22
    8144:	90e4703a 	and	r18,r18,r3
    8148:	10018026 	beq	r2,zero,874c <___vfprintf_internal_r+0xb70>
    814c:	b003ab26 	beq	r22,zero,8ffc <___vfprintf_internal_r+0x1420>
    8150:	dc402915 	stw	r17,164(sp)
    8154:	dc001e04 	addi	r16,sp,120
    8158:	b023883a 	mov	r17,r22
    815c:	402d883a 	mov	r22,r8
    8160:	9809883a 	mov	r4,r19
    8164:	880b883a 	mov	r5,r17
    8168:	01800284 	movi	r6,10
    816c:	000f883a 	mov	r7,zero
    8170:	00110a00 	call	110a0 <__umoddi3>
    8174:	10800c04 	addi	r2,r2,48
    8178:	843fffc4 	addi	r16,r16,-1
    817c:	9809883a 	mov	r4,r19
    8180:	880b883a 	mov	r5,r17
    8184:	80800005 	stb	r2,0(r16)
    8188:	01800284 	movi	r6,10
    818c:	000f883a 	mov	r7,zero
    8190:	0010aa40 	call	10aa4 <__udivdi3>
    8194:	1027883a 	mov	r19,r2
    8198:	10c4b03a 	or	r2,r2,r3
    819c:	1823883a 	mov	r17,r3
    81a0:	103fef1e 	bne	r2,zero,8160 <__alt_exception_stack_pointer+0xf8008160>
    81a4:	d8c02817 	ldw	r3,160(sp)
    81a8:	dc402917 	ldw	r17,164(sp)
    81ac:	b011883a 	mov	r8,r22
    81b0:	1c07c83a 	sub	r3,r3,r16
    81b4:	d8c02b15 	stw	r3,172(sp)
    81b8:	00005f06 	br	8338 <___vfprintf_internal_r+0x75c>
    81bc:	8025883a 	mov	r18,r16
    81c0:	dc002903 	ldbu	r16,164(sp)
    81c4:	e011883a 	mov	r8,fp
    81c8:	84003fcc 	andi	r16,r16,255
    81cc:	80071e1e 	bne	r16,zero,9e48 <___vfprintf_internal_r+0x226c>
    81d0:	9080020c 	andi	r2,r18,8
    81d4:	1004af26 	beq	r2,zero,9494 <___vfprintf_internal_r+0x18b8>
    81d8:	d9002e17 	ldw	r4,184(sp)
    81dc:	d9402e17 	ldw	r5,184(sp)
    81e0:	d8802e17 	ldw	r2,184(sp)
    81e4:	21000017 	ldw	r4,0(r4)
    81e8:	29400117 	ldw	r5,4(r5)
    81ec:	10800204 	addi	r2,r2,8
    81f0:	d9003615 	stw	r4,216(sp)
    81f4:	d9403815 	stw	r5,224(sp)
    81f8:	d8802e15 	stw	r2,184(sp)
    81fc:	d9003617 	ldw	r4,216(sp)
    8200:	d9403817 	ldw	r5,224(sp)
    8204:	da003d15 	stw	r8,244(sp)
    8208:	04000044 	movi	r16,1
    820c:	000e7d40 	call	e7d4 <__fpclassifyd>
    8210:	da003d17 	ldw	r8,244(sp)
    8214:	1404441e 	bne	r2,r16,9328 <___vfprintf_internal_r+0x174c>
    8218:	d9003617 	ldw	r4,216(sp)
    821c:	d9403817 	ldw	r5,224(sp)
    8220:	000d883a 	mov	r6,zero
    8224:	000f883a 	mov	r7,zero
    8228:	00120340 	call	12034 <__ledf2>
    822c:	da003d17 	ldw	r8,244(sp)
    8230:	1005e316 	blt	r2,zero,99c0 <___vfprintf_internal_r+0x1de4>
    8234:	df002783 	ldbu	fp,158(sp)
    8238:	008011c4 	movi	r2,71
    823c:	1445580e 	bge	r2,r17,97a0 <___vfprintf_internal_r+0x1bc4>
    8240:	04000074 	movhi	r16,1
    8244:	8419d204 	addi	r16,r16,26440
    8248:	00c000c4 	movi	r3,3
    824c:	00bfdfc4 	movi	r2,-129
    8250:	d8c02915 	stw	r3,164(sp)
    8254:	90a4703a 	and	r18,r18,r2
    8258:	d8c02b15 	stw	r3,172(sp)
    825c:	d8002a15 	stw	zero,168(sp)
    8260:	d8003215 	stw	zero,200(sp)
    8264:	00003a06 	br	8350 <___vfprintf_internal_r+0x774>
    8268:	84000214 	ori	r16,r16,8
    826c:	ac400007 	ldb	r17,0(r21)
    8270:	003ebc06 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    8274:	8025883a 	mov	r18,r16
    8278:	dc002903 	ldbu	r16,164(sp)
    827c:	e011883a 	mov	r8,fp
    8280:	84003fcc 	andi	r16,r16,255
    8284:	8007001e 	bne	r16,zero,9e88 <___vfprintf_internal_r+0x22ac>
    8288:	94800414 	ori	r18,r18,16
    828c:	9080080c 	andi	r2,r18,32
    8290:	1002fa26 	beq	r2,zero,8e7c <___vfprintf_internal_r+0x12a0>
    8294:	d9002e17 	ldw	r4,184(sp)
    8298:	d9402a17 	ldw	r5,168(sp)
    829c:	d8002785 	stb	zero,158(sp)
    82a0:	20800204 	addi	r2,r4,8
    82a4:	24c00017 	ldw	r19,0(r4)
    82a8:	25800117 	ldw	r22,4(r4)
    82ac:	2804b116 	blt	r5,zero,9574 <___vfprintf_internal_r+0x1998>
    82b0:	013fdfc4 	movi	r4,-129
    82b4:	9d86b03a 	or	r3,r19,r22
    82b8:	d8802e15 	stw	r2,184(sp)
    82bc:	9124703a 	and	r18,r18,r4
    82c0:	1802fb1e 	bne	r3,zero,8eb0 <___vfprintf_internal_r+0x12d4>
    82c4:	d8c02a17 	ldw	r3,168(sp)
    82c8:	0039883a 	mov	fp,zero
    82cc:	1805e526 	beq	r3,zero,9a64 <___vfprintf_internal_r+0x1e88>
    82d0:	0027883a 	mov	r19,zero
    82d4:	002d883a 	mov	r22,zero
    82d8:	dc001e04 	addi	r16,sp,120
    82dc:	9806d0fa 	srli	r3,r19,3
    82e0:	b008977a 	slli	r4,r22,29
    82e4:	b02cd0fa 	srli	r22,r22,3
    82e8:	9cc001cc 	andi	r19,r19,7
    82ec:	98800c04 	addi	r2,r19,48
    82f0:	843fffc4 	addi	r16,r16,-1
    82f4:	20e6b03a 	or	r19,r4,r3
    82f8:	80800005 	stb	r2,0(r16)
    82fc:	9d86b03a 	or	r3,r19,r22
    8300:	183ff61e 	bne	r3,zero,82dc <__alt_exception_stack_pointer+0xf80082dc>
    8304:	90c0004c 	andi	r3,r18,1
    8308:	18014126 	beq	r3,zero,8810 <___vfprintf_internal_r+0xc34>
    830c:	10803fcc 	andi	r2,r2,255
    8310:	1080201c 	xori	r2,r2,128
    8314:	10bfe004 	addi	r2,r2,-128
    8318:	00c00c04 	movi	r3,48
    831c:	10c13c26 	beq	r2,r3,8810 <___vfprintf_internal_r+0xc34>
    8320:	80ffffc5 	stb	r3,-1(r16)
    8324:	d8c02817 	ldw	r3,160(sp)
    8328:	80bfffc4 	addi	r2,r16,-1
    832c:	1021883a 	mov	r16,r2
    8330:	1887c83a 	sub	r3,r3,r2
    8334:	d8c02b15 	stw	r3,172(sp)
    8338:	d8802b17 	ldw	r2,172(sp)
    833c:	d9002a17 	ldw	r4,168(sp)
    8340:	1100010e 	bge	r2,r4,8348 <___vfprintf_internal_r+0x76c>
    8344:	2005883a 	mov	r2,r4
    8348:	d8802915 	stw	r2,164(sp)
    834c:	d8003215 	stw	zero,200(sp)
    8350:	e7003fcc 	andi	fp,fp,255
    8354:	e700201c 	xori	fp,fp,128
    8358:	e73fe004 	addi	fp,fp,-128
    835c:	e0000326 	beq	fp,zero,836c <___vfprintf_internal_r+0x790>
    8360:	d8c02917 	ldw	r3,164(sp)
    8364:	18c00044 	addi	r3,r3,1
    8368:	d8c02915 	stw	r3,164(sp)
    836c:	90c0008c 	andi	r3,r18,2
    8370:	d8c02c15 	stw	r3,176(sp)
    8374:	18000326 	beq	r3,zero,8384 <___vfprintf_internal_r+0x7a8>
    8378:	d8c02917 	ldw	r3,164(sp)
    837c:	18c00084 	addi	r3,r3,2
    8380:	d8c02915 	stw	r3,164(sp)
    8384:	90c0210c 	andi	r3,r18,132
    8388:	d8c03015 	stw	r3,192(sp)
    838c:	1801c51e 	bne	r3,zero,8aa4 <___vfprintf_internal_r+0xec8>
    8390:	d9003117 	ldw	r4,196(sp)
    8394:	d8c02917 	ldw	r3,164(sp)
    8398:	20e7c83a 	sub	r19,r4,r3
    839c:	04c1c10e 	bge	zero,r19,8aa4 <___vfprintf_internal_r+0xec8>
    83a0:	02400404 	movi	r9,16
    83a4:	d8c02017 	ldw	r3,128(sp)
    83a8:	d8801f17 	ldw	r2,124(sp)
    83ac:	4cc52f0e 	bge	r9,r19,986c <___vfprintf_internal_r+0x1c90>
    83b0:	01400074 	movhi	r5,1
    83b4:	2959e584 	addi	r5,r5,26518
    83b8:	dc403b15 	stw	r17,236(sp)
    83bc:	d9403515 	stw	r5,212(sp)
    83c0:	9823883a 	mov	r17,r19
    83c4:	482d883a 	mov	r22,r9
    83c8:	9027883a 	mov	r19,r18
    83cc:	070001c4 	movi	fp,7
    83d0:	8025883a 	mov	r18,r16
    83d4:	dc002d17 	ldw	r16,180(sp)
    83d8:	00000306 	br	83e8 <___vfprintf_internal_r+0x80c>
    83dc:	8c7ffc04 	addi	r17,r17,-16
    83e0:	42000204 	addi	r8,r8,8
    83e4:	b440130e 	bge	r22,r17,8434 <___vfprintf_internal_r+0x858>
    83e8:	01000074 	movhi	r4,1
    83ec:	18c00404 	addi	r3,r3,16
    83f0:	10800044 	addi	r2,r2,1
    83f4:	2119e584 	addi	r4,r4,26518
    83f8:	41000015 	stw	r4,0(r8)
    83fc:	45800115 	stw	r22,4(r8)
    8400:	d8c02015 	stw	r3,128(sp)
    8404:	d8801f15 	stw	r2,124(sp)
    8408:	e0bff40e 	bge	fp,r2,83dc <__alt_exception_stack_pointer+0xf80083dc>
    840c:	d9801e04 	addi	r6,sp,120
    8410:	b80b883a 	mov	r5,r23
    8414:	8009883a 	mov	r4,r16
    8418:	000eb5c0 	call	eb5c <__sprint_r>
    841c:	103ef31e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8420:	8c7ffc04 	addi	r17,r17,-16
    8424:	d8c02017 	ldw	r3,128(sp)
    8428:	d8801f17 	ldw	r2,124(sp)
    842c:	da000404 	addi	r8,sp,16
    8430:	b47fed16 	blt	r22,r17,83e8 <__alt_exception_stack_pointer+0xf80083e8>
    8434:	9021883a 	mov	r16,r18
    8438:	9825883a 	mov	r18,r19
    843c:	8827883a 	mov	r19,r17
    8440:	dc403b17 	ldw	r17,236(sp)
    8444:	d9403517 	ldw	r5,212(sp)
    8448:	98c7883a 	add	r3,r19,r3
    844c:	10800044 	addi	r2,r2,1
    8450:	41400015 	stw	r5,0(r8)
    8454:	44c00115 	stw	r19,4(r8)
    8458:	d8c02015 	stw	r3,128(sp)
    845c:	d8801f15 	stw	r2,124(sp)
    8460:	010001c4 	movi	r4,7
    8464:	2082c516 	blt	r4,r2,8f7c <___vfprintf_internal_r+0x13a0>
    8468:	df002787 	ldb	fp,158(sp)
    846c:	42000204 	addi	r8,r8,8
    8470:	e0000c26 	beq	fp,zero,84a4 <___vfprintf_internal_r+0x8c8>
    8474:	d8801f17 	ldw	r2,124(sp)
    8478:	d9002784 	addi	r4,sp,158
    847c:	18c00044 	addi	r3,r3,1
    8480:	10800044 	addi	r2,r2,1
    8484:	41000015 	stw	r4,0(r8)
    8488:	01000044 	movi	r4,1
    848c:	41000115 	stw	r4,4(r8)
    8490:	d8c02015 	stw	r3,128(sp)
    8494:	d8801f15 	stw	r2,124(sp)
    8498:	010001c4 	movi	r4,7
    849c:	20825e16 	blt	r4,r2,8e18 <___vfprintf_internal_r+0x123c>
    84a0:	42000204 	addi	r8,r8,8
    84a4:	d8802c17 	ldw	r2,176(sp)
    84a8:	10000c26 	beq	r2,zero,84dc <___vfprintf_internal_r+0x900>
    84ac:	d8801f17 	ldw	r2,124(sp)
    84b0:	d9002704 	addi	r4,sp,156
    84b4:	18c00084 	addi	r3,r3,2
    84b8:	10800044 	addi	r2,r2,1
    84bc:	41000015 	stw	r4,0(r8)
    84c0:	01000084 	movi	r4,2
    84c4:	41000115 	stw	r4,4(r8)
    84c8:	d8c02015 	stw	r3,128(sp)
    84cc:	d8801f15 	stw	r2,124(sp)
    84d0:	010001c4 	movi	r4,7
    84d4:	20825816 	blt	r4,r2,8e38 <___vfprintf_internal_r+0x125c>
    84d8:	42000204 	addi	r8,r8,8
    84dc:	d9003017 	ldw	r4,192(sp)
    84e0:	00802004 	movi	r2,128
    84e4:	2081bb26 	beq	r4,r2,8bd4 <___vfprintf_internal_r+0xff8>
    84e8:	d9402a17 	ldw	r5,168(sp)
    84ec:	d8802b17 	ldw	r2,172(sp)
    84f0:	28adc83a 	sub	r22,r5,r2
    84f4:	0580310e 	bge	zero,r22,85bc <___vfprintf_internal_r+0x9e0>
    84f8:	07000404 	movi	fp,16
    84fc:	d8801f17 	ldw	r2,124(sp)
    8500:	e584360e 	bge	fp,r22,95dc <___vfprintf_internal_r+0x1a00>
    8504:	01400074 	movhi	r5,1
    8508:	2959e184 	addi	r5,r5,26502
    850c:	dc402a15 	stw	r17,168(sp)
    8510:	d9402c15 	stw	r5,176(sp)
    8514:	b023883a 	mov	r17,r22
    8518:	04c001c4 	movi	r19,7
    851c:	a82d883a 	mov	r22,r21
    8520:	902b883a 	mov	r21,r18
    8524:	8025883a 	mov	r18,r16
    8528:	dc002d17 	ldw	r16,180(sp)
    852c:	00000306 	br	853c <___vfprintf_internal_r+0x960>
    8530:	8c7ffc04 	addi	r17,r17,-16
    8534:	42000204 	addi	r8,r8,8
    8538:	e440110e 	bge	fp,r17,8580 <___vfprintf_internal_r+0x9a4>
    853c:	18c00404 	addi	r3,r3,16
    8540:	10800044 	addi	r2,r2,1
    8544:	45000015 	stw	r20,0(r8)
    8548:	47000115 	stw	fp,4(r8)
    854c:	d8c02015 	stw	r3,128(sp)
    8550:	d8801f15 	stw	r2,124(sp)
    8554:	98bff60e 	bge	r19,r2,8530 <__alt_exception_stack_pointer+0xf8008530>
    8558:	d9801e04 	addi	r6,sp,120
    855c:	b80b883a 	mov	r5,r23
    8560:	8009883a 	mov	r4,r16
    8564:	000eb5c0 	call	eb5c <__sprint_r>
    8568:	103ea01e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    856c:	8c7ffc04 	addi	r17,r17,-16
    8570:	d8c02017 	ldw	r3,128(sp)
    8574:	d8801f17 	ldw	r2,124(sp)
    8578:	da000404 	addi	r8,sp,16
    857c:	e47fef16 	blt	fp,r17,853c <__alt_exception_stack_pointer+0xf800853c>
    8580:	9021883a 	mov	r16,r18
    8584:	a825883a 	mov	r18,r21
    8588:	b02b883a 	mov	r21,r22
    858c:	882d883a 	mov	r22,r17
    8590:	dc402a17 	ldw	r17,168(sp)
    8594:	d9002c17 	ldw	r4,176(sp)
    8598:	1d87883a 	add	r3,r3,r22
    859c:	10800044 	addi	r2,r2,1
    85a0:	41000015 	stw	r4,0(r8)
    85a4:	45800115 	stw	r22,4(r8)
    85a8:	d8c02015 	stw	r3,128(sp)
    85ac:	d8801f15 	stw	r2,124(sp)
    85b0:	010001c4 	movi	r4,7
    85b4:	20821016 	blt	r4,r2,8df8 <___vfprintf_internal_r+0x121c>
    85b8:	42000204 	addi	r8,r8,8
    85bc:	9080400c 	andi	r2,r18,256
    85c0:	10013a1e 	bne	r2,zero,8aac <___vfprintf_internal_r+0xed0>
    85c4:	d9402b17 	ldw	r5,172(sp)
    85c8:	d8801f17 	ldw	r2,124(sp)
    85cc:	44000015 	stw	r16,0(r8)
    85d0:	1947883a 	add	r3,r3,r5
    85d4:	10800044 	addi	r2,r2,1
    85d8:	41400115 	stw	r5,4(r8)
    85dc:	d8c02015 	stw	r3,128(sp)
    85e0:	d8801f15 	stw	r2,124(sp)
    85e4:	010001c4 	movi	r4,7
    85e8:	2081f516 	blt	r4,r2,8dc0 <___vfprintf_internal_r+0x11e4>
    85ec:	42000204 	addi	r8,r8,8
    85f0:	9480010c 	andi	r18,r18,4
    85f4:	90003226 	beq	r18,zero,86c0 <___vfprintf_internal_r+0xae4>
    85f8:	d9403117 	ldw	r5,196(sp)
    85fc:	d8802917 	ldw	r2,164(sp)
    8600:	28a1c83a 	sub	r16,r5,r2
    8604:	04002e0e 	bge	zero,r16,86c0 <___vfprintf_internal_r+0xae4>
    8608:	04400404 	movi	r17,16
    860c:	d8801f17 	ldw	r2,124(sp)
    8610:	8c04c40e 	bge	r17,r16,9924 <___vfprintf_internal_r+0x1d48>
    8614:	01400074 	movhi	r5,1
    8618:	2959e584 	addi	r5,r5,26518
    861c:	d9403515 	stw	r5,212(sp)
    8620:	048001c4 	movi	r18,7
    8624:	dcc02d17 	ldw	r19,180(sp)
    8628:	00000306 	br	8638 <___vfprintf_internal_r+0xa5c>
    862c:	843ffc04 	addi	r16,r16,-16
    8630:	42000204 	addi	r8,r8,8
    8634:	8c00130e 	bge	r17,r16,8684 <___vfprintf_internal_r+0xaa8>
    8638:	01000074 	movhi	r4,1
    863c:	18c00404 	addi	r3,r3,16
    8640:	10800044 	addi	r2,r2,1
    8644:	2119e584 	addi	r4,r4,26518
    8648:	41000015 	stw	r4,0(r8)
    864c:	44400115 	stw	r17,4(r8)
    8650:	d8c02015 	stw	r3,128(sp)
    8654:	d8801f15 	stw	r2,124(sp)
    8658:	90bff40e 	bge	r18,r2,862c <__alt_exception_stack_pointer+0xf800862c>
    865c:	d9801e04 	addi	r6,sp,120
    8660:	b80b883a 	mov	r5,r23
    8664:	9809883a 	mov	r4,r19
    8668:	000eb5c0 	call	eb5c <__sprint_r>
    866c:	103e5f1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8670:	843ffc04 	addi	r16,r16,-16
    8674:	d8c02017 	ldw	r3,128(sp)
    8678:	d8801f17 	ldw	r2,124(sp)
    867c:	da000404 	addi	r8,sp,16
    8680:	8c3fed16 	blt	r17,r16,8638 <__alt_exception_stack_pointer+0xf8008638>
    8684:	d9403517 	ldw	r5,212(sp)
    8688:	1c07883a 	add	r3,r3,r16
    868c:	10800044 	addi	r2,r2,1
    8690:	41400015 	stw	r5,0(r8)
    8694:	44000115 	stw	r16,4(r8)
    8698:	d8c02015 	stw	r3,128(sp)
    869c:	d8801f15 	stw	r2,124(sp)
    86a0:	010001c4 	movi	r4,7
    86a4:	2080060e 	bge	r4,r2,86c0 <___vfprintf_internal_r+0xae4>
    86a8:	d9002d17 	ldw	r4,180(sp)
    86ac:	d9801e04 	addi	r6,sp,120
    86b0:	b80b883a 	mov	r5,r23
    86b4:	000eb5c0 	call	eb5c <__sprint_r>
    86b8:	103e4c1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    86bc:	d8c02017 	ldw	r3,128(sp)
    86c0:	d8803117 	ldw	r2,196(sp)
    86c4:	d9002917 	ldw	r4,164(sp)
    86c8:	1100010e 	bge	r2,r4,86d0 <___vfprintf_internal_r+0xaf4>
    86cc:	2005883a 	mov	r2,r4
    86d0:	d9402f17 	ldw	r5,188(sp)
    86d4:	288b883a 	add	r5,r5,r2
    86d8:	d9402f15 	stw	r5,188(sp)
    86dc:	1801c01e 	bne	r3,zero,8de0 <___vfprintf_internal_r+0x1204>
    86e0:	a8800007 	ldb	r2,0(r21)
    86e4:	d8001f15 	stw	zero,124(sp)
    86e8:	da000404 	addi	r8,sp,16
    86ec:	103d751e 	bne	r2,zero,7cc4 <__alt_exception_stack_pointer+0xf8007cc4>
    86f0:	a823883a 	mov	r17,r21
    86f4:	003d8b06 	br	7d24 <__alt_exception_stack_pointer+0xf8007d24>
    86f8:	8025883a 	mov	r18,r16
    86fc:	dc002903 	ldbu	r16,164(sp)
    8700:	e011883a 	mov	r8,fp
    8704:	84003fcc 	andi	r16,r16,255
    8708:	8005e51e 	bne	r16,zero,9ea0 <___vfprintf_internal_r+0x22c4>
    870c:	94800414 	ori	r18,r18,16
    8710:	9080080c 	andi	r2,r18,32
    8714:	10022b26 	beq	r2,zero,8fc4 <___vfprintf_internal_r+0x13e8>
    8718:	d9002e17 	ldw	r4,184(sp)
    871c:	d9402a17 	ldw	r5,168(sp)
    8720:	d8002785 	stb	zero,158(sp)
    8724:	20c00204 	addi	r3,r4,8
    8728:	24c00017 	ldw	r19,0(r4)
    872c:	25800117 	ldw	r22,4(r4)
    8730:	28042e16 	blt	r5,zero,97ec <___vfprintf_internal_r+0x1c10>
    8734:	013fdfc4 	movi	r4,-129
    8738:	9d84b03a 	or	r2,r19,r22
    873c:	d8c02e15 	stw	r3,184(sp)
    8740:	9124703a 	and	r18,r18,r4
    8744:	0039883a 	mov	fp,zero
    8748:	103e801e 	bne	r2,zero,814c <__alt_exception_stack_pointer+0xf800814c>
    874c:	d9002a17 	ldw	r4,168(sp)
    8750:	2002e01e 	bne	r4,zero,92d4 <___vfprintf_internal_r+0x16f8>
    8754:	d8002a15 	stw	zero,168(sp)
    8758:	d8002b15 	stw	zero,172(sp)
    875c:	dc001e04 	addi	r16,sp,120
    8760:	003ef506 	br	8338 <__alt_exception_stack_pointer+0xf8008338>
    8764:	8025883a 	mov	r18,r16
    8768:	dc002903 	ldbu	r16,164(sp)
    876c:	e011883a 	mov	r8,fp
    8770:	84003fcc 	andi	r16,r16,255
    8774:	8005ba1e 	bne	r16,zero,9e60 <___vfprintf_internal_r+0x2284>
    8778:	01000074 	movhi	r4,1
    877c:	2119d504 	addi	r4,r4,26452
    8780:	d9003915 	stw	r4,228(sp)
    8784:	9080080c 	andi	r2,r18,32
    8788:	10006126 	beq	r2,zero,8910 <___vfprintf_internal_r+0xd34>
    878c:	d9402e17 	ldw	r5,184(sp)
    8790:	2cc00017 	ldw	r19,0(r5)
    8794:	2d800117 	ldw	r22,4(r5)
    8798:	29400204 	addi	r5,r5,8
    879c:	d9402e15 	stw	r5,184(sp)
    87a0:	9080004c 	andi	r2,r18,1
    87a4:	1001ac26 	beq	r2,zero,8e58 <___vfprintf_internal_r+0x127c>
    87a8:	9d84b03a 	or	r2,r19,r22
    87ac:	10038526 	beq	r2,zero,95c4 <___vfprintf_internal_r+0x19e8>
    87b0:	d8c02a17 	ldw	r3,168(sp)
    87b4:	00800c04 	movi	r2,48
    87b8:	d8802705 	stb	r2,156(sp)
    87bc:	dc402745 	stb	r17,157(sp)
    87c0:	d8002785 	stb	zero,158(sp)
    87c4:	90800094 	ori	r2,r18,2
    87c8:	18047916 	blt	r3,zero,99b0 <___vfprintf_internal_r+0x1dd4>
    87cc:	00bfdfc4 	movi	r2,-129
    87d0:	90a4703a 	and	r18,r18,r2
    87d4:	94800094 	ori	r18,r18,2
    87d8:	0039883a 	mov	fp,zero
    87dc:	d9003917 	ldw	r4,228(sp)
    87e0:	dc001e04 	addi	r16,sp,120
    87e4:	988003cc 	andi	r2,r19,15
    87e8:	b006973a 	slli	r3,r22,28
    87ec:	2085883a 	add	r2,r4,r2
    87f0:	9826d13a 	srli	r19,r19,4
    87f4:	10800003 	ldbu	r2,0(r2)
    87f8:	b02cd13a 	srli	r22,r22,4
    87fc:	843fffc4 	addi	r16,r16,-1
    8800:	1ce6b03a 	or	r19,r3,r19
    8804:	80800005 	stb	r2,0(r16)
    8808:	9d84b03a 	or	r2,r19,r22
    880c:	103ff51e 	bne	r2,zero,87e4 <__alt_exception_stack_pointer+0xf80087e4>
    8810:	d8c02817 	ldw	r3,160(sp)
    8814:	1c07c83a 	sub	r3,r3,r16
    8818:	d8c02b15 	stw	r3,172(sp)
    881c:	003ec606 	br	8338 <__alt_exception_stack_pointer+0xf8008338>
    8820:	8025883a 	mov	r18,r16
    8824:	dc002903 	ldbu	r16,164(sp)
    8828:	e011883a 	mov	r8,fp
    882c:	84003fcc 	andi	r16,r16,255
    8830:	803e9626 	beq	r16,zero,828c <__alt_exception_stack_pointer+0xf800828c>
    8834:	d8c02b03 	ldbu	r3,172(sp)
    8838:	d8c02785 	stb	r3,158(sp)
    883c:	003e9306 	br	828c <__alt_exception_stack_pointer+0xf800828c>
    8840:	00c00044 	movi	r3,1
    8844:	d8c02905 	stb	r3,164(sp)
    8848:	00c00ac4 	movi	r3,43
    884c:	d8c02b05 	stb	r3,172(sp)
    8850:	ac400007 	ldb	r17,0(r21)
    8854:	003d4306 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    8858:	84000814 	ori	r16,r16,32
    885c:	ac400007 	ldb	r17,0(r21)
    8860:	003d4006 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    8864:	d8802e17 	ldw	r2,184(sp)
    8868:	8025883a 	mov	r18,r16
    886c:	d8002785 	stb	zero,158(sp)
    8870:	14000017 	ldw	r16,0(r2)
    8874:	e011883a 	mov	r8,fp
    8878:	14c00104 	addi	r19,r2,4
    887c:	80042d26 	beq	r16,zero,9934 <___vfprintf_internal_r+0x1d58>
    8880:	d8c02a17 	ldw	r3,168(sp)
    8884:	1803e416 	blt	r3,zero,9818 <___vfprintf_internal_r+0x1c3c>
    8888:	180d883a 	mov	r6,r3
    888c:	000b883a 	mov	r5,zero
    8890:	8009883a 	mov	r4,r16
    8894:	df003d15 	stw	fp,244(sp)
    8898:	000cd080 	call	cd08 <memchr>
    889c:	da003d17 	ldw	r8,244(sp)
    88a0:	10046826 	beq	r2,zero,9a44 <___vfprintf_internal_r+0x1e68>
    88a4:	1405c83a 	sub	r2,r2,r16
    88a8:	d8802b15 	stw	r2,172(sp)
    88ac:	1003e016 	blt	r2,zero,9830 <___vfprintf_internal_r+0x1c54>
    88b0:	df002783 	ldbu	fp,158(sp)
    88b4:	d8802915 	stw	r2,164(sp)
    88b8:	dcc02e15 	stw	r19,184(sp)
    88bc:	d8002a15 	stw	zero,168(sp)
    88c0:	d8003215 	stw	zero,200(sp)
    88c4:	003ea206 	br	8350 <__alt_exception_stack_pointer+0xf8008350>
    88c8:	8025883a 	mov	r18,r16
    88cc:	dc002903 	ldbu	r16,164(sp)
    88d0:	e011883a 	mov	r8,fp
    88d4:	84003fcc 	andi	r16,r16,255
    88d8:	803f8d26 	beq	r16,zero,8710 <__alt_exception_stack_pointer+0xf8008710>
    88dc:	d8c02b03 	ldbu	r3,172(sp)
    88e0:	d8c02785 	stb	r3,158(sp)
    88e4:	003f8a06 	br	8710 <__alt_exception_stack_pointer+0xf8008710>
    88e8:	8025883a 	mov	r18,r16
    88ec:	dc002903 	ldbu	r16,164(sp)
    88f0:	e011883a 	mov	r8,fp
    88f4:	84003fcc 	andi	r16,r16,255
    88f8:	8005661e 	bne	r16,zero,9e94 <___vfprintf_internal_r+0x22b8>
    88fc:	01000074 	movhi	r4,1
    8900:	2119da04 	addi	r4,r4,26472
    8904:	d9003915 	stw	r4,228(sp)
    8908:	9080080c 	andi	r2,r18,32
    890c:	103f9f1e 	bne	r2,zero,878c <__alt_exception_stack_pointer+0xf800878c>
    8910:	9080040c 	andi	r2,r18,16
    8914:	1002eb26 	beq	r2,zero,94c4 <___vfprintf_internal_r+0x18e8>
    8918:	d8802e17 	ldw	r2,184(sp)
    891c:	002d883a 	mov	r22,zero
    8920:	14c00017 	ldw	r19,0(r2)
    8924:	10800104 	addi	r2,r2,4
    8928:	d8802e15 	stw	r2,184(sp)
    892c:	003f9c06 	br	87a0 <__alt_exception_stack_pointer+0xf80087a0>
    8930:	d8802b07 	ldb	r2,172(sp)
    8934:	1002e11e 	bne	r2,zero,94bc <___vfprintf_internal_r+0x18e0>
    8938:	00c00044 	movi	r3,1
    893c:	d8c02905 	stb	r3,164(sp)
    8940:	00c00804 	movi	r3,32
    8944:	d8c02b05 	stb	r3,172(sp)
    8948:	ac400007 	ldb	r17,0(r21)
    894c:	003d0506 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    8950:	84000054 	ori	r16,r16,1
    8954:	ac400007 	ldb	r17,0(r21)
    8958:	003d0206 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    895c:	8025883a 	mov	r18,r16
    8960:	dc002903 	ldbu	r16,164(sp)
    8964:	e011883a 	mov	r8,fp
    8968:	84003fcc 	andi	r16,r16,255
    896c:	803de726 	beq	r16,zero,810c <__alt_exception_stack_pointer+0xf800810c>
    8970:	d8c02b03 	ldbu	r3,172(sp)
    8974:	d8c02785 	stb	r3,158(sp)
    8978:	003de406 	br	810c <__alt_exception_stack_pointer+0xf800810c>
    897c:	84001014 	ori	r16,r16,64
    8980:	ac400007 	ldb	r17,0(r21)
    8984:	003cf706 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    8988:	ac400007 	ldb	r17,0(r21)
    898c:	00801b04 	movi	r2,108
    8990:	88838f26 	beq	r17,r2,97d0 <___vfprintf_internal_r+0x1bf4>
    8994:	84000414 	ori	r16,r16,16
    8998:	003cf206 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    899c:	8025883a 	mov	r18,r16
    89a0:	dc002903 	ldbu	r16,164(sp)
    89a4:	e011883a 	mov	r8,fp
    89a8:	84003fcc 	andi	r16,r16,255
    89ac:	80053f1e 	bne	r16,zero,9eac <___vfprintf_internal_r+0x22d0>
    89b0:	9080080c 	andi	r2,r18,32
    89b4:	1002d226 	beq	r2,zero,9500 <___vfprintf_internal_r+0x1924>
    89b8:	d9002e17 	ldw	r4,184(sp)
    89bc:	d9402f17 	ldw	r5,188(sp)
    89c0:	20800017 	ldw	r2,0(r4)
    89c4:	2807d7fa 	srai	r3,r5,31
    89c8:	21000104 	addi	r4,r4,4
    89cc:	d9002e15 	stw	r4,184(sp)
    89d0:	11400015 	stw	r5,0(r2)
    89d4:	10c00115 	stw	r3,4(r2)
    89d8:	003cb806 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    89dc:	d8c02e17 	ldw	r3,184(sp)
    89e0:	d9002e17 	ldw	r4,184(sp)
    89e4:	8025883a 	mov	r18,r16
    89e8:	18800017 	ldw	r2,0(r3)
    89ec:	21000104 	addi	r4,r4,4
    89f0:	00c00044 	movi	r3,1
    89f4:	e011883a 	mov	r8,fp
    89f8:	d8c02915 	stw	r3,164(sp)
    89fc:	d8002785 	stb	zero,158(sp)
    8a00:	d8801405 	stb	r2,80(sp)
    8a04:	d9002e15 	stw	r4,184(sp)
    8a08:	d8c02b15 	stw	r3,172(sp)
    8a0c:	d8002a15 	stw	zero,168(sp)
    8a10:	d8003215 	stw	zero,200(sp)
    8a14:	dc001404 	addi	r16,sp,80
    8a18:	0039883a 	mov	fp,zero
    8a1c:	003e5306 	br	836c <__alt_exception_stack_pointer+0xf800836c>
    8a20:	01000074 	movhi	r4,1
    8a24:	2119da04 	addi	r4,r4,26472
    8a28:	0039883a 	mov	fp,zero
    8a2c:	d9003915 	stw	r4,228(sp)
    8a30:	04401e04 	movi	r17,120
    8a34:	003f6906 	br	87dc <__alt_exception_stack_pointer+0xf80087dc>
    8a38:	8025883a 	mov	r18,r16
    8a3c:	dc002903 	ldbu	r16,164(sp)
    8a40:	e011883a 	mov	r8,fp
    8a44:	84003fcc 	andi	r16,r16,255
    8a48:	8005081e 	bne	r16,zero,9e6c <___vfprintf_internal_r+0x2290>
    8a4c:	883d6126 	beq	r17,zero,7fd4 <__alt_exception_stack_pointer+0xf8007fd4>
    8a50:	00c00044 	movi	r3,1
    8a54:	d8c02915 	stw	r3,164(sp)
    8a58:	dc401405 	stb	r17,80(sp)
    8a5c:	d8002785 	stb	zero,158(sp)
    8a60:	003fe906 	br	8a08 <__alt_exception_stack_pointer+0xf8008a08>
    8a64:	01400074 	movhi	r5,1
    8a68:	2959da04 	addi	r5,r5,26472
    8a6c:	d9403915 	stw	r5,228(sp)
    8a70:	d8c02e15 	stw	r3,184(sp)
    8a74:	1025883a 	mov	r18,r2
    8a78:	04401e04 	movi	r17,120
    8a7c:	9d84b03a 	or	r2,r19,r22
    8a80:	1000fc1e 	bne	r2,zero,8e74 <___vfprintf_internal_r+0x1298>
    8a84:	0039883a 	mov	fp,zero
    8a88:	00800084 	movi	r2,2
    8a8c:	10803fcc 	andi	r2,r2,255
    8a90:	00c00044 	movi	r3,1
    8a94:	10c20f26 	beq	r2,r3,92d4 <___vfprintf_internal_r+0x16f8>
    8a98:	00c00084 	movi	r3,2
    8a9c:	10fd3326 	beq	r2,r3,7f6c <__alt_exception_stack_pointer+0xf8007f6c>
    8aa0:	003e0b06 	br	82d0 <__alt_exception_stack_pointer+0xf80082d0>
    8aa4:	d8c02017 	ldw	r3,128(sp)
    8aa8:	003e7106 	br	8470 <__alt_exception_stack_pointer+0xf8008470>
    8aac:	00801944 	movi	r2,101
    8ab0:	14407e0e 	bge	r2,r17,8cac <___vfprintf_internal_r+0x10d0>
    8ab4:	d9003617 	ldw	r4,216(sp)
    8ab8:	d9403817 	ldw	r5,224(sp)
    8abc:	000d883a 	mov	r6,zero
    8ac0:	000f883a 	mov	r7,zero
    8ac4:	d8c03c15 	stw	r3,240(sp)
    8ac8:	da003d15 	stw	r8,244(sp)
    8acc:	0005c9c0 	call	5c9c <__eqdf2>
    8ad0:	d8c03c17 	ldw	r3,240(sp)
    8ad4:	da003d17 	ldw	r8,244(sp)
    8ad8:	1000f71e 	bne	r2,zero,8eb8 <___vfprintf_internal_r+0x12dc>
    8adc:	d8801f17 	ldw	r2,124(sp)
    8ae0:	01000074 	movhi	r4,1
    8ae4:	2119e104 	addi	r4,r4,26500
    8ae8:	18c00044 	addi	r3,r3,1
    8aec:	10800044 	addi	r2,r2,1
    8af0:	41000015 	stw	r4,0(r8)
    8af4:	01000044 	movi	r4,1
    8af8:	41000115 	stw	r4,4(r8)
    8afc:	d8c02015 	stw	r3,128(sp)
    8b00:	d8801f15 	stw	r2,124(sp)
    8b04:	010001c4 	movi	r4,7
    8b08:	2082b816 	blt	r4,r2,95ec <___vfprintf_internal_r+0x1a10>
    8b0c:	42000204 	addi	r8,r8,8
    8b10:	d8802617 	ldw	r2,152(sp)
    8b14:	d9403317 	ldw	r5,204(sp)
    8b18:	11400216 	blt	r2,r5,8b24 <___vfprintf_internal_r+0xf48>
    8b1c:	9080004c 	andi	r2,r18,1
    8b20:	103eb326 	beq	r2,zero,85f0 <__alt_exception_stack_pointer+0xf80085f0>
    8b24:	d8803717 	ldw	r2,220(sp)
    8b28:	d9003417 	ldw	r4,208(sp)
    8b2c:	d9403717 	ldw	r5,220(sp)
    8b30:	1887883a 	add	r3,r3,r2
    8b34:	d8801f17 	ldw	r2,124(sp)
    8b38:	41000015 	stw	r4,0(r8)
    8b3c:	41400115 	stw	r5,4(r8)
    8b40:	10800044 	addi	r2,r2,1
    8b44:	d8c02015 	stw	r3,128(sp)
    8b48:	d8801f15 	stw	r2,124(sp)
    8b4c:	010001c4 	movi	r4,7
    8b50:	20832916 	blt	r4,r2,97f8 <___vfprintf_internal_r+0x1c1c>
    8b54:	42000204 	addi	r8,r8,8
    8b58:	d8803317 	ldw	r2,204(sp)
    8b5c:	143fffc4 	addi	r16,r2,-1
    8b60:	043ea30e 	bge	zero,r16,85f0 <__alt_exception_stack_pointer+0xf80085f0>
    8b64:	04400404 	movi	r17,16
    8b68:	d8801f17 	ldw	r2,124(sp)
    8b6c:	8c00880e 	bge	r17,r16,8d90 <___vfprintf_internal_r+0x11b4>
    8b70:	01400074 	movhi	r5,1
    8b74:	2959e184 	addi	r5,r5,26502
    8b78:	d9402c15 	stw	r5,176(sp)
    8b7c:	058001c4 	movi	r22,7
    8b80:	dcc02d17 	ldw	r19,180(sp)
    8b84:	00000306 	br	8b94 <___vfprintf_internal_r+0xfb8>
    8b88:	42000204 	addi	r8,r8,8
    8b8c:	843ffc04 	addi	r16,r16,-16
    8b90:	8c00820e 	bge	r17,r16,8d9c <___vfprintf_internal_r+0x11c0>
    8b94:	18c00404 	addi	r3,r3,16
    8b98:	10800044 	addi	r2,r2,1
    8b9c:	45000015 	stw	r20,0(r8)
    8ba0:	44400115 	stw	r17,4(r8)
    8ba4:	d8c02015 	stw	r3,128(sp)
    8ba8:	d8801f15 	stw	r2,124(sp)
    8bac:	b0bff60e 	bge	r22,r2,8b88 <__alt_exception_stack_pointer+0xf8008b88>
    8bb0:	d9801e04 	addi	r6,sp,120
    8bb4:	b80b883a 	mov	r5,r23
    8bb8:	9809883a 	mov	r4,r19
    8bbc:	000eb5c0 	call	eb5c <__sprint_r>
    8bc0:	103d0a1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8bc4:	d8c02017 	ldw	r3,128(sp)
    8bc8:	d8801f17 	ldw	r2,124(sp)
    8bcc:	da000404 	addi	r8,sp,16
    8bd0:	003fee06 	br	8b8c <__alt_exception_stack_pointer+0xf8008b8c>
    8bd4:	d9403117 	ldw	r5,196(sp)
    8bd8:	d8802917 	ldw	r2,164(sp)
    8bdc:	28adc83a 	sub	r22,r5,r2
    8be0:	05be410e 	bge	zero,r22,84e8 <__alt_exception_stack_pointer+0xf80084e8>
    8be4:	07000404 	movi	fp,16
    8be8:	d8801f17 	ldw	r2,124(sp)
    8bec:	e5838f0e 	bge	fp,r22,9a2c <___vfprintf_internal_r+0x1e50>
    8bf0:	01400074 	movhi	r5,1
    8bf4:	2959e184 	addi	r5,r5,26502
    8bf8:	dc403015 	stw	r17,192(sp)
    8bfc:	d9402c15 	stw	r5,176(sp)
    8c00:	b023883a 	mov	r17,r22
    8c04:	04c001c4 	movi	r19,7
    8c08:	a82d883a 	mov	r22,r21
    8c0c:	902b883a 	mov	r21,r18
    8c10:	8025883a 	mov	r18,r16
    8c14:	dc002d17 	ldw	r16,180(sp)
    8c18:	00000306 	br	8c28 <___vfprintf_internal_r+0x104c>
    8c1c:	8c7ffc04 	addi	r17,r17,-16
    8c20:	42000204 	addi	r8,r8,8
    8c24:	e440110e 	bge	fp,r17,8c6c <___vfprintf_internal_r+0x1090>
    8c28:	18c00404 	addi	r3,r3,16
    8c2c:	10800044 	addi	r2,r2,1
    8c30:	45000015 	stw	r20,0(r8)
    8c34:	47000115 	stw	fp,4(r8)
    8c38:	d8c02015 	stw	r3,128(sp)
    8c3c:	d8801f15 	stw	r2,124(sp)
    8c40:	98bff60e 	bge	r19,r2,8c1c <__alt_exception_stack_pointer+0xf8008c1c>
    8c44:	d9801e04 	addi	r6,sp,120
    8c48:	b80b883a 	mov	r5,r23
    8c4c:	8009883a 	mov	r4,r16
    8c50:	000eb5c0 	call	eb5c <__sprint_r>
    8c54:	103ce51e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8c58:	8c7ffc04 	addi	r17,r17,-16
    8c5c:	d8c02017 	ldw	r3,128(sp)
    8c60:	d8801f17 	ldw	r2,124(sp)
    8c64:	da000404 	addi	r8,sp,16
    8c68:	e47fef16 	blt	fp,r17,8c28 <__alt_exception_stack_pointer+0xf8008c28>
    8c6c:	9021883a 	mov	r16,r18
    8c70:	a825883a 	mov	r18,r21
    8c74:	b02b883a 	mov	r21,r22
    8c78:	882d883a 	mov	r22,r17
    8c7c:	dc403017 	ldw	r17,192(sp)
    8c80:	d9002c17 	ldw	r4,176(sp)
    8c84:	1d87883a 	add	r3,r3,r22
    8c88:	10800044 	addi	r2,r2,1
    8c8c:	41000015 	stw	r4,0(r8)
    8c90:	45800115 	stw	r22,4(r8)
    8c94:	d8c02015 	stw	r3,128(sp)
    8c98:	d8801f15 	stw	r2,124(sp)
    8c9c:	010001c4 	movi	r4,7
    8ca0:	20818e16 	blt	r4,r2,92dc <___vfprintf_internal_r+0x1700>
    8ca4:	42000204 	addi	r8,r8,8
    8ca8:	003e0f06 	br	84e8 <__alt_exception_stack_pointer+0xf80084e8>
    8cac:	d9403317 	ldw	r5,204(sp)
    8cb0:	00800044 	movi	r2,1
    8cb4:	18c00044 	addi	r3,r3,1
    8cb8:	1141530e 	bge	r2,r5,9208 <___vfprintf_internal_r+0x162c>
    8cbc:	dc401f17 	ldw	r17,124(sp)
    8cc0:	00800044 	movi	r2,1
    8cc4:	40800115 	stw	r2,4(r8)
    8cc8:	8c400044 	addi	r17,r17,1
    8ccc:	44000015 	stw	r16,0(r8)
    8cd0:	d8c02015 	stw	r3,128(sp)
    8cd4:	dc401f15 	stw	r17,124(sp)
    8cd8:	008001c4 	movi	r2,7
    8cdc:	14416b16 	blt	r2,r17,928c <___vfprintf_internal_r+0x16b0>
    8ce0:	42000204 	addi	r8,r8,8
    8ce4:	d8803717 	ldw	r2,220(sp)
    8ce8:	d9003417 	ldw	r4,208(sp)
    8cec:	8c400044 	addi	r17,r17,1
    8cf0:	10c7883a 	add	r3,r2,r3
    8cf4:	40800115 	stw	r2,4(r8)
    8cf8:	41000015 	stw	r4,0(r8)
    8cfc:	d8c02015 	stw	r3,128(sp)
    8d00:	dc401f15 	stw	r17,124(sp)
    8d04:	008001c4 	movi	r2,7
    8d08:	14416916 	blt	r2,r17,92b0 <___vfprintf_internal_r+0x16d4>
    8d0c:	45800204 	addi	r22,r8,8
    8d10:	d9003617 	ldw	r4,216(sp)
    8d14:	d9403817 	ldw	r5,224(sp)
    8d18:	000d883a 	mov	r6,zero
    8d1c:	000f883a 	mov	r7,zero
    8d20:	d8c03c15 	stw	r3,240(sp)
    8d24:	0005c9c0 	call	5c9c <__eqdf2>
    8d28:	d8c03c17 	ldw	r3,240(sp)
    8d2c:	1000bc26 	beq	r2,zero,9020 <___vfprintf_internal_r+0x1444>
    8d30:	d9403317 	ldw	r5,204(sp)
    8d34:	84000044 	addi	r16,r16,1
    8d38:	8c400044 	addi	r17,r17,1
    8d3c:	28bfffc4 	addi	r2,r5,-1
    8d40:	1887883a 	add	r3,r3,r2
    8d44:	b0800115 	stw	r2,4(r22)
    8d48:	b4000015 	stw	r16,0(r22)
    8d4c:	d8c02015 	stw	r3,128(sp)
    8d50:	dc401f15 	stw	r17,124(sp)
    8d54:	008001c4 	movi	r2,7
    8d58:	14414316 	blt	r2,r17,9268 <___vfprintf_internal_r+0x168c>
    8d5c:	b5800204 	addi	r22,r22,8
    8d60:	d9003a17 	ldw	r4,232(sp)
    8d64:	df0022c4 	addi	fp,sp,139
    8d68:	8c400044 	addi	r17,r17,1
    8d6c:	20c7883a 	add	r3,r4,r3
    8d70:	b7000015 	stw	fp,0(r22)
    8d74:	b1000115 	stw	r4,4(r22)
    8d78:	d8c02015 	stw	r3,128(sp)
    8d7c:	dc401f15 	stw	r17,124(sp)
    8d80:	008001c4 	movi	r2,7
    8d84:	14400e16 	blt	r2,r17,8dc0 <___vfprintf_internal_r+0x11e4>
    8d88:	b2000204 	addi	r8,r22,8
    8d8c:	003e1806 	br	85f0 <__alt_exception_stack_pointer+0xf80085f0>
    8d90:	01000074 	movhi	r4,1
    8d94:	2119e184 	addi	r4,r4,26502
    8d98:	d9002c15 	stw	r4,176(sp)
    8d9c:	d9002c17 	ldw	r4,176(sp)
    8da0:	1c07883a 	add	r3,r3,r16
    8da4:	44000115 	stw	r16,4(r8)
    8da8:	41000015 	stw	r4,0(r8)
    8dac:	10800044 	addi	r2,r2,1
    8db0:	d8c02015 	stw	r3,128(sp)
    8db4:	d8801f15 	stw	r2,124(sp)
    8db8:	010001c4 	movi	r4,7
    8dbc:	20be0b0e 	bge	r4,r2,85ec <__alt_exception_stack_pointer+0xf80085ec>
    8dc0:	d9002d17 	ldw	r4,180(sp)
    8dc4:	d9801e04 	addi	r6,sp,120
    8dc8:	b80b883a 	mov	r5,r23
    8dcc:	000eb5c0 	call	eb5c <__sprint_r>
    8dd0:	103c861e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8dd4:	d8c02017 	ldw	r3,128(sp)
    8dd8:	da000404 	addi	r8,sp,16
    8ddc:	003e0406 	br	85f0 <__alt_exception_stack_pointer+0xf80085f0>
    8de0:	d9002d17 	ldw	r4,180(sp)
    8de4:	d9801e04 	addi	r6,sp,120
    8de8:	b80b883a 	mov	r5,r23
    8dec:	000eb5c0 	call	eb5c <__sprint_r>
    8df0:	103e3b26 	beq	r2,zero,86e0 <__alt_exception_stack_pointer+0xf80086e0>
    8df4:	003c7d06 	br	7fec <__alt_exception_stack_pointer+0xf8007fec>
    8df8:	d9002d17 	ldw	r4,180(sp)
    8dfc:	d9801e04 	addi	r6,sp,120
    8e00:	b80b883a 	mov	r5,r23
    8e04:	000eb5c0 	call	eb5c <__sprint_r>
    8e08:	103c781e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8e0c:	d8c02017 	ldw	r3,128(sp)
    8e10:	da000404 	addi	r8,sp,16
    8e14:	003de906 	br	85bc <__alt_exception_stack_pointer+0xf80085bc>
    8e18:	d9002d17 	ldw	r4,180(sp)
    8e1c:	d9801e04 	addi	r6,sp,120
    8e20:	b80b883a 	mov	r5,r23
    8e24:	000eb5c0 	call	eb5c <__sprint_r>
    8e28:	103c701e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8e2c:	d8c02017 	ldw	r3,128(sp)
    8e30:	da000404 	addi	r8,sp,16
    8e34:	003d9b06 	br	84a4 <__alt_exception_stack_pointer+0xf80084a4>
    8e38:	d9002d17 	ldw	r4,180(sp)
    8e3c:	d9801e04 	addi	r6,sp,120
    8e40:	b80b883a 	mov	r5,r23
    8e44:	000eb5c0 	call	eb5c <__sprint_r>
    8e48:	103c681e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8e4c:	d8c02017 	ldw	r3,128(sp)
    8e50:	da000404 	addi	r8,sp,16
    8e54:	003da106 	br	84dc <__alt_exception_stack_pointer+0xf80084dc>
    8e58:	d9402a17 	ldw	r5,168(sp)
    8e5c:	d8002785 	stb	zero,158(sp)
    8e60:	283f0616 	blt	r5,zero,8a7c <__alt_exception_stack_pointer+0xf8008a7c>
    8e64:	00ffdfc4 	movi	r3,-129
    8e68:	9d84b03a 	or	r2,r19,r22
    8e6c:	90e4703a 	and	r18,r18,r3
    8e70:	103c3b26 	beq	r2,zero,7f60 <__alt_exception_stack_pointer+0xf8007f60>
    8e74:	0039883a 	mov	fp,zero
    8e78:	003e5806 	br	87dc <__alt_exception_stack_pointer+0xf80087dc>
    8e7c:	9080040c 	andi	r2,r18,16
    8e80:	1001b326 	beq	r2,zero,9550 <___vfprintf_internal_r+0x1974>
    8e84:	d8c02e17 	ldw	r3,184(sp)
    8e88:	d9002a17 	ldw	r4,168(sp)
    8e8c:	d8002785 	stb	zero,158(sp)
    8e90:	18800104 	addi	r2,r3,4
    8e94:	1cc00017 	ldw	r19,0(r3)
    8e98:	002d883a 	mov	r22,zero
    8e9c:	2001b516 	blt	r4,zero,9574 <___vfprintf_internal_r+0x1998>
    8ea0:	00ffdfc4 	movi	r3,-129
    8ea4:	d8802e15 	stw	r2,184(sp)
    8ea8:	90e4703a 	and	r18,r18,r3
    8eac:	983d0526 	beq	r19,zero,82c4 <__alt_exception_stack_pointer+0xf80082c4>
    8eb0:	0039883a 	mov	fp,zero
    8eb4:	003d0806 	br	82d8 <__alt_exception_stack_pointer+0xf80082d8>
    8eb8:	dc402617 	ldw	r17,152(sp)
    8ebc:	0441d30e 	bge	zero,r17,960c <___vfprintf_internal_r+0x1a30>
    8ec0:	dc403217 	ldw	r17,200(sp)
    8ec4:	d8803317 	ldw	r2,204(sp)
    8ec8:	1440010e 	bge	r2,r17,8ed0 <___vfprintf_internal_r+0x12f4>
    8ecc:	1023883a 	mov	r17,r2
    8ed0:	04400a0e 	bge	zero,r17,8efc <___vfprintf_internal_r+0x1320>
    8ed4:	d8801f17 	ldw	r2,124(sp)
    8ed8:	1c47883a 	add	r3,r3,r17
    8edc:	44000015 	stw	r16,0(r8)
    8ee0:	10800044 	addi	r2,r2,1
    8ee4:	44400115 	stw	r17,4(r8)
    8ee8:	d8c02015 	stw	r3,128(sp)
    8eec:	d8801f15 	stw	r2,124(sp)
    8ef0:	010001c4 	movi	r4,7
    8ef4:	20826516 	blt	r4,r2,988c <___vfprintf_internal_r+0x1cb0>
    8ef8:	42000204 	addi	r8,r8,8
    8efc:	88026116 	blt	r17,zero,9884 <___vfprintf_internal_r+0x1ca8>
    8f00:	d9003217 	ldw	r4,200(sp)
    8f04:	2463c83a 	sub	r17,r4,r17
    8f08:	04407b0e 	bge	zero,r17,90f8 <___vfprintf_internal_r+0x151c>
    8f0c:	05800404 	movi	r22,16
    8f10:	d8801f17 	ldw	r2,124(sp)
    8f14:	b4419d0e 	bge	r22,r17,958c <___vfprintf_internal_r+0x19b0>
    8f18:	01000074 	movhi	r4,1
    8f1c:	2119e184 	addi	r4,r4,26502
    8f20:	d9002c15 	stw	r4,176(sp)
    8f24:	070001c4 	movi	fp,7
    8f28:	dcc02d17 	ldw	r19,180(sp)
    8f2c:	00000306 	br	8f3c <___vfprintf_internal_r+0x1360>
    8f30:	42000204 	addi	r8,r8,8
    8f34:	8c7ffc04 	addi	r17,r17,-16
    8f38:	b441970e 	bge	r22,r17,9598 <___vfprintf_internal_r+0x19bc>
    8f3c:	18c00404 	addi	r3,r3,16
    8f40:	10800044 	addi	r2,r2,1
    8f44:	45000015 	stw	r20,0(r8)
    8f48:	45800115 	stw	r22,4(r8)
    8f4c:	d8c02015 	stw	r3,128(sp)
    8f50:	d8801f15 	stw	r2,124(sp)
    8f54:	e0bff60e 	bge	fp,r2,8f30 <__alt_exception_stack_pointer+0xf8008f30>
    8f58:	d9801e04 	addi	r6,sp,120
    8f5c:	b80b883a 	mov	r5,r23
    8f60:	9809883a 	mov	r4,r19
    8f64:	000eb5c0 	call	eb5c <__sprint_r>
    8f68:	103c201e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8f6c:	d8c02017 	ldw	r3,128(sp)
    8f70:	d8801f17 	ldw	r2,124(sp)
    8f74:	da000404 	addi	r8,sp,16
    8f78:	003fee06 	br	8f34 <__alt_exception_stack_pointer+0xf8008f34>
    8f7c:	d9002d17 	ldw	r4,180(sp)
    8f80:	d9801e04 	addi	r6,sp,120
    8f84:	b80b883a 	mov	r5,r23
    8f88:	000eb5c0 	call	eb5c <__sprint_r>
    8f8c:	103c171e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    8f90:	d8c02017 	ldw	r3,128(sp)
    8f94:	df002787 	ldb	fp,158(sp)
    8f98:	da000404 	addi	r8,sp,16
    8f9c:	003d3406 	br	8470 <__alt_exception_stack_pointer+0xf8008470>
    8fa0:	9080040c 	andi	r2,r18,16
    8fa4:	10016126 	beq	r2,zero,952c <___vfprintf_internal_r+0x1950>
    8fa8:	d9402e17 	ldw	r5,184(sp)
    8fac:	2cc00017 	ldw	r19,0(r5)
    8fb0:	29400104 	addi	r5,r5,4
    8fb4:	d9402e15 	stw	r5,184(sp)
    8fb8:	982dd7fa 	srai	r22,r19,31
    8fbc:	b005883a 	mov	r2,r22
    8fc0:	003c5a06 	br	812c <__alt_exception_stack_pointer+0xf800812c>
    8fc4:	9080040c 	andi	r2,r18,16
    8fc8:	10003526 	beq	r2,zero,90a0 <___vfprintf_internal_r+0x14c4>
    8fcc:	d8c02e17 	ldw	r3,184(sp)
    8fd0:	d9002a17 	ldw	r4,168(sp)
    8fd4:	d8002785 	stb	zero,158(sp)
    8fd8:	18800104 	addi	r2,r3,4
    8fdc:	1cc00017 	ldw	r19,0(r3)
    8fe0:	002d883a 	mov	r22,zero
    8fe4:	20003716 	blt	r4,zero,90c4 <___vfprintf_internal_r+0x14e8>
    8fe8:	00ffdfc4 	movi	r3,-129
    8fec:	d8802e15 	stw	r2,184(sp)
    8ff0:	90e4703a 	and	r18,r18,r3
    8ff4:	0039883a 	mov	fp,zero
    8ff8:	983dd426 	beq	r19,zero,874c <__alt_exception_stack_pointer+0xf800874c>
    8ffc:	00800244 	movi	r2,9
    9000:	14fc5336 	bltu	r2,r19,8150 <__alt_exception_stack_pointer+0xf8008150>
    9004:	d8c02817 	ldw	r3,160(sp)
    9008:	dc001dc4 	addi	r16,sp,119
    900c:	9cc00c04 	addi	r19,r19,48
    9010:	1c07c83a 	sub	r3,r3,r16
    9014:	dcc01dc5 	stb	r19,119(sp)
    9018:	d8c02b15 	stw	r3,172(sp)
    901c:	003cc606 	br	8338 <__alt_exception_stack_pointer+0xf8008338>
    9020:	d8803317 	ldw	r2,204(sp)
    9024:	143fffc4 	addi	r16,r2,-1
    9028:	043f4d0e 	bge	zero,r16,8d60 <__alt_exception_stack_pointer+0xf8008d60>
    902c:	07000404 	movi	fp,16
    9030:	e400810e 	bge	fp,r16,9238 <___vfprintf_internal_r+0x165c>
    9034:	01400074 	movhi	r5,1
    9038:	2959e184 	addi	r5,r5,26502
    903c:	d9402c15 	stw	r5,176(sp)
    9040:	01c001c4 	movi	r7,7
    9044:	dcc02d17 	ldw	r19,180(sp)
    9048:	00000306 	br	9058 <___vfprintf_internal_r+0x147c>
    904c:	b5800204 	addi	r22,r22,8
    9050:	843ffc04 	addi	r16,r16,-16
    9054:	e4007b0e 	bge	fp,r16,9244 <___vfprintf_internal_r+0x1668>
    9058:	18c00404 	addi	r3,r3,16
    905c:	8c400044 	addi	r17,r17,1
    9060:	b5000015 	stw	r20,0(r22)
    9064:	b7000115 	stw	fp,4(r22)
    9068:	d8c02015 	stw	r3,128(sp)
    906c:	dc401f15 	stw	r17,124(sp)
    9070:	3c7ff60e 	bge	r7,r17,904c <__alt_exception_stack_pointer+0xf800904c>
    9074:	d9801e04 	addi	r6,sp,120
    9078:	b80b883a 	mov	r5,r23
    907c:	9809883a 	mov	r4,r19
    9080:	d9c03c15 	stw	r7,240(sp)
    9084:	000eb5c0 	call	eb5c <__sprint_r>
    9088:	d9c03c17 	ldw	r7,240(sp)
    908c:	103bd71e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    9090:	d8c02017 	ldw	r3,128(sp)
    9094:	dc401f17 	ldw	r17,124(sp)
    9098:	dd800404 	addi	r22,sp,16
    909c:	003fec06 	br	9050 <__alt_exception_stack_pointer+0xf8009050>
    90a0:	9080100c 	andi	r2,r18,64
    90a4:	d8002785 	stb	zero,158(sp)
    90a8:	10010e26 	beq	r2,zero,94e4 <___vfprintf_internal_r+0x1908>
    90ac:	d9402e17 	ldw	r5,184(sp)
    90b0:	d8c02a17 	ldw	r3,168(sp)
    90b4:	002d883a 	mov	r22,zero
    90b8:	28800104 	addi	r2,r5,4
    90bc:	2cc0000b 	ldhu	r19,0(r5)
    90c0:	183fc90e 	bge	r3,zero,8fe8 <__alt_exception_stack_pointer+0xf8008fe8>
    90c4:	d8802e15 	stw	r2,184(sp)
    90c8:	0039883a 	mov	fp,zero
    90cc:	9d84b03a 	or	r2,r19,r22
    90d0:	103c1e1e 	bne	r2,zero,814c <__alt_exception_stack_pointer+0xf800814c>
    90d4:	00800044 	movi	r2,1
    90d8:	003e6c06 	br	8a8c <__alt_exception_stack_pointer+0xf8008a8c>
    90dc:	d9002d17 	ldw	r4,180(sp)
    90e0:	d9801e04 	addi	r6,sp,120
    90e4:	b80b883a 	mov	r5,r23
    90e8:	000eb5c0 	call	eb5c <__sprint_r>
    90ec:	103bbf1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    90f0:	d8c02017 	ldw	r3,128(sp)
    90f4:	da000404 	addi	r8,sp,16
    90f8:	d9003217 	ldw	r4,200(sp)
    90fc:	d8802617 	ldw	r2,152(sp)
    9100:	d9403317 	ldw	r5,204(sp)
    9104:	8123883a 	add	r17,r16,r4
    9108:	11400216 	blt	r2,r5,9114 <___vfprintf_internal_r+0x1538>
    910c:	9100004c 	andi	r4,r18,1
    9110:	20000d26 	beq	r4,zero,9148 <___vfprintf_internal_r+0x156c>
    9114:	d9003717 	ldw	r4,220(sp)
    9118:	d9403417 	ldw	r5,208(sp)
    911c:	1907883a 	add	r3,r3,r4
    9120:	d9001f17 	ldw	r4,124(sp)
    9124:	41400015 	stw	r5,0(r8)
    9128:	d9403717 	ldw	r5,220(sp)
    912c:	21000044 	addi	r4,r4,1
    9130:	d8c02015 	stw	r3,128(sp)
    9134:	41400115 	stw	r5,4(r8)
    9138:	d9001f15 	stw	r4,124(sp)
    913c:	014001c4 	movi	r5,7
    9140:	2901e816 	blt	r5,r4,98e4 <___vfprintf_internal_r+0x1d08>
    9144:	42000204 	addi	r8,r8,8
    9148:	d9003317 	ldw	r4,204(sp)
    914c:	8121883a 	add	r16,r16,r4
    9150:	2085c83a 	sub	r2,r4,r2
    9154:	8461c83a 	sub	r16,r16,r17
    9158:	1400010e 	bge	r2,r16,9160 <___vfprintf_internal_r+0x1584>
    915c:	1021883a 	mov	r16,r2
    9160:	04000a0e 	bge	zero,r16,918c <___vfprintf_internal_r+0x15b0>
    9164:	d9001f17 	ldw	r4,124(sp)
    9168:	1c07883a 	add	r3,r3,r16
    916c:	44400015 	stw	r17,0(r8)
    9170:	21000044 	addi	r4,r4,1
    9174:	44000115 	stw	r16,4(r8)
    9178:	d8c02015 	stw	r3,128(sp)
    917c:	d9001f15 	stw	r4,124(sp)
    9180:	014001c4 	movi	r5,7
    9184:	2901fb16 	blt	r5,r4,9974 <___vfprintf_internal_r+0x1d98>
    9188:	42000204 	addi	r8,r8,8
    918c:	8001f716 	blt	r16,zero,996c <___vfprintf_internal_r+0x1d90>
    9190:	1421c83a 	sub	r16,r2,r16
    9194:	043d160e 	bge	zero,r16,85f0 <__alt_exception_stack_pointer+0xf80085f0>
    9198:	04400404 	movi	r17,16
    919c:	d8801f17 	ldw	r2,124(sp)
    91a0:	8c3efb0e 	bge	r17,r16,8d90 <__alt_exception_stack_pointer+0xf8008d90>
    91a4:	01400074 	movhi	r5,1
    91a8:	2959e184 	addi	r5,r5,26502
    91ac:	d9402c15 	stw	r5,176(sp)
    91b0:	058001c4 	movi	r22,7
    91b4:	dcc02d17 	ldw	r19,180(sp)
    91b8:	00000306 	br	91c8 <___vfprintf_internal_r+0x15ec>
    91bc:	42000204 	addi	r8,r8,8
    91c0:	843ffc04 	addi	r16,r16,-16
    91c4:	8c3ef50e 	bge	r17,r16,8d9c <__alt_exception_stack_pointer+0xf8008d9c>
    91c8:	18c00404 	addi	r3,r3,16
    91cc:	10800044 	addi	r2,r2,1
    91d0:	45000015 	stw	r20,0(r8)
    91d4:	44400115 	stw	r17,4(r8)
    91d8:	d8c02015 	stw	r3,128(sp)
    91dc:	d8801f15 	stw	r2,124(sp)
    91e0:	b0bff60e 	bge	r22,r2,91bc <__alt_exception_stack_pointer+0xf80091bc>
    91e4:	d9801e04 	addi	r6,sp,120
    91e8:	b80b883a 	mov	r5,r23
    91ec:	9809883a 	mov	r4,r19
    91f0:	000eb5c0 	call	eb5c <__sprint_r>
    91f4:	103b7d1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    91f8:	d8c02017 	ldw	r3,128(sp)
    91fc:	d8801f17 	ldw	r2,124(sp)
    9200:	da000404 	addi	r8,sp,16
    9204:	003fee06 	br	91c0 <__alt_exception_stack_pointer+0xf80091c0>
    9208:	9088703a 	and	r4,r18,r2
    920c:	203eab1e 	bne	r4,zero,8cbc <__alt_exception_stack_pointer+0xf8008cbc>
    9210:	dc401f17 	ldw	r17,124(sp)
    9214:	40800115 	stw	r2,4(r8)
    9218:	44000015 	stw	r16,0(r8)
    921c:	8c400044 	addi	r17,r17,1
    9220:	d8c02015 	stw	r3,128(sp)
    9224:	dc401f15 	stw	r17,124(sp)
    9228:	008001c4 	movi	r2,7
    922c:	14400e16 	blt	r2,r17,9268 <___vfprintf_internal_r+0x168c>
    9230:	45800204 	addi	r22,r8,8
    9234:	003eca06 	br	8d60 <__alt_exception_stack_pointer+0xf8008d60>
    9238:	01000074 	movhi	r4,1
    923c:	2119e184 	addi	r4,r4,26502
    9240:	d9002c15 	stw	r4,176(sp)
    9244:	d8802c17 	ldw	r2,176(sp)
    9248:	1c07883a 	add	r3,r3,r16
    924c:	8c400044 	addi	r17,r17,1
    9250:	b0800015 	stw	r2,0(r22)
    9254:	b4000115 	stw	r16,4(r22)
    9258:	d8c02015 	stw	r3,128(sp)
    925c:	dc401f15 	stw	r17,124(sp)
    9260:	008001c4 	movi	r2,7
    9264:	147ebd0e 	bge	r2,r17,8d5c <__alt_exception_stack_pointer+0xf8008d5c>
    9268:	d9002d17 	ldw	r4,180(sp)
    926c:	d9801e04 	addi	r6,sp,120
    9270:	b80b883a 	mov	r5,r23
    9274:	000eb5c0 	call	eb5c <__sprint_r>
    9278:	103b5c1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    927c:	d8c02017 	ldw	r3,128(sp)
    9280:	dc401f17 	ldw	r17,124(sp)
    9284:	dd800404 	addi	r22,sp,16
    9288:	003eb506 	br	8d60 <__alt_exception_stack_pointer+0xf8008d60>
    928c:	d9002d17 	ldw	r4,180(sp)
    9290:	d9801e04 	addi	r6,sp,120
    9294:	b80b883a 	mov	r5,r23
    9298:	000eb5c0 	call	eb5c <__sprint_r>
    929c:	103b531e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    92a0:	d8c02017 	ldw	r3,128(sp)
    92a4:	dc401f17 	ldw	r17,124(sp)
    92a8:	da000404 	addi	r8,sp,16
    92ac:	003e8d06 	br	8ce4 <__alt_exception_stack_pointer+0xf8008ce4>
    92b0:	d9002d17 	ldw	r4,180(sp)
    92b4:	d9801e04 	addi	r6,sp,120
    92b8:	b80b883a 	mov	r5,r23
    92bc:	000eb5c0 	call	eb5c <__sprint_r>
    92c0:	103b4a1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    92c4:	d8c02017 	ldw	r3,128(sp)
    92c8:	dc401f17 	ldw	r17,124(sp)
    92cc:	dd800404 	addi	r22,sp,16
    92d0:	003e8f06 	br	8d10 <__alt_exception_stack_pointer+0xf8008d10>
    92d4:	0027883a 	mov	r19,zero
    92d8:	003f4a06 	br	9004 <__alt_exception_stack_pointer+0xf8009004>
    92dc:	d9002d17 	ldw	r4,180(sp)
    92e0:	d9801e04 	addi	r6,sp,120
    92e4:	b80b883a 	mov	r5,r23
    92e8:	000eb5c0 	call	eb5c <__sprint_r>
    92ec:	103b3f1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    92f0:	d8c02017 	ldw	r3,128(sp)
    92f4:	da000404 	addi	r8,sp,16
    92f8:	003c7b06 	br	84e8 <__alt_exception_stack_pointer+0xf80084e8>
    92fc:	d9402a17 	ldw	r5,168(sp)
    9300:	04e7c83a 	sub	r19,zero,r19
    9304:	07000b44 	movi	fp,45
    9308:	9804c03a 	cmpne	r2,r19,zero
    930c:	05adc83a 	sub	r22,zero,r22
    9310:	df002785 	stb	fp,158(sp)
    9314:	b0adc83a 	sub	r22,r22,r2
    9318:	28017b16 	blt	r5,zero,9908 <___vfprintf_internal_r+0x1d2c>
    931c:	00bfdfc4 	movi	r2,-129
    9320:	90a4703a 	and	r18,r18,r2
    9324:	003b8906 	br	814c <__alt_exception_stack_pointer+0xf800814c>
    9328:	d9003617 	ldw	r4,216(sp)
    932c:	d9403817 	ldw	r5,224(sp)
    9330:	da003d15 	stw	r8,244(sp)
    9334:	000e7d40 	call	e7d4 <__fpclassifyd>
    9338:	da003d17 	ldw	r8,244(sp)
    933c:	1000f026 	beq	r2,zero,9700 <___vfprintf_internal_r+0x1b24>
    9340:	d9002a17 	ldw	r4,168(sp)
    9344:	05bff7c4 	movi	r22,-33
    9348:	00bfffc4 	movi	r2,-1
    934c:	8dac703a 	and	r22,r17,r22
    9350:	20820026 	beq	r4,r2,9b54 <___vfprintf_internal_r+0x1f78>
    9354:	008011c4 	movi	r2,71
    9358:	b081f726 	beq	r22,r2,9b38 <___vfprintf_internal_r+0x1f5c>
    935c:	d9003817 	ldw	r4,224(sp)
    9360:	90c04014 	ori	r3,r18,256
    9364:	d8c02c15 	stw	r3,176(sp)
    9368:	20021516 	blt	r4,zero,9bc0 <___vfprintf_internal_r+0x1fe4>
    936c:	dcc03817 	ldw	r19,224(sp)
    9370:	d8002905 	stb	zero,164(sp)
    9374:	00801984 	movi	r2,102
    9378:	8881f926 	beq	r17,r2,9b60 <___vfprintf_internal_r+0x1f84>
    937c:	00801184 	movi	r2,70
    9380:	88821c26 	beq	r17,r2,9bf4 <___vfprintf_internal_r+0x2018>
    9384:	00801144 	movi	r2,69
    9388:	b081ef26 	beq	r22,r2,9b48 <___vfprintf_internal_r+0x1f6c>
    938c:	d8c02a17 	ldw	r3,168(sp)
    9390:	d8802104 	addi	r2,sp,132
    9394:	d8800315 	stw	r2,12(sp)
    9398:	d9403617 	ldw	r5,216(sp)
    939c:	d8802504 	addi	r2,sp,148
    93a0:	d9002d17 	ldw	r4,180(sp)
    93a4:	d8800215 	stw	r2,8(sp)
    93a8:	d8802604 	addi	r2,sp,152
    93ac:	d8c00015 	stw	r3,0(sp)
    93b0:	d8800115 	stw	r2,4(sp)
    93b4:	01c00084 	movi	r7,2
    93b8:	980d883a 	mov	r6,r19
    93bc:	d8c03c15 	stw	r3,240(sp)
    93c0:	da003d15 	stw	r8,244(sp)
    93c4:	000a30c0 	call	a30c <_dtoa_r>
    93c8:	1021883a 	mov	r16,r2
    93cc:	008019c4 	movi	r2,103
    93d0:	d8c03c17 	ldw	r3,240(sp)
    93d4:	da003d17 	ldw	r8,244(sp)
    93d8:	88817126 	beq	r17,r2,99a0 <___vfprintf_internal_r+0x1dc4>
    93dc:	008011c4 	movi	r2,71
    93e0:	88829126 	beq	r17,r2,9e28 <___vfprintf_internal_r+0x224c>
    93e4:	80f9883a 	add	fp,r16,r3
    93e8:	d9003617 	ldw	r4,216(sp)
    93ec:	000d883a 	mov	r6,zero
    93f0:	000f883a 	mov	r7,zero
    93f4:	980b883a 	mov	r5,r19
    93f8:	da003d15 	stw	r8,244(sp)
    93fc:	0005c9c0 	call	5c9c <__eqdf2>
    9400:	da003d17 	ldw	r8,244(sp)
    9404:	10018d26 	beq	r2,zero,9a3c <___vfprintf_internal_r+0x1e60>
    9408:	d8802117 	ldw	r2,132(sp)
    940c:	1700062e 	bgeu	r2,fp,9428 <___vfprintf_internal_r+0x184c>
    9410:	01000c04 	movi	r4,48
    9414:	10c00044 	addi	r3,r2,1
    9418:	d8c02115 	stw	r3,132(sp)
    941c:	11000005 	stb	r4,0(r2)
    9420:	d8802117 	ldw	r2,132(sp)
    9424:	173ffb36 	bltu	r2,fp,9414 <__alt_exception_stack_pointer+0xf8009414>
    9428:	1405c83a 	sub	r2,r2,r16
    942c:	d8803315 	stw	r2,204(sp)
    9430:	008011c4 	movi	r2,71
    9434:	b0817626 	beq	r22,r2,9a10 <___vfprintf_internal_r+0x1e34>
    9438:	00801944 	movi	r2,101
    943c:	1442800e 	bge	r2,r17,9e40 <___vfprintf_internal_r+0x2264>
    9440:	d8c02617 	ldw	r3,152(sp)
    9444:	00801984 	movi	r2,102
    9448:	d8c03215 	stw	r3,200(sp)
    944c:	8881fe26 	beq	r17,r2,9c48 <___vfprintf_internal_r+0x206c>
    9450:	d8c03217 	ldw	r3,200(sp)
    9454:	d9003317 	ldw	r4,204(sp)
    9458:	1901dd16 	blt	r3,r4,9bd0 <___vfprintf_internal_r+0x1ff4>
    945c:	9480004c 	andi	r18,r18,1
    9460:	90022b1e 	bne	r18,zero,9d10 <___vfprintf_internal_r+0x2134>
    9464:	1805883a 	mov	r2,r3
    9468:	18028316 	blt	r3,zero,9e78 <___vfprintf_internal_r+0x229c>
    946c:	d8c03217 	ldw	r3,200(sp)
    9470:	044019c4 	movi	r17,103
    9474:	d8c02b15 	stw	r3,172(sp)
    9478:	df002907 	ldb	fp,164(sp)
    947c:	e001531e 	bne	fp,zero,99cc <___vfprintf_internal_r+0x1df0>
    9480:	df002783 	ldbu	fp,158(sp)
    9484:	d8802915 	stw	r2,164(sp)
    9488:	dc802c17 	ldw	r18,176(sp)
    948c:	d8002a15 	stw	zero,168(sp)
    9490:	003baf06 	br	8350 <__alt_exception_stack_pointer+0xf8008350>
    9494:	d8c02e17 	ldw	r3,184(sp)
    9498:	d9002e17 	ldw	r4,184(sp)
    949c:	d9402e17 	ldw	r5,184(sp)
    94a0:	18c00017 	ldw	r3,0(r3)
    94a4:	21000117 	ldw	r4,4(r4)
    94a8:	29400204 	addi	r5,r5,8
    94ac:	d8c03615 	stw	r3,216(sp)
    94b0:	d9003815 	stw	r4,224(sp)
    94b4:	d9402e15 	stw	r5,184(sp)
    94b8:	003b5006 	br	81fc <__alt_exception_stack_pointer+0xf80081fc>
    94bc:	ac400007 	ldb	r17,0(r21)
    94c0:	003a2806 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    94c4:	9080100c 	andi	r2,r18,64
    94c8:	1000a826 	beq	r2,zero,976c <___vfprintf_internal_r+0x1b90>
    94cc:	d8c02e17 	ldw	r3,184(sp)
    94d0:	002d883a 	mov	r22,zero
    94d4:	1cc0000b 	ldhu	r19,0(r3)
    94d8:	18c00104 	addi	r3,r3,4
    94dc:	d8c02e15 	stw	r3,184(sp)
    94e0:	003caf06 	br	87a0 <__alt_exception_stack_pointer+0xf80087a0>
    94e4:	d9002e17 	ldw	r4,184(sp)
    94e8:	d9402a17 	ldw	r5,168(sp)
    94ec:	002d883a 	mov	r22,zero
    94f0:	20800104 	addi	r2,r4,4
    94f4:	24c00017 	ldw	r19,0(r4)
    94f8:	283ebb0e 	bge	r5,zero,8fe8 <__alt_exception_stack_pointer+0xf8008fe8>
    94fc:	003ef106 	br	90c4 <__alt_exception_stack_pointer+0xf80090c4>
    9500:	9080040c 	andi	r2,r18,16
    9504:	1000921e 	bne	r2,zero,9750 <___vfprintf_internal_r+0x1b74>
    9508:	9480100c 	andi	r18,r18,64
    950c:	90013926 	beq	r18,zero,99f4 <___vfprintf_internal_r+0x1e18>
    9510:	d9402e17 	ldw	r5,184(sp)
    9514:	d8c02f17 	ldw	r3,188(sp)
    9518:	28800017 	ldw	r2,0(r5)
    951c:	29400104 	addi	r5,r5,4
    9520:	d9402e15 	stw	r5,184(sp)
    9524:	10c0000d 	sth	r3,0(r2)
    9528:	0039e406 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    952c:	9080100c 	andi	r2,r18,64
    9530:	10008026 	beq	r2,zero,9734 <___vfprintf_internal_r+0x1b58>
    9534:	d8802e17 	ldw	r2,184(sp)
    9538:	14c0000f 	ldh	r19,0(r2)
    953c:	10800104 	addi	r2,r2,4
    9540:	d8802e15 	stw	r2,184(sp)
    9544:	982dd7fa 	srai	r22,r19,31
    9548:	b005883a 	mov	r2,r22
    954c:	003af706 	br	812c <__alt_exception_stack_pointer+0xf800812c>
    9550:	9080100c 	andi	r2,r18,64
    9554:	d8002785 	stb	zero,158(sp)
    9558:	10008a1e 	bne	r2,zero,9784 <___vfprintf_internal_r+0x1ba8>
    955c:	d9002e17 	ldw	r4,184(sp)
    9560:	d9402a17 	ldw	r5,168(sp)
    9564:	002d883a 	mov	r22,zero
    9568:	20800104 	addi	r2,r4,4
    956c:	24c00017 	ldw	r19,0(r4)
    9570:	283e4b0e 	bge	r5,zero,8ea0 <__alt_exception_stack_pointer+0xf8008ea0>
    9574:	9d86b03a 	or	r3,r19,r22
    9578:	d8802e15 	stw	r2,184(sp)
    957c:	183e4c1e 	bne	r3,zero,8eb0 <__alt_exception_stack_pointer+0xf8008eb0>
    9580:	0039883a 	mov	fp,zero
    9584:	0005883a 	mov	r2,zero
    9588:	003d4006 	br	8a8c <__alt_exception_stack_pointer+0xf8008a8c>
    958c:	01400074 	movhi	r5,1
    9590:	2959e184 	addi	r5,r5,26502
    9594:	d9402c15 	stw	r5,176(sp)
    9598:	d9402c17 	ldw	r5,176(sp)
    959c:	1c47883a 	add	r3,r3,r17
    95a0:	10800044 	addi	r2,r2,1
    95a4:	41400015 	stw	r5,0(r8)
    95a8:	44400115 	stw	r17,4(r8)
    95ac:	d8c02015 	stw	r3,128(sp)
    95b0:	d8801f15 	stw	r2,124(sp)
    95b4:	010001c4 	movi	r4,7
    95b8:	20bec816 	blt	r4,r2,90dc <__alt_exception_stack_pointer+0xf80090dc>
    95bc:	42000204 	addi	r8,r8,8
    95c0:	003ecd06 	br	90f8 <__alt_exception_stack_pointer+0xf80090f8>
    95c4:	d9002a17 	ldw	r4,168(sp)
    95c8:	d8002785 	stb	zero,158(sp)
    95cc:	203d2d16 	blt	r4,zero,8a84 <__alt_exception_stack_pointer+0xf8008a84>
    95d0:	00bfdfc4 	movi	r2,-129
    95d4:	90a4703a 	and	r18,r18,r2
    95d8:	003a6106 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    95dc:	01000074 	movhi	r4,1
    95e0:	2119e184 	addi	r4,r4,26502
    95e4:	d9002c15 	stw	r4,176(sp)
    95e8:	003bea06 	br	8594 <__alt_exception_stack_pointer+0xf8008594>
    95ec:	d9002d17 	ldw	r4,180(sp)
    95f0:	d9801e04 	addi	r6,sp,120
    95f4:	b80b883a 	mov	r5,r23
    95f8:	000eb5c0 	call	eb5c <__sprint_r>
    95fc:	103a7b1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    9600:	d8c02017 	ldw	r3,128(sp)
    9604:	da000404 	addi	r8,sp,16
    9608:	003d4106 	br	8b10 <__alt_exception_stack_pointer+0xf8008b10>
    960c:	d8801f17 	ldw	r2,124(sp)
    9610:	01400074 	movhi	r5,1
    9614:	01000044 	movi	r4,1
    9618:	18c00044 	addi	r3,r3,1
    961c:	10800044 	addi	r2,r2,1
    9620:	2959e104 	addi	r5,r5,26500
    9624:	41000115 	stw	r4,4(r8)
    9628:	41400015 	stw	r5,0(r8)
    962c:	d8c02015 	stw	r3,128(sp)
    9630:	d8801f15 	stw	r2,124(sp)
    9634:	010001c4 	movi	r4,7
    9638:	20805c16 	blt	r4,r2,97ac <___vfprintf_internal_r+0x1bd0>
    963c:	42000204 	addi	r8,r8,8
    9640:	8800041e 	bne	r17,zero,9654 <___vfprintf_internal_r+0x1a78>
    9644:	d8803317 	ldw	r2,204(sp)
    9648:	1000021e 	bne	r2,zero,9654 <___vfprintf_internal_r+0x1a78>
    964c:	9080004c 	andi	r2,r18,1
    9650:	103be726 	beq	r2,zero,85f0 <__alt_exception_stack_pointer+0xf80085f0>
    9654:	d9003717 	ldw	r4,220(sp)
    9658:	d8801f17 	ldw	r2,124(sp)
    965c:	d9403417 	ldw	r5,208(sp)
    9660:	20c7883a 	add	r3,r4,r3
    9664:	10800044 	addi	r2,r2,1
    9668:	41000115 	stw	r4,4(r8)
    966c:	41400015 	stw	r5,0(r8)
    9670:	d8c02015 	stw	r3,128(sp)
    9674:	d8801f15 	stw	r2,124(sp)
    9678:	010001c4 	movi	r4,7
    967c:	20812116 	blt	r4,r2,9b04 <___vfprintf_internal_r+0x1f28>
    9680:	42000204 	addi	r8,r8,8
    9684:	0463c83a 	sub	r17,zero,r17
    9688:	0440730e 	bge	zero,r17,9858 <___vfprintf_internal_r+0x1c7c>
    968c:	05800404 	movi	r22,16
    9690:	b440860e 	bge	r22,r17,98ac <___vfprintf_internal_r+0x1cd0>
    9694:	01400074 	movhi	r5,1
    9698:	2959e184 	addi	r5,r5,26502
    969c:	d9402c15 	stw	r5,176(sp)
    96a0:	070001c4 	movi	fp,7
    96a4:	dcc02d17 	ldw	r19,180(sp)
    96a8:	00000306 	br	96b8 <___vfprintf_internal_r+0x1adc>
    96ac:	42000204 	addi	r8,r8,8
    96b0:	8c7ffc04 	addi	r17,r17,-16
    96b4:	b440800e 	bge	r22,r17,98b8 <___vfprintf_internal_r+0x1cdc>
    96b8:	18c00404 	addi	r3,r3,16
    96bc:	10800044 	addi	r2,r2,1
    96c0:	45000015 	stw	r20,0(r8)
    96c4:	45800115 	stw	r22,4(r8)
    96c8:	d8c02015 	stw	r3,128(sp)
    96cc:	d8801f15 	stw	r2,124(sp)
    96d0:	e0bff60e 	bge	fp,r2,96ac <__alt_exception_stack_pointer+0xf80096ac>
    96d4:	d9801e04 	addi	r6,sp,120
    96d8:	b80b883a 	mov	r5,r23
    96dc:	9809883a 	mov	r4,r19
    96e0:	000eb5c0 	call	eb5c <__sprint_r>
    96e4:	103a411e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    96e8:	d8c02017 	ldw	r3,128(sp)
    96ec:	d8801f17 	ldw	r2,124(sp)
    96f0:	da000404 	addi	r8,sp,16
    96f4:	003fee06 	br	96b0 <__alt_exception_stack_pointer+0xf80096b0>
    96f8:	00bfffc4 	movi	r2,-1
    96fc:	003a3f06 	br	7ffc <__alt_exception_stack_pointer+0xf8007ffc>
    9700:	008011c4 	movi	r2,71
    9704:	1440b816 	blt	r2,r17,99e8 <___vfprintf_internal_r+0x1e0c>
    9708:	04000074 	movhi	r16,1
    970c:	8419d304 	addi	r16,r16,26444
    9710:	00c000c4 	movi	r3,3
    9714:	00bfdfc4 	movi	r2,-129
    9718:	d8c02915 	stw	r3,164(sp)
    971c:	90a4703a 	and	r18,r18,r2
    9720:	df002783 	ldbu	fp,158(sp)
    9724:	d8c02b15 	stw	r3,172(sp)
    9728:	d8002a15 	stw	zero,168(sp)
    972c:	d8003215 	stw	zero,200(sp)
    9730:	003b0706 	br	8350 <__alt_exception_stack_pointer+0xf8008350>
    9734:	d8c02e17 	ldw	r3,184(sp)
    9738:	1cc00017 	ldw	r19,0(r3)
    973c:	18c00104 	addi	r3,r3,4
    9740:	d8c02e15 	stw	r3,184(sp)
    9744:	982dd7fa 	srai	r22,r19,31
    9748:	b005883a 	mov	r2,r22
    974c:	003a7706 	br	812c <__alt_exception_stack_pointer+0xf800812c>
    9750:	d8c02e17 	ldw	r3,184(sp)
    9754:	d9002f17 	ldw	r4,188(sp)
    9758:	18800017 	ldw	r2,0(r3)
    975c:	18c00104 	addi	r3,r3,4
    9760:	d8c02e15 	stw	r3,184(sp)
    9764:	11000015 	stw	r4,0(r2)
    9768:	00395406 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    976c:	d9002e17 	ldw	r4,184(sp)
    9770:	002d883a 	mov	r22,zero
    9774:	24c00017 	ldw	r19,0(r4)
    9778:	21000104 	addi	r4,r4,4
    977c:	d9002e15 	stw	r4,184(sp)
    9780:	003c0706 	br	87a0 <__alt_exception_stack_pointer+0xf80087a0>
    9784:	d9402e17 	ldw	r5,184(sp)
    9788:	d8c02a17 	ldw	r3,168(sp)
    978c:	002d883a 	mov	r22,zero
    9790:	28800104 	addi	r2,r5,4
    9794:	2cc0000b 	ldhu	r19,0(r5)
    9798:	183dc10e 	bge	r3,zero,8ea0 <__alt_exception_stack_pointer+0xf8008ea0>
    979c:	003f7506 	br	9574 <__alt_exception_stack_pointer+0xf8009574>
    97a0:	04000074 	movhi	r16,1
    97a4:	8419d104 	addi	r16,r16,26436
    97a8:	003aa706 	br	8248 <__alt_exception_stack_pointer+0xf8008248>
    97ac:	d9002d17 	ldw	r4,180(sp)
    97b0:	d9801e04 	addi	r6,sp,120
    97b4:	b80b883a 	mov	r5,r23
    97b8:	000eb5c0 	call	eb5c <__sprint_r>
    97bc:	103a0b1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    97c0:	dc402617 	ldw	r17,152(sp)
    97c4:	d8c02017 	ldw	r3,128(sp)
    97c8:	da000404 	addi	r8,sp,16
    97cc:	003f9c06 	br	9640 <__alt_exception_stack_pointer+0xf8009640>
    97d0:	ac400043 	ldbu	r17,1(r21)
    97d4:	84000814 	ori	r16,r16,32
    97d8:	ad400044 	addi	r21,r21,1
    97dc:	8c403fcc 	andi	r17,r17,255
    97e0:	8c40201c 	xori	r17,r17,128
    97e4:	8c7fe004 	addi	r17,r17,-128
    97e8:	00395e06 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    97ec:	d8c02e15 	stw	r3,184(sp)
    97f0:	0039883a 	mov	fp,zero
    97f4:	003e3506 	br	90cc <__alt_exception_stack_pointer+0xf80090cc>
    97f8:	d9002d17 	ldw	r4,180(sp)
    97fc:	d9801e04 	addi	r6,sp,120
    9800:	b80b883a 	mov	r5,r23
    9804:	000eb5c0 	call	eb5c <__sprint_r>
    9808:	1039f81e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    980c:	d8c02017 	ldw	r3,128(sp)
    9810:	da000404 	addi	r8,sp,16
    9814:	003cd006 	br	8b58 <__alt_exception_stack_pointer+0xf8008b58>
    9818:	8009883a 	mov	r4,r16
    981c:	df003d15 	stw	fp,244(sp)
    9820:	0007b3c0 	call	7b3c <strlen>
    9824:	d8802b15 	stw	r2,172(sp)
    9828:	da003d17 	ldw	r8,244(sp)
    982c:	103c200e 	bge	r2,zero,88b0 <__alt_exception_stack_pointer+0xf80088b0>
    9830:	0005883a 	mov	r2,zero
    9834:	003c1e06 	br	88b0 <__alt_exception_stack_pointer+0xf80088b0>
    9838:	d9002d17 	ldw	r4,180(sp)
    983c:	d9801e04 	addi	r6,sp,120
    9840:	b80b883a 	mov	r5,r23
    9844:	000eb5c0 	call	eb5c <__sprint_r>
    9848:	1039e81e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    984c:	d8c02017 	ldw	r3,128(sp)
    9850:	d8801f17 	ldw	r2,124(sp)
    9854:	da000404 	addi	r8,sp,16
    9858:	d9403317 	ldw	r5,204(sp)
    985c:	10800044 	addi	r2,r2,1
    9860:	44000015 	stw	r16,0(r8)
    9864:	28c7883a 	add	r3,r5,r3
    9868:	003b5b06 	br	85d8 <__alt_exception_stack_pointer+0xf80085d8>
    986c:	01000074 	movhi	r4,1
    9870:	2119e584 	addi	r4,r4,26518
    9874:	d9003515 	stw	r4,212(sp)
    9878:	003af206 	br	8444 <__alt_exception_stack_pointer+0xf8008444>
    987c:	013fffc4 	movi	r4,-1
    9880:	003a0806 	br	80a4 <__alt_exception_stack_pointer+0xf80080a4>
    9884:	0023883a 	mov	r17,zero
    9888:	003d9d06 	br	8f00 <__alt_exception_stack_pointer+0xf8008f00>
    988c:	d9002d17 	ldw	r4,180(sp)
    9890:	d9801e04 	addi	r6,sp,120
    9894:	b80b883a 	mov	r5,r23
    9898:	000eb5c0 	call	eb5c <__sprint_r>
    989c:	1039d31e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    98a0:	d8c02017 	ldw	r3,128(sp)
    98a4:	da000404 	addi	r8,sp,16
    98a8:	003d9406 	br	8efc <__alt_exception_stack_pointer+0xf8008efc>
    98ac:	01000074 	movhi	r4,1
    98b0:	2119e184 	addi	r4,r4,26502
    98b4:	d9002c15 	stw	r4,176(sp)
    98b8:	d9002c17 	ldw	r4,176(sp)
    98bc:	1c47883a 	add	r3,r3,r17
    98c0:	10800044 	addi	r2,r2,1
    98c4:	41000015 	stw	r4,0(r8)
    98c8:	44400115 	stw	r17,4(r8)
    98cc:	d8c02015 	stw	r3,128(sp)
    98d0:	d8801f15 	stw	r2,124(sp)
    98d4:	010001c4 	movi	r4,7
    98d8:	20bfd716 	blt	r4,r2,9838 <__alt_exception_stack_pointer+0xf8009838>
    98dc:	42000204 	addi	r8,r8,8
    98e0:	003fdd06 	br	9858 <__alt_exception_stack_pointer+0xf8009858>
    98e4:	d9002d17 	ldw	r4,180(sp)
    98e8:	d9801e04 	addi	r6,sp,120
    98ec:	b80b883a 	mov	r5,r23
    98f0:	000eb5c0 	call	eb5c <__sprint_r>
    98f4:	1039bd1e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    98f8:	d8802617 	ldw	r2,152(sp)
    98fc:	d8c02017 	ldw	r3,128(sp)
    9900:	da000404 	addi	r8,sp,16
    9904:	003e1006 	br	9148 <__alt_exception_stack_pointer+0xf8009148>
    9908:	00800044 	movi	r2,1
    990c:	10803fcc 	andi	r2,r2,255
    9910:	00c00044 	movi	r3,1
    9914:	10fa0d26 	beq	r2,r3,814c <__alt_exception_stack_pointer+0xf800814c>
    9918:	00c00084 	movi	r3,2
    991c:	10fbaf26 	beq	r2,r3,87dc <__alt_exception_stack_pointer+0xf80087dc>
    9920:	003a6d06 	br	82d8 <__alt_exception_stack_pointer+0xf80082d8>
    9924:	01000074 	movhi	r4,1
    9928:	2119e584 	addi	r4,r4,26518
    992c:	d9003515 	stw	r4,212(sp)
    9930:	003b5406 	br	8684 <__alt_exception_stack_pointer+0xf8008684>
    9934:	d8802a17 	ldw	r2,168(sp)
    9938:	00c00184 	movi	r3,6
    993c:	1880012e 	bgeu	r3,r2,9944 <___vfprintf_internal_r+0x1d68>
    9940:	1805883a 	mov	r2,r3
    9944:	d8802b15 	stw	r2,172(sp)
    9948:	1000ef16 	blt	r2,zero,9d08 <___vfprintf_internal_r+0x212c>
    994c:	04000074 	movhi	r16,1
    9950:	d8802915 	stw	r2,164(sp)
    9954:	dcc02e15 	stw	r19,184(sp)
    9958:	d8002a15 	stw	zero,168(sp)
    995c:	d8003215 	stw	zero,200(sp)
    9960:	8419df04 	addi	r16,r16,26492
    9964:	0039883a 	mov	fp,zero
    9968:	003a8006 	br	836c <__alt_exception_stack_pointer+0xf800836c>
    996c:	0021883a 	mov	r16,zero
    9970:	003e0706 	br	9190 <__alt_exception_stack_pointer+0xf8009190>
    9974:	d9002d17 	ldw	r4,180(sp)
    9978:	d9801e04 	addi	r6,sp,120
    997c:	b80b883a 	mov	r5,r23
    9980:	000eb5c0 	call	eb5c <__sprint_r>
    9984:	1039991e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    9988:	d8802617 	ldw	r2,152(sp)
    998c:	d9403317 	ldw	r5,204(sp)
    9990:	d8c02017 	ldw	r3,128(sp)
    9994:	da000404 	addi	r8,sp,16
    9998:	2885c83a 	sub	r2,r5,r2
    999c:	003dfb06 	br	918c <__alt_exception_stack_pointer+0xf800918c>
    99a0:	9080004c 	andi	r2,r18,1
    99a4:	103e8f1e 	bne	r2,zero,93e4 <__alt_exception_stack_pointer+0xf80093e4>
    99a8:	d8802117 	ldw	r2,132(sp)
    99ac:	003e9e06 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    99b0:	1025883a 	mov	r18,r2
    99b4:	0039883a 	mov	fp,zero
    99b8:	00800084 	movi	r2,2
    99bc:	003fd306 	br	990c <__alt_exception_stack_pointer+0xf800990c>
    99c0:	07000b44 	movi	fp,45
    99c4:	df002785 	stb	fp,158(sp)
    99c8:	003a1b06 	br	8238 <__alt_exception_stack_pointer+0xf8008238>
    99cc:	00c00b44 	movi	r3,45
    99d0:	d8c02785 	stb	r3,158(sp)
    99d4:	d8802915 	stw	r2,164(sp)
    99d8:	dc802c17 	ldw	r18,176(sp)
    99dc:	d8002a15 	stw	zero,168(sp)
    99e0:	07000b44 	movi	fp,45
    99e4:	003a5e06 	br	8360 <__alt_exception_stack_pointer+0xf8008360>
    99e8:	04000074 	movhi	r16,1
    99ec:	8419d404 	addi	r16,r16,26448
    99f0:	003f4706 	br	9710 <__alt_exception_stack_pointer+0xf8009710>
    99f4:	d9002e17 	ldw	r4,184(sp)
    99f8:	d9402f17 	ldw	r5,188(sp)
    99fc:	20800017 	ldw	r2,0(r4)
    9a00:	21000104 	addi	r4,r4,4
    9a04:	d9002e15 	stw	r4,184(sp)
    9a08:	11400015 	stw	r5,0(r2)
    9a0c:	0038ab06 	br	7cbc <__alt_exception_stack_pointer+0xf8007cbc>
    9a10:	dd802617 	ldw	r22,152(sp)
    9a14:	00bfff44 	movi	r2,-3
    9a18:	b0801c16 	blt	r22,r2,9a8c <___vfprintf_internal_r+0x1eb0>
    9a1c:	d9402a17 	ldw	r5,168(sp)
    9a20:	2d801a16 	blt	r5,r22,9a8c <___vfprintf_internal_r+0x1eb0>
    9a24:	dd803215 	stw	r22,200(sp)
    9a28:	003e8906 	br	9450 <__alt_exception_stack_pointer+0xf8009450>
    9a2c:	01000074 	movhi	r4,1
    9a30:	2119e184 	addi	r4,r4,26502
    9a34:	d9002c15 	stw	r4,176(sp)
    9a38:	003c9106 	br	8c80 <__alt_exception_stack_pointer+0xf8008c80>
    9a3c:	e005883a 	mov	r2,fp
    9a40:	003e7906 	br	9428 <__alt_exception_stack_pointer+0xf8009428>
    9a44:	d9002a17 	ldw	r4,168(sp)
    9a48:	df002783 	ldbu	fp,158(sp)
    9a4c:	dcc02e15 	stw	r19,184(sp)
    9a50:	d9002915 	stw	r4,164(sp)
    9a54:	d9002b15 	stw	r4,172(sp)
    9a58:	d8002a15 	stw	zero,168(sp)
    9a5c:	d8003215 	stw	zero,200(sp)
    9a60:	003a3b06 	br	8350 <__alt_exception_stack_pointer+0xf8008350>
    9a64:	9080004c 	andi	r2,r18,1
    9a68:	0039883a 	mov	fp,zero
    9a6c:	10000426 	beq	r2,zero,9a80 <___vfprintf_internal_r+0x1ea4>
    9a70:	00800c04 	movi	r2,48
    9a74:	dc001dc4 	addi	r16,sp,119
    9a78:	d8801dc5 	stb	r2,119(sp)
    9a7c:	003b6406 	br	8810 <__alt_exception_stack_pointer+0xf8008810>
    9a80:	d8002b15 	stw	zero,172(sp)
    9a84:	dc001e04 	addi	r16,sp,120
    9a88:	003a2b06 	br	8338 <__alt_exception_stack_pointer+0xf8008338>
    9a8c:	8c7fff84 	addi	r17,r17,-2
    9a90:	b5bfffc4 	addi	r22,r22,-1
    9a94:	dd802615 	stw	r22,152(sp)
    9a98:	dc4022c5 	stb	r17,139(sp)
    9a9c:	b000bf16 	blt	r22,zero,9d9c <___vfprintf_internal_r+0x21c0>
    9aa0:	00800ac4 	movi	r2,43
    9aa4:	d8802305 	stb	r2,140(sp)
    9aa8:	00800244 	movi	r2,9
    9aac:	15807016 	blt	r2,r22,9c70 <___vfprintf_internal_r+0x2094>
    9ab0:	00800c04 	movi	r2,48
    9ab4:	b5800c04 	addi	r22,r22,48
    9ab8:	d8802345 	stb	r2,141(sp)
    9abc:	dd802385 	stb	r22,142(sp)
    9ac0:	d88023c4 	addi	r2,sp,143
    9ac4:	df0022c4 	addi	fp,sp,139
    9ac8:	d8c03317 	ldw	r3,204(sp)
    9acc:	1739c83a 	sub	fp,r2,fp
    9ad0:	d9003317 	ldw	r4,204(sp)
    9ad4:	e0c7883a 	add	r3,fp,r3
    9ad8:	df003a15 	stw	fp,232(sp)
    9adc:	d8c02b15 	stw	r3,172(sp)
    9ae0:	00800044 	movi	r2,1
    9ae4:	1100b30e 	bge	r2,r4,9db4 <___vfprintf_internal_r+0x21d8>
    9ae8:	d8c02b17 	ldw	r3,172(sp)
    9aec:	18c00044 	addi	r3,r3,1
    9af0:	d8c02b15 	stw	r3,172(sp)
    9af4:	1805883a 	mov	r2,r3
    9af8:	1800ac16 	blt	r3,zero,9dac <___vfprintf_internal_r+0x21d0>
    9afc:	d8003215 	stw	zero,200(sp)
    9b00:	003e5d06 	br	9478 <__alt_exception_stack_pointer+0xf8009478>
    9b04:	d9002d17 	ldw	r4,180(sp)
    9b08:	d9801e04 	addi	r6,sp,120
    9b0c:	b80b883a 	mov	r5,r23
    9b10:	000eb5c0 	call	eb5c <__sprint_r>
    9b14:	1039351e 	bne	r2,zero,7fec <__alt_exception_stack_pointer+0xf8007fec>
    9b18:	dc402617 	ldw	r17,152(sp)
    9b1c:	d8c02017 	ldw	r3,128(sp)
    9b20:	d8801f17 	ldw	r2,124(sp)
    9b24:	da000404 	addi	r8,sp,16
    9b28:	003ed606 	br	9684 <__alt_exception_stack_pointer+0xf8009684>
    9b2c:	182b883a 	mov	r21,r3
    9b30:	d8002a15 	stw	zero,168(sp)
    9b34:	00388c06 	br	7d68 <__alt_exception_stack_pointer+0xf8007d68>
    9b38:	d8802a17 	ldw	r2,168(sp)
    9b3c:	103e071e 	bne	r2,zero,935c <__alt_exception_stack_pointer+0xf800935c>
    9b40:	dc002a15 	stw	r16,168(sp)
    9b44:	003e0506 	br	935c <__alt_exception_stack_pointer+0xf800935c>
    9b48:	d9002a17 	ldw	r4,168(sp)
    9b4c:	20c00044 	addi	r3,r4,1
    9b50:	003e0f06 	br	9390 <__alt_exception_stack_pointer+0xf8009390>
    9b54:	01400184 	movi	r5,6
    9b58:	d9402a15 	stw	r5,168(sp)
    9b5c:	003dff06 	br	935c <__alt_exception_stack_pointer+0xf800935c>
    9b60:	d8802104 	addi	r2,sp,132
    9b64:	d8800315 	stw	r2,12(sp)
    9b68:	d8802504 	addi	r2,sp,148
    9b6c:	d8800215 	stw	r2,8(sp)
    9b70:	d8802604 	addi	r2,sp,152
    9b74:	d8800115 	stw	r2,4(sp)
    9b78:	d8802a17 	ldw	r2,168(sp)
    9b7c:	d9403617 	ldw	r5,216(sp)
    9b80:	d9002d17 	ldw	r4,180(sp)
    9b84:	d8800015 	stw	r2,0(sp)
    9b88:	01c000c4 	movi	r7,3
    9b8c:	980d883a 	mov	r6,r19
    9b90:	da003d15 	stw	r8,244(sp)
    9b94:	000a30c0 	call	a30c <_dtoa_r>
    9b98:	d8c02a17 	ldw	r3,168(sp)
    9b9c:	da003d17 	ldw	r8,244(sp)
    9ba0:	1021883a 	mov	r16,r2
    9ba4:	10f9883a 	add	fp,r2,r3
    9ba8:	81000007 	ldb	r4,0(r16)
    9bac:	00800c04 	movi	r2,48
    9bb0:	20805e26 	beq	r4,r2,9d2c <___vfprintf_internal_r+0x2150>
    9bb4:	d8c02617 	ldw	r3,152(sp)
    9bb8:	e0f9883a 	add	fp,fp,r3
    9bbc:	003e0a06 	br	93e8 <__alt_exception_stack_pointer+0xf80093e8>
    9bc0:	00c00b44 	movi	r3,45
    9bc4:	24e0003c 	xorhi	r19,r4,32768
    9bc8:	d8c02905 	stb	r3,164(sp)
    9bcc:	003de906 	br	9374 <__alt_exception_stack_pointer+0xf8009374>
    9bd0:	d8c03217 	ldw	r3,200(sp)
    9bd4:	00c07a0e 	bge	zero,r3,9dc0 <___vfprintf_internal_r+0x21e4>
    9bd8:	00800044 	movi	r2,1
    9bdc:	d9003317 	ldw	r4,204(sp)
    9be0:	1105883a 	add	r2,r2,r4
    9be4:	d8802b15 	stw	r2,172(sp)
    9be8:	10004e16 	blt	r2,zero,9d24 <___vfprintf_internal_r+0x2148>
    9bec:	044019c4 	movi	r17,103
    9bf0:	003e2106 	br	9478 <__alt_exception_stack_pointer+0xf8009478>
    9bf4:	d9002a17 	ldw	r4,168(sp)
    9bf8:	d8802104 	addi	r2,sp,132
    9bfc:	d8800315 	stw	r2,12(sp)
    9c00:	d9000015 	stw	r4,0(sp)
    9c04:	d8802504 	addi	r2,sp,148
    9c08:	d9403617 	ldw	r5,216(sp)
    9c0c:	d9002d17 	ldw	r4,180(sp)
    9c10:	d8800215 	stw	r2,8(sp)
    9c14:	d8802604 	addi	r2,sp,152
    9c18:	d8800115 	stw	r2,4(sp)
    9c1c:	01c000c4 	movi	r7,3
    9c20:	980d883a 	mov	r6,r19
    9c24:	da003d15 	stw	r8,244(sp)
    9c28:	000a30c0 	call	a30c <_dtoa_r>
    9c2c:	d8c02a17 	ldw	r3,168(sp)
    9c30:	da003d17 	ldw	r8,244(sp)
    9c34:	1021883a 	mov	r16,r2
    9c38:	00801184 	movi	r2,70
    9c3c:	80f9883a 	add	fp,r16,r3
    9c40:	88bfd926 	beq	r17,r2,9ba8 <__alt_exception_stack_pointer+0xf8009ba8>
    9c44:	003de806 	br	93e8 <__alt_exception_stack_pointer+0xf80093e8>
    9c48:	d9002a17 	ldw	r4,168(sp)
    9c4c:	00c04d0e 	bge	zero,r3,9d84 <___vfprintf_internal_r+0x21a8>
    9c50:	2000441e 	bne	r4,zero,9d64 <___vfprintf_internal_r+0x2188>
    9c54:	9480004c 	andi	r18,r18,1
    9c58:	9000421e 	bne	r18,zero,9d64 <___vfprintf_internal_r+0x2188>
    9c5c:	1805883a 	mov	r2,r3
    9c60:	18006f16 	blt	r3,zero,9e20 <___vfprintf_internal_r+0x2244>
    9c64:	d8c03217 	ldw	r3,200(sp)
    9c68:	d8c02b15 	stw	r3,172(sp)
    9c6c:	003e0206 	br	9478 <__alt_exception_stack_pointer+0xf8009478>
    9c70:	df0022c4 	addi	fp,sp,139
    9c74:	dc002a15 	stw	r16,168(sp)
    9c78:	4027883a 	mov	r19,r8
    9c7c:	e021883a 	mov	r16,fp
    9c80:	b009883a 	mov	r4,r22
    9c84:	01400284 	movi	r5,10
    9c88:	00052980 	call	5298 <__modsi3>
    9c8c:	10800c04 	addi	r2,r2,48
    9c90:	843fffc4 	addi	r16,r16,-1
    9c94:	b009883a 	mov	r4,r22
    9c98:	01400284 	movi	r5,10
    9c9c:	80800005 	stb	r2,0(r16)
    9ca0:	00052140 	call	5214 <__divsi3>
    9ca4:	102d883a 	mov	r22,r2
    9ca8:	00800244 	movi	r2,9
    9cac:	15bff416 	blt	r2,r22,9c80 <__alt_exception_stack_pointer+0xf8009c80>
    9cb0:	9811883a 	mov	r8,r19
    9cb4:	b0800c04 	addi	r2,r22,48
    9cb8:	8027883a 	mov	r19,r16
    9cbc:	997fffc4 	addi	r5,r19,-1
    9cc0:	98bfffc5 	stb	r2,-1(r19)
    9cc4:	dc002a17 	ldw	r16,168(sp)
    9cc8:	2f006d2e 	bgeu	r5,fp,9e80 <___vfprintf_internal_r+0x22a4>
    9ccc:	d9c02384 	addi	r7,sp,142
    9cd0:	3ccfc83a 	sub	r7,r7,r19
    9cd4:	d9002344 	addi	r4,sp,141
    9cd8:	e1cf883a 	add	r7,fp,r7
    9cdc:	00000106 	br	9ce4 <___vfprintf_internal_r+0x2108>
    9ce0:	28800003 	ldbu	r2,0(r5)
    9ce4:	20800005 	stb	r2,0(r4)
    9ce8:	21000044 	addi	r4,r4,1
    9cec:	29400044 	addi	r5,r5,1
    9cf0:	393ffb1e 	bne	r7,r4,9ce0 <__alt_exception_stack_pointer+0xf8009ce0>
    9cf4:	d8802304 	addi	r2,sp,140
    9cf8:	14c5c83a 	sub	r2,r2,r19
    9cfc:	d8c02344 	addi	r3,sp,141
    9d00:	1885883a 	add	r2,r3,r2
    9d04:	003f7006 	br	9ac8 <__alt_exception_stack_pointer+0xf8009ac8>
    9d08:	0005883a 	mov	r2,zero
    9d0c:	003f0f06 	br	994c <__alt_exception_stack_pointer+0xf800994c>
    9d10:	d8c03217 	ldw	r3,200(sp)
    9d14:	18c00044 	addi	r3,r3,1
    9d18:	d8c02b15 	stw	r3,172(sp)
    9d1c:	1805883a 	mov	r2,r3
    9d20:	183fb20e 	bge	r3,zero,9bec <__alt_exception_stack_pointer+0xf8009bec>
    9d24:	0005883a 	mov	r2,zero
    9d28:	003fb006 	br	9bec <__alt_exception_stack_pointer+0xf8009bec>
    9d2c:	d9003617 	ldw	r4,216(sp)
    9d30:	000d883a 	mov	r6,zero
    9d34:	000f883a 	mov	r7,zero
    9d38:	980b883a 	mov	r5,r19
    9d3c:	d8c03c15 	stw	r3,240(sp)
    9d40:	da003d15 	stw	r8,244(sp)
    9d44:	0005c9c0 	call	5c9c <__eqdf2>
    9d48:	d8c03c17 	ldw	r3,240(sp)
    9d4c:	da003d17 	ldw	r8,244(sp)
    9d50:	103f9826 	beq	r2,zero,9bb4 <__alt_exception_stack_pointer+0xf8009bb4>
    9d54:	00800044 	movi	r2,1
    9d58:	10c7c83a 	sub	r3,r2,r3
    9d5c:	d8c02615 	stw	r3,152(sp)
    9d60:	003f9506 	br	9bb8 <__alt_exception_stack_pointer+0xf8009bb8>
    9d64:	d9002a17 	ldw	r4,168(sp)
    9d68:	d8c03217 	ldw	r3,200(sp)
    9d6c:	20800044 	addi	r2,r4,1
    9d70:	1885883a 	add	r2,r3,r2
    9d74:	d8802b15 	stw	r2,172(sp)
    9d78:	103dbf0e 	bge	r2,zero,9478 <__alt_exception_stack_pointer+0xf8009478>
    9d7c:	0005883a 	mov	r2,zero
    9d80:	003dbd06 	br	9478 <__alt_exception_stack_pointer+0xf8009478>
    9d84:	2000201e 	bne	r4,zero,9e08 <___vfprintf_internal_r+0x222c>
    9d88:	9480004c 	andi	r18,r18,1
    9d8c:	90001e1e 	bne	r18,zero,9e08 <___vfprintf_internal_r+0x222c>
    9d90:	00800044 	movi	r2,1
    9d94:	d8802b15 	stw	r2,172(sp)
    9d98:	003db706 	br	9478 <__alt_exception_stack_pointer+0xf8009478>
    9d9c:	00800b44 	movi	r2,45
    9da0:	05adc83a 	sub	r22,zero,r22
    9da4:	d8802305 	stb	r2,140(sp)
    9da8:	003f3f06 	br	9aa8 <__alt_exception_stack_pointer+0xf8009aa8>
    9dac:	0005883a 	mov	r2,zero
    9db0:	003f5206 	br	9afc <__alt_exception_stack_pointer+0xf8009afc>
    9db4:	90a4703a 	and	r18,r18,r2
    9db8:	903f4e26 	beq	r18,zero,9af4 <__alt_exception_stack_pointer+0xf8009af4>
    9dbc:	003f4a06 	br	9ae8 <__alt_exception_stack_pointer+0xf8009ae8>
    9dc0:	00800084 	movi	r2,2
    9dc4:	10c5c83a 	sub	r2,r2,r3
    9dc8:	003f8406 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9dcc:	d9402e17 	ldw	r5,184(sp)
    9dd0:	d9002e17 	ldw	r4,184(sp)
    9dd4:	ac400043 	ldbu	r17,1(r21)
    9dd8:	29400017 	ldw	r5,0(r5)
    9ddc:	20800104 	addi	r2,r4,4
    9de0:	d8802e15 	stw	r2,184(sp)
    9de4:	d9402a15 	stw	r5,168(sp)
    9de8:	182b883a 	mov	r21,r3
    9dec:	283e7b0e 	bge	r5,zero,97dc <__alt_exception_stack_pointer+0xf80097dc>
    9df0:	8c403fcc 	andi	r17,r17,255
    9df4:	017fffc4 	movi	r5,-1
    9df8:	8c40201c 	xori	r17,r17,128
    9dfc:	d9402a15 	stw	r5,168(sp)
    9e00:	8c7fe004 	addi	r17,r17,-128
    9e04:	0037d706 	br	7d64 <__alt_exception_stack_pointer+0xf8007d64>
    9e08:	d8c02a17 	ldw	r3,168(sp)
    9e0c:	18c00084 	addi	r3,r3,2
    9e10:	d8c02b15 	stw	r3,172(sp)
    9e14:	1805883a 	mov	r2,r3
    9e18:	183d970e 	bge	r3,zero,9478 <__alt_exception_stack_pointer+0xf8009478>
    9e1c:	003fd706 	br	9d7c <__alt_exception_stack_pointer+0xf8009d7c>
    9e20:	0005883a 	mov	r2,zero
    9e24:	003f8f06 	br	9c64 <__alt_exception_stack_pointer+0xf8009c64>
    9e28:	9080004c 	andi	r2,r18,1
    9e2c:	103f821e 	bne	r2,zero,9c38 <__alt_exception_stack_pointer+0xf8009c38>
    9e30:	d8802117 	ldw	r2,132(sp)
    9e34:	1405c83a 	sub	r2,r2,r16
    9e38:	d8803315 	stw	r2,204(sp)
    9e3c:	b47ef426 	beq	r22,r17,9a10 <__alt_exception_stack_pointer+0xf8009a10>
    9e40:	dd802617 	ldw	r22,152(sp)
    9e44:	003f1206 	br	9a90 <__alt_exception_stack_pointer+0xf8009a90>
    9e48:	d8c02b03 	ldbu	r3,172(sp)
    9e4c:	d8c02785 	stb	r3,158(sp)
    9e50:	0038df06 	br	81d0 <__alt_exception_stack_pointer+0xf80081d0>
    9e54:	d8c02b03 	ldbu	r3,172(sp)
    9e58:	d8c02785 	stb	r3,158(sp)
    9e5c:	0038aa06 	br	8108 <__alt_exception_stack_pointer+0xf8008108>
    9e60:	d8c02b03 	ldbu	r3,172(sp)
    9e64:	d8c02785 	stb	r3,158(sp)
    9e68:	003a4306 	br	8778 <__alt_exception_stack_pointer+0xf8008778>
    9e6c:	d8c02b03 	ldbu	r3,172(sp)
    9e70:	d8c02785 	stb	r3,158(sp)
    9e74:	003af506 	br	8a4c <__alt_exception_stack_pointer+0xf8008a4c>
    9e78:	0005883a 	mov	r2,zero
    9e7c:	003d7b06 	br	946c <__alt_exception_stack_pointer+0xf800946c>
    9e80:	d8802344 	addi	r2,sp,141
    9e84:	003f1006 	br	9ac8 <__alt_exception_stack_pointer+0xf8009ac8>
    9e88:	d8c02b03 	ldbu	r3,172(sp)
    9e8c:	d8c02785 	stb	r3,158(sp)
    9e90:	0038fd06 	br	8288 <__alt_exception_stack_pointer+0xf8008288>
    9e94:	d8c02b03 	ldbu	r3,172(sp)
    9e98:	d8c02785 	stb	r3,158(sp)
    9e9c:	003a9706 	br	88fc <__alt_exception_stack_pointer+0xf80088fc>
    9ea0:	d8c02b03 	ldbu	r3,172(sp)
    9ea4:	d8c02785 	stb	r3,158(sp)
    9ea8:	003a1806 	br	870c <__alt_exception_stack_pointer+0xf800870c>
    9eac:	d8c02b03 	ldbu	r3,172(sp)
    9eb0:	d8c02785 	stb	r3,158(sp)
    9eb4:	003abe06 	br	89b0 <__alt_exception_stack_pointer+0xf80089b0>

00009eb8 <__vfprintf_internal>:
    9eb8:	008000b4 	movhi	r2,2
    9ebc:	10a16a04 	addi	r2,r2,-31320
    9ec0:	300f883a 	mov	r7,r6
    9ec4:	280d883a 	mov	r6,r5
    9ec8:	200b883a 	mov	r5,r4
    9ecc:	11000017 	ldw	r4,0(r2)
    9ed0:	0007bdc1 	jmpi	7bdc <___vfprintf_internal_r>

00009ed4 <__sbprintf>:
    9ed4:	2880030b 	ldhu	r2,12(r5)
    9ed8:	2ac01917 	ldw	r11,100(r5)
    9edc:	2a80038b 	ldhu	r10,14(r5)
    9ee0:	2a400717 	ldw	r9,28(r5)
    9ee4:	2a000917 	ldw	r8,36(r5)
    9ee8:	defee204 	addi	sp,sp,-1144
    9eec:	00c10004 	movi	r3,1024
    9ef0:	dc011a15 	stw	r16,1128(sp)
    9ef4:	10bfff4c 	andi	r2,r2,65533
    9ef8:	2821883a 	mov	r16,r5
    9efc:	d8cb883a 	add	r5,sp,r3
    9f00:	dc811c15 	stw	r18,1136(sp)
    9f04:	dc411b15 	stw	r17,1132(sp)
    9f08:	dfc11d15 	stw	ra,1140(sp)
    9f0c:	2025883a 	mov	r18,r4
    9f10:	d881030d 	sth	r2,1036(sp)
    9f14:	dac11915 	stw	r11,1124(sp)
    9f18:	da81038d 	sth	r10,1038(sp)
    9f1c:	da410715 	stw	r9,1052(sp)
    9f20:	da010915 	stw	r8,1060(sp)
    9f24:	dec10015 	stw	sp,1024(sp)
    9f28:	dec10415 	stw	sp,1040(sp)
    9f2c:	d8c10215 	stw	r3,1032(sp)
    9f30:	d8c10515 	stw	r3,1044(sp)
    9f34:	d8010615 	stw	zero,1048(sp)
    9f38:	0007bdc0 	call	7bdc <___vfprintf_internal_r>
    9f3c:	1023883a 	mov	r17,r2
    9f40:	10000416 	blt	r2,zero,9f54 <__sbprintf+0x80>
    9f44:	d9410004 	addi	r5,sp,1024
    9f48:	9009883a 	mov	r4,r18
    9f4c:	000bbb00 	call	bbb0 <_fflush_r>
    9f50:	10000d1e 	bne	r2,zero,9f88 <__sbprintf+0xb4>
    9f54:	d881030b 	ldhu	r2,1036(sp)
    9f58:	1080100c 	andi	r2,r2,64
    9f5c:	10000326 	beq	r2,zero,9f6c <__sbprintf+0x98>
    9f60:	8080030b 	ldhu	r2,12(r16)
    9f64:	10801014 	ori	r2,r2,64
    9f68:	8080030d 	sth	r2,12(r16)
    9f6c:	8805883a 	mov	r2,r17
    9f70:	dfc11d17 	ldw	ra,1140(sp)
    9f74:	dc811c17 	ldw	r18,1136(sp)
    9f78:	dc411b17 	ldw	r17,1132(sp)
    9f7c:	dc011a17 	ldw	r16,1128(sp)
    9f80:	dec11e04 	addi	sp,sp,1144
    9f84:	f800283a 	ret
    9f88:	047fffc4 	movi	r17,-1
    9f8c:	003ff106 	br	9f54 <__alt_exception_stack_pointer+0xf8009f54>

00009f90 <__swsetup_r>:
    9f90:	008000b4 	movhi	r2,2
    9f94:	defffd04 	addi	sp,sp,-12
    9f98:	10a16a04 	addi	r2,r2,-31320
    9f9c:	dc400115 	stw	r17,4(sp)
    9fa0:	2023883a 	mov	r17,r4
    9fa4:	11000017 	ldw	r4,0(r2)
    9fa8:	dc000015 	stw	r16,0(sp)
    9fac:	dfc00215 	stw	ra,8(sp)
    9fb0:	2821883a 	mov	r16,r5
    9fb4:	20000226 	beq	r4,zero,9fc0 <__swsetup_r+0x30>
    9fb8:	20800e17 	ldw	r2,56(r4)
    9fbc:	10003126 	beq	r2,zero,a084 <__swsetup_r+0xf4>
    9fc0:	8080030b 	ldhu	r2,12(r16)
    9fc4:	10c0020c 	andi	r3,r2,8
    9fc8:	1009883a 	mov	r4,r2
    9fcc:	18000f26 	beq	r3,zero,a00c <__swsetup_r+0x7c>
    9fd0:	80c00417 	ldw	r3,16(r16)
    9fd4:	18001526 	beq	r3,zero,a02c <__swsetup_r+0x9c>
    9fd8:	1100004c 	andi	r4,r2,1
    9fdc:	20001c1e 	bne	r4,zero,a050 <__swsetup_r+0xc0>
    9fe0:	1080008c 	andi	r2,r2,2
    9fe4:	1000291e 	bne	r2,zero,a08c <__swsetup_r+0xfc>
    9fe8:	80800517 	ldw	r2,20(r16)
    9fec:	80800215 	stw	r2,8(r16)
    9ff0:	18001c26 	beq	r3,zero,a064 <__swsetup_r+0xd4>
    9ff4:	0005883a 	mov	r2,zero
    9ff8:	dfc00217 	ldw	ra,8(sp)
    9ffc:	dc400117 	ldw	r17,4(sp)
    a000:	dc000017 	ldw	r16,0(sp)
    a004:	dec00304 	addi	sp,sp,12
    a008:	f800283a 	ret
    a00c:	2080040c 	andi	r2,r4,16
    a010:	10002e26 	beq	r2,zero,a0cc <__swsetup_r+0x13c>
    a014:	2080010c 	andi	r2,r4,4
    a018:	10001e1e 	bne	r2,zero,a094 <__swsetup_r+0x104>
    a01c:	80c00417 	ldw	r3,16(r16)
    a020:	20800214 	ori	r2,r4,8
    a024:	8080030d 	sth	r2,12(r16)
    a028:	183feb1e 	bne	r3,zero,9fd8 <__alt_exception_stack_pointer+0xf8009fd8>
    a02c:	1100a00c 	andi	r4,r2,640
    a030:	01408004 	movi	r5,512
    a034:	217fe826 	beq	r4,r5,9fd8 <__alt_exception_stack_pointer+0xf8009fd8>
    a038:	800b883a 	mov	r5,r16
    a03c:	8809883a 	mov	r4,r17
    a040:	000cb4c0 	call	cb4c <__smakebuf_r>
    a044:	8080030b 	ldhu	r2,12(r16)
    a048:	80c00417 	ldw	r3,16(r16)
    a04c:	003fe206 	br	9fd8 <__alt_exception_stack_pointer+0xf8009fd8>
    a050:	80800517 	ldw	r2,20(r16)
    a054:	80000215 	stw	zero,8(r16)
    a058:	0085c83a 	sub	r2,zero,r2
    a05c:	80800615 	stw	r2,24(r16)
    a060:	183fe41e 	bne	r3,zero,9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a064:	80c0030b 	ldhu	r3,12(r16)
    a068:	0005883a 	mov	r2,zero
    a06c:	1900200c 	andi	r4,r3,128
    a070:	203fe126 	beq	r4,zero,9ff8 <__alt_exception_stack_pointer+0xf8009ff8>
    a074:	18c01014 	ori	r3,r3,64
    a078:	80c0030d 	sth	r3,12(r16)
    a07c:	00bfffc4 	movi	r2,-1
    a080:	003fdd06 	br	9ff8 <__alt_exception_stack_pointer+0xf8009ff8>
    a084:	000bf9c0 	call	bf9c <__sinit>
    a088:	003fcd06 	br	9fc0 <__alt_exception_stack_pointer+0xf8009fc0>
    a08c:	0005883a 	mov	r2,zero
    a090:	003fd606 	br	9fec <__alt_exception_stack_pointer+0xf8009fec>
    a094:	81400c17 	ldw	r5,48(r16)
    a098:	28000626 	beq	r5,zero,a0b4 <__swsetup_r+0x124>
    a09c:	80801004 	addi	r2,r16,64
    a0a0:	28800326 	beq	r5,r2,a0b0 <__swsetup_r+0x120>
    a0a4:	8809883a 	mov	r4,r17
    a0a8:	000c1100 	call	c110 <_free_r>
    a0ac:	8100030b 	ldhu	r4,12(r16)
    a0b0:	80000c15 	stw	zero,48(r16)
    a0b4:	80c00417 	ldw	r3,16(r16)
    a0b8:	00bff6c4 	movi	r2,-37
    a0bc:	1108703a 	and	r4,r2,r4
    a0c0:	80000115 	stw	zero,4(r16)
    a0c4:	80c00015 	stw	r3,0(r16)
    a0c8:	003fd506 	br	a020 <__alt_exception_stack_pointer+0xf800a020>
    a0cc:	00800244 	movi	r2,9
    a0d0:	88800015 	stw	r2,0(r17)
    a0d4:	20801014 	ori	r2,r4,64
    a0d8:	8080030d 	sth	r2,12(r16)
    a0dc:	00bfffc4 	movi	r2,-1
    a0e0:	003fc506 	br	9ff8 <__alt_exception_stack_pointer+0xf8009ff8>

0000a0e4 <quorem>:
    a0e4:	defff204 	addi	sp,sp,-56
    a0e8:	ddc00b15 	stw	r23,44(sp)
    a0ec:	20800417 	ldw	r2,16(r4)
    a0f0:	2dc00417 	ldw	r23,16(r5)
    a0f4:	dfc00d15 	stw	ra,52(sp)
    a0f8:	df000c15 	stw	fp,48(sp)
    a0fc:	dd800a15 	stw	r22,40(sp)
    a100:	dd400915 	stw	r21,36(sp)
    a104:	dd000815 	stw	r20,32(sp)
    a108:	dcc00715 	stw	r19,28(sp)
    a10c:	dc800615 	stw	r18,24(sp)
    a110:	dc400515 	stw	r17,20(sp)
    a114:	dc000415 	stw	r16,16(sp)
    a118:	15c07a16 	blt	r2,r23,a304 <quorem+0x220>
    a11c:	bdffffc4 	addi	r23,r23,-1
    a120:	bde9883a 	add	r20,r23,r23
    a124:	28c00504 	addi	r3,r5,20
    a128:	a529883a 	add	r20,r20,r20
    a12c:	1d39883a 	add	fp,r3,r20
    a130:	24c00504 	addi	r19,r4,20
    a134:	d9400215 	stw	r5,8(sp)
    a138:	9d29883a 	add	r20,r19,r20
    a13c:	e1400017 	ldw	r5,0(fp)
    a140:	d9000015 	stw	r4,0(sp)
    a144:	a1000017 	ldw	r4,0(r20)
    a148:	29400044 	addi	r5,r5,1
    a14c:	d8c00115 	stw	r3,4(sp)
    a150:	dd000315 	stw	r20,12(sp)
    a154:	000530c0 	call	530c <__udivsi3>
    a158:	1025883a 	mov	r18,r2
    a15c:	10003026 	beq	r2,zero,a220 <quorem+0x13c>
    a160:	dc400117 	ldw	r17,4(sp)
    a164:	9829883a 	mov	r20,r19
    a168:	002d883a 	mov	r22,zero
    a16c:	0021883a 	mov	r16,zero
    a170:	8d400017 	ldw	r21,0(r17)
    a174:	900b883a 	mov	r5,r18
    a178:	8c400104 	addi	r17,r17,4
    a17c:	a93fffcc 	andi	r4,r21,65535
    a180:	00053c80 	call	53c8 <__mulsi3>
    a184:	a808d43a 	srli	r4,r21,16
    a188:	900b883a 	mov	r5,r18
    a18c:	15ad883a 	add	r22,r2,r22
    a190:	00053c80 	call	53c8 <__mulsi3>
    a194:	a1000017 	ldw	r4,0(r20)
    a198:	b00cd43a 	srli	r6,r22,16
    a19c:	b0ffffcc 	andi	r3,r22,65535
    a1a0:	217fffcc 	andi	r5,r4,65535
    a1a4:	2c21883a 	add	r16,r5,r16
    a1a8:	80c7c83a 	sub	r3,r16,r3
    a1ac:	2008d43a 	srli	r4,r4,16
    a1b0:	1185883a 	add	r2,r2,r6
    a1b4:	1821d43a 	srai	r16,r3,16
    a1b8:	117fffcc 	andi	r5,r2,65535
    a1bc:	2149c83a 	sub	r4,r4,r5
    a1c0:	2421883a 	add	r16,r4,r16
    a1c4:	8008943a 	slli	r4,r16,16
    a1c8:	18ffffcc 	andi	r3,r3,65535
    a1cc:	102cd43a 	srli	r22,r2,16
    a1d0:	20c8b03a 	or	r4,r4,r3
    a1d4:	a1000015 	stw	r4,0(r20)
    a1d8:	8021d43a 	srai	r16,r16,16
    a1dc:	a5000104 	addi	r20,r20,4
    a1e0:	e47fe32e 	bgeu	fp,r17,a170 <__alt_exception_stack_pointer+0xf800a170>
    a1e4:	d8c00317 	ldw	r3,12(sp)
    a1e8:	18800017 	ldw	r2,0(r3)
    a1ec:	10000c1e 	bne	r2,zero,a220 <quorem+0x13c>
    a1f0:	18bfff04 	addi	r2,r3,-4
    a1f4:	9880082e 	bgeu	r19,r2,a218 <quorem+0x134>
    a1f8:	18ffff17 	ldw	r3,-4(r3)
    a1fc:	18000326 	beq	r3,zero,a20c <quorem+0x128>
    a200:	00000506 	br	a218 <quorem+0x134>
    a204:	10c00017 	ldw	r3,0(r2)
    a208:	1800031e 	bne	r3,zero,a218 <quorem+0x134>
    a20c:	10bfff04 	addi	r2,r2,-4
    a210:	bdffffc4 	addi	r23,r23,-1
    a214:	98bffb36 	bltu	r19,r2,a204 <__alt_exception_stack_pointer+0xf800a204>
    a218:	d8c00017 	ldw	r3,0(sp)
    a21c:	1dc00415 	stw	r23,16(r3)
    a220:	d9400217 	ldw	r5,8(sp)
    a224:	d9000017 	ldw	r4,0(sp)
    a228:	000db3c0 	call	db3c <__mcmp>
    a22c:	10002816 	blt	r2,zero,a2d0 <quorem+0x1ec>
    a230:	dc400117 	ldw	r17,4(sp)
    a234:	94800044 	addi	r18,r18,1
    a238:	980d883a 	mov	r6,r19
    a23c:	0007883a 	mov	r3,zero
    a240:	31000017 	ldw	r4,0(r6)
    a244:	89400017 	ldw	r5,0(r17)
    a248:	31800104 	addi	r6,r6,4
    a24c:	20bfffcc 	andi	r2,r4,65535
    a250:	10c7883a 	add	r3,r2,r3
    a254:	28bfffcc 	andi	r2,r5,65535
    a258:	1885c83a 	sub	r2,r3,r2
    a25c:	280ad43a 	srli	r5,r5,16
    a260:	2008d43a 	srli	r4,r4,16
    a264:	1007d43a 	srai	r3,r2,16
    a268:	10bfffcc 	andi	r2,r2,65535
    a26c:	2149c83a 	sub	r4,r4,r5
    a270:	20c9883a 	add	r4,r4,r3
    a274:	200a943a 	slli	r5,r4,16
    a278:	8c400104 	addi	r17,r17,4
    a27c:	2007d43a 	srai	r3,r4,16
    a280:	2884b03a 	or	r2,r5,r2
    a284:	30bfff15 	stw	r2,-4(r6)
    a288:	e47fed2e 	bgeu	fp,r17,a240 <__alt_exception_stack_pointer+0xf800a240>
    a28c:	bdc5883a 	add	r2,r23,r23
    a290:	1085883a 	add	r2,r2,r2
    a294:	9887883a 	add	r3,r19,r2
    a298:	18800017 	ldw	r2,0(r3)
    a29c:	10000c1e 	bne	r2,zero,a2d0 <quorem+0x1ec>
    a2a0:	18bfff04 	addi	r2,r3,-4
    a2a4:	9880082e 	bgeu	r19,r2,a2c8 <quorem+0x1e4>
    a2a8:	18ffff17 	ldw	r3,-4(r3)
    a2ac:	18000326 	beq	r3,zero,a2bc <quorem+0x1d8>
    a2b0:	00000506 	br	a2c8 <quorem+0x1e4>
    a2b4:	10c00017 	ldw	r3,0(r2)
    a2b8:	1800031e 	bne	r3,zero,a2c8 <quorem+0x1e4>
    a2bc:	10bfff04 	addi	r2,r2,-4
    a2c0:	bdffffc4 	addi	r23,r23,-1
    a2c4:	98bffb36 	bltu	r19,r2,a2b4 <__alt_exception_stack_pointer+0xf800a2b4>
    a2c8:	d8c00017 	ldw	r3,0(sp)
    a2cc:	1dc00415 	stw	r23,16(r3)
    a2d0:	9005883a 	mov	r2,r18
    a2d4:	dfc00d17 	ldw	ra,52(sp)
    a2d8:	df000c17 	ldw	fp,48(sp)
    a2dc:	ddc00b17 	ldw	r23,44(sp)
    a2e0:	dd800a17 	ldw	r22,40(sp)
    a2e4:	dd400917 	ldw	r21,36(sp)
    a2e8:	dd000817 	ldw	r20,32(sp)
    a2ec:	dcc00717 	ldw	r19,28(sp)
    a2f0:	dc800617 	ldw	r18,24(sp)
    a2f4:	dc400517 	ldw	r17,20(sp)
    a2f8:	dc000417 	ldw	r16,16(sp)
    a2fc:	dec00e04 	addi	sp,sp,56
    a300:	f800283a 	ret
    a304:	0005883a 	mov	r2,zero
    a308:	003ff206 	br	a2d4 <__alt_exception_stack_pointer+0xf800a2d4>

0000a30c <_dtoa_r>:
    a30c:	20801017 	ldw	r2,64(r4)
    a310:	deffde04 	addi	sp,sp,-136
    a314:	df002015 	stw	fp,128(sp)
    a318:	dcc01b15 	stw	r19,108(sp)
    a31c:	dc801a15 	stw	r18,104(sp)
    a320:	dc401915 	stw	r17,100(sp)
    a324:	dc001815 	stw	r16,96(sp)
    a328:	dfc02115 	stw	ra,132(sp)
    a32c:	ddc01f15 	stw	r23,124(sp)
    a330:	dd801e15 	stw	r22,120(sp)
    a334:	dd401d15 	stw	r21,116(sp)
    a338:	dd001c15 	stw	r20,112(sp)
    a33c:	d9c00315 	stw	r7,12(sp)
    a340:	2039883a 	mov	fp,r4
    a344:	3023883a 	mov	r17,r6
    a348:	2825883a 	mov	r18,r5
    a34c:	dc002417 	ldw	r16,144(sp)
    a350:	3027883a 	mov	r19,r6
    a354:	10000826 	beq	r2,zero,a378 <_dtoa_r+0x6c>
    a358:	21801117 	ldw	r6,68(r4)
    a35c:	00c00044 	movi	r3,1
    a360:	100b883a 	mov	r5,r2
    a364:	1986983a 	sll	r3,r3,r6
    a368:	11800115 	stw	r6,4(r2)
    a36c:	10c00215 	stw	r3,8(r2)
    a370:	000d2600 	call	d260 <_Bfree>
    a374:	e0001015 	stw	zero,64(fp)
    a378:	88002e16 	blt	r17,zero,a434 <_dtoa_r+0x128>
    a37c:	80000015 	stw	zero,0(r16)
    a380:	889ffc2c 	andhi	r2,r17,32752
    a384:	00dffc34 	movhi	r3,32752
    a388:	10c01c26 	beq	r2,r3,a3fc <_dtoa_r+0xf0>
    a38c:	000d883a 	mov	r6,zero
    a390:	000f883a 	mov	r7,zero
    a394:	9009883a 	mov	r4,r18
    a398:	980b883a 	mov	r5,r19
    a39c:	0005c9c0 	call	5c9c <__eqdf2>
    a3a0:	10002b1e 	bne	r2,zero,a450 <_dtoa_r+0x144>
    a3a4:	d9c02317 	ldw	r7,140(sp)
    a3a8:	00800044 	movi	r2,1
    a3ac:	38800015 	stw	r2,0(r7)
    a3b0:	d8802517 	ldw	r2,148(sp)
    a3b4:	10019e26 	beq	r2,zero,aa30 <_dtoa_r+0x724>
    a3b8:	d8c02517 	ldw	r3,148(sp)
    a3bc:	00800074 	movhi	r2,1
    a3c0:	1099e144 	addi	r2,r2,26501
    a3c4:	18800015 	stw	r2,0(r3)
    a3c8:	10bfffc4 	addi	r2,r2,-1
    a3cc:	dfc02117 	ldw	ra,132(sp)
    a3d0:	df002017 	ldw	fp,128(sp)
    a3d4:	ddc01f17 	ldw	r23,124(sp)
    a3d8:	dd801e17 	ldw	r22,120(sp)
    a3dc:	dd401d17 	ldw	r21,116(sp)
    a3e0:	dd001c17 	ldw	r20,112(sp)
    a3e4:	dcc01b17 	ldw	r19,108(sp)
    a3e8:	dc801a17 	ldw	r18,104(sp)
    a3ec:	dc401917 	ldw	r17,100(sp)
    a3f0:	dc001817 	ldw	r16,96(sp)
    a3f4:	dec02204 	addi	sp,sp,136
    a3f8:	f800283a 	ret
    a3fc:	d8c02317 	ldw	r3,140(sp)
    a400:	0089c3c4 	movi	r2,9999
    a404:	18800015 	stw	r2,0(r3)
    a408:	90017726 	beq	r18,zero,a9e8 <_dtoa_r+0x6dc>
    a40c:	00800074 	movhi	r2,1
    a410:	1099ed04 	addi	r2,r2,26548
    a414:	d9002517 	ldw	r4,148(sp)
    a418:	203fec26 	beq	r4,zero,a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a41c:	10c000c7 	ldb	r3,3(r2)
    a420:	1801781e 	bne	r3,zero,aa04 <_dtoa_r+0x6f8>
    a424:	10c000c4 	addi	r3,r2,3
    a428:	d9802517 	ldw	r6,148(sp)
    a42c:	30c00015 	stw	r3,0(r6)
    a430:	003fe606 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a434:	04e00034 	movhi	r19,32768
    a438:	9cffffc4 	addi	r19,r19,-1
    a43c:	00800044 	movi	r2,1
    a440:	8ce6703a 	and	r19,r17,r19
    a444:	80800015 	stw	r2,0(r16)
    a448:	9823883a 	mov	r17,r19
    a44c:	003fcc06 	br	a380 <__alt_exception_stack_pointer+0xf800a380>
    a450:	d8800204 	addi	r2,sp,8
    a454:	d8800015 	stw	r2,0(sp)
    a458:	d9c00104 	addi	r7,sp,4
    a45c:	900b883a 	mov	r5,r18
    a460:	980d883a 	mov	r6,r19
    a464:	e009883a 	mov	r4,fp
    a468:	8820d53a 	srli	r16,r17,20
    a46c:	000df080 	call	df08 <__d2b>
    a470:	d8800915 	stw	r2,36(sp)
    a474:	8001651e 	bne	r16,zero,aa0c <_dtoa_r+0x700>
    a478:	dd800217 	ldw	r22,8(sp)
    a47c:	dc000117 	ldw	r16,4(sp)
    a480:	00800804 	movi	r2,32
    a484:	b421883a 	add	r16,r22,r16
    a488:	80c10c84 	addi	r3,r16,1074
    a48c:	10c2d10e 	bge	r2,r3,afd4 <_dtoa_r+0xcc8>
    a490:	00801004 	movi	r2,64
    a494:	81010484 	addi	r4,r16,1042
    a498:	10c7c83a 	sub	r3,r2,r3
    a49c:	9108d83a 	srl	r4,r18,r4
    a4a0:	88e2983a 	sll	r17,r17,r3
    a4a4:	2448b03a 	or	r4,r4,r17
    a4a8:	00121280 	call	12128 <__floatunsidf>
    a4ac:	017f8434 	movhi	r5,65040
    a4b0:	01800044 	movi	r6,1
    a4b4:	1009883a 	mov	r4,r2
    a4b8:	194b883a 	add	r5,r3,r5
    a4bc:	843fffc4 	addi	r16,r16,-1
    a4c0:	d9801115 	stw	r6,68(sp)
    a4c4:	000d883a 	mov	r6,zero
    a4c8:	01cffe34 	movhi	r7,16376
    a4cc:	000666c0 	call	666c <__subdf3>
    a4d0:	0198dbf4 	movhi	r6,25455
    a4d4:	01cff4f4 	movhi	r7,16339
    a4d8:	3190d844 	addi	r6,r6,17249
    a4dc:	39e1e9c4 	addi	r7,r7,-30809
    a4e0:	1009883a 	mov	r4,r2
    a4e4:	180b883a 	mov	r5,r3
    a4e8:	0005e000 	call	5e00 <__muldf3>
    a4ec:	01a2d874 	movhi	r6,35681
    a4f0:	01cff1f4 	movhi	r7,16327
    a4f4:	31b22cc4 	addi	r6,r6,-14157
    a4f8:	39e28a04 	addi	r7,r7,-30168
    a4fc:	180b883a 	mov	r5,r3
    a500:	1009883a 	mov	r4,r2
    a504:	00053f00 	call	53f0 <__adddf3>
    a508:	8009883a 	mov	r4,r16
    a50c:	1029883a 	mov	r20,r2
    a510:	1823883a 	mov	r17,r3
    a514:	0006fe80 	call	6fe8 <__floatsidf>
    a518:	019427f4 	movhi	r6,20639
    a51c:	01cff4f4 	movhi	r7,16339
    a520:	319e7ec4 	addi	r6,r6,31227
    a524:	39d104c4 	addi	r7,r7,17427
    a528:	1009883a 	mov	r4,r2
    a52c:	180b883a 	mov	r5,r3
    a530:	0005e000 	call	5e00 <__muldf3>
    a534:	100d883a 	mov	r6,r2
    a538:	180f883a 	mov	r7,r3
    a53c:	a009883a 	mov	r4,r20
    a540:	880b883a 	mov	r5,r17
    a544:	00053f00 	call	53f0 <__adddf3>
    a548:	1009883a 	mov	r4,r2
    a54c:	180b883a 	mov	r5,r3
    a550:	1029883a 	mov	r20,r2
    a554:	1823883a 	mov	r17,r3
    a558:	0006f680 	call	6f68 <__fixdfsi>
    a55c:	000d883a 	mov	r6,zero
    a560:	000f883a 	mov	r7,zero
    a564:	a009883a 	mov	r4,r20
    a568:	880b883a 	mov	r5,r17
    a56c:	d8800515 	stw	r2,20(sp)
    a570:	00120340 	call	12034 <__ledf2>
    a574:	10028716 	blt	r2,zero,af94 <_dtoa_r+0xc88>
    a578:	d8c00517 	ldw	r3,20(sp)
    a57c:	00800584 	movi	r2,22
    a580:	10c27536 	bltu	r2,r3,af58 <_dtoa_r+0xc4c>
    a584:	180490fa 	slli	r2,r3,3
    a588:	00c00074 	movhi	r3,1
    a58c:	18da0804 	addi	r3,r3,26656
    a590:	1885883a 	add	r2,r3,r2
    a594:	11000017 	ldw	r4,0(r2)
    a598:	11400117 	ldw	r5,4(r2)
    a59c:	900d883a 	mov	r6,r18
    a5a0:	980f883a 	mov	r7,r19
    a5a4:	0005d240 	call	5d24 <__gedf2>
    a5a8:	00828d0e 	bge	zero,r2,afe0 <_dtoa_r+0xcd4>
    a5ac:	d9000517 	ldw	r4,20(sp)
    a5b0:	d8000e15 	stw	zero,56(sp)
    a5b4:	213fffc4 	addi	r4,r4,-1
    a5b8:	d9000515 	stw	r4,20(sp)
    a5bc:	b42dc83a 	sub	r22,r22,r16
    a5c0:	b5bfffc4 	addi	r22,r22,-1
    a5c4:	b0026f16 	blt	r22,zero,af84 <_dtoa_r+0xc78>
    a5c8:	d8000815 	stw	zero,32(sp)
    a5cc:	d9c00517 	ldw	r7,20(sp)
    a5d0:	38026416 	blt	r7,zero,af64 <_dtoa_r+0xc58>
    a5d4:	b1ed883a 	add	r22,r22,r7
    a5d8:	d9c00d15 	stw	r7,52(sp)
    a5dc:	d8000a15 	stw	zero,40(sp)
    a5e0:	d9800317 	ldw	r6,12(sp)
    a5e4:	00800244 	movi	r2,9
    a5e8:	11811436 	bltu	r2,r6,aa3c <_dtoa_r+0x730>
    a5ec:	00800144 	movi	r2,5
    a5f0:	1184e10e 	bge	r2,r6,b978 <_dtoa_r+0x166c>
    a5f4:	31bfff04 	addi	r6,r6,-4
    a5f8:	d9800315 	stw	r6,12(sp)
    a5fc:	0023883a 	mov	r17,zero
    a600:	d9800317 	ldw	r6,12(sp)
    a604:	008000c4 	movi	r2,3
    a608:	30836726 	beq	r6,r2,b3a8 <_dtoa_r+0x109c>
    a60c:	1183410e 	bge	r2,r6,b314 <_dtoa_r+0x1008>
    a610:	d9c00317 	ldw	r7,12(sp)
    a614:	00800104 	movi	r2,4
    a618:	38827c26 	beq	r7,r2,b00c <_dtoa_r+0xd00>
    a61c:	00800144 	movi	r2,5
    a620:	3884c41e 	bne	r7,r2,b934 <_dtoa_r+0x1628>
    a624:	00800044 	movi	r2,1
    a628:	d8800b15 	stw	r2,44(sp)
    a62c:	d8c00517 	ldw	r3,20(sp)
    a630:	d9002217 	ldw	r4,136(sp)
    a634:	1907883a 	add	r3,r3,r4
    a638:	19800044 	addi	r6,r3,1
    a63c:	d8c00c15 	stw	r3,48(sp)
    a640:	d9800615 	stw	r6,24(sp)
    a644:	0183a40e 	bge	zero,r6,b4d8 <_dtoa_r+0x11cc>
    a648:	d9800617 	ldw	r6,24(sp)
    a64c:	3021883a 	mov	r16,r6
    a650:	e0001115 	stw	zero,68(fp)
    a654:	008005c4 	movi	r2,23
    a658:	1184c92e 	bgeu	r2,r6,b980 <_dtoa_r+0x1674>
    a65c:	00c00044 	movi	r3,1
    a660:	00800104 	movi	r2,4
    a664:	1085883a 	add	r2,r2,r2
    a668:	11000504 	addi	r4,r2,20
    a66c:	180b883a 	mov	r5,r3
    a670:	18c00044 	addi	r3,r3,1
    a674:	313ffb2e 	bgeu	r6,r4,a664 <__alt_exception_stack_pointer+0xf800a664>
    a678:	e1401115 	stw	r5,68(fp)
    a67c:	e009883a 	mov	r4,fp
    a680:	000d1b80 	call	d1b8 <_Balloc>
    a684:	d8800715 	stw	r2,28(sp)
    a688:	e0801015 	stw	r2,64(fp)
    a68c:	00800384 	movi	r2,14
    a690:	1400f736 	bltu	r2,r16,aa70 <_dtoa_r+0x764>
    a694:	8800f626 	beq	r17,zero,aa70 <_dtoa_r+0x764>
    a698:	d9c00517 	ldw	r7,20(sp)
    a69c:	01c39a0e 	bge	zero,r7,b508 <_dtoa_r+0x11fc>
    a6a0:	388003cc 	andi	r2,r7,15
    a6a4:	100490fa 	slli	r2,r2,3
    a6a8:	382bd13a 	srai	r21,r7,4
    a6ac:	00c00074 	movhi	r3,1
    a6b0:	18da0804 	addi	r3,r3,26656
    a6b4:	1885883a 	add	r2,r3,r2
    a6b8:	a8c0040c 	andi	r3,r21,16
    a6bc:	12400017 	ldw	r9,0(r2)
    a6c0:	12000117 	ldw	r8,4(r2)
    a6c4:	18037926 	beq	r3,zero,b4ac <_dtoa_r+0x11a0>
    a6c8:	00800074 	movhi	r2,1
    a6cc:	1099fe04 	addi	r2,r2,26616
    a6d0:	11800817 	ldw	r6,32(r2)
    a6d4:	11c00917 	ldw	r7,36(r2)
    a6d8:	9009883a 	mov	r4,r18
    a6dc:	980b883a 	mov	r5,r19
    a6e0:	da001715 	stw	r8,92(sp)
    a6e4:	da401615 	stw	r9,88(sp)
    a6e8:	00116640 	call	11664 <__divdf3>
    a6ec:	da001717 	ldw	r8,92(sp)
    a6f0:	da401617 	ldw	r9,88(sp)
    a6f4:	ad4003cc 	andi	r21,r21,15
    a6f8:	040000c4 	movi	r16,3
    a6fc:	1023883a 	mov	r17,r2
    a700:	1829883a 	mov	r20,r3
    a704:	a8001126 	beq	r21,zero,a74c <_dtoa_r+0x440>
    a708:	05c00074 	movhi	r23,1
    a70c:	bdd9fe04 	addi	r23,r23,26616
    a710:	4805883a 	mov	r2,r9
    a714:	4007883a 	mov	r3,r8
    a718:	a980004c 	andi	r6,r21,1
    a71c:	1009883a 	mov	r4,r2
    a720:	a82bd07a 	srai	r21,r21,1
    a724:	180b883a 	mov	r5,r3
    a728:	30000426 	beq	r6,zero,a73c <_dtoa_r+0x430>
    a72c:	b9800017 	ldw	r6,0(r23)
    a730:	b9c00117 	ldw	r7,4(r23)
    a734:	84000044 	addi	r16,r16,1
    a738:	0005e000 	call	5e00 <__muldf3>
    a73c:	bdc00204 	addi	r23,r23,8
    a740:	a83ff51e 	bne	r21,zero,a718 <__alt_exception_stack_pointer+0xf800a718>
    a744:	1013883a 	mov	r9,r2
    a748:	1811883a 	mov	r8,r3
    a74c:	480d883a 	mov	r6,r9
    a750:	400f883a 	mov	r7,r8
    a754:	8809883a 	mov	r4,r17
    a758:	a00b883a 	mov	r5,r20
    a75c:	00116640 	call	11664 <__divdf3>
    a760:	d8800f15 	stw	r2,60(sp)
    a764:	d8c01015 	stw	r3,64(sp)
    a768:	d8c00e17 	ldw	r3,56(sp)
    a76c:	18000626 	beq	r3,zero,a788 <_dtoa_r+0x47c>
    a770:	d9000f17 	ldw	r4,60(sp)
    a774:	d9401017 	ldw	r5,64(sp)
    a778:	000d883a 	mov	r6,zero
    a77c:	01cffc34 	movhi	r7,16368
    a780:	00120340 	call	12034 <__ledf2>
    a784:	10040b16 	blt	r2,zero,b7b4 <_dtoa_r+0x14a8>
    a788:	8009883a 	mov	r4,r16
    a78c:	0006fe80 	call	6fe8 <__floatsidf>
    a790:	d9800f17 	ldw	r6,60(sp)
    a794:	d9c01017 	ldw	r7,64(sp)
    a798:	1009883a 	mov	r4,r2
    a79c:	180b883a 	mov	r5,r3
    a7a0:	0005e000 	call	5e00 <__muldf3>
    a7a4:	000d883a 	mov	r6,zero
    a7a8:	01d00734 	movhi	r7,16412
    a7ac:	1009883a 	mov	r4,r2
    a7b0:	180b883a 	mov	r5,r3
    a7b4:	00053f00 	call	53f0 <__adddf3>
    a7b8:	1021883a 	mov	r16,r2
    a7bc:	d8800617 	ldw	r2,24(sp)
    a7c0:	047f3034 	movhi	r17,64704
    a7c4:	1c63883a 	add	r17,r3,r17
    a7c8:	10031826 	beq	r2,zero,b42c <_dtoa_r+0x1120>
    a7cc:	d8c00517 	ldw	r3,20(sp)
    a7d0:	db000617 	ldw	r12,24(sp)
    a7d4:	d8c01315 	stw	r3,76(sp)
    a7d8:	d9000b17 	ldw	r4,44(sp)
    a7dc:	20038f26 	beq	r4,zero,b61c <_dtoa_r+0x1310>
    a7e0:	60bfffc4 	addi	r2,r12,-1
    a7e4:	100490fa 	slli	r2,r2,3
    a7e8:	00c00074 	movhi	r3,1
    a7ec:	18da0804 	addi	r3,r3,26656
    a7f0:	1885883a 	add	r2,r3,r2
    a7f4:	11800017 	ldw	r6,0(r2)
    a7f8:	11c00117 	ldw	r7,4(r2)
    a7fc:	d8800717 	ldw	r2,28(sp)
    a800:	0009883a 	mov	r4,zero
    a804:	014ff834 	movhi	r5,16352
    a808:	db001615 	stw	r12,88(sp)
    a80c:	15c00044 	addi	r23,r2,1
    a810:	00116640 	call	11664 <__divdf3>
    a814:	800d883a 	mov	r6,r16
    a818:	880f883a 	mov	r7,r17
    a81c:	1009883a 	mov	r4,r2
    a820:	180b883a 	mov	r5,r3
    a824:	000666c0 	call	666c <__subdf3>
    a828:	d9401017 	ldw	r5,64(sp)
    a82c:	d9000f17 	ldw	r4,60(sp)
    a830:	102b883a 	mov	r21,r2
    a834:	d8c01215 	stw	r3,72(sp)
    a838:	0006f680 	call	6f68 <__fixdfsi>
    a83c:	1009883a 	mov	r4,r2
    a840:	1029883a 	mov	r20,r2
    a844:	0006fe80 	call	6fe8 <__floatsidf>
    a848:	d9000f17 	ldw	r4,60(sp)
    a84c:	d9401017 	ldw	r5,64(sp)
    a850:	100d883a 	mov	r6,r2
    a854:	180f883a 	mov	r7,r3
    a858:	000666c0 	call	666c <__subdf3>
    a85c:	1823883a 	mov	r17,r3
    a860:	d8c00717 	ldw	r3,28(sp)
    a864:	d9401217 	ldw	r5,72(sp)
    a868:	a2000c04 	addi	r8,r20,48
    a86c:	1021883a 	mov	r16,r2
    a870:	1a000005 	stb	r8,0(r3)
    a874:	800d883a 	mov	r6,r16
    a878:	880f883a 	mov	r7,r17
    a87c:	a809883a 	mov	r4,r21
    a880:	4029883a 	mov	r20,r8
    a884:	0005d240 	call	5d24 <__gedf2>
    a888:	00841d16 	blt	zero,r2,b900 <_dtoa_r+0x15f4>
    a88c:	800d883a 	mov	r6,r16
    a890:	880f883a 	mov	r7,r17
    a894:	0009883a 	mov	r4,zero
    a898:	014ffc34 	movhi	r5,16368
    a89c:	000666c0 	call	666c <__subdf3>
    a8a0:	d9401217 	ldw	r5,72(sp)
    a8a4:	100d883a 	mov	r6,r2
    a8a8:	180f883a 	mov	r7,r3
    a8ac:	a809883a 	mov	r4,r21
    a8b0:	0005d240 	call	5d24 <__gedf2>
    a8b4:	db001617 	ldw	r12,88(sp)
    a8b8:	00840e16 	blt	zero,r2,b8f4 <_dtoa_r+0x15e8>
    a8bc:	00800044 	movi	r2,1
    a8c0:	13006b0e 	bge	r2,r12,aa70 <_dtoa_r+0x764>
    a8c4:	d9000717 	ldw	r4,28(sp)
    a8c8:	dd800f15 	stw	r22,60(sp)
    a8cc:	dcc01015 	stw	r19,64(sp)
    a8d0:	2319883a 	add	r12,r4,r12
    a8d4:	dcc01217 	ldw	r19,72(sp)
    a8d8:	602d883a 	mov	r22,r12
    a8dc:	dc801215 	stw	r18,72(sp)
    a8e0:	b825883a 	mov	r18,r23
    a8e4:	00000906 	br	a90c <_dtoa_r+0x600>
    a8e8:	000666c0 	call	666c <__subdf3>
    a8ec:	a80d883a 	mov	r6,r21
    a8f0:	980f883a 	mov	r7,r19
    a8f4:	1009883a 	mov	r4,r2
    a8f8:	180b883a 	mov	r5,r3
    a8fc:	00120340 	call	12034 <__ledf2>
    a900:	1003e816 	blt	r2,zero,b8a4 <_dtoa_r+0x1598>
    a904:	b825883a 	mov	r18,r23
    a908:	bd83e926 	beq	r23,r22,b8b0 <_dtoa_r+0x15a4>
    a90c:	a809883a 	mov	r4,r21
    a910:	980b883a 	mov	r5,r19
    a914:	000d883a 	mov	r6,zero
    a918:	01d00934 	movhi	r7,16420
    a91c:	0005e000 	call	5e00 <__muldf3>
    a920:	000d883a 	mov	r6,zero
    a924:	01d00934 	movhi	r7,16420
    a928:	8009883a 	mov	r4,r16
    a92c:	880b883a 	mov	r5,r17
    a930:	102b883a 	mov	r21,r2
    a934:	1827883a 	mov	r19,r3
    a938:	0005e000 	call	5e00 <__muldf3>
    a93c:	180b883a 	mov	r5,r3
    a940:	1009883a 	mov	r4,r2
    a944:	1821883a 	mov	r16,r3
    a948:	1023883a 	mov	r17,r2
    a94c:	0006f680 	call	6f68 <__fixdfsi>
    a950:	1009883a 	mov	r4,r2
    a954:	1029883a 	mov	r20,r2
    a958:	0006fe80 	call	6fe8 <__floatsidf>
    a95c:	8809883a 	mov	r4,r17
    a960:	800b883a 	mov	r5,r16
    a964:	100d883a 	mov	r6,r2
    a968:	180f883a 	mov	r7,r3
    a96c:	000666c0 	call	666c <__subdf3>
    a970:	a5000c04 	addi	r20,r20,48
    a974:	a80d883a 	mov	r6,r21
    a978:	980f883a 	mov	r7,r19
    a97c:	1009883a 	mov	r4,r2
    a980:	180b883a 	mov	r5,r3
    a984:	95000005 	stb	r20,0(r18)
    a988:	1021883a 	mov	r16,r2
    a98c:	1823883a 	mov	r17,r3
    a990:	00120340 	call	12034 <__ledf2>
    a994:	bdc00044 	addi	r23,r23,1
    a998:	800d883a 	mov	r6,r16
    a99c:	880f883a 	mov	r7,r17
    a9a0:	0009883a 	mov	r4,zero
    a9a4:	014ffc34 	movhi	r5,16368
    a9a8:	103fcf0e 	bge	r2,zero,a8e8 <__alt_exception_stack_pointer+0xf800a8e8>
    a9ac:	d8c01317 	ldw	r3,76(sp)
    a9b0:	d8c00515 	stw	r3,20(sp)
    a9b4:	d9400917 	ldw	r5,36(sp)
    a9b8:	e009883a 	mov	r4,fp
    a9bc:	000d2600 	call	d260 <_Bfree>
    a9c0:	d9000517 	ldw	r4,20(sp)
    a9c4:	d9802317 	ldw	r6,140(sp)
    a9c8:	d9c02517 	ldw	r7,148(sp)
    a9cc:	b8000005 	stb	zero,0(r23)
    a9d0:	20800044 	addi	r2,r4,1
    a9d4:	30800015 	stw	r2,0(r6)
    a9d8:	3802aa26 	beq	r7,zero,b484 <_dtoa_r+0x1178>
    a9dc:	3dc00015 	stw	r23,0(r7)
    a9e0:	d8800717 	ldw	r2,28(sp)
    a9e4:	003e7906 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    a9e8:	00800434 	movhi	r2,16
    a9ec:	10bfffc4 	addi	r2,r2,-1
    a9f0:	88a2703a 	and	r17,r17,r2
    a9f4:	883e851e 	bne	r17,zero,a40c <__alt_exception_stack_pointer+0xf800a40c>
    a9f8:	00800074 	movhi	r2,1
    a9fc:	1099ea04 	addi	r2,r2,26536
    aa00:	003e8406 	br	a414 <__alt_exception_stack_pointer+0xf800a414>
    aa04:	10c00204 	addi	r3,r2,8
    aa08:	003e8706 	br	a428 <__alt_exception_stack_pointer+0xf800a428>
    aa0c:	01400434 	movhi	r5,16
    aa10:	297fffc4 	addi	r5,r5,-1
    aa14:	994a703a 	and	r5,r19,r5
    aa18:	9009883a 	mov	r4,r18
    aa1c:	843f0044 	addi	r16,r16,-1023
    aa20:	294ffc34 	orhi	r5,r5,16368
    aa24:	dd800217 	ldw	r22,8(sp)
    aa28:	d8001115 	stw	zero,68(sp)
    aa2c:	003ea506 	br	a4c4 <__alt_exception_stack_pointer+0xf800a4c4>
    aa30:	00800074 	movhi	r2,1
    aa34:	1099e104 	addi	r2,r2,26500
    aa38:	003e6406 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    aa3c:	e0001115 	stw	zero,68(fp)
    aa40:	000b883a 	mov	r5,zero
    aa44:	e009883a 	mov	r4,fp
    aa48:	000d1b80 	call	d1b8 <_Balloc>
    aa4c:	01bfffc4 	movi	r6,-1
    aa50:	01c00044 	movi	r7,1
    aa54:	d8800715 	stw	r2,28(sp)
    aa58:	d9800c15 	stw	r6,48(sp)
    aa5c:	e0801015 	stw	r2,64(fp)
    aa60:	d8000315 	stw	zero,12(sp)
    aa64:	d9c00b15 	stw	r7,44(sp)
    aa68:	d9800615 	stw	r6,24(sp)
    aa6c:	d8002215 	stw	zero,136(sp)
    aa70:	d8800117 	ldw	r2,4(sp)
    aa74:	10008916 	blt	r2,zero,ac9c <_dtoa_r+0x990>
    aa78:	d9000517 	ldw	r4,20(sp)
    aa7c:	00c00384 	movi	r3,14
    aa80:	19008616 	blt	r3,r4,ac9c <_dtoa_r+0x990>
    aa84:	200490fa 	slli	r2,r4,3
    aa88:	00c00074 	movhi	r3,1
    aa8c:	d9802217 	ldw	r6,136(sp)
    aa90:	18da0804 	addi	r3,r3,26656
    aa94:	1885883a 	add	r2,r3,r2
    aa98:	14000017 	ldw	r16,0(r2)
    aa9c:	14400117 	ldw	r17,4(r2)
    aaa0:	30016316 	blt	r6,zero,b030 <_dtoa_r+0xd24>
    aaa4:	800d883a 	mov	r6,r16
    aaa8:	880f883a 	mov	r7,r17
    aaac:	9009883a 	mov	r4,r18
    aab0:	980b883a 	mov	r5,r19
    aab4:	00116640 	call	11664 <__divdf3>
    aab8:	180b883a 	mov	r5,r3
    aabc:	1009883a 	mov	r4,r2
    aac0:	0006f680 	call	6f68 <__fixdfsi>
    aac4:	1009883a 	mov	r4,r2
    aac8:	102b883a 	mov	r21,r2
    aacc:	0006fe80 	call	6fe8 <__floatsidf>
    aad0:	800d883a 	mov	r6,r16
    aad4:	880f883a 	mov	r7,r17
    aad8:	1009883a 	mov	r4,r2
    aadc:	180b883a 	mov	r5,r3
    aae0:	0005e000 	call	5e00 <__muldf3>
    aae4:	100d883a 	mov	r6,r2
    aae8:	180f883a 	mov	r7,r3
    aaec:	9009883a 	mov	r4,r18
    aaf0:	980b883a 	mov	r5,r19
    aaf4:	000666c0 	call	666c <__subdf3>
    aaf8:	d9c00717 	ldw	r7,28(sp)
    aafc:	1009883a 	mov	r4,r2
    ab00:	a8800c04 	addi	r2,r21,48
    ab04:	38800005 	stb	r2,0(r7)
    ab08:	3dc00044 	addi	r23,r7,1
    ab0c:	d9c00617 	ldw	r7,24(sp)
    ab10:	01800044 	movi	r6,1
    ab14:	180b883a 	mov	r5,r3
    ab18:	2005883a 	mov	r2,r4
    ab1c:	39803826 	beq	r7,r6,ac00 <_dtoa_r+0x8f4>
    ab20:	000d883a 	mov	r6,zero
    ab24:	01d00934 	movhi	r7,16420
    ab28:	0005e000 	call	5e00 <__muldf3>
    ab2c:	000d883a 	mov	r6,zero
    ab30:	000f883a 	mov	r7,zero
    ab34:	1009883a 	mov	r4,r2
    ab38:	180b883a 	mov	r5,r3
    ab3c:	1025883a 	mov	r18,r2
    ab40:	1827883a 	mov	r19,r3
    ab44:	0005c9c0 	call	5c9c <__eqdf2>
    ab48:	103f9a26 	beq	r2,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    ab4c:	d9c00617 	ldw	r7,24(sp)
    ab50:	d8c00717 	ldw	r3,28(sp)
    ab54:	b829883a 	mov	r20,r23
    ab58:	38bfffc4 	addi	r2,r7,-1
    ab5c:	18ad883a 	add	r22,r3,r2
    ab60:	00000a06 	br	ab8c <_dtoa_r+0x880>
    ab64:	0005e000 	call	5e00 <__muldf3>
    ab68:	000d883a 	mov	r6,zero
    ab6c:	000f883a 	mov	r7,zero
    ab70:	1009883a 	mov	r4,r2
    ab74:	180b883a 	mov	r5,r3
    ab78:	1025883a 	mov	r18,r2
    ab7c:	1827883a 	mov	r19,r3
    ab80:	b829883a 	mov	r20,r23
    ab84:	0005c9c0 	call	5c9c <__eqdf2>
    ab88:	103f8a26 	beq	r2,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    ab8c:	800d883a 	mov	r6,r16
    ab90:	880f883a 	mov	r7,r17
    ab94:	9009883a 	mov	r4,r18
    ab98:	980b883a 	mov	r5,r19
    ab9c:	00116640 	call	11664 <__divdf3>
    aba0:	180b883a 	mov	r5,r3
    aba4:	1009883a 	mov	r4,r2
    aba8:	0006f680 	call	6f68 <__fixdfsi>
    abac:	1009883a 	mov	r4,r2
    abb0:	102b883a 	mov	r21,r2
    abb4:	0006fe80 	call	6fe8 <__floatsidf>
    abb8:	800d883a 	mov	r6,r16
    abbc:	880f883a 	mov	r7,r17
    abc0:	1009883a 	mov	r4,r2
    abc4:	180b883a 	mov	r5,r3
    abc8:	0005e000 	call	5e00 <__muldf3>
    abcc:	100d883a 	mov	r6,r2
    abd0:	180f883a 	mov	r7,r3
    abd4:	9009883a 	mov	r4,r18
    abd8:	980b883a 	mov	r5,r19
    abdc:	000666c0 	call	666c <__subdf3>
    abe0:	aa000c04 	addi	r8,r21,48
    abe4:	a2000005 	stb	r8,0(r20)
    abe8:	000d883a 	mov	r6,zero
    abec:	01d00934 	movhi	r7,16420
    abf0:	1009883a 	mov	r4,r2
    abf4:	180b883a 	mov	r5,r3
    abf8:	a5c00044 	addi	r23,r20,1
    abfc:	b53fd91e 	bne	r22,r20,ab64 <__alt_exception_stack_pointer+0xf800ab64>
    ac00:	100d883a 	mov	r6,r2
    ac04:	180f883a 	mov	r7,r3
    ac08:	1009883a 	mov	r4,r2
    ac0c:	180b883a 	mov	r5,r3
    ac10:	00053f00 	call	53f0 <__adddf3>
    ac14:	100d883a 	mov	r6,r2
    ac18:	180f883a 	mov	r7,r3
    ac1c:	8009883a 	mov	r4,r16
    ac20:	880b883a 	mov	r5,r17
    ac24:	1027883a 	mov	r19,r2
    ac28:	1825883a 	mov	r18,r3
    ac2c:	00120340 	call	12034 <__ledf2>
    ac30:	10000816 	blt	r2,zero,ac54 <_dtoa_r+0x948>
    ac34:	980d883a 	mov	r6,r19
    ac38:	900f883a 	mov	r7,r18
    ac3c:	8009883a 	mov	r4,r16
    ac40:	880b883a 	mov	r5,r17
    ac44:	0005c9c0 	call	5c9c <__eqdf2>
    ac48:	103f5a1e 	bne	r2,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    ac4c:	ad40004c 	andi	r21,r21,1
    ac50:	a83f5826 	beq	r21,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    ac54:	bd3fffc3 	ldbu	r20,-1(r23)
    ac58:	b8bfffc4 	addi	r2,r23,-1
    ac5c:	1007883a 	mov	r3,r2
    ac60:	01400e44 	movi	r5,57
    ac64:	d9800717 	ldw	r6,28(sp)
    ac68:	00000506 	br	ac80 <_dtoa_r+0x974>
    ac6c:	18ffffc4 	addi	r3,r3,-1
    ac70:	11824726 	beq	r2,r6,b590 <_dtoa_r+0x1284>
    ac74:	1d000003 	ldbu	r20,0(r3)
    ac78:	102f883a 	mov	r23,r2
    ac7c:	10bfffc4 	addi	r2,r2,-1
    ac80:	a1003fcc 	andi	r4,r20,255
    ac84:	2100201c 	xori	r4,r4,128
    ac88:	213fe004 	addi	r4,r4,-128
    ac8c:	217ff726 	beq	r4,r5,ac6c <__alt_exception_stack_pointer+0xf800ac6c>
    ac90:	a2000044 	addi	r8,r20,1
    ac94:	12000005 	stb	r8,0(r2)
    ac98:	003f4606 	br	a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    ac9c:	d9000b17 	ldw	r4,44(sp)
    aca0:	2000c826 	beq	r4,zero,afc4 <_dtoa_r+0xcb8>
    aca4:	d9800317 	ldw	r6,12(sp)
    aca8:	00c00044 	movi	r3,1
    acac:	1980f90e 	bge	r3,r6,b094 <_dtoa_r+0xd88>
    acb0:	d8800617 	ldw	r2,24(sp)
    acb4:	d8c00a17 	ldw	r3,40(sp)
    acb8:	157fffc4 	addi	r21,r2,-1
    acbc:	1d41f316 	blt	r3,r21,b48c <_dtoa_r+0x1180>
    acc0:	1d6bc83a 	sub	r21,r3,r21
    acc4:	d9c00617 	ldw	r7,24(sp)
    acc8:	3802aa16 	blt	r7,zero,b774 <_dtoa_r+0x1468>
    accc:	dd000817 	ldw	r20,32(sp)
    acd0:	d8800617 	ldw	r2,24(sp)
    acd4:	d8c00817 	ldw	r3,32(sp)
    acd8:	01400044 	movi	r5,1
    acdc:	e009883a 	mov	r4,fp
    ace0:	1887883a 	add	r3,r3,r2
    ace4:	d8c00815 	stw	r3,32(sp)
    ace8:	b0ad883a 	add	r22,r22,r2
    acec:	000d5ec0 	call	d5ec <__i2b>
    acf0:	1023883a 	mov	r17,r2
    acf4:	a0000826 	beq	r20,zero,ad18 <_dtoa_r+0xa0c>
    acf8:	0580070e 	bge	zero,r22,ad18 <_dtoa_r+0xa0c>
    acfc:	a005883a 	mov	r2,r20
    ad00:	b500b916 	blt	r22,r20,afe8 <_dtoa_r+0xcdc>
    ad04:	d9000817 	ldw	r4,32(sp)
    ad08:	a0a9c83a 	sub	r20,r20,r2
    ad0c:	b0adc83a 	sub	r22,r22,r2
    ad10:	2089c83a 	sub	r4,r4,r2
    ad14:	d9000815 	stw	r4,32(sp)
    ad18:	d9800a17 	ldw	r6,40(sp)
    ad1c:	0181810e 	bge	zero,r6,b324 <_dtoa_r+0x1018>
    ad20:	d9c00b17 	ldw	r7,44(sp)
    ad24:	3800b326 	beq	r7,zero,aff4 <_dtoa_r+0xce8>
    ad28:	a800b226 	beq	r21,zero,aff4 <_dtoa_r+0xce8>
    ad2c:	880b883a 	mov	r5,r17
    ad30:	a80d883a 	mov	r6,r21
    ad34:	e009883a 	mov	r4,fp
    ad38:	000d8b40 	call	d8b4 <__pow5mult>
    ad3c:	d9800917 	ldw	r6,36(sp)
    ad40:	100b883a 	mov	r5,r2
    ad44:	e009883a 	mov	r4,fp
    ad48:	1023883a 	mov	r17,r2
    ad4c:	000d6280 	call	d628 <__multiply>
    ad50:	1021883a 	mov	r16,r2
    ad54:	d8800a17 	ldw	r2,40(sp)
    ad58:	d9400917 	ldw	r5,36(sp)
    ad5c:	e009883a 	mov	r4,fp
    ad60:	1545c83a 	sub	r2,r2,r21
    ad64:	d8800a15 	stw	r2,40(sp)
    ad68:	000d2600 	call	d260 <_Bfree>
    ad6c:	d8c00a17 	ldw	r3,40(sp)
    ad70:	18009f1e 	bne	r3,zero,aff0 <_dtoa_r+0xce4>
    ad74:	05c00044 	movi	r23,1
    ad78:	e009883a 	mov	r4,fp
    ad7c:	b80b883a 	mov	r5,r23
    ad80:	000d5ec0 	call	d5ec <__i2b>
    ad84:	d9000d17 	ldw	r4,52(sp)
    ad88:	102b883a 	mov	r21,r2
    ad8c:	2000ce26 	beq	r4,zero,b0c8 <_dtoa_r+0xdbc>
    ad90:	200d883a 	mov	r6,r4
    ad94:	100b883a 	mov	r5,r2
    ad98:	e009883a 	mov	r4,fp
    ad9c:	000d8b40 	call	d8b4 <__pow5mult>
    ada0:	d9800317 	ldw	r6,12(sp)
    ada4:	102b883a 	mov	r21,r2
    ada8:	b981810e 	bge	r23,r6,b3b0 <_dtoa_r+0x10a4>
    adac:	0027883a 	mov	r19,zero
    adb0:	a8800417 	ldw	r2,16(r21)
    adb4:	05c00804 	movi	r23,32
    adb8:	10800104 	addi	r2,r2,4
    adbc:	1085883a 	add	r2,r2,r2
    adc0:	1085883a 	add	r2,r2,r2
    adc4:	a885883a 	add	r2,r21,r2
    adc8:	11000017 	ldw	r4,0(r2)
    adcc:	000d4d40 	call	d4d4 <__hi0bits>
    add0:	b885c83a 	sub	r2,r23,r2
    add4:	1585883a 	add	r2,r2,r22
    add8:	108007cc 	andi	r2,r2,31
    addc:	1000b326 	beq	r2,zero,b0ac <_dtoa_r+0xda0>
    ade0:	00c00804 	movi	r3,32
    ade4:	1887c83a 	sub	r3,r3,r2
    ade8:	01000104 	movi	r4,4
    adec:	20c2cd0e 	bge	r4,r3,b924 <_dtoa_r+0x1618>
    adf0:	00c00704 	movi	r3,28
    adf4:	1885c83a 	sub	r2,r3,r2
    adf8:	d8c00817 	ldw	r3,32(sp)
    adfc:	a0a9883a 	add	r20,r20,r2
    ae00:	b0ad883a 	add	r22,r22,r2
    ae04:	1887883a 	add	r3,r3,r2
    ae08:	d8c00815 	stw	r3,32(sp)
    ae0c:	d9800817 	ldw	r6,32(sp)
    ae10:	0180040e 	bge	zero,r6,ae24 <_dtoa_r+0xb18>
    ae14:	800b883a 	mov	r5,r16
    ae18:	e009883a 	mov	r4,fp
    ae1c:	000d9f40 	call	d9f4 <__lshift>
    ae20:	1021883a 	mov	r16,r2
    ae24:	0580050e 	bge	zero,r22,ae3c <_dtoa_r+0xb30>
    ae28:	a80b883a 	mov	r5,r21
    ae2c:	b00d883a 	mov	r6,r22
    ae30:	e009883a 	mov	r4,fp
    ae34:	000d9f40 	call	d9f4 <__lshift>
    ae38:	102b883a 	mov	r21,r2
    ae3c:	d9c00e17 	ldw	r7,56(sp)
    ae40:	3801211e 	bne	r7,zero,b2c8 <_dtoa_r+0xfbc>
    ae44:	d9800617 	ldw	r6,24(sp)
    ae48:	0181380e 	bge	zero,r6,b32c <_dtoa_r+0x1020>
    ae4c:	d8c00b17 	ldw	r3,44(sp)
    ae50:	1800ab1e 	bne	r3,zero,b100 <_dtoa_r+0xdf4>
    ae54:	dc800717 	ldw	r18,28(sp)
    ae58:	dcc00617 	ldw	r19,24(sp)
    ae5c:	9029883a 	mov	r20,r18
    ae60:	00000206 	br	ae6c <_dtoa_r+0xb60>
    ae64:	000d2880 	call	d288 <__multadd>
    ae68:	1021883a 	mov	r16,r2
    ae6c:	a80b883a 	mov	r5,r21
    ae70:	8009883a 	mov	r4,r16
    ae74:	000a0e40 	call	a0e4 <quorem>
    ae78:	10800c04 	addi	r2,r2,48
    ae7c:	90800005 	stb	r2,0(r18)
    ae80:	94800044 	addi	r18,r18,1
    ae84:	9507c83a 	sub	r3,r18,r20
    ae88:	000f883a 	mov	r7,zero
    ae8c:	01800284 	movi	r6,10
    ae90:	800b883a 	mov	r5,r16
    ae94:	e009883a 	mov	r4,fp
    ae98:	1cfff216 	blt	r3,r19,ae64 <__alt_exception_stack_pointer+0xf800ae64>
    ae9c:	1011883a 	mov	r8,r2
    aea0:	d8800617 	ldw	r2,24(sp)
    aea4:	0082370e 	bge	zero,r2,b784 <_dtoa_r+0x1478>
    aea8:	d9000717 	ldw	r4,28(sp)
    aeac:	0025883a 	mov	r18,zero
    aeb0:	20af883a 	add	r23,r4,r2
    aeb4:	01800044 	movi	r6,1
    aeb8:	800b883a 	mov	r5,r16
    aebc:	e009883a 	mov	r4,fp
    aec0:	da001715 	stw	r8,92(sp)
    aec4:	000d9f40 	call	d9f4 <__lshift>
    aec8:	a80b883a 	mov	r5,r21
    aecc:	1009883a 	mov	r4,r2
    aed0:	d8800915 	stw	r2,36(sp)
    aed4:	000db3c0 	call	db3c <__mcmp>
    aed8:	da001717 	ldw	r8,92(sp)
    aedc:	0081800e 	bge	zero,r2,b4e0 <_dtoa_r+0x11d4>
    aee0:	b93fffc3 	ldbu	r4,-1(r23)
    aee4:	b8bfffc4 	addi	r2,r23,-1
    aee8:	1007883a 	mov	r3,r2
    aeec:	01800e44 	movi	r6,57
    aef0:	d9c00717 	ldw	r7,28(sp)
    aef4:	00000506 	br	af0c <_dtoa_r+0xc00>
    aef8:	18ffffc4 	addi	r3,r3,-1
    aefc:	11c12326 	beq	r2,r7,b38c <_dtoa_r+0x1080>
    af00:	19000003 	ldbu	r4,0(r3)
    af04:	102f883a 	mov	r23,r2
    af08:	10bfffc4 	addi	r2,r2,-1
    af0c:	21403fcc 	andi	r5,r4,255
    af10:	2940201c 	xori	r5,r5,128
    af14:	297fe004 	addi	r5,r5,-128
    af18:	29bff726 	beq	r5,r6,aef8 <__alt_exception_stack_pointer+0xf800aef8>
    af1c:	21000044 	addi	r4,r4,1
    af20:	11000005 	stb	r4,0(r2)
    af24:	a80b883a 	mov	r5,r21
    af28:	e009883a 	mov	r4,fp
    af2c:	000d2600 	call	d260 <_Bfree>
    af30:	883ea026 	beq	r17,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    af34:	90000426 	beq	r18,zero,af48 <_dtoa_r+0xc3c>
    af38:	94400326 	beq	r18,r17,af48 <_dtoa_r+0xc3c>
    af3c:	900b883a 	mov	r5,r18
    af40:	e009883a 	mov	r4,fp
    af44:	000d2600 	call	d260 <_Bfree>
    af48:	880b883a 	mov	r5,r17
    af4c:	e009883a 	mov	r4,fp
    af50:	000d2600 	call	d260 <_Bfree>
    af54:	003e9706 	br	a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    af58:	01800044 	movi	r6,1
    af5c:	d9800e15 	stw	r6,56(sp)
    af60:	003d9606 	br	a5bc <__alt_exception_stack_pointer+0xf800a5bc>
    af64:	d8800817 	ldw	r2,32(sp)
    af68:	d8c00517 	ldw	r3,20(sp)
    af6c:	d8000d15 	stw	zero,52(sp)
    af70:	10c5c83a 	sub	r2,r2,r3
    af74:	00c9c83a 	sub	r4,zero,r3
    af78:	d8800815 	stw	r2,32(sp)
    af7c:	d9000a15 	stw	r4,40(sp)
    af80:	003d9706 	br	a5e0 <__alt_exception_stack_pointer+0xf800a5e0>
    af84:	05adc83a 	sub	r22,zero,r22
    af88:	dd800815 	stw	r22,32(sp)
    af8c:	002d883a 	mov	r22,zero
    af90:	003d8e06 	br	a5cc <__alt_exception_stack_pointer+0xf800a5cc>
    af94:	d9000517 	ldw	r4,20(sp)
    af98:	0006fe80 	call	6fe8 <__floatsidf>
    af9c:	100d883a 	mov	r6,r2
    afa0:	180f883a 	mov	r7,r3
    afa4:	a009883a 	mov	r4,r20
    afa8:	880b883a 	mov	r5,r17
    afac:	0005c9c0 	call	5c9c <__eqdf2>
    afb0:	103d7126 	beq	r2,zero,a578 <__alt_exception_stack_pointer+0xf800a578>
    afb4:	d9c00517 	ldw	r7,20(sp)
    afb8:	39ffffc4 	addi	r7,r7,-1
    afbc:	d9c00515 	stw	r7,20(sp)
    afc0:	003d6d06 	br	a578 <__alt_exception_stack_pointer+0xf800a578>
    afc4:	dd400a17 	ldw	r21,40(sp)
    afc8:	dd000817 	ldw	r20,32(sp)
    afcc:	0023883a 	mov	r17,zero
    afd0:	003f4806 	br	acf4 <__alt_exception_stack_pointer+0xf800acf4>
    afd4:	10e3c83a 	sub	r17,r2,r3
    afd8:	9448983a 	sll	r4,r18,r17
    afdc:	003d3206 	br	a4a8 <__alt_exception_stack_pointer+0xf800a4a8>
    afe0:	d8000e15 	stw	zero,56(sp)
    afe4:	003d7506 	br	a5bc <__alt_exception_stack_pointer+0xf800a5bc>
    afe8:	b005883a 	mov	r2,r22
    afec:	003f4506 	br	ad04 <__alt_exception_stack_pointer+0xf800ad04>
    aff0:	dc000915 	stw	r16,36(sp)
    aff4:	d9800a17 	ldw	r6,40(sp)
    aff8:	d9400917 	ldw	r5,36(sp)
    affc:	e009883a 	mov	r4,fp
    b000:	000d8b40 	call	d8b4 <__pow5mult>
    b004:	1021883a 	mov	r16,r2
    b008:	003f5a06 	br	ad74 <__alt_exception_stack_pointer+0xf800ad74>
    b00c:	01c00044 	movi	r7,1
    b010:	d9c00b15 	stw	r7,44(sp)
    b014:	d8802217 	ldw	r2,136(sp)
    b018:	0081280e 	bge	zero,r2,b4bc <_dtoa_r+0x11b0>
    b01c:	100d883a 	mov	r6,r2
    b020:	1021883a 	mov	r16,r2
    b024:	d8800c15 	stw	r2,48(sp)
    b028:	d8800615 	stw	r2,24(sp)
    b02c:	003d8806 	br	a650 <__alt_exception_stack_pointer+0xf800a650>
    b030:	d8800617 	ldw	r2,24(sp)
    b034:	00be9b16 	blt	zero,r2,aaa4 <__alt_exception_stack_pointer+0xf800aaa4>
    b038:	10010f1e 	bne	r2,zero,b478 <_dtoa_r+0x116c>
    b03c:	880b883a 	mov	r5,r17
    b040:	000d883a 	mov	r6,zero
    b044:	01d00534 	movhi	r7,16404
    b048:	8009883a 	mov	r4,r16
    b04c:	0005e000 	call	5e00 <__muldf3>
    b050:	900d883a 	mov	r6,r18
    b054:	980f883a 	mov	r7,r19
    b058:	1009883a 	mov	r4,r2
    b05c:	180b883a 	mov	r5,r3
    b060:	0005d240 	call	5d24 <__gedf2>
    b064:	002b883a 	mov	r21,zero
    b068:	0023883a 	mov	r17,zero
    b06c:	1000bf16 	blt	r2,zero,b36c <_dtoa_r+0x1060>
    b070:	d9802217 	ldw	r6,136(sp)
    b074:	ddc00717 	ldw	r23,28(sp)
    b078:	018c303a 	nor	r6,zero,r6
    b07c:	d9800515 	stw	r6,20(sp)
    b080:	a80b883a 	mov	r5,r21
    b084:	e009883a 	mov	r4,fp
    b088:	000d2600 	call	d260 <_Bfree>
    b08c:	883e4926 	beq	r17,zero,a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    b090:	003fad06 	br	af48 <__alt_exception_stack_pointer+0xf800af48>
    b094:	d9c01117 	ldw	r7,68(sp)
    b098:	3801bc26 	beq	r7,zero,b78c <_dtoa_r+0x1480>
    b09c:	10810cc4 	addi	r2,r2,1075
    b0a0:	dd400a17 	ldw	r21,40(sp)
    b0a4:	dd000817 	ldw	r20,32(sp)
    b0a8:	003f0a06 	br	acd4 <__alt_exception_stack_pointer+0xf800acd4>
    b0ac:	00800704 	movi	r2,28
    b0b0:	d9000817 	ldw	r4,32(sp)
    b0b4:	a0a9883a 	add	r20,r20,r2
    b0b8:	b0ad883a 	add	r22,r22,r2
    b0bc:	2089883a 	add	r4,r4,r2
    b0c0:	d9000815 	stw	r4,32(sp)
    b0c4:	003f5106 	br	ae0c <__alt_exception_stack_pointer+0xf800ae0c>
    b0c8:	d8c00317 	ldw	r3,12(sp)
    b0cc:	b8c1fc0e 	bge	r23,r3,b8c0 <_dtoa_r+0x15b4>
    b0d0:	0027883a 	mov	r19,zero
    b0d4:	b805883a 	mov	r2,r23
    b0d8:	003f3e06 	br	add4 <__alt_exception_stack_pointer+0xf800add4>
    b0dc:	880b883a 	mov	r5,r17
    b0e0:	e009883a 	mov	r4,fp
    b0e4:	000f883a 	mov	r7,zero
    b0e8:	01800284 	movi	r6,10
    b0ec:	000d2880 	call	d288 <__multadd>
    b0f0:	d9000c17 	ldw	r4,48(sp)
    b0f4:	1023883a 	mov	r17,r2
    b0f8:	0102040e 	bge	zero,r4,b90c <_dtoa_r+0x1600>
    b0fc:	d9000615 	stw	r4,24(sp)
    b100:	0500050e 	bge	zero,r20,b118 <_dtoa_r+0xe0c>
    b104:	880b883a 	mov	r5,r17
    b108:	a00d883a 	mov	r6,r20
    b10c:	e009883a 	mov	r4,fp
    b110:	000d9f40 	call	d9f4 <__lshift>
    b114:	1023883a 	mov	r17,r2
    b118:	9801241e 	bne	r19,zero,b5ac <_dtoa_r+0x12a0>
    b11c:	8829883a 	mov	r20,r17
    b120:	d9000617 	ldw	r4,24(sp)
    b124:	dcc00717 	ldw	r19,28(sp)
    b128:	9480004c 	andi	r18,r18,1
    b12c:	20bfffc4 	addi	r2,r4,-1
    b130:	9885883a 	add	r2,r19,r2
    b134:	d8800415 	stw	r2,16(sp)
    b138:	dc800615 	stw	r18,24(sp)
    b13c:	a80b883a 	mov	r5,r21
    b140:	8009883a 	mov	r4,r16
    b144:	000a0e40 	call	a0e4 <quorem>
    b148:	880b883a 	mov	r5,r17
    b14c:	8009883a 	mov	r4,r16
    b150:	102f883a 	mov	r23,r2
    b154:	000db3c0 	call	db3c <__mcmp>
    b158:	a80b883a 	mov	r5,r21
    b15c:	a00d883a 	mov	r6,r20
    b160:	e009883a 	mov	r4,fp
    b164:	102d883a 	mov	r22,r2
    b168:	000db9c0 	call	db9c <__mdiff>
    b16c:	1007883a 	mov	r3,r2
    b170:	10800317 	ldw	r2,12(r2)
    b174:	bc800c04 	addi	r18,r23,48
    b178:	180b883a 	mov	r5,r3
    b17c:	10004e1e 	bne	r2,zero,b2b8 <_dtoa_r+0xfac>
    b180:	8009883a 	mov	r4,r16
    b184:	d8c01615 	stw	r3,88(sp)
    b188:	000db3c0 	call	db3c <__mcmp>
    b18c:	d8c01617 	ldw	r3,88(sp)
    b190:	e009883a 	mov	r4,fp
    b194:	d8801615 	stw	r2,88(sp)
    b198:	180b883a 	mov	r5,r3
    b19c:	000d2600 	call	d260 <_Bfree>
    b1a0:	d8801617 	ldw	r2,88(sp)
    b1a4:	1000041e 	bne	r2,zero,b1b8 <_dtoa_r+0xeac>
    b1a8:	d9800317 	ldw	r6,12(sp)
    b1ac:	3000021e 	bne	r6,zero,b1b8 <_dtoa_r+0xeac>
    b1b0:	d8c00617 	ldw	r3,24(sp)
    b1b4:	18003726 	beq	r3,zero,b294 <_dtoa_r+0xf88>
    b1b8:	b0002016 	blt	r22,zero,b23c <_dtoa_r+0xf30>
    b1bc:	b000041e 	bne	r22,zero,b1d0 <_dtoa_r+0xec4>
    b1c0:	d9000317 	ldw	r4,12(sp)
    b1c4:	2000021e 	bne	r4,zero,b1d0 <_dtoa_r+0xec4>
    b1c8:	d8c00617 	ldw	r3,24(sp)
    b1cc:	18001b26 	beq	r3,zero,b23c <_dtoa_r+0xf30>
    b1d0:	00810716 	blt	zero,r2,b5f0 <_dtoa_r+0x12e4>
    b1d4:	d8c00417 	ldw	r3,16(sp)
    b1d8:	9d800044 	addi	r22,r19,1
    b1dc:	9c800005 	stb	r18,0(r19)
    b1e0:	b02f883a 	mov	r23,r22
    b1e4:	98c10626 	beq	r19,r3,b600 <_dtoa_r+0x12f4>
    b1e8:	800b883a 	mov	r5,r16
    b1ec:	000f883a 	mov	r7,zero
    b1f0:	01800284 	movi	r6,10
    b1f4:	e009883a 	mov	r4,fp
    b1f8:	000d2880 	call	d288 <__multadd>
    b1fc:	1021883a 	mov	r16,r2
    b200:	000f883a 	mov	r7,zero
    b204:	01800284 	movi	r6,10
    b208:	880b883a 	mov	r5,r17
    b20c:	e009883a 	mov	r4,fp
    b210:	8d002526 	beq	r17,r20,b2a8 <_dtoa_r+0xf9c>
    b214:	000d2880 	call	d288 <__multadd>
    b218:	a00b883a 	mov	r5,r20
    b21c:	000f883a 	mov	r7,zero
    b220:	01800284 	movi	r6,10
    b224:	e009883a 	mov	r4,fp
    b228:	1023883a 	mov	r17,r2
    b22c:	000d2880 	call	d288 <__multadd>
    b230:	1029883a 	mov	r20,r2
    b234:	b027883a 	mov	r19,r22
    b238:	003fc006 	br	b13c <__alt_exception_stack_pointer+0xf800b13c>
    b23c:	9011883a 	mov	r8,r18
    b240:	00800e0e 	bge	zero,r2,b27c <_dtoa_r+0xf70>
    b244:	800b883a 	mov	r5,r16
    b248:	01800044 	movi	r6,1
    b24c:	e009883a 	mov	r4,fp
    b250:	da001715 	stw	r8,92(sp)
    b254:	000d9f40 	call	d9f4 <__lshift>
    b258:	a80b883a 	mov	r5,r21
    b25c:	1009883a 	mov	r4,r2
    b260:	1021883a 	mov	r16,r2
    b264:	000db3c0 	call	db3c <__mcmp>
    b268:	da001717 	ldw	r8,92(sp)
    b26c:	0081960e 	bge	zero,r2,b8c8 <_dtoa_r+0x15bc>
    b270:	00800e44 	movi	r2,57
    b274:	40817026 	beq	r8,r2,b838 <_dtoa_r+0x152c>
    b278:	ba000c44 	addi	r8,r23,49
    b27c:	8825883a 	mov	r18,r17
    b280:	9dc00044 	addi	r23,r19,1
    b284:	9a000005 	stb	r8,0(r19)
    b288:	a023883a 	mov	r17,r20
    b28c:	dc000915 	stw	r16,36(sp)
    b290:	003f2406 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    b294:	00800e44 	movi	r2,57
    b298:	9011883a 	mov	r8,r18
    b29c:	90816626 	beq	r18,r2,b838 <_dtoa_r+0x152c>
    b2a0:	05bff516 	blt	zero,r22,b278 <__alt_exception_stack_pointer+0xf800b278>
    b2a4:	003ff506 	br	b27c <__alt_exception_stack_pointer+0xf800b27c>
    b2a8:	000d2880 	call	d288 <__multadd>
    b2ac:	1023883a 	mov	r17,r2
    b2b0:	1029883a 	mov	r20,r2
    b2b4:	003fdf06 	br	b234 <__alt_exception_stack_pointer+0xf800b234>
    b2b8:	e009883a 	mov	r4,fp
    b2bc:	000d2600 	call	d260 <_Bfree>
    b2c0:	00800044 	movi	r2,1
    b2c4:	003fbc06 	br	b1b8 <__alt_exception_stack_pointer+0xf800b1b8>
    b2c8:	a80b883a 	mov	r5,r21
    b2cc:	8009883a 	mov	r4,r16
    b2d0:	000db3c0 	call	db3c <__mcmp>
    b2d4:	103edb0e 	bge	r2,zero,ae44 <__alt_exception_stack_pointer+0xf800ae44>
    b2d8:	800b883a 	mov	r5,r16
    b2dc:	000f883a 	mov	r7,zero
    b2e0:	01800284 	movi	r6,10
    b2e4:	e009883a 	mov	r4,fp
    b2e8:	000d2880 	call	d288 <__multadd>
    b2ec:	1021883a 	mov	r16,r2
    b2f0:	d8800517 	ldw	r2,20(sp)
    b2f4:	d8c00b17 	ldw	r3,44(sp)
    b2f8:	10bfffc4 	addi	r2,r2,-1
    b2fc:	d8800515 	stw	r2,20(sp)
    b300:	183f761e 	bne	r3,zero,b0dc <__alt_exception_stack_pointer+0xf800b0dc>
    b304:	d9000c17 	ldw	r4,48(sp)
    b308:	0101730e 	bge	zero,r4,b8d8 <_dtoa_r+0x15cc>
    b30c:	d9000615 	stw	r4,24(sp)
    b310:	003ed006 	br	ae54 <__alt_exception_stack_pointer+0xf800ae54>
    b314:	00800084 	movi	r2,2
    b318:	3081861e 	bne	r6,r2,b934 <_dtoa_r+0x1628>
    b31c:	d8000b15 	stw	zero,44(sp)
    b320:	003f3c06 	br	b014 <__alt_exception_stack_pointer+0xf800b014>
    b324:	dc000917 	ldw	r16,36(sp)
    b328:	003e9206 	br	ad74 <__alt_exception_stack_pointer+0xf800ad74>
    b32c:	d9c00317 	ldw	r7,12(sp)
    b330:	00800084 	movi	r2,2
    b334:	11fec50e 	bge	r2,r7,ae4c <__alt_exception_stack_pointer+0xf800ae4c>
    b338:	d9000617 	ldw	r4,24(sp)
    b33c:	20013c1e 	bne	r4,zero,b830 <_dtoa_r+0x1524>
    b340:	a80b883a 	mov	r5,r21
    b344:	000f883a 	mov	r7,zero
    b348:	01800144 	movi	r6,5
    b34c:	e009883a 	mov	r4,fp
    b350:	000d2880 	call	d288 <__multadd>
    b354:	100b883a 	mov	r5,r2
    b358:	8009883a 	mov	r4,r16
    b35c:	102b883a 	mov	r21,r2
    b360:	000db3c0 	call	db3c <__mcmp>
    b364:	dc000915 	stw	r16,36(sp)
    b368:	00bf410e 	bge	zero,r2,b070 <__alt_exception_stack_pointer+0xf800b070>
    b36c:	d9c00717 	ldw	r7,28(sp)
    b370:	00800c44 	movi	r2,49
    b374:	38800005 	stb	r2,0(r7)
    b378:	d8800517 	ldw	r2,20(sp)
    b37c:	3dc00044 	addi	r23,r7,1
    b380:	10800044 	addi	r2,r2,1
    b384:	d8800515 	stw	r2,20(sp)
    b388:	003f3d06 	br	b080 <__alt_exception_stack_pointer+0xf800b080>
    b38c:	d9800517 	ldw	r6,20(sp)
    b390:	d9c00717 	ldw	r7,28(sp)
    b394:	00800c44 	movi	r2,49
    b398:	31800044 	addi	r6,r6,1
    b39c:	d9800515 	stw	r6,20(sp)
    b3a0:	38800005 	stb	r2,0(r7)
    b3a4:	003edf06 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    b3a8:	d8000b15 	stw	zero,44(sp)
    b3ac:	003c9f06 	br	a62c <__alt_exception_stack_pointer+0xf800a62c>
    b3b0:	903e7e1e 	bne	r18,zero,adac <__alt_exception_stack_pointer+0xf800adac>
    b3b4:	00800434 	movhi	r2,16
    b3b8:	10bfffc4 	addi	r2,r2,-1
    b3bc:	9884703a 	and	r2,r19,r2
    b3c0:	1000ea1e 	bne	r2,zero,b76c <_dtoa_r+0x1460>
    b3c4:	9cdffc2c 	andhi	r19,r19,32752
    b3c8:	9800e826 	beq	r19,zero,b76c <_dtoa_r+0x1460>
    b3cc:	d9c00817 	ldw	r7,32(sp)
    b3d0:	b5800044 	addi	r22,r22,1
    b3d4:	04c00044 	movi	r19,1
    b3d8:	39c00044 	addi	r7,r7,1
    b3dc:	d9c00815 	stw	r7,32(sp)
    b3e0:	d8800d17 	ldw	r2,52(sp)
    b3e4:	103e721e 	bne	r2,zero,adb0 <__alt_exception_stack_pointer+0xf800adb0>
    b3e8:	00800044 	movi	r2,1
    b3ec:	003e7906 	br	add4 <__alt_exception_stack_pointer+0xf800add4>
    b3f0:	8009883a 	mov	r4,r16
    b3f4:	0006fe80 	call	6fe8 <__floatsidf>
    b3f8:	d9800f17 	ldw	r6,60(sp)
    b3fc:	d9c01017 	ldw	r7,64(sp)
    b400:	1009883a 	mov	r4,r2
    b404:	180b883a 	mov	r5,r3
    b408:	0005e000 	call	5e00 <__muldf3>
    b40c:	000d883a 	mov	r6,zero
    b410:	01d00734 	movhi	r7,16412
    b414:	1009883a 	mov	r4,r2
    b418:	180b883a 	mov	r5,r3
    b41c:	00053f00 	call	53f0 <__adddf3>
    b420:	047f3034 	movhi	r17,64704
    b424:	1021883a 	mov	r16,r2
    b428:	1c63883a 	add	r17,r3,r17
    b42c:	d9000f17 	ldw	r4,60(sp)
    b430:	d9401017 	ldw	r5,64(sp)
    b434:	000d883a 	mov	r6,zero
    b438:	01d00534 	movhi	r7,16404
    b43c:	000666c0 	call	666c <__subdf3>
    b440:	800d883a 	mov	r6,r16
    b444:	880f883a 	mov	r7,r17
    b448:	1009883a 	mov	r4,r2
    b44c:	180b883a 	mov	r5,r3
    b450:	102b883a 	mov	r21,r2
    b454:	1829883a 	mov	r20,r3
    b458:	0005d240 	call	5d24 <__gedf2>
    b45c:	00806c16 	blt	zero,r2,b610 <_dtoa_r+0x1304>
    b460:	89e0003c 	xorhi	r7,r17,32768
    b464:	800d883a 	mov	r6,r16
    b468:	a809883a 	mov	r4,r21
    b46c:	a00b883a 	mov	r5,r20
    b470:	00120340 	call	12034 <__ledf2>
    b474:	103d7e0e 	bge	r2,zero,aa70 <__alt_exception_stack_pointer+0xf800aa70>
    b478:	002b883a 	mov	r21,zero
    b47c:	0023883a 	mov	r17,zero
    b480:	003efb06 	br	b070 <__alt_exception_stack_pointer+0xf800b070>
    b484:	d8800717 	ldw	r2,28(sp)
    b488:	003bd006 	br	a3cc <__alt_exception_stack_pointer+0xf800a3cc>
    b48c:	d9000a17 	ldw	r4,40(sp)
    b490:	d9800d17 	ldw	r6,52(sp)
    b494:	dd400a15 	stw	r21,40(sp)
    b498:	a905c83a 	sub	r2,r21,r4
    b49c:	308d883a 	add	r6,r6,r2
    b4a0:	d9800d15 	stw	r6,52(sp)
    b4a4:	002b883a 	mov	r21,zero
    b4a8:	003e0606 	br	acc4 <__alt_exception_stack_pointer+0xf800acc4>
    b4ac:	9023883a 	mov	r17,r18
    b4b0:	9829883a 	mov	r20,r19
    b4b4:	04000084 	movi	r16,2
    b4b8:	003c9206 	br	a704 <__alt_exception_stack_pointer+0xf800a704>
    b4bc:	04000044 	movi	r16,1
    b4c0:	dc000c15 	stw	r16,48(sp)
    b4c4:	dc000615 	stw	r16,24(sp)
    b4c8:	dc002215 	stw	r16,136(sp)
    b4cc:	e0001115 	stw	zero,68(fp)
    b4d0:	000b883a 	mov	r5,zero
    b4d4:	003c6906 	br	a67c <__alt_exception_stack_pointer+0xf800a67c>
    b4d8:	3021883a 	mov	r16,r6
    b4dc:	003ffb06 	br	b4cc <__alt_exception_stack_pointer+0xf800b4cc>
    b4e0:	1000021e 	bne	r2,zero,b4ec <_dtoa_r+0x11e0>
    b4e4:	4200004c 	andi	r8,r8,1
    b4e8:	403e7d1e 	bne	r8,zero,aee0 <__alt_exception_stack_pointer+0xf800aee0>
    b4ec:	01000c04 	movi	r4,48
    b4f0:	00000106 	br	b4f8 <_dtoa_r+0x11ec>
    b4f4:	102f883a 	mov	r23,r2
    b4f8:	b8bfffc4 	addi	r2,r23,-1
    b4fc:	10c00007 	ldb	r3,0(r2)
    b500:	193ffc26 	beq	r3,r4,b4f4 <__alt_exception_stack_pointer+0xf800b4f4>
    b504:	003e8706 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    b508:	d8800517 	ldw	r2,20(sp)
    b50c:	00a3c83a 	sub	r17,zero,r2
    b510:	8800a426 	beq	r17,zero,b7a4 <_dtoa_r+0x1498>
    b514:	888003cc 	andi	r2,r17,15
    b518:	100490fa 	slli	r2,r2,3
    b51c:	00c00074 	movhi	r3,1
    b520:	18da0804 	addi	r3,r3,26656
    b524:	1885883a 	add	r2,r3,r2
    b528:	11800017 	ldw	r6,0(r2)
    b52c:	11c00117 	ldw	r7,4(r2)
    b530:	9009883a 	mov	r4,r18
    b534:	980b883a 	mov	r5,r19
    b538:	8823d13a 	srai	r17,r17,4
    b53c:	0005e000 	call	5e00 <__muldf3>
    b540:	d8800f15 	stw	r2,60(sp)
    b544:	d8c01015 	stw	r3,64(sp)
    b548:	8800e826 	beq	r17,zero,b8ec <_dtoa_r+0x15e0>
    b54c:	05000074 	movhi	r20,1
    b550:	a519fe04 	addi	r20,r20,26616
    b554:	04000084 	movi	r16,2
    b558:	8980004c 	andi	r6,r17,1
    b55c:	1009883a 	mov	r4,r2
    b560:	8823d07a 	srai	r17,r17,1
    b564:	180b883a 	mov	r5,r3
    b568:	30000426 	beq	r6,zero,b57c <_dtoa_r+0x1270>
    b56c:	a1800017 	ldw	r6,0(r20)
    b570:	a1c00117 	ldw	r7,4(r20)
    b574:	84000044 	addi	r16,r16,1
    b578:	0005e000 	call	5e00 <__muldf3>
    b57c:	a5000204 	addi	r20,r20,8
    b580:	883ff51e 	bne	r17,zero,b558 <__alt_exception_stack_pointer+0xf800b558>
    b584:	d8800f15 	stw	r2,60(sp)
    b588:	d8c01015 	stw	r3,64(sp)
    b58c:	003c7606 	br	a768 <__alt_exception_stack_pointer+0xf800a768>
    b590:	00c00c04 	movi	r3,48
    b594:	10c00005 	stb	r3,0(r2)
    b598:	d8c00517 	ldw	r3,20(sp)
    b59c:	bd3fffc3 	ldbu	r20,-1(r23)
    b5a0:	18c00044 	addi	r3,r3,1
    b5a4:	d8c00515 	stw	r3,20(sp)
    b5a8:	003db906 	br	ac90 <__alt_exception_stack_pointer+0xf800ac90>
    b5ac:	89400117 	ldw	r5,4(r17)
    b5b0:	e009883a 	mov	r4,fp
    b5b4:	000d1b80 	call	d1b8 <_Balloc>
    b5b8:	89800417 	ldw	r6,16(r17)
    b5bc:	89400304 	addi	r5,r17,12
    b5c0:	11000304 	addi	r4,r2,12
    b5c4:	31800084 	addi	r6,r6,2
    b5c8:	318d883a 	add	r6,r6,r6
    b5cc:	318d883a 	add	r6,r6,r6
    b5d0:	1027883a 	mov	r19,r2
    b5d4:	000cdec0 	call	cdec <memcpy>
    b5d8:	01800044 	movi	r6,1
    b5dc:	980b883a 	mov	r5,r19
    b5e0:	e009883a 	mov	r4,fp
    b5e4:	000d9f40 	call	d9f4 <__lshift>
    b5e8:	1029883a 	mov	r20,r2
    b5ec:	003ecc06 	br	b120 <__alt_exception_stack_pointer+0xf800b120>
    b5f0:	00800e44 	movi	r2,57
    b5f4:	90809026 	beq	r18,r2,b838 <_dtoa_r+0x152c>
    b5f8:	92000044 	addi	r8,r18,1
    b5fc:	003f1f06 	br	b27c <__alt_exception_stack_pointer+0xf800b27c>
    b600:	9011883a 	mov	r8,r18
    b604:	8825883a 	mov	r18,r17
    b608:	a023883a 	mov	r17,r20
    b60c:	003e2906 	br	aeb4 <__alt_exception_stack_pointer+0xf800aeb4>
    b610:	002b883a 	mov	r21,zero
    b614:	0023883a 	mov	r17,zero
    b618:	003f5406 	br	b36c <__alt_exception_stack_pointer+0xf800b36c>
    b61c:	61bfffc4 	addi	r6,r12,-1
    b620:	300490fa 	slli	r2,r6,3
    b624:	00c00074 	movhi	r3,1
    b628:	18da0804 	addi	r3,r3,26656
    b62c:	1885883a 	add	r2,r3,r2
    b630:	11000017 	ldw	r4,0(r2)
    b634:	11400117 	ldw	r5,4(r2)
    b638:	d8800717 	ldw	r2,28(sp)
    b63c:	880f883a 	mov	r7,r17
    b640:	d9801215 	stw	r6,72(sp)
    b644:	800d883a 	mov	r6,r16
    b648:	db001615 	stw	r12,88(sp)
    b64c:	15c00044 	addi	r23,r2,1
    b650:	0005e000 	call	5e00 <__muldf3>
    b654:	d9401017 	ldw	r5,64(sp)
    b658:	d9000f17 	ldw	r4,60(sp)
    b65c:	d8c01515 	stw	r3,84(sp)
    b660:	d8801415 	stw	r2,80(sp)
    b664:	0006f680 	call	6f68 <__fixdfsi>
    b668:	1009883a 	mov	r4,r2
    b66c:	1021883a 	mov	r16,r2
    b670:	0006fe80 	call	6fe8 <__floatsidf>
    b674:	d9000f17 	ldw	r4,60(sp)
    b678:	d9401017 	ldw	r5,64(sp)
    b67c:	100d883a 	mov	r6,r2
    b680:	180f883a 	mov	r7,r3
    b684:	000666c0 	call	666c <__subdf3>
    b688:	1829883a 	mov	r20,r3
    b68c:	d8c00717 	ldw	r3,28(sp)
    b690:	84000c04 	addi	r16,r16,48
    b694:	1023883a 	mov	r17,r2
    b698:	1c000005 	stb	r16,0(r3)
    b69c:	db001617 	ldw	r12,88(sp)
    b6a0:	00800044 	movi	r2,1
    b6a4:	60802226 	beq	r12,r2,b730 <_dtoa_r+0x1424>
    b6a8:	d9c00717 	ldw	r7,28(sp)
    b6ac:	8805883a 	mov	r2,r17
    b6b0:	b82b883a 	mov	r21,r23
    b6b4:	3b19883a 	add	r12,r7,r12
    b6b8:	6023883a 	mov	r17,r12
    b6bc:	a007883a 	mov	r3,r20
    b6c0:	dc800f15 	stw	r18,60(sp)
    b6c4:	000d883a 	mov	r6,zero
    b6c8:	01d00934 	movhi	r7,16420
    b6cc:	1009883a 	mov	r4,r2
    b6d0:	180b883a 	mov	r5,r3
    b6d4:	0005e000 	call	5e00 <__muldf3>
    b6d8:	180b883a 	mov	r5,r3
    b6dc:	1009883a 	mov	r4,r2
    b6e0:	1829883a 	mov	r20,r3
    b6e4:	1025883a 	mov	r18,r2
    b6e8:	0006f680 	call	6f68 <__fixdfsi>
    b6ec:	1009883a 	mov	r4,r2
    b6f0:	1021883a 	mov	r16,r2
    b6f4:	0006fe80 	call	6fe8 <__floatsidf>
    b6f8:	100d883a 	mov	r6,r2
    b6fc:	180f883a 	mov	r7,r3
    b700:	9009883a 	mov	r4,r18
    b704:	a00b883a 	mov	r5,r20
    b708:	84000c04 	addi	r16,r16,48
    b70c:	000666c0 	call	666c <__subdf3>
    b710:	ad400044 	addi	r21,r21,1
    b714:	ac3fffc5 	stb	r16,-1(r21)
    b718:	ac7fea1e 	bne	r21,r17,b6c4 <__alt_exception_stack_pointer+0xf800b6c4>
    b71c:	1023883a 	mov	r17,r2
    b720:	d8801217 	ldw	r2,72(sp)
    b724:	dc800f17 	ldw	r18,60(sp)
    b728:	1829883a 	mov	r20,r3
    b72c:	b8af883a 	add	r23,r23,r2
    b730:	d9001417 	ldw	r4,80(sp)
    b734:	d9401517 	ldw	r5,84(sp)
    b738:	000d883a 	mov	r6,zero
    b73c:	01cff834 	movhi	r7,16352
    b740:	00053f00 	call	53f0 <__adddf3>
    b744:	880d883a 	mov	r6,r17
    b748:	a00f883a 	mov	r7,r20
    b74c:	1009883a 	mov	r4,r2
    b750:	180b883a 	mov	r5,r3
    b754:	00120340 	call	12034 <__ledf2>
    b758:	10003e0e 	bge	r2,zero,b854 <_dtoa_r+0x1548>
    b75c:	d9001317 	ldw	r4,76(sp)
    b760:	bd3fffc3 	ldbu	r20,-1(r23)
    b764:	d9000515 	stw	r4,20(sp)
    b768:	003d3b06 	br	ac58 <__alt_exception_stack_pointer+0xf800ac58>
    b76c:	0027883a 	mov	r19,zero
    b770:	003f1b06 	br	b3e0 <__alt_exception_stack_pointer+0xf800b3e0>
    b774:	d8800817 	ldw	r2,32(sp)
    b778:	11e9c83a 	sub	r20,r2,r7
    b77c:	0005883a 	mov	r2,zero
    b780:	003d5406 	br	acd4 <__alt_exception_stack_pointer+0xf800acd4>
    b784:	00800044 	movi	r2,1
    b788:	003dc706 	br	aea8 <__alt_exception_stack_pointer+0xf800aea8>
    b78c:	d8c00217 	ldw	r3,8(sp)
    b790:	00800d84 	movi	r2,54
    b794:	dd400a17 	ldw	r21,40(sp)
    b798:	10c5c83a 	sub	r2,r2,r3
    b79c:	dd000817 	ldw	r20,32(sp)
    b7a0:	003d4c06 	br	acd4 <__alt_exception_stack_pointer+0xf800acd4>
    b7a4:	dc800f15 	stw	r18,60(sp)
    b7a8:	dcc01015 	stw	r19,64(sp)
    b7ac:	04000084 	movi	r16,2
    b7b0:	003bed06 	br	a768 <__alt_exception_stack_pointer+0xf800a768>
    b7b4:	d9000617 	ldw	r4,24(sp)
    b7b8:	203f0d26 	beq	r4,zero,b3f0 <__alt_exception_stack_pointer+0xf800b3f0>
    b7bc:	d9800c17 	ldw	r6,48(sp)
    b7c0:	01bcab0e 	bge	zero,r6,aa70 <__alt_exception_stack_pointer+0xf800aa70>
    b7c4:	d9401017 	ldw	r5,64(sp)
    b7c8:	d9000f17 	ldw	r4,60(sp)
    b7cc:	000d883a 	mov	r6,zero
    b7d0:	01d00934 	movhi	r7,16420
    b7d4:	0005e000 	call	5e00 <__muldf3>
    b7d8:	81000044 	addi	r4,r16,1
    b7dc:	d8800f15 	stw	r2,60(sp)
    b7e0:	d8c01015 	stw	r3,64(sp)
    b7e4:	0006fe80 	call	6fe8 <__floatsidf>
    b7e8:	d9800f17 	ldw	r6,60(sp)
    b7ec:	d9c01017 	ldw	r7,64(sp)
    b7f0:	1009883a 	mov	r4,r2
    b7f4:	180b883a 	mov	r5,r3
    b7f8:	0005e000 	call	5e00 <__muldf3>
    b7fc:	01d00734 	movhi	r7,16412
    b800:	000d883a 	mov	r6,zero
    b804:	1009883a 	mov	r4,r2
    b808:	180b883a 	mov	r5,r3
    b80c:	00053f00 	call	53f0 <__adddf3>
    b810:	d9c00517 	ldw	r7,20(sp)
    b814:	047f3034 	movhi	r17,64704
    b818:	1021883a 	mov	r16,r2
    b81c:	39ffffc4 	addi	r7,r7,-1
    b820:	d9c01315 	stw	r7,76(sp)
    b824:	1c63883a 	add	r17,r3,r17
    b828:	db000c17 	ldw	r12,48(sp)
    b82c:	003bea06 	br	a7d8 <__alt_exception_stack_pointer+0xf800a7d8>
    b830:	dc000915 	stw	r16,36(sp)
    b834:	003e0e06 	br	b070 <__alt_exception_stack_pointer+0xf800b070>
    b838:	01000e44 	movi	r4,57
    b83c:	8825883a 	mov	r18,r17
    b840:	9dc00044 	addi	r23,r19,1
    b844:	99000005 	stb	r4,0(r19)
    b848:	a023883a 	mov	r17,r20
    b84c:	dc000915 	stw	r16,36(sp)
    b850:	003da406 	br	aee4 <__alt_exception_stack_pointer+0xf800aee4>
    b854:	d9801417 	ldw	r6,80(sp)
    b858:	d9c01517 	ldw	r7,84(sp)
    b85c:	0009883a 	mov	r4,zero
    b860:	014ff834 	movhi	r5,16352
    b864:	000666c0 	call	666c <__subdf3>
    b868:	880d883a 	mov	r6,r17
    b86c:	a00f883a 	mov	r7,r20
    b870:	1009883a 	mov	r4,r2
    b874:	180b883a 	mov	r5,r3
    b878:	0005d240 	call	5d24 <__gedf2>
    b87c:	00bc7c0e 	bge	zero,r2,aa70 <__alt_exception_stack_pointer+0xf800aa70>
    b880:	01000c04 	movi	r4,48
    b884:	00000106 	br	b88c <_dtoa_r+0x1580>
    b888:	102f883a 	mov	r23,r2
    b88c:	b8bfffc4 	addi	r2,r23,-1
    b890:	10c00007 	ldb	r3,0(r2)
    b894:	193ffc26 	beq	r3,r4,b888 <__alt_exception_stack_pointer+0xf800b888>
    b898:	d9801317 	ldw	r6,76(sp)
    b89c:	d9800515 	stw	r6,20(sp)
    b8a0:	003c4406 	br	a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    b8a4:	d9801317 	ldw	r6,76(sp)
    b8a8:	d9800515 	stw	r6,20(sp)
    b8ac:	003cea06 	br	ac58 <__alt_exception_stack_pointer+0xf800ac58>
    b8b0:	dd800f17 	ldw	r22,60(sp)
    b8b4:	dcc01017 	ldw	r19,64(sp)
    b8b8:	dc801217 	ldw	r18,72(sp)
    b8bc:	003c6c06 	br	aa70 <__alt_exception_stack_pointer+0xf800aa70>
    b8c0:	903e031e 	bne	r18,zero,b0d0 <__alt_exception_stack_pointer+0xf800b0d0>
    b8c4:	003ebb06 	br	b3b4 <__alt_exception_stack_pointer+0xf800b3b4>
    b8c8:	103e6c1e 	bne	r2,zero,b27c <__alt_exception_stack_pointer+0xf800b27c>
    b8cc:	4080004c 	andi	r2,r8,1
    b8d0:	103e6a26 	beq	r2,zero,b27c <__alt_exception_stack_pointer+0xf800b27c>
    b8d4:	003e6606 	br	b270 <__alt_exception_stack_pointer+0xf800b270>
    b8d8:	d8c00317 	ldw	r3,12(sp)
    b8dc:	00800084 	movi	r2,2
    b8e0:	10c02916 	blt	r2,r3,b988 <_dtoa_r+0x167c>
    b8e4:	d9000c17 	ldw	r4,48(sp)
    b8e8:	003e8806 	br	b30c <__alt_exception_stack_pointer+0xf800b30c>
    b8ec:	04000084 	movi	r16,2
    b8f0:	003b9d06 	br	a768 <__alt_exception_stack_pointer+0xf800a768>
    b8f4:	d9001317 	ldw	r4,76(sp)
    b8f8:	d9000515 	stw	r4,20(sp)
    b8fc:	003cd606 	br	ac58 <__alt_exception_stack_pointer+0xf800ac58>
    b900:	d8801317 	ldw	r2,76(sp)
    b904:	d8800515 	stw	r2,20(sp)
    b908:	003c2a06 	br	a9b4 <__alt_exception_stack_pointer+0xf800a9b4>
    b90c:	d9800317 	ldw	r6,12(sp)
    b910:	00800084 	movi	r2,2
    b914:	11801516 	blt	r2,r6,b96c <_dtoa_r+0x1660>
    b918:	d9c00c17 	ldw	r7,48(sp)
    b91c:	d9c00615 	stw	r7,24(sp)
    b920:	003df706 	br	b100 <__alt_exception_stack_pointer+0xf800b100>
    b924:	193d3926 	beq	r3,r4,ae0c <__alt_exception_stack_pointer+0xf800ae0c>
    b928:	00c00f04 	movi	r3,60
    b92c:	1885c83a 	sub	r2,r3,r2
    b930:	003ddf06 	br	b0b0 <__alt_exception_stack_pointer+0xf800b0b0>
    b934:	e009883a 	mov	r4,fp
    b938:	e0001115 	stw	zero,68(fp)
    b93c:	000b883a 	mov	r5,zero
    b940:	000d1b80 	call	d1b8 <_Balloc>
    b944:	d8800715 	stw	r2,28(sp)
    b948:	d8c00717 	ldw	r3,28(sp)
    b94c:	00bfffc4 	movi	r2,-1
    b950:	01000044 	movi	r4,1
    b954:	d8800c15 	stw	r2,48(sp)
    b958:	e0c01015 	stw	r3,64(fp)
    b95c:	d9000b15 	stw	r4,44(sp)
    b960:	d8800615 	stw	r2,24(sp)
    b964:	d8002215 	stw	zero,136(sp)
    b968:	003c4106 	br	aa70 <__alt_exception_stack_pointer+0xf800aa70>
    b96c:	d8c00c17 	ldw	r3,48(sp)
    b970:	d8c00615 	stw	r3,24(sp)
    b974:	003e7006 	br	b338 <__alt_exception_stack_pointer+0xf800b338>
    b978:	04400044 	movi	r17,1
    b97c:	003b2006 	br	a600 <__alt_exception_stack_pointer+0xf800a600>
    b980:	000b883a 	mov	r5,zero
    b984:	003b3d06 	br	a67c <__alt_exception_stack_pointer+0xf800a67c>
    b988:	d8800c17 	ldw	r2,48(sp)
    b98c:	d8800615 	stw	r2,24(sp)
    b990:	003e6906 	br	b338 <__alt_exception_stack_pointer+0xf800b338>

0000b994 <__sflush_r>:
    b994:	2880030b 	ldhu	r2,12(r5)
    b998:	defffb04 	addi	sp,sp,-20
    b99c:	dcc00315 	stw	r19,12(sp)
    b9a0:	dc400115 	stw	r17,4(sp)
    b9a4:	dfc00415 	stw	ra,16(sp)
    b9a8:	dc800215 	stw	r18,8(sp)
    b9ac:	dc000015 	stw	r16,0(sp)
    b9b0:	10c0020c 	andi	r3,r2,8
    b9b4:	2823883a 	mov	r17,r5
    b9b8:	2027883a 	mov	r19,r4
    b9bc:	1800311e 	bne	r3,zero,ba84 <__sflush_r+0xf0>
    b9c0:	28c00117 	ldw	r3,4(r5)
    b9c4:	10820014 	ori	r2,r2,2048
    b9c8:	2880030d 	sth	r2,12(r5)
    b9cc:	00c04b0e 	bge	zero,r3,bafc <__sflush_r+0x168>
    b9d0:	8a000a17 	ldw	r8,40(r17)
    b9d4:	40002326 	beq	r8,zero,ba64 <__sflush_r+0xd0>
    b9d8:	9c000017 	ldw	r16,0(r19)
    b9dc:	10c4000c 	andi	r3,r2,4096
    b9e0:	98000015 	stw	zero,0(r19)
    b9e4:	18004826 	beq	r3,zero,bb08 <__sflush_r+0x174>
    b9e8:	89801417 	ldw	r6,80(r17)
    b9ec:	10c0010c 	andi	r3,r2,4
    b9f0:	18000626 	beq	r3,zero,ba0c <__sflush_r+0x78>
    b9f4:	88c00117 	ldw	r3,4(r17)
    b9f8:	88800c17 	ldw	r2,48(r17)
    b9fc:	30cdc83a 	sub	r6,r6,r3
    ba00:	10000226 	beq	r2,zero,ba0c <__sflush_r+0x78>
    ba04:	88800f17 	ldw	r2,60(r17)
    ba08:	308dc83a 	sub	r6,r6,r2
    ba0c:	89400717 	ldw	r5,28(r17)
    ba10:	000f883a 	mov	r7,zero
    ba14:	9809883a 	mov	r4,r19
    ba18:	403ee83a 	callr	r8
    ba1c:	00ffffc4 	movi	r3,-1
    ba20:	10c04426 	beq	r2,r3,bb34 <__sflush_r+0x1a0>
    ba24:	88c0030b 	ldhu	r3,12(r17)
    ba28:	89000417 	ldw	r4,16(r17)
    ba2c:	88000115 	stw	zero,4(r17)
    ba30:	197dffcc 	andi	r5,r3,63487
    ba34:	8940030d 	sth	r5,12(r17)
    ba38:	89000015 	stw	r4,0(r17)
    ba3c:	18c4000c 	andi	r3,r3,4096
    ba40:	18002c1e 	bne	r3,zero,baf4 <__sflush_r+0x160>
    ba44:	89400c17 	ldw	r5,48(r17)
    ba48:	9c000015 	stw	r16,0(r19)
    ba4c:	28000526 	beq	r5,zero,ba64 <__sflush_r+0xd0>
    ba50:	88801004 	addi	r2,r17,64
    ba54:	28800226 	beq	r5,r2,ba60 <__sflush_r+0xcc>
    ba58:	9809883a 	mov	r4,r19
    ba5c:	000c1100 	call	c110 <_free_r>
    ba60:	88000c15 	stw	zero,48(r17)
    ba64:	0005883a 	mov	r2,zero
    ba68:	dfc00417 	ldw	ra,16(sp)
    ba6c:	dcc00317 	ldw	r19,12(sp)
    ba70:	dc800217 	ldw	r18,8(sp)
    ba74:	dc400117 	ldw	r17,4(sp)
    ba78:	dc000017 	ldw	r16,0(sp)
    ba7c:	dec00504 	addi	sp,sp,20
    ba80:	f800283a 	ret
    ba84:	2c800417 	ldw	r18,16(r5)
    ba88:	903ff626 	beq	r18,zero,ba64 <__alt_exception_stack_pointer+0xf800ba64>
    ba8c:	2c000017 	ldw	r16,0(r5)
    ba90:	108000cc 	andi	r2,r2,3
    ba94:	2c800015 	stw	r18,0(r5)
    ba98:	84a1c83a 	sub	r16,r16,r18
    ba9c:	1000131e 	bne	r2,zero,baec <__sflush_r+0x158>
    baa0:	28800517 	ldw	r2,20(r5)
    baa4:	88800215 	stw	r2,8(r17)
    baa8:	04000316 	blt	zero,r16,bab8 <__sflush_r+0x124>
    baac:	003fed06 	br	ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bab0:	90a5883a 	add	r18,r18,r2
    bab4:	043feb0e 	bge	zero,r16,ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bab8:	88800917 	ldw	r2,36(r17)
    babc:	89400717 	ldw	r5,28(r17)
    bac0:	800f883a 	mov	r7,r16
    bac4:	900d883a 	mov	r6,r18
    bac8:	9809883a 	mov	r4,r19
    bacc:	103ee83a 	callr	r2
    bad0:	80a1c83a 	sub	r16,r16,r2
    bad4:	00bff616 	blt	zero,r2,bab0 <__alt_exception_stack_pointer+0xf800bab0>
    bad8:	88c0030b 	ldhu	r3,12(r17)
    badc:	00bfffc4 	movi	r2,-1
    bae0:	18c01014 	ori	r3,r3,64
    bae4:	88c0030d 	sth	r3,12(r17)
    bae8:	003fdf06 	br	ba68 <__alt_exception_stack_pointer+0xf800ba68>
    baec:	0005883a 	mov	r2,zero
    baf0:	003fec06 	br	baa4 <__alt_exception_stack_pointer+0xf800baa4>
    baf4:	88801415 	stw	r2,80(r17)
    baf8:	003fd206 	br	ba44 <__alt_exception_stack_pointer+0xf800ba44>
    bafc:	28c00f17 	ldw	r3,60(r5)
    bb00:	00ffb316 	blt	zero,r3,b9d0 <__alt_exception_stack_pointer+0xf800b9d0>
    bb04:	003fd706 	br	ba64 <__alt_exception_stack_pointer+0xf800ba64>
    bb08:	89400717 	ldw	r5,28(r17)
    bb0c:	000d883a 	mov	r6,zero
    bb10:	01c00044 	movi	r7,1
    bb14:	9809883a 	mov	r4,r19
    bb18:	403ee83a 	callr	r8
    bb1c:	100d883a 	mov	r6,r2
    bb20:	00bfffc4 	movi	r2,-1
    bb24:	30801426 	beq	r6,r2,bb78 <__sflush_r+0x1e4>
    bb28:	8880030b 	ldhu	r2,12(r17)
    bb2c:	8a000a17 	ldw	r8,40(r17)
    bb30:	003fae06 	br	b9ec <__alt_exception_stack_pointer+0xf800b9ec>
    bb34:	98c00017 	ldw	r3,0(r19)
    bb38:	183fba26 	beq	r3,zero,ba24 <__alt_exception_stack_pointer+0xf800ba24>
    bb3c:	01000744 	movi	r4,29
    bb40:	19000626 	beq	r3,r4,bb5c <__sflush_r+0x1c8>
    bb44:	01000584 	movi	r4,22
    bb48:	19000426 	beq	r3,r4,bb5c <__sflush_r+0x1c8>
    bb4c:	88c0030b 	ldhu	r3,12(r17)
    bb50:	18c01014 	ori	r3,r3,64
    bb54:	88c0030d 	sth	r3,12(r17)
    bb58:	003fc306 	br	ba68 <__alt_exception_stack_pointer+0xf800ba68>
    bb5c:	8880030b 	ldhu	r2,12(r17)
    bb60:	88c00417 	ldw	r3,16(r17)
    bb64:	88000115 	stw	zero,4(r17)
    bb68:	10bdffcc 	andi	r2,r2,63487
    bb6c:	8880030d 	sth	r2,12(r17)
    bb70:	88c00015 	stw	r3,0(r17)
    bb74:	003fb306 	br	ba44 <__alt_exception_stack_pointer+0xf800ba44>
    bb78:	98800017 	ldw	r2,0(r19)
    bb7c:	103fea26 	beq	r2,zero,bb28 <__alt_exception_stack_pointer+0xf800bb28>
    bb80:	00c00744 	movi	r3,29
    bb84:	10c00226 	beq	r2,r3,bb90 <__sflush_r+0x1fc>
    bb88:	00c00584 	movi	r3,22
    bb8c:	10c0031e 	bne	r2,r3,bb9c <__sflush_r+0x208>
    bb90:	9c000015 	stw	r16,0(r19)
    bb94:	0005883a 	mov	r2,zero
    bb98:	003fb306 	br	ba68 <__alt_exception_stack_pointer+0xf800ba68>
    bb9c:	88c0030b 	ldhu	r3,12(r17)
    bba0:	3005883a 	mov	r2,r6
    bba4:	18c01014 	ori	r3,r3,64
    bba8:	88c0030d 	sth	r3,12(r17)
    bbac:	003fae06 	br	ba68 <__alt_exception_stack_pointer+0xf800ba68>

0000bbb0 <_fflush_r>:
    bbb0:	defffd04 	addi	sp,sp,-12
    bbb4:	dc000115 	stw	r16,4(sp)
    bbb8:	dfc00215 	stw	ra,8(sp)
    bbbc:	2021883a 	mov	r16,r4
    bbc0:	20000226 	beq	r4,zero,bbcc <_fflush_r+0x1c>
    bbc4:	20800e17 	ldw	r2,56(r4)
    bbc8:	10000c26 	beq	r2,zero,bbfc <_fflush_r+0x4c>
    bbcc:	2880030f 	ldh	r2,12(r5)
    bbd0:	1000051e 	bne	r2,zero,bbe8 <_fflush_r+0x38>
    bbd4:	0005883a 	mov	r2,zero
    bbd8:	dfc00217 	ldw	ra,8(sp)
    bbdc:	dc000117 	ldw	r16,4(sp)
    bbe0:	dec00304 	addi	sp,sp,12
    bbe4:	f800283a 	ret
    bbe8:	8009883a 	mov	r4,r16
    bbec:	dfc00217 	ldw	ra,8(sp)
    bbf0:	dc000117 	ldw	r16,4(sp)
    bbf4:	dec00304 	addi	sp,sp,12
    bbf8:	000b9941 	jmpi	b994 <__sflush_r>
    bbfc:	d9400015 	stw	r5,0(sp)
    bc00:	000bf9c0 	call	bf9c <__sinit>
    bc04:	d9400017 	ldw	r5,0(sp)
    bc08:	003ff006 	br	bbcc <__alt_exception_stack_pointer+0xf800bbcc>

0000bc0c <fflush>:
    bc0c:	20000526 	beq	r4,zero,bc24 <fflush+0x18>
    bc10:	008000b4 	movhi	r2,2
    bc14:	10a16a04 	addi	r2,r2,-31320
    bc18:	200b883a 	mov	r5,r4
    bc1c:	11000017 	ldw	r4,0(r2)
    bc20:	000bbb01 	jmpi	bbb0 <_fflush_r>
    bc24:	008000b4 	movhi	r2,2
    bc28:	10a16904 	addi	r2,r2,-31324
    bc2c:	11000017 	ldw	r4,0(r2)
    bc30:	01400074 	movhi	r5,1
    bc34:	296eec04 	addi	r5,r5,-17488
    bc38:	000c9ac1 	jmpi	c9ac <_fwalk_reent>

0000bc3c <__fp_unlock>:
    bc3c:	0005883a 	mov	r2,zero
    bc40:	f800283a 	ret

0000bc44 <_cleanup_r>:
    bc44:	01400074 	movhi	r5,1
    bc48:	2940ba04 	addi	r5,r5,744
    bc4c:	000c9ac1 	jmpi	c9ac <_fwalk_reent>

0000bc50 <__sinit.part.1>:
    bc50:	defff704 	addi	sp,sp,-36
    bc54:	00c00074 	movhi	r3,1
    bc58:	dfc00815 	stw	ra,32(sp)
    bc5c:	ddc00715 	stw	r23,28(sp)
    bc60:	dd800615 	stw	r22,24(sp)
    bc64:	dd400515 	stw	r21,20(sp)
    bc68:	dd000415 	stw	r20,16(sp)
    bc6c:	dcc00315 	stw	r19,12(sp)
    bc70:	dc800215 	stw	r18,8(sp)
    bc74:	dc400115 	stw	r17,4(sp)
    bc78:	dc000015 	stw	r16,0(sp)
    bc7c:	18ef1104 	addi	r3,r3,-17340
    bc80:	24000117 	ldw	r16,4(r4)
    bc84:	20c00f15 	stw	r3,60(r4)
    bc88:	2080bb04 	addi	r2,r4,748
    bc8c:	00c000c4 	movi	r3,3
    bc90:	20c0b915 	stw	r3,740(r4)
    bc94:	2080ba15 	stw	r2,744(r4)
    bc98:	2000b815 	stw	zero,736(r4)
    bc9c:	05c00204 	movi	r23,8
    bca0:	00800104 	movi	r2,4
    bca4:	2025883a 	mov	r18,r4
    bca8:	b80d883a 	mov	r6,r23
    bcac:	81001704 	addi	r4,r16,92
    bcb0:	000b883a 	mov	r5,zero
    bcb4:	80000015 	stw	zero,0(r16)
    bcb8:	80000115 	stw	zero,4(r16)
    bcbc:	80000215 	stw	zero,8(r16)
    bcc0:	8080030d 	sth	r2,12(r16)
    bcc4:	80001915 	stw	zero,100(r16)
    bcc8:	8000038d 	sth	zero,14(r16)
    bccc:	80000415 	stw	zero,16(r16)
    bcd0:	80000515 	stw	zero,20(r16)
    bcd4:	80000615 	stw	zero,24(r16)
    bcd8:	000d0900 	call	d090 <memset>
    bcdc:	05800074 	movhi	r22,1
    bce0:	94400217 	ldw	r17,8(r18)
    bce4:	05400074 	movhi	r21,1
    bce8:	05000074 	movhi	r20,1
    bcec:	04c00074 	movhi	r19,1
    bcf0:	b5ba1204 	addi	r22,r22,-6072
    bcf4:	ad7a2904 	addi	r21,r21,-5980
    bcf8:	a53a4804 	addi	r20,r20,-5856
    bcfc:	9cfa5f04 	addi	r19,r19,-5764
    bd00:	85800815 	stw	r22,32(r16)
    bd04:	85400915 	stw	r21,36(r16)
    bd08:	85000a15 	stw	r20,40(r16)
    bd0c:	84c00b15 	stw	r19,44(r16)
    bd10:	84000715 	stw	r16,28(r16)
    bd14:	00800284 	movi	r2,10
    bd18:	8880030d 	sth	r2,12(r17)
    bd1c:	00800044 	movi	r2,1
    bd20:	b80d883a 	mov	r6,r23
    bd24:	89001704 	addi	r4,r17,92
    bd28:	000b883a 	mov	r5,zero
    bd2c:	88000015 	stw	zero,0(r17)
    bd30:	88000115 	stw	zero,4(r17)
    bd34:	88000215 	stw	zero,8(r17)
    bd38:	88001915 	stw	zero,100(r17)
    bd3c:	8880038d 	sth	r2,14(r17)
    bd40:	88000415 	stw	zero,16(r17)
    bd44:	88000515 	stw	zero,20(r17)
    bd48:	88000615 	stw	zero,24(r17)
    bd4c:	000d0900 	call	d090 <memset>
    bd50:	94000317 	ldw	r16,12(r18)
    bd54:	00800484 	movi	r2,18
    bd58:	8c400715 	stw	r17,28(r17)
    bd5c:	8d800815 	stw	r22,32(r17)
    bd60:	8d400915 	stw	r21,36(r17)
    bd64:	8d000a15 	stw	r20,40(r17)
    bd68:	8cc00b15 	stw	r19,44(r17)
    bd6c:	8080030d 	sth	r2,12(r16)
    bd70:	00800084 	movi	r2,2
    bd74:	80000015 	stw	zero,0(r16)
    bd78:	80000115 	stw	zero,4(r16)
    bd7c:	80000215 	stw	zero,8(r16)
    bd80:	80001915 	stw	zero,100(r16)
    bd84:	8080038d 	sth	r2,14(r16)
    bd88:	80000415 	stw	zero,16(r16)
    bd8c:	80000515 	stw	zero,20(r16)
    bd90:	80000615 	stw	zero,24(r16)
    bd94:	b80d883a 	mov	r6,r23
    bd98:	000b883a 	mov	r5,zero
    bd9c:	81001704 	addi	r4,r16,92
    bda0:	000d0900 	call	d090 <memset>
    bda4:	00800044 	movi	r2,1
    bda8:	84000715 	stw	r16,28(r16)
    bdac:	85800815 	stw	r22,32(r16)
    bdb0:	85400915 	stw	r21,36(r16)
    bdb4:	85000a15 	stw	r20,40(r16)
    bdb8:	84c00b15 	stw	r19,44(r16)
    bdbc:	90800e15 	stw	r2,56(r18)
    bdc0:	dfc00817 	ldw	ra,32(sp)
    bdc4:	ddc00717 	ldw	r23,28(sp)
    bdc8:	dd800617 	ldw	r22,24(sp)
    bdcc:	dd400517 	ldw	r21,20(sp)
    bdd0:	dd000417 	ldw	r20,16(sp)
    bdd4:	dcc00317 	ldw	r19,12(sp)
    bdd8:	dc800217 	ldw	r18,8(sp)
    bddc:	dc400117 	ldw	r17,4(sp)
    bde0:	dc000017 	ldw	r16,0(sp)
    bde4:	dec00904 	addi	sp,sp,36
    bde8:	f800283a 	ret

0000bdec <__fp_lock>:
    bdec:	0005883a 	mov	r2,zero
    bdf0:	f800283a 	ret

0000bdf4 <__sfmoreglue>:
    bdf4:	defffc04 	addi	sp,sp,-16
    bdf8:	dc800215 	stw	r18,8(sp)
    bdfc:	2825883a 	mov	r18,r5
    be00:	dc000015 	stw	r16,0(sp)
    be04:	01401a04 	movi	r5,104
    be08:	2021883a 	mov	r16,r4
    be0c:	913fffc4 	addi	r4,r18,-1
    be10:	dfc00315 	stw	ra,12(sp)
    be14:	dc400115 	stw	r17,4(sp)
    be18:	00053c80 	call	53c8 <__mulsi3>
    be1c:	8009883a 	mov	r4,r16
    be20:	11401d04 	addi	r5,r2,116
    be24:	1023883a 	mov	r17,r2
    be28:	000719c0 	call	719c <_malloc_r>
    be2c:	1021883a 	mov	r16,r2
    be30:	10000726 	beq	r2,zero,be50 <__sfmoreglue+0x5c>
    be34:	11000304 	addi	r4,r2,12
    be38:	10000015 	stw	zero,0(r2)
    be3c:	14800115 	stw	r18,4(r2)
    be40:	11000215 	stw	r4,8(r2)
    be44:	89801a04 	addi	r6,r17,104
    be48:	000b883a 	mov	r5,zero
    be4c:	000d0900 	call	d090 <memset>
    be50:	8005883a 	mov	r2,r16
    be54:	dfc00317 	ldw	ra,12(sp)
    be58:	dc800217 	ldw	r18,8(sp)
    be5c:	dc400117 	ldw	r17,4(sp)
    be60:	dc000017 	ldw	r16,0(sp)
    be64:	dec00404 	addi	sp,sp,16
    be68:	f800283a 	ret

0000be6c <__sfp>:
    be6c:	defffb04 	addi	sp,sp,-20
    be70:	dc000015 	stw	r16,0(sp)
    be74:	040000b4 	movhi	r16,2
    be78:	84216904 	addi	r16,r16,-31324
    be7c:	dcc00315 	stw	r19,12(sp)
    be80:	2027883a 	mov	r19,r4
    be84:	81000017 	ldw	r4,0(r16)
    be88:	dfc00415 	stw	ra,16(sp)
    be8c:	dc800215 	stw	r18,8(sp)
    be90:	20800e17 	ldw	r2,56(r4)
    be94:	dc400115 	stw	r17,4(sp)
    be98:	1000021e 	bne	r2,zero,bea4 <__sfp+0x38>
    be9c:	000bc500 	call	bc50 <__sinit.part.1>
    bea0:	81000017 	ldw	r4,0(r16)
    bea4:	2480b804 	addi	r18,r4,736
    bea8:	047fffc4 	movi	r17,-1
    beac:	91000117 	ldw	r4,4(r18)
    beb0:	94000217 	ldw	r16,8(r18)
    beb4:	213fffc4 	addi	r4,r4,-1
    beb8:	20000a16 	blt	r4,zero,bee4 <__sfp+0x78>
    bebc:	8080030f 	ldh	r2,12(r16)
    bec0:	10000c26 	beq	r2,zero,bef4 <__sfp+0x88>
    bec4:	80c01d04 	addi	r3,r16,116
    bec8:	00000206 	br	bed4 <__sfp+0x68>
    becc:	18bfe60f 	ldh	r2,-104(r3)
    bed0:	10000826 	beq	r2,zero,bef4 <__sfp+0x88>
    bed4:	213fffc4 	addi	r4,r4,-1
    bed8:	1c3ffd04 	addi	r16,r3,-12
    bedc:	18c01a04 	addi	r3,r3,104
    bee0:	247ffa1e 	bne	r4,r17,becc <__alt_exception_stack_pointer+0xf800becc>
    bee4:	90800017 	ldw	r2,0(r18)
    bee8:	10001d26 	beq	r2,zero,bf60 <__sfp+0xf4>
    beec:	1025883a 	mov	r18,r2
    bef0:	003fee06 	br	beac <__alt_exception_stack_pointer+0xf800beac>
    bef4:	00bfffc4 	movi	r2,-1
    bef8:	8080038d 	sth	r2,14(r16)
    befc:	00800044 	movi	r2,1
    bf00:	8080030d 	sth	r2,12(r16)
    bf04:	80001915 	stw	zero,100(r16)
    bf08:	80000015 	stw	zero,0(r16)
    bf0c:	80000215 	stw	zero,8(r16)
    bf10:	80000115 	stw	zero,4(r16)
    bf14:	80000415 	stw	zero,16(r16)
    bf18:	80000515 	stw	zero,20(r16)
    bf1c:	80000615 	stw	zero,24(r16)
    bf20:	01800204 	movi	r6,8
    bf24:	000b883a 	mov	r5,zero
    bf28:	81001704 	addi	r4,r16,92
    bf2c:	000d0900 	call	d090 <memset>
    bf30:	8005883a 	mov	r2,r16
    bf34:	80000c15 	stw	zero,48(r16)
    bf38:	80000d15 	stw	zero,52(r16)
    bf3c:	80001115 	stw	zero,68(r16)
    bf40:	80001215 	stw	zero,72(r16)
    bf44:	dfc00417 	ldw	ra,16(sp)
    bf48:	dcc00317 	ldw	r19,12(sp)
    bf4c:	dc800217 	ldw	r18,8(sp)
    bf50:	dc400117 	ldw	r17,4(sp)
    bf54:	dc000017 	ldw	r16,0(sp)
    bf58:	dec00504 	addi	sp,sp,20
    bf5c:	f800283a 	ret
    bf60:	01400104 	movi	r5,4
    bf64:	9809883a 	mov	r4,r19
    bf68:	000bdf40 	call	bdf4 <__sfmoreglue>
    bf6c:	90800015 	stw	r2,0(r18)
    bf70:	103fde1e 	bne	r2,zero,beec <__alt_exception_stack_pointer+0xf800beec>
    bf74:	00800304 	movi	r2,12
    bf78:	98800015 	stw	r2,0(r19)
    bf7c:	0005883a 	mov	r2,zero
    bf80:	003ff006 	br	bf44 <__alt_exception_stack_pointer+0xf800bf44>

0000bf84 <_cleanup>:
    bf84:	008000b4 	movhi	r2,2
    bf88:	10a16904 	addi	r2,r2,-31324
    bf8c:	11000017 	ldw	r4,0(r2)
    bf90:	01400074 	movhi	r5,1
    bf94:	2940ba04 	addi	r5,r5,744
    bf98:	000c9ac1 	jmpi	c9ac <_fwalk_reent>

0000bf9c <__sinit>:
    bf9c:	20800e17 	ldw	r2,56(r4)
    bfa0:	10000126 	beq	r2,zero,bfa8 <__sinit+0xc>
    bfa4:	f800283a 	ret
    bfa8:	000bc501 	jmpi	bc50 <__sinit.part.1>

0000bfac <__sfp_lock_acquire>:
    bfac:	f800283a 	ret

0000bfb0 <__sfp_lock_release>:
    bfb0:	f800283a 	ret

0000bfb4 <__sinit_lock_acquire>:
    bfb4:	f800283a 	ret

0000bfb8 <__sinit_lock_release>:
    bfb8:	f800283a 	ret

0000bfbc <__fp_lock_all>:
    bfbc:	008000b4 	movhi	r2,2
    bfc0:	10a16a04 	addi	r2,r2,-31320
    bfc4:	11000017 	ldw	r4,0(r2)
    bfc8:	01400074 	movhi	r5,1
    bfcc:	296f7b04 	addi	r5,r5,-16916
    bfd0:	000c8e81 	jmpi	c8e8 <_fwalk>

0000bfd4 <__fp_unlock_all>:
    bfd4:	008000b4 	movhi	r2,2
    bfd8:	10a16a04 	addi	r2,r2,-31320
    bfdc:	11000017 	ldw	r4,0(r2)
    bfe0:	01400074 	movhi	r5,1
    bfe4:	296f0f04 	addi	r5,r5,-17348
    bfe8:	000c8e81 	jmpi	c8e8 <_fwalk>

0000bfec <_malloc_trim_r>:
    bfec:	defffb04 	addi	sp,sp,-20
    bff0:	dcc00315 	stw	r19,12(sp)
    bff4:	04c00074 	movhi	r19,1
    bff8:	dc800215 	stw	r18,8(sp)
    bffc:	dc400115 	stw	r17,4(sp)
    c000:	dc000015 	stw	r16,0(sp)
    c004:	dfc00415 	stw	ra,16(sp)
    c008:	2821883a 	mov	r16,r5
    c00c:	9cdb6804 	addi	r19,r19,28064
    c010:	2025883a 	mov	r18,r4
    c014:	001291c0 	call	1291c <__malloc_lock>
    c018:	98800217 	ldw	r2,8(r19)
    c01c:	14400117 	ldw	r17,4(r2)
    c020:	00bfff04 	movi	r2,-4
    c024:	88a2703a 	and	r17,r17,r2
    c028:	8c21c83a 	sub	r16,r17,r16
    c02c:	8403fbc4 	addi	r16,r16,4079
    c030:	8020d33a 	srli	r16,r16,12
    c034:	0083ffc4 	movi	r2,4095
    c038:	843fffc4 	addi	r16,r16,-1
    c03c:	8020933a 	slli	r16,r16,12
    c040:	1400060e 	bge	r2,r16,c05c <_malloc_trim_r+0x70>
    c044:	000b883a 	mov	r5,zero
    c048:	9009883a 	mov	r4,r18
    c04c:	0007ae80 	call	7ae8 <_sbrk_r>
    c050:	98c00217 	ldw	r3,8(r19)
    c054:	1c47883a 	add	r3,r3,r17
    c058:	10c00a26 	beq	r2,r3,c084 <_malloc_trim_r+0x98>
    c05c:	9009883a 	mov	r4,r18
    c060:	00129400 	call	12940 <__malloc_unlock>
    c064:	0005883a 	mov	r2,zero
    c068:	dfc00417 	ldw	ra,16(sp)
    c06c:	dcc00317 	ldw	r19,12(sp)
    c070:	dc800217 	ldw	r18,8(sp)
    c074:	dc400117 	ldw	r17,4(sp)
    c078:	dc000017 	ldw	r16,0(sp)
    c07c:	dec00504 	addi	sp,sp,20
    c080:	f800283a 	ret
    c084:	040bc83a 	sub	r5,zero,r16
    c088:	9009883a 	mov	r4,r18
    c08c:	0007ae80 	call	7ae8 <_sbrk_r>
    c090:	00ffffc4 	movi	r3,-1
    c094:	10c00d26 	beq	r2,r3,c0cc <_malloc_trim_r+0xe0>
    c098:	00c000b4 	movhi	r3,2
    c09c:	18e8af04 	addi	r3,r3,-23876
    c0a0:	18800017 	ldw	r2,0(r3)
    c0a4:	99000217 	ldw	r4,8(r19)
    c0a8:	8c23c83a 	sub	r17,r17,r16
    c0ac:	8c400054 	ori	r17,r17,1
    c0b0:	1421c83a 	sub	r16,r2,r16
    c0b4:	24400115 	stw	r17,4(r4)
    c0b8:	9009883a 	mov	r4,r18
    c0bc:	1c000015 	stw	r16,0(r3)
    c0c0:	00129400 	call	12940 <__malloc_unlock>
    c0c4:	00800044 	movi	r2,1
    c0c8:	003fe706 	br	c068 <__alt_exception_stack_pointer+0xf800c068>
    c0cc:	000b883a 	mov	r5,zero
    c0d0:	9009883a 	mov	r4,r18
    c0d4:	0007ae80 	call	7ae8 <_sbrk_r>
    c0d8:	99000217 	ldw	r4,8(r19)
    c0dc:	014003c4 	movi	r5,15
    c0e0:	1107c83a 	sub	r3,r2,r4
    c0e4:	28ffdd0e 	bge	r5,r3,c05c <__alt_exception_stack_pointer+0xf800c05c>
    c0e8:	014000b4 	movhi	r5,2
    c0ec:	29616b04 	addi	r5,r5,-31316
    c0f0:	29400017 	ldw	r5,0(r5)
    c0f4:	18c00054 	ori	r3,r3,1
    c0f8:	20c00115 	stw	r3,4(r4)
    c0fc:	00c000b4 	movhi	r3,2
    c100:	1145c83a 	sub	r2,r2,r5
    c104:	18e8af04 	addi	r3,r3,-23876
    c108:	18800015 	stw	r2,0(r3)
    c10c:	003fd306 	br	c05c <__alt_exception_stack_pointer+0xf800c05c>

0000c110 <_free_r>:
    c110:	28004126 	beq	r5,zero,c218 <_free_r+0x108>
    c114:	defffd04 	addi	sp,sp,-12
    c118:	dc400115 	stw	r17,4(sp)
    c11c:	dc000015 	stw	r16,0(sp)
    c120:	2023883a 	mov	r17,r4
    c124:	2821883a 	mov	r16,r5
    c128:	dfc00215 	stw	ra,8(sp)
    c12c:	001291c0 	call	1291c <__malloc_lock>
    c130:	81ffff17 	ldw	r7,-4(r16)
    c134:	00bfff84 	movi	r2,-2
    c138:	01000074 	movhi	r4,1
    c13c:	81bffe04 	addi	r6,r16,-8
    c140:	3884703a 	and	r2,r7,r2
    c144:	211b6804 	addi	r4,r4,28064
    c148:	308b883a 	add	r5,r6,r2
    c14c:	2a400117 	ldw	r9,4(r5)
    c150:	22000217 	ldw	r8,8(r4)
    c154:	00ffff04 	movi	r3,-4
    c158:	48c6703a 	and	r3,r9,r3
    c15c:	2a005726 	beq	r5,r8,c2bc <_free_r+0x1ac>
    c160:	28c00115 	stw	r3,4(r5)
    c164:	39c0004c 	andi	r7,r7,1
    c168:	3800091e 	bne	r7,zero,c190 <_free_r+0x80>
    c16c:	823ffe17 	ldw	r8,-8(r16)
    c170:	22400204 	addi	r9,r4,8
    c174:	320dc83a 	sub	r6,r6,r8
    c178:	31c00217 	ldw	r7,8(r6)
    c17c:	1205883a 	add	r2,r2,r8
    c180:	3a406526 	beq	r7,r9,c318 <_free_r+0x208>
    c184:	32000317 	ldw	r8,12(r6)
    c188:	3a000315 	stw	r8,12(r7)
    c18c:	41c00215 	stw	r7,8(r8)
    c190:	28cf883a 	add	r7,r5,r3
    c194:	39c00117 	ldw	r7,4(r7)
    c198:	39c0004c 	andi	r7,r7,1
    c19c:	38003a26 	beq	r7,zero,c288 <_free_r+0x178>
    c1a0:	10c00054 	ori	r3,r2,1
    c1a4:	30c00115 	stw	r3,4(r6)
    c1a8:	3087883a 	add	r3,r6,r2
    c1ac:	18800015 	stw	r2,0(r3)
    c1b0:	00c07fc4 	movi	r3,511
    c1b4:	18801936 	bltu	r3,r2,c21c <_free_r+0x10c>
    c1b8:	1004d0fa 	srli	r2,r2,3
    c1bc:	01c00044 	movi	r7,1
    c1c0:	21400117 	ldw	r5,4(r4)
    c1c4:	10c00044 	addi	r3,r2,1
    c1c8:	18c7883a 	add	r3,r3,r3
    c1cc:	1005d0ba 	srai	r2,r2,2
    c1d0:	18c7883a 	add	r3,r3,r3
    c1d4:	18c7883a 	add	r3,r3,r3
    c1d8:	1907883a 	add	r3,r3,r4
    c1dc:	3884983a 	sll	r2,r7,r2
    c1e0:	19c00017 	ldw	r7,0(r3)
    c1e4:	1a3ffe04 	addi	r8,r3,-8
    c1e8:	1144b03a 	or	r2,r2,r5
    c1ec:	32000315 	stw	r8,12(r6)
    c1f0:	31c00215 	stw	r7,8(r6)
    c1f4:	20800115 	stw	r2,4(r4)
    c1f8:	19800015 	stw	r6,0(r3)
    c1fc:	39800315 	stw	r6,12(r7)
    c200:	8809883a 	mov	r4,r17
    c204:	dfc00217 	ldw	ra,8(sp)
    c208:	dc400117 	ldw	r17,4(sp)
    c20c:	dc000017 	ldw	r16,0(sp)
    c210:	dec00304 	addi	sp,sp,12
    c214:	00129401 	jmpi	12940 <__malloc_unlock>
    c218:	f800283a 	ret
    c21c:	100ad27a 	srli	r5,r2,9
    c220:	00c00104 	movi	r3,4
    c224:	19404a36 	bltu	r3,r5,c350 <_free_r+0x240>
    c228:	100ad1ba 	srli	r5,r2,6
    c22c:	28c00e44 	addi	r3,r5,57
    c230:	18c7883a 	add	r3,r3,r3
    c234:	29400e04 	addi	r5,r5,56
    c238:	18c7883a 	add	r3,r3,r3
    c23c:	18c7883a 	add	r3,r3,r3
    c240:	1909883a 	add	r4,r3,r4
    c244:	20c00017 	ldw	r3,0(r4)
    c248:	01c00074 	movhi	r7,1
    c24c:	213ffe04 	addi	r4,r4,-8
    c250:	39db6804 	addi	r7,r7,28064
    c254:	20c04426 	beq	r4,r3,c368 <_free_r+0x258>
    c258:	01ffff04 	movi	r7,-4
    c25c:	19400117 	ldw	r5,4(r3)
    c260:	29ca703a 	and	r5,r5,r7
    c264:	1140022e 	bgeu	r2,r5,c270 <_free_r+0x160>
    c268:	18c00217 	ldw	r3,8(r3)
    c26c:	20fffb1e 	bne	r4,r3,c25c <__alt_exception_stack_pointer+0xf800c25c>
    c270:	19000317 	ldw	r4,12(r3)
    c274:	31000315 	stw	r4,12(r6)
    c278:	30c00215 	stw	r3,8(r6)
    c27c:	21800215 	stw	r6,8(r4)
    c280:	19800315 	stw	r6,12(r3)
    c284:	003fde06 	br	c200 <__alt_exception_stack_pointer+0xf800c200>
    c288:	29c00217 	ldw	r7,8(r5)
    c28c:	10c5883a 	add	r2,r2,r3
    c290:	00c00074 	movhi	r3,1
    c294:	18db6a04 	addi	r3,r3,28072
    c298:	38c03b26 	beq	r7,r3,c388 <_free_r+0x278>
    c29c:	2a000317 	ldw	r8,12(r5)
    c2a0:	11400054 	ori	r5,r2,1
    c2a4:	3087883a 	add	r3,r6,r2
    c2a8:	3a000315 	stw	r8,12(r7)
    c2ac:	41c00215 	stw	r7,8(r8)
    c2b0:	31400115 	stw	r5,4(r6)
    c2b4:	18800015 	stw	r2,0(r3)
    c2b8:	003fbd06 	br	c1b0 <__alt_exception_stack_pointer+0xf800c1b0>
    c2bc:	39c0004c 	andi	r7,r7,1
    c2c0:	10c5883a 	add	r2,r2,r3
    c2c4:	3800071e 	bne	r7,zero,c2e4 <_free_r+0x1d4>
    c2c8:	81fffe17 	ldw	r7,-8(r16)
    c2cc:	31cdc83a 	sub	r6,r6,r7
    c2d0:	30c00317 	ldw	r3,12(r6)
    c2d4:	31400217 	ldw	r5,8(r6)
    c2d8:	11c5883a 	add	r2,r2,r7
    c2dc:	28c00315 	stw	r3,12(r5)
    c2e0:	19400215 	stw	r5,8(r3)
    c2e4:	10c00054 	ori	r3,r2,1
    c2e8:	30c00115 	stw	r3,4(r6)
    c2ec:	00c000b4 	movhi	r3,2
    c2f0:	18e16c04 	addi	r3,r3,-31312
    c2f4:	18c00017 	ldw	r3,0(r3)
    c2f8:	21800215 	stw	r6,8(r4)
    c2fc:	10ffc036 	bltu	r2,r3,c200 <__alt_exception_stack_pointer+0xf800c200>
    c300:	008000b4 	movhi	r2,2
    c304:	10a8a304 	addi	r2,r2,-23924
    c308:	11400017 	ldw	r5,0(r2)
    c30c:	8809883a 	mov	r4,r17
    c310:	000bfec0 	call	bfec <_malloc_trim_r>
    c314:	003fba06 	br	c200 <__alt_exception_stack_pointer+0xf800c200>
    c318:	28c9883a 	add	r4,r5,r3
    c31c:	21000117 	ldw	r4,4(r4)
    c320:	2100004c 	andi	r4,r4,1
    c324:	2000391e 	bne	r4,zero,c40c <_free_r+0x2fc>
    c328:	29c00217 	ldw	r7,8(r5)
    c32c:	29000317 	ldw	r4,12(r5)
    c330:	1885883a 	add	r2,r3,r2
    c334:	10c00054 	ori	r3,r2,1
    c338:	39000315 	stw	r4,12(r7)
    c33c:	21c00215 	stw	r7,8(r4)
    c340:	30c00115 	stw	r3,4(r6)
    c344:	308d883a 	add	r6,r6,r2
    c348:	30800015 	stw	r2,0(r6)
    c34c:	003fac06 	br	c200 <__alt_exception_stack_pointer+0xf800c200>
    c350:	00c00504 	movi	r3,20
    c354:	19401536 	bltu	r3,r5,c3ac <_free_r+0x29c>
    c358:	28c01704 	addi	r3,r5,92
    c35c:	18c7883a 	add	r3,r3,r3
    c360:	294016c4 	addi	r5,r5,91
    c364:	003fb406 	br	c238 <__alt_exception_stack_pointer+0xf800c238>
    c368:	280bd0ba 	srai	r5,r5,2
    c36c:	00c00044 	movi	r3,1
    c370:	38800117 	ldw	r2,4(r7)
    c374:	194a983a 	sll	r5,r3,r5
    c378:	2007883a 	mov	r3,r4
    c37c:	2884b03a 	or	r2,r5,r2
    c380:	38800115 	stw	r2,4(r7)
    c384:	003fbb06 	br	c274 <__alt_exception_stack_pointer+0xf800c274>
    c388:	21800515 	stw	r6,20(r4)
    c38c:	21800415 	stw	r6,16(r4)
    c390:	10c00054 	ori	r3,r2,1
    c394:	31c00315 	stw	r7,12(r6)
    c398:	31c00215 	stw	r7,8(r6)
    c39c:	30c00115 	stw	r3,4(r6)
    c3a0:	308d883a 	add	r6,r6,r2
    c3a4:	30800015 	stw	r2,0(r6)
    c3a8:	003f9506 	br	c200 <__alt_exception_stack_pointer+0xf800c200>
    c3ac:	00c01504 	movi	r3,84
    c3b0:	19400536 	bltu	r3,r5,c3c8 <_free_r+0x2b8>
    c3b4:	100ad33a 	srli	r5,r2,12
    c3b8:	28c01bc4 	addi	r3,r5,111
    c3bc:	18c7883a 	add	r3,r3,r3
    c3c0:	29401b84 	addi	r5,r5,110
    c3c4:	003f9c06 	br	c238 <__alt_exception_stack_pointer+0xf800c238>
    c3c8:	00c05504 	movi	r3,340
    c3cc:	19400536 	bltu	r3,r5,c3e4 <_free_r+0x2d4>
    c3d0:	100ad3fa 	srli	r5,r2,15
    c3d4:	28c01e04 	addi	r3,r5,120
    c3d8:	18c7883a 	add	r3,r3,r3
    c3dc:	29401dc4 	addi	r5,r5,119
    c3e0:	003f9506 	br	c238 <__alt_exception_stack_pointer+0xf800c238>
    c3e4:	00c15504 	movi	r3,1364
    c3e8:	19400536 	bltu	r3,r5,c400 <_free_r+0x2f0>
    c3ec:	100ad4ba 	srli	r5,r2,18
    c3f0:	28c01f44 	addi	r3,r5,125
    c3f4:	18c7883a 	add	r3,r3,r3
    c3f8:	29401f04 	addi	r5,r5,124
    c3fc:	003f8e06 	br	c238 <__alt_exception_stack_pointer+0xf800c238>
    c400:	00c03f84 	movi	r3,254
    c404:	01401f84 	movi	r5,126
    c408:	003f8b06 	br	c238 <__alt_exception_stack_pointer+0xf800c238>
    c40c:	10c00054 	ori	r3,r2,1
    c410:	30c00115 	stw	r3,4(r6)
    c414:	308d883a 	add	r6,r6,r2
    c418:	30800015 	stw	r2,0(r6)
    c41c:	003f7806 	br	c200 <__alt_exception_stack_pointer+0xf800c200>

0000c420 <__sfvwrite_r>:
    c420:	30800217 	ldw	r2,8(r6)
    c424:	10006726 	beq	r2,zero,c5c4 <__sfvwrite_r+0x1a4>
    c428:	28c0030b 	ldhu	r3,12(r5)
    c42c:	defff404 	addi	sp,sp,-48
    c430:	dd400715 	stw	r21,28(sp)
    c434:	dd000615 	stw	r20,24(sp)
    c438:	dc000215 	stw	r16,8(sp)
    c43c:	dfc00b15 	stw	ra,44(sp)
    c440:	df000a15 	stw	fp,40(sp)
    c444:	ddc00915 	stw	r23,36(sp)
    c448:	dd800815 	stw	r22,32(sp)
    c44c:	dcc00515 	stw	r19,20(sp)
    c450:	dc800415 	stw	r18,16(sp)
    c454:	dc400315 	stw	r17,12(sp)
    c458:	1880020c 	andi	r2,r3,8
    c45c:	2821883a 	mov	r16,r5
    c460:	202b883a 	mov	r21,r4
    c464:	3029883a 	mov	r20,r6
    c468:	10002726 	beq	r2,zero,c508 <__sfvwrite_r+0xe8>
    c46c:	28800417 	ldw	r2,16(r5)
    c470:	10002526 	beq	r2,zero,c508 <__sfvwrite_r+0xe8>
    c474:	1880008c 	andi	r2,r3,2
    c478:	a4400017 	ldw	r17,0(r20)
    c47c:	10002a26 	beq	r2,zero,c528 <__sfvwrite_r+0x108>
    c480:	05a00034 	movhi	r22,32768
    c484:	0027883a 	mov	r19,zero
    c488:	0025883a 	mov	r18,zero
    c48c:	b5bf0004 	addi	r22,r22,-1024
    c490:	980d883a 	mov	r6,r19
    c494:	a809883a 	mov	r4,r21
    c498:	90004626 	beq	r18,zero,c5b4 <__sfvwrite_r+0x194>
    c49c:	900f883a 	mov	r7,r18
    c4a0:	b480022e 	bgeu	r22,r18,c4ac <__sfvwrite_r+0x8c>
    c4a4:	01e00034 	movhi	r7,32768
    c4a8:	39ff0004 	addi	r7,r7,-1024
    c4ac:	80800917 	ldw	r2,36(r16)
    c4b0:	81400717 	ldw	r5,28(r16)
    c4b4:	103ee83a 	callr	r2
    c4b8:	00805a0e 	bge	zero,r2,c624 <__sfvwrite_r+0x204>
    c4bc:	a0c00217 	ldw	r3,8(r20)
    c4c0:	98a7883a 	add	r19,r19,r2
    c4c4:	90a5c83a 	sub	r18,r18,r2
    c4c8:	1885c83a 	sub	r2,r3,r2
    c4cc:	a0800215 	stw	r2,8(r20)
    c4d0:	103fef1e 	bne	r2,zero,c490 <__alt_exception_stack_pointer+0xf800c490>
    c4d4:	0005883a 	mov	r2,zero
    c4d8:	dfc00b17 	ldw	ra,44(sp)
    c4dc:	df000a17 	ldw	fp,40(sp)
    c4e0:	ddc00917 	ldw	r23,36(sp)
    c4e4:	dd800817 	ldw	r22,32(sp)
    c4e8:	dd400717 	ldw	r21,28(sp)
    c4ec:	dd000617 	ldw	r20,24(sp)
    c4f0:	dcc00517 	ldw	r19,20(sp)
    c4f4:	dc800417 	ldw	r18,16(sp)
    c4f8:	dc400317 	ldw	r17,12(sp)
    c4fc:	dc000217 	ldw	r16,8(sp)
    c500:	dec00c04 	addi	sp,sp,48
    c504:	f800283a 	ret
    c508:	800b883a 	mov	r5,r16
    c50c:	a809883a 	mov	r4,r21
    c510:	0009f900 	call	9f90 <__swsetup_r>
    c514:	1000ee1e 	bne	r2,zero,c8d0 <__sfvwrite_r+0x4b0>
    c518:	80c0030b 	ldhu	r3,12(r16)
    c51c:	a4400017 	ldw	r17,0(r20)
    c520:	1880008c 	andi	r2,r3,2
    c524:	103fd61e 	bne	r2,zero,c480 <__alt_exception_stack_pointer+0xf800c480>
    c528:	1880004c 	andi	r2,r3,1
    c52c:	1000421e 	bne	r2,zero,c638 <__sfvwrite_r+0x218>
    c530:	0039883a 	mov	fp,zero
    c534:	0025883a 	mov	r18,zero
    c538:	90001a26 	beq	r18,zero,c5a4 <__sfvwrite_r+0x184>
    c53c:	1880800c 	andi	r2,r3,512
    c540:	84c00217 	ldw	r19,8(r16)
    c544:	10002126 	beq	r2,zero,c5cc <__sfvwrite_r+0x1ac>
    c548:	982f883a 	mov	r23,r19
    c54c:	94c09636 	bltu	r18,r19,c7a8 <__sfvwrite_r+0x388>
    c550:	1881200c 	andi	r2,r3,1152
    c554:	1000a11e 	bne	r2,zero,c7dc <__sfvwrite_r+0x3bc>
    c558:	81000017 	ldw	r4,0(r16)
    c55c:	b80d883a 	mov	r6,r23
    c560:	e00b883a 	mov	r5,fp
    c564:	000cf340 	call	cf34 <memmove>
    c568:	80c00217 	ldw	r3,8(r16)
    c56c:	81000017 	ldw	r4,0(r16)
    c570:	9005883a 	mov	r2,r18
    c574:	1ce7c83a 	sub	r19,r3,r19
    c578:	25cf883a 	add	r7,r4,r23
    c57c:	84c00215 	stw	r19,8(r16)
    c580:	81c00015 	stw	r7,0(r16)
    c584:	a0c00217 	ldw	r3,8(r20)
    c588:	e0b9883a 	add	fp,fp,r2
    c58c:	90a5c83a 	sub	r18,r18,r2
    c590:	18a7c83a 	sub	r19,r3,r2
    c594:	a4c00215 	stw	r19,8(r20)
    c598:	983fce26 	beq	r19,zero,c4d4 <__alt_exception_stack_pointer+0xf800c4d4>
    c59c:	80c0030b 	ldhu	r3,12(r16)
    c5a0:	903fe61e 	bne	r18,zero,c53c <__alt_exception_stack_pointer+0xf800c53c>
    c5a4:	8f000017 	ldw	fp,0(r17)
    c5a8:	8c800117 	ldw	r18,4(r17)
    c5ac:	8c400204 	addi	r17,r17,8
    c5b0:	003fe106 	br	c538 <__alt_exception_stack_pointer+0xf800c538>
    c5b4:	8cc00017 	ldw	r19,0(r17)
    c5b8:	8c800117 	ldw	r18,4(r17)
    c5bc:	8c400204 	addi	r17,r17,8
    c5c0:	003fb306 	br	c490 <__alt_exception_stack_pointer+0xf800c490>
    c5c4:	0005883a 	mov	r2,zero
    c5c8:	f800283a 	ret
    c5cc:	81000017 	ldw	r4,0(r16)
    c5d0:	80800417 	ldw	r2,16(r16)
    c5d4:	11005a36 	bltu	r2,r4,c740 <__sfvwrite_r+0x320>
    c5d8:	85c00517 	ldw	r23,20(r16)
    c5dc:	95c05836 	bltu	r18,r23,c740 <__sfvwrite_r+0x320>
    c5e0:	00a00034 	movhi	r2,32768
    c5e4:	10bfffc4 	addi	r2,r2,-1
    c5e8:	9009883a 	mov	r4,r18
    c5ec:	1480012e 	bgeu	r2,r18,c5f4 <__sfvwrite_r+0x1d4>
    c5f0:	1009883a 	mov	r4,r2
    c5f4:	b80b883a 	mov	r5,r23
    c5f8:	00052140 	call	5214 <__divsi3>
    c5fc:	b80b883a 	mov	r5,r23
    c600:	1009883a 	mov	r4,r2
    c604:	00053c80 	call	53c8 <__mulsi3>
    c608:	81400717 	ldw	r5,28(r16)
    c60c:	80c00917 	ldw	r3,36(r16)
    c610:	100f883a 	mov	r7,r2
    c614:	e00d883a 	mov	r6,fp
    c618:	a809883a 	mov	r4,r21
    c61c:	183ee83a 	callr	r3
    c620:	00bfd816 	blt	zero,r2,c584 <__alt_exception_stack_pointer+0xf800c584>
    c624:	8080030b 	ldhu	r2,12(r16)
    c628:	10801014 	ori	r2,r2,64
    c62c:	8080030d 	sth	r2,12(r16)
    c630:	00bfffc4 	movi	r2,-1
    c634:	003fa806 	br	c4d8 <__alt_exception_stack_pointer+0xf800c4d8>
    c638:	0027883a 	mov	r19,zero
    c63c:	0011883a 	mov	r8,zero
    c640:	0039883a 	mov	fp,zero
    c644:	0025883a 	mov	r18,zero
    c648:	90001f26 	beq	r18,zero,c6c8 <__sfvwrite_r+0x2a8>
    c64c:	40005a26 	beq	r8,zero,c7b8 <__sfvwrite_r+0x398>
    c650:	982d883a 	mov	r22,r19
    c654:	94c0012e 	bgeu	r18,r19,c65c <__sfvwrite_r+0x23c>
    c658:	902d883a 	mov	r22,r18
    c65c:	81000017 	ldw	r4,0(r16)
    c660:	80800417 	ldw	r2,16(r16)
    c664:	b02f883a 	mov	r23,r22
    c668:	81c00517 	ldw	r7,20(r16)
    c66c:	1100032e 	bgeu	r2,r4,c67c <__sfvwrite_r+0x25c>
    c670:	80c00217 	ldw	r3,8(r16)
    c674:	38c7883a 	add	r3,r7,r3
    c678:	1d801816 	blt	r3,r22,c6dc <__sfvwrite_r+0x2bc>
    c67c:	b1c03e16 	blt	r22,r7,c778 <__sfvwrite_r+0x358>
    c680:	80800917 	ldw	r2,36(r16)
    c684:	81400717 	ldw	r5,28(r16)
    c688:	e00d883a 	mov	r6,fp
    c68c:	da000115 	stw	r8,4(sp)
    c690:	a809883a 	mov	r4,r21
    c694:	103ee83a 	callr	r2
    c698:	102f883a 	mov	r23,r2
    c69c:	da000117 	ldw	r8,4(sp)
    c6a0:	00bfe00e 	bge	zero,r2,c624 <__alt_exception_stack_pointer+0xf800c624>
    c6a4:	9de7c83a 	sub	r19,r19,r23
    c6a8:	98001f26 	beq	r19,zero,c728 <__sfvwrite_r+0x308>
    c6ac:	a0800217 	ldw	r2,8(r20)
    c6b0:	e5f9883a 	add	fp,fp,r23
    c6b4:	95e5c83a 	sub	r18,r18,r23
    c6b8:	15efc83a 	sub	r23,r2,r23
    c6bc:	a5c00215 	stw	r23,8(r20)
    c6c0:	b83f8426 	beq	r23,zero,c4d4 <__alt_exception_stack_pointer+0xf800c4d4>
    c6c4:	903fe11e 	bne	r18,zero,c64c <__alt_exception_stack_pointer+0xf800c64c>
    c6c8:	8f000017 	ldw	fp,0(r17)
    c6cc:	8c800117 	ldw	r18,4(r17)
    c6d0:	0011883a 	mov	r8,zero
    c6d4:	8c400204 	addi	r17,r17,8
    c6d8:	003fdb06 	br	c648 <__alt_exception_stack_pointer+0xf800c648>
    c6dc:	180d883a 	mov	r6,r3
    c6e0:	e00b883a 	mov	r5,fp
    c6e4:	da000115 	stw	r8,4(sp)
    c6e8:	d8c00015 	stw	r3,0(sp)
    c6ec:	000cf340 	call	cf34 <memmove>
    c6f0:	d8c00017 	ldw	r3,0(sp)
    c6f4:	80800017 	ldw	r2,0(r16)
    c6f8:	800b883a 	mov	r5,r16
    c6fc:	a809883a 	mov	r4,r21
    c700:	10c5883a 	add	r2,r2,r3
    c704:	80800015 	stw	r2,0(r16)
    c708:	d8c00015 	stw	r3,0(sp)
    c70c:	000bbb00 	call	bbb0 <_fflush_r>
    c710:	d8c00017 	ldw	r3,0(sp)
    c714:	da000117 	ldw	r8,4(sp)
    c718:	103fc21e 	bne	r2,zero,c624 <__alt_exception_stack_pointer+0xf800c624>
    c71c:	182f883a 	mov	r23,r3
    c720:	9de7c83a 	sub	r19,r19,r23
    c724:	983fe11e 	bne	r19,zero,c6ac <__alt_exception_stack_pointer+0xf800c6ac>
    c728:	800b883a 	mov	r5,r16
    c72c:	a809883a 	mov	r4,r21
    c730:	000bbb00 	call	bbb0 <_fflush_r>
    c734:	103fbb1e 	bne	r2,zero,c624 <__alt_exception_stack_pointer+0xf800c624>
    c738:	0011883a 	mov	r8,zero
    c73c:	003fdb06 	br	c6ac <__alt_exception_stack_pointer+0xf800c6ac>
    c740:	94c0012e 	bgeu	r18,r19,c748 <__sfvwrite_r+0x328>
    c744:	9027883a 	mov	r19,r18
    c748:	980d883a 	mov	r6,r19
    c74c:	e00b883a 	mov	r5,fp
    c750:	000cf340 	call	cf34 <memmove>
    c754:	80800217 	ldw	r2,8(r16)
    c758:	80c00017 	ldw	r3,0(r16)
    c75c:	14c5c83a 	sub	r2,r2,r19
    c760:	1cc7883a 	add	r3,r3,r19
    c764:	80800215 	stw	r2,8(r16)
    c768:	80c00015 	stw	r3,0(r16)
    c76c:	10004326 	beq	r2,zero,c87c <__sfvwrite_r+0x45c>
    c770:	9805883a 	mov	r2,r19
    c774:	003f8306 	br	c584 <__alt_exception_stack_pointer+0xf800c584>
    c778:	b00d883a 	mov	r6,r22
    c77c:	e00b883a 	mov	r5,fp
    c780:	da000115 	stw	r8,4(sp)
    c784:	000cf340 	call	cf34 <memmove>
    c788:	80800217 	ldw	r2,8(r16)
    c78c:	80c00017 	ldw	r3,0(r16)
    c790:	da000117 	ldw	r8,4(sp)
    c794:	1585c83a 	sub	r2,r2,r22
    c798:	1dad883a 	add	r22,r3,r22
    c79c:	80800215 	stw	r2,8(r16)
    c7a0:	85800015 	stw	r22,0(r16)
    c7a4:	003fbf06 	br	c6a4 <__alt_exception_stack_pointer+0xf800c6a4>
    c7a8:	81000017 	ldw	r4,0(r16)
    c7ac:	9027883a 	mov	r19,r18
    c7b0:	902f883a 	mov	r23,r18
    c7b4:	003f6906 	br	c55c <__alt_exception_stack_pointer+0xf800c55c>
    c7b8:	900d883a 	mov	r6,r18
    c7bc:	01400284 	movi	r5,10
    c7c0:	e009883a 	mov	r4,fp
    c7c4:	000cd080 	call	cd08 <memchr>
    c7c8:	10003e26 	beq	r2,zero,c8c4 <__sfvwrite_r+0x4a4>
    c7cc:	10800044 	addi	r2,r2,1
    c7d0:	1727c83a 	sub	r19,r2,fp
    c7d4:	02000044 	movi	r8,1
    c7d8:	003f9d06 	br	c650 <__alt_exception_stack_pointer+0xf800c650>
    c7dc:	80800517 	ldw	r2,20(r16)
    c7e0:	81400417 	ldw	r5,16(r16)
    c7e4:	81c00017 	ldw	r7,0(r16)
    c7e8:	10a7883a 	add	r19,r2,r2
    c7ec:	9885883a 	add	r2,r19,r2
    c7f0:	1026d7fa 	srli	r19,r2,31
    c7f4:	396dc83a 	sub	r22,r7,r5
    c7f8:	b1000044 	addi	r4,r22,1
    c7fc:	9885883a 	add	r2,r19,r2
    c800:	1027d07a 	srai	r19,r2,1
    c804:	2485883a 	add	r2,r4,r18
    c808:	980d883a 	mov	r6,r19
    c80c:	9880022e 	bgeu	r19,r2,c818 <__sfvwrite_r+0x3f8>
    c810:	1027883a 	mov	r19,r2
    c814:	100d883a 	mov	r6,r2
    c818:	18c1000c 	andi	r3,r3,1024
    c81c:	18001c26 	beq	r3,zero,c890 <__sfvwrite_r+0x470>
    c820:	300b883a 	mov	r5,r6
    c824:	a809883a 	mov	r4,r21
    c828:	000719c0 	call	719c <_malloc_r>
    c82c:	102f883a 	mov	r23,r2
    c830:	10002926 	beq	r2,zero,c8d8 <__sfvwrite_r+0x4b8>
    c834:	81400417 	ldw	r5,16(r16)
    c838:	b00d883a 	mov	r6,r22
    c83c:	1009883a 	mov	r4,r2
    c840:	000cdec0 	call	cdec <memcpy>
    c844:	8080030b 	ldhu	r2,12(r16)
    c848:	00fedfc4 	movi	r3,-1153
    c84c:	10c4703a 	and	r2,r2,r3
    c850:	10802014 	ori	r2,r2,128
    c854:	8080030d 	sth	r2,12(r16)
    c858:	bd89883a 	add	r4,r23,r22
    c85c:	9d8fc83a 	sub	r7,r19,r22
    c860:	85c00415 	stw	r23,16(r16)
    c864:	84c00515 	stw	r19,20(r16)
    c868:	81000015 	stw	r4,0(r16)
    c86c:	9027883a 	mov	r19,r18
    c870:	81c00215 	stw	r7,8(r16)
    c874:	902f883a 	mov	r23,r18
    c878:	003f3806 	br	c55c <__alt_exception_stack_pointer+0xf800c55c>
    c87c:	800b883a 	mov	r5,r16
    c880:	a809883a 	mov	r4,r21
    c884:	000bbb00 	call	bbb0 <_fflush_r>
    c888:	103fb926 	beq	r2,zero,c770 <__alt_exception_stack_pointer+0xf800c770>
    c88c:	003f6506 	br	c624 <__alt_exception_stack_pointer+0xf800c624>
    c890:	a809883a 	mov	r4,r21
    c894:	000e2700 	call	e270 <_realloc_r>
    c898:	102f883a 	mov	r23,r2
    c89c:	103fee1e 	bne	r2,zero,c858 <__alt_exception_stack_pointer+0xf800c858>
    c8a0:	81400417 	ldw	r5,16(r16)
    c8a4:	a809883a 	mov	r4,r21
    c8a8:	000c1100 	call	c110 <_free_r>
    c8ac:	8080030b 	ldhu	r2,12(r16)
    c8b0:	00ffdfc4 	movi	r3,-129
    c8b4:	1884703a 	and	r2,r3,r2
    c8b8:	00c00304 	movi	r3,12
    c8bc:	a8c00015 	stw	r3,0(r21)
    c8c0:	003f5906 	br	c628 <__alt_exception_stack_pointer+0xf800c628>
    c8c4:	94c00044 	addi	r19,r18,1
    c8c8:	02000044 	movi	r8,1
    c8cc:	003f6006 	br	c650 <__alt_exception_stack_pointer+0xf800c650>
    c8d0:	00bfffc4 	movi	r2,-1
    c8d4:	003f0006 	br	c4d8 <__alt_exception_stack_pointer+0xf800c4d8>
    c8d8:	00800304 	movi	r2,12
    c8dc:	a8800015 	stw	r2,0(r21)
    c8e0:	8080030b 	ldhu	r2,12(r16)
    c8e4:	003f5006 	br	c628 <__alt_exception_stack_pointer+0xf800c628>

0000c8e8 <_fwalk>:
    c8e8:	defff704 	addi	sp,sp,-36
    c8ec:	dd000415 	stw	r20,16(sp)
    c8f0:	dfc00815 	stw	ra,32(sp)
    c8f4:	ddc00715 	stw	r23,28(sp)
    c8f8:	dd800615 	stw	r22,24(sp)
    c8fc:	dd400515 	stw	r21,20(sp)
    c900:	dcc00315 	stw	r19,12(sp)
    c904:	dc800215 	stw	r18,8(sp)
    c908:	dc400115 	stw	r17,4(sp)
    c90c:	dc000015 	stw	r16,0(sp)
    c910:	2500b804 	addi	r20,r4,736
    c914:	a0002326 	beq	r20,zero,c9a4 <_fwalk+0xbc>
    c918:	282b883a 	mov	r21,r5
    c91c:	002f883a 	mov	r23,zero
    c920:	05800044 	movi	r22,1
    c924:	04ffffc4 	movi	r19,-1
    c928:	a4400117 	ldw	r17,4(r20)
    c92c:	a4800217 	ldw	r18,8(r20)
    c930:	8c7fffc4 	addi	r17,r17,-1
    c934:	88000d16 	blt	r17,zero,c96c <_fwalk+0x84>
    c938:	94000304 	addi	r16,r18,12
    c93c:	94800384 	addi	r18,r18,14
    c940:	8080000b 	ldhu	r2,0(r16)
    c944:	8c7fffc4 	addi	r17,r17,-1
    c948:	813ffd04 	addi	r4,r16,-12
    c94c:	b080042e 	bgeu	r22,r2,c960 <_fwalk+0x78>
    c950:	9080000f 	ldh	r2,0(r18)
    c954:	14c00226 	beq	r2,r19,c960 <_fwalk+0x78>
    c958:	a83ee83a 	callr	r21
    c95c:	b8aeb03a 	or	r23,r23,r2
    c960:	84001a04 	addi	r16,r16,104
    c964:	94801a04 	addi	r18,r18,104
    c968:	8cfff51e 	bne	r17,r19,c940 <__alt_exception_stack_pointer+0xf800c940>
    c96c:	a5000017 	ldw	r20,0(r20)
    c970:	a03fed1e 	bne	r20,zero,c928 <__alt_exception_stack_pointer+0xf800c928>
    c974:	b805883a 	mov	r2,r23
    c978:	dfc00817 	ldw	ra,32(sp)
    c97c:	ddc00717 	ldw	r23,28(sp)
    c980:	dd800617 	ldw	r22,24(sp)
    c984:	dd400517 	ldw	r21,20(sp)
    c988:	dd000417 	ldw	r20,16(sp)
    c98c:	dcc00317 	ldw	r19,12(sp)
    c990:	dc800217 	ldw	r18,8(sp)
    c994:	dc400117 	ldw	r17,4(sp)
    c998:	dc000017 	ldw	r16,0(sp)
    c99c:	dec00904 	addi	sp,sp,36
    c9a0:	f800283a 	ret
    c9a4:	002f883a 	mov	r23,zero
    c9a8:	003ff206 	br	c974 <__alt_exception_stack_pointer+0xf800c974>

0000c9ac <_fwalk_reent>:
    c9ac:	defff704 	addi	sp,sp,-36
    c9b0:	dd000415 	stw	r20,16(sp)
    c9b4:	dfc00815 	stw	ra,32(sp)
    c9b8:	ddc00715 	stw	r23,28(sp)
    c9bc:	dd800615 	stw	r22,24(sp)
    c9c0:	dd400515 	stw	r21,20(sp)
    c9c4:	dcc00315 	stw	r19,12(sp)
    c9c8:	dc800215 	stw	r18,8(sp)
    c9cc:	dc400115 	stw	r17,4(sp)
    c9d0:	dc000015 	stw	r16,0(sp)
    c9d4:	2500b804 	addi	r20,r4,736
    c9d8:	a0002326 	beq	r20,zero,ca68 <_fwalk_reent+0xbc>
    c9dc:	282b883a 	mov	r21,r5
    c9e0:	2027883a 	mov	r19,r4
    c9e4:	002f883a 	mov	r23,zero
    c9e8:	05800044 	movi	r22,1
    c9ec:	04bfffc4 	movi	r18,-1
    c9f0:	a4400117 	ldw	r17,4(r20)
    c9f4:	a4000217 	ldw	r16,8(r20)
    c9f8:	8c7fffc4 	addi	r17,r17,-1
    c9fc:	88000c16 	blt	r17,zero,ca30 <_fwalk_reent+0x84>
    ca00:	84000304 	addi	r16,r16,12
    ca04:	8080000b 	ldhu	r2,0(r16)
    ca08:	8c7fffc4 	addi	r17,r17,-1
    ca0c:	817ffd04 	addi	r5,r16,-12
    ca10:	b080052e 	bgeu	r22,r2,ca28 <_fwalk_reent+0x7c>
    ca14:	8080008f 	ldh	r2,2(r16)
    ca18:	9809883a 	mov	r4,r19
    ca1c:	14800226 	beq	r2,r18,ca28 <_fwalk_reent+0x7c>
    ca20:	a83ee83a 	callr	r21
    ca24:	b8aeb03a 	or	r23,r23,r2
    ca28:	84001a04 	addi	r16,r16,104
    ca2c:	8cbff51e 	bne	r17,r18,ca04 <__alt_exception_stack_pointer+0xf800ca04>
    ca30:	a5000017 	ldw	r20,0(r20)
    ca34:	a03fee1e 	bne	r20,zero,c9f0 <__alt_exception_stack_pointer+0xf800c9f0>
    ca38:	b805883a 	mov	r2,r23
    ca3c:	dfc00817 	ldw	ra,32(sp)
    ca40:	ddc00717 	ldw	r23,28(sp)
    ca44:	dd800617 	ldw	r22,24(sp)
    ca48:	dd400517 	ldw	r21,20(sp)
    ca4c:	dd000417 	ldw	r20,16(sp)
    ca50:	dcc00317 	ldw	r19,12(sp)
    ca54:	dc800217 	ldw	r18,8(sp)
    ca58:	dc400117 	ldw	r17,4(sp)
    ca5c:	dc000017 	ldw	r16,0(sp)
    ca60:	dec00904 	addi	sp,sp,36
    ca64:	f800283a 	ret
    ca68:	002f883a 	mov	r23,zero
    ca6c:	003ff206 	br	ca38 <__alt_exception_stack_pointer+0xf800ca38>

0000ca70 <_setlocale_r>:
    ca70:	30001b26 	beq	r6,zero,cae0 <_setlocale_r+0x70>
    ca74:	01400074 	movhi	r5,1
    ca78:	defffe04 	addi	sp,sp,-8
    ca7c:	2959ee04 	addi	r5,r5,26552
    ca80:	3009883a 	mov	r4,r6
    ca84:	dc000015 	stw	r16,0(sp)
    ca88:	dfc00115 	stw	ra,4(sp)
    ca8c:	3021883a 	mov	r16,r6
    ca90:	000e9840 	call	e984 <strcmp>
    ca94:	1000061e 	bne	r2,zero,cab0 <_setlocale_r+0x40>
    ca98:	00800074 	movhi	r2,1
    ca9c:	1099cf04 	addi	r2,r2,26428
    caa0:	dfc00117 	ldw	ra,4(sp)
    caa4:	dc000017 	ldw	r16,0(sp)
    caa8:	dec00204 	addi	sp,sp,8
    caac:	f800283a 	ret
    cab0:	01400074 	movhi	r5,1
    cab4:	2959cf04 	addi	r5,r5,26428
    cab8:	8009883a 	mov	r4,r16
    cabc:	000e9840 	call	e984 <strcmp>
    cac0:	103ff526 	beq	r2,zero,ca98 <__alt_exception_stack_pointer+0xf800ca98>
    cac4:	01400074 	movhi	r5,1
    cac8:	2959d904 	addi	r5,r5,26468
    cacc:	8009883a 	mov	r4,r16
    cad0:	000e9840 	call	e984 <strcmp>
    cad4:	103ff026 	beq	r2,zero,ca98 <__alt_exception_stack_pointer+0xf800ca98>
    cad8:	0005883a 	mov	r2,zero
    cadc:	003ff006 	br	caa0 <__alt_exception_stack_pointer+0xf800caa0>
    cae0:	00800074 	movhi	r2,1
    cae4:	1099cf04 	addi	r2,r2,26428
    cae8:	f800283a 	ret

0000caec <__locale_charset>:
    caec:	00800074 	movhi	r2,1
    caf0:	109c7204 	addi	r2,r2,29128
    caf4:	f800283a 	ret

0000caf8 <__locale_mb_cur_max>:
    caf8:	008000b4 	movhi	r2,2
    cafc:	10a16d04 	addi	r2,r2,-31308
    cb00:	10800017 	ldw	r2,0(r2)
    cb04:	f800283a 	ret

0000cb08 <__locale_msgcharset>:
    cb08:	00800074 	movhi	r2,1
    cb0c:	109c6a04 	addi	r2,r2,29096
    cb10:	f800283a 	ret

0000cb14 <__locale_cjk_lang>:
    cb14:	0005883a 	mov	r2,zero
    cb18:	f800283a 	ret

0000cb1c <_localeconv_r>:
    cb1c:	00800074 	movhi	r2,1
    cb20:	109c7a04 	addi	r2,r2,29160
    cb24:	f800283a 	ret

0000cb28 <setlocale>:
    cb28:	008000b4 	movhi	r2,2
    cb2c:	10a16a04 	addi	r2,r2,-31320
    cb30:	280d883a 	mov	r6,r5
    cb34:	200b883a 	mov	r5,r4
    cb38:	11000017 	ldw	r4,0(r2)
    cb3c:	000ca701 	jmpi	ca70 <_setlocale_r>

0000cb40 <localeconv>:
    cb40:	00800074 	movhi	r2,1
    cb44:	109c7a04 	addi	r2,r2,29160
    cb48:	f800283a 	ret

0000cb4c <__smakebuf_r>:
    cb4c:	2880030b 	ldhu	r2,12(r5)
    cb50:	10c0008c 	andi	r3,r2,2
    cb54:	1800411e 	bne	r3,zero,cc5c <__smakebuf_r+0x110>
    cb58:	deffec04 	addi	sp,sp,-80
    cb5c:	dc000f15 	stw	r16,60(sp)
    cb60:	2821883a 	mov	r16,r5
    cb64:	2940038f 	ldh	r5,14(r5)
    cb68:	dc401015 	stw	r17,64(sp)
    cb6c:	dfc01315 	stw	ra,76(sp)
    cb70:	dcc01215 	stw	r19,72(sp)
    cb74:	dc801115 	stw	r18,68(sp)
    cb78:	2023883a 	mov	r17,r4
    cb7c:	28001c16 	blt	r5,zero,cbf0 <__smakebuf_r+0xa4>
    cb80:	d80d883a 	mov	r6,sp
    cb84:	00105f40 	call	105f4 <_fstat_r>
    cb88:	10001816 	blt	r2,zero,cbec <__smakebuf_r+0xa0>
    cb8c:	d8800117 	ldw	r2,4(sp)
    cb90:	00e00014 	movui	r3,32768
    cb94:	10bc000c 	andi	r2,r2,61440
    cb98:	14c80020 	cmpeqi	r19,r2,8192
    cb9c:	10c03726 	beq	r2,r3,cc7c <__smakebuf_r+0x130>
    cba0:	80c0030b 	ldhu	r3,12(r16)
    cba4:	18c20014 	ori	r3,r3,2048
    cba8:	80c0030d 	sth	r3,12(r16)
    cbac:	00c80004 	movi	r3,8192
    cbb0:	10c0521e 	bne	r2,r3,ccfc <__smakebuf_r+0x1b0>
    cbb4:	8140038f 	ldh	r5,14(r16)
    cbb8:	8809883a 	mov	r4,r17
    cbbc:	00106500 	call	10650 <_isatty_r>
    cbc0:	10004c26 	beq	r2,zero,ccf4 <__smakebuf_r+0x1a8>
    cbc4:	8080030b 	ldhu	r2,12(r16)
    cbc8:	80c010c4 	addi	r3,r16,67
    cbcc:	80c00015 	stw	r3,0(r16)
    cbd0:	10800054 	ori	r2,r2,1
    cbd4:	8080030d 	sth	r2,12(r16)
    cbd8:	00800044 	movi	r2,1
    cbdc:	80c00415 	stw	r3,16(r16)
    cbe0:	80800515 	stw	r2,20(r16)
    cbe4:	04810004 	movi	r18,1024
    cbe8:	00000706 	br	cc08 <__smakebuf_r+0xbc>
    cbec:	8080030b 	ldhu	r2,12(r16)
    cbf0:	10c0200c 	andi	r3,r2,128
    cbf4:	18001f1e 	bne	r3,zero,cc74 <__smakebuf_r+0x128>
    cbf8:	04810004 	movi	r18,1024
    cbfc:	10820014 	ori	r2,r2,2048
    cc00:	8080030d 	sth	r2,12(r16)
    cc04:	0027883a 	mov	r19,zero
    cc08:	900b883a 	mov	r5,r18
    cc0c:	8809883a 	mov	r4,r17
    cc10:	000719c0 	call	719c <_malloc_r>
    cc14:	10002c26 	beq	r2,zero,ccc8 <__smakebuf_r+0x17c>
    cc18:	80c0030b 	ldhu	r3,12(r16)
    cc1c:	01000074 	movhi	r4,1
    cc20:	212f1104 	addi	r4,r4,-17340
    cc24:	89000f15 	stw	r4,60(r17)
    cc28:	18c02014 	ori	r3,r3,128
    cc2c:	80c0030d 	sth	r3,12(r16)
    cc30:	80800015 	stw	r2,0(r16)
    cc34:	80800415 	stw	r2,16(r16)
    cc38:	84800515 	stw	r18,20(r16)
    cc3c:	98001a1e 	bne	r19,zero,cca8 <__smakebuf_r+0x15c>
    cc40:	dfc01317 	ldw	ra,76(sp)
    cc44:	dcc01217 	ldw	r19,72(sp)
    cc48:	dc801117 	ldw	r18,68(sp)
    cc4c:	dc401017 	ldw	r17,64(sp)
    cc50:	dc000f17 	ldw	r16,60(sp)
    cc54:	dec01404 	addi	sp,sp,80
    cc58:	f800283a 	ret
    cc5c:	288010c4 	addi	r2,r5,67
    cc60:	28800015 	stw	r2,0(r5)
    cc64:	28800415 	stw	r2,16(r5)
    cc68:	00800044 	movi	r2,1
    cc6c:	28800515 	stw	r2,20(r5)
    cc70:	f800283a 	ret
    cc74:	04801004 	movi	r18,64
    cc78:	003fe006 	br	cbfc <__alt_exception_stack_pointer+0xf800cbfc>
    cc7c:	81000a17 	ldw	r4,40(r16)
    cc80:	00c00074 	movhi	r3,1
    cc84:	18fa4804 	addi	r3,r3,-5856
    cc88:	20ffc51e 	bne	r4,r3,cba0 <__alt_exception_stack_pointer+0xf800cba0>
    cc8c:	8080030b 	ldhu	r2,12(r16)
    cc90:	04810004 	movi	r18,1024
    cc94:	84801315 	stw	r18,76(r16)
    cc98:	1484b03a 	or	r2,r2,r18
    cc9c:	8080030d 	sth	r2,12(r16)
    cca0:	0027883a 	mov	r19,zero
    cca4:	003fd806 	br	cc08 <__alt_exception_stack_pointer+0xf800cc08>
    cca8:	8140038f 	ldh	r5,14(r16)
    ccac:	8809883a 	mov	r4,r17
    ccb0:	00106500 	call	10650 <_isatty_r>
    ccb4:	103fe226 	beq	r2,zero,cc40 <__alt_exception_stack_pointer+0xf800cc40>
    ccb8:	8080030b 	ldhu	r2,12(r16)
    ccbc:	10800054 	ori	r2,r2,1
    ccc0:	8080030d 	sth	r2,12(r16)
    ccc4:	003fde06 	br	cc40 <__alt_exception_stack_pointer+0xf800cc40>
    ccc8:	8080030b 	ldhu	r2,12(r16)
    cccc:	10c0800c 	andi	r3,r2,512
    ccd0:	183fdb1e 	bne	r3,zero,cc40 <__alt_exception_stack_pointer+0xf800cc40>
    ccd4:	10800094 	ori	r2,r2,2
    ccd8:	80c010c4 	addi	r3,r16,67
    ccdc:	8080030d 	sth	r2,12(r16)
    cce0:	00800044 	movi	r2,1
    cce4:	80c00015 	stw	r3,0(r16)
    cce8:	80c00415 	stw	r3,16(r16)
    ccec:	80800515 	stw	r2,20(r16)
    ccf0:	003fd306 	br	cc40 <__alt_exception_stack_pointer+0xf800cc40>
    ccf4:	04810004 	movi	r18,1024
    ccf8:	003fc306 	br	cc08 <__alt_exception_stack_pointer+0xf800cc08>
    ccfc:	0027883a 	mov	r19,zero
    cd00:	04810004 	movi	r18,1024
    cd04:	003fc006 	br	cc08 <__alt_exception_stack_pointer+0xf800cc08>

0000cd08 <memchr>:
    cd08:	208000cc 	andi	r2,r4,3
    cd0c:	280f883a 	mov	r7,r5
    cd10:	10003426 	beq	r2,zero,cde4 <memchr+0xdc>
    cd14:	30bfffc4 	addi	r2,r6,-1
    cd18:	30001a26 	beq	r6,zero,cd84 <memchr+0x7c>
    cd1c:	20c00003 	ldbu	r3,0(r4)
    cd20:	29803fcc 	andi	r6,r5,255
    cd24:	30c0051e 	bne	r6,r3,cd3c <memchr+0x34>
    cd28:	00001806 	br	cd8c <memchr+0x84>
    cd2c:	10001526 	beq	r2,zero,cd84 <memchr+0x7c>
    cd30:	20c00003 	ldbu	r3,0(r4)
    cd34:	10bfffc4 	addi	r2,r2,-1
    cd38:	30c01426 	beq	r6,r3,cd8c <memchr+0x84>
    cd3c:	21000044 	addi	r4,r4,1
    cd40:	20c000cc 	andi	r3,r4,3
    cd44:	183ff91e 	bne	r3,zero,cd2c <__alt_exception_stack_pointer+0xf800cd2c>
    cd48:	020000c4 	movi	r8,3
    cd4c:	40801136 	bltu	r8,r2,cd94 <memchr+0x8c>
    cd50:	10000c26 	beq	r2,zero,cd84 <memchr+0x7c>
    cd54:	20c00003 	ldbu	r3,0(r4)
    cd58:	29403fcc 	andi	r5,r5,255
    cd5c:	28c00b26 	beq	r5,r3,cd8c <memchr+0x84>
    cd60:	20c00044 	addi	r3,r4,1
    cd64:	39803fcc 	andi	r6,r7,255
    cd68:	2089883a 	add	r4,r4,r2
    cd6c:	00000306 	br	cd7c <memchr+0x74>
    cd70:	18c00044 	addi	r3,r3,1
    cd74:	197fffc3 	ldbu	r5,-1(r3)
    cd78:	31400526 	beq	r6,r5,cd90 <memchr+0x88>
    cd7c:	1805883a 	mov	r2,r3
    cd80:	20fffb1e 	bne	r4,r3,cd70 <__alt_exception_stack_pointer+0xf800cd70>
    cd84:	0005883a 	mov	r2,zero
    cd88:	f800283a 	ret
    cd8c:	2005883a 	mov	r2,r4
    cd90:	f800283a 	ret
    cd94:	28c03fcc 	andi	r3,r5,255
    cd98:	1812923a 	slli	r9,r3,8
    cd9c:	02ffbff4 	movhi	r11,65279
    cda0:	02a02074 	movhi	r10,32897
    cda4:	48d2b03a 	or	r9,r9,r3
    cda8:	4806943a 	slli	r3,r9,16
    cdac:	5affbfc4 	addi	r11,r11,-257
    cdb0:	52a02004 	addi	r10,r10,-32640
    cdb4:	48d2b03a 	or	r9,r9,r3
    cdb8:	20c00017 	ldw	r3,0(r4)
    cdbc:	48c6f03a 	xor	r3,r9,r3
    cdc0:	1acd883a 	add	r6,r3,r11
    cdc4:	00c6303a 	nor	r3,zero,r3
    cdc8:	30c6703a 	and	r3,r6,r3
    cdcc:	1a86703a 	and	r3,r3,r10
    cdd0:	183fe01e 	bne	r3,zero,cd54 <__alt_exception_stack_pointer+0xf800cd54>
    cdd4:	10bfff04 	addi	r2,r2,-4
    cdd8:	21000104 	addi	r4,r4,4
    cddc:	40bff636 	bltu	r8,r2,cdb8 <__alt_exception_stack_pointer+0xf800cdb8>
    cde0:	003fdb06 	br	cd50 <__alt_exception_stack_pointer+0xf800cd50>
    cde4:	3005883a 	mov	r2,r6
    cde8:	003fd706 	br	cd48 <__alt_exception_stack_pointer+0xf800cd48>

0000cdec <memcpy>:
    cdec:	defffd04 	addi	sp,sp,-12
    cdf0:	dfc00215 	stw	ra,8(sp)
    cdf4:	dc400115 	stw	r17,4(sp)
    cdf8:	dc000015 	stw	r16,0(sp)
    cdfc:	00c003c4 	movi	r3,15
    ce00:	2005883a 	mov	r2,r4
    ce04:	1980452e 	bgeu	r3,r6,cf1c <memcpy+0x130>
    ce08:	2906b03a 	or	r3,r5,r4
    ce0c:	18c000cc 	andi	r3,r3,3
    ce10:	1800441e 	bne	r3,zero,cf24 <memcpy+0x138>
    ce14:	347ffc04 	addi	r17,r6,-16
    ce18:	8822d13a 	srli	r17,r17,4
    ce1c:	28c00104 	addi	r3,r5,4
    ce20:	23400104 	addi	r13,r4,4
    ce24:	8820913a 	slli	r16,r17,4
    ce28:	2b000204 	addi	r12,r5,8
    ce2c:	22c00204 	addi	r11,r4,8
    ce30:	84000504 	addi	r16,r16,20
    ce34:	2a800304 	addi	r10,r5,12
    ce38:	22400304 	addi	r9,r4,12
    ce3c:	2c21883a 	add	r16,r5,r16
    ce40:	2811883a 	mov	r8,r5
    ce44:	200f883a 	mov	r7,r4
    ce48:	41000017 	ldw	r4,0(r8)
    ce4c:	1fc00017 	ldw	ra,0(r3)
    ce50:	63c00017 	ldw	r15,0(r12)
    ce54:	39000015 	stw	r4,0(r7)
    ce58:	53800017 	ldw	r14,0(r10)
    ce5c:	6fc00015 	stw	ra,0(r13)
    ce60:	5bc00015 	stw	r15,0(r11)
    ce64:	4b800015 	stw	r14,0(r9)
    ce68:	18c00404 	addi	r3,r3,16
    ce6c:	39c00404 	addi	r7,r7,16
    ce70:	42000404 	addi	r8,r8,16
    ce74:	6b400404 	addi	r13,r13,16
    ce78:	63000404 	addi	r12,r12,16
    ce7c:	5ac00404 	addi	r11,r11,16
    ce80:	52800404 	addi	r10,r10,16
    ce84:	4a400404 	addi	r9,r9,16
    ce88:	1c3fef1e 	bne	r3,r16,ce48 <__alt_exception_stack_pointer+0xf800ce48>
    ce8c:	89c00044 	addi	r7,r17,1
    ce90:	380e913a 	slli	r7,r7,4
    ce94:	310003cc 	andi	r4,r6,15
    ce98:	02c000c4 	movi	r11,3
    ce9c:	11c7883a 	add	r3,r2,r7
    cea0:	29cb883a 	add	r5,r5,r7
    cea4:	5900212e 	bgeu	r11,r4,cf2c <memcpy+0x140>
    cea8:	1813883a 	mov	r9,r3
    ceac:	2811883a 	mov	r8,r5
    ceb0:	200f883a 	mov	r7,r4
    ceb4:	42800017 	ldw	r10,0(r8)
    ceb8:	4a400104 	addi	r9,r9,4
    cebc:	39ffff04 	addi	r7,r7,-4
    cec0:	4abfff15 	stw	r10,-4(r9)
    cec4:	42000104 	addi	r8,r8,4
    cec8:	59fffa36 	bltu	r11,r7,ceb4 <__alt_exception_stack_pointer+0xf800ceb4>
    cecc:	213fff04 	addi	r4,r4,-4
    ced0:	2008d0ba 	srli	r4,r4,2
    ced4:	318000cc 	andi	r6,r6,3
    ced8:	21000044 	addi	r4,r4,1
    cedc:	2109883a 	add	r4,r4,r4
    cee0:	2109883a 	add	r4,r4,r4
    cee4:	1907883a 	add	r3,r3,r4
    cee8:	290b883a 	add	r5,r5,r4
    ceec:	30000626 	beq	r6,zero,cf08 <memcpy+0x11c>
    cef0:	198d883a 	add	r6,r3,r6
    cef4:	29c00003 	ldbu	r7,0(r5)
    cef8:	18c00044 	addi	r3,r3,1
    cefc:	29400044 	addi	r5,r5,1
    cf00:	19ffffc5 	stb	r7,-1(r3)
    cf04:	19bffb1e 	bne	r3,r6,cef4 <__alt_exception_stack_pointer+0xf800cef4>
    cf08:	dfc00217 	ldw	ra,8(sp)
    cf0c:	dc400117 	ldw	r17,4(sp)
    cf10:	dc000017 	ldw	r16,0(sp)
    cf14:	dec00304 	addi	sp,sp,12
    cf18:	f800283a 	ret
    cf1c:	2007883a 	mov	r3,r4
    cf20:	003ff206 	br	ceec <__alt_exception_stack_pointer+0xf800ceec>
    cf24:	2007883a 	mov	r3,r4
    cf28:	003ff106 	br	cef0 <__alt_exception_stack_pointer+0xf800cef0>
    cf2c:	200d883a 	mov	r6,r4
    cf30:	003fee06 	br	ceec <__alt_exception_stack_pointer+0xf800ceec>

0000cf34 <memmove>:
    cf34:	2005883a 	mov	r2,r4
    cf38:	29000b2e 	bgeu	r5,r4,cf68 <memmove+0x34>
    cf3c:	298f883a 	add	r7,r5,r6
    cf40:	21c0092e 	bgeu	r4,r7,cf68 <memmove+0x34>
    cf44:	2187883a 	add	r3,r4,r6
    cf48:	198bc83a 	sub	r5,r3,r6
    cf4c:	30004826 	beq	r6,zero,d070 <memmove+0x13c>
    cf50:	39ffffc4 	addi	r7,r7,-1
    cf54:	39000003 	ldbu	r4,0(r7)
    cf58:	18ffffc4 	addi	r3,r3,-1
    cf5c:	19000005 	stb	r4,0(r3)
    cf60:	28fffb1e 	bne	r5,r3,cf50 <__alt_exception_stack_pointer+0xf800cf50>
    cf64:	f800283a 	ret
    cf68:	00c003c4 	movi	r3,15
    cf6c:	1980412e 	bgeu	r3,r6,d074 <memmove+0x140>
    cf70:	2886b03a 	or	r3,r5,r2
    cf74:	18c000cc 	andi	r3,r3,3
    cf78:	1800401e 	bne	r3,zero,d07c <memmove+0x148>
    cf7c:	33fffc04 	addi	r15,r6,-16
    cf80:	781ed13a 	srli	r15,r15,4
    cf84:	28c00104 	addi	r3,r5,4
    cf88:	13400104 	addi	r13,r2,4
    cf8c:	781c913a 	slli	r14,r15,4
    cf90:	2b000204 	addi	r12,r5,8
    cf94:	12c00204 	addi	r11,r2,8
    cf98:	73800504 	addi	r14,r14,20
    cf9c:	2a800304 	addi	r10,r5,12
    cfa0:	12400304 	addi	r9,r2,12
    cfa4:	2b9d883a 	add	r14,r5,r14
    cfa8:	2811883a 	mov	r8,r5
    cfac:	100f883a 	mov	r7,r2
    cfb0:	41000017 	ldw	r4,0(r8)
    cfb4:	39c00404 	addi	r7,r7,16
    cfb8:	18c00404 	addi	r3,r3,16
    cfbc:	393ffc15 	stw	r4,-16(r7)
    cfc0:	193ffc17 	ldw	r4,-16(r3)
    cfc4:	6b400404 	addi	r13,r13,16
    cfc8:	5ac00404 	addi	r11,r11,16
    cfcc:	693ffc15 	stw	r4,-16(r13)
    cfd0:	61000017 	ldw	r4,0(r12)
    cfd4:	4a400404 	addi	r9,r9,16
    cfd8:	42000404 	addi	r8,r8,16
    cfdc:	593ffc15 	stw	r4,-16(r11)
    cfe0:	51000017 	ldw	r4,0(r10)
    cfe4:	63000404 	addi	r12,r12,16
    cfe8:	52800404 	addi	r10,r10,16
    cfec:	493ffc15 	stw	r4,-16(r9)
    cff0:	1bbfef1e 	bne	r3,r14,cfb0 <__alt_exception_stack_pointer+0xf800cfb0>
    cff4:	79000044 	addi	r4,r15,1
    cff8:	2008913a 	slli	r4,r4,4
    cffc:	328003cc 	andi	r10,r6,15
    d000:	02c000c4 	movi	r11,3
    d004:	1107883a 	add	r3,r2,r4
    d008:	290b883a 	add	r5,r5,r4
    d00c:	5a801e2e 	bgeu	r11,r10,d088 <memmove+0x154>
    d010:	1813883a 	mov	r9,r3
    d014:	2811883a 	mov	r8,r5
    d018:	500f883a 	mov	r7,r10
    d01c:	41000017 	ldw	r4,0(r8)
    d020:	4a400104 	addi	r9,r9,4
    d024:	39ffff04 	addi	r7,r7,-4
    d028:	493fff15 	stw	r4,-4(r9)
    d02c:	42000104 	addi	r8,r8,4
    d030:	59fffa36 	bltu	r11,r7,d01c <__alt_exception_stack_pointer+0xf800d01c>
    d034:	513fff04 	addi	r4,r10,-4
    d038:	2008d0ba 	srli	r4,r4,2
    d03c:	318000cc 	andi	r6,r6,3
    d040:	21000044 	addi	r4,r4,1
    d044:	2109883a 	add	r4,r4,r4
    d048:	2109883a 	add	r4,r4,r4
    d04c:	1907883a 	add	r3,r3,r4
    d050:	290b883a 	add	r5,r5,r4
    d054:	30000b26 	beq	r6,zero,d084 <memmove+0x150>
    d058:	198d883a 	add	r6,r3,r6
    d05c:	29c00003 	ldbu	r7,0(r5)
    d060:	18c00044 	addi	r3,r3,1
    d064:	29400044 	addi	r5,r5,1
    d068:	19ffffc5 	stb	r7,-1(r3)
    d06c:	19bffb1e 	bne	r3,r6,d05c <__alt_exception_stack_pointer+0xf800d05c>
    d070:	f800283a 	ret
    d074:	1007883a 	mov	r3,r2
    d078:	003ff606 	br	d054 <__alt_exception_stack_pointer+0xf800d054>
    d07c:	1007883a 	mov	r3,r2
    d080:	003ff506 	br	d058 <__alt_exception_stack_pointer+0xf800d058>
    d084:	f800283a 	ret
    d088:	500d883a 	mov	r6,r10
    d08c:	003ff106 	br	d054 <__alt_exception_stack_pointer+0xf800d054>

0000d090 <memset>:
    d090:	20c000cc 	andi	r3,r4,3
    d094:	2005883a 	mov	r2,r4
    d098:	18004426 	beq	r3,zero,d1ac <memset+0x11c>
    d09c:	31ffffc4 	addi	r7,r6,-1
    d0a0:	30004026 	beq	r6,zero,d1a4 <memset+0x114>
    d0a4:	2813883a 	mov	r9,r5
    d0a8:	200d883a 	mov	r6,r4
    d0ac:	2007883a 	mov	r3,r4
    d0b0:	00000406 	br	d0c4 <memset+0x34>
    d0b4:	3a3fffc4 	addi	r8,r7,-1
    d0b8:	31800044 	addi	r6,r6,1
    d0bc:	38003926 	beq	r7,zero,d1a4 <memset+0x114>
    d0c0:	400f883a 	mov	r7,r8
    d0c4:	18c00044 	addi	r3,r3,1
    d0c8:	32400005 	stb	r9,0(r6)
    d0cc:	1a0000cc 	andi	r8,r3,3
    d0d0:	403ff81e 	bne	r8,zero,d0b4 <__alt_exception_stack_pointer+0xf800d0b4>
    d0d4:	010000c4 	movi	r4,3
    d0d8:	21c02d2e 	bgeu	r4,r7,d190 <memset+0x100>
    d0dc:	29003fcc 	andi	r4,r5,255
    d0e0:	200c923a 	slli	r6,r4,8
    d0e4:	3108b03a 	or	r4,r6,r4
    d0e8:	200c943a 	slli	r6,r4,16
    d0ec:	218cb03a 	or	r6,r4,r6
    d0f0:	010003c4 	movi	r4,15
    d0f4:	21c0182e 	bgeu	r4,r7,d158 <memset+0xc8>
    d0f8:	3b3ffc04 	addi	r12,r7,-16
    d0fc:	6018d13a 	srli	r12,r12,4
    d100:	1a000104 	addi	r8,r3,4
    d104:	1ac00204 	addi	r11,r3,8
    d108:	6008913a 	slli	r4,r12,4
    d10c:	1a800304 	addi	r10,r3,12
    d110:	1813883a 	mov	r9,r3
    d114:	21000504 	addi	r4,r4,20
    d118:	1909883a 	add	r4,r3,r4
    d11c:	49800015 	stw	r6,0(r9)
    d120:	41800015 	stw	r6,0(r8)
    d124:	59800015 	stw	r6,0(r11)
    d128:	51800015 	stw	r6,0(r10)
    d12c:	42000404 	addi	r8,r8,16
    d130:	4a400404 	addi	r9,r9,16
    d134:	5ac00404 	addi	r11,r11,16
    d138:	52800404 	addi	r10,r10,16
    d13c:	413ff71e 	bne	r8,r4,d11c <__alt_exception_stack_pointer+0xf800d11c>
    d140:	63000044 	addi	r12,r12,1
    d144:	6018913a 	slli	r12,r12,4
    d148:	39c003cc 	andi	r7,r7,15
    d14c:	010000c4 	movi	r4,3
    d150:	1b07883a 	add	r3,r3,r12
    d154:	21c00e2e 	bgeu	r4,r7,d190 <memset+0x100>
    d158:	1813883a 	mov	r9,r3
    d15c:	3811883a 	mov	r8,r7
    d160:	010000c4 	movi	r4,3
    d164:	49800015 	stw	r6,0(r9)
    d168:	423fff04 	addi	r8,r8,-4
    d16c:	4a400104 	addi	r9,r9,4
    d170:	223ffc36 	bltu	r4,r8,d164 <__alt_exception_stack_pointer+0xf800d164>
    d174:	393fff04 	addi	r4,r7,-4
    d178:	2008d0ba 	srli	r4,r4,2
    d17c:	39c000cc 	andi	r7,r7,3
    d180:	21000044 	addi	r4,r4,1
    d184:	2109883a 	add	r4,r4,r4
    d188:	2109883a 	add	r4,r4,r4
    d18c:	1907883a 	add	r3,r3,r4
    d190:	38000526 	beq	r7,zero,d1a8 <memset+0x118>
    d194:	19cf883a 	add	r7,r3,r7
    d198:	19400005 	stb	r5,0(r3)
    d19c:	18c00044 	addi	r3,r3,1
    d1a0:	38fffd1e 	bne	r7,r3,d198 <__alt_exception_stack_pointer+0xf800d198>
    d1a4:	f800283a 	ret
    d1a8:	f800283a 	ret
    d1ac:	2007883a 	mov	r3,r4
    d1b0:	300f883a 	mov	r7,r6
    d1b4:	003fc706 	br	d0d4 <__alt_exception_stack_pointer+0xf800d0d4>

0000d1b8 <_Balloc>:
    d1b8:	20801317 	ldw	r2,76(r4)
    d1bc:	defffc04 	addi	sp,sp,-16
    d1c0:	dc400115 	stw	r17,4(sp)
    d1c4:	dc000015 	stw	r16,0(sp)
    d1c8:	dfc00315 	stw	ra,12(sp)
    d1cc:	dc800215 	stw	r18,8(sp)
    d1d0:	2023883a 	mov	r17,r4
    d1d4:	2821883a 	mov	r16,r5
    d1d8:	10000f26 	beq	r2,zero,d218 <_Balloc+0x60>
    d1dc:	8407883a 	add	r3,r16,r16
    d1e0:	18c7883a 	add	r3,r3,r3
    d1e4:	10c7883a 	add	r3,r2,r3
    d1e8:	18800017 	ldw	r2,0(r3)
    d1ec:	10001126 	beq	r2,zero,d234 <_Balloc+0x7c>
    d1f0:	11000017 	ldw	r4,0(r2)
    d1f4:	19000015 	stw	r4,0(r3)
    d1f8:	10000415 	stw	zero,16(r2)
    d1fc:	10000315 	stw	zero,12(r2)
    d200:	dfc00317 	ldw	ra,12(sp)
    d204:	dc800217 	ldw	r18,8(sp)
    d208:	dc400117 	ldw	r17,4(sp)
    d20c:	dc000017 	ldw	r16,0(sp)
    d210:	dec00404 	addi	sp,sp,16
    d214:	f800283a 	ret
    d218:	01800844 	movi	r6,33
    d21c:	01400104 	movi	r5,4
    d220:	001020c0 	call	1020c <_calloc_r>
    d224:	88801315 	stw	r2,76(r17)
    d228:	103fec1e 	bne	r2,zero,d1dc <__alt_exception_stack_pointer+0xf800d1dc>
    d22c:	0005883a 	mov	r2,zero
    d230:	003ff306 	br	d200 <__alt_exception_stack_pointer+0xf800d200>
    d234:	01400044 	movi	r5,1
    d238:	2c24983a 	sll	r18,r5,r16
    d23c:	8809883a 	mov	r4,r17
    d240:	91800144 	addi	r6,r18,5
    d244:	318d883a 	add	r6,r6,r6
    d248:	318d883a 	add	r6,r6,r6
    d24c:	001020c0 	call	1020c <_calloc_r>
    d250:	103ff626 	beq	r2,zero,d22c <__alt_exception_stack_pointer+0xf800d22c>
    d254:	14000115 	stw	r16,4(r2)
    d258:	14800215 	stw	r18,8(r2)
    d25c:	003fe606 	br	d1f8 <__alt_exception_stack_pointer+0xf800d1f8>

0000d260 <_Bfree>:
    d260:	28000826 	beq	r5,zero,d284 <_Bfree+0x24>
    d264:	28c00117 	ldw	r3,4(r5)
    d268:	20801317 	ldw	r2,76(r4)
    d26c:	18c7883a 	add	r3,r3,r3
    d270:	18c7883a 	add	r3,r3,r3
    d274:	10c5883a 	add	r2,r2,r3
    d278:	10c00017 	ldw	r3,0(r2)
    d27c:	28c00015 	stw	r3,0(r5)
    d280:	11400015 	stw	r5,0(r2)
    d284:	f800283a 	ret

0000d288 <__multadd>:
    d288:	defff704 	addi	sp,sp,-36
    d28c:	dc800215 	stw	r18,8(sp)
    d290:	2c800417 	ldw	r18,16(r5)
    d294:	dd800615 	stw	r22,24(sp)
    d298:	dd400515 	stw	r21,20(sp)
    d29c:	dd000415 	stw	r20,16(sp)
    d2a0:	dcc00315 	stw	r19,12(sp)
    d2a4:	dc400115 	stw	r17,4(sp)
    d2a8:	dc000015 	stw	r16,0(sp)
    d2ac:	dfc00815 	stw	ra,32(sp)
    d2b0:	ddc00715 	stw	r23,28(sp)
    d2b4:	2827883a 	mov	r19,r5
    d2b8:	2029883a 	mov	r20,r4
    d2bc:	3023883a 	mov	r17,r6
    d2c0:	3821883a 	mov	r16,r7
    d2c4:	2d400504 	addi	r21,r5,20
    d2c8:	002d883a 	mov	r22,zero
    d2cc:	adc00017 	ldw	r23,0(r21)
    d2d0:	880b883a 	mov	r5,r17
    d2d4:	ad400104 	addi	r21,r21,4
    d2d8:	b93fffcc 	andi	r4,r23,65535
    d2dc:	00053c80 	call	53c8 <__mulsi3>
    d2e0:	b808d43a 	srli	r4,r23,16
    d2e4:	880b883a 	mov	r5,r17
    d2e8:	1421883a 	add	r16,r2,r16
    d2ec:	00053c80 	call	53c8 <__mulsi3>
    d2f0:	800ed43a 	srli	r7,r16,16
    d2f4:	80ffffcc 	andi	r3,r16,65535
    d2f8:	b5800044 	addi	r22,r22,1
    d2fc:	11c5883a 	add	r2,r2,r7
    d300:	100e943a 	slli	r7,r2,16
    d304:	1020d43a 	srli	r16,r2,16
    d308:	38c7883a 	add	r3,r7,r3
    d30c:	a8ffff15 	stw	r3,-4(r21)
    d310:	b4bfee16 	blt	r22,r18,d2cc <__alt_exception_stack_pointer+0xf800d2cc>
    d314:	80000926 	beq	r16,zero,d33c <__multadd+0xb4>
    d318:	98800217 	ldw	r2,8(r19)
    d31c:	9080130e 	bge	r18,r2,d36c <__multadd+0xe4>
    d320:	90800144 	addi	r2,r18,5
    d324:	1085883a 	add	r2,r2,r2
    d328:	1085883a 	add	r2,r2,r2
    d32c:	9885883a 	add	r2,r19,r2
    d330:	14000015 	stw	r16,0(r2)
    d334:	94800044 	addi	r18,r18,1
    d338:	9c800415 	stw	r18,16(r19)
    d33c:	9805883a 	mov	r2,r19
    d340:	dfc00817 	ldw	ra,32(sp)
    d344:	ddc00717 	ldw	r23,28(sp)
    d348:	dd800617 	ldw	r22,24(sp)
    d34c:	dd400517 	ldw	r21,20(sp)
    d350:	dd000417 	ldw	r20,16(sp)
    d354:	dcc00317 	ldw	r19,12(sp)
    d358:	dc800217 	ldw	r18,8(sp)
    d35c:	dc400117 	ldw	r17,4(sp)
    d360:	dc000017 	ldw	r16,0(sp)
    d364:	dec00904 	addi	sp,sp,36
    d368:	f800283a 	ret
    d36c:	99400117 	ldw	r5,4(r19)
    d370:	a009883a 	mov	r4,r20
    d374:	29400044 	addi	r5,r5,1
    d378:	000d1b80 	call	d1b8 <_Balloc>
    d37c:	99800417 	ldw	r6,16(r19)
    d380:	99400304 	addi	r5,r19,12
    d384:	11000304 	addi	r4,r2,12
    d388:	31800084 	addi	r6,r6,2
    d38c:	318d883a 	add	r6,r6,r6
    d390:	318d883a 	add	r6,r6,r6
    d394:	1023883a 	mov	r17,r2
    d398:	000cdec0 	call	cdec <memcpy>
    d39c:	98000a26 	beq	r19,zero,d3c8 <__multadd+0x140>
    d3a0:	98c00117 	ldw	r3,4(r19)
    d3a4:	a0801317 	ldw	r2,76(r20)
    d3a8:	18c7883a 	add	r3,r3,r3
    d3ac:	18c7883a 	add	r3,r3,r3
    d3b0:	10c5883a 	add	r2,r2,r3
    d3b4:	10c00017 	ldw	r3,0(r2)
    d3b8:	98c00015 	stw	r3,0(r19)
    d3bc:	14c00015 	stw	r19,0(r2)
    d3c0:	8827883a 	mov	r19,r17
    d3c4:	003fd606 	br	d320 <__alt_exception_stack_pointer+0xf800d320>
    d3c8:	8827883a 	mov	r19,r17
    d3cc:	003fd406 	br	d320 <__alt_exception_stack_pointer+0xf800d320>

0000d3d0 <__s2b>:
    d3d0:	defff904 	addi	sp,sp,-28
    d3d4:	dc400115 	stw	r17,4(sp)
    d3d8:	dc000015 	stw	r16,0(sp)
    d3dc:	2023883a 	mov	r17,r4
    d3e0:	2821883a 	mov	r16,r5
    d3e4:	39000204 	addi	r4,r7,8
    d3e8:	01400244 	movi	r5,9
    d3ec:	dcc00315 	stw	r19,12(sp)
    d3f0:	dc800215 	stw	r18,8(sp)
    d3f4:	dfc00615 	stw	ra,24(sp)
    d3f8:	dd400515 	stw	r21,20(sp)
    d3fc:	dd000415 	stw	r20,16(sp)
    d400:	3825883a 	mov	r18,r7
    d404:	3027883a 	mov	r19,r6
    d408:	00052140 	call	5214 <__divsi3>
    d40c:	00c00044 	movi	r3,1
    d410:	000b883a 	mov	r5,zero
    d414:	1880030e 	bge	r3,r2,d424 <__s2b+0x54>
    d418:	18c7883a 	add	r3,r3,r3
    d41c:	29400044 	addi	r5,r5,1
    d420:	18bffd16 	blt	r3,r2,d418 <__alt_exception_stack_pointer+0xf800d418>
    d424:	8809883a 	mov	r4,r17
    d428:	000d1b80 	call	d1b8 <_Balloc>
    d42c:	d8c00717 	ldw	r3,28(sp)
    d430:	10c00515 	stw	r3,20(r2)
    d434:	00c00044 	movi	r3,1
    d438:	10c00415 	stw	r3,16(r2)
    d43c:	00c00244 	movi	r3,9
    d440:	1cc0210e 	bge	r3,r19,d4c8 <__s2b+0xf8>
    d444:	80eb883a 	add	r21,r16,r3
    d448:	a829883a 	mov	r20,r21
    d44c:	84e1883a 	add	r16,r16,r19
    d450:	a1c00007 	ldb	r7,0(r20)
    d454:	01800284 	movi	r6,10
    d458:	a5000044 	addi	r20,r20,1
    d45c:	100b883a 	mov	r5,r2
    d460:	39fff404 	addi	r7,r7,-48
    d464:	8809883a 	mov	r4,r17
    d468:	000d2880 	call	d288 <__multadd>
    d46c:	a43ff81e 	bne	r20,r16,d450 <__alt_exception_stack_pointer+0xf800d450>
    d470:	ace1883a 	add	r16,r21,r19
    d474:	843ffe04 	addi	r16,r16,-8
    d478:	9c800a0e 	bge	r19,r18,d4a4 <__s2b+0xd4>
    d47c:	94e5c83a 	sub	r18,r18,r19
    d480:	84a5883a 	add	r18,r16,r18
    d484:	81c00007 	ldb	r7,0(r16)
    d488:	01800284 	movi	r6,10
    d48c:	84000044 	addi	r16,r16,1
    d490:	100b883a 	mov	r5,r2
    d494:	39fff404 	addi	r7,r7,-48
    d498:	8809883a 	mov	r4,r17
    d49c:	000d2880 	call	d288 <__multadd>
    d4a0:	84bff81e 	bne	r16,r18,d484 <__alt_exception_stack_pointer+0xf800d484>
    d4a4:	dfc00617 	ldw	ra,24(sp)
    d4a8:	dd400517 	ldw	r21,20(sp)
    d4ac:	dd000417 	ldw	r20,16(sp)
    d4b0:	dcc00317 	ldw	r19,12(sp)
    d4b4:	dc800217 	ldw	r18,8(sp)
    d4b8:	dc400117 	ldw	r17,4(sp)
    d4bc:	dc000017 	ldw	r16,0(sp)
    d4c0:	dec00704 	addi	sp,sp,28
    d4c4:	f800283a 	ret
    d4c8:	84000284 	addi	r16,r16,10
    d4cc:	1827883a 	mov	r19,r3
    d4d0:	003fe906 	br	d478 <__alt_exception_stack_pointer+0xf800d478>

0000d4d4 <__hi0bits>:
    d4d4:	20bfffec 	andhi	r2,r4,65535
    d4d8:	1000141e 	bne	r2,zero,d52c <__hi0bits+0x58>
    d4dc:	2008943a 	slli	r4,r4,16
    d4e0:	00800404 	movi	r2,16
    d4e4:	20ffc02c 	andhi	r3,r4,65280
    d4e8:	1800021e 	bne	r3,zero,d4f4 <__hi0bits+0x20>
    d4ec:	2008923a 	slli	r4,r4,8
    d4f0:	10800204 	addi	r2,r2,8
    d4f4:	20fc002c 	andhi	r3,r4,61440
    d4f8:	1800021e 	bne	r3,zero,d504 <__hi0bits+0x30>
    d4fc:	2008913a 	slli	r4,r4,4
    d500:	10800104 	addi	r2,r2,4
    d504:	20f0002c 	andhi	r3,r4,49152
    d508:	1800031e 	bne	r3,zero,d518 <__hi0bits+0x44>
    d50c:	2109883a 	add	r4,r4,r4
    d510:	10800084 	addi	r2,r2,2
    d514:	2109883a 	add	r4,r4,r4
    d518:	20000316 	blt	r4,zero,d528 <__hi0bits+0x54>
    d51c:	2110002c 	andhi	r4,r4,16384
    d520:	2000041e 	bne	r4,zero,d534 <__hi0bits+0x60>
    d524:	00800804 	movi	r2,32
    d528:	f800283a 	ret
    d52c:	0005883a 	mov	r2,zero
    d530:	003fec06 	br	d4e4 <__alt_exception_stack_pointer+0xf800d4e4>
    d534:	10800044 	addi	r2,r2,1
    d538:	f800283a 	ret

0000d53c <__lo0bits>:
    d53c:	20c00017 	ldw	r3,0(r4)
    d540:	188001cc 	andi	r2,r3,7
    d544:	10000826 	beq	r2,zero,d568 <__lo0bits+0x2c>
    d548:	1880004c 	andi	r2,r3,1
    d54c:	1000211e 	bne	r2,zero,d5d4 <__lo0bits+0x98>
    d550:	1880008c 	andi	r2,r3,2
    d554:	1000211e 	bne	r2,zero,d5dc <__lo0bits+0xa0>
    d558:	1806d0ba 	srli	r3,r3,2
    d55c:	00800084 	movi	r2,2
    d560:	20c00015 	stw	r3,0(r4)
    d564:	f800283a 	ret
    d568:	18bfffcc 	andi	r2,r3,65535
    d56c:	10001326 	beq	r2,zero,d5bc <__lo0bits+0x80>
    d570:	0005883a 	mov	r2,zero
    d574:	19403fcc 	andi	r5,r3,255
    d578:	2800021e 	bne	r5,zero,d584 <__lo0bits+0x48>
    d57c:	1806d23a 	srli	r3,r3,8
    d580:	10800204 	addi	r2,r2,8
    d584:	194003cc 	andi	r5,r3,15
    d588:	2800021e 	bne	r5,zero,d594 <__lo0bits+0x58>
    d58c:	1806d13a 	srli	r3,r3,4
    d590:	10800104 	addi	r2,r2,4
    d594:	194000cc 	andi	r5,r3,3
    d598:	2800021e 	bne	r5,zero,d5a4 <__lo0bits+0x68>
    d59c:	1806d0ba 	srli	r3,r3,2
    d5a0:	10800084 	addi	r2,r2,2
    d5a4:	1940004c 	andi	r5,r3,1
    d5a8:	2800081e 	bne	r5,zero,d5cc <__lo0bits+0x90>
    d5ac:	1806d07a 	srli	r3,r3,1
    d5b0:	1800051e 	bne	r3,zero,d5c8 <__lo0bits+0x8c>
    d5b4:	00800804 	movi	r2,32
    d5b8:	f800283a 	ret
    d5bc:	1806d43a 	srli	r3,r3,16
    d5c0:	00800404 	movi	r2,16
    d5c4:	003feb06 	br	d574 <__alt_exception_stack_pointer+0xf800d574>
    d5c8:	10800044 	addi	r2,r2,1
    d5cc:	20c00015 	stw	r3,0(r4)
    d5d0:	f800283a 	ret
    d5d4:	0005883a 	mov	r2,zero
    d5d8:	f800283a 	ret
    d5dc:	1806d07a 	srli	r3,r3,1
    d5e0:	00800044 	movi	r2,1
    d5e4:	20c00015 	stw	r3,0(r4)
    d5e8:	f800283a 	ret

0000d5ec <__i2b>:
    d5ec:	defffd04 	addi	sp,sp,-12
    d5f0:	dc000015 	stw	r16,0(sp)
    d5f4:	04000044 	movi	r16,1
    d5f8:	dc400115 	stw	r17,4(sp)
    d5fc:	2823883a 	mov	r17,r5
    d600:	800b883a 	mov	r5,r16
    d604:	dfc00215 	stw	ra,8(sp)
    d608:	000d1b80 	call	d1b8 <_Balloc>
    d60c:	14400515 	stw	r17,20(r2)
    d610:	14000415 	stw	r16,16(r2)
    d614:	dfc00217 	ldw	ra,8(sp)
    d618:	dc400117 	ldw	r17,4(sp)
    d61c:	dc000017 	ldw	r16,0(sp)
    d620:	dec00304 	addi	sp,sp,12
    d624:	f800283a 	ret

0000d628 <__multiply>:
    d628:	deffef04 	addi	sp,sp,-68
    d62c:	dc400815 	stw	r17,32(sp)
    d630:	dc000715 	stw	r16,28(sp)
    d634:	34400417 	ldw	r17,16(r6)
    d638:	2c000417 	ldw	r16,16(r5)
    d63c:	dd800d15 	stw	r22,52(sp)
    d640:	dc800915 	stw	r18,36(sp)
    d644:	dfc01015 	stw	ra,64(sp)
    d648:	df000f15 	stw	fp,60(sp)
    d64c:	ddc00e15 	stw	r23,56(sp)
    d650:	dd400c15 	stw	r21,48(sp)
    d654:	dd000b15 	stw	r20,44(sp)
    d658:	dcc00a15 	stw	r19,40(sp)
    d65c:	2825883a 	mov	r18,r5
    d660:	302d883a 	mov	r22,r6
    d664:	8440050e 	bge	r16,r17,d67c <__multiply+0x54>
    d668:	8007883a 	mov	r3,r16
    d66c:	3025883a 	mov	r18,r6
    d670:	8821883a 	mov	r16,r17
    d674:	282d883a 	mov	r22,r5
    d678:	1823883a 	mov	r17,r3
    d67c:	90800217 	ldw	r2,8(r18)
    d680:	8447883a 	add	r3,r16,r17
    d684:	d8c00215 	stw	r3,8(sp)
    d688:	91400117 	ldw	r5,4(r18)
    d68c:	10c0010e 	bge	r2,r3,d694 <__multiply+0x6c>
    d690:	29400044 	addi	r5,r5,1
    d694:	000d1b80 	call	d1b8 <_Balloc>
    d698:	d8c00217 	ldw	r3,8(sp)
    d69c:	d8800615 	stw	r2,24(sp)
    d6a0:	18eb883a 	add	r21,r3,r3
    d6a4:	ad6b883a 	add	r21,r21,r21
    d6a8:	10c00504 	addi	r3,r2,20
    d6ac:	1d6b883a 	add	r21,r3,r21
    d6b0:	d8c00115 	stw	r3,4(sp)
    d6b4:	dd400315 	stw	r21,12(sp)
    d6b8:	1805883a 	mov	r2,r3
    d6bc:	1d40042e 	bgeu	r3,r21,d6d0 <__multiply+0xa8>
    d6c0:	d8c00317 	ldw	r3,12(sp)
    d6c4:	10000015 	stw	zero,0(r2)
    d6c8:	10800104 	addi	r2,r2,4
    d6cc:	10fffc36 	bltu	r2,r3,d6c0 <__alt_exception_stack_pointer+0xf800d6c0>
    d6d0:	8c63883a 	add	r17,r17,r17
    d6d4:	b5800504 	addi	r22,r22,20
    d6d8:	8c63883a 	add	r17,r17,r17
    d6dc:	94800504 	addi	r18,r18,20
    d6e0:	8421883a 	add	r16,r16,r16
    d6e4:	b463883a 	add	r17,r22,r17
    d6e8:	8421883a 	add	r16,r16,r16
    d6ec:	dd800015 	stw	r22,0(sp)
    d6f0:	dc800415 	stw	r18,16(sp)
    d6f4:	dc400515 	stw	r17,20(sp)
    d6f8:	9429883a 	add	r20,r18,r16
    d6fc:	b4404f2e 	bgeu	r22,r17,d83c <__multiply+0x214>
    d700:	d8c00017 	ldw	r3,0(sp)
    d704:	1c800017 	ldw	r18,0(r3)
    d708:	947fffcc 	andi	r17,r18,65535
    d70c:	88001e26 	beq	r17,zero,d788 <__multiply+0x160>
    d710:	dd800117 	ldw	r22,4(sp)
    d714:	dd400417 	ldw	r21,16(sp)
    d718:	0027883a 	mov	r19,zero
    d71c:	ac800017 	ldw	r18,0(r21)
    d720:	b4000017 	ldw	r16,0(r22)
    d724:	880b883a 	mov	r5,r17
    d728:	913fffcc 	andi	r4,r18,65535
    d72c:	00053c80 	call	53c8 <__mulsi3>
    d730:	9008d43a 	srli	r4,r18,16
    d734:	84bfffcc 	andi	r18,r16,65535
    d738:	1485883a 	add	r2,r2,r18
    d73c:	14e5883a 	add	r18,r2,r19
    d740:	8020d43a 	srli	r16,r16,16
    d744:	9026d43a 	srli	r19,r18,16
    d748:	880b883a 	mov	r5,r17
    d74c:	00053c80 	call	53c8 <__mulsi3>
    d750:	1405883a 	add	r2,r2,r16
    d754:	14e1883a 	add	r16,r2,r19
    d758:	90ffffcc 	andi	r3,r18,65535
    d75c:	8024943a 	slli	r18,r16,16
    d760:	ad400104 	addi	r21,r21,4
    d764:	b005883a 	mov	r2,r22
    d768:	90c6b03a 	or	r3,r18,r3
    d76c:	b0c00015 	stw	r3,0(r22)
    d770:	8026d43a 	srli	r19,r16,16
    d774:	b5800104 	addi	r22,r22,4
    d778:	ad3fe836 	bltu	r21,r20,d71c <__alt_exception_stack_pointer+0xf800d71c>
    d77c:	d8c00017 	ldw	r3,0(sp)
    d780:	14c00115 	stw	r19,4(r2)
    d784:	1c800017 	ldw	r18,0(r3)
    d788:	9024d43a 	srli	r18,r18,16
    d78c:	90002226 	beq	r18,zero,d818 <__multiply+0x1f0>
    d790:	d8c00117 	ldw	r3,4(sp)
    d794:	dd800417 	ldw	r22,16(sp)
    d798:	002f883a 	mov	r23,zero
    d79c:	1f000017 	ldw	fp,0(r3)
    d7a0:	1823883a 	mov	r17,r3
    d7a4:	182b883a 	mov	r21,r3
    d7a8:	e021883a 	mov	r16,fp
    d7ac:	00000106 	br	d7b4 <__multiply+0x18c>
    d7b0:	982b883a 	mov	r21,r19
    d7b4:	b100000b 	ldhu	r4,0(r22)
    d7b8:	8020d43a 	srli	r16,r16,16
    d7bc:	900b883a 	mov	r5,r18
    d7c0:	00053c80 	call	53c8 <__mulsi3>
    d7c4:	1405883a 	add	r2,r2,r16
    d7c8:	15ef883a 	add	r23,r2,r23
    d7cc:	b804943a 	slli	r2,r23,16
    d7d0:	e0ffffcc 	andi	r3,fp,65535
    d7d4:	8c400104 	addi	r17,r17,4
    d7d8:	10c6b03a 	or	r3,r2,r3
    d7dc:	88ffff15 	stw	r3,-4(r17)
    d7e0:	b5800104 	addi	r22,r22,4
    d7e4:	b13fff17 	ldw	r4,-4(r22)
    d7e8:	acc00104 	addi	r19,r21,4
    d7ec:	900b883a 	mov	r5,r18
    d7f0:	2008d43a 	srli	r4,r4,16
    d7f4:	9c000017 	ldw	r16,0(r19)
    d7f8:	00053c80 	call	53c8 <__mulsi3>
    d7fc:	b806d43a 	srli	r3,r23,16
    d800:	813fffcc 	andi	r4,r16,65535
    d804:	1105883a 	add	r2,r2,r4
    d808:	10f9883a 	add	fp,r2,r3
    d80c:	e02ed43a 	srli	r23,fp,16
    d810:	b53fe736 	bltu	r22,r20,d7b0 <__alt_exception_stack_pointer+0xf800d7b0>
    d814:	af000115 	stw	fp,4(r21)
    d818:	d8c00017 	ldw	r3,0(sp)
    d81c:	d9000517 	ldw	r4,20(sp)
    d820:	18c00104 	addi	r3,r3,4
    d824:	d8c00015 	stw	r3,0(sp)
    d828:	d8c00117 	ldw	r3,4(sp)
    d82c:	18c00104 	addi	r3,r3,4
    d830:	d8c00115 	stw	r3,4(sp)
    d834:	d8c00017 	ldw	r3,0(sp)
    d838:	193fb136 	bltu	r3,r4,d700 <__alt_exception_stack_pointer+0xf800d700>
    d83c:	d8c00217 	ldw	r3,8(sp)
    d840:	00c00c0e 	bge	zero,r3,d874 <__multiply+0x24c>
    d844:	d8c00317 	ldw	r3,12(sp)
    d848:	18bfff17 	ldw	r2,-4(r3)
    d84c:	1d7fff04 	addi	r21,r3,-4
    d850:	10000326 	beq	r2,zero,d860 <__multiply+0x238>
    d854:	00000706 	br	d874 <__multiply+0x24c>
    d858:	a8800017 	ldw	r2,0(r21)
    d85c:	1000051e 	bne	r2,zero,d874 <__multiply+0x24c>
    d860:	d8c00217 	ldw	r3,8(sp)
    d864:	ad7fff04 	addi	r21,r21,-4
    d868:	18ffffc4 	addi	r3,r3,-1
    d86c:	d8c00215 	stw	r3,8(sp)
    d870:	183ff91e 	bne	r3,zero,d858 <__alt_exception_stack_pointer+0xf800d858>
    d874:	d8c00617 	ldw	r3,24(sp)
    d878:	d9000217 	ldw	r4,8(sp)
    d87c:	1805883a 	mov	r2,r3
    d880:	19000415 	stw	r4,16(r3)
    d884:	dfc01017 	ldw	ra,64(sp)
    d888:	df000f17 	ldw	fp,60(sp)
    d88c:	ddc00e17 	ldw	r23,56(sp)
    d890:	dd800d17 	ldw	r22,52(sp)
    d894:	dd400c17 	ldw	r21,48(sp)
    d898:	dd000b17 	ldw	r20,44(sp)
    d89c:	dcc00a17 	ldw	r19,40(sp)
    d8a0:	dc800917 	ldw	r18,36(sp)
    d8a4:	dc400817 	ldw	r17,32(sp)
    d8a8:	dc000717 	ldw	r16,28(sp)
    d8ac:	dec01104 	addi	sp,sp,68
    d8b0:	f800283a 	ret

0000d8b4 <__pow5mult>:
    d8b4:	defffa04 	addi	sp,sp,-24
    d8b8:	dcc00315 	stw	r19,12(sp)
    d8bc:	dc000015 	stw	r16,0(sp)
    d8c0:	dfc00515 	stw	ra,20(sp)
    d8c4:	dd000415 	stw	r20,16(sp)
    d8c8:	dc800215 	stw	r18,8(sp)
    d8cc:	dc400115 	stw	r17,4(sp)
    d8d0:	308000cc 	andi	r2,r6,3
    d8d4:	3021883a 	mov	r16,r6
    d8d8:	2027883a 	mov	r19,r4
    d8dc:	10002f1e 	bne	r2,zero,d99c <__pow5mult+0xe8>
    d8e0:	2825883a 	mov	r18,r5
    d8e4:	8021d0ba 	srai	r16,r16,2
    d8e8:	80001a26 	beq	r16,zero,d954 <__pow5mult+0xa0>
    d8ec:	9c401217 	ldw	r17,72(r19)
    d8f0:	8800061e 	bne	r17,zero,d90c <__pow5mult+0x58>
    d8f4:	00003406 	br	d9c8 <__pow5mult+0x114>
    d8f8:	8021d07a 	srai	r16,r16,1
    d8fc:	80001526 	beq	r16,zero,d954 <__pow5mult+0xa0>
    d900:	88800017 	ldw	r2,0(r17)
    d904:	10001c26 	beq	r2,zero,d978 <__pow5mult+0xc4>
    d908:	1023883a 	mov	r17,r2
    d90c:	8080004c 	andi	r2,r16,1
    d910:	103ff926 	beq	r2,zero,d8f8 <__alt_exception_stack_pointer+0xf800d8f8>
    d914:	880d883a 	mov	r6,r17
    d918:	900b883a 	mov	r5,r18
    d91c:	9809883a 	mov	r4,r19
    d920:	000d6280 	call	d628 <__multiply>
    d924:	90001b26 	beq	r18,zero,d994 <__pow5mult+0xe0>
    d928:	91000117 	ldw	r4,4(r18)
    d92c:	98c01317 	ldw	r3,76(r19)
    d930:	8021d07a 	srai	r16,r16,1
    d934:	2109883a 	add	r4,r4,r4
    d938:	2109883a 	add	r4,r4,r4
    d93c:	1907883a 	add	r3,r3,r4
    d940:	19000017 	ldw	r4,0(r3)
    d944:	91000015 	stw	r4,0(r18)
    d948:	1c800015 	stw	r18,0(r3)
    d94c:	1025883a 	mov	r18,r2
    d950:	803feb1e 	bne	r16,zero,d900 <__alt_exception_stack_pointer+0xf800d900>
    d954:	9005883a 	mov	r2,r18
    d958:	dfc00517 	ldw	ra,20(sp)
    d95c:	dd000417 	ldw	r20,16(sp)
    d960:	dcc00317 	ldw	r19,12(sp)
    d964:	dc800217 	ldw	r18,8(sp)
    d968:	dc400117 	ldw	r17,4(sp)
    d96c:	dc000017 	ldw	r16,0(sp)
    d970:	dec00604 	addi	sp,sp,24
    d974:	f800283a 	ret
    d978:	880d883a 	mov	r6,r17
    d97c:	880b883a 	mov	r5,r17
    d980:	9809883a 	mov	r4,r19
    d984:	000d6280 	call	d628 <__multiply>
    d988:	88800015 	stw	r2,0(r17)
    d98c:	10000015 	stw	zero,0(r2)
    d990:	003fdd06 	br	d908 <__alt_exception_stack_pointer+0xf800d908>
    d994:	1025883a 	mov	r18,r2
    d998:	003fd706 	br	d8f8 <__alt_exception_stack_pointer+0xf800d8f8>
    d99c:	10bfffc4 	addi	r2,r2,-1
    d9a0:	1085883a 	add	r2,r2,r2
    d9a4:	00c00074 	movhi	r3,1
    d9a8:	18d9f104 	addi	r3,r3,26564
    d9ac:	1085883a 	add	r2,r2,r2
    d9b0:	1885883a 	add	r2,r3,r2
    d9b4:	11800017 	ldw	r6,0(r2)
    d9b8:	000f883a 	mov	r7,zero
    d9bc:	000d2880 	call	d288 <__multadd>
    d9c0:	1025883a 	mov	r18,r2
    d9c4:	003fc706 	br	d8e4 <__alt_exception_stack_pointer+0xf800d8e4>
    d9c8:	05000044 	movi	r20,1
    d9cc:	a00b883a 	mov	r5,r20
    d9d0:	9809883a 	mov	r4,r19
    d9d4:	000d1b80 	call	d1b8 <_Balloc>
    d9d8:	1023883a 	mov	r17,r2
    d9dc:	00809c44 	movi	r2,625
    d9e0:	88800515 	stw	r2,20(r17)
    d9e4:	8d000415 	stw	r20,16(r17)
    d9e8:	9c401215 	stw	r17,72(r19)
    d9ec:	88000015 	stw	zero,0(r17)
    d9f0:	003fc606 	br	d90c <__alt_exception_stack_pointer+0xf800d90c>

0000d9f4 <__lshift>:
    d9f4:	defff904 	addi	sp,sp,-28
    d9f8:	dd400515 	stw	r21,20(sp)
    d9fc:	dcc00315 	stw	r19,12(sp)
    da00:	302bd17a 	srai	r21,r6,5
    da04:	2cc00417 	ldw	r19,16(r5)
    da08:	28800217 	ldw	r2,8(r5)
    da0c:	dd000415 	stw	r20,16(sp)
    da10:	ace7883a 	add	r19,r21,r19
    da14:	dc800215 	stw	r18,8(sp)
    da18:	dc400115 	stw	r17,4(sp)
    da1c:	dc000015 	stw	r16,0(sp)
    da20:	dfc00615 	stw	ra,24(sp)
    da24:	9c000044 	addi	r16,r19,1
    da28:	2823883a 	mov	r17,r5
    da2c:	3029883a 	mov	r20,r6
    da30:	2025883a 	mov	r18,r4
    da34:	29400117 	ldw	r5,4(r5)
    da38:	1400030e 	bge	r2,r16,da48 <__lshift+0x54>
    da3c:	1085883a 	add	r2,r2,r2
    da40:	29400044 	addi	r5,r5,1
    da44:	143ffd16 	blt	r2,r16,da3c <__alt_exception_stack_pointer+0xf800da3c>
    da48:	9009883a 	mov	r4,r18
    da4c:	000d1b80 	call	d1b8 <_Balloc>
    da50:	10c00504 	addi	r3,r2,20
    da54:	0540070e 	bge	zero,r21,da74 <__lshift+0x80>
    da58:	ad6b883a 	add	r21,r21,r21
    da5c:	ad6b883a 	add	r21,r21,r21
    da60:	1809883a 	mov	r4,r3
    da64:	1d47883a 	add	r3,r3,r21
    da68:	20000015 	stw	zero,0(r4)
    da6c:	21000104 	addi	r4,r4,4
    da70:	193ffd1e 	bne	r3,r4,da68 <__alt_exception_stack_pointer+0xf800da68>
    da74:	8a000417 	ldw	r8,16(r17)
    da78:	89000504 	addi	r4,r17,20
    da7c:	a18007cc 	andi	r6,r20,31
    da80:	4211883a 	add	r8,r8,r8
    da84:	4211883a 	add	r8,r8,r8
    da88:	2211883a 	add	r8,r4,r8
    da8c:	30002326 	beq	r6,zero,db1c <__lshift+0x128>
    da90:	02400804 	movi	r9,32
    da94:	4993c83a 	sub	r9,r9,r6
    da98:	000b883a 	mov	r5,zero
    da9c:	21c00017 	ldw	r7,0(r4)
    daa0:	1815883a 	mov	r10,r3
    daa4:	18c00104 	addi	r3,r3,4
    daa8:	398e983a 	sll	r7,r7,r6
    daac:	21000104 	addi	r4,r4,4
    dab0:	394ab03a 	or	r5,r7,r5
    dab4:	197fff15 	stw	r5,-4(r3)
    dab8:	217fff17 	ldw	r5,-4(r4)
    dabc:	2a4ad83a 	srl	r5,r5,r9
    dac0:	223ff636 	bltu	r4,r8,da9c <__alt_exception_stack_pointer+0xf800da9c>
    dac4:	51400115 	stw	r5,4(r10)
    dac8:	28001a1e 	bne	r5,zero,db34 <__lshift+0x140>
    dacc:	843fffc4 	addi	r16,r16,-1
    dad0:	14000415 	stw	r16,16(r2)
    dad4:	88000826 	beq	r17,zero,daf8 <__lshift+0x104>
    dad8:	89000117 	ldw	r4,4(r17)
    dadc:	90c01317 	ldw	r3,76(r18)
    dae0:	2109883a 	add	r4,r4,r4
    dae4:	2109883a 	add	r4,r4,r4
    dae8:	1907883a 	add	r3,r3,r4
    daec:	19000017 	ldw	r4,0(r3)
    daf0:	89000015 	stw	r4,0(r17)
    daf4:	1c400015 	stw	r17,0(r3)
    daf8:	dfc00617 	ldw	ra,24(sp)
    dafc:	dd400517 	ldw	r21,20(sp)
    db00:	dd000417 	ldw	r20,16(sp)
    db04:	dcc00317 	ldw	r19,12(sp)
    db08:	dc800217 	ldw	r18,8(sp)
    db0c:	dc400117 	ldw	r17,4(sp)
    db10:	dc000017 	ldw	r16,0(sp)
    db14:	dec00704 	addi	sp,sp,28
    db18:	f800283a 	ret
    db1c:	21400017 	ldw	r5,0(r4)
    db20:	18c00104 	addi	r3,r3,4
    db24:	21000104 	addi	r4,r4,4
    db28:	197fff15 	stw	r5,-4(r3)
    db2c:	223ffb36 	bltu	r4,r8,db1c <__alt_exception_stack_pointer+0xf800db1c>
    db30:	003fe606 	br	dacc <__alt_exception_stack_pointer+0xf800dacc>
    db34:	9c000084 	addi	r16,r19,2
    db38:	003fe406 	br	dacc <__alt_exception_stack_pointer+0xf800dacc>

0000db3c <__mcmp>:
    db3c:	20800417 	ldw	r2,16(r4)
    db40:	28c00417 	ldw	r3,16(r5)
    db44:	10c5c83a 	sub	r2,r2,r3
    db48:	1000111e 	bne	r2,zero,db90 <__mcmp+0x54>
    db4c:	18c7883a 	add	r3,r3,r3
    db50:	18c7883a 	add	r3,r3,r3
    db54:	21000504 	addi	r4,r4,20
    db58:	29400504 	addi	r5,r5,20
    db5c:	20c5883a 	add	r2,r4,r3
    db60:	28cb883a 	add	r5,r5,r3
    db64:	00000106 	br	db6c <__mcmp+0x30>
    db68:	20800a2e 	bgeu	r4,r2,db94 <__mcmp+0x58>
    db6c:	10bfff04 	addi	r2,r2,-4
    db70:	297fff04 	addi	r5,r5,-4
    db74:	11800017 	ldw	r6,0(r2)
    db78:	28c00017 	ldw	r3,0(r5)
    db7c:	30fffa26 	beq	r6,r3,db68 <__alt_exception_stack_pointer+0xf800db68>
    db80:	30c00236 	bltu	r6,r3,db8c <__mcmp+0x50>
    db84:	00800044 	movi	r2,1
    db88:	f800283a 	ret
    db8c:	00bfffc4 	movi	r2,-1
    db90:	f800283a 	ret
    db94:	0005883a 	mov	r2,zero
    db98:	f800283a 	ret

0000db9c <__mdiff>:
    db9c:	28c00417 	ldw	r3,16(r5)
    dba0:	30800417 	ldw	r2,16(r6)
    dba4:	defffa04 	addi	sp,sp,-24
    dba8:	dcc00315 	stw	r19,12(sp)
    dbac:	dc800215 	stw	r18,8(sp)
    dbb0:	dfc00515 	stw	ra,20(sp)
    dbb4:	dd000415 	stw	r20,16(sp)
    dbb8:	dc400115 	stw	r17,4(sp)
    dbbc:	dc000015 	stw	r16,0(sp)
    dbc0:	1887c83a 	sub	r3,r3,r2
    dbc4:	2825883a 	mov	r18,r5
    dbc8:	3027883a 	mov	r19,r6
    dbcc:	1800141e 	bne	r3,zero,dc20 <__mdiff+0x84>
    dbd0:	1085883a 	add	r2,r2,r2
    dbd4:	1085883a 	add	r2,r2,r2
    dbd8:	2a000504 	addi	r8,r5,20
    dbdc:	34000504 	addi	r16,r6,20
    dbe0:	4087883a 	add	r3,r8,r2
    dbe4:	8085883a 	add	r2,r16,r2
    dbe8:	00000106 	br	dbf0 <__mdiff+0x54>
    dbec:	40c0592e 	bgeu	r8,r3,dd54 <__mdiff+0x1b8>
    dbf0:	18ffff04 	addi	r3,r3,-4
    dbf4:	10bfff04 	addi	r2,r2,-4
    dbf8:	19c00017 	ldw	r7,0(r3)
    dbfc:	11400017 	ldw	r5,0(r2)
    dc00:	397ffa26 	beq	r7,r5,dbec <__alt_exception_stack_pointer+0xf800dbec>
    dc04:	3940592e 	bgeu	r7,r5,dd6c <__mdiff+0x1d0>
    dc08:	9005883a 	mov	r2,r18
    dc0c:	4023883a 	mov	r17,r8
    dc10:	9825883a 	mov	r18,r19
    dc14:	05000044 	movi	r20,1
    dc18:	1027883a 	mov	r19,r2
    dc1c:	00000406 	br	dc30 <__mdiff+0x94>
    dc20:	18005616 	blt	r3,zero,dd7c <__mdiff+0x1e0>
    dc24:	34400504 	addi	r17,r6,20
    dc28:	2c000504 	addi	r16,r5,20
    dc2c:	0029883a 	mov	r20,zero
    dc30:	91400117 	ldw	r5,4(r18)
    dc34:	000d1b80 	call	d1b8 <_Balloc>
    dc38:	92400417 	ldw	r9,16(r18)
    dc3c:	9b000417 	ldw	r12,16(r19)
    dc40:	12c00504 	addi	r11,r2,20
    dc44:	4a51883a 	add	r8,r9,r9
    dc48:	6319883a 	add	r12,r12,r12
    dc4c:	4211883a 	add	r8,r8,r8
    dc50:	6319883a 	add	r12,r12,r12
    dc54:	15000315 	stw	r20,12(r2)
    dc58:	8211883a 	add	r8,r16,r8
    dc5c:	8b19883a 	add	r12,r17,r12
    dc60:	0007883a 	mov	r3,zero
    dc64:	81400017 	ldw	r5,0(r16)
    dc68:	89c00017 	ldw	r7,0(r17)
    dc6c:	59800104 	addi	r6,r11,4
    dc70:	293fffcc 	andi	r4,r5,65535
    dc74:	20c7883a 	add	r3,r4,r3
    dc78:	393fffcc 	andi	r4,r7,65535
    dc7c:	1909c83a 	sub	r4,r3,r4
    dc80:	280ad43a 	srli	r5,r5,16
    dc84:	380ed43a 	srli	r7,r7,16
    dc88:	2007d43a 	srai	r3,r4,16
    dc8c:	213fffcc 	andi	r4,r4,65535
    dc90:	29cbc83a 	sub	r5,r5,r7
    dc94:	28c7883a 	add	r3,r5,r3
    dc98:	180a943a 	slli	r5,r3,16
    dc9c:	8c400104 	addi	r17,r17,4
    dca0:	84000104 	addi	r16,r16,4
    dca4:	2908b03a 	or	r4,r5,r4
    dca8:	59000015 	stw	r4,0(r11)
    dcac:	1807d43a 	srai	r3,r3,16
    dcb0:	3015883a 	mov	r10,r6
    dcb4:	3017883a 	mov	r11,r6
    dcb8:	8b3fea36 	bltu	r17,r12,dc64 <__alt_exception_stack_pointer+0xf800dc64>
    dcbc:	8200162e 	bgeu	r16,r8,dd18 <__mdiff+0x17c>
    dcc0:	8017883a 	mov	r11,r16
    dcc4:	59400017 	ldw	r5,0(r11)
    dcc8:	31800104 	addi	r6,r6,4
    dccc:	5ac00104 	addi	r11,r11,4
    dcd0:	293fffcc 	andi	r4,r5,65535
    dcd4:	20c7883a 	add	r3,r4,r3
    dcd8:	280ed43a 	srli	r7,r5,16
    dcdc:	180bd43a 	srai	r5,r3,16
    dce0:	193fffcc 	andi	r4,r3,65535
    dce4:	3947883a 	add	r3,r7,r5
    dce8:	180a943a 	slli	r5,r3,16
    dcec:	1807d43a 	srai	r3,r3,16
    dcf0:	2908b03a 	or	r4,r5,r4
    dcf4:	313fff15 	stw	r4,-4(r6)
    dcf8:	5a3ff236 	bltu	r11,r8,dcc4 <__alt_exception_stack_pointer+0xf800dcc4>
    dcfc:	0406303a 	nor	r3,zero,r16
    dd00:	1a07883a 	add	r3,r3,r8
    dd04:	1806d0ba 	srli	r3,r3,2
    dd08:	18c00044 	addi	r3,r3,1
    dd0c:	18c7883a 	add	r3,r3,r3
    dd10:	18c7883a 	add	r3,r3,r3
    dd14:	50d5883a 	add	r10,r10,r3
    dd18:	50ffff04 	addi	r3,r10,-4
    dd1c:	2000041e 	bne	r4,zero,dd30 <__mdiff+0x194>
    dd20:	18ffff04 	addi	r3,r3,-4
    dd24:	19000017 	ldw	r4,0(r3)
    dd28:	4a7fffc4 	addi	r9,r9,-1
    dd2c:	203ffc26 	beq	r4,zero,dd20 <__alt_exception_stack_pointer+0xf800dd20>
    dd30:	12400415 	stw	r9,16(r2)
    dd34:	dfc00517 	ldw	ra,20(sp)
    dd38:	dd000417 	ldw	r20,16(sp)
    dd3c:	dcc00317 	ldw	r19,12(sp)
    dd40:	dc800217 	ldw	r18,8(sp)
    dd44:	dc400117 	ldw	r17,4(sp)
    dd48:	dc000017 	ldw	r16,0(sp)
    dd4c:	dec00604 	addi	sp,sp,24
    dd50:	f800283a 	ret
    dd54:	000b883a 	mov	r5,zero
    dd58:	000d1b80 	call	d1b8 <_Balloc>
    dd5c:	00c00044 	movi	r3,1
    dd60:	10c00415 	stw	r3,16(r2)
    dd64:	10000515 	stw	zero,20(r2)
    dd68:	003ff206 	br	dd34 <__alt_exception_stack_pointer+0xf800dd34>
    dd6c:	8023883a 	mov	r17,r16
    dd70:	0029883a 	mov	r20,zero
    dd74:	4021883a 	mov	r16,r8
    dd78:	003fad06 	br	dc30 <__alt_exception_stack_pointer+0xf800dc30>
    dd7c:	9005883a 	mov	r2,r18
    dd80:	94400504 	addi	r17,r18,20
    dd84:	9c000504 	addi	r16,r19,20
    dd88:	9825883a 	mov	r18,r19
    dd8c:	05000044 	movi	r20,1
    dd90:	1027883a 	mov	r19,r2
    dd94:	003fa606 	br	dc30 <__alt_exception_stack_pointer+0xf800dc30>

0000dd98 <__ulp>:
    dd98:	295ffc2c 	andhi	r5,r5,32752
    dd9c:	00bf3034 	movhi	r2,64704
    dda0:	2887883a 	add	r3,r5,r2
    dda4:	00c0020e 	bge	zero,r3,ddb0 <__ulp+0x18>
    dda8:	0005883a 	mov	r2,zero
    ddac:	f800283a 	ret
    ddb0:	00c7c83a 	sub	r3,zero,r3
    ddb4:	1807d53a 	srai	r3,r3,20
    ddb8:	008004c4 	movi	r2,19
    ddbc:	10c00b0e 	bge	r2,r3,ddec <__ulp+0x54>
    ddc0:	18bffb04 	addi	r2,r3,-20
    ddc4:	01000784 	movi	r4,30
    ddc8:	0007883a 	mov	r3,zero
    ddcc:	20800516 	blt	r4,r2,dde4 <__ulp+0x4c>
    ddd0:	010007c4 	movi	r4,31
    ddd4:	2089c83a 	sub	r4,r4,r2
    ddd8:	00800044 	movi	r2,1
    dddc:	1104983a 	sll	r2,r2,r4
    dde0:	f800283a 	ret
    dde4:	00800044 	movi	r2,1
    dde8:	f800283a 	ret
    ddec:	01400234 	movhi	r5,8
    ddf0:	28c7d83a 	sra	r3,r5,r3
    ddf4:	0005883a 	mov	r2,zero
    ddf8:	f800283a 	ret

0000ddfc <__b2d>:
    ddfc:	defffa04 	addi	sp,sp,-24
    de00:	dc000015 	stw	r16,0(sp)
    de04:	24000417 	ldw	r16,16(r4)
    de08:	dc400115 	stw	r17,4(sp)
    de0c:	24400504 	addi	r17,r4,20
    de10:	8421883a 	add	r16,r16,r16
    de14:	8421883a 	add	r16,r16,r16
    de18:	8c21883a 	add	r16,r17,r16
    de1c:	dc800215 	stw	r18,8(sp)
    de20:	84bfff17 	ldw	r18,-4(r16)
    de24:	dd000415 	stw	r20,16(sp)
    de28:	dcc00315 	stw	r19,12(sp)
    de2c:	9009883a 	mov	r4,r18
    de30:	2829883a 	mov	r20,r5
    de34:	dfc00515 	stw	ra,20(sp)
    de38:	000d4d40 	call	d4d4 <__hi0bits>
    de3c:	00c00804 	movi	r3,32
    de40:	1889c83a 	sub	r4,r3,r2
    de44:	a1000015 	stw	r4,0(r20)
    de48:	01000284 	movi	r4,10
    de4c:	84ffff04 	addi	r19,r16,-4
    de50:	20801216 	blt	r4,r2,de9c <__b2d+0xa0>
    de54:	018002c4 	movi	r6,11
    de58:	308dc83a 	sub	r6,r6,r2
    de5c:	9186d83a 	srl	r3,r18,r6
    de60:	18cffc34 	orhi	r3,r3,16368
    de64:	8cc0212e 	bgeu	r17,r19,deec <__b2d+0xf0>
    de68:	813ffe17 	ldw	r4,-8(r16)
    de6c:	218cd83a 	srl	r6,r4,r6
    de70:	10800544 	addi	r2,r2,21
    de74:	9084983a 	sll	r2,r18,r2
    de78:	1184b03a 	or	r2,r2,r6
    de7c:	dfc00517 	ldw	ra,20(sp)
    de80:	dd000417 	ldw	r20,16(sp)
    de84:	dcc00317 	ldw	r19,12(sp)
    de88:	dc800217 	ldw	r18,8(sp)
    de8c:	dc400117 	ldw	r17,4(sp)
    de90:	dc000017 	ldw	r16,0(sp)
    de94:	dec00604 	addi	sp,sp,24
    de98:	f800283a 	ret
    de9c:	8cc00f2e 	bgeu	r17,r19,dedc <__b2d+0xe0>
    dea0:	117ffd44 	addi	r5,r2,-11
    dea4:	80bffe17 	ldw	r2,-8(r16)
    dea8:	28000e26 	beq	r5,zero,dee4 <__b2d+0xe8>
    deac:	1949c83a 	sub	r4,r3,r5
    deb0:	9164983a 	sll	r18,r18,r5
    deb4:	1106d83a 	srl	r3,r2,r4
    deb8:	81bffe04 	addi	r6,r16,-8
    debc:	948ffc34 	orhi	r18,r18,16368
    dec0:	90c6b03a 	or	r3,r18,r3
    dec4:	89800e2e 	bgeu	r17,r6,df00 <__b2d+0x104>
    dec8:	81bffd17 	ldw	r6,-12(r16)
    decc:	1144983a 	sll	r2,r2,r5
    ded0:	310ad83a 	srl	r5,r6,r4
    ded4:	2884b03a 	or	r2,r5,r2
    ded8:	003fe806 	br	de7c <__alt_exception_stack_pointer+0xf800de7c>
    dedc:	10bffd44 	addi	r2,r2,-11
    dee0:	1000041e 	bne	r2,zero,def4 <__b2d+0xf8>
    dee4:	90cffc34 	orhi	r3,r18,16368
    dee8:	003fe406 	br	de7c <__alt_exception_stack_pointer+0xf800de7c>
    deec:	000d883a 	mov	r6,zero
    def0:	003fdf06 	br	de70 <__alt_exception_stack_pointer+0xf800de70>
    def4:	90a4983a 	sll	r18,r18,r2
    def8:	0005883a 	mov	r2,zero
    defc:	003ff906 	br	dee4 <__alt_exception_stack_pointer+0xf800dee4>
    df00:	1144983a 	sll	r2,r2,r5
    df04:	003fdd06 	br	de7c <__alt_exception_stack_pointer+0xf800de7c>

0000df08 <__d2b>:
    df08:	defff804 	addi	sp,sp,-32
    df0c:	dc000215 	stw	r16,8(sp)
    df10:	3021883a 	mov	r16,r6
    df14:	dc400315 	stw	r17,12(sp)
    df18:	8022907a 	slli	r17,r16,1
    df1c:	dd000615 	stw	r20,24(sp)
    df20:	2829883a 	mov	r20,r5
    df24:	01400044 	movi	r5,1
    df28:	dcc00515 	stw	r19,20(sp)
    df2c:	dc800415 	stw	r18,16(sp)
    df30:	dfc00715 	stw	ra,28(sp)
    df34:	3825883a 	mov	r18,r7
    df38:	8822d57a 	srli	r17,r17,21
    df3c:	000d1b80 	call	d1b8 <_Balloc>
    df40:	1027883a 	mov	r19,r2
    df44:	00800434 	movhi	r2,16
    df48:	10bfffc4 	addi	r2,r2,-1
    df4c:	808c703a 	and	r6,r16,r2
    df50:	88000126 	beq	r17,zero,df58 <__d2b+0x50>
    df54:	31800434 	orhi	r6,r6,16
    df58:	d9800015 	stw	r6,0(sp)
    df5c:	a0002426 	beq	r20,zero,dff0 <__d2b+0xe8>
    df60:	d9000104 	addi	r4,sp,4
    df64:	dd000115 	stw	r20,4(sp)
    df68:	000d53c0 	call	d53c <__lo0bits>
    df6c:	d8c00017 	ldw	r3,0(sp)
    df70:	10002f1e 	bne	r2,zero,e030 <__d2b+0x128>
    df74:	d9000117 	ldw	r4,4(sp)
    df78:	99000515 	stw	r4,20(r19)
    df7c:	1821003a 	cmpeq	r16,r3,zero
    df80:	01000084 	movi	r4,2
    df84:	2421c83a 	sub	r16,r4,r16
    df88:	98c00615 	stw	r3,24(r19)
    df8c:	9c000415 	stw	r16,16(r19)
    df90:	88001f1e 	bne	r17,zero,e010 <__d2b+0x108>
    df94:	10bef384 	addi	r2,r2,-1074
    df98:	90800015 	stw	r2,0(r18)
    df9c:	00900034 	movhi	r2,16384
    dfa0:	10bfffc4 	addi	r2,r2,-1
    dfa4:	8085883a 	add	r2,r16,r2
    dfa8:	1085883a 	add	r2,r2,r2
    dfac:	1085883a 	add	r2,r2,r2
    dfb0:	9885883a 	add	r2,r19,r2
    dfb4:	11000517 	ldw	r4,20(r2)
    dfb8:	8020917a 	slli	r16,r16,5
    dfbc:	000d4d40 	call	d4d4 <__hi0bits>
    dfc0:	d8c00817 	ldw	r3,32(sp)
    dfc4:	8085c83a 	sub	r2,r16,r2
    dfc8:	18800015 	stw	r2,0(r3)
    dfcc:	9805883a 	mov	r2,r19
    dfd0:	dfc00717 	ldw	ra,28(sp)
    dfd4:	dd000617 	ldw	r20,24(sp)
    dfd8:	dcc00517 	ldw	r19,20(sp)
    dfdc:	dc800417 	ldw	r18,16(sp)
    dfe0:	dc400317 	ldw	r17,12(sp)
    dfe4:	dc000217 	ldw	r16,8(sp)
    dfe8:	dec00804 	addi	sp,sp,32
    dfec:	f800283a 	ret
    dff0:	d809883a 	mov	r4,sp
    dff4:	000d53c0 	call	d53c <__lo0bits>
    dff8:	d8c00017 	ldw	r3,0(sp)
    dffc:	04000044 	movi	r16,1
    e000:	9c000415 	stw	r16,16(r19)
    e004:	98c00515 	stw	r3,20(r19)
    e008:	10800804 	addi	r2,r2,32
    e00c:	883fe126 	beq	r17,zero,df94 <__alt_exception_stack_pointer+0xf800df94>
    e010:	00c00d44 	movi	r3,53
    e014:	8c7ef344 	addi	r17,r17,-1075
    e018:	88a3883a 	add	r17,r17,r2
    e01c:	1885c83a 	sub	r2,r3,r2
    e020:	d8c00817 	ldw	r3,32(sp)
    e024:	94400015 	stw	r17,0(r18)
    e028:	18800015 	stw	r2,0(r3)
    e02c:	003fe706 	br	dfcc <__alt_exception_stack_pointer+0xf800dfcc>
    e030:	01000804 	movi	r4,32
    e034:	2089c83a 	sub	r4,r4,r2
    e038:	1908983a 	sll	r4,r3,r4
    e03c:	d9400117 	ldw	r5,4(sp)
    e040:	1886d83a 	srl	r3,r3,r2
    e044:	2148b03a 	or	r4,r4,r5
    e048:	99000515 	stw	r4,20(r19)
    e04c:	d8c00015 	stw	r3,0(sp)
    e050:	003fca06 	br	df7c <__alt_exception_stack_pointer+0xf800df7c>

0000e054 <__ratio>:
    e054:	defff904 	addi	sp,sp,-28
    e058:	dc400315 	stw	r17,12(sp)
    e05c:	2823883a 	mov	r17,r5
    e060:	d9400104 	addi	r5,sp,4
    e064:	dfc00615 	stw	ra,24(sp)
    e068:	dcc00515 	stw	r19,20(sp)
    e06c:	dc800415 	stw	r18,16(sp)
    e070:	2027883a 	mov	r19,r4
    e074:	dc000215 	stw	r16,8(sp)
    e078:	000ddfc0 	call	ddfc <__b2d>
    e07c:	d80b883a 	mov	r5,sp
    e080:	8809883a 	mov	r4,r17
    e084:	1025883a 	mov	r18,r2
    e088:	1821883a 	mov	r16,r3
    e08c:	000ddfc0 	call	ddfc <__b2d>
    e090:	8a000417 	ldw	r8,16(r17)
    e094:	99000417 	ldw	r4,16(r19)
    e098:	d9400117 	ldw	r5,4(sp)
    e09c:	2209c83a 	sub	r4,r4,r8
    e0a0:	2010917a 	slli	r8,r4,5
    e0a4:	d9000017 	ldw	r4,0(sp)
    e0a8:	2909c83a 	sub	r4,r5,r4
    e0ac:	4109883a 	add	r4,r8,r4
    e0b0:	01000e0e 	bge	zero,r4,e0ec <__ratio+0x98>
    e0b4:	2008953a 	slli	r4,r4,20
    e0b8:	2421883a 	add	r16,r4,r16
    e0bc:	100d883a 	mov	r6,r2
    e0c0:	180f883a 	mov	r7,r3
    e0c4:	9009883a 	mov	r4,r18
    e0c8:	800b883a 	mov	r5,r16
    e0cc:	00116640 	call	11664 <__divdf3>
    e0d0:	dfc00617 	ldw	ra,24(sp)
    e0d4:	dcc00517 	ldw	r19,20(sp)
    e0d8:	dc800417 	ldw	r18,16(sp)
    e0dc:	dc400317 	ldw	r17,12(sp)
    e0e0:	dc000217 	ldw	r16,8(sp)
    e0e4:	dec00704 	addi	sp,sp,28
    e0e8:	f800283a 	ret
    e0ec:	2008953a 	slli	r4,r4,20
    e0f0:	1907c83a 	sub	r3,r3,r4
    e0f4:	003ff106 	br	e0bc <__alt_exception_stack_pointer+0xf800e0bc>

0000e0f8 <_mprec_log10>:
    e0f8:	defffe04 	addi	sp,sp,-8
    e0fc:	dc000015 	stw	r16,0(sp)
    e100:	dfc00115 	stw	ra,4(sp)
    e104:	008005c4 	movi	r2,23
    e108:	2021883a 	mov	r16,r4
    e10c:	11000d0e 	bge	r2,r4,e144 <_mprec_log10+0x4c>
    e110:	0005883a 	mov	r2,zero
    e114:	00cffc34 	movhi	r3,16368
    e118:	843fffc4 	addi	r16,r16,-1
    e11c:	000d883a 	mov	r6,zero
    e120:	01d00934 	movhi	r7,16420
    e124:	1009883a 	mov	r4,r2
    e128:	180b883a 	mov	r5,r3
    e12c:	0005e000 	call	5e00 <__muldf3>
    e130:	803ff91e 	bne	r16,zero,e118 <__alt_exception_stack_pointer+0xf800e118>
    e134:	dfc00117 	ldw	ra,4(sp)
    e138:	dc000017 	ldw	r16,0(sp)
    e13c:	dec00204 	addi	sp,sp,8
    e140:	f800283a 	ret
    e144:	202090fa 	slli	r16,r4,3
    e148:	00800074 	movhi	r2,1
    e14c:	109a0804 	addi	r2,r2,26656
    e150:	1421883a 	add	r16,r2,r16
    e154:	80800017 	ldw	r2,0(r16)
    e158:	80c00117 	ldw	r3,4(r16)
    e15c:	dfc00117 	ldw	ra,4(sp)
    e160:	dc000017 	ldw	r16,0(sp)
    e164:	dec00204 	addi	sp,sp,8
    e168:	f800283a 	ret

0000e16c <__copybits>:
    e16c:	297fffc4 	addi	r5,r5,-1
    e170:	280fd17a 	srai	r7,r5,5
    e174:	30c00417 	ldw	r3,16(r6)
    e178:	30800504 	addi	r2,r6,20
    e17c:	39c00044 	addi	r7,r7,1
    e180:	18c7883a 	add	r3,r3,r3
    e184:	39cf883a 	add	r7,r7,r7
    e188:	18c7883a 	add	r3,r3,r3
    e18c:	39cf883a 	add	r7,r7,r7
    e190:	10c7883a 	add	r3,r2,r3
    e194:	21cf883a 	add	r7,r4,r7
    e198:	10c00d2e 	bgeu	r2,r3,e1d0 <__copybits+0x64>
    e19c:	200b883a 	mov	r5,r4
    e1a0:	12000017 	ldw	r8,0(r2)
    e1a4:	29400104 	addi	r5,r5,4
    e1a8:	10800104 	addi	r2,r2,4
    e1ac:	2a3fff15 	stw	r8,-4(r5)
    e1b0:	10fffb36 	bltu	r2,r3,e1a0 <__alt_exception_stack_pointer+0xf800e1a0>
    e1b4:	1985c83a 	sub	r2,r3,r6
    e1b8:	10bffac4 	addi	r2,r2,-21
    e1bc:	1004d0ba 	srli	r2,r2,2
    e1c0:	10800044 	addi	r2,r2,1
    e1c4:	1085883a 	add	r2,r2,r2
    e1c8:	1085883a 	add	r2,r2,r2
    e1cc:	2089883a 	add	r4,r4,r2
    e1d0:	21c0032e 	bgeu	r4,r7,e1e0 <__copybits+0x74>
    e1d4:	20000015 	stw	zero,0(r4)
    e1d8:	21000104 	addi	r4,r4,4
    e1dc:	21fffd36 	bltu	r4,r7,e1d4 <__alt_exception_stack_pointer+0xf800e1d4>
    e1e0:	f800283a 	ret

0000e1e4 <__any_on>:
    e1e4:	20c00417 	ldw	r3,16(r4)
    e1e8:	2805d17a 	srai	r2,r5,5
    e1ec:	21000504 	addi	r4,r4,20
    e1f0:	18800d0e 	bge	r3,r2,e228 <__any_on+0x44>
    e1f4:	18c7883a 	add	r3,r3,r3
    e1f8:	18c7883a 	add	r3,r3,r3
    e1fc:	20c7883a 	add	r3,r4,r3
    e200:	20c0192e 	bgeu	r4,r3,e268 <__any_on+0x84>
    e204:	18bfff17 	ldw	r2,-4(r3)
    e208:	18ffff04 	addi	r3,r3,-4
    e20c:	1000041e 	bne	r2,zero,e220 <__any_on+0x3c>
    e210:	20c0142e 	bgeu	r4,r3,e264 <__any_on+0x80>
    e214:	18ffff04 	addi	r3,r3,-4
    e218:	19400017 	ldw	r5,0(r3)
    e21c:	283ffc26 	beq	r5,zero,e210 <__alt_exception_stack_pointer+0xf800e210>
    e220:	00800044 	movi	r2,1
    e224:	f800283a 	ret
    e228:	10c00a0e 	bge	r2,r3,e254 <__any_on+0x70>
    e22c:	1085883a 	add	r2,r2,r2
    e230:	1085883a 	add	r2,r2,r2
    e234:	294007cc 	andi	r5,r5,31
    e238:	2087883a 	add	r3,r4,r2
    e23c:	283ff026 	beq	r5,zero,e200 <__alt_exception_stack_pointer+0xf800e200>
    e240:	19800017 	ldw	r6,0(r3)
    e244:	3144d83a 	srl	r2,r6,r5
    e248:	114a983a 	sll	r5,r2,r5
    e24c:	317ff41e 	bne	r6,r5,e220 <__alt_exception_stack_pointer+0xf800e220>
    e250:	003feb06 	br	e200 <__alt_exception_stack_pointer+0xf800e200>
    e254:	1085883a 	add	r2,r2,r2
    e258:	1085883a 	add	r2,r2,r2
    e25c:	2087883a 	add	r3,r4,r2
    e260:	003fe706 	br	e200 <__alt_exception_stack_pointer+0xf800e200>
    e264:	f800283a 	ret
    e268:	0005883a 	mov	r2,zero
    e26c:	f800283a 	ret

0000e270 <_realloc_r>:
    e270:	defff604 	addi	sp,sp,-40
    e274:	dc800215 	stw	r18,8(sp)
    e278:	dfc00915 	stw	ra,36(sp)
    e27c:	df000815 	stw	fp,32(sp)
    e280:	ddc00715 	stw	r23,28(sp)
    e284:	dd800615 	stw	r22,24(sp)
    e288:	dd400515 	stw	r21,20(sp)
    e28c:	dd000415 	stw	r20,16(sp)
    e290:	dcc00315 	stw	r19,12(sp)
    e294:	dc400115 	stw	r17,4(sp)
    e298:	dc000015 	stw	r16,0(sp)
    e29c:	3025883a 	mov	r18,r6
    e2a0:	2800b726 	beq	r5,zero,e580 <_realloc_r+0x310>
    e2a4:	282b883a 	mov	r21,r5
    e2a8:	2029883a 	mov	r20,r4
    e2ac:	001291c0 	call	1291c <__malloc_lock>
    e2b0:	a8bfff17 	ldw	r2,-4(r21)
    e2b4:	043fff04 	movi	r16,-4
    e2b8:	90c002c4 	addi	r3,r18,11
    e2bc:	01000584 	movi	r4,22
    e2c0:	acfffe04 	addi	r19,r21,-8
    e2c4:	1420703a 	and	r16,r2,r16
    e2c8:	20c0332e 	bgeu	r4,r3,e398 <_realloc_r+0x128>
    e2cc:	047ffe04 	movi	r17,-8
    e2d0:	1c62703a 	and	r17,r3,r17
    e2d4:	8807883a 	mov	r3,r17
    e2d8:	88005816 	blt	r17,zero,e43c <_realloc_r+0x1cc>
    e2dc:	8c805736 	bltu	r17,r18,e43c <_realloc_r+0x1cc>
    e2e0:	80c0300e 	bge	r16,r3,e3a4 <_realloc_r+0x134>
    e2e4:	07000074 	movhi	fp,1
    e2e8:	e71b6804 	addi	fp,fp,28064
    e2ec:	e1c00217 	ldw	r7,8(fp)
    e2f0:	9c09883a 	add	r4,r19,r16
    e2f4:	22000117 	ldw	r8,4(r4)
    e2f8:	21c06326 	beq	r4,r7,e488 <_realloc_r+0x218>
    e2fc:	017fff84 	movi	r5,-2
    e300:	414a703a 	and	r5,r8,r5
    e304:	214b883a 	add	r5,r4,r5
    e308:	29800117 	ldw	r6,4(r5)
    e30c:	3180004c 	andi	r6,r6,1
    e310:	30003f26 	beq	r6,zero,e410 <_realloc_r+0x1a0>
    e314:	1080004c 	andi	r2,r2,1
    e318:	10008326 	beq	r2,zero,e528 <_realloc_r+0x2b8>
    e31c:	900b883a 	mov	r5,r18
    e320:	a009883a 	mov	r4,r20
    e324:	000719c0 	call	719c <_malloc_r>
    e328:	1025883a 	mov	r18,r2
    e32c:	10011e26 	beq	r2,zero,e7a8 <_realloc_r+0x538>
    e330:	a93fff17 	ldw	r4,-4(r21)
    e334:	10fffe04 	addi	r3,r2,-8
    e338:	00bfff84 	movi	r2,-2
    e33c:	2084703a 	and	r2,r4,r2
    e340:	9885883a 	add	r2,r19,r2
    e344:	1880ee26 	beq	r3,r2,e700 <_realloc_r+0x490>
    e348:	81bfff04 	addi	r6,r16,-4
    e34c:	00800904 	movi	r2,36
    e350:	1180b836 	bltu	r2,r6,e634 <_realloc_r+0x3c4>
    e354:	00c004c4 	movi	r3,19
    e358:	19809636 	bltu	r3,r6,e5b4 <_realloc_r+0x344>
    e35c:	9005883a 	mov	r2,r18
    e360:	a807883a 	mov	r3,r21
    e364:	19000017 	ldw	r4,0(r3)
    e368:	11000015 	stw	r4,0(r2)
    e36c:	19000117 	ldw	r4,4(r3)
    e370:	11000115 	stw	r4,4(r2)
    e374:	18c00217 	ldw	r3,8(r3)
    e378:	10c00215 	stw	r3,8(r2)
    e37c:	a80b883a 	mov	r5,r21
    e380:	a009883a 	mov	r4,r20
    e384:	000c1100 	call	c110 <_free_r>
    e388:	a009883a 	mov	r4,r20
    e38c:	00129400 	call	12940 <__malloc_unlock>
    e390:	9005883a 	mov	r2,r18
    e394:	00001206 	br	e3e0 <_realloc_r+0x170>
    e398:	00c00404 	movi	r3,16
    e39c:	1823883a 	mov	r17,r3
    e3a0:	003fce06 	br	e2dc <__alt_exception_stack_pointer+0xf800e2dc>
    e3a4:	a825883a 	mov	r18,r21
    e3a8:	8445c83a 	sub	r2,r16,r17
    e3ac:	00c003c4 	movi	r3,15
    e3b0:	18802636 	bltu	r3,r2,e44c <_realloc_r+0x1dc>
    e3b4:	99800117 	ldw	r6,4(r19)
    e3b8:	9c07883a 	add	r3,r19,r16
    e3bc:	3180004c 	andi	r6,r6,1
    e3c0:	3420b03a 	or	r16,r6,r16
    e3c4:	9c000115 	stw	r16,4(r19)
    e3c8:	18800117 	ldw	r2,4(r3)
    e3cc:	10800054 	ori	r2,r2,1
    e3d0:	18800115 	stw	r2,4(r3)
    e3d4:	a009883a 	mov	r4,r20
    e3d8:	00129400 	call	12940 <__malloc_unlock>
    e3dc:	9005883a 	mov	r2,r18
    e3e0:	dfc00917 	ldw	ra,36(sp)
    e3e4:	df000817 	ldw	fp,32(sp)
    e3e8:	ddc00717 	ldw	r23,28(sp)
    e3ec:	dd800617 	ldw	r22,24(sp)
    e3f0:	dd400517 	ldw	r21,20(sp)
    e3f4:	dd000417 	ldw	r20,16(sp)
    e3f8:	dcc00317 	ldw	r19,12(sp)
    e3fc:	dc800217 	ldw	r18,8(sp)
    e400:	dc400117 	ldw	r17,4(sp)
    e404:	dc000017 	ldw	r16,0(sp)
    e408:	dec00a04 	addi	sp,sp,40
    e40c:	f800283a 	ret
    e410:	017fff04 	movi	r5,-4
    e414:	414a703a 	and	r5,r8,r5
    e418:	814d883a 	add	r6,r16,r5
    e41c:	30c01f16 	blt	r6,r3,e49c <_realloc_r+0x22c>
    e420:	20800317 	ldw	r2,12(r4)
    e424:	20c00217 	ldw	r3,8(r4)
    e428:	a825883a 	mov	r18,r21
    e42c:	3021883a 	mov	r16,r6
    e430:	18800315 	stw	r2,12(r3)
    e434:	10c00215 	stw	r3,8(r2)
    e438:	003fdb06 	br	e3a8 <__alt_exception_stack_pointer+0xf800e3a8>
    e43c:	00800304 	movi	r2,12
    e440:	a0800015 	stw	r2,0(r20)
    e444:	0005883a 	mov	r2,zero
    e448:	003fe506 	br	e3e0 <__alt_exception_stack_pointer+0xf800e3e0>
    e44c:	98c00117 	ldw	r3,4(r19)
    e450:	9c4b883a 	add	r5,r19,r17
    e454:	11000054 	ori	r4,r2,1
    e458:	18c0004c 	andi	r3,r3,1
    e45c:	1c62b03a 	or	r17,r3,r17
    e460:	9c400115 	stw	r17,4(r19)
    e464:	29000115 	stw	r4,4(r5)
    e468:	2885883a 	add	r2,r5,r2
    e46c:	10c00117 	ldw	r3,4(r2)
    e470:	29400204 	addi	r5,r5,8
    e474:	a009883a 	mov	r4,r20
    e478:	18c00054 	ori	r3,r3,1
    e47c:	10c00115 	stw	r3,4(r2)
    e480:	000c1100 	call	c110 <_free_r>
    e484:	003fd306 	br	e3d4 <__alt_exception_stack_pointer+0xf800e3d4>
    e488:	017fff04 	movi	r5,-4
    e48c:	414a703a 	and	r5,r8,r5
    e490:	89800404 	addi	r6,r17,16
    e494:	8151883a 	add	r8,r16,r5
    e498:	4180590e 	bge	r8,r6,e600 <_realloc_r+0x390>
    e49c:	1080004c 	andi	r2,r2,1
    e4a0:	103f9e1e 	bne	r2,zero,e31c <__alt_exception_stack_pointer+0xf800e31c>
    e4a4:	adbffe17 	ldw	r22,-8(r21)
    e4a8:	00bfff04 	movi	r2,-4
    e4ac:	9dadc83a 	sub	r22,r19,r22
    e4b0:	b1800117 	ldw	r6,4(r22)
    e4b4:	3084703a 	and	r2,r6,r2
    e4b8:	20002026 	beq	r4,zero,e53c <_realloc_r+0x2cc>
    e4bc:	80af883a 	add	r23,r16,r2
    e4c0:	b96f883a 	add	r23,r23,r5
    e4c4:	21c05f26 	beq	r4,r7,e644 <_realloc_r+0x3d4>
    e4c8:	b8c01c16 	blt	r23,r3,e53c <_realloc_r+0x2cc>
    e4cc:	20800317 	ldw	r2,12(r4)
    e4d0:	20c00217 	ldw	r3,8(r4)
    e4d4:	81bfff04 	addi	r6,r16,-4
    e4d8:	01000904 	movi	r4,36
    e4dc:	18800315 	stw	r2,12(r3)
    e4e0:	10c00215 	stw	r3,8(r2)
    e4e4:	b0c00217 	ldw	r3,8(r22)
    e4e8:	b0800317 	ldw	r2,12(r22)
    e4ec:	b4800204 	addi	r18,r22,8
    e4f0:	18800315 	stw	r2,12(r3)
    e4f4:	10c00215 	stw	r3,8(r2)
    e4f8:	21801b36 	bltu	r4,r6,e568 <_realloc_r+0x2f8>
    e4fc:	008004c4 	movi	r2,19
    e500:	1180352e 	bgeu	r2,r6,e5d8 <_realloc_r+0x368>
    e504:	a8800017 	ldw	r2,0(r21)
    e508:	b0800215 	stw	r2,8(r22)
    e50c:	a8800117 	ldw	r2,4(r21)
    e510:	b0800315 	stw	r2,12(r22)
    e514:	008006c4 	movi	r2,27
    e518:	11807f36 	bltu	r2,r6,e718 <_realloc_r+0x4a8>
    e51c:	b0800404 	addi	r2,r22,16
    e520:	ad400204 	addi	r21,r21,8
    e524:	00002d06 	br	e5dc <_realloc_r+0x36c>
    e528:	adbffe17 	ldw	r22,-8(r21)
    e52c:	00bfff04 	movi	r2,-4
    e530:	9dadc83a 	sub	r22,r19,r22
    e534:	b1000117 	ldw	r4,4(r22)
    e538:	2084703a 	and	r2,r4,r2
    e53c:	b03f7726 	beq	r22,zero,e31c <__alt_exception_stack_pointer+0xf800e31c>
    e540:	80af883a 	add	r23,r16,r2
    e544:	b8ff7516 	blt	r23,r3,e31c <__alt_exception_stack_pointer+0xf800e31c>
    e548:	b0800317 	ldw	r2,12(r22)
    e54c:	b0c00217 	ldw	r3,8(r22)
    e550:	81bfff04 	addi	r6,r16,-4
    e554:	01000904 	movi	r4,36
    e558:	18800315 	stw	r2,12(r3)
    e55c:	10c00215 	stw	r3,8(r2)
    e560:	b4800204 	addi	r18,r22,8
    e564:	21bfe52e 	bgeu	r4,r6,e4fc <__alt_exception_stack_pointer+0xf800e4fc>
    e568:	a80b883a 	mov	r5,r21
    e56c:	9009883a 	mov	r4,r18
    e570:	000cf340 	call	cf34 <memmove>
    e574:	b821883a 	mov	r16,r23
    e578:	b027883a 	mov	r19,r22
    e57c:	003f8a06 	br	e3a8 <__alt_exception_stack_pointer+0xf800e3a8>
    e580:	300b883a 	mov	r5,r6
    e584:	dfc00917 	ldw	ra,36(sp)
    e588:	df000817 	ldw	fp,32(sp)
    e58c:	ddc00717 	ldw	r23,28(sp)
    e590:	dd800617 	ldw	r22,24(sp)
    e594:	dd400517 	ldw	r21,20(sp)
    e598:	dd000417 	ldw	r20,16(sp)
    e59c:	dcc00317 	ldw	r19,12(sp)
    e5a0:	dc800217 	ldw	r18,8(sp)
    e5a4:	dc400117 	ldw	r17,4(sp)
    e5a8:	dc000017 	ldw	r16,0(sp)
    e5ac:	dec00a04 	addi	sp,sp,40
    e5b0:	000719c1 	jmpi	719c <_malloc_r>
    e5b4:	a8c00017 	ldw	r3,0(r21)
    e5b8:	90c00015 	stw	r3,0(r18)
    e5bc:	a8c00117 	ldw	r3,4(r21)
    e5c0:	90c00115 	stw	r3,4(r18)
    e5c4:	00c006c4 	movi	r3,27
    e5c8:	19804536 	bltu	r3,r6,e6e0 <_realloc_r+0x470>
    e5cc:	90800204 	addi	r2,r18,8
    e5d0:	a8c00204 	addi	r3,r21,8
    e5d4:	003f6306 	br	e364 <__alt_exception_stack_pointer+0xf800e364>
    e5d8:	9005883a 	mov	r2,r18
    e5dc:	a8c00017 	ldw	r3,0(r21)
    e5e0:	b821883a 	mov	r16,r23
    e5e4:	b027883a 	mov	r19,r22
    e5e8:	10c00015 	stw	r3,0(r2)
    e5ec:	a8c00117 	ldw	r3,4(r21)
    e5f0:	10c00115 	stw	r3,4(r2)
    e5f4:	a8c00217 	ldw	r3,8(r21)
    e5f8:	10c00215 	stw	r3,8(r2)
    e5fc:	003f6a06 	br	e3a8 <__alt_exception_stack_pointer+0xf800e3a8>
    e600:	9c67883a 	add	r19,r19,r17
    e604:	4445c83a 	sub	r2,r8,r17
    e608:	e4c00215 	stw	r19,8(fp)
    e60c:	10800054 	ori	r2,r2,1
    e610:	98800115 	stw	r2,4(r19)
    e614:	a8bfff17 	ldw	r2,-4(r21)
    e618:	a009883a 	mov	r4,r20
    e61c:	1080004c 	andi	r2,r2,1
    e620:	1462b03a 	or	r17,r2,r17
    e624:	ac7fff15 	stw	r17,-4(r21)
    e628:	00129400 	call	12940 <__malloc_unlock>
    e62c:	a805883a 	mov	r2,r21
    e630:	003f6b06 	br	e3e0 <__alt_exception_stack_pointer+0xf800e3e0>
    e634:	a80b883a 	mov	r5,r21
    e638:	9009883a 	mov	r4,r18
    e63c:	000cf340 	call	cf34 <memmove>
    e640:	003f4e06 	br	e37c <__alt_exception_stack_pointer+0xf800e37c>
    e644:	89000404 	addi	r4,r17,16
    e648:	b93fbc16 	blt	r23,r4,e53c <__alt_exception_stack_pointer+0xf800e53c>
    e64c:	b0800317 	ldw	r2,12(r22)
    e650:	b0c00217 	ldw	r3,8(r22)
    e654:	81bfff04 	addi	r6,r16,-4
    e658:	01000904 	movi	r4,36
    e65c:	18800315 	stw	r2,12(r3)
    e660:	10c00215 	stw	r3,8(r2)
    e664:	b4800204 	addi	r18,r22,8
    e668:	21804336 	bltu	r4,r6,e778 <_realloc_r+0x508>
    e66c:	008004c4 	movi	r2,19
    e670:	11803f2e 	bgeu	r2,r6,e770 <_realloc_r+0x500>
    e674:	a8800017 	ldw	r2,0(r21)
    e678:	b0800215 	stw	r2,8(r22)
    e67c:	a8800117 	ldw	r2,4(r21)
    e680:	b0800315 	stw	r2,12(r22)
    e684:	008006c4 	movi	r2,27
    e688:	11803f36 	bltu	r2,r6,e788 <_realloc_r+0x518>
    e68c:	b0800404 	addi	r2,r22,16
    e690:	ad400204 	addi	r21,r21,8
    e694:	a8c00017 	ldw	r3,0(r21)
    e698:	10c00015 	stw	r3,0(r2)
    e69c:	a8c00117 	ldw	r3,4(r21)
    e6a0:	10c00115 	stw	r3,4(r2)
    e6a4:	a8c00217 	ldw	r3,8(r21)
    e6a8:	10c00215 	stw	r3,8(r2)
    e6ac:	b447883a 	add	r3,r22,r17
    e6b0:	bc45c83a 	sub	r2,r23,r17
    e6b4:	e0c00215 	stw	r3,8(fp)
    e6b8:	10800054 	ori	r2,r2,1
    e6bc:	18800115 	stw	r2,4(r3)
    e6c0:	b0800117 	ldw	r2,4(r22)
    e6c4:	a009883a 	mov	r4,r20
    e6c8:	1080004c 	andi	r2,r2,1
    e6cc:	1462b03a 	or	r17,r2,r17
    e6d0:	b4400115 	stw	r17,4(r22)
    e6d4:	00129400 	call	12940 <__malloc_unlock>
    e6d8:	9005883a 	mov	r2,r18
    e6dc:	003f4006 	br	e3e0 <__alt_exception_stack_pointer+0xf800e3e0>
    e6e0:	a8c00217 	ldw	r3,8(r21)
    e6e4:	90c00215 	stw	r3,8(r18)
    e6e8:	a8c00317 	ldw	r3,12(r21)
    e6ec:	90c00315 	stw	r3,12(r18)
    e6f0:	30801126 	beq	r6,r2,e738 <_realloc_r+0x4c8>
    e6f4:	90800404 	addi	r2,r18,16
    e6f8:	a8c00404 	addi	r3,r21,16
    e6fc:	003f1906 	br	e364 <__alt_exception_stack_pointer+0xf800e364>
    e700:	90ffff17 	ldw	r3,-4(r18)
    e704:	00bfff04 	movi	r2,-4
    e708:	a825883a 	mov	r18,r21
    e70c:	1884703a 	and	r2,r3,r2
    e710:	80a1883a 	add	r16,r16,r2
    e714:	003f2406 	br	e3a8 <__alt_exception_stack_pointer+0xf800e3a8>
    e718:	a8800217 	ldw	r2,8(r21)
    e71c:	b0800415 	stw	r2,16(r22)
    e720:	a8800317 	ldw	r2,12(r21)
    e724:	b0800515 	stw	r2,20(r22)
    e728:	31000a26 	beq	r6,r4,e754 <_realloc_r+0x4e4>
    e72c:	b0800604 	addi	r2,r22,24
    e730:	ad400404 	addi	r21,r21,16
    e734:	003fa906 	br	e5dc <__alt_exception_stack_pointer+0xf800e5dc>
    e738:	a9000417 	ldw	r4,16(r21)
    e73c:	90800604 	addi	r2,r18,24
    e740:	a8c00604 	addi	r3,r21,24
    e744:	91000415 	stw	r4,16(r18)
    e748:	a9000517 	ldw	r4,20(r21)
    e74c:	91000515 	stw	r4,20(r18)
    e750:	003f0406 	br	e364 <__alt_exception_stack_pointer+0xf800e364>
    e754:	a8c00417 	ldw	r3,16(r21)
    e758:	ad400604 	addi	r21,r21,24
    e75c:	b0800804 	addi	r2,r22,32
    e760:	b0c00615 	stw	r3,24(r22)
    e764:	a8ffff17 	ldw	r3,-4(r21)
    e768:	b0c00715 	stw	r3,28(r22)
    e76c:	003f9b06 	br	e5dc <__alt_exception_stack_pointer+0xf800e5dc>
    e770:	9005883a 	mov	r2,r18
    e774:	003fc706 	br	e694 <__alt_exception_stack_pointer+0xf800e694>
    e778:	a80b883a 	mov	r5,r21
    e77c:	9009883a 	mov	r4,r18
    e780:	000cf340 	call	cf34 <memmove>
    e784:	003fc906 	br	e6ac <__alt_exception_stack_pointer+0xf800e6ac>
    e788:	a8800217 	ldw	r2,8(r21)
    e78c:	b0800415 	stw	r2,16(r22)
    e790:	a8800317 	ldw	r2,12(r21)
    e794:	b0800515 	stw	r2,20(r22)
    e798:	31000726 	beq	r6,r4,e7b8 <_realloc_r+0x548>
    e79c:	b0800604 	addi	r2,r22,24
    e7a0:	ad400404 	addi	r21,r21,16
    e7a4:	003fbb06 	br	e694 <__alt_exception_stack_pointer+0xf800e694>
    e7a8:	a009883a 	mov	r4,r20
    e7ac:	00129400 	call	12940 <__malloc_unlock>
    e7b0:	0005883a 	mov	r2,zero
    e7b4:	003f0a06 	br	e3e0 <__alt_exception_stack_pointer+0xf800e3e0>
    e7b8:	a8c00417 	ldw	r3,16(r21)
    e7bc:	ad400604 	addi	r21,r21,24
    e7c0:	b0800804 	addi	r2,r22,32
    e7c4:	b0c00615 	stw	r3,24(r22)
    e7c8:	a8ffff17 	ldw	r3,-4(r21)
    e7cc:	b0c00715 	stw	r3,28(r22)
    e7d0:	003fb006 	br	e694 <__alt_exception_stack_pointer+0xf800e694>

0000e7d4 <__fpclassifyd>:
    e7d4:	00a00034 	movhi	r2,32768
    e7d8:	10bfffc4 	addi	r2,r2,-1
    e7dc:	2884703a 	and	r2,r5,r2
    e7e0:	10000726 	beq	r2,zero,e800 <__fpclassifyd+0x2c>
    e7e4:	00fffc34 	movhi	r3,65520
    e7e8:	019ff834 	movhi	r6,32736
    e7ec:	28c7883a 	add	r3,r5,r3
    e7f0:	31bfffc4 	addi	r6,r6,-1
    e7f4:	30c00536 	bltu	r6,r3,e80c <__fpclassifyd+0x38>
    e7f8:	00800104 	movi	r2,4
    e7fc:	f800283a 	ret
    e800:	2000021e 	bne	r4,zero,e80c <__fpclassifyd+0x38>
    e804:	00800084 	movi	r2,2
    e808:	f800283a 	ret
    e80c:	00dffc34 	movhi	r3,32752
    e810:	019ff834 	movhi	r6,32736
    e814:	28cb883a 	add	r5,r5,r3
    e818:	31bfffc4 	addi	r6,r6,-1
    e81c:	317ff62e 	bgeu	r6,r5,e7f8 <__alt_exception_stack_pointer+0xf800e7f8>
    e820:	01400434 	movhi	r5,16
    e824:	297fffc4 	addi	r5,r5,-1
    e828:	28800236 	bltu	r5,r2,e834 <__fpclassifyd+0x60>
    e82c:	008000c4 	movi	r2,3
    e830:	f800283a 	ret
    e834:	10c00226 	beq	r2,r3,e840 <__fpclassifyd+0x6c>
    e838:	0005883a 	mov	r2,zero
    e83c:	f800283a 	ret
    e840:	2005003a 	cmpeq	r2,r4,zero
    e844:	f800283a 	ret

0000e848 <__sread>:
    e848:	defffe04 	addi	sp,sp,-8
    e84c:	dc000015 	stw	r16,0(sp)
    e850:	2821883a 	mov	r16,r5
    e854:	2940038f 	ldh	r5,14(r5)
    e858:	dfc00115 	stw	ra,4(sp)
    e85c:	00107040 	call	10704 <_read_r>
    e860:	10000716 	blt	r2,zero,e880 <__sread+0x38>
    e864:	80c01417 	ldw	r3,80(r16)
    e868:	1887883a 	add	r3,r3,r2
    e86c:	80c01415 	stw	r3,80(r16)
    e870:	dfc00117 	ldw	ra,4(sp)
    e874:	dc000017 	ldw	r16,0(sp)
    e878:	dec00204 	addi	sp,sp,8
    e87c:	f800283a 	ret
    e880:	80c0030b 	ldhu	r3,12(r16)
    e884:	18fbffcc 	andi	r3,r3,61439
    e888:	80c0030d 	sth	r3,12(r16)
    e88c:	dfc00117 	ldw	ra,4(sp)
    e890:	dc000017 	ldw	r16,0(sp)
    e894:	dec00204 	addi	sp,sp,8
    e898:	f800283a 	ret

0000e89c <__seofread>:
    e89c:	0005883a 	mov	r2,zero
    e8a0:	f800283a 	ret

0000e8a4 <__swrite>:
    e8a4:	2880030b 	ldhu	r2,12(r5)
    e8a8:	defffb04 	addi	sp,sp,-20
    e8ac:	dcc00315 	stw	r19,12(sp)
    e8b0:	dc800215 	stw	r18,8(sp)
    e8b4:	dc400115 	stw	r17,4(sp)
    e8b8:	dc000015 	stw	r16,0(sp)
    e8bc:	dfc00415 	stw	ra,16(sp)
    e8c0:	10c0400c 	andi	r3,r2,256
    e8c4:	2821883a 	mov	r16,r5
    e8c8:	2023883a 	mov	r17,r4
    e8cc:	3025883a 	mov	r18,r6
    e8d0:	3827883a 	mov	r19,r7
    e8d4:	18000526 	beq	r3,zero,e8ec <__swrite+0x48>
    e8d8:	2940038f 	ldh	r5,14(r5)
    e8dc:	01c00084 	movi	r7,2
    e8e0:	000d883a 	mov	r6,zero
    e8e4:	00106a40 	call	106a4 <_lseek_r>
    e8e8:	8080030b 	ldhu	r2,12(r16)
    e8ec:	8140038f 	ldh	r5,14(r16)
    e8f0:	10bbffcc 	andi	r2,r2,61439
    e8f4:	980f883a 	mov	r7,r19
    e8f8:	900d883a 	mov	r6,r18
    e8fc:	8809883a 	mov	r4,r17
    e900:	8080030d 	sth	r2,12(r16)
    e904:	dfc00417 	ldw	ra,16(sp)
    e908:	dcc00317 	ldw	r19,12(sp)
    e90c:	dc800217 	ldw	r18,8(sp)
    e910:	dc400117 	ldw	r17,4(sp)
    e914:	dc000017 	ldw	r16,0(sp)
    e918:	dec00504 	addi	sp,sp,20
    e91c:	00101581 	jmpi	10158 <_write_r>

0000e920 <__sseek>:
    e920:	defffe04 	addi	sp,sp,-8
    e924:	dc000015 	stw	r16,0(sp)
    e928:	2821883a 	mov	r16,r5
    e92c:	2940038f 	ldh	r5,14(r5)
    e930:	dfc00115 	stw	ra,4(sp)
    e934:	00106a40 	call	106a4 <_lseek_r>
    e938:	00ffffc4 	movi	r3,-1
    e93c:	10c00826 	beq	r2,r3,e960 <__sseek+0x40>
    e940:	80c0030b 	ldhu	r3,12(r16)
    e944:	80801415 	stw	r2,80(r16)
    e948:	18c40014 	ori	r3,r3,4096
    e94c:	80c0030d 	sth	r3,12(r16)
    e950:	dfc00117 	ldw	ra,4(sp)
    e954:	dc000017 	ldw	r16,0(sp)
    e958:	dec00204 	addi	sp,sp,8
    e95c:	f800283a 	ret
    e960:	80c0030b 	ldhu	r3,12(r16)
    e964:	18fbffcc 	andi	r3,r3,61439
    e968:	80c0030d 	sth	r3,12(r16)
    e96c:	dfc00117 	ldw	ra,4(sp)
    e970:	dc000017 	ldw	r16,0(sp)
    e974:	dec00204 	addi	sp,sp,8
    e978:	f800283a 	ret

0000e97c <__sclose>:
    e97c:	2940038f 	ldh	r5,14(r5)
    e980:	00101b81 	jmpi	101b8 <_close_r>

0000e984 <strcmp>:
    e984:	2144b03a 	or	r2,r4,r5
    e988:	108000cc 	andi	r2,r2,3
    e98c:	1000171e 	bne	r2,zero,e9ec <strcmp+0x68>
    e990:	20800017 	ldw	r2,0(r4)
    e994:	28c00017 	ldw	r3,0(r5)
    e998:	10c0141e 	bne	r2,r3,e9ec <strcmp+0x68>
    e99c:	027fbff4 	movhi	r9,65279
    e9a0:	4a7fbfc4 	addi	r9,r9,-257
    e9a4:	0086303a 	nor	r3,zero,r2
    e9a8:	02202074 	movhi	r8,32897
    e9ac:	1245883a 	add	r2,r2,r9
    e9b0:	42202004 	addi	r8,r8,-32640
    e9b4:	10c4703a 	and	r2,r2,r3
    e9b8:	1204703a 	and	r2,r2,r8
    e9bc:	10000226 	beq	r2,zero,e9c8 <strcmp+0x44>
    e9c0:	00002306 	br	ea50 <strcmp+0xcc>
    e9c4:	1000221e 	bne	r2,zero,ea50 <strcmp+0xcc>
    e9c8:	21000104 	addi	r4,r4,4
    e9cc:	20c00017 	ldw	r3,0(r4)
    e9d0:	29400104 	addi	r5,r5,4
    e9d4:	29800017 	ldw	r6,0(r5)
    e9d8:	1a4f883a 	add	r7,r3,r9
    e9dc:	00c4303a 	nor	r2,zero,r3
    e9e0:	3884703a 	and	r2,r7,r2
    e9e4:	1204703a 	and	r2,r2,r8
    e9e8:	19bff626 	beq	r3,r6,e9c4 <__alt_exception_stack_pointer+0xf800e9c4>
    e9ec:	20800003 	ldbu	r2,0(r4)
    e9f0:	10c03fcc 	andi	r3,r2,255
    e9f4:	18c0201c 	xori	r3,r3,128
    e9f8:	18ffe004 	addi	r3,r3,-128
    e9fc:	18000c26 	beq	r3,zero,ea30 <strcmp+0xac>
    ea00:	29800007 	ldb	r6,0(r5)
    ea04:	19800326 	beq	r3,r6,ea14 <strcmp+0x90>
    ea08:	00001306 	br	ea58 <strcmp+0xd4>
    ea0c:	29800007 	ldb	r6,0(r5)
    ea10:	11800b1e 	bne	r2,r6,ea40 <strcmp+0xbc>
    ea14:	21000044 	addi	r4,r4,1
    ea18:	20c00003 	ldbu	r3,0(r4)
    ea1c:	29400044 	addi	r5,r5,1
    ea20:	18803fcc 	andi	r2,r3,255
    ea24:	1080201c 	xori	r2,r2,128
    ea28:	10bfe004 	addi	r2,r2,-128
    ea2c:	103ff71e 	bne	r2,zero,ea0c <__alt_exception_stack_pointer+0xf800ea0c>
    ea30:	0007883a 	mov	r3,zero
    ea34:	28800003 	ldbu	r2,0(r5)
    ea38:	1885c83a 	sub	r2,r3,r2
    ea3c:	f800283a 	ret
    ea40:	28800003 	ldbu	r2,0(r5)
    ea44:	18c03fcc 	andi	r3,r3,255
    ea48:	1885c83a 	sub	r2,r3,r2
    ea4c:	f800283a 	ret
    ea50:	0005883a 	mov	r2,zero
    ea54:	f800283a 	ret
    ea58:	10c03fcc 	andi	r3,r2,255
    ea5c:	003ff506 	br	ea34 <__alt_exception_stack_pointer+0xf800ea34>

0000ea60 <__sprint_r.part.0>:
    ea60:	28801917 	ldw	r2,100(r5)
    ea64:	defff604 	addi	sp,sp,-40
    ea68:	dd400515 	stw	r21,20(sp)
    ea6c:	dfc00915 	stw	ra,36(sp)
    ea70:	df000815 	stw	fp,32(sp)
    ea74:	ddc00715 	stw	r23,28(sp)
    ea78:	dd800615 	stw	r22,24(sp)
    ea7c:	dd000415 	stw	r20,16(sp)
    ea80:	dcc00315 	stw	r19,12(sp)
    ea84:	dc800215 	stw	r18,8(sp)
    ea88:	dc400115 	stw	r17,4(sp)
    ea8c:	dc000015 	stw	r16,0(sp)
    ea90:	1088000c 	andi	r2,r2,8192
    ea94:	302b883a 	mov	r21,r6
    ea98:	10002e26 	beq	r2,zero,eb54 <__sprint_r.part.0+0xf4>
    ea9c:	30800217 	ldw	r2,8(r6)
    eaa0:	35800017 	ldw	r22,0(r6)
    eaa4:	10002926 	beq	r2,zero,eb4c <__sprint_r.part.0+0xec>
    eaa8:	2827883a 	mov	r19,r5
    eaac:	2029883a 	mov	r20,r4
    eab0:	b5c00104 	addi	r23,r22,4
    eab4:	04bfffc4 	movi	r18,-1
    eab8:	bc400017 	ldw	r17,0(r23)
    eabc:	b4000017 	ldw	r16,0(r22)
    eac0:	0039883a 	mov	fp,zero
    eac4:	8822d0ba 	srli	r17,r17,2
    eac8:	8800031e 	bne	r17,zero,ead8 <__sprint_r.part.0+0x78>
    eacc:	00001806 	br	eb30 <__sprint_r.part.0+0xd0>
    ead0:	84000104 	addi	r16,r16,4
    ead4:	8f001526 	beq	r17,fp,eb2c <__sprint_r.part.0+0xcc>
    ead8:	81400017 	ldw	r5,0(r16)
    eadc:	980d883a 	mov	r6,r19
    eae0:	a009883a 	mov	r4,r20
    eae4:	00105500 	call	10550 <_fputwc_r>
    eae8:	e7000044 	addi	fp,fp,1
    eaec:	14bff81e 	bne	r2,r18,ead0 <__alt_exception_stack_pointer+0xf800ead0>
    eaf0:	9005883a 	mov	r2,r18
    eaf4:	a8000215 	stw	zero,8(r21)
    eaf8:	a8000115 	stw	zero,4(r21)
    eafc:	dfc00917 	ldw	ra,36(sp)
    eb00:	df000817 	ldw	fp,32(sp)
    eb04:	ddc00717 	ldw	r23,28(sp)
    eb08:	dd800617 	ldw	r22,24(sp)
    eb0c:	dd400517 	ldw	r21,20(sp)
    eb10:	dd000417 	ldw	r20,16(sp)
    eb14:	dcc00317 	ldw	r19,12(sp)
    eb18:	dc800217 	ldw	r18,8(sp)
    eb1c:	dc400117 	ldw	r17,4(sp)
    eb20:	dc000017 	ldw	r16,0(sp)
    eb24:	dec00a04 	addi	sp,sp,40
    eb28:	f800283a 	ret
    eb2c:	a8800217 	ldw	r2,8(r21)
    eb30:	8c63883a 	add	r17,r17,r17
    eb34:	8c63883a 	add	r17,r17,r17
    eb38:	1445c83a 	sub	r2,r2,r17
    eb3c:	a8800215 	stw	r2,8(r21)
    eb40:	b5800204 	addi	r22,r22,8
    eb44:	bdc00204 	addi	r23,r23,8
    eb48:	103fdb1e 	bne	r2,zero,eab8 <__alt_exception_stack_pointer+0xf800eab8>
    eb4c:	0005883a 	mov	r2,zero
    eb50:	003fe806 	br	eaf4 <__alt_exception_stack_pointer+0xf800eaf4>
    eb54:	000c4200 	call	c420 <__sfvwrite_r>
    eb58:	003fe606 	br	eaf4 <__alt_exception_stack_pointer+0xf800eaf4>

0000eb5c <__sprint_r>:
    eb5c:	30c00217 	ldw	r3,8(r6)
    eb60:	18000126 	beq	r3,zero,eb68 <__sprint_r+0xc>
    eb64:	000ea601 	jmpi	ea60 <__sprint_r.part.0>
    eb68:	30000115 	stw	zero,4(r6)
    eb6c:	0005883a 	mov	r2,zero
    eb70:	f800283a 	ret

0000eb74 <___vfiprintf_internal_r>:
    eb74:	deffca04 	addi	sp,sp,-216
    eb78:	dd403115 	stw	r21,196(sp)
    eb7c:	dfc03515 	stw	ra,212(sp)
    eb80:	df003415 	stw	fp,208(sp)
    eb84:	ddc03315 	stw	r23,204(sp)
    eb88:	dd803215 	stw	r22,200(sp)
    eb8c:	dd003015 	stw	r20,192(sp)
    eb90:	dcc02f15 	stw	r19,188(sp)
    eb94:	dc802e15 	stw	r18,184(sp)
    eb98:	dc402d15 	stw	r17,180(sp)
    eb9c:	dc002c15 	stw	r16,176(sp)
    eba0:	d9002115 	stw	r4,132(sp)
    eba4:	d9402015 	stw	r5,128(sp)
    eba8:	d9c02215 	stw	r7,136(sp)
    ebac:	302b883a 	mov	r21,r6
    ebb0:	20000226 	beq	r4,zero,ebbc <___vfiprintf_internal_r+0x48>
    ebb4:	20800e17 	ldw	r2,56(r4)
    ebb8:	1000cf26 	beq	r2,zero,eef8 <___vfiprintf_internal_r+0x384>
    ebbc:	d8c02017 	ldw	r3,128(sp)
    ebc0:	1880030b 	ldhu	r2,12(r3)
    ebc4:	10c8000c 	andi	r3,r2,8192
    ebc8:	1800071e 	bne	r3,zero,ebe8 <___vfiprintf_internal_r+0x74>
    ebcc:	d9402017 	ldw	r5,128(sp)
    ebd0:	00f7ffc4 	movi	r3,-8193
    ebd4:	10880014 	ori	r2,r2,8192
    ebd8:	29001917 	ldw	r4,100(r5)
    ebdc:	2880030d 	sth	r2,12(r5)
    ebe0:	20c6703a 	and	r3,r4,r3
    ebe4:	28c01915 	stw	r3,100(r5)
    ebe8:	10c0020c 	andi	r3,r2,8
    ebec:	1800a526 	beq	r3,zero,ee84 <___vfiprintf_internal_r+0x310>
    ebf0:	d9002017 	ldw	r4,128(sp)
    ebf4:	20c00417 	ldw	r3,16(r4)
    ebf8:	1800a226 	beq	r3,zero,ee84 <___vfiprintf_internal_r+0x310>
    ebfc:	1080068c 	andi	r2,r2,26
    ec00:	00c00284 	movi	r3,10
    ec04:	10c0a826 	beq	r2,r3,eea8 <___vfiprintf_internal_r+0x334>
    ec08:	d9001a04 	addi	r4,sp,104
    ec0c:	d94019c4 	addi	r5,sp,103
    ec10:	04800074 	movhi	r18,1
    ec14:	2145c83a 	sub	r2,r4,r5
    ec18:	949a3a04 	addi	r18,r18,26856
    ec1c:	d9001e15 	stw	r4,120(sp)
    ec20:	d9401f15 	stw	r5,124(sp)
    ec24:	dec01a15 	stw	sp,104(sp)
    ec28:	d8001c15 	stw	zero,112(sp)
    ec2c:	d8001b15 	stw	zero,108(sp)
    ec30:	d811883a 	mov	r8,sp
    ec34:	d8002615 	stw	zero,152(sp)
    ec38:	d8002415 	stw	zero,144(sp)
    ec3c:	d8802815 	stw	r2,160(sp)
    ec40:	a82d883a 	mov	r22,r21
    ec44:	b0800007 	ldb	r2,0(r22)
    ec48:	10040d26 	beq	r2,zero,fc80 <___vfiprintf_internal_r+0x110c>
    ec4c:	00c00944 	movi	r3,37
    ec50:	b029883a 	mov	r20,r22
    ec54:	10c0021e 	bne	r2,r3,ec60 <___vfiprintf_internal_r+0xec>
    ec58:	00001606 	br	ecb4 <___vfiprintf_internal_r+0x140>
    ec5c:	10c00326 	beq	r2,r3,ec6c <___vfiprintf_internal_r+0xf8>
    ec60:	a5000044 	addi	r20,r20,1
    ec64:	a0800007 	ldb	r2,0(r20)
    ec68:	103ffc1e 	bne	r2,zero,ec5c <__alt_exception_stack_pointer+0xf800ec5c>
    ec6c:	a5a1c83a 	sub	r16,r20,r22
    ec70:	80001026 	beq	r16,zero,ecb4 <___vfiprintf_internal_r+0x140>
    ec74:	d8c01c17 	ldw	r3,112(sp)
    ec78:	d8801b17 	ldw	r2,108(sp)
    ec7c:	45800015 	stw	r22,0(r8)
    ec80:	80c7883a 	add	r3,r16,r3
    ec84:	10800044 	addi	r2,r2,1
    ec88:	44000115 	stw	r16,4(r8)
    ec8c:	d8c01c15 	stw	r3,112(sp)
    ec90:	d8801b15 	stw	r2,108(sp)
    ec94:	010001c4 	movi	r4,7
    ec98:	2080750e 	bge	r4,r2,ee70 <___vfiprintf_internal_r+0x2fc>
    ec9c:	1803951e 	bne	r3,zero,faf4 <___vfiprintf_internal_r+0xf80>
    eca0:	d8c02417 	ldw	r3,144(sp)
    eca4:	d8001b15 	stw	zero,108(sp)
    eca8:	d811883a 	mov	r8,sp
    ecac:	1c07883a 	add	r3,r3,r16
    ecb0:	d8c02415 	stw	r3,144(sp)
    ecb4:	a0800007 	ldb	r2,0(r20)
    ecb8:	1002e026 	beq	r2,zero,f83c <___vfiprintf_internal_r+0xcc8>
    ecbc:	a5800044 	addi	r22,r20,1
    ecc0:	a0c00047 	ldb	r3,1(r20)
    ecc4:	d8001d85 	stb	zero,118(sp)
    ecc8:	0027883a 	mov	r19,zero
    eccc:	d8002305 	stb	zero,140(sp)
    ecd0:	043fffc4 	movi	r16,-1
    ecd4:	d8002515 	stw	zero,148(sp)
    ecd8:	0023883a 	mov	r17,zero
    ecdc:	05001604 	movi	r20,88
    ece0:	05400244 	movi	r21,9
    ece4:	402f883a 	mov	r23,r8
    ece8:	b5800044 	addi	r22,r22,1
    ecec:	18bff804 	addi	r2,r3,-32
    ecf0:	a0827736 	bltu	r20,r2,f6d0 <___vfiprintf_internal_r+0xb5c>
    ecf4:	100490ba 	slli	r2,r2,2
    ecf8:	01000074 	movhi	r4,1
    ecfc:	213b4304 	addi	r4,r4,-4852
    ed00:	1105883a 	add	r2,r2,r4
    ed04:	10800017 	ldw	r2,0(r2)
    ed08:	1000683a 	jmp	r2
    ed0c:	0000f3d0 	cmplti	zero,zero,975
    ed10:	0000f6d0 	cmplti	zero,zero,987
    ed14:	0000f6d0 	cmplti	zero,zero,987
    ed18:	0000f3ec 	andhi	zero,zero,975
    ed1c:	0000f6d0 	cmplti	zero,zero,987
    ed20:	0000f6d0 	cmplti	zero,zero,987
    ed24:	0000f6d0 	cmplti	zero,zero,987
    ed28:	0000f6d0 	cmplti	zero,zero,987
    ed2c:	0000f6d0 	cmplti	zero,zero,987
    ed30:	0000f6d0 	cmplti	zero,zero,987
    ed34:	0000f5f4 	movhi	zero,983
    ed38:	0000f618 	cmpnei	zero,zero,984
    ed3c:	0000f6d0 	cmplti	zero,zero,987
    ed40:	0000ef10 	cmplti	zero,zero,956
    ed44:	0000f62c 	andhi	zero,zero,984
    ed48:	0000f6d0 	cmplti	zero,zero,987
    ed4c:	0000f3f8 	rdprs	zero,zero,975
    ed50:	0000f404 	movi	zero,976
    ed54:	0000f404 	movi	zero,976
    ed58:	0000f404 	movi	zero,976
    ed5c:	0000f404 	movi	zero,976
    ed60:	0000f404 	movi	zero,976
    ed64:	0000f404 	movi	zero,976
    ed68:	0000f404 	movi	zero,976
    ed6c:	0000f404 	movi	zero,976
    ed70:	0000f404 	movi	zero,976
    ed74:	0000f6d0 	cmplti	zero,zero,987
    ed78:	0000f6d0 	cmplti	zero,zero,987
    ed7c:	0000f6d0 	cmplti	zero,zero,987
    ed80:	0000f6d0 	cmplti	zero,zero,987
    ed84:	0000f6d0 	cmplti	zero,zero,987
    ed88:	0000f6d0 	cmplti	zero,zero,987
    ed8c:	0000f6d0 	cmplti	zero,zero,987
    ed90:	0000f6d0 	cmplti	zero,zero,987
    ed94:	0000f6d0 	cmplti	zero,zero,987
    ed98:	0000f6d0 	cmplti	zero,zero,987
    ed9c:	0000f444 	movi	zero,977
    eda0:	0000f6d0 	cmplti	zero,zero,987
    eda4:	0000f6d0 	cmplti	zero,zero,987
    eda8:	0000f6d0 	cmplti	zero,zero,987
    edac:	0000f6d0 	cmplti	zero,zero,987
    edb0:	0000f6d0 	cmplti	zero,zero,987
    edb4:	0000f6d0 	cmplti	zero,zero,987
    edb8:	0000f6d0 	cmplti	zero,zero,987
    edbc:	0000f6d0 	cmplti	zero,zero,987
    edc0:	0000f6d0 	cmplti	zero,zero,987
    edc4:	0000f6d0 	cmplti	zero,zero,987
    edc8:	0000f480 	call	f48 <init_keyboard+0x818>
    edcc:	0000f6d0 	cmplti	zero,zero,987
    edd0:	0000f6d0 	cmplti	zero,zero,987
    edd4:	0000f6d0 	cmplti	zero,zero,987
    edd8:	0000f6d0 	cmplti	zero,zero,987
    eddc:	0000f6d0 	cmplti	zero,zero,987
    ede0:	0000f4dc 	xori	zero,zero,979
    ede4:	0000f6d0 	cmplti	zero,zero,987
    ede8:	0000f6d0 	cmplti	zero,zero,987
    edec:	0000f550 	cmplti	zero,zero,981
    edf0:	0000f6d0 	cmplti	zero,zero,987
    edf4:	0000f6d0 	cmplti	zero,zero,987
    edf8:	0000f6d0 	cmplti	zero,zero,987
    edfc:	0000f6d0 	cmplti	zero,zero,987
    ee00:	0000f6d0 	cmplti	zero,zero,987
    ee04:	0000f6d0 	cmplti	zero,zero,987
    ee08:	0000f6d0 	cmplti	zero,zero,987
    ee0c:	0000f6d0 	cmplti	zero,zero,987
    ee10:	0000f6d0 	cmplti	zero,zero,987
    ee14:	0000f6d0 	cmplti	zero,zero,987
    ee18:	0000f2f8 	rdprs	zero,zero,971
    ee1c:	0000f328 	cmpgeui	zero,zero,972
    ee20:	0000f6d0 	cmplti	zero,zero,987
    ee24:	0000f6d0 	cmplti	zero,zero,987
    ee28:	0000f6d0 	cmplti	zero,zero,987
    ee2c:	0000f678 	rdprs	zero,zero,985
    ee30:	0000f328 	cmpgeui	zero,zero,972
    ee34:	0000f6d0 	cmplti	zero,zero,987
    ee38:	0000f6d0 	cmplti	zero,zero,987
    ee3c:	0000f1d0 	cmplti	zero,zero,967
    ee40:	0000f6d0 	cmplti	zero,zero,987
    ee44:	0000f1e4 	muli	zero,zero,967
    ee48:	0000f21c 	xori	zero,zero,968
    ee4c:	0000ef1c 	xori	zero,zero,956
    ee50:	0000f1c4 	movi	zero,967
    ee54:	0000f6d0 	cmplti	zero,zero,987
    ee58:	0000f590 	cmplti	zero,zero,982
    ee5c:	0000f6d0 	cmplti	zero,zero,987
    ee60:	0000f5dc 	xori	zero,zero,983
    ee64:	0000f6d0 	cmplti	zero,zero,987
    ee68:	0000f6d0 	cmplti	zero,zero,987
    ee6c:	0000f2a0 	cmpeqi	zero,zero,970
    ee70:	42000204 	addi	r8,r8,8
    ee74:	d8c02417 	ldw	r3,144(sp)
    ee78:	1c07883a 	add	r3,r3,r16
    ee7c:	d8c02415 	stw	r3,144(sp)
    ee80:	003f8c06 	br	ecb4 <__alt_exception_stack_pointer+0xf800ecb4>
    ee84:	d9402017 	ldw	r5,128(sp)
    ee88:	d9002117 	ldw	r4,132(sp)
    ee8c:	0009f900 	call	9f90 <__swsetup_r>
    ee90:	1003c11e 	bne	r2,zero,fd98 <___vfiprintf_internal_r+0x1224>
    ee94:	d9402017 	ldw	r5,128(sp)
    ee98:	00c00284 	movi	r3,10
    ee9c:	2880030b 	ldhu	r2,12(r5)
    eea0:	1080068c 	andi	r2,r2,26
    eea4:	10ff581e 	bne	r2,r3,ec08 <__alt_exception_stack_pointer+0xf800ec08>
    eea8:	d8c02017 	ldw	r3,128(sp)
    eeac:	1880038f 	ldh	r2,14(r3)
    eeb0:	103f5516 	blt	r2,zero,ec08 <__alt_exception_stack_pointer+0xf800ec08>
    eeb4:	d9c02217 	ldw	r7,136(sp)
    eeb8:	d9002117 	ldw	r4,132(sp)
    eebc:	a80d883a 	mov	r6,r21
    eec0:	180b883a 	mov	r5,r3
    eec4:	001009c0 	call	1009c <__sbprintf>
    eec8:	dfc03517 	ldw	ra,212(sp)
    eecc:	df003417 	ldw	fp,208(sp)
    eed0:	ddc03317 	ldw	r23,204(sp)
    eed4:	dd803217 	ldw	r22,200(sp)
    eed8:	dd403117 	ldw	r21,196(sp)
    eedc:	dd003017 	ldw	r20,192(sp)
    eee0:	dcc02f17 	ldw	r19,188(sp)
    eee4:	dc802e17 	ldw	r18,184(sp)
    eee8:	dc402d17 	ldw	r17,180(sp)
    eeec:	dc002c17 	ldw	r16,176(sp)
    eef0:	dec03604 	addi	sp,sp,216
    eef4:	f800283a 	ret
    eef8:	000bf9c0 	call	bf9c <__sinit>
    eefc:	003f2f06 	br	ebbc <__alt_exception_stack_pointer+0xf800ebbc>
    ef00:	d8c02517 	ldw	r3,148(sp)
    ef04:	d8802215 	stw	r2,136(sp)
    ef08:	00c7c83a 	sub	r3,zero,r3
    ef0c:	d8c02515 	stw	r3,148(sp)
    ef10:	8c400114 	ori	r17,r17,4
    ef14:	b0c00007 	ldb	r3,0(r22)
    ef18:	003f7306 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ef1c:	00800c04 	movi	r2,48
    ef20:	d9402217 	ldw	r5,136(sp)
    ef24:	d8801d05 	stb	r2,116(sp)
    ef28:	00801e04 	movi	r2,120
    ef2c:	d8801d45 	stb	r2,117(sp)
    ef30:	d8001d85 	stb	zero,118(sp)
    ef34:	b811883a 	mov	r8,r23
    ef38:	28c00104 	addi	r3,r5,4
    ef3c:	2cc00017 	ldw	r19,0(r5)
    ef40:	0029883a 	mov	r20,zero
    ef44:	88800094 	ori	r2,r17,2
    ef48:	80032516 	blt	r16,zero,fbe0 <___vfiprintf_internal_r+0x106c>
    ef4c:	00bfdfc4 	movi	r2,-129
    ef50:	88a2703a 	and	r17,r17,r2
    ef54:	d8c02215 	stw	r3,136(sp)
    ef58:	8c400094 	ori	r17,r17,2
    ef5c:	98032a1e 	bne	r19,zero,fc08 <___vfiprintf_internal_r+0x1094>
    ef60:	00800074 	movhi	r2,1
    ef64:	1099da04 	addi	r2,r2,26472
    ef68:	d8802615 	stw	r2,152(sp)
    ef6c:	002b883a 	mov	r21,zero
    ef70:	8001741e 	bne	r16,zero,f544 <___vfiprintf_internal_r+0x9d0>
    ef74:	0021883a 	mov	r16,zero
    ef78:	0029883a 	mov	r20,zero
    ef7c:	ddc01a04 	addi	r23,sp,104
    ef80:	8027883a 	mov	r19,r16
    ef84:	8500010e 	bge	r16,r20,ef8c <___vfiprintf_internal_r+0x418>
    ef88:	a027883a 	mov	r19,r20
    ef8c:	ad403fcc 	andi	r21,r21,255
    ef90:	ad40201c 	xori	r21,r21,128
    ef94:	ad7fe004 	addi	r21,r21,-128
    ef98:	a8000126 	beq	r21,zero,efa0 <___vfiprintf_internal_r+0x42c>
    ef9c:	9cc00044 	addi	r19,r19,1
    efa0:	89c0008c 	andi	r7,r17,2
    efa4:	38000126 	beq	r7,zero,efac <___vfiprintf_internal_r+0x438>
    efa8:	9cc00084 	addi	r19,r19,2
    efac:	88c0210c 	andi	r3,r17,132
    efb0:	1801dd1e 	bne	r3,zero,f728 <___vfiprintf_internal_r+0xbb4>
    efb4:	d9402517 	ldw	r5,148(sp)
    efb8:	2cebc83a 	sub	r21,r5,r19
    efbc:	0541da0e 	bge	zero,r21,f728 <___vfiprintf_internal_r+0xbb4>
    efc0:	07000404 	movi	fp,16
    efc4:	d8801c17 	ldw	r2,112(sp)
    efc8:	e543be0e 	bge	fp,r21,fec4 <___vfiprintf_internal_r+0x1350>
    efcc:	01400074 	movhi	r5,1
    efd0:	295a3e04 	addi	r5,r5,26872
    efd4:	dc002715 	stw	r16,156(sp)
    efd8:	d9801b17 	ldw	r6,108(sp)
    efdc:	a821883a 	mov	r16,r21
    efe0:	d9402315 	stw	r5,140(sp)
    efe4:	028001c4 	movi	r10,7
    efe8:	d9c02915 	stw	r7,164(sp)
    efec:	182b883a 	mov	r21,r3
    eff0:	00000506 	br	f008 <___vfiprintf_internal_r+0x494>
    eff4:	31000084 	addi	r4,r6,2
    eff8:	42000204 	addi	r8,r8,8
    effc:	180d883a 	mov	r6,r3
    f000:	843ffc04 	addi	r16,r16,-16
    f004:	e4000f0e 	bge	fp,r16,f044 <___vfiprintf_internal_r+0x4d0>
    f008:	01000074 	movhi	r4,1
    f00c:	10800404 	addi	r2,r2,16
    f010:	30c00044 	addi	r3,r6,1
    f014:	211a3e04 	addi	r4,r4,26872
    f018:	41000015 	stw	r4,0(r8)
    f01c:	47000115 	stw	fp,4(r8)
    f020:	d8801c15 	stw	r2,112(sp)
    f024:	d8c01b15 	stw	r3,108(sp)
    f028:	50fff20e 	bge	r10,r3,eff4 <__alt_exception_stack_pointer+0xf800eff4>
    f02c:	1001b21e 	bne	r2,zero,f6f8 <___vfiprintf_internal_r+0xb84>
    f030:	843ffc04 	addi	r16,r16,-16
    f034:	000d883a 	mov	r6,zero
    f038:	01000044 	movi	r4,1
    f03c:	d811883a 	mov	r8,sp
    f040:	e43ff116 	blt	fp,r16,f008 <__alt_exception_stack_pointer+0xf800f008>
    f044:	a807883a 	mov	r3,r21
    f048:	d9c02917 	ldw	r7,164(sp)
    f04c:	802b883a 	mov	r21,r16
    f050:	dc002717 	ldw	r16,156(sp)
    f054:	d9402317 	ldw	r5,140(sp)
    f058:	a885883a 	add	r2,r21,r2
    f05c:	45400115 	stw	r21,4(r8)
    f060:	41400015 	stw	r5,0(r8)
    f064:	d8801c15 	stw	r2,112(sp)
    f068:	d9001b15 	stw	r4,108(sp)
    f06c:	014001c4 	movi	r5,7
    f070:	29026216 	blt	r5,r4,f9fc <___vfiprintf_internal_r+0xe88>
    f074:	d9801d87 	ldb	r6,118(sp)
    f078:	42000204 	addi	r8,r8,8
    f07c:	21400044 	addi	r5,r4,1
    f080:	3001ae1e 	bne	r6,zero,f73c <___vfiprintf_internal_r+0xbc8>
    f084:	3801bb26 	beq	r7,zero,f774 <___vfiprintf_internal_r+0xc00>
    f088:	d9001d04 	addi	r4,sp,116
    f08c:	10800084 	addi	r2,r2,2
    f090:	41000015 	stw	r4,0(r8)
    f094:	01000084 	movi	r4,2
    f098:	41000115 	stw	r4,4(r8)
    f09c:	d8801c15 	stw	r2,112(sp)
    f0a0:	d9401b15 	stw	r5,108(sp)
    f0a4:	010001c4 	movi	r4,7
    f0a8:	2142680e 	bge	r4,r5,fa4c <___vfiprintf_internal_r+0xed8>
    f0ac:	1002b11e 	bne	r2,zero,fb74 <___vfiprintf_internal_r+0x1000>
    f0b0:	01802004 	movi	r6,128
    f0b4:	01400044 	movi	r5,1
    f0b8:	0009883a 	mov	r4,zero
    f0bc:	d811883a 	mov	r8,sp
    f0c0:	1981ae1e 	bne	r3,r6,f77c <___vfiprintf_internal_r+0xc08>
    f0c4:	d8c02517 	ldw	r3,148(sp)
    f0c8:	1cf9c83a 	sub	fp,r3,r19
    f0cc:	0701ab0e 	bge	zero,fp,f77c <___vfiprintf_internal_r+0xc08>
    f0d0:	05400404 	movi	r21,16
    f0d4:	af03a90e 	bge	r21,fp,ff7c <___vfiprintf_internal_r+0x1408>
    f0d8:	01400074 	movhi	r5,1
    f0dc:	295a3a04 	addi	r5,r5,26856
    f0e0:	d9402315 	stw	r5,140(sp)
    f0e4:	01c001c4 	movi	r7,7
    f0e8:	00000506 	br	f100 <___vfiprintf_internal_r+0x58c>
    f0ec:	21800084 	addi	r6,r4,2
    f0f0:	42000204 	addi	r8,r8,8
    f0f4:	1809883a 	mov	r4,r3
    f0f8:	e73ffc04 	addi	fp,fp,-16
    f0fc:	af000d0e 	bge	r21,fp,f134 <___vfiprintf_internal_r+0x5c0>
    f100:	10800404 	addi	r2,r2,16
    f104:	20c00044 	addi	r3,r4,1
    f108:	44800015 	stw	r18,0(r8)
    f10c:	45400115 	stw	r21,4(r8)
    f110:	d8801c15 	stw	r2,112(sp)
    f114:	d8c01b15 	stw	r3,108(sp)
    f118:	38fff40e 	bge	r7,r3,f0ec <__alt_exception_stack_pointer+0xf800f0ec>
    f11c:	10022b1e 	bne	r2,zero,f9cc <___vfiprintf_internal_r+0xe58>
    f120:	e73ffc04 	addi	fp,fp,-16
    f124:	01800044 	movi	r6,1
    f128:	0009883a 	mov	r4,zero
    f12c:	d811883a 	mov	r8,sp
    f130:	af3ff316 	blt	r21,fp,f100 <__alt_exception_stack_pointer+0xf800f100>
    f134:	d8c02317 	ldw	r3,140(sp)
    f138:	1705883a 	add	r2,r2,fp
    f13c:	47000115 	stw	fp,4(r8)
    f140:	40c00015 	stw	r3,0(r8)
    f144:	d8801c15 	stw	r2,112(sp)
    f148:	d9801b15 	stw	r6,108(sp)
    f14c:	00c001c4 	movi	r3,7
    f150:	19829416 	blt	r3,r6,fba4 <___vfiprintf_internal_r+0x1030>
    f154:	8521c83a 	sub	r16,r16,r20
    f158:	42000204 	addi	r8,r8,8
    f15c:	31400044 	addi	r5,r6,1
    f160:	3009883a 	mov	r4,r6
    f164:	04018716 	blt	zero,r16,f784 <___vfiprintf_internal_r+0xc10>
    f168:	a085883a 	add	r2,r20,r2
    f16c:	45c00015 	stw	r23,0(r8)
    f170:	45000115 	stw	r20,4(r8)
    f174:	d8801c15 	stw	r2,112(sp)
    f178:	d9401b15 	stw	r5,108(sp)
    f17c:	00c001c4 	movi	r3,7
    f180:	1941c20e 	bge	r3,r5,f88c <___vfiprintf_internal_r+0xd18>
    f184:	1002531e 	bne	r2,zero,fad4 <___vfiprintf_internal_r+0xf60>
    f188:	d8001b15 	stw	zero,108(sp)
    f18c:	8c40010c 	andi	r17,r17,4
    f190:	88023226 	beq	r17,zero,fa5c <___vfiprintf_internal_r+0xee8>
    f194:	d9002517 	ldw	r4,148(sp)
    f198:	24e3c83a 	sub	r17,r4,r19
    f19c:	04432916 	blt	zero,r17,fe44 <___vfiprintf_internal_r+0x12d0>
    f1a0:	d8802517 	ldw	r2,148(sp)
    f1a4:	14c0010e 	bge	r2,r19,f1ac <___vfiprintf_internal_r+0x638>
    f1a8:	9805883a 	mov	r2,r19
    f1ac:	d8c02417 	ldw	r3,144(sp)
    f1b0:	1887883a 	add	r3,r3,r2
    f1b4:	d8c02415 	stw	r3,144(sp)
    f1b8:	d8001b15 	stw	zero,108(sp)
    f1bc:	d811883a 	mov	r8,sp
    f1c0:	003ea006 	br	ec44 <__alt_exception_stack_pointer+0xf800ec44>
    f1c4:	8c400814 	ori	r17,r17,32
    f1c8:	b0c00007 	ldb	r3,0(r22)
    f1cc:	003ec606 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f1d0:	b0c00007 	ldb	r3,0(r22)
    f1d4:	00801b04 	movi	r2,108
    f1d8:	18832026 	beq	r3,r2,fe5c <___vfiprintf_internal_r+0x12e8>
    f1dc:	8c400414 	ori	r17,r17,16
    f1e0:	003ec106 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f1e4:	9cc03fcc 	andi	r19,r19,255
    f1e8:	b811883a 	mov	r8,r23
    f1ec:	9803981e 	bne	r19,zero,10050 <___vfiprintf_internal_r+0x14dc>
    f1f0:	8880080c 	andi	r2,r17,32
    f1f4:	1002be26 	beq	r2,zero,fcf0 <___vfiprintf_internal_r+0x117c>
    f1f8:	d9002217 	ldw	r4,136(sp)
    f1fc:	d9402417 	ldw	r5,144(sp)
    f200:	20800017 	ldw	r2,0(r4)
    f204:	2807d7fa 	srai	r3,r5,31
    f208:	21000104 	addi	r4,r4,4
    f20c:	d9002215 	stw	r4,136(sp)
    f210:	11400015 	stw	r5,0(r2)
    f214:	10c00115 	stw	r3,4(r2)
    f218:	003e8a06 	br	ec44 <__alt_exception_stack_pointer+0xf800ec44>
    f21c:	9cc03fcc 	andi	r19,r19,255
    f220:	b811883a 	mov	r8,r23
    f224:	9803871e 	bne	r19,zero,10044 <___vfiprintf_internal_r+0x14d0>
    f228:	8880080c 	andi	r2,r17,32
    f22c:	10009a26 	beq	r2,zero,f498 <___vfiprintf_internal_r+0x924>
    f230:	d9002217 	ldw	r4,136(sp)
    f234:	d8001d85 	stb	zero,118(sp)
    f238:	20800204 	addi	r2,r4,8
    f23c:	24c00017 	ldw	r19,0(r4)
    f240:	25000117 	ldw	r20,4(r4)
    f244:	8002a416 	blt	r16,zero,fcd8 <___vfiprintf_internal_r+0x1164>
    f248:	013fdfc4 	movi	r4,-129
    f24c:	9d06b03a 	or	r3,r19,r20
    f250:	d8802215 	stw	r2,136(sp)
    f254:	8922703a 	and	r17,r17,r4
    f258:	18009b26 	beq	r3,zero,f4c8 <___vfiprintf_internal_r+0x954>
    f25c:	002b883a 	mov	r21,zero
    f260:	ddc01a04 	addi	r23,sp,104
    f264:	9806d0fa 	srli	r3,r19,3
    f268:	a008977a 	slli	r4,r20,29
    f26c:	a028d0fa 	srli	r20,r20,3
    f270:	9cc001cc 	andi	r19,r19,7
    f274:	98800c04 	addi	r2,r19,48
    f278:	bdffffc4 	addi	r23,r23,-1
    f27c:	20e6b03a 	or	r19,r4,r3
    f280:	b8800005 	stb	r2,0(r23)
    f284:	9d06b03a 	or	r3,r19,r20
    f288:	183ff61e 	bne	r3,zero,f264 <__alt_exception_stack_pointer+0xf800f264>
    f28c:	88c0004c 	andi	r3,r17,1
    f290:	18021f1e 	bne	r3,zero,fb10 <___vfiprintf_internal_r+0xf9c>
    f294:	d9401e17 	ldw	r5,120(sp)
    f298:	2de9c83a 	sub	r20,r5,r23
    f29c:	003f3806 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    f2a0:	9cc03fcc 	andi	r19,r19,255
    f2a4:	b811883a 	mov	r8,r23
    f2a8:	98034f1e 	bne	r19,zero,ffe8 <___vfiprintf_internal_r+0x1474>
    f2ac:	00800074 	movhi	r2,1
    f2b0:	1099da04 	addi	r2,r2,26472
    f2b4:	d8802615 	stw	r2,152(sp)
    f2b8:	8880080c 	andi	r2,r17,32
    f2bc:	1000ac26 	beq	r2,zero,f570 <___vfiprintf_internal_r+0x9fc>
    f2c0:	d9002217 	ldw	r4,136(sp)
    f2c4:	24c00017 	ldw	r19,0(r4)
    f2c8:	25000117 	ldw	r20,4(r4)
    f2cc:	21000204 	addi	r4,r4,8
    f2d0:	d9002215 	stw	r4,136(sp)
    f2d4:	8880004c 	andi	r2,r17,1
    f2d8:	1001e726 	beq	r2,zero,fa78 <___vfiprintf_internal_r+0xf04>
    f2dc:	9d04b03a 	or	r2,r19,r20
    f2e0:	10025c1e 	bne	r2,zero,fc54 <___vfiprintf_internal_r+0x10e0>
    f2e4:	d8001d85 	stb	zero,118(sp)
    f2e8:	80024416 	blt	r16,zero,fbfc <___vfiprintf_internal_r+0x1088>
    f2ec:	00bfdfc4 	movi	r2,-129
    f2f0:	88a2703a 	and	r17,r17,r2
    f2f4:	003f1d06 	br	ef6c <__alt_exception_stack_pointer+0xf800ef6c>
    f2f8:	d8c02217 	ldw	r3,136(sp)
    f2fc:	04c00044 	movi	r19,1
    f300:	b811883a 	mov	r8,r23
    f304:	18800017 	ldw	r2,0(r3)
    f308:	18c00104 	addi	r3,r3,4
    f30c:	d8001d85 	stb	zero,118(sp)
    f310:	d8801005 	stb	r2,64(sp)
    f314:	d8c02215 	stw	r3,136(sp)
    f318:	9829883a 	mov	r20,r19
    f31c:	ddc01004 	addi	r23,sp,64
    f320:	0021883a 	mov	r16,zero
    f324:	003f1e06 	br	efa0 <__alt_exception_stack_pointer+0xf800efa0>
    f328:	9cc03fcc 	andi	r19,r19,255
    f32c:	b811883a 	mov	r8,r23
    f330:	9803331e 	bne	r19,zero,10000 <___vfiprintf_internal_r+0x148c>
    f334:	8880080c 	andi	r2,r17,32
    f338:	10004826 	beq	r2,zero,f45c <___vfiprintf_internal_r+0x8e8>
    f33c:	d9002217 	ldw	r4,136(sp)
    f340:	20800117 	ldw	r2,4(r4)
    f344:	24c00017 	ldw	r19,0(r4)
    f348:	21000204 	addi	r4,r4,8
    f34c:	d9002215 	stw	r4,136(sp)
    f350:	1029883a 	mov	r20,r2
    f354:	10024c16 	blt	r2,zero,fc88 <___vfiprintf_internal_r+0x1114>
    f358:	dd401d83 	ldbu	r21,118(sp)
    f35c:	80007116 	blt	r16,zero,f524 <___vfiprintf_internal_r+0x9b0>
    f360:	00ffdfc4 	movi	r3,-129
    f364:	9d04b03a 	or	r2,r19,r20
    f368:	88e2703a 	and	r17,r17,r3
    f36c:	1000d126 	beq	r2,zero,f6b4 <___vfiprintf_internal_r+0xb40>
    f370:	a0023526 	beq	r20,zero,fc48 <___vfiprintf_internal_r+0x10d4>
    f374:	ddc01a04 	addi	r23,sp,104
    f378:	4039883a 	mov	fp,r8
    f37c:	9809883a 	mov	r4,r19
    f380:	a00b883a 	mov	r5,r20
    f384:	01800284 	movi	r6,10
    f388:	000f883a 	mov	r7,zero
    f38c:	00110a00 	call	110a0 <__umoddi3>
    f390:	10800c04 	addi	r2,r2,48
    f394:	bdffffc4 	addi	r23,r23,-1
    f398:	9809883a 	mov	r4,r19
    f39c:	a00b883a 	mov	r5,r20
    f3a0:	b8800005 	stb	r2,0(r23)
    f3a4:	01800284 	movi	r6,10
    f3a8:	000f883a 	mov	r7,zero
    f3ac:	0010aa40 	call	10aa4 <__udivdi3>
    f3b0:	1027883a 	mov	r19,r2
    f3b4:	10c4b03a 	or	r2,r2,r3
    f3b8:	1829883a 	mov	r20,r3
    f3bc:	103fef1e 	bne	r2,zero,f37c <__alt_exception_stack_pointer+0xf800f37c>
    f3c0:	d9001e17 	ldw	r4,120(sp)
    f3c4:	e011883a 	mov	r8,fp
    f3c8:	25e9c83a 	sub	r20,r4,r23
    f3cc:	003eec06 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    f3d0:	d8802307 	ldb	r2,140(sp)
    f3d4:	1002361e 	bne	r2,zero,fcb0 <___vfiprintf_internal_r+0x113c>
    f3d8:	00c00804 	movi	r3,32
    f3dc:	d8c02305 	stb	r3,140(sp)
    f3e0:	04c00044 	movi	r19,1
    f3e4:	b0c00007 	ldb	r3,0(r22)
    f3e8:	003e3f06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f3ec:	8c400054 	ori	r17,r17,1
    f3f0:	b0c00007 	ldb	r3,0(r22)
    f3f4:	003e3c06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f3f8:	8c402014 	ori	r17,r17,128
    f3fc:	b0c00007 	ldb	r3,0(r22)
    f400:	003e3906 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f404:	dc002715 	stw	r16,156(sp)
    f408:	d8002515 	stw	zero,148(sp)
    f40c:	1f3ff404 	addi	fp,r3,-48
    f410:	0009883a 	mov	r4,zero
    f414:	b021883a 	mov	r16,r22
    f418:	01400284 	movi	r5,10
    f41c:	00053c80 	call	53c8 <__mulsi3>
    f420:	80c00007 	ldb	r3,0(r16)
    f424:	e089883a 	add	r4,fp,r2
    f428:	b5800044 	addi	r22,r22,1
    f42c:	1f3ff404 	addi	fp,r3,-48
    f430:	b021883a 	mov	r16,r22
    f434:	af3ff82e 	bgeu	r21,fp,f418 <__alt_exception_stack_pointer+0xf800f418>
    f438:	d9002515 	stw	r4,148(sp)
    f43c:	dc002717 	ldw	r16,156(sp)
    f440:	003e2a06 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    f444:	9cc03fcc 	andi	r19,r19,255
    f448:	b811883a 	mov	r8,r23
    f44c:	9802e91e 	bne	r19,zero,fff4 <___vfiprintf_internal_r+0x1480>
    f450:	8c400414 	ori	r17,r17,16
    f454:	8880080c 	andi	r2,r17,32
    f458:	103fb81e 	bne	r2,zero,f33c <__alt_exception_stack_pointer+0xf800f33c>
    f45c:	8880040c 	andi	r2,r17,16
    f460:	10022e26 	beq	r2,zero,fd1c <___vfiprintf_internal_r+0x11a8>
    f464:	d9402217 	ldw	r5,136(sp)
    f468:	2cc00017 	ldw	r19,0(r5)
    f46c:	29400104 	addi	r5,r5,4
    f470:	d9402215 	stw	r5,136(sp)
    f474:	9829d7fa 	srai	r20,r19,31
    f478:	a005883a 	mov	r2,r20
    f47c:	003fb506 	br	f354 <__alt_exception_stack_pointer+0xf800f354>
    f480:	9cc03fcc 	andi	r19,r19,255
    f484:	b811883a 	mov	r8,r23
    f488:	9802fa1e 	bne	r19,zero,10074 <___vfiprintf_internal_r+0x1500>
    f48c:	8c400414 	ori	r17,r17,16
    f490:	8880080c 	andi	r2,r17,32
    f494:	103f661e 	bne	r2,zero,f230 <__alt_exception_stack_pointer+0xf800f230>
    f498:	8880040c 	andi	r2,r17,16
    f49c:	10020626 	beq	r2,zero,fcb8 <___vfiprintf_internal_r+0x1144>
    f4a0:	d9402217 	ldw	r5,136(sp)
    f4a4:	d8001d85 	stb	zero,118(sp)
    f4a8:	0029883a 	mov	r20,zero
    f4ac:	28800104 	addi	r2,r5,4
    f4b0:	2cc00017 	ldw	r19,0(r5)
    f4b4:	80020816 	blt	r16,zero,fcd8 <___vfiprintf_internal_r+0x1164>
    f4b8:	00ffdfc4 	movi	r3,-129
    f4bc:	d8802215 	stw	r2,136(sp)
    f4c0:	88e2703a 	and	r17,r17,r3
    f4c4:	983f651e 	bne	r19,zero,f25c <__alt_exception_stack_pointer+0xf800f25c>
    f4c8:	002b883a 	mov	r21,zero
    f4cc:	8002cf26 	beq	r16,zero,1000c <___vfiprintf_internal_r+0x1498>
    f4d0:	0027883a 	mov	r19,zero
    f4d4:	0029883a 	mov	r20,zero
    f4d8:	003f6106 	br	f260 <__alt_exception_stack_pointer+0xf800f260>
    f4dc:	9cc03fcc 	andi	r19,r19,255
    f4e0:	b811883a 	mov	r8,r23
    f4e4:	9802e01e 	bne	r19,zero,10068 <___vfiprintf_internal_r+0x14f4>
    f4e8:	8c400414 	ori	r17,r17,16
    f4ec:	8880080c 	andi	r2,r17,32
    f4f0:	1000641e 	bne	r2,zero,f684 <___vfiprintf_internal_r+0xb10>
    f4f4:	8880040c 	andi	r2,r17,16
    f4f8:	1001c81e 	bne	r2,zero,fc1c <___vfiprintf_internal_r+0x10a8>
    f4fc:	8880100c 	andi	r2,r17,64
    f500:	d8001d85 	stb	zero,118(sp)
    f504:	1002281e 	bne	r2,zero,fda8 <___vfiprintf_internal_r+0x1234>
    f508:	d9002217 	ldw	r4,136(sp)
    f50c:	0029883a 	mov	r20,zero
    f510:	20800104 	addi	r2,r4,4
    f514:	24c00017 	ldw	r19,0(r4)
    f518:	8001c60e 	bge	r16,zero,fc34 <___vfiprintf_internal_r+0x10c0>
    f51c:	d8802215 	stw	r2,136(sp)
    f520:	002b883a 	mov	r21,zero
    f524:	9d04b03a 	or	r2,r19,r20
    f528:	103f911e 	bne	r2,zero,f370 <__alt_exception_stack_pointer+0xf800f370>
    f52c:	00800044 	movi	r2,1
    f530:	10803fcc 	andi	r2,r2,255
    f534:	00c00044 	movi	r3,1
    f538:	10c05f26 	beq	r2,r3,f6b8 <___vfiprintf_internal_r+0xb44>
    f53c:	00c00084 	movi	r3,2
    f540:	10ffe31e 	bne	r2,r3,f4d0 <__alt_exception_stack_pointer+0xf800f4d0>
    f544:	0027883a 	mov	r19,zero
    f548:	0029883a 	mov	r20,zero
    f54c:	00015106 	br	fa94 <___vfiprintf_internal_r+0xf20>
    f550:	9cc03fcc 	andi	r19,r19,255
    f554:	b811883a 	mov	r8,r23
    f558:	9802c01e 	bne	r19,zero,1005c <___vfiprintf_internal_r+0x14e8>
    f55c:	01400074 	movhi	r5,1
    f560:	2959d504 	addi	r5,r5,26452
    f564:	d9402615 	stw	r5,152(sp)
    f568:	8880080c 	andi	r2,r17,32
    f56c:	103f541e 	bne	r2,zero,f2c0 <__alt_exception_stack_pointer+0xf800f2c0>
    f570:	8880040c 	andi	r2,r17,16
    f574:	1001f226 	beq	r2,zero,fd40 <___vfiprintf_internal_r+0x11cc>
    f578:	d9402217 	ldw	r5,136(sp)
    f57c:	0029883a 	mov	r20,zero
    f580:	2cc00017 	ldw	r19,0(r5)
    f584:	29400104 	addi	r5,r5,4
    f588:	d9402215 	stw	r5,136(sp)
    f58c:	003f5106 	br	f2d4 <__alt_exception_stack_pointer+0xf800f2d4>
    f590:	d8c02217 	ldw	r3,136(sp)
    f594:	b811883a 	mov	r8,r23
    f598:	d8001d85 	stb	zero,118(sp)
    f59c:	1dc00017 	ldw	r23,0(r3)
    f5a0:	1f000104 	addi	fp,r3,4
    f5a4:	b8025926 	beq	r23,zero,ff0c <___vfiprintf_internal_r+0x1398>
    f5a8:	80023316 	blt	r16,zero,fe78 <___vfiprintf_internal_r+0x1304>
    f5ac:	800d883a 	mov	r6,r16
    f5b0:	000b883a 	mov	r5,zero
    f5b4:	b809883a 	mov	r4,r23
    f5b8:	da002a15 	stw	r8,168(sp)
    f5bc:	000cd080 	call	cd08 <memchr>
    f5c0:	da002a17 	ldw	r8,168(sp)
    f5c4:	10026826 	beq	r2,zero,ff68 <___vfiprintf_internal_r+0x13f4>
    f5c8:	15e9c83a 	sub	r20,r2,r23
    f5cc:	dd401d83 	ldbu	r21,118(sp)
    f5d0:	df002215 	stw	fp,136(sp)
    f5d4:	0021883a 	mov	r16,zero
    f5d8:	003e6906 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    f5dc:	9cc03fcc 	andi	r19,r19,255
    f5e0:	b811883a 	mov	r8,r23
    f5e4:	983fc126 	beq	r19,zero,f4ec <__alt_exception_stack_pointer+0xf800f4ec>
    f5e8:	d8c02303 	ldbu	r3,140(sp)
    f5ec:	d8c01d85 	stb	r3,118(sp)
    f5f0:	003fbe06 	br	f4ec <__alt_exception_stack_pointer+0xf800f4ec>
    f5f4:	d9002217 	ldw	r4,136(sp)
    f5f8:	d9402217 	ldw	r5,136(sp)
    f5fc:	21000017 	ldw	r4,0(r4)
    f600:	28800104 	addi	r2,r5,4
    f604:	d9002515 	stw	r4,148(sp)
    f608:	203e3d16 	blt	r4,zero,ef00 <__alt_exception_stack_pointer+0xf800ef00>
    f60c:	d8802215 	stw	r2,136(sp)
    f610:	b0c00007 	ldb	r3,0(r22)
    f614:	003db406 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f618:	00c00ac4 	movi	r3,43
    f61c:	d8c02305 	stb	r3,140(sp)
    f620:	04c00044 	movi	r19,1
    f624:	b0c00007 	ldb	r3,0(r22)
    f628:	003daf06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f62c:	b0c00007 	ldb	r3,0(r22)
    f630:	01000a84 	movi	r4,42
    f634:	b4000044 	addi	r16,r22,1
    f638:	19025e26 	beq	r3,r4,ffb4 <___vfiprintf_internal_r+0x1440>
    f63c:	1f3ff404 	addi	fp,r3,-48
    f640:	0009883a 	mov	r4,zero
    f644:	af025236 	bltu	r21,fp,ff90 <___vfiprintf_internal_r+0x141c>
    f648:	01400284 	movi	r5,10
    f64c:	00053c80 	call	53c8 <__mulsi3>
    f650:	80c00007 	ldb	r3,0(r16)
    f654:	1709883a 	add	r4,r2,fp
    f658:	85800044 	addi	r22,r16,1
    f65c:	1f3ff404 	addi	fp,r3,-48
    f660:	b021883a 	mov	r16,r22
    f664:	af3ff82e 	bgeu	r21,fp,f648 <__alt_exception_stack_pointer+0xf800f648>
    f668:	2021883a 	mov	r16,r4
    f66c:	203d9f0e 	bge	r4,zero,ecec <__alt_exception_stack_pointer+0xf800ecec>
    f670:	043fffc4 	movi	r16,-1
    f674:	003d9d06 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    f678:	8c401014 	ori	r17,r17,64
    f67c:	b0c00007 	ldb	r3,0(r22)
    f680:	003d9906 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    f684:	d9002217 	ldw	r4,136(sp)
    f688:	d8001d85 	stb	zero,118(sp)
    f68c:	20c00204 	addi	r3,r4,8
    f690:	24c00017 	ldw	r19,0(r4)
    f694:	25000117 	ldw	r20,4(r4)
    f698:	8001e716 	blt	r16,zero,fe38 <___vfiprintf_internal_r+0x12c4>
    f69c:	013fdfc4 	movi	r4,-129
    f6a0:	9d04b03a 	or	r2,r19,r20
    f6a4:	d8c02215 	stw	r3,136(sp)
    f6a8:	8922703a 	and	r17,r17,r4
    f6ac:	002b883a 	mov	r21,zero
    f6b0:	103f2f1e 	bne	r2,zero,f370 <__alt_exception_stack_pointer+0xf800f370>
    f6b4:	803e2f26 	beq	r16,zero,ef74 <__alt_exception_stack_pointer+0xf800ef74>
    f6b8:	0027883a 	mov	r19,zero
    f6bc:	9cc00c04 	addi	r19,r19,48
    f6c0:	dcc019c5 	stb	r19,103(sp)
    f6c4:	dd002817 	ldw	r20,160(sp)
    f6c8:	ddc019c4 	addi	r23,sp,103
    f6cc:	003e2c06 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    f6d0:	9cc03fcc 	andi	r19,r19,255
    f6d4:	b811883a 	mov	r8,r23
    f6d8:	9802571e 	bne	r19,zero,10038 <___vfiprintf_internal_r+0x14c4>
    f6dc:	18005726 	beq	r3,zero,f83c <___vfiprintf_internal_r+0xcc8>
    f6e0:	04c00044 	movi	r19,1
    f6e4:	d8c01005 	stb	r3,64(sp)
    f6e8:	d8001d85 	stb	zero,118(sp)
    f6ec:	9829883a 	mov	r20,r19
    f6f0:	ddc01004 	addi	r23,sp,64
    f6f4:	003f0a06 	br	f320 <__alt_exception_stack_pointer+0xf800f320>
    f6f8:	d9402017 	ldw	r5,128(sp)
    f6fc:	d9002117 	ldw	r4,132(sp)
    f700:	d9801a04 	addi	r6,sp,104
    f704:	da802a15 	stw	r10,168(sp)
    f708:	000ea600 	call	ea60 <__sprint_r.part.0>
    f70c:	da802a17 	ldw	r10,168(sp)
    f710:	1000501e 	bne	r2,zero,f854 <___vfiprintf_internal_r+0xce0>
    f714:	d9801b17 	ldw	r6,108(sp)
    f718:	d8801c17 	ldw	r2,112(sp)
    f71c:	d811883a 	mov	r8,sp
    f720:	31000044 	addi	r4,r6,1
    f724:	003e3606 	br	f000 <__alt_exception_stack_pointer+0xf800f000>
    f728:	d9001b17 	ldw	r4,108(sp)
    f72c:	d8801c17 	ldw	r2,112(sp)
    f730:	21400044 	addi	r5,r4,1
    f734:	d9801d87 	ldb	r6,118(sp)
    f738:	303e5226 	beq	r6,zero,f084 <__alt_exception_stack_pointer+0xf800f084>
    f73c:	01800044 	movi	r6,1
    f740:	d9001d84 	addi	r4,sp,118
    f744:	1185883a 	add	r2,r2,r6
    f748:	41000015 	stw	r4,0(r8)
    f74c:	41800115 	stw	r6,4(r8)
    f750:	d8801c15 	stw	r2,112(sp)
    f754:	d9401b15 	stw	r5,108(sp)
    f758:	010001c4 	movi	r4,7
    f75c:	2140b00e 	bge	r4,r5,fa20 <___vfiprintf_internal_r+0xeac>
    f760:	1000f61e 	bne	r2,zero,fb3c <___vfiprintf_internal_r+0xfc8>
    f764:	3800b31e 	bne	r7,zero,fa34 <___vfiprintf_internal_r+0xec0>
    f768:	0009883a 	mov	r4,zero
    f76c:	300b883a 	mov	r5,r6
    f770:	d811883a 	mov	r8,sp
    f774:	01802004 	movi	r6,128
    f778:	19be5226 	beq	r3,r6,f0c4 <__alt_exception_stack_pointer+0xf800f0c4>
    f77c:	8521c83a 	sub	r16,r16,r20
    f780:	043e790e 	bge	zero,r16,f168 <__alt_exception_stack_pointer+0xf800f168>
    f784:	05400404 	movi	r21,16
    f788:	ac01b00e 	bge	r21,r16,fe4c <___vfiprintf_internal_r+0x12d8>
    f78c:	01400074 	movhi	r5,1
    f790:	295a3a04 	addi	r5,r5,26856
    f794:	d9402315 	stw	r5,140(sp)
    f798:	070001c4 	movi	fp,7
    f79c:	00000506 	br	f7b4 <___vfiprintf_internal_r+0xc40>
    f7a0:	21400084 	addi	r5,r4,2
    f7a4:	42000204 	addi	r8,r8,8
    f7a8:	1809883a 	mov	r4,r3
    f7ac:	843ffc04 	addi	r16,r16,-16
    f7b0:	ac000d0e 	bge	r21,r16,f7e8 <___vfiprintf_internal_r+0xc74>
    f7b4:	10800404 	addi	r2,r2,16
    f7b8:	20c00044 	addi	r3,r4,1
    f7bc:	44800015 	stw	r18,0(r8)
    f7c0:	45400115 	stw	r21,4(r8)
    f7c4:	d8801c15 	stw	r2,112(sp)
    f7c8:	d8c01b15 	stw	r3,108(sp)
    f7cc:	e0fff40e 	bge	fp,r3,f7a0 <__alt_exception_stack_pointer+0xf800f7a0>
    f7d0:	1000101e 	bne	r2,zero,f814 <___vfiprintf_internal_r+0xca0>
    f7d4:	843ffc04 	addi	r16,r16,-16
    f7d8:	01400044 	movi	r5,1
    f7dc:	0009883a 	mov	r4,zero
    f7e0:	d811883a 	mov	r8,sp
    f7e4:	ac3ff316 	blt	r21,r16,f7b4 <__alt_exception_stack_pointer+0xf800f7b4>
    f7e8:	d8c02317 	ldw	r3,140(sp)
    f7ec:	1405883a 	add	r2,r2,r16
    f7f0:	44000115 	stw	r16,4(r8)
    f7f4:	40c00015 	stw	r3,0(r8)
    f7f8:	d8801c15 	stw	r2,112(sp)
    f7fc:	d9401b15 	stw	r5,108(sp)
    f800:	00c001c4 	movi	r3,7
    f804:	19401916 	blt	r3,r5,f86c <___vfiprintf_internal_r+0xcf8>
    f808:	42000204 	addi	r8,r8,8
    f80c:	29400044 	addi	r5,r5,1
    f810:	003e5506 	br	f168 <__alt_exception_stack_pointer+0xf800f168>
    f814:	d9402017 	ldw	r5,128(sp)
    f818:	d9002117 	ldw	r4,132(sp)
    f81c:	d9801a04 	addi	r6,sp,104
    f820:	000ea600 	call	ea60 <__sprint_r.part.0>
    f824:	10000b1e 	bne	r2,zero,f854 <___vfiprintf_internal_r+0xce0>
    f828:	d9001b17 	ldw	r4,108(sp)
    f82c:	d8801c17 	ldw	r2,112(sp)
    f830:	d811883a 	mov	r8,sp
    f834:	21400044 	addi	r5,r4,1
    f838:	003fdc06 	br	f7ac <__alt_exception_stack_pointer+0xf800f7ac>
    f83c:	d8801c17 	ldw	r2,112(sp)
    f840:	10000426 	beq	r2,zero,f854 <___vfiprintf_internal_r+0xce0>
    f844:	d9402017 	ldw	r5,128(sp)
    f848:	d9002117 	ldw	r4,132(sp)
    f84c:	d9801a04 	addi	r6,sp,104
    f850:	000ea600 	call	ea60 <__sprint_r.part.0>
    f854:	d9402017 	ldw	r5,128(sp)
    f858:	2880030b 	ldhu	r2,12(r5)
    f85c:	1080100c 	andi	r2,r2,64
    f860:	10014d1e 	bne	r2,zero,fd98 <___vfiprintf_internal_r+0x1224>
    f864:	d8802417 	ldw	r2,144(sp)
    f868:	003d9706 	br	eec8 <__alt_exception_stack_pointer+0xf800eec8>
    f86c:	1000d21e 	bne	r2,zero,fbb8 <___vfiprintf_internal_r+0x1044>
    f870:	00c00044 	movi	r3,1
    f874:	a005883a 	mov	r2,r20
    f878:	ddc00015 	stw	r23,0(sp)
    f87c:	dd000115 	stw	r20,4(sp)
    f880:	dd001c15 	stw	r20,112(sp)
    f884:	d8c01b15 	stw	r3,108(sp)
    f888:	d811883a 	mov	r8,sp
    f88c:	42000204 	addi	r8,r8,8
    f890:	8c40010c 	andi	r17,r17,4
    f894:	88004026 	beq	r17,zero,f998 <___vfiprintf_internal_r+0xe24>
    f898:	d9002517 	ldw	r4,148(sp)
    f89c:	24e3c83a 	sub	r17,r4,r19
    f8a0:	04403d0e 	bge	zero,r17,f998 <___vfiprintf_internal_r+0xe24>
    f8a4:	04000404 	movi	r16,16
    f8a8:	8441a90e 	bge	r16,r17,ff50 <___vfiprintf_internal_r+0x13dc>
    f8ac:	00c00074 	movhi	r3,1
    f8b0:	18da3e04 	addi	r3,r3,26872
    f8b4:	d9001b17 	ldw	r4,108(sp)
    f8b8:	d8c02315 	stw	r3,140(sp)
    f8bc:	050001c4 	movi	r20,7
    f8c0:	dd402117 	ldw	r21,132(sp)
    f8c4:	ddc02017 	ldw	r23,128(sp)
    f8c8:	00000506 	br	f8e0 <___vfiprintf_internal_r+0xd6c>
    f8cc:	21400084 	addi	r5,r4,2
    f8d0:	42000204 	addi	r8,r8,8
    f8d4:	1809883a 	mov	r4,r3
    f8d8:	8c7ffc04 	addi	r17,r17,-16
    f8dc:	84400f0e 	bge	r16,r17,f91c <___vfiprintf_internal_r+0xda8>
    f8e0:	01400074 	movhi	r5,1
    f8e4:	10800404 	addi	r2,r2,16
    f8e8:	20c00044 	addi	r3,r4,1
    f8ec:	295a3e04 	addi	r5,r5,26872
    f8f0:	41400015 	stw	r5,0(r8)
    f8f4:	44000115 	stw	r16,4(r8)
    f8f8:	d8801c15 	stw	r2,112(sp)
    f8fc:	d8c01b15 	stw	r3,108(sp)
    f900:	a0fff20e 	bge	r20,r3,f8cc <__alt_exception_stack_pointer+0xf800f8cc>
    f904:	1000141e 	bne	r2,zero,f958 <___vfiprintf_internal_r+0xde4>
    f908:	8c7ffc04 	addi	r17,r17,-16
    f90c:	01400044 	movi	r5,1
    f910:	0009883a 	mov	r4,zero
    f914:	d811883a 	mov	r8,sp
    f918:	847ff116 	blt	r16,r17,f8e0 <__alt_exception_stack_pointer+0xf800f8e0>
    f91c:	d8c02317 	ldw	r3,140(sp)
    f920:	1445883a 	add	r2,r2,r17
    f924:	44400115 	stw	r17,4(r8)
    f928:	40c00015 	stw	r3,0(r8)
    f92c:	d8801c15 	stw	r2,112(sp)
    f930:	d9401b15 	stw	r5,108(sp)
    f934:	00c001c4 	movi	r3,7
    f938:	1940170e 	bge	r3,r5,f998 <___vfiprintf_internal_r+0xe24>
    f93c:	1000101e 	bne	r2,zero,f980 <___vfiprintf_internal_r+0xe0c>
    f940:	d8802517 	ldw	r2,148(sp)
    f944:	14c11616 	blt	r2,r19,fda0 <___vfiprintf_internal_r+0x122c>
    f948:	d9002417 	ldw	r4,144(sp)
    f94c:	2089883a 	add	r4,r4,r2
    f950:	d9002415 	stw	r4,144(sp)
    f954:	003e1806 	br	f1b8 <__alt_exception_stack_pointer+0xf800f1b8>
    f958:	d9801a04 	addi	r6,sp,104
    f95c:	b80b883a 	mov	r5,r23
    f960:	a809883a 	mov	r4,r21
    f964:	000ea600 	call	ea60 <__sprint_r.part.0>
    f968:	103fba1e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    f96c:	d9001b17 	ldw	r4,108(sp)
    f970:	d8801c17 	ldw	r2,112(sp)
    f974:	d811883a 	mov	r8,sp
    f978:	21400044 	addi	r5,r4,1
    f97c:	003fd606 	br	f8d8 <__alt_exception_stack_pointer+0xf800f8d8>
    f980:	d9402017 	ldw	r5,128(sp)
    f984:	d9002117 	ldw	r4,132(sp)
    f988:	d9801a04 	addi	r6,sp,104
    f98c:	000ea600 	call	ea60 <__sprint_r.part.0>
    f990:	103fb01e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    f994:	d8801c17 	ldw	r2,112(sp)
    f998:	d8c02517 	ldw	r3,148(sp)
    f99c:	1cc0010e 	bge	r3,r19,f9a4 <___vfiprintf_internal_r+0xe30>
    f9a0:	9807883a 	mov	r3,r19
    f9a4:	d9002417 	ldw	r4,144(sp)
    f9a8:	20c9883a 	add	r4,r4,r3
    f9ac:	d9002415 	stw	r4,144(sp)
    f9b0:	103e0126 	beq	r2,zero,f1b8 <__alt_exception_stack_pointer+0xf800f1b8>
    f9b4:	d9402017 	ldw	r5,128(sp)
    f9b8:	d9002117 	ldw	r4,132(sp)
    f9bc:	d9801a04 	addi	r6,sp,104
    f9c0:	000ea600 	call	ea60 <__sprint_r.part.0>
    f9c4:	103dfc26 	beq	r2,zero,f1b8 <__alt_exception_stack_pointer+0xf800f1b8>
    f9c8:	003fa206 	br	f854 <__alt_exception_stack_pointer+0xf800f854>
    f9cc:	d9402017 	ldw	r5,128(sp)
    f9d0:	d9002117 	ldw	r4,132(sp)
    f9d4:	d9801a04 	addi	r6,sp,104
    f9d8:	d9c02b15 	stw	r7,172(sp)
    f9dc:	000ea600 	call	ea60 <__sprint_r.part.0>
    f9e0:	d9c02b17 	ldw	r7,172(sp)
    f9e4:	103f9b1e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    f9e8:	d9001b17 	ldw	r4,108(sp)
    f9ec:	d8801c17 	ldw	r2,112(sp)
    f9f0:	d811883a 	mov	r8,sp
    f9f4:	21800044 	addi	r6,r4,1
    f9f8:	003dbf06 	br	f0f8 <__alt_exception_stack_pointer+0xf800f0f8>
    f9fc:	1000d81e 	bne	r2,zero,fd60 <___vfiprintf_internal_r+0x11ec>
    fa00:	d9001d87 	ldb	r4,118(sp)
    fa04:	20000a26 	beq	r4,zero,fa30 <___vfiprintf_internal_r+0xebc>
    fa08:	00800044 	movi	r2,1
    fa0c:	d9001d84 	addi	r4,sp,118
    fa10:	100b883a 	mov	r5,r2
    fa14:	d9000015 	stw	r4,0(sp)
    fa18:	d8800115 	stw	r2,4(sp)
    fa1c:	d811883a 	mov	r8,sp
    fa20:	2809883a 	mov	r4,r5
    fa24:	42000204 	addi	r8,r8,8
    fa28:	29400044 	addi	r5,r5,1
    fa2c:	003d9506 	br	f084 <__alt_exception_stack_pointer+0xf800f084>
    fa30:	3800fd26 	beq	r7,zero,fe28 <___vfiprintf_internal_r+0x12b4>
    fa34:	00800084 	movi	r2,2
    fa38:	d9001d04 	addi	r4,sp,116
    fa3c:	d9000015 	stw	r4,0(sp)
    fa40:	d8800115 	stw	r2,4(sp)
    fa44:	01400044 	movi	r5,1
    fa48:	d811883a 	mov	r8,sp
    fa4c:	2809883a 	mov	r4,r5
    fa50:	42000204 	addi	r8,r8,8
    fa54:	29400044 	addi	r5,r5,1
    fa58:	003f4606 	br	f774 <__alt_exception_stack_pointer+0xf800f774>
    fa5c:	d8802517 	ldw	r2,148(sp)
    fa60:	14c0010e 	bge	r2,r19,fa68 <___vfiprintf_internal_r+0xef4>
    fa64:	9805883a 	mov	r2,r19
    fa68:	d9402417 	ldw	r5,144(sp)
    fa6c:	288b883a 	add	r5,r5,r2
    fa70:	d9402415 	stw	r5,144(sp)
    fa74:	003dd006 	br	f1b8 <__alt_exception_stack_pointer+0xf800f1b8>
    fa78:	d8001d85 	stb	zero,118(sp)
    fa7c:	80005d16 	blt	r16,zero,fbf4 <___vfiprintf_internal_r+0x1080>
    fa80:	00ffdfc4 	movi	r3,-129
    fa84:	9d04b03a 	or	r2,r19,r20
    fa88:	88e2703a 	and	r17,r17,r3
    fa8c:	103d3726 	beq	r2,zero,ef6c <__alt_exception_stack_pointer+0xf800ef6c>
    fa90:	002b883a 	mov	r21,zero
    fa94:	d9002617 	ldw	r4,152(sp)
    fa98:	ddc01a04 	addi	r23,sp,104
    fa9c:	988003cc 	andi	r2,r19,15
    faa0:	a006973a 	slli	r3,r20,28
    faa4:	2085883a 	add	r2,r4,r2
    faa8:	9826d13a 	srli	r19,r19,4
    faac:	10800003 	ldbu	r2,0(r2)
    fab0:	a028d13a 	srli	r20,r20,4
    fab4:	bdffffc4 	addi	r23,r23,-1
    fab8:	1ce6b03a 	or	r19,r3,r19
    fabc:	b8800005 	stb	r2,0(r23)
    fac0:	9d04b03a 	or	r2,r19,r20
    fac4:	103ff51e 	bne	r2,zero,fa9c <__alt_exception_stack_pointer+0xf800fa9c>
    fac8:	d8801e17 	ldw	r2,120(sp)
    facc:	15e9c83a 	sub	r20,r2,r23
    fad0:	003d2b06 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    fad4:	d9402017 	ldw	r5,128(sp)
    fad8:	d9002117 	ldw	r4,132(sp)
    fadc:	d9801a04 	addi	r6,sp,104
    fae0:	000ea600 	call	ea60 <__sprint_r.part.0>
    fae4:	103f5b1e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fae8:	d8801c17 	ldw	r2,112(sp)
    faec:	d811883a 	mov	r8,sp
    faf0:	003f6706 	br	f890 <__alt_exception_stack_pointer+0xf800f890>
    faf4:	d9402017 	ldw	r5,128(sp)
    faf8:	d9002117 	ldw	r4,132(sp)
    fafc:	d9801a04 	addi	r6,sp,104
    fb00:	000ea600 	call	ea60 <__sprint_r.part.0>
    fb04:	103f531e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fb08:	d811883a 	mov	r8,sp
    fb0c:	003cd906 	br	ee74 <__alt_exception_stack_pointer+0xf800ee74>
    fb10:	10803fcc 	andi	r2,r2,255
    fb14:	1080201c 	xori	r2,r2,128
    fb18:	10bfe004 	addi	r2,r2,-128
    fb1c:	00c00c04 	movi	r3,48
    fb20:	10ffe926 	beq	r2,r3,fac8 <__alt_exception_stack_pointer+0xf800fac8>
    fb24:	b8ffffc5 	stb	r3,-1(r23)
    fb28:	d8c01e17 	ldw	r3,120(sp)
    fb2c:	b8bfffc4 	addi	r2,r23,-1
    fb30:	102f883a 	mov	r23,r2
    fb34:	18a9c83a 	sub	r20,r3,r2
    fb38:	003d1106 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    fb3c:	d9402017 	ldw	r5,128(sp)
    fb40:	d9002117 	ldw	r4,132(sp)
    fb44:	d9801a04 	addi	r6,sp,104
    fb48:	d8c02a15 	stw	r3,168(sp)
    fb4c:	d9c02b15 	stw	r7,172(sp)
    fb50:	000ea600 	call	ea60 <__sprint_r.part.0>
    fb54:	d8c02a17 	ldw	r3,168(sp)
    fb58:	d9c02b17 	ldw	r7,172(sp)
    fb5c:	103f3d1e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fb60:	d9001b17 	ldw	r4,108(sp)
    fb64:	d8801c17 	ldw	r2,112(sp)
    fb68:	d811883a 	mov	r8,sp
    fb6c:	21400044 	addi	r5,r4,1
    fb70:	003d4406 	br	f084 <__alt_exception_stack_pointer+0xf800f084>
    fb74:	d9402017 	ldw	r5,128(sp)
    fb78:	d9002117 	ldw	r4,132(sp)
    fb7c:	d9801a04 	addi	r6,sp,104
    fb80:	d8c02a15 	stw	r3,168(sp)
    fb84:	000ea600 	call	ea60 <__sprint_r.part.0>
    fb88:	d8c02a17 	ldw	r3,168(sp)
    fb8c:	103f311e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fb90:	d9001b17 	ldw	r4,108(sp)
    fb94:	d8801c17 	ldw	r2,112(sp)
    fb98:	d811883a 	mov	r8,sp
    fb9c:	21400044 	addi	r5,r4,1
    fba0:	003ef406 	br	f774 <__alt_exception_stack_pointer+0xf800f774>
    fba4:	1000bd1e 	bne	r2,zero,fe9c <___vfiprintf_internal_r+0x1328>
    fba8:	01400044 	movi	r5,1
    fbac:	0009883a 	mov	r4,zero
    fbb0:	d811883a 	mov	r8,sp
    fbb4:	003ef106 	br	f77c <__alt_exception_stack_pointer+0xf800f77c>
    fbb8:	d9402017 	ldw	r5,128(sp)
    fbbc:	d9002117 	ldw	r4,132(sp)
    fbc0:	d9801a04 	addi	r6,sp,104
    fbc4:	000ea600 	call	ea60 <__sprint_r.part.0>
    fbc8:	103f221e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fbcc:	d9401b17 	ldw	r5,108(sp)
    fbd0:	d8801c17 	ldw	r2,112(sp)
    fbd4:	d811883a 	mov	r8,sp
    fbd8:	29400044 	addi	r5,r5,1
    fbdc:	003d6206 	br	f168 <__alt_exception_stack_pointer+0xf800f168>
    fbe0:	01400074 	movhi	r5,1
    fbe4:	2959da04 	addi	r5,r5,26472
    fbe8:	d9402615 	stw	r5,152(sp)
    fbec:	d8c02215 	stw	r3,136(sp)
    fbf0:	1023883a 	mov	r17,r2
    fbf4:	9d04b03a 	or	r2,r19,r20
    fbf8:	103fa51e 	bne	r2,zero,fa90 <__alt_exception_stack_pointer+0xf800fa90>
    fbfc:	002b883a 	mov	r21,zero
    fc00:	00800084 	movi	r2,2
    fc04:	003e4a06 	br	f530 <__alt_exception_stack_pointer+0xf800f530>
    fc08:	01400074 	movhi	r5,1
    fc0c:	2959da04 	addi	r5,r5,26472
    fc10:	002b883a 	mov	r21,zero
    fc14:	d9402615 	stw	r5,152(sp)
    fc18:	003f9e06 	br	fa94 <__alt_exception_stack_pointer+0xf800fa94>
    fc1c:	d9402217 	ldw	r5,136(sp)
    fc20:	d8001d85 	stb	zero,118(sp)
    fc24:	0029883a 	mov	r20,zero
    fc28:	28800104 	addi	r2,r5,4
    fc2c:	2cc00017 	ldw	r19,0(r5)
    fc30:	803e3a16 	blt	r16,zero,f51c <__alt_exception_stack_pointer+0xf800f51c>
    fc34:	00ffdfc4 	movi	r3,-129
    fc38:	d8802215 	stw	r2,136(sp)
    fc3c:	88e2703a 	and	r17,r17,r3
    fc40:	002b883a 	mov	r21,zero
    fc44:	983e9b26 	beq	r19,zero,f6b4 <__alt_exception_stack_pointer+0xf800f6b4>
    fc48:	00800244 	movi	r2,9
    fc4c:	14fdc936 	bltu	r2,r19,f374 <__alt_exception_stack_pointer+0xf800f374>
    fc50:	003e9a06 	br	f6bc <__alt_exception_stack_pointer+0xf800f6bc>
    fc54:	00800c04 	movi	r2,48
    fc58:	d8c01d45 	stb	r3,117(sp)
    fc5c:	d8801d05 	stb	r2,116(sp)
    fc60:	d8001d85 	stb	zero,118(sp)
    fc64:	88c00094 	ori	r3,r17,2
    fc68:	80009c16 	blt	r16,zero,fedc <___vfiprintf_internal_r+0x1368>
    fc6c:	00bfdfc4 	movi	r2,-129
    fc70:	88a2703a 	and	r17,r17,r2
    fc74:	8c400094 	ori	r17,r17,2
    fc78:	002b883a 	mov	r21,zero
    fc7c:	003f8506 	br	fa94 <__alt_exception_stack_pointer+0xf800fa94>
    fc80:	b029883a 	mov	r20,r22
    fc84:	003c0b06 	br	ecb4 <__alt_exception_stack_pointer+0xf800ecb4>
    fc88:	04e7c83a 	sub	r19,zero,r19
    fc8c:	05400b44 	movi	r21,45
    fc90:	9804c03a 	cmpne	r2,r19,zero
    fc94:	0529c83a 	sub	r20,zero,r20
    fc98:	dd401d85 	stb	r21,118(sp)
    fc9c:	a0a9c83a 	sub	r20,r20,r2
    fca0:	80009716 	blt	r16,zero,ff00 <___vfiprintf_internal_r+0x138c>
    fca4:	00bfdfc4 	movi	r2,-129
    fca8:	88a2703a 	and	r17,r17,r2
    fcac:	003db006 	br	f370 <__alt_exception_stack_pointer+0xf800f370>
    fcb0:	b0c00007 	ldb	r3,0(r22)
    fcb4:	003c0c06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    fcb8:	8880100c 	andi	r2,r17,64
    fcbc:	d8001d85 	stb	zero,118(sp)
    fcc0:	1000461e 	bne	r2,zero,fddc <___vfiprintf_internal_r+0x1268>
    fcc4:	d9002217 	ldw	r4,136(sp)
    fcc8:	0029883a 	mov	r20,zero
    fccc:	20800104 	addi	r2,r4,4
    fcd0:	24c00017 	ldw	r19,0(r4)
    fcd4:	803df80e 	bge	r16,zero,f4b8 <__alt_exception_stack_pointer+0xf800f4b8>
    fcd8:	9d06b03a 	or	r3,r19,r20
    fcdc:	d8802215 	stw	r2,136(sp)
    fce0:	183d5e1e 	bne	r3,zero,f25c <__alt_exception_stack_pointer+0xf800f25c>
    fce4:	002b883a 	mov	r21,zero
    fce8:	0005883a 	mov	r2,zero
    fcec:	003e1006 	br	f530 <__alt_exception_stack_pointer+0xf800f530>
    fcf0:	8880040c 	andi	r2,r17,16
    fcf4:	1000321e 	bne	r2,zero,fdc0 <___vfiprintf_internal_r+0x124c>
    fcf8:	8c40100c 	andi	r17,r17,64
    fcfc:	88008d26 	beq	r17,zero,ff34 <___vfiprintf_internal_r+0x13c0>
    fd00:	d9402217 	ldw	r5,136(sp)
    fd04:	d8c02417 	ldw	r3,144(sp)
    fd08:	28800017 	ldw	r2,0(r5)
    fd0c:	29400104 	addi	r5,r5,4
    fd10:	d9402215 	stw	r5,136(sp)
    fd14:	10c0000d 	sth	r3,0(r2)
    fd18:	003bca06 	br	ec44 <__alt_exception_stack_pointer+0xf800ec44>
    fd1c:	8880100c 	andi	r2,r17,64
    fd20:	10003a26 	beq	r2,zero,fe0c <___vfiprintf_internal_r+0x1298>
    fd24:	d8802217 	ldw	r2,136(sp)
    fd28:	14c0000f 	ldh	r19,0(r2)
    fd2c:	10800104 	addi	r2,r2,4
    fd30:	d8802215 	stw	r2,136(sp)
    fd34:	9829d7fa 	srai	r20,r19,31
    fd38:	a005883a 	mov	r2,r20
    fd3c:	003d8506 	br	f354 <__alt_exception_stack_pointer+0xf800f354>
    fd40:	8880100c 	andi	r2,r17,64
    fd44:	10002b26 	beq	r2,zero,fdf4 <___vfiprintf_internal_r+0x1280>
    fd48:	d8802217 	ldw	r2,136(sp)
    fd4c:	0029883a 	mov	r20,zero
    fd50:	14c0000b 	ldhu	r19,0(r2)
    fd54:	10800104 	addi	r2,r2,4
    fd58:	d8802215 	stw	r2,136(sp)
    fd5c:	003d5d06 	br	f2d4 <__alt_exception_stack_pointer+0xf800f2d4>
    fd60:	d9402017 	ldw	r5,128(sp)
    fd64:	d9002117 	ldw	r4,132(sp)
    fd68:	d9801a04 	addi	r6,sp,104
    fd6c:	d8c02a15 	stw	r3,168(sp)
    fd70:	d9c02b15 	stw	r7,172(sp)
    fd74:	000ea600 	call	ea60 <__sprint_r.part.0>
    fd78:	d8c02a17 	ldw	r3,168(sp)
    fd7c:	d9c02b17 	ldw	r7,172(sp)
    fd80:	103eb41e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    fd84:	d9001b17 	ldw	r4,108(sp)
    fd88:	d8801c17 	ldw	r2,112(sp)
    fd8c:	d811883a 	mov	r8,sp
    fd90:	21400044 	addi	r5,r4,1
    fd94:	003e6706 	br	f734 <__alt_exception_stack_pointer+0xf800f734>
    fd98:	00bfffc4 	movi	r2,-1
    fd9c:	003c4a06 	br	eec8 <__alt_exception_stack_pointer+0xf800eec8>
    fda0:	9805883a 	mov	r2,r19
    fda4:	003ee806 	br	f948 <__alt_exception_stack_pointer+0xf800f948>
    fda8:	d8c02217 	ldw	r3,136(sp)
    fdac:	0029883a 	mov	r20,zero
    fdb0:	18800104 	addi	r2,r3,4
    fdb4:	1cc0000b 	ldhu	r19,0(r3)
    fdb8:	803f9e0e 	bge	r16,zero,fc34 <__alt_exception_stack_pointer+0xf800fc34>
    fdbc:	003dd706 	br	f51c <__alt_exception_stack_pointer+0xf800f51c>
    fdc0:	d8c02217 	ldw	r3,136(sp)
    fdc4:	d9002417 	ldw	r4,144(sp)
    fdc8:	18800017 	ldw	r2,0(r3)
    fdcc:	18c00104 	addi	r3,r3,4
    fdd0:	d8c02215 	stw	r3,136(sp)
    fdd4:	11000015 	stw	r4,0(r2)
    fdd8:	003b9a06 	br	ec44 <__alt_exception_stack_pointer+0xf800ec44>
    fddc:	d8c02217 	ldw	r3,136(sp)
    fde0:	0029883a 	mov	r20,zero
    fde4:	18800104 	addi	r2,r3,4
    fde8:	1cc0000b 	ldhu	r19,0(r3)
    fdec:	803db20e 	bge	r16,zero,f4b8 <__alt_exception_stack_pointer+0xf800f4b8>
    fdf0:	003fb906 	br	fcd8 <__alt_exception_stack_pointer+0xf800fcd8>
    fdf4:	d9002217 	ldw	r4,136(sp)
    fdf8:	0029883a 	mov	r20,zero
    fdfc:	24c00017 	ldw	r19,0(r4)
    fe00:	21000104 	addi	r4,r4,4
    fe04:	d9002215 	stw	r4,136(sp)
    fe08:	003d3206 	br	f2d4 <__alt_exception_stack_pointer+0xf800f2d4>
    fe0c:	d8c02217 	ldw	r3,136(sp)
    fe10:	1cc00017 	ldw	r19,0(r3)
    fe14:	18c00104 	addi	r3,r3,4
    fe18:	d8c02215 	stw	r3,136(sp)
    fe1c:	9829d7fa 	srai	r20,r19,31
    fe20:	a005883a 	mov	r2,r20
    fe24:	003d4b06 	br	f354 <__alt_exception_stack_pointer+0xf800f354>
    fe28:	0009883a 	mov	r4,zero
    fe2c:	01400044 	movi	r5,1
    fe30:	d811883a 	mov	r8,sp
    fe34:	003e4f06 	br	f774 <__alt_exception_stack_pointer+0xf800f774>
    fe38:	d8c02215 	stw	r3,136(sp)
    fe3c:	002b883a 	mov	r21,zero
    fe40:	003db806 	br	f524 <__alt_exception_stack_pointer+0xf800f524>
    fe44:	d811883a 	mov	r8,sp
    fe48:	003e9606 	br	f8a4 <__alt_exception_stack_pointer+0xf800f8a4>
    fe4c:	01000074 	movhi	r4,1
    fe50:	211a3a04 	addi	r4,r4,26856
    fe54:	d9002315 	stw	r4,140(sp)
    fe58:	003e6306 	br	f7e8 <__alt_exception_stack_pointer+0xf800f7e8>
    fe5c:	b0c00043 	ldbu	r3,1(r22)
    fe60:	8c400814 	ori	r17,r17,32
    fe64:	b5800044 	addi	r22,r22,1
    fe68:	18c03fcc 	andi	r3,r3,255
    fe6c:	18c0201c 	xori	r3,r3,128
    fe70:	18ffe004 	addi	r3,r3,-128
    fe74:	003b9c06 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    fe78:	b809883a 	mov	r4,r23
    fe7c:	da002a15 	stw	r8,168(sp)
    fe80:	0007b3c0 	call	7b3c <strlen>
    fe84:	1029883a 	mov	r20,r2
    fe88:	dd401d83 	ldbu	r21,118(sp)
    fe8c:	df002215 	stw	fp,136(sp)
    fe90:	0021883a 	mov	r16,zero
    fe94:	da002a17 	ldw	r8,168(sp)
    fe98:	003c3906 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    fe9c:	d9402017 	ldw	r5,128(sp)
    fea0:	d9002117 	ldw	r4,132(sp)
    fea4:	d9801a04 	addi	r6,sp,104
    fea8:	000ea600 	call	ea60 <__sprint_r.part.0>
    feac:	103e691e 	bne	r2,zero,f854 <__alt_exception_stack_pointer+0xf800f854>
    feb0:	d9001b17 	ldw	r4,108(sp)
    feb4:	d8801c17 	ldw	r2,112(sp)
    feb8:	d811883a 	mov	r8,sp
    febc:	21400044 	addi	r5,r4,1
    fec0:	003e2e06 	br	f77c <__alt_exception_stack_pointer+0xf800f77c>
    fec4:	01000074 	movhi	r4,1
    fec8:	211a3e04 	addi	r4,r4,26872
    fecc:	d9002315 	stw	r4,140(sp)
    fed0:	d9001b17 	ldw	r4,108(sp)
    fed4:	21000044 	addi	r4,r4,1
    fed8:	003c5e06 	br	f054 <__alt_exception_stack_pointer+0xf800f054>
    fedc:	002b883a 	mov	r21,zero
    fee0:	00800084 	movi	r2,2
    fee4:	10803fcc 	andi	r2,r2,255
    fee8:	01000044 	movi	r4,1
    feec:	11002b26 	beq	r2,r4,ff9c <___vfiprintf_internal_r+0x1428>
    fef0:	01000084 	movi	r4,2
    fef4:	11002b1e 	bne	r2,r4,ffa4 <___vfiprintf_internal_r+0x1430>
    fef8:	1823883a 	mov	r17,r3
    fefc:	003ee506 	br	fa94 <__alt_exception_stack_pointer+0xf800fa94>
    ff00:	8807883a 	mov	r3,r17
    ff04:	00800044 	movi	r2,1
    ff08:	003ff606 	br	fee4 <__alt_exception_stack_pointer+0xf800fee4>
    ff0c:	00800184 	movi	r2,6
    ff10:	1400012e 	bgeu	r2,r16,ff18 <___vfiprintf_internal_r+0x13a4>
    ff14:	1021883a 	mov	r16,r2
    ff18:	8029883a 	mov	r20,r16
    ff1c:	8027883a 	mov	r19,r16
    ff20:	80002216 	blt	r16,zero,ffac <___vfiprintf_internal_r+0x1438>
    ff24:	05c00074 	movhi	r23,1
    ff28:	df002215 	stw	fp,136(sp)
    ff2c:	bdd9df04 	addi	r23,r23,26492
    ff30:	003cfb06 	br	f320 <__alt_exception_stack_pointer+0xf800f320>
    ff34:	d9002217 	ldw	r4,136(sp)
    ff38:	d9402417 	ldw	r5,144(sp)
    ff3c:	20800017 	ldw	r2,0(r4)
    ff40:	21000104 	addi	r4,r4,4
    ff44:	d9002215 	stw	r4,136(sp)
    ff48:	11400015 	stw	r5,0(r2)
    ff4c:	003b3d06 	br	ec44 <__alt_exception_stack_pointer+0xf800ec44>
    ff50:	01400074 	movhi	r5,1
    ff54:	295a3e04 	addi	r5,r5,26872
    ff58:	d9402315 	stw	r5,140(sp)
    ff5c:	d9401b17 	ldw	r5,108(sp)
    ff60:	29400044 	addi	r5,r5,1
    ff64:	003e6d06 	br	f91c <__alt_exception_stack_pointer+0xf800f91c>
    ff68:	8029883a 	mov	r20,r16
    ff6c:	dd401d83 	ldbu	r21,118(sp)
    ff70:	df002215 	stw	fp,136(sp)
    ff74:	0021883a 	mov	r16,zero
    ff78:	003c0106 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
    ff7c:	00c00074 	movhi	r3,1
    ff80:	18da3a04 	addi	r3,r3,26856
    ff84:	d8c02315 	stw	r3,140(sp)
    ff88:	280d883a 	mov	r6,r5
    ff8c:	003c6906 	br	f134 <__alt_exception_stack_pointer+0xf800f134>
    ff90:	802d883a 	mov	r22,r16
    ff94:	0021883a 	mov	r16,zero
    ff98:	003b5406 	br	ecec <__alt_exception_stack_pointer+0xf800ecec>
    ff9c:	1823883a 	mov	r17,r3
    ffa0:	003cf306 	br	f370 <__alt_exception_stack_pointer+0xf800f370>
    ffa4:	1823883a 	mov	r17,r3
    ffa8:	003cad06 	br	f260 <__alt_exception_stack_pointer+0xf800f260>
    ffac:	0027883a 	mov	r19,zero
    ffb0:	003fdc06 	br	ff24 <__alt_exception_stack_pointer+0xf800ff24>
    ffb4:	d9402217 	ldw	r5,136(sp)
    ffb8:	8005883a 	mov	r2,r16
    ffbc:	b0c00043 	ldbu	r3,1(r22)
    ffc0:	2c000017 	ldw	r16,0(r5)
    ffc4:	29000104 	addi	r4,r5,4
    ffc8:	d9002215 	stw	r4,136(sp)
    ffcc:	102d883a 	mov	r22,r2
    ffd0:	803fa50e 	bge	r16,zero,fe68 <__alt_exception_stack_pointer+0xf800fe68>
    ffd4:	18c03fcc 	andi	r3,r3,255
    ffd8:	18c0201c 	xori	r3,r3,128
    ffdc:	043fffc4 	movi	r16,-1
    ffe0:	18ffe004 	addi	r3,r3,-128
    ffe4:	003b4006 	br	ece8 <__alt_exception_stack_pointer+0xf800ece8>
    ffe8:	d9402303 	ldbu	r5,140(sp)
    ffec:	d9401d85 	stb	r5,118(sp)
    fff0:	003cae06 	br	f2ac <__alt_exception_stack_pointer+0xf800f2ac>
    fff4:	d8c02303 	ldbu	r3,140(sp)
    fff8:	d8c01d85 	stb	r3,118(sp)
    fffc:	003d1406 	br	f450 <__alt_exception_stack_pointer+0xf800f450>
   10000:	d8c02303 	ldbu	r3,140(sp)
   10004:	d8c01d85 	stb	r3,118(sp)
   10008:	003cca06 	br	f334 <__alt_exception_stack_pointer+0xf800f334>
   1000c:	8880004c 	andi	r2,r17,1
   10010:	002b883a 	mov	r21,zero
   10014:	10000526 	beq	r2,zero,1002c <___vfiprintf_internal_r+0x14b8>
   10018:	00800c04 	movi	r2,48
   1001c:	d88019c5 	stb	r2,103(sp)
   10020:	dd002817 	ldw	r20,160(sp)
   10024:	ddc019c4 	addi	r23,sp,103
   10028:	003bd506 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
   1002c:	0029883a 	mov	r20,zero
   10030:	ddc01a04 	addi	r23,sp,104
   10034:	003bd206 	br	ef80 <__alt_exception_stack_pointer+0xf800ef80>
   10038:	d9002303 	ldbu	r4,140(sp)
   1003c:	d9001d85 	stb	r4,118(sp)
   10040:	003da606 	br	f6dc <__alt_exception_stack_pointer+0xf800f6dc>
   10044:	d8c02303 	ldbu	r3,140(sp)
   10048:	d8c01d85 	stb	r3,118(sp)
   1004c:	003c7606 	br	f228 <__alt_exception_stack_pointer+0xf800f228>
   10050:	d8c02303 	ldbu	r3,140(sp)
   10054:	d8c01d85 	stb	r3,118(sp)
   10058:	003c6506 	br	f1f0 <__alt_exception_stack_pointer+0xf800f1f0>
   1005c:	d9002303 	ldbu	r4,140(sp)
   10060:	d9001d85 	stb	r4,118(sp)
   10064:	003d3d06 	br	f55c <__alt_exception_stack_pointer+0xf800f55c>
   10068:	d8c02303 	ldbu	r3,140(sp)
   1006c:	d8c01d85 	stb	r3,118(sp)
   10070:	003d1d06 	br	f4e8 <__alt_exception_stack_pointer+0xf800f4e8>
   10074:	d8c02303 	ldbu	r3,140(sp)
   10078:	d8c01d85 	stb	r3,118(sp)
   1007c:	003d0306 	br	f48c <__alt_exception_stack_pointer+0xf800f48c>

00010080 <__vfiprintf_internal>:
   10080:	008000b4 	movhi	r2,2
   10084:	10a16a04 	addi	r2,r2,-31320
   10088:	300f883a 	mov	r7,r6
   1008c:	280d883a 	mov	r6,r5
   10090:	200b883a 	mov	r5,r4
   10094:	11000017 	ldw	r4,0(r2)
   10098:	000eb741 	jmpi	eb74 <___vfiprintf_internal_r>

0001009c <__sbprintf>:
   1009c:	2880030b 	ldhu	r2,12(r5)
   100a0:	2ac01917 	ldw	r11,100(r5)
   100a4:	2a80038b 	ldhu	r10,14(r5)
   100a8:	2a400717 	ldw	r9,28(r5)
   100ac:	2a000917 	ldw	r8,36(r5)
   100b0:	defee204 	addi	sp,sp,-1144
   100b4:	00c10004 	movi	r3,1024
   100b8:	dc011a15 	stw	r16,1128(sp)
   100bc:	10bfff4c 	andi	r2,r2,65533
   100c0:	2821883a 	mov	r16,r5
   100c4:	d8cb883a 	add	r5,sp,r3
   100c8:	dc811c15 	stw	r18,1136(sp)
   100cc:	dc411b15 	stw	r17,1132(sp)
   100d0:	dfc11d15 	stw	ra,1140(sp)
   100d4:	2025883a 	mov	r18,r4
   100d8:	d881030d 	sth	r2,1036(sp)
   100dc:	dac11915 	stw	r11,1124(sp)
   100e0:	da81038d 	sth	r10,1038(sp)
   100e4:	da410715 	stw	r9,1052(sp)
   100e8:	da010915 	stw	r8,1060(sp)
   100ec:	dec10015 	stw	sp,1024(sp)
   100f0:	dec10415 	stw	sp,1040(sp)
   100f4:	d8c10215 	stw	r3,1032(sp)
   100f8:	d8c10515 	stw	r3,1044(sp)
   100fc:	d8010615 	stw	zero,1048(sp)
   10100:	000eb740 	call	eb74 <___vfiprintf_internal_r>
   10104:	1023883a 	mov	r17,r2
   10108:	10000416 	blt	r2,zero,1011c <__sbprintf+0x80>
   1010c:	d9410004 	addi	r5,sp,1024
   10110:	9009883a 	mov	r4,r18
   10114:	000bbb00 	call	bbb0 <_fflush_r>
   10118:	10000d1e 	bne	r2,zero,10150 <__sbprintf+0xb4>
   1011c:	d881030b 	ldhu	r2,1036(sp)
   10120:	1080100c 	andi	r2,r2,64
   10124:	10000326 	beq	r2,zero,10134 <__sbprintf+0x98>
   10128:	8080030b 	ldhu	r2,12(r16)
   1012c:	10801014 	ori	r2,r2,64
   10130:	8080030d 	sth	r2,12(r16)
   10134:	8805883a 	mov	r2,r17
   10138:	dfc11d17 	ldw	ra,1140(sp)
   1013c:	dc811c17 	ldw	r18,1136(sp)
   10140:	dc411b17 	ldw	r17,1132(sp)
   10144:	dc011a17 	ldw	r16,1128(sp)
   10148:	dec11e04 	addi	sp,sp,1144
   1014c:	f800283a 	ret
   10150:	047fffc4 	movi	r17,-1
   10154:	003ff106 	br	1011c <__alt_exception_stack_pointer+0xf801011c>

00010158 <_write_r>:
   10158:	defffd04 	addi	sp,sp,-12
   1015c:	2805883a 	mov	r2,r5
   10160:	dc000015 	stw	r16,0(sp)
   10164:	040000b4 	movhi	r16,2
   10168:	dc400115 	stw	r17,4(sp)
   1016c:	300b883a 	mov	r5,r6
   10170:	8428a404 	addi	r16,r16,-23920
   10174:	2023883a 	mov	r17,r4
   10178:	380d883a 	mov	r6,r7
   1017c:	1009883a 	mov	r4,r2
   10180:	dfc00215 	stw	ra,8(sp)
   10184:	80000015 	stw	zero,0(r16)
   10188:	0012cf80 	call	12cf8 <write>
   1018c:	00ffffc4 	movi	r3,-1
   10190:	10c00526 	beq	r2,r3,101a8 <_write_r+0x50>
   10194:	dfc00217 	ldw	ra,8(sp)
   10198:	dc400117 	ldw	r17,4(sp)
   1019c:	dc000017 	ldw	r16,0(sp)
   101a0:	dec00304 	addi	sp,sp,12
   101a4:	f800283a 	ret
   101a8:	80c00017 	ldw	r3,0(r16)
   101ac:	183ff926 	beq	r3,zero,10194 <__alt_exception_stack_pointer+0xf8010194>
   101b0:	88c00015 	stw	r3,0(r17)
   101b4:	003ff706 	br	10194 <__alt_exception_stack_pointer+0xf8010194>

000101b8 <_close_r>:
   101b8:	defffd04 	addi	sp,sp,-12
   101bc:	dc000015 	stw	r16,0(sp)
   101c0:	040000b4 	movhi	r16,2
   101c4:	dc400115 	stw	r17,4(sp)
   101c8:	8428a404 	addi	r16,r16,-23920
   101cc:	2023883a 	mov	r17,r4
   101d0:	2809883a 	mov	r4,r5
   101d4:	dfc00215 	stw	ra,8(sp)
   101d8:	80000015 	stw	zero,0(r16)
   101dc:	001220c0 	call	1220c <close>
   101e0:	00ffffc4 	movi	r3,-1
   101e4:	10c00526 	beq	r2,r3,101fc <_close_r+0x44>
   101e8:	dfc00217 	ldw	ra,8(sp)
   101ec:	dc400117 	ldw	r17,4(sp)
   101f0:	dc000017 	ldw	r16,0(sp)
   101f4:	dec00304 	addi	sp,sp,12
   101f8:	f800283a 	ret
   101fc:	80c00017 	ldw	r3,0(r16)
   10200:	183ff926 	beq	r3,zero,101e8 <__alt_exception_stack_pointer+0xf80101e8>
   10204:	88c00015 	stw	r3,0(r17)
   10208:	003ff706 	br	101e8 <__alt_exception_stack_pointer+0xf80101e8>

0001020c <_calloc_r>:
   1020c:	defffe04 	addi	sp,sp,-8
   10210:	2805883a 	mov	r2,r5
   10214:	dc000015 	stw	r16,0(sp)
   10218:	300b883a 	mov	r5,r6
   1021c:	2021883a 	mov	r16,r4
   10220:	1009883a 	mov	r4,r2
   10224:	dfc00115 	stw	ra,4(sp)
   10228:	00053c80 	call	53c8 <__mulsi3>
   1022c:	100b883a 	mov	r5,r2
   10230:	8009883a 	mov	r4,r16
   10234:	000719c0 	call	719c <_malloc_r>
   10238:	10002926 	beq	r2,zero,102e0 <_calloc_r+0xd4>
   1023c:	11bfff17 	ldw	r6,-4(r2)
   10240:	1021883a 	mov	r16,r2
   10244:	00bfff04 	movi	r2,-4
   10248:	308c703a 	and	r6,r6,r2
   1024c:	00c00904 	movi	r3,36
   10250:	308d883a 	add	r6,r6,r2
   10254:	19801636 	bltu	r3,r6,102b0 <_calloc_r+0xa4>
   10258:	008004c4 	movi	r2,19
   1025c:	11800b2e 	bgeu	r2,r6,1028c <_calloc_r+0x80>
   10260:	80000015 	stw	zero,0(r16)
   10264:	80000115 	stw	zero,4(r16)
   10268:	008006c4 	movi	r2,27
   1026c:	11801a2e 	bgeu	r2,r6,102d8 <_calloc_r+0xcc>
   10270:	80000215 	stw	zero,8(r16)
   10274:	80000315 	stw	zero,12(r16)
   10278:	30c0151e 	bne	r6,r3,102d0 <_calloc_r+0xc4>
   1027c:	80000415 	stw	zero,16(r16)
   10280:	80800604 	addi	r2,r16,24
   10284:	80000515 	stw	zero,20(r16)
   10288:	00000106 	br	10290 <_calloc_r+0x84>
   1028c:	8005883a 	mov	r2,r16
   10290:	10000015 	stw	zero,0(r2)
   10294:	10000115 	stw	zero,4(r2)
   10298:	10000215 	stw	zero,8(r2)
   1029c:	8005883a 	mov	r2,r16
   102a0:	dfc00117 	ldw	ra,4(sp)
   102a4:	dc000017 	ldw	r16,0(sp)
   102a8:	dec00204 	addi	sp,sp,8
   102ac:	f800283a 	ret
   102b0:	000b883a 	mov	r5,zero
   102b4:	8009883a 	mov	r4,r16
   102b8:	000d0900 	call	d090 <memset>
   102bc:	8005883a 	mov	r2,r16
   102c0:	dfc00117 	ldw	ra,4(sp)
   102c4:	dc000017 	ldw	r16,0(sp)
   102c8:	dec00204 	addi	sp,sp,8
   102cc:	f800283a 	ret
   102d0:	80800404 	addi	r2,r16,16
   102d4:	003fee06 	br	10290 <__alt_exception_stack_pointer+0xf8010290>
   102d8:	80800204 	addi	r2,r16,8
   102dc:	003fec06 	br	10290 <__alt_exception_stack_pointer+0xf8010290>
   102e0:	0005883a 	mov	r2,zero
   102e4:	003fee06 	br	102a0 <__alt_exception_stack_pointer+0xf80102a0>

000102e8 <_fclose_r>:
   102e8:	28003926 	beq	r5,zero,103d0 <_fclose_r+0xe8>
   102ec:	defffc04 	addi	sp,sp,-16
   102f0:	dc400115 	stw	r17,4(sp)
   102f4:	dc000015 	stw	r16,0(sp)
   102f8:	dfc00315 	stw	ra,12(sp)
   102fc:	dc800215 	stw	r18,8(sp)
   10300:	2023883a 	mov	r17,r4
   10304:	2821883a 	mov	r16,r5
   10308:	20000226 	beq	r4,zero,10314 <_fclose_r+0x2c>
   1030c:	20800e17 	ldw	r2,56(r4)
   10310:	10002726 	beq	r2,zero,103b0 <_fclose_r+0xc8>
   10314:	8080030f 	ldh	r2,12(r16)
   10318:	1000071e 	bne	r2,zero,10338 <_fclose_r+0x50>
   1031c:	0005883a 	mov	r2,zero
   10320:	dfc00317 	ldw	ra,12(sp)
   10324:	dc800217 	ldw	r18,8(sp)
   10328:	dc400117 	ldw	r17,4(sp)
   1032c:	dc000017 	ldw	r16,0(sp)
   10330:	dec00404 	addi	sp,sp,16
   10334:	f800283a 	ret
   10338:	800b883a 	mov	r5,r16
   1033c:	8809883a 	mov	r4,r17
   10340:	000b9940 	call	b994 <__sflush_r>
   10344:	1025883a 	mov	r18,r2
   10348:	80800b17 	ldw	r2,44(r16)
   1034c:	10000426 	beq	r2,zero,10360 <_fclose_r+0x78>
   10350:	81400717 	ldw	r5,28(r16)
   10354:	8809883a 	mov	r4,r17
   10358:	103ee83a 	callr	r2
   1035c:	10001616 	blt	r2,zero,103b8 <_fclose_r+0xd0>
   10360:	8080030b 	ldhu	r2,12(r16)
   10364:	1080200c 	andi	r2,r2,128
   10368:	1000151e 	bne	r2,zero,103c0 <_fclose_r+0xd8>
   1036c:	81400c17 	ldw	r5,48(r16)
   10370:	28000526 	beq	r5,zero,10388 <_fclose_r+0xa0>
   10374:	80801004 	addi	r2,r16,64
   10378:	28800226 	beq	r5,r2,10384 <_fclose_r+0x9c>
   1037c:	8809883a 	mov	r4,r17
   10380:	000c1100 	call	c110 <_free_r>
   10384:	80000c15 	stw	zero,48(r16)
   10388:	81401117 	ldw	r5,68(r16)
   1038c:	28000326 	beq	r5,zero,1039c <_fclose_r+0xb4>
   10390:	8809883a 	mov	r4,r17
   10394:	000c1100 	call	c110 <_free_r>
   10398:	80001115 	stw	zero,68(r16)
   1039c:	000bfac0 	call	bfac <__sfp_lock_acquire>
   103a0:	8000030d 	sth	zero,12(r16)
   103a4:	000bfb00 	call	bfb0 <__sfp_lock_release>
   103a8:	9005883a 	mov	r2,r18
   103ac:	003fdc06 	br	10320 <__alt_exception_stack_pointer+0xf8010320>
   103b0:	000bf9c0 	call	bf9c <__sinit>
   103b4:	003fd706 	br	10314 <__alt_exception_stack_pointer+0xf8010314>
   103b8:	04bfffc4 	movi	r18,-1
   103bc:	003fe806 	br	10360 <__alt_exception_stack_pointer+0xf8010360>
   103c0:	81400417 	ldw	r5,16(r16)
   103c4:	8809883a 	mov	r4,r17
   103c8:	000c1100 	call	c110 <_free_r>
   103cc:	003fe706 	br	1036c <__alt_exception_stack_pointer+0xf801036c>
   103d0:	0005883a 	mov	r2,zero
   103d4:	f800283a 	ret

000103d8 <fclose>:
   103d8:	008000b4 	movhi	r2,2
   103dc:	10a16a04 	addi	r2,r2,-31320
   103e0:	200b883a 	mov	r5,r4
   103e4:	11000017 	ldw	r4,0(r2)
   103e8:	00102e81 	jmpi	102e8 <_fclose_r>

000103ec <__fputwc>:
   103ec:	defff804 	addi	sp,sp,-32
   103f0:	dcc00415 	stw	r19,16(sp)
   103f4:	dc800315 	stw	r18,12(sp)
   103f8:	dc000115 	stw	r16,4(sp)
   103fc:	dfc00715 	stw	ra,28(sp)
   10400:	dd400615 	stw	r21,24(sp)
   10404:	dd000515 	stw	r20,20(sp)
   10408:	dc400215 	stw	r17,8(sp)
   1040c:	2027883a 	mov	r19,r4
   10410:	2825883a 	mov	r18,r5
   10414:	3021883a 	mov	r16,r6
   10418:	000caf80 	call	caf8 <__locale_mb_cur_max>
   1041c:	00c00044 	movi	r3,1
   10420:	10c03e26 	beq	r2,r3,1051c <__fputwc+0x130>
   10424:	81c01704 	addi	r7,r16,92
   10428:	900d883a 	mov	r6,r18
   1042c:	d80b883a 	mov	r5,sp
   10430:	9809883a 	mov	r4,r19
   10434:	00108bc0 	call	108bc <_wcrtomb_r>
   10438:	1029883a 	mov	r20,r2
   1043c:	00bfffc4 	movi	r2,-1
   10440:	a0802026 	beq	r20,r2,104c4 <__fputwc+0xd8>
   10444:	d9400003 	ldbu	r5,0(sp)
   10448:	a0001c26 	beq	r20,zero,104bc <__fputwc+0xd0>
   1044c:	0023883a 	mov	r17,zero
   10450:	05400284 	movi	r21,10
   10454:	00000906 	br	1047c <__fputwc+0x90>
   10458:	80800017 	ldw	r2,0(r16)
   1045c:	11400005 	stb	r5,0(r2)
   10460:	80c00017 	ldw	r3,0(r16)
   10464:	18c00044 	addi	r3,r3,1
   10468:	80c00015 	stw	r3,0(r16)
   1046c:	8c400044 	addi	r17,r17,1
   10470:	dc45883a 	add	r2,sp,r17
   10474:	8d00112e 	bgeu	r17,r20,104bc <__fputwc+0xd0>
   10478:	11400003 	ldbu	r5,0(r2)
   1047c:	80c00217 	ldw	r3,8(r16)
   10480:	18ffffc4 	addi	r3,r3,-1
   10484:	80c00215 	stw	r3,8(r16)
   10488:	183ff30e 	bge	r3,zero,10458 <__alt_exception_stack_pointer+0xf8010458>
   1048c:	80800617 	ldw	r2,24(r16)
   10490:	18801916 	blt	r3,r2,104f8 <__fputwc+0x10c>
   10494:	80800017 	ldw	r2,0(r16)
   10498:	11400005 	stb	r5,0(r2)
   1049c:	80800017 	ldw	r2,0(r16)
   104a0:	10c00003 	ldbu	r3,0(r2)
   104a4:	10800044 	addi	r2,r2,1
   104a8:	1d402326 	beq	r3,r21,10538 <__fputwc+0x14c>
   104ac:	80800015 	stw	r2,0(r16)
   104b0:	8c400044 	addi	r17,r17,1
   104b4:	dc45883a 	add	r2,sp,r17
   104b8:	8d3fef36 	bltu	r17,r20,10478 <__alt_exception_stack_pointer+0xf8010478>
   104bc:	9005883a 	mov	r2,r18
   104c0:	00000406 	br	104d4 <__fputwc+0xe8>
   104c4:	80c0030b 	ldhu	r3,12(r16)
   104c8:	a005883a 	mov	r2,r20
   104cc:	18c01014 	ori	r3,r3,64
   104d0:	80c0030d 	sth	r3,12(r16)
   104d4:	dfc00717 	ldw	ra,28(sp)
   104d8:	dd400617 	ldw	r21,24(sp)
   104dc:	dd000517 	ldw	r20,20(sp)
   104e0:	dcc00417 	ldw	r19,16(sp)
   104e4:	dc800317 	ldw	r18,12(sp)
   104e8:	dc400217 	ldw	r17,8(sp)
   104ec:	dc000117 	ldw	r16,4(sp)
   104f0:	dec00804 	addi	sp,sp,32
   104f4:	f800283a 	ret
   104f8:	800d883a 	mov	r6,r16
   104fc:	29403fcc 	andi	r5,r5,255
   10500:	9809883a 	mov	r4,r19
   10504:	00107640 	call	10764 <__swbuf_r>
   10508:	10bfffe0 	cmpeqi	r2,r2,-1
   1050c:	10803fcc 	andi	r2,r2,255
   10510:	103fd626 	beq	r2,zero,1046c <__alt_exception_stack_pointer+0xf801046c>
   10514:	00bfffc4 	movi	r2,-1
   10518:	003fee06 	br	104d4 <__alt_exception_stack_pointer+0xf80104d4>
   1051c:	90ffffc4 	addi	r3,r18,-1
   10520:	01003f84 	movi	r4,254
   10524:	20ffbf36 	bltu	r4,r3,10424 <__alt_exception_stack_pointer+0xf8010424>
   10528:	900b883a 	mov	r5,r18
   1052c:	dc800005 	stb	r18,0(sp)
   10530:	1029883a 	mov	r20,r2
   10534:	003fc506 	br	1044c <__alt_exception_stack_pointer+0xf801044c>
   10538:	800d883a 	mov	r6,r16
   1053c:	a80b883a 	mov	r5,r21
   10540:	9809883a 	mov	r4,r19
   10544:	00107640 	call	10764 <__swbuf_r>
   10548:	10bfffe0 	cmpeqi	r2,r2,-1
   1054c:	003fef06 	br	1050c <__alt_exception_stack_pointer+0xf801050c>

00010550 <_fputwc_r>:
   10550:	3080030b 	ldhu	r2,12(r6)
   10554:	10c8000c 	andi	r3,r2,8192
   10558:	1800051e 	bne	r3,zero,10570 <_fputwc_r+0x20>
   1055c:	30c01917 	ldw	r3,100(r6)
   10560:	10880014 	ori	r2,r2,8192
   10564:	3080030d 	sth	r2,12(r6)
   10568:	18880014 	ori	r2,r3,8192
   1056c:	30801915 	stw	r2,100(r6)
   10570:	00103ec1 	jmpi	103ec <__fputwc>

00010574 <fputwc>:
   10574:	008000b4 	movhi	r2,2
   10578:	defffc04 	addi	sp,sp,-16
   1057c:	10a16a04 	addi	r2,r2,-31320
   10580:	dc000115 	stw	r16,4(sp)
   10584:	14000017 	ldw	r16,0(r2)
   10588:	dc400215 	stw	r17,8(sp)
   1058c:	dfc00315 	stw	ra,12(sp)
   10590:	2023883a 	mov	r17,r4
   10594:	80000226 	beq	r16,zero,105a0 <fputwc+0x2c>
   10598:	80800e17 	ldw	r2,56(r16)
   1059c:	10001026 	beq	r2,zero,105e0 <fputwc+0x6c>
   105a0:	2880030b 	ldhu	r2,12(r5)
   105a4:	10c8000c 	andi	r3,r2,8192
   105a8:	1800051e 	bne	r3,zero,105c0 <fputwc+0x4c>
   105ac:	28c01917 	ldw	r3,100(r5)
   105b0:	10880014 	ori	r2,r2,8192
   105b4:	2880030d 	sth	r2,12(r5)
   105b8:	18880014 	ori	r2,r3,8192
   105bc:	28801915 	stw	r2,100(r5)
   105c0:	280d883a 	mov	r6,r5
   105c4:	8009883a 	mov	r4,r16
   105c8:	880b883a 	mov	r5,r17
   105cc:	dfc00317 	ldw	ra,12(sp)
   105d0:	dc400217 	ldw	r17,8(sp)
   105d4:	dc000117 	ldw	r16,4(sp)
   105d8:	dec00404 	addi	sp,sp,16
   105dc:	00103ec1 	jmpi	103ec <__fputwc>
   105e0:	8009883a 	mov	r4,r16
   105e4:	d9400015 	stw	r5,0(sp)
   105e8:	000bf9c0 	call	bf9c <__sinit>
   105ec:	d9400017 	ldw	r5,0(sp)
   105f0:	003feb06 	br	105a0 <__alt_exception_stack_pointer+0xf80105a0>

000105f4 <_fstat_r>:
   105f4:	defffd04 	addi	sp,sp,-12
   105f8:	2805883a 	mov	r2,r5
   105fc:	dc000015 	stw	r16,0(sp)
   10600:	040000b4 	movhi	r16,2
   10604:	dc400115 	stw	r17,4(sp)
   10608:	8428a404 	addi	r16,r16,-23920
   1060c:	2023883a 	mov	r17,r4
   10610:	300b883a 	mov	r5,r6
   10614:	1009883a 	mov	r4,r2
   10618:	dfc00215 	stw	ra,8(sp)
   1061c:	80000015 	stw	zero,0(r16)
   10620:	00124fc0 	call	124fc <fstat>
   10624:	00ffffc4 	movi	r3,-1
   10628:	10c00526 	beq	r2,r3,10640 <_fstat_r+0x4c>
   1062c:	dfc00217 	ldw	ra,8(sp)
   10630:	dc400117 	ldw	r17,4(sp)
   10634:	dc000017 	ldw	r16,0(sp)
   10638:	dec00304 	addi	sp,sp,12
   1063c:	f800283a 	ret
   10640:	80c00017 	ldw	r3,0(r16)
   10644:	183ff926 	beq	r3,zero,1062c <__alt_exception_stack_pointer+0xf801062c>
   10648:	88c00015 	stw	r3,0(r17)
   1064c:	003ff706 	br	1062c <__alt_exception_stack_pointer+0xf801062c>

00010650 <_isatty_r>:
   10650:	defffd04 	addi	sp,sp,-12
   10654:	dc000015 	stw	r16,0(sp)
   10658:	040000b4 	movhi	r16,2
   1065c:	dc400115 	stw	r17,4(sp)
   10660:	8428a404 	addi	r16,r16,-23920
   10664:	2023883a 	mov	r17,r4
   10668:	2809883a 	mov	r4,r5
   1066c:	dfc00215 	stw	ra,8(sp)
   10670:	80000015 	stw	zero,0(r16)
   10674:	00125f00 	call	125f0 <isatty>
   10678:	00ffffc4 	movi	r3,-1
   1067c:	10c00526 	beq	r2,r3,10694 <_isatty_r+0x44>
   10680:	dfc00217 	ldw	ra,8(sp)
   10684:	dc400117 	ldw	r17,4(sp)
   10688:	dc000017 	ldw	r16,0(sp)
   1068c:	dec00304 	addi	sp,sp,12
   10690:	f800283a 	ret
   10694:	80c00017 	ldw	r3,0(r16)
   10698:	183ff926 	beq	r3,zero,10680 <__alt_exception_stack_pointer+0xf8010680>
   1069c:	88c00015 	stw	r3,0(r17)
   106a0:	003ff706 	br	10680 <__alt_exception_stack_pointer+0xf8010680>

000106a4 <_lseek_r>:
   106a4:	defffd04 	addi	sp,sp,-12
   106a8:	2805883a 	mov	r2,r5
   106ac:	dc000015 	stw	r16,0(sp)
   106b0:	040000b4 	movhi	r16,2
   106b4:	dc400115 	stw	r17,4(sp)
   106b8:	300b883a 	mov	r5,r6
   106bc:	8428a404 	addi	r16,r16,-23920
   106c0:	2023883a 	mov	r17,r4
   106c4:	380d883a 	mov	r6,r7
   106c8:	1009883a 	mov	r4,r2
   106cc:	dfc00215 	stw	ra,8(sp)
   106d0:	80000015 	stw	zero,0(r16)
   106d4:	00127c40 	call	127c4 <lseek>
   106d8:	00ffffc4 	movi	r3,-1
   106dc:	10c00526 	beq	r2,r3,106f4 <_lseek_r+0x50>
   106e0:	dfc00217 	ldw	ra,8(sp)
   106e4:	dc400117 	ldw	r17,4(sp)
   106e8:	dc000017 	ldw	r16,0(sp)
   106ec:	dec00304 	addi	sp,sp,12
   106f0:	f800283a 	ret
   106f4:	80c00017 	ldw	r3,0(r16)
   106f8:	183ff926 	beq	r3,zero,106e0 <__alt_exception_stack_pointer+0xf80106e0>
   106fc:	88c00015 	stw	r3,0(r17)
   10700:	003ff706 	br	106e0 <__alt_exception_stack_pointer+0xf80106e0>

00010704 <_read_r>:
   10704:	defffd04 	addi	sp,sp,-12
   10708:	2805883a 	mov	r2,r5
   1070c:	dc000015 	stw	r16,0(sp)
   10710:	040000b4 	movhi	r16,2
   10714:	dc400115 	stw	r17,4(sp)
   10718:	300b883a 	mov	r5,r6
   1071c:	8428a404 	addi	r16,r16,-23920
   10720:	2023883a 	mov	r17,r4
   10724:	380d883a 	mov	r6,r7
   10728:	1009883a 	mov	r4,r2
   1072c:	dfc00215 	stw	ra,8(sp)
   10730:	80000015 	stw	zero,0(r16)
   10734:	00129a00 	call	129a0 <read>
   10738:	00ffffc4 	movi	r3,-1
   1073c:	10c00526 	beq	r2,r3,10754 <_read_r+0x50>
   10740:	dfc00217 	ldw	ra,8(sp)
   10744:	dc400117 	ldw	r17,4(sp)
   10748:	dc000017 	ldw	r16,0(sp)
   1074c:	dec00304 	addi	sp,sp,12
   10750:	f800283a 	ret
   10754:	80c00017 	ldw	r3,0(r16)
   10758:	183ff926 	beq	r3,zero,10740 <__alt_exception_stack_pointer+0xf8010740>
   1075c:	88c00015 	stw	r3,0(r17)
   10760:	003ff706 	br	10740 <__alt_exception_stack_pointer+0xf8010740>

00010764 <__swbuf_r>:
   10764:	defffb04 	addi	sp,sp,-20
   10768:	dcc00315 	stw	r19,12(sp)
   1076c:	dc800215 	stw	r18,8(sp)
   10770:	dc000015 	stw	r16,0(sp)
   10774:	dfc00415 	stw	ra,16(sp)
   10778:	dc400115 	stw	r17,4(sp)
   1077c:	2025883a 	mov	r18,r4
   10780:	2827883a 	mov	r19,r5
   10784:	3021883a 	mov	r16,r6
   10788:	20000226 	beq	r4,zero,10794 <__swbuf_r+0x30>
   1078c:	20800e17 	ldw	r2,56(r4)
   10790:	10004226 	beq	r2,zero,1089c <__swbuf_r+0x138>
   10794:	80800617 	ldw	r2,24(r16)
   10798:	8100030b 	ldhu	r4,12(r16)
   1079c:	80800215 	stw	r2,8(r16)
   107a0:	2080020c 	andi	r2,r4,8
   107a4:	10003626 	beq	r2,zero,10880 <__swbuf_r+0x11c>
   107a8:	80c00417 	ldw	r3,16(r16)
   107ac:	18003426 	beq	r3,zero,10880 <__swbuf_r+0x11c>
   107b0:	2088000c 	andi	r2,r4,8192
   107b4:	9c403fcc 	andi	r17,r19,255
   107b8:	10001a26 	beq	r2,zero,10824 <__swbuf_r+0xc0>
   107bc:	80800017 	ldw	r2,0(r16)
   107c0:	81000517 	ldw	r4,20(r16)
   107c4:	10c7c83a 	sub	r3,r2,r3
   107c8:	1900200e 	bge	r3,r4,1084c <__swbuf_r+0xe8>
   107cc:	18c00044 	addi	r3,r3,1
   107d0:	81000217 	ldw	r4,8(r16)
   107d4:	11400044 	addi	r5,r2,1
   107d8:	81400015 	stw	r5,0(r16)
   107dc:	213fffc4 	addi	r4,r4,-1
   107e0:	81000215 	stw	r4,8(r16)
   107e4:	14c00005 	stb	r19,0(r2)
   107e8:	80800517 	ldw	r2,20(r16)
   107ec:	10c01e26 	beq	r2,r3,10868 <__swbuf_r+0x104>
   107f0:	8080030b 	ldhu	r2,12(r16)
   107f4:	1080004c 	andi	r2,r2,1
   107f8:	10000226 	beq	r2,zero,10804 <__swbuf_r+0xa0>
   107fc:	00800284 	movi	r2,10
   10800:	88801926 	beq	r17,r2,10868 <__swbuf_r+0x104>
   10804:	8805883a 	mov	r2,r17
   10808:	dfc00417 	ldw	ra,16(sp)
   1080c:	dcc00317 	ldw	r19,12(sp)
   10810:	dc800217 	ldw	r18,8(sp)
   10814:	dc400117 	ldw	r17,4(sp)
   10818:	dc000017 	ldw	r16,0(sp)
   1081c:	dec00504 	addi	sp,sp,20
   10820:	f800283a 	ret
   10824:	81401917 	ldw	r5,100(r16)
   10828:	00b7ffc4 	movi	r2,-8193
   1082c:	21080014 	ori	r4,r4,8192
   10830:	2884703a 	and	r2,r5,r2
   10834:	80801915 	stw	r2,100(r16)
   10838:	80800017 	ldw	r2,0(r16)
   1083c:	8100030d 	sth	r4,12(r16)
   10840:	81000517 	ldw	r4,20(r16)
   10844:	10c7c83a 	sub	r3,r2,r3
   10848:	193fe016 	blt	r3,r4,107cc <__alt_exception_stack_pointer+0xf80107cc>
   1084c:	800b883a 	mov	r5,r16
   10850:	9009883a 	mov	r4,r18
   10854:	000bbb00 	call	bbb0 <_fflush_r>
   10858:	1000071e 	bne	r2,zero,10878 <__swbuf_r+0x114>
   1085c:	80800017 	ldw	r2,0(r16)
   10860:	00c00044 	movi	r3,1
   10864:	003fda06 	br	107d0 <__alt_exception_stack_pointer+0xf80107d0>
   10868:	800b883a 	mov	r5,r16
   1086c:	9009883a 	mov	r4,r18
   10870:	000bbb00 	call	bbb0 <_fflush_r>
   10874:	103fe326 	beq	r2,zero,10804 <__alt_exception_stack_pointer+0xf8010804>
   10878:	00bfffc4 	movi	r2,-1
   1087c:	003fe206 	br	10808 <__alt_exception_stack_pointer+0xf8010808>
   10880:	800b883a 	mov	r5,r16
   10884:	9009883a 	mov	r4,r18
   10888:	0009f900 	call	9f90 <__swsetup_r>
   1088c:	103ffa1e 	bne	r2,zero,10878 <__alt_exception_stack_pointer+0xf8010878>
   10890:	8100030b 	ldhu	r4,12(r16)
   10894:	80c00417 	ldw	r3,16(r16)
   10898:	003fc506 	br	107b0 <__alt_exception_stack_pointer+0xf80107b0>
   1089c:	000bf9c0 	call	bf9c <__sinit>
   108a0:	003fbc06 	br	10794 <__alt_exception_stack_pointer+0xf8010794>

000108a4 <__swbuf>:
   108a4:	008000b4 	movhi	r2,2
   108a8:	10a16a04 	addi	r2,r2,-31320
   108ac:	280d883a 	mov	r6,r5
   108b0:	200b883a 	mov	r5,r4
   108b4:	11000017 	ldw	r4,0(r2)
   108b8:	00107641 	jmpi	10764 <__swbuf_r>

000108bc <_wcrtomb_r>:
   108bc:	defff604 	addi	sp,sp,-40
   108c0:	008000b4 	movhi	r2,2
   108c4:	dc800815 	stw	r18,32(sp)
   108c8:	dc400715 	stw	r17,28(sp)
   108cc:	dc000615 	stw	r16,24(sp)
   108d0:	10a16e04 	addi	r2,r2,-31304
   108d4:	dfc00915 	stw	ra,36(sp)
   108d8:	2021883a 	mov	r16,r4
   108dc:	3823883a 	mov	r17,r7
   108e0:	14800017 	ldw	r18,0(r2)
   108e4:	28001426 	beq	r5,zero,10938 <_wcrtomb_r+0x7c>
   108e8:	d9400415 	stw	r5,16(sp)
   108ec:	d9800515 	stw	r6,20(sp)
   108f0:	000caec0 	call	caec <__locale_charset>
   108f4:	d9800517 	ldw	r6,20(sp)
   108f8:	d9400417 	ldw	r5,16(sp)
   108fc:	100f883a 	mov	r7,r2
   10900:	dc400015 	stw	r17,0(sp)
   10904:	8009883a 	mov	r4,r16
   10908:	903ee83a 	callr	r18
   1090c:	00ffffc4 	movi	r3,-1
   10910:	10c0031e 	bne	r2,r3,10920 <_wcrtomb_r+0x64>
   10914:	88000015 	stw	zero,0(r17)
   10918:	00c02284 	movi	r3,138
   1091c:	80c00015 	stw	r3,0(r16)
   10920:	dfc00917 	ldw	ra,36(sp)
   10924:	dc800817 	ldw	r18,32(sp)
   10928:	dc400717 	ldw	r17,28(sp)
   1092c:	dc000617 	ldw	r16,24(sp)
   10930:	dec00a04 	addi	sp,sp,40
   10934:	f800283a 	ret
   10938:	000caec0 	call	caec <__locale_charset>
   1093c:	100f883a 	mov	r7,r2
   10940:	dc400015 	stw	r17,0(sp)
   10944:	000d883a 	mov	r6,zero
   10948:	d9400104 	addi	r5,sp,4
   1094c:	8009883a 	mov	r4,r16
   10950:	903ee83a 	callr	r18
   10954:	003fed06 	br	1090c <__alt_exception_stack_pointer+0xf801090c>

00010958 <wcrtomb>:
   10958:	defff604 	addi	sp,sp,-40
   1095c:	008000b4 	movhi	r2,2
   10960:	dc800615 	stw	r18,24(sp)
   10964:	dc400515 	stw	r17,20(sp)
   10968:	10a16a04 	addi	r2,r2,-31320
   1096c:	dfc00915 	stw	ra,36(sp)
   10970:	dd000815 	stw	r20,32(sp)
   10974:	dcc00715 	stw	r19,28(sp)
   10978:	dc000415 	stw	r16,16(sp)
   1097c:	3025883a 	mov	r18,r6
   10980:	14400017 	ldw	r17,0(r2)
   10984:	20001926 	beq	r4,zero,109ec <wcrtomb+0x94>
   10988:	008000b4 	movhi	r2,2
   1098c:	10a16e04 	addi	r2,r2,-31304
   10990:	15000017 	ldw	r20,0(r2)
   10994:	2021883a 	mov	r16,r4
   10998:	2827883a 	mov	r19,r5
   1099c:	000caec0 	call	caec <__locale_charset>
   109a0:	100f883a 	mov	r7,r2
   109a4:	dc800015 	stw	r18,0(sp)
   109a8:	980d883a 	mov	r6,r19
   109ac:	800b883a 	mov	r5,r16
   109b0:	8809883a 	mov	r4,r17
   109b4:	a03ee83a 	callr	r20
   109b8:	00ffffc4 	movi	r3,-1
   109bc:	10c0031e 	bne	r2,r3,109cc <wcrtomb+0x74>
   109c0:	90000015 	stw	zero,0(r18)
   109c4:	00c02284 	movi	r3,138
   109c8:	88c00015 	stw	r3,0(r17)
   109cc:	dfc00917 	ldw	ra,36(sp)
   109d0:	dd000817 	ldw	r20,32(sp)
   109d4:	dcc00717 	ldw	r19,28(sp)
   109d8:	dc800617 	ldw	r18,24(sp)
   109dc:	dc400517 	ldw	r17,20(sp)
   109e0:	dc000417 	ldw	r16,16(sp)
   109e4:	dec00a04 	addi	sp,sp,40
   109e8:	f800283a 	ret
   109ec:	008000b4 	movhi	r2,2
   109f0:	10a16e04 	addi	r2,r2,-31304
   109f4:	14000017 	ldw	r16,0(r2)
   109f8:	000caec0 	call	caec <__locale_charset>
   109fc:	100f883a 	mov	r7,r2
   10a00:	dc800015 	stw	r18,0(sp)
   10a04:	000d883a 	mov	r6,zero
   10a08:	d9400104 	addi	r5,sp,4
   10a0c:	8809883a 	mov	r4,r17
   10a10:	803ee83a 	callr	r16
   10a14:	003fe806 	br	109b8 <__alt_exception_stack_pointer+0xf80109b8>

00010a18 <__ascii_wctomb>:
   10a18:	28000526 	beq	r5,zero,10a30 <__ascii_wctomb+0x18>
   10a1c:	00803fc4 	movi	r2,255
   10a20:	11800536 	bltu	r2,r6,10a38 <__ascii_wctomb+0x20>
   10a24:	29800005 	stb	r6,0(r5)
   10a28:	00800044 	movi	r2,1
   10a2c:	f800283a 	ret
   10a30:	0005883a 	mov	r2,zero
   10a34:	f800283a 	ret
   10a38:	00802284 	movi	r2,138
   10a3c:	20800015 	stw	r2,0(r4)
   10a40:	00bfffc4 	movi	r2,-1
   10a44:	f800283a 	ret

00010a48 <_wctomb_r>:
   10a48:	008000b4 	movhi	r2,2
   10a4c:	defff904 	addi	sp,sp,-28
   10a50:	10a16e04 	addi	r2,r2,-31304
   10a54:	dfc00615 	stw	ra,24(sp)
   10a58:	dc400515 	stw	r17,20(sp)
   10a5c:	dc000415 	stw	r16,16(sp)
   10a60:	3823883a 	mov	r17,r7
   10a64:	14000017 	ldw	r16,0(r2)
   10a68:	d9000115 	stw	r4,4(sp)
   10a6c:	d9400215 	stw	r5,8(sp)
   10a70:	d9800315 	stw	r6,12(sp)
   10a74:	000caec0 	call	caec <__locale_charset>
   10a78:	d9800317 	ldw	r6,12(sp)
   10a7c:	d9400217 	ldw	r5,8(sp)
   10a80:	d9000117 	ldw	r4,4(sp)
   10a84:	100f883a 	mov	r7,r2
   10a88:	dc400015 	stw	r17,0(sp)
   10a8c:	803ee83a 	callr	r16
   10a90:	dfc00617 	ldw	ra,24(sp)
   10a94:	dc400517 	ldw	r17,20(sp)
   10a98:	dc000417 	ldw	r16,16(sp)
   10a9c:	dec00704 	addi	sp,sp,28
   10aa0:	f800283a 	ret

00010aa4 <__udivdi3>:
   10aa4:	defff404 	addi	sp,sp,-48
   10aa8:	dcc00515 	stw	r19,20(sp)
   10aac:	dc000215 	stw	r16,8(sp)
   10ab0:	dfc00b15 	stw	ra,44(sp)
   10ab4:	df000a15 	stw	fp,40(sp)
   10ab8:	ddc00915 	stw	r23,36(sp)
   10abc:	dd800815 	stw	r22,32(sp)
   10ac0:	dd400715 	stw	r21,28(sp)
   10ac4:	dd000615 	stw	r20,24(sp)
   10ac8:	dc800415 	stw	r18,16(sp)
   10acc:	dc400315 	stw	r17,12(sp)
   10ad0:	2027883a 	mov	r19,r4
   10ad4:	2821883a 	mov	r16,r5
   10ad8:	3800461e 	bne	r7,zero,10bf4 <__udivdi3+0x150>
   10adc:	3023883a 	mov	r17,r6
   10ae0:	2025883a 	mov	r18,r4
   10ae4:	2980572e 	bgeu	r5,r6,10c44 <__udivdi3+0x1a0>
   10ae8:	00bfffd4 	movui	r2,65535
   10aec:	282d883a 	mov	r22,r5
   10af0:	1180b236 	bltu	r2,r6,10dbc <__udivdi3+0x318>
   10af4:	00803fc4 	movi	r2,255
   10af8:	1185803a 	cmpltu	r2,r2,r6
   10afc:	100490fa 	slli	r2,r2,3
   10b00:	3086d83a 	srl	r3,r6,r2
   10b04:	01000074 	movhi	r4,1
   10b08:	21198f04 	addi	r4,r4,26172
   10b0c:	20c7883a 	add	r3,r4,r3
   10b10:	18c00003 	ldbu	r3,0(r3)
   10b14:	1885883a 	add	r2,r3,r2
   10b18:	00c00804 	movi	r3,32
   10b1c:	1887c83a 	sub	r3,r3,r2
   10b20:	18000526 	beq	r3,zero,10b38 <__udivdi3+0x94>
   10b24:	80e0983a 	sll	r16,r16,r3
   10b28:	9884d83a 	srl	r2,r19,r2
   10b2c:	30e2983a 	sll	r17,r6,r3
   10b30:	98e4983a 	sll	r18,r19,r3
   10b34:	142cb03a 	or	r22,r2,r16
   10b38:	882ad43a 	srli	r21,r17,16
   10b3c:	b009883a 	mov	r4,r22
   10b40:	8d3fffcc 	andi	r20,r17,65535
   10b44:	a80b883a 	mov	r5,r21
   10b48:	00053700 	call	5370 <__umodsi3>
   10b4c:	b009883a 	mov	r4,r22
   10b50:	a80b883a 	mov	r5,r21
   10b54:	1027883a 	mov	r19,r2
   10b58:	000530c0 	call	530c <__udivsi3>
   10b5c:	100b883a 	mov	r5,r2
   10b60:	a009883a 	mov	r4,r20
   10b64:	102d883a 	mov	r22,r2
   10b68:	00053c80 	call	53c8 <__mulsi3>
   10b6c:	9826943a 	slli	r19,r19,16
   10b70:	9006d43a 	srli	r3,r18,16
   10b74:	1cc6b03a 	or	r3,r3,r19
   10b78:	1880052e 	bgeu	r3,r2,10b90 <__udivdi3+0xec>
   10b7c:	1c47883a 	add	r3,r3,r17
   10b80:	b13fffc4 	addi	r4,r22,-1
   10b84:	1c400136 	bltu	r3,r17,10b8c <__udivdi3+0xe8>
   10b88:	18814236 	bltu	r3,r2,11094 <__udivdi3+0x5f0>
   10b8c:	202d883a 	mov	r22,r4
   10b90:	18a1c83a 	sub	r16,r3,r2
   10b94:	8009883a 	mov	r4,r16
   10b98:	a80b883a 	mov	r5,r21
   10b9c:	00053700 	call	5370 <__umodsi3>
   10ba0:	1027883a 	mov	r19,r2
   10ba4:	8009883a 	mov	r4,r16
   10ba8:	a80b883a 	mov	r5,r21
   10bac:	9826943a 	slli	r19,r19,16
   10bb0:	000530c0 	call	530c <__udivsi3>
   10bb4:	100b883a 	mov	r5,r2
   10bb8:	a009883a 	mov	r4,r20
   10bbc:	94bfffcc 	andi	r18,r18,65535
   10bc0:	1021883a 	mov	r16,r2
   10bc4:	94e4b03a 	or	r18,r18,r19
   10bc8:	00053c80 	call	53c8 <__mulsi3>
   10bcc:	9080052e 	bgeu	r18,r2,10be4 <__udivdi3+0x140>
   10bd0:	8ca5883a 	add	r18,r17,r18
   10bd4:	80ffffc4 	addi	r3,r16,-1
   10bd8:	94410c36 	bltu	r18,r17,1100c <__udivdi3+0x568>
   10bdc:	90810b2e 	bgeu	r18,r2,1100c <__udivdi3+0x568>
   10be0:	843fff84 	addi	r16,r16,-2
   10be4:	b004943a 	slli	r2,r22,16
   10be8:	0007883a 	mov	r3,zero
   10bec:	1404b03a 	or	r2,r2,r16
   10bf0:	00005e06 	br	10d6c <__udivdi3+0x2c8>
   10bf4:	29c05b36 	bltu	r5,r7,10d64 <__udivdi3+0x2c0>
   10bf8:	00bfffd4 	movui	r2,65535
   10bfc:	11c0672e 	bgeu	r2,r7,10d9c <__udivdi3+0x2f8>
   10c00:	00804034 	movhi	r2,256
   10c04:	10bfffc4 	addi	r2,r2,-1
   10c08:	11c10a36 	bltu	r2,r7,11034 <__udivdi3+0x590>
   10c0c:	00800404 	movi	r2,16
   10c10:	3886d83a 	srl	r3,r7,r2
   10c14:	01000074 	movhi	r4,1
   10c18:	21198f04 	addi	r4,r4,26172
   10c1c:	20c7883a 	add	r3,r4,r3
   10c20:	18c00003 	ldbu	r3,0(r3)
   10c24:	05c00804 	movi	r23,32
   10c28:	1885883a 	add	r2,r3,r2
   10c2c:	b8afc83a 	sub	r23,r23,r2
   10c30:	b800671e 	bne	r23,zero,10dd0 <__udivdi3+0x32c>
   10c34:	3c010536 	bltu	r7,r16,1104c <__udivdi3+0x5a8>
   10c38:	9985403a 	cmpgeu	r2,r19,r6
   10c3c:	0007883a 	mov	r3,zero
   10c40:	00004a06 	br	10d6c <__udivdi3+0x2c8>
   10c44:	3000041e 	bne	r6,zero,10c58 <__udivdi3+0x1b4>
   10c48:	000b883a 	mov	r5,zero
   10c4c:	01000044 	movi	r4,1
   10c50:	000530c0 	call	530c <__udivsi3>
   10c54:	1023883a 	mov	r17,r2
   10c58:	00bfffd4 	movui	r2,65535
   10c5c:	1440532e 	bgeu	r2,r17,10dac <__udivdi3+0x308>
   10c60:	00804034 	movhi	r2,256
   10c64:	10bfffc4 	addi	r2,r2,-1
   10c68:	1440f436 	bltu	r2,r17,1103c <__udivdi3+0x598>
   10c6c:	00800404 	movi	r2,16
   10c70:	8886d83a 	srl	r3,r17,r2
   10c74:	01000074 	movhi	r4,1
   10c78:	21198f04 	addi	r4,r4,26172
   10c7c:	20c7883a 	add	r3,r4,r3
   10c80:	18c00003 	ldbu	r3,0(r3)
   10c84:	1885883a 	add	r2,r3,r2
   10c88:	00c00804 	movi	r3,32
   10c8c:	1887c83a 	sub	r3,r3,r2
   10c90:	1800a51e 	bne	r3,zero,10f28 <__udivdi3+0x484>
   10c94:	882ad43a 	srli	r21,r17,16
   10c98:	8461c83a 	sub	r16,r16,r17
   10c9c:	8d3fffcc 	andi	r20,r17,65535
   10ca0:	00c00044 	movi	r3,1
   10ca4:	a80b883a 	mov	r5,r21
   10ca8:	8009883a 	mov	r4,r16
   10cac:	d8c00115 	stw	r3,4(sp)
   10cb0:	00053700 	call	5370 <__umodsi3>
   10cb4:	a80b883a 	mov	r5,r21
   10cb8:	8009883a 	mov	r4,r16
   10cbc:	1027883a 	mov	r19,r2
   10cc0:	000530c0 	call	530c <__udivsi3>
   10cc4:	a00b883a 	mov	r5,r20
   10cc8:	1009883a 	mov	r4,r2
   10ccc:	102d883a 	mov	r22,r2
   10cd0:	00053c80 	call	53c8 <__mulsi3>
   10cd4:	9826943a 	slli	r19,r19,16
   10cd8:	900ed43a 	srli	r7,r18,16
   10cdc:	d8c00117 	ldw	r3,4(sp)
   10ce0:	3cceb03a 	or	r7,r7,r19
   10ce4:	3880052e 	bgeu	r7,r2,10cfc <__udivdi3+0x258>
   10ce8:	3c4f883a 	add	r7,r7,r17
   10cec:	b13fffc4 	addi	r4,r22,-1
   10cf0:	3c400136 	bltu	r7,r17,10cf8 <__udivdi3+0x254>
   10cf4:	3880e436 	bltu	r7,r2,11088 <__udivdi3+0x5e4>
   10cf8:	202d883a 	mov	r22,r4
   10cfc:	38a1c83a 	sub	r16,r7,r2
   10d00:	8009883a 	mov	r4,r16
   10d04:	a80b883a 	mov	r5,r21
   10d08:	d8c00115 	stw	r3,4(sp)
   10d0c:	00053700 	call	5370 <__umodsi3>
   10d10:	1027883a 	mov	r19,r2
   10d14:	8009883a 	mov	r4,r16
   10d18:	a80b883a 	mov	r5,r21
   10d1c:	9826943a 	slli	r19,r19,16
   10d20:	000530c0 	call	530c <__udivsi3>
   10d24:	a00b883a 	mov	r5,r20
   10d28:	1009883a 	mov	r4,r2
   10d2c:	94bfffcc 	andi	r18,r18,65535
   10d30:	1021883a 	mov	r16,r2
   10d34:	94e4b03a 	or	r18,r18,r19
   10d38:	00053c80 	call	53c8 <__mulsi3>
   10d3c:	d8c00117 	ldw	r3,4(sp)
   10d40:	9080052e 	bgeu	r18,r2,10d58 <__udivdi3+0x2b4>
   10d44:	8ca5883a 	add	r18,r17,r18
   10d48:	813fffc4 	addi	r4,r16,-1
   10d4c:	9440ad36 	bltu	r18,r17,11004 <__udivdi3+0x560>
   10d50:	9080ac2e 	bgeu	r18,r2,11004 <__udivdi3+0x560>
   10d54:	843fff84 	addi	r16,r16,-2
   10d58:	b004943a 	slli	r2,r22,16
   10d5c:	1404b03a 	or	r2,r2,r16
   10d60:	00000206 	br	10d6c <__udivdi3+0x2c8>
   10d64:	0007883a 	mov	r3,zero
   10d68:	0005883a 	mov	r2,zero
   10d6c:	dfc00b17 	ldw	ra,44(sp)
   10d70:	df000a17 	ldw	fp,40(sp)
   10d74:	ddc00917 	ldw	r23,36(sp)
   10d78:	dd800817 	ldw	r22,32(sp)
   10d7c:	dd400717 	ldw	r21,28(sp)
   10d80:	dd000617 	ldw	r20,24(sp)
   10d84:	dcc00517 	ldw	r19,20(sp)
   10d88:	dc800417 	ldw	r18,16(sp)
   10d8c:	dc400317 	ldw	r17,12(sp)
   10d90:	dc000217 	ldw	r16,8(sp)
   10d94:	dec00c04 	addi	sp,sp,48
   10d98:	f800283a 	ret
   10d9c:	00803fc4 	movi	r2,255
   10da0:	11c5803a 	cmpltu	r2,r2,r7
   10da4:	100490fa 	slli	r2,r2,3
   10da8:	003f9906 	br	10c10 <__alt_exception_stack_pointer+0xf8010c10>
   10dac:	00803fc4 	movi	r2,255
   10db0:	1445803a 	cmpltu	r2,r2,r17
   10db4:	100490fa 	slli	r2,r2,3
   10db8:	003fad06 	br	10c70 <__alt_exception_stack_pointer+0xf8010c70>
   10dbc:	00804034 	movhi	r2,256
   10dc0:	10bfffc4 	addi	r2,r2,-1
   10dc4:	11809f36 	bltu	r2,r6,11044 <__udivdi3+0x5a0>
   10dc8:	00800404 	movi	r2,16
   10dcc:	003f4c06 	br	10b00 <__alt_exception_stack_pointer+0xf8010b00>
   10dd0:	3dce983a 	sll	r7,r7,r23
   10dd4:	30b8d83a 	srl	fp,r6,r2
   10dd8:	80a2d83a 	srl	r17,r16,r2
   10ddc:	35cc983a 	sll	r6,r6,r23
   10de0:	3f38b03a 	or	fp,r7,fp
   10de4:	e024d43a 	srli	r18,fp,16
   10de8:	9884d83a 	srl	r2,r19,r2
   10dec:	85e0983a 	sll	r16,r16,r23
   10df0:	8809883a 	mov	r4,r17
   10df4:	900b883a 	mov	r5,r18
   10df8:	d9800015 	stw	r6,0(sp)
   10dfc:	1420b03a 	or	r16,r2,r16
   10e00:	00053700 	call	5370 <__umodsi3>
   10e04:	900b883a 	mov	r5,r18
   10e08:	8809883a 	mov	r4,r17
   10e0c:	1029883a 	mov	r20,r2
   10e10:	e5bfffcc 	andi	r22,fp,65535
   10e14:	000530c0 	call	530c <__udivsi3>
   10e18:	100b883a 	mov	r5,r2
   10e1c:	b009883a 	mov	r4,r22
   10e20:	102b883a 	mov	r21,r2
   10e24:	00053c80 	call	53c8 <__mulsi3>
   10e28:	a028943a 	slli	r20,r20,16
   10e2c:	8006d43a 	srli	r3,r16,16
   10e30:	1d06b03a 	or	r3,r3,r20
   10e34:	1880042e 	bgeu	r3,r2,10e48 <__udivdi3+0x3a4>
   10e38:	1f07883a 	add	r3,r3,fp
   10e3c:	a93fffc4 	addi	r4,r21,-1
   10e40:	1f00892e 	bgeu	r3,fp,11068 <__udivdi3+0x5c4>
   10e44:	202b883a 	mov	r21,r4
   10e48:	18a3c83a 	sub	r17,r3,r2
   10e4c:	8809883a 	mov	r4,r17
   10e50:	900b883a 	mov	r5,r18
   10e54:	00053700 	call	5370 <__umodsi3>
   10e58:	1029883a 	mov	r20,r2
   10e5c:	8809883a 	mov	r4,r17
   10e60:	900b883a 	mov	r5,r18
   10e64:	a028943a 	slli	r20,r20,16
   10e68:	000530c0 	call	530c <__udivsi3>
   10e6c:	100b883a 	mov	r5,r2
   10e70:	b009883a 	mov	r4,r22
   10e74:	843fffcc 	andi	r16,r16,65535
   10e78:	1023883a 	mov	r17,r2
   10e7c:	8520b03a 	or	r16,r16,r20
   10e80:	00053c80 	call	53c8 <__mulsi3>
   10e84:	8080042e 	bgeu	r16,r2,10e98 <__udivdi3+0x3f4>
   10e88:	8721883a 	add	r16,r16,fp
   10e8c:	88ffffc4 	addi	r3,r17,-1
   10e90:	8700712e 	bgeu	r16,fp,11058 <__udivdi3+0x5b4>
   10e94:	1823883a 	mov	r17,r3
   10e98:	a80e943a 	slli	r7,r21,16
   10e9c:	d8c00017 	ldw	r3,0(sp)
   10ea0:	80a1c83a 	sub	r16,r16,r2
   10ea4:	3c64b03a 	or	r18,r7,r17
   10ea8:	1d3fffcc 	andi	r20,r3,65535
   10eac:	9022d43a 	srli	r17,r18,16
   10eb0:	95bfffcc 	andi	r22,r18,65535
   10eb4:	a00b883a 	mov	r5,r20
   10eb8:	b009883a 	mov	r4,r22
   10ebc:	182ad43a 	srli	r21,r3,16
   10ec0:	00053c80 	call	53c8 <__mulsi3>
   10ec4:	a00b883a 	mov	r5,r20
   10ec8:	8809883a 	mov	r4,r17
   10ecc:	1039883a 	mov	fp,r2
   10ed0:	00053c80 	call	53c8 <__mulsi3>
   10ed4:	8809883a 	mov	r4,r17
   10ed8:	a80b883a 	mov	r5,r21
   10edc:	1029883a 	mov	r20,r2
   10ee0:	00053c80 	call	53c8 <__mulsi3>
   10ee4:	a80b883a 	mov	r5,r21
   10ee8:	b009883a 	mov	r4,r22
   10eec:	1023883a 	mov	r17,r2
   10ef0:	00053c80 	call	53c8 <__mulsi3>
   10ef4:	e006d43a 	srli	r3,fp,16
   10ef8:	1505883a 	add	r2,r2,r20
   10efc:	1887883a 	add	r3,r3,r2
   10f00:	1d00022e 	bgeu	r3,r20,10f0c <__udivdi3+0x468>
   10f04:	00800074 	movhi	r2,1
   10f08:	88a3883a 	add	r17,r17,r2
   10f0c:	1804d43a 	srli	r2,r3,16
   10f10:	1463883a 	add	r17,r2,r17
   10f14:	84404436 	bltu	r16,r17,11028 <__udivdi3+0x584>
   10f18:	84403e26 	beq	r16,r17,11014 <__udivdi3+0x570>
   10f1c:	9005883a 	mov	r2,r18
   10f20:	0007883a 	mov	r3,zero
   10f24:	003f9106 	br	10d6c <__alt_exception_stack_pointer+0xf8010d6c>
   10f28:	88e2983a 	sll	r17,r17,r3
   10f2c:	80aed83a 	srl	r23,r16,r2
   10f30:	80e0983a 	sll	r16,r16,r3
   10f34:	882ad43a 	srli	r21,r17,16
   10f38:	9884d83a 	srl	r2,r19,r2
   10f3c:	b809883a 	mov	r4,r23
   10f40:	a80b883a 	mov	r5,r21
   10f44:	98e4983a 	sll	r18,r19,r3
   10f48:	142cb03a 	or	r22,r2,r16
   10f4c:	00053700 	call	5370 <__umodsi3>
   10f50:	b809883a 	mov	r4,r23
   10f54:	a80b883a 	mov	r5,r21
   10f58:	1027883a 	mov	r19,r2
   10f5c:	8d3fffcc 	andi	r20,r17,65535
   10f60:	000530c0 	call	530c <__udivsi3>
   10f64:	a009883a 	mov	r4,r20
   10f68:	100b883a 	mov	r5,r2
   10f6c:	102f883a 	mov	r23,r2
   10f70:	00053c80 	call	53c8 <__mulsi3>
   10f74:	9826943a 	slli	r19,r19,16
   10f78:	b008d43a 	srli	r4,r22,16
   10f7c:	24c8b03a 	or	r4,r4,r19
   10f80:	2080062e 	bgeu	r4,r2,10f9c <__udivdi3+0x4f8>
   10f84:	2449883a 	add	r4,r4,r17
   10f88:	b8ffffc4 	addi	r3,r23,-1
   10f8c:	24403c36 	bltu	r4,r17,11080 <__udivdi3+0x5dc>
   10f90:	20803b2e 	bgeu	r4,r2,11080 <__udivdi3+0x5dc>
   10f94:	bdffff84 	addi	r23,r23,-2
   10f98:	2449883a 	add	r4,r4,r17
   10f9c:	20a1c83a 	sub	r16,r4,r2
   10fa0:	a80b883a 	mov	r5,r21
   10fa4:	8009883a 	mov	r4,r16
   10fa8:	00053700 	call	5370 <__umodsi3>
   10fac:	a80b883a 	mov	r5,r21
   10fb0:	8009883a 	mov	r4,r16
   10fb4:	1027883a 	mov	r19,r2
   10fb8:	000530c0 	call	530c <__udivsi3>
   10fbc:	a009883a 	mov	r4,r20
   10fc0:	100b883a 	mov	r5,r2
   10fc4:	9826943a 	slli	r19,r19,16
   10fc8:	1039883a 	mov	fp,r2
   10fcc:	00053c80 	call	53c8 <__mulsi3>
   10fd0:	b13fffcc 	andi	r4,r22,65535
   10fd4:	24c8b03a 	or	r4,r4,r19
   10fd8:	2080062e 	bgeu	r4,r2,10ff4 <__udivdi3+0x550>
   10fdc:	2449883a 	add	r4,r4,r17
   10fe0:	e0ffffc4 	addi	r3,fp,-1
   10fe4:	24402436 	bltu	r4,r17,11078 <__udivdi3+0x5d4>
   10fe8:	2080232e 	bgeu	r4,r2,11078 <__udivdi3+0x5d4>
   10fec:	e73fff84 	addi	fp,fp,-2
   10ff0:	2449883a 	add	r4,r4,r17
   10ff4:	b82e943a 	slli	r23,r23,16
   10ff8:	20a1c83a 	sub	r16,r4,r2
   10ffc:	bf06b03a 	or	r3,r23,fp
   11000:	003f2806 	br	10ca4 <__alt_exception_stack_pointer+0xf8010ca4>
   11004:	2021883a 	mov	r16,r4
   11008:	003f5306 	br	10d58 <__alt_exception_stack_pointer+0xf8010d58>
   1100c:	1821883a 	mov	r16,r3
   11010:	003ef406 	br	10be4 <__alt_exception_stack_pointer+0xf8010be4>
   11014:	1806943a 	slli	r3,r3,16
   11018:	9de6983a 	sll	r19,r19,r23
   1101c:	e73fffcc 	andi	fp,fp,65535
   11020:	1f07883a 	add	r3,r3,fp
   11024:	98ffbd2e 	bgeu	r19,r3,10f1c <__alt_exception_stack_pointer+0xf8010f1c>
   11028:	90bfffc4 	addi	r2,r18,-1
   1102c:	0007883a 	mov	r3,zero
   11030:	003f4e06 	br	10d6c <__alt_exception_stack_pointer+0xf8010d6c>
   11034:	00800604 	movi	r2,24
   11038:	003ef506 	br	10c10 <__alt_exception_stack_pointer+0xf8010c10>
   1103c:	00800604 	movi	r2,24
   11040:	003f0b06 	br	10c70 <__alt_exception_stack_pointer+0xf8010c70>
   11044:	00800604 	movi	r2,24
   11048:	003ead06 	br	10b00 <__alt_exception_stack_pointer+0xf8010b00>
   1104c:	0007883a 	mov	r3,zero
   11050:	00800044 	movi	r2,1
   11054:	003f4506 	br	10d6c <__alt_exception_stack_pointer+0xf8010d6c>
   11058:	80bf8e2e 	bgeu	r16,r2,10e94 <__alt_exception_stack_pointer+0xf8010e94>
   1105c:	8c7fff84 	addi	r17,r17,-2
   11060:	8721883a 	add	r16,r16,fp
   11064:	003f8c06 	br	10e98 <__alt_exception_stack_pointer+0xf8010e98>
   11068:	18bf762e 	bgeu	r3,r2,10e44 <__alt_exception_stack_pointer+0xf8010e44>
   1106c:	ad7fff84 	addi	r21,r21,-2
   11070:	1f07883a 	add	r3,r3,fp
   11074:	003f7406 	br	10e48 <__alt_exception_stack_pointer+0xf8010e48>
   11078:	1839883a 	mov	fp,r3
   1107c:	003fdd06 	br	10ff4 <__alt_exception_stack_pointer+0xf8010ff4>
   11080:	182f883a 	mov	r23,r3
   11084:	003fc506 	br	10f9c <__alt_exception_stack_pointer+0xf8010f9c>
   11088:	b5bfff84 	addi	r22,r22,-2
   1108c:	3c4f883a 	add	r7,r7,r17
   11090:	003f1a06 	br	10cfc <__alt_exception_stack_pointer+0xf8010cfc>
   11094:	b5bfff84 	addi	r22,r22,-2
   11098:	1c47883a 	add	r3,r3,r17
   1109c:	003ebc06 	br	10b90 <__alt_exception_stack_pointer+0xf8010b90>

000110a0 <__umoddi3>:
   110a0:	defff304 	addi	sp,sp,-52
   110a4:	df000b15 	stw	fp,44(sp)
   110a8:	dc400415 	stw	r17,16(sp)
   110ac:	dc000315 	stw	r16,12(sp)
   110b0:	dfc00c15 	stw	ra,48(sp)
   110b4:	ddc00a15 	stw	r23,40(sp)
   110b8:	dd800915 	stw	r22,36(sp)
   110bc:	dd400815 	stw	r21,32(sp)
   110c0:	dd000715 	stw	r20,28(sp)
   110c4:	dcc00615 	stw	r19,24(sp)
   110c8:	dc800515 	stw	r18,20(sp)
   110cc:	2021883a 	mov	r16,r4
   110d0:	2823883a 	mov	r17,r5
   110d4:	2839883a 	mov	fp,r5
   110d8:	3800401e 	bne	r7,zero,111dc <__umoddi3+0x13c>
   110dc:	3027883a 	mov	r19,r6
   110e0:	2029883a 	mov	r20,r4
   110e4:	2980552e 	bgeu	r5,r6,1123c <__umoddi3+0x19c>
   110e8:	00bfffd4 	movui	r2,65535
   110ec:	1180a236 	bltu	r2,r6,11378 <__umoddi3+0x2d8>
   110f0:	01003fc4 	movi	r4,255
   110f4:	2189803a 	cmpltu	r4,r4,r6
   110f8:	200890fa 	slli	r4,r4,3
   110fc:	3104d83a 	srl	r2,r6,r4
   11100:	00c00074 	movhi	r3,1
   11104:	18d98f04 	addi	r3,r3,26172
   11108:	1885883a 	add	r2,r3,r2
   1110c:	10c00003 	ldbu	r3,0(r2)
   11110:	00800804 	movi	r2,32
   11114:	1909883a 	add	r4,r3,r4
   11118:	1125c83a 	sub	r18,r2,r4
   1111c:	90000526 	beq	r18,zero,11134 <__umoddi3+0x94>
   11120:	8ca2983a 	sll	r17,r17,r18
   11124:	8108d83a 	srl	r4,r16,r4
   11128:	34a6983a 	sll	r19,r6,r18
   1112c:	84a8983a 	sll	r20,r16,r18
   11130:	2478b03a 	or	fp,r4,r17
   11134:	982cd43a 	srli	r22,r19,16
   11138:	e009883a 	mov	r4,fp
   1113c:	9dffffcc 	andi	r23,r19,65535
   11140:	b00b883a 	mov	r5,r22
   11144:	00053700 	call	5370 <__umodsi3>
   11148:	b00b883a 	mov	r5,r22
   1114c:	e009883a 	mov	r4,fp
   11150:	102b883a 	mov	r21,r2
   11154:	000530c0 	call	530c <__udivsi3>
   11158:	100b883a 	mov	r5,r2
   1115c:	b809883a 	mov	r4,r23
   11160:	00053c80 	call	53c8 <__mulsi3>
   11164:	a82a943a 	slli	r21,r21,16
   11168:	a006d43a 	srli	r3,r20,16
   1116c:	1d46b03a 	or	r3,r3,r21
   11170:	1880032e 	bgeu	r3,r2,11180 <__umoddi3+0xe0>
   11174:	1cc7883a 	add	r3,r3,r19
   11178:	1cc00136 	bltu	r3,r19,11180 <__umoddi3+0xe0>
   1117c:	18813136 	bltu	r3,r2,11644 <__umoddi3+0x5a4>
   11180:	18a1c83a 	sub	r16,r3,r2
   11184:	b00b883a 	mov	r5,r22
   11188:	8009883a 	mov	r4,r16
   1118c:	00053700 	call	5370 <__umodsi3>
   11190:	b00b883a 	mov	r5,r22
   11194:	8009883a 	mov	r4,r16
   11198:	1023883a 	mov	r17,r2
   1119c:	000530c0 	call	530c <__udivsi3>
   111a0:	100b883a 	mov	r5,r2
   111a4:	b809883a 	mov	r4,r23
   111a8:	8822943a 	slli	r17,r17,16
   111ac:	00053c80 	call	53c8 <__mulsi3>
   111b0:	a0ffffcc 	andi	r3,r20,65535
   111b4:	1c46b03a 	or	r3,r3,r17
   111b8:	1880042e 	bgeu	r3,r2,111cc <__umoddi3+0x12c>
   111bc:	1cc7883a 	add	r3,r3,r19
   111c0:	1cc00236 	bltu	r3,r19,111cc <__umoddi3+0x12c>
   111c4:	1880012e 	bgeu	r3,r2,111cc <__umoddi3+0x12c>
   111c8:	1cc7883a 	add	r3,r3,r19
   111cc:	1885c83a 	sub	r2,r3,r2
   111d0:	1484d83a 	srl	r2,r2,r18
   111d4:	0007883a 	mov	r3,zero
   111d8:	00005306 	br	11328 <__umoddi3+0x288>
   111dc:	29c05036 	bltu	r5,r7,11320 <__umoddi3+0x280>
   111e0:	00bfffd4 	movui	r2,65535
   111e4:	11c05c2e 	bgeu	r2,r7,11358 <__umoddi3+0x2b8>
   111e8:	00804034 	movhi	r2,256
   111ec:	10bfffc4 	addi	r2,r2,-1
   111f0:	11c10636 	bltu	r2,r7,1160c <__umoddi3+0x56c>
   111f4:	01000404 	movi	r4,16
   111f8:	3904d83a 	srl	r2,r7,r4
   111fc:	00c00074 	movhi	r3,1
   11200:	18d98f04 	addi	r3,r3,26172
   11204:	1885883a 	add	r2,r3,r2
   11208:	14c00003 	ldbu	r19,0(r2)
   1120c:	00c00804 	movi	r3,32
   11210:	9927883a 	add	r19,r19,r4
   11214:	1ce9c83a 	sub	r20,r3,r19
   11218:	a0005c1e 	bne	r20,zero,1138c <__umoddi3+0x2ec>
   1121c:	3c400136 	bltu	r7,r17,11224 <__umoddi3+0x184>
   11220:	81810a36 	bltu	r16,r6,1164c <__umoddi3+0x5ac>
   11224:	8185c83a 	sub	r2,r16,r6
   11228:	89e3c83a 	sub	r17,r17,r7
   1122c:	8089803a 	cmpltu	r4,r16,r2
   11230:	8939c83a 	sub	fp,r17,r4
   11234:	e007883a 	mov	r3,fp
   11238:	00003b06 	br	11328 <__umoddi3+0x288>
   1123c:	3000041e 	bne	r6,zero,11250 <__umoddi3+0x1b0>
   11240:	000b883a 	mov	r5,zero
   11244:	01000044 	movi	r4,1
   11248:	000530c0 	call	530c <__udivsi3>
   1124c:	1027883a 	mov	r19,r2
   11250:	00bfffd4 	movui	r2,65535
   11254:	14c0442e 	bgeu	r2,r19,11368 <__umoddi3+0x2c8>
   11258:	00804034 	movhi	r2,256
   1125c:	10bfffc4 	addi	r2,r2,-1
   11260:	14c0ec36 	bltu	r2,r19,11614 <__umoddi3+0x574>
   11264:	00800404 	movi	r2,16
   11268:	9886d83a 	srl	r3,r19,r2
   1126c:	01000074 	movhi	r4,1
   11270:	21198f04 	addi	r4,r4,26172
   11274:	20c7883a 	add	r3,r4,r3
   11278:	18c00003 	ldbu	r3,0(r3)
   1127c:	1887883a 	add	r3,r3,r2
   11280:	00800804 	movi	r2,32
   11284:	10e5c83a 	sub	r18,r2,r3
   11288:	9000ab1e 	bne	r18,zero,11538 <__umoddi3+0x498>
   1128c:	982cd43a 	srli	r22,r19,16
   11290:	8ce3c83a 	sub	r17,r17,r19
   11294:	9dffffcc 	andi	r23,r19,65535
   11298:	b00b883a 	mov	r5,r22
   1129c:	8809883a 	mov	r4,r17
   112a0:	00053700 	call	5370 <__umodsi3>
   112a4:	b00b883a 	mov	r5,r22
   112a8:	8809883a 	mov	r4,r17
   112ac:	102b883a 	mov	r21,r2
   112b0:	000530c0 	call	530c <__udivsi3>
   112b4:	b80b883a 	mov	r5,r23
   112b8:	1009883a 	mov	r4,r2
   112bc:	00053c80 	call	53c8 <__mulsi3>
   112c0:	a82a943a 	slli	r21,r21,16
   112c4:	a006d43a 	srli	r3,r20,16
   112c8:	1d46b03a 	or	r3,r3,r21
   112cc:	1880042e 	bgeu	r3,r2,112e0 <__umoddi3+0x240>
   112d0:	1cc7883a 	add	r3,r3,r19
   112d4:	1cc00236 	bltu	r3,r19,112e0 <__umoddi3+0x240>
   112d8:	1880012e 	bgeu	r3,r2,112e0 <__umoddi3+0x240>
   112dc:	1cc7883a 	add	r3,r3,r19
   112e0:	18a1c83a 	sub	r16,r3,r2
   112e4:	b00b883a 	mov	r5,r22
   112e8:	8009883a 	mov	r4,r16
   112ec:	00053700 	call	5370 <__umodsi3>
   112f0:	1023883a 	mov	r17,r2
   112f4:	b00b883a 	mov	r5,r22
   112f8:	8009883a 	mov	r4,r16
   112fc:	000530c0 	call	530c <__udivsi3>
   11300:	8822943a 	slli	r17,r17,16
   11304:	b80b883a 	mov	r5,r23
   11308:	1009883a 	mov	r4,r2
   1130c:	00053c80 	call	53c8 <__mulsi3>
   11310:	a53fffcc 	andi	r20,r20,65535
   11314:	a446b03a 	or	r3,r20,r17
   11318:	18bfac2e 	bgeu	r3,r2,111cc <__alt_exception_stack_pointer+0xf80111cc>
   1131c:	003fa706 	br	111bc <__alt_exception_stack_pointer+0xf80111bc>
   11320:	2005883a 	mov	r2,r4
   11324:	2807883a 	mov	r3,r5
   11328:	dfc00c17 	ldw	ra,48(sp)
   1132c:	df000b17 	ldw	fp,44(sp)
   11330:	ddc00a17 	ldw	r23,40(sp)
   11334:	dd800917 	ldw	r22,36(sp)
   11338:	dd400817 	ldw	r21,32(sp)
   1133c:	dd000717 	ldw	r20,28(sp)
   11340:	dcc00617 	ldw	r19,24(sp)
   11344:	dc800517 	ldw	r18,20(sp)
   11348:	dc400417 	ldw	r17,16(sp)
   1134c:	dc000317 	ldw	r16,12(sp)
   11350:	dec00d04 	addi	sp,sp,52
   11354:	f800283a 	ret
   11358:	04c03fc4 	movi	r19,255
   1135c:	99c9803a 	cmpltu	r4,r19,r7
   11360:	200890fa 	slli	r4,r4,3
   11364:	003fa406 	br	111f8 <__alt_exception_stack_pointer+0xf80111f8>
   11368:	00803fc4 	movi	r2,255
   1136c:	14c5803a 	cmpltu	r2,r2,r19
   11370:	100490fa 	slli	r2,r2,3
   11374:	003fbc06 	br	11268 <__alt_exception_stack_pointer+0xf8011268>
   11378:	00804034 	movhi	r2,256
   1137c:	10bfffc4 	addi	r2,r2,-1
   11380:	1180a636 	bltu	r2,r6,1161c <__umoddi3+0x57c>
   11384:	01000404 	movi	r4,16
   11388:	003f5c06 	br	110fc <__alt_exception_stack_pointer+0xf80110fc>
   1138c:	3d0e983a 	sll	r7,r7,r20
   11390:	34ead83a 	srl	r21,r6,r19
   11394:	8cc6d83a 	srl	r3,r17,r19
   11398:	8d10983a 	sll	r8,r17,r20
   1139c:	3d6ab03a 	or	r21,r7,r21
   113a0:	a82cd43a 	srli	r22,r21,16
   113a4:	84e2d83a 	srl	r17,r16,r19
   113a8:	1809883a 	mov	r4,r3
   113ac:	b00b883a 	mov	r5,r22
   113b0:	8a22b03a 	or	r17,r17,r8
   113b4:	3524983a 	sll	r18,r6,r20
   113b8:	dc400015 	stw	r17,0(sp)
   113bc:	d8c00115 	stw	r3,4(sp)
   113c0:	00053700 	call	5370 <__umodsi3>
   113c4:	d8c00117 	ldw	r3,4(sp)
   113c8:	b00b883a 	mov	r5,r22
   113cc:	1039883a 	mov	fp,r2
   113d0:	1809883a 	mov	r4,r3
   113d4:	000530c0 	call	530c <__udivsi3>
   113d8:	adffffcc 	andi	r23,r21,65535
   113dc:	100b883a 	mov	r5,r2
   113e0:	b809883a 	mov	r4,r23
   113e4:	1023883a 	mov	r17,r2
   113e8:	00053c80 	call	53c8 <__mulsi3>
   113ec:	d9400017 	ldw	r5,0(sp)
   113f0:	e008943a 	slli	r4,fp,16
   113f4:	8520983a 	sll	r16,r16,r20
   113f8:	2806d43a 	srli	r3,r5,16
   113fc:	1906b03a 	or	r3,r3,r4
   11400:	1880042e 	bgeu	r3,r2,11414 <__umoddi3+0x374>
   11404:	1d47883a 	add	r3,r3,r21
   11408:	893fffc4 	addi	r4,r17,-1
   1140c:	1d40892e 	bgeu	r3,r21,11634 <__umoddi3+0x594>
   11410:	2023883a 	mov	r17,r4
   11414:	18b9c83a 	sub	fp,r3,r2
   11418:	b00b883a 	mov	r5,r22
   1141c:	e009883a 	mov	r4,fp
   11420:	00053700 	call	5370 <__umodsi3>
   11424:	b00b883a 	mov	r5,r22
   11428:	e009883a 	mov	r4,fp
   1142c:	d8800215 	stw	r2,8(sp)
   11430:	000530c0 	call	530c <__udivsi3>
   11434:	100b883a 	mov	r5,r2
   11438:	b809883a 	mov	r4,r23
   1143c:	102d883a 	mov	r22,r2
   11440:	00053c80 	call	53c8 <__mulsi3>
   11444:	d9800217 	ldw	r6,8(sp)
   11448:	d8c00017 	ldw	r3,0(sp)
   1144c:	300c943a 	slli	r6,r6,16
   11450:	1a3fffcc 	andi	r8,r3,65535
   11454:	4190b03a 	or	r8,r8,r6
   11458:	4080042e 	bgeu	r8,r2,1146c <__umoddi3+0x3cc>
   1145c:	4551883a 	add	r8,r8,r21
   11460:	b0ffffc4 	addi	r3,r22,-1
   11464:	45406f2e 	bgeu	r8,r21,11624 <__umoddi3+0x584>
   11468:	182d883a 	mov	r22,r3
   1146c:	880e943a 	slli	r7,r17,16
   11470:	9006d43a 	srli	r3,r18,16
   11474:	91bfffcc 	andi	r6,r18,65535
   11478:	3dacb03a 	or	r22,r7,r22
   1147c:	b02ed43a 	srli	r23,r22,16
   11480:	b5bfffcc 	andi	r22,r22,65535
   11484:	300b883a 	mov	r5,r6
   11488:	b009883a 	mov	r4,r22
   1148c:	40a3c83a 	sub	r17,r8,r2
   11490:	d8c00115 	stw	r3,4(sp)
   11494:	d9800215 	stw	r6,8(sp)
   11498:	00053c80 	call	53c8 <__mulsi3>
   1149c:	d9800217 	ldw	r6,8(sp)
   114a0:	b809883a 	mov	r4,r23
   114a4:	1039883a 	mov	fp,r2
   114a8:	300b883a 	mov	r5,r6
   114ac:	00053c80 	call	53c8 <__mulsi3>
   114b0:	d8c00117 	ldw	r3,4(sp)
   114b4:	b809883a 	mov	r4,r23
   114b8:	d8800215 	stw	r2,8(sp)
   114bc:	180b883a 	mov	r5,r3
   114c0:	00053c80 	call	53c8 <__mulsi3>
   114c4:	d8c00117 	ldw	r3,4(sp)
   114c8:	b009883a 	mov	r4,r22
   114cc:	102f883a 	mov	r23,r2
   114d0:	180b883a 	mov	r5,r3
   114d4:	00053c80 	call	53c8 <__mulsi3>
   114d8:	d9800217 	ldw	r6,8(sp)
   114dc:	e006d43a 	srli	r3,fp,16
   114e0:	1185883a 	add	r2,r2,r6
   114e4:	1885883a 	add	r2,r3,r2
   114e8:	1180022e 	bgeu	r2,r6,114f4 <__umoddi3+0x454>
   114ec:	00c00074 	movhi	r3,1
   114f0:	b8ef883a 	add	r23,r23,r3
   114f4:	1006d43a 	srli	r3,r2,16
   114f8:	1004943a 	slli	r2,r2,16
   114fc:	e73fffcc 	andi	fp,fp,65535
   11500:	1dc7883a 	add	r3,r3,r23
   11504:	1739883a 	add	fp,r2,fp
   11508:	88c03a36 	bltu	r17,r3,115f4 <__umoddi3+0x554>
   1150c:	88c05126 	beq	r17,r3,11654 <__umoddi3+0x5b4>
   11510:	88c9c83a 	sub	r4,r17,r3
   11514:	e00f883a 	mov	r7,fp
   11518:	81cfc83a 	sub	r7,r16,r7
   1151c:	81c7803a 	cmpltu	r3,r16,r7
   11520:	20c7c83a 	sub	r3,r4,r3
   11524:	1cc4983a 	sll	r2,r3,r19
   11528:	3d0ed83a 	srl	r7,r7,r20
   1152c:	1d06d83a 	srl	r3,r3,r20
   11530:	11c4b03a 	or	r2,r2,r7
   11534:	003f7c06 	br	11328 <__alt_exception_stack_pointer+0xf8011328>
   11538:	9ca6983a 	sll	r19,r19,r18
   1153c:	88f8d83a 	srl	fp,r17,r3
   11540:	80c4d83a 	srl	r2,r16,r3
   11544:	982cd43a 	srli	r22,r19,16
   11548:	8ca2983a 	sll	r17,r17,r18
   1154c:	e009883a 	mov	r4,fp
   11550:	b00b883a 	mov	r5,r22
   11554:	146ab03a 	or	r21,r2,r17
   11558:	00053700 	call	5370 <__umodsi3>
   1155c:	b00b883a 	mov	r5,r22
   11560:	e009883a 	mov	r4,fp
   11564:	1029883a 	mov	r20,r2
   11568:	9dffffcc 	andi	r23,r19,65535
   1156c:	000530c0 	call	530c <__udivsi3>
   11570:	b809883a 	mov	r4,r23
   11574:	100b883a 	mov	r5,r2
   11578:	00053c80 	call	53c8 <__mulsi3>
   1157c:	a008943a 	slli	r4,r20,16
   11580:	a806d43a 	srli	r3,r21,16
   11584:	84a8983a 	sll	r20,r16,r18
   11588:	1906b03a 	or	r3,r3,r4
   1158c:	1880042e 	bgeu	r3,r2,115a0 <__umoddi3+0x500>
   11590:	1cc7883a 	add	r3,r3,r19
   11594:	1cc00236 	bltu	r3,r19,115a0 <__umoddi3+0x500>
   11598:	1880012e 	bgeu	r3,r2,115a0 <__umoddi3+0x500>
   1159c:	1cc7883a 	add	r3,r3,r19
   115a0:	18a3c83a 	sub	r17,r3,r2
   115a4:	b00b883a 	mov	r5,r22
   115a8:	8809883a 	mov	r4,r17
   115ac:	00053700 	call	5370 <__umodsi3>
   115b0:	b00b883a 	mov	r5,r22
   115b4:	8809883a 	mov	r4,r17
   115b8:	1021883a 	mov	r16,r2
   115bc:	000530c0 	call	530c <__udivsi3>
   115c0:	100b883a 	mov	r5,r2
   115c4:	b809883a 	mov	r4,r23
   115c8:	8020943a 	slli	r16,r16,16
   115cc:	00053c80 	call	53c8 <__mulsi3>
   115d0:	a8ffffcc 	andi	r3,r21,65535
   115d4:	1c06b03a 	or	r3,r3,r16
   115d8:	1880042e 	bgeu	r3,r2,115ec <__umoddi3+0x54c>
   115dc:	1cc7883a 	add	r3,r3,r19
   115e0:	1cc00236 	bltu	r3,r19,115ec <__umoddi3+0x54c>
   115e4:	1880012e 	bgeu	r3,r2,115ec <__umoddi3+0x54c>
   115e8:	1cc7883a 	add	r3,r3,r19
   115ec:	18a3c83a 	sub	r17,r3,r2
   115f0:	003f2906 	br	11298 <__alt_exception_stack_pointer+0xf8011298>
   115f4:	e48fc83a 	sub	r7,fp,r18
   115f8:	1d49c83a 	sub	r4,r3,r21
   115fc:	e1f9803a 	cmpltu	fp,fp,r7
   11600:	2739c83a 	sub	fp,r4,fp
   11604:	8f09c83a 	sub	r4,r17,fp
   11608:	003fc306 	br	11518 <__alt_exception_stack_pointer+0xf8011518>
   1160c:	01000604 	movi	r4,24
   11610:	003ef906 	br	111f8 <__alt_exception_stack_pointer+0xf80111f8>
   11614:	00800604 	movi	r2,24
   11618:	003f1306 	br	11268 <__alt_exception_stack_pointer+0xf8011268>
   1161c:	01000604 	movi	r4,24
   11620:	003eb606 	br	110fc <__alt_exception_stack_pointer+0xf80110fc>
   11624:	40bf902e 	bgeu	r8,r2,11468 <__alt_exception_stack_pointer+0xf8011468>
   11628:	b5bfff84 	addi	r22,r22,-2
   1162c:	4551883a 	add	r8,r8,r21
   11630:	003f8e06 	br	1146c <__alt_exception_stack_pointer+0xf801146c>
   11634:	18bf762e 	bgeu	r3,r2,11410 <__alt_exception_stack_pointer+0xf8011410>
   11638:	8c7fff84 	addi	r17,r17,-2
   1163c:	1d47883a 	add	r3,r3,r21
   11640:	003f7406 	br	11414 <__alt_exception_stack_pointer+0xf8011414>
   11644:	1cc7883a 	add	r3,r3,r19
   11648:	003ecd06 	br	11180 <__alt_exception_stack_pointer+0xf8011180>
   1164c:	8005883a 	mov	r2,r16
   11650:	003ef806 	br	11234 <__alt_exception_stack_pointer+0xf8011234>
   11654:	873fe736 	bltu	r16,fp,115f4 <__alt_exception_stack_pointer+0xf80115f4>
   11658:	e00f883a 	mov	r7,fp
   1165c:	0009883a 	mov	r4,zero
   11660:	003fad06 	br	11518 <__alt_exception_stack_pointer+0xf8011518>

00011664 <__divdf3>:
   11664:	defff004 	addi	sp,sp,-64
   11668:	dc800815 	stw	r18,32(sp)
   1166c:	2824d53a 	srli	r18,r5,20
   11670:	dd800c15 	stw	r22,48(sp)
   11674:	282cd7fa 	srli	r22,r5,31
   11678:	dc000615 	stw	r16,24(sp)
   1167c:	04000434 	movhi	r16,16
   11680:	843fffc4 	addi	r16,r16,-1
   11684:	dfc00f15 	stw	ra,60(sp)
   11688:	df000e15 	stw	fp,56(sp)
   1168c:	ddc00d15 	stw	r23,52(sp)
   11690:	dd400b15 	stw	r21,44(sp)
   11694:	dd000a15 	stw	r20,40(sp)
   11698:	dcc00915 	stw	r19,36(sp)
   1169c:	dc400715 	stw	r17,28(sp)
   116a0:	9481ffcc 	andi	r18,r18,2047
   116a4:	2c20703a 	and	r16,r5,r16
   116a8:	b2003fcc 	andi	r8,r22,255
   116ac:	90006126 	beq	r18,zero,11834 <__divdf3+0x1d0>
   116b0:	0081ffc4 	movi	r2,2047
   116b4:	202b883a 	mov	r21,r4
   116b8:	90803726 	beq	r18,r2,11798 <__divdf3+0x134>
   116bc:	80800434 	orhi	r2,r16,16
   116c0:	100490fa 	slli	r2,r2,3
   116c4:	2020d77a 	srli	r16,r4,29
   116c8:	202a90fa 	slli	r21,r4,3
   116cc:	94bf0044 	addi	r18,r18,-1023
   116d0:	80a0b03a 	or	r16,r16,r2
   116d4:	0013883a 	mov	r9,zero
   116d8:	000b883a 	mov	r5,zero
   116dc:	3806d53a 	srli	r3,r7,20
   116e0:	382ed7fa 	srli	r23,r7,31
   116e4:	04400434 	movhi	r17,16
   116e8:	8c7fffc4 	addi	r17,r17,-1
   116ec:	18c1ffcc 	andi	r3,r3,2047
   116f0:	3029883a 	mov	r20,r6
   116f4:	3c62703a 	and	r17,r7,r17
   116f8:	bf003fcc 	andi	fp,r23,255
   116fc:	18006e26 	beq	r3,zero,118b8 <__divdf3+0x254>
   11700:	0081ffc4 	movi	r2,2047
   11704:	18806626 	beq	r3,r2,118a0 <__divdf3+0x23c>
   11708:	88800434 	orhi	r2,r17,16
   1170c:	100490fa 	slli	r2,r2,3
   11710:	3022d77a 	srli	r17,r6,29
   11714:	302890fa 	slli	r20,r6,3
   11718:	18ff0044 	addi	r3,r3,-1023
   1171c:	88a2b03a 	or	r17,r17,r2
   11720:	000f883a 	mov	r7,zero
   11724:	b5e6f03a 	xor	r19,r22,r23
   11728:	3a4cb03a 	or	r6,r7,r9
   1172c:	008003c4 	movi	r2,15
   11730:	9809883a 	mov	r4,r19
   11734:	90c7c83a 	sub	r3,r18,r3
   11738:	9cc03fcc 	andi	r19,r19,255
   1173c:	11809636 	bltu	r2,r6,11998 <__divdf3+0x334>
   11740:	300c90ba 	slli	r6,r6,2
   11744:	00800074 	movhi	r2,1
   11748:	1085d604 	addi	r2,r2,5976
   1174c:	308d883a 	add	r6,r6,r2
   11750:	30800017 	ldw	r2,0(r6)
   11754:	1000683a 	jmp	r2
   11758:	00011998 	cmpnei	zero,zero,1126
   1175c:	000117d0 	cmplti	zero,zero,1119
   11760:	00011988 	cmpgei	zero,zero,1126
   11764:	000117c4 	movi	zero,1119
   11768:	00011988 	cmpgei	zero,zero,1126
   1176c:	0001195c 	xori	zero,zero,1125
   11770:	00011988 	cmpgei	zero,zero,1126
   11774:	000117c4 	movi	zero,1119
   11778:	000117d0 	cmplti	zero,zero,1119
   1177c:	000117d0 	cmplti	zero,zero,1119
   11780:	0001195c 	xori	zero,zero,1125
   11784:	000117c4 	movi	zero,1119
   11788:	000117b4 	movhi	zero,1118
   1178c:	000117b4 	movhi	zero,1118
   11790:	000117b4 	movhi	zero,1118
   11794:	00011d20 	cmpeqi	zero,zero,1140
   11798:	2404b03a 	or	r2,r4,r16
   1179c:	10006c1e 	bne	r2,zero,11950 <__divdf3+0x2ec>
   117a0:	02400204 	movi	r9,8
   117a4:	0021883a 	mov	r16,zero
   117a8:	002b883a 	mov	r21,zero
   117ac:	01400084 	movi	r5,2
   117b0:	003fca06 	br	116dc <__alt_exception_stack_pointer+0xf80116dc>
   117b4:	8023883a 	mov	r17,r16
   117b8:	a829883a 	mov	r20,r21
   117bc:	4039883a 	mov	fp,r8
   117c0:	280f883a 	mov	r7,r5
   117c4:	00800084 	movi	r2,2
   117c8:	3881601e 	bne	r7,r2,11d4c <__divdf3+0x6e8>
   117cc:	e027883a 	mov	r19,fp
   117d0:	9900004c 	andi	r4,r19,1
   117d4:	0081ffc4 	movi	r2,2047
   117d8:	0021883a 	mov	r16,zero
   117dc:	002b883a 	mov	r21,zero
   117e0:	1004953a 	slli	r2,r2,20
   117e4:	20c03fcc 	andi	r3,r4,255
   117e8:	01400434 	movhi	r5,16
   117ec:	297fffc4 	addi	r5,r5,-1
   117f0:	180697fa 	slli	r3,r3,31
   117f4:	8160703a 	and	r16,r16,r5
   117f8:	80a0b03a 	or	r16,r16,r2
   117fc:	80c6b03a 	or	r3,r16,r3
   11800:	a805883a 	mov	r2,r21
   11804:	dfc00f17 	ldw	ra,60(sp)
   11808:	df000e17 	ldw	fp,56(sp)
   1180c:	ddc00d17 	ldw	r23,52(sp)
   11810:	dd800c17 	ldw	r22,48(sp)
   11814:	dd400b17 	ldw	r21,44(sp)
   11818:	dd000a17 	ldw	r20,40(sp)
   1181c:	dcc00917 	ldw	r19,36(sp)
   11820:	dc800817 	ldw	r18,32(sp)
   11824:	dc400717 	ldw	r17,28(sp)
   11828:	dc000617 	ldw	r16,24(sp)
   1182c:	dec01004 	addi	sp,sp,64
   11830:	f800283a 	ret
   11834:	2404b03a 	or	r2,r4,r16
   11838:	2023883a 	mov	r17,r4
   1183c:	10003f26 	beq	r2,zero,1193c <__divdf3+0x2d8>
   11840:	80015e26 	beq	r16,zero,11dbc <__divdf3+0x758>
   11844:	8009883a 	mov	r4,r16
   11848:	d9800215 	stw	r6,8(sp)
   1184c:	d9c00515 	stw	r7,20(sp)
   11850:	da000415 	stw	r8,16(sp)
   11854:	00070c40 	call	70c4 <__clzsi2>
   11858:	d9800217 	ldw	r6,8(sp)
   1185c:	d9c00517 	ldw	r7,20(sp)
   11860:	da000417 	ldw	r8,16(sp)
   11864:	113ffd44 	addi	r4,r2,-11
   11868:	00c00704 	movi	r3,28
   1186c:	19014f16 	blt	r3,r4,11dac <__divdf3+0x748>
   11870:	00c00744 	movi	r3,29
   11874:	157ffe04 	addi	r21,r2,-8
   11878:	1907c83a 	sub	r3,r3,r4
   1187c:	8560983a 	sll	r16,r16,r21
   11880:	88c6d83a 	srl	r3,r17,r3
   11884:	8d6a983a 	sll	r21,r17,r21
   11888:	1c20b03a 	or	r16,r3,r16
   1188c:	1080fcc4 	addi	r2,r2,1011
   11890:	00a5c83a 	sub	r18,zero,r2
   11894:	0013883a 	mov	r9,zero
   11898:	000b883a 	mov	r5,zero
   1189c:	003f8f06 	br	116dc <__alt_exception_stack_pointer+0xf80116dc>
   118a0:	3444b03a 	or	r2,r6,r17
   118a4:	1000231e 	bne	r2,zero,11934 <__divdf3+0x2d0>
   118a8:	0023883a 	mov	r17,zero
   118ac:	0029883a 	mov	r20,zero
   118b0:	01c00084 	movi	r7,2
   118b4:	003f9b06 	br	11724 <__alt_exception_stack_pointer+0xf8011724>
   118b8:	3444b03a 	or	r2,r6,r17
   118bc:	10001926 	beq	r2,zero,11924 <__divdf3+0x2c0>
   118c0:	88014b26 	beq	r17,zero,11df0 <__divdf3+0x78c>
   118c4:	8809883a 	mov	r4,r17
   118c8:	d9400115 	stw	r5,4(sp)
   118cc:	d9800215 	stw	r6,8(sp)
   118d0:	da000415 	stw	r8,16(sp)
   118d4:	da400315 	stw	r9,12(sp)
   118d8:	00070c40 	call	70c4 <__clzsi2>
   118dc:	d9400117 	ldw	r5,4(sp)
   118e0:	d9800217 	ldw	r6,8(sp)
   118e4:	da000417 	ldw	r8,16(sp)
   118e8:	da400317 	ldw	r9,12(sp)
   118ec:	113ffd44 	addi	r4,r2,-11
   118f0:	00c00704 	movi	r3,28
   118f4:	19013a16 	blt	r3,r4,11de0 <__divdf3+0x77c>
   118f8:	00c00744 	movi	r3,29
   118fc:	153ffe04 	addi	r20,r2,-8
   11900:	1907c83a 	sub	r3,r3,r4
   11904:	8d22983a 	sll	r17,r17,r20
   11908:	30c6d83a 	srl	r3,r6,r3
   1190c:	3528983a 	sll	r20,r6,r20
   11910:	1c62b03a 	or	r17,r3,r17
   11914:	1080fcc4 	addi	r2,r2,1011
   11918:	0087c83a 	sub	r3,zero,r2
   1191c:	000f883a 	mov	r7,zero
   11920:	003f8006 	br	11724 <__alt_exception_stack_pointer+0xf8011724>
   11924:	0023883a 	mov	r17,zero
   11928:	0029883a 	mov	r20,zero
   1192c:	01c00044 	movi	r7,1
   11930:	003f7c06 	br	11724 <__alt_exception_stack_pointer+0xf8011724>
   11934:	01c000c4 	movi	r7,3
   11938:	003f7a06 	br	11724 <__alt_exception_stack_pointer+0xf8011724>
   1193c:	02400104 	movi	r9,4
   11940:	0021883a 	mov	r16,zero
   11944:	002b883a 	mov	r21,zero
   11948:	01400044 	movi	r5,1
   1194c:	003f6306 	br	116dc <__alt_exception_stack_pointer+0xf80116dc>
   11950:	02400304 	movi	r9,12
   11954:	014000c4 	movi	r5,3
   11958:	003f6006 	br	116dc <__alt_exception_stack_pointer+0xf80116dc>
   1195c:	04000434 	movhi	r16,16
   11960:	0009883a 	mov	r4,zero
   11964:	843fffc4 	addi	r16,r16,-1
   11968:	057fffc4 	movi	r21,-1
   1196c:	0081ffc4 	movi	r2,2047
   11970:	003f9b06 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11974:	00c00044 	movi	r3,1
   11978:	1887c83a 	sub	r3,r3,r2
   1197c:	01000e04 	movi	r4,56
   11980:	20c1530e 	bge	r4,r3,11ed0 <__divdf3+0x86c>
   11984:	9900004c 	andi	r4,r19,1
   11988:	0005883a 	mov	r2,zero
   1198c:	0021883a 	mov	r16,zero
   11990:	002b883a 	mov	r21,zero
   11994:	003f9206 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11998:	8c012e36 	bltu	r17,r16,11e54 <__divdf3+0x7f0>
   1199c:	84412c26 	beq	r16,r17,11e50 <__divdf3+0x7ec>
   119a0:	a82f883a 	mov	r23,r21
   119a4:	18ffffc4 	addi	r3,r3,-1
   119a8:	002b883a 	mov	r21,zero
   119ac:	a004d63a 	srli	r2,r20,24
   119b0:	8822923a 	slli	r17,r17,8
   119b4:	a028923a 	slli	r20,r20,8
   119b8:	8009883a 	mov	r4,r16
   119bc:	88acb03a 	or	r22,r17,r2
   119c0:	dd000015 	stw	r20,0(sp)
   119c4:	b028d43a 	srli	r20,r22,16
   119c8:	d8c00215 	stw	r3,8(sp)
   119cc:	b4bfffcc 	andi	r18,r22,65535
   119d0:	a00b883a 	mov	r5,r20
   119d4:	000530c0 	call	530c <__udivsi3>
   119d8:	100b883a 	mov	r5,r2
   119dc:	9009883a 	mov	r4,r18
   119e0:	1023883a 	mov	r17,r2
   119e4:	00053c80 	call	53c8 <__mulsi3>
   119e8:	8009883a 	mov	r4,r16
   119ec:	a00b883a 	mov	r5,r20
   119f0:	1039883a 	mov	fp,r2
   119f4:	00053700 	call	5370 <__umodsi3>
   119f8:	1004943a 	slli	r2,r2,16
   119fc:	b808d43a 	srli	r4,r23,16
   11a00:	d8c00217 	ldw	r3,8(sp)
   11a04:	2084b03a 	or	r2,r4,r2
   11a08:	1700062e 	bgeu	r2,fp,11a24 <__divdf3+0x3c0>
   11a0c:	1585883a 	add	r2,r2,r22
   11a10:	893fffc4 	addi	r4,r17,-1
   11a14:	15811d36 	bltu	r2,r22,11e8c <__divdf3+0x828>
   11a18:	17011c2e 	bgeu	r2,fp,11e8c <__divdf3+0x828>
   11a1c:	8c7fff84 	addi	r17,r17,-2
   11a20:	1585883a 	add	r2,r2,r22
   11a24:	1739c83a 	sub	fp,r2,fp
   11a28:	a00b883a 	mov	r5,r20
   11a2c:	e009883a 	mov	r4,fp
   11a30:	d8c00215 	stw	r3,8(sp)
   11a34:	000530c0 	call	530c <__udivsi3>
   11a38:	100b883a 	mov	r5,r2
   11a3c:	9009883a 	mov	r4,r18
   11a40:	1021883a 	mov	r16,r2
   11a44:	00053c80 	call	53c8 <__mulsi3>
   11a48:	a00b883a 	mov	r5,r20
   11a4c:	e009883a 	mov	r4,fp
   11a50:	d8800415 	stw	r2,16(sp)
   11a54:	00053700 	call	5370 <__umodsi3>
   11a58:	1004943a 	slli	r2,r2,16
   11a5c:	da000417 	ldw	r8,16(sp)
   11a60:	bdffffcc 	andi	r23,r23,65535
   11a64:	b884b03a 	or	r2,r23,r2
   11a68:	d8c00217 	ldw	r3,8(sp)
   11a6c:	1200062e 	bgeu	r2,r8,11a88 <__divdf3+0x424>
   11a70:	1585883a 	add	r2,r2,r22
   11a74:	813fffc4 	addi	r4,r16,-1
   11a78:	15810236 	bltu	r2,r22,11e84 <__divdf3+0x820>
   11a7c:	1201012e 	bgeu	r2,r8,11e84 <__divdf3+0x820>
   11a80:	843fff84 	addi	r16,r16,-2
   11a84:	1585883a 	add	r2,r2,r22
   11a88:	8822943a 	slli	r17,r17,16
   11a8c:	d9800017 	ldw	r6,0(sp)
   11a90:	1211c83a 	sub	r8,r2,r8
   11a94:	8c22b03a 	or	r17,r17,r16
   11a98:	373fffcc 	andi	fp,r6,65535
   11a9c:	8abfffcc 	andi	r10,r17,65535
   11aa0:	8820d43a 	srli	r16,r17,16
   11aa4:	5009883a 	mov	r4,r10
   11aa8:	e00b883a 	mov	r5,fp
   11aac:	302ed43a 	srli	r23,r6,16
   11ab0:	d8c00215 	stw	r3,8(sp)
   11ab4:	da000415 	stw	r8,16(sp)
   11ab8:	da800115 	stw	r10,4(sp)
   11abc:	00053c80 	call	53c8 <__mulsi3>
   11ac0:	800b883a 	mov	r5,r16
   11ac4:	e009883a 	mov	r4,fp
   11ac8:	d8800515 	stw	r2,20(sp)
   11acc:	00053c80 	call	53c8 <__mulsi3>
   11ad0:	8009883a 	mov	r4,r16
   11ad4:	b80b883a 	mov	r5,r23
   11ad8:	d8800315 	stw	r2,12(sp)
   11adc:	00053c80 	call	53c8 <__mulsi3>
   11ae0:	da800117 	ldw	r10,4(sp)
   11ae4:	b80b883a 	mov	r5,r23
   11ae8:	1021883a 	mov	r16,r2
   11aec:	5009883a 	mov	r4,r10
   11af0:	00053c80 	call	53c8 <__mulsi3>
   11af4:	d9c00517 	ldw	r7,20(sp)
   11af8:	da400317 	ldw	r9,12(sp)
   11afc:	d8c00217 	ldw	r3,8(sp)
   11b00:	3808d43a 	srli	r4,r7,16
   11b04:	1245883a 	add	r2,r2,r9
   11b08:	da000417 	ldw	r8,16(sp)
   11b0c:	2085883a 	add	r2,r4,r2
   11b10:	1240022e 	bgeu	r2,r9,11b1c <__divdf3+0x4b8>
   11b14:	01000074 	movhi	r4,1
   11b18:	8121883a 	add	r16,r16,r4
   11b1c:	1008d43a 	srli	r4,r2,16
   11b20:	1004943a 	slli	r2,r2,16
   11b24:	39ffffcc 	andi	r7,r7,65535
   11b28:	2409883a 	add	r4,r4,r16
   11b2c:	11c5883a 	add	r2,r2,r7
   11b30:	4100bb36 	bltu	r8,r4,11e20 <__divdf3+0x7bc>
   11b34:	4100d726 	beq	r8,r4,11e94 <__divdf3+0x830>
   11b38:	4109c83a 	sub	r4,r8,r4
   11b3c:	a8a1c83a 	sub	r16,r21,r2
   11b40:	ac2b803a 	cmpltu	r21,r21,r16
   11b44:	256bc83a 	sub	r21,r4,r21
   11b48:	b540d926 	beq	r22,r21,11eb0 <__divdf3+0x84c>
   11b4c:	a00b883a 	mov	r5,r20
   11b50:	a809883a 	mov	r4,r21
   11b54:	d8c00215 	stw	r3,8(sp)
   11b58:	000530c0 	call	530c <__udivsi3>
   11b5c:	100b883a 	mov	r5,r2
   11b60:	9009883a 	mov	r4,r18
   11b64:	d8800515 	stw	r2,20(sp)
   11b68:	00053c80 	call	53c8 <__mulsi3>
   11b6c:	a809883a 	mov	r4,r21
   11b70:	a00b883a 	mov	r5,r20
   11b74:	d8800415 	stw	r2,16(sp)
   11b78:	00053700 	call	5370 <__umodsi3>
   11b7c:	1004943a 	slli	r2,r2,16
   11b80:	8008d43a 	srli	r4,r16,16
   11b84:	da000417 	ldw	r8,16(sp)
   11b88:	d8c00217 	ldw	r3,8(sp)
   11b8c:	2084b03a 	or	r2,r4,r2
   11b90:	d9c00517 	ldw	r7,20(sp)
   11b94:	1200062e 	bgeu	r2,r8,11bb0 <__divdf3+0x54c>
   11b98:	1585883a 	add	r2,r2,r22
   11b9c:	393fffc4 	addi	r4,r7,-1
   11ba0:	1580c536 	bltu	r2,r22,11eb8 <__divdf3+0x854>
   11ba4:	1200c42e 	bgeu	r2,r8,11eb8 <__divdf3+0x854>
   11ba8:	39ffff84 	addi	r7,r7,-2
   11bac:	1585883a 	add	r2,r2,r22
   11bb0:	122bc83a 	sub	r21,r2,r8
   11bb4:	a00b883a 	mov	r5,r20
   11bb8:	a809883a 	mov	r4,r21
   11bbc:	d8c00215 	stw	r3,8(sp)
   11bc0:	d9c00515 	stw	r7,20(sp)
   11bc4:	000530c0 	call	530c <__udivsi3>
   11bc8:	9009883a 	mov	r4,r18
   11bcc:	100b883a 	mov	r5,r2
   11bd0:	d8800415 	stw	r2,16(sp)
   11bd4:	00053c80 	call	53c8 <__mulsi3>
   11bd8:	a809883a 	mov	r4,r21
   11bdc:	a00b883a 	mov	r5,r20
   11be0:	1025883a 	mov	r18,r2
   11be4:	00053700 	call	5370 <__umodsi3>
   11be8:	1004943a 	slli	r2,r2,16
   11bec:	813fffcc 	andi	r4,r16,65535
   11bf0:	d8c00217 	ldw	r3,8(sp)
   11bf4:	20a0b03a 	or	r16,r4,r2
   11bf8:	d9c00517 	ldw	r7,20(sp)
   11bfc:	da000417 	ldw	r8,16(sp)
   11c00:	8480062e 	bgeu	r16,r18,11c1c <__divdf3+0x5b8>
   11c04:	85a1883a 	add	r16,r16,r22
   11c08:	40bfffc4 	addi	r2,r8,-1
   11c0c:	8580ac36 	bltu	r16,r22,11ec0 <__divdf3+0x85c>
   11c10:	8480ab2e 	bgeu	r16,r18,11ec0 <__divdf3+0x85c>
   11c14:	423fff84 	addi	r8,r8,-2
   11c18:	85a1883a 	add	r16,r16,r22
   11c1c:	3804943a 	slli	r2,r7,16
   11c20:	84a1c83a 	sub	r16,r16,r18
   11c24:	e009883a 	mov	r4,fp
   11c28:	1228b03a 	or	r20,r2,r8
   11c2c:	a1ffffcc 	andi	r7,r20,65535
   11c30:	a024d43a 	srli	r18,r20,16
   11c34:	380b883a 	mov	r5,r7
   11c38:	d8c00215 	stw	r3,8(sp)
   11c3c:	d9c00515 	stw	r7,20(sp)
   11c40:	00053c80 	call	53c8 <__mulsi3>
   11c44:	900b883a 	mov	r5,r18
   11c48:	e009883a 	mov	r4,fp
   11c4c:	102b883a 	mov	r21,r2
   11c50:	00053c80 	call	53c8 <__mulsi3>
   11c54:	900b883a 	mov	r5,r18
   11c58:	b809883a 	mov	r4,r23
   11c5c:	1039883a 	mov	fp,r2
   11c60:	00053c80 	call	53c8 <__mulsi3>
   11c64:	d9c00517 	ldw	r7,20(sp)
   11c68:	b80b883a 	mov	r5,r23
   11c6c:	1025883a 	mov	r18,r2
   11c70:	3809883a 	mov	r4,r7
   11c74:	00053c80 	call	53c8 <__mulsi3>
   11c78:	a808d43a 	srli	r4,r21,16
   11c7c:	1705883a 	add	r2,r2,fp
   11c80:	d8c00217 	ldw	r3,8(sp)
   11c84:	2085883a 	add	r2,r4,r2
   11c88:	1700022e 	bgeu	r2,fp,11c94 <__divdf3+0x630>
   11c8c:	01000074 	movhi	r4,1
   11c90:	9125883a 	add	r18,r18,r4
   11c94:	1008d43a 	srli	r4,r2,16
   11c98:	1004943a 	slli	r2,r2,16
   11c9c:	ad7fffcc 	andi	r21,r21,65535
   11ca0:	2489883a 	add	r4,r4,r18
   11ca4:	1545883a 	add	r2,r2,r21
   11ca8:	81003836 	bltu	r16,r4,11d8c <__divdf3+0x728>
   11cac:	81003626 	beq	r16,r4,11d88 <__divdf3+0x724>
   11cb0:	a5000054 	ori	r20,r20,1
   11cb4:	1880ffc4 	addi	r2,r3,1023
   11cb8:	00bf2e0e 	bge	zero,r2,11974 <__alt_exception_stack_pointer+0xf8011974>
   11cbc:	a10001cc 	andi	r4,r20,7
   11cc0:	20000726 	beq	r4,zero,11ce0 <__divdf3+0x67c>
   11cc4:	a10003cc 	andi	r4,r20,15
   11cc8:	01400104 	movi	r5,4
   11ccc:	21400426 	beq	r4,r5,11ce0 <__divdf3+0x67c>
   11cd0:	a149883a 	add	r4,r20,r5
   11cd4:	2529803a 	cmpltu	r20,r4,r20
   11cd8:	8d23883a 	add	r17,r17,r20
   11cdc:	2029883a 	mov	r20,r4
   11ce0:	8900402c 	andhi	r4,r17,256
   11ce4:	20000426 	beq	r4,zero,11cf8 <__divdf3+0x694>
   11ce8:	18810004 	addi	r2,r3,1024
   11cec:	00ffc034 	movhi	r3,65280
   11cf0:	18ffffc4 	addi	r3,r3,-1
   11cf4:	88e2703a 	and	r17,r17,r3
   11cf8:	00c1ff84 	movi	r3,2046
   11cfc:	18beb416 	blt	r3,r2,117d0 <__alt_exception_stack_pointer+0xf80117d0>
   11d00:	a028d0fa 	srli	r20,r20,3
   11d04:	882a977a 	slli	r21,r17,29
   11d08:	8820927a 	slli	r16,r17,9
   11d0c:	1081ffcc 	andi	r2,r2,2047
   11d10:	ad2ab03a 	or	r21,r21,r20
   11d14:	8020d33a 	srli	r16,r16,12
   11d18:	9900004c 	andi	r4,r19,1
   11d1c:	003eb006 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11d20:	8080022c 	andhi	r2,r16,8
   11d24:	10001226 	beq	r2,zero,11d70 <__divdf3+0x70c>
   11d28:	8880022c 	andhi	r2,r17,8
   11d2c:	1000101e 	bne	r2,zero,11d70 <__divdf3+0x70c>
   11d30:	00800434 	movhi	r2,16
   11d34:	8c000234 	orhi	r16,r17,8
   11d38:	10bfffc4 	addi	r2,r2,-1
   11d3c:	b809883a 	mov	r4,r23
   11d40:	80a0703a 	and	r16,r16,r2
   11d44:	a02b883a 	mov	r21,r20
   11d48:	003f0806 	br	1196c <__alt_exception_stack_pointer+0xf801196c>
   11d4c:	008000c4 	movi	r2,3
   11d50:	3880b126 	beq	r7,r2,12018 <__divdf3+0x9b4>
   11d54:	00800044 	movi	r2,1
   11d58:	38805b1e 	bne	r7,r2,11ec8 <__divdf3+0x864>
   11d5c:	e009883a 	mov	r4,fp
   11d60:	0005883a 	mov	r2,zero
   11d64:	0021883a 	mov	r16,zero
   11d68:	002b883a 	mov	r21,zero
   11d6c:	003e9c06 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11d70:	00800434 	movhi	r2,16
   11d74:	84000234 	orhi	r16,r16,8
   11d78:	10bfffc4 	addi	r2,r2,-1
   11d7c:	b009883a 	mov	r4,r22
   11d80:	80a0703a 	and	r16,r16,r2
   11d84:	003ef906 	br	1196c <__alt_exception_stack_pointer+0xf801196c>
   11d88:	103fca26 	beq	r2,zero,11cb4 <__alt_exception_stack_pointer+0xf8011cb4>
   11d8c:	b421883a 	add	r16,r22,r16
   11d90:	a17fffc4 	addi	r5,r20,-1
   11d94:	8580422e 	bgeu	r16,r22,11ea0 <__divdf3+0x83c>
   11d98:	2829883a 	mov	r20,r5
   11d9c:	813fc41e 	bne	r16,r4,11cb0 <__alt_exception_stack_pointer+0xf8011cb0>
   11da0:	d9800017 	ldw	r6,0(sp)
   11da4:	30bfc21e 	bne	r6,r2,11cb0 <__alt_exception_stack_pointer+0xf8011cb0>
   11da8:	003fc206 	br	11cb4 <__alt_exception_stack_pointer+0xf8011cb4>
   11dac:	143ff604 	addi	r16,r2,-40
   11db0:	8c20983a 	sll	r16,r17,r16
   11db4:	002b883a 	mov	r21,zero
   11db8:	003eb406 	br	1188c <__alt_exception_stack_pointer+0xf801188c>
   11dbc:	d9800215 	stw	r6,8(sp)
   11dc0:	d9c00515 	stw	r7,20(sp)
   11dc4:	da000415 	stw	r8,16(sp)
   11dc8:	00070c40 	call	70c4 <__clzsi2>
   11dcc:	10800804 	addi	r2,r2,32
   11dd0:	da000417 	ldw	r8,16(sp)
   11dd4:	d9c00517 	ldw	r7,20(sp)
   11dd8:	d9800217 	ldw	r6,8(sp)
   11ddc:	003ea106 	br	11864 <__alt_exception_stack_pointer+0xf8011864>
   11de0:	147ff604 	addi	r17,r2,-40
   11de4:	3462983a 	sll	r17,r6,r17
   11de8:	0029883a 	mov	r20,zero
   11dec:	003ec906 	br	11914 <__alt_exception_stack_pointer+0xf8011914>
   11df0:	3009883a 	mov	r4,r6
   11df4:	d9400115 	stw	r5,4(sp)
   11df8:	d9800215 	stw	r6,8(sp)
   11dfc:	da000415 	stw	r8,16(sp)
   11e00:	da400315 	stw	r9,12(sp)
   11e04:	00070c40 	call	70c4 <__clzsi2>
   11e08:	10800804 	addi	r2,r2,32
   11e0c:	da400317 	ldw	r9,12(sp)
   11e10:	da000417 	ldw	r8,16(sp)
   11e14:	d9800217 	ldw	r6,8(sp)
   11e18:	d9400117 	ldw	r5,4(sp)
   11e1c:	003eb306 	br	118ec <__alt_exception_stack_pointer+0xf80118ec>
   11e20:	d9800017 	ldw	r6,0(sp)
   11e24:	a9ab883a 	add	r21,r21,r6
   11e28:	a98b803a 	cmpltu	r5,r21,r6
   11e2c:	2d8b883a 	add	r5,r5,r22
   11e30:	2a11883a 	add	r8,r5,r8
   11e34:	897fffc4 	addi	r5,r17,-1
   11e38:	b2000c2e 	bgeu	r22,r8,11e6c <__divdf3+0x808>
   11e3c:	41003f36 	bltu	r8,r4,11f3c <__divdf3+0x8d8>
   11e40:	22006c26 	beq	r4,r8,11ff4 <__divdf3+0x990>
   11e44:	4109c83a 	sub	r4,r8,r4
   11e48:	2823883a 	mov	r17,r5
   11e4c:	003f3b06 	br	11b3c <__alt_exception_stack_pointer+0xf8011b3c>
   11e50:	ad3ed336 	bltu	r21,r20,119a0 <__alt_exception_stack_pointer+0xf80119a0>
   11e54:	a804d07a 	srli	r2,r21,1
   11e58:	802e97fa 	slli	r23,r16,31
   11e5c:	a82a97fa 	slli	r21,r21,31
   11e60:	8020d07a 	srli	r16,r16,1
   11e64:	b8aeb03a 	or	r23,r23,r2
   11e68:	003ed006 	br	119ac <__alt_exception_stack_pointer+0xf80119ac>
   11e6c:	b23ff51e 	bne	r22,r8,11e44 <__alt_exception_stack_pointer+0xf8011e44>
   11e70:	d9800017 	ldw	r6,0(sp)
   11e74:	a9bff12e 	bgeu	r21,r6,11e3c <__alt_exception_stack_pointer+0xf8011e3c>
   11e78:	b109c83a 	sub	r4,r22,r4
   11e7c:	2823883a 	mov	r17,r5
   11e80:	003f2e06 	br	11b3c <__alt_exception_stack_pointer+0xf8011b3c>
   11e84:	2021883a 	mov	r16,r4
   11e88:	003eff06 	br	11a88 <__alt_exception_stack_pointer+0xf8011a88>
   11e8c:	2023883a 	mov	r17,r4
   11e90:	003ee406 	br	11a24 <__alt_exception_stack_pointer+0xf8011a24>
   11e94:	a8bfe236 	bltu	r21,r2,11e20 <__alt_exception_stack_pointer+0xf8011e20>
   11e98:	0009883a 	mov	r4,zero
   11e9c:	003f2706 	br	11b3c <__alt_exception_stack_pointer+0xf8011b3c>
   11ea0:	81002d36 	bltu	r16,r4,11f58 <__divdf3+0x8f4>
   11ea4:	24005626 	beq	r4,r16,12000 <__divdf3+0x99c>
   11ea8:	2829883a 	mov	r20,r5
   11eac:	003f8006 	br	11cb0 <__alt_exception_stack_pointer+0xf8011cb0>
   11eb0:	053fffc4 	movi	r20,-1
   11eb4:	003f7f06 	br	11cb4 <__alt_exception_stack_pointer+0xf8011cb4>
   11eb8:	200f883a 	mov	r7,r4
   11ebc:	003f3c06 	br	11bb0 <__alt_exception_stack_pointer+0xf8011bb0>
   11ec0:	1011883a 	mov	r8,r2
   11ec4:	003f5506 	br	11c1c <__alt_exception_stack_pointer+0xf8011c1c>
   11ec8:	e027883a 	mov	r19,fp
   11ecc:	003f7906 	br	11cb4 <__alt_exception_stack_pointer+0xf8011cb4>
   11ed0:	010007c4 	movi	r4,31
   11ed4:	20c02816 	blt	r4,r3,11f78 <__divdf3+0x914>
   11ed8:	00800804 	movi	r2,32
   11edc:	10c5c83a 	sub	r2,r2,r3
   11ee0:	888a983a 	sll	r5,r17,r2
   11ee4:	a0c8d83a 	srl	r4,r20,r3
   11ee8:	a084983a 	sll	r2,r20,r2
   11eec:	88e2d83a 	srl	r17,r17,r3
   11ef0:	2906b03a 	or	r3,r5,r4
   11ef4:	1004c03a 	cmpne	r2,r2,zero
   11ef8:	1886b03a 	or	r3,r3,r2
   11efc:	188001cc 	andi	r2,r3,7
   11f00:	10000726 	beq	r2,zero,11f20 <__divdf3+0x8bc>
   11f04:	188003cc 	andi	r2,r3,15
   11f08:	01000104 	movi	r4,4
   11f0c:	11000426 	beq	r2,r4,11f20 <__divdf3+0x8bc>
   11f10:	1805883a 	mov	r2,r3
   11f14:	10c00104 	addi	r3,r2,4
   11f18:	1885803a 	cmpltu	r2,r3,r2
   11f1c:	88a3883a 	add	r17,r17,r2
   11f20:	8880202c 	andhi	r2,r17,128
   11f24:	10002926 	beq	r2,zero,11fcc <__divdf3+0x968>
   11f28:	9900004c 	andi	r4,r19,1
   11f2c:	00800044 	movi	r2,1
   11f30:	0021883a 	mov	r16,zero
   11f34:	002b883a 	mov	r21,zero
   11f38:	003e2906 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11f3c:	d9800017 	ldw	r6,0(sp)
   11f40:	8c7fff84 	addi	r17,r17,-2
   11f44:	a9ab883a 	add	r21,r21,r6
   11f48:	a98b803a 	cmpltu	r5,r21,r6
   11f4c:	2d8b883a 	add	r5,r5,r22
   11f50:	2a11883a 	add	r8,r5,r8
   11f54:	003ef806 	br	11b38 <__alt_exception_stack_pointer+0xf8011b38>
   11f58:	d9800017 	ldw	r6,0(sp)
   11f5c:	318f883a 	add	r7,r6,r6
   11f60:	398b803a 	cmpltu	r5,r7,r6
   11f64:	2d8d883a 	add	r6,r5,r22
   11f68:	81a1883a 	add	r16,r16,r6
   11f6c:	a17fff84 	addi	r5,r20,-2
   11f70:	d9c00015 	stw	r7,0(sp)
   11f74:	003f8806 	br	11d98 <__alt_exception_stack_pointer+0xf8011d98>
   11f78:	013ff844 	movi	r4,-31
   11f7c:	2085c83a 	sub	r2,r4,r2
   11f80:	8888d83a 	srl	r4,r17,r2
   11f84:	00800804 	movi	r2,32
   11f88:	18802126 	beq	r3,r2,12010 <__divdf3+0x9ac>
   11f8c:	04001004 	movi	r16,64
   11f90:	80c7c83a 	sub	r3,r16,r3
   11f94:	88e0983a 	sll	r16,r17,r3
   11f98:	8504b03a 	or	r2,r16,r20
   11f9c:	1004c03a 	cmpne	r2,r2,zero
   11fa0:	2084b03a 	or	r2,r4,r2
   11fa4:	144001cc 	andi	r17,r2,7
   11fa8:	88000d1e 	bne	r17,zero,11fe0 <__divdf3+0x97c>
   11fac:	0021883a 	mov	r16,zero
   11fb0:	102ad0fa 	srli	r21,r2,3
   11fb4:	9900004c 	andi	r4,r19,1
   11fb8:	0005883a 	mov	r2,zero
   11fbc:	ac6ab03a 	or	r21,r21,r17
   11fc0:	003e0706 	br	117e0 <__alt_exception_stack_pointer+0xf80117e0>
   11fc4:	1007883a 	mov	r3,r2
   11fc8:	0023883a 	mov	r17,zero
   11fcc:	8820927a 	slli	r16,r17,9
   11fd0:	1805883a 	mov	r2,r3
   11fd4:	8822977a 	slli	r17,r17,29
   11fd8:	8020d33a 	srli	r16,r16,12
   11fdc:	003ff406 	br	11fb0 <__alt_exception_stack_pointer+0xf8011fb0>
   11fe0:	10c003cc 	andi	r3,r2,15
   11fe4:	01000104 	movi	r4,4
   11fe8:	193ff626 	beq	r3,r4,11fc4 <__alt_exception_stack_pointer+0xf8011fc4>
   11fec:	0023883a 	mov	r17,zero
   11ff0:	003fc806 	br	11f14 <__alt_exception_stack_pointer+0xf8011f14>
   11ff4:	a8bfd136 	bltu	r21,r2,11f3c <__alt_exception_stack_pointer+0xf8011f3c>
   11ff8:	2823883a 	mov	r17,r5
   11ffc:	003fa606 	br	11e98 <__alt_exception_stack_pointer+0xf8011e98>
   12000:	d9800017 	ldw	r6,0(sp)
   12004:	30bfd436 	bltu	r6,r2,11f58 <__alt_exception_stack_pointer+0xf8011f58>
   12008:	2829883a 	mov	r20,r5
   1200c:	003f6406 	br	11da0 <__alt_exception_stack_pointer+0xf8011da0>
   12010:	0021883a 	mov	r16,zero
   12014:	003fe006 	br	11f98 <__alt_exception_stack_pointer+0xf8011f98>
   12018:	00800434 	movhi	r2,16
   1201c:	8c000234 	orhi	r16,r17,8
   12020:	10bfffc4 	addi	r2,r2,-1
   12024:	e009883a 	mov	r4,fp
   12028:	80a0703a 	and	r16,r16,r2
   1202c:	a02b883a 	mov	r21,r20
   12030:	003e4e06 	br	1196c <__alt_exception_stack_pointer+0xf801196c>

00012034 <__ledf2>:
   12034:	2804d53a 	srli	r2,r5,20
   12038:	3810d53a 	srli	r8,r7,20
   1203c:	00c00434 	movhi	r3,16
   12040:	18ffffc4 	addi	r3,r3,-1
   12044:	1081ffcc 	andi	r2,r2,2047
   12048:	0241ffc4 	movi	r9,2047
   1204c:	28d4703a 	and	r10,r5,r3
   12050:	4201ffcc 	andi	r8,r8,2047
   12054:	38c6703a 	and	r3,r7,r3
   12058:	280ad7fa 	srli	r5,r5,31
   1205c:	380ed7fa 	srli	r7,r7,31
   12060:	12401f26 	beq	r2,r9,120e0 <__ledf2+0xac>
   12064:	0241ffc4 	movi	r9,2047
   12068:	42401426 	beq	r8,r9,120bc <__ledf2+0x88>
   1206c:	1000091e 	bne	r2,zero,12094 <__ledf2+0x60>
   12070:	2296b03a 	or	r11,r4,r10
   12074:	5813003a 	cmpeq	r9,r11,zero
   12078:	29403fcc 	andi	r5,r5,255
   1207c:	40000a1e 	bne	r8,zero,120a8 <__ledf2+0x74>
   12080:	30d8b03a 	or	r12,r6,r3
   12084:	6000081e 	bne	r12,zero,120a8 <__ledf2+0x74>
   12088:	0005883a 	mov	r2,zero
   1208c:	5800111e 	bne	r11,zero,120d4 <__ledf2+0xa0>
   12090:	f800283a 	ret
   12094:	29403fcc 	andi	r5,r5,255
   12098:	40000c1e 	bne	r8,zero,120cc <__ledf2+0x98>
   1209c:	30d2b03a 	or	r9,r6,r3
   120a0:	48000c26 	beq	r9,zero,120d4 <__ledf2+0xa0>
   120a4:	0013883a 	mov	r9,zero
   120a8:	39c03fcc 	andi	r7,r7,255
   120ac:	48000826 	beq	r9,zero,120d0 <__ledf2+0x9c>
   120b0:	38001126 	beq	r7,zero,120f8 <__ledf2+0xc4>
   120b4:	00800044 	movi	r2,1
   120b8:	f800283a 	ret
   120bc:	30d2b03a 	or	r9,r6,r3
   120c0:	483fea26 	beq	r9,zero,1206c <__alt_exception_stack_pointer+0xf801206c>
   120c4:	00800084 	movi	r2,2
   120c8:	f800283a 	ret
   120cc:	39c03fcc 	andi	r7,r7,255
   120d0:	39400726 	beq	r7,r5,120f0 <__ledf2+0xbc>
   120d4:	2800081e 	bne	r5,zero,120f8 <__ledf2+0xc4>
   120d8:	00800044 	movi	r2,1
   120dc:	f800283a 	ret
   120e0:	2292b03a 	or	r9,r4,r10
   120e4:	483fdf26 	beq	r9,zero,12064 <__alt_exception_stack_pointer+0xf8012064>
   120e8:	00800084 	movi	r2,2
   120ec:	f800283a 	ret
   120f0:	4080030e 	bge	r8,r2,12100 <__ledf2+0xcc>
   120f4:	383fef26 	beq	r7,zero,120b4 <__alt_exception_stack_pointer+0xf80120b4>
   120f8:	00bfffc4 	movi	r2,-1
   120fc:	f800283a 	ret
   12100:	123feb16 	blt	r2,r8,120b0 <__alt_exception_stack_pointer+0xf80120b0>
   12104:	1abff336 	bltu	r3,r10,120d4 <__alt_exception_stack_pointer+0xf80120d4>
   12108:	50c00326 	beq	r10,r3,12118 <__ledf2+0xe4>
   1210c:	50c0042e 	bgeu	r10,r3,12120 <__ledf2+0xec>
   12110:	283fe81e 	bne	r5,zero,120b4 <__alt_exception_stack_pointer+0xf80120b4>
   12114:	003ff806 	br	120f8 <__alt_exception_stack_pointer+0xf80120f8>
   12118:	313fee36 	bltu	r6,r4,120d4 <__alt_exception_stack_pointer+0xf80120d4>
   1211c:	21bffc36 	bltu	r4,r6,12110 <__alt_exception_stack_pointer+0xf8012110>
   12120:	0005883a 	mov	r2,zero
   12124:	f800283a 	ret

00012128 <__floatunsidf>:
   12128:	defffe04 	addi	sp,sp,-8
   1212c:	dc000015 	stw	r16,0(sp)
   12130:	dfc00115 	stw	ra,4(sp)
   12134:	2021883a 	mov	r16,r4
   12138:	20002226 	beq	r4,zero,121c4 <__floatunsidf+0x9c>
   1213c:	00070c40 	call	70c4 <__clzsi2>
   12140:	01010784 	movi	r4,1054
   12144:	2089c83a 	sub	r4,r4,r2
   12148:	01810cc4 	movi	r6,1075
   1214c:	310dc83a 	sub	r6,r6,r4
   12150:	00c007c4 	movi	r3,31
   12154:	1980120e 	bge	r3,r6,121a0 <__floatunsidf+0x78>
   12158:	00c104c4 	movi	r3,1043
   1215c:	1907c83a 	sub	r3,r3,r4
   12160:	80ca983a 	sll	r5,r16,r3
   12164:	00800434 	movhi	r2,16
   12168:	10bfffc4 	addi	r2,r2,-1
   1216c:	2101ffcc 	andi	r4,r4,2047
   12170:	0021883a 	mov	r16,zero
   12174:	288a703a 	and	r5,r5,r2
   12178:	2008953a 	slli	r4,r4,20
   1217c:	00c00434 	movhi	r3,16
   12180:	18ffffc4 	addi	r3,r3,-1
   12184:	28c6703a 	and	r3,r5,r3
   12188:	8005883a 	mov	r2,r16
   1218c:	1906b03a 	or	r3,r3,r4
   12190:	dfc00117 	ldw	ra,4(sp)
   12194:	dc000017 	ldw	r16,0(sp)
   12198:	dec00204 	addi	sp,sp,8
   1219c:	f800283a 	ret
   121a0:	00c002c4 	movi	r3,11
   121a4:	188bc83a 	sub	r5,r3,r2
   121a8:	814ad83a 	srl	r5,r16,r5
   121ac:	00c00434 	movhi	r3,16
   121b0:	18ffffc4 	addi	r3,r3,-1
   121b4:	81a0983a 	sll	r16,r16,r6
   121b8:	2101ffcc 	andi	r4,r4,2047
   121bc:	28ca703a 	and	r5,r5,r3
   121c0:	003fed06 	br	12178 <__alt_exception_stack_pointer+0xf8012178>
   121c4:	0009883a 	mov	r4,zero
   121c8:	000b883a 	mov	r5,zero
   121cc:	003fea06 	br	12178 <__alt_exception_stack_pointer+0xf8012178>

000121d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   121d0:	defffe04 	addi	sp,sp,-8
   121d4:	dfc00115 	stw	ra,4(sp)
   121d8:	df000015 	stw	fp,0(sp)
   121dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   121e0:	d0a01117 	ldw	r2,-32700(gp)
   121e4:	10000326 	beq	r2,zero,121f4 <alt_get_errno+0x24>
   121e8:	d0a01117 	ldw	r2,-32700(gp)
   121ec:	103ee83a 	callr	r2
   121f0:	00000106 	br	121f8 <alt_get_errno+0x28>
   121f4:	d0a73d04 	addi	r2,gp,-25356
}
   121f8:	e037883a 	mov	sp,fp
   121fc:	dfc00117 	ldw	ra,4(sp)
   12200:	df000017 	ldw	fp,0(sp)
   12204:	dec00204 	addi	sp,sp,8
   12208:	f800283a 	ret

0001220c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1220c:	defffb04 	addi	sp,sp,-20
   12210:	dfc00415 	stw	ra,16(sp)
   12214:	df000315 	stw	fp,12(sp)
   12218:	df000304 	addi	fp,sp,12
   1221c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12220:	e0bfff17 	ldw	r2,-4(fp)
   12224:	10000816 	blt	r2,zero,12248 <close+0x3c>
   12228:	01400304 	movi	r5,12
   1222c:	e13fff17 	ldw	r4,-4(fp)
   12230:	00053c80 	call	53c8 <__mulsi3>
   12234:	1007883a 	mov	r3,r2
   12238:	00800074 	movhi	r2,1
   1223c:	109c9204 	addi	r2,r2,29256
   12240:	1885883a 	add	r2,r3,r2
   12244:	00000106 	br	1224c <close+0x40>
   12248:	0005883a 	mov	r2,zero
   1224c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12250:	e0bffd17 	ldw	r2,-12(fp)
   12254:	10001926 	beq	r2,zero,122bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12258:	e0bffd17 	ldw	r2,-12(fp)
   1225c:	10800017 	ldw	r2,0(r2)
   12260:	10800417 	ldw	r2,16(r2)
   12264:	10000626 	beq	r2,zero,12280 <close+0x74>
   12268:	e0bffd17 	ldw	r2,-12(fp)
   1226c:	10800017 	ldw	r2,0(r2)
   12270:	10800417 	ldw	r2,16(r2)
   12274:	e13ffd17 	ldw	r4,-12(fp)
   12278:	103ee83a 	callr	r2
   1227c:	00000106 	br	12284 <close+0x78>
   12280:	0005883a 	mov	r2,zero
   12284:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12288:	e13fff17 	ldw	r4,-4(fp)
   1228c:	0012aa40 	call	12aa4 <alt_release_fd>
    if (rval < 0)
   12290:	e0bffe17 	ldw	r2,-8(fp)
   12294:	1000070e 	bge	r2,zero,122b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   12298:	00121d00 	call	121d0 <alt_get_errno>
   1229c:	1007883a 	mov	r3,r2
   122a0:	e0bffe17 	ldw	r2,-8(fp)
   122a4:	0085c83a 	sub	r2,zero,r2
   122a8:	18800015 	stw	r2,0(r3)
      return -1;
   122ac:	00bfffc4 	movi	r2,-1
   122b0:	00000706 	br	122d0 <close+0xc4>
    }
    return 0;
   122b4:	0005883a 	mov	r2,zero
   122b8:	00000506 	br	122d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   122bc:	00121d00 	call	121d0 <alt_get_errno>
   122c0:	1007883a 	mov	r3,r2
   122c4:	00801444 	movi	r2,81
   122c8:	18800015 	stw	r2,0(r3)
    return -1;
   122cc:	00bfffc4 	movi	r2,-1
  }
}
   122d0:	e037883a 	mov	sp,fp
   122d4:	dfc00117 	ldw	ra,4(sp)
   122d8:	df000017 	ldw	fp,0(sp)
   122dc:	dec00204 	addi	sp,sp,8
   122e0:	f800283a 	ret

000122e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   122e4:	defffc04 	addi	sp,sp,-16
   122e8:	df000315 	stw	fp,12(sp)
   122ec:	df000304 	addi	fp,sp,12
   122f0:	e13ffd15 	stw	r4,-12(fp)
   122f4:	e17ffe15 	stw	r5,-8(fp)
   122f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   122fc:	e0bfff17 	ldw	r2,-4(fp)
}
   12300:	e037883a 	mov	sp,fp
   12304:	df000017 	ldw	fp,0(sp)
   12308:	dec00104 	addi	sp,sp,4
   1230c:	f800283a 	ret

00012310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12310:	defffe04 	addi	sp,sp,-8
   12314:	dfc00115 	stw	ra,4(sp)
   12318:	df000015 	stw	fp,0(sp)
   1231c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12320:	d0a01117 	ldw	r2,-32700(gp)
   12324:	10000326 	beq	r2,zero,12334 <alt_get_errno+0x24>
   12328:	d0a01117 	ldw	r2,-32700(gp)
   1232c:	103ee83a 	callr	r2
   12330:	00000106 	br	12338 <alt_get_errno+0x28>
   12334:	d0a73d04 	addi	r2,gp,-25356
}
   12338:	e037883a 	mov	sp,fp
   1233c:	dfc00117 	ldw	ra,4(sp)
   12340:	df000017 	ldw	fp,0(sp)
   12344:	dec00204 	addi	sp,sp,8
   12348:	f800283a 	ret

0001234c <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   1234c:	defffc04 	addi	sp,sp,-16
   12350:	dfc00315 	stw	ra,12(sp)
   12354:	df000215 	stw	fp,8(sp)
   12358:	df000204 	addi	fp,sp,8
   1235c:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   12360:	d1600d04 	addi	r5,gp,-32716
   12364:	e13fff17 	ldw	r4,-4(fp)
   12368:	00124300 	call	12430 <alt_find_dev>
   1236c:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   12370:	e0bffe17 	ldw	r2,-8(fp)
   12374:	1000041e 	bne	r2,zero,12388 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   12378:	00123100 	call	12310 <alt_get_errno>
   1237c:	1007883a 	mov	r3,r2
   12380:	008004c4 	movi	r2,19
   12384:	18800015 	stw	r2,0(r3)
  }

  return dev;
   12388:	e0bffe17 	ldw	r2,-8(fp)
}
   1238c:	e037883a 	mov	sp,fp
   12390:	dfc00117 	ldw	ra,4(sp)
   12394:	df000017 	ldw	fp,0(sp)
   12398:	dec00204 	addi	sp,sp,8
   1239c:	f800283a 	ret

000123a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   123a0:	defffe04 	addi	sp,sp,-8
   123a4:	dfc00115 	stw	ra,4(sp)
   123a8:	df000015 	stw	fp,0(sp)
   123ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   123b0:	d0a01117 	ldw	r2,-32700(gp)
   123b4:	10000326 	beq	r2,zero,123c4 <alt_get_errno+0x24>
   123b8:	d0a01117 	ldw	r2,-32700(gp)
   123bc:	103ee83a 	callr	r2
   123c0:	00000106 	br	123c8 <alt_get_errno+0x28>
   123c4:	d0a73d04 	addi	r2,gp,-25356
}
   123c8:	e037883a 	mov	sp,fp
   123cc:	dfc00117 	ldw	ra,4(sp)
   123d0:	df000017 	ldw	fp,0(sp)
   123d4:	dec00204 	addi	sp,sp,8
   123d8:	f800283a 	ret

000123dc <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   123dc:	defffc04 	addi	sp,sp,-16
   123e0:	dfc00315 	stw	ra,12(sp)
   123e4:	df000215 	stw	fp,8(sp)
   123e8:	df000204 	addi	fp,sp,8
   123ec:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   123f0:	d1600f04 	addi	r5,gp,-32708
   123f4:	e13fff17 	ldw	r4,-4(fp)
   123f8:	00124300 	call	12430 <alt_find_dev>
   123fc:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   12400:	e0bffe17 	ldw	r2,-8(fp)
   12404:	1000041e 	bne	r2,zero,12418 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   12408:	00123a00 	call	123a0 <alt_get_errno>
   1240c:	1007883a 	mov	r3,r2
   12410:	008004c4 	movi	r2,19
   12414:	18800015 	stw	r2,0(r3)
  }

  return dev;
   12418:	e0bffe17 	ldw	r2,-8(fp)
}
   1241c:	e037883a 	mov	sp,fp
   12420:	dfc00117 	ldw	ra,4(sp)
   12424:	df000017 	ldw	fp,0(sp)
   12428:	dec00204 	addi	sp,sp,8
   1242c:	f800283a 	ret

00012430 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12430:	defffa04 	addi	sp,sp,-24
   12434:	dfc00515 	stw	ra,20(sp)
   12438:	df000415 	stw	fp,16(sp)
   1243c:	df000404 	addi	fp,sp,16
   12440:	e13ffe15 	stw	r4,-8(fp)
   12444:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12448:	e0bfff17 	ldw	r2,-4(fp)
   1244c:	10800017 	ldw	r2,0(r2)
   12450:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12454:	e13ffe17 	ldw	r4,-8(fp)
   12458:	0007b3c0 	call	7b3c <strlen>
   1245c:	10800044 	addi	r2,r2,1
   12460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12464:	00000d06 	br	1249c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12468:	e0bffc17 	ldw	r2,-16(fp)
   1246c:	10800217 	ldw	r2,8(r2)
   12470:	e0fffd17 	ldw	r3,-12(fp)
   12474:	180d883a 	mov	r6,r3
   12478:	e17ffe17 	ldw	r5,-8(fp)
   1247c:	1009883a 	mov	r4,r2
   12480:	001582c0 	call	1582c <memcmp>
   12484:	1000021e 	bne	r2,zero,12490 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12488:	e0bffc17 	ldw	r2,-16(fp)
   1248c:	00000706 	br	124ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12490:	e0bffc17 	ldw	r2,-16(fp)
   12494:	10800017 	ldw	r2,0(r2)
   12498:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1249c:	e0fffc17 	ldw	r3,-16(fp)
   124a0:	e0bfff17 	ldw	r2,-4(fp)
   124a4:	18bff01e 	bne	r3,r2,12468 <__alt_exception_stack_pointer+0xf8012468>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   124a8:	0005883a 	mov	r2,zero
}
   124ac:	e037883a 	mov	sp,fp
   124b0:	dfc00117 	ldw	ra,4(sp)
   124b4:	df000017 	ldw	fp,0(sp)
   124b8:	dec00204 	addi	sp,sp,8
   124bc:	f800283a 	ret

000124c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   124c0:	defffe04 	addi	sp,sp,-8
   124c4:	dfc00115 	stw	ra,4(sp)
   124c8:	df000015 	stw	fp,0(sp)
   124cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   124d0:	d0a01117 	ldw	r2,-32700(gp)
   124d4:	10000326 	beq	r2,zero,124e4 <alt_get_errno+0x24>
   124d8:	d0a01117 	ldw	r2,-32700(gp)
   124dc:	103ee83a 	callr	r2
   124e0:	00000106 	br	124e8 <alt_get_errno+0x28>
   124e4:	d0a73d04 	addi	r2,gp,-25356
}
   124e8:	e037883a 	mov	sp,fp
   124ec:	dfc00117 	ldw	ra,4(sp)
   124f0:	df000017 	ldw	fp,0(sp)
   124f4:	dec00204 	addi	sp,sp,8
   124f8:	f800283a 	ret

000124fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   124fc:	defffb04 	addi	sp,sp,-20
   12500:	dfc00415 	stw	ra,16(sp)
   12504:	df000315 	stw	fp,12(sp)
   12508:	df000304 	addi	fp,sp,12
   1250c:	e13ffe15 	stw	r4,-8(fp)
   12510:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12514:	e0bffe17 	ldw	r2,-8(fp)
   12518:	10000816 	blt	r2,zero,1253c <fstat+0x40>
   1251c:	01400304 	movi	r5,12
   12520:	e13ffe17 	ldw	r4,-8(fp)
   12524:	00053c80 	call	53c8 <__mulsi3>
   12528:	1007883a 	mov	r3,r2
   1252c:	00800074 	movhi	r2,1
   12530:	109c9204 	addi	r2,r2,29256
   12534:	1885883a 	add	r2,r3,r2
   12538:	00000106 	br	12540 <fstat+0x44>
   1253c:	0005883a 	mov	r2,zero
   12540:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12544:	e0bffd17 	ldw	r2,-12(fp)
   12548:	10001026 	beq	r2,zero,1258c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1254c:	e0bffd17 	ldw	r2,-12(fp)
   12550:	10800017 	ldw	r2,0(r2)
   12554:	10800817 	ldw	r2,32(r2)
   12558:	10000726 	beq	r2,zero,12578 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1255c:	e0bffd17 	ldw	r2,-12(fp)
   12560:	10800017 	ldw	r2,0(r2)
   12564:	10800817 	ldw	r2,32(r2)
   12568:	e17fff17 	ldw	r5,-4(fp)
   1256c:	e13ffd17 	ldw	r4,-12(fp)
   12570:	103ee83a 	callr	r2
   12574:	00000a06 	br	125a0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12578:	e0bfff17 	ldw	r2,-4(fp)
   1257c:	00c80004 	movi	r3,8192
   12580:	10c00115 	stw	r3,4(r2)
      return 0;
   12584:	0005883a 	mov	r2,zero
   12588:	00000506 	br	125a0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1258c:	00124c00 	call	124c0 <alt_get_errno>
   12590:	1007883a 	mov	r3,r2
   12594:	00801444 	movi	r2,81
   12598:	18800015 	stw	r2,0(r3)
    return -1;
   1259c:	00bfffc4 	movi	r2,-1
  }
}
   125a0:	e037883a 	mov	sp,fp
   125a4:	dfc00117 	ldw	ra,4(sp)
   125a8:	df000017 	ldw	fp,0(sp)
   125ac:	dec00204 	addi	sp,sp,8
   125b0:	f800283a 	ret

000125b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   125b4:	defffe04 	addi	sp,sp,-8
   125b8:	dfc00115 	stw	ra,4(sp)
   125bc:	df000015 	stw	fp,0(sp)
   125c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   125c4:	d0a01117 	ldw	r2,-32700(gp)
   125c8:	10000326 	beq	r2,zero,125d8 <alt_get_errno+0x24>
   125cc:	d0a01117 	ldw	r2,-32700(gp)
   125d0:	103ee83a 	callr	r2
   125d4:	00000106 	br	125dc <alt_get_errno+0x28>
   125d8:	d0a73d04 	addi	r2,gp,-25356
}
   125dc:	e037883a 	mov	sp,fp
   125e0:	dfc00117 	ldw	ra,4(sp)
   125e4:	df000017 	ldw	fp,0(sp)
   125e8:	dec00204 	addi	sp,sp,8
   125ec:	f800283a 	ret

000125f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   125f0:	deffed04 	addi	sp,sp,-76
   125f4:	dfc01215 	stw	ra,72(sp)
   125f8:	df001115 	stw	fp,68(sp)
   125fc:	df001104 	addi	fp,sp,68
   12600:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12604:	e0bfff17 	ldw	r2,-4(fp)
   12608:	10000816 	blt	r2,zero,1262c <isatty+0x3c>
   1260c:	01400304 	movi	r5,12
   12610:	e13fff17 	ldw	r4,-4(fp)
   12614:	00053c80 	call	53c8 <__mulsi3>
   12618:	1007883a 	mov	r3,r2
   1261c:	00800074 	movhi	r2,1
   12620:	109c9204 	addi	r2,r2,29256
   12624:	1885883a 	add	r2,r3,r2
   12628:	00000106 	br	12630 <isatty+0x40>
   1262c:	0005883a 	mov	r2,zero
   12630:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   12634:	e0bfef17 	ldw	r2,-68(fp)
   12638:	10000e26 	beq	r2,zero,12674 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1263c:	e0bfef17 	ldw	r2,-68(fp)
   12640:	10800017 	ldw	r2,0(r2)
   12644:	10800817 	ldw	r2,32(r2)
   12648:	1000021e 	bne	r2,zero,12654 <isatty+0x64>
    {
      return 1;
   1264c:	00800044 	movi	r2,1
   12650:	00000d06 	br	12688 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12654:	e0bff004 	addi	r2,fp,-64
   12658:	100b883a 	mov	r5,r2
   1265c:	e13fff17 	ldw	r4,-4(fp)
   12660:	00124fc0 	call	124fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12664:	e0bff117 	ldw	r2,-60(fp)
   12668:	10880020 	cmpeqi	r2,r2,8192
   1266c:	10803fcc 	andi	r2,r2,255
   12670:	00000506 	br	12688 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12674:	00125b40 	call	125b4 <alt_get_errno>
   12678:	1007883a 	mov	r3,r2
   1267c:	00801444 	movi	r2,81
   12680:	18800015 	stw	r2,0(r3)
    return 0;
   12684:	0005883a 	mov	r2,zero
  }
}
   12688:	e037883a 	mov	sp,fp
   1268c:	dfc00117 	ldw	ra,4(sp)
   12690:	df000017 	ldw	fp,0(sp)
   12694:	dec00204 	addi	sp,sp,8
   12698:	f800283a 	ret

0001269c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1269c:	defffc04 	addi	sp,sp,-16
   126a0:	df000315 	stw	fp,12(sp)
   126a4:	df000304 	addi	fp,sp,12
   126a8:	e13ffd15 	stw	r4,-12(fp)
   126ac:	e17ffe15 	stw	r5,-8(fp)
   126b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   126b4:	e0fffe17 	ldw	r3,-8(fp)
   126b8:	e0bffd17 	ldw	r2,-12(fp)
   126bc:	18800c26 	beq	r3,r2,126f0 <alt_load_section+0x54>
  {
    while( to != end )
   126c0:	00000806 	br	126e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   126c4:	e0bffe17 	ldw	r2,-8(fp)
   126c8:	10c00104 	addi	r3,r2,4
   126cc:	e0fffe15 	stw	r3,-8(fp)
   126d0:	e0fffd17 	ldw	r3,-12(fp)
   126d4:	19000104 	addi	r4,r3,4
   126d8:	e13ffd15 	stw	r4,-12(fp)
   126dc:	18c00017 	ldw	r3,0(r3)
   126e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   126e4:	e0fffe17 	ldw	r3,-8(fp)
   126e8:	e0bfff17 	ldw	r2,-4(fp)
   126ec:	18bff51e 	bne	r3,r2,126c4 <__alt_exception_stack_pointer+0xf80126c4>
    {
      *to++ = *from++;
    }
  }
}
   126f0:	0001883a 	nop
   126f4:	e037883a 	mov	sp,fp
   126f8:	df000017 	ldw	fp,0(sp)
   126fc:	dec00104 	addi	sp,sp,4
   12700:	f800283a 	ret

00012704 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12704:	defffe04 	addi	sp,sp,-8
   12708:	dfc00115 	stw	ra,4(sp)
   1270c:	df000015 	stw	fp,0(sp)
   12710:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12714:	018000b4 	movhi	r6,2
   12718:	31a17c04 	addi	r6,r6,-31248
   1271c:	01400074 	movhi	r5,1
   12720:	295a5f04 	addi	r5,r5,27004
   12724:	010000b4 	movhi	r4,2
   12728:	21217c04 	addi	r4,r4,-31248
   1272c:	001269c0 	call	1269c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12730:	01800034 	movhi	r6,0
   12734:	31808f04 	addi	r6,r6,572
   12738:	01400034 	movhi	r5,0
   1273c:	29400804 	addi	r5,r5,32
   12740:	01000034 	movhi	r4,0
   12744:	21000804 	addi	r4,r4,32
   12748:	001269c0 	call	1269c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1274c:	01800074 	movhi	r6,1
   12750:	319a5f04 	addi	r6,r6,27004
   12754:	01400074 	movhi	r5,1
   12758:	2956dd04 	addi	r5,r5,23412
   1275c:	01000074 	movhi	r4,1
   12760:	2116dd04 	addi	r4,r4,23412
   12764:	001269c0 	call	1269c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12768:	0014b4c0 	call	14b4c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1276c:	0014d0c0 	call	14d0c <alt_icache_flush_all>
}
   12770:	0001883a 	nop
   12774:	e037883a 	mov	sp,fp
   12778:	dfc00117 	ldw	ra,4(sp)
   1277c:	df000017 	ldw	fp,0(sp)
   12780:	dec00204 	addi	sp,sp,8
   12784:	f800283a 	ret

00012788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12788:	defffe04 	addi	sp,sp,-8
   1278c:	dfc00115 	stw	ra,4(sp)
   12790:	df000015 	stw	fp,0(sp)
   12794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12798:	d0a01117 	ldw	r2,-32700(gp)
   1279c:	10000326 	beq	r2,zero,127ac <alt_get_errno+0x24>
   127a0:	d0a01117 	ldw	r2,-32700(gp)
   127a4:	103ee83a 	callr	r2
   127a8:	00000106 	br	127b0 <alt_get_errno+0x28>
   127ac:	d0a73d04 	addi	r2,gp,-25356
}
   127b0:	e037883a 	mov	sp,fp
   127b4:	dfc00117 	ldw	ra,4(sp)
   127b8:	df000017 	ldw	fp,0(sp)
   127bc:	dec00204 	addi	sp,sp,8
   127c0:	f800283a 	ret

000127c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   127c4:	defff904 	addi	sp,sp,-28
   127c8:	dfc00615 	stw	ra,24(sp)
   127cc:	df000515 	stw	fp,20(sp)
   127d0:	df000504 	addi	fp,sp,20
   127d4:	e13ffd15 	stw	r4,-12(fp)
   127d8:	e17ffe15 	stw	r5,-8(fp)
   127dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   127e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	10000816 	blt	r2,zero,1280c <lseek+0x48>
   127ec:	01400304 	movi	r5,12
   127f0:	e13ffd17 	ldw	r4,-12(fp)
   127f4:	00053c80 	call	53c8 <__mulsi3>
   127f8:	1007883a 	mov	r3,r2
   127fc:	00800074 	movhi	r2,1
   12800:	109c9204 	addi	r2,r2,29256
   12804:	1885883a 	add	r2,r3,r2
   12808:	00000106 	br	12810 <lseek+0x4c>
   1280c:	0005883a 	mov	r2,zero
   12810:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12814:	e0bffc17 	ldw	r2,-16(fp)
   12818:	10001026 	beq	r2,zero,1285c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1281c:	e0bffc17 	ldw	r2,-16(fp)
   12820:	10800017 	ldw	r2,0(r2)
   12824:	10800717 	ldw	r2,28(r2)
   12828:	10000926 	beq	r2,zero,12850 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1282c:	e0bffc17 	ldw	r2,-16(fp)
   12830:	10800017 	ldw	r2,0(r2)
   12834:	10800717 	ldw	r2,28(r2)
   12838:	e1bfff17 	ldw	r6,-4(fp)
   1283c:	e17ffe17 	ldw	r5,-8(fp)
   12840:	e13ffc17 	ldw	r4,-16(fp)
   12844:	103ee83a 	callr	r2
   12848:	e0bffb15 	stw	r2,-20(fp)
   1284c:	00000506 	br	12864 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12850:	00bfde84 	movi	r2,-134
   12854:	e0bffb15 	stw	r2,-20(fp)
   12858:	00000206 	br	12864 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1285c:	00bfebc4 	movi	r2,-81
   12860:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12864:	e0bffb17 	ldw	r2,-20(fp)
   12868:	1000070e 	bge	r2,zero,12888 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1286c:	00127880 	call	12788 <alt_get_errno>
   12870:	1007883a 	mov	r3,r2
   12874:	e0bffb17 	ldw	r2,-20(fp)
   12878:	0085c83a 	sub	r2,zero,r2
   1287c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12880:	00bfffc4 	movi	r2,-1
   12884:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12888:	e0bffb17 	ldw	r2,-20(fp)
}
   1288c:	e037883a 	mov	sp,fp
   12890:	dfc00117 	ldw	ra,4(sp)
   12894:	df000017 	ldw	fp,0(sp)
   12898:	dec00204 	addi	sp,sp,8
   1289c:	f800283a 	ret

000128a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   128a0:	defffd04 	addi	sp,sp,-12
   128a4:	dfc00215 	stw	ra,8(sp)
   128a8:	df000115 	stw	fp,4(sp)
   128ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   128b0:	0009883a 	mov	r4,zero
   128b4:	0012e2c0 	call	12e2c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   128b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   128bc:	0012e640 	call	12e64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   128c0:	01800074 	movhi	r6,1
   128c4:	319a4504 	addi	r6,r6,26900
   128c8:	01400074 	movhi	r5,1
   128cc:	295a4a04 	addi	r5,r5,26920
   128d0:	01000074 	movhi	r4,1
   128d4:	211a4504 	addi	r4,r4,26900
   128d8:	00150b00 	call	150b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   128dc:	0014c4c0 	call	14c4c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   128e0:	01000074 	movhi	r4,1
   128e4:	21132b04 	addi	r4,r4,19628
   128e8:	00157e00 	call	157e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   128ec:	d0a74117 	ldw	r2,-25340(gp)
   128f0:	d0e74217 	ldw	r3,-25336(gp)
   128f4:	d1274317 	ldw	r4,-25332(gp)
   128f8:	200d883a 	mov	r6,r4
   128fc:	180b883a 	mov	r5,r3
   12900:	1009883a 	mov	r4,r2
   12904:	00016940 	call	1694 <main>
   12908:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1290c:	01000044 	movi	r4,1
   12910:	001220c0 	call	1220c <close>
  exit (result);
   12914:	e13fff17 	ldw	r4,-4(fp)
   12918:	00157f40 	call	157f4 <exit>

0001291c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1291c:	defffe04 	addi	sp,sp,-8
   12920:	df000115 	stw	fp,4(sp)
   12924:	df000104 	addi	fp,sp,4
   12928:	e13fff15 	stw	r4,-4(fp)
}
   1292c:	0001883a 	nop
   12930:	e037883a 	mov	sp,fp
   12934:	df000017 	ldw	fp,0(sp)
   12938:	dec00104 	addi	sp,sp,4
   1293c:	f800283a 	ret

00012940 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   12940:	defffe04 	addi	sp,sp,-8
   12944:	df000115 	stw	fp,4(sp)
   12948:	df000104 	addi	fp,sp,4
   1294c:	e13fff15 	stw	r4,-4(fp)
}
   12950:	0001883a 	nop
   12954:	e037883a 	mov	sp,fp
   12958:	df000017 	ldw	fp,0(sp)
   1295c:	dec00104 	addi	sp,sp,4
   12960:	f800283a 	ret

00012964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12964:	defffe04 	addi	sp,sp,-8
   12968:	dfc00115 	stw	ra,4(sp)
   1296c:	df000015 	stw	fp,0(sp)
   12970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12974:	d0a01117 	ldw	r2,-32700(gp)
   12978:	10000326 	beq	r2,zero,12988 <alt_get_errno+0x24>
   1297c:	d0a01117 	ldw	r2,-32700(gp)
   12980:	103ee83a 	callr	r2
   12984:	00000106 	br	1298c <alt_get_errno+0x28>
   12988:	d0a73d04 	addi	r2,gp,-25356
}
   1298c:	e037883a 	mov	sp,fp
   12990:	dfc00117 	ldw	ra,4(sp)
   12994:	df000017 	ldw	fp,0(sp)
   12998:	dec00204 	addi	sp,sp,8
   1299c:	f800283a 	ret

000129a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   129a0:	defff904 	addi	sp,sp,-28
   129a4:	dfc00615 	stw	ra,24(sp)
   129a8:	df000515 	stw	fp,20(sp)
   129ac:	df000504 	addi	fp,sp,20
   129b0:	e13ffd15 	stw	r4,-12(fp)
   129b4:	e17ffe15 	stw	r5,-8(fp)
   129b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10000816 	blt	r2,zero,129e4 <read+0x44>
   129c4:	01400304 	movi	r5,12
   129c8:	e13ffd17 	ldw	r4,-12(fp)
   129cc:	00053c80 	call	53c8 <__mulsi3>
   129d0:	1007883a 	mov	r3,r2
   129d4:	00800074 	movhi	r2,1
   129d8:	109c9204 	addi	r2,r2,29256
   129dc:	1885883a 	add	r2,r3,r2
   129e0:	00000106 	br	129e8 <read+0x48>
   129e4:	0005883a 	mov	r2,zero
   129e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	10002226 	beq	r2,zero,12a7c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   129f4:	e0bffb17 	ldw	r2,-20(fp)
   129f8:	10800217 	ldw	r2,8(r2)
   129fc:	108000cc 	andi	r2,r2,3
   12a00:	10800060 	cmpeqi	r2,r2,1
   12a04:	1000181e 	bne	r2,zero,12a68 <read+0xc8>
        (fd->dev->read))
   12a08:	e0bffb17 	ldw	r2,-20(fp)
   12a0c:	10800017 	ldw	r2,0(r2)
   12a10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12a14:	10001426 	beq	r2,zero,12a68 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12a18:	e0bffb17 	ldw	r2,-20(fp)
   12a1c:	10800017 	ldw	r2,0(r2)
   12a20:	10800517 	ldw	r2,20(r2)
   12a24:	e0ffff17 	ldw	r3,-4(fp)
   12a28:	180d883a 	mov	r6,r3
   12a2c:	e17ffe17 	ldw	r5,-8(fp)
   12a30:	e13ffb17 	ldw	r4,-20(fp)
   12a34:	103ee83a 	callr	r2
   12a38:	e0bffc15 	stw	r2,-16(fp)
   12a3c:	e0bffc17 	ldw	r2,-16(fp)
   12a40:	1000070e 	bge	r2,zero,12a60 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   12a44:	00129640 	call	12964 <alt_get_errno>
   12a48:	1007883a 	mov	r3,r2
   12a4c:	e0bffc17 	ldw	r2,-16(fp)
   12a50:	0085c83a 	sub	r2,zero,r2
   12a54:	18800015 	stw	r2,0(r3)
          return -1;
   12a58:	00bfffc4 	movi	r2,-1
   12a5c:	00000c06 	br	12a90 <read+0xf0>
        }
        return rval;
   12a60:	e0bffc17 	ldw	r2,-16(fp)
   12a64:	00000a06 	br	12a90 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12a68:	00129640 	call	12964 <alt_get_errno>
   12a6c:	1007883a 	mov	r3,r2
   12a70:	00800344 	movi	r2,13
   12a74:	18800015 	stw	r2,0(r3)
   12a78:	00000406 	br	12a8c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12a7c:	00129640 	call	12964 <alt_get_errno>
   12a80:	1007883a 	mov	r3,r2
   12a84:	00801444 	movi	r2,81
   12a88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12a8c:	00bfffc4 	movi	r2,-1
}
   12a90:	e037883a 	mov	sp,fp
   12a94:	dfc00117 	ldw	ra,4(sp)
   12a98:	df000017 	ldw	fp,0(sp)
   12a9c:	dec00204 	addi	sp,sp,8
   12aa0:	f800283a 	ret

00012aa4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12aa4:	defffc04 	addi	sp,sp,-16
   12aa8:	dfc00315 	stw	ra,12(sp)
   12aac:	df000215 	stw	fp,8(sp)
   12ab0:	dc000115 	stw	r16,4(sp)
   12ab4:	df000204 	addi	fp,sp,8
   12ab8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12abc:	e0bffe17 	ldw	r2,-8(fp)
   12ac0:	108000d0 	cmplti	r2,r2,3
   12ac4:	1000111e 	bne	r2,zero,12b0c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12ac8:	04000074 	movhi	r16,1
   12acc:	841c9204 	addi	r16,r16,29256
   12ad0:	e0bffe17 	ldw	r2,-8(fp)
   12ad4:	01400304 	movi	r5,12
   12ad8:	1009883a 	mov	r4,r2
   12adc:	00053c80 	call	53c8 <__mulsi3>
   12ae0:	8085883a 	add	r2,r16,r2
   12ae4:	10800204 	addi	r2,r2,8
   12ae8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12aec:	04000074 	movhi	r16,1
   12af0:	841c9204 	addi	r16,r16,29256
   12af4:	e0bffe17 	ldw	r2,-8(fp)
   12af8:	01400304 	movi	r5,12
   12afc:	1009883a 	mov	r4,r2
   12b00:	00053c80 	call	53c8 <__mulsi3>
   12b04:	8085883a 	add	r2,r16,r2
   12b08:	10000015 	stw	zero,0(r2)
  }
}
   12b0c:	0001883a 	nop
   12b10:	e6ffff04 	addi	sp,fp,-4
   12b14:	dfc00217 	ldw	ra,8(sp)
   12b18:	df000117 	ldw	fp,4(sp)
   12b1c:	dc000017 	ldw	r16,0(sp)
   12b20:	dec00304 	addi	sp,sp,12
   12b24:	f800283a 	ret

00012b28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12b28:	defff904 	addi	sp,sp,-28
   12b2c:	df000615 	stw	fp,24(sp)
   12b30:	df000604 	addi	fp,sp,24
   12b34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b38:	0005303a 	rdctl	r2,status
   12b3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b40:	e0fffe17 	ldw	r3,-8(fp)
   12b44:	00bfff84 	movi	r2,-2
   12b48:	1884703a 	and	r2,r3,r2
   12b4c:	1001703a 	wrctl	status,r2
  
  return context;
   12b50:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12b54:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12b58:	d0a01217 	ldw	r2,-32696(gp)
   12b5c:	10c000c4 	addi	r3,r2,3
   12b60:	00bfff04 	movi	r2,-4
   12b64:	1884703a 	and	r2,r3,r2
   12b68:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12b6c:	d0e01217 	ldw	r3,-32696(gp)
   12b70:	e0bfff17 	ldw	r2,-4(fp)
   12b74:	1887883a 	add	r3,r3,r2
   12b78:	00820034 	movhi	r2,2048
   12b7c:	10bf0004 	addi	r2,r2,-1024
   12b80:	10c0062e 	bgeu	r2,r3,12b9c <sbrk+0x74>
   12b84:	e0bffb17 	ldw	r2,-20(fp)
   12b88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b8c:	e0bffa17 	ldw	r2,-24(fp)
   12b90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12b94:	00bfffc4 	movi	r2,-1
   12b98:	00000b06 	br	12bc8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12b9c:	d0a01217 	ldw	r2,-32696(gp)
   12ba0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12ba4:	d0e01217 	ldw	r3,-32696(gp)
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	1885883a 	add	r2,r3,r2
   12bb0:	d0a01215 	stw	r2,-32696(gp)
   12bb4:	e0bffb17 	ldw	r2,-20(fp)
   12bb8:	e0bffc15 	stw	r2,-16(fp)
   12bbc:	e0bffc17 	ldw	r2,-16(fp)
   12bc0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12bc4:	e0bffd17 	ldw	r2,-12(fp)
} 
   12bc8:	e037883a 	mov	sp,fp
   12bcc:	df000017 	ldw	fp,0(sp)
   12bd0:	dec00104 	addi	sp,sp,4
   12bd4:	f800283a 	ret

00012bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12bd8:	defffe04 	addi	sp,sp,-8
   12bdc:	dfc00115 	stw	ra,4(sp)
   12be0:	df000015 	stw	fp,0(sp)
   12be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12be8:	d0a01117 	ldw	r2,-32700(gp)
   12bec:	10000326 	beq	r2,zero,12bfc <alt_get_errno+0x24>
   12bf0:	d0a01117 	ldw	r2,-32700(gp)
   12bf4:	103ee83a 	callr	r2
   12bf8:	00000106 	br	12c00 <alt_get_errno+0x28>
   12bfc:	d0a73d04 	addi	r2,gp,-25356
}
   12c00:	e037883a 	mov	sp,fp
   12c04:	dfc00117 	ldw	ra,4(sp)
   12c08:	df000017 	ldw	fp,0(sp)
   12c0c:	dec00204 	addi	sp,sp,8
   12c10:	f800283a 	ret

00012c14 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   12c14:	defffc04 	addi	sp,sp,-16
   12c18:	dfc00315 	stw	ra,12(sp)
   12c1c:	df000215 	stw	fp,8(sp)
   12c20:	df000204 	addi	fp,sp,8
   12c24:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12c28:	d0a74617 	ldw	r2,-25320(gp)
  clock_t ticks = alt_nticks(); 
   12c2c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12c30:	d0a74517 	ldw	r2,-25324(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   12c34:	1000061e 	bne	r2,zero,12c50 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   12c38:	0012bd80 	call	12bd8 <alt_get_errno>
   12c3c:	1007883a 	mov	r3,r2
   12c40:	00801604 	movi	r2,88
   12c44:	18800015 	stw	r2,0(r3)
    return 0;
   12c48:	0005883a 	mov	r2,zero
   12c4c:	00000a06 	br	12c78 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   12c50:	e0bfff17 	ldw	r2,-4(fp)
   12c54:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   12c58:	e0bfff17 	ldw	r2,-4(fp)
   12c5c:	e0fffe17 	ldw	r3,-8(fp)
   12c60:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   12c64:	e0bfff17 	ldw	r2,-4(fp)
   12c68:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   12c6c:	e0bfff17 	ldw	r2,-4(fp)
   12c70:	10000315 	stw	zero,12(r2)

  return ticks;
   12c74:	e0bffe17 	ldw	r2,-8(fp)
}
   12c78:	e037883a 	mov	sp,fp
   12c7c:	dfc00117 	ldw	ra,4(sp)
   12c80:	df000017 	ldw	fp,0(sp)
   12c84:	dec00204 	addi	sp,sp,8
   12c88:	f800283a 	ret

00012c8c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   12c8c:	defffd04 	addi	sp,sp,-12
   12c90:	dfc00215 	stw	ra,8(sp)
   12c94:	df000115 	stw	fp,4(sp)
   12c98:	df000104 	addi	fp,sp,4
   12c9c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   12ca0:	e13fff17 	ldw	r4,-4(fp)
   12ca4:	00149f40 	call	149f4 <alt_busy_sleep>
}
   12ca8:	e037883a 	mov	sp,fp
   12cac:	dfc00117 	ldw	ra,4(sp)
   12cb0:	df000017 	ldw	fp,0(sp)
   12cb4:	dec00204 	addi	sp,sp,8
   12cb8:	f800283a 	ret

00012cbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12cbc:	defffe04 	addi	sp,sp,-8
   12cc0:	dfc00115 	stw	ra,4(sp)
   12cc4:	df000015 	stw	fp,0(sp)
   12cc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ccc:	d0a01117 	ldw	r2,-32700(gp)
   12cd0:	10000326 	beq	r2,zero,12ce0 <alt_get_errno+0x24>
   12cd4:	d0a01117 	ldw	r2,-32700(gp)
   12cd8:	103ee83a 	callr	r2
   12cdc:	00000106 	br	12ce4 <alt_get_errno+0x28>
   12ce0:	d0a73d04 	addi	r2,gp,-25356
}
   12ce4:	e037883a 	mov	sp,fp
   12ce8:	dfc00117 	ldw	ra,4(sp)
   12cec:	df000017 	ldw	fp,0(sp)
   12cf0:	dec00204 	addi	sp,sp,8
   12cf4:	f800283a 	ret

00012cf8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12cf8:	defff904 	addi	sp,sp,-28
   12cfc:	dfc00615 	stw	ra,24(sp)
   12d00:	df000515 	stw	fp,20(sp)
   12d04:	df000504 	addi	fp,sp,20
   12d08:	e13ffd15 	stw	r4,-12(fp)
   12d0c:	e17ffe15 	stw	r5,-8(fp)
   12d10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12d14:	e0bffd17 	ldw	r2,-12(fp)
   12d18:	10000816 	blt	r2,zero,12d3c <write+0x44>
   12d1c:	01400304 	movi	r5,12
   12d20:	e13ffd17 	ldw	r4,-12(fp)
   12d24:	00053c80 	call	53c8 <__mulsi3>
   12d28:	1007883a 	mov	r3,r2
   12d2c:	00800074 	movhi	r2,1
   12d30:	109c9204 	addi	r2,r2,29256
   12d34:	1885883a 	add	r2,r3,r2
   12d38:	00000106 	br	12d40 <write+0x48>
   12d3c:	0005883a 	mov	r2,zero
   12d40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12d44:	e0bffb17 	ldw	r2,-20(fp)
   12d48:	10002126 	beq	r2,zero,12dd0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12d4c:	e0bffb17 	ldw	r2,-20(fp)
   12d50:	10800217 	ldw	r2,8(r2)
   12d54:	108000cc 	andi	r2,r2,3
   12d58:	10001826 	beq	r2,zero,12dbc <write+0xc4>
   12d5c:	e0bffb17 	ldw	r2,-20(fp)
   12d60:	10800017 	ldw	r2,0(r2)
   12d64:	10800617 	ldw	r2,24(r2)
   12d68:	10001426 	beq	r2,zero,12dbc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12d6c:	e0bffb17 	ldw	r2,-20(fp)
   12d70:	10800017 	ldw	r2,0(r2)
   12d74:	10800617 	ldw	r2,24(r2)
   12d78:	e0ffff17 	ldw	r3,-4(fp)
   12d7c:	180d883a 	mov	r6,r3
   12d80:	e17ffe17 	ldw	r5,-8(fp)
   12d84:	e13ffb17 	ldw	r4,-20(fp)
   12d88:	103ee83a 	callr	r2
   12d8c:	e0bffc15 	stw	r2,-16(fp)
   12d90:	e0bffc17 	ldw	r2,-16(fp)
   12d94:	1000070e 	bge	r2,zero,12db4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   12d98:	0012cbc0 	call	12cbc <alt_get_errno>
   12d9c:	1007883a 	mov	r3,r2
   12da0:	e0bffc17 	ldw	r2,-16(fp)
   12da4:	0085c83a 	sub	r2,zero,r2
   12da8:	18800015 	stw	r2,0(r3)
        return -1;
   12dac:	00bfffc4 	movi	r2,-1
   12db0:	00000c06 	br	12de4 <write+0xec>
      }
      return rval;
   12db4:	e0bffc17 	ldw	r2,-16(fp)
   12db8:	00000a06 	br	12de4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12dbc:	0012cbc0 	call	12cbc <alt_get_errno>
   12dc0:	1007883a 	mov	r3,r2
   12dc4:	00800344 	movi	r2,13
   12dc8:	18800015 	stw	r2,0(r3)
   12dcc:	00000406 	br	12de0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12dd0:	0012cbc0 	call	12cbc <alt_get_errno>
   12dd4:	1007883a 	mov	r3,r2
   12dd8:	00801444 	movi	r2,81
   12ddc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12de0:	00bfffc4 	movi	r2,-1
}
   12de4:	e037883a 	mov	sp,fp
   12de8:	dfc00117 	ldw	ra,4(sp)
   12dec:	df000017 	ldw	fp,0(sp)
   12df0:	dec00204 	addi	sp,sp,8
   12df4:	f800283a 	ret

00012df8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12df8:	defffd04 	addi	sp,sp,-12
   12dfc:	dfc00215 	stw	ra,8(sp)
   12e00:	df000115 	stw	fp,4(sp)
   12e04:	df000104 	addi	fp,sp,4
   12e08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12e0c:	d1600a04 	addi	r5,gp,-32728
   12e10:	e13fff17 	ldw	r4,-4(fp)
   12e14:	0014ba80 	call	14ba8 <alt_dev_llist_insert>
}
   12e18:	e037883a 	mov	sp,fp
   12e1c:	dfc00117 	ldw	ra,4(sp)
   12e20:	df000017 	ldw	fp,0(sp)
   12e24:	dec00204 	addi	sp,sp,8
   12e28:	f800283a 	ret

00012e2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12e2c:	defffd04 	addi	sp,sp,-12
   12e30:	dfc00215 	stw	ra,8(sp)
   12e34:	df000115 	stw	fp,4(sp)
   12e38:	df000104 	addi	fp,sp,4
   12e3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   12e40:	00155540 	call	15554 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12e44:	00800044 	movi	r2,1
   12e48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12e4c:	0001883a 	nop
   12e50:	e037883a 	mov	sp,fp
   12e54:	dfc00117 	ldw	ra,4(sp)
   12e58:	df000017 	ldw	fp,0(sp)
   12e5c:	dec00204 	addi	sp,sp,8
   12e60:	f800283a 	ret

00012e64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12e64:	defffc04 	addi	sp,sp,-16
   12e68:	dfc00315 	stw	ra,12(sp)
   12e6c:	df000215 	stw	fp,8(sp)
   12e70:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12e74:	01c0fa04 	movi	r7,1000
   12e78:	01800044 	movi	r6,1
   12e7c:	000b883a 	mov	r5,zero
   12e80:	01020034 	movhi	r4,2048
   12e84:	210c0804 	addi	r4,r4,12320
   12e88:	001484c0 	call	1484c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( COPY_DMA, copy_dma);
   12e8c:	00800084 	movi	r2,2
   12e90:	d8800015 	stw	r2,0(sp)
   12e94:	000f883a 	mov	r7,zero
   12e98:	01820034 	movhi	r6,2048
   12e9c:	318c0004 	addi	r6,r6,12288
   12ea0:	01400074 	movhi	r5,1
   12ea4:	295d2204 	addi	r5,r5,29832
   12ea8:	01000074 	movhi	r4,1
   12eac:	211d1b04 	addi	r4,r4,29804
   12eb0:	0013cb80 	call	13cb8 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   12eb4:	000d883a 	mov	r6,zero
   12eb8:	000b883a 	mov	r5,zero
   12ebc:	01000074 	movhi	r4,1
   12ec0:	211d3304 	addi	r4,r4,29900
   12ec4:	0013ed00 	call	13ed0 <altera_avalon_jtag_uart_init>
   12ec8:	01000074 	movhi	r4,1
   12ecc:	211d2904 	addi	r4,r4,29860
   12ed0:	0012df80 	call	12df8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   12ed4:	008000b4 	movhi	r2,2
   12ed8:	10a14104 	addi	r2,r2,-31484
   12edc:	10800a17 	ldw	r2,40(r2)
   12ee0:	10800017 	ldw	r2,0(r2)
   12ee4:	1007883a 	mov	r3,r2
   12ee8:	008000b4 	movhi	r2,2
   12eec:	10a14104 	addi	r2,r2,-31484
   12ef0:	10c00b15 	stw	r3,44(r2)
   12ef4:	008000b4 	movhi	r2,2
   12ef8:	10a14104 	addi	r2,r2,-31484
   12efc:	10800a17 	ldw	r2,40(r2)
   12f00:	10800104 	addi	r2,r2,4
   12f04:	10800017 	ldw	r2,0(r2)
   12f08:	1007883a 	mov	r3,r2
   12f0c:	008000b4 	movhi	r2,2
   12f10:	10a14104 	addi	r2,r2,-31484
   12f14:	10c00c15 	stw	r3,48(r2)
   12f18:	008000b4 	movhi	r2,2
   12f1c:	10a14104 	addi	r2,r2,-31484
   12f20:	10800a17 	ldw	r2,40(r2)
   12f24:	10800204 	addi	r2,r2,8
   12f28:	10800017 	ldw	r2,0(r2)
   12f2c:	10ffffcc 	andi	r3,r2,65535
   12f30:	008000b4 	movhi	r2,2
   12f34:	10a14104 	addi	r2,r2,-31484
   12f38:	10c00f15 	stw	r3,60(r2)
   12f3c:	008000b4 	movhi	r2,2
   12f40:	10a14104 	addi	r2,r2,-31484
   12f44:	10800a17 	ldw	r2,40(r2)
   12f48:	10800204 	addi	r2,r2,8
   12f4c:	10800017 	ldw	r2,0(r2)
   12f50:	1006d43a 	srli	r3,r2,16
   12f54:	008000b4 	movhi	r2,2
   12f58:	10a14104 	addi	r2,r2,-31484
   12f5c:	10c01015 	stw	r3,64(r2)
   12f60:	008000b4 	movhi	r2,2
   12f64:	10a14104 	addi	r2,r2,-31484
   12f68:	10800a17 	ldw	r2,40(r2)
   12f6c:	10800304 	addi	r2,r2,12
   12f70:	10800017 	ldw	r2,0(r2)
   12f74:	1005d07a 	srai	r2,r2,1
   12f78:	10c0004c 	andi	r3,r2,1
   12f7c:	008000b4 	movhi	r2,2
   12f80:	10a14104 	addi	r2,r2,-31484
   12f84:	10c00d15 	stw	r3,52(r2)
   12f88:	008000b4 	movhi	r2,2
   12f8c:	10a14104 	addi	r2,r2,-31484
   12f90:	10800a17 	ldw	r2,40(r2)
   12f94:	10800304 	addi	r2,r2,12
   12f98:	10800017 	ldw	r2,0(r2)
   12f9c:	1005d13a 	srai	r2,r2,4
   12fa0:	10c003cc 	andi	r3,r2,15
   12fa4:	008000b4 	movhi	r2,2
   12fa8:	10a14104 	addi	r2,r2,-31484
   12fac:	10c00e15 	stw	r3,56(r2)
   12fb0:	008000b4 	movhi	r2,2
   12fb4:	10a14104 	addi	r2,r2,-31484
   12fb8:	10800a17 	ldw	r2,40(r2)
   12fbc:	10800304 	addi	r2,r2,12
   12fc0:	10800017 	ldw	r2,0(r2)
   12fc4:	1005d43a 	srai	r2,r2,16
   12fc8:	e0bfff05 	stb	r2,-4(fp)
   12fcc:	008000b4 	movhi	r2,2
   12fd0:	10a14104 	addi	r2,r2,-31484
   12fd4:	10800a17 	ldw	r2,40(r2)
   12fd8:	10800304 	addi	r2,r2,12
   12fdc:	10800017 	ldw	r2,0(r2)
   12fe0:	1004d63a 	srli	r2,r2,24
   12fe4:	e0bfff45 	stb	r2,-3(fp)
   12fe8:	008000b4 	movhi	r2,2
   12fec:	10a14104 	addi	r2,r2,-31484
   12ff0:	10800e17 	ldw	r2,56(r2)
   12ff4:	10800058 	cmpnei	r2,r2,1
   12ff8:	1000041e 	bne	r2,zero,1300c <alt_sys_init+0x1a8>
   12ffc:	008000b4 	movhi	r2,2
   13000:	10a14104 	addi	r2,r2,-31484
   13004:	10001115 	stw	zero,68(r2)
   13008:	00000e06 	br	13044 <alt_sys_init+0x1e0>
   1300c:	008000b4 	movhi	r2,2
   13010:	10a14104 	addi	r2,r2,-31484
   13014:	10800e17 	ldw	r2,56(r2)
   13018:	10800098 	cmpnei	r2,r2,2
   1301c:	1000051e 	bne	r2,zero,13034 <alt_sys_init+0x1d0>
   13020:	008000b4 	movhi	r2,2
   13024:	10a14104 	addi	r2,r2,-31484
   13028:	00c00044 	movi	r3,1
   1302c:	10c01115 	stw	r3,68(r2)
   13030:	00000406 	br	13044 <alt_sys_init+0x1e0>
   13034:	008000b4 	movhi	r2,2
   13038:	10a14104 	addi	r2,r2,-31484
   1303c:	00c00084 	movi	r3,2
   13040:	10c01115 	stw	r3,68(r2)
   13044:	e0bfff03 	ldbu	r2,-4(fp)
   13048:	00c00804 	movi	r3,32
   1304c:	1885c83a 	sub	r2,r3,r2
   13050:	00ffffc4 	movi	r3,-1
   13054:	1886d83a 	srl	r3,r3,r2
   13058:	008000b4 	movhi	r2,2
   1305c:	10a14104 	addi	r2,r2,-31484
   13060:	10c01215 	stw	r3,72(r2)
   13064:	e0ffff03 	ldbu	r3,-4(fp)
   13068:	008000b4 	movhi	r2,2
   1306c:	10a14104 	addi	r2,r2,-31484
   13070:	10801117 	ldw	r2,68(r2)
   13074:	1887883a 	add	r3,r3,r2
   13078:	008000b4 	movhi	r2,2
   1307c:	10a14104 	addi	r2,r2,-31484
   13080:	10c01315 	stw	r3,76(r2)
   13084:	e0bfff43 	ldbu	r2,-3(fp)
   13088:	00c00804 	movi	r3,32
   1308c:	1885c83a 	sub	r2,r3,r2
   13090:	00ffffc4 	movi	r3,-1
   13094:	1886d83a 	srl	r3,r3,r2
   13098:	008000b4 	movhi	r2,2
   1309c:	10a14104 	addi	r2,r2,-31484
   130a0:	10c01415 	stw	r3,80(r2)
   130a4:	010000b4 	movhi	r4,2
   130a8:	21214104 	addi	r4,r4,-31484
   130ac:	0012df80 	call	12df8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_RESAMPLER, vga_resampler);
   130b0:	008000b4 	movhi	r2,2
   130b4:	10a15604 	addi	r2,r2,-31400
   130b8:	10800a17 	ldw	r2,40(r2)
   130bc:	10800017 	ldw	r2,0(r2)
   130c0:	10c003cc 	andi	r3,r2,15
   130c4:	008000b4 	movhi	r2,2
   130c8:	10a15604 	addi	r2,r2,-31400
   130cc:	10c00b15 	stw	r3,44(r2)
   130d0:	008000b4 	movhi	r2,2
   130d4:	10a15604 	addi	r2,r2,-31400
   130d8:	10800a17 	ldw	r2,40(r2)
   130dc:	10800017 	ldw	r2,0(r2)
   130e0:	1005d13a 	srai	r2,r2,4
   130e4:	10c0004c 	andi	r3,r2,1
   130e8:	008000b4 	movhi	r2,2
   130ec:	10a15604 	addi	r2,r2,-31400
   130f0:	10c00c15 	stw	r3,48(r2)
   130f4:	008000b4 	movhi	r2,2
   130f8:	10a15604 	addi	r2,r2,-31400
   130fc:	10800a17 	ldw	r2,40(r2)
   13100:	10800017 	ldw	r2,0(r2)
   13104:	1005d17a 	srai	r2,r2,5
   13108:	10c0004c 	andi	r3,r2,1
   1310c:	008000b4 	movhi	r2,2
   13110:	10a15604 	addi	r2,r2,-31400
   13114:	10c00d15 	stw	r3,52(r2)
   13118:	008000b4 	movhi	r2,2
   1311c:	10a15604 	addi	r2,r2,-31400
   13120:	10800a17 	ldw	r2,40(r2)
   13124:	10800017 	ldw	r2,0(r2)
   13128:	1005d43a 	srai	r2,r2,16
   1312c:	10c003cc 	andi	r3,r2,15
   13130:	008000b4 	movhi	r2,2
   13134:	10a15604 	addi	r2,r2,-31400
   13138:	10c00e15 	stw	r3,56(r2)
   1313c:	008000b4 	movhi	r2,2
   13140:	10a15604 	addi	r2,r2,-31400
   13144:	10800a17 	ldw	r2,40(r2)
   13148:	10800017 	ldw	r2,0(r2)
   1314c:	1005d53a 	srai	r2,r2,20
   13150:	10c0004c 	andi	r3,r2,1
   13154:	008000b4 	movhi	r2,2
   13158:	10a15604 	addi	r2,r2,-31400
   1315c:	10c00f15 	stw	r3,60(r2)
   13160:	008000b4 	movhi	r2,2
   13164:	10a15604 	addi	r2,r2,-31400
   13168:	10800a17 	ldw	r2,40(r2)
   1316c:	10800017 	ldw	r2,0(r2)
   13170:	1005d57a 	srai	r2,r2,21
   13174:	10c0004c 	andi	r3,r2,1
   13178:	008000b4 	movhi	r2,2
   1317c:	10a15604 	addi	r2,r2,-31400
   13180:	10c01015 	stw	r3,64(r2)
   13184:	010000b4 	movhi	r4,2
   13188:	21215604 	addi	r4,r4,-31400
   1318c:	0012df80 	call	12df8 <alt_dev_reg>
}
   13190:	0001883a 	nop
   13194:	e037883a 	mov	sp,fp
   13198:	dfc00117 	ldw	ra,4(sp)
   1319c:	df000017 	ldw	fp,0(sp)
   131a0:	dec00204 	addi	sp,sp,8
   131a4:	f800283a 	ret

000131a8 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
   131a8:	defffd04 	addi	sp,sp,-12
   131ac:	dfc00215 	stw	ra,8(sp)
   131b0:	df000115 	stw	fp,4(sp)
   131b4:	df000104 	addi	fp,sp,4
   131b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
   131bc:	d1600f04 	addi	r5,gp,-32708
   131c0:	e13fff17 	ldw	r4,-4(fp)
   131c4:	0014ba80 	call	14ba8 <alt_dev_llist_insert>
}
   131c8:	e037883a 	mov	sp,fp
   131cc:	dfc00117 	ldw	ra,4(sp)
   131d0:	df000017 	ldw	fp,0(sp)
   131d4:	dec00204 	addi	sp,sp,8
   131d8:	f800283a 	ret

000131dc <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
   131dc:	defffd04 	addi	sp,sp,-12
   131e0:	dfc00215 	stw	ra,8(sp)
   131e4:	df000115 	stw	fp,4(sp)
   131e8:	df000104 	addi	fp,sp,4
   131ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
   131f0:	d1600d04 	addi	r5,gp,-32716
   131f4:	e13fff17 	ldw	r4,-4(fp)
   131f8:	0014ba80 	call	14ba8 <alt_dev_llist_insert>
}
   131fc:	e037883a 	mov	sp,fp
   13200:	dfc00117 	ldw	ra,4(sp)
   13204:	df000017 	ldw	fp,0(sp)
   13208:	dec00204 	addi	sp,sp,8
   1320c:	f800283a 	ret

00013210 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
   13210:	defffc04 	addi	sp,sp,-16
   13214:	df000315 	stw	fp,12(sp)
   13218:	df000304 	addi	fp,sp,12
   1321c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   13220:	e0bfff17 	ldw	r2,-4(fp)
   13224:	10c00117 	ldw	r3,4(r2)
   13228:	e0bfff17 	ldw	r2,-4(fp)
   1322c:	10800217 	ldw	r2,8(r2)
   13230:	18802e26 	beq	r3,r2,132ec <alt_avalon_dma_launch_bidir+0xdc>
   13234:	e0bfff17 	ldw	r2,-4(fp)
   13238:	10c00317 	ldw	r3,12(r2)
   1323c:	e0bfff17 	ldw	r2,-4(fp)
   13240:	10800417 	ldw	r2,16(r2)
   13244:	18802926 	beq	r3,r2,132ec <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
   13248:	e0bfff17 	ldw	r2,-4(fp)
   1324c:	00c00044 	movi	r3,1
   13250:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
   13254:	e0bfff17 	ldw	r2,-4(fp)
   13258:	10800117 	ldw	r2,4(r2)
   1325c:	1004913a 	slli	r2,r2,4
   13260:	10800904 	addi	r2,r2,36
   13264:	e0ffff17 	ldw	r3,-4(fp)
   13268:	1885883a 	add	r2,r3,r2
   1326c:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
   13270:	e0bfff17 	ldw	r2,-4(fp)
   13274:	10800317 	ldw	r2,12(r2)
   13278:	1004913a 	slli	r2,r2,4
   1327c:	10801904 	addi	r2,r2,100
   13280:	e0ffff17 	ldw	r3,-4(fp)
   13284:	1885883a 	add	r2,r3,r2
   13288:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   1328c:	e0bfff17 	ldw	r2,-4(fp)
   13290:	10800017 	ldw	r2,0(r2)
   13294:	10800104 	addi	r2,r2,4
   13298:	e0fffd17 	ldw	r3,-12(fp)
   1329c:	18c00017 	ldw	r3,0(r3)
   132a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	10800017 	ldw	r2,0(r2)
   132ac:	10800204 	addi	r2,r2,8
   132b0:	e0fffe17 	ldw	r3,-8(fp)
   132b4:	18c00017 	ldw	r3,0(r3)
   132b8:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
   132bc:	e0bfff17 	ldw	r2,-4(fp)
   132c0:	10800017 	ldw	r2,0(r2)
   132c4:	11000304 	addi	r4,r2,12
   132c8:	e0bffd17 	ldw	r2,-12(fp)
   132cc:	11400117 	ldw	r5,4(r2)
   132d0:	e0bffe17 	ldw	r2,-8(fp)
   132d4:	10c00117 	ldw	r3,4(r2)
   132d8:	2805883a 	mov	r2,r5
   132dc:	1880012e 	bgeu	r3,r2,132e4 <alt_avalon_dma_launch_bidir+0xd4>
   132e0:	1805883a 	mov	r2,r3
   132e4:	20800035 	stwio	r2,0(r4)
   132e8:	00000206 	br	132f4 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
   132ec:	e0bfff17 	ldw	r2,-4(fp)
   132f0:	10000815 	stw	zero,32(r2)
  }
}
   132f4:	0001883a 	nop
   132f8:	e037883a 	mov	sp,fp
   132fc:	df000017 	ldw	fp,0(sp)
   13300:	dec00104 	addi	sp,sp,4
   13304:	f800283a 	ret

00013308 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
   13308:	defffd04 	addi	sp,sp,-12
   1330c:	df000215 	stw	fp,8(sp)
   13310:	df000204 	addi	fp,sp,8
   13314:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   13318:	e0bfff17 	ldw	r2,-4(fp)
   1331c:	10c00117 	ldw	r3,4(r2)
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	10800217 	ldw	r2,8(r2)
   13328:	18801726 	beq	r3,r2,13388 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	00c00044 	movi	r3,1
   13334:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	10800117 	ldw	r2,4(r2)
   13340:	1004913a 	slli	r2,r2,4
   13344:	10800904 	addi	r2,r2,36
   13348:	e0ffff17 	ldw	r3,-4(fp)
   1334c:	1885883a 	add	r2,r3,r2
   13350:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   13354:	e0bfff17 	ldw	r2,-4(fp)
   13358:	10800017 	ldw	r2,0(r2)
   1335c:	10800104 	addi	r2,r2,4
   13360:	e0fffe17 	ldw	r3,-8(fp)
   13364:	18c00017 	ldw	r3,0(r3)
   13368:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
   1336c:	e0bfff17 	ldw	r2,-4(fp)
   13370:	10800017 	ldw	r2,0(r2)
   13374:	10800304 	addi	r2,r2,12
   13378:	e0fffe17 	ldw	r3,-8(fp)
   1337c:	18c00117 	ldw	r3,4(r3)
   13380:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   13384:	00000206 	br	13390 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
   13388:	e0bfff17 	ldw	r2,-4(fp)
   1338c:	10000815 	stw	zero,32(r2)
  }
}
   13390:	0001883a 	nop
   13394:	e037883a 	mov	sp,fp
   13398:	df000017 	ldw	fp,0(sp)
   1339c:	dec00104 	addi	sp,sp,4
   133a0:	f800283a 	ret

000133a4 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
   133a4:	defffd04 	addi	sp,sp,-12
   133a8:	df000215 	stw	fp,8(sp)
   133ac:	df000204 	addi	fp,sp,8
   133b0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   133b4:	e0bfff17 	ldw	r2,-4(fp)
   133b8:	10c00317 	ldw	r3,12(r2)
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	10800417 	ldw	r2,16(r2)
   133c4:	18801726 	beq	r3,r2,13424 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
   133c8:	e0bfff17 	ldw	r2,-4(fp)
   133cc:	00c00044 	movi	r3,1
   133d0:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
   133d4:	e0bfff17 	ldw	r2,-4(fp)
   133d8:	10800317 	ldw	r2,12(r2)
   133dc:	1004913a 	slli	r2,r2,4
   133e0:	10801904 	addi	r2,r2,100
   133e4:	e0ffff17 	ldw	r3,-4(fp)
   133e8:	1885883a 	add	r2,r3,r2
   133ec:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   133f0:	e0bfff17 	ldw	r2,-4(fp)
   133f4:	10800017 	ldw	r2,0(r2)
   133f8:	10800204 	addi	r2,r2,8
   133fc:	e0fffe17 	ldw	r3,-8(fp)
   13400:	18c00017 	ldw	r3,0(r3)
   13404:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	10800017 	ldw	r2,0(r2)
   13410:	10800304 	addi	r2,r2,12
   13414:	e0fffe17 	ldw	r3,-8(fp)
   13418:	18c00117 	ldw	r3,4(r3)
   1341c:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   13420:	00000206 	br	1342c <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
   13424:	e0bfff17 	ldw	r2,-4(fp)
   13428:	10000815 	stw	zero,32(r2)
  }
}
   1342c:	0001883a 	nop
   13430:	e037883a 	mov	sp,fp
   13434:	df000017 	ldw	fp,0(sp)
   13438:	dec00104 	addi	sp,sp,4
   1343c:	f800283a 	ret

00013440 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
   13440:	defffa04 	addi	sp,sp,-24
   13444:	df000515 	stw	fp,20(sp)
   13448:	df000504 	addi	fp,sp,20
   1344c:	e13ffd15 	stw	r4,-12(fp)
   13450:	e17ffe15 	stw	r5,-8(fp)
   13454:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
   13458:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	10c00117 	ldw	r3,4(r2)
   13464:	e0bffd17 	ldw	r2,-12(fp)
   13468:	10800217 	ldw	r2,8(r2)
   1346c:	18800a1e 	bne	r3,r2,13498 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
   13470:	e0bffd17 	ldw	r2,-12(fp)
   13474:	10c00317 	ldw	r3,12(r2)
   13478:	e0bffd17 	ldw	r2,-12(fp)
   1347c:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   13480:	1880051e 	bne	r3,r2,13498 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
   13484:	e0bffd17 	ldw	r2,-12(fp)
   13488:	10800017 	ldw	r2,0(r2)
   1348c:	10800304 	addi	r2,r2,12
   13490:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
   13494:	10000226 	beq	r2,zero,134a0 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
   13498:	00bffec4 	movi	r2,-5
   1349c:	0000b506 	br	13774 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
   134a0:	e0bffe17 	ldw	r2,-8(fp)
   134a4:	108002a8 	cmpgeui	r2,r2,10
   134a8:	1000781e 	bne	r2,zero,1368c <alt_avalon_dma_ioctl+0x24c>
   134ac:	e0bffe17 	ldw	r2,-8(fp)
   134b0:	100690ba 	slli	r3,r2,2
   134b4:	00800074 	movhi	r2,1
   134b8:	108d3204 	addi	r2,r2,13512
   134bc:	1885883a 	add	r2,r3,r2
   134c0:	10800017 	ldw	r2,0(r2)
   134c4:	1000683a 	jmp	r2
   134c8:	0001368c 	andi	zero,zero,1242
   134cc:	000134f0 	cmpltui	zero,zero,1235
   134d0:	00013548 	cmpgei	zero,zero,1237
   134d4:	00013574 	movhi	zero,1237
   134d8:	000135cc 	andi	zero,zero,1239
   134dc:	000135f8 	rdprs	zero,zero,1239
   134e0:	00013614 	movui	zero,1240
   134e4:	00013634 	movhi	zero,1240
   134e8:	00013654 	movui	zero,1241
   134ec:	00013674 	movhi	zero,1241
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
   134f0:	e0bffd17 	ldw	r2,-12(fp)
   134f4:	10800517 	ldw	r2,20(r2)
   134f8:	1080100c 	andi	r2,r2,64
   134fc:	10000f1e 	bne	r2,zero,1353c <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
   13500:	e0bffd17 	ldw	r2,-12(fp)
   13504:	10800017 	ldw	r2,0(r2)
   13508:	10800104 	addi	r2,r2,4
   1350c:	e0ffff17 	ldw	r3,-4(fp)
   13510:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   13514:	e0bffd17 	ldw	r2,-12(fp)
   13518:	10800517 	ldw	r2,20(r2)
   1351c:	10c00814 	ori	r3,r2,32
   13520:	e0bffd17 	ldw	r2,-12(fp)
   13524:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
   13528:	e0fffd17 	ldw	r3,-12(fp)
   1352c:	00800074 	movhi	r2,1
   13530:	108ce904 	addi	r2,r2,13220
   13534:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   13538:	00005606 	br	13694 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
   1353c:	00bffec4 	movi	r2,-5
   13540:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   13544:	00005306 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
   13548:	e0bffd17 	ldw	r2,-12(fp)
   1354c:	10c00517 	ldw	r3,20(r2)
   13550:	00bff7c4 	movi	r2,-33
   13554:	1886703a 	and	r3,r3,r2
   13558:	e0bffd17 	ldw	r2,-12(fp)
   1355c:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   13560:	e0fffd17 	ldw	r3,-12(fp)
   13564:	00800074 	movhi	r2,1
   13568:	108c8404 	addi	r2,r2,12816
   1356c:	18800715 	stw	r2,28(r3)
    break;
   13570:	00004806 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
   13574:	e0bffd17 	ldw	r2,-12(fp)
   13578:	10800517 	ldw	r2,20(r2)
   1357c:	1080080c 	andi	r2,r2,32
   13580:	10000f1e 	bne	r2,zero,135c0 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
   13584:	e0bffd17 	ldw	r2,-12(fp)
   13588:	10800017 	ldw	r2,0(r2)
   1358c:	10800204 	addi	r2,r2,8
   13590:	e0ffff17 	ldw	r3,-4(fp)
   13594:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   13598:	e0bffd17 	ldw	r2,-12(fp)
   1359c:	10800517 	ldw	r2,20(r2)
   135a0:	10c01014 	ori	r3,r2,64
   135a4:	e0bffd17 	ldw	r2,-12(fp)
   135a8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
   135ac:	e0fffd17 	ldw	r3,-12(fp)
   135b0:	00800074 	movhi	r2,1
   135b4:	108cc204 	addi	r2,r2,13064
   135b8:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   135bc:	00003506 	br	13694 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
   135c0:	00bffec4 	movi	r2,-5
   135c4:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   135c8:	00003206 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
   135cc:	e0bffd17 	ldw	r2,-12(fp)
   135d0:	10c00517 	ldw	r3,20(r2)
   135d4:	00bfefc4 	movi	r2,-65
   135d8:	1886703a 	and	r3,r3,r2
   135dc:	e0bffd17 	ldw	r2,-12(fp)
   135e0:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   135e4:	e0fffd17 	ldw	r3,-12(fp)
   135e8:	00800074 	movhi	r2,1
   135ec:	108c8404 	addi	r2,r2,12816
   135f0:	18800715 	stw	r2,28(r3)
    break;
   135f4:	00002706 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	10c00517 	ldw	r3,20(r2)
   13600:	00bffc04 	movi	r2,-16
   13604:	1886703a 	and	r3,r3,r2
   13608:	e0bffd17 	ldw	r2,-12(fp)
   1360c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
   13610:	00002006 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   13614:	e0bffd17 	ldw	r2,-12(fp)
   13618:	10c00517 	ldw	r3,20(r2)
   1361c:	00bffc04 	movi	r2,-16
   13620:	1884703a 	and	r2,r3,r2
   13624:	10c00054 	ori	r3,r2,1
   13628:	e0bffd17 	ldw	r2,-12(fp)
   1362c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
   13630:	00001806 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   13634:	e0bffd17 	ldw	r2,-12(fp)
   13638:	10c00517 	ldw	r3,20(r2)
   1363c:	00bffc04 	movi	r2,-16
   13640:	1884703a 	and	r2,r3,r2
   13644:	10c000d4 	ori	r3,r2,3
   13648:	e0bffd17 	ldw	r2,-12(fp)
   1364c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
   13650:	00001006 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   13654:	e0bffd17 	ldw	r2,-12(fp)
   13658:	10c00517 	ldw	r3,20(r2)
   1365c:	00bffc04 	movi	r2,-16
   13660:	1884703a 	and	r2,r3,r2
   13664:	10c001d4 	ori	r3,r2,7
   13668:	e0bffd17 	ldw	r2,-12(fp)
   1366c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
   13670:	00000806 	br	13694 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   13674:	e0bffd17 	ldw	r2,-12(fp)
   13678:	10800517 	ldw	r2,20(r2)
   1367c:	10c003d4 	ori	r3,r2,15
   13680:	e0bffd17 	ldw	r2,-12(fp)
   13684:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
   13688:	00000206 	br	13694 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
   1368c:	00bff9c4 	movi	r2,-25
   13690:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
   13694:	e0bffb17 	ldw	r2,-20(fp)
   13698:	1000351e 	bne	r2,zero,13770 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800517 	ldw	r2,20(r2)
   136a4:	108003cc 	andi	r2,r2,15
   136a8:	10c00060 	cmpeqi	r3,r2,1
   136ac:	1800091e 	bne	r3,zero,136d4 <alt_avalon_dma_ioctl+0x294>
   136b0:	0080052e 	bgeu	zero,r2,136c8 <alt_avalon_dma_ioctl+0x288>
   136b4:	10c000e0 	cmpeqi	r3,r2,3
   136b8:	1800091e 	bne	r3,zero,136e0 <alt_avalon_dma_ioctl+0x2a0>
   136bc:	108001e0 	cmpeqi	r2,r2,7
   136c0:	10000a1e 	bne	r2,zero,136ec <alt_avalon_dma_ioctl+0x2ac>
   136c4:	00000c06 	br	136f8 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
   136c8:	00800044 	movi	r2,1
   136cc:	e0bffc15 	stw	r2,-16(fp)
       break;
   136d0:	00000b06 	br	13700 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
   136d4:	00800084 	movi	r2,2
   136d8:	e0bffc15 	stw	r2,-16(fp)
       break;
   136dc:	00000806 	br	13700 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
   136e0:	00800104 	movi	r2,4
   136e4:	e0bffc15 	stw	r2,-16(fp)
       break;
   136e8:	00000506 	br	13700 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
   136ec:	00810004 	movi	r2,1024
   136f0:	e0bffc15 	stw	r2,-16(fp)
       break;
   136f4:	00000206 	br	13700 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
   136f8:	00820004 	movi	r2,2048
   136fc:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
   13700:	e0bffd17 	ldw	r2,-12(fp)
   13704:	10800517 	ldw	r2,20(r2)
   13708:	1080080c 	andi	r2,r2,32
   1370c:	10000726 	beq	r2,zero,1372c <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   13710:	e0bffd17 	ldw	r2,-12(fp)
   13714:	10800017 	ldw	r2,0(r2)
   13718:	10800604 	addi	r2,r2,24
   1371c:	e0fffc17 	ldw	r3,-16(fp)
   13720:	18c07e14 	ori	r3,r3,504
   13724:	10c00035 	stwio	r3,0(r2)
   13728:	00001106 	br	13770 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
   1372c:	e0bffd17 	ldw	r2,-12(fp)
   13730:	10800517 	ldw	r2,20(r2)
   13734:	1080100c 	andi	r2,r2,64
   13738:	10000726 	beq	r2,zero,13758 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   1373c:	e0bffd17 	ldw	r2,-12(fp)
   13740:	10800017 	ldw	r2,0(r2)
   13744:	10800604 	addi	r2,r2,24
   13748:	e0fffc17 	ldw	r3,-16(fp)
   1374c:	18c0be14 	ori	r3,r3,760
   13750:	10c00035 	stwio	r3,0(r2)
   13754:	00000606 	br	13770 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   13758:	e0bffd17 	ldw	r2,-12(fp)
   1375c:	10800017 	ldw	r2,0(r2)
   13760:	10800604 	addi	r2,r2,24
   13764:	e0fffc17 	ldw	r3,-16(fp)
   13768:	18c03e14 	ori	r3,r3,248
   1376c:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
   13770:	e0bffb17 	ldw	r2,-20(fp)
}
   13774:	e037883a 	mov	sp,fp
   13778:	df000017 	ldw	fp,0(sp)
   1377c:	dec00104 	addi	sp,sp,4
   13780:	f800283a 	ret

00013784 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
   13784:	defffb04 	addi	sp,sp,-20
   13788:	dfc00415 	stw	ra,16(sp)
   1378c:	df000315 	stw	fp,12(sp)
   13790:	df000304 	addi	fp,sp,12
   13794:	e13ffd15 	stw	r4,-12(fp)
   13798:	e17ffe15 	stw	r5,-8(fp)
   1379c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
   137a0:	e0bffd17 	ldw	r2,-12(fp)
   137a4:	10800617 	ldw	r2,24(r2)
   137a8:	e1bfff17 	ldw	r6,-4(fp)
   137ac:	e17ffe17 	ldw	r5,-8(fp)
   137b0:	1009883a 	mov	r4,r2
   137b4:	00134400 	call	13440 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   137b8:	e037883a 	mov	sp,fp
   137bc:	dfc00117 	ldw	ra,4(sp)
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00204 	addi	sp,sp,8
   137c8:	f800283a 	ret

000137cc <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
   137cc:	defffb04 	addi	sp,sp,-20
   137d0:	dfc00415 	stw	ra,16(sp)
   137d4:	df000315 	stw	fp,12(sp)
   137d8:	df000304 	addi	fp,sp,12
   137dc:	e13ffd15 	stw	r4,-12(fp)
   137e0:	e17ffe15 	stw	r5,-8(fp)
   137e4:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
   137e8:	e0bffd17 	ldw	r2,-12(fp)
   137ec:	10800617 	ldw	r2,24(r2)
   137f0:	e1bfff17 	ldw	r6,-4(fp)
   137f4:	e17ffe17 	ldw	r5,-8(fp)
   137f8:	1009883a 	mov	r4,r2
   137fc:	00134400 	call	13440 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   13800:	e037883a 	mov	sp,fp
   13804:	dfc00117 	ldw	ra,4(sp)
   13808:	df000017 	ldw	fp,0(sp)
   1380c:	dec00204 	addi	sp,sp,8
   13810:	f800283a 	ret

00013814 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
   13814:	defff404 	addi	sp,sp,-48
   13818:	dfc00b15 	stw	ra,44(sp)
   1381c:	df000a15 	stw	fp,40(sp)
   13820:	df000a04 	addi	fp,sp,40
   13824:	e13ffc15 	stw	r4,-16(fp)
   13828:	e17ffd15 	stw	r5,-12(fp)
   1382c:	e1bffe15 	stw	r6,-8(fp)
   13830:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
   13834:	e0bffc17 	ldw	r2,-16(fp)
   13838:	10800617 	ldw	r2,24(r2)
   1383c:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   13840:	e0bff617 	ldw	r2,-40(fp)
   13844:	10800517 	ldw	r2,20(r2)
   13848:	108003cc 	andi	r2,r2,15
   1384c:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   13850:	e0fffd17 	ldw	r3,-12(fp)
   13854:	e0bff717 	ldw	r2,-36(fp)
   13858:	1884703a 	and	r2,r3,r2
   1385c:	1000081e 	bne	r2,zero,13880 <alt_avalon_dma_prepare+0x6c>
   13860:	e0fffe17 	ldw	r3,-8(fp)
   13864:	e0bff717 	ldw	r2,-36(fp)
   13868:	1884703a 	and	r2,r3,r2
   1386c:	1000041e 	bne	r2,zero,13880 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
   13870:	e0bff617 	ldw	r2,-40(fp)
   13874:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   13878:	e0bffe17 	ldw	r2,-8(fp)
   1387c:	1880022e 	bgeu	r3,r2,13888 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
   13880:	00bffa84 	movi	r2,-22
   13884:	00002c06 	br	13938 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
   13888:	e0bff617 	ldw	r2,-40(fp)
   1388c:	10800317 	ldw	r2,12(r2)
   13890:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
   13894:	e0bff617 	ldw	r2,-40(fp)
   13898:	10800417 	ldw	r2,16(r2)
   1389c:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
   138a0:	e0bff917 	ldw	r2,-28(fp)
   138a4:	1004913a 	slli	r2,r2,4
   138a8:	10801904 	addi	r2,r2,100
   138ac:	e0fff617 	ldw	r3,-40(fp)
   138b0:	1885883a 	add	r2,r3,r2
   138b4:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   138b8:	e0bff917 	ldw	r2,-28(fp)
   138bc:	10800044 	addi	r2,r2,1
   138c0:	108000cc 	andi	r2,r2,3
   138c4:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   138c8:	e0fffb17 	ldw	r3,-20(fp)
   138cc:	e0bff817 	ldw	r2,-32(fp)
   138d0:	1880021e 	bne	r3,r2,138dc <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
   138d4:	00bff904 	movi	r2,-28
   138d8:	00001706 	br	13938 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
   138dc:	e0bffa17 	ldw	r2,-24(fp)
   138e0:	e0fffd17 	ldw	r3,-12(fp)
   138e4:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   138e8:	e0bffa17 	ldw	r2,-24(fp)
   138ec:	e0fffe17 	ldw	r3,-8(fp)
   138f0:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   138f4:	e0bffa17 	ldw	r2,-24(fp)
   138f8:	e0ffff17 	ldw	r3,-4(fp)
   138fc:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   13900:	e0bffa17 	ldw	r2,-24(fp)
   13904:	e0c00217 	ldw	r3,8(fp)
   13908:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
   1390c:	e0bff617 	ldw	r2,-40(fp)
   13910:	e0fffb17 	ldw	r3,-20(fp)
   13914:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
   13918:	e0bff617 	ldw	r2,-40(fp)
   1391c:	10800817 	ldw	r2,32(r2)
   13920:	1000041e 	bne	r2,zero,13934 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
   13924:	e0bff617 	ldw	r2,-40(fp)
   13928:	10800717 	ldw	r2,28(r2)
   1392c:	e13ff617 	ldw	r4,-40(fp)
   13930:	103ee83a 	callr	r2
  }

  return 0;
   13934:	0005883a 	mov	r2,zero
}
   13938:	e037883a 	mov	sp,fp
   1393c:	dfc00117 	ldw	ra,4(sp)
   13940:	df000017 	ldw	fp,0(sp)
   13944:	dec00204 	addi	sp,sp,8
   13948:	f800283a 	ret

0001394c <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
   1394c:	defffb04 	addi	sp,sp,-20
   13950:	df000415 	stw	fp,16(sp)
   13954:	df000404 	addi	fp,sp,16
   13958:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   1395c:	e0bfff17 	ldw	r2,-4(fp)
   13960:	10800617 	ldw	r2,24(r2)
   13964:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
   13968:	e0bffc17 	ldw	r2,-16(fp)
   1396c:	10800117 	ldw	r2,4(r2)
   13970:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
   13974:	e0bffc17 	ldw	r2,-16(fp)
   13978:	10800217 	ldw	r2,8(r2)
   1397c:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
   13980:	e0bffd17 	ldw	r2,-12(fp)
   13984:	e0fffe17 	ldw	r3,-8(fp)
   13988:	1880052e 	bgeu	r3,r2,139a0 <alt_avalon_dma_space+0x54>
   1398c:	e0fffd17 	ldw	r3,-12(fp)
   13990:	e0bffe17 	ldw	r2,-8(fp)
   13994:	1885c83a 	sub	r2,r3,r2
   13998:	10bfffc4 	addi	r2,r2,-1
   1399c:	00000406 	br	139b0 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
   139a0:	e0fffd17 	ldw	r3,-12(fp)
   139a4:	e0bffe17 	ldw	r2,-8(fp)
   139a8:	1885c83a 	sub	r2,r3,r2
   139ac:	108000c4 	addi	r2,r2,3
}
   139b0:	e037883a 	mov	sp,fp
   139b4:	df000017 	ldw	fp,0(sp)
   139b8:	dec00104 	addi	sp,sp,4
   139bc:	f800283a 	ret

000139c0 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
   139c0:	defff404 	addi	sp,sp,-48
   139c4:	dfc00b15 	stw	ra,44(sp)
   139c8:	df000a15 	stw	fp,40(sp)
   139cc:	df000a04 	addi	fp,sp,40
   139d0:	e13ffc15 	stw	r4,-16(fp)
   139d4:	e17ffd15 	stw	r5,-12(fp)
   139d8:	e1bffe15 	stw	r6,-8(fp)
   139dc:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   139e0:	e0bffc17 	ldw	r2,-16(fp)
   139e4:	10800617 	ldw	r2,24(r2)
   139e8:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   139ec:	e0bff617 	ldw	r2,-40(fp)
   139f0:	10800517 	ldw	r2,20(r2)
   139f4:	108003cc 	andi	r2,r2,15
   139f8:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
   139fc:	e0fffd17 	ldw	r3,-12(fp)
   13a00:	e0bff717 	ldw	r2,-36(fp)
   13a04:	1884703a 	and	r2,r3,r2
   13a08:	1000081e 	bne	r2,zero,13a2c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
   13a0c:	e0fffe17 	ldw	r3,-8(fp)
   13a10:	e0bff717 	ldw	r2,-36(fp)
   13a14:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
   13a18:	1000041e 	bne	r2,zero,13a2c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
   13a1c:	e0bff617 	ldw	r2,-40(fp)
   13a20:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
   13a24:	e0bffe17 	ldw	r2,-8(fp)
   13a28:	1880022e 	bgeu	r3,r2,13a34 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
   13a2c:	00bffa84 	movi	r2,-22
   13a30:	00002c06 	br	13ae4 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
   13a34:	e0bff617 	ldw	r2,-40(fp)
   13a38:	10800117 	ldw	r2,4(r2)
   13a3c:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
   13a40:	e0bff617 	ldw	r2,-40(fp)
   13a44:	10800217 	ldw	r2,8(r2)
   13a48:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
   13a4c:	e0bff917 	ldw	r2,-28(fp)
   13a50:	1004913a 	slli	r2,r2,4
   13a54:	10800904 	addi	r2,r2,36
   13a58:	e0fff617 	ldw	r3,-40(fp)
   13a5c:	1885883a 	add	r2,r3,r2
   13a60:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   13a64:	e0bff917 	ldw	r2,-28(fp)
   13a68:	10800044 	addi	r2,r2,1
   13a6c:	108000cc 	andi	r2,r2,3
   13a70:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   13a74:	e0fffb17 	ldw	r3,-20(fp)
   13a78:	e0bff817 	ldw	r2,-32(fp)
   13a7c:	1880021e 	bne	r3,r2,13a88 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
   13a80:	00bff904 	movi	r2,-28
   13a84:	00001706 	br	13ae4 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
   13a88:	e0bffa17 	ldw	r2,-24(fp)
   13a8c:	e0fffd17 	ldw	r3,-12(fp)
   13a90:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   13a94:	e0bffa17 	ldw	r2,-24(fp)
   13a98:	e0fffe17 	ldw	r3,-8(fp)
   13a9c:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   13aa0:	e0bffa17 	ldw	r2,-24(fp)
   13aa4:	e0ffff17 	ldw	r3,-4(fp)
   13aa8:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   13aac:	e0bffa17 	ldw	r2,-24(fp)
   13ab0:	e0c00217 	ldw	r3,8(fp)
   13ab4:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
   13ab8:	e0bff617 	ldw	r2,-40(fp)
   13abc:	e0fffb17 	ldw	r3,-20(fp)
   13ac0:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
   13ac4:	e0bff617 	ldw	r2,-40(fp)
   13ac8:	10800817 	ldw	r2,32(r2)
   13acc:	1000041e 	bne	r2,zero,13ae0 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
   13ad0:	e0bff617 	ldw	r2,-40(fp)
   13ad4:	10800717 	ldw	r2,28(r2)
   13ad8:	e13ff617 	ldw	r4,-40(fp)
   13adc:	103ee83a 	callr	r2
  }

  return 0;
   13ae0:	0005883a 	mov	r2,zero
}
   13ae4:	e037883a 	mov	sp,fp
   13ae8:	dfc00117 	ldw	ra,4(sp)
   13aec:	df000017 	ldw	fp,0(sp)
   13af0:	dec00204 	addi	sp,sp,8
   13af4:	f800283a 	ret

00013af8 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   13af8:	defff104 	addi	sp,sp,-60
   13afc:	dfc00e15 	stw	ra,56(sp)
   13b00:	df000d15 	stw	fp,52(sp)
   13b04:	df000d04 	addi	fp,sp,52
   13b08:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
   13b0c:	e0bfff17 	ldw	r2,-4(fp)
   13b10:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   13b14:	e0bff317 	ldw	r2,-52(fp)
   13b18:	10800517 	ldw	r2,20(r2)
   13b1c:	1080080c 	andi	r2,r2,32
   13b20:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
   13b24:	e0bff317 	ldw	r2,-52(fp)
   13b28:	10800517 	ldw	r2,20(r2)
   13b2c:	1080100c 	andi	r2,r2,64
   13b30:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
   13b34:	e0bff317 	ldw	r2,-52(fp)
   13b38:	10800117 	ldw	r2,4(r2)
   13b3c:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
   13b40:	e0bff317 	ldw	r2,-52(fp)
   13b44:	10800317 	ldw	r2,12(r2)
   13b48:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
   13b4c:	e0bff617 	ldw	r2,-40(fp)
   13b50:	1004913a 	slli	r2,r2,4
   13b54:	10800904 	addi	r2,r2,36
   13b58:	e0fff317 	ldw	r3,-52(fp)
   13b5c:	1885883a 	add	r2,r3,r2
   13b60:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
   13b64:	e0bff717 	ldw	r2,-36(fp)
   13b68:	1004913a 	slli	r2,r2,4
   13b6c:	10801904 	addi	r2,r2,100
   13b70:	e0fff317 	ldw	r3,-52(fp)
   13b74:	1885883a 	add	r2,r3,r2
   13b78:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
   13b7c:	e0bff417 	ldw	r2,-48(fp)
   13b80:	1000051e 	bne	r2,zero,13b98 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   13b84:	e0bff617 	ldw	r2,-40(fp)
   13b88:	10800044 	addi	r2,r2,1
   13b8c:	10c000cc 	andi	r3,r2,3
   13b90:	e0bff317 	ldw	r2,-52(fp)
   13b94:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
   13b98:	e0bff517 	ldw	r2,-44(fp)
   13b9c:	1000051e 	bne	r2,zero,13bb4 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   13ba0:	e0bff717 	ldw	r2,-36(fp)
   13ba4:	10800044 	addi	r2,r2,1
   13ba8:	10c000cc 	andi	r3,r2,3
   13bac:	e0bff317 	ldw	r2,-52(fp)
   13bb0:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
   13bb4:	e0bff317 	ldw	r2,-52(fp)
   13bb8:	10800017 	ldw	r2,0(r2)
   13bbc:	0007883a 	mov	r3,zero
   13bc0:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
   13bc4:	e0bff317 	ldw	r2,-52(fp)
   13bc8:	10800017 	ldw	r2,0(r2)
   13bcc:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
   13bd0:	e0bff317 	ldw	r2,-52(fp)
   13bd4:	10800717 	ldw	r2,28(r2)
   13bd8:	e13ff317 	ldw	r4,-52(fp)
   13bdc:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   13be0:	e0bff417 	ldw	r2,-48(fp)
   13be4:	1000151e 	bne	r2,zero,13c3c <alt_avalon_dma_irq+0x144>
   13be8:	e0bff817 	ldw	r2,-32(fp)
   13bec:	10800217 	ldw	r2,8(r2)
   13bf0:	10001226 	beq	r2,zero,13c3c <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bf4:	0005303a 	rdctl	r2,status
   13bf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bfc:	e0fffc17 	ldw	r3,-16(fp)
   13c00:	00bfff84 	movi	r2,-2
   13c04:	1884703a 	and	r2,r3,r2
   13c08:	1001703a 	wrctl	status,r2
  
  return context;
   13c0c:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
   13c10:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
   13c14:	e0bff817 	ldw	r2,-32(fp)
   13c18:	10800217 	ldw	r2,8(r2)
   13c1c:	e0fff817 	ldw	r3,-32(fp)
   13c20:	18c00317 	ldw	r3,12(r3)
   13c24:	1809883a 	mov	r4,r3
   13c28:	103ee83a 	callr	r2
   13c2c:	e0bffb17 	ldw	r2,-20(fp)
   13c30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c34:	e0bffe17 	ldw	r2,-8(fp)
   13c38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   13c3c:	e0bff517 	ldw	r2,-44(fp)
   13c40:	1000171e 	bne	r2,zero,13ca0 <alt_avalon_dma_irq+0x1a8>
   13c44:	e0bff917 	ldw	r2,-28(fp)
   13c48:	10800217 	ldw	r2,8(r2)
   13c4c:	10001426 	beq	r2,zero,13ca0 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c50:	0005303a 	rdctl	r2,status
   13c54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c58:	e0fffd17 	ldw	r3,-12(fp)
   13c5c:	00bfff84 	movi	r2,-2
   13c60:	1884703a 	and	r2,r3,r2
   13c64:	1001703a 	wrctl	status,r2
  
  return context;
   13c68:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
   13c6c:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
   13c70:	e0bff917 	ldw	r2,-28(fp)
   13c74:	10800217 	ldw	r2,8(r2)
   13c78:	e0fff917 	ldw	r3,-28(fp)
   13c7c:	19000317 	ldw	r4,12(r3)
   13c80:	e0fff917 	ldw	r3,-28(fp)
   13c84:	18c00017 	ldw	r3,0(r3)
   13c88:	180b883a 	mov	r5,r3
   13c8c:	103ee83a 	callr	r2
   13c90:	e0bffb17 	ldw	r2,-20(fp)
   13c94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c98:	e0bffa17 	ldw	r2,-24(fp)
   13c9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   13ca0:	0001883a 	nop
   13ca4:	e037883a 	mov	sp,fp
   13ca8:	dfc00117 	ldw	ra,4(sp)
   13cac:	df000017 	ldw	fp,0(sp)
   13cb0:	dec00204 	addi	sp,sp,8
   13cb4:	f800283a 	ret

00013cb8 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   13cb8:	defff904 	addi	sp,sp,-28
   13cbc:	dfc00615 	stw	ra,24(sp)
   13cc0:	df000515 	stw	fp,20(sp)
   13cc4:	df000504 	addi	fp,sp,20
   13cc8:	e13ffc15 	stw	r4,-16(fp)
   13ccc:	e17ffd15 	stw	r5,-12(fp)
   13cd0:	e1bffe15 	stw	r6,-8(fp)
   13cd4:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   13cd8:	e0bffe17 	ldw	r2,-8(fp)
   13cdc:	10800604 	addi	r2,r2,24
   13ce0:	00c40004 	movi	r3,4096
   13ce4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   13ce8:	e0bffe17 	ldw	r2,-8(fp)
   13cec:	10800604 	addi	r2,r2,24
   13cf0:	00c40004 	movi	r3,4096
   13cf4:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
   13cf8:	e0bffe17 	ldw	r2,-8(fp)
   13cfc:	10800604 	addi	r2,r2,24
   13d00:	00c03f04 	movi	r3,252
   13d04:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
   13d08:	0007883a 	mov	r3,zero
   13d0c:	e0bffe17 	ldw	r2,-8(fp)
   13d10:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
   13d14:	e0bffc17 	ldw	r2,-16(fp)
   13d18:	10800617 	ldw	r2,24(r2)
   13d1c:	d8000015 	stw	zero,0(sp)
   13d20:	100f883a 	mov	r7,r2
   13d24:	01800074 	movhi	r6,1
   13d28:	318ebe04 	addi	r6,r6,15096
   13d2c:	e1400217 	ldw	r5,8(fp)
   13d30:	e13fff17 	ldw	r4,-4(fp)
   13d34:	0014d2c0 	call	14d2c <alt_ic_isr_register>
   13d38:	10000616 	blt	r2,zero,13d54 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
   13d3c:	e0bffc17 	ldw	r2,-16(fp)
   13d40:	1009883a 	mov	r4,r2
   13d44:	00131a80 	call	131a8 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
   13d48:	e0bffd17 	ldw	r2,-12(fp)
   13d4c:	1009883a 	mov	r4,r2
   13d50:	00131dc0 	call	131dc <alt_dma_rxchan_reg>
  }
}
   13d54:	0001883a 	nop
   13d58:	e037883a 	mov	sp,fp
   13d5c:	dfc00117 	ldw	ra,4(sp)
   13d60:	df000017 	ldw	fp,0(sp)
   13d64:	dec00204 	addi	sp,sp,8
   13d68:	f800283a 	ret

00013d6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13d6c:	defffa04 	addi	sp,sp,-24
   13d70:	dfc00515 	stw	ra,20(sp)
   13d74:	df000415 	stw	fp,16(sp)
   13d78:	df000404 	addi	fp,sp,16
   13d7c:	e13ffd15 	stw	r4,-12(fp)
   13d80:	e17ffe15 	stw	r5,-8(fp)
   13d84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13d88:	e0bffd17 	ldw	r2,-12(fp)
   13d8c:	10800017 	ldw	r2,0(r2)
   13d90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13d94:	e0bffc17 	ldw	r2,-16(fp)
   13d98:	10c00a04 	addi	r3,r2,40
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	10800217 	ldw	r2,8(r2)
   13da4:	100f883a 	mov	r7,r2
   13da8:	e1bfff17 	ldw	r6,-4(fp)
   13dac:	e17ffe17 	ldw	r5,-8(fp)
   13db0:	1809883a 	mov	r4,r3
   13db4:	00143940 	call	14394 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13db8:	e037883a 	mov	sp,fp
   13dbc:	dfc00117 	ldw	ra,4(sp)
   13dc0:	df000017 	ldw	fp,0(sp)
   13dc4:	dec00204 	addi	sp,sp,8
   13dc8:	f800283a 	ret

00013dcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13dcc:	defffa04 	addi	sp,sp,-24
   13dd0:	dfc00515 	stw	ra,20(sp)
   13dd4:	df000415 	stw	fp,16(sp)
   13dd8:	df000404 	addi	fp,sp,16
   13ddc:	e13ffd15 	stw	r4,-12(fp)
   13de0:	e17ffe15 	stw	r5,-8(fp)
   13de4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13de8:	e0bffd17 	ldw	r2,-12(fp)
   13dec:	10800017 	ldw	r2,0(r2)
   13df0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13df4:	e0bffc17 	ldw	r2,-16(fp)
   13df8:	10c00a04 	addi	r3,r2,40
   13dfc:	e0bffd17 	ldw	r2,-12(fp)
   13e00:	10800217 	ldw	r2,8(r2)
   13e04:	100f883a 	mov	r7,r2
   13e08:	e1bfff17 	ldw	r6,-4(fp)
   13e0c:	e17ffe17 	ldw	r5,-8(fp)
   13e10:	1809883a 	mov	r4,r3
   13e14:	00145b00 	call	145b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13e18:	e037883a 	mov	sp,fp
   13e1c:	dfc00117 	ldw	ra,4(sp)
   13e20:	df000017 	ldw	fp,0(sp)
   13e24:	dec00204 	addi	sp,sp,8
   13e28:	f800283a 	ret

00013e2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13e2c:	defffc04 	addi	sp,sp,-16
   13e30:	dfc00315 	stw	ra,12(sp)
   13e34:	df000215 	stw	fp,8(sp)
   13e38:	df000204 	addi	fp,sp,8
   13e3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e40:	e0bfff17 	ldw	r2,-4(fp)
   13e44:	10800017 	ldw	r2,0(r2)
   13e48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13e4c:	e0bffe17 	ldw	r2,-8(fp)
   13e50:	10c00a04 	addi	r3,r2,40
   13e54:	e0bfff17 	ldw	r2,-4(fp)
   13e58:	10800217 	ldw	r2,8(r2)
   13e5c:	100b883a 	mov	r5,r2
   13e60:	1809883a 	mov	r4,r3
   13e64:	001423c0 	call	1423c <altera_avalon_jtag_uart_close>
}
   13e68:	e037883a 	mov	sp,fp
   13e6c:	dfc00117 	ldw	ra,4(sp)
   13e70:	df000017 	ldw	fp,0(sp)
   13e74:	dec00204 	addi	sp,sp,8
   13e78:	f800283a 	ret

00013e7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13e7c:	defffa04 	addi	sp,sp,-24
   13e80:	dfc00515 	stw	ra,20(sp)
   13e84:	df000415 	stw	fp,16(sp)
   13e88:	df000404 	addi	fp,sp,16
   13e8c:	e13ffd15 	stw	r4,-12(fp)
   13e90:	e17ffe15 	stw	r5,-8(fp)
   13e94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13e98:	e0bffd17 	ldw	r2,-12(fp)
   13e9c:	10800017 	ldw	r2,0(r2)
   13ea0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13ea4:	e0bffc17 	ldw	r2,-16(fp)
   13ea8:	10800a04 	addi	r2,r2,40
   13eac:	e1bfff17 	ldw	r6,-4(fp)
   13eb0:	e17ffe17 	ldw	r5,-8(fp)
   13eb4:	1009883a 	mov	r4,r2
   13eb8:	00142a40 	call	142a4 <altera_avalon_jtag_uart_ioctl>
}
   13ebc:	e037883a 	mov	sp,fp
   13ec0:	dfc00117 	ldw	ra,4(sp)
   13ec4:	df000017 	ldw	fp,0(sp)
   13ec8:	dec00204 	addi	sp,sp,8
   13ecc:	f800283a 	ret

00013ed0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13ed0:	defffa04 	addi	sp,sp,-24
   13ed4:	dfc00515 	stw	ra,20(sp)
   13ed8:	df000415 	stw	fp,16(sp)
   13edc:	df000404 	addi	fp,sp,16
   13ee0:	e13ffd15 	stw	r4,-12(fp)
   13ee4:	e17ffe15 	stw	r5,-8(fp)
   13ee8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13eec:	e0bffd17 	ldw	r2,-12(fp)
   13ef0:	00c00044 	movi	r3,1
   13ef4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13ef8:	e0bffd17 	ldw	r2,-12(fp)
   13efc:	10800017 	ldw	r2,0(r2)
   13f00:	10800104 	addi	r2,r2,4
   13f04:	1007883a 	mov	r3,r2
   13f08:	e0bffd17 	ldw	r2,-12(fp)
   13f0c:	10800817 	ldw	r2,32(r2)
   13f10:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13f14:	e0bffe17 	ldw	r2,-8(fp)
   13f18:	e0ffff17 	ldw	r3,-4(fp)
   13f1c:	d8000015 	stw	zero,0(sp)
   13f20:	e1fffd17 	ldw	r7,-12(fp)
   13f24:	01800074 	movhi	r6,1
   13f28:	318fe404 	addi	r6,r6,16272
   13f2c:	180b883a 	mov	r5,r3
   13f30:	1009883a 	mov	r4,r2
   13f34:	0014d2c0 	call	14d2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13f38:	e0bffd17 	ldw	r2,-12(fp)
   13f3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13f40:	e0bffd17 	ldw	r2,-12(fp)
   13f44:	10800204 	addi	r2,r2,8
   13f48:	d0e74517 	ldw	r3,-25324(gp)
   13f4c:	e1fffd17 	ldw	r7,-12(fp)
   13f50:	01800074 	movhi	r6,1
   13f54:	31906704 	addi	r6,r6,16796
   13f58:	180b883a 	mov	r5,r3
   13f5c:	1009883a 	mov	r4,r2
   13f60:	00148c80 	call	148c8 <alt_alarm_start>
   13f64:	1000040e 	bge	r2,zero,13f78 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13f68:	e0fffd17 	ldw	r3,-12(fp)
   13f6c:	00a00034 	movhi	r2,32768
   13f70:	10bfffc4 	addi	r2,r2,-1
   13f74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13f78:	0001883a 	nop
   13f7c:	e037883a 	mov	sp,fp
   13f80:	dfc00117 	ldw	ra,4(sp)
   13f84:	df000017 	ldw	fp,0(sp)
   13f88:	dec00204 	addi	sp,sp,8
   13f8c:	f800283a 	ret

00013f90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13f90:	defff804 	addi	sp,sp,-32
   13f94:	df000715 	stw	fp,28(sp)
   13f98:	df000704 	addi	fp,sp,28
   13f9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13fa0:	e0bfff17 	ldw	r2,-4(fp)
   13fa4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13fa8:	e0bffb17 	ldw	r2,-20(fp)
   13fac:	10800017 	ldw	r2,0(r2)
   13fb0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	10800104 	addi	r2,r2,4
   13fbc:	10800037 	ldwio	r2,0(r2)
   13fc0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13fc4:	e0bffd17 	ldw	r2,-12(fp)
   13fc8:	1080c00c 	andi	r2,r2,768
   13fcc:	10006d26 	beq	r2,zero,14184 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13fd0:	e0bffd17 	ldw	r2,-12(fp)
   13fd4:	1080400c 	andi	r2,r2,256
   13fd8:	10003526 	beq	r2,zero,140b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13fdc:	00800074 	movhi	r2,1
   13fe0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13fe4:	e0bffb17 	ldw	r2,-20(fp)
   13fe8:	10800a17 	ldw	r2,40(r2)
   13fec:	10800044 	addi	r2,r2,1
   13ff0:	1081ffcc 	andi	r2,r2,2047
   13ff4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13ff8:	e0bffb17 	ldw	r2,-20(fp)
   13ffc:	10c00b17 	ldw	r3,44(r2)
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	18801526 	beq	r3,r2,1405c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14008:	e0bffc17 	ldw	r2,-16(fp)
   1400c:	10800037 	ldwio	r2,0(r2)
   14010:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14014:	e0bff917 	ldw	r2,-28(fp)
   14018:	10a0000c 	andi	r2,r2,32768
   1401c:	10001126 	beq	r2,zero,14064 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14020:	e0bffb17 	ldw	r2,-20(fp)
   14024:	10800a17 	ldw	r2,40(r2)
   14028:	e0fff917 	ldw	r3,-28(fp)
   1402c:	1809883a 	mov	r4,r3
   14030:	e0fffb17 	ldw	r3,-20(fp)
   14034:	1885883a 	add	r2,r3,r2
   14038:	10800e04 	addi	r2,r2,56
   1403c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14040:	e0bffb17 	ldw	r2,-20(fp)
   14044:	10800a17 	ldw	r2,40(r2)
   14048:	10800044 	addi	r2,r2,1
   1404c:	10c1ffcc 	andi	r3,r2,2047
   14050:	e0bffb17 	ldw	r2,-20(fp)
   14054:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14058:	003fe206 	br	13fe4 <__alt_exception_stack_pointer+0xf8013fe4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1405c:	0001883a 	nop
   14060:	00000106 	br	14068 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14064:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14068:	e0bff917 	ldw	r2,-28(fp)
   1406c:	10bfffec 	andhi	r2,r2,65535
   14070:	10000f26 	beq	r2,zero,140b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14074:	e0bffb17 	ldw	r2,-20(fp)
   14078:	10c00817 	ldw	r3,32(r2)
   1407c:	00bfff84 	movi	r2,-2
   14080:	1886703a 	and	r3,r3,r2
   14084:	e0bffb17 	ldw	r2,-20(fp)
   14088:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1408c:	e0bffc17 	ldw	r2,-16(fp)
   14090:	10800104 	addi	r2,r2,4
   14094:	1007883a 	mov	r3,r2
   14098:	e0bffb17 	ldw	r2,-20(fp)
   1409c:	10800817 	ldw	r2,32(r2)
   140a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   140a4:	e0bffc17 	ldw	r2,-16(fp)
   140a8:	10800104 	addi	r2,r2,4
   140ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   140b0:	e0bffd17 	ldw	r2,-12(fp)
   140b4:	1080800c 	andi	r2,r2,512
   140b8:	103fbe26 	beq	r2,zero,13fb4 <__alt_exception_stack_pointer+0xf8013fb4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   140bc:	e0bffd17 	ldw	r2,-12(fp)
   140c0:	1004d43a 	srli	r2,r2,16
   140c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   140c8:	00001406 	br	1411c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   140cc:	e0bffc17 	ldw	r2,-16(fp)
   140d0:	e0fffb17 	ldw	r3,-20(fp)
   140d4:	18c00d17 	ldw	r3,52(r3)
   140d8:	e13ffb17 	ldw	r4,-20(fp)
   140dc:	20c7883a 	add	r3,r4,r3
   140e0:	18c20e04 	addi	r3,r3,2104
   140e4:	18c00003 	ldbu	r3,0(r3)
   140e8:	18c03fcc 	andi	r3,r3,255
   140ec:	18c0201c 	xori	r3,r3,128
   140f0:	18ffe004 	addi	r3,r3,-128
   140f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140f8:	e0bffb17 	ldw	r2,-20(fp)
   140fc:	10800d17 	ldw	r2,52(r2)
   14100:	10800044 	addi	r2,r2,1
   14104:	10c1ffcc 	andi	r3,r2,2047
   14108:	e0bffb17 	ldw	r2,-20(fp)
   1410c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14110:	e0bffa17 	ldw	r2,-24(fp)
   14114:	10bfffc4 	addi	r2,r2,-1
   14118:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1411c:	e0bffa17 	ldw	r2,-24(fp)
   14120:	10000526 	beq	r2,zero,14138 <altera_avalon_jtag_uart_irq+0x1a8>
   14124:	e0bffb17 	ldw	r2,-20(fp)
   14128:	10c00d17 	ldw	r3,52(r2)
   1412c:	e0bffb17 	ldw	r2,-20(fp)
   14130:	10800c17 	ldw	r2,48(r2)
   14134:	18bfe51e 	bne	r3,r2,140cc <__alt_exception_stack_pointer+0xf80140cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14138:	e0bffa17 	ldw	r2,-24(fp)
   1413c:	103f9d26 	beq	r2,zero,13fb4 <__alt_exception_stack_pointer+0xf8013fb4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14140:	e0bffb17 	ldw	r2,-20(fp)
   14144:	10c00817 	ldw	r3,32(r2)
   14148:	00bfff44 	movi	r2,-3
   1414c:	1886703a 	and	r3,r3,r2
   14150:	e0bffb17 	ldw	r2,-20(fp)
   14154:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14158:	e0bffb17 	ldw	r2,-20(fp)
   1415c:	10800017 	ldw	r2,0(r2)
   14160:	10800104 	addi	r2,r2,4
   14164:	1007883a 	mov	r3,r2
   14168:	e0bffb17 	ldw	r2,-20(fp)
   1416c:	10800817 	ldw	r2,32(r2)
   14170:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14174:	e0bffc17 	ldw	r2,-16(fp)
   14178:	10800104 	addi	r2,r2,4
   1417c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14180:	003f8c06 	br	13fb4 <__alt_exception_stack_pointer+0xf8013fb4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14184:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14188:	0001883a 	nop
   1418c:	e037883a 	mov	sp,fp
   14190:	df000017 	ldw	fp,0(sp)
   14194:	dec00104 	addi	sp,sp,4
   14198:	f800283a 	ret

0001419c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1419c:	defff804 	addi	sp,sp,-32
   141a0:	df000715 	stw	fp,28(sp)
   141a4:	df000704 	addi	fp,sp,28
   141a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   141ac:	e0bffb17 	ldw	r2,-20(fp)
   141b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   141b4:	e0bff917 	ldw	r2,-28(fp)
   141b8:	10800017 	ldw	r2,0(r2)
   141bc:	10800104 	addi	r2,r2,4
   141c0:	10800037 	ldwio	r2,0(r2)
   141c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   141c8:	e0bffa17 	ldw	r2,-24(fp)
   141cc:	1081000c 	andi	r2,r2,1024
   141d0:	10000b26 	beq	r2,zero,14200 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   141d4:	e0bff917 	ldw	r2,-28(fp)
   141d8:	10800017 	ldw	r2,0(r2)
   141dc:	10800104 	addi	r2,r2,4
   141e0:	1007883a 	mov	r3,r2
   141e4:	e0bff917 	ldw	r2,-28(fp)
   141e8:	10800817 	ldw	r2,32(r2)
   141ec:	10810014 	ori	r2,r2,1024
   141f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   141f4:	e0bff917 	ldw	r2,-28(fp)
   141f8:	10000915 	stw	zero,36(r2)
   141fc:	00000a06 	br	14228 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14200:	e0bff917 	ldw	r2,-28(fp)
   14204:	10c00917 	ldw	r3,36(r2)
   14208:	00a00034 	movhi	r2,32768
   1420c:	10bfff04 	addi	r2,r2,-4
   14210:	10c00536 	bltu	r2,r3,14228 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14214:	e0bff917 	ldw	r2,-28(fp)
   14218:	10800917 	ldw	r2,36(r2)
   1421c:	10c00044 	addi	r3,r2,1
   14220:	e0bff917 	ldw	r2,-28(fp)
   14224:	10c00915 	stw	r3,36(r2)
   14228:	d0a74517 	ldw	r2,-25324(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1422c:	e037883a 	mov	sp,fp
   14230:	df000017 	ldw	fp,0(sp)
   14234:	dec00104 	addi	sp,sp,4
   14238:	f800283a 	ret

0001423c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1423c:	defffd04 	addi	sp,sp,-12
   14240:	df000215 	stw	fp,8(sp)
   14244:	df000204 	addi	fp,sp,8
   14248:	e13ffe15 	stw	r4,-8(fp)
   1424c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14250:	00000506 	br	14268 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14254:	e0bfff17 	ldw	r2,-4(fp)
   14258:	1090000c 	andi	r2,r2,16384
   1425c:	10000226 	beq	r2,zero,14268 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14260:	00bffd44 	movi	r2,-11
   14264:	00000b06 	br	14294 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	10c00d17 	ldw	r3,52(r2)
   14270:	e0bffe17 	ldw	r2,-8(fp)
   14274:	10800c17 	ldw	r2,48(r2)
   14278:	18800526 	beq	r3,r2,14290 <altera_avalon_jtag_uart_close+0x54>
   1427c:	e0bffe17 	ldw	r2,-8(fp)
   14280:	10c00917 	ldw	r3,36(r2)
   14284:	e0bffe17 	ldw	r2,-8(fp)
   14288:	10800117 	ldw	r2,4(r2)
   1428c:	18bff136 	bltu	r3,r2,14254 <__alt_exception_stack_pointer+0xf8014254>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14290:	0005883a 	mov	r2,zero
}
   14294:	e037883a 	mov	sp,fp
   14298:	df000017 	ldw	fp,0(sp)
   1429c:	dec00104 	addi	sp,sp,4
   142a0:	f800283a 	ret

000142a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   142a4:	defffa04 	addi	sp,sp,-24
   142a8:	df000515 	stw	fp,20(sp)
   142ac:	df000504 	addi	fp,sp,20
   142b0:	e13ffd15 	stw	r4,-12(fp)
   142b4:	e17ffe15 	stw	r5,-8(fp)
   142b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   142bc:	00bff9c4 	movi	r2,-25
   142c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   142c4:	e0bffe17 	ldw	r2,-8(fp)
   142c8:	10da8060 	cmpeqi	r3,r2,27137
   142cc:	1800031e 	bne	r3,zero,142dc <altera_avalon_jtag_uart_ioctl+0x38>
   142d0:	109a80a0 	cmpeqi	r2,r2,27138
   142d4:	1000181e 	bne	r2,zero,14338 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   142d8:	00002906 	br	14380 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	10c00117 	ldw	r3,4(r2)
   142e4:	00a00034 	movhi	r2,32768
   142e8:	10bfffc4 	addi	r2,r2,-1
   142ec:	18802126 	beq	r3,r2,14374 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	10800017 	ldw	r2,0(r2)
   142f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   142fc:	e0bffc17 	ldw	r2,-16(fp)
   14300:	10800090 	cmplti	r2,r2,2
   14304:	1000061e 	bne	r2,zero,14320 <altera_avalon_jtag_uart_ioctl+0x7c>
   14308:	e0fffc17 	ldw	r3,-16(fp)
   1430c:	00a00034 	movhi	r2,32768
   14310:	10bfffc4 	addi	r2,r2,-1
   14314:	18800226 	beq	r3,r2,14320 <altera_avalon_jtag_uart_ioctl+0x7c>
   14318:	e0bffc17 	ldw	r2,-16(fp)
   1431c:	00000206 	br	14328 <altera_avalon_jtag_uart_ioctl+0x84>
   14320:	00a00034 	movhi	r2,32768
   14324:	10bfff84 	addi	r2,r2,-2
   14328:	e0fffd17 	ldw	r3,-12(fp)
   1432c:	18800115 	stw	r2,4(r3)
      rc = 0;
   14330:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14334:	00000f06 	br	14374 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14338:	e0bffd17 	ldw	r2,-12(fp)
   1433c:	10c00117 	ldw	r3,4(r2)
   14340:	00a00034 	movhi	r2,32768
   14344:	10bfffc4 	addi	r2,r2,-1
   14348:	18800c26 	beq	r3,r2,1437c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1434c:	e0bffd17 	ldw	r2,-12(fp)
   14350:	10c00917 	ldw	r3,36(r2)
   14354:	e0bffd17 	ldw	r2,-12(fp)
   14358:	10800117 	ldw	r2,4(r2)
   1435c:	1885803a 	cmpltu	r2,r3,r2
   14360:	10c03fcc 	andi	r3,r2,255
   14364:	e0bfff17 	ldw	r2,-4(fp)
   14368:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1436c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14370:	00000206 	br	1437c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14374:	0001883a 	nop
   14378:	00000106 	br	14380 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1437c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14380:	e0bffb17 	ldw	r2,-20(fp)
}
   14384:	e037883a 	mov	sp,fp
   14388:	df000017 	ldw	fp,0(sp)
   1438c:	dec00104 	addi	sp,sp,4
   14390:	f800283a 	ret

00014394 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14394:	defff304 	addi	sp,sp,-52
   14398:	dfc00c15 	stw	ra,48(sp)
   1439c:	df000b15 	stw	fp,44(sp)
   143a0:	df000b04 	addi	fp,sp,44
   143a4:	e13ffc15 	stw	r4,-16(fp)
   143a8:	e17ffd15 	stw	r5,-12(fp)
   143ac:	e1bffe15 	stw	r6,-8(fp)
   143b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   143b4:	e0bffd17 	ldw	r2,-12(fp)
   143b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   143bc:	00004706 	br	144dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   143c0:	e0bffc17 	ldw	r2,-16(fp)
   143c4:	10800a17 	ldw	r2,40(r2)
   143c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   143cc:	e0bffc17 	ldw	r2,-16(fp)
   143d0:	10800b17 	ldw	r2,44(r2)
   143d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   143d8:	e0fff717 	ldw	r3,-36(fp)
   143dc:	e0bff817 	ldw	r2,-32(fp)
   143e0:	18800536 	bltu	r3,r2,143f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   143e4:	e0fff717 	ldw	r3,-36(fp)
   143e8:	e0bff817 	ldw	r2,-32(fp)
   143ec:	1885c83a 	sub	r2,r3,r2
   143f0:	e0bff615 	stw	r2,-40(fp)
   143f4:	00000406 	br	14408 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   143f8:	00c20004 	movi	r3,2048
   143fc:	e0bff817 	ldw	r2,-32(fp)
   14400:	1885c83a 	sub	r2,r3,r2
   14404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14408:	e0bff617 	ldw	r2,-40(fp)
   1440c:	10001e26 	beq	r2,zero,14488 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14410:	e0fffe17 	ldw	r3,-8(fp)
   14414:	e0bff617 	ldw	r2,-40(fp)
   14418:	1880022e 	bgeu	r3,r2,14424 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1441c:	e0bffe17 	ldw	r2,-8(fp)
   14420:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	10c00e04 	addi	r3,r2,56
   1442c:	e0bff817 	ldw	r2,-32(fp)
   14430:	1885883a 	add	r2,r3,r2
   14434:	e1bff617 	ldw	r6,-40(fp)
   14438:	100b883a 	mov	r5,r2
   1443c:	e13ff517 	ldw	r4,-44(fp)
   14440:	000cdec0 	call	cdec <memcpy>
      ptr   += n;
   14444:	e0fff517 	ldw	r3,-44(fp)
   14448:	e0bff617 	ldw	r2,-40(fp)
   1444c:	1885883a 	add	r2,r3,r2
   14450:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14454:	e0fffe17 	ldw	r3,-8(fp)
   14458:	e0bff617 	ldw	r2,-40(fp)
   1445c:	1885c83a 	sub	r2,r3,r2
   14460:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14464:	e0fff817 	ldw	r3,-32(fp)
   14468:	e0bff617 	ldw	r2,-40(fp)
   1446c:	1885883a 	add	r2,r3,r2
   14470:	10c1ffcc 	andi	r3,r2,2047
   14474:	e0bffc17 	ldw	r2,-16(fp)
   14478:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1447c:	e0bffe17 	ldw	r2,-8(fp)
   14480:	00bfcf16 	blt	zero,r2,143c0 <__alt_exception_stack_pointer+0xf80143c0>
   14484:	00000106 	br	1448c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14488:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1448c:	e0fff517 	ldw	r3,-44(fp)
   14490:	e0bffd17 	ldw	r2,-12(fp)
   14494:	1880141e 	bne	r3,r2,144e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14498:	e0bfff17 	ldw	r2,-4(fp)
   1449c:	1090000c 	andi	r2,r2,16384
   144a0:	1000131e 	bne	r2,zero,144f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   144a4:	0001883a 	nop
   144a8:	e0bffc17 	ldw	r2,-16(fp)
   144ac:	10c00a17 	ldw	r3,40(r2)
   144b0:	e0bff717 	ldw	r2,-36(fp)
   144b4:	1880051e 	bne	r3,r2,144cc <altera_avalon_jtag_uart_read+0x138>
   144b8:	e0bffc17 	ldw	r2,-16(fp)
   144bc:	10c00917 	ldw	r3,36(r2)
   144c0:	e0bffc17 	ldw	r2,-16(fp)
   144c4:	10800117 	ldw	r2,4(r2)
   144c8:	18bff736 	bltu	r3,r2,144a8 <__alt_exception_stack_pointer+0xf80144a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   144cc:	e0bffc17 	ldw	r2,-16(fp)
   144d0:	10c00a17 	ldw	r3,40(r2)
   144d4:	e0bff717 	ldw	r2,-36(fp)
   144d8:	18800726 	beq	r3,r2,144f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   144dc:	e0bffe17 	ldw	r2,-8(fp)
   144e0:	00bfb716 	blt	zero,r2,143c0 <__alt_exception_stack_pointer+0xf80143c0>
   144e4:	00000506 	br	144fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   144e8:	0001883a 	nop
   144ec:	00000306 	br	144fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   144f0:	0001883a 	nop
   144f4:	00000106 	br	144fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   144f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   144fc:	e0fff517 	ldw	r3,-44(fp)
   14500:	e0bffd17 	ldw	r2,-12(fp)
   14504:	18801826 	beq	r3,r2,14568 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14508:	0005303a 	rdctl	r2,status
   1450c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14510:	e0fffb17 	ldw	r3,-20(fp)
   14514:	00bfff84 	movi	r2,-2
   14518:	1884703a 	and	r2,r3,r2
   1451c:	1001703a 	wrctl	status,r2
  
  return context;
   14520:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14524:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14528:	e0bffc17 	ldw	r2,-16(fp)
   1452c:	10800817 	ldw	r2,32(r2)
   14530:	10c00054 	ori	r3,r2,1
   14534:	e0bffc17 	ldw	r2,-16(fp)
   14538:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1453c:	e0bffc17 	ldw	r2,-16(fp)
   14540:	10800017 	ldw	r2,0(r2)
   14544:	10800104 	addi	r2,r2,4
   14548:	1007883a 	mov	r3,r2
   1454c:	e0bffc17 	ldw	r2,-16(fp)
   14550:	10800817 	ldw	r2,32(r2)
   14554:	18800035 	stwio	r2,0(r3)
   14558:	e0bffa17 	ldw	r2,-24(fp)
   1455c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14560:	e0bff917 	ldw	r2,-28(fp)
   14564:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14568:	e0fff517 	ldw	r3,-44(fp)
   1456c:	e0bffd17 	ldw	r2,-12(fp)
   14570:	18800426 	beq	r3,r2,14584 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14574:	e0fff517 	ldw	r3,-44(fp)
   14578:	e0bffd17 	ldw	r2,-12(fp)
   1457c:	1885c83a 	sub	r2,r3,r2
   14580:	00000606 	br	1459c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14584:	e0bfff17 	ldw	r2,-4(fp)
   14588:	1090000c 	andi	r2,r2,16384
   1458c:	10000226 	beq	r2,zero,14598 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14590:	00bffd44 	movi	r2,-11
   14594:	00000106 	br	1459c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14598:	00bffec4 	movi	r2,-5
}
   1459c:	e037883a 	mov	sp,fp
   145a0:	dfc00117 	ldw	ra,4(sp)
   145a4:	df000017 	ldw	fp,0(sp)
   145a8:	dec00204 	addi	sp,sp,8
   145ac:	f800283a 	ret

000145b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   145b0:	defff304 	addi	sp,sp,-52
   145b4:	dfc00c15 	stw	ra,48(sp)
   145b8:	df000b15 	stw	fp,44(sp)
   145bc:	df000b04 	addi	fp,sp,44
   145c0:	e13ffc15 	stw	r4,-16(fp)
   145c4:	e17ffd15 	stw	r5,-12(fp)
   145c8:	e1bffe15 	stw	r6,-8(fp)
   145cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   145d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   145dc:	00003706 	br	146bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	10800c17 	ldw	r2,48(r2)
   145e8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   145ec:	e0bffc17 	ldw	r2,-16(fp)
   145f0:	10800d17 	ldw	r2,52(r2)
   145f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   145f8:	e0fff917 	ldw	r3,-28(fp)
   145fc:	e0bff517 	ldw	r2,-44(fp)
   14600:	1880062e 	bgeu	r3,r2,1461c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14604:	e0fff517 	ldw	r3,-44(fp)
   14608:	e0bff917 	ldw	r2,-28(fp)
   1460c:	1885c83a 	sub	r2,r3,r2
   14610:	10bfffc4 	addi	r2,r2,-1
   14614:	e0bff615 	stw	r2,-40(fp)
   14618:	00000b06 	br	14648 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1461c:	e0bff517 	ldw	r2,-44(fp)
   14620:	10000526 	beq	r2,zero,14638 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14624:	00c20004 	movi	r3,2048
   14628:	e0bff917 	ldw	r2,-28(fp)
   1462c:	1885c83a 	sub	r2,r3,r2
   14630:	e0bff615 	stw	r2,-40(fp)
   14634:	00000406 	br	14648 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14638:	00c1ffc4 	movi	r3,2047
   1463c:	e0bff917 	ldw	r2,-28(fp)
   14640:	1885c83a 	sub	r2,r3,r2
   14644:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14648:	e0bff617 	ldw	r2,-40(fp)
   1464c:	10001e26 	beq	r2,zero,146c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14650:	e0fffe17 	ldw	r3,-8(fp)
   14654:	e0bff617 	ldw	r2,-40(fp)
   14658:	1880022e 	bgeu	r3,r2,14664 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1465c:	e0bffe17 	ldw	r2,-8(fp)
   14660:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14664:	e0bffc17 	ldw	r2,-16(fp)
   14668:	10c20e04 	addi	r3,r2,2104
   1466c:	e0bff917 	ldw	r2,-28(fp)
   14670:	1885883a 	add	r2,r3,r2
   14674:	e1bff617 	ldw	r6,-40(fp)
   14678:	e17ffd17 	ldw	r5,-12(fp)
   1467c:	1009883a 	mov	r4,r2
   14680:	000cdec0 	call	cdec <memcpy>
      ptr   += n;
   14684:	e0fffd17 	ldw	r3,-12(fp)
   14688:	e0bff617 	ldw	r2,-40(fp)
   1468c:	1885883a 	add	r2,r3,r2
   14690:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14694:	e0fffe17 	ldw	r3,-8(fp)
   14698:	e0bff617 	ldw	r2,-40(fp)
   1469c:	1885c83a 	sub	r2,r3,r2
   146a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   146a4:	e0fff917 	ldw	r3,-28(fp)
   146a8:	e0bff617 	ldw	r2,-40(fp)
   146ac:	1885883a 	add	r2,r3,r2
   146b0:	10c1ffcc 	andi	r3,r2,2047
   146b4:	e0bffc17 	ldw	r2,-16(fp)
   146b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   146bc:	e0bffe17 	ldw	r2,-8(fp)
   146c0:	00bfc716 	blt	zero,r2,145e0 <__alt_exception_stack_pointer+0xf80145e0>
   146c4:	00000106 	br	146cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   146c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146cc:	0005303a 	rdctl	r2,status
   146d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146d4:	e0fffb17 	ldw	r3,-20(fp)
   146d8:	00bfff84 	movi	r2,-2
   146dc:	1884703a 	and	r2,r3,r2
   146e0:	1001703a 	wrctl	status,r2
  
  return context;
   146e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   146e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   146ec:	e0bffc17 	ldw	r2,-16(fp)
   146f0:	10800817 	ldw	r2,32(r2)
   146f4:	10c00094 	ori	r3,r2,2
   146f8:	e0bffc17 	ldw	r2,-16(fp)
   146fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14700:	e0bffc17 	ldw	r2,-16(fp)
   14704:	10800017 	ldw	r2,0(r2)
   14708:	10800104 	addi	r2,r2,4
   1470c:	1007883a 	mov	r3,r2
   14710:	e0bffc17 	ldw	r2,-16(fp)
   14714:	10800817 	ldw	r2,32(r2)
   14718:	18800035 	stwio	r2,0(r3)
   1471c:	e0bffa17 	ldw	r2,-24(fp)
   14720:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14724:	e0bff817 	ldw	r2,-32(fp)
   14728:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1472c:	e0bffe17 	ldw	r2,-8(fp)
   14730:	0080100e 	bge	zero,r2,14774 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14734:	e0bfff17 	ldw	r2,-4(fp)
   14738:	1090000c 	andi	r2,r2,16384
   1473c:	1000101e 	bne	r2,zero,14780 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14740:	0001883a 	nop
   14744:	e0bffc17 	ldw	r2,-16(fp)
   14748:	10c00d17 	ldw	r3,52(r2)
   1474c:	e0bff517 	ldw	r2,-44(fp)
   14750:	1880051e 	bne	r3,r2,14768 <altera_avalon_jtag_uart_write+0x1b8>
   14754:	e0bffc17 	ldw	r2,-16(fp)
   14758:	10c00917 	ldw	r3,36(r2)
   1475c:	e0bffc17 	ldw	r2,-16(fp)
   14760:	10800117 	ldw	r2,4(r2)
   14764:	18bff736 	bltu	r3,r2,14744 <__alt_exception_stack_pointer+0xf8014744>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14768:	e0bffc17 	ldw	r2,-16(fp)
   1476c:	10800917 	ldw	r2,36(r2)
   14770:	1000051e 	bne	r2,zero,14788 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14774:	e0bffe17 	ldw	r2,-8(fp)
   14778:	00bfd016 	blt	zero,r2,146bc <__alt_exception_stack_pointer+0xf80146bc>
   1477c:	00000306 	br	1478c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14780:	0001883a 	nop
   14784:	00000106 	br	1478c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14788:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1478c:	e0fffd17 	ldw	r3,-12(fp)
   14790:	e0bff717 	ldw	r2,-36(fp)
   14794:	18800426 	beq	r3,r2,147a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14798:	e0fffd17 	ldw	r3,-12(fp)
   1479c:	e0bff717 	ldw	r2,-36(fp)
   147a0:	1885c83a 	sub	r2,r3,r2
   147a4:	00000606 	br	147c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	1090000c 	andi	r2,r2,16384
   147b0:	10000226 	beq	r2,zero,147bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   147b4:	00bffd44 	movi	r2,-11
   147b8:	00000106 	br	147c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   147bc:	00bffec4 	movi	r2,-5
}
   147c0:	e037883a 	mov	sp,fp
   147c4:	dfc00117 	ldw	ra,4(sp)
   147c8:	df000017 	ldw	fp,0(sp)
   147cc:	dec00204 	addi	sp,sp,8
   147d0:	f800283a 	ret

000147d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   147d4:	defffa04 	addi	sp,sp,-24
   147d8:	dfc00515 	stw	ra,20(sp)
   147dc:	df000415 	stw	fp,16(sp)
   147e0:	df000404 	addi	fp,sp,16
   147e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   147e8:	0007883a 	mov	r3,zero
   147ec:	e0bfff17 	ldw	r2,-4(fp)
   147f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   147f4:	e0bfff17 	ldw	r2,-4(fp)
   147f8:	10800104 	addi	r2,r2,4
   147fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14800:	0005303a 	rdctl	r2,status
   14804:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14808:	e0fffd17 	ldw	r3,-12(fp)
   1480c:	00bfff84 	movi	r2,-2
   14810:	1884703a 	and	r2,r3,r2
   14814:	1001703a 	wrctl	status,r2
  
  return context;
   14818:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1481c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14820:	001544c0 	call	1544c <alt_tick>
   14824:	e0bffc17 	ldw	r2,-16(fp)
   14828:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1482c:	e0bffe17 	ldw	r2,-8(fp)
   14830:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14834:	0001883a 	nop
   14838:	e037883a 	mov	sp,fp
   1483c:	dfc00117 	ldw	ra,4(sp)
   14840:	df000017 	ldw	fp,0(sp)
   14844:	dec00204 	addi	sp,sp,8
   14848:	f800283a 	ret

0001484c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1484c:	defff804 	addi	sp,sp,-32
   14850:	dfc00715 	stw	ra,28(sp)
   14854:	df000615 	stw	fp,24(sp)
   14858:	df000604 	addi	fp,sp,24
   1485c:	e13ffc15 	stw	r4,-16(fp)
   14860:	e17ffd15 	stw	r5,-12(fp)
   14864:	e1bffe15 	stw	r6,-8(fp)
   14868:	e1ffff15 	stw	r7,-4(fp)
   1486c:	e0bfff17 	ldw	r2,-4(fp)
   14870:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14874:	d0a74517 	ldw	r2,-25324(gp)
   14878:	1000021e 	bne	r2,zero,14884 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1487c:	e0bffb17 	ldw	r2,-20(fp)
   14880:	d0a74515 	stw	r2,-25324(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14884:	e0bffc17 	ldw	r2,-16(fp)
   14888:	10800104 	addi	r2,r2,4
   1488c:	00c001c4 	movi	r3,7
   14890:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14894:	d8000015 	stw	zero,0(sp)
   14898:	e1fffc17 	ldw	r7,-16(fp)
   1489c:	01800074 	movhi	r6,1
   148a0:	3191f504 	addi	r6,r6,18388
   148a4:	e17ffe17 	ldw	r5,-8(fp)
   148a8:	e13ffd17 	ldw	r4,-12(fp)
   148ac:	0014d2c0 	call	14d2c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   148b0:	0001883a 	nop
   148b4:	e037883a 	mov	sp,fp
   148b8:	dfc00117 	ldw	ra,4(sp)
   148bc:	df000017 	ldw	fp,0(sp)
   148c0:	dec00204 	addi	sp,sp,8
   148c4:	f800283a 	ret

000148c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   148c8:	defff504 	addi	sp,sp,-44
   148cc:	df000a15 	stw	fp,40(sp)
   148d0:	df000a04 	addi	fp,sp,40
   148d4:	e13ffc15 	stw	r4,-16(fp)
   148d8:	e17ffd15 	stw	r5,-12(fp)
   148dc:	e1bffe15 	stw	r6,-8(fp)
   148e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   148e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   148e8:	d0a74517 	ldw	r2,-25324(gp)
  
  if (alt_ticks_per_second ())
   148ec:	10003c26 	beq	r2,zero,149e0 <alt_alarm_start+0x118>
  {
    if (alarm)
   148f0:	e0bffc17 	ldw	r2,-16(fp)
   148f4:	10003826 	beq	r2,zero,149d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   148f8:	e0bffc17 	ldw	r2,-16(fp)
   148fc:	e0fffe17 	ldw	r3,-8(fp)
   14900:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14904:	e0bffc17 	ldw	r2,-16(fp)
   14908:	e0ffff17 	ldw	r3,-4(fp)
   1490c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14910:	0005303a 	rdctl	r2,status
   14914:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14918:	e0fff917 	ldw	r3,-28(fp)
   1491c:	00bfff84 	movi	r2,-2
   14920:	1884703a 	and	r2,r3,r2
   14924:	1001703a 	wrctl	status,r2
  
  return context;
   14928:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1492c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14930:	d0a74617 	ldw	r2,-25320(gp)
      
      current_nticks = alt_nticks();
   14934:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14938:	e0fffd17 	ldw	r3,-12(fp)
   1493c:	e0bff617 	ldw	r2,-40(fp)
   14940:	1885883a 	add	r2,r3,r2
   14944:	10c00044 	addi	r3,r2,1
   14948:	e0bffc17 	ldw	r2,-16(fp)
   1494c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14950:	e0bffc17 	ldw	r2,-16(fp)
   14954:	10c00217 	ldw	r3,8(r2)
   14958:	e0bff617 	ldw	r2,-40(fp)
   1495c:	1880042e 	bgeu	r3,r2,14970 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14960:	e0bffc17 	ldw	r2,-16(fp)
   14964:	00c00044 	movi	r3,1
   14968:	10c00405 	stb	r3,16(r2)
   1496c:	00000206 	br	14978 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14970:	e0bffc17 	ldw	r2,-16(fp)
   14974:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14978:	e0bffc17 	ldw	r2,-16(fp)
   1497c:	d0e01304 	addi	r3,gp,-32692
   14980:	e0fffa15 	stw	r3,-24(fp)
   14984:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14988:	e0bffb17 	ldw	r2,-20(fp)
   1498c:	e0fffa17 	ldw	r3,-24(fp)
   14990:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14994:	e0bffa17 	ldw	r2,-24(fp)
   14998:	10c00017 	ldw	r3,0(r2)
   1499c:	e0bffb17 	ldw	r2,-20(fp)
   149a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   149a4:	e0bffa17 	ldw	r2,-24(fp)
   149a8:	10800017 	ldw	r2,0(r2)
   149ac:	e0fffb17 	ldw	r3,-20(fp)
   149b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   149b4:	e0bffa17 	ldw	r2,-24(fp)
   149b8:	e0fffb17 	ldw	r3,-20(fp)
   149bc:	10c00015 	stw	r3,0(r2)
   149c0:	e0bff817 	ldw	r2,-32(fp)
   149c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149c8:	e0bff717 	ldw	r2,-36(fp)
   149cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   149d0:	0005883a 	mov	r2,zero
   149d4:	00000306 	br	149e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   149d8:	00bffa84 	movi	r2,-22
   149dc:	00000106 	br	149e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   149e0:	00bfde84 	movi	r2,-134
  }
}
   149e4:	e037883a 	mov	sp,fp
   149e8:	df000017 	ldw	fp,0(sp)
   149ec:	dec00104 	addi	sp,sp,4
   149f0:	f800283a 	ret

000149f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   149f4:	defffa04 	addi	sp,sp,-24
   149f8:	dfc00515 	stw	ra,20(sp)
   149fc:	df000415 	stw	fp,16(sp)
   14a00:	df000404 	addi	fp,sp,16
   14a04:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   14a08:	00800244 	movi	r2,9
   14a0c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   14a10:	014003f4 	movhi	r5,15
   14a14:	29509004 	addi	r5,r5,16960
   14a18:	e13ffd17 	ldw	r4,-12(fp)
   14a1c:	00053c80 	call	53c8 <__mulsi3>
   14a20:	100b883a 	mov	r5,r2
   14a24:	0100bef4 	movhi	r4,763
   14a28:	213c2004 	addi	r4,r4,-3968
   14a2c:	000530c0 	call	530c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   14a30:	100b883a 	mov	r5,r2
   14a34:	01200034 	movhi	r4,32768
   14a38:	213fffc4 	addi	r4,r4,-1
   14a3c:	000530c0 	call	530c <__udivsi3>
   14a40:	100b883a 	mov	r5,r2
   14a44:	e13fff17 	ldw	r4,-4(fp)
   14a48:	000530c0 	call	530c <__udivsi3>
   14a4c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14a50:	e0bffe17 	ldw	r2,-8(fp)
   14a54:	10002a26 	beq	r2,zero,14b00 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   14a58:	e03ffc15 	stw	zero,-16(fp)
   14a5c:	00001706 	br	14abc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14a60:	00a00034 	movhi	r2,32768
   14a64:	10bfffc4 	addi	r2,r2,-1
   14a68:	10bfffc4 	addi	r2,r2,-1
   14a6c:	103ffe1e 	bne	r2,zero,14a68 <__alt_exception_stack_pointer+0xf8014a68>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   14a70:	014003f4 	movhi	r5,15
   14a74:	29509004 	addi	r5,r5,16960
   14a78:	e13ffd17 	ldw	r4,-12(fp)
   14a7c:	00053c80 	call	53c8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14a80:	100b883a 	mov	r5,r2
   14a84:	0100bef4 	movhi	r4,763
   14a88:	213c2004 	addi	r4,r4,-3968
   14a8c:	000530c0 	call	530c <__udivsi3>
   14a90:	100b883a 	mov	r5,r2
   14a94:	01200034 	movhi	r4,32768
   14a98:	213fffc4 	addi	r4,r4,-1
   14a9c:	000530c0 	call	530c <__udivsi3>
   14aa0:	1007883a 	mov	r3,r2
   14aa4:	e0bfff17 	ldw	r2,-4(fp)
   14aa8:	10c5c83a 	sub	r2,r2,r3
   14aac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14ab0:	e0bffc17 	ldw	r2,-16(fp)
   14ab4:	10800044 	addi	r2,r2,1
   14ab8:	e0bffc15 	stw	r2,-16(fp)
   14abc:	e0fffc17 	ldw	r3,-16(fp)
   14ac0:	e0bffe17 	ldw	r2,-8(fp)
   14ac4:	18bfe616 	blt	r3,r2,14a60 <__alt_exception_stack_pointer+0xf8014a60>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14ac8:	014003f4 	movhi	r5,15
   14acc:	29509004 	addi	r5,r5,16960
   14ad0:	e13ffd17 	ldw	r4,-12(fp)
   14ad4:	00053c80 	call	53c8 <__mulsi3>
   14ad8:	100b883a 	mov	r5,r2
   14adc:	0100bef4 	movhi	r4,763
   14ae0:	213c2004 	addi	r4,r4,-3968
   14ae4:	000530c0 	call	530c <__udivsi3>
   14ae8:	e17fff17 	ldw	r5,-4(fp)
   14aec:	1009883a 	mov	r4,r2
   14af0:	00053c80 	call	53c8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14af4:	10bfffc4 	addi	r2,r2,-1
   14af8:	103ffe1e 	bne	r2,zero,14af4 <__alt_exception_stack_pointer+0xf8014af4>
   14afc:	00000d06 	br	14b34 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14b00:	014003f4 	movhi	r5,15
   14b04:	29509004 	addi	r5,r5,16960
   14b08:	e13ffd17 	ldw	r4,-12(fp)
   14b0c:	00053c80 	call	53c8 <__mulsi3>
   14b10:	100b883a 	mov	r5,r2
   14b14:	0100bef4 	movhi	r4,763
   14b18:	213c2004 	addi	r4,r4,-3968
   14b1c:	000530c0 	call	530c <__udivsi3>
   14b20:	e17fff17 	ldw	r5,-4(fp)
   14b24:	1009883a 	mov	r4,r2
   14b28:	00053c80 	call	53c8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14b2c:	10bfffc4 	addi	r2,r2,-1
   14b30:	00bffe16 	blt	zero,r2,14b2c <__alt_exception_stack_pointer+0xf8014b2c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   14b34:	0005883a 	mov	r2,zero
}
   14b38:	e037883a 	mov	sp,fp
   14b3c:	dfc00117 	ldw	ra,4(sp)
   14b40:	df000017 	ldw	fp,0(sp)
   14b44:	dec00204 	addi	sp,sp,8
   14b48:	f800283a 	ret

00014b4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14b4c:	deffff04 	addi	sp,sp,-4
   14b50:	df000015 	stw	fp,0(sp)
   14b54:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14b58:	0001883a 	nop
   14b5c:	e037883a 	mov	sp,fp
   14b60:	df000017 	ldw	fp,0(sp)
   14b64:	dec00104 	addi	sp,sp,4
   14b68:	f800283a 	ret

00014b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b6c:	defffe04 	addi	sp,sp,-8
   14b70:	dfc00115 	stw	ra,4(sp)
   14b74:	df000015 	stw	fp,0(sp)
   14b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b7c:	d0a01117 	ldw	r2,-32700(gp)
   14b80:	10000326 	beq	r2,zero,14b90 <alt_get_errno+0x24>
   14b84:	d0a01117 	ldw	r2,-32700(gp)
   14b88:	103ee83a 	callr	r2
   14b8c:	00000106 	br	14b94 <alt_get_errno+0x28>
   14b90:	d0a73d04 	addi	r2,gp,-25356
}
   14b94:	e037883a 	mov	sp,fp
   14b98:	dfc00117 	ldw	ra,4(sp)
   14b9c:	df000017 	ldw	fp,0(sp)
   14ba0:	dec00204 	addi	sp,sp,8
   14ba4:	f800283a 	ret

00014ba8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14ba8:	defffa04 	addi	sp,sp,-24
   14bac:	dfc00515 	stw	ra,20(sp)
   14bb0:	df000415 	stw	fp,16(sp)
   14bb4:	df000404 	addi	fp,sp,16
   14bb8:	e13ffe15 	stw	r4,-8(fp)
   14bbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	10000326 	beq	r2,zero,14bd4 <alt_dev_llist_insert+0x2c>
   14bc8:	e0bffe17 	ldw	r2,-8(fp)
   14bcc:	10800217 	ldw	r2,8(r2)
   14bd0:	1000061e 	bne	r2,zero,14bec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14bd4:	0014b6c0 	call	14b6c <alt_get_errno>
   14bd8:	1007883a 	mov	r3,r2
   14bdc:	00800584 	movi	r2,22
   14be0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14be4:	00bffa84 	movi	r2,-22
   14be8:	00001306 	br	14c38 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14bec:	e0bffe17 	ldw	r2,-8(fp)
   14bf0:	e0ffff17 	ldw	r3,-4(fp)
   14bf4:	e0fffc15 	stw	r3,-16(fp)
   14bf8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14bfc:	e0bffd17 	ldw	r2,-12(fp)
   14c00:	e0fffc17 	ldw	r3,-16(fp)
   14c04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14c08:	e0bffc17 	ldw	r2,-16(fp)
   14c0c:	10c00017 	ldw	r3,0(r2)
   14c10:	e0bffd17 	ldw	r2,-12(fp)
   14c14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14c18:	e0bffc17 	ldw	r2,-16(fp)
   14c1c:	10800017 	ldw	r2,0(r2)
   14c20:	e0fffd17 	ldw	r3,-12(fp)
   14c24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14c28:	e0bffc17 	ldw	r2,-16(fp)
   14c2c:	e0fffd17 	ldw	r3,-12(fp)
   14c30:	10c00015 	stw	r3,0(r2)

  return 0;  
   14c34:	0005883a 	mov	r2,zero
}
   14c38:	e037883a 	mov	sp,fp
   14c3c:	dfc00117 	ldw	ra,4(sp)
   14c40:	df000017 	ldw	fp,0(sp)
   14c44:	dec00204 	addi	sp,sp,8
   14c48:	f800283a 	ret

00014c4c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14c4c:	defffd04 	addi	sp,sp,-12
   14c50:	dfc00215 	stw	ra,8(sp)
   14c54:	df000115 	stw	fp,4(sp)
   14c58:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14c5c:	00800074 	movhi	r2,1
   14c60:	1096dc04 	addi	r2,r2,23408
   14c64:	e0bfff15 	stw	r2,-4(fp)
   14c68:	00000606 	br	14c84 <_do_ctors+0x38>
        (*ctor) (); 
   14c6c:	e0bfff17 	ldw	r2,-4(fp)
   14c70:	10800017 	ldw	r2,0(r2)
   14c74:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14c78:	e0bfff17 	ldw	r2,-4(fp)
   14c7c:	10bfff04 	addi	r2,r2,-4
   14c80:	e0bfff15 	stw	r2,-4(fp)
   14c84:	e0ffff17 	ldw	r3,-4(fp)
   14c88:	00800074 	movhi	r2,1
   14c8c:	1096dd04 	addi	r2,r2,23412
   14c90:	18bff62e 	bgeu	r3,r2,14c6c <__alt_exception_stack_pointer+0xf8014c6c>
        (*ctor) (); 
}
   14c94:	0001883a 	nop
   14c98:	e037883a 	mov	sp,fp
   14c9c:	dfc00117 	ldw	ra,4(sp)
   14ca0:	df000017 	ldw	fp,0(sp)
   14ca4:	dec00204 	addi	sp,sp,8
   14ca8:	f800283a 	ret

00014cac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14cac:	defffd04 	addi	sp,sp,-12
   14cb0:	dfc00215 	stw	ra,8(sp)
   14cb4:	df000115 	stw	fp,4(sp)
   14cb8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14cbc:	00800074 	movhi	r2,1
   14cc0:	1096dc04 	addi	r2,r2,23408
   14cc4:	e0bfff15 	stw	r2,-4(fp)
   14cc8:	00000606 	br	14ce4 <_do_dtors+0x38>
        (*dtor) (); 
   14ccc:	e0bfff17 	ldw	r2,-4(fp)
   14cd0:	10800017 	ldw	r2,0(r2)
   14cd4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14cd8:	e0bfff17 	ldw	r2,-4(fp)
   14cdc:	10bfff04 	addi	r2,r2,-4
   14ce0:	e0bfff15 	stw	r2,-4(fp)
   14ce4:	e0ffff17 	ldw	r3,-4(fp)
   14ce8:	00800074 	movhi	r2,1
   14cec:	1096dd04 	addi	r2,r2,23412
   14cf0:	18bff62e 	bgeu	r3,r2,14ccc <__alt_exception_stack_pointer+0xf8014ccc>
        (*dtor) (); 
}
   14cf4:	0001883a 	nop
   14cf8:	e037883a 	mov	sp,fp
   14cfc:	dfc00117 	ldw	ra,4(sp)
   14d00:	df000017 	ldw	fp,0(sp)
   14d04:	dec00204 	addi	sp,sp,8
   14d08:	f800283a 	ret

00014d0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14d0c:	deffff04 	addi	sp,sp,-4
   14d10:	df000015 	stw	fp,0(sp)
   14d14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14d18:	0001883a 	nop
   14d1c:	e037883a 	mov	sp,fp
   14d20:	df000017 	ldw	fp,0(sp)
   14d24:	dec00104 	addi	sp,sp,4
   14d28:	f800283a 	ret

00014d2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14d2c:	defff904 	addi	sp,sp,-28
   14d30:	dfc00615 	stw	ra,24(sp)
   14d34:	df000515 	stw	fp,20(sp)
   14d38:	df000504 	addi	fp,sp,20
   14d3c:	e13ffc15 	stw	r4,-16(fp)
   14d40:	e17ffd15 	stw	r5,-12(fp)
   14d44:	e1bffe15 	stw	r6,-8(fp)
   14d48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14d4c:	e0800217 	ldw	r2,8(fp)
   14d50:	d8800015 	stw	r2,0(sp)
   14d54:	e1ffff17 	ldw	r7,-4(fp)
   14d58:	e1bffe17 	ldw	r6,-8(fp)
   14d5c:	e17ffd17 	ldw	r5,-12(fp)
   14d60:	e13ffc17 	ldw	r4,-16(fp)
   14d64:	0014edc0 	call	14edc <alt_iic_isr_register>
}  
   14d68:	e037883a 	mov	sp,fp
   14d6c:	dfc00117 	ldw	ra,4(sp)
   14d70:	df000017 	ldw	fp,0(sp)
   14d74:	dec00204 	addi	sp,sp,8
   14d78:	f800283a 	ret

00014d7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14d7c:	defff904 	addi	sp,sp,-28
   14d80:	df000615 	stw	fp,24(sp)
   14d84:	df000604 	addi	fp,sp,24
   14d88:	e13ffe15 	stw	r4,-8(fp)
   14d8c:	e17fff15 	stw	r5,-4(fp)
   14d90:	e0bfff17 	ldw	r2,-4(fp)
   14d94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d98:	0005303a 	rdctl	r2,status
   14d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14da0:	e0fffb17 	ldw	r3,-20(fp)
   14da4:	00bfff84 	movi	r2,-2
   14da8:	1884703a 	and	r2,r3,r2
   14dac:	1001703a 	wrctl	status,r2
  
  return context;
   14db0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14db4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14db8:	00c00044 	movi	r3,1
   14dbc:	e0bffa17 	ldw	r2,-24(fp)
   14dc0:	1884983a 	sll	r2,r3,r2
   14dc4:	1007883a 	mov	r3,r2
   14dc8:	d0a74417 	ldw	r2,-25328(gp)
   14dcc:	1884b03a 	or	r2,r3,r2
   14dd0:	d0a74415 	stw	r2,-25328(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14dd4:	d0a74417 	ldw	r2,-25328(gp)
   14dd8:	100170fa 	wrctl	ienable,r2
   14ddc:	e0bffc17 	ldw	r2,-16(fp)
   14de0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14de4:	e0bffd17 	ldw	r2,-12(fp)
   14de8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14dec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14df0:	0001883a 	nop
}
   14df4:	e037883a 	mov	sp,fp
   14df8:	df000017 	ldw	fp,0(sp)
   14dfc:	dec00104 	addi	sp,sp,4
   14e00:	f800283a 	ret

00014e04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14e04:	defff904 	addi	sp,sp,-28
   14e08:	df000615 	stw	fp,24(sp)
   14e0c:	df000604 	addi	fp,sp,24
   14e10:	e13ffe15 	stw	r4,-8(fp)
   14e14:	e17fff15 	stw	r5,-4(fp)
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e20:	0005303a 	rdctl	r2,status
   14e24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e28:	e0fffb17 	ldw	r3,-20(fp)
   14e2c:	00bfff84 	movi	r2,-2
   14e30:	1884703a 	and	r2,r3,r2
   14e34:	1001703a 	wrctl	status,r2
  
  return context;
   14e38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14e3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14e40:	00c00044 	movi	r3,1
   14e44:	e0bffa17 	ldw	r2,-24(fp)
   14e48:	1884983a 	sll	r2,r3,r2
   14e4c:	0084303a 	nor	r2,zero,r2
   14e50:	1007883a 	mov	r3,r2
   14e54:	d0a74417 	ldw	r2,-25328(gp)
   14e58:	1884703a 	and	r2,r3,r2
   14e5c:	d0a74415 	stw	r2,-25328(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14e60:	d0a74417 	ldw	r2,-25328(gp)
   14e64:	100170fa 	wrctl	ienable,r2
   14e68:	e0bffc17 	ldw	r2,-16(fp)
   14e6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e70:	e0bffd17 	ldw	r2,-12(fp)
   14e74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14e78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14e7c:	0001883a 	nop
}
   14e80:	e037883a 	mov	sp,fp
   14e84:	df000017 	ldw	fp,0(sp)
   14e88:	dec00104 	addi	sp,sp,4
   14e8c:	f800283a 	ret

00014e90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14e90:	defffc04 	addi	sp,sp,-16
   14e94:	df000315 	stw	fp,12(sp)
   14e98:	df000304 	addi	fp,sp,12
   14e9c:	e13ffe15 	stw	r4,-8(fp)
   14ea0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14ea4:	000530fa 	rdctl	r2,ienable
   14ea8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14eac:	00c00044 	movi	r3,1
   14eb0:	e0bfff17 	ldw	r2,-4(fp)
   14eb4:	1884983a 	sll	r2,r3,r2
   14eb8:	1007883a 	mov	r3,r2
   14ebc:	e0bffd17 	ldw	r2,-12(fp)
   14ec0:	1884703a 	and	r2,r3,r2
   14ec4:	1004c03a 	cmpne	r2,r2,zero
   14ec8:	10803fcc 	andi	r2,r2,255
}
   14ecc:	e037883a 	mov	sp,fp
   14ed0:	df000017 	ldw	fp,0(sp)
   14ed4:	dec00104 	addi	sp,sp,4
   14ed8:	f800283a 	ret

00014edc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14edc:	defff504 	addi	sp,sp,-44
   14ee0:	dfc00a15 	stw	ra,40(sp)
   14ee4:	df000915 	stw	fp,36(sp)
   14ee8:	df000904 	addi	fp,sp,36
   14eec:	e13ffc15 	stw	r4,-16(fp)
   14ef0:	e17ffd15 	stw	r5,-12(fp)
   14ef4:	e1bffe15 	stw	r6,-8(fp)
   14ef8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14efc:	00bffa84 	movi	r2,-22
   14f00:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14f04:	e0bffd17 	ldw	r2,-12(fp)
   14f08:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14f0c:	e0bff817 	ldw	r2,-32(fp)
   14f10:	10800808 	cmpgei	r2,r2,32
   14f14:	1000271e 	bne	r2,zero,14fb4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f18:	0005303a 	rdctl	r2,status
   14f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f20:	e0fffb17 	ldw	r3,-20(fp)
   14f24:	00bfff84 	movi	r2,-2
   14f28:	1884703a 	and	r2,r3,r2
   14f2c:	1001703a 	wrctl	status,r2
  
  return context;
   14f30:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14f34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14f38:	008000b4 	movhi	r2,2
   14f3c:	10a8b904 	addi	r2,r2,-23836
   14f40:	e0fff817 	ldw	r3,-32(fp)
   14f44:	180690fa 	slli	r3,r3,3
   14f48:	10c5883a 	add	r2,r2,r3
   14f4c:	e0fffe17 	ldw	r3,-8(fp)
   14f50:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14f54:	008000b4 	movhi	r2,2
   14f58:	10a8b904 	addi	r2,r2,-23836
   14f5c:	e0fff817 	ldw	r3,-32(fp)
   14f60:	180690fa 	slli	r3,r3,3
   14f64:	10c5883a 	add	r2,r2,r3
   14f68:	10800104 	addi	r2,r2,4
   14f6c:	e0ffff17 	ldw	r3,-4(fp)
   14f70:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14f74:	e0bffe17 	ldw	r2,-8(fp)
   14f78:	10000526 	beq	r2,zero,14f90 <alt_iic_isr_register+0xb4>
   14f7c:	e0bff817 	ldw	r2,-32(fp)
   14f80:	100b883a 	mov	r5,r2
   14f84:	e13ffc17 	ldw	r4,-16(fp)
   14f88:	0014d7c0 	call	14d7c <alt_ic_irq_enable>
   14f8c:	00000406 	br	14fa0 <alt_iic_isr_register+0xc4>
   14f90:	e0bff817 	ldw	r2,-32(fp)
   14f94:	100b883a 	mov	r5,r2
   14f98:	e13ffc17 	ldw	r4,-16(fp)
   14f9c:	0014e040 	call	14e04 <alt_ic_irq_disable>
   14fa0:	e0bff715 	stw	r2,-36(fp)
   14fa4:	e0bffa17 	ldw	r2,-24(fp)
   14fa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fac:	e0bff917 	ldw	r2,-28(fp)
   14fb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14fb4:	e0bff717 	ldw	r2,-36(fp)
}
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14fcc:	defff804 	addi	sp,sp,-32
   14fd0:	dfc00715 	stw	ra,28(sp)
   14fd4:	df000615 	stw	fp,24(sp)
   14fd8:	dc000515 	stw	r16,20(sp)
   14fdc:	df000604 	addi	fp,sp,24
   14fe0:	e13ffb15 	stw	r4,-20(fp)
   14fe4:	e17ffc15 	stw	r5,-16(fp)
   14fe8:	e1bffd15 	stw	r6,-12(fp)
   14fec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   14ff0:	e1bffe17 	ldw	r6,-8(fp)
   14ff4:	e17ffd17 	ldw	r5,-12(fp)
   14ff8:	e13ffc17 	ldw	r4,-16(fp)
   14ffc:	00152540 	call	15254 <open>
   15000:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15004:	e0bffa17 	ldw	r2,-24(fp)
   15008:	10002216 	blt	r2,zero,15094 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1500c:	04000074 	movhi	r16,1
   15010:	841c9204 	addi	r16,r16,29256
   15014:	e0bffa17 	ldw	r2,-24(fp)
   15018:	01400304 	movi	r5,12
   1501c:	1009883a 	mov	r4,r2
   15020:	00053c80 	call	53c8 <__mulsi3>
   15024:	8085883a 	add	r2,r16,r2
   15028:	10c00017 	ldw	r3,0(r2)
   1502c:	e0bffb17 	ldw	r2,-20(fp)
   15030:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15034:	04000074 	movhi	r16,1
   15038:	841c9204 	addi	r16,r16,29256
   1503c:	e0bffa17 	ldw	r2,-24(fp)
   15040:	01400304 	movi	r5,12
   15044:	1009883a 	mov	r4,r2
   15048:	00053c80 	call	53c8 <__mulsi3>
   1504c:	8085883a 	add	r2,r16,r2
   15050:	10800104 	addi	r2,r2,4
   15054:	10c00017 	ldw	r3,0(r2)
   15058:	e0bffb17 	ldw	r2,-20(fp)
   1505c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15060:	04000074 	movhi	r16,1
   15064:	841c9204 	addi	r16,r16,29256
   15068:	e0bffa17 	ldw	r2,-24(fp)
   1506c:	01400304 	movi	r5,12
   15070:	1009883a 	mov	r4,r2
   15074:	00053c80 	call	53c8 <__mulsi3>
   15078:	8085883a 	add	r2,r16,r2
   1507c:	10800204 	addi	r2,r2,8
   15080:	10c00017 	ldw	r3,0(r2)
   15084:	e0bffb17 	ldw	r2,-20(fp)
   15088:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1508c:	e13ffa17 	ldw	r4,-24(fp)
   15090:	0012aa40 	call	12aa4 <alt_release_fd>
  }
} 
   15094:	0001883a 	nop
   15098:	e6ffff04 	addi	sp,fp,-4
   1509c:	dfc00217 	ldw	ra,8(sp)
   150a0:	df000117 	ldw	fp,4(sp)
   150a4:	dc000017 	ldw	r16,0(sp)
   150a8:	dec00304 	addi	sp,sp,12
   150ac:	f800283a 	ret

000150b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   150b0:	defffb04 	addi	sp,sp,-20
   150b4:	dfc00415 	stw	ra,16(sp)
   150b8:	df000315 	stw	fp,12(sp)
   150bc:	df000304 	addi	fp,sp,12
   150c0:	e13ffd15 	stw	r4,-12(fp)
   150c4:	e17ffe15 	stw	r5,-8(fp)
   150c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   150cc:	01c07fc4 	movi	r7,511
   150d0:	01800044 	movi	r6,1
   150d4:	e17ffd17 	ldw	r5,-12(fp)
   150d8:	01000074 	movhi	r4,1
   150dc:	211c9504 	addi	r4,r4,29268
   150e0:	0014fcc0 	call	14fcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   150e4:	01c07fc4 	movi	r7,511
   150e8:	000d883a 	mov	r6,zero
   150ec:	e17ffe17 	ldw	r5,-8(fp)
   150f0:	01000074 	movhi	r4,1
   150f4:	211c9204 	addi	r4,r4,29256
   150f8:	0014fcc0 	call	14fcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   150fc:	01c07fc4 	movi	r7,511
   15100:	01800044 	movi	r6,1
   15104:	e17fff17 	ldw	r5,-4(fp)
   15108:	01000074 	movhi	r4,1
   1510c:	211c9804 	addi	r4,r4,29280
   15110:	0014fcc0 	call	14fcc <alt_open_fd>
}  
   15114:	0001883a 	nop
   15118:	e037883a 	mov	sp,fp
   1511c:	dfc00117 	ldw	ra,4(sp)
   15120:	df000017 	ldw	fp,0(sp)
   15124:	dec00204 	addi	sp,sp,8
   15128:	f800283a 	ret

0001512c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1512c:	defffe04 	addi	sp,sp,-8
   15130:	dfc00115 	stw	ra,4(sp)
   15134:	df000015 	stw	fp,0(sp)
   15138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1513c:	d0a01117 	ldw	r2,-32700(gp)
   15140:	10000326 	beq	r2,zero,15150 <alt_get_errno+0x24>
   15144:	d0a01117 	ldw	r2,-32700(gp)
   15148:	103ee83a 	callr	r2
   1514c:	00000106 	br	15154 <alt_get_errno+0x28>
   15150:	d0a73d04 	addi	r2,gp,-25356
}
   15154:	e037883a 	mov	sp,fp
   15158:	dfc00117 	ldw	ra,4(sp)
   1515c:	df000017 	ldw	fp,0(sp)
   15160:	dec00204 	addi	sp,sp,8
   15164:	f800283a 	ret

00015168 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15168:	defffb04 	addi	sp,sp,-20
   1516c:	dfc00415 	stw	ra,16(sp)
   15170:	df000315 	stw	fp,12(sp)
   15174:	dc000215 	stw	r16,8(sp)
   15178:	df000304 	addi	fp,sp,12
   1517c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15180:	e0bffe17 	ldw	r2,-8(fp)
   15184:	10800217 	ldw	r2,8(r2)
   15188:	10d00034 	orhi	r3,r2,16384
   1518c:	e0bffe17 	ldw	r2,-8(fp)
   15190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15194:	e03ffd15 	stw	zero,-12(fp)
   15198:	00002306 	br	15228 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1519c:	04000074 	movhi	r16,1
   151a0:	841c9204 	addi	r16,r16,29256
   151a4:	e0bffd17 	ldw	r2,-12(fp)
   151a8:	01400304 	movi	r5,12
   151ac:	1009883a 	mov	r4,r2
   151b0:	00053c80 	call	53c8 <__mulsi3>
   151b4:	8085883a 	add	r2,r16,r2
   151b8:	10c00017 	ldw	r3,0(r2)
   151bc:	e0bffe17 	ldw	r2,-8(fp)
   151c0:	10800017 	ldw	r2,0(r2)
   151c4:	1880151e 	bne	r3,r2,1521c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   151c8:	04000074 	movhi	r16,1
   151cc:	841c9204 	addi	r16,r16,29256
   151d0:	e0bffd17 	ldw	r2,-12(fp)
   151d4:	01400304 	movi	r5,12
   151d8:	1009883a 	mov	r4,r2
   151dc:	00053c80 	call	53c8 <__mulsi3>
   151e0:	8085883a 	add	r2,r16,r2
   151e4:	10800204 	addi	r2,r2,8
   151e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   151ec:	10000b0e 	bge	r2,zero,1521c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   151f0:	01400304 	movi	r5,12
   151f4:	e13ffd17 	ldw	r4,-12(fp)
   151f8:	00053c80 	call	53c8 <__mulsi3>
   151fc:	1007883a 	mov	r3,r2
   15200:	00800074 	movhi	r2,1
   15204:	109c9204 	addi	r2,r2,29256
   15208:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1520c:	e0bffe17 	ldw	r2,-8(fp)
   15210:	18800226 	beq	r3,r2,1521c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15214:	00bffcc4 	movi	r2,-13
   15218:	00000806 	br	1523c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1521c:	e0bffd17 	ldw	r2,-12(fp)
   15220:	10800044 	addi	r2,r2,1
   15224:	e0bffd15 	stw	r2,-12(fp)
   15228:	d0a00c17 	ldw	r2,-32720(gp)
   1522c:	1007883a 	mov	r3,r2
   15230:	e0bffd17 	ldw	r2,-12(fp)
   15234:	18bfd92e 	bgeu	r3,r2,1519c <__alt_exception_stack_pointer+0xf801519c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15238:	0005883a 	mov	r2,zero
}
   1523c:	e6ffff04 	addi	sp,fp,-4
   15240:	dfc00217 	ldw	ra,8(sp)
   15244:	df000117 	ldw	fp,4(sp)
   15248:	dc000017 	ldw	r16,0(sp)
   1524c:	dec00304 	addi	sp,sp,12
   15250:	f800283a 	ret

00015254 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15254:	defff604 	addi	sp,sp,-40
   15258:	dfc00915 	stw	ra,36(sp)
   1525c:	df000815 	stw	fp,32(sp)
   15260:	df000804 	addi	fp,sp,32
   15264:	e13ffd15 	stw	r4,-12(fp)
   15268:	e17ffe15 	stw	r5,-8(fp)
   1526c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15270:	00bfffc4 	movi	r2,-1
   15274:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15278:	00bffb44 	movi	r2,-19
   1527c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15280:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15284:	d1600a04 	addi	r5,gp,-32728
   15288:	e13ffd17 	ldw	r4,-12(fp)
   1528c:	00124300 	call	12430 <alt_find_dev>
   15290:	e0bff815 	stw	r2,-32(fp)
   15294:	e0bff817 	ldw	r2,-32(fp)
   15298:	1000051e 	bne	r2,zero,152b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1529c:	e13ffd17 	ldw	r4,-12(fp)
   152a0:	00155780 	call	15578 <alt_find_file>
   152a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   152a8:	00800044 	movi	r2,1
   152ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   152b0:	e0bff817 	ldw	r2,-32(fp)
   152b4:	10002b26 	beq	r2,zero,15364 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   152b8:	e13ff817 	ldw	r4,-32(fp)
   152bc:	00156800 	call	15680 <alt_get_fd>
   152c0:	e0bff915 	stw	r2,-28(fp)
   152c4:	e0bff917 	ldw	r2,-28(fp)
   152c8:	1000030e 	bge	r2,zero,152d8 <open+0x84>
    {
      status = index;
   152cc:	e0bff917 	ldw	r2,-28(fp)
   152d0:	e0bffa15 	stw	r2,-24(fp)
   152d4:	00002506 	br	1536c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   152d8:	01400304 	movi	r5,12
   152dc:	e13ff917 	ldw	r4,-28(fp)
   152e0:	00053c80 	call	53c8 <__mulsi3>
   152e4:	1007883a 	mov	r3,r2
   152e8:	00800074 	movhi	r2,1
   152ec:	109c9204 	addi	r2,r2,29256
   152f0:	1885883a 	add	r2,r3,r2
   152f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   152f8:	e0fffe17 	ldw	r3,-8(fp)
   152fc:	00900034 	movhi	r2,16384
   15300:	10bfffc4 	addi	r2,r2,-1
   15304:	1886703a 	and	r3,r3,r2
   15308:	e0bffc17 	ldw	r2,-16(fp)
   1530c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15310:	e0bffb17 	ldw	r2,-20(fp)
   15314:	1000051e 	bne	r2,zero,1532c <open+0xd8>
   15318:	e13ffc17 	ldw	r4,-16(fp)
   1531c:	00151680 	call	15168 <alt_file_locked>
   15320:	e0bffa15 	stw	r2,-24(fp)
   15324:	e0bffa17 	ldw	r2,-24(fp)
   15328:	10001016 	blt	r2,zero,1536c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1532c:	e0bff817 	ldw	r2,-32(fp)
   15330:	10800317 	ldw	r2,12(r2)
   15334:	10000826 	beq	r2,zero,15358 <open+0x104>
   15338:	e0bff817 	ldw	r2,-32(fp)
   1533c:	10800317 	ldw	r2,12(r2)
   15340:	e1ffff17 	ldw	r7,-4(fp)
   15344:	e1bffe17 	ldw	r6,-8(fp)
   15348:	e17ffd17 	ldw	r5,-12(fp)
   1534c:	e13ffc17 	ldw	r4,-16(fp)
   15350:	103ee83a 	callr	r2
   15354:	00000106 	br	1535c <open+0x108>
   15358:	0005883a 	mov	r2,zero
   1535c:	e0bffa15 	stw	r2,-24(fp)
   15360:	00000206 	br	1536c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15364:	00bffb44 	movi	r2,-19
   15368:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1536c:	e0bffa17 	ldw	r2,-24(fp)
   15370:	1000090e 	bge	r2,zero,15398 <open+0x144>
  {
    alt_release_fd (index);  
   15374:	e13ff917 	ldw	r4,-28(fp)
   15378:	0012aa40 	call	12aa4 <alt_release_fd>
    ALT_ERRNO = -status;
   1537c:	001512c0 	call	1512c <alt_get_errno>
   15380:	1007883a 	mov	r3,r2
   15384:	e0bffa17 	ldw	r2,-24(fp)
   15388:	0085c83a 	sub	r2,zero,r2
   1538c:	18800015 	stw	r2,0(r3)
    return -1;
   15390:	00bfffc4 	movi	r2,-1
   15394:	00000106 	br	1539c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15398:	e0bff917 	ldw	r2,-28(fp)
}
   1539c:	e037883a 	mov	sp,fp
   153a0:	dfc00117 	ldw	ra,4(sp)
   153a4:	df000017 	ldw	fp,0(sp)
   153a8:	dec00204 	addi	sp,sp,8
   153ac:	f800283a 	ret

000153b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   153b0:	defffa04 	addi	sp,sp,-24
   153b4:	df000515 	stw	fp,20(sp)
   153b8:	df000504 	addi	fp,sp,20
   153bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153c0:	0005303a 	rdctl	r2,status
   153c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153c8:	e0fffc17 	ldw	r3,-16(fp)
   153cc:	00bfff84 	movi	r2,-2
   153d0:	1884703a 	and	r2,r3,r2
   153d4:	1001703a 	wrctl	status,r2
  
  return context;
   153d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   153dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   153e0:	e0bfff17 	ldw	r2,-4(fp)
   153e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   153e8:	e0bffd17 	ldw	r2,-12(fp)
   153ec:	10800017 	ldw	r2,0(r2)
   153f0:	e0fffd17 	ldw	r3,-12(fp)
   153f4:	18c00117 	ldw	r3,4(r3)
   153f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   153fc:	e0bffd17 	ldw	r2,-12(fp)
   15400:	10800117 	ldw	r2,4(r2)
   15404:	e0fffd17 	ldw	r3,-12(fp)
   15408:	18c00017 	ldw	r3,0(r3)
   1540c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	e0fffd17 	ldw	r3,-12(fp)
   15418:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1541c:	e0bffd17 	ldw	r2,-12(fp)
   15420:	e0fffd17 	ldw	r3,-12(fp)
   15424:	10c00015 	stw	r3,0(r2)
   15428:	e0bffb17 	ldw	r2,-20(fp)
   1542c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15430:	e0bffe17 	ldw	r2,-8(fp)
   15434:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15438:	0001883a 	nop
   1543c:	e037883a 	mov	sp,fp
   15440:	df000017 	ldw	fp,0(sp)
   15444:	dec00104 	addi	sp,sp,4
   15448:	f800283a 	ret

0001544c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1544c:	defffb04 	addi	sp,sp,-20
   15450:	dfc00415 	stw	ra,16(sp)
   15454:	df000315 	stw	fp,12(sp)
   15458:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1545c:	d0a01317 	ldw	r2,-32692(gp)
   15460:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15464:	d0a74617 	ldw	r2,-25320(gp)
   15468:	10800044 	addi	r2,r2,1
   1546c:	d0a74615 	stw	r2,-25320(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15470:	00002e06 	br	1552c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15474:	e0bffd17 	ldw	r2,-12(fp)
   15478:	10800017 	ldw	r2,0(r2)
   1547c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15480:	e0bffd17 	ldw	r2,-12(fp)
   15484:	10800403 	ldbu	r2,16(r2)
   15488:	10803fcc 	andi	r2,r2,255
   1548c:	10000426 	beq	r2,zero,154a0 <alt_tick+0x54>
   15490:	d0a74617 	ldw	r2,-25320(gp)
   15494:	1000021e 	bne	r2,zero,154a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15498:	e0bffd17 	ldw	r2,-12(fp)
   1549c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   154a0:	e0bffd17 	ldw	r2,-12(fp)
   154a4:	10800217 	ldw	r2,8(r2)
   154a8:	d0e74617 	ldw	r3,-25320(gp)
   154ac:	18801d36 	bltu	r3,r2,15524 <alt_tick+0xd8>
   154b0:	e0bffd17 	ldw	r2,-12(fp)
   154b4:	10800403 	ldbu	r2,16(r2)
   154b8:	10803fcc 	andi	r2,r2,255
   154bc:	1000191e 	bne	r2,zero,15524 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   154c0:	e0bffd17 	ldw	r2,-12(fp)
   154c4:	10800317 	ldw	r2,12(r2)
   154c8:	e0fffd17 	ldw	r3,-12(fp)
   154cc:	18c00517 	ldw	r3,20(r3)
   154d0:	1809883a 	mov	r4,r3
   154d4:	103ee83a 	callr	r2
   154d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   154dc:	e0bfff17 	ldw	r2,-4(fp)
   154e0:	1000031e 	bne	r2,zero,154f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   154e4:	e13ffd17 	ldw	r4,-12(fp)
   154e8:	00153b00 	call	153b0 <alt_alarm_stop>
   154ec:	00000d06 	br	15524 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   154f0:	e0bffd17 	ldw	r2,-12(fp)
   154f4:	10c00217 	ldw	r3,8(r2)
   154f8:	e0bfff17 	ldw	r2,-4(fp)
   154fc:	1887883a 	add	r3,r3,r2
   15500:	e0bffd17 	ldw	r2,-12(fp)
   15504:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15508:	e0bffd17 	ldw	r2,-12(fp)
   1550c:	10c00217 	ldw	r3,8(r2)
   15510:	d0a74617 	ldw	r2,-25320(gp)
   15514:	1880032e 	bgeu	r3,r2,15524 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15518:	e0bffd17 	ldw	r2,-12(fp)
   1551c:	00c00044 	movi	r3,1
   15520:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15524:	e0bffe17 	ldw	r2,-8(fp)
   15528:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1552c:	e0fffd17 	ldw	r3,-12(fp)
   15530:	d0a01304 	addi	r2,gp,-32692
   15534:	18bfcf1e 	bne	r3,r2,15474 <__alt_exception_stack_pointer+0xf8015474>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15538:	0001883a 	nop
}
   1553c:	0001883a 	nop
   15540:	e037883a 	mov	sp,fp
   15544:	dfc00117 	ldw	ra,4(sp)
   15548:	df000017 	ldw	fp,0(sp)
   1554c:	dec00204 	addi	sp,sp,8
   15550:	f800283a 	ret

00015554 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15554:	deffff04 	addi	sp,sp,-4
   15558:	df000015 	stw	fp,0(sp)
   1555c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15560:	000170fa 	wrctl	ienable,zero
}
   15564:	0001883a 	nop
   15568:	e037883a 	mov	sp,fp
   1556c:	df000017 	ldw	fp,0(sp)
   15570:	dec00104 	addi	sp,sp,4
   15574:	f800283a 	ret

00015578 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15578:	defffb04 	addi	sp,sp,-20
   1557c:	dfc00415 	stw	ra,16(sp)
   15580:	df000315 	stw	fp,12(sp)
   15584:	df000304 	addi	fp,sp,12
   15588:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1558c:	d0a00817 	ldw	r2,-32736(gp)
   15590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15594:	00003106 	br	1565c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15598:	e0bffd17 	ldw	r2,-12(fp)
   1559c:	10800217 	ldw	r2,8(r2)
   155a0:	1009883a 	mov	r4,r2
   155a4:	0007b3c0 	call	7b3c <strlen>
   155a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   155ac:	e0bffd17 	ldw	r2,-12(fp)
   155b0:	10c00217 	ldw	r3,8(r2)
   155b4:	e0bffe17 	ldw	r2,-8(fp)
   155b8:	10bfffc4 	addi	r2,r2,-1
   155bc:	1885883a 	add	r2,r3,r2
   155c0:	10800003 	ldbu	r2,0(r2)
   155c4:	10803fcc 	andi	r2,r2,255
   155c8:	1080201c 	xori	r2,r2,128
   155cc:	10bfe004 	addi	r2,r2,-128
   155d0:	10800bd8 	cmpnei	r2,r2,47
   155d4:	1000031e 	bne	r2,zero,155e4 <alt_find_file+0x6c>
    {
      len -= 1;
   155d8:	e0bffe17 	ldw	r2,-8(fp)
   155dc:	10bfffc4 	addi	r2,r2,-1
   155e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   155e4:	e0bffe17 	ldw	r2,-8(fp)
   155e8:	e0ffff17 	ldw	r3,-4(fp)
   155ec:	1885883a 	add	r2,r3,r2
   155f0:	10800003 	ldbu	r2,0(r2)
   155f4:	10803fcc 	andi	r2,r2,255
   155f8:	1080201c 	xori	r2,r2,128
   155fc:	10bfe004 	addi	r2,r2,-128
   15600:	10800be0 	cmpeqi	r2,r2,47
   15604:	1000081e 	bne	r2,zero,15628 <alt_find_file+0xb0>
   15608:	e0bffe17 	ldw	r2,-8(fp)
   1560c:	e0ffff17 	ldw	r3,-4(fp)
   15610:	1885883a 	add	r2,r3,r2
   15614:	10800003 	ldbu	r2,0(r2)
   15618:	10803fcc 	andi	r2,r2,255
   1561c:	1080201c 	xori	r2,r2,128
   15620:	10bfe004 	addi	r2,r2,-128
   15624:	10000a1e 	bne	r2,zero,15650 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15628:	e0bffd17 	ldw	r2,-12(fp)
   1562c:	10800217 	ldw	r2,8(r2)
   15630:	e0fffe17 	ldw	r3,-8(fp)
   15634:	180d883a 	mov	r6,r3
   15638:	e17fff17 	ldw	r5,-4(fp)
   1563c:	1009883a 	mov	r4,r2
   15640:	001582c0 	call	1582c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15644:	1000021e 	bne	r2,zero,15650 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15648:	e0bffd17 	ldw	r2,-12(fp)
   1564c:	00000706 	br	1566c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15650:	e0bffd17 	ldw	r2,-12(fp)
   15654:	10800017 	ldw	r2,0(r2)
   15658:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1565c:	e0fffd17 	ldw	r3,-12(fp)
   15660:	d0a00804 	addi	r2,gp,-32736
   15664:	18bfcc1e 	bne	r3,r2,15598 <__alt_exception_stack_pointer+0xf8015598>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15668:	0005883a 	mov	r2,zero
}
   1566c:	e037883a 	mov	sp,fp
   15670:	dfc00117 	ldw	ra,4(sp)
   15674:	df000017 	ldw	fp,0(sp)
   15678:	dec00204 	addi	sp,sp,8
   1567c:	f800283a 	ret

00015680 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15680:	defffa04 	addi	sp,sp,-24
   15684:	dfc00515 	stw	ra,20(sp)
   15688:	df000415 	stw	fp,16(sp)
   1568c:	dc000315 	stw	r16,12(sp)
   15690:	df000404 	addi	fp,sp,16
   15694:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15698:	00bffa04 	movi	r2,-24
   1569c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   156a0:	e03ffc15 	stw	zero,-16(fp)
   156a4:	00001d06 	br	1571c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   156a8:	04000074 	movhi	r16,1
   156ac:	841c9204 	addi	r16,r16,29256
   156b0:	e0bffc17 	ldw	r2,-16(fp)
   156b4:	01400304 	movi	r5,12
   156b8:	1009883a 	mov	r4,r2
   156bc:	00053c80 	call	53c8 <__mulsi3>
   156c0:	8085883a 	add	r2,r16,r2
   156c4:	10800017 	ldw	r2,0(r2)
   156c8:	1000111e 	bne	r2,zero,15710 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   156cc:	04000074 	movhi	r16,1
   156d0:	841c9204 	addi	r16,r16,29256
   156d4:	e0bffc17 	ldw	r2,-16(fp)
   156d8:	01400304 	movi	r5,12
   156dc:	1009883a 	mov	r4,r2
   156e0:	00053c80 	call	53c8 <__mulsi3>
   156e4:	8085883a 	add	r2,r16,r2
   156e8:	e0fffe17 	ldw	r3,-8(fp)
   156ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   156f0:	d0e00c17 	ldw	r3,-32720(gp)
   156f4:	e0bffc17 	ldw	r2,-16(fp)
   156f8:	1880020e 	bge	r3,r2,15704 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   156fc:	e0bffc17 	ldw	r2,-16(fp)
   15700:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   15704:	e0bffc17 	ldw	r2,-16(fp)
   15708:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1570c:	00000606 	br	15728 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15710:	e0bffc17 	ldw	r2,-16(fp)
   15714:	10800044 	addi	r2,r2,1
   15718:	e0bffc15 	stw	r2,-16(fp)
   1571c:	e0bffc17 	ldw	r2,-16(fp)
   15720:	10800810 	cmplti	r2,r2,32
   15724:	103fe01e 	bne	r2,zero,156a8 <__alt_exception_stack_pointer+0xf80156a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15728:	e0bffd17 	ldw	r2,-12(fp)
}
   1572c:	e6ffff04 	addi	sp,fp,-4
   15730:	dfc00217 	ldw	ra,8(sp)
   15734:	df000117 	ldw	fp,4(sp)
   15738:	dc000017 	ldw	r16,0(sp)
   1573c:	dec00304 	addi	sp,sp,12
   15740:	f800283a 	ret

00015744 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15744:	defffe04 	addi	sp,sp,-8
   15748:	df000115 	stw	fp,4(sp)
   1574c:	df000104 	addi	fp,sp,4
   15750:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15754:	e0bfff17 	ldw	r2,-4(fp)
   15758:	10bffe84 	addi	r2,r2,-6
   1575c:	10c00428 	cmpgeui	r3,r2,16
   15760:	18001a1e 	bne	r3,zero,157cc <alt_exception_cause_generated_bad_addr+0x88>
   15764:	100690ba 	slli	r3,r2,2
   15768:	00800074 	movhi	r2,1
   1576c:	1095df04 	addi	r2,r2,22396
   15770:	1885883a 	add	r2,r3,r2
   15774:	10800017 	ldw	r2,0(r2)
   15778:	1000683a 	jmp	r2
   1577c:	000157bc 	xorhi	zero,zero,1374
   15780:	000157bc 	xorhi	zero,zero,1374
   15784:	000157cc 	andi	zero,zero,1375
   15788:	000157cc 	andi	zero,zero,1375
   1578c:	000157cc 	andi	zero,zero,1375
   15790:	000157bc 	xorhi	zero,zero,1374
   15794:	000157c4 	movi	zero,1375
   15798:	000157cc 	andi	zero,zero,1375
   1579c:	000157bc 	xorhi	zero,zero,1374
   157a0:	000157bc 	xorhi	zero,zero,1374
   157a4:	000157cc 	andi	zero,zero,1375
   157a8:	000157bc 	xorhi	zero,zero,1374
   157ac:	000157c4 	movi	zero,1375
   157b0:	000157cc 	andi	zero,zero,1375
   157b4:	000157cc 	andi	zero,zero,1375
   157b8:	000157bc 	xorhi	zero,zero,1374
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   157bc:	00800044 	movi	r2,1
   157c0:	00000306 	br	157d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   157c4:	0005883a 	mov	r2,zero
   157c8:	00000106 	br	157d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   157cc:	0005883a 	mov	r2,zero
  }
}
   157d0:	e037883a 	mov	sp,fp
   157d4:	df000017 	ldw	fp,0(sp)
   157d8:	dec00104 	addi	sp,sp,4
   157dc:	f800283a 	ret

000157e0 <atexit>:
   157e0:	200b883a 	mov	r5,r4
   157e4:	000f883a 	mov	r7,zero
   157e8:	000d883a 	mov	r6,zero
   157ec:	0009883a 	mov	r4,zero
   157f0:	00158a81 	jmpi	158a8 <__register_exitproc>

000157f4 <exit>:
   157f4:	defffe04 	addi	sp,sp,-8
   157f8:	000b883a 	mov	r5,zero
   157fc:	dc000015 	stw	r16,0(sp)
   15800:	dfc00115 	stw	ra,4(sp)
   15804:	2021883a 	mov	r16,r4
   15808:	00159c00 	call	159c0 <__call_exitprocs>
   1580c:	008000b4 	movhi	r2,2
   15810:	10a16904 	addi	r2,r2,-31324
   15814:	11000017 	ldw	r4,0(r2)
   15818:	20800f17 	ldw	r2,60(r4)
   1581c:	10000126 	beq	r2,zero,15824 <exit+0x30>
   15820:	103ee83a 	callr	r2
   15824:	8009883a 	mov	r4,r16
   15828:	0015b400 	call	15b40 <_exit>

0001582c <memcmp>:
   1582c:	01c000c4 	movi	r7,3
   15830:	3980192e 	bgeu	r7,r6,15898 <memcmp+0x6c>
   15834:	2144b03a 	or	r2,r4,r5
   15838:	11c4703a 	and	r2,r2,r7
   1583c:	10000f26 	beq	r2,zero,1587c <memcmp+0x50>
   15840:	20800003 	ldbu	r2,0(r4)
   15844:	28c00003 	ldbu	r3,0(r5)
   15848:	10c0151e 	bne	r2,r3,158a0 <memcmp+0x74>
   1584c:	31bfff84 	addi	r6,r6,-2
   15850:	01ffffc4 	movi	r7,-1
   15854:	00000406 	br	15868 <memcmp+0x3c>
   15858:	20800003 	ldbu	r2,0(r4)
   1585c:	28c00003 	ldbu	r3,0(r5)
   15860:	31bfffc4 	addi	r6,r6,-1
   15864:	10c00e1e 	bne	r2,r3,158a0 <memcmp+0x74>
   15868:	21000044 	addi	r4,r4,1
   1586c:	29400044 	addi	r5,r5,1
   15870:	31fff91e 	bne	r6,r7,15858 <__alt_exception_stack_pointer+0xf8015858>
   15874:	0005883a 	mov	r2,zero
   15878:	f800283a 	ret
   1587c:	20c00017 	ldw	r3,0(r4)
   15880:	28800017 	ldw	r2,0(r5)
   15884:	18bfee1e 	bne	r3,r2,15840 <__alt_exception_stack_pointer+0xf8015840>
   15888:	31bfff04 	addi	r6,r6,-4
   1588c:	21000104 	addi	r4,r4,4
   15890:	29400104 	addi	r5,r5,4
   15894:	39bff936 	bltu	r7,r6,1587c <__alt_exception_stack_pointer+0xf801587c>
   15898:	303fe91e 	bne	r6,zero,15840 <__alt_exception_stack_pointer+0xf8015840>
   1589c:	003ff506 	br	15874 <__alt_exception_stack_pointer+0xf8015874>
   158a0:	10c5c83a 	sub	r2,r2,r3
   158a4:	f800283a 	ret

000158a8 <__register_exitproc>:
   158a8:	defffa04 	addi	sp,sp,-24
   158ac:	dc000315 	stw	r16,12(sp)
   158b0:	040000b4 	movhi	r16,2
   158b4:	84216904 	addi	r16,r16,-31324
   158b8:	80c00017 	ldw	r3,0(r16)
   158bc:	dc400415 	stw	r17,16(sp)
   158c0:	dfc00515 	stw	ra,20(sp)
   158c4:	18805217 	ldw	r2,328(r3)
   158c8:	2023883a 	mov	r17,r4
   158cc:	10003726 	beq	r2,zero,159ac <__register_exitproc+0x104>
   158d0:	10c00117 	ldw	r3,4(r2)
   158d4:	010007c4 	movi	r4,31
   158d8:	20c00e16 	blt	r4,r3,15914 <__register_exitproc+0x6c>
   158dc:	1a000044 	addi	r8,r3,1
   158e0:	8800221e 	bne	r17,zero,1596c <__register_exitproc+0xc4>
   158e4:	18c00084 	addi	r3,r3,2
   158e8:	18c7883a 	add	r3,r3,r3
   158ec:	18c7883a 	add	r3,r3,r3
   158f0:	12000115 	stw	r8,4(r2)
   158f4:	10c7883a 	add	r3,r2,r3
   158f8:	19400015 	stw	r5,0(r3)
   158fc:	0005883a 	mov	r2,zero
   15900:	dfc00517 	ldw	ra,20(sp)
   15904:	dc400417 	ldw	r17,16(sp)
   15908:	dc000317 	ldw	r16,12(sp)
   1590c:	dec00604 	addi	sp,sp,24
   15910:	f800283a 	ret
   15914:	00800034 	movhi	r2,0
   15918:	109c5d04 	addi	r2,r2,29044
   1591c:	10002626 	beq	r2,zero,159b8 <__register_exitproc+0x110>
   15920:	01006404 	movi	r4,400
   15924:	d9400015 	stw	r5,0(sp)
   15928:	d9800115 	stw	r6,4(sp)
   1592c:	d9c00215 	stw	r7,8(sp)
   15930:	00071740 	call	7174 <malloc>
   15934:	d9400017 	ldw	r5,0(sp)
   15938:	d9800117 	ldw	r6,4(sp)
   1593c:	d9c00217 	ldw	r7,8(sp)
   15940:	10001d26 	beq	r2,zero,159b8 <__register_exitproc+0x110>
   15944:	81000017 	ldw	r4,0(r16)
   15948:	10000115 	stw	zero,4(r2)
   1594c:	02000044 	movi	r8,1
   15950:	22405217 	ldw	r9,328(r4)
   15954:	0007883a 	mov	r3,zero
   15958:	12400015 	stw	r9,0(r2)
   1595c:	20805215 	stw	r2,328(r4)
   15960:	10006215 	stw	zero,392(r2)
   15964:	10006315 	stw	zero,396(r2)
   15968:	883fde26 	beq	r17,zero,158e4 <__alt_exception_stack_pointer+0xf80158e4>
   1596c:	18c9883a 	add	r4,r3,r3
   15970:	2109883a 	add	r4,r4,r4
   15974:	1109883a 	add	r4,r2,r4
   15978:	21802215 	stw	r6,136(r4)
   1597c:	01800044 	movi	r6,1
   15980:	12406217 	ldw	r9,392(r2)
   15984:	30cc983a 	sll	r6,r6,r3
   15988:	4992b03a 	or	r9,r9,r6
   1598c:	12406215 	stw	r9,392(r2)
   15990:	21c04215 	stw	r7,264(r4)
   15994:	01000084 	movi	r4,2
   15998:	893fd21e 	bne	r17,r4,158e4 <__alt_exception_stack_pointer+0xf80158e4>
   1599c:	11006317 	ldw	r4,396(r2)
   159a0:	218cb03a 	or	r6,r4,r6
   159a4:	11806315 	stw	r6,396(r2)
   159a8:	003fce06 	br	158e4 <__alt_exception_stack_pointer+0xf80158e4>
   159ac:	18805304 	addi	r2,r3,332
   159b0:	18805215 	stw	r2,328(r3)
   159b4:	003fc606 	br	158d0 <__alt_exception_stack_pointer+0xf80158d0>
   159b8:	00bfffc4 	movi	r2,-1
   159bc:	003fd006 	br	15900 <__alt_exception_stack_pointer+0xf8015900>

000159c0 <__call_exitprocs>:
   159c0:	defff504 	addi	sp,sp,-44
   159c4:	df000915 	stw	fp,36(sp)
   159c8:	dd400615 	stw	r21,24(sp)
   159cc:	dc800315 	stw	r18,12(sp)
   159d0:	dfc00a15 	stw	ra,40(sp)
   159d4:	ddc00815 	stw	r23,32(sp)
   159d8:	dd800715 	stw	r22,28(sp)
   159dc:	dd000515 	stw	r20,20(sp)
   159e0:	dcc00415 	stw	r19,16(sp)
   159e4:	dc400215 	stw	r17,8(sp)
   159e8:	dc000115 	stw	r16,4(sp)
   159ec:	d9000015 	stw	r4,0(sp)
   159f0:	2839883a 	mov	fp,r5
   159f4:	04800044 	movi	r18,1
   159f8:	057fffc4 	movi	r21,-1
   159fc:	008000b4 	movhi	r2,2
   15a00:	10a16904 	addi	r2,r2,-31324
   15a04:	12000017 	ldw	r8,0(r2)
   15a08:	45005217 	ldw	r20,328(r8)
   15a0c:	44c05204 	addi	r19,r8,328
   15a10:	a0001c26 	beq	r20,zero,15a84 <__call_exitprocs+0xc4>
   15a14:	a0800117 	ldw	r2,4(r20)
   15a18:	15ffffc4 	addi	r23,r2,-1
   15a1c:	b8000d16 	blt	r23,zero,15a54 <__call_exitprocs+0x94>
   15a20:	14000044 	addi	r16,r2,1
   15a24:	8421883a 	add	r16,r16,r16
   15a28:	8421883a 	add	r16,r16,r16
   15a2c:	84402004 	addi	r17,r16,128
   15a30:	a463883a 	add	r17,r20,r17
   15a34:	a421883a 	add	r16,r20,r16
   15a38:	e0001e26 	beq	fp,zero,15ab4 <__call_exitprocs+0xf4>
   15a3c:	80804017 	ldw	r2,256(r16)
   15a40:	e0801c26 	beq	fp,r2,15ab4 <__call_exitprocs+0xf4>
   15a44:	bdffffc4 	addi	r23,r23,-1
   15a48:	843fff04 	addi	r16,r16,-4
   15a4c:	8c7fff04 	addi	r17,r17,-4
   15a50:	bd7ff91e 	bne	r23,r21,15a38 <__alt_exception_stack_pointer+0xf8015a38>
   15a54:	00800034 	movhi	r2,0
   15a58:	109c6204 	addi	r2,r2,29064
   15a5c:	10000926 	beq	r2,zero,15a84 <__call_exitprocs+0xc4>
   15a60:	a0800117 	ldw	r2,4(r20)
   15a64:	1000301e 	bne	r2,zero,15b28 <__call_exitprocs+0x168>
   15a68:	a0800017 	ldw	r2,0(r20)
   15a6c:	10003226 	beq	r2,zero,15b38 <__call_exitprocs+0x178>
   15a70:	a009883a 	mov	r4,r20
   15a74:	98800015 	stw	r2,0(r19)
   15a78:	00071880 	call	7188 <free>
   15a7c:	9d000017 	ldw	r20,0(r19)
   15a80:	a03fe41e 	bne	r20,zero,15a14 <__alt_exception_stack_pointer+0xf8015a14>
   15a84:	dfc00a17 	ldw	ra,40(sp)
   15a88:	df000917 	ldw	fp,36(sp)
   15a8c:	ddc00817 	ldw	r23,32(sp)
   15a90:	dd800717 	ldw	r22,28(sp)
   15a94:	dd400617 	ldw	r21,24(sp)
   15a98:	dd000517 	ldw	r20,20(sp)
   15a9c:	dcc00417 	ldw	r19,16(sp)
   15aa0:	dc800317 	ldw	r18,12(sp)
   15aa4:	dc400217 	ldw	r17,8(sp)
   15aa8:	dc000117 	ldw	r16,4(sp)
   15aac:	dec00b04 	addi	sp,sp,44
   15ab0:	f800283a 	ret
   15ab4:	a0800117 	ldw	r2,4(r20)
   15ab8:	80c00017 	ldw	r3,0(r16)
   15abc:	10bfffc4 	addi	r2,r2,-1
   15ac0:	15c01426 	beq	r2,r23,15b14 <__call_exitprocs+0x154>
   15ac4:	80000015 	stw	zero,0(r16)
   15ac8:	183fde26 	beq	r3,zero,15a44 <__alt_exception_stack_pointer+0xf8015a44>
   15acc:	95c8983a 	sll	r4,r18,r23
   15ad0:	a0806217 	ldw	r2,392(r20)
   15ad4:	a5800117 	ldw	r22,4(r20)
   15ad8:	2084703a 	and	r2,r4,r2
   15adc:	10000b26 	beq	r2,zero,15b0c <__call_exitprocs+0x14c>
   15ae0:	a0806317 	ldw	r2,396(r20)
   15ae4:	2088703a 	and	r4,r4,r2
   15ae8:	20000c1e 	bne	r4,zero,15b1c <__call_exitprocs+0x15c>
   15aec:	89400017 	ldw	r5,0(r17)
   15af0:	d9000017 	ldw	r4,0(sp)
   15af4:	183ee83a 	callr	r3
   15af8:	a0800117 	ldw	r2,4(r20)
   15afc:	15bfbf1e 	bne	r2,r22,159fc <__alt_exception_stack_pointer+0xf80159fc>
   15b00:	98800017 	ldw	r2,0(r19)
   15b04:	153fcf26 	beq	r2,r20,15a44 <__alt_exception_stack_pointer+0xf8015a44>
   15b08:	003fbc06 	br	159fc <__alt_exception_stack_pointer+0xf80159fc>
   15b0c:	183ee83a 	callr	r3
   15b10:	003ff906 	br	15af8 <__alt_exception_stack_pointer+0xf8015af8>
   15b14:	a5c00115 	stw	r23,4(r20)
   15b18:	003feb06 	br	15ac8 <__alt_exception_stack_pointer+0xf8015ac8>
   15b1c:	89000017 	ldw	r4,0(r17)
   15b20:	183ee83a 	callr	r3
   15b24:	003ff406 	br	15af8 <__alt_exception_stack_pointer+0xf8015af8>
   15b28:	a0800017 	ldw	r2,0(r20)
   15b2c:	a027883a 	mov	r19,r20
   15b30:	1029883a 	mov	r20,r2
   15b34:	003fb606 	br	15a10 <__alt_exception_stack_pointer+0xf8015a10>
   15b38:	0005883a 	mov	r2,zero
   15b3c:	003ffb06 	br	15b2c <__alt_exception_stack_pointer+0xf8015b2c>

00015b40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15b40:	defffd04 	addi	sp,sp,-12
   15b44:	df000215 	stw	fp,8(sp)
   15b48:	df000204 	addi	fp,sp,8
   15b4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15b50:	0001883a 	nop
   15b54:	e0bfff17 	ldw	r2,-4(fp)
   15b58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15b5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15b60:	10000226 	beq	r2,zero,15b6c <_exit+0x2c>
    ALT_SIM_FAIL();
   15b64:	002af070 	cmpltui	zero,zero,43969
   15b68:	00000106 	br	15b70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15b6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15b70:	003fff06 	br	15b70 <__alt_exception_stack_pointer+0xf8015b70>
