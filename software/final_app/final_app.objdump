
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fe00 memsz 0x0000fe00 flags r-x
    LOAD off    0x00010e20 vaddr 0x0000fe20 paddr 0x00011910 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00013400 vaddr 0x00013400 paddr 0x00013400 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f8d0  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  0000fb0c  0000fb0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  0000fe20  00011910  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013400  00013400  00013400  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00013560  00013560  00012910  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012910  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb8  00000000  00000000  00012938  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023612  00000000  00000000  000137f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000904c  00000000  00000000  00036e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b4c0  00000000  00000000  0003fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020e4  00000000  00000000  0004b310  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003998  00000000  00000000  0004d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000177ad  00000000  00000000  00050d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006853c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018b8  00000000  00000000  00068550  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cea2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006cea5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ceaa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ceab  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ceac  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0006ceb7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006cebb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0006cec6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0006cecf  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  0006cef7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00058569  00000000  00000000  00071d50  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0000fb0c l    d  .rodata	00000000 .rodata
0000fe20 l    d  .rwdata	00000000 .rwdata
00013400 l    d  .bss	00000000 .bss
00013560 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000fb5a l     O .rodata	00000010 zeroes.4404
000030c4 l     F .text	000000bc __sbprintf
0000fb6a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000032d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004e2c l     F .text	00000008 __fp_unlock
00004e40 l     F .text	0000019c __sinit.part.1
00004fdc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010228 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001066c l     O .rwdata	00000020 lc_ctype_charset
0001064c l     O .rwdata	00000020 lc_message_charset
0001068c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000fb9c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007160 l     F .text	000000fc __sprint_r.part.0
0000fcc0 l     O .rodata	00000010 zeroes.4349
0000879c l     F .text	000000bc __sbprintf
0000fcd0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d36c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d480 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d4ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d5a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d688 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d950 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011904 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dbc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dd00 l     F .text	00000034 alt_dev_reg
0001086c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dff0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e1fc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e834 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ea74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000eed4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f034 l     F .text	0000003c alt_get_errno
0000f070 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013434 g     O .bss	00000004 alt_instruction_exception_handler
00006cc4 g     F .text	00000074 _mprec_log10
00006db0 g     F .text	0000008c __any_on
00009218 g     F .text	00000054 _isatty_r
0000fba8 g     O .rodata	00000028 __mprec_tinytens
0000d88c g     F .text	0000007c alt_main
00013460 g     O .bss	00000100 alt_irq
0000926c g     F .text	00000060 _lseek_r
00011910 g       *ABS*	00000000 __flash_rwdata_start
0000bd44 g     F .text	00000088 .hidden __eqdf2
00013560 g       *ABS*	00000000 __alt_heap_start
00000d3c g     F .text	0000003c printf
00009b44 g     F .text	0000009c _wcrtomb_r
000118d0 g     O .rwdata	00000004 gpu
00006f88 g     F .text	0000005c __sseek
0000518c g     F .text	00000010 __sinit
000099ec g     F .text	00000140 __swbuf_r
00005798 g     F .text	0000007c _setlocale_r
00004fe4 g     F .text	00000078 __sfmoreglue
0000d92c g     F .text	00000024 __malloc_unlock
000092cc g     F .text	0000015c memmove
00005174 g     F .text	00000018 _cleanup
00005d84 g     F .text	000000a8 _Balloc
0000bdcc g     F .text	000000dc .hidden __gtdf2
0000f45c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008cf4 g     F .text	0000005c _fstat_r
0001340c g     O .bss	00000004 errno
00006f04 g     F .text	00000008 __seofread
00013420 g     O .bss	00000004 alt_argv
000198cc g       *ABS*	00000000 _gp
000106ec g     O .rwdata	00000180 alt_fd_list
0000038c g     F .text	00000048 swap_buffers
0000f480 g     F .text	00000090 alt_find_dev
00005b14 g     F .text	00000148 memcpy
00004e34 g     F .text	0000000c _cleanup_r
0000d184 g     F .text	000000dc .hidden __floatsidf
0000efb8 g     F .text	0000007c alt_io_redirect
0000bea8 g     F .text	000000f4 .hidden __ltdf2
0000fb0c g       *ABS*	00000000 __DTOR_END__
0000f6dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00006e3c g     F .text	00000074 __fpclassifyd
00006c20 g     F .text	000000a4 __ratio
00008780 g     F .text	0000001c __vfiprintf_internal
0000e3f4 g     F .text	0000021c altera_avalon_jtag_uart_read
000004d8 g     F .text	00000014 malloc
00000d0c g     F .text	00000030 _printf_r
0000a9e4 g     F .text	00000064 .hidden __udivsi3
0000d5dc g     F .text	000000ac isatty
0000fbf8 g     O .rodata	000000c8 __mprec_tens
00005814 g     F .text	0000000c __locale_charset
00013408 g     O .bss	00000004 __malloc_top_pad
000118e4 g     O .rwdata	00000004 __mb_cur_max
00005844 g     F .text	0000000c _localeconv_r
00008d50 g     F .text	000004c8 __sfvwrite_r
000061b8 g     F .text	0000003c __i2b
00000d78 g     F .text	00000054 _sbrk_r
00009428 g     F .text	00000060 _read_r
000118fc g     O .rwdata	00000004 alt_max_fd
000089e8 g     F .text	000000f0 _fclose_r
00004dfc g     F .text	00000030 fflush
00013404 g     O .bss	00000004 __malloc_max_sbrked_mem
0000aac8 g     F .text	000008ac .hidden __adddf3
000069c8 g     F .text	0000010c __b2d
0000a328 g     F .text	000005c4 .hidden __umoddi3
0000d7b0 g     F .text	000000dc lseek
000118dc g     O .rwdata	00000004 _global_impure_ptr
00009488 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00013560 g       *ABS*	00000000 __bss_end
0000ede4 g     F .text	000000f0 alt_iic_isr_register
0000f354 g     F .text	00000108 alt_tick
00009d2c g     F .text	000005fc .hidden __udivdi3
00008c50 g     F .text	00000024 _fputwc_r
0000fbd0 g     O .rodata	00000028 __mprec_bigtens
00005f9c g     F .text	00000104 __s2b
0000d260 g     F .text	000000a8 .hidden __floatunsidf
00006708 g     F .text	00000060 __mcmp
000051ac g     F .text	00000018 __fp_lock_all
0000ed98 g     F .text	0000004c alt_ic_irq_enabled
0000f2b8 g     F .text	0000009c alt_alarm_stop
00013428 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
000106c4 g     O .rwdata	00000028 alt_dev_null
0000ea54 g     F .text	00000020 alt_dcache_flush_all
000060a0 g     F .text	00000068 __hi0bits
0000d104 g     F .text	00000080 .hidden __fixdfsi
00011910 g       *ABS*	00000000 __ram_rwdata_end
000118f4 g     O .rwdata	00000008 alt_dev_list
0000dc00 g     F .text	00000100 write
0000fe20 g       *ABS*	00000000 __ram_rodata_end
0000d4e8 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bea8 g     F .text	000000f4 .hidden __ledf2
00006480 g     F .text	00000140 __pow5mult
00007274 g     F .text	0000150c ___vfiprintf_internal_r
00013418 g     O .bss	00000004 __nlocale_changed
0000aa48 g     F .text	00000058 .hidden __umodsi3
00013560 g       *ABS*	00000000 end
00000278 g     F .text	000000b0 draw_cube
0000df30 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
0000fb0c g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000e8ac g     F .text	0000007c alt_avalon_timer_sc_init
0000d308 g     F .text	00000064 .hidden __clzsi2
0000e610 g     F .text	00000224 altera_avalon_jtag_uart_write
0000519c g     F .text	00000004 __sfp_lock_acquire
00005a30 g     F .text	000000e4 memchr
00000dcc g     F .text	000022dc ___vfprintf_internal_r
00005300 g     F .text	00000310 _free_r
00005820 g     F .text	00000010 __locale_mb_cur_max
0000f958 g     F .text	00000180 __call_exitprocs
00013414 g     O .bss	00000004 __mlocale_changed
000118d4 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001342c g     O .bss	00000004 _alt_tick_rate
000065c0 g     F .text	00000148 __lshift
00013430 g     O .bss	00000004 _alt_nticks
0000d98c g     F .text	00000104 read
0000dd6c g     F .text	00000060 alt_sys_init
0000f840 g     F .text	00000118 __register_exitproc
000061f4 g     F .text	0000028c __multiply
0000e29c g     F .text	00000068 altera_avalon_jtag_uart_close
0000aaa0 g     F .text	00000028 .hidden __mulsi3
0000fe20 g       *ABS*	00000000 __ram_rwdata_start
0000fb0c g       *ABS*	00000000 __ram_rodata_start
00013438 g     O .bss	00000028 __malloc_current_mallinfo
00006ad4 g     F .text	0000014c __d2b
0000ddcc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f618 g     F .text	000000c4 alt_get_fd
000088b8 g     F .text	00000054 _close_r
0000f7c4 g     F .text	0000007c memcmp
0000de8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013560 g       *ABS*	00000000 __alt_stack_base
0000dedc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003180 g     F .text	00000154 __swsetup_r
0000b374 g     F .text	000009d0 .hidden __divdf3
0000505c g     F .text	00000118 __sfp
00006d38 g     F .text	00000078 __copybits
0000fe20 g     O .rwdata	00000408 __malloc_av_
000051a8 g     F .text	00000004 __sinit_lock_release
0000bf9c g     F .text	0000086c .hidden __muldf3
00006eb0 g     F .text	00000054 __sread
0000f510 g     F .text	00000108 alt_find_file
0000eab0 g     F .text	000000a4 alt_dev_llist_insert
0000d908 g     F .text	00000024 __malloc_lock
0000db14 g     F .text	000000b0 sbrk
00004da0 g     F .text	0000005c _fflush_r
0000890c g     F .text	000000dc _calloc_r
00013400 g       *ABS*	00000000 __bss_start
00005c5c g     F .text	00000128 memset
000003d4 g     F .text	00000104 main
00013424 g     O .bss	00000004 alt_envp
00013400 g     O .bss	00000004 __malloc_max_total_mem
0000de2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b2c g     F .text	00000018 __swbuf
00006fe4 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
00008ad8 g     F .text	00000014 fclose
000034fc g     F .text	00001688 _dtoa_r
00000500 g     F .text	0000080c _malloc_r
00009ca0 g     F .text	00000030 __ascii_wctomb
00011900 g     O .rwdata	00000004 alt_errno
00005610 g     F .text	000000c4 _fwalk
0000a8ec g     F .text	00000084 .hidden __divsi3
000051dc g     F .text	00000124 _malloc_trim_r
0000fb0c g       *ABS*	00000000 __CTOR_END__
00006fec g     F .text	000000dc strcmp
0000fb0c g       *ABS*	00000000 __flash_rodata_start
0000fb0c g       *ABS*	00000000 __DTOR_LIST__
0000bd44 g     F .text	00000088 .hidden __nedf2
0000dd34 g     F .text	00000038 alt_irq_init
0000da90 g     F .text	00000084 alt_release_fd
0000fce0 g     O .rodata	00000100 .hidden __clz_tab
00013410 g     O .bss	00000004 _PathLocale
0000f778 g     F .text	00000014 atexit
00008858 g     F .text	00000060 _write_r
00005850 g     F .text	00000018 setlocale
000118e0 g     O .rwdata	00000004 _impure_ptr
0001341c g     O .bss	00000004 alt_argc
00004b84 g     F .text	0000021c __sflush_r
000118cc g     O .rwdata	00000004 vga_cont
0000ebb4 g     F .text	00000060 _do_dtors
0000583c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006964 g     F .text	00000064 __ulp
000051c4 g     F .text	00000018 __fp_unlock_all
000118ec g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005868 g     F .text	0000000c localeconv
0000ec34 g     F .text	00000050 alt_ic_isr_register
00011910 g       *ABS*	00000000 _edata
00013560 g       *ABS*	00000000 _end
00008aec g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000e304 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000ed0c g     F .text	0000008c alt_ic_irq_disable
00006f0c g     F .text	0000007c __swrite
000118d8 g     O .rwdata	00000004 __malloc_trim_threshold
00005830 g     F .text	0000000c __locale_msgcharset
0000f78c g     F .text	00000038 exit
000056d4 g     F .text	000000c4 _fwalk_reent
00006768 g     F .text	000001fc __mdiff
0000a970 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000051a0 g     F .text	00000004 __sfp_lock_release
0000fad8 g     F .text	00000034 _exit
0000e928 g     F .text	0000012c alt_alarm_start
00005874 g     F .text	000001bc __smakebuf_r
000070c8 g     F .text	00000098 strlen
0000f15c g     F .text	0000015c open
0000bdcc g     F .text	000000dc .hidden __gedf2
000118e8 g     O .rwdata	00000004 __wctomb
0000725c g     F .text	00000018 __sprint_r
0000ec14 g     F .text	00000020 alt_icache_flush_all
0000ec84 g     F .text	00000088 alt_ic_irq_enable
000030a8 g     F .text	0000001c __vfprintf_internal
00009cd0 g     F .text	0000005c _wctomb_r
00000328 g     F .text	00000064 clear_screen
0000c808 g     F .text	000008fc .hidden __subdf3
00006108 g     F .text	000000b0 __lo0bits
00011908 g     O .rwdata	00000008 alt_alarm_list
0000eb54 g     F .text	00000060 _do_ctors
00009be0 g     F .text	000000c0 wcrtomb
0000d3a8 g     F .text	000000d8 close
0000d6f0 g     F .text	00000084 alt_load
00008c74 g     F .text	00000080 fputwc
000004ec g     F .text	00000014 free
000051a4 g     F .text	00000004 __sinit_lock_acquire
00005e54 g     F .text	00000148 __multadd
00005e2c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800074 	movhi	r2,1
 14c:	108d1804 	addi	r2,r2,13408
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800074 	movhi	r2,1
 164:	108d1804 	addi	r2,r2,13408
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6da17 	ldw	r2,-25752(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6da17 	ldw	r2,-25752(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6a63314 	ori	gp,gp,39116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	108d0014 	ori	r2,r2,13312

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18cd5814 	ori	r3,r3,13664

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000d6f00 	call	d6f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000d88c0 	call	d88c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <draw_cube>:
#include <stddef.h>
#include <stdlib.h>
#include "sys/alt_dma.h"
#include "alt_types.h"

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z) {
     278:	defffb04 	addi	sp,sp,-20
     27c:	df000415 	stw	fp,16(sp)
     280:	df000404 	addi	fp,sp,16
     284:	e13ffc15 	stw	r4,-16(fp)
     288:	e17ffd15 	stw	r5,-12(fp)
     28c:	e1bffe15 	stw	r6,-8(fp)
     290:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
     294:	e0bffc17 	ldw	r2,-16(fp)
     298:	00c00044 	movi	r3,1
     29c:	10c00815 	stw	r3,32(r2)
	gpu->scale = scale * (1<<8);
     2a0:	e0bffd17 	ldw	r2,-12(fp)
     2a4:	1006923a 	slli	r3,r2,8
     2a8:	e0bffc17 	ldw	r2,-16(fp)
     2ac:	10c00415 	stw	r3,16(r2)
	gpu->x = x * (1<< 8);
     2b0:	e0bffe17 	ldw	r2,-8(fp)
     2b4:	1006923a 	slli	r3,r2,8
     2b8:	e0bffc17 	ldw	r2,-16(fp)
     2bc:	10c00515 	stw	r3,20(r2)
	gpu->y = y * (1<< 8);
     2c0:	e0bfff17 	ldw	r2,-4(fp)
     2c4:	1006923a 	slli	r3,r2,8
     2c8:	e0bffc17 	ldw	r2,-16(fp)
     2cc:	10c00615 	stw	r3,24(r2)
	gpu->z = z * (1<< 8);
     2d0:	e0800117 	ldw	r2,4(fp)
     2d4:	1006923a 	slli	r3,r2,8
     2d8:	e0bffc17 	ldw	r2,-16(fp)
     2dc:	10c00715 	stw	r3,28(r2)
	gpu->done = 0;
     2e0:	e0bffc17 	ldw	r2,-16(fp)
     2e4:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     2e8:	e0bffc17 	ldw	r2,-16(fp)
     2ec:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     2f0:	e0bffc17 	ldw	r2,-16(fp)
     2f4:	00c00044 	movi	r3,1
     2f8:	10c00115 	stw	r3,4(r2)
	while(gpu->done == 0) {
     2fc:	0001883a 	nop
     300:	e0bffc17 	ldw	r2,-16(fp)
     304:	10800217 	ldw	r2,8(r2)
     308:	103ffd26 	beq	r2,zero,300 <__alt_exception_stack_pointer+0xf8000300>

	}
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10000815 	stw	zero,32(r2)

}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <clear_screen>:

void clear_screen(volatile gpu_core_t* gpu) {
     328:	defffe04 	addi	sp,sp,-8
     32c:	df000115 	stw	fp,4(sp)
     330:	df000104 	addi	fp,sp,4
     334:	e13fff15 	stw	r4,-4(fp)
	gpu->mode = GPU_MODE_CLEAR;
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	00c00084 	movi	r3,2
     340:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     34c:	e0bfff17 	ldw	r2,-4(fp)
     350:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     354:	e0bfff17 	ldw	r2,-4(fp)
     358:	00c00044 	movi	r3,1
     35c:	10c00115 	stw	r3,4(r2)
	//printf("start clear");
	while(gpu->done == 0) {
     360:	0001883a 	nop
     364:	e0bfff17 	ldw	r2,-4(fp)
     368:	10800217 	ldw	r2,8(r2)
     36c:	103ffd26 	beq	r2,zero,364 <__alt_exception_stack_pointer+0xf8000364>

	}
	//printf("end clear");
	//gpu->done = 0;
	gpu->mode = GPU_MODE_IDLE;
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	10000815 	stw	zero,32(r2)
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00104 	addi	sp,sp,4
     388:	f800283a 	ret

0000038c <swap_buffers>:


volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
volatile struct gpu_core_t* gpu = GPU_CORE_0_BASE;

void swap_buffers() {
     38c:	defffe04 	addi	sp,sp,-8
     390:	df000115 	stw	fp,4(sp)
     394:	df000104 	addi	fp,sp,4
	volatile frame_buffer_t* temp = vga_cont->frame_pointer;
     398:	d0a00017 	ldw	r2,-32768(gp)
     39c:	10800017 	ldw	r2,0(r2)
     3a0:	e0bfff15 	stw	r2,-4(fp)
	vga_cont->frame_pointer = gpu->frame_pointer;
     3a4:	d0a00017 	ldw	r2,-32768(gp)
     3a8:	d0e00117 	ldw	r3,-32764(gp)
     3ac:	18c00017 	ldw	r3,0(r3)
     3b0:	10c00015 	stw	r3,0(r2)
	gpu->frame_pointer = temp;
     3b4:	d0a00117 	ldw	r2,-32764(gp)
     3b8:	e0ffff17 	ldw	r3,-4(fp)
     3bc:	10c00015 	stw	r3,0(r2)
}
     3c0:	0001883a 	nop
     3c4:	e037883a 	mov	sp,fp
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00104 	addi	sp,sp,4
     3d0:	f800283a 	ret

000003d4 <main>:


int main()
{
     3d4:	defff904 	addi	sp,sp,-28
     3d8:	dfc00615 	stw	ra,24(sp)
     3dc:	df000515 	stw	fp,20(sp)
     3e0:	df000504 	addi	fp,sp,20

	printf("Starting up");
     3e4:	01000074 	movhi	r4,1
     3e8:	213ec304 	addi	r4,r4,-1268
     3ec:	0000d3c0 	call	d3c <printf>

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
     3f0:	010004f4 	movhi	r4,19
     3f4:	21300004 	addi	r4,r4,-16384
     3f8:	00004d80 	call	4d8 <malloc>
     3fc:	e0bffd15 	stw	r2,-12(fp)
	union frame_buffer_t* frame2 =  malloc(sizeof(frame_buffer_t));
     400:	010004f4 	movhi	r4,19
     404:	21300004 	addi	r4,r4,-16384
     408:	00004d80 	call	4d8 <malloc>
     40c:	e0bffe15 	stw	r2,-8(fp)

	gpu->frame_pointer = frame2;
     410:	d0a00117 	ldw	r2,-32764(gp)
     414:	e0fffe17 	ldw	r3,-8(fp)
     418:	10c00015 	stw	r3,0(r2)
	vga_cont->frame_pointer = frame1;
     41c:	d0a00017 	ldw	r2,-32768(gp)
     420:	e0fffd17 	ldw	r3,-12(fp)
     424:	10c00015 	stw	r3,0(r2)
	int depth = 70;
     428:	00801184 	movi	r2,70
     42c:	e0bfff15 	stw	r2,-4(fp)
	int x = 0;
     430:	e03ffc15 	stw	zero,-16(fp)
	while(1) {
		clear_screen(gpu);
     434:	d0a00117 	ldw	r2,-32764(gp)
     438:	1009883a 	mov	r4,r2
     43c:	00003280 	call	328 <clear_screen>

		draw_cube(gpu, 16, 15+x, 20, -depth);
     440:	d0e00117 	ldw	r3,-32764(gp)
     444:	e0bffc17 	ldw	r2,-16(fp)
     448:	110003c4 	addi	r4,r2,15
     44c:	e0bfff17 	ldw	r2,-4(fp)
     450:	0085c83a 	sub	r2,zero,r2
     454:	d8800015 	stw	r2,0(sp)
     458:	01c00504 	movi	r7,20
     45c:	200d883a 	mov	r6,r4
     460:	01400404 	movi	r5,16
     464:	1809883a 	mov	r4,r3
     468:	00002780 	call	278 <draw_cube>
		draw_cube(gpu, 12, -35+x, 30, -depth);
     46c:	d0e00117 	ldw	r3,-32764(gp)
     470:	e0bffc17 	ldw	r2,-16(fp)
     474:	113ff744 	addi	r4,r2,-35
     478:	e0bfff17 	ldw	r2,-4(fp)
     47c:	0085c83a 	sub	r2,zero,r2
     480:	d8800015 	stw	r2,0(sp)
     484:	01c00784 	movi	r7,30
     488:	200d883a 	mov	r6,r4
     48c:	01400304 	movi	r5,12
     490:	1809883a 	mov	r4,r3
     494:	00002780 	call	278 <draw_cube>
		draw_cube(gpu, 25, -25+x, -20, -depth);
     498:	d0e00117 	ldw	r3,-32764(gp)
     49c:	e0bffc17 	ldw	r2,-16(fp)
     4a0:	113ff9c4 	addi	r4,r2,-25
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	0085c83a 	sub	r2,zero,r2
     4ac:	d8800015 	stw	r2,0(sp)
     4b0:	01fffb04 	movi	r7,-20
     4b4:	200d883a 	mov	r6,r4
     4b8:	01400644 	movi	r5,25
     4bc:	1809883a 	mov	r4,r3
     4c0:	00002780 	call	278 <draw_cube>
		//usleep(10);
		//printf("swaping");
		swap_buffers();
     4c4:	000038c0 	call	38c <swap_buffers>
		//usleep(100);
		//timer += clock();
		//if(timer > 10) {
		//	x -= 1;
		//}
		x += 1;
     4c8:	e0bffc17 	ldw	r2,-16(fp)
     4cc:	10800044 	addi	r2,r2,1
     4d0:	e0bffc15 	stw	r2,-16(fp)

	}
     4d4:	003fd706 	br	434 <__alt_exception_stack_pointer+0xf8000434>

000004d8 <malloc>:
     4d8:	00800074 	movhi	r2,1
     4dc:	10863804 	addi	r2,r2,6368
     4e0:	200b883a 	mov	r5,r4
     4e4:	11000017 	ldw	r4,0(r2)
     4e8:	00005001 	jmpi	500 <_malloc_r>

000004ec <free>:
     4ec:	00800074 	movhi	r2,1
     4f0:	10863804 	addi	r2,r2,6368
     4f4:	200b883a 	mov	r5,r4
     4f8:	11000017 	ldw	r4,0(r2)
     4fc:	00053001 	jmpi	5300 <_free_r>

00000500 <_malloc_r>:
     500:	defff504 	addi	sp,sp,-44
     504:	dc800315 	stw	r18,12(sp)
     508:	dfc00a15 	stw	ra,40(sp)
     50c:	df000915 	stw	fp,36(sp)
     510:	ddc00815 	stw	r23,32(sp)
     514:	dd800715 	stw	r22,28(sp)
     518:	dd400615 	stw	r21,24(sp)
     51c:	dd000515 	stw	r20,20(sp)
     520:	dcc00415 	stw	r19,16(sp)
     524:	dc400215 	stw	r17,8(sp)
     528:	dc000115 	stw	r16,4(sp)
     52c:	288002c4 	addi	r2,r5,11
     530:	00c00584 	movi	r3,22
     534:	2025883a 	mov	r18,r4
     538:	18807f2e 	bgeu	r3,r2,738 <_malloc_r+0x238>
     53c:	047ffe04 	movi	r17,-8
     540:	1462703a 	and	r17,r2,r17
     544:	8800a316 	blt	r17,zero,7d4 <_malloc_r+0x2d4>
     548:	8940a236 	bltu	r17,r5,7d4 <_malloc_r+0x2d4>
     54c:	000d9080 	call	d908 <__malloc_lock>
     550:	00807dc4 	movi	r2,503
     554:	1441e92e 	bgeu	r2,r17,cfc <_malloc_r+0x7fc>
     558:	8804d27a 	srli	r2,r17,9
     55c:	1000a126 	beq	r2,zero,7e4 <_malloc_r+0x2e4>
     560:	00c00104 	movi	r3,4
     564:	18811e36 	bltu	r3,r2,9e0 <_malloc_r+0x4e0>
     568:	8804d1ba 	srli	r2,r17,6
     56c:	12000e44 	addi	r8,r2,57
     570:	11c00e04 	addi	r7,r2,56
     574:	4209883a 	add	r4,r8,r8
     578:	04c00074 	movhi	r19,1
     57c:	2109883a 	add	r4,r4,r4
     580:	9cff8804 	addi	r19,r19,-480
     584:	2109883a 	add	r4,r4,r4
     588:	9909883a 	add	r4,r19,r4
     58c:	24000117 	ldw	r16,4(r4)
     590:	213ffe04 	addi	r4,r4,-8
     594:	24009726 	beq	r4,r16,7f4 <_malloc_r+0x2f4>
     598:	80800117 	ldw	r2,4(r16)
     59c:	01bfff04 	movi	r6,-4
     5a0:	014003c4 	movi	r5,15
     5a4:	1184703a 	and	r2,r2,r6
     5a8:	1447c83a 	sub	r3,r2,r17
     5ac:	28c00716 	blt	r5,r3,5cc <_malloc_r+0xcc>
     5b0:	1800920e 	bge	r3,zero,7fc <_malloc_r+0x2fc>
     5b4:	84000317 	ldw	r16,12(r16)
     5b8:	24008e26 	beq	r4,r16,7f4 <_malloc_r+0x2f4>
     5bc:	80800117 	ldw	r2,4(r16)
     5c0:	1184703a 	and	r2,r2,r6
     5c4:	1447c83a 	sub	r3,r2,r17
     5c8:	28fff90e 	bge	r5,r3,5b0 <__alt_exception_stack_pointer+0xf80005b0>
     5cc:	3809883a 	mov	r4,r7
     5d0:	01800074 	movhi	r6,1
     5d4:	9c000417 	ldw	r16,16(r19)
     5d8:	31bf8804 	addi	r6,r6,-480
     5dc:	32000204 	addi	r8,r6,8
     5e0:	82013426 	beq	r16,r8,ab4 <_malloc_r+0x5b4>
     5e4:	80c00117 	ldw	r3,4(r16)
     5e8:	00bfff04 	movi	r2,-4
     5ec:	188e703a 	and	r7,r3,r2
     5f0:	3c45c83a 	sub	r2,r7,r17
     5f4:	00c003c4 	movi	r3,15
     5f8:	18811f16 	blt	r3,r2,a78 <_malloc_r+0x578>
     5fc:	32000515 	stw	r8,20(r6)
     600:	32000415 	stw	r8,16(r6)
     604:	10007f0e 	bge	r2,zero,804 <_malloc_r+0x304>
     608:	00807fc4 	movi	r2,511
     60c:	11c0fd36 	bltu	r2,r7,a04 <_malloc_r+0x504>
     610:	3806d0fa 	srli	r3,r7,3
     614:	01c00044 	movi	r7,1
     618:	30800117 	ldw	r2,4(r6)
     61c:	19400044 	addi	r5,r3,1
     620:	294b883a 	add	r5,r5,r5
     624:	1807d0ba 	srai	r3,r3,2
     628:	294b883a 	add	r5,r5,r5
     62c:	294b883a 	add	r5,r5,r5
     630:	298b883a 	add	r5,r5,r6
     634:	38c6983a 	sll	r3,r7,r3
     638:	29c00017 	ldw	r7,0(r5)
     63c:	2a7ffe04 	addi	r9,r5,-8
     640:	1886b03a 	or	r3,r3,r2
     644:	82400315 	stw	r9,12(r16)
     648:	81c00215 	stw	r7,8(r16)
     64c:	30c00115 	stw	r3,4(r6)
     650:	2c000015 	stw	r16,0(r5)
     654:	3c000315 	stw	r16,12(r7)
     658:	2005d0ba 	srai	r2,r4,2
     65c:	01400044 	movi	r5,1
     660:	288a983a 	sll	r5,r5,r2
     664:	19406f36 	bltu	r3,r5,824 <_malloc_r+0x324>
     668:	28c4703a 	and	r2,r5,r3
     66c:	10000a1e 	bne	r2,zero,698 <_malloc_r+0x198>
     670:	00bfff04 	movi	r2,-4
     674:	294b883a 	add	r5,r5,r5
     678:	2088703a 	and	r4,r4,r2
     67c:	28c4703a 	and	r2,r5,r3
     680:	21000104 	addi	r4,r4,4
     684:	1000041e 	bne	r2,zero,698 <_malloc_r+0x198>
     688:	294b883a 	add	r5,r5,r5
     68c:	28c4703a 	and	r2,r5,r3
     690:	21000104 	addi	r4,r4,4
     694:	103ffc26 	beq	r2,zero,688 <__alt_exception_stack_pointer+0xf8000688>
     698:	02bfff04 	movi	r10,-4
     69c:	024003c4 	movi	r9,15
     6a0:	21800044 	addi	r6,r4,1
     6a4:	318d883a 	add	r6,r6,r6
     6a8:	318d883a 	add	r6,r6,r6
     6ac:	318d883a 	add	r6,r6,r6
     6b0:	998d883a 	add	r6,r19,r6
     6b4:	333ffe04 	addi	r12,r6,-8
     6b8:	2017883a 	mov	r11,r4
     6bc:	31800104 	addi	r6,r6,4
     6c0:	34000017 	ldw	r16,0(r6)
     6c4:	31fffd04 	addi	r7,r6,-12
     6c8:	81c0041e 	bne	r16,r7,6dc <_malloc_r+0x1dc>
     6cc:	0000fb06 	br	abc <_malloc_r+0x5bc>
     6d0:	1801030e 	bge	r3,zero,ae0 <_malloc_r+0x5e0>
     6d4:	84000317 	ldw	r16,12(r16)
     6d8:	81c0f826 	beq	r16,r7,abc <_malloc_r+0x5bc>
     6dc:	80800117 	ldw	r2,4(r16)
     6e0:	1284703a 	and	r2,r2,r10
     6e4:	1447c83a 	sub	r3,r2,r17
     6e8:	48fff90e 	bge	r9,r3,6d0 <__alt_exception_stack_pointer+0xf80006d0>
     6ec:	80800317 	ldw	r2,12(r16)
     6f0:	81000217 	ldw	r4,8(r16)
     6f4:	89400054 	ori	r5,r17,1
     6f8:	81400115 	stw	r5,4(r16)
     6fc:	20800315 	stw	r2,12(r4)
     700:	11000215 	stw	r4,8(r2)
     704:	8463883a 	add	r17,r16,r17
     708:	9c400515 	stw	r17,20(r19)
     70c:	9c400415 	stw	r17,16(r19)
     710:	18800054 	ori	r2,r3,1
     714:	88800115 	stw	r2,4(r17)
     718:	8a000315 	stw	r8,12(r17)
     71c:	8a000215 	stw	r8,8(r17)
     720:	88e3883a 	add	r17,r17,r3
     724:	88c00015 	stw	r3,0(r17)
     728:	9009883a 	mov	r4,r18
     72c:	000d92c0 	call	d92c <__malloc_unlock>
     730:	80800204 	addi	r2,r16,8
     734:	00001b06 	br	7a4 <_malloc_r+0x2a4>
     738:	04400404 	movi	r17,16
     73c:	89402536 	bltu	r17,r5,7d4 <_malloc_r+0x2d4>
     740:	000d9080 	call	d908 <__malloc_lock>
     744:	00800184 	movi	r2,6
     748:	01000084 	movi	r4,2
     74c:	04c00074 	movhi	r19,1
     750:	1085883a 	add	r2,r2,r2
     754:	9cff8804 	addi	r19,r19,-480
     758:	1085883a 	add	r2,r2,r2
     75c:	9885883a 	add	r2,r19,r2
     760:	14000117 	ldw	r16,4(r2)
     764:	10fffe04 	addi	r3,r2,-8
     768:	80c0d926 	beq	r16,r3,ad0 <_malloc_r+0x5d0>
     76c:	80c00117 	ldw	r3,4(r16)
     770:	81000317 	ldw	r4,12(r16)
     774:	00bfff04 	movi	r2,-4
     778:	1884703a 	and	r2,r3,r2
     77c:	81400217 	ldw	r5,8(r16)
     780:	8085883a 	add	r2,r16,r2
     784:	10c00117 	ldw	r3,4(r2)
     788:	29000315 	stw	r4,12(r5)
     78c:	21400215 	stw	r5,8(r4)
     790:	18c00054 	ori	r3,r3,1
     794:	10c00115 	stw	r3,4(r2)
     798:	9009883a 	mov	r4,r18
     79c:	000d92c0 	call	d92c <__malloc_unlock>
     7a0:	80800204 	addi	r2,r16,8
     7a4:	dfc00a17 	ldw	ra,40(sp)
     7a8:	df000917 	ldw	fp,36(sp)
     7ac:	ddc00817 	ldw	r23,32(sp)
     7b0:	dd800717 	ldw	r22,28(sp)
     7b4:	dd400617 	ldw	r21,24(sp)
     7b8:	dd000517 	ldw	r20,20(sp)
     7bc:	dcc00417 	ldw	r19,16(sp)
     7c0:	dc800317 	ldw	r18,12(sp)
     7c4:	dc400217 	ldw	r17,8(sp)
     7c8:	dc000117 	ldw	r16,4(sp)
     7cc:	dec00b04 	addi	sp,sp,44
     7d0:	f800283a 	ret
     7d4:	00800304 	movi	r2,12
     7d8:	90800015 	stw	r2,0(r18)
     7dc:	0005883a 	mov	r2,zero
     7e0:	003ff006 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     7e4:	01002004 	movi	r4,128
     7e8:	02001004 	movi	r8,64
     7ec:	01c00fc4 	movi	r7,63
     7f0:	003f6106 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     7f4:	4009883a 	mov	r4,r8
     7f8:	003f7506 	br	5d0 <__alt_exception_stack_pointer+0xf80005d0>
     7fc:	81000317 	ldw	r4,12(r16)
     800:	003fde06 	br	77c <__alt_exception_stack_pointer+0xf800077c>
     804:	81c5883a 	add	r2,r16,r7
     808:	11400117 	ldw	r5,4(r2)
     80c:	9009883a 	mov	r4,r18
     810:	29400054 	ori	r5,r5,1
     814:	11400115 	stw	r5,4(r2)
     818:	000d92c0 	call	d92c <__malloc_unlock>
     81c:	80800204 	addi	r2,r16,8
     820:	003fe006 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     824:	9c000217 	ldw	r16,8(r19)
     828:	00bfff04 	movi	r2,-4
     82c:	85800117 	ldw	r22,4(r16)
     830:	b0ac703a 	and	r22,r22,r2
     834:	b4400336 	bltu	r22,r17,844 <_malloc_r+0x344>
     838:	b445c83a 	sub	r2,r22,r17
     83c:	00c003c4 	movi	r3,15
     840:	18805d16 	blt	r3,r2,9b8 <_malloc_r+0x4b8>
     844:	05c00074 	movhi	r23,1
     848:	00800074 	movhi	r2,1
     84c:	108d0204 	addi	r2,r2,13320
     850:	bdc63504 	addi	r23,r23,6356
     854:	15400017 	ldw	r21,0(r2)
     858:	b8c00017 	ldw	r3,0(r23)
     85c:	00bfffc4 	movi	r2,-1
     860:	858d883a 	add	r6,r16,r22
     864:	8d6b883a 	add	r21,r17,r21
     868:	1880ea26 	beq	r3,r2,c14 <_malloc_r+0x714>
     86c:	ad4403c4 	addi	r21,r21,4111
     870:	00bc0004 	movi	r2,-4096
     874:	a8aa703a 	and	r21,r21,r2
     878:	a80b883a 	mov	r5,r21
     87c:	9009883a 	mov	r4,r18
     880:	d9800015 	stw	r6,0(sp)
     884:	0000d780 	call	d78 <_sbrk_r>
     888:	1029883a 	mov	r20,r2
     88c:	00bfffc4 	movi	r2,-1
     890:	d9800017 	ldw	r6,0(sp)
     894:	a080e826 	beq	r20,r2,c38 <_malloc_r+0x738>
     898:	a180a636 	bltu	r20,r6,b34 <_malloc_r+0x634>
     89c:	07000074 	movhi	fp,1
     8a0:	e70d0e04 	addi	fp,fp,13368
     8a4:	e0800017 	ldw	r2,0(fp)
     8a8:	a887883a 	add	r3,r21,r2
     8ac:	e0c00015 	stw	r3,0(fp)
     8b0:	3500e626 	beq	r6,r20,c4c <_malloc_r+0x74c>
     8b4:	b9000017 	ldw	r4,0(r23)
     8b8:	00bfffc4 	movi	r2,-1
     8bc:	2080ee26 	beq	r4,r2,c78 <_malloc_r+0x778>
     8c0:	a185c83a 	sub	r2,r20,r6
     8c4:	10c5883a 	add	r2,r2,r3
     8c8:	e0800015 	stw	r2,0(fp)
     8cc:	a0c001cc 	andi	r3,r20,7
     8d0:	1800bc26 	beq	r3,zero,bc4 <_malloc_r+0x6c4>
     8d4:	a0e9c83a 	sub	r20,r20,r3
     8d8:	00840204 	movi	r2,4104
     8dc:	a5000204 	addi	r20,r20,8
     8e0:	10c7c83a 	sub	r3,r2,r3
     8e4:	a545883a 	add	r2,r20,r21
     8e8:	1083ffcc 	andi	r2,r2,4095
     8ec:	18abc83a 	sub	r21,r3,r2
     8f0:	a80b883a 	mov	r5,r21
     8f4:	9009883a 	mov	r4,r18
     8f8:	0000d780 	call	d78 <_sbrk_r>
     8fc:	00ffffc4 	movi	r3,-1
     900:	10c0e126 	beq	r2,r3,c88 <_malloc_r+0x788>
     904:	1505c83a 	sub	r2,r2,r20
     908:	1545883a 	add	r2,r2,r21
     90c:	10800054 	ori	r2,r2,1
     910:	e0c00017 	ldw	r3,0(fp)
     914:	9d000215 	stw	r20,8(r19)
     918:	a0800115 	stw	r2,4(r20)
     91c:	a8c7883a 	add	r3,r21,r3
     920:	e0c00015 	stw	r3,0(fp)
     924:	84c00e26 	beq	r16,r19,960 <_malloc_r+0x460>
     928:	018003c4 	movi	r6,15
     92c:	3580a72e 	bgeu	r6,r22,bcc <_malloc_r+0x6cc>
     930:	81400117 	ldw	r5,4(r16)
     934:	013ffe04 	movi	r4,-8
     938:	b0bffd04 	addi	r2,r22,-12
     93c:	1104703a 	and	r2,r2,r4
     940:	2900004c 	andi	r4,r5,1
     944:	2088b03a 	or	r4,r4,r2
     948:	81000115 	stw	r4,4(r16)
     94c:	01400144 	movi	r5,5
     950:	8089883a 	add	r4,r16,r2
     954:	21400115 	stw	r5,4(r4)
     958:	21400215 	stw	r5,8(r4)
     95c:	3080cd36 	bltu	r6,r2,c94 <_malloc_r+0x794>
     960:	00800074 	movhi	r2,1
     964:	108d0104 	addi	r2,r2,13316
     968:	11000017 	ldw	r4,0(r2)
     96c:	20c0012e 	bgeu	r4,r3,974 <_malloc_r+0x474>
     970:	10c00015 	stw	r3,0(r2)
     974:	00800074 	movhi	r2,1
     978:	108d0004 	addi	r2,r2,13312
     97c:	11000017 	ldw	r4,0(r2)
     980:	9c000217 	ldw	r16,8(r19)
     984:	20c0012e 	bgeu	r4,r3,98c <_malloc_r+0x48c>
     988:	10c00015 	stw	r3,0(r2)
     98c:	80c00117 	ldw	r3,4(r16)
     990:	00bfff04 	movi	r2,-4
     994:	1886703a 	and	r3,r3,r2
     998:	1c45c83a 	sub	r2,r3,r17
     99c:	1c400236 	bltu	r3,r17,9a8 <_malloc_r+0x4a8>
     9a0:	00c003c4 	movi	r3,15
     9a4:	18800416 	blt	r3,r2,9b8 <_malloc_r+0x4b8>
     9a8:	9009883a 	mov	r4,r18
     9ac:	000d92c0 	call	d92c <__malloc_unlock>
     9b0:	0005883a 	mov	r2,zero
     9b4:	003f7b06 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     9b8:	88c00054 	ori	r3,r17,1
     9bc:	80c00115 	stw	r3,4(r16)
     9c0:	8463883a 	add	r17,r16,r17
     9c4:	10800054 	ori	r2,r2,1
     9c8:	9c400215 	stw	r17,8(r19)
     9cc:	88800115 	stw	r2,4(r17)
     9d0:	9009883a 	mov	r4,r18
     9d4:	000d92c0 	call	d92c <__malloc_unlock>
     9d8:	80800204 	addi	r2,r16,8
     9dc:	003f7106 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     9e0:	00c00504 	movi	r3,20
     9e4:	18804a2e 	bgeu	r3,r2,b10 <_malloc_r+0x610>
     9e8:	00c01504 	movi	r3,84
     9ec:	18806e36 	bltu	r3,r2,ba8 <_malloc_r+0x6a8>
     9f0:	8804d33a 	srli	r2,r17,12
     9f4:	12001bc4 	addi	r8,r2,111
     9f8:	11c01b84 	addi	r7,r2,110
     9fc:	4209883a 	add	r4,r8,r8
     a00:	003edd06 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     a04:	3804d27a 	srli	r2,r7,9
     a08:	00c00104 	movi	r3,4
     a0c:	1880442e 	bgeu	r3,r2,b20 <_malloc_r+0x620>
     a10:	00c00504 	movi	r3,20
     a14:	18808136 	bltu	r3,r2,c1c <_malloc_r+0x71c>
     a18:	11401704 	addi	r5,r2,92
     a1c:	10c016c4 	addi	r3,r2,91
     a20:	294b883a 	add	r5,r5,r5
     a24:	294b883a 	add	r5,r5,r5
     a28:	294b883a 	add	r5,r5,r5
     a2c:	994b883a 	add	r5,r19,r5
     a30:	28800017 	ldw	r2,0(r5)
     a34:	01800074 	movhi	r6,1
     a38:	297ffe04 	addi	r5,r5,-8
     a3c:	31bf8804 	addi	r6,r6,-480
     a40:	28806526 	beq	r5,r2,bd8 <_malloc_r+0x6d8>
     a44:	01bfff04 	movi	r6,-4
     a48:	10c00117 	ldw	r3,4(r2)
     a4c:	1986703a 	and	r3,r3,r6
     a50:	38c0022e 	bgeu	r7,r3,a5c <_malloc_r+0x55c>
     a54:	10800217 	ldw	r2,8(r2)
     a58:	28bffb1e 	bne	r5,r2,a48 <__alt_exception_stack_pointer+0xf8000a48>
     a5c:	11400317 	ldw	r5,12(r2)
     a60:	98c00117 	ldw	r3,4(r19)
     a64:	81400315 	stw	r5,12(r16)
     a68:	80800215 	stw	r2,8(r16)
     a6c:	2c000215 	stw	r16,8(r5)
     a70:	14000315 	stw	r16,12(r2)
     a74:	003ef806 	br	658 <__alt_exception_stack_pointer+0xf8000658>
     a78:	88c00054 	ori	r3,r17,1
     a7c:	80c00115 	stw	r3,4(r16)
     a80:	8463883a 	add	r17,r16,r17
     a84:	34400515 	stw	r17,20(r6)
     a88:	34400415 	stw	r17,16(r6)
     a8c:	10c00054 	ori	r3,r2,1
     a90:	8a000315 	stw	r8,12(r17)
     a94:	8a000215 	stw	r8,8(r17)
     a98:	88c00115 	stw	r3,4(r17)
     a9c:	88a3883a 	add	r17,r17,r2
     aa0:	88800015 	stw	r2,0(r17)
     aa4:	9009883a 	mov	r4,r18
     aa8:	000d92c0 	call	d92c <__malloc_unlock>
     aac:	80800204 	addi	r2,r16,8
     ab0:	003f3c06 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     ab4:	30c00117 	ldw	r3,4(r6)
     ab8:	003ee706 	br	658 <__alt_exception_stack_pointer+0xf8000658>
     abc:	5ac00044 	addi	r11,r11,1
     ac0:	588000cc 	andi	r2,r11,3
     ac4:	31800204 	addi	r6,r6,8
     ac8:	103efd1e 	bne	r2,zero,6c0 <__alt_exception_stack_pointer+0xf80006c0>
     acc:	00002406 	br	b60 <_malloc_r+0x660>
     ad0:	14000317 	ldw	r16,12(r2)
     ad4:	143f251e 	bne	r2,r16,76c <__alt_exception_stack_pointer+0xf800076c>
     ad8:	21000084 	addi	r4,r4,2
     adc:	003ebc06 	br	5d0 <__alt_exception_stack_pointer+0xf80005d0>
     ae0:	8085883a 	add	r2,r16,r2
     ae4:	10c00117 	ldw	r3,4(r2)
     ae8:	81000317 	ldw	r4,12(r16)
     aec:	81400217 	ldw	r5,8(r16)
     af0:	18c00054 	ori	r3,r3,1
     af4:	10c00115 	stw	r3,4(r2)
     af8:	29000315 	stw	r4,12(r5)
     afc:	21400215 	stw	r5,8(r4)
     b00:	9009883a 	mov	r4,r18
     b04:	000d92c0 	call	d92c <__malloc_unlock>
     b08:	80800204 	addi	r2,r16,8
     b0c:	003f2506 	br	7a4 <__alt_exception_stack_pointer+0xf80007a4>
     b10:	12001704 	addi	r8,r2,92
     b14:	11c016c4 	addi	r7,r2,91
     b18:	4209883a 	add	r4,r8,r8
     b1c:	003e9606 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     b20:	3804d1ba 	srli	r2,r7,6
     b24:	11400e44 	addi	r5,r2,57
     b28:	10c00e04 	addi	r3,r2,56
     b2c:	294b883a 	add	r5,r5,r5
     b30:	003fbc06 	br	a24 <__alt_exception_stack_pointer+0xf8000a24>
     b34:	84ff5926 	beq	r16,r19,89c <__alt_exception_stack_pointer+0xf800089c>
     b38:	00800074 	movhi	r2,1
     b3c:	10bf8804 	addi	r2,r2,-480
     b40:	14000217 	ldw	r16,8(r2)
     b44:	00bfff04 	movi	r2,-4
     b48:	80c00117 	ldw	r3,4(r16)
     b4c:	1886703a 	and	r3,r3,r2
     b50:	003f9106 	br	998 <__alt_exception_stack_pointer+0xf8000998>
     b54:	60800217 	ldw	r2,8(r12)
     b58:	213fffc4 	addi	r4,r4,-1
     b5c:	1300651e 	bne	r2,r12,cf4 <_malloc_r+0x7f4>
     b60:	208000cc 	andi	r2,r4,3
     b64:	633ffe04 	addi	r12,r12,-8
     b68:	103ffa1e 	bne	r2,zero,b54 <__alt_exception_stack_pointer+0xf8000b54>
     b6c:	98800117 	ldw	r2,4(r19)
     b70:	0146303a 	nor	r3,zero,r5
     b74:	1884703a 	and	r2,r3,r2
     b78:	98800115 	stw	r2,4(r19)
     b7c:	294b883a 	add	r5,r5,r5
     b80:	117f2836 	bltu	r2,r5,824 <__alt_exception_stack_pointer+0xf8000824>
     b84:	283f2726 	beq	r5,zero,824 <__alt_exception_stack_pointer+0xf8000824>
     b88:	2886703a 	and	r3,r5,r2
     b8c:	5809883a 	mov	r4,r11
     b90:	183ec31e 	bne	r3,zero,6a0 <__alt_exception_stack_pointer+0xf80006a0>
     b94:	294b883a 	add	r5,r5,r5
     b98:	2886703a 	and	r3,r5,r2
     b9c:	21000104 	addi	r4,r4,4
     ba0:	183ffc26 	beq	r3,zero,b94 <__alt_exception_stack_pointer+0xf8000b94>
     ba4:	003ebe06 	br	6a0 <__alt_exception_stack_pointer+0xf80006a0>
     ba8:	00c05504 	movi	r3,340
     bac:	18801236 	bltu	r3,r2,bf8 <_malloc_r+0x6f8>
     bb0:	8804d3fa 	srli	r2,r17,15
     bb4:	12001e04 	addi	r8,r2,120
     bb8:	11c01dc4 	addi	r7,r2,119
     bbc:	4209883a 	add	r4,r8,r8
     bc0:	003e6d06 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     bc4:	00c40004 	movi	r3,4096
     bc8:	003f4606 	br	8e4 <__alt_exception_stack_pointer+0xf80008e4>
     bcc:	00800044 	movi	r2,1
     bd0:	a0800115 	stw	r2,4(r20)
     bd4:	003f7406 	br	9a8 <__alt_exception_stack_pointer+0xf80009a8>
     bd8:	1805d0ba 	srai	r2,r3,2
     bdc:	01c00044 	movi	r7,1
     be0:	30c00117 	ldw	r3,4(r6)
     be4:	388e983a 	sll	r7,r7,r2
     be8:	2805883a 	mov	r2,r5
     bec:	38c6b03a 	or	r3,r7,r3
     bf0:	30c00115 	stw	r3,4(r6)
     bf4:	003f9b06 	br	a64 <__alt_exception_stack_pointer+0xf8000a64>
     bf8:	00c15504 	movi	r3,1364
     bfc:	18801a36 	bltu	r3,r2,c68 <_malloc_r+0x768>
     c00:	8804d4ba 	srli	r2,r17,18
     c04:	12001f44 	addi	r8,r2,125
     c08:	11c01f04 	addi	r7,r2,124
     c0c:	4209883a 	add	r4,r8,r8
     c10:	003e5906 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     c14:	ad400404 	addi	r21,r21,16
     c18:	003f1706 	br	878 <__alt_exception_stack_pointer+0xf8000878>
     c1c:	00c01504 	movi	r3,84
     c20:	18802336 	bltu	r3,r2,cb0 <_malloc_r+0x7b0>
     c24:	3804d33a 	srli	r2,r7,12
     c28:	11401bc4 	addi	r5,r2,111
     c2c:	10c01b84 	addi	r3,r2,110
     c30:	294b883a 	add	r5,r5,r5
     c34:	003f7b06 	br	a24 <__alt_exception_stack_pointer+0xf8000a24>
     c38:	9c000217 	ldw	r16,8(r19)
     c3c:	00bfff04 	movi	r2,-4
     c40:	80c00117 	ldw	r3,4(r16)
     c44:	1886703a 	and	r3,r3,r2
     c48:	003f5306 	br	998 <__alt_exception_stack_pointer+0xf8000998>
     c4c:	3083ffcc 	andi	r2,r6,4095
     c50:	103f181e 	bne	r2,zero,8b4 <__alt_exception_stack_pointer+0xf80008b4>
     c54:	99000217 	ldw	r4,8(r19)
     c58:	b545883a 	add	r2,r22,r21
     c5c:	10800054 	ori	r2,r2,1
     c60:	20800115 	stw	r2,4(r4)
     c64:	003f3e06 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     c68:	01003f84 	movi	r4,254
     c6c:	02001fc4 	movi	r8,127
     c70:	01c01f84 	movi	r7,126
     c74:	003e4006 	br	578 <__alt_exception_stack_pointer+0xf8000578>
     c78:	00800074 	movhi	r2,1
     c7c:	10863504 	addi	r2,r2,6356
     c80:	15000015 	stw	r20,0(r2)
     c84:	003f1106 	br	8cc <__alt_exception_stack_pointer+0xf80008cc>
     c88:	00800044 	movi	r2,1
     c8c:	002b883a 	mov	r21,zero
     c90:	003f1f06 	br	910 <__alt_exception_stack_pointer+0xf8000910>
     c94:	81400204 	addi	r5,r16,8
     c98:	9009883a 	mov	r4,r18
     c9c:	00053000 	call	5300 <_free_r>
     ca0:	00800074 	movhi	r2,1
     ca4:	108d0e04 	addi	r2,r2,13368
     ca8:	10c00017 	ldw	r3,0(r2)
     cac:	003f2c06 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     cb0:	00c05504 	movi	r3,340
     cb4:	18800536 	bltu	r3,r2,ccc <_malloc_r+0x7cc>
     cb8:	3804d3fa 	srli	r2,r7,15
     cbc:	11401e04 	addi	r5,r2,120
     cc0:	10c01dc4 	addi	r3,r2,119
     cc4:	294b883a 	add	r5,r5,r5
     cc8:	003f5606 	br	a24 <__alt_exception_stack_pointer+0xf8000a24>
     ccc:	00c15504 	movi	r3,1364
     cd0:	18800536 	bltu	r3,r2,ce8 <_malloc_r+0x7e8>
     cd4:	3804d4ba 	srli	r2,r7,18
     cd8:	11401f44 	addi	r5,r2,125
     cdc:	10c01f04 	addi	r3,r2,124
     ce0:	294b883a 	add	r5,r5,r5
     ce4:	003f4f06 	br	a24 <__alt_exception_stack_pointer+0xf8000a24>
     ce8:	01403f84 	movi	r5,254
     cec:	00c01f84 	movi	r3,126
     cf0:	003f4c06 	br	a24 <__alt_exception_stack_pointer+0xf8000a24>
     cf4:	98800117 	ldw	r2,4(r19)
     cf8:	003fa006 	br	b7c <__alt_exception_stack_pointer+0xf8000b7c>
     cfc:	8808d0fa 	srli	r4,r17,3
     d00:	20800044 	addi	r2,r4,1
     d04:	1085883a 	add	r2,r2,r2
     d08:	003e9006 	br	74c <__alt_exception_stack_pointer+0xf800074c>

00000d0c <_printf_r>:
     d0c:	defffd04 	addi	sp,sp,-12
     d10:	2805883a 	mov	r2,r5
     d14:	dfc00015 	stw	ra,0(sp)
     d18:	d9800115 	stw	r6,4(sp)
     d1c:	d9c00215 	stw	r7,8(sp)
     d20:	21400217 	ldw	r5,8(r4)
     d24:	d9c00104 	addi	r7,sp,4
     d28:	100d883a 	mov	r6,r2
     d2c:	0000dcc0 	call	dcc <___vfprintf_internal_r>
     d30:	dfc00017 	ldw	ra,0(sp)
     d34:	dec00304 	addi	sp,sp,12
     d38:	f800283a 	ret

00000d3c <printf>:
     d3c:	defffc04 	addi	sp,sp,-16
     d40:	dfc00015 	stw	ra,0(sp)
     d44:	d9400115 	stw	r5,4(sp)
     d48:	d9800215 	stw	r6,8(sp)
     d4c:	d9c00315 	stw	r7,12(sp)
     d50:	00800074 	movhi	r2,1
     d54:	10863804 	addi	r2,r2,6368
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	200b883a 	mov	r5,r4
     d60:	d9800104 	addi	r6,sp,4
     d64:	11000217 	ldw	r4,8(r2)
     d68:	00030a80 	call	30a8 <__vfprintf_internal>
     d6c:	dfc00017 	ldw	ra,0(sp)
     d70:	dec00404 	addi	sp,sp,16
     d74:	f800283a 	ret

00000d78 <_sbrk_r>:
     d78:	defffd04 	addi	sp,sp,-12
     d7c:	dc000015 	stw	r16,0(sp)
     d80:	04000074 	movhi	r16,1
     d84:	dc400115 	stw	r17,4(sp)
     d88:	840d0304 	addi	r16,r16,13324
     d8c:	2023883a 	mov	r17,r4
     d90:	2809883a 	mov	r4,r5
     d94:	dfc00215 	stw	ra,8(sp)
     d98:	80000015 	stw	zero,0(r16)
     d9c:	000db140 	call	db14 <sbrk>
     da0:	00ffffc4 	movi	r3,-1
     da4:	10c00526 	beq	r2,r3,dbc <_sbrk_r+0x44>
     da8:	dfc00217 	ldw	ra,8(sp)
     dac:	dc400117 	ldw	r17,4(sp)
     db0:	dc000017 	ldw	r16,0(sp)
     db4:	dec00304 	addi	sp,sp,12
     db8:	f800283a 	ret
     dbc:	80c00017 	ldw	r3,0(r16)
     dc0:	183ff926 	beq	r3,zero,da8 <__alt_exception_stack_pointer+0xf8000da8>
     dc4:	88c00015 	stw	r3,0(r17)
     dc8:	003ff706 	br	da8 <__alt_exception_stack_pointer+0xf8000da8>

00000dcc <___vfprintf_internal_r>:
     dcc:	deffb804 	addi	sp,sp,-288
     dd0:	dfc04715 	stw	ra,284(sp)
     dd4:	ddc04515 	stw	r23,276(sp)
     dd8:	dd404315 	stw	r21,268(sp)
     ddc:	d9002d15 	stw	r4,180(sp)
     de0:	282f883a 	mov	r23,r5
     de4:	302b883a 	mov	r21,r6
     de8:	d9c02e15 	stw	r7,184(sp)
     dec:	df004615 	stw	fp,280(sp)
     df0:	dd804415 	stw	r22,272(sp)
     df4:	dd004215 	stw	r20,264(sp)
     df8:	dcc04115 	stw	r19,260(sp)
     dfc:	dc804015 	stw	r18,256(sp)
     e00:	dc403f15 	stw	r17,252(sp)
     e04:	dc003e15 	stw	r16,248(sp)
     e08:	00058440 	call	5844 <_localeconv_r>
     e0c:	10800017 	ldw	r2,0(r2)
     e10:	1009883a 	mov	r4,r2
     e14:	d8803415 	stw	r2,208(sp)
     e18:	00070c80 	call	70c8 <strlen>
     e1c:	d8803715 	stw	r2,220(sp)
     e20:	d8802d17 	ldw	r2,180(sp)
     e24:	10000226 	beq	r2,zero,e30 <___vfprintf_internal_r+0x64>
     e28:	10800e17 	ldw	r2,56(r2)
     e2c:	1000fb26 	beq	r2,zero,121c <___vfprintf_internal_r+0x450>
     e30:	b880030b 	ldhu	r2,12(r23)
     e34:	10c8000c 	andi	r3,r2,8192
     e38:	1800061e 	bne	r3,zero,e54 <___vfprintf_internal_r+0x88>
     e3c:	b9001917 	ldw	r4,100(r23)
     e40:	00f7ffc4 	movi	r3,-8193
     e44:	10880014 	ori	r2,r2,8192
     e48:	20c6703a 	and	r3,r4,r3
     e4c:	b880030d 	sth	r2,12(r23)
     e50:	b8c01915 	stw	r3,100(r23)
     e54:	10c0020c 	andi	r3,r2,8
     e58:	1800c326 	beq	r3,zero,1168 <___vfprintf_internal_r+0x39c>
     e5c:	b8c00417 	ldw	r3,16(r23)
     e60:	1800c126 	beq	r3,zero,1168 <___vfprintf_internal_r+0x39c>
     e64:	1080068c 	andi	r2,r2,26
     e68:	00c00284 	movi	r3,10
     e6c:	10c0c626 	beq	r2,r3,1188 <___vfprintf_internal_r+0x3bc>
     e70:	d8c00404 	addi	r3,sp,16
     e74:	05000074 	movhi	r20,1
     e78:	d9001e04 	addi	r4,sp,120
     e7c:	a53ed684 	addi	r20,r20,-1190
     e80:	d8c01e15 	stw	r3,120(sp)
     e84:	d8002015 	stw	zero,128(sp)
     e88:	d8001f15 	stw	zero,124(sp)
     e8c:	d8003315 	stw	zero,204(sp)
     e90:	d8003615 	stw	zero,216(sp)
     e94:	d8003815 	stw	zero,224(sp)
     e98:	1811883a 	mov	r8,r3
     e9c:	d8003915 	stw	zero,228(sp)
     ea0:	d8003a15 	stw	zero,232(sp)
     ea4:	d8002f15 	stw	zero,188(sp)
     ea8:	d9002815 	stw	r4,160(sp)
     eac:	a8800007 	ldb	r2,0(r21)
     eb0:	10028b26 	beq	r2,zero,18e0 <___vfprintf_internal_r+0xb14>
     eb4:	00c00944 	movi	r3,37
     eb8:	a823883a 	mov	r17,r21
     ebc:	10c0021e 	bne	r2,r3,ec8 <___vfprintf_internal_r+0xfc>
     ec0:	00001406 	br	f14 <___vfprintf_internal_r+0x148>
     ec4:	10c00326 	beq	r2,r3,ed4 <___vfprintf_internal_r+0x108>
     ec8:	8c400044 	addi	r17,r17,1
     ecc:	88800007 	ldb	r2,0(r17)
     ed0:	103ffc1e 	bne	r2,zero,ec4 <__alt_exception_stack_pointer+0xf8000ec4>
     ed4:	8d61c83a 	sub	r16,r17,r21
     ed8:	80000e26 	beq	r16,zero,f14 <___vfprintf_internal_r+0x148>
     edc:	d8c02017 	ldw	r3,128(sp)
     ee0:	d8801f17 	ldw	r2,124(sp)
     ee4:	45400015 	stw	r21,0(r8)
     ee8:	1c07883a 	add	r3,r3,r16
     eec:	10800044 	addi	r2,r2,1
     ef0:	d8c02015 	stw	r3,128(sp)
     ef4:	44000115 	stw	r16,4(r8)
     ef8:	d8801f15 	stw	r2,124(sp)
     efc:	00c001c4 	movi	r3,7
     f00:	1880a916 	blt	r3,r2,11a8 <___vfprintf_internal_r+0x3dc>
     f04:	42000204 	addi	r8,r8,8
     f08:	d9402f17 	ldw	r5,188(sp)
     f0c:	2c0b883a 	add	r5,r5,r16
     f10:	d9402f15 	stw	r5,188(sp)
     f14:	88800007 	ldb	r2,0(r17)
     f18:	1000aa26 	beq	r2,zero,11c4 <___vfprintf_internal_r+0x3f8>
     f1c:	8d400044 	addi	r21,r17,1
     f20:	8c400047 	ldb	r17,1(r17)
     f24:	0021883a 	mov	r16,zero
     f28:	00bfffc4 	movi	r2,-1
     f2c:	0025883a 	mov	r18,zero
     f30:	dc002905 	stb	r16,164(sp)
     f34:	d8002785 	stb	zero,158(sp)
     f38:	d8002b05 	stb	zero,172(sp)
     f3c:	d8802a15 	stw	r2,168(sp)
     f40:	d8003115 	stw	zero,196(sp)
     f44:	04c01604 	movi	r19,88
     f48:	05800244 	movi	r22,9
     f4c:	9021883a 	mov	r16,r18
     f50:	4039883a 	mov	fp,r8
     f54:	ad400044 	addi	r21,r21,1
     f58:	88bff804 	addi	r2,r17,-32
     f5c:	98833236 	bltu	r19,r2,1c28 <___vfprintf_internal_r+0xe5c>
     f60:	100490ba 	slli	r2,r2,2
     f64:	00c00034 	movhi	r3,0
     f68:	18c3de04 	addi	r3,r3,3960
     f6c:	10c5883a 	add	r2,r2,r3
     f70:	10800017 	ldw	r2,0(r2)
     f74:	1000683a 	jmp	r2
     f78:	00001b20 	cmpeqi	zero,zero,108
     f7c:	00001c28 	cmpgeui	zero,zero,112
     f80:	00001c28 	cmpgeui	zero,zero,112
     f84:	00001b40 	call	1b4 <alt_irq_handler+0xac>
     f88:	00001c28 	cmpgeui	zero,zero,112
     f8c:	00001c28 	cmpgeui	zero,zero,112
     f90:	00001c28 	cmpgeui	zero,zero,112
     f94:	00001c28 	cmpgeui	zero,zero,112
     f98:	00001c28 	cmpgeui	zero,zero,112
     f9c:	00001c28 	cmpgeui	zero,zero,112
     fa0:	00001228 	cmpgeui	zero,zero,72
     fa4:	00001a30 	cmpltui	zero,zero,104
     fa8:	00001c28 	cmpgeui	zero,zero,112
     fac:	000010ec 	andhi	zero,zero,67
     fb0:	0000124c 	andi	zero,zero,73
     fb4:	00001c28 	cmpgeui	zero,zero,112
     fb8:	0000129c 	xori	zero,zero,74
     fbc:	000012a8 	cmpgeui	zero,zero,74
     fc0:	000012a8 	cmpgeui	zero,zero,74
     fc4:	000012a8 	cmpgeui	zero,zero,74
     fc8:	000012a8 	cmpgeui	zero,zero,74
     fcc:	000012a8 	cmpgeui	zero,zero,74
     fd0:	000012a8 	cmpgeui	zero,zero,74
     fd4:	000012a8 	cmpgeui	zero,zero,74
     fd8:	000012a8 	cmpgeui	zero,zero,74
     fdc:	000012a8 	cmpgeui	zero,zero,74
     fe0:	00001c28 	cmpgeui	zero,zero,112
     fe4:	00001c28 	cmpgeui	zero,zero,112
     fe8:	00001c28 	cmpgeui	zero,zero,112
     fec:	00001c28 	cmpgeui	zero,zero,112
     ff0:	00001c28 	cmpgeui	zero,zero,112
     ff4:	00001c28 	cmpgeui	zero,zero,112
     ff8:	00001c28 	cmpgeui	zero,zero,112
     ffc:	00001c28 	cmpgeui	zero,zero,112
    1000:	00001c28 	cmpgeui	zero,zero,112
    1004:	00001c28 	cmpgeui	zero,zero,112
    1008:	000012e4 	muli	zero,zero,75
    100c:	000013ac 	andhi	zero,zero,78
    1010:	00001c28 	cmpgeui	zero,zero,112
    1014:	000013ac 	andhi	zero,zero,78
    1018:	00001c28 	cmpgeui	zero,zero,112
    101c:	00001c28 	cmpgeui	zero,zero,112
    1020:	00001c28 	cmpgeui	zero,zero,112
    1024:	00001c28 	cmpgeui	zero,zero,112
    1028:	00001458 	cmpnei	zero,zero,81
    102c:	00001c28 	cmpgeui	zero,zero,112
    1030:	00001c28 	cmpgeui	zero,zero,112
    1034:	00001464 	muli	zero,zero,81
    1038:	00001c28 	cmpgeui	zero,zero,112
    103c:	00001c28 	cmpgeui	zero,zero,112
    1040:	00001c28 	cmpgeui	zero,zero,112
    1044:	00001c28 	cmpgeui	zero,zero,112
    1048:	00001c28 	cmpgeui	zero,zero,112
    104c:	000018e8 	cmpgeui	zero,zero,99
    1050:	00001c28 	cmpgeui	zero,zero,112
    1054:	00001c28 	cmpgeui	zero,zero,112
    1058:	00001954 	movui	zero,101
    105c:	00001c28 	cmpgeui	zero,zero,112
    1060:	00001c28 	cmpgeui	zero,zero,112
    1064:	00001c28 	cmpgeui	zero,zero,112
    1068:	00001c28 	cmpgeui	zero,zero,112
    106c:	00001c28 	cmpgeui	zero,zero,112
    1070:	00001c28 	cmpgeui	zero,zero,112
    1074:	00001c28 	cmpgeui	zero,zero,112
    1078:	00001c28 	cmpgeui	zero,zero,112
    107c:	00001c28 	cmpgeui	zero,zero,112
    1080:	00001c28 	cmpgeui	zero,zero,112
    1084:	00001bcc 	andi	zero,zero,111
    1088:	00001b4c 	andi	zero,zero,109
    108c:	000013ac 	andhi	zero,zero,78
    1090:	000013ac 	andhi	zero,zero,78
    1094:	000013ac 	andhi	zero,zero,78
    1098:	00001b6c 	andhi	zero,zero,109
    109c:	00001b4c 	andi	zero,zero,109
    10a0:	00001c28 	cmpgeui	zero,zero,112
    10a4:	00001c28 	cmpgeui	zero,zero,112
    10a8:	00001b78 	rdprs	zero,zero,109
    10ac:	00001c28 	cmpgeui	zero,zero,112
    10b0:	00001b8c 	andi	zero,zero,110
    10b4:	00001a10 	cmplti	zero,zero,104
    10b8:	000010f8 	rdprs	zero,zero,67
    10bc:	00001a48 	cmpgei	zero,zero,105
    10c0:	00001c28 	cmpgeui	zero,zero,112
    10c4:	00001a54 	movui	zero,105
    10c8:	00001c28 	cmpgeui	zero,zero,112
    10cc:	00001ab8 	rdprs	zero,zero,106
    10d0:	00001c28 	cmpgeui	zero,zero,112
    10d4:	00001c28 	cmpgeui	zero,zero,112
    10d8:	00001ad8 	cmpnei	zero,zero,107
    10dc:	d8c03117 	ldw	r3,196(sp)
    10e0:	d8802e15 	stw	r2,184(sp)
    10e4:	00c7c83a 	sub	r3,zero,r3
    10e8:	d8c03115 	stw	r3,196(sp)
    10ec:	84000114 	ori	r16,r16,4
    10f0:	ac400007 	ldb	r17,0(r21)
    10f4:	003f9706 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    10f8:	00800c04 	movi	r2,48
    10fc:	d8802705 	stb	r2,156(sp)
    1100:	00801e04 	movi	r2,120
    1104:	d8802745 	stb	r2,157(sp)
    1108:	d9002a17 	ldw	r4,168(sp)
    110c:	d8802e17 	ldw	r2,184(sp)
    1110:	d8002785 	stb	zero,158(sp)
    1114:	e011883a 	mov	r8,fp
    1118:	10c00104 	addi	r3,r2,4
    111c:	14c00017 	ldw	r19,0(r2)
    1120:	002d883a 	mov	r22,zero
    1124:	80800094 	ori	r2,r16,2
    1128:	2002ca16 	blt	r4,zero,1c54 <___vfprintf_internal_r+0xe88>
    112c:	00bfdfc4 	movi	r2,-129
    1130:	80a4703a 	and	r18,r16,r2
    1134:	d8c02e15 	stw	r3,184(sp)
    1138:	94800094 	ori	r18,r18,2
    113c:	9802b41e 	bne	r19,zero,1c10 <___vfprintf_internal_r+0xe44>
    1140:	01400074 	movhi	r5,1
    1144:	297ecf04 	addi	r5,r5,-1220
    1148:	d9403915 	stw	r5,228(sp)
    114c:	04401e04 	movi	r17,120
    1150:	d8802a17 	ldw	r2,168(sp)
    1154:	0039883a 	mov	fp,zero
    1158:	1001fa26 	beq	r2,zero,1944 <___vfprintf_internal_r+0xb78>
    115c:	0027883a 	mov	r19,zero
    1160:	002d883a 	mov	r22,zero
    1164:	00021906 	br	19cc <___vfprintf_internal_r+0xc00>
    1168:	d9002d17 	ldw	r4,180(sp)
    116c:	b80b883a 	mov	r5,r23
    1170:	00031800 	call	3180 <__swsetup_r>
    1174:	1005dc1e 	bne	r2,zero,28e8 <___vfprintf_internal_r+0x1b1c>
    1178:	b880030b 	ldhu	r2,12(r23)
    117c:	00c00284 	movi	r3,10
    1180:	1080068c 	andi	r2,r2,26
    1184:	10ff3a1e 	bne	r2,r3,e70 <__alt_exception_stack_pointer+0xf8000e70>
    1188:	b880038f 	ldh	r2,14(r23)
    118c:	103f3816 	blt	r2,zero,e70 <__alt_exception_stack_pointer+0xf8000e70>
    1190:	d9c02e17 	ldw	r7,184(sp)
    1194:	d9002d17 	ldw	r4,180(sp)
    1198:	a80d883a 	mov	r6,r21
    119c:	b80b883a 	mov	r5,r23
    11a0:	00030c40 	call	30c4 <__sbprintf>
    11a4:	00001106 	br	11ec <___vfprintf_internal_r+0x420>
    11a8:	d9002d17 	ldw	r4,180(sp)
    11ac:	d9801e04 	addi	r6,sp,120
    11b0:	b80b883a 	mov	r5,r23
    11b4:	000725c0 	call	725c <__sprint_r>
    11b8:	1000081e 	bne	r2,zero,11dc <___vfprintf_internal_r+0x410>
    11bc:	da000404 	addi	r8,sp,16
    11c0:	003f5106 	br	f08 <__alt_exception_stack_pointer+0xf8000f08>
    11c4:	d8802017 	ldw	r2,128(sp)
    11c8:	10000426 	beq	r2,zero,11dc <___vfprintf_internal_r+0x410>
    11cc:	d9002d17 	ldw	r4,180(sp)
    11d0:	d9801e04 	addi	r6,sp,120
    11d4:	b80b883a 	mov	r5,r23
    11d8:	000725c0 	call	725c <__sprint_r>
    11dc:	b880030b 	ldhu	r2,12(r23)
    11e0:	1080100c 	andi	r2,r2,64
    11e4:	1005c01e 	bne	r2,zero,28e8 <___vfprintf_internal_r+0x1b1c>
    11e8:	d8802f17 	ldw	r2,188(sp)
    11ec:	dfc04717 	ldw	ra,284(sp)
    11f0:	df004617 	ldw	fp,280(sp)
    11f4:	ddc04517 	ldw	r23,276(sp)
    11f8:	dd804417 	ldw	r22,272(sp)
    11fc:	dd404317 	ldw	r21,268(sp)
    1200:	dd004217 	ldw	r20,264(sp)
    1204:	dcc04117 	ldw	r19,260(sp)
    1208:	dc804017 	ldw	r18,256(sp)
    120c:	dc403f17 	ldw	r17,252(sp)
    1210:	dc003e17 	ldw	r16,248(sp)
    1214:	dec04804 	addi	sp,sp,288
    1218:	f800283a 	ret
    121c:	d9002d17 	ldw	r4,180(sp)
    1220:	000518c0 	call	518c <__sinit>
    1224:	003f0206 	br	e30 <__alt_exception_stack_pointer+0xf8000e30>
    1228:	d9002e17 	ldw	r4,184(sp)
    122c:	d9402e17 	ldw	r5,184(sp)
    1230:	21000017 	ldw	r4,0(r4)
    1234:	28800104 	addi	r2,r5,4
    1238:	d9003115 	stw	r4,196(sp)
    123c:	203fa716 	blt	r4,zero,10dc <__alt_exception_stack_pointer+0xf80010dc>
    1240:	d8802e15 	stw	r2,184(sp)
    1244:	ac400007 	ldb	r17,0(r21)
    1248:	003f4206 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    124c:	ac400007 	ldb	r17,0(r21)
    1250:	01000a84 	movi	r4,42
    1254:	a8c00044 	addi	r3,r21,1
    1258:	89075826 	beq	r17,r4,2fbc <___vfprintf_internal_r+0x21f0>
    125c:	8cbff404 	addi	r18,r17,-48
    1260:	b486ae36 	bltu	r22,r18,2d1c <___vfprintf_internal_r+0x1f50>
    1264:	0009883a 	mov	r4,zero
    1268:	1823883a 	mov	r17,r3
    126c:	01400284 	movi	r5,10
    1270:	000aaa00 	call	aaa0 <__mulsi3>
    1274:	88c00007 	ldb	r3,0(r17)
    1278:	1489883a 	add	r4,r2,r18
    127c:	8d400044 	addi	r21,r17,1
    1280:	1cbff404 	addi	r18,r3,-48
    1284:	a823883a 	mov	r17,r21
    1288:	b4bff82e 	bgeu	r22,r18,126c <__alt_exception_stack_pointer+0xf800126c>
    128c:	1823883a 	mov	r17,r3
    1290:	2005f616 	blt	r4,zero,2a6c <___vfprintf_internal_r+0x1ca0>
    1294:	d9002a15 	stw	r4,168(sp)
    1298:	003f2f06 	br	f58 <__alt_exception_stack_pointer+0xf8000f58>
    129c:	84002014 	ori	r16,r16,128
    12a0:	ac400007 	ldb	r17,0(r21)
    12a4:	003f2b06 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    12a8:	8cbff404 	addi	r18,r17,-48
    12ac:	d8003115 	stw	zero,196(sp)
    12b0:	0009883a 	mov	r4,zero
    12b4:	a823883a 	mov	r17,r21
    12b8:	01400284 	movi	r5,10
    12bc:	000aaa00 	call	aaa0 <__mulsi3>
    12c0:	88c00007 	ldb	r3,0(r17)
    12c4:	9089883a 	add	r4,r18,r2
    12c8:	ad400044 	addi	r21,r21,1
    12cc:	1cbff404 	addi	r18,r3,-48
    12d0:	a823883a 	mov	r17,r21
    12d4:	b4bff82e 	bgeu	r22,r18,12b8 <__alt_exception_stack_pointer+0xf80012b8>
    12d8:	1823883a 	mov	r17,r3
    12dc:	d9003115 	stw	r4,196(sp)
    12e0:	003f1d06 	br	f58 <__alt_exception_stack_pointer+0xf8000f58>
    12e4:	8025883a 	mov	r18,r16
    12e8:	dc002903 	ldbu	r16,164(sp)
    12ec:	e011883a 	mov	r8,fp
    12f0:	84003fcc 	andi	r16,r16,255
    12f4:	8007531e 	bne	r16,zero,3044 <___vfprintf_internal_r+0x2278>
    12f8:	94800414 	ori	r18,r18,16
    12fc:	9080080c 	andi	r2,r18,32
    1300:	1003a326 	beq	r2,zero,2190 <___vfprintf_internal_r+0x13c4>
    1304:	d9002e17 	ldw	r4,184(sp)
    1308:	20800117 	ldw	r2,4(r4)
    130c:	24c00017 	ldw	r19,0(r4)
    1310:	21000204 	addi	r4,r4,8
    1314:	d9002e15 	stw	r4,184(sp)
    1318:	102d883a 	mov	r22,r2
    131c:	10047316 	blt	r2,zero,24ec <___vfprintf_internal_r+0x1720>
    1320:	d9002a17 	ldw	r4,168(sp)
    1324:	df002783 	ldbu	fp,158(sp)
    1328:	2003e416 	blt	r4,zero,22bc <___vfprintf_internal_r+0x14f0>
    132c:	00ffdfc4 	movi	r3,-129
    1330:	9d84b03a 	or	r2,r19,r22
    1334:	90e4703a 	and	r18,r18,r3
    1338:	10018026 	beq	r2,zero,193c <___vfprintf_internal_r+0xb70>
    133c:	b003ab26 	beq	r22,zero,21ec <___vfprintf_internal_r+0x1420>
    1340:	dc402915 	stw	r17,164(sp)
    1344:	dc001e04 	addi	r16,sp,120
    1348:	b023883a 	mov	r17,r22
    134c:	402d883a 	mov	r22,r8
    1350:	9809883a 	mov	r4,r19
    1354:	880b883a 	mov	r5,r17
    1358:	01800284 	movi	r6,10
    135c:	000f883a 	mov	r7,zero
    1360:	000a3280 	call	a328 <__umoddi3>
    1364:	10800c04 	addi	r2,r2,48
    1368:	843fffc4 	addi	r16,r16,-1
    136c:	9809883a 	mov	r4,r19
    1370:	880b883a 	mov	r5,r17
    1374:	80800005 	stb	r2,0(r16)
    1378:	01800284 	movi	r6,10
    137c:	000f883a 	mov	r7,zero
    1380:	0009d2c0 	call	9d2c <__udivdi3>
    1384:	1027883a 	mov	r19,r2
    1388:	10c4b03a 	or	r2,r2,r3
    138c:	1823883a 	mov	r17,r3
    1390:	103fef1e 	bne	r2,zero,1350 <__alt_exception_stack_pointer+0xf8001350>
    1394:	d8c02817 	ldw	r3,160(sp)
    1398:	dc402917 	ldw	r17,164(sp)
    139c:	b011883a 	mov	r8,r22
    13a0:	1c07c83a 	sub	r3,r3,r16
    13a4:	d8c02b15 	stw	r3,172(sp)
    13a8:	00005f06 	br	1528 <___vfprintf_internal_r+0x75c>
    13ac:	8025883a 	mov	r18,r16
    13b0:	dc002903 	ldbu	r16,164(sp)
    13b4:	e011883a 	mov	r8,fp
    13b8:	84003fcc 	andi	r16,r16,255
    13bc:	80071e1e 	bne	r16,zero,3038 <___vfprintf_internal_r+0x226c>
    13c0:	9080020c 	andi	r2,r18,8
    13c4:	1004af26 	beq	r2,zero,2684 <___vfprintf_internal_r+0x18b8>
    13c8:	d9002e17 	ldw	r4,184(sp)
    13cc:	d9402e17 	ldw	r5,184(sp)
    13d0:	d8802e17 	ldw	r2,184(sp)
    13d4:	21000017 	ldw	r4,0(r4)
    13d8:	29400117 	ldw	r5,4(r5)
    13dc:	10800204 	addi	r2,r2,8
    13e0:	d9003615 	stw	r4,216(sp)
    13e4:	d9403815 	stw	r5,224(sp)
    13e8:	d8802e15 	stw	r2,184(sp)
    13ec:	d9003617 	ldw	r4,216(sp)
    13f0:	d9403817 	ldw	r5,224(sp)
    13f4:	da003d15 	stw	r8,244(sp)
    13f8:	04000044 	movi	r16,1
    13fc:	0006e3c0 	call	6e3c <__fpclassifyd>
    1400:	da003d17 	ldw	r8,244(sp)
    1404:	1404441e 	bne	r2,r16,2518 <___vfprintf_internal_r+0x174c>
    1408:	d9003617 	ldw	r4,216(sp)
    140c:	d9403817 	ldw	r5,224(sp)
    1410:	000d883a 	mov	r6,zero
    1414:	000f883a 	mov	r7,zero
    1418:	000bea80 	call	bea8 <__ledf2>
    141c:	da003d17 	ldw	r8,244(sp)
    1420:	1005e316 	blt	r2,zero,2bb0 <___vfprintf_internal_r+0x1de4>
    1424:	df002783 	ldbu	fp,158(sp)
    1428:	008011c4 	movi	r2,71
    142c:	1445580e 	bge	r2,r17,2990 <___vfprintf_internal_r+0x1bc4>
    1430:	04000074 	movhi	r16,1
    1434:	843ec704 	addi	r16,r16,-1252
    1438:	00c000c4 	movi	r3,3
    143c:	00bfdfc4 	movi	r2,-129
    1440:	d8c02915 	stw	r3,164(sp)
    1444:	90a4703a 	and	r18,r18,r2
    1448:	d8c02b15 	stw	r3,172(sp)
    144c:	d8002a15 	stw	zero,168(sp)
    1450:	d8003215 	stw	zero,200(sp)
    1454:	00003a06 	br	1540 <___vfprintf_internal_r+0x774>
    1458:	84000214 	ori	r16,r16,8
    145c:	ac400007 	ldb	r17,0(r21)
    1460:	003ebc06 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1464:	8025883a 	mov	r18,r16
    1468:	dc002903 	ldbu	r16,164(sp)
    146c:	e011883a 	mov	r8,fp
    1470:	84003fcc 	andi	r16,r16,255
    1474:	8007001e 	bne	r16,zero,3078 <___vfprintf_internal_r+0x22ac>
    1478:	94800414 	ori	r18,r18,16
    147c:	9080080c 	andi	r2,r18,32
    1480:	1002fa26 	beq	r2,zero,206c <___vfprintf_internal_r+0x12a0>
    1484:	d9002e17 	ldw	r4,184(sp)
    1488:	d9402a17 	ldw	r5,168(sp)
    148c:	d8002785 	stb	zero,158(sp)
    1490:	20800204 	addi	r2,r4,8
    1494:	24c00017 	ldw	r19,0(r4)
    1498:	25800117 	ldw	r22,4(r4)
    149c:	2804b116 	blt	r5,zero,2764 <___vfprintf_internal_r+0x1998>
    14a0:	013fdfc4 	movi	r4,-129
    14a4:	9d86b03a 	or	r3,r19,r22
    14a8:	d8802e15 	stw	r2,184(sp)
    14ac:	9124703a 	and	r18,r18,r4
    14b0:	1802fb1e 	bne	r3,zero,20a0 <___vfprintf_internal_r+0x12d4>
    14b4:	d8c02a17 	ldw	r3,168(sp)
    14b8:	0039883a 	mov	fp,zero
    14bc:	1805e526 	beq	r3,zero,2c54 <___vfprintf_internal_r+0x1e88>
    14c0:	0027883a 	mov	r19,zero
    14c4:	002d883a 	mov	r22,zero
    14c8:	dc001e04 	addi	r16,sp,120
    14cc:	9806d0fa 	srli	r3,r19,3
    14d0:	b008977a 	slli	r4,r22,29
    14d4:	b02cd0fa 	srli	r22,r22,3
    14d8:	9cc001cc 	andi	r19,r19,7
    14dc:	98800c04 	addi	r2,r19,48
    14e0:	843fffc4 	addi	r16,r16,-1
    14e4:	20e6b03a 	or	r19,r4,r3
    14e8:	80800005 	stb	r2,0(r16)
    14ec:	9d86b03a 	or	r3,r19,r22
    14f0:	183ff61e 	bne	r3,zero,14cc <__alt_exception_stack_pointer+0xf80014cc>
    14f4:	90c0004c 	andi	r3,r18,1
    14f8:	18014126 	beq	r3,zero,1a00 <___vfprintf_internal_r+0xc34>
    14fc:	10803fcc 	andi	r2,r2,255
    1500:	1080201c 	xori	r2,r2,128
    1504:	10bfe004 	addi	r2,r2,-128
    1508:	00c00c04 	movi	r3,48
    150c:	10c13c26 	beq	r2,r3,1a00 <___vfprintf_internal_r+0xc34>
    1510:	80ffffc5 	stb	r3,-1(r16)
    1514:	d8c02817 	ldw	r3,160(sp)
    1518:	80bfffc4 	addi	r2,r16,-1
    151c:	1021883a 	mov	r16,r2
    1520:	1887c83a 	sub	r3,r3,r2
    1524:	d8c02b15 	stw	r3,172(sp)
    1528:	d8802b17 	ldw	r2,172(sp)
    152c:	d9002a17 	ldw	r4,168(sp)
    1530:	1100010e 	bge	r2,r4,1538 <___vfprintf_internal_r+0x76c>
    1534:	2005883a 	mov	r2,r4
    1538:	d8802915 	stw	r2,164(sp)
    153c:	d8003215 	stw	zero,200(sp)
    1540:	e7003fcc 	andi	fp,fp,255
    1544:	e700201c 	xori	fp,fp,128
    1548:	e73fe004 	addi	fp,fp,-128
    154c:	e0000326 	beq	fp,zero,155c <___vfprintf_internal_r+0x790>
    1550:	d8c02917 	ldw	r3,164(sp)
    1554:	18c00044 	addi	r3,r3,1
    1558:	d8c02915 	stw	r3,164(sp)
    155c:	90c0008c 	andi	r3,r18,2
    1560:	d8c02c15 	stw	r3,176(sp)
    1564:	18000326 	beq	r3,zero,1574 <___vfprintf_internal_r+0x7a8>
    1568:	d8c02917 	ldw	r3,164(sp)
    156c:	18c00084 	addi	r3,r3,2
    1570:	d8c02915 	stw	r3,164(sp)
    1574:	90c0210c 	andi	r3,r18,132
    1578:	d8c03015 	stw	r3,192(sp)
    157c:	1801c51e 	bne	r3,zero,1c94 <___vfprintf_internal_r+0xec8>
    1580:	d9003117 	ldw	r4,196(sp)
    1584:	d8c02917 	ldw	r3,164(sp)
    1588:	20e7c83a 	sub	r19,r4,r3
    158c:	04c1c10e 	bge	zero,r19,1c94 <___vfprintf_internal_r+0xec8>
    1590:	02400404 	movi	r9,16
    1594:	d8c02017 	ldw	r3,128(sp)
    1598:	d8801f17 	ldw	r2,124(sp)
    159c:	4cc52f0e 	bge	r9,r19,2a5c <___vfprintf_internal_r+0x1c90>
    15a0:	01400074 	movhi	r5,1
    15a4:	297eda84 	addi	r5,r5,-1174
    15a8:	dc403b15 	stw	r17,236(sp)
    15ac:	d9403515 	stw	r5,212(sp)
    15b0:	9823883a 	mov	r17,r19
    15b4:	482d883a 	mov	r22,r9
    15b8:	9027883a 	mov	r19,r18
    15bc:	070001c4 	movi	fp,7
    15c0:	8025883a 	mov	r18,r16
    15c4:	dc002d17 	ldw	r16,180(sp)
    15c8:	00000306 	br	15d8 <___vfprintf_internal_r+0x80c>
    15cc:	8c7ffc04 	addi	r17,r17,-16
    15d0:	42000204 	addi	r8,r8,8
    15d4:	b440130e 	bge	r22,r17,1624 <___vfprintf_internal_r+0x858>
    15d8:	01000074 	movhi	r4,1
    15dc:	18c00404 	addi	r3,r3,16
    15e0:	10800044 	addi	r2,r2,1
    15e4:	213eda84 	addi	r4,r4,-1174
    15e8:	41000015 	stw	r4,0(r8)
    15ec:	45800115 	stw	r22,4(r8)
    15f0:	d8c02015 	stw	r3,128(sp)
    15f4:	d8801f15 	stw	r2,124(sp)
    15f8:	e0bff40e 	bge	fp,r2,15cc <__alt_exception_stack_pointer+0xf80015cc>
    15fc:	d9801e04 	addi	r6,sp,120
    1600:	b80b883a 	mov	r5,r23
    1604:	8009883a 	mov	r4,r16
    1608:	000725c0 	call	725c <__sprint_r>
    160c:	103ef31e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1610:	8c7ffc04 	addi	r17,r17,-16
    1614:	d8c02017 	ldw	r3,128(sp)
    1618:	d8801f17 	ldw	r2,124(sp)
    161c:	da000404 	addi	r8,sp,16
    1620:	b47fed16 	blt	r22,r17,15d8 <__alt_exception_stack_pointer+0xf80015d8>
    1624:	9021883a 	mov	r16,r18
    1628:	9825883a 	mov	r18,r19
    162c:	8827883a 	mov	r19,r17
    1630:	dc403b17 	ldw	r17,236(sp)
    1634:	d9403517 	ldw	r5,212(sp)
    1638:	98c7883a 	add	r3,r19,r3
    163c:	10800044 	addi	r2,r2,1
    1640:	41400015 	stw	r5,0(r8)
    1644:	44c00115 	stw	r19,4(r8)
    1648:	d8c02015 	stw	r3,128(sp)
    164c:	d8801f15 	stw	r2,124(sp)
    1650:	010001c4 	movi	r4,7
    1654:	2082c516 	blt	r4,r2,216c <___vfprintf_internal_r+0x13a0>
    1658:	df002787 	ldb	fp,158(sp)
    165c:	42000204 	addi	r8,r8,8
    1660:	e0000c26 	beq	fp,zero,1694 <___vfprintf_internal_r+0x8c8>
    1664:	d8801f17 	ldw	r2,124(sp)
    1668:	d9002784 	addi	r4,sp,158
    166c:	18c00044 	addi	r3,r3,1
    1670:	10800044 	addi	r2,r2,1
    1674:	41000015 	stw	r4,0(r8)
    1678:	01000044 	movi	r4,1
    167c:	41000115 	stw	r4,4(r8)
    1680:	d8c02015 	stw	r3,128(sp)
    1684:	d8801f15 	stw	r2,124(sp)
    1688:	010001c4 	movi	r4,7
    168c:	20825e16 	blt	r4,r2,2008 <___vfprintf_internal_r+0x123c>
    1690:	42000204 	addi	r8,r8,8
    1694:	d8802c17 	ldw	r2,176(sp)
    1698:	10000c26 	beq	r2,zero,16cc <___vfprintf_internal_r+0x900>
    169c:	d8801f17 	ldw	r2,124(sp)
    16a0:	d9002704 	addi	r4,sp,156
    16a4:	18c00084 	addi	r3,r3,2
    16a8:	10800044 	addi	r2,r2,1
    16ac:	41000015 	stw	r4,0(r8)
    16b0:	01000084 	movi	r4,2
    16b4:	41000115 	stw	r4,4(r8)
    16b8:	d8c02015 	stw	r3,128(sp)
    16bc:	d8801f15 	stw	r2,124(sp)
    16c0:	010001c4 	movi	r4,7
    16c4:	20825816 	blt	r4,r2,2028 <___vfprintf_internal_r+0x125c>
    16c8:	42000204 	addi	r8,r8,8
    16cc:	d9003017 	ldw	r4,192(sp)
    16d0:	00802004 	movi	r2,128
    16d4:	2081bb26 	beq	r4,r2,1dc4 <___vfprintf_internal_r+0xff8>
    16d8:	d9402a17 	ldw	r5,168(sp)
    16dc:	d8802b17 	ldw	r2,172(sp)
    16e0:	28adc83a 	sub	r22,r5,r2
    16e4:	0580310e 	bge	zero,r22,17ac <___vfprintf_internal_r+0x9e0>
    16e8:	07000404 	movi	fp,16
    16ec:	d8801f17 	ldw	r2,124(sp)
    16f0:	e584360e 	bge	fp,r22,27cc <___vfprintf_internal_r+0x1a00>
    16f4:	01400074 	movhi	r5,1
    16f8:	297ed684 	addi	r5,r5,-1190
    16fc:	dc402a15 	stw	r17,168(sp)
    1700:	d9402c15 	stw	r5,176(sp)
    1704:	b023883a 	mov	r17,r22
    1708:	04c001c4 	movi	r19,7
    170c:	a82d883a 	mov	r22,r21
    1710:	902b883a 	mov	r21,r18
    1714:	8025883a 	mov	r18,r16
    1718:	dc002d17 	ldw	r16,180(sp)
    171c:	00000306 	br	172c <___vfprintf_internal_r+0x960>
    1720:	8c7ffc04 	addi	r17,r17,-16
    1724:	42000204 	addi	r8,r8,8
    1728:	e440110e 	bge	fp,r17,1770 <___vfprintf_internal_r+0x9a4>
    172c:	18c00404 	addi	r3,r3,16
    1730:	10800044 	addi	r2,r2,1
    1734:	45000015 	stw	r20,0(r8)
    1738:	47000115 	stw	fp,4(r8)
    173c:	d8c02015 	stw	r3,128(sp)
    1740:	d8801f15 	stw	r2,124(sp)
    1744:	98bff60e 	bge	r19,r2,1720 <__alt_exception_stack_pointer+0xf8001720>
    1748:	d9801e04 	addi	r6,sp,120
    174c:	b80b883a 	mov	r5,r23
    1750:	8009883a 	mov	r4,r16
    1754:	000725c0 	call	725c <__sprint_r>
    1758:	103ea01e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    175c:	8c7ffc04 	addi	r17,r17,-16
    1760:	d8c02017 	ldw	r3,128(sp)
    1764:	d8801f17 	ldw	r2,124(sp)
    1768:	da000404 	addi	r8,sp,16
    176c:	e47fef16 	blt	fp,r17,172c <__alt_exception_stack_pointer+0xf800172c>
    1770:	9021883a 	mov	r16,r18
    1774:	a825883a 	mov	r18,r21
    1778:	b02b883a 	mov	r21,r22
    177c:	882d883a 	mov	r22,r17
    1780:	dc402a17 	ldw	r17,168(sp)
    1784:	d9002c17 	ldw	r4,176(sp)
    1788:	1d87883a 	add	r3,r3,r22
    178c:	10800044 	addi	r2,r2,1
    1790:	41000015 	stw	r4,0(r8)
    1794:	45800115 	stw	r22,4(r8)
    1798:	d8c02015 	stw	r3,128(sp)
    179c:	d8801f15 	stw	r2,124(sp)
    17a0:	010001c4 	movi	r4,7
    17a4:	20821016 	blt	r4,r2,1fe8 <___vfprintf_internal_r+0x121c>
    17a8:	42000204 	addi	r8,r8,8
    17ac:	9080400c 	andi	r2,r18,256
    17b0:	10013a1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0xed0>
    17b4:	d9402b17 	ldw	r5,172(sp)
    17b8:	d8801f17 	ldw	r2,124(sp)
    17bc:	44000015 	stw	r16,0(r8)
    17c0:	1947883a 	add	r3,r3,r5
    17c4:	10800044 	addi	r2,r2,1
    17c8:	41400115 	stw	r5,4(r8)
    17cc:	d8c02015 	stw	r3,128(sp)
    17d0:	d8801f15 	stw	r2,124(sp)
    17d4:	010001c4 	movi	r4,7
    17d8:	2081f516 	blt	r4,r2,1fb0 <___vfprintf_internal_r+0x11e4>
    17dc:	42000204 	addi	r8,r8,8
    17e0:	9480010c 	andi	r18,r18,4
    17e4:	90003226 	beq	r18,zero,18b0 <___vfprintf_internal_r+0xae4>
    17e8:	d9403117 	ldw	r5,196(sp)
    17ec:	d8802917 	ldw	r2,164(sp)
    17f0:	28a1c83a 	sub	r16,r5,r2
    17f4:	04002e0e 	bge	zero,r16,18b0 <___vfprintf_internal_r+0xae4>
    17f8:	04400404 	movi	r17,16
    17fc:	d8801f17 	ldw	r2,124(sp)
    1800:	8c04c40e 	bge	r17,r16,2b14 <___vfprintf_internal_r+0x1d48>
    1804:	01400074 	movhi	r5,1
    1808:	297eda84 	addi	r5,r5,-1174
    180c:	d9403515 	stw	r5,212(sp)
    1810:	048001c4 	movi	r18,7
    1814:	dcc02d17 	ldw	r19,180(sp)
    1818:	00000306 	br	1828 <___vfprintf_internal_r+0xa5c>
    181c:	843ffc04 	addi	r16,r16,-16
    1820:	42000204 	addi	r8,r8,8
    1824:	8c00130e 	bge	r17,r16,1874 <___vfprintf_internal_r+0xaa8>
    1828:	01000074 	movhi	r4,1
    182c:	18c00404 	addi	r3,r3,16
    1830:	10800044 	addi	r2,r2,1
    1834:	213eda84 	addi	r4,r4,-1174
    1838:	41000015 	stw	r4,0(r8)
    183c:	44400115 	stw	r17,4(r8)
    1840:	d8c02015 	stw	r3,128(sp)
    1844:	d8801f15 	stw	r2,124(sp)
    1848:	90bff40e 	bge	r18,r2,181c <__alt_exception_stack_pointer+0xf800181c>
    184c:	d9801e04 	addi	r6,sp,120
    1850:	b80b883a 	mov	r5,r23
    1854:	9809883a 	mov	r4,r19
    1858:	000725c0 	call	725c <__sprint_r>
    185c:	103e5f1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1860:	843ffc04 	addi	r16,r16,-16
    1864:	d8c02017 	ldw	r3,128(sp)
    1868:	d8801f17 	ldw	r2,124(sp)
    186c:	da000404 	addi	r8,sp,16
    1870:	8c3fed16 	blt	r17,r16,1828 <__alt_exception_stack_pointer+0xf8001828>
    1874:	d9403517 	ldw	r5,212(sp)
    1878:	1c07883a 	add	r3,r3,r16
    187c:	10800044 	addi	r2,r2,1
    1880:	41400015 	stw	r5,0(r8)
    1884:	44000115 	stw	r16,4(r8)
    1888:	d8c02015 	stw	r3,128(sp)
    188c:	d8801f15 	stw	r2,124(sp)
    1890:	010001c4 	movi	r4,7
    1894:	2080060e 	bge	r4,r2,18b0 <___vfprintf_internal_r+0xae4>
    1898:	d9002d17 	ldw	r4,180(sp)
    189c:	d9801e04 	addi	r6,sp,120
    18a0:	b80b883a 	mov	r5,r23
    18a4:	000725c0 	call	725c <__sprint_r>
    18a8:	103e4c1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    18ac:	d8c02017 	ldw	r3,128(sp)
    18b0:	d8803117 	ldw	r2,196(sp)
    18b4:	d9002917 	ldw	r4,164(sp)
    18b8:	1100010e 	bge	r2,r4,18c0 <___vfprintf_internal_r+0xaf4>
    18bc:	2005883a 	mov	r2,r4
    18c0:	d9402f17 	ldw	r5,188(sp)
    18c4:	288b883a 	add	r5,r5,r2
    18c8:	d9402f15 	stw	r5,188(sp)
    18cc:	1801c01e 	bne	r3,zero,1fd0 <___vfprintf_internal_r+0x1204>
    18d0:	a8800007 	ldb	r2,0(r21)
    18d4:	d8001f15 	stw	zero,124(sp)
    18d8:	da000404 	addi	r8,sp,16
    18dc:	103d751e 	bne	r2,zero,eb4 <__alt_exception_stack_pointer+0xf8000eb4>
    18e0:	a823883a 	mov	r17,r21
    18e4:	003d8b06 	br	f14 <__alt_exception_stack_pointer+0xf8000f14>
    18e8:	8025883a 	mov	r18,r16
    18ec:	dc002903 	ldbu	r16,164(sp)
    18f0:	e011883a 	mov	r8,fp
    18f4:	84003fcc 	andi	r16,r16,255
    18f8:	8005e51e 	bne	r16,zero,3090 <___vfprintf_internal_r+0x22c4>
    18fc:	94800414 	ori	r18,r18,16
    1900:	9080080c 	andi	r2,r18,32
    1904:	10022b26 	beq	r2,zero,21b4 <___vfprintf_internal_r+0x13e8>
    1908:	d9002e17 	ldw	r4,184(sp)
    190c:	d9402a17 	ldw	r5,168(sp)
    1910:	d8002785 	stb	zero,158(sp)
    1914:	20c00204 	addi	r3,r4,8
    1918:	24c00017 	ldw	r19,0(r4)
    191c:	25800117 	ldw	r22,4(r4)
    1920:	28042e16 	blt	r5,zero,29dc <___vfprintf_internal_r+0x1c10>
    1924:	013fdfc4 	movi	r4,-129
    1928:	9d84b03a 	or	r2,r19,r22
    192c:	d8c02e15 	stw	r3,184(sp)
    1930:	9124703a 	and	r18,r18,r4
    1934:	0039883a 	mov	fp,zero
    1938:	103e801e 	bne	r2,zero,133c <__alt_exception_stack_pointer+0xf800133c>
    193c:	d9002a17 	ldw	r4,168(sp)
    1940:	2002e01e 	bne	r4,zero,24c4 <___vfprintf_internal_r+0x16f8>
    1944:	d8002a15 	stw	zero,168(sp)
    1948:	d8002b15 	stw	zero,172(sp)
    194c:	dc001e04 	addi	r16,sp,120
    1950:	003ef506 	br	1528 <__alt_exception_stack_pointer+0xf8001528>
    1954:	8025883a 	mov	r18,r16
    1958:	dc002903 	ldbu	r16,164(sp)
    195c:	e011883a 	mov	r8,fp
    1960:	84003fcc 	andi	r16,r16,255
    1964:	8005ba1e 	bne	r16,zero,3050 <___vfprintf_internal_r+0x2284>
    1968:	01000074 	movhi	r4,1
    196c:	213eca04 	addi	r4,r4,-1240
    1970:	d9003915 	stw	r4,228(sp)
    1974:	9080080c 	andi	r2,r18,32
    1978:	10006126 	beq	r2,zero,1b00 <___vfprintf_internal_r+0xd34>
    197c:	d9402e17 	ldw	r5,184(sp)
    1980:	2cc00017 	ldw	r19,0(r5)
    1984:	2d800117 	ldw	r22,4(r5)
    1988:	29400204 	addi	r5,r5,8
    198c:	d9402e15 	stw	r5,184(sp)
    1990:	9080004c 	andi	r2,r18,1
    1994:	1001ac26 	beq	r2,zero,2048 <___vfprintf_internal_r+0x127c>
    1998:	9d84b03a 	or	r2,r19,r22
    199c:	10038526 	beq	r2,zero,27b4 <___vfprintf_internal_r+0x19e8>
    19a0:	d8c02a17 	ldw	r3,168(sp)
    19a4:	00800c04 	movi	r2,48
    19a8:	d8802705 	stb	r2,156(sp)
    19ac:	dc402745 	stb	r17,157(sp)
    19b0:	d8002785 	stb	zero,158(sp)
    19b4:	90800094 	ori	r2,r18,2
    19b8:	18047916 	blt	r3,zero,2ba0 <___vfprintf_internal_r+0x1dd4>
    19bc:	00bfdfc4 	movi	r2,-129
    19c0:	90a4703a 	and	r18,r18,r2
    19c4:	94800094 	ori	r18,r18,2
    19c8:	0039883a 	mov	fp,zero
    19cc:	d9003917 	ldw	r4,228(sp)
    19d0:	dc001e04 	addi	r16,sp,120
    19d4:	988003cc 	andi	r2,r19,15
    19d8:	b006973a 	slli	r3,r22,28
    19dc:	2085883a 	add	r2,r4,r2
    19e0:	9826d13a 	srli	r19,r19,4
    19e4:	10800003 	ldbu	r2,0(r2)
    19e8:	b02cd13a 	srli	r22,r22,4
    19ec:	843fffc4 	addi	r16,r16,-1
    19f0:	1ce6b03a 	or	r19,r3,r19
    19f4:	80800005 	stb	r2,0(r16)
    19f8:	9d84b03a 	or	r2,r19,r22
    19fc:	103ff51e 	bne	r2,zero,19d4 <__alt_exception_stack_pointer+0xf80019d4>
    1a00:	d8c02817 	ldw	r3,160(sp)
    1a04:	1c07c83a 	sub	r3,r3,r16
    1a08:	d8c02b15 	stw	r3,172(sp)
    1a0c:	003ec606 	br	1528 <__alt_exception_stack_pointer+0xf8001528>
    1a10:	8025883a 	mov	r18,r16
    1a14:	dc002903 	ldbu	r16,164(sp)
    1a18:	e011883a 	mov	r8,fp
    1a1c:	84003fcc 	andi	r16,r16,255
    1a20:	803e9626 	beq	r16,zero,147c <__alt_exception_stack_pointer+0xf800147c>
    1a24:	d8c02b03 	ldbu	r3,172(sp)
    1a28:	d8c02785 	stb	r3,158(sp)
    1a2c:	003e9306 	br	147c <__alt_exception_stack_pointer+0xf800147c>
    1a30:	00c00044 	movi	r3,1
    1a34:	d8c02905 	stb	r3,164(sp)
    1a38:	00c00ac4 	movi	r3,43
    1a3c:	d8c02b05 	stb	r3,172(sp)
    1a40:	ac400007 	ldb	r17,0(r21)
    1a44:	003d4306 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1a48:	84000814 	ori	r16,r16,32
    1a4c:	ac400007 	ldb	r17,0(r21)
    1a50:	003d4006 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1a54:	d8802e17 	ldw	r2,184(sp)
    1a58:	8025883a 	mov	r18,r16
    1a5c:	d8002785 	stb	zero,158(sp)
    1a60:	14000017 	ldw	r16,0(r2)
    1a64:	e011883a 	mov	r8,fp
    1a68:	14c00104 	addi	r19,r2,4
    1a6c:	80042d26 	beq	r16,zero,2b24 <___vfprintf_internal_r+0x1d58>
    1a70:	d8c02a17 	ldw	r3,168(sp)
    1a74:	1803e416 	blt	r3,zero,2a08 <___vfprintf_internal_r+0x1c3c>
    1a78:	180d883a 	mov	r6,r3
    1a7c:	000b883a 	mov	r5,zero
    1a80:	8009883a 	mov	r4,r16
    1a84:	df003d15 	stw	fp,244(sp)
    1a88:	0005a300 	call	5a30 <memchr>
    1a8c:	da003d17 	ldw	r8,244(sp)
    1a90:	10046826 	beq	r2,zero,2c34 <___vfprintf_internal_r+0x1e68>
    1a94:	1405c83a 	sub	r2,r2,r16
    1a98:	d8802b15 	stw	r2,172(sp)
    1a9c:	1003e016 	blt	r2,zero,2a20 <___vfprintf_internal_r+0x1c54>
    1aa0:	df002783 	ldbu	fp,158(sp)
    1aa4:	d8802915 	stw	r2,164(sp)
    1aa8:	dcc02e15 	stw	r19,184(sp)
    1aac:	d8002a15 	stw	zero,168(sp)
    1ab0:	d8003215 	stw	zero,200(sp)
    1ab4:	003ea206 	br	1540 <__alt_exception_stack_pointer+0xf8001540>
    1ab8:	8025883a 	mov	r18,r16
    1abc:	dc002903 	ldbu	r16,164(sp)
    1ac0:	e011883a 	mov	r8,fp
    1ac4:	84003fcc 	andi	r16,r16,255
    1ac8:	803f8d26 	beq	r16,zero,1900 <__alt_exception_stack_pointer+0xf8001900>
    1acc:	d8c02b03 	ldbu	r3,172(sp)
    1ad0:	d8c02785 	stb	r3,158(sp)
    1ad4:	003f8a06 	br	1900 <__alt_exception_stack_pointer+0xf8001900>
    1ad8:	8025883a 	mov	r18,r16
    1adc:	dc002903 	ldbu	r16,164(sp)
    1ae0:	e011883a 	mov	r8,fp
    1ae4:	84003fcc 	andi	r16,r16,255
    1ae8:	8005661e 	bne	r16,zero,3084 <___vfprintf_internal_r+0x22b8>
    1aec:	01000074 	movhi	r4,1
    1af0:	213ecf04 	addi	r4,r4,-1220
    1af4:	d9003915 	stw	r4,228(sp)
    1af8:	9080080c 	andi	r2,r18,32
    1afc:	103f9f1e 	bne	r2,zero,197c <__alt_exception_stack_pointer+0xf800197c>
    1b00:	9080040c 	andi	r2,r18,16
    1b04:	1002eb26 	beq	r2,zero,26b4 <___vfprintf_internal_r+0x18e8>
    1b08:	d8802e17 	ldw	r2,184(sp)
    1b0c:	002d883a 	mov	r22,zero
    1b10:	14c00017 	ldw	r19,0(r2)
    1b14:	10800104 	addi	r2,r2,4
    1b18:	d8802e15 	stw	r2,184(sp)
    1b1c:	003f9c06 	br	1990 <__alt_exception_stack_pointer+0xf8001990>
    1b20:	d8802b07 	ldb	r2,172(sp)
    1b24:	1002e11e 	bne	r2,zero,26ac <___vfprintf_internal_r+0x18e0>
    1b28:	00c00044 	movi	r3,1
    1b2c:	d8c02905 	stb	r3,164(sp)
    1b30:	00c00804 	movi	r3,32
    1b34:	d8c02b05 	stb	r3,172(sp)
    1b38:	ac400007 	ldb	r17,0(r21)
    1b3c:	003d0506 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1b40:	84000054 	ori	r16,r16,1
    1b44:	ac400007 	ldb	r17,0(r21)
    1b48:	003d0206 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1b4c:	8025883a 	mov	r18,r16
    1b50:	dc002903 	ldbu	r16,164(sp)
    1b54:	e011883a 	mov	r8,fp
    1b58:	84003fcc 	andi	r16,r16,255
    1b5c:	803de726 	beq	r16,zero,12fc <__alt_exception_stack_pointer+0xf80012fc>
    1b60:	d8c02b03 	ldbu	r3,172(sp)
    1b64:	d8c02785 	stb	r3,158(sp)
    1b68:	003de406 	br	12fc <__alt_exception_stack_pointer+0xf80012fc>
    1b6c:	84001014 	ori	r16,r16,64
    1b70:	ac400007 	ldb	r17,0(r21)
    1b74:	003cf706 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1b78:	ac400007 	ldb	r17,0(r21)
    1b7c:	00801b04 	movi	r2,108
    1b80:	88838f26 	beq	r17,r2,29c0 <___vfprintf_internal_r+0x1bf4>
    1b84:	84000414 	ori	r16,r16,16
    1b88:	003cf206 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    1b8c:	8025883a 	mov	r18,r16
    1b90:	dc002903 	ldbu	r16,164(sp)
    1b94:	e011883a 	mov	r8,fp
    1b98:	84003fcc 	andi	r16,r16,255
    1b9c:	80053f1e 	bne	r16,zero,309c <___vfprintf_internal_r+0x22d0>
    1ba0:	9080080c 	andi	r2,r18,32
    1ba4:	1002d226 	beq	r2,zero,26f0 <___vfprintf_internal_r+0x1924>
    1ba8:	d9002e17 	ldw	r4,184(sp)
    1bac:	d9402f17 	ldw	r5,188(sp)
    1bb0:	20800017 	ldw	r2,0(r4)
    1bb4:	2807d7fa 	srai	r3,r5,31
    1bb8:	21000104 	addi	r4,r4,4
    1bbc:	d9002e15 	stw	r4,184(sp)
    1bc0:	11400015 	stw	r5,0(r2)
    1bc4:	10c00115 	stw	r3,4(r2)
    1bc8:	003cb806 	br	eac <__alt_exception_stack_pointer+0xf8000eac>
    1bcc:	d8c02e17 	ldw	r3,184(sp)
    1bd0:	d9002e17 	ldw	r4,184(sp)
    1bd4:	8025883a 	mov	r18,r16
    1bd8:	18800017 	ldw	r2,0(r3)
    1bdc:	21000104 	addi	r4,r4,4
    1be0:	00c00044 	movi	r3,1
    1be4:	e011883a 	mov	r8,fp
    1be8:	d8c02915 	stw	r3,164(sp)
    1bec:	d8002785 	stb	zero,158(sp)
    1bf0:	d8801405 	stb	r2,80(sp)
    1bf4:	d9002e15 	stw	r4,184(sp)
    1bf8:	d8c02b15 	stw	r3,172(sp)
    1bfc:	d8002a15 	stw	zero,168(sp)
    1c00:	d8003215 	stw	zero,200(sp)
    1c04:	dc001404 	addi	r16,sp,80
    1c08:	0039883a 	mov	fp,zero
    1c0c:	003e5306 	br	155c <__alt_exception_stack_pointer+0xf800155c>
    1c10:	01000074 	movhi	r4,1
    1c14:	213ecf04 	addi	r4,r4,-1220
    1c18:	0039883a 	mov	fp,zero
    1c1c:	d9003915 	stw	r4,228(sp)
    1c20:	04401e04 	movi	r17,120
    1c24:	003f6906 	br	19cc <__alt_exception_stack_pointer+0xf80019cc>
    1c28:	8025883a 	mov	r18,r16
    1c2c:	dc002903 	ldbu	r16,164(sp)
    1c30:	e011883a 	mov	r8,fp
    1c34:	84003fcc 	andi	r16,r16,255
    1c38:	8005081e 	bne	r16,zero,305c <___vfprintf_internal_r+0x2290>
    1c3c:	883d6126 	beq	r17,zero,11c4 <__alt_exception_stack_pointer+0xf80011c4>
    1c40:	00c00044 	movi	r3,1
    1c44:	d8c02915 	stw	r3,164(sp)
    1c48:	dc401405 	stb	r17,80(sp)
    1c4c:	d8002785 	stb	zero,158(sp)
    1c50:	003fe906 	br	1bf8 <__alt_exception_stack_pointer+0xf8001bf8>
    1c54:	01400074 	movhi	r5,1
    1c58:	297ecf04 	addi	r5,r5,-1220
    1c5c:	d9403915 	stw	r5,228(sp)
    1c60:	d8c02e15 	stw	r3,184(sp)
    1c64:	1025883a 	mov	r18,r2
    1c68:	04401e04 	movi	r17,120
    1c6c:	9d84b03a 	or	r2,r19,r22
    1c70:	1000fc1e 	bne	r2,zero,2064 <___vfprintf_internal_r+0x1298>
    1c74:	0039883a 	mov	fp,zero
    1c78:	00800084 	movi	r2,2
    1c7c:	10803fcc 	andi	r2,r2,255
    1c80:	00c00044 	movi	r3,1
    1c84:	10c20f26 	beq	r2,r3,24c4 <___vfprintf_internal_r+0x16f8>
    1c88:	00c00084 	movi	r3,2
    1c8c:	10fd3326 	beq	r2,r3,115c <__alt_exception_stack_pointer+0xf800115c>
    1c90:	003e0b06 	br	14c0 <__alt_exception_stack_pointer+0xf80014c0>
    1c94:	d8c02017 	ldw	r3,128(sp)
    1c98:	003e7106 	br	1660 <__alt_exception_stack_pointer+0xf8001660>
    1c9c:	00801944 	movi	r2,101
    1ca0:	14407e0e 	bge	r2,r17,1e9c <___vfprintf_internal_r+0x10d0>
    1ca4:	d9003617 	ldw	r4,216(sp)
    1ca8:	d9403817 	ldw	r5,224(sp)
    1cac:	000d883a 	mov	r6,zero
    1cb0:	000f883a 	mov	r7,zero
    1cb4:	d8c03c15 	stw	r3,240(sp)
    1cb8:	da003d15 	stw	r8,244(sp)
    1cbc:	000bd440 	call	bd44 <__eqdf2>
    1cc0:	d8c03c17 	ldw	r3,240(sp)
    1cc4:	da003d17 	ldw	r8,244(sp)
    1cc8:	1000f71e 	bne	r2,zero,20a8 <___vfprintf_internal_r+0x12dc>
    1ccc:	d8801f17 	ldw	r2,124(sp)
    1cd0:	01000074 	movhi	r4,1
    1cd4:	213ed604 	addi	r4,r4,-1192
    1cd8:	18c00044 	addi	r3,r3,1
    1cdc:	10800044 	addi	r2,r2,1
    1ce0:	41000015 	stw	r4,0(r8)
    1ce4:	01000044 	movi	r4,1
    1ce8:	41000115 	stw	r4,4(r8)
    1cec:	d8c02015 	stw	r3,128(sp)
    1cf0:	d8801f15 	stw	r2,124(sp)
    1cf4:	010001c4 	movi	r4,7
    1cf8:	2082b816 	blt	r4,r2,27dc <___vfprintf_internal_r+0x1a10>
    1cfc:	42000204 	addi	r8,r8,8
    1d00:	d8802617 	ldw	r2,152(sp)
    1d04:	d9403317 	ldw	r5,204(sp)
    1d08:	11400216 	blt	r2,r5,1d14 <___vfprintf_internal_r+0xf48>
    1d0c:	9080004c 	andi	r2,r18,1
    1d10:	103eb326 	beq	r2,zero,17e0 <__alt_exception_stack_pointer+0xf80017e0>
    1d14:	d8803717 	ldw	r2,220(sp)
    1d18:	d9003417 	ldw	r4,208(sp)
    1d1c:	d9403717 	ldw	r5,220(sp)
    1d20:	1887883a 	add	r3,r3,r2
    1d24:	d8801f17 	ldw	r2,124(sp)
    1d28:	41000015 	stw	r4,0(r8)
    1d2c:	41400115 	stw	r5,4(r8)
    1d30:	10800044 	addi	r2,r2,1
    1d34:	d8c02015 	stw	r3,128(sp)
    1d38:	d8801f15 	stw	r2,124(sp)
    1d3c:	010001c4 	movi	r4,7
    1d40:	20832916 	blt	r4,r2,29e8 <___vfprintf_internal_r+0x1c1c>
    1d44:	42000204 	addi	r8,r8,8
    1d48:	d8803317 	ldw	r2,204(sp)
    1d4c:	143fffc4 	addi	r16,r2,-1
    1d50:	043ea30e 	bge	zero,r16,17e0 <__alt_exception_stack_pointer+0xf80017e0>
    1d54:	04400404 	movi	r17,16
    1d58:	d8801f17 	ldw	r2,124(sp)
    1d5c:	8c00880e 	bge	r17,r16,1f80 <___vfprintf_internal_r+0x11b4>
    1d60:	01400074 	movhi	r5,1
    1d64:	297ed684 	addi	r5,r5,-1190
    1d68:	d9402c15 	stw	r5,176(sp)
    1d6c:	058001c4 	movi	r22,7
    1d70:	dcc02d17 	ldw	r19,180(sp)
    1d74:	00000306 	br	1d84 <___vfprintf_internal_r+0xfb8>
    1d78:	42000204 	addi	r8,r8,8
    1d7c:	843ffc04 	addi	r16,r16,-16
    1d80:	8c00820e 	bge	r17,r16,1f8c <___vfprintf_internal_r+0x11c0>
    1d84:	18c00404 	addi	r3,r3,16
    1d88:	10800044 	addi	r2,r2,1
    1d8c:	45000015 	stw	r20,0(r8)
    1d90:	44400115 	stw	r17,4(r8)
    1d94:	d8c02015 	stw	r3,128(sp)
    1d98:	d8801f15 	stw	r2,124(sp)
    1d9c:	b0bff60e 	bge	r22,r2,1d78 <__alt_exception_stack_pointer+0xf8001d78>
    1da0:	d9801e04 	addi	r6,sp,120
    1da4:	b80b883a 	mov	r5,r23
    1da8:	9809883a 	mov	r4,r19
    1dac:	000725c0 	call	725c <__sprint_r>
    1db0:	103d0a1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1db4:	d8c02017 	ldw	r3,128(sp)
    1db8:	d8801f17 	ldw	r2,124(sp)
    1dbc:	da000404 	addi	r8,sp,16
    1dc0:	003fee06 	br	1d7c <__alt_exception_stack_pointer+0xf8001d7c>
    1dc4:	d9403117 	ldw	r5,196(sp)
    1dc8:	d8802917 	ldw	r2,164(sp)
    1dcc:	28adc83a 	sub	r22,r5,r2
    1dd0:	05be410e 	bge	zero,r22,16d8 <__alt_exception_stack_pointer+0xf80016d8>
    1dd4:	07000404 	movi	fp,16
    1dd8:	d8801f17 	ldw	r2,124(sp)
    1ddc:	e5838f0e 	bge	fp,r22,2c1c <___vfprintf_internal_r+0x1e50>
    1de0:	01400074 	movhi	r5,1
    1de4:	297ed684 	addi	r5,r5,-1190
    1de8:	dc403015 	stw	r17,192(sp)
    1dec:	d9402c15 	stw	r5,176(sp)
    1df0:	b023883a 	mov	r17,r22
    1df4:	04c001c4 	movi	r19,7
    1df8:	a82d883a 	mov	r22,r21
    1dfc:	902b883a 	mov	r21,r18
    1e00:	8025883a 	mov	r18,r16
    1e04:	dc002d17 	ldw	r16,180(sp)
    1e08:	00000306 	br	1e18 <___vfprintf_internal_r+0x104c>
    1e0c:	8c7ffc04 	addi	r17,r17,-16
    1e10:	42000204 	addi	r8,r8,8
    1e14:	e440110e 	bge	fp,r17,1e5c <___vfprintf_internal_r+0x1090>
    1e18:	18c00404 	addi	r3,r3,16
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	45000015 	stw	r20,0(r8)
    1e24:	47000115 	stw	fp,4(r8)
    1e28:	d8c02015 	stw	r3,128(sp)
    1e2c:	d8801f15 	stw	r2,124(sp)
    1e30:	98bff60e 	bge	r19,r2,1e0c <__alt_exception_stack_pointer+0xf8001e0c>
    1e34:	d9801e04 	addi	r6,sp,120
    1e38:	b80b883a 	mov	r5,r23
    1e3c:	8009883a 	mov	r4,r16
    1e40:	000725c0 	call	725c <__sprint_r>
    1e44:	103ce51e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1e48:	8c7ffc04 	addi	r17,r17,-16
    1e4c:	d8c02017 	ldw	r3,128(sp)
    1e50:	d8801f17 	ldw	r2,124(sp)
    1e54:	da000404 	addi	r8,sp,16
    1e58:	e47fef16 	blt	fp,r17,1e18 <__alt_exception_stack_pointer+0xf8001e18>
    1e5c:	9021883a 	mov	r16,r18
    1e60:	a825883a 	mov	r18,r21
    1e64:	b02b883a 	mov	r21,r22
    1e68:	882d883a 	mov	r22,r17
    1e6c:	dc403017 	ldw	r17,192(sp)
    1e70:	d9002c17 	ldw	r4,176(sp)
    1e74:	1d87883a 	add	r3,r3,r22
    1e78:	10800044 	addi	r2,r2,1
    1e7c:	41000015 	stw	r4,0(r8)
    1e80:	45800115 	stw	r22,4(r8)
    1e84:	d8c02015 	stw	r3,128(sp)
    1e88:	d8801f15 	stw	r2,124(sp)
    1e8c:	010001c4 	movi	r4,7
    1e90:	20818e16 	blt	r4,r2,24cc <___vfprintf_internal_r+0x1700>
    1e94:	42000204 	addi	r8,r8,8
    1e98:	003e0f06 	br	16d8 <__alt_exception_stack_pointer+0xf80016d8>
    1e9c:	d9403317 	ldw	r5,204(sp)
    1ea0:	00800044 	movi	r2,1
    1ea4:	18c00044 	addi	r3,r3,1
    1ea8:	1141530e 	bge	r2,r5,23f8 <___vfprintf_internal_r+0x162c>
    1eac:	dc401f17 	ldw	r17,124(sp)
    1eb0:	00800044 	movi	r2,1
    1eb4:	40800115 	stw	r2,4(r8)
    1eb8:	8c400044 	addi	r17,r17,1
    1ebc:	44000015 	stw	r16,0(r8)
    1ec0:	d8c02015 	stw	r3,128(sp)
    1ec4:	dc401f15 	stw	r17,124(sp)
    1ec8:	008001c4 	movi	r2,7
    1ecc:	14416b16 	blt	r2,r17,247c <___vfprintf_internal_r+0x16b0>
    1ed0:	42000204 	addi	r8,r8,8
    1ed4:	d8803717 	ldw	r2,220(sp)
    1ed8:	d9003417 	ldw	r4,208(sp)
    1edc:	8c400044 	addi	r17,r17,1
    1ee0:	10c7883a 	add	r3,r2,r3
    1ee4:	40800115 	stw	r2,4(r8)
    1ee8:	41000015 	stw	r4,0(r8)
    1eec:	d8c02015 	stw	r3,128(sp)
    1ef0:	dc401f15 	stw	r17,124(sp)
    1ef4:	008001c4 	movi	r2,7
    1ef8:	14416916 	blt	r2,r17,24a0 <___vfprintf_internal_r+0x16d4>
    1efc:	45800204 	addi	r22,r8,8
    1f00:	d9003617 	ldw	r4,216(sp)
    1f04:	d9403817 	ldw	r5,224(sp)
    1f08:	000d883a 	mov	r6,zero
    1f0c:	000f883a 	mov	r7,zero
    1f10:	d8c03c15 	stw	r3,240(sp)
    1f14:	000bd440 	call	bd44 <__eqdf2>
    1f18:	d8c03c17 	ldw	r3,240(sp)
    1f1c:	1000bc26 	beq	r2,zero,2210 <___vfprintf_internal_r+0x1444>
    1f20:	d9403317 	ldw	r5,204(sp)
    1f24:	84000044 	addi	r16,r16,1
    1f28:	8c400044 	addi	r17,r17,1
    1f2c:	28bfffc4 	addi	r2,r5,-1
    1f30:	1887883a 	add	r3,r3,r2
    1f34:	b0800115 	stw	r2,4(r22)
    1f38:	b4000015 	stw	r16,0(r22)
    1f3c:	d8c02015 	stw	r3,128(sp)
    1f40:	dc401f15 	stw	r17,124(sp)
    1f44:	008001c4 	movi	r2,7
    1f48:	14414316 	blt	r2,r17,2458 <___vfprintf_internal_r+0x168c>
    1f4c:	b5800204 	addi	r22,r22,8
    1f50:	d9003a17 	ldw	r4,232(sp)
    1f54:	df0022c4 	addi	fp,sp,139
    1f58:	8c400044 	addi	r17,r17,1
    1f5c:	20c7883a 	add	r3,r4,r3
    1f60:	b7000015 	stw	fp,0(r22)
    1f64:	b1000115 	stw	r4,4(r22)
    1f68:	d8c02015 	stw	r3,128(sp)
    1f6c:	dc401f15 	stw	r17,124(sp)
    1f70:	008001c4 	movi	r2,7
    1f74:	14400e16 	blt	r2,r17,1fb0 <___vfprintf_internal_r+0x11e4>
    1f78:	b2000204 	addi	r8,r22,8
    1f7c:	003e1806 	br	17e0 <__alt_exception_stack_pointer+0xf80017e0>
    1f80:	01000074 	movhi	r4,1
    1f84:	213ed684 	addi	r4,r4,-1190
    1f88:	d9002c15 	stw	r4,176(sp)
    1f8c:	d9002c17 	ldw	r4,176(sp)
    1f90:	1c07883a 	add	r3,r3,r16
    1f94:	44000115 	stw	r16,4(r8)
    1f98:	41000015 	stw	r4,0(r8)
    1f9c:	10800044 	addi	r2,r2,1
    1fa0:	d8c02015 	stw	r3,128(sp)
    1fa4:	d8801f15 	stw	r2,124(sp)
    1fa8:	010001c4 	movi	r4,7
    1fac:	20be0b0e 	bge	r4,r2,17dc <__alt_exception_stack_pointer+0xf80017dc>
    1fb0:	d9002d17 	ldw	r4,180(sp)
    1fb4:	d9801e04 	addi	r6,sp,120
    1fb8:	b80b883a 	mov	r5,r23
    1fbc:	000725c0 	call	725c <__sprint_r>
    1fc0:	103c861e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1fc4:	d8c02017 	ldw	r3,128(sp)
    1fc8:	da000404 	addi	r8,sp,16
    1fcc:	003e0406 	br	17e0 <__alt_exception_stack_pointer+0xf80017e0>
    1fd0:	d9002d17 	ldw	r4,180(sp)
    1fd4:	d9801e04 	addi	r6,sp,120
    1fd8:	b80b883a 	mov	r5,r23
    1fdc:	000725c0 	call	725c <__sprint_r>
    1fe0:	103e3b26 	beq	r2,zero,18d0 <__alt_exception_stack_pointer+0xf80018d0>
    1fe4:	003c7d06 	br	11dc <__alt_exception_stack_pointer+0xf80011dc>
    1fe8:	d9002d17 	ldw	r4,180(sp)
    1fec:	d9801e04 	addi	r6,sp,120
    1ff0:	b80b883a 	mov	r5,r23
    1ff4:	000725c0 	call	725c <__sprint_r>
    1ff8:	103c781e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    1ffc:	d8c02017 	ldw	r3,128(sp)
    2000:	da000404 	addi	r8,sp,16
    2004:	003de906 	br	17ac <__alt_exception_stack_pointer+0xf80017ac>
    2008:	d9002d17 	ldw	r4,180(sp)
    200c:	d9801e04 	addi	r6,sp,120
    2010:	b80b883a 	mov	r5,r23
    2014:	000725c0 	call	725c <__sprint_r>
    2018:	103c701e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    201c:	d8c02017 	ldw	r3,128(sp)
    2020:	da000404 	addi	r8,sp,16
    2024:	003d9b06 	br	1694 <__alt_exception_stack_pointer+0xf8001694>
    2028:	d9002d17 	ldw	r4,180(sp)
    202c:	d9801e04 	addi	r6,sp,120
    2030:	b80b883a 	mov	r5,r23
    2034:	000725c0 	call	725c <__sprint_r>
    2038:	103c681e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    203c:	d8c02017 	ldw	r3,128(sp)
    2040:	da000404 	addi	r8,sp,16
    2044:	003da106 	br	16cc <__alt_exception_stack_pointer+0xf80016cc>
    2048:	d9402a17 	ldw	r5,168(sp)
    204c:	d8002785 	stb	zero,158(sp)
    2050:	283f0616 	blt	r5,zero,1c6c <__alt_exception_stack_pointer+0xf8001c6c>
    2054:	00ffdfc4 	movi	r3,-129
    2058:	9d84b03a 	or	r2,r19,r22
    205c:	90e4703a 	and	r18,r18,r3
    2060:	103c3b26 	beq	r2,zero,1150 <__alt_exception_stack_pointer+0xf8001150>
    2064:	0039883a 	mov	fp,zero
    2068:	003e5806 	br	19cc <__alt_exception_stack_pointer+0xf80019cc>
    206c:	9080040c 	andi	r2,r18,16
    2070:	1001b326 	beq	r2,zero,2740 <___vfprintf_internal_r+0x1974>
    2074:	d8c02e17 	ldw	r3,184(sp)
    2078:	d9002a17 	ldw	r4,168(sp)
    207c:	d8002785 	stb	zero,158(sp)
    2080:	18800104 	addi	r2,r3,4
    2084:	1cc00017 	ldw	r19,0(r3)
    2088:	002d883a 	mov	r22,zero
    208c:	2001b516 	blt	r4,zero,2764 <___vfprintf_internal_r+0x1998>
    2090:	00ffdfc4 	movi	r3,-129
    2094:	d8802e15 	stw	r2,184(sp)
    2098:	90e4703a 	and	r18,r18,r3
    209c:	983d0526 	beq	r19,zero,14b4 <__alt_exception_stack_pointer+0xf80014b4>
    20a0:	0039883a 	mov	fp,zero
    20a4:	003d0806 	br	14c8 <__alt_exception_stack_pointer+0xf80014c8>
    20a8:	dc402617 	ldw	r17,152(sp)
    20ac:	0441d30e 	bge	zero,r17,27fc <___vfprintf_internal_r+0x1a30>
    20b0:	dc403217 	ldw	r17,200(sp)
    20b4:	d8803317 	ldw	r2,204(sp)
    20b8:	1440010e 	bge	r2,r17,20c0 <___vfprintf_internal_r+0x12f4>
    20bc:	1023883a 	mov	r17,r2
    20c0:	04400a0e 	bge	zero,r17,20ec <___vfprintf_internal_r+0x1320>
    20c4:	d8801f17 	ldw	r2,124(sp)
    20c8:	1c47883a 	add	r3,r3,r17
    20cc:	44000015 	stw	r16,0(r8)
    20d0:	10800044 	addi	r2,r2,1
    20d4:	44400115 	stw	r17,4(r8)
    20d8:	d8c02015 	stw	r3,128(sp)
    20dc:	d8801f15 	stw	r2,124(sp)
    20e0:	010001c4 	movi	r4,7
    20e4:	20826516 	blt	r4,r2,2a7c <___vfprintf_internal_r+0x1cb0>
    20e8:	42000204 	addi	r8,r8,8
    20ec:	88026116 	blt	r17,zero,2a74 <___vfprintf_internal_r+0x1ca8>
    20f0:	d9003217 	ldw	r4,200(sp)
    20f4:	2463c83a 	sub	r17,r4,r17
    20f8:	04407b0e 	bge	zero,r17,22e8 <___vfprintf_internal_r+0x151c>
    20fc:	05800404 	movi	r22,16
    2100:	d8801f17 	ldw	r2,124(sp)
    2104:	b4419d0e 	bge	r22,r17,277c <___vfprintf_internal_r+0x19b0>
    2108:	01000074 	movhi	r4,1
    210c:	213ed684 	addi	r4,r4,-1190
    2110:	d9002c15 	stw	r4,176(sp)
    2114:	070001c4 	movi	fp,7
    2118:	dcc02d17 	ldw	r19,180(sp)
    211c:	00000306 	br	212c <___vfprintf_internal_r+0x1360>
    2120:	42000204 	addi	r8,r8,8
    2124:	8c7ffc04 	addi	r17,r17,-16
    2128:	b441970e 	bge	r22,r17,2788 <___vfprintf_internal_r+0x19bc>
    212c:	18c00404 	addi	r3,r3,16
    2130:	10800044 	addi	r2,r2,1
    2134:	45000015 	stw	r20,0(r8)
    2138:	45800115 	stw	r22,4(r8)
    213c:	d8c02015 	stw	r3,128(sp)
    2140:	d8801f15 	stw	r2,124(sp)
    2144:	e0bff60e 	bge	fp,r2,2120 <__alt_exception_stack_pointer+0xf8002120>
    2148:	d9801e04 	addi	r6,sp,120
    214c:	b80b883a 	mov	r5,r23
    2150:	9809883a 	mov	r4,r19
    2154:	000725c0 	call	725c <__sprint_r>
    2158:	103c201e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    215c:	d8c02017 	ldw	r3,128(sp)
    2160:	d8801f17 	ldw	r2,124(sp)
    2164:	da000404 	addi	r8,sp,16
    2168:	003fee06 	br	2124 <__alt_exception_stack_pointer+0xf8002124>
    216c:	d9002d17 	ldw	r4,180(sp)
    2170:	d9801e04 	addi	r6,sp,120
    2174:	b80b883a 	mov	r5,r23
    2178:	000725c0 	call	725c <__sprint_r>
    217c:	103c171e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2180:	d8c02017 	ldw	r3,128(sp)
    2184:	df002787 	ldb	fp,158(sp)
    2188:	da000404 	addi	r8,sp,16
    218c:	003d3406 	br	1660 <__alt_exception_stack_pointer+0xf8001660>
    2190:	9080040c 	andi	r2,r18,16
    2194:	10016126 	beq	r2,zero,271c <___vfprintf_internal_r+0x1950>
    2198:	d9402e17 	ldw	r5,184(sp)
    219c:	2cc00017 	ldw	r19,0(r5)
    21a0:	29400104 	addi	r5,r5,4
    21a4:	d9402e15 	stw	r5,184(sp)
    21a8:	982dd7fa 	srai	r22,r19,31
    21ac:	b005883a 	mov	r2,r22
    21b0:	003c5a06 	br	131c <__alt_exception_stack_pointer+0xf800131c>
    21b4:	9080040c 	andi	r2,r18,16
    21b8:	10003526 	beq	r2,zero,2290 <___vfprintf_internal_r+0x14c4>
    21bc:	d8c02e17 	ldw	r3,184(sp)
    21c0:	d9002a17 	ldw	r4,168(sp)
    21c4:	d8002785 	stb	zero,158(sp)
    21c8:	18800104 	addi	r2,r3,4
    21cc:	1cc00017 	ldw	r19,0(r3)
    21d0:	002d883a 	mov	r22,zero
    21d4:	20003716 	blt	r4,zero,22b4 <___vfprintf_internal_r+0x14e8>
    21d8:	00ffdfc4 	movi	r3,-129
    21dc:	d8802e15 	stw	r2,184(sp)
    21e0:	90e4703a 	and	r18,r18,r3
    21e4:	0039883a 	mov	fp,zero
    21e8:	983dd426 	beq	r19,zero,193c <__alt_exception_stack_pointer+0xf800193c>
    21ec:	00800244 	movi	r2,9
    21f0:	14fc5336 	bltu	r2,r19,1340 <__alt_exception_stack_pointer+0xf8001340>
    21f4:	d8c02817 	ldw	r3,160(sp)
    21f8:	dc001dc4 	addi	r16,sp,119
    21fc:	9cc00c04 	addi	r19,r19,48
    2200:	1c07c83a 	sub	r3,r3,r16
    2204:	dcc01dc5 	stb	r19,119(sp)
    2208:	d8c02b15 	stw	r3,172(sp)
    220c:	003cc606 	br	1528 <__alt_exception_stack_pointer+0xf8001528>
    2210:	d8803317 	ldw	r2,204(sp)
    2214:	143fffc4 	addi	r16,r2,-1
    2218:	043f4d0e 	bge	zero,r16,1f50 <__alt_exception_stack_pointer+0xf8001f50>
    221c:	07000404 	movi	fp,16
    2220:	e400810e 	bge	fp,r16,2428 <___vfprintf_internal_r+0x165c>
    2224:	01400074 	movhi	r5,1
    2228:	297ed684 	addi	r5,r5,-1190
    222c:	d9402c15 	stw	r5,176(sp)
    2230:	01c001c4 	movi	r7,7
    2234:	dcc02d17 	ldw	r19,180(sp)
    2238:	00000306 	br	2248 <___vfprintf_internal_r+0x147c>
    223c:	b5800204 	addi	r22,r22,8
    2240:	843ffc04 	addi	r16,r16,-16
    2244:	e4007b0e 	bge	fp,r16,2434 <___vfprintf_internal_r+0x1668>
    2248:	18c00404 	addi	r3,r3,16
    224c:	8c400044 	addi	r17,r17,1
    2250:	b5000015 	stw	r20,0(r22)
    2254:	b7000115 	stw	fp,4(r22)
    2258:	d8c02015 	stw	r3,128(sp)
    225c:	dc401f15 	stw	r17,124(sp)
    2260:	3c7ff60e 	bge	r7,r17,223c <__alt_exception_stack_pointer+0xf800223c>
    2264:	d9801e04 	addi	r6,sp,120
    2268:	b80b883a 	mov	r5,r23
    226c:	9809883a 	mov	r4,r19
    2270:	d9c03c15 	stw	r7,240(sp)
    2274:	000725c0 	call	725c <__sprint_r>
    2278:	d9c03c17 	ldw	r7,240(sp)
    227c:	103bd71e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2280:	d8c02017 	ldw	r3,128(sp)
    2284:	dc401f17 	ldw	r17,124(sp)
    2288:	dd800404 	addi	r22,sp,16
    228c:	003fec06 	br	2240 <__alt_exception_stack_pointer+0xf8002240>
    2290:	9080100c 	andi	r2,r18,64
    2294:	d8002785 	stb	zero,158(sp)
    2298:	10010e26 	beq	r2,zero,26d4 <___vfprintf_internal_r+0x1908>
    229c:	d9402e17 	ldw	r5,184(sp)
    22a0:	d8c02a17 	ldw	r3,168(sp)
    22a4:	002d883a 	mov	r22,zero
    22a8:	28800104 	addi	r2,r5,4
    22ac:	2cc0000b 	ldhu	r19,0(r5)
    22b0:	183fc90e 	bge	r3,zero,21d8 <__alt_exception_stack_pointer+0xf80021d8>
    22b4:	d8802e15 	stw	r2,184(sp)
    22b8:	0039883a 	mov	fp,zero
    22bc:	9d84b03a 	or	r2,r19,r22
    22c0:	103c1e1e 	bne	r2,zero,133c <__alt_exception_stack_pointer+0xf800133c>
    22c4:	00800044 	movi	r2,1
    22c8:	003e6c06 	br	1c7c <__alt_exception_stack_pointer+0xf8001c7c>
    22cc:	d9002d17 	ldw	r4,180(sp)
    22d0:	d9801e04 	addi	r6,sp,120
    22d4:	b80b883a 	mov	r5,r23
    22d8:	000725c0 	call	725c <__sprint_r>
    22dc:	103bbf1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    22e0:	d8c02017 	ldw	r3,128(sp)
    22e4:	da000404 	addi	r8,sp,16
    22e8:	d9003217 	ldw	r4,200(sp)
    22ec:	d8802617 	ldw	r2,152(sp)
    22f0:	d9403317 	ldw	r5,204(sp)
    22f4:	8123883a 	add	r17,r16,r4
    22f8:	11400216 	blt	r2,r5,2304 <___vfprintf_internal_r+0x1538>
    22fc:	9100004c 	andi	r4,r18,1
    2300:	20000d26 	beq	r4,zero,2338 <___vfprintf_internal_r+0x156c>
    2304:	d9003717 	ldw	r4,220(sp)
    2308:	d9403417 	ldw	r5,208(sp)
    230c:	1907883a 	add	r3,r3,r4
    2310:	d9001f17 	ldw	r4,124(sp)
    2314:	41400015 	stw	r5,0(r8)
    2318:	d9403717 	ldw	r5,220(sp)
    231c:	21000044 	addi	r4,r4,1
    2320:	d8c02015 	stw	r3,128(sp)
    2324:	41400115 	stw	r5,4(r8)
    2328:	d9001f15 	stw	r4,124(sp)
    232c:	014001c4 	movi	r5,7
    2330:	2901e816 	blt	r5,r4,2ad4 <___vfprintf_internal_r+0x1d08>
    2334:	42000204 	addi	r8,r8,8
    2338:	d9003317 	ldw	r4,204(sp)
    233c:	8121883a 	add	r16,r16,r4
    2340:	2085c83a 	sub	r2,r4,r2
    2344:	8461c83a 	sub	r16,r16,r17
    2348:	1400010e 	bge	r2,r16,2350 <___vfprintf_internal_r+0x1584>
    234c:	1021883a 	mov	r16,r2
    2350:	04000a0e 	bge	zero,r16,237c <___vfprintf_internal_r+0x15b0>
    2354:	d9001f17 	ldw	r4,124(sp)
    2358:	1c07883a 	add	r3,r3,r16
    235c:	44400015 	stw	r17,0(r8)
    2360:	21000044 	addi	r4,r4,1
    2364:	44000115 	stw	r16,4(r8)
    2368:	d8c02015 	stw	r3,128(sp)
    236c:	d9001f15 	stw	r4,124(sp)
    2370:	014001c4 	movi	r5,7
    2374:	2901fb16 	blt	r5,r4,2b64 <___vfprintf_internal_r+0x1d98>
    2378:	42000204 	addi	r8,r8,8
    237c:	8001f716 	blt	r16,zero,2b5c <___vfprintf_internal_r+0x1d90>
    2380:	1421c83a 	sub	r16,r2,r16
    2384:	043d160e 	bge	zero,r16,17e0 <__alt_exception_stack_pointer+0xf80017e0>
    2388:	04400404 	movi	r17,16
    238c:	d8801f17 	ldw	r2,124(sp)
    2390:	8c3efb0e 	bge	r17,r16,1f80 <__alt_exception_stack_pointer+0xf8001f80>
    2394:	01400074 	movhi	r5,1
    2398:	297ed684 	addi	r5,r5,-1190
    239c:	d9402c15 	stw	r5,176(sp)
    23a0:	058001c4 	movi	r22,7
    23a4:	dcc02d17 	ldw	r19,180(sp)
    23a8:	00000306 	br	23b8 <___vfprintf_internal_r+0x15ec>
    23ac:	42000204 	addi	r8,r8,8
    23b0:	843ffc04 	addi	r16,r16,-16
    23b4:	8c3ef50e 	bge	r17,r16,1f8c <__alt_exception_stack_pointer+0xf8001f8c>
    23b8:	18c00404 	addi	r3,r3,16
    23bc:	10800044 	addi	r2,r2,1
    23c0:	45000015 	stw	r20,0(r8)
    23c4:	44400115 	stw	r17,4(r8)
    23c8:	d8c02015 	stw	r3,128(sp)
    23cc:	d8801f15 	stw	r2,124(sp)
    23d0:	b0bff60e 	bge	r22,r2,23ac <__alt_exception_stack_pointer+0xf80023ac>
    23d4:	d9801e04 	addi	r6,sp,120
    23d8:	b80b883a 	mov	r5,r23
    23dc:	9809883a 	mov	r4,r19
    23e0:	000725c0 	call	725c <__sprint_r>
    23e4:	103b7d1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    23e8:	d8c02017 	ldw	r3,128(sp)
    23ec:	d8801f17 	ldw	r2,124(sp)
    23f0:	da000404 	addi	r8,sp,16
    23f4:	003fee06 	br	23b0 <__alt_exception_stack_pointer+0xf80023b0>
    23f8:	9088703a 	and	r4,r18,r2
    23fc:	203eab1e 	bne	r4,zero,1eac <__alt_exception_stack_pointer+0xf8001eac>
    2400:	dc401f17 	ldw	r17,124(sp)
    2404:	40800115 	stw	r2,4(r8)
    2408:	44000015 	stw	r16,0(r8)
    240c:	8c400044 	addi	r17,r17,1
    2410:	d8c02015 	stw	r3,128(sp)
    2414:	dc401f15 	stw	r17,124(sp)
    2418:	008001c4 	movi	r2,7
    241c:	14400e16 	blt	r2,r17,2458 <___vfprintf_internal_r+0x168c>
    2420:	45800204 	addi	r22,r8,8
    2424:	003eca06 	br	1f50 <__alt_exception_stack_pointer+0xf8001f50>
    2428:	01000074 	movhi	r4,1
    242c:	213ed684 	addi	r4,r4,-1190
    2430:	d9002c15 	stw	r4,176(sp)
    2434:	d8802c17 	ldw	r2,176(sp)
    2438:	1c07883a 	add	r3,r3,r16
    243c:	8c400044 	addi	r17,r17,1
    2440:	b0800015 	stw	r2,0(r22)
    2444:	b4000115 	stw	r16,4(r22)
    2448:	d8c02015 	stw	r3,128(sp)
    244c:	dc401f15 	stw	r17,124(sp)
    2450:	008001c4 	movi	r2,7
    2454:	147ebd0e 	bge	r2,r17,1f4c <__alt_exception_stack_pointer+0xf8001f4c>
    2458:	d9002d17 	ldw	r4,180(sp)
    245c:	d9801e04 	addi	r6,sp,120
    2460:	b80b883a 	mov	r5,r23
    2464:	000725c0 	call	725c <__sprint_r>
    2468:	103b5c1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    246c:	d8c02017 	ldw	r3,128(sp)
    2470:	dc401f17 	ldw	r17,124(sp)
    2474:	dd800404 	addi	r22,sp,16
    2478:	003eb506 	br	1f50 <__alt_exception_stack_pointer+0xf8001f50>
    247c:	d9002d17 	ldw	r4,180(sp)
    2480:	d9801e04 	addi	r6,sp,120
    2484:	b80b883a 	mov	r5,r23
    2488:	000725c0 	call	725c <__sprint_r>
    248c:	103b531e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2490:	d8c02017 	ldw	r3,128(sp)
    2494:	dc401f17 	ldw	r17,124(sp)
    2498:	da000404 	addi	r8,sp,16
    249c:	003e8d06 	br	1ed4 <__alt_exception_stack_pointer+0xf8001ed4>
    24a0:	d9002d17 	ldw	r4,180(sp)
    24a4:	d9801e04 	addi	r6,sp,120
    24a8:	b80b883a 	mov	r5,r23
    24ac:	000725c0 	call	725c <__sprint_r>
    24b0:	103b4a1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    24b4:	d8c02017 	ldw	r3,128(sp)
    24b8:	dc401f17 	ldw	r17,124(sp)
    24bc:	dd800404 	addi	r22,sp,16
    24c0:	003e8f06 	br	1f00 <__alt_exception_stack_pointer+0xf8001f00>
    24c4:	0027883a 	mov	r19,zero
    24c8:	003f4a06 	br	21f4 <__alt_exception_stack_pointer+0xf80021f4>
    24cc:	d9002d17 	ldw	r4,180(sp)
    24d0:	d9801e04 	addi	r6,sp,120
    24d4:	b80b883a 	mov	r5,r23
    24d8:	000725c0 	call	725c <__sprint_r>
    24dc:	103b3f1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    24e0:	d8c02017 	ldw	r3,128(sp)
    24e4:	da000404 	addi	r8,sp,16
    24e8:	003c7b06 	br	16d8 <__alt_exception_stack_pointer+0xf80016d8>
    24ec:	d9402a17 	ldw	r5,168(sp)
    24f0:	04e7c83a 	sub	r19,zero,r19
    24f4:	07000b44 	movi	fp,45
    24f8:	9804c03a 	cmpne	r2,r19,zero
    24fc:	05adc83a 	sub	r22,zero,r22
    2500:	df002785 	stb	fp,158(sp)
    2504:	b0adc83a 	sub	r22,r22,r2
    2508:	28017b16 	blt	r5,zero,2af8 <___vfprintf_internal_r+0x1d2c>
    250c:	00bfdfc4 	movi	r2,-129
    2510:	90a4703a 	and	r18,r18,r2
    2514:	003b8906 	br	133c <__alt_exception_stack_pointer+0xf800133c>
    2518:	d9003617 	ldw	r4,216(sp)
    251c:	d9403817 	ldw	r5,224(sp)
    2520:	da003d15 	stw	r8,244(sp)
    2524:	0006e3c0 	call	6e3c <__fpclassifyd>
    2528:	da003d17 	ldw	r8,244(sp)
    252c:	1000f026 	beq	r2,zero,28f0 <___vfprintf_internal_r+0x1b24>
    2530:	d9002a17 	ldw	r4,168(sp)
    2534:	05bff7c4 	movi	r22,-33
    2538:	00bfffc4 	movi	r2,-1
    253c:	8dac703a 	and	r22,r17,r22
    2540:	20820026 	beq	r4,r2,2d44 <___vfprintf_internal_r+0x1f78>
    2544:	008011c4 	movi	r2,71
    2548:	b081f726 	beq	r22,r2,2d28 <___vfprintf_internal_r+0x1f5c>
    254c:	d9003817 	ldw	r4,224(sp)
    2550:	90c04014 	ori	r3,r18,256
    2554:	d8c02c15 	stw	r3,176(sp)
    2558:	20021516 	blt	r4,zero,2db0 <___vfprintf_internal_r+0x1fe4>
    255c:	dcc03817 	ldw	r19,224(sp)
    2560:	d8002905 	stb	zero,164(sp)
    2564:	00801984 	movi	r2,102
    2568:	8881f926 	beq	r17,r2,2d50 <___vfprintf_internal_r+0x1f84>
    256c:	00801184 	movi	r2,70
    2570:	88821c26 	beq	r17,r2,2de4 <___vfprintf_internal_r+0x2018>
    2574:	00801144 	movi	r2,69
    2578:	b081ef26 	beq	r22,r2,2d38 <___vfprintf_internal_r+0x1f6c>
    257c:	d8c02a17 	ldw	r3,168(sp)
    2580:	d8802104 	addi	r2,sp,132
    2584:	d8800315 	stw	r2,12(sp)
    2588:	d9403617 	ldw	r5,216(sp)
    258c:	d8802504 	addi	r2,sp,148
    2590:	d9002d17 	ldw	r4,180(sp)
    2594:	d8800215 	stw	r2,8(sp)
    2598:	d8802604 	addi	r2,sp,152
    259c:	d8c00015 	stw	r3,0(sp)
    25a0:	d8800115 	stw	r2,4(sp)
    25a4:	01c00084 	movi	r7,2
    25a8:	980d883a 	mov	r6,r19
    25ac:	d8c03c15 	stw	r3,240(sp)
    25b0:	da003d15 	stw	r8,244(sp)
    25b4:	00034fc0 	call	34fc <_dtoa_r>
    25b8:	1021883a 	mov	r16,r2
    25bc:	008019c4 	movi	r2,103
    25c0:	d8c03c17 	ldw	r3,240(sp)
    25c4:	da003d17 	ldw	r8,244(sp)
    25c8:	88817126 	beq	r17,r2,2b90 <___vfprintf_internal_r+0x1dc4>
    25cc:	008011c4 	movi	r2,71
    25d0:	88829126 	beq	r17,r2,3018 <___vfprintf_internal_r+0x224c>
    25d4:	80f9883a 	add	fp,r16,r3
    25d8:	d9003617 	ldw	r4,216(sp)
    25dc:	000d883a 	mov	r6,zero
    25e0:	000f883a 	mov	r7,zero
    25e4:	980b883a 	mov	r5,r19
    25e8:	da003d15 	stw	r8,244(sp)
    25ec:	000bd440 	call	bd44 <__eqdf2>
    25f0:	da003d17 	ldw	r8,244(sp)
    25f4:	10018d26 	beq	r2,zero,2c2c <___vfprintf_internal_r+0x1e60>
    25f8:	d8802117 	ldw	r2,132(sp)
    25fc:	1700062e 	bgeu	r2,fp,2618 <___vfprintf_internal_r+0x184c>
    2600:	01000c04 	movi	r4,48
    2604:	10c00044 	addi	r3,r2,1
    2608:	d8c02115 	stw	r3,132(sp)
    260c:	11000005 	stb	r4,0(r2)
    2610:	d8802117 	ldw	r2,132(sp)
    2614:	173ffb36 	bltu	r2,fp,2604 <__alt_exception_stack_pointer+0xf8002604>
    2618:	1405c83a 	sub	r2,r2,r16
    261c:	d8803315 	stw	r2,204(sp)
    2620:	008011c4 	movi	r2,71
    2624:	b0817626 	beq	r22,r2,2c00 <___vfprintf_internal_r+0x1e34>
    2628:	00801944 	movi	r2,101
    262c:	1442800e 	bge	r2,r17,3030 <___vfprintf_internal_r+0x2264>
    2630:	d8c02617 	ldw	r3,152(sp)
    2634:	00801984 	movi	r2,102
    2638:	d8c03215 	stw	r3,200(sp)
    263c:	8881fe26 	beq	r17,r2,2e38 <___vfprintf_internal_r+0x206c>
    2640:	d8c03217 	ldw	r3,200(sp)
    2644:	d9003317 	ldw	r4,204(sp)
    2648:	1901dd16 	blt	r3,r4,2dc0 <___vfprintf_internal_r+0x1ff4>
    264c:	9480004c 	andi	r18,r18,1
    2650:	90022b1e 	bne	r18,zero,2f00 <___vfprintf_internal_r+0x2134>
    2654:	1805883a 	mov	r2,r3
    2658:	18028316 	blt	r3,zero,3068 <___vfprintf_internal_r+0x229c>
    265c:	d8c03217 	ldw	r3,200(sp)
    2660:	044019c4 	movi	r17,103
    2664:	d8c02b15 	stw	r3,172(sp)
    2668:	df002907 	ldb	fp,164(sp)
    266c:	e001531e 	bne	fp,zero,2bbc <___vfprintf_internal_r+0x1df0>
    2670:	df002783 	ldbu	fp,158(sp)
    2674:	d8802915 	stw	r2,164(sp)
    2678:	dc802c17 	ldw	r18,176(sp)
    267c:	d8002a15 	stw	zero,168(sp)
    2680:	003baf06 	br	1540 <__alt_exception_stack_pointer+0xf8001540>
    2684:	d8c02e17 	ldw	r3,184(sp)
    2688:	d9002e17 	ldw	r4,184(sp)
    268c:	d9402e17 	ldw	r5,184(sp)
    2690:	18c00017 	ldw	r3,0(r3)
    2694:	21000117 	ldw	r4,4(r4)
    2698:	29400204 	addi	r5,r5,8
    269c:	d8c03615 	stw	r3,216(sp)
    26a0:	d9003815 	stw	r4,224(sp)
    26a4:	d9402e15 	stw	r5,184(sp)
    26a8:	003b5006 	br	13ec <__alt_exception_stack_pointer+0xf80013ec>
    26ac:	ac400007 	ldb	r17,0(r21)
    26b0:	003a2806 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    26b4:	9080100c 	andi	r2,r18,64
    26b8:	1000a826 	beq	r2,zero,295c <___vfprintf_internal_r+0x1b90>
    26bc:	d8c02e17 	ldw	r3,184(sp)
    26c0:	002d883a 	mov	r22,zero
    26c4:	1cc0000b 	ldhu	r19,0(r3)
    26c8:	18c00104 	addi	r3,r3,4
    26cc:	d8c02e15 	stw	r3,184(sp)
    26d0:	003caf06 	br	1990 <__alt_exception_stack_pointer+0xf8001990>
    26d4:	d9002e17 	ldw	r4,184(sp)
    26d8:	d9402a17 	ldw	r5,168(sp)
    26dc:	002d883a 	mov	r22,zero
    26e0:	20800104 	addi	r2,r4,4
    26e4:	24c00017 	ldw	r19,0(r4)
    26e8:	283ebb0e 	bge	r5,zero,21d8 <__alt_exception_stack_pointer+0xf80021d8>
    26ec:	003ef106 	br	22b4 <__alt_exception_stack_pointer+0xf80022b4>
    26f0:	9080040c 	andi	r2,r18,16
    26f4:	1000921e 	bne	r2,zero,2940 <___vfprintf_internal_r+0x1b74>
    26f8:	9480100c 	andi	r18,r18,64
    26fc:	90013926 	beq	r18,zero,2be4 <___vfprintf_internal_r+0x1e18>
    2700:	d9402e17 	ldw	r5,184(sp)
    2704:	d8c02f17 	ldw	r3,188(sp)
    2708:	28800017 	ldw	r2,0(r5)
    270c:	29400104 	addi	r5,r5,4
    2710:	d9402e15 	stw	r5,184(sp)
    2714:	10c0000d 	sth	r3,0(r2)
    2718:	0039e406 	br	eac <__alt_exception_stack_pointer+0xf8000eac>
    271c:	9080100c 	andi	r2,r18,64
    2720:	10008026 	beq	r2,zero,2924 <___vfprintf_internal_r+0x1b58>
    2724:	d8802e17 	ldw	r2,184(sp)
    2728:	14c0000f 	ldh	r19,0(r2)
    272c:	10800104 	addi	r2,r2,4
    2730:	d8802e15 	stw	r2,184(sp)
    2734:	982dd7fa 	srai	r22,r19,31
    2738:	b005883a 	mov	r2,r22
    273c:	003af706 	br	131c <__alt_exception_stack_pointer+0xf800131c>
    2740:	9080100c 	andi	r2,r18,64
    2744:	d8002785 	stb	zero,158(sp)
    2748:	10008a1e 	bne	r2,zero,2974 <___vfprintf_internal_r+0x1ba8>
    274c:	d9002e17 	ldw	r4,184(sp)
    2750:	d9402a17 	ldw	r5,168(sp)
    2754:	002d883a 	mov	r22,zero
    2758:	20800104 	addi	r2,r4,4
    275c:	24c00017 	ldw	r19,0(r4)
    2760:	283e4b0e 	bge	r5,zero,2090 <__alt_exception_stack_pointer+0xf8002090>
    2764:	9d86b03a 	or	r3,r19,r22
    2768:	d8802e15 	stw	r2,184(sp)
    276c:	183e4c1e 	bne	r3,zero,20a0 <__alt_exception_stack_pointer+0xf80020a0>
    2770:	0039883a 	mov	fp,zero
    2774:	0005883a 	mov	r2,zero
    2778:	003d4006 	br	1c7c <__alt_exception_stack_pointer+0xf8001c7c>
    277c:	01400074 	movhi	r5,1
    2780:	297ed684 	addi	r5,r5,-1190
    2784:	d9402c15 	stw	r5,176(sp)
    2788:	d9402c17 	ldw	r5,176(sp)
    278c:	1c47883a 	add	r3,r3,r17
    2790:	10800044 	addi	r2,r2,1
    2794:	41400015 	stw	r5,0(r8)
    2798:	44400115 	stw	r17,4(r8)
    279c:	d8c02015 	stw	r3,128(sp)
    27a0:	d8801f15 	stw	r2,124(sp)
    27a4:	010001c4 	movi	r4,7
    27a8:	20bec816 	blt	r4,r2,22cc <__alt_exception_stack_pointer+0xf80022cc>
    27ac:	42000204 	addi	r8,r8,8
    27b0:	003ecd06 	br	22e8 <__alt_exception_stack_pointer+0xf80022e8>
    27b4:	d9002a17 	ldw	r4,168(sp)
    27b8:	d8002785 	stb	zero,158(sp)
    27bc:	203d2d16 	blt	r4,zero,1c74 <__alt_exception_stack_pointer+0xf8001c74>
    27c0:	00bfdfc4 	movi	r2,-129
    27c4:	90a4703a 	and	r18,r18,r2
    27c8:	003a6106 	br	1150 <__alt_exception_stack_pointer+0xf8001150>
    27cc:	01000074 	movhi	r4,1
    27d0:	213ed684 	addi	r4,r4,-1190
    27d4:	d9002c15 	stw	r4,176(sp)
    27d8:	003bea06 	br	1784 <__alt_exception_stack_pointer+0xf8001784>
    27dc:	d9002d17 	ldw	r4,180(sp)
    27e0:	d9801e04 	addi	r6,sp,120
    27e4:	b80b883a 	mov	r5,r23
    27e8:	000725c0 	call	725c <__sprint_r>
    27ec:	103a7b1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    27f0:	d8c02017 	ldw	r3,128(sp)
    27f4:	da000404 	addi	r8,sp,16
    27f8:	003d4106 	br	1d00 <__alt_exception_stack_pointer+0xf8001d00>
    27fc:	d8801f17 	ldw	r2,124(sp)
    2800:	01400074 	movhi	r5,1
    2804:	01000044 	movi	r4,1
    2808:	18c00044 	addi	r3,r3,1
    280c:	10800044 	addi	r2,r2,1
    2810:	297ed604 	addi	r5,r5,-1192
    2814:	41000115 	stw	r4,4(r8)
    2818:	41400015 	stw	r5,0(r8)
    281c:	d8c02015 	stw	r3,128(sp)
    2820:	d8801f15 	stw	r2,124(sp)
    2824:	010001c4 	movi	r4,7
    2828:	20805c16 	blt	r4,r2,299c <___vfprintf_internal_r+0x1bd0>
    282c:	42000204 	addi	r8,r8,8
    2830:	8800041e 	bne	r17,zero,2844 <___vfprintf_internal_r+0x1a78>
    2834:	d8803317 	ldw	r2,204(sp)
    2838:	1000021e 	bne	r2,zero,2844 <___vfprintf_internal_r+0x1a78>
    283c:	9080004c 	andi	r2,r18,1
    2840:	103be726 	beq	r2,zero,17e0 <__alt_exception_stack_pointer+0xf80017e0>
    2844:	d9003717 	ldw	r4,220(sp)
    2848:	d8801f17 	ldw	r2,124(sp)
    284c:	d9403417 	ldw	r5,208(sp)
    2850:	20c7883a 	add	r3,r4,r3
    2854:	10800044 	addi	r2,r2,1
    2858:	41000115 	stw	r4,4(r8)
    285c:	41400015 	stw	r5,0(r8)
    2860:	d8c02015 	stw	r3,128(sp)
    2864:	d8801f15 	stw	r2,124(sp)
    2868:	010001c4 	movi	r4,7
    286c:	20812116 	blt	r4,r2,2cf4 <___vfprintf_internal_r+0x1f28>
    2870:	42000204 	addi	r8,r8,8
    2874:	0463c83a 	sub	r17,zero,r17
    2878:	0440730e 	bge	zero,r17,2a48 <___vfprintf_internal_r+0x1c7c>
    287c:	05800404 	movi	r22,16
    2880:	b440860e 	bge	r22,r17,2a9c <___vfprintf_internal_r+0x1cd0>
    2884:	01400074 	movhi	r5,1
    2888:	297ed684 	addi	r5,r5,-1190
    288c:	d9402c15 	stw	r5,176(sp)
    2890:	070001c4 	movi	fp,7
    2894:	dcc02d17 	ldw	r19,180(sp)
    2898:	00000306 	br	28a8 <___vfprintf_internal_r+0x1adc>
    289c:	42000204 	addi	r8,r8,8
    28a0:	8c7ffc04 	addi	r17,r17,-16
    28a4:	b440800e 	bge	r22,r17,2aa8 <___vfprintf_internal_r+0x1cdc>
    28a8:	18c00404 	addi	r3,r3,16
    28ac:	10800044 	addi	r2,r2,1
    28b0:	45000015 	stw	r20,0(r8)
    28b4:	45800115 	stw	r22,4(r8)
    28b8:	d8c02015 	stw	r3,128(sp)
    28bc:	d8801f15 	stw	r2,124(sp)
    28c0:	e0bff60e 	bge	fp,r2,289c <__alt_exception_stack_pointer+0xf800289c>
    28c4:	d9801e04 	addi	r6,sp,120
    28c8:	b80b883a 	mov	r5,r23
    28cc:	9809883a 	mov	r4,r19
    28d0:	000725c0 	call	725c <__sprint_r>
    28d4:	103a411e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    28d8:	d8c02017 	ldw	r3,128(sp)
    28dc:	d8801f17 	ldw	r2,124(sp)
    28e0:	da000404 	addi	r8,sp,16
    28e4:	003fee06 	br	28a0 <__alt_exception_stack_pointer+0xf80028a0>
    28e8:	00bfffc4 	movi	r2,-1
    28ec:	003a3f06 	br	11ec <__alt_exception_stack_pointer+0xf80011ec>
    28f0:	008011c4 	movi	r2,71
    28f4:	1440b816 	blt	r2,r17,2bd8 <___vfprintf_internal_r+0x1e0c>
    28f8:	04000074 	movhi	r16,1
    28fc:	843ec804 	addi	r16,r16,-1248
    2900:	00c000c4 	movi	r3,3
    2904:	00bfdfc4 	movi	r2,-129
    2908:	d8c02915 	stw	r3,164(sp)
    290c:	90a4703a 	and	r18,r18,r2
    2910:	df002783 	ldbu	fp,158(sp)
    2914:	d8c02b15 	stw	r3,172(sp)
    2918:	d8002a15 	stw	zero,168(sp)
    291c:	d8003215 	stw	zero,200(sp)
    2920:	003b0706 	br	1540 <__alt_exception_stack_pointer+0xf8001540>
    2924:	d8c02e17 	ldw	r3,184(sp)
    2928:	1cc00017 	ldw	r19,0(r3)
    292c:	18c00104 	addi	r3,r3,4
    2930:	d8c02e15 	stw	r3,184(sp)
    2934:	982dd7fa 	srai	r22,r19,31
    2938:	b005883a 	mov	r2,r22
    293c:	003a7706 	br	131c <__alt_exception_stack_pointer+0xf800131c>
    2940:	d8c02e17 	ldw	r3,184(sp)
    2944:	d9002f17 	ldw	r4,188(sp)
    2948:	18800017 	ldw	r2,0(r3)
    294c:	18c00104 	addi	r3,r3,4
    2950:	d8c02e15 	stw	r3,184(sp)
    2954:	11000015 	stw	r4,0(r2)
    2958:	00395406 	br	eac <__alt_exception_stack_pointer+0xf8000eac>
    295c:	d9002e17 	ldw	r4,184(sp)
    2960:	002d883a 	mov	r22,zero
    2964:	24c00017 	ldw	r19,0(r4)
    2968:	21000104 	addi	r4,r4,4
    296c:	d9002e15 	stw	r4,184(sp)
    2970:	003c0706 	br	1990 <__alt_exception_stack_pointer+0xf8001990>
    2974:	d9402e17 	ldw	r5,184(sp)
    2978:	d8c02a17 	ldw	r3,168(sp)
    297c:	002d883a 	mov	r22,zero
    2980:	28800104 	addi	r2,r5,4
    2984:	2cc0000b 	ldhu	r19,0(r5)
    2988:	183dc10e 	bge	r3,zero,2090 <__alt_exception_stack_pointer+0xf8002090>
    298c:	003f7506 	br	2764 <__alt_exception_stack_pointer+0xf8002764>
    2990:	04000074 	movhi	r16,1
    2994:	843ec604 	addi	r16,r16,-1256
    2998:	003aa706 	br	1438 <__alt_exception_stack_pointer+0xf8001438>
    299c:	d9002d17 	ldw	r4,180(sp)
    29a0:	d9801e04 	addi	r6,sp,120
    29a4:	b80b883a 	mov	r5,r23
    29a8:	000725c0 	call	725c <__sprint_r>
    29ac:	103a0b1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    29b0:	dc402617 	ldw	r17,152(sp)
    29b4:	d8c02017 	ldw	r3,128(sp)
    29b8:	da000404 	addi	r8,sp,16
    29bc:	003f9c06 	br	2830 <__alt_exception_stack_pointer+0xf8002830>
    29c0:	ac400043 	ldbu	r17,1(r21)
    29c4:	84000814 	ori	r16,r16,32
    29c8:	ad400044 	addi	r21,r21,1
    29cc:	8c403fcc 	andi	r17,r17,255
    29d0:	8c40201c 	xori	r17,r17,128
    29d4:	8c7fe004 	addi	r17,r17,-128
    29d8:	00395e06 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    29dc:	d8c02e15 	stw	r3,184(sp)
    29e0:	0039883a 	mov	fp,zero
    29e4:	003e3506 	br	22bc <__alt_exception_stack_pointer+0xf80022bc>
    29e8:	d9002d17 	ldw	r4,180(sp)
    29ec:	d9801e04 	addi	r6,sp,120
    29f0:	b80b883a 	mov	r5,r23
    29f4:	000725c0 	call	725c <__sprint_r>
    29f8:	1039f81e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    29fc:	d8c02017 	ldw	r3,128(sp)
    2a00:	da000404 	addi	r8,sp,16
    2a04:	003cd006 	br	1d48 <__alt_exception_stack_pointer+0xf8001d48>
    2a08:	8009883a 	mov	r4,r16
    2a0c:	df003d15 	stw	fp,244(sp)
    2a10:	00070c80 	call	70c8 <strlen>
    2a14:	d8802b15 	stw	r2,172(sp)
    2a18:	da003d17 	ldw	r8,244(sp)
    2a1c:	103c200e 	bge	r2,zero,1aa0 <__alt_exception_stack_pointer+0xf8001aa0>
    2a20:	0005883a 	mov	r2,zero
    2a24:	003c1e06 	br	1aa0 <__alt_exception_stack_pointer+0xf8001aa0>
    2a28:	d9002d17 	ldw	r4,180(sp)
    2a2c:	d9801e04 	addi	r6,sp,120
    2a30:	b80b883a 	mov	r5,r23
    2a34:	000725c0 	call	725c <__sprint_r>
    2a38:	1039e81e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2a3c:	d8c02017 	ldw	r3,128(sp)
    2a40:	d8801f17 	ldw	r2,124(sp)
    2a44:	da000404 	addi	r8,sp,16
    2a48:	d9403317 	ldw	r5,204(sp)
    2a4c:	10800044 	addi	r2,r2,1
    2a50:	44000015 	stw	r16,0(r8)
    2a54:	28c7883a 	add	r3,r5,r3
    2a58:	003b5b06 	br	17c8 <__alt_exception_stack_pointer+0xf80017c8>
    2a5c:	01000074 	movhi	r4,1
    2a60:	213eda84 	addi	r4,r4,-1174
    2a64:	d9003515 	stw	r4,212(sp)
    2a68:	003af206 	br	1634 <__alt_exception_stack_pointer+0xf8001634>
    2a6c:	013fffc4 	movi	r4,-1
    2a70:	003a0806 	br	1294 <__alt_exception_stack_pointer+0xf8001294>
    2a74:	0023883a 	mov	r17,zero
    2a78:	003d9d06 	br	20f0 <__alt_exception_stack_pointer+0xf80020f0>
    2a7c:	d9002d17 	ldw	r4,180(sp)
    2a80:	d9801e04 	addi	r6,sp,120
    2a84:	b80b883a 	mov	r5,r23
    2a88:	000725c0 	call	725c <__sprint_r>
    2a8c:	1039d31e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2a90:	d8c02017 	ldw	r3,128(sp)
    2a94:	da000404 	addi	r8,sp,16
    2a98:	003d9406 	br	20ec <__alt_exception_stack_pointer+0xf80020ec>
    2a9c:	01000074 	movhi	r4,1
    2aa0:	213ed684 	addi	r4,r4,-1190
    2aa4:	d9002c15 	stw	r4,176(sp)
    2aa8:	d9002c17 	ldw	r4,176(sp)
    2aac:	1c47883a 	add	r3,r3,r17
    2ab0:	10800044 	addi	r2,r2,1
    2ab4:	41000015 	stw	r4,0(r8)
    2ab8:	44400115 	stw	r17,4(r8)
    2abc:	d8c02015 	stw	r3,128(sp)
    2ac0:	d8801f15 	stw	r2,124(sp)
    2ac4:	010001c4 	movi	r4,7
    2ac8:	20bfd716 	blt	r4,r2,2a28 <__alt_exception_stack_pointer+0xf8002a28>
    2acc:	42000204 	addi	r8,r8,8
    2ad0:	003fdd06 	br	2a48 <__alt_exception_stack_pointer+0xf8002a48>
    2ad4:	d9002d17 	ldw	r4,180(sp)
    2ad8:	d9801e04 	addi	r6,sp,120
    2adc:	b80b883a 	mov	r5,r23
    2ae0:	000725c0 	call	725c <__sprint_r>
    2ae4:	1039bd1e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2ae8:	d8802617 	ldw	r2,152(sp)
    2aec:	d8c02017 	ldw	r3,128(sp)
    2af0:	da000404 	addi	r8,sp,16
    2af4:	003e1006 	br	2338 <__alt_exception_stack_pointer+0xf8002338>
    2af8:	00800044 	movi	r2,1
    2afc:	10803fcc 	andi	r2,r2,255
    2b00:	00c00044 	movi	r3,1
    2b04:	10fa0d26 	beq	r2,r3,133c <__alt_exception_stack_pointer+0xf800133c>
    2b08:	00c00084 	movi	r3,2
    2b0c:	10fbaf26 	beq	r2,r3,19cc <__alt_exception_stack_pointer+0xf80019cc>
    2b10:	003a6d06 	br	14c8 <__alt_exception_stack_pointer+0xf80014c8>
    2b14:	01000074 	movhi	r4,1
    2b18:	213eda84 	addi	r4,r4,-1174
    2b1c:	d9003515 	stw	r4,212(sp)
    2b20:	003b5406 	br	1874 <__alt_exception_stack_pointer+0xf8001874>
    2b24:	d8802a17 	ldw	r2,168(sp)
    2b28:	00c00184 	movi	r3,6
    2b2c:	1880012e 	bgeu	r3,r2,2b34 <___vfprintf_internal_r+0x1d68>
    2b30:	1805883a 	mov	r2,r3
    2b34:	d8802b15 	stw	r2,172(sp)
    2b38:	1000ef16 	blt	r2,zero,2ef8 <___vfprintf_internal_r+0x212c>
    2b3c:	04000074 	movhi	r16,1
    2b40:	d8802915 	stw	r2,164(sp)
    2b44:	dcc02e15 	stw	r19,184(sp)
    2b48:	d8002a15 	stw	zero,168(sp)
    2b4c:	d8003215 	stw	zero,200(sp)
    2b50:	843ed404 	addi	r16,r16,-1200
    2b54:	0039883a 	mov	fp,zero
    2b58:	003a8006 	br	155c <__alt_exception_stack_pointer+0xf800155c>
    2b5c:	0021883a 	mov	r16,zero
    2b60:	003e0706 	br	2380 <__alt_exception_stack_pointer+0xf8002380>
    2b64:	d9002d17 	ldw	r4,180(sp)
    2b68:	d9801e04 	addi	r6,sp,120
    2b6c:	b80b883a 	mov	r5,r23
    2b70:	000725c0 	call	725c <__sprint_r>
    2b74:	1039991e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2b78:	d8802617 	ldw	r2,152(sp)
    2b7c:	d9403317 	ldw	r5,204(sp)
    2b80:	d8c02017 	ldw	r3,128(sp)
    2b84:	da000404 	addi	r8,sp,16
    2b88:	2885c83a 	sub	r2,r5,r2
    2b8c:	003dfb06 	br	237c <__alt_exception_stack_pointer+0xf800237c>
    2b90:	9080004c 	andi	r2,r18,1
    2b94:	103e8f1e 	bne	r2,zero,25d4 <__alt_exception_stack_pointer+0xf80025d4>
    2b98:	d8802117 	ldw	r2,132(sp)
    2b9c:	003e9e06 	br	2618 <__alt_exception_stack_pointer+0xf8002618>
    2ba0:	1025883a 	mov	r18,r2
    2ba4:	0039883a 	mov	fp,zero
    2ba8:	00800084 	movi	r2,2
    2bac:	003fd306 	br	2afc <__alt_exception_stack_pointer+0xf8002afc>
    2bb0:	07000b44 	movi	fp,45
    2bb4:	df002785 	stb	fp,158(sp)
    2bb8:	003a1b06 	br	1428 <__alt_exception_stack_pointer+0xf8001428>
    2bbc:	00c00b44 	movi	r3,45
    2bc0:	d8c02785 	stb	r3,158(sp)
    2bc4:	d8802915 	stw	r2,164(sp)
    2bc8:	dc802c17 	ldw	r18,176(sp)
    2bcc:	d8002a15 	stw	zero,168(sp)
    2bd0:	07000b44 	movi	fp,45
    2bd4:	003a5e06 	br	1550 <__alt_exception_stack_pointer+0xf8001550>
    2bd8:	04000074 	movhi	r16,1
    2bdc:	843ec904 	addi	r16,r16,-1244
    2be0:	003f4706 	br	2900 <__alt_exception_stack_pointer+0xf8002900>
    2be4:	d9002e17 	ldw	r4,184(sp)
    2be8:	d9402f17 	ldw	r5,188(sp)
    2bec:	20800017 	ldw	r2,0(r4)
    2bf0:	21000104 	addi	r4,r4,4
    2bf4:	d9002e15 	stw	r4,184(sp)
    2bf8:	11400015 	stw	r5,0(r2)
    2bfc:	0038ab06 	br	eac <__alt_exception_stack_pointer+0xf8000eac>
    2c00:	dd802617 	ldw	r22,152(sp)
    2c04:	00bfff44 	movi	r2,-3
    2c08:	b0801c16 	blt	r22,r2,2c7c <___vfprintf_internal_r+0x1eb0>
    2c0c:	d9402a17 	ldw	r5,168(sp)
    2c10:	2d801a16 	blt	r5,r22,2c7c <___vfprintf_internal_r+0x1eb0>
    2c14:	dd803215 	stw	r22,200(sp)
    2c18:	003e8906 	br	2640 <__alt_exception_stack_pointer+0xf8002640>
    2c1c:	01000074 	movhi	r4,1
    2c20:	213ed684 	addi	r4,r4,-1190
    2c24:	d9002c15 	stw	r4,176(sp)
    2c28:	003c9106 	br	1e70 <__alt_exception_stack_pointer+0xf8001e70>
    2c2c:	e005883a 	mov	r2,fp
    2c30:	003e7906 	br	2618 <__alt_exception_stack_pointer+0xf8002618>
    2c34:	d9002a17 	ldw	r4,168(sp)
    2c38:	df002783 	ldbu	fp,158(sp)
    2c3c:	dcc02e15 	stw	r19,184(sp)
    2c40:	d9002915 	stw	r4,164(sp)
    2c44:	d9002b15 	stw	r4,172(sp)
    2c48:	d8002a15 	stw	zero,168(sp)
    2c4c:	d8003215 	stw	zero,200(sp)
    2c50:	003a3b06 	br	1540 <__alt_exception_stack_pointer+0xf8001540>
    2c54:	9080004c 	andi	r2,r18,1
    2c58:	0039883a 	mov	fp,zero
    2c5c:	10000426 	beq	r2,zero,2c70 <___vfprintf_internal_r+0x1ea4>
    2c60:	00800c04 	movi	r2,48
    2c64:	dc001dc4 	addi	r16,sp,119
    2c68:	d8801dc5 	stb	r2,119(sp)
    2c6c:	003b6406 	br	1a00 <__alt_exception_stack_pointer+0xf8001a00>
    2c70:	d8002b15 	stw	zero,172(sp)
    2c74:	dc001e04 	addi	r16,sp,120
    2c78:	003a2b06 	br	1528 <__alt_exception_stack_pointer+0xf8001528>
    2c7c:	8c7fff84 	addi	r17,r17,-2
    2c80:	b5bfffc4 	addi	r22,r22,-1
    2c84:	dd802615 	stw	r22,152(sp)
    2c88:	dc4022c5 	stb	r17,139(sp)
    2c8c:	b000bf16 	blt	r22,zero,2f8c <___vfprintf_internal_r+0x21c0>
    2c90:	00800ac4 	movi	r2,43
    2c94:	d8802305 	stb	r2,140(sp)
    2c98:	00800244 	movi	r2,9
    2c9c:	15807016 	blt	r2,r22,2e60 <___vfprintf_internal_r+0x2094>
    2ca0:	00800c04 	movi	r2,48
    2ca4:	b5800c04 	addi	r22,r22,48
    2ca8:	d8802345 	stb	r2,141(sp)
    2cac:	dd802385 	stb	r22,142(sp)
    2cb0:	d88023c4 	addi	r2,sp,143
    2cb4:	df0022c4 	addi	fp,sp,139
    2cb8:	d8c03317 	ldw	r3,204(sp)
    2cbc:	1739c83a 	sub	fp,r2,fp
    2cc0:	d9003317 	ldw	r4,204(sp)
    2cc4:	e0c7883a 	add	r3,fp,r3
    2cc8:	df003a15 	stw	fp,232(sp)
    2ccc:	d8c02b15 	stw	r3,172(sp)
    2cd0:	00800044 	movi	r2,1
    2cd4:	1100b30e 	bge	r2,r4,2fa4 <___vfprintf_internal_r+0x21d8>
    2cd8:	d8c02b17 	ldw	r3,172(sp)
    2cdc:	18c00044 	addi	r3,r3,1
    2ce0:	d8c02b15 	stw	r3,172(sp)
    2ce4:	1805883a 	mov	r2,r3
    2ce8:	1800ac16 	blt	r3,zero,2f9c <___vfprintf_internal_r+0x21d0>
    2cec:	d8003215 	stw	zero,200(sp)
    2cf0:	003e5d06 	br	2668 <__alt_exception_stack_pointer+0xf8002668>
    2cf4:	d9002d17 	ldw	r4,180(sp)
    2cf8:	d9801e04 	addi	r6,sp,120
    2cfc:	b80b883a 	mov	r5,r23
    2d00:	000725c0 	call	725c <__sprint_r>
    2d04:	1039351e 	bne	r2,zero,11dc <__alt_exception_stack_pointer+0xf80011dc>
    2d08:	dc402617 	ldw	r17,152(sp)
    2d0c:	d8c02017 	ldw	r3,128(sp)
    2d10:	d8801f17 	ldw	r2,124(sp)
    2d14:	da000404 	addi	r8,sp,16
    2d18:	003ed606 	br	2874 <__alt_exception_stack_pointer+0xf8002874>
    2d1c:	182b883a 	mov	r21,r3
    2d20:	d8002a15 	stw	zero,168(sp)
    2d24:	00388c06 	br	f58 <__alt_exception_stack_pointer+0xf8000f58>
    2d28:	d8802a17 	ldw	r2,168(sp)
    2d2c:	103e071e 	bne	r2,zero,254c <__alt_exception_stack_pointer+0xf800254c>
    2d30:	dc002a15 	stw	r16,168(sp)
    2d34:	003e0506 	br	254c <__alt_exception_stack_pointer+0xf800254c>
    2d38:	d9002a17 	ldw	r4,168(sp)
    2d3c:	20c00044 	addi	r3,r4,1
    2d40:	003e0f06 	br	2580 <__alt_exception_stack_pointer+0xf8002580>
    2d44:	01400184 	movi	r5,6
    2d48:	d9402a15 	stw	r5,168(sp)
    2d4c:	003dff06 	br	254c <__alt_exception_stack_pointer+0xf800254c>
    2d50:	d8802104 	addi	r2,sp,132
    2d54:	d8800315 	stw	r2,12(sp)
    2d58:	d8802504 	addi	r2,sp,148
    2d5c:	d8800215 	stw	r2,8(sp)
    2d60:	d8802604 	addi	r2,sp,152
    2d64:	d8800115 	stw	r2,4(sp)
    2d68:	d8802a17 	ldw	r2,168(sp)
    2d6c:	d9403617 	ldw	r5,216(sp)
    2d70:	d9002d17 	ldw	r4,180(sp)
    2d74:	d8800015 	stw	r2,0(sp)
    2d78:	01c000c4 	movi	r7,3
    2d7c:	980d883a 	mov	r6,r19
    2d80:	da003d15 	stw	r8,244(sp)
    2d84:	00034fc0 	call	34fc <_dtoa_r>
    2d88:	d8c02a17 	ldw	r3,168(sp)
    2d8c:	da003d17 	ldw	r8,244(sp)
    2d90:	1021883a 	mov	r16,r2
    2d94:	10f9883a 	add	fp,r2,r3
    2d98:	81000007 	ldb	r4,0(r16)
    2d9c:	00800c04 	movi	r2,48
    2da0:	20805e26 	beq	r4,r2,2f1c <___vfprintf_internal_r+0x2150>
    2da4:	d8c02617 	ldw	r3,152(sp)
    2da8:	e0f9883a 	add	fp,fp,r3
    2dac:	003e0a06 	br	25d8 <__alt_exception_stack_pointer+0xf80025d8>
    2db0:	00c00b44 	movi	r3,45
    2db4:	24e0003c 	xorhi	r19,r4,32768
    2db8:	d8c02905 	stb	r3,164(sp)
    2dbc:	003de906 	br	2564 <__alt_exception_stack_pointer+0xf8002564>
    2dc0:	d8c03217 	ldw	r3,200(sp)
    2dc4:	00c07a0e 	bge	zero,r3,2fb0 <___vfprintf_internal_r+0x21e4>
    2dc8:	00800044 	movi	r2,1
    2dcc:	d9003317 	ldw	r4,204(sp)
    2dd0:	1105883a 	add	r2,r2,r4
    2dd4:	d8802b15 	stw	r2,172(sp)
    2dd8:	10004e16 	blt	r2,zero,2f14 <___vfprintf_internal_r+0x2148>
    2ddc:	044019c4 	movi	r17,103
    2de0:	003e2106 	br	2668 <__alt_exception_stack_pointer+0xf8002668>
    2de4:	d9002a17 	ldw	r4,168(sp)
    2de8:	d8802104 	addi	r2,sp,132
    2dec:	d8800315 	stw	r2,12(sp)
    2df0:	d9000015 	stw	r4,0(sp)
    2df4:	d8802504 	addi	r2,sp,148
    2df8:	d9403617 	ldw	r5,216(sp)
    2dfc:	d9002d17 	ldw	r4,180(sp)
    2e00:	d8800215 	stw	r2,8(sp)
    2e04:	d8802604 	addi	r2,sp,152
    2e08:	d8800115 	stw	r2,4(sp)
    2e0c:	01c000c4 	movi	r7,3
    2e10:	980d883a 	mov	r6,r19
    2e14:	da003d15 	stw	r8,244(sp)
    2e18:	00034fc0 	call	34fc <_dtoa_r>
    2e1c:	d8c02a17 	ldw	r3,168(sp)
    2e20:	da003d17 	ldw	r8,244(sp)
    2e24:	1021883a 	mov	r16,r2
    2e28:	00801184 	movi	r2,70
    2e2c:	80f9883a 	add	fp,r16,r3
    2e30:	88bfd926 	beq	r17,r2,2d98 <__alt_exception_stack_pointer+0xf8002d98>
    2e34:	003de806 	br	25d8 <__alt_exception_stack_pointer+0xf80025d8>
    2e38:	d9002a17 	ldw	r4,168(sp)
    2e3c:	00c04d0e 	bge	zero,r3,2f74 <___vfprintf_internal_r+0x21a8>
    2e40:	2000441e 	bne	r4,zero,2f54 <___vfprintf_internal_r+0x2188>
    2e44:	9480004c 	andi	r18,r18,1
    2e48:	9000421e 	bne	r18,zero,2f54 <___vfprintf_internal_r+0x2188>
    2e4c:	1805883a 	mov	r2,r3
    2e50:	18006f16 	blt	r3,zero,3010 <___vfprintf_internal_r+0x2244>
    2e54:	d8c03217 	ldw	r3,200(sp)
    2e58:	d8c02b15 	stw	r3,172(sp)
    2e5c:	003e0206 	br	2668 <__alt_exception_stack_pointer+0xf8002668>
    2e60:	df0022c4 	addi	fp,sp,139
    2e64:	dc002a15 	stw	r16,168(sp)
    2e68:	4027883a 	mov	r19,r8
    2e6c:	e021883a 	mov	r16,fp
    2e70:	b009883a 	mov	r4,r22
    2e74:	01400284 	movi	r5,10
    2e78:	000a9700 	call	a970 <__modsi3>
    2e7c:	10800c04 	addi	r2,r2,48
    2e80:	843fffc4 	addi	r16,r16,-1
    2e84:	b009883a 	mov	r4,r22
    2e88:	01400284 	movi	r5,10
    2e8c:	80800005 	stb	r2,0(r16)
    2e90:	000a8ec0 	call	a8ec <__divsi3>
    2e94:	102d883a 	mov	r22,r2
    2e98:	00800244 	movi	r2,9
    2e9c:	15bff416 	blt	r2,r22,2e70 <__alt_exception_stack_pointer+0xf8002e70>
    2ea0:	9811883a 	mov	r8,r19
    2ea4:	b0800c04 	addi	r2,r22,48
    2ea8:	8027883a 	mov	r19,r16
    2eac:	997fffc4 	addi	r5,r19,-1
    2eb0:	98bfffc5 	stb	r2,-1(r19)
    2eb4:	dc002a17 	ldw	r16,168(sp)
    2eb8:	2f006d2e 	bgeu	r5,fp,3070 <___vfprintf_internal_r+0x22a4>
    2ebc:	d9c02384 	addi	r7,sp,142
    2ec0:	3ccfc83a 	sub	r7,r7,r19
    2ec4:	d9002344 	addi	r4,sp,141
    2ec8:	e1cf883a 	add	r7,fp,r7
    2ecc:	00000106 	br	2ed4 <___vfprintf_internal_r+0x2108>
    2ed0:	28800003 	ldbu	r2,0(r5)
    2ed4:	20800005 	stb	r2,0(r4)
    2ed8:	21000044 	addi	r4,r4,1
    2edc:	29400044 	addi	r5,r5,1
    2ee0:	393ffb1e 	bne	r7,r4,2ed0 <__alt_exception_stack_pointer+0xf8002ed0>
    2ee4:	d8802304 	addi	r2,sp,140
    2ee8:	14c5c83a 	sub	r2,r2,r19
    2eec:	d8c02344 	addi	r3,sp,141
    2ef0:	1885883a 	add	r2,r3,r2
    2ef4:	003f7006 	br	2cb8 <__alt_exception_stack_pointer+0xf8002cb8>
    2ef8:	0005883a 	mov	r2,zero
    2efc:	003f0f06 	br	2b3c <__alt_exception_stack_pointer+0xf8002b3c>
    2f00:	d8c03217 	ldw	r3,200(sp)
    2f04:	18c00044 	addi	r3,r3,1
    2f08:	d8c02b15 	stw	r3,172(sp)
    2f0c:	1805883a 	mov	r2,r3
    2f10:	183fb20e 	bge	r3,zero,2ddc <__alt_exception_stack_pointer+0xf8002ddc>
    2f14:	0005883a 	mov	r2,zero
    2f18:	003fb006 	br	2ddc <__alt_exception_stack_pointer+0xf8002ddc>
    2f1c:	d9003617 	ldw	r4,216(sp)
    2f20:	000d883a 	mov	r6,zero
    2f24:	000f883a 	mov	r7,zero
    2f28:	980b883a 	mov	r5,r19
    2f2c:	d8c03c15 	stw	r3,240(sp)
    2f30:	da003d15 	stw	r8,244(sp)
    2f34:	000bd440 	call	bd44 <__eqdf2>
    2f38:	d8c03c17 	ldw	r3,240(sp)
    2f3c:	da003d17 	ldw	r8,244(sp)
    2f40:	103f9826 	beq	r2,zero,2da4 <__alt_exception_stack_pointer+0xf8002da4>
    2f44:	00800044 	movi	r2,1
    2f48:	10c7c83a 	sub	r3,r2,r3
    2f4c:	d8c02615 	stw	r3,152(sp)
    2f50:	003f9506 	br	2da8 <__alt_exception_stack_pointer+0xf8002da8>
    2f54:	d9002a17 	ldw	r4,168(sp)
    2f58:	d8c03217 	ldw	r3,200(sp)
    2f5c:	20800044 	addi	r2,r4,1
    2f60:	1885883a 	add	r2,r3,r2
    2f64:	d8802b15 	stw	r2,172(sp)
    2f68:	103dbf0e 	bge	r2,zero,2668 <__alt_exception_stack_pointer+0xf8002668>
    2f6c:	0005883a 	mov	r2,zero
    2f70:	003dbd06 	br	2668 <__alt_exception_stack_pointer+0xf8002668>
    2f74:	2000201e 	bne	r4,zero,2ff8 <___vfprintf_internal_r+0x222c>
    2f78:	9480004c 	andi	r18,r18,1
    2f7c:	90001e1e 	bne	r18,zero,2ff8 <___vfprintf_internal_r+0x222c>
    2f80:	00800044 	movi	r2,1
    2f84:	d8802b15 	stw	r2,172(sp)
    2f88:	003db706 	br	2668 <__alt_exception_stack_pointer+0xf8002668>
    2f8c:	00800b44 	movi	r2,45
    2f90:	05adc83a 	sub	r22,zero,r22
    2f94:	d8802305 	stb	r2,140(sp)
    2f98:	003f3f06 	br	2c98 <__alt_exception_stack_pointer+0xf8002c98>
    2f9c:	0005883a 	mov	r2,zero
    2fa0:	003f5206 	br	2cec <__alt_exception_stack_pointer+0xf8002cec>
    2fa4:	90a4703a 	and	r18,r18,r2
    2fa8:	903f4e26 	beq	r18,zero,2ce4 <__alt_exception_stack_pointer+0xf8002ce4>
    2fac:	003f4a06 	br	2cd8 <__alt_exception_stack_pointer+0xf8002cd8>
    2fb0:	00800084 	movi	r2,2
    2fb4:	10c5c83a 	sub	r2,r2,r3
    2fb8:	003f8406 	br	2dcc <__alt_exception_stack_pointer+0xf8002dcc>
    2fbc:	d9402e17 	ldw	r5,184(sp)
    2fc0:	d9002e17 	ldw	r4,184(sp)
    2fc4:	ac400043 	ldbu	r17,1(r21)
    2fc8:	29400017 	ldw	r5,0(r5)
    2fcc:	20800104 	addi	r2,r4,4
    2fd0:	d8802e15 	stw	r2,184(sp)
    2fd4:	d9402a15 	stw	r5,168(sp)
    2fd8:	182b883a 	mov	r21,r3
    2fdc:	283e7b0e 	bge	r5,zero,29cc <__alt_exception_stack_pointer+0xf80029cc>
    2fe0:	8c403fcc 	andi	r17,r17,255
    2fe4:	017fffc4 	movi	r5,-1
    2fe8:	8c40201c 	xori	r17,r17,128
    2fec:	d9402a15 	stw	r5,168(sp)
    2ff0:	8c7fe004 	addi	r17,r17,-128
    2ff4:	0037d706 	br	f54 <__alt_exception_stack_pointer+0xf8000f54>
    2ff8:	d8c02a17 	ldw	r3,168(sp)
    2ffc:	18c00084 	addi	r3,r3,2
    3000:	d8c02b15 	stw	r3,172(sp)
    3004:	1805883a 	mov	r2,r3
    3008:	183d970e 	bge	r3,zero,2668 <__alt_exception_stack_pointer+0xf8002668>
    300c:	003fd706 	br	2f6c <__alt_exception_stack_pointer+0xf8002f6c>
    3010:	0005883a 	mov	r2,zero
    3014:	003f8f06 	br	2e54 <__alt_exception_stack_pointer+0xf8002e54>
    3018:	9080004c 	andi	r2,r18,1
    301c:	103f821e 	bne	r2,zero,2e28 <__alt_exception_stack_pointer+0xf8002e28>
    3020:	d8802117 	ldw	r2,132(sp)
    3024:	1405c83a 	sub	r2,r2,r16
    3028:	d8803315 	stw	r2,204(sp)
    302c:	b47ef426 	beq	r22,r17,2c00 <__alt_exception_stack_pointer+0xf8002c00>
    3030:	dd802617 	ldw	r22,152(sp)
    3034:	003f1206 	br	2c80 <__alt_exception_stack_pointer+0xf8002c80>
    3038:	d8c02b03 	ldbu	r3,172(sp)
    303c:	d8c02785 	stb	r3,158(sp)
    3040:	0038df06 	br	13c0 <__alt_exception_stack_pointer+0xf80013c0>
    3044:	d8c02b03 	ldbu	r3,172(sp)
    3048:	d8c02785 	stb	r3,158(sp)
    304c:	0038aa06 	br	12f8 <__alt_exception_stack_pointer+0xf80012f8>
    3050:	d8c02b03 	ldbu	r3,172(sp)
    3054:	d8c02785 	stb	r3,158(sp)
    3058:	003a4306 	br	1968 <__alt_exception_stack_pointer+0xf8001968>
    305c:	d8c02b03 	ldbu	r3,172(sp)
    3060:	d8c02785 	stb	r3,158(sp)
    3064:	003af506 	br	1c3c <__alt_exception_stack_pointer+0xf8001c3c>
    3068:	0005883a 	mov	r2,zero
    306c:	003d7b06 	br	265c <__alt_exception_stack_pointer+0xf800265c>
    3070:	d8802344 	addi	r2,sp,141
    3074:	003f1006 	br	2cb8 <__alt_exception_stack_pointer+0xf8002cb8>
    3078:	d8c02b03 	ldbu	r3,172(sp)
    307c:	d8c02785 	stb	r3,158(sp)
    3080:	0038fd06 	br	1478 <__alt_exception_stack_pointer+0xf8001478>
    3084:	d8c02b03 	ldbu	r3,172(sp)
    3088:	d8c02785 	stb	r3,158(sp)
    308c:	003a9706 	br	1aec <__alt_exception_stack_pointer+0xf8001aec>
    3090:	d8c02b03 	ldbu	r3,172(sp)
    3094:	d8c02785 	stb	r3,158(sp)
    3098:	003a1806 	br	18fc <__alt_exception_stack_pointer+0xf80018fc>
    309c:	d8c02b03 	ldbu	r3,172(sp)
    30a0:	d8c02785 	stb	r3,158(sp)
    30a4:	003abe06 	br	1ba0 <__alt_exception_stack_pointer+0xf8001ba0>

000030a8 <__vfprintf_internal>:
    30a8:	00800074 	movhi	r2,1
    30ac:	10863804 	addi	r2,r2,6368
    30b0:	300f883a 	mov	r7,r6
    30b4:	280d883a 	mov	r6,r5
    30b8:	200b883a 	mov	r5,r4
    30bc:	11000017 	ldw	r4,0(r2)
    30c0:	0000dcc1 	jmpi	dcc <___vfprintf_internal_r>

000030c4 <__sbprintf>:
    30c4:	2880030b 	ldhu	r2,12(r5)
    30c8:	2ac01917 	ldw	r11,100(r5)
    30cc:	2a80038b 	ldhu	r10,14(r5)
    30d0:	2a400717 	ldw	r9,28(r5)
    30d4:	2a000917 	ldw	r8,36(r5)
    30d8:	defee204 	addi	sp,sp,-1144
    30dc:	00c10004 	movi	r3,1024
    30e0:	dc011a15 	stw	r16,1128(sp)
    30e4:	10bfff4c 	andi	r2,r2,65533
    30e8:	2821883a 	mov	r16,r5
    30ec:	d8cb883a 	add	r5,sp,r3
    30f0:	dc811c15 	stw	r18,1136(sp)
    30f4:	dc411b15 	stw	r17,1132(sp)
    30f8:	dfc11d15 	stw	ra,1140(sp)
    30fc:	2025883a 	mov	r18,r4
    3100:	d881030d 	sth	r2,1036(sp)
    3104:	dac11915 	stw	r11,1124(sp)
    3108:	da81038d 	sth	r10,1038(sp)
    310c:	da410715 	stw	r9,1052(sp)
    3110:	da010915 	stw	r8,1060(sp)
    3114:	dec10015 	stw	sp,1024(sp)
    3118:	dec10415 	stw	sp,1040(sp)
    311c:	d8c10215 	stw	r3,1032(sp)
    3120:	d8c10515 	stw	r3,1044(sp)
    3124:	d8010615 	stw	zero,1048(sp)
    3128:	0000dcc0 	call	dcc <___vfprintf_internal_r>
    312c:	1023883a 	mov	r17,r2
    3130:	10000416 	blt	r2,zero,3144 <__sbprintf+0x80>
    3134:	d9410004 	addi	r5,sp,1024
    3138:	9009883a 	mov	r4,r18
    313c:	0004da00 	call	4da0 <_fflush_r>
    3140:	10000d1e 	bne	r2,zero,3178 <__sbprintf+0xb4>
    3144:	d881030b 	ldhu	r2,1036(sp)
    3148:	1080100c 	andi	r2,r2,64
    314c:	10000326 	beq	r2,zero,315c <__sbprintf+0x98>
    3150:	8080030b 	ldhu	r2,12(r16)
    3154:	10801014 	ori	r2,r2,64
    3158:	8080030d 	sth	r2,12(r16)
    315c:	8805883a 	mov	r2,r17
    3160:	dfc11d17 	ldw	ra,1140(sp)
    3164:	dc811c17 	ldw	r18,1136(sp)
    3168:	dc411b17 	ldw	r17,1132(sp)
    316c:	dc011a17 	ldw	r16,1128(sp)
    3170:	dec11e04 	addi	sp,sp,1144
    3174:	f800283a 	ret
    3178:	047fffc4 	movi	r17,-1
    317c:	003ff106 	br	3144 <__alt_exception_stack_pointer+0xf8003144>

00003180 <__swsetup_r>:
    3180:	00800074 	movhi	r2,1
    3184:	defffd04 	addi	sp,sp,-12
    3188:	10863804 	addi	r2,r2,6368
    318c:	dc400115 	stw	r17,4(sp)
    3190:	2023883a 	mov	r17,r4
    3194:	11000017 	ldw	r4,0(r2)
    3198:	dc000015 	stw	r16,0(sp)
    319c:	dfc00215 	stw	ra,8(sp)
    31a0:	2821883a 	mov	r16,r5
    31a4:	20000226 	beq	r4,zero,31b0 <__swsetup_r+0x30>
    31a8:	20800e17 	ldw	r2,56(r4)
    31ac:	10003126 	beq	r2,zero,3274 <__swsetup_r+0xf4>
    31b0:	8080030b 	ldhu	r2,12(r16)
    31b4:	10c0020c 	andi	r3,r2,8
    31b8:	1009883a 	mov	r4,r2
    31bc:	18000f26 	beq	r3,zero,31fc <__swsetup_r+0x7c>
    31c0:	80c00417 	ldw	r3,16(r16)
    31c4:	18001526 	beq	r3,zero,321c <__swsetup_r+0x9c>
    31c8:	1100004c 	andi	r4,r2,1
    31cc:	20001c1e 	bne	r4,zero,3240 <__swsetup_r+0xc0>
    31d0:	1080008c 	andi	r2,r2,2
    31d4:	1000291e 	bne	r2,zero,327c <__swsetup_r+0xfc>
    31d8:	80800517 	ldw	r2,20(r16)
    31dc:	80800215 	stw	r2,8(r16)
    31e0:	18001c26 	beq	r3,zero,3254 <__swsetup_r+0xd4>
    31e4:	0005883a 	mov	r2,zero
    31e8:	dfc00217 	ldw	ra,8(sp)
    31ec:	dc400117 	ldw	r17,4(sp)
    31f0:	dc000017 	ldw	r16,0(sp)
    31f4:	dec00304 	addi	sp,sp,12
    31f8:	f800283a 	ret
    31fc:	2080040c 	andi	r2,r4,16
    3200:	10002e26 	beq	r2,zero,32bc <__swsetup_r+0x13c>
    3204:	2080010c 	andi	r2,r4,4
    3208:	10001e1e 	bne	r2,zero,3284 <__swsetup_r+0x104>
    320c:	80c00417 	ldw	r3,16(r16)
    3210:	20800214 	ori	r2,r4,8
    3214:	8080030d 	sth	r2,12(r16)
    3218:	183feb1e 	bne	r3,zero,31c8 <__alt_exception_stack_pointer+0xf80031c8>
    321c:	1100a00c 	andi	r4,r2,640
    3220:	01408004 	movi	r5,512
    3224:	217fe826 	beq	r4,r5,31c8 <__alt_exception_stack_pointer+0xf80031c8>
    3228:	800b883a 	mov	r5,r16
    322c:	8809883a 	mov	r4,r17
    3230:	00058740 	call	5874 <__smakebuf_r>
    3234:	8080030b 	ldhu	r2,12(r16)
    3238:	80c00417 	ldw	r3,16(r16)
    323c:	003fe206 	br	31c8 <__alt_exception_stack_pointer+0xf80031c8>
    3240:	80800517 	ldw	r2,20(r16)
    3244:	80000215 	stw	zero,8(r16)
    3248:	0085c83a 	sub	r2,zero,r2
    324c:	80800615 	stw	r2,24(r16)
    3250:	183fe41e 	bne	r3,zero,31e4 <__alt_exception_stack_pointer+0xf80031e4>
    3254:	80c0030b 	ldhu	r3,12(r16)
    3258:	0005883a 	mov	r2,zero
    325c:	1900200c 	andi	r4,r3,128
    3260:	203fe126 	beq	r4,zero,31e8 <__alt_exception_stack_pointer+0xf80031e8>
    3264:	18c01014 	ori	r3,r3,64
    3268:	80c0030d 	sth	r3,12(r16)
    326c:	00bfffc4 	movi	r2,-1
    3270:	003fdd06 	br	31e8 <__alt_exception_stack_pointer+0xf80031e8>
    3274:	000518c0 	call	518c <__sinit>
    3278:	003fcd06 	br	31b0 <__alt_exception_stack_pointer+0xf80031b0>
    327c:	0005883a 	mov	r2,zero
    3280:	003fd606 	br	31dc <__alt_exception_stack_pointer+0xf80031dc>
    3284:	81400c17 	ldw	r5,48(r16)
    3288:	28000626 	beq	r5,zero,32a4 <__swsetup_r+0x124>
    328c:	80801004 	addi	r2,r16,64
    3290:	28800326 	beq	r5,r2,32a0 <__swsetup_r+0x120>
    3294:	8809883a 	mov	r4,r17
    3298:	00053000 	call	5300 <_free_r>
    329c:	8100030b 	ldhu	r4,12(r16)
    32a0:	80000c15 	stw	zero,48(r16)
    32a4:	80c00417 	ldw	r3,16(r16)
    32a8:	00bff6c4 	movi	r2,-37
    32ac:	1108703a 	and	r4,r2,r4
    32b0:	80000115 	stw	zero,4(r16)
    32b4:	80c00015 	stw	r3,0(r16)
    32b8:	003fd506 	br	3210 <__alt_exception_stack_pointer+0xf8003210>
    32bc:	00800244 	movi	r2,9
    32c0:	88800015 	stw	r2,0(r17)
    32c4:	20801014 	ori	r2,r4,64
    32c8:	8080030d 	sth	r2,12(r16)
    32cc:	00bfffc4 	movi	r2,-1
    32d0:	003fc506 	br	31e8 <__alt_exception_stack_pointer+0xf80031e8>

000032d4 <quorem>:
    32d4:	defff204 	addi	sp,sp,-56
    32d8:	ddc00b15 	stw	r23,44(sp)
    32dc:	20800417 	ldw	r2,16(r4)
    32e0:	2dc00417 	ldw	r23,16(r5)
    32e4:	dfc00d15 	stw	ra,52(sp)
    32e8:	df000c15 	stw	fp,48(sp)
    32ec:	dd800a15 	stw	r22,40(sp)
    32f0:	dd400915 	stw	r21,36(sp)
    32f4:	dd000815 	stw	r20,32(sp)
    32f8:	dcc00715 	stw	r19,28(sp)
    32fc:	dc800615 	stw	r18,24(sp)
    3300:	dc400515 	stw	r17,20(sp)
    3304:	dc000415 	stw	r16,16(sp)
    3308:	15c07a16 	blt	r2,r23,34f4 <quorem+0x220>
    330c:	bdffffc4 	addi	r23,r23,-1
    3310:	bde9883a 	add	r20,r23,r23
    3314:	28c00504 	addi	r3,r5,20
    3318:	a529883a 	add	r20,r20,r20
    331c:	1d39883a 	add	fp,r3,r20
    3320:	24c00504 	addi	r19,r4,20
    3324:	d9400215 	stw	r5,8(sp)
    3328:	9d29883a 	add	r20,r19,r20
    332c:	e1400017 	ldw	r5,0(fp)
    3330:	d9000015 	stw	r4,0(sp)
    3334:	a1000017 	ldw	r4,0(r20)
    3338:	29400044 	addi	r5,r5,1
    333c:	d8c00115 	stw	r3,4(sp)
    3340:	dd000315 	stw	r20,12(sp)
    3344:	000a9e40 	call	a9e4 <__udivsi3>
    3348:	1025883a 	mov	r18,r2
    334c:	10003026 	beq	r2,zero,3410 <quorem+0x13c>
    3350:	dc400117 	ldw	r17,4(sp)
    3354:	9829883a 	mov	r20,r19
    3358:	002d883a 	mov	r22,zero
    335c:	0021883a 	mov	r16,zero
    3360:	8d400017 	ldw	r21,0(r17)
    3364:	900b883a 	mov	r5,r18
    3368:	8c400104 	addi	r17,r17,4
    336c:	a93fffcc 	andi	r4,r21,65535
    3370:	000aaa00 	call	aaa0 <__mulsi3>
    3374:	a808d43a 	srli	r4,r21,16
    3378:	900b883a 	mov	r5,r18
    337c:	15ad883a 	add	r22,r2,r22
    3380:	000aaa00 	call	aaa0 <__mulsi3>
    3384:	a1000017 	ldw	r4,0(r20)
    3388:	b00cd43a 	srli	r6,r22,16
    338c:	b0ffffcc 	andi	r3,r22,65535
    3390:	217fffcc 	andi	r5,r4,65535
    3394:	2c21883a 	add	r16,r5,r16
    3398:	80c7c83a 	sub	r3,r16,r3
    339c:	2008d43a 	srli	r4,r4,16
    33a0:	1185883a 	add	r2,r2,r6
    33a4:	1821d43a 	srai	r16,r3,16
    33a8:	117fffcc 	andi	r5,r2,65535
    33ac:	2149c83a 	sub	r4,r4,r5
    33b0:	2421883a 	add	r16,r4,r16
    33b4:	8008943a 	slli	r4,r16,16
    33b8:	18ffffcc 	andi	r3,r3,65535
    33bc:	102cd43a 	srli	r22,r2,16
    33c0:	20c8b03a 	or	r4,r4,r3
    33c4:	a1000015 	stw	r4,0(r20)
    33c8:	8021d43a 	srai	r16,r16,16
    33cc:	a5000104 	addi	r20,r20,4
    33d0:	e47fe32e 	bgeu	fp,r17,3360 <__alt_exception_stack_pointer+0xf8003360>
    33d4:	d8c00317 	ldw	r3,12(sp)
    33d8:	18800017 	ldw	r2,0(r3)
    33dc:	10000c1e 	bne	r2,zero,3410 <quorem+0x13c>
    33e0:	18bfff04 	addi	r2,r3,-4
    33e4:	9880082e 	bgeu	r19,r2,3408 <quorem+0x134>
    33e8:	18ffff17 	ldw	r3,-4(r3)
    33ec:	18000326 	beq	r3,zero,33fc <quorem+0x128>
    33f0:	00000506 	br	3408 <quorem+0x134>
    33f4:	10c00017 	ldw	r3,0(r2)
    33f8:	1800031e 	bne	r3,zero,3408 <quorem+0x134>
    33fc:	10bfff04 	addi	r2,r2,-4
    3400:	bdffffc4 	addi	r23,r23,-1
    3404:	98bffb36 	bltu	r19,r2,33f4 <__alt_exception_stack_pointer+0xf80033f4>
    3408:	d8c00017 	ldw	r3,0(sp)
    340c:	1dc00415 	stw	r23,16(r3)
    3410:	d9400217 	ldw	r5,8(sp)
    3414:	d9000017 	ldw	r4,0(sp)
    3418:	00067080 	call	6708 <__mcmp>
    341c:	10002816 	blt	r2,zero,34c0 <quorem+0x1ec>
    3420:	dc400117 	ldw	r17,4(sp)
    3424:	94800044 	addi	r18,r18,1
    3428:	980d883a 	mov	r6,r19
    342c:	0007883a 	mov	r3,zero
    3430:	31000017 	ldw	r4,0(r6)
    3434:	89400017 	ldw	r5,0(r17)
    3438:	31800104 	addi	r6,r6,4
    343c:	20bfffcc 	andi	r2,r4,65535
    3440:	10c7883a 	add	r3,r2,r3
    3444:	28bfffcc 	andi	r2,r5,65535
    3448:	1885c83a 	sub	r2,r3,r2
    344c:	280ad43a 	srli	r5,r5,16
    3450:	2008d43a 	srli	r4,r4,16
    3454:	1007d43a 	srai	r3,r2,16
    3458:	10bfffcc 	andi	r2,r2,65535
    345c:	2149c83a 	sub	r4,r4,r5
    3460:	20c9883a 	add	r4,r4,r3
    3464:	200a943a 	slli	r5,r4,16
    3468:	8c400104 	addi	r17,r17,4
    346c:	2007d43a 	srai	r3,r4,16
    3470:	2884b03a 	or	r2,r5,r2
    3474:	30bfff15 	stw	r2,-4(r6)
    3478:	e47fed2e 	bgeu	fp,r17,3430 <__alt_exception_stack_pointer+0xf8003430>
    347c:	bdc5883a 	add	r2,r23,r23
    3480:	1085883a 	add	r2,r2,r2
    3484:	9887883a 	add	r3,r19,r2
    3488:	18800017 	ldw	r2,0(r3)
    348c:	10000c1e 	bne	r2,zero,34c0 <quorem+0x1ec>
    3490:	18bfff04 	addi	r2,r3,-4
    3494:	9880082e 	bgeu	r19,r2,34b8 <quorem+0x1e4>
    3498:	18ffff17 	ldw	r3,-4(r3)
    349c:	18000326 	beq	r3,zero,34ac <quorem+0x1d8>
    34a0:	00000506 	br	34b8 <quorem+0x1e4>
    34a4:	10c00017 	ldw	r3,0(r2)
    34a8:	1800031e 	bne	r3,zero,34b8 <quorem+0x1e4>
    34ac:	10bfff04 	addi	r2,r2,-4
    34b0:	bdffffc4 	addi	r23,r23,-1
    34b4:	98bffb36 	bltu	r19,r2,34a4 <__alt_exception_stack_pointer+0xf80034a4>
    34b8:	d8c00017 	ldw	r3,0(sp)
    34bc:	1dc00415 	stw	r23,16(r3)
    34c0:	9005883a 	mov	r2,r18
    34c4:	dfc00d17 	ldw	ra,52(sp)
    34c8:	df000c17 	ldw	fp,48(sp)
    34cc:	ddc00b17 	ldw	r23,44(sp)
    34d0:	dd800a17 	ldw	r22,40(sp)
    34d4:	dd400917 	ldw	r21,36(sp)
    34d8:	dd000817 	ldw	r20,32(sp)
    34dc:	dcc00717 	ldw	r19,28(sp)
    34e0:	dc800617 	ldw	r18,24(sp)
    34e4:	dc400517 	ldw	r17,20(sp)
    34e8:	dc000417 	ldw	r16,16(sp)
    34ec:	dec00e04 	addi	sp,sp,56
    34f0:	f800283a 	ret
    34f4:	0005883a 	mov	r2,zero
    34f8:	003ff206 	br	34c4 <__alt_exception_stack_pointer+0xf80034c4>

000034fc <_dtoa_r>:
    34fc:	20801017 	ldw	r2,64(r4)
    3500:	deffde04 	addi	sp,sp,-136
    3504:	df002015 	stw	fp,128(sp)
    3508:	dcc01b15 	stw	r19,108(sp)
    350c:	dc801a15 	stw	r18,104(sp)
    3510:	dc401915 	stw	r17,100(sp)
    3514:	dc001815 	stw	r16,96(sp)
    3518:	dfc02115 	stw	ra,132(sp)
    351c:	ddc01f15 	stw	r23,124(sp)
    3520:	dd801e15 	stw	r22,120(sp)
    3524:	dd401d15 	stw	r21,116(sp)
    3528:	dd001c15 	stw	r20,112(sp)
    352c:	d9c00315 	stw	r7,12(sp)
    3530:	2039883a 	mov	fp,r4
    3534:	3023883a 	mov	r17,r6
    3538:	2825883a 	mov	r18,r5
    353c:	dc002417 	ldw	r16,144(sp)
    3540:	3027883a 	mov	r19,r6
    3544:	10000826 	beq	r2,zero,3568 <_dtoa_r+0x6c>
    3548:	21801117 	ldw	r6,68(r4)
    354c:	00c00044 	movi	r3,1
    3550:	100b883a 	mov	r5,r2
    3554:	1986983a 	sll	r3,r3,r6
    3558:	11800115 	stw	r6,4(r2)
    355c:	10c00215 	stw	r3,8(r2)
    3560:	0005e2c0 	call	5e2c <_Bfree>
    3564:	e0001015 	stw	zero,64(fp)
    3568:	88002e16 	blt	r17,zero,3624 <_dtoa_r+0x128>
    356c:	80000015 	stw	zero,0(r16)
    3570:	889ffc2c 	andhi	r2,r17,32752
    3574:	00dffc34 	movhi	r3,32752
    3578:	10c01c26 	beq	r2,r3,35ec <_dtoa_r+0xf0>
    357c:	000d883a 	mov	r6,zero
    3580:	000f883a 	mov	r7,zero
    3584:	9009883a 	mov	r4,r18
    3588:	980b883a 	mov	r5,r19
    358c:	000bd440 	call	bd44 <__eqdf2>
    3590:	10002b1e 	bne	r2,zero,3640 <_dtoa_r+0x144>
    3594:	d9c02317 	ldw	r7,140(sp)
    3598:	00800044 	movi	r2,1
    359c:	38800015 	stw	r2,0(r7)
    35a0:	d8802517 	ldw	r2,148(sp)
    35a4:	10019e26 	beq	r2,zero,3c20 <_dtoa_r+0x724>
    35a8:	d8c02517 	ldw	r3,148(sp)
    35ac:	00800074 	movhi	r2,1
    35b0:	10bed644 	addi	r2,r2,-1191
    35b4:	18800015 	stw	r2,0(r3)
    35b8:	10bfffc4 	addi	r2,r2,-1
    35bc:	dfc02117 	ldw	ra,132(sp)
    35c0:	df002017 	ldw	fp,128(sp)
    35c4:	ddc01f17 	ldw	r23,124(sp)
    35c8:	dd801e17 	ldw	r22,120(sp)
    35cc:	dd401d17 	ldw	r21,116(sp)
    35d0:	dd001c17 	ldw	r20,112(sp)
    35d4:	dcc01b17 	ldw	r19,108(sp)
    35d8:	dc801a17 	ldw	r18,104(sp)
    35dc:	dc401917 	ldw	r17,100(sp)
    35e0:	dc001817 	ldw	r16,96(sp)
    35e4:	dec02204 	addi	sp,sp,136
    35e8:	f800283a 	ret
    35ec:	d8c02317 	ldw	r3,140(sp)
    35f0:	0089c3c4 	movi	r2,9999
    35f4:	18800015 	stw	r2,0(r3)
    35f8:	90017726 	beq	r18,zero,3bd8 <_dtoa_r+0x6dc>
    35fc:	00800074 	movhi	r2,1
    3600:	10bee204 	addi	r2,r2,-1144
    3604:	d9002517 	ldw	r4,148(sp)
    3608:	203fec26 	beq	r4,zero,35bc <__alt_exception_stack_pointer+0xf80035bc>
    360c:	10c000c7 	ldb	r3,3(r2)
    3610:	1801781e 	bne	r3,zero,3bf4 <_dtoa_r+0x6f8>
    3614:	10c000c4 	addi	r3,r2,3
    3618:	d9802517 	ldw	r6,148(sp)
    361c:	30c00015 	stw	r3,0(r6)
    3620:	003fe606 	br	35bc <__alt_exception_stack_pointer+0xf80035bc>
    3624:	04e00034 	movhi	r19,32768
    3628:	9cffffc4 	addi	r19,r19,-1
    362c:	00800044 	movi	r2,1
    3630:	8ce6703a 	and	r19,r17,r19
    3634:	80800015 	stw	r2,0(r16)
    3638:	9823883a 	mov	r17,r19
    363c:	003fcc06 	br	3570 <__alt_exception_stack_pointer+0xf8003570>
    3640:	d8800204 	addi	r2,sp,8
    3644:	d8800015 	stw	r2,0(sp)
    3648:	d9c00104 	addi	r7,sp,4
    364c:	900b883a 	mov	r5,r18
    3650:	980d883a 	mov	r6,r19
    3654:	e009883a 	mov	r4,fp
    3658:	8820d53a 	srli	r16,r17,20
    365c:	0006ad40 	call	6ad4 <__d2b>
    3660:	d8800915 	stw	r2,36(sp)
    3664:	8001651e 	bne	r16,zero,3bfc <_dtoa_r+0x700>
    3668:	dd800217 	ldw	r22,8(sp)
    366c:	dc000117 	ldw	r16,4(sp)
    3670:	00800804 	movi	r2,32
    3674:	b421883a 	add	r16,r22,r16
    3678:	80c10c84 	addi	r3,r16,1074
    367c:	10c2d10e 	bge	r2,r3,41c4 <_dtoa_r+0xcc8>
    3680:	00801004 	movi	r2,64
    3684:	81010484 	addi	r4,r16,1042
    3688:	10c7c83a 	sub	r3,r2,r3
    368c:	9108d83a 	srl	r4,r18,r4
    3690:	88e2983a 	sll	r17,r17,r3
    3694:	2448b03a 	or	r4,r4,r17
    3698:	000d2600 	call	d260 <__floatunsidf>
    369c:	017f8434 	movhi	r5,65040
    36a0:	01800044 	movi	r6,1
    36a4:	1009883a 	mov	r4,r2
    36a8:	194b883a 	add	r5,r3,r5
    36ac:	843fffc4 	addi	r16,r16,-1
    36b0:	d9801115 	stw	r6,68(sp)
    36b4:	000d883a 	mov	r6,zero
    36b8:	01cffe34 	movhi	r7,16376
    36bc:	000c8080 	call	c808 <__subdf3>
    36c0:	0198dbf4 	movhi	r6,25455
    36c4:	01cff4f4 	movhi	r7,16339
    36c8:	3190d844 	addi	r6,r6,17249
    36cc:	39e1e9c4 	addi	r7,r7,-30809
    36d0:	1009883a 	mov	r4,r2
    36d4:	180b883a 	mov	r5,r3
    36d8:	000bf9c0 	call	bf9c <__muldf3>
    36dc:	01a2d874 	movhi	r6,35681
    36e0:	01cff1f4 	movhi	r7,16327
    36e4:	31b22cc4 	addi	r6,r6,-14157
    36e8:	39e28a04 	addi	r7,r7,-30168
    36ec:	180b883a 	mov	r5,r3
    36f0:	1009883a 	mov	r4,r2
    36f4:	000aac80 	call	aac8 <__adddf3>
    36f8:	8009883a 	mov	r4,r16
    36fc:	1029883a 	mov	r20,r2
    3700:	1823883a 	mov	r17,r3
    3704:	000d1840 	call	d184 <__floatsidf>
    3708:	019427f4 	movhi	r6,20639
    370c:	01cff4f4 	movhi	r7,16339
    3710:	319e7ec4 	addi	r6,r6,31227
    3714:	39d104c4 	addi	r7,r7,17427
    3718:	1009883a 	mov	r4,r2
    371c:	180b883a 	mov	r5,r3
    3720:	000bf9c0 	call	bf9c <__muldf3>
    3724:	100d883a 	mov	r6,r2
    3728:	180f883a 	mov	r7,r3
    372c:	a009883a 	mov	r4,r20
    3730:	880b883a 	mov	r5,r17
    3734:	000aac80 	call	aac8 <__adddf3>
    3738:	1009883a 	mov	r4,r2
    373c:	180b883a 	mov	r5,r3
    3740:	1029883a 	mov	r20,r2
    3744:	1823883a 	mov	r17,r3
    3748:	000d1040 	call	d104 <__fixdfsi>
    374c:	000d883a 	mov	r6,zero
    3750:	000f883a 	mov	r7,zero
    3754:	a009883a 	mov	r4,r20
    3758:	880b883a 	mov	r5,r17
    375c:	d8800515 	stw	r2,20(sp)
    3760:	000bea80 	call	bea8 <__ledf2>
    3764:	10028716 	blt	r2,zero,4184 <_dtoa_r+0xc88>
    3768:	d8c00517 	ldw	r3,20(sp)
    376c:	00800584 	movi	r2,22
    3770:	10c27536 	bltu	r2,r3,4148 <_dtoa_r+0xc4c>
    3774:	180490fa 	slli	r2,r3,3
    3778:	00c00074 	movhi	r3,1
    377c:	18fefe04 	addi	r3,r3,-1032
    3780:	1885883a 	add	r2,r3,r2
    3784:	11000017 	ldw	r4,0(r2)
    3788:	11400117 	ldw	r5,4(r2)
    378c:	900d883a 	mov	r6,r18
    3790:	980f883a 	mov	r7,r19
    3794:	000bdcc0 	call	bdcc <__gedf2>
    3798:	00828d0e 	bge	zero,r2,41d0 <_dtoa_r+0xcd4>
    379c:	d9000517 	ldw	r4,20(sp)
    37a0:	d8000e15 	stw	zero,56(sp)
    37a4:	213fffc4 	addi	r4,r4,-1
    37a8:	d9000515 	stw	r4,20(sp)
    37ac:	b42dc83a 	sub	r22,r22,r16
    37b0:	b5bfffc4 	addi	r22,r22,-1
    37b4:	b0026f16 	blt	r22,zero,4174 <_dtoa_r+0xc78>
    37b8:	d8000815 	stw	zero,32(sp)
    37bc:	d9c00517 	ldw	r7,20(sp)
    37c0:	38026416 	blt	r7,zero,4154 <_dtoa_r+0xc58>
    37c4:	b1ed883a 	add	r22,r22,r7
    37c8:	d9c00d15 	stw	r7,52(sp)
    37cc:	d8000a15 	stw	zero,40(sp)
    37d0:	d9800317 	ldw	r6,12(sp)
    37d4:	00800244 	movi	r2,9
    37d8:	11811436 	bltu	r2,r6,3c2c <_dtoa_r+0x730>
    37dc:	00800144 	movi	r2,5
    37e0:	1184e10e 	bge	r2,r6,4b68 <_dtoa_r+0x166c>
    37e4:	31bfff04 	addi	r6,r6,-4
    37e8:	d9800315 	stw	r6,12(sp)
    37ec:	0023883a 	mov	r17,zero
    37f0:	d9800317 	ldw	r6,12(sp)
    37f4:	008000c4 	movi	r2,3
    37f8:	30836726 	beq	r6,r2,4598 <_dtoa_r+0x109c>
    37fc:	1183410e 	bge	r2,r6,4504 <_dtoa_r+0x1008>
    3800:	d9c00317 	ldw	r7,12(sp)
    3804:	00800104 	movi	r2,4
    3808:	38827c26 	beq	r7,r2,41fc <_dtoa_r+0xd00>
    380c:	00800144 	movi	r2,5
    3810:	3884c41e 	bne	r7,r2,4b24 <_dtoa_r+0x1628>
    3814:	00800044 	movi	r2,1
    3818:	d8800b15 	stw	r2,44(sp)
    381c:	d8c00517 	ldw	r3,20(sp)
    3820:	d9002217 	ldw	r4,136(sp)
    3824:	1907883a 	add	r3,r3,r4
    3828:	19800044 	addi	r6,r3,1
    382c:	d8c00c15 	stw	r3,48(sp)
    3830:	d9800615 	stw	r6,24(sp)
    3834:	0183a40e 	bge	zero,r6,46c8 <_dtoa_r+0x11cc>
    3838:	d9800617 	ldw	r6,24(sp)
    383c:	3021883a 	mov	r16,r6
    3840:	e0001115 	stw	zero,68(fp)
    3844:	008005c4 	movi	r2,23
    3848:	1184c92e 	bgeu	r2,r6,4b70 <_dtoa_r+0x1674>
    384c:	00c00044 	movi	r3,1
    3850:	00800104 	movi	r2,4
    3854:	1085883a 	add	r2,r2,r2
    3858:	11000504 	addi	r4,r2,20
    385c:	180b883a 	mov	r5,r3
    3860:	18c00044 	addi	r3,r3,1
    3864:	313ffb2e 	bgeu	r6,r4,3854 <__alt_exception_stack_pointer+0xf8003854>
    3868:	e1401115 	stw	r5,68(fp)
    386c:	e009883a 	mov	r4,fp
    3870:	0005d840 	call	5d84 <_Balloc>
    3874:	d8800715 	stw	r2,28(sp)
    3878:	e0801015 	stw	r2,64(fp)
    387c:	00800384 	movi	r2,14
    3880:	1400f736 	bltu	r2,r16,3c60 <_dtoa_r+0x764>
    3884:	8800f626 	beq	r17,zero,3c60 <_dtoa_r+0x764>
    3888:	d9c00517 	ldw	r7,20(sp)
    388c:	01c39a0e 	bge	zero,r7,46f8 <_dtoa_r+0x11fc>
    3890:	388003cc 	andi	r2,r7,15
    3894:	100490fa 	slli	r2,r2,3
    3898:	382bd13a 	srai	r21,r7,4
    389c:	00c00074 	movhi	r3,1
    38a0:	18fefe04 	addi	r3,r3,-1032
    38a4:	1885883a 	add	r2,r3,r2
    38a8:	a8c0040c 	andi	r3,r21,16
    38ac:	12400017 	ldw	r9,0(r2)
    38b0:	12000117 	ldw	r8,4(r2)
    38b4:	18037926 	beq	r3,zero,469c <_dtoa_r+0x11a0>
    38b8:	00800074 	movhi	r2,1
    38bc:	10bef404 	addi	r2,r2,-1072
    38c0:	11800817 	ldw	r6,32(r2)
    38c4:	11c00917 	ldw	r7,36(r2)
    38c8:	9009883a 	mov	r4,r18
    38cc:	980b883a 	mov	r5,r19
    38d0:	da001715 	stw	r8,92(sp)
    38d4:	da401615 	stw	r9,88(sp)
    38d8:	000b3740 	call	b374 <__divdf3>
    38dc:	da001717 	ldw	r8,92(sp)
    38e0:	da401617 	ldw	r9,88(sp)
    38e4:	ad4003cc 	andi	r21,r21,15
    38e8:	040000c4 	movi	r16,3
    38ec:	1023883a 	mov	r17,r2
    38f0:	1829883a 	mov	r20,r3
    38f4:	a8001126 	beq	r21,zero,393c <_dtoa_r+0x440>
    38f8:	05c00074 	movhi	r23,1
    38fc:	bdfef404 	addi	r23,r23,-1072
    3900:	4805883a 	mov	r2,r9
    3904:	4007883a 	mov	r3,r8
    3908:	a980004c 	andi	r6,r21,1
    390c:	1009883a 	mov	r4,r2
    3910:	a82bd07a 	srai	r21,r21,1
    3914:	180b883a 	mov	r5,r3
    3918:	30000426 	beq	r6,zero,392c <_dtoa_r+0x430>
    391c:	b9800017 	ldw	r6,0(r23)
    3920:	b9c00117 	ldw	r7,4(r23)
    3924:	84000044 	addi	r16,r16,1
    3928:	000bf9c0 	call	bf9c <__muldf3>
    392c:	bdc00204 	addi	r23,r23,8
    3930:	a83ff51e 	bne	r21,zero,3908 <__alt_exception_stack_pointer+0xf8003908>
    3934:	1013883a 	mov	r9,r2
    3938:	1811883a 	mov	r8,r3
    393c:	480d883a 	mov	r6,r9
    3940:	400f883a 	mov	r7,r8
    3944:	8809883a 	mov	r4,r17
    3948:	a00b883a 	mov	r5,r20
    394c:	000b3740 	call	b374 <__divdf3>
    3950:	d8800f15 	stw	r2,60(sp)
    3954:	d8c01015 	stw	r3,64(sp)
    3958:	d8c00e17 	ldw	r3,56(sp)
    395c:	18000626 	beq	r3,zero,3978 <_dtoa_r+0x47c>
    3960:	d9000f17 	ldw	r4,60(sp)
    3964:	d9401017 	ldw	r5,64(sp)
    3968:	000d883a 	mov	r6,zero
    396c:	01cffc34 	movhi	r7,16368
    3970:	000bea80 	call	bea8 <__ledf2>
    3974:	10040b16 	blt	r2,zero,49a4 <_dtoa_r+0x14a8>
    3978:	8009883a 	mov	r4,r16
    397c:	000d1840 	call	d184 <__floatsidf>
    3980:	d9800f17 	ldw	r6,60(sp)
    3984:	d9c01017 	ldw	r7,64(sp)
    3988:	1009883a 	mov	r4,r2
    398c:	180b883a 	mov	r5,r3
    3990:	000bf9c0 	call	bf9c <__muldf3>
    3994:	000d883a 	mov	r6,zero
    3998:	01d00734 	movhi	r7,16412
    399c:	1009883a 	mov	r4,r2
    39a0:	180b883a 	mov	r5,r3
    39a4:	000aac80 	call	aac8 <__adddf3>
    39a8:	1021883a 	mov	r16,r2
    39ac:	d8800617 	ldw	r2,24(sp)
    39b0:	047f3034 	movhi	r17,64704
    39b4:	1c63883a 	add	r17,r3,r17
    39b8:	10031826 	beq	r2,zero,461c <_dtoa_r+0x1120>
    39bc:	d8c00517 	ldw	r3,20(sp)
    39c0:	db000617 	ldw	r12,24(sp)
    39c4:	d8c01315 	stw	r3,76(sp)
    39c8:	d9000b17 	ldw	r4,44(sp)
    39cc:	20038f26 	beq	r4,zero,480c <_dtoa_r+0x1310>
    39d0:	60bfffc4 	addi	r2,r12,-1
    39d4:	100490fa 	slli	r2,r2,3
    39d8:	00c00074 	movhi	r3,1
    39dc:	18fefe04 	addi	r3,r3,-1032
    39e0:	1885883a 	add	r2,r3,r2
    39e4:	11800017 	ldw	r6,0(r2)
    39e8:	11c00117 	ldw	r7,4(r2)
    39ec:	d8800717 	ldw	r2,28(sp)
    39f0:	0009883a 	mov	r4,zero
    39f4:	014ff834 	movhi	r5,16352
    39f8:	db001615 	stw	r12,88(sp)
    39fc:	15c00044 	addi	r23,r2,1
    3a00:	000b3740 	call	b374 <__divdf3>
    3a04:	800d883a 	mov	r6,r16
    3a08:	880f883a 	mov	r7,r17
    3a0c:	1009883a 	mov	r4,r2
    3a10:	180b883a 	mov	r5,r3
    3a14:	000c8080 	call	c808 <__subdf3>
    3a18:	d9401017 	ldw	r5,64(sp)
    3a1c:	d9000f17 	ldw	r4,60(sp)
    3a20:	102b883a 	mov	r21,r2
    3a24:	d8c01215 	stw	r3,72(sp)
    3a28:	000d1040 	call	d104 <__fixdfsi>
    3a2c:	1009883a 	mov	r4,r2
    3a30:	1029883a 	mov	r20,r2
    3a34:	000d1840 	call	d184 <__floatsidf>
    3a38:	d9000f17 	ldw	r4,60(sp)
    3a3c:	d9401017 	ldw	r5,64(sp)
    3a40:	100d883a 	mov	r6,r2
    3a44:	180f883a 	mov	r7,r3
    3a48:	000c8080 	call	c808 <__subdf3>
    3a4c:	1823883a 	mov	r17,r3
    3a50:	d8c00717 	ldw	r3,28(sp)
    3a54:	d9401217 	ldw	r5,72(sp)
    3a58:	a2000c04 	addi	r8,r20,48
    3a5c:	1021883a 	mov	r16,r2
    3a60:	1a000005 	stb	r8,0(r3)
    3a64:	800d883a 	mov	r6,r16
    3a68:	880f883a 	mov	r7,r17
    3a6c:	a809883a 	mov	r4,r21
    3a70:	4029883a 	mov	r20,r8
    3a74:	000bdcc0 	call	bdcc <__gedf2>
    3a78:	00841d16 	blt	zero,r2,4af0 <_dtoa_r+0x15f4>
    3a7c:	800d883a 	mov	r6,r16
    3a80:	880f883a 	mov	r7,r17
    3a84:	0009883a 	mov	r4,zero
    3a88:	014ffc34 	movhi	r5,16368
    3a8c:	000c8080 	call	c808 <__subdf3>
    3a90:	d9401217 	ldw	r5,72(sp)
    3a94:	100d883a 	mov	r6,r2
    3a98:	180f883a 	mov	r7,r3
    3a9c:	a809883a 	mov	r4,r21
    3aa0:	000bdcc0 	call	bdcc <__gedf2>
    3aa4:	db001617 	ldw	r12,88(sp)
    3aa8:	00840e16 	blt	zero,r2,4ae4 <_dtoa_r+0x15e8>
    3aac:	00800044 	movi	r2,1
    3ab0:	13006b0e 	bge	r2,r12,3c60 <_dtoa_r+0x764>
    3ab4:	d9000717 	ldw	r4,28(sp)
    3ab8:	dd800f15 	stw	r22,60(sp)
    3abc:	dcc01015 	stw	r19,64(sp)
    3ac0:	2319883a 	add	r12,r4,r12
    3ac4:	dcc01217 	ldw	r19,72(sp)
    3ac8:	602d883a 	mov	r22,r12
    3acc:	dc801215 	stw	r18,72(sp)
    3ad0:	b825883a 	mov	r18,r23
    3ad4:	00000906 	br	3afc <_dtoa_r+0x600>
    3ad8:	000c8080 	call	c808 <__subdf3>
    3adc:	a80d883a 	mov	r6,r21
    3ae0:	980f883a 	mov	r7,r19
    3ae4:	1009883a 	mov	r4,r2
    3ae8:	180b883a 	mov	r5,r3
    3aec:	000bea80 	call	bea8 <__ledf2>
    3af0:	1003e816 	blt	r2,zero,4a94 <_dtoa_r+0x1598>
    3af4:	b825883a 	mov	r18,r23
    3af8:	bd83e926 	beq	r23,r22,4aa0 <_dtoa_r+0x15a4>
    3afc:	a809883a 	mov	r4,r21
    3b00:	980b883a 	mov	r5,r19
    3b04:	000d883a 	mov	r6,zero
    3b08:	01d00934 	movhi	r7,16420
    3b0c:	000bf9c0 	call	bf9c <__muldf3>
    3b10:	000d883a 	mov	r6,zero
    3b14:	01d00934 	movhi	r7,16420
    3b18:	8009883a 	mov	r4,r16
    3b1c:	880b883a 	mov	r5,r17
    3b20:	102b883a 	mov	r21,r2
    3b24:	1827883a 	mov	r19,r3
    3b28:	000bf9c0 	call	bf9c <__muldf3>
    3b2c:	180b883a 	mov	r5,r3
    3b30:	1009883a 	mov	r4,r2
    3b34:	1821883a 	mov	r16,r3
    3b38:	1023883a 	mov	r17,r2
    3b3c:	000d1040 	call	d104 <__fixdfsi>
    3b40:	1009883a 	mov	r4,r2
    3b44:	1029883a 	mov	r20,r2
    3b48:	000d1840 	call	d184 <__floatsidf>
    3b4c:	8809883a 	mov	r4,r17
    3b50:	800b883a 	mov	r5,r16
    3b54:	100d883a 	mov	r6,r2
    3b58:	180f883a 	mov	r7,r3
    3b5c:	000c8080 	call	c808 <__subdf3>
    3b60:	a5000c04 	addi	r20,r20,48
    3b64:	a80d883a 	mov	r6,r21
    3b68:	980f883a 	mov	r7,r19
    3b6c:	1009883a 	mov	r4,r2
    3b70:	180b883a 	mov	r5,r3
    3b74:	95000005 	stb	r20,0(r18)
    3b78:	1021883a 	mov	r16,r2
    3b7c:	1823883a 	mov	r17,r3
    3b80:	000bea80 	call	bea8 <__ledf2>
    3b84:	bdc00044 	addi	r23,r23,1
    3b88:	800d883a 	mov	r6,r16
    3b8c:	880f883a 	mov	r7,r17
    3b90:	0009883a 	mov	r4,zero
    3b94:	014ffc34 	movhi	r5,16368
    3b98:	103fcf0e 	bge	r2,zero,3ad8 <__alt_exception_stack_pointer+0xf8003ad8>
    3b9c:	d8c01317 	ldw	r3,76(sp)
    3ba0:	d8c00515 	stw	r3,20(sp)
    3ba4:	d9400917 	ldw	r5,36(sp)
    3ba8:	e009883a 	mov	r4,fp
    3bac:	0005e2c0 	call	5e2c <_Bfree>
    3bb0:	d9000517 	ldw	r4,20(sp)
    3bb4:	d9802317 	ldw	r6,140(sp)
    3bb8:	d9c02517 	ldw	r7,148(sp)
    3bbc:	b8000005 	stb	zero,0(r23)
    3bc0:	20800044 	addi	r2,r4,1
    3bc4:	30800015 	stw	r2,0(r6)
    3bc8:	3802aa26 	beq	r7,zero,4674 <_dtoa_r+0x1178>
    3bcc:	3dc00015 	stw	r23,0(r7)
    3bd0:	d8800717 	ldw	r2,28(sp)
    3bd4:	003e7906 	br	35bc <__alt_exception_stack_pointer+0xf80035bc>
    3bd8:	00800434 	movhi	r2,16
    3bdc:	10bfffc4 	addi	r2,r2,-1
    3be0:	88a2703a 	and	r17,r17,r2
    3be4:	883e851e 	bne	r17,zero,35fc <__alt_exception_stack_pointer+0xf80035fc>
    3be8:	00800074 	movhi	r2,1
    3bec:	10bedf04 	addi	r2,r2,-1156
    3bf0:	003e8406 	br	3604 <__alt_exception_stack_pointer+0xf8003604>
    3bf4:	10c00204 	addi	r3,r2,8
    3bf8:	003e8706 	br	3618 <__alt_exception_stack_pointer+0xf8003618>
    3bfc:	01400434 	movhi	r5,16
    3c00:	297fffc4 	addi	r5,r5,-1
    3c04:	994a703a 	and	r5,r19,r5
    3c08:	9009883a 	mov	r4,r18
    3c0c:	843f0044 	addi	r16,r16,-1023
    3c10:	294ffc34 	orhi	r5,r5,16368
    3c14:	dd800217 	ldw	r22,8(sp)
    3c18:	d8001115 	stw	zero,68(sp)
    3c1c:	003ea506 	br	36b4 <__alt_exception_stack_pointer+0xf80036b4>
    3c20:	00800074 	movhi	r2,1
    3c24:	10bed604 	addi	r2,r2,-1192
    3c28:	003e6406 	br	35bc <__alt_exception_stack_pointer+0xf80035bc>
    3c2c:	e0001115 	stw	zero,68(fp)
    3c30:	000b883a 	mov	r5,zero
    3c34:	e009883a 	mov	r4,fp
    3c38:	0005d840 	call	5d84 <_Balloc>
    3c3c:	01bfffc4 	movi	r6,-1
    3c40:	01c00044 	movi	r7,1
    3c44:	d8800715 	stw	r2,28(sp)
    3c48:	d9800c15 	stw	r6,48(sp)
    3c4c:	e0801015 	stw	r2,64(fp)
    3c50:	d8000315 	stw	zero,12(sp)
    3c54:	d9c00b15 	stw	r7,44(sp)
    3c58:	d9800615 	stw	r6,24(sp)
    3c5c:	d8002215 	stw	zero,136(sp)
    3c60:	d8800117 	ldw	r2,4(sp)
    3c64:	10008916 	blt	r2,zero,3e8c <_dtoa_r+0x990>
    3c68:	d9000517 	ldw	r4,20(sp)
    3c6c:	00c00384 	movi	r3,14
    3c70:	19008616 	blt	r3,r4,3e8c <_dtoa_r+0x990>
    3c74:	200490fa 	slli	r2,r4,3
    3c78:	00c00074 	movhi	r3,1
    3c7c:	d9802217 	ldw	r6,136(sp)
    3c80:	18fefe04 	addi	r3,r3,-1032
    3c84:	1885883a 	add	r2,r3,r2
    3c88:	14000017 	ldw	r16,0(r2)
    3c8c:	14400117 	ldw	r17,4(r2)
    3c90:	30016316 	blt	r6,zero,4220 <_dtoa_r+0xd24>
    3c94:	800d883a 	mov	r6,r16
    3c98:	880f883a 	mov	r7,r17
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	980b883a 	mov	r5,r19
    3ca4:	000b3740 	call	b374 <__divdf3>
    3ca8:	180b883a 	mov	r5,r3
    3cac:	1009883a 	mov	r4,r2
    3cb0:	000d1040 	call	d104 <__fixdfsi>
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	102b883a 	mov	r21,r2
    3cbc:	000d1840 	call	d184 <__floatsidf>
    3cc0:	800d883a 	mov	r6,r16
    3cc4:	880f883a 	mov	r7,r17
    3cc8:	1009883a 	mov	r4,r2
    3ccc:	180b883a 	mov	r5,r3
    3cd0:	000bf9c0 	call	bf9c <__muldf3>
    3cd4:	100d883a 	mov	r6,r2
    3cd8:	180f883a 	mov	r7,r3
    3cdc:	9009883a 	mov	r4,r18
    3ce0:	980b883a 	mov	r5,r19
    3ce4:	000c8080 	call	c808 <__subdf3>
    3ce8:	d9c00717 	ldw	r7,28(sp)
    3cec:	1009883a 	mov	r4,r2
    3cf0:	a8800c04 	addi	r2,r21,48
    3cf4:	38800005 	stb	r2,0(r7)
    3cf8:	3dc00044 	addi	r23,r7,1
    3cfc:	d9c00617 	ldw	r7,24(sp)
    3d00:	01800044 	movi	r6,1
    3d04:	180b883a 	mov	r5,r3
    3d08:	2005883a 	mov	r2,r4
    3d0c:	39803826 	beq	r7,r6,3df0 <_dtoa_r+0x8f4>
    3d10:	000d883a 	mov	r6,zero
    3d14:	01d00934 	movhi	r7,16420
    3d18:	000bf9c0 	call	bf9c <__muldf3>
    3d1c:	000d883a 	mov	r6,zero
    3d20:	000f883a 	mov	r7,zero
    3d24:	1009883a 	mov	r4,r2
    3d28:	180b883a 	mov	r5,r3
    3d2c:	1025883a 	mov	r18,r2
    3d30:	1827883a 	mov	r19,r3
    3d34:	000bd440 	call	bd44 <__eqdf2>
    3d38:	103f9a26 	beq	r2,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    3d3c:	d9c00617 	ldw	r7,24(sp)
    3d40:	d8c00717 	ldw	r3,28(sp)
    3d44:	b829883a 	mov	r20,r23
    3d48:	38bfffc4 	addi	r2,r7,-1
    3d4c:	18ad883a 	add	r22,r3,r2
    3d50:	00000a06 	br	3d7c <_dtoa_r+0x880>
    3d54:	000bf9c0 	call	bf9c <__muldf3>
    3d58:	000d883a 	mov	r6,zero
    3d5c:	000f883a 	mov	r7,zero
    3d60:	1009883a 	mov	r4,r2
    3d64:	180b883a 	mov	r5,r3
    3d68:	1025883a 	mov	r18,r2
    3d6c:	1827883a 	mov	r19,r3
    3d70:	b829883a 	mov	r20,r23
    3d74:	000bd440 	call	bd44 <__eqdf2>
    3d78:	103f8a26 	beq	r2,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    3d7c:	800d883a 	mov	r6,r16
    3d80:	880f883a 	mov	r7,r17
    3d84:	9009883a 	mov	r4,r18
    3d88:	980b883a 	mov	r5,r19
    3d8c:	000b3740 	call	b374 <__divdf3>
    3d90:	180b883a 	mov	r5,r3
    3d94:	1009883a 	mov	r4,r2
    3d98:	000d1040 	call	d104 <__fixdfsi>
    3d9c:	1009883a 	mov	r4,r2
    3da0:	102b883a 	mov	r21,r2
    3da4:	000d1840 	call	d184 <__floatsidf>
    3da8:	800d883a 	mov	r6,r16
    3dac:	880f883a 	mov	r7,r17
    3db0:	1009883a 	mov	r4,r2
    3db4:	180b883a 	mov	r5,r3
    3db8:	000bf9c0 	call	bf9c <__muldf3>
    3dbc:	100d883a 	mov	r6,r2
    3dc0:	180f883a 	mov	r7,r3
    3dc4:	9009883a 	mov	r4,r18
    3dc8:	980b883a 	mov	r5,r19
    3dcc:	000c8080 	call	c808 <__subdf3>
    3dd0:	aa000c04 	addi	r8,r21,48
    3dd4:	a2000005 	stb	r8,0(r20)
    3dd8:	000d883a 	mov	r6,zero
    3ddc:	01d00934 	movhi	r7,16420
    3de0:	1009883a 	mov	r4,r2
    3de4:	180b883a 	mov	r5,r3
    3de8:	a5c00044 	addi	r23,r20,1
    3dec:	b53fd91e 	bne	r22,r20,3d54 <__alt_exception_stack_pointer+0xf8003d54>
    3df0:	100d883a 	mov	r6,r2
    3df4:	180f883a 	mov	r7,r3
    3df8:	1009883a 	mov	r4,r2
    3dfc:	180b883a 	mov	r5,r3
    3e00:	000aac80 	call	aac8 <__adddf3>
    3e04:	100d883a 	mov	r6,r2
    3e08:	180f883a 	mov	r7,r3
    3e0c:	8009883a 	mov	r4,r16
    3e10:	880b883a 	mov	r5,r17
    3e14:	1027883a 	mov	r19,r2
    3e18:	1825883a 	mov	r18,r3
    3e1c:	000bea80 	call	bea8 <__ledf2>
    3e20:	10000816 	blt	r2,zero,3e44 <_dtoa_r+0x948>
    3e24:	980d883a 	mov	r6,r19
    3e28:	900f883a 	mov	r7,r18
    3e2c:	8009883a 	mov	r4,r16
    3e30:	880b883a 	mov	r5,r17
    3e34:	000bd440 	call	bd44 <__eqdf2>
    3e38:	103f5a1e 	bne	r2,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    3e3c:	ad40004c 	andi	r21,r21,1
    3e40:	a83f5826 	beq	r21,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    3e44:	bd3fffc3 	ldbu	r20,-1(r23)
    3e48:	b8bfffc4 	addi	r2,r23,-1
    3e4c:	1007883a 	mov	r3,r2
    3e50:	01400e44 	movi	r5,57
    3e54:	d9800717 	ldw	r6,28(sp)
    3e58:	00000506 	br	3e70 <_dtoa_r+0x974>
    3e5c:	18ffffc4 	addi	r3,r3,-1
    3e60:	11824726 	beq	r2,r6,4780 <_dtoa_r+0x1284>
    3e64:	1d000003 	ldbu	r20,0(r3)
    3e68:	102f883a 	mov	r23,r2
    3e6c:	10bfffc4 	addi	r2,r2,-1
    3e70:	a1003fcc 	andi	r4,r20,255
    3e74:	2100201c 	xori	r4,r4,128
    3e78:	213fe004 	addi	r4,r4,-128
    3e7c:	217ff726 	beq	r4,r5,3e5c <__alt_exception_stack_pointer+0xf8003e5c>
    3e80:	a2000044 	addi	r8,r20,1
    3e84:	12000005 	stb	r8,0(r2)
    3e88:	003f4606 	br	3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    3e8c:	d9000b17 	ldw	r4,44(sp)
    3e90:	2000c826 	beq	r4,zero,41b4 <_dtoa_r+0xcb8>
    3e94:	d9800317 	ldw	r6,12(sp)
    3e98:	00c00044 	movi	r3,1
    3e9c:	1980f90e 	bge	r3,r6,4284 <_dtoa_r+0xd88>
    3ea0:	d8800617 	ldw	r2,24(sp)
    3ea4:	d8c00a17 	ldw	r3,40(sp)
    3ea8:	157fffc4 	addi	r21,r2,-1
    3eac:	1d41f316 	blt	r3,r21,467c <_dtoa_r+0x1180>
    3eb0:	1d6bc83a 	sub	r21,r3,r21
    3eb4:	d9c00617 	ldw	r7,24(sp)
    3eb8:	3802aa16 	blt	r7,zero,4964 <_dtoa_r+0x1468>
    3ebc:	dd000817 	ldw	r20,32(sp)
    3ec0:	d8800617 	ldw	r2,24(sp)
    3ec4:	d8c00817 	ldw	r3,32(sp)
    3ec8:	01400044 	movi	r5,1
    3ecc:	e009883a 	mov	r4,fp
    3ed0:	1887883a 	add	r3,r3,r2
    3ed4:	d8c00815 	stw	r3,32(sp)
    3ed8:	b0ad883a 	add	r22,r22,r2
    3edc:	00061b80 	call	61b8 <__i2b>
    3ee0:	1023883a 	mov	r17,r2
    3ee4:	a0000826 	beq	r20,zero,3f08 <_dtoa_r+0xa0c>
    3ee8:	0580070e 	bge	zero,r22,3f08 <_dtoa_r+0xa0c>
    3eec:	a005883a 	mov	r2,r20
    3ef0:	b500b916 	blt	r22,r20,41d8 <_dtoa_r+0xcdc>
    3ef4:	d9000817 	ldw	r4,32(sp)
    3ef8:	a0a9c83a 	sub	r20,r20,r2
    3efc:	b0adc83a 	sub	r22,r22,r2
    3f00:	2089c83a 	sub	r4,r4,r2
    3f04:	d9000815 	stw	r4,32(sp)
    3f08:	d9800a17 	ldw	r6,40(sp)
    3f0c:	0181810e 	bge	zero,r6,4514 <_dtoa_r+0x1018>
    3f10:	d9c00b17 	ldw	r7,44(sp)
    3f14:	3800b326 	beq	r7,zero,41e4 <_dtoa_r+0xce8>
    3f18:	a800b226 	beq	r21,zero,41e4 <_dtoa_r+0xce8>
    3f1c:	880b883a 	mov	r5,r17
    3f20:	a80d883a 	mov	r6,r21
    3f24:	e009883a 	mov	r4,fp
    3f28:	00064800 	call	6480 <__pow5mult>
    3f2c:	d9800917 	ldw	r6,36(sp)
    3f30:	100b883a 	mov	r5,r2
    3f34:	e009883a 	mov	r4,fp
    3f38:	1023883a 	mov	r17,r2
    3f3c:	00061f40 	call	61f4 <__multiply>
    3f40:	1021883a 	mov	r16,r2
    3f44:	d8800a17 	ldw	r2,40(sp)
    3f48:	d9400917 	ldw	r5,36(sp)
    3f4c:	e009883a 	mov	r4,fp
    3f50:	1545c83a 	sub	r2,r2,r21
    3f54:	d8800a15 	stw	r2,40(sp)
    3f58:	0005e2c0 	call	5e2c <_Bfree>
    3f5c:	d8c00a17 	ldw	r3,40(sp)
    3f60:	18009f1e 	bne	r3,zero,41e0 <_dtoa_r+0xce4>
    3f64:	05c00044 	movi	r23,1
    3f68:	e009883a 	mov	r4,fp
    3f6c:	b80b883a 	mov	r5,r23
    3f70:	00061b80 	call	61b8 <__i2b>
    3f74:	d9000d17 	ldw	r4,52(sp)
    3f78:	102b883a 	mov	r21,r2
    3f7c:	2000ce26 	beq	r4,zero,42b8 <_dtoa_r+0xdbc>
    3f80:	200d883a 	mov	r6,r4
    3f84:	100b883a 	mov	r5,r2
    3f88:	e009883a 	mov	r4,fp
    3f8c:	00064800 	call	6480 <__pow5mult>
    3f90:	d9800317 	ldw	r6,12(sp)
    3f94:	102b883a 	mov	r21,r2
    3f98:	b981810e 	bge	r23,r6,45a0 <_dtoa_r+0x10a4>
    3f9c:	0027883a 	mov	r19,zero
    3fa0:	a8800417 	ldw	r2,16(r21)
    3fa4:	05c00804 	movi	r23,32
    3fa8:	10800104 	addi	r2,r2,4
    3fac:	1085883a 	add	r2,r2,r2
    3fb0:	1085883a 	add	r2,r2,r2
    3fb4:	a885883a 	add	r2,r21,r2
    3fb8:	11000017 	ldw	r4,0(r2)
    3fbc:	00060a00 	call	60a0 <__hi0bits>
    3fc0:	b885c83a 	sub	r2,r23,r2
    3fc4:	1585883a 	add	r2,r2,r22
    3fc8:	108007cc 	andi	r2,r2,31
    3fcc:	1000b326 	beq	r2,zero,429c <_dtoa_r+0xda0>
    3fd0:	00c00804 	movi	r3,32
    3fd4:	1887c83a 	sub	r3,r3,r2
    3fd8:	01000104 	movi	r4,4
    3fdc:	20c2cd0e 	bge	r4,r3,4b14 <_dtoa_r+0x1618>
    3fe0:	00c00704 	movi	r3,28
    3fe4:	1885c83a 	sub	r2,r3,r2
    3fe8:	d8c00817 	ldw	r3,32(sp)
    3fec:	a0a9883a 	add	r20,r20,r2
    3ff0:	b0ad883a 	add	r22,r22,r2
    3ff4:	1887883a 	add	r3,r3,r2
    3ff8:	d8c00815 	stw	r3,32(sp)
    3ffc:	d9800817 	ldw	r6,32(sp)
    4000:	0180040e 	bge	zero,r6,4014 <_dtoa_r+0xb18>
    4004:	800b883a 	mov	r5,r16
    4008:	e009883a 	mov	r4,fp
    400c:	00065c00 	call	65c0 <__lshift>
    4010:	1021883a 	mov	r16,r2
    4014:	0580050e 	bge	zero,r22,402c <_dtoa_r+0xb30>
    4018:	a80b883a 	mov	r5,r21
    401c:	b00d883a 	mov	r6,r22
    4020:	e009883a 	mov	r4,fp
    4024:	00065c00 	call	65c0 <__lshift>
    4028:	102b883a 	mov	r21,r2
    402c:	d9c00e17 	ldw	r7,56(sp)
    4030:	3801211e 	bne	r7,zero,44b8 <_dtoa_r+0xfbc>
    4034:	d9800617 	ldw	r6,24(sp)
    4038:	0181380e 	bge	zero,r6,451c <_dtoa_r+0x1020>
    403c:	d8c00b17 	ldw	r3,44(sp)
    4040:	1800ab1e 	bne	r3,zero,42f0 <_dtoa_r+0xdf4>
    4044:	dc800717 	ldw	r18,28(sp)
    4048:	dcc00617 	ldw	r19,24(sp)
    404c:	9029883a 	mov	r20,r18
    4050:	00000206 	br	405c <_dtoa_r+0xb60>
    4054:	0005e540 	call	5e54 <__multadd>
    4058:	1021883a 	mov	r16,r2
    405c:	a80b883a 	mov	r5,r21
    4060:	8009883a 	mov	r4,r16
    4064:	00032d40 	call	32d4 <quorem>
    4068:	10800c04 	addi	r2,r2,48
    406c:	90800005 	stb	r2,0(r18)
    4070:	94800044 	addi	r18,r18,1
    4074:	9507c83a 	sub	r3,r18,r20
    4078:	000f883a 	mov	r7,zero
    407c:	01800284 	movi	r6,10
    4080:	800b883a 	mov	r5,r16
    4084:	e009883a 	mov	r4,fp
    4088:	1cfff216 	blt	r3,r19,4054 <__alt_exception_stack_pointer+0xf8004054>
    408c:	1011883a 	mov	r8,r2
    4090:	d8800617 	ldw	r2,24(sp)
    4094:	0082370e 	bge	zero,r2,4974 <_dtoa_r+0x1478>
    4098:	d9000717 	ldw	r4,28(sp)
    409c:	0025883a 	mov	r18,zero
    40a0:	20af883a 	add	r23,r4,r2
    40a4:	01800044 	movi	r6,1
    40a8:	800b883a 	mov	r5,r16
    40ac:	e009883a 	mov	r4,fp
    40b0:	da001715 	stw	r8,92(sp)
    40b4:	00065c00 	call	65c0 <__lshift>
    40b8:	a80b883a 	mov	r5,r21
    40bc:	1009883a 	mov	r4,r2
    40c0:	d8800915 	stw	r2,36(sp)
    40c4:	00067080 	call	6708 <__mcmp>
    40c8:	da001717 	ldw	r8,92(sp)
    40cc:	0081800e 	bge	zero,r2,46d0 <_dtoa_r+0x11d4>
    40d0:	b93fffc3 	ldbu	r4,-1(r23)
    40d4:	b8bfffc4 	addi	r2,r23,-1
    40d8:	1007883a 	mov	r3,r2
    40dc:	01800e44 	movi	r6,57
    40e0:	d9c00717 	ldw	r7,28(sp)
    40e4:	00000506 	br	40fc <_dtoa_r+0xc00>
    40e8:	18ffffc4 	addi	r3,r3,-1
    40ec:	11c12326 	beq	r2,r7,457c <_dtoa_r+0x1080>
    40f0:	19000003 	ldbu	r4,0(r3)
    40f4:	102f883a 	mov	r23,r2
    40f8:	10bfffc4 	addi	r2,r2,-1
    40fc:	21403fcc 	andi	r5,r4,255
    4100:	2940201c 	xori	r5,r5,128
    4104:	297fe004 	addi	r5,r5,-128
    4108:	29bff726 	beq	r5,r6,40e8 <__alt_exception_stack_pointer+0xf80040e8>
    410c:	21000044 	addi	r4,r4,1
    4110:	11000005 	stb	r4,0(r2)
    4114:	a80b883a 	mov	r5,r21
    4118:	e009883a 	mov	r4,fp
    411c:	0005e2c0 	call	5e2c <_Bfree>
    4120:	883ea026 	beq	r17,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    4124:	90000426 	beq	r18,zero,4138 <_dtoa_r+0xc3c>
    4128:	94400326 	beq	r18,r17,4138 <_dtoa_r+0xc3c>
    412c:	900b883a 	mov	r5,r18
    4130:	e009883a 	mov	r4,fp
    4134:	0005e2c0 	call	5e2c <_Bfree>
    4138:	880b883a 	mov	r5,r17
    413c:	e009883a 	mov	r4,fp
    4140:	0005e2c0 	call	5e2c <_Bfree>
    4144:	003e9706 	br	3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    4148:	01800044 	movi	r6,1
    414c:	d9800e15 	stw	r6,56(sp)
    4150:	003d9606 	br	37ac <__alt_exception_stack_pointer+0xf80037ac>
    4154:	d8800817 	ldw	r2,32(sp)
    4158:	d8c00517 	ldw	r3,20(sp)
    415c:	d8000d15 	stw	zero,52(sp)
    4160:	10c5c83a 	sub	r2,r2,r3
    4164:	00c9c83a 	sub	r4,zero,r3
    4168:	d8800815 	stw	r2,32(sp)
    416c:	d9000a15 	stw	r4,40(sp)
    4170:	003d9706 	br	37d0 <__alt_exception_stack_pointer+0xf80037d0>
    4174:	05adc83a 	sub	r22,zero,r22
    4178:	dd800815 	stw	r22,32(sp)
    417c:	002d883a 	mov	r22,zero
    4180:	003d8e06 	br	37bc <__alt_exception_stack_pointer+0xf80037bc>
    4184:	d9000517 	ldw	r4,20(sp)
    4188:	000d1840 	call	d184 <__floatsidf>
    418c:	100d883a 	mov	r6,r2
    4190:	180f883a 	mov	r7,r3
    4194:	a009883a 	mov	r4,r20
    4198:	880b883a 	mov	r5,r17
    419c:	000bd440 	call	bd44 <__eqdf2>
    41a0:	103d7126 	beq	r2,zero,3768 <__alt_exception_stack_pointer+0xf8003768>
    41a4:	d9c00517 	ldw	r7,20(sp)
    41a8:	39ffffc4 	addi	r7,r7,-1
    41ac:	d9c00515 	stw	r7,20(sp)
    41b0:	003d6d06 	br	3768 <__alt_exception_stack_pointer+0xf8003768>
    41b4:	dd400a17 	ldw	r21,40(sp)
    41b8:	dd000817 	ldw	r20,32(sp)
    41bc:	0023883a 	mov	r17,zero
    41c0:	003f4806 	br	3ee4 <__alt_exception_stack_pointer+0xf8003ee4>
    41c4:	10e3c83a 	sub	r17,r2,r3
    41c8:	9448983a 	sll	r4,r18,r17
    41cc:	003d3206 	br	3698 <__alt_exception_stack_pointer+0xf8003698>
    41d0:	d8000e15 	stw	zero,56(sp)
    41d4:	003d7506 	br	37ac <__alt_exception_stack_pointer+0xf80037ac>
    41d8:	b005883a 	mov	r2,r22
    41dc:	003f4506 	br	3ef4 <__alt_exception_stack_pointer+0xf8003ef4>
    41e0:	dc000915 	stw	r16,36(sp)
    41e4:	d9800a17 	ldw	r6,40(sp)
    41e8:	d9400917 	ldw	r5,36(sp)
    41ec:	e009883a 	mov	r4,fp
    41f0:	00064800 	call	6480 <__pow5mult>
    41f4:	1021883a 	mov	r16,r2
    41f8:	003f5a06 	br	3f64 <__alt_exception_stack_pointer+0xf8003f64>
    41fc:	01c00044 	movi	r7,1
    4200:	d9c00b15 	stw	r7,44(sp)
    4204:	d8802217 	ldw	r2,136(sp)
    4208:	0081280e 	bge	zero,r2,46ac <_dtoa_r+0x11b0>
    420c:	100d883a 	mov	r6,r2
    4210:	1021883a 	mov	r16,r2
    4214:	d8800c15 	stw	r2,48(sp)
    4218:	d8800615 	stw	r2,24(sp)
    421c:	003d8806 	br	3840 <__alt_exception_stack_pointer+0xf8003840>
    4220:	d8800617 	ldw	r2,24(sp)
    4224:	00be9b16 	blt	zero,r2,3c94 <__alt_exception_stack_pointer+0xf8003c94>
    4228:	10010f1e 	bne	r2,zero,4668 <_dtoa_r+0x116c>
    422c:	880b883a 	mov	r5,r17
    4230:	000d883a 	mov	r6,zero
    4234:	01d00534 	movhi	r7,16404
    4238:	8009883a 	mov	r4,r16
    423c:	000bf9c0 	call	bf9c <__muldf3>
    4240:	900d883a 	mov	r6,r18
    4244:	980f883a 	mov	r7,r19
    4248:	1009883a 	mov	r4,r2
    424c:	180b883a 	mov	r5,r3
    4250:	000bdcc0 	call	bdcc <__gedf2>
    4254:	002b883a 	mov	r21,zero
    4258:	0023883a 	mov	r17,zero
    425c:	1000bf16 	blt	r2,zero,455c <_dtoa_r+0x1060>
    4260:	d9802217 	ldw	r6,136(sp)
    4264:	ddc00717 	ldw	r23,28(sp)
    4268:	018c303a 	nor	r6,zero,r6
    426c:	d9800515 	stw	r6,20(sp)
    4270:	a80b883a 	mov	r5,r21
    4274:	e009883a 	mov	r4,fp
    4278:	0005e2c0 	call	5e2c <_Bfree>
    427c:	883e4926 	beq	r17,zero,3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    4280:	003fad06 	br	4138 <__alt_exception_stack_pointer+0xf8004138>
    4284:	d9c01117 	ldw	r7,68(sp)
    4288:	3801bc26 	beq	r7,zero,497c <_dtoa_r+0x1480>
    428c:	10810cc4 	addi	r2,r2,1075
    4290:	dd400a17 	ldw	r21,40(sp)
    4294:	dd000817 	ldw	r20,32(sp)
    4298:	003f0a06 	br	3ec4 <__alt_exception_stack_pointer+0xf8003ec4>
    429c:	00800704 	movi	r2,28
    42a0:	d9000817 	ldw	r4,32(sp)
    42a4:	a0a9883a 	add	r20,r20,r2
    42a8:	b0ad883a 	add	r22,r22,r2
    42ac:	2089883a 	add	r4,r4,r2
    42b0:	d9000815 	stw	r4,32(sp)
    42b4:	003f5106 	br	3ffc <__alt_exception_stack_pointer+0xf8003ffc>
    42b8:	d8c00317 	ldw	r3,12(sp)
    42bc:	b8c1fc0e 	bge	r23,r3,4ab0 <_dtoa_r+0x15b4>
    42c0:	0027883a 	mov	r19,zero
    42c4:	b805883a 	mov	r2,r23
    42c8:	003f3e06 	br	3fc4 <__alt_exception_stack_pointer+0xf8003fc4>
    42cc:	880b883a 	mov	r5,r17
    42d0:	e009883a 	mov	r4,fp
    42d4:	000f883a 	mov	r7,zero
    42d8:	01800284 	movi	r6,10
    42dc:	0005e540 	call	5e54 <__multadd>
    42e0:	d9000c17 	ldw	r4,48(sp)
    42e4:	1023883a 	mov	r17,r2
    42e8:	0102040e 	bge	zero,r4,4afc <_dtoa_r+0x1600>
    42ec:	d9000615 	stw	r4,24(sp)
    42f0:	0500050e 	bge	zero,r20,4308 <_dtoa_r+0xe0c>
    42f4:	880b883a 	mov	r5,r17
    42f8:	a00d883a 	mov	r6,r20
    42fc:	e009883a 	mov	r4,fp
    4300:	00065c00 	call	65c0 <__lshift>
    4304:	1023883a 	mov	r17,r2
    4308:	9801241e 	bne	r19,zero,479c <_dtoa_r+0x12a0>
    430c:	8829883a 	mov	r20,r17
    4310:	d9000617 	ldw	r4,24(sp)
    4314:	dcc00717 	ldw	r19,28(sp)
    4318:	9480004c 	andi	r18,r18,1
    431c:	20bfffc4 	addi	r2,r4,-1
    4320:	9885883a 	add	r2,r19,r2
    4324:	d8800415 	stw	r2,16(sp)
    4328:	dc800615 	stw	r18,24(sp)
    432c:	a80b883a 	mov	r5,r21
    4330:	8009883a 	mov	r4,r16
    4334:	00032d40 	call	32d4 <quorem>
    4338:	880b883a 	mov	r5,r17
    433c:	8009883a 	mov	r4,r16
    4340:	102f883a 	mov	r23,r2
    4344:	00067080 	call	6708 <__mcmp>
    4348:	a80b883a 	mov	r5,r21
    434c:	a00d883a 	mov	r6,r20
    4350:	e009883a 	mov	r4,fp
    4354:	102d883a 	mov	r22,r2
    4358:	00067680 	call	6768 <__mdiff>
    435c:	1007883a 	mov	r3,r2
    4360:	10800317 	ldw	r2,12(r2)
    4364:	bc800c04 	addi	r18,r23,48
    4368:	180b883a 	mov	r5,r3
    436c:	10004e1e 	bne	r2,zero,44a8 <_dtoa_r+0xfac>
    4370:	8009883a 	mov	r4,r16
    4374:	d8c01615 	stw	r3,88(sp)
    4378:	00067080 	call	6708 <__mcmp>
    437c:	d8c01617 	ldw	r3,88(sp)
    4380:	e009883a 	mov	r4,fp
    4384:	d8801615 	stw	r2,88(sp)
    4388:	180b883a 	mov	r5,r3
    438c:	0005e2c0 	call	5e2c <_Bfree>
    4390:	d8801617 	ldw	r2,88(sp)
    4394:	1000041e 	bne	r2,zero,43a8 <_dtoa_r+0xeac>
    4398:	d9800317 	ldw	r6,12(sp)
    439c:	3000021e 	bne	r6,zero,43a8 <_dtoa_r+0xeac>
    43a0:	d8c00617 	ldw	r3,24(sp)
    43a4:	18003726 	beq	r3,zero,4484 <_dtoa_r+0xf88>
    43a8:	b0002016 	blt	r22,zero,442c <_dtoa_r+0xf30>
    43ac:	b000041e 	bne	r22,zero,43c0 <_dtoa_r+0xec4>
    43b0:	d9000317 	ldw	r4,12(sp)
    43b4:	2000021e 	bne	r4,zero,43c0 <_dtoa_r+0xec4>
    43b8:	d8c00617 	ldw	r3,24(sp)
    43bc:	18001b26 	beq	r3,zero,442c <_dtoa_r+0xf30>
    43c0:	00810716 	blt	zero,r2,47e0 <_dtoa_r+0x12e4>
    43c4:	d8c00417 	ldw	r3,16(sp)
    43c8:	9d800044 	addi	r22,r19,1
    43cc:	9c800005 	stb	r18,0(r19)
    43d0:	b02f883a 	mov	r23,r22
    43d4:	98c10626 	beq	r19,r3,47f0 <_dtoa_r+0x12f4>
    43d8:	800b883a 	mov	r5,r16
    43dc:	000f883a 	mov	r7,zero
    43e0:	01800284 	movi	r6,10
    43e4:	e009883a 	mov	r4,fp
    43e8:	0005e540 	call	5e54 <__multadd>
    43ec:	1021883a 	mov	r16,r2
    43f0:	000f883a 	mov	r7,zero
    43f4:	01800284 	movi	r6,10
    43f8:	880b883a 	mov	r5,r17
    43fc:	e009883a 	mov	r4,fp
    4400:	8d002526 	beq	r17,r20,4498 <_dtoa_r+0xf9c>
    4404:	0005e540 	call	5e54 <__multadd>
    4408:	a00b883a 	mov	r5,r20
    440c:	000f883a 	mov	r7,zero
    4410:	01800284 	movi	r6,10
    4414:	e009883a 	mov	r4,fp
    4418:	1023883a 	mov	r17,r2
    441c:	0005e540 	call	5e54 <__multadd>
    4420:	1029883a 	mov	r20,r2
    4424:	b027883a 	mov	r19,r22
    4428:	003fc006 	br	432c <__alt_exception_stack_pointer+0xf800432c>
    442c:	9011883a 	mov	r8,r18
    4430:	00800e0e 	bge	zero,r2,446c <_dtoa_r+0xf70>
    4434:	800b883a 	mov	r5,r16
    4438:	01800044 	movi	r6,1
    443c:	e009883a 	mov	r4,fp
    4440:	da001715 	stw	r8,92(sp)
    4444:	00065c00 	call	65c0 <__lshift>
    4448:	a80b883a 	mov	r5,r21
    444c:	1009883a 	mov	r4,r2
    4450:	1021883a 	mov	r16,r2
    4454:	00067080 	call	6708 <__mcmp>
    4458:	da001717 	ldw	r8,92(sp)
    445c:	0081960e 	bge	zero,r2,4ab8 <_dtoa_r+0x15bc>
    4460:	00800e44 	movi	r2,57
    4464:	40817026 	beq	r8,r2,4a28 <_dtoa_r+0x152c>
    4468:	ba000c44 	addi	r8,r23,49
    446c:	8825883a 	mov	r18,r17
    4470:	9dc00044 	addi	r23,r19,1
    4474:	9a000005 	stb	r8,0(r19)
    4478:	a023883a 	mov	r17,r20
    447c:	dc000915 	stw	r16,36(sp)
    4480:	003f2406 	br	4114 <__alt_exception_stack_pointer+0xf8004114>
    4484:	00800e44 	movi	r2,57
    4488:	9011883a 	mov	r8,r18
    448c:	90816626 	beq	r18,r2,4a28 <_dtoa_r+0x152c>
    4490:	05bff516 	blt	zero,r22,4468 <__alt_exception_stack_pointer+0xf8004468>
    4494:	003ff506 	br	446c <__alt_exception_stack_pointer+0xf800446c>
    4498:	0005e540 	call	5e54 <__multadd>
    449c:	1023883a 	mov	r17,r2
    44a0:	1029883a 	mov	r20,r2
    44a4:	003fdf06 	br	4424 <__alt_exception_stack_pointer+0xf8004424>
    44a8:	e009883a 	mov	r4,fp
    44ac:	0005e2c0 	call	5e2c <_Bfree>
    44b0:	00800044 	movi	r2,1
    44b4:	003fbc06 	br	43a8 <__alt_exception_stack_pointer+0xf80043a8>
    44b8:	a80b883a 	mov	r5,r21
    44bc:	8009883a 	mov	r4,r16
    44c0:	00067080 	call	6708 <__mcmp>
    44c4:	103edb0e 	bge	r2,zero,4034 <__alt_exception_stack_pointer+0xf8004034>
    44c8:	800b883a 	mov	r5,r16
    44cc:	000f883a 	mov	r7,zero
    44d0:	01800284 	movi	r6,10
    44d4:	e009883a 	mov	r4,fp
    44d8:	0005e540 	call	5e54 <__multadd>
    44dc:	1021883a 	mov	r16,r2
    44e0:	d8800517 	ldw	r2,20(sp)
    44e4:	d8c00b17 	ldw	r3,44(sp)
    44e8:	10bfffc4 	addi	r2,r2,-1
    44ec:	d8800515 	stw	r2,20(sp)
    44f0:	183f761e 	bne	r3,zero,42cc <__alt_exception_stack_pointer+0xf80042cc>
    44f4:	d9000c17 	ldw	r4,48(sp)
    44f8:	0101730e 	bge	zero,r4,4ac8 <_dtoa_r+0x15cc>
    44fc:	d9000615 	stw	r4,24(sp)
    4500:	003ed006 	br	4044 <__alt_exception_stack_pointer+0xf8004044>
    4504:	00800084 	movi	r2,2
    4508:	3081861e 	bne	r6,r2,4b24 <_dtoa_r+0x1628>
    450c:	d8000b15 	stw	zero,44(sp)
    4510:	003f3c06 	br	4204 <__alt_exception_stack_pointer+0xf8004204>
    4514:	dc000917 	ldw	r16,36(sp)
    4518:	003e9206 	br	3f64 <__alt_exception_stack_pointer+0xf8003f64>
    451c:	d9c00317 	ldw	r7,12(sp)
    4520:	00800084 	movi	r2,2
    4524:	11fec50e 	bge	r2,r7,403c <__alt_exception_stack_pointer+0xf800403c>
    4528:	d9000617 	ldw	r4,24(sp)
    452c:	20013c1e 	bne	r4,zero,4a20 <_dtoa_r+0x1524>
    4530:	a80b883a 	mov	r5,r21
    4534:	000f883a 	mov	r7,zero
    4538:	01800144 	movi	r6,5
    453c:	e009883a 	mov	r4,fp
    4540:	0005e540 	call	5e54 <__multadd>
    4544:	100b883a 	mov	r5,r2
    4548:	8009883a 	mov	r4,r16
    454c:	102b883a 	mov	r21,r2
    4550:	00067080 	call	6708 <__mcmp>
    4554:	dc000915 	stw	r16,36(sp)
    4558:	00bf410e 	bge	zero,r2,4260 <__alt_exception_stack_pointer+0xf8004260>
    455c:	d9c00717 	ldw	r7,28(sp)
    4560:	00800c44 	movi	r2,49
    4564:	38800005 	stb	r2,0(r7)
    4568:	d8800517 	ldw	r2,20(sp)
    456c:	3dc00044 	addi	r23,r7,1
    4570:	10800044 	addi	r2,r2,1
    4574:	d8800515 	stw	r2,20(sp)
    4578:	003f3d06 	br	4270 <__alt_exception_stack_pointer+0xf8004270>
    457c:	d9800517 	ldw	r6,20(sp)
    4580:	d9c00717 	ldw	r7,28(sp)
    4584:	00800c44 	movi	r2,49
    4588:	31800044 	addi	r6,r6,1
    458c:	d9800515 	stw	r6,20(sp)
    4590:	38800005 	stb	r2,0(r7)
    4594:	003edf06 	br	4114 <__alt_exception_stack_pointer+0xf8004114>
    4598:	d8000b15 	stw	zero,44(sp)
    459c:	003c9f06 	br	381c <__alt_exception_stack_pointer+0xf800381c>
    45a0:	903e7e1e 	bne	r18,zero,3f9c <__alt_exception_stack_pointer+0xf8003f9c>
    45a4:	00800434 	movhi	r2,16
    45a8:	10bfffc4 	addi	r2,r2,-1
    45ac:	9884703a 	and	r2,r19,r2
    45b0:	1000ea1e 	bne	r2,zero,495c <_dtoa_r+0x1460>
    45b4:	9cdffc2c 	andhi	r19,r19,32752
    45b8:	9800e826 	beq	r19,zero,495c <_dtoa_r+0x1460>
    45bc:	d9c00817 	ldw	r7,32(sp)
    45c0:	b5800044 	addi	r22,r22,1
    45c4:	04c00044 	movi	r19,1
    45c8:	39c00044 	addi	r7,r7,1
    45cc:	d9c00815 	stw	r7,32(sp)
    45d0:	d8800d17 	ldw	r2,52(sp)
    45d4:	103e721e 	bne	r2,zero,3fa0 <__alt_exception_stack_pointer+0xf8003fa0>
    45d8:	00800044 	movi	r2,1
    45dc:	003e7906 	br	3fc4 <__alt_exception_stack_pointer+0xf8003fc4>
    45e0:	8009883a 	mov	r4,r16
    45e4:	000d1840 	call	d184 <__floatsidf>
    45e8:	d9800f17 	ldw	r6,60(sp)
    45ec:	d9c01017 	ldw	r7,64(sp)
    45f0:	1009883a 	mov	r4,r2
    45f4:	180b883a 	mov	r5,r3
    45f8:	000bf9c0 	call	bf9c <__muldf3>
    45fc:	000d883a 	mov	r6,zero
    4600:	01d00734 	movhi	r7,16412
    4604:	1009883a 	mov	r4,r2
    4608:	180b883a 	mov	r5,r3
    460c:	000aac80 	call	aac8 <__adddf3>
    4610:	047f3034 	movhi	r17,64704
    4614:	1021883a 	mov	r16,r2
    4618:	1c63883a 	add	r17,r3,r17
    461c:	d9000f17 	ldw	r4,60(sp)
    4620:	d9401017 	ldw	r5,64(sp)
    4624:	000d883a 	mov	r6,zero
    4628:	01d00534 	movhi	r7,16404
    462c:	000c8080 	call	c808 <__subdf3>
    4630:	800d883a 	mov	r6,r16
    4634:	880f883a 	mov	r7,r17
    4638:	1009883a 	mov	r4,r2
    463c:	180b883a 	mov	r5,r3
    4640:	102b883a 	mov	r21,r2
    4644:	1829883a 	mov	r20,r3
    4648:	000bdcc0 	call	bdcc <__gedf2>
    464c:	00806c16 	blt	zero,r2,4800 <_dtoa_r+0x1304>
    4650:	89e0003c 	xorhi	r7,r17,32768
    4654:	800d883a 	mov	r6,r16
    4658:	a809883a 	mov	r4,r21
    465c:	a00b883a 	mov	r5,r20
    4660:	000bea80 	call	bea8 <__ledf2>
    4664:	103d7e0e 	bge	r2,zero,3c60 <__alt_exception_stack_pointer+0xf8003c60>
    4668:	002b883a 	mov	r21,zero
    466c:	0023883a 	mov	r17,zero
    4670:	003efb06 	br	4260 <__alt_exception_stack_pointer+0xf8004260>
    4674:	d8800717 	ldw	r2,28(sp)
    4678:	003bd006 	br	35bc <__alt_exception_stack_pointer+0xf80035bc>
    467c:	d9000a17 	ldw	r4,40(sp)
    4680:	d9800d17 	ldw	r6,52(sp)
    4684:	dd400a15 	stw	r21,40(sp)
    4688:	a905c83a 	sub	r2,r21,r4
    468c:	308d883a 	add	r6,r6,r2
    4690:	d9800d15 	stw	r6,52(sp)
    4694:	002b883a 	mov	r21,zero
    4698:	003e0606 	br	3eb4 <__alt_exception_stack_pointer+0xf8003eb4>
    469c:	9023883a 	mov	r17,r18
    46a0:	9829883a 	mov	r20,r19
    46a4:	04000084 	movi	r16,2
    46a8:	003c9206 	br	38f4 <__alt_exception_stack_pointer+0xf80038f4>
    46ac:	04000044 	movi	r16,1
    46b0:	dc000c15 	stw	r16,48(sp)
    46b4:	dc000615 	stw	r16,24(sp)
    46b8:	dc002215 	stw	r16,136(sp)
    46bc:	e0001115 	stw	zero,68(fp)
    46c0:	000b883a 	mov	r5,zero
    46c4:	003c6906 	br	386c <__alt_exception_stack_pointer+0xf800386c>
    46c8:	3021883a 	mov	r16,r6
    46cc:	003ffb06 	br	46bc <__alt_exception_stack_pointer+0xf80046bc>
    46d0:	1000021e 	bne	r2,zero,46dc <_dtoa_r+0x11e0>
    46d4:	4200004c 	andi	r8,r8,1
    46d8:	403e7d1e 	bne	r8,zero,40d0 <__alt_exception_stack_pointer+0xf80040d0>
    46dc:	01000c04 	movi	r4,48
    46e0:	00000106 	br	46e8 <_dtoa_r+0x11ec>
    46e4:	102f883a 	mov	r23,r2
    46e8:	b8bfffc4 	addi	r2,r23,-1
    46ec:	10c00007 	ldb	r3,0(r2)
    46f0:	193ffc26 	beq	r3,r4,46e4 <__alt_exception_stack_pointer+0xf80046e4>
    46f4:	003e8706 	br	4114 <__alt_exception_stack_pointer+0xf8004114>
    46f8:	d8800517 	ldw	r2,20(sp)
    46fc:	00a3c83a 	sub	r17,zero,r2
    4700:	8800a426 	beq	r17,zero,4994 <_dtoa_r+0x1498>
    4704:	888003cc 	andi	r2,r17,15
    4708:	100490fa 	slli	r2,r2,3
    470c:	00c00074 	movhi	r3,1
    4710:	18fefe04 	addi	r3,r3,-1032
    4714:	1885883a 	add	r2,r3,r2
    4718:	11800017 	ldw	r6,0(r2)
    471c:	11c00117 	ldw	r7,4(r2)
    4720:	9009883a 	mov	r4,r18
    4724:	980b883a 	mov	r5,r19
    4728:	8823d13a 	srai	r17,r17,4
    472c:	000bf9c0 	call	bf9c <__muldf3>
    4730:	d8800f15 	stw	r2,60(sp)
    4734:	d8c01015 	stw	r3,64(sp)
    4738:	8800e826 	beq	r17,zero,4adc <_dtoa_r+0x15e0>
    473c:	05000074 	movhi	r20,1
    4740:	a53ef404 	addi	r20,r20,-1072
    4744:	04000084 	movi	r16,2
    4748:	8980004c 	andi	r6,r17,1
    474c:	1009883a 	mov	r4,r2
    4750:	8823d07a 	srai	r17,r17,1
    4754:	180b883a 	mov	r5,r3
    4758:	30000426 	beq	r6,zero,476c <_dtoa_r+0x1270>
    475c:	a1800017 	ldw	r6,0(r20)
    4760:	a1c00117 	ldw	r7,4(r20)
    4764:	84000044 	addi	r16,r16,1
    4768:	000bf9c0 	call	bf9c <__muldf3>
    476c:	a5000204 	addi	r20,r20,8
    4770:	883ff51e 	bne	r17,zero,4748 <__alt_exception_stack_pointer+0xf8004748>
    4774:	d8800f15 	stw	r2,60(sp)
    4778:	d8c01015 	stw	r3,64(sp)
    477c:	003c7606 	br	3958 <__alt_exception_stack_pointer+0xf8003958>
    4780:	00c00c04 	movi	r3,48
    4784:	10c00005 	stb	r3,0(r2)
    4788:	d8c00517 	ldw	r3,20(sp)
    478c:	bd3fffc3 	ldbu	r20,-1(r23)
    4790:	18c00044 	addi	r3,r3,1
    4794:	d8c00515 	stw	r3,20(sp)
    4798:	003db906 	br	3e80 <__alt_exception_stack_pointer+0xf8003e80>
    479c:	89400117 	ldw	r5,4(r17)
    47a0:	e009883a 	mov	r4,fp
    47a4:	0005d840 	call	5d84 <_Balloc>
    47a8:	89800417 	ldw	r6,16(r17)
    47ac:	89400304 	addi	r5,r17,12
    47b0:	11000304 	addi	r4,r2,12
    47b4:	31800084 	addi	r6,r6,2
    47b8:	318d883a 	add	r6,r6,r6
    47bc:	318d883a 	add	r6,r6,r6
    47c0:	1027883a 	mov	r19,r2
    47c4:	0005b140 	call	5b14 <memcpy>
    47c8:	01800044 	movi	r6,1
    47cc:	980b883a 	mov	r5,r19
    47d0:	e009883a 	mov	r4,fp
    47d4:	00065c00 	call	65c0 <__lshift>
    47d8:	1029883a 	mov	r20,r2
    47dc:	003ecc06 	br	4310 <__alt_exception_stack_pointer+0xf8004310>
    47e0:	00800e44 	movi	r2,57
    47e4:	90809026 	beq	r18,r2,4a28 <_dtoa_r+0x152c>
    47e8:	92000044 	addi	r8,r18,1
    47ec:	003f1f06 	br	446c <__alt_exception_stack_pointer+0xf800446c>
    47f0:	9011883a 	mov	r8,r18
    47f4:	8825883a 	mov	r18,r17
    47f8:	a023883a 	mov	r17,r20
    47fc:	003e2906 	br	40a4 <__alt_exception_stack_pointer+0xf80040a4>
    4800:	002b883a 	mov	r21,zero
    4804:	0023883a 	mov	r17,zero
    4808:	003f5406 	br	455c <__alt_exception_stack_pointer+0xf800455c>
    480c:	61bfffc4 	addi	r6,r12,-1
    4810:	300490fa 	slli	r2,r6,3
    4814:	00c00074 	movhi	r3,1
    4818:	18fefe04 	addi	r3,r3,-1032
    481c:	1885883a 	add	r2,r3,r2
    4820:	11000017 	ldw	r4,0(r2)
    4824:	11400117 	ldw	r5,4(r2)
    4828:	d8800717 	ldw	r2,28(sp)
    482c:	880f883a 	mov	r7,r17
    4830:	d9801215 	stw	r6,72(sp)
    4834:	800d883a 	mov	r6,r16
    4838:	db001615 	stw	r12,88(sp)
    483c:	15c00044 	addi	r23,r2,1
    4840:	000bf9c0 	call	bf9c <__muldf3>
    4844:	d9401017 	ldw	r5,64(sp)
    4848:	d9000f17 	ldw	r4,60(sp)
    484c:	d8c01515 	stw	r3,84(sp)
    4850:	d8801415 	stw	r2,80(sp)
    4854:	000d1040 	call	d104 <__fixdfsi>
    4858:	1009883a 	mov	r4,r2
    485c:	1021883a 	mov	r16,r2
    4860:	000d1840 	call	d184 <__floatsidf>
    4864:	d9000f17 	ldw	r4,60(sp)
    4868:	d9401017 	ldw	r5,64(sp)
    486c:	100d883a 	mov	r6,r2
    4870:	180f883a 	mov	r7,r3
    4874:	000c8080 	call	c808 <__subdf3>
    4878:	1829883a 	mov	r20,r3
    487c:	d8c00717 	ldw	r3,28(sp)
    4880:	84000c04 	addi	r16,r16,48
    4884:	1023883a 	mov	r17,r2
    4888:	1c000005 	stb	r16,0(r3)
    488c:	db001617 	ldw	r12,88(sp)
    4890:	00800044 	movi	r2,1
    4894:	60802226 	beq	r12,r2,4920 <_dtoa_r+0x1424>
    4898:	d9c00717 	ldw	r7,28(sp)
    489c:	8805883a 	mov	r2,r17
    48a0:	b82b883a 	mov	r21,r23
    48a4:	3b19883a 	add	r12,r7,r12
    48a8:	6023883a 	mov	r17,r12
    48ac:	a007883a 	mov	r3,r20
    48b0:	dc800f15 	stw	r18,60(sp)
    48b4:	000d883a 	mov	r6,zero
    48b8:	01d00934 	movhi	r7,16420
    48bc:	1009883a 	mov	r4,r2
    48c0:	180b883a 	mov	r5,r3
    48c4:	000bf9c0 	call	bf9c <__muldf3>
    48c8:	180b883a 	mov	r5,r3
    48cc:	1009883a 	mov	r4,r2
    48d0:	1829883a 	mov	r20,r3
    48d4:	1025883a 	mov	r18,r2
    48d8:	000d1040 	call	d104 <__fixdfsi>
    48dc:	1009883a 	mov	r4,r2
    48e0:	1021883a 	mov	r16,r2
    48e4:	000d1840 	call	d184 <__floatsidf>
    48e8:	100d883a 	mov	r6,r2
    48ec:	180f883a 	mov	r7,r3
    48f0:	9009883a 	mov	r4,r18
    48f4:	a00b883a 	mov	r5,r20
    48f8:	84000c04 	addi	r16,r16,48
    48fc:	000c8080 	call	c808 <__subdf3>
    4900:	ad400044 	addi	r21,r21,1
    4904:	ac3fffc5 	stb	r16,-1(r21)
    4908:	ac7fea1e 	bne	r21,r17,48b4 <__alt_exception_stack_pointer+0xf80048b4>
    490c:	1023883a 	mov	r17,r2
    4910:	d8801217 	ldw	r2,72(sp)
    4914:	dc800f17 	ldw	r18,60(sp)
    4918:	1829883a 	mov	r20,r3
    491c:	b8af883a 	add	r23,r23,r2
    4920:	d9001417 	ldw	r4,80(sp)
    4924:	d9401517 	ldw	r5,84(sp)
    4928:	000d883a 	mov	r6,zero
    492c:	01cff834 	movhi	r7,16352
    4930:	000aac80 	call	aac8 <__adddf3>
    4934:	880d883a 	mov	r6,r17
    4938:	a00f883a 	mov	r7,r20
    493c:	1009883a 	mov	r4,r2
    4940:	180b883a 	mov	r5,r3
    4944:	000bea80 	call	bea8 <__ledf2>
    4948:	10003e0e 	bge	r2,zero,4a44 <_dtoa_r+0x1548>
    494c:	d9001317 	ldw	r4,76(sp)
    4950:	bd3fffc3 	ldbu	r20,-1(r23)
    4954:	d9000515 	stw	r4,20(sp)
    4958:	003d3b06 	br	3e48 <__alt_exception_stack_pointer+0xf8003e48>
    495c:	0027883a 	mov	r19,zero
    4960:	003f1b06 	br	45d0 <__alt_exception_stack_pointer+0xf80045d0>
    4964:	d8800817 	ldw	r2,32(sp)
    4968:	11e9c83a 	sub	r20,r2,r7
    496c:	0005883a 	mov	r2,zero
    4970:	003d5406 	br	3ec4 <__alt_exception_stack_pointer+0xf8003ec4>
    4974:	00800044 	movi	r2,1
    4978:	003dc706 	br	4098 <__alt_exception_stack_pointer+0xf8004098>
    497c:	d8c00217 	ldw	r3,8(sp)
    4980:	00800d84 	movi	r2,54
    4984:	dd400a17 	ldw	r21,40(sp)
    4988:	10c5c83a 	sub	r2,r2,r3
    498c:	dd000817 	ldw	r20,32(sp)
    4990:	003d4c06 	br	3ec4 <__alt_exception_stack_pointer+0xf8003ec4>
    4994:	dc800f15 	stw	r18,60(sp)
    4998:	dcc01015 	stw	r19,64(sp)
    499c:	04000084 	movi	r16,2
    49a0:	003bed06 	br	3958 <__alt_exception_stack_pointer+0xf8003958>
    49a4:	d9000617 	ldw	r4,24(sp)
    49a8:	203f0d26 	beq	r4,zero,45e0 <__alt_exception_stack_pointer+0xf80045e0>
    49ac:	d9800c17 	ldw	r6,48(sp)
    49b0:	01bcab0e 	bge	zero,r6,3c60 <__alt_exception_stack_pointer+0xf8003c60>
    49b4:	d9401017 	ldw	r5,64(sp)
    49b8:	d9000f17 	ldw	r4,60(sp)
    49bc:	000d883a 	mov	r6,zero
    49c0:	01d00934 	movhi	r7,16420
    49c4:	000bf9c0 	call	bf9c <__muldf3>
    49c8:	81000044 	addi	r4,r16,1
    49cc:	d8800f15 	stw	r2,60(sp)
    49d0:	d8c01015 	stw	r3,64(sp)
    49d4:	000d1840 	call	d184 <__floatsidf>
    49d8:	d9800f17 	ldw	r6,60(sp)
    49dc:	d9c01017 	ldw	r7,64(sp)
    49e0:	1009883a 	mov	r4,r2
    49e4:	180b883a 	mov	r5,r3
    49e8:	000bf9c0 	call	bf9c <__muldf3>
    49ec:	01d00734 	movhi	r7,16412
    49f0:	000d883a 	mov	r6,zero
    49f4:	1009883a 	mov	r4,r2
    49f8:	180b883a 	mov	r5,r3
    49fc:	000aac80 	call	aac8 <__adddf3>
    4a00:	d9c00517 	ldw	r7,20(sp)
    4a04:	047f3034 	movhi	r17,64704
    4a08:	1021883a 	mov	r16,r2
    4a0c:	39ffffc4 	addi	r7,r7,-1
    4a10:	d9c01315 	stw	r7,76(sp)
    4a14:	1c63883a 	add	r17,r3,r17
    4a18:	db000c17 	ldw	r12,48(sp)
    4a1c:	003bea06 	br	39c8 <__alt_exception_stack_pointer+0xf80039c8>
    4a20:	dc000915 	stw	r16,36(sp)
    4a24:	003e0e06 	br	4260 <__alt_exception_stack_pointer+0xf8004260>
    4a28:	01000e44 	movi	r4,57
    4a2c:	8825883a 	mov	r18,r17
    4a30:	9dc00044 	addi	r23,r19,1
    4a34:	99000005 	stb	r4,0(r19)
    4a38:	a023883a 	mov	r17,r20
    4a3c:	dc000915 	stw	r16,36(sp)
    4a40:	003da406 	br	40d4 <__alt_exception_stack_pointer+0xf80040d4>
    4a44:	d9801417 	ldw	r6,80(sp)
    4a48:	d9c01517 	ldw	r7,84(sp)
    4a4c:	0009883a 	mov	r4,zero
    4a50:	014ff834 	movhi	r5,16352
    4a54:	000c8080 	call	c808 <__subdf3>
    4a58:	880d883a 	mov	r6,r17
    4a5c:	a00f883a 	mov	r7,r20
    4a60:	1009883a 	mov	r4,r2
    4a64:	180b883a 	mov	r5,r3
    4a68:	000bdcc0 	call	bdcc <__gedf2>
    4a6c:	00bc7c0e 	bge	zero,r2,3c60 <__alt_exception_stack_pointer+0xf8003c60>
    4a70:	01000c04 	movi	r4,48
    4a74:	00000106 	br	4a7c <_dtoa_r+0x1580>
    4a78:	102f883a 	mov	r23,r2
    4a7c:	b8bfffc4 	addi	r2,r23,-1
    4a80:	10c00007 	ldb	r3,0(r2)
    4a84:	193ffc26 	beq	r3,r4,4a78 <__alt_exception_stack_pointer+0xf8004a78>
    4a88:	d9801317 	ldw	r6,76(sp)
    4a8c:	d9800515 	stw	r6,20(sp)
    4a90:	003c4406 	br	3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    4a94:	d9801317 	ldw	r6,76(sp)
    4a98:	d9800515 	stw	r6,20(sp)
    4a9c:	003cea06 	br	3e48 <__alt_exception_stack_pointer+0xf8003e48>
    4aa0:	dd800f17 	ldw	r22,60(sp)
    4aa4:	dcc01017 	ldw	r19,64(sp)
    4aa8:	dc801217 	ldw	r18,72(sp)
    4aac:	003c6c06 	br	3c60 <__alt_exception_stack_pointer+0xf8003c60>
    4ab0:	903e031e 	bne	r18,zero,42c0 <__alt_exception_stack_pointer+0xf80042c0>
    4ab4:	003ebb06 	br	45a4 <__alt_exception_stack_pointer+0xf80045a4>
    4ab8:	103e6c1e 	bne	r2,zero,446c <__alt_exception_stack_pointer+0xf800446c>
    4abc:	4080004c 	andi	r2,r8,1
    4ac0:	103e6a26 	beq	r2,zero,446c <__alt_exception_stack_pointer+0xf800446c>
    4ac4:	003e6606 	br	4460 <__alt_exception_stack_pointer+0xf8004460>
    4ac8:	d8c00317 	ldw	r3,12(sp)
    4acc:	00800084 	movi	r2,2
    4ad0:	10c02916 	blt	r2,r3,4b78 <_dtoa_r+0x167c>
    4ad4:	d9000c17 	ldw	r4,48(sp)
    4ad8:	003e8806 	br	44fc <__alt_exception_stack_pointer+0xf80044fc>
    4adc:	04000084 	movi	r16,2
    4ae0:	003b9d06 	br	3958 <__alt_exception_stack_pointer+0xf8003958>
    4ae4:	d9001317 	ldw	r4,76(sp)
    4ae8:	d9000515 	stw	r4,20(sp)
    4aec:	003cd606 	br	3e48 <__alt_exception_stack_pointer+0xf8003e48>
    4af0:	d8801317 	ldw	r2,76(sp)
    4af4:	d8800515 	stw	r2,20(sp)
    4af8:	003c2a06 	br	3ba4 <__alt_exception_stack_pointer+0xf8003ba4>
    4afc:	d9800317 	ldw	r6,12(sp)
    4b00:	00800084 	movi	r2,2
    4b04:	11801516 	blt	r2,r6,4b5c <_dtoa_r+0x1660>
    4b08:	d9c00c17 	ldw	r7,48(sp)
    4b0c:	d9c00615 	stw	r7,24(sp)
    4b10:	003df706 	br	42f0 <__alt_exception_stack_pointer+0xf80042f0>
    4b14:	193d3926 	beq	r3,r4,3ffc <__alt_exception_stack_pointer+0xf8003ffc>
    4b18:	00c00f04 	movi	r3,60
    4b1c:	1885c83a 	sub	r2,r3,r2
    4b20:	003ddf06 	br	42a0 <__alt_exception_stack_pointer+0xf80042a0>
    4b24:	e009883a 	mov	r4,fp
    4b28:	e0001115 	stw	zero,68(fp)
    4b2c:	000b883a 	mov	r5,zero
    4b30:	0005d840 	call	5d84 <_Balloc>
    4b34:	d8800715 	stw	r2,28(sp)
    4b38:	d8c00717 	ldw	r3,28(sp)
    4b3c:	00bfffc4 	movi	r2,-1
    4b40:	01000044 	movi	r4,1
    4b44:	d8800c15 	stw	r2,48(sp)
    4b48:	e0c01015 	stw	r3,64(fp)
    4b4c:	d9000b15 	stw	r4,44(sp)
    4b50:	d8800615 	stw	r2,24(sp)
    4b54:	d8002215 	stw	zero,136(sp)
    4b58:	003c4106 	br	3c60 <__alt_exception_stack_pointer+0xf8003c60>
    4b5c:	d8c00c17 	ldw	r3,48(sp)
    4b60:	d8c00615 	stw	r3,24(sp)
    4b64:	003e7006 	br	4528 <__alt_exception_stack_pointer+0xf8004528>
    4b68:	04400044 	movi	r17,1
    4b6c:	003b2006 	br	37f0 <__alt_exception_stack_pointer+0xf80037f0>
    4b70:	000b883a 	mov	r5,zero
    4b74:	003b3d06 	br	386c <__alt_exception_stack_pointer+0xf800386c>
    4b78:	d8800c17 	ldw	r2,48(sp)
    4b7c:	d8800615 	stw	r2,24(sp)
    4b80:	003e6906 	br	4528 <__alt_exception_stack_pointer+0xf8004528>

00004b84 <__sflush_r>:
    4b84:	2880030b 	ldhu	r2,12(r5)
    4b88:	defffb04 	addi	sp,sp,-20
    4b8c:	dcc00315 	stw	r19,12(sp)
    4b90:	dc400115 	stw	r17,4(sp)
    4b94:	dfc00415 	stw	ra,16(sp)
    4b98:	dc800215 	stw	r18,8(sp)
    4b9c:	dc000015 	stw	r16,0(sp)
    4ba0:	10c0020c 	andi	r3,r2,8
    4ba4:	2823883a 	mov	r17,r5
    4ba8:	2027883a 	mov	r19,r4
    4bac:	1800311e 	bne	r3,zero,4c74 <__sflush_r+0xf0>
    4bb0:	28c00117 	ldw	r3,4(r5)
    4bb4:	10820014 	ori	r2,r2,2048
    4bb8:	2880030d 	sth	r2,12(r5)
    4bbc:	00c04b0e 	bge	zero,r3,4cec <__sflush_r+0x168>
    4bc0:	8a000a17 	ldw	r8,40(r17)
    4bc4:	40002326 	beq	r8,zero,4c54 <__sflush_r+0xd0>
    4bc8:	9c000017 	ldw	r16,0(r19)
    4bcc:	10c4000c 	andi	r3,r2,4096
    4bd0:	98000015 	stw	zero,0(r19)
    4bd4:	18004826 	beq	r3,zero,4cf8 <__sflush_r+0x174>
    4bd8:	89801417 	ldw	r6,80(r17)
    4bdc:	10c0010c 	andi	r3,r2,4
    4be0:	18000626 	beq	r3,zero,4bfc <__sflush_r+0x78>
    4be4:	88c00117 	ldw	r3,4(r17)
    4be8:	88800c17 	ldw	r2,48(r17)
    4bec:	30cdc83a 	sub	r6,r6,r3
    4bf0:	10000226 	beq	r2,zero,4bfc <__sflush_r+0x78>
    4bf4:	88800f17 	ldw	r2,60(r17)
    4bf8:	308dc83a 	sub	r6,r6,r2
    4bfc:	89400717 	ldw	r5,28(r17)
    4c00:	000f883a 	mov	r7,zero
    4c04:	9809883a 	mov	r4,r19
    4c08:	403ee83a 	callr	r8
    4c0c:	00ffffc4 	movi	r3,-1
    4c10:	10c04426 	beq	r2,r3,4d24 <__sflush_r+0x1a0>
    4c14:	88c0030b 	ldhu	r3,12(r17)
    4c18:	89000417 	ldw	r4,16(r17)
    4c1c:	88000115 	stw	zero,4(r17)
    4c20:	197dffcc 	andi	r5,r3,63487
    4c24:	8940030d 	sth	r5,12(r17)
    4c28:	89000015 	stw	r4,0(r17)
    4c2c:	18c4000c 	andi	r3,r3,4096
    4c30:	18002c1e 	bne	r3,zero,4ce4 <__sflush_r+0x160>
    4c34:	89400c17 	ldw	r5,48(r17)
    4c38:	9c000015 	stw	r16,0(r19)
    4c3c:	28000526 	beq	r5,zero,4c54 <__sflush_r+0xd0>
    4c40:	88801004 	addi	r2,r17,64
    4c44:	28800226 	beq	r5,r2,4c50 <__sflush_r+0xcc>
    4c48:	9809883a 	mov	r4,r19
    4c4c:	00053000 	call	5300 <_free_r>
    4c50:	88000c15 	stw	zero,48(r17)
    4c54:	0005883a 	mov	r2,zero
    4c58:	dfc00417 	ldw	ra,16(sp)
    4c5c:	dcc00317 	ldw	r19,12(sp)
    4c60:	dc800217 	ldw	r18,8(sp)
    4c64:	dc400117 	ldw	r17,4(sp)
    4c68:	dc000017 	ldw	r16,0(sp)
    4c6c:	dec00504 	addi	sp,sp,20
    4c70:	f800283a 	ret
    4c74:	2c800417 	ldw	r18,16(r5)
    4c78:	903ff626 	beq	r18,zero,4c54 <__alt_exception_stack_pointer+0xf8004c54>
    4c7c:	2c000017 	ldw	r16,0(r5)
    4c80:	108000cc 	andi	r2,r2,3
    4c84:	2c800015 	stw	r18,0(r5)
    4c88:	84a1c83a 	sub	r16,r16,r18
    4c8c:	1000131e 	bne	r2,zero,4cdc <__sflush_r+0x158>
    4c90:	28800517 	ldw	r2,20(r5)
    4c94:	88800215 	stw	r2,8(r17)
    4c98:	04000316 	blt	zero,r16,4ca8 <__sflush_r+0x124>
    4c9c:	003fed06 	br	4c54 <__alt_exception_stack_pointer+0xf8004c54>
    4ca0:	90a5883a 	add	r18,r18,r2
    4ca4:	043feb0e 	bge	zero,r16,4c54 <__alt_exception_stack_pointer+0xf8004c54>
    4ca8:	88800917 	ldw	r2,36(r17)
    4cac:	89400717 	ldw	r5,28(r17)
    4cb0:	800f883a 	mov	r7,r16
    4cb4:	900d883a 	mov	r6,r18
    4cb8:	9809883a 	mov	r4,r19
    4cbc:	103ee83a 	callr	r2
    4cc0:	80a1c83a 	sub	r16,r16,r2
    4cc4:	00bff616 	blt	zero,r2,4ca0 <__alt_exception_stack_pointer+0xf8004ca0>
    4cc8:	88c0030b 	ldhu	r3,12(r17)
    4ccc:	00bfffc4 	movi	r2,-1
    4cd0:	18c01014 	ori	r3,r3,64
    4cd4:	88c0030d 	sth	r3,12(r17)
    4cd8:	003fdf06 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    4cdc:	0005883a 	mov	r2,zero
    4ce0:	003fec06 	br	4c94 <__alt_exception_stack_pointer+0xf8004c94>
    4ce4:	88801415 	stw	r2,80(r17)
    4ce8:	003fd206 	br	4c34 <__alt_exception_stack_pointer+0xf8004c34>
    4cec:	28c00f17 	ldw	r3,60(r5)
    4cf0:	00ffb316 	blt	zero,r3,4bc0 <__alt_exception_stack_pointer+0xf8004bc0>
    4cf4:	003fd706 	br	4c54 <__alt_exception_stack_pointer+0xf8004c54>
    4cf8:	89400717 	ldw	r5,28(r17)
    4cfc:	000d883a 	mov	r6,zero
    4d00:	01c00044 	movi	r7,1
    4d04:	9809883a 	mov	r4,r19
    4d08:	403ee83a 	callr	r8
    4d0c:	100d883a 	mov	r6,r2
    4d10:	00bfffc4 	movi	r2,-1
    4d14:	30801426 	beq	r6,r2,4d68 <__sflush_r+0x1e4>
    4d18:	8880030b 	ldhu	r2,12(r17)
    4d1c:	8a000a17 	ldw	r8,40(r17)
    4d20:	003fae06 	br	4bdc <__alt_exception_stack_pointer+0xf8004bdc>
    4d24:	98c00017 	ldw	r3,0(r19)
    4d28:	183fba26 	beq	r3,zero,4c14 <__alt_exception_stack_pointer+0xf8004c14>
    4d2c:	01000744 	movi	r4,29
    4d30:	19000626 	beq	r3,r4,4d4c <__sflush_r+0x1c8>
    4d34:	01000584 	movi	r4,22
    4d38:	19000426 	beq	r3,r4,4d4c <__sflush_r+0x1c8>
    4d3c:	88c0030b 	ldhu	r3,12(r17)
    4d40:	18c01014 	ori	r3,r3,64
    4d44:	88c0030d 	sth	r3,12(r17)
    4d48:	003fc306 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    4d4c:	8880030b 	ldhu	r2,12(r17)
    4d50:	88c00417 	ldw	r3,16(r17)
    4d54:	88000115 	stw	zero,4(r17)
    4d58:	10bdffcc 	andi	r2,r2,63487
    4d5c:	8880030d 	sth	r2,12(r17)
    4d60:	88c00015 	stw	r3,0(r17)
    4d64:	003fb306 	br	4c34 <__alt_exception_stack_pointer+0xf8004c34>
    4d68:	98800017 	ldw	r2,0(r19)
    4d6c:	103fea26 	beq	r2,zero,4d18 <__alt_exception_stack_pointer+0xf8004d18>
    4d70:	00c00744 	movi	r3,29
    4d74:	10c00226 	beq	r2,r3,4d80 <__sflush_r+0x1fc>
    4d78:	00c00584 	movi	r3,22
    4d7c:	10c0031e 	bne	r2,r3,4d8c <__sflush_r+0x208>
    4d80:	9c000015 	stw	r16,0(r19)
    4d84:	0005883a 	mov	r2,zero
    4d88:	003fb306 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>
    4d8c:	88c0030b 	ldhu	r3,12(r17)
    4d90:	3005883a 	mov	r2,r6
    4d94:	18c01014 	ori	r3,r3,64
    4d98:	88c0030d 	sth	r3,12(r17)
    4d9c:	003fae06 	br	4c58 <__alt_exception_stack_pointer+0xf8004c58>

00004da0 <_fflush_r>:
    4da0:	defffd04 	addi	sp,sp,-12
    4da4:	dc000115 	stw	r16,4(sp)
    4da8:	dfc00215 	stw	ra,8(sp)
    4dac:	2021883a 	mov	r16,r4
    4db0:	20000226 	beq	r4,zero,4dbc <_fflush_r+0x1c>
    4db4:	20800e17 	ldw	r2,56(r4)
    4db8:	10000c26 	beq	r2,zero,4dec <_fflush_r+0x4c>
    4dbc:	2880030f 	ldh	r2,12(r5)
    4dc0:	1000051e 	bne	r2,zero,4dd8 <_fflush_r+0x38>
    4dc4:	0005883a 	mov	r2,zero
    4dc8:	dfc00217 	ldw	ra,8(sp)
    4dcc:	dc000117 	ldw	r16,4(sp)
    4dd0:	dec00304 	addi	sp,sp,12
    4dd4:	f800283a 	ret
    4dd8:	8009883a 	mov	r4,r16
    4ddc:	dfc00217 	ldw	ra,8(sp)
    4de0:	dc000117 	ldw	r16,4(sp)
    4de4:	dec00304 	addi	sp,sp,12
    4de8:	0004b841 	jmpi	4b84 <__sflush_r>
    4dec:	d9400015 	stw	r5,0(sp)
    4df0:	000518c0 	call	518c <__sinit>
    4df4:	d9400017 	ldw	r5,0(sp)
    4df8:	003ff006 	br	4dbc <__alt_exception_stack_pointer+0xf8004dbc>

00004dfc <fflush>:
    4dfc:	20000526 	beq	r4,zero,4e14 <fflush+0x18>
    4e00:	00800074 	movhi	r2,1
    4e04:	10863804 	addi	r2,r2,6368
    4e08:	200b883a 	mov	r5,r4
    4e0c:	11000017 	ldw	r4,0(r2)
    4e10:	0004da01 	jmpi	4da0 <_fflush_r>
    4e14:	00800074 	movhi	r2,1
    4e18:	10863704 	addi	r2,r2,6364
    4e1c:	11000017 	ldw	r4,0(r2)
    4e20:	01400034 	movhi	r5,0
    4e24:	29536804 	addi	r5,r5,19872
    4e28:	00056d41 	jmpi	56d4 <_fwalk_reent>

00004e2c <__fp_unlock>:
    4e2c:	0005883a 	mov	r2,zero
    4e30:	f800283a 	ret

00004e34 <_cleanup_r>:
    4e34:	01400074 	movhi	r5,1
    4e38:	29627a04 	addi	r5,r5,-30232
    4e3c:	00056d41 	jmpi	56d4 <_fwalk_reent>

00004e40 <__sinit.part.1>:
    4e40:	defff704 	addi	sp,sp,-36
    4e44:	00c00034 	movhi	r3,0
    4e48:	dfc00815 	stw	ra,32(sp)
    4e4c:	ddc00715 	stw	r23,28(sp)
    4e50:	dd800615 	stw	r22,24(sp)
    4e54:	dd400515 	stw	r21,20(sp)
    4e58:	dd000415 	stw	r20,16(sp)
    4e5c:	dcc00315 	stw	r19,12(sp)
    4e60:	dc800215 	stw	r18,8(sp)
    4e64:	dc400115 	stw	r17,4(sp)
    4e68:	dc000015 	stw	r16,0(sp)
    4e6c:	18d38d04 	addi	r3,r3,20020
    4e70:	24000117 	ldw	r16,4(r4)
    4e74:	20c00f15 	stw	r3,60(r4)
    4e78:	2080bb04 	addi	r2,r4,748
    4e7c:	00c000c4 	movi	r3,3
    4e80:	20c0b915 	stw	r3,740(r4)
    4e84:	2080ba15 	stw	r2,744(r4)
    4e88:	2000b815 	stw	zero,736(r4)
    4e8c:	05c00204 	movi	r23,8
    4e90:	00800104 	movi	r2,4
    4e94:	2025883a 	mov	r18,r4
    4e98:	b80d883a 	mov	r6,r23
    4e9c:	81001704 	addi	r4,r16,92
    4ea0:	000b883a 	mov	r5,zero
    4ea4:	80000015 	stw	zero,0(r16)
    4ea8:	80000115 	stw	zero,4(r16)
    4eac:	80000215 	stw	zero,8(r16)
    4eb0:	8080030d 	sth	r2,12(r16)
    4eb4:	80001915 	stw	zero,100(r16)
    4eb8:	8000038d 	sth	zero,14(r16)
    4ebc:	80000415 	stw	zero,16(r16)
    4ec0:	80000515 	stw	zero,20(r16)
    4ec4:	80000615 	stw	zero,24(r16)
    4ec8:	0005c5c0 	call	5c5c <memset>
    4ecc:	05800034 	movhi	r22,0
    4ed0:	94400217 	ldw	r17,8(r18)
    4ed4:	05400034 	movhi	r21,0
    4ed8:	05000034 	movhi	r20,0
    4edc:	04c00034 	movhi	r19,0
    4ee0:	b59bac04 	addi	r22,r22,28336
    4ee4:	ad5bc304 	addi	r21,r21,28428
    4ee8:	a51be204 	addi	r20,r20,28552
    4eec:	9cdbf904 	addi	r19,r19,28644
    4ef0:	85800815 	stw	r22,32(r16)
    4ef4:	85400915 	stw	r21,36(r16)
    4ef8:	85000a15 	stw	r20,40(r16)
    4efc:	84c00b15 	stw	r19,44(r16)
    4f00:	84000715 	stw	r16,28(r16)
    4f04:	00800284 	movi	r2,10
    4f08:	8880030d 	sth	r2,12(r17)
    4f0c:	00800044 	movi	r2,1
    4f10:	b80d883a 	mov	r6,r23
    4f14:	89001704 	addi	r4,r17,92
    4f18:	000b883a 	mov	r5,zero
    4f1c:	88000015 	stw	zero,0(r17)
    4f20:	88000115 	stw	zero,4(r17)
    4f24:	88000215 	stw	zero,8(r17)
    4f28:	88001915 	stw	zero,100(r17)
    4f2c:	8880038d 	sth	r2,14(r17)
    4f30:	88000415 	stw	zero,16(r17)
    4f34:	88000515 	stw	zero,20(r17)
    4f38:	88000615 	stw	zero,24(r17)
    4f3c:	0005c5c0 	call	5c5c <memset>
    4f40:	94000317 	ldw	r16,12(r18)
    4f44:	00800484 	movi	r2,18
    4f48:	8c400715 	stw	r17,28(r17)
    4f4c:	8d800815 	stw	r22,32(r17)
    4f50:	8d400915 	stw	r21,36(r17)
    4f54:	8d000a15 	stw	r20,40(r17)
    4f58:	8cc00b15 	stw	r19,44(r17)
    4f5c:	8080030d 	sth	r2,12(r16)
    4f60:	00800084 	movi	r2,2
    4f64:	80000015 	stw	zero,0(r16)
    4f68:	80000115 	stw	zero,4(r16)
    4f6c:	80000215 	stw	zero,8(r16)
    4f70:	80001915 	stw	zero,100(r16)
    4f74:	8080038d 	sth	r2,14(r16)
    4f78:	80000415 	stw	zero,16(r16)
    4f7c:	80000515 	stw	zero,20(r16)
    4f80:	80000615 	stw	zero,24(r16)
    4f84:	b80d883a 	mov	r6,r23
    4f88:	000b883a 	mov	r5,zero
    4f8c:	81001704 	addi	r4,r16,92
    4f90:	0005c5c0 	call	5c5c <memset>
    4f94:	00800044 	movi	r2,1
    4f98:	84000715 	stw	r16,28(r16)
    4f9c:	85800815 	stw	r22,32(r16)
    4fa0:	85400915 	stw	r21,36(r16)
    4fa4:	85000a15 	stw	r20,40(r16)
    4fa8:	84c00b15 	stw	r19,44(r16)
    4fac:	90800e15 	stw	r2,56(r18)
    4fb0:	dfc00817 	ldw	ra,32(sp)
    4fb4:	ddc00717 	ldw	r23,28(sp)
    4fb8:	dd800617 	ldw	r22,24(sp)
    4fbc:	dd400517 	ldw	r21,20(sp)
    4fc0:	dd000417 	ldw	r20,16(sp)
    4fc4:	dcc00317 	ldw	r19,12(sp)
    4fc8:	dc800217 	ldw	r18,8(sp)
    4fcc:	dc400117 	ldw	r17,4(sp)
    4fd0:	dc000017 	ldw	r16,0(sp)
    4fd4:	dec00904 	addi	sp,sp,36
    4fd8:	f800283a 	ret

00004fdc <__fp_lock>:
    4fdc:	0005883a 	mov	r2,zero
    4fe0:	f800283a 	ret

00004fe4 <__sfmoreglue>:
    4fe4:	defffc04 	addi	sp,sp,-16
    4fe8:	dc800215 	stw	r18,8(sp)
    4fec:	2825883a 	mov	r18,r5
    4ff0:	dc000015 	stw	r16,0(sp)
    4ff4:	01401a04 	movi	r5,104
    4ff8:	2021883a 	mov	r16,r4
    4ffc:	913fffc4 	addi	r4,r18,-1
    5000:	dfc00315 	stw	ra,12(sp)
    5004:	dc400115 	stw	r17,4(sp)
    5008:	000aaa00 	call	aaa0 <__mulsi3>
    500c:	8009883a 	mov	r4,r16
    5010:	11401d04 	addi	r5,r2,116
    5014:	1023883a 	mov	r17,r2
    5018:	00005000 	call	500 <_malloc_r>
    501c:	1021883a 	mov	r16,r2
    5020:	10000726 	beq	r2,zero,5040 <__sfmoreglue+0x5c>
    5024:	11000304 	addi	r4,r2,12
    5028:	10000015 	stw	zero,0(r2)
    502c:	14800115 	stw	r18,4(r2)
    5030:	11000215 	stw	r4,8(r2)
    5034:	89801a04 	addi	r6,r17,104
    5038:	000b883a 	mov	r5,zero
    503c:	0005c5c0 	call	5c5c <memset>
    5040:	8005883a 	mov	r2,r16
    5044:	dfc00317 	ldw	ra,12(sp)
    5048:	dc800217 	ldw	r18,8(sp)
    504c:	dc400117 	ldw	r17,4(sp)
    5050:	dc000017 	ldw	r16,0(sp)
    5054:	dec00404 	addi	sp,sp,16
    5058:	f800283a 	ret

0000505c <__sfp>:
    505c:	defffb04 	addi	sp,sp,-20
    5060:	dc000015 	stw	r16,0(sp)
    5064:	04000074 	movhi	r16,1
    5068:	84063704 	addi	r16,r16,6364
    506c:	dcc00315 	stw	r19,12(sp)
    5070:	2027883a 	mov	r19,r4
    5074:	81000017 	ldw	r4,0(r16)
    5078:	dfc00415 	stw	ra,16(sp)
    507c:	dc800215 	stw	r18,8(sp)
    5080:	20800e17 	ldw	r2,56(r4)
    5084:	dc400115 	stw	r17,4(sp)
    5088:	1000021e 	bne	r2,zero,5094 <__sfp+0x38>
    508c:	0004e400 	call	4e40 <__sinit.part.1>
    5090:	81000017 	ldw	r4,0(r16)
    5094:	2480b804 	addi	r18,r4,736
    5098:	047fffc4 	movi	r17,-1
    509c:	91000117 	ldw	r4,4(r18)
    50a0:	94000217 	ldw	r16,8(r18)
    50a4:	213fffc4 	addi	r4,r4,-1
    50a8:	20000a16 	blt	r4,zero,50d4 <__sfp+0x78>
    50ac:	8080030f 	ldh	r2,12(r16)
    50b0:	10000c26 	beq	r2,zero,50e4 <__sfp+0x88>
    50b4:	80c01d04 	addi	r3,r16,116
    50b8:	00000206 	br	50c4 <__sfp+0x68>
    50bc:	18bfe60f 	ldh	r2,-104(r3)
    50c0:	10000826 	beq	r2,zero,50e4 <__sfp+0x88>
    50c4:	213fffc4 	addi	r4,r4,-1
    50c8:	1c3ffd04 	addi	r16,r3,-12
    50cc:	18c01a04 	addi	r3,r3,104
    50d0:	247ffa1e 	bne	r4,r17,50bc <__alt_exception_stack_pointer+0xf80050bc>
    50d4:	90800017 	ldw	r2,0(r18)
    50d8:	10001d26 	beq	r2,zero,5150 <__sfp+0xf4>
    50dc:	1025883a 	mov	r18,r2
    50e0:	003fee06 	br	509c <__alt_exception_stack_pointer+0xf800509c>
    50e4:	00bfffc4 	movi	r2,-1
    50e8:	8080038d 	sth	r2,14(r16)
    50ec:	00800044 	movi	r2,1
    50f0:	8080030d 	sth	r2,12(r16)
    50f4:	80001915 	stw	zero,100(r16)
    50f8:	80000015 	stw	zero,0(r16)
    50fc:	80000215 	stw	zero,8(r16)
    5100:	80000115 	stw	zero,4(r16)
    5104:	80000415 	stw	zero,16(r16)
    5108:	80000515 	stw	zero,20(r16)
    510c:	80000615 	stw	zero,24(r16)
    5110:	01800204 	movi	r6,8
    5114:	000b883a 	mov	r5,zero
    5118:	81001704 	addi	r4,r16,92
    511c:	0005c5c0 	call	5c5c <memset>
    5120:	8005883a 	mov	r2,r16
    5124:	80000c15 	stw	zero,48(r16)
    5128:	80000d15 	stw	zero,52(r16)
    512c:	80001115 	stw	zero,68(r16)
    5130:	80001215 	stw	zero,72(r16)
    5134:	dfc00417 	ldw	ra,16(sp)
    5138:	dcc00317 	ldw	r19,12(sp)
    513c:	dc800217 	ldw	r18,8(sp)
    5140:	dc400117 	ldw	r17,4(sp)
    5144:	dc000017 	ldw	r16,0(sp)
    5148:	dec00504 	addi	sp,sp,20
    514c:	f800283a 	ret
    5150:	01400104 	movi	r5,4
    5154:	9809883a 	mov	r4,r19
    5158:	0004fe40 	call	4fe4 <__sfmoreglue>
    515c:	90800015 	stw	r2,0(r18)
    5160:	103fde1e 	bne	r2,zero,50dc <__alt_exception_stack_pointer+0xf80050dc>
    5164:	00800304 	movi	r2,12
    5168:	98800015 	stw	r2,0(r19)
    516c:	0005883a 	mov	r2,zero
    5170:	003ff006 	br	5134 <__alt_exception_stack_pointer+0xf8005134>

00005174 <_cleanup>:
    5174:	00800074 	movhi	r2,1
    5178:	10863704 	addi	r2,r2,6364
    517c:	11000017 	ldw	r4,0(r2)
    5180:	01400074 	movhi	r5,1
    5184:	29627a04 	addi	r5,r5,-30232
    5188:	00056d41 	jmpi	56d4 <_fwalk_reent>

0000518c <__sinit>:
    518c:	20800e17 	ldw	r2,56(r4)
    5190:	10000126 	beq	r2,zero,5198 <__sinit+0xc>
    5194:	f800283a 	ret
    5198:	0004e401 	jmpi	4e40 <__sinit.part.1>

0000519c <__sfp_lock_acquire>:
    519c:	f800283a 	ret

000051a0 <__sfp_lock_release>:
    51a0:	f800283a 	ret

000051a4 <__sinit_lock_acquire>:
    51a4:	f800283a 	ret

000051a8 <__sinit_lock_release>:
    51a8:	f800283a 	ret

000051ac <__fp_lock_all>:
    51ac:	00800074 	movhi	r2,1
    51b0:	10863804 	addi	r2,r2,6368
    51b4:	11000017 	ldw	r4,0(r2)
    51b8:	01400034 	movhi	r5,0
    51bc:	2953f704 	addi	r5,r5,20444
    51c0:	00056101 	jmpi	5610 <_fwalk>

000051c4 <__fp_unlock_all>:
    51c4:	00800074 	movhi	r2,1
    51c8:	10863804 	addi	r2,r2,6368
    51cc:	11000017 	ldw	r4,0(r2)
    51d0:	01400034 	movhi	r5,0
    51d4:	29538b04 	addi	r5,r5,20012
    51d8:	00056101 	jmpi	5610 <_fwalk>

000051dc <_malloc_trim_r>:
    51dc:	defffb04 	addi	sp,sp,-20
    51e0:	dcc00315 	stw	r19,12(sp)
    51e4:	04c00074 	movhi	r19,1
    51e8:	dc800215 	stw	r18,8(sp)
    51ec:	dc400115 	stw	r17,4(sp)
    51f0:	dc000015 	stw	r16,0(sp)
    51f4:	dfc00415 	stw	ra,16(sp)
    51f8:	2821883a 	mov	r16,r5
    51fc:	9cff8804 	addi	r19,r19,-480
    5200:	2025883a 	mov	r18,r4
    5204:	000d9080 	call	d908 <__malloc_lock>
    5208:	98800217 	ldw	r2,8(r19)
    520c:	14400117 	ldw	r17,4(r2)
    5210:	00bfff04 	movi	r2,-4
    5214:	88a2703a 	and	r17,r17,r2
    5218:	8c21c83a 	sub	r16,r17,r16
    521c:	8403fbc4 	addi	r16,r16,4079
    5220:	8020d33a 	srli	r16,r16,12
    5224:	0083ffc4 	movi	r2,4095
    5228:	843fffc4 	addi	r16,r16,-1
    522c:	8020933a 	slli	r16,r16,12
    5230:	1400060e 	bge	r2,r16,524c <_malloc_trim_r+0x70>
    5234:	000b883a 	mov	r5,zero
    5238:	9009883a 	mov	r4,r18
    523c:	0000d780 	call	d78 <_sbrk_r>
    5240:	98c00217 	ldw	r3,8(r19)
    5244:	1c47883a 	add	r3,r3,r17
    5248:	10c00a26 	beq	r2,r3,5274 <_malloc_trim_r+0x98>
    524c:	9009883a 	mov	r4,r18
    5250:	000d92c0 	call	d92c <__malloc_unlock>
    5254:	0005883a 	mov	r2,zero
    5258:	dfc00417 	ldw	ra,16(sp)
    525c:	dcc00317 	ldw	r19,12(sp)
    5260:	dc800217 	ldw	r18,8(sp)
    5264:	dc400117 	ldw	r17,4(sp)
    5268:	dc000017 	ldw	r16,0(sp)
    526c:	dec00504 	addi	sp,sp,20
    5270:	f800283a 	ret
    5274:	040bc83a 	sub	r5,zero,r16
    5278:	9009883a 	mov	r4,r18
    527c:	0000d780 	call	d78 <_sbrk_r>
    5280:	00ffffc4 	movi	r3,-1
    5284:	10c00d26 	beq	r2,r3,52bc <_malloc_trim_r+0xe0>
    5288:	00c00074 	movhi	r3,1
    528c:	18cd0e04 	addi	r3,r3,13368
    5290:	18800017 	ldw	r2,0(r3)
    5294:	99000217 	ldw	r4,8(r19)
    5298:	8c23c83a 	sub	r17,r17,r16
    529c:	8c400054 	ori	r17,r17,1
    52a0:	1421c83a 	sub	r16,r2,r16
    52a4:	24400115 	stw	r17,4(r4)
    52a8:	9009883a 	mov	r4,r18
    52ac:	1c000015 	stw	r16,0(r3)
    52b0:	000d92c0 	call	d92c <__malloc_unlock>
    52b4:	00800044 	movi	r2,1
    52b8:	003fe706 	br	5258 <__alt_exception_stack_pointer+0xf8005258>
    52bc:	000b883a 	mov	r5,zero
    52c0:	9009883a 	mov	r4,r18
    52c4:	0000d780 	call	d78 <_sbrk_r>
    52c8:	99000217 	ldw	r4,8(r19)
    52cc:	014003c4 	movi	r5,15
    52d0:	1107c83a 	sub	r3,r2,r4
    52d4:	28ffdd0e 	bge	r5,r3,524c <__alt_exception_stack_pointer+0xf800524c>
    52d8:	01400074 	movhi	r5,1
    52dc:	29463504 	addi	r5,r5,6356
    52e0:	29400017 	ldw	r5,0(r5)
    52e4:	18c00054 	ori	r3,r3,1
    52e8:	20c00115 	stw	r3,4(r4)
    52ec:	00c00074 	movhi	r3,1
    52f0:	1145c83a 	sub	r2,r2,r5
    52f4:	18cd0e04 	addi	r3,r3,13368
    52f8:	18800015 	stw	r2,0(r3)
    52fc:	003fd306 	br	524c <__alt_exception_stack_pointer+0xf800524c>

00005300 <_free_r>:
    5300:	28004126 	beq	r5,zero,5408 <_free_r+0x108>
    5304:	defffd04 	addi	sp,sp,-12
    5308:	dc400115 	stw	r17,4(sp)
    530c:	dc000015 	stw	r16,0(sp)
    5310:	2023883a 	mov	r17,r4
    5314:	2821883a 	mov	r16,r5
    5318:	dfc00215 	stw	ra,8(sp)
    531c:	000d9080 	call	d908 <__malloc_lock>
    5320:	81ffff17 	ldw	r7,-4(r16)
    5324:	00bfff84 	movi	r2,-2
    5328:	01000074 	movhi	r4,1
    532c:	81bffe04 	addi	r6,r16,-8
    5330:	3884703a 	and	r2,r7,r2
    5334:	213f8804 	addi	r4,r4,-480
    5338:	308b883a 	add	r5,r6,r2
    533c:	2a400117 	ldw	r9,4(r5)
    5340:	22000217 	ldw	r8,8(r4)
    5344:	00ffff04 	movi	r3,-4
    5348:	48c6703a 	and	r3,r9,r3
    534c:	2a005726 	beq	r5,r8,54ac <_free_r+0x1ac>
    5350:	28c00115 	stw	r3,4(r5)
    5354:	39c0004c 	andi	r7,r7,1
    5358:	3800091e 	bne	r7,zero,5380 <_free_r+0x80>
    535c:	823ffe17 	ldw	r8,-8(r16)
    5360:	22400204 	addi	r9,r4,8
    5364:	320dc83a 	sub	r6,r6,r8
    5368:	31c00217 	ldw	r7,8(r6)
    536c:	1205883a 	add	r2,r2,r8
    5370:	3a406526 	beq	r7,r9,5508 <_free_r+0x208>
    5374:	32000317 	ldw	r8,12(r6)
    5378:	3a000315 	stw	r8,12(r7)
    537c:	41c00215 	stw	r7,8(r8)
    5380:	28cf883a 	add	r7,r5,r3
    5384:	39c00117 	ldw	r7,4(r7)
    5388:	39c0004c 	andi	r7,r7,1
    538c:	38003a26 	beq	r7,zero,5478 <_free_r+0x178>
    5390:	10c00054 	ori	r3,r2,1
    5394:	30c00115 	stw	r3,4(r6)
    5398:	3087883a 	add	r3,r6,r2
    539c:	18800015 	stw	r2,0(r3)
    53a0:	00c07fc4 	movi	r3,511
    53a4:	18801936 	bltu	r3,r2,540c <_free_r+0x10c>
    53a8:	1004d0fa 	srli	r2,r2,3
    53ac:	01c00044 	movi	r7,1
    53b0:	21400117 	ldw	r5,4(r4)
    53b4:	10c00044 	addi	r3,r2,1
    53b8:	18c7883a 	add	r3,r3,r3
    53bc:	1005d0ba 	srai	r2,r2,2
    53c0:	18c7883a 	add	r3,r3,r3
    53c4:	18c7883a 	add	r3,r3,r3
    53c8:	1907883a 	add	r3,r3,r4
    53cc:	3884983a 	sll	r2,r7,r2
    53d0:	19c00017 	ldw	r7,0(r3)
    53d4:	1a3ffe04 	addi	r8,r3,-8
    53d8:	1144b03a 	or	r2,r2,r5
    53dc:	32000315 	stw	r8,12(r6)
    53e0:	31c00215 	stw	r7,8(r6)
    53e4:	20800115 	stw	r2,4(r4)
    53e8:	19800015 	stw	r6,0(r3)
    53ec:	39800315 	stw	r6,12(r7)
    53f0:	8809883a 	mov	r4,r17
    53f4:	dfc00217 	ldw	ra,8(sp)
    53f8:	dc400117 	ldw	r17,4(sp)
    53fc:	dc000017 	ldw	r16,0(sp)
    5400:	dec00304 	addi	sp,sp,12
    5404:	000d92c1 	jmpi	d92c <__malloc_unlock>
    5408:	f800283a 	ret
    540c:	100ad27a 	srli	r5,r2,9
    5410:	00c00104 	movi	r3,4
    5414:	19404a36 	bltu	r3,r5,5540 <_free_r+0x240>
    5418:	100ad1ba 	srli	r5,r2,6
    541c:	28c00e44 	addi	r3,r5,57
    5420:	18c7883a 	add	r3,r3,r3
    5424:	29400e04 	addi	r5,r5,56
    5428:	18c7883a 	add	r3,r3,r3
    542c:	18c7883a 	add	r3,r3,r3
    5430:	1909883a 	add	r4,r3,r4
    5434:	20c00017 	ldw	r3,0(r4)
    5438:	01c00074 	movhi	r7,1
    543c:	213ffe04 	addi	r4,r4,-8
    5440:	39ff8804 	addi	r7,r7,-480
    5444:	20c04426 	beq	r4,r3,5558 <_free_r+0x258>
    5448:	01ffff04 	movi	r7,-4
    544c:	19400117 	ldw	r5,4(r3)
    5450:	29ca703a 	and	r5,r5,r7
    5454:	1140022e 	bgeu	r2,r5,5460 <_free_r+0x160>
    5458:	18c00217 	ldw	r3,8(r3)
    545c:	20fffb1e 	bne	r4,r3,544c <__alt_exception_stack_pointer+0xf800544c>
    5460:	19000317 	ldw	r4,12(r3)
    5464:	31000315 	stw	r4,12(r6)
    5468:	30c00215 	stw	r3,8(r6)
    546c:	21800215 	stw	r6,8(r4)
    5470:	19800315 	stw	r6,12(r3)
    5474:	003fde06 	br	53f0 <__alt_exception_stack_pointer+0xf80053f0>
    5478:	29c00217 	ldw	r7,8(r5)
    547c:	10c5883a 	add	r2,r2,r3
    5480:	00c00074 	movhi	r3,1
    5484:	18ff8a04 	addi	r3,r3,-472
    5488:	38c03b26 	beq	r7,r3,5578 <_free_r+0x278>
    548c:	2a000317 	ldw	r8,12(r5)
    5490:	11400054 	ori	r5,r2,1
    5494:	3087883a 	add	r3,r6,r2
    5498:	3a000315 	stw	r8,12(r7)
    549c:	41c00215 	stw	r7,8(r8)
    54a0:	31400115 	stw	r5,4(r6)
    54a4:	18800015 	stw	r2,0(r3)
    54a8:	003fbd06 	br	53a0 <__alt_exception_stack_pointer+0xf80053a0>
    54ac:	39c0004c 	andi	r7,r7,1
    54b0:	10c5883a 	add	r2,r2,r3
    54b4:	3800071e 	bne	r7,zero,54d4 <_free_r+0x1d4>
    54b8:	81fffe17 	ldw	r7,-8(r16)
    54bc:	31cdc83a 	sub	r6,r6,r7
    54c0:	30c00317 	ldw	r3,12(r6)
    54c4:	31400217 	ldw	r5,8(r6)
    54c8:	11c5883a 	add	r2,r2,r7
    54cc:	28c00315 	stw	r3,12(r5)
    54d0:	19400215 	stw	r5,8(r3)
    54d4:	10c00054 	ori	r3,r2,1
    54d8:	30c00115 	stw	r3,4(r6)
    54dc:	00c00074 	movhi	r3,1
    54e0:	18c63604 	addi	r3,r3,6360
    54e4:	18c00017 	ldw	r3,0(r3)
    54e8:	21800215 	stw	r6,8(r4)
    54ec:	10ffc036 	bltu	r2,r3,53f0 <__alt_exception_stack_pointer+0xf80053f0>
    54f0:	00800074 	movhi	r2,1
    54f4:	108d0204 	addi	r2,r2,13320
    54f8:	11400017 	ldw	r5,0(r2)
    54fc:	8809883a 	mov	r4,r17
    5500:	00051dc0 	call	51dc <_malloc_trim_r>
    5504:	003fba06 	br	53f0 <__alt_exception_stack_pointer+0xf80053f0>
    5508:	28c9883a 	add	r4,r5,r3
    550c:	21000117 	ldw	r4,4(r4)
    5510:	2100004c 	andi	r4,r4,1
    5514:	2000391e 	bne	r4,zero,55fc <_free_r+0x2fc>
    5518:	29c00217 	ldw	r7,8(r5)
    551c:	29000317 	ldw	r4,12(r5)
    5520:	1885883a 	add	r2,r3,r2
    5524:	10c00054 	ori	r3,r2,1
    5528:	39000315 	stw	r4,12(r7)
    552c:	21c00215 	stw	r7,8(r4)
    5530:	30c00115 	stw	r3,4(r6)
    5534:	308d883a 	add	r6,r6,r2
    5538:	30800015 	stw	r2,0(r6)
    553c:	003fac06 	br	53f0 <__alt_exception_stack_pointer+0xf80053f0>
    5540:	00c00504 	movi	r3,20
    5544:	19401536 	bltu	r3,r5,559c <_free_r+0x29c>
    5548:	28c01704 	addi	r3,r5,92
    554c:	18c7883a 	add	r3,r3,r3
    5550:	294016c4 	addi	r5,r5,91
    5554:	003fb406 	br	5428 <__alt_exception_stack_pointer+0xf8005428>
    5558:	280bd0ba 	srai	r5,r5,2
    555c:	00c00044 	movi	r3,1
    5560:	38800117 	ldw	r2,4(r7)
    5564:	194a983a 	sll	r5,r3,r5
    5568:	2007883a 	mov	r3,r4
    556c:	2884b03a 	or	r2,r5,r2
    5570:	38800115 	stw	r2,4(r7)
    5574:	003fbb06 	br	5464 <__alt_exception_stack_pointer+0xf8005464>
    5578:	21800515 	stw	r6,20(r4)
    557c:	21800415 	stw	r6,16(r4)
    5580:	10c00054 	ori	r3,r2,1
    5584:	31c00315 	stw	r7,12(r6)
    5588:	31c00215 	stw	r7,8(r6)
    558c:	30c00115 	stw	r3,4(r6)
    5590:	308d883a 	add	r6,r6,r2
    5594:	30800015 	stw	r2,0(r6)
    5598:	003f9506 	br	53f0 <__alt_exception_stack_pointer+0xf80053f0>
    559c:	00c01504 	movi	r3,84
    55a0:	19400536 	bltu	r3,r5,55b8 <_free_r+0x2b8>
    55a4:	100ad33a 	srli	r5,r2,12
    55a8:	28c01bc4 	addi	r3,r5,111
    55ac:	18c7883a 	add	r3,r3,r3
    55b0:	29401b84 	addi	r5,r5,110
    55b4:	003f9c06 	br	5428 <__alt_exception_stack_pointer+0xf8005428>
    55b8:	00c05504 	movi	r3,340
    55bc:	19400536 	bltu	r3,r5,55d4 <_free_r+0x2d4>
    55c0:	100ad3fa 	srli	r5,r2,15
    55c4:	28c01e04 	addi	r3,r5,120
    55c8:	18c7883a 	add	r3,r3,r3
    55cc:	29401dc4 	addi	r5,r5,119
    55d0:	003f9506 	br	5428 <__alt_exception_stack_pointer+0xf8005428>
    55d4:	00c15504 	movi	r3,1364
    55d8:	19400536 	bltu	r3,r5,55f0 <_free_r+0x2f0>
    55dc:	100ad4ba 	srli	r5,r2,18
    55e0:	28c01f44 	addi	r3,r5,125
    55e4:	18c7883a 	add	r3,r3,r3
    55e8:	29401f04 	addi	r5,r5,124
    55ec:	003f8e06 	br	5428 <__alt_exception_stack_pointer+0xf8005428>
    55f0:	00c03f84 	movi	r3,254
    55f4:	01401f84 	movi	r5,126
    55f8:	003f8b06 	br	5428 <__alt_exception_stack_pointer+0xf8005428>
    55fc:	10c00054 	ori	r3,r2,1
    5600:	30c00115 	stw	r3,4(r6)
    5604:	308d883a 	add	r6,r6,r2
    5608:	30800015 	stw	r2,0(r6)
    560c:	003f7806 	br	53f0 <__alt_exception_stack_pointer+0xf80053f0>

00005610 <_fwalk>:
    5610:	defff704 	addi	sp,sp,-36
    5614:	dd000415 	stw	r20,16(sp)
    5618:	dfc00815 	stw	ra,32(sp)
    561c:	ddc00715 	stw	r23,28(sp)
    5620:	dd800615 	stw	r22,24(sp)
    5624:	dd400515 	stw	r21,20(sp)
    5628:	dcc00315 	stw	r19,12(sp)
    562c:	dc800215 	stw	r18,8(sp)
    5630:	dc400115 	stw	r17,4(sp)
    5634:	dc000015 	stw	r16,0(sp)
    5638:	2500b804 	addi	r20,r4,736
    563c:	a0002326 	beq	r20,zero,56cc <_fwalk+0xbc>
    5640:	282b883a 	mov	r21,r5
    5644:	002f883a 	mov	r23,zero
    5648:	05800044 	movi	r22,1
    564c:	04ffffc4 	movi	r19,-1
    5650:	a4400117 	ldw	r17,4(r20)
    5654:	a4800217 	ldw	r18,8(r20)
    5658:	8c7fffc4 	addi	r17,r17,-1
    565c:	88000d16 	blt	r17,zero,5694 <_fwalk+0x84>
    5660:	94000304 	addi	r16,r18,12
    5664:	94800384 	addi	r18,r18,14
    5668:	8080000b 	ldhu	r2,0(r16)
    566c:	8c7fffc4 	addi	r17,r17,-1
    5670:	813ffd04 	addi	r4,r16,-12
    5674:	b080042e 	bgeu	r22,r2,5688 <_fwalk+0x78>
    5678:	9080000f 	ldh	r2,0(r18)
    567c:	14c00226 	beq	r2,r19,5688 <_fwalk+0x78>
    5680:	a83ee83a 	callr	r21
    5684:	b8aeb03a 	or	r23,r23,r2
    5688:	84001a04 	addi	r16,r16,104
    568c:	94801a04 	addi	r18,r18,104
    5690:	8cfff51e 	bne	r17,r19,5668 <__alt_exception_stack_pointer+0xf8005668>
    5694:	a5000017 	ldw	r20,0(r20)
    5698:	a03fed1e 	bne	r20,zero,5650 <__alt_exception_stack_pointer+0xf8005650>
    569c:	b805883a 	mov	r2,r23
    56a0:	dfc00817 	ldw	ra,32(sp)
    56a4:	ddc00717 	ldw	r23,28(sp)
    56a8:	dd800617 	ldw	r22,24(sp)
    56ac:	dd400517 	ldw	r21,20(sp)
    56b0:	dd000417 	ldw	r20,16(sp)
    56b4:	dcc00317 	ldw	r19,12(sp)
    56b8:	dc800217 	ldw	r18,8(sp)
    56bc:	dc400117 	ldw	r17,4(sp)
    56c0:	dc000017 	ldw	r16,0(sp)
    56c4:	dec00904 	addi	sp,sp,36
    56c8:	f800283a 	ret
    56cc:	002f883a 	mov	r23,zero
    56d0:	003ff206 	br	569c <__alt_exception_stack_pointer+0xf800569c>

000056d4 <_fwalk_reent>:
    56d4:	defff704 	addi	sp,sp,-36
    56d8:	dd000415 	stw	r20,16(sp)
    56dc:	dfc00815 	stw	ra,32(sp)
    56e0:	ddc00715 	stw	r23,28(sp)
    56e4:	dd800615 	stw	r22,24(sp)
    56e8:	dd400515 	stw	r21,20(sp)
    56ec:	dcc00315 	stw	r19,12(sp)
    56f0:	dc800215 	stw	r18,8(sp)
    56f4:	dc400115 	stw	r17,4(sp)
    56f8:	dc000015 	stw	r16,0(sp)
    56fc:	2500b804 	addi	r20,r4,736
    5700:	a0002326 	beq	r20,zero,5790 <_fwalk_reent+0xbc>
    5704:	282b883a 	mov	r21,r5
    5708:	2027883a 	mov	r19,r4
    570c:	002f883a 	mov	r23,zero
    5710:	05800044 	movi	r22,1
    5714:	04bfffc4 	movi	r18,-1
    5718:	a4400117 	ldw	r17,4(r20)
    571c:	a4000217 	ldw	r16,8(r20)
    5720:	8c7fffc4 	addi	r17,r17,-1
    5724:	88000c16 	blt	r17,zero,5758 <_fwalk_reent+0x84>
    5728:	84000304 	addi	r16,r16,12
    572c:	8080000b 	ldhu	r2,0(r16)
    5730:	8c7fffc4 	addi	r17,r17,-1
    5734:	817ffd04 	addi	r5,r16,-12
    5738:	b080052e 	bgeu	r22,r2,5750 <_fwalk_reent+0x7c>
    573c:	8080008f 	ldh	r2,2(r16)
    5740:	9809883a 	mov	r4,r19
    5744:	14800226 	beq	r2,r18,5750 <_fwalk_reent+0x7c>
    5748:	a83ee83a 	callr	r21
    574c:	b8aeb03a 	or	r23,r23,r2
    5750:	84001a04 	addi	r16,r16,104
    5754:	8cbff51e 	bne	r17,r18,572c <__alt_exception_stack_pointer+0xf800572c>
    5758:	a5000017 	ldw	r20,0(r20)
    575c:	a03fee1e 	bne	r20,zero,5718 <__alt_exception_stack_pointer+0xf8005718>
    5760:	b805883a 	mov	r2,r23
    5764:	dfc00817 	ldw	ra,32(sp)
    5768:	ddc00717 	ldw	r23,28(sp)
    576c:	dd800617 	ldw	r22,24(sp)
    5770:	dd400517 	ldw	r21,20(sp)
    5774:	dd000417 	ldw	r20,16(sp)
    5778:	dcc00317 	ldw	r19,12(sp)
    577c:	dc800217 	ldw	r18,8(sp)
    5780:	dc400117 	ldw	r17,4(sp)
    5784:	dc000017 	ldw	r16,0(sp)
    5788:	dec00904 	addi	sp,sp,36
    578c:	f800283a 	ret
    5790:	002f883a 	mov	r23,zero
    5794:	003ff206 	br	5760 <__alt_exception_stack_pointer+0xf8005760>

00005798 <_setlocale_r>:
    5798:	30001b26 	beq	r6,zero,5808 <_setlocale_r+0x70>
    579c:	01400074 	movhi	r5,1
    57a0:	defffe04 	addi	sp,sp,-8
    57a4:	297ee404 	addi	r5,r5,-1136
    57a8:	3009883a 	mov	r4,r6
    57ac:	dc000015 	stw	r16,0(sp)
    57b0:	dfc00115 	stw	ra,4(sp)
    57b4:	3021883a 	mov	r16,r6
    57b8:	0006fec0 	call	6fec <strcmp>
    57bc:	1000061e 	bne	r2,zero,57d8 <_setlocale_r+0x40>
    57c0:	00800074 	movhi	r2,1
    57c4:	10bee304 	addi	r2,r2,-1140
    57c8:	dfc00117 	ldw	ra,4(sp)
    57cc:	dc000017 	ldw	r16,0(sp)
    57d0:	dec00204 	addi	sp,sp,8
    57d4:	f800283a 	ret
    57d8:	01400074 	movhi	r5,1
    57dc:	297ee304 	addi	r5,r5,-1140
    57e0:	8009883a 	mov	r4,r16
    57e4:	0006fec0 	call	6fec <strcmp>
    57e8:	103ff526 	beq	r2,zero,57c0 <__alt_exception_stack_pointer+0xf80057c0>
    57ec:	01400074 	movhi	r5,1
    57f0:	297ece04 	addi	r5,r5,-1224
    57f4:	8009883a 	mov	r4,r16
    57f8:	0006fec0 	call	6fec <strcmp>
    57fc:	103ff026 	beq	r2,zero,57c0 <__alt_exception_stack_pointer+0xf80057c0>
    5800:	0005883a 	mov	r2,zero
    5804:	003ff006 	br	57c8 <__alt_exception_stack_pointer+0xf80057c8>
    5808:	00800074 	movhi	r2,1
    580c:	10bee304 	addi	r2,r2,-1140
    5810:	f800283a 	ret

00005814 <__locale_charset>:
    5814:	00800074 	movhi	r2,1
    5818:	10819b04 	addi	r2,r2,1644
    581c:	f800283a 	ret

00005820 <__locale_mb_cur_max>:
    5820:	00800074 	movhi	r2,1
    5824:	10863904 	addi	r2,r2,6372
    5828:	10800017 	ldw	r2,0(r2)
    582c:	f800283a 	ret

00005830 <__locale_msgcharset>:
    5830:	00800074 	movhi	r2,1
    5834:	10819304 	addi	r2,r2,1612
    5838:	f800283a 	ret

0000583c <__locale_cjk_lang>:
    583c:	0005883a 	mov	r2,zero
    5840:	f800283a 	ret

00005844 <_localeconv_r>:
    5844:	00800074 	movhi	r2,1
    5848:	1081a304 	addi	r2,r2,1676
    584c:	f800283a 	ret

00005850 <setlocale>:
    5850:	00800074 	movhi	r2,1
    5854:	10863804 	addi	r2,r2,6368
    5858:	280d883a 	mov	r6,r5
    585c:	200b883a 	mov	r5,r4
    5860:	11000017 	ldw	r4,0(r2)
    5864:	00057981 	jmpi	5798 <_setlocale_r>

00005868 <localeconv>:
    5868:	00800074 	movhi	r2,1
    586c:	1081a304 	addi	r2,r2,1676
    5870:	f800283a 	ret

00005874 <__smakebuf_r>:
    5874:	2880030b 	ldhu	r2,12(r5)
    5878:	10c0008c 	andi	r3,r2,2
    587c:	1800411e 	bne	r3,zero,5984 <__smakebuf_r+0x110>
    5880:	deffec04 	addi	sp,sp,-80
    5884:	dc000f15 	stw	r16,60(sp)
    5888:	2821883a 	mov	r16,r5
    588c:	2940038f 	ldh	r5,14(r5)
    5890:	dc401015 	stw	r17,64(sp)
    5894:	dfc01315 	stw	ra,76(sp)
    5898:	dcc01215 	stw	r19,72(sp)
    589c:	dc801115 	stw	r18,68(sp)
    58a0:	2023883a 	mov	r17,r4
    58a4:	28001c16 	blt	r5,zero,5918 <__smakebuf_r+0xa4>
    58a8:	d80d883a 	mov	r6,sp
    58ac:	0008cf40 	call	8cf4 <_fstat_r>
    58b0:	10001816 	blt	r2,zero,5914 <__smakebuf_r+0xa0>
    58b4:	d8800117 	ldw	r2,4(sp)
    58b8:	00e00014 	movui	r3,32768
    58bc:	10bc000c 	andi	r2,r2,61440
    58c0:	14c80020 	cmpeqi	r19,r2,8192
    58c4:	10c03726 	beq	r2,r3,59a4 <__smakebuf_r+0x130>
    58c8:	80c0030b 	ldhu	r3,12(r16)
    58cc:	18c20014 	ori	r3,r3,2048
    58d0:	80c0030d 	sth	r3,12(r16)
    58d4:	00c80004 	movi	r3,8192
    58d8:	10c0521e 	bne	r2,r3,5a24 <__smakebuf_r+0x1b0>
    58dc:	8140038f 	ldh	r5,14(r16)
    58e0:	8809883a 	mov	r4,r17
    58e4:	00092180 	call	9218 <_isatty_r>
    58e8:	10004c26 	beq	r2,zero,5a1c <__smakebuf_r+0x1a8>
    58ec:	8080030b 	ldhu	r2,12(r16)
    58f0:	80c010c4 	addi	r3,r16,67
    58f4:	80c00015 	stw	r3,0(r16)
    58f8:	10800054 	ori	r2,r2,1
    58fc:	8080030d 	sth	r2,12(r16)
    5900:	00800044 	movi	r2,1
    5904:	80c00415 	stw	r3,16(r16)
    5908:	80800515 	stw	r2,20(r16)
    590c:	04810004 	movi	r18,1024
    5910:	00000706 	br	5930 <__smakebuf_r+0xbc>
    5914:	8080030b 	ldhu	r2,12(r16)
    5918:	10c0200c 	andi	r3,r2,128
    591c:	18001f1e 	bne	r3,zero,599c <__smakebuf_r+0x128>
    5920:	04810004 	movi	r18,1024
    5924:	10820014 	ori	r2,r2,2048
    5928:	8080030d 	sth	r2,12(r16)
    592c:	0027883a 	mov	r19,zero
    5930:	900b883a 	mov	r5,r18
    5934:	8809883a 	mov	r4,r17
    5938:	00005000 	call	500 <_malloc_r>
    593c:	10002c26 	beq	r2,zero,59f0 <__smakebuf_r+0x17c>
    5940:	80c0030b 	ldhu	r3,12(r16)
    5944:	01000034 	movhi	r4,0
    5948:	21138d04 	addi	r4,r4,20020
    594c:	89000f15 	stw	r4,60(r17)
    5950:	18c02014 	ori	r3,r3,128
    5954:	80c0030d 	sth	r3,12(r16)
    5958:	80800015 	stw	r2,0(r16)
    595c:	80800415 	stw	r2,16(r16)
    5960:	84800515 	stw	r18,20(r16)
    5964:	98001a1e 	bne	r19,zero,59d0 <__smakebuf_r+0x15c>
    5968:	dfc01317 	ldw	ra,76(sp)
    596c:	dcc01217 	ldw	r19,72(sp)
    5970:	dc801117 	ldw	r18,68(sp)
    5974:	dc401017 	ldw	r17,64(sp)
    5978:	dc000f17 	ldw	r16,60(sp)
    597c:	dec01404 	addi	sp,sp,80
    5980:	f800283a 	ret
    5984:	288010c4 	addi	r2,r5,67
    5988:	28800015 	stw	r2,0(r5)
    598c:	28800415 	stw	r2,16(r5)
    5990:	00800044 	movi	r2,1
    5994:	28800515 	stw	r2,20(r5)
    5998:	f800283a 	ret
    599c:	04801004 	movi	r18,64
    59a0:	003fe006 	br	5924 <__alt_exception_stack_pointer+0xf8005924>
    59a4:	81000a17 	ldw	r4,40(r16)
    59a8:	00c00034 	movhi	r3,0
    59ac:	18dbe204 	addi	r3,r3,28552
    59b0:	20ffc51e 	bne	r4,r3,58c8 <__alt_exception_stack_pointer+0xf80058c8>
    59b4:	8080030b 	ldhu	r2,12(r16)
    59b8:	04810004 	movi	r18,1024
    59bc:	84801315 	stw	r18,76(r16)
    59c0:	1484b03a 	or	r2,r2,r18
    59c4:	8080030d 	sth	r2,12(r16)
    59c8:	0027883a 	mov	r19,zero
    59cc:	003fd806 	br	5930 <__alt_exception_stack_pointer+0xf8005930>
    59d0:	8140038f 	ldh	r5,14(r16)
    59d4:	8809883a 	mov	r4,r17
    59d8:	00092180 	call	9218 <_isatty_r>
    59dc:	103fe226 	beq	r2,zero,5968 <__alt_exception_stack_pointer+0xf8005968>
    59e0:	8080030b 	ldhu	r2,12(r16)
    59e4:	10800054 	ori	r2,r2,1
    59e8:	8080030d 	sth	r2,12(r16)
    59ec:	003fde06 	br	5968 <__alt_exception_stack_pointer+0xf8005968>
    59f0:	8080030b 	ldhu	r2,12(r16)
    59f4:	10c0800c 	andi	r3,r2,512
    59f8:	183fdb1e 	bne	r3,zero,5968 <__alt_exception_stack_pointer+0xf8005968>
    59fc:	10800094 	ori	r2,r2,2
    5a00:	80c010c4 	addi	r3,r16,67
    5a04:	8080030d 	sth	r2,12(r16)
    5a08:	00800044 	movi	r2,1
    5a0c:	80c00015 	stw	r3,0(r16)
    5a10:	80c00415 	stw	r3,16(r16)
    5a14:	80800515 	stw	r2,20(r16)
    5a18:	003fd306 	br	5968 <__alt_exception_stack_pointer+0xf8005968>
    5a1c:	04810004 	movi	r18,1024
    5a20:	003fc306 	br	5930 <__alt_exception_stack_pointer+0xf8005930>
    5a24:	0027883a 	mov	r19,zero
    5a28:	04810004 	movi	r18,1024
    5a2c:	003fc006 	br	5930 <__alt_exception_stack_pointer+0xf8005930>

00005a30 <memchr>:
    5a30:	208000cc 	andi	r2,r4,3
    5a34:	280f883a 	mov	r7,r5
    5a38:	10003426 	beq	r2,zero,5b0c <memchr+0xdc>
    5a3c:	30bfffc4 	addi	r2,r6,-1
    5a40:	30001a26 	beq	r6,zero,5aac <memchr+0x7c>
    5a44:	20c00003 	ldbu	r3,0(r4)
    5a48:	29803fcc 	andi	r6,r5,255
    5a4c:	30c0051e 	bne	r6,r3,5a64 <memchr+0x34>
    5a50:	00001806 	br	5ab4 <memchr+0x84>
    5a54:	10001526 	beq	r2,zero,5aac <memchr+0x7c>
    5a58:	20c00003 	ldbu	r3,0(r4)
    5a5c:	10bfffc4 	addi	r2,r2,-1
    5a60:	30c01426 	beq	r6,r3,5ab4 <memchr+0x84>
    5a64:	21000044 	addi	r4,r4,1
    5a68:	20c000cc 	andi	r3,r4,3
    5a6c:	183ff91e 	bne	r3,zero,5a54 <__alt_exception_stack_pointer+0xf8005a54>
    5a70:	020000c4 	movi	r8,3
    5a74:	40801136 	bltu	r8,r2,5abc <memchr+0x8c>
    5a78:	10000c26 	beq	r2,zero,5aac <memchr+0x7c>
    5a7c:	20c00003 	ldbu	r3,0(r4)
    5a80:	29403fcc 	andi	r5,r5,255
    5a84:	28c00b26 	beq	r5,r3,5ab4 <memchr+0x84>
    5a88:	20c00044 	addi	r3,r4,1
    5a8c:	39803fcc 	andi	r6,r7,255
    5a90:	2089883a 	add	r4,r4,r2
    5a94:	00000306 	br	5aa4 <memchr+0x74>
    5a98:	18c00044 	addi	r3,r3,1
    5a9c:	197fffc3 	ldbu	r5,-1(r3)
    5aa0:	31400526 	beq	r6,r5,5ab8 <memchr+0x88>
    5aa4:	1805883a 	mov	r2,r3
    5aa8:	20fffb1e 	bne	r4,r3,5a98 <__alt_exception_stack_pointer+0xf8005a98>
    5aac:	0005883a 	mov	r2,zero
    5ab0:	f800283a 	ret
    5ab4:	2005883a 	mov	r2,r4
    5ab8:	f800283a 	ret
    5abc:	28c03fcc 	andi	r3,r5,255
    5ac0:	1812923a 	slli	r9,r3,8
    5ac4:	02ffbff4 	movhi	r11,65279
    5ac8:	02a02074 	movhi	r10,32897
    5acc:	48d2b03a 	or	r9,r9,r3
    5ad0:	4806943a 	slli	r3,r9,16
    5ad4:	5affbfc4 	addi	r11,r11,-257
    5ad8:	52a02004 	addi	r10,r10,-32640
    5adc:	48d2b03a 	or	r9,r9,r3
    5ae0:	20c00017 	ldw	r3,0(r4)
    5ae4:	48c6f03a 	xor	r3,r9,r3
    5ae8:	1acd883a 	add	r6,r3,r11
    5aec:	00c6303a 	nor	r3,zero,r3
    5af0:	30c6703a 	and	r3,r6,r3
    5af4:	1a86703a 	and	r3,r3,r10
    5af8:	183fe01e 	bne	r3,zero,5a7c <__alt_exception_stack_pointer+0xf8005a7c>
    5afc:	10bfff04 	addi	r2,r2,-4
    5b00:	21000104 	addi	r4,r4,4
    5b04:	40bff636 	bltu	r8,r2,5ae0 <__alt_exception_stack_pointer+0xf8005ae0>
    5b08:	003fdb06 	br	5a78 <__alt_exception_stack_pointer+0xf8005a78>
    5b0c:	3005883a 	mov	r2,r6
    5b10:	003fd706 	br	5a70 <__alt_exception_stack_pointer+0xf8005a70>

00005b14 <memcpy>:
    5b14:	defffd04 	addi	sp,sp,-12
    5b18:	dfc00215 	stw	ra,8(sp)
    5b1c:	dc400115 	stw	r17,4(sp)
    5b20:	dc000015 	stw	r16,0(sp)
    5b24:	00c003c4 	movi	r3,15
    5b28:	2005883a 	mov	r2,r4
    5b2c:	1980452e 	bgeu	r3,r6,5c44 <memcpy+0x130>
    5b30:	2906b03a 	or	r3,r5,r4
    5b34:	18c000cc 	andi	r3,r3,3
    5b38:	1800441e 	bne	r3,zero,5c4c <memcpy+0x138>
    5b3c:	347ffc04 	addi	r17,r6,-16
    5b40:	8822d13a 	srli	r17,r17,4
    5b44:	28c00104 	addi	r3,r5,4
    5b48:	23400104 	addi	r13,r4,4
    5b4c:	8820913a 	slli	r16,r17,4
    5b50:	2b000204 	addi	r12,r5,8
    5b54:	22c00204 	addi	r11,r4,8
    5b58:	84000504 	addi	r16,r16,20
    5b5c:	2a800304 	addi	r10,r5,12
    5b60:	22400304 	addi	r9,r4,12
    5b64:	2c21883a 	add	r16,r5,r16
    5b68:	2811883a 	mov	r8,r5
    5b6c:	200f883a 	mov	r7,r4
    5b70:	41000017 	ldw	r4,0(r8)
    5b74:	1fc00017 	ldw	ra,0(r3)
    5b78:	63c00017 	ldw	r15,0(r12)
    5b7c:	39000015 	stw	r4,0(r7)
    5b80:	53800017 	ldw	r14,0(r10)
    5b84:	6fc00015 	stw	ra,0(r13)
    5b88:	5bc00015 	stw	r15,0(r11)
    5b8c:	4b800015 	stw	r14,0(r9)
    5b90:	18c00404 	addi	r3,r3,16
    5b94:	39c00404 	addi	r7,r7,16
    5b98:	42000404 	addi	r8,r8,16
    5b9c:	6b400404 	addi	r13,r13,16
    5ba0:	63000404 	addi	r12,r12,16
    5ba4:	5ac00404 	addi	r11,r11,16
    5ba8:	52800404 	addi	r10,r10,16
    5bac:	4a400404 	addi	r9,r9,16
    5bb0:	1c3fef1e 	bne	r3,r16,5b70 <__alt_exception_stack_pointer+0xf8005b70>
    5bb4:	89c00044 	addi	r7,r17,1
    5bb8:	380e913a 	slli	r7,r7,4
    5bbc:	310003cc 	andi	r4,r6,15
    5bc0:	02c000c4 	movi	r11,3
    5bc4:	11c7883a 	add	r3,r2,r7
    5bc8:	29cb883a 	add	r5,r5,r7
    5bcc:	5900212e 	bgeu	r11,r4,5c54 <memcpy+0x140>
    5bd0:	1813883a 	mov	r9,r3
    5bd4:	2811883a 	mov	r8,r5
    5bd8:	200f883a 	mov	r7,r4
    5bdc:	42800017 	ldw	r10,0(r8)
    5be0:	4a400104 	addi	r9,r9,4
    5be4:	39ffff04 	addi	r7,r7,-4
    5be8:	4abfff15 	stw	r10,-4(r9)
    5bec:	42000104 	addi	r8,r8,4
    5bf0:	59fffa36 	bltu	r11,r7,5bdc <__alt_exception_stack_pointer+0xf8005bdc>
    5bf4:	213fff04 	addi	r4,r4,-4
    5bf8:	2008d0ba 	srli	r4,r4,2
    5bfc:	318000cc 	andi	r6,r6,3
    5c00:	21000044 	addi	r4,r4,1
    5c04:	2109883a 	add	r4,r4,r4
    5c08:	2109883a 	add	r4,r4,r4
    5c0c:	1907883a 	add	r3,r3,r4
    5c10:	290b883a 	add	r5,r5,r4
    5c14:	30000626 	beq	r6,zero,5c30 <memcpy+0x11c>
    5c18:	198d883a 	add	r6,r3,r6
    5c1c:	29c00003 	ldbu	r7,0(r5)
    5c20:	18c00044 	addi	r3,r3,1
    5c24:	29400044 	addi	r5,r5,1
    5c28:	19ffffc5 	stb	r7,-1(r3)
    5c2c:	19bffb1e 	bne	r3,r6,5c1c <__alt_exception_stack_pointer+0xf8005c1c>
    5c30:	dfc00217 	ldw	ra,8(sp)
    5c34:	dc400117 	ldw	r17,4(sp)
    5c38:	dc000017 	ldw	r16,0(sp)
    5c3c:	dec00304 	addi	sp,sp,12
    5c40:	f800283a 	ret
    5c44:	2007883a 	mov	r3,r4
    5c48:	003ff206 	br	5c14 <__alt_exception_stack_pointer+0xf8005c14>
    5c4c:	2007883a 	mov	r3,r4
    5c50:	003ff106 	br	5c18 <__alt_exception_stack_pointer+0xf8005c18>
    5c54:	200d883a 	mov	r6,r4
    5c58:	003fee06 	br	5c14 <__alt_exception_stack_pointer+0xf8005c14>

00005c5c <memset>:
    5c5c:	20c000cc 	andi	r3,r4,3
    5c60:	2005883a 	mov	r2,r4
    5c64:	18004426 	beq	r3,zero,5d78 <memset+0x11c>
    5c68:	31ffffc4 	addi	r7,r6,-1
    5c6c:	30004026 	beq	r6,zero,5d70 <memset+0x114>
    5c70:	2813883a 	mov	r9,r5
    5c74:	200d883a 	mov	r6,r4
    5c78:	2007883a 	mov	r3,r4
    5c7c:	00000406 	br	5c90 <memset+0x34>
    5c80:	3a3fffc4 	addi	r8,r7,-1
    5c84:	31800044 	addi	r6,r6,1
    5c88:	38003926 	beq	r7,zero,5d70 <memset+0x114>
    5c8c:	400f883a 	mov	r7,r8
    5c90:	18c00044 	addi	r3,r3,1
    5c94:	32400005 	stb	r9,0(r6)
    5c98:	1a0000cc 	andi	r8,r3,3
    5c9c:	403ff81e 	bne	r8,zero,5c80 <__alt_exception_stack_pointer+0xf8005c80>
    5ca0:	010000c4 	movi	r4,3
    5ca4:	21c02d2e 	bgeu	r4,r7,5d5c <memset+0x100>
    5ca8:	29003fcc 	andi	r4,r5,255
    5cac:	200c923a 	slli	r6,r4,8
    5cb0:	3108b03a 	or	r4,r6,r4
    5cb4:	200c943a 	slli	r6,r4,16
    5cb8:	218cb03a 	or	r6,r4,r6
    5cbc:	010003c4 	movi	r4,15
    5cc0:	21c0182e 	bgeu	r4,r7,5d24 <memset+0xc8>
    5cc4:	3b3ffc04 	addi	r12,r7,-16
    5cc8:	6018d13a 	srli	r12,r12,4
    5ccc:	1a000104 	addi	r8,r3,4
    5cd0:	1ac00204 	addi	r11,r3,8
    5cd4:	6008913a 	slli	r4,r12,4
    5cd8:	1a800304 	addi	r10,r3,12
    5cdc:	1813883a 	mov	r9,r3
    5ce0:	21000504 	addi	r4,r4,20
    5ce4:	1909883a 	add	r4,r3,r4
    5ce8:	49800015 	stw	r6,0(r9)
    5cec:	41800015 	stw	r6,0(r8)
    5cf0:	59800015 	stw	r6,0(r11)
    5cf4:	51800015 	stw	r6,0(r10)
    5cf8:	42000404 	addi	r8,r8,16
    5cfc:	4a400404 	addi	r9,r9,16
    5d00:	5ac00404 	addi	r11,r11,16
    5d04:	52800404 	addi	r10,r10,16
    5d08:	413ff71e 	bne	r8,r4,5ce8 <__alt_exception_stack_pointer+0xf8005ce8>
    5d0c:	63000044 	addi	r12,r12,1
    5d10:	6018913a 	slli	r12,r12,4
    5d14:	39c003cc 	andi	r7,r7,15
    5d18:	010000c4 	movi	r4,3
    5d1c:	1b07883a 	add	r3,r3,r12
    5d20:	21c00e2e 	bgeu	r4,r7,5d5c <memset+0x100>
    5d24:	1813883a 	mov	r9,r3
    5d28:	3811883a 	mov	r8,r7
    5d2c:	010000c4 	movi	r4,3
    5d30:	49800015 	stw	r6,0(r9)
    5d34:	423fff04 	addi	r8,r8,-4
    5d38:	4a400104 	addi	r9,r9,4
    5d3c:	223ffc36 	bltu	r4,r8,5d30 <__alt_exception_stack_pointer+0xf8005d30>
    5d40:	393fff04 	addi	r4,r7,-4
    5d44:	2008d0ba 	srli	r4,r4,2
    5d48:	39c000cc 	andi	r7,r7,3
    5d4c:	21000044 	addi	r4,r4,1
    5d50:	2109883a 	add	r4,r4,r4
    5d54:	2109883a 	add	r4,r4,r4
    5d58:	1907883a 	add	r3,r3,r4
    5d5c:	38000526 	beq	r7,zero,5d74 <memset+0x118>
    5d60:	19cf883a 	add	r7,r3,r7
    5d64:	19400005 	stb	r5,0(r3)
    5d68:	18c00044 	addi	r3,r3,1
    5d6c:	38fffd1e 	bne	r7,r3,5d64 <__alt_exception_stack_pointer+0xf8005d64>
    5d70:	f800283a 	ret
    5d74:	f800283a 	ret
    5d78:	2007883a 	mov	r3,r4
    5d7c:	300f883a 	mov	r7,r6
    5d80:	003fc706 	br	5ca0 <__alt_exception_stack_pointer+0xf8005ca0>

00005d84 <_Balloc>:
    5d84:	20801317 	ldw	r2,76(r4)
    5d88:	defffc04 	addi	sp,sp,-16
    5d8c:	dc400115 	stw	r17,4(sp)
    5d90:	dc000015 	stw	r16,0(sp)
    5d94:	dfc00315 	stw	ra,12(sp)
    5d98:	dc800215 	stw	r18,8(sp)
    5d9c:	2023883a 	mov	r17,r4
    5da0:	2821883a 	mov	r16,r5
    5da4:	10000f26 	beq	r2,zero,5de4 <_Balloc+0x60>
    5da8:	8407883a 	add	r3,r16,r16
    5dac:	18c7883a 	add	r3,r3,r3
    5db0:	10c7883a 	add	r3,r2,r3
    5db4:	18800017 	ldw	r2,0(r3)
    5db8:	10001126 	beq	r2,zero,5e00 <_Balloc+0x7c>
    5dbc:	11000017 	ldw	r4,0(r2)
    5dc0:	19000015 	stw	r4,0(r3)
    5dc4:	10000415 	stw	zero,16(r2)
    5dc8:	10000315 	stw	zero,12(r2)
    5dcc:	dfc00317 	ldw	ra,12(sp)
    5dd0:	dc800217 	ldw	r18,8(sp)
    5dd4:	dc400117 	ldw	r17,4(sp)
    5dd8:	dc000017 	ldw	r16,0(sp)
    5ddc:	dec00404 	addi	sp,sp,16
    5de0:	f800283a 	ret
    5de4:	01800844 	movi	r6,33
    5de8:	01400104 	movi	r5,4
    5dec:	000890c0 	call	890c <_calloc_r>
    5df0:	88801315 	stw	r2,76(r17)
    5df4:	103fec1e 	bne	r2,zero,5da8 <__alt_exception_stack_pointer+0xf8005da8>
    5df8:	0005883a 	mov	r2,zero
    5dfc:	003ff306 	br	5dcc <__alt_exception_stack_pointer+0xf8005dcc>
    5e00:	01400044 	movi	r5,1
    5e04:	2c24983a 	sll	r18,r5,r16
    5e08:	8809883a 	mov	r4,r17
    5e0c:	91800144 	addi	r6,r18,5
    5e10:	318d883a 	add	r6,r6,r6
    5e14:	318d883a 	add	r6,r6,r6
    5e18:	000890c0 	call	890c <_calloc_r>
    5e1c:	103ff626 	beq	r2,zero,5df8 <__alt_exception_stack_pointer+0xf8005df8>
    5e20:	14000115 	stw	r16,4(r2)
    5e24:	14800215 	stw	r18,8(r2)
    5e28:	003fe606 	br	5dc4 <__alt_exception_stack_pointer+0xf8005dc4>

00005e2c <_Bfree>:
    5e2c:	28000826 	beq	r5,zero,5e50 <_Bfree+0x24>
    5e30:	28c00117 	ldw	r3,4(r5)
    5e34:	20801317 	ldw	r2,76(r4)
    5e38:	18c7883a 	add	r3,r3,r3
    5e3c:	18c7883a 	add	r3,r3,r3
    5e40:	10c5883a 	add	r2,r2,r3
    5e44:	10c00017 	ldw	r3,0(r2)
    5e48:	28c00015 	stw	r3,0(r5)
    5e4c:	11400015 	stw	r5,0(r2)
    5e50:	f800283a 	ret

00005e54 <__multadd>:
    5e54:	defff704 	addi	sp,sp,-36
    5e58:	dc800215 	stw	r18,8(sp)
    5e5c:	2c800417 	ldw	r18,16(r5)
    5e60:	dd800615 	stw	r22,24(sp)
    5e64:	dd400515 	stw	r21,20(sp)
    5e68:	dd000415 	stw	r20,16(sp)
    5e6c:	dcc00315 	stw	r19,12(sp)
    5e70:	dc400115 	stw	r17,4(sp)
    5e74:	dc000015 	stw	r16,0(sp)
    5e78:	dfc00815 	stw	ra,32(sp)
    5e7c:	ddc00715 	stw	r23,28(sp)
    5e80:	2827883a 	mov	r19,r5
    5e84:	2029883a 	mov	r20,r4
    5e88:	3023883a 	mov	r17,r6
    5e8c:	3821883a 	mov	r16,r7
    5e90:	2d400504 	addi	r21,r5,20
    5e94:	002d883a 	mov	r22,zero
    5e98:	adc00017 	ldw	r23,0(r21)
    5e9c:	880b883a 	mov	r5,r17
    5ea0:	ad400104 	addi	r21,r21,4
    5ea4:	b93fffcc 	andi	r4,r23,65535
    5ea8:	000aaa00 	call	aaa0 <__mulsi3>
    5eac:	b808d43a 	srli	r4,r23,16
    5eb0:	880b883a 	mov	r5,r17
    5eb4:	1421883a 	add	r16,r2,r16
    5eb8:	000aaa00 	call	aaa0 <__mulsi3>
    5ebc:	800ed43a 	srli	r7,r16,16
    5ec0:	80ffffcc 	andi	r3,r16,65535
    5ec4:	b5800044 	addi	r22,r22,1
    5ec8:	11c5883a 	add	r2,r2,r7
    5ecc:	100e943a 	slli	r7,r2,16
    5ed0:	1020d43a 	srli	r16,r2,16
    5ed4:	38c7883a 	add	r3,r7,r3
    5ed8:	a8ffff15 	stw	r3,-4(r21)
    5edc:	b4bfee16 	blt	r22,r18,5e98 <__alt_exception_stack_pointer+0xf8005e98>
    5ee0:	80000926 	beq	r16,zero,5f08 <__multadd+0xb4>
    5ee4:	98800217 	ldw	r2,8(r19)
    5ee8:	9080130e 	bge	r18,r2,5f38 <__multadd+0xe4>
    5eec:	90800144 	addi	r2,r18,5
    5ef0:	1085883a 	add	r2,r2,r2
    5ef4:	1085883a 	add	r2,r2,r2
    5ef8:	9885883a 	add	r2,r19,r2
    5efc:	14000015 	stw	r16,0(r2)
    5f00:	94800044 	addi	r18,r18,1
    5f04:	9c800415 	stw	r18,16(r19)
    5f08:	9805883a 	mov	r2,r19
    5f0c:	dfc00817 	ldw	ra,32(sp)
    5f10:	ddc00717 	ldw	r23,28(sp)
    5f14:	dd800617 	ldw	r22,24(sp)
    5f18:	dd400517 	ldw	r21,20(sp)
    5f1c:	dd000417 	ldw	r20,16(sp)
    5f20:	dcc00317 	ldw	r19,12(sp)
    5f24:	dc800217 	ldw	r18,8(sp)
    5f28:	dc400117 	ldw	r17,4(sp)
    5f2c:	dc000017 	ldw	r16,0(sp)
    5f30:	dec00904 	addi	sp,sp,36
    5f34:	f800283a 	ret
    5f38:	99400117 	ldw	r5,4(r19)
    5f3c:	a009883a 	mov	r4,r20
    5f40:	29400044 	addi	r5,r5,1
    5f44:	0005d840 	call	5d84 <_Balloc>
    5f48:	99800417 	ldw	r6,16(r19)
    5f4c:	99400304 	addi	r5,r19,12
    5f50:	11000304 	addi	r4,r2,12
    5f54:	31800084 	addi	r6,r6,2
    5f58:	318d883a 	add	r6,r6,r6
    5f5c:	318d883a 	add	r6,r6,r6
    5f60:	1023883a 	mov	r17,r2
    5f64:	0005b140 	call	5b14 <memcpy>
    5f68:	98000a26 	beq	r19,zero,5f94 <__multadd+0x140>
    5f6c:	98c00117 	ldw	r3,4(r19)
    5f70:	a0801317 	ldw	r2,76(r20)
    5f74:	18c7883a 	add	r3,r3,r3
    5f78:	18c7883a 	add	r3,r3,r3
    5f7c:	10c5883a 	add	r2,r2,r3
    5f80:	10c00017 	ldw	r3,0(r2)
    5f84:	98c00015 	stw	r3,0(r19)
    5f88:	14c00015 	stw	r19,0(r2)
    5f8c:	8827883a 	mov	r19,r17
    5f90:	003fd606 	br	5eec <__alt_exception_stack_pointer+0xf8005eec>
    5f94:	8827883a 	mov	r19,r17
    5f98:	003fd406 	br	5eec <__alt_exception_stack_pointer+0xf8005eec>

00005f9c <__s2b>:
    5f9c:	defff904 	addi	sp,sp,-28
    5fa0:	dc400115 	stw	r17,4(sp)
    5fa4:	dc000015 	stw	r16,0(sp)
    5fa8:	2023883a 	mov	r17,r4
    5fac:	2821883a 	mov	r16,r5
    5fb0:	39000204 	addi	r4,r7,8
    5fb4:	01400244 	movi	r5,9
    5fb8:	dcc00315 	stw	r19,12(sp)
    5fbc:	dc800215 	stw	r18,8(sp)
    5fc0:	dfc00615 	stw	ra,24(sp)
    5fc4:	dd400515 	stw	r21,20(sp)
    5fc8:	dd000415 	stw	r20,16(sp)
    5fcc:	3825883a 	mov	r18,r7
    5fd0:	3027883a 	mov	r19,r6
    5fd4:	000a8ec0 	call	a8ec <__divsi3>
    5fd8:	00c00044 	movi	r3,1
    5fdc:	000b883a 	mov	r5,zero
    5fe0:	1880030e 	bge	r3,r2,5ff0 <__s2b+0x54>
    5fe4:	18c7883a 	add	r3,r3,r3
    5fe8:	29400044 	addi	r5,r5,1
    5fec:	18bffd16 	blt	r3,r2,5fe4 <__alt_exception_stack_pointer+0xf8005fe4>
    5ff0:	8809883a 	mov	r4,r17
    5ff4:	0005d840 	call	5d84 <_Balloc>
    5ff8:	d8c00717 	ldw	r3,28(sp)
    5ffc:	10c00515 	stw	r3,20(r2)
    6000:	00c00044 	movi	r3,1
    6004:	10c00415 	stw	r3,16(r2)
    6008:	00c00244 	movi	r3,9
    600c:	1cc0210e 	bge	r3,r19,6094 <__s2b+0xf8>
    6010:	80eb883a 	add	r21,r16,r3
    6014:	a829883a 	mov	r20,r21
    6018:	84e1883a 	add	r16,r16,r19
    601c:	a1c00007 	ldb	r7,0(r20)
    6020:	01800284 	movi	r6,10
    6024:	a5000044 	addi	r20,r20,1
    6028:	100b883a 	mov	r5,r2
    602c:	39fff404 	addi	r7,r7,-48
    6030:	8809883a 	mov	r4,r17
    6034:	0005e540 	call	5e54 <__multadd>
    6038:	a43ff81e 	bne	r20,r16,601c <__alt_exception_stack_pointer+0xf800601c>
    603c:	ace1883a 	add	r16,r21,r19
    6040:	843ffe04 	addi	r16,r16,-8
    6044:	9c800a0e 	bge	r19,r18,6070 <__s2b+0xd4>
    6048:	94e5c83a 	sub	r18,r18,r19
    604c:	84a5883a 	add	r18,r16,r18
    6050:	81c00007 	ldb	r7,0(r16)
    6054:	01800284 	movi	r6,10
    6058:	84000044 	addi	r16,r16,1
    605c:	100b883a 	mov	r5,r2
    6060:	39fff404 	addi	r7,r7,-48
    6064:	8809883a 	mov	r4,r17
    6068:	0005e540 	call	5e54 <__multadd>
    606c:	84bff81e 	bne	r16,r18,6050 <__alt_exception_stack_pointer+0xf8006050>
    6070:	dfc00617 	ldw	ra,24(sp)
    6074:	dd400517 	ldw	r21,20(sp)
    6078:	dd000417 	ldw	r20,16(sp)
    607c:	dcc00317 	ldw	r19,12(sp)
    6080:	dc800217 	ldw	r18,8(sp)
    6084:	dc400117 	ldw	r17,4(sp)
    6088:	dc000017 	ldw	r16,0(sp)
    608c:	dec00704 	addi	sp,sp,28
    6090:	f800283a 	ret
    6094:	84000284 	addi	r16,r16,10
    6098:	1827883a 	mov	r19,r3
    609c:	003fe906 	br	6044 <__alt_exception_stack_pointer+0xf8006044>

000060a0 <__hi0bits>:
    60a0:	20bfffec 	andhi	r2,r4,65535
    60a4:	1000141e 	bne	r2,zero,60f8 <__hi0bits+0x58>
    60a8:	2008943a 	slli	r4,r4,16
    60ac:	00800404 	movi	r2,16
    60b0:	20ffc02c 	andhi	r3,r4,65280
    60b4:	1800021e 	bne	r3,zero,60c0 <__hi0bits+0x20>
    60b8:	2008923a 	slli	r4,r4,8
    60bc:	10800204 	addi	r2,r2,8
    60c0:	20fc002c 	andhi	r3,r4,61440
    60c4:	1800021e 	bne	r3,zero,60d0 <__hi0bits+0x30>
    60c8:	2008913a 	slli	r4,r4,4
    60cc:	10800104 	addi	r2,r2,4
    60d0:	20f0002c 	andhi	r3,r4,49152
    60d4:	1800031e 	bne	r3,zero,60e4 <__hi0bits+0x44>
    60d8:	2109883a 	add	r4,r4,r4
    60dc:	10800084 	addi	r2,r2,2
    60e0:	2109883a 	add	r4,r4,r4
    60e4:	20000316 	blt	r4,zero,60f4 <__hi0bits+0x54>
    60e8:	2110002c 	andhi	r4,r4,16384
    60ec:	2000041e 	bne	r4,zero,6100 <__hi0bits+0x60>
    60f0:	00800804 	movi	r2,32
    60f4:	f800283a 	ret
    60f8:	0005883a 	mov	r2,zero
    60fc:	003fec06 	br	60b0 <__alt_exception_stack_pointer+0xf80060b0>
    6100:	10800044 	addi	r2,r2,1
    6104:	f800283a 	ret

00006108 <__lo0bits>:
    6108:	20c00017 	ldw	r3,0(r4)
    610c:	188001cc 	andi	r2,r3,7
    6110:	10000826 	beq	r2,zero,6134 <__lo0bits+0x2c>
    6114:	1880004c 	andi	r2,r3,1
    6118:	1000211e 	bne	r2,zero,61a0 <__lo0bits+0x98>
    611c:	1880008c 	andi	r2,r3,2
    6120:	1000211e 	bne	r2,zero,61a8 <__lo0bits+0xa0>
    6124:	1806d0ba 	srli	r3,r3,2
    6128:	00800084 	movi	r2,2
    612c:	20c00015 	stw	r3,0(r4)
    6130:	f800283a 	ret
    6134:	18bfffcc 	andi	r2,r3,65535
    6138:	10001326 	beq	r2,zero,6188 <__lo0bits+0x80>
    613c:	0005883a 	mov	r2,zero
    6140:	19403fcc 	andi	r5,r3,255
    6144:	2800021e 	bne	r5,zero,6150 <__lo0bits+0x48>
    6148:	1806d23a 	srli	r3,r3,8
    614c:	10800204 	addi	r2,r2,8
    6150:	194003cc 	andi	r5,r3,15
    6154:	2800021e 	bne	r5,zero,6160 <__lo0bits+0x58>
    6158:	1806d13a 	srli	r3,r3,4
    615c:	10800104 	addi	r2,r2,4
    6160:	194000cc 	andi	r5,r3,3
    6164:	2800021e 	bne	r5,zero,6170 <__lo0bits+0x68>
    6168:	1806d0ba 	srli	r3,r3,2
    616c:	10800084 	addi	r2,r2,2
    6170:	1940004c 	andi	r5,r3,1
    6174:	2800081e 	bne	r5,zero,6198 <__lo0bits+0x90>
    6178:	1806d07a 	srli	r3,r3,1
    617c:	1800051e 	bne	r3,zero,6194 <__lo0bits+0x8c>
    6180:	00800804 	movi	r2,32
    6184:	f800283a 	ret
    6188:	1806d43a 	srli	r3,r3,16
    618c:	00800404 	movi	r2,16
    6190:	003feb06 	br	6140 <__alt_exception_stack_pointer+0xf8006140>
    6194:	10800044 	addi	r2,r2,1
    6198:	20c00015 	stw	r3,0(r4)
    619c:	f800283a 	ret
    61a0:	0005883a 	mov	r2,zero
    61a4:	f800283a 	ret
    61a8:	1806d07a 	srli	r3,r3,1
    61ac:	00800044 	movi	r2,1
    61b0:	20c00015 	stw	r3,0(r4)
    61b4:	f800283a 	ret

000061b8 <__i2b>:
    61b8:	defffd04 	addi	sp,sp,-12
    61bc:	dc000015 	stw	r16,0(sp)
    61c0:	04000044 	movi	r16,1
    61c4:	dc400115 	stw	r17,4(sp)
    61c8:	2823883a 	mov	r17,r5
    61cc:	800b883a 	mov	r5,r16
    61d0:	dfc00215 	stw	ra,8(sp)
    61d4:	0005d840 	call	5d84 <_Balloc>
    61d8:	14400515 	stw	r17,20(r2)
    61dc:	14000415 	stw	r16,16(r2)
    61e0:	dfc00217 	ldw	ra,8(sp)
    61e4:	dc400117 	ldw	r17,4(sp)
    61e8:	dc000017 	ldw	r16,0(sp)
    61ec:	dec00304 	addi	sp,sp,12
    61f0:	f800283a 	ret

000061f4 <__multiply>:
    61f4:	deffef04 	addi	sp,sp,-68
    61f8:	dc400815 	stw	r17,32(sp)
    61fc:	dc000715 	stw	r16,28(sp)
    6200:	34400417 	ldw	r17,16(r6)
    6204:	2c000417 	ldw	r16,16(r5)
    6208:	dd800d15 	stw	r22,52(sp)
    620c:	dc800915 	stw	r18,36(sp)
    6210:	dfc01015 	stw	ra,64(sp)
    6214:	df000f15 	stw	fp,60(sp)
    6218:	ddc00e15 	stw	r23,56(sp)
    621c:	dd400c15 	stw	r21,48(sp)
    6220:	dd000b15 	stw	r20,44(sp)
    6224:	dcc00a15 	stw	r19,40(sp)
    6228:	2825883a 	mov	r18,r5
    622c:	302d883a 	mov	r22,r6
    6230:	8440050e 	bge	r16,r17,6248 <__multiply+0x54>
    6234:	8007883a 	mov	r3,r16
    6238:	3025883a 	mov	r18,r6
    623c:	8821883a 	mov	r16,r17
    6240:	282d883a 	mov	r22,r5
    6244:	1823883a 	mov	r17,r3
    6248:	90800217 	ldw	r2,8(r18)
    624c:	8447883a 	add	r3,r16,r17
    6250:	d8c00215 	stw	r3,8(sp)
    6254:	91400117 	ldw	r5,4(r18)
    6258:	10c0010e 	bge	r2,r3,6260 <__multiply+0x6c>
    625c:	29400044 	addi	r5,r5,1
    6260:	0005d840 	call	5d84 <_Balloc>
    6264:	d8c00217 	ldw	r3,8(sp)
    6268:	d8800615 	stw	r2,24(sp)
    626c:	18eb883a 	add	r21,r3,r3
    6270:	ad6b883a 	add	r21,r21,r21
    6274:	10c00504 	addi	r3,r2,20
    6278:	1d6b883a 	add	r21,r3,r21
    627c:	d8c00115 	stw	r3,4(sp)
    6280:	dd400315 	stw	r21,12(sp)
    6284:	1805883a 	mov	r2,r3
    6288:	1d40042e 	bgeu	r3,r21,629c <__multiply+0xa8>
    628c:	d8c00317 	ldw	r3,12(sp)
    6290:	10000015 	stw	zero,0(r2)
    6294:	10800104 	addi	r2,r2,4
    6298:	10fffc36 	bltu	r2,r3,628c <__alt_exception_stack_pointer+0xf800628c>
    629c:	8c63883a 	add	r17,r17,r17
    62a0:	b5800504 	addi	r22,r22,20
    62a4:	8c63883a 	add	r17,r17,r17
    62a8:	94800504 	addi	r18,r18,20
    62ac:	8421883a 	add	r16,r16,r16
    62b0:	b463883a 	add	r17,r22,r17
    62b4:	8421883a 	add	r16,r16,r16
    62b8:	dd800015 	stw	r22,0(sp)
    62bc:	dc800415 	stw	r18,16(sp)
    62c0:	dc400515 	stw	r17,20(sp)
    62c4:	9429883a 	add	r20,r18,r16
    62c8:	b4404f2e 	bgeu	r22,r17,6408 <__multiply+0x214>
    62cc:	d8c00017 	ldw	r3,0(sp)
    62d0:	1c800017 	ldw	r18,0(r3)
    62d4:	947fffcc 	andi	r17,r18,65535
    62d8:	88001e26 	beq	r17,zero,6354 <__multiply+0x160>
    62dc:	dd800117 	ldw	r22,4(sp)
    62e0:	dd400417 	ldw	r21,16(sp)
    62e4:	0027883a 	mov	r19,zero
    62e8:	ac800017 	ldw	r18,0(r21)
    62ec:	b4000017 	ldw	r16,0(r22)
    62f0:	880b883a 	mov	r5,r17
    62f4:	913fffcc 	andi	r4,r18,65535
    62f8:	000aaa00 	call	aaa0 <__mulsi3>
    62fc:	9008d43a 	srli	r4,r18,16
    6300:	84bfffcc 	andi	r18,r16,65535
    6304:	1485883a 	add	r2,r2,r18
    6308:	14e5883a 	add	r18,r2,r19
    630c:	8020d43a 	srli	r16,r16,16
    6310:	9026d43a 	srli	r19,r18,16
    6314:	880b883a 	mov	r5,r17
    6318:	000aaa00 	call	aaa0 <__mulsi3>
    631c:	1405883a 	add	r2,r2,r16
    6320:	14e1883a 	add	r16,r2,r19
    6324:	90ffffcc 	andi	r3,r18,65535
    6328:	8024943a 	slli	r18,r16,16
    632c:	ad400104 	addi	r21,r21,4
    6330:	b005883a 	mov	r2,r22
    6334:	90c6b03a 	or	r3,r18,r3
    6338:	b0c00015 	stw	r3,0(r22)
    633c:	8026d43a 	srli	r19,r16,16
    6340:	b5800104 	addi	r22,r22,4
    6344:	ad3fe836 	bltu	r21,r20,62e8 <__alt_exception_stack_pointer+0xf80062e8>
    6348:	d8c00017 	ldw	r3,0(sp)
    634c:	14c00115 	stw	r19,4(r2)
    6350:	1c800017 	ldw	r18,0(r3)
    6354:	9024d43a 	srli	r18,r18,16
    6358:	90002226 	beq	r18,zero,63e4 <__multiply+0x1f0>
    635c:	d8c00117 	ldw	r3,4(sp)
    6360:	dd800417 	ldw	r22,16(sp)
    6364:	002f883a 	mov	r23,zero
    6368:	1f000017 	ldw	fp,0(r3)
    636c:	1823883a 	mov	r17,r3
    6370:	182b883a 	mov	r21,r3
    6374:	e021883a 	mov	r16,fp
    6378:	00000106 	br	6380 <__multiply+0x18c>
    637c:	982b883a 	mov	r21,r19
    6380:	b100000b 	ldhu	r4,0(r22)
    6384:	8020d43a 	srli	r16,r16,16
    6388:	900b883a 	mov	r5,r18
    638c:	000aaa00 	call	aaa0 <__mulsi3>
    6390:	1405883a 	add	r2,r2,r16
    6394:	15ef883a 	add	r23,r2,r23
    6398:	b804943a 	slli	r2,r23,16
    639c:	e0ffffcc 	andi	r3,fp,65535
    63a0:	8c400104 	addi	r17,r17,4
    63a4:	10c6b03a 	or	r3,r2,r3
    63a8:	88ffff15 	stw	r3,-4(r17)
    63ac:	b5800104 	addi	r22,r22,4
    63b0:	b13fff17 	ldw	r4,-4(r22)
    63b4:	acc00104 	addi	r19,r21,4
    63b8:	900b883a 	mov	r5,r18
    63bc:	2008d43a 	srli	r4,r4,16
    63c0:	9c000017 	ldw	r16,0(r19)
    63c4:	000aaa00 	call	aaa0 <__mulsi3>
    63c8:	b806d43a 	srli	r3,r23,16
    63cc:	813fffcc 	andi	r4,r16,65535
    63d0:	1105883a 	add	r2,r2,r4
    63d4:	10f9883a 	add	fp,r2,r3
    63d8:	e02ed43a 	srli	r23,fp,16
    63dc:	b53fe736 	bltu	r22,r20,637c <__alt_exception_stack_pointer+0xf800637c>
    63e0:	af000115 	stw	fp,4(r21)
    63e4:	d8c00017 	ldw	r3,0(sp)
    63e8:	d9000517 	ldw	r4,20(sp)
    63ec:	18c00104 	addi	r3,r3,4
    63f0:	d8c00015 	stw	r3,0(sp)
    63f4:	d8c00117 	ldw	r3,4(sp)
    63f8:	18c00104 	addi	r3,r3,4
    63fc:	d8c00115 	stw	r3,4(sp)
    6400:	d8c00017 	ldw	r3,0(sp)
    6404:	193fb136 	bltu	r3,r4,62cc <__alt_exception_stack_pointer+0xf80062cc>
    6408:	d8c00217 	ldw	r3,8(sp)
    640c:	00c00c0e 	bge	zero,r3,6440 <__multiply+0x24c>
    6410:	d8c00317 	ldw	r3,12(sp)
    6414:	18bfff17 	ldw	r2,-4(r3)
    6418:	1d7fff04 	addi	r21,r3,-4
    641c:	10000326 	beq	r2,zero,642c <__multiply+0x238>
    6420:	00000706 	br	6440 <__multiply+0x24c>
    6424:	a8800017 	ldw	r2,0(r21)
    6428:	1000051e 	bne	r2,zero,6440 <__multiply+0x24c>
    642c:	d8c00217 	ldw	r3,8(sp)
    6430:	ad7fff04 	addi	r21,r21,-4
    6434:	18ffffc4 	addi	r3,r3,-1
    6438:	d8c00215 	stw	r3,8(sp)
    643c:	183ff91e 	bne	r3,zero,6424 <__alt_exception_stack_pointer+0xf8006424>
    6440:	d8c00617 	ldw	r3,24(sp)
    6444:	d9000217 	ldw	r4,8(sp)
    6448:	1805883a 	mov	r2,r3
    644c:	19000415 	stw	r4,16(r3)
    6450:	dfc01017 	ldw	ra,64(sp)
    6454:	df000f17 	ldw	fp,60(sp)
    6458:	ddc00e17 	ldw	r23,56(sp)
    645c:	dd800d17 	ldw	r22,52(sp)
    6460:	dd400c17 	ldw	r21,48(sp)
    6464:	dd000b17 	ldw	r20,44(sp)
    6468:	dcc00a17 	ldw	r19,40(sp)
    646c:	dc800917 	ldw	r18,36(sp)
    6470:	dc400817 	ldw	r17,32(sp)
    6474:	dc000717 	ldw	r16,28(sp)
    6478:	dec01104 	addi	sp,sp,68
    647c:	f800283a 	ret

00006480 <__pow5mult>:
    6480:	defffa04 	addi	sp,sp,-24
    6484:	dcc00315 	stw	r19,12(sp)
    6488:	dc000015 	stw	r16,0(sp)
    648c:	dfc00515 	stw	ra,20(sp)
    6490:	dd000415 	stw	r20,16(sp)
    6494:	dc800215 	stw	r18,8(sp)
    6498:	dc400115 	stw	r17,4(sp)
    649c:	308000cc 	andi	r2,r6,3
    64a0:	3021883a 	mov	r16,r6
    64a4:	2027883a 	mov	r19,r4
    64a8:	10002f1e 	bne	r2,zero,6568 <__pow5mult+0xe8>
    64ac:	2825883a 	mov	r18,r5
    64b0:	8021d0ba 	srai	r16,r16,2
    64b4:	80001a26 	beq	r16,zero,6520 <__pow5mult+0xa0>
    64b8:	9c401217 	ldw	r17,72(r19)
    64bc:	8800061e 	bne	r17,zero,64d8 <__pow5mult+0x58>
    64c0:	00003406 	br	6594 <__pow5mult+0x114>
    64c4:	8021d07a 	srai	r16,r16,1
    64c8:	80001526 	beq	r16,zero,6520 <__pow5mult+0xa0>
    64cc:	88800017 	ldw	r2,0(r17)
    64d0:	10001c26 	beq	r2,zero,6544 <__pow5mult+0xc4>
    64d4:	1023883a 	mov	r17,r2
    64d8:	8080004c 	andi	r2,r16,1
    64dc:	103ff926 	beq	r2,zero,64c4 <__alt_exception_stack_pointer+0xf80064c4>
    64e0:	880d883a 	mov	r6,r17
    64e4:	900b883a 	mov	r5,r18
    64e8:	9809883a 	mov	r4,r19
    64ec:	00061f40 	call	61f4 <__multiply>
    64f0:	90001b26 	beq	r18,zero,6560 <__pow5mult+0xe0>
    64f4:	91000117 	ldw	r4,4(r18)
    64f8:	98c01317 	ldw	r3,76(r19)
    64fc:	8021d07a 	srai	r16,r16,1
    6500:	2109883a 	add	r4,r4,r4
    6504:	2109883a 	add	r4,r4,r4
    6508:	1907883a 	add	r3,r3,r4
    650c:	19000017 	ldw	r4,0(r3)
    6510:	91000015 	stw	r4,0(r18)
    6514:	1c800015 	stw	r18,0(r3)
    6518:	1025883a 	mov	r18,r2
    651c:	803feb1e 	bne	r16,zero,64cc <__alt_exception_stack_pointer+0xf80064cc>
    6520:	9005883a 	mov	r2,r18
    6524:	dfc00517 	ldw	ra,20(sp)
    6528:	dd000417 	ldw	r20,16(sp)
    652c:	dcc00317 	ldw	r19,12(sp)
    6530:	dc800217 	ldw	r18,8(sp)
    6534:	dc400117 	ldw	r17,4(sp)
    6538:	dc000017 	ldw	r16,0(sp)
    653c:	dec00604 	addi	sp,sp,24
    6540:	f800283a 	ret
    6544:	880d883a 	mov	r6,r17
    6548:	880b883a 	mov	r5,r17
    654c:	9809883a 	mov	r4,r19
    6550:	00061f40 	call	61f4 <__multiply>
    6554:	88800015 	stw	r2,0(r17)
    6558:	10000015 	stw	zero,0(r2)
    655c:	003fdd06 	br	64d4 <__alt_exception_stack_pointer+0xf80064d4>
    6560:	1025883a 	mov	r18,r2
    6564:	003fd706 	br	64c4 <__alt_exception_stack_pointer+0xf80064c4>
    6568:	10bfffc4 	addi	r2,r2,-1
    656c:	1085883a 	add	r2,r2,r2
    6570:	00c00074 	movhi	r3,1
    6574:	18fee704 	addi	r3,r3,-1124
    6578:	1085883a 	add	r2,r2,r2
    657c:	1885883a 	add	r2,r3,r2
    6580:	11800017 	ldw	r6,0(r2)
    6584:	000f883a 	mov	r7,zero
    6588:	0005e540 	call	5e54 <__multadd>
    658c:	1025883a 	mov	r18,r2
    6590:	003fc706 	br	64b0 <__alt_exception_stack_pointer+0xf80064b0>
    6594:	05000044 	movi	r20,1
    6598:	a00b883a 	mov	r5,r20
    659c:	9809883a 	mov	r4,r19
    65a0:	0005d840 	call	5d84 <_Balloc>
    65a4:	1023883a 	mov	r17,r2
    65a8:	00809c44 	movi	r2,625
    65ac:	88800515 	stw	r2,20(r17)
    65b0:	8d000415 	stw	r20,16(r17)
    65b4:	9c401215 	stw	r17,72(r19)
    65b8:	88000015 	stw	zero,0(r17)
    65bc:	003fc606 	br	64d8 <__alt_exception_stack_pointer+0xf80064d8>

000065c0 <__lshift>:
    65c0:	defff904 	addi	sp,sp,-28
    65c4:	dd400515 	stw	r21,20(sp)
    65c8:	dcc00315 	stw	r19,12(sp)
    65cc:	302bd17a 	srai	r21,r6,5
    65d0:	2cc00417 	ldw	r19,16(r5)
    65d4:	28800217 	ldw	r2,8(r5)
    65d8:	dd000415 	stw	r20,16(sp)
    65dc:	ace7883a 	add	r19,r21,r19
    65e0:	dc800215 	stw	r18,8(sp)
    65e4:	dc400115 	stw	r17,4(sp)
    65e8:	dc000015 	stw	r16,0(sp)
    65ec:	dfc00615 	stw	ra,24(sp)
    65f0:	9c000044 	addi	r16,r19,1
    65f4:	2823883a 	mov	r17,r5
    65f8:	3029883a 	mov	r20,r6
    65fc:	2025883a 	mov	r18,r4
    6600:	29400117 	ldw	r5,4(r5)
    6604:	1400030e 	bge	r2,r16,6614 <__lshift+0x54>
    6608:	1085883a 	add	r2,r2,r2
    660c:	29400044 	addi	r5,r5,1
    6610:	143ffd16 	blt	r2,r16,6608 <__alt_exception_stack_pointer+0xf8006608>
    6614:	9009883a 	mov	r4,r18
    6618:	0005d840 	call	5d84 <_Balloc>
    661c:	10c00504 	addi	r3,r2,20
    6620:	0540070e 	bge	zero,r21,6640 <__lshift+0x80>
    6624:	ad6b883a 	add	r21,r21,r21
    6628:	ad6b883a 	add	r21,r21,r21
    662c:	1809883a 	mov	r4,r3
    6630:	1d47883a 	add	r3,r3,r21
    6634:	20000015 	stw	zero,0(r4)
    6638:	21000104 	addi	r4,r4,4
    663c:	193ffd1e 	bne	r3,r4,6634 <__alt_exception_stack_pointer+0xf8006634>
    6640:	8a000417 	ldw	r8,16(r17)
    6644:	89000504 	addi	r4,r17,20
    6648:	a18007cc 	andi	r6,r20,31
    664c:	4211883a 	add	r8,r8,r8
    6650:	4211883a 	add	r8,r8,r8
    6654:	2211883a 	add	r8,r4,r8
    6658:	30002326 	beq	r6,zero,66e8 <__lshift+0x128>
    665c:	02400804 	movi	r9,32
    6660:	4993c83a 	sub	r9,r9,r6
    6664:	000b883a 	mov	r5,zero
    6668:	21c00017 	ldw	r7,0(r4)
    666c:	1815883a 	mov	r10,r3
    6670:	18c00104 	addi	r3,r3,4
    6674:	398e983a 	sll	r7,r7,r6
    6678:	21000104 	addi	r4,r4,4
    667c:	394ab03a 	or	r5,r7,r5
    6680:	197fff15 	stw	r5,-4(r3)
    6684:	217fff17 	ldw	r5,-4(r4)
    6688:	2a4ad83a 	srl	r5,r5,r9
    668c:	223ff636 	bltu	r4,r8,6668 <__alt_exception_stack_pointer+0xf8006668>
    6690:	51400115 	stw	r5,4(r10)
    6694:	28001a1e 	bne	r5,zero,6700 <__lshift+0x140>
    6698:	843fffc4 	addi	r16,r16,-1
    669c:	14000415 	stw	r16,16(r2)
    66a0:	88000826 	beq	r17,zero,66c4 <__lshift+0x104>
    66a4:	89000117 	ldw	r4,4(r17)
    66a8:	90c01317 	ldw	r3,76(r18)
    66ac:	2109883a 	add	r4,r4,r4
    66b0:	2109883a 	add	r4,r4,r4
    66b4:	1907883a 	add	r3,r3,r4
    66b8:	19000017 	ldw	r4,0(r3)
    66bc:	89000015 	stw	r4,0(r17)
    66c0:	1c400015 	stw	r17,0(r3)
    66c4:	dfc00617 	ldw	ra,24(sp)
    66c8:	dd400517 	ldw	r21,20(sp)
    66cc:	dd000417 	ldw	r20,16(sp)
    66d0:	dcc00317 	ldw	r19,12(sp)
    66d4:	dc800217 	ldw	r18,8(sp)
    66d8:	dc400117 	ldw	r17,4(sp)
    66dc:	dc000017 	ldw	r16,0(sp)
    66e0:	dec00704 	addi	sp,sp,28
    66e4:	f800283a 	ret
    66e8:	21400017 	ldw	r5,0(r4)
    66ec:	18c00104 	addi	r3,r3,4
    66f0:	21000104 	addi	r4,r4,4
    66f4:	197fff15 	stw	r5,-4(r3)
    66f8:	223ffb36 	bltu	r4,r8,66e8 <__alt_exception_stack_pointer+0xf80066e8>
    66fc:	003fe606 	br	6698 <__alt_exception_stack_pointer+0xf8006698>
    6700:	9c000084 	addi	r16,r19,2
    6704:	003fe406 	br	6698 <__alt_exception_stack_pointer+0xf8006698>

00006708 <__mcmp>:
    6708:	20800417 	ldw	r2,16(r4)
    670c:	28c00417 	ldw	r3,16(r5)
    6710:	10c5c83a 	sub	r2,r2,r3
    6714:	1000111e 	bne	r2,zero,675c <__mcmp+0x54>
    6718:	18c7883a 	add	r3,r3,r3
    671c:	18c7883a 	add	r3,r3,r3
    6720:	21000504 	addi	r4,r4,20
    6724:	29400504 	addi	r5,r5,20
    6728:	20c5883a 	add	r2,r4,r3
    672c:	28cb883a 	add	r5,r5,r3
    6730:	00000106 	br	6738 <__mcmp+0x30>
    6734:	20800a2e 	bgeu	r4,r2,6760 <__mcmp+0x58>
    6738:	10bfff04 	addi	r2,r2,-4
    673c:	297fff04 	addi	r5,r5,-4
    6740:	11800017 	ldw	r6,0(r2)
    6744:	28c00017 	ldw	r3,0(r5)
    6748:	30fffa26 	beq	r6,r3,6734 <__alt_exception_stack_pointer+0xf8006734>
    674c:	30c00236 	bltu	r6,r3,6758 <__mcmp+0x50>
    6750:	00800044 	movi	r2,1
    6754:	f800283a 	ret
    6758:	00bfffc4 	movi	r2,-1
    675c:	f800283a 	ret
    6760:	0005883a 	mov	r2,zero
    6764:	f800283a 	ret

00006768 <__mdiff>:
    6768:	28c00417 	ldw	r3,16(r5)
    676c:	30800417 	ldw	r2,16(r6)
    6770:	defffa04 	addi	sp,sp,-24
    6774:	dcc00315 	stw	r19,12(sp)
    6778:	dc800215 	stw	r18,8(sp)
    677c:	dfc00515 	stw	ra,20(sp)
    6780:	dd000415 	stw	r20,16(sp)
    6784:	dc400115 	stw	r17,4(sp)
    6788:	dc000015 	stw	r16,0(sp)
    678c:	1887c83a 	sub	r3,r3,r2
    6790:	2825883a 	mov	r18,r5
    6794:	3027883a 	mov	r19,r6
    6798:	1800141e 	bne	r3,zero,67ec <__mdiff+0x84>
    679c:	1085883a 	add	r2,r2,r2
    67a0:	1085883a 	add	r2,r2,r2
    67a4:	2a000504 	addi	r8,r5,20
    67a8:	34000504 	addi	r16,r6,20
    67ac:	4087883a 	add	r3,r8,r2
    67b0:	8085883a 	add	r2,r16,r2
    67b4:	00000106 	br	67bc <__mdiff+0x54>
    67b8:	40c0592e 	bgeu	r8,r3,6920 <__mdiff+0x1b8>
    67bc:	18ffff04 	addi	r3,r3,-4
    67c0:	10bfff04 	addi	r2,r2,-4
    67c4:	19c00017 	ldw	r7,0(r3)
    67c8:	11400017 	ldw	r5,0(r2)
    67cc:	397ffa26 	beq	r7,r5,67b8 <__alt_exception_stack_pointer+0xf80067b8>
    67d0:	3940592e 	bgeu	r7,r5,6938 <__mdiff+0x1d0>
    67d4:	9005883a 	mov	r2,r18
    67d8:	4023883a 	mov	r17,r8
    67dc:	9825883a 	mov	r18,r19
    67e0:	05000044 	movi	r20,1
    67e4:	1027883a 	mov	r19,r2
    67e8:	00000406 	br	67fc <__mdiff+0x94>
    67ec:	18005616 	blt	r3,zero,6948 <__mdiff+0x1e0>
    67f0:	34400504 	addi	r17,r6,20
    67f4:	2c000504 	addi	r16,r5,20
    67f8:	0029883a 	mov	r20,zero
    67fc:	91400117 	ldw	r5,4(r18)
    6800:	0005d840 	call	5d84 <_Balloc>
    6804:	92400417 	ldw	r9,16(r18)
    6808:	9b000417 	ldw	r12,16(r19)
    680c:	12c00504 	addi	r11,r2,20
    6810:	4a51883a 	add	r8,r9,r9
    6814:	6319883a 	add	r12,r12,r12
    6818:	4211883a 	add	r8,r8,r8
    681c:	6319883a 	add	r12,r12,r12
    6820:	15000315 	stw	r20,12(r2)
    6824:	8211883a 	add	r8,r16,r8
    6828:	8b19883a 	add	r12,r17,r12
    682c:	0007883a 	mov	r3,zero
    6830:	81400017 	ldw	r5,0(r16)
    6834:	89c00017 	ldw	r7,0(r17)
    6838:	59800104 	addi	r6,r11,4
    683c:	293fffcc 	andi	r4,r5,65535
    6840:	20c7883a 	add	r3,r4,r3
    6844:	393fffcc 	andi	r4,r7,65535
    6848:	1909c83a 	sub	r4,r3,r4
    684c:	280ad43a 	srli	r5,r5,16
    6850:	380ed43a 	srli	r7,r7,16
    6854:	2007d43a 	srai	r3,r4,16
    6858:	213fffcc 	andi	r4,r4,65535
    685c:	29cbc83a 	sub	r5,r5,r7
    6860:	28c7883a 	add	r3,r5,r3
    6864:	180a943a 	slli	r5,r3,16
    6868:	8c400104 	addi	r17,r17,4
    686c:	84000104 	addi	r16,r16,4
    6870:	2908b03a 	or	r4,r5,r4
    6874:	59000015 	stw	r4,0(r11)
    6878:	1807d43a 	srai	r3,r3,16
    687c:	3015883a 	mov	r10,r6
    6880:	3017883a 	mov	r11,r6
    6884:	8b3fea36 	bltu	r17,r12,6830 <__alt_exception_stack_pointer+0xf8006830>
    6888:	8200162e 	bgeu	r16,r8,68e4 <__mdiff+0x17c>
    688c:	8017883a 	mov	r11,r16
    6890:	59400017 	ldw	r5,0(r11)
    6894:	31800104 	addi	r6,r6,4
    6898:	5ac00104 	addi	r11,r11,4
    689c:	293fffcc 	andi	r4,r5,65535
    68a0:	20c7883a 	add	r3,r4,r3
    68a4:	280ed43a 	srli	r7,r5,16
    68a8:	180bd43a 	srai	r5,r3,16
    68ac:	193fffcc 	andi	r4,r3,65535
    68b0:	3947883a 	add	r3,r7,r5
    68b4:	180a943a 	slli	r5,r3,16
    68b8:	1807d43a 	srai	r3,r3,16
    68bc:	2908b03a 	or	r4,r5,r4
    68c0:	313fff15 	stw	r4,-4(r6)
    68c4:	5a3ff236 	bltu	r11,r8,6890 <__alt_exception_stack_pointer+0xf8006890>
    68c8:	0406303a 	nor	r3,zero,r16
    68cc:	1a07883a 	add	r3,r3,r8
    68d0:	1806d0ba 	srli	r3,r3,2
    68d4:	18c00044 	addi	r3,r3,1
    68d8:	18c7883a 	add	r3,r3,r3
    68dc:	18c7883a 	add	r3,r3,r3
    68e0:	50d5883a 	add	r10,r10,r3
    68e4:	50ffff04 	addi	r3,r10,-4
    68e8:	2000041e 	bne	r4,zero,68fc <__mdiff+0x194>
    68ec:	18ffff04 	addi	r3,r3,-4
    68f0:	19000017 	ldw	r4,0(r3)
    68f4:	4a7fffc4 	addi	r9,r9,-1
    68f8:	203ffc26 	beq	r4,zero,68ec <__alt_exception_stack_pointer+0xf80068ec>
    68fc:	12400415 	stw	r9,16(r2)
    6900:	dfc00517 	ldw	ra,20(sp)
    6904:	dd000417 	ldw	r20,16(sp)
    6908:	dcc00317 	ldw	r19,12(sp)
    690c:	dc800217 	ldw	r18,8(sp)
    6910:	dc400117 	ldw	r17,4(sp)
    6914:	dc000017 	ldw	r16,0(sp)
    6918:	dec00604 	addi	sp,sp,24
    691c:	f800283a 	ret
    6920:	000b883a 	mov	r5,zero
    6924:	0005d840 	call	5d84 <_Balloc>
    6928:	00c00044 	movi	r3,1
    692c:	10c00415 	stw	r3,16(r2)
    6930:	10000515 	stw	zero,20(r2)
    6934:	003ff206 	br	6900 <__alt_exception_stack_pointer+0xf8006900>
    6938:	8023883a 	mov	r17,r16
    693c:	0029883a 	mov	r20,zero
    6940:	4021883a 	mov	r16,r8
    6944:	003fad06 	br	67fc <__alt_exception_stack_pointer+0xf80067fc>
    6948:	9005883a 	mov	r2,r18
    694c:	94400504 	addi	r17,r18,20
    6950:	9c000504 	addi	r16,r19,20
    6954:	9825883a 	mov	r18,r19
    6958:	05000044 	movi	r20,1
    695c:	1027883a 	mov	r19,r2
    6960:	003fa606 	br	67fc <__alt_exception_stack_pointer+0xf80067fc>

00006964 <__ulp>:
    6964:	295ffc2c 	andhi	r5,r5,32752
    6968:	00bf3034 	movhi	r2,64704
    696c:	2887883a 	add	r3,r5,r2
    6970:	00c0020e 	bge	zero,r3,697c <__ulp+0x18>
    6974:	0005883a 	mov	r2,zero
    6978:	f800283a 	ret
    697c:	00c7c83a 	sub	r3,zero,r3
    6980:	1807d53a 	srai	r3,r3,20
    6984:	008004c4 	movi	r2,19
    6988:	10c00b0e 	bge	r2,r3,69b8 <__ulp+0x54>
    698c:	18bffb04 	addi	r2,r3,-20
    6990:	01000784 	movi	r4,30
    6994:	0007883a 	mov	r3,zero
    6998:	20800516 	blt	r4,r2,69b0 <__ulp+0x4c>
    699c:	010007c4 	movi	r4,31
    69a0:	2089c83a 	sub	r4,r4,r2
    69a4:	00800044 	movi	r2,1
    69a8:	1104983a 	sll	r2,r2,r4
    69ac:	f800283a 	ret
    69b0:	00800044 	movi	r2,1
    69b4:	f800283a 	ret
    69b8:	01400234 	movhi	r5,8
    69bc:	28c7d83a 	sra	r3,r5,r3
    69c0:	0005883a 	mov	r2,zero
    69c4:	f800283a 	ret

000069c8 <__b2d>:
    69c8:	defffa04 	addi	sp,sp,-24
    69cc:	dc000015 	stw	r16,0(sp)
    69d0:	24000417 	ldw	r16,16(r4)
    69d4:	dc400115 	stw	r17,4(sp)
    69d8:	24400504 	addi	r17,r4,20
    69dc:	8421883a 	add	r16,r16,r16
    69e0:	8421883a 	add	r16,r16,r16
    69e4:	8c21883a 	add	r16,r17,r16
    69e8:	dc800215 	stw	r18,8(sp)
    69ec:	84bfff17 	ldw	r18,-4(r16)
    69f0:	dd000415 	stw	r20,16(sp)
    69f4:	dcc00315 	stw	r19,12(sp)
    69f8:	9009883a 	mov	r4,r18
    69fc:	2829883a 	mov	r20,r5
    6a00:	dfc00515 	stw	ra,20(sp)
    6a04:	00060a00 	call	60a0 <__hi0bits>
    6a08:	00c00804 	movi	r3,32
    6a0c:	1889c83a 	sub	r4,r3,r2
    6a10:	a1000015 	stw	r4,0(r20)
    6a14:	01000284 	movi	r4,10
    6a18:	84ffff04 	addi	r19,r16,-4
    6a1c:	20801216 	blt	r4,r2,6a68 <__b2d+0xa0>
    6a20:	018002c4 	movi	r6,11
    6a24:	308dc83a 	sub	r6,r6,r2
    6a28:	9186d83a 	srl	r3,r18,r6
    6a2c:	18cffc34 	orhi	r3,r3,16368
    6a30:	8cc0212e 	bgeu	r17,r19,6ab8 <__b2d+0xf0>
    6a34:	813ffe17 	ldw	r4,-8(r16)
    6a38:	218cd83a 	srl	r6,r4,r6
    6a3c:	10800544 	addi	r2,r2,21
    6a40:	9084983a 	sll	r2,r18,r2
    6a44:	1184b03a 	or	r2,r2,r6
    6a48:	dfc00517 	ldw	ra,20(sp)
    6a4c:	dd000417 	ldw	r20,16(sp)
    6a50:	dcc00317 	ldw	r19,12(sp)
    6a54:	dc800217 	ldw	r18,8(sp)
    6a58:	dc400117 	ldw	r17,4(sp)
    6a5c:	dc000017 	ldw	r16,0(sp)
    6a60:	dec00604 	addi	sp,sp,24
    6a64:	f800283a 	ret
    6a68:	8cc00f2e 	bgeu	r17,r19,6aa8 <__b2d+0xe0>
    6a6c:	117ffd44 	addi	r5,r2,-11
    6a70:	80bffe17 	ldw	r2,-8(r16)
    6a74:	28000e26 	beq	r5,zero,6ab0 <__b2d+0xe8>
    6a78:	1949c83a 	sub	r4,r3,r5
    6a7c:	9164983a 	sll	r18,r18,r5
    6a80:	1106d83a 	srl	r3,r2,r4
    6a84:	81bffe04 	addi	r6,r16,-8
    6a88:	948ffc34 	orhi	r18,r18,16368
    6a8c:	90c6b03a 	or	r3,r18,r3
    6a90:	89800e2e 	bgeu	r17,r6,6acc <__b2d+0x104>
    6a94:	81bffd17 	ldw	r6,-12(r16)
    6a98:	1144983a 	sll	r2,r2,r5
    6a9c:	310ad83a 	srl	r5,r6,r4
    6aa0:	2884b03a 	or	r2,r5,r2
    6aa4:	003fe806 	br	6a48 <__alt_exception_stack_pointer+0xf8006a48>
    6aa8:	10bffd44 	addi	r2,r2,-11
    6aac:	1000041e 	bne	r2,zero,6ac0 <__b2d+0xf8>
    6ab0:	90cffc34 	orhi	r3,r18,16368
    6ab4:	003fe406 	br	6a48 <__alt_exception_stack_pointer+0xf8006a48>
    6ab8:	000d883a 	mov	r6,zero
    6abc:	003fdf06 	br	6a3c <__alt_exception_stack_pointer+0xf8006a3c>
    6ac0:	90a4983a 	sll	r18,r18,r2
    6ac4:	0005883a 	mov	r2,zero
    6ac8:	003ff906 	br	6ab0 <__alt_exception_stack_pointer+0xf8006ab0>
    6acc:	1144983a 	sll	r2,r2,r5
    6ad0:	003fdd06 	br	6a48 <__alt_exception_stack_pointer+0xf8006a48>

00006ad4 <__d2b>:
    6ad4:	defff804 	addi	sp,sp,-32
    6ad8:	dc000215 	stw	r16,8(sp)
    6adc:	3021883a 	mov	r16,r6
    6ae0:	dc400315 	stw	r17,12(sp)
    6ae4:	8022907a 	slli	r17,r16,1
    6ae8:	dd000615 	stw	r20,24(sp)
    6aec:	2829883a 	mov	r20,r5
    6af0:	01400044 	movi	r5,1
    6af4:	dcc00515 	stw	r19,20(sp)
    6af8:	dc800415 	stw	r18,16(sp)
    6afc:	dfc00715 	stw	ra,28(sp)
    6b00:	3825883a 	mov	r18,r7
    6b04:	8822d57a 	srli	r17,r17,21
    6b08:	0005d840 	call	5d84 <_Balloc>
    6b0c:	1027883a 	mov	r19,r2
    6b10:	00800434 	movhi	r2,16
    6b14:	10bfffc4 	addi	r2,r2,-1
    6b18:	808c703a 	and	r6,r16,r2
    6b1c:	88000126 	beq	r17,zero,6b24 <__d2b+0x50>
    6b20:	31800434 	orhi	r6,r6,16
    6b24:	d9800015 	stw	r6,0(sp)
    6b28:	a0002426 	beq	r20,zero,6bbc <__d2b+0xe8>
    6b2c:	d9000104 	addi	r4,sp,4
    6b30:	dd000115 	stw	r20,4(sp)
    6b34:	00061080 	call	6108 <__lo0bits>
    6b38:	d8c00017 	ldw	r3,0(sp)
    6b3c:	10002f1e 	bne	r2,zero,6bfc <__d2b+0x128>
    6b40:	d9000117 	ldw	r4,4(sp)
    6b44:	99000515 	stw	r4,20(r19)
    6b48:	1821003a 	cmpeq	r16,r3,zero
    6b4c:	01000084 	movi	r4,2
    6b50:	2421c83a 	sub	r16,r4,r16
    6b54:	98c00615 	stw	r3,24(r19)
    6b58:	9c000415 	stw	r16,16(r19)
    6b5c:	88001f1e 	bne	r17,zero,6bdc <__d2b+0x108>
    6b60:	10bef384 	addi	r2,r2,-1074
    6b64:	90800015 	stw	r2,0(r18)
    6b68:	00900034 	movhi	r2,16384
    6b6c:	10bfffc4 	addi	r2,r2,-1
    6b70:	8085883a 	add	r2,r16,r2
    6b74:	1085883a 	add	r2,r2,r2
    6b78:	1085883a 	add	r2,r2,r2
    6b7c:	9885883a 	add	r2,r19,r2
    6b80:	11000517 	ldw	r4,20(r2)
    6b84:	8020917a 	slli	r16,r16,5
    6b88:	00060a00 	call	60a0 <__hi0bits>
    6b8c:	d8c00817 	ldw	r3,32(sp)
    6b90:	8085c83a 	sub	r2,r16,r2
    6b94:	18800015 	stw	r2,0(r3)
    6b98:	9805883a 	mov	r2,r19
    6b9c:	dfc00717 	ldw	ra,28(sp)
    6ba0:	dd000617 	ldw	r20,24(sp)
    6ba4:	dcc00517 	ldw	r19,20(sp)
    6ba8:	dc800417 	ldw	r18,16(sp)
    6bac:	dc400317 	ldw	r17,12(sp)
    6bb0:	dc000217 	ldw	r16,8(sp)
    6bb4:	dec00804 	addi	sp,sp,32
    6bb8:	f800283a 	ret
    6bbc:	d809883a 	mov	r4,sp
    6bc0:	00061080 	call	6108 <__lo0bits>
    6bc4:	d8c00017 	ldw	r3,0(sp)
    6bc8:	04000044 	movi	r16,1
    6bcc:	9c000415 	stw	r16,16(r19)
    6bd0:	98c00515 	stw	r3,20(r19)
    6bd4:	10800804 	addi	r2,r2,32
    6bd8:	883fe126 	beq	r17,zero,6b60 <__alt_exception_stack_pointer+0xf8006b60>
    6bdc:	00c00d44 	movi	r3,53
    6be0:	8c7ef344 	addi	r17,r17,-1075
    6be4:	88a3883a 	add	r17,r17,r2
    6be8:	1885c83a 	sub	r2,r3,r2
    6bec:	d8c00817 	ldw	r3,32(sp)
    6bf0:	94400015 	stw	r17,0(r18)
    6bf4:	18800015 	stw	r2,0(r3)
    6bf8:	003fe706 	br	6b98 <__alt_exception_stack_pointer+0xf8006b98>
    6bfc:	01000804 	movi	r4,32
    6c00:	2089c83a 	sub	r4,r4,r2
    6c04:	1908983a 	sll	r4,r3,r4
    6c08:	d9400117 	ldw	r5,4(sp)
    6c0c:	1886d83a 	srl	r3,r3,r2
    6c10:	2148b03a 	or	r4,r4,r5
    6c14:	99000515 	stw	r4,20(r19)
    6c18:	d8c00015 	stw	r3,0(sp)
    6c1c:	003fca06 	br	6b48 <__alt_exception_stack_pointer+0xf8006b48>

00006c20 <__ratio>:
    6c20:	defff904 	addi	sp,sp,-28
    6c24:	dc400315 	stw	r17,12(sp)
    6c28:	2823883a 	mov	r17,r5
    6c2c:	d9400104 	addi	r5,sp,4
    6c30:	dfc00615 	stw	ra,24(sp)
    6c34:	dcc00515 	stw	r19,20(sp)
    6c38:	dc800415 	stw	r18,16(sp)
    6c3c:	2027883a 	mov	r19,r4
    6c40:	dc000215 	stw	r16,8(sp)
    6c44:	00069c80 	call	69c8 <__b2d>
    6c48:	d80b883a 	mov	r5,sp
    6c4c:	8809883a 	mov	r4,r17
    6c50:	1025883a 	mov	r18,r2
    6c54:	1821883a 	mov	r16,r3
    6c58:	00069c80 	call	69c8 <__b2d>
    6c5c:	8a000417 	ldw	r8,16(r17)
    6c60:	99000417 	ldw	r4,16(r19)
    6c64:	d9400117 	ldw	r5,4(sp)
    6c68:	2209c83a 	sub	r4,r4,r8
    6c6c:	2010917a 	slli	r8,r4,5
    6c70:	d9000017 	ldw	r4,0(sp)
    6c74:	2909c83a 	sub	r4,r5,r4
    6c78:	4109883a 	add	r4,r8,r4
    6c7c:	01000e0e 	bge	zero,r4,6cb8 <__ratio+0x98>
    6c80:	2008953a 	slli	r4,r4,20
    6c84:	2421883a 	add	r16,r4,r16
    6c88:	100d883a 	mov	r6,r2
    6c8c:	180f883a 	mov	r7,r3
    6c90:	9009883a 	mov	r4,r18
    6c94:	800b883a 	mov	r5,r16
    6c98:	000b3740 	call	b374 <__divdf3>
    6c9c:	dfc00617 	ldw	ra,24(sp)
    6ca0:	dcc00517 	ldw	r19,20(sp)
    6ca4:	dc800417 	ldw	r18,16(sp)
    6ca8:	dc400317 	ldw	r17,12(sp)
    6cac:	dc000217 	ldw	r16,8(sp)
    6cb0:	dec00704 	addi	sp,sp,28
    6cb4:	f800283a 	ret
    6cb8:	2008953a 	slli	r4,r4,20
    6cbc:	1907c83a 	sub	r3,r3,r4
    6cc0:	003ff106 	br	6c88 <__alt_exception_stack_pointer+0xf8006c88>

00006cc4 <_mprec_log10>:
    6cc4:	defffe04 	addi	sp,sp,-8
    6cc8:	dc000015 	stw	r16,0(sp)
    6ccc:	dfc00115 	stw	ra,4(sp)
    6cd0:	008005c4 	movi	r2,23
    6cd4:	2021883a 	mov	r16,r4
    6cd8:	11000d0e 	bge	r2,r4,6d10 <_mprec_log10+0x4c>
    6cdc:	0005883a 	mov	r2,zero
    6ce0:	00cffc34 	movhi	r3,16368
    6ce4:	843fffc4 	addi	r16,r16,-1
    6ce8:	000d883a 	mov	r6,zero
    6cec:	01d00934 	movhi	r7,16420
    6cf0:	1009883a 	mov	r4,r2
    6cf4:	180b883a 	mov	r5,r3
    6cf8:	000bf9c0 	call	bf9c <__muldf3>
    6cfc:	803ff91e 	bne	r16,zero,6ce4 <__alt_exception_stack_pointer+0xf8006ce4>
    6d00:	dfc00117 	ldw	ra,4(sp)
    6d04:	dc000017 	ldw	r16,0(sp)
    6d08:	dec00204 	addi	sp,sp,8
    6d0c:	f800283a 	ret
    6d10:	202090fa 	slli	r16,r4,3
    6d14:	00800074 	movhi	r2,1
    6d18:	10befe04 	addi	r2,r2,-1032
    6d1c:	1421883a 	add	r16,r2,r16
    6d20:	80800017 	ldw	r2,0(r16)
    6d24:	80c00117 	ldw	r3,4(r16)
    6d28:	dfc00117 	ldw	ra,4(sp)
    6d2c:	dc000017 	ldw	r16,0(sp)
    6d30:	dec00204 	addi	sp,sp,8
    6d34:	f800283a 	ret

00006d38 <__copybits>:
    6d38:	297fffc4 	addi	r5,r5,-1
    6d3c:	280fd17a 	srai	r7,r5,5
    6d40:	30c00417 	ldw	r3,16(r6)
    6d44:	30800504 	addi	r2,r6,20
    6d48:	39c00044 	addi	r7,r7,1
    6d4c:	18c7883a 	add	r3,r3,r3
    6d50:	39cf883a 	add	r7,r7,r7
    6d54:	18c7883a 	add	r3,r3,r3
    6d58:	39cf883a 	add	r7,r7,r7
    6d5c:	10c7883a 	add	r3,r2,r3
    6d60:	21cf883a 	add	r7,r4,r7
    6d64:	10c00d2e 	bgeu	r2,r3,6d9c <__copybits+0x64>
    6d68:	200b883a 	mov	r5,r4
    6d6c:	12000017 	ldw	r8,0(r2)
    6d70:	29400104 	addi	r5,r5,4
    6d74:	10800104 	addi	r2,r2,4
    6d78:	2a3fff15 	stw	r8,-4(r5)
    6d7c:	10fffb36 	bltu	r2,r3,6d6c <__alt_exception_stack_pointer+0xf8006d6c>
    6d80:	1985c83a 	sub	r2,r3,r6
    6d84:	10bffac4 	addi	r2,r2,-21
    6d88:	1004d0ba 	srli	r2,r2,2
    6d8c:	10800044 	addi	r2,r2,1
    6d90:	1085883a 	add	r2,r2,r2
    6d94:	1085883a 	add	r2,r2,r2
    6d98:	2089883a 	add	r4,r4,r2
    6d9c:	21c0032e 	bgeu	r4,r7,6dac <__copybits+0x74>
    6da0:	20000015 	stw	zero,0(r4)
    6da4:	21000104 	addi	r4,r4,4
    6da8:	21fffd36 	bltu	r4,r7,6da0 <__alt_exception_stack_pointer+0xf8006da0>
    6dac:	f800283a 	ret

00006db0 <__any_on>:
    6db0:	20c00417 	ldw	r3,16(r4)
    6db4:	2805d17a 	srai	r2,r5,5
    6db8:	21000504 	addi	r4,r4,20
    6dbc:	18800d0e 	bge	r3,r2,6df4 <__any_on+0x44>
    6dc0:	18c7883a 	add	r3,r3,r3
    6dc4:	18c7883a 	add	r3,r3,r3
    6dc8:	20c7883a 	add	r3,r4,r3
    6dcc:	20c0192e 	bgeu	r4,r3,6e34 <__any_on+0x84>
    6dd0:	18bfff17 	ldw	r2,-4(r3)
    6dd4:	18ffff04 	addi	r3,r3,-4
    6dd8:	1000041e 	bne	r2,zero,6dec <__any_on+0x3c>
    6ddc:	20c0142e 	bgeu	r4,r3,6e30 <__any_on+0x80>
    6de0:	18ffff04 	addi	r3,r3,-4
    6de4:	19400017 	ldw	r5,0(r3)
    6de8:	283ffc26 	beq	r5,zero,6ddc <__alt_exception_stack_pointer+0xf8006ddc>
    6dec:	00800044 	movi	r2,1
    6df0:	f800283a 	ret
    6df4:	10c00a0e 	bge	r2,r3,6e20 <__any_on+0x70>
    6df8:	1085883a 	add	r2,r2,r2
    6dfc:	1085883a 	add	r2,r2,r2
    6e00:	294007cc 	andi	r5,r5,31
    6e04:	2087883a 	add	r3,r4,r2
    6e08:	283ff026 	beq	r5,zero,6dcc <__alt_exception_stack_pointer+0xf8006dcc>
    6e0c:	19800017 	ldw	r6,0(r3)
    6e10:	3144d83a 	srl	r2,r6,r5
    6e14:	114a983a 	sll	r5,r2,r5
    6e18:	317ff41e 	bne	r6,r5,6dec <__alt_exception_stack_pointer+0xf8006dec>
    6e1c:	003feb06 	br	6dcc <__alt_exception_stack_pointer+0xf8006dcc>
    6e20:	1085883a 	add	r2,r2,r2
    6e24:	1085883a 	add	r2,r2,r2
    6e28:	2087883a 	add	r3,r4,r2
    6e2c:	003fe706 	br	6dcc <__alt_exception_stack_pointer+0xf8006dcc>
    6e30:	f800283a 	ret
    6e34:	0005883a 	mov	r2,zero
    6e38:	f800283a 	ret

00006e3c <__fpclassifyd>:
    6e3c:	00a00034 	movhi	r2,32768
    6e40:	10bfffc4 	addi	r2,r2,-1
    6e44:	2884703a 	and	r2,r5,r2
    6e48:	10000726 	beq	r2,zero,6e68 <__fpclassifyd+0x2c>
    6e4c:	00fffc34 	movhi	r3,65520
    6e50:	019ff834 	movhi	r6,32736
    6e54:	28c7883a 	add	r3,r5,r3
    6e58:	31bfffc4 	addi	r6,r6,-1
    6e5c:	30c00536 	bltu	r6,r3,6e74 <__fpclassifyd+0x38>
    6e60:	00800104 	movi	r2,4
    6e64:	f800283a 	ret
    6e68:	2000021e 	bne	r4,zero,6e74 <__fpclassifyd+0x38>
    6e6c:	00800084 	movi	r2,2
    6e70:	f800283a 	ret
    6e74:	00dffc34 	movhi	r3,32752
    6e78:	019ff834 	movhi	r6,32736
    6e7c:	28cb883a 	add	r5,r5,r3
    6e80:	31bfffc4 	addi	r6,r6,-1
    6e84:	317ff62e 	bgeu	r6,r5,6e60 <__alt_exception_stack_pointer+0xf8006e60>
    6e88:	01400434 	movhi	r5,16
    6e8c:	297fffc4 	addi	r5,r5,-1
    6e90:	28800236 	bltu	r5,r2,6e9c <__fpclassifyd+0x60>
    6e94:	008000c4 	movi	r2,3
    6e98:	f800283a 	ret
    6e9c:	10c00226 	beq	r2,r3,6ea8 <__fpclassifyd+0x6c>
    6ea0:	0005883a 	mov	r2,zero
    6ea4:	f800283a 	ret
    6ea8:	2005003a 	cmpeq	r2,r4,zero
    6eac:	f800283a 	ret

00006eb0 <__sread>:
    6eb0:	defffe04 	addi	sp,sp,-8
    6eb4:	dc000015 	stw	r16,0(sp)
    6eb8:	2821883a 	mov	r16,r5
    6ebc:	2940038f 	ldh	r5,14(r5)
    6ec0:	dfc00115 	stw	ra,4(sp)
    6ec4:	00094280 	call	9428 <_read_r>
    6ec8:	10000716 	blt	r2,zero,6ee8 <__sread+0x38>
    6ecc:	80c01417 	ldw	r3,80(r16)
    6ed0:	1887883a 	add	r3,r3,r2
    6ed4:	80c01415 	stw	r3,80(r16)
    6ed8:	dfc00117 	ldw	ra,4(sp)
    6edc:	dc000017 	ldw	r16,0(sp)
    6ee0:	dec00204 	addi	sp,sp,8
    6ee4:	f800283a 	ret
    6ee8:	80c0030b 	ldhu	r3,12(r16)
    6eec:	18fbffcc 	andi	r3,r3,61439
    6ef0:	80c0030d 	sth	r3,12(r16)
    6ef4:	dfc00117 	ldw	ra,4(sp)
    6ef8:	dc000017 	ldw	r16,0(sp)
    6efc:	dec00204 	addi	sp,sp,8
    6f00:	f800283a 	ret

00006f04 <__seofread>:
    6f04:	0005883a 	mov	r2,zero
    6f08:	f800283a 	ret

00006f0c <__swrite>:
    6f0c:	2880030b 	ldhu	r2,12(r5)
    6f10:	defffb04 	addi	sp,sp,-20
    6f14:	dcc00315 	stw	r19,12(sp)
    6f18:	dc800215 	stw	r18,8(sp)
    6f1c:	dc400115 	stw	r17,4(sp)
    6f20:	dc000015 	stw	r16,0(sp)
    6f24:	dfc00415 	stw	ra,16(sp)
    6f28:	10c0400c 	andi	r3,r2,256
    6f2c:	2821883a 	mov	r16,r5
    6f30:	2023883a 	mov	r17,r4
    6f34:	3025883a 	mov	r18,r6
    6f38:	3827883a 	mov	r19,r7
    6f3c:	18000526 	beq	r3,zero,6f54 <__swrite+0x48>
    6f40:	2940038f 	ldh	r5,14(r5)
    6f44:	01c00084 	movi	r7,2
    6f48:	000d883a 	mov	r6,zero
    6f4c:	000926c0 	call	926c <_lseek_r>
    6f50:	8080030b 	ldhu	r2,12(r16)
    6f54:	8140038f 	ldh	r5,14(r16)
    6f58:	10bbffcc 	andi	r2,r2,61439
    6f5c:	980f883a 	mov	r7,r19
    6f60:	900d883a 	mov	r6,r18
    6f64:	8809883a 	mov	r4,r17
    6f68:	8080030d 	sth	r2,12(r16)
    6f6c:	dfc00417 	ldw	ra,16(sp)
    6f70:	dcc00317 	ldw	r19,12(sp)
    6f74:	dc800217 	ldw	r18,8(sp)
    6f78:	dc400117 	ldw	r17,4(sp)
    6f7c:	dc000017 	ldw	r16,0(sp)
    6f80:	dec00504 	addi	sp,sp,20
    6f84:	00088581 	jmpi	8858 <_write_r>

00006f88 <__sseek>:
    6f88:	defffe04 	addi	sp,sp,-8
    6f8c:	dc000015 	stw	r16,0(sp)
    6f90:	2821883a 	mov	r16,r5
    6f94:	2940038f 	ldh	r5,14(r5)
    6f98:	dfc00115 	stw	ra,4(sp)
    6f9c:	000926c0 	call	926c <_lseek_r>
    6fa0:	00ffffc4 	movi	r3,-1
    6fa4:	10c00826 	beq	r2,r3,6fc8 <__sseek+0x40>
    6fa8:	80c0030b 	ldhu	r3,12(r16)
    6fac:	80801415 	stw	r2,80(r16)
    6fb0:	18c40014 	ori	r3,r3,4096
    6fb4:	80c0030d 	sth	r3,12(r16)
    6fb8:	dfc00117 	ldw	ra,4(sp)
    6fbc:	dc000017 	ldw	r16,0(sp)
    6fc0:	dec00204 	addi	sp,sp,8
    6fc4:	f800283a 	ret
    6fc8:	80c0030b 	ldhu	r3,12(r16)
    6fcc:	18fbffcc 	andi	r3,r3,61439
    6fd0:	80c0030d 	sth	r3,12(r16)
    6fd4:	dfc00117 	ldw	ra,4(sp)
    6fd8:	dc000017 	ldw	r16,0(sp)
    6fdc:	dec00204 	addi	sp,sp,8
    6fe0:	f800283a 	ret

00006fe4 <__sclose>:
    6fe4:	2940038f 	ldh	r5,14(r5)
    6fe8:	00088b81 	jmpi	88b8 <_close_r>

00006fec <strcmp>:
    6fec:	2144b03a 	or	r2,r4,r5
    6ff0:	108000cc 	andi	r2,r2,3
    6ff4:	1000171e 	bne	r2,zero,7054 <strcmp+0x68>
    6ff8:	20800017 	ldw	r2,0(r4)
    6ffc:	28c00017 	ldw	r3,0(r5)
    7000:	10c0141e 	bne	r2,r3,7054 <strcmp+0x68>
    7004:	027fbff4 	movhi	r9,65279
    7008:	4a7fbfc4 	addi	r9,r9,-257
    700c:	0086303a 	nor	r3,zero,r2
    7010:	02202074 	movhi	r8,32897
    7014:	1245883a 	add	r2,r2,r9
    7018:	42202004 	addi	r8,r8,-32640
    701c:	10c4703a 	and	r2,r2,r3
    7020:	1204703a 	and	r2,r2,r8
    7024:	10000226 	beq	r2,zero,7030 <strcmp+0x44>
    7028:	00002306 	br	70b8 <strcmp+0xcc>
    702c:	1000221e 	bne	r2,zero,70b8 <strcmp+0xcc>
    7030:	21000104 	addi	r4,r4,4
    7034:	20c00017 	ldw	r3,0(r4)
    7038:	29400104 	addi	r5,r5,4
    703c:	29800017 	ldw	r6,0(r5)
    7040:	1a4f883a 	add	r7,r3,r9
    7044:	00c4303a 	nor	r2,zero,r3
    7048:	3884703a 	and	r2,r7,r2
    704c:	1204703a 	and	r2,r2,r8
    7050:	19bff626 	beq	r3,r6,702c <__alt_exception_stack_pointer+0xf800702c>
    7054:	20800003 	ldbu	r2,0(r4)
    7058:	10c03fcc 	andi	r3,r2,255
    705c:	18c0201c 	xori	r3,r3,128
    7060:	18ffe004 	addi	r3,r3,-128
    7064:	18000c26 	beq	r3,zero,7098 <strcmp+0xac>
    7068:	29800007 	ldb	r6,0(r5)
    706c:	19800326 	beq	r3,r6,707c <strcmp+0x90>
    7070:	00001306 	br	70c0 <strcmp+0xd4>
    7074:	29800007 	ldb	r6,0(r5)
    7078:	11800b1e 	bne	r2,r6,70a8 <strcmp+0xbc>
    707c:	21000044 	addi	r4,r4,1
    7080:	20c00003 	ldbu	r3,0(r4)
    7084:	29400044 	addi	r5,r5,1
    7088:	18803fcc 	andi	r2,r3,255
    708c:	1080201c 	xori	r2,r2,128
    7090:	10bfe004 	addi	r2,r2,-128
    7094:	103ff71e 	bne	r2,zero,7074 <__alt_exception_stack_pointer+0xf8007074>
    7098:	0007883a 	mov	r3,zero
    709c:	28800003 	ldbu	r2,0(r5)
    70a0:	1885c83a 	sub	r2,r3,r2
    70a4:	f800283a 	ret
    70a8:	28800003 	ldbu	r2,0(r5)
    70ac:	18c03fcc 	andi	r3,r3,255
    70b0:	1885c83a 	sub	r2,r3,r2
    70b4:	f800283a 	ret
    70b8:	0005883a 	mov	r2,zero
    70bc:	f800283a 	ret
    70c0:	10c03fcc 	andi	r3,r2,255
    70c4:	003ff506 	br	709c <__alt_exception_stack_pointer+0xf800709c>

000070c8 <strlen>:
    70c8:	208000cc 	andi	r2,r4,3
    70cc:	10002026 	beq	r2,zero,7150 <strlen+0x88>
    70d0:	20800007 	ldb	r2,0(r4)
    70d4:	10002026 	beq	r2,zero,7158 <strlen+0x90>
    70d8:	2005883a 	mov	r2,r4
    70dc:	00000206 	br	70e8 <strlen+0x20>
    70e0:	10c00007 	ldb	r3,0(r2)
    70e4:	18001826 	beq	r3,zero,7148 <strlen+0x80>
    70e8:	10800044 	addi	r2,r2,1
    70ec:	10c000cc 	andi	r3,r2,3
    70f0:	183ffb1e 	bne	r3,zero,70e0 <__alt_exception_stack_pointer+0xf80070e0>
    70f4:	10c00017 	ldw	r3,0(r2)
    70f8:	01ffbff4 	movhi	r7,65279
    70fc:	39ffbfc4 	addi	r7,r7,-257
    7100:	00ca303a 	nor	r5,zero,r3
    7104:	01a02074 	movhi	r6,32897
    7108:	19c7883a 	add	r3,r3,r7
    710c:	31a02004 	addi	r6,r6,-32640
    7110:	1946703a 	and	r3,r3,r5
    7114:	1986703a 	and	r3,r3,r6
    7118:	1800091e 	bne	r3,zero,7140 <strlen+0x78>
    711c:	10800104 	addi	r2,r2,4
    7120:	10c00017 	ldw	r3,0(r2)
    7124:	19cb883a 	add	r5,r3,r7
    7128:	00c6303a 	nor	r3,zero,r3
    712c:	28c6703a 	and	r3,r5,r3
    7130:	1986703a 	and	r3,r3,r6
    7134:	183ff926 	beq	r3,zero,711c <__alt_exception_stack_pointer+0xf800711c>
    7138:	00000106 	br	7140 <strlen+0x78>
    713c:	10800044 	addi	r2,r2,1
    7140:	10c00007 	ldb	r3,0(r2)
    7144:	183ffd1e 	bne	r3,zero,713c <__alt_exception_stack_pointer+0xf800713c>
    7148:	1105c83a 	sub	r2,r2,r4
    714c:	f800283a 	ret
    7150:	2005883a 	mov	r2,r4
    7154:	003fe706 	br	70f4 <__alt_exception_stack_pointer+0xf80070f4>
    7158:	0005883a 	mov	r2,zero
    715c:	f800283a 	ret

00007160 <__sprint_r.part.0>:
    7160:	28801917 	ldw	r2,100(r5)
    7164:	defff604 	addi	sp,sp,-40
    7168:	dd400515 	stw	r21,20(sp)
    716c:	dfc00915 	stw	ra,36(sp)
    7170:	df000815 	stw	fp,32(sp)
    7174:	ddc00715 	stw	r23,28(sp)
    7178:	dd800615 	stw	r22,24(sp)
    717c:	dd000415 	stw	r20,16(sp)
    7180:	dcc00315 	stw	r19,12(sp)
    7184:	dc800215 	stw	r18,8(sp)
    7188:	dc400115 	stw	r17,4(sp)
    718c:	dc000015 	stw	r16,0(sp)
    7190:	1088000c 	andi	r2,r2,8192
    7194:	302b883a 	mov	r21,r6
    7198:	10002e26 	beq	r2,zero,7254 <__sprint_r.part.0+0xf4>
    719c:	30800217 	ldw	r2,8(r6)
    71a0:	35800017 	ldw	r22,0(r6)
    71a4:	10002926 	beq	r2,zero,724c <__sprint_r.part.0+0xec>
    71a8:	2827883a 	mov	r19,r5
    71ac:	2029883a 	mov	r20,r4
    71b0:	b5c00104 	addi	r23,r22,4
    71b4:	04bfffc4 	movi	r18,-1
    71b8:	bc400017 	ldw	r17,0(r23)
    71bc:	b4000017 	ldw	r16,0(r22)
    71c0:	0039883a 	mov	fp,zero
    71c4:	8822d0ba 	srli	r17,r17,2
    71c8:	8800031e 	bne	r17,zero,71d8 <__sprint_r.part.0+0x78>
    71cc:	00001806 	br	7230 <__sprint_r.part.0+0xd0>
    71d0:	84000104 	addi	r16,r16,4
    71d4:	8f001526 	beq	r17,fp,722c <__sprint_r.part.0+0xcc>
    71d8:	81400017 	ldw	r5,0(r16)
    71dc:	980d883a 	mov	r6,r19
    71e0:	a009883a 	mov	r4,r20
    71e4:	0008c500 	call	8c50 <_fputwc_r>
    71e8:	e7000044 	addi	fp,fp,1
    71ec:	14bff81e 	bne	r2,r18,71d0 <__alt_exception_stack_pointer+0xf80071d0>
    71f0:	9005883a 	mov	r2,r18
    71f4:	a8000215 	stw	zero,8(r21)
    71f8:	a8000115 	stw	zero,4(r21)
    71fc:	dfc00917 	ldw	ra,36(sp)
    7200:	df000817 	ldw	fp,32(sp)
    7204:	ddc00717 	ldw	r23,28(sp)
    7208:	dd800617 	ldw	r22,24(sp)
    720c:	dd400517 	ldw	r21,20(sp)
    7210:	dd000417 	ldw	r20,16(sp)
    7214:	dcc00317 	ldw	r19,12(sp)
    7218:	dc800217 	ldw	r18,8(sp)
    721c:	dc400117 	ldw	r17,4(sp)
    7220:	dc000017 	ldw	r16,0(sp)
    7224:	dec00a04 	addi	sp,sp,40
    7228:	f800283a 	ret
    722c:	a8800217 	ldw	r2,8(r21)
    7230:	8c63883a 	add	r17,r17,r17
    7234:	8c63883a 	add	r17,r17,r17
    7238:	1445c83a 	sub	r2,r2,r17
    723c:	a8800215 	stw	r2,8(r21)
    7240:	b5800204 	addi	r22,r22,8
    7244:	bdc00204 	addi	r23,r23,8
    7248:	103fdb1e 	bne	r2,zero,71b8 <__alt_exception_stack_pointer+0xf80071b8>
    724c:	0005883a 	mov	r2,zero
    7250:	003fe806 	br	71f4 <__alt_exception_stack_pointer+0xf80071f4>
    7254:	0008d500 	call	8d50 <__sfvwrite_r>
    7258:	003fe606 	br	71f4 <__alt_exception_stack_pointer+0xf80071f4>

0000725c <__sprint_r>:
    725c:	30c00217 	ldw	r3,8(r6)
    7260:	18000126 	beq	r3,zero,7268 <__sprint_r+0xc>
    7264:	00071601 	jmpi	7160 <__sprint_r.part.0>
    7268:	30000115 	stw	zero,4(r6)
    726c:	0005883a 	mov	r2,zero
    7270:	f800283a 	ret

00007274 <___vfiprintf_internal_r>:
    7274:	deffca04 	addi	sp,sp,-216
    7278:	dd403115 	stw	r21,196(sp)
    727c:	dfc03515 	stw	ra,212(sp)
    7280:	df003415 	stw	fp,208(sp)
    7284:	ddc03315 	stw	r23,204(sp)
    7288:	dd803215 	stw	r22,200(sp)
    728c:	dd003015 	stw	r20,192(sp)
    7290:	dcc02f15 	stw	r19,188(sp)
    7294:	dc802e15 	stw	r18,184(sp)
    7298:	dc402d15 	stw	r17,180(sp)
    729c:	dc002c15 	stw	r16,176(sp)
    72a0:	d9002115 	stw	r4,132(sp)
    72a4:	d9402015 	stw	r5,128(sp)
    72a8:	d9c02215 	stw	r7,136(sp)
    72ac:	302b883a 	mov	r21,r6
    72b0:	20000226 	beq	r4,zero,72bc <___vfiprintf_internal_r+0x48>
    72b4:	20800e17 	ldw	r2,56(r4)
    72b8:	1000cf26 	beq	r2,zero,75f8 <___vfiprintf_internal_r+0x384>
    72bc:	d8c02017 	ldw	r3,128(sp)
    72c0:	1880030b 	ldhu	r2,12(r3)
    72c4:	10c8000c 	andi	r3,r2,8192
    72c8:	1800071e 	bne	r3,zero,72e8 <___vfiprintf_internal_r+0x74>
    72cc:	d9402017 	ldw	r5,128(sp)
    72d0:	00f7ffc4 	movi	r3,-8193
    72d4:	10880014 	ori	r2,r2,8192
    72d8:	29001917 	ldw	r4,100(r5)
    72dc:	2880030d 	sth	r2,12(r5)
    72e0:	20c6703a 	and	r3,r4,r3
    72e4:	28c01915 	stw	r3,100(r5)
    72e8:	10c0020c 	andi	r3,r2,8
    72ec:	1800a526 	beq	r3,zero,7584 <___vfiprintf_internal_r+0x310>
    72f0:	d9002017 	ldw	r4,128(sp)
    72f4:	20c00417 	ldw	r3,16(r4)
    72f8:	1800a226 	beq	r3,zero,7584 <___vfiprintf_internal_r+0x310>
    72fc:	1080068c 	andi	r2,r2,26
    7300:	00c00284 	movi	r3,10
    7304:	10c0a826 	beq	r2,r3,75a8 <___vfiprintf_internal_r+0x334>
    7308:	d9001a04 	addi	r4,sp,104
    730c:	d94019c4 	addi	r5,sp,103
    7310:	04800074 	movhi	r18,1
    7314:	2145c83a 	sub	r2,r4,r5
    7318:	94bf3004 	addi	r18,r18,-832
    731c:	d9001e15 	stw	r4,120(sp)
    7320:	d9401f15 	stw	r5,124(sp)
    7324:	dec01a15 	stw	sp,104(sp)
    7328:	d8001c15 	stw	zero,112(sp)
    732c:	d8001b15 	stw	zero,108(sp)
    7330:	d811883a 	mov	r8,sp
    7334:	d8002615 	stw	zero,152(sp)
    7338:	d8002415 	stw	zero,144(sp)
    733c:	d8802815 	stw	r2,160(sp)
    7340:	a82d883a 	mov	r22,r21
    7344:	b0800007 	ldb	r2,0(r22)
    7348:	10040d26 	beq	r2,zero,8380 <___vfiprintf_internal_r+0x110c>
    734c:	00c00944 	movi	r3,37
    7350:	b029883a 	mov	r20,r22
    7354:	10c0021e 	bne	r2,r3,7360 <___vfiprintf_internal_r+0xec>
    7358:	00001606 	br	73b4 <___vfiprintf_internal_r+0x140>
    735c:	10c00326 	beq	r2,r3,736c <___vfiprintf_internal_r+0xf8>
    7360:	a5000044 	addi	r20,r20,1
    7364:	a0800007 	ldb	r2,0(r20)
    7368:	103ffc1e 	bne	r2,zero,735c <__alt_exception_stack_pointer+0xf800735c>
    736c:	a5a1c83a 	sub	r16,r20,r22
    7370:	80001026 	beq	r16,zero,73b4 <___vfiprintf_internal_r+0x140>
    7374:	d8c01c17 	ldw	r3,112(sp)
    7378:	d8801b17 	ldw	r2,108(sp)
    737c:	45800015 	stw	r22,0(r8)
    7380:	80c7883a 	add	r3,r16,r3
    7384:	10800044 	addi	r2,r2,1
    7388:	44000115 	stw	r16,4(r8)
    738c:	d8c01c15 	stw	r3,112(sp)
    7390:	d8801b15 	stw	r2,108(sp)
    7394:	010001c4 	movi	r4,7
    7398:	2080750e 	bge	r4,r2,7570 <___vfiprintf_internal_r+0x2fc>
    739c:	1803951e 	bne	r3,zero,81f4 <___vfiprintf_internal_r+0xf80>
    73a0:	d8c02417 	ldw	r3,144(sp)
    73a4:	d8001b15 	stw	zero,108(sp)
    73a8:	d811883a 	mov	r8,sp
    73ac:	1c07883a 	add	r3,r3,r16
    73b0:	d8c02415 	stw	r3,144(sp)
    73b4:	a0800007 	ldb	r2,0(r20)
    73b8:	1002e026 	beq	r2,zero,7f3c <___vfiprintf_internal_r+0xcc8>
    73bc:	a5800044 	addi	r22,r20,1
    73c0:	a0c00047 	ldb	r3,1(r20)
    73c4:	d8001d85 	stb	zero,118(sp)
    73c8:	0027883a 	mov	r19,zero
    73cc:	d8002305 	stb	zero,140(sp)
    73d0:	043fffc4 	movi	r16,-1
    73d4:	d8002515 	stw	zero,148(sp)
    73d8:	0023883a 	mov	r17,zero
    73dc:	05001604 	movi	r20,88
    73e0:	05400244 	movi	r21,9
    73e4:	402f883a 	mov	r23,r8
    73e8:	b5800044 	addi	r22,r22,1
    73ec:	18bff804 	addi	r2,r3,-32
    73f0:	a0827736 	bltu	r20,r2,7dd0 <___vfiprintf_internal_r+0xb5c>
    73f4:	100490ba 	slli	r2,r2,2
    73f8:	01000034 	movhi	r4,0
    73fc:	211d0304 	addi	r4,r4,29708
    7400:	1105883a 	add	r2,r2,r4
    7404:	10800017 	ldw	r2,0(r2)
    7408:	1000683a 	jmp	r2
    740c:	00007ad0 	cmplti	zero,zero,491
    7410:	00007dd0 	cmplti	zero,zero,503
    7414:	00007dd0 	cmplti	zero,zero,503
    7418:	00007aec 	andhi	zero,zero,491
    741c:	00007dd0 	cmplti	zero,zero,503
    7420:	00007dd0 	cmplti	zero,zero,503
    7424:	00007dd0 	cmplti	zero,zero,503
    7428:	00007dd0 	cmplti	zero,zero,503
    742c:	00007dd0 	cmplti	zero,zero,503
    7430:	00007dd0 	cmplti	zero,zero,503
    7434:	00007cf4 	movhi	zero,499
    7438:	00007d18 	cmpnei	zero,zero,500
    743c:	00007dd0 	cmplti	zero,zero,503
    7440:	00007610 	cmplti	zero,zero,472
    7444:	00007d2c 	andhi	zero,zero,500
    7448:	00007dd0 	cmplti	zero,zero,503
    744c:	00007af8 	rdprs	zero,zero,491
    7450:	00007b04 	movi	zero,492
    7454:	00007b04 	movi	zero,492
    7458:	00007b04 	movi	zero,492
    745c:	00007b04 	movi	zero,492
    7460:	00007b04 	movi	zero,492
    7464:	00007b04 	movi	zero,492
    7468:	00007b04 	movi	zero,492
    746c:	00007b04 	movi	zero,492
    7470:	00007b04 	movi	zero,492
    7474:	00007dd0 	cmplti	zero,zero,503
    7478:	00007dd0 	cmplti	zero,zero,503
    747c:	00007dd0 	cmplti	zero,zero,503
    7480:	00007dd0 	cmplti	zero,zero,503
    7484:	00007dd0 	cmplti	zero,zero,503
    7488:	00007dd0 	cmplti	zero,zero,503
    748c:	00007dd0 	cmplti	zero,zero,503
    7490:	00007dd0 	cmplti	zero,zero,503
    7494:	00007dd0 	cmplti	zero,zero,503
    7498:	00007dd0 	cmplti	zero,zero,503
    749c:	00007b44 	movi	zero,493
    74a0:	00007dd0 	cmplti	zero,zero,503
    74a4:	00007dd0 	cmplti	zero,zero,503
    74a8:	00007dd0 	cmplti	zero,zero,503
    74ac:	00007dd0 	cmplti	zero,zero,503
    74b0:	00007dd0 	cmplti	zero,zero,503
    74b4:	00007dd0 	cmplti	zero,zero,503
    74b8:	00007dd0 	cmplti	zero,zero,503
    74bc:	00007dd0 	cmplti	zero,zero,503
    74c0:	00007dd0 	cmplti	zero,zero,503
    74c4:	00007dd0 	cmplti	zero,zero,503
    74c8:	00007b80 	call	7b8 <_malloc_r+0x2b8>
    74cc:	00007dd0 	cmplti	zero,zero,503
    74d0:	00007dd0 	cmplti	zero,zero,503
    74d4:	00007dd0 	cmplti	zero,zero,503
    74d8:	00007dd0 	cmplti	zero,zero,503
    74dc:	00007dd0 	cmplti	zero,zero,503
    74e0:	00007bdc 	xori	zero,zero,495
    74e4:	00007dd0 	cmplti	zero,zero,503
    74e8:	00007dd0 	cmplti	zero,zero,503
    74ec:	00007c50 	cmplti	zero,zero,497
    74f0:	00007dd0 	cmplti	zero,zero,503
    74f4:	00007dd0 	cmplti	zero,zero,503
    74f8:	00007dd0 	cmplti	zero,zero,503
    74fc:	00007dd0 	cmplti	zero,zero,503
    7500:	00007dd0 	cmplti	zero,zero,503
    7504:	00007dd0 	cmplti	zero,zero,503
    7508:	00007dd0 	cmplti	zero,zero,503
    750c:	00007dd0 	cmplti	zero,zero,503
    7510:	00007dd0 	cmplti	zero,zero,503
    7514:	00007dd0 	cmplti	zero,zero,503
    7518:	000079f8 	rdprs	zero,zero,487
    751c:	00007a28 	cmpgeui	zero,zero,488
    7520:	00007dd0 	cmplti	zero,zero,503
    7524:	00007dd0 	cmplti	zero,zero,503
    7528:	00007dd0 	cmplti	zero,zero,503
    752c:	00007d78 	rdprs	zero,zero,501
    7530:	00007a28 	cmpgeui	zero,zero,488
    7534:	00007dd0 	cmplti	zero,zero,503
    7538:	00007dd0 	cmplti	zero,zero,503
    753c:	000078d0 	cmplti	zero,zero,483
    7540:	00007dd0 	cmplti	zero,zero,503
    7544:	000078e4 	muli	zero,zero,483
    7548:	0000791c 	xori	zero,zero,484
    754c:	0000761c 	xori	zero,zero,472
    7550:	000078c4 	movi	zero,483
    7554:	00007dd0 	cmplti	zero,zero,503
    7558:	00007c90 	cmplti	zero,zero,498
    755c:	00007dd0 	cmplti	zero,zero,503
    7560:	00007cdc 	xori	zero,zero,499
    7564:	00007dd0 	cmplti	zero,zero,503
    7568:	00007dd0 	cmplti	zero,zero,503
    756c:	000079a0 	cmpeqi	zero,zero,486
    7570:	42000204 	addi	r8,r8,8
    7574:	d8c02417 	ldw	r3,144(sp)
    7578:	1c07883a 	add	r3,r3,r16
    757c:	d8c02415 	stw	r3,144(sp)
    7580:	003f8c06 	br	73b4 <__alt_exception_stack_pointer+0xf80073b4>
    7584:	d9402017 	ldw	r5,128(sp)
    7588:	d9002117 	ldw	r4,132(sp)
    758c:	00031800 	call	3180 <__swsetup_r>
    7590:	1003c11e 	bne	r2,zero,8498 <___vfiprintf_internal_r+0x1224>
    7594:	d9402017 	ldw	r5,128(sp)
    7598:	00c00284 	movi	r3,10
    759c:	2880030b 	ldhu	r2,12(r5)
    75a0:	1080068c 	andi	r2,r2,26
    75a4:	10ff581e 	bne	r2,r3,7308 <__alt_exception_stack_pointer+0xf8007308>
    75a8:	d8c02017 	ldw	r3,128(sp)
    75ac:	1880038f 	ldh	r2,14(r3)
    75b0:	103f5516 	blt	r2,zero,7308 <__alt_exception_stack_pointer+0xf8007308>
    75b4:	d9c02217 	ldw	r7,136(sp)
    75b8:	d9002117 	ldw	r4,132(sp)
    75bc:	a80d883a 	mov	r6,r21
    75c0:	180b883a 	mov	r5,r3
    75c4:	000879c0 	call	879c <__sbprintf>
    75c8:	dfc03517 	ldw	ra,212(sp)
    75cc:	df003417 	ldw	fp,208(sp)
    75d0:	ddc03317 	ldw	r23,204(sp)
    75d4:	dd803217 	ldw	r22,200(sp)
    75d8:	dd403117 	ldw	r21,196(sp)
    75dc:	dd003017 	ldw	r20,192(sp)
    75e0:	dcc02f17 	ldw	r19,188(sp)
    75e4:	dc802e17 	ldw	r18,184(sp)
    75e8:	dc402d17 	ldw	r17,180(sp)
    75ec:	dc002c17 	ldw	r16,176(sp)
    75f0:	dec03604 	addi	sp,sp,216
    75f4:	f800283a 	ret
    75f8:	000518c0 	call	518c <__sinit>
    75fc:	003f2f06 	br	72bc <__alt_exception_stack_pointer+0xf80072bc>
    7600:	d8c02517 	ldw	r3,148(sp)
    7604:	d8802215 	stw	r2,136(sp)
    7608:	00c7c83a 	sub	r3,zero,r3
    760c:	d8c02515 	stw	r3,148(sp)
    7610:	8c400114 	ori	r17,r17,4
    7614:	b0c00007 	ldb	r3,0(r22)
    7618:	003f7306 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    761c:	00800c04 	movi	r2,48
    7620:	d9402217 	ldw	r5,136(sp)
    7624:	d8801d05 	stb	r2,116(sp)
    7628:	00801e04 	movi	r2,120
    762c:	d8801d45 	stb	r2,117(sp)
    7630:	d8001d85 	stb	zero,118(sp)
    7634:	b811883a 	mov	r8,r23
    7638:	28c00104 	addi	r3,r5,4
    763c:	2cc00017 	ldw	r19,0(r5)
    7640:	0029883a 	mov	r20,zero
    7644:	88800094 	ori	r2,r17,2
    7648:	80032516 	blt	r16,zero,82e0 <___vfiprintf_internal_r+0x106c>
    764c:	00bfdfc4 	movi	r2,-129
    7650:	88a2703a 	and	r17,r17,r2
    7654:	d8c02215 	stw	r3,136(sp)
    7658:	8c400094 	ori	r17,r17,2
    765c:	98032a1e 	bne	r19,zero,8308 <___vfiprintf_internal_r+0x1094>
    7660:	00800074 	movhi	r2,1
    7664:	10becf04 	addi	r2,r2,-1220
    7668:	d8802615 	stw	r2,152(sp)
    766c:	002b883a 	mov	r21,zero
    7670:	8001741e 	bne	r16,zero,7c44 <___vfiprintf_internal_r+0x9d0>
    7674:	0021883a 	mov	r16,zero
    7678:	0029883a 	mov	r20,zero
    767c:	ddc01a04 	addi	r23,sp,104
    7680:	8027883a 	mov	r19,r16
    7684:	8500010e 	bge	r16,r20,768c <___vfiprintf_internal_r+0x418>
    7688:	a027883a 	mov	r19,r20
    768c:	ad403fcc 	andi	r21,r21,255
    7690:	ad40201c 	xori	r21,r21,128
    7694:	ad7fe004 	addi	r21,r21,-128
    7698:	a8000126 	beq	r21,zero,76a0 <___vfiprintf_internal_r+0x42c>
    769c:	9cc00044 	addi	r19,r19,1
    76a0:	89c0008c 	andi	r7,r17,2
    76a4:	38000126 	beq	r7,zero,76ac <___vfiprintf_internal_r+0x438>
    76a8:	9cc00084 	addi	r19,r19,2
    76ac:	88c0210c 	andi	r3,r17,132
    76b0:	1801dd1e 	bne	r3,zero,7e28 <___vfiprintf_internal_r+0xbb4>
    76b4:	d9402517 	ldw	r5,148(sp)
    76b8:	2cebc83a 	sub	r21,r5,r19
    76bc:	0541da0e 	bge	zero,r21,7e28 <___vfiprintf_internal_r+0xbb4>
    76c0:	07000404 	movi	fp,16
    76c4:	d8801c17 	ldw	r2,112(sp)
    76c8:	e543be0e 	bge	fp,r21,85c4 <___vfiprintf_internal_r+0x1350>
    76cc:	01400074 	movhi	r5,1
    76d0:	297f3404 	addi	r5,r5,-816
    76d4:	dc002715 	stw	r16,156(sp)
    76d8:	d9801b17 	ldw	r6,108(sp)
    76dc:	a821883a 	mov	r16,r21
    76e0:	d9402315 	stw	r5,140(sp)
    76e4:	028001c4 	movi	r10,7
    76e8:	d9c02915 	stw	r7,164(sp)
    76ec:	182b883a 	mov	r21,r3
    76f0:	00000506 	br	7708 <___vfiprintf_internal_r+0x494>
    76f4:	31000084 	addi	r4,r6,2
    76f8:	42000204 	addi	r8,r8,8
    76fc:	180d883a 	mov	r6,r3
    7700:	843ffc04 	addi	r16,r16,-16
    7704:	e4000f0e 	bge	fp,r16,7744 <___vfiprintf_internal_r+0x4d0>
    7708:	01000074 	movhi	r4,1
    770c:	10800404 	addi	r2,r2,16
    7710:	30c00044 	addi	r3,r6,1
    7714:	213f3404 	addi	r4,r4,-816
    7718:	41000015 	stw	r4,0(r8)
    771c:	47000115 	stw	fp,4(r8)
    7720:	d8801c15 	stw	r2,112(sp)
    7724:	d8c01b15 	stw	r3,108(sp)
    7728:	50fff20e 	bge	r10,r3,76f4 <__alt_exception_stack_pointer+0xf80076f4>
    772c:	1001b21e 	bne	r2,zero,7df8 <___vfiprintf_internal_r+0xb84>
    7730:	843ffc04 	addi	r16,r16,-16
    7734:	000d883a 	mov	r6,zero
    7738:	01000044 	movi	r4,1
    773c:	d811883a 	mov	r8,sp
    7740:	e43ff116 	blt	fp,r16,7708 <__alt_exception_stack_pointer+0xf8007708>
    7744:	a807883a 	mov	r3,r21
    7748:	d9c02917 	ldw	r7,164(sp)
    774c:	802b883a 	mov	r21,r16
    7750:	dc002717 	ldw	r16,156(sp)
    7754:	d9402317 	ldw	r5,140(sp)
    7758:	a885883a 	add	r2,r21,r2
    775c:	45400115 	stw	r21,4(r8)
    7760:	41400015 	stw	r5,0(r8)
    7764:	d8801c15 	stw	r2,112(sp)
    7768:	d9001b15 	stw	r4,108(sp)
    776c:	014001c4 	movi	r5,7
    7770:	29026216 	blt	r5,r4,80fc <___vfiprintf_internal_r+0xe88>
    7774:	d9801d87 	ldb	r6,118(sp)
    7778:	42000204 	addi	r8,r8,8
    777c:	21400044 	addi	r5,r4,1
    7780:	3001ae1e 	bne	r6,zero,7e3c <___vfiprintf_internal_r+0xbc8>
    7784:	3801bb26 	beq	r7,zero,7e74 <___vfiprintf_internal_r+0xc00>
    7788:	d9001d04 	addi	r4,sp,116
    778c:	10800084 	addi	r2,r2,2
    7790:	41000015 	stw	r4,0(r8)
    7794:	01000084 	movi	r4,2
    7798:	41000115 	stw	r4,4(r8)
    779c:	d8801c15 	stw	r2,112(sp)
    77a0:	d9401b15 	stw	r5,108(sp)
    77a4:	010001c4 	movi	r4,7
    77a8:	2142680e 	bge	r4,r5,814c <___vfiprintf_internal_r+0xed8>
    77ac:	1002b11e 	bne	r2,zero,8274 <___vfiprintf_internal_r+0x1000>
    77b0:	01802004 	movi	r6,128
    77b4:	01400044 	movi	r5,1
    77b8:	0009883a 	mov	r4,zero
    77bc:	d811883a 	mov	r8,sp
    77c0:	1981ae1e 	bne	r3,r6,7e7c <___vfiprintf_internal_r+0xc08>
    77c4:	d8c02517 	ldw	r3,148(sp)
    77c8:	1cf9c83a 	sub	fp,r3,r19
    77cc:	0701ab0e 	bge	zero,fp,7e7c <___vfiprintf_internal_r+0xc08>
    77d0:	05400404 	movi	r21,16
    77d4:	af03a90e 	bge	r21,fp,867c <___vfiprintf_internal_r+0x1408>
    77d8:	01400074 	movhi	r5,1
    77dc:	297f3004 	addi	r5,r5,-832
    77e0:	d9402315 	stw	r5,140(sp)
    77e4:	01c001c4 	movi	r7,7
    77e8:	00000506 	br	7800 <___vfiprintf_internal_r+0x58c>
    77ec:	21800084 	addi	r6,r4,2
    77f0:	42000204 	addi	r8,r8,8
    77f4:	1809883a 	mov	r4,r3
    77f8:	e73ffc04 	addi	fp,fp,-16
    77fc:	af000d0e 	bge	r21,fp,7834 <___vfiprintf_internal_r+0x5c0>
    7800:	10800404 	addi	r2,r2,16
    7804:	20c00044 	addi	r3,r4,1
    7808:	44800015 	stw	r18,0(r8)
    780c:	45400115 	stw	r21,4(r8)
    7810:	d8801c15 	stw	r2,112(sp)
    7814:	d8c01b15 	stw	r3,108(sp)
    7818:	38fff40e 	bge	r7,r3,77ec <__alt_exception_stack_pointer+0xf80077ec>
    781c:	10022b1e 	bne	r2,zero,80cc <___vfiprintf_internal_r+0xe58>
    7820:	e73ffc04 	addi	fp,fp,-16
    7824:	01800044 	movi	r6,1
    7828:	0009883a 	mov	r4,zero
    782c:	d811883a 	mov	r8,sp
    7830:	af3ff316 	blt	r21,fp,7800 <__alt_exception_stack_pointer+0xf8007800>
    7834:	d8c02317 	ldw	r3,140(sp)
    7838:	1705883a 	add	r2,r2,fp
    783c:	47000115 	stw	fp,4(r8)
    7840:	40c00015 	stw	r3,0(r8)
    7844:	d8801c15 	stw	r2,112(sp)
    7848:	d9801b15 	stw	r6,108(sp)
    784c:	00c001c4 	movi	r3,7
    7850:	19829416 	blt	r3,r6,82a4 <___vfiprintf_internal_r+0x1030>
    7854:	8521c83a 	sub	r16,r16,r20
    7858:	42000204 	addi	r8,r8,8
    785c:	31400044 	addi	r5,r6,1
    7860:	3009883a 	mov	r4,r6
    7864:	04018716 	blt	zero,r16,7e84 <___vfiprintf_internal_r+0xc10>
    7868:	a085883a 	add	r2,r20,r2
    786c:	45c00015 	stw	r23,0(r8)
    7870:	45000115 	stw	r20,4(r8)
    7874:	d8801c15 	stw	r2,112(sp)
    7878:	d9401b15 	stw	r5,108(sp)
    787c:	00c001c4 	movi	r3,7
    7880:	1941c20e 	bge	r3,r5,7f8c <___vfiprintf_internal_r+0xd18>
    7884:	1002531e 	bne	r2,zero,81d4 <___vfiprintf_internal_r+0xf60>
    7888:	d8001b15 	stw	zero,108(sp)
    788c:	8c40010c 	andi	r17,r17,4
    7890:	88023226 	beq	r17,zero,815c <___vfiprintf_internal_r+0xee8>
    7894:	d9002517 	ldw	r4,148(sp)
    7898:	24e3c83a 	sub	r17,r4,r19
    789c:	04432916 	blt	zero,r17,8544 <___vfiprintf_internal_r+0x12d0>
    78a0:	d8802517 	ldw	r2,148(sp)
    78a4:	14c0010e 	bge	r2,r19,78ac <___vfiprintf_internal_r+0x638>
    78a8:	9805883a 	mov	r2,r19
    78ac:	d8c02417 	ldw	r3,144(sp)
    78b0:	1887883a 	add	r3,r3,r2
    78b4:	d8c02415 	stw	r3,144(sp)
    78b8:	d8001b15 	stw	zero,108(sp)
    78bc:	d811883a 	mov	r8,sp
    78c0:	003ea006 	br	7344 <__alt_exception_stack_pointer+0xf8007344>
    78c4:	8c400814 	ori	r17,r17,32
    78c8:	b0c00007 	ldb	r3,0(r22)
    78cc:	003ec606 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    78d0:	b0c00007 	ldb	r3,0(r22)
    78d4:	00801b04 	movi	r2,108
    78d8:	18832026 	beq	r3,r2,855c <___vfiprintf_internal_r+0x12e8>
    78dc:	8c400414 	ori	r17,r17,16
    78e0:	003ec106 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    78e4:	9cc03fcc 	andi	r19,r19,255
    78e8:	b811883a 	mov	r8,r23
    78ec:	9803981e 	bne	r19,zero,8750 <___vfiprintf_internal_r+0x14dc>
    78f0:	8880080c 	andi	r2,r17,32
    78f4:	1002be26 	beq	r2,zero,83f0 <___vfiprintf_internal_r+0x117c>
    78f8:	d9002217 	ldw	r4,136(sp)
    78fc:	d9402417 	ldw	r5,144(sp)
    7900:	20800017 	ldw	r2,0(r4)
    7904:	2807d7fa 	srai	r3,r5,31
    7908:	21000104 	addi	r4,r4,4
    790c:	d9002215 	stw	r4,136(sp)
    7910:	11400015 	stw	r5,0(r2)
    7914:	10c00115 	stw	r3,4(r2)
    7918:	003e8a06 	br	7344 <__alt_exception_stack_pointer+0xf8007344>
    791c:	9cc03fcc 	andi	r19,r19,255
    7920:	b811883a 	mov	r8,r23
    7924:	9803871e 	bne	r19,zero,8744 <___vfiprintf_internal_r+0x14d0>
    7928:	8880080c 	andi	r2,r17,32
    792c:	10009a26 	beq	r2,zero,7b98 <___vfiprintf_internal_r+0x924>
    7930:	d9002217 	ldw	r4,136(sp)
    7934:	d8001d85 	stb	zero,118(sp)
    7938:	20800204 	addi	r2,r4,8
    793c:	24c00017 	ldw	r19,0(r4)
    7940:	25000117 	ldw	r20,4(r4)
    7944:	8002a416 	blt	r16,zero,83d8 <___vfiprintf_internal_r+0x1164>
    7948:	013fdfc4 	movi	r4,-129
    794c:	9d06b03a 	or	r3,r19,r20
    7950:	d8802215 	stw	r2,136(sp)
    7954:	8922703a 	and	r17,r17,r4
    7958:	18009b26 	beq	r3,zero,7bc8 <___vfiprintf_internal_r+0x954>
    795c:	002b883a 	mov	r21,zero
    7960:	ddc01a04 	addi	r23,sp,104
    7964:	9806d0fa 	srli	r3,r19,3
    7968:	a008977a 	slli	r4,r20,29
    796c:	a028d0fa 	srli	r20,r20,3
    7970:	9cc001cc 	andi	r19,r19,7
    7974:	98800c04 	addi	r2,r19,48
    7978:	bdffffc4 	addi	r23,r23,-1
    797c:	20e6b03a 	or	r19,r4,r3
    7980:	b8800005 	stb	r2,0(r23)
    7984:	9d06b03a 	or	r3,r19,r20
    7988:	183ff61e 	bne	r3,zero,7964 <__alt_exception_stack_pointer+0xf8007964>
    798c:	88c0004c 	andi	r3,r17,1
    7990:	18021f1e 	bne	r3,zero,8210 <___vfiprintf_internal_r+0xf9c>
    7994:	d9401e17 	ldw	r5,120(sp)
    7998:	2de9c83a 	sub	r20,r5,r23
    799c:	003f3806 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    79a0:	9cc03fcc 	andi	r19,r19,255
    79a4:	b811883a 	mov	r8,r23
    79a8:	98034f1e 	bne	r19,zero,86e8 <___vfiprintf_internal_r+0x1474>
    79ac:	00800074 	movhi	r2,1
    79b0:	10becf04 	addi	r2,r2,-1220
    79b4:	d8802615 	stw	r2,152(sp)
    79b8:	8880080c 	andi	r2,r17,32
    79bc:	1000ac26 	beq	r2,zero,7c70 <___vfiprintf_internal_r+0x9fc>
    79c0:	d9002217 	ldw	r4,136(sp)
    79c4:	24c00017 	ldw	r19,0(r4)
    79c8:	25000117 	ldw	r20,4(r4)
    79cc:	21000204 	addi	r4,r4,8
    79d0:	d9002215 	stw	r4,136(sp)
    79d4:	8880004c 	andi	r2,r17,1
    79d8:	1001e726 	beq	r2,zero,8178 <___vfiprintf_internal_r+0xf04>
    79dc:	9d04b03a 	or	r2,r19,r20
    79e0:	10025c1e 	bne	r2,zero,8354 <___vfiprintf_internal_r+0x10e0>
    79e4:	d8001d85 	stb	zero,118(sp)
    79e8:	80024416 	blt	r16,zero,82fc <___vfiprintf_internal_r+0x1088>
    79ec:	00bfdfc4 	movi	r2,-129
    79f0:	88a2703a 	and	r17,r17,r2
    79f4:	003f1d06 	br	766c <__alt_exception_stack_pointer+0xf800766c>
    79f8:	d8c02217 	ldw	r3,136(sp)
    79fc:	04c00044 	movi	r19,1
    7a00:	b811883a 	mov	r8,r23
    7a04:	18800017 	ldw	r2,0(r3)
    7a08:	18c00104 	addi	r3,r3,4
    7a0c:	d8001d85 	stb	zero,118(sp)
    7a10:	d8801005 	stb	r2,64(sp)
    7a14:	d8c02215 	stw	r3,136(sp)
    7a18:	9829883a 	mov	r20,r19
    7a1c:	ddc01004 	addi	r23,sp,64
    7a20:	0021883a 	mov	r16,zero
    7a24:	003f1e06 	br	76a0 <__alt_exception_stack_pointer+0xf80076a0>
    7a28:	9cc03fcc 	andi	r19,r19,255
    7a2c:	b811883a 	mov	r8,r23
    7a30:	9803331e 	bne	r19,zero,8700 <___vfiprintf_internal_r+0x148c>
    7a34:	8880080c 	andi	r2,r17,32
    7a38:	10004826 	beq	r2,zero,7b5c <___vfiprintf_internal_r+0x8e8>
    7a3c:	d9002217 	ldw	r4,136(sp)
    7a40:	20800117 	ldw	r2,4(r4)
    7a44:	24c00017 	ldw	r19,0(r4)
    7a48:	21000204 	addi	r4,r4,8
    7a4c:	d9002215 	stw	r4,136(sp)
    7a50:	1029883a 	mov	r20,r2
    7a54:	10024c16 	blt	r2,zero,8388 <___vfiprintf_internal_r+0x1114>
    7a58:	dd401d83 	ldbu	r21,118(sp)
    7a5c:	80007116 	blt	r16,zero,7c24 <___vfiprintf_internal_r+0x9b0>
    7a60:	00ffdfc4 	movi	r3,-129
    7a64:	9d04b03a 	or	r2,r19,r20
    7a68:	88e2703a 	and	r17,r17,r3
    7a6c:	1000d126 	beq	r2,zero,7db4 <___vfiprintf_internal_r+0xb40>
    7a70:	a0023526 	beq	r20,zero,8348 <___vfiprintf_internal_r+0x10d4>
    7a74:	ddc01a04 	addi	r23,sp,104
    7a78:	4039883a 	mov	fp,r8
    7a7c:	9809883a 	mov	r4,r19
    7a80:	a00b883a 	mov	r5,r20
    7a84:	01800284 	movi	r6,10
    7a88:	000f883a 	mov	r7,zero
    7a8c:	000a3280 	call	a328 <__umoddi3>
    7a90:	10800c04 	addi	r2,r2,48
    7a94:	bdffffc4 	addi	r23,r23,-1
    7a98:	9809883a 	mov	r4,r19
    7a9c:	a00b883a 	mov	r5,r20
    7aa0:	b8800005 	stb	r2,0(r23)
    7aa4:	01800284 	movi	r6,10
    7aa8:	000f883a 	mov	r7,zero
    7aac:	0009d2c0 	call	9d2c <__udivdi3>
    7ab0:	1027883a 	mov	r19,r2
    7ab4:	10c4b03a 	or	r2,r2,r3
    7ab8:	1829883a 	mov	r20,r3
    7abc:	103fef1e 	bne	r2,zero,7a7c <__alt_exception_stack_pointer+0xf8007a7c>
    7ac0:	d9001e17 	ldw	r4,120(sp)
    7ac4:	e011883a 	mov	r8,fp
    7ac8:	25e9c83a 	sub	r20,r4,r23
    7acc:	003eec06 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    7ad0:	d8802307 	ldb	r2,140(sp)
    7ad4:	1002361e 	bne	r2,zero,83b0 <___vfiprintf_internal_r+0x113c>
    7ad8:	00c00804 	movi	r3,32
    7adc:	d8c02305 	stb	r3,140(sp)
    7ae0:	04c00044 	movi	r19,1
    7ae4:	b0c00007 	ldb	r3,0(r22)
    7ae8:	003e3f06 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7aec:	8c400054 	ori	r17,r17,1
    7af0:	b0c00007 	ldb	r3,0(r22)
    7af4:	003e3c06 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7af8:	8c402014 	ori	r17,r17,128
    7afc:	b0c00007 	ldb	r3,0(r22)
    7b00:	003e3906 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7b04:	dc002715 	stw	r16,156(sp)
    7b08:	d8002515 	stw	zero,148(sp)
    7b0c:	1f3ff404 	addi	fp,r3,-48
    7b10:	0009883a 	mov	r4,zero
    7b14:	b021883a 	mov	r16,r22
    7b18:	01400284 	movi	r5,10
    7b1c:	000aaa00 	call	aaa0 <__mulsi3>
    7b20:	80c00007 	ldb	r3,0(r16)
    7b24:	e089883a 	add	r4,fp,r2
    7b28:	b5800044 	addi	r22,r22,1
    7b2c:	1f3ff404 	addi	fp,r3,-48
    7b30:	b021883a 	mov	r16,r22
    7b34:	af3ff82e 	bgeu	r21,fp,7b18 <__alt_exception_stack_pointer+0xf8007b18>
    7b38:	d9002515 	stw	r4,148(sp)
    7b3c:	dc002717 	ldw	r16,156(sp)
    7b40:	003e2a06 	br	73ec <__alt_exception_stack_pointer+0xf80073ec>
    7b44:	9cc03fcc 	andi	r19,r19,255
    7b48:	b811883a 	mov	r8,r23
    7b4c:	9802e91e 	bne	r19,zero,86f4 <___vfiprintf_internal_r+0x1480>
    7b50:	8c400414 	ori	r17,r17,16
    7b54:	8880080c 	andi	r2,r17,32
    7b58:	103fb81e 	bne	r2,zero,7a3c <__alt_exception_stack_pointer+0xf8007a3c>
    7b5c:	8880040c 	andi	r2,r17,16
    7b60:	10022e26 	beq	r2,zero,841c <___vfiprintf_internal_r+0x11a8>
    7b64:	d9402217 	ldw	r5,136(sp)
    7b68:	2cc00017 	ldw	r19,0(r5)
    7b6c:	29400104 	addi	r5,r5,4
    7b70:	d9402215 	stw	r5,136(sp)
    7b74:	9829d7fa 	srai	r20,r19,31
    7b78:	a005883a 	mov	r2,r20
    7b7c:	003fb506 	br	7a54 <__alt_exception_stack_pointer+0xf8007a54>
    7b80:	9cc03fcc 	andi	r19,r19,255
    7b84:	b811883a 	mov	r8,r23
    7b88:	9802fa1e 	bne	r19,zero,8774 <___vfiprintf_internal_r+0x1500>
    7b8c:	8c400414 	ori	r17,r17,16
    7b90:	8880080c 	andi	r2,r17,32
    7b94:	103f661e 	bne	r2,zero,7930 <__alt_exception_stack_pointer+0xf8007930>
    7b98:	8880040c 	andi	r2,r17,16
    7b9c:	10020626 	beq	r2,zero,83b8 <___vfiprintf_internal_r+0x1144>
    7ba0:	d9402217 	ldw	r5,136(sp)
    7ba4:	d8001d85 	stb	zero,118(sp)
    7ba8:	0029883a 	mov	r20,zero
    7bac:	28800104 	addi	r2,r5,4
    7bb0:	2cc00017 	ldw	r19,0(r5)
    7bb4:	80020816 	blt	r16,zero,83d8 <___vfiprintf_internal_r+0x1164>
    7bb8:	00ffdfc4 	movi	r3,-129
    7bbc:	d8802215 	stw	r2,136(sp)
    7bc0:	88e2703a 	and	r17,r17,r3
    7bc4:	983f651e 	bne	r19,zero,795c <__alt_exception_stack_pointer+0xf800795c>
    7bc8:	002b883a 	mov	r21,zero
    7bcc:	8002cf26 	beq	r16,zero,870c <___vfiprintf_internal_r+0x1498>
    7bd0:	0027883a 	mov	r19,zero
    7bd4:	0029883a 	mov	r20,zero
    7bd8:	003f6106 	br	7960 <__alt_exception_stack_pointer+0xf8007960>
    7bdc:	9cc03fcc 	andi	r19,r19,255
    7be0:	b811883a 	mov	r8,r23
    7be4:	9802e01e 	bne	r19,zero,8768 <___vfiprintf_internal_r+0x14f4>
    7be8:	8c400414 	ori	r17,r17,16
    7bec:	8880080c 	andi	r2,r17,32
    7bf0:	1000641e 	bne	r2,zero,7d84 <___vfiprintf_internal_r+0xb10>
    7bf4:	8880040c 	andi	r2,r17,16
    7bf8:	1001c81e 	bne	r2,zero,831c <___vfiprintf_internal_r+0x10a8>
    7bfc:	8880100c 	andi	r2,r17,64
    7c00:	d8001d85 	stb	zero,118(sp)
    7c04:	1002281e 	bne	r2,zero,84a8 <___vfiprintf_internal_r+0x1234>
    7c08:	d9002217 	ldw	r4,136(sp)
    7c0c:	0029883a 	mov	r20,zero
    7c10:	20800104 	addi	r2,r4,4
    7c14:	24c00017 	ldw	r19,0(r4)
    7c18:	8001c60e 	bge	r16,zero,8334 <___vfiprintf_internal_r+0x10c0>
    7c1c:	d8802215 	stw	r2,136(sp)
    7c20:	002b883a 	mov	r21,zero
    7c24:	9d04b03a 	or	r2,r19,r20
    7c28:	103f911e 	bne	r2,zero,7a70 <__alt_exception_stack_pointer+0xf8007a70>
    7c2c:	00800044 	movi	r2,1
    7c30:	10803fcc 	andi	r2,r2,255
    7c34:	00c00044 	movi	r3,1
    7c38:	10c05f26 	beq	r2,r3,7db8 <___vfiprintf_internal_r+0xb44>
    7c3c:	00c00084 	movi	r3,2
    7c40:	10ffe31e 	bne	r2,r3,7bd0 <__alt_exception_stack_pointer+0xf8007bd0>
    7c44:	0027883a 	mov	r19,zero
    7c48:	0029883a 	mov	r20,zero
    7c4c:	00015106 	br	8194 <___vfiprintf_internal_r+0xf20>
    7c50:	9cc03fcc 	andi	r19,r19,255
    7c54:	b811883a 	mov	r8,r23
    7c58:	9802c01e 	bne	r19,zero,875c <___vfiprintf_internal_r+0x14e8>
    7c5c:	01400074 	movhi	r5,1
    7c60:	297eca04 	addi	r5,r5,-1240
    7c64:	d9402615 	stw	r5,152(sp)
    7c68:	8880080c 	andi	r2,r17,32
    7c6c:	103f541e 	bne	r2,zero,79c0 <__alt_exception_stack_pointer+0xf80079c0>
    7c70:	8880040c 	andi	r2,r17,16
    7c74:	1001f226 	beq	r2,zero,8440 <___vfiprintf_internal_r+0x11cc>
    7c78:	d9402217 	ldw	r5,136(sp)
    7c7c:	0029883a 	mov	r20,zero
    7c80:	2cc00017 	ldw	r19,0(r5)
    7c84:	29400104 	addi	r5,r5,4
    7c88:	d9402215 	stw	r5,136(sp)
    7c8c:	003f5106 	br	79d4 <__alt_exception_stack_pointer+0xf80079d4>
    7c90:	d8c02217 	ldw	r3,136(sp)
    7c94:	b811883a 	mov	r8,r23
    7c98:	d8001d85 	stb	zero,118(sp)
    7c9c:	1dc00017 	ldw	r23,0(r3)
    7ca0:	1f000104 	addi	fp,r3,4
    7ca4:	b8025926 	beq	r23,zero,860c <___vfiprintf_internal_r+0x1398>
    7ca8:	80023316 	blt	r16,zero,8578 <___vfiprintf_internal_r+0x1304>
    7cac:	800d883a 	mov	r6,r16
    7cb0:	000b883a 	mov	r5,zero
    7cb4:	b809883a 	mov	r4,r23
    7cb8:	da002a15 	stw	r8,168(sp)
    7cbc:	0005a300 	call	5a30 <memchr>
    7cc0:	da002a17 	ldw	r8,168(sp)
    7cc4:	10026826 	beq	r2,zero,8668 <___vfiprintf_internal_r+0x13f4>
    7cc8:	15e9c83a 	sub	r20,r2,r23
    7ccc:	dd401d83 	ldbu	r21,118(sp)
    7cd0:	df002215 	stw	fp,136(sp)
    7cd4:	0021883a 	mov	r16,zero
    7cd8:	003e6906 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    7cdc:	9cc03fcc 	andi	r19,r19,255
    7ce0:	b811883a 	mov	r8,r23
    7ce4:	983fc126 	beq	r19,zero,7bec <__alt_exception_stack_pointer+0xf8007bec>
    7ce8:	d8c02303 	ldbu	r3,140(sp)
    7cec:	d8c01d85 	stb	r3,118(sp)
    7cf0:	003fbe06 	br	7bec <__alt_exception_stack_pointer+0xf8007bec>
    7cf4:	d9002217 	ldw	r4,136(sp)
    7cf8:	d9402217 	ldw	r5,136(sp)
    7cfc:	21000017 	ldw	r4,0(r4)
    7d00:	28800104 	addi	r2,r5,4
    7d04:	d9002515 	stw	r4,148(sp)
    7d08:	203e3d16 	blt	r4,zero,7600 <__alt_exception_stack_pointer+0xf8007600>
    7d0c:	d8802215 	stw	r2,136(sp)
    7d10:	b0c00007 	ldb	r3,0(r22)
    7d14:	003db406 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7d18:	00c00ac4 	movi	r3,43
    7d1c:	d8c02305 	stb	r3,140(sp)
    7d20:	04c00044 	movi	r19,1
    7d24:	b0c00007 	ldb	r3,0(r22)
    7d28:	003daf06 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7d2c:	b0c00007 	ldb	r3,0(r22)
    7d30:	01000a84 	movi	r4,42
    7d34:	b4000044 	addi	r16,r22,1
    7d38:	19025e26 	beq	r3,r4,86b4 <___vfiprintf_internal_r+0x1440>
    7d3c:	1f3ff404 	addi	fp,r3,-48
    7d40:	0009883a 	mov	r4,zero
    7d44:	af025236 	bltu	r21,fp,8690 <___vfiprintf_internal_r+0x141c>
    7d48:	01400284 	movi	r5,10
    7d4c:	000aaa00 	call	aaa0 <__mulsi3>
    7d50:	80c00007 	ldb	r3,0(r16)
    7d54:	1709883a 	add	r4,r2,fp
    7d58:	85800044 	addi	r22,r16,1
    7d5c:	1f3ff404 	addi	fp,r3,-48
    7d60:	b021883a 	mov	r16,r22
    7d64:	af3ff82e 	bgeu	r21,fp,7d48 <__alt_exception_stack_pointer+0xf8007d48>
    7d68:	2021883a 	mov	r16,r4
    7d6c:	203d9f0e 	bge	r4,zero,73ec <__alt_exception_stack_pointer+0xf80073ec>
    7d70:	043fffc4 	movi	r16,-1
    7d74:	003d9d06 	br	73ec <__alt_exception_stack_pointer+0xf80073ec>
    7d78:	8c401014 	ori	r17,r17,64
    7d7c:	b0c00007 	ldb	r3,0(r22)
    7d80:	003d9906 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    7d84:	d9002217 	ldw	r4,136(sp)
    7d88:	d8001d85 	stb	zero,118(sp)
    7d8c:	20c00204 	addi	r3,r4,8
    7d90:	24c00017 	ldw	r19,0(r4)
    7d94:	25000117 	ldw	r20,4(r4)
    7d98:	8001e716 	blt	r16,zero,8538 <___vfiprintf_internal_r+0x12c4>
    7d9c:	013fdfc4 	movi	r4,-129
    7da0:	9d04b03a 	or	r2,r19,r20
    7da4:	d8c02215 	stw	r3,136(sp)
    7da8:	8922703a 	and	r17,r17,r4
    7dac:	002b883a 	mov	r21,zero
    7db0:	103f2f1e 	bne	r2,zero,7a70 <__alt_exception_stack_pointer+0xf8007a70>
    7db4:	803e2f26 	beq	r16,zero,7674 <__alt_exception_stack_pointer+0xf8007674>
    7db8:	0027883a 	mov	r19,zero
    7dbc:	9cc00c04 	addi	r19,r19,48
    7dc0:	dcc019c5 	stb	r19,103(sp)
    7dc4:	dd002817 	ldw	r20,160(sp)
    7dc8:	ddc019c4 	addi	r23,sp,103
    7dcc:	003e2c06 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    7dd0:	9cc03fcc 	andi	r19,r19,255
    7dd4:	b811883a 	mov	r8,r23
    7dd8:	9802571e 	bne	r19,zero,8738 <___vfiprintf_internal_r+0x14c4>
    7ddc:	18005726 	beq	r3,zero,7f3c <___vfiprintf_internal_r+0xcc8>
    7de0:	04c00044 	movi	r19,1
    7de4:	d8c01005 	stb	r3,64(sp)
    7de8:	d8001d85 	stb	zero,118(sp)
    7dec:	9829883a 	mov	r20,r19
    7df0:	ddc01004 	addi	r23,sp,64
    7df4:	003f0a06 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    7df8:	d9402017 	ldw	r5,128(sp)
    7dfc:	d9002117 	ldw	r4,132(sp)
    7e00:	d9801a04 	addi	r6,sp,104
    7e04:	da802a15 	stw	r10,168(sp)
    7e08:	00071600 	call	7160 <__sprint_r.part.0>
    7e0c:	da802a17 	ldw	r10,168(sp)
    7e10:	1000501e 	bne	r2,zero,7f54 <___vfiprintf_internal_r+0xce0>
    7e14:	d9801b17 	ldw	r6,108(sp)
    7e18:	d8801c17 	ldw	r2,112(sp)
    7e1c:	d811883a 	mov	r8,sp
    7e20:	31000044 	addi	r4,r6,1
    7e24:	003e3606 	br	7700 <__alt_exception_stack_pointer+0xf8007700>
    7e28:	d9001b17 	ldw	r4,108(sp)
    7e2c:	d8801c17 	ldw	r2,112(sp)
    7e30:	21400044 	addi	r5,r4,1
    7e34:	d9801d87 	ldb	r6,118(sp)
    7e38:	303e5226 	beq	r6,zero,7784 <__alt_exception_stack_pointer+0xf8007784>
    7e3c:	01800044 	movi	r6,1
    7e40:	d9001d84 	addi	r4,sp,118
    7e44:	1185883a 	add	r2,r2,r6
    7e48:	41000015 	stw	r4,0(r8)
    7e4c:	41800115 	stw	r6,4(r8)
    7e50:	d8801c15 	stw	r2,112(sp)
    7e54:	d9401b15 	stw	r5,108(sp)
    7e58:	010001c4 	movi	r4,7
    7e5c:	2140b00e 	bge	r4,r5,8120 <___vfiprintf_internal_r+0xeac>
    7e60:	1000f61e 	bne	r2,zero,823c <___vfiprintf_internal_r+0xfc8>
    7e64:	3800b31e 	bne	r7,zero,8134 <___vfiprintf_internal_r+0xec0>
    7e68:	0009883a 	mov	r4,zero
    7e6c:	300b883a 	mov	r5,r6
    7e70:	d811883a 	mov	r8,sp
    7e74:	01802004 	movi	r6,128
    7e78:	19be5226 	beq	r3,r6,77c4 <__alt_exception_stack_pointer+0xf80077c4>
    7e7c:	8521c83a 	sub	r16,r16,r20
    7e80:	043e790e 	bge	zero,r16,7868 <__alt_exception_stack_pointer+0xf8007868>
    7e84:	05400404 	movi	r21,16
    7e88:	ac01b00e 	bge	r21,r16,854c <___vfiprintf_internal_r+0x12d8>
    7e8c:	01400074 	movhi	r5,1
    7e90:	297f3004 	addi	r5,r5,-832
    7e94:	d9402315 	stw	r5,140(sp)
    7e98:	070001c4 	movi	fp,7
    7e9c:	00000506 	br	7eb4 <___vfiprintf_internal_r+0xc40>
    7ea0:	21400084 	addi	r5,r4,2
    7ea4:	42000204 	addi	r8,r8,8
    7ea8:	1809883a 	mov	r4,r3
    7eac:	843ffc04 	addi	r16,r16,-16
    7eb0:	ac000d0e 	bge	r21,r16,7ee8 <___vfiprintf_internal_r+0xc74>
    7eb4:	10800404 	addi	r2,r2,16
    7eb8:	20c00044 	addi	r3,r4,1
    7ebc:	44800015 	stw	r18,0(r8)
    7ec0:	45400115 	stw	r21,4(r8)
    7ec4:	d8801c15 	stw	r2,112(sp)
    7ec8:	d8c01b15 	stw	r3,108(sp)
    7ecc:	e0fff40e 	bge	fp,r3,7ea0 <__alt_exception_stack_pointer+0xf8007ea0>
    7ed0:	1000101e 	bne	r2,zero,7f14 <___vfiprintf_internal_r+0xca0>
    7ed4:	843ffc04 	addi	r16,r16,-16
    7ed8:	01400044 	movi	r5,1
    7edc:	0009883a 	mov	r4,zero
    7ee0:	d811883a 	mov	r8,sp
    7ee4:	ac3ff316 	blt	r21,r16,7eb4 <__alt_exception_stack_pointer+0xf8007eb4>
    7ee8:	d8c02317 	ldw	r3,140(sp)
    7eec:	1405883a 	add	r2,r2,r16
    7ef0:	44000115 	stw	r16,4(r8)
    7ef4:	40c00015 	stw	r3,0(r8)
    7ef8:	d8801c15 	stw	r2,112(sp)
    7efc:	d9401b15 	stw	r5,108(sp)
    7f00:	00c001c4 	movi	r3,7
    7f04:	19401916 	blt	r3,r5,7f6c <___vfiprintf_internal_r+0xcf8>
    7f08:	42000204 	addi	r8,r8,8
    7f0c:	29400044 	addi	r5,r5,1
    7f10:	003e5506 	br	7868 <__alt_exception_stack_pointer+0xf8007868>
    7f14:	d9402017 	ldw	r5,128(sp)
    7f18:	d9002117 	ldw	r4,132(sp)
    7f1c:	d9801a04 	addi	r6,sp,104
    7f20:	00071600 	call	7160 <__sprint_r.part.0>
    7f24:	10000b1e 	bne	r2,zero,7f54 <___vfiprintf_internal_r+0xce0>
    7f28:	d9001b17 	ldw	r4,108(sp)
    7f2c:	d8801c17 	ldw	r2,112(sp)
    7f30:	d811883a 	mov	r8,sp
    7f34:	21400044 	addi	r5,r4,1
    7f38:	003fdc06 	br	7eac <__alt_exception_stack_pointer+0xf8007eac>
    7f3c:	d8801c17 	ldw	r2,112(sp)
    7f40:	10000426 	beq	r2,zero,7f54 <___vfiprintf_internal_r+0xce0>
    7f44:	d9402017 	ldw	r5,128(sp)
    7f48:	d9002117 	ldw	r4,132(sp)
    7f4c:	d9801a04 	addi	r6,sp,104
    7f50:	00071600 	call	7160 <__sprint_r.part.0>
    7f54:	d9402017 	ldw	r5,128(sp)
    7f58:	2880030b 	ldhu	r2,12(r5)
    7f5c:	1080100c 	andi	r2,r2,64
    7f60:	10014d1e 	bne	r2,zero,8498 <___vfiprintf_internal_r+0x1224>
    7f64:	d8802417 	ldw	r2,144(sp)
    7f68:	003d9706 	br	75c8 <__alt_exception_stack_pointer+0xf80075c8>
    7f6c:	1000d21e 	bne	r2,zero,82b8 <___vfiprintf_internal_r+0x1044>
    7f70:	00c00044 	movi	r3,1
    7f74:	a005883a 	mov	r2,r20
    7f78:	ddc00015 	stw	r23,0(sp)
    7f7c:	dd000115 	stw	r20,4(sp)
    7f80:	dd001c15 	stw	r20,112(sp)
    7f84:	d8c01b15 	stw	r3,108(sp)
    7f88:	d811883a 	mov	r8,sp
    7f8c:	42000204 	addi	r8,r8,8
    7f90:	8c40010c 	andi	r17,r17,4
    7f94:	88004026 	beq	r17,zero,8098 <___vfiprintf_internal_r+0xe24>
    7f98:	d9002517 	ldw	r4,148(sp)
    7f9c:	24e3c83a 	sub	r17,r4,r19
    7fa0:	04403d0e 	bge	zero,r17,8098 <___vfiprintf_internal_r+0xe24>
    7fa4:	04000404 	movi	r16,16
    7fa8:	8441a90e 	bge	r16,r17,8650 <___vfiprintf_internal_r+0x13dc>
    7fac:	00c00074 	movhi	r3,1
    7fb0:	18ff3404 	addi	r3,r3,-816
    7fb4:	d9001b17 	ldw	r4,108(sp)
    7fb8:	d8c02315 	stw	r3,140(sp)
    7fbc:	050001c4 	movi	r20,7
    7fc0:	dd402117 	ldw	r21,132(sp)
    7fc4:	ddc02017 	ldw	r23,128(sp)
    7fc8:	00000506 	br	7fe0 <___vfiprintf_internal_r+0xd6c>
    7fcc:	21400084 	addi	r5,r4,2
    7fd0:	42000204 	addi	r8,r8,8
    7fd4:	1809883a 	mov	r4,r3
    7fd8:	8c7ffc04 	addi	r17,r17,-16
    7fdc:	84400f0e 	bge	r16,r17,801c <___vfiprintf_internal_r+0xda8>
    7fe0:	01400074 	movhi	r5,1
    7fe4:	10800404 	addi	r2,r2,16
    7fe8:	20c00044 	addi	r3,r4,1
    7fec:	297f3404 	addi	r5,r5,-816
    7ff0:	41400015 	stw	r5,0(r8)
    7ff4:	44000115 	stw	r16,4(r8)
    7ff8:	d8801c15 	stw	r2,112(sp)
    7ffc:	d8c01b15 	stw	r3,108(sp)
    8000:	a0fff20e 	bge	r20,r3,7fcc <__alt_exception_stack_pointer+0xf8007fcc>
    8004:	1000141e 	bne	r2,zero,8058 <___vfiprintf_internal_r+0xde4>
    8008:	8c7ffc04 	addi	r17,r17,-16
    800c:	01400044 	movi	r5,1
    8010:	0009883a 	mov	r4,zero
    8014:	d811883a 	mov	r8,sp
    8018:	847ff116 	blt	r16,r17,7fe0 <__alt_exception_stack_pointer+0xf8007fe0>
    801c:	d8c02317 	ldw	r3,140(sp)
    8020:	1445883a 	add	r2,r2,r17
    8024:	44400115 	stw	r17,4(r8)
    8028:	40c00015 	stw	r3,0(r8)
    802c:	d8801c15 	stw	r2,112(sp)
    8030:	d9401b15 	stw	r5,108(sp)
    8034:	00c001c4 	movi	r3,7
    8038:	1940170e 	bge	r3,r5,8098 <___vfiprintf_internal_r+0xe24>
    803c:	1000101e 	bne	r2,zero,8080 <___vfiprintf_internal_r+0xe0c>
    8040:	d8802517 	ldw	r2,148(sp)
    8044:	14c11616 	blt	r2,r19,84a0 <___vfiprintf_internal_r+0x122c>
    8048:	d9002417 	ldw	r4,144(sp)
    804c:	2089883a 	add	r4,r4,r2
    8050:	d9002415 	stw	r4,144(sp)
    8054:	003e1806 	br	78b8 <__alt_exception_stack_pointer+0xf80078b8>
    8058:	d9801a04 	addi	r6,sp,104
    805c:	b80b883a 	mov	r5,r23
    8060:	a809883a 	mov	r4,r21
    8064:	00071600 	call	7160 <__sprint_r.part.0>
    8068:	103fba1e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    806c:	d9001b17 	ldw	r4,108(sp)
    8070:	d8801c17 	ldw	r2,112(sp)
    8074:	d811883a 	mov	r8,sp
    8078:	21400044 	addi	r5,r4,1
    807c:	003fd606 	br	7fd8 <__alt_exception_stack_pointer+0xf8007fd8>
    8080:	d9402017 	ldw	r5,128(sp)
    8084:	d9002117 	ldw	r4,132(sp)
    8088:	d9801a04 	addi	r6,sp,104
    808c:	00071600 	call	7160 <__sprint_r.part.0>
    8090:	103fb01e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8094:	d8801c17 	ldw	r2,112(sp)
    8098:	d8c02517 	ldw	r3,148(sp)
    809c:	1cc0010e 	bge	r3,r19,80a4 <___vfiprintf_internal_r+0xe30>
    80a0:	9807883a 	mov	r3,r19
    80a4:	d9002417 	ldw	r4,144(sp)
    80a8:	20c9883a 	add	r4,r4,r3
    80ac:	d9002415 	stw	r4,144(sp)
    80b0:	103e0126 	beq	r2,zero,78b8 <__alt_exception_stack_pointer+0xf80078b8>
    80b4:	d9402017 	ldw	r5,128(sp)
    80b8:	d9002117 	ldw	r4,132(sp)
    80bc:	d9801a04 	addi	r6,sp,104
    80c0:	00071600 	call	7160 <__sprint_r.part.0>
    80c4:	103dfc26 	beq	r2,zero,78b8 <__alt_exception_stack_pointer+0xf80078b8>
    80c8:	003fa206 	br	7f54 <__alt_exception_stack_pointer+0xf8007f54>
    80cc:	d9402017 	ldw	r5,128(sp)
    80d0:	d9002117 	ldw	r4,132(sp)
    80d4:	d9801a04 	addi	r6,sp,104
    80d8:	d9c02b15 	stw	r7,172(sp)
    80dc:	00071600 	call	7160 <__sprint_r.part.0>
    80e0:	d9c02b17 	ldw	r7,172(sp)
    80e4:	103f9b1e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    80e8:	d9001b17 	ldw	r4,108(sp)
    80ec:	d8801c17 	ldw	r2,112(sp)
    80f0:	d811883a 	mov	r8,sp
    80f4:	21800044 	addi	r6,r4,1
    80f8:	003dbf06 	br	77f8 <__alt_exception_stack_pointer+0xf80077f8>
    80fc:	1000d81e 	bne	r2,zero,8460 <___vfiprintf_internal_r+0x11ec>
    8100:	d9001d87 	ldb	r4,118(sp)
    8104:	20000a26 	beq	r4,zero,8130 <___vfiprintf_internal_r+0xebc>
    8108:	00800044 	movi	r2,1
    810c:	d9001d84 	addi	r4,sp,118
    8110:	100b883a 	mov	r5,r2
    8114:	d9000015 	stw	r4,0(sp)
    8118:	d8800115 	stw	r2,4(sp)
    811c:	d811883a 	mov	r8,sp
    8120:	2809883a 	mov	r4,r5
    8124:	42000204 	addi	r8,r8,8
    8128:	29400044 	addi	r5,r5,1
    812c:	003d9506 	br	7784 <__alt_exception_stack_pointer+0xf8007784>
    8130:	3800fd26 	beq	r7,zero,8528 <___vfiprintf_internal_r+0x12b4>
    8134:	00800084 	movi	r2,2
    8138:	d9001d04 	addi	r4,sp,116
    813c:	d9000015 	stw	r4,0(sp)
    8140:	d8800115 	stw	r2,4(sp)
    8144:	01400044 	movi	r5,1
    8148:	d811883a 	mov	r8,sp
    814c:	2809883a 	mov	r4,r5
    8150:	42000204 	addi	r8,r8,8
    8154:	29400044 	addi	r5,r5,1
    8158:	003f4606 	br	7e74 <__alt_exception_stack_pointer+0xf8007e74>
    815c:	d8802517 	ldw	r2,148(sp)
    8160:	14c0010e 	bge	r2,r19,8168 <___vfiprintf_internal_r+0xef4>
    8164:	9805883a 	mov	r2,r19
    8168:	d9402417 	ldw	r5,144(sp)
    816c:	288b883a 	add	r5,r5,r2
    8170:	d9402415 	stw	r5,144(sp)
    8174:	003dd006 	br	78b8 <__alt_exception_stack_pointer+0xf80078b8>
    8178:	d8001d85 	stb	zero,118(sp)
    817c:	80005d16 	blt	r16,zero,82f4 <___vfiprintf_internal_r+0x1080>
    8180:	00ffdfc4 	movi	r3,-129
    8184:	9d04b03a 	or	r2,r19,r20
    8188:	88e2703a 	and	r17,r17,r3
    818c:	103d3726 	beq	r2,zero,766c <__alt_exception_stack_pointer+0xf800766c>
    8190:	002b883a 	mov	r21,zero
    8194:	d9002617 	ldw	r4,152(sp)
    8198:	ddc01a04 	addi	r23,sp,104
    819c:	988003cc 	andi	r2,r19,15
    81a0:	a006973a 	slli	r3,r20,28
    81a4:	2085883a 	add	r2,r4,r2
    81a8:	9826d13a 	srli	r19,r19,4
    81ac:	10800003 	ldbu	r2,0(r2)
    81b0:	a028d13a 	srli	r20,r20,4
    81b4:	bdffffc4 	addi	r23,r23,-1
    81b8:	1ce6b03a 	or	r19,r3,r19
    81bc:	b8800005 	stb	r2,0(r23)
    81c0:	9d04b03a 	or	r2,r19,r20
    81c4:	103ff51e 	bne	r2,zero,819c <__alt_exception_stack_pointer+0xf800819c>
    81c8:	d8801e17 	ldw	r2,120(sp)
    81cc:	15e9c83a 	sub	r20,r2,r23
    81d0:	003d2b06 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    81d4:	d9402017 	ldw	r5,128(sp)
    81d8:	d9002117 	ldw	r4,132(sp)
    81dc:	d9801a04 	addi	r6,sp,104
    81e0:	00071600 	call	7160 <__sprint_r.part.0>
    81e4:	103f5b1e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    81e8:	d8801c17 	ldw	r2,112(sp)
    81ec:	d811883a 	mov	r8,sp
    81f0:	003f6706 	br	7f90 <__alt_exception_stack_pointer+0xf8007f90>
    81f4:	d9402017 	ldw	r5,128(sp)
    81f8:	d9002117 	ldw	r4,132(sp)
    81fc:	d9801a04 	addi	r6,sp,104
    8200:	00071600 	call	7160 <__sprint_r.part.0>
    8204:	103f531e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8208:	d811883a 	mov	r8,sp
    820c:	003cd906 	br	7574 <__alt_exception_stack_pointer+0xf8007574>
    8210:	10803fcc 	andi	r2,r2,255
    8214:	1080201c 	xori	r2,r2,128
    8218:	10bfe004 	addi	r2,r2,-128
    821c:	00c00c04 	movi	r3,48
    8220:	10ffe926 	beq	r2,r3,81c8 <__alt_exception_stack_pointer+0xf80081c8>
    8224:	b8ffffc5 	stb	r3,-1(r23)
    8228:	d8c01e17 	ldw	r3,120(sp)
    822c:	b8bfffc4 	addi	r2,r23,-1
    8230:	102f883a 	mov	r23,r2
    8234:	18a9c83a 	sub	r20,r3,r2
    8238:	003d1106 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    823c:	d9402017 	ldw	r5,128(sp)
    8240:	d9002117 	ldw	r4,132(sp)
    8244:	d9801a04 	addi	r6,sp,104
    8248:	d8c02a15 	stw	r3,168(sp)
    824c:	d9c02b15 	stw	r7,172(sp)
    8250:	00071600 	call	7160 <__sprint_r.part.0>
    8254:	d8c02a17 	ldw	r3,168(sp)
    8258:	d9c02b17 	ldw	r7,172(sp)
    825c:	103f3d1e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8260:	d9001b17 	ldw	r4,108(sp)
    8264:	d8801c17 	ldw	r2,112(sp)
    8268:	d811883a 	mov	r8,sp
    826c:	21400044 	addi	r5,r4,1
    8270:	003d4406 	br	7784 <__alt_exception_stack_pointer+0xf8007784>
    8274:	d9402017 	ldw	r5,128(sp)
    8278:	d9002117 	ldw	r4,132(sp)
    827c:	d9801a04 	addi	r6,sp,104
    8280:	d8c02a15 	stw	r3,168(sp)
    8284:	00071600 	call	7160 <__sprint_r.part.0>
    8288:	d8c02a17 	ldw	r3,168(sp)
    828c:	103f311e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8290:	d9001b17 	ldw	r4,108(sp)
    8294:	d8801c17 	ldw	r2,112(sp)
    8298:	d811883a 	mov	r8,sp
    829c:	21400044 	addi	r5,r4,1
    82a0:	003ef406 	br	7e74 <__alt_exception_stack_pointer+0xf8007e74>
    82a4:	1000bd1e 	bne	r2,zero,859c <___vfiprintf_internal_r+0x1328>
    82a8:	01400044 	movi	r5,1
    82ac:	0009883a 	mov	r4,zero
    82b0:	d811883a 	mov	r8,sp
    82b4:	003ef106 	br	7e7c <__alt_exception_stack_pointer+0xf8007e7c>
    82b8:	d9402017 	ldw	r5,128(sp)
    82bc:	d9002117 	ldw	r4,132(sp)
    82c0:	d9801a04 	addi	r6,sp,104
    82c4:	00071600 	call	7160 <__sprint_r.part.0>
    82c8:	103f221e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    82cc:	d9401b17 	ldw	r5,108(sp)
    82d0:	d8801c17 	ldw	r2,112(sp)
    82d4:	d811883a 	mov	r8,sp
    82d8:	29400044 	addi	r5,r5,1
    82dc:	003d6206 	br	7868 <__alt_exception_stack_pointer+0xf8007868>
    82e0:	01400074 	movhi	r5,1
    82e4:	297ecf04 	addi	r5,r5,-1220
    82e8:	d9402615 	stw	r5,152(sp)
    82ec:	d8c02215 	stw	r3,136(sp)
    82f0:	1023883a 	mov	r17,r2
    82f4:	9d04b03a 	or	r2,r19,r20
    82f8:	103fa51e 	bne	r2,zero,8190 <__alt_exception_stack_pointer+0xf8008190>
    82fc:	002b883a 	mov	r21,zero
    8300:	00800084 	movi	r2,2
    8304:	003e4a06 	br	7c30 <__alt_exception_stack_pointer+0xf8007c30>
    8308:	01400074 	movhi	r5,1
    830c:	297ecf04 	addi	r5,r5,-1220
    8310:	002b883a 	mov	r21,zero
    8314:	d9402615 	stw	r5,152(sp)
    8318:	003f9e06 	br	8194 <__alt_exception_stack_pointer+0xf8008194>
    831c:	d9402217 	ldw	r5,136(sp)
    8320:	d8001d85 	stb	zero,118(sp)
    8324:	0029883a 	mov	r20,zero
    8328:	28800104 	addi	r2,r5,4
    832c:	2cc00017 	ldw	r19,0(r5)
    8330:	803e3a16 	blt	r16,zero,7c1c <__alt_exception_stack_pointer+0xf8007c1c>
    8334:	00ffdfc4 	movi	r3,-129
    8338:	d8802215 	stw	r2,136(sp)
    833c:	88e2703a 	and	r17,r17,r3
    8340:	002b883a 	mov	r21,zero
    8344:	983e9b26 	beq	r19,zero,7db4 <__alt_exception_stack_pointer+0xf8007db4>
    8348:	00800244 	movi	r2,9
    834c:	14fdc936 	bltu	r2,r19,7a74 <__alt_exception_stack_pointer+0xf8007a74>
    8350:	003e9a06 	br	7dbc <__alt_exception_stack_pointer+0xf8007dbc>
    8354:	00800c04 	movi	r2,48
    8358:	d8c01d45 	stb	r3,117(sp)
    835c:	d8801d05 	stb	r2,116(sp)
    8360:	d8001d85 	stb	zero,118(sp)
    8364:	88c00094 	ori	r3,r17,2
    8368:	80009c16 	blt	r16,zero,85dc <___vfiprintf_internal_r+0x1368>
    836c:	00bfdfc4 	movi	r2,-129
    8370:	88a2703a 	and	r17,r17,r2
    8374:	8c400094 	ori	r17,r17,2
    8378:	002b883a 	mov	r21,zero
    837c:	003f8506 	br	8194 <__alt_exception_stack_pointer+0xf8008194>
    8380:	b029883a 	mov	r20,r22
    8384:	003c0b06 	br	73b4 <__alt_exception_stack_pointer+0xf80073b4>
    8388:	04e7c83a 	sub	r19,zero,r19
    838c:	05400b44 	movi	r21,45
    8390:	9804c03a 	cmpne	r2,r19,zero
    8394:	0529c83a 	sub	r20,zero,r20
    8398:	dd401d85 	stb	r21,118(sp)
    839c:	a0a9c83a 	sub	r20,r20,r2
    83a0:	80009716 	blt	r16,zero,8600 <___vfiprintf_internal_r+0x138c>
    83a4:	00bfdfc4 	movi	r2,-129
    83a8:	88a2703a 	and	r17,r17,r2
    83ac:	003db006 	br	7a70 <__alt_exception_stack_pointer+0xf8007a70>
    83b0:	b0c00007 	ldb	r3,0(r22)
    83b4:	003c0c06 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    83b8:	8880100c 	andi	r2,r17,64
    83bc:	d8001d85 	stb	zero,118(sp)
    83c0:	1000461e 	bne	r2,zero,84dc <___vfiprintf_internal_r+0x1268>
    83c4:	d9002217 	ldw	r4,136(sp)
    83c8:	0029883a 	mov	r20,zero
    83cc:	20800104 	addi	r2,r4,4
    83d0:	24c00017 	ldw	r19,0(r4)
    83d4:	803df80e 	bge	r16,zero,7bb8 <__alt_exception_stack_pointer+0xf8007bb8>
    83d8:	9d06b03a 	or	r3,r19,r20
    83dc:	d8802215 	stw	r2,136(sp)
    83e0:	183d5e1e 	bne	r3,zero,795c <__alt_exception_stack_pointer+0xf800795c>
    83e4:	002b883a 	mov	r21,zero
    83e8:	0005883a 	mov	r2,zero
    83ec:	003e1006 	br	7c30 <__alt_exception_stack_pointer+0xf8007c30>
    83f0:	8880040c 	andi	r2,r17,16
    83f4:	1000321e 	bne	r2,zero,84c0 <___vfiprintf_internal_r+0x124c>
    83f8:	8c40100c 	andi	r17,r17,64
    83fc:	88008d26 	beq	r17,zero,8634 <___vfiprintf_internal_r+0x13c0>
    8400:	d9402217 	ldw	r5,136(sp)
    8404:	d8c02417 	ldw	r3,144(sp)
    8408:	28800017 	ldw	r2,0(r5)
    840c:	29400104 	addi	r5,r5,4
    8410:	d9402215 	stw	r5,136(sp)
    8414:	10c0000d 	sth	r3,0(r2)
    8418:	003bca06 	br	7344 <__alt_exception_stack_pointer+0xf8007344>
    841c:	8880100c 	andi	r2,r17,64
    8420:	10003a26 	beq	r2,zero,850c <___vfiprintf_internal_r+0x1298>
    8424:	d8802217 	ldw	r2,136(sp)
    8428:	14c0000f 	ldh	r19,0(r2)
    842c:	10800104 	addi	r2,r2,4
    8430:	d8802215 	stw	r2,136(sp)
    8434:	9829d7fa 	srai	r20,r19,31
    8438:	a005883a 	mov	r2,r20
    843c:	003d8506 	br	7a54 <__alt_exception_stack_pointer+0xf8007a54>
    8440:	8880100c 	andi	r2,r17,64
    8444:	10002b26 	beq	r2,zero,84f4 <___vfiprintf_internal_r+0x1280>
    8448:	d8802217 	ldw	r2,136(sp)
    844c:	0029883a 	mov	r20,zero
    8450:	14c0000b 	ldhu	r19,0(r2)
    8454:	10800104 	addi	r2,r2,4
    8458:	d8802215 	stw	r2,136(sp)
    845c:	003d5d06 	br	79d4 <__alt_exception_stack_pointer+0xf80079d4>
    8460:	d9402017 	ldw	r5,128(sp)
    8464:	d9002117 	ldw	r4,132(sp)
    8468:	d9801a04 	addi	r6,sp,104
    846c:	d8c02a15 	stw	r3,168(sp)
    8470:	d9c02b15 	stw	r7,172(sp)
    8474:	00071600 	call	7160 <__sprint_r.part.0>
    8478:	d8c02a17 	ldw	r3,168(sp)
    847c:	d9c02b17 	ldw	r7,172(sp)
    8480:	103eb41e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    8484:	d9001b17 	ldw	r4,108(sp)
    8488:	d8801c17 	ldw	r2,112(sp)
    848c:	d811883a 	mov	r8,sp
    8490:	21400044 	addi	r5,r4,1
    8494:	003e6706 	br	7e34 <__alt_exception_stack_pointer+0xf8007e34>
    8498:	00bfffc4 	movi	r2,-1
    849c:	003c4a06 	br	75c8 <__alt_exception_stack_pointer+0xf80075c8>
    84a0:	9805883a 	mov	r2,r19
    84a4:	003ee806 	br	8048 <__alt_exception_stack_pointer+0xf8008048>
    84a8:	d8c02217 	ldw	r3,136(sp)
    84ac:	0029883a 	mov	r20,zero
    84b0:	18800104 	addi	r2,r3,4
    84b4:	1cc0000b 	ldhu	r19,0(r3)
    84b8:	803f9e0e 	bge	r16,zero,8334 <__alt_exception_stack_pointer+0xf8008334>
    84bc:	003dd706 	br	7c1c <__alt_exception_stack_pointer+0xf8007c1c>
    84c0:	d8c02217 	ldw	r3,136(sp)
    84c4:	d9002417 	ldw	r4,144(sp)
    84c8:	18800017 	ldw	r2,0(r3)
    84cc:	18c00104 	addi	r3,r3,4
    84d0:	d8c02215 	stw	r3,136(sp)
    84d4:	11000015 	stw	r4,0(r2)
    84d8:	003b9a06 	br	7344 <__alt_exception_stack_pointer+0xf8007344>
    84dc:	d8c02217 	ldw	r3,136(sp)
    84e0:	0029883a 	mov	r20,zero
    84e4:	18800104 	addi	r2,r3,4
    84e8:	1cc0000b 	ldhu	r19,0(r3)
    84ec:	803db20e 	bge	r16,zero,7bb8 <__alt_exception_stack_pointer+0xf8007bb8>
    84f0:	003fb906 	br	83d8 <__alt_exception_stack_pointer+0xf80083d8>
    84f4:	d9002217 	ldw	r4,136(sp)
    84f8:	0029883a 	mov	r20,zero
    84fc:	24c00017 	ldw	r19,0(r4)
    8500:	21000104 	addi	r4,r4,4
    8504:	d9002215 	stw	r4,136(sp)
    8508:	003d3206 	br	79d4 <__alt_exception_stack_pointer+0xf80079d4>
    850c:	d8c02217 	ldw	r3,136(sp)
    8510:	1cc00017 	ldw	r19,0(r3)
    8514:	18c00104 	addi	r3,r3,4
    8518:	d8c02215 	stw	r3,136(sp)
    851c:	9829d7fa 	srai	r20,r19,31
    8520:	a005883a 	mov	r2,r20
    8524:	003d4b06 	br	7a54 <__alt_exception_stack_pointer+0xf8007a54>
    8528:	0009883a 	mov	r4,zero
    852c:	01400044 	movi	r5,1
    8530:	d811883a 	mov	r8,sp
    8534:	003e4f06 	br	7e74 <__alt_exception_stack_pointer+0xf8007e74>
    8538:	d8c02215 	stw	r3,136(sp)
    853c:	002b883a 	mov	r21,zero
    8540:	003db806 	br	7c24 <__alt_exception_stack_pointer+0xf8007c24>
    8544:	d811883a 	mov	r8,sp
    8548:	003e9606 	br	7fa4 <__alt_exception_stack_pointer+0xf8007fa4>
    854c:	01000074 	movhi	r4,1
    8550:	213f3004 	addi	r4,r4,-832
    8554:	d9002315 	stw	r4,140(sp)
    8558:	003e6306 	br	7ee8 <__alt_exception_stack_pointer+0xf8007ee8>
    855c:	b0c00043 	ldbu	r3,1(r22)
    8560:	8c400814 	ori	r17,r17,32
    8564:	b5800044 	addi	r22,r22,1
    8568:	18c03fcc 	andi	r3,r3,255
    856c:	18c0201c 	xori	r3,r3,128
    8570:	18ffe004 	addi	r3,r3,-128
    8574:	003b9c06 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    8578:	b809883a 	mov	r4,r23
    857c:	da002a15 	stw	r8,168(sp)
    8580:	00070c80 	call	70c8 <strlen>
    8584:	1029883a 	mov	r20,r2
    8588:	dd401d83 	ldbu	r21,118(sp)
    858c:	df002215 	stw	fp,136(sp)
    8590:	0021883a 	mov	r16,zero
    8594:	da002a17 	ldw	r8,168(sp)
    8598:	003c3906 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    859c:	d9402017 	ldw	r5,128(sp)
    85a0:	d9002117 	ldw	r4,132(sp)
    85a4:	d9801a04 	addi	r6,sp,104
    85a8:	00071600 	call	7160 <__sprint_r.part.0>
    85ac:	103e691e 	bne	r2,zero,7f54 <__alt_exception_stack_pointer+0xf8007f54>
    85b0:	d9001b17 	ldw	r4,108(sp)
    85b4:	d8801c17 	ldw	r2,112(sp)
    85b8:	d811883a 	mov	r8,sp
    85bc:	21400044 	addi	r5,r4,1
    85c0:	003e2e06 	br	7e7c <__alt_exception_stack_pointer+0xf8007e7c>
    85c4:	01000074 	movhi	r4,1
    85c8:	213f3404 	addi	r4,r4,-816
    85cc:	d9002315 	stw	r4,140(sp)
    85d0:	d9001b17 	ldw	r4,108(sp)
    85d4:	21000044 	addi	r4,r4,1
    85d8:	003c5e06 	br	7754 <__alt_exception_stack_pointer+0xf8007754>
    85dc:	002b883a 	mov	r21,zero
    85e0:	00800084 	movi	r2,2
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	01000044 	movi	r4,1
    85ec:	11002b26 	beq	r2,r4,869c <___vfiprintf_internal_r+0x1428>
    85f0:	01000084 	movi	r4,2
    85f4:	11002b1e 	bne	r2,r4,86a4 <___vfiprintf_internal_r+0x1430>
    85f8:	1823883a 	mov	r17,r3
    85fc:	003ee506 	br	8194 <__alt_exception_stack_pointer+0xf8008194>
    8600:	8807883a 	mov	r3,r17
    8604:	00800044 	movi	r2,1
    8608:	003ff606 	br	85e4 <__alt_exception_stack_pointer+0xf80085e4>
    860c:	00800184 	movi	r2,6
    8610:	1400012e 	bgeu	r2,r16,8618 <___vfiprintf_internal_r+0x13a4>
    8614:	1021883a 	mov	r16,r2
    8618:	8029883a 	mov	r20,r16
    861c:	8027883a 	mov	r19,r16
    8620:	80002216 	blt	r16,zero,86ac <___vfiprintf_internal_r+0x1438>
    8624:	05c00074 	movhi	r23,1
    8628:	df002215 	stw	fp,136(sp)
    862c:	bdfed404 	addi	r23,r23,-1200
    8630:	003cfb06 	br	7a20 <__alt_exception_stack_pointer+0xf8007a20>
    8634:	d9002217 	ldw	r4,136(sp)
    8638:	d9402417 	ldw	r5,144(sp)
    863c:	20800017 	ldw	r2,0(r4)
    8640:	21000104 	addi	r4,r4,4
    8644:	d9002215 	stw	r4,136(sp)
    8648:	11400015 	stw	r5,0(r2)
    864c:	003b3d06 	br	7344 <__alt_exception_stack_pointer+0xf8007344>
    8650:	01400074 	movhi	r5,1
    8654:	297f3404 	addi	r5,r5,-816
    8658:	d9402315 	stw	r5,140(sp)
    865c:	d9401b17 	ldw	r5,108(sp)
    8660:	29400044 	addi	r5,r5,1
    8664:	003e6d06 	br	801c <__alt_exception_stack_pointer+0xf800801c>
    8668:	8029883a 	mov	r20,r16
    866c:	dd401d83 	ldbu	r21,118(sp)
    8670:	df002215 	stw	fp,136(sp)
    8674:	0021883a 	mov	r16,zero
    8678:	003c0106 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    867c:	00c00074 	movhi	r3,1
    8680:	18ff3004 	addi	r3,r3,-832
    8684:	d8c02315 	stw	r3,140(sp)
    8688:	280d883a 	mov	r6,r5
    868c:	003c6906 	br	7834 <__alt_exception_stack_pointer+0xf8007834>
    8690:	802d883a 	mov	r22,r16
    8694:	0021883a 	mov	r16,zero
    8698:	003b5406 	br	73ec <__alt_exception_stack_pointer+0xf80073ec>
    869c:	1823883a 	mov	r17,r3
    86a0:	003cf306 	br	7a70 <__alt_exception_stack_pointer+0xf8007a70>
    86a4:	1823883a 	mov	r17,r3
    86a8:	003cad06 	br	7960 <__alt_exception_stack_pointer+0xf8007960>
    86ac:	0027883a 	mov	r19,zero
    86b0:	003fdc06 	br	8624 <__alt_exception_stack_pointer+0xf8008624>
    86b4:	d9402217 	ldw	r5,136(sp)
    86b8:	8005883a 	mov	r2,r16
    86bc:	b0c00043 	ldbu	r3,1(r22)
    86c0:	2c000017 	ldw	r16,0(r5)
    86c4:	29000104 	addi	r4,r5,4
    86c8:	d9002215 	stw	r4,136(sp)
    86cc:	102d883a 	mov	r22,r2
    86d0:	803fa50e 	bge	r16,zero,8568 <__alt_exception_stack_pointer+0xf8008568>
    86d4:	18c03fcc 	andi	r3,r3,255
    86d8:	18c0201c 	xori	r3,r3,128
    86dc:	043fffc4 	movi	r16,-1
    86e0:	18ffe004 	addi	r3,r3,-128
    86e4:	003b4006 	br	73e8 <__alt_exception_stack_pointer+0xf80073e8>
    86e8:	d9402303 	ldbu	r5,140(sp)
    86ec:	d9401d85 	stb	r5,118(sp)
    86f0:	003cae06 	br	79ac <__alt_exception_stack_pointer+0xf80079ac>
    86f4:	d8c02303 	ldbu	r3,140(sp)
    86f8:	d8c01d85 	stb	r3,118(sp)
    86fc:	003d1406 	br	7b50 <__alt_exception_stack_pointer+0xf8007b50>
    8700:	d8c02303 	ldbu	r3,140(sp)
    8704:	d8c01d85 	stb	r3,118(sp)
    8708:	003cca06 	br	7a34 <__alt_exception_stack_pointer+0xf8007a34>
    870c:	8880004c 	andi	r2,r17,1
    8710:	002b883a 	mov	r21,zero
    8714:	10000526 	beq	r2,zero,872c <___vfiprintf_internal_r+0x14b8>
    8718:	00800c04 	movi	r2,48
    871c:	d88019c5 	stb	r2,103(sp)
    8720:	dd002817 	ldw	r20,160(sp)
    8724:	ddc019c4 	addi	r23,sp,103
    8728:	003bd506 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    872c:	0029883a 	mov	r20,zero
    8730:	ddc01a04 	addi	r23,sp,104
    8734:	003bd206 	br	7680 <__alt_exception_stack_pointer+0xf8007680>
    8738:	d9002303 	ldbu	r4,140(sp)
    873c:	d9001d85 	stb	r4,118(sp)
    8740:	003da606 	br	7ddc <__alt_exception_stack_pointer+0xf8007ddc>
    8744:	d8c02303 	ldbu	r3,140(sp)
    8748:	d8c01d85 	stb	r3,118(sp)
    874c:	003c7606 	br	7928 <__alt_exception_stack_pointer+0xf8007928>
    8750:	d8c02303 	ldbu	r3,140(sp)
    8754:	d8c01d85 	stb	r3,118(sp)
    8758:	003c6506 	br	78f0 <__alt_exception_stack_pointer+0xf80078f0>
    875c:	d9002303 	ldbu	r4,140(sp)
    8760:	d9001d85 	stb	r4,118(sp)
    8764:	003d3d06 	br	7c5c <__alt_exception_stack_pointer+0xf8007c5c>
    8768:	d8c02303 	ldbu	r3,140(sp)
    876c:	d8c01d85 	stb	r3,118(sp)
    8770:	003d1d06 	br	7be8 <__alt_exception_stack_pointer+0xf8007be8>
    8774:	d8c02303 	ldbu	r3,140(sp)
    8778:	d8c01d85 	stb	r3,118(sp)
    877c:	003d0306 	br	7b8c <__alt_exception_stack_pointer+0xf8007b8c>

00008780 <__vfiprintf_internal>:
    8780:	00800074 	movhi	r2,1
    8784:	10863804 	addi	r2,r2,6368
    8788:	300f883a 	mov	r7,r6
    878c:	280d883a 	mov	r6,r5
    8790:	200b883a 	mov	r5,r4
    8794:	11000017 	ldw	r4,0(r2)
    8798:	00072741 	jmpi	7274 <___vfiprintf_internal_r>

0000879c <__sbprintf>:
    879c:	2880030b 	ldhu	r2,12(r5)
    87a0:	2ac01917 	ldw	r11,100(r5)
    87a4:	2a80038b 	ldhu	r10,14(r5)
    87a8:	2a400717 	ldw	r9,28(r5)
    87ac:	2a000917 	ldw	r8,36(r5)
    87b0:	defee204 	addi	sp,sp,-1144
    87b4:	00c10004 	movi	r3,1024
    87b8:	dc011a15 	stw	r16,1128(sp)
    87bc:	10bfff4c 	andi	r2,r2,65533
    87c0:	2821883a 	mov	r16,r5
    87c4:	d8cb883a 	add	r5,sp,r3
    87c8:	dc811c15 	stw	r18,1136(sp)
    87cc:	dc411b15 	stw	r17,1132(sp)
    87d0:	dfc11d15 	stw	ra,1140(sp)
    87d4:	2025883a 	mov	r18,r4
    87d8:	d881030d 	sth	r2,1036(sp)
    87dc:	dac11915 	stw	r11,1124(sp)
    87e0:	da81038d 	sth	r10,1038(sp)
    87e4:	da410715 	stw	r9,1052(sp)
    87e8:	da010915 	stw	r8,1060(sp)
    87ec:	dec10015 	stw	sp,1024(sp)
    87f0:	dec10415 	stw	sp,1040(sp)
    87f4:	d8c10215 	stw	r3,1032(sp)
    87f8:	d8c10515 	stw	r3,1044(sp)
    87fc:	d8010615 	stw	zero,1048(sp)
    8800:	00072740 	call	7274 <___vfiprintf_internal_r>
    8804:	1023883a 	mov	r17,r2
    8808:	10000416 	blt	r2,zero,881c <__sbprintf+0x80>
    880c:	d9410004 	addi	r5,sp,1024
    8810:	9009883a 	mov	r4,r18
    8814:	0004da00 	call	4da0 <_fflush_r>
    8818:	10000d1e 	bne	r2,zero,8850 <__sbprintf+0xb4>
    881c:	d881030b 	ldhu	r2,1036(sp)
    8820:	1080100c 	andi	r2,r2,64
    8824:	10000326 	beq	r2,zero,8834 <__sbprintf+0x98>
    8828:	8080030b 	ldhu	r2,12(r16)
    882c:	10801014 	ori	r2,r2,64
    8830:	8080030d 	sth	r2,12(r16)
    8834:	8805883a 	mov	r2,r17
    8838:	dfc11d17 	ldw	ra,1140(sp)
    883c:	dc811c17 	ldw	r18,1136(sp)
    8840:	dc411b17 	ldw	r17,1132(sp)
    8844:	dc011a17 	ldw	r16,1128(sp)
    8848:	dec11e04 	addi	sp,sp,1144
    884c:	f800283a 	ret
    8850:	047fffc4 	movi	r17,-1
    8854:	003ff106 	br	881c <__alt_exception_stack_pointer+0xf800881c>

00008858 <_write_r>:
    8858:	defffd04 	addi	sp,sp,-12
    885c:	2805883a 	mov	r2,r5
    8860:	dc000015 	stw	r16,0(sp)
    8864:	04000074 	movhi	r16,1
    8868:	dc400115 	stw	r17,4(sp)
    886c:	300b883a 	mov	r5,r6
    8870:	840d0304 	addi	r16,r16,13324
    8874:	2023883a 	mov	r17,r4
    8878:	380d883a 	mov	r6,r7
    887c:	1009883a 	mov	r4,r2
    8880:	dfc00215 	stw	ra,8(sp)
    8884:	80000015 	stw	zero,0(r16)
    8888:	000dc000 	call	dc00 <write>
    888c:	00ffffc4 	movi	r3,-1
    8890:	10c00526 	beq	r2,r3,88a8 <_write_r+0x50>
    8894:	dfc00217 	ldw	ra,8(sp)
    8898:	dc400117 	ldw	r17,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00304 	addi	sp,sp,12
    88a4:	f800283a 	ret
    88a8:	80c00017 	ldw	r3,0(r16)
    88ac:	183ff926 	beq	r3,zero,8894 <__alt_exception_stack_pointer+0xf8008894>
    88b0:	88c00015 	stw	r3,0(r17)
    88b4:	003ff706 	br	8894 <__alt_exception_stack_pointer+0xf8008894>

000088b8 <_close_r>:
    88b8:	defffd04 	addi	sp,sp,-12
    88bc:	dc000015 	stw	r16,0(sp)
    88c0:	04000074 	movhi	r16,1
    88c4:	dc400115 	stw	r17,4(sp)
    88c8:	840d0304 	addi	r16,r16,13324
    88cc:	2023883a 	mov	r17,r4
    88d0:	2809883a 	mov	r4,r5
    88d4:	dfc00215 	stw	ra,8(sp)
    88d8:	80000015 	stw	zero,0(r16)
    88dc:	000d3a80 	call	d3a8 <close>
    88e0:	00ffffc4 	movi	r3,-1
    88e4:	10c00526 	beq	r2,r3,88fc <_close_r+0x44>
    88e8:	dfc00217 	ldw	ra,8(sp)
    88ec:	dc400117 	ldw	r17,4(sp)
    88f0:	dc000017 	ldw	r16,0(sp)
    88f4:	dec00304 	addi	sp,sp,12
    88f8:	f800283a 	ret
    88fc:	80c00017 	ldw	r3,0(r16)
    8900:	183ff926 	beq	r3,zero,88e8 <__alt_exception_stack_pointer+0xf80088e8>
    8904:	88c00015 	stw	r3,0(r17)
    8908:	003ff706 	br	88e8 <__alt_exception_stack_pointer+0xf80088e8>

0000890c <_calloc_r>:
    890c:	defffe04 	addi	sp,sp,-8
    8910:	2805883a 	mov	r2,r5
    8914:	dc000015 	stw	r16,0(sp)
    8918:	300b883a 	mov	r5,r6
    891c:	2021883a 	mov	r16,r4
    8920:	1009883a 	mov	r4,r2
    8924:	dfc00115 	stw	ra,4(sp)
    8928:	000aaa00 	call	aaa0 <__mulsi3>
    892c:	100b883a 	mov	r5,r2
    8930:	8009883a 	mov	r4,r16
    8934:	00005000 	call	500 <_malloc_r>
    8938:	10002926 	beq	r2,zero,89e0 <_calloc_r+0xd4>
    893c:	11bfff17 	ldw	r6,-4(r2)
    8940:	1021883a 	mov	r16,r2
    8944:	00bfff04 	movi	r2,-4
    8948:	308c703a 	and	r6,r6,r2
    894c:	00c00904 	movi	r3,36
    8950:	308d883a 	add	r6,r6,r2
    8954:	19801636 	bltu	r3,r6,89b0 <_calloc_r+0xa4>
    8958:	008004c4 	movi	r2,19
    895c:	11800b2e 	bgeu	r2,r6,898c <_calloc_r+0x80>
    8960:	80000015 	stw	zero,0(r16)
    8964:	80000115 	stw	zero,4(r16)
    8968:	008006c4 	movi	r2,27
    896c:	11801a2e 	bgeu	r2,r6,89d8 <_calloc_r+0xcc>
    8970:	80000215 	stw	zero,8(r16)
    8974:	80000315 	stw	zero,12(r16)
    8978:	30c0151e 	bne	r6,r3,89d0 <_calloc_r+0xc4>
    897c:	80000415 	stw	zero,16(r16)
    8980:	80800604 	addi	r2,r16,24
    8984:	80000515 	stw	zero,20(r16)
    8988:	00000106 	br	8990 <_calloc_r+0x84>
    898c:	8005883a 	mov	r2,r16
    8990:	10000015 	stw	zero,0(r2)
    8994:	10000115 	stw	zero,4(r2)
    8998:	10000215 	stw	zero,8(r2)
    899c:	8005883a 	mov	r2,r16
    89a0:	dfc00117 	ldw	ra,4(sp)
    89a4:	dc000017 	ldw	r16,0(sp)
    89a8:	dec00204 	addi	sp,sp,8
    89ac:	f800283a 	ret
    89b0:	000b883a 	mov	r5,zero
    89b4:	8009883a 	mov	r4,r16
    89b8:	0005c5c0 	call	5c5c <memset>
    89bc:	8005883a 	mov	r2,r16
    89c0:	dfc00117 	ldw	ra,4(sp)
    89c4:	dc000017 	ldw	r16,0(sp)
    89c8:	dec00204 	addi	sp,sp,8
    89cc:	f800283a 	ret
    89d0:	80800404 	addi	r2,r16,16
    89d4:	003fee06 	br	8990 <__alt_exception_stack_pointer+0xf8008990>
    89d8:	80800204 	addi	r2,r16,8
    89dc:	003fec06 	br	8990 <__alt_exception_stack_pointer+0xf8008990>
    89e0:	0005883a 	mov	r2,zero
    89e4:	003fee06 	br	89a0 <__alt_exception_stack_pointer+0xf80089a0>

000089e8 <_fclose_r>:
    89e8:	28003926 	beq	r5,zero,8ad0 <_fclose_r+0xe8>
    89ec:	defffc04 	addi	sp,sp,-16
    89f0:	dc400115 	stw	r17,4(sp)
    89f4:	dc000015 	stw	r16,0(sp)
    89f8:	dfc00315 	stw	ra,12(sp)
    89fc:	dc800215 	stw	r18,8(sp)
    8a00:	2023883a 	mov	r17,r4
    8a04:	2821883a 	mov	r16,r5
    8a08:	20000226 	beq	r4,zero,8a14 <_fclose_r+0x2c>
    8a0c:	20800e17 	ldw	r2,56(r4)
    8a10:	10002726 	beq	r2,zero,8ab0 <_fclose_r+0xc8>
    8a14:	8080030f 	ldh	r2,12(r16)
    8a18:	1000071e 	bne	r2,zero,8a38 <_fclose_r+0x50>
    8a1c:	0005883a 	mov	r2,zero
    8a20:	dfc00317 	ldw	ra,12(sp)
    8a24:	dc800217 	ldw	r18,8(sp)
    8a28:	dc400117 	ldw	r17,4(sp)
    8a2c:	dc000017 	ldw	r16,0(sp)
    8a30:	dec00404 	addi	sp,sp,16
    8a34:	f800283a 	ret
    8a38:	800b883a 	mov	r5,r16
    8a3c:	8809883a 	mov	r4,r17
    8a40:	0004b840 	call	4b84 <__sflush_r>
    8a44:	1025883a 	mov	r18,r2
    8a48:	80800b17 	ldw	r2,44(r16)
    8a4c:	10000426 	beq	r2,zero,8a60 <_fclose_r+0x78>
    8a50:	81400717 	ldw	r5,28(r16)
    8a54:	8809883a 	mov	r4,r17
    8a58:	103ee83a 	callr	r2
    8a5c:	10001616 	blt	r2,zero,8ab8 <_fclose_r+0xd0>
    8a60:	8080030b 	ldhu	r2,12(r16)
    8a64:	1080200c 	andi	r2,r2,128
    8a68:	1000151e 	bne	r2,zero,8ac0 <_fclose_r+0xd8>
    8a6c:	81400c17 	ldw	r5,48(r16)
    8a70:	28000526 	beq	r5,zero,8a88 <_fclose_r+0xa0>
    8a74:	80801004 	addi	r2,r16,64
    8a78:	28800226 	beq	r5,r2,8a84 <_fclose_r+0x9c>
    8a7c:	8809883a 	mov	r4,r17
    8a80:	00053000 	call	5300 <_free_r>
    8a84:	80000c15 	stw	zero,48(r16)
    8a88:	81401117 	ldw	r5,68(r16)
    8a8c:	28000326 	beq	r5,zero,8a9c <_fclose_r+0xb4>
    8a90:	8809883a 	mov	r4,r17
    8a94:	00053000 	call	5300 <_free_r>
    8a98:	80001115 	stw	zero,68(r16)
    8a9c:	000519c0 	call	519c <__sfp_lock_acquire>
    8aa0:	8000030d 	sth	zero,12(r16)
    8aa4:	00051a00 	call	51a0 <__sfp_lock_release>
    8aa8:	9005883a 	mov	r2,r18
    8aac:	003fdc06 	br	8a20 <__alt_exception_stack_pointer+0xf8008a20>
    8ab0:	000518c0 	call	518c <__sinit>
    8ab4:	003fd706 	br	8a14 <__alt_exception_stack_pointer+0xf8008a14>
    8ab8:	04bfffc4 	movi	r18,-1
    8abc:	003fe806 	br	8a60 <__alt_exception_stack_pointer+0xf8008a60>
    8ac0:	81400417 	ldw	r5,16(r16)
    8ac4:	8809883a 	mov	r4,r17
    8ac8:	00053000 	call	5300 <_free_r>
    8acc:	003fe706 	br	8a6c <__alt_exception_stack_pointer+0xf8008a6c>
    8ad0:	0005883a 	mov	r2,zero
    8ad4:	f800283a 	ret

00008ad8 <fclose>:
    8ad8:	00800074 	movhi	r2,1
    8adc:	10863804 	addi	r2,r2,6368
    8ae0:	200b883a 	mov	r5,r4
    8ae4:	11000017 	ldw	r4,0(r2)
    8ae8:	00089e81 	jmpi	89e8 <_fclose_r>

00008aec <__fputwc>:
    8aec:	defff804 	addi	sp,sp,-32
    8af0:	dcc00415 	stw	r19,16(sp)
    8af4:	dc800315 	stw	r18,12(sp)
    8af8:	dc000115 	stw	r16,4(sp)
    8afc:	dfc00715 	stw	ra,28(sp)
    8b00:	dd400615 	stw	r21,24(sp)
    8b04:	dd000515 	stw	r20,20(sp)
    8b08:	dc400215 	stw	r17,8(sp)
    8b0c:	2027883a 	mov	r19,r4
    8b10:	2825883a 	mov	r18,r5
    8b14:	3021883a 	mov	r16,r6
    8b18:	00058200 	call	5820 <__locale_mb_cur_max>
    8b1c:	00c00044 	movi	r3,1
    8b20:	10c03e26 	beq	r2,r3,8c1c <__fputwc+0x130>
    8b24:	81c01704 	addi	r7,r16,92
    8b28:	900d883a 	mov	r6,r18
    8b2c:	d80b883a 	mov	r5,sp
    8b30:	9809883a 	mov	r4,r19
    8b34:	0009b440 	call	9b44 <_wcrtomb_r>
    8b38:	1029883a 	mov	r20,r2
    8b3c:	00bfffc4 	movi	r2,-1
    8b40:	a0802026 	beq	r20,r2,8bc4 <__fputwc+0xd8>
    8b44:	d9400003 	ldbu	r5,0(sp)
    8b48:	a0001c26 	beq	r20,zero,8bbc <__fputwc+0xd0>
    8b4c:	0023883a 	mov	r17,zero
    8b50:	05400284 	movi	r21,10
    8b54:	00000906 	br	8b7c <__fputwc+0x90>
    8b58:	80800017 	ldw	r2,0(r16)
    8b5c:	11400005 	stb	r5,0(r2)
    8b60:	80c00017 	ldw	r3,0(r16)
    8b64:	18c00044 	addi	r3,r3,1
    8b68:	80c00015 	stw	r3,0(r16)
    8b6c:	8c400044 	addi	r17,r17,1
    8b70:	dc45883a 	add	r2,sp,r17
    8b74:	8d00112e 	bgeu	r17,r20,8bbc <__fputwc+0xd0>
    8b78:	11400003 	ldbu	r5,0(r2)
    8b7c:	80c00217 	ldw	r3,8(r16)
    8b80:	18ffffc4 	addi	r3,r3,-1
    8b84:	80c00215 	stw	r3,8(r16)
    8b88:	183ff30e 	bge	r3,zero,8b58 <__alt_exception_stack_pointer+0xf8008b58>
    8b8c:	80800617 	ldw	r2,24(r16)
    8b90:	18801916 	blt	r3,r2,8bf8 <__fputwc+0x10c>
    8b94:	80800017 	ldw	r2,0(r16)
    8b98:	11400005 	stb	r5,0(r2)
    8b9c:	80800017 	ldw	r2,0(r16)
    8ba0:	10c00003 	ldbu	r3,0(r2)
    8ba4:	10800044 	addi	r2,r2,1
    8ba8:	1d402326 	beq	r3,r21,8c38 <__fputwc+0x14c>
    8bac:	80800015 	stw	r2,0(r16)
    8bb0:	8c400044 	addi	r17,r17,1
    8bb4:	dc45883a 	add	r2,sp,r17
    8bb8:	8d3fef36 	bltu	r17,r20,8b78 <__alt_exception_stack_pointer+0xf8008b78>
    8bbc:	9005883a 	mov	r2,r18
    8bc0:	00000406 	br	8bd4 <__fputwc+0xe8>
    8bc4:	80c0030b 	ldhu	r3,12(r16)
    8bc8:	a005883a 	mov	r2,r20
    8bcc:	18c01014 	ori	r3,r3,64
    8bd0:	80c0030d 	sth	r3,12(r16)
    8bd4:	dfc00717 	ldw	ra,28(sp)
    8bd8:	dd400617 	ldw	r21,24(sp)
    8bdc:	dd000517 	ldw	r20,20(sp)
    8be0:	dcc00417 	ldw	r19,16(sp)
    8be4:	dc800317 	ldw	r18,12(sp)
    8be8:	dc400217 	ldw	r17,8(sp)
    8bec:	dc000117 	ldw	r16,4(sp)
    8bf0:	dec00804 	addi	sp,sp,32
    8bf4:	f800283a 	ret
    8bf8:	800d883a 	mov	r6,r16
    8bfc:	29403fcc 	andi	r5,r5,255
    8c00:	9809883a 	mov	r4,r19
    8c04:	00099ec0 	call	99ec <__swbuf_r>
    8c08:	10bfffe0 	cmpeqi	r2,r2,-1
    8c0c:	10803fcc 	andi	r2,r2,255
    8c10:	103fd626 	beq	r2,zero,8b6c <__alt_exception_stack_pointer+0xf8008b6c>
    8c14:	00bfffc4 	movi	r2,-1
    8c18:	003fee06 	br	8bd4 <__alt_exception_stack_pointer+0xf8008bd4>
    8c1c:	90ffffc4 	addi	r3,r18,-1
    8c20:	01003f84 	movi	r4,254
    8c24:	20ffbf36 	bltu	r4,r3,8b24 <__alt_exception_stack_pointer+0xf8008b24>
    8c28:	900b883a 	mov	r5,r18
    8c2c:	dc800005 	stb	r18,0(sp)
    8c30:	1029883a 	mov	r20,r2
    8c34:	003fc506 	br	8b4c <__alt_exception_stack_pointer+0xf8008b4c>
    8c38:	800d883a 	mov	r6,r16
    8c3c:	a80b883a 	mov	r5,r21
    8c40:	9809883a 	mov	r4,r19
    8c44:	00099ec0 	call	99ec <__swbuf_r>
    8c48:	10bfffe0 	cmpeqi	r2,r2,-1
    8c4c:	003fef06 	br	8c0c <__alt_exception_stack_pointer+0xf8008c0c>

00008c50 <_fputwc_r>:
    8c50:	3080030b 	ldhu	r2,12(r6)
    8c54:	10c8000c 	andi	r3,r2,8192
    8c58:	1800051e 	bne	r3,zero,8c70 <_fputwc_r+0x20>
    8c5c:	30c01917 	ldw	r3,100(r6)
    8c60:	10880014 	ori	r2,r2,8192
    8c64:	3080030d 	sth	r2,12(r6)
    8c68:	18880014 	ori	r2,r3,8192
    8c6c:	30801915 	stw	r2,100(r6)
    8c70:	0008aec1 	jmpi	8aec <__fputwc>

00008c74 <fputwc>:
    8c74:	00800074 	movhi	r2,1
    8c78:	defffc04 	addi	sp,sp,-16
    8c7c:	10863804 	addi	r2,r2,6368
    8c80:	dc000115 	stw	r16,4(sp)
    8c84:	14000017 	ldw	r16,0(r2)
    8c88:	dc400215 	stw	r17,8(sp)
    8c8c:	dfc00315 	stw	ra,12(sp)
    8c90:	2023883a 	mov	r17,r4
    8c94:	80000226 	beq	r16,zero,8ca0 <fputwc+0x2c>
    8c98:	80800e17 	ldw	r2,56(r16)
    8c9c:	10001026 	beq	r2,zero,8ce0 <fputwc+0x6c>
    8ca0:	2880030b 	ldhu	r2,12(r5)
    8ca4:	10c8000c 	andi	r3,r2,8192
    8ca8:	1800051e 	bne	r3,zero,8cc0 <fputwc+0x4c>
    8cac:	28c01917 	ldw	r3,100(r5)
    8cb0:	10880014 	ori	r2,r2,8192
    8cb4:	2880030d 	sth	r2,12(r5)
    8cb8:	18880014 	ori	r2,r3,8192
    8cbc:	28801915 	stw	r2,100(r5)
    8cc0:	280d883a 	mov	r6,r5
    8cc4:	8009883a 	mov	r4,r16
    8cc8:	880b883a 	mov	r5,r17
    8ccc:	dfc00317 	ldw	ra,12(sp)
    8cd0:	dc400217 	ldw	r17,8(sp)
    8cd4:	dc000117 	ldw	r16,4(sp)
    8cd8:	dec00404 	addi	sp,sp,16
    8cdc:	0008aec1 	jmpi	8aec <__fputwc>
    8ce0:	8009883a 	mov	r4,r16
    8ce4:	d9400015 	stw	r5,0(sp)
    8ce8:	000518c0 	call	518c <__sinit>
    8cec:	d9400017 	ldw	r5,0(sp)
    8cf0:	003feb06 	br	8ca0 <__alt_exception_stack_pointer+0xf8008ca0>

00008cf4 <_fstat_r>:
    8cf4:	defffd04 	addi	sp,sp,-12
    8cf8:	2805883a 	mov	r2,r5
    8cfc:	dc000015 	stw	r16,0(sp)
    8d00:	04000074 	movhi	r16,1
    8d04:	dc400115 	stw	r17,4(sp)
    8d08:	840d0304 	addi	r16,r16,13324
    8d0c:	2023883a 	mov	r17,r4
    8d10:	300b883a 	mov	r5,r6
    8d14:	1009883a 	mov	r4,r2
    8d18:	dfc00215 	stw	ra,8(sp)
    8d1c:	80000015 	stw	zero,0(r16)
    8d20:	000d4e80 	call	d4e8 <fstat>
    8d24:	00ffffc4 	movi	r3,-1
    8d28:	10c00526 	beq	r2,r3,8d40 <_fstat_r+0x4c>
    8d2c:	dfc00217 	ldw	ra,8(sp)
    8d30:	dc400117 	ldw	r17,4(sp)
    8d34:	dc000017 	ldw	r16,0(sp)
    8d38:	dec00304 	addi	sp,sp,12
    8d3c:	f800283a 	ret
    8d40:	80c00017 	ldw	r3,0(r16)
    8d44:	183ff926 	beq	r3,zero,8d2c <__alt_exception_stack_pointer+0xf8008d2c>
    8d48:	88c00015 	stw	r3,0(r17)
    8d4c:	003ff706 	br	8d2c <__alt_exception_stack_pointer+0xf8008d2c>

00008d50 <__sfvwrite_r>:
    8d50:	30800217 	ldw	r2,8(r6)
    8d54:	10006726 	beq	r2,zero,8ef4 <__sfvwrite_r+0x1a4>
    8d58:	28c0030b 	ldhu	r3,12(r5)
    8d5c:	defff404 	addi	sp,sp,-48
    8d60:	dd400715 	stw	r21,28(sp)
    8d64:	dd000615 	stw	r20,24(sp)
    8d68:	dc000215 	stw	r16,8(sp)
    8d6c:	dfc00b15 	stw	ra,44(sp)
    8d70:	df000a15 	stw	fp,40(sp)
    8d74:	ddc00915 	stw	r23,36(sp)
    8d78:	dd800815 	stw	r22,32(sp)
    8d7c:	dcc00515 	stw	r19,20(sp)
    8d80:	dc800415 	stw	r18,16(sp)
    8d84:	dc400315 	stw	r17,12(sp)
    8d88:	1880020c 	andi	r2,r3,8
    8d8c:	2821883a 	mov	r16,r5
    8d90:	202b883a 	mov	r21,r4
    8d94:	3029883a 	mov	r20,r6
    8d98:	10002726 	beq	r2,zero,8e38 <__sfvwrite_r+0xe8>
    8d9c:	28800417 	ldw	r2,16(r5)
    8da0:	10002526 	beq	r2,zero,8e38 <__sfvwrite_r+0xe8>
    8da4:	1880008c 	andi	r2,r3,2
    8da8:	a4400017 	ldw	r17,0(r20)
    8dac:	10002a26 	beq	r2,zero,8e58 <__sfvwrite_r+0x108>
    8db0:	05a00034 	movhi	r22,32768
    8db4:	0027883a 	mov	r19,zero
    8db8:	0025883a 	mov	r18,zero
    8dbc:	b5bf0004 	addi	r22,r22,-1024
    8dc0:	980d883a 	mov	r6,r19
    8dc4:	a809883a 	mov	r4,r21
    8dc8:	90004626 	beq	r18,zero,8ee4 <__sfvwrite_r+0x194>
    8dcc:	900f883a 	mov	r7,r18
    8dd0:	b480022e 	bgeu	r22,r18,8ddc <__sfvwrite_r+0x8c>
    8dd4:	01e00034 	movhi	r7,32768
    8dd8:	39ff0004 	addi	r7,r7,-1024
    8ddc:	80800917 	ldw	r2,36(r16)
    8de0:	81400717 	ldw	r5,28(r16)
    8de4:	103ee83a 	callr	r2
    8de8:	00805a0e 	bge	zero,r2,8f54 <__sfvwrite_r+0x204>
    8dec:	a0c00217 	ldw	r3,8(r20)
    8df0:	98a7883a 	add	r19,r19,r2
    8df4:	90a5c83a 	sub	r18,r18,r2
    8df8:	1885c83a 	sub	r2,r3,r2
    8dfc:	a0800215 	stw	r2,8(r20)
    8e00:	103fef1e 	bne	r2,zero,8dc0 <__alt_exception_stack_pointer+0xf8008dc0>
    8e04:	0005883a 	mov	r2,zero
    8e08:	dfc00b17 	ldw	ra,44(sp)
    8e0c:	df000a17 	ldw	fp,40(sp)
    8e10:	ddc00917 	ldw	r23,36(sp)
    8e14:	dd800817 	ldw	r22,32(sp)
    8e18:	dd400717 	ldw	r21,28(sp)
    8e1c:	dd000617 	ldw	r20,24(sp)
    8e20:	dcc00517 	ldw	r19,20(sp)
    8e24:	dc800417 	ldw	r18,16(sp)
    8e28:	dc400317 	ldw	r17,12(sp)
    8e2c:	dc000217 	ldw	r16,8(sp)
    8e30:	dec00c04 	addi	sp,sp,48
    8e34:	f800283a 	ret
    8e38:	800b883a 	mov	r5,r16
    8e3c:	a809883a 	mov	r4,r21
    8e40:	00031800 	call	3180 <__swsetup_r>
    8e44:	1000ee1e 	bne	r2,zero,9200 <__sfvwrite_r+0x4b0>
    8e48:	80c0030b 	ldhu	r3,12(r16)
    8e4c:	a4400017 	ldw	r17,0(r20)
    8e50:	1880008c 	andi	r2,r3,2
    8e54:	103fd61e 	bne	r2,zero,8db0 <__alt_exception_stack_pointer+0xf8008db0>
    8e58:	1880004c 	andi	r2,r3,1
    8e5c:	1000421e 	bne	r2,zero,8f68 <__sfvwrite_r+0x218>
    8e60:	0039883a 	mov	fp,zero
    8e64:	0025883a 	mov	r18,zero
    8e68:	90001a26 	beq	r18,zero,8ed4 <__sfvwrite_r+0x184>
    8e6c:	1880800c 	andi	r2,r3,512
    8e70:	84c00217 	ldw	r19,8(r16)
    8e74:	10002126 	beq	r2,zero,8efc <__sfvwrite_r+0x1ac>
    8e78:	982f883a 	mov	r23,r19
    8e7c:	94c09636 	bltu	r18,r19,90d8 <__sfvwrite_r+0x388>
    8e80:	1881200c 	andi	r2,r3,1152
    8e84:	1000a11e 	bne	r2,zero,910c <__sfvwrite_r+0x3bc>
    8e88:	81000017 	ldw	r4,0(r16)
    8e8c:	b80d883a 	mov	r6,r23
    8e90:	e00b883a 	mov	r5,fp
    8e94:	00092cc0 	call	92cc <memmove>
    8e98:	80c00217 	ldw	r3,8(r16)
    8e9c:	81000017 	ldw	r4,0(r16)
    8ea0:	9005883a 	mov	r2,r18
    8ea4:	1ce7c83a 	sub	r19,r3,r19
    8ea8:	25cf883a 	add	r7,r4,r23
    8eac:	84c00215 	stw	r19,8(r16)
    8eb0:	81c00015 	stw	r7,0(r16)
    8eb4:	a0c00217 	ldw	r3,8(r20)
    8eb8:	e0b9883a 	add	fp,fp,r2
    8ebc:	90a5c83a 	sub	r18,r18,r2
    8ec0:	18a7c83a 	sub	r19,r3,r2
    8ec4:	a4c00215 	stw	r19,8(r20)
    8ec8:	983fce26 	beq	r19,zero,8e04 <__alt_exception_stack_pointer+0xf8008e04>
    8ecc:	80c0030b 	ldhu	r3,12(r16)
    8ed0:	903fe61e 	bne	r18,zero,8e6c <__alt_exception_stack_pointer+0xf8008e6c>
    8ed4:	8f000017 	ldw	fp,0(r17)
    8ed8:	8c800117 	ldw	r18,4(r17)
    8edc:	8c400204 	addi	r17,r17,8
    8ee0:	003fe106 	br	8e68 <__alt_exception_stack_pointer+0xf8008e68>
    8ee4:	8cc00017 	ldw	r19,0(r17)
    8ee8:	8c800117 	ldw	r18,4(r17)
    8eec:	8c400204 	addi	r17,r17,8
    8ef0:	003fb306 	br	8dc0 <__alt_exception_stack_pointer+0xf8008dc0>
    8ef4:	0005883a 	mov	r2,zero
    8ef8:	f800283a 	ret
    8efc:	81000017 	ldw	r4,0(r16)
    8f00:	80800417 	ldw	r2,16(r16)
    8f04:	11005a36 	bltu	r2,r4,9070 <__sfvwrite_r+0x320>
    8f08:	85c00517 	ldw	r23,20(r16)
    8f0c:	95c05836 	bltu	r18,r23,9070 <__sfvwrite_r+0x320>
    8f10:	00a00034 	movhi	r2,32768
    8f14:	10bfffc4 	addi	r2,r2,-1
    8f18:	9009883a 	mov	r4,r18
    8f1c:	1480012e 	bgeu	r2,r18,8f24 <__sfvwrite_r+0x1d4>
    8f20:	1009883a 	mov	r4,r2
    8f24:	b80b883a 	mov	r5,r23
    8f28:	000a8ec0 	call	a8ec <__divsi3>
    8f2c:	b80b883a 	mov	r5,r23
    8f30:	1009883a 	mov	r4,r2
    8f34:	000aaa00 	call	aaa0 <__mulsi3>
    8f38:	81400717 	ldw	r5,28(r16)
    8f3c:	80c00917 	ldw	r3,36(r16)
    8f40:	100f883a 	mov	r7,r2
    8f44:	e00d883a 	mov	r6,fp
    8f48:	a809883a 	mov	r4,r21
    8f4c:	183ee83a 	callr	r3
    8f50:	00bfd816 	blt	zero,r2,8eb4 <__alt_exception_stack_pointer+0xf8008eb4>
    8f54:	8080030b 	ldhu	r2,12(r16)
    8f58:	10801014 	ori	r2,r2,64
    8f5c:	8080030d 	sth	r2,12(r16)
    8f60:	00bfffc4 	movi	r2,-1
    8f64:	003fa806 	br	8e08 <__alt_exception_stack_pointer+0xf8008e08>
    8f68:	0027883a 	mov	r19,zero
    8f6c:	0011883a 	mov	r8,zero
    8f70:	0039883a 	mov	fp,zero
    8f74:	0025883a 	mov	r18,zero
    8f78:	90001f26 	beq	r18,zero,8ff8 <__sfvwrite_r+0x2a8>
    8f7c:	40005a26 	beq	r8,zero,90e8 <__sfvwrite_r+0x398>
    8f80:	982d883a 	mov	r22,r19
    8f84:	94c0012e 	bgeu	r18,r19,8f8c <__sfvwrite_r+0x23c>
    8f88:	902d883a 	mov	r22,r18
    8f8c:	81000017 	ldw	r4,0(r16)
    8f90:	80800417 	ldw	r2,16(r16)
    8f94:	b02f883a 	mov	r23,r22
    8f98:	81c00517 	ldw	r7,20(r16)
    8f9c:	1100032e 	bgeu	r2,r4,8fac <__sfvwrite_r+0x25c>
    8fa0:	80c00217 	ldw	r3,8(r16)
    8fa4:	38c7883a 	add	r3,r7,r3
    8fa8:	1d801816 	blt	r3,r22,900c <__sfvwrite_r+0x2bc>
    8fac:	b1c03e16 	blt	r22,r7,90a8 <__sfvwrite_r+0x358>
    8fb0:	80800917 	ldw	r2,36(r16)
    8fb4:	81400717 	ldw	r5,28(r16)
    8fb8:	e00d883a 	mov	r6,fp
    8fbc:	da000115 	stw	r8,4(sp)
    8fc0:	a809883a 	mov	r4,r21
    8fc4:	103ee83a 	callr	r2
    8fc8:	102f883a 	mov	r23,r2
    8fcc:	da000117 	ldw	r8,4(sp)
    8fd0:	00bfe00e 	bge	zero,r2,8f54 <__alt_exception_stack_pointer+0xf8008f54>
    8fd4:	9de7c83a 	sub	r19,r19,r23
    8fd8:	98001f26 	beq	r19,zero,9058 <__sfvwrite_r+0x308>
    8fdc:	a0800217 	ldw	r2,8(r20)
    8fe0:	e5f9883a 	add	fp,fp,r23
    8fe4:	95e5c83a 	sub	r18,r18,r23
    8fe8:	15efc83a 	sub	r23,r2,r23
    8fec:	a5c00215 	stw	r23,8(r20)
    8ff0:	b83f8426 	beq	r23,zero,8e04 <__alt_exception_stack_pointer+0xf8008e04>
    8ff4:	903fe11e 	bne	r18,zero,8f7c <__alt_exception_stack_pointer+0xf8008f7c>
    8ff8:	8f000017 	ldw	fp,0(r17)
    8ffc:	8c800117 	ldw	r18,4(r17)
    9000:	0011883a 	mov	r8,zero
    9004:	8c400204 	addi	r17,r17,8
    9008:	003fdb06 	br	8f78 <__alt_exception_stack_pointer+0xf8008f78>
    900c:	180d883a 	mov	r6,r3
    9010:	e00b883a 	mov	r5,fp
    9014:	da000115 	stw	r8,4(sp)
    9018:	d8c00015 	stw	r3,0(sp)
    901c:	00092cc0 	call	92cc <memmove>
    9020:	d8c00017 	ldw	r3,0(sp)
    9024:	80800017 	ldw	r2,0(r16)
    9028:	800b883a 	mov	r5,r16
    902c:	a809883a 	mov	r4,r21
    9030:	10c5883a 	add	r2,r2,r3
    9034:	80800015 	stw	r2,0(r16)
    9038:	d8c00015 	stw	r3,0(sp)
    903c:	0004da00 	call	4da0 <_fflush_r>
    9040:	d8c00017 	ldw	r3,0(sp)
    9044:	da000117 	ldw	r8,4(sp)
    9048:	103fc21e 	bne	r2,zero,8f54 <__alt_exception_stack_pointer+0xf8008f54>
    904c:	182f883a 	mov	r23,r3
    9050:	9de7c83a 	sub	r19,r19,r23
    9054:	983fe11e 	bne	r19,zero,8fdc <__alt_exception_stack_pointer+0xf8008fdc>
    9058:	800b883a 	mov	r5,r16
    905c:	a809883a 	mov	r4,r21
    9060:	0004da00 	call	4da0 <_fflush_r>
    9064:	103fbb1e 	bne	r2,zero,8f54 <__alt_exception_stack_pointer+0xf8008f54>
    9068:	0011883a 	mov	r8,zero
    906c:	003fdb06 	br	8fdc <__alt_exception_stack_pointer+0xf8008fdc>
    9070:	94c0012e 	bgeu	r18,r19,9078 <__sfvwrite_r+0x328>
    9074:	9027883a 	mov	r19,r18
    9078:	980d883a 	mov	r6,r19
    907c:	e00b883a 	mov	r5,fp
    9080:	00092cc0 	call	92cc <memmove>
    9084:	80800217 	ldw	r2,8(r16)
    9088:	80c00017 	ldw	r3,0(r16)
    908c:	14c5c83a 	sub	r2,r2,r19
    9090:	1cc7883a 	add	r3,r3,r19
    9094:	80800215 	stw	r2,8(r16)
    9098:	80c00015 	stw	r3,0(r16)
    909c:	10004326 	beq	r2,zero,91ac <__sfvwrite_r+0x45c>
    90a0:	9805883a 	mov	r2,r19
    90a4:	003f8306 	br	8eb4 <__alt_exception_stack_pointer+0xf8008eb4>
    90a8:	b00d883a 	mov	r6,r22
    90ac:	e00b883a 	mov	r5,fp
    90b0:	da000115 	stw	r8,4(sp)
    90b4:	00092cc0 	call	92cc <memmove>
    90b8:	80800217 	ldw	r2,8(r16)
    90bc:	80c00017 	ldw	r3,0(r16)
    90c0:	da000117 	ldw	r8,4(sp)
    90c4:	1585c83a 	sub	r2,r2,r22
    90c8:	1dad883a 	add	r22,r3,r22
    90cc:	80800215 	stw	r2,8(r16)
    90d0:	85800015 	stw	r22,0(r16)
    90d4:	003fbf06 	br	8fd4 <__alt_exception_stack_pointer+0xf8008fd4>
    90d8:	81000017 	ldw	r4,0(r16)
    90dc:	9027883a 	mov	r19,r18
    90e0:	902f883a 	mov	r23,r18
    90e4:	003f6906 	br	8e8c <__alt_exception_stack_pointer+0xf8008e8c>
    90e8:	900d883a 	mov	r6,r18
    90ec:	01400284 	movi	r5,10
    90f0:	e009883a 	mov	r4,fp
    90f4:	0005a300 	call	5a30 <memchr>
    90f8:	10003e26 	beq	r2,zero,91f4 <__sfvwrite_r+0x4a4>
    90fc:	10800044 	addi	r2,r2,1
    9100:	1727c83a 	sub	r19,r2,fp
    9104:	02000044 	movi	r8,1
    9108:	003f9d06 	br	8f80 <__alt_exception_stack_pointer+0xf8008f80>
    910c:	80800517 	ldw	r2,20(r16)
    9110:	81400417 	ldw	r5,16(r16)
    9114:	81c00017 	ldw	r7,0(r16)
    9118:	10a7883a 	add	r19,r2,r2
    911c:	9885883a 	add	r2,r19,r2
    9120:	1026d7fa 	srli	r19,r2,31
    9124:	396dc83a 	sub	r22,r7,r5
    9128:	b1000044 	addi	r4,r22,1
    912c:	9885883a 	add	r2,r19,r2
    9130:	1027d07a 	srai	r19,r2,1
    9134:	2485883a 	add	r2,r4,r18
    9138:	980d883a 	mov	r6,r19
    913c:	9880022e 	bgeu	r19,r2,9148 <__sfvwrite_r+0x3f8>
    9140:	1027883a 	mov	r19,r2
    9144:	100d883a 	mov	r6,r2
    9148:	18c1000c 	andi	r3,r3,1024
    914c:	18001c26 	beq	r3,zero,91c0 <__sfvwrite_r+0x470>
    9150:	300b883a 	mov	r5,r6
    9154:	a809883a 	mov	r4,r21
    9158:	00005000 	call	500 <_malloc_r>
    915c:	102f883a 	mov	r23,r2
    9160:	10002926 	beq	r2,zero,9208 <__sfvwrite_r+0x4b8>
    9164:	81400417 	ldw	r5,16(r16)
    9168:	b00d883a 	mov	r6,r22
    916c:	1009883a 	mov	r4,r2
    9170:	0005b140 	call	5b14 <memcpy>
    9174:	8080030b 	ldhu	r2,12(r16)
    9178:	00fedfc4 	movi	r3,-1153
    917c:	10c4703a 	and	r2,r2,r3
    9180:	10802014 	ori	r2,r2,128
    9184:	8080030d 	sth	r2,12(r16)
    9188:	bd89883a 	add	r4,r23,r22
    918c:	9d8fc83a 	sub	r7,r19,r22
    9190:	85c00415 	stw	r23,16(r16)
    9194:	84c00515 	stw	r19,20(r16)
    9198:	81000015 	stw	r4,0(r16)
    919c:	9027883a 	mov	r19,r18
    91a0:	81c00215 	stw	r7,8(r16)
    91a4:	902f883a 	mov	r23,r18
    91a8:	003f3806 	br	8e8c <__alt_exception_stack_pointer+0xf8008e8c>
    91ac:	800b883a 	mov	r5,r16
    91b0:	a809883a 	mov	r4,r21
    91b4:	0004da00 	call	4da0 <_fflush_r>
    91b8:	103fb926 	beq	r2,zero,90a0 <__alt_exception_stack_pointer+0xf80090a0>
    91bc:	003f6506 	br	8f54 <__alt_exception_stack_pointer+0xf8008f54>
    91c0:	a809883a 	mov	r4,r21
    91c4:	00094880 	call	9488 <_realloc_r>
    91c8:	102f883a 	mov	r23,r2
    91cc:	103fee1e 	bne	r2,zero,9188 <__alt_exception_stack_pointer+0xf8009188>
    91d0:	81400417 	ldw	r5,16(r16)
    91d4:	a809883a 	mov	r4,r21
    91d8:	00053000 	call	5300 <_free_r>
    91dc:	8080030b 	ldhu	r2,12(r16)
    91e0:	00ffdfc4 	movi	r3,-129
    91e4:	1884703a 	and	r2,r3,r2
    91e8:	00c00304 	movi	r3,12
    91ec:	a8c00015 	stw	r3,0(r21)
    91f0:	003f5906 	br	8f58 <__alt_exception_stack_pointer+0xf8008f58>
    91f4:	94c00044 	addi	r19,r18,1
    91f8:	02000044 	movi	r8,1
    91fc:	003f6006 	br	8f80 <__alt_exception_stack_pointer+0xf8008f80>
    9200:	00bfffc4 	movi	r2,-1
    9204:	003f0006 	br	8e08 <__alt_exception_stack_pointer+0xf8008e08>
    9208:	00800304 	movi	r2,12
    920c:	a8800015 	stw	r2,0(r21)
    9210:	8080030b 	ldhu	r2,12(r16)
    9214:	003f5006 	br	8f58 <__alt_exception_stack_pointer+0xf8008f58>

00009218 <_isatty_r>:
    9218:	defffd04 	addi	sp,sp,-12
    921c:	dc000015 	stw	r16,0(sp)
    9220:	04000074 	movhi	r16,1
    9224:	dc400115 	stw	r17,4(sp)
    9228:	840d0304 	addi	r16,r16,13324
    922c:	2023883a 	mov	r17,r4
    9230:	2809883a 	mov	r4,r5
    9234:	dfc00215 	stw	ra,8(sp)
    9238:	80000015 	stw	zero,0(r16)
    923c:	000d5dc0 	call	d5dc <isatty>
    9240:	00ffffc4 	movi	r3,-1
    9244:	10c00526 	beq	r2,r3,925c <_isatty_r+0x44>
    9248:	dfc00217 	ldw	ra,8(sp)
    924c:	dc400117 	ldw	r17,4(sp)
    9250:	dc000017 	ldw	r16,0(sp)
    9254:	dec00304 	addi	sp,sp,12
    9258:	f800283a 	ret
    925c:	80c00017 	ldw	r3,0(r16)
    9260:	183ff926 	beq	r3,zero,9248 <__alt_exception_stack_pointer+0xf8009248>
    9264:	88c00015 	stw	r3,0(r17)
    9268:	003ff706 	br	9248 <__alt_exception_stack_pointer+0xf8009248>

0000926c <_lseek_r>:
    926c:	defffd04 	addi	sp,sp,-12
    9270:	2805883a 	mov	r2,r5
    9274:	dc000015 	stw	r16,0(sp)
    9278:	04000074 	movhi	r16,1
    927c:	dc400115 	stw	r17,4(sp)
    9280:	300b883a 	mov	r5,r6
    9284:	840d0304 	addi	r16,r16,13324
    9288:	2023883a 	mov	r17,r4
    928c:	380d883a 	mov	r6,r7
    9290:	1009883a 	mov	r4,r2
    9294:	dfc00215 	stw	ra,8(sp)
    9298:	80000015 	stw	zero,0(r16)
    929c:	000d7b00 	call	d7b0 <lseek>
    92a0:	00ffffc4 	movi	r3,-1
    92a4:	10c00526 	beq	r2,r3,92bc <_lseek_r+0x50>
    92a8:	dfc00217 	ldw	ra,8(sp)
    92ac:	dc400117 	ldw	r17,4(sp)
    92b0:	dc000017 	ldw	r16,0(sp)
    92b4:	dec00304 	addi	sp,sp,12
    92b8:	f800283a 	ret
    92bc:	80c00017 	ldw	r3,0(r16)
    92c0:	183ff926 	beq	r3,zero,92a8 <__alt_exception_stack_pointer+0xf80092a8>
    92c4:	88c00015 	stw	r3,0(r17)
    92c8:	003ff706 	br	92a8 <__alt_exception_stack_pointer+0xf80092a8>

000092cc <memmove>:
    92cc:	2005883a 	mov	r2,r4
    92d0:	29000b2e 	bgeu	r5,r4,9300 <memmove+0x34>
    92d4:	298f883a 	add	r7,r5,r6
    92d8:	21c0092e 	bgeu	r4,r7,9300 <memmove+0x34>
    92dc:	2187883a 	add	r3,r4,r6
    92e0:	198bc83a 	sub	r5,r3,r6
    92e4:	30004826 	beq	r6,zero,9408 <memmove+0x13c>
    92e8:	39ffffc4 	addi	r7,r7,-1
    92ec:	39000003 	ldbu	r4,0(r7)
    92f0:	18ffffc4 	addi	r3,r3,-1
    92f4:	19000005 	stb	r4,0(r3)
    92f8:	28fffb1e 	bne	r5,r3,92e8 <__alt_exception_stack_pointer+0xf80092e8>
    92fc:	f800283a 	ret
    9300:	00c003c4 	movi	r3,15
    9304:	1980412e 	bgeu	r3,r6,940c <memmove+0x140>
    9308:	2886b03a 	or	r3,r5,r2
    930c:	18c000cc 	andi	r3,r3,3
    9310:	1800401e 	bne	r3,zero,9414 <memmove+0x148>
    9314:	33fffc04 	addi	r15,r6,-16
    9318:	781ed13a 	srli	r15,r15,4
    931c:	28c00104 	addi	r3,r5,4
    9320:	13400104 	addi	r13,r2,4
    9324:	781c913a 	slli	r14,r15,4
    9328:	2b000204 	addi	r12,r5,8
    932c:	12c00204 	addi	r11,r2,8
    9330:	73800504 	addi	r14,r14,20
    9334:	2a800304 	addi	r10,r5,12
    9338:	12400304 	addi	r9,r2,12
    933c:	2b9d883a 	add	r14,r5,r14
    9340:	2811883a 	mov	r8,r5
    9344:	100f883a 	mov	r7,r2
    9348:	41000017 	ldw	r4,0(r8)
    934c:	39c00404 	addi	r7,r7,16
    9350:	18c00404 	addi	r3,r3,16
    9354:	393ffc15 	stw	r4,-16(r7)
    9358:	193ffc17 	ldw	r4,-16(r3)
    935c:	6b400404 	addi	r13,r13,16
    9360:	5ac00404 	addi	r11,r11,16
    9364:	693ffc15 	stw	r4,-16(r13)
    9368:	61000017 	ldw	r4,0(r12)
    936c:	4a400404 	addi	r9,r9,16
    9370:	42000404 	addi	r8,r8,16
    9374:	593ffc15 	stw	r4,-16(r11)
    9378:	51000017 	ldw	r4,0(r10)
    937c:	63000404 	addi	r12,r12,16
    9380:	52800404 	addi	r10,r10,16
    9384:	493ffc15 	stw	r4,-16(r9)
    9388:	1bbfef1e 	bne	r3,r14,9348 <__alt_exception_stack_pointer+0xf8009348>
    938c:	79000044 	addi	r4,r15,1
    9390:	2008913a 	slli	r4,r4,4
    9394:	328003cc 	andi	r10,r6,15
    9398:	02c000c4 	movi	r11,3
    939c:	1107883a 	add	r3,r2,r4
    93a0:	290b883a 	add	r5,r5,r4
    93a4:	5a801e2e 	bgeu	r11,r10,9420 <memmove+0x154>
    93a8:	1813883a 	mov	r9,r3
    93ac:	2811883a 	mov	r8,r5
    93b0:	500f883a 	mov	r7,r10
    93b4:	41000017 	ldw	r4,0(r8)
    93b8:	4a400104 	addi	r9,r9,4
    93bc:	39ffff04 	addi	r7,r7,-4
    93c0:	493fff15 	stw	r4,-4(r9)
    93c4:	42000104 	addi	r8,r8,4
    93c8:	59fffa36 	bltu	r11,r7,93b4 <__alt_exception_stack_pointer+0xf80093b4>
    93cc:	513fff04 	addi	r4,r10,-4
    93d0:	2008d0ba 	srli	r4,r4,2
    93d4:	318000cc 	andi	r6,r6,3
    93d8:	21000044 	addi	r4,r4,1
    93dc:	2109883a 	add	r4,r4,r4
    93e0:	2109883a 	add	r4,r4,r4
    93e4:	1907883a 	add	r3,r3,r4
    93e8:	290b883a 	add	r5,r5,r4
    93ec:	30000b26 	beq	r6,zero,941c <memmove+0x150>
    93f0:	198d883a 	add	r6,r3,r6
    93f4:	29c00003 	ldbu	r7,0(r5)
    93f8:	18c00044 	addi	r3,r3,1
    93fc:	29400044 	addi	r5,r5,1
    9400:	19ffffc5 	stb	r7,-1(r3)
    9404:	19bffb1e 	bne	r3,r6,93f4 <__alt_exception_stack_pointer+0xf80093f4>
    9408:	f800283a 	ret
    940c:	1007883a 	mov	r3,r2
    9410:	003ff606 	br	93ec <__alt_exception_stack_pointer+0xf80093ec>
    9414:	1007883a 	mov	r3,r2
    9418:	003ff506 	br	93f0 <__alt_exception_stack_pointer+0xf80093f0>
    941c:	f800283a 	ret
    9420:	500d883a 	mov	r6,r10
    9424:	003ff106 	br	93ec <__alt_exception_stack_pointer+0xf80093ec>

00009428 <_read_r>:
    9428:	defffd04 	addi	sp,sp,-12
    942c:	2805883a 	mov	r2,r5
    9430:	dc000015 	stw	r16,0(sp)
    9434:	04000074 	movhi	r16,1
    9438:	dc400115 	stw	r17,4(sp)
    943c:	300b883a 	mov	r5,r6
    9440:	840d0304 	addi	r16,r16,13324
    9444:	2023883a 	mov	r17,r4
    9448:	380d883a 	mov	r6,r7
    944c:	1009883a 	mov	r4,r2
    9450:	dfc00215 	stw	ra,8(sp)
    9454:	80000015 	stw	zero,0(r16)
    9458:	000d98c0 	call	d98c <read>
    945c:	00ffffc4 	movi	r3,-1
    9460:	10c00526 	beq	r2,r3,9478 <_read_r+0x50>
    9464:	dfc00217 	ldw	ra,8(sp)
    9468:	dc400117 	ldw	r17,4(sp)
    946c:	dc000017 	ldw	r16,0(sp)
    9470:	dec00304 	addi	sp,sp,12
    9474:	f800283a 	ret
    9478:	80c00017 	ldw	r3,0(r16)
    947c:	183ff926 	beq	r3,zero,9464 <__alt_exception_stack_pointer+0xf8009464>
    9480:	88c00015 	stw	r3,0(r17)
    9484:	003ff706 	br	9464 <__alt_exception_stack_pointer+0xf8009464>

00009488 <_realloc_r>:
    9488:	defff604 	addi	sp,sp,-40
    948c:	dc800215 	stw	r18,8(sp)
    9490:	dfc00915 	stw	ra,36(sp)
    9494:	df000815 	stw	fp,32(sp)
    9498:	ddc00715 	stw	r23,28(sp)
    949c:	dd800615 	stw	r22,24(sp)
    94a0:	dd400515 	stw	r21,20(sp)
    94a4:	dd000415 	stw	r20,16(sp)
    94a8:	dcc00315 	stw	r19,12(sp)
    94ac:	dc400115 	stw	r17,4(sp)
    94b0:	dc000015 	stw	r16,0(sp)
    94b4:	3025883a 	mov	r18,r6
    94b8:	2800b726 	beq	r5,zero,9798 <_realloc_r+0x310>
    94bc:	282b883a 	mov	r21,r5
    94c0:	2029883a 	mov	r20,r4
    94c4:	000d9080 	call	d908 <__malloc_lock>
    94c8:	a8bfff17 	ldw	r2,-4(r21)
    94cc:	043fff04 	movi	r16,-4
    94d0:	90c002c4 	addi	r3,r18,11
    94d4:	01000584 	movi	r4,22
    94d8:	acfffe04 	addi	r19,r21,-8
    94dc:	1420703a 	and	r16,r2,r16
    94e0:	20c0332e 	bgeu	r4,r3,95b0 <_realloc_r+0x128>
    94e4:	047ffe04 	movi	r17,-8
    94e8:	1c62703a 	and	r17,r3,r17
    94ec:	8807883a 	mov	r3,r17
    94f0:	88005816 	blt	r17,zero,9654 <_realloc_r+0x1cc>
    94f4:	8c805736 	bltu	r17,r18,9654 <_realloc_r+0x1cc>
    94f8:	80c0300e 	bge	r16,r3,95bc <_realloc_r+0x134>
    94fc:	07000074 	movhi	fp,1
    9500:	e73f8804 	addi	fp,fp,-480
    9504:	e1c00217 	ldw	r7,8(fp)
    9508:	9c09883a 	add	r4,r19,r16
    950c:	22000117 	ldw	r8,4(r4)
    9510:	21c06326 	beq	r4,r7,96a0 <_realloc_r+0x218>
    9514:	017fff84 	movi	r5,-2
    9518:	414a703a 	and	r5,r8,r5
    951c:	214b883a 	add	r5,r4,r5
    9520:	29800117 	ldw	r6,4(r5)
    9524:	3180004c 	andi	r6,r6,1
    9528:	30003f26 	beq	r6,zero,9628 <_realloc_r+0x1a0>
    952c:	1080004c 	andi	r2,r2,1
    9530:	10008326 	beq	r2,zero,9740 <_realloc_r+0x2b8>
    9534:	900b883a 	mov	r5,r18
    9538:	a009883a 	mov	r4,r20
    953c:	00005000 	call	500 <_malloc_r>
    9540:	1025883a 	mov	r18,r2
    9544:	10011e26 	beq	r2,zero,99c0 <_realloc_r+0x538>
    9548:	a93fff17 	ldw	r4,-4(r21)
    954c:	10fffe04 	addi	r3,r2,-8
    9550:	00bfff84 	movi	r2,-2
    9554:	2084703a 	and	r2,r4,r2
    9558:	9885883a 	add	r2,r19,r2
    955c:	1880ee26 	beq	r3,r2,9918 <_realloc_r+0x490>
    9560:	81bfff04 	addi	r6,r16,-4
    9564:	00800904 	movi	r2,36
    9568:	1180b836 	bltu	r2,r6,984c <_realloc_r+0x3c4>
    956c:	00c004c4 	movi	r3,19
    9570:	19809636 	bltu	r3,r6,97cc <_realloc_r+0x344>
    9574:	9005883a 	mov	r2,r18
    9578:	a807883a 	mov	r3,r21
    957c:	19000017 	ldw	r4,0(r3)
    9580:	11000015 	stw	r4,0(r2)
    9584:	19000117 	ldw	r4,4(r3)
    9588:	11000115 	stw	r4,4(r2)
    958c:	18c00217 	ldw	r3,8(r3)
    9590:	10c00215 	stw	r3,8(r2)
    9594:	a80b883a 	mov	r5,r21
    9598:	a009883a 	mov	r4,r20
    959c:	00053000 	call	5300 <_free_r>
    95a0:	a009883a 	mov	r4,r20
    95a4:	000d92c0 	call	d92c <__malloc_unlock>
    95a8:	9005883a 	mov	r2,r18
    95ac:	00001206 	br	95f8 <_realloc_r+0x170>
    95b0:	00c00404 	movi	r3,16
    95b4:	1823883a 	mov	r17,r3
    95b8:	003fce06 	br	94f4 <__alt_exception_stack_pointer+0xf80094f4>
    95bc:	a825883a 	mov	r18,r21
    95c0:	8445c83a 	sub	r2,r16,r17
    95c4:	00c003c4 	movi	r3,15
    95c8:	18802636 	bltu	r3,r2,9664 <_realloc_r+0x1dc>
    95cc:	99800117 	ldw	r6,4(r19)
    95d0:	9c07883a 	add	r3,r19,r16
    95d4:	3180004c 	andi	r6,r6,1
    95d8:	3420b03a 	or	r16,r6,r16
    95dc:	9c000115 	stw	r16,4(r19)
    95e0:	18800117 	ldw	r2,4(r3)
    95e4:	10800054 	ori	r2,r2,1
    95e8:	18800115 	stw	r2,4(r3)
    95ec:	a009883a 	mov	r4,r20
    95f0:	000d92c0 	call	d92c <__malloc_unlock>
    95f4:	9005883a 	mov	r2,r18
    95f8:	dfc00917 	ldw	ra,36(sp)
    95fc:	df000817 	ldw	fp,32(sp)
    9600:	ddc00717 	ldw	r23,28(sp)
    9604:	dd800617 	ldw	r22,24(sp)
    9608:	dd400517 	ldw	r21,20(sp)
    960c:	dd000417 	ldw	r20,16(sp)
    9610:	dcc00317 	ldw	r19,12(sp)
    9614:	dc800217 	ldw	r18,8(sp)
    9618:	dc400117 	ldw	r17,4(sp)
    961c:	dc000017 	ldw	r16,0(sp)
    9620:	dec00a04 	addi	sp,sp,40
    9624:	f800283a 	ret
    9628:	017fff04 	movi	r5,-4
    962c:	414a703a 	and	r5,r8,r5
    9630:	814d883a 	add	r6,r16,r5
    9634:	30c01f16 	blt	r6,r3,96b4 <_realloc_r+0x22c>
    9638:	20800317 	ldw	r2,12(r4)
    963c:	20c00217 	ldw	r3,8(r4)
    9640:	a825883a 	mov	r18,r21
    9644:	3021883a 	mov	r16,r6
    9648:	18800315 	stw	r2,12(r3)
    964c:	10c00215 	stw	r3,8(r2)
    9650:	003fdb06 	br	95c0 <__alt_exception_stack_pointer+0xf80095c0>
    9654:	00800304 	movi	r2,12
    9658:	a0800015 	stw	r2,0(r20)
    965c:	0005883a 	mov	r2,zero
    9660:	003fe506 	br	95f8 <__alt_exception_stack_pointer+0xf80095f8>
    9664:	98c00117 	ldw	r3,4(r19)
    9668:	9c4b883a 	add	r5,r19,r17
    966c:	11000054 	ori	r4,r2,1
    9670:	18c0004c 	andi	r3,r3,1
    9674:	1c62b03a 	or	r17,r3,r17
    9678:	9c400115 	stw	r17,4(r19)
    967c:	29000115 	stw	r4,4(r5)
    9680:	2885883a 	add	r2,r5,r2
    9684:	10c00117 	ldw	r3,4(r2)
    9688:	29400204 	addi	r5,r5,8
    968c:	a009883a 	mov	r4,r20
    9690:	18c00054 	ori	r3,r3,1
    9694:	10c00115 	stw	r3,4(r2)
    9698:	00053000 	call	5300 <_free_r>
    969c:	003fd306 	br	95ec <__alt_exception_stack_pointer+0xf80095ec>
    96a0:	017fff04 	movi	r5,-4
    96a4:	414a703a 	and	r5,r8,r5
    96a8:	89800404 	addi	r6,r17,16
    96ac:	8151883a 	add	r8,r16,r5
    96b0:	4180590e 	bge	r8,r6,9818 <_realloc_r+0x390>
    96b4:	1080004c 	andi	r2,r2,1
    96b8:	103f9e1e 	bne	r2,zero,9534 <__alt_exception_stack_pointer+0xf8009534>
    96bc:	adbffe17 	ldw	r22,-8(r21)
    96c0:	00bfff04 	movi	r2,-4
    96c4:	9dadc83a 	sub	r22,r19,r22
    96c8:	b1800117 	ldw	r6,4(r22)
    96cc:	3084703a 	and	r2,r6,r2
    96d0:	20002026 	beq	r4,zero,9754 <_realloc_r+0x2cc>
    96d4:	80af883a 	add	r23,r16,r2
    96d8:	b96f883a 	add	r23,r23,r5
    96dc:	21c05f26 	beq	r4,r7,985c <_realloc_r+0x3d4>
    96e0:	b8c01c16 	blt	r23,r3,9754 <_realloc_r+0x2cc>
    96e4:	20800317 	ldw	r2,12(r4)
    96e8:	20c00217 	ldw	r3,8(r4)
    96ec:	81bfff04 	addi	r6,r16,-4
    96f0:	01000904 	movi	r4,36
    96f4:	18800315 	stw	r2,12(r3)
    96f8:	10c00215 	stw	r3,8(r2)
    96fc:	b0c00217 	ldw	r3,8(r22)
    9700:	b0800317 	ldw	r2,12(r22)
    9704:	b4800204 	addi	r18,r22,8
    9708:	18800315 	stw	r2,12(r3)
    970c:	10c00215 	stw	r3,8(r2)
    9710:	21801b36 	bltu	r4,r6,9780 <_realloc_r+0x2f8>
    9714:	008004c4 	movi	r2,19
    9718:	1180352e 	bgeu	r2,r6,97f0 <_realloc_r+0x368>
    971c:	a8800017 	ldw	r2,0(r21)
    9720:	b0800215 	stw	r2,8(r22)
    9724:	a8800117 	ldw	r2,4(r21)
    9728:	b0800315 	stw	r2,12(r22)
    972c:	008006c4 	movi	r2,27
    9730:	11807f36 	bltu	r2,r6,9930 <_realloc_r+0x4a8>
    9734:	b0800404 	addi	r2,r22,16
    9738:	ad400204 	addi	r21,r21,8
    973c:	00002d06 	br	97f4 <_realloc_r+0x36c>
    9740:	adbffe17 	ldw	r22,-8(r21)
    9744:	00bfff04 	movi	r2,-4
    9748:	9dadc83a 	sub	r22,r19,r22
    974c:	b1000117 	ldw	r4,4(r22)
    9750:	2084703a 	and	r2,r4,r2
    9754:	b03f7726 	beq	r22,zero,9534 <__alt_exception_stack_pointer+0xf8009534>
    9758:	80af883a 	add	r23,r16,r2
    975c:	b8ff7516 	blt	r23,r3,9534 <__alt_exception_stack_pointer+0xf8009534>
    9760:	b0800317 	ldw	r2,12(r22)
    9764:	b0c00217 	ldw	r3,8(r22)
    9768:	81bfff04 	addi	r6,r16,-4
    976c:	01000904 	movi	r4,36
    9770:	18800315 	stw	r2,12(r3)
    9774:	10c00215 	stw	r3,8(r2)
    9778:	b4800204 	addi	r18,r22,8
    977c:	21bfe52e 	bgeu	r4,r6,9714 <__alt_exception_stack_pointer+0xf8009714>
    9780:	a80b883a 	mov	r5,r21
    9784:	9009883a 	mov	r4,r18
    9788:	00092cc0 	call	92cc <memmove>
    978c:	b821883a 	mov	r16,r23
    9790:	b027883a 	mov	r19,r22
    9794:	003f8a06 	br	95c0 <__alt_exception_stack_pointer+0xf80095c0>
    9798:	300b883a 	mov	r5,r6
    979c:	dfc00917 	ldw	ra,36(sp)
    97a0:	df000817 	ldw	fp,32(sp)
    97a4:	ddc00717 	ldw	r23,28(sp)
    97a8:	dd800617 	ldw	r22,24(sp)
    97ac:	dd400517 	ldw	r21,20(sp)
    97b0:	dd000417 	ldw	r20,16(sp)
    97b4:	dcc00317 	ldw	r19,12(sp)
    97b8:	dc800217 	ldw	r18,8(sp)
    97bc:	dc400117 	ldw	r17,4(sp)
    97c0:	dc000017 	ldw	r16,0(sp)
    97c4:	dec00a04 	addi	sp,sp,40
    97c8:	00005001 	jmpi	500 <_malloc_r>
    97cc:	a8c00017 	ldw	r3,0(r21)
    97d0:	90c00015 	stw	r3,0(r18)
    97d4:	a8c00117 	ldw	r3,4(r21)
    97d8:	90c00115 	stw	r3,4(r18)
    97dc:	00c006c4 	movi	r3,27
    97e0:	19804536 	bltu	r3,r6,98f8 <_realloc_r+0x470>
    97e4:	90800204 	addi	r2,r18,8
    97e8:	a8c00204 	addi	r3,r21,8
    97ec:	003f6306 	br	957c <__alt_exception_stack_pointer+0xf800957c>
    97f0:	9005883a 	mov	r2,r18
    97f4:	a8c00017 	ldw	r3,0(r21)
    97f8:	b821883a 	mov	r16,r23
    97fc:	b027883a 	mov	r19,r22
    9800:	10c00015 	stw	r3,0(r2)
    9804:	a8c00117 	ldw	r3,4(r21)
    9808:	10c00115 	stw	r3,4(r2)
    980c:	a8c00217 	ldw	r3,8(r21)
    9810:	10c00215 	stw	r3,8(r2)
    9814:	003f6a06 	br	95c0 <__alt_exception_stack_pointer+0xf80095c0>
    9818:	9c67883a 	add	r19,r19,r17
    981c:	4445c83a 	sub	r2,r8,r17
    9820:	e4c00215 	stw	r19,8(fp)
    9824:	10800054 	ori	r2,r2,1
    9828:	98800115 	stw	r2,4(r19)
    982c:	a8bfff17 	ldw	r2,-4(r21)
    9830:	a009883a 	mov	r4,r20
    9834:	1080004c 	andi	r2,r2,1
    9838:	1462b03a 	or	r17,r2,r17
    983c:	ac7fff15 	stw	r17,-4(r21)
    9840:	000d92c0 	call	d92c <__malloc_unlock>
    9844:	a805883a 	mov	r2,r21
    9848:	003f6b06 	br	95f8 <__alt_exception_stack_pointer+0xf80095f8>
    984c:	a80b883a 	mov	r5,r21
    9850:	9009883a 	mov	r4,r18
    9854:	00092cc0 	call	92cc <memmove>
    9858:	003f4e06 	br	9594 <__alt_exception_stack_pointer+0xf8009594>
    985c:	89000404 	addi	r4,r17,16
    9860:	b93fbc16 	blt	r23,r4,9754 <__alt_exception_stack_pointer+0xf8009754>
    9864:	b0800317 	ldw	r2,12(r22)
    9868:	b0c00217 	ldw	r3,8(r22)
    986c:	81bfff04 	addi	r6,r16,-4
    9870:	01000904 	movi	r4,36
    9874:	18800315 	stw	r2,12(r3)
    9878:	10c00215 	stw	r3,8(r2)
    987c:	b4800204 	addi	r18,r22,8
    9880:	21804336 	bltu	r4,r6,9990 <_realloc_r+0x508>
    9884:	008004c4 	movi	r2,19
    9888:	11803f2e 	bgeu	r2,r6,9988 <_realloc_r+0x500>
    988c:	a8800017 	ldw	r2,0(r21)
    9890:	b0800215 	stw	r2,8(r22)
    9894:	a8800117 	ldw	r2,4(r21)
    9898:	b0800315 	stw	r2,12(r22)
    989c:	008006c4 	movi	r2,27
    98a0:	11803f36 	bltu	r2,r6,99a0 <_realloc_r+0x518>
    98a4:	b0800404 	addi	r2,r22,16
    98a8:	ad400204 	addi	r21,r21,8
    98ac:	a8c00017 	ldw	r3,0(r21)
    98b0:	10c00015 	stw	r3,0(r2)
    98b4:	a8c00117 	ldw	r3,4(r21)
    98b8:	10c00115 	stw	r3,4(r2)
    98bc:	a8c00217 	ldw	r3,8(r21)
    98c0:	10c00215 	stw	r3,8(r2)
    98c4:	b447883a 	add	r3,r22,r17
    98c8:	bc45c83a 	sub	r2,r23,r17
    98cc:	e0c00215 	stw	r3,8(fp)
    98d0:	10800054 	ori	r2,r2,1
    98d4:	18800115 	stw	r2,4(r3)
    98d8:	b0800117 	ldw	r2,4(r22)
    98dc:	a009883a 	mov	r4,r20
    98e0:	1080004c 	andi	r2,r2,1
    98e4:	1462b03a 	or	r17,r2,r17
    98e8:	b4400115 	stw	r17,4(r22)
    98ec:	000d92c0 	call	d92c <__malloc_unlock>
    98f0:	9005883a 	mov	r2,r18
    98f4:	003f4006 	br	95f8 <__alt_exception_stack_pointer+0xf80095f8>
    98f8:	a8c00217 	ldw	r3,8(r21)
    98fc:	90c00215 	stw	r3,8(r18)
    9900:	a8c00317 	ldw	r3,12(r21)
    9904:	90c00315 	stw	r3,12(r18)
    9908:	30801126 	beq	r6,r2,9950 <_realloc_r+0x4c8>
    990c:	90800404 	addi	r2,r18,16
    9910:	a8c00404 	addi	r3,r21,16
    9914:	003f1906 	br	957c <__alt_exception_stack_pointer+0xf800957c>
    9918:	90ffff17 	ldw	r3,-4(r18)
    991c:	00bfff04 	movi	r2,-4
    9920:	a825883a 	mov	r18,r21
    9924:	1884703a 	and	r2,r3,r2
    9928:	80a1883a 	add	r16,r16,r2
    992c:	003f2406 	br	95c0 <__alt_exception_stack_pointer+0xf80095c0>
    9930:	a8800217 	ldw	r2,8(r21)
    9934:	b0800415 	stw	r2,16(r22)
    9938:	a8800317 	ldw	r2,12(r21)
    993c:	b0800515 	stw	r2,20(r22)
    9940:	31000a26 	beq	r6,r4,996c <_realloc_r+0x4e4>
    9944:	b0800604 	addi	r2,r22,24
    9948:	ad400404 	addi	r21,r21,16
    994c:	003fa906 	br	97f4 <__alt_exception_stack_pointer+0xf80097f4>
    9950:	a9000417 	ldw	r4,16(r21)
    9954:	90800604 	addi	r2,r18,24
    9958:	a8c00604 	addi	r3,r21,24
    995c:	91000415 	stw	r4,16(r18)
    9960:	a9000517 	ldw	r4,20(r21)
    9964:	91000515 	stw	r4,20(r18)
    9968:	003f0406 	br	957c <__alt_exception_stack_pointer+0xf800957c>
    996c:	a8c00417 	ldw	r3,16(r21)
    9970:	ad400604 	addi	r21,r21,24
    9974:	b0800804 	addi	r2,r22,32
    9978:	b0c00615 	stw	r3,24(r22)
    997c:	a8ffff17 	ldw	r3,-4(r21)
    9980:	b0c00715 	stw	r3,28(r22)
    9984:	003f9b06 	br	97f4 <__alt_exception_stack_pointer+0xf80097f4>
    9988:	9005883a 	mov	r2,r18
    998c:	003fc706 	br	98ac <__alt_exception_stack_pointer+0xf80098ac>
    9990:	a80b883a 	mov	r5,r21
    9994:	9009883a 	mov	r4,r18
    9998:	00092cc0 	call	92cc <memmove>
    999c:	003fc906 	br	98c4 <__alt_exception_stack_pointer+0xf80098c4>
    99a0:	a8800217 	ldw	r2,8(r21)
    99a4:	b0800415 	stw	r2,16(r22)
    99a8:	a8800317 	ldw	r2,12(r21)
    99ac:	b0800515 	stw	r2,20(r22)
    99b0:	31000726 	beq	r6,r4,99d0 <_realloc_r+0x548>
    99b4:	b0800604 	addi	r2,r22,24
    99b8:	ad400404 	addi	r21,r21,16
    99bc:	003fbb06 	br	98ac <__alt_exception_stack_pointer+0xf80098ac>
    99c0:	a009883a 	mov	r4,r20
    99c4:	000d92c0 	call	d92c <__malloc_unlock>
    99c8:	0005883a 	mov	r2,zero
    99cc:	003f0a06 	br	95f8 <__alt_exception_stack_pointer+0xf80095f8>
    99d0:	a8c00417 	ldw	r3,16(r21)
    99d4:	ad400604 	addi	r21,r21,24
    99d8:	b0800804 	addi	r2,r22,32
    99dc:	b0c00615 	stw	r3,24(r22)
    99e0:	a8ffff17 	ldw	r3,-4(r21)
    99e4:	b0c00715 	stw	r3,28(r22)
    99e8:	003fb006 	br	98ac <__alt_exception_stack_pointer+0xf80098ac>

000099ec <__swbuf_r>:
    99ec:	defffb04 	addi	sp,sp,-20
    99f0:	dcc00315 	stw	r19,12(sp)
    99f4:	dc800215 	stw	r18,8(sp)
    99f8:	dc000015 	stw	r16,0(sp)
    99fc:	dfc00415 	stw	ra,16(sp)
    9a00:	dc400115 	stw	r17,4(sp)
    9a04:	2025883a 	mov	r18,r4
    9a08:	2827883a 	mov	r19,r5
    9a0c:	3021883a 	mov	r16,r6
    9a10:	20000226 	beq	r4,zero,9a1c <__swbuf_r+0x30>
    9a14:	20800e17 	ldw	r2,56(r4)
    9a18:	10004226 	beq	r2,zero,9b24 <__swbuf_r+0x138>
    9a1c:	80800617 	ldw	r2,24(r16)
    9a20:	8100030b 	ldhu	r4,12(r16)
    9a24:	80800215 	stw	r2,8(r16)
    9a28:	2080020c 	andi	r2,r4,8
    9a2c:	10003626 	beq	r2,zero,9b08 <__swbuf_r+0x11c>
    9a30:	80c00417 	ldw	r3,16(r16)
    9a34:	18003426 	beq	r3,zero,9b08 <__swbuf_r+0x11c>
    9a38:	2088000c 	andi	r2,r4,8192
    9a3c:	9c403fcc 	andi	r17,r19,255
    9a40:	10001a26 	beq	r2,zero,9aac <__swbuf_r+0xc0>
    9a44:	80800017 	ldw	r2,0(r16)
    9a48:	81000517 	ldw	r4,20(r16)
    9a4c:	10c7c83a 	sub	r3,r2,r3
    9a50:	1900200e 	bge	r3,r4,9ad4 <__swbuf_r+0xe8>
    9a54:	18c00044 	addi	r3,r3,1
    9a58:	81000217 	ldw	r4,8(r16)
    9a5c:	11400044 	addi	r5,r2,1
    9a60:	81400015 	stw	r5,0(r16)
    9a64:	213fffc4 	addi	r4,r4,-1
    9a68:	81000215 	stw	r4,8(r16)
    9a6c:	14c00005 	stb	r19,0(r2)
    9a70:	80800517 	ldw	r2,20(r16)
    9a74:	10c01e26 	beq	r2,r3,9af0 <__swbuf_r+0x104>
    9a78:	8080030b 	ldhu	r2,12(r16)
    9a7c:	1080004c 	andi	r2,r2,1
    9a80:	10000226 	beq	r2,zero,9a8c <__swbuf_r+0xa0>
    9a84:	00800284 	movi	r2,10
    9a88:	88801926 	beq	r17,r2,9af0 <__swbuf_r+0x104>
    9a8c:	8805883a 	mov	r2,r17
    9a90:	dfc00417 	ldw	ra,16(sp)
    9a94:	dcc00317 	ldw	r19,12(sp)
    9a98:	dc800217 	ldw	r18,8(sp)
    9a9c:	dc400117 	ldw	r17,4(sp)
    9aa0:	dc000017 	ldw	r16,0(sp)
    9aa4:	dec00504 	addi	sp,sp,20
    9aa8:	f800283a 	ret
    9aac:	81401917 	ldw	r5,100(r16)
    9ab0:	00b7ffc4 	movi	r2,-8193
    9ab4:	21080014 	ori	r4,r4,8192
    9ab8:	2884703a 	and	r2,r5,r2
    9abc:	80801915 	stw	r2,100(r16)
    9ac0:	80800017 	ldw	r2,0(r16)
    9ac4:	8100030d 	sth	r4,12(r16)
    9ac8:	81000517 	ldw	r4,20(r16)
    9acc:	10c7c83a 	sub	r3,r2,r3
    9ad0:	193fe016 	blt	r3,r4,9a54 <__alt_exception_stack_pointer+0xf8009a54>
    9ad4:	800b883a 	mov	r5,r16
    9ad8:	9009883a 	mov	r4,r18
    9adc:	0004da00 	call	4da0 <_fflush_r>
    9ae0:	1000071e 	bne	r2,zero,9b00 <__swbuf_r+0x114>
    9ae4:	80800017 	ldw	r2,0(r16)
    9ae8:	00c00044 	movi	r3,1
    9aec:	003fda06 	br	9a58 <__alt_exception_stack_pointer+0xf8009a58>
    9af0:	800b883a 	mov	r5,r16
    9af4:	9009883a 	mov	r4,r18
    9af8:	0004da00 	call	4da0 <_fflush_r>
    9afc:	103fe326 	beq	r2,zero,9a8c <__alt_exception_stack_pointer+0xf8009a8c>
    9b00:	00bfffc4 	movi	r2,-1
    9b04:	003fe206 	br	9a90 <__alt_exception_stack_pointer+0xf8009a90>
    9b08:	800b883a 	mov	r5,r16
    9b0c:	9009883a 	mov	r4,r18
    9b10:	00031800 	call	3180 <__swsetup_r>
    9b14:	103ffa1e 	bne	r2,zero,9b00 <__alt_exception_stack_pointer+0xf8009b00>
    9b18:	8100030b 	ldhu	r4,12(r16)
    9b1c:	80c00417 	ldw	r3,16(r16)
    9b20:	003fc506 	br	9a38 <__alt_exception_stack_pointer+0xf8009a38>
    9b24:	000518c0 	call	518c <__sinit>
    9b28:	003fbc06 	br	9a1c <__alt_exception_stack_pointer+0xf8009a1c>

00009b2c <__swbuf>:
    9b2c:	00800074 	movhi	r2,1
    9b30:	10863804 	addi	r2,r2,6368
    9b34:	280d883a 	mov	r6,r5
    9b38:	200b883a 	mov	r5,r4
    9b3c:	11000017 	ldw	r4,0(r2)
    9b40:	00099ec1 	jmpi	99ec <__swbuf_r>

00009b44 <_wcrtomb_r>:
    9b44:	defff604 	addi	sp,sp,-40
    9b48:	00800074 	movhi	r2,1
    9b4c:	dc800815 	stw	r18,32(sp)
    9b50:	dc400715 	stw	r17,28(sp)
    9b54:	dc000615 	stw	r16,24(sp)
    9b58:	10863a04 	addi	r2,r2,6376
    9b5c:	dfc00915 	stw	ra,36(sp)
    9b60:	2021883a 	mov	r16,r4
    9b64:	3823883a 	mov	r17,r7
    9b68:	14800017 	ldw	r18,0(r2)
    9b6c:	28001426 	beq	r5,zero,9bc0 <_wcrtomb_r+0x7c>
    9b70:	d9400415 	stw	r5,16(sp)
    9b74:	d9800515 	stw	r6,20(sp)
    9b78:	00058140 	call	5814 <__locale_charset>
    9b7c:	d9800517 	ldw	r6,20(sp)
    9b80:	d9400417 	ldw	r5,16(sp)
    9b84:	100f883a 	mov	r7,r2
    9b88:	dc400015 	stw	r17,0(sp)
    9b8c:	8009883a 	mov	r4,r16
    9b90:	903ee83a 	callr	r18
    9b94:	00ffffc4 	movi	r3,-1
    9b98:	10c0031e 	bne	r2,r3,9ba8 <_wcrtomb_r+0x64>
    9b9c:	88000015 	stw	zero,0(r17)
    9ba0:	00c02284 	movi	r3,138
    9ba4:	80c00015 	stw	r3,0(r16)
    9ba8:	dfc00917 	ldw	ra,36(sp)
    9bac:	dc800817 	ldw	r18,32(sp)
    9bb0:	dc400717 	ldw	r17,28(sp)
    9bb4:	dc000617 	ldw	r16,24(sp)
    9bb8:	dec00a04 	addi	sp,sp,40
    9bbc:	f800283a 	ret
    9bc0:	00058140 	call	5814 <__locale_charset>
    9bc4:	100f883a 	mov	r7,r2
    9bc8:	dc400015 	stw	r17,0(sp)
    9bcc:	000d883a 	mov	r6,zero
    9bd0:	d9400104 	addi	r5,sp,4
    9bd4:	8009883a 	mov	r4,r16
    9bd8:	903ee83a 	callr	r18
    9bdc:	003fed06 	br	9b94 <__alt_exception_stack_pointer+0xf8009b94>

00009be0 <wcrtomb>:
    9be0:	defff604 	addi	sp,sp,-40
    9be4:	00800074 	movhi	r2,1
    9be8:	dc800615 	stw	r18,24(sp)
    9bec:	dc400515 	stw	r17,20(sp)
    9bf0:	10863804 	addi	r2,r2,6368
    9bf4:	dfc00915 	stw	ra,36(sp)
    9bf8:	dd000815 	stw	r20,32(sp)
    9bfc:	dcc00715 	stw	r19,28(sp)
    9c00:	dc000415 	stw	r16,16(sp)
    9c04:	3025883a 	mov	r18,r6
    9c08:	14400017 	ldw	r17,0(r2)
    9c0c:	20001926 	beq	r4,zero,9c74 <wcrtomb+0x94>
    9c10:	00800074 	movhi	r2,1
    9c14:	10863a04 	addi	r2,r2,6376
    9c18:	15000017 	ldw	r20,0(r2)
    9c1c:	2021883a 	mov	r16,r4
    9c20:	2827883a 	mov	r19,r5
    9c24:	00058140 	call	5814 <__locale_charset>
    9c28:	100f883a 	mov	r7,r2
    9c2c:	dc800015 	stw	r18,0(sp)
    9c30:	980d883a 	mov	r6,r19
    9c34:	800b883a 	mov	r5,r16
    9c38:	8809883a 	mov	r4,r17
    9c3c:	a03ee83a 	callr	r20
    9c40:	00ffffc4 	movi	r3,-1
    9c44:	10c0031e 	bne	r2,r3,9c54 <wcrtomb+0x74>
    9c48:	90000015 	stw	zero,0(r18)
    9c4c:	00c02284 	movi	r3,138
    9c50:	88c00015 	stw	r3,0(r17)
    9c54:	dfc00917 	ldw	ra,36(sp)
    9c58:	dd000817 	ldw	r20,32(sp)
    9c5c:	dcc00717 	ldw	r19,28(sp)
    9c60:	dc800617 	ldw	r18,24(sp)
    9c64:	dc400517 	ldw	r17,20(sp)
    9c68:	dc000417 	ldw	r16,16(sp)
    9c6c:	dec00a04 	addi	sp,sp,40
    9c70:	f800283a 	ret
    9c74:	00800074 	movhi	r2,1
    9c78:	10863a04 	addi	r2,r2,6376
    9c7c:	14000017 	ldw	r16,0(r2)
    9c80:	00058140 	call	5814 <__locale_charset>
    9c84:	100f883a 	mov	r7,r2
    9c88:	dc800015 	stw	r18,0(sp)
    9c8c:	000d883a 	mov	r6,zero
    9c90:	d9400104 	addi	r5,sp,4
    9c94:	8809883a 	mov	r4,r17
    9c98:	803ee83a 	callr	r16
    9c9c:	003fe806 	br	9c40 <__alt_exception_stack_pointer+0xf8009c40>

00009ca0 <__ascii_wctomb>:
    9ca0:	28000526 	beq	r5,zero,9cb8 <__ascii_wctomb+0x18>
    9ca4:	00803fc4 	movi	r2,255
    9ca8:	11800536 	bltu	r2,r6,9cc0 <__ascii_wctomb+0x20>
    9cac:	29800005 	stb	r6,0(r5)
    9cb0:	00800044 	movi	r2,1
    9cb4:	f800283a 	ret
    9cb8:	0005883a 	mov	r2,zero
    9cbc:	f800283a 	ret
    9cc0:	00802284 	movi	r2,138
    9cc4:	20800015 	stw	r2,0(r4)
    9cc8:	00bfffc4 	movi	r2,-1
    9ccc:	f800283a 	ret

00009cd0 <_wctomb_r>:
    9cd0:	00800074 	movhi	r2,1
    9cd4:	defff904 	addi	sp,sp,-28
    9cd8:	10863a04 	addi	r2,r2,6376
    9cdc:	dfc00615 	stw	ra,24(sp)
    9ce0:	dc400515 	stw	r17,20(sp)
    9ce4:	dc000415 	stw	r16,16(sp)
    9ce8:	3823883a 	mov	r17,r7
    9cec:	14000017 	ldw	r16,0(r2)
    9cf0:	d9000115 	stw	r4,4(sp)
    9cf4:	d9400215 	stw	r5,8(sp)
    9cf8:	d9800315 	stw	r6,12(sp)
    9cfc:	00058140 	call	5814 <__locale_charset>
    9d00:	d9800317 	ldw	r6,12(sp)
    9d04:	d9400217 	ldw	r5,8(sp)
    9d08:	d9000117 	ldw	r4,4(sp)
    9d0c:	100f883a 	mov	r7,r2
    9d10:	dc400015 	stw	r17,0(sp)
    9d14:	803ee83a 	callr	r16
    9d18:	dfc00617 	ldw	ra,24(sp)
    9d1c:	dc400517 	ldw	r17,20(sp)
    9d20:	dc000417 	ldw	r16,16(sp)
    9d24:	dec00704 	addi	sp,sp,28
    9d28:	f800283a 	ret

00009d2c <__udivdi3>:
    9d2c:	defff404 	addi	sp,sp,-48
    9d30:	dcc00515 	stw	r19,20(sp)
    9d34:	dc000215 	stw	r16,8(sp)
    9d38:	dfc00b15 	stw	ra,44(sp)
    9d3c:	df000a15 	stw	fp,40(sp)
    9d40:	ddc00915 	stw	r23,36(sp)
    9d44:	dd800815 	stw	r22,32(sp)
    9d48:	dd400715 	stw	r21,28(sp)
    9d4c:	dd000615 	stw	r20,24(sp)
    9d50:	dc800415 	stw	r18,16(sp)
    9d54:	dc400315 	stw	r17,12(sp)
    9d58:	2027883a 	mov	r19,r4
    9d5c:	2821883a 	mov	r16,r5
    9d60:	3800461e 	bne	r7,zero,9e7c <__udivdi3+0x150>
    9d64:	3023883a 	mov	r17,r6
    9d68:	2025883a 	mov	r18,r4
    9d6c:	2980572e 	bgeu	r5,r6,9ecc <__udivdi3+0x1a0>
    9d70:	00bfffd4 	movui	r2,65535
    9d74:	282d883a 	mov	r22,r5
    9d78:	1180b236 	bltu	r2,r6,a044 <__udivdi3+0x318>
    9d7c:	00803fc4 	movi	r2,255
    9d80:	1185803a 	cmpltu	r2,r2,r6
    9d84:	100490fa 	slli	r2,r2,3
    9d88:	3086d83a 	srl	r3,r6,r2
    9d8c:	01000074 	movhi	r4,1
    9d90:	213f3804 	addi	r4,r4,-800
    9d94:	20c7883a 	add	r3,r4,r3
    9d98:	18c00003 	ldbu	r3,0(r3)
    9d9c:	1885883a 	add	r2,r3,r2
    9da0:	00c00804 	movi	r3,32
    9da4:	1887c83a 	sub	r3,r3,r2
    9da8:	18000526 	beq	r3,zero,9dc0 <__udivdi3+0x94>
    9dac:	80e0983a 	sll	r16,r16,r3
    9db0:	9884d83a 	srl	r2,r19,r2
    9db4:	30e2983a 	sll	r17,r6,r3
    9db8:	98e4983a 	sll	r18,r19,r3
    9dbc:	142cb03a 	or	r22,r2,r16
    9dc0:	882ad43a 	srli	r21,r17,16
    9dc4:	b009883a 	mov	r4,r22
    9dc8:	8d3fffcc 	andi	r20,r17,65535
    9dcc:	a80b883a 	mov	r5,r21
    9dd0:	000aa480 	call	aa48 <__umodsi3>
    9dd4:	b009883a 	mov	r4,r22
    9dd8:	a80b883a 	mov	r5,r21
    9ddc:	1027883a 	mov	r19,r2
    9de0:	000a9e40 	call	a9e4 <__udivsi3>
    9de4:	100b883a 	mov	r5,r2
    9de8:	a009883a 	mov	r4,r20
    9dec:	102d883a 	mov	r22,r2
    9df0:	000aaa00 	call	aaa0 <__mulsi3>
    9df4:	9826943a 	slli	r19,r19,16
    9df8:	9006d43a 	srli	r3,r18,16
    9dfc:	1cc6b03a 	or	r3,r3,r19
    9e00:	1880052e 	bgeu	r3,r2,9e18 <__udivdi3+0xec>
    9e04:	1c47883a 	add	r3,r3,r17
    9e08:	b13fffc4 	addi	r4,r22,-1
    9e0c:	1c400136 	bltu	r3,r17,9e14 <__udivdi3+0xe8>
    9e10:	18814236 	bltu	r3,r2,a31c <__udivdi3+0x5f0>
    9e14:	202d883a 	mov	r22,r4
    9e18:	18a1c83a 	sub	r16,r3,r2
    9e1c:	8009883a 	mov	r4,r16
    9e20:	a80b883a 	mov	r5,r21
    9e24:	000aa480 	call	aa48 <__umodsi3>
    9e28:	1027883a 	mov	r19,r2
    9e2c:	8009883a 	mov	r4,r16
    9e30:	a80b883a 	mov	r5,r21
    9e34:	9826943a 	slli	r19,r19,16
    9e38:	000a9e40 	call	a9e4 <__udivsi3>
    9e3c:	100b883a 	mov	r5,r2
    9e40:	a009883a 	mov	r4,r20
    9e44:	94bfffcc 	andi	r18,r18,65535
    9e48:	1021883a 	mov	r16,r2
    9e4c:	94e4b03a 	or	r18,r18,r19
    9e50:	000aaa00 	call	aaa0 <__mulsi3>
    9e54:	9080052e 	bgeu	r18,r2,9e6c <__udivdi3+0x140>
    9e58:	8ca5883a 	add	r18,r17,r18
    9e5c:	80ffffc4 	addi	r3,r16,-1
    9e60:	94410c36 	bltu	r18,r17,a294 <__udivdi3+0x568>
    9e64:	90810b2e 	bgeu	r18,r2,a294 <__udivdi3+0x568>
    9e68:	843fff84 	addi	r16,r16,-2
    9e6c:	b004943a 	slli	r2,r22,16
    9e70:	0007883a 	mov	r3,zero
    9e74:	1404b03a 	or	r2,r2,r16
    9e78:	00005e06 	br	9ff4 <__udivdi3+0x2c8>
    9e7c:	29c05b36 	bltu	r5,r7,9fec <__udivdi3+0x2c0>
    9e80:	00bfffd4 	movui	r2,65535
    9e84:	11c0672e 	bgeu	r2,r7,a024 <__udivdi3+0x2f8>
    9e88:	00804034 	movhi	r2,256
    9e8c:	10bfffc4 	addi	r2,r2,-1
    9e90:	11c10a36 	bltu	r2,r7,a2bc <__udivdi3+0x590>
    9e94:	00800404 	movi	r2,16
    9e98:	3886d83a 	srl	r3,r7,r2
    9e9c:	01000074 	movhi	r4,1
    9ea0:	213f3804 	addi	r4,r4,-800
    9ea4:	20c7883a 	add	r3,r4,r3
    9ea8:	18c00003 	ldbu	r3,0(r3)
    9eac:	05c00804 	movi	r23,32
    9eb0:	1885883a 	add	r2,r3,r2
    9eb4:	b8afc83a 	sub	r23,r23,r2
    9eb8:	b800671e 	bne	r23,zero,a058 <__udivdi3+0x32c>
    9ebc:	3c010536 	bltu	r7,r16,a2d4 <__udivdi3+0x5a8>
    9ec0:	9985403a 	cmpgeu	r2,r19,r6
    9ec4:	0007883a 	mov	r3,zero
    9ec8:	00004a06 	br	9ff4 <__udivdi3+0x2c8>
    9ecc:	3000041e 	bne	r6,zero,9ee0 <__udivdi3+0x1b4>
    9ed0:	000b883a 	mov	r5,zero
    9ed4:	01000044 	movi	r4,1
    9ed8:	000a9e40 	call	a9e4 <__udivsi3>
    9edc:	1023883a 	mov	r17,r2
    9ee0:	00bfffd4 	movui	r2,65535
    9ee4:	1440532e 	bgeu	r2,r17,a034 <__udivdi3+0x308>
    9ee8:	00804034 	movhi	r2,256
    9eec:	10bfffc4 	addi	r2,r2,-1
    9ef0:	1440f436 	bltu	r2,r17,a2c4 <__udivdi3+0x598>
    9ef4:	00800404 	movi	r2,16
    9ef8:	8886d83a 	srl	r3,r17,r2
    9efc:	01000074 	movhi	r4,1
    9f00:	213f3804 	addi	r4,r4,-800
    9f04:	20c7883a 	add	r3,r4,r3
    9f08:	18c00003 	ldbu	r3,0(r3)
    9f0c:	1885883a 	add	r2,r3,r2
    9f10:	00c00804 	movi	r3,32
    9f14:	1887c83a 	sub	r3,r3,r2
    9f18:	1800a51e 	bne	r3,zero,a1b0 <__udivdi3+0x484>
    9f1c:	882ad43a 	srli	r21,r17,16
    9f20:	8461c83a 	sub	r16,r16,r17
    9f24:	8d3fffcc 	andi	r20,r17,65535
    9f28:	00c00044 	movi	r3,1
    9f2c:	a80b883a 	mov	r5,r21
    9f30:	8009883a 	mov	r4,r16
    9f34:	d8c00115 	stw	r3,4(sp)
    9f38:	000aa480 	call	aa48 <__umodsi3>
    9f3c:	a80b883a 	mov	r5,r21
    9f40:	8009883a 	mov	r4,r16
    9f44:	1027883a 	mov	r19,r2
    9f48:	000a9e40 	call	a9e4 <__udivsi3>
    9f4c:	a00b883a 	mov	r5,r20
    9f50:	1009883a 	mov	r4,r2
    9f54:	102d883a 	mov	r22,r2
    9f58:	000aaa00 	call	aaa0 <__mulsi3>
    9f5c:	9826943a 	slli	r19,r19,16
    9f60:	900ed43a 	srli	r7,r18,16
    9f64:	d8c00117 	ldw	r3,4(sp)
    9f68:	3cceb03a 	or	r7,r7,r19
    9f6c:	3880052e 	bgeu	r7,r2,9f84 <__udivdi3+0x258>
    9f70:	3c4f883a 	add	r7,r7,r17
    9f74:	b13fffc4 	addi	r4,r22,-1
    9f78:	3c400136 	bltu	r7,r17,9f80 <__udivdi3+0x254>
    9f7c:	3880e436 	bltu	r7,r2,a310 <__udivdi3+0x5e4>
    9f80:	202d883a 	mov	r22,r4
    9f84:	38a1c83a 	sub	r16,r7,r2
    9f88:	8009883a 	mov	r4,r16
    9f8c:	a80b883a 	mov	r5,r21
    9f90:	d8c00115 	stw	r3,4(sp)
    9f94:	000aa480 	call	aa48 <__umodsi3>
    9f98:	1027883a 	mov	r19,r2
    9f9c:	8009883a 	mov	r4,r16
    9fa0:	a80b883a 	mov	r5,r21
    9fa4:	9826943a 	slli	r19,r19,16
    9fa8:	000a9e40 	call	a9e4 <__udivsi3>
    9fac:	a00b883a 	mov	r5,r20
    9fb0:	1009883a 	mov	r4,r2
    9fb4:	94bfffcc 	andi	r18,r18,65535
    9fb8:	1021883a 	mov	r16,r2
    9fbc:	94e4b03a 	or	r18,r18,r19
    9fc0:	000aaa00 	call	aaa0 <__mulsi3>
    9fc4:	d8c00117 	ldw	r3,4(sp)
    9fc8:	9080052e 	bgeu	r18,r2,9fe0 <__udivdi3+0x2b4>
    9fcc:	8ca5883a 	add	r18,r17,r18
    9fd0:	813fffc4 	addi	r4,r16,-1
    9fd4:	9440ad36 	bltu	r18,r17,a28c <__udivdi3+0x560>
    9fd8:	9080ac2e 	bgeu	r18,r2,a28c <__udivdi3+0x560>
    9fdc:	843fff84 	addi	r16,r16,-2
    9fe0:	b004943a 	slli	r2,r22,16
    9fe4:	1404b03a 	or	r2,r2,r16
    9fe8:	00000206 	br	9ff4 <__udivdi3+0x2c8>
    9fec:	0007883a 	mov	r3,zero
    9ff0:	0005883a 	mov	r2,zero
    9ff4:	dfc00b17 	ldw	ra,44(sp)
    9ff8:	df000a17 	ldw	fp,40(sp)
    9ffc:	ddc00917 	ldw	r23,36(sp)
    a000:	dd800817 	ldw	r22,32(sp)
    a004:	dd400717 	ldw	r21,28(sp)
    a008:	dd000617 	ldw	r20,24(sp)
    a00c:	dcc00517 	ldw	r19,20(sp)
    a010:	dc800417 	ldw	r18,16(sp)
    a014:	dc400317 	ldw	r17,12(sp)
    a018:	dc000217 	ldw	r16,8(sp)
    a01c:	dec00c04 	addi	sp,sp,48
    a020:	f800283a 	ret
    a024:	00803fc4 	movi	r2,255
    a028:	11c5803a 	cmpltu	r2,r2,r7
    a02c:	100490fa 	slli	r2,r2,3
    a030:	003f9906 	br	9e98 <__alt_exception_stack_pointer+0xf8009e98>
    a034:	00803fc4 	movi	r2,255
    a038:	1445803a 	cmpltu	r2,r2,r17
    a03c:	100490fa 	slli	r2,r2,3
    a040:	003fad06 	br	9ef8 <__alt_exception_stack_pointer+0xf8009ef8>
    a044:	00804034 	movhi	r2,256
    a048:	10bfffc4 	addi	r2,r2,-1
    a04c:	11809f36 	bltu	r2,r6,a2cc <__udivdi3+0x5a0>
    a050:	00800404 	movi	r2,16
    a054:	003f4c06 	br	9d88 <__alt_exception_stack_pointer+0xf8009d88>
    a058:	3dce983a 	sll	r7,r7,r23
    a05c:	30b8d83a 	srl	fp,r6,r2
    a060:	80a2d83a 	srl	r17,r16,r2
    a064:	35cc983a 	sll	r6,r6,r23
    a068:	3f38b03a 	or	fp,r7,fp
    a06c:	e024d43a 	srli	r18,fp,16
    a070:	9884d83a 	srl	r2,r19,r2
    a074:	85e0983a 	sll	r16,r16,r23
    a078:	8809883a 	mov	r4,r17
    a07c:	900b883a 	mov	r5,r18
    a080:	d9800015 	stw	r6,0(sp)
    a084:	1420b03a 	or	r16,r2,r16
    a088:	000aa480 	call	aa48 <__umodsi3>
    a08c:	900b883a 	mov	r5,r18
    a090:	8809883a 	mov	r4,r17
    a094:	1029883a 	mov	r20,r2
    a098:	e5bfffcc 	andi	r22,fp,65535
    a09c:	000a9e40 	call	a9e4 <__udivsi3>
    a0a0:	100b883a 	mov	r5,r2
    a0a4:	b009883a 	mov	r4,r22
    a0a8:	102b883a 	mov	r21,r2
    a0ac:	000aaa00 	call	aaa0 <__mulsi3>
    a0b0:	a028943a 	slli	r20,r20,16
    a0b4:	8006d43a 	srli	r3,r16,16
    a0b8:	1d06b03a 	or	r3,r3,r20
    a0bc:	1880042e 	bgeu	r3,r2,a0d0 <__udivdi3+0x3a4>
    a0c0:	1f07883a 	add	r3,r3,fp
    a0c4:	a93fffc4 	addi	r4,r21,-1
    a0c8:	1f00892e 	bgeu	r3,fp,a2f0 <__udivdi3+0x5c4>
    a0cc:	202b883a 	mov	r21,r4
    a0d0:	18a3c83a 	sub	r17,r3,r2
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	900b883a 	mov	r5,r18
    a0dc:	000aa480 	call	aa48 <__umodsi3>
    a0e0:	1029883a 	mov	r20,r2
    a0e4:	8809883a 	mov	r4,r17
    a0e8:	900b883a 	mov	r5,r18
    a0ec:	a028943a 	slli	r20,r20,16
    a0f0:	000a9e40 	call	a9e4 <__udivsi3>
    a0f4:	100b883a 	mov	r5,r2
    a0f8:	b009883a 	mov	r4,r22
    a0fc:	843fffcc 	andi	r16,r16,65535
    a100:	1023883a 	mov	r17,r2
    a104:	8520b03a 	or	r16,r16,r20
    a108:	000aaa00 	call	aaa0 <__mulsi3>
    a10c:	8080042e 	bgeu	r16,r2,a120 <__udivdi3+0x3f4>
    a110:	8721883a 	add	r16,r16,fp
    a114:	88ffffc4 	addi	r3,r17,-1
    a118:	8700712e 	bgeu	r16,fp,a2e0 <__udivdi3+0x5b4>
    a11c:	1823883a 	mov	r17,r3
    a120:	a80e943a 	slli	r7,r21,16
    a124:	d8c00017 	ldw	r3,0(sp)
    a128:	80a1c83a 	sub	r16,r16,r2
    a12c:	3c64b03a 	or	r18,r7,r17
    a130:	1d3fffcc 	andi	r20,r3,65535
    a134:	9022d43a 	srli	r17,r18,16
    a138:	95bfffcc 	andi	r22,r18,65535
    a13c:	a00b883a 	mov	r5,r20
    a140:	b009883a 	mov	r4,r22
    a144:	182ad43a 	srli	r21,r3,16
    a148:	000aaa00 	call	aaa0 <__mulsi3>
    a14c:	a00b883a 	mov	r5,r20
    a150:	8809883a 	mov	r4,r17
    a154:	1039883a 	mov	fp,r2
    a158:	000aaa00 	call	aaa0 <__mulsi3>
    a15c:	8809883a 	mov	r4,r17
    a160:	a80b883a 	mov	r5,r21
    a164:	1029883a 	mov	r20,r2
    a168:	000aaa00 	call	aaa0 <__mulsi3>
    a16c:	a80b883a 	mov	r5,r21
    a170:	b009883a 	mov	r4,r22
    a174:	1023883a 	mov	r17,r2
    a178:	000aaa00 	call	aaa0 <__mulsi3>
    a17c:	e006d43a 	srli	r3,fp,16
    a180:	1505883a 	add	r2,r2,r20
    a184:	1887883a 	add	r3,r3,r2
    a188:	1d00022e 	bgeu	r3,r20,a194 <__udivdi3+0x468>
    a18c:	00800074 	movhi	r2,1
    a190:	88a3883a 	add	r17,r17,r2
    a194:	1804d43a 	srli	r2,r3,16
    a198:	1463883a 	add	r17,r2,r17
    a19c:	84404436 	bltu	r16,r17,a2b0 <__udivdi3+0x584>
    a1a0:	84403e26 	beq	r16,r17,a29c <__udivdi3+0x570>
    a1a4:	9005883a 	mov	r2,r18
    a1a8:	0007883a 	mov	r3,zero
    a1ac:	003f9106 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a1b0:	88e2983a 	sll	r17,r17,r3
    a1b4:	80aed83a 	srl	r23,r16,r2
    a1b8:	80e0983a 	sll	r16,r16,r3
    a1bc:	882ad43a 	srli	r21,r17,16
    a1c0:	9884d83a 	srl	r2,r19,r2
    a1c4:	b809883a 	mov	r4,r23
    a1c8:	a80b883a 	mov	r5,r21
    a1cc:	98e4983a 	sll	r18,r19,r3
    a1d0:	142cb03a 	or	r22,r2,r16
    a1d4:	000aa480 	call	aa48 <__umodsi3>
    a1d8:	b809883a 	mov	r4,r23
    a1dc:	a80b883a 	mov	r5,r21
    a1e0:	1027883a 	mov	r19,r2
    a1e4:	8d3fffcc 	andi	r20,r17,65535
    a1e8:	000a9e40 	call	a9e4 <__udivsi3>
    a1ec:	a009883a 	mov	r4,r20
    a1f0:	100b883a 	mov	r5,r2
    a1f4:	102f883a 	mov	r23,r2
    a1f8:	000aaa00 	call	aaa0 <__mulsi3>
    a1fc:	9826943a 	slli	r19,r19,16
    a200:	b008d43a 	srli	r4,r22,16
    a204:	24c8b03a 	or	r4,r4,r19
    a208:	2080062e 	bgeu	r4,r2,a224 <__udivdi3+0x4f8>
    a20c:	2449883a 	add	r4,r4,r17
    a210:	b8ffffc4 	addi	r3,r23,-1
    a214:	24403c36 	bltu	r4,r17,a308 <__udivdi3+0x5dc>
    a218:	20803b2e 	bgeu	r4,r2,a308 <__udivdi3+0x5dc>
    a21c:	bdffff84 	addi	r23,r23,-2
    a220:	2449883a 	add	r4,r4,r17
    a224:	20a1c83a 	sub	r16,r4,r2
    a228:	a80b883a 	mov	r5,r21
    a22c:	8009883a 	mov	r4,r16
    a230:	000aa480 	call	aa48 <__umodsi3>
    a234:	a80b883a 	mov	r5,r21
    a238:	8009883a 	mov	r4,r16
    a23c:	1027883a 	mov	r19,r2
    a240:	000a9e40 	call	a9e4 <__udivsi3>
    a244:	a009883a 	mov	r4,r20
    a248:	100b883a 	mov	r5,r2
    a24c:	9826943a 	slli	r19,r19,16
    a250:	1039883a 	mov	fp,r2
    a254:	000aaa00 	call	aaa0 <__mulsi3>
    a258:	b13fffcc 	andi	r4,r22,65535
    a25c:	24c8b03a 	or	r4,r4,r19
    a260:	2080062e 	bgeu	r4,r2,a27c <__udivdi3+0x550>
    a264:	2449883a 	add	r4,r4,r17
    a268:	e0ffffc4 	addi	r3,fp,-1
    a26c:	24402436 	bltu	r4,r17,a300 <__udivdi3+0x5d4>
    a270:	2080232e 	bgeu	r4,r2,a300 <__udivdi3+0x5d4>
    a274:	e73fff84 	addi	fp,fp,-2
    a278:	2449883a 	add	r4,r4,r17
    a27c:	b82e943a 	slli	r23,r23,16
    a280:	20a1c83a 	sub	r16,r4,r2
    a284:	bf06b03a 	or	r3,r23,fp
    a288:	003f2806 	br	9f2c <__alt_exception_stack_pointer+0xf8009f2c>
    a28c:	2021883a 	mov	r16,r4
    a290:	003f5306 	br	9fe0 <__alt_exception_stack_pointer+0xf8009fe0>
    a294:	1821883a 	mov	r16,r3
    a298:	003ef406 	br	9e6c <__alt_exception_stack_pointer+0xf8009e6c>
    a29c:	1806943a 	slli	r3,r3,16
    a2a0:	9de6983a 	sll	r19,r19,r23
    a2a4:	e73fffcc 	andi	fp,fp,65535
    a2a8:	1f07883a 	add	r3,r3,fp
    a2ac:	98ffbd2e 	bgeu	r19,r3,a1a4 <__alt_exception_stack_pointer+0xf800a1a4>
    a2b0:	90bfffc4 	addi	r2,r18,-1
    a2b4:	0007883a 	mov	r3,zero
    a2b8:	003f4e06 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a2bc:	00800604 	movi	r2,24
    a2c0:	003ef506 	br	9e98 <__alt_exception_stack_pointer+0xf8009e98>
    a2c4:	00800604 	movi	r2,24
    a2c8:	003f0b06 	br	9ef8 <__alt_exception_stack_pointer+0xf8009ef8>
    a2cc:	00800604 	movi	r2,24
    a2d0:	003ead06 	br	9d88 <__alt_exception_stack_pointer+0xf8009d88>
    a2d4:	0007883a 	mov	r3,zero
    a2d8:	00800044 	movi	r2,1
    a2dc:	003f4506 	br	9ff4 <__alt_exception_stack_pointer+0xf8009ff4>
    a2e0:	80bf8e2e 	bgeu	r16,r2,a11c <__alt_exception_stack_pointer+0xf800a11c>
    a2e4:	8c7fff84 	addi	r17,r17,-2
    a2e8:	8721883a 	add	r16,r16,fp
    a2ec:	003f8c06 	br	a120 <__alt_exception_stack_pointer+0xf800a120>
    a2f0:	18bf762e 	bgeu	r3,r2,a0cc <__alt_exception_stack_pointer+0xf800a0cc>
    a2f4:	ad7fff84 	addi	r21,r21,-2
    a2f8:	1f07883a 	add	r3,r3,fp
    a2fc:	003f7406 	br	a0d0 <__alt_exception_stack_pointer+0xf800a0d0>
    a300:	1839883a 	mov	fp,r3
    a304:	003fdd06 	br	a27c <__alt_exception_stack_pointer+0xf800a27c>
    a308:	182f883a 	mov	r23,r3
    a30c:	003fc506 	br	a224 <__alt_exception_stack_pointer+0xf800a224>
    a310:	b5bfff84 	addi	r22,r22,-2
    a314:	3c4f883a 	add	r7,r7,r17
    a318:	003f1a06 	br	9f84 <__alt_exception_stack_pointer+0xf8009f84>
    a31c:	b5bfff84 	addi	r22,r22,-2
    a320:	1c47883a 	add	r3,r3,r17
    a324:	003ebc06 	br	9e18 <__alt_exception_stack_pointer+0xf8009e18>

0000a328 <__umoddi3>:
    a328:	defff304 	addi	sp,sp,-52
    a32c:	df000b15 	stw	fp,44(sp)
    a330:	dc400415 	stw	r17,16(sp)
    a334:	dc000315 	stw	r16,12(sp)
    a338:	dfc00c15 	stw	ra,48(sp)
    a33c:	ddc00a15 	stw	r23,40(sp)
    a340:	dd800915 	stw	r22,36(sp)
    a344:	dd400815 	stw	r21,32(sp)
    a348:	dd000715 	stw	r20,28(sp)
    a34c:	dcc00615 	stw	r19,24(sp)
    a350:	dc800515 	stw	r18,20(sp)
    a354:	2021883a 	mov	r16,r4
    a358:	2823883a 	mov	r17,r5
    a35c:	2839883a 	mov	fp,r5
    a360:	3800401e 	bne	r7,zero,a464 <__umoddi3+0x13c>
    a364:	3027883a 	mov	r19,r6
    a368:	2029883a 	mov	r20,r4
    a36c:	2980552e 	bgeu	r5,r6,a4c4 <__umoddi3+0x19c>
    a370:	00bfffd4 	movui	r2,65535
    a374:	1180a236 	bltu	r2,r6,a600 <__umoddi3+0x2d8>
    a378:	01003fc4 	movi	r4,255
    a37c:	2189803a 	cmpltu	r4,r4,r6
    a380:	200890fa 	slli	r4,r4,3
    a384:	3104d83a 	srl	r2,r6,r4
    a388:	00c00074 	movhi	r3,1
    a38c:	18ff3804 	addi	r3,r3,-800
    a390:	1885883a 	add	r2,r3,r2
    a394:	10c00003 	ldbu	r3,0(r2)
    a398:	00800804 	movi	r2,32
    a39c:	1909883a 	add	r4,r3,r4
    a3a0:	1125c83a 	sub	r18,r2,r4
    a3a4:	90000526 	beq	r18,zero,a3bc <__umoddi3+0x94>
    a3a8:	8ca2983a 	sll	r17,r17,r18
    a3ac:	8108d83a 	srl	r4,r16,r4
    a3b0:	34a6983a 	sll	r19,r6,r18
    a3b4:	84a8983a 	sll	r20,r16,r18
    a3b8:	2478b03a 	or	fp,r4,r17
    a3bc:	982cd43a 	srli	r22,r19,16
    a3c0:	e009883a 	mov	r4,fp
    a3c4:	9dffffcc 	andi	r23,r19,65535
    a3c8:	b00b883a 	mov	r5,r22
    a3cc:	000aa480 	call	aa48 <__umodsi3>
    a3d0:	b00b883a 	mov	r5,r22
    a3d4:	e009883a 	mov	r4,fp
    a3d8:	102b883a 	mov	r21,r2
    a3dc:	000a9e40 	call	a9e4 <__udivsi3>
    a3e0:	100b883a 	mov	r5,r2
    a3e4:	b809883a 	mov	r4,r23
    a3e8:	000aaa00 	call	aaa0 <__mulsi3>
    a3ec:	a82a943a 	slli	r21,r21,16
    a3f0:	a006d43a 	srli	r3,r20,16
    a3f4:	1d46b03a 	or	r3,r3,r21
    a3f8:	1880032e 	bgeu	r3,r2,a408 <__umoddi3+0xe0>
    a3fc:	1cc7883a 	add	r3,r3,r19
    a400:	1cc00136 	bltu	r3,r19,a408 <__umoddi3+0xe0>
    a404:	18813136 	bltu	r3,r2,a8cc <__umoddi3+0x5a4>
    a408:	18a1c83a 	sub	r16,r3,r2
    a40c:	b00b883a 	mov	r5,r22
    a410:	8009883a 	mov	r4,r16
    a414:	000aa480 	call	aa48 <__umodsi3>
    a418:	b00b883a 	mov	r5,r22
    a41c:	8009883a 	mov	r4,r16
    a420:	1023883a 	mov	r17,r2
    a424:	000a9e40 	call	a9e4 <__udivsi3>
    a428:	100b883a 	mov	r5,r2
    a42c:	b809883a 	mov	r4,r23
    a430:	8822943a 	slli	r17,r17,16
    a434:	000aaa00 	call	aaa0 <__mulsi3>
    a438:	a0ffffcc 	andi	r3,r20,65535
    a43c:	1c46b03a 	or	r3,r3,r17
    a440:	1880042e 	bgeu	r3,r2,a454 <__umoddi3+0x12c>
    a444:	1cc7883a 	add	r3,r3,r19
    a448:	1cc00236 	bltu	r3,r19,a454 <__umoddi3+0x12c>
    a44c:	1880012e 	bgeu	r3,r2,a454 <__umoddi3+0x12c>
    a450:	1cc7883a 	add	r3,r3,r19
    a454:	1885c83a 	sub	r2,r3,r2
    a458:	1484d83a 	srl	r2,r2,r18
    a45c:	0007883a 	mov	r3,zero
    a460:	00005306 	br	a5b0 <__umoddi3+0x288>
    a464:	29c05036 	bltu	r5,r7,a5a8 <__umoddi3+0x280>
    a468:	00bfffd4 	movui	r2,65535
    a46c:	11c05c2e 	bgeu	r2,r7,a5e0 <__umoddi3+0x2b8>
    a470:	00804034 	movhi	r2,256
    a474:	10bfffc4 	addi	r2,r2,-1
    a478:	11c10636 	bltu	r2,r7,a894 <__umoddi3+0x56c>
    a47c:	01000404 	movi	r4,16
    a480:	3904d83a 	srl	r2,r7,r4
    a484:	00c00074 	movhi	r3,1
    a488:	18ff3804 	addi	r3,r3,-800
    a48c:	1885883a 	add	r2,r3,r2
    a490:	14c00003 	ldbu	r19,0(r2)
    a494:	00c00804 	movi	r3,32
    a498:	9927883a 	add	r19,r19,r4
    a49c:	1ce9c83a 	sub	r20,r3,r19
    a4a0:	a0005c1e 	bne	r20,zero,a614 <__umoddi3+0x2ec>
    a4a4:	3c400136 	bltu	r7,r17,a4ac <__umoddi3+0x184>
    a4a8:	81810a36 	bltu	r16,r6,a8d4 <__umoddi3+0x5ac>
    a4ac:	8185c83a 	sub	r2,r16,r6
    a4b0:	89e3c83a 	sub	r17,r17,r7
    a4b4:	8089803a 	cmpltu	r4,r16,r2
    a4b8:	8939c83a 	sub	fp,r17,r4
    a4bc:	e007883a 	mov	r3,fp
    a4c0:	00003b06 	br	a5b0 <__umoddi3+0x288>
    a4c4:	3000041e 	bne	r6,zero,a4d8 <__umoddi3+0x1b0>
    a4c8:	000b883a 	mov	r5,zero
    a4cc:	01000044 	movi	r4,1
    a4d0:	000a9e40 	call	a9e4 <__udivsi3>
    a4d4:	1027883a 	mov	r19,r2
    a4d8:	00bfffd4 	movui	r2,65535
    a4dc:	14c0442e 	bgeu	r2,r19,a5f0 <__umoddi3+0x2c8>
    a4e0:	00804034 	movhi	r2,256
    a4e4:	10bfffc4 	addi	r2,r2,-1
    a4e8:	14c0ec36 	bltu	r2,r19,a89c <__umoddi3+0x574>
    a4ec:	00800404 	movi	r2,16
    a4f0:	9886d83a 	srl	r3,r19,r2
    a4f4:	01000074 	movhi	r4,1
    a4f8:	213f3804 	addi	r4,r4,-800
    a4fc:	20c7883a 	add	r3,r4,r3
    a500:	18c00003 	ldbu	r3,0(r3)
    a504:	1887883a 	add	r3,r3,r2
    a508:	00800804 	movi	r2,32
    a50c:	10e5c83a 	sub	r18,r2,r3
    a510:	9000ab1e 	bne	r18,zero,a7c0 <__umoddi3+0x498>
    a514:	982cd43a 	srli	r22,r19,16
    a518:	8ce3c83a 	sub	r17,r17,r19
    a51c:	9dffffcc 	andi	r23,r19,65535
    a520:	b00b883a 	mov	r5,r22
    a524:	8809883a 	mov	r4,r17
    a528:	000aa480 	call	aa48 <__umodsi3>
    a52c:	b00b883a 	mov	r5,r22
    a530:	8809883a 	mov	r4,r17
    a534:	102b883a 	mov	r21,r2
    a538:	000a9e40 	call	a9e4 <__udivsi3>
    a53c:	b80b883a 	mov	r5,r23
    a540:	1009883a 	mov	r4,r2
    a544:	000aaa00 	call	aaa0 <__mulsi3>
    a548:	a82a943a 	slli	r21,r21,16
    a54c:	a006d43a 	srli	r3,r20,16
    a550:	1d46b03a 	or	r3,r3,r21
    a554:	1880042e 	bgeu	r3,r2,a568 <__umoddi3+0x240>
    a558:	1cc7883a 	add	r3,r3,r19
    a55c:	1cc00236 	bltu	r3,r19,a568 <__umoddi3+0x240>
    a560:	1880012e 	bgeu	r3,r2,a568 <__umoddi3+0x240>
    a564:	1cc7883a 	add	r3,r3,r19
    a568:	18a1c83a 	sub	r16,r3,r2
    a56c:	b00b883a 	mov	r5,r22
    a570:	8009883a 	mov	r4,r16
    a574:	000aa480 	call	aa48 <__umodsi3>
    a578:	1023883a 	mov	r17,r2
    a57c:	b00b883a 	mov	r5,r22
    a580:	8009883a 	mov	r4,r16
    a584:	000a9e40 	call	a9e4 <__udivsi3>
    a588:	8822943a 	slli	r17,r17,16
    a58c:	b80b883a 	mov	r5,r23
    a590:	1009883a 	mov	r4,r2
    a594:	000aaa00 	call	aaa0 <__mulsi3>
    a598:	a53fffcc 	andi	r20,r20,65535
    a59c:	a446b03a 	or	r3,r20,r17
    a5a0:	18bfac2e 	bgeu	r3,r2,a454 <__alt_exception_stack_pointer+0xf800a454>
    a5a4:	003fa706 	br	a444 <__alt_exception_stack_pointer+0xf800a444>
    a5a8:	2005883a 	mov	r2,r4
    a5ac:	2807883a 	mov	r3,r5
    a5b0:	dfc00c17 	ldw	ra,48(sp)
    a5b4:	df000b17 	ldw	fp,44(sp)
    a5b8:	ddc00a17 	ldw	r23,40(sp)
    a5bc:	dd800917 	ldw	r22,36(sp)
    a5c0:	dd400817 	ldw	r21,32(sp)
    a5c4:	dd000717 	ldw	r20,28(sp)
    a5c8:	dcc00617 	ldw	r19,24(sp)
    a5cc:	dc800517 	ldw	r18,20(sp)
    a5d0:	dc400417 	ldw	r17,16(sp)
    a5d4:	dc000317 	ldw	r16,12(sp)
    a5d8:	dec00d04 	addi	sp,sp,52
    a5dc:	f800283a 	ret
    a5e0:	04c03fc4 	movi	r19,255
    a5e4:	99c9803a 	cmpltu	r4,r19,r7
    a5e8:	200890fa 	slli	r4,r4,3
    a5ec:	003fa406 	br	a480 <__alt_exception_stack_pointer+0xf800a480>
    a5f0:	00803fc4 	movi	r2,255
    a5f4:	14c5803a 	cmpltu	r2,r2,r19
    a5f8:	100490fa 	slli	r2,r2,3
    a5fc:	003fbc06 	br	a4f0 <__alt_exception_stack_pointer+0xf800a4f0>
    a600:	00804034 	movhi	r2,256
    a604:	10bfffc4 	addi	r2,r2,-1
    a608:	1180a636 	bltu	r2,r6,a8a4 <__umoddi3+0x57c>
    a60c:	01000404 	movi	r4,16
    a610:	003f5c06 	br	a384 <__alt_exception_stack_pointer+0xf800a384>
    a614:	3d0e983a 	sll	r7,r7,r20
    a618:	34ead83a 	srl	r21,r6,r19
    a61c:	8cc6d83a 	srl	r3,r17,r19
    a620:	8d10983a 	sll	r8,r17,r20
    a624:	3d6ab03a 	or	r21,r7,r21
    a628:	a82cd43a 	srli	r22,r21,16
    a62c:	84e2d83a 	srl	r17,r16,r19
    a630:	1809883a 	mov	r4,r3
    a634:	b00b883a 	mov	r5,r22
    a638:	8a22b03a 	or	r17,r17,r8
    a63c:	3524983a 	sll	r18,r6,r20
    a640:	dc400015 	stw	r17,0(sp)
    a644:	d8c00115 	stw	r3,4(sp)
    a648:	000aa480 	call	aa48 <__umodsi3>
    a64c:	d8c00117 	ldw	r3,4(sp)
    a650:	b00b883a 	mov	r5,r22
    a654:	1039883a 	mov	fp,r2
    a658:	1809883a 	mov	r4,r3
    a65c:	000a9e40 	call	a9e4 <__udivsi3>
    a660:	adffffcc 	andi	r23,r21,65535
    a664:	100b883a 	mov	r5,r2
    a668:	b809883a 	mov	r4,r23
    a66c:	1023883a 	mov	r17,r2
    a670:	000aaa00 	call	aaa0 <__mulsi3>
    a674:	d9400017 	ldw	r5,0(sp)
    a678:	e008943a 	slli	r4,fp,16
    a67c:	8520983a 	sll	r16,r16,r20
    a680:	2806d43a 	srli	r3,r5,16
    a684:	1906b03a 	or	r3,r3,r4
    a688:	1880042e 	bgeu	r3,r2,a69c <__umoddi3+0x374>
    a68c:	1d47883a 	add	r3,r3,r21
    a690:	893fffc4 	addi	r4,r17,-1
    a694:	1d40892e 	bgeu	r3,r21,a8bc <__umoddi3+0x594>
    a698:	2023883a 	mov	r17,r4
    a69c:	18b9c83a 	sub	fp,r3,r2
    a6a0:	b00b883a 	mov	r5,r22
    a6a4:	e009883a 	mov	r4,fp
    a6a8:	000aa480 	call	aa48 <__umodsi3>
    a6ac:	b00b883a 	mov	r5,r22
    a6b0:	e009883a 	mov	r4,fp
    a6b4:	d8800215 	stw	r2,8(sp)
    a6b8:	000a9e40 	call	a9e4 <__udivsi3>
    a6bc:	100b883a 	mov	r5,r2
    a6c0:	b809883a 	mov	r4,r23
    a6c4:	102d883a 	mov	r22,r2
    a6c8:	000aaa00 	call	aaa0 <__mulsi3>
    a6cc:	d9800217 	ldw	r6,8(sp)
    a6d0:	d8c00017 	ldw	r3,0(sp)
    a6d4:	300c943a 	slli	r6,r6,16
    a6d8:	1a3fffcc 	andi	r8,r3,65535
    a6dc:	4190b03a 	or	r8,r8,r6
    a6e0:	4080042e 	bgeu	r8,r2,a6f4 <__umoddi3+0x3cc>
    a6e4:	4551883a 	add	r8,r8,r21
    a6e8:	b0ffffc4 	addi	r3,r22,-1
    a6ec:	45406f2e 	bgeu	r8,r21,a8ac <__umoddi3+0x584>
    a6f0:	182d883a 	mov	r22,r3
    a6f4:	880e943a 	slli	r7,r17,16
    a6f8:	9006d43a 	srli	r3,r18,16
    a6fc:	91bfffcc 	andi	r6,r18,65535
    a700:	3dacb03a 	or	r22,r7,r22
    a704:	b02ed43a 	srli	r23,r22,16
    a708:	b5bfffcc 	andi	r22,r22,65535
    a70c:	300b883a 	mov	r5,r6
    a710:	b009883a 	mov	r4,r22
    a714:	40a3c83a 	sub	r17,r8,r2
    a718:	d8c00115 	stw	r3,4(sp)
    a71c:	d9800215 	stw	r6,8(sp)
    a720:	000aaa00 	call	aaa0 <__mulsi3>
    a724:	d9800217 	ldw	r6,8(sp)
    a728:	b809883a 	mov	r4,r23
    a72c:	1039883a 	mov	fp,r2
    a730:	300b883a 	mov	r5,r6
    a734:	000aaa00 	call	aaa0 <__mulsi3>
    a738:	d8c00117 	ldw	r3,4(sp)
    a73c:	b809883a 	mov	r4,r23
    a740:	d8800215 	stw	r2,8(sp)
    a744:	180b883a 	mov	r5,r3
    a748:	000aaa00 	call	aaa0 <__mulsi3>
    a74c:	d8c00117 	ldw	r3,4(sp)
    a750:	b009883a 	mov	r4,r22
    a754:	102f883a 	mov	r23,r2
    a758:	180b883a 	mov	r5,r3
    a75c:	000aaa00 	call	aaa0 <__mulsi3>
    a760:	d9800217 	ldw	r6,8(sp)
    a764:	e006d43a 	srli	r3,fp,16
    a768:	1185883a 	add	r2,r2,r6
    a76c:	1885883a 	add	r2,r3,r2
    a770:	1180022e 	bgeu	r2,r6,a77c <__umoddi3+0x454>
    a774:	00c00074 	movhi	r3,1
    a778:	b8ef883a 	add	r23,r23,r3
    a77c:	1006d43a 	srli	r3,r2,16
    a780:	1004943a 	slli	r2,r2,16
    a784:	e73fffcc 	andi	fp,fp,65535
    a788:	1dc7883a 	add	r3,r3,r23
    a78c:	1739883a 	add	fp,r2,fp
    a790:	88c03a36 	bltu	r17,r3,a87c <__umoddi3+0x554>
    a794:	88c05126 	beq	r17,r3,a8dc <__umoddi3+0x5b4>
    a798:	88c9c83a 	sub	r4,r17,r3
    a79c:	e00f883a 	mov	r7,fp
    a7a0:	81cfc83a 	sub	r7,r16,r7
    a7a4:	81c7803a 	cmpltu	r3,r16,r7
    a7a8:	20c7c83a 	sub	r3,r4,r3
    a7ac:	1cc4983a 	sll	r2,r3,r19
    a7b0:	3d0ed83a 	srl	r7,r7,r20
    a7b4:	1d06d83a 	srl	r3,r3,r20
    a7b8:	11c4b03a 	or	r2,r2,r7
    a7bc:	003f7c06 	br	a5b0 <__alt_exception_stack_pointer+0xf800a5b0>
    a7c0:	9ca6983a 	sll	r19,r19,r18
    a7c4:	88f8d83a 	srl	fp,r17,r3
    a7c8:	80c4d83a 	srl	r2,r16,r3
    a7cc:	982cd43a 	srli	r22,r19,16
    a7d0:	8ca2983a 	sll	r17,r17,r18
    a7d4:	e009883a 	mov	r4,fp
    a7d8:	b00b883a 	mov	r5,r22
    a7dc:	146ab03a 	or	r21,r2,r17
    a7e0:	000aa480 	call	aa48 <__umodsi3>
    a7e4:	b00b883a 	mov	r5,r22
    a7e8:	e009883a 	mov	r4,fp
    a7ec:	1029883a 	mov	r20,r2
    a7f0:	9dffffcc 	andi	r23,r19,65535
    a7f4:	000a9e40 	call	a9e4 <__udivsi3>
    a7f8:	b809883a 	mov	r4,r23
    a7fc:	100b883a 	mov	r5,r2
    a800:	000aaa00 	call	aaa0 <__mulsi3>
    a804:	a008943a 	slli	r4,r20,16
    a808:	a806d43a 	srli	r3,r21,16
    a80c:	84a8983a 	sll	r20,r16,r18
    a810:	1906b03a 	or	r3,r3,r4
    a814:	1880042e 	bgeu	r3,r2,a828 <__umoddi3+0x500>
    a818:	1cc7883a 	add	r3,r3,r19
    a81c:	1cc00236 	bltu	r3,r19,a828 <__umoddi3+0x500>
    a820:	1880012e 	bgeu	r3,r2,a828 <__umoddi3+0x500>
    a824:	1cc7883a 	add	r3,r3,r19
    a828:	18a3c83a 	sub	r17,r3,r2
    a82c:	b00b883a 	mov	r5,r22
    a830:	8809883a 	mov	r4,r17
    a834:	000aa480 	call	aa48 <__umodsi3>
    a838:	b00b883a 	mov	r5,r22
    a83c:	8809883a 	mov	r4,r17
    a840:	1021883a 	mov	r16,r2
    a844:	000a9e40 	call	a9e4 <__udivsi3>
    a848:	100b883a 	mov	r5,r2
    a84c:	b809883a 	mov	r4,r23
    a850:	8020943a 	slli	r16,r16,16
    a854:	000aaa00 	call	aaa0 <__mulsi3>
    a858:	a8ffffcc 	andi	r3,r21,65535
    a85c:	1c06b03a 	or	r3,r3,r16
    a860:	1880042e 	bgeu	r3,r2,a874 <__umoddi3+0x54c>
    a864:	1cc7883a 	add	r3,r3,r19
    a868:	1cc00236 	bltu	r3,r19,a874 <__umoddi3+0x54c>
    a86c:	1880012e 	bgeu	r3,r2,a874 <__umoddi3+0x54c>
    a870:	1cc7883a 	add	r3,r3,r19
    a874:	18a3c83a 	sub	r17,r3,r2
    a878:	003f2906 	br	a520 <__alt_exception_stack_pointer+0xf800a520>
    a87c:	e48fc83a 	sub	r7,fp,r18
    a880:	1d49c83a 	sub	r4,r3,r21
    a884:	e1f9803a 	cmpltu	fp,fp,r7
    a888:	2739c83a 	sub	fp,r4,fp
    a88c:	8f09c83a 	sub	r4,r17,fp
    a890:	003fc306 	br	a7a0 <__alt_exception_stack_pointer+0xf800a7a0>
    a894:	01000604 	movi	r4,24
    a898:	003ef906 	br	a480 <__alt_exception_stack_pointer+0xf800a480>
    a89c:	00800604 	movi	r2,24
    a8a0:	003f1306 	br	a4f0 <__alt_exception_stack_pointer+0xf800a4f0>
    a8a4:	01000604 	movi	r4,24
    a8a8:	003eb606 	br	a384 <__alt_exception_stack_pointer+0xf800a384>
    a8ac:	40bf902e 	bgeu	r8,r2,a6f0 <__alt_exception_stack_pointer+0xf800a6f0>
    a8b0:	b5bfff84 	addi	r22,r22,-2
    a8b4:	4551883a 	add	r8,r8,r21
    a8b8:	003f8e06 	br	a6f4 <__alt_exception_stack_pointer+0xf800a6f4>
    a8bc:	18bf762e 	bgeu	r3,r2,a698 <__alt_exception_stack_pointer+0xf800a698>
    a8c0:	8c7fff84 	addi	r17,r17,-2
    a8c4:	1d47883a 	add	r3,r3,r21
    a8c8:	003f7406 	br	a69c <__alt_exception_stack_pointer+0xf800a69c>
    a8cc:	1cc7883a 	add	r3,r3,r19
    a8d0:	003ecd06 	br	a408 <__alt_exception_stack_pointer+0xf800a408>
    a8d4:	8005883a 	mov	r2,r16
    a8d8:	003ef806 	br	a4bc <__alt_exception_stack_pointer+0xf800a4bc>
    a8dc:	873fe736 	bltu	r16,fp,a87c <__alt_exception_stack_pointer+0xf800a87c>
    a8e0:	e00f883a 	mov	r7,fp
    a8e4:	0009883a 	mov	r4,zero
    a8e8:	003fad06 	br	a7a0 <__alt_exception_stack_pointer+0xf800a7a0>

0000a8ec <__divsi3>:
    a8ec:	20001b16 	blt	r4,zero,a95c <__divsi3+0x70>
    a8f0:	000f883a 	mov	r7,zero
    a8f4:	28001616 	blt	r5,zero,a950 <__divsi3+0x64>
    a8f8:	200d883a 	mov	r6,r4
    a8fc:	29001a2e 	bgeu	r5,r4,a968 <__divsi3+0x7c>
    a900:	00800804 	movi	r2,32
    a904:	00c00044 	movi	r3,1
    a908:	00000106 	br	a910 <__divsi3+0x24>
    a90c:	10000d26 	beq	r2,zero,a944 <__divsi3+0x58>
    a910:	294b883a 	add	r5,r5,r5
    a914:	10bfffc4 	addi	r2,r2,-1
    a918:	18c7883a 	add	r3,r3,r3
    a91c:	293ffb36 	bltu	r5,r4,a90c <__alt_exception_stack_pointer+0xf800a90c>
    a920:	0005883a 	mov	r2,zero
    a924:	18000726 	beq	r3,zero,a944 <__divsi3+0x58>
    a928:	0005883a 	mov	r2,zero
    a92c:	31400236 	bltu	r6,r5,a938 <__divsi3+0x4c>
    a930:	314dc83a 	sub	r6,r6,r5
    a934:	10c4b03a 	or	r2,r2,r3
    a938:	1806d07a 	srli	r3,r3,1
    a93c:	280ad07a 	srli	r5,r5,1
    a940:	183ffa1e 	bne	r3,zero,a92c <__alt_exception_stack_pointer+0xf800a92c>
    a944:	38000126 	beq	r7,zero,a94c <__divsi3+0x60>
    a948:	0085c83a 	sub	r2,zero,r2
    a94c:	f800283a 	ret
    a950:	014bc83a 	sub	r5,zero,r5
    a954:	39c0005c 	xori	r7,r7,1
    a958:	003fe706 	br	a8f8 <__alt_exception_stack_pointer+0xf800a8f8>
    a95c:	0109c83a 	sub	r4,zero,r4
    a960:	01c00044 	movi	r7,1
    a964:	003fe306 	br	a8f4 <__alt_exception_stack_pointer+0xf800a8f4>
    a968:	00c00044 	movi	r3,1
    a96c:	003fee06 	br	a928 <__alt_exception_stack_pointer+0xf800a928>

0000a970 <__modsi3>:
    a970:	20001716 	blt	r4,zero,a9d0 <__modsi3+0x60>
    a974:	000f883a 	mov	r7,zero
    a978:	2005883a 	mov	r2,r4
    a97c:	28001216 	blt	r5,zero,a9c8 <__modsi3+0x58>
    a980:	2900162e 	bgeu	r5,r4,a9dc <__modsi3+0x6c>
    a984:	01800804 	movi	r6,32
    a988:	00c00044 	movi	r3,1
    a98c:	00000106 	br	a994 <__modsi3+0x24>
    a990:	30000a26 	beq	r6,zero,a9bc <__modsi3+0x4c>
    a994:	294b883a 	add	r5,r5,r5
    a998:	31bfffc4 	addi	r6,r6,-1
    a99c:	18c7883a 	add	r3,r3,r3
    a9a0:	293ffb36 	bltu	r5,r4,a990 <__alt_exception_stack_pointer+0xf800a990>
    a9a4:	18000526 	beq	r3,zero,a9bc <__modsi3+0x4c>
    a9a8:	1806d07a 	srli	r3,r3,1
    a9ac:	11400136 	bltu	r2,r5,a9b4 <__modsi3+0x44>
    a9b0:	1145c83a 	sub	r2,r2,r5
    a9b4:	280ad07a 	srli	r5,r5,1
    a9b8:	183ffb1e 	bne	r3,zero,a9a8 <__alt_exception_stack_pointer+0xf800a9a8>
    a9bc:	38000126 	beq	r7,zero,a9c4 <__modsi3+0x54>
    a9c0:	0085c83a 	sub	r2,zero,r2
    a9c4:	f800283a 	ret
    a9c8:	014bc83a 	sub	r5,zero,r5
    a9cc:	003fec06 	br	a980 <__alt_exception_stack_pointer+0xf800a980>
    a9d0:	0109c83a 	sub	r4,zero,r4
    a9d4:	01c00044 	movi	r7,1
    a9d8:	003fe706 	br	a978 <__alt_exception_stack_pointer+0xf800a978>
    a9dc:	00c00044 	movi	r3,1
    a9e0:	003ff106 	br	a9a8 <__alt_exception_stack_pointer+0xf800a9a8>

0000a9e4 <__udivsi3>:
    a9e4:	200d883a 	mov	r6,r4
    a9e8:	2900152e 	bgeu	r5,r4,aa40 <__udivsi3+0x5c>
    a9ec:	28001416 	blt	r5,zero,aa40 <__udivsi3+0x5c>
    a9f0:	00800804 	movi	r2,32
    a9f4:	00c00044 	movi	r3,1
    a9f8:	00000206 	br	aa04 <__udivsi3+0x20>
    a9fc:	10000e26 	beq	r2,zero,aa38 <__udivsi3+0x54>
    aa00:	28000516 	blt	r5,zero,aa18 <__udivsi3+0x34>
    aa04:	294b883a 	add	r5,r5,r5
    aa08:	10bfffc4 	addi	r2,r2,-1
    aa0c:	18c7883a 	add	r3,r3,r3
    aa10:	293ffa36 	bltu	r5,r4,a9fc <__alt_exception_stack_pointer+0xf800a9fc>
    aa14:	18000826 	beq	r3,zero,aa38 <__udivsi3+0x54>
    aa18:	0005883a 	mov	r2,zero
    aa1c:	31400236 	bltu	r6,r5,aa28 <__udivsi3+0x44>
    aa20:	314dc83a 	sub	r6,r6,r5
    aa24:	10c4b03a 	or	r2,r2,r3
    aa28:	1806d07a 	srli	r3,r3,1
    aa2c:	280ad07a 	srli	r5,r5,1
    aa30:	183ffa1e 	bne	r3,zero,aa1c <__alt_exception_stack_pointer+0xf800aa1c>
    aa34:	f800283a 	ret
    aa38:	0005883a 	mov	r2,zero
    aa3c:	f800283a 	ret
    aa40:	00c00044 	movi	r3,1
    aa44:	003ff406 	br	aa18 <__alt_exception_stack_pointer+0xf800aa18>

0000aa48 <__umodsi3>:
    aa48:	2005883a 	mov	r2,r4
    aa4c:	2900122e 	bgeu	r5,r4,aa98 <__umodsi3+0x50>
    aa50:	28001116 	blt	r5,zero,aa98 <__umodsi3+0x50>
    aa54:	01800804 	movi	r6,32
    aa58:	00c00044 	movi	r3,1
    aa5c:	00000206 	br	aa68 <__umodsi3+0x20>
    aa60:	30000c26 	beq	r6,zero,aa94 <__umodsi3+0x4c>
    aa64:	28000516 	blt	r5,zero,aa7c <__umodsi3+0x34>
    aa68:	294b883a 	add	r5,r5,r5
    aa6c:	31bfffc4 	addi	r6,r6,-1
    aa70:	18c7883a 	add	r3,r3,r3
    aa74:	293ffa36 	bltu	r5,r4,aa60 <__alt_exception_stack_pointer+0xf800aa60>
    aa78:	18000626 	beq	r3,zero,aa94 <__umodsi3+0x4c>
    aa7c:	1806d07a 	srli	r3,r3,1
    aa80:	11400136 	bltu	r2,r5,aa88 <__umodsi3+0x40>
    aa84:	1145c83a 	sub	r2,r2,r5
    aa88:	280ad07a 	srli	r5,r5,1
    aa8c:	183ffb1e 	bne	r3,zero,aa7c <__alt_exception_stack_pointer+0xf800aa7c>
    aa90:	f800283a 	ret
    aa94:	f800283a 	ret
    aa98:	00c00044 	movi	r3,1
    aa9c:	003ff706 	br	aa7c <__alt_exception_stack_pointer+0xf800aa7c>

0000aaa0 <__mulsi3>:
    aaa0:	0005883a 	mov	r2,zero
    aaa4:	20000726 	beq	r4,zero,aac4 <__mulsi3+0x24>
    aaa8:	20c0004c 	andi	r3,r4,1
    aaac:	2008d07a 	srli	r4,r4,1
    aab0:	18000126 	beq	r3,zero,aab8 <__mulsi3+0x18>
    aab4:	1145883a 	add	r2,r2,r5
    aab8:	294b883a 	add	r5,r5,r5
    aabc:	203ffa1e 	bne	r4,zero,aaa8 <__alt_exception_stack_pointer+0xf800aaa8>
    aac0:	f800283a 	ret
    aac4:	f800283a 	ret

0000aac8 <__adddf3>:
    aac8:	02c00434 	movhi	r11,16
    aacc:	5affffc4 	addi	r11,r11,-1
    aad0:	2806d7fa 	srli	r3,r5,31
    aad4:	2ad4703a 	and	r10,r5,r11
    aad8:	3ad2703a 	and	r9,r7,r11
    aadc:	3804d53a 	srli	r2,r7,20
    aae0:	3018d77a 	srli	r12,r6,29
    aae4:	280ad53a 	srli	r5,r5,20
    aae8:	501490fa 	slli	r10,r10,3
    aaec:	2010d77a 	srli	r8,r4,29
    aaf0:	481290fa 	slli	r9,r9,3
    aaf4:	380ed7fa 	srli	r7,r7,31
    aaf8:	defffb04 	addi	sp,sp,-20
    aafc:	dc800215 	stw	r18,8(sp)
    ab00:	dc400115 	stw	r17,4(sp)
    ab04:	dc000015 	stw	r16,0(sp)
    ab08:	dfc00415 	stw	ra,16(sp)
    ab0c:	dcc00315 	stw	r19,12(sp)
    ab10:	1c803fcc 	andi	r18,r3,255
    ab14:	2c01ffcc 	andi	r16,r5,2047
    ab18:	5210b03a 	or	r8,r10,r8
    ab1c:	202290fa 	slli	r17,r4,3
    ab20:	1081ffcc 	andi	r2,r2,2047
    ab24:	4b12b03a 	or	r9,r9,r12
    ab28:	300c90fa 	slli	r6,r6,3
    ab2c:	91c07526 	beq	r18,r7,ad04 <__adddf3+0x23c>
    ab30:	8087c83a 	sub	r3,r16,r2
    ab34:	00c0ab0e 	bge	zero,r3,ade4 <__adddf3+0x31c>
    ab38:	10002a1e 	bne	r2,zero,abe4 <__adddf3+0x11c>
    ab3c:	4984b03a 	or	r2,r9,r6
    ab40:	1000961e 	bne	r2,zero,ad9c <__adddf3+0x2d4>
    ab44:	888001cc 	andi	r2,r17,7
    ab48:	10000726 	beq	r2,zero,ab68 <__adddf3+0xa0>
    ab4c:	888003cc 	andi	r2,r17,15
    ab50:	00c00104 	movi	r3,4
    ab54:	10c00426 	beq	r2,r3,ab68 <__adddf3+0xa0>
    ab58:	88c7883a 	add	r3,r17,r3
    ab5c:	1c63803a 	cmpltu	r17,r3,r17
    ab60:	4451883a 	add	r8,r8,r17
    ab64:	1823883a 	mov	r17,r3
    ab68:	4080202c 	andhi	r2,r8,128
    ab6c:	10005926 	beq	r2,zero,acd4 <__adddf3+0x20c>
    ab70:	84000044 	addi	r16,r16,1
    ab74:	0081ffc4 	movi	r2,2047
    ab78:	8080ba26 	beq	r16,r2,ae64 <__adddf3+0x39c>
    ab7c:	00bfe034 	movhi	r2,65408
    ab80:	10bfffc4 	addi	r2,r2,-1
    ab84:	4090703a 	and	r8,r8,r2
    ab88:	4004977a 	slli	r2,r8,29
    ab8c:	4010927a 	slli	r8,r8,9
    ab90:	8822d0fa 	srli	r17,r17,3
    ab94:	8401ffcc 	andi	r16,r16,2047
    ab98:	4010d33a 	srli	r8,r8,12
    ab9c:	9007883a 	mov	r3,r18
    aba0:	1444b03a 	or	r2,r2,r17
    aba4:	8401ffcc 	andi	r16,r16,2047
    aba8:	8020953a 	slli	r16,r16,20
    abac:	18c03fcc 	andi	r3,r3,255
    abb0:	01000434 	movhi	r4,16
    abb4:	213fffc4 	addi	r4,r4,-1
    abb8:	180697fa 	slli	r3,r3,31
    abbc:	4110703a 	and	r8,r8,r4
    abc0:	4410b03a 	or	r8,r8,r16
    abc4:	40c6b03a 	or	r3,r8,r3
    abc8:	dfc00417 	ldw	ra,16(sp)
    abcc:	dcc00317 	ldw	r19,12(sp)
    abd0:	dc800217 	ldw	r18,8(sp)
    abd4:	dc400117 	ldw	r17,4(sp)
    abd8:	dc000017 	ldw	r16,0(sp)
    abdc:	dec00504 	addi	sp,sp,20
    abe0:	f800283a 	ret
    abe4:	0081ffc4 	movi	r2,2047
    abe8:	80bfd626 	beq	r16,r2,ab44 <__alt_exception_stack_pointer+0xf800ab44>
    abec:	4a402034 	orhi	r9,r9,128
    abf0:	00800e04 	movi	r2,56
    abf4:	10c09f16 	blt	r2,r3,ae74 <__adddf3+0x3ac>
    abf8:	008007c4 	movi	r2,31
    abfc:	10c0c216 	blt	r2,r3,af08 <__adddf3+0x440>
    ac00:	00800804 	movi	r2,32
    ac04:	10c5c83a 	sub	r2,r2,r3
    ac08:	488a983a 	sll	r5,r9,r2
    ac0c:	30c8d83a 	srl	r4,r6,r3
    ac10:	3084983a 	sll	r2,r6,r2
    ac14:	48c6d83a 	srl	r3,r9,r3
    ac18:	290cb03a 	or	r6,r5,r4
    ac1c:	1004c03a 	cmpne	r2,r2,zero
    ac20:	308cb03a 	or	r6,r6,r2
    ac24:	898dc83a 	sub	r6,r17,r6
    ac28:	89a3803a 	cmpltu	r17,r17,r6
    ac2c:	40d1c83a 	sub	r8,r8,r3
    ac30:	4451c83a 	sub	r8,r8,r17
    ac34:	3023883a 	mov	r17,r6
    ac38:	4080202c 	andhi	r2,r8,128
    ac3c:	10002326 	beq	r2,zero,accc <__adddf3+0x204>
    ac40:	04c02034 	movhi	r19,128
    ac44:	9cffffc4 	addi	r19,r19,-1
    ac48:	44e6703a 	and	r19,r8,r19
    ac4c:	98007626 	beq	r19,zero,ae28 <__adddf3+0x360>
    ac50:	9809883a 	mov	r4,r19
    ac54:	000d3080 	call	d308 <__clzsi2>
    ac58:	10fffe04 	addi	r3,r2,-8
    ac5c:	010007c4 	movi	r4,31
    ac60:	20c07716 	blt	r4,r3,ae40 <__adddf3+0x378>
    ac64:	00800804 	movi	r2,32
    ac68:	10c5c83a 	sub	r2,r2,r3
    ac6c:	8884d83a 	srl	r2,r17,r2
    ac70:	98d0983a 	sll	r8,r19,r3
    ac74:	88e2983a 	sll	r17,r17,r3
    ac78:	1204b03a 	or	r2,r2,r8
    ac7c:	1c007416 	blt	r3,r16,ae50 <__adddf3+0x388>
    ac80:	1c21c83a 	sub	r16,r3,r16
    ac84:	82000044 	addi	r8,r16,1
    ac88:	00c007c4 	movi	r3,31
    ac8c:	1a009116 	blt	r3,r8,aed4 <__adddf3+0x40c>
    ac90:	00c00804 	movi	r3,32
    ac94:	1a07c83a 	sub	r3,r3,r8
    ac98:	8a08d83a 	srl	r4,r17,r8
    ac9c:	88e2983a 	sll	r17,r17,r3
    aca0:	10c6983a 	sll	r3,r2,r3
    aca4:	1210d83a 	srl	r8,r2,r8
    aca8:	8804c03a 	cmpne	r2,r17,zero
    acac:	1906b03a 	or	r3,r3,r4
    acb0:	18a2b03a 	or	r17,r3,r2
    acb4:	0021883a 	mov	r16,zero
    acb8:	003fa206 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    acbc:	1890b03a 	or	r8,r3,r2
    acc0:	40017d26 	beq	r8,zero,b2b8 <__adddf3+0x7f0>
    acc4:	1011883a 	mov	r8,r2
    acc8:	1823883a 	mov	r17,r3
    accc:	888001cc 	andi	r2,r17,7
    acd0:	103f9e1e 	bne	r2,zero,ab4c <__alt_exception_stack_pointer+0xf800ab4c>
    acd4:	4004977a 	slli	r2,r8,29
    acd8:	8822d0fa 	srli	r17,r17,3
    acdc:	4010d0fa 	srli	r8,r8,3
    ace0:	9007883a 	mov	r3,r18
    ace4:	1444b03a 	or	r2,r2,r17
    ace8:	0101ffc4 	movi	r4,2047
    acec:	81002426 	beq	r16,r4,ad80 <__adddf3+0x2b8>
    acf0:	8120703a 	and	r16,r16,r4
    acf4:	01000434 	movhi	r4,16
    acf8:	213fffc4 	addi	r4,r4,-1
    acfc:	4110703a 	and	r8,r8,r4
    ad00:	003fa806 	br	aba4 <__alt_exception_stack_pointer+0xf800aba4>
    ad04:	8089c83a 	sub	r4,r16,r2
    ad08:	01005e0e 	bge	zero,r4,ae84 <__adddf3+0x3bc>
    ad0c:	10002b26 	beq	r2,zero,adbc <__adddf3+0x2f4>
    ad10:	0081ffc4 	movi	r2,2047
    ad14:	80bf8b26 	beq	r16,r2,ab44 <__alt_exception_stack_pointer+0xf800ab44>
    ad18:	4a402034 	orhi	r9,r9,128
    ad1c:	00800e04 	movi	r2,56
    ad20:	1100a40e 	bge	r2,r4,afb4 <__adddf3+0x4ec>
    ad24:	498cb03a 	or	r6,r9,r6
    ad28:	300ac03a 	cmpne	r5,r6,zero
    ad2c:	0013883a 	mov	r9,zero
    ad30:	2c4b883a 	add	r5,r5,r17
    ad34:	2c63803a 	cmpltu	r17,r5,r17
    ad38:	4a11883a 	add	r8,r9,r8
    ad3c:	8a11883a 	add	r8,r17,r8
    ad40:	2823883a 	mov	r17,r5
    ad44:	4080202c 	andhi	r2,r8,128
    ad48:	103fe026 	beq	r2,zero,accc <__alt_exception_stack_pointer+0xf800accc>
    ad4c:	84000044 	addi	r16,r16,1
    ad50:	0081ffc4 	movi	r2,2047
    ad54:	8080d226 	beq	r16,r2,b0a0 <__adddf3+0x5d8>
    ad58:	00bfe034 	movhi	r2,65408
    ad5c:	10bfffc4 	addi	r2,r2,-1
    ad60:	4090703a 	and	r8,r8,r2
    ad64:	880ad07a 	srli	r5,r17,1
    ad68:	400897fa 	slli	r4,r8,31
    ad6c:	88c0004c 	andi	r3,r17,1
    ad70:	28e2b03a 	or	r17,r5,r3
    ad74:	4010d07a 	srli	r8,r8,1
    ad78:	2462b03a 	or	r17,r4,r17
    ad7c:	003f7106 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    ad80:	4088b03a 	or	r4,r8,r2
    ad84:	20014526 	beq	r4,zero,b29c <__adddf3+0x7d4>
    ad88:	01000434 	movhi	r4,16
    ad8c:	42000234 	orhi	r8,r8,8
    ad90:	213fffc4 	addi	r4,r4,-1
    ad94:	4110703a 	and	r8,r8,r4
    ad98:	003f8206 	br	aba4 <__alt_exception_stack_pointer+0xf800aba4>
    ad9c:	18ffffc4 	addi	r3,r3,-1
    ada0:	1800491e 	bne	r3,zero,aec8 <__adddf3+0x400>
    ada4:	898bc83a 	sub	r5,r17,r6
    ada8:	8963803a 	cmpltu	r17,r17,r5
    adac:	4251c83a 	sub	r8,r8,r9
    adb0:	4451c83a 	sub	r8,r8,r17
    adb4:	2823883a 	mov	r17,r5
    adb8:	003f9f06 	br	ac38 <__alt_exception_stack_pointer+0xf800ac38>
    adbc:	4984b03a 	or	r2,r9,r6
    adc0:	103f6026 	beq	r2,zero,ab44 <__alt_exception_stack_pointer+0xf800ab44>
    adc4:	213fffc4 	addi	r4,r4,-1
    adc8:	2000931e 	bne	r4,zero,b018 <__adddf3+0x550>
    adcc:	898d883a 	add	r6,r17,r6
    add0:	3463803a 	cmpltu	r17,r6,r17
    add4:	4251883a 	add	r8,r8,r9
    add8:	8a11883a 	add	r8,r17,r8
    addc:	3023883a 	mov	r17,r6
    ade0:	003fd806 	br	ad44 <__alt_exception_stack_pointer+0xf800ad44>
    ade4:	1800541e 	bne	r3,zero,af38 <__adddf3+0x470>
    ade8:	80800044 	addi	r2,r16,1
    adec:	1081ffcc 	andi	r2,r2,2047
    adf0:	00c00044 	movi	r3,1
    adf4:	1880a00e 	bge	r3,r2,b078 <__adddf3+0x5b0>
    adf8:	8989c83a 	sub	r4,r17,r6
    adfc:	8905803a 	cmpltu	r2,r17,r4
    ae00:	4267c83a 	sub	r19,r8,r9
    ae04:	98a7c83a 	sub	r19,r19,r2
    ae08:	9880202c 	andhi	r2,r19,128
    ae0c:	10006326 	beq	r2,zero,af9c <__adddf3+0x4d4>
    ae10:	3463c83a 	sub	r17,r6,r17
    ae14:	4a07c83a 	sub	r3,r9,r8
    ae18:	344d803a 	cmpltu	r6,r6,r17
    ae1c:	19a7c83a 	sub	r19,r3,r6
    ae20:	3825883a 	mov	r18,r7
    ae24:	983f8a1e 	bne	r19,zero,ac50 <__alt_exception_stack_pointer+0xf800ac50>
    ae28:	8809883a 	mov	r4,r17
    ae2c:	000d3080 	call	d308 <__clzsi2>
    ae30:	10800804 	addi	r2,r2,32
    ae34:	10fffe04 	addi	r3,r2,-8
    ae38:	010007c4 	movi	r4,31
    ae3c:	20ff890e 	bge	r4,r3,ac64 <__alt_exception_stack_pointer+0xf800ac64>
    ae40:	10bff604 	addi	r2,r2,-40
    ae44:	8884983a 	sll	r2,r17,r2
    ae48:	0023883a 	mov	r17,zero
    ae4c:	1c3f8c0e 	bge	r3,r16,ac80 <__alt_exception_stack_pointer+0xf800ac80>
    ae50:	023fe034 	movhi	r8,65408
    ae54:	423fffc4 	addi	r8,r8,-1
    ae58:	80e1c83a 	sub	r16,r16,r3
    ae5c:	1210703a 	and	r8,r2,r8
    ae60:	003f3806 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    ae64:	9007883a 	mov	r3,r18
    ae68:	0011883a 	mov	r8,zero
    ae6c:	0005883a 	mov	r2,zero
    ae70:	003f4c06 	br	aba4 <__alt_exception_stack_pointer+0xf800aba4>
    ae74:	498cb03a 	or	r6,r9,r6
    ae78:	300cc03a 	cmpne	r6,r6,zero
    ae7c:	0007883a 	mov	r3,zero
    ae80:	003f6806 	br	ac24 <__alt_exception_stack_pointer+0xf800ac24>
    ae84:	20009c1e 	bne	r4,zero,b0f8 <__adddf3+0x630>
    ae88:	80800044 	addi	r2,r16,1
    ae8c:	1141ffcc 	andi	r5,r2,2047
    ae90:	01000044 	movi	r4,1
    ae94:	2140670e 	bge	r4,r5,b034 <__adddf3+0x56c>
    ae98:	0101ffc4 	movi	r4,2047
    ae9c:	11007f26 	beq	r2,r4,b09c <__adddf3+0x5d4>
    aea0:	898d883a 	add	r6,r17,r6
    aea4:	4247883a 	add	r3,r8,r9
    aea8:	3451803a 	cmpltu	r8,r6,r17
    aeac:	40d1883a 	add	r8,r8,r3
    aeb0:	402297fa 	slli	r17,r8,31
    aeb4:	300cd07a 	srli	r6,r6,1
    aeb8:	4010d07a 	srli	r8,r8,1
    aebc:	1021883a 	mov	r16,r2
    aec0:	89a2b03a 	or	r17,r17,r6
    aec4:	003f1f06 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    aec8:	0081ffc4 	movi	r2,2047
    aecc:	80bf481e 	bne	r16,r2,abf0 <__alt_exception_stack_pointer+0xf800abf0>
    aed0:	003f1c06 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    aed4:	843ff844 	addi	r16,r16,-31
    aed8:	01000804 	movi	r4,32
    aedc:	1406d83a 	srl	r3,r2,r16
    aee0:	41005026 	beq	r8,r4,b024 <__adddf3+0x55c>
    aee4:	01001004 	movi	r4,64
    aee8:	2211c83a 	sub	r8,r4,r8
    aeec:	1204983a 	sll	r2,r2,r8
    aef0:	88a2b03a 	or	r17,r17,r2
    aef4:	8822c03a 	cmpne	r17,r17,zero
    aef8:	1c62b03a 	or	r17,r3,r17
    aefc:	0011883a 	mov	r8,zero
    af00:	0021883a 	mov	r16,zero
    af04:	003f7106 	br	accc <__alt_exception_stack_pointer+0xf800accc>
    af08:	193ff804 	addi	r4,r3,-32
    af0c:	00800804 	movi	r2,32
    af10:	4908d83a 	srl	r4,r9,r4
    af14:	18804526 	beq	r3,r2,b02c <__adddf3+0x564>
    af18:	00801004 	movi	r2,64
    af1c:	10c5c83a 	sub	r2,r2,r3
    af20:	4886983a 	sll	r3,r9,r2
    af24:	198cb03a 	or	r6,r3,r6
    af28:	300cc03a 	cmpne	r6,r6,zero
    af2c:	218cb03a 	or	r6,r4,r6
    af30:	0007883a 	mov	r3,zero
    af34:	003f3b06 	br	ac24 <__alt_exception_stack_pointer+0xf800ac24>
    af38:	80002a26 	beq	r16,zero,afe4 <__adddf3+0x51c>
    af3c:	0101ffc4 	movi	r4,2047
    af40:	11006826 	beq	r2,r4,b0e4 <__adddf3+0x61c>
    af44:	00c7c83a 	sub	r3,zero,r3
    af48:	42002034 	orhi	r8,r8,128
    af4c:	01000e04 	movi	r4,56
    af50:	20c07c16 	blt	r4,r3,b144 <__adddf3+0x67c>
    af54:	010007c4 	movi	r4,31
    af58:	20c0da16 	blt	r4,r3,b2c4 <__adddf3+0x7fc>
    af5c:	01000804 	movi	r4,32
    af60:	20c9c83a 	sub	r4,r4,r3
    af64:	4114983a 	sll	r10,r8,r4
    af68:	88cad83a 	srl	r5,r17,r3
    af6c:	8908983a 	sll	r4,r17,r4
    af70:	40c6d83a 	srl	r3,r8,r3
    af74:	5162b03a 	or	r17,r10,r5
    af78:	2008c03a 	cmpne	r4,r4,zero
    af7c:	8922b03a 	or	r17,r17,r4
    af80:	3463c83a 	sub	r17,r6,r17
    af84:	48c7c83a 	sub	r3,r9,r3
    af88:	344d803a 	cmpltu	r6,r6,r17
    af8c:	1991c83a 	sub	r8,r3,r6
    af90:	1021883a 	mov	r16,r2
    af94:	3825883a 	mov	r18,r7
    af98:	003f2706 	br	ac38 <__alt_exception_stack_pointer+0xf800ac38>
    af9c:	24d0b03a 	or	r8,r4,r19
    afa0:	40001b1e 	bne	r8,zero,b010 <__adddf3+0x548>
    afa4:	0005883a 	mov	r2,zero
    afa8:	0007883a 	mov	r3,zero
    afac:	0021883a 	mov	r16,zero
    afb0:	003f4d06 	br	ace8 <__alt_exception_stack_pointer+0xf800ace8>
    afb4:	008007c4 	movi	r2,31
    afb8:	11003c16 	blt	r2,r4,b0ac <__adddf3+0x5e4>
    afbc:	00800804 	movi	r2,32
    afc0:	1105c83a 	sub	r2,r2,r4
    afc4:	488e983a 	sll	r7,r9,r2
    afc8:	310ad83a 	srl	r5,r6,r4
    afcc:	3084983a 	sll	r2,r6,r2
    afd0:	4912d83a 	srl	r9,r9,r4
    afd4:	394ab03a 	or	r5,r7,r5
    afd8:	1004c03a 	cmpne	r2,r2,zero
    afdc:	288ab03a 	or	r5,r5,r2
    afe0:	003f5306 	br	ad30 <__alt_exception_stack_pointer+0xf800ad30>
    afe4:	4448b03a 	or	r4,r8,r17
    afe8:	20003e26 	beq	r4,zero,b0e4 <__adddf3+0x61c>
    afec:	00c6303a 	nor	r3,zero,r3
    aff0:	18003a1e 	bne	r3,zero,b0dc <__adddf3+0x614>
    aff4:	3463c83a 	sub	r17,r6,r17
    aff8:	4a07c83a 	sub	r3,r9,r8
    affc:	344d803a 	cmpltu	r6,r6,r17
    b000:	1991c83a 	sub	r8,r3,r6
    b004:	1021883a 	mov	r16,r2
    b008:	3825883a 	mov	r18,r7
    b00c:	003f0a06 	br	ac38 <__alt_exception_stack_pointer+0xf800ac38>
    b010:	2023883a 	mov	r17,r4
    b014:	003f0d06 	br	ac4c <__alt_exception_stack_pointer+0xf800ac4c>
    b018:	0081ffc4 	movi	r2,2047
    b01c:	80bf3f1e 	bne	r16,r2,ad1c <__alt_exception_stack_pointer+0xf800ad1c>
    b020:	003ec806 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b024:	0005883a 	mov	r2,zero
    b028:	003fb106 	br	aef0 <__alt_exception_stack_pointer+0xf800aef0>
    b02c:	0007883a 	mov	r3,zero
    b030:	003fbc06 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    b034:	4444b03a 	or	r2,r8,r17
    b038:	8000871e 	bne	r16,zero,b258 <__adddf3+0x790>
    b03c:	1000ba26 	beq	r2,zero,b328 <__adddf3+0x860>
    b040:	4984b03a 	or	r2,r9,r6
    b044:	103ebf26 	beq	r2,zero,ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b048:	8985883a 	add	r2,r17,r6
    b04c:	4247883a 	add	r3,r8,r9
    b050:	1451803a 	cmpltu	r8,r2,r17
    b054:	40d1883a 	add	r8,r8,r3
    b058:	40c0202c 	andhi	r3,r8,128
    b05c:	1023883a 	mov	r17,r2
    b060:	183f1a26 	beq	r3,zero,accc <__alt_exception_stack_pointer+0xf800accc>
    b064:	00bfe034 	movhi	r2,65408
    b068:	10bfffc4 	addi	r2,r2,-1
    b06c:	2021883a 	mov	r16,r4
    b070:	4090703a 	and	r8,r8,r2
    b074:	003eb306 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b078:	4444b03a 	or	r2,r8,r17
    b07c:	8000291e 	bne	r16,zero,b124 <__adddf3+0x65c>
    b080:	10004b1e 	bne	r2,zero,b1b0 <__adddf3+0x6e8>
    b084:	4990b03a 	or	r8,r9,r6
    b088:	40008b26 	beq	r8,zero,b2b8 <__adddf3+0x7f0>
    b08c:	4811883a 	mov	r8,r9
    b090:	3023883a 	mov	r17,r6
    b094:	3825883a 	mov	r18,r7
    b098:	003eaa06 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b09c:	1021883a 	mov	r16,r2
    b0a0:	0011883a 	mov	r8,zero
    b0a4:	0005883a 	mov	r2,zero
    b0a8:	003f0f06 	br	ace8 <__alt_exception_stack_pointer+0xf800ace8>
    b0ac:	217ff804 	addi	r5,r4,-32
    b0b0:	00800804 	movi	r2,32
    b0b4:	494ad83a 	srl	r5,r9,r5
    b0b8:	20807d26 	beq	r4,r2,b2b0 <__adddf3+0x7e8>
    b0bc:	00801004 	movi	r2,64
    b0c0:	1109c83a 	sub	r4,r2,r4
    b0c4:	4912983a 	sll	r9,r9,r4
    b0c8:	498cb03a 	or	r6,r9,r6
    b0cc:	300cc03a 	cmpne	r6,r6,zero
    b0d0:	298ab03a 	or	r5,r5,r6
    b0d4:	0013883a 	mov	r9,zero
    b0d8:	003f1506 	br	ad30 <__alt_exception_stack_pointer+0xf800ad30>
    b0dc:	0101ffc4 	movi	r4,2047
    b0e0:	113f9a1e 	bne	r2,r4,af4c <__alt_exception_stack_pointer+0xf800af4c>
    b0e4:	4811883a 	mov	r8,r9
    b0e8:	3023883a 	mov	r17,r6
    b0ec:	1021883a 	mov	r16,r2
    b0f0:	3825883a 	mov	r18,r7
    b0f4:	003e9306 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b0f8:	8000161e 	bne	r16,zero,b154 <__adddf3+0x68c>
    b0fc:	444ab03a 	or	r5,r8,r17
    b100:	28005126 	beq	r5,zero,b248 <__adddf3+0x780>
    b104:	0108303a 	nor	r4,zero,r4
    b108:	20004d1e 	bne	r4,zero,b240 <__adddf3+0x778>
    b10c:	89a3883a 	add	r17,r17,r6
    b110:	4253883a 	add	r9,r8,r9
    b114:	898d803a 	cmpltu	r6,r17,r6
    b118:	3251883a 	add	r8,r6,r9
    b11c:	1021883a 	mov	r16,r2
    b120:	003f0806 	br	ad44 <__alt_exception_stack_pointer+0xf800ad44>
    b124:	1000301e 	bne	r2,zero,b1e8 <__adddf3+0x720>
    b128:	4984b03a 	or	r2,r9,r6
    b12c:	10007126 	beq	r2,zero,b2f4 <__adddf3+0x82c>
    b130:	4811883a 	mov	r8,r9
    b134:	3023883a 	mov	r17,r6
    b138:	3825883a 	mov	r18,r7
    b13c:	0401ffc4 	movi	r16,2047
    b140:	003e8006 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b144:	4462b03a 	or	r17,r8,r17
    b148:	8822c03a 	cmpne	r17,r17,zero
    b14c:	0007883a 	mov	r3,zero
    b150:	003f8b06 	br	af80 <__alt_exception_stack_pointer+0xf800af80>
    b154:	0141ffc4 	movi	r5,2047
    b158:	11403b26 	beq	r2,r5,b248 <__adddf3+0x780>
    b15c:	0109c83a 	sub	r4,zero,r4
    b160:	42002034 	orhi	r8,r8,128
    b164:	01400e04 	movi	r5,56
    b168:	29006716 	blt	r5,r4,b308 <__adddf3+0x840>
    b16c:	014007c4 	movi	r5,31
    b170:	29007016 	blt	r5,r4,b334 <__adddf3+0x86c>
    b174:	01400804 	movi	r5,32
    b178:	290bc83a 	sub	r5,r5,r4
    b17c:	4154983a 	sll	r10,r8,r5
    b180:	890ed83a 	srl	r7,r17,r4
    b184:	894a983a 	sll	r5,r17,r5
    b188:	4108d83a 	srl	r4,r8,r4
    b18c:	51e2b03a 	or	r17,r10,r7
    b190:	280ac03a 	cmpne	r5,r5,zero
    b194:	8962b03a 	or	r17,r17,r5
    b198:	89a3883a 	add	r17,r17,r6
    b19c:	2253883a 	add	r9,r4,r9
    b1a0:	898d803a 	cmpltu	r6,r17,r6
    b1a4:	3251883a 	add	r8,r6,r9
    b1a8:	1021883a 	mov	r16,r2
    b1ac:	003ee506 	br	ad44 <__alt_exception_stack_pointer+0xf800ad44>
    b1b0:	4984b03a 	or	r2,r9,r6
    b1b4:	103e6326 	beq	r2,zero,ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b1b8:	8987c83a 	sub	r3,r17,r6
    b1bc:	88c9803a 	cmpltu	r4,r17,r3
    b1c0:	4245c83a 	sub	r2,r8,r9
    b1c4:	1105c83a 	sub	r2,r2,r4
    b1c8:	1100202c 	andhi	r4,r2,128
    b1cc:	203ebb26 	beq	r4,zero,acbc <__alt_exception_stack_pointer+0xf800acbc>
    b1d0:	3463c83a 	sub	r17,r6,r17
    b1d4:	4a07c83a 	sub	r3,r9,r8
    b1d8:	344d803a 	cmpltu	r6,r6,r17
    b1dc:	1991c83a 	sub	r8,r3,r6
    b1e0:	3825883a 	mov	r18,r7
    b1e4:	003e5706 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b1e8:	4984b03a 	or	r2,r9,r6
    b1ec:	10002e26 	beq	r2,zero,b2a8 <__adddf3+0x7e0>
    b1f0:	4004d0fa 	srli	r2,r8,3
    b1f4:	8822d0fa 	srli	r17,r17,3
    b1f8:	4010977a 	slli	r8,r8,29
    b1fc:	10c0022c 	andhi	r3,r2,8
    b200:	4462b03a 	or	r17,r8,r17
    b204:	18000826 	beq	r3,zero,b228 <__adddf3+0x760>
    b208:	4808d0fa 	srli	r4,r9,3
    b20c:	20c0022c 	andhi	r3,r4,8
    b210:	1800051e 	bne	r3,zero,b228 <__adddf3+0x760>
    b214:	300cd0fa 	srli	r6,r6,3
    b218:	4806977a 	slli	r3,r9,29
    b21c:	2005883a 	mov	r2,r4
    b220:	3825883a 	mov	r18,r7
    b224:	19a2b03a 	or	r17,r3,r6
    b228:	8810d77a 	srli	r8,r17,29
    b22c:	100490fa 	slli	r2,r2,3
    b230:	882290fa 	slli	r17,r17,3
    b234:	0401ffc4 	movi	r16,2047
    b238:	4090b03a 	or	r8,r8,r2
    b23c:	003e4106 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b240:	0141ffc4 	movi	r5,2047
    b244:	117fc71e 	bne	r2,r5,b164 <__alt_exception_stack_pointer+0xf800b164>
    b248:	4811883a 	mov	r8,r9
    b24c:	3023883a 	mov	r17,r6
    b250:	1021883a 	mov	r16,r2
    b254:	003e3b06 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b258:	10002f26 	beq	r2,zero,b318 <__adddf3+0x850>
    b25c:	4984b03a 	or	r2,r9,r6
    b260:	10001126 	beq	r2,zero,b2a8 <__adddf3+0x7e0>
    b264:	4004d0fa 	srli	r2,r8,3
    b268:	8822d0fa 	srli	r17,r17,3
    b26c:	4010977a 	slli	r8,r8,29
    b270:	10c0022c 	andhi	r3,r2,8
    b274:	4462b03a 	or	r17,r8,r17
    b278:	183feb26 	beq	r3,zero,b228 <__alt_exception_stack_pointer+0xf800b228>
    b27c:	4808d0fa 	srli	r4,r9,3
    b280:	20c0022c 	andhi	r3,r4,8
    b284:	183fe81e 	bne	r3,zero,b228 <__alt_exception_stack_pointer+0xf800b228>
    b288:	300cd0fa 	srli	r6,r6,3
    b28c:	4806977a 	slli	r3,r9,29
    b290:	2005883a 	mov	r2,r4
    b294:	19a2b03a 	or	r17,r3,r6
    b298:	003fe306 	br	b228 <__alt_exception_stack_pointer+0xf800b228>
    b29c:	0011883a 	mov	r8,zero
    b2a0:	0005883a 	mov	r2,zero
    b2a4:	003e3f06 	br	aba4 <__alt_exception_stack_pointer+0xf800aba4>
    b2a8:	0401ffc4 	movi	r16,2047
    b2ac:	003e2506 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b2b0:	0013883a 	mov	r9,zero
    b2b4:	003f8406 	br	b0c8 <__alt_exception_stack_pointer+0xf800b0c8>
    b2b8:	0005883a 	mov	r2,zero
    b2bc:	0007883a 	mov	r3,zero
    b2c0:	003e8906 	br	ace8 <__alt_exception_stack_pointer+0xf800ace8>
    b2c4:	197ff804 	addi	r5,r3,-32
    b2c8:	01000804 	movi	r4,32
    b2cc:	414ad83a 	srl	r5,r8,r5
    b2d0:	19002426 	beq	r3,r4,b364 <__adddf3+0x89c>
    b2d4:	01001004 	movi	r4,64
    b2d8:	20c7c83a 	sub	r3,r4,r3
    b2dc:	40c6983a 	sll	r3,r8,r3
    b2e0:	1c46b03a 	or	r3,r3,r17
    b2e4:	1806c03a 	cmpne	r3,r3,zero
    b2e8:	28e2b03a 	or	r17,r5,r3
    b2ec:	0007883a 	mov	r3,zero
    b2f0:	003f2306 	br	af80 <__alt_exception_stack_pointer+0xf800af80>
    b2f4:	0007883a 	mov	r3,zero
    b2f8:	5811883a 	mov	r8,r11
    b2fc:	00bfffc4 	movi	r2,-1
    b300:	0401ffc4 	movi	r16,2047
    b304:	003e7806 	br	ace8 <__alt_exception_stack_pointer+0xf800ace8>
    b308:	4462b03a 	or	r17,r8,r17
    b30c:	8822c03a 	cmpne	r17,r17,zero
    b310:	0009883a 	mov	r4,zero
    b314:	003fa006 	br	b198 <__alt_exception_stack_pointer+0xf800b198>
    b318:	4811883a 	mov	r8,r9
    b31c:	3023883a 	mov	r17,r6
    b320:	0401ffc4 	movi	r16,2047
    b324:	003e0706 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b328:	4811883a 	mov	r8,r9
    b32c:	3023883a 	mov	r17,r6
    b330:	003e0406 	br	ab44 <__alt_exception_stack_pointer+0xf800ab44>
    b334:	21fff804 	addi	r7,r4,-32
    b338:	01400804 	movi	r5,32
    b33c:	41ced83a 	srl	r7,r8,r7
    b340:	21400a26 	beq	r4,r5,b36c <__adddf3+0x8a4>
    b344:	01401004 	movi	r5,64
    b348:	2909c83a 	sub	r4,r5,r4
    b34c:	4108983a 	sll	r4,r8,r4
    b350:	2448b03a 	or	r4,r4,r17
    b354:	2008c03a 	cmpne	r4,r4,zero
    b358:	3922b03a 	or	r17,r7,r4
    b35c:	0009883a 	mov	r4,zero
    b360:	003f8d06 	br	b198 <__alt_exception_stack_pointer+0xf800b198>
    b364:	0007883a 	mov	r3,zero
    b368:	003fdd06 	br	b2e0 <__alt_exception_stack_pointer+0xf800b2e0>
    b36c:	0009883a 	mov	r4,zero
    b370:	003ff706 	br	b350 <__alt_exception_stack_pointer+0xf800b350>

0000b374 <__divdf3>:
    b374:	defff004 	addi	sp,sp,-64
    b378:	dc800815 	stw	r18,32(sp)
    b37c:	2824d53a 	srli	r18,r5,20
    b380:	dd800c15 	stw	r22,48(sp)
    b384:	282cd7fa 	srli	r22,r5,31
    b388:	dc000615 	stw	r16,24(sp)
    b38c:	04000434 	movhi	r16,16
    b390:	843fffc4 	addi	r16,r16,-1
    b394:	dfc00f15 	stw	ra,60(sp)
    b398:	df000e15 	stw	fp,56(sp)
    b39c:	ddc00d15 	stw	r23,52(sp)
    b3a0:	dd400b15 	stw	r21,44(sp)
    b3a4:	dd000a15 	stw	r20,40(sp)
    b3a8:	dcc00915 	stw	r19,36(sp)
    b3ac:	dc400715 	stw	r17,28(sp)
    b3b0:	9481ffcc 	andi	r18,r18,2047
    b3b4:	2c20703a 	and	r16,r5,r16
    b3b8:	b2003fcc 	andi	r8,r22,255
    b3bc:	90006126 	beq	r18,zero,b544 <__divdf3+0x1d0>
    b3c0:	0081ffc4 	movi	r2,2047
    b3c4:	202b883a 	mov	r21,r4
    b3c8:	90803726 	beq	r18,r2,b4a8 <__divdf3+0x134>
    b3cc:	80800434 	orhi	r2,r16,16
    b3d0:	100490fa 	slli	r2,r2,3
    b3d4:	2020d77a 	srli	r16,r4,29
    b3d8:	202a90fa 	slli	r21,r4,3
    b3dc:	94bf0044 	addi	r18,r18,-1023
    b3e0:	80a0b03a 	or	r16,r16,r2
    b3e4:	0013883a 	mov	r9,zero
    b3e8:	000b883a 	mov	r5,zero
    b3ec:	3806d53a 	srli	r3,r7,20
    b3f0:	382ed7fa 	srli	r23,r7,31
    b3f4:	04400434 	movhi	r17,16
    b3f8:	8c7fffc4 	addi	r17,r17,-1
    b3fc:	18c1ffcc 	andi	r3,r3,2047
    b400:	3029883a 	mov	r20,r6
    b404:	3c62703a 	and	r17,r7,r17
    b408:	bf003fcc 	andi	fp,r23,255
    b40c:	18006e26 	beq	r3,zero,b5c8 <__divdf3+0x254>
    b410:	0081ffc4 	movi	r2,2047
    b414:	18806626 	beq	r3,r2,b5b0 <__divdf3+0x23c>
    b418:	88800434 	orhi	r2,r17,16
    b41c:	100490fa 	slli	r2,r2,3
    b420:	3022d77a 	srli	r17,r6,29
    b424:	302890fa 	slli	r20,r6,3
    b428:	18ff0044 	addi	r3,r3,-1023
    b42c:	88a2b03a 	or	r17,r17,r2
    b430:	000f883a 	mov	r7,zero
    b434:	b5e6f03a 	xor	r19,r22,r23
    b438:	3a4cb03a 	or	r6,r7,r9
    b43c:	008003c4 	movi	r2,15
    b440:	9809883a 	mov	r4,r19
    b444:	90c7c83a 	sub	r3,r18,r3
    b448:	9cc03fcc 	andi	r19,r19,255
    b44c:	11809636 	bltu	r2,r6,b6a8 <__divdf3+0x334>
    b450:	300c90ba 	slli	r6,r6,2
    b454:	00800074 	movhi	r2,1
    b458:	10ad1a04 	addi	r2,r2,-19352
    b45c:	308d883a 	add	r6,r6,r2
    b460:	30800017 	ldw	r2,0(r6)
    b464:	1000683a 	jmp	r2
    b468:	0000b6a8 	cmpgeui	zero,zero,730
    b46c:	0000b4e0 	cmpeqi	zero,zero,723
    b470:	0000b698 	cmpnei	zero,zero,730
    b474:	0000b4d4 	movui	zero,723
    b478:	0000b698 	cmpnei	zero,zero,730
    b47c:	0000b66c 	andhi	zero,zero,729
    b480:	0000b698 	cmpnei	zero,zero,730
    b484:	0000b4d4 	movui	zero,723
    b488:	0000b4e0 	cmpeqi	zero,zero,723
    b48c:	0000b4e0 	cmpeqi	zero,zero,723
    b490:	0000b66c 	andhi	zero,zero,729
    b494:	0000b4d4 	movui	zero,723
    b498:	0000b4c4 	movi	zero,723
    b49c:	0000b4c4 	movi	zero,723
    b4a0:	0000b4c4 	movi	zero,723
    b4a4:	0000ba30 	cmpltui	zero,zero,744
    b4a8:	2404b03a 	or	r2,r4,r16
    b4ac:	10006c1e 	bne	r2,zero,b660 <__divdf3+0x2ec>
    b4b0:	02400204 	movi	r9,8
    b4b4:	0021883a 	mov	r16,zero
    b4b8:	002b883a 	mov	r21,zero
    b4bc:	01400084 	movi	r5,2
    b4c0:	003fca06 	br	b3ec <__alt_exception_stack_pointer+0xf800b3ec>
    b4c4:	8023883a 	mov	r17,r16
    b4c8:	a829883a 	mov	r20,r21
    b4cc:	4039883a 	mov	fp,r8
    b4d0:	280f883a 	mov	r7,r5
    b4d4:	00800084 	movi	r2,2
    b4d8:	3881601e 	bne	r7,r2,ba5c <__divdf3+0x6e8>
    b4dc:	e027883a 	mov	r19,fp
    b4e0:	9900004c 	andi	r4,r19,1
    b4e4:	0081ffc4 	movi	r2,2047
    b4e8:	0021883a 	mov	r16,zero
    b4ec:	002b883a 	mov	r21,zero
    b4f0:	1004953a 	slli	r2,r2,20
    b4f4:	20c03fcc 	andi	r3,r4,255
    b4f8:	01400434 	movhi	r5,16
    b4fc:	297fffc4 	addi	r5,r5,-1
    b500:	180697fa 	slli	r3,r3,31
    b504:	8160703a 	and	r16,r16,r5
    b508:	80a0b03a 	or	r16,r16,r2
    b50c:	80c6b03a 	or	r3,r16,r3
    b510:	a805883a 	mov	r2,r21
    b514:	dfc00f17 	ldw	ra,60(sp)
    b518:	df000e17 	ldw	fp,56(sp)
    b51c:	ddc00d17 	ldw	r23,52(sp)
    b520:	dd800c17 	ldw	r22,48(sp)
    b524:	dd400b17 	ldw	r21,44(sp)
    b528:	dd000a17 	ldw	r20,40(sp)
    b52c:	dcc00917 	ldw	r19,36(sp)
    b530:	dc800817 	ldw	r18,32(sp)
    b534:	dc400717 	ldw	r17,28(sp)
    b538:	dc000617 	ldw	r16,24(sp)
    b53c:	dec01004 	addi	sp,sp,64
    b540:	f800283a 	ret
    b544:	2404b03a 	or	r2,r4,r16
    b548:	2023883a 	mov	r17,r4
    b54c:	10003f26 	beq	r2,zero,b64c <__divdf3+0x2d8>
    b550:	80015e26 	beq	r16,zero,bacc <__divdf3+0x758>
    b554:	8009883a 	mov	r4,r16
    b558:	d9800215 	stw	r6,8(sp)
    b55c:	d9c00515 	stw	r7,20(sp)
    b560:	da000415 	stw	r8,16(sp)
    b564:	000d3080 	call	d308 <__clzsi2>
    b568:	d9800217 	ldw	r6,8(sp)
    b56c:	d9c00517 	ldw	r7,20(sp)
    b570:	da000417 	ldw	r8,16(sp)
    b574:	113ffd44 	addi	r4,r2,-11
    b578:	00c00704 	movi	r3,28
    b57c:	19014f16 	blt	r3,r4,babc <__divdf3+0x748>
    b580:	00c00744 	movi	r3,29
    b584:	157ffe04 	addi	r21,r2,-8
    b588:	1907c83a 	sub	r3,r3,r4
    b58c:	8560983a 	sll	r16,r16,r21
    b590:	88c6d83a 	srl	r3,r17,r3
    b594:	8d6a983a 	sll	r21,r17,r21
    b598:	1c20b03a 	or	r16,r3,r16
    b59c:	1080fcc4 	addi	r2,r2,1011
    b5a0:	00a5c83a 	sub	r18,zero,r2
    b5a4:	0013883a 	mov	r9,zero
    b5a8:	000b883a 	mov	r5,zero
    b5ac:	003f8f06 	br	b3ec <__alt_exception_stack_pointer+0xf800b3ec>
    b5b0:	3444b03a 	or	r2,r6,r17
    b5b4:	1000231e 	bne	r2,zero,b644 <__divdf3+0x2d0>
    b5b8:	0023883a 	mov	r17,zero
    b5bc:	0029883a 	mov	r20,zero
    b5c0:	01c00084 	movi	r7,2
    b5c4:	003f9b06 	br	b434 <__alt_exception_stack_pointer+0xf800b434>
    b5c8:	3444b03a 	or	r2,r6,r17
    b5cc:	10001926 	beq	r2,zero,b634 <__divdf3+0x2c0>
    b5d0:	88014b26 	beq	r17,zero,bb00 <__divdf3+0x78c>
    b5d4:	8809883a 	mov	r4,r17
    b5d8:	d9400115 	stw	r5,4(sp)
    b5dc:	d9800215 	stw	r6,8(sp)
    b5e0:	da000415 	stw	r8,16(sp)
    b5e4:	da400315 	stw	r9,12(sp)
    b5e8:	000d3080 	call	d308 <__clzsi2>
    b5ec:	d9400117 	ldw	r5,4(sp)
    b5f0:	d9800217 	ldw	r6,8(sp)
    b5f4:	da000417 	ldw	r8,16(sp)
    b5f8:	da400317 	ldw	r9,12(sp)
    b5fc:	113ffd44 	addi	r4,r2,-11
    b600:	00c00704 	movi	r3,28
    b604:	19013a16 	blt	r3,r4,baf0 <__divdf3+0x77c>
    b608:	00c00744 	movi	r3,29
    b60c:	153ffe04 	addi	r20,r2,-8
    b610:	1907c83a 	sub	r3,r3,r4
    b614:	8d22983a 	sll	r17,r17,r20
    b618:	30c6d83a 	srl	r3,r6,r3
    b61c:	3528983a 	sll	r20,r6,r20
    b620:	1c62b03a 	or	r17,r3,r17
    b624:	1080fcc4 	addi	r2,r2,1011
    b628:	0087c83a 	sub	r3,zero,r2
    b62c:	000f883a 	mov	r7,zero
    b630:	003f8006 	br	b434 <__alt_exception_stack_pointer+0xf800b434>
    b634:	0023883a 	mov	r17,zero
    b638:	0029883a 	mov	r20,zero
    b63c:	01c00044 	movi	r7,1
    b640:	003f7c06 	br	b434 <__alt_exception_stack_pointer+0xf800b434>
    b644:	01c000c4 	movi	r7,3
    b648:	003f7a06 	br	b434 <__alt_exception_stack_pointer+0xf800b434>
    b64c:	02400104 	movi	r9,4
    b650:	0021883a 	mov	r16,zero
    b654:	002b883a 	mov	r21,zero
    b658:	01400044 	movi	r5,1
    b65c:	003f6306 	br	b3ec <__alt_exception_stack_pointer+0xf800b3ec>
    b660:	02400304 	movi	r9,12
    b664:	014000c4 	movi	r5,3
    b668:	003f6006 	br	b3ec <__alt_exception_stack_pointer+0xf800b3ec>
    b66c:	04000434 	movhi	r16,16
    b670:	0009883a 	mov	r4,zero
    b674:	843fffc4 	addi	r16,r16,-1
    b678:	057fffc4 	movi	r21,-1
    b67c:	0081ffc4 	movi	r2,2047
    b680:	003f9b06 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    b684:	00c00044 	movi	r3,1
    b688:	1887c83a 	sub	r3,r3,r2
    b68c:	01000e04 	movi	r4,56
    b690:	20c1530e 	bge	r4,r3,bbe0 <__divdf3+0x86c>
    b694:	9900004c 	andi	r4,r19,1
    b698:	0005883a 	mov	r2,zero
    b69c:	0021883a 	mov	r16,zero
    b6a0:	002b883a 	mov	r21,zero
    b6a4:	003f9206 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    b6a8:	8c012e36 	bltu	r17,r16,bb64 <__divdf3+0x7f0>
    b6ac:	84412c26 	beq	r16,r17,bb60 <__divdf3+0x7ec>
    b6b0:	a82f883a 	mov	r23,r21
    b6b4:	18ffffc4 	addi	r3,r3,-1
    b6b8:	002b883a 	mov	r21,zero
    b6bc:	a004d63a 	srli	r2,r20,24
    b6c0:	8822923a 	slli	r17,r17,8
    b6c4:	a028923a 	slli	r20,r20,8
    b6c8:	8009883a 	mov	r4,r16
    b6cc:	88acb03a 	or	r22,r17,r2
    b6d0:	dd000015 	stw	r20,0(sp)
    b6d4:	b028d43a 	srli	r20,r22,16
    b6d8:	d8c00215 	stw	r3,8(sp)
    b6dc:	b4bfffcc 	andi	r18,r22,65535
    b6e0:	a00b883a 	mov	r5,r20
    b6e4:	000a9e40 	call	a9e4 <__udivsi3>
    b6e8:	100b883a 	mov	r5,r2
    b6ec:	9009883a 	mov	r4,r18
    b6f0:	1023883a 	mov	r17,r2
    b6f4:	000aaa00 	call	aaa0 <__mulsi3>
    b6f8:	8009883a 	mov	r4,r16
    b6fc:	a00b883a 	mov	r5,r20
    b700:	1039883a 	mov	fp,r2
    b704:	000aa480 	call	aa48 <__umodsi3>
    b708:	1004943a 	slli	r2,r2,16
    b70c:	b808d43a 	srli	r4,r23,16
    b710:	d8c00217 	ldw	r3,8(sp)
    b714:	2084b03a 	or	r2,r4,r2
    b718:	1700062e 	bgeu	r2,fp,b734 <__divdf3+0x3c0>
    b71c:	1585883a 	add	r2,r2,r22
    b720:	893fffc4 	addi	r4,r17,-1
    b724:	15811d36 	bltu	r2,r22,bb9c <__divdf3+0x828>
    b728:	17011c2e 	bgeu	r2,fp,bb9c <__divdf3+0x828>
    b72c:	8c7fff84 	addi	r17,r17,-2
    b730:	1585883a 	add	r2,r2,r22
    b734:	1739c83a 	sub	fp,r2,fp
    b738:	a00b883a 	mov	r5,r20
    b73c:	e009883a 	mov	r4,fp
    b740:	d8c00215 	stw	r3,8(sp)
    b744:	000a9e40 	call	a9e4 <__udivsi3>
    b748:	100b883a 	mov	r5,r2
    b74c:	9009883a 	mov	r4,r18
    b750:	1021883a 	mov	r16,r2
    b754:	000aaa00 	call	aaa0 <__mulsi3>
    b758:	a00b883a 	mov	r5,r20
    b75c:	e009883a 	mov	r4,fp
    b760:	d8800415 	stw	r2,16(sp)
    b764:	000aa480 	call	aa48 <__umodsi3>
    b768:	1004943a 	slli	r2,r2,16
    b76c:	da000417 	ldw	r8,16(sp)
    b770:	bdffffcc 	andi	r23,r23,65535
    b774:	b884b03a 	or	r2,r23,r2
    b778:	d8c00217 	ldw	r3,8(sp)
    b77c:	1200062e 	bgeu	r2,r8,b798 <__divdf3+0x424>
    b780:	1585883a 	add	r2,r2,r22
    b784:	813fffc4 	addi	r4,r16,-1
    b788:	15810236 	bltu	r2,r22,bb94 <__divdf3+0x820>
    b78c:	1201012e 	bgeu	r2,r8,bb94 <__divdf3+0x820>
    b790:	843fff84 	addi	r16,r16,-2
    b794:	1585883a 	add	r2,r2,r22
    b798:	8822943a 	slli	r17,r17,16
    b79c:	d9800017 	ldw	r6,0(sp)
    b7a0:	1211c83a 	sub	r8,r2,r8
    b7a4:	8c22b03a 	or	r17,r17,r16
    b7a8:	373fffcc 	andi	fp,r6,65535
    b7ac:	8abfffcc 	andi	r10,r17,65535
    b7b0:	8820d43a 	srli	r16,r17,16
    b7b4:	5009883a 	mov	r4,r10
    b7b8:	e00b883a 	mov	r5,fp
    b7bc:	302ed43a 	srli	r23,r6,16
    b7c0:	d8c00215 	stw	r3,8(sp)
    b7c4:	da000415 	stw	r8,16(sp)
    b7c8:	da800115 	stw	r10,4(sp)
    b7cc:	000aaa00 	call	aaa0 <__mulsi3>
    b7d0:	800b883a 	mov	r5,r16
    b7d4:	e009883a 	mov	r4,fp
    b7d8:	d8800515 	stw	r2,20(sp)
    b7dc:	000aaa00 	call	aaa0 <__mulsi3>
    b7e0:	8009883a 	mov	r4,r16
    b7e4:	b80b883a 	mov	r5,r23
    b7e8:	d8800315 	stw	r2,12(sp)
    b7ec:	000aaa00 	call	aaa0 <__mulsi3>
    b7f0:	da800117 	ldw	r10,4(sp)
    b7f4:	b80b883a 	mov	r5,r23
    b7f8:	1021883a 	mov	r16,r2
    b7fc:	5009883a 	mov	r4,r10
    b800:	000aaa00 	call	aaa0 <__mulsi3>
    b804:	d9c00517 	ldw	r7,20(sp)
    b808:	da400317 	ldw	r9,12(sp)
    b80c:	d8c00217 	ldw	r3,8(sp)
    b810:	3808d43a 	srli	r4,r7,16
    b814:	1245883a 	add	r2,r2,r9
    b818:	da000417 	ldw	r8,16(sp)
    b81c:	2085883a 	add	r2,r4,r2
    b820:	1240022e 	bgeu	r2,r9,b82c <__divdf3+0x4b8>
    b824:	01000074 	movhi	r4,1
    b828:	8121883a 	add	r16,r16,r4
    b82c:	1008d43a 	srli	r4,r2,16
    b830:	1004943a 	slli	r2,r2,16
    b834:	39ffffcc 	andi	r7,r7,65535
    b838:	2409883a 	add	r4,r4,r16
    b83c:	11c5883a 	add	r2,r2,r7
    b840:	4100bb36 	bltu	r8,r4,bb30 <__divdf3+0x7bc>
    b844:	4100d726 	beq	r8,r4,bba4 <__divdf3+0x830>
    b848:	4109c83a 	sub	r4,r8,r4
    b84c:	a8a1c83a 	sub	r16,r21,r2
    b850:	ac2b803a 	cmpltu	r21,r21,r16
    b854:	256bc83a 	sub	r21,r4,r21
    b858:	b540d926 	beq	r22,r21,bbc0 <__divdf3+0x84c>
    b85c:	a00b883a 	mov	r5,r20
    b860:	a809883a 	mov	r4,r21
    b864:	d8c00215 	stw	r3,8(sp)
    b868:	000a9e40 	call	a9e4 <__udivsi3>
    b86c:	100b883a 	mov	r5,r2
    b870:	9009883a 	mov	r4,r18
    b874:	d8800515 	stw	r2,20(sp)
    b878:	000aaa00 	call	aaa0 <__mulsi3>
    b87c:	a809883a 	mov	r4,r21
    b880:	a00b883a 	mov	r5,r20
    b884:	d8800415 	stw	r2,16(sp)
    b888:	000aa480 	call	aa48 <__umodsi3>
    b88c:	1004943a 	slli	r2,r2,16
    b890:	8008d43a 	srli	r4,r16,16
    b894:	da000417 	ldw	r8,16(sp)
    b898:	d8c00217 	ldw	r3,8(sp)
    b89c:	2084b03a 	or	r2,r4,r2
    b8a0:	d9c00517 	ldw	r7,20(sp)
    b8a4:	1200062e 	bgeu	r2,r8,b8c0 <__divdf3+0x54c>
    b8a8:	1585883a 	add	r2,r2,r22
    b8ac:	393fffc4 	addi	r4,r7,-1
    b8b0:	1580c536 	bltu	r2,r22,bbc8 <__divdf3+0x854>
    b8b4:	1200c42e 	bgeu	r2,r8,bbc8 <__divdf3+0x854>
    b8b8:	39ffff84 	addi	r7,r7,-2
    b8bc:	1585883a 	add	r2,r2,r22
    b8c0:	122bc83a 	sub	r21,r2,r8
    b8c4:	a00b883a 	mov	r5,r20
    b8c8:	a809883a 	mov	r4,r21
    b8cc:	d8c00215 	stw	r3,8(sp)
    b8d0:	d9c00515 	stw	r7,20(sp)
    b8d4:	000a9e40 	call	a9e4 <__udivsi3>
    b8d8:	9009883a 	mov	r4,r18
    b8dc:	100b883a 	mov	r5,r2
    b8e0:	d8800415 	stw	r2,16(sp)
    b8e4:	000aaa00 	call	aaa0 <__mulsi3>
    b8e8:	a809883a 	mov	r4,r21
    b8ec:	a00b883a 	mov	r5,r20
    b8f0:	1025883a 	mov	r18,r2
    b8f4:	000aa480 	call	aa48 <__umodsi3>
    b8f8:	1004943a 	slli	r2,r2,16
    b8fc:	813fffcc 	andi	r4,r16,65535
    b900:	d8c00217 	ldw	r3,8(sp)
    b904:	20a0b03a 	or	r16,r4,r2
    b908:	d9c00517 	ldw	r7,20(sp)
    b90c:	da000417 	ldw	r8,16(sp)
    b910:	8480062e 	bgeu	r16,r18,b92c <__divdf3+0x5b8>
    b914:	85a1883a 	add	r16,r16,r22
    b918:	40bfffc4 	addi	r2,r8,-1
    b91c:	8580ac36 	bltu	r16,r22,bbd0 <__divdf3+0x85c>
    b920:	8480ab2e 	bgeu	r16,r18,bbd0 <__divdf3+0x85c>
    b924:	423fff84 	addi	r8,r8,-2
    b928:	85a1883a 	add	r16,r16,r22
    b92c:	3804943a 	slli	r2,r7,16
    b930:	84a1c83a 	sub	r16,r16,r18
    b934:	e009883a 	mov	r4,fp
    b938:	1228b03a 	or	r20,r2,r8
    b93c:	a1ffffcc 	andi	r7,r20,65535
    b940:	a024d43a 	srli	r18,r20,16
    b944:	380b883a 	mov	r5,r7
    b948:	d8c00215 	stw	r3,8(sp)
    b94c:	d9c00515 	stw	r7,20(sp)
    b950:	000aaa00 	call	aaa0 <__mulsi3>
    b954:	900b883a 	mov	r5,r18
    b958:	e009883a 	mov	r4,fp
    b95c:	102b883a 	mov	r21,r2
    b960:	000aaa00 	call	aaa0 <__mulsi3>
    b964:	900b883a 	mov	r5,r18
    b968:	b809883a 	mov	r4,r23
    b96c:	1039883a 	mov	fp,r2
    b970:	000aaa00 	call	aaa0 <__mulsi3>
    b974:	d9c00517 	ldw	r7,20(sp)
    b978:	b80b883a 	mov	r5,r23
    b97c:	1025883a 	mov	r18,r2
    b980:	3809883a 	mov	r4,r7
    b984:	000aaa00 	call	aaa0 <__mulsi3>
    b988:	a808d43a 	srli	r4,r21,16
    b98c:	1705883a 	add	r2,r2,fp
    b990:	d8c00217 	ldw	r3,8(sp)
    b994:	2085883a 	add	r2,r4,r2
    b998:	1700022e 	bgeu	r2,fp,b9a4 <__divdf3+0x630>
    b99c:	01000074 	movhi	r4,1
    b9a0:	9125883a 	add	r18,r18,r4
    b9a4:	1008d43a 	srli	r4,r2,16
    b9a8:	1004943a 	slli	r2,r2,16
    b9ac:	ad7fffcc 	andi	r21,r21,65535
    b9b0:	2489883a 	add	r4,r4,r18
    b9b4:	1545883a 	add	r2,r2,r21
    b9b8:	81003836 	bltu	r16,r4,ba9c <__divdf3+0x728>
    b9bc:	81003626 	beq	r16,r4,ba98 <__divdf3+0x724>
    b9c0:	a5000054 	ori	r20,r20,1
    b9c4:	1880ffc4 	addi	r2,r3,1023
    b9c8:	00bf2e0e 	bge	zero,r2,b684 <__alt_exception_stack_pointer+0xf800b684>
    b9cc:	a10001cc 	andi	r4,r20,7
    b9d0:	20000726 	beq	r4,zero,b9f0 <__divdf3+0x67c>
    b9d4:	a10003cc 	andi	r4,r20,15
    b9d8:	01400104 	movi	r5,4
    b9dc:	21400426 	beq	r4,r5,b9f0 <__divdf3+0x67c>
    b9e0:	a149883a 	add	r4,r20,r5
    b9e4:	2529803a 	cmpltu	r20,r4,r20
    b9e8:	8d23883a 	add	r17,r17,r20
    b9ec:	2029883a 	mov	r20,r4
    b9f0:	8900402c 	andhi	r4,r17,256
    b9f4:	20000426 	beq	r4,zero,ba08 <__divdf3+0x694>
    b9f8:	18810004 	addi	r2,r3,1024
    b9fc:	00ffc034 	movhi	r3,65280
    ba00:	18ffffc4 	addi	r3,r3,-1
    ba04:	88e2703a 	and	r17,r17,r3
    ba08:	00c1ff84 	movi	r3,2046
    ba0c:	18beb416 	blt	r3,r2,b4e0 <__alt_exception_stack_pointer+0xf800b4e0>
    ba10:	a028d0fa 	srli	r20,r20,3
    ba14:	882a977a 	slli	r21,r17,29
    ba18:	8820927a 	slli	r16,r17,9
    ba1c:	1081ffcc 	andi	r2,r2,2047
    ba20:	ad2ab03a 	or	r21,r21,r20
    ba24:	8020d33a 	srli	r16,r16,12
    ba28:	9900004c 	andi	r4,r19,1
    ba2c:	003eb006 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    ba30:	8080022c 	andhi	r2,r16,8
    ba34:	10001226 	beq	r2,zero,ba80 <__divdf3+0x70c>
    ba38:	8880022c 	andhi	r2,r17,8
    ba3c:	1000101e 	bne	r2,zero,ba80 <__divdf3+0x70c>
    ba40:	00800434 	movhi	r2,16
    ba44:	8c000234 	orhi	r16,r17,8
    ba48:	10bfffc4 	addi	r2,r2,-1
    ba4c:	b809883a 	mov	r4,r23
    ba50:	80a0703a 	and	r16,r16,r2
    ba54:	a02b883a 	mov	r21,r20
    ba58:	003f0806 	br	b67c <__alt_exception_stack_pointer+0xf800b67c>
    ba5c:	008000c4 	movi	r2,3
    ba60:	3880b126 	beq	r7,r2,bd28 <__divdf3+0x9b4>
    ba64:	00800044 	movi	r2,1
    ba68:	38805b1e 	bne	r7,r2,bbd8 <__divdf3+0x864>
    ba6c:	e009883a 	mov	r4,fp
    ba70:	0005883a 	mov	r2,zero
    ba74:	0021883a 	mov	r16,zero
    ba78:	002b883a 	mov	r21,zero
    ba7c:	003e9c06 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    ba80:	00800434 	movhi	r2,16
    ba84:	84000234 	orhi	r16,r16,8
    ba88:	10bfffc4 	addi	r2,r2,-1
    ba8c:	b009883a 	mov	r4,r22
    ba90:	80a0703a 	and	r16,r16,r2
    ba94:	003ef906 	br	b67c <__alt_exception_stack_pointer+0xf800b67c>
    ba98:	103fca26 	beq	r2,zero,b9c4 <__alt_exception_stack_pointer+0xf800b9c4>
    ba9c:	b421883a 	add	r16,r22,r16
    baa0:	a17fffc4 	addi	r5,r20,-1
    baa4:	8580422e 	bgeu	r16,r22,bbb0 <__divdf3+0x83c>
    baa8:	2829883a 	mov	r20,r5
    baac:	813fc41e 	bne	r16,r4,b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bab0:	d9800017 	ldw	r6,0(sp)
    bab4:	30bfc21e 	bne	r6,r2,b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bab8:	003fc206 	br	b9c4 <__alt_exception_stack_pointer+0xf800b9c4>
    babc:	143ff604 	addi	r16,r2,-40
    bac0:	8c20983a 	sll	r16,r17,r16
    bac4:	002b883a 	mov	r21,zero
    bac8:	003eb406 	br	b59c <__alt_exception_stack_pointer+0xf800b59c>
    bacc:	d9800215 	stw	r6,8(sp)
    bad0:	d9c00515 	stw	r7,20(sp)
    bad4:	da000415 	stw	r8,16(sp)
    bad8:	000d3080 	call	d308 <__clzsi2>
    badc:	10800804 	addi	r2,r2,32
    bae0:	da000417 	ldw	r8,16(sp)
    bae4:	d9c00517 	ldw	r7,20(sp)
    bae8:	d9800217 	ldw	r6,8(sp)
    baec:	003ea106 	br	b574 <__alt_exception_stack_pointer+0xf800b574>
    baf0:	147ff604 	addi	r17,r2,-40
    baf4:	3462983a 	sll	r17,r6,r17
    baf8:	0029883a 	mov	r20,zero
    bafc:	003ec906 	br	b624 <__alt_exception_stack_pointer+0xf800b624>
    bb00:	3009883a 	mov	r4,r6
    bb04:	d9400115 	stw	r5,4(sp)
    bb08:	d9800215 	stw	r6,8(sp)
    bb0c:	da000415 	stw	r8,16(sp)
    bb10:	da400315 	stw	r9,12(sp)
    bb14:	000d3080 	call	d308 <__clzsi2>
    bb18:	10800804 	addi	r2,r2,32
    bb1c:	da400317 	ldw	r9,12(sp)
    bb20:	da000417 	ldw	r8,16(sp)
    bb24:	d9800217 	ldw	r6,8(sp)
    bb28:	d9400117 	ldw	r5,4(sp)
    bb2c:	003eb306 	br	b5fc <__alt_exception_stack_pointer+0xf800b5fc>
    bb30:	d9800017 	ldw	r6,0(sp)
    bb34:	a9ab883a 	add	r21,r21,r6
    bb38:	a98b803a 	cmpltu	r5,r21,r6
    bb3c:	2d8b883a 	add	r5,r5,r22
    bb40:	2a11883a 	add	r8,r5,r8
    bb44:	897fffc4 	addi	r5,r17,-1
    bb48:	b2000c2e 	bgeu	r22,r8,bb7c <__divdf3+0x808>
    bb4c:	41003f36 	bltu	r8,r4,bc4c <__divdf3+0x8d8>
    bb50:	22006c26 	beq	r4,r8,bd04 <__divdf3+0x990>
    bb54:	4109c83a 	sub	r4,r8,r4
    bb58:	2823883a 	mov	r17,r5
    bb5c:	003f3b06 	br	b84c <__alt_exception_stack_pointer+0xf800b84c>
    bb60:	ad3ed336 	bltu	r21,r20,b6b0 <__alt_exception_stack_pointer+0xf800b6b0>
    bb64:	a804d07a 	srli	r2,r21,1
    bb68:	802e97fa 	slli	r23,r16,31
    bb6c:	a82a97fa 	slli	r21,r21,31
    bb70:	8020d07a 	srli	r16,r16,1
    bb74:	b8aeb03a 	or	r23,r23,r2
    bb78:	003ed006 	br	b6bc <__alt_exception_stack_pointer+0xf800b6bc>
    bb7c:	b23ff51e 	bne	r22,r8,bb54 <__alt_exception_stack_pointer+0xf800bb54>
    bb80:	d9800017 	ldw	r6,0(sp)
    bb84:	a9bff12e 	bgeu	r21,r6,bb4c <__alt_exception_stack_pointer+0xf800bb4c>
    bb88:	b109c83a 	sub	r4,r22,r4
    bb8c:	2823883a 	mov	r17,r5
    bb90:	003f2e06 	br	b84c <__alt_exception_stack_pointer+0xf800b84c>
    bb94:	2021883a 	mov	r16,r4
    bb98:	003eff06 	br	b798 <__alt_exception_stack_pointer+0xf800b798>
    bb9c:	2023883a 	mov	r17,r4
    bba0:	003ee406 	br	b734 <__alt_exception_stack_pointer+0xf800b734>
    bba4:	a8bfe236 	bltu	r21,r2,bb30 <__alt_exception_stack_pointer+0xf800bb30>
    bba8:	0009883a 	mov	r4,zero
    bbac:	003f2706 	br	b84c <__alt_exception_stack_pointer+0xf800b84c>
    bbb0:	81002d36 	bltu	r16,r4,bc68 <__divdf3+0x8f4>
    bbb4:	24005626 	beq	r4,r16,bd10 <__divdf3+0x99c>
    bbb8:	2829883a 	mov	r20,r5
    bbbc:	003f8006 	br	b9c0 <__alt_exception_stack_pointer+0xf800b9c0>
    bbc0:	053fffc4 	movi	r20,-1
    bbc4:	003f7f06 	br	b9c4 <__alt_exception_stack_pointer+0xf800b9c4>
    bbc8:	200f883a 	mov	r7,r4
    bbcc:	003f3c06 	br	b8c0 <__alt_exception_stack_pointer+0xf800b8c0>
    bbd0:	1011883a 	mov	r8,r2
    bbd4:	003f5506 	br	b92c <__alt_exception_stack_pointer+0xf800b92c>
    bbd8:	e027883a 	mov	r19,fp
    bbdc:	003f7906 	br	b9c4 <__alt_exception_stack_pointer+0xf800b9c4>
    bbe0:	010007c4 	movi	r4,31
    bbe4:	20c02816 	blt	r4,r3,bc88 <__divdf3+0x914>
    bbe8:	00800804 	movi	r2,32
    bbec:	10c5c83a 	sub	r2,r2,r3
    bbf0:	888a983a 	sll	r5,r17,r2
    bbf4:	a0c8d83a 	srl	r4,r20,r3
    bbf8:	a084983a 	sll	r2,r20,r2
    bbfc:	88e2d83a 	srl	r17,r17,r3
    bc00:	2906b03a 	or	r3,r5,r4
    bc04:	1004c03a 	cmpne	r2,r2,zero
    bc08:	1886b03a 	or	r3,r3,r2
    bc0c:	188001cc 	andi	r2,r3,7
    bc10:	10000726 	beq	r2,zero,bc30 <__divdf3+0x8bc>
    bc14:	188003cc 	andi	r2,r3,15
    bc18:	01000104 	movi	r4,4
    bc1c:	11000426 	beq	r2,r4,bc30 <__divdf3+0x8bc>
    bc20:	1805883a 	mov	r2,r3
    bc24:	10c00104 	addi	r3,r2,4
    bc28:	1885803a 	cmpltu	r2,r3,r2
    bc2c:	88a3883a 	add	r17,r17,r2
    bc30:	8880202c 	andhi	r2,r17,128
    bc34:	10002926 	beq	r2,zero,bcdc <__divdf3+0x968>
    bc38:	9900004c 	andi	r4,r19,1
    bc3c:	00800044 	movi	r2,1
    bc40:	0021883a 	mov	r16,zero
    bc44:	002b883a 	mov	r21,zero
    bc48:	003e2906 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    bc4c:	d9800017 	ldw	r6,0(sp)
    bc50:	8c7fff84 	addi	r17,r17,-2
    bc54:	a9ab883a 	add	r21,r21,r6
    bc58:	a98b803a 	cmpltu	r5,r21,r6
    bc5c:	2d8b883a 	add	r5,r5,r22
    bc60:	2a11883a 	add	r8,r5,r8
    bc64:	003ef806 	br	b848 <__alt_exception_stack_pointer+0xf800b848>
    bc68:	d9800017 	ldw	r6,0(sp)
    bc6c:	318f883a 	add	r7,r6,r6
    bc70:	398b803a 	cmpltu	r5,r7,r6
    bc74:	2d8d883a 	add	r6,r5,r22
    bc78:	81a1883a 	add	r16,r16,r6
    bc7c:	a17fff84 	addi	r5,r20,-2
    bc80:	d9c00015 	stw	r7,0(sp)
    bc84:	003f8806 	br	baa8 <__alt_exception_stack_pointer+0xf800baa8>
    bc88:	013ff844 	movi	r4,-31
    bc8c:	2085c83a 	sub	r2,r4,r2
    bc90:	8888d83a 	srl	r4,r17,r2
    bc94:	00800804 	movi	r2,32
    bc98:	18802126 	beq	r3,r2,bd20 <__divdf3+0x9ac>
    bc9c:	04001004 	movi	r16,64
    bca0:	80c7c83a 	sub	r3,r16,r3
    bca4:	88e0983a 	sll	r16,r17,r3
    bca8:	8504b03a 	or	r2,r16,r20
    bcac:	1004c03a 	cmpne	r2,r2,zero
    bcb0:	2084b03a 	or	r2,r4,r2
    bcb4:	144001cc 	andi	r17,r2,7
    bcb8:	88000d1e 	bne	r17,zero,bcf0 <__divdf3+0x97c>
    bcbc:	0021883a 	mov	r16,zero
    bcc0:	102ad0fa 	srli	r21,r2,3
    bcc4:	9900004c 	andi	r4,r19,1
    bcc8:	0005883a 	mov	r2,zero
    bccc:	ac6ab03a 	or	r21,r21,r17
    bcd0:	003e0706 	br	b4f0 <__alt_exception_stack_pointer+0xf800b4f0>
    bcd4:	1007883a 	mov	r3,r2
    bcd8:	0023883a 	mov	r17,zero
    bcdc:	8820927a 	slli	r16,r17,9
    bce0:	1805883a 	mov	r2,r3
    bce4:	8822977a 	slli	r17,r17,29
    bce8:	8020d33a 	srli	r16,r16,12
    bcec:	003ff406 	br	bcc0 <__alt_exception_stack_pointer+0xf800bcc0>
    bcf0:	10c003cc 	andi	r3,r2,15
    bcf4:	01000104 	movi	r4,4
    bcf8:	193ff626 	beq	r3,r4,bcd4 <__alt_exception_stack_pointer+0xf800bcd4>
    bcfc:	0023883a 	mov	r17,zero
    bd00:	003fc806 	br	bc24 <__alt_exception_stack_pointer+0xf800bc24>
    bd04:	a8bfd136 	bltu	r21,r2,bc4c <__alt_exception_stack_pointer+0xf800bc4c>
    bd08:	2823883a 	mov	r17,r5
    bd0c:	003fa606 	br	bba8 <__alt_exception_stack_pointer+0xf800bba8>
    bd10:	d9800017 	ldw	r6,0(sp)
    bd14:	30bfd436 	bltu	r6,r2,bc68 <__alt_exception_stack_pointer+0xf800bc68>
    bd18:	2829883a 	mov	r20,r5
    bd1c:	003f6406 	br	bab0 <__alt_exception_stack_pointer+0xf800bab0>
    bd20:	0021883a 	mov	r16,zero
    bd24:	003fe006 	br	bca8 <__alt_exception_stack_pointer+0xf800bca8>
    bd28:	00800434 	movhi	r2,16
    bd2c:	8c000234 	orhi	r16,r17,8
    bd30:	10bfffc4 	addi	r2,r2,-1
    bd34:	e009883a 	mov	r4,fp
    bd38:	80a0703a 	and	r16,r16,r2
    bd3c:	a02b883a 	mov	r21,r20
    bd40:	003e4e06 	br	b67c <__alt_exception_stack_pointer+0xf800b67c>

0000bd44 <__eqdf2>:
    bd44:	2804d53a 	srli	r2,r5,20
    bd48:	3806d53a 	srli	r3,r7,20
    bd4c:	02000434 	movhi	r8,16
    bd50:	423fffc4 	addi	r8,r8,-1
    bd54:	1081ffcc 	andi	r2,r2,2047
    bd58:	0281ffc4 	movi	r10,2047
    bd5c:	2a12703a 	and	r9,r5,r8
    bd60:	18c1ffcc 	andi	r3,r3,2047
    bd64:	3a10703a 	and	r8,r7,r8
    bd68:	280ad7fa 	srli	r5,r5,31
    bd6c:	380ed7fa 	srli	r7,r7,31
    bd70:	12801026 	beq	r2,r10,bdb4 <__eqdf2+0x70>
    bd74:	0281ffc4 	movi	r10,2047
    bd78:	1a800a26 	beq	r3,r10,bda4 <__eqdf2+0x60>
    bd7c:	10c00226 	beq	r2,r3,bd88 <__eqdf2+0x44>
    bd80:	00800044 	movi	r2,1
    bd84:	f800283a 	ret
    bd88:	4a3ffd1e 	bne	r9,r8,bd80 <__alt_exception_stack_pointer+0xf800bd80>
    bd8c:	21bffc1e 	bne	r4,r6,bd80 <__alt_exception_stack_pointer+0xf800bd80>
    bd90:	29c00c26 	beq	r5,r7,bdc4 <__eqdf2+0x80>
    bd94:	103ffa1e 	bne	r2,zero,bd80 <__alt_exception_stack_pointer+0xf800bd80>
    bd98:	2244b03a 	or	r2,r4,r9
    bd9c:	1004c03a 	cmpne	r2,r2,zero
    bda0:	f800283a 	ret
    bda4:	3214b03a 	or	r10,r6,r8
    bda8:	503ff426 	beq	r10,zero,bd7c <__alt_exception_stack_pointer+0xf800bd7c>
    bdac:	00800044 	movi	r2,1
    bdb0:	f800283a 	ret
    bdb4:	2254b03a 	or	r10,r4,r9
    bdb8:	503fee26 	beq	r10,zero,bd74 <__alt_exception_stack_pointer+0xf800bd74>
    bdbc:	00800044 	movi	r2,1
    bdc0:	f800283a 	ret
    bdc4:	0005883a 	mov	r2,zero
    bdc8:	f800283a 	ret

0000bdcc <__gedf2>:
    bdcc:	2804d53a 	srli	r2,r5,20
    bdd0:	3806d53a 	srli	r3,r7,20
    bdd4:	02000434 	movhi	r8,16
    bdd8:	423fffc4 	addi	r8,r8,-1
    bddc:	1081ffcc 	andi	r2,r2,2047
    bde0:	0241ffc4 	movi	r9,2047
    bde4:	2a14703a 	and	r10,r5,r8
    bde8:	18c1ffcc 	andi	r3,r3,2047
    bdec:	3a10703a 	and	r8,r7,r8
    bdf0:	280ad7fa 	srli	r5,r5,31
    bdf4:	380ed7fa 	srli	r7,r7,31
    bdf8:	12401d26 	beq	r2,r9,be70 <__gedf2+0xa4>
    bdfc:	0241ffc4 	movi	r9,2047
    be00:	1a401226 	beq	r3,r9,be4c <__gedf2+0x80>
    be04:	1000081e 	bne	r2,zero,be28 <__gedf2+0x5c>
    be08:	2296b03a 	or	r11,r4,r10
    be0c:	5813003a 	cmpeq	r9,r11,zero
    be10:	1800091e 	bne	r3,zero,be38 <__gedf2+0x6c>
    be14:	3218b03a 	or	r12,r6,r8
    be18:	6000071e 	bne	r12,zero,be38 <__gedf2+0x6c>
    be1c:	0005883a 	mov	r2,zero
    be20:	5800101e 	bne	r11,zero,be64 <__gedf2+0x98>
    be24:	f800283a 	ret
    be28:	18000c1e 	bne	r3,zero,be5c <__gedf2+0x90>
    be2c:	3212b03a 	or	r9,r6,r8
    be30:	48000c26 	beq	r9,zero,be64 <__gedf2+0x98>
    be34:	0013883a 	mov	r9,zero
    be38:	39c03fcc 	andi	r7,r7,255
    be3c:	48000826 	beq	r9,zero,be60 <__gedf2+0x94>
    be40:	38000926 	beq	r7,zero,be68 <__gedf2+0x9c>
    be44:	00800044 	movi	r2,1
    be48:	f800283a 	ret
    be4c:	3212b03a 	or	r9,r6,r8
    be50:	483fec26 	beq	r9,zero,be04 <__alt_exception_stack_pointer+0xf800be04>
    be54:	00bfff84 	movi	r2,-2
    be58:	f800283a 	ret
    be5c:	39c03fcc 	andi	r7,r7,255
    be60:	29c00626 	beq	r5,r7,be7c <__gedf2+0xb0>
    be64:	283ff726 	beq	r5,zero,be44 <__alt_exception_stack_pointer+0xf800be44>
    be68:	00bfffc4 	movi	r2,-1
    be6c:	f800283a 	ret
    be70:	2292b03a 	or	r9,r4,r10
    be74:	483fe126 	beq	r9,zero,bdfc <__alt_exception_stack_pointer+0xf800bdfc>
    be78:	003ff606 	br	be54 <__alt_exception_stack_pointer+0xf800be54>
    be7c:	18bff916 	blt	r3,r2,be64 <__alt_exception_stack_pointer+0xf800be64>
    be80:	10c00316 	blt	r2,r3,be90 <__gedf2+0xc4>
    be84:	42bff736 	bltu	r8,r10,be64 <__alt_exception_stack_pointer+0xf800be64>
    be88:	52000326 	beq	r10,r8,be98 <__gedf2+0xcc>
    be8c:	5200042e 	bgeu	r10,r8,bea0 <__gedf2+0xd4>
    be90:	283fec1e 	bne	r5,zero,be44 <__alt_exception_stack_pointer+0xf800be44>
    be94:	003ff406 	br	be68 <__alt_exception_stack_pointer+0xf800be68>
    be98:	313ff236 	bltu	r6,r4,be64 <__alt_exception_stack_pointer+0xf800be64>
    be9c:	21bffc36 	bltu	r4,r6,be90 <__alt_exception_stack_pointer+0xf800be90>
    bea0:	0005883a 	mov	r2,zero
    bea4:	f800283a 	ret

0000bea8 <__ledf2>:
    bea8:	2804d53a 	srli	r2,r5,20
    beac:	3810d53a 	srli	r8,r7,20
    beb0:	00c00434 	movhi	r3,16
    beb4:	18ffffc4 	addi	r3,r3,-1
    beb8:	1081ffcc 	andi	r2,r2,2047
    bebc:	0241ffc4 	movi	r9,2047
    bec0:	28d4703a 	and	r10,r5,r3
    bec4:	4201ffcc 	andi	r8,r8,2047
    bec8:	38c6703a 	and	r3,r7,r3
    becc:	280ad7fa 	srli	r5,r5,31
    bed0:	380ed7fa 	srli	r7,r7,31
    bed4:	12401f26 	beq	r2,r9,bf54 <__ledf2+0xac>
    bed8:	0241ffc4 	movi	r9,2047
    bedc:	42401426 	beq	r8,r9,bf30 <__ledf2+0x88>
    bee0:	1000091e 	bne	r2,zero,bf08 <__ledf2+0x60>
    bee4:	2296b03a 	or	r11,r4,r10
    bee8:	5813003a 	cmpeq	r9,r11,zero
    beec:	29403fcc 	andi	r5,r5,255
    bef0:	40000a1e 	bne	r8,zero,bf1c <__ledf2+0x74>
    bef4:	30d8b03a 	or	r12,r6,r3
    bef8:	6000081e 	bne	r12,zero,bf1c <__ledf2+0x74>
    befc:	0005883a 	mov	r2,zero
    bf00:	5800111e 	bne	r11,zero,bf48 <__ledf2+0xa0>
    bf04:	f800283a 	ret
    bf08:	29403fcc 	andi	r5,r5,255
    bf0c:	40000c1e 	bne	r8,zero,bf40 <__ledf2+0x98>
    bf10:	30d2b03a 	or	r9,r6,r3
    bf14:	48000c26 	beq	r9,zero,bf48 <__ledf2+0xa0>
    bf18:	0013883a 	mov	r9,zero
    bf1c:	39c03fcc 	andi	r7,r7,255
    bf20:	48000826 	beq	r9,zero,bf44 <__ledf2+0x9c>
    bf24:	38001126 	beq	r7,zero,bf6c <__ledf2+0xc4>
    bf28:	00800044 	movi	r2,1
    bf2c:	f800283a 	ret
    bf30:	30d2b03a 	or	r9,r6,r3
    bf34:	483fea26 	beq	r9,zero,bee0 <__alt_exception_stack_pointer+0xf800bee0>
    bf38:	00800084 	movi	r2,2
    bf3c:	f800283a 	ret
    bf40:	39c03fcc 	andi	r7,r7,255
    bf44:	39400726 	beq	r7,r5,bf64 <__ledf2+0xbc>
    bf48:	2800081e 	bne	r5,zero,bf6c <__ledf2+0xc4>
    bf4c:	00800044 	movi	r2,1
    bf50:	f800283a 	ret
    bf54:	2292b03a 	or	r9,r4,r10
    bf58:	483fdf26 	beq	r9,zero,bed8 <__alt_exception_stack_pointer+0xf800bed8>
    bf5c:	00800084 	movi	r2,2
    bf60:	f800283a 	ret
    bf64:	4080030e 	bge	r8,r2,bf74 <__ledf2+0xcc>
    bf68:	383fef26 	beq	r7,zero,bf28 <__alt_exception_stack_pointer+0xf800bf28>
    bf6c:	00bfffc4 	movi	r2,-1
    bf70:	f800283a 	ret
    bf74:	123feb16 	blt	r2,r8,bf24 <__alt_exception_stack_pointer+0xf800bf24>
    bf78:	1abff336 	bltu	r3,r10,bf48 <__alt_exception_stack_pointer+0xf800bf48>
    bf7c:	50c00326 	beq	r10,r3,bf8c <__ledf2+0xe4>
    bf80:	50c0042e 	bgeu	r10,r3,bf94 <__ledf2+0xec>
    bf84:	283fe81e 	bne	r5,zero,bf28 <__alt_exception_stack_pointer+0xf800bf28>
    bf88:	003ff806 	br	bf6c <__alt_exception_stack_pointer+0xf800bf6c>
    bf8c:	313fee36 	bltu	r6,r4,bf48 <__alt_exception_stack_pointer+0xf800bf48>
    bf90:	21bffc36 	bltu	r4,r6,bf84 <__alt_exception_stack_pointer+0xf800bf84>
    bf94:	0005883a 	mov	r2,zero
    bf98:	f800283a 	ret

0000bf9c <__muldf3>:
    bf9c:	deffee04 	addi	sp,sp,-72
    bfa0:	dd000c15 	stw	r20,48(sp)
    bfa4:	2828d53a 	srli	r20,r5,20
    bfa8:	ddc00f15 	stw	r23,60(sp)
    bfac:	282ed7fa 	srli	r23,r5,31
    bfb0:	dc000815 	stw	r16,32(sp)
    bfb4:	04000434 	movhi	r16,16
    bfb8:	dcc00b15 	stw	r19,44(sp)
    bfbc:	843fffc4 	addi	r16,r16,-1
    bfc0:	dfc01115 	stw	ra,68(sp)
    bfc4:	df001015 	stw	fp,64(sp)
    bfc8:	dd800e15 	stw	r22,56(sp)
    bfcc:	dd400d15 	stw	r21,52(sp)
    bfd0:	dc800a15 	stw	r18,40(sp)
    bfd4:	dc400915 	stw	r17,36(sp)
    bfd8:	a501ffcc 	andi	r20,r20,2047
    bfdc:	2c20703a 	and	r16,r5,r16
    bfe0:	b827883a 	mov	r19,r23
    bfe4:	ba403fcc 	andi	r9,r23,255
    bfe8:	a0006026 	beq	r20,zero,c16c <__muldf3+0x1d0>
    bfec:	0081ffc4 	movi	r2,2047
    bff0:	202d883a 	mov	r22,r4
    bff4:	a0803626 	beq	r20,r2,c0d0 <__muldf3+0x134>
    bff8:	84000434 	orhi	r16,r16,16
    bffc:	200ad77a 	srli	r5,r4,29
    c000:	800490fa 	slli	r2,r16,3
    c004:	202c90fa 	slli	r22,r4,3
    c008:	a53f0044 	addi	r20,r20,-1023
    c00c:	28a0b03a 	or	r16,r5,r2
    c010:	002b883a 	mov	r21,zero
    c014:	000b883a 	mov	r5,zero
    c018:	3804d53a 	srli	r2,r7,20
    c01c:	3838d7fa 	srli	fp,r7,31
    c020:	04400434 	movhi	r17,16
    c024:	8c7fffc4 	addi	r17,r17,-1
    c028:	1081ffcc 	andi	r2,r2,2047
    c02c:	3025883a 	mov	r18,r6
    c030:	3c62703a 	and	r17,r7,r17
    c034:	e2803fcc 	andi	r10,fp,255
    c038:	10006d26 	beq	r2,zero,c1f0 <__muldf3+0x254>
    c03c:	00c1ffc4 	movi	r3,2047
    c040:	10c06526 	beq	r2,r3,c1d8 <__muldf3+0x23c>
    c044:	8c400434 	orhi	r17,r17,16
    c048:	300ed77a 	srli	r7,r6,29
    c04c:	880690fa 	slli	r3,r17,3
    c050:	302490fa 	slli	r18,r6,3
    c054:	10bf0044 	addi	r2,r2,-1023
    c058:	38e2b03a 	or	r17,r7,r3
    c05c:	000f883a 	mov	r7,zero
    c060:	a087883a 	add	r3,r20,r2
    c064:	010003c4 	movi	r4,15
    c068:	3d44b03a 	or	r2,r7,r21
    c06c:	e5ccf03a 	xor	r6,fp,r23
    c070:	1a000044 	addi	r8,r3,1
    c074:	20809b36 	bltu	r4,r2,c2e4 <__muldf3+0x348>
    c078:	100490ba 	slli	r2,r2,2
    c07c:	01000074 	movhi	r4,1
    c080:	21302404 	addi	r4,r4,-16240
    c084:	1105883a 	add	r2,r2,r4
    c088:	10800017 	ldw	r2,0(r2)
    c08c:	1000683a 	jmp	r2
    c090:	0000c2e4 	muli	zero,zero,779
    c094:	0000c0f0 	cmpltui	zero,zero,771
    c098:	0000c0f0 	cmpltui	zero,zero,771
    c09c:	0000c0ec 	andhi	zero,zero,771
    c0a0:	0000c2c0 	call	c2c <_malloc_r+0x72c>
    c0a4:	0000c2c0 	call	c2c <_malloc_r+0x72c>
    c0a8:	0000c2a8 	cmpgeui	zero,zero,778
    c0ac:	0000c0ec 	andhi	zero,zero,771
    c0b0:	0000c2c0 	call	c2c <_malloc_r+0x72c>
    c0b4:	0000c2a8 	cmpgeui	zero,zero,778
    c0b8:	0000c2c0 	call	c2c <_malloc_r+0x72c>
    c0bc:	0000c0ec 	andhi	zero,zero,771
    c0c0:	0000c2d0 	cmplti	zero,zero,779
    c0c4:	0000c2d0 	cmplti	zero,zero,779
    c0c8:	0000c2d0 	cmplti	zero,zero,779
    c0cc:	0000c630 	cmpltui	zero,zero,792
    c0d0:	2404b03a 	or	r2,r4,r16
    c0d4:	1000711e 	bne	r2,zero,c29c <__muldf3+0x300>
    c0d8:	05400204 	movi	r21,8
    c0dc:	0021883a 	mov	r16,zero
    c0e0:	002d883a 	mov	r22,zero
    c0e4:	01400084 	movi	r5,2
    c0e8:	003fcb06 	br	c018 <__alt_exception_stack_pointer+0xf800c018>
    c0ec:	500d883a 	mov	r6,r10
    c0f0:	00800084 	movi	r2,2
    c0f4:	38805926 	beq	r7,r2,c25c <__muldf3+0x2c0>
    c0f8:	008000c4 	movi	r2,3
    c0fc:	3881bb26 	beq	r7,r2,c7ec <__muldf3+0x850>
    c100:	00800044 	movi	r2,1
    c104:	3881961e 	bne	r7,r2,c760 <__muldf3+0x7c4>
    c108:	3027883a 	mov	r19,r6
    c10c:	0005883a 	mov	r2,zero
    c110:	0021883a 	mov	r16,zero
    c114:	002d883a 	mov	r22,zero
    c118:	1004953a 	slli	r2,r2,20
    c11c:	98c03fcc 	andi	r3,r19,255
    c120:	04400434 	movhi	r17,16
    c124:	8c7fffc4 	addi	r17,r17,-1
    c128:	180697fa 	slli	r3,r3,31
    c12c:	8460703a 	and	r16,r16,r17
    c130:	80a0b03a 	or	r16,r16,r2
    c134:	80c6b03a 	or	r3,r16,r3
    c138:	b005883a 	mov	r2,r22
    c13c:	dfc01117 	ldw	ra,68(sp)
    c140:	df001017 	ldw	fp,64(sp)
    c144:	ddc00f17 	ldw	r23,60(sp)
    c148:	dd800e17 	ldw	r22,56(sp)
    c14c:	dd400d17 	ldw	r21,52(sp)
    c150:	dd000c17 	ldw	r20,48(sp)
    c154:	dcc00b17 	ldw	r19,44(sp)
    c158:	dc800a17 	ldw	r18,40(sp)
    c15c:	dc400917 	ldw	r17,36(sp)
    c160:	dc000817 	ldw	r16,32(sp)
    c164:	dec01204 	addi	sp,sp,72
    c168:	f800283a 	ret
    c16c:	2404b03a 	or	r2,r4,r16
    c170:	202b883a 	mov	r21,r4
    c174:	10004426 	beq	r2,zero,c288 <__muldf3+0x2ec>
    c178:	80015126 	beq	r16,zero,c6c0 <__muldf3+0x724>
    c17c:	8009883a 	mov	r4,r16
    c180:	d9800715 	stw	r6,28(sp)
    c184:	d9c00215 	stw	r7,8(sp)
    c188:	da400415 	stw	r9,16(sp)
    c18c:	000d3080 	call	d308 <__clzsi2>
    c190:	d9800717 	ldw	r6,28(sp)
    c194:	d9c00217 	ldw	r7,8(sp)
    c198:	da400417 	ldw	r9,16(sp)
    c19c:	113ffd44 	addi	r4,r2,-11
    c1a0:	00c00704 	movi	r3,28
    c1a4:	19014216 	blt	r3,r4,c6b0 <__muldf3+0x714>
    c1a8:	00c00744 	movi	r3,29
    c1ac:	15bffe04 	addi	r22,r2,-8
    c1b0:	1907c83a 	sub	r3,r3,r4
    c1b4:	85a0983a 	sll	r16,r16,r22
    c1b8:	a8c6d83a 	srl	r3,r21,r3
    c1bc:	adac983a 	sll	r22,r21,r22
    c1c0:	1c20b03a 	or	r16,r3,r16
    c1c4:	1080fcc4 	addi	r2,r2,1011
    c1c8:	00a9c83a 	sub	r20,zero,r2
    c1cc:	002b883a 	mov	r21,zero
    c1d0:	000b883a 	mov	r5,zero
    c1d4:	003f9006 	br	c018 <__alt_exception_stack_pointer+0xf800c018>
    c1d8:	3446b03a 	or	r3,r6,r17
    c1dc:	1800281e 	bne	r3,zero,c280 <__muldf3+0x2e4>
    c1e0:	0023883a 	mov	r17,zero
    c1e4:	0025883a 	mov	r18,zero
    c1e8:	01c00084 	movi	r7,2
    c1ec:	003f9c06 	br	c060 <__alt_exception_stack_pointer+0xf800c060>
    c1f0:	3446b03a 	or	r3,r6,r17
    c1f4:	18001e26 	beq	r3,zero,c270 <__muldf3+0x2d4>
    c1f8:	88012126 	beq	r17,zero,c680 <__muldf3+0x6e4>
    c1fc:	8809883a 	mov	r4,r17
    c200:	d9400215 	stw	r5,8(sp)
    c204:	d9800715 	stw	r6,28(sp)
    c208:	da400415 	stw	r9,16(sp)
    c20c:	da800315 	stw	r10,12(sp)
    c210:	000d3080 	call	d308 <__clzsi2>
    c214:	d9400217 	ldw	r5,8(sp)
    c218:	d9800717 	ldw	r6,28(sp)
    c21c:	da400417 	ldw	r9,16(sp)
    c220:	da800317 	ldw	r10,12(sp)
    c224:	113ffd44 	addi	r4,r2,-11
    c228:	00c00704 	movi	r3,28
    c22c:	19011016 	blt	r3,r4,c670 <__muldf3+0x6d4>
    c230:	00c00744 	movi	r3,29
    c234:	14bffe04 	addi	r18,r2,-8
    c238:	1907c83a 	sub	r3,r3,r4
    c23c:	8ca2983a 	sll	r17,r17,r18
    c240:	30c6d83a 	srl	r3,r6,r3
    c244:	34a4983a 	sll	r18,r6,r18
    c248:	1c62b03a 	or	r17,r3,r17
    c24c:	1080fcc4 	addi	r2,r2,1011
    c250:	0085c83a 	sub	r2,zero,r2
    c254:	000f883a 	mov	r7,zero
    c258:	003f8106 	br	c060 <__alt_exception_stack_pointer+0xf800c060>
    c25c:	3027883a 	mov	r19,r6
    c260:	0081ffc4 	movi	r2,2047
    c264:	0021883a 	mov	r16,zero
    c268:	002d883a 	mov	r22,zero
    c26c:	003faa06 	br	c118 <__alt_exception_stack_pointer+0xf800c118>
    c270:	0023883a 	mov	r17,zero
    c274:	0025883a 	mov	r18,zero
    c278:	01c00044 	movi	r7,1
    c27c:	003f7806 	br	c060 <__alt_exception_stack_pointer+0xf800c060>
    c280:	01c000c4 	movi	r7,3
    c284:	003f7606 	br	c060 <__alt_exception_stack_pointer+0xf800c060>
    c288:	05400104 	movi	r21,4
    c28c:	0021883a 	mov	r16,zero
    c290:	002d883a 	mov	r22,zero
    c294:	01400044 	movi	r5,1
    c298:	003f5f06 	br	c018 <__alt_exception_stack_pointer+0xf800c018>
    c29c:	05400304 	movi	r21,12
    c2a0:	014000c4 	movi	r5,3
    c2a4:	003f5c06 	br	c018 <__alt_exception_stack_pointer+0xf800c018>
    c2a8:	04000434 	movhi	r16,16
    c2ac:	0027883a 	mov	r19,zero
    c2b0:	843fffc4 	addi	r16,r16,-1
    c2b4:	05bfffc4 	movi	r22,-1
    c2b8:	0081ffc4 	movi	r2,2047
    c2bc:	003f9606 	br	c118 <__alt_exception_stack_pointer+0xf800c118>
    c2c0:	8023883a 	mov	r17,r16
    c2c4:	b025883a 	mov	r18,r22
    c2c8:	280f883a 	mov	r7,r5
    c2cc:	003f8806 	br	c0f0 <__alt_exception_stack_pointer+0xf800c0f0>
    c2d0:	8023883a 	mov	r17,r16
    c2d4:	b025883a 	mov	r18,r22
    c2d8:	480d883a 	mov	r6,r9
    c2dc:	280f883a 	mov	r7,r5
    c2e0:	003f8306 	br	c0f0 <__alt_exception_stack_pointer+0xf800c0f0>
    c2e4:	b026d43a 	srli	r19,r22,16
    c2e8:	902ed43a 	srli	r23,r18,16
    c2ec:	b5bfffcc 	andi	r22,r22,65535
    c2f0:	94bfffcc 	andi	r18,r18,65535
    c2f4:	b00b883a 	mov	r5,r22
    c2f8:	9009883a 	mov	r4,r18
    c2fc:	d8c00515 	stw	r3,20(sp)
    c300:	d9800715 	stw	r6,28(sp)
    c304:	da000615 	stw	r8,24(sp)
    c308:	000aaa00 	call	aaa0 <__mulsi3>
    c30c:	980b883a 	mov	r5,r19
    c310:	9009883a 	mov	r4,r18
    c314:	1029883a 	mov	r20,r2
    c318:	000aaa00 	call	aaa0 <__mulsi3>
    c31c:	b80b883a 	mov	r5,r23
    c320:	9809883a 	mov	r4,r19
    c324:	102b883a 	mov	r21,r2
    c328:	000aaa00 	call	aaa0 <__mulsi3>
    c32c:	b809883a 	mov	r4,r23
    c330:	b00b883a 	mov	r5,r22
    c334:	1039883a 	mov	fp,r2
    c338:	000aaa00 	call	aaa0 <__mulsi3>
    c33c:	a008d43a 	srli	r4,r20,16
    c340:	1545883a 	add	r2,r2,r21
    c344:	d8c00517 	ldw	r3,20(sp)
    c348:	2085883a 	add	r2,r4,r2
    c34c:	d9800717 	ldw	r6,28(sp)
    c350:	da000617 	ldw	r8,24(sp)
    c354:	1540022e 	bgeu	r2,r21,c360 <__muldf3+0x3c4>
    c358:	01000074 	movhi	r4,1
    c35c:	e139883a 	add	fp,fp,r4
    c360:	100e943a 	slli	r7,r2,16
    c364:	1004d43a 	srli	r2,r2,16
    c368:	882ad43a 	srli	r21,r17,16
    c36c:	a53fffcc 	andi	r20,r20,65535
    c370:	8c7fffcc 	andi	r17,r17,65535
    c374:	3d29883a 	add	r20,r7,r20
    c378:	b00b883a 	mov	r5,r22
    c37c:	8809883a 	mov	r4,r17
    c380:	d8c00515 	stw	r3,20(sp)
    c384:	d9800715 	stw	r6,28(sp)
    c388:	da000615 	stw	r8,24(sp)
    c38c:	dd000115 	stw	r20,4(sp)
    c390:	d8800015 	stw	r2,0(sp)
    c394:	000aaa00 	call	aaa0 <__mulsi3>
    c398:	980b883a 	mov	r5,r19
    c39c:	8809883a 	mov	r4,r17
    c3a0:	d8800215 	stw	r2,8(sp)
    c3a4:	000aaa00 	call	aaa0 <__mulsi3>
    c3a8:	9809883a 	mov	r4,r19
    c3ac:	a80b883a 	mov	r5,r21
    c3b0:	1029883a 	mov	r20,r2
    c3b4:	000aaa00 	call	aaa0 <__mulsi3>
    c3b8:	b00b883a 	mov	r5,r22
    c3bc:	a809883a 	mov	r4,r21
    c3c0:	d8800415 	stw	r2,16(sp)
    c3c4:	000aaa00 	call	aaa0 <__mulsi3>
    c3c8:	d9c00217 	ldw	r7,8(sp)
    c3cc:	1505883a 	add	r2,r2,r20
    c3d0:	d8c00517 	ldw	r3,20(sp)
    c3d4:	3826d43a 	srli	r19,r7,16
    c3d8:	d9800717 	ldw	r6,28(sp)
    c3dc:	da000617 	ldw	r8,24(sp)
    c3e0:	9885883a 	add	r2,r19,r2
    c3e4:	da400417 	ldw	r9,16(sp)
    c3e8:	1500022e 	bgeu	r2,r20,c3f4 <__muldf3+0x458>
    c3ec:	01000074 	movhi	r4,1
    c3f0:	4913883a 	add	r9,r9,r4
    c3f4:	1028d43a 	srli	r20,r2,16
    c3f8:	1004943a 	slli	r2,r2,16
    c3fc:	802cd43a 	srli	r22,r16,16
    c400:	843fffcc 	andi	r16,r16,65535
    c404:	3cffffcc 	andi	r19,r7,65535
    c408:	9009883a 	mov	r4,r18
    c40c:	800b883a 	mov	r5,r16
    c410:	a269883a 	add	r20,r20,r9
    c414:	d8c00515 	stw	r3,20(sp)
    c418:	d9800715 	stw	r6,28(sp)
    c41c:	da000615 	stw	r8,24(sp)
    c420:	14e7883a 	add	r19,r2,r19
    c424:	000aaa00 	call	aaa0 <__mulsi3>
    c428:	9009883a 	mov	r4,r18
    c42c:	b00b883a 	mov	r5,r22
    c430:	d8800315 	stw	r2,12(sp)
    c434:	000aaa00 	call	aaa0 <__mulsi3>
    c438:	b809883a 	mov	r4,r23
    c43c:	b00b883a 	mov	r5,r22
    c440:	d8800215 	stw	r2,8(sp)
    c444:	000aaa00 	call	aaa0 <__mulsi3>
    c448:	b80b883a 	mov	r5,r23
    c44c:	8009883a 	mov	r4,r16
    c450:	d8800415 	stw	r2,16(sp)
    c454:	000aaa00 	call	aaa0 <__mulsi3>
    c458:	da800317 	ldw	r10,12(sp)
    c45c:	d9c00217 	ldw	r7,8(sp)
    c460:	d9000017 	ldw	r4,0(sp)
    c464:	502ed43a 	srli	r23,r10,16
    c468:	11c5883a 	add	r2,r2,r7
    c46c:	24e5883a 	add	r18,r4,r19
    c470:	b885883a 	add	r2,r23,r2
    c474:	d8c00517 	ldw	r3,20(sp)
    c478:	d9800717 	ldw	r6,28(sp)
    c47c:	da000617 	ldw	r8,24(sp)
    c480:	da400417 	ldw	r9,16(sp)
    c484:	11c0022e 	bgeu	r2,r7,c490 <__muldf3+0x4f4>
    c488:	01000074 	movhi	r4,1
    c48c:	4913883a 	add	r9,r9,r4
    c490:	100ed43a 	srli	r7,r2,16
    c494:	1004943a 	slli	r2,r2,16
    c498:	55ffffcc 	andi	r23,r10,65535
    c49c:	3a53883a 	add	r9,r7,r9
    c4a0:	8809883a 	mov	r4,r17
    c4a4:	800b883a 	mov	r5,r16
    c4a8:	d8c00515 	stw	r3,20(sp)
    c4ac:	d9800715 	stw	r6,28(sp)
    c4b0:	da000615 	stw	r8,24(sp)
    c4b4:	da400415 	stw	r9,16(sp)
    c4b8:	15ef883a 	add	r23,r2,r23
    c4bc:	000aaa00 	call	aaa0 <__mulsi3>
    c4c0:	8809883a 	mov	r4,r17
    c4c4:	b00b883a 	mov	r5,r22
    c4c8:	d8800215 	stw	r2,8(sp)
    c4cc:	000aaa00 	call	aaa0 <__mulsi3>
    c4d0:	b00b883a 	mov	r5,r22
    c4d4:	a809883a 	mov	r4,r21
    c4d8:	d8800315 	stw	r2,12(sp)
    c4dc:	000aaa00 	call	aaa0 <__mulsi3>
    c4e0:	8009883a 	mov	r4,r16
    c4e4:	a80b883a 	mov	r5,r21
    c4e8:	1023883a 	mov	r17,r2
    c4ec:	000aaa00 	call	aaa0 <__mulsi3>
    c4f0:	d9c00217 	ldw	r7,8(sp)
    c4f4:	da800317 	ldw	r10,12(sp)
    c4f8:	d8c00517 	ldw	r3,20(sp)
    c4fc:	3808d43a 	srli	r4,r7,16
    c500:	1285883a 	add	r2,r2,r10
    c504:	d9800717 	ldw	r6,28(sp)
    c508:	2085883a 	add	r2,r4,r2
    c50c:	da000617 	ldw	r8,24(sp)
    c510:	da400417 	ldw	r9,16(sp)
    c514:	1280022e 	bgeu	r2,r10,c520 <__muldf3+0x584>
    c518:	01000074 	movhi	r4,1
    c51c:	8923883a 	add	r17,r17,r4
    c520:	1008943a 	slli	r4,r2,16
    c524:	39ffffcc 	andi	r7,r7,65535
    c528:	e4b9883a 	add	fp,fp,r18
    c52c:	21cf883a 	add	r7,r4,r7
    c530:	e4e7803a 	cmpltu	r19,fp,r19
    c534:	3d0f883a 	add	r7,r7,r20
    c538:	bf39883a 	add	fp,r23,fp
    c53c:	99c9883a 	add	r4,r19,r7
    c540:	e5ef803a 	cmpltu	r23,fp,r23
    c544:	490b883a 	add	r5,r9,r4
    c548:	1004d43a 	srli	r2,r2,16
    c54c:	b965883a 	add	r18,r23,r5
    c550:	24c9803a 	cmpltu	r4,r4,r19
    c554:	3d29803a 	cmpltu	r20,r7,r20
    c558:	a128b03a 	or	r20,r20,r4
    c55c:	95ef803a 	cmpltu	r23,r18,r23
    c560:	2a53803a 	cmpltu	r9,r5,r9
    c564:	a0a9883a 	add	r20,r20,r2
    c568:	4deeb03a 	or	r23,r9,r23
    c56c:	a5ef883a 	add	r23,r20,r23
    c570:	bc63883a 	add	r17,r23,r17
    c574:	e004927a 	slli	r2,fp,9
    c578:	d9000117 	ldw	r4,4(sp)
    c57c:	882e927a 	slli	r23,r17,9
    c580:	9022d5fa 	srli	r17,r18,23
    c584:	e038d5fa 	srli	fp,fp,23
    c588:	1104b03a 	or	r2,r2,r4
    c58c:	9024927a 	slli	r18,r18,9
    c590:	1004c03a 	cmpne	r2,r2,zero
    c594:	bc62b03a 	or	r17,r23,r17
    c598:	1738b03a 	or	fp,r2,fp
    c59c:	8880402c 	andhi	r2,r17,256
    c5a0:	e4a4b03a 	or	r18,fp,r18
    c5a4:	10000726 	beq	r2,zero,c5c4 <__muldf3+0x628>
    c5a8:	9006d07a 	srli	r3,r18,1
    c5ac:	880497fa 	slli	r2,r17,31
    c5b0:	9480004c 	andi	r18,r18,1
    c5b4:	8822d07a 	srli	r17,r17,1
    c5b8:	1ca4b03a 	or	r18,r3,r18
    c5bc:	14a4b03a 	or	r18,r2,r18
    c5c0:	4007883a 	mov	r3,r8
    c5c4:	1880ffc4 	addi	r2,r3,1023
    c5c8:	0080460e 	bge	zero,r2,c6e4 <__muldf3+0x748>
    c5cc:	910001cc 	andi	r4,r18,7
    c5d0:	20000726 	beq	r4,zero,c5f0 <__muldf3+0x654>
    c5d4:	910003cc 	andi	r4,r18,15
    c5d8:	01400104 	movi	r5,4
    c5dc:	21400426 	beq	r4,r5,c5f0 <__muldf3+0x654>
    c5e0:	9149883a 	add	r4,r18,r5
    c5e4:	24a5803a 	cmpltu	r18,r4,r18
    c5e8:	8ca3883a 	add	r17,r17,r18
    c5ec:	2025883a 	mov	r18,r4
    c5f0:	8900402c 	andhi	r4,r17,256
    c5f4:	20000426 	beq	r4,zero,c608 <__muldf3+0x66c>
    c5f8:	18810004 	addi	r2,r3,1024
    c5fc:	00ffc034 	movhi	r3,65280
    c600:	18ffffc4 	addi	r3,r3,-1
    c604:	88e2703a 	and	r17,r17,r3
    c608:	00c1ff84 	movi	r3,2046
    c60c:	18bf1316 	blt	r3,r2,c25c <__alt_exception_stack_pointer+0xf800c25c>
    c610:	882c977a 	slli	r22,r17,29
    c614:	9024d0fa 	srli	r18,r18,3
    c618:	8822927a 	slli	r17,r17,9
    c61c:	1081ffcc 	andi	r2,r2,2047
    c620:	b4acb03a 	or	r22,r22,r18
    c624:	8820d33a 	srli	r16,r17,12
    c628:	3027883a 	mov	r19,r6
    c62c:	003eba06 	br	c118 <__alt_exception_stack_pointer+0xf800c118>
    c630:	8080022c 	andhi	r2,r16,8
    c634:	10000926 	beq	r2,zero,c65c <__muldf3+0x6c0>
    c638:	8880022c 	andhi	r2,r17,8
    c63c:	1000071e 	bne	r2,zero,c65c <__muldf3+0x6c0>
    c640:	00800434 	movhi	r2,16
    c644:	8c000234 	orhi	r16,r17,8
    c648:	10bfffc4 	addi	r2,r2,-1
    c64c:	e027883a 	mov	r19,fp
    c650:	80a0703a 	and	r16,r16,r2
    c654:	902d883a 	mov	r22,r18
    c658:	003f1706 	br	c2b8 <__alt_exception_stack_pointer+0xf800c2b8>
    c65c:	00800434 	movhi	r2,16
    c660:	84000234 	orhi	r16,r16,8
    c664:	10bfffc4 	addi	r2,r2,-1
    c668:	80a0703a 	and	r16,r16,r2
    c66c:	003f1206 	br	c2b8 <__alt_exception_stack_pointer+0xf800c2b8>
    c670:	147ff604 	addi	r17,r2,-40
    c674:	3462983a 	sll	r17,r6,r17
    c678:	0025883a 	mov	r18,zero
    c67c:	003ef306 	br	c24c <__alt_exception_stack_pointer+0xf800c24c>
    c680:	3009883a 	mov	r4,r6
    c684:	d9400215 	stw	r5,8(sp)
    c688:	d9800715 	stw	r6,28(sp)
    c68c:	da400415 	stw	r9,16(sp)
    c690:	da800315 	stw	r10,12(sp)
    c694:	000d3080 	call	d308 <__clzsi2>
    c698:	10800804 	addi	r2,r2,32
    c69c:	da800317 	ldw	r10,12(sp)
    c6a0:	da400417 	ldw	r9,16(sp)
    c6a4:	d9800717 	ldw	r6,28(sp)
    c6a8:	d9400217 	ldw	r5,8(sp)
    c6ac:	003edd06 	br	c224 <__alt_exception_stack_pointer+0xf800c224>
    c6b0:	143ff604 	addi	r16,r2,-40
    c6b4:	ac20983a 	sll	r16,r21,r16
    c6b8:	002d883a 	mov	r22,zero
    c6bc:	003ec106 	br	c1c4 <__alt_exception_stack_pointer+0xf800c1c4>
    c6c0:	d9800715 	stw	r6,28(sp)
    c6c4:	d9c00215 	stw	r7,8(sp)
    c6c8:	da400415 	stw	r9,16(sp)
    c6cc:	000d3080 	call	d308 <__clzsi2>
    c6d0:	10800804 	addi	r2,r2,32
    c6d4:	da400417 	ldw	r9,16(sp)
    c6d8:	d9c00217 	ldw	r7,8(sp)
    c6dc:	d9800717 	ldw	r6,28(sp)
    c6e0:	003eae06 	br	c19c <__alt_exception_stack_pointer+0xf800c19c>
    c6e4:	00c00044 	movi	r3,1
    c6e8:	1887c83a 	sub	r3,r3,r2
    c6ec:	01000e04 	movi	r4,56
    c6f0:	20fe8516 	blt	r4,r3,c108 <__alt_exception_stack_pointer+0xf800c108>
    c6f4:	010007c4 	movi	r4,31
    c6f8:	20c01b16 	blt	r4,r3,c768 <__muldf3+0x7cc>
    c6fc:	00800804 	movi	r2,32
    c700:	10c5c83a 	sub	r2,r2,r3
    c704:	888a983a 	sll	r5,r17,r2
    c708:	90c8d83a 	srl	r4,r18,r3
    c70c:	9084983a 	sll	r2,r18,r2
    c710:	88e2d83a 	srl	r17,r17,r3
    c714:	2906b03a 	or	r3,r5,r4
    c718:	1004c03a 	cmpne	r2,r2,zero
    c71c:	1886b03a 	or	r3,r3,r2
    c720:	188001cc 	andi	r2,r3,7
    c724:	10000726 	beq	r2,zero,c744 <__muldf3+0x7a8>
    c728:	188003cc 	andi	r2,r3,15
    c72c:	01000104 	movi	r4,4
    c730:	11000426 	beq	r2,r4,c744 <__muldf3+0x7a8>
    c734:	1805883a 	mov	r2,r3
    c738:	10c00104 	addi	r3,r2,4
    c73c:	1885803a 	cmpltu	r2,r3,r2
    c740:	88a3883a 	add	r17,r17,r2
    c744:	8880202c 	andhi	r2,r17,128
    c748:	10001c26 	beq	r2,zero,c7bc <__muldf3+0x820>
    c74c:	3027883a 	mov	r19,r6
    c750:	00800044 	movi	r2,1
    c754:	0021883a 	mov	r16,zero
    c758:	002d883a 	mov	r22,zero
    c75c:	003e6e06 	br	c118 <__alt_exception_stack_pointer+0xf800c118>
    c760:	4007883a 	mov	r3,r8
    c764:	003f9706 	br	c5c4 <__alt_exception_stack_pointer+0xf800c5c4>
    c768:	017ff844 	movi	r5,-31
    c76c:	2885c83a 	sub	r2,r5,r2
    c770:	888ad83a 	srl	r5,r17,r2
    c774:	00800804 	movi	r2,32
    c778:	18801a26 	beq	r3,r2,c7e4 <__muldf3+0x848>
    c77c:	01001004 	movi	r4,64
    c780:	20c7c83a 	sub	r3,r4,r3
    c784:	88e2983a 	sll	r17,r17,r3
    c788:	8ca4b03a 	or	r18,r17,r18
    c78c:	9004c03a 	cmpne	r2,r18,zero
    c790:	2884b03a 	or	r2,r5,r2
    c794:	144001cc 	andi	r17,r2,7
    c798:	88000d1e 	bne	r17,zero,c7d0 <__muldf3+0x834>
    c79c:	0021883a 	mov	r16,zero
    c7a0:	102cd0fa 	srli	r22,r2,3
    c7a4:	3027883a 	mov	r19,r6
    c7a8:	0005883a 	mov	r2,zero
    c7ac:	b46cb03a 	or	r22,r22,r17
    c7b0:	003e5906 	br	c118 <__alt_exception_stack_pointer+0xf800c118>
    c7b4:	1007883a 	mov	r3,r2
    c7b8:	0023883a 	mov	r17,zero
    c7bc:	8820927a 	slli	r16,r17,9
    c7c0:	1805883a 	mov	r2,r3
    c7c4:	8822977a 	slli	r17,r17,29
    c7c8:	8020d33a 	srli	r16,r16,12
    c7cc:	003ff406 	br	c7a0 <__alt_exception_stack_pointer+0xf800c7a0>
    c7d0:	10c003cc 	andi	r3,r2,15
    c7d4:	01000104 	movi	r4,4
    c7d8:	193ff626 	beq	r3,r4,c7b4 <__alt_exception_stack_pointer+0xf800c7b4>
    c7dc:	0023883a 	mov	r17,zero
    c7e0:	003fd506 	br	c738 <__alt_exception_stack_pointer+0xf800c738>
    c7e4:	0023883a 	mov	r17,zero
    c7e8:	003fe706 	br	c788 <__alt_exception_stack_pointer+0xf800c788>
    c7ec:	00800434 	movhi	r2,16
    c7f0:	8c000234 	orhi	r16,r17,8
    c7f4:	10bfffc4 	addi	r2,r2,-1
    c7f8:	3027883a 	mov	r19,r6
    c7fc:	80a0703a 	and	r16,r16,r2
    c800:	902d883a 	mov	r22,r18
    c804:	003eac06 	br	c2b8 <__alt_exception_stack_pointer+0xf800c2b8>

0000c808 <__subdf3>:
    c808:	02000434 	movhi	r8,16
    c80c:	423fffc4 	addi	r8,r8,-1
    c810:	defffb04 	addi	sp,sp,-20
    c814:	2a14703a 	and	r10,r5,r8
    c818:	3812d53a 	srli	r9,r7,20
    c81c:	3a10703a 	and	r8,r7,r8
    c820:	2006d77a 	srli	r3,r4,29
    c824:	3004d77a 	srli	r2,r6,29
    c828:	dc000015 	stw	r16,0(sp)
    c82c:	501490fa 	slli	r10,r10,3
    c830:	2820d53a 	srli	r16,r5,20
    c834:	401090fa 	slli	r8,r8,3
    c838:	dc800215 	stw	r18,8(sp)
    c83c:	dc400115 	stw	r17,4(sp)
    c840:	dfc00415 	stw	ra,16(sp)
    c844:	202290fa 	slli	r17,r4,3
    c848:	dcc00315 	stw	r19,12(sp)
    c84c:	4a41ffcc 	andi	r9,r9,2047
    c850:	0101ffc4 	movi	r4,2047
    c854:	2824d7fa 	srli	r18,r5,31
    c858:	8401ffcc 	andi	r16,r16,2047
    c85c:	50c6b03a 	or	r3,r10,r3
    c860:	380ed7fa 	srli	r7,r7,31
    c864:	408ab03a 	or	r5,r8,r2
    c868:	300c90fa 	slli	r6,r6,3
    c86c:	49009626 	beq	r9,r4,cac8 <__subdf3+0x2c0>
    c870:	39c0005c 	xori	r7,r7,1
    c874:	8245c83a 	sub	r2,r16,r9
    c878:	3c807426 	beq	r7,r18,ca4c <__subdf3+0x244>
    c87c:	0080af0e 	bge	zero,r2,cb3c <__subdf3+0x334>
    c880:	48002a1e 	bne	r9,zero,c92c <__subdf3+0x124>
    c884:	2988b03a 	or	r4,r5,r6
    c888:	20009a1e 	bne	r4,zero,caf4 <__subdf3+0x2ec>
    c88c:	888001cc 	andi	r2,r17,7
    c890:	10000726 	beq	r2,zero,c8b0 <__subdf3+0xa8>
    c894:	888003cc 	andi	r2,r17,15
    c898:	01000104 	movi	r4,4
    c89c:	11000426 	beq	r2,r4,c8b0 <__subdf3+0xa8>
    c8a0:	890b883a 	add	r5,r17,r4
    c8a4:	2c63803a 	cmpltu	r17,r5,r17
    c8a8:	1c47883a 	add	r3,r3,r17
    c8ac:	2823883a 	mov	r17,r5
    c8b0:	1880202c 	andhi	r2,r3,128
    c8b4:	10005926 	beq	r2,zero,ca1c <__subdf3+0x214>
    c8b8:	84000044 	addi	r16,r16,1
    c8bc:	0081ffc4 	movi	r2,2047
    c8c0:	8080be26 	beq	r16,r2,cbbc <__subdf3+0x3b4>
    c8c4:	017fe034 	movhi	r5,65408
    c8c8:	297fffc4 	addi	r5,r5,-1
    c8cc:	1946703a 	and	r3,r3,r5
    c8d0:	1804977a 	slli	r2,r3,29
    c8d4:	1806927a 	slli	r3,r3,9
    c8d8:	8822d0fa 	srli	r17,r17,3
    c8dc:	8401ffcc 	andi	r16,r16,2047
    c8e0:	180ad33a 	srli	r5,r3,12
    c8e4:	9100004c 	andi	r4,r18,1
    c8e8:	1444b03a 	or	r2,r2,r17
    c8ec:	80c1ffcc 	andi	r3,r16,2047
    c8f0:	1820953a 	slli	r16,r3,20
    c8f4:	20c03fcc 	andi	r3,r4,255
    c8f8:	180897fa 	slli	r4,r3,31
    c8fc:	00c00434 	movhi	r3,16
    c900:	18ffffc4 	addi	r3,r3,-1
    c904:	28c6703a 	and	r3,r5,r3
    c908:	1c06b03a 	or	r3,r3,r16
    c90c:	1906b03a 	or	r3,r3,r4
    c910:	dfc00417 	ldw	ra,16(sp)
    c914:	dcc00317 	ldw	r19,12(sp)
    c918:	dc800217 	ldw	r18,8(sp)
    c91c:	dc400117 	ldw	r17,4(sp)
    c920:	dc000017 	ldw	r16,0(sp)
    c924:	dec00504 	addi	sp,sp,20
    c928:	f800283a 	ret
    c92c:	0101ffc4 	movi	r4,2047
    c930:	813fd626 	beq	r16,r4,c88c <__alt_exception_stack_pointer+0xf800c88c>
    c934:	29402034 	orhi	r5,r5,128
    c938:	01000e04 	movi	r4,56
    c93c:	2080a316 	blt	r4,r2,cbcc <__subdf3+0x3c4>
    c940:	010007c4 	movi	r4,31
    c944:	2080c616 	blt	r4,r2,cc60 <__subdf3+0x458>
    c948:	01000804 	movi	r4,32
    c94c:	2089c83a 	sub	r4,r4,r2
    c950:	2910983a 	sll	r8,r5,r4
    c954:	308ed83a 	srl	r7,r6,r2
    c958:	3108983a 	sll	r4,r6,r4
    c95c:	2884d83a 	srl	r2,r5,r2
    c960:	41ccb03a 	or	r6,r8,r7
    c964:	2008c03a 	cmpne	r4,r4,zero
    c968:	310cb03a 	or	r6,r6,r4
    c96c:	898dc83a 	sub	r6,r17,r6
    c970:	89a3803a 	cmpltu	r17,r17,r6
    c974:	1887c83a 	sub	r3,r3,r2
    c978:	1c47c83a 	sub	r3,r3,r17
    c97c:	3023883a 	mov	r17,r6
    c980:	1880202c 	andhi	r2,r3,128
    c984:	10002326 	beq	r2,zero,ca14 <__subdf3+0x20c>
    c988:	04c02034 	movhi	r19,128
    c98c:	9cffffc4 	addi	r19,r19,-1
    c990:	1ce6703a 	and	r19,r3,r19
    c994:	98007a26 	beq	r19,zero,cb80 <__subdf3+0x378>
    c998:	9809883a 	mov	r4,r19
    c99c:	000d3080 	call	d308 <__clzsi2>
    c9a0:	113ffe04 	addi	r4,r2,-8
    c9a4:	00c007c4 	movi	r3,31
    c9a8:	19007b16 	blt	r3,r4,cb98 <__subdf3+0x390>
    c9ac:	00800804 	movi	r2,32
    c9b0:	1105c83a 	sub	r2,r2,r4
    c9b4:	8884d83a 	srl	r2,r17,r2
    c9b8:	9906983a 	sll	r3,r19,r4
    c9bc:	8922983a 	sll	r17,r17,r4
    c9c0:	10c4b03a 	or	r2,r2,r3
    c9c4:	24007816 	blt	r4,r16,cba8 <__subdf3+0x3a0>
    c9c8:	2421c83a 	sub	r16,r4,r16
    c9cc:	80c00044 	addi	r3,r16,1
    c9d0:	010007c4 	movi	r4,31
    c9d4:	20c09516 	blt	r4,r3,cc2c <__subdf3+0x424>
    c9d8:	01400804 	movi	r5,32
    c9dc:	28cbc83a 	sub	r5,r5,r3
    c9e0:	88c8d83a 	srl	r4,r17,r3
    c9e4:	8962983a 	sll	r17,r17,r5
    c9e8:	114a983a 	sll	r5,r2,r5
    c9ec:	10c6d83a 	srl	r3,r2,r3
    c9f0:	8804c03a 	cmpne	r2,r17,zero
    c9f4:	290ab03a 	or	r5,r5,r4
    c9f8:	28a2b03a 	or	r17,r5,r2
    c9fc:	0021883a 	mov	r16,zero
    ca00:	003fa206 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    ca04:	2090b03a 	or	r8,r4,r2
    ca08:	40018e26 	beq	r8,zero,d044 <__subdf3+0x83c>
    ca0c:	1007883a 	mov	r3,r2
    ca10:	2023883a 	mov	r17,r4
    ca14:	888001cc 	andi	r2,r17,7
    ca18:	103f9e1e 	bne	r2,zero,c894 <__alt_exception_stack_pointer+0xf800c894>
    ca1c:	1804977a 	slli	r2,r3,29
    ca20:	8822d0fa 	srli	r17,r17,3
    ca24:	1810d0fa 	srli	r8,r3,3
    ca28:	9100004c 	andi	r4,r18,1
    ca2c:	1444b03a 	or	r2,r2,r17
    ca30:	00c1ffc4 	movi	r3,2047
    ca34:	80c02826 	beq	r16,r3,cad8 <__subdf3+0x2d0>
    ca38:	01400434 	movhi	r5,16
    ca3c:	297fffc4 	addi	r5,r5,-1
    ca40:	80e0703a 	and	r16,r16,r3
    ca44:	414a703a 	and	r5,r8,r5
    ca48:	003fa806 	br	c8ec <__alt_exception_stack_pointer+0xf800c8ec>
    ca4c:	0080630e 	bge	zero,r2,cbdc <__subdf3+0x3d4>
    ca50:	48003026 	beq	r9,zero,cb14 <__subdf3+0x30c>
    ca54:	0101ffc4 	movi	r4,2047
    ca58:	813f8c26 	beq	r16,r4,c88c <__alt_exception_stack_pointer+0xf800c88c>
    ca5c:	29402034 	orhi	r5,r5,128
    ca60:	01000e04 	movi	r4,56
    ca64:	2080a90e 	bge	r4,r2,cd0c <__subdf3+0x504>
    ca68:	298cb03a 	or	r6,r5,r6
    ca6c:	3012c03a 	cmpne	r9,r6,zero
    ca70:	0005883a 	mov	r2,zero
    ca74:	4c53883a 	add	r9,r9,r17
    ca78:	4c63803a 	cmpltu	r17,r9,r17
    ca7c:	10c7883a 	add	r3,r2,r3
    ca80:	88c7883a 	add	r3,r17,r3
    ca84:	4823883a 	mov	r17,r9
    ca88:	1880202c 	andhi	r2,r3,128
    ca8c:	1000d026 	beq	r2,zero,cdd0 <__subdf3+0x5c8>
    ca90:	84000044 	addi	r16,r16,1
    ca94:	0081ffc4 	movi	r2,2047
    ca98:	8080fe26 	beq	r16,r2,ce94 <__subdf3+0x68c>
    ca9c:	00bfe034 	movhi	r2,65408
    caa0:	10bfffc4 	addi	r2,r2,-1
    caa4:	1886703a 	and	r3,r3,r2
    caa8:	880ad07a 	srli	r5,r17,1
    caac:	180497fa 	slli	r2,r3,31
    cab0:	8900004c 	andi	r4,r17,1
    cab4:	2922b03a 	or	r17,r5,r4
    cab8:	1806d07a 	srli	r3,r3,1
    cabc:	1462b03a 	or	r17,r2,r17
    cac0:	3825883a 	mov	r18,r7
    cac4:	003f7106 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cac8:	2984b03a 	or	r2,r5,r6
    cacc:	103f6826 	beq	r2,zero,c870 <__alt_exception_stack_pointer+0xf800c870>
    cad0:	39c03fcc 	andi	r7,r7,255
    cad4:	003f6706 	br	c874 <__alt_exception_stack_pointer+0xf800c874>
    cad8:	4086b03a 	or	r3,r8,r2
    cadc:	18015226 	beq	r3,zero,d028 <__subdf3+0x820>
    cae0:	00c00434 	movhi	r3,16
    cae4:	41400234 	orhi	r5,r8,8
    cae8:	18ffffc4 	addi	r3,r3,-1
    caec:	28ca703a 	and	r5,r5,r3
    caf0:	003f7e06 	br	c8ec <__alt_exception_stack_pointer+0xf800c8ec>
    caf4:	10bfffc4 	addi	r2,r2,-1
    caf8:	1000491e 	bne	r2,zero,cc20 <__subdf3+0x418>
    cafc:	898fc83a 	sub	r7,r17,r6
    cb00:	89e3803a 	cmpltu	r17,r17,r7
    cb04:	1947c83a 	sub	r3,r3,r5
    cb08:	1c47c83a 	sub	r3,r3,r17
    cb0c:	3823883a 	mov	r17,r7
    cb10:	003f9b06 	br	c980 <__alt_exception_stack_pointer+0xf800c980>
    cb14:	2988b03a 	or	r4,r5,r6
    cb18:	203f5c26 	beq	r4,zero,c88c <__alt_exception_stack_pointer+0xf800c88c>
    cb1c:	10bfffc4 	addi	r2,r2,-1
    cb20:	1000931e 	bne	r2,zero,cd70 <__subdf3+0x568>
    cb24:	898d883a 	add	r6,r17,r6
    cb28:	3463803a 	cmpltu	r17,r6,r17
    cb2c:	1947883a 	add	r3,r3,r5
    cb30:	88c7883a 	add	r3,r17,r3
    cb34:	3023883a 	mov	r17,r6
    cb38:	003fd306 	br	ca88 <__alt_exception_stack_pointer+0xf800ca88>
    cb3c:	1000541e 	bne	r2,zero,cc90 <__subdf3+0x488>
    cb40:	80800044 	addi	r2,r16,1
    cb44:	1081ffcc 	andi	r2,r2,2047
    cb48:	01000044 	movi	r4,1
    cb4c:	2080a20e 	bge	r4,r2,cdd8 <__subdf3+0x5d0>
    cb50:	8989c83a 	sub	r4,r17,r6
    cb54:	8905803a 	cmpltu	r2,r17,r4
    cb58:	1967c83a 	sub	r19,r3,r5
    cb5c:	98a7c83a 	sub	r19,r19,r2
    cb60:	9880202c 	andhi	r2,r19,128
    cb64:	10006326 	beq	r2,zero,ccf4 <__subdf3+0x4ec>
    cb68:	3463c83a 	sub	r17,r6,r17
    cb6c:	28c7c83a 	sub	r3,r5,r3
    cb70:	344d803a 	cmpltu	r6,r6,r17
    cb74:	19a7c83a 	sub	r19,r3,r6
    cb78:	3825883a 	mov	r18,r7
    cb7c:	983f861e 	bne	r19,zero,c998 <__alt_exception_stack_pointer+0xf800c998>
    cb80:	8809883a 	mov	r4,r17
    cb84:	000d3080 	call	d308 <__clzsi2>
    cb88:	10800804 	addi	r2,r2,32
    cb8c:	113ffe04 	addi	r4,r2,-8
    cb90:	00c007c4 	movi	r3,31
    cb94:	193f850e 	bge	r3,r4,c9ac <__alt_exception_stack_pointer+0xf800c9ac>
    cb98:	10bff604 	addi	r2,r2,-40
    cb9c:	8884983a 	sll	r2,r17,r2
    cba0:	0023883a 	mov	r17,zero
    cba4:	243f880e 	bge	r4,r16,c9c8 <__alt_exception_stack_pointer+0xf800c9c8>
    cba8:	00ffe034 	movhi	r3,65408
    cbac:	18ffffc4 	addi	r3,r3,-1
    cbb0:	8121c83a 	sub	r16,r16,r4
    cbb4:	10c6703a 	and	r3,r2,r3
    cbb8:	003f3406 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cbbc:	9100004c 	andi	r4,r18,1
    cbc0:	000b883a 	mov	r5,zero
    cbc4:	0005883a 	mov	r2,zero
    cbc8:	003f4806 	br	c8ec <__alt_exception_stack_pointer+0xf800c8ec>
    cbcc:	298cb03a 	or	r6,r5,r6
    cbd0:	300cc03a 	cmpne	r6,r6,zero
    cbd4:	0005883a 	mov	r2,zero
    cbd8:	003f6406 	br	c96c <__alt_exception_stack_pointer+0xf800c96c>
    cbdc:	10009a1e 	bne	r2,zero,ce48 <__subdf3+0x640>
    cbe0:	82400044 	addi	r9,r16,1
    cbe4:	4881ffcc 	andi	r2,r9,2047
    cbe8:	02800044 	movi	r10,1
    cbec:	5080670e 	bge	r10,r2,cd8c <__subdf3+0x584>
    cbf0:	0081ffc4 	movi	r2,2047
    cbf4:	4880af26 	beq	r9,r2,ceb4 <__subdf3+0x6ac>
    cbf8:	898d883a 	add	r6,r17,r6
    cbfc:	1945883a 	add	r2,r3,r5
    cc00:	3447803a 	cmpltu	r3,r6,r17
    cc04:	1887883a 	add	r3,r3,r2
    cc08:	182297fa 	slli	r17,r3,31
    cc0c:	300cd07a 	srli	r6,r6,1
    cc10:	1806d07a 	srli	r3,r3,1
    cc14:	4821883a 	mov	r16,r9
    cc18:	89a2b03a 	or	r17,r17,r6
    cc1c:	003f1b06 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cc20:	0101ffc4 	movi	r4,2047
    cc24:	813f441e 	bne	r16,r4,c938 <__alt_exception_stack_pointer+0xf800c938>
    cc28:	003f1806 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cc2c:	843ff844 	addi	r16,r16,-31
    cc30:	01400804 	movi	r5,32
    cc34:	1408d83a 	srl	r4,r2,r16
    cc38:	19405026 	beq	r3,r5,cd7c <__subdf3+0x574>
    cc3c:	01401004 	movi	r5,64
    cc40:	28c7c83a 	sub	r3,r5,r3
    cc44:	10c4983a 	sll	r2,r2,r3
    cc48:	88a2b03a 	or	r17,r17,r2
    cc4c:	8822c03a 	cmpne	r17,r17,zero
    cc50:	2462b03a 	or	r17,r4,r17
    cc54:	0007883a 	mov	r3,zero
    cc58:	0021883a 	mov	r16,zero
    cc5c:	003f6d06 	br	ca14 <__alt_exception_stack_pointer+0xf800ca14>
    cc60:	11fff804 	addi	r7,r2,-32
    cc64:	01000804 	movi	r4,32
    cc68:	29ced83a 	srl	r7,r5,r7
    cc6c:	11004526 	beq	r2,r4,cd84 <__subdf3+0x57c>
    cc70:	01001004 	movi	r4,64
    cc74:	2089c83a 	sub	r4,r4,r2
    cc78:	2904983a 	sll	r2,r5,r4
    cc7c:	118cb03a 	or	r6,r2,r6
    cc80:	300cc03a 	cmpne	r6,r6,zero
    cc84:	398cb03a 	or	r6,r7,r6
    cc88:	0005883a 	mov	r2,zero
    cc8c:	003f3706 	br	c96c <__alt_exception_stack_pointer+0xf800c96c>
    cc90:	80002a26 	beq	r16,zero,cd3c <__subdf3+0x534>
    cc94:	0101ffc4 	movi	r4,2047
    cc98:	49006626 	beq	r9,r4,ce34 <__subdf3+0x62c>
    cc9c:	0085c83a 	sub	r2,zero,r2
    cca0:	18c02034 	orhi	r3,r3,128
    cca4:	01000e04 	movi	r4,56
    cca8:	20807e16 	blt	r4,r2,cea4 <__subdf3+0x69c>
    ccac:	010007c4 	movi	r4,31
    ccb0:	2080e716 	blt	r4,r2,d050 <__subdf3+0x848>
    ccb4:	01000804 	movi	r4,32
    ccb8:	2089c83a 	sub	r4,r4,r2
    ccbc:	1914983a 	sll	r10,r3,r4
    ccc0:	8890d83a 	srl	r8,r17,r2
    ccc4:	8908983a 	sll	r4,r17,r4
    ccc8:	1884d83a 	srl	r2,r3,r2
    cccc:	5222b03a 	or	r17,r10,r8
    ccd0:	2006c03a 	cmpne	r3,r4,zero
    ccd4:	88e2b03a 	or	r17,r17,r3
    ccd8:	3463c83a 	sub	r17,r6,r17
    ccdc:	2885c83a 	sub	r2,r5,r2
    cce0:	344d803a 	cmpltu	r6,r6,r17
    cce4:	1187c83a 	sub	r3,r2,r6
    cce8:	4821883a 	mov	r16,r9
    ccec:	3825883a 	mov	r18,r7
    ccf0:	003f2306 	br	c980 <__alt_exception_stack_pointer+0xf800c980>
    ccf4:	24d0b03a 	or	r8,r4,r19
    ccf8:	40001b1e 	bne	r8,zero,cd68 <__subdf3+0x560>
    ccfc:	0005883a 	mov	r2,zero
    cd00:	0009883a 	mov	r4,zero
    cd04:	0021883a 	mov	r16,zero
    cd08:	003f4906 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    cd0c:	010007c4 	movi	r4,31
    cd10:	20803a16 	blt	r4,r2,cdfc <__subdf3+0x5f4>
    cd14:	01000804 	movi	r4,32
    cd18:	2089c83a 	sub	r4,r4,r2
    cd1c:	2912983a 	sll	r9,r5,r4
    cd20:	3090d83a 	srl	r8,r6,r2
    cd24:	3108983a 	sll	r4,r6,r4
    cd28:	2884d83a 	srl	r2,r5,r2
    cd2c:	4a12b03a 	or	r9,r9,r8
    cd30:	2008c03a 	cmpne	r4,r4,zero
    cd34:	4912b03a 	or	r9,r9,r4
    cd38:	003f4e06 	br	ca74 <__alt_exception_stack_pointer+0xf800ca74>
    cd3c:	1c48b03a 	or	r4,r3,r17
    cd40:	20003c26 	beq	r4,zero,ce34 <__subdf3+0x62c>
    cd44:	0084303a 	nor	r2,zero,r2
    cd48:	1000381e 	bne	r2,zero,ce2c <__subdf3+0x624>
    cd4c:	3463c83a 	sub	r17,r6,r17
    cd50:	28c5c83a 	sub	r2,r5,r3
    cd54:	344d803a 	cmpltu	r6,r6,r17
    cd58:	1187c83a 	sub	r3,r2,r6
    cd5c:	4821883a 	mov	r16,r9
    cd60:	3825883a 	mov	r18,r7
    cd64:	003f0606 	br	c980 <__alt_exception_stack_pointer+0xf800c980>
    cd68:	2023883a 	mov	r17,r4
    cd6c:	003f0906 	br	c994 <__alt_exception_stack_pointer+0xf800c994>
    cd70:	0101ffc4 	movi	r4,2047
    cd74:	813f3a1e 	bne	r16,r4,ca60 <__alt_exception_stack_pointer+0xf800ca60>
    cd78:	003ec406 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cd7c:	0005883a 	mov	r2,zero
    cd80:	003fb106 	br	cc48 <__alt_exception_stack_pointer+0xf800cc48>
    cd84:	0005883a 	mov	r2,zero
    cd88:	003fbc06 	br	cc7c <__alt_exception_stack_pointer+0xf800cc7c>
    cd8c:	1c44b03a 	or	r2,r3,r17
    cd90:	80008e1e 	bne	r16,zero,cfcc <__subdf3+0x7c4>
    cd94:	1000c826 	beq	r2,zero,d0b8 <__subdf3+0x8b0>
    cd98:	2984b03a 	or	r2,r5,r6
    cd9c:	103ebb26 	beq	r2,zero,c88c <__alt_exception_stack_pointer+0xf800c88c>
    cda0:	8989883a 	add	r4,r17,r6
    cda4:	1945883a 	add	r2,r3,r5
    cda8:	2447803a 	cmpltu	r3,r4,r17
    cdac:	1887883a 	add	r3,r3,r2
    cdb0:	1880202c 	andhi	r2,r3,128
    cdb4:	2023883a 	mov	r17,r4
    cdb8:	103f1626 	beq	r2,zero,ca14 <__alt_exception_stack_pointer+0xf800ca14>
    cdbc:	00bfe034 	movhi	r2,65408
    cdc0:	10bfffc4 	addi	r2,r2,-1
    cdc4:	5021883a 	mov	r16,r10
    cdc8:	1886703a 	and	r3,r3,r2
    cdcc:	003eaf06 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cdd0:	3825883a 	mov	r18,r7
    cdd4:	003f0f06 	br	ca14 <__alt_exception_stack_pointer+0xf800ca14>
    cdd8:	1c44b03a 	or	r2,r3,r17
    cddc:	8000251e 	bne	r16,zero,ce74 <__subdf3+0x66c>
    cde0:	1000661e 	bne	r2,zero,cf7c <__subdf3+0x774>
    cde4:	2990b03a 	or	r8,r5,r6
    cde8:	40009626 	beq	r8,zero,d044 <__subdf3+0x83c>
    cdec:	2807883a 	mov	r3,r5
    cdf0:	3023883a 	mov	r17,r6
    cdf4:	3825883a 	mov	r18,r7
    cdf8:	003ea406 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cdfc:	127ff804 	addi	r9,r2,-32
    ce00:	01000804 	movi	r4,32
    ce04:	2a52d83a 	srl	r9,r5,r9
    ce08:	11008c26 	beq	r2,r4,d03c <__subdf3+0x834>
    ce0c:	01001004 	movi	r4,64
    ce10:	2085c83a 	sub	r2,r4,r2
    ce14:	2884983a 	sll	r2,r5,r2
    ce18:	118cb03a 	or	r6,r2,r6
    ce1c:	300cc03a 	cmpne	r6,r6,zero
    ce20:	4992b03a 	or	r9,r9,r6
    ce24:	0005883a 	mov	r2,zero
    ce28:	003f1206 	br	ca74 <__alt_exception_stack_pointer+0xf800ca74>
    ce2c:	0101ffc4 	movi	r4,2047
    ce30:	493f9c1e 	bne	r9,r4,cca4 <__alt_exception_stack_pointer+0xf800cca4>
    ce34:	2807883a 	mov	r3,r5
    ce38:	3023883a 	mov	r17,r6
    ce3c:	4821883a 	mov	r16,r9
    ce40:	3825883a 	mov	r18,r7
    ce44:	003e9106 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    ce48:	80001f1e 	bne	r16,zero,cec8 <__subdf3+0x6c0>
    ce4c:	1c48b03a 	or	r4,r3,r17
    ce50:	20005a26 	beq	r4,zero,cfbc <__subdf3+0x7b4>
    ce54:	0084303a 	nor	r2,zero,r2
    ce58:	1000561e 	bne	r2,zero,cfb4 <__subdf3+0x7ac>
    ce5c:	89a3883a 	add	r17,r17,r6
    ce60:	1945883a 	add	r2,r3,r5
    ce64:	898d803a 	cmpltu	r6,r17,r6
    ce68:	3087883a 	add	r3,r6,r2
    ce6c:	4821883a 	mov	r16,r9
    ce70:	003f0506 	br	ca88 <__alt_exception_stack_pointer+0xf800ca88>
    ce74:	10002b1e 	bne	r2,zero,cf24 <__subdf3+0x71c>
    ce78:	2984b03a 	or	r2,r5,r6
    ce7c:	10008026 	beq	r2,zero,d080 <__subdf3+0x878>
    ce80:	2807883a 	mov	r3,r5
    ce84:	3023883a 	mov	r17,r6
    ce88:	3825883a 	mov	r18,r7
    ce8c:	0401ffc4 	movi	r16,2047
    ce90:	003e7e06 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    ce94:	3809883a 	mov	r4,r7
    ce98:	0011883a 	mov	r8,zero
    ce9c:	0005883a 	mov	r2,zero
    cea0:	003ee306 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    cea4:	1c62b03a 	or	r17,r3,r17
    cea8:	8822c03a 	cmpne	r17,r17,zero
    ceac:	0005883a 	mov	r2,zero
    ceb0:	003f8906 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    ceb4:	3809883a 	mov	r4,r7
    ceb8:	4821883a 	mov	r16,r9
    cebc:	0011883a 	mov	r8,zero
    cec0:	0005883a 	mov	r2,zero
    cec4:	003eda06 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    cec8:	0101ffc4 	movi	r4,2047
    cecc:	49003b26 	beq	r9,r4,cfbc <__subdf3+0x7b4>
    ced0:	0085c83a 	sub	r2,zero,r2
    ced4:	18c02034 	orhi	r3,r3,128
    ced8:	01000e04 	movi	r4,56
    cedc:	20806e16 	blt	r4,r2,d098 <__subdf3+0x890>
    cee0:	010007c4 	movi	r4,31
    cee4:	20807716 	blt	r4,r2,d0c4 <__subdf3+0x8bc>
    cee8:	01000804 	movi	r4,32
    ceec:	2089c83a 	sub	r4,r4,r2
    cef0:	1914983a 	sll	r10,r3,r4
    cef4:	8890d83a 	srl	r8,r17,r2
    cef8:	8908983a 	sll	r4,r17,r4
    cefc:	1884d83a 	srl	r2,r3,r2
    cf00:	5222b03a 	or	r17,r10,r8
    cf04:	2006c03a 	cmpne	r3,r4,zero
    cf08:	88e2b03a 	or	r17,r17,r3
    cf0c:	89a3883a 	add	r17,r17,r6
    cf10:	1145883a 	add	r2,r2,r5
    cf14:	898d803a 	cmpltu	r6,r17,r6
    cf18:	3087883a 	add	r3,r6,r2
    cf1c:	4821883a 	mov	r16,r9
    cf20:	003ed906 	br	ca88 <__alt_exception_stack_pointer+0xf800ca88>
    cf24:	2984b03a 	or	r2,r5,r6
    cf28:	10004226 	beq	r2,zero,d034 <__subdf3+0x82c>
    cf2c:	1808d0fa 	srli	r4,r3,3
    cf30:	8822d0fa 	srli	r17,r17,3
    cf34:	1806977a 	slli	r3,r3,29
    cf38:	2080022c 	andhi	r2,r4,8
    cf3c:	1c62b03a 	or	r17,r3,r17
    cf40:	10000826 	beq	r2,zero,cf64 <__subdf3+0x75c>
    cf44:	2812d0fa 	srli	r9,r5,3
    cf48:	4880022c 	andhi	r2,r9,8
    cf4c:	1000051e 	bne	r2,zero,cf64 <__subdf3+0x75c>
    cf50:	300cd0fa 	srli	r6,r6,3
    cf54:	2804977a 	slli	r2,r5,29
    cf58:	4809883a 	mov	r4,r9
    cf5c:	3825883a 	mov	r18,r7
    cf60:	11a2b03a 	or	r17,r2,r6
    cf64:	8806d77a 	srli	r3,r17,29
    cf68:	200890fa 	slli	r4,r4,3
    cf6c:	882290fa 	slli	r17,r17,3
    cf70:	0401ffc4 	movi	r16,2047
    cf74:	1906b03a 	or	r3,r3,r4
    cf78:	003e4406 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cf7c:	2984b03a 	or	r2,r5,r6
    cf80:	103e4226 	beq	r2,zero,c88c <__alt_exception_stack_pointer+0xf800c88c>
    cf84:	8989c83a 	sub	r4,r17,r6
    cf88:	8911803a 	cmpltu	r8,r17,r4
    cf8c:	1945c83a 	sub	r2,r3,r5
    cf90:	1205c83a 	sub	r2,r2,r8
    cf94:	1200202c 	andhi	r8,r2,128
    cf98:	403e9a26 	beq	r8,zero,ca04 <__alt_exception_stack_pointer+0xf800ca04>
    cf9c:	3463c83a 	sub	r17,r6,r17
    cfa0:	28c5c83a 	sub	r2,r5,r3
    cfa4:	344d803a 	cmpltu	r6,r6,r17
    cfa8:	1187c83a 	sub	r3,r2,r6
    cfac:	3825883a 	mov	r18,r7
    cfb0:	003e3606 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cfb4:	0101ffc4 	movi	r4,2047
    cfb8:	493fc71e 	bne	r9,r4,ced8 <__alt_exception_stack_pointer+0xf800ced8>
    cfbc:	2807883a 	mov	r3,r5
    cfc0:	3023883a 	mov	r17,r6
    cfc4:	4821883a 	mov	r16,r9
    cfc8:	003e3006 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    cfcc:	10003626 	beq	r2,zero,d0a8 <__subdf3+0x8a0>
    cfd0:	2984b03a 	or	r2,r5,r6
    cfd4:	10001726 	beq	r2,zero,d034 <__subdf3+0x82c>
    cfd8:	1808d0fa 	srli	r4,r3,3
    cfdc:	8822d0fa 	srli	r17,r17,3
    cfe0:	1806977a 	slli	r3,r3,29
    cfe4:	2080022c 	andhi	r2,r4,8
    cfe8:	1c62b03a 	or	r17,r3,r17
    cfec:	10000726 	beq	r2,zero,d00c <__subdf3+0x804>
    cff0:	2812d0fa 	srli	r9,r5,3
    cff4:	4880022c 	andhi	r2,r9,8
    cff8:	1000041e 	bne	r2,zero,d00c <__subdf3+0x804>
    cffc:	300cd0fa 	srli	r6,r6,3
    d000:	2804977a 	slli	r2,r5,29
    d004:	4809883a 	mov	r4,r9
    d008:	11a2b03a 	or	r17,r2,r6
    d00c:	8806d77a 	srli	r3,r17,29
    d010:	200890fa 	slli	r4,r4,3
    d014:	882290fa 	slli	r17,r17,3
    d018:	3825883a 	mov	r18,r7
    d01c:	1906b03a 	or	r3,r3,r4
    d020:	0401ffc4 	movi	r16,2047
    d024:	003e1906 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    d028:	000b883a 	mov	r5,zero
    d02c:	0005883a 	mov	r2,zero
    d030:	003e2e06 	br	c8ec <__alt_exception_stack_pointer+0xf800c8ec>
    d034:	0401ffc4 	movi	r16,2047
    d038:	003e1406 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    d03c:	0005883a 	mov	r2,zero
    d040:	003f7506 	br	ce18 <__alt_exception_stack_pointer+0xf800ce18>
    d044:	0005883a 	mov	r2,zero
    d048:	0009883a 	mov	r4,zero
    d04c:	003e7806 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    d050:	123ff804 	addi	r8,r2,-32
    d054:	01000804 	movi	r4,32
    d058:	1a10d83a 	srl	r8,r3,r8
    d05c:	11002526 	beq	r2,r4,d0f4 <__subdf3+0x8ec>
    d060:	01001004 	movi	r4,64
    d064:	2085c83a 	sub	r2,r4,r2
    d068:	1884983a 	sll	r2,r3,r2
    d06c:	1444b03a 	or	r2,r2,r17
    d070:	1004c03a 	cmpne	r2,r2,zero
    d074:	40a2b03a 	or	r17,r8,r2
    d078:	0005883a 	mov	r2,zero
    d07c:	003f1606 	br	ccd8 <__alt_exception_stack_pointer+0xf800ccd8>
    d080:	02000434 	movhi	r8,16
    d084:	0009883a 	mov	r4,zero
    d088:	423fffc4 	addi	r8,r8,-1
    d08c:	00bfffc4 	movi	r2,-1
    d090:	0401ffc4 	movi	r16,2047
    d094:	003e6606 	br	ca30 <__alt_exception_stack_pointer+0xf800ca30>
    d098:	1c62b03a 	or	r17,r3,r17
    d09c:	8822c03a 	cmpne	r17,r17,zero
    d0a0:	0005883a 	mov	r2,zero
    d0a4:	003f9906 	br	cf0c <__alt_exception_stack_pointer+0xf800cf0c>
    d0a8:	2807883a 	mov	r3,r5
    d0ac:	3023883a 	mov	r17,r6
    d0b0:	0401ffc4 	movi	r16,2047
    d0b4:	003df506 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    d0b8:	2807883a 	mov	r3,r5
    d0bc:	3023883a 	mov	r17,r6
    d0c0:	003df206 	br	c88c <__alt_exception_stack_pointer+0xf800c88c>
    d0c4:	123ff804 	addi	r8,r2,-32
    d0c8:	01000804 	movi	r4,32
    d0cc:	1a10d83a 	srl	r8,r3,r8
    d0d0:	11000a26 	beq	r2,r4,d0fc <__subdf3+0x8f4>
    d0d4:	01001004 	movi	r4,64
    d0d8:	2085c83a 	sub	r2,r4,r2
    d0dc:	1884983a 	sll	r2,r3,r2
    d0e0:	1444b03a 	or	r2,r2,r17
    d0e4:	1004c03a 	cmpne	r2,r2,zero
    d0e8:	40a2b03a 	or	r17,r8,r2
    d0ec:	0005883a 	mov	r2,zero
    d0f0:	003f8606 	br	cf0c <__alt_exception_stack_pointer+0xf800cf0c>
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	003fdc06 	br	d06c <__alt_exception_stack_pointer+0xf800d06c>
    d0fc:	0005883a 	mov	r2,zero
    d100:	003ff706 	br	d0e0 <__alt_exception_stack_pointer+0xf800d0e0>

0000d104 <__fixdfsi>:
    d104:	280cd53a 	srli	r6,r5,20
    d108:	00c00434 	movhi	r3,16
    d10c:	18ffffc4 	addi	r3,r3,-1
    d110:	3181ffcc 	andi	r6,r6,2047
    d114:	01c0ff84 	movi	r7,1022
    d118:	28c6703a 	and	r3,r5,r3
    d11c:	280ad7fa 	srli	r5,r5,31
    d120:	3980120e 	bge	r7,r6,d16c <__fixdfsi+0x68>
    d124:	00810744 	movi	r2,1053
    d128:	11800c16 	blt	r2,r6,d15c <__fixdfsi+0x58>
    d12c:	00810cc4 	movi	r2,1075
    d130:	1185c83a 	sub	r2,r2,r6
    d134:	01c007c4 	movi	r7,31
    d138:	18c00434 	orhi	r3,r3,16
    d13c:	38800d16 	blt	r7,r2,d174 <__fixdfsi+0x70>
    d140:	31befb44 	addi	r6,r6,-1043
    d144:	2084d83a 	srl	r2,r4,r2
    d148:	1986983a 	sll	r3,r3,r6
    d14c:	1884b03a 	or	r2,r3,r2
    d150:	28000726 	beq	r5,zero,d170 <__fixdfsi+0x6c>
    d154:	0085c83a 	sub	r2,zero,r2
    d158:	f800283a 	ret
    d15c:	00a00034 	movhi	r2,32768
    d160:	10bfffc4 	addi	r2,r2,-1
    d164:	2885883a 	add	r2,r5,r2
    d168:	f800283a 	ret
    d16c:	0005883a 	mov	r2,zero
    d170:	f800283a 	ret
    d174:	008104c4 	movi	r2,1043
    d178:	1185c83a 	sub	r2,r2,r6
    d17c:	1884d83a 	srl	r2,r3,r2
    d180:	003ff306 	br	d150 <__alt_exception_stack_pointer+0xf800d150>

0000d184 <__floatsidf>:
    d184:	defffd04 	addi	sp,sp,-12
    d188:	dfc00215 	stw	ra,8(sp)
    d18c:	dc400115 	stw	r17,4(sp)
    d190:	dc000015 	stw	r16,0(sp)
    d194:	20002b26 	beq	r4,zero,d244 <__floatsidf+0xc0>
    d198:	2023883a 	mov	r17,r4
    d19c:	2020d7fa 	srli	r16,r4,31
    d1a0:	20002d16 	blt	r4,zero,d258 <__floatsidf+0xd4>
    d1a4:	8809883a 	mov	r4,r17
    d1a8:	000d3080 	call	d308 <__clzsi2>
    d1ac:	01410784 	movi	r5,1054
    d1b0:	288bc83a 	sub	r5,r5,r2
    d1b4:	01010cc4 	movi	r4,1075
    d1b8:	2149c83a 	sub	r4,r4,r5
    d1bc:	00c007c4 	movi	r3,31
    d1c0:	1900160e 	bge	r3,r4,d21c <__floatsidf+0x98>
    d1c4:	00c104c4 	movi	r3,1043
    d1c8:	1947c83a 	sub	r3,r3,r5
    d1cc:	88c6983a 	sll	r3,r17,r3
    d1d0:	00800434 	movhi	r2,16
    d1d4:	10bfffc4 	addi	r2,r2,-1
    d1d8:	1886703a 	and	r3,r3,r2
    d1dc:	2941ffcc 	andi	r5,r5,2047
    d1e0:	800d883a 	mov	r6,r16
    d1e4:	0005883a 	mov	r2,zero
    d1e8:	280a953a 	slli	r5,r5,20
    d1ec:	31803fcc 	andi	r6,r6,255
    d1f0:	01000434 	movhi	r4,16
    d1f4:	300c97fa 	slli	r6,r6,31
    d1f8:	213fffc4 	addi	r4,r4,-1
    d1fc:	1906703a 	and	r3,r3,r4
    d200:	1946b03a 	or	r3,r3,r5
    d204:	1986b03a 	or	r3,r3,r6
    d208:	dfc00217 	ldw	ra,8(sp)
    d20c:	dc400117 	ldw	r17,4(sp)
    d210:	dc000017 	ldw	r16,0(sp)
    d214:	dec00304 	addi	sp,sp,12
    d218:	f800283a 	ret
    d21c:	00c002c4 	movi	r3,11
    d220:	1887c83a 	sub	r3,r3,r2
    d224:	88c6d83a 	srl	r3,r17,r3
    d228:	8904983a 	sll	r2,r17,r4
    d22c:	01000434 	movhi	r4,16
    d230:	213fffc4 	addi	r4,r4,-1
    d234:	2941ffcc 	andi	r5,r5,2047
    d238:	1906703a 	and	r3,r3,r4
    d23c:	800d883a 	mov	r6,r16
    d240:	003fe906 	br	d1e8 <__alt_exception_stack_pointer+0xf800d1e8>
    d244:	000d883a 	mov	r6,zero
    d248:	000b883a 	mov	r5,zero
    d24c:	0007883a 	mov	r3,zero
    d250:	0005883a 	mov	r2,zero
    d254:	003fe406 	br	d1e8 <__alt_exception_stack_pointer+0xf800d1e8>
    d258:	0123c83a 	sub	r17,zero,r4
    d25c:	003fd106 	br	d1a4 <__alt_exception_stack_pointer+0xf800d1a4>

0000d260 <__floatunsidf>:
    d260:	defffe04 	addi	sp,sp,-8
    d264:	dc000015 	stw	r16,0(sp)
    d268:	dfc00115 	stw	ra,4(sp)
    d26c:	2021883a 	mov	r16,r4
    d270:	20002226 	beq	r4,zero,d2fc <__floatunsidf+0x9c>
    d274:	000d3080 	call	d308 <__clzsi2>
    d278:	01010784 	movi	r4,1054
    d27c:	2089c83a 	sub	r4,r4,r2
    d280:	01810cc4 	movi	r6,1075
    d284:	310dc83a 	sub	r6,r6,r4
    d288:	00c007c4 	movi	r3,31
    d28c:	1980120e 	bge	r3,r6,d2d8 <__floatunsidf+0x78>
    d290:	00c104c4 	movi	r3,1043
    d294:	1907c83a 	sub	r3,r3,r4
    d298:	80ca983a 	sll	r5,r16,r3
    d29c:	00800434 	movhi	r2,16
    d2a0:	10bfffc4 	addi	r2,r2,-1
    d2a4:	2101ffcc 	andi	r4,r4,2047
    d2a8:	0021883a 	mov	r16,zero
    d2ac:	288a703a 	and	r5,r5,r2
    d2b0:	2008953a 	slli	r4,r4,20
    d2b4:	00c00434 	movhi	r3,16
    d2b8:	18ffffc4 	addi	r3,r3,-1
    d2bc:	28c6703a 	and	r3,r5,r3
    d2c0:	8005883a 	mov	r2,r16
    d2c4:	1906b03a 	or	r3,r3,r4
    d2c8:	dfc00117 	ldw	ra,4(sp)
    d2cc:	dc000017 	ldw	r16,0(sp)
    d2d0:	dec00204 	addi	sp,sp,8
    d2d4:	f800283a 	ret
    d2d8:	00c002c4 	movi	r3,11
    d2dc:	188bc83a 	sub	r5,r3,r2
    d2e0:	814ad83a 	srl	r5,r16,r5
    d2e4:	00c00434 	movhi	r3,16
    d2e8:	18ffffc4 	addi	r3,r3,-1
    d2ec:	81a0983a 	sll	r16,r16,r6
    d2f0:	2101ffcc 	andi	r4,r4,2047
    d2f4:	28ca703a 	and	r5,r5,r3
    d2f8:	003fed06 	br	d2b0 <__alt_exception_stack_pointer+0xf800d2b0>
    d2fc:	0009883a 	mov	r4,zero
    d300:	000b883a 	mov	r5,zero
    d304:	003fea06 	br	d2b0 <__alt_exception_stack_pointer+0xf800d2b0>

0000d308 <__clzsi2>:
    d308:	00bfffd4 	movui	r2,65535
    d30c:	11000536 	bltu	r2,r4,d324 <__clzsi2+0x1c>
    d310:	00803fc4 	movi	r2,255
    d314:	11000f36 	bltu	r2,r4,d354 <__clzsi2+0x4c>
    d318:	00800804 	movi	r2,32
    d31c:	0007883a 	mov	r3,zero
    d320:	00000506 	br	d338 <__clzsi2+0x30>
    d324:	00804034 	movhi	r2,256
    d328:	10bfffc4 	addi	r2,r2,-1
    d32c:	11000c2e 	bgeu	r2,r4,d360 <__clzsi2+0x58>
    d330:	00800204 	movi	r2,8
    d334:	00c00604 	movi	r3,24
    d338:	20c8d83a 	srl	r4,r4,r3
    d33c:	00c00074 	movhi	r3,1
    d340:	18ff3804 	addi	r3,r3,-800
    d344:	1909883a 	add	r4,r3,r4
    d348:	20c00003 	ldbu	r3,0(r4)
    d34c:	10c5c83a 	sub	r2,r2,r3
    d350:	f800283a 	ret
    d354:	00800604 	movi	r2,24
    d358:	00c00204 	movi	r3,8
    d35c:	003ff606 	br	d338 <__alt_exception_stack_pointer+0xf800d338>
    d360:	00800404 	movi	r2,16
    d364:	1007883a 	mov	r3,r2
    d368:	003ff306 	br	d338 <__alt_exception_stack_pointer+0xf800d338>

0000d36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d36c:	defffe04 	addi	sp,sp,-8
    d370:	dfc00115 	stw	ra,4(sp)
    d374:	df000015 	stw	fp,0(sp)
    d378:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d37c:	d0a00d17 	ldw	r2,-32716(gp)
    d380:	10000326 	beq	r2,zero,d390 <alt_get_errno+0x24>
    d384:	d0a00d17 	ldw	r2,-32716(gp)
    d388:	103ee83a 	callr	r2
    d38c:	00000106 	br	d394 <alt_get_errno+0x28>
    d390:	d0a6d004 	addi	r2,gp,-25792
}
    d394:	e037883a 	mov	sp,fp
    d398:	dfc00117 	ldw	ra,4(sp)
    d39c:	df000017 	ldw	fp,0(sp)
    d3a0:	dec00204 	addi	sp,sp,8
    d3a4:	f800283a 	ret

0000d3a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d3a8:	defffb04 	addi	sp,sp,-20
    d3ac:	dfc00415 	stw	ra,16(sp)
    d3b0:	df000315 	stw	fp,12(sp)
    d3b4:	df000304 	addi	fp,sp,12
    d3b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d3bc:	e0bfff17 	ldw	r2,-4(fp)
    d3c0:	10000816 	blt	r2,zero,d3e4 <close+0x3c>
    d3c4:	01400304 	movi	r5,12
    d3c8:	e13fff17 	ldw	r4,-4(fp)
    d3cc:	000aaa00 	call	aaa0 <__mulsi3>
    d3d0:	1007883a 	mov	r3,r2
    d3d4:	00800074 	movhi	r2,1
    d3d8:	1081bb04 	addi	r2,r2,1772
    d3dc:	1885883a 	add	r2,r3,r2
    d3e0:	00000106 	br	d3e8 <close+0x40>
    d3e4:	0005883a 	mov	r2,zero
    d3e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d3ec:	e0bffd17 	ldw	r2,-12(fp)
    d3f0:	10001926 	beq	r2,zero,d458 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d3f4:	e0bffd17 	ldw	r2,-12(fp)
    d3f8:	10800017 	ldw	r2,0(r2)
    d3fc:	10800417 	ldw	r2,16(r2)
    d400:	10000626 	beq	r2,zero,d41c <close+0x74>
    d404:	e0bffd17 	ldw	r2,-12(fp)
    d408:	10800017 	ldw	r2,0(r2)
    d40c:	10800417 	ldw	r2,16(r2)
    d410:	e13ffd17 	ldw	r4,-12(fp)
    d414:	103ee83a 	callr	r2
    d418:	00000106 	br	d420 <close+0x78>
    d41c:	0005883a 	mov	r2,zero
    d420:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d424:	e13fff17 	ldw	r4,-4(fp)
    d428:	000da900 	call	da90 <alt_release_fd>
    if (rval < 0)
    d42c:	e0bffe17 	ldw	r2,-8(fp)
    d430:	1000070e 	bge	r2,zero,d450 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d434:	000d36c0 	call	d36c <alt_get_errno>
    d438:	1007883a 	mov	r3,r2
    d43c:	e0bffe17 	ldw	r2,-8(fp)
    d440:	0085c83a 	sub	r2,zero,r2
    d444:	18800015 	stw	r2,0(r3)
      return -1;
    d448:	00bfffc4 	movi	r2,-1
    d44c:	00000706 	br	d46c <close+0xc4>
    }
    return 0;
    d450:	0005883a 	mov	r2,zero
    d454:	00000506 	br	d46c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d458:	000d36c0 	call	d36c <alt_get_errno>
    d45c:	1007883a 	mov	r3,r2
    d460:	00801444 	movi	r2,81
    d464:	18800015 	stw	r2,0(r3)
    return -1;
    d468:	00bfffc4 	movi	r2,-1
  }
}
    d46c:	e037883a 	mov	sp,fp
    d470:	dfc00117 	ldw	ra,4(sp)
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00204 	addi	sp,sp,8
    d47c:	f800283a 	ret

0000d480 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d480:	defffc04 	addi	sp,sp,-16
    d484:	df000315 	stw	fp,12(sp)
    d488:	df000304 	addi	fp,sp,12
    d48c:	e13ffd15 	stw	r4,-12(fp)
    d490:	e17ffe15 	stw	r5,-8(fp)
    d494:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d498:	e0bfff17 	ldw	r2,-4(fp)
}
    d49c:	e037883a 	mov	sp,fp
    d4a0:	df000017 	ldw	fp,0(sp)
    d4a4:	dec00104 	addi	sp,sp,4
    d4a8:	f800283a 	ret

0000d4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4ac:	defffe04 	addi	sp,sp,-8
    d4b0:	dfc00115 	stw	ra,4(sp)
    d4b4:	df000015 	stw	fp,0(sp)
    d4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4bc:	d0a00d17 	ldw	r2,-32716(gp)
    d4c0:	10000326 	beq	r2,zero,d4d0 <alt_get_errno+0x24>
    d4c4:	d0a00d17 	ldw	r2,-32716(gp)
    d4c8:	103ee83a 	callr	r2
    d4cc:	00000106 	br	d4d4 <alt_get_errno+0x28>
    d4d0:	d0a6d004 	addi	r2,gp,-25792
}
    d4d4:	e037883a 	mov	sp,fp
    d4d8:	dfc00117 	ldw	ra,4(sp)
    d4dc:	df000017 	ldw	fp,0(sp)
    d4e0:	dec00204 	addi	sp,sp,8
    d4e4:	f800283a 	ret

0000d4e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d4e8:	defffb04 	addi	sp,sp,-20
    d4ec:	dfc00415 	stw	ra,16(sp)
    d4f0:	df000315 	stw	fp,12(sp)
    d4f4:	df000304 	addi	fp,sp,12
    d4f8:	e13ffe15 	stw	r4,-8(fp)
    d4fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d500:	e0bffe17 	ldw	r2,-8(fp)
    d504:	10000816 	blt	r2,zero,d528 <fstat+0x40>
    d508:	01400304 	movi	r5,12
    d50c:	e13ffe17 	ldw	r4,-8(fp)
    d510:	000aaa00 	call	aaa0 <__mulsi3>
    d514:	1007883a 	mov	r3,r2
    d518:	00800074 	movhi	r2,1
    d51c:	1081bb04 	addi	r2,r2,1772
    d520:	1885883a 	add	r2,r3,r2
    d524:	00000106 	br	d52c <fstat+0x44>
    d528:	0005883a 	mov	r2,zero
    d52c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d530:	e0bffd17 	ldw	r2,-12(fp)
    d534:	10001026 	beq	r2,zero,d578 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d538:	e0bffd17 	ldw	r2,-12(fp)
    d53c:	10800017 	ldw	r2,0(r2)
    d540:	10800817 	ldw	r2,32(r2)
    d544:	10000726 	beq	r2,zero,d564 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d548:	e0bffd17 	ldw	r2,-12(fp)
    d54c:	10800017 	ldw	r2,0(r2)
    d550:	10800817 	ldw	r2,32(r2)
    d554:	e17fff17 	ldw	r5,-4(fp)
    d558:	e13ffd17 	ldw	r4,-12(fp)
    d55c:	103ee83a 	callr	r2
    d560:	00000a06 	br	d58c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d564:	e0bfff17 	ldw	r2,-4(fp)
    d568:	00c80004 	movi	r3,8192
    d56c:	10c00115 	stw	r3,4(r2)
      return 0;
    d570:	0005883a 	mov	r2,zero
    d574:	00000506 	br	d58c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d578:	000d4ac0 	call	d4ac <alt_get_errno>
    d57c:	1007883a 	mov	r3,r2
    d580:	00801444 	movi	r2,81
    d584:	18800015 	stw	r2,0(r3)
    return -1;
    d588:	00bfffc4 	movi	r2,-1
  }
}
    d58c:	e037883a 	mov	sp,fp
    d590:	dfc00117 	ldw	ra,4(sp)
    d594:	df000017 	ldw	fp,0(sp)
    d598:	dec00204 	addi	sp,sp,8
    d59c:	f800283a 	ret

0000d5a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5a0:	defffe04 	addi	sp,sp,-8
    d5a4:	dfc00115 	stw	ra,4(sp)
    d5a8:	df000015 	stw	fp,0(sp)
    d5ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5b0:	d0a00d17 	ldw	r2,-32716(gp)
    d5b4:	10000326 	beq	r2,zero,d5c4 <alt_get_errno+0x24>
    d5b8:	d0a00d17 	ldw	r2,-32716(gp)
    d5bc:	103ee83a 	callr	r2
    d5c0:	00000106 	br	d5c8 <alt_get_errno+0x28>
    d5c4:	d0a6d004 	addi	r2,gp,-25792
}
    d5c8:	e037883a 	mov	sp,fp
    d5cc:	dfc00117 	ldw	ra,4(sp)
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00204 	addi	sp,sp,8
    d5d8:	f800283a 	ret

0000d5dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d5dc:	deffed04 	addi	sp,sp,-76
    d5e0:	dfc01215 	stw	ra,72(sp)
    d5e4:	df001115 	stw	fp,68(sp)
    d5e8:	df001104 	addi	fp,sp,68
    d5ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5f0:	e0bfff17 	ldw	r2,-4(fp)
    d5f4:	10000816 	blt	r2,zero,d618 <isatty+0x3c>
    d5f8:	01400304 	movi	r5,12
    d5fc:	e13fff17 	ldw	r4,-4(fp)
    d600:	000aaa00 	call	aaa0 <__mulsi3>
    d604:	1007883a 	mov	r3,r2
    d608:	00800074 	movhi	r2,1
    d60c:	1081bb04 	addi	r2,r2,1772
    d610:	1885883a 	add	r2,r3,r2
    d614:	00000106 	br	d61c <isatty+0x40>
    d618:	0005883a 	mov	r2,zero
    d61c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d620:	e0bfef17 	ldw	r2,-68(fp)
    d624:	10000e26 	beq	r2,zero,d660 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d628:	e0bfef17 	ldw	r2,-68(fp)
    d62c:	10800017 	ldw	r2,0(r2)
    d630:	10800817 	ldw	r2,32(r2)
    d634:	1000021e 	bne	r2,zero,d640 <isatty+0x64>
    {
      return 1;
    d638:	00800044 	movi	r2,1
    d63c:	00000d06 	br	d674 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d640:	e0bff004 	addi	r2,fp,-64
    d644:	100b883a 	mov	r5,r2
    d648:	e13fff17 	ldw	r4,-4(fp)
    d64c:	000d4e80 	call	d4e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d650:	e0bff117 	ldw	r2,-60(fp)
    d654:	10880020 	cmpeqi	r2,r2,8192
    d658:	10803fcc 	andi	r2,r2,255
    d65c:	00000506 	br	d674 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d660:	000d5a00 	call	d5a0 <alt_get_errno>
    d664:	1007883a 	mov	r3,r2
    d668:	00801444 	movi	r2,81
    d66c:	18800015 	stw	r2,0(r3)
    return 0;
    d670:	0005883a 	mov	r2,zero
  }
}
    d674:	e037883a 	mov	sp,fp
    d678:	dfc00117 	ldw	ra,4(sp)
    d67c:	df000017 	ldw	fp,0(sp)
    d680:	dec00204 	addi	sp,sp,8
    d684:	f800283a 	ret

0000d688 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d688:	defffc04 	addi	sp,sp,-16
    d68c:	df000315 	stw	fp,12(sp)
    d690:	df000304 	addi	fp,sp,12
    d694:	e13ffd15 	stw	r4,-12(fp)
    d698:	e17ffe15 	stw	r5,-8(fp)
    d69c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d6a0:	e0fffe17 	ldw	r3,-8(fp)
    d6a4:	e0bffd17 	ldw	r2,-12(fp)
    d6a8:	18800c26 	beq	r3,r2,d6dc <alt_load_section+0x54>
  {
    while( to != end )
    d6ac:	00000806 	br	d6d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d6b0:	e0bffe17 	ldw	r2,-8(fp)
    d6b4:	10c00104 	addi	r3,r2,4
    d6b8:	e0fffe15 	stw	r3,-8(fp)
    d6bc:	e0fffd17 	ldw	r3,-12(fp)
    d6c0:	19000104 	addi	r4,r3,4
    d6c4:	e13ffd15 	stw	r4,-12(fp)
    d6c8:	18c00017 	ldw	r3,0(r3)
    d6cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d6d0:	e0fffe17 	ldw	r3,-8(fp)
    d6d4:	e0bfff17 	ldw	r2,-4(fp)
    d6d8:	18bff51e 	bne	r3,r2,d6b0 <__alt_exception_stack_pointer+0xf800d6b0>
    {
      *to++ = *from++;
    }
  }
}
    d6dc:	0001883a 	nop
    d6e0:	e037883a 	mov	sp,fp
    d6e4:	df000017 	ldw	fp,0(sp)
    d6e8:	dec00104 	addi	sp,sp,4
    d6ec:	f800283a 	ret

0000d6f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d6f0:	defffe04 	addi	sp,sp,-8
    d6f4:	dfc00115 	stw	ra,4(sp)
    d6f8:	df000015 	stw	fp,0(sp)
    d6fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d700:	01800074 	movhi	r6,1
    d704:	31864404 	addi	r6,r6,6416
    d708:	01400074 	movhi	r5,1
    d70c:	297f8804 	addi	r5,r5,-480
    d710:	01000074 	movhi	r4,1
    d714:	21064404 	addi	r4,r4,6416
    d718:	000d6880 	call	d688 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d71c:	01800034 	movhi	r6,0
    d720:	31808f04 	addi	r6,r6,572
    d724:	01400034 	movhi	r5,0
    d728:	29400804 	addi	r5,r5,32
    d72c:	01000034 	movhi	r4,0
    d730:	21000804 	addi	r4,r4,32
    d734:	000d6880 	call	d688 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d738:	01800074 	movhi	r6,1
    d73c:	31bf8804 	addi	r6,r6,-480
    d740:	01400074 	movhi	r5,1
    d744:	297ec304 	addi	r5,r5,-1268
    d748:	01000074 	movhi	r4,1
    d74c:	213ec304 	addi	r4,r4,-1268
    d750:	000d6880 	call	d688 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d754:	000ea540 	call	ea54 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d758:	000ec140 	call	ec14 <alt_icache_flush_all>
}
    d75c:	0001883a 	nop
    d760:	e037883a 	mov	sp,fp
    d764:	dfc00117 	ldw	ra,4(sp)
    d768:	df000017 	ldw	fp,0(sp)
    d76c:	dec00204 	addi	sp,sp,8
    d770:	f800283a 	ret

0000d774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d774:	defffe04 	addi	sp,sp,-8
    d778:	dfc00115 	stw	ra,4(sp)
    d77c:	df000015 	stw	fp,0(sp)
    d780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d784:	d0a00d17 	ldw	r2,-32716(gp)
    d788:	10000326 	beq	r2,zero,d798 <alt_get_errno+0x24>
    d78c:	d0a00d17 	ldw	r2,-32716(gp)
    d790:	103ee83a 	callr	r2
    d794:	00000106 	br	d79c <alt_get_errno+0x28>
    d798:	d0a6d004 	addi	r2,gp,-25792
}
    d79c:	e037883a 	mov	sp,fp
    d7a0:	dfc00117 	ldw	ra,4(sp)
    d7a4:	df000017 	ldw	fp,0(sp)
    d7a8:	dec00204 	addi	sp,sp,8
    d7ac:	f800283a 	ret

0000d7b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d7b0:	defff904 	addi	sp,sp,-28
    d7b4:	dfc00615 	stw	ra,24(sp)
    d7b8:	df000515 	stw	fp,20(sp)
    d7bc:	df000504 	addi	fp,sp,20
    d7c0:	e13ffd15 	stw	r4,-12(fp)
    d7c4:	e17ffe15 	stw	r5,-8(fp)
    d7c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d7cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d7d0:	e0bffd17 	ldw	r2,-12(fp)
    d7d4:	10000816 	blt	r2,zero,d7f8 <lseek+0x48>
    d7d8:	01400304 	movi	r5,12
    d7dc:	e13ffd17 	ldw	r4,-12(fp)
    d7e0:	000aaa00 	call	aaa0 <__mulsi3>
    d7e4:	1007883a 	mov	r3,r2
    d7e8:	00800074 	movhi	r2,1
    d7ec:	1081bb04 	addi	r2,r2,1772
    d7f0:	1885883a 	add	r2,r3,r2
    d7f4:	00000106 	br	d7fc <lseek+0x4c>
    d7f8:	0005883a 	mov	r2,zero
    d7fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d800:	e0bffc17 	ldw	r2,-16(fp)
    d804:	10001026 	beq	r2,zero,d848 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d808:	e0bffc17 	ldw	r2,-16(fp)
    d80c:	10800017 	ldw	r2,0(r2)
    d810:	10800717 	ldw	r2,28(r2)
    d814:	10000926 	beq	r2,zero,d83c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d818:	e0bffc17 	ldw	r2,-16(fp)
    d81c:	10800017 	ldw	r2,0(r2)
    d820:	10800717 	ldw	r2,28(r2)
    d824:	e1bfff17 	ldw	r6,-4(fp)
    d828:	e17ffe17 	ldw	r5,-8(fp)
    d82c:	e13ffc17 	ldw	r4,-16(fp)
    d830:	103ee83a 	callr	r2
    d834:	e0bffb15 	stw	r2,-20(fp)
    d838:	00000506 	br	d850 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d83c:	00bfde84 	movi	r2,-134
    d840:	e0bffb15 	stw	r2,-20(fp)
    d844:	00000206 	br	d850 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d848:	00bfebc4 	movi	r2,-81
    d84c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d850:	e0bffb17 	ldw	r2,-20(fp)
    d854:	1000070e 	bge	r2,zero,d874 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    d858:	000d7740 	call	d774 <alt_get_errno>
    d85c:	1007883a 	mov	r3,r2
    d860:	e0bffb17 	ldw	r2,-20(fp)
    d864:	0085c83a 	sub	r2,zero,r2
    d868:	18800015 	stw	r2,0(r3)
    rc = -1;
    d86c:	00bfffc4 	movi	r2,-1
    d870:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d874:	e0bffb17 	ldw	r2,-20(fp)
}
    d878:	e037883a 	mov	sp,fp
    d87c:	dfc00117 	ldw	ra,4(sp)
    d880:	df000017 	ldw	fp,0(sp)
    d884:	dec00204 	addi	sp,sp,8
    d888:	f800283a 	ret

0000d88c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d88c:	defffd04 	addi	sp,sp,-12
    d890:	dfc00215 	stw	ra,8(sp)
    d894:	df000115 	stw	fp,4(sp)
    d898:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d89c:	0009883a 	mov	r4,zero
    d8a0:	000dd340 	call	dd34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d8a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d8a8:	000dd6c0 	call	dd6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d8ac:	01800074 	movhi	r6,1
    d8b0:	31bf7b04 	addi	r6,r6,-532
    d8b4:	01400074 	movhi	r5,1
    d8b8:	297f8004 	addi	r5,r5,-512
    d8bc:	01000074 	movhi	r4,1
    d8c0:	213f7b04 	addi	r4,r4,-532
    d8c4:	000efb80 	call	efb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d8c8:	000eb540 	call	eb54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d8cc:	01000074 	movhi	r4,1
    d8d0:	213aed04 	addi	r4,r4,-5196
    d8d4:	000f7780 	call	f778 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d8d8:	d0a6d417 	ldw	r2,-25776(gp)
    d8dc:	d0e6d517 	ldw	r3,-25772(gp)
    d8e0:	d126d617 	ldw	r4,-25768(gp)
    d8e4:	200d883a 	mov	r6,r4
    d8e8:	180b883a 	mov	r5,r3
    d8ec:	1009883a 	mov	r4,r2
    d8f0:	00003d40 	call	3d4 <main>
    d8f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d8f8:	01000044 	movi	r4,1
    d8fc:	000d3a80 	call	d3a8 <close>
  exit (result);
    d900:	e13fff17 	ldw	r4,-4(fp)
    d904:	000f78c0 	call	f78c <exit>

0000d908 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d908:	defffe04 	addi	sp,sp,-8
    d90c:	df000115 	stw	fp,4(sp)
    d910:	df000104 	addi	fp,sp,4
    d914:	e13fff15 	stw	r4,-4(fp)
}
    d918:	0001883a 	nop
    d91c:	e037883a 	mov	sp,fp
    d920:	df000017 	ldw	fp,0(sp)
    d924:	dec00104 	addi	sp,sp,4
    d928:	f800283a 	ret

0000d92c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d92c:	defffe04 	addi	sp,sp,-8
    d930:	df000115 	stw	fp,4(sp)
    d934:	df000104 	addi	fp,sp,4
    d938:	e13fff15 	stw	r4,-4(fp)
}
    d93c:	0001883a 	nop
    d940:	e037883a 	mov	sp,fp
    d944:	df000017 	ldw	fp,0(sp)
    d948:	dec00104 	addi	sp,sp,4
    d94c:	f800283a 	ret

0000d950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d950:	defffe04 	addi	sp,sp,-8
    d954:	dfc00115 	stw	ra,4(sp)
    d958:	df000015 	stw	fp,0(sp)
    d95c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d960:	d0a00d17 	ldw	r2,-32716(gp)
    d964:	10000326 	beq	r2,zero,d974 <alt_get_errno+0x24>
    d968:	d0a00d17 	ldw	r2,-32716(gp)
    d96c:	103ee83a 	callr	r2
    d970:	00000106 	br	d978 <alt_get_errno+0x28>
    d974:	d0a6d004 	addi	r2,gp,-25792
}
    d978:	e037883a 	mov	sp,fp
    d97c:	dfc00117 	ldw	ra,4(sp)
    d980:	df000017 	ldw	fp,0(sp)
    d984:	dec00204 	addi	sp,sp,8
    d988:	f800283a 	ret

0000d98c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d98c:	defff904 	addi	sp,sp,-28
    d990:	dfc00615 	stw	ra,24(sp)
    d994:	df000515 	stw	fp,20(sp)
    d998:	df000504 	addi	fp,sp,20
    d99c:	e13ffd15 	stw	r4,-12(fp)
    d9a0:	e17ffe15 	stw	r5,-8(fp)
    d9a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9a8:	e0bffd17 	ldw	r2,-12(fp)
    d9ac:	10000816 	blt	r2,zero,d9d0 <read+0x44>
    d9b0:	01400304 	movi	r5,12
    d9b4:	e13ffd17 	ldw	r4,-12(fp)
    d9b8:	000aaa00 	call	aaa0 <__mulsi3>
    d9bc:	1007883a 	mov	r3,r2
    d9c0:	00800074 	movhi	r2,1
    d9c4:	1081bb04 	addi	r2,r2,1772
    d9c8:	1885883a 	add	r2,r3,r2
    d9cc:	00000106 	br	d9d4 <read+0x48>
    d9d0:	0005883a 	mov	r2,zero
    d9d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d9d8:	e0bffb17 	ldw	r2,-20(fp)
    d9dc:	10002226 	beq	r2,zero,da68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d9e0:	e0bffb17 	ldw	r2,-20(fp)
    d9e4:	10800217 	ldw	r2,8(r2)
    d9e8:	108000cc 	andi	r2,r2,3
    d9ec:	10800060 	cmpeqi	r2,r2,1
    d9f0:	1000181e 	bne	r2,zero,da54 <read+0xc8>
        (fd->dev->read))
    d9f4:	e0bffb17 	ldw	r2,-20(fp)
    d9f8:	10800017 	ldw	r2,0(r2)
    d9fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    da00:	10001426 	beq	r2,zero,da54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    da04:	e0bffb17 	ldw	r2,-20(fp)
    da08:	10800017 	ldw	r2,0(r2)
    da0c:	10800517 	ldw	r2,20(r2)
    da10:	e0ffff17 	ldw	r3,-4(fp)
    da14:	180d883a 	mov	r6,r3
    da18:	e17ffe17 	ldw	r5,-8(fp)
    da1c:	e13ffb17 	ldw	r4,-20(fp)
    da20:	103ee83a 	callr	r2
    da24:	e0bffc15 	stw	r2,-16(fp)
    da28:	e0bffc17 	ldw	r2,-16(fp)
    da2c:	1000070e 	bge	r2,zero,da4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    da30:	000d9500 	call	d950 <alt_get_errno>
    da34:	1007883a 	mov	r3,r2
    da38:	e0bffc17 	ldw	r2,-16(fp)
    da3c:	0085c83a 	sub	r2,zero,r2
    da40:	18800015 	stw	r2,0(r3)
          return -1;
    da44:	00bfffc4 	movi	r2,-1
    da48:	00000c06 	br	da7c <read+0xf0>
        }
        return rval;
    da4c:	e0bffc17 	ldw	r2,-16(fp)
    da50:	00000a06 	br	da7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    da54:	000d9500 	call	d950 <alt_get_errno>
    da58:	1007883a 	mov	r3,r2
    da5c:	00800344 	movi	r2,13
    da60:	18800015 	stw	r2,0(r3)
    da64:	00000406 	br	da78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    da68:	000d9500 	call	d950 <alt_get_errno>
    da6c:	1007883a 	mov	r3,r2
    da70:	00801444 	movi	r2,81
    da74:	18800015 	stw	r2,0(r3)
  }
  return -1;
    da78:	00bfffc4 	movi	r2,-1
}
    da7c:	e037883a 	mov	sp,fp
    da80:	dfc00117 	ldw	ra,4(sp)
    da84:	df000017 	ldw	fp,0(sp)
    da88:	dec00204 	addi	sp,sp,8
    da8c:	f800283a 	ret

0000da90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    da90:	defffc04 	addi	sp,sp,-16
    da94:	dfc00315 	stw	ra,12(sp)
    da98:	df000215 	stw	fp,8(sp)
    da9c:	dc000115 	stw	r16,4(sp)
    daa0:	df000204 	addi	fp,sp,8
    daa4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    daa8:	e0bffe17 	ldw	r2,-8(fp)
    daac:	108000d0 	cmplti	r2,r2,3
    dab0:	1000111e 	bne	r2,zero,daf8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    dab4:	04000074 	movhi	r16,1
    dab8:	8401bb04 	addi	r16,r16,1772
    dabc:	e0bffe17 	ldw	r2,-8(fp)
    dac0:	01400304 	movi	r5,12
    dac4:	1009883a 	mov	r4,r2
    dac8:	000aaa00 	call	aaa0 <__mulsi3>
    dacc:	8085883a 	add	r2,r16,r2
    dad0:	10800204 	addi	r2,r2,8
    dad4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dad8:	04000074 	movhi	r16,1
    dadc:	8401bb04 	addi	r16,r16,1772
    dae0:	e0bffe17 	ldw	r2,-8(fp)
    dae4:	01400304 	movi	r5,12
    dae8:	1009883a 	mov	r4,r2
    daec:	000aaa00 	call	aaa0 <__mulsi3>
    daf0:	8085883a 	add	r2,r16,r2
    daf4:	10000015 	stw	zero,0(r2)
  }
}
    daf8:	0001883a 	nop
    dafc:	e6ffff04 	addi	sp,fp,-4
    db00:	dfc00217 	ldw	ra,8(sp)
    db04:	df000117 	ldw	fp,4(sp)
    db08:	dc000017 	ldw	r16,0(sp)
    db0c:	dec00304 	addi	sp,sp,12
    db10:	f800283a 	ret

0000db14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    db14:	defff904 	addi	sp,sp,-28
    db18:	df000615 	stw	fp,24(sp)
    db1c:	df000604 	addi	fp,sp,24
    db20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db24:	0005303a 	rdctl	r2,status
    db28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db2c:	e0fffe17 	ldw	r3,-8(fp)
    db30:	00bfff84 	movi	r2,-2
    db34:	1884703a 	and	r2,r3,r2
    db38:	1001703a 	wrctl	status,r2
  
  return context;
    db3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    db40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    db44:	d0a00e17 	ldw	r2,-32712(gp)
    db48:	10c000c4 	addi	r3,r2,3
    db4c:	00bfff04 	movi	r2,-4
    db50:	1884703a 	and	r2,r3,r2
    db54:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    db58:	d0e00e17 	ldw	r3,-32712(gp)
    db5c:	e0bfff17 	ldw	r2,-4(fp)
    db60:	1887883a 	add	r3,r3,r2
    db64:	00820034 	movhi	r2,2048
    db68:	10bf0004 	addi	r2,r2,-1024
    db6c:	10c0062e 	bgeu	r2,r3,db88 <sbrk+0x74>
    db70:	e0bffb17 	ldw	r2,-20(fp)
    db74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db78:	e0bffa17 	ldw	r2,-24(fp)
    db7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    db80:	00bfffc4 	movi	r2,-1
    db84:	00000b06 	br	dbb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    db88:	d0a00e17 	ldw	r2,-32712(gp)
    db8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    db90:	d0e00e17 	ldw	r3,-32712(gp)
    db94:	e0bfff17 	ldw	r2,-4(fp)
    db98:	1885883a 	add	r2,r3,r2
    db9c:	d0a00e15 	stw	r2,-32712(gp)
    dba0:	e0bffb17 	ldw	r2,-20(fp)
    dba4:	e0bffc15 	stw	r2,-16(fp)
    dba8:	e0bffc17 	ldw	r2,-16(fp)
    dbac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dbb0:	e0bffd17 	ldw	r2,-12(fp)
} 
    dbb4:	e037883a 	mov	sp,fp
    dbb8:	df000017 	ldw	fp,0(sp)
    dbbc:	dec00104 	addi	sp,sp,4
    dbc0:	f800283a 	ret

0000dbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dbc4:	defffe04 	addi	sp,sp,-8
    dbc8:	dfc00115 	stw	ra,4(sp)
    dbcc:	df000015 	stw	fp,0(sp)
    dbd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dbd4:	d0a00d17 	ldw	r2,-32716(gp)
    dbd8:	10000326 	beq	r2,zero,dbe8 <alt_get_errno+0x24>
    dbdc:	d0a00d17 	ldw	r2,-32716(gp)
    dbe0:	103ee83a 	callr	r2
    dbe4:	00000106 	br	dbec <alt_get_errno+0x28>
    dbe8:	d0a6d004 	addi	r2,gp,-25792
}
    dbec:	e037883a 	mov	sp,fp
    dbf0:	dfc00117 	ldw	ra,4(sp)
    dbf4:	df000017 	ldw	fp,0(sp)
    dbf8:	dec00204 	addi	sp,sp,8
    dbfc:	f800283a 	ret

0000dc00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dc00:	defff904 	addi	sp,sp,-28
    dc04:	dfc00615 	stw	ra,24(sp)
    dc08:	df000515 	stw	fp,20(sp)
    dc0c:	df000504 	addi	fp,sp,20
    dc10:	e13ffd15 	stw	r4,-12(fp)
    dc14:	e17ffe15 	stw	r5,-8(fp)
    dc18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dc1c:	e0bffd17 	ldw	r2,-12(fp)
    dc20:	10000816 	blt	r2,zero,dc44 <write+0x44>
    dc24:	01400304 	movi	r5,12
    dc28:	e13ffd17 	ldw	r4,-12(fp)
    dc2c:	000aaa00 	call	aaa0 <__mulsi3>
    dc30:	1007883a 	mov	r3,r2
    dc34:	00800074 	movhi	r2,1
    dc38:	1081bb04 	addi	r2,r2,1772
    dc3c:	1885883a 	add	r2,r3,r2
    dc40:	00000106 	br	dc48 <write+0x48>
    dc44:	0005883a 	mov	r2,zero
    dc48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dc4c:	e0bffb17 	ldw	r2,-20(fp)
    dc50:	10002126 	beq	r2,zero,dcd8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dc54:	e0bffb17 	ldw	r2,-20(fp)
    dc58:	10800217 	ldw	r2,8(r2)
    dc5c:	108000cc 	andi	r2,r2,3
    dc60:	10001826 	beq	r2,zero,dcc4 <write+0xc4>
    dc64:	e0bffb17 	ldw	r2,-20(fp)
    dc68:	10800017 	ldw	r2,0(r2)
    dc6c:	10800617 	ldw	r2,24(r2)
    dc70:	10001426 	beq	r2,zero,dcc4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dc74:	e0bffb17 	ldw	r2,-20(fp)
    dc78:	10800017 	ldw	r2,0(r2)
    dc7c:	10800617 	ldw	r2,24(r2)
    dc80:	e0ffff17 	ldw	r3,-4(fp)
    dc84:	180d883a 	mov	r6,r3
    dc88:	e17ffe17 	ldw	r5,-8(fp)
    dc8c:	e13ffb17 	ldw	r4,-20(fp)
    dc90:	103ee83a 	callr	r2
    dc94:	e0bffc15 	stw	r2,-16(fp)
    dc98:	e0bffc17 	ldw	r2,-16(fp)
    dc9c:	1000070e 	bge	r2,zero,dcbc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    dca0:	000dbc40 	call	dbc4 <alt_get_errno>
    dca4:	1007883a 	mov	r3,r2
    dca8:	e0bffc17 	ldw	r2,-16(fp)
    dcac:	0085c83a 	sub	r2,zero,r2
    dcb0:	18800015 	stw	r2,0(r3)
        return -1;
    dcb4:	00bfffc4 	movi	r2,-1
    dcb8:	00000c06 	br	dcec <write+0xec>
      }
      return rval;
    dcbc:	e0bffc17 	ldw	r2,-16(fp)
    dcc0:	00000a06 	br	dcec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dcc4:	000dbc40 	call	dbc4 <alt_get_errno>
    dcc8:	1007883a 	mov	r3,r2
    dccc:	00800344 	movi	r2,13
    dcd0:	18800015 	stw	r2,0(r3)
    dcd4:	00000406 	br	dce8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dcd8:	000dbc40 	call	dbc4 <alt_get_errno>
    dcdc:	1007883a 	mov	r3,r2
    dce0:	00801444 	movi	r2,81
    dce4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dce8:	00bfffc4 	movi	r2,-1
}
    dcec:	e037883a 	mov	sp,fp
    dcf0:	dfc00117 	ldw	ra,4(sp)
    dcf4:	df000017 	ldw	fp,0(sp)
    dcf8:	dec00204 	addi	sp,sp,8
    dcfc:	f800283a 	ret

0000dd00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    dd00:	defffd04 	addi	sp,sp,-12
    dd04:	dfc00215 	stw	ra,8(sp)
    dd08:	df000115 	stw	fp,4(sp)
    dd0c:	df000104 	addi	fp,sp,4
    dd10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dd14:	d1600a04 	addi	r5,gp,-32728
    dd18:	e13fff17 	ldw	r4,-4(fp)
    dd1c:	000eab00 	call	eab0 <alt_dev_llist_insert>
}
    dd20:	e037883a 	mov	sp,fp
    dd24:	dfc00117 	ldw	ra,4(sp)
    dd28:	df000017 	ldw	fp,0(sp)
    dd2c:	dec00204 	addi	sp,sp,8
    dd30:	f800283a 	ret

0000dd34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dd34:	defffd04 	addi	sp,sp,-12
    dd38:	dfc00215 	stw	ra,8(sp)
    dd3c:	df000115 	stw	fp,4(sp)
    dd40:	df000104 	addi	fp,sp,4
    dd44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    dd48:	000f45c0 	call	f45c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dd4c:	00800044 	movi	r2,1
    dd50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dd54:	0001883a 	nop
    dd58:	e037883a 	mov	sp,fp
    dd5c:	dfc00117 	ldw	ra,4(sp)
    dd60:	df000017 	ldw	fp,0(sp)
    dd64:	dec00204 	addi	sp,sp,8
    dd68:	f800283a 	ret

0000dd6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    dd6c:	defffe04 	addi	sp,sp,-8
    dd70:	dfc00115 	stw	ra,4(sp)
    dd74:	df000015 	stw	fp,0(sp)
    dd78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    dd7c:	01c0fa04 	movi	r7,1000
    dd80:	01800044 	movi	r6,1
    dd84:	000b883a 	mov	r5,zero
    dd88:	01020034 	movhi	r4,2048
    dd8c:	21140804 	addi	r4,r4,20512
    dd90:	000e8ac0 	call	e8ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    dd94:	000d883a 	mov	r6,zero
    dd98:	000b883a 	mov	r5,zero
    dd9c:	01000074 	movhi	r4,1
    dda0:	21022504 	addi	r4,r4,2196
    dda4:	000df300 	call	df30 <altera_avalon_jtag_uart_init>
    dda8:	01000074 	movhi	r4,1
    ddac:	21021b04 	addi	r4,r4,2156
    ddb0:	000dd000 	call	dd00 <alt_dev_reg>
}
    ddb4:	0001883a 	nop
    ddb8:	e037883a 	mov	sp,fp
    ddbc:	dfc00117 	ldw	ra,4(sp)
    ddc0:	df000017 	ldw	fp,0(sp)
    ddc4:	dec00204 	addi	sp,sp,8
    ddc8:	f800283a 	ret

0000ddcc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ddcc:	defffa04 	addi	sp,sp,-24
    ddd0:	dfc00515 	stw	ra,20(sp)
    ddd4:	df000415 	stw	fp,16(sp)
    ddd8:	df000404 	addi	fp,sp,16
    dddc:	e13ffd15 	stw	r4,-12(fp)
    dde0:	e17ffe15 	stw	r5,-8(fp)
    dde4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dde8:	e0bffd17 	ldw	r2,-12(fp)
    ddec:	10800017 	ldw	r2,0(r2)
    ddf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ddf4:	e0bffc17 	ldw	r2,-16(fp)
    ddf8:	10c00a04 	addi	r3,r2,40
    ddfc:	e0bffd17 	ldw	r2,-12(fp)
    de00:	10800217 	ldw	r2,8(r2)
    de04:	100f883a 	mov	r7,r2
    de08:	e1bfff17 	ldw	r6,-4(fp)
    de0c:	e17ffe17 	ldw	r5,-8(fp)
    de10:	1809883a 	mov	r4,r3
    de14:	000e3f40 	call	e3f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    de18:	e037883a 	mov	sp,fp
    de1c:	dfc00117 	ldw	ra,4(sp)
    de20:	df000017 	ldw	fp,0(sp)
    de24:	dec00204 	addi	sp,sp,8
    de28:	f800283a 	ret

0000de2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    de2c:	defffa04 	addi	sp,sp,-24
    de30:	dfc00515 	stw	ra,20(sp)
    de34:	df000415 	stw	fp,16(sp)
    de38:	df000404 	addi	fp,sp,16
    de3c:	e13ffd15 	stw	r4,-12(fp)
    de40:	e17ffe15 	stw	r5,-8(fp)
    de44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    de48:	e0bffd17 	ldw	r2,-12(fp)
    de4c:	10800017 	ldw	r2,0(r2)
    de50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    de54:	e0bffc17 	ldw	r2,-16(fp)
    de58:	10c00a04 	addi	r3,r2,40
    de5c:	e0bffd17 	ldw	r2,-12(fp)
    de60:	10800217 	ldw	r2,8(r2)
    de64:	100f883a 	mov	r7,r2
    de68:	e1bfff17 	ldw	r6,-4(fp)
    de6c:	e17ffe17 	ldw	r5,-8(fp)
    de70:	1809883a 	mov	r4,r3
    de74:	000e6100 	call	e610 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    de78:	e037883a 	mov	sp,fp
    de7c:	dfc00117 	ldw	ra,4(sp)
    de80:	df000017 	ldw	fp,0(sp)
    de84:	dec00204 	addi	sp,sp,8
    de88:	f800283a 	ret

0000de8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    de8c:	defffc04 	addi	sp,sp,-16
    de90:	dfc00315 	stw	ra,12(sp)
    de94:	df000215 	stw	fp,8(sp)
    de98:	df000204 	addi	fp,sp,8
    de9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dea0:	e0bfff17 	ldw	r2,-4(fp)
    dea4:	10800017 	ldw	r2,0(r2)
    dea8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    deac:	e0bffe17 	ldw	r2,-8(fp)
    deb0:	10c00a04 	addi	r3,r2,40
    deb4:	e0bfff17 	ldw	r2,-4(fp)
    deb8:	10800217 	ldw	r2,8(r2)
    debc:	100b883a 	mov	r5,r2
    dec0:	1809883a 	mov	r4,r3
    dec4:	000e29c0 	call	e29c <altera_avalon_jtag_uart_close>
}
    dec8:	e037883a 	mov	sp,fp
    decc:	dfc00117 	ldw	ra,4(sp)
    ded0:	df000017 	ldw	fp,0(sp)
    ded4:	dec00204 	addi	sp,sp,8
    ded8:	f800283a 	ret

0000dedc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    dedc:	defffa04 	addi	sp,sp,-24
    dee0:	dfc00515 	stw	ra,20(sp)
    dee4:	df000415 	stw	fp,16(sp)
    dee8:	df000404 	addi	fp,sp,16
    deec:	e13ffd15 	stw	r4,-12(fp)
    def0:	e17ffe15 	stw	r5,-8(fp)
    def4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    def8:	e0bffd17 	ldw	r2,-12(fp)
    defc:	10800017 	ldw	r2,0(r2)
    df00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	10800a04 	addi	r2,r2,40
    df0c:	e1bfff17 	ldw	r6,-4(fp)
    df10:	e17ffe17 	ldw	r5,-8(fp)
    df14:	1009883a 	mov	r4,r2
    df18:	000e3040 	call	e304 <altera_avalon_jtag_uart_ioctl>
}
    df1c:	e037883a 	mov	sp,fp
    df20:	dfc00117 	ldw	ra,4(sp)
    df24:	df000017 	ldw	fp,0(sp)
    df28:	dec00204 	addi	sp,sp,8
    df2c:	f800283a 	ret

0000df30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    df30:	defffa04 	addi	sp,sp,-24
    df34:	dfc00515 	stw	ra,20(sp)
    df38:	df000415 	stw	fp,16(sp)
    df3c:	df000404 	addi	fp,sp,16
    df40:	e13ffd15 	stw	r4,-12(fp)
    df44:	e17ffe15 	stw	r5,-8(fp)
    df48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    df4c:	e0bffd17 	ldw	r2,-12(fp)
    df50:	00c00044 	movi	r3,1
    df54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    df58:	e0bffd17 	ldw	r2,-12(fp)
    df5c:	10800017 	ldw	r2,0(r2)
    df60:	10800104 	addi	r2,r2,4
    df64:	1007883a 	mov	r3,r2
    df68:	e0bffd17 	ldw	r2,-12(fp)
    df6c:	10800817 	ldw	r2,32(r2)
    df70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    df74:	e0bffe17 	ldw	r2,-8(fp)
    df78:	e0ffff17 	ldw	r3,-4(fp)
    df7c:	d8000015 	stw	zero,0(sp)
    df80:	e1fffd17 	ldw	r7,-12(fp)
    df84:	01800074 	movhi	r6,1
    df88:	31b7fc04 	addi	r6,r6,-8208
    df8c:	180b883a 	mov	r5,r3
    df90:	1009883a 	mov	r4,r2
    df94:	000ec340 	call	ec34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    df98:	e0bffd17 	ldw	r2,-12(fp)
    df9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    dfa0:	e0bffd17 	ldw	r2,-12(fp)
    dfa4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    dfa8:	d0e6d817 	ldw	r3,-25760(gp)
    dfac:	e1fffd17 	ldw	r7,-12(fp)
    dfb0:	01800074 	movhi	r6,1
    dfb4:	31b87f04 	addi	r6,r6,-7684
    dfb8:	180b883a 	mov	r5,r3
    dfbc:	1009883a 	mov	r4,r2
    dfc0:	000e9280 	call	e928 <alt_alarm_start>
    dfc4:	1000040e 	bge	r2,zero,dfd8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    dfc8:	e0fffd17 	ldw	r3,-12(fp)
    dfcc:	00a00034 	movhi	r2,32768
    dfd0:	10bfffc4 	addi	r2,r2,-1
    dfd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    dfd8:	0001883a 	nop
    dfdc:	e037883a 	mov	sp,fp
    dfe0:	dfc00117 	ldw	ra,4(sp)
    dfe4:	df000017 	ldw	fp,0(sp)
    dfe8:	dec00204 	addi	sp,sp,8
    dfec:	f800283a 	ret

0000dff0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dff0:	defff804 	addi	sp,sp,-32
    dff4:	df000715 	stw	fp,28(sp)
    dff8:	df000704 	addi	fp,sp,28
    dffc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e000:	e0bfff17 	ldw	r2,-4(fp)
    e004:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e008:	e0bffb17 	ldw	r2,-20(fp)
    e00c:	10800017 	ldw	r2,0(r2)
    e010:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e014:	e0bffc17 	ldw	r2,-16(fp)
    e018:	10800104 	addi	r2,r2,4
    e01c:	10800037 	ldwio	r2,0(r2)
    e020:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e024:	e0bffd17 	ldw	r2,-12(fp)
    e028:	1080c00c 	andi	r2,r2,768
    e02c:	10006d26 	beq	r2,zero,e1e4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e030:	e0bffd17 	ldw	r2,-12(fp)
    e034:	1080400c 	andi	r2,r2,256
    e038:	10003526 	beq	r2,zero,e110 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e03c:	00800074 	movhi	r2,1
    e040:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e044:	e0bffb17 	ldw	r2,-20(fp)
    e048:	10800a17 	ldw	r2,40(r2)
    e04c:	10800044 	addi	r2,r2,1
    e050:	1081ffcc 	andi	r2,r2,2047
    e054:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e058:	e0bffb17 	ldw	r2,-20(fp)
    e05c:	10c00b17 	ldw	r3,44(r2)
    e060:	e0bffe17 	ldw	r2,-8(fp)
    e064:	18801526 	beq	r3,r2,e0bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10800037 	ldwio	r2,0(r2)
    e070:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e074:	e0bff917 	ldw	r2,-28(fp)
    e078:	10a0000c 	andi	r2,r2,32768
    e07c:	10001126 	beq	r2,zero,e0c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e080:	e0bffb17 	ldw	r2,-20(fp)
    e084:	10800a17 	ldw	r2,40(r2)
    e088:	e0fff917 	ldw	r3,-28(fp)
    e08c:	1809883a 	mov	r4,r3
    e090:	e0fffb17 	ldw	r3,-20(fp)
    e094:	1885883a 	add	r2,r3,r2
    e098:	10800e04 	addi	r2,r2,56
    e09c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0a0:	e0bffb17 	ldw	r2,-20(fp)
    e0a4:	10800a17 	ldw	r2,40(r2)
    e0a8:	10800044 	addi	r2,r2,1
    e0ac:	10c1ffcc 	andi	r3,r2,2047
    e0b0:	e0bffb17 	ldw	r2,-20(fp)
    e0b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e0b8:	003fe206 	br	e044 <__alt_exception_stack_pointer+0xf800e044>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e0bc:	0001883a 	nop
    e0c0:	00000106 	br	e0c8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e0c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e0c8:	e0bff917 	ldw	r2,-28(fp)
    e0cc:	10bfffec 	andhi	r2,r2,65535
    e0d0:	10000f26 	beq	r2,zero,e110 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e0d4:	e0bffb17 	ldw	r2,-20(fp)
    e0d8:	10c00817 	ldw	r3,32(r2)
    e0dc:	00bfff84 	movi	r2,-2
    e0e0:	1886703a 	and	r3,r3,r2
    e0e4:	e0bffb17 	ldw	r2,-20(fp)
    e0e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e0ec:	e0bffc17 	ldw	r2,-16(fp)
    e0f0:	10800104 	addi	r2,r2,4
    e0f4:	1007883a 	mov	r3,r2
    e0f8:	e0bffb17 	ldw	r2,-20(fp)
    e0fc:	10800817 	ldw	r2,32(r2)
    e100:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e104:	e0bffc17 	ldw	r2,-16(fp)
    e108:	10800104 	addi	r2,r2,4
    e10c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e110:	e0bffd17 	ldw	r2,-12(fp)
    e114:	1080800c 	andi	r2,r2,512
    e118:	103fbe26 	beq	r2,zero,e014 <__alt_exception_stack_pointer+0xf800e014>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e11c:	e0bffd17 	ldw	r2,-12(fp)
    e120:	1004d43a 	srli	r2,r2,16
    e124:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e128:	00001406 	br	e17c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e12c:	e0bffc17 	ldw	r2,-16(fp)
    e130:	e0fffb17 	ldw	r3,-20(fp)
    e134:	18c00d17 	ldw	r3,52(r3)
    e138:	e13ffb17 	ldw	r4,-20(fp)
    e13c:	20c7883a 	add	r3,r4,r3
    e140:	18c20e04 	addi	r3,r3,2104
    e144:	18c00003 	ldbu	r3,0(r3)
    e148:	18c03fcc 	andi	r3,r3,255
    e14c:	18c0201c 	xori	r3,r3,128
    e150:	18ffe004 	addi	r3,r3,-128
    e154:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e158:	e0bffb17 	ldw	r2,-20(fp)
    e15c:	10800d17 	ldw	r2,52(r2)
    e160:	10800044 	addi	r2,r2,1
    e164:	10c1ffcc 	andi	r3,r2,2047
    e168:	e0bffb17 	ldw	r2,-20(fp)
    e16c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e170:	e0bffa17 	ldw	r2,-24(fp)
    e174:	10bfffc4 	addi	r2,r2,-1
    e178:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e17c:	e0bffa17 	ldw	r2,-24(fp)
    e180:	10000526 	beq	r2,zero,e198 <altera_avalon_jtag_uart_irq+0x1a8>
    e184:	e0bffb17 	ldw	r2,-20(fp)
    e188:	10c00d17 	ldw	r3,52(r2)
    e18c:	e0bffb17 	ldw	r2,-20(fp)
    e190:	10800c17 	ldw	r2,48(r2)
    e194:	18bfe51e 	bne	r3,r2,e12c <__alt_exception_stack_pointer+0xf800e12c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e198:	e0bffa17 	ldw	r2,-24(fp)
    e19c:	103f9d26 	beq	r2,zero,e014 <__alt_exception_stack_pointer+0xf800e014>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e1a0:	e0bffb17 	ldw	r2,-20(fp)
    e1a4:	10c00817 	ldw	r3,32(r2)
    e1a8:	00bfff44 	movi	r2,-3
    e1ac:	1886703a 	and	r3,r3,r2
    e1b0:	e0bffb17 	ldw	r2,-20(fp)
    e1b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e1b8:	e0bffb17 	ldw	r2,-20(fp)
    e1bc:	10800017 	ldw	r2,0(r2)
    e1c0:	10800104 	addi	r2,r2,4
    e1c4:	1007883a 	mov	r3,r2
    e1c8:	e0bffb17 	ldw	r2,-20(fp)
    e1cc:	10800817 	ldw	r2,32(r2)
    e1d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e1d4:	e0bffc17 	ldw	r2,-16(fp)
    e1d8:	10800104 	addi	r2,r2,4
    e1dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e1e0:	003f8c06 	br	e014 <__alt_exception_stack_pointer+0xf800e014>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e1e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e1e8:	0001883a 	nop
    e1ec:	e037883a 	mov	sp,fp
    e1f0:	df000017 	ldw	fp,0(sp)
    e1f4:	dec00104 	addi	sp,sp,4
    e1f8:	f800283a 	ret

0000e1fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e1fc:	defff804 	addi	sp,sp,-32
    e200:	df000715 	stw	fp,28(sp)
    e204:	df000704 	addi	fp,sp,28
    e208:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e20c:	e0bffb17 	ldw	r2,-20(fp)
    e210:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e214:	e0bff917 	ldw	r2,-28(fp)
    e218:	10800017 	ldw	r2,0(r2)
    e21c:	10800104 	addi	r2,r2,4
    e220:	10800037 	ldwio	r2,0(r2)
    e224:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e228:	e0bffa17 	ldw	r2,-24(fp)
    e22c:	1081000c 	andi	r2,r2,1024
    e230:	10000b26 	beq	r2,zero,e260 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e234:	e0bff917 	ldw	r2,-28(fp)
    e238:	10800017 	ldw	r2,0(r2)
    e23c:	10800104 	addi	r2,r2,4
    e240:	1007883a 	mov	r3,r2
    e244:	e0bff917 	ldw	r2,-28(fp)
    e248:	10800817 	ldw	r2,32(r2)
    e24c:	10810014 	ori	r2,r2,1024
    e250:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e254:	e0bff917 	ldw	r2,-28(fp)
    e258:	10000915 	stw	zero,36(r2)
    e25c:	00000a06 	br	e288 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e260:	e0bff917 	ldw	r2,-28(fp)
    e264:	10c00917 	ldw	r3,36(r2)
    e268:	00a00034 	movhi	r2,32768
    e26c:	10bfff04 	addi	r2,r2,-4
    e270:	10c00536 	bltu	r2,r3,e288 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e274:	e0bff917 	ldw	r2,-28(fp)
    e278:	10800917 	ldw	r2,36(r2)
    e27c:	10c00044 	addi	r3,r2,1
    e280:	e0bff917 	ldw	r2,-28(fp)
    e284:	10c00915 	stw	r3,36(r2)
    e288:	d0a6d817 	ldw	r2,-25760(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e28c:	e037883a 	mov	sp,fp
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00104 	addi	sp,sp,4
    e298:	f800283a 	ret

0000e29c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e29c:	defffd04 	addi	sp,sp,-12
    e2a0:	df000215 	stw	fp,8(sp)
    e2a4:	df000204 	addi	fp,sp,8
    e2a8:	e13ffe15 	stw	r4,-8(fp)
    e2ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e2b0:	00000506 	br	e2c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e2b4:	e0bfff17 	ldw	r2,-4(fp)
    e2b8:	1090000c 	andi	r2,r2,16384
    e2bc:	10000226 	beq	r2,zero,e2c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e2c0:	00bffd44 	movi	r2,-11
    e2c4:	00000b06 	br	e2f4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e2c8:	e0bffe17 	ldw	r2,-8(fp)
    e2cc:	10c00d17 	ldw	r3,52(r2)
    e2d0:	e0bffe17 	ldw	r2,-8(fp)
    e2d4:	10800c17 	ldw	r2,48(r2)
    e2d8:	18800526 	beq	r3,r2,e2f0 <altera_avalon_jtag_uart_close+0x54>
    e2dc:	e0bffe17 	ldw	r2,-8(fp)
    e2e0:	10c00917 	ldw	r3,36(r2)
    e2e4:	e0bffe17 	ldw	r2,-8(fp)
    e2e8:	10800117 	ldw	r2,4(r2)
    e2ec:	18bff136 	bltu	r3,r2,e2b4 <__alt_exception_stack_pointer+0xf800e2b4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e2f0:	0005883a 	mov	r2,zero
}
    e2f4:	e037883a 	mov	sp,fp
    e2f8:	df000017 	ldw	fp,0(sp)
    e2fc:	dec00104 	addi	sp,sp,4
    e300:	f800283a 	ret

0000e304 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e304:	defffa04 	addi	sp,sp,-24
    e308:	df000515 	stw	fp,20(sp)
    e30c:	df000504 	addi	fp,sp,20
    e310:	e13ffd15 	stw	r4,-12(fp)
    e314:	e17ffe15 	stw	r5,-8(fp)
    e318:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e31c:	00bff9c4 	movi	r2,-25
    e320:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e324:	e0bffe17 	ldw	r2,-8(fp)
    e328:	10da8060 	cmpeqi	r3,r2,27137
    e32c:	1800031e 	bne	r3,zero,e33c <altera_avalon_jtag_uart_ioctl+0x38>
    e330:	109a80a0 	cmpeqi	r2,r2,27138
    e334:	1000181e 	bne	r2,zero,e398 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e338:	00002906 	br	e3e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e33c:	e0bffd17 	ldw	r2,-12(fp)
    e340:	10c00117 	ldw	r3,4(r2)
    e344:	00a00034 	movhi	r2,32768
    e348:	10bfffc4 	addi	r2,r2,-1
    e34c:	18802126 	beq	r3,r2,e3d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e350:	e0bfff17 	ldw	r2,-4(fp)
    e354:	10800017 	ldw	r2,0(r2)
    e358:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e35c:	e0bffc17 	ldw	r2,-16(fp)
    e360:	10800090 	cmplti	r2,r2,2
    e364:	1000061e 	bne	r2,zero,e380 <altera_avalon_jtag_uart_ioctl+0x7c>
    e368:	e0fffc17 	ldw	r3,-16(fp)
    e36c:	00a00034 	movhi	r2,32768
    e370:	10bfffc4 	addi	r2,r2,-1
    e374:	18800226 	beq	r3,r2,e380 <altera_avalon_jtag_uart_ioctl+0x7c>
    e378:	e0bffc17 	ldw	r2,-16(fp)
    e37c:	00000206 	br	e388 <altera_avalon_jtag_uart_ioctl+0x84>
    e380:	00a00034 	movhi	r2,32768
    e384:	10bfff84 	addi	r2,r2,-2
    e388:	e0fffd17 	ldw	r3,-12(fp)
    e38c:	18800115 	stw	r2,4(r3)
      rc = 0;
    e390:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e394:	00000f06 	br	e3d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e398:	e0bffd17 	ldw	r2,-12(fp)
    e39c:	10c00117 	ldw	r3,4(r2)
    e3a0:	00a00034 	movhi	r2,32768
    e3a4:	10bfffc4 	addi	r2,r2,-1
    e3a8:	18800c26 	beq	r3,r2,e3dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e3ac:	e0bffd17 	ldw	r2,-12(fp)
    e3b0:	10c00917 	ldw	r3,36(r2)
    e3b4:	e0bffd17 	ldw	r2,-12(fp)
    e3b8:	10800117 	ldw	r2,4(r2)
    e3bc:	1885803a 	cmpltu	r2,r3,r2
    e3c0:	10c03fcc 	andi	r3,r2,255
    e3c4:	e0bfff17 	ldw	r2,-4(fp)
    e3c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e3cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e3d0:	00000206 	br	e3dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e3d4:	0001883a 	nop
    e3d8:	00000106 	br	e3e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e3dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e3e0:	e0bffb17 	ldw	r2,-20(fp)
}
    e3e4:	e037883a 	mov	sp,fp
    e3e8:	df000017 	ldw	fp,0(sp)
    e3ec:	dec00104 	addi	sp,sp,4
    e3f0:	f800283a 	ret

0000e3f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e3f4:	defff304 	addi	sp,sp,-52
    e3f8:	dfc00c15 	stw	ra,48(sp)
    e3fc:	df000b15 	stw	fp,44(sp)
    e400:	df000b04 	addi	fp,sp,44
    e404:	e13ffc15 	stw	r4,-16(fp)
    e408:	e17ffd15 	stw	r5,-12(fp)
    e40c:	e1bffe15 	stw	r6,-8(fp)
    e410:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e414:	e0bffd17 	ldw	r2,-12(fp)
    e418:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e41c:	00004706 	br	e53c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e420:	e0bffc17 	ldw	r2,-16(fp)
    e424:	10800a17 	ldw	r2,40(r2)
    e428:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e42c:	e0bffc17 	ldw	r2,-16(fp)
    e430:	10800b17 	ldw	r2,44(r2)
    e434:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e438:	e0fff717 	ldw	r3,-36(fp)
    e43c:	e0bff817 	ldw	r2,-32(fp)
    e440:	18800536 	bltu	r3,r2,e458 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e444:	e0fff717 	ldw	r3,-36(fp)
    e448:	e0bff817 	ldw	r2,-32(fp)
    e44c:	1885c83a 	sub	r2,r3,r2
    e450:	e0bff615 	stw	r2,-40(fp)
    e454:	00000406 	br	e468 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e458:	00c20004 	movi	r3,2048
    e45c:	e0bff817 	ldw	r2,-32(fp)
    e460:	1885c83a 	sub	r2,r3,r2
    e464:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e468:	e0bff617 	ldw	r2,-40(fp)
    e46c:	10001e26 	beq	r2,zero,e4e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e470:	e0fffe17 	ldw	r3,-8(fp)
    e474:	e0bff617 	ldw	r2,-40(fp)
    e478:	1880022e 	bgeu	r3,r2,e484 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e47c:	e0bffe17 	ldw	r2,-8(fp)
    e480:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e484:	e0bffc17 	ldw	r2,-16(fp)
    e488:	10c00e04 	addi	r3,r2,56
    e48c:	e0bff817 	ldw	r2,-32(fp)
    e490:	1885883a 	add	r2,r3,r2
    e494:	e1bff617 	ldw	r6,-40(fp)
    e498:	100b883a 	mov	r5,r2
    e49c:	e13ff517 	ldw	r4,-44(fp)
    e4a0:	0005b140 	call	5b14 <memcpy>
      ptr   += n;
    e4a4:	e0fff517 	ldw	r3,-44(fp)
    e4a8:	e0bff617 	ldw	r2,-40(fp)
    e4ac:	1885883a 	add	r2,r3,r2
    e4b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e4b4:	e0fffe17 	ldw	r3,-8(fp)
    e4b8:	e0bff617 	ldw	r2,-40(fp)
    e4bc:	1885c83a 	sub	r2,r3,r2
    e4c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e4c4:	e0fff817 	ldw	r3,-32(fp)
    e4c8:	e0bff617 	ldw	r2,-40(fp)
    e4cc:	1885883a 	add	r2,r3,r2
    e4d0:	10c1ffcc 	andi	r3,r2,2047
    e4d4:	e0bffc17 	ldw	r2,-16(fp)
    e4d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e4dc:	e0bffe17 	ldw	r2,-8(fp)
    e4e0:	00bfcf16 	blt	zero,r2,e420 <__alt_exception_stack_pointer+0xf800e420>
    e4e4:	00000106 	br	e4ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e4e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e4ec:	e0fff517 	ldw	r3,-44(fp)
    e4f0:	e0bffd17 	ldw	r2,-12(fp)
    e4f4:	1880141e 	bne	r3,r2,e548 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e4f8:	e0bfff17 	ldw	r2,-4(fp)
    e4fc:	1090000c 	andi	r2,r2,16384
    e500:	1000131e 	bne	r2,zero,e550 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e504:	0001883a 	nop
    e508:	e0bffc17 	ldw	r2,-16(fp)
    e50c:	10c00a17 	ldw	r3,40(r2)
    e510:	e0bff717 	ldw	r2,-36(fp)
    e514:	1880051e 	bne	r3,r2,e52c <altera_avalon_jtag_uart_read+0x138>
    e518:	e0bffc17 	ldw	r2,-16(fp)
    e51c:	10c00917 	ldw	r3,36(r2)
    e520:	e0bffc17 	ldw	r2,-16(fp)
    e524:	10800117 	ldw	r2,4(r2)
    e528:	18bff736 	bltu	r3,r2,e508 <__alt_exception_stack_pointer+0xf800e508>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e52c:	e0bffc17 	ldw	r2,-16(fp)
    e530:	10c00a17 	ldw	r3,40(r2)
    e534:	e0bff717 	ldw	r2,-36(fp)
    e538:	18800726 	beq	r3,r2,e558 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e53c:	e0bffe17 	ldw	r2,-8(fp)
    e540:	00bfb716 	blt	zero,r2,e420 <__alt_exception_stack_pointer+0xf800e420>
    e544:	00000506 	br	e55c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e548:	0001883a 	nop
    e54c:	00000306 	br	e55c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e550:	0001883a 	nop
    e554:	00000106 	br	e55c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e558:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e55c:	e0fff517 	ldw	r3,-44(fp)
    e560:	e0bffd17 	ldw	r2,-12(fp)
    e564:	18801826 	beq	r3,r2,e5c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e568:	0005303a 	rdctl	r2,status
    e56c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e570:	e0fffb17 	ldw	r3,-20(fp)
    e574:	00bfff84 	movi	r2,-2
    e578:	1884703a 	and	r2,r3,r2
    e57c:	1001703a 	wrctl	status,r2
  
  return context;
    e580:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e584:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e588:	e0bffc17 	ldw	r2,-16(fp)
    e58c:	10800817 	ldw	r2,32(r2)
    e590:	10c00054 	ori	r3,r2,1
    e594:	e0bffc17 	ldw	r2,-16(fp)
    e598:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e59c:	e0bffc17 	ldw	r2,-16(fp)
    e5a0:	10800017 	ldw	r2,0(r2)
    e5a4:	10800104 	addi	r2,r2,4
    e5a8:	1007883a 	mov	r3,r2
    e5ac:	e0bffc17 	ldw	r2,-16(fp)
    e5b0:	10800817 	ldw	r2,32(r2)
    e5b4:	18800035 	stwio	r2,0(r3)
    e5b8:	e0bffa17 	ldw	r2,-24(fp)
    e5bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5c0:	e0bff917 	ldw	r2,-28(fp)
    e5c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e5c8:	e0fff517 	ldw	r3,-44(fp)
    e5cc:	e0bffd17 	ldw	r2,-12(fp)
    e5d0:	18800426 	beq	r3,r2,e5e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e5d4:	e0fff517 	ldw	r3,-44(fp)
    e5d8:	e0bffd17 	ldw	r2,-12(fp)
    e5dc:	1885c83a 	sub	r2,r3,r2
    e5e0:	00000606 	br	e5fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	1090000c 	andi	r2,r2,16384
    e5ec:	10000226 	beq	r2,zero,e5f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e5f0:	00bffd44 	movi	r2,-11
    e5f4:	00000106 	br	e5fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e5f8:	00bffec4 	movi	r2,-5
}
    e5fc:	e037883a 	mov	sp,fp
    e600:	dfc00117 	ldw	ra,4(sp)
    e604:	df000017 	ldw	fp,0(sp)
    e608:	dec00204 	addi	sp,sp,8
    e60c:	f800283a 	ret

0000e610 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e610:	defff304 	addi	sp,sp,-52
    e614:	dfc00c15 	stw	ra,48(sp)
    e618:	df000b15 	stw	fp,44(sp)
    e61c:	df000b04 	addi	fp,sp,44
    e620:	e13ffc15 	stw	r4,-16(fp)
    e624:	e17ffd15 	stw	r5,-12(fp)
    e628:	e1bffe15 	stw	r6,-8(fp)
    e62c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e630:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e634:	e0bffd17 	ldw	r2,-12(fp)
    e638:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e63c:	00003706 	br	e71c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e640:	e0bffc17 	ldw	r2,-16(fp)
    e644:	10800c17 	ldw	r2,48(r2)
    e648:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e64c:	e0bffc17 	ldw	r2,-16(fp)
    e650:	10800d17 	ldw	r2,52(r2)
    e654:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e658:	e0fff917 	ldw	r3,-28(fp)
    e65c:	e0bff517 	ldw	r2,-44(fp)
    e660:	1880062e 	bgeu	r3,r2,e67c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e664:	e0fff517 	ldw	r3,-44(fp)
    e668:	e0bff917 	ldw	r2,-28(fp)
    e66c:	1885c83a 	sub	r2,r3,r2
    e670:	10bfffc4 	addi	r2,r2,-1
    e674:	e0bff615 	stw	r2,-40(fp)
    e678:	00000b06 	br	e6a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e67c:	e0bff517 	ldw	r2,-44(fp)
    e680:	10000526 	beq	r2,zero,e698 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e684:	00c20004 	movi	r3,2048
    e688:	e0bff917 	ldw	r2,-28(fp)
    e68c:	1885c83a 	sub	r2,r3,r2
    e690:	e0bff615 	stw	r2,-40(fp)
    e694:	00000406 	br	e6a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e698:	00c1ffc4 	movi	r3,2047
    e69c:	e0bff917 	ldw	r2,-28(fp)
    e6a0:	1885c83a 	sub	r2,r3,r2
    e6a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e6a8:	e0bff617 	ldw	r2,-40(fp)
    e6ac:	10001e26 	beq	r2,zero,e728 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e6b0:	e0fffe17 	ldw	r3,-8(fp)
    e6b4:	e0bff617 	ldw	r2,-40(fp)
    e6b8:	1880022e 	bgeu	r3,r2,e6c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e6bc:	e0bffe17 	ldw	r2,-8(fp)
    e6c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e6c4:	e0bffc17 	ldw	r2,-16(fp)
    e6c8:	10c20e04 	addi	r3,r2,2104
    e6cc:	e0bff917 	ldw	r2,-28(fp)
    e6d0:	1885883a 	add	r2,r3,r2
    e6d4:	e1bff617 	ldw	r6,-40(fp)
    e6d8:	e17ffd17 	ldw	r5,-12(fp)
    e6dc:	1009883a 	mov	r4,r2
    e6e0:	0005b140 	call	5b14 <memcpy>
      ptr   += n;
    e6e4:	e0fffd17 	ldw	r3,-12(fp)
    e6e8:	e0bff617 	ldw	r2,-40(fp)
    e6ec:	1885883a 	add	r2,r3,r2
    e6f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e6f4:	e0fffe17 	ldw	r3,-8(fp)
    e6f8:	e0bff617 	ldw	r2,-40(fp)
    e6fc:	1885c83a 	sub	r2,r3,r2
    e700:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e704:	e0fff917 	ldw	r3,-28(fp)
    e708:	e0bff617 	ldw	r2,-40(fp)
    e70c:	1885883a 	add	r2,r3,r2
    e710:	10c1ffcc 	andi	r3,r2,2047
    e714:	e0bffc17 	ldw	r2,-16(fp)
    e718:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e71c:	e0bffe17 	ldw	r2,-8(fp)
    e720:	00bfc716 	blt	zero,r2,e640 <__alt_exception_stack_pointer+0xf800e640>
    e724:	00000106 	br	e72c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e728:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e72c:	0005303a 	rdctl	r2,status
    e730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e734:	e0fffb17 	ldw	r3,-20(fp)
    e738:	00bfff84 	movi	r2,-2
    e73c:	1884703a 	and	r2,r3,r2
    e740:	1001703a 	wrctl	status,r2
  
  return context;
    e744:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e748:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e74c:	e0bffc17 	ldw	r2,-16(fp)
    e750:	10800817 	ldw	r2,32(r2)
    e754:	10c00094 	ori	r3,r2,2
    e758:	e0bffc17 	ldw	r2,-16(fp)
    e75c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e760:	e0bffc17 	ldw	r2,-16(fp)
    e764:	10800017 	ldw	r2,0(r2)
    e768:	10800104 	addi	r2,r2,4
    e76c:	1007883a 	mov	r3,r2
    e770:	e0bffc17 	ldw	r2,-16(fp)
    e774:	10800817 	ldw	r2,32(r2)
    e778:	18800035 	stwio	r2,0(r3)
    e77c:	e0bffa17 	ldw	r2,-24(fp)
    e780:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e784:	e0bff817 	ldw	r2,-32(fp)
    e788:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e78c:	e0bffe17 	ldw	r2,-8(fp)
    e790:	0080100e 	bge	zero,r2,e7d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e794:	e0bfff17 	ldw	r2,-4(fp)
    e798:	1090000c 	andi	r2,r2,16384
    e79c:	1000101e 	bne	r2,zero,e7e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e7a0:	0001883a 	nop
    e7a4:	e0bffc17 	ldw	r2,-16(fp)
    e7a8:	10c00d17 	ldw	r3,52(r2)
    e7ac:	e0bff517 	ldw	r2,-44(fp)
    e7b0:	1880051e 	bne	r3,r2,e7c8 <altera_avalon_jtag_uart_write+0x1b8>
    e7b4:	e0bffc17 	ldw	r2,-16(fp)
    e7b8:	10c00917 	ldw	r3,36(r2)
    e7bc:	e0bffc17 	ldw	r2,-16(fp)
    e7c0:	10800117 	ldw	r2,4(r2)
    e7c4:	18bff736 	bltu	r3,r2,e7a4 <__alt_exception_stack_pointer+0xf800e7a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e7c8:	e0bffc17 	ldw	r2,-16(fp)
    e7cc:	10800917 	ldw	r2,36(r2)
    e7d0:	1000051e 	bne	r2,zero,e7e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e7d4:	e0bffe17 	ldw	r2,-8(fp)
    e7d8:	00bfd016 	blt	zero,r2,e71c <__alt_exception_stack_pointer+0xf800e71c>
    e7dc:	00000306 	br	e7ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e7e0:	0001883a 	nop
    e7e4:	00000106 	br	e7ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e7e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e7ec:	e0fffd17 	ldw	r3,-12(fp)
    e7f0:	e0bff717 	ldw	r2,-36(fp)
    e7f4:	18800426 	beq	r3,r2,e808 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e7f8:	e0fffd17 	ldw	r3,-12(fp)
    e7fc:	e0bff717 	ldw	r2,-36(fp)
    e800:	1885c83a 	sub	r2,r3,r2
    e804:	00000606 	br	e820 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e808:	e0bfff17 	ldw	r2,-4(fp)
    e80c:	1090000c 	andi	r2,r2,16384
    e810:	10000226 	beq	r2,zero,e81c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e814:	00bffd44 	movi	r2,-11
    e818:	00000106 	br	e820 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e81c:	00bffec4 	movi	r2,-5
}
    e820:	e037883a 	mov	sp,fp
    e824:	dfc00117 	ldw	ra,4(sp)
    e828:	df000017 	ldw	fp,0(sp)
    e82c:	dec00204 	addi	sp,sp,8
    e830:	f800283a 	ret

0000e834 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e834:	defffa04 	addi	sp,sp,-24
    e838:	dfc00515 	stw	ra,20(sp)
    e83c:	df000415 	stw	fp,16(sp)
    e840:	df000404 	addi	fp,sp,16
    e844:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e848:	0007883a 	mov	r3,zero
    e84c:	e0bfff17 	ldw	r2,-4(fp)
    e850:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10800104 	addi	r2,r2,4
    e85c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e860:	0005303a 	rdctl	r2,status
    e864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e868:	e0fffd17 	ldw	r3,-12(fp)
    e86c:	00bfff84 	movi	r2,-2
    e870:	1884703a 	and	r2,r3,r2
    e874:	1001703a 	wrctl	status,r2
  
  return context;
    e878:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e87c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e880:	000f3540 	call	f354 <alt_tick>
    e884:	e0bffc17 	ldw	r2,-16(fp)
    e888:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e88c:	e0bffe17 	ldw	r2,-8(fp)
    e890:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e894:	0001883a 	nop
    e898:	e037883a 	mov	sp,fp
    e89c:	dfc00117 	ldw	ra,4(sp)
    e8a0:	df000017 	ldw	fp,0(sp)
    e8a4:	dec00204 	addi	sp,sp,8
    e8a8:	f800283a 	ret

0000e8ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e8ac:	defff804 	addi	sp,sp,-32
    e8b0:	dfc00715 	stw	ra,28(sp)
    e8b4:	df000615 	stw	fp,24(sp)
    e8b8:	df000604 	addi	fp,sp,24
    e8bc:	e13ffc15 	stw	r4,-16(fp)
    e8c0:	e17ffd15 	stw	r5,-12(fp)
    e8c4:	e1bffe15 	stw	r6,-8(fp)
    e8c8:	e1ffff15 	stw	r7,-4(fp)
    e8cc:	e0bfff17 	ldw	r2,-4(fp)
    e8d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e8d4:	d0a6d817 	ldw	r2,-25760(gp)
    e8d8:	1000021e 	bne	r2,zero,e8e4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e8dc:	e0bffb17 	ldw	r2,-20(fp)
    e8e0:	d0a6d815 	stw	r2,-25760(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e8e4:	e0bffc17 	ldw	r2,-16(fp)
    e8e8:	10800104 	addi	r2,r2,4
    e8ec:	00c001c4 	movi	r3,7
    e8f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e8f4:	d8000015 	stw	zero,0(sp)
    e8f8:	e1fffc17 	ldw	r7,-16(fp)
    e8fc:	01800074 	movhi	r6,1
    e900:	31ba0d04 	addi	r6,r6,-6092
    e904:	e17ffe17 	ldw	r5,-8(fp)
    e908:	e13ffd17 	ldw	r4,-12(fp)
    e90c:	000ec340 	call	ec34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e910:	0001883a 	nop
    e914:	e037883a 	mov	sp,fp
    e918:	dfc00117 	ldw	ra,4(sp)
    e91c:	df000017 	ldw	fp,0(sp)
    e920:	dec00204 	addi	sp,sp,8
    e924:	f800283a 	ret

0000e928 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e928:	defff504 	addi	sp,sp,-44
    e92c:	df000a15 	stw	fp,40(sp)
    e930:	df000a04 	addi	fp,sp,40
    e934:	e13ffc15 	stw	r4,-16(fp)
    e938:	e17ffd15 	stw	r5,-12(fp)
    e93c:	e1bffe15 	stw	r6,-8(fp)
    e940:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e944:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e948:	d0a6d817 	ldw	r2,-25760(gp)
  
  if (alt_ticks_per_second ())
    e94c:	10003c26 	beq	r2,zero,ea40 <alt_alarm_start+0x118>
  {
    if (alarm)
    e950:	e0bffc17 	ldw	r2,-16(fp)
    e954:	10003826 	beq	r2,zero,ea38 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e958:	e0bffc17 	ldw	r2,-16(fp)
    e95c:	e0fffe17 	ldw	r3,-8(fp)
    e960:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e964:	e0bffc17 	ldw	r2,-16(fp)
    e968:	e0ffff17 	ldw	r3,-4(fp)
    e96c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e970:	0005303a 	rdctl	r2,status
    e974:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e978:	e0fff917 	ldw	r3,-28(fp)
    e97c:	00bfff84 	movi	r2,-2
    e980:	1884703a 	and	r2,r3,r2
    e984:	1001703a 	wrctl	status,r2
  
  return context;
    e988:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e98c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e990:	d0a6d917 	ldw	r2,-25756(gp)
      
      current_nticks = alt_nticks();
    e994:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e998:	e0fffd17 	ldw	r3,-12(fp)
    e99c:	e0bff617 	ldw	r2,-40(fp)
    e9a0:	1885883a 	add	r2,r3,r2
    e9a4:	10c00044 	addi	r3,r2,1
    e9a8:	e0bffc17 	ldw	r2,-16(fp)
    e9ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e9b0:	e0bffc17 	ldw	r2,-16(fp)
    e9b4:	10c00217 	ldw	r3,8(r2)
    e9b8:	e0bff617 	ldw	r2,-40(fp)
    e9bc:	1880042e 	bgeu	r3,r2,e9d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e9c0:	e0bffc17 	ldw	r2,-16(fp)
    e9c4:	00c00044 	movi	r3,1
    e9c8:	10c00405 	stb	r3,16(r2)
    e9cc:	00000206 	br	e9d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e9d8:	e0bffc17 	ldw	r2,-16(fp)
    e9dc:	d0e00f04 	addi	r3,gp,-32708
    e9e0:	e0fffa15 	stw	r3,-24(fp)
    e9e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e9e8:	e0bffb17 	ldw	r2,-20(fp)
    e9ec:	e0fffa17 	ldw	r3,-24(fp)
    e9f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e9f4:	e0bffa17 	ldw	r2,-24(fp)
    e9f8:	10c00017 	ldw	r3,0(r2)
    e9fc:	e0bffb17 	ldw	r2,-20(fp)
    ea00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ea04:	e0bffa17 	ldw	r2,-24(fp)
    ea08:	10800017 	ldw	r2,0(r2)
    ea0c:	e0fffb17 	ldw	r3,-20(fp)
    ea10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ea14:	e0bffa17 	ldw	r2,-24(fp)
    ea18:	e0fffb17 	ldw	r3,-20(fp)
    ea1c:	10c00015 	stw	r3,0(r2)
    ea20:	e0bff817 	ldw	r2,-32(fp)
    ea24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea28:	e0bff717 	ldw	r2,-36(fp)
    ea2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ea30:	0005883a 	mov	r2,zero
    ea34:	00000306 	br	ea44 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    ea38:	00bffa84 	movi	r2,-22
    ea3c:	00000106 	br	ea44 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    ea40:	00bfde84 	movi	r2,-134
  }
}
    ea44:	e037883a 	mov	sp,fp
    ea48:	df000017 	ldw	fp,0(sp)
    ea4c:	dec00104 	addi	sp,sp,4
    ea50:	f800283a 	ret

0000ea54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ea54:	deffff04 	addi	sp,sp,-4
    ea58:	df000015 	stw	fp,0(sp)
    ea5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ea60:	0001883a 	nop
    ea64:	e037883a 	mov	sp,fp
    ea68:	df000017 	ldw	fp,0(sp)
    ea6c:	dec00104 	addi	sp,sp,4
    ea70:	f800283a 	ret

0000ea74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea74:	defffe04 	addi	sp,sp,-8
    ea78:	dfc00115 	stw	ra,4(sp)
    ea7c:	df000015 	stw	fp,0(sp)
    ea80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea84:	d0a00d17 	ldw	r2,-32716(gp)
    ea88:	10000326 	beq	r2,zero,ea98 <alt_get_errno+0x24>
    ea8c:	d0a00d17 	ldw	r2,-32716(gp)
    ea90:	103ee83a 	callr	r2
    ea94:	00000106 	br	ea9c <alt_get_errno+0x28>
    ea98:	d0a6d004 	addi	r2,gp,-25792
}
    ea9c:	e037883a 	mov	sp,fp
    eaa0:	dfc00117 	ldw	ra,4(sp)
    eaa4:	df000017 	ldw	fp,0(sp)
    eaa8:	dec00204 	addi	sp,sp,8
    eaac:	f800283a 	ret

0000eab0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    eab0:	defffa04 	addi	sp,sp,-24
    eab4:	dfc00515 	stw	ra,20(sp)
    eab8:	df000415 	stw	fp,16(sp)
    eabc:	df000404 	addi	fp,sp,16
    eac0:	e13ffe15 	stw	r4,-8(fp)
    eac4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    eac8:	e0bffe17 	ldw	r2,-8(fp)
    eacc:	10000326 	beq	r2,zero,eadc <alt_dev_llist_insert+0x2c>
    ead0:	e0bffe17 	ldw	r2,-8(fp)
    ead4:	10800217 	ldw	r2,8(r2)
    ead8:	1000061e 	bne	r2,zero,eaf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    eadc:	000ea740 	call	ea74 <alt_get_errno>
    eae0:	1007883a 	mov	r3,r2
    eae4:	00800584 	movi	r2,22
    eae8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    eaec:	00bffa84 	movi	r2,-22
    eaf0:	00001306 	br	eb40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    eaf4:	e0bffe17 	ldw	r2,-8(fp)
    eaf8:	e0ffff17 	ldw	r3,-4(fp)
    eafc:	e0fffc15 	stw	r3,-16(fp)
    eb00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    eb04:	e0bffd17 	ldw	r2,-12(fp)
    eb08:	e0fffc17 	ldw	r3,-16(fp)
    eb0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    eb10:	e0bffc17 	ldw	r2,-16(fp)
    eb14:	10c00017 	ldw	r3,0(r2)
    eb18:	e0bffd17 	ldw	r2,-12(fp)
    eb1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eb20:	e0bffc17 	ldw	r2,-16(fp)
    eb24:	10800017 	ldw	r2,0(r2)
    eb28:	e0fffd17 	ldw	r3,-12(fp)
    eb2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	e0fffd17 	ldw	r3,-12(fp)
    eb38:	10c00015 	stw	r3,0(r2)

  return 0;  
    eb3c:	0005883a 	mov	r2,zero
}
    eb40:	e037883a 	mov	sp,fp
    eb44:	dfc00117 	ldw	ra,4(sp)
    eb48:	df000017 	ldw	fp,0(sp)
    eb4c:	dec00204 	addi	sp,sp,8
    eb50:	f800283a 	ret

0000eb54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    eb54:	defffd04 	addi	sp,sp,-12
    eb58:	dfc00215 	stw	ra,8(sp)
    eb5c:	df000115 	stw	fp,4(sp)
    eb60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    eb64:	00800074 	movhi	r2,1
    eb68:	10bec204 	addi	r2,r2,-1272
    eb6c:	e0bfff15 	stw	r2,-4(fp)
    eb70:	00000606 	br	eb8c <_do_ctors+0x38>
        (*ctor) (); 
    eb74:	e0bfff17 	ldw	r2,-4(fp)
    eb78:	10800017 	ldw	r2,0(r2)
    eb7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    eb80:	e0bfff17 	ldw	r2,-4(fp)
    eb84:	10bfff04 	addi	r2,r2,-4
    eb88:	e0bfff15 	stw	r2,-4(fp)
    eb8c:	e0ffff17 	ldw	r3,-4(fp)
    eb90:	00800074 	movhi	r2,1
    eb94:	10bec304 	addi	r2,r2,-1268
    eb98:	18bff62e 	bgeu	r3,r2,eb74 <__alt_exception_stack_pointer+0xf800eb74>
        (*ctor) (); 
}
    eb9c:	0001883a 	nop
    eba0:	e037883a 	mov	sp,fp
    eba4:	dfc00117 	ldw	ra,4(sp)
    eba8:	df000017 	ldw	fp,0(sp)
    ebac:	dec00204 	addi	sp,sp,8
    ebb0:	f800283a 	ret

0000ebb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ebb4:	defffd04 	addi	sp,sp,-12
    ebb8:	dfc00215 	stw	ra,8(sp)
    ebbc:	df000115 	stw	fp,4(sp)
    ebc0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ebc4:	00800074 	movhi	r2,1
    ebc8:	10bec204 	addi	r2,r2,-1272
    ebcc:	e0bfff15 	stw	r2,-4(fp)
    ebd0:	00000606 	br	ebec <_do_dtors+0x38>
        (*dtor) (); 
    ebd4:	e0bfff17 	ldw	r2,-4(fp)
    ebd8:	10800017 	ldw	r2,0(r2)
    ebdc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	10bfff04 	addi	r2,r2,-4
    ebe8:	e0bfff15 	stw	r2,-4(fp)
    ebec:	e0ffff17 	ldw	r3,-4(fp)
    ebf0:	00800074 	movhi	r2,1
    ebf4:	10bec304 	addi	r2,r2,-1268
    ebf8:	18bff62e 	bgeu	r3,r2,ebd4 <__alt_exception_stack_pointer+0xf800ebd4>
        (*dtor) (); 
}
    ebfc:	0001883a 	nop
    ec00:	e037883a 	mov	sp,fp
    ec04:	dfc00117 	ldw	ra,4(sp)
    ec08:	df000017 	ldw	fp,0(sp)
    ec0c:	dec00204 	addi	sp,sp,8
    ec10:	f800283a 	ret

0000ec14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ec14:	deffff04 	addi	sp,sp,-4
    ec18:	df000015 	stw	fp,0(sp)
    ec1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ec20:	0001883a 	nop
    ec24:	e037883a 	mov	sp,fp
    ec28:	df000017 	ldw	fp,0(sp)
    ec2c:	dec00104 	addi	sp,sp,4
    ec30:	f800283a 	ret

0000ec34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ec34:	defff904 	addi	sp,sp,-28
    ec38:	dfc00615 	stw	ra,24(sp)
    ec3c:	df000515 	stw	fp,20(sp)
    ec40:	df000504 	addi	fp,sp,20
    ec44:	e13ffc15 	stw	r4,-16(fp)
    ec48:	e17ffd15 	stw	r5,-12(fp)
    ec4c:	e1bffe15 	stw	r6,-8(fp)
    ec50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ec54:	e0800217 	ldw	r2,8(fp)
    ec58:	d8800015 	stw	r2,0(sp)
    ec5c:	e1ffff17 	ldw	r7,-4(fp)
    ec60:	e1bffe17 	ldw	r6,-8(fp)
    ec64:	e17ffd17 	ldw	r5,-12(fp)
    ec68:	e13ffc17 	ldw	r4,-16(fp)
    ec6c:	000ede40 	call	ede4 <alt_iic_isr_register>
}  
    ec70:	e037883a 	mov	sp,fp
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret

0000ec84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ec84:	defff904 	addi	sp,sp,-28
    ec88:	df000615 	stw	fp,24(sp)
    ec8c:	df000604 	addi	fp,sp,24
    ec90:	e13ffe15 	stw	r4,-8(fp)
    ec94:	e17fff15 	stw	r5,-4(fp)
    ec98:	e0bfff17 	ldw	r2,-4(fp)
    ec9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eca0:	0005303a 	rdctl	r2,status
    eca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eca8:	e0fffb17 	ldw	r3,-20(fp)
    ecac:	00bfff84 	movi	r2,-2
    ecb0:	1884703a 	and	r2,r3,r2
    ecb4:	1001703a 	wrctl	status,r2
  
  return context;
    ecb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ecbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ecc0:	00c00044 	movi	r3,1
    ecc4:	e0bffa17 	ldw	r2,-24(fp)
    ecc8:	1884983a 	sll	r2,r3,r2
    eccc:	1007883a 	mov	r3,r2
    ecd0:	d0a6d717 	ldw	r2,-25764(gp)
    ecd4:	1884b03a 	or	r2,r3,r2
    ecd8:	d0a6d715 	stw	r2,-25764(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ecdc:	d0a6d717 	ldw	r2,-25764(gp)
    ece0:	100170fa 	wrctl	ienable,r2
    ece4:	e0bffc17 	ldw	r2,-16(fp)
    ece8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecec:	e0bffd17 	ldw	r2,-12(fp)
    ecf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ecf4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ecf8:	0001883a 	nop
}
    ecfc:	e037883a 	mov	sp,fp
    ed00:	df000017 	ldw	fp,0(sp)
    ed04:	dec00104 	addi	sp,sp,4
    ed08:	f800283a 	ret

0000ed0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ed0c:	defff904 	addi	sp,sp,-28
    ed10:	df000615 	stw	fp,24(sp)
    ed14:	df000604 	addi	fp,sp,24
    ed18:	e13ffe15 	stw	r4,-8(fp)
    ed1c:	e17fff15 	stw	r5,-4(fp)
    ed20:	e0bfff17 	ldw	r2,-4(fp)
    ed24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed28:	0005303a 	rdctl	r2,status
    ed2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed30:	e0fffb17 	ldw	r3,-20(fp)
    ed34:	00bfff84 	movi	r2,-2
    ed38:	1884703a 	and	r2,r3,r2
    ed3c:	1001703a 	wrctl	status,r2
  
  return context;
    ed40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ed48:	00c00044 	movi	r3,1
    ed4c:	e0bffa17 	ldw	r2,-24(fp)
    ed50:	1884983a 	sll	r2,r3,r2
    ed54:	0084303a 	nor	r2,zero,r2
    ed58:	1007883a 	mov	r3,r2
    ed5c:	d0a6d717 	ldw	r2,-25764(gp)
    ed60:	1884703a 	and	r2,r3,r2
    ed64:	d0a6d715 	stw	r2,-25764(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ed68:	d0a6d717 	ldw	r2,-25764(gp)
    ed6c:	100170fa 	wrctl	ienable,r2
    ed70:	e0bffc17 	ldw	r2,-16(fp)
    ed74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed78:	e0bffd17 	ldw	r2,-12(fp)
    ed7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ed80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ed84:	0001883a 	nop
}
    ed88:	e037883a 	mov	sp,fp
    ed8c:	df000017 	ldw	fp,0(sp)
    ed90:	dec00104 	addi	sp,sp,4
    ed94:	f800283a 	ret

0000ed98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ed98:	defffc04 	addi	sp,sp,-16
    ed9c:	df000315 	stw	fp,12(sp)
    eda0:	df000304 	addi	fp,sp,12
    eda4:	e13ffe15 	stw	r4,-8(fp)
    eda8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    edac:	000530fa 	rdctl	r2,ienable
    edb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    edb4:	00c00044 	movi	r3,1
    edb8:	e0bfff17 	ldw	r2,-4(fp)
    edbc:	1884983a 	sll	r2,r3,r2
    edc0:	1007883a 	mov	r3,r2
    edc4:	e0bffd17 	ldw	r2,-12(fp)
    edc8:	1884703a 	and	r2,r3,r2
    edcc:	1004c03a 	cmpne	r2,r2,zero
    edd0:	10803fcc 	andi	r2,r2,255
}
    edd4:	e037883a 	mov	sp,fp
    edd8:	df000017 	ldw	fp,0(sp)
    eddc:	dec00104 	addi	sp,sp,4
    ede0:	f800283a 	ret

0000ede4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ede4:	defff504 	addi	sp,sp,-44
    ede8:	dfc00a15 	stw	ra,40(sp)
    edec:	df000915 	stw	fp,36(sp)
    edf0:	df000904 	addi	fp,sp,36
    edf4:	e13ffc15 	stw	r4,-16(fp)
    edf8:	e17ffd15 	stw	r5,-12(fp)
    edfc:	e1bffe15 	stw	r6,-8(fp)
    ee00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ee04:	00bffa84 	movi	r2,-22
    ee08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ee0c:	e0bffd17 	ldw	r2,-12(fp)
    ee10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ee14:	e0bff817 	ldw	r2,-32(fp)
    ee18:	10800808 	cmpgei	r2,r2,32
    ee1c:	1000271e 	bne	r2,zero,eebc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee20:	0005303a 	rdctl	r2,status
    ee24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee28:	e0fffb17 	ldw	r3,-20(fp)
    ee2c:	00bfff84 	movi	r2,-2
    ee30:	1884703a 	and	r2,r3,r2
    ee34:	1001703a 	wrctl	status,r2
  
  return context;
    ee38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ee3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    ee40:	00800074 	movhi	r2,1
    ee44:	108d1804 	addi	r2,r2,13408
    ee48:	e0fff817 	ldw	r3,-32(fp)
    ee4c:	180690fa 	slli	r3,r3,3
    ee50:	10c5883a 	add	r2,r2,r3
    ee54:	e0fffe17 	ldw	r3,-8(fp)
    ee58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ee5c:	00800074 	movhi	r2,1
    ee60:	108d1804 	addi	r2,r2,13408
    ee64:	e0fff817 	ldw	r3,-32(fp)
    ee68:	180690fa 	slli	r3,r3,3
    ee6c:	10c5883a 	add	r2,r2,r3
    ee70:	10800104 	addi	r2,r2,4
    ee74:	e0ffff17 	ldw	r3,-4(fp)
    ee78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ee7c:	e0bffe17 	ldw	r2,-8(fp)
    ee80:	10000526 	beq	r2,zero,ee98 <alt_iic_isr_register+0xb4>
    ee84:	e0bff817 	ldw	r2,-32(fp)
    ee88:	100b883a 	mov	r5,r2
    ee8c:	e13ffc17 	ldw	r4,-16(fp)
    ee90:	000ec840 	call	ec84 <alt_ic_irq_enable>
    ee94:	00000406 	br	eea8 <alt_iic_isr_register+0xc4>
    ee98:	e0bff817 	ldw	r2,-32(fp)
    ee9c:	100b883a 	mov	r5,r2
    eea0:	e13ffc17 	ldw	r4,-16(fp)
    eea4:	000ed0c0 	call	ed0c <alt_ic_irq_disable>
    eea8:	e0bff715 	stw	r2,-36(fp)
    eeac:	e0bffa17 	ldw	r2,-24(fp)
    eeb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eeb4:	e0bff917 	ldw	r2,-28(fp)
    eeb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    eebc:	e0bff717 	ldw	r2,-36(fp)
}
    eec0:	e037883a 	mov	sp,fp
    eec4:	dfc00117 	ldw	ra,4(sp)
    eec8:	df000017 	ldw	fp,0(sp)
    eecc:	dec00204 	addi	sp,sp,8
    eed0:	f800283a 	ret

0000eed4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    eed4:	defff804 	addi	sp,sp,-32
    eed8:	dfc00715 	stw	ra,28(sp)
    eedc:	df000615 	stw	fp,24(sp)
    eee0:	dc000515 	stw	r16,20(sp)
    eee4:	df000604 	addi	fp,sp,24
    eee8:	e13ffb15 	stw	r4,-20(fp)
    eeec:	e17ffc15 	stw	r5,-16(fp)
    eef0:	e1bffd15 	stw	r6,-12(fp)
    eef4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    eef8:	e1bffe17 	ldw	r6,-8(fp)
    eefc:	e17ffd17 	ldw	r5,-12(fp)
    ef00:	e13ffc17 	ldw	r4,-16(fp)
    ef04:	000f15c0 	call	f15c <open>
    ef08:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    ef0c:	e0bffa17 	ldw	r2,-24(fp)
    ef10:	10002216 	blt	r2,zero,ef9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    ef14:	04000074 	movhi	r16,1
    ef18:	8401bb04 	addi	r16,r16,1772
    ef1c:	e0bffa17 	ldw	r2,-24(fp)
    ef20:	01400304 	movi	r5,12
    ef24:	1009883a 	mov	r4,r2
    ef28:	000aaa00 	call	aaa0 <__mulsi3>
    ef2c:	8085883a 	add	r2,r16,r2
    ef30:	10c00017 	ldw	r3,0(r2)
    ef34:	e0bffb17 	ldw	r2,-20(fp)
    ef38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ef3c:	04000074 	movhi	r16,1
    ef40:	8401bb04 	addi	r16,r16,1772
    ef44:	e0bffa17 	ldw	r2,-24(fp)
    ef48:	01400304 	movi	r5,12
    ef4c:	1009883a 	mov	r4,r2
    ef50:	000aaa00 	call	aaa0 <__mulsi3>
    ef54:	8085883a 	add	r2,r16,r2
    ef58:	10800104 	addi	r2,r2,4
    ef5c:	10c00017 	ldw	r3,0(r2)
    ef60:	e0bffb17 	ldw	r2,-20(fp)
    ef64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ef68:	04000074 	movhi	r16,1
    ef6c:	8401bb04 	addi	r16,r16,1772
    ef70:	e0bffa17 	ldw	r2,-24(fp)
    ef74:	01400304 	movi	r5,12
    ef78:	1009883a 	mov	r4,r2
    ef7c:	000aaa00 	call	aaa0 <__mulsi3>
    ef80:	8085883a 	add	r2,r16,r2
    ef84:	10800204 	addi	r2,r2,8
    ef88:	10c00017 	ldw	r3,0(r2)
    ef8c:	e0bffb17 	ldw	r2,-20(fp)
    ef90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ef94:	e13ffa17 	ldw	r4,-24(fp)
    ef98:	000da900 	call	da90 <alt_release_fd>
  }
} 
    ef9c:	0001883a 	nop
    efa0:	e6ffff04 	addi	sp,fp,-4
    efa4:	dfc00217 	ldw	ra,8(sp)
    efa8:	df000117 	ldw	fp,4(sp)
    efac:	dc000017 	ldw	r16,0(sp)
    efb0:	dec00304 	addi	sp,sp,12
    efb4:	f800283a 	ret

0000efb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    efb8:	defffb04 	addi	sp,sp,-20
    efbc:	dfc00415 	stw	ra,16(sp)
    efc0:	df000315 	stw	fp,12(sp)
    efc4:	df000304 	addi	fp,sp,12
    efc8:	e13ffd15 	stw	r4,-12(fp)
    efcc:	e17ffe15 	stw	r5,-8(fp)
    efd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    efd4:	01c07fc4 	movi	r7,511
    efd8:	01800044 	movi	r6,1
    efdc:	e17ffd17 	ldw	r5,-12(fp)
    efe0:	01000074 	movhi	r4,1
    efe4:	2101be04 	addi	r4,r4,1784
    efe8:	000eed40 	call	eed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    efec:	01c07fc4 	movi	r7,511
    eff0:	000d883a 	mov	r6,zero
    eff4:	e17ffe17 	ldw	r5,-8(fp)
    eff8:	01000074 	movhi	r4,1
    effc:	2101bb04 	addi	r4,r4,1772
    f000:	000eed40 	call	eed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f004:	01c07fc4 	movi	r7,511
    f008:	01800044 	movi	r6,1
    f00c:	e17fff17 	ldw	r5,-4(fp)
    f010:	01000074 	movhi	r4,1
    f014:	2101c104 	addi	r4,r4,1796
    f018:	000eed40 	call	eed4 <alt_open_fd>
}  
    f01c:	0001883a 	nop
    f020:	e037883a 	mov	sp,fp
    f024:	dfc00117 	ldw	ra,4(sp)
    f028:	df000017 	ldw	fp,0(sp)
    f02c:	dec00204 	addi	sp,sp,8
    f030:	f800283a 	ret

0000f034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f034:	defffe04 	addi	sp,sp,-8
    f038:	dfc00115 	stw	ra,4(sp)
    f03c:	df000015 	stw	fp,0(sp)
    f040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f044:	d0a00d17 	ldw	r2,-32716(gp)
    f048:	10000326 	beq	r2,zero,f058 <alt_get_errno+0x24>
    f04c:	d0a00d17 	ldw	r2,-32716(gp)
    f050:	103ee83a 	callr	r2
    f054:	00000106 	br	f05c <alt_get_errno+0x28>
    f058:	d0a6d004 	addi	r2,gp,-25792
}
    f05c:	e037883a 	mov	sp,fp
    f060:	dfc00117 	ldw	ra,4(sp)
    f064:	df000017 	ldw	fp,0(sp)
    f068:	dec00204 	addi	sp,sp,8
    f06c:	f800283a 	ret

0000f070 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f070:	defffb04 	addi	sp,sp,-20
    f074:	dfc00415 	stw	ra,16(sp)
    f078:	df000315 	stw	fp,12(sp)
    f07c:	dc000215 	stw	r16,8(sp)
    f080:	df000304 	addi	fp,sp,12
    f084:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f088:	e0bffe17 	ldw	r2,-8(fp)
    f08c:	10800217 	ldw	r2,8(r2)
    f090:	10d00034 	orhi	r3,r2,16384
    f094:	e0bffe17 	ldw	r2,-8(fp)
    f098:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f09c:	e03ffd15 	stw	zero,-12(fp)
    f0a0:	00002306 	br	f130 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f0a4:	04000074 	movhi	r16,1
    f0a8:	8401bb04 	addi	r16,r16,1772
    f0ac:	e0bffd17 	ldw	r2,-12(fp)
    f0b0:	01400304 	movi	r5,12
    f0b4:	1009883a 	mov	r4,r2
    f0b8:	000aaa00 	call	aaa0 <__mulsi3>
    f0bc:	8085883a 	add	r2,r16,r2
    f0c0:	10c00017 	ldw	r3,0(r2)
    f0c4:	e0bffe17 	ldw	r2,-8(fp)
    f0c8:	10800017 	ldw	r2,0(r2)
    f0cc:	1880151e 	bne	r3,r2,f124 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f0d0:	04000074 	movhi	r16,1
    f0d4:	8401bb04 	addi	r16,r16,1772
    f0d8:	e0bffd17 	ldw	r2,-12(fp)
    f0dc:	01400304 	movi	r5,12
    f0e0:	1009883a 	mov	r4,r2
    f0e4:	000aaa00 	call	aaa0 <__mulsi3>
    f0e8:	8085883a 	add	r2,r16,r2
    f0ec:	10800204 	addi	r2,r2,8
    f0f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f0f4:	10000b0e 	bge	r2,zero,f124 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f0f8:	01400304 	movi	r5,12
    f0fc:	e13ffd17 	ldw	r4,-12(fp)
    f100:	000aaa00 	call	aaa0 <__mulsi3>
    f104:	1007883a 	mov	r3,r2
    f108:	00800074 	movhi	r2,1
    f10c:	1081bb04 	addi	r2,r2,1772
    f110:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f114:	e0bffe17 	ldw	r2,-8(fp)
    f118:	18800226 	beq	r3,r2,f124 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f11c:	00bffcc4 	movi	r2,-13
    f120:	00000806 	br	f144 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f124:	e0bffd17 	ldw	r2,-12(fp)
    f128:	10800044 	addi	r2,r2,1
    f12c:	e0bffd15 	stw	r2,-12(fp)
    f130:	d0a00c17 	ldw	r2,-32720(gp)
    f134:	1007883a 	mov	r3,r2
    f138:	e0bffd17 	ldw	r2,-12(fp)
    f13c:	18bfd92e 	bgeu	r3,r2,f0a4 <__alt_exception_stack_pointer+0xf800f0a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f140:	0005883a 	mov	r2,zero
}
    f144:	e6ffff04 	addi	sp,fp,-4
    f148:	dfc00217 	ldw	ra,8(sp)
    f14c:	df000117 	ldw	fp,4(sp)
    f150:	dc000017 	ldw	r16,0(sp)
    f154:	dec00304 	addi	sp,sp,12
    f158:	f800283a 	ret

0000f15c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f15c:	defff604 	addi	sp,sp,-40
    f160:	dfc00915 	stw	ra,36(sp)
    f164:	df000815 	stw	fp,32(sp)
    f168:	df000804 	addi	fp,sp,32
    f16c:	e13ffd15 	stw	r4,-12(fp)
    f170:	e17ffe15 	stw	r5,-8(fp)
    f174:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f178:	00bfffc4 	movi	r2,-1
    f17c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f180:	00bffb44 	movi	r2,-19
    f184:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f188:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f18c:	d1600a04 	addi	r5,gp,-32728
    f190:	e13ffd17 	ldw	r4,-12(fp)
    f194:	000f4800 	call	f480 <alt_find_dev>
    f198:	e0bff815 	stw	r2,-32(fp)
    f19c:	e0bff817 	ldw	r2,-32(fp)
    f1a0:	1000051e 	bne	r2,zero,f1b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f1a4:	e13ffd17 	ldw	r4,-12(fp)
    f1a8:	000f5100 	call	f510 <alt_find_file>
    f1ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f1b0:	00800044 	movi	r2,1
    f1b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f1b8:	e0bff817 	ldw	r2,-32(fp)
    f1bc:	10002b26 	beq	r2,zero,f26c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f1c0:	e13ff817 	ldw	r4,-32(fp)
    f1c4:	000f6180 	call	f618 <alt_get_fd>
    f1c8:	e0bff915 	stw	r2,-28(fp)
    f1cc:	e0bff917 	ldw	r2,-28(fp)
    f1d0:	1000030e 	bge	r2,zero,f1e0 <open+0x84>
    {
      status = index;
    f1d4:	e0bff917 	ldw	r2,-28(fp)
    f1d8:	e0bffa15 	stw	r2,-24(fp)
    f1dc:	00002506 	br	f274 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f1e0:	01400304 	movi	r5,12
    f1e4:	e13ff917 	ldw	r4,-28(fp)
    f1e8:	000aaa00 	call	aaa0 <__mulsi3>
    f1ec:	1007883a 	mov	r3,r2
    f1f0:	00800074 	movhi	r2,1
    f1f4:	1081bb04 	addi	r2,r2,1772
    f1f8:	1885883a 	add	r2,r3,r2
    f1fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f200:	e0fffe17 	ldw	r3,-8(fp)
    f204:	00900034 	movhi	r2,16384
    f208:	10bfffc4 	addi	r2,r2,-1
    f20c:	1886703a 	and	r3,r3,r2
    f210:	e0bffc17 	ldw	r2,-16(fp)
    f214:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f218:	e0bffb17 	ldw	r2,-20(fp)
    f21c:	1000051e 	bne	r2,zero,f234 <open+0xd8>
    f220:	e13ffc17 	ldw	r4,-16(fp)
    f224:	000f0700 	call	f070 <alt_file_locked>
    f228:	e0bffa15 	stw	r2,-24(fp)
    f22c:	e0bffa17 	ldw	r2,-24(fp)
    f230:	10001016 	blt	r2,zero,f274 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f234:	e0bff817 	ldw	r2,-32(fp)
    f238:	10800317 	ldw	r2,12(r2)
    f23c:	10000826 	beq	r2,zero,f260 <open+0x104>
    f240:	e0bff817 	ldw	r2,-32(fp)
    f244:	10800317 	ldw	r2,12(r2)
    f248:	e1ffff17 	ldw	r7,-4(fp)
    f24c:	e1bffe17 	ldw	r6,-8(fp)
    f250:	e17ffd17 	ldw	r5,-12(fp)
    f254:	e13ffc17 	ldw	r4,-16(fp)
    f258:	103ee83a 	callr	r2
    f25c:	00000106 	br	f264 <open+0x108>
    f260:	0005883a 	mov	r2,zero
    f264:	e0bffa15 	stw	r2,-24(fp)
    f268:	00000206 	br	f274 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f26c:	00bffb44 	movi	r2,-19
    f270:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f274:	e0bffa17 	ldw	r2,-24(fp)
    f278:	1000090e 	bge	r2,zero,f2a0 <open+0x144>
  {
    alt_release_fd (index);  
    f27c:	e13ff917 	ldw	r4,-28(fp)
    f280:	000da900 	call	da90 <alt_release_fd>
    ALT_ERRNO = -status;
    f284:	000f0340 	call	f034 <alt_get_errno>
    f288:	1007883a 	mov	r3,r2
    f28c:	e0bffa17 	ldw	r2,-24(fp)
    f290:	0085c83a 	sub	r2,zero,r2
    f294:	18800015 	stw	r2,0(r3)
    return -1;
    f298:	00bfffc4 	movi	r2,-1
    f29c:	00000106 	br	f2a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f2a0:	e0bff917 	ldw	r2,-28(fp)
}
    f2a4:	e037883a 	mov	sp,fp
    f2a8:	dfc00117 	ldw	ra,4(sp)
    f2ac:	df000017 	ldw	fp,0(sp)
    f2b0:	dec00204 	addi	sp,sp,8
    f2b4:	f800283a 	ret

0000f2b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f2b8:	defffa04 	addi	sp,sp,-24
    f2bc:	df000515 	stw	fp,20(sp)
    f2c0:	df000504 	addi	fp,sp,20
    f2c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2c8:	0005303a 	rdctl	r2,status
    f2cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2d0:	e0fffc17 	ldw	r3,-16(fp)
    f2d4:	00bfff84 	movi	r2,-2
    f2d8:	1884703a 	and	r2,r3,r2
    f2dc:	1001703a 	wrctl	status,r2
  
  return context;
    f2e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f2e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f2e8:	e0bfff17 	ldw	r2,-4(fp)
    f2ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f2f0:	e0bffd17 	ldw	r2,-12(fp)
    f2f4:	10800017 	ldw	r2,0(r2)
    f2f8:	e0fffd17 	ldw	r3,-12(fp)
    f2fc:	18c00117 	ldw	r3,4(r3)
    f300:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f304:	e0bffd17 	ldw	r2,-12(fp)
    f308:	10800117 	ldw	r2,4(r2)
    f30c:	e0fffd17 	ldw	r3,-12(fp)
    f310:	18c00017 	ldw	r3,0(r3)
    f314:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f318:	e0bffd17 	ldw	r2,-12(fp)
    f31c:	e0fffd17 	ldw	r3,-12(fp)
    f320:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f324:	e0bffd17 	ldw	r2,-12(fp)
    f328:	e0fffd17 	ldw	r3,-12(fp)
    f32c:	10c00015 	stw	r3,0(r2)
    f330:	e0bffb17 	ldw	r2,-20(fp)
    f334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f338:	e0bffe17 	ldw	r2,-8(fp)
    f33c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f340:	0001883a 	nop
    f344:	e037883a 	mov	sp,fp
    f348:	df000017 	ldw	fp,0(sp)
    f34c:	dec00104 	addi	sp,sp,4
    f350:	f800283a 	ret

0000f354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f354:	defffb04 	addi	sp,sp,-20
    f358:	dfc00415 	stw	ra,16(sp)
    f35c:	df000315 	stw	fp,12(sp)
    f360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f364:	d0a00f17 	ldw	r2,-32708(gp)
    f368:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f36c:	d0a6d917 	ldw	r2,-25756(gp)
    f370:	10800044 	addi	r2,r2,1
    f374:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f378:	00002e06 	br	f434 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f37c:	e0bffd17 	ldw	r2,-12(fp)
    f380:	10800017 	ldw	r2,0(r2)
    f384:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f388:	e0bffd17 	ldw	r2,-12(fp)
    f38c:	10800403 	ldbu	r2,16(r2)
    f390:	10803fcc 	andi	r2,r2,255
    f394:	10000426 	beq	r2,zero,f3a8 <alt_tick+0x54>
    f398:	d0a6d917 	ldw	r2,-25756(gp)
    f39c:	1000021e 	bne	r2,zero,f3a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f3a0:	e0bffd17 	ldw	r2,-12(fp)
    f3a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f3a8:	e0bffd17 	ldw	r2,-12(fp)
    f3ac:	10800217 	ldw	r2,8(r2)
    f3b0:	d0e6d917 	ldw	r3,-25756(gp)
    f3b4:	18801d36 	bltu	r3,r2,f42c <alt_tick+0xd8>
    f3b8:	e0bffd17 	ldw	r2,-12(fp)
    f3bc:	10800403 	ldbu	r2,16(r2)
    f3c0:	10803fcc 	andi	r2,r2,255
    f3c4:	1000191e 	bne	r2,zero,f42c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f3c8:	e0bffd17 	ldw	r2,-12(fp)
    f3cc:	10800317 	ldw	r2,12(r2)
    f3d0:	e0fffd17 	ldw	r3,-12(fp)
    f3d4:	18c00517 	ldw	r3,20(r3)
    f3d8:	1809883a 	mov	r4,r3
    f3dc:	103ee83a 	callr	r2
    f3e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f3e4:	e0bfff17 	ldw	r2,-4(fp)
    f3e8:	1000031e 	bne	r2,zero,f3f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f3ec:	e13ffd17 	ldw	r4,-12(fp)
    f3f0:	000f2b80 	call	f2b8 <alt_alarm_stop>
    f3f4:	00000d06 	br	f42c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f3f8:	e0bffd17 	ldw	r2,-12(fp)
    f3fc:	10c00217 	ldw	r3,8(r2)
    f400:	e0bfff17 	ldw	r2,-4(fp)
    f404:	1887883a 	add	r3,r3,r2
    f408:	e0bffd17 	ldw	r2,-12(fp)
    f40c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f410:	e0bffd17 	ldw	r2,-12(fp)
    f414:	10c00217 	ldw	r3,8(r2)
    f418:	d0a6d917 	ldw	r2,-25756(gp)
    f41c:	1880032e 	bgeu	r3,r2,f42c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f420:	e0bffd17 	ldw	r2,-12(fp)
    f424:	00c00044 	movi	r3,1
    f428:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f42c:	e0bffe17 	ldw	r2,-8(fp)
    f430:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f434:	e0fffd17 	ldw	r3,-12(fp)
    f438:	d0a00f04 	addi	r2,gp,-32708
    f43c:	18bfcf1e 	bne	r3,r2,f37c <__alt_exception_stack_pointer+0xf800f37c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f440:	0001883a 	nop
}
    f444:	0001883a 	nop
    f448:	e037883a 	mov	sp,fp
    f44c:	dfc00117 	ldw	ra,4(sp)
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00204 	addi	sp,sp,8
    f458:	f800283a 	ret

0000f45c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f45c:	deffff04 	addi	sp,sp,-4
    f460:	df000015 	stw	fp,0(sp)
    f464:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f468:	000170fa 	wrctl	ienable,zero
}
    f46c:	0001883a 	nop
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f480:	defffa04 	addi	sp,sp,-24
    f484:	dfc00515 	stw	ra,20(sp)
    f488:	df000415 	stw	fp,16(sp)
    f48c:	df000404 	addi	fp,sp,16
    f490:	e13ffe15 	stw	r4,-8(fp)
    f494:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f498:	e0bfff17 	ldw	r2,-4(fp)
    f49c:	10800017 	ldw	r2,0(r2)
    f4a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f4a4:	e13ffe17 	ldw	r4,-8(fp)
    f4a8:	00070c80 	call	70c8 <strlen>
    f4ac:	10800044 	addi	r2,r2,1
    f4b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f4b4:	00000d06 	br	f4ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f4b8:	e0bffc17 	ldw	r2,-16(fp)
    f4bc:	10800217 	ldw	r2,8(r2)
    f4c0:	e0fffd17 	ldw	r3,-12(fp)
    f4c4:	180d883a 	mov	r6,r3
    f4c8:	e17ffe17 	ldw	r5,-8(fp)
    f4cc:	1009883a 	mov	r4,r2
    f4d0:	000f7c40 	call	f7c4 <memcmp>
    f4d4:	1000021e 	bne	r2,zero,f4e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f4d8:	e0bffc17 	ldw	r2,-16(fp)
    f4dc:	00000706 	br	f4fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f4e0:	e0bffc17 	ldw	r2,-16(fp)
    f4e4:	10800017 	ldw	r2,0(r2)
    f4e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f4ec:	e0fffc17 	ldw	r3,-16(fp)
    f4f0:	e0bfff17 	ldw	r2,-4(fp)
    f4f4:	18bff01e 	bne	r3,r2,f4b8 <__alt_exception_stack_pointer+0xf800f4b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f4f8:	0005883a 	mov	r2,zero
}
    f4fc:	e037883a 	mov	sp,fp
    f500:	dfc00117 	ldw	ra,4(sp)
    f504:	df000017 	ldw	fp,0(sp)
    f508:	dec00204 	addi	sp,sp,8
    f50c:	f800283a 	ret

0000f510 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f510:	defffb04 	addi	sp,sp,-20
    f514:	dfc00415 	stw	ra,16(sp)
    f518:	df000315 	stw	fp,12(sp)
    f51c:	df000304 	addi	fp,sp,12
    f520:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f524:	d0a00817 	ldw	r2,-32736(gp)
    f528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f52c:	00003106 	br	f5f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f530:	e0bffd17 	ldw	r2,-12(fp)
    f534:	10800217 	ldw	r2,8(r2)
    f538:	1009883a 	mov	r4,r2
    f53c:	00070c80 	call	70c8 <strlen>
    f540:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f544:	e0bffd17 	ldw	r2,-12(fp)
    f548:	10c00217 	ldw	r3,8(r2)
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	10bfffc4 	addi	r2,r2,-1
    f554:	1885883a 	add	r2,r3,r2
    f558:	10800003 	ldbu	r2,0(r2)
    f55c:	10803fcc 	andi	r2,r2,255
    f560:	1080201c 	xori	r2,r2,128
    f564:	10bfe004 	addi	r2,r2,-128
    f568:	10800bd8 	cmpnei	r2,r2,47
    f56c:	1000031e 	bne	r2,zero,f57c <alt_find_file+0x6c>
    {
      len -= 1;
    f570:	e0bffe17 	ldw	r2,-8(fp)
    f574:	10bfffc4 	addi	r2,r2,-1
    f578:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f57c:	e0bffe17 	ldw	r2,-8(fp)
    f580:	e0ffff17 	ldw	r3,-4(fp)
    f584:	1885883a 	add	r2,r3,r2
    f588:	10800003 	ldbu	r2,0(r2)
    f58c:	10803fcc 	andi	r2,r2,255
    f590:	1080201c 	xori	r2,r2,128
    f594:	10bfe004 	addi	r2,r2,-128
    f598:	10800be0 	cmpeqi	r2,r2,47
    f59c:	1000081e 	bne	r2,zero,f5c0 <alt_find_file+0xb0>
    f5a0:	e0bffe17 	ldw	r2,-8(fp)
    f5a4:	e0ffff17 	ldw	r3,-4(fp)
    f5a8:	1885883a 	add	r2,r3,r2
    f5ac:	10800003 	ldbu	r2,0(r2)
    f5b0:	10803fcc 	andi	r2,r2,255
    f5b4:	1080201c 	xori	r2,r2,128
    f5b8:	10bfe004 	addi	r2,r2,-128
    f5bc:	10000a1e 	bne	r2,zero,f5e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	10800217 	ldw	r2,8(r2)
    f5c8:	e0fffe17 	ldw	r3,-8(fp)
    f5cc:	180d883a 	mov	r6,r3
    f5d0:	e17fff17 	ldw	r5,-4(fp)
    f5d4:	1009883a 	mov	r4,r2
    f5d8:	000f7c40 	call	f7c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f5dc:	1000021e 	bne	r2,zero,f5e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	00000706 	br	f604 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f5e8:	e0bffd17 	ldw	r2,-12(fp)
    f5ec:	10800017 	ldw	r2,0(r2)
    f5f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f5f4:	e0fffd17 	ldw	r3,-12(fp)
    f5f8:	d0a00804 	addi	r2,gp,-32736
    f5fc:	18bfcc1e 	bne	r3,r2,f530 <__alt_exception_stack_pointer+0xf800f530>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f600:	0005883a 	mov	r2,zero
}
    f604:	e037883a 	mov	sp,fp
    f608:	dfc00117 	ldw	ra,4(sp)
    f60c:	df000017 	ldw	fp,0(sp)
    f610:	dec00204 	addi	sp,sp,8
    f614:	f800283a 	ret

0000f618 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f618:	defffa04 	addi	sp,sp,-24
    f61c:	dfc00515 	stw	ra,20(sp)
    f620:	df000415 	stw	fp,16(sp)
    f624:	dc000315 	stw	r16,12(sp)
    f628:	df000404 	addi	fp,sp,16
    f62c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    f630:	00bffa04 	movi	r2,-24
    f634:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f638:	e03ffc15 	stw	zero,-16(fp)
    f63c:	00001d06 	br	f6b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    f640:	04000074 	movhi	r16,1
    f644:	8401bb04 	addi	r16,r16,1772
    f648:	e0bffc17 	ldw	r2,-16(fp)
    f64c:	01400304 	movi	r5,12
    f650:	1009883a 	mov	r4,r2
    f654:	000aaa00 	call	aaa0 <__mulsi3>
    f658:	8085883a 	add	r2,r16,r2
    f65c:	10800017 	ldw	r2,0(r2)
    f660:	1000111e 	bne	r2,zero,f6a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    f664:	04000074 	movhi	r16,1
    f668:	8401bb04 	addi	r16,r16,1772
    f66c:	e0bffc17 	ldw	r2,-16(fp)
    f670:	01400304 	movi	r5,12
    f674:	1009883a 	mov	r4,r2
    f678:	000aaa00 	call	aaa0 <__mulsi3>
    f67c:	8085883a 	add	r2,r16,r2
    f680:	e0fffe17 	ldw	r3,-8(fp)
    f684:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f688:	d0e00c17 	ldw	r3,-32720(gp)
    f68c:	e0bffc17 	ldw	r2,-16(fp)
    f690:	1880020e 	bge	r3,r2,f69c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    f694:	e0bffc17 	ldw	r2,-16(fp)
    f698:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
    f69c:	e0bffc17 	ldw	r2,-16(fp)
    f6a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    f6a4:	00000606 	br	f6c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f6a8:	e0bffc17 	ldw	r2,-16(fp)
    f6ac:	10800044 	addi	r2,r2,1
    f6b0:	e0bffc15 	stw	r2,-16(fp)
    f6b4:	e0bffc17 	ldw	r2,-16(fp)
    f6b8:	10800810 	cmplti	r2,r2,32
    f6bc:	103fe01e 	bne	r2,zero,f640 <__alt_exception_stack_pointer+0xf800f640>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
}
    f6c4:	e6ffff04 	addi	sp,fp,-4
    f6c8:	dfc00217 	ldw	ra,8(sp)
    f6cc:	df000117 	ldw	fp,4(sp)
    f6d0:	dc000017 	ldw	r16,0(sp)
    f6d4:	dec00304 	addi	sp,sp,12
    f6d8:	f800283a 	ret

0000f6dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f6dc:	defffe04 	addi	sp,sp,-8
    f6e0:	df000115 	stw	fp,4(sp)
    f6e4:	df000104 	addi	fp,sp,4
    f6e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f6ec:	e0bfff17 	ldw	r2,-4(fp)
    f6f0:	10bffe84 	addi	r2,r2,-6
    f6f4:	10c00428 	cmpgeui	r3,r2,16
    f6f8:	18001a1e 	bne	r3,zero,f764 <alt_exception_cause_generated_bad_addr+0x88>
    f6fc:	100690ba 	slli	r3,r2,2
    f700:	00800074 	movhi	r2,1
    f704:	10bdc504 	addi	r2,r2,-2284
    f708:	1885883a 	add	r2,r3,r2
    f70c:	10800017 	ldw	r2,0(r2)
    f710:	1000683a 	jmp	r2
    f714:	0000f754 	movui	zero,989
    f718:	0000f754 	movui	zero,989
    f71c:	0000f764 	muli	zero,zero,989
    f720:	0000f764 	muli	zero,zero,989
    f724:	0000f764 	muli	zero,zero,989
    f728:	0000f754 	movui	zero,989
    f72c:	0000f75c 	xori	zero,zero,989
    f730:	0000f764 	muli	zero,zero,989
    f734:	0000f754 	movui	zero,989
    f738:	0000f754 	movui	zero,989
    f73c:	0000f764 	muli	zero,zero,989
    f740:	0000f754 	movui	zero,989
    f744:	0000f75c 	xori	zero,zero,989
    f748:	0000f764 	muli	zero,zero,989
    f74c:	0000f764 	muli	zero,zero,989
    f750:	0000f754 	movui	zero,989
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f754:	00800044 	movi	r2,1
    f758:	00000306 	br	f768 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f75c:	0005883a 	mov	r2,zero
    f760:	00000106 	br	f768 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f764:	0005883a 	mov	r2,zero
  }
}
    f768:	e037883a 	mov	sp,fp
    f76c:	df000017 	ldw	fp,0(sp)
    f770:	dec00104 	addi	sp,sp,4
    f774:	f800283a 	ret

0000f778 <atexit>:
    f778:	200b883a 	mov	r5,r4
    f77c:	000f883a 	mov	r7,zero
    f780:	000d883a 	mov	r6,zero
    f784:	0009883a 	mov	r4,zero
    f788:	000f8401 	jmpi	f840 <__register_exitproc>

0000f78c <exit>:
    f78c:	defffe04 	addi	sp,sp,-8
    f790:	000b883a 	mov	r5,zero
    f794:	dc000015 	stw	r16,0(sp)
    f798:	dfc00115 	stw	ra,4(sp)
    f79c:	2021883a 	mov	r16,r4
    f7a0:	000f9580 	call	f958 <__call_exitprocs>
    f7a4:	00800074 	movhi	r2,1
    f7a8:	10863704 	addi	r2,r2,6364
    f7ac:	11000017 	ldw	r4,0(r2)
    f7b0:	20800f17 	ldw	r2,60(r4)
    f7b4:	10000126 	beq	r2,zero,f7bc <exit+0x30>
    f7b8:	103ee83a 	callr	r2
    f7bc:	8009883a 	mov	r4,r16
    f7c0:	000fad80 	call	fad8 <_exit>

0000f7c4 <memcmp>:
    f7c4:	01c000c4 	movi	r7,3
    f7c8:	3980192e 	bgeu	r7,r6,f830 <memcmp+0x6c>
    f7cc:	2144b03a 	or	r2,r4,r5
    f7d0:	11c4703a 	and	r2,r2,r7
    f7d4:	10000f26 	beq	r2,zero,f814 <memcmp+0x50>
    f7d8:	20800003 	ldbu	r2,0(r4)
    f7dc:	28c00003 	ldbu	r3,0(r5)
    f7e0:	10c0151e 	bne	r2,r3,f838 <memcmp+0x74>
    f7e4:	31bfff84 	addi	r6,r6,-2
    f7e8:	01ffffc4 	movi	r7,-1
    f7ec:	00000406 	br	f800 <memcmp+0x3c>
    f7f0:	20800003 	ldbu	r2,0(r4)
    f7f4:	28c00003 	ldbu	r3,0(r5)
    f7f8:	31bfffc4 	addi	r6,r6,-1
    f7fc:	10c00e1e 	bne	r2,r3,f838 <memcmp+0x74>
    f800:	21000044 	addi	r4,r4,1
    f804:	29400044 	addi	r5,r5,1
    f808:	31fff91e 	bne	r6,r7,f7f0 <__alt_exception_stack_pointer+0xf800f7f0>
    f80c:	0005883a 	mov	r2,zero
    f810:	f800283a 	ret
    f814:	20c00017 	ldw	r3,0(r4)
    f818:	28800017 	ldw	r2,0(r5)
    f81c:	18bfee1e 	bne	r3,r2,f7d8 <__alt_exception_stack_pointer+0xf800f7d8>
    f820:	31bfff04 	addi	r6,r6,-4
    f824:	21000104 	addi	r4,r4,4
    f828:	29400104 	addi	r5,r5,4
    f82c:	39bff936 	bltu	r7,r6,f814 <__alt_exception_stack_pointer+0xf800f814>
    f830:	303fe91e 	bne	r6,zero,f7d8 <__alt_exception_stack_pointer+0xf800f7d8>
    f834:	003ff506 	br	f80c <__alt_exception_stack_pointer+0xf800f80c>
    f838:	10c5c83a 	sub	r2,r2,r3
    f83c:	f800283a 	ret

0000f840 <__register_exitproc>:
    f840:	defffa04 	addi	sp,sp,-24
    f844:	dc000315 	stw	r16,12(sp)
    f848:	04000074 	movhi	r16,1
    f84c:	84063704 	addi	r16,r16,6364
    f850:	80c00017 	ldw	r3,0(r16)
    f854:	dc400415 	stw	r17,16(sp)
    f858:	dfc00515 	stw	ra,20(sp)
    f85c:	18805217 	ldw	r2,328(r3)
    f860:	2023883a 	mov	r17,r4
    f864:	10003726 	beq	r2,zero,f944 <__register_exitproc+0x104>
    f868:	10c00117 	ldw	r3,4(r2)
    f86c:	010007c4 	movi	r4,31
    f870:	20c00e16 	blt	r4,r3,f8ac <__register_exitproc+0x6c>
    f874:	1a000044 	addi	r8,r3,1
    f878:	8800221e 	bne	r17,zero,f904 <__register_exitproc+0xc4>
    f87c:	18c00084 	addi	r3,r3,2
    f880:	18c7883a 	add	r3,r3,r3
    f884:	18c7883a 	add	r3,r3,r3
    f888:	12000115 	stw	r8,4(r2)
    f88c:	10c7883a 	add	r3,r2,r3
    f890:	19400015 	stw	r5,0(r3)
    f894:	0005883a 	mov	r2,zero
    f898:	dfc00517 	ldw	ra,20(sp)
    f89c:	dc400417 	ldw	r17,16(sp)
    f8a0:	dc000317 	ldw	r16,12(sp)
    f8a4:	dec00604 	addi	sp,sp,24
    f8a8:	f800283a 	ret
    f8ac:	00800034 	movhi	r2,0
    f8b0:	10813604 	addi	r2,r2,1240
    f8b4:	10002626 	beq	r2,zero,f950 <__register_exitproc+0x110>
    f8b8:	01006404 	movi	r4,400
    f8bc:	d9400015 	stw	r5,0(sp)
    f8c0:	d9800115 	stw	r6,4(sp)
    f8c4:	d9c00215 	stw	r7,8(sp)
    f8c8:	00004d80 	call	4d8 <malloc>
    f8cc:	d9400017 	ldw	r5,0(sp)
    f8d0:	d9800117 	ldw	r6,4(sp)
    f8d4:	d9c00217 	ldw	r7,8(sp)
    f8d8:	10001d26 	beq	r2,zero,f950 <__register_exitproc+0x110>
    f8dc:	81000017 	ldw	r4,0(r16)
    f8e0:	10000115 	stw	zero,4(r2)
    f8e4:	02000044 	movi	r8,1
    f8e8:	22405217 	ldw	r9,328(r4)
    f8ec:	0007883a 	mov	r3,zero
    f8f0:	12400015 	stw	r9,0(r2)
    f8f4:	20805215 	stw	r2,328(r4)
    f8f8:	10006215 	stw	zero,392(r2)
    f8fc:	10006315 	stw	zero,396(r2)
    f900:	883fde26 	beq	r17,zero,f87c <__alt_exception_stack_pointer+0xf800f87c>
    f904:	18c9883a 	add	r4,r3,r3
    f908:	2109883a 	add	r4,r4,r4
    f90c:	1109883a 	add	r4,r2,r4
    f910:	21802215 	stw	r6,136(r4)
    f914:	01800044 	movi	r6,1
    f918:	12406217 	ldw	r9,392(r2)
    f91c:	30cc983a 	sll	r6,r6,r3
    f920:	4992b03a 	or	r9,r9,r6
    f924:	12406215 	stw	r9,392(r2)
    f928:	21c04215 	stw	r7,264(r4)
    f92c:	01000084 	movi	r4,2
    f930:	893fd21e 	bne	r17,r4,f87c <__alt_exception_stack_pointer+0xf800f87c>
    f934:	11006317 	ldw	r4,396(r2)
    f938:	218cb03a 	or	r6,r4,r6
    f93c:	11806315 	stw	r6,396(r2)
    f940:	003fce06 	br	f87c <__alt_exception_stack_pointer+0xf800f87c>
    f944:	18805304 	addi	r2,r3,332
    f948:	18805215 	stw	r2,328(r3)
    f94c:	003fc606 	br	f868 <__alt_exception_stack_pointer+0xf800f868>
    f950:	00bfffc4 	movi	r2,-1
    f954:	003fd006 	br	f898 <__alt_exception_stack_pointer+0xf800f898>

0000f958 <__call_exitprocs>:
    f958:	defff504 	addi	sp,sp,-44
    f95c:	df000915 	stw	fp,36(sp)
    f960:	dd400615 	stw	r21,24(sp)
    f964:	dc800315 	stw	r18,12(sp)
    f968:	dfc00a15 	stw	ra,40(sp)
    f96c:	ddc00815 	stw	r23,32(sp)
    f970:	dd800715 	stw	r22,28(sp)
    f974:	dd000515 	stw	r20,20(sp)
    f978:	dcc00415 	stw	r19,16(sp)
    f97c:	dc400215 	stw	r17,8(sp)
    f980:	dc000115 	stw	r16,4(sp)
    f984:	d9000015 	stw	r4,0(sp)
    f988:	2839883a 	mov	fp,r5
    f98c:	04800044 	movi	r18,1
    f990:	057fffc4 	movi	r21,-1
    f994:	00800074 	movhi	r2,1
    f998:	10863704 	addi	r2,r2,6364
    f99c:	12000017 	ldw	r8,0(r2)
    f9a0:	45005217 	ldw	r20,328(r8)
    f9a4:	44c05204 	addi	r19,r8,328
    f9a8:	a0001c26 	beq	r20,zero,fa1c <__call_exitprocs+0xc4>
    f9ac:	a0800117 	ldw	r2,4(r20)
    f9b0:	15ffffc4 	addi	r23,r2,-1
    f9b4:	b8000d16 	blt	r23,zero,f9ec <__call_exitprocs+0x94>
    f9b8:	14000044 	addi	r16,r2,1
    f9bc:	8421883a 	add	r16,r16,r16
    f9c0:	8421883a 	add	r16,r16,r16
    f9c4:	84402004 	addi	r17,r16,128
    f9c8:	a463883a 	add	r17,r20,r17
    f9cc:	a421883a 	add	r16,r20,r16
    f9d0:	e0001e26 	beq	fp,zero,fa4c <__call_exitprocs+0xf4>
    f9d4:	80804017 	ldw	r2,256(r16)
    f9d8:	e0801c26 	beq	fp,r2,fa4c <__call_exitprocs+0xf4>
    f9dc:	bdffffc4 	addi	r23,r23,-1
    f9e0:	843fff04 	addi	r16,r16,-4
    f9e4:	8c7fff04 	addi	r17,r17,-4
    f9e8:	bd7ff91e 	bne	r23,r21,f9d0 <__alt_exception_stack_pointer+0xf800f9d0>
    f9ec:	00800034 	movhi	r2,0
    f9f0:	10813b04 	addi	r2,r2,1260
    f9f4:	10000926 	beq	r2,zero,fa1c <__call_exitprocs+0xc4>
    f9f8:	a0800117 	ldw	r2,4(r20)
    f9fc:	1000301e 	bne	r2,zero,fac0 <__call_exitprocs+0x168>
    fa00:	a0800017 	ldw	r2,0(r20)
    fa04:	10003226 	beq	r2,zero,fad0 <__call_exitprocs+0x178>
    fa08:	a009883a 	mov	r4,r20
    fa0c:	98800015 	stw	r2,0(r19)
    fa10:	00004ec0 	call	4ec <free>
    fa14:	9d000017 	ldw	r20,0(r19)
    fa18:	a03fe41e 	bne	r20,zero,f9ac <__alt_exception_stack_pointer+0xf800f9ac>
    fa1c:	dfc00a17 	ldw	ra,40(sp)
    fa20:	df000917 	ldw	fp,36(sp)
    fa24:	ddc00817 	ldw	r23,32(sp)
    fa28:	dd800717 	ldw	r22,28(sp)
    fa2c:	dd400617 	ldw	r21,24(sp)
    fa30:	dd000517 	ldw	r20,20(sp)
    fa34:	dcc00417 	ldw	r19,16(sp)
    fa38:	dc800317 	ldw	r18,12(sp)
    fa3c:	dc400217 	ldw	r17,8(sp)
    fa40:	dc000117 	ldw	r16,4(sp)
    fa44:	dec00b04 	addi	sp,sp,44
    fa48:	f800283a 	ret
    fa4c:	a0800117 	ldw	r2,4(r20)
    fa50:	80c00017 	ldw	r3,0(r16)
    fa54:	10bfffc4 	addi	r2,r2,-1
    fa58:	15c01426 	beq	r2,r23,faac <__call_exitprocs+0x154>
    fa5c:	80000015 	stw	zero,0(r16)
    fa60:	183fde26 	beq	r3,zero,f9dc <__alt_exception_stack_pointer+0xf800f9dc>
    fa64:	95c8983a 	sll	r4,r18,r23
    fa68:	a0806217 	ldw	r2,392(r20)
    fa6c:	a5800117 	ldw	r22,4(r20)
    fa70:	2084703a 	and	r2,r4,r2
    fa74:	10000b26 	beq	r2,zero,faa4 <__call_exitprocs+0x14c>
    fa78:	a0806317 	ldw	r2,396(r20)
    fa7c:	2088703a 	and	r4,r4,r2
    fa80:	20000c1e 	bne	r4,zero,fab4 <__call_exitprocs+0x15c>
    fa84:	89400017 	ldw	r5,0(r17)
    fa88:	d9000017 	ldw	r4,0(sp)
    fa8c:	183ee83a 	callr	r3
    fa90:	a0800117 	ldw	r2,4(r20)
    fa94:	15bfbf1e 	bne	r2,r22,f994 <__alt_exception_stack_pointer+0xf800f994>
    fa98:	98800017 	ldw	r2,0(r19)
    fa9c:	153fcf26 	beq	r2,r20,f9dc <__alt_exception_stack_pointer+0xf800f9dc>
    faa0:	003fbc06 	br	f994 <__alt_exception_stack_pointer+0xf800f994>
    faa4:	183ee83a 	callr	r3
    faa8:	003ff906 	br	fa90 <__alt_exception_stack_pointer+0xf800fa90>
    faac:	a5c00115 	stw	r23,4(r20)
    fab0:	003feb06 	br	fa60 <__alt_exception_stack_pointer+0xf800fa60>
    fab4:	89000017 	ldw	r4,0(r17)
    fab8:	183ee83a 	callr	r3
    fabc:	003ff406 	br	fa90 <__alt_exception_stack_pointer+0xf800fa90>
    fac0:	a0800017 	ldw	r2,0(r20)
    fac4:	a027883a 	mov	r19,r20
    fac8:	1029883a 	mov	r20,r2
    facc:	003fb606 	br	f9a8 <__alt_exception_stack_pointer+0xf800f9a8>
    fad0:	0005883a 	mov	r2,zero
    fad4:	003ffb06 	br	fac4 <__alt_exception_stack_pointer+0xf800fac4>

0000fad8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fad8:	defffd04 	addi	sp,sp,-12
    fadc:	df000215 	stw	fp,8(sp)
    fae0:	df000204 	addi	fp,sp,8
    fae4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fae8:	0001883a 	nop
    faec:	e0bfff17 	ldw	r2,-4(fp)
    faf0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    faf4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    faf8:	10000226 	beq	r2,zero,fb04 <_exit+0x2c>
    ALT_SIM_FAIL();
    fafc:	002af070 	cmpltui	zero,zero,43969
    fb00:	00000106 	br	fb08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fb04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fb08:	003fff06 	br	fb08 <__alt_exception_stack_pointer+0xf800fb08>
