
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003784 memsz 0x00003784 flags r-x
    LOAD off    0x000047a4 vaddr 0x000037a4 paddr 0x0000520c align 2**12
         filesz 0x00001a68 memsz 0x00001a68 flags rw-
    LOAD off    0x00006c74 vaddr 0x00006c74 paddr 0x00006c74 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003524  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00003760  00003760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a68  000037a4  0000520c  000047a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00006c74  00006c74  00006c74  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00006dc8  00006dc8  0000620c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006c8  00000000  00000000  00006230  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b1aa  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037e4  00000000  00000000  00011aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003934  00000000  00000000  00015286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d20  00000000  00000000  00018bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000208f  00000000  00000000  000198dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d83  00000000  00000000  0001b96b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0001d700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001f712  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0001f715  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f71a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f71b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001f71c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001f727  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001f72b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0001f736  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0001f73f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004eb9  00000000  00000000  0001f767  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004dd1a  00000000  00000000  00024620  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00003760 l    d  .rodata	00000000 .rodata
000037a4 l    d  .rwdata	00000000 .rwdata
00006c74 l    d  .bss	00000000 .bss
00006dc8 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00003bac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00001350 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000051e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
000015b0 l     F .text	00000034 alt_dev_reg
00003fd0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000018a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00001aac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000020e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002304 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002438 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000028c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002a24 l     F .text	0000003c alt_get_errno
00002a60 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006c9c g     O .bss	00000004 alt_instruction_exception_handler
0000143c g     F .text	0000007c alt_main
00006cc8 g     O .bss	00000100 alt_irq
0000520c g       *ABS*	00000000 __flash_rwdata_start
00006dc8 g       *ABS*	00000000 __alt_heap_start
000014dc g     F .text	00000024 __malloc_unlock
00002ed0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006c80 g     O .bss	00000004 errno
00006c88 g     O .bss	00000004 alt_argv
0000d1d8 g       *ABS*	00000000 _gp
00005058 g     O .rwdata	00000180 alt_fd_list
00002ef4 g     F .text	00000090 alt_find_dev
000032b4 g     F .text	00000148 memcpy
000029a8 g     F .text	0000007c alt_io_redirect
00003760 g       *ABS*	00000000 __DTOR_END__
00003150 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001ca4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000694 g     F .text	00000014 malloc
000005b0 g     F .text	00000064 .hidden __udivsi3
00006c7c g     O .bss	00000004 __malloc_top_pad
00000ec8 g     F .text	00000054 _sbrk_r
000051fc g     O .rwdata	00000004 alt_max_fd
00006c78 g     O .bss	00000004 __malloc_max_sbrked_mem
000051e0 g     O .rwdata	00000004 _global_impure_ptr
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
00006dc8 g       *ABS*	00000000 __bss_end
000027d4 g     F .text	000000f0 alt_iic_isr_register
00002dc8 g     F .text	00000108 alt_tick
00002788 g     F .text	0000004c alt_ic_irq_enabled
00002d2c g     F .text	0000009c alt_alarm_stop
00006c90 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00005030 g     O .rwdata	00000028 alt_dev_null
00002418 g     F .text	00000020 alt_dcache_flush_all
0000520c g       *ABS*	00000000 __ram_rwdata_end
000051f4 g     O .rwdata	00000008 alt_dev_list
000037a4 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00000614 g     F .text	00000058 .hidden __umodsi3
00006dc8 g       *ABS*	00000000 end
000017e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
00003760 g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000215c g     F .text	0000007c alt_avalon_timer_sc_init
00001ec0 g     F .text	00000224 altera_avalon_jtag_uart_write
00001040 g     F .text	00000310 _free_r
000035ac g     F .text	00000180 __call_exitprocs
000051d8 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00006c94 g     O .bss	00000004 _alt_tick_rate
00006c98 g     O .bss	00000004 _alt_nticks
0000161c g     F .text	00000060 alt_sys_init
00003494 g     F .text	00000118 __register_exitproc
00001b4c g     F .text	00000068 altera_avalon_jtag_uart_close
0000066c g     F .text	00000028 .hidden __mulsi3
000037a4 g       *ABS*	00000000 __ram_rwdata_start
00003760 g       *ABS*	00000000 __ram_rodata_start
00006ca0 g     O .bss	00000028 __malloc_current_mallinfo
0000167c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000308c g     F .text	000000c4 alt_get_fd
00003238 g     F .text	0000007c memcmp
0000173c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00006dc8 g       *ABS*	00000000 __alt_stack_base
0000178c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000037a4 g     O .rwdata	00000408 __malloc_av_
00002f84 g     F .text	00000108 alt_find_file
000024a0 g     F .text	000000a4 alt_dev_llist_insert
000014b8 g     F .text	00000024 __malloc_lock
00001500 g     F .text	000000b0 sbrk
00006c74 g       *ABS*	00000000 __bss_start
00000278 g     F .text	00000240 main
00006c8c g     O .bss	00000004 alt_envp
00006c74 g     O .bss	00000004 __malloc_max_total_mem
000016dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
07fffc00 g       *ABS*	00000000 __alt_heap_limit
000006bc g     F .text	0000080c _malloc_r
00005200 g     O .rwdata	00000004 alt_errno
000004b8 g     F .text	00000084 .hidden __divsi3
00000f1c g     F .text	00000124 _malloc_trim_r
00003760 g       *ABS*	00000000 __CTOR_END__
00003760 g       *ABS*	00000000 __flash_rodata_start
00003760 g       *ABS*	00000000 __DTOR_LIST__
000015e4 g     F .text	00000038 alt_irq_init
00002ca8 g     F .text	00000084 alt_release_fd
000031ec g     F .text	00000014 atexit
000051e4 g     O .rwdata	00000004 _impure_ptr
00006c84 g     O .bss	00000004 alt_argc
000025a4 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000051ec g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002624 g     F .text	00000050 alt_ic_isr_register
0000520c g       *ABS*	00000000 _edata
00006dc8 g       *ABS*	00000000 _end
0000023c g       *ABS*	00000000 __ram_exceptions_end
00001bb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000026fc g     F .text	0000008c alt_ic_irq_disable
000051dc g     O .rwdata	00000004 __malloc_trim_threshold
00003200 g     F .text	00000038 exit
0000053c g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000372c g     F .text	00000034 _exit
000021d8 g     F .text	0000012c alt_alarm_start
000033fc g     F .text	00000098 strlen
00002b4c g     F .text	0000015c open
00002604 g     F .text	00000020 alt_icache_flush_all
00002674 g     F .text	00000088 alt_ic_irq_enable
00005204 g     O .rwdata	00000008 alt_alarm_list
00002544 g     F .text	00000060 _do_ctors
00002340 g     F .text	000000d8 close
000013b8 g     F .text	00000084 alt_load
000006a8 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00800034 	movhi	r2,0
 14c:	109b3204 	addi	r2,r2,27848
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00800034 	movhi	r2,0
 164:	109b3204 	addi	r2,r2,27848
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6b117 	ldw	r2,-25916(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6b117 	ldw	r2,-25916(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     248:	d6b47614 	ori	gp,gp,53720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     250:	109b1d14 	ori	r2,r2,27764

    movhi r3, %hi(__bss_end)
     254:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     258:	18db7214 	ori	r3,r3,28104

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	00013b80 	call	13b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000143c0 	call	143c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <main>:
//	//printf ("Transfer successful!\n");
//	return 0;
//}

int main()
{
     278:	defff304 	addi	sp,sp,-52
     27c:	dfc00c15 	stw	ra,48(sp)
     280:	df000b15 	stw	fp,44(sp)
     284:	dc000a15 	stw	r16,40(sp)
     288:	df000b04 	addi	fp,sp,44
	int i = 0;
     28c:	e03ff815 	stw	zero,-32(fp)
	int height = 0;
     290:	e03ff915 	stw	zero,-28(fp)

	volatile struct vga_controller_t* vga_cont = VGA_CONTROLLER_0_BASE;
     294:	00820034 	movhi	r2,2048
     298:	10841c04 	addi	r2,r2,4208
     29c:	e0bffa15 	stw	r2,-24(fp)

	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));
     2a0:	010004f4 	movhi	r4,19
     2a4:	21300004 	addi	r4,r4,-16384
     2a8:	00006940 	call	694 <malloc>
     2ac:	e0bffb15 	stw	r2,-20(fp)

	vga_cont->frame_pointer = frame1;
     2b0:	e0bffa17 	ldw	r2,-24(fp)
     2b4:	e0fffb17 	ldw	r3,-20(fp)
     2b8:	10c00015 	stw	r3,0(r2)
	vga_cont->should_draw = 527;
     2bc:	e0bffa17 	ldw	r2,-24(fp)
     2c0:	00c083c4 	movi	r3,527
     2c4:	10c00115 	stw	r3,4(r2)
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     2c8:	e03ff515 	stw	zero,-44(fp)
     2cc:	00002a06 	br	378 <main+0x100>
		for(int x =0; x < SCREEN_WIDTH; x++) {
     2d0:	e03ff615 	stw	zero,-40(fp)
     2d4:	00002206 	br	360 <main+0xe8>
			//struct pixel_t p = {{(y*255) / SCREEN_HEIGHT, (x*255) / SCREEN_WIDTH,0, 0}};
			struct pixel_t p = {.r = 0, .g = 255, .b = 0, .a = 0};  //? B G R
     2d8:	e03ffd05 	stb	zero,-12(fp)
     2dc:	00bfffc4 	movi	r2,-1
     2e0:	e0bffd45 	stb	r2,-11(fp)
     2e4:	e03ffd85 	stb	zero,-10(fp)
     2e8:	e03ffdc5 	stb	zero,-9(fp)
			p.r = (y * 255)/20;
     2ec:	01403fc4 	movi	r5,255
     2f0:	e13ff517 	ldw	r4,-44(fp)
     2f4:	000066c0 	call	66c <__mulsi3>
     2f8:	01400504 	movi	r5,20
     2fc:	1009883a 	mov	r4,r2
     300:	00004b80 	call	4b8 <__divsi3>
     304:	e0bffd05 	stb	r2,-12(fp)
			frame1->D2[y][x] = p;
     308:	e43ffb17 	ldw	r16,-20(fp)
     30c:	e0bff517 	ldw	r2,-44(fp)
     310:	0140a004 	movi	r5,640
     314:	1009883a 	mov	r4,r2
     318:	000066c0 	call	66c <__mulsi3>
     31c:	1007883a 	mov	r3,r2
     320:	e0bff617 	ldw	r2,-40(fp)
     324:	1885883a 	add	r2,r3,r2
     328:	1085883a 	add	r2,r2,r2
     32c:	1085883a 	add	r2,r2,r2
     330:	8085883a 	add	r2,r16,r2
     334:	e0fffd03 	ldbu	r3,-12(fp)
     338:	10c00005 	stb	r3,0(r2)
     33c:	e0fffd43 	ldbu	r3,-11(fp)
     340:	10c00045 	stb	r3,1(r2)
     344:	e0fffd83 	ldbu	r3,-10(fp)
     348:	10c00085 	stb	r3,2(r2)
     34c:	e0fffdc3 	ldbu	r3,-9(fp)
     350:	10c000c5 	stb	r3,3(r2)

	vga_cont->frame_pointer = frame1;
	vga_cont->should_draw = 527;
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
		for(int x =0; x < SCREEN_WIDTH; x++) {
     354:	e0bff617 	ldw	r2,-40(fp)
     358:	10800044 	addi	r2,r2,1
     35c:	e0bff615 	stw	r2,-40(fp)
     360:	e0bff617 	ldw	r2,-40(fp)
     364:	1080a010 	cmplti	r2,r2,640
     368:	103fdb1e 	bne	r2,zero,2d8 <__alt_exception_stack_pointer+0xf80002d8>
	union frame_buffer_t* frame1 =  malloc(sizeof(frame_buffer_t));

	vga_cont->frame_pointer = frame1;
	vga_cont->should_draw = 527;
	//clock_t start = clock();
	for(int y = 0; y < SCREEN_HEIGHT; y++) {
     36c:	e0bff517 	ldw	r2,-44(fp)
     370:	10800044 	addi	r2,r2,1
     374:	e0bff515 	stw	r2,-44(fp)
     378:	e0bff517 	ldw	r2,-44(fp)
     37c:	10807810 	cmplti	r2,r2,480
     380:	103fd31e 	bne	r2,zero,2d0 <__alt_exception_stack_pointer+0xf80002d0>
	//	frame1->D1[SCREEN_HEIGHT * SCREEN_WIDTH + i] = p;
	//}
	//clock_t stop = clock();
	//double time_spent = (double)(stop - start) / CLOCKS_PER_SEC;
	//printf("%f\n", time_spent);
	frame1->D2[0][0].r = 0;
     384:	e0bffb17 	ldw	r2,-20(fp)
     388:	10000005 	stb	zero,0(r2)
	frame1->D2[0][0].b = 0;
     38c:	e0bffb17 	ldw	r2,-20(fp)
     390:	10000085 	stb	zero,2(r2)
	frame1->D2[0][0].g = 255;
     394:	e0bffb17 	ldw	r2,-20(fp)
     398:	00ffffc4 	movi	r3,-1
     39c:	10c00045 	stb	r3,1(r2)
	frame1->D2[0][6].r = 0;
     3a0:	e0bffb17 	ldw	r2,-20(fp)
     3a4:	10000605 	stb	zero,24(r2)
	frame1->D2[0][6].b = 255;
     3a8:	e0bffb17 	ldw	r2,-20(fp)
     3ac:	00ffffc4 	movi	r3,-1
     3b0:	10c00685 	stb	r3,26(r2)
	frame1->D2[0][6].g = 0;
     3b4:	e0bffb17 	ldw	r2,-20(fp)
     3b8:	10000645 	stb	zero,25(r2)
	//frame1->D2[0][9].g = 255;
	//frame1->D2[0][9].r = 0;
	//frame1->D2[0][9].g = 255;
	//frame1->D2[2][10].r = 255;

	for(int x = 0; x < SCREEN_WIDTH; x++) {
     3bc:	e03ff715 	stw	zero,-36(fp)
     3c0:	00001606 	br	41c <main+0x1a4>
		struct pixel_t p = {.r = 0, .g = x, .b = 0, .a = 0};  //? B G R
     3c4:	e03ffe05 	stb	zero,-8(fp)
     3c8:	e0bff717 	ldw	r2,-36(fp)
     3cc:	e0bffe45 	stb	r2,-7(fp)
     3d0:	e03ffe85 	stb	zero,-6(fp)
     3d4:	e03ffec5 	stb	zero,-5(fp)
		frame1->D2[2][x] = p;
     3d8:	e0fffb17 	ldw	r3,-20(fp)
     3dc:	e0bff717 	ldw	r2,-36(fp)
     3e0:	10814004 	addi	r2,r2,1280
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	e0fffe03 	ldbu	r3,-8(fp)
     3f4:	10c00005 	stb	r3,0(r2)
     3f8:	e0fffe43 	ldbu	r3,-7(fp)
     3fc:	10c00045 	stb	r3,1(r2)
     400:	e0fffe83 	ldbu	r3,-6(fp)
     404:	10c00085 	stb	r3,2(r2)
     408:	e0fffec3 	ldbu	r3,-5(fp)
     40c:	10c000c5 	stb	r3,3(r2)
	//frame1->D2[0][9].g = 255;
	//frame1->D2[0][9].r = 0;
	//frame1->D2[0][9].g = 255;
	//frame1->D2[2][10].r = 255;

	for(int x = 0; x < SCREEN_WIDTH; x++) {
     410:	e0bff717 	ldw	r2,-36(fp)
     414:	10800044 	addi	r2,r2,1
     418:	e0bff715 	stw	r2,-36(fp)
     41c:	e0bff717 	ldw	r2,-36(fp)
     420:	1080a010 	cmplti	r2,r2,640
     424:	103fe71e 	bne	r2,zero,3c4 <__alt_exception_stack_pointer+0xf80003c4>
		struct pixel_t p = {.r = 0, .g = x, .b = 0, .a = 0};  //? B G R
		frame1->D2[2][x] = p;
	}
	frame1->D2[0][6].r = 0;
     428:	e0bffb17 	ldw	r2,-20(fp)
     42c:	10000605 	stb	zero,24(r2)
	frame1->D2[0][6].b = 255;
     430:	e0bffb17 	ldw	r2,-20(fp)
     434:	00ffffc4 	movi	r3,-1
     438:	10c00685 	stb	r3,26(r2)
	frame1->D2[0][6].g = 0;
     43c:	e0bffb17 	ldw	r2,-20(fp)
     440:	10000645 	stb	zero,25(r2)
	frame1->D2[0][1].r = 0;
     444:	e0bffb17 	ldw	r2,-20(fp)
     448:	10000105 	stb	zero,4(r2)
	frame1->D2[0][1].b = 255;
     44c:	e0bffb17 	ldw	r2,-20(fp)
     450:	00ffffc4 	movi	r3,-1
     454:	10c00185 	stb	r3,6(r2)
	frame1->D2[0][1].g = 0;
     458:	e0bffb17 	ldw	r2,-20(fp)
     45c:	10000145 	stb	zero,5(r2)

	frame1->D2[2][0].r = 0;
     460:	e0bffb17 	ldw	r2,-20(fp)
     464:	10050005 	stb	zero,5120(r2)
	frame1->D2[2][0].b = 0;
     468:	e0bffb17 	ldw	r2,-20(fp)
     46c:	10050085 	stb	zero,5122(r2)
	frame1->D2[2][0].g = 0;
     470:	e0bffb17 	ldw	r2,-20(fp)
     474:	10050045 	stb	zero,5121(r2)

	frame1->D2[0][SCREEN_WIDTH-5].r = 0;
     478:	e0bffb17 	ldw	r2,-20(fp)
     47c:	10027b05 	stb	zero,2540(r2)
	frame1->D2[0][SCREEN_WIDTH-5].b = 255;
     480:	e0bffb17 	ldw	r2,-20(fp)
     484:	00ffffc4 	movi	r3,-1
     488:	10c27b85 	stb	r3,2542(r2)
	frame1->D2[0][SCREEN_WIDTH-5].g = 0;
     48c:	e0bffb17 	ldw	r2,-20(fp)
     490:	10027b45 	stb	zero,2541(r2)



	height = 0;
     494:	e03ff915 	stw	zero,-28(fp)
	//transfer(frame1->D2[height], vga_cont->line2, sizeof(frame1->D2[0]));
	//transfer(frame1->D2[height], vga_cont->line1, sizeof(frame1->D2[0]));

	int draw_index = 0;
     498:	e03ffc15 	stw	zero,-16(fp)
//    	}
//    	frame1->D2[2][0].r = (draw_index++)/1000;
//    }


    return 1;
     49c:	00800044 	movi	r2,1
}
     4a0:	e6ffff04 	addi	sp,fp,-4
     4a4:	dfc00217 	ldw	ra,8(sp)
     4a8:	df000117 	ldw	fp,4(sp)
     4ac:	dc000017 	ldw	r16,0(sp)
     4b0:	dec00304 	addi	sp,sp,12
     4b4:	f800283a 	ret

000004b8 <__divsi3>:
     4b8:	20001b16 	blt	r4,zero,528 <__divsi3+0x70>
     4bc:	000f883a 	mov	r7,zero
     4c0:	28001616 	blt	r5,zero,51c <__divsi3+0x64>
     4c4:	200d883a 	mov	r6,r4
     4c8:	29001a2e 	bgeu	r5,r4,534 <__divsi3+0x7c>
     4cc:	00800804 	movi	r2,32
     4d0:	00c00044 	movi	r3,1
     4d4:	00000106 	br	4dc <__divsi3+0x24>
     4d8:	10000d26 	beq	r2,zero,510 <__divsi3+0x58>
     4dc:	294b883a 	add	r5,r5,r5
     4e0:	10bfffc4 	addi	r2,r2,-1
     4e4:	18c7883a 	add	r3,r3,r3
     4e8:	293ffb36 	bltu	r5,r4,4d8 <__alt_exception_stack_pointer+0xf80004d8>
     4ec:	0005883a 	mov	r2,zero
     4f0:	18000726 	beq	r3,zero,510 <__divsi3+0x58>
     4f4:	0005883a 	mov	r2,zero
     4f8:	31400236 	bltu	r6,r5,504 <__divsi3+0x4c>
     4fc:	314dc83a 	sub	r6,r6,r5
     500:	10c4b03a 	or	r2,r2,r3
     504:	1806d07a 	srli	r3,r3,1
     508:	280ad07a 	srli	r5,r5,1
     50c:	183ffa1e 	bne	r3,zero,4f8 <__alt_exception_stack_pointer+0xf80004f8>
     510:	38000126 	beq	r7,zero,518 <__divsi3+0x60>
     514:	0085c83a 	sub	r2,zero,r2
     518:	f800283a 	ret
     51c:	014bc83a 	sub	r5,zero,r5
     520:	39c0005c 	xori	r7,r7,1
     524:	003fe706 	br	4c4 <__alt_exception_stack_pointer+0xf80004c4>
     528:	0109c83a 	sub	r4,zero,r4
     52c:	01c00044 	movi	r7,1
     530:	003fe306 	br	4c0 <__alt_exception_stack_pointer+0xf80004c0>
     534:	00c00044 	movi	r3,1
     538:	003fee06 	br	4f4 <__alt_exception_stack_pointer+0xf80004f4>

0000053c <__modsi3>:
     53c:	20001716 	blt	r4,zero,59c <__modsi3+0x60>
     540:	000f883a 	mov	r7,zero
     544:	2005883a 	mov	r2,r4
     548:	28001216 	blt	r5,zero,594 <__modsi3+0x58>
     54c:	2900162e 	bgeu	r5,r4,5a8 <__modsi3+0x6c>
     550:	01800804 	movi	r6,32
     554:	00c00044 	movi	r3,1
     558:	00000106 	br	560 <__modsi3+0x24>
     55c:	30000a26 	beq	r6,zero,588 <__modsi3+0x4c>
     560:	294b883a 	add	r5,r5,r5
     564:	31bfffc4 	addi	r6,r6,-1
     568:	18c7883a 	add	r3,r3,r3
     56c:	293ffb36 	bltu	r5,r4,55c <__alt_exception_stack_pointer+0xf800055c>
     570:	18000526 	beq	r3,zero,588 <__modsi3+0x4c>
     574:	1806d07a 	srli	r3,r3,1
     578:	11400136 	bltu	r2,r5,580 <__modsi3+0x44>
     57c:	1145c83a 	sub	r2,r2,r5
     580:	280ad07a 	srli	r5,r5,1
     584:	183ffb1e 	bne	r3,zero,574 <__alt_exception_stack_pointer+0xf8000574>
     588:	38000126 	beq	r7,zero,590 <__modsi3+0x54>
     58c:	0085c83a 	sub	r2,zero,r2
     590:	f800283a 	ret
     594:	014bc83a 	sub	r5,zero,r5
     598:	003fec06 	br	54c <__alt_exception_stack_pointer+0xf800054c>
     59c:	0109c83a 	sub	r4,zero,r4
     5a0:	01c00044 	movi	r7,1
     5a4:	003fe706 	br	544 <__alt_exception_stack_pointer+0xf8000544>
     5a8:	00c00044 	movi	r3,1
     5ac:	003ff106 	br	574 <__alt_exception_stack_pointer+0xf8000574>

000005b0 <__udivsi3>:
     5b0:	200d883a 	mov	r6,r4
     5b4:	2900152e 	bgeu	r5,r4,60c <__udivsi3+0x5c>
     5b8:	28001416 	blt	r5,zero,60c <__udivsi3+0x5c>
     5bc:	00800804 	movi	r2,32
     5c0:	00c00044 	movi	r3,1
     5c4:	00000206 	br	5d0 <__udivsi3+0x20>
     5c8:	10000e26 	beq	r2,zero,604 <__udivsi3+0x54>
     5cc:	28000516 	blt	r5,zero,5e4 <__udivsi3+0x34>
     5d0:	294b883a 	add	r5,r5,r5
     5d4:	10bfffc4 	addi	r2,r2,-1
     5d8:	18c7883a 	add	r3,r3,r3
     5dc:	293ffa36 	bltu	r5,r4,5c8 <__alt_exception_stack_pointer+0xf80005c8>
     5e0:	18000826 	beq	r3,zero,604 <__udivsi3+0x54>
     5e4:	0005883a 	mov	r2,zero
     5e8:	31400236 	bltu	r6,r5,5f4 <__udivsi3+0x44>
     5ec:	314dc83a 	sub	r6,r6,r5
     5f0:	10c4b03a 	or	r2,r2,r3
     5f4:	1806d07a 	srli	r3,r3,1
     5f8:	280ad07a 	srli	r5,r5,1
     5fc:	183ffa1e 	bne	r3,zero,5e8 <__alt_exception_stack_pointer+0xf80005e8>
     600:	f800283a 	ret
     604:	0005883a 	mov	r2,zero
     608:	f800283a 	ret
     60c:	00c00044 	movi	r3,1
     610:	003ff406 	br	5e4 <__alt_exception_stack_pointer+0xf80005e4>

00000614 <__umodsi3>:
     614:	2005883a 	mov	r2,r4
     618:	2900122e 	bgeu	r5,r4,664 <__umodsi3+0x50>
     61c:	28001116 	blt	r5,zero,664 <__umodsi3+0x50>
     620:	01800804 	movi	r6,32
     624:	00c00044 	movi	r3,1
     628:	00000206 	br	634 <__umodsi3+0x20>
     62c:	30000c26 	beq	r6,zero,660 <__umodsi3+0x4c>
     630:	28000516 	blt	r5,zero,648 <__umodsi3+0x34>
     634:	294b883a 	add	r5,r5,r5
     638:	31bfffc4 	addi	r6,r6,-1
     63c:	18c7883a 	add	r3,r3,r3
     640:	293ffa36 	bltu	r5,r4,62c <__alt_exception_stack_pointer+0xf800062c>
     644:	18000626 	beq	r3,zero,660 <__umodsi3+0x4c>
     648:	1806d07a 	srli	r3,r3,1
     64c:	11400136 	bltu	r2,r5,654 <__umodsi3+0x40>
     650:	1145c83a 	sub	r2,r2,r5
     654:	280ad07a 	srli	r5,r5,1
     658:	183ffb1e 	bne	r3,zero,648 <__alt_exception_stack_pointer+0xf8000648>
     65c:	f800283a 	ret
     660:	f800283a 	ret
     664:	00c00044 	movi	r3,1
     668:	003ff706 	br	648 <__alt_exception_stack_pointer+0xf8000648>

0000066c <__mulsi3>:
     66c:	0005883a 	mov	r2,zero
     670:	20000726 	beq	r4,zero,690 <__mulsi3+0x24>
     674:	20c0004c 	andi	r3,r4,1
     678:	2008d07a 	srli	r4,r4,1
     67c:	18000126 	beq	r3,zero,684 <__mulsi3+0x18>
     680:	1145883a 	add	r2,r2,r5
     684:	294b883a 	add	r5,r5,r5
     688:	203ffa1e 	bne	r4,zero,674 <__alt_exception_stack_pointer+0xf8000674>
     68c:	f800283a 	ret
     690:	f800283a 	ret

00000694 <malloc>:
     694:	00800034 	movhi	r2,0
     698:	10947904 	addi	r2,r2,20964
     69c:	200b883a 	mov	r5,r4
     6a0:	11000017 	ldw	r4,0(r2)
     6a4:	00006bc1 	jmpi	6bc <_malloc_r>

000006a8 <free>:
     6a8:	00800034 	movhi	r2,0
     6ac:	10947904 	addi	r2,r2,20964
     6b0:	200b883a 	mov	r5,r4
     6b4:	11000017 	ldw	r4,0(r2)
     6b8:	00010401 	jmpi	1040 <_free_r>

000006bc <_malloc_r>:
     6bc:	defff504 	addi	sp,sp,-44
     6c0:	dc800315 	stw	r18,12(sp)
     6c4:	dfc00a15 	stw	ra,40(sp)
     6c8:	df000915 	stw	fp,36(sp)
     6cc:	ddc00815 	stw	r23,32(sp)
     6d0:	dd800715 	stw	r22,28(sp)
     6d4:	dd400615 	stw	r21,24(sp)
     6d8:	dd000515 	stw	r20,20(sp)
     6dc:	dcc00415 	stw	r19,16(sp)
     6e0:	dc400215 	stw	r17,8(sp)
     6e4:	dc000115 	stw	r16,4(sp)
     6e8:	288002c4 	addi	r2,r5,11
     6ec:	00c00584 	movi	r3,22
     6f0:	2025883a 	mov	r18,r4
     6f4:	18807f2e 	bgeu	r3,r2,8f4 <_malloc_r+0x238>
     6f8:	047ffe04 	movi	r17,-8
     6fc:	1462703a 	and	r17,r2,r17
     700:	8800a316 	blt	r17,zero,990 <_malloc_r+0x2d4>
     704:	8940a236 	bltu	r17,r5,990 <_malloc_r+0x2d4>
     708:	00014b80 	call	14b8 <__malloc_lock>
     70c:	00807dc4 	movi	r2,503
     710:	1441e92e 	bgeu	r2,r17,eb8 <_malloc_r+0x7fc>
     714:	8804d27a 	srli	r2,r17,9
     718:	1000a126 	beq	r2,zero,9a0 <_malloc_r+0x2e4>
     71c:	00c00104 	movi	r3,4
     720:	18811e36 	bltu	r3,r2,b9c <_malloc_r+0x4e0>
     724:	8804d1ba 	srli	r2,r17,6
     728:	12000e44 	addi	r8,r2,57
     72c:	11c00e04 	addi	r7,r2,56
     730:	4209883a 	add	r4,r8,r8
     734:	04c00034 	movhi	r19,0
     738:	2109883a 	add	r4,r4,r4
     73c:	9ccde904 	addi	r19,r19,14244
     740:	2109883a 	add	r4,r4,r4
     744:	9909883a 	add	r4,r19,r4
     748:	24000117 	ldw	r16,4(r4)
     74c:	213ffe04 	addi	r4,r4,-8
     750:	24009726 	beq	r4,r16,9b0 <_malloc_r+0x2f4>
     754:	80800117 	ldw	r2,4(r16)
     758:	01bfff04 	movi	r6,-4
     75c:	014003c4 	movi	r5,15
     760:	1184703a 	and	r2,r2,r6
     764:	1447c83a 	sub	r3,r2,r17
     768:	28c00716 	blt	r5,r3,788 <_malloc_r+0xcc>
     76c:	1800920e 	bge	r3,zero,9b8 <_malloc_r+0x2fc>
     770:	84000317 	ldw	r16,12(r16)
     774:	24008e26 	beq	r4,r16,9b0 <_malloc_r+0x2f4>
     778:	80800117 	ldw	r2,4(r16)
     77c:	1184703a 	and	r2,r2,r6
     780:	1447c83a 	sub	r3,r2,r17
     784:	28fff90e 	bge	r5,r3,76c <__alt_exception_stack_pointer+0xf800076c>
     788:	3809883a 	mov	r4,r7
     78c:	01800034 	movhi	r6,0
     790:	9c000417 	ldw	r16,16(r19)
     794:	318de904 	addi	r6,r6,14244
     798:	32000204 	addi	r8,r6,8
     79c:	82013426 	beq	r16,r8,c70 <_malloc_r+0x5b4>
     7a0:	80c00117 	ldw	r3,4(r16)
     7a4:	00bfff04 	movi	r2,-4
     7a8:	188e703a 	and	r7,r3,r2
     7ac:	3c45c83a 	sub	r2,r7,r17
     7b0:	00c003c4 	movi	r3,15
     7b4:	18811f16 	blt	r3,r2,c34 <_malloc_r+0x578>
     7b8:	32000515 	stw	r8,20(r6)
     7bc:	32000415 	stw	r8,16(r6)
     7c0:	10007f0e 	bge	r2,zero,9c0 <_malloc_r+0x304>
     7c4:	00807fc4 	movi	r2,511
     7c8:	11c0fd36 	bltu	r2,r7,bc0 <_malloc_r+0x504>
     7cc:	3806d0fa 	srli	r3,r7,3
     7d0:	01c00044 	movi	r7,1
     7d4:	30800117 	ldw	r2,4(r6)
     7d8:	19400044 	addi	r5,r3,1
     7dc:	294b883a 	add	r5,r5,r5
     7e0:	1807d0ba 	srai	r3,r3,2
     7e4:	294b883a 	add	r5,r5,r5
     7e8:	294b883a 	add	r5,r5,r5
     7ec:	298b883a 	add	r5,r5,r6
     7f0:	38c6983a 	sll	r3,r7,r3
     7f4:	29c00017 	ldw	r7,0(r5)
     7f8:	2a7ffe04 	addi	r9,r5,-8
     7fc:	1886b03a 	or	r3,r3,r2
     800:	82400315 	stw	r9,12(r16)
     804:	81c00215 	stw	r7,8(r16)
     808:	30c00115 	stw	r3,4(r6)
     80c:	2c000015 	stw	r16,0(r5)
     810:	3c000315 	stw	r16,12(r7)
     814:	2005d0ba 	srai	r2,r4,2
     818:	01400044 	movi	r5,1
     81c:	288a983a 	sll	r5,r5,r2
     820:	19406f36 	bltu	r3,r5,9e0 <_malloc_r+0x324>
     824:	28c4703a 	and	r2,r5,r3
     828:	10000a1e 	bne	r2,zero,854 <_malloc_r+0x198>
     82c:	00bfff04 	movi	r2,-4
     830:	294b883a 	add	r5,r5,r5
     834:	2088703a 	and	r4,r4,r2
     838:	28c4703a 	and	r2,r5,r3
     83c:	21000104 	addi	r4,r4,4
     840:	1000041e 	bne	r2,zero,854 <_malloc_r+0x198>
     844:	294b883a 	add	r5,r5,r5
     848:	28c4703a 	and	r2,r5,r3
     84c:	21000104 	addi	r4,r4,4
     850:	103ffc26 	beq	r2,zero,844 <__alt_exception_stack_pointer+0xf8000844>
     854:	02bfff04 	movi	r10,-4
     858:	024003c4 	movi	r9,15
     85c:	21800044 	addi	r6,r4,1
     860:	318d883a 	add	r6,r6,r6
     864:	318d883a 	add	r6,r6,r6
     868:	318d883a 	add	r6,r6,r6
     86c:	998d883a 	add	r6,r19,r6
     870:	333ffe04 	addi	r12,r6,-8
     874:	2017883a 	mov	r11,r4
     878:	31800104 	addi	r6,r6,4
     87c:	34000017 	ldw	r16,0(r6)
     880:	31fffd04 	addi	r7,r6,-12
     884:	81c0041e 	bne	r16,r7,898 <_malloc_r+0x1dc>
     888:	0000fb06 	br	c78 <_malloc_r+0x5bc>
     88c:	1801030e 	bge	r3,zero,c9c <_malloc_r+0x5e0>
     890:	84000317 	ldw	r16,12(r16)
     894:	81c0f826 	beq	r16,r7,c78 <_malloc_r+0x5bc>
     898:	80800117 	ldw	r2,4(r16)
     89c:	1284703a 	and	r2,r2,r10
     8a0:	1447c83a 	sub	r3,r2,r17
     8a4:	48fff90e 	bge	r9,r3,88c <__alt_exception_stack_pointer+0xf800088c>
     8a8:	80800317 	ldw	r2,12(r16)
     8ac:	81000217 	ldw	r4,8(r16)
     8b0:	89400054 	ori	r5,r17,1
     8b4:	81400115 	stw	r5,4(r16)
     8b8:	20800315 	stw	r2,12(r4)
     8bc:	11000215 	stw	r4,8(r2)
     8c0:	8463883a 	add	r17,r16,r17
     8c4:	9c400515 	stw	r17,20(r19)
     8c8:	9c400415 	stw	r17,16(r19)
     8cc:	18800054 	ori	r2,r3,1
     8d0:	88800115 	stw	r2,4(r17)
     8d4:	8a000315 	stw	r8,12(r17)
     8d8:	8a000215 	stw	r8,8(r17)
     8dc:	88e3883a 	add	r17,r17,r3
     8e0:	88c00015 	stw	r3,0(r17)
     8e4:	9009883a 	mov	r4,r18
     8e8:	00014dc0 	call	14dc <__malloc_unlock>
     8ec:	80800204 	addi	r2,r16,8
     8f0:	00001b06 	br	960 <_malloc_r+0x2a4>
     8f4:	04400404 	movi	r17,16
     8f8:	89402536 	bltu	r17,r5,990 <_malloc_r+0x2d4>
     8fc:	00014b80 	call	14b8 <__malloc_lock>
     900:	00800184 	movi	r2,6
     904:	01000084 	movi	r4,2
     908:	04c00034 	movhi	r19,0
     90c:	1085883a 	add	r2,r2,r2
     910:	9ccde904 	addi	r19,r19,14244
     914:	1085883a 	add	r2,r2,r2
     918:	9885883a 	add	r2,r19,r2
     91c:	14000117 	ldw	r16,4(r2)
     920:	10fffe04 	addi	r3,r2,-8
     924:	80c0d926 	beq	r16,r3,c8c <_malloc_r+0x5d0>
     928:	80c00117 	ldw	r3,4(r16)
     92c:	81000317 	ldw	r4,12(r16)
     930:	00bfff04 	movi	r2,-4
     934:	1884703a 	and	r2,r3,r2
     938:	81400217 	ldw	r5,8(r16)
     93c:	8085883a 	add	r2,r16,r2
     940:	10c00117 	ldw	r3,4(r2)
     944:	29000315 	stw	r4,12(r5)
     948:	21400215 	stw	r5,8(r4)
     94c:	18c00054 	ori	r3,r3,1
     950:	10c00115 	stw	r3,4(r2)
     954:	9009883a 	mov	r4,r18
     958:	00014dc0 	call	14dc <__malloc_unlock>
     95c:	80800204 	addi	r2,r16,8
     960:	dfc00a17 	ldw	ra,40(sp)
     964:	df000917 	ldw	fp,36(sp)
     968:	ddc00817 	ldw	r23,32(sp)
     96c:	dd800717 	ldw	r22,28(sp)
     970:	dd400617 	ldw	r21,24(sp)
     974:	dd000517 	ldw	r20,20(sp)
     978:	dcc00417 	ldw	r19,16(sp)
     97c:	dc800317 	ldw	r18,12(sp)
     980:	dc400217 	ldw	r17,8(sp)
     984:	dc000117 	ldw	r16,4(sp)
     988:	dec00b04 	addi	sp,sp,44
     98c:	f800283a 	ret
     990:	00800304 	movi	r2,12
     994:	90800015 	stw	r2,0(r18)
     998:	0005883a 	mov	r2,zero
     99c:	003ff006 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     9a0:	01002004 	movi	r4,128
     9a4:	02001004 	movi	r8,64
     9a8:	01c00fc4 	movi	r7,63
     9ac:	003f6106 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     9b0:	4009883a 	mov	r4,r8
     9b4:	003f7506 	br	78c <__alt_exception_stack_pointer+0xf800078c>
     9b8:	81000317 	ldw	r4,12(r16)
     9bc:	003fde06 	br	938 <__alt_exception_stack_pointer+0xf8000938>
     9c0:	81c5883a 	add	r2,r16,r7
     9c4:	11400117 	ldw	r5,4(r2)
     9c8:	9009883a 	mov	r4,r18
     9cc:	29400054 	ori	r5,r5,1
     9d0:	11400115 	stw	r5,4(r2)
     9d4:	00014dc0 	call	14dc <__malloc_unlock>
     9d8:	80800204 	addi	r2,r16,8
     9dc:	003fe006 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     9e0:	9c000217 	ldw	r16,8(r19)
     9e4:	00bfff04 	movi	r2,-4
     9e8:	85800117 	ldw	r22,4(r16)
     9ec:	b0ac703a 	and	r22,r22,r2
     9f0:	b4400336 	bltu	r22,r17,a00 <_malloc_r+0x344>
     9f4:	b445c83a 	sub	r2,r22,r17
     9f8:	00c003c4 	movi	r3,15
     9fc:	18805d16 	blt	r3,r2,b74 <_malloc_r+0x4b8>
     a00:	05c00034 	movhi	r23,0
     a04:	00800034 	movhi	r2,0
     a08:	109b1f04 	addi	r2,r2,27772
     a0c:	bdd47604 	addi	r23,r23,20952
     a10:	15400017 	ldw	r21,0(r2)
     a14:	b8c00017 	ldw	r3,0(r23)
     a18:	00bfffc4 	movi	r2,-1
     a1c:	858d883a 	add	r6,r16,r22
     a20:	8d6b883a 	add	r21,r17,r21
     a24:	1880ea26 	beq	r3,r2,dd0 <_malloc_r+0x714>
     a28:	ad4403c4 	addi	r21,r21,4111
     a2c:	00bc0004 	movi	r2,-4096
     a30:	a8aa703a 	and	r21,r21,r2
     a34:	a80b883a 	mov	r5,r21
     a38:	9009883a 	mov	r4,r18
     a3c:	d9800015 	stw	r6,0(sp)
     a40:	0000ec80 	call	ec8 <_sbrk_r>
     a44:	1029883a 	mov	r20,r2
     a48:	00bfffc4 	movi	r2,-1
     a4c:	d9800017 	ldw	r6,0(sp)
     a50:	a080e826 	beq	r20,r2,df4 <_malloc_r+0x738>
     a54:	a180a636 	bltu	r20,r6,cf0 <_malloc_r+0x634>
     a58:	07000034 	movhi	fp,0
     a5c:	e71b2804 	addi	fp,fp,27808
     a60:	e0800017 	ldw	r2,0(fp)
     a64:	a887883a 	add	r3,r21,r2
     a68:	e0c00015 	stw	r3,0(fp)
     a6c:	3500e626 	beq	r6,r20,e08 <_malloc_r+0x74c>
     a70:	b9000017 	ldw	r4,0(r23)
     a74:	00bfffc4 	movi	r2,-1
     a78:	2080ee26 	beq	r4,r2,e34 <_malloc_r+0x778>
     a7c:	a185c83a 	sub	r2,r20,r6
     a80:	10c5883a 	add	r2,r2,r3
     a84:	e0800015 	stw	r2,0(fp)
     a88:	a0c001cc 	andi	r3,r20,7
     a8c:	1800bc26 	beq	r3,zero,d80 <_malloc_r+0x6c4>
     a90:	a0e9c83a 	sub	r20,r20,r3
     a94:	00840204 	movi	r2,4104
     a98:	a5000204 	addi	r20,r20,8
     a9c:	10c7c83a 	sub	r3,r2,r3
     aa0:	a545883a 	add	r2,r20,r21
     aa4:	1083ffcc 	andi	r2,r2,4095
     aa8:	18abc83a 	sub	r21,r3,r2
     aac:	a80b883a 	mov	r5,r21
     ab0:	9009883a 	mov	r4,r18
     ab4:	0000ec80 	call	ec8 <_sbrk_r>
     ab8:	00ffffc4 	movi	r3,-1
     abc:	10c0e126 	beq	r2,r3,e44 <_malloc_r+0x788>
     ac0:	1505c83a 	sub	r2,r2,r20
     ac4:	1545883a 	add	r2,r2,r21
     ac8:	10800054 	ori	r2,r2,1
     acc:	e0c00017 	ldw	r3,0(fp)
     ad0:	9d000215 	stw	r20,8(r19)
     ad4:	a0800115 	stw	r2,4(r20)
     ad8:	a8c7883a 	add	r3,r21,r3
     adc:	e0c00015 	stw	r3,0(fp)
     ae0:	84c00e26 	beq	r16,r19,b1c <_malloc_r+0x460>
     ae4:	018003c4 	movi	r6,15
     ae8:	3580a72e 	bgeu	r6,r22,d88 <_malloc_r+0x6cc>
     aec:	81400117 	ldw	r5,4(r16)
     af0:	013ffe04 	movi	r4,-8
     af4:	b0bffd04 	addi	r2,r22,-12
     af8:	1104703a 	and	r2,r2,r4
     afc:	2900004c 	andi	r4,r5,1
     b00:	2088b03a 	or	r4,r4,r2
     b04:	81000115 	stw	r4,4(r16)
     b08:	01400144 	movi	r5,5
     b0c:	8089883a 	add	r4,r16,r2
     b10:	21400115 	stw	r5,4(r4)
     b14:	21400215 	stw	r5,8(r4)
     b18:	3080cd36 	bltu	r6,r2,e50 <_malloc_r+0x794>
     b1c:	00800034 	movhi	r2,0
     b20:	109b1e04 	addi	r2,r2,27768
     b24:	11000017 	ldw	r4,0(r2)
     b28:	20c0012e 	bgeu	r4,r3,b30 <_malloc_r+0x474>
     b2c:	10c00015 	stw	r3,0(r2)
     b30:	00800034 	movhi	r2,0
     b34:	109b1d04 	addi	r2,r2,27764
     b38:	11000017 	ldw	r4,0(r2)
     b3c:	9c000217 	ldw	r16,8(r19)
     b40:	20c0012e 	bgeu	r4,r3,b48 <_malloc_r+0x48c>
     b44:	10c00015 	stw	r3,0(r2)
     b48:	80c00117 	ldw	r3,4(r16)
     b4c:	00bfff04 	movi	r2,-4
     b50:	1886703a 	and	r3,r3,r2
     b54:	1c45c83a 	sub	r2,r3,r17
     b58:	1c400236 	bltu	r3,r17,b64 <_malloc_r+0x4a8>
     b5c:	00c003c4 	movi	r3,15
     b60:	18800416 	blt	r3,r2,b74 <_malloc_r+0x4b8>
     b64:	9009883a 	mov	r4,r18
     b68:	00014dc0 	call	14dc <__malloc_unlock>
     b6c:	0005883a 	mov	r2,zero
     b70:	003f7b06 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     b74:	88c00054 	ori	r3,r17,1
     b78:	80c00115 	stw	r3,4(r16)
     b7c:	8463883a 	add	r17,r16,r17
     b80:	10800054 	ori	r2,r2,1
     b84:	9c400215 	stw	r17,8(r19)
     b88:	88800115 	stw	r2,4(r17)
     b8c:	9009883a 	mov	r4,r18
     b90:	00014dc0 	call	14dc <__malloc_unlock>
     b94:	80800204 	addi	r2,r16,8
     b98:	003f7106 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     b9c:	00c00504 	movi	r3,20
     ba0:	18804a2e 	bgeu	r3,r2,ccc <_malloc_r+0x610>
     ba4:	00c01504 	movi	r3,84
     ba8:	18806e36 	bltu	r3,r2,d64 <_malloc_r+0x6a8>
     bac:	8804d33a 	srli	r2,r17,12
     bb0:	12001bc4 	addi	r8,r2,111
     bb4:	11c01b84 	addi	r7,r2,110
     bb8:	4209883a 	add	r4,r8,r8
     bbc:	003edd06 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     bc0:	3804d27a 	srli	r2,r7,9
     bc4:	00c00104 	movi	r3,4
     bc8:	1880442e 	bgeu	r3,r2,cdc <_malloc_r+0x620>
     bcc:	00c00504 	movi	r3,20
     bd0:	18808136 	bltu	r3,r2,dd8 <_malloc_r+0x71c>
     bd4:	11401704 	addi	r5,r2,92
     bd8:	10c016c4 	addi	r3,r2,91
     bdc:	294b883a 	add	r5,r5,r5
     be0:	294b883a 	add	r5,r5,r5
     be4:	294b883a 	add	r5,r5,r5
     be8:	994b883a 	add	r5,r19,r5
     bec:	28800017 	ldw	r2,0(r5)
     bf0:	01800034 	movhi	r6,0
     bf4:	297ffe04 	addi	r5,r5,-8
     bf8:	318de904 	addi	r6,r6,14244
     bfc:	28806526 	beq	r5,r2,d94 <_malloc_r+0x6d8>
     c00:	01bfff04 	movi	r6,-4
     c04:	10c00117 	ldw	r3,4(r2)
     c08:	1986703a 	and	r3,r3,r6
     c0c:	38c0022e 	bgeu	r7,r3,c18 <_malloc_r+0x55c>
     c10:	10800217 	ldw	r2,8(r2)
     c14:	28bffb1e 	bne	r5,r2,c04 <__alt_exception_stack_pointer+0xf8000c04>
     c18:	11400317 	ldw	r5,12(r2)
     c1c:	98c00117 	ldw	r3,4(r19)
     c20:	81400315 	stw	r5,12(r16)
     c24:	80800215 	stw	r2,8(r16)
     c28:	2c000215 	stw	r16,8(r5)
     c2c:	14000315 	stw	r16,12(r2)
     c30:	003ef806 	br	814 <__alt_exception_stack_pointer+0xf8000814>
     c34:	88c00054 	ori	r3,r17,1
     c38:	80c00115 	stw	r3,4(r16)
     c3c:	8463883a 	add	r17,r16,r17
     c40:	34400515 	stw	r17,20(r6)
     c44:	34400415 	stw	r17,16(r6)
     c48:	10c00054 	ori	r3,r2,1
     c4c:	8a000315 	stw	r8,12(r17)
     c50:	8a000215 	stw	r8,8(r17)
     c54:	88c00115 	stw	r3,4(r17)
     c58:	88a3883a 	add	r17,r17,r2
     c5c:	88800015 	stw	r2,0(r17)
     c60:	9009883a 	mov	r4,r18
     c64:	00014dc0 	call	14dc <__malloc_unlock>
     c68:	80800204 	addi	r2,r16,8
     c6c:	003f3c06 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     c70:	30c00117 	ldw	r3,4(r6)
     c74:	003ee706 	br	814 <__alt_exception_stack_pointer+0xf8000814>
     c78:	5ac00044 	addi	r11,r11,1
     c7c:	588000cc 	andi	r2,r11,3
     c80:	31800204 	addi	r6,r6,8
     c84:	103efd1e 	bne	r2,zero,87c <__alt_exception_stack_pointer+0xf800087c>
     c88:	00002406 	br	d1c <_malloc_r+0x660>
     c8c:	14000317 	ldw	r16,12(r2)
     c90:	143f251e 	bne	r2,r16,928 <__alt_exception_stack_pointer+0xf8000928>
     c94:	21000084 	addi	r4,r4,2
     c98:	003ebc06 	br	78c <__alt_exception_stack_pointer+0xf800078c>
     c9c:	8085883a 	add	r2,r16,r2
     ca0:	10c00117 	ldw	r3,4(r2)
     ca4:	81000317 	ldw	r4,12(r16)
     ca8:	81400217 	ldw	r5,8(r16)
     cac:	18c00054 	ori	r3,r3,1
     cb0:	10c00115 	stw	r3,4(r2)
     cb4:	29000315 	stw	r4,12(r5)
     cb8:	21400215 	stw	r5,8(r4)
     cbc:	9009883a 	mov	r4,r18
     cc0:	00014dc0 	call	14dc <__malloc_unlock>
     cc4:	80800204 	addi	r2,r16,8
     cc8:	003f2506 	br	960 <__alt_exception_stack_pointer+0xf8000960>
     ccc:	12001704 	addi	r8,r2,92
     cd0:	11c016c4 	addi	r7,r2,91
     cd4:	4209883a 	add	r4,r8,r8
     cd8:	003e9606 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     cdc:	3804d1ba 	srli	r2,r7,6
     ce0:	11400e44 	addi	r5,r2,57
     ce4:	10c00e04 	addi	r3,r2,56
     ce8:	294b883a 	add	r5,r5,r5
     cec:	003fbc06 	br	be0 <__alt_exception_stack_pointer+0xf8000be0>
     cf0:	84ff5926 	beq	r16,r19,a58 <__alt_exception_stack_pointer+0xf8000a58>
     cf4:	00800034 	movhi	r2,0
     cf8:	108de904 	addi	r2,r2,14244
     cfc:	14000217 	ldw	r16,8(r2)
     d00:	00bfff04 	movi	r2,-4
     d04:	80c00117 	ldw	r3,4(r16)
     d08:	1886703a 	and	r3,r3,r2
     d0c:	003f9106 	br	b54 <__alt_exception_stack_pointer+0xf8000b54>
     d10:	60800217 	ldw	r2,8(r12)
     d14:	213fffc4 	addi	r4,r4,-1
     d18:	1300651e 	bne	r2,r12,eb0 <_malloc_r+0x7f4>
     d1c:	208000cc 	andi	r2,r4,3
     d20:	633ffe04 	addi	r12,r12,-8
     d24:	103ffa1e 	bne	r2,zero,d10 <__alt_exception_stack_pointer+0xf8000d10>
     d28:	98800117 	ldw	r2,4(r19)
     d2c:	0146303a 	nor	r3,zero,r5
     d30:	1884703a 	and	r2,r3,r2
     d34:	98800115 	stw	r2,4(r19)
     d38:	294b883a 	add	r5,r5,r5
     d3c:	117f2836 	bltu	r2,r5,9e0 <__alt_exception_stack_pointer+0xf80009e0>
     d40:	283f2726 	beq	r5,zero,9e0 <__alt_exception_stack_pointer+0xf80009e0>
     d44:	2886703a 	and	r3,r5,r2
     d48:	5809883a 	mov	r4,r11
     d4c:	183ec31e 	bne	r3,zero,85c <__alt_exception_stack_pointer+0xf800085c>
     d50:	294b883a 	add	r5,r5,r5
     d54:	2886703a 	and	r3,r5,r2
     d58:	21000104 	addi	r4,r4,4
     d5c:	183ffc26 	beq	r3,zero,d50 <__alt_exception_stack_pointer+0xf8000d50>
     d60:	003ebe06 	br	85c <__alt_exception_stack_pointer+0xf800085c>
     d64:	00c05504 	movi	r3,340
     d68:	18801236 	bltu	r3,r2,db4 <_malloc_r+0x6f8>
     d6c:	8804d3fa 	srli	r2,r17,15
     d70:	12001e04 	addi	r8,r2,120
     d74:	11c01dc4 	addi	r7,r2,119
     d78:	4209883a 	add	r4,r8,r8
     d7c:	003e6d06 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     d80:	00c40004 	movi	r3,4096
     d84:	003f4606 	br	aa0 <__alt_exception_stack_pointer+0xf8000aa0>
     d88:	00800044 	movi	r2,1
     d8c:	a0800115 	stw	r2,4(r20)
     d90:	003f7406 	br	b64 <__alt_exception_stack_pointer+0xf8000b64>
     d94:	1805d0ba 	srai	r2,r3,2
     d98:	01c00044 	movi	r7,1
     d9c:	30c00117 	ldw	r3,4(r6)
     da0:	388e983a 	sll	r7,r7,r2
     da4:	2805883a 	mov	r2,r5
     da8:	38c6b03a 	or	r3,r7,r3
     dac:	30c00115 	stw	r3,4(r6)
     db0:	003f9b06 	br	c20 <__alt_exception_stack_pointer+0xf8000c20>
     db4:	00c15504 	movi	r3,1364
     db8:	18801a36 	bltu	r3,r2,e24 <_malloc_r+0x768>
     dbc:	8804d4ba 	srli	r2,r17,18
     dc0:	12001f44 	addi	r8,r2,125
     dc4:	11c01f04 	addi	r7,r2,124
     dc8:	4209883a 	add	r4,r8,r8
     dcc:	003e5906 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     dd0:	ad400404 	addi	r21,r21,16
     dd4:	003f1706 	br	a34 <__alt_exception_stack_pointer+0xf8000a34>
     dd8:	00c01504 	movi	r3,84
     ddc:	18802336 	bltu	r3,r2,e6c <_malloc_r+0x7b0>
     de0:	3804d33a 	srli	r2,r7,12
     de4:	11401bc4 	addi	r5,r2,111
     de8:	10c01b84 	addi	r3,r2,110
     dec:	294b883a 	add	r5,r5,r5
     df0:	003f7b06 	br	be0 <__alt_exception_stack_pointer+0xf8000be0>
     df4:	9c000217 	ldw	r16,8(r19)
     df8:	00bfff04 	movi	r2,-4
     dfc:	80c00117 	ldw	r3,4(r16)
     e00:	1886703a 	and	r3,r3,r2
     e04:	003f5306 	br	b54 <__alt_exception_stack_pointer+0xf8000b54>
     e08:	3083ffcc 	andi	r2,r6,4095
     e0c:	103f181e 	bne	r2,zero,a70 <__alt_exception_stack_pointer+0xf8000a70>
     e10:	99000217 	ldw	r4,8(r19)
     e14:	b545883a 	add	r2,r22,r21
     e18:	10800054 	ori	r2,r2,1
     e1c:	20800115 	stw	r2,4(r4)
     e20:	003f3e06 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
     e24:	01003f84 	movi	r4,254
     e28:	02001fc4 	movi	r8,127
     e2c:	01c01f84 	movi	r7,126
     e30:	003e4006 	br	734 <__alt_exception_stack_pointer+0xf8000734>
     e34:	00800034 	movhi	r2,0
     e38:	10947604 	addi	r2,r2,20952
     e3c:	15000015 	stw	r20,0(r2)
     e40:	003f1106 	br	a88 <__alt_exception_stack_pointer+0xf8000a88>
     e44:	00800044 	movi	r2,1
     e48:	002b883a 	mov	r21,zero
     e4c:	003f1f06 	br	acc <__alt_exception_stack_pointer+0xf8000acc>
     e50:	81400204 	addi	r5,r16,8
     e54:	9009883a 	mov	r4,r18
     e58:	00010400 	call	1040 <_free_r>
     e5c:	00800034 	movhi	r2,0
     e60:	109b2804 	addi	r2,r2,27808
     e64:	10c00017 	ldw	r3,0(r2)
     e68:	003f2c06 	br	b1c <__alt_exception_stack_pointer+0xf8000b1c>
     e6c:	00c05504 	movi	r3,340
     e70:	18800536 	bltu	r3,r2,e88 <_malloc_r+0x7cc>
     e74:	3804d3fa 	srli	r2,r7,15
     e78:	11401e04 	addi	r5,r2,120
     e7c:	10c01dc4 	addi	r3,r2,119
     e80:	294b883a 	add	r5,r5,r5
     e84:	003f5606 	br	be0 <__alt_exception_stack_pointer+0xf8000be0>
     e88:	00c15504 	movi	r3,1364
     e8c:	18800536 	bltu	r3,r2,ea4 <_malloc_r+0x7e8>
     e90:	3804d4ba 	srli	r2,r7,18
     e94:	11401f44 	addi	r5,r2,125
     e98:	10c01f04 	addi	r3,r2,124
     e9c:	294b883a 	add	r5,r5,r5
     ea0:	003f4f06 	br	be0 <__alt_exception_stack_pointer+0xf8000be0>
     ea4:	01403f84 	movi	r5,254
     ea8:	00c01f84 	movi	r3,126
     eac:	003f4c06 	br	be0 <__alt_exception_stack_pointer+0xf8000be0>
     eb0:	98800117 	ldw	r2,4(r19)
     eb4:	003fa006 	br	d38 <__alt_exception_stack_pointer+0xf8000d38>
     eb8:	8808d0fa 	srli	r4,r17,3
     ebc:	20800044 	addi	r2,r4,1
     ec0:	1085883a 	add	r2,r2,r2
     ec4:	003e9006 	br	908 <__alt_exception_stack_pointer+0xf8000908>

00000ec8 <_sbrk_r>:
     ec8:	defffd04 	addi	sp,sp,-12
     ecc:	dc000015 	stw	r16,0(sp)
     ed0:	04000034 	movhi	r16,0
     ed4:	dc400115 	stw	r17,4(sp)
     ed8:	841b2004 	addi	r16,r16,27776
     edc:	2023883a 	mov	r17,r4
     ee0:	2809883a 	mov	r4,r5
     ee4:	dfc00215 	stw	ra,8(sp)
     ee8:	80000015 	stw	zero,0(r16)
     eec:	00015000 	call	1500 <sbrk>
     ef0:	00ffffc4 	movi	r3,-1
     ef4:	10c00526 	beq	r2,r3,f0c <_sbrk_r+0x44>
     ef8:	dfc00217 	ldw	ra,8(sp)
     efc:	dc400117 	ldw	r17,4(sp)
     f00:	dc000017 	ldw	r16,0(sp)
     f04:	dec00304 	addi	sp,sp,12
     f08:	f800283a 	ret
     f0c:	80c00017 	ldw	r3,0(r16)
     f10:	183ff926 	beq	r3,zero,ef8 <__alt_exception_stack_pointer+0xf8000ef8>
     f14:	88c00015 	stw	r3,0(r17)
     f18:	003ff706 	br	ef8 <__alt_exception_stack_pointer+0xf8000ef8>

00000f1c <_malloc_trim_r>:
     f1c:	defffb04 	addi	sp,sp,-20
     f20:	dcc00315 	stw	r19,12(sp)
     f24:	04c00034 	movhi	r19,0
     f28:	dc800215 	stw	r18,8(sp)
     f2c:	dc400115 	stw	r17,4(sp)
     f30:	dc000015 	stw	r16,0(sp)
     f34:	dfc00415 	stw	ra,16(sp)
     f38:	2821883a 	mov	r16,r5
     f3c:	9ccde904 	addi	r19,r19,14244
     f40:	2025883a 	mov	r18,r4
     f44:	00014b80 	call	14b8 <__malloc_lock>
     f48:	98800217 	ldw	r2,8(r19)
     f4c:	14400117 	ldw	r17,4(r2)
     f50:	00bfff04 	movi	r2,-4
     f54:	88a2703a 	and	r17,r17,r2
     f58:	8c21c83a 	sub	r16,r17,r16
     f5c:	8403fbc4 	addi	r16,r16,4079
     f60:	8020d33a 	srli	r16,r16,12
     f64:	0083ffc4 	movi	r2,4095
     f68:	843fffc4 	addi	r16,r16,-1
     f6c:	8020933a 	slli	r16,r16,12
     f70:	1400060e 	bge	r2,r16,f8c <_malloc_trim_r+0x70>
     f74:	000b883a 	mov	r5,zero
     f78:	9009883a 	mov	r4,r18
     f7c:	0000ec80 	call	ec8 <_sbrk_r>
     f80:	98c00217 	ldw	r3,8(r19)
     f84:	1c47883a 	add	r3,r3,r17
     f88:	10c00a26 	beq	r2,r3,fb4 <_malloc_trim_r+0x98>
     f8c:	9009883a 	mov	r4,r18
     f90:	00014dc0 	call	14dc <__malloc_unlock>
     f94:	0005883a 	mov	r2,zero
     f98:	dfc00417 	ldw	ra,16(sp)
     f9c:	dcc00317 	ldw	r19,12(sp)
     fa0:	dc800217 	ldw	r18,8(sp)
     fa4:	dc400117 	ldw	r17,4(sp)
     fa8:	dc000017 	ldw	r16,0(sp)
     fac:	dec00504 	addi	sp,sp,20
     fb0:	f800283a 	ret
     fb4:	040bc83a 	sub	r5,zero,r16
     fb8:	9009883a 	mov	r4,r18
     fbc:	0000ec80 	call	ec8 <_sbrk_r>
     fc0:	00ffffc4 	movi	r3,-1
     fc4:	10c00d26 	beq	r2,r3,ffc <_malloc_trim_r+0xe0>
     fc8:	00c00034 	movhi	r3,0
     fcc:	18db2804 	addi	r3,r3,27808
     fd0:	18800017 	ldw	r2,0(r3)
     fd4:	99000217 	ldw	r4,8(r19)
     fd8:	8c23c83a 	sub	r17,r17,r16
     fdc:	8c400054 	ori	r17,r17,1
     fe0:	1421c83a 	sub	r16,r2,r16
     fe4:	24400115 	stw	r17,4(r4)
     fe8:	9009883a 	mov	r4,r18
     fec:	1c000015 	stw	r16,0(r3)
     ff0:	00014dc0 	call	14dc <__malloc_unlock>
     ff4:	00800044 	movi	r2,1
     ff8:	003fe706 	br	f98 <__alt_exception_stack_pointer+0xf8000f98>
     ffc:	000b883a 	mov	r5,zero
    1000:	9009883a 	mov	r4,r18
    1004:	0000ec80 	call	ec8 <_sbrk_r>
    1008:	99000217 	ldw	r4,8(r19)
    100c:	014003c4 	movi	r5,15
    1010:	1107c83a 	sub	r3,r2,r4
    1014:	28ffdd0e 	bge	r5,r3,f8c <__alt_exception_stack_pointer+0xf8000f8c>
    1018:	01400034 	movhi	r5,0
    101c:	29547604 	addi	r5,r5,20952
    1020:	29400017 	ldw	r5,0(r5)
    1024:	18c00054 	ori	r3,r3,1
    1028:	20c00115 	stw	r3,4(r4)
    102c:	00c00034 	movhi	r3,0
    1030:	1145c83a 	sub	r2,r2,r5
    1034:	18db2804 	addi	r3,r3,27808
    1038:	18800015 	stw	r2,0(r3)
    103c:	003fd306 	br	f8c <__alt_exception_stack_pointer+0xf8000f8c>

00001040 <_free_r>:
    1040:	28004126 	beq	r5,zero,1148 <_free_r+0x108>
    1044:	defffd04 	addi	sp,sp,-12
    1048:	dc400115 	stw	r17,4(sp)
    104c:	dc000015 	stw	r16,0(sp)
    1050:	2023883a 	mov	r17,r4
    1054:	2821883a 	mov	r16,r5
    1058:	dfc00215 	stw	ra,8(sp)
    105c:	00014b80 	call	14b8 <__malloc_lock>
    1060:	81ffff17 	ldw	r7,-4(r16)
    1064:	00bfff84 	movi	r2,-2
    1068:	01000034 	movhi	r4,0
    106c:	81bffe04 	addi	r6,r16,-8
    1070:	3884703a 	and	r2,r7,r2
    1074:	210de904 	addi	r4,r4,14244
    1078:	308b883a 	add	r5,r6,r2
    107c:	2a400117 	ldw	r9,4(r5)
    1080:	22000217 	ldw	r8,8(r4)
    1084:	00ffff04 	movi	r3,-4
    1088:	48c6703a 	and	r3,r9,r3
    108c:	2a005726 	beq	r5,r8,11ec <_free_r+0x1ac>
    1090:	28c00115 	stw	r3,4(r5)
    1094:	39c0004c 	andi	r7,r7,1
    1098:	3800091e 	bne	r7,zero,10c0 <_free_r+0x80>
    109c:	823ffe17 	ldw	r8,-8(r16)
    10a0:	22400204 	addi	r9,r4,8
    10a4:	320dc83a 	sub	r6,r6,r8
    10a8:	31c00217 	ldw	r7,8(r6)
    10ac:	1205883a 	add	r2,r2,r8
    10b0:	3a406526 	beq	r7,r9,1248 <_free_r+0x208>
    10b4:	32000317 	ldw	r8,12(r6)
    10b8:	3a000315 	stw	r8,12(r7)
    10bc:	41c00215 	stw	r7,8(r8)
    10c0:	28cf883a 	add	r7,r5,r3
    10c4:	39c00117 	ldw	r7,4(r7)
    10c8:	39c0004c 	andi	r7,r7,1
    10cc:	38003a26 	beq	r7,zero,11b8 <_free_r+0x178>
    10d0:	10c00054 	ori	r3,r2,1
    10d4:	30c00115 	stw	r3,4(r6)
    10d8:	3087883a 	add	r3,r6,r2
    10dc:	18800015 	stw	r2,0(r3)
    10e0:	00c07fc4 	movi	r3,511
    10e4:	18801936 	bltu	r3,r2,114c <_free_r+0x10c>
    10e8:	1004d0fa 	srli	r2,r2,3
    10ec:	01c00044 	movi	r7,1
    10f0:	21400117 	ldw	r5,4(r4)
    10f4:	10c00044 	addi	r3,r2,1
    10f8:	18c7883a 	add	r3,r3,r3
    10fc:	1005d0ba 	srai	r2,r2,2
    1100:	18c7883a 	add	r3,r3,r3
    1104:	18c7883a 	add	r3,r3,r3
    1108:	1907883a 	add	r3,r3,r4
    110c:	3884983a 	sll	r2,r7,r2
    1110:	19c00017 	ldw	r7,0(r3)
    1114:	1a3ffe04 	addi	r8,r3,-8
    1118:	1144b03a 	or	r2,r2,r5
    111c:	32000315 	stw	r8,12(r6)
    1120:	31c00215 	stw	r7,8(r6)
    1124:	20800115 	stw	r2,4(r4)
    1128:	19800015 	stw	r6,0(r3)
    112c:	39800315 	stw	r6,12(r7)
    1130:	8809883a 	mov	r4,r17
    1134:	dfc00217 	ldw	ra,8(sp)
    1138:	dc400117 	ldw	r17,4(sp)
    113c:	dc000017 	ldw	r16,0(sp)
    1140:	dec00304 	addi	sp,sp,12
    1144:	00014dc1 	jmpi	14dc <__malloc_unlock>
    1148:	f800283a 	ret
    114c:	100ad27a 	srli	r5,r2,9
    1150:	00c00104 	movi	r3,4
    1154:	19404a36 	bltu	r3,r5,1280 <_free_r+0x240>
    1158:	100ad1ba 	srli	r5,r2,6
    115c:	28c00e44 	addi	r3,r5,57
    1160:	18c7883a 	add	r3,r3,r3
    1164:	29400e04 	addi	r5,r5,56
    1168:	18c7883a 	add	r3,r3,r3
    116c:	18c7883a 	add	r3,r3,r3
    1170:	1909883a 	add	r4,r3,r4
    1174:	20c00017 	ldw	r3,0(r4)
    1178:	01c00034 	movhi	r7,0
    117c:	213ffe04 	addi	r4,r4,-8
    1180:	39cde904 	addi	r7,r7,14244
    1184:	20c04426 	beq	r4,r3,1298 <_free_r+0x258>
    1188:	01ffff04 	movi	r7,-4
    118c:	19400117 	ldw	r5,4(r3)
    1190:	29ca703a 	and	r5,r5,r7
    1194:	1140022e 	bgeu	r2,r5,11a0 <_free_r+0x160>
    1198:	18c00217 	ldw	r3,8(r3)
    119c:	20fffb1e 	bne	r4,r3,118c <__alt_exception_stack_pointer+0xf800118c>
    11a0:	19000317 	ldw	r4,12(r3)
    11a4:	31000315 	stw	r4,12(r6)
    11a8:	30c00215 	stw	r3,8(r6)
    11ac:	21800215 	stw	r6,8(r4)
    11b0:	19800315 	stw	r6,12(r3)
    11b4:	003fde06 	br	1130 <__alt_exception_stack_pointer+0xf8001130>
    11b8:	29c00217 	ldw	r7,8(r5)
    11bc:	10c5883a 	add	r2,r2,r3
    11c0:	00c00034 	movhi	r3,0
    11c4:	18cdeb04 	addi	r3,r3,14252
    11c8:	38c03b26 	beq	r7,r3,12b8 <_free_r+0x278>
    11cc:	2a000317 	ldw	r8,12(r5)
    11d0:	11400054 	ori	r5,r2,1
    11d4:	3087883a 	add	r3,r6,r2
    11d8:	3a000315 	stw	r8,12(r7)
    11dc:	41c00215 	stw	r7,8(r8)
    11e0:	31400115 	stw	r5,4(r6)
    11e4:	18800015 	stw	r2,0(r3)
    11e8:	003fbd06 	br	10e0 <__alt_exception_stack_pointer+0xf80010e0>
    11ec:	39c0004c 	andi	r7,r7,1
    11f0:	10c5883a 	add	r2,r2,r3
    11f4:	3800071e 	bne	r7,zero,1214 <_free_r+0x1d4>
    11f8:	81fffe17 	ldw	r7,-8(r16)
    11fc:	31cdc83a 	sub	r6,r6,r7
    1200:	30c00317 	ldw	r3,12(r6)
    1204:	31400217 	ldw	r5,8(r6)
    1208:	11c5883a 	add	r2,r2,r7
    120c:	28c00315 	stw	r3,12(r5)
    1210:	19400215 	stw	r5,8(r3)
    1214:	10c00054 	ori	r3,r2,1
    1218:	30c00115 	stw	r3,4(r6)
    121c:	00c00034 	movhi	r3,0
    1220:	18d47704 	addi	r3,r3,20956
    1224:	18c00017 	ldw	r3,0(r3)
    1228:	21800215 	stw	r6,8(r4)
    122c:	10ffc036 	bltu	r2,r3,1130 <__alt_exception_stack_pointer+0xf8001130>
    1230:	00800034 	movhi	r2,0
    1234:	109b1f04 	addi	r2,r2,27772
    1238:	11400017 	ldw	r5,0(r2)
    123c:	8809883a 	mov	r4,r17
    1240:	0000f1c0 	call	f1c <_malloc_trim_r>
    1244:	003fba06 	br	1130 <__alt_exception_stack_pointer+0xf8001130>
    1248:	28c9883a 	add	r4,r5,r3
    124c:	21000117 	ldw	r4,4(r4)
    1250:	2100004c 	andi	r4,r4,1
    1254:	2000391e 	bne	r4,zero,133c <_free_r+0x2fc>
    1258:	29c00217 	ldw	r7,8(r5)
    125c:	29000317 	ldw	r4,12(r5)
    1260:	1885883a 	add	r2,r3,r2
    1264:	10c00054 	ori	r3,r2,1
    1268:	39000315 	stw	r4,12(r7)
    126c:	21c00215 	stw	r7,8(r4)
    1270:	30c00115 	stw	r3,4(r6)
    1274:	308d883a 	add	r6,r6,r2
    1278:	30800015 	stw	r2,0(r6)
    127c:	003fac06 	br	1130 <__alt_exception_stack_pointer+0xf8001130>
    1280:	00c00504 	movi	r3,20
    1284:	19401536 	bltu	r3,r5,12dc <_free_r+0x29c>
    1288:	28c01704 	addi	r3,r5,92
    128c:	18c7883a 	add	r3,r3,r3
    1290:	294016c4 	addi	r5,r5,91
    1294:	003fb406 	br	1168 <__alt_exception_stack_pointer+0xf8001168>
    1298:	280bd0ba 	srai	r5,r5,2
    129c:	00c00044 	movi	r3,1
    12a0:	38800117 	ldw	r2,4(r7)
    12a4:	194a983a 	sll	r5,r3,r5
    12a8:	2007883a 	mov	r3,r4
    12ac:	2884b03a 	or	r2,r5,r2
    12b0:	38800115 	stw	r2,4(r7)
    12b4:	003fbb06 	br	11a4 <__alt_exception_stack_pointer+0xf80011a4>
    12b8:	21800515 	stw	r6,20(r4)
    12bc:	21800415 	stw	r6,16(r4)
    12c0:	10c00054 	ori	r3,r2,1
    12c4:	31c00315 	stw	r7,12(r6)
    12c8:	31c00215 	stw	r7,8(r6)
    12cc:	30c00115 	stw	r3,4(r6)
    12d0:	308d883a 	add	r6,r6,r2
    12d4:	30800015 	stw	r2,0(r6)
    12d8:	003f9506 	br	1130 <__alt_exception_stack_pointer+0xf8001130>
    12dc:	00c01504 	movi	r3,84
    12e0:	19400536 	bltu	r3,r5,12f8 <_free_r+0x2b8>
    12e4:	100ad33a 	srli	r5,r2,12
    12e8:	28c01bc4 	addi	r3,r5,111
    12ec:	18c7883a 	add	r3,r3,r3
    12f0:	29401b84 	addi	r5,r5,110
    12f4:	003f9c06 	br	1168 <__alt_exception_stack_pointer+0xf8001168>
    12f8:	00c05504 	movi	r3,340
    12fc:	19400536 	bltu	r3,r5,1314 <_free_r+0x2d4>
    1300:	100ad3fa 	srli	r5,r2,15
    1304:	28c01e04 	addi	r3,r5,120
    1308:	18c7883a 	add	r3,r3,r3
    130c:	29401dc4 	addi	r5,r5,119
    1310:	003f9506 	br	1168 <__alt_exception_stack_pointer+0xf8001168>
    1314:	00c15504 	movi	r3,1364
    1318:	19400536 	bltu	r3,r5,1330 <_free_r+0x2f0>
    131c:	100ad4ba 	srli	r5,r2,18
    1320:	28c01f44 	addi	r3,r5,125
    1324:	18c7883a 	add	r3,r3,r3
    1328:	29401f04 	addi	r5,r5,124
    132c:	003f8e06 	br	1168 <__alt_exception_stack_pointer+0xf8001168>
    1330:	00c03f84 	movi	r3,254
    1334:	01401f84 	movi	r5,126
    1338:	003f8b06 	br	1168 <__alt_exception_stack_pointer+0xf8001168>
    133c:	10c00054 	ori	r3,r2,1
    1340:	30c00115 	stw	r3,4(r6)
    1344:	308d883a 	add	r6,r6,r2
    1348:	30800015 	stw	r2,0(r6)
    134c:	003f7806 	br	1130 <__alt_exception_stack_pointer+0xf8001130>

00001350 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1350:	defffc04 	addi	sp,sp,-16
    1354:	df000315 	stw	fp,12(sp)
    1358:	df000304 	addi	fp,sp,12
    135c:	e13ffd15 	stw	r4,-12(fp)
    1360:	e17ffe15 	stw	r5,-8(fp)
    1364:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1368:	e0fffe17 	ldw	r3,-8(fp)
    136c:	e0bffd17 	ldw	r2,-12(fp)
    1370:	18800c26 	beq	r3,r2,13a4 <alt_load_section+0x54>
  {
    while( to != end )
    1374:	00000806 	br	1398 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	10c00104 	addi	r3,r2,4
    1380:	e0fffe15 	stw	r3,-8(fp)
    1384:	e0fffd17 	ldw	r3,-12(fp)
    1388:	19000104 	addi	r4,r3,4
    138c:	e13ffd15 	stw	r4,-12(fp)
    1390:	18c00017 	ldw	r3,0(r3)
    1394:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1398:	e0fffe17 	ldw	r3,-8(fp)
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	18bff51e 	bne	r3,r2,1378 <__alt_exception_stack_pointer+0xf8001378>
    {
      *to++ = *from++;
    }
  }
}
    13a4:	0001883a 	nop
    13a8:	e037883a 	mov	sp,fp
    13ac:	df000017 	ldw	fp,0(sp)
    13b0:	dec00104 	addi	sp,sp,4
    13b4:	f800283a 	ret

000013b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    13b8:	defffe04 	addi	sp,sp,-8
    13bc:	dfc00115 	stw	ra,4(sp)
    13c0:	df000015 	stw	fp,0(sp)
    13c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    13c8:	01800034 	movhi	r6,0
    13cc:	31948304 	addi	r6,r6,21004
    13d0:	01400034 	movhi	r5,0
    13d4:	294de904 	addi	r5,r5,14244
    13d8:	01000034 	movhi	r4,0
    13dc:	21148304 	addi	r4,r4,21004
    13e0:	00013500 	call	1350 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    13e4:	01800034 	movhi	r6,0
    13e8:	31808f04 	addi	r6,r6,572
    13ec:	01400034 	movhi	r5,0
    13f0:	29400804 	addi	r5,r5,32
    13f4:	01000034 	movhi	r4,0
    13f8:	21000804 	addi	r4,r4,32
    13fc:	00013500 	call	1350 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1400:	01800034 	movhi	r6,0
    1404:	318de904 	addi	r6,r6,14244
    1408:	01400034 	movhi	r5,0
    140c:	294dd804 	addi	r5,r5,14176
    1410:	01000034 	movhi	r4,0
    1414:	210dd804 	addi	r4,r4,14176
    1418:	00013500 	call	1350 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    141c:	00024180 	call	2418 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1420:	00026040 	call	2604 <alt_icache_flush_all>
}
    1424:	0001883a 	nop
    1428:	e037883a 	mov	sp,fp
    142c:	dfc00117 	ldw	ra,4(sp)
    1430:	df000017 	ldw	fp,0(sp)
    1434:	dec00204 	addi	sp,sp,8
    1438:	f800283a 	ret

0000143c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    143c:	defffd04 	addi	sp,sp,-12
    1440:	dfc00215 	stw	ra,8(sp)
    1444:	df000115 	stw	fp,4(sp)
    1448:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    144c:	0009883a 	mov	r4,zero
    1450:	00015e40 	call	15e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1454:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1458:	000161c0 	call	161c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    145c:	01800034 	movhi	r6,0
    1460:	318dd904 	addi	r6,r6,14180
    1464:	01400034 	movhi	r5,0
    1468:	294dde04 	addi	r5,r5,14200
    146c:	01000034 	movhi	r4,0
    1470:	210dd904 	addi	r4,r4,14180
    1474:	00029a80 	call	29a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1478:	00025440 	call	2544 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    147c:	01000034 	movhi	r4,0
    1480:	21096904 	addi	r4,r4,9636
    1484:	00031ec0 	call	31ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1488:	d0a6ab17 	ldw	r2,-25940(gp)
    148c:	d0e6ac17 	ldw	r3,-25936(gp)
    1490:	d126ad17 	ldw	r4,-25932(gp)
    1494:	200d883a 	mov	r6,r4
    1498:	180b883a 	mov	r5,r3
    149c:	1009883a 	mov	r4,r2
    14a0:	00002780 	call	278 <main>
    14a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    14a8:	01000044 	movi	r4,1
    14ac:	00023400 	call	2340 <close>
  exit (result);
    14b0:	e13fff17 	ldw	r4,-4(fp)
    14b4:	00032000 	call	3200 <exit>

000014b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    14b8:	defffe04 	addi	sp,sp,-8
    14bc:	df000115 	stw	fp,4(sp)
    14c0:	df000104 	addi	fp,sp,4
    14c4:	e13fff15 	stw	r4,-4(fp)
}
    14c8:	0001883a 	nop
    14cc:	e037883a 	mov	sp,fp
    14d0:	df000017 	ldw	fp,0(sp)
    14d4:	dec00104 	addi	sp,sp,4
    14d8:	f800283a 	ret

000014dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    14dc:	defffe04 	addi	sp,sp,-8
    14e0:	df000115 	stw	fp,4(sp)
    14e4:	df000104 	addi	fp,sp,4
    14e8:	e13fff15 	stw	r4,-4(fp)
}
    14ec:	0001883a 	nop
    14f0:	e037883a 	mov	sp,fp
    14f4:	df000017 	ldw	fp,0(sp)
    14f8:	dec00104 	addi	sp,sp,4
    14fc:	f800283a 	ret

00001500 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    1500:	defff904 	addi	sp,sp,-28
    1504:	df000615 	stw	fp,24(sp)
    1508:	df000604 	addi	fp,sp,24
    150c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1510:	0005303a 	rdctl	r2,status
    1514:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1518:	e0fffe17 	ldw	r3,-8(fp)
    151c:	00bfff84 	movi	r2,-2
    1520:	1884703a 	and	r2,r3,r2
    1524:	1001703a 	wrctl	status,r2
  
  return context;
    1528:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    152c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1530:	d0a00417 	ldw	r2,-32752(gp)
    1534:	10c000c4 	addi	r3,r2,3
    1538:	00bfff04 	movi	r2,-4
    153c:	1884703a 	and	r2,r3,r2
    1540:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1544:	d0e00417 	ldw	r3,-32752(gp)
    1548:	e0bfff17 	ldw	r2,-4(fp)
    154c:	1887883a 	add	r3,r3,r2
    1550:	00820034 	movhi	r2,2048
    1554:	10bf0004 	addi	r2,r2,-1024
    1558:	10c0062e 	bgeu	r2,r3,1574 <sbrk+0x74>
    155c:	e0bffb17 	ldw	r2,-20(fp)
    1560:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1564:	e0bffa17 	ldw	r2,-24(fp)
    1568:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    156c:	00bfffc4 	movi	r2,-1
    1570:	00000b06 	br	15a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    1574:	d0a00417 	ldw	r2,-32752(gp)
    1578:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    157c:	d0e00417 	ldw	r3,-32752(gp)
    1580:	e0bfff17 	ldw	r2,-4(fp)
    1584:	1885883a 	add	r2,r3,r2
    1588:	d0a00415 	stw	r2,-32752(gp)
    158c:	e0bffb17 	ldw	r2,-20(fp)
    1590:	e0bffc15 	stw	r2,-16(fp)
    1594:	e0bffc17 	ldw	r2,-16(fp)
    1598:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    159c:	e0bffd17 	ldw	r2,-12(fp)
} 
    15a0:	e037883a 	mov	sp,fp
    15a4:	df000017 	ldw	fp,0(sp)
    15a8:	dec00104 	addi	sp,sp,4
    15ac:	f800283a 	ret

000015b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    15b0:	defffd04 	addi	sp,sp,-12
    15b4:	dfc00215 	stw	ra,8(sp)
    15b8:	df000115 	stw	fp,4(sp)
    15bc:	df000104 	addi	fp,sp,4
    15c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    15c4:	d1600704 	addi	r5,gp,-32740
    15c8:	e13fff17 	ldw	r4,-4(fp)
    15cc:	00024a00 	call	24a0 <alt_dev_llist_insert>
}
    15d0:	e037883a 	mov	sp,fp
    15d4:	dfc00117 	ldw	ra,4(sp)
    15d8:	df000017 	ldw	fp,0(sp)
    15dc:	dec00204 	addi	sp,sp,8
    15e0:	f800283a 	ret

000015e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    15e4:	defffd04 	addi	sp,sp,-12
    15e8:	dfc00215 	stw	ra,8(sp)
    15ec:	df000115 	stw	fp,4(sp)
    15f0:	df000104 	addi	fp,sp,4
    15f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    15f8:	0002ed00 	call	2ed0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    15fc:	00800044 	movi	r2,1
    1600:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1604:	0001883a 	nop
    1608:	e037883a 	mov	sp,fp
    160c:	dfc00117 	ldw	ra,4(sp)
    1610:	df000017 	ldw	fp,0(sp)
    1614:	dec00204 	addi	sp,sp,8
    1618:	f800283a 	ret

0000161c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    161c:	defffe04 	addi	sp,sp,-8
    1620:	dfc00115 	stw	ra,4(sp)
    1624:	df000015 	stw	fp,0(sp)
    1628:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    162c:	01c0fa04 	movi	r7,1000
    1630:	01800044 	movi	r6,1
    1634:	000b883a 	mov	r5,zero
    1638:	01020034 	movhi	r4,2048
    163c:	21040804 	addi	r4,r4,4128
    1640:	000215c0 	call	215c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    1644:	000d883a 	mov	r6,zero
    1648:	000b883a 	mov	r5,zero
    164c:	01000034 	movhi	r4,0
    1650:	210ffe04 	addi	r4,r4,16376
    1654:	00017e00 	call	17e0 <altera_avalon_jtag_uart_init>
    1658:	01000034 	movhi	r4,0
    165c:	210ff404 	addi	r4,r4,16336
    1660:	00015b00 	call	15b0 <alt_dev_reg>
}
    1664:	0001883a 	nop
    1668:	e037883a 	mov	sp,fp
    166c:	dfc00117 	ldw	ra,4(sp)
    1670:	df000017 	ldw	fp,0(sp)
    1674:	dec00204 	addi	sp,sp,8
    1678:	f800283a 	ret

0000167c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    167c:	defffa04 	addi	sp,sp,-24
    1680:	dfc00515 	stw	ra,20(sp)
    1684:	df000415 	stw	fp,16(sp)
    1688:	df000404 	addi	fp,sp,16
    168c:	e13ffd15 	stw	r4,-12(fp)
    1690:	e17ffe15 	stw	r5,-8(fp)
    1694:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1698:	e0bffd17 	ldw	r2,-12(fp)
    169c:	10800017 	ldw	r2,0(r2)
    16a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    16a4:	e0bffc17 	ldw	r2,-16(fp)
    16a8:	10c00a04 	addi	r3,r2,40
    16ac:	e0bffd17 	ldw	r2,-12(fp)
    16b0:	10800217 	ldw	r2,8(r2)
    16b4:	100f883a 	mov	r7,r2
    16b8:	e1bfff17 	ldw	r6,-4(fp)
    16bc:	e17ffe17 	ldw	r5,-8(fp)
    16c0:	1809883a 	mov	r4,r3
    16c4:	0001ca40 	call	1ca4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    16c8:	e037883a 	mov	sp,fp
    16cc:	dfc00117 	ldw	ra,4(sp)
    16d0:	df000017 	ldw	fp,0(sp)
    16d4:	dec00204 	addi	sp,sp,8
    16d8:	f800283a 	ret

000016dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    16dc:	defffa04 	addi	sp,sp,-24
    16e0:	dfc00515 	stw	ra,20(sp)
    16e4:	df000415 	stw	fp,16(sp)
    16e8:	df000404 	addi	fp,sp,16
    16ec:	e13ffd15 	stw	r4,-12(fp)
    16f0:	e17ffe15 	stw	r5,-8(fp)
    16f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    16f8:	e0bffd17 	ldw	r2,-12(fp)
    16fc:	10800017 	ldw	r2,0(r2)
    1700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1704:	e0bffc17 	ldw	r2,-16(fp)
    1708:	10c00a04 	addi	r3,r2,40
    170c:	e0bffd17 	ldw	r2,-12(fp)
    1710:	10800217 	ldw	r2,8(r2)
    1714:	100f883a 	mov	r7,r2
    1718:	e1bfff17 	ldw	r6,-4(fp)
    171c:	e17ffe17 	ldw	r5,-8(fp)
    1720:	1809883a 	mov	r4,r3
    1724:	0001ec00 	call	1ec0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1728:	e037883a 	mov	sp,fp
    172c:	dfc00117 	ldw	ra,4(sp)
    1730:	df000017 	ldw	fp,0(sp)
    1734:	dec00204 	addi	sp,sp,8
    1738:	f800283a 	ret

0000173c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    173c:	defffc04 	addi	sp,sp,-16
    1740:	dfc00315 	stw	ra,12(sp)
    1744:	df000215 	stw	fp,8(sp)
    1748:	df000204 	addi	fp,sp,8
    174c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1750:	e0bfff17 	ldw	r2,-4(fp)
    1754:	10800017 	ldw	r2,0(r2)
    1758:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    175c:	e0bffe17 	ldw	r2,-8(fp)
    1760:	10c00a04 	addi	r3,r2,40
    1764:	e0bfff17 	ldw	r2,-4(fp)
    1768:	10800217 	ldw	r2,8(r2)
    176c:	100b883a 	mov	r5,r2
    1770:	1809883a 	mov	r4,r3
    1774:	0001b4c0 	call	1b4c <altera_avalon_jtag_uart_close>
}
    1778:	e037883a 	mov	sp,fp
    177c:	dfc00117 	ldw	ra,4(sp)
    1780:	df000017 	ldw	fp,0(sp)
    1784:	dec00204 	addi	sp,sp,8
    1788:	f800283a 	ret

0000178c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    178c:	defffa04 	addi	sp,sp,-24
    1790:	dfc00515 	stw	ra,20(sp)
    1794:	df000415 	stw	fp,16(sp)
    1798:	df000404 	addi	fp,sp,16
    179c:	e13ffd15 	stw	r4,-12(fp)
    17a0:	e17ffe15 	stw	r5,-8(fp)
    17a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	10800017 	ldw	r2,0(r2)
    17b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    17b4:	e0bffc17 	ldw	r2,-16(fp)
    17b8:	10800a04 	addi	r2,r2,40
    17bc:	e1bfff17 	ldw	r6,-4(fp)
    17c0:	e17ffe17 	ldw	r5,-8(fp)
    17c4:	1009883a 	mov	r4,r2
    17c8:	0001bb40 	call	1bb4 <altera_avalon_jtag_uart_ioctl>
}
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    17e0:	defffa04 	addi	sp,sp,-24
    17e4:	dfc00515 	stw	ra,20(sp)
    17e8:	df000415 	stw	fp,16(sp)
    17ec:	df000404 	addi	fp,sp,16
    17f0:	e13ffd15 	stw	r4,-12(fp)
    17f4:	e17ffe15 	stw	r5,-8(fp)
    17f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    17fc:	e0bffd17 	ldw	r2,-12(fp)
    1800:	00c00044 	movi	r3,1
    1804:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1808:	e0bffd17 	ldw	r2,-12(fp)
    180c:	10800017 	ldw	r2,0(r2)
    1810:	10800104 	addi	r2,r2,4
    1814:	1007883a 	mov	r3,r2
    1818:	e0bffd17 	ldw	r2,-12(fp)
    181c:	10800817 	ldw	r2,32(r2)
    1820:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1824:	e0bffe17 	ldw	r2,-8(fp)
    1828:	e0ffff17 	ldw	r3,-4(fp)
    182c:	d8000015 	stw	zero,0(sp)
    1830:	e1fffd17 	ldw	r7,-12(fp)
    1834:	01800034 	movhi	r6,0
    1838:	31862804 	addi	r6,r6,6304
    183c:	180b883a 	mov	r5,r3
    1840:	1009883a 	mov	r4,r2
    1844:	00026240 	call	2624 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1848:	e0bffd17 	ldw	r2,-12(fp)
    184c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1850:	e0bffd17 	ldw	r2,-12(fp)
    1854:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1858:	d0e6af17 	ldw	r3,-25924(gp)
    185c:	e1fffd17 	ldw	r7,-12(fp)
    1860:	01800034 	movhi	r6,0
    1864:	3186ab04 	addi	r6,r6,6828
    1868:	180b883a 	mov	r5,r3
    186c:	1009883a 	mov	r4,r2
    1870:	00021d80 	call	21d8 <alt_alarm_start>
    1874:	1000040e 	bge	r2,zero,1888 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1878:	e0fffd17 	ldw	r3,-12(fp)
    187c:	00a00034 	movhi	r2,32768
    1880:	10bfffc4 	addi	r2,r2,-1
    1884:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1888:	0001883a 	nop
    188c:	e037883a 	mov	sp,fp
    1890:	dfc00117 	ldw	ra,4(sp)
    1894:	df000017 	ldw	fp,0(sp)
    1898:	dec00204 	addi	sp,sp,8
    189c:	f800283a 	ret

000018a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    18a0:	defff804 	addi	sp,sp,-32
    18a4:	df000715 	stw	fp,28(sp)
    18a8:	df000704 	addi	fp,sp,28
    18ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    18b0:	e0bfff17 	ldw	r2,-4(fp)
    18b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    18b8:	e0bffb17 	ldw	r2,-20(fp)
    18bc:	10800017 	ldw	r2,0(r2)
    18c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    18c4:	e0bffc17 	ldw	r2,-16(fp)
    18c8:	10800104 	addi	r2,r2,4
    18cc:	10800037 	ldwio	r2,0(r2)
    18d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    18d4:	e0bffd17 	ldw	r2,-12(fp)
    18d8:	1080c00c 	andi	r2,r2,768
    18dc:	10006d26 	beq	r2,zero,1a94 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    18e0:	e0bffd17 	ldw	r2,-12(fp)
    18e4:	1080400c 	andi	r2,r2,256
    18e8:	10003526 	beq	r2,zero,19c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    18ec:	00800074 	movhi	r2,1
    18f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    18f4:	e0bffb17 	ldw	r2,-20(fp)
    18f8:	10800a17 	ldw	r2,40(r2)
    18fc:	10800044 	addi	r2,r2,1
    1900:	1081ffcc 	andi	r2,r2,2047
    1904:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    1908:	e0bffb17 	ldw	r2,-20(fp)
    190c:	10c00b17 	ldw	r3,44(r2)
    1910:	e0bffe17 	ldw	r2,-8(fp)
    1914:	18801526 	beq	r3,r2,196c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1918:	e0bffc17 	ldw	r2,-16(fp)
    191c:	10800037 	ldwio	r2,0(r2)
    1920:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1924:	e0bff917 	ldw	r2,-28(fp)
    1928:	10a0000c 	andi	r2,r2,32768
    192c:	10001126 	beq	r2,zero,1974 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1930:	e0bffb17 	ldw	r2,-20(fp)
    1934:	10800a17 	ldw	r2,40(r2)
    1938:	e0fff917 	ldw	r3,-28(fp)
    193c:	1809883a 	mov	r4,r3
    1940:	e0fffb17 	ldw	r3,-20(fp)
    1944:	1885883a 	add	r2,r3,r2
    1948:	10800e04 	addi	r2,r2,56
    194c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1950:	e0bffb17 	ldw	r2,-20(fp)
    1954:	10800a17 	ldw	r2,40(r2)
    1958:	10800044 	addi	r2,r2,1
    195c:	10c1ffcc 	andi	r3,r2,2047
    1960:	e0bffb17 	ldw	r2,-20(fp)
    1964:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1968:	003fe206 	br	18f4 <__alt_exception_stack_pointer+0xf80018f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    196c:	0001883a 	nop
    1970:	00000106 	br	1978 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    1974:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1978:	e0bff917 	ldw	r2,-28(fp)
    197c:	10bfffec 	andhi	r2,r2,65535
    1980:	10000f26 	beq	r2,zero,19c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1984:	e0bffb17 	ldw	r2,-20(fp)
    1988:	10c00817 	ldw	r3,32(r2)
    198c:	00bfff84 	movi	r2,-2
    1990:	1886703a 	and	r3,r3,r2
    1994:	e0bffb17 	ldw	r2,-20(fp)
    1998:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    199c:	e0bffc17 	ldw	r2,-16(fp)
    19a0:	10800104 	addi	r2,r2,4
    19a4:	1007883a 	mov	r3,r2
    19a8:	e0bffb17 	ldw	r2,-20(fp)
    19ac:	10800817 	ldw	r2,32(r2)
    19b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    19b4:	e0bffc17 	ldw	r2,-16(fp)
    19b8:	10800104 	addi	r2,r2,4
    19bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    19c0:	e0bffd17 	ldw	r2,-12(fp)
    19c4:	1080800c 	andi	r2,r2,512
    19c8:	103fbe26 	beq	r2,zero,18c4 <__alt_exception_stack_pointer+0xf80018c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    19cc:	e0bffd17 	ldw	r2,-12(fp)
    19d0:	1004d43a 	srli	r2,r2,16
    19d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    19d8:	00001406 	br	1a2c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    19dc:	e0bffc17 	ldw	r2,-16(fp)
    19e0:	e0fffb17 	ldw	r3,-20(fp)
    19e4:	18c00d17 	ldw	r3,52(r3)
    19e8:	e13ffb17 	ldw	r4,-20(fp)
    19ec:	20c7883a 	add	r3,r4,r3
    19f0:	18c20e04 	addi	r3,r3,2104
    19f4:	18c00003 	ldbu	r3,0(r3)
    19f8:	18c03fcc 	andi	r3,r3,255
    19fc:	18c0201c 	xori	r3,r3,128
    1a00:	18ffe004 	addi	r3,r3,-128
    1a04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1a08:	e0bffb17 	ldw	r2,-20(fp)
    1a0c:	10800d17 	ldw	r2,52(r2)
    1a10:	10800044 	addi	r2,r2,1
    1a14:	10c1ffcc 	andi	r3,r2,2047
    1a18:	e0bffb17 	ldw	r2,-20(fp)
    1a1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1a20:	e0bffa17 	ldw	r2,-24(fp)
    1a24:	10bfffc4 	addi	r2,r2,-1
    1a28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1a2c:	e0bffa17 	ldw	r2,-24(fp)
    1a30:	10000526 	beq	r2,zero,1a48 <altera_avalon_jtag_uart_irq+0x1a8>
    1a34:	e0bffb17 	ldw	r2,-20(fp)
    1a38:	10c00d17 	ldw	r3,52(r2)
    1a3c:	e0bffb17 	ldw	r2,-20(fp)
    1a40:	10800c17 	ldw	r2,48(r2)
    1a44:	18bfe51e 	bne	r3,r2,19dc <__alt_exception_stack_pointer+0xf80019dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1a48:	e0bffa17 	ldw	r2,-24(fp)
    1a4c:	103f9d26 	beq	r2,zero,18c4 <__alt_exception_stack_pointer+0xf80018c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1a50:	e0bffb17 	ldw	r2,-20(fp)
    1a54:	10c00817 	ldw	r3,32(r2)
    1a58:	00bfff44 	movi	r2,-3
    1a5c:	1886703a 	and	r3,r3,r2
    1a60:	e0bffb17 	ldw	r2,-20(fp)
    1a64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1a68:	e0bffb17 	ldw	r2,-20(fp)
    1a6c:	10800017 	ldw	r2,0(r2)
    1a70:	10800104 	addi	r2,r2,4
    1a74:	1007883a 	mov	r3,r2
    1a78:	e0bffb17 	ldw	r2,-20(fp)
    1a7c:	10800817 	ldw	r2,32(r2)
    1a80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1a84:	e0bffc17 	ldw	r2,-16(fp)
    1a88:	10800104 	addi	r2,r2,4
    1a8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1a90:	003f8c06 	br	18c4 <__alt_exception_stack_pointer+0xf80018c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    1a94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    1a98:	0001883a 	nop
    1a9c:	e037883a 	mov	sp,fp
    1aa0:	df000017 	ldw	fp,0(sp)
    1aa4:	dec00104 	addi	sp,sp,4
    1aa8:	f800283a 	ret

00001aac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1aac:	defff804 	addi	sp,sp,-32
    1ab0:	df000715 	stw	fp,28(sp)
    1ab4:	df000704 	addi	fp,sp,28
    1ab8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1abc:	e0bffb17 	ldw	r2,-20(fp)
    1ac0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1ac4:	e0bff917 	ldw	r2,-28(fp)
    1ac8:	10800017 	ldw	r2,0(r2)
    1acc:	10800104 	addi	r2,r2,4
    1ad0:	10800037 	ldwio	r2,0(r2)
    1ad4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1ad8:	e0bffa17 	ldw	r2,-24(fp)
    1adc:	1081000c 	andi	r2,r2,1024
    1ae0:	10000b26 	beq	r2,zero,1b10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1ae4:	e0bff917 	ldw	r2,-28(fp)
    1ae8:	10800017 	ldw	r2,0(r2)
    1aec:	10800104 	addi	r2,r2,4
    1af0:	1007883a 	mov	r3,r2
    1af4:	e0bff917 	ldw	r2,-28(fp)
    1af8:	10800817 	ldw	r2,32(r2)
    1afc:	10810014 	ori	r2,r2,1024
    1b00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1b04:	e0bff917 	ldw	r2,-28(fp)
    1b08:	10000915 	stw	zero,36(r2)
    1b0c:	00000a06 	br	1b38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1b10:	e0bff917 	ldw	r2,-28(fp)
    1b14:	10c00917 	ldw	r3,36(r2)
    1b18:	00a00034 	movhi	r2,32768
    1b1c:	10bfff04 	addi	r2,r2,-4
    1b20:	10c00536 	bltu	r2,r3,1b38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    1b24:	e0bff917 	ldw	r2,-28(fp)
    1b28:	10800917 	ldw	r2,36(r2)
    1b2c:	10c00044 	addi	r3,r2,1
    1b30:	e0bff917 	ldw	r2,-28(fp)
    1b34:	10c00915 	stw	r3,36(r2)
    1b38:	d0a6af17 	ldw	r2,-25924(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1b3c:	e037883a 	mov	sp,fp
    1b40:	df000017 	ldw	fp,0(sp)
    1b44:	dec00104 	addi	sp,sp,4
    1b48:	f800283a 	ret

00001b4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1b4c:	defffd04 	addi	sp,sp,-12
    1b50:	df000215 	stw	fp,8(sp)
    1b54:	df000204 	addi	fp,sp,8
    1b58:	e13ffe15 	stw	r4,-8(fp)
    1b5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1b60:	00000506 	br	1b78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    1b64:	e0bfff17 	ldw	r2,-4(fp)
    1b68:	1090000c 	andi	r2,r2,16384
    1b6c:	10000226 	beq	r2,zero,1b78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1b70:	00bffd44 	movi	r2,-11
    1b74:	00000b06 	br	1ba4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1b78:	e0bffe17 	ldw	r2,-8(fp)
    1b7c:	10c00d17 	ldw	r3,52(r2)
    1b80:	e0bffe17 	ldw	r2,-8(fp)
    1b84:	10800c17 	ldw	r2,48(r2)
    1b88:	18800526 	beq	r3,r2,1ba0 <altera_avalon_jtag_uart_close+0x54>
    1b8c:	e0bffe17 	ldw	r2,-8(fp)
    1b90:	10c00917 	ldw	r3,36(r2)
    1b94:	e0bffe17 	ldw	r2,-8(fp)
    1b98:	10800117 	ldw	r2,4(r2)
    1b9c:	18bff136 	bltu	r3,r2,1b64 <__alt_exception_stack_pointer+0xf8001b64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1ba0:	0005883a 	mov	r2,zero
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	df000017 	ldw	fp,0(sp)
    1bac:	dec00104 	addi	sp,sp,4
    1bb0:	f800283a 	ret

00001bb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1bb4:	defffa04 	addi	sp,sp,-24
    1bb8:	df000515 	stw	fp,20(sp)
    1bbc:	df000504 	addi	fp,sp,20
    1bc0:	e13ffd15 	stw	r4,-12(fp)
    1bc4:	e17ffe15 	stw	r5,-8(fp)
    1bc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    1bcc:	00bff9c4 	movi	r2,-25
    1bd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1bd4:	e0bffe17 	ldw	r2,-8(fp)
    1bd8:	10da8060 	cmpeqi	r3,r2,27137
    1bdc:	1800031e 	bne	r3,zero,1bec <altera_avalon_jtag_uart_ioctl+0x38>
    1be0:	109a80a0 	cmpeqi	r2,r2,27138
    1be4:	1000181e 	bne	r2,zero,1c48 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    1be8:	00002906 	br	1c90 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1bec:	e0bffd17 	ldw	r2,-12(fp)
    1bf0:	10c00117 	ldw	r3,4(r2)
    1bf4:	00a00034 	movhi	r2,32768
    1bf8:	10bfffc4 	addi	r2,r2,-1
    1bfc:	18802126 	beq	r3,r2,1c84 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    1c00:	e0bfff17 	ldw	r2,-4(fp)
    1c04:	10800017 	ldw	r2,0(r2)
    1c08:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1c0c:	e0bffc17 	ldw	r2,-16(fp)
    1c10:	10800090 	cmplti	r2,r2,2
    1c14:	1000061e 	bne	r2,zero,1c30 <altera_avalon_jtag_uart_ioctl+0x7c>
    1c18:	e0fffc17 	ldw	r3,-16(fp)
    1c1c:	00a00034 	movhi	r2,32768
    1c20:	10bfffc4 	addi	r2,r2,-1
    1c24:	18800226 	beq	r3,r2,1c30 <altera_avalon_jtag_uart_ioctl+0x7c>
    1c28:	e0bffc17 	ldw	r2,-16(fp)
    1c2c:	00000206 	br	1c38 <altera_avalon_jtag_uart_ioctl+0x84>
    1c30:	00a00034 	movhi	r2,32768
    1c34:	10bfff84 	addi	r2,r2,-2
    1c38:	e0fffd17 	ldw	r3,-12(fp)
    1c3c:	18800115 	stw	r2,4(r3)
      rc = 0;
    1c40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1c44:	00000f06 	br	1c84 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1c48:	e0bffd17 	ldw	r2,-12(fp)
    1c4c:	10c00117 	ldw	r3,4(r2)
    1c50:	00a00034 	movhi	r2,32768
    1c54:	10bfffc4 	addi	r2,r2,-1
    1c58:	18800c26 	beq	r3,r2,1c8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1c5c:	e0bffd17 	ldw	r2,-12(fp)
    1c60:	10c00917 	ldw	r3,36(r2)
    1c64:	e0bffd17 	ldw	r2,-12(fp)
    1c68:	10800117 	ldw	r2,4(r2)
    1c6c:	1885803a 	cmpltu	r2,r3,r2
    1c70:	10c03fcc 	andi	r3,r2,255
    1c74:	e0bfff17 	ldw	r2,-4(fp)
    1c78:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1c7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1c80:	00000206 	br	1c8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1c84:	0001883a 	nop
    1c88:	00000106 	br	1c90 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    1c8c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1c90:	e0bffb17 	ldw	r2,-20(fp)
}
    1c94:	e037883a 	mov	sp,fp
    1c98:	df000017 	ldw	fp,0(sp)
    1c9c:	dec00104 	addi	sp,sp,4
    1ca0:	f800283a 	ret

00001ca4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1ca4:	defff304 	addi	sp,sp,-52
    1ca8:	dfc00c15 	stw	ra,48(sp)
    1cac:	df000b15 	stw	fp,44(sp)
    1cb0:	df000b04 	addi	fp,sp,44
    1cb4:	e13ffc15 	stw	r4,-16(fp)
    1cb8:	e17ffd15 	stw	r5,-12(fp)
    1cbc:	e1bffe15 	stw	r6,-8(fp)
    1cc0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1cc4:	e0bffd17 	ldw	r2,-12(fp)
    1cc8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1ccc:	00004706 	br	1dec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1cd0:	e0bffc17 	ldw	r2,-16(fp)
    1cd4:	10800a17 	ldw	r2,40(r2)
    1cd8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	10800b17 	ldw	r2,44(r2)
    1ce4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    1ce8:	e0fff717 	ldw	r3,-36(fp)
    1cec:	e0bff817 	ldw	r2,-32(fp)
    1cf0:	18800536 	bltu	r3,r2,1d08 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1cf4:	e0fff717 	ldw	r3,-36(fp)
    1cf8:	e0bff817 	ldw	r2,-32(fp)
    1cfc:	1885c83a 	sub	r2,r3,r2
    1d00:	e0bff615 	stw	r2,-40(fp)
    1d04:	00000406 	br	1d18 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1d08:	00c20004 	movi	r3,2048
    1d0c:	e0bff817 	ldw	r2,-32(fp)
    1d10:	1885c83a 	sub	r2,r3,r2
    1d14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1d18:	e0bff617 	ldw	r2,-40(fp)
    1d1c:	10001e26 	beq	r2,zero,1d98 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    1d20:	e0fffe17 	ldw	r3,-8(fp)
    1d24:	e0bff617 	ldw	r2,-40(fp)
    1d28:	1880022e 	bgeu	r3,r2,1d34 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    1d2c:	e0bffe17 	ldw	r2,-8(fp)
    1d30:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	10c00e04 	addi	r3,r2,56
    1d3c:	e0bff817 	ldw	r2,-32(fp)
    1d40:	1885883a 	add	r2,r3,r2
    1d44:	e1bff617 	ldw	r6,-40(fp)
    1d48:	100b883a 	mov	r5,r2
    1d4c:	e13ff517 	ldw	r4,-44(fp)
    1d50:	00032b40 	call	32b4 <memcpy>
      ptr   += n;
    1d54:	e0fff517 	ldw	r3,-44(fp)
    1d58:	e0bff617 	ldw	r2,-40(fp)
    1d5c:	1885883a 	add	r2,r3,r2
    1d60:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    1d64:	e0fffe17 	ldw	r3,-8(fp)
    1d68:	e0bff617 	ldw	r2,-40(fp)
    1d6c:	1885c83a 	sub	r2,r3,r2
    1d70:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1d74:	e0fff817 	ldw	r3,-32(fp)
    1d78:	e0bff617 	ldw	r2,-40(fp)
    1d7c:	1885883a 	add	r2,r3,r2
    1d80:	10c1ffcc 	andi	r3,r2,2047
    1d84:	e0bffc17 	ldw	r2,-16(fp)
    1d88:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1d8c:	e0bffe17 	ldw	r2,-8(fp)
    1d90:	00bfcf16 	blt	zero,r2,1cd0 <__alt_exception_stack_pointer+0xf8001cd0>
    1d94:	00000106 	br	1d9c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    1d98:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    1d9c:	e0fff517 	ldw	r3,-44(fp)
    1da0:	e0bffd17 	ldw	r2,-12(fp)
    1da4:	1880141e 	bne	r3,r2,1df8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1da8:	e0bfff17 	ldw	r2,-4(fp)
    1dac:	1090000c 	andi	r2,r2,16384
    1db0:	1000131e 	bne	r2,zero,1e00 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1db4:	0001883a 	nop
    1db8:	e0bffc17 	ldw	r2,-16(fp)
    1dbc:	10c00a17 	ldw	r3,40(r2)
    1dc0:	e0bff717 	ldw	r2,-36(fp)
    1dc4:	1880051e 	bne	r3,r2,1ddc <altera_avalon_jtag_uart_read+0x138>
    1dc8:	e0bffc17 	ldw	r2,-16(fp)
    1dcc:	10c00917 	ldw	r3,36(r2)
    1dd0:	e0bffc17 	ldw	r2,-16(fp)
    1dd4:	10800117 	ldw	r2,4(r2)
    1dd8:	18bff736 	bltu	r3,r2,1db8 <__alt_exception_stack_pointer+0xf8001db8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1ddc:	e0bffc17 	ldw	r2,-16(fp)
    1de0:	10c00a17 	ldw	r3,40(r2)
    1de4:	e0bff717 	ldw	r2,-36(fp)
    1de8:	18800726 	beq	r3,r2,1e08 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1dec:	e0bffe17 	ldw	r2,-8(fp)
    1df0:	00bfb716 	blt	zero,r2,1cd0 <__alt_exception_stack_pointer+0xf8001cd0>
    1df4:	00000506 	br	1e0c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    1df8:	0001883a 	nop
    1dfc:	00000306 	br	1e0c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1e00:	0001883a 	nop
    1e04:	00000106 	br	1e0c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1e08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1e0c:	e0fff517 	ldw	r3,-44(fp)
    1e10:	e0bffd17 	ldw	r2,-12(fp)
    1e14:	18801826 	beq	r3,r2,1e78 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e18:	0005303a 	rdctl	r2,status
    1e1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e20:	e0fffb17 	ldw	r3,-20(fp)
    1e24:	00bfff84 	movi	r2,-2
    1e28:	1884703a 	and	r2,r3,r2
    1e2c:	1001703a 	wrctl	status,r2
  
  return context;
    1e30:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1e34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1e38:	e0bffc17 	ldw	r2,-16(fp)
    1e3c:	10800817 	ldw	r2,32(r2)
    1e40:	10c00054 	ori	r3,r2,1
    1e44:	e0bffc17 	ldw	r2,-16(fp)
    1e48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800104 	addi	r2,r2,4
    1e58:	1007883a 	mov	r3,r2
    1e5c:	e0bffc17 	ldw	r2,-16(fp)
    1e60:	10800817 	ldw	r2,32(r2)
    1e64:	18800035 	stwio	r2,0(r3)
    1e68:	e0bffa17 	ldw	r2,-24(fp)
    1e6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e70:	e0bff917 	ldw	r2,-28(fp)
    1e74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1e78:	e0fff517 	ldw	r3,-44(fp)
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	18800426 	beq	r3,r2,1e94 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1e84:	e0fff517 	ldw	r3,-44(fp)
    1e88:	e0bffd17 	ldw	r2,-12(fp)
    1e8c:	1885c83a 	sub	r2,r3,r2
    1e90:	00000606 	br	1eac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1e94:	e0bfff17 	ldw	r2,-4(fp)
    1e98:	1090000c 	andi	r2,r2,16384
    1e9c:	10000226 	beq	r2,zero,1ea8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1ea0:	00bffd44 	movi	r2,-11
    1ea4:	00000106 	br	1eac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1ea8:	00bffec4 	movi	r2,-5
}
    1eac:	e037883a 	mov	sp,fp
    1eb0:	dfc00117 	ldw	ra,4(sp)
    1eb4:	df000017 	ldw	fp,0(sp)
    1eb8:	dec00204 	addi	sp,sp,8
    1ebc:	f800283a 	ret

00001ec0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1ec0:	defff304 	addi	sp,sp,-52
    1ec4:	dfc00c15 	stw	ra,48(sp)
    1ec8:	df000b15 	stw	fp,44(sp)
    1ecc:	df000b04 	addi	fp,sp,44
    1ed0:	e13ffc15 	stw	r4,-16(fp)
    1ed4:	e17ffd15 	stw	r5,-12(fp)
    1ed8:	e1bffe15 	stw	r6,-8(fp)
    1edc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1ee0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1ee4:	e0bffd17 	ldw	r2,-12(fp)
    1ee8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1eec:	00003706 	br	1fcc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1ef0:	e0bffc17 	ldw	r2,-16(fp)
    1ef4:	10800c17 	ldw	r2,48(r2)
    1ef8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1efc:	e0bffc17 	ldw	r2,-16(fp)
    1f00:	10800d17 	ldw	r2,52(r2)
    1f04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1f08:	e0fff917 	ldw	r3,-28(fp)
    1f0c:	e0bff517 	ldw	r2,-44(fp)
    1f10:	1880062e 	bgeu	r3,r2,1f2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1f14:	e0fff517 	ldw	r3,-44(fp)
    1f18:	e0bff917 	ldw	r2,-28(fp)
    1f1c:	1885c83a 	sub	r2,r3,r2
    1f20:	10bfffc4 	addi	r2,r2,-1
    1f24:	e0bff615 	stw	r2,-40(fp)
    1f28:	00000b06 	br	1f58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    1f2c:	e0bff517 	ldw	r2,-44(fp)
    1f30:	10000526 	beq	r2,zero,1f48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1f34:	00c20004 	movi	r3,2048
    1f38:	e0bff917 	ldw	r2,-28(fp)
    1f3c:	1885c83a 	sub	r2,r3,r2
    1f40:	e0bff615 	stw	r2,-40(fp)
    1f44:	00000406 	br	1f58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1f48:	00c1ffc4 	movi	r3,2047
    1f4c:	e0bff917 	ldw	r2,-28(fp)
    1f50:	1885c83a 	sub	r2,r3,r2
    1f54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1f58:	e0bff617 	ldw	r2,-40(fp)
    1f5c:	10001e26 	beq	r2,zero,1fd8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    1f60:	e0fffe17 	ldw	r3,-8(fp)
    1f64:	e0bff617 	ldw	r2,-40(fp)
    1f68:	1880022e 	bgeu	r3,r2,1f74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1f74:	e0bffc17 	ldw	r2,-16(fp)
    1f78:	10c20e04 	addi	r3,r2,2104
    1f7c:	e0bff917 	ldw	r2,-28(fp)
    1f80:	1885883a 	add	r2,r3,r2
    1f84:	e1bff617 	ldw	r6,-40(fp)
    1f88:	e17ffd17 	ldw	r5,-12(fp)
    1f8c:	1009883a 	mov	r4,r2
    1f90:	00032b40 	call	32b4 <memcpy>
      ptr   += n;
    1f94:	e0fffd17 	ldw	r3,-12(fp)
    1f98:	e0bff617 	ldw	r2,-40(fp)
    1f9c:	1885883a 	add	r2,r3,r2
    1fa0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1fa4:	e0fffe17 	ldw	r3,-8(fp)
    1fa8:	e0bff617 	ldw	r2,-40(fp)
    1fac:	1885c83a 	sub	r2,r3,r2
    1fb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1fb4:	e0fff917 	ldw	r3,-28(fp)
    1fb8:	e0bff617 	ldw	r2,-40(fp)
    1fbc:	1885883a 	add	r2,r3,r2
    1fc0:	10c1ffcc 	andi	r3,r2,2047
    1fc4:	e0bffc17 	ldw	r2,-16(fp)
    1fc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1fcc:	e0bffe17 	ldw	r2,-8(fp)
    1fd0:	00bfc716 	blt	zero,r2,1ef0 <__alt_exception_stack_pointer+0xf8001ef0>
    1fd4:	00000106 	br	1fdc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1fd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1fdc:	0005303a 	rdctl	r2,status
    1fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1fe4:	e0fffb17 	ldw	r3,-20(fp)
    1fe8:	00bfff84 	movi	r2,-2
    1fec:	1884703a 	and	r2,r3,r2
    1ff0:	1001703a 	wrctl	status,r2
  
  return context;
    1ff4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1ff8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1ffc:	e0bffc17 	ldw	r2,-16(fp)
    2000:	10800817 	ldw	r2,32(r2)
    2004:	10c00094 	ori	r3,r2,2
    2008:	e0bffc17 	ldw	r2,-16(fp)
    200c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2010:	e0bffc17 	ldw	r2,-16(fp)
    2014:	10800017 	ldw	r2,0(r2)
    2018:	10800104 	addi	r2,r2,4
    201c:	1007883a 	mov	r3,r2
    2020:	e0bffc17 	ldw	r2,-16(fp)
    2024:	10800817 	ldw	r2,32(r2)
    2028:	18800035 	stwio	r2,0(r3)
    202c:	e0bffa17 	ldw	r2,-24(fp)
    2030:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2034:	e0bff817 	ldw	r2,-32(fp)
    2038:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    203c:	e0bffe17 	ldw	r2,-8(fp)
    2040:	0080100e 	bge	zero,r2,2084 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    2044:	e0bfff17 	ldw	r2,-4(fp)
    2048:	1090000c 	andi	r2,r2,16384
    204c:	1000101e 	bne	r2,zero,2090 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2050:	0001883a 	nop
    2054:	e0bffc17 	ldw	r2,-16(fp)
    2058:	10c00d17 	ldw	r3,52(r2)
    205c:	e0bff517 	ldw	r2,-44(fp)
    2060:	1880051e 	bne	r3,r2,2078 <altera_avalon_jtag_uart_write+0x1b8>
    2064:	e0bffc17 	ldw	r2,-16(fp)
    2068:	10c00917 	ldw	r3,36(r2)
    206c:	e0bffc17 	ldw	r2,-16(fp)
    2070:	10800117 	ldw	r2,4(r2)
    2074:	18bff736 	bltu	r3,r2,2054 <__alt_exception_stack_pointer+0xf8002054>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    2078:	e0bffc17 	ldw	r2,-16(fp)
    207c:	10800917 	ldw	r2,36(r2)
    2080:	1000051e 	bne	r2,zero,2098 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    2084:	e0bffe17 	ldw	r2,-8(fp)
    2088:	00bfd016 	blt	zero,r2,1fcc <__alt_exception_stack_pointer+0xf8001fcc>
    208c:	00000306 	br	209c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    2090:	0001883a 	nop
    2094:	00000106 	br	209c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    2098:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    209c:	e0fffd17 	ldw	r3,-12(fp)
    20a0:	e0bff717 	ldw	r2,-36(fp)
    20a4:	18800426 	beq	r3,r2,20b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    20a8:	e0fffd17 	ldw	r3,-12(fp)
    20ac:	e0bff717 	ldw	r2,-36(fp)
    20b0:	1885c83a 	sub	r2,r3,r2
    20b4:	00000606 	br	20d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    20b8:	e0bfff17 	ldw	r2,-4(fp)
    20bc:	1090000c 	andi	r2,r2,16384
    20c0:	10000226 	beq	r2,zero,20cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    20c4:	00bffd44 	movi	r2,-11
    20c8:	00000106 	br	20d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    20cc:	00bffec4 	movi	r2,-5
}
    20d0:	e037883a 	mov	sp,fp
    20d4:	dfc00117 	ldw	ra,4(sp)
    20d8:	df000017 	ldw	fp,0(sp)
    20dc:	dec00204 	addi	sp,sp,8
    20e0:	f800283a 	ret

000020e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    20e4:	defffa04 	addi	sp,sp,-24
    20e8:	dfc00515 	stw	ra,20(sp)
    20ec:	df000415 	stw	fp,16(sp)
    20f0:	df000404 	addi	fp,sp,16
    20f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    20f8:	0007883a 	mov	r3,zero
    20fc:	e0bfff17 	ldw	r2,-4(fp)
    2100:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2104:	e0bfff17 	ldw	r2,-4(fp)
    2108:	10800104 	addi	r2,r2,4
    210c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2110:	0005303a 	rdctl	r2,status
    2114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2118:	e0fffd17 	ldw	r3,-12(fp)
    211c:	00bfff84 	movi	r2,-2
    2120:	1884703a 	and	r2,r3,r2
    2124:	1001703a 	wrctl	status,r2
  
  return context;
    2128:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    212c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    2130:	0002dc80 	call	2dc8 <alt_tick>
    2134:	e0bffc17 	ldw	r2,-16(fp)
    2138:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    213c:	e0bffe17 	ldw	r2,-8(fp)
    2140:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    2144:	0001883a 	nop
    2148:	e037883a 	mov	sp,fp
    214c:	dfc00117 	ldw	ra,4(sp)
    2150:	df000017 	ldw	fp,0(sp)
    2154:	dec00204 	addi	sp,sp,8
    2158:	f800283a 	ret

0000215c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    215c:	defff804 	addi	sp,sp,-32
    2160:	dfc00715 	stw	ra,28(sp)
    2164:	df000615 	stw	fp,24(sp)
    2168:	df000604 	addi	fp,sp,24
    216c:	e13ffc15 	stw	r4,-16(fp)
    2170:	e17ffd15 	stw	r5,-12(fp)
    2174:	e1bffe15 	stw	r6,-8(fp)
    2178:	e1ffff15 	stw	r7,-4(fp)
    217c:	e0bfff17 	ldw	r2,-4(fp)
    2180:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    2184:	d0a6af17 	ldw	r2,-25924(gp)
    2188:	1000021e 	bne	r2,zero,2194 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    218c:	e0bffb17 	ldw	r2,-20(fp)
    2190:	d0a6af15 	stw	r2,-25924(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    2194:	e0bffc17 	ldw	r2,-16(fp)
    2198:	10800104 	addi	r2,r2,4
    219c:	00c001c4 	movi	r3,7
    21a0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    21a4:	d8000015 	stw	zero,0(sp)
    21a8:	e1fffc17 	ldw	r7,-16(fp)
    21ac:	01800034 	movhi	r6,0
    21b0:	31883904 	addi	r6,r6,8420
    21b4:	e17ffe17 	ldw	r5,-8(fp)
    21b8:	e13ffd17 	ldw	r4,-12(fp)
    21bc:	00026240 	call	2624 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    21c0:	0001883a 	nop
    21c4:	e037883a 	mov	sp,fp
    21c8:	dfc00117 	ldw	ra,4(sp)
    21cc:	df000017 	ldw	fp,0(sp)
    21d0:	dec00204 	addi	sp,sp,8
    21d4:	f800283a 	ret

000021d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    21d8:	defff504 	addi	sp,sp,-44
    21dc:	df000a15 	stw	fp,40(sp)
    21e0:	df000a04 	addi	fp,sp,40
    21e4:	e13ffc15 	stw	r4,-16(fp)
    21e8:	e17ffd15 	stw	r5,-12(fp)
    21ec:	e1bffe15 	stw	r6,-8(fp)
    21f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    21f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    21f8:	d0a6af17 	ldw	r2,-25924(gp)
  
  if (alt_ticks_per_second ())
    21fc:	10003c26 	beq	r2,zero,22f0 <alt_alarm_start+0x118>
  {
    if (alarm)
    2200:	e0bffc17 	ldw	r2,-16(fp)
    2204:	10003826 	beq	r2,zero,22e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    2208:	e0bffc17 	ldw	r2,-16(fp)
    220c:	e0fffe17 	ldw	r3,-8(fp)
    2210:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2214:	e0bffc17 	ldw	r2,-16(fp)
    2218:	e0ffff17 	ldw	r3,-4(fp)
    221c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2220:	0005303a 	rdctl	r2,status
    2224:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2228:	e0fff917 	ldw	r3,-28(fp)
    222c:	00bfff84 	movi	r2,-2
    2230:	1884703a 	and	r2,r3,r2
    2234:	1001703a 	wrctl	status,r2
  
  return context;
    2238:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    223c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2240:	d0a6b017 	ldw	r2,-25920(gp)
      
      current_nticks = alt_nticks();
    2244:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2248:	e0fffd17 	ldw	r3,-12(fp)
    224c:	e0bff617 	ldw	r2,-40(fp)
    2250:	1885883a 	add	r2,r3,r2
    2254:	10c00044 	addi	r3,r2,1
    2258:	e0bffc17 	ldw	r2,-16(fp)
    225c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2260:	e0bffc17 	ldw	r2,-16(fp)
    2264:	10c00217 	ldw	r3,8(r2)
    2268:	e0bff617 	ldw	r2,-40(fp)
    226c:	1880042e 	bgeu	r3,r2,2280 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    2270:	e0bffc17 	ldw	r2,-16(fp)
    2274:	00c00044 	movi	r3,1
    2278:	10c00405 	stb	r3,16(r2)
    227c:	00000206 	br	2288 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    2280:	e0bffc17 	ldw	r2,-16(fp)
    2284:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2288:	e0bffc17 	ldw	r2,-16(fp)
    228c:	d0e00b04 	addi	r3,gp,-32724
    2290:	e0fffa15 	stw	r3,-24(fp)
    2294:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2298:	e0bffb17 	ldw	r2,-20(fp)
    229c:	e0fffa17 	ldw	r3,-24(fp)
    22a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    22a4:	e0bffa17 	ldw	r2,-24(fp)
    22a8:	10c00017 	ldw	r3,0(r2)
    22ac:	e0bffb17 	ldw	r2,-20(fp)
    22b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    22b4:	e0bffa17 	ldw	r2,-24(fp)
    22b8:	10800017 	ldw	r2,0(r2)
    22bc:	e0fffb17 	ldw	r3,-20(fp)
    22c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    22c4:	e0bffa17 	ldw	r2,-24(fp)
    22c8:	e0fffb17 	ldw	r3,-20(fp)
    22cc:	10c00015 	stw	r3,0(r2)
    22d0:	e0bff817 	ldw	r2,-32(fp)
    22d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    22d8:	e0bff717 	ldw	r2,-36(fp)
    22dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    22e0:	0005883a 	mov	r2,zero
    22e4:	00000306 	br	22f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    22e8:	00bffa84 	movi	r2,-22
    22ec:	00000106 	br	22f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    22f0:	00bfde84 	movi	r2,-134
  }
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	df000017 	ldw	fp,0(sp)
    22fc:	dec00104 	addi	sp,sp,4
    2300:	f800283a 	ret

00002304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2304:	defffe04 	addi	sp,sp,-8
    2308:	dfc00115 	stw	ra,4(sp)
    230c:	df000015 	stw	fp,0(sp)
    2310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2314:	d0a00a17 	ldw	r2,-32728(gp)
    2318:	10000326 	beq	r2,zero,2328 <alt_get_errno+0x24>
    231c:	d0a00a17 	ldw	r2,-32728(gp)
    2320:	103ee83a 	callr	r2
    2324:	00000106 	br	232c <alt_get_errno+0x28>
    2328:	d0a6aa04 	addi	r2,gp,-25944
}
    232c:	e037883a 	mov	sp,fp
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	df000017 	ldw	fp,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret

00002340 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2340:	defffb04 	addi	sp,sp,-20
    2344:	dfc00415 	stw	ra,16(sp)
    2348:	df000315 	stw	fp,12(sp)
    234c:	df000304 	addi	fp,sp,12
    2350:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2354:	e0bfff17 	ldw	r2,-4(fp)
    2358:	10000816 	blt	r2,zero,237c <close+0x3c>
    235c:	01400304 	movi	r5,12
    2360:	e13fff17 	ldw	r4,-4(fp)
    2364:	000066c0 	call	66c <__mulsi3>
    2368:	1007883a 	mov	r3,r2
    236c:	00800034 	movhi	r2,0
    2370:	10941604 	addi	r2,r2,20568
    2374:	1885883a 	add	r2,r3,r2
    2378:	00000106 	br	2380 <close+0x40>
    237c:	0005883a 	mov	r2,zero
    2380:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2384:	e0bffd17 	ldw	r2,-12(fp)
    2388:	10001926 	beq	r2,zero,23f0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	10800017 	ldw	r2,0(r2)
    2394:	10800417 	ldw	r2,16(r2)
    2398:	10000626 	beq	r2,zero,23b4 <close+0x74>
    239c:	e0bffd17 	ldw	r2,-12(fp)
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	10800417 	ldw	r2,16(r2)
    23a8:	e13ffd17 	ldw	r4,-12(fp)
    23ac:	103ee83a 	callr	r2
    23b0:	00000106 	br	23b8 <close+0x78>
    23b4:	0005883a 	mov	r2,zero
    23b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    23bc:	e13fff17 	ldw	r4,-4(fp)
    23c0:	0002ca80 	call	2ca8 <alt_release_fd>
    if (rval < 0)
    23c4:	e0bffe17 	ldw	r2,-8(fp)
    23c8:	1000070e 	bge	r2,zero,23e8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    23cc:	00023040 	call	2304 <alt_get_errno>
    23d0:	1007883a 	mov	r3,r2
    23d4:	e0bffe17 	ldw	r2,-8(fp)
    23d8:	0085c83a 	sub	r2,zero,r2
    23dc:	18800015 	stw	r2,0(r3)
      return -1;
    23e0:	00bfffc4 	movi	r2,-1
    23e4:	00000706 	br	2404 <close+0xc4>
    }
    return 0;
    23e8:	0005883a 	mov	r2,zero
    23ec:	00000506 	br	2404 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    23f0:	00023040 	call	2304 <alt_get_errno>
    23f4:	1007883a 	mov	r3,r2
    23f8:	00801444 	movi	r2,81
    23fc:	18800015 	stw	r2,0(r3)
    return -1;
    2400:	00bfffc4 	movi	r2,-1
  }
}
    2404:	e037883a 	mov	sp,fp
    2408:	dfc00117 	ldw	ra,4(sp)
    240c:	df000017 	ldw	fp,0(sp)
    2410:	dec00204 	addi	sp,sp,8
    2414:	f800283a 	ret

00002418 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2418:	deffff04 	addi	sp,sp,-4
    241c:	df000015 	stw	fp,0(sp)
    2420:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2424:	0001883a 	nop
    2428:	e037883a 	mov	sp,fp
    242c:	df000017 	ldw	fp,0(sp)
    2430:	dec00104 	addi	sp,sp,4
    2434:	f800283a 	ret

00002438 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2438:	defffc04 	addi	sp,sp,-16
    243c:	df000315 	stw	fp,12(sp)
    2440:	df000304 	addi	fp,sp,12
    2444:	e13ffd15 	stw	r4,-12(fp)
    2448:	e17ffe15 	stw	r5,-8(fp)
    244c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2450:	e0bfff17 	ldw	r2,-4(fp)
}
    2454:	e037883a 	mov	sp,fp
    2458:	df000017 	ldw	fp,0(sp)
    245c:	dec00104 	addi	sp,sp,4
    2460:	f800283a 	ret

00002464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2464:	defffe04 	addi	sp,sp,-8
    2468:	dfc00115 	stw	ra,4(sp)
    246c:	df000015 	stw	fp,0(sp)
    2470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2474:	d0a00a17 	ldw	r2,-32728(gp)
    2478:	10000326 	beq	r2,zero,2488 <alt_get_errno+0x24>
    247c:	d0a00a17 	ldw	r2,-32728(gp)
    2480:	103ee83a 	callr	r2
    2484:	00000106 	br	248c <alt_get_errno+0x28>
    2488:	d0a6aa04 	addi	r2,gp,-25944
}
    248c:	e037883a 	mov	sp,fp
    2490:	dfc00117 	ldw	ra,4(sp)
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00204 	addi	sp,sp,8
    249c:	f800283a 	ret

000024a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    24a0:	defffa04 	addi	sp,sp,-24
    24a4:	dfc00515 	stw	ra,20(sp)
    24a8:	df000415 	stw	fp,16(sp)
    24ac:	df000404 	addi	fp,sp,16
    24b0:	e13ffe15 	stw	r4,-8(fp)
    24b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    24b8:	e0bffe17 	ldw	r2,-8(fp)
    24bc:	10000326 	beq	r2,zero,24cc <alt_dev_llist_insert+0x2c>
    24c0:	e0bffe17 	ldw	r2,-8(fp)
    24c4:	10800217 	ldw	r2,8(r2)
    24c8:	1000061e 	bne	r2,zero,24e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    24cc:	00024640 	call	2464 <alt_get_errno>
    24d0:	1007883a 	mov	r3,r2
    24d4:	00800584 	movi	r2,22
    24d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    24dc:	00bffa84 	movi	r2,-22
    24e0:	00001306 	br	2530 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    24e4:	e0bffe17 	ldw	r2,-8(fp)
    24e8:	e0ffff17 	ldw	r3,-4(fp)
    24ec:	e0fffc15 	stw	r3,-16(fp)
    24f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    24f4:	e0bffd17 	ldw	r2,-12(fp)
    24f8:	e0fffc17 	ldw	r3,-16(fp)
    24fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2500:	e0bffc17 	ldw	r2,-16(fp)
    2504:	10c00017 	ldw	r3,0(r2)
    2508:	e0bffd17 	ldw	r2,-12(fp)
    250c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2510:	e0bffc17 	ldw	r2,-16(fp)
    2514:	10800017 	ldw	r2,0(r2)
    2518:	e0fffd17 	ldw	r3,-12(fp)
    251c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2520:	e0bffc17 	ldw	r2,-16(fp)
    2524:	e0fffd17 	ldw	r3,-12(fp)
    2528:	10c00015 	stw	r3,0(r2)

  return 0;  
    252c:	0005883a 	mov	r2,zero
}
    2530:	e037883a 	mov	sp,fp
    2534:	dfc00117 	ldw	ra,4(sp)
    2538:	df000017 	ldw	fp,0(sp)
    253c:	dec00204 	addi	sp,sp,8
    2540:	f800283a 	ret

00002544 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2544:	defffd04 	addi	sp,sp,-12
    2548:	dfc00215 	stw	ra,8(sp)
    254c:	df000115 	stw	fp,4(sp)
    2550:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2554:	00800034 	movhi	r2,0
    2558:	108dd704 	addi	r2,r2,14172
    255c:	e0bfff15 	stw	r2,-4(fp)
    2560:	00000606 	br	257c <_do_ctors+0x38>
        (*ctor) (); 
    2564:	e0bfff17 	ldw	r2,-4(fp)
    2568:	10800017 	ldw	r2,0(r2)
    256c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2570:	e0bfff17 	ldw	r2,-4(fp)
    2574:	10bfff04 	addi	r2,r2,-4
    2578:	e0bfff15 	stw	r2,-4(fp)
    257c:	e0ffff17 	ldw	r3,-4(fp)
    2580:	00800034 	movhi	r2,0
    2584:	108dd804 	addi	r2,r2,14176
    2588:	18bff62e 	bgeu	r3,r2,2564 <__alt_exception_stack_pointer+0xf8002564>
        (*ctor) (); 
}
    258c:	0001883a 	nop
    2590:	e037883a 	mov	sp,fp
    2594:	dfc00117 	ldw	ra,4(sp)
    2598:	df000017 	ldw	fp,0(sp)
    259c:	dec00204 	addi	sp,sp,8
    25a0:	f800283a 	ret

000025a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    25a4:	defffd04 	addi	sp,sp,-12
    25a8:	dfc00215 	stw	ra,8(sp)
    25ac:	df000115 	stw	fp,4(sp)
    25b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    25b4:	00800034 	movhi	r2,0
    25b8:	108dd704 	addi	r2,r2,14172
    25bc:	e0bfff15 	stw	r2,-4(fp)
    25c0:	00000606 	br	25dc <_do_dtors+0x38>
        (*dtor) (); 
    25c4:	e0bfff17 	ldw	r2,-4(fp)
    25c8:	10800017 	ldw	r2,0(r2)
    25cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    25d0:	e0bfff17 	ldw	r2,-4(fp)
    25d4:	10bfff04 	addi	r2,r2,-4
    25d8:	e0bfff15 	stw	r2,-4(fp)
    25dc:	e0ffff17 	ldw	r3,-4(fp)
    25e0:	00800034 	movhi	r2,0
    25e4:	108dd804 	addi	r2,r2,14176
    25e8:	18bff62e 	bgeu	r3,r2,25c4 <__alt_exception_stack_pointer+0xf80025c4>
        (*dtor) (); 
}
    25ec:	0001883a 	nop
    25f0:	e037883a 	mov	sp,fp
    25f4:	dfc00117 	ldw	ra,4(sp)
    25f8:	df000017 	ldw	fp,0(sp)
    25fc:	dec00204 	addi	sp,sp,8
    2600:	f800283a 	ret

00002604 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2604:	deffff04 	addi	sp,sp,-4
    2608:	df000015 	stw	fp,0(sp)
    260c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2610:	0001883a 	nop
    2614:	e037883a 	mov	sp,fp
    2618:	df000017 	ldw	fp,0(sp)
    261c:	dec00104 	addi	sp,sp,4
    2620:	f800283a 	ret

00002624 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2624:	defff904 	addi	sp,sp,-28
    2628:	dfc00615 	stw	ra,24(sp)
    262c:	df000515 	stw	fp,20(sp)
    2630:	df000504 	addi	fp,sp,20
    2634:	e13ffc15 	stw	r4,-16(fp)
    2638:	e17ffd15 	stw	r5,-12(fp)
    263c:	e1bffe15 	stw	r6,-8(fp)
    2640:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2644:	e0800217 	ldw	r2,8(fp)
    2648:	d8800015 	stw	r2,0(sp)
    264c:	e1ffff17 	ldw	r7,-4(fp)
    2650:	e1bffe17 	ldw	r6,-8(fp)
    2654:	e17ffd17 	ldw	r5,-12(fp)
    2658:	e13ffc17 	ldw	r4,-16(fp)
    265c:	00027d40 	call	27d4 <alt_iic_isr_register>
}  
    2660:	e037883a 	mov	sp,fp
    2664:	dfc00117 	ldw	ra,4(sp)
    2668:	df000017 	ldw	fp,0(sp)
    266c:	dec00204 	addi	sp,sp,8
    2670:	f800283a 	ret

00002674 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2674:	defff904 	addi	sp,sp,-28
    2678:	df000615 	stw	fp,24(sp)
    267c:	df000604 	addi	fp,sp,24
    2680:	e13ffe15 	stw	r4,-8(fp)
    2684:	e17fff15 	stw	r5,-4(fp)
    2688:	e0bfff17 	ldw	r2,-4(fp)
    268c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2690:	0005303a 	rdctl	r2,status
    2694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2698:	e0fffb17 	ldw	r3,-20(fp)
    269c:	00bfff84 	movi	r2,-2
    26a0:	1884703a 	and	r2,r3,r2
    26a4:	1001703a 	wrctl	status,r2
  
  return context;
    26a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    26ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    26b0:	00c00044 	movi	r3,1
    26b4:	e0bffa17 	ldw	r2,-24(fp)
    26b8:	1884983a 	sll	r2,r3,r2
    26bc:	1007883a 	mov	r3,r2
    26c0:	d0a6ae17 	ldw	r2,-25928(gp)
    26c4:	1884b03a 	or	r2,r3,r2
    26c8:	d0a6ae15 	stw	r2,-25928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    26cc:	d0a6ae17 	ldw	r2,-25928(gp)
    26d0:	100170fa 	wrctl	ienable,r2
    26d4:	e0bffc17 	ldw	r2,-16(fp)
    26d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26dc:	e0bffd17 	ldw	r2,-12(fp)
    26e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    26e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    26e8:	0001883a 	nop
}
    26ec:	e037883a 	mov	sp,fp
    26f0:	df000017 	ldw	fp,0(sp)
    26f4:	dec00104 	addi	sp,sp,4
    26f8:	f800283a 	ret

000026fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    26fc:	defff904 	addi	sp,sp,-28
    2700:	df000615 	stw	fp,24(sp)
    2704:	df000604 	addi	fp,sp,24
    2708:	e13ffe15 	stw	r4,-8(fp)
    270c:	e17fff15 	stw	r5,-4(fp)
    2710:	e0bfff17 	ldw	r2,-4(fp)
    2714:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2718:	0005303a 	rdctl	r2,status
    271c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2720:	e0fffb17 	ldw	r3,-20(fp)
    2724:	00bfff84 	movi	r2,-2
    2728:	1884703a 	and	r2,r3,r2
    272c:	1001703a 	wrctl	status,r2
  
  return context;
    2730:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2734:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    2738:	00c00044 	movi	r3,1
    273c:	e0bffa17 	ldw	r2,-24(fp)
    2740:	1884983a 	sll	r2,r3,r2
    2744:	0084303a 	nor	r2,zero,r2
    2748:	1007883a 	mov	r3,r2
    274c:	d0a6ae17 	ldw	r2,-25928(gp)
    2750:	1884703a 	and	r2,r3,r2
    2754:	d0a6ae15 	stw	r2,-25928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2758:	d0a6ae17 	ldw	r2,-25928(gp)
    275c:	100170fa 	wrctl	ienable,r2
    2760:	e0bffc17 	ldw	r2,-16(fp)
    2764:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2768:	e0bffd17 	ldw	r2,-12(fp)
    276c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2770:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    2774:	0001883a 	nop
}
    2778:	e037883a 	mov	sp,fp
    277c:	df000017 	ldw	fp,0(sp)
    2780:	dec00104 	addi	sp,sp,4
    2784:	f800283a 	ret

00002788 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    2788:	defffc04 	addi	sp,sp,-16
    278c:	df000315 	stw	fp,12(sp)
    2790:	df000304 	addi	fp,sp,12
    2794:	e13ffe15 	stw	r4,-8(fp)
    2798:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    279c:	000530fa 	rdctl	r2,ienable
    27a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    27a4:	00c00044 	movi	r3,1
    27a8:	e0bfff17 	ldw	r2,-4(fp)
    27ac:	1884983a 	sll	r2,r3,r2
    27b0:	1007883a 	mov	r3,r2
    27b4:	e0bffd17 	ldw	r2,-12(fp)
    27b8:	1884703a 	and	r2,r3,r2
    27bc:	1004c03a 	cmpne	r2,r2,zero
    27c0:	10803fcc 	andi	r2,r2,255
}
    27c4:	e037883a 	mov	sp,fp
    27c8:	df000017 	ldw	fp,0(sp)
    27cc:	dec00104 	addi	sp,sp,4
    27d0:	f800283a 	ret

000027d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    27d4:	defff504 	addi	sp,sp,-44
    27d8:	dfc00a15 	stw	ra,40(sp)
    27dc:	df000915 	stw	fp,36(sp)
    27e0:	df000904 	addi	fp,sp,36
    27e4:	e13ffc15 	stw	r4,-16(fp)
    27e8:	e17ffd15 	stw	r5,-12(fp)
    27ec:	e1bffe15 	stw	r6,-8(fp)
    27f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    27f4:	00bffa84 	movi	r2,-22
    27f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    27fc:	e0bffd17 	ldw	r2,-12(fp)
    2800:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2804:	e0bff817 	ldw	r2,-32(fp)
    2808:	10800808 	cmpgei	r2,r2,32
    280c:	1000271e 	bne	r2,zero,28ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2810:	0005303a 	rdctl	r2,status
    2814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2818:	e0fffb17 	ldw	r3,-20(fp)
    281c:	00bfff84 	movi	r2,-2
    2820:	1884703a 	and	r2,r3,r2
    2824:	1001703a 	wrctl	status,r2
  
  return context;
    2828:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    282c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    2830:	00800034 	movhi	r2,0
    2834:	109b3204 	addi	r2,r2,27848
    2838:	e0fff817 	ldw	r3,-32(fp)
    283c:	180690fa 	slli	r3,r3,3
    2840:	10c5883a 	add	r2,r2,r3
    2844:	e0fffe17 	ldw	r3,-8(fp)
    2848:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    284c:	00800034 	movhi	r2,0
    2850:	109b3204 	addi	r2,r2,27848
    2854:	e0fff817 	ldw	r3,-32(fp)
    2858:	180690fa 	slli	r3,r3,3
    285c:	10c5883a 	add	r2,r2,r3
    2860:	10800104 	addi	r2,r2,4
    2864:	e0ffff17 	ldw	r3,-4(fp)
    2868:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    286c:	e0bffe17 	ldw	r2,-8(fp)
    2870:	10000526 	beq	r2,zero,2888 <alt_iic_isr_register+0xb4>
    2874:	e0bff817 	ldw	r2,-32(fp)
    2878:	100b883a 	mov	r5,r2
    287c:	e13ffc17 	ldw	r4,-16(fp)
    2880:	00026740 	call	2674 <alt_ic_irq_enable>
    2884:	00000406 	br	2898 <alt_iic_isr_register+0xc4>
    2888:	e0bff817 	ldw	r2,-32(fp)
    288c:	100b883a 	mov	r5,r2
    2890:	e13ffc17 	ldw	r4,-16(fp)
    2894:	00026fc0 	call	26fc <alt_ic_irq_disable>
    2898:	e0bff715 	stw	r2,-36(fp)
    289c:	e0bffa17 	ldw	r2,-24(fp)
    28a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28a4:	e0bff917 	ldw	r2,-28(fp)
    28a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    28ac:	e0bff717 	ldw	r2,-36(fp)
}
    28b0:	e037883a 	mov	sp,fp
    28b4:	dfc00117 	ldw	ra,4(sp)
    28b8:	df000017 	ldw	fp,0(sp)
    28bc:	dec00204 	addi	sp,sp,8
    28c0:	f800283a 	ret

000028c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    28c4:	defff804 	addi	sp,sp,-32
    28c8:	dfc00715 	stw	ra,28(sp)
    28cc:	df000615 	stw	fp,24(sp)
    28d0:	dc000515 	stw	r16,20(sp)
    28d4:	df000604 	addi	fp,sp,24
    28d8:	e13ffb15 	stw	r4,-20(fp)
    28dc:	e17ffc15 	stw	r5,-16(fp)
    28e0:	e1bffd15 	stw	r6,-12(fp)
    28e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    28e8:	e1bffe17 	ldw	r6,-8(fp)
    28ec:	e17ffd17 	ldw	r5,-12(fp)
    28f0:	e13ffc17 	ldw	r4,-16(fp)
    28f4:	0002b4c0 	call	2b4c <open>
    28f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    28fc:	e0bffa17 	ldw	r2,-24(fp)
    2900:	10002216 	blt	r2,zero,298c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2904:	04000034 	movhi	r16,0
    2908:	84141604 	addi	r16,r16,20568
    290c:	e0bffa17 	ldw	r2,-24(fp)
    2910:	01400304 	movi	r5,12
    2914:	1009883a 	mov	r4,r2
    2918:	000066c0 	call	66c <__mulsi3>
    291c:	8085883a 	add	r2,r16,r2
    2920:	10c00017 	ldw	r3,0(r2)
    2924:	e0bffb17 	ldw	r2,-20(fp)
    2928:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    292c:	04000034 	movhi	r16,0
    2930:	84141604 	addi	r16,r16,20568
    2934:	e0bffa17 	ldw	r2,-24(fp)
    2938:	01400304 	movi	r5,12
    293c:	1009883a 	mov	r4,r2
    2940:	000066c0 	call	66c <__mulsi3>
    2944:	8085883a 	add	r2,r16,r2
    2948:	10800104 	addi	r2,r2,4
    294c:	10c00017 	ldw	r3,0(r2)
    2950:	e0bffb17 	ldw	r2,-20(fp)
    2954:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2958:	04000034 	movhi	r16,0
    295c:	84141604 	addi	r16,r16,20568
    2960:	e0bffa17 	ldw	r2,-24(fp)
    2964:	01400304 	movi	r5,12
    2968:	1009883a 	mov	r4,r2
    296c:	000066c0 	call	66c <__mulsi3>
    2970:	8085883a 	add	r2,r16,r2
    2974:	10800204 	addi	r2,r2,8
    2978:	10c00017 	ldw	r3,0(r2)
    297c:	e0bffb17 	ldw	r2,-20(fp)
    2980:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2984:	e13ffa17 	ldw	r4,-24(fp)
    2988:	0002ca80 	call	2ca8 <alt_release_fd>
  }
} 
    298c:	0001883a 	nop
    2990:	e6ffff04 	addi	sp,fp,-4
    2994:	dfc00217 	ldw	ra,8(sp)
    2998:	df000117 	ldw	fp,4(sp)
    299c:	dc000017 	ldw	r16,0(sp)
    29a0:	dec00304 	addi	sp,sp,12
    29a4:	f800283a 	ret

000029a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    29a8:	defffb04 	addi	sp,sp,-20
    29ac:	dfc00415 	stw	ra,16(sp)
    29b0:	df000315 	stw	fp,12(sp)
    29b4:	df000304 	addi	fp,sp,12
    29b8:	e13ffd15 	stw	r4,-12(fp)
    29bc:	e17ffe15 	stw	r5,-8(fp)
    29c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    29c4:	01c07fc4 	movi	r7,511
    29c8:	01800044 	movi	r6,1
    29cc:	e17ffd17 	ldw	r5,-12(fp)
    29d0:	01000034 	movhi	r4,0
    29d4:	21141904 	addi	r4,r4,20580
    29d8:	00028c40 	call	28c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    29dc:	01c07fc4 	movi	r7,511
    29e0:	000d883a 	mov	r6,zero
    29e4:	e17ffe17 	ldw	r5,-8(fp)
    29e8:	01000034 	movhi	r4,0
    29ec:	21141604 	addi	r4,r4,20568
    29f0:	00028c40 	call	28c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    29f4:	01c07fc4 	movi	r7,511
    29f8:	01800044 	movi	r6,1
    29fc:	e17fff17 	ldw	r5,-4(fp)
    2a00:	01000034 	movhi	r4,0
    2a04:	21141c04 	addi	r4,r4,20592
    2a08:	00028c40 	call	28c4 <alt_open_fd>
}  
    2a0c:	0001883a 	nop
    2a10:	e037883a 	mov	sp,fp
    2a14:	dfc00117 	ldw	ra,4(sp)
    2a18:	df000017 	ldw	fp,0(sp)
    2a1c:	dec00204 	addi	sp,sp,8
    2a20:	f800283a 	ret

00002a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2a24:	defffe04 	addi	sp,sp,-8
    2a28:	dfc00115 	stw	ra,4(sp)
    2a2c:	df000015 	stw	fp,0(sp)
    2a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2a34:	d0a00a17 	ldw	r2,-32728(gp)
    2a38:	10000326 	beq	r2,zero,2a48 <alt_get_errno+0x24>
    2a3c:	d0a00a17 	ldw	r2,-32728(gp)
    2a40:	103ee83a 	callr	r2
    2a44:	00000106 	br	2a4c <alt_get_errno+0x28>
    2a48:	d0a6aa04 	addi	r2,gp,-25944
}
    2a4c:	e037883a 	mov	sp,fp
    2a50:	dfc00117 	ldw	ra,4(sp)
    2a54:	df000017 	ldw	fp,0(sp)
    2a58:	dec00204 	addi	sp,sp,8
    2a5c:	f800283a 	ret

00002a60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2a60:	defffb04 	addi	sp,sp,-20
    2a64:	dfc00415 	stw	ra,16(sp)
    2a68:	df000315 	stw	fp,12(sp)
    2a6c:	dc000215 	stw	r16,8(sp)
    2a70:	df000304 	addi	fp,sp,12
    2a74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2a78:	e0bffe17 	ldw	r2,-8(fp)
    2a7c:	10800217 	ldw	r2,8(r2)
    2a80:	10d00034 	orhi	r3,r2,16384
    2a84:	e0bffe17 	ldw	r2,-8(fp)
    2a88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2a8c:	e03ffd15 	stw	zero,-12(fp)
    2a90:	00002306 	br	2b20 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2a94:	04000034 	movhi	r16,0
    2a98:	84141604 	addi	r16,r16,20568
    2a9c:	e0bffd17 	ldw	r2,-12(fp)
    2aa0:	01400304 	movi	r5,12
    2aa4:	1009883a 	mov	r4,r2
    2aa8:	000066c0 	call	66c <__mulsi3>
    2aac:	8085883a 	add	r2,r16,r2
    2ab0:	10c00017 	ldw	r3,0(r2)
    2ab4:	e0bffe17 	ldw	r2,-8(fp)
    2ab8:	10800017 	ldw	r2,0(r2)
    2abc:	1880151e 	bne	r3,r2,2b14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2ac0:	04000034 	movhi	r16,0
    2ac4:	84141604 	addi	r16,r16,20568
    2ac8:	e0bffd17 	ldw	r2,-12(fp)
    2acc:	01400304 	movi	r5,12
    2ad0:	1009883a 	mov	r4,r2
    2ad4:	000066c0 	call	66c <__mulsi3>
    2ad8:	8085883a 	add	r2,r16,r2
    2adc:	10800204 	addi	r2,r2,8
    2ae0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ae4:	10000b0e 	bge	r2,zero,2b14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2ae8:	01400304 	movi	r5,12
    2aec:	e13ffd17 	ldw	r4,-12(fp)
    2af0:	000066c0 	call	66c <__mulsi3>
    2af4:	1007883a 	mov	r3,r2
    2af8:	00800034 	movhi	r2,0
    2afc:	10941604 	addi	r2,r2,20568
    2b00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2b04:	e0bffe17 	ldw	r2,-8(fp)
    2b08:	18800226 	beq	r3,r2,2b14 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2b0c:	00bffcc4 	movi	r2,-13
    2b10:	00000806 	br	2b34 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2b14:	e0bffd17 	ldw	r2,-12(fp)
    2b18:	10800044 	addi	r2,r2,1
    2b1c:	e0bffd15 	stw	r2,-12(fp)
    2b20:	d0a00917 	ldw	r2,-32732(gp)
    2b24:	1007883a 	mov	r3,r2
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	18bfd92e 	bgeu	r3,r2,2a94 <__alt_exception_stack_pointer+0xf8002a94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2b30:	0005883a 	mov	r2,zero
}
    2b34:	e6ffff04 	addi	sp,fp,-4
    2b38:	dfc00217 	ldw	ra,8(sp)
    2b3c:	df000117 	ldw	fp,4(sp)
    2b40:	dc000017 	ldw	r16,0(sp)
    2b44:	dec00304 	addi	sp,sp,12
    2b48:	f800283a 	ret

00002b4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2b4c:	defff604 	addi	sp,sp,-40
    2b50:	dfc00915 	stw	ra,36(sp)
    2b54:	df000815 	stw	fp,32(sp)
    2b58:	df000804 	addi	fp,sp,32
    2b5c:	e13ffd15 	stw	r4,-12(fp)
    2b60:	e17ffe15 	stw	r5,-8(fp)
    2b64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2b68:	00bfffc4 	movi	r2,-1
    2b6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2b70:	00bffb44 	movi	r2,-19
    2b74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    2b78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2b7c:	d1600704 	addi	r5,gp,-32740
    2b80:	e13ffd17 	ldw	r4,-12(fp)
    2b84:	0002ef40 	call	2ef4 <alt_find_dev>
    2b88:	e0bff815 	stw	r2,-32(fp)
    2b8c:	e0bff817 	ldw	r2,-32(fp)
    2b90:	1000051e 	bne	r2,zero,2ba8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2b94:	e13ffd17 	ldw	r4,-12(fp)
    2b98:	0002f840 	call	2f84 <alt_find_file>
    2b9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2ba0:	00800044 	movi	r2,1
    2ba4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2ba8:	e0bff817 	ldw	r2,-32(fp)
    2bac:	10002b26 	beq	r2,zero,2c5c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2bb0:	e13ff817 	ldw	r4,-32(fp)
    2bb4:	000308c0 	call	308c <alt_get_fd>
    2bb8:	e0bff915 	stw	r2,-28(fp)
    2bbc:	e0bff917 	ldw	r2,-28(fp)
    2bc0:	1000030e 	bge	r2,zero,2bd0 <open+0x84>
    {
      status = index;
    2bc4:	e0bff917 	ldw	r2,-28(fp)
    2bc8:	e0bffa15 	stw	r2,-24(fp)
    2bcc:	00002506 	br	2c64 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    2bd0:	01400304 	movi	r5,12
    2bd4:	e13ff917 	ldw	r4,-28(fp)
    2bd8:	000066c0 	call	66c <__mulsi3>
    2bdc:	1007883a 	mov	r3,r2
    2be0:	00800034 	movhi	r2,0
    2be4:	10941604 	addi	r2,r2,20568
    2be8:	1885883a 	add	r2,r3,r2
    2bec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2bf0:	e0fffe17 	ldw	r3,-8(fp)
    2bf4:	00900034 	movhi	r2,16384
    2bf8:	10bfffc4 	addi	r2,r2,-1
    2bfc:	1886703a 	and	r3,r3,r2
    2c00:	e0bffc17 	ldw	r2,-16(fp)
    2c04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2c08:	e0bffb17 	ldw	r2,-20(fp)
    2c0c:	1000051e 	bne	r2,zero,2c24 <open+0xd8>
    2c10:	e13ffc17 	ldw	r4,-16(fp)
    2c14:	0002a600 	call	2a60 <alt_file_locked>
    2c18:	e0bffa15 	stw	r2,-24(fp)
    2c1c:	e0bffa17 	ldw	r2,-24(fp)
    2c20:	10001016 	blt	r2,zero,2c64 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2c24:	e0bff817 	ldw	r2,-32(fp)
    2c28:	10800317 	ldw	r2,12(r2)
    2c2c:	10000826 	beq	r2,zero,2c50 <open+0x104>
    2c30:	e0bff817 	ldw	r2,-32(fp)
    2c34:	10800317 	ldw	r2,12(r2)
    2c38:	e1ffff17 	ldw	r7,-4(fp)
    2c3c:	e1bffe17 	ldw	r6,-8(fp)
    2c40:	e17ffd17 	ldw	r5,-12(fp)
    2c44:	e13ffc17 	ldw	r4,-16(fp)
    2c48:	103ee83a 	callr	r2
    2c4c:	00000106 	br	2c54 <open+0x108>
    2c50:	0005883a 	mov	r2,zero
    2c54:	e0bffa15 	stw	r2,-24(fp)
    2c58:	00000206 	br	2c64 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2c5c:	00bffb44 	movi	r2,-19
    2c60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2c64:	e0bffa17 	ldw	r2,-24(fp)
    2c68:	1000090e 	bge	r2,zero,2c90 <open+0x144>
  {
    alt_release_fd (index);  
    2c6c:	e13ff917 	ldw	r4,-28(fp)
    2c70:	0002ca80 	call	2ca8 <alt_release_fd>
    ALT_ERRNO = -status;
    2c74:	0002a240 	call	2a24 <alt_get_errno>
    2c78:	1007883a 	mov	r3,r2
    2c7c:	e0bffa17 	ldw	r2,-24(fp)
    2c80:	0085c83a 	sub	r2,zero,r2
    2c84:	18800015 	stw	r2,0(r3)
    return -1;
    2c88:	00bfffc4 	movi	r2,-1
    2c8c:	00000106 	br	2c94 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    2c90:	e0bff917 	ldw	r2,-28(fp)
}
    2c94:	e037883a 	mov	sp,fp
    2c98:	dfc00117 	ldw	ra,4(sp)
    2c9c:	df000017 	ldw	fp,0(sp)
    2ca0:	dec00204 	addi	sp,sp,8
    2ca4:	f800283a 	ret

00002ca8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2ca8:	defffc04 	addi	sp,sp,-16
    2cac:	dfc00315 	stw	ra,12(sp)
    2cb0:	df000215 	stw	fp,8(sp)
    2cb4:	dc000115 	stw	r16,4(sp)
    2cb8:	df000204 	addi	fp,sp,8
    2cbc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2cc0:	e0bffe17 	ldw	r2,-8(fp)
    2cc4:	108000d0 	cmplti	r2,r2,3
    2cc8:	1000111e 	bne	r2,zero,2d10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    2ccc:	04000034 	movhi	r16,0
    2cd0:	84141604 	addi	r16,r16,20568
    2cd4:	e0bffe17 	ldw	r2,-8(fp)
    2cd8:	01400304 	movi	r5,12
    2cdc:	1009883a 	mov	r4,r2
    2ce0:	000066c0 	call	66c <__mulsi3>
    2ce4:	8085883a 	add	r2,r16,r2
    2ce8:	10800204 	addi	r2,r2,8
    2cec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2cf0:	04000034 	movhi	r16,0
    2cf4:	84141604 	addi	r16,r16,20568
    2cf8:	e0bffe17 	ldw	r2,-8(fp)
    2cfc:	01400304 	movi	r5,12
    2d00:	1009883a 	mov	r4,r2
    2d04:	000066c0 	call	66c <__mulsi3>
    2d08:	8085883a 	add	r2,r16,r2
    2d0c:	10000015 	stw	zero,0(r2)
  }
}
    2d10:	0001883a 	nop
    2d14:	e6ffff04 	addi	sp,fp,-4
    2d18:	dfc00217 	ldw	ra,8(sp)
    2d1c:	df000117 	ldw	fp,4(sp)
    2d20:	dc000017 	ldw	r16,0(sp)
    2d24:	dec00304 	addi	sp,sp,12
    2d28:	f800283a 	ret

00002d2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2d2c:	defffa04 	addi	sp,sp,-24
    2d30:	df000515 	stw	fp,20(sp)
    2d34:	df000504 	addi	fp,sp,20
    2d38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d3c:	0005303a 	rdctl	r2,status
    2d40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d44:	e0fffc17 	ldw	r3,-16(fp)
    2d48:	00bfff84 	movi	r2,-2
    2d4c:	1884703a 	and	r2,r3,r2
    2d50:	1001703a 	wrctl	status,r2
  
  return context;
    2d54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2d58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2d5c:	e0bfff17 	ldw	r2,-4(fp)
    2d60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800017 	ldw	r2,0(r2)
    2d6c:	e0fffd17 	ldw	r3,-12(fp)
    2d70:	18c00117 	ldw	r3,4(r3)
    2d74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    2d78:	e0bffd17 	ldw	r2,-12(fp)
    2d7c:	10800117 	ldw	r2,4(r2)
    2d80:	e0fffd17 	ldw	r3,-12(fp)
    2d84:	18c00017 	ldw	r3,0(r3)
    2d88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	e0fffd17 	ldw	r3,-12(fp)
    2d94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2d98:	e0bffd17 	ldw	r2,-12(fp)
    2d9c:	e0fffd17 	ldw	r3,-12(fp)
    2da0:	10c00015 	stw	r3,0(r2)
    2da4:	e0bffb17 	ldw	r2,-20(fp)
    2da8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2dac:	e0bffe17 	ldw	r2,-8(fp)
    2db0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2db4:	0001883a 	nop
    2db8:	e037883a 	mov	sp,fp
    2dbc:	df000017 	ldw	fp,0(sp)
    2dc0:	dec00104 	addi	sp,sp,4
    2dc4:	f800283a 	ret

00002dc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2dc8:	defffb04 	addi	sp,sp,-20
    2dcc:	dfc00415 	stw	ra,16(sp)
    2dd0:	df000315 	stw	fp,12(sp)
    2dd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2dd8:	d0a00b17 	ldw	r2,-32724(gp)
    2ddc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2de0:	d0a6b017 	ldw	r2,-25920(gp)
    2de4:	10800044 	addi	r2,r2,1
    2de8:	d0a6b015 	stw	r2,-25920(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2dec:	00002e06 	br	2ea8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    2df0:	e0bffd17 	ldw	r2,-12(fp)
    2df4:	10800017 	ldw	r2,0(r2)
    2df8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2dfc:	e0bffd17 	ldw	r2,-12(fp)
    2e00:	10800403 	ldbu	r2,16(r2)
    2e04:	10803fcc 	andi	r2,r2,255
    2e08:	10000426 	beq	r2,zero,2e1c <alt_tick+0x54>
    2e0c:	d0a6b017 	ldw	r2,-25920(gp)
    2e10:	1000021e 	bne	r2,zero,2e1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2e14:	e0bffd17 	ldw	r2,-12(fp)
    2e18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	10800217 	ldw	r2,8(r2)
    2e24:	d0e6b017 	ldw	r3,-25920(gp)
    2e28:	18801d36 	bltu	r3,r2,2ea0 <alt_tick+0xd8>
    2e2c:	e0bffd17 	ldw	r2,-12(fp)
    2e30:	10800403 	ldbu	r2,16(r2)
    2e34:	10803fcc 	andi	r2,r2,255
    2e38:	1000191e 	bne	r2,zero,2ea0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2e3c:	e0bffd17 	ldw	r2,-12(fp)
    2e40:	10800317 	ldw	r2,12(r2)
    2e44:	e0fffd17 	ldw	r3,-12(fp)
    2e48:	18c00517 	ldw	r3,20(r3)
    2e4c:	1809883a 	mov	r4,r3
    2e50:	103ee83a 	callr	r2
    2e54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2e58:	e0bfff17 	ldw	r2,-4(fp)
    2e5c:	1000031e 	bne	r2,zero,2e6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2e60:	e13ffd17 	ldw	r4,-12(fp)
    2e64:	0002d2c0 	call	2d2c <alt_alarm_stop>
    2e68:	00000d06 	br	2ea0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2e6c:	e0bffd17 	ldw	r2,-12(fp)
    2e70:	10c00217 	ldw	r3,8(r2)
    2e74:	e0bfff17 	ldw	r2,-4(fp)
    2e78:	1887883a 	add	r3,r3,r2
    2e7c:	e0bffd17 	ldw	r2,-12(fp)
    2e80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2e84:	e0bffd17 	ldw	r2,-12(fp)
    2e88:	10c00217 	ldw	r3,8(r2)
    2e8c:	d0a6b017 	ldw	r2,-25920(gp)
    2e90:	1880032e 	bgeu	r3,r2,2ea0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    2e94:	e0bffd17 	ldw	r2,-12(fp)
    2e98:	00c00044 	movi	r3,1
    2e9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    2ea0:	e0bffe17 	ldw	r2,-8(fp)
    2ea4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2ea8:	e0fffd17 	ldw	r3,-12(fp)
    2eac:	d0a00b04 	addi	r2,gp,-32724
    2eb0:	18bfcf1e 	bne	r3,r2,2df0 <__alt_exception_stack_pointer+0xf8002df0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2eb4:	0001883a 	nop
}
    2eb8:	0001883a 	nop
    2ebc:	e037883a 	mov	sp,fp
    2ec0:	dfc00117 	ldw	ra,4(sp)
    2ec4:	df000017 	ldw	fp,0(sp)
    2ec8:	dec00204 	addi	sp,sp,8
    2ecc:	f800283a 	ret

00002ed0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    2ed0:	deffff04 	addi	sp,sp,-4
    2ed4:	df000015 	stw	fp,0(sp)
    2ed8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2edc:	000170fa 	wrctl	ienable,zero
}
    2ee0:	0001883a 	nop
    2ee4:	e037883a 	mov	sp,fp
    2ee8:	df000017 	ldw	fp,0(sp)
    2eec:	dec00104 	addi	sp,sp,4
    2ef0:	f800283a 	ret

00002ef4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2ef4:	defffa04 	addi	sp,sp,-24
    2ef8:	dfc00515 	stw	ra,20(sp)
    2efc:	df000415 	stw	fp,16(sp)
    2f00:	df000404 	addi	fp,sp,16
    2f04:	e13ffe15 	stw	r4,-8(fp)
    2f08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2f0c:	e0bfff17 	ldw	r2,-4(fp)
    2f10:	10800017 	ldw	r2,0(r2)
    2f14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2f18:	e13ffe17 	ldw	r4,-8(fp)
    2f1c:	00033fc0 	call	33fc <strlen>
    2f20:	10800044 	addi	r2,r2,1
    2f24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2f28:	00000d06 	br	2f60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2f2c:	e0bffc17 	ldw	r2,-16(fp)
    2f30:	10800217 	ldw	r2,8(r2)
    2f34:	e0fffd17 	ldw	r3,-12(fp)
    2f38:	180d883a 	mov	r6,r3
    2f3c:	e17ffe17 	ldw	r5,-8(fp)
    2f40:	1009883a 	mov	r4,r2
    2f44:	00032380 	call	3238 <memcmp>
    2f48:	1000021e 	bne	r2,zero,2f54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2f4c:	e0bffc17 	ldw	r2,-16(fp)
    2f50:	00000706 	br	2f70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2f54:	e0bffc17 	ldw	r2,-16(fp)
    2f58:	10800017 	ldw	r2,0(r2)
    2f5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2f60:	e0fffc17 	ldw	r3,-16(fp)
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	18bff01e 	bne	r3,r2,2f2c <__alt_exception_stack_pointer+0xf8002f2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2f6c:	0005883a 	mov	r2,zero
}
    2f70:	e037883a 	mov	sp,fp
    2f74:	dfc00117 	ldw	ra,4(sp)
    2f78:	df000017 	ldw	fp,0(sp)
    2f7c:	dec00204 	addi	sp,sp,8
    2f80:	f800283a 	ret

00002f84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2f84:	defffb04 	addi	sp,sp,-20
    2f88:	dfc00415 	stw	ra,16(sp)
    2f8c:	df000315 	stw	fp,12(sp)
    2f90:	df000304 	addi	fp,sp,12
    2f94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2f98:	d0a00517 	ldw	r2,-32748(gp)
    2f9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2fa0:	00003106 	br	3068 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    2fa4:	e0bffd17 	ldw	r2,-12(fp)
    2fa8:	10800217 	ldw	r2,8(r2)
    2fac:	1009883a 	mov	r4,r2
    2fb0:	00033fc0 	call	33fc <strlen>
    2fb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	10c00217 	ldw	r3,8(r2)
    2fc0:	e0bffe17 	ldw	r2,-8(fp)
    2fc4:	10bfffc4 	addi	r2,r2,-1
    2fc8:	1885883a 	add	r2,r3,r2
    2fcc:	10800003 	ldbu	r2,0(r2)
    2fd0:	10803fcc 	andi	r2,r2,255
    2fd4:	1080201c 	xori	r2,r2,128
    2fd8:	10bfe004 	addi	r2,r2,-128
    2fdc:	10800bd8 	cmpnei	r2,r2,47
    2fe0:	1000031e 	bne	r2,zero,2ff0 <alt_find_file+0x6c>
    {
      len -= 1;
    2fe4:	e0bffe17 	ldw	r2,-8(fp)
    2fe8:	10bfffc4 	addi	r2,r2,-1
    2fec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2ff0:	e0bffe17 	ldw	r2,-8(fp)
    2ff4:	e0ffff17 	ldw	r3,-4(fp)
    2ff8:	1885883a 	add	r2,r3,r2
    2ffc:	10800003 	ldbu	r2,0(r2)
    3000:	10803fcc 	andi	r2,r2,255
    3004:	1080201c 	xori	r2,r2,128
    3008:	10bfe004 	addi	r2,r2,-128
    300c:	10800be0 	cmpeqi	r2,r2,47
    3010:	1000081e 	bne	r2,zero,3034 <alt_find_file+0xb0>
    3014:	e0bffe17 	ldw	r2,-8(fp)
    3018:	e0ffff17 	ldw	r3,-4(fp)
    301c:	1885883a 	add	r2,r3,r2
    3020:	10800003 	ldbu	r2,0(r2)
    3024:	10803fcc 	andi	r2,r2,255
    3028:	1080201c 	xori	r2,r2,128
    302c:	10bfe004 	addi	r2,r2,-128
    3030:	10000a1e 	bne	r2,zero,305c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    3034:	e0bffd17 	ldw	r2,-12(fp)
    3038:	10800217 	ldw	r2,8(r2)
    303c:	e0fffe17 	ldw	r3,-8(fp)
    3040:	180d883a 	mov	r6,r3
    3044:	e17fff17 	ldw	r5,-4(fp)
    3048:	1009883a 	mov	r4,r2
    304c:	00032380 	call	3238 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3050:	1000021e 	bne	r2,zero,305c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3054:	e0bffd17 	ldw	r2,-12(fp)
    3058:	00000706 	br	3078 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    305c:	e0bffd17 	ldw	r2,-12(fp)
    3060:	10800017 	ldw	r2,0(r2)
    3064:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3068:	e0fffd17 	ldw	r3,-12(fp)
    306c:	d0a00504 	addi	r2,gp,-32748
    3070:	18bfcc1e 	bne	r3,r2,2fa4 <__alt_exception_stack_pointer+0xf8002fa4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3074:	0005883a 	mov	r2,zero
}
    3078:	e037883a 	mov	sp,fp
    307c:	dfc00117 	ldw	ra,4(sp)
    3080:	df000017 	ldw	fp,0(sp)
    3084:	dec00204 	addi	sp,sp,8
    3088:	f800283a 	ret

0000308c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    308c:	defffa04 	addi	sp,sp,-24
    3090:	dfc00515 	stw	ra,20(sp)
    3094:	df000415 	stw	fp,16(sp)
    3098:	dc000315 	stw	r16,12(sp)
    309c:	df000404 	addi	fp,sp,16
    30a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    30a4:	00bffa04 	movi	r2,-24
    30a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    30ac:	e03ffc15 	stw	zero,-16(fp)
    30b0:	00001d06 	br	3128 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    30b4:	04000034 	movhi	r16,0
    30b8:	84141604 	addi	r16,r16,20568
    30bc:	e0bffc17 	ldw	r2,-16(fp)
    30c0:	01400304 	movi	r5,12
    30c4:	1009883a 	mov	r4,r2
    30c8:	000066c0 	call	66c <__mulsi3>
    30cc:	8085883a 	add	r2,r16,r2
    30d0:	10800017 	ldw	r2,0(r2)
    30d4:	1000111e 	bne	r2,zero,311c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    30d8:	04000034 	movhi	r16,0
    30dc:	84141604 	addi	r16,r16,20568
    30e0:	e0bffc17 	ldw	r2,-16(fp)
    30e4:	01400304 	movi	r5,12
    30e8:	1009883a 	mov	r4,r2
    30ec:	000066c0 	call	66c <__mulsi3>
    30f0:	8085883a 	add	r2,r16,r2
    30f4:	e0fffe17 	ldw	r3,-8(fp)
    30f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    30fc:	d0e00917 	ldw	r3,-32732(gp)
    3100:	e0bffc17 	ldw	r2,-16(fp)
    3104:	1880020e 	bge	r3,r2,3110 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    3108:	e0bffc17 	ldw	r2,-16(fp)
    310c:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
    3110:	e0bffc17 	ldw	r2,-16(fp)
    3114:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3118:	00000606 	br	3134 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    311c:	e0bffc17 	ldw	r2,-16(fp)
    3120:	10800044 	addi	r2,r2,1
    3124:	e0bffc15 	stw	r2,-16(fp)
    3128:	e0bffc17 	ldw	r2,-16(fp)
    312c:	10800810 	cmplti	r2,r2,32
    3130:	103fe01e 	bne	r2,zero,30b4 <__alt_exception_stack_pointer+0xf80030b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3134:	e0bffd17 	ldw	r2,-12(fp)
}
    3138:	e6ffff04 	addi	sp,fp,-4
    313c:	dfc00217 	ldw	ra,8(sp)
    3140:	df000117 	ldw	fp,4(sp)
    3144:	dc000017 	ldw	r16,0(sp)
    3148:	dec00304 	addi	sp,sp,12
    314c:	f800283a 	ret

00003150 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    3150:	defffe04 	addi	sp,sp,-8
    3154:	df000115 	stw	fp,4(sp)
    3158:	df000104 	addi	fp,sp,4
    315c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    3160:	e0bfff17 	ldw	r2,-4(fp)
    3164:	10bffe84 	addi	r2,r2,-6
    3168:	10c00428 	cmpgeui	r3,r2,16
    316c:	18001a1e 	bne	r3,zero,31d8 <alt_exception_cause_generated_bad_addr+0x88>
    3170:	100690ba 	slli	r3,r2,2
    3174:	00800034 	movhi	r2,0
    3178:	108c6204 	addi	r2,r2,12680
    317c:	1885883a 	add	r2,r3,r2
    3180:	10800017 	ldw	r2,0(r2)
    3184:	1000683a 	jmp	r2
    3188:	000031c8 	cmpgei	zero,zero,199
    318c:	000031c8 	cmpgei	zero,zero,199
    3190:	000031d8 	cmpnei	zero,zero,199
    3194:	000031d8 	cmpnei	zero,zero,199
    3198:	000031d8 	cmpnei	zero,zero,199
    319c:	000031c8 	cmpgei	zero,zero,199
    31a0:	000031d0 	cmplti	zero,zero,199
    31a4:	000031d8 	cmpnei	zero,zero,199
    31a8:	000031c8 	cmpgei	zero,zero,199
    31ac:	000031c8 	cmpgei	zero,zero,199
    31b0:	000031d8 	cmpnei	zero,zero,199
    31b4:	000031c8 	cmpgei	zero,zero,199
    31b8:	000031d0 	cmplti	zero,zero,199
    31bc:	000031d8 	cmpnei	zero,zero,199
    31c0:	000031d8 	cmpnei	zero,zero,199
    31c4:	000031c8 	cmpgei	zero,zero,199
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    31c8:	00800044 	movi	r2,1
    31cc:	00000306 	br	31dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    31d0:	0005883a 	mov	r2,zero
    31d4:	00000106 	br	31dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    31d8:	0005883a 	mov	r2,zero
  }
}
    31dc:	e037883a 	mov	sp,fp
    31e0:	df000017 	ldw	fp,0(sp)
    31e4:	dec00104 	addi	sp,sp,4
    31e8:	f800283a 	ret

000031ec <atexit>:
    31ec:	200b883a 	mov	r5,r4
    31f0:	000f883a 	mov	r7,zero
    31f4:	000d883a 	mov	r6,zero
    31f8:	0009883a 	mov	r4,zero
    31fc:	00034941 	jmpi	3494 <__register_exitproc>

00003200 <exit>:
    3200:	defffe04 	addi	sp,sp,-8
    3204:	000b883a 	mov	r5,zero
    3208:	dc000015 	stw	r16,0(sp)
    320c:	dfc00115 	stw	ra,4(sp)
    3210:	2021883a 	mov	r16,r4
    3214:	00035ac0 	call	35ac <__call_exitprocs>
    3218:	00800034 	movhi	r2,0
    321c:	10947804 	addi	r2,r2,20960
    3220:	11000017 	ldw	r4,0(r2)
    3224:	20800f17 	ldw	r2,60(r4)
    3228:	10000126 	beq	r2,zero,3230 <exit+0x30>
    322c:	103ee83a 	callr	r2
    3230:	8009883a 	mov	r4,r16
    3234:	000372c0 	call	372c <_exit>

00003238 <memcmp>:
    3238:	01c000c4 	movi	r7,3
    323c:	3980192e 	bgeu	r7,r6,32a4 <memcmp+0x6c>
    3240:	2144b03a 	or	r2,r4,r5
    3244:	11c4703a 	and	r2,r2,r7
    3248:	10000f26 	beq	r2,zero,3288 <memcmp+0x50>
    324c:	20800003 	ldbu	r2,0(r4)
    3250:	28c00003 	ldbu	r3,0(r5)
    3254:	10c0151e 	bne	r2,r3,32ac <memcmp+0x74>
    3258:	31bfff84 	addi	r6,r6,-2
    325c:	01ffffc4 	movi	r7,-1
    3260:	00000406 	br	3274 <memcmp+0x3c>
    3264:	20800003 	ldbu	r2,0(r4)
    3268:	28c00003 	ldbu	r3,0(r5)
    326c:	31bfffc4 	addi	r6,r6,-1
    3270:	10c00e1e 	bne	r2,r3,32ac <memcmp+0x74>
    3274:	21000044 	addi	r4,r4,1
    3278:	29400044 	addi	r5,r5,1
    327c:	31fff91e 	bne	r6,r7,3264 <__alt_exception_stack_pointer+0xf8003264>
    3280:	0005883a 	mov	r2,zero
    3284:	f800283a 	ret
    3288:	20c00017 	ldw	r3,0(r4)
    328c:	28800017 	ldw	r2,0(r5)
    3290:	18bfee1e 	bne	r3,r2,324c <__alt_exception_stack_pointer+0xf800324c>
    3294:	31bfff04 	addi	r6,r6,-4
    3298:	21000104 	addi	r4,r4,4
    329c:	29400104 	addi	r5,r5,4
    32a0:	39bff936 	bltu	r7,r6,3288 <__alt_exception_stack_pointer+0xf8003288>
    32a4:	303fe91e 	bne	r6,zero,324c <__alt_exception_stack_pointer+0xf800324c>
    32a8:	003ff506 	br	3280 <__alt_exception_stack_pointer+0xf8003280>
    32ac:	10c5c83a 	sub	r2,r2,r3
    32b0:	f800283a 	ret

000032b4 <memcpy>:
    32b4:	defffd04 	addi	sp,sp,-12
    32b8:	dfc00215 	stw	ra,8(sp)
    32bc:	dc400115 	stw	r17,4(sp)
    32c0:	dc000015 	stw	r16,0(sp)
    32c4:	00c003c4 	movi	r3,15
    32c8:	2005883a 	mov	r2,r4
    32cc:	1980452e 	bgeu	r3,r6,33e4 <memcpy+0x130>
    32d0:	2906b03a 	or	r3,r5,r4
    32d4:	18c000cc 	andi	r3,r3,3
    32d8:	1800441e 	bne	r3,zero,33ec <memcpy+0x138>
    32dc:	347ffc04 	addi	r17,r6,-16
    32e0:	8822d13a 	srli	r17,r17,4
    32e4:	28c00104 	addi	r3,r5,4
    32e8:	23400104 	addi	r13,r4,4
    32ec:	8820913a 	slli	r16,r17,4
    32f0:	2b000204 	addi	r12,r5,8
    32f4:	22c00204 	addi	r11,r4,8
    32f8:	84000504 	addi	r16,r16,20
    32fc:	2a800304 	addi	r10,r5,12
    3300:	22400304 	addi	r9,r4,12
    3304:	2c21883a 	add	r16,r5,r16
    3308:	2811883a 	mov	r8,r5
    330c:	200f883a 	mov	r7,r4
    3310:	41000017 	ldw	r4,0(r8)
    3314:	1fc00017 	ldw	ra,0(r3)
    3318:	63c00017 	ldw	r15,0(r12)
    331c:	39000015 	stw	r4,0(r7)
    3320:	53800017 	ldw	r14,0(r10)
    3324:	6fc00015 	stw	ra,0(r13)
    3328:	5bc00015 	stw	r15,0(r11)
    332c:	4b800015 	stw	r14,0(r9)
    3330:	18c00404 	addi	r3,r3,16
    3334:	39c00404 	addi	r7,r7,16
    3338:	42000404 	addi	r8,r8,16
    333c:	6b400404 	addi	r13,r13,16
    3340:	63000404 	addi	r12,r12,16
    3344:	5ac00404 	addi	r11,r11,16
    3348:	52800404 	addi	r10,r10,16
    334c:	4a400404 	addi	r9,r9,16
    3350:	1c3fef1e 	bne	r3,r16,3310 <__alt_exception_stack_pointer+0xf8003310>
    3354:	89c00044 	addi	r7,r17,1
    3358:	380e913a 	slli	r7,r7,4
    335c:	310003cc 	andi	r4,r6,15
    3360:	02c000c4 	movi	r11,3
    3364:	11c7883a 	add	r3,r2,r7
    3368:	29cb883a 	add	r5,r5,r7
    336c:	5900212e 	bgeu	r11,r4,33f4 <memcpy+0x140>
    3370:	1813883a 	mov	r9,r3
    3374:	2811883a 	mov	r8,r5
    3378:	200f883a 	mov	r7,r4
    337c:	42800017 	ldw	r10,0(r8)
    3380:	4a400104 	addi	r9,r9,4
    3384:	39ffff04 	addi	r7,r7,-4
    3388:	4abfff15 	stw	r10,-4(r9)
    338c:	42000104 	addi	r8,r8,4
    3390:	59fffa36 	bltu	r11,r7,337c <__alt_exception_stack_pointer+0xf800337c>
    3394:	213fff04 	addi	r4,r4,-4
    3398:	2008d0ba 	srli	r4,r4,2
    339c:	318000cc 	andi	r6,r6,3
    33a0:	21000044 	addi	r4,r4,1
    33a4:	2109883a 	add	r4,r4,r4
    33a8:	2109883a 	add	r4,r4,r4
    33ac:	1907883a 	add	r3,r3,r4
    33b0:	290b883a 	add	r5,r5,r4
    33b4:	30000626 	beq	r6,zero,33d0 <memcpy+0x11c>
    33b8:	198d883a 	add	r6,r3,r6
    33bc:	29c00003 	ldbu	r7,0(r5)
    33c0:	18c00044 	addi	r3,r3,1
    33c4:	29400044 	addi	r5,r5,1
    33c8:	19ffffc5 	stb	r7,-1(r3)
    33cc:	19bffb1e 	bne	r3,r6,33bc <__alt_exception_stack_pointer+0xf80033bc>
    33d0:	dfc00217 	ldw	ra,8(sp)
    33d4:	dc400117 	ldw	r17,4(sp)
    33d8:	dc000017 	ldw	r16,0(sp)
    33dc:	dec00304 	addi	sp,sp,12
    33e0:	f800283a 	ret
    33e4:	2007883a 	mov	r3,r4
    33e8:	003ff206 	br	33b4 <__alt_exception_stack_pointer+0xf80033b4>
    33ec:	2007883a 	mov	r3,r4
    33f0:	003ff106 	br	33b8 <__alt_exception_stack_pointer+0xf80033b8>
    33f4:	200d883a 	mov	r6,r4
    33f8:	003fee06 	br	33b4 <__alt_exception_stack_pointer+0xf80033b4>

000033fc <strlen>:
    33fc:	208000cc 	andi	r2,r4,3
    3400:	10002026 	beq	r2,zero,3484 <strlen+0x88>
    3404:	20800007 	ldb	r2,0(r4)
    3408:	10002026 	beq	r2,zero,348c <strlen+0x90>
    340c:	2005883a 	mov	r2,r4
    3410:	00000206 	br	341c <strlen+0x20>
    3414:	10c00007 	ldb	r3,0(r2)
    3418:	18001826 	beq	r3,zero,347c <strlen+0x80>
    341c:	10800044 	addi	r2,r2,1
    3420:	10c000cc 	andi	r3,r2,3
    3424:	183ffb1e 	bne	r3,zero,3414 <__alt_exception_stack_pointer+0xf8003414>
    3428:	10c00017 	ldw	r3,0(r2)
    342c:	01ffbff4 	movhi	r7,65279
    3430:	39ffbfc4 	addi	r7,r7,-257
    3434:	00ca303a 	nor	r5,zero,r3
    3438:	01a02074 	movhi	r6,32897
    343c:	19c7883a 	add	r3,r3,r7
    3440:	31a02004 	addi	r6,r6,-32640
    3444:	1946703a 	and	r3,r3,r5
    3448:	1986703a 	and	r3,r3,r6
    344c:	1800091e 	bne	r3,zero,3474 <strlen+0x78>
    3450:	10800104 	addi	r2,r2,4
    3454:	10c00017 	ldw	r3,0(r2)
    3458:	19cb883a 	add	r5,r3,r7
    345c:	00c6303a 	nor	r3,zero,r3
    3460:	28c6703a 	and	r3,r5,r3
    3464:	1986703a 	and	r3,r3,r6
    3468:	183ff926 	beq	r3,zero,3450 <__alt_exception_stack_pointer+0xf8003450>
    346c:	00000106 	br	3474 <strlen+0x78>
    3470:	10800044 	addi	r2,r2,1
    3474:	10c00007 	ldb	r3,0(r2)
    3478:	183ffd1e 	bne	r3,zero,3470 <__alt_exception_stack_pointer+0xf8003470>
    347c:	1105c83a 	sub	r2,r2,r4
    3480:	f800283a 	ret
    3484:	2005883a 	mov	r2,r4
    3488:	003fe706 	br	3428 <__alt_exception_stack_pointer+0xf8003428>
    348c:	0005883a 	mov	r2,zero
    3490:	f800283a 	ret

00003494 <__register_exitproc>:
    3494:	defffa04 	addi	sp,sp,-24
    3498:	dc000315 	stw	r16,12(sp)
    349c:	04000034 	movhi	r16,0
    34a0:	84147804 	addi	r16,r16,20960
    34a4:	80c00017 	ldw	r3,0(r16)
    34a8:	dc400415 	stw	r17,16(sp)
    34ac:	dfc00515 	stw	ra,20(sp)
    34b0:	18805217 	ldw	r2,328(r3)
    34b4:	2023883a 	mov	r17,r4
    34b8:	10003726 	beq	r2,zero,3598 <__register_exitproc+0x104>
    34bc:	10c00117 	ldw	r3,4(r2)
    34c0:	010007c4 	movi	r4,31
    34c4:	20c00e16 	blt	r4,r3,3500 <__register_exitproc+0x6c>
    34c8:	1a000044 	addi	r8,r3,1
    34cc:	8800221e 	bne	r17,zero,3558 <__register_exitproc+0xc4>
    34d0:	18c00084 	addi	r3,r3,2
    34d4:	18c7883a 	add	r3,r3,r3
    34d8:	18c7883a 	add	r3,r3,r3
    34dc:	12000115 	stw	r8,4(r2)
    34e0:	10c7883a 	add	r3,r2,r3
    34e4:	19400015 	stw	r5,0(r3)
    34e8:	0005883a 	mov	r2,zero
    34ec:	dfc00517 	ldw	ra,20(sp)
    34f0:	dc400417 	ldw	r17,16(sp)
    34f4:	dc000317 	ldw	r16,12(sp)
    34f8:	dec00604 	addi	sp,sp,24
    34fc:	f800283a 	ret
    3500:	00800034 	movhi	r2,0
    3504:	1081a504 	addi	r2,r2,1684
    3508:	10002626 	beq	r2,zero,35a4 <__register_exitproc+0x110>
    350c:	01006404 	movi	r4,400
    3510:	d9400015 	stw	r5,0(sp)
    3514:	d9800115 	stw	r6,4(sp)
    3518:	d9c00215 	stw	r7,8(sp)
    351c:	00006940 	call	694 <malloc>
    3520:	d9400017 	ldw	r5,0(sp)
    3524:	d9800117 	ldw	r6,4(sp)
    3528:	d9c00217 	ldw	r7,8(sp)
    352c:	10001d26 	beq	r2,zero,35a4 <__register_exitproc+0x110>
    3530:	81000017 	ldw	r4,0(r16)
    3534:	10000115 	stw	zero,4(r2)
    3538:	02000044 	movi	r8,1
    353c:	22405217 	ldw	r9,328(r4)
    3540:	0007883a 	mov	r3,zero
    3544:	12400015 	stw	r9,0(r2)
    3548:	20805215 	stw	r2,328(r4)
    354c:	10006215 	stw	zero,392(r2)
    3550:	10006315 	stw	zero,396(r2)
    3554:	883fde26 	beq	r17,zero,34d0 <__alt_exception_stack_pointer+0xf80034d0>
    3558:	18c9883a 	add	r4,r3,r3
    355c:	2109883a 	add	r4,r4,r4
    3560:	1109883a 	add	r4,r2,r4
    3564:	21802215 	stw	r6,136(r4)
    3568:	01800044 	movi	r6,1
    356c:	12406217 	ldw	r9,392(r2)
    3570:	30cc983a 	sll	r6,r6,r3
    3574:	4992b03a 	or	r9,r9,r6
    3578:	12406215 	stw	r9,392(r2)
    357c:	21c04215 	stw	r7,264(r4)
    3580:	01000084 	movi	r4,2
    3584:	893fd21e 	bne	r17,r4,34d0 <__alt_exception_stack_pointer+0xf80034d0>
    3588:	11006317 	ldw	r4,396(r2)
    358c:	218cb03a 	or	r6,r4,r6
    3590:	11806315 	stw	r6,396(r2)
    3594:	003fce06 	br	34d0 <__alt_exception_stack_pointer+0xf80034d0>
    3598:	18805304 	addi	r2,r3,332
    359c:	18805215 	stw	r2,328(r3)
    35a0:	003fc606 	br	34bc <__alt_exception_stack_pointer+0xf80034bc>
    35a4:	00bfffc4 	movi	r2,-1
    35a8:	003fd006 	br	34ec <__alt_exception_stack_pointer+0xf80034ec>

000035ac <__call_exitprocs>:
    35ac:	defff504 	addi	sp,sp,-44
    35b0:	df000915 	stw	fp,36(sp)
    35b4:	dd400615 	stw	r21,24(sp)
    35b8:	dc800315 	stw	r18,12(sp)
    35bc:	dfc00a15 	stw	ra,40(sp)
    35c0:	ddc00815 	stw	r23,32(sp)
    35c4:	dd800715 	stw	r22,28(sp)
    35c8:	dd000515 	stw	r20,20(sp)
    35cc:	dcc00415 	stw	r19,16(sp)
    35d0:	dc400215 	stw	r17,8(sp)
    35d4:	dc000115 	stw	r16,4(sp)
    35d8:	d9000015 	stw	r4,0(sp)
    35dc:	2839883a 	mov	fp,r5
    35e0:	04800044 	movi	r18,1
    35e4:	057fffc4 	movi	r21,-1
    35e8:	00800034 	movhi	r2,0
    35ec:	10947804 	addi	r2,r2,20960
    35f0:	12000017 	ldw	r8,0(r2)
    35f4:	45005217 	ldw	r20,328(r8)
    35f8:	44c05204 	addi	r19,r8,328
    35fc:	a0001c26 	beq	r20,zero,3670 <__call_exitprocs+0xc4>
    3600:	a0800117 	ldw	r2,4(r20)
    3604:	15ffffc4 	addi	r23,r2,-1
    3608:	b8000d16 	blt	r23,zero,3640 <__call_exitprocs+0x94>
    360c:	14000044 	addi	r16,r2,1
    3610:	8421883a 	add	r16,r16,r16
    3614:	8421883a 	add	r16,r16,r16
    3618:	84402004 	addi	r17,r16,128
    361c:	a463883a 	add	r17,r20,r17
    3620:	a421883a 	add	r16,r20,r16
    3624:	e0001e26 	beq	fp,zero,36a0 <__call_exitprocs+0xf4>
    3628:	80804017 	ldw	r2,256(r16)
    362c:	e0801c26 	beq	fp,r2,36a0 <__call_exitprocs+0xf4>
    3630:	bdffffc4 	addi	r23,r23,-1
    3634:	843fff04 	addi	r16,r16,-4
    3638:	8c7fff04 	addi	r17,r17,-4
    363c:	bd7ff91e 	bne	r23,r21,3624 <__alt_exception_stack_pointer+0xf8003624>
    3640:	00800034 	movhi	r2,0
    3644:	1081aa04 	addi	r2,r2,1704
    3648:	10000926 	beq	r2,zero,3670 <__call_exitprocs+0xc4>
    364c:	a0800117 	ldw	r2,4(r20)
    3650:	1000301e 	bne	r2,zero,3714 <__call_exitprocs+0x168>
    3654:	a0800017 	ldw	r2,0(r20)
    3658:	10003226 	beq	r2,zero,3724 <__call_exitprocs+0x178>
    365c:	a009883a 	mov	r4,r20
    3660:	98800015 	stw	r2,0(r19)
    3664:	00006a80 	call	6a8 <free>
    3668:	9d000017 	ldw	r20,0(r19)
    366c:	a03fe41e 	bne	r20,zero,3600 <__alt_exception_stack_pointer+0xf8003600>
    3670:	dfc00a17 	ldw	ra,40(sp)
    3674:	df000917 	ldw	fp,36(sp)
    3678:	ddc00817 	ldw	r23,32(sp)
    367c:	dd800717 	ldw	r22,28(sp)
    3680:	dd400617 	ldw	r21,24(sp)
    3684:	dd000517 	ldw	r20,20(sp)
    3688:	dcc00417 	ldw	r19,16(sp)
    368c:	dc800317 	ldw	r18,12(sp)
    3690:	dc400217 	ldw	r17,8(sp)
    3694:	dc000117 	ldw	r16,4(sp)
    3698:	dec00b04 	addi	sp,sp,44
    369c:	f800283a 	ret
    36a0:	a0800117 	ldw	r2,4(r20)
    36a4:	80c00017 	ldw	r3,0(r16)
    36a8:	10bfffc4 	addi	r2,r2,-1
    36ac:	15c01426 	beq	r2,r23,3700 <__call_exitprocs+0x154>
    36b0:	80000015 	stw	zero,0(r16)
    36b4:	183fde26 	beq	r3,zero,3630 <__alt_exception_stack_pointer+0xf8003630>
    36b8:	95c8983a 	sll	r4,r18,r23
    36bc:	a0806217 	ldw	r2,392(r20)
    36c0:	a5800117 	ldw	r22,4(r20)
    36c4:	2084703a 	and	r2,r4,r2
    36c8:	10000b26 	beq	r2,zero,36f8 <__call_exitprocs+0x14c>
    36cc:	a0806317 	ldw	r2,396(r20)
    36d0:	2088703a 	and	r4,r4,r2
    36d4:	20000c1e 	bne	r4,zero,3708 <__call_exitprocs+0x15c>
    36d8:	89400017 	ldw	r5,0(r17)
    36dc:	d9000017 	ldw	r4,0(sp)
    36e0:	183ee83a 	callr	r3
    36e4:	a0800117 	ldw	r2,4(r20)
    36e8:	15bfbf1e 	bne	r2,r22,35e8 <__alt_exception_stack_pointer+0xf80035e8>
    36ec:	98800017 	ldw	r2,0(r19)
    36f0:	153fcf26 	beq	r2,r20,3630 <__alt_exception_stack_pointer+0xf8003630>
    36f4:	003fbc06 	br	35e8 <__alt_exception_stack_pointer+0xf80035e8>
    36f8:	183ee83a 	callr	r3
    36fc:	003ff906 	br	36e4 <__alt_exception_stack_pointer+0xf80036e4>
    3700:	a5c00115 	stw	r23,4(r20)
    3704:	003feb06 	br	36b4 <__alt_exception_stack_pointer+0xf80036b4>
    3708:	89000017 	ldw	r4,0(r17)
    370c:	183ee83a 	callr	r3
    3710:	003ff406 	br	36e4 <__alt_exception_stack_pointer+0xf80036e4>
    3714:	a0800017 	ldw	r2,0(r20)
    3718:	a027883a 	mov	r19,r20
    371c:	1029883a 	mov	r20,r2
    3720:	003fb606 	br	35fc <__alt_exception_stack_pointer+0xf80035fc>
    3724:	0005883a 	mov	r2,zero
    3728:	003ffb06 	br	3718 <__alt_exception_stack_pointer+0xf8003718>

0000372c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    372c:	defffd04 	addi	sp,sp,-12
    3730:	df000215 	stw	fp,8(sp)
    3734:	df000204 	addi	fp,sp,8
    3738:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    373c:	0001883a 	nop
    3740:	e0bfff17 	ldw	r2,-4(fp)
    3744:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    3748:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    374c:	10000226 	beq	r2,zero,3758 <_exit+0x2c>
    ALT_SIM_FAIL();
    3750:	002af070 	cmpltui	zero,zero,43969
    3754:	00000106 	br	375c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    3758:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    375c:	003fff06 	br	375c <__alt_exception_stack_pointer+0xf800375c>
